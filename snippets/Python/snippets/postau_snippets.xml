<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>5090944</id><snippet>python</snippet></ROW><ROW><id>5090944</id><snippet>Enter</snippet></ROW><ROW><id>5090944</id><snippet>import MySQLdb</snippet></ROW><ROW><id>5090944</id><snippet>Enter</snippet></ROW><ROW><id>5091577</id><snippet>select()</snippet></ROW><ROW><id>5091577</id><snippet>sread</snippet></ROW><ROW><id>5091577</id><snippet>select()</snippet></ROW><ROW><id>5091577</id><snippet>recv</snippet></ROW><ROW><id>5091736</id><snippet>partial()</snippet></ROW><ROW><id>5091736</id><snippet>__doc__</snippet></ROW><ROW><id>5091736</id><snippet>functools.partial()</snippet></ROW><ROW><id>5091736</id><snippet>sort_by_score(identity_scoring, foo)
</snippet></ROW><ROW><id>5092255</id><snippet>matplotlib.rcsetup.interactive_bk
matplotlib.rcsetup.non_interactive_bk
matplotlib.rcsetup.all_backends
</snippet></ROW><ROW><id>5092255</id><snippet>matplotlib.rcsetup.validate_backend(name)
</snippet></ROW><ROW><id>5092385</id><snippet>q = Q(**{"categories__slug_" + current_lang + "__contains": slug})
items = Items.objects.filter(q)
</snippet></ROW><ROW><id>5093086</id><snippet>root.xpath("//article[@type='news']")</snippet></ROW><ROW><id>5093086</id><snippet>&lt;article/&gt;</snippet></ROW><ROW><id>5093086</id><snippet>root = etree.fromstring("""
&lt;root&gt;
    &lt;articles&gt;
        &lt;article type="news"&gt;
             &lt;content&gt;some text&lt;/content&gt;
        &lt;/article&gt;
        &lt;article type="info"&gt;
             &lt;content&gt;some text&lt;/content&gt;
        &lt;/article&gt;
        &lt;article type="news"&gt;
             &lt;content&gt;some text&lt;/content&gt;
        &lt;/article&gt;
    &lt;/articles&gt;
&lt;/root&gt;
""")

print root.xpath("//article[@type='news']/content/text()")
</snippet></ROW><ROW><id>5093086</id><snippet>['some text', 'some text']</snippet></ROW><ROW><id>5093086</id><snippet>"//article[@type='news']/content"</snippet></ROW><ROW><id>5093146</id><snippet>import yaml</snippet></ROW><ROW><id>5093228</id><snippet>import inspect
import traceback

def method():
   frame = inspect.currentframe()
   stack_trace = traceback.format_stack(frame)
   print ''.join(stack_trace)
</snippet></ROW><ROW><id>5093230</id><snippet>from google.appengine.ext.webapp import template
template.register_template_library('path.to.lib')
</snippet></ROW><ROW><id>5093230</id><snippet>template.register_template_library</snippet></ROW><ROW><id>5093230</id><snippet>main.py</snippet></ROW><ROW><id>5093230</id><snippet>{% load %}</snippet></ROW><ROW><id>5093230</id><snippet>register_template_library</snippet></ROW><ROW><id>5093418</id><snippet>X</snippet></ROW><ROW><id>5093418</id><snippet>class X(object):
    var1 = 1
    def __enter__(self):
        return self
    def __exit__(self, type, value, traceback):
        pass
</snippet></ROW><ROW><id>5093418</id><snippet>with</snippet></ROW><ROW><id>5093418</id><snippet>__enter__()</snippet></ROW><ROW><id>5093418</id><snippet>as</snippet></ROW><ROW><id>5093418</id><snippet>__enter__()</snippet></ROW><ROW><id>5093418</id><snippet>None</snippet></ROW><ROW><id>5093418</id><snippet>z</snippet></ROW><ROW><id>5093587</id><snippet>select.select()</snippet></ROW><ROW><id>5094200</id><snippet>or</snippet></ROW><ROW><id>5094200</id><snippet>|</snippet></ROW><ROW><id>5094200</id><snippet>chars[rand]</snippet></ROW><ROW><id>5094200</id><snippet>chars(rand)</snippet></ROW><ROW><id>5094200</id><snippet>MAC</snippet></ROW><ROW><id>5094200</id><snippet>random</snippet></ROW><ROW><id>5094200</id><snippet>randint</snippet></ROW><ROW><id>5094200</id><snippet>MAC = ':'.join(['%02x'%c for c in [0, 0]+[random.randint(0,255) for d in range(4)]])
</snippet></ROW><ROW><id>5094413</id><snippet>self.thread = threading.Thread(target=self.run, args=())
self.thread.setDaemon(True)
self.thread.start()

def run(self):
    while self.is_listening:
        cmd = ['application.exe']
        self.proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        self.proc.wait()
        data = ""
        while True:
            txt = self.proc.stdout.readline()
            data = txt[5:].strip()
            txt += data
</snippet></ROW><ROW><id>5094413</id><snippet>self.exit = False
self.thread = threading.Thread(target=self.run, args=())
self.thread.setDaemon(True)
self.thread.start()

def run(self):
    while self.is_listening:
        cmd = ['application.exe']
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while proc.poll() is None or not self.exit:
            pass
        data = ""
        while True:
            if self.exit:
                break
            txt = proc.stdout.readline()
            data = txt[5:].strip()
            txt += data
</snippet></ROW><ROW><id>5094994</id><snippet>@expr
def f(...):
    ...
</snippet></ROW><ROW><id>5094994</id><snippet>def f(...):
    ...
f = expr(f)
</snippet></ROW><ROW><id>5094994</id><snippet>attrs(argument_types=..., ...)(lambda: ...)</snippet></ROW><ROW><id>5095010</id><snippet>yield_items_from</snippet></ROW><ROW><id>5095010</id><snippet>&lt;a href="http://docs.python.org/library/itertools.html#itertools.chain" rel="nofollow"&gt;itertools.chain&lt;/a&gt;</snippet></ROW><ROW><id>5095010</id><snippet>new_iter = itertools.chain(['prefix item'], old_iter, appended_iter)
</snippet></ROW><ROW><id>5095024</id><snippet>unicode</snippet></ROW><ROW><id>5095171</id><snippet>collection.Counter</snippet></ROW><ROW><id>5095171</id><snippet>a = [3,4,5,5,5,6]
b = [1,3,4,4,5,5,6,7]

a_multiset = collections.Counter(a)
b_multiset = collections.Counter(b)

overlap = list((a_multiset &amp; b_multiset).elements())
a_remainder = list((a_multiset - b_multiset).elements())
b_remainder = list((b_multiset - a_multiset).elements())

print overlap, a_remainder, b_remainder
</snippet></ROW><ROW><id>5095633</id><snippet>^(.*(?={a})|.*?)({a})?(.*(?={b})|.*)({b})?(.*?)$</snippet></ROW><ROW><id>5095633</id><snippet>import re

inputs = ['{a}text{b}test', 'text', 'text{b}text', 'text{b}', 'text{a}text']
p = re.compile(r"^(.*(?={a})|.*?)({a})?(.*(?={b})|.*)({b})?(.*?)$")
for input in inputs:
    print p.match(input).groups()
</snippet></ROW><ROW><id>5095633</id><snippet>('', '{a}', 'text', '{b}', 'test')
('', None, 'text', None, '')
('', None, 'text', '{b}', 'text')
('', None, 'text', '{b}', '')
('text', '{a}', 'text', None, '')
</snippet></ROW><ROW><id>5095739</id><snippet>some_object</snippet></ROW><ROW><id>5095739</id><snippet>'__main__'</snippet></ROW><ROW><id>5095739</id><snippet>some_object</snippet></ROW><ROW><id>5095739</id><snippet>hello</snippet></ROW><ROW><id>5095739</id><snippet>hello.some_object = some_object
</snippet></ROW><ROW><id>5095739</id><snippet>hello.GET</snippet></ROW><ROW><id>5095739</id><snippet>class hello:
    def GET(self, name):
        return self.some_object
</snippet></ROW><ROW><id>5095830</id><snippet>[[Worf]] son of [[Mogh]]</snippet></ROW><ROW><id>5095830</id><snippet>[[Worf]]</snippet></ROW><ROW><id>5095830</id><snippet>[[Mogh]]</snippet></ROW><ROW><id>5095830</id><snippet>son of</snippet></ROW><ROW><id>5095830</id><snippet>(?:...)</snippet></ROW><ROW><id>5095830</id><snippet>&gt;&gt;&gt; s = '[[Worf]] son of [[Mogh]]'
&gt;&gt;&gt; p = re.compile('(\[\[[A-Za-z\s]+\]\])(?:.*son of.*)(\[\[[\|,A-Za-z\s]+\]\])')
&gt;&gt;&gt; print p.match(s).groups()
('[[Worf]]', '[[Mogh]]')
</snippet></ROW><ROW><id>5095830</id><snippet>.groups()</snippet></ROW><ROW><id>5095830</id><snippet>.*son of.*</snippet></ROW><ROW><id>5096019</id><snippet>sudo</snippet></ROW><ROW><id>5096019</id><snippet>internal</snippet></ROW><ROW><id>5096019</id><snippet>foo</snippet></ROW><ROW><id>5096019</id><snippet>/.../</snippet></ROW><ROW><id>5096019</id><snippet>/.../</snippet></ROW><ROW><id>5096019</id><snippet>foo</snippet></ROW><ROW><id>5096019</id><snippet>X-Accel-Redirect</snippet></ROW><ROW><id>5096019</id><snippet>/delegate/foo/.../</snippet></ROW><ROW><id>5096019</id><snippet>/delegate/foo/</snippet></ROW><ROW><id>5096019</id><snippet>foo</snippet></ROW><ROW><id>5096019</id><snippet>internal</snippet></ROW><ROW><id>5096019</id><snippet>/delegate/foo/.../</snippet></ROW><ROW><id>5096019</id><snippet>foo</snippet></ROW><ROW><id>5096019</id><snippet>flup</snippet></ROW><ROW><id>5096019</id><snippet>sudo -u $user python /absolute/path/to/manage.py runfcgi host=127.0.0.1 port=$port
</snippet></ROW><ROW><id>5096019</id><snippet>$user</snippet></ROW><ROW><id>5096019</id><snippet>$port</snippet></ROW><ROW><id>5096019</id><snippet>location /user/$user {
    internal;

    fastcgi_pass 127.0.0.1:$port;
    # additional FastCGI configuration...
}
</snippet></ROW><ROW><id>5096019</id><snippet>$user</snippet></ROW><ROW><id>5096019</id><snippet>$port</snippet></ROW><ROW><id>5096019</id><snippet>@login_required
def central_dispatch_view ( request ):
    response = HttpResponse()
    response['X-Accel-Redirect'] = '/user/'+request.user.username
    return response
</snippet></ROW><ROW><id>5096019</id><snippet>/user/foo/</snippet></ROW><ROW><id>5096019</id><snippet>foo</snippet></ROW><ROW><id>5096019</id><snippet>flup</snippet></ROW><ROW><id>5096131</id><snippet>print "+", '{0:^90}'.format(''), "+"
</snippet></ROW><ROW><id>5096136</id><snippet>int</snippet></ROW><ROW><id>5096136</id><snippet>restype</snippet></ROW><ROW><id>5096136</id><snippet>gp = ctypes.CDLL('libgphoto2.so')
gp.gp_library_version.restype = ctypes.POINTER(ctypes.c_char_p)
a = gp.gp_library_version(0)
print a[0].value
</snippet></ROW><ROW><id>5096811</id><snippet>set</snippet></ROW><ROW><id>5096811</id><snippet>Merge()</snippet></ROW><ROW><id>5096811</id><snippet>Find()</snippet></ROW><ROW><id>5096811</id><snippet>Find()</snippet></ROW><ROW><id>5096811</id><snippet>def Find(n):
    if n != n.parent:
        n.parent = Find(n.parent)
    return n.parent
</snippet></ROW><ROW><id>5096811</id><snippet>MakeSet()</snippet></ROW><ROW><id>5096811</id><snippet>SameSet()</snippet></ROW><ROW><id>5096811</id><snippet>def SameSet(n1, n2):
    return Find(n1) == Find(n2)
</snippet></ROW><ROW><id>5096928</id><snippet>str</snippet></ROW><ROW><id>5096928</id><snippet>unicode</snippet></ROW><ROW><id>5096928</id><snippet>unicode</snippet></ROW><ROW><id>5096928</id><snippet>str</snippet></ROW><ROW><id>5096928</id><snippet>unicode_char = u'\xb0'

encodedchar = unicode_char.encode('utf-8')
</snippet></ROW><ROW><id>5096928</id><snippet>encodedchar</snippet></ROW><ROW><id>5096928</id><snippet>utf-8</snippet></ROW><ROW><id>5096944</id><snippet>jobs</snippet></ROW><ROW><id>5097075</id><snippet>redirect_client_url = 'http://your-redirect-url'
access_token_url = 'https://graph.facebook.com/oauth/access_token?client_id='+consumer_key+'&amp;redirect_uri='+red    irect_client_url+'&amp;client_secret='+consumer_secret+'&amp;code='
scope = 'publish_stream,offline_access,user_birthday,email'
authorize_url = 'https://graph.facebook.com/oauth/authorize?client_id='+consumer_key+'&amp;redirect_uri='+redirect_    client_url+'&amp;scope='+scope+'&amp;display=touch'
user_info_url = 'https://graph.facebook.com/me?access_token='</snippet></ROW><ROW><id>5097075</id><snippet>post_data = {'access_token':access_token, 'message':'hey this is a test!'}
request_path = str(facebook_id)+'/feed'
post_data = urllib.urlencode(post_data)
response = urllib2.urlopen('https://graph.facebook.com/%s' % request_path, post_data)
</snippet></ROW><ROW><id>5097168</id><snippet>s = ftplib.FTP("xbrera.co.cc", "myuser", "mypass")</snippet></ROW><ROW><id>5097168</id><snippet>ftp://</snippet></ROW><ROW><id>5097286</id><snippet>update</snippet></ROW><ROW><id>5097286</id><snippet>rollback</snippet></ROW><ROW><id>5097309</id><snippet>os.path.join</snippet></ROW><ROW><id>5097309</id><snippet>isdir</snippet></ROW><ROW><id>5097710</id><snippet>for word1 in fin</snippet></ROW><ROW><id>5097710</id><snippet>word1</snippet></ROW><ROW><id>5097710</id><snippet>for word2 in fin</snippet></ROW><ROW><id>5097710</id><snippet>for word1 in fin</snippet></ROW><ROW><id>5097710</id><snippet>file1</snippet></ROW><ROW><id>5097710</id><snippet>file2</snippet></ROW><ROW><id>5097710</id><snippet>def is_reverse(word1, word2):   
   if len(word1) == len(word2):
     if word1 == word2[::-1]:
       return True   
return False

file1 = open('List.txt') 
for word1 in file1:
    word1 = word1.strip()
    word1 = word1.lower()
    file2 = open('List.txt')
    for word2 in file2:
      word2 = word2.strip()
      word2 = word2.lower()
      print word1 + word2
      if is_reverse(word1, word2):
             print word1 + ' is the opposite of ' + word2 
</snippet></ROW><ROW><id>5097710</id><snippet>def is_reverse(word1, word2):
    if len(word1) == len(word2):
        if word1 == word2[::-1]:
            return True
    return False

file = open('List.txt')
words = list(file)
for word1 in words:
    word1 = word1.strip()
    word1 = word1.lower()
    for word2 in words:
        word2 = word2.strip()
        word2 = word2.lower()
        print word1 + word2
        if is_reverse(word1, word2):
            print word1 + ' is the opposite of ' + word2 
</snippet></ROW><ROW><id>5097710</id><snippet>for element in iterable</snippet></ROW><ROW><id>5097710</id><snippet>iterable</snippet></ROW><ROW><id>5097710</id><snippet>iterable.__iter__</snippet></ROW><ROW><id>5097710</id><snippet>&gt;&gt;&gt; file = open('testfile.txt')
&gt;&gt;&gt; it1 = iter(file)
&gt;&gt;&gt; it2 = iter(file)
&gt;&gt;&gt; id(it1)
3078689064L
&gt;&gt;&gt; id(it2)
3078689064L
&gt;&gt;&gt; id(file)
3078689064L
</snippet></ROW><ROW><id>5097710</id><snippet>&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; it3 = iter(list)
&gt;&gt;&gt; it4 = iter(list)
&gt;&gt;&gt; id(it3)
3078746156L
&gt;&gt;&gt; id(it4)
3078746188L
&gt;&gt;&gt; id(list)
3078731244L
</snippet></ROW><ROW><id>5097710</id><snippet>List.txt</snippet></ROW><ROW><id>5097710</id><snippet>/usr/share/dict/words</snippet></ROW><ROW><id>5097710</id><snippet>words = []
wordset = set(())

file = open('List.txt')
for line in file:
    word = line.strip('\n')
    words.append(word)
    wordset.add(word)

for word in words:
    reversed = word[::-1]
    if reversed in wordset:
        print word + ' is the opposite of ' + reversed
</snippet></ROW><ROW><id>5097748</id><snippet>for i in nodeTable:
</snippet></ROW><ROW><id>5097748</id><snippet>numNodes</snippet></ROW><ROW><id>5097885</id><snippet>entityExpansionLimit</snippet></ROW><ROW><id>5097923</id><snippet>hg forget manage.py</snippet></ROW><ROW><id>5098091</id><snippet>processes=1</snippet></ROW><ROW><id>5098372</id><snippet>text = u"aren't"
</snippet></ROW><ROW><id>5098372</id><snippet>text = u"aren’t"
</snippet></ROW><ROW><id>5098372</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

d = {
    u'aren’t': u'ain’t',
    u'hello': u'hey'
    }
#text = u"aren't"
text = u"aren’t"


def replace_all(text, d):
    for i, k in d.iteritems():
        #replace all whole words of I with K in lower cased text, regex = \bSTRING\b
        text = re.sub(r"\b" + i + r"\b", k , text.lower())
    return text

if __name__ == '__main__':
    newtext = replace_all(text, d)
    print newtext
</snippet></ROW><ROW><id>5098372</id><snippet>ain’t
</snippet></ROW><ROW><id>5098395</id><snippet>inner</snippet></ROW><ROW><id>5098395</id><snippet>permissions</snippet></ROW><ROW><id>5098395</id><snippet>outer</snippet></ROW><ROW><id>5098395</id><snippet>inner</snippet></ROW><ROW><id>5098395</id><snippet>class Protect(object):
    def __init__(self, *permissions):
        self.permissions = permissions
    def __call__(self, f):
        def inner(*args):
            print self.permissions[0]
            return f(*args)  
        return inner  

@Protect('protected')
def func(var):
    return var

print func('something')
</snippet></ROW><ROW><id>5098441</id><snippet>__getattr__</snippet></ROW><ROW><id>5098523</id><snippet>print</snippet></ROW><ROW><id>5098523</id><snippet>print</snippet></ROW><ROW><id>5098523</id><snippet>self.response.out.write</snippet></ROW><ROW><id>5098586</id><snippet>from itertools import *

# given an iterable of pairs return the key corresponding to the greatest value
def argmax(pairs):
    return max(pairs, key=itemgetter(1))[0]

# given an iterable of values return the index of the greatest value
def argmax_index(values):
    return argmax(enumerate(values))

# given an iterable of keys and a function f, return the key with largest f(key)
def argmax_f(keys, f):
    return max(keys, key=f)
</snippet></ROW><ROW><id>5099158</id><snippet>total_value</snippet></ROW><ROW><id>5099158</id><snippet>Main</snippet></ROW><ROW><id>5099158</id><snippet>N</snippet></ROW><ROW><id>5099158</id><snippet># get the rank of total_value compared to existing total_values (up to 1,000)
rank = Main.all().filter('total_value &lt;', total_value).count(1000) + 1
</snippet></ROW><ROW><id>5099383</id><snippet>import</snippet></ROW><ROW><id>5099383</id><snippet>from</snippet></ROW><ROW><id>5099383</id><snippet>sys.path</snippet></ROW><ROW><id>5099383</id><snippet>PyQt4</snippet></ROW><ROW><id>5099383</id><snippet>import PySide as PyQt4</snippet></ROW><ROW><id>5099383</id><snippet>PyQt4</snippet></ROW><ROW><id>5099383</id><snippet>from PyQt4 import QtCore, QtGui</snippet></ROW><ROW><id>5099383</id><snippet>import PySide as PyQt4
QtCore = PyQt4.QtCore
QtGui = PyQt4.QtGui
</snippet></ROW><ROW><id>5099383</id><snippet>import PySide as PyQt4
from PySide import QtCore, QtGui
</snippet></ROW><ROW><id>5099606</id><snippet>loc = app.EOG()
</snippet></ROW><ROW><id>5099606</id><snippet>loc</snippet></ROW><ROW><id>5099606</id><snippet>loc.element_click</snippet></ROW><ROW><id>5099880</id><snippet>dist</snippet></ROW><ROW><id>5099880</id><snippet>-p ftplib</snippet></ROW><ROW><id>5100088</id><snippet>ImportError</snippet></ROW><ROW><id>5100088</id><snippet>imp.find_module</snippet></ROW><ROW><id>5100431</id><snippet>join()</snippet></ROW><ROW><id>5100431</id><snippet>str()</snippet></ROW><ROW><id>5100431</id><snippet> result = " ".join(str(x) for x in randy)
</snippet></ROW><ROW><id>5100431</id><snippet>randy = randy + (rand,)</snippet></ROW><ROW><id>5100431</id><snippet>randy = randy,rand</snippet></ROW><ROW><id>5101397</id><snippet>b in c
</snippet></ROW><ROW><id>5101397</id><snippet>['a', 'b', 'c', 'd', 'e']
</snippet></ROW><ROW><id>5101397</id><snippet>['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']
</snippet></ROW><ROW><id>5101397</id><snippet>c = [a, a, a]
</snippet></ROW><ROW><id>5101397</id><snippet>[['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']]
</snippet></ROW><ROW><id>5101444</id><snippet>print M(w)</snippet></ROW><ROW><id>5101444</id><snippet>M(w)</snippet></ROW><ROW><id>5101444</id><snippet>M(w)</snippet></ROW><ROW><id>5101444</id><snippet>None</snippet></ROW><ROW><id>5101765</id><snippet>C.__mro__</snippet></ROW><ROW><id>5101765</id><snippet>class W(object):
  def foo(self):
      print "W"

class X(W):
  def foo(self):
    #super(X,self).foo()
    W.foo(self)
    print "X"        

class Y(W):
  def foo(self):
    print "Y"


class Z(X,Y):
  def __init__(self):
    self.foo()

Z.__mro__
z = Z()
</snippet></ROW><ROW><id>5101765</id><snippet>Y
X</snippet></ROW><ROW><id>5101765</id><snippet>W
X</snippet></ROW><ROW><id>5101906</id><snippet>__dict__</snippet></ROW><ROW><id>5101906</id><snippet>id(obj)</snippet></ROW><ROW><id>5101906</id><snippet># Module level, setting up the data store
from collections import defaultdict
extra_info = defaultdict(dict) # Creates empty dicts for unknown keys

# Saving the info
root = node.getroottree().getroot()
extra_info[id(root)]["ENV"] = "replacement"

# Retrieving it later
root = node.getroottree().getroot()
info = extra_info[id(root)]
</snippet></ROW><ROW><id>5101920</id><snippet>module</snippet></ROW><ROW><id>5102112</id><snippet>"@file %(unitname)s.C" % {'unitname':'Test'}
</snippet></ROW><ROW><id>5102528</id><snippet>{'item': [dict(value=value, label=label) for value, label in item]}
</snippet></ROW><ROW><id>5103392</id><snippet>&gt;&gt;&gt; import module
&gt;&gt;&gt; help(module)
</snippet></ROW><ROW><id>5103392</id><snippet>&gt;&gt;&gt; dir(module)
</snippet></ROW><ROW><id>5103392</id><snippet>wmic.exe</snippet></ROW><ROW><id>5104069</id><snippet>include "Python.h"</snippet></ROW><ROW><id>5104069</id><snippet>"Python/Python.h"</snippet></ROW><ROW><id>5104069</id><snippet>export C_INCLUDE_PATH=/usr/include/python2.6:$C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH=/usr/include/python2.6:$CPLUS_INCLUDE_PATH
</snippet></ROW><ROW><id>5104590</id><snippet>import subprocess
code = """[x for x in ().__class__.__bases__[0].__subclasses__() 
           if x.__name__ == 'Popen'][0](['ls', '-la']).wait()"""
# Executing the `code` will always run `ls`...
exec code in dict(__builtins__=None)
</snippet></ROW><ROW><id>5104590</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>5105002</id><snippet>class Nationality:
        Poland='PL'
        Germany='DE'
        France='FR'

        def convertToCodeFromName(name):
                return getattr( Nationality, name )

        def convertToNameFromCode(code):
                lookFor = None

                for member in dir( Nationality ):
                        if ( getattr( Nationality, member ) == code ):
                                lookFor = member
                return lookFor

print( Nationality.convertToCodeFromName( "Poland" ) )
print( Nationality.convertToNameFromCode( "PL" ) )
</snippet></ROW><ROW><id>5105171</id><snippet>Environment.get_db_cnx()</snippet></ROW><ROW><id>5105171</id><snippet>Cursor</snippet></ROW><ROW><id>5105171</id><snippet>.cursor()</snippet></ROW><ROW><id>5105328</id><snippet>"c:\Test\blah"</snippet></ROW><ROW><id>5105328</id><snippet>"C:\\Test"
</snippet></ROW><ROW><id>5105328</id><snippet>r"C:\Test"
</snippet></ROW><ROW><id>5105467</id><snippet>from mycelerytasks import send_email

...

deferred_result = send_email.apply_async(*args, **kwargs)
</snippet></ROW><ROW><id>5105467</id><snippet>deferred_result.wait()</snippet></ROW><ROW><id>5105475</id><snippet>#!/bin/sh
/usr/bin/env python -m abc
</snippet></ROW><ROW><id>5105554</id><snippet>import copy
d = { ... }
d2 = copy.deepcopy(d)
</snippet></ROW><ROW><id>5105554</id><snippet>Python 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import copy
&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}
&gt;&gt;&gt; my_copy = copy.deepcopy(my_dict)
&gt;&gt;&gt; my_dict['a'][2] = 7
&gt;&gt;&gt; my_copy['a'][2]
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5105554</id><snippet>Python 2.7.1 (r271:86832, Nov 27 2010, 17:19:03) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import copy
&gt;&gt;&gt; my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}
&gt;&gt;&gt; my_copy = copy.deepcopy(my_dict)
&gt;&gt;&gt; my_dict['a'][2] = 7
&gt;&gt;&gt; my_copy['a'][2]
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5105594</id><snippet>request.POST.get('delete')</snippet></ROW><ROW><id>5105594</id><snippet>'delete'</snippet></ROW><ROW><id>5105594</id><snippet>name</snippet></ROW><ROW><id>5105594</id><snippet>'delete'</snippet></ROW><ROW><id>5105594</id><snippet>&lt;input type="submit" name="delete" /&gt;</snippet></ROW><ROW><id>5105594</id><snippet>def send_confirmation_email(request, order_no = 0, service_type = 0):
    order = None
    count = 0
    title = models.SERVICE_CHOICES[int(service_type) - 1][1]
    #title = type[1]
    order_number = request.session['order_number']

    if request.POST.get('delete'):
        order_number.delete()
    else: # else or else you will always get a confirmation regardless of delete
          # unless of course that's what you want.
        try:

            ...
</snippet></ROW><ROW><id>5105622</id><snippet>functools.partial</snippet></ROW><ROW><id>5105622</id><snippet>from functools import partial

map(partial(Ability.OnTimer, amount = amount), self.Abilities)
</snippet></ROW><ROW><id>5105622</id><snippet>map</snippet></ROW><ROW><id>5106605</id><snippet>L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']
tuples = [(x,y) for x in L1 for y in L1 if x != y]
for entry in tuples:
    if (entry[1], entry[0]) in tuples:
        tuples.remove((entry[1],entry[0]))
for pair in tuples:
    input1= open('file_%s'%(pair[0]), 'r')
    file1= pickle.load(input1)
    input2= open('file_%s'%(pair[1]), 'r')
    file2= pickle.load(input2)
</snippet></ROW><ROW><id>5106605</id><snippet>tuples</snippet></ROW><ROW><id>5106605</id><snippet>('cat', 'dog')
('cat', 'fish')
('cat', 'rabbit')
('cat', 'horse')
('cat', 'bird')
('cat', 'frog')
('cat', 'mouse')
('dog', 'fish')
('dog', 'rabbit')
('dog', 'horse')
('dog', 'bird')
('dog', 'frog')
('dog', 'mouse')
('fish', 'rabbit')
('fish', 'horse')
('fish', 'bird')
('fish', 'frog')
('fish', 'mouse')
('rabbit', 'horse')
('rabbit', 'bird')
('rabbit', 'frog')
('rabbit', 'mouse')
('horse', 'bird')
('horse', 'frog')
('horse', 'mouse')
('bird', 'frog')
('bird', 'mouse')
('frog', 'mouse')
</snippet></ROW><ROW><id>5106692</id><snippet>print()</snippet></ROW><ROW><id>5107332</id><snippet>input = open('input')

for line in input.xreadlines():
  if line.startswith('firstName'):
    firstname = line.split()[1]
  elif line.startswith('lastName'):
    lastname = line.split()[1]
  elif line.startswith('family'):
    family = line.split()[1]

input.close()

print firstname
print lastname
print family
</snippet></ROW><ROW><id>5107332</id><snippet>import re
line = "family: blah"
m = re.search("family: (.*)", line)
if m != None:
  print m.group(1)
</snippet></ROW><ROW><id>5107798</id><snippet>python.el</snippet></ROW><ROW><id>5107798</id><snippet>python.el</snippet></ROW><ROW><id>5107798</id><snippet>python-mode</snippet></ROW><ROW><id>5107798</id><snippet>python.el</snippet></ROW><ROW><id>5107798</id><snippet>(setq indent-tabs-mode t
      tab-width 4
      python-indent 4)
</snippet></ROW><ROW><id>5107798</id><snippet>python.el</snippet></ROW><ROW><id>5107798</id><snippet>python-indent</snippet></ROW><ROW><id>5107798</id><snippet>python-indent-offset</snippet></ROW><ROW><id>5107917</id><snippet>statsout</snippet></ROW><ROW><id>5107917</id><snippet>statsout</snippet></ROW><ROW><id>5107917</id><snippet>output_html</snippet></ROW><ROW><id>5107917</id><snippet>output_xml</snippet></ROW><ROW><id>5107917</id><snippet>output_text</snippet></ROW><ROW><id>5108496</id><snippet>ForeignKeyAutocompleteAdmin</snippet></ROW><ROW><id>5108526</id><snippet>with</snippet></ROW><ROW><id>5108526</id><snippet>try</snippet></ROW><ROW><id>5108526</id><snippet>finally</snippet></ROW><ROW><id>5108903</id><snippet>stored_data</snippet></ROW><ROW><id>5108903</id><snippet>stored_data = data.DefaultData()
for data in stored_data.values():
    data['pw'] = md5(salt + data['pw']).hexdigest()

from pprint import pprint
pprint(stored_data)
</snippet></ROW><ROW><id>5108903</id><snippet>{'administrator': {'is_admin': True,
                   'is_author': False,
                   'name': 'Admin',
                   'pw': '33e7cb694fb6fb2f848af6774d9ff138'},
 'berit': {'is_admin': False,
           'is_author': False,
           'name': 'berit',
           'pw': '00c10978330d65eb0cb739a629b6ed15'}}
</snippet></ROW><ROW><id>5109028</id><snippet>def get_session_data():
    from google.appengine.api import users

    found_session = None

    user = users.get_current_user()
    if user:
        from google.appengine.api import memcache

        users_session = memcache.get(user.user_id())


    return found_session

def save_session_data(session_object):
    from google.appengine.api import users
    from google.appengine.api import memcache

    memcache.set(users.get_current_user().user_id(), serialized_object)
</snippet></ROW><ROW><id>5109034</id><snippet>import nltk.data
from nltk.tokenize import sent_tokenize
import sys
infile = open(sys.argv[1])
slist = []
for line in infile:
    slist.append(sent_tokenize(line))
print slist
infile.close()
</snippet></ROW><ROW><id>5109034</id><snippet>me@mine:~/src/ $ python nltkplay.py nltkplay.py 
[['import nltk.data\n'], ['from nltk.tokenize import sent_tokenize\n'], ['import sys\n'], ['infile = open(sys.argv[1])\n'], ['slist = []\n'], ['for line in infile:\n'], ['    slist.append(sent_tokenize(line))\n'], ['print slist\n'], ['\n']]
</snippet></ROW><ROW><id>5109034</id><snippet>slist = [sent_tokenize(line) for line in infile]
</snippet></ROW><ROW><id>5109034</id><snippet>slist = sent_tokenize(infile.read())
</snippet></ROW><ROW><id>5109578</id><snippet>__init__()</snippet></ROW><ROW><id>5109578</id><snippet>class Clippy_Runner( object ):
    def __init__( self, args ):
       pass
    def __enter__( self ):
       etc.

with Clippy_Runner( args ) as something:
    # work with "something"
</snippet></ROW><ROW><id>5110033</id><snippet>def get_site_content():
    def get_response(response):
        content = response.info()['Content-Type']
        charset = content[content.rfind('=') + 1:] # ugly hack, check orderly
        return response.read().decode(charset)  

    cj = http.cookiejar.CookieJar()
    opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
    data = urllib.parse.urlencode({ "log" : "1", "j_username" : USERNAME, "j_password" : PASSWORD })
    opener.open("url", data)  
    data = urllib.parse.urlencode({ "months" : "0" })
    resp = opener.open("url2", data)
    return get_response(resp)
</snippet></ROW><ROW><id>5110479</id><snippet>PREFIX_PATH=/path/to/folder
pip install --install-option="--prefix=$PREFIX_PATH" django-profile
</snippet></ROW><ROW><id>5110479</id><snippet>django-profile</snippet></ROW><ROW><id>5110479</id><snippet>/path/to/folder/lib/pythonX/site-packages</snippet></ROW><ROW><id>5110768</id><snippet>std::string</snippet></ROW><ROW><id>5110768</id><snippet>PyString_FromStringAndSize</snippet></ROW><ROW><id>5110768</id><snippet>std::string</snippet></ROW><ROW><id>5110768</id><snippet>std::string</snippet></ROW><ROW><id>5110879</id><snippet>__init__.py</snippet></ROW><ROW><id>5110879</id><snippet>__init__.py</snippet></ROW><ROW><id>5110909</id><snippet>&gt;&gt;&gt; class C():
...   def demo(): pass
... 
&gt;&gt;&gt; C.demo
&lt;function demo at 0x1fed6d8&gt;
</snippet></ROW><ROW><id>5110909</id><snippet>&gt;&gt;&gt; class C():
...   def demo(): pass
... 
&gt;&gt;&gt; C.demo.im_func                  # Retrieve it from the unbound method
&lt;function demo at 0x7f463486d5f0&gt;
&gt;&gt;&gt; C.__dict__["demo"]              # Retrieve it directly from the class dict
&lt;function demo at 0x7f463486d5f0&gt;
</snippet></ROW><ROW><id>5111205</id><snippet>precision</snippet></ROW><ROW><id>5111205</id><snippet>precision</snippet></ROW><ROW><id>5111205</id><snippet>def base3int(x):
    x = int(x)
    exponents = range(int(math.log(x, 3)), -1, -1)
    for e in exponents:
        d = int(x // (3 ** e))
        x -= d * (3 ** e)
        yield d

def base3fraction(x, precision=1000):
    x = x - int(x)
    exponents = range(-1, (-precision - 1) * 2, -1)
    for e in exponents:
        d = int(x // (3 ** e))
        x -= d * (3 ** e)
        yield d
        if x == 0: break
</snippet></ROW><ROW><id>5111205</id><snippet>if x == 0: break</snippet></ROW><ROW><id>5111205</id><snippet>yield</snippet></ROW><ROW><id>5111205</id><snippet>base3fraction</snippet></ROW><ROW><id>5111205</id><snippet>precision</snippet></ROW><ROW><id>5111205</id><snippet>sum(d * (3 ** (-i - 1)) for i, d in enumerate(base3fraction(x)))
</snippet></ROW><ROW><id>5111205</id><snippet>def convert_base(x, base=3, precision=None):
    length_of_int = int(math.log(x, base))
    iexps = range(length_of_int, -1, -1)
    if precision == None: fexps = itertools.count(-1, -1)
    else: fexps = range(-1, -int(precision + 1), -1)

    def cbgen(x, base, exponents):
        for e in exponents:
            d = int(x // (base ** e))
            x -= d * (base ** e)
            yield d
            if x == 0 and e &lt; 0: break

    return cbgen(int(x), base, iexps), cbgen(x - int(x), base, fexps)
</snippet></ROW><ROW><id>5111268</id><snippet>accept()</snippet></ROW><ROW><id>5111268</id><snippet>conn</snippet></ROW><ROW><id>5111268</id><snippet>while True:
    print("Now listening...\n")
    conn, addr = s.accept()

    print 'New connection from %s:%d' % (addr[0], addr[1])
    data = conn.recv(socksize)
    if not data:
        break
    elif data == 'killsrv':
        conn.close()
        sys.exit()
    else:
        print(data)
</snippet></ROW><ROW><id>5111268</id><snippet>select()</snippet></ROW><ROW><id>5111403</id><snippet>&gt;&gt;&gt; packet = IP(flags=2)
&gt;&gt;&gt; packet
&lt;IP  flags=DF |&gt;
</snippet></ROW><ROW><id>5111403</id><snippet>flags</snippet></ROW><ROW><id>5111403</id><snippet>&gt;&gt;&gt; packet.flags
2
</snippet></ROW><ROW><id>5111459</id><snippet>&gt;&gt;&gt; raw = '\xd0\x90\xd0\xbb\xd0\xb3\xd0\xbe'
&gt;&gt;&gt; print raw.decode('utf8')
Алго
&gt;&gt;&gt; print raw.decode('cp1251')
РђР»РіРѕ
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5111493</id><snippet>import pyudev
context = pyudev.Context()
monitor = pyudev.Monitor.from_netlink(context)
observer = pyudev.pygtk.GUDevMonitorObserver(monitor)
observer.connect('device-added', device_added_callback)
observer.connect('device-changed', device_changed_callback)
monitor.enable_receiving()
mainloop = gobject.MainLoop()
mainloop.run()
</snippet></ROW><ROW><id>5111635</id><snippet>\Flagged</snippet></ROW><ROW><id>5111635</id><snippet>\Flagged</snippet></ROW><ROW><id>5111635</id><snippet>IMAP4.store(num, '+FLAGS', '\\Flagged')
</snippet></ROW><ROW><id>5111635</id><snippet>FLAGGED</snippet></ROW><ROW><id>5111635</id><snippet>UNFLAGGED</snippet></ROW><ROW><id>5111635</id><snippet>IMAP4.search(None, 'FLAGGED')
</snippet></ROW><ROW><id>5111635</id><snippet>SELECT "[Gmail]/Starred"</snippet></ROW><ROW><id>5111635</id><snippet>IMAP4.select('[Gmail]/Starred')
</snippet></ROW><ROW><id>5111726</id><snippet>x</snippet></ROW><ROW><id>5111726</id><snippet>Size</snippet></ROW><ROW><id>5111726</id><snippet>get_or_create()</snippet></ROW><ROW><id>5111726</id><snippet>Obj</snippet></ROW><ROW><id>5111726</id><snippet>Q(id=F) &amp; Q(id=O) &amp; Q(id=O)</snippet></ROW><ROW><id>5111726</id><snippet>Obj.objects.filter(size__in=Sizes)</snippet></ROW><ROW><id>5111726</id><snippet>Obj</snippet></ROW><ROW><id>5111726</id><snippet>size</snippet></ROW><ROW><id>5111726</id><snippet>__in</snippet></ROW><ROW><id>5111726</id><snippet>def has_exact_m2m_match(match_list):
    """
    Get exact Obj m2m match 
    """
    if isinstance(match_list, QuerySet):
        match_list = [x.id for x in match_list]

    results = {}
    match = set(match_list)
    for obj, size in \
        Obj.sizes.through.objects.filter(size__in=match).values_list('obj', 'size'):
        # note: we are accessing the auto generated through model for the sizes m2m
        try:
            results[obj].append(size)
        except KeyError:
            results[obj] = [size]

    return bool(filter(lambda x: set(x) == match, results.values()))
    # filter any specific objects that have the exact same size IDs
    # if there is a match, it means an Obj exists with exactly 
    # the sizes you provided to the function, no more.


sizes = [size1, size2, size3, sizeN...]
if has_exact_m2m_match(sizes):
    x = Obj.objects.create(name=foo) # saves so you can use x.sizes.add
    x.sizes.add(sizes)
</snippet></ROW><ROW><id>5111950</id><snippet>heapq</snippet></ROW><ROW><id>5111950</id><snippet>from heapq import heappush, heappop
import operator

def prob(ps):
    """ returns the probability that *not* all ps are True """
    return 1-reduce(operator.mul, ps)

def gen(ps):
    # turn each to a tuple
    items = ((x,) for x in sorted(ps, reverse=True))

    # create a priority queue, sorted by probability
    pq = [(prob(x),x) for x in items]

    # because you wanted this
    yield ()

    # as long as there are valid combinations
    while pq:
        # get the best un-yielded combination, the pq makes sure of that
        p, x = heappop(pq)
        yield x

        # generate all the combinations from this item
        for other in ps:

            # keeping the tuples sorted -&gt; unique combinations
            if other &lt; x[-1]:

                # create a new combination
                new = x+(other,)
                item = prob(new), new

                # add it to the queue
                heappush(pq,item)


a = [1, 0.1, 0.5] 
print list(gen(a))
</snippet></ROW><ROW><id>5112081</id><snippet>'form-0-field'</snippet></ROW><ROW><id>5112081</id><snippet>fileN</snippet></ROW><ROW><id>5112081</id><snippet>form-TOTAL_FORMS</snippet></ROW><ROW><id>5112081</id><snippet>class UploaderForm(forms.Form):
    file1 = forms.FileField(upload_to='user_files')


from django.forms.formsets import formset_factory
UploaderFormset = formset_factory(UploaderForm)

# long as you specify 'form-TOTAL_FORMS' and 2 other fields listed in the docs,
# the formset will auto generate form instances &amp; populate with fields based on
# their 0 index.
formset = UploaderFormset(request.POST)

for form in formset.forms:
    form.save()
</snippet></ROW><ROW><id>5112089</id><snippet>^</snippet></ROW><ROW><id>5112089</id><snippet>[n|N]ame = ([\w\.\s]+)
</snippet></ROW><ROW><id>5112132</id><snippet>binData = ''.join(map(lambda x: chr(x % 256), attach.attcoll))
sql_stmt = """INSERT INTO attachments (attno,filename,fileextension,projNo,procNo,wpattachment)
VALUES (%s,%s,%s,%s,%s,%s) ON DUPLICATE KEY UPDATE filename=%s,fileextension=%s""" 

params = (attach.attno,attach.filename,attach.fileextension,attach.projNo,attach.procNo,binData,attach.filename,attach.fileextension)

cursor.execute(sql_stmt, params)
conn.commit()
</snippet></ROW><ROW><id>5112132</id><snippet>cursor.execute()</snippet></ROW><ROW><id>5112132</id><snippet>'%s'</snippet></ROW><ROW><id>5112132</id><snippet>conn.commit()</snippet></ROW><ROW><id>5112177</id><snippet>object.__getslice__(self, i, j)</snippet></ROW><ROW><id>5112177</id><snippet>__getitem__()</snippet></ROW><ROW><id>5112177</id><snippet>__getslice__()</snippet></ROW><ROW><id>5112177</id><snippet>list</snippet></ROW><ROW><id>5112177</id><snippet>__getslice__</snippet></ROW><ROW><id>5112177</id><snippet>from collections import Sequence

class MyList(Sequence):
    def __init__(self, *items):
        self.data = list(items)

    def __len__(self):
        return len(self.data)

    def __getitem__(self, slice):
        return self.data[slice]

s = MyList(1,2,3)
# lots of free methods
print s[1:2], len(s), bool(s), s.count(3), s.index(2), iter(s)
</snippet></ROW><ROW><id>5112881</id><snippet>def view(request):
    ...
    work = &lt;whatever&gt;
    form = StageOfWorkForm(work, request.POST)
    ...
</snippet></ROW><ROW><id>5112881</id><snippet>class StageOfWorkForm(ModelForm):
    def __init__(self, work, *args, **kwargs):
        super(StageOfWorkForm, self).__init__(*args, **kwargs)
        self.fields['gallery'].queryset = work.gallery_set.all()
</snippet></ROW><ROW><id>5112923</id><snippet>print "firstsecond\n"</snippet></ROW><ROW><id>5112923</id><snippet>print  repr("firstsecond\n")</snippet></ROW><ROW><id>5112923</id><snippet>print t</snippet></ROW><ROW><id>5112923</id><snippet>t = "first%s\n"
print repr(t),len(t)
t = t %("second")
print repr(t),len(t)

print '-------------------'

t = "first%s\\n" # the same as r"first%s\n"
print repr(t),len(t)
t = t %("second")
print repr(t),len(t)
</snippet></ROW><ROW><id>5112923</id><snippet>'first%s\n' 8
'firstsecond\n' 12
-------------------
'first%s\\n' 9
'firstsecond\\n' 13
</snippet></ROW><ROW><id>5112923</id><snippet>'first%s\\n'</snippet></ROW><ROW><id>5112923</id><snippet>\n</snippet></ROW><ROW><id>5112978</id><snippet>calc = pp.CaselessLiteral('calc')
for entry in courselist:
    if calc.searchString(entry, 1):
        print entry
</snippet></ROW><ROW><id>5112978</id><snippet>for entry in courselist:
    if 'calc' in entry.lower():
        print entry
</snippet></ROW><ROW><id>5113019</id><snippet>gc</snippet></ROW><ROW><id>5113102</id><snippet>ValueError</snippet></ROW><ROW><id>5113102</id><snippet>ValueError</snippet></ROW><ROW><id>5113102</id><snippet>raise ValueError("I'm afraid I can't let you do that, Dave. -HAL 9000"</snippet></ROW><ROW><id>5113102</id><snippet>SubClassError</snippet></ROW><ROW><id>5113102</id><snippet>ValueError</snippet></ROW><ROW><id>5113102</id><snippet>ValueError</snippet></ROW><ROW><id>5113102</id><snippet>UnicodeError</snippet></ROW><ROW><id>5113141</id><snippet>__getitem__()</snippet></ROW><ROW><id>5113141</id><snippet>In [1]: 'foo'.__getitem__(0)
Out[1]: 'f'
</snippet></ROW><ROW><id>5113431</id><snippet>L2_Norm.shape</snippet></ROW><ROW><id>5113431</id><snippet>L2_Norm[19,39]</snippet></ROW><ROW><id>5113431</id><snippet>X</snippet></ROW><ROW><id>5113431</id><snippet>Y</snippet></ROW><ROW><id>5113431</id><snippet>meshgrid</snippet></ROW><ROW><id>5113874</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>5113874</id><snippet>u"f=%s"</snippet></ROW><ROW><id>5113874</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>5113874</id><snippet>$ python -c'import sys; print "f=%s" % (sys.argv[1],)' 'Recent/רשימת משתתפים'
</snippet></ROW><ROW><id>5113874</id><snippet>$ python -c'import sys; print u"f=%s" % (sys.argv[1].decode("utf-8"),)' 'Rec..
</snippet></ROW><ROW><id>5113874</id><snippet>'utf-8'</snippet></ROW><ROW><id>5113874</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>5113874</id><snippet>f=Recent/רשימת משתתפים
</snippet></ROW><ROW><id>5113887</id><snippet>import itertools
for x,y in enumerate(itertools.chain(*(recordings[n][chosen_channel] for n in xrange(number_of_lists))):
    print x,y
</snippet></ROW><ROW><id>5113887</id><snippet>itertools.chain()</snippet></ROW><ROW><id>5113994</id><snippet>n ^ k
</snippet></ROW><ROW><id>5113994</id><snippet>(n + k - 1)! / (k! * (n - 1)!)
</snippet></ROW><ROW><id>5113994</id><snippet>public static String[] getAllLists(String[] elements, int lengthOfList)
{
    //initialize our returned list with the number of elements calculated above
    String[] allLists = new String[(int)Math.pow(elements.length, lengthOfList)];

    //lists of length 1 are just the original elements
    if(lengthOfList == 1) return elements; 
    else
    {
        //the recursion--get all lists of length 3, length 2, all the way up to 1
        String[] allSublists = getAllLists(elements, lengthOfList - 1);

        //append the sublists to each element
        int arrayIndex = 0;

        for(int i = 0; i &lt; elements.length; i++)
        {
            for(int j = 0; j &lt; allSublists.length; j++)
            {
                //add the newly appended combination to the list
                allLists[arrayIndex] = elements[i] + allSublists[j];
                arrayIndex++;
            }
        }

        return allLists;
    }
}
</snippet></ROW><ROW><id>5113994</id><snippet>aaaa
aaab
aaac
aaa1
aaa2
aaa3
aaba
aabb
aabc
aab1
...
3323
333a
333b
333c
3331
3332
3333
</snippet></ROW><ROW><id>5114409</id><snippet>for i in range(60):
   sleep(1)
</snippet></ROW><ROW><id>5114506</id><snippet>Application.objects.get(registration=1234)
</snippet></ROW><ROW><id>5114992</id><snippet>datetime</snippet></ROW><ROW><id>5114992</id><snippet>project</snippet></ROW><ROW><id>5114992</id><snippet>project.datetime.datetime.min</snippet></ROW><ROW><id>5114992</id><snippet>project.py</snippet></ROW><ROW><id>5114992</id><snippet>Project</snippet></ROW><ROW><id>5114992</id><snippet>project</snippet></ROW><ROW><id>5114992</id><snippet>datetime</snippet></ROW><ROW><id>5115710</id><snippet>print</snippet></ROW><ROW><id>5115710</id><snippet>x</snippet></ROW><ROW><id>5115710</id><snippet>"The value is %d" % x</snippet></ROW><ROW><id>5115710</id><snippet>x += 5</snippet></ROW><ROW><id>5115710</id><snippet>x</snippet></ROW><ROW><id>5115710</id><snippet>print</snippet></ROW><ROW><id>5115710</id><snippet>print(x += 5)
</snippet></ROW><ROW><id>5115710</id><snippet>y = x += 5
</snippet></ROW><ROW><id>5115710</id><snippet>$x = 5;
$y = $x += 5;
print $y;
</snippet></ROW><ROW><id>5115710</id><snippet>if (myvar == 1) {
    //do things
}
</snippet></ROW><ROW><id>5115710</id><snippet>if (myvar = 1) {
    //do things
}
</snippet></ROW><ROW><id>5115710</id><snippet>myvar</snippet></ROW><ROW><id>5115918</id><snippet>f.write()</snippet></ROW><ROW><id>5115918</id><snippet>stream</snippet></ROW><ROW><id>5115918</id><snippet>unicode</snippet></ROW><ROW><id>5115918</id><snippet>tag.text</snippet></ROW><ROW><id>5115918</id><snippet>decode</snippet></ROW><ROW><id>5115918</id><snippet>stream</snippet></ROW><ROW><id>5115918</id><snippet>decode</snippet></ROW><ROW><id>5115918</id><snippet>str</snippet></ROW><ROW><id>5115918</id><snippet>unicode</snippet></ROW><ROW><id>5115918</id><snippet>codecs.open()</snippet></ROW><ROW><id>5115918</id><snippet>write()</snippet></ROW><ROW><id>5115918</id><snippet>unicode</snippet></ROW><ROW><id>5115918</id><snippet>f.write(unicode(stnum)+br_name_addr+u","+stream+os.linesep)
</snippet></ROW><ROW><id>5115918</id><snippet>f=open('alldetails7.txt','w')</snippet></ROW><ROW><id>5115918</id><snippet>line = unicode(stnum)+br_name_addr+u","+stream+os.linesep
f.write(line.encode('utf-8'))
</snippet></ROW><ROW><id>5115971</id><snippet>0</snippet></ROW><ROW><id>5115971</id><snippet>False</snippet></ROW><ROW><id>5115971</id><snippet>and</snippet></ROW><ROW><id>5115971</id><snippet>or</snippet></ROW><ROW><id>5115971</id><snippet>x = true_value if condition else false_value
</snippet></ROW><ROW><id>5115971</id><snippet>lambda x: x&gt;3 and 0 or x
</snippet></ROW><ROW><id>5115971</id><snippet>lambda x: 0 if x &gt; 3 else x
</snippet></ROW><ROW><id>5115971</id><snippet>map</snippet></ROW><ROW><id>5115971</id><snippet>func1</snippet></ROW><ROW><id>5115971</id><snippet>a = map(lambda x: 0 if x &gt; 3 else x,a)
print a
</snippet></ROW><ROW><id>5115971</id><snippet>enumerate</snippet></ROW><ROW><id>5115971</id><snippet>def func1(list,func2):
    for i,x in enumerate(list):
        list[i] = func2(x)
</snippet></ROW><ROW><id>5116456</id><snippet>next</snippet></ROW><ROW><id>5116456</id><snippet>views.service_order</snippet></ROW><ROW><id>5116456</id><snippet>context = {'next': reverse('views.send_confirmation_email')}
</snippet></ROW><ROW><id>5116456</id><snippet>&lt;form action='?next={{ next }}'&gt;
</snippet></ROW><ROW><id>5116456</id><snippet>if 'next' in request.GET:
    return HttpResponseRedirect(request.GET['next'])
</snippet></ROW><ROW><id>5116847</id><snippet>s.strip()[-4: -1]
</snippet></ROW><ROW><id>5116905</id><snippet>example1/settings.py</snippet></ROW><ROW><id>5116905</id><snippet>example2/settings.py</snippet></ROW><ROW><id>5116905</id><snippet>site</snippet></ROW><ROW><id>5117149</id><snippet>side="left"</snippet></ROW><ROW><id>5117180</id><snippet>eval</snippet></ROW><ROW><id>5117180</id><snippet>return operator_dict[operator_string](left_value, right_value)
</snippet></ROW><ROW><id>5117212</id><snippet>__init__.py</snippet></ROW><ROW><id>5117212</id><snippet>from .module1 import Class1
from .module2 import Class2
 ...
</snippet></ROW><ROW><id>5117296</id><snippet>&lt;module&gt;.__file__</snippet></ROW><ROW><id>5117296</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.__file__
'/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload/time.so'
</snippet></ROW><ROW><id>5117296</id><snippet>import inspect

path = inspect.currentframe().f_code.co_filename
</snippet></ROW><ROW><id>5117452</id><snippet>optparse</snippet></ROW><ROW><id>5117452</id><snippet>argparse</snippet></ROW><ROW><id>5117896</id><snippet>tank = list(itertools.islice(tanks,1,2))</snippet></ROW><ROW><id>5117896</id><snippet>if</snippet></ROW><ROW><id>5117896</id><snippet>best_tanks[field][field]</snippet></ROW><ROW><id>5117896</id><snippet>if</snippet></ROW><ROW><id>5117896</id><snippet>best_tanks[field]</snippet></ROW><ROW><id>5117896</id><snippet>TypeError: list indices must be integers, not str</snippet></ROW><ROW><id>5119029</id><snippet>from collections import defaultdict

WORDS = {'cat', 'hat', 'sat', 'car', 'cad', 'had', 'pad', 'pat', 'can', 'man'}

D1 = defaultdict(set)
D2 = defaultdict(set)
D3 = defaultdict(set)

for w in WORDS:
    D1[w[:2]].add(w)
    D2[w[0]+w[2]].add(w)
    D3[w[1:]].add(w)

def follows(w):
    followers = set(D1.get(w[:2]).union(D2.get(w[0]+w[2]), D3.get(w[1:])))
    followers.discard(w)
    return followers

for w in WORDS:
    print(w, follows(w))
</snippet></ROW><ROW><id>5119187</id><snippet>headers.add_header</snippet></ROW><ROW><id>5119187</id><snippet>gmemsess.py</snippet></ROW><ROW><id>5119187</id><snippet>rh.response.headers.add_header('Set-Cookie','%s=%s; path=/;'%(name,self._sid))
</snippet></ROW><ROW><id>5119187</id><snippet>rh.response.headers['Set-Cookie'] = '%s=%s; path=/;'%(name,self._sid)
</snippet></ROW><ROW><id>5119416</id><snippet>state0 = State("0")
state1 = State("1")
... and so on ...
state0.next_states = {message_a: state1, message_b: state2 }
state1.next_states = {message_b: state3}
... and so on ...
</snippet></ROW><ROW><id>5119554</id><snippet>while check</snippet></ROW><ROW><id>5119554</id><snippet>while &lt; 49152</snippet></ROW><ROW><id>5119554</id><snippet>check = True
while check :
    port_input = raw_input("port(number must be higher than 49152: ")
    try:
        port_number = int(port_input)
        check = (port_number &lt; 49152)
    except ValueError:
        check = True
</snippet></ROW><ROW><id>5119899</id><snippet>scipy.spatial.distance.pdist(myArr)</snippet></ROW><ROW><id>5119899</id><snippet>argmin</snippet></ROW><ROW><id>5120113</id><snippet>'/bla/bla/bla'</snippet></ROW><ROW><id>5120113</id><snippet>if</snippet></ROW><ROW><id>5120113</id><snippet>'/bla/bla/bla' is True</snippet></ROW><ROW><id>5120113</id><snippet>'/bla/bla/bla' == True</snippet></ROW><ROW><id>5120163</id><snippet>user_type = ContentType.objects.get(app_label="auth", model="user")
user_type = ContentType.objects.get(model="user")
# but this can throw an error if you have 2 models with the same name.
</snippet></ROW><ROW><id>5120163</id><snippet>get_model</snippet></ROW><ROW><id>5120163</id><snippet>from django.db.models import get_model
user_model = get_model('auth', 'user')
</snippet></ROW><ROW><id>5120163</id><snippet>ctype = ContentType.objects.get(model='user')
related_to_user = Room.objects.filter(content_type=ctype)
</snippet></ROW><ROW><id>5120327</id><snippet>unicode</snippet></ROW><ROW><id>5120509</id><snippet>def add_win(people_list, name):
    person = find_person(people_list, name)
    person['wins'] += 1

def find_person(people_list, name):
    for person in people_list:
        if person['name'] == name:
            return person
    person = {'name': name, 'wins': 0}
    people_list.append(person)
    return person
</snippet></ROW><ROW><id>5120648</id><snippet>application\zip</snippet></ROW><ROW><id>5120896</id><snippet>wave</snippet></ROW><ROW><id>5121297</id><snippet>select_related()</snippet></ROW><ROW><id>5121381</id><snippet>type</snippet></ROW><ROW><id>5121381</id><snippet>__init__</snippet></ROW><ROW><id>5121381</id><snippet>__new__</snippet></ROW><ROW><id>5121381</id><snippet>__init__</snippet></ROW><ROW><id>5121381</id><snippet>__init__</snippet></ROW><ROW><id>5121381</id><snippet>B = MetaClass(B.__name__, B.__bases__, B.__dict__)
</snippet></ROW><ROW><id>5121381</id><snippet>class _TempMetaclass(type):
    pass

class B:
    __metaclass__ = _TempMetaclass # or: type('temp', (type, ), {})
</snippet></ROW><ROW><id>5121381</id><snippet>class MetaClass(type):
    def __init__(cls, *a, **kw):
        super(MetaClass, cls).__init__(*a, **kw)
        cls._actual_init(*a, **kw)
    def _actual_init(cls, *a, **kw):
        # actual initialization goes here
</snippet></ROW><ROW><id>5121381</id><snippet>B.__class__ = MetaClass
MetaClass._actual_init(B, B.__name__, B.__bases__, B.__dict__)
</snippet></ROW><ROW><id>5121381</id><snippet>_actual_init</snippet></ROW><ROW><id>5121381</id><snippet>classmethod</snippet></ROW><ROW><id>5121857</id><snippet>&gt;&gt;&gt; class Writer:
...   def __init__(self):
...     self.count = 0
...   def write(self, data):
...     print "Write called", len(data)
...     return -1
...
&gt;&gt;&gt; curl = pycurl.Curl()
&gt;&gt;&gt; writer = Writer()
&gt;&gt;&gt; curl.setopt(pycurl.WRITEFUNCTION, writer.write)
&gt;&gt;&gt; curl.setopt(pycurl.URL, "file:///some_big_file.txt")
&gt;&gt;&gt; curl.perform()
Write called 16383
pycurl.error: invalid return value for write callback -1 16383
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
pycurl.error: (23, 'Failed writing body (0 != 16383)')
</snippet></ROW><ROW><id>5121887</id><snippet>serialize()</snippet></ROW><ROW><id>5121887</id><snippet>var data = $("form").serialize();
$.ajax({  
    type: "POST",  
    url: "/foo/",  
    data: data,  
    dataType: "json",
</snippet></ROW><ROW><id>5121963</id><snippet>import yaml
import yaml.constructor

try:
    # included in standard lib from Python 2.7
    from collections import OrderedDict
except ImportError:
    # try importing the backported drop-in replacement
    # it's available on PyPI
    from ordereddict import OrderedDict

class OrderedDictYAMLLoader(yaml.Loader):
    """
    A YAML loader that loads mappings into ordered dictionaries.
    """

    def __init__(self, *args, **kwargs):
        yaml.Loader.__init__(self, *args, **kwargs)

        self.add_constructor(u'tag:yaml.org,2002:map', type(self).construct_yaml_map)
        self.add_constructor(u'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

    def construct_yaml_map(self, node):
        data = OrderedDict()
        yield data
        value = self.construct_mapping(node)
        data.update(value)

    def construct_mapping(self, node, deep=False):
        if isinstance(node, yaml.MappingNode):
            self.flatten_mapping(node)
        else:
            raise yaml.constructor.ConstructorError(None, None,
                'expected a mapping node, but found %s' % node.id, node.start_mark)

        mapping = OrderedDict()
        for key_node, value_node in node.value:
            key = self.construct_object(key_node, deep=deep)
            try:
                hash(key)
            except TypeError, exc:
                raise yaml.constructor.ConstructorError('while constructing a mapping',
                    node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
            value = self.construct_object(value_node, deep=deep)
            mapping[key] = value
        return mapping
</snippet></ROW><ROW><id>5122108</id><snippet>x=foo[index]
</snippet></ROW><ROW><id>5122108</id><snippet>_</snippet></ROW><ROW><id>5122108</id><snippet>_</snippet></ROW><ROW><id>5122108</id><snippet>tuple</snippet></ROW><ROW><id>5122108</id><snippet>list</snippet></ROW><ROW><id>5122114</id><snippet>http-alt</snippet></ROW><ROW><id>5122128</id><snippet>result = getattr(myclient.service, 'some_method')(...)
</snippet></ROW><ROW><id>5122432</id><snippet>YourSheetObject.Shapes("opt_name").Value = 1
</snippet></ROW><ROW><id>5122529</id><snippet>sys.modules["classname"]</snippet></ROW><ROW><id>5122529</id><snippet>class fakemodule(object):

    @staticmethod
    def method(a, b):
        return a+b

import sys
sys.modules["package.module"] = fakemodule
</snippet></ROW><ROW><id>5122529</id><snippet>fakemodule.py</snippet></ROW><ROW><id>5122529</id><snippet>import fakemodule, sys

sys.modules["package.module"] = fakemodule
</snippet></ROW><ROW><id>5122606</id><snippet>textarea</snippet></ROW><ROW><id>5122606</id><snippet>default</snippet></ROW><ROW><id>5122606</id><snippet>class YourForm(Form):
    your_text_area = TextAreaField("TextArea", default="please add content")
</snippet></ROW><ROW><id>5122606</id><snippet>{{form.content()}}
</snippet></ROW><ROW><id>5122620</id><snippet>self</snippet></ROW><ROW><id>5122620</id><snippet>urlaccess.retrieve(url, saveas)
</snippet></ROW><ROW><id>5122620</id><snippet>urlaccess.retrieve(urlaccess, url, saveas)
</snippet></ROW><ROW><id>5122620</id><snippet>self</snippet></ROW><ROW><id>5122620</id><snippet>self</snippet></ROW><ROW><id>5122620</id><snippet>def http_error_404(url, fp, errcode, errmsg, headers, data):
    url.file_was_found = False
    # Python is treating `url` as `self`
    # Therefore the URL is being saved in `fp`, `fp` in `errcode`, etc.
</snippet></ROW><ROW><id>5122620</id><snippet>def http_error_404(self, url, fp, errcode, errmsg, headers, data):
    self.file_was_found = False
    # Now everything should work
</snippet></ROW><ROW><id>5123534</id><snippet>mystr = '(31.251, -98.877)'

lat, lng = map(float, mystr.strip('()').split(','))
</snippet></ROW><ROW><id>5123689</id><snippet>import numpy as np
x = np.random.randn(100, 3)
y = np.random.randn(100, 3)
</snippet></ROW><ROW><id>5123689</id><snippet>from numpy import newaxis
xy = x[:,:,newaxis] * y[:,newaxis,:]

# 10th matrix
print xy[10]
print np.outer(x[10,:], y[10,:])
</snippet></ROW><ROW><id>5123866</id><snippet>r = list(qs[:1])
if r:
  return r[0]
return None
</snippet></ROW><ROW><id>5123970</id><snippet>print dist</snippet></ROW><ROW><id>5123970</id><snippet>print(dist)</snippet></ROW><ROW><id>5124033</id><snippet>@classmethod</snippet></ROW><ROW><id>5124033</id><snippet>save_to_datastore()</snippet></ROW><ROW><id>5124154</id><snippet>&gt;&gt;&gt; open('fu\x01bar', 'w')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 22] invalid mode ('w') or filename: 'fu\x01bar'
</snippet></ROW><ROW><id>5124235</id><snippet>import numpy
from scipy import interpolate
x = numpy.array([0.0, 0.60, 1.0])
y = numpy.array([0.0, 0.25, 0.80, 1.0])
z = numpy.array([ 
   [ 1.4 ,  6.5 ,  1.5 ,  1.8 ],
   [ 8.9 ,  7.3 ,  1.1 ,  1.09],
   [ 4.5 ,  9.2 ,  1.8 ,  1.2 ]])
# you have to set kx and ky small for this small example dataset
# 3 is more usual and is the default
# s=0 will ensure this interpolates.  s&gt;0 will smooth the data
# you can also specify a bounding box outside the data limits
# if you want to extrapolate
sp = interpolate.RectBivariateSpline(x, y, z, kx=2, ky=2, s=0)

sp([0.60], [0.25])  # array([[ 7.3]])
sp([0.25], [0.60])  # array([[ 2.66427408]])
</snippet></ROW><ROW><id>5124255</id><snippet>import somemodule</snippet></ROW><ROW><id>5124255</id><snippet>somemodule.someglobal</snippet></ROW><ROW><id>5124255</id><snippet>from somemodule import *</snippet></ROW><ROW><id>5124255</id><snippet>__all__</snippet></ROW><ROW><id>5124255</id><snippet>someglobal</snippet></ROW><ROW><id>5124255</id><snippet>from module import *</snippet></ROW><ROW><id>5124275</id><snippet>import cgi
escaped = cgi.escape(unescaped)
</snippet></ROW><ROW><id>5124409</id><snippet>from numpy import *

a = array([[1,2,3],[0,3,NaN]]);
whereAreNaNs = isnan(a);
a[whereAreNaNs] = 0;
</snippet></ROW><ROW><id>5124409</id><snippet>In [12]: whereAreNaNs
Out[12]: 
array([[False, False, False],
       [False, False,  True]], dtype=bool)
</snippet></ROW><ROW><id>5124447</id><snippet>import sys
list_of_lines = [line.strip() for line in sys.stdin]
</snippet></ROW><ROW><id>5124674</id><snippet>[build_ext] 
compiler=icc
</snippet></ROW><ROW><id>5124929</id><snippet>eggs_dict = {"large":10, "medium":5, "small":24}
eggs_json = simplejson.dumps(eggs_dict)
spam = Spam(key_name='blah')
spam.eggs = eggs_dict
db.put(spam.eggs)        

new_spam = db.get(db.Key.from_path('Spam', 'blah'))

# Later, fetch spam and then return the json as part of a Response
self.response.out.write(new_spam.eggs)
</snippet></ROW><ROW><id>5125210</id><snippet>windows-update</snippet></ROW><ROW><id>5125636</id><snippet>.get</snippet></ROW><ROW><id>5125636</id><snippet>dict</snippet></ROW><ROW><id>5125636</id><snippet>len</snippet></ROW><ROW><id>5125636</id><snippet>.get</snippet></ROW><ROW><id>5125636</id><snippet>def safe_list_get (l, idx, default):
  try:
    return l[idx]
  except IndexError:
    return default
</snippet></ROW><ROW><id>5125636</id><snippet>__builtins__.list</snippet></ROW><ROW><id>5125636</id><snippet>__main__</snippet></ROW><ROW><id>5125636</id><snippet>list</snippet></ROW><ROW><id>5125636</id><snippet>get</snippet></ROW><ROW><id>5126179</id><snippet>Accept-Encoding:gzip</snippet></ROW><ROW><id>5126179</id><snippet>If-None-Match</snippet></ROW><ROW><id>5126227</id><snippet>key = None
current = list()
for line in file(...):

   if line.startswith('['):
       if key:
           print key, current
       key = line[1:-1]
       current = list()

   else:
       current.append(line)
</snippet></ROW><ROW><id>5126259</id><snippet>file = open('readFile.txt', 'r')
lines = file.readlines()
file.close()
del file

lines = [line.split(' ') for line in lines]
lines.sort(lambda x,y: cmp(x[2], y[2])
lines = [' '.join(line) for line in lines]
</snippet></ROW><ROW><id>5126471</id><snippet>graph = facebook.GraphAPI(oauth_access_token)
photo = open("picture.jpg", "rb")
graph.put_object("me", "photos", message="You can put a caption here", source=photo.read())
photo.close()
</snippet></ROW><ROW><id>5127459</id><snippet>import Queue
import threading

def basic_worker(queue):
    while True:
        item = queue.get()
        # do_work(item)
        print(item)
        queue.task_done()
def basic():
    # http://docs.python.org/library/queue.html
    queue = Queue.Queue()
    for i in range(3):
         t = threading.Thread(target=basic_worker,args=(queue,))
         t.daemon = True
         t.start()
    for item in range(4):
        queue.put(item)
    queue.join()       # block until all tasks are done
    print('got here')

basic()
</snippet></ROW><ROW><id>5127459</id><snippet>% test.py
0
1
2
3
got here
</snippet></ROW><ROW><id>5127459</id><snippet>         t.daemon = True
</snippet></ROW><ROW><id>5127459</id><snippet>got here</snippet></ROW><ROW><id>5127459</id><snippet>t.daemon</snippet></ROW><ROW><id>5127459</id><snippet>True</snippet></ROW><ROW><id>5127459</id><snippet>t</snippet></ROW><ROW><id>5127614</id><snippet>import sys, random
from PyQt4 import QtGui, QtCore

# Robot Widget
class RobotLink(QtGui.QWidget):
    def __init__(self, parent, x, y, width, height, fill):
        super(RobotLink, self).__init__(parent)
        self._fill     = fill
        self._rotation = 0
        self.setGeometry(x, y, width, height)

    def paintEvent(self, e):
        painter = QtGui.QPainter()
        painter.begin(self)
        self.drawLink(painter)
        painter.end()

    def drawLink(self, painter):
        painter.setPen(QtGui.QColor(0, 0, 0))
        painter.setBrush(self._fill)
        painter.drawEllipse(0, 0, self.width(), self.height())

# Window
class Window(QtGui.QWidget):
    # Default Constructor, sets up the window GUI
    def __init__(self):
        super(Window, self).__init__()
        self.initUI()

    def initUI(self):
        self._link1 = RobotLink(self, 10, 10, 100, 50, QtCore.Qt.DiagCrossPattern)
        self._link2 = RobotLink(self, 100, 100, 50, 100, QtCore.Qt.Dense5Pattern)
        self._link3 = RobotLink(self, 150, 150, 50, 50, QtCore.Qt.Dense2Pattern)

        self.setGeometry(300, 300, 800, 600)
        self.setWindowTitle("CSCE 452 - PaintBot")

    def paintEvent(self, e):
        super(Window, self).paintEvent(e)
        painter = QtGui.QPainter()
        painter.begin(self)
        self.drawBoundingBoxes(painter)
        painter.end()

    # Draws the boxes that define the robots workspace and
    # the control panel
    def drawBoundingBoxes(self, painter):
        color = QtGui.QColor(0, 0, 0)
        color.setNamedColor("#cccccc")
        painter.setPen(color)

        # Draw the robot workspace
        painter.setBrush(QtGui.QColor(255, 255, 255))
        painter.drawRect(10, 10, 500, 578)

        # Draw the control panel workspace
        painter.setBrush(QtGui.QColor(150, 150, 150))
        painter.drawRect(520, 10, 270, 578)

        # Draws the slider 'base'
        painter.setPen(QtGui.QColor(0, 0, 0))
        painter.drawLine(100, 570, 400, 570)

    def changeValue(self, value):
        self.wid.emit(QtCore.SIGNAL("updateRobot(int)"), value)
        self.wid.repaint()

# Setup the Window, and the Robot
app = QtGui.QApplication(sys.argv)
win = Window()
win.show()
app.exec_()
</snippet></ROW><ROW><id>5127957</id><snippet>emit</snippet></ROW><ROW><id>5127957</id><snippet>handleError</snippet></ROW><ROW><id>5127957</id><snippet>/usr/lib/python2.6/logging/__init__.py</snippet></ROW><ROW><id>5127957</id><snippet>handleError</snippet></ROW><ROW><id>5127957</id><snippet>def handleError(self, record):
    """
    Handle errors which occur during an emit() call.

    This method should be called from handlers when an exception is
    encountered during an emit() call. If raiseExceptions is false,
    exceptions get silently ignored. This is what is mostly wanted
    for a logging system - most users will not care about errors in
    the logging system, they are more interested in application errors.
    You could, however, replace this with a custom handler if you wish.
    The record which was being processed is passed in to this method.
    """
    if raiseExceptions:
        ei = sys.exc_info()
        try:
            traceback.print_exception(ei[0], ei[1], ei[2],
                                      None, sys.stderr)
            sys.stderr.write('Logged from file %s, line %s\n' % (
                             record.filename, record.lineno))
        except IOError:
            pass    # see issue 5971
        finally:
            del ei
</snippet></ROW><ROW><id>5127957</id><snippet>raise</snippet></ROW><ROW><id>5128003</id><snippet>from pylab import *
origin = 'lower'

delta = 0.025

x = y = arange(-3.0, 3.01, delta)
X, Y = meshgrid(x, y)
Z1 = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = 10 * (Z1 - Z2)

nr, nc = Z.shape

CS = contourf(
    X, Y, Z,
    levels = linspace(Z.min(), Z.max(), len(x)),
    ls = '-',
    cmap=cm.bone,
    origin=origin)

CS1 = contour(
    CS,
    levels = linspace(Z.min(), Z.max(), len(x)),
    ls = '-',
    cmap=cm.bone,
    origin=origin)

show()
</snippet></ROW><ROW><id>5128003</id><snippet>import matplotlib
matplotlib.use('TkAgg') # do this before importing pylab
import time
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

def animate():
    origin = 'lower'
    delta = 0.025

    x = y = arange(-3.0, 3.01, delta)
    X, Y = meshgrid(x, y)
    Z1 = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
    Z2 = bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
    Z = 10 * (Z1 - Z2)

    CS1 = ax.contourf(
        X, Y, Z,
        levels = linspace(Z.min(), Z.max(), 10),
        cmap=cm.bone,
        origin=origin)

    for i in range(10):
        tempCS1 = contourf(
            X, Y, Z,
            levels = linspace(Z.min(), Z.max(), 10),
            cmap=cm.bone,
            origin=origin)
        del tempCS1
        fig.canvas.draw()
        time.sleep(0.1)
        Z += x/10

win = fig.canvas.manager.window
fig.canvas.manager.window.after(100, animate)
plt.show()
</snippet></ROW><ROW><id>5128065</id><snippet>y</snippet></ROW><ROW><id>5128065</id><snippet>x</snippet></ROW><ROW><id>5128065</id><snippet>ii = [0, 5, 21]
y = x[ii]
&lt;manipulate y&gt;
x[ii] = y
</snippet></ROW><ROW><id>5128587</id><snippet>from django.conf.urls.defaults import *
from satchmo_store.urls import urlpatterns

urlpatterns += patterns('',

    # Your urls go here

)
</snippet></ROW><ROW><id>5128587</id><snippet>from django.conf.urls.defaults import *
from satchmo_store.urls import urlpatterns as satchmo_urls

urlpatterns = patterns('',

    # Your urls go here

)

urlpatterns += satchmo_urls
</snippet></ROW><ROW><id>5128834</id><snippet>import numpy as np
x = np.array(range(10 * 30)).reshape(100, 3)
y = np.array(range(1010, 10, -10))
args = y.argsort(axis = 0)
print x[args]
</snippet></ROW><ROW><id>5128893</id><snippet>--with-ssl</snippet></ROW><ROW><id>5128988</id><snippet>&lt;zodb&gt;
    &lt;zeoclient&gt;
    server localhost:9100
    &lt;/zeoclient&gt;
&lt;/zodb&gt;
</snippet></ROW><ROW><id>5128988</id><snippet>&lt;zodb&gt;
  &lt;relstorage&gt;
    &lt;postgresql&gt;
      # The dsn is optional, as are each of the parameters in the dsn.
      dsn dbname='zodb' user='username' host='localhost' password='pass'
    &lt;/postgresql&gt;
  &lt;/relstorage&gt;
&lt;/zodb&gt;
</snippet></ROW><ROW><id>5128997</id><snippet>class Logger(object): # boilerplate code
    def log(self,level,msg,*args,**kwargs): # *args, **kwargs = flexible arguments
        self._log(level,msg,*args,**kwargs) # call with flexible argments

    def _log(self,level,msg,*args,**kwargs):
        # override me at runtime :) 
        # I think Java people call this Dependency Runtime Injection
        if level&gt;1:
            print msg,args,kwargs

logger = Logger() # boilerplate code

def logged(level): # what pattern do you call this?
    def logged_decorator(function): # and this? 
        def func(*args,**kwars): 
            name = func.__name__ # look ma, reflective metaprogramming!
            logger.log(level,name,*args,**kwargs)
            return func(*args,**kwargs)
        return func # boilerplate code
    return logged_decorator # boilerplate code
</snippet></ROW><ROW><id>5128997</id><snippet>@logged
def my_func(arg1,arg2):
   # your code here
   pass
</snippet></ROW><ROW><id>5129052</id><snippet>c_bool</snippet></ROW><ROW><id>5129052</id><snippet>c_bool = c_int
</snippet></ROW><ROW><id>5129052</id><snippet>from ctypes import *
</snippet></ROW><ROW><id>5129052</id><snippet>mosquitto.py</snippet></ROW><ROW><id>5129072</id><snippet>close_fds=True</snippet></ROW><ROW><id>5129072</id><snippet>Popen</snippet></ROW><ROW><id>5129072</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>5129072</id><snippet>Popen</snippet></ROW><ROW><id>5129072</id><snippet>ping</snippet></ROW><ROW><id>5129072</id><snippet>ping</snippet></ROW><ROW><id>5129072</id><snippet>-c1</snippet></ROW><ROW><id>5129072</id><snippet>ping</snippet></ROW><ROW><id>5129072</id><snippet>ping hostname</snippet></ROW><ROW><id>5129072</id><snippet>#! /bin/bash

for i in {1..50}
do
   ping -c1 somehostname
   # maybe 'sleep 1' here
done
</snippet></ROW><ROW><id>5129072</id><snippet>ping</snippet></ROW><ROW><id>5129344</id><snippet>from itertools import islice
def chunkwise(n, iterable):
    it = iter(iterable)
    while True:
        chunk = list(islice(it, n))
        if not chunk: 
            break
        yield chunk

print list(chunkwise(3, range(10)))
# [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
</snippet></ROW><ROW><id>5129867</id><snippet>sudo chown www-data:www-data /var/www/xy/
sudo chmod -R g+rw /var/wwww/xy/uploads
</snippet></ROW><ROW><id>5129867</id><snippet>mod_python</snippet></ROW><ROW><id>5129867</id><snippet>mod_wsgi</snippet></ROW><ROW><id>5130031</id><snippet>seek</snippet></ROW><ROW><id>5130031</id><snippet>seek</snippet></ROW><ROW><id>5130296</id><snippet>name=u'Python Programming Language \u2013 Official Website'
url=u'http://www.python.org/'
</snippet></ROW><ROW><id>5130296</id><snippet>urls.append(i.split('"')[3])
names.append(data[ind-2].split('"')[3])
# (1) relies on name being 2 lines before url
# (2) fails if there is a `"` in the name
# example: "name": "The \"Fubar\" website",
</snippet></ROW><ROW><id>5130296</id><snippet>try:
    import json
except ImportError: 
    import simplejson as json
import sys

def convert_file(infname, outfname):

    def explore(folder_name, folder_info):
        for child_dict in folder_info['children']:
            ctype = child_dict.get('type')
            name = child_dict.get('name')
            if ctype == 'url':
                url = child_dict.get('url')
                # print "name=%r url=%r" % (name, url)
                fw.write(name.encode('utf-8') + '&lt;br&gt;\n')
            elif ctype == 'folder':
                explore(name, child_dict)
            else:
                print "*** Unexpected ctype=%r ***" % ctype

    f = open(infname, 'rb')
    bmarks = json.load(f)
    f.close()
    fw = open(outfname, 'w')
    fw.write("&lt;html&gt;&lt;body&gt;\n")
    for folder_name, folder_info in bmarks['roots'].iteritems():
        explore(folder_name, folder_info)
    fw.write("&lt;/body&gt;&lt;/html&gt;")
    fw.close()    

if __name__ == "__main__":
    convert_file(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>5130337</id><snippet>class A(object):

    def __init__(self):
        self.a = 1
        self.b = 1

    @property
    def a_plus_b(self):
        return self.a + self.b

foo = A()
print foo.a_plus_b # prints "2"
foo.a = 3
print foo.a_plus_b # prints "4"
foo.b = 4
print foo.a_plus_b # prints "7"
</snippet></ROW><ROW><id>5130519</id><snippet>from django.http import HttpResponse
from django.utils import simplejson

def simple_view(request):
    response = {'string': "test",
                'number': 42,
                'array': [1, 2, 3],
                'js_object': dict(foo="bar")}
    return HttpResponse(simplejson.dumps(response),
                        mimetype="application/json")
</snippet></ROW><ROW><id>5130519</id><snippet>{"string": "test",
 "number": 42,
 "array": [1, 2, 3],
 "js_object": {foo: "bar"}}
</snippet></ROW><ROW><id>5130862</id><snippet>from django.db.models import Count
users = User.objects.annotate(action_count=Count('action')).order_by('action_count')
# note that this also saves your extra query PER user object.

{% for user in users %}
   {{ user.action_count }}
{% endfor %}
</snippet></ROW><ROW><id>5130862</id><snippet>my_list.sort(key=lambda x: x[2])

my_list.sort(key=lambda x: x.method())
</snippet></ROW><ROW><id>5130869</id><snippet>HASH(m)</snippet></ROW><ROW><id>5130869</id><snippet>HASH(m . x)</snippet></ROW><ROW><id>5130869</id><snippet>x</snippet></ROW><ROW><id>5130869</id><snippet>.</snippet></ROW><ROW><id>5130869</id><snippet>ro</snippet></ROW><ROW><id>5130869</id><snippet>HASH(secret . ro)</snippet></ROW><ROW><id>5130869</id><snippet>HASH(secret . root)</snippet></ROW><ROW><id>5130876</id><snippet>"[a-zA-Z]+://([a-zA-Z0-9.]+)"</snippet></ROW><ROW><id>5130876</id><snippet>re.compile</snippet></ROW><ROW><id>5130876</id><snippet>domain[-2]</snippet></ROW><ROW><id>5130876</id><snippet>url = urlparse.urlparse(response.url)
domain = url.netloc        # 'www.google.com'
domain = domain.split(".") # ['www', 'google', 'com']
info = None
for i in range(len(domain)):
    subdomain = ".".join(domain[i:]) # 'www.google.com', 'google.com', 'com'
    try:
        info = domain_info[subdomain]
        break
    except KeyError:
        pass
</snippet></ROW><ROW><id>5130876</id><snippet>.lower()</snippet></ROW><ROW><id>5131130</id><snippet>class Bunch(object):
    def __init__(self, **kwds):
        self.__dict__.update(kwds)
</snippet></ROW><ROW><id>5131349</id><snippet>"""</snippet></ROW><ROW><id>5131349</id><snippet>'''</snippet></ROW><ROW><id>5131349</id><snippet>class MrsRobinson(object):
    '''
    What's that you say?
    '''
    pass
</snippet></ROW><ROW><id>5131349</id><snippet>"""</snippet></ROW><ROW><id>5131349</id><snippet>python-quote-syntax</snippet></ROW><ROW><id>5131382</id><snippet>enc = msg + key (mod 127)
</snippet></ROW><ROW><id>5131382</id><snippet>enc - key = msg + key - key (mod 127)
</snippet></ROW><ROW><id>5131382</id><snippet>enc - key = msg (mod 127)
</snippet></ROW><ROW><id>5131382</id><snippet>def encrypt(key, msg):
    encryped = []
    for i, c in enumerate(msg):
        key_c = ord(key[i % len(key)])
        msg_c = ord(c)
        encryped.append(chr((msg_c + key_c) % 127))
    return ''.join(encryped)

def decrypt(key, encryped):
    msg = []
    for i, c in enumerate(encryped):
        key_c = ord(key[i % len(key)])
        enc_c = ord(c)
        msg.append(chr((enc_c - key_c) % 127))
    return ''.join(msg)

if __name__ == '__main__':
    key = 'This_is_my_awsome_secret_key'
    msg = 'Hello world'
    encrypted = encrypt(key, msg)
    decrypted = decrypt(key, encrypted)

    print 'Message:', repr(msg)
    print 'Key:', repr(key)
    print 'Encrypted:', repr(encrypted)
    print 'Decrypted:', repr(decrypted)
</snippet></ROW><ROW><id>5131382</id><snippet>Message: 'Hello world'
Key: 'This_is_my_awsome_secret_key'
Encrypted: '\x1dNV`O\nkO`fD'
Decrypted: 'Hello world'
</snippet></ROW><ROW><id>5131395</id><snippet>slap_count = Slap.objects.filter(from_user=request.user, \ 
                      date__gte=datetime.date.today()).count()

# specifically setting datetimefield=datetime.date.today() won't work
# gte = will work for datetimefield vs datetime object starting at that date
# it's also assumed there will never be a slap from the future. 
</snippet></ROW><ROW><id>5131395</id><snippet>SELECT ... FROM ... WHERE ... date &gt;= 2011-02-26 00:00:00 
</snippet></ROW><ROW><id>5131395</id><snippet>date__day, date__year, date__month</snippet></ROW><ROW><id>5131450</id><snippet>class WSGICache(object):

    def __init__(self, app):
        self.app = app
        self.cache = {}

    def is_expired(self, environ):
        """Determine is the resource the request for already expired?

        """
        # FIXME: check is the resource expired, by looking
        # PATH_INFO, if it is a file, it might be last modified time
        # if it is an object from database, see what is the last modified time
        return False

    def __call__(self, environ, start_response):
        path = environ['PATH_INFO']
        cached = self.cache.get(path)
        # do we have valid cache?
        if self.is_expired(environ) or not cached:
            cached = list(self.app(environ, start_response))
            self.cache[path] = cached
        return cached
</snippet></ROW><ROW><id>5131492</id><snippet>WWW-Authenticate: Digest
</snippet></ROW><ROW><id>5131492</id><snippet>import urllib2

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, "http://authenticationsite.com/", "protected", "password")

# use HTTPDigestAuthHandler instead here
authhandler = urllib2.HTTPDigestAuthHandler(passman)
opener = urllib2.build_opener(authhandler)

res = opener.open("http://authenticationsite.com/content.html")
print res.read()
res.close()
</snippet></ROW><ROW><id>5131563</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a[1:3]
&gt;&gt;&gt; id(a[1])
143727964
&gt;&gt;&gt; id(b[0])
143727964
</snippet></ROW><ROW><id>5131673</id><snippet>/usr/local/bin/uwsgi -x /path/to/uwsgiconfig.xml</snippet></ROW><ROW><id>5131673</id><snippet>&lt;uwsgi&gt;
    &lt;chdir&gt;/srv/mobile-site/app/&lt;/chdir&gt;
    &lt;wsgi-file&gt;/srv/mobile-site/app/mobilecms.py&lt;/wsgi-file&gt;
    &lt;callable&gt;app&lt;/callable&gt;

    &lt;socket&gt;/tmp/foo.sock&lt;/socket&gt;
    &lt;chmod-socket&gt;666&lt;/chmod-socket&gt;

    &lt;master /&gt;
    &lt;processes&gt;1&lt;/processes&gt;

    &lt;disable-logging /&gt;&lt;!-- Errors are still logged; this just disables request logging which Cherokee takes care of --&gt;

    &lt;vacuum /&gt;
    &lt;no-orphans /&gt;
&lt;/uwsgi&gt;
</snippet></ROW><ROW><id>5132005</id><snippet>"doc" and "pdf" and "xls" and "jpg"</snippet></ROW><ROW><id>5132005</id><snippet>'jpg'</snippet></ROW><ROW><id>5132005</id><snippet>&gt;&gt;&gt; "doc" and "pdf" and "xls" and "jpg"
'jpg'
</snippet></ROW><ROW><id>5132005</id><snippet>if not any(test_string in text for test_string in ["doc", "pdf", "xls", "jpg"]):
    filtered.append(text)
</snippet></ROW><ROW><id>5132005</id><snippet>for</snippet></ROW><ROW><id>5132005</id><snippet>else</snippet></ROW><ROW><id>5132005</id><snippet>for test_string in ["doc", "pdf", "xls", "jpg"]:
    if test_string in text:
        break
else: 
    filtered.append(text)
</snippet></ROW><ROW><id>5132005</id><snippet>tofilter = ["one.pdf", "two.txt", "three.jpg", "four.png"]
test_strings = ["doc", "pdf", "xls", "jpg"]
filtered = [s for s in tofilter if not any(t in s for t in test_strings)]
</snippet></ROW><ROW><id>5132005</id><snippet>text_list = generate_text_list() # or whatever you do to get a text sequence
extensions = ['.doc', '.pdf', '.xls', '.jpg']
words = ['some', 'words', 'to', 'filter']
text_list = [text for text in text_list if not text.endswith(tuple(extensions))]
text_list = [text for text in text_list if not any(word in text for word in words)]
</snippet></ROW><ROW><id>5132057</id><snippet>&gt;&gt;&gt; ' '.join( x+'-temp' for x in ['a', 'b', 'c'] )
'a-temp b-temp c-temp'
</snippet></ROW><ROW><id>5132189</id><snippet># search.py
searchables = []

def search(search_string):
    return [s.do_search(search_string) for s in searchables]

def register_search_engine(searchable):
    if hasattr(searchable, 'do_search'):
        # you want to see if this is callable also
        searchables.append(searchable)
    else:
        # raise some error perhaps


# views.py
def do_search(search_string):
    # search somehow, and return result

# models.py

# you need to ensure this method runs before any attempt at searching can begin
# like in models.py if this app is within installed_apps. the reason being that
# this module may not have been imported before the call to search.
import search
from views import do_search
search.register_search_engine(do_search)
</snippet></ROW><ROW><id>5132189</id><snippet>models.py</snippet></ROW><ROW><id>5132189</id><snippet>settings.py</snippet></ROW><ROW><id>5132189</id><snippet># settings.py
SEARCH_ENGINES = ('app1.views.do_search', 'app2.views.do_search')

# search.py
from django.conf import settings
from django.utils import importlib

def search(search_string):
    search_results = []
    for engine in settings.SEARCH_ENGINES
       i = engine.rfind('.')
       module, attr = engine[:i], engine[i+1:]
       mod = importlib.import_module(module)
       do_search = getattr(mod, attr)
       search_results.append(do_search(search_string))
    return search_results
</snippet></ROW><ROW><id>5132240</id><snippet>self.readbuffer += s.recv(1024).decode()</snippet></ROW><ROW><id>5132240</id><snippet>temp=self.readbuffer.split("\n")</snippet></ROW><ROW><id>5132240</id><snippet>self.readbuffer=temp.pop()</snippet></ROW><ROW><id>5132240</id><snippet>'\r'</snippet></ROW><ROW><id>5132254</id><snippet>\x1f\x8B</snippet></ROW><ROW><id>5132254</id><snippet>req2.add_header('Accept-encoding', 'gzip')</snippet></ROW><ROW><id>5132254</id><snippet>result.headers.getheader('Content-Encoding')</snippet></ROW><ROW><id>5132274</id><snippet>and</snippet></ROW><ROW><id>5132274</id><snippet>hasattr</snippet></ROW><ROW><id>5132274</id><snippet>try, except</snippet></ROW><ROW><id>5132274</id><snippet>if hasattr(var, 'prop') and var.prop == 10:
    print var.prop
</snippet></ROW><ROW><id>5132274</id><snippet>try:
    print var.prop
except AttributeError:
    print "propless var"
</snippet></ROW><ROW><id>5133656</id><snippet>class AbstractClass(object):
    '''Abstract base class template, implementing factory pattern through 
       use of the __new__() initializer. Factory method supports trivial, 
       argumented, &amp; keyword argument constructors of arbitrary length.'''

   __slots__ = ["baseProperty"]
   '''Slots define [template] abstract class attributes. No instance
       __dict__ will be present unless subclasses create it through 
       implicit attribute definition in __init__() '''

   def __new__(cls, *args, **kwargs):
       '''Factory method for base/subtype creation. Simply creates an
       (new-style class) object instance and sets a base property. '''
       instance = object.__new__(cls)

       instance.baseProperty = "Thingee"
       return instance
</snippet></ROW><ROW><id>5133656</id><snippet>class Sub(AbstractClass):
   '''Subtype template implements AbstractClass base type and adds
      its own 'foo' attribute. Note (though poor style, that __slots__
      and __dict__ style attributes may be mixed.'''

   def __init__(self):
       '''Subtype initializer. Sets 'foo' attribute. '''
       self.foo = "bar"
</snippet></ROW><ROW><id>5133656</id><snippet>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from TestFactory import *
&gt;&gt;&gt; s = Sub()
&gt;&gt;&gt; s.foo
'bar'
&gt;&gt;&gt; s.baseProperty
'Thingee'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5133656</id><snippet>instance.otherBaseProperty = "Thingee2"
</snippet></ROW><ROW><id>5133698</id><snippet>import numpy

def rgba_unpremultiply(data):
    a = numpy.fromstring(data, 'B') # Treat the string as an array of bytes
    a = a.astype('I') # Cast array of bytes to array of uints, since temporary values needs to be larger than byte
    alpha = a[3::4] # Every 4th element starting from index 3
    alpha = numpy.where(alpha == 0, 255, alpha) # Don't modify colors where alpha is 0
    a[0::4] = a[0::4] * 255 // alpha # Operates on entire slices of the array instead of looping over each element
    a[1::4] = a[1::4] * 255 // alpha
    a[2::4] = a[2::4] * 255 // alpha
    return a.astype('B').tostring() # Cast back to bytes
</snippet></ROW><ROW><id>5133779</id><snippet>easy_install hg-git
</snippet></ROW><ROW><id>5133779</id><snippet>python -c "import hggit"
</snippet></ROW><ROW><id>5133779</id><snippet>head -n1 `which hg`
</snippet></ROW><ROW><id>5133779</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.a­pp/Contents/MacOS/Python -c "import hggit"
</snippet></ROW><ROW><id>5133862</id><snippet>hash("pwd")</snippet></ROW><ROW><id>5133862</id><snippet>"pwd"</snippet></ROW><ROW><id>5133862</id><snippet>"pwd"</snippet></ROW><ROW><id>5133862</id><snippet>"hello"</snippet></ROW><ROW><id>5133862</id><snippet>hash("hello") == hash("pwd")</snippet></ROW><ROW><id>5133862</id><snippet>"hello"</snippet></ROW><ROW><id>5133862</id><snippet>hash</snippet></ROW><ROW><id>5134017</id><snippet>pie()</snippet></ROW><ROW><id>5134017</id><snippet># This is a trivial modification of the example here:
# http://matplotlib.sourceforge.net/examples/pylab_examples/pie_demo.html

from pylab import *

data = {(87, 82, 44): 1, (255, 245, 241): 11, (24, 13, 9): 4}

colors = []
counts = []

for color, count in data.items():
    colors.append([float(x)/255 for x in color])
    counts.append(count)

figure(1, figsize=(6,6))

pie(counts, colors=colors, autopct='%1.1f%%', shadow=True)
title('Example Pie Chart', bbox={'facecolor':'0.8', 'pad':5})

show()
</snippet></ROW><ROW><id>5134058</id><snippet>BOARD_SIZE=1</snippet></ROW><ROW><id>5134058</id><snippet>[[(1,1)]]</snippet></ROW><ROW><id>5134058</id><snippet>[(1,1)]</snippet></ROW><ROW><id>5134058</id><snippet>(1,1)</snippet></ROW><ROW><id>5134058</id><snippet>smaller_solutions</snippet></ROW><ROW><id>5134058</id><snippet>BOARD_SIZE=8</snippet></ROW><ROW><id>5134058</id><snippet>n=1</snippet></ROW><ROW><id>5134058</id><snippet>def solve(n):
    if n == 0: return [[]] # No RECURSION if n=0. 
    smaller_solutions = solve(n-1) # RECURSION!!!!!!!!!!!!!!
    solutions = []
    for solution in smaller_solutions:# I moved this around, so it makes more sense
        for column in range(1,BOARD_SIZE+1): # I changed this, so it makes more sense
            # try adding a new queen to row = n, column = column 
            if not under_attack(column , solution): 
                solutions.append(solution + [(n,column)])
    return solutions
</snippet></ROW><ROW><id>5134058</id><snippet>under_attack</snippet></ROW><ROW><id>5134058</id><snippet>under_attack</snippet></ROW><ROW><id>5134058</id><snippet>def under_attack(column, existing_queens):
    # ASSUMES that row = len(existing_queens) + 1
    row = len(existing_queens)+1
    for queen in existing_queens:
        r,c = queen
        if r == row: return True # Check row
        if c == column: return True # Check column
        if (column-c) == (row-r): return True # Check left diagonal
        if (column-c) == -(row-r): return True # Check right diagonal
    return False
</snippet></ROW><ROW><id>5134058</id><snippet>under_attack</snippet></ROW><ROW><id>5134058</id><snippet>existing_queens</snippet></ROW><ROW><id>5134101</id><snippet>ip1=temp_orig</snippet></ROW><ROW><id>5134101</id><snippet>temp_orig</snippet></ROW><ROW><id>5134101</id><snippet>ip1=[list(row) for row in temp_orig]
</snippet></ROW><ROW><id>5134101</id><snippet>temp_orig</snippet></ROW><ROW><id>5134101</id><snippet>temp_orig</snippet></ROW><ROW><id>5134230</id><snippet># load corrections file, mapping user input -&gt; output
# load survey
import difflib

possible_values = corrections.values()

for answer in survey:
    output = corrections.get(answer,None)
    if output = None:
        likely_outputs = difflib.get_close_matches(input,possible_values)
        output = get_user_to_select_output_or_add_new(likely_outputs)
        corrections[answer] = output
        possible_values.append(output)
save_corrections_as_csv
</snippet></ROW><ROW><id>5134730</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>5134787</id><snippet>:</snippet></ROW><ROW><id>5134787</id><snippet>item.find("{http://example.org/}status").text</snippet></ROW><ROW><id>5134896</id><snippet>def getmd5(filename, ....):

  return m.hexdigest()


md5s = dict()

for fname in filenames:
   md5s[fname] = getmd5(fname)

print md5s
</snippet></ROW><ROW><id>5134961</id><snippet>.sort()</snippet></ROW><ROW><id>5134961</id><snippet>sorted()</snippet></ROW><ROW><id>5134961</id><snippet>def naive_sort(ls, key):
    ls = [(key(i), i) for i in ls]
    while ls:
       e = min(ls)
       ls.remove(e)
       yield e[1]
</snippet></ROW><ROW><id>5134961</id><snippet>khmer_number = [u'\u17e0', u'\u17e1', u'\u17e2', u'\u17e3', u'\u17e4', u'\u17e5', u'\u17e6', u'\u17e7', u'\u17e8', u'\u17e9']
international_number = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
number_map = dict(zip(khmer_number, international_number))

ls = [khmer_number[n] for n in [4, 2, 5, 3, 7, 0]]
print list(naive_sort(ls, key=lambda x: number_map[x]))
</snippet></ROW><ROW><id>5134961</id><snippet>&gt;&gt;&gt; list(u'\u17E0\u17E2\u17E3\u17E4\u17E5\u17E7')
[u'\u17e0', u'\u17e2', u'\u17e3', u'\u17e4', u'\u17e5', u'\u17e7']
</snippet></ROW><ROW><id>5134961</id><snippet>s = ''.join([u'\u17e0', u'\u17e2', u'\u17e3', u'\u17e4', u'\u17e5', u'\u17e7'])
</snippet></ROW><ROW><id>5134961</id><snippet>print s</snippet></ROW><ROW><id>5134961</id><snippet>print s.encode('utf-8')</snippet></ROW><ROW><id>5134961</id><snippet>utf-8</snippet></ROW><ROW><id>5134979</id><snippet>a</snippet></ROW><ROW><id>5134979</id><snippet>print(str(a).replace('None','_'))
</snippet></ROW><ROW><id>5134979</id><snippet>def printarray(a): 
    print(str(a).replace('None','_'))
</snippet></ROW><ROW><id>5135012</id><snippet>&lt;span class="current page"&gt;</snippet></ROW><ROW><id>5135012</id><snippet>current</snippet></ROW><ROW><id>5135012</id><snippet>page</snippet></ROW><ROW><id>5135012</id><snippet>disabled</snippet></ROW><ROW><id>5135012</id><snippet>next</snippet></ROW><ROW><id>5135270</id><snippet>[bean for bean in beans if bean.type == 'coffee']
</snippet></ROW><ROW><id>5135270</id><snippet>'\n'.join(str(bean) for bean in beans if bean.type == 'coffee')</snippet></ROW><ROW><id>5135270</id><snippet>itertools.chain</snippet></ROW><ROW><id>5135270</id><snippet>(x for list in lists for x in list)</snippet></ROW><ROW><id>5135364</id><snippet>\'$path\'</snippet></ROW><ROW><id>5135364</id><snippet>"$path"</snippet></ROW><ROW><id>5135364</id><snippet>$path</snippet></ROW><ROW><id>5135444</id><snippet>__init__.py</snippet></ROW><ROW><id>5135444</id><snippet>usepackage.py</snippet></ROW><ROW><id>5135444</id><snippet>package</snippet></ROW><ROW><id>5135444</id><snippet>subdir</snippet></ROW><ROW><id>5135444</id><snippet>Class1</snippet></ROW><ROW><id>5135444</id><snippet>myclass01</snippet></ROW><ROW><id>5135444</id><snippet>from package import *

print Class1
print Class2
print Class3
</snippet></ROW><ROW><id>5135444</id><snippet>__init__.py</snippet></ROW><ROW><id>5135444</id><snippet>def _import_package_files():
    """ dynamically import all the public attributes of the python modules
        in this file's directory (the package directory) and return a list
        of their names.
    """
    import os
    exports = []
    globals_, locals_ = globals(), locals()
    package_path = os.path.dirname(__file__)
    package_name = os.path.basename(package_path)

    for filename in os.listdir(package_path):
        modulename, ext = os.path.splitext(filename)
        if modulename[0] != '_' and ext in ('.py', '.pyw'):
            # create a package relative subpackage name
            subpackage = '{}.{}'.format(package_name, modulename)
            module = __import__(subpackage, globals_, locals_, [modulename])
            modict = module.__dict__
            names = (modict['__all__'] if '__all__' in modict else
                     [name for name in modict if name[0] != '_'])  # public names
            exports.extend(names)
            globals_.update((name, modict[name]) for name in names)

    return exports

if __name__ != '__main__':
    __all__ = ['__all__'] + _import_package_files()  # '__all__' in __all__
</snippet></ROW><ROW><id>5135444</id><snippet>__init__.py</snippet></ROW><ROW><id>5135444</id><snippet>if __name__ != '__main__':
    from _import_package_files import *  # defines __all__
    __all__.remove('__all__')  # prevent self export (optional)
</snippet></ROW><ROW><id>5135444</id><snippet>import</snippet></ROW><ROW><id>5135985</id><snippet>unicode</snippet></ROW><ROW><id>5136085</id><snippet>webservice = httplib.HTTPSConnection("webservices.autotask.net", 443)
</snippet></ROW><ROW><id>5136297</id><snippet>func2()</snippet></ROW><ROW><id>5136297</id><snippet>func2()</snippet></ROW><ROW><id>5136297</id><snippet>func1()</snippet></ROW><ROW><id>5136297</id><snippet>func2()</snippet></ROW><ROW><id>5136297</id><snippet>func2()</snippet></ROW><ROW><id>5136297</id><snippet>import time
import threading

def func1():
    t = threading.Thread(target=func2)
    t.start()
    print("Do stuff here")
def func2():
    time.sleep(10)
    print("Do more stuff here")

func1()
print("func1 has returned")
</snippet></ROW><ROW><id>5136417</id><snippet>unittest</snippet></ROW><ROW><id>5136417</id><snippet>suite</snippet></ROW><ROW><id>5136417</id><snippet>def suite():
    return unittest.TestLoader().loadTestsFromTestCase(BasicTests)
</snippet></ROW><ROW><id>5136417</id><snippet>TypeError: calling &lt;function suite at 0x00C1FB70&gt; returned &lt;unittest.TestSuite tests=[&lt;mysite.BasicTests testMethod=test_ok&gt;]&gt;, not a test
</snippet></ROW><ROW><id>5136417</id><snippet>unittest</snippet></ROW><ROW><id>5136417</id><snippet>isinstance(mytest.suite(), TestSuite)</snippet></ROW><ROW><id>5136417</id><snippet>__main__.TestSuite</snippet></ROW><ROW><id>5136417</id><snippet>unittest.TestSuite</snippet></ROW><ROW><id>5136417</id><snippet>isinstance</snippet></ROW><ROW><id>5136417</id><snippet>from unittest import TestSuite, TestCase</snippet></ROW><ROW><id>5136417</id><snippet>loadTestsFromName</snippet></ROW><ROW><id>5136569</id><snippet>__reversed__()</snippet></ROW><ROW><id>5136569</id><snippet>range()</snippet></ROW><ROW><id>5136569</id><snippet>for i in reversed(range(100)):
    print(i)
</snippet></ROW><ROW><id>5136569</id><snippet>xarnge()</snippet></ROW><ROW><id>5136569</id><snippet>for i in reversed(xrange(100)):
    print i
</snippet></ROW><ROW><id>5136669</id><snippet>settings = [
 "STYLE_DEFAULT", "face:%(mono)s,size:%(size)d",
 "STYLE_LINENUMBER",  "back:#C0C0C0,face:%(mono)s,size:%(size)d",
 ...
 "P_COMMENTBLOCK", "face:%(mono)s,fore:#003300,back:#C0C0C0,italic,size:%(size)d",
 "P_STRINGEOL", "face:%(mono)s,fore:#000000,face:%(mono)s,back:#E0C0E0,eol,size:%(size)d",
]

for name, value in zip(*[iter(settings)]*2):
    self.StyleSetSpec(getattr(wx_stc, "STC_"+name), value % self.faces)
</snippet></ROW><ROW><id>5136686</id><snippet>stdout</snippet></ROW><ROW><id>5136686</id><snippet>import subprocess

proc = subprocess.Popen(["python", "-c", "import writer; writer.write()"], stdout=subprocess.PIPE)
out = proc.communicate()[0]
print out.upper()
</snippet></ROW><ROW><id>5137026</id><snippet># GTK Imports
import gtk

gdkwindow=mywindow.window
if gdkwindow:
    gdkwindow.freeze_updates()

# Do cairo drawing operations here


if gdkwindow:
    gdkwindow.thaw_updates()

window.queue_draw()
</snippet></ROW><ROW><id>5137191</id><snippet>intersection_set = set(list_a).intersection(list_b)
</snippet></ROW><ROW><id>5137509</id><snippet>os.path.dirname(os.path.realpath(__file__))
</snippet></ROW><ROW><id>5137509</id><snippet>os.getcwd()</snippet></ROW><ROW><id>5137509</id><snippet>os</snippet></ROW><ROW><id>5137509</id><snippet>os.path</snippet></ROW><ROW><id>5137509</id><snippet>os.path.realpath(__file__)</snippet></ROW><ROW><id>5137509</id><snippet>__file__</snippet></ROW><ROW><id>5137509</id><snippet>realpath</snippet></ROW><ROW><id>5137509</id><snippet>os.path</snippet></ROW><ROW><id>5137803</id><snippet>Opponent</snippet></ROW><ROW><id>5137803</id><snippet>GameInfo</snippet></ROW><ROW><id>5137803</id><snippet>&gt;&gt;&gt; o1 = Opponent()
&gt;&gt;&gt; o1.game_info.id = 5
&gt;&gt;&gt; o2 = Opponent()
&gt;&gt;&gt; o2.game_info.id
5
</snippet></ROW><ROW><id>5137803</id><snippet>class Opponent:
    def __init__(self):
        game_info = GameInfo()
</snippet></ROW><ROW><id>5137868</id><snippet>if msvcrt.kbhit() and msvcrt.getch() == chr(27).encode():
    aborted = True
    break
</snippet></ROW><ROW><id>5137868</id><snippet>if msvcrt.kbhit() and msvcrt.getch().decode() == chr(27):
    aborted = True
    break
</snippet></ROW><ROW><id>5137868</id><snippet>if msvcrt.kbhit() and ord(msvcrt.getch()) == 27:
    aborted = True
    break
</snippet></ROW><ROW><id>5138105</id><snippet>&gt;&gt;&gt; s1, s2 = '60', '100'
&gt;&gt;&gt; print s1.zfill(5), s2.zfill(5)
00060 00100
</snippet></ROW><ROW><id>5138326</id><snippet>from _foo import *

InitGoogleLogging()
</snippet></ROW><ROW><id>5138326</id><snippet>BOOST_PYTHON_MODULE(foo)
{
    InitGoogleLogging();

    class_&lt;Foo&gt;("Foo")
        .def("bar", &amp;bar)
    ;
}
</snippet></ROW><ROW><id>5138700</id><snippet>#!/usr/bin/env python

import os

def walklevel(some_dir, level):
    some_dir = some_dir.rstrip(os.path.sep)
    num_sep = some_dir.count(os.path.sep)
    for root, dirs, files in os.walk(some_dir):
        yield root, dirs, files
        num_sep_this = root.count(os.path.sep)
        if num_sep + level &lt;= num_sep_this:
            del dirs[:]        

for root,dirs,files in walklevel('.',3):
    for dir in dirs:
        tabs='\t'*root.count(os.path.sep)
        print tabs,dir
</snippet></ROW><ROW><id>5138760</id><snippet>if (env ['PLATFORM'] == 'win32'):
    env.Append (LINKFLAGS = ['-Wl,-subsystem,windows'])
</snippet></ROW><ROW><id>5138998</id><snippet>translate</snippet></ROW><ROW><id>5138998</id><snippet>self.ID_Number.setText(somePythonStringVariable)
</snippet></ROW><ROW><id>5139737</id><snippet>cur.execute("SELECT add_user(%(nr)s, %(email)s, ...) ...", user)
</snippet></ROW><ROW><id>5139737</id><snippet>%(keyname)s</snippet></ROW><ROW><id>5139737</id><snippet>paramstyle</snippet></ROW><ROW><id>5139740</id><snippet>from twisted.internet import defer
from twisted.protocols.policies import TimeoutMixin
from twisted.protocols.basic import LineOnlyReceiver

class PingPongProtocol(LineOnlyReceiver, TimeoutMixin):

    def __init__(self):
        self.lock = defer.DeferredLock()
        self.deferred = None

    def sendMessage(self, msg):
        result = self.lock.run(self._doSend, msg)
        return result

    def _doSend(self, msg):
        assert self.deferred is None, "Already waiting for reply!"

        self.deferred = defer.Deferred()
        self.deferred.addBoth(self._cleanup)
        self.setTimeout(self.DEFAULT_TIMEOUT)
        self.sendLine(msg)
        return self.deferred

    def _cleanup(self, res):
        self.deferred = None
        return res

    def lineReceived(self, line):
        if self.deferred:
            self.setTimeout(None)
            self.deferred.callback(line)
        # If not, we've timed out or this is a spurious line

    def timeoutConnection(self):
        self.deferred.errback(
            Timeout("Some informative message"))
</snippet></ROW><ROW><id>5139740</id><snippet>sendLine</snippet></ROW><ROW><id>5139740</id><snippet>lineReceived</snippet></ROW><ROW><id>5139740</id><snippet>connectionLost</snippet></ROW><ROW><id>5139740</id><snippet>_doSend</snippet></ROW><ROW><id>5139740</id><snippet>_cleanup</snippet></ROW><ROW><id>5139740</id><snippet>_doSend</snippet></ROW><ROW><id>5139740</id><snippet>self.deferred</snippet></ROW><ROW><id>5139740</id><snippet>lineReceived</snippet></ROW><ROW><id>5139740</id><snippet>dataReceived</snippet></ROW><ROW><id>5139740</id><snippet># Create the protocol somehow. Maybe this actually happens in a factory,
# in which case, the factory could have wrapper methods for this.
protocol = PingPongProtocol()
def = protocol.sendMessage("Hi there!")
def.addCallbacks(gotHiResponse, noHiResponse)
</snippet></ROW><ROW><id>5140010</id><snippet>fo</snippet></ROW><ROW><id>5140010</id><snippet>fe</snippet></ROW><ROW><id>5140010</id><snippet>stderr=subprocess.STDOUT</snippet></ROW><ROW><id>5140010</id><snippet>ferr</snippet></ROW><ROW><id>5140010</id><snippet>stderr=subprocess.PIPE</snippet></ROW><ROW><id>5140010</id><snippet>from subprocess import Popen, PIPE
proc = Popen(["child_script.py"], stdout=PIPE, stderr=PIPE)
fout, ferr = proc.stdout, proc.stderr
for line in fout:
    print(line.rstrip())
    fo.write(line)
for line in ferr:
    fe.write(line)
</snippet></ROW><ROW><id>5140010</id><snippet>fo</snippet></ROW><ROW><id>5140010</id><snippet>fe</snippet></ROW><ROW><id>5140010</id><snippet>proc = subprocess.Popen(["child_script.py"], stdout=fo, stderr=fe)
</snippet></ROW><ROW><id>5140010</id><snippet>fo</snippet></ROW><ROW><id>5140216</id><snippet>def die(x):
    return np.bincount(np.random.random_integers(0, 5, size=x))
</snippet></ROW><ROW><id>5140216</id><snippet>np.random.random_integers(0,5,size=x)</snippet></ROW><ROW><id>5140216</id><snippet>x</snippet></ROW><ROW><id>5140216</id><snippet>0</snippet></ROW><ROW><id>5140216</id><snippet>5</snippet></ROW><ROW><id>5140216</id><snippet>np.bincount()</snippet></ROW><ROW><id>5140216</id><snippet>&gt;&gt;&gt; a = np.random.random_integers(0, 5, size=10)
&gt;&gt;&gt; a
array([3, 5, 0, 5, 0, 5, 5, 1, 3, 0])
&gt;&gt;&gt; np.bincount(a)
array([3, 1, 0, 2, 0, 4])
</snippet></ROW><ROW><id>5140525</id><snippet>repr()</snippet></ROW><ROW><id>5140525</id><snippet>unicodedata.name()</snippet></ROW><ROW><id>5140525</id><snippet>print fubar</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; s0 = u'%C3%A7%C3%B6asd+fjkls%25asd'
&gt;&gt;&gt; print repr(s0)
u'%C3%A7%C3%B6asd+fjkls%25asd'
</snippet></ROW><ROW><id>5140525</id><snippet>urllibX.unquote_YYYY()</snippet></ROW><ROW><id>5140525</id><snippet>u'\xc3\xa7\xc3\xb6asd+fjkls%asd'</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; s1 = s0.encode('ascii')
&gt;&gt;&gt; print repr(s1)
'%C3%A7%C3%B6asd+fjkls%25asd'
</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; s2 = urllib2.unquote(s1)
&gt;&gt;&gt; print repr(s2)
'\xc3\xa7\xc3\xb6asd+fjkls%asd'
</snippet></ROW><ROW><id>5140525</id><snippet>print s2</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; s3 = s2.decode('utf8')
&gt;&gt;&gt; print repr(s3)
u'\xe7\xf6asd+fjkls%asd'
</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; for c in s3[:6]:
...     print repr(c), unicodedata.name(c)
...
u'\xe7' LATIN SMALL LETTER C WITH CEDILLA
u'\xf6' LATIN SMALL LETTER O WITH DIAERESIS
u'a' LATIN SMALL LETTER A
u's' LATIN SMALL LETTER S
u'd' LATIN SMALL LETTER D
u'+' PLUS SIGN
</snippet></ROW><ROW><id>5140525</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp850'
&gt;&gt;&gt; print s3
çöasd+fjkls%asd
</snippet></ROW><ROW><id>5140525</id><snippet>s3</snippet></ROW><ROW><id>5140606</id><snippet>pass</snippet></ROW><ROW><id>5140606</id><snippet>f = lambda x: None
</snippet></ROW><ROW><id>5140763</id><snippet>order_number.delete()</snippet></ROW><ROW><id>5140763</id><snippet>if request.POST.get('delete'):
    order_number.delete() # Why was this there? of course, if I have this it will delete till it gets to the next part where it informs the user which order number was deleted! 
    request.user.message_set.create(message = "Previous order " + str(order_number.pk) + "  deleted")
    order_number.delete()
</snippet></ROW><ROW><id>5141342</id><snippet>pip install -U selenium</snippet></ROW><ROW><id>5141369</id><snippet>md5</snippet></ROW><ROW><id>5141671</id><snippet>import codecs

content = unicode(q.content.strip(codecs.BOM_UTF8), 'utf-8')
parser.parse(StringIO.StringIO(content))
</snippet></ROW><ROW><id>5141671</id><snippet>strip</snippet></ROW><ROW><id>5141671</id><snippet>lstrip</snippet></ROW><ROW><id>5141829</id><snippet>fnmatch.translate</snippet></ROW><ROW><id>5141829</id><snippet>import fnmatch
import os
import os.path
import re

includes = ['*.doc', '*.odt'] # for files only
excludes = ['/home/paulo-freitas/Documents'] # for dirs and files

# transform glob patterns to regular expressions
includes = r'|'.join([fnmatch.translate(x) for x in includes])
excludes = r'|'.join([fnmatch.translate(x) for x in excludes]) or r'$.'

for root, dirs, files in os.walk('/home/paulo-freitas'):

    # exclude dirs
    dirs[:] = [os.path.join(root, d) for d in dirs]
    dirs[:] = [d for d in dirs if not re.match(excludes, d)]

    # exclude/include files
    files = [os.path.join(root, f) for f in files]
    files = [f for f in files if not re.match(excludes, f)]
    files = [f for f in files if re.match(includes, f)]

    for fname in files:
        print fname
</snippet></ROW><ROW><id>5141849</id><snippet>&gt;&gt;&gt; [''.join(i) for i in itertools.product("ab",repeat=4)]
['aaaa', 'aaab', 'aaba', 'aabb', 'abaa', 'abab', 'abba', 'abbb', 'baaa', 'baab', 'baba', 'babb', 'bbaa', 'bbab', 'bbba', 'bbbb']
</snippet></ROW><ROW><id>5141952</id><snippet>form.alternate_id':form.alternate_id</snippet></ROW><ROW><id>5142453</id><snippet>assert</snippet></ROW><ROW><id>5142453</id><snippet>assert a_condition
</snippet></ROW><ROW><id>5142453</id><snippet>if not condition:
    raise AssertionError("condition failed")
</snippet></ROW><ROW><id>5142453</id><snippet>&gt;&gt;&gt; assert True
&gt;&gt;&gt; assert False
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
</snippet></ROW><ROW><id>5142596</id><snippet>lambda</snippet></ROW><ROW><id>5142596</id><snippet>return a.b.c if hasattr(a, 'b') and hasattr(a.b, 'c') else None
</snippet></ROW><ROW><id>5142596</id><snippet>try:
     return a.b.c
except AttributeError:
     return None
</snippet></ROW><ROW><id>5143163</id><snippet>QlineEdit.text()</snippet></ROW><ROW><id>5143163</id><snippet>QString</snippet></ROW><ROW><id>5143163</id><snippet>unicode</snippet></ROW><ROW><id>5143458</id><snippet>help(re.match) #help on method
</snippet></ROW><ROW><id>5143458</id><snippet> help(re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")) #help on result
</snippet></ROW><ROW><id>5143583</id><snippet>&gt;&gt;&gt; print unescape('at √s = 7 TeV with')
at √s = 7 TeV with
</snippet></ROW><ROW><id>5143687</id><snippet>pickle.dump</snippet></ROW><ROW><id>5143687</id><snippet>pickle.dumps</snippet></ROW><ROW><id>5143687</id><snippet>&gt;&gt;&gt; import cPickle
&gt;&gt;&gt; foo = {4:2}
&gt;&gt;&gt; cPickle.dump(foo, open('foo.pickle', 'wb'))
&gt;&gt;&gt; data_to_load = cPickle.load(open('foo.pickle'))
&gt;&gt;&gt; data_to_load.items()
[(4, 2)]
</snippet></ROW><ROW><id>5143782</id><snippet>in</snippet></ROW><ROW><id>5143782</id><snippet>&gt;&gt;&gt; x = 'hello'
&gt;&gt;&gt; y = 'll'
&gt;&gt;&gt; y in x
True
</snippet></ROW><ROW><id>5143799</id><snippet>def make_proceed(name):
    def proceed(self, *args):
        func = getattr(otherobj, name)
        result = func(*args)
        # result = ... process result  ..
        return result
    return proceed


class dispatch(object):
  def __init__(self, cond=1):
    for index in range(1, cond):
      name = 'step%u' % (index,)
      setattr(self, name, new.instancemethod(make_proceed(name), self, dispatch))
</snippet></ROW><ROW><id>5143834</id><snippet>reactor.callFromThread()</snippet></ROW><ROW><id>5144013</id><snippet>cars</snippet></ROW><ROW><id>5144013</id><snippet>car</snippet></ROW><ROW><id>5144013</id><snippet>class Reader:
    def __init__(self):
        """Constructor"""
    def ReadCarNames(self,cars):
        for counter,car in enumerate(cars):
            assert isinstance(car, Car)        # this trains Wing
            print str(counter) +' '+ car.name  # autocompletion will work here
</snippet></ROW><ROW><id>5144013</id><snippet>if 0: assert isinstance(car, Car)
</snippet></ROW><ROW><id>5144064</id><snippet>latest()</snippet></ROW><ROW><id>5144064</id><snippet>phone_type</snippet></ROW><ROW><id>5144064</id><snippet>home</snippet></ROW><ROW><id>5144064</id><snippet>home2</snippet></ROW><ROW><id>5144064</id><snippet>mobi</snippet></ROW><ROW><id>5144064</id><snippet>home</snippet></ROW><ROW><id>5144064</id><snippet>latest()</snippet></ROW><ROW><id>5144064</id><snippet>latest_phones = []
for k, v in PHONE_CHOICES:
    try:
        latest_phones.append(ClientPhone.objects.filter(client=i_clientKEY, phone_type=k).latest('id'))
    except ClientPhone.DoesNotExist:
        pass 
</snippet></ROW><ROW><id>5144064</id><snippet>client_phone_numbers = ClientPhone.objects.filter(client=i_clientKEY)\
     .order_by('-created').values_list('phone_type', 'phone_number').distinct()

# returns list of all `phone_type` and its latest `phone_number` for this client
# if you don't need all phone types, specifically filter them in the first filter
# eg: filter(phone_type__in=['home','mobi'])
</snippet></ROW><ROW><id>5144341</id><snippet>foo = [x for x in range(1000) if prime2(x)]
</snippet></ROW><ROW><id>5144341</id><snippet>n</snippet></ROW><ROW><id>5144341</id><snippet>def prime2(n):
    for i in range(2, int(math.sqrt(n)) + 1):

        if n % i == 0:
            return False

    return True

max = int(input("What is your number? "))
print [x for x in range(max) if prime2(x)]
</snippet></ROW><ROW><id>5144341</id><snippet>prime2</snippet></ROW><ROW><id>5144434</id><snippet>f = open('randomthing.py', 'rU')
fdata = f.read()
newlines = f.newlines
print repr(newlines)
</snippet></ROW><ROW><id>5144434</id><snippet>newlines</snippet></ROW><ROW><id>5145025</id><snippet>from google.appengine.ext import db

# Defining models

class User(db.Model):
    name = db.StringProperty()


class Software(db.Model):
    name = db.StringProperty()
    description = db.TextProperty()


class UserSoftwares(db.Model):
    user = db.ReferenceProperty(User, collection_name='users')
    software = db.ReferenceProperty(Software, collection_name='softwares')

# Creating users

u1 = User(name='John Doe')
u2 = User(name='Jane Doe')

# Creating softwares    
sw1 = Software(name='Office 2007')
sw2 = Software(name='Google Chrome')
sw3 = Software(name='Notepad ++')

# Batch saving entities
db.put([u1, u2, sw1, sw2, sw3])

"""
Creating relationship between users and softwares;
in this example John Doe's softwares are 'Office 2007' and
'Notepad++' while Jane Doe only uses 'Google Chrome'.
"""
u1_sw1 = UserSoftwares(user=u1, software=sw1)
u1_sw3 = UserSoftwares(user=u1, software=sw3)
u2_sw2 = UserSoftwares(user=u2, software=sw2)

# Batch saving relationships
db.put([u1_sw1, u1_sw3, u2_sw2])

"""
Selects all softwares.
"""

rs1 = Software.all()

# Print results
print ("SELECT * FROM Software")
for sw in rs1:
    print sw.name

"""
Selects a software given it's name.
"""

rs2 = Software.all().filter("name =", "Notepad ++")

# Print result
print("""SELECT * FROM Software WHERE name = ?""")
print rs2.get().name

"""
Selects all software used by 'John Smith'.
"""

# Get John Doe's key only, no need to fetch the entire entity
user_key = db.Query(User, keys_only=True).filter("name =", "John Doe").get()

# Get John Doe's software list
rs3 = UserSoftwares.all().filter('user', user_key)

# Print results
print ("John Doe's software:")
for item in rs3:
    print item.software.name

"""
Selects all users using the software 'Office 2007'
"""

# Get Google Chrome's key
sw_key = db.Query(Software, keys_only=True).filter("name =", "Google Chrome").get()

# Get Google Chrome's user list
rs4 = UserSoftwares.all().filter('software', sw_key)

# Print results
print ("Google Chrome is currently used by:")
for item in rs4:
    print item.user.name
</snippet></ROW><ROW><id>5145025</id><snippet>from google.appengine.ext import db    

class User(db.Model):
    name = db.StringProperty()


class Software(db.Model):
    name = db.StringProperty()
    description = db.TextProperty()


class UserSoftwares(db.Model):
    user = db.ReferenceProperty(User, collection_name='users')
    software = db.ReferenceProperty(Software, collection_name='softwares')
</snippet></ROW><ROW><id>5145025</id><snippet>class User(db.Model):
    name = db.StringProperty()
    softwares = db.ListProperty(db.Key)


class Software(db.Model):
    name = db.StringProperty()
    description = db.TextProperty()

    @property
    def users(self):
        return User.all().filter('softwares', self.key())
</snippet></ROW><ROW><id>5145211</id><snippet>import sys
import os
import xmpp

if len(sys.argv) &lt; 3:
    print "Syntax: register.py [JID] [Password]"
    sys.exita(64)

jid=xmpp.protocol.JID(sys.argv[1])
cli=xmpp.Client(jid.getDomain(), debug=[])
cli.connect()

# getRegInfo has a bug that puts the username as a direct child of the
# IQ, instead of inside the query element.  The below will work, but
# won't return an error when the user is known, however the register
# call will return the error.
xmpp.features.getRegInfo(cli,
                         jid.getDomain(),
                         #{'username':jid.getNode()},
                         sync=True)

if xmpp.features.register(cli,
                          jid.getDomain(),
                          {'username':jid.getNode(),
                           'password':sys.argv[2]}):
    sys.stderr.write("Success!\n")
    sys.exit(0)
else:
    sys.stderr.write("Error!\n")
    sys.exit(1)
</snippet></ROW><ROW><id>5145437</id><snippet>class Author(db.Model): 
  owner = db.UserProperty()

class Post(db.Model): 
  author = db.ReferenceProperty(Author, 
    collection_name='posts') 
  tags = db.StringListProperty()

class Tag(db.Model): 
  post_count = db.IntegerProperty()
</snippet></ROW><ROW><id>5145437</id><snippet>post = Post(author=some_author, tags=['app-engine', 'google', 'python'])
post_key = post.put()
# call some method to increment post counts...
increment_tag_post_counts(post_key)

# get posts with a given tag:
matching_posts = Post.all().filter('tags =', 'google').fetch(100)
# or, two tags:
matching_posts = Post.all().filter('tags =', 'google').filter('tags =', 'python').fetch(100)

# get tag list from a post:
tag_stats = Tag.get_by_key_name(post.tags)
</snippet></ROW><ROW><id>5145551</id><snippet>Popen</snippet></ROW><ROW><id>5145551</id><snippet>myOutput=subprocess.Popen("C:\\usr\\local\\bin\\att\\compare.exe -metric AE -fuzz 100 1.png 2.png mask.png", stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>5145551</id><snippet>stdout</snippet></ROW><ROW><id>5145551</id><snippet>myOutput=subprocess.Popen("C:\\usr\\local\\bin\\att\\compare.exe -metric AE -fuzz 100 1.png 2.png mask.png", stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>5145674</id><snippet>class ClassRegistry(object):

    def __init__(self):
        self.classes = {}

    def add_file_classes(self, fname, class_list):
        globals = {}
        exec open(fname) in globals
        for class_name in class_list:
            self.classes[class_name] = getattr(globals, class_name)

    def get_class(self, class_name):
        return self.classes[class_name]
</snippet></ROW><ROW><id>5145674</id><snippet>add_file_classes</snippet></ROW><ROW><id>5145674</id><snippet>reg = ClassRegistry()
reg.add_file_classes("/var/imports/foo.py", ["baz", "monkey"])
reg.add_file_classes("/var/imports/bar.py", ["ape"])
</snippet></ROW><ROW><id>5145674</id><snippet>cls = reg.get_class("baz")
</snippet></ROW><ROW><id>5145679</id><snippet>friends</snippet></ROW><ROW><id>5145944</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; import program2debug
&gt;&gt;&gt; pdb.run('program2debug.test()')
</snippet></ROW><ROW><id>5145944</id><snippet>-v</snippet></ROW><ROW><id>5146158</id><snippet>import urllib.request

class ResourceOpen():    

    def __init__(self, source):
            try:
                # Try to open URL
                page = urllib.request.urlopen(source)
                self.text = page.read().decode("utf8")
            except ValueError:
                # Fail? Print error.
                print ("Woops!  Can't find the URL.")
                self.text = ''

    def getText(self):
        return self.text
</snippet></ROW><ROW><id>5146158</id><snippet>import ResourceOpen
s = ResourceOpen.ResourceOpen('http://google.com')
print(s.getText())
</snippet></ROW><ROW><id>5146508</id><snippet>...

try:
    temp = int(temp)
except TypeError:
    # Handle invalid integer
    print("%s is not a valid integer." % temp)
    sys.exit(1)

...
</snippet></ROW><ROW><id>5146602</id><snippet>dir(masterprogram)</snippet></ROW><ROW><id>5146602</id><snippet>help(masterprogram.somefunction)</snippet></ROW><ROW><id>5146602</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; dir(math)
['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan',
 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'er
fc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gam
ma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'mod
f', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
&gt;&gt;&gt; help(math.ceil)
Help on built-in function ceil in module math:

ceil(...)
    ceil(x)

    Return the ceiling of x as a float.
    This is the smallest integral value &gt;= x.

&gt;&gt;&gt;
</snippet></ROW><ROW><id>5146818</id><snippet>class DefaultList(list):
    def __init__(self,*args,**kwargs):
        list.__init__(self,*args)
        self.default=kwargs.get('default',None)
    def __getitem__(self,key):
        # retrieving an item does not expand the list
        if isinstance(key,slice):
            return [self[elt] for elt in range(key.start,key.stop,key.step)]
        else:
            try:
                return list.__getitem__(self,key)
            except IndexError:
                return self.default
    def __setitem__(self,key,value):
        # setting an item may expand the list
        try:
            list.__setitem__(self,key,value)
        except IndexError:
            self.extend([self.default]*(key-len(self)))
            self.append(value)

x = DefaultList(list('abc'), default='*')
print(x)
# ['a', 'b', 'c']
x[6] = 'g'
print(x)
# ['a', 'b', 'c', '*', '*', '*', 'g']
print x[2], x[4], x[6], x[8]  # should print 'c * g *'
# c * g *
print(x[2:9:2])
# ['c', '*', 'g', '*']
</snippet></ROW><ROW><id>5147165</id><snippet>import csv, urllib
rawStockInfo = csv.reader(urllib.urlopen('http://download.finance.yahoo.com/d/quotes.csv?s=GS+AAPL+MSFT+AMZN&amp;f=sb6vt1&amp;e=.csv'))
stocks = [] #list for our cleaned up version
for stock in rawStockInfo:
    print stock
    #this replaces the string "N/A" with the int -1
    stockClean = [-1 if x == 'N/A' else x for x in stock]
    stocks.append(stockClean)
print stocks
</snippet></ROW><ROW><id>5147165</id><snippet>stock</snippet></ROW><ROW><id>5147165</id><snippet>stockClean = []
for cell in stock:
    try:
        stockClean.append(int(cell)) #turn the string '4' into the integer 4
    except ValueError:
        if cell == 'N/A':
            stockClean.append(-1)
        else:
            stockClean.append(cell)
</snippet></ROW><ROW><id>5147382</id><snippet>output_json = json.load(open('/tmp/output.json'))
</snippet></ROW><ROW><id>5147382</id><snippet>i</snippet></ROW><ROW><id>5147382</id><snippet>container</snippet></ROW><ROW><id>5147382</id><snippet>k</snippet></ROW><ROW><id>5147382</id><snippet>stream</snippet></ROW><ROW><id>5147382</id><snippet>output_json.iteritems()</snippet></ROW><ROW><id>5147382</id><snippet>for majorkey, subdict in output_json.iteritems():
    print majorkey
    for subkey, value in subdict.iteritems():
            print subkey, value
</snippet></ROW><ROW><id>5147409</id><snippet>RectBivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>interp2d</snippet></ROW><ROW><id>5147409</id><snippet>griddata</snippet></ROW><ROW><id>5147409</id><snippet>BivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>RectBivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>BivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>SmoothBivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>LSQBivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>ky=1</snippet></ROW><ROW><id>5147409</id><snippet>kx=1</snippet></ROW><ROW><id>5147409</id><snippet>RectBivariateSpline</snippet></ROW><ROW><id>5147409</id><snippet>interp2d</snippet></ROW><ROW><id>5147409</id><snippet>__doc__</snippet></ROW><ROW><id>5147430</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 10
data = np.random.random((N, 4))
labels = ['point{0}'.format(i) for i in range(N)]
plt.subplots_adjust(bottom = 0.1)
plt.scatter(
    data[:, 0], data[:, 1], marker = 'o', c = data[:, 2], s = data[:, 3]*1500,
    cmap = plt.get_cmap('Spectral'))
for label, x, y in zip(labels, data[:, 0], data[:, 1]):
    plt.annotate(
        label, 
        xy = (x, y), xytext = (-20, 20),
        textcoords = 'offset points', ha = 'right', va = 'bottom',
        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
        arrowprops = dict(arrowstyle = '-&gt;', connectionstyle = 'arc3,rad=0'))

plt.show()
</snippet></ROW><ROW><id>5147454</id><snippet>import cStringIO as StringIO
import csv

def csv(request):
    def data():
        for i in xrange(10):
            csvfile = StringIO.StringIO()
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow([i,"a","b","c"])
            yield csvfile.getvalue()

    response = HttpResponse(data(), mimetype="text/csv")
    response["Content-Disposition"] = "attachment; filename=test.csv"
    return response
</snippet></ROW><ROW><id>5147454</id><snippet>import cStringIO as StringIO
import csv

def csv(request):
    csvfile = StringIO.StringIO()
    csvwriter = csv.writer(csvfile)

    def read_and_flush():
        csvfile.seek(0)
        data = csvfile.read()
        csvfile.seek(0)
        csvfile.truncate()
        return data

    def data():
        for i in xrange(10):
            csvwriter.writerow([i,"a","b","c"])
        data = read_and_flush()
        yield data

    response = HttpResponse(data(), mimetype="text/csv")
    response["Content-Disposition"] = "attachment; filename=test.csv"
    return response
</snippet></ROW><ROW><id>5148129</id><snippet>- (NSString *)lastPathComponent;
- (NSString *)stringByDeletingLastPathComponent;
- (NSString *)stringByAppendingPathComponent:(NSString *)str;

- (NSString *)pathExtension;
- (NSString *)stringByDeletingPathExtension;
- (NSString *)stringByAppendingPathExtension:(NSString *)str;

- (NSArray *)stringsByAppendingPaths:(NSArray *)paths;
</snippet></ROW><ROW><id>5148129</id><snippet> NSString *path = @"/a/b/c/hello.txt";

 NSString *fileName = [path lastPathComponent];
  // 'hello.txt'

 NSString *basePath = [path stringByDeletingLastPathComponent];
  // '/a/b/c'

 NSString *newPath = [basePath stringByAppendingPathComponent:@"goodbye.txt"];
  // '/a/b/c/goodbye.txt'
</snippet></ROW><ROW><id>5148379</id><snippet>oldlist</snippet></ROW><ROW><id>5148379</id><snippet>newlist</snippet></ROW><ROW><id>5148379</id><snippet>def new_getDuplicateList(oldlist):
    # find duplicate elements
    newlist = []
    duplicate = set()
    a_to_b = {}
    for elements in oldlist:
        a = elements[0]
        b = elements[1]
        if a in duplicate:
            newlist.append(a)
        else:
            if a in a_to_b.keys():
                if not b in a_to_b[a]:
                    a_to_b[a].append(b)
                    duplicate.add(a)
                    extension = [a for i in a_to_b[a]]
                    newlist.extend(extension)
                else:
                    a_to_b[a].append(b)
            else:
                a_to_b[a] = [b]

    return newlist
</snippet></ROW><ROW><id>5148379</id><snippet>a</snippet></ROW><ROW><id>5148379</id><snippet>a</snippet></ROW><ROW><id>5148379</id><snippet>(a, b)</snippet></ROW><ROW><id>5148435</id><snippet>normal-mode</snippet></ROW><ROW><id>5148435</id><snippet>(set-auto-mode)</snippet></ROW><ROW><id>5148435</id><snippet>(hack-local-variables)</snippet></ROW><ROW><id>5148435</id><snippet>hack-local-variables-hook</snippet></ROW><ROW><id>5148435</id><snippet>(add-hook 'hack-local-variables-hook 'run-local-vars-mode-hook)
(defun run-local-vars-mode-hook ()
  "Run a hook for the major-mode after the local variables have been processed."
  (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))

(add-hook 'python-mode-local-vars-hook 'cr/python-mode-shell-setup)
</snippet></ROW><ROW><id>5148435</id><snippet>LOCAL</snippet></ROW><ROW><id>5148435</id><snippet>add-hook</snippet></ROW><ROW><id>5148435</id><snippet>(add-hook 'python-mode-hook 'cr/python-mode-shell-setup)

(defun cr/python-mode-shell-setup ()
  (add-hook 'hack-local-variables-hook
            (lambda () (message "virtualenv-name is %s" cr/virtualenv-name)
              (let ((python-base (cr/virtualenv)))
                (cond ((and (fboundp 'ipython-shell-hook) (file-executable-p (concat python-base "/bin/ipython")))
                       (setq python-python-command (concat python-base "/bin/ipython"))
                       (setq py-python-command (concat python-base "/bin/ipython"))
                       (setq py-python-command-args '( "-colors" "NoColor")))
                      (t
                       (setq python-python-command (concat python-base "/bin/python"))
                       (setq py-python-command (concat python-base "/bin/python"))
                       (setq py-python-command-args nil)))))
            nil t)) ; buffer-local hack-local-variables-hook
</snippet></ROW><ROW><id>5148435</id><snippet>python-mode-hook</snippet></ROW><ROW><id>5148435</id><snippet>hack-local-variables-hook</snippet></ROW><ROW><id>5148435</id><snippet>(hack-local-variables)</snippet></ROW><ROW><id>5148435</id><snippet>local-enable-local-variables</snippet></ROW><ROW><id>5148435</id><snippet>(hack-local-variables)</snippet></ROW><ROW><id>5148435</id><snippet>(defun cr/python-mode-shell-setup ()
  (report-errors "File local-variables error: %s"
    (hack-local-variables)))
  (set (make-local-variable 'local-enable-local-variables) nil)
  (let ((python-base (cr/virtualenv)))
    ...))
</snippet></ROW><ROW><id>5148435</id><snippet>-*- mode: foo -*-</snippet></ROW><ROW><id>5148435</id><snippet>(set-auto-mode)</snippet></ROW><ROW><id>5148435</id><snippet>mode: foo</snippet></ROW><ROW><id>5148435</id><snippet>Local Variables:</snippet></ROW><ROW><id>5148435</id><snippet>(hack-local-variables)</snippet></ROW><ROW><id>5148526</id><snippet>def check(needle, haystack):
  if not needle:
      return True
  try:
    offset = haystack.index(needle[0])
    return check(needle[1:], haystack[offset+1:])
  except:
    return False
</snippet></ROW><ROW><id>5148839</id><snippet>Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a='a'
&gt;&gt;&gt; int(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'a'
</snippet></ROW><ROW><id>5148839</id><snippet>try:
    int(myvar)
except ValueError:
    ...Handle the exception...
</snippet></ROW><ROW><id>5148987</id><snippet>alpha</snippet></ROW><ROW><id>5148987</id><snippet>letters</snippet></ROW><ROW><id>5148987</id><snippet>alpha</snippet></ROW><ROW><id>5148987</id><snippet>n</snippet></ROW><ROW><id>5148987</id><snippet>collections.defaultdict(int)</snippet></ROW><ROW><id>5148987</id><snippet>import collections
import string

def translator(frm='', to='', delete='', keep=None):
    # Python Cookbook Recipe 1.9
    # Chris Perkins, Raymond Hettinger
    if len(to) == 1: to = to * len(frm)
    trans = string.maketrans(frm, to)
    if keep is not None:
        allchars = string.maketrans('', '')
        # delete is expanded to delete everything except
        # what is mentioned in set(keep)-set(delete)
        delete = allchars.translate(allchars, keep.translate(allchars, delete))
    def translate(s):
        return s.translate(trans, delete)
    return translate

alpha = 'abcdefghijklmnopqrstuvwxyz'
keep_alpha=translator(keep=alpha)

while True:
    speech = raw_input("Enter file name:")
    wholeFile = open(speech, 'r+').read()
    lowlet = wholeFile.lower()
    letters = keep_alpha(lowlet)
    n = len(letters)
    occurrences = collections.defaultdict(int)    
    for x in letters:
        occurrences[x]+=1
    for x in occurrences:
        print x, occurrences[x], occurrences[x]/float(n)
</snippet></ROW><ROW><id>5149002</id><snippet>"""An example of how to use models and views in PyQt4.
Model/view documentation can be found at
http://doc.qt.nokia.com/latest/model-view-programming.html.
"""
import sys

from PyQt4.QtGui import (QApplication, QColumnView, QFileSystemModel,
                         QSplitter, QTreeView)
from PyQt4.QtCore import QDir, Qt

if __name__ == '__main__':
    app = QApplication(sys.argv)
    # Splitter to show 2 views in same widget easily.
    splitter = QSplitter()
    # The model.
    model = QFileSystemModel()
    # You can setRootPath to any path.
    model.setRootPath(QDir.rootPath())
    # List of views.
    views = []
    for ViewType in (QColumnView, QTreeView):
        # Create the view in the splitter.
        view = ViewType(splitter)
        # Set the model of the view.
        view.setModel(model)
        # Set the root index of the view as the user's home directory.
        view.setRootIndex(model.index(QDir.homePath()))
    # Show the splitter.
    splitter.show()
    # Maximize the splitter.
    splitter.setWindowState(Qt.WindowMaximized)
    # Start the main loop.
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>5149213</id><snippet>(11.0 / 5) % 1 = 0.20000000000000018

(1.0 * 11 / 5) % 1 = 0.20000000000000018
</snippet></ROW><ROW><id>5149364</id><snippet>import sip
from PyQt4.QtCore import QObject

q = QObject()
sip.isdeleted(q)
False

sip.delete(q)
q
&lt;PyQt4.QtCore.QObject object at 0x017CCA98&gt;

q.isdeleted(q)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: underlying C/C++ object has been deleted
</snippet></ROW><ROW><id>5149385</id><snippet>Alias /javascript/ /usr/local/wsgi/static/javascript/
</snippet></ROW><ROW><id>5149390</id><snippet>from xml.dom import minidom

src = """
&lt;Schedule Season="2010" Timezone="Eastern"&gt;
  &lt;Game gameId="1" Week="1" GameDate="2010-09-09" AwayTeam="MIN" HomeTeam="NO" GameTime="8:30 PM"/&gt;
  &lt;Game gameId="2" Week="1" GameDate="2010-09-12" AwayTeam="MIA" HomeTeam="BUF" GameTime="1:00 PM"/&gt;
  &lt;Game gameId="3" Week="1" GameDate="2010-09-12" AwayTeam="DET" HomeTeam="CHI" GameTime="1:00 PM"/&gt;
  &lt;Game gameId="4" Week="1" GameDate="2010-09-12" AwayTeam="OAK" HomeTeam="TEN" GameTime="1:00 PM"/&gt;
&lt;/Schedule&gt;
"""

def test_print(dom):
    for node in dom.getElementsByTagName('Game'):
        print node.getAttribute('AwayTeam'),
        print node.getAttribute('HomeTeam'),
        print node.getAttribute('Week'),
        print node.getAttribute('gameId'),
        print node.getAttribute('GameDate'),
        print node.getAttribute('GameTime')
    print ''

dom = minidom.parseString(src)
test_print(dom)

dom = minidom.parse('data.xml')
test_print(dom)

f = open('data.xml', 'r')
dom = minidom.parse(f)
test_print(dom)
f.close()

url = 'http://api.fantasyfootballnerd.com/ffnScheduleXML.php?apiKey=1'
dom = minidom.parse(urllib2.urlopen(url))
test_print(dom)
</snippet></ROW><ROW><id>5149568</id><snippet>__setitem__</snippet></ROW><ROW><id>5149568</id><snippet>class MyClass(object):
    def get_properties():
        ... (call C function and convert to dict)
    def set_property():
        ... (call C function)
    def propgetter(self):
        context = self
        props = self.get_properties()
        class propsetter(dict):
            __getitem__ = props.__getitem__
            def __setitem__(self, key, value):
                props[key] = value
                context.set_property(key, value)
        return propsetter(self.get_properties())
    properties = property(propgetter)
</snippet></ROW><ROW><id>5150469</id><snippet>import json

from django.core import serializers

products = Product.objects.all()
# data is a python list
data = json.loads(serializers.serialize('json', products))
# d is a dict
d = {}
# data is a list nested in d
d['results'] = data
# more keys for d
d['totalPages'] = 10                                       
d['currentPage'] = 1
# data is a json string representation of the dict
data = json.dumps(d)                                       
</snippet></ROW><ROW><id>5150469</id><snippet>django.utils.simplejson.encoder</snippet></ROW><ROW><id>5150469</id><snippet>data = json.loads(serializers.serialize('json', products))
</snippet></ROW><ROW><id>5150469</id><snippet>as_dict</snippet></ROW><ROW><id>5150469</id><snippet>data = [p.as_dict() for p in products]
</snippet></ROW><ROW><id>5150977</id><snippet>x = a + b</snippet></ROW><ROW><id>5150977</id><snippet>x = a + b</snippet></ROW><ROW><id>5150977</id><snippet>multiprocessing</snippet></ROW><ROW><id>5150977</id><snippet>concurrent.futures</snippet></ROW><ROW><id>5150984</id><snippet>from twisted.internet import defer

@defer.inlineCallbacks
def runProgram():
    command = ['lrt']
    try:
        result = yield getProcessOutputAndValue('echo', command)
        printResult(result)
    except e:
        printError(e)
        stopReactor()
</snippet></ROW><ROW><id>5151072</id><snippet>tuple</snippet></ROW><ROW><id>5151072</id><snippet>Pair</snippet></ROW><ROW><id>5151072</id><snippet>set</snippet></ROW><ROW><id>5151072</id><snippet>TwoPair</snippet></ROW><ROW><id>5151072</id><snippet>set</snippet></ROW><ROW><id>5151072</id><snippet>__hash__</snippet></ROW><ROW><id>5151072</id><snippet>import operator

class TwoPairs(set):
  def __hash__(self):
    return reduce(operator.xor, map(hash, self))
</snippet></ROW><ROW><id>5151072</id><snippet>makeTwoPairs</snippet></ROW><ROW><id>5151072</id><snippet>def make_two_pairs(all_pairs):
  all_two_pairs = set()
  # uniqify the pairs list
  all_pairs = list(set(all_pairs))
  for i in range(len(all_pairs)-1):
    for j in range(i+1, len(all_pairs)):
      all_two_pairs.add(TwoPairs(all_pairs[i], all_pairs[j]))

  return all_two_pairs
</snippet></ROW><ROW><id>5151072</id><snippet>TwoPairs</snippet></ROW><ROW><id>5151086</id><snippet>def display_meta(request):
    meta = request.META.items()
    return render_to_response('meta.html', {"meta": meta})
</snippet></ROW><ROW><id>5151211</id><snippet>class Foo(object):
    def __init__(self, helpers):
        self.helpers = helpers

# then, instead of import foo:
foo = Foo(mock_helpers)
</snippet></ROW><ROW><id>5151211</id><snippet>import</snippet></ROW><ROW><id>5151211</id><snippet># foo.py
class Foo(object):
    pass # same code as before, plus foo_func

try:
   import whatever
   _singleton = Foo(whatever)
except ImportError:
   _singleton = Foo(something_else)

def foo_func():
   return _singleton.foo_func()
</snippet></ROW><ROW><id>5151304</id><snippet>r'"[^"\\]*(?:\\.[^"\\]*)*"'
</snippet></ROW><ROW><id>5151304</id><snippet>r'^((?:[^!"]+|"[^"\\]*(?:\\.[^"\\]*)*")*)!.*$'
</snippet></ROW><ROW><id>5151304</id><snippet>!</snippet></ROW><ROW><id>5151304</id><snippet>sub</snippet></ROW><ROW><id>5151304</id><snippet>search</snippet></ROW><ROW><id>5151304</id><snippet>import re

pattern = r'^((?:[^!"]+|"[^"\\]*(?:\\.[^"\\]*)*")*)!.*$'

x = '''print "hi!" ! Remove me'''
y = re.sub(pattern, r'\1', x)
print(y)
</snippet></ROW><ROW><id>5151913</id><snippet>path = os.getcwd()
convertPath = path.replace('\\','/')
</snippet></ROW><ROW><id>5152045</id><snippet>selected=True</snippet></ROW><ROW><id>5152045</id><snippet>Designation:
    &lt;select name="designation" onchange="document.forms[0].submit()"&gt;
        &lt;option value="" {% ifequal VAL this_value %}selected="True"{% endif %}&gt;Select A Designation&lt;/option&gt;
</snippet></ROW><ROW><id>5152049</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>5152049</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>5152049</id><snippet>{{ MEDIA_URL }}{{ADMIN_MEDIA_PREFIX}}css/base.css</snippet></ROW><ROW><id>5152049</id><snippet>{% admin_media_prefix %}css/base.css</snippet></ROW><ROW><id>5152049</id><snippet>admin_media_prefix</snippet></ROW><ROW><id>5152049</id><snippet>{% load adminmedia %}</snippet></ROW><ROW><id>5152049</id><snippet># A handy helper function I always use for site-relative paths
def fromRelativePath(*relativeComponents):
    return os.path.join(os.path.dirname(__file__), *relativeComponents).replace("\\","/")

[...]

url("^admin-media/(?P&lt;path&gt;.*)$",
    "django.views.static.serve",
    {"document_root": fromRelativePath("media", "admin-media")})
</snippet></ROW><ROW><id>5152434</id><snippet>WSGIReloadMechanism Process
</snippet></ROW><ROW><id>5152769</id><snippet>raise WindowsError("Clipboard can't be opened")
</snippet></ROW><ROW><id>5152833</id><snippet>import subprocess
cmd = "nmap -n -PN -sT -T4  -p 445,139 10.11.1.0/24 --exclude matrix"
pro = subprocess.Popen(cmd, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
pro.communicate() #[0] is stdout [1] is stderr :P
</snippet></ROW><ROW><id>5153364</id><snippet>import os
from os.path import join

lookfor = "python.exe"
for root, dirs, files in os.walk('C:\\'):
    print "searching", root
    if lookfor in files:
        print "found: %s" % join(root, lookfor)
        break
</snippet></ROW><ROW><id>5153448</id><snippet>import re

RE = ('(^([ \t]+)&lt;(idle2)&gt;(?:\n|\r\n?)[ \t]+&lt;value&gt;)'
      '(.*?)'
      '(?=&lt;/value&gt;(?:\n|\r\n?)\\2&lt;/\\3&gt;)')

print repr(ch),'\n'
print ch
print '\n-------------------------------------------------'
print repr(re.sub(RE,'\\1AAA',ch,flags = re.M)) , '\n'
print re.sub(RE,'\\1-----HHHHHHXXXXXXX-------',ch,flags = re.M)
</snippet></ROW><ROW><id>5153448</id><snippet>'&lt;fieldset&gt;\n  &lt;idle1&gt;\n    &lt;value&gt;something\\n&lt;/value&gt;\n  &lt;/idle1&gt;\n  &lt;idle2&gt;\n    &lt;value&gt;blabla&lt;/value&gt;\n  &lt;/idle2&gt;\n&lt;/fieldset&gt;'

&lt;fieldset&gt;
  &lt;idle1&gt;
    &lt;value&gt;something\n&lt;/value&gt;
  &lt;/idle1&gt;
  &lt;idle2&gt;
    &lt;value&gt;blabla&lt;/value&gt;
  &lt;/idle2&gt;
&lt;/fieldset&gt;

-------------------------------------------------
'&lt;fieldset&gt;\n  &lt;idle1&gt;\n    &lt;value&gt;something\\n&lt;/value&gt;\n  &lt;/idle1&gt;\n  &lt;idle2&gt;\n    &lt;value&gt;AAA&lt;/value&gt;\n  &lt;/idle2&gt;\n&lt;/fieldset&gt;'

&lt;fieldset&gt;
  &lt;idle1&gt;
    &lt;value&gt;something\n&lt;/value&gt;
  &lt;/idle1&gt;
  &lt;idle2&gt;
    &lt;value&gt;-----HHHHHHXXXXXXX-------&lt;/value&gt;
  &lt;/idle2&gt;
&lt;/fieldset&gt;
</snippet></ROW><ROW><id>5154214</id><snippet>__dict__</snippet></ROW><ROW><id>5154214</id><snippet>class Person(object):
    def __init__(self, **kw):
        self.__dict__ = kw
person = Person(name='Joe')
print person.name
</snippet></ROW><ROW><id>5154214</id><snippet>Joe
</snippet></ROW><ROW><id>5154214</id><snippet>def add_attributes(self, **kw):
    self.__dict__.update(kw)
</snippet></ROW><ROW><id>5154214</id><snippet>.update()</snippet></ROW><ROW><id>5154385</id><snippet>s = "2011-03-01 14:10:43 C:\Scan\raisoax.exe detected    Trojan.Win32.VBKrypt.agqw"
reg = re.match(r"\S*\s\S*\s(.*)[^\ ] detected\s+(.*)",s)
file,name = reg.groups()
</snippet></ROW><ROW><id>5154458</id><snippet>render(request, template[, dictionary][, context_instance][, content_type][, status][, current_app])
</snippet></ROW><ROW><id>5154458</id><snippet>render()</snippet></ROW><ROW><id>5154458</id><snippet>render_to_response</snippet></ROW><ROW><id>5154458</id><snippet>RequestContext</snippet></ROW><ROW><id>5154458</id><snippet>render_to_response(template[, dictionary][, context_instance][, mimetype])¶
</snippet></ROW><ROW><id>5154458</id><snippet>render_to_response</snippet></ROW><ROW><id>5154458</id><snippet>RequestContext</snippet></ROW><ROW><id>5154458</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>5154458</id><snippet>direct_to_template</snippet></ROW><ROW><id>5154458</id><snippet>render()</snippet></ROW><ROW><id>5154458</id><snippet>RequestContext</snippet></ROW><ROW><id>5154458</id><snippet>context_processor</snippet></ROW><ROW><id>5154458</id><snippet>direct_to_template</snippet></ROW><ROW><id>5154458</id><snippet>render</snippet></ROW><ROW><id>5154458</id><snippet>RequestContext</snippet></ROW><ROW><id>5154869</id><snippet>import numpy as np

def remove_row(arr,col,val):
    return arr[arr[col]!=val]

z = np.array([(1,2,3), (4,5,6), (7,8,9)],
    dtype=[('a', int), ('b', int), ('c', int)])

z=remove_row(z,'a',4)
print(repr(z))

# array([(1, 2, 3), (7, 8, 9)], 
#       dtype=[('a', '&lt;i4'), ('b', '&lt;i4'), ('c', '&lt;i4')])
</snippet></ROW><ROW><id>5154869</id><snippet>import numpy as np

class Data(np.ndarray):

    def __new__(cls, inputarr):
        obj = np.asarray(inputarr).view(cls)
        return obj

    def remove_some(self, col, val):
        return self[self[col] != val]

z = np.array([(1,2,3), (4,5,6), (7,8,9)],
    dtype=[('a', int), ('b', int), ('c', int)])
d = Data(z)
d = d.remove_some('a', 4)
print(d)
</snippet></ROW><ROW><id>5154869</id><snippet>remove_some</snippet></ROW><ROW><id>5154869</id><snippet>self</snippet></ROW><ROW><id>5154869</id><snippet>Data</snippet></ROW><ROW><id>5154900</id><snippet>argparse</snippet></ROW><ROW><id>5154900</id><snippet>-</snippet></ROW><ROW><id>5154900</id><snippet>python script.py /tmp/good_conf
</snippet></ROW><ROW><id>5154900</id><snippet>--conf_dir</snippet></ROW><ROW><id>5154900</id><snippet>python script.py --conf_dir=/tmp/good_conf
</snippet></ROW><ROW><id>5154900</id><snippet>nargs</snippet></ROW><ROW><id>5155088</id><snippet>sys.executable</snippet></ROW><ROW><id>5155106</id><snippet>out = open("test.dat", "a") # output file

for line in open("input.dat"):
    if line[:3] != "DS ": continue # skip "random garbage"

    keys = line.split()[1:] # split, remove "DS"
    if keys[0] != "N": # found ID, print with comma
        out.write(" ".join(keys) + ",")
    else: # found name, print and end line
        out.write(" ".join(keys[1:]) + "\n")
</snippet></ROW><ROW><id>5155106</id><snippet>User ID 1,user name 1
User ID 2,user name 2
</snippet></ROW><ROW><id>5155106</id><snippet>import re
pat_id = re.compile(r"DS\s+(User ID\s+\d+)")
pat_name = re.compile(r"DS\s+N\s+(.+\s+\d+)")
out = open("test.dat", "a")

for line in open("input.dat"):
    match = pat_id.match(line)
    if match: # found ID, print with comma
        out.write(match.group(1) + ",")
        continue
    match = pat_name.match(line)
    if match: # found name, print and end line
        out.write(match.group(1) + "\n")
</snippet></ROW><ROW><id>5155251</id><snippet>__init__.py</snippet></ROW><ROW><id>5155251</id><snippet>*.py</snippet></ROW><ROW><id>5155251</id><snippet>import</snippet></ROW><ROW><id>5155251</id><snippet>__init__.py</snippet></ROW><ROW><id>5155251</id><snippet>from Indicators.Stochastics import *
</snippet></ROW><ROW><id>5155251</id><snippet>from Indicators import Stochastics
</snippet></ROW><ROW><id>5155534</id><snippet>d = {}
for i in 'a=b,a=c,a=d,b=e'.split(","):
    k,v = i.split("=")
    d.setdefault(k,[]).append(v)
print d
</snippet></ROW><ROW><id>5155534</id><snippet>from collections import defaultdict

d = defaultdict(list)
for i in 'a=b,a=c,a=d,b=e'.split(","):
    k,v = i.split("=")
    d[k].append(v)
print d
</snippet></ROW><ROW><id>5156335</id><snippet>01777</snippet></ROW><ROW><id>5156335</id><snippet>1777</snippet></ROW><ROW><id>5156335</id><snippet>0o1777</snippet></ROW><ROW><id>5156499</id><snippet>listen.stdin.write("%s" %input)
listen.stdin.write("\n")
</snippet></ROW><ROW><id>5156594</id><snippet>import os
os.popen(r'C:\Windows\SysNative\manage-bde.exe -status c:').read()
</snippet></ROW><ROW><id>5157950</id><snippet>signal</snippet></ROW><ROW><id>5158146</id><snippet>getattr(thing, '__name__', None)
</snippet></ROW><ROW><id>5158146</id><snippet>thing.__name__</snippet></ROW><ROW><id>5158146</id><snippet>__getattr__</snippet></ROW><ROW><id>5158146</id><snippet>__getattr__</snippet></ROW><ROW><id>5158146</id><snippet>if name.startswith("__"):
    raise AttributeError
</snippet></ROW><ROW><id>5158146</id><snippet>__name__</snippet></ROW><ROW><id>5158253</id><snippet>import datetime
datetime.datetime.now() - datetime.timedelta(days=3*365)
</snippet></ROW><ROW><id>5158341</id><snippet>import urllib
url='http://stackoverflow.com/questions/5158168/python-regex-question/5158341'
f=urllib.urlopen(url)
for linenum,line in enumerate(f):
    print(line)
    locations=[pos for pos,char in enumerate(line) if char=='1']
    print('line {n}=(count:{c}, pos:{l})'.format(
        n=linenum,
        c=len(locations),
        l=locations
        ))
</snippet></ROW><ROW><id>5158647</id><snippet>header_string = ('number_one','number_two','number_three')
values = (1,2,3)
cursor.execute("""INSERT INTO my_table (%s,%s,%s) VALUES (%s,%s,%s)""", (header_string+values))
</snippet></ROW><ROW><id>5158736</id><snippet>wDebug = None

def start(stdscr):
    global wDebug
    #...
    wDebug = curses.newwin(5, screenSize[1], 0, 0);
</snippet></ROW><ROW><id>5158736</id><snippet>global</snippet></ROW><ROW><id>5158951</id><snippet>try:
    import simplejson as json
except ImportError:
    import json
</snippet></ROW><ROW><id>5159275</id><snippet>#!/usr/bin/env python
import gtk, pygtk, gobject, string

class HexEntry(gtk.Entry):
    """A PyGTK text entry field which allows only Hex characters to be entered"""

    def __init__(self):
        gtk.Entry.__init__(self)
        self.connect("changed", self.entryChanged)
        self.connect("insert_text", self.entryInsert)

    def entryChanged(self, entry):
        # Called only if the entry text has really changed.
        print "Entry changed"

    def entryInsert(self, entry, text, length, position):
        # Called when the user inserts some text, by typing or pasting.
        print "Text inserted"

        position = entry.get_position() # Because the method parameter 'position' is useless

        # Build a new string with allowed characters only.
        result = ''.join([c for c in text if c in string.hexdigits])

        # The above line could also be written like so (more readable but less efficient):
        # result = ''
        # for c in text:
        #     if c in string.hexdigits:
        #         result += c

        if result != '':
            # Insert the new text at cursor (and block the handler to avoid recursion).
            entry.handler_block_by_func(self.entryInsert)
            entry.insert_text(result, position)
            entry.handler_unblock_by_func(self.entryInsert)

            # Set the new cursor position immediately after the inserted text.
            new_pos = position + len(result)

            # Can't modify the cursor position from within this handler,
            # so we add it to be done at the end of the main loop:
            gobject.idle_add(entry.set_position, new_pos)

        # We handled the signal so stop it from being processed further.
        entry.stop_emission("insert_text")

def main():
    window = gtk.Window()
    window.connect("delete-event", gtk.main_quit)
    entry = HexEntry()
    window.add(entry)
    window.show_all()
    gtk.main()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>5159313</id><snippet>PyGILState_STATE gstate;
gstate = PyGILState_Ensure();

/* Make your call to PyEval_CallObject() here (and any other PY API calls). */

PyGILState_Release(gstate);
</snippet></ROW><ROW><id>5159329</id><snippet>class</snippet></ROW><ROW><id>5159329</id><snippet>def</snippet></ROW><ROW><id>5159329</id><snippet>class</snippet></ROW><ROW><id>5159377</id><snippet>urllib</snippet></ROW><ROW><id>5159377</id><snippet>urllib2</snippet></ROW><ROW><id>5159383</id><snippet>wDebug.move(0,0)
wDebug.deleteln()
wDebug.addstr(4, 0, msg)
wDebug.refresh() 
</snippet></ROW><ROW><id>5159389</id><snippet>show()</snippet></ROW><ROW><id>5159405</id><snippet>fig.subplots_adjust(hspace=.5)
</snippet></ROW><ROW><id>5159405</id><snippet>ax1.set_xticklabels([])
</snippet></ROW><ROW><id>5159405</id><snippet>yticklabels</snippet></ROW><ROW><id>5159753</id><snippet>&lt;entry&gt;
    &lt;title&gt;story 1&lt;/title&gt;
    &lt;text&gt;this is the first earthquake story&lt;/text&gt;
    &lt;title&gt;story 2&lt;/title&gt;
    &lt;text&gt;this is the second earthquake story&lt;/text&gt;
    &lt;title&gt;story 3&lt;/title&gt;
    &lt;text&gt;this is the third earthquake story&lt;/text&gt;
&lt;/entry&gt;
</snippet></ROW><ROW><id>5159753</id><snippet>from lxml import etree

root = etree.parse("test.xml")

for element in root.iter("title"):
    print("%s - %s" % (element.tag, element.text))
</snippet></ROW><ROW><id>5159753</id><snippet>title - story 1
title - story 2 
title - story 3
</snippet></ROW><ROW><id>5160445</id><snippet>if request.POST.get('delete'):
    obj.delete()
</snippet></ROW><ROW><id>5160530</id><snippet>cur.fetchall()</snippet></ROW><ROW><id>5160530</id><snippet>cur.rowcount</snippet></ROW><ROW><id>5160530</id><snippet>-1</snippet></ROW><ROW><id>5160720</id><snippet>import signal

signal.signal(signal.SIGINT, signal.SIG_DFL)
</snippet></ROW><ROW><id>5160721</id><snippet>'\r\n' * 2</snippet></ROW><ROW><id>5160721</id><snippet>stuff = 'GET /\r\n\r\n'
</snippet></ROW><ROW><id>5161005</id><snippet>include __init__.py
include setup.py
include somelib/*
include somelib/lib-i386/*
include somelib/lib-amd64/*
</snippet></ROW><ROW><id>5161005</id><snippet># Determine machine arhitecture
arch = os.uname()[4]
libname = "lib-%s" % (arch,)
lib_files = glob.glob('./somelib/' + libname + '/*')
data_files = [('somelib', 
              lib_files + ['__init__.py', 'somelib/README.TXT']),]

setup(
   ... 
   data_files=data_files
)
</snippet></ROW><ROW><id>5161286</id><snippet>import errno

try:
    socketConnection()
except socket.error, v:
    errorcode=v[0]
    if errorcode==errno.ECONNREFUSED:
        print "Connection Refused"
</snippet></ROW><ROW><id>5161338</id><snippet>[Gmail]/Inbox</snippet></ROW><ROW><id>5161338</id><snippet>m.list()</snippet></ROW><ROW><id>5161338</id><snippet>pprint</snippet></ROW><ROW><id>5161338</id><snippet>pprint.pprint(m.&lt;method of m&gt;(&lt;params&gt;))</snippet></ROW><ROW><id>5161478</id><snippet>def f(n):
    if n == 0:
        return
    a = input()
    f(n-1)
    print a

f(input())
</snippet></ROW><ROW><id>5161478</id><snippet>x = [1,2,3]
for i in reversed(x):
    print i    # prints 3, 2, 1
</snippet></ROW><ROW><id>5161478</id><snippet>print '&gt;' * n, n, a
</snippet></ROW><ROW><id>5161516</id><snippet>class ItemDetailInline(admin.TabularInline):
    model = ItemDetail

class ItemAdmin(admin.ModelAdmin):
    inlines = [
        ItemDetailInline,
    ]
</snippet></ROW><ROW><id>5161848</id><snippet>self.__class__().objects</snippet></ROW><ROW><id>5161848</id><snippet>self.__class__.objects</snippet></ROW><ROW><id>5161932</id><snippet>print()</snippet></ROW><ROW><id>5161932</id><snippet>print(count)
</snippet></ROW><ROW><id>5161932</id><snippet>print</snippet></ROW><ROW><id>5161932</id><snippet>print count
</snippet></ROW><ROW><id>5162203</id><snippet>IProducer</snippet></ROW><ROW><id>5162203</id><snippet>IConsumer</snippet></ROW><ROW><id>5162203</id><snippet>write_on_redis</snippet></ROW><ROW><id>5162203</id><snippet>write_on_redis</snippet></ROW><ROW><id>5162203</id><snippet>callLater</snippet></ROW><ROW><id>5162203</id><snippet>sismember</snippet></ROW><ROW><id>5162203</id><snippet>sadd</snippet></ROW><ROW><id>5162203</id><snippet>Deferred</snippet></ROW><ROW><id>5162203</id><snippet>d</snippet></ROW><ROW><id>5162203</id><snippet>Deferred</snippet></ROW><ROW><id>5162203</id><snippet>push</snippet></ROW><ROW><id>5162203</id><snippet>Deferred</snippet></ROW><ROW><id>5162203</id><snippet>push</snippet></ROW><ROW><id>5162203</id><snippet>self.buffer</snippet></ROW><ROW><id>5162203</id><snippet>self.buffer</snippet></ROW><ROW><id>5162203</id><snippet>IConsumer</snippet></ROW><ROW><id>5162203</id><snippet>IProducer</snippet></ROW><ROW><id>5162355</id><snippet>partial</snippet></ROW><ROW><id>5162355</id><snippet>from functools import wraps

class Aclass(object):
    def __init__(self, value):
        self._value = value

    def complex(self, a, b):                                            
        return a + b + self._value

def repartial(func, *parameters, **kparms):
    @wraps(func)
    def wrapped(self, *args, **kw):
        kw.update(kparms)
        return func(self, *(args + parameters), **kw)
    return wrapped

class Atype(type):
    def __new__(cls, name, bases, attrs):
        return super(Atype, cls).__new__(cls, name, (Aclass, ) + bases, attrs)

    def __init__(cls, name, bases, attrs):
        setattr(cls, 'simple', repartial(cls.complex, b=1))

class B(metaclass=Atype):
    pass

b = B(10)

print(b.complex(1, 2))
print(b.simple(1))
</snippet></ROW><ROW><id>5162505</id><snippet>results=[key for key, value in adictionary.items() if str(key).startswith('target') 
             and value &gt; 0 ]
</snippet></ROW><ROW><id>5162574</id><snippet>import numpy as np

np.convolve(a + [a[-1]], [.5,.5], mode='valid')[::2]
array([  1.,  11.])

np.convolve(b + [b[-1]], [.5,.5], mode='valid')[::2]
array([  1.,  11.,  20.])
</snippet></ROW><ROW><id>5162574</id><snippet>In [10]: %time a=reduce(list(np.arange(1000000))) #chosen answer
CPU times: user 6.38 s, sys: 0.08 s, total: 6.46 s
Wall time: 6.39 s

In [11]: %time c=np.convolve(list(np.arange(1000000)), [.5,.5], mode='valid')[::2]
CPU times: user 0.59 s, sys: 0.01 s, total: 0.60 s
Wall time: 0.61 s
</snippet></ROW><ROW><id>5162766</id><snippet>iterparse</snippet></ROW><ROW><id>5162766</id><snippet># coding: ascii
import xml.etree.cElementTree as et
# import xml.etree.ElementTree as et
# import lxml.etree as et
from cStringIO import StringIO
import re

xml_text_1 = """\
&lt;?xml version="1.0" ?&gt; 
&lt;!--  this is a comment --&gt; 
&lt;root
&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/root
&gt;
"""

xml_text_2 = """\
&lt;?xml version="1.0" ?&gt; 
&lt;!--  this is a comment --&gt; 
&lt;root
&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/root
&gt;
&lt;!--
That's all, folks! 
--&gt;
"""

xml_text_3 = '''&lt;?xml version="1.0" ?&gt;
&lt;!-- &lt;mole1&gt; --&gt;
&lt;root&gt;&lt;foo /&gt;&lt;/root&gt;
&lt;!-- &lt;/mole2&gt; --&gt;'''

xml_text_4 = '''&lt;?xml version="1.0" ?&gt;&lt;!-- &lt;mole1&gt; --&gt;&lt;root&gt;&lt;foo /&gt;&lt;/root&gt;&lt;!-- &lt;/mole2&gt; --&gt;'''

for xml_text in (xml_text_1, xml_text_2, xml_text_3, xml_text_4):
    print
    chrstr = xml_text.strip()
    x = max(chrstr.rfind('\r'),chrstr.rfind('\n'))
    lastline = chrstr[x:]
    print "*** eyquem 1:", repr(lastline.strip())

    chrstr = xml_text.strip()
    x = max(chrstr.rfind('\r'),chrstr.rfind('\n'))
    lastline = chrstr[x+1:]
    if lastline[0:5]=='&lt;!-- ':
        chrstr = xml_text[0:x].rstrip()
        x = max(chrstr.rfind('\r'),chrstr.rfind('\n'))
        print "*** eyquem 2:", repr(chrstr[x+1:])
    else:
        print "*** eyquem 2:", repr(lastline)

    m = None
    for m in re.finditer('^&lt;/[^&gt;]+&gt;', xml_text, re.MULTILINE):
        pass
    if m: print "*** eyquem 3:", repr(m.group())
    else: print "*** eyquem 3:", "FAIL"

    m = None
    for m in re.finditer('&lt;/[^&gt;]+&gt;', xml_text):
        pass
    if m: print "*** eyquem 4:", repr(m.group())
    else: print "*** eyquem 4:", "FAIL"

    m = re.search('^&lt;(?![?!])[^&gt;]+&gt;', xml_text, re.MULTILINE)
    if m: print "*** eyquem 5:", repr(m.group())
    else: print "*** eyquem 5:", "FAIL"

    m = re.search('&lt;(?![?!])[^&gt;]+&gt;', xml_text)
    if m: print "*** eyquem 6:", repr(m.group())
    else: print "*** eyquem 6:", "FAIL"

    filelike_obj = StringIO(xml_text)
    tree = et.parse(filelike_obj)
    print "*** parse:", tree.getroot().tag

    filelike_obj = StringIO(xml_text)
    for event, elem in et.iterparse(filelike_obj, ('start', 'end')):
        print "*** iterparse:", elem.tag
        break
</snippet></ROW><ROW><id>5162766</id><snippet>*** eyquem 1: '&gt;'
*** eyquem 2: '&gt;'
*** eyquem 3: FAIL
*** eyquem 4: '&lt;/root\n&gt;'
*** eyquem 5: '&lt;root\n&gt;'
*** eyquem 6: '&lt;root\n&gt;'
*** parse: root
*** iterparse: root

*** eyquem 1: '--&gt;'
*** eyquem 2: '--&gt;'
*** eyquem 3: FAIL
*** eyquem 4: '&lt;/root\n&gt;'
*** eyquem 5: '&lt;root\n&gt;'
*** eyquem 6: '&lt;root\n&gt;'
*** parse: root
*** iterparse: root

*** eyquem 1: '&lt;!-- &lt;/mole2&gt; --&gt;'
*** eyquem 2: '&lt;root&gt;&lt;foo /&gt;&lt;/root&gt;'
*** eyquem 3: FAIL
*** eyquem 4: '&lt;/mole2&gt;'
*** eyquem 5: '&lt;root&gt;'
*** eyquem 6: '&lt;mole1&gt;'
*** parse: root
*** iterparse: root

*** eyquem 1: '&gt;'
*** eyquem 2: '&lt;?xml version="1.0" ?&gt;&lt;!-- &lt;mole1&gt; --&gt;&lt;root&gt;&lt;foo /&gt;&lt;/root&gt;&lt;!-- &lt;/mole2&gt; --&gt;'
*** eyquem 3: FAIL
*** eyquem 4: '&lt;/mole2&gt;'
*** eyquem 5: FAIL
*** eyquem 6: '&lt;mole1&gt;'
*** parse: root
*** iterparse: root
</snippet></ROW><ROW><id>5162766</id><snippet>try:
    import xml.etree.cElementTree as ET
except ImportError:
    import cElementTree as ET

def get_root_tag_from_xml_file(xml_file_path):
    result = f = None
    try:
        f = open(xml_file_path, 'rb')
        for event, elem in ET.iterparse(f, ('start', )):
            result = elem.tag
            break
    finally:
        if f: f.close()
    return result

if __name__ == "__main__":
    import sys, glob
    for pattern in sys.argv[1:]:
        for filename in glob.glob(pattern):
            print filename, get_root_tag_from_xml_file(filename)
</snippet></ROW><ROW><id>5162963</id><snippet>weakref</snippet></ROW><ROW><id>5163023</id><snippet>ifilter</snippet></ROW><ROW><id>5163023</id><snippet>itertools</snippet></ROW><ROW><id>5163023</id><snippet> newlist = [x for x in oldlist if x not in ['a', 'c'] ]
</snippet></ROW><ROW><id>5163023</id><snippet>(</snippet></ROW><ROW><id>5163023</id><snippet>)</snippet></ROW><ROW><id>5163023</id><snippet>[</snippet></ROW><ROW><id>5163023</id><snippet>]</snippet></ROW><ROW><id>5163023</id><snippet>interestingelts = (x for x in oldlist if x not in ['a', 'c'])
</snippet></ROW><ROW><id>5163023</id><snippet>interestingelts</snippet></ROW><ROW><id>5163023</id><snippet> for y in interestingelts:    # ok
    print y

 print interestingelts[0]     # not ok: generator allows sequential access only
</snippet></ROW><ROW><id>5163121</id><snippet>cell = gtk.CellRendererText()        
column = gtk.TreeViewColumn('column0', cell, text=0)   
column.set_cell_data_func(cell, self.load_data)
self.list.append_column(column)
</snippet></ROW><ROW><id>5163121</id><snippet>def load_data(self, column, cell, model, iter):
    # load data for the given model row
    print 'load data ' + model.get_value(iter, 0)
</snippet></ROW><ROW><id>5163122</id><snippet>newboard.hexes_set.create(col=c,row=r)
</snippet></ROW><ROW><id>5163122</id><snippet>manage.py shell</snippet></ROW><ROW><id>5163122</id><snippet>dir</snippet></ROW><ROW><id>5163191</id><snippet>class APSpider(BaseSpider):
name = "APSpider"

start_urls = [
    "http://www.somedomain.com/list-of-websites",
]

def __init__(self):
    self.allowed_domains = None

def parse(self, response):
    soup = BeautifulSoup( response.body )

    if not self.allowed_domains:
        for link_tag in soup.findAll('td',{'class':'half-width'}):
            _website = link_tag.find('a')['href']
            u = urlparse.urlparse(_website)
            self.allowed_domains.append(u.netloc)

            yield Request(url=_website, callback=self.parse_secondary_site)

    if response.url in self.allowed_domains:
        yield Request(...)

...
</snippet></ROW><ROW><id>5163269</id><snippet>request</snippet></ROW><ROW><id>5163269</id><snippet>def create_submission(request, mantra):
    ip_meta_entry = 'HTTP_X_REAL_IP' in request.META and 'HTTP_X_REAL_IP' or 'REMOTE_ADDR'
    s = UserSubmission(
        mantra=mantra,
        ip=request.META[ip_meta_entry])
    s.save()
    return s
</snippet></ROW><ROW><id>5163396</id><snippet>import Image, numpy

def blend_images(upper=None, lower=None):
    # convert to arrays
    upx = numpy.asarray(upper).astype('uint16')
    lpx = numpy.asarray(lower).astype('uint16')
    # do some error-checking
    assert upper.mode==lower.mode
    assert upx.shape==lpx.shape
    # calculate the results of the two conditions
    cond1 = 2 * upx * lpx / 255
    cond2 = 255 - 2 * (255 - upx) * (255 - lpx) / 255
    # make a new array that is defined by condition 2
    arr = cond2
    # this is a boolean array that defines where in the array lpx&lt;128
    mask = lpx&lt;128
    # populate the parts of the new arry that meet the critera for condition 1
    arr[mask] = cond1[mask]
    # prevent overflow (may not be necessary)
    arr.clip(0, 255, arr)
    # convert back to image
    return Image.fromarray(arr.astype('uint8'), upper.mode)
</snippet></ROW><ROW><id>5163656</id><snippet>easy_install --always-unzip django
</snippet></ROW><ROW><id>5163836</id><snippet>startmarker = "ohai"
endmarker = "meheer?"
marking = False
result = []

with open("somefile") as f:
  for line in f:
    if line.startswith(startmarker): marking = True
    elif line.startswith(endmarker): marking = False

    if marking: result.append(line)

if len(result) &gt; 1:
  print "".join(result[1:])
</snippet></ROW><ROW><id>5163836</id><snippet>with</snippet></ROW><ROW><id>5163836</id><snippet>close()</snippet></ROW><ROW><id>5163836</id><snippet>for</snippet></ROW><ROW><id>5163836</id><snippet>'ohai'</snippet></ROW><ROW><id>5163836</id><snippet>'meheer?'</snippet></ROW><ROW><id>5163836</id><snippet>result</snippet></ROW><ROW><id>5163836</id><snippet>result[1:]</snippet></ROW><ROW><id>5163836</id><snippet>result</snippet></ROW><ROW><id>5163836</id><snippet>startmarker = "ohai"
endmarker = "meheer?"
marking = False
result = []

with open("somefile") as f:
  for line in f:
    if not marking:
      index = line.find(startmarker)
      if index != -1:
        marking = True
        result.append(line[index:])
    else:
      index = line.rfind(endmarker)
      if index != -1:
        marking = False
        result.append(line[:index + len(endmarker)])
      else:
        result.append(line)

print "".join(result)
</snippet></ROW><ROW><id>5163836</id><snippet>marking</snippet></ROW><ROW><id>5163836</id><snippet>if</snippet></ROW><ROW><id>5163836</id><snippet>startmarker</snippet></ROW><ROW><id>5163836</id><snippet>find</snippet></ROW><ROW><id>5163836</id><snippet>startmarker</snippet></ROW><ROW><id>5163836</id><snippet>line[index:]</snippet></ROW><ROW><id>5163836</id><snippet>line</snippet></ROW><ROW><id>5163836</id><snippet>index</snippet></ROW><ROW><id>5163836</id><snippet>endmarker</snippet></ROW><ROW><id>5163836</id><snippet>rfind</snippet></ROW><ROW><id>5163836</id><snippet>endmarker</snippet></ROW><ROW><id>5163836</id><snippet>line[...]</snippet></ROW><ROW><id>5163836</id><snippet>line</snippet></ROW><ROW><id>5163836</id><snippet>index</snippet></ROW><ROW><id>5163890</id><snippet>from django.utils.feedgenerator import Rss201rev2Feed
class CustomFeedGenerator(Rss201rev2Feed):
    def add_item_elements(self, handler, item):
        super(CustomFeedGenerator, self).add_item_elements(handler, item)
        handler.addQuickElement(u"featured", item['featured'])
</snippet></ROW><ROW><id>5163890</id><snippet>def item_extra_kwargs(self, obj):
    return { 'featured': val}
</snippet></ROW><ROW><id>5163890</id><snippet>featured</snippet></ROW><ROW><id>5164019</id><snippet>import numpy as np
a = np.arange(12)**2
b = a.reshape(4,3)
print np.std(b, axis=1)
</snippet></ROW><ROW><id>5164019</id><snippet>b</snippet></ROW><ROW><id>5164019</id><snippet>b</snippet></ROW><ROW><id>5164019</id><snippet>import numpy as np
a = np.arange(12)**2
b = np.lib.stride_tricks.as_strided(a, shape=(4,3), strides=(a.itemsize*3, a.itemsize))
print np.std(b, axis=1)
</snippet></ROW><ROW><id>5164442</id><snippet>sudo easy_install South
sudo easy_install sorl-thumbnail
</snippet></ROW><ROW><id>5165222</id><snippet>list()</snippet></ROW><ROW><id>5165222</id><snippet>[]</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; list((x for x in string.letters if x in (y for y in "BigMan on campus")))
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; [x for x in string.letters if x in (y for y in "BigMan on campus")]
</snippet></ROW><ROW><id>5165222</id><snippet>for</snippet></ROW><ROW><id>5165222</id><snippet>x*x for x in range(10)
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; (x*x for x in range(10))
&lt;generator object &lt;genexpr&gt; at 0xb7485464&gt;
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; sorted(x*x for x in range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; {x*x for x in range(10)}
{0, 1, 4, 81, 64, 9, 16, 49, 25, 36}

&gt;&gt;&gt; set(x*x for x in range(10))
{0, 1, 4, 81, 64, 9, 16, 49, 25, 36}
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; dict((x, x*x) for x in range(10))
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

&gt;&gt;&gt; {x: x*x for x in range(10)}
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; list(x*x for x in range(10))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

&gt;&gt;&gt; [x*x for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; x
9
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; foo = (x*x for x in range(10))
&gt;&gt;&gt; [foo]
[&lt;generator object &lt;genexpr&gt; at 0xb7559504&gt;]
</snippet></ROW><ROW><id>5165222</id><snippet>list()</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; list(foo)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>5165222</id><snippet>&gt;&gt;&gt; [x for x in foo]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>5165247</id><snippet>print jp_sent_tokenizer.tokenize (u'の各宣言を実行しておく必要があることに注意しよう。これ以下の節では、各スクリプト例の前にこれらがすでに宣言されていることを前提とする。')
</snippet></ROW><ROW><id>5165257</id><snippet>category = Category.objects.get(title=title)
post_list = category.post_set.all()
</snippet></ROW><ROW><id>5165352</id><snippet>class ExtendedImage(object):
    def __init__(self,img):
        self._img=img
    def method1(self):
        return self._img.method1()    #&lt;-- ExtendedImage delegates to self._img
    def method3(self):
        ...
</snippet></ROW><ROW><id>5165352</id><snippet>self._img</snippet></ROW><ROW><id>5165352</id><snippet>__getattr__</snippet></ROW><ROW><id>5165352</id><snippet>class ExtendedImage(object):
    def __init__(self,img):
        self._img=img
    def __getattr__(self,key):
        if key == '_img':
            #  http://nedbatchelder.com/blog/201010/surprising_getattr_recursion.html
            raise AttributeError()
        return getattr(self._img,key)
    def method3(self):
        print('Hiya!')
</snippet></ROW><ROW><id>5165352</id><snippet>import Image
import myOriginal
im = myOriginal.ExtendedImage(Image.open("picture.jpg"))
im.method3()
</snippet></ROW><ROW><id>5165462</id><snippet>.rowcount</snippet></ROW><ROW><id>5165837</id><snippet>dict</snippet></ROW><ROW><id>5165837</id><snippet>credit_cards={'VISA':CreditCard('1000000000000000','3','2011','111')}</snippet></ROW><ROW><id>5165837</id><snippet>list</snippet></ROW><ROW><id>5165837</id><snippet>frozenset</snippet></ROW><ROW><id>5165837</id><snippet>dict</snippet></ROW><ROW><id>5165837</id><snippet>frozenset</snippet></ROW><ROW><id>5165837</id><snippet>dict</snippet></ROW><ROW><id>5165960</id><snippet>import argparse
import sys


class VerifyNoBuild(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print 'No: {n} {v} {o}'.format(n=args, v=values, o=option_string)
        if args.build is not None:
            parser.error(
                '--build should not be used with --from or --interval')
        setattr(args, self.dest, values)


class VerifyOnlyBuild(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print 'Only: {n} {v} {o}'.format(n=args, v=values, o=option_string)
        if getattr(args, 'from') is not None:
            parser.error('--from should not be used with --build')
        if getattr(args, 'interval') is not None:
            parser.error('--interval should not be used with --build')
        setattr(args, self.dest, values)

parser = argparse.ArgumentParser(description='A Tool')
subparsers = parser.add_subparsers(help='sub-command help')

# create the parser for the 'download' command
download_parser = subparsers.add_parser('download', help='download help')

download_parser.add_argument('--interval',
                             type=int, help='interval help',
                             action=VerifyNoBuild)
download_parser.add_argument('--from',
                             type=int, action=VerifyNoBuild)
download_parser.add_argument('--build',
                             type=int, action=VerifyOnlyBuild)

args = parser.parse_args('download --from 1234 --interval 60'.split())
print(args)
# Namespace(build=None, from=1234, interval=60)

args = parser.parse_args('download --build 1432'.split())
print(args)
# Namespace(build=1432, from=None, interval=None)

args = parser.parse_args('download --build 1432 --from 1234'.split())
print(args)
# usage: test.py download [-h] [--interval INTERVAL] [--from FROM] [--build BUILD]
# test.py download: error: --build should not be used with --from or --interval

args = parser.parse_args('download --build 1432 --interval 60'.split())
print(args)
# usage: test.py download [-h] [--interval INTERVAL] [--from FROM] [--build BUILD]
# test.py download: error: --build should not be used with --from or --interval
</snippet></ROW><ROW><id>5165960</id><snippet>def parse_options():
    parser = argparse.ArgumentParser(description='A Tool')
    subparsers = parser.add_subparsers(help='sub-command help')

    #create the parser for the 'download' command
    download_parser = subparsers.add_parser('download', help='download help')
    download_parser.add_argument('--interval', type=int, help='interval help')
    download_parser.add_argument('--from', type=int)
    download_parser.add_argument('--build', type=int)

    opt=parser.parse_args()
    from_interval=[getattr(opt,key) is not None for key in ('from','interval')]
    if opt.build is not None:
        if any(from_interval):
            sys.exit('error!')
    elif not all(from_interval):
        sys.exit('error!')
    return opt
</snippet></ROW><ROW><id>5166373</id><snippet>__new__</snippet></ROW><ROW><id>5166373</id><snippet>__init__</snippet></ROW><ROW><id>5166373</id><snippet>class Cached(object):
    """Simple example of immutable object reuse."""

    def __init__(self, i):
        self.i = i

    def __new__(cls, i, _cache={}):
        try:
            return _cache[i]
        except KeyError:
            # you must call __new__ on the base class
            x = super(Cached, cls).__new__(cls)
            x.__init__(i)
            _cache[i] = x
            return x
</snippet></ROW><ROW><id>5166373</id><snippet>&gt;&gt;&gt; a = Cached(100)
&gt;&gt;&gt; b = Cached(200)
&gt;&gt;&gt; c = Cached(100)
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a is c
True
</snippet></ROW><ROW><id>5166423</id><snippet>g = file(path_to_bigfile) # or any generator
return Response(g, direct_passthrough=True)
</snippet></ROW><ROW><id>5166588</id><snippet>Num2</snippet></ROW><ROW><id>5166588</id><snippet>Num</snippet></ROW><ROW><id>5166588</id><snippet>__init__()</snippet></ROW><ROW><id>5166588</id><snippet>Num2</snippet></ROW><ROW><id>5166588</id><snippet>Num</snippet></ROW><ROW><id>5166588</id><snippet>__init__()</snippet></ROW><ROW><id>5166588</id><snippet>__init__()</snippet></ROW><ROW><id>5166588</id><snippet>__init__()</snippet></ROW><ROW><id>5166588</id><snippet>Num2</snippet></ROW><ROW><id>5166588</id><snippet>Num</snippet></ROW><ROW><id>5166588</id><snippet>class Num2(Num):
    def __init__(self,num):
        Num.__init__(self,num)
        self.n2 = num*2
</snippet></ROW><ROW><id>5166617</id><snippet>date = "2010-11-22"
timestamps = set(['2011-02-22', '2011-02-05', '2011-02-04', '2010-12-14', '2010-12-13', '2010-12-12', '2010-12-11', '2010-12-07', '2010-12-02', '2010-11-30', '2010-11-26', '2010-11-23', '2010-11-22', '2010-11-16'])
#then you can just update it like so
timestamps.update(['2010-11-16']) #if its in there it does nothing
timestamps.update(['2010-12-30']) # it does add it
</snippet></ROW><ROW><id>5166911</id><snippet>sorted(timestamps, key=lambda d: map(int, d.split('-')))
</snippet></ROW><ROW><id>5166962</id><snippet>public string DownLoadfiletolocal(string FileURL, string Title)
{

//Copy.Copy is a webservice object that I consumed.

Copy.Copy CopyObj = new Copy.Copy();
CopyObj.Url = SiteURL + "/_vti_bin/copy.asmx"; // Dynamically passing SiteURL
NetworkCredential nc2 = new NetworkCredential();
nc2.Domain = string.Empty;
nc2.UserName = _UserName;
nc2.Password = _Password;


string copySource = FileURL; //Pass full url for document.

Copy.FieldInformation myFieldInfo = new Copy.FieldInformation();
Copy.FieldInformation[] myFieldInfoArray = { myFieldInfo };
byte[] myByteArray;

// Call the web service
uint myGetUint = CopyObj.GetItem(copySource, out myFieldInfoArray, out myByteArray);

// Convert into Base64 String
string base64String;
base64String = Convert.ToBase64String(myByteArray, 0, myByteArray.Length);

// Convert to binary array
byte[] binaryData = Convert.FromBase64String(base64String);

// Create a temporary file to write the text of the form to
string tempFileName = Path.GetTempPath() + "\\" + Title;

// Write the file to temp folder
FileStream fs = new FileStream(tempFileName, FileMode.Create, FileAccess.ReadWrite);
fs.Write(binaryData, 0, binaryData.Length);
fs.Close();

return tempFileName;

}
</snippet></ROW><ROW><id>5167145</id><snippet>subprocess.Popen.__call__</snippet></ROW><ROW><id>5167145</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>5167145</id><snippet>Popen</snippet></ROW><ROW><id>5167145</id><snippet>def run_agent():
  real_popen = getattr(subprocess, 'Popen')
  try:
    setattr(subprocess, 'Popen', lambda *args, **kwargs: MockProcess('&lt;foo bar="baz" /&gt;')
    imp.load_module(
      MY_SCRIPT.replace('.py', '').replace('.', '_'),
      file(SCRIPT_DIR),
      MY_SCRIPT,
      ('.py', 'r', imp.PY_SOURCE)
    )
  finally:
    setattr(subprocess.Popen, '__call__', real_popen)
</snippet></ROW><ROW><id>5167145</id><snippet>Python 2.6.6 (r266:84292, Sep 15 2010, 16:22:56) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; setattr(subprocess, 'Popen', lambda *args, **kwargs: [1,2])
&gt;&gt;&gt; subprocess.Popen([1], stdout=1)
[1, 2]
</snippet></ROW><ROW><id>5167208</id><snippet>NTLM</snippet></ROW><ROW><id>5167208</id><snippet>Negotiate</snippet></ROW><ROW><id>5167208</id><snippet>Negotiate</snippet></ROW><ROW><id>5167260</id><snippet>quote(str(var1))
</snippet></ROW><ROW><id>5167260</id><snippet>unquote(str(var1))
</snippet></ROW><ROW><id>5167398</id><snippet>ls -l</snippet></ROW><ROW><id>5167398</id><snippet>CFLAGS='-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64' OPT="-g -O2 $CFLAGS" \
    ./configure
</snippet></ROW><ROW><id>5167398</id><snippet>stat</snippet></ROW><ROW><id>5167398</id><snippet>-D_FILE_OFFSET_BITS=64</snippet></ROW><ROW><id>5167398</id><snippet>stat()</snippet></ROW><ROW><id>5167398</id><snippet>(1&lt;&lt;31)-1</snippet></ROW><ROW><id>5167521</id><snippet>open</snippet></ROW><ROW><id>5167521</id><snippet>close</snippet></ROW><ROW><id>5167521</id><snippet>import serial

ser = serial.Serial ( 2 , baudrate = 57600 , timeout = 1 )
while True:

    line = ser.readline().strip('^\n\r')
    print line
    AngleText = open ("data.txt" , "w")
    AngleText.write (str(line))
    AngleText.close()

ser.close()
</snippet></ROW><ROW><id>5168089</id><snippet>EmployeeDetails(userName,designation,employeeID,contactNumber,project,dateOfJoin).save() 
</snippet></ROW><ROW><id>5168089</id><snippet>EmployeeDetails(userName=userName,designation=designation,employeeID=employeeID,contactNumber=contactNumber,project=project,dateOfJoin=dateOfJoin).save() 
</snippet></ROW><ROW><id>5168098</id><snippet>curses</snippet></ROW><ROW><id>5168385</id><snippet>week=['0']*7
for day in ["1","2","7"]:
    week[int(day) - 1]='1'
week=''.join(week)
</snippet></ROW><ROW><id>5168751</id><snippet>ReleaseCapture</snippet></ROW><ROW><id>5168751</id><snippet>del(self.cam)</snippet></ROW><ROW><id>5168751</id><snippet>self.cam</snippet></ROW><ROW><id>5168751</id><snippet>CvCapture</snippet></ROW><ROW><id>5169458</id><snippet>__init__</snippet></ROW><ROW><id>5169458</id><snippet>__new__</snippet></ROW><ROW><id>5169458</id><snippet>import sys

class Num:
    max = sys.maxint

    def __init__(self,num):
        self.n = num

    def getn(self):
        return self.n

    @staticmethod
    def getone():
        return 1

    @classmethod
    def getmax(cls):
        return cls.max

myObj = Num(3)
# with the appropriate decorator these should work fine
myObj.getone()
myObj.getmax()
myObj.getn()
</snippet></ROW><ROW><id>5169492</id><snippet>from django.utils.translation import gettext_lazy as _
</snippet></ROW><ROW><id>5169616</id><snippet>cursor.callproc('d.MySP',args)
</snippet></ROW><ROW><id>5169616</id><snippet>CALL</snippet></ROW><ROW><id>5169616</id><snippet>def callproc(self, procname, args=()):
    from types import UnicodeType
    db = self._get_db()
    charset = db.character_set_name()
    for index, arg in enumerate(args):
        q = "SET @_%s_%d=%s" % (procname, index,
                                     db.literal(arg))
        if isinstance(q, unicode):
            q = q.encode(charset)
        self._query(q)
        self.nextset()

    q = "CALL %s(%s)" % (procname,
                         ','.join(['@_%s_%d' % (procname, i)
                                   for i in range(len(args))]))
    if type(q) is UnicodeType:
        q = q.encode(charset)
    self._query(q)
    self._executed = q
    if not self._defer_warnings: self._warning_check()
    return args
</snippet></ROW><ROW><id>5170641</id><snippet>from lxml import etree
from StringIO import StringIO
x = """&lt;?xml version="1.0" encoding="utf-8"?&gt;\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" &gt;\n&lt;aa&gt; â&lt;/aa&gt;"""
p = etree.XMLParser(remove_blank_text=True, resolve_entities=False)
r = etree.parse(StringIO(x), p)
etree.tostring(r) # '&lt;aa&gt; â&lt;/aa&gt;'
</snippet></ROW><ROW><id>5170708</id><snippet>triples</snippet></ROW><ROW><id>5170708</id><snippet>#Parse the file
g = rdflib.Graph()
g.parse("yourdata.nquads")
subject = article = rdflib.term.URIRef("http://www.someuri.org/for/your/subject")

# (subject,None,None) represents a constrain to iterate over the graph. By setting
# any of the three elements in the triple you constrain by any combination of subject,
# predicate or object. In this case we only  constrain by subject.
for triple in g.triples((subject,None,None)):
    print triple
</snippet></ROW><ROW><id>5170708</id><snippet>rdflib.plugin.register('sparql', rdflib.query.Processor,
                       'rdfextras.sparql.processor', 'Processor')
rdflib.plugin.register('sparql', rdflib.query.Result,
                       'rdfextras.sparql.query', 'SPARQLQueryResult')

 #Parse the file
g = rdflib.Graph()
g.parse("yourdata.nquads")

query = """
    SELECT ?pred ?obj WHERE {
         &lt;http://www.someuri.org/for/your/subject&gt; ?pred ?obj
    }
    """
for row in g.query(query):
    print "Predicate:%s Object:%s"%(row[0],row[1])
</snippet></ROW><ROW><id>5170752</id><snippet>Class MyTable:
   def __init__(self):
      self.dates = [] // where dates[i] might be something like {date: [P, A, ...]}
                      // you will have to figure out how and what do you want to represent
      self.data = []  // where data[i] is something like {ab:[P, A, B, None]}

   // define different methods to fill dates and data fields
</snippet></ROW><ROW><id>5170891</id><snippet>__init__.py</snippet></ROW><ROW><id>5171001</id><snippet>#!/usr/bin/python

import cgi;
import codecs;

form = cgi.FieldStorage()
my_a = form.getvalue("a","")

wFile = codecs.open("test.txt", "w", "utf8")
wFile.write(my_a);
wFile.close()

print("Content-Type: text/plain")
print("Location: ../plain.html")
print()
</snippet></ROW><ROW><id>5171001</id><snippet>/cgi-bin/</snippet></ROW><ROW><id>5171001</id><snippet>getvalue("a","")</snippet></ROW><ROW><id>5171082</id><snippet>shutil.copytree()</snippet></ROW><ROW><id>5171082</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>5171082</id><snippet>*.*</snippet></ROW><ROW><id>5171279</id><snippet>urllib.quote(name.encode("utf8"))</snippet></ROW><ROW><id>5171279</id><snippet>In [1]: urllib.quote(u"foo bar$=+:;../..(boo)\u00c5".encode('utf8'))
Out[1]: 'foo%20bar%24%3D%2B%3A%3B../..%28boo%29%C3%85'
</snippet></ROW><ROW><id>5171421</id><snippet>[root@devel ~]# ./x.sh 
x
y
z
[root@devel ~]# cat x.sh 
#!/bin/bash
echo x
./y.sh

[root@devel ~]# cat y.sh 
#!/bin/bash

echo y
./z.sh
[root@devel ~]# cat z.sh 
#!/bin/bash

echo z

[root@devel ~]# strace -q -f -e execve ./x.sh 
execve("./x.sh", ["./x.sh"], [/* 28 vars */]) = 0
x
[pid 19781] execve("./y.sh", ["./y.sh"], [/* 28 vars */]) = 0
y
[pid 19782] execve("./z.sh", ["./z.sh"], [/* 28 vars */]) = 0
z
[pid 19781] --- SIGCHLD (Child exited) @ 0 (0) ---
--- SIGCHLD (Child exited) @ 0 (0) —
</snippet></ROW><ROW><id>5171421</id><snippet>[root@devel ~]# cat x.sh 
#!/bin/bash
echo x
./y.sh
ls &gt;/dev/null 2&gt;&amp;1
[root@devel ~]# cat y.sh 
#!/bin/bash

echo y
perl -e 'print "z\n";'
[root@devel ~]# ./x.sh 
x
y
z
[root@devel ~]# strace -q -f -e execve ./x.sh 
execve("./x.sh", ["./x.sh"], [/* 28 vars */]) = 0
x
[pid 20300] execve("./y.sh", ["./y.sh"], [/* 28 vars */]) = 0
y
[pid 20301] execve("/usr/bin/perl", ["perl", "-e", "print \"z\\n\";"], [/* 28 vars */]) = 0
z
[pid 20300] --- SIGCHLD (Child exited) @ 0 (0) ---
--- SIGCHLD (Child exited) @ 0 (0) ---
[pid 20302] execve("/bin/ls", ["ls"], [/* 28 vars */]) = 0
--- SIGCHLD (Child exited) @ 0 (0) ---
[root@devel ~]# 
</snippet></ROW><ROW><id>5171451</id><snippet>$ /usr/bin/python2.6
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import objc
&gt;&gt;&gt; objc.__file__
'/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/PyObjC/objc/__init__.pyc'
</snippet></ROW><ROW><id>5171914</id><snippet>None</snippet></ROW><ROW><id>5171914</id><snippet>Text</snippet></ROW><ROW><id>5171914</id><snippet>draw</snippet></ROW><ROW><id>5171914</id><snippet>setText</snippet></ROW><ROW><id>5171914</id><snippet>draw</snippet></ROW><ROW><id>5171914</id><snippet>Text</snippet></ROW><ROW><id>5171914</id><snippet>None</snippet></ROW><ROW><id>5172158</id><snippet>pip</snippet></ROW><ROW><id>5172158</id><snippet>virtualenv</snippet></ROW><ROW><id>5172158</id><snippet>virtualenv</snippet></ROW><ROW><id>5172158</id><snippet>pip install -r</snippet></ROW><ROW><id>5172158</id><snippet>virtualenv /path/to/env --no-site-packages --unzip-setuptools # create virtual environment
source /path/to/env/bin/activate # activate environment
easy_install pip # install pip into environment
source /path/to/env/bin/activate # reload to get access to pip
pip install -r requirements.txt
</snippet></ROW><ROW><id>5172158</id><snippet>requirements.txt</snippet></ROW><ROW><id>5172158</id><snippet>django==1.3
</snippet></ROW><ROW><id>5172158</id><snippet>requirements.txt</snippet></ROW><ROW><id>5172286</id><snippet>&lt;META&gt;</snippet></ROW><ROW><id>5172371</id><snippet>projectId</snippet></ROW><ROW><id>5172371</id><snippet>"projectId"</snippet></ROW><ROW><id>5172371</id><snippet>template.Variable</snippet></ROW><ROW><id>5172371</id><snippet>Node</snippet></ROW><ROW><id>5172371</id><snippet>render</snippet></ROW><ROW><id>5172371</id><snippet>render</snippet></ROW><ROW><id>5172371</id><snippet>simple_tag</snippet></ROW><ROW><id>5172486</id><snippet>&gt;&gt;&gt; repl = r"foo\1bar\2zot"
&gt;&gt;&gt; re.sub(r".*", repl, "frobozz")
Traceback (most recent call last):
[snip]
sre_constants.error: invalid group reference
&gt;&gt;&gt; re.sub(r".*", repl.replace("\\", "\\\\"), "frobozz")
'foo\\1bar\\2zot'
&gt;&gt;&gt; re.sub(r".*", lambda z: repl, "frobozz")
'foo\\1bar\\2zot'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5172493</id><snippet>SELECT e1.file, e1.sourceUrl, e1.rev 
    FROM externals1 AS e1
    LEFT JOIN externals as e0
    ON (e1.file = e0.file)
    AND (e1.rev IS NOT NULL)
</snippet></ROW><ROW><id>5172493</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>5172493</id><snippet>=</snippet></ROW><ROW><id>5172493</id><snippet>NOT (e1.rev = e0.rev)
</snippet></ROW><ROW><id>5172626</id><snippet> ...
 else:
      return delete(tree,node.Child,value) # you missed the return here
 ...
</snippet></ROW><ROW><id>5172708</id><snippet>TM</snippet></ROW><ROW><id>5172708</id><snippet>$ TM="`ls`"
$ echo $TM
file1 file2
</snippet></ROW><ROW><id>5172708</id><snippet>$ TM="\`ls\`" # or TM='`ls`'
$ echo $TM
`ls`
</snippet></ROW><ROW><id>5172808</id><snippet>cPickle.dump()</snippet></ROW><ROW><id>5172808</id><snippet>def markov(L):
   count=0
   c=len(text1)
   for i in range(0,c-2):
       h=L.index(text1[i])
       k=L.index(text1[i+1])
       mat[h,k]=mat[h,k]+1 #matrix


text = [w for g in brown.categories() for w in brown.words(categories=g)]
text1=text[1:500]
arr=set(text1)
arr=list(arr)
mat=lil_matrix((len(arr),len(arr)))
markov(arr)
f = open('spmatrix.pkl','wb')
cPickle.dump(mat,f,-1)
f.close()
</snippet></ROW><ROW><id>5172822</id><snippet>connection = context.idOfZPsycoPGDA()
connection.query('SELECT * FROM your_table')
</snippet></ROW><ROW><id>5172822</id><snippet>\0</snippet></ROW><ROW><id>5172822</id><snippet>connection.query('SELECT * FROM your_table WHERE id=?', ('yourid',))
</snippet></ROW><ROW><id>5172822</id><snippet>c = connection.cursor()
c.query('SELECT * FROM your_table WHERE id=?', ('yourid',))
</snippet></ROW><ROW><id>5172833</id><snippet>Hash</snippet></ROW><ROW><id>5172833</id><snippet>Hash</snippet></ROW><ROW><id>5172850</id><snippet>class C (object):
    def m(self, x):
        return 42

&gt;&gt;&gt; c = C()
&gt;&gt;&gt; map(c.m, [(), (), ()])
[42, 42, 42]
</snippet></ROW><ROW><id>5172850</id><snippet>c</snippet></ROW><ROW><id>5172850</id><snippet>m</snippet></ROW><ROW><id>5172850</id><snippet>TypeError: m() takes exactly 1 argument (2 given)
</snippet></ROW><ROW><id>5172969</id><snippet>main()</snippet></ROW><ROW><id>5172969</id><snippet>application</snippet></ROW><ROW><id>5172969</id><snippet>main()</snippet></ROW><ROW><id>5174274</id><snippet>open()</snippet></ROW><ROW><id>5174274</id><snippet>'U'</snippet></ROW><ROW><id>5174274</id><snippet>'rU'</snippet></ROW><ROW><id>5174274</id><snippet>'U'</snippet></ROW><ROW><id>5174274</id><snippet>'\n'</snippet></ROW><ROW><id>5174274</id><snippet>'\r'</snippet></ROW><ROW><id>5174274</id><snippet>'\r\n'</snippet></ROW><ROW><id>5174274</id><snippet>'\n'</snippet></ROW><ROW><id>5174274</id><snippet>'U'</snippet></ROW><ROW><id>5174274</id><snippet>None</snippet></ROW><ROW><id>5174274</id><snippet>'\n'</snippet></ROW><ROW><id>5174274</id><snippet>'\r'</snippet></ROW><ROW><id>5174274</id><snippet>'\r\n'</snippet></ROW><ROW><id>5174449</id><snippet>xmin, ymin = xmin_list[0], ymin_list[1] # &lt; error comes in this line 
</snippet></ROW><ROW><id>5174449</id><snippet>[1]</snippet></ROW><ROW><id>5174449</id><snippet>if</snippet></ROW><ROW><id>5174449</id><snippet>False</snippet></ROW><ROW><id>5174449</id><snippet>ymin_list</snippet></ROW><ROW><id>5174449</id><snippet>range(len())</snippet></ROW><ROW><id>5174449</id><snippet>xmin = xmin_list[0]
ymin = ymin_list[0]
vmin = f((xmin, ymin))
for x in xmin_list:
    for y in ymin_list:
        v = f((x, y))
        if v &lt; vmin:
            xmin = x
            ymin = y
            vmin = v
</snippet></ROW><ROW><id>5174449</id><snippet>xmin</snippet></ROW><ROW><id>5174449</id><snippet>ymin</snippet></ROW><ROW><id>5175050</id><snippet>email.utils.parseaddr(address)</snippet></ROW><ROW><id>5175050</id><snippet>rfc822</snippet></ROW><ROW><id>5175282</id><snippet>django.db.models.query.QuerySet</snippet></ROW><ROW><id>5175282</id><snippet>get_or_create</snippet></ROW><ROW><id>5175282</id><snippet>request</snippet></ROW><ROW><id>5175282</id><snippet>save</snippet></ROW><ROW><id>5175282</id><snippet>class AccountQuerySet(models.query.QuerySet):
    def get_or_create(...):
        ...
</snippet></ROW><ROW><id>5175282</id><snippet>Account</snippet></ROW><ROW><id>5175282</id><snippet>QuerySet</snippet></ROW><ROW><id>5175282</id><snippet>class AccountManager(models.Manager):
    def get_query_set(self):
        return AccountQuerySet(self.model)
</snippet></ROW><ROW><id>5175282</id><snippet>class Account(models.Model):
    ...
    objects = AccountManager()
</snippet></ROW><ROW><id>5175282</id><snippet>try-except</snippet></ROW><ROW><id>5175339</id><snippet>if request.is_ajax():
     source = request.raw_post_data
     #Save or/and modify your file
else:
    #As usual
</snippet></ROW><ROW><id>5175483</id><snippet>boost::multi_array&lt;double,3&gt; myArray(boost::extents[2][2][2]);
</snippet></ROW><ROW><id>5175483</id><snippet>foo = {0:[1,2,3], 1:[3,4,5]}</snippet></ROW><ROW><id>5175586</id><snippet>hg</snippet></ROW><ROW><id>5175586</id><snippet>mercurial_keyring</snippet></ROW><ROW><id>5175586</id><snippet>keyring</snippet></ROW><ROW><id>5175817</id><snippet>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall
</snippet></ROW><ROW><id>5175817</id><snippet>regedit</snippet></ROW><ROW><id>5176033</id><snippet>cursor.execute("SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED")
</snippet></ROW><ROW><id>5176048</id><snippet>mail.send_mail</snippet></ROW><ROW><id>5176048</id><snippet>.get_value()</snippet></ROW><ROW><id>5176062</id><snippet>matplotlib</snippet></ROW><ROW><id>5176062</id><snippet>loglog</snippet></ROW><ROW><id>5176062</id><snippet>semilogx</snippet></ROW><ROW><id>5176062</id><snippet>semilogy</snippet></ROW><ROW><id>5176177</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print pprint.pprint(sys.path)
# you could just move your scriptname.py to a directory in the sys.path list
&gt;&gt;&gt; sys.path.append(r"C:\Users\You\")
&gt;&gt;&gt; import scriptname
</snippet></ROW><ROW><id>5176188</id><snippet>import Console
import time

c = Console.getconsole()
c.cursor(0)
print 'Hello, world!'
time.sleep(2)
</snippet></ROW><ROW><id>5176241</id><snippet>attrs[testable_name] = lambda self: meth(self, arg)
</snippet></ROW><ROW><id>5176241</id><snippet>attrs[testable_name] = lambda self,meth=meth,arg=arg: meth(self, arg)
</snippet></ROW><ROW><id>5176241</id><snippet>arg</snippet></ROW><ROW><id>5176241</id><snippet>arg</snippet></ROW><ROW><id>5176241</id><snippet>arg</snippet></ROW><ROW><id>5176241</id><snippet>arg</snippet></ROW><ROW><id>5176241</id><snippet>meth</snippet></ROW><ROW><id>5176243</id><snippet>list</snippet></ROW><ROW><id>5176243</id><snippet>print list(itertools.combinations(number, 4))
</snippet></ROW><ROW><id>5176243</id><snippet>itertools.combinations</snippet></ROW><ROW><id>5176243</id><snippet>for</snippet></ROW><ROW><id>5176243</id><snippet>list</snippet></ROW><ROW><id>5176250</id><snippet>import gtk

test_data = [
    { 'column0' : 'test00', 'column1' : 'test01', 'f': '#000000', 'b': '#FF00FF' },
    { 'column0' : 'test10', 'column1' : 'test11', 'f': '#FF0000', 'b': '#C9C9C9' },
    { 'column0' : 'test20', 'column1' : 'test21', 'f': '#00FF00', 'b': '#FF0000' }]

class TestWindow(gtk.Window):
    def __init__(self):
        gtk.Window.__init__(self)

        # create list storage        
        store = gtk.ListStore(str, str, str, str)
        for i in test_data:
            store.append([i['column0'], i['column1'], i['f'], i['b']])
        treeview = gtk.TreeView(store)

        # define columns
        column0 = gtk.TreeViewColumn("Column 0", gtk.CellRendererText(), text=1, foreground=2, background=3)        
        treeview.append_column(column0)            
        column1 = gtk.TreeViewColumn("Column 1", gtk.CellRendererText(), text=1, foreground=2, background=3)        
        treeview.append_column(column1)

        self.connect("destroy", lambda w: gtk.main_quit())
        self.connect("delete_event", lambda w, e: gtk.main_quit())

        self.add(treeview)
        self.show_all()

if __name__ == "__main__":
    TestWindow()
    gtk.main() 
</snippet></ROW><ROW><id>5176398</id><snippet>SerialPort</snippet></ROW><ROW><id>5176398</id><snippet>System.IO.Ports</snippet></ROW><ROW><id>5176398</id><snippet>.Open()</snippet></ROW><ROW><id>5176731</id><snippet>sqla = 'INSERT INTO d.table (column_name) VALUES (?)'
</snippet></ROW><ROW><id>5176820</id><snippet>func</snippet></ROW><ROW><id>5176820</id><snippet>newstate</snippet></ROW><ROW><id>5176820</id><snippet>import argparse

def print_state():
    print "Print state"

def set_state(s):
    print "Setting state to " + s

parser = argparse.ArgumentParser()
parser.add_argument('state', choices = ['ON', 'OFF'], nargs='?')

args = parser.parse_args()

if args.state is None:
    print_state()
elif args.state in ('ON', 'OFF'):
    set_state(args.state)
</snippet></ROW><ROW><id>5176820</id><snippet>parser.add_argument</snippet></ROW><ROW><id>5176820</id><snippet>import argparse
import sys

def print_state(ignored):
    print "Print state"

def set_state(s):
    print "Setting state to " + s

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()
on = subparsers.add_parser('ON', help = 'On help here.')
on.set_defaults(func = set_state, newstate = 'ON')
off = subparsers.add_parser('OFF', help = 'Off help here.')
off.set_defaults(func = set_state, newstate = 'OFF')
prt = subparsers.add_parser('PRINT')
prt.set_defaults(func = print_state, newstate = 'N/A')
force = subparsers.add_parser('FORCE' , help = 'Force help here.')
force.add_argument('newstate', choices = [ 'ON', 'OFF' ])
force.set_defaults(func = set_state)

if (len(sys.argv) &lt; 2):
    args = parser.parse_args(['PRINT'])
else:
    args = parser.parse_args(sys.argv[1:])

args.func(args.newstate)
</snippet></ROW><ROW><id>5176913</id><snippet>parser.add_argument('multi', action='append', nargs='+')
</snippet></ROW><ROW><id>5176913</id><snippet>parser.add_argument('multi', nargs='+')
</snippet></ROW><ROW><id>5176913</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo', action='append')
&gt;&gt;&gt; parser.parse_args('--foo 1 --foo 2'.split())
Namespace(foo=['1', '2'])
</snippet></ROW><ROW><id>5176992</id><snippet>'\n'</snippet></ROW><ROW><id>5176992</id><snippet>f = open('/tmp/x', 'wb+')
</snippet></ROW><ROW><id>5176992</id><snippet>tell()</snippet></ROW><ROW><id>5177005</id><snippet>static PyObject *
listextend(PyListObject *self, PyObject *b)
{
    PyObject *it;      /* iter(v) */
    Py_ssize_t m;                  /* size of self */
    Py_ssize_t n;                  /* guess for size of b */
    Py_ssize_t mn;                 /* m + n */
    Py_ssize_t i;
    PyObject *(*iternext)(PyObject *);

    /* Special cases:
       1) lists and tuples which can use PySequence_Fast ops
       2) extending self to self requires making a copy first
    */
    if (PyList_CheckExact(b) || PyTuple_CheckExact(b) || (PyObject *)self == b) {
        PyObject **src, **dest;
        b = PySequence_Fast(b, "argument must be iterable");
        if (!b)
            return NULL;
        n = PySequence_Fast_GET_SIZE(b);
        if (n == 0) {
            /* short circuit when b is empty */
            Py_DECREF(b);
            Py_RETURN_NONE;
        }
        m = Py_SIZE(self);
        if (list_resize(self, m + n) == -1) {
            Py_DECREF(b);
            return NULL;
        }
        /* note that we may still have self == b here for the
         * situation a.extend(a), but the following code works
         * in that case too.  Just make sure to resize self
         * before calling PySequence_Fast_ITEMS.
         */
        /* populate the end of self with b's items */
        src = PySequence_Fast_ITEMS(b);
        dest = self-&gt;ob_item + m;
        for (i = 0; i &lt; n; i++) {
            PyObject *o = src[i];
            Py_INCREF(o);
            dest[i] = o;
        }
        Py_DECREF(b);
        Py_RETURN_NONE;
    }

    it = PyObject_GetIter(b);
    if (it == NULL)
        return NULL;
    iternext = *it-&gt;ob_type-&gt;tp_iternext;

    /* Guess a result list size. */
    n = _PyObject_LengthHint(b, 8);
    if (n == -1) {
        Py_DECREF(it);
        return NULL;
    }
    m = Py_SIZE(self);
    mn = m + n;
    if (mn &gt;= m) {
        /* Make room. */
        if (list_resize(self, mn) == -1)
            goto error;
        /* Make the list sane again. */
        Py_SIZE(self) = m;
    }
    /* Else m + n overflowed; on the chance that n lied, and there really
     * is enough room, ignore it.  If n was telling the truth, we'll
     * eventually run out of memory during the loop.
     */

    /* Run iterator to exhaustion. */
    for (;;) {
        PyObject *item = iternext(it);
        if (item == NULL) {
            if (PyErr_Occurred()) {
                if (PyErr_ExceptionMatches(PyExc_StopIteration))
                    PyErr_Clear();
                else
                    goto error;
            }
            break;
        }
        if (Py_SIZE(self) &lt; self-&gt;allocated) {
            /* steals ref */
            PyList_SET_ITEM(self, Py_SIZE(self), item);
            ++Py_SIZE(self);
        }
        else {
            int status = app1(self, item);
            Py_DECREF(item);  /* append creates a new ref */
            if (status &lt; 0)
                goto error;
        }
    }

    /* Cut back result list if initial guess was too large. */
    if (Py_SIZE(self) &lt; self-&gt;allocated)
        list_resize(self, Py_SIZE(self));  /* shrinking can't fail */

    Py_DECREF(it);
    Py_RETURN_NONE;

  error:
    Py_DECREF(it);
    return NULL;
}

PyObject *
_PyList_Extend(PyListObject *self, PyObject *b)
{
    return listextend(self, b);
}
</snippet></ROW><ROW><id>5177057</id><snippet>int array1[] = {1, 2, 3, 4};

size_t i = 0;
for (i = 0; i &lt; 4; i++){
    printf("%d ", array1[i]);
}
</snippet></ROW><ROW><id>5177057</id><snippet>sizeof</snippet></ROW><ROW><id>5177057</id><snippet>int array1[] = {1, 2, 3, 4};

int i = 0;
for (i = 0; i &lt; sizeof(array1)/sizeof(int); i++){
    printf("%d ", array1[i]);
}
</snippet></ROW><ROW><id>5177057</id><snippet>size_t</snippet></ROW><ROW><id>5177057</id><snippet>int</snippet></ROW><ROW><id>5177057</id><snippet>sizeof</snippet></ROW><ROW><id>5177335</id><snippet>for i in range(len(col_one)):
    holder = number
    for j in range(4):
        holder.remove(col_one[i][j])
    col_two.append(holder)
</snippet></ROW><ROW><id>5177335</id><snippet>holder = number</snippet></ROW><ROW><id>5177335</id><snippet>number</snippet></ROW><ROW><id>5177335</id><snippet>number</snippet></ROW><ROW><id>5177335</id><snippet>holder</snippet></ROW><ROW><id>5177335</id><snippet>holder</snippet></ROW><ROW><id>5177335</id><snippet>number</snippet></ROW><ROW><id>5177335</id><snippet>for i in range(len(col_one)):
    holder = list(number)
    for j in range(4):
        holder.remove(col_one[i][j])
    col_two.append(holder)
</snippet></ROW><ROW><id>5177335</id><snippet>number</snippet></ROW><ROW><id>5177335</id><snippet>holder</snippet></ROW><ROW><id>5177335</id><snippet>holder</snippet></ROW><ROW><id>5177335</id><snippet>    holder = number[:]
</snippet></ROW><ROW><id>5177335</id><snippet>for</snippet></ROW><ROW><id>5177335</id><snippet>for num_list in col_one:
    holder = list(number)
    for num in num_list:
        holder.remove(num)
    col_two.append(holder)
</snippet></ROW><ROW><id>5177335</id><snippet>for c1_list in col_one:
    c2_list = [n for n in number if n not in c1_list]
    col_two.append(c2_list)
</snippet></ROW><ROW><id>5177335</id><snippet>col_two = [[n for n in number if n not in c1_list] for c1_list in col_one]
</snippet></ROW><ROW><id>5177335</id><snippet>number = [53, 64, 68, 71, 77, 82, 85]
col_one = list(itertools.combinations(number, 4))
col_two = [[n for n in number if n not in c1_list] for c1_list in col_one]
</snippet></ROW><ROW><id>5177342</id><snippet>lists = [
 [u'a', 11, u'P'],
 [u'a', 11, u'A'],
 [u'b', 2, u'P'],
 [u'c', 1, u'P'],
 [u'c', 2, u'P'],
 [u'd', 1, u'P'],
 [u'e', 3, u'P'],
 [u'f', 2, u'P'],
 [u'a', 1, u'P'],
 [u'a', 2, u'P'],
 [u'b', 1, u'P'],
 [u'b', 11, u'P']]

# Each key in this dictionary will be one of the first elements
# from the lists shown above.  The values will be dictionaries
# mapping a letter (one of the third elements in each list) to
# their total count (i.e. the sum of the second elements matching
# the other two columns)
from collections import defaultdict
results = defaultdict(dict)

for main_key, count, subkey in lists:
    d = results[main_key]
    d[subkey] = d.get(subkey,0) + count

for main_key, values in results.items():
    print main_key, "=&gt;", values
</snippet></ROW><ROW><id>5177342</id><snippet>a =&gt; {u'A': 11, u'P': 14}
c =&gt; {u'P': 3}
b =&gt; {u'P': 14}
e =&gt; {u'P': 3}
d =&gt; {u'P': 1}
f =&gt; {u'P': 2}
</snippet></ROW><ROW><id>5177342</id><snippet>setdefault</snippet></ROW><ROW><id>5177342</id><snippet>defaultdict</snippet></ROW><ROW><id>5177342</id><snippet>[[u'a', 11, u'P'], [u'a', 11, u'A']</snippet></ROW><ROW><id>5177342</id><snippet>lists_output = []

for main_key, values in results.items():
    for subkey, count in values.items():
       lists_output.append([main_key,count,subkey])

print lists_output
</snippet></ROW><ROW><id>5177342</id><snippet>[[u'a', 11, u'A'], [u'a', 14, u'P'], [u'c', 3, u'P'], [u'b', 14, u'P'], [u'e', 3, u'P'],
 [u'd', 1, u'P'], [u'f', 2, u'P']]
</snippet></ROW><ROW><id>5177373</id><snippet>a = np.array([[1,2],[2,4]])
np.add.accumulate(a[:,1], out=a[:,1])
</snippet></ROW><ROW><id>5177373</id><snippet>a</snippet></ROW><ROW><id>5177373</id><snippet>array([[1, 2],
       [2, 6]])
</snippet></ROW><ROW><id>5177429</id><snippet>import urllib</snippet></ROW><ROW><id>5177429</id><snippet>import urllib2</snippet></ROW><ROW><id>5177429</id><snippet>import urllib.request
import urllib.response
import urllib.error
</snippet></ROW><ROW><id>5177429</id><snippet>2to3</snippet></ROW><ROW><id>5177467</id><snippet>Timer</snippet></ROW><ROW><id>5177467</id><snippet>threading</snippet></ROW><ROW><id>5177467</id><snippet>from threading import Timer
from time import sleep

def foo():
    print "timer went off!"
t = Timer(4, foo)
t.start()
for i in range(11):
    print i
    sleep(.5)
</snippet></ROW><ROW><id>5177467</id><snippet>Timer</snippet></ROW><ROW><id>5177467</id><snippet>Thread</snippet></ROW><ROW><id>5177467</id><snippet>def call_delay(delay, repetitions, func, *args, **kwargs):             
    for i in range(repetitions):    
        sleep(delay)
        func(*args, *kwargs)
</snippet></ROW><ROW><id>5177467</id><snippet>Event</snippet></ROW><ROW><id>5177584</id><snippet>&gt;&gt;&gt; 'Hello, world!'.encode('hex')
'48656c6c6f2c20776f726c6421'
&gt;&gt;&gt; 'Hello, world!'.encode('base64')
'SGVsbG8sIHdvcmxkIQ==\n'
&gt;&gt;&gt; 'Hello, world!'.encode('zlib')
'x\x9c\xf3H\xcd\xc9\xc9\xd7Q(\xcf/\xcaIQ\x04\x00 ^\x04\x8a'
</snippet></ROW><ROW><id>5177625</id><snippet>unittest</snippet></ROW><ROW><id>5177625</id><snippet>unittest.TestLoader.getTestCaseNames</snippet></ROW><ROW><id>5177625</id><snippet>method.__name__</snippet></ROW><ROW><id>5177625</id><snippet>testable.__name__ == '&lt;lambda&gt;'</snippet></ROW><ROW><id>5177625</id><snippet>        # inject methods: test{testname}_v4,6(self)
        for suffix, arg in (('_false', False), ('_true', True)):
            testable_name = 'test{0}{1}'.format(testname, suffix)
            testable = lambda self, arg=arg: meth(self, arg)
            testable.__name__ = testable_name    # XXX: the fix
            attrs[testable_name] = testable
</snippet></ROW><ROW><id>5177625</id><snippet>(sandbox-2.7)bash-3.2$ nosetests -vv 
test_normal (test_testgen.TestCase) ... ok
test_that_false (test_testgen.TestCase) ... ok
test_that_true (test_testgen.TestCase) ... ok
test_this_false (test_testgen.TestCase) ... ok
test_this_true (test_testgen.TestCase) ... ok

----------------------------------------------------------------------
Ran 5 tests in 0.005s

OK
</snippet></ROW><ROW><id>5177641</id><snippet>A</snippet></ROW><ROW><id>5177641</id><snippet>select_related</snippet></ROW><ROW><id>5177641</id><snippet>from django.db import connection
q = A.objects.filter(NAME__istartswith='z').order_by('ORDER').select_related('b', 'c')
for obj in q:
   obj = obj.b or obj.c or obj
   print repr(obj), obj.__dict__ # (to prove the subclass-specific attributes exist)
print "query count:", len(connection.queries)
</snippet></ROW><ROW><id>5177664</id><snippet>eval</snippet></ROW><ROW><id>5177664</id><snippet>&gt;&gt;&gt; eval("1.0*"*10000+"1.0")
1.0
&gt;&gt;&gt; eval("1.0*"*100000+"1.0")
# segfault here
</snippet></ROW><ROW><id>5177664</id><snippet>eval</snippet></ROW><ROW><id>5177952</id><snippet>u'[^！？。]*[！？。]'
</snippet></ROW><ROW><id>5177952</id><snippet>1.2</snippet></ROW><ROW><id>5177952</id><snippet>Dr. Fleishman</snippet></ROW><ROW><id>5177953</id><snippet>methodList = []
for method in dir(object):  # for every attribute in object
                            # note that methods are considered attributes
    if callable(getattr(object, method)) # is it callable?
        methodList.append(method)
return methodList
</snippet></ROW><ROW><id>5177953</id><snippet>dir()</snippet></ROW><ROW><id>5177953</id><snippet>callable()</snippet></ROW><ROW><id>5177953</id><snippet>getattr()</snippet></ROW><ROW><id>5178294</id><snippet>results = Salespersons.objects.extra(tables=["Store"],
                          where=["""Salespersons.xsin = Store.xsin"""])
</snippet></ROW><ROW><id>5178294</id><snippet>xsin</snippet></ROW><ROW><id>5178569</id><snippet>def move(obj, goal):
    obj.x = ((obj.x - goal.x) * 15.0 / 16) + goal.x
    obj.y = ((obj.y - goal.y) * 15.0 / 16) + goal.y
</snippet></ROW><ROW><id>5178732</id><snippet>import threading
import time
import SimpleHTTPServer
import SocketServer

PORT = 8000
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("", PORT), Handler)

def worker():

    # minimal web server.  serves files relative to the
    print "serving at port", PORT
    httpd.serve_forever()

def my_service():
    time.sleep(3)
    print "I am going down"
    httpd.shutdown()

h = threading.Thread(name='httpd', target=worker)
t = threading.Thread(name='timer', target=my_service)

h.start()
t.start()
</snippet></ROW><ROW><id>5179381</id><snippet>raw_input</snippet></ROW><ROW><id>5179381</id><snippet>input</snippet></ROW><ROW><id>5179381</id><snippet>while True:
    snum = input("Please enter a decimal number:")
    try:
        num = float(snum)
        break
    except ValueError:
        print("This is not a valid decimal number!")
print("This number, rounded to two places, is: {:0.2f}".format(num))
</snippet></ROW><ROW><id>5179619</id><snippet>int i = 1;
printf("%d, %d\n", i++, ++i); // what is printed?
</snippet></ROW><ROW><id>5179619</id><snippet>1, 3</snippet></ROW><ROW><id>5179619</id><snippet>2, 2</snippet></ROW><ROW><id>5179619</id><snippet>1, 3</snippet></ROW><ROW><id>5179619</id><snippet>op1</snippet></ROW><ROW><id>5179619</id><snippet>op2</snippet></ROW><ROW><id>5179619</id><snippet>e1 op1 e2 op2 e3
</snippet></ROW><ROW><id>5179619</id><snippet>((e1 op1 e2) op2 e3)
</snippet></ROW><ROW><id>5179619</id><snippet>(e1 op1 (e2 op2 e3))
</snippet></ROW><ROW><id>5179619</id><snippet>e1</snippet></ROW><ROW><id>5179619</id><snippet>e2</snippet></ROW><ROW><id>5179619</id><snippet>e3</snippet></ROW><ROW><id>5179753</id><snippet>threading.Event()</snippet></ROW><ROW><id>5179753</id><snippet>wait()</snippet></ROW><ROW><id>5179753</id><snippet>time.sleep()</snippet></ROW><ROW><id>5179753</id><snippet>stop_event = threading.Event()
...
stop_event.wait(1.)
if stop_event.isSet():
    return
...
</snippet></ROW><ROW><id>5179753</id><snippet>daemon</snippet></ROW><ROW><id>5179753</id><snippet>True</snippet></ROW><ROW><id>5179753</id><snippet>start()</snippet></ROW><ROW><id>5179753</id><snippet>Timer()</snippet></ROW><ROW><id>5179753</id><snippet>threading.Thread</snippet></ROW><ROW><id>5179794</id><snippet>django-admin.py loadtestdata [options] app.Model:# [app.Model:# ...]
</snippet></ROW><ROW><id>5179900</id><snippet>a=0</snippet></ROW><ROW><id>5179900</id><snippet>b=1</snippet></ROW><ROW><id>5179900</id><snippet>c=2</snippet></ROW><ROW><id>5179900</id><snippet>N</snippet></ROW><ROW><id>5179900</id><snippet>[b, c, d, e, f]</snippet></ROW><ROW><id>5179900</id><snippet>[1, 2, 3, 4, 5]</snippet></ROW><ROW><id>5179900</id><snippet>N[a]</snippet></ROW><ROW><id>5179900</id><snippet>N[0]</snippet></ROW><ROW><id>5179900</id><snippet>a</snippet></ROW><ROW><id>5179900</id><snippet>N[0]</snippet></ROW><ROW><id>5179900</id><snippet>N</snippet></ROW><ROW><id>5179900</id><snippet>[1, 2, 3, 4, 5]</snippet></ROW><ROW><id>5179950</id><snippet>s = "  $100.00 "
f = float(s.strip().lstrip("$"))
</snippet></ROW><ROW><id>5179950</id><snippet>.strip()</snippet></ROW><ROW><id>5179950</id><snippet>.lstrip("$")</snippet></ROW><ROW><id>5180111</id><snippet>dave = next(person for person in a.pList if person.num == 123)
</snippet></ROW><ROW><id>5180111</id><snippet>for person in a.pList:
    if person.num == 123:
        break
else:
    print "Not found."
dave = person
</snippet></ROW><ROW><id>5180218</id><snippet>replace</snippet></ROW><ROW><id>5180218</id><snippet>"10,000.00".replace(",", "")</snippet></ROW><ROW><id>5180234</id><snippet>import sys
sys.path.append("../a")
import main, second
</snippet></ROW><ROW><id>5180234</id><snippet>prog.py</snippet></ROW><ROW><id>5180234</id><snippet>b</snippet></ROW><ROW><id>5180374</id><snippet>import pulp

prob = pulp.LpProblem("example", pulp.LpMinimize)

# Variable represent number of times device i is used
n1 = pulp.LpVariable("n1", 0, 5, cat="Integer")
n2 = pulp.LpVariable("n2", 0, 5, cat="Integer")
n3 = pulp.LpVariable("n3", 0, 5, cat="Integer")
n4 = pulp.LpVariable("n4", 0, 5, cat="Integer")
n5 = pulp.LpVariable("n5", 0, 5, cat="Integer")

# Device params
Device1=[8,8,4,4,200]
Device2=[16,0,16,0,250]
Device3=[8,0,4,4,300]
Device4=[16,8,4,4,300]
Device5=[8,8,2,2,150]

# The objective function that we want to minimize: the total cost
prob += n1 * Device1[-1] + n2 * Device2[-1] + n3 * Device3[-1] + n4 * Device4[-1] + n5 * Device5[-1]

# Constraint that we use no more than 5 devices
prob += n1 + n2 + n3 + n4 + n5 &lt;= 5

Target = [24, 12, 16, 8]

# Constraint that the total I/O for all devices exceeds the target
for i in range(4):
    prob += n1 * Device1[i] + n2 * Device2[i] + n3 * Device3[i] + n4 * Device4[i] + n5 * Device5[i] &gt;= Target[i]

# Actually solve the problem, this calls GLPK so you need it installed
pulp.GLPK().solve(prob)

# Print out the results
for v in prob.variables():
    print v.name, "=", v.varValue
</snippet></ROW><ROW><id>5180405</id><snippet>print ("Total cost is: ${:,.2f}".format(TotalAmount))
</snippet></ROW><ROW><id>5180799</id><snippet>#In which we make contourplots with just one colorbar

import matplotlib.pyplot as plt
import numpy as np

plt.figure(1)
plt.clf()
plt.contourf(np.random.random((10,10)))
plt.colorbar()
for k in xrange(10):
    plt.contourf(np.random.random((10,10)))
plt.show()
</snippet></ROW><ROW><id>5181027</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>5181027</id><snippet>textField</snippet></ROW><ROW><id>5181027</id><snippet>SELECT textField FROM mytable</snippet></ROW><ROW><id>5181027</id><snippet>textField</snippet></ROW><ROW><id>5181027</id><snippet>&lt;option&gt;</snippet></ROW><ROW><id>5181027</id><snippet>&lt;select name="choices" onsubmit="document.forms[0].submit()" &gt;
    &lt;option value=""&gt;Select A Choice&lt;/option&gt;
    &lt;option value="userName"&gt;Name&lt;/option&gt; 
    &lt;option value="designation" &gt;Designation&lt;/option&gt;
    &lt;option value="employeeID" &gt;EmployeeID&lt;/option&gt;
    &lt;option value="project" &gt;Project&lt;/option&gt;
    &lt;option value="dateOfJoin" &gt;Date Of Join&lt;/option&gt; 
&lt;/select&gt;

if request.GET.get('choices'):
    # prevent query on field ''
    EmployeeDetails.objects.filter(**{request.GET.get('choices'): \
          request.GET.get('textField')})
</snippet></ROW><ROW><id>5181085</id><snippet>newline=''</snippet></ROW><ROW><id>5181085</id><snippet>import sys

if sys.version &lt; '3': 
    infile = open(filename, 'rb')
else:
    infile = open(filename, 'r', newline='', encoding='utf8')


with infile as csvfile:
    ...
</snippet></ROW><ROW><id>5181196</id><snippet>jsondata = jsondata[jsondata.index("{"):]
</snippet></ROW><ROW><id>5181579</id><snippet>objWMIService = wmi.GetObject("winmgmts:\root\cimv2") 
</snippet></ROW><ROW><id>5181579</id><snippet>objWMIService = wmi.GetObject(r"winmgmts:\root\cimv2") 
</snippet></ROW><ROW><id>5181579</id><snippet>&lt;CR&gt;</snippet></ROW><ROW><id>5182131</id><snippet>jug</snippet></ROW><ROW><id>5182352</id><snippet>partname</snippet></ROW><ROW><id>5182352</id><snippet>partsize</snippet></ROW><ROW><id>5182352</id><snippet>None</snippet></ROW><ROW><id>5182352</id><snippet>partname = partsize = None

for line in searchfile:

    if partname and partsize:
        break

    if "PART FILE NAME" in line and partname is None:
        x = line
        partname = x[18:-1]

    if "PART SIZE" in line and partsize is None:
        y = line
        partsize = y[18:-1]
</snippet></ROW><ROW><id>5182370</id><snippet>try:
    foo()
except AssertionError, e:
    import inspect
    previous_trace = inspect.trace()[1]
    frame = previous_trace[0]
    print 'value of a, b:', inspect.getargvalues(frame).locals
</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182501</id><snippet>NotImpemented</snippet></ROW><ROW><id>5182501</id><snippet>*</snippet></ROW><ROW><id>5182501</id><snippet>__rmul__()</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182501</id><snippet>print "nom" * 3
print 3 * "nom"
</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182501</id><snippet>__mul()__</snippet></ROW><ROW><id>5182501</id><snippet>NotImplemented</snippet></ROW><ROW><id>5182501</id><snippet>__rmul()__</snippet></ROW><ROW><id>5182501</id><snippet>__rmul()__</snippet></ROW><ROW><id>5182501</id><snippet>str</snippet></ROW><ROW><id>5182501</id><snippet>int</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182501</id><snippet>TypeError</snippet></ROW><ROW><id>5182501</id><snippet>NotImplemented</snippet></ROW><ROW><id>5182501</id><snippet>__rmul__()</snippet></ROW><ROW><id>5182501</id><snippet>Foo() * 'bar'</snippet></ROW><ROW><id>5182501</id><snippet>'bar' * Foo()</snippet></ROW><ROW><id>5182501</id><snippet>__mul__()</snippet></ROW><ROW><id>5182530</id><snippet>from django.utils.safestring import mark_safe
...
return mark_safe('&lt;a href="'+rss1_link+'"&gt;'+rss1_text+'&lt;/a&gt;')
</snippet></ROW><ROW><id>5182530</id><snippet>return mark_safe('&lt;a href="%s"&gt;%s&lt;/a&gt;' % (rss1_link, rss2_text))
</snippet></ROW><ROW><id>5182549</id><snippet>LoadSharedMemory</snippet></ROW><ROW><id>5182549</id><snippet>SomeSharedMemory</snippet></ROW><ROW><id>5182549</id><snippet>LoadSharedMemory</snippet></ROW><ROW><id>5182549</id><snippet>Deferred</snippet></ROW><ROW><id>5182549</id><snippet>def handleRequest(request):
    if SomeSharedMemory is None:
        d = initSharedMemory()
        d.addCallback(lambda ignored: handleRequest(request))
    else:
        d = PickSomething(SomeSharedMemory)
    return d
</snippet></ROW><ROW><id>5182549</id><snippet>initSharedMemory</snippet></ROW><ROW><id>5182549</id><snippet>initSharedMemory</snippet></ROW><ROW><id>5182549</id><snippet>initInProgress = None

def initSharedMemory():
    global initInProgress
    if initInProgress is None:
        initInProgress = _reallyInit()
        def initialized(result):
            global initInProgress, SomeSharedMemory
            initInProgress = None
            SomeSharedMemory = result
        initInProgress.addCallback(initialized)
    d = Deferred()
    initInProgress.chainDeferred(d)
    return d
</snippet></ROW><ROW><id>5182549</id><snippet>from twisted.internet.defer import Deferred, succeed

class SharedResource(object):
    def __init__(self, initializer):
        self._initializer = initializer
        self._value = None
        self._state = "UNINITIALIZED"
        self._waiting = []


    def get(self):
        if self._state == "INITIALIZED":
            # Return the already computed value
            return succeed(self._value)

        # Create a Deferred for the caller to wait on
        d = Deferred()
        self._waiting.append(d)

        if self._state == "UNINITIALIZED":
            # Once, run the setup
            self._initializer().addCallback(self._initialized)
            self._state = "INITIALIZING"

        # Initialized or initializing state here
        return d


     def _initialized(self, value):
         # Save the value, transition to the new state, and tell
         # all the previous callers of get what the result is.
         self._value = value
         self._state = "INITIALIZED"
         waiting, self._waiting = self._waiting, None
         for d in waiting:
             d.callback(value)


SomeSharedMemory = SharedResource(initializeSharedMemory)

def handleRequest(request):
    return SomeSharedMemory.get().addCallback(PickSomething)
</snippet></ROW><ROW><id>5182549</id><snippet>handleRequest</snippet></ROW><ROW><id>5182675</id><snippet># Works
&gt;&gt;&gt; a, (b, c) = [1, [2, 3]]

# Does not work
&gt;&gt;&gt; a, b, c = [1, [2, 3]]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 2 values to unpack
</snippet></ROW><ROW><id>5182675</id><snippet>&gt;&gt;&gt; d = { 'a': 'x', 'b': 'y', 'c': 'z' }
&gt;&gt;&gt; for i, (key, value) in enumerate(d.iteritems()):
...     print (i, key, value)
(0, 'a', 'x')
(1, 'c', 'z')
(2, 'b', 'y')
</snippet></ROW><ROW><id>5182769</id><snippet>pythonCode</snippet></ROW><ROW><id>5182769</id><snippet>tex.vim</snippet></ROW><ROW><id>5182769</id><snippet>include</snippet></ROW><ROW><id>5182769</id><snippet>runtime</snippet></ROW><ROW><id>5182769</id><snippet>tex.vim</snippet></ROW><ROW><id>5182769</id><snippet>@TeX</snippet></ROW><ROW><id>5182769</id><snippet>containedin=@TeX</snippet></ROW><ROW><id>5182769</id><snippet>syntax/rtex.vim</snippet></ROW><ROW><id>5182769</id><snippet>let b:current_syntax = ''
unlet b:current_syntax
runtime! syntax/tex.vim

let b:current_syntax = ''
unlet b:current_syntax
syntax include @TeX syntax/tex.vim

let b:current_syntax = ''
unlet b:current_syntax
syntax include @Python syntax/python.vim
syntax region pythonCode matchgroup=Snip start="\\begin{python}" end="\\end{python}" containedin=@TeX contains=@Python

hi link Snip SpecialComment
let b:current_syntax = 'rtex'
</snippet></ROW><ROW><id>5182769</id><snippet>unlet b:current_syntax</snippet></ROW><ROW><id>5182769</id><snippet>Snip</snippet></ROW><ROW><id>5182769</id><snippet>SpecialComment</snippet></ROW><ROW><id>5182769</id><snippet>\begin{Scode}...\end{Scode}</snippet></ROW><ROW><id>5182801</id><snippet>def f(*args):
    print args
foo = ['foo', 'bar', 'baz']
gen = (f for f in foo)
f(*gen)
</snippet></ROW><ROW><id>5182801</id><snippet>('foo', 'bar', 'baz')
</snippet></ROW><ROW><id>5183278</id><snippet>for k in [w for w in W[a] if w &lt; _]:
    print 1
</snippet></ROW><ROW><id>5183278</id><snippet>if</snippet></ROW><ROW><id>5183278</id><snippet>itertools</snippet></ROW><ROW><id>5183278</id><snippet>for k in itertools.ifilter(lambda x: x &lt; _ ,W[0]):
    print 1
</snippet></ROW><ROW><id>5183278</id><snippet>numpy</snippet></ROW><ROW><id>5183500</id><snippet>^</snippet></ROW><ROW><id>5183500</id><snippet>r'[^.a-zA-Z0-9]'</snippet></ROW><ROW><id>5183592</id><snippet>a = numpy.matrix([[ 0.16666667, 0.66666667, 0.16666667]])
list(numpy.array(a).reshape(-1,))
</snippet></ROW><ROW><id>5183592</id><snippet>numpy.array(a).reshape(-1,).tolist()
</snippet></ROW><ROW><id>5183592</id><snippet>numpy.array(a)[0].tolist()
</snippet></ROW><ROW><id>5184143</id><snippet>some_var</snippet></ROW><ROW><id>5184143</id><snippet>some_var = {}
def some_func():
    # some_var[5] = 6
    some_var = {1:2}
    some_var[3] = 4
some_func()
print (repr(some_var)) # {}
</snippet></ROW><ROW><id>5184143</id><snippet>some_func</snippet></ROW><ROW><id>5184143</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>5184277</id><snippet>__dict__</snippet></ROW><ROW><id>5184277</id><snippet>obj.__getattr__</snippet></ROW><ROW><id>5184277</id><snippet>obj.__setattr__</snippet></ROW><ROW><id>5184303</id><snippet>def getHashValue(fName,Hash):
   f = open(fName,'rb')
   hashvalue = Hash(f.read()).hexdigest
   f.close()
   print(fName + str(Hash) + hashvalue)
</snippet></ROW><ROW><id>5184303</id><snippet>getHashValue(filename, hashlib.md5)
</snippet></ROW><ROW><id>5184303</id><snippet>hashvalue = getattr(hashlib, Hash)(f.read()).hexdigest
</snippet></ROW><ROW><id>5184303</id><snippet>getHashValue(filename, 'md5')
</snippet></ROW><ROW><id>5184499</id><snippet>def funct(objnameOrType):
   dispatcher = {str: getObjByName,
                 type1: getObjByType1,
                 type2: getObjByType2}
   t = type(objnameOrType)
   obj = dispatcher[t](objnameOrType)
   doStuffWithObj(obj)
</snippet></ROW><ROW><id>5184499</id><snippet>type1</snippet></ROW><ROW><id>5184499</id><snippet>type2</snippet></ROW><ROW><id>5184618</id><snippet>for submat in output_im_it:
     submat[:] = np.random.random(patch_size)
</snippet></ROW><ROW><id>5184618</id><snippet>output_im_it.next()</snippet></ROW><ROW><id>5185110</id><snippet>d</snippet></ROW><ROW><id>5185110</id><snippet>globals().update(d)
</snippet></ROW><ROW><id>5185110</id><snippet>locals()</snippet></ROW><ROW><id>5185110</id><snippet>d = {"encoders": 1, "decoders": 2}
t = type("", (), d)
print t.encoders
print t.decoders
</snippet></ROW><ROW><id>5185110</id><snippet>d["decoders"]</snippet></ROW><ROW><id>5185110</id><snippet>exec</snippet></ROW><ROW><id>5185110</id><snippet>d = {"encoders": 1, "decoders": 2}
for k, v in d.iteritems():
    exec k + " = v"
</snippet></ROW><ROW><id>5185331</id><snippet>def sort_with_indexes(data):
    sorted_data = sorted(enumerate(data), key=lambda key: key[1])
    indexes = range(len(data))
    indexes.sort(key=lambda key: sorted_data[key][0])
    return [i[1] for i in sorted_data], indexes

data, indexes = sort_with_indexes([1,3,4,2])
print data, indexes
</snippet></ROW><ROW><id>5185462</id><snippet>TypeError: can't use a string pattern</snippet></ROW><ROW><id>5185462</id><snippet>on a bytes-like object</snippet></ROW><ROW><id>5185462</id><snippet>linkregex = re.compile(b'&lt;a\s*href=[\'|"](.*?)[\'"].*?&gt;')
                       ^
            Add the b there, it makes it into a bytes object
</snippet></ROW><ROW><id>5185462</id><snippet> &gt;&gt;&gt; from disclaimer include dont_use_regexp_on_html
 "Use BeautifulSoup or lxml instead."
</snippet></ROW><ROW><id>5185464</id><snippet># out is your file
out.readline().split() # result is ['francesco', '10']
</snippet></ROW><ROW><id>5185684</id><snippet>from yourapp.models import Album, Song
from django.db.models.signals import pre_delete

def delete_parent(sender, **kwargs):
    # Here you check if there are remaining songs.
    ....

pre_delete.connect(delete_parent, sender=Song)
</snippet></ROW><ROW><id>5185706</id><snippet>__getattribute__</snippet></ROW><ROW><id>5185706</id><snippet>def __getattribute__(self, name):

    import ApplicationInfo
    import thread, traceback

    if ApplicationInfo.main_loop_thread_id != thread.get_ident():
        print "Thread GUI violation"
        traceback.print_stack()

    return object.__getattribute__(self, name)
</snippet></ROW><ROW><id>5185712</id><snippet>threading.RLock</snippet></ROW><ROW><id>5185712</id><snippet>RLock</snippet></ROW><ROW><id>5185712</id><snippet>with</snippet></ROW><ROW><id>5185712</id><snippet>lock = threading.RLock()

def func1():
    with lock:
        func2()

def func2():
    with lock: # this does not block even though the lock is acquired already
        print 'hello world'
</snippet></ROW><ROW><id>5185712</id><snippet>func2</snippet></ROW><ROW><id>5185712</id><snippet>func1</snippet></ROW><ROW><id>5185754</id><snippet>\t</snippet></ROW><ROW><id>5185754</id><snippet>\n</snippet></ROW><ROW><id>5185754</id><snippet>\s</snippet></ROW><ROW><id>5185754</id><snippet>str.split</snippet></ROW><ROW><id>5185754</id><snippet>re.split</snippet></ROW><ROW><id>5185754</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; str = "This\sis a weird\sstring"
&gt;&gt;&gt; str.split("\s")                    # treated literally
['This', 'is a weird', 'string'] 
&gt;&gt;&gt; re.split("\s", str)                # regex
['This\\sis', 'a', 'weird\\sstring']   
</snippet></ROW><ROW><id>5186402</id><snippet>d = open(dest,'w')</snippet></ROW><ROW><id>5186402</id><snippet>d = open(dest,'wb')</snippet></ROW><ROW><id>5186475</id><snippet>soup = BeautifulSoup(your_old_html)
soup.body.insert(0, your_tag)
print soup
</snippet></ROW><ROW><id>5186578</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>5186578</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>5186578</id><snippet>change_view</snippet></ROW><ROW><id>5186578</id><snippet>class BookPrioInline(admin.TabularInline):
    model = BookPrio

class AuthorAdmin(admin.ModelAdmin):
    inlines = (BookPrioInline,)

    def change_view(self, request, object_id, extra_context=None):
          def formfield_for_foreignkey(self, db_field, request, **kwargs):
              if db_field.name == 'book':
                  kwargs['queryset'] = Book.objects.filter(author__id=object_id)
              return super(ItemInline, self).formfield_for_foreignkey(db_field, request, **kwargs)

          ItemInline.formfield_for_foreignkey = formfield_for_foreignkey

          self.inline_instances = [ItemInline(self.model, self.admin_site)]

          return super(AuthorAdmin, self).change_view(request, object_id,
              extra_context=extra_context)


admin.site.register(Author, AuthorAdmin)
</snippet></ROW><ROW><id>5186601</id><snippet>/var/log/syslog</snippet></ROW><ROW><id>5186601</id><snippet>DIAGNOSTICS
       cron requires that each entry in a crontab end in a 
       newline character. If the last entry in a crontab is 
       missing a newline (ie, terminated by  EOF),  cron  will 
       consider the crontab (at least partially) broken. A 
       warning will be written to syslog.
</snippet></ROW><ROW><id>5186601</id><snippet>apt-get install exim4</snippet></ROW><ROW><id>5186601</id><snippet>* * * * * /usr/bin/rsm/samplesMonitor.py 2&gt;&amp;1 &gt;&gt; /tmp/script.log
</snippet></ROW><ROW><id>5186601</id><snippet>/</snippet></ROW><ROW><id>5186601</id><snippet>bash -c "cd THE_WORKING_DIR;/usr/bin/rsm/samplesMonitor.py"
</snippet></ROW><ROW><id>5186698</id><snippet>dict</snippet></ROW><ROW><id>5186698</id><snippet>class NotifyDict(dict):
    __slots__ = ["callback"]
    def __init__(self, callback, *args, **kwargs):
        self.callback = callback
        dict.__init__(self, *args, **kwargs)
    def _wrap(method):
        def wrapper(self, *args, **kwargs):
            result = method(self, *args, **kwargs)
            self.callback()
            return result
        return wrapper
    __delitem__ = _wrap(dict.__delitem__)
    __setitem__ = _wrap(dict.__setitem__)
    clear = _wrap(dict.clear)
    pop = _wrap(dict.pop)
    popitem = _wrap(dict.popitem)
    setdefault = _wrap(dict.setdefault)
    update =  _wrap(dict.update)
</snippet></ROW><ROW><id>5187041</id><snippet>from subprocess import Popen, PIPE

proc = Popen(['/var/www/scripts/resolveId.py', 'arg1', 'arg2'], stdout=PIPE, stderr=PIPE)
stdout, stderr = proc.communicate()
</snippet></ROW><ROW><id>5187097</id><snippet>string_escape</snippet></ROW><ROW><id>5187097</id><snippet>&gt;&gt;&gt; s = r"Escaped\nNewline"
&gt;&gt;&gt; print s
Escaped\nNewline
&gt;&gt;&gt; s.decode('string_escape')
'Escaped\nNewline'
&gt;&gt;&gt; print s.decode('string_escape')
Escaped
Newline
&gt;&gt;&gt; "a\\nb".decode('string_escape')
'a\nb'
</snippet></ROW><ROW><id>5187211</id><snippet>Popen,</snippet></ROW><ROW><id>5187211</id><snippet>cmd.exe</snippet></ROW><ROW><id>5187211</id><snippet>shell=False</snippet></ROW><ROW><id>5187211</id><snippet>Popen()</snippet></ROW><ROW><id>5187211</id><snippet>cmd.exe</snippet></ROW><ROW><id>5187306</id><snippet>import asciimathml
from xml.etree.ElementTree import tostring

tree = asciimathml.parse('sqrt 2')
for elem in tree.getiterator():
    elem.tag = 'm:' + elem.tag

print tostring(tree)
</snippet></ROW><ROW><id>5187306</id><snippet>&lt;m:math&gt;&lt;m:mstyle&gt;&lt;m:msqrt&gt;&lt;m:mn&gt;2&lt;/m:mn&gt;&lt;/m:msqrt&gt;&lt;/m:mstyle&gt;&lt;/m:math&gt;
</snippet></ROW><ROW><id>5187895</id><snippet>cssselect</snippet></ROW><ROW><id>5187895</id><snippet>lxml.html</snippet></ROW><ROW><id>5187895</id><snippet>urlparse</snippet></ROW><ROW><id>5187895</id><snippet>from lxml import html
from urlparse import urlparse
doc = html.fromstring(html_data)
links = doc.cssselect("a")
domains = set([])
for link in links:
    try: href=link.attrib['href']
    except KeyError: continue
    parsed=urlparse(href)
    domains.add(parsed.netloc)
print domains
</snippet></ROW><ROW><id>5187895</id><snippet>fromstring</snippet></ROW><ROW><id>5187895</id><snippet>cssselect</snippet></ROW><ROW><id>5187895</id><snippet>.attrib['href']</snippet></ROW><ROW><id>5187895</id><snippet>except - continue</snippet></ROW><ROW><id>5187895</id><snippet>urlparse</snippet></ROW><ROW><id>5187895</id><snippet>netloc</snippet></ROW><ROW><id>5187895</id><snippet>href</snippet></ROW><ROW><id>5187895</id><snippet>from lxml import html
from urlparse import urlparse
doc = html.fromstring(html_data)
links = doc.cssselect("a[href]")
domains = set([])
for link in links:
    href=link.attrib['href']
    parsed=urlparse(href)
    domains.add(parsed.netloc)
print domains
</snippet></ROW><ROW><id>5187895</id><snippet>try-catch</snippet></ROW><ROW><id>5187895</id><snippet>href</snippet></ROW><ROW><id>5187895</id><snippet>href</snippet></ROW><ROW><id>5187916</id><snippet>text</snippet></ROW><ROW><id>5187916</id><snippet>NavigableString</snippet></ROW><ROW><id>5187916</id><snippet>3</snippet></ROW><ROW><id>5187916</id><snippet>g</snippet></ROW><ROW><id>5187916</id><snippet>b</snippet></ROW><ROW><id>5187916</id><snippet>\.3agb</snippet></ROW><ROW><id>5187916</id><snippet>.3agb</snippet></ROW><ROW><id>5187916</id><snippet>soup.findAll</snippet></ROW><ROW><id>5187916</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>5187916</id><snippet>href</snippet></ROW><ROW><id>5187916</id><snippet>soup.findAll('a', attrs={'href': re.compile(".3gp")})
#or
soup.findAll('a', href=re.compile(".3gp"))
</snippet></ROW><ROW><id>5188405</id><snippet>next()</snippet></ROW><ROW><id>5188405</id><snippet>next()</snippet></ROW><ROW><id>5188405</id><snippet>next()</snippet></ROW><ROW><id>5188456</id><snippet>-fomit-frame-pointer</snippet></ROW><ROW><id>5188512</id><snippet>/proc/sys/fs/nr_open</snippet></ROW><ROW><id>5188512</id><snippet>getrlimit(2)</snippet></ROW><ROW><id>5188512</id><snippet>RLIMIT_NOFILE</snippet></ROW><ROW><id>5188512</id><snippet>getrlimit(2)</snippet></ROW><ROW><id>5188512</id><snippet>RLIMIT_AS</snippet></ROW><ROW><id>5188512</id><snippet>mmap</snippet></ROW><ROW><id>5188512</id><snippet>fork(2)</snippet></ROW><ROW><id>5188512</id><snippet>getrlimit(2)</snippet></ROW><ROW><id>5188512</id><snippet>RLIMIT_NPROC</snippet></ROW><ROW><id>5188616</id><snippet>try:
   Browser.follow_link(text_regex="Next")
except Exception:
   print "No more next button; terminating loop (but not dying mysteriously)"
   break
</snippet></ROW><ROW><id>5188810</id><snippet>edit()</snippet></ROW><ROW><id>5188810</id><snippet>make()</snippet></ROW><ROW><id>5188810</id><snippet>def new():
  make(skip=True)

def edit():
  make()
  # OR: make(skip=False)

def make(skip=False):
  statement 1
  statement 2
  if not skip:
    statement 3

# Previously written invocations of make() don't have to change now
</snippet></ROW><ROW><id>5188909</id><snippet>s</snippet></ROW><ROW><id>5188909</id><snippet>s.find('$')==-1 # not found
s.find('$')!=-1 # found
</snippet></ROW><ROW><id>5188909</id><snippet>pattern = re.compile(r'\d\$,')
if pattern.findall(s):
    print 'Found'
else
    print 'Not found'
</snippet></ROW><ROW><id>5188909</id><snippet>chars = set('0123456789$,')
if any((c in chars) for c in s):
    print 'Found'
else:
    print 'Not Found'
</snippet></ROW><ROW><id>5188957</id><snippet>   &lt;EditorialReviews&gt;
      &lt;EditorialReview&gt;
        &lt;Source&gt;Book Description&lt;/Source&gt;
        &lt;Content&gt;Whether you are a small business or a safety manager trying to decide whether or not awards and incentives are right for your operation, the Safety Incentives Answer Book is must reading.
        &lt;/Content&gt;
      &lt;/EditorialReview&gt;
    &lt;/EditorialReviews&gt;
</snippet></ROW><ROW><id>5189037</id><snippet>#!/usr/bin/env python
import TAP

ok = TAP.Builder.create(3).ok
def hello_world():
    return "Hello, World!"
ok(hello_world() ==  "Hello, World!", "First Test")
ok(hello_world() is  "Hello, World!", "Second Test")
ok(isinstance(hello_world(),str), "Third Test")
</snippet></ROW><ROW><id>5189037</id><snippet>import TAP</snippet></ROW><ROW><id>5189037</id><snippet>ok = TAP.Builder.create(3).ok</snippet></ROW><ROW><id>5189037</id><snippet>==</snippet></ROW><ROW><id>5189037</id><snippet>is</snippet></ROW><ROW><id>5189037</id><snippet>isinstance()</snippet></ROW><ROW><id>5189067</id><snippet>c.close</snippet></ROW><ROW><id>5189067</id><snippet>select_fromTable</snippet></ROW><ROW><id>5189067</id><snippet>c.close()</snippet></ROW><ROW><id>5189067</id><snippet>select_fromTable</snippet></ROW><ROW><id>5189067</id><snippet>def select_fromTable(self):
    c = self.conn.cursor()
    c.execute('select * from sampleTable')
    results = c.fetchall()
    c.close()
    return results
</snippet></ROW><ROW><id>5189074</id><snippet>print(...)</snippet></ROW><ROW><id>5189074</id><snippet>strip(something)</snippet></ROW><ROW><id>5189074</id><snippet>strip(...)
    S.strip([chars]) -&gt; str

    Return a copy of the string S with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
</snippet></ROW><ROW><id>5189074</id><snippet>&gt;&gt;&gt; '   Philando Gullible   '.strip()
'Philando Gullible'
&gt;&gt;&gt; 'aaaXXXbbb'.strip('ab')
'XXX'
</snippet></ROW><ROW><id>5189271</id><snippet>__new__</snippet></ROW><ROW><id>5189271</id><snippet>class MetaClass(type):
    def __new__(cls, clsname, bases, attrs):
        newclass = super(MetaClass, cls).__new__(cls, clsname, bases, attrs)
        register(newclass)  # here is your register function
        return newclass

class MyClass(object):
    __metaclass__ = MetaClass
</snippet></ROW><ROW><id>5189271</id><snippet>MyClass</snippet></ROW><ROW><id>5189271</id><snippet>MetaClass</snippet></ROW><ROW><id>5189271</id><snippet>super(MetaClass, cls)</snippet></ROW><ROW><id>5189271</id><snippet>super()</snippet></ROW><ROW><id>5189271</id><snippet>#Python 3.x

class MyClass(metaclass=MetaClass):
    pass
</snippet></ROW><ROW><id>5189271</id><snippet>cls</snippet></ROW><ROW><id>5189271</id><snippet>super().__new__()</snippet></ROW><ROW><id>5189446</id><snippet>pattern = r'(?&lt;=X)([a-z])X'
</snippet></ROW><ROW><id>5189780</id><snippet>def filter(request):
    val=request.POST.get('designation')      
    val2=request.POST.get('choices')
    val3=request.POST.get('textField')
    print val
    print val2,val3
    if val2=='Designation':

        newData = EmployeeDetails.objects.filter(designation=request.POST.get('textField'))
        print val2
    elif val2=='Name':
        newData = EmployeeDetails.objects.filter(userName=request.POST.get('textField'))
        print val2
    elif val2=='EmployeeID':
        newData = EmployeeDetails.objects.filter(employeeID=request.POST.get('textField'))
        print val2    
    elif val2=='Project':
        newData = EmployeeDetails.objects.filter(project=request.POST.get('textField'))  
        print val2 
    elif val2=='DateOfJoin':
        newData = EmployeeDetails.objects.filter(dateOfJoin=request.POST.get('textField'))  
        print val2
    else:
        print "Data Not Found"       

    return render_to_response('filter.html',{'newData':newData,'val2':val2})
</snippet></ROW><ROW><id>5189940</id><snippet>pair = frozenset([element1, element2])
elem1, elem2 = pair
</snippet></ROW><ROW><id>5190047</id><snippet>.description</snippet></ROW><ROW><id>5190047</id><snippet>       This read-only attribute is a sequence of 7-item
       sequences.  

       Each of these sequences contains information describing
       one result column: 

         (name, 
          type_code, 
          display_size,
          internal_size, 
          precision, 
          scale, 
          null_ok)
</snippet></ROW><ROW><id>5190089</id><snippet>&gt;&gt;&gt;
</snippet></ROW><ROW><id>5190089</id><snippet>&gt;&gt;&gt; def hello():
or
&gt;&gt;&gt; for x in range(10):
</snippet></ROW><ROW><id>5190089</id><snippet>...
</snippet></ROW><ROW><id>5190089</id><snippet>&gt;&gt;&gt; def hello():
...    print "hello"
...
&gt;&gt;&gt; hello()
hello
&gt;&gt;&gt;
&gt;&gt;&gt; for x in range(10):
...     if x % 2:
...         print "%s is odd" % (x,)
...     else:
...         print "%s is even" % (x,)
... 
0 is even
1 is odd
2 is even
3 is odd
4 is even
5 is odd
6 is even
7 is odd
8 is even
9 is odd
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5190089</id><snippet>&gt;&gt;&gt; def hello():\
...     print "hello"\
... \
... \
... \
... 
... 
&gt;&gt;&gt; hello()
hello
&gt;&gt;&gt; hello()\
... \
... \
... 
hello
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5190174</id><snippet>&gt;&gt;&gt; fs = [(lambda y: lambda x: x + y)(i) for i in xrange(10)]
&gt;&gt;&gt; [f(0) for f in fs]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>5190174</id><snippet>i</snippet></ROW><ROW><id>5190174</id><snippet>i</snippet></ROW><ROW><id>5190174</id><snippet>i</snippet></ROW><ROW><id>5190174</id><snippet>y</snippet></ROW><ROW><id>5190207</id><snippet>chars = set('0123456789$,')

while True: # loop "forever"
    UserInputAmount = raw_input() # get input from user

    if any((c in chars) for c in UserInputAmount):
        print 'Input accepted'
        break # exit loop

    else:
        print 'Invalid entry. Please try again'
        # input wasn't valid, go 'round the loop again
</snippet></ROW><ROW><id>5190372</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5190693</id><snippet>lowperf.py</snippet></ROW><ROW><id>5190693</id><snippet># std
import ast
import dis
import sys
from pprint import pprint

# vendor
import byteplay
import greenlet

# bytecode snippet to increment our global opcode counter
INCREMENT = [
    (byteplay.LOAD_GLOBAL, '__op_counter'),
    (byteplay.LOAD_CONST, 1),
    (byteplay.INPLACE_ADD, None),
    (byteplay.STORE_GLOBAL, '__op_counter')
    ]

# bytecode snippet to perform a yield to our watchdog tasklet.
YIELD = [
    (byteplay.LOAD_GLOBAL, '__yield'),
    (byteplay.LOAD_GLOBAL, '__op_counter'),
    (byteplay.CALL_FUNCTION, 1),
    (byteplay.POP_TOP, None)
    ]

def instrument(orig):
    """
    Instrument bytecode.  We place a call to our yield function before
    jumps and returns.  You could choose alternate places depending on 
    your use case.
    """
    line_count = 0
    res = []
    for op, arg in orig.code:
        line_count += 1

        # NOTE: you could put an advanced bytecode filter here.

        # whenever a code block is loaded we must instrument it
        if op == byteplay.LOAD_CONST and isinstance(arg, byteplay.Code):
            code = instrument(arg)
            res.append((op, code))
            continue

        # 'setlineno' opcode is a safe place to increment our global 
        # opcode counter.
        if op == byteplay.SetLineno:
            res += INCREMENT
            line_count += 1

        # append the opcode and its argument
        res.append((op, arg))

        # if we're at a jump or return, or we've processed 10 lines of
        # source code, insert a call to our yield function.  you could 
        # choose other places to yield more appropriate for your app.
        if op in (byteplay.JUMP_ABSOLUTE, byteplay.RETURN_VALUE) \
                or line_count &gt; 10:
            res += YIELD
            line_count = 0

    # finally, build and return new code object
    return byteplay.Code(res, orig.freevars, orig.args, orig.varargs,
        orig.varkwargs, orig.newlocals, orig.name, orig.filename,
        orig.firstlineno, orig.docstring)

def transform(path):
    """
    Transform the Python source into a form safe to execute and return
    the bytecode.
    """
    # NOTE: you could call ast.parse(data, path) here to get an
    # abstract syntax tree, then filter that tree down before compiling
    # it into bytecode.  i've skipped that step as it is pretty verbose.
    data = open(path, 'rb').read()
    suite = compile(data, path, 'exec')
    orig = byteplay.Code.from_code(suite)
    return instrument(orig)

def execute(path, limit = 40):
    """
    This transforms the user's source code into bytecode, instrumenting
    it, then kicks off the watchdog and user script tasklets.
    """
    code = transform(path)
    target = greenlet.greenlet(run_task)

    def watcher_task(op_count):
        """
        Task which is yielded to by the user script, making sure it doesn't
        use too many resources.
        """
        while 1:
            if op_count &gt; limit:
                raise RuntimeError("script used too many resources")
            op_count = target.switch()

    watcher = greenlet.greenlet(watcher_task)
    target.switch(code, watcher.switch)

def run_task(code, yield_func):
    "This is the greenlet task which runs our user's script."
    globals_ = {'__yield': yield_func, '__op_counter': 0}
    eval(code.to_code(), globals_, globals_)

execute(sys.argv[1])
</snippet></ROW><ROW><id>5190693</id><snippet>user.py</snippet></ROW><ROW><id>5190693</id><snippet>def otherfunc(b):
    return b * 7

def myfunc(a):
    for i in range(0, 20):
        print i, otherfunc(i + a + 3)

myfunc(2)
</snippet></ROW><ROW><id>5190693</id><snippet>% python lowperf.py user.py

0 35
1 42
2 49
3 56
4 63
5 70
6 77
7 84
8 91
9 98
10 105
11 112
Traceback (most recent call last):
  File "lowperf.py", line 114, in &lt;module&gt;
    execute(sys.argv[1])
  File "lowperf.py", line 105, in execute
    target.switch(code, watcher.switch)
  File "lowperf.py", line 101, in watcher_task
    raise RuntimeError("script used too many resources")
RuntimeError: script used too many resources
</snippet></ROW><ROW><id>5190811</id><snippet>()</snippet></ROW><ROW><id>5190811</id><snippet>{% for instance in instance_list %}
   {{ instance.key().name() }}
{% endfor %}
</snippet></ROW><ROW><id>5190968</id><snippet>from django.template import Context, Template

def responder():
    yield '' # to make sure the header is sent

    # do all your work

    t = Template('''
        {% extends "base.html" %}
        {% block content %} FOO {% endblock %}
    ''')
    yield t.render(Context({}))

return HttpResponse(responder())
</snippet></ROW><ROW><id>5191033</id><snippet>from facebook import Facebook

api_key = 'Your App API Key'
secret  = 'Your App Secret Key'

session_key = 'your infinite Session key of user'

fb = Facebook(api_key, secret)
fb.session_key = session_key

# now use the fb object for playing around
</snippet></ROW><ROW><id>5191033</id><snippet>def generate_session_from_onetime_code(fb, code):
    fb.auth_token = code
    return fb.auth.getSession()
print generate_session_from_onetime_code(fb, session_onetime_code)
</snippet></ROW><ROW><id>5191091</id><snippet>import urllib2
from keepalive import HTTPHandler
keepalive_handler = HTTPHandler()
opener = urllib2.build_opener(keepalive_handler)
urllib2.install_opener(opener)

fo = urllib2.urlopen('http://www.python.org')
</snippet></ROW><ROW><id>5191224</id><snippet>class ClassPropertyDescriptor(object):

    def __init__(self, fget, fset=None):
        self.fget = fget
        self.fset = fset

    def __get__(self, obj, klass=None):
        if klass is None:
            klass = type(obj)
        return self.fget.__get__(obj, klass)()

    def __set__(self, obj, value):
        if not self.fset:
            raise AttributeError("can't set attribute")
        type_ = type(obj)
        return self.fset.__get__(obj, type_)(value)

    def setter(self, func):
        if not isinstance(func, (classmethod, staticmethod)):
            func = classmethod(func)
        self.fset = func
        return self    

def classproperty(func):
    if not isinstance(func, (classmethod, staticmethod)):
        func = classmethod(func)

    return ClassPropertyDescriptor(func)


class Bar(object):

    _bar = 1

    @classproperty
    def bar(cls):
        return cls._bar

    @bar.setter
    def bar(cls, value):
        cls._bar = value


# test instance instantiation
foo = Bar()
assert foo.bar == 1

baz = Bar()
assert baz.bar == 1

# test static variable
baz.bar = 5
assert foo.bar == 5

# test setting variable on the class
Bar.bar = 50
assert baz.bar == 50
assert foo.bar == 50
</snippet></ROW><ROW><id>5191816</id><snippet>time.daytime</snippet></ROW><ROW><id>5191816</id><snippet>time.timezome</snippet></ROW><ROW><id>5191816</id><snippet>time.altzone</snippet></ROW><ROW><id>5191885</id><snippet>import logging
try:
    1/0
except Exception, e:
    logging.exception(e) # or pass an error message, see comment
</snippet></ROW><ROW><id>5192143</id><snippet>curses.KEY_RESIZE</snippet></ROW><ROW><id>5192143</id><snippet>getch</snippet></ROW><ROW><id>5192269</id><snippet>EditorWindow.py</snippet></ROW><ROW><id>5192269</id><snippet>find / -name EditorWindow.py</snippet></ROW><ROW><id>5192269</id><snippet>cd</snippet></ROW><ROW><id>5192269</id><snippet>patch --dry-run &lt; ~/path/to/issue10401-idle_no_context_menus.txt
</snippet></ROW><ROW><id>5192269</id><snippet>--dry-run</snippet></ROW><ROW><id>5192269</id><snippet>-P2</snippet></ROW><ROW><id>5192269</id><snippet>-P3</snippet></ROW><ROW><id>5192269</id><snippet>-P1</snippet></ROW><ROW><id>5192269</id><snippet>-P&lt;n&gt;</snippet></ROW><ROW><id>5192269</id><snippet>&lt;n&gt;</snippet></ROW><ROW><id>5192269</id><snippet>--dry-run</snippet></ROW><ROW><id>5192925</id><snippet>*args</snippet></ROW><ROW><id>5192925</id><snippet>def x(a, *args): pass
x(1, 2, 3)
</snippet></ROW><ROW><id>5192925</id><snippet>a=1</snippet></ROW><ROW><id>5192925</id><snippet>args=[2,3]</snippet></ROW><ROW><id>5192925</id><snippet>**kwargs</snippet></ROW><ROW><id>5192925</id><snippet>dict</snippet></ROW><ROW><id>5192925</id><snippet>kawrgs</snippet></ROW><ROW><id>5192925</id><snippet>def x(a, **kw): pass
x(1, b=2, c=3)
</snippet></ROW><ROW><id>5192925</id><snippet>a=1</snippet></ROW><ROW><id>5192925</id><snippet>kw={b=2, c=3}</snippet></ROW><ROW><id>5192925</id><snippet>super(Bunch, self).__init__(*args, **kwds)</snippet></ROW><ROW><id>5192925</id><snippet>__init__</snippet></ROW><ROW><id>5192925</id><snippet>Bunch</snippet></ROW><ROW><id>5192925</id><snippet>self</snippet></ROW><ROW><id>5192925</id><snippet>*args, **kwds</snippet></ROW><ROW><id>5192925</id><snippet>super</snippet></ROW><ROW><id>5192925</id><snippet>dict</snippet></ROW><ROW><id>5193006</id><snippet>In [24]: a='dqdwqfwqfggqwq'

In [25]: dict((letter,a.count(letter)) for letter in set(a))
Out[25]: {'d': 2, 'f': 2, 'g': 2, 'q': 5, 'w': 3}
</snippet></ROW><ROW><id>5193097</id><snippet>with open("words.txt") as words:
    wlist=[(ln,word.strip()) for ln,word in enumerate(words,1)]

with open("files.txt") as files:
    flist=[(ln,file.strip()) for ln,file in enumerate(files,1)]

for filenum, filename in flist:
    with open(filename) as fdata:
        for fln,line in enumerate(fdata,1):
            for wln, word in wlist:
                if word in line:
                    print "%d =&gt; %d" % (wln, fln)
</snippet></ROW><ROW><id>5193509</id><snippet>data_files</snippet></ROW><ROW><id>5193509</id><snippet>package_data</snippet></ROW><ROW><id>5193509</id><snippet>site-packages//gloopy-0.1.alpha-py2.7.egg/[data|doc|examples]</snippet></ROW><ROW><id>5193509</id><snippet>data_files</snippet></ROW><ROW><id>5193509</id><snippet>setup.py install</snippet></ROW><ROW><id>5193748</id><snippet>final_data = {}
for entry in data:
    userid = entry["userid"]
    if userid not in final_data:
        final_data[userid] = {"userid": userid, "score": 0} 
    final_data[userid]["score"] += entry["score"]
    if not entry["ctype"] in final_data[userid]:
        final_data[userid][entry["ctype"]] = 1
    else:
        final_data[userid][entry["ctype"]] += 1
</snippet></ROW><ROW><id>5193748</id><snippet>final_data.values()</snippet></ROW><ROW><id>5193847</id><snippet>\n</snippet></ROW><ROW><id>5193847</id><snippet>in</snippet></ROW><ROW><id>5193847</id><snippet>&gt;&gt;&gt; "\n" in "hello\ngoodbye"
True
</snippet></ROW><ROW><id>5193847</id><snippet>if</snippet></ROW><ROW><id>5193847</id><snippet>if "\n" in foo:
    print "There's a newline in variable foo"
</snippet></ROW><ROW><id>5194094</id><snippet>genotype</snippet></ROW><ROW><id>5194094</id><snippet>class SubjectProbeResults(models.Model):
    subject = models.ForeignKey(Subject, related_name='probe_results')
    pg_a_genotypes = models.TextField()
    ..
    pg_n_genotypes = models.TextField()
</snippet></ROW><ROW><id>5194094</id><snippet>from django.db.models import Q

qstring = "%s|%s" % (probe_id, genotype)

subjects = Subject.objects.filter(Q(probe_results__pg_c_genotypes__contains=',%s,' % qstring) | \
                               Q(probe_results__pg_c_genotypes__startswith='%s,' % qstring) | \
                               Q(probe_results__pg_c_genotypes__endswith=',%s' % qstring))
</snippet></ROW><ROW><id>5194094</id><snippet>ProbeGroup</snippet></ROW><ROW><id>5194094</id><snippet>Probe</snippet></ROW><ROW><id>5194094</id><snippet>ProbeGroup</snippet></ROW><ROW><id>5194094</id><snippet>class SubjectProbeResults(models.Model):
    subject = models.ForeignKey(Subject, related_name='probe_results')
    probe_group = models.ForeignKey(ProbeGroup, related_name='probe_results')
    genotypes = models.TextField()
</snippet></ROW><ROW><id>5194094</id><snippet>SubjectProbeResults</snippet></ROW><ROW><id>5194118</id><snippet>svn co http://svn.pythonmac.org/py2app/py2app/trunk py2app
cd py2app
sudo /usr/bin/python setup.py install
ls /Library/Python/2.6/site-packages/py2app-0.5.3-py2.6.egg/py2app/bundletemplate/prebuilt/
main-fat       main-fat3      main-i386      main-intel     main-ppc       main-ppc64     main-universal main-x86_64
</snippet></ROW><ROW><id>5194348</id><snippet>&gt;&gt;&gt; from hurry.filesize import size
&gt;&gt;&gt; size(11000)
'10K'
&gt;&gt;&gt; size(198283722)
'189M'
</snippet></ROW><ROW><id>5194348</id><snippet>&gt;&gt;&gt; from hurry.filesize import size, si
&gt;&gt;&gt; size(11000, system=si)
'11K'
&gt;&gt;&gt; size(198283722, system=si)
'198M'
</snippet></ROW><ROW><id>5194348</id><snippet>&gt;&gt;&gt; from hurry.filesize import size, iec
&gt;&gt;&gt; size(11000, system=iec)
'10Ki'
&gt;&gt;&gt; size(198283722, system=iec)
'189Mi'
</snippet></ROW><ROW><id>5194348</id><snippet>mysystem = [
    (1024 ** 5, ' Megamanys'),
    (1024 ** 4, ' Lotses'),
    (1024 ** 3, ' Tons'), 
    (1024 ** 2, ' Heaps'), 
    (1024 ** 1, ' Bunches'),
    (1024 ** 0, ' Thingies'),
    ]
</snippet></ROW><ROW><id>5194348</id><snippet>&gt;&gt;&gt; from hurry.filesize import size
&gt;&gt;&gt; size(11000, system=mysystem)
'10 Bunches'
&gt;&gt;&gt; size(198283722, system=mysystem)
'189 Heaps'
</snippet></ROW><ROW><id>5194442</id><snippet>import urlparse
str = "payload={'key':'value'}"
print urlparse.parse_qs(str)
</snippet></ROW><ROW><id>5194442</id><snippet>{'payload': ["{'key':'value'}"]}
</snippet></ROW><ROW><id>5194602</id><snippet>paster serve --reload development.ini &amp;
</snippet></ROW><ROW><id>5194618</id><snippet>ssh.close
</snippet></ROW><ROW><id>5194618</id><snippet>ssh.close()
</snippet></ROW><ROW><id>5194909</id><snippet>permutaties = itertools.permutations([nltk.UnigramTagger, nltk.BigramTagger, nltk.TrigramTagger, nltk.DefaultTagger],3)
resultaten = [] 
for element in permutaties:
     resultaten.append(accuracy(element, brown_Train, brown_element))

def accuracy(element, brown_train,brown_element):
     if element is nltk.DeafultTagger:
        evaluator = element("NN")
     else:
        evaluator = element(brown_train, backoff=XXX)  #maybe insert more elif
                    #clauses to retrieve the proper backoff parameter --or you could
                    # usr a tuple in the call to permutations so the apropriate backoff 
                    #is avaliable for each function to be called
     return  evaluator.evaluate(brown_test) # ? I am not shure  from your code if this is your intent
</snippet></ROW><ROW><id>5195096</id><snippet>label = Text(Point(5,9), "hello").draw(win)
</snippet></ROW><ROW><id>5195096</id><snippet>label = Text(Point(5,9), "hello")
label.draw(win)
</snippet></ROW><ROW><id>5195096</id><snippet>Text</snippet></ROW><ROW><id>5195096</id><snippet>draw</snippet></ROW><ROW><id>5195096</id><snippet>label</snippet></ROW><ROW><id>5195096</id><snippet>draw</snippet></ROW><ROW><id>5195096</id><snippet>None</snippet></ROW><ROW><id>5195443</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>5195443</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>5195443</id><snippet>subprocess.call</snippet></ROW><ROW><id>5195443</id><snippet>stdout=PIPE</snippet></ROW><ROW><id>5195443</id><snippet>stderr=PIPE</snippet></ROW><ROW><id>5195443</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>5195443</id><snippet>stdout</snippet></ROW><ROW><id>5195443</id><snippet>stderr</snippet></ROW><ROW><id>5195443</id><snippet>subprocess.call</snippet></ROW><ROW><id>5195443</id><snippet>Popen.communicate</snippet></ROW><ROW><id>5195443</id><snippet># option 1
with open(os.devnull, 'w') as dev_null:
    subprocess.call(['command'], stdout=dev_null, stderr=dev_null)

# option 2
subprocess.call(['command &gt;&amp; /dev/null'], shell=True)
</snippet></ROW><ROW><id>5195552</id><snippet>import optparse

parser = optparse.OptionParser()
parser.add_option("-i","--input",dest="filename")
(options,args) = parser.parse_args()

thefile = options.filename
reader = csv.reader(thefile,"rb")
</snippet></ROW><ROW><id>5195552</id><snippet>python script.py -i foo.dat
python script.py --input foo.dat
</snippet></ROW><ROW><id>5195735</id><snippet>items = (layout.itemAt(i) for i in range(layout.count())) 
for w in items:
   doSomething(w)
</snippet></ROW><ROW><id>5195735</id><snippet>def layout_widgets(layout):
   return (layout.itemAt(i) for i in range(layout.count()))


for w in layout_widgets(layout):
   doSomething(w)
</snippet></ROW><ROW><id>5196280</id><snippet>a/b -&gt; (a+2b)/(a+b)</snippet></ROW><ROW><id>5196280</id><snippet>a= 1, b= 1</snippet></ROW><ROW><id>5196917</id><snippet>with</snippet></ROW><ROW><id>5197426</id><snippet>plt.fill(x,np.sin(x),color='blue',alpha=0.5)
plt.fill(x,np.sin(x),color='None',alpha=0.5,edgecolor='blue',hatch='/')
</snippet></ROW><ROW><id>5197812</id><snippet>except:</snippet></ROW><ROW><id>5197812</id><snippet>LL = [("bad line",456,"N/A"),["good line", 123, 456],]

for line in LL:
    try: 
        if "N/A" in line:
            raise ValueError

        print line[0]

    except ValueError:
        print "skipped"
</snippet></ROW><ROW><id>5197901</id><snippet>np.vectorize</snippet></ROW><ROW><id>5197901</id><snippet>import numpy as np

def func2(x, y):
    return np.where(x&gt;y,x+y,x-y)      

x = np.array([-2, -1, 0, 1, 2])
y = np.array([-2, -1, 0, 1, 2])

xx = x[:, np.newaxis]
yy = y[np.newaxis, :]

print(func2(xx, yy))
# [[ 0 -1 -2 -3 -4]
#  [-3  0 -1 -2 -3]
#  [-2 -1  0 -1 -2]
#  [-1  0  1  0 -1]
#  [ 0  1  2  3  0]]
</snippet></ROW><ROW><id>5197901</id><snippet>import numpy as np

def func2a(x, y):
    return np.where(x&gt;y,x+y,x-y)      

def func2b(x, y):
    ind=x&gt;y
    z=np.empty(ind.shape,dtype=x.dtype)
    z[ind]=(x+y)[ind]
    z[~ind]=(x-y)[~ind]
    return z

def func2c(x, y):
    # x, y= x[:, None], y[None, :]
    A, L= x+ y, x&lt;= y
    A[L]= (x- y)[L]
    return A

N=40
x = np.random.random(N)
y = np.random.random(N)

xx = x[:, np.newaxis]
yy = y[np.newaxis, :]
</snippet></ROW><ROW><id>5197901</id><snippet>% python -mtimeit -s'import test' 'test.func2a(test.xx,test.yy)'
1000 loops, best of 3: 219 usec per loop

% python -mtimeit -s'import test' 'test.func2b(test.xx,test.yy)'
1000 loops, best of 3: 488 usec per loop

% python -mtimeit -s'import test' 'test.func2c(test.xx,test.yy)'
1000 loops, best of 3: 248 usec per loop
</snippet></ROW><ROW><id>5197901</id><snippet>% python -mtimeit -s'import test' 'test.func2a(test.xx,test.yy)'
10 loops, best of 3: 93.7 msec per loop

% python -mtimeit -s'import test' 'test.func2b(test.xx,test.yy)'
10 loops, best of 3: 367 msec per loop

% python -mtimeit -s'import test' 'test.func2c(test.xx,test.yy)'
10 loops, best of 3: 186 msec per loop
</snippet></ROW><ROW><id>5197901</id><snippet>func2a</snippet></ROW><ROW><id>5197901</id><snippet>func2c</snippet></ROW><ROW><id>5197901</id><snippet>func2b</snippet></ROW><ROW><id>5198143</id><snippet>&gt;&gt;&gt; re.sub(r'[^\w]', '', 'MagX\x00\x00\x00\x08\x01\x008\xe6\x7f')
'MagX8'
</snippet></ROW><ROW><id>5198143</id><snippet>[^\w]</snippet></ROW><ROW><id>5198143</id><snippet>re.sub</snippet></ROW><ROW><id>5198143</id><snippet>&gt;&gt;&gt; re.sub(r'[^\x20-\x7e]', '', 'MagX\x00\x00\x00\x08\x01\x008\xe6\x7f')
'MagX8'
</snippet></ROW><ROW><id>5198143</id><snippet>[^\x20-\x7e]</snippet></ROW><ROW><id>5198143</id><snippet>[^ -~]</snippet></ROW><ROW><id>5198143</id><snippet>.*</snippet></ROW><ROW><id>5198143</id><snippet>&gt;&gt;&gt; re.sub(r'[^ -~].*', '', 'MagX\x00\x00\x00\x08\x01\x008\xe6\x7f')
'MagX'
</snippet></ROW><ROW><id>5198177</id><snippet>assert len(A) == len(B) == len(C)
for a, b, c in zip(A, B, C):
    print a, b, c    # replace with file write
</snippet></ROW><ROW><id>5198355</id><snippet>include</snippet></ROW><ROW><id>5198355</id><snippet>include</snippet></ROW><ROW><id>5198355</id><snippet>module</snippet></ROW><ROW><id>5198355</id><snippet>index</snippet></ROW><ROW><id>5198355</id><snippet>urlpatterns = patterns('',
    (r'^Book/$', 'path.to.my.views.index'), # &lt;-- and add a comma here
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>5198355</id><snippet>urlpatterns = patterns('',
    (r'^Book/$', index),
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>5198430</id><snippet>import numpy as np
# w=2948
# h=1536
w=6
h=4
arr=np.arange(w*h).reshape(w,h)
print(arr)
print(arr.shape)
# [[ 0  1  2  3]
#  [ 4  5  6  7]
#  [ 8  9 10 11]
#  [12 13 14 15]
#  [16 17 18 19]
#  [20 21 22 23]]
# (6, 4)
</snippet></ROW><ROW><id>5198430</id><snippet>coords=np.ogrid[0:w,0:h]
idx=(coords[0]+coords[1])%2 == 1
print(idx)
print(idx.shape)
# [[False  True False  True]
#  [ True False  True False]
#  [False  True False  True]
#  [ True False  True False]
#  [False  True False  True]
#  [ True False  True False]]
# (6, 4)
</snippet></ROW><ROW><id>5198430</id><snippet>checkerboard=arr[idx].reshape(w,h//2)
print(checkerboard)
print(checkerboard.shape)
# [[ 1  3]
#  [ 4  6]
#  [ 9 11]
#  [12 14]
#  [17 19]
#  [20 22]]
# (6, 2)
</snippet></ROW><ROW><id>5199173</id><snippet>hg</snippet></ROW><ROW><id>5199173</id><snippet>/usr/local/bin/hg
</snippet></ROW><ROW><id>5199173</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/hg
</snippet></ROW><ROW><id>5199173</id><snippet>pip</snippet></ROW><ROW><id>5199173</id><snippet>/usr/local/bin/hg</snippet></ROW><ROW><id>5199173</id><snippet>/usr/local/bin/hg-2.6</snippet></ROW><ROW><id>5199173</id><snippet>/usr/local/bin/hg</snippet></ROW><ROW><id>5199173</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/hg</snippet></ROW><ROW><id>5199265</id><snippet>python-antlr</snippet></ROW><ROW><id>5199265</id><snippet>stringtemplate3</snippet></ROW><ROW><id>5199265</id><snippet>% sudo aptitude install python-antlr
% virtualenv ~/virt
% . ~/virt/bin/activate
(virt)~% easy_install stringtemplate3
(virt)~% python -c 'import stringtemplate3'
</snippet></ROW><ROW><id>5199265</id><snippet>py26-antlr3</snippet></ROW><ROW><id>5199446</id><snippet>numrec[["col1", "col2"]]
</snippet></ROW><ROW><id>5199446</id><snippet>&gt;&gt;&gt; numrec[["col1", "col2"]].flags["OWNDATA"]
True
</snippet></ROW><ROW><id>5199446</id><snippet>&gt;&gt;&gt; numrec[["col1"]].flags["OWNDATA"]
True
&gt;&gt;&gt; numrec["col1"].flags["OWNDATA"]
False
</snippet></ROW><ROW><id>5199446</id><snippet>&gt;&gt;&gt; id(numrec["col1"].base) == id(numrec)
True
</snippet></ROW><ROW><id>5199648</id><snippet>1 + 2</snippet></ROW><ROW><id>5199648</id><snippet>3</snippet></ROW><ROW><id>5199648</id><snippet>'1' + '2'</snippet></ROW><ROW><id>5199648</id><snippet>'12'</snippet></ROW><ROW><id>5199648</id><snippet>1 + '2'</snippet></ROW><ROW><id>5199648</id><snippet>1 + 2</snippet></ROW><ROW><id>5199648</id><snippet>+</snippet></ROW><ROW><id>5199648</id><snippet>3</snippet></ROW><ROW><id>5199648</id><snippet>'1' + '2'</snippet></ROW><ROW><id>5199648</id><snippet>3</snippet></ROW><ROW><id>5199648</id><snippet>.</snippet></ROW><ROW><id>5199648</id><snippet>1 . 2</snippet></ROW><ROW><id>5199648</id><snippet>'12'</snippet></ROW><ROW><id>5199648</id><snippet>Scalar::Util</snippet></ROW><ROW><id>5199648</id><snippet>looks_like_number</snippet></ROW><ROW><id>5199648</id><snippet>undef</snippet></ROW><ROW><id>5199648</id><snippet>ref</snippet></ROW><ROW><id>5199648</id><snippet>ref(1)         --&gt; ''  (a false value)
ref('string')  --&gt; ''  (a false value)
ref([1, 2, 3]) --&gt; 'ARRAY'
ref({a =&gt; 1})  --&gt; 'HASH'
ref(\1)        --&gt; 'SCALAR'
ref(\\1)       --&gt; 'REF'
ref(sub {})    --&gt; 'CODE'
</snippet></ROW><ROW><id>5199648</id><snippet>bless</snippet></ROW><ROW><id>5199648</id><snippet>ref</snippet></ROW><ROW><id>5199648</id><snippet>{package My::Object;
    sub new {bless {}}
}

my $obj = My::Object-&gt;new;

ref($obj)  --&gt;  'My::Object'
</snippet></ROW><ROW><id>5199751</id><snippet>__type</snippet></ROW><ROW><id>5199751</id><snippet>json.dumps(data, sort_keys=True)</snippet></ROW><ROW><id>5199751</id><snippet>__type</snippet></ROW><ROW><id>5199751</id><snippet>Container</snippet></ROW><ROW><id>5199751</id><snippet>sort_keys</snippet></ROW><ROW><id>5199751</id><snippet>{"Container": {"Model": "El Camino", "TopSpeed": 150, "Wheels": 0, "__type": "Car:#WcfService1"},"WrapperName": "Car Wrapper"}
</snippet></ROW><ROW><id>5199751</id><snippet>{"Container": {"__type": "Car:#WcfService1", "Model": "El Camino", "TopSpeed": 150, "Wheels": 0},"WrapperName": "Car Wrapper"}
</snippet></ROW><ROW><id>5199751</id><snippet>import urllib2, urllib, json

def get_json(url):
    f = urllib2.urlopen(url)
    resp = f.read()
    f.close()
    return json.loads(resp)


def post(url, data):
    headers = {'Content-Type': 'application/json'}
    request = urllib2.Request(url, data, headers)
    f = urllib2.urlopen(request)
    response = f.read()
    f.close()
    return response

geturl = 'http://localhost:24573/Service1.svc/json/GetMessage'
sendurl = 'http://localhost:24573/Service1.svc/json/SendMessage'

msg = get_json(geturl)
print 'Got', msg
print 'Sending...'
retval = post(sendurl, json.dumps(msg))
print 'POST RESPONSE', retval
</snippet></ROW><ROW><id>5200129</id><snippet># self.conn is an instance of IMAP4 connected to my server.
status, msgs = self.conn.select('INBOX')

if status != 'OK':
  return # could be break, or continue, depending on surrounding code.

msgs = int(msgs[0])
</snippet></ROW><ROW><id>5200129</id><snippet>('NO', ['The requested item could not be found.'])
</snippet></ROW><ROW><id>5200129</id><snippet>for email id in items</snippet></ROW><ROW><id>5200129</id><snippet>('OK', ['337'])
</snippet></ROW><ROW><id>5200129</id><snippet>status, msgs = self.conn.select('INBOX')
# returns ('OK', ['336'])

status, ids = self.conn.search(None, 'UNSEEN')
# returns ('OK', ['324 325 326 336'])

if status == 'OK':
  ids = map(int, ids[0].split())
</snippet></ROW><ROW><id>5200182</id><snippet> tuple('-' if x == '' else x for x in tup)
</snippet></ROW><ROW><id>5200849</id><snippet>input()</snippet></ROW><ROW><id>5200849</id><snippet>input()</snippet></ROW><ROW><id>5200849</id><snippet>input()</snippet></ROW><ROW><id>5200849</id><snippet>eval(input(...))</snippet></ROW><ROW><id>5201146</id><snippet>os.isatty</snippet></ROW><ROW><id>5201146</id><snippet>stdout</snippet></ROW><ROW><id>5201146</id><snippet>fileno</snippet></ROW><ROW><id>5201146</id><snippet>sys.stdout</snippet></ROW><ROW><id>5201146</id><snippet>isatty</snippet></ROW><ROW><id>5201146</id><snippet>os</snippet></ROW><ROW><id>5201146</id><snippet>sys.stdout.isatty()</snippet></ROW><ROW><id>5201203</id><snippet>key</snippet></ROW><ROW><id>5201203</id><snippet>L.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>5201357</id><snippet>urlpatterns = patterns('django.views.generic.simple',
    (r'^foo/$',             'direct_to_template', {'template': 'foo_index.html'}),
    (r'^foo/(?P&lt;id&gt;\d+)/$', 'direct_to_template', {'template': 'foo_detail.html'}),
)
</snippet></ROW><ROW><id>5201357</id><snippet>direct_to_template</snippet></ROW><ROW><id>5201357</id><snippet>from django.views.generic import TemplateView

urlpatterns = patterns('',
    (r'^foo/$', TemplateView.as_view(template_name='foo.html')),
)
</snippet></ROW><ROW><id>5201409</id><snippet>connect</snippet></ROW><ROW><id>5201409</id><snippet>while</snippet></ROW><ROW><id>5201536</id><snippet>recvdata = sock.recv(socksize)</snippet></ROW><ROW><id>5201536</id><snippet>127.0.0.1</snippet></ROW><ROW><id>5201842</id><snippet>text = wx.StaticText(panel, -1, 'my text', (20, 100))
font = wx.Font(18, wx.DECORATIVE, wx.ITALIC, wx.NORMAL)
text.SetFont(font)
</snippet></ROW><ROW><id>5201842</id><snippet>wx.Font(pointSize, family, style, weight, underline=False, faceName="", encoding=wx.FONTENCODING_DEFAULT)
</snippet></ROW><ROW><id>5201851</id><snippet>gc.collect()</snippet></ROW><ROW><id>5201851</id><snippet>gc()</snippet></ROW><ROW><id>5201851</id><snippet>top</snippet></ROW><ROW><id>5201851</id><snippet>import gc
import time

import rpy2.robjects as R

for i in range(5):
    print 'pass %d' % i
    R.r('a = matrix(NA, 1000000, 50)')
    gc.collect()
    R.r('rm(a)')
    R.r('gc()')
    gc.collect()

    print 'sleeping..'
    time.sleep(5)
</snippet></ROW><ROW><id>5202006</id><snippet>-hasPrefix:</snippet></ROW><ROW><id>5202006</id><snippet>-hasSuffix:</snippet></ROW><ROW><id>5202006</id><snippet>NSString *s = @"foobar";
NSLog(@"%d %d\n", [s hasPrefix:@"foo"], [s hasSuffix:@"bar"]);
// Output: "1 1"
</snippet></ROW><ROW><id>5202144</id><snippet>[i['x'] for i in a]
</snippet></ROW><ROW><id>5202185</id><snippet>String.prototype.rsplit = function(sep, maxsplit) {
    var split = this.split(sep);
    return maxsplit ? [ split.slice(0, -maxsplit).join(sep) ].concat(split.slice(-maxsplit)) : split;
}
</snippet></ROW><ROW><id>5202318</id><snippet>round</snippet></ROW><ROW><id>5202318</id><snippet>&gt;&gt;&gt; print "%.2f" % (39.54484700000000)
39.54
</snippet></ROW><ROW><id>5202318</id><snippet>&gt;&gt;&gt; print("{:.2f}".format(39.54484700000000))
39.54
</snippet></ROW><ROW><id>5202382</id><snippet>abac</snippet></ROW><ROW><id>5202382</id><snippet>max = 'a' - 1  // character immediately before 'a'

for char in string
  if char &gt; max + 1
    // bad string, stop algorithm
  end

  if char &gt; max
    max = char
  end
end
</snippet></ROW><ROW><id>5202382</id><snippet>e</snippet></ROW><ROW><id>5202382</id><snippet>d</snippet></ROW><ROW><id>5202382</id><snippet>c</snippet></ROW><ROW><id>5202382</id><snippet>b</snippet></ROW><ROW><id>5202382</id><snippet>a</snippet></ROW><ROW><id>5202555</id><snippet>y = x[::-1]</snippet></ROW><ROW><id>5202555</id><snippet>reversed(x)</snippet></ROW><ROW><id>5202555</id><snippet>x</snippet></ROW><ROW><id>5202815</id><snippet>file_new.write('\ufeff')
</snippet></ROW><ROW><id>5203100</id><snippet>tell()</snippet></ROW><ROW><id>5203100</id><snippet>read()</snippet></ROW><ROW><id>5203100</id><snippet>#!/bin/env python

import urllib2
from BeautifulSoup import BeautifulSoup 

def get_page(url):
    fetcher = urllib2.urlopen(url)
    results = fetcher.read()
    fetcher.close()
    return results

def find_tags(data):
    results = list()
    parser = BeautifulSoup(data)
    results.extend(parser.findAll())
    return results

if __name__ == '__main__':
    import sys, time

    for url in sys.argv[1:]:
        html=get_page(url)
        for n, each in enumerate([str(x) for x in find_tags(html)]):
            print n, each, '\n\n\n'
</snippet></ROW><ROW><id>5203130</id><snippet>s = unicode(your_object).encode('utf8')
f.write(s)
</snippet></ROW><ROW><id>5203183</id><snippet>-m</snippet></ROW><ROW><id>5203183</id><snippet>sys.path</snippet></ROW><ROW><id>5203183</id><snippet>proj</snippet></ROW><ROW><id>5203183</id><snippet>python -m proj.tests.foo_test
</snippet></ROW><ROW><id>5203183</id><snippet>__init__.py</snippet></ROW><ROW><id>5203252</id><snippet>&gt;&gt;&gt; [6] + [1,1,0,0,0]
[6, 1, 1, 0, 0, 0]
</snippet></ROW><ROW><id>5203252</id><snippet>&gt;&gt;&gt; [6].append([1,1,0,0,0])
[6, [1,1,0,0,0]]
</snippet></ROW><ROW><id>5203252</id><snippet>None</snippet></ROW><ROW><id>5203252</id><snippet>.append</snippet></ROW><ROW><id>5203252</id><snippet>None</snippet></ROW><ROW><id>5203252</id><snippet>.append</snippet></ROW><ROW><id>5203418</id><snippet>&lt;meta http-equiv="refresh" content="x;url=http://yoururl/"&gt;</snippet></ROW><ROW><id>5203418</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>5203439</id><snippet>print status</snippet></ROW><ROW><id>5203439</id><snippet>print status,</snippet></ROW><ROW><id>5203728</id><snippet>integer</snippet></ROW><ROW><id>5203728</id><snippet>CREATE TABLE items
( id INTEGER PRIMARY KEY
, x  DOUBLE
, y  DOUBLE
);
</snippet></ROW><ROW><id>5203728</id><snippet>curs.execute("INSERT INTO items (X, Y) VALUES (:X, :Y)", {X: X, Y: Y})
</snippet></ROW><ROW><id>5203728</id><snippet>id</snippet></ROW><ROW><id>5203728</id><snippet>:X</snippet></ROW><ROW><id>5203728</id><snippet>:Y</snippet></ROW><ROW><id>5203728</id><snippet>X</snippet></ROW><ROW><id>5203728</id><snippet>Y</snippet></ROW><ROW><id>5203728</id><snippet>execute</snippet></ROW><ROW><id>5204303</id><snippet>after_idle</snippet></ROW><ROW><id>5204303</id><snippet>after</snippet></ROW><ROW><id>5204303</id><snippet>after_cancel</snippet></ROW><ROW><id>5204466</id><snippet>datalist = {}
datalist['startdate'] = startDate
datalist['enddate'] = endDate
</snippet></ROW><ROW><id>5204637</id><snippet>class AgreePrice:
    def __init__(self, connection): ...

class PlaceOrder:
    def __init__(self, connection): ...

class ConfirmAvailability:
    def __init__(self, connection): ...

class BookingService:
    def __init__(self, connection): ...

    def book(self): 
        for Command in (ConfirmAvailability, AgreePrice, PlaceOrder):
            command = Command(self.connection)
            command.run()
            assert command.success()
</snippet></ROW><ROW><id>5204637</id><snippet>SearchScreen</snippet></ROW><ROW><id>5205077</id><snippet>pages.find({"pages.name", "Main"}); //should load all document that contains pages  collection and at least one item in embedded collection with name 'Main'.
</snippet></ROW><ROW><id>5205186</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>5205186</id><snippet>&lt;body&gt;
    &lt;p class="titlestyle"&gt;ANT101H5 Introduction to Biological Anthropology and Archaeology 
        &lt;span class='distribution'&gt;(SCI)&lt;/span&gt;
    &lt;/p&gt;
    &lt;span class='normaltext'&gt; Anthropology is the global and holistic study of human biology and behaviour, and includes four subfields: biological anthropology, archaeology, sociocultural anthropology and linguistics. The material covered is directed to answering the question: What makes us human? This course is a survey of biological anthropology and archaeology. [
        &lt;span class='Helpcourse' onMouseover="showtip(this,event,'24 Lectures')" onMouseout="hidetip()"&gt;24L&lt;/span&gt;, 
        &lt;span class='Helpcourse' onMouseover="showtip(this,event,'12 Tutorials')" onMouseout="hidetip()"&gt;12T&lt;/span&gt;]
        &lt;br/&gt;
        &lt;span class='title2'&gt;Exclusion: &lt;/span&gt;
        &lt;a href='javascript:OpenCourse("WEBCOURSENOTFOUND.html")'&gt;ANT100Y5&lt;/a&gt;
        &lt;br/&gt;
        &lt;span class='title2'&gt;Prerequisite: &lt;/span&gt;
        &lt;a href='javascript:OpenCourse("WEBCOURSEANT102H5.pl?fv=1")'&gt;ANT102H5&lt;/a&gt;
        &lt;br/&gt;
    &lt;/span&gt;
    &lt;br/&gt;
    &lt;br/&gt;
    &lt;br/&gt;
&lt;/body&gt;
</snippet></ROW><ROW><id>5205186</id><snippet>normalize-space(/*/p/text()[1])
</snippet></ROW><ROW><id>5205186</id><snippet>"ANT101H5 Introduction to Biological Anthropology and Archaeology"
</snippet></ROW><ROW><id>5205186</id><snippet>concat((//span[@class='title2'])[1],
            (//span[@class='title2'])[1]
                   /following-sibling::a[1]
            )
</snippet></ROW><ROW><id>5205186</id><snippet>"Exclusion: ANT100Y5"
</snippet></ROW><ROW><id>5205186</id><snippet>concat((//span[@class='title2'])[2],
            (//span[@class='title2'])[2]
                   /following-sibling::a[1]
            )
</snippet></ROW><ROW><id>5205186</id><snippet>"Prerequisite: ANT102H5"
</snippet></ROW><ROW><id>5205186</id><snippet>//</snippet></ROW><ROW><id>5205186</id><snippet>//</snippet></ROW><ROW><id>5205186</id><snippet>/*/p/text()[1]
   |
    (//span[@class='title2'])[1]/text()
   |
    (//span[@class='title2'])[1]/following-sibling::a[1]/text()
   |
    (//span[@class='title2'])[2]/text()
   |
    (//span[@class='title2'])[2]/following-sibling::a[1]/text()
</snippet></ROW><ROW><id>5205186</id><snippet>ANT101H5 Introduction to Biological Anthropology and Archaeology          
        Exclusion: ANT100Y5Prerequisite: ANT102H5
</snippet></ROW><ROW><id>5205186</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;
 &lt;xsl:strip-space elements="*"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:copy-of select=
   "/*/p/text()[1]
   |
    (//span[@class='title2'])[1]/text()
   |
    (//span[@class='title2'])[1]/following-sibling::a[1]/text()
   |
    (//span[@class='title2'])[2]/text()
   |
    (//span[@class='title2'])[2]/following-sibling::a[1]/text()
   "/&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>5205186</id><snippet>ANT101H5 Introduction to Biological Anthropology and Archaeology          
        Exclusion: ANT100Y5Prerequisite: ANT102H5
</snippet></ROW><ROW><id>5205186</id><snippet>  (//p[@class='titlestyle'])[2]/text()[1]
|
  (//span[@class='title2'])[2]/text()
|
  (//span[@class='title2'])[2]/following-sibling::a[1]/text()
|
  (//span[@class='title2'])[3]/text()
|
  (//span[@class='title2'])[3]/following-sibling::a[1]/text()
</snippet></ROW><ROW><id>5205380</id><snippet>class Singleton(object):
    def __new__(cls, *args, **kwargs):
        if '_inst' not in vars(cls): # &lt;-- this must of course also be "_instance"
            cls._instance = super(Singleton, cls).__new__(cls, *args, **kwargs)
        return cls._instance
</snippet></ROW><ROW><id>5205380</id><snippet>__new__</snippet></ROW><ROW><id>5205380</id><snippet>printer()</snippet></ROW><ROW><id>5205380</id><snippet>__new__</snippet></ROW><ROW><id>5205380</id><snippet>'_instance' not in vars(cls)</snippet></ROW><ROW><id>5205380</id><snippet>vars</snippet></ROW><ROW><id>5205380</id><snippet>cls._instance</snippet></ROW><ROW><id>5205380</id><snippet>AttributeError</snippet></ROW><ROW><id>5205380</id><snippet>if __name__ == '__main__':
    printer()
</snippet></ROW><ROW><id>5205380</id><snippet>printer</snippet></ROW><ROW><id>5205380</id><snippet>Singleton.__new__</snippet></ROW><ROW><id>5205380</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>5205562</id><snippet>numpy.bincount(x, weights=None, minlength=None)
</snippet></ROW><ROW><id>5205562</id><snippet>bincount</snippet></ROW><ROW><id>5205562</id><snippet>x</snippet></ROW><ROW><id>5205562</id><snippet> from scipy.sparse import *
 a = np.array([[1,1], [2,2], [4,4]])
 ii = np.array([1, 1, 0])

 ares = a.reshape((-1,),order='F')
 # ares == array([1, 2, 4, 1, 2, 4])

 col = np.tile(ii,(a.shape[1],))
 # col == np.array([1, 1, 0, 1, 1, 0])

 row = np.tile([0,1],(a.shape[0],1)).reshape((-1,),order='F') 
 # row == np.array([0,0,0,1,1,1]) 

 g = coo_matrix((ares,(col,row)),shape=(2,2))
 print g.todense()     
</snippet></ROW><ROW><id>5205562</id><snippet>import numpy as np
from scipy.sparse import *

def method1():
    return np.array([np.bincount(ii, r) for r in a.T]).T

def method2():
    ares = a.reshape((-1,),order='F')
    col = np.tile(ii,(a.shape[1],))
    row = np.tile(np.arange(a.shape[1]),(a.shape[0],1)).reshape((-1,),order='F') 

    return coo_matrix((ares,(col,row)),shape=(np.unique(ii).size,a.shape[1])).todense()

if __name__ == '__main__':
    from timeit import Timer

    a = np.random.randint(0,1000,(1000000,3))
    ii = np.random.randint(0,10,(a.shape[0],))

    N = 100
    t1 = Timer("method1()", "from __main__ import method1")
    t2 = Timer("method2()", "from __main__ import method2")
    print 't2/t1: %f' % (t2.timeit(N)/t1.timeit(N))
</snippet></ROW><ROW><id>5205562</id><snippet>method2</snippet></ROW><ROW><id>5205562</id><snippet>method1</snippet></ROW><ROW><id>5205580</id><snippet>a = [0] * 10
</snippet></ROW><ROW><id>5205580</id><snippet>a = [None] * 10
</snippet></ROW><ROW><id>5205854</id><snippet>twisted.conch.client.default.connect</snippet></ROW><ROW><id>5205854</id><snippet>from twisted.internet.defer import Deferred
from twisted.conch.scripts.cftp import ClientOptions
from twisted.conch.client.connect import connect
from twisted.conch.client.default import SSHUserAuthClient, verifyHostKey

def sftp(user, host, port):
    options = ClientOptions()
    options['host'] = host
    options['port'] = port
    conn = SFTPConnection()
    conn._sftp = Deferred()  
    auth = SSHUserAuthClient(user, options, conn)
    connect(host, port, options, verifyHostKey, auth)
    return conn._sftp
</snippet></ROW><ROW><id>5205854</id><snippet>SFTPConnection</snippet></ROW><ROW><id>5205854</id><snippet>_sftp</snippet></ROW><ROW><id>5205854</id><snippet>ClientOptions</snippet></ROW><ROW><id>5205854</id><snippet>connect</snippet></ROW><ROW><id>5205854</id><snippet>SSHUserAuthClient</snippet></ROW><ROW><id>5205854</id><snippet>~/.ssh</snippet></ROW><ROW><id>5205854</id><snippet>SSHUserAuthClient</snippet></ROW><ROW><id>5205854</id><snippet>getPassword</snippet></ROW><ROW><id>5205854</id><snippet>getPublicKey</snippet></ROW><ROW><id>5205854</id><snippet>getPrivateKey</snippet></ROW><ROW><id>5205854</id><snippet>signData</snippet></ROW><ROW><id>5205854</id><snippet>SFTPConnection</snippet></ROW><ROW><id>5205854</id><snippet>SSHUserAuthClient</snippet></ROW><ROW><id>5205854</id><snippet>SFTPConnection</snippet></ROW><ROW><id>5205854</id><snippet>serviceStarted</snippet></ROW><ROW><id>5205854</id><snippet>SFTPConnection</snippet></ROW><ROW><id>5205854</id><snippet>class SFTPConnection(SSHConnection):
    def serviceStarted(self):
        self.openChannel(SFTPSession())
</snippet></ROW><ROW><id>5205854</id><snippet>SFTPSession</snippet></ROW><ROW><id>5205854</id><snippet>SFTPSession</snippet></ROW><ROW><id>5205854</id><snippet>class SFTPSession(SSHChannel):
    name = 'session'

    def channelOpen(self, whatever):
        d = self.conn.sendRequest(
            self, 'subsystem', NS('sftp'), wantReply=True)
        d.addCallbacks(self._cbSFTP)


    def _cbSFTP(self, result):
        client = FileTransferClient()
        client.makeConnection(self)
        self.dataReceived = client.dataReceived
        self.conn._sftp.callback(client)
</snippet></ROW><ROW><id>5205854</id><snippet>SFTPConnection</snippet></ROW><ROW><id>5205854</id><snippet>channelOpen</snippet></ROW><ROW><id>5205854</id><snippet>channelOpen</snippet></ROW><ROW><id>5205854</id><snippet>Deferred</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>dataReceived</snippet></ROW><ROW><id>5205854</id><snippet>_sftp</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>Deferred</snippet></ROW><ROW><id>5205854</id><snippet>sftp</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>_cbSFTP</snippet></ROW><ROW><id>5205854</id><snippet>sftp</snippet></ROW><ROW><id>5205854</id><snippet>Deferred</snippet></ROW><ROW><id>5205854</id><snippet>def transfer(client):
    d = client.makeDirectory('foobarbaz', {})
    def cbDir(ignored):
        print 'Made directory'
    d.addCallback(cbDir)   
    return d


def main():
    ...
    d = sftp(user, host, port)
    d.addCallback(transfer)
</snippet></ROW><ROW><id>5205854</id><snippet>sftp</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>transfer</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>from sys import stdout

from twisted.python.log import startLogging, err

from twisted.internet import reactor
from twisted.internet.defer import Deferred

from twisted.conch.ssh.common import NS
from twisted.conch.scripts.cftp import ClientOptions
from twisted.conch.ssh.filetransfer import FileTransferClient
from twisted.conch.client.connect import connect
from twisted.conch.client.default import SSHUserAuthClient, verifyHostKey
from twisted.conch.ssh.connection import SSHConnection
from twisted.conch.ssh.channel import SSHChannel


class SFTPSession(SSHChannel):
    name = 'session'

    def channelOpen(self, whatever):
        d = self.conn.sendRequest(
            self, 'subsystem', NS('sftp'), wantReply=True)
        d.addCallbacks(self._cbSFTP)


    def _cbSFTP(self, result):
        client = FileTransferClient()
        client.makeConnection(self)
        self.dataReceived = client.dataReceived
        self.conn._sftp.callback(client)



class SFTPConnection(SSHConnection):
    def serviceStarted(self):
        self.openChannel(SFTPSession())


def sftp(user, host, port):
    options = ClientOptions()
    options['host'] = host
    options['port'] = port
    conn = SFTPConnection()
    conn._sftp = Deferred()
    auth = SSHUserAuthClient(user, options, conn)
    connect(host, port, options, verifyHostKey, auth)
    return conn._sftp


def transfer(client):
    d = client.makeDirectory('foobarbaz', {})
    def cbDir(ignored):
        print 'Made directory'
    d.addCallback(cbDir)
    return d


def main():
    startLogging(stdout)

    user = 'exarkun'
    host = 'localhost'
    port = 22
    d = sftp(user, host, port)
    d.addCallback(transfer)
    d.addErrback(err, "Problem with SFTP transfer")
    d.addCallback(lambda ignored: reactor.stop())
    reactor.run()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5205854</id><snippet>makeDirectory</snippet></ROW><ROW><id>5205854</id><snippet>makeDirectory</snippet></ROW><ROW><id>5205854</id><snippet>Deferred</snippet></ROW><ROW><id>5205854</id><snippet>FileTransferClient</snippet></ROW><ROW><id>5205854</id><snippet>openFile</snippet></ROW><ROW><id>5205854</id><snippet>Deferred</snippet></ROW><ROW><id>5205878</id><snippet>try:
    f = open('foo.txt', 'a')
except IOError:
    print('error')
else:
    with f:
        #
        # some_code
        #
</snippet></ROW><ROW><id>5206005</id><snippet>table</snippet></ROW><ROW><id>5206005</id><snippet>sql = 'SELECT COUNT(*) FROM yourtable WHERE foo IN (?, ?, ?)'
</snippet></ROW><ROW><id>5206005</id><snippet>params = ','.join('?' for x in strings)
sql = 'SELECT COUNT(*) FROM yourtable WHERE foo IN (' + params + ')'
</snippet></ROW><ROW><id>5206011</id><snippet>def digit_match_greater(n):
    digits = str(n)
    variations = []
    # Anything with more than len(digits) digits is a match:
    variations.append(r"\d{%d,}" % (len(digits)+1))
    # Now match numbers with len(digits) digits.
    # (Generate, e.g, for 15, "1[6-9]", "[2-9]\d")
    # 9s can be skipped -- e.g. for &gt;19 we only need [2-9]\d.
    for i, d in enumerate(digits):
        if d != "9": 
            pattern = list(digits)
            pattern[i] = "[%d-9]" % (int(d) + 1)
            for j in range(i+1, len(digits)):
                pattern[j] = r"\d"
            variations.append("".join(pattern))
    return "(?:%s)" % "|".join("(?:%s)" % v for v in variations)
</snippet></ROW><ROW><id>5206011</id><snippet>(?:(?:\d{3,})|(?:[2-9]\d)|(?:1[6-9]))
</snippet></ROW><ROW><id>5206011</id><snippet>\d+</snippet></ROW><ROW><id>5206011</id><snippet>exp = re.compile(r"page%s\.html" % digit_match_greater(last_page_visited))
</snippet></ROW><ROW><id>5206014</id><snippet>from threading import Timer

def delayed(seconds):
    def decorator(f):
        def wrapper(*args, **kargs):
            t = Timer(seconds, f, args, kargs)
            t.start()
        return wrapper
    return decorator

@delayed(1)
def foo():

    print('foo')

foo()
print('dudee')
</snippet></ROW><ROW><id>5206083</id><snippet>add()</snippet></ROW><ROW><id>5206083</id><snippet>class Container(object):
    def __init__(self, parent=None):
        self.children = []
        self.parent = parent
    def add(self, child)
        child.parent = self
        self.children.append(child)
        return child
</snippet></ROW><ROW><id>5206083</id><snippet>parent</snippet></ROW><ROW><id>5206083</id><snippet>class Blog(Container):
    def __init__(self, name, realm=None):
        Container.__init__(realm)
        self.name = name
</snippet></ROW><ROW><id>5206083</id><snippet>realm = Realm("admin", "FDS$#%")
blog = realm.add(Blog("Kittens!"))
post = blog.add(Post("Cute kitten", "Some HTML blah blah"))
</snippet></ROW><ROW><id>5206083</id><snippet>create...()</snippet></ROW><ROW><id>5206083</id><snippet>parent</snippet></ROW><ROW><id>5206083</id><snippet>class Container(object):
    def __init__(self, parent=None):
        self.children = []
        self.parent = None
    def add(self, cls, *args)
        child = cls(self, *args)
        self.children.append(child)
        return child

class Realm(Container):
    def __init__(self, username, password):
        ...

class Blog(Container):
    def __init__(self, realm, name):
        ...

class Post(Container):
    def __init__(self, blog, title, body):
        ...

realm = Realm("admin", "FDS$#%")
blog = realm.add(Blog, "Kittens!")
post = blog.add(Post, "Cute kitten", "Some HTML blah blah")
</snippet></ROW><ROW><id>5206299</id><snippet>.pxd</snippet></ROW><ROW><id>5206299</id><snippet>cimport</snippet></ROW><ROW><id>5206299</id><snippet>import</snippet></ROW><ROW><id>5206299</id><snippet>A</snippet></ROW><ROW><id>5206299</id><snippet>pkg1.mod1</snippet></ROW><ROW><id>5206299</id><snippet>B</snippet></ROW><ROW><id>5206299</id><snippet>pkg2.mod2</snippet></ROW><ROW><id>5206299</id><snippet>A</snippet></ROW><ROW><id>5206299</id><snippet>pkg1/
  mod1.pyx
  mod1.pxd
pkg2/
  mod2.pyx
  mod2.pxd
</snippet></ROW><ROW><id>5206299</id><snippet>pkg1/mod1.pxd</snippet></ROW><ROW><id>5206299</id><snippet>cdef class A:
  cdef int a
  cdef int b
</snippet></ROW><ROW><id>5206299</id><snippet>pkg1/mod1.pyx</snippet></ROW><ROW><id>5206299</id><snippet>pkg2/mod2.pxd</snippet></ROW><ROW><id>5206299</id><snippet>from pkg1.mod1 cimport A  #note "cimport"!!
cdef class B(A):
  cdef ... # your attributes here
</snippet></ROW><ROW><id>5206299</id><snippet>pkg2/mod2.pyx</snippet></ROW><ROW><id>5206299</id><snippet>cimport</snippet></ROW><ROW><id>5206299</id><snippet>from pkg1.mod1 cimport A #note "cimport"!!
cdef class B(A):
  ... # your methods here
</snippet></ROW><ROW><id>5206299</id><snippet>A</snippet></ROW><ROW><id>5206299</id><snippet>mod1.pxd</snippet></ROW><ROW><id>5206477</id><snippet>'python'</snippet></ROW><ROW><id>5206477</id><snippet>&gt;&gt;&gt; s[0:0]
''
</snippet></ROW><ROW><id>5206604</id><snippet>'{"function": "def foo():\\n    print foo"}'
'{"data": "this is my data"}'
</snippet></ROW><ROW><id>5206849</id><snippet>from dns import resolver
</snippet></ROW><ROW><id>5206849</id><snippet>import datetime.datetime
</snippet></ROW><ROW><id>5206849</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>5206946</id><snippet>__getstate__()</snippet></ROW><ROW><id>5206946</id><snippet>class Node(object):
    def __getstate__(self):
        state = self.__dict__.copy()
        state.pop("neighbours")
        return state
</snippet></ROW><ROW><id>5206946</id><snippet>Node</snippet></ROW><ROW><id>5206946</id><snippet>neighbours</snippet></ROW><ROW><id>5206946</id><snippet>__setstate__()</snippet></ROW><ROW><id>5207066</id><snippet>multiprocessing</snippet></ROW><ROW><id>5207066</id><snippet>threading</snippet></ROW><ROW><id>5207066</id><snippet>multiprocessing</snippet></ROW><ROW><id>5207066</id><snippet>Process</snippet></ROW><ROW><id>5207066</id><snippet>start()</snippet></ROW><ROW><id>5207066</id><snippet>threading.Thread</snippet></ROW><ROW><id>5207066</id><snippet>threading.Thread</snippet></ROW><ROW><id>5207066</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>5207066</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>5207066</id><snippet>Process</snippet></ROW><ROW><id>5207066</id><snippet>multiprocessing.Value</snippet></ROW><ROW><id>5207066</id><snippet>self.host</snippet></ROW><ROW><id>5207066</id><snippet>self.timeout</snippet></ROW><ROW><id>5207066</id><snippet>self.port</snippet></ROW><ROW><id>5207066</id><snippet>self.result</snippet></ROW><ROW><id>5207066</id><snippet>ServerInfoGetter</snippet></ROW><ROW><id>5207131</id><snippet>from math import pi, sqrt, radians, cos
Earth_radius_km = 6371.009
km_per_deg_lat = 2 * pi * Earth_radius_km / 360.0

# what your SQL query is in effect doing
def approx_dist_1(lat1, lon1, lat2, lon2):
    return km_per_deg_lat * sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)

# better version    
def approx_dist_2(lat1, lon1, lat2, lon2):
    # calculate km_per_deg_lon for your central station in Python and 
    # embed it in your query
    km_per_deg_lon = km_per_deg_lat * cos(radians(lat1))
    return sqrt((km_per_deg_lat *(lat1 - lat2)) ** 2 + (km_per_deg_lon * (lon1 - lon2)) ** 2)
</snippet></ROW><ROW><id>5207131</id><snippet>(lat - '-41.288889')</snippet></ROW><ROW><id>5207131</id><snippet>sqlite&gt; create table foo (lat float, lon float);
sqlite&gt; insert into foo values(99.9, -170.1);
sqlite&gt; select * from foo;
99.9|-170.1
sqlite&gt; SELECT *, ((lat - '-41.288889') * (lat - '-41.288889')
   ...&gt;  + (lon  - 174.777222) * (lon  - 174.777222)) AS distance from foo;
99.9|-170.1|138874.600631492
sqlite&gt;
</snippet></ROW><ROW><id>5207131</id><snippet>e</snippet></ROW><ROW><id>5207182</id><snippet>"UNICODE STRING".encode('ascii','replace').decode('ascii')
</snippet></ROW><ROW><id>5207182</id><snippet>message.body = "%s %s/%s/%s" % \
     (msgencode('ascii','replace').decode('ascii'),
     hostencode('ascii','replace').decode('ascii'),
     ad.key().id()encode('ascii','replace').decode('ascii'),
     slugify(ad.title)encode('ascii','replace').decode('ascii'))
</snippet></ROW><ROW><id>5207525</id><snippet>import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as (errno, strerror):
    print "I/O error({0}): {1}".format(errno, strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", sys.exc_info()[0]
    raise
</snippet></ROW><ROW><id>5207670</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>5207670</id><snippet>dict</snippet></ROW><ROW><id>5207670</id><snippet>&gt;&gt;&gt; urllib.urlencode([('a','1'), ('b','2'), ('b', '3')])
'a=1&amp;b=2&amp;b=3'
</snippet></ROW><ROW><id>5207670</id><snippet>data = SM_TEMPLATE
headers = {
    'Content-Type': 'application/soap+xml; charset=utf-8'
    }
req = urllib2.Request(site, data, headers)
</snippet></ROW><ROW><id>5207675</id><snippet>./configure --enable-framework MACOSX_DEPLOYMENT_TARGET=10.6 --with-universal-archs=intel --enable-universalsdk=/
make
sudo make install
</snippet></ROW><ROW><id>5207675</id><snippet>from setuptools import setup

APP = ['Game.py']
DATA_FILES = ['data']

OPTIONS = {
    "argv_emulation": False,
    "compressed" : True,
    "optimize":2, 
    "iconfile":'data/game.icns',        
}

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
)
</snippet></ROW><ROW><id>5207675</id><snippet>## Remove previous builds.  Start with clean slate.
rm -rf build dist

## Force python into 32 bit mode.
export VERSIONER_PYTHON_PREFER_32_BIT=yes

## Force build with custom installed python
/Library/Frameworks/Python.framework/Versions/2.6/bin/python setup.py py2app
</snippet></ROW><ROW><id>5207675</id><snippet>sys.path.insert(0, os.path.join(os.getcwd(), 'lib', 'python2.6','lib-dynload')) ## Added to fix dynlib bug
</snippet></ROW><ROW><id>5207675</id><snippet>## Add these two lines...
if not info["version"]:
  info["version"] = "2.6"
## Before this line. (line 941 in method copy_python_framework() at time of writing)
pydir = 'python%s'%(info['version'])
</snippet></ROW><ROW><id>5207675</id><snippet>cd /Library/Frameworks/Python.framework
sudo ln -s Versions/Current/include/ include
sudo ln -s Versions/Current/lib lib
</snippet></ROW><ROW><id>5207703</id><snippet>plt.bar(range(len(x)), x)
</snippet></ROW><ROW><id>5207703</id><snippet>left</snippet></ROW><ROW><id>5207703</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.bar(range(10), range(20, 10, -1))
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>5207876</id><snippet>SystemExit</snippet></ROW><ROW><id>5207876</id><snippet>sys.exit()</snippet></ROW><ROW><id>5207876</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>5207876</id><snippet>SIGINT</snippet></ROW><ROW><id>5207876</id><snippet>try..except</snippet></ROW><ROW><id>5207876</id><snippet>__call__</snippet></ROW><ROW><id>5207876</id><snippet>start</snippet></ROW><ROW><id>5207876</id><snippet>start</snippet></ROW><ROW><id>5207876</id><snippet>spin_message</snippet></ROW><ROW><id>5207876</id><snippet>start</snippet></ROW><ROW><id>5207876</id><snippet>dbproc = MyDatabaseProc()
spinner = Spinner()
spinner.done_message = 'OK'
try:
    spinner.start("Dropping the database", dbproc.drop, "mydb")
    spinner.start("Re-creating the database", dbproc.create, "mydb")
    spinner.start("Inserting data into tables", dbproc.populate)
    ...
except (KeyboardInterrupt, SystemExit):
    # stop the currently executing job
    spinner.stop()
    # do some cleanup if needed..
    dbproc.cleanup()
</snippet></ROW><ROW><id>5207961</id><snippet>[(2, 9), (3, 3)]</snippet></ROW><ROW><id>5207961</id><snippet>[2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]</snippet></ROW><ROW><id>5207961</id><snippet>from itertools import groupby

def multiplicies( factors ):
    """ [x,x,x,,y,y] -&gt; [(x,3), (y,2)] """
    return ((k, sum(1 for _ in group)) for k, group in groupby(factors))

def combinate(facs, cutoff=None):
    facs = tuple(multiplicies(facs))

    results = set()
    def explode(base, expanded):
        # `k` is the key for the caching
        # if the function got called like this before return instantly
        k = (base, expanded)
        if k in results:
            return
        results.add(k)

        # pick a factor
        for (f,m) in base:
            # remove it from the bases
            newb = ((g, (n if g!=f else n-1)) for g,n in base)
            newb = tuple((g,x) for g,x in newb if x &gt; 0)

            # do we cutoff yet?
            if cutoff is None or len(newb) + len(expanded) &lt; cutoff:
                explode(newb, tuple(sorted(expanded + (f,))))

            # multiply the pick with each factor in expanded
            for pos in range(len(expanded)):
                newexp = list(expanded)
                newexp[pos] *= f
                explode(newb, tuple(sorted(newexp)))

    explode(facs, ())
    # turn the `k` (see above) into real factor lists
    return set((tuple((x**y) for x,y in bases) + expanded) 
        for (bases, expanded) in results)

# you dont even need the cutoff here!
combinate([2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3])
# but you need it for 
combinate([2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3,5,7,9,11], 5)
</snippet></ROW><ROW><id>5207996</id><snippet>itertools.izip()</snippet></ROW><ROW><id>5207996</id><snippet>zip()</snippet></ROW><ROW><id>5208129</id><snippet>-1</snippet></ROW><ROW><id>5208129</id><snippet>None</snippet></ROW><ROW><id>5208129</id><snippet>(n-m)</snippet></ROW><ROW><id>5208129</id><snippet>i</snippet></ROW><ROW><id>5208129</id><snippet>x[m+i]</snippet></ROW><ROW><id>5208335</id><snippet>nDll = ctypes.WinDLL('ndll.dll')
nDll.restype = ctypes.c_double
nDll.argtypes = [ctypes.c_char_p]

result = nDll.iptouint("12.345.67.890").value
</snippet></ROW><ROW><id>5208335</id><snippet>def iptoint(ip):
   value = 0
   for component in ip.split("."):
       value &lt;&lt;= 8  #shifts previous value 8 bits to the left, 
                    #leaving space for the next byte
       value |= int(component)  # sets the bits for the new byte in the address
   return value
</snippet></ROW><ROW><id>5208463</id><snippet>with open('filename', 'rb') as infile:
    with open('filename.out', 'wb') as outfile:        
        for j, line in enumerate(infile):
            if j == 0: #skip first line
                continue
            listLine = line.split(' ')
            listLine.insert(3, thingToInsert) #elements 4-6 are now elements 5-7
            listLine = (el for i, el in enumerate(listLine) if i&gt;4 and i&lt;=7) 
            outfile.write(' '.join(listLine))
</snippet></ROW><ROW><id>5208506</id><snippet>from scipy import *
from numpy import *


def rootmethod(f, a, b, tol):


  x = a
  fa = sign(eval(f))

  x = b
  fb = sign(eval(f))

  c = a + b
  iterations = 0

  if fa == 0:
    return a
  if fb == 0:
    return b

  calls = 0         
  fx = 1

  while 1:
    x = (a + b)/2
    fx = eval(f)

    if abs(fx) &lt; tol:
      return x

    # Switch to new points.
    # We have to replace either a or b, whichever one will
    # provide us with a negative 
    old = b # backup variable
    b = (a + b)/2.0

    x = a
    fa = eval(f)

    x = b
    fb = eval(f)

    # If we replace a when we should have replaced b, replace a instead
    if fa*fb &gt; 0:
      b = old
      a = (a + b)/2.0




print rootmethod("(x-1)**3 - 1", 1, 3, 0.01)
</snippet></ROW><ROW><id>5208540</id><snippet>TextCtrl</snippet></ROW><ROW><id>5208540</id><snippet>wx.TE_PROCESS_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>EVT_TEXT_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>wx.EVT_TEXT_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>TextCtrl:Remove()</snippet></ROW><ROW><id>5208540</id><snippet>EmulateKeyPress()</snippet></ROW><ROW><id>5208540</id><snippet>WKX_BACK</snippet></ROW><ROW><id>5208540</id><snippet>wx.KeyEvent</snippet></ROW><ROW><id>5208540</id><snippet>event.m_keyCode</snippet></ROW><ROW><id>5208540</id><snippet>EVT_TEXT_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>CommandEvent</snippet></ROW><ROW><id>5208540</id><snippet>KeyEvent</snippet></ROW><ROW><id>5208540</id><snippet>wx.EVT_TEXT_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>CommandEvent</snippet></ROW><ROW><id>5208540</id><snippet>wx.EVT_TEXT_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>wx.EVT_CHAR</snippet></ROW><ROW><id>5208540</id><snippet>Return</snippet></ROW><ROW><id>5208540</id><snippet>EmulateKeyPress()</snippet></ROW><ROW><id>5208540</id><snippet>wx.TE_PROCESS_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>\n</snippet></ROW><ROW><id>5208540</id><snippet>import wx

class TestRun(wx.Frame):
    def __init__(self,parent):
        wx.Frame.__init__(self, parent, title="StackO Test", size=(400,400))
        self.control = wx.TextCtrl(self, id=wx.ID_ANY, style=wx.TE_MULTILINE)
        self.control.Bind(wx.EVT_CHAR, self.OnPress)

        self.Show(True)

    def OnPress(self, event):
        if event.GetKeyCode() == 13:
            self.control.WriteText('\n&gt;&gt;&gt;')
        else:
            event.Skip()

if __name__ == '__main__':
    app = wx.App(False)
    TestRun(None)
    app.MainLoop()
</snippet></ROW><ROW><id>5208540</id><snippet>event.Skip()</snippet></ROW><ROW><id>5208540</id><snippet>KeyEvent</snippet></ROW><ROW><id>5208540</id><snippet>CharEvent</snippet></ROW><ROW><id>5208540</id><snippet>CharEvent</snippet></ROW><ROW><id>5208540</id><snippet>TextCtrl</snippet></ROW><ROW><id>5208540</id><snippet>KeyEvent</snippet></ROW><ROW><id>5208540</id><snippet>CharEvent</snippet></ROW><ROW><id>5208540</id><snippet>event.skip()</snippet></ROW><ROW><id>5208540</id><snippet>TextCtrl</snippet></ROW><ROW><id>5208540</id><snippet>TextCtrl</snippet></ROW><ROW><id>5208540</id><snippet>wx.TE_PROCESS_ENTER</snippet></ROW><ROW><id>5208540</id><snippet>WriteText()</snippet></ROW><ROW><id>5208814</id><snippet>reduce</snippet></ROW><ROW><id>5208814</id><snippet>value</snippet></ROW><ROW><id>5208814</id><snippet>function(doc) {
    emit(doc.name, doc);
}
</snippet></ROW><ROW><id>5208814</id><snippet>group</snippet></ROW><ROW><id>5208814</id><snippet>function(keys, vals, re) {
    var challenger, winner = null;
    for(var a = 0; a &lt; vals.length; a++) {
        challenger = vals[a];
        if(!winner) {
            // The title is unchallenged. This value is the winner.
            winner = challenger;
        } else {
            // Fight!
            if(winner.name !== challenger.name) {
                // Stop the fight! He's gonna kill him!
                return null; // With a grouping query, this will never happen.
            } else if(winner.timestamp &gt; challenger.timestamp) {
                // The champ wins! (Nothing to do.)
            } else {
                // The challenger wins!
                winner = challenger;
            }
        }
    }

    // Today's champion lives to fight another day.
    return winner;
}
</snippet></ROW><ROW><id>5208814</id><snippet>Date</snippet></ROW><ROW><id>5208814</id><snippet>?group=true</snippet></ROW><ROW><id>5208814</id><snippet>key</snippet></ROW><ROW><id>5208814</id><snippet>emit([doc.name, doc.timestamp], doc)</snippet></ROW><ROW><id>5208814</id><snippet>?reduce=false&amp;startkey=["NAS", null]&amp;endkey=["NAS", {}]</snippet></ROW><ROW><id>5208814</id><snippet>?group_level=1</snippet></ROW><ROW><id>5209308</id><snippet>str.join(iterable)</snippet></ROW><ROW><id>5209308</id><snippet>''.join(parts)</snippet></ROW><ROW><id>5209552</id><snippet>l = ['a1', 'b1', 'c1', 'd1', 'a2', 'b2', 'c2', 'd2']
numbersPerLetter = 2
lsorted = []
for i in range(len(l) / numbersPerLetter):
   lsorted.extend([l[x+i] for x in range(0, len(l), len(l) / numbersPerLetter)])
print(lsorted)
</snippet></ROW><ROW><id>5209552</id><snippet>['a1', 'a2', 'b1', 'b2', 'c1', 'c2', 'd1', 'd2']
</snippet></ROW><ROW><id>5209552</id><snippet>/</snippet></ROW><ROW><id>5209552</id><snippet>//</snippet></ROW><ROW><id>5209698</id><snippet>self.scheduled_call = wx.CallLater(1000, self.tick)</snippet></ROW><ROW><id>5209698</id><snippet>if self.var: wx.CallLater(1000, self.tick)</snippet></ROW><ROW><id>5209759</id><snippet>random.shuffle</snippet></ROW><ROW><id>5209759</id><snippet> random.shuffle(c)
 print(c)
</snippet></ROW><ROW><id>5209759</id><snippet>random.shuffle</snippet></ROW><ROW><id>5209828</id><snippet>haystack</snippet></ROW><ROW><id>5209828</id><snippet>Thumbnail</snippet></ROW><ROW><id>5209828</id><snippet>Thumbnail</snippet></ROW><ROW><id>5210083</id><snippet>import collections

followers_that_friends_follow = collections.defaultdict(list)
for f in friends:
    ff = api.GetFriendsIDs(f)['ids']
    users = followers_not_friends.intersection(ff)
    for user in users:
        followers_that_friends_follow[user].append(f)
</snippet></ROW><ROW><id>5210083</id><snippet>&gt;&gt;&gt; followers_that_friends_follow[23]
[16,28]
</snippet></ROW><ROW><id>5210139</id><snippet>CheckCompatibility</snippet></ROW><ROW><id>5210139</id><snippet>&gt;&gt;&gt; xl.DisplayAlerts = False
</snippet></ROW><ROW><id>5210139</id><snippet>srce.SaveAs(...)</snippet></ROW><ROW><id>5210176</id><snippet>SaveAs(...)</snippet></ROW><ROW><id>5210176</id><snippet>&gt;&gt;&gt; xl.DisplayAlerts = False
</snippet></ROW><ROW><id>5210176</id><snippet>SaveAs()</snippet></ROW><ROW><id>5210553</id><snippet>from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Addres(models.Model):
    content_type = models.ForeignKey(ContentType, related_name='addresses')
    object_id = models.IntegerField()
    content_object = generic.GenericForeignKey( )

    address = models.CharField()
    city = models.ForeignKey(City)

class Client(models.Model):
    addresses = generic.GenericRelation( Addres )
    email = models.EmailField()
    name = models.CharField()
</snippet></ROW><ROW><id>5210553</id><snippet>client = Client.objects.get(pk=123)
addresses = Addres.objects.filter(content_object=client)
</snippet></ROW><ROW><id>5210553</id><snippet>class User(models.Model):
     addresses = generic.GenericRelation( Addres )
     name = models.CharField()
</snippet></ROW><ROW><id>5210684</id><snippet>import re

s = "http://example.com/variable/controller/id32434242423423234?param1=321&amp;param2=4324342"

m = re.search(r'controller/id(\d+)\?',s)
if m:    
    print "Found the id:", m.group(1)
</snippet></ROW><ROW><id>5210684</id><snippet>int(m.group(1))</snippet></ROW><ROW><id>5210790</id><snippet>os.makedirs()</snippet></ROW><ROW><id>5210790</id><snippet>os.makedirs()</snippet></ROW><ROW><id>5210868</id><snippet>self.show_all()</snippet></ROW><ROW><id>5210868</id><snippet>wrap_width</snippet></ROW><ROW><id>5210951</id><snippet>class Joiner(Thread):
    def __init__(self, q):
        self.__q = q
    def run(self):
        while True:
            child = self.__q.get()
            if child == None:
                return
            child.join()
</snippet></ROW><ROW><id>5210951</id><snippet>p.join()</snippet></ROW><ROW><id>5210951</id><snippet>joinq.put(p)</snippet></ROW><ROW><id>5210951</id><snippet>joinq.put(None)</snippet></ROW><ROW><id>5211332</id><snippet>multiprocessing</snippet></ROW><ROW><id>5211332</id><snippet>threading.Timer</snippet></ROW><ROW><id>5211332</id><snippet>threading.Timer(10, aFunc).start()
</snippet></ROW><ROW><id>5211332</id><snippet>Timer</snippet></ROW><ROW><id>5211332</id><snippet>.cancel()</snippet></ROW><ROW><id>5211332</id><snippet>t = threading.Timer(10, runCallback, args=[uniqueId, funcs])
t.start()
timers.append((t, uniqueId))
# do other stuff
# ...
# run callbacks right now
for t, uniqueId in timers:
    t.cancel() # after this the `runCallback()` won't be called by Timer()
               # if it's not been called already
    runCallback(uniqueId, funcs)
</snippet></ROW><ROW><id>5211332</id><snippet>runCallback()</snippet></ROW><ROW><id>5211332</id><snippet>def runCallback(uniqueId, funcs):
    f = funcs.pop(uniqueId, None) # GIL protects this code with some caveats
    if f is not None:
       f()
</snippet></ROW><ROW><id>5211416</id><snippet>def _render(resource, request):
    result = resource.render(request)
    if isinstance(result, str):
        request.write(result)
        request.finish()
        return succeed(None)
    elif result is server.NOT_DONE_YET:
        if request.finished:
            return succeed(None)
        else:
            return request.notifyFinish()
    else:
        raise ValueError("Unexpected return value: %r" % (result,))
</snippet></ROW><ROW><id>5211416</id><snippet>def test_rendering(self):
    slug = "hello_world"
    view = View(slug)
    request = DummyRequest([''])
    d = _render(view, request)
    def rendered(ignored):
        self.assertEquals(request.responseCode, 200)
        self.assertEquals("".join(request.written), "...")
        ...
    d.addCallback(rendered)
    return d
</snippet></ROW><ROW><id>5211469</id><snippet>import collections

Stats = collections.namedtuple("Stats", "speed weight acceleration handling drift offroad turbo")
</snippet></ROW><ROW><id>5211469</id><snippet>driver.weight</snippet></ROW><ROW><id>5211469</id><snippet>__str__</snippet></ROW><ROW><id>5211469</id><snippet>"Stats(speed=73, weight=56, acceleration=21, handling=17, drift=27, offroad=19, turbo=16)"</snippet></ROW><ROW><id>5211469</id><snippet>def add_stats(xs, ys):
    return Stats(*[(x+y) for (x,y) in zip(xs,ys)])
</snippet></ROW><ROW><id>5211469</id><snippet>[blah for blah in blah]</snippet></ROW><ROW><id>5211469</id><snippet>class ThingWithStats(object):
    def __init__(self, name, stats):
        self.name = name
        self.stats = Stats(*stats)
    def __str__(self):
        return self.name + " (" + str(self.stats) + ")"

class Driver(ThingWithStats):
    pass

class Vehicle(ThingWithStats):
    pass

class Combination(ThingWithStats):
    def __init__(self, driver, vehicle):
        self.name = driver.name + " riding " + vehicle.name
        self.stats = add_stats(driver.stats, vehicle.stats)
</snippet></ROW><ROW><id>5211469</id><snippet>stats</snippet></ROW><ROW><id>5211469</id><snippet>*</snippet></ROW><ROW><id>5211469</id><snippet>Stats</snippet></ROW><ROW><id>5211469</id><snippet>def make_combinations(drivers, vehicles):
    return [
        Combination(driver, vehicle)
        for driver in drivers
        for vehicle in vehicles]
</snippet></ROW><ROW><id>5211469</id><snippet>stats</snippet></ROW><ROW><id>5211469</id><snippet>Stats</snippet></ROW><ROW><id>5211469</id><snippet>medium_drivers = [
    Driver("Mario",        (0, 6, 2, 2, 3, 0, 0)),
    Driver("Luigi",        (2, 6, 0, 0, 0, 0, 0)),
    Driver("Peach",        (2, 0, 5, 0, 6, 0, 0)),
    Driver("Daisy",        (4, 0, 0, 2, 0, 0, 3)),
    Driver("Yoshi",        (0, 3, 0, 0, 3, 5, 0)),
    Driver("Birdo",        (0, 3, 0, 0, 0, 3, 5)),
    Driver("Diddy Kong",   (0, 0, 3, 0, 3, 0, 5)),
    Driver("Bowser Jr.",   (0, 0, 0, 0, 0, 3, 3)),
    Driver("Medium Mii",   (3, 3, 0, 0, 0, 3, 3)),
    ]

small_drivers = [
    Driver("Baby Mario",   (0, 8, 0, 6, 0, 0, 0)),
    Driver("Baby Luigi",   (5, 8, 0, 0, 0, 0, 0)),
    Driver("Baby Peach",   (3, 6, 3, 3, 0, 0, 0)),
    Driver("Baby Daisy",   (5, 6, 0, 0, 0, 0, 3)),
    Driver("Toad",         (0, 0, 6, 0, 6, 0, 0)),
    Driver("Toadette",     (3, 0, 0, 0, 0, 6, 0)),
    Driver("Koopa Troopa", (0, 0, 0, 3, 0, 0, 6)),
    Driver("Dry Bones",    (0, 0, 3, 0, 3, 0, 6)),
    Driver("Small Mii",    (3, 3, 0, 0, 3, 0, 3)),
    ]

large_drivers = [
    Driver("Wario",        (0, 3, 0, 0, 0, 3, 6)),
    Driver("Waluigi",      (0, 0, 6, 0, 5, 3, 0)),
    Driver("Donkey Kong",  (0, 3, 2, 2, 0, 0, 3)),
    Driver("Bowser",       (2, 5, 0, 0, 3, 0, 0)),
    Driver("King Boo",     (0, 0, 0, 5, 0, 3, 0)),
    Driver("Rosalina",     (3, 0, 0, 3, 0, 0, 3)),
    Driver("Funky Kong",   (4, 0, 0, 0, 0, 3, 0)),
    Driver("Dry Bowser",   (0, 0, 0, 0, 0, 6, 6)),
    Driver("Large Mii",    (3, 0, 3, 3, 3, 0, 3)),
    ]

small_vehicles = [
    Vehicle("Standard Kart S",             (41, 29, 48, 48, 51, 40, 45)),
    Vehicle("Baby Booster / Booster Seat", (27, 27, 56, 64, 37, 54, 59)),
    Vehicle("Concerto / Mini Beast",       (55, 32, 29, 32, 64, 27, 64)),
    Vehicle("Cheep Charger",               (34, 24, 64, 56, 59, 45, 54)),
    Vehicle("Rally Romper / Tiny Titan",   (46, 35, 43, 43, 29, 64, 40)),
    Vehicle("Blue Falcon",                 (60, 29, 35, 29, 43, 24, 29)),

    Vehicle("Standard Bike S",             (39, 21, 51, 51, 54, 43, 48)),
    Vehicle("Bullet Bike",                 (53, 24, 32, 35, 67, 29, 67)),
    Vehicle("Nano Bike / Bit Bike",        (25, 18, 59, 67, 40, 56, 62)),
    Vehicle("Quacker",                     (32, 17, 67, 60, 62, 48, 57)),
    Vehicle("Magikruiser",                 (43, 24, 45, 45, 32, 67, 43)),
    Vehicle("Bubble Bike / Jet Bubble",    (48, 27, 40, 40, 45, 35, 37)),
    ]

medium_vehicles = [
    Vehicle("Standard Kart M",                (46, 45, 40, 43, 45, 35, 40)),
    Vehicle("Nostalgia 1 / Classic Dragster", (37, 43, 59, 54, 54, 40, 51)),
    Vehicle("Wild Wing",                      (57, 51, 21, 29, 59, 24, 59)),
    Vehicle("Turbo Blooper / Super Blooper",  (50, 40, 35, 37, 21, 54, 35)),
    Vehicle("Royal Racer / Daytripper",       (34, 45, 51, 59, 32, 48, 54)),
    Vehicle("B Dasher Mk. 2 / Sprinter",      (64, 48, 27, 24, 37, 21, 24)),

    Vehicle("Standard Bike M",                (43, 37, 43, 45, 48, 37, 43)),
    Vehicle("Mach Bike",                      (55, 37, 24, 32, 62, 27, 62)),
    Vehicle("Bon Bon / Sugarscoot",           (32, 32, 54, 62, 35, 51, 56)),
    Vehicle("Rapide / Zip Zip",               (41, 35, 45, 51, 29, 62, 45)),
    Vehicle("Nitrocycle / Sneakster",         (62, 40, 29, 27, 40, 24, 27)),
    Vehicle("Dolphin Dasher",                 (48, 43, 37, 40, 24, 56, 37)),
    ]

large_vehicles = [
    Vehicle("Standard Kart L",              (48, 59, 37, 40, 40, 35, 35)),
    Vehicle("Offroader",                    (39, 64, 48, 54, 18, 43, 45)),
    Vehicle("Flame Flyer",                  (62, 59, 16, 21, 48, 18, 48)),
    Vehicle("Piranha Prowler",              (55, 67, 29, 35, 35, 29, 27)),
    Vehicle("Aero Glider / Jetsetter",      (69, 56, 21, 17, 27, 16, 16)),
    Vehicle("Dragonetti / Honeycoupe",      (53, 62, 27, 29, 56, 24, 56)),

    Vehicle("Standard Bike L",              (46, 54, 40, 43, 43, 37, 37)),
    Vehicle("Bowser Bike / Flame Runner",   (60, 54, 18, 24, 51, 21, 51)),
    Vehicle("Wario Bike",                   (37, 59, 51, 56, 21, 45, 48)),
    Vehicle("Twinkle Star / Shooting Star", (50, 48, 29, 32, 59, 27, 59)),
    Vehicle("Torpedo / Spear",              (67, 56, 24, 18, 29, 18, 18)),
    Vehicle("Phantom",                      (43, 51, 43, 48, 17, 56, 40)),
    ]
</snippet></ROW><ROW><id>5211469</id><snippet>small_combinations = make_combinations(small_drivers, small_vehicles)
medium_combinations = make_combinations(medium_drivers, medium_vehicles)
large_combinations = make_combinations(large_drivers, large_vehicles)

all_combinations = small_combinations + medium_combinations + large_combinations
</snippet></ROW><ROW><id>5211469</id><snippet>print "Max speed:", max(all_combinations, key=lambda c:c.stats.speed)
print "Max weight:", max(all_combinations, key=lambda c:c.stats.weight)
print "Max acceleration:", max(all_combinations, key=lambda c:c.stats.acceleration)
print "Max handling:", max(all_combinations, key=lambda c:c.stats.handling)
print "Max drift:", max(all_combinations, key=lambda c:c.stats.drift)
print "Max offroad:", max(all_combinations, key=lambda c:c.stats.offroad)
print "Max turbo:", max(all_combinations, key=lambda c:c.stats.turbo)
print
print "Min speed:", min(all_combinations, key=lambda c:c.stats.speed)
print "Min weight:", min(all_combinations, key=lambda c:c.stats.weight)
print "Min acceleration:", min(all_combinations, key=lambda c:c.stats.acceleration)
print "Min handling:", min(all_combinations, key=lambda c:c.stats.handling)
print "Min drift:", min(all_combinations, key=lambda c:c.stats.drift)
print "Min offroad:", min(all_combinations, key=lambda c:c.stats.offroad)
print "Min turbo:", min(all_combinations, key=lambda c:c.stats.turbo)
</snippet></ROW><ROW><id>5211469</id><snippet>min</snippet></ROW><ROW><id>5211469</id><snippet>max</snippet></ROW><ROW><id>5211469</id><snippet>key</snippet></ROW><ROW><id>5211469</id><snippet>Max speed: Funky Kong riding Aero Glider / Jetsetter (Stats(speed=73, weight=56, acceleration=21, handling=17, drift=27, offroad=19, turbo=16))
Max weight: Bowser riding Piranha Prowler (Stats(speed=57, weight=72, acceleration=29, handling=35, drift=38, offroad=29, turbo=27))
Max acceleration: Toad riding Quacker (Stats(speed=32, weight=17, acceleration=73, handling=60, drift=68, offroad=48, turbo=57))
Max handling: Baby Mario riding Nano Bike / Bit Bike (Stats(speed=25, weight=26, acceleration=59, handling=73, drift=40, offroad=56, turbo=62))
Max drift: Toad riding Bullet Bike (Stats(speed=53, weight=24, acceleration=38, handling=35, drift=73, offroad=29, turbo=67))
Max offroad: Toadette riding Magikruiser (Stats(speed=46, weight=24, acceleration=45, handling=45, drift=32, offroad=73, turbo=43))
Max turbo: Koopa Troopa riding Bullet Bike (Stats(speed=53, weight=24, acceleration=32, handling=38, drift=67, offroad=29, turbo=73))

Min speed: Baby Mario riding Nano Bike / Bit Bike (Stats(speed=25, weight=26, acceleration=59, handling=73, drift=40, offroad=56, turbo=62))
Min weight: Toad riding Quacker (Stats(speed=32, weight=17, acceleration=73, handling=60, drift=68, offroad=48, turbo=57))
Min acceleration: Wario riding Flame Flyer (Stats(speed=62, weight=62, acceleration=16, handling=21, drift=48, offroad=21, turbo=54))
Min handling: Wario riding Aero Glider / Jetsetter (Stats(speed=69, weight=59, acceleration=21, handling=17, drift=27, offroad=19, turbo=22))
Min drift: Wario riding Phantom (Stats(speed=43, weight=54, acceleration=43, handling=48, drift=17, offroad=59, turbo=46))
Min offroad: Donkey Kong riding Aero Glider / Jetsetter (Stats(speed=69, weight=59, acceleration=23, handling=19, drift=27, offroad=16, turbo=19))
Min turbo: Waluigi riding Aero Glider / Jetsetter (Stats(speed=69, weight=56, acceleration=27, handling=17, drift=32, offroad=19, turbo=16))
</snippet></ROW><ROW><id>5211469</id><snippet>max((combination
    for combination in all_combinations
    if combination.stats.turbo &gt;= 50
    and combination.stats.handling &gt;= 40),
    key=lambda c:c.stats.speed)
</snippet></ROW><ROW><id>5211469</id><snippet>def all_max(sequence, key):
    top_value = key(max(sequence, key=key))
    return [item for item in sequence if key(item) == top_value]
</snippet></ROW><ROW><id>5211469</id><snippet>max</snippet></ROW><ROW><id>5211562</id><snippet>class MiniMath:
    def add(self, a, b):
        return a + b

class MoreMath(MiniMath):
    def sub(self, a, b):
        return a - b

mm = MoreMath()
print mm.add(1, 2) # 3
print mm.sub(1, 2) # -1
</snippet></ROW><ROW><id>5211607</id><snippet>COUNTRIES=['United States', 'England'...]
</snippet></ROW><ROW><id>5211607</id><snippet>country=db.StringProperty(verbose_name='Country',required=False, choices=set(COUNTRIES))
</snippet></ROW><ROW><id>5211759</id><snippet>python -O c:\python27\pyinstaller-1.5\build.py "%~f1"
</snippet></ROW><ROW><id>5211759</id><snippet>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\.SPEC\shell\Freeze\command]
@="C:\\Python27\\Scripts\\pybuild.bat \"%1\""
</snippet></ROW><ROW><id>5212190</id><snippet>classmethod</snippet></ROW><ROW><id>5212190</id><snippet>staticmethod</snippet></ROW><ROW><id>5212190</id><snippet>cls.method(instance, *args)</snippet></ROW><ROW><id>5212190</id><snippet>staticmethod</snippet></ROW><ROW><id>5212190</id><snippet>staticmethod</snippet></ROW><ROW><id>5212190</id><snippet>class Foo(object):
     trees2money = staticmethod(calculators.trees2money)
     foo = staticmethod(calculators.bar)
</snippet></ROW><ROW><id>5212190</id><snippet>class Foo(object):
     def trees2money(self, trees):
         """Calculator for trees2money, you can override when subclassing"""
         return calculators.trees2money(trees)
     @property
     def foo(self):
         """The foo of the object"""
         return calculators.bar
</snippet></ROW><ROW><id>5212207</id><snippet>db.BlobProperty()</snippet></ROW><ROW><id>5212207</id><snippet>Image</snippet></ROW><ROW><id>5212207</id><snippet>.jpg</snippet></ROW><ROW><id>5212207</id><snippet>.png</snippet></ROW><ROW><id>5212207</id><snippet>.gif</snippet></ROW><ROW><id>5212207</id><snippet>.bmp</snippet></ROW><ROW><id>5212207</id><snippet>.tiff</snippet></ROW><ROW><id>5212207</id><snippet>.ico</snippet></ROW><ROW><id>5212207</id><snippet>.jpg</snippet></ROW><ROW><id>5212207</id><snippet>.png</snippet></ROW><ROW><id>5212207</id><snippet>db.BlobProperty()</snippet></ROW><ROW><id>5212207</id><snippet>db.BlobProperty</snippet></ROW><ROW><id>5212207</id><snippet>.jpg</snippet></ROW><ROW><id>5212207</id><snippet>.gif</snippet></ROW><ROW><id>5212207</id><snippet>.tiff</snippet></ROW><ROW><id>5212207</id><snippet>.png</snippet></ROW><ROW><id>5212207</id><snippet>BlobProperty</snippet></ROW><ROW><id>5212207</id><snippet>db.put()</snippet></ROW><ROW><id>5212295</id><snippet>{% for pic in photo_list %}
  &lt;tr&gt;
  &lt;td&gt;&lt;img src='getPic?img_id={{ pic.key }} '&gt;&lt;/img&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>5212295</id><snippet>{% for pic in photo_list %}
  &lt;tr&gt;
  &lt;td&gt;&lt;img src='getPic?img_id={{ pic.key() }} '&gt;&lt;/img&gt;&lt;/td&gt;
</snippet></ROW><ROW><id>5212465</id><snippet>set(csv1) == set(csv2)
</snippet></ROW><ROW><id>5212465</id><snippet>sorted(csv1) == sorted(csv2)
</snippet></ROW><ROW><id>5212491</id><snippet>galleries = Galleries.objects.get(id=1)
values = galleries.gallery_type.values_set.filter(language='language')
</snippet></ROW><ROW><id>5212700</id><snippet>&gt;&gt;&gt; foo = {('foo', 45): 5, ('bar', 34): 3}    
&gt;&gt;&gt; any(t1 == "foo" for (t1, t2) in foo)
True    
&gt;&gt;&gt; any(t2 == 45 for (t1, t2) in foo)
True
</snippet></ROW><ROW><id>5212700</id><snippet>&gt;&gt;&gt; any(45 in pair for pair in foo)
True
</snippet></ROW><ROW><id>5212700</id><snippet>&gt;&gt;&gt; 45 in flatten(foo)
True
</snippet></ROW><ROW><id>5212753</id><snippet>redirect()</snippet></ROW><ROW><id>5212753</id><snippet>return</snippet></ROW><ROW><id>5212753</id><snippet>if len(url) == 0:
    logging.info("""***len(url) is --zero--: %s***""" % len(url))
    self.redirect("/urlparseerror")
    return
</snippet></ROW><ROW><id>5212885</id><snippet>list1 = sorted(csv1, key=operator.itemgetter(1, 2))
</snippet></ROW><ROW><id>5213093</id><snippet>&gt;&gt;&gt; l = [list(range(i, i+4)) for i in range(10,1,-1)]
&gt;&gt;&gt; l
[[10, 11, 12, 13], [9, 10, 11, 12], [8, 9, 10, 11], [7, 8, 9, 10], [6, 7, 8, 9], [5, 6, 7, 8], [4, 5, 6, 7], [3, 4, 5, 6], [2, 3, 4, 5]]
&gt;&gt;&gt; sorted(l, key=sum)
[[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9], [7, 8, 9, 10], [8, 9, 10, 11], [9, 10, 11, 12], [10, 11, 12, 13]]
</snippet></ROW><ROW><id>5213093</id><snippet>sum</snippet></ROW><ROW><id>5213193</id><snippet>B</snippet></ROW><ROW><id>5213193</id><snippet>foo()</snippet></ROW><ROW><id>5213193</id><snippet>A</snippet></ROW><ROW><id>5213193</id><snippet>foo()</snippet></ROW><ROW><id>5213193</id><snippet>self.a = foo('stirng')</snippet></ROW><ROW><id>5213193</id><snippet>a = foo('stirng')</snippet></ROW><ROW><id>5213193</id><snippet>__ init __</snippet></ROW><ROW><id>5213193</id><snippet>__ init __</snippet></ROW><ROW><id>5213193</id><snippet>self</snippet></ROW><ROW><id>5213697</id><snippet>Content-Length</snippet></ROW><ROW><id>5213697</id><snippet>headers</snippet></ROW><ROW><id>5213697</id><snippet>'Content-Length: len(data)' 
</snippet></ROW><ROW><id>5213697</id><snippet>headers = {
    'Content-Type': 'application/soap+xml; charset=utf-8',
    'Host': 'webservices.autotask.net',
    'Content-Length': len(data),
    'SOAPAction': 'http://autotask.net/ATWS/v1_5/getThresholdAndUsageInfo'
}
</snippet></ROW><ROW><id>5213765</id><snippet>text = 'abcdefa'
pattern = re.compile('a|c')
[(m.group(), m.start()) for m in pattern.finditer(text)]
</snippet></ROW><ROW><id>5213990</id><snippet>inotify</snippet></ROW><ROW><id>5213990</id><snippet>twisted</snippet></ROW><ROW><id>5214146</id><snippet>O(1)</snippet></ROW><ROW><id>5214146</id><snippet>n</snippet></ROW><ROW><id>5214146</id><snippet>k</snippet></ROW><ROW><id>5214146</id><snippet>k</snippet></ROW><ROW><id>5214213</id><snippet>getGenericAnswers</snippet></ROW><ROW><id>5214275</id><snippet>//file: simple.hh
template &lt;typename T&gt;
T double_it (T a) {
  return (2 * a);
}

//file: simple.i
%module "simple"

%{
  #include "simple.hh"
%}

%include "simple.hh" // include it directly into here

%template(int_double_it) double_it &lt;int&gt;;
%template(float_double_it) double_it &lt;float&gt;;

#file: setup.py
from distutils.core import setup, Extension
simple_module = Extension('_simple',
                          sources=['simple.i', 'simple.hh'],
                          swig_opts=['-c++'],
                         )
setup (name = 'simple',
       ext_modules = [simple_module],
       py_modules = ["simple"],
       )
</snippet></ROW><ROW><id>5214275</id><snippet>%include</snippet></ROW><ROW><id>5214275</id><snippet>#include</snippet></ROW><ROW><id>5214338</id><snippet>txt = "Today it's 07.May 2011. Or 2.999."
regexp_tokenize(txt, pattern=r'\w+([.,]\w+)*|\S+')
['Today', 'it', "'s", '07.May', '2011', '.', 'Or', '2.999', '.']
</snippet></ROW><ROW><id>5214353</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; i = ast.literal_eval('[22, 33, 36, 41, 46, 49, 56]')
&gt;&gt;&gt; i[3]
41
</snippet></ROW><ROW><id>5214460</id><snippet>reload()</snippet></ROW><ROW><id>5214460</id><snippet>import foo
#now you've changed foo.py and want to reload it
foo = reload(foo)
</snippet></ROW><ROW><id>5214587</id><snippet>text_file = open("Output.txt", "w")
text_file.write("Purchase Amount: %s"%TotalAmount)
text_file.close()
</snippet></ROW><ROW><id>5214587</id><snippet>with open("Output.txt", "w") as text_file:
    text_file.write("Purchase Amount: %s"%TotalAmount)
</snippet></ROW><ROW><id>5214587</id><snippet>str.format()</snippet></ROW><ROW><id>5214587</id><snippet>with open("Output.txt", "w") as text_file:
    text_file.write("Purchase Amount: {0}".format(TotalAmount))
</snippet></ROW><ROW><id>5214587</id><snippet>{}</snippet></ROW><ROW><id>5214587</id><snippet>{0}</snippet></ROW><ROW><id>5214706</id><snippet>yourVar = "Total of the sale is: ${:,.2f}".format(TotalAmount)
</snippet></ROW><ROW><id>5214724</id><snippet>__init__()</snippet></ROW><ROW><id>5214724</id><snippet>self</snippet></ROW><ROW><id>5214724</id><snippet>class Foo(object):
    classVar = 0 #this is a class variable. It is shared between all instances
    def __init__(self, instanceVar):
        self.someVar = instanceVar

obj1 = Foo(10)
obj2 = Foo(42)

print obj1.classVar # prints 0
print obj2.classVar # prints 0

print obj1.someVar #prints 10
print obj2.someVar #prints 42
</snippet></ROW><ROW><id>5214931</id><snippet>kwargs</snippet></ROW><ROW><id>5214931</id><snippet>def foo(a, b, c):
    print a, b, c

d = {'a': 1, 'b': 2, 'c': 3}
foo(**d)
</snippet></ROW><ROW><id>5214931</id><snippet>1 2 3
</snippet></ROW><ROW><id>5215012</id><snippet>import datetime

def timeStamped(fname, fmt='%Y-%m-%d-%H-%M-%S_{fname}'):
    return datetime.datetime.now().strftime(fmt).format(fname=fname)

with open(timeStamped('myfile.txt'),'w') as outf:
    outf.write('data!')
</snippet></ROW><ROW><id>5215188</id><snippet>python manage.py test purchaseplans &gt; test_results.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>5215230</id><snippet>NaN</snippet></ROW><ROW><id>5215230</id><snippet>from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import axes3d, Axes3D
import pylab as p

vima=0.5

fig = plt.figure()
ax = fig.gca(projection='3d')
X = np.arange(0, 16.67, vima)
Y = np.arange(0, 12.5, vima)
X, Y = np.meshgrid(X, Y)

Z = np.sqrt(((1.2*Y+0.6*X)**2+(0.2*Y+1.6*X)**2)/(0.64*Y**2+0.36*X**2))
Z = np.nan_to_num(Z) # added this line

surf = ax.plot_surface(X, Y, Z,rstride=1, cstride=1, alpha=1,cmap=cm.jet,  linewidth=0)
fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
</snippet></ROW><ROW><id>5215251</id><snippet>Pattern pattern = Pattern.compile(yourPattern);
Matcher matcher = patern.matcher(yourString);
while (matcher.find()) {
  String group = matcher.group(0);
  // do your if statement
}
</snippet></ROW><ROW><id>5215454</id><snippet>ctypes.addressof(bufstr)
</snippet></ROW><ROW><id>5215463</id><snippet>import __builtin__
import collections
import sys

IN_USE = collections.defaultdict(set)
_IMPORT = __builtin__.__import__

def _myimport(name, globs=None, locs=None, fromlist=None, level=-1):
    global IN_USE
    if fromlist is None:
        fromlist = []
    IN_USE[name].update(fromlist)
    return _IMPORT(name, globs, locs, fromlist, level)

# monkey-patch __import__
setattr(__builtin__, '__import__', _myimport)

# import and run the target project here and run the routine
import foobar
foobar.do_something()

# when it finishes running, dump the imports
print 'modules and symbols imported by "foobar":'
for key in sorted(IN_USE.keys()):
    print key
    for name in sorted(IN_USE[key]):
        print '  ', name
</snippet></ROW><ROW><id>5215463</id><snippet>foobar</snippet></ROW><ROW><id>5215463</id><snippet>import byteplay
import cjson

def _other():
    from os import path
    from sys import modules

def do_something():
    import hashlib
    import lxml
    _other()
</snippet></ROW><ROW><id>5215463</id><snippet>modules and symbols imported by "foobar":
_hashlib
array
   array
byteplay
cStringIO
   StringIO
cjson
dis
   findlabels
foobar
hashlib
itertools
lxml
opcode
   *
   __all__
operator
os
   path
sys
   modules
types
warnings
</snippet></ROW><ROW><id>5215551</id><snippet>range(100)</snippet></ROW><ROW><id>5215551</id><snippet>for</snippet></ROW><ROW><id>5215551</id><snippet>time</snippet></ROW><ROW><id>5215551</id><snippet>while</snippet></ROW><ROW><id>5215551</id><snippet>time = 0
while time &lt; 100:
   gold += level
   if gold &gt; 20 * level:
      level +=1
      time += 10
   time += 1
</snippet></ROW><ROW><id>5215693</id><snippet>def try_login(username, password):
    params = urllib.urlencode(
            {'username': username,
             'password': password })
    f = urllib.urlopen("http://ninitelist.yolasite.com/passprotected.php", params)
    return "Invalid login details" not in f.read()

if __name__ == '__main__':
    print try_login("testuser", "testdata")
</snippet></ROW><ROW><id>5215859</id><snippet>bool</snippet></ROW><ROW><id>5215859</id><snippet>flag = True
layer.visible.set(flag)
</snippet></ROW><ROW><id>5215859</id><snippet>flag = not layer.visible.get()
layer.visible.set(flag)
</snippet></ROW><ROW><id>5216842</id><snippet>a = np.zeros((10), dtype=str)
a[2] = 'A'
a[4] = 'X'
a[8] = 'B'
</snippet></ROW><ROW><id>5216842</id><snippet>am=np.ma.masked_where(a!='', a)
</snippet></ROW><ROW><id>5216842</id><snippet>np.ma.notmasked_contiguous</snippet></ROW><ROW><id>5216842</id><snippet>slices = np.ma.notmasked_contiguous(am)
[slice(0, 1, None), slice(3, 3, None), slice(5, 7, None), slice(9, 9, None)]
</snippet></ROW><ROW><id>5216842</id><snippet>slices_start = np.array([s.start for s in slices])
</snippet></ROW><ROW><id>5216842</id><snippet>slices_start.searchsorted(4) #4
Out: 2
</snippet></ROW><ROW><id>5216842</id><snippet>i = slices_start.searchsorted(8)
a[slices[i-1].start:slices[i].stop+1]
Out: array(['', '', '', 'B', ''], 
  dtype='|S1')
</snippet></ROW><ROW><id>5217271</id><snippet>  while True:
    try:
      no=raw_input()
      if no=='':
        break
      else:
        split_change(no)
    except EOFError:
      break
</snippet></ROW><ROW><id>5217518</id><snippet>allTrue = all(somePredicate(elem) for elem in someIterable)
anyTrue = any(somePredicate(elem) for elem in someIterable)
</snippet></ROW><ROW><id>5217780</id><snippet>ipaddress</snippet></ROW><ROW><id>5217780</id><snippet>import ipaddress
addr = str(ipaddress.ip_address(167772160))
assert addr == '10.0.0.0'
</snippet></ROW><ROW><id>5217780</id><snippet>import socket,struct
packed_value = struct.pack('!I', 167772160)
addr = socket.inet_ntoa(packed_value)
assert addr == '10.0.0.0'
</snippet></ROW><ROW><id>5217780</id><snippet>inet_pton</snippet></ROW><ROW><id>5217934</id><snippet>data = """Group("GroupName") { 
    /* C-Style comment */ 
    Group("AnotherGroupName") { 
        Entry("some","variables",0,3.141); 
        Entry("other","variables",1,2.718); 
    } 
    Entry("linebreaks", 
          "allowed", 
          3, 
          1.414 
         ); 
} """

from pyparsing import *

# define basic punctuation and data types
LBRACE,RBRACE,LPAREN,RPAREN,SEMI = map(Suppress,"{}();")
GROUP = Keyword("Group")
ENTRY = Keyword("Entry")

# use parse actions to do parse-time conversion of values
real = Regex(r"[+-]?\d+\.\d*").setParseAction(lambda t:float(t[0]))
integer = Regex(r"[+-]?\d+").setParseAction(lambda t:int(t[0]))

# parses a string enclosed in quotes, but strips off the quotes at parse time
string = QuotedString('"')

# define structure expressions
value = string | real | integer
entry = Group(ENTRY + LPAREN + Group(Optional(delimitedList(value)))) + RPAREN + SEMI

# since Groups can contain Groups, need to use a Forward to define recursive expression
group = Forward()
group &lt;&lt; Group(GROUP + LPAREN + string("name") + RPAREN + 
            LBRACE + Group(ZeroOrMore(group | entry))("body") + RBRACE)

# ignore C style comments wherever they occur
group.ignore(cStyleComment)

# parse the sample text
result = group.parseString(data)

# print out the tokens as a nice indented list using pprint
from pprint import pprint
pprint(result.asList())
</snippet></ROW><ROW><id>5217934</id><snippet>[['Group',
  'GroupName',
  [['Group',
    'AnotherGroupName',
    [['Entry', ['some', 'variables', 0, 3.141]],
     ['Entry', ['other', 'variables', 1, 2.718]]]],
   ['Entry', ['linebreaks', 'allowed', 3, 1.4139999999999999]]]]]
</snippet></ROW><ROW><id>5218037</id><snippet>re</snippet></ROW><ROW><id>5218037</id><snippet>#!/usr/bin/env python
import re

open('output.html', 'w').write(re.sub('href="http://en.wikipedia.org', 'href="/home/fergus/wikiget/wiki/Absinthe', open('file.html').read()))
</snippet></ROW><ROW><id>5218037</id><snippet>re</snippet></ROW><ROW><id>5218037</id><snippet>#!/usr/bin/env python
open('output.html', 'w').write(open('file.html').read().replace('href="http://en.wikipedia.org', 'href="/home/fergus/wikiget/wiki/Absinthe'))
</snippet></ROW><ROW><id>5218322</id><snippet>import datetime
dt = str(datetime.datetime.now())
</snippet></ROW><ROW><id>5218322</id><snippet>import os
newname = 'file_'+dt+'.txt'
os.rename('text.txt', newname)
</snippet></ROW><ROW><id>5218582</id><snippet>fake_server</snippet></ROW><ROW><id>5218582</id><snippet>for</snippet></ROW><ROW><id>5218582</id><snippet>fake_server</snippet></ROW><ROW><id>5218582</id><snippet>        del fake_server # force server to unbind
</snippet></ROW><ROW><id>5218703</id><snippet>labels = {}
maps = Maps.objects.all()
for lm in maps:
    name, description = getDescription(lm.name, lm.type)
    if name not in labels:
        labels[name] = description
</snippet></ROW><ROW><id>5218960</id><snippet>name</snippet></ROW><ROW><id>5218960</id><snippet> def update_name(request):
     names = Employee.objects.filter()
     if(names.count() &gt; 0): 
         request.names = names
 return render_to_response('chatlist/newchat.html', context_instance=RequestContext(request,{'form': form,'msg' : msg}))
</snippet></ROW><ROW><id>5218960</id><snippet>def update_name(request):
    names = Employee.objects.filter()
     return render_to_response('chatlist/newchat.html', context_instance=RequestContext(request,{'form': form,'msg' : msg, 'names': names}))
</snippet></ROW><ROW><id>5218962</id><snippet>replace</snippet></ROW><ROW><id>5219055</id><snippet>UnboundLocalError: local variable '_total' referenced before assignment
</snippet></ROW><ROW><id>5219055</id><snippet>_total += PRICE_RANGES[key][0]
</snippet></ROW><ROW><id>5219055</id><snippet>global</snippet></ROW><ROW><id>5219055</id><snippet>_total = _total + PRICE_RANGES[key][0]
</snippet></ROW><ROW><id>5219055</id><snippet>_total</snippet></ROW><ROW><id>5219055</id><snippet>recurse()</snippet></ROW><ROW><id>5219055</id><snippet>_total</snippet></ROW><ROW><id>5219699</id><snippet>read_file = open ('C:\Users\Mahya\Desktop\\automate\Autosupports\\at1.txt','r')
content = read_file.readlines()
found = False
for line in content:
    if line.contains('===== BOOT TIME STATS ====='):
        if found:
            break # Exit the for loop when finding the string for the second time
        found = True
    if found:
        print line
</snippet></ROW><ROW><id>5220200</id><snippet>/ 2n \
|    |
\ n  /
</snippet></ROW><ROW><id>5220370</id><snippet>{{ list.0 }}</snippet></ROW><ROW><id>5220370</id><snippet>{{ list|slice:":1" }}</snippet></ROW><ROW><id>5220413</id><snippet>dict</snippet></ROW><ROW><id>5220413</id><snippet>dict</snippet></ROW><ROW><id>5220413</id><snippet>{% for item in d.items %}
    key = {{ item.0 }}
    value = {{ item.1 }}
{% endfor %}
</snippet></ROW><ROW><id>5220413</id><snippet>d.keys</snippet></ROW><ROW><id>5220913</id><snippet>scipy.stats</snippet></ROW><ROW><id>5220913</id><snippet>from scipy.stats import scoreatpercentile
import numpy as np

theList = np.log10(1+np.arange(.1, 100))
theMedian = np.median(theList)

oneSidedList = theList[:]               # copy original list
# fold over to the right all values left of the median
oneSidedList[theList &lt; theMedian] = 2*theMedian - theList[theList &lt; theMedian]

# find the 70th centile of the one-sided distribution
a = scoreatpercentile(oneSidedList, 70) - theMedian

#check how many elements fall into the range
sel = (theList &gt; (theMedian - a)) * (theList &lt; (theMedian + a))

print np.sum(sel) / float(len(theList))
</snippet></ROW><ROW><id>5220913</id><snippet>0.7</snippet></ROW><ROW><id>5221253</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5221253</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5221253</id><snippet>pip freeze</snippet></ROW><ROW><id>5221253</id><snippet>--no-site-packages</snippet></ROW><ROW><id>5221321</id><snippet>easy_install</snippet></ROW><ROW><id>5221335</id><snippet>super(Child, self)</snippet></ROW><ROW><id>5221335</id><snippet>class MyType(type):
    def __new__(cls, name, bases, attrs):
        #wraps the 'test' method to automate context management and other stuff
        new_class = super(MyType, cls).__new__(cls, name, bases, attrs)
        new_class.test = cls.other_wrapper(new_class.test, new_class)

    @classmethod
    def other_wrapper(cls, operation, new_class):
        def _wrapped(self, *args, **kwargs):
            #DO something with self and *args and **kwargs ...
            #ONLY if self is of type *new_class* !!!
            if type(self) == new_class:
                pass #do things
            return operation(self, *args, **kwargs)
        return _wrapped
</snippet></ROW><ROW><id>5221335</id><snippet>super(Child, self).a_wrapped_method
</snippet></ROW><ROW><id>5221393</id><snippet>_empty</snippet></ROW><ROW><id>5221393</id><snippet>empty()</snippet></ROW><ROW><id>5221393</id><snippet>empty()</snippet></ROW><ROW><id>5221625</id><snippet>__hash__()</snippet></ROW><ROW><id>5221625</id><snippet>&gt;&gt;&gt; class A(object):
...   def __init__(self, data=''):
...     self.data = data
...   def __eq__(self, another):
...     return hasattr(another, 'data') and self.data == another.data
...   def __hash__(self):
...     return hash(self.data)
... 
&gt;&gt;&gt; a1, a2, a3 = A('foo'), A('foo'), A('bar')
&gt;&gt;&gt; d = {a1: 'foo'}
&gt;&gt;&gt; d[a1]
'foo'
&gt;&gt;&gt; d[a2]
'foo'
&gt;&gt;&gt; d[a3]
Traceback (most recent call last):
  File "", line 1, in 
KeyError: __main__.A object at 0x927d0&gt;
</snippet></ROW><ROW><id>5221625</id><snippet>__hash__</snippet></ROW><ROW><id>5222441</id><snippet>-c</snippet></ROW><ROW><id>5222441</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>5222441</id><snippet>-c</snippet></ROW><ROW><id>5222441</id><snippet>C:\Python27&gt;python.exe -c "import sys; print sys.argv[0]"
-c
</snippet></ROW><ROW><id>5222672</id><snippet>KeyError</snippet></ROW><ROW><id>5222672</id><snippet># open file if not yet open
files_dict.setdefault(filename, open(filename,'w')) 
files_dict[filename].write("test")
</snippet></ROW><ROW><id>5222672</id><snippet>setdefault</snippet></ROW><ROW><id>5222672</id><snippet>files_dict.setdefault(filename, open(filename,'w')).write("test")
</snippet></ROW><ROW><id>5222710</id><snippet>import os
import sys

euid = os.geteuid()
if euid != 0:
    print "Script not started as root. Running sudo.."
    args = ['sudo', sys.executable] + sys.argv + [os.environ]
    # the next line replaces the currently-running process with the sudo
    os.execlpe('sudo', *args)

print 'Running. Your euid is', euid
</snippet></ROW><ROW><id>5222710</id><snippet>Script not started as root. Running sudo..
[sudo] password for bob:
Running. Your euid is 0
</snippet></ROW><ROW><id>5222710</id><snippet>sudo -k</snippet></ROW><ROW><id>5222849</id><snippet>griddata</snippet></ROW><ROW><id>5222849</id><snippet>griddata</snippet></ROW><ROW><id>5222849</id><snippet>griddata</snippet></ROW><ROW><id>5222849</id><snippet>r</snippet></ROW><ROW><id>5222849</id><snippet>s</snippet></ROW><ROW><id>5222849</id><snippet>r</snippet></ROW><ROW><id>5222849</id><snippet>s</snippet></ROW><ROW><id>5222849</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>5222849</id><snippet># untested code, but gives the idea
def func(c):
    r, s = c
    xyz = P0*(1-r)*(1-s) + P1*(r)*(1-s) + P2*(r)*(s) + P3*(1-r)*(s)
    return xyz - Point_on_Surface

res = scipy.optimize.leastsq(func, [0, 0])
r, s = res[0]
</snippet></ROW><ROW><id>5222849</id><snippet>P = c_1 A + c_2 B + (1 - c_1 - c_2) C</snippet></ROW><ROW><id>5222849</id><snippet>c_k</snippet></ROW><ROW><id>5222849</id><snippet>P</snippet></ROW><ROW><id>5222849</id><snippet>c = np.linalg.lstsq([A-C, B-C], P-C)</snippet></ROW><ROW><id>5222849</id><snippet>V[0], V[1], V[2] = A, B, C</snippet></ROW><ROW><id>5222849</id><snippet>def project_onto_triangle(P, V):
    c, distance, rank, s = np.linalg.lstsq(np.c_[V[0] - V[2], V[1] - V[2]], P - V[2])
    return c, distance

Point_on_Surface = 0.25 * P1[0] + 0.25 * P1[1] + 0.5 * P1[2]
c, dist = project_onto_triangle(Point_on_Surface, P1[0:3])
# &gt;&gt;&gt; c
# array([ 0.25,  0.25])      # barycentric coordinates
# &gt;&gt;&gt; dist
# array([  4.07457566e-33])  # the distance of the point from the triangle plane

# second triangle
c2, dist2 = project_onto_triangle(Point_on_Surface, [P1[0], P1[2], P1[3]])
# &gt;&gt;&gt; c2
# array([ 0.45,  0.75])
# &gt;&gt;&gt; dist2
# array([ 0.05])
</snippet></ROW><ROW><id>5222849</id><snippet>np.linalg.lstsq(V, P - C) == Q.dot(P - C)</snippet></ROW><ROW><id>5222849</id><snippet>Q = np.linalg.pinv(V)</snippet></ROW><ROW><id>5222849</id><snippet>Q</snippet></ROW><ROW><id>5222849</id><snippet>c</snippet></ROW><ROW><id>5222849</id><snippet>dist &lt; epsilon</snippet></ROW><ROW><id>5222849</id><snippet>epsilon</snippet></ROW><ROW><id>5222849</id><snippet>0 &lt;= c_1 &lt;= 1</snippet></ROW><ROW><id>5222849</id><snippet>0 &lt;= c_2 &lt;= 1</snippet></ROW><ROW><id>5222849</id><snippet>0 &lt;= 1 - c_1 - c_2 &lt;= 1</snippet></ROW><ROW><id>5222849</id><snippet>griddata</snippet></ROW><ROW><id>5223256</id><snippet>class B(object):
    A = A
    def func(self):
        self.a = self.A()
</snippet></ROW><ROW><id>5223256</id><snippet>class B(file1.B):
    A = A
</snippet></ROW><ROW><id>5223256</id><snippet>file1.py</snippet></ROW><ROW><id>5223256</id><snippet>file2.py</snippet></ROW><ROW><id>5223256</id><snippet>import file1

class A(file1.A):
    def __init__(self):
        file1.A(self)
        self.thing = other_thing

file1.A = A
</snippet></ROW><ROW><id>5223256</id><snippet>file1.A</snippet></ROW><ROW><id>5223423</id><snippet>filter()</snippet></ROW><ROW><id>5223423</id><snippet>exclude()</snippet></ROW><ROW><id>5223423</id><snippet>clone.query.add_q()</snippet></ROW><ROW><id>5223423</id><snippet>clone.query</snippet></ROW><ROW><id>5223423</id><snippet>clone.query.where</snippet></ROW><ROW><id>5223423</id><snippet>AND</snippet></ROW><ROW><id>5223423</id><snippet>OR</snippet></ROW><ROW><id>5223423</id><snippet>queryset.query.where</snippet></ROW><ROW><id>5223423</id><snippet>django.utils.tree</snippet></ROW><ROW><id>5223810</id><snippet>import jinja2
env = jinja2.Environment()
env.globals.update(zip=zip)
# use env to load template(s)
</snippet></ROW><ROW><id>5223970</id><snippet>uuid.py</snippet></ROW><ROW><id>5223970</id><snippet>uuid_test_snippet.py</snippet></ROW><ROW><id>5224121</id><snippet>python -m cProfile myscript.py
</snippet></ROW><ROW><id>5224121</id><snippet>mydata.txt</snippet></ROW><ROW><id>5224121</id><snippet>times = []
timestamps = []
TIME_FORMAT = "%Y-%m-%d %H:%M:%S"
for t in timestmp:
    parsed_time = datetime.datetime.strptime(t, TIME_FORMAT)
    times.append(parsed_time)
    timestamps.append(time.mktime(parsed_time.timetuple()))
</snippet></ROW><ROW><id>5224121</id><snippet>in</snippet></ROW><ROW><id>5224130</id><snippet>text = unicode(text, encoding, "replace")
</snippet></ROW><ROW><id>5224130</id><snippet>"?"</snippet></ROW><ROW><id>5224130</id><snippet>text = text.replace(u"\uFFFD", "?")
</snippet></ROW><ROW><id>5224249</id><snippet>values=[[datetime1, value1],[datetime2,value2]]
</snippet></ROW><ROW><id>5224249</id><snippet>$.each($('.datetime'), function(i, item){
    datetime_values.append($(item).value());
}
</snippet></ROW><ROW><id>5224249</id><snippet>request.POST.getlist('datetime')
</snippet></ROW><ROW><id>5224531</id><snippet>class GoldorSilverFilter(DateFieldFilterSpec):
    def __init__(self, f, request, params, model, model_admin):
        super(GoldorSilverFilter, self).__init__(f, request, params, model, model_admin)

        self.links = (
            (_('All'), {}),
            (_('Gold'), {'%s__regex' % self.field.name: '^[^J]',}),
            (_('Silver'), {'%s__istartswith' % self.field.name: 'J',}),
        )

    def title(self):
        return _("Metal")
        #return self.field.name

FilterSpec.filter_specs.insert(0, (lambda f: getattr(f, 'goldorsilverfilter', False), GoldorSilverFilter))
</snippet></ROW><ROW><id>5224698</id><snippet>&lt;&lt;class 'SOAPpy.Types.typedArrayType'&gt; results at 21824752&gt;:

[&lt;SOAPpy.Types.structType item at 21818984&gt;:
     {'city': 'Washington', 'prefix': '', 'suffix': 'NW', 'zip': 20502, 'number': 1600,
      'long': -77.037684, 'state': 'DC', 'street': 'Pennsylvania', 'lat': 38.898748,
      'type': 'Ave'
     }
 ]
</snippet></ROW><ROW><id>5224698</id><snippet>SOAPpy.Types.typedArrayType</snippet></ROW><ROW><id>5224698</id><snippet>answer_dict = ss[0]</snippet></ROW><ROW><id>5224698</id><snippet>print answer_dict['city']</snippet></ROW><ROW><id>5224698</id><snippet>Washington</snippet></ROW><ROW><id>5224698</id><snippet>city = answer_dict['city']
street = answer_dict['street']
# et cetera
</snippet></ROW><ROW><id>5224698</id><snippet>ss</snippet></ROW><ROW><id>5224698</id><snippet>len(ss)</snippet></ROW><ROW><id>5224698</id><snippet>for answer_dict in ss:
    process_each_answer(answer_dict) # substitute your code here
</snippet></ROW><ROW><id>5224740</id><snippet>for</snippet></ROW><ROW><id>5224740</id><snippet>for currentNode in nodeTable:
    currentDistance = nodeTable[currentNode].distFromSource + network[currentNode][nearestNeighbour] #gets current distance from source
</snippet></ROW><ROW><id>5224740</id><snippet>for currentNode in nodeTable:
    currentDistance = currentNode.distFromSource + network[currentNode][nearestNeighbour]
</snippet></ROW><ROW><id>5224778</id><snippet>future_builtins</snippet></ROW><ROW><id>5224778</id><snippet>from future_builtins import filter, map, zip
</snippet></ROW><ROW><id>5224824</id><snippet>def event_registration(request, slug):
    section = get_object_or_404(Section, section__slug=slug)
    parent_page = Page.objects.get(section=section, slug='overview')
    page = Page.objects.get(section=section, slug='events-registration')

    eventr = EventRegistration(section=section)
    submitted = False

    if request.method == 'POST':
        form = EventRegistrationForm(request.POST, instance=eventr)
        if form.is_valid():
            form.save()
            submitted = True
    else:
        form = EventRegistrationForm(label_suffix='', instance=eventr)

    context = {
                 'section': section,
                 'page': page,
                 'form': form,
                 'submitted': submitted
              }
    return render_to_response('section/event_registration.html', context,
                            context_instance=RequestContext(request))
</snippet></ROW><ROW><id>5224824</id><snippet>form.save()
to
instance = form.save(commit=False)
instance.section=section
instance.save()
</snippet></ROW><ROW><id>5224833</id><snippet>extern int alloc_int_buffer_callback(some_struct **buffer, uint32_t length);
</snippet></ROW><ROW><id>5224833</id><snippet>ptr.contents = cast(arr, POINTER(SomeStruct))
</snippet></ROW><ROW><id>5224956</id><snippet>urllib2</snippet></ROW><ROW><id>5224956</id><snippet>urllib2</snippet></ROW><ROW><id>5225189</id><snippet>&lt;ul&gt;</snippet></ROW><ROW><id>5225298</id><snippet>for x in xrange(cv.GetSize(image)[0]):
  for y in xrange(cv.GetSize(image)[1]):

    a = Point(x, y, heights_top[x / 2] * (cv.GetSize(image)[1] - y) + heights_bottom[x / 2] * y)
    b = Point()

    d.x = costy * (sintz * (a.y - c.y) + costz * (a.x - c.x)) - sinty * (a.z - c.z)
    d.y = sintx * (costy * (a.z - c.z) + sinty * (sintz * (a.y - c.y) + costz * (a.x - c.x))) + costx * (costz * (a.y - c.y) - sintz * (a.x - c.x))
    d.z = costx * (costy * (a.z - c.z) + sinty * (sintz * (a.y - c.y) + costz * (a.x - c.x))) - sintx * (costz * (a.y - c.y) - sintz * (a.x - c.x))

    mapX[y, x] = x + 100.0 * (d.x - e.x) * (e.z / d.z)
    mapY[y, x] = y + 100.0 * (d.y - e.y) * (e.z / d.z)


print
print 'Remapping original image using map...'

remapped = cv.CreateImage(cv.GetSize(image), 8, 3)
cv.Remap(image, remapped, mapX, mapY, cv.CV_INTER_LINEAR)
</snippet></ROW><ROW><id>5225298</id><snippet>cv.Remap</snippet></ROW><ROW><id>5225406</id><snippet>\p{Ll}</snippet></ROW><ROW><id>5225406</id><snippet>\p{Ll}</snippet></ROW><ROW><id>5225406</id><snippet>\p{L}</snippet></ROW><ROW><id>5225438</id><snippet>__hash__()</snippet></ROW><ROW><id>5225886</id><snippet>popen</snippet></ROW><ROW><id>5225886</id><snippet>pty</snippet></ROW><ROW><id>5225886</id><snippet>pty</snippet></ROW><ROW><id>5225886</id><snippet>import os
import pty
import select
import termios

child_pid, child_fd = pty.fork()

if not child_pid: # child process
    os.execv("/path/to/command", ["command", "arg1", "arg2"])

# disable echo
attr = termios.tcgetattr(child_fd)
attr[3] = attr[3] &amp; ~termios.ECHO
termios.tcsetattr(child_fd, termios.TCSANOW, attr)

while True:
    # check whether child terminal has output to read
    ready, _, _ = select.select([child_fd], [], [])

    if child_fd in ready:
        output = []

        try:
            while True:
                s = os.read(child_fd, 1)

                # EOF or EOL
                if not s or s == "\n":
                    break

                # don't store carriage returns (no universal line endings)
                if not s == "\r":
                    output.append(s)
        except OSError: # this signals EOF on some platforms
            pass

        if output.find("Enter password:") &gt; -1:
            os.write(child_fd, "password")
</snippet></ROW><ROW><id>5225951</id><snippet>import warnings
from sqlalchemy import exc as sa_exc

with warnings.catch_warnings():
    warnings.simplefilter("ignore", category=sa_exc.SAWarning)
    # code here...
</snippet></ROW><ROW><id>5225992</id><snippet>self.action = ('ActivateSqueezeboxMode', None, _('SqueezeboxTools'),
                None, _('Activate Squeezebox mode'),
                self.activate_button_press, True)
self.action_group = gtk.ActionGroup('SqueezeboxPluginActions')
self.action_group.add_toggle_actions([self.action])
# now get your action back out of the action group so you can modify it
action = self.action_group.get_action('ActivateSqueezeboxMode')
action.set_icon_name('my-custom-icon')
</snippet></ROW><ROW><id>5225992</id><snippet>action.set_gicon(my_custom_gicon)
</snippet></ROW><ROW><id>5225992</id><snippet>gio.Icon</snippet></ROW><ROW><id>5225992</id><snippet>gio.FileIcon</snippet></ROW><ROW><id>5226009</id><snippet>{% set cycling_list = cycler('val1', 'val2', 'val3') %}
{{ cycling_list.next() }}  
{{ cycling_list.next() }}  
{{ cycling_list.next() }}
</snippet></ROW><ROW><id>5226300</id><snippet>&gt;&gt;&gt; re.split(r'(?&lt;!\\)/', r'1\/2/CD')
['1\\/2', 'CD']
</snippet></ROW><ROW><id>5226300</id><snippet>(?&lt;!...)
</snippet></ROW><ROW><id>5226300</id><snippet>...</snippet></ROW><ROW><id>5226300</id><snippet>&gt;&gt;&gt; re.split(r'(?&lt;!\\)/', r'/CD')
['', 'CD']
</snippet></ROW><ROW><id>5226359</id><snippet>/[0-9]+</snippet></ROW><ROW><id>5226359</id><snippet>/13/</snippet></ROW><ROW><id>5226359</id><snippet>QuestionViewer</snippet></ROW><ROW><id>5226359</id><snippet>/[0-9]+</snippet></ROW><ROW><id>5226359</id><snippet>action</snippet></ROW><ROW><id>5226359</id><snippet>""</snippet></ROW><ROW><id>5226359</id><snippet>'/([0-9]+)/$', QuestionViewer</snippet></ROW><ROW><id>5226359</id><snippet>/(?P&lt;id&gt;[0-9]+)/$</snippet></ROW><ROW><id>5226359</id><snippet>id</snippet></ROW><ROW><id>5226359</id><snippet>QuestionViewer</snippet></ROW><ROW><id>5226504</id><snippet>pip install -I MySQL_python==1.2.2</snippet></ROW><ROW><id>5226504</id><snippet>pip install -Iv MySQL_python==1.2.2</snippet></ROW><ROW><id>5226504</id><snippet>pip uninstall MySQL_python
pip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download
</snippet></ROW><ROW><id>5226534</id><snippet>from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
from django.utils.html import strip_tags
import logging

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)

def send_message(to):
    log.error('starting send email')
    subject, from_email = 'Message Confirmation', 'youraddress@gmail.com'
    html_content = render_to_string('emails/message.html', {'email': str(to)})
    # this strips the html, so people will have the text as well.
    text_content = strip_tags(html_content)
    # create the email, and attach the HTML version as well.
    msg = EmailMultiAlternatives(subject, text_content, from_email, [to])
    msg.attach_alternative(html_content, "text/html")
    msg.send()
</snippet></ROW><ROW><id>5226534</id><snippet>send_message(user_email)
</snippet></ROW><ROW><id>5226549</id><snippet>user.user_id()</snippet></ROW><ROW><id>5226613</id><snippet>x</snippet></ROW><ROW><id>5226613</id><snippet>Stuff</snippet></ROW><ROW><id>5226883</id><snippet>&gt;&gt;&gt; a = '''blah blah blah blah
blah blah blah blah
blah blah blah blah'''
&gt;&gt;&gt; print(a)
blah blah blah blah
blah blah blah blah
blah blah blah blah
</snippet></ROW><ROW><id>5226999</id><snippet>#ifndef uint
#define uint unsigned int
#endif     
</snippet></ROW><ROW><id>5226999</id><snippet>sudo ln -s /usr/local/mysql/lib/ /usr/local/mysql/lib/mysql
</snippet></ROW><ROW><id>5227226</id><snippet>dict</snippet></ROW><ROW><id>5227226</id><snippet>dict</snippet></ROW><ROW><id>5227377</id><snippet>for x in a</snippet></ROW><ROW><id>5227377</id><snippet>&gt;&gt;&gt; a = dict(((1,3),(0,-1),(3,21)))
&gt;&gt;&gt; for x in a:
...     print x #output the value of each item in our iteration
... 
0
1
3
</snippet></ROW><ROW><id>5227377</id><snippet>&gt;&gt;&gt; a.get(0)
-1
&gt;&gt;&gt; a.get(1)
3
&gt;&gt;&gt; a.get(3)
21
</snippet></ROW><ROW><id>5227377</id><snippet>&gt;&gt;&gt; b=[2, 3, 5, 6, 4]
&gt;&gt;&gt; max(b)
6
&gt;&gt;&gt; def inverse(x):
...     return 1.0 / x
... 
&gt;&gt;&gt; max(b, key=inverse)
2
</snippet></ROW><ROW><id>5227377</id><snippet>inverse(item)</snippet></ROW><ROW><id>5227377</id><snippet>max(a, key=a.get)</snippet></ROW><ROW><id>5227377</id><snippet>item</snippet></ROW><ROW><id>5227377</id><snippet>a</snippet></ROW><ROW><id>5227377</id><snippet>a.get(item)</snippet></ROW><ROW><id>5227427</id><snippet>EnumKey</snippet></ROW><ROW><id>5227427</id><snippet>_winreg.OpenKey</snippet></ROW><ROW><id>5227427</id><snippet>
from _winreg import *

"""print r"*** Reading from SOFTWARE\Microsoft\Windows\CurrentVersion\Run ***" """
aReg = ConnectRegistry(None,HKEY_LOCAL_MACHINE)

aKey = OpenKey(aReg, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
for i in range(1024):
    try:
        asubkey_name=EnumKey(aKey,i)
        asubkey=OpenKey(aKey,asubkey_name)
        val=QueryValueEx(asubkey, "DisplayName")
        print val
    except EnvironmentError:
        break
</snippet></ROW><ROW><id>5227445</id><snippet>import unittest

def weight(tdag, path):
    return sum([level[p] for p, level in zip(path,tdag)])

def search_max(tdag):
    if len(tdag) == 1:
        return (0,)
    if len(tdag) &gt; 1:
        # recursive call to search_max with some new tdag
        # when choosing first node at depth 2
        path1 = (0,) + search_max(...)
        # recursive call to search_max with some new tdag 
        # when choosing second node at depth 2
        # the result path should also be slightly changed
        # to get the expected result in path2
        path2 = (0,) + ...
        if weigth(tdag, path1) &gt; weigth(tdag, path2):
            return path1
        else:
            return path2

class Testweight(unittest.TestCase):
    def test1(self):
        self.assertEquals(1, weight([[1]],(0,)))

    def test2(self):
        self.assertEquals(3, weight([[1], [2, 3]],(0, 0)))

    def test3(self):
        self.assertEquals(4, weight([[1], [2, 3]],(0, 1)))

class TestSearchMax(unittest.TestCase):

    def test_max_one_node(self):
        self.assertEquals((0,), search_max([[1]]))

    def test_max_two_nodes(self):
        self.assertEquals((0, 1), search_max([[1], [2, 3]]))

    def test_max_two_nodes_alternative(self):
        self.assertEquals((0, 0), search_max([[1], [3, 2]]))

    def test_max_3_nodes_1(self):
        self.assertEquals((0, 0, 0), search_max([[1], [3, 2], [6, 4, 5]]))

    def test_max_3_nodes_2(self):
        self.assertEquals((0, 0, 1), search_max([[1], [3, 2], [4, 6, 5]]))

    def test_max_3_nodes_3(self):
        self.assertEquals((0, 1, 1), search_max([[1], [2, 3], [4, 6, 5]]))

    def test_max_3_nodes_4(self):
        self.assertEquals((0, 1, 2), search_max([[1], [2, 3], [4, 5, 6]]))

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>5227475</id><snippet>import errno
import socket

size = 1024
host = 'localhost'
port = 80


def connectsocket(userHost, userPort):

    while(1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # TCP socket
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.connect((userHost, userPort))

        command = raw_input("Command: ")

        s.send(command + '\r\n\r\n')  # Send command
        response = s.recv(size)  # Recieve output
        print response

        try:
            s.shutdown(socket.SHUT_RDWR)
        except socket.error, exc:
            # Depending on the platform, shutting down one half of the
            # connection can also close the opposite half
            if exc.errno != errno.ENOTCONN:
                raise

        s.close()


connectsocket(host, port)
</snippet></ROW><ROW><id>5227512</id><snippet>(r'^accounts/login/', 'myproj.login.views.mylogin')
</snippet></ROW><ROW><id>5227512</id><snippet>def mylogin(request, **kwargs):
    if request.user.is_authenticated():
        if 'next_url' in request.session:
            url = request.session['next_url']
            del request.session['next_url']  # Cleaning next_url val
            return HttpResponseRedirect('/%s' % url)
        else:
            return HttpResponseRedirect('/')
    return login(request, **kwargs)

@csrf_protect
def login(request, template_name='registration/login.html'):
    """Displays the login form and handles the login action."""
    retval = django.contrib.auth.views.login(request, template_name)
    clear_session_data(request.session)
    return retval
</snippet></ROW><ROW><id>5227571</id><snippet>def uses_all(required):
    ret = []
    fin = open('words.txt')
    for line in fin:
        # Let´s try and find all our required letters in that word.
        for letter in required:
            if letter not in line:
                break # We`re missing one! Break!

        else: # else block executes if no break occured
            ret.append(line)

    return ret
</snippet></ROW><ROW><id>5227870</id><snippet>words</snippet></ROW><ROW><id>5227870</id><snippet>gs = GoogleSearch(word1 + " " + word2)
</snippet></ROW><ROW><id>5227877</id><snippet>In [41]: import itertools

In [42]: x='abc'

In [43]: y='123'

In [45]: [letter+num for letter,num in itertools.product(x,y)]
Out[45]: ['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3']
</snippet></ROW><ROW><id>5227927</id><snippet>&gt;&gt;&gt; 'foobar'[0:5]
[Out] 'fooba'
</snippet></ROW><ROW><id>5227927</id><snippet>&gt;&gt;&gt; django.utils.safestring.SafeUnicode('foobar')[0:5]
[Out] 'fooba'
</snippet></ROW><ROW><id>5227983</id><snippet>#define</snippet></ROW><ROW><id>5227983</id><snippet>_WIN32</snippet></ROW><ROW><id>5227983</id><snippet>PyVarObject_HEAD_INIT</snippet></ROW><ROW><id>5228038</id><snippet>
jcomeau@intrepid:/usr/src/xgoogle$ cat xg.py 
#!/usr/bin/python
from xgoogle.search import GoogleSearch, SearchError
try:
  gs = GoogleSearch("quick and dirty")
  gs.results_per_page = 50
  results = gs.get_results()
  print 'results', gs.num_results  # number of results
  for res in results:
    print res.title.encode("utf8")
    print res.desc.encode("utf8")
    print res.url.encode("utf8")
    print
except SearchError, e:
  print "Search failed: %s" % e
</snippet></ROW><ROW><id>5228221</id><snippet>#pygame.transform.scale(background, (1200,800))  #or some size x,y here.
background = pygame.transform.scale(background, (1200,800))
</snippet></ROW><ROW><id>5228294</id><snippet>def my_product(dicts):
    return (dict(izip(dicts, x)) for x in product(*dicts.itervalues()))
</snippet></ROW><ROW><id>5228363</id><snippet>tags = [
    { 'tag': 'django', 'size': 10 },
    { 'tag': 'python', 'size': 8 },
    { 'tag': 'Australia', 'size': 1 },
    { 'tag': 'coffee', 'size': 6 },
    { 'tag': 'pycon', 'size': 3 },
    { 'tag': 'html', 'size': 9 },
]
</snippet></ROW><ROW><id>5228363</id><snippet>&lt;div class="tag-cloud"&gt;
    {% for t in tags %}
        &lt;a href="/blog/tag/{{ t.tag }}/" class="size-{{ t.size }}"&gt;{{ t.tag }}&lt;/a&gt; 
    {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>5228363</id><snippet>.tag-cloud a.size-1 { font-size: 1.1em }
.tag-cloud a.size-2 { font-size: 1.2em }
.tag-cloud a.size-3 { font-size: 1.3em }
.tag-cloud a.size-4 { font-size: 1.4em }
.tag-cloud a.size-5 { font-size: 1.5em }
.tag-cloud a.size-6 { font-size: 1.6em }
.tag-cloud a.size-7 { font-size: 1.7em }
.tag-cloud a.size-8 { font-size: 1.8em }
.tag-cloud a.size-9 { font-size: 1.9em }
.tag-cloud a.size-10 { font-size: 2em }
</snippet></ROW><ROW><id>5228392</id><snippet>dist = sqrt( (x2 - x1)**2 + (y2 - y1)**2 )
</snippet></ROW><ROW><id>5228392</id><snippet>math.hypot()</snippet></ROW><ROW><id>5228392</id><snippet>dist = math.hypot(x2 - x1, y2 - y1)
</snippet></ROW><ROW><id>5228751</id><snippet>&lt;style&gt;</snippet></ROW><ROW><id>5228751</id><snippet>{% for word,count in latest_status.items %}
&lt;p style="font-size:{{ count }}px;"&gt; {{ word }}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>5228784</id><snippet># -*- coding:utf-8 -*-</snippet></ROW><ROW><id>5229021</id><snippet>import numpy
ra = numpy.recarray((10,), 'int,int,int')
</snippet></ROW><ROW><id>5229021</id><snippet>idx = numpy.argmax(ra['f0']-ra['f2'])
</snippet></ROW><ROW><id>5229021</id><snippet>print ra[idx]
</snippet></ROW><ROW><id>5229088</id><snippet>from django.template.defaultfilters import stringfilter
from urllib import unquote

@stringfilter
def unquote_raw(value):
    return unquote(value)
</snippet></ROW><ROW><id>5229088</id><snippet>{{ raw|unquote_raw }}
</snippet></ROW><ROW><id>5229215</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>5229228</id><snippet>&gt;&gt;&gt; from django.utils.safestring import SafeUnicode
&gt;&gt;&gt; su = SafeUnicode("This is my original &lt;strong&gt;Safe string&lt;/strong&gt;")
&gt;&gt;&gt; just_the_strong = SafeUnicode(su[20:])
&gt;&gt;&gt; print just_the_strong
u'&lt;strong&gt;Safe string&lt;/string&gt;'
&gt;&gt;&gt; type(just_the_strong)
&lt;class 'django.utils.safestring.SafeUnicode'&gt;
</snippet></ROW><ROW><id>5229350</id><snippet># setup.py
from distutils.core import setup
import py2exe,sys,os

origIsSystemDLL = py2exe.build_exe.isSystemDLL
def isSystemDLL(pathname):
        if os.path.basename(pathname).lower() in ("msvcp71.dll", "dwmapi.dll"):
                return 0
        return origIsSystemDLL(pathname)
py2exe.build_exe.isSystemDLL = isSystemDLL
</snippet></ROW><ROW><id>5229431</id><snippet>x = 4.12121212
print '%.2f' % x
</snippet></ROW><ROW><id>5229604</id><snippet>python pack.py</snippet></ROW><ROW><id>5229604</id><snippet>import util</snippet></ROW><ROW><id>5229604</id><snippet>python main.py</snippet></ROW><ROW><id>5229604</id><snippet>src</snippet></ROW><ROW><id>5229604</id><snippet>pack</snippet></ROW><ROW><id>5229604</id><snippet>from pack import pack</snippet></ROW><ROW><id>5229604</id><snippet>util.py</snippet></ROW><ROW><id>5229604</id><snippet>from pack import util</snippet></ROW><ROW><id>5229604</id><snippet>from . import util</snippet></ROW><ROW><id>5229604</id><snippet>pack.py</snippet></ROW><ROW><id>5229604</id><snippet>src/</snippet></ROW><ROW><id>5229604</id><snippet>src/pack</snippet></ROW><ROW><id>5229604</id><snippet>src/pack</snippet></ROW><ROW><id>5229604</id><snippet>src/pack</snippet></ROW><ROW><id>5229604</id><snippet>import pack</snippet></ROW><ROW><id>5229604</id><snippet>src/pack</snippet></ROW><ROW><id>5229604</id><snippet>from pack import util</snippet></ROW><ROW><id>5229604</id><snippet>pack.py</snippet></ROW><ROW><id>5229604</id><snippet>src</snippet></ROW><ROW><id>5229604</id><snippet>export PYTHONPATH=&lt;path&gt;</snippet></ROW><ROW><id>5230291</id><snippet>In []: P= arange(30).reshape(-1, 3)
In []: P[:, :, None]* P[:, None, :]
Out[]:
array([[[  0,   0,   0],
        [  0,   1,   2],
        [  0,   2,   4]],
       [[  9,  12,  15],
        [ 12,  16,  20],
        [ 15,  20,  25]],
       [[ 36,  42,  48],
        [ 42,  49,  56],
        [ 48,  56,  64]],
       #...   
       [[729, 756, 783],
        [756, 784, 812],
        [783, 812, 841]]])    
In []: P[1]* P[1][:, None]
Out[]:
array([[ 9, 12, 15],
       [12, 16, 20],
       [15, 20, 25]])
</snippet></ROW><ROW><id>5230293</id><snippet>[ast.literal_eval(x) for x in L]
</snippet></ROW><ROW><id>5230579</id><snippet>"button-press-event"</snippet></ROW><ROW><id>5230584</id><snippet>Subject("A") in subject_list
</snippet></ROW><ROW><id>5230584</id><snippet>Subject("A")</snippet></ROW><ROW><id>5230584</id><snippet>subject_list</snippet></ROW><ROW><id>5230584</id><snippet>Subject.__eq__()</snippet></ROW><ROW><id>5230584</id><snippet>False</snippet></ROW><ROW><id>5230584</id><snippet>False</snippet></ROW><ROW><id>5230584</id><snippet>Subject</snippet></ROW><ROW><id>5230584</id><snippet>__eq__()</snippet></ROW><ROW><id>5230584</id><snippet>Subject("A")</snippet></ROW><ROW><id>5230584</id><snippet>Subject("A") in subject_set
</snippet></ROW><ROW><id>5230584</id><snippet>Subject.__hash__()</snippet></ROW><ROW><id>5230584</id><snippet>Subject.__eq__()</snippet></ROW><ROW><id>5230584</id><snippet>Subject.__hash__()</snippet></ROW><ROW><id>5230584</id><snippet>Subject.__eq__()</snippet></ROW><ROW><id>5230881</id><snippet>import re

d = { 'gardai-plan-crackdown-on-troublemakers-at-protest-2438316.html': 
      {'dail': 1,
       'focus': 1,
       'actions': 1,
       'trade': 2,
       'protest': 1,
       'identify': 1 }}

for original_filename in d.keys():
    m = re.search('^(.*)\.html$',original_filename,)
    if not m:
        print "Ignoring the file:", original_filename
        continue
    output_filename = m.group(1)+'.arff'
    with open(output_filename,"w") as fp:
        fp.write('''@RELATION wordcounts

@ATTRIBUTE word string
@ATTRIBUTE count numeric

@DATA
''')
        for word_and_count in d[original_filename].items():
            fp.write("%s,%d\n" % word_and_count)
</snippet></ROW><ROW><id>5230881</id><snippet>@RELATION wordcounts

@ATTRIBUTE word string
@ATTRIBUTE count numeric

@DATA
dail,1
focus,1
actions,1
trade,2
protest,1
identify,1
</snippet></ROW><ROW><id>5230881</id><snippet>gardai-plan-crackdown-on-troublemakers-at-protest-2438316.arff</snippet></ROW><ROW><id>5230887</id><snippet>columnNames = {}</snippet></ROW><ROW><id>5230887</id><snippet>dict</snippet></ROW><ROW><id>5230887</id><snippet>columnNames = []</snippet></ROW><ROW><id>5230887</id><snippet>list</snippet></ROW><ROW><id>5230887</id><snippet>dict</snippet></ROW><ROW><id>5230887</id><snippet>list</snippet></ROW><ROW><id>5230961</id><snippet>urlparse.parse_qs()</snippet></ROW><ROW><id>5230961</id><snippet>keep_blank_values</snippet></ROW><ROW><id>5230961</id><snippet>&gt;&gt;&gt; from urlparse import parse_qs
&gt;&gt;&gt; parse_qs('blabla=hihi&amp;hello=', keep_blank_values=True)
{'blabla': ['hihi'], 'hello': ['']}
</snippet></ROW><ROW><id>5231224</id><snippet>()</snippet></ROW><ROW><id>5231224</id><snippet>f_values.items</snippet></ROW><ROW><id>5231224</id><snippet>lst = ['a', 'b', 'c']
di = {'a': 'a'}
class Foo:
   def bar(self): pass
</snippet></ROW><ROW><id>5231224</id><snippet>{{ lst.0 }}
{{ di.a }}
{{ foo.bar }}
</snippet></ROW><ROW><id>5231224</id><snippet>  {% for (key_o, value_o) in f_values.items %}
        &lt;tr class="row {% cycle 'odd' 'even' %}"&gt;
            {% for (key_i, val_i) in value_o.items %}
                &lt;td class="tile "&gt;
                    {{ val_i }} 
                &lt;/td&gt;
            {% endfor %}    
        &lt;/tr&gt;
    {% endfor %}
</snippet></ROW><ROW><id>5231235</id><snippet>join</snippet></ROW><ROW><id>5231235</id><snippet>&gt;&gt;&gt; lst = [1,2,3,4]
&gt;&gt;&gt; ",".join(str(item) for item in lst)
"1,2,3,4"
</snippet></ROW><ROW><id>5231235</id><snippet>",".join(l)</snippet></ROW><ROW><id>5231994</id><snippet>os.makedirs</snippet></ROW><ROW><id>5231994</id><snippet>os.chmod</snippet></ROW><ROW><id>5232283</id><snippet>prop=categories</snippet></ROW><ROW><id>5232283</id><snippet>prop=links&amp;plnamespace=14</snippet></ROW><ROW><id>5232283</id><snippet>prop=revisions</snippet></ROW><ROW><id>5232283</id><snippet>rvsection=0</snippet></ROW><ROW><id>5232283</id><snippet>list=categorymembers</snippet></ROW><ROW><id>5232283</id><snippet>prop=categories</snippet></ROW><ROW><id>5232494</id><snippet>{{ emp.get_names.names.a }} will get you 1 in the template

{{ emp.get_names.names }} will get you {'A':1} in the template

{{ emp.get_names }} will get you {'names_desc': {'b': 2}, 'names': {'a': 1}} in the template
</snippet></ROW><ROW><id>5232806</id><snippet>*z</snippet></ROW><ROW><id>5232806</id><snippet>**z</snippet></ROW><ROW><id>5232806</id><snippet>**z</snippet></ROW><ROW><id>5232806</id><snippet>z</snippet></ROW><ROW><id>5232806</id><snippet>    &gt;&gt;&gt; a = lambda z: z
    &gt;&gt;&gt; b = lambda *z: z
    &gt;&gt;&gt; c = lambda **z: z
    &gt;&gt;&gt; a([1,2,3])
    [1, 2, 3]
    &gt;&gt;&gt; b([1,2,3])
    ([1, 2, 3],)
    &gt;&gt;&gt; c([1,2,3]) # list arg passed, **kwargs expected
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: &lt;lambda&gt;() takes exactly 0 arguments (1 given)
    &gt;&gt;&gt; c(z=[1,2,3]) # explicit kwarg
    {'z': [1, 2, 3]}
    &gt;&gt;&gt; c(x=[1,2,3]) # explicit kwarg
    {'x': [1, 2, 3]}
    &gt;&gt;&gt; c({'x':[1,2,3]}) # dict called as a single arg
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: &lt;lambda&gt;() takes exactly 0 arguments (1 given)
    &gt;&gt;&gt; c(**{'x':[1,2,3]}) # dict called as **kwargs
    {'x': [1, 2, 3]}
    &gt;&gt;&gt; b(*[1,2,3]) # list called as *args
    (1, 2, 3)
</snippet></ROW><ROW><id>5233036</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>5233036</id><snippet>'product',</snippet></ROW><ROW><id>5233036</id><snippet>'myproject.product',</snippet></ROW><ROW><id>5233436</id><snippet>file('ngram_dict', 'w')
</snippet></ROW><ROW><id>5233436</id><snippet>lambda: 0</snippet></ROW><ROW><id>5233436</id><snippet>dict</snippet></ROW><ROW><id>5233436</id><snippet>.get</snippet></ROW><ROW><id>5233436</id><snippet>unique_ngrams_dict.default_factory = None
</snippet></ROW><ROW><id>5233436</id><snippet>unique_ngrams_dict.default_factory = lambda: 0
</snippet></ROW><ROW><id>5233436</id><snippet>class NgramDefault:
    def __call__():
        return 0
</snippet></ROW><ROW><id>5233436</id><snippet>NgramDefault()</snippet></ROW><ROW><id>5233436</id><snippet>lambda: 0</snippet></ROW><ROW><id>5233561</id><snippet>rebaseall</snippet></ROW><ROW><id>5233561</id><snippet>rebaseall -v</snippet></ROW><ROW><id>5233561</id><snippet>rebaseall</snippet></ROW><ROW><id>5233643</id><snippet>def make_incrementor(n):
  return lambda x: x + n
f = make_incrementor(42)
f(0)
&gt;&gt;&gt; 42
f(1)
&gt;&gt;&gt; 43
</snippet></ROW><ROW><id>5233643</id><snippet>f2 = make_incrementor(2)
f2(3)
&gt;&gt;&gt; 5
</snippet></ROW><ROW><id>5233775</id><snippet>html = """&lt;script&gt;    
registerImage("original_image", 
"this is a closing &lt;/script&gt; tag in quotes"
etc....
&lt;/script&gt;
"""

# code to strip &lt;script&gt; tags from an HTML page
from pyparsing import makeHTMLTags,SkipTo,quotedString

script,scriptEnd = makeHTMLTags("script")
scriptBody = script + SkipTo(scriptEnd, ignore=quotedString) + scriptEnd

descriptedHtml = scriptBody.suppress().transformString(html)
</snippet></ROW><ROW><id>5233855</id><snippet> for root, _, _ in os.walk('F:\music\test'):
     print(root)
</snippet></ROW><ROW><id>5233855</id><snippet>\t</snippet></ROW><ROW><id>5233855</id><snippet>'f:\\music\\test'</snippet></ROW><ROW><id>5233855</id><snippet>r'F:\music\test'</snippet></ROW><ROW><id>5233944</id><snippet>del _</snippet></ROW><ROW><id>5233944</id><snippet>_</snippet></ROW><ROW><id>5233944</id><snippet>&gt;&gt;&gt; 7*2
&gt;&gt;&gt; _
14
&gt;&gt;&gt; _ = 88
&gt;&gt;&gt; _
88
&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
88
&gt;&gt;&gt; del _
&gt;&gt;&gt; _
88
&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
3
</snippet></ROW><ROW><id>5234141</id><snippet>r"c:\ntext\text\file.rtf"
</snippet></ROW><ROW><id>5234170</id><snippet>itertools.islice()</snippet></ROW><ROW><id>5234170</id><snippet>itertools.islice(generator, start, stop, step)</snippet></ROW><ROW><id>5234170</id><snippet>result = tuple(generator)</snippet></ROW><ROW><id>5234170</id><snippet>my_list[start:stop:step]</snippet></ROW><ROW><id>5234170</id><snippet> my_list[:5] # grab the first five elements
 my_list[-5:] # grab the last five elements
           # (negative list indices start from the right side)

 import itertools
 itertools.islice(my_list, 0, 5) # grab the first five elements
</snippet></ROW><ROW><id>5234274</id><snippet>L = [...]</snippet></ROW><ROW><id>5234274</id><snippet>list</snippet></ROW><ROW><id>5234274</id><snippet>L</snippet></ROW><ROW><id>5234274</id><snippet>sorting</snippet></ROW><ROW><id>5234274</id><snippet>sorting</snippet></ROW><ROW><id>5234274</id><snippet>L</snippet></ROW><ROW><id>5234274</id><snippet>x</snippet></ROW><ROW><id>5234274</id><snippet>sort</snippet></ROW><ROW><id>5234274</id><snippet>x</snippet></ROW><ROW><id>5234274</id><snippet>self</snippet></ROW><ROW><id>5234274</id><snippet>testScope</snippet></ROW><ROW><id>5234274</id><snippet>print</snippet></ROW><ROW><id>5234274</id><snippet>__str__</snippet></ROW><ROW><id>5234284</id><snippet>tbody</snippet></ROW><ROW><id>5234284</id><snippet>table</snippet></ROW><ROW><id>5234284</id><snippet>tr</snippet></ROW><ROW><id>5234284</id><snippet>for node in page.xpath('.//table[@class="gridtable"]/tr'):
</snippet></ROW><ROW><id>5234562</id><snippet>b</snippet></ROW><ROW><id>5234562</id><snippet>self.buttons</snippet></ROW><ROW><id>5234562</id><snippet>b</snippet></ROW><ROW><id>5234642</id><snippet>func</snippet></ROW><ROW><id>5234642</id><snippet>parent_func()</snippet></ROW><ROW><id>5234642</id><snippet>def parent_func(func):
    def decorator(a,b):
        return a + b

    decorator.original_function = func
    return decorator
</snippet></ROW><ROW><id>5235088</id><snippet>import urllib2
req = urllib2.Request('http://www.futurebazaar.com/Search/laptop')
req.add_header('Accept', '*/*')
f = urllib2.urlopen(req)
</snippet></ROW><ROW><id>5235120</id><snippet>urlparse</snippet></ROW><ROW><id>5235120</id><snippet>namedtuple</snippet></ROW><ROW><id>5235120</id><snippet>collections</snippet></ROW><ROW><id>5235120</id><snippet>urlparse</snippet></ROW><ROW><id>5235358</id><snippet>gtk.widget</snippet></ROW><ROW><id>5235358</id><snippet>gtk.scrolledwindow</snippet></ROW><ROW><id>5235358</id><snippet>self.treeview.connect('size-allocate', self.treeview_changed)
</snippet></ROW><ROW><id>5235358</id><snippet>def treeview_changed(self, widget, event, data=None):
    adj = self.scrolled_window.get_vadjustment()
    adj.set_value( adj.upper - adj.page_size )
</snippet></ROW><ROW><id>5235523</id><snippet>()</snippet></ROW><ROW><id>5235523</id><snippet>GetData()</snippet></ROW><ROW><id>5235523</id><snippet>(?:whatever)</snippet></ROW><ROW><id>5235523</id><snippet>('^GetData/((?:0?[1-9]|[12][0-9]|3[01])[- /.](?:0?[1-9]|1[012])[- /.](?:19|20)?[0-9]{2})*',GetData)
</snippet></ROW><ROW><id>5235552</id><snippet>&gt;&gt;&gt; from twisted.internet import reactor
&gt;&gt;&gt; reactor.stop()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/internet/base.py", line 570, in stop
    "Can't stop reactor that isn't running.")
twisted.internet.error.ReactorNotRunning: Can't stop reactor that isn't running.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5235552</id><snippet>reactor.stop</snippet></ROW><ROW><id>5235552</id><snippet>&gt;&gt;&gt; from twisted.internet import reactor
&gt;&gt;&gt; reactor.callLater(3, reactor.stop)
&lt;twisted.internet.base.DelayedCall instance at 0xb762d2ec&gt;
&gt;&gt;&gt; reactor.run()
[... pause ...]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5235552</id><snippet>TimerService</snippet></ROW><ROW><id>5235552</id><snippet>LoopingCall</snippet></ROW><ROW><id>5235552</id><snippet>LoopingCall</snippet></ROW><ROW><id>5235552</id><snippet>now=True</snippet></ROW><ROW><id>5235552</id><snippet>run</snippet></ROW><ROW><id>5235552</id><snippet>TimerService.startService</snippet></ROW><ROW><id>5235552</id><snippet>from twisted.application.internet import TimerService

def foo():
    from twisted.internet import reactor
    reactor.stop()

from twisted.application.service import Application

application = Application("timer stop")
TimerService(3, foo).setServiceParent(application)
</snippet></ROW><ROW><id>5235552</id><snippet>exarkun@boson:/tmp$ twistd -ny timerstop.tac
2011-03-08 11:46:19-0500 [-] Log opened.
2011-03-08 11:46:19-0500 [-] using set_wakeup_fd
2011-03-08 11:46:19-0500 [-] twistd 10.2.0+r30835 (/usr/bin/python 2.6.4) starting up.
2011-03-08 11:46:19-0500 [-] reactor class: twisted.internet.selectreactor.SelectReactor.
2011-03-08 11:46:19-0500 [-] Unhandled Error
        Traceback (most recent call last):
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/application/service.py", line 277, in startService
            service.startService()
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/application/internet.py", line 284, in startService
            self._loop.start(self.step, now=True).addErrback(self._failed)
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/internet/task.py", line 163, in start
            self()
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/internet/task.py", line 194, in __call__
            d = defer.maybeDeferred(self.f, *self.a, **self.kw)
        --- &lt;exception caught here&gt; ---
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/internet/defer.py", line 133, in maybeDeferred
            result = f(*args, **kw)
          File "timerstop.py", line 5, in foo
            reactor.stop()
          File "/home/exarkun/Projects/Twisted/branches/simplify-ssl-4905/twisted/internet/base.py", line 570, in stop
            "Can't stop reactor that isn't running.")
        twisted.internet.error.ReactorNotRunning: Can't stop reactor that isn't running.
</snippet></ROW><ROW><id>5235552</id><snippet>from twisted.application.internet import TimerService

counter = 0

def foo():
    global counter
    if counter == 1:
        from twisted.internet import reactor
        reactor.stop()
    else:
        counter += 1

from twisted.application.service import Application

application = Application("timer stop")
TimerService(3, foo).setServiceParent(application)
</snippet></ROW><ROW><id>5235552</id><snippet>from twisted.application.internet import TimerService

def foo():
    from twisted.internet import reactor
    reactor.callWhenRunning(reactor.stop)

from twisted.application.service import Application

application = Application("timer stop")
TimerService(3, foo).setServiceParent(application)
</snippet></ROW><ROW><id>5235568</id><snippet>raw_input</snippet></ROW><ROW><id>5235568</id><snippet>raw_input("is it", guess, "?:")</snippet></ROW><ROW><id>5235568</id><snippet>raw_input</snippet></ROW><ROW><id>5235568</id><snippet>raw_input("is it %s?" %(guess, ))</snippet></ROW><ROW><id>5235966</id><snippet>get()</snippet></ROW><ROW><id>5235966</id><snippet>w</snippet></ROW><ROW><id>5235966</id><snippet>0</snippet></ROW><ROW><id>5235966</id><snippet>w</snippet></ROW><ROW><id>5235966</id><snippet>get</snippet></ROW><ROW><id>5235966</id><snippet>0</snippet></ROW><ROW><id>5235970</id><snippet>is_word(wordlist,text.split()[0])</snippet></ROW><ROW><id>5235970</id><snippet>for shift in range(27):
    text=apply_shifts(text, [(start,-shift)])
</snippet></ROW><ROW><id>5235970</id><snippet>1, 2, 3, ...</snippet></ROW><ROW><id>5235970</id><snippet>1, 3, 6, 10, ...</snippet></ROW><ROW><id>5235970</id><snippet>1</snippet></ROW><ROW><id>5236091</id><snippet>&lt;category label="Age" term="Past day"/&gt;</snippet></ROW><ROW><id>5236091</id><snippet>&lt;category label="Age" term="Past week"/&gt;</snippet></ROW><ROW><id>5236091</id><snippet>def findQuakeAge(entry):
    start = entry.find('&lt;category label="Age" term="') + 28
    end = entry.find('"/&gt;', start)
    age = entry[start:end]
    return age
</snippet></ROW><ROW><id>5236091</id><snippet>"Past day"</snippet></ROW><ROW><id>5236091</id><snippet>from datetime import datetime, timedelta

quakeTime = datetime.strptime(quakeTime, "%A, %B %d, %Y %H:%M:%S %Z")

if datetime.now() - quakeTime &lt; timedelta(days=1):
    # quake was less than a day ago
</snippet></ROW><ROW><id>5236091</id><snippet>strptime()</snippet></ROW><ROW><id>5236091</id><snippet>-3</snippet></ROW><ROW><id>5236091</id><snippet>findQuakeTime()</snippet></ROW><ROW><id>5236375</id><snippet>new_dict = {}
for item in data:
   name = item['name']
   new_dict[name] = item
</snippet></ROW><ROW><id>5236375</id><snippet>new_dict = {item['name']:item for item in data}
</snippet></ROW><ROW><id>5236375</id><snippet>new_dict = {}
for item in data:
   name = item.pop('name')
   new_dict[name] = item
</snippet></ROW><ROW><id>5236869</id><snippet>soup = BeautifulSoup (html.decode('utf-8', 'ignore'))</snippet></ROW><ROW><id>5237039</id><snippet>if unicode_variable == string_variable.decode('latin1')
</snippet></ROW><ROW><id>5237068</id><snippet>import socket
import dns.resolver

# Basic query
for rdata in dns.resolver.query('www.yahoo.com', 'CNAME') :
    print rdata.target

# Set the DNS Server
resolver = dns.resolver.Resolver()
resolver.nameservers=[socket.gethostbyname('ns1.cisco.com')]
for rdata in resolver.query('www.yahoo.com', 'CNAME') :
    print rdata.target
</snippet></ROW><ROW><id>5237467</id><snippet>some comment text</snippet></ROW><ROW><id>5237467</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>5237467</id><snippet>from BeautifulSoup import BeautifulSoup, Comment

soup = BeautifulSoup('''&lt;html&gt;
&lt;body&gt;
&lt;p&gt;paragraph 1&lt;/p&gt;
&lt;p&gt;paragraph 2&lt;/p&gt;
&lt;!--some comment text--&gt;
&lt;p&gt;paragraph 3&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;''')

def right_comment(e):
    return isinstance(e, Comment) and e == 'some comment text'

e = soup.find(text=right_comment)

print e.findPreviousSibling('p')
</snippet></ROW><ROW><id>5237467</id><snippet>&lt;p&gt;paragraph 2&lt;/p&gt;
</snippet></ROW><ROW><id>5237547</id><snippet>customerIndex = { customer['name']:customer for customer in customers }
for row in rows:
    name = row.value('customer','name')
    print name, customerIndex[name]
</snippet></ROW><ROW><id>5237547</id><snippet>row INNER JOIN customer ON row.customer_id==customer.id</snippet></ROW><ROW><id>5237665</id><snippet>import multiprocessing

try:
    cpus = multiprocessing.cpu_count()
except NotImplementedError:
    cpus = 2   # arbitrary default


def square(n):
    return n * n

pool = multiprocessing.Pool(processes=cpus)
print pool.map(square, xrange(1000))
</snippet></ROW><ROW><id>5237876</id><snippet>select</snippet></ROW><ROW><id>5237876</id><snippet>send</snippet></ROW><ROW><id>5238096</id><snippet>pip install numpy</snippet></ROW><ROW><id>5238096</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/{2.5,2.6,2.7,...}</snippet></ROW><ROW><id>5238096</id><snippet>Versions/{2.5,2.6,2.7,...}/bin</snippet></ROW><ROW><id>5238096</id><snippet>export PATH=/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin:$PATH</snippet></ROW><ROW><id>5238096</id><snippet>~/.profile</snippet></ROW><ROW><id>5238096</id><snippet>echo Selected python is \"$(python_select -s)\"</snippet></ROW><ROW><id>5238096</id><snippet>~/.profile</snippet></ROW><ROW><id>5238199</id><snippet>age + subtract(height, multiply(weight, devide(iq, 2)))
</snippet></ROW><ROW><id>5238349</id><snippet>def dijkstra(u,graph):
  n = graph.numNodes
    l = { u : 0 } ; W = graph.V()
    F = [] ; k = {}
    for i in range(0,n):
      lv,v = min([ (l[lk],lk) for lk in l.keys() if lk in W ])
      W.remove(v)
      if v!=u: F.append(k[v])
      for v1 in [ v2 for v2 in graph.G(v) if v2 in W ]:
        if v1 not in l or l[v]+graph.w(v,v1) &lt; l[v1]:
          l[v1] = l[v] + graph.w(v,v1)
          k[v1] = (v,v1)
    return l,F
</snippet></ROW><ROW><id>5238418</id><snippet>&gt;&gt;&gt; ' '.join('abcdefg')
'a b c d e f g'
</snippet></ROW><ROW><id>5238568</id><snippet>from itertools import chain

def flatten(listOfLists):
    return chain.from_iterable(listOfLists)

def get():
    for i in range(3):
        yield [0]

print(list(flatten(get())))
# [0, 0, 0]
</snippet></ROW><ROW><id>5238585</id><snippet>units</snippet></ROW><ROW><id>5238585</id><snippet>from setuptools import setup, Extension

sources = ['src/units.c']
ext_opts = {'extra_compile_args': ['-Wl,-soname,units.so', '-Isrc']}

setup(
    name='units',
    ext_modules = [Extension('units', sources, **ext_opts)]
    )
</snippet></ROW><ROW><id>5238598</id><snippet>python manage.py shell</snippet></ROW><ROW><id>5238598</id><snippet>&gt;&gt;&gt; from mango.auth import User
</snippet></ROW><ROW><id>5238644</id><snippet>find_package(Boost COMPONENTS filesystem system date_time python REQUIRED)
message("Include dirs of boost: " ${Boost_INCLUDE_DIRS} )
message("Libs of boost: " ${Boost_LIBRARIES} )

find_package(PythonLibs REQUIRED)
message("Include dirs of Python: " ${PYTHON_INCLUDE_DIRS} )
message("Libs of Python: " ${PYTHON_LIBRARIES} )

include_directories(
    ${Boost_INCLUDE_DIRS}
    ${PYTHON_INCLUDE_DIRS}  # &lt;-------
        ...
)

target_link_libraries(Themisto
    ${Boost_LIBRARIES}
    ${PYTHON_LIBRARIES} # &lt;------
    ...
)
...
</snippet></ROW><ROW><id>5238957</id><snippet>{% load thumbnail %}
...
{% thumbnail image.path "200x100" as im %}
    &lt;img src="{{ im.url }}" alt="{{ im.name }}"/&gt;
{% endthumbnail %}
...
</snippet></ROW><ROW><id>5238957</id><snippet>def __unicode__(self):
    return self.image.path
</snippet></ROW><ROW><id>5239076</id><snippet>a = "A"
b = "B"
c = a + b
print c

&gt; AB
</snippet></ROW><ROW><id>5239076</id><snippet>c = a + b
c = '%s%s' % (a,b)
c = "{0}{1}".format(a, b)
</snippet></ROW><ROW><id>5239076</id><snippet>+:  0.232225275772
%s: 0.42436670365
{}: 0.683854960343
</snippet></ROW><ROW><id>5239076</id><snippet>+: 0.82
%s: 1.54
{}: 2.03
</snippet></ROW><ROW><id>5239102</id><snippet>str()</snippet></ROW><ROW><id>5239396</id><snippet>cls.__new__(cls, *args)</snippet></ROW><ROW><id>5239396</id><snippet>__reduce__</snippet></ROW><ROW><id>5239396</id><snippet>__new__</snippet></ROW><ROW><id>5239396</id><snippet>**kwargs</snippet></ROW><ROW><id>5239396</id><snippet>import cPickle

class Blubb(object):

    def __init__(self, value, foo=None, bar=None):
        self.value = value
        self.foo = foo
        self.bar = bar

def _new_Bla(cls, value, kw):
    "A function to map kwargs into cls.__new__"
    return cls.__new__(cls, value, **kw)

class Bla(Blubb):

    def __new__(cls, value, **kw):
        instance = super(Bla, cls).__new__(cls)
        instance.__init__(value, **kw)
        return instance

    def __reduce__(self):
        kwargs = {'foo': self.foo, 'bar': self.bar}
        return _new_Bla, (self.__class__, self.value, kwargs), None

x = Bla(2, bar=[1, 2, 3])
pickled = cPickle.dumps(x, 2)
y = cPickle.loads(pickled)
assert y.value == 2
assert y.bar == [1, 2, 3]
</snippet></ROW><ROW><id>5239583</id><snippet>Dir</snippet></ROW><ROW><id>5239583</id><snippet>str()</snippet></ROW><ROW><id>5239583</id><snippet>path.endswith('/')</snippet></ROW><ROW><id>5239583</id><snippet>SCons.Script.Main._load_site_scons_dir(
    str(SCons.Node.FS.get_default_fs().SConstruct_dir), site_dir)
</snippet></ROW><ROW><id>5239583</id><snippet>SCons.Script.Main._load_site_scons_dir(
    str(SCons.Node.FS.get_default_fs().SConstruct_dir), None)
</snippet></ROW><ROW><id>5239594</id><snippet>urlparse.parse_qs()</snippet></ROW><ROW><id>5239594</id><snippet>print urlparse.parse_qs(os.environ['QUERY_STRING'])
</snippet></ROW><ROW><id>5239594</id><snippet>urlparse.parse_qsl()</snippet></ROW><ROW><id>5239831</id><snippet>import collections
words = ['all', 'awesome', 'all', 'yeah', 'bye', 'all', 'yeah']
counter = collections.Counter(words)
print(counter.most_common())
&gt;&gt;&gt; [('all', 3), ('yeah', 2), ('bye', 1), ('awesome', 1)]
</snippet></ROW><ROW><id>5239873</id><snippet>*</snippet></ROW><ROW><id>5239873</id><snippet>uniqueCrossTabs</snippet></ROW><ROW><id>5239873</id><snippet>[ [ 1, 2 ], [ 3, 4 ] ]</snippet></ROW><ROW><id>5239873</id><snippet>itertools.chain(*uniqueCrossTabs)</snippet></ROW><ROW><id>5239873</id><snippet>itertools.chain([ 1, 2 ], [ 3, 4 ])</snippet></ROW><ROW><id>5239873</id><snippet>uniqueCrossTabs</snippet></ROW><ROW><id>5239873</id><snippet>itertools.chain()</snippet></ROW><ROW><id>5239873</id><snippet>uniqueCrossTabs</snippet></ROW><ROW><id>5239873</id><snippet>chain()</snippet></ROW><ROW><id>5239873</id><snippet>*</snippet></ROW><ROW><id>5239873</id><snippet>chain.from_iterable()</snippet></ROW><ROW><id>5239873</id><snippet>uniqueCrossTabs = list(itertools.chain.from_iterable(uniqueCrossTabs))
</snippet></ROW><ROW><id>5240061</id><snippet>django-threadedcomments</snippet></ROW><ROW><id>5240358</id><snippet>stuff.abc.views</snippet></ROW><ROW><id>5240358</id><snippet>video</snippet></ROW><ROW><id>5240358</id><snippet>ad</snippet></ROW><ROW><id>5240358</id><snippet>ViewDoesNotExist</snippet></ROW><ROW><id>5240358</id><snippet>attribute error</snippet></ROW><ROW><id>5240556</id><snippet>imap</snippet></ROW><ROW><id>5240556</id><snippet>(x + 3 for x in mylist)
</snippet></ROW><ROW><id>5240556</id><snippet>imap</snippet></ROW><ROW><id>5240556</id><snippet>partial</snippet></ROW><ROW><id>5240556</id><snippet>lambda</snippet></ROW><ROW><id>5240556</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def a(*args):
...     return sum(args)
... 
&gt;&gt;&gt; b = partial(a, 2, 3)
&gt;&gt;&gt; b(6, 7, 8)
26
</snippet></ROW><ROW><id>5240556</id><snippet>lambda</snippet></ROW><ROW><id>5240556</id><snippet>&gt;&gt;&gt; b = lambda *args: a(2, 3, *args)
&gt;&gt;&gt; b(6, 7, 8)
26
</snippet></ROW><ROW><id>5240556</id><snippet>lambda</snippet></ROW><ROW><id>5240556</id><snippet>partial</snippet></ROW><ROW><id>5240556</id><snippet>&gt;&gt;&gt; def a(x, y, z):
...    return x + y - z
...
&gt;&gt;&gt; b = lambda m, n: a(m, 1, n)
&gt;&gt;&gt; b(2, 5)
-2
</snippet></ROW><ROW><id>5240573</id><snippet>&gt;&gt;&gt; class MyList(list):
...   pass
... 
&gt;&gt;&gt; m = MyList((1, 2, 3))
&gt;&gt;&gt; len(m)
3
&gt;&gt;&gt; m.foo = 42
&gt;&gt;&gt; m.foo
42
</snippet></ROW><ROW><id>5240748</id><snippet>re.search</snippet></ROW><ROW><id>5240748</id><snippet>re.match</snippet></ROW><ROW><id>5240748</id><snippet>(?P&lt;...&gt;)</snippet></ROW><ROW><id>5240748</id><snippet>(?&lt;...&gt;)</snippet></ROW><ROW><id>5240748</id><snippet>re.search("__viewstate[^&gt;]+value=\"(?P&lt;Value&gt;[^\"]*)", s, re.IGNORECASE)</snippet></ROW><ROW><id>5240957</id><snippet>In [4]: import urlparse

In [6]: parsed_url = urlparse.urlparse('http://councilroom.com/player?player=G%C3%B6rling')

In [7]: parsed_url
Out[7]: ParseResult(scheme='http', netloc='councilroom.com', path='/player', params='', query='player=G%C3%B6rling', fragment='')

In [8]: query_dict = dict(urlparse.parse_qsl(parsed_url.query))

In [9]: query_dict
Out[9]: {'player': 'G\xc3\xb6rling'}
</snippet></ROW><ROW><id>5240957</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>5240957</id><snippet>In [10]: target_player = query_dict['player'].decode('utf-8')

In [11]: target_player
Out[11]: u'G\xf6rling'

In [12]: print(target_player)
Görling
</snippet></ROW><ROW><id>5240957</id><snippet>str</snippet></ROW><ROW><id>5240957</id><snippet>'G\xc3\xb6rling'</snippet></ROW><ROW><id>5240957</id><snippet>Görling</snippet></ROW><ROW><id>5240957</id><snippet>GÃ¶rling</snippet></ROW><ROW><id>5240957</id><snippet>In [3]: print(u'G\xc3\xb6rling')
GÃ¶rling
</snippet></ROW><ROW><id>5241018</id><snippet>&gt;&gt;&gt; int(re.search('\d+', u'adw第五代222').group())
222
</snippet></ROW><ROW><id>5241054</id><snippet>USER_ID = #Get your user ID
query = (db.auth_event.description.like('%Logged-in%'))&amp;(db.auth_event.user_id==USER_ID) 
if db(query).count() == 1:
    #this is the first login of this user
    ldap_mail = #Call LDAP to get the email 
    #store the email adress in auth_user
    db(db.auth_user.id==USER_ID).update(email=ldap_mail)
</snippet></ROW><ROW><id>5241251</id><snippet>key-press-event</snippet></ROW><ROW><id>5241251</id><snippet>window-state-event</snippet></ROW><ROW><id>5241251</id><snippet>window.fullscreen()</snippet></ROW><ROW><id>5241251</id><snippet>window.unfullscreen()</snippet></ROW><ROW><id>5241251</id><snippet>class FullscreenToggler(object):

    def __init__(self, window, keysym=gtk.keysyms.F11):
        self.window = window
        self.keysym = keysym
        self.window_is_fullscreen = False
        self.window.connect_object('window-state-event',
                                   FullscreenToggler.on_window_state_change,
                                   self)

    def on_window_state_change(self, event):
        self.window_is_fullscreen = bool(
            gtk.gdk.WINDOW_STATE_FULLSCREEN &amp; event.new_window_state)

    def toggle(self, event):
        if event.keyval == self.keysym:
            if self.window_is_fullscreen:
                self.window.unfullscreen()
            else:
                self.window.fullscreen()
</snippet></ROW><ROW><id>5241251</id><snippet>toggler = FullscreenToggler(window)
window.connect_object('key-press-event', FullscreenToggler.toggle, toggler)
</snippet></ROW><ROW><id>5241251</id><snippet>connect_object</snippet></ROW><ROW><id>5241251</id><snippet>connect</snippet></ROW><ROW><id>5241251</id><snippet>def fullscreen_toggler(window, event, keysym=gtk.keysyms.F11):
    if event.keyval == keysym:
        fullscreen = bool(
                gtk.gdk.WINDOW_STATE_FULLSCREEN &amp;
                window.get_property('window-state'))
        if fullscreen:
            window.unfullscreen()
        else:
            window.fullscreen()
</snippet></ROW><ROW><id>5241251</id><snippet>window.connect('key-press-event', fullscreen_toggler)
</snippet></ROW><ROW><id>5241478</id><snippet>uuid.uuid4().bytes</snippet></ROW><ROW><id>5241478</id><snippet>CREATE TABLE xyz (
    added_id INT AUTO_INCREMENT NOT NULL,
    id BINARY(16) NOT NULL,
    PRIMARY KEY (added_id),
    UNIQUE (id)
) DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci ENGINE=InnoDB;
</snippet></ROW><ROW><id>5241478</id><snippet>import binascii
import MySQLdb
import uuid

conn = MySQLdb.connect(host='localhost')

key = uuid.uuid4()
print 'inserting', repr(key.bytes)
r = conn.cursor()
r.execute('INSERT INTO xyz (id) VALUES (%s)', key.bytes)
conn.commit()

print 'selecting', repr(key.bytes)
r.execute('SELECT added_id, id FROM xyz WHERE id = %s', key.bytes)
for row in r.fetchall():
    print row[0], binascii.b2a_hex(row[1])
</snippet></ROW><ROW><id>5241478</id><snippet>% python qu.py    
inserting '\x96\xc5\xa4\xc3Z+L\xf0\x86\x1e\x05\xebt\xf7\\\xd5'
selecting '\x96\xc5\xa4\xc3Z+L\xf0\x86\x1e\x05\xebt\xf7\\\xd5'
1 96c5a4c35a2b4cf0861e05eb74f75cd5
% python qu.py
inserting '\xac\xc9,jn\xb2O@\xbb\xa27h\xcd&lt;B\xda'
selecting '\xac\xc9,jn\xb2O@\xbb\xa27h\xcd&lt;B\xda'
2 acc92c6a6eb24f40bba23768cd3c42da
</snippet></ROW><ROW><id>5241603</id><snippet>RewriteEngine On 
RewriteRule ^(.*)$  http://a.b.com/abc/def?info=$1 [L] 
</snippet></ROW><ROW><id>5241801</id><snippet>itertools.islice</snippet></ROW><ROW><id>5241801</id><snippet>itertools.islice(lst, 0, None, 2)
</snippet></ROW><ROW><id>5241801</id><snippet>0</snippet></ROW><ROW><id>5241801</id><snippet>2</snippet></ROW><ROW><id>5241801</id><snippet>[(1, 2), (1, 5)]</snippet></ROW><ROW><id>5241801</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; list(itertools.islice(lst, 0, None, 2))
[1, 3, 5]
&gt;&gt;&gt; list(itertools.islice(lst, 0, None, 2))
[2, 4, 6]
</snippet></ROW><ROW><id>5241801</id><snippet>&gt;&gt;&gt; def foo():
...     for i in range(6):
...         yield i + 1
&gt;&gt;&gt;
&gt;&gt;&gt; gen = foo()
&gt;&gt;&gt; list(itertools.islice(gen, 0, None, 2)
[1, 3, 5]
&gt;&gt;&gt; list(itertools.islice(gen, 1, None, 2)
[]
</snippet></ROW><ROW><id>5241801</id><snippet>&gt;&gt;&gt; [itertools.islice(lst, i, None, 2) for i in range(2)]
[&lt;itertools.islice object at 0x7f958a79eaf8&gt;, &lt;itertools.islice object at 0x7f958a79eaa0&gt;]
</snippet></ROW><ROW><id>5241801</id><snippet>zip</snippet></ROW><ROW><id>5241801</id><snippet>itertools.izip</snippet></ROW><ROW><id>5241801</id><snippet>&gt;&gt;&gt; list(zip([1, 3, 5], [2, 4, 6]))
[(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; tmp = itertools.izip(*[itertools.islice(lst, i, None, 2) for i in range(2)])
&gt;&gt;&gt; tmp
&lt;itertools.izip object at 0x7f958a7b6cf8&gt;
&gt;&gt;&gt; list(tmp)
[(1, 2), (3, 4), (5, 6)]
</snippet></ROW><ROW><id>5241875</id><snippet>sys.append</snippet></ROW><ROW><id>5241875</id><snippet>2011</snippet></ROW><ROW><id>5241875</id><snippet>2010</snippet></ROW><ROW><id>5241875</id><snippet>import sys
sys.path.append('./stanford-parser-2010-11-30/stanford-parser-2010-11-30.jar')
from edu.stanford.nlp import *
print fsm
&lt;java package edu.stanford.nlp.fsm 1&gt;
</snippet></ROW><ROW><id>5242033</id><snippet>__getattr__</snippet></ROW><ROW><id>5242033</id><snippet>In [1]: class test(object):
   ...:     a = 'hi'
   ...:     def __getattr__(self, val):
   ...:         print 'you are accessing ', val
   ...:         
   ...:         

In [2]: t = test()

In [3]: t.b
you are accessing  b

In [4]: t.c
you are accessing  c

In [5]: t.a
Out[5]: 'hi'
</snippet></ROW><ROW><id>5242033</id><snippet>class test(object):
    a = 'hi'

    def msg(self, var, default='undefined'):
        setattr(self, var, default)
        return default

    def __getattr__(self, val):
        print 'attribute %s not found, setting..' % val
        return self.msg(val)


&gt;&gt;&gt; t = test()
&gt;&gt;&gt; print t.a
'hi'
&gt;&gt;&gt; print t.b
'attribute b not found, setting..'
'undefined'
&gt;&gt;&gt; t.b = 'this is black magic'
&gt;&gt;&gt; # notice no message is printed here about attribute not found
&gt;&gt;&gt; print t.b
'this is black magic'
</snippet></ROW><ROW><id>5242033</id><snippet>&gt;&gt;&gt; d = {'a': '1'}
&gt;&gt;&gt; d.setdefault('b', 'b')
'b'
&gt;&gt;&gt; d
{'a': '1', 'b': 'b'}
&gt;&gt;&gt; d.setdefault('a', 'b')
'1'
&gt;&gt;&gt; d
{'a': '1', 'b': 'b'}
</snippet></ROW><ROW><id>5242223</id><snippet>app = web.application(urls, globals())

if __name__ == '__main__':
    app.run()
else:
    web.config.debug = False
    application = app.wsgifunc()
</snippet></ROW><ROW><id>5242223</id><snippet>$ python ./wsgi.py
</snippet></ROW><ROW><id>5242223</id><snippet>import web

urls = (
  '/(.*)', 'Hello'
)

class Hello(object):

    def GET(self, name):
        if not name:
            name = 'World'
        return 'Hello, ' + name + '!'

app = web.application(urls, globals())

if __name__ == '__main__':
    app.run()
else:
    web.config.debug = False
    application = app.wsgifunc()
</snippet></ROW><ROW><id>5242223</id><snippet>web.py
</snippet></ROW><ROW><id>5242285</id><snippet>getattr(aa, i)</snippet></ROW><ROW><id>5242322</id><snippet>import string
import re

s = u"Dobre uczynki są jak dobre poematy. Można łatwo uchwycić, ku czemu zmierzają, lecz nie zawsze da się je racjonalnie wytłumaczyć."
regex = re.compile(r'[%s\s]+' % re.escape(string.punctuation))
print regex.split(s)
</snippet></ROW><ROW><id>5242329</id><snippet>dict1</snippet></ROW><ROW><id>5242329</id><snippet>dict2</snippet></ROW><ROW><id>5242329</id><snippet>x</snippet></ROW><ROW><id>5242329</id><snippet>x</snippet></ROW><ROW><id>5242329</id><snippet>keys()</snippet></ROW><ROW><id>5242329</id><snippet>allkey = reduce(lambda x, y: x.union(y.keys()), alldict, set())
</snippet></ROW><ROW><id>5242329</id><snippet>allkey = reduce(set.union, map(set, map(dict.keys, alldict)))
</snippet></ROW><ROW><id>5242486</id><snippet>typedef void (*Function1)(const uint16_t *data, 
                          unsigned width, unsigned height,
                          void *user_data);
void SetCallBack(Function1, void*);
</snippet></ROW><ROW><id>5242486</id><snippet>void*</snippet></ROW><ROW><id>5242486</id><snippet>SetCallBack</snippet></ROW><ROW><id>5242486</id><snippet>SetCallBack</snippet></ROW><ROW><id>5242486</id><snippet>PySetCallback</snippet></ROW><ROW><id>5242752</id><snippet>for i in b:
    print a.get(i, "default string")
</snippet></ROW><ROW><id>5242856</id><snippet>#As pymunk is python and not C, the constructor to PivotJoint is defined as
def __init__(self, a, b, *args):
    pass

#and the straight conversion from c to python is
pivot1 = PivotJoint(tankControlBody, tankBody, Vec2d.zero(), Vec2d.zero())
# but ofc it works equally well with 0 tuples instead of the zero() methods:
pivot2 = PivotJoint(tankControlBody, tankBody, (0,0), (0,0))

mySpace.add(pivot1, pivot2)
</snippet></ROW><ROW><id>5242869</id><snippet>def int_to_list(i):
    return [int(x) for x in str(i).zfill(9)]

def list_to_int(l):
    return int("".join(str(x) for x in l))
</snippet></ROW><ROW><id>5242869</id><snippet>str.zfill</snippet></ROW><ROW><id>5242883</id><snippet> import psycopg 

 #fill in &lt; &gt; with relevant values
 pgconnection = psycopg.connect('dbname=datastation', 'user=&lt;user&gt;') 

 curs=pgconnection.cursor() 

 statement = 'SELECT column FROM data'

 curs.execute(statement)

 records = curs.fetchall()

 for record in records:
     print record
</snippet></ROW><ROW><id>5242972</id><snippet>x += 1</snippet></ROW><ROW><id>5242972</id><snippet>x = x + 1</snippet></ROW><ROW><id>5243105</id><snippet>colorsys</snippet></ROW><ROW><id>5243105</id><snippet>#</snippet></ROW><ROW><id>5243580</id><snippet>base64.b32encode()</snippet></ROW><ROW><id>5243615</id><snippet>g_proptypes = dict((string, i) for i, string in enumerate(string_list))
</snippet></ROW><ROW><id>5243619</id><snippet>weekly</snippet></ROW><ROW><id>5243619</id><snippet>weekly = db.BooleanProperty()
</snippet></ROW><ROW><id>5243619</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>5243619</id><snippet>class WeeklyInfo(db.Model):
   user = db.UserProperty() 
   date = db.DateProperty(auto_now=False, auto_now_add=False)
   confirm = db.BooleanProperty()

class Demo(db.Model):
  someData = db.StringProperty()
  weekly = db.ReferenceProperty(WeeklyInfo)
</snippet></ROW><ROW><id>5243633</id><snippet>works.log</snippet></ROW><ROW><id>5243633</id><snippet>&gt;&gt;&gt; data = open('works.log', 'rb').read()
&gt;&gt;&gt; all(d &lt; '\x80' for d in data)
True
</snippet></ROW><ROW><id>5243633</id><snippet>breaks.log</snippet></ROW><ROW><id>5243633</id><snippet>'\xff\xfe'</snippet></ROW><ROW><id>5243633</id><snippet>breaks.log</snippet></ROW><ROW><id>5243633</id><snippet>&gt;&gt;&gt; data = open('breaks.log', 'rb').read()
&gt;&gt;&gt; data[:2]
'\xff\xfe'
&gt;&gt;&gt; udata = data.decode('utf16')
&gt;&gt;&gt; all(d &lt; u'\x80' for d in udata)
True
</snippet></ROW><ROW><id>5243633</id><snippet>f = open(sys.argv[1])
mb_toc_urlpart = "%20".join(
    str(x) for x in calculate_mb_toc_numbers(filter_toc_entries(f)))
print mb_toc_urlpart
</snippet></ROW><ROW><id>5243633</id><snippet>f = open(sys.argv[1], 'rb')
data = f.read()
f.close()
if data[:2] == '\xff\xfe':
    data = data.decode('utf16').encode('ascii')
# ilines is a generator which produces newline-terminated strings
ilines = (line + '\n' for line in data.splitlines())
mb_toc_urlpart = "%20".join(
    str(x) for x in calculate_mb_toc_numbers(filter_toc_entries(ilines))        )
print mb_toc_urlpart
</snippet></ROW><ROW><id>5244198</id><snippet>_meta</snippet></ROW><ROW><id>5244198</id><snippet>for field in Model._meta.fields:
    field.get_attname_column()
</snippet></ROW><ROW><id>5244198</id><snippet>foo = models.IntegerField(db_column='bar')</snippet></ROW><ROW><id>5244198</id><snippet>('foo', 'bar')</snippet></ROW><ROW><id>5244508</id><snippet>(i for i in List_of_names if A == My_dictionary[i]).next()</snippet></ROW><ROW><id>5244508</id><snippet>KeyError</snippet></ROW><ROW><id>5244508</id><snippet>List_of_names</snippet></ROW><ROW><id>5244508</id><snippet>My_dictionary</snippet></ROW><ROW><id>5244508</id><snippet>StopIteration</snippet></ROW><ROW><id>5244582</id><snippet>data</snippet></ROW><ROW><id>5244582</id><snippet>data</snippet></ROW><ROW><id>5244582</id><snippet>DictWriter</snippet></ROW><ROW><id>5244582</id><snippet>data</snippet></ROW><ROW><id>5244582</id><snippet>from collections import defaultdict
import csv
from datetime import date

user_to_row = defaultdict(dict)

for d in data:
    user = d['user']
    status = d['status']
    row_dict = user_to_row[user]
    row_dict['user'] = user
    date_string = str(d['date'])
    if date_string in d and row_dict[date_string] != status:
        raise Exception, "Contradiction: '%s' on '%s'" % (user,date_string)
    row_dict[date_string] = status
    # If a value isn't set in one of the total columns yet, set it to 0:
    row_dict.setdefault('p-total',0)
    row_dict.setdefault('E-total',0)
    row_dict.setdefault('total',0)
    # Make sure you increment the right column:
    count_column = 'p-total' if (status == 'P') else 'E-total'
    row_dict[count_column] += 1
    # And increment the overall total column in any case:
    row_dict['total'] += 1
</snippet></ROW><ROW><id>5244582</id><snippet>user_to_row</snippet></ROW><ROW><id>5244582</id><snippet>user_to_row</snippet></ROW><ROW><id>5244582</id><snippet>Unknown</snippet></ROW><ROW><id>5244582</id><snippet>with open("hello.csv","w") as f:

    # Create the headings:
    headings = ['S.no']
    headings += [str(date(2011,2,i)) for i in xrange(6,11)]
    headings += ['user', 'date_format','p-total','E-total','total']

    writer = csv.DictWriter(f, headings, delimiter="\t")

    # The writeheader method only appeared in Python 2.7, so write the
    # headings from a dictionary that maps each heading to itself:
    writer.writerow(dict(zip(headings,headings)))

    # Assume that S.no is just a row number...
    sno = 1
    for d in user_to_row.values():
        d['S.no'] = sno
        # Fill in any unknown values with 'Unknown':
        for h in headings:
            d.setdefault(h,'Unknown')
        writer.writerow(d)
        sno += 1
</snippet></ROW><ROW><id>5244582</id><snippet>S.no    2011-02-06  2011-02-07  2011-02-08  2011-02-09  2011-02-10  user    date_format p-total E-total total
1   Unknown Unknown P   P   P   xxx Unknown 3   0   3
2   Unknown Unknown P   E   P   yyy Unknown 2   1   3
3   Unknown Unknown P   E   P   zzz Unknown 2   1   3
</snippet></ROW><ROW><id>5244854</id><snippet>a.append(b.copy())</snippet></ROW><ROW><id>5244854</id><snippet>copy.deepcopy(b)</snippet></ROW><ROW><id>5245528</id><snippet>f = open(filename,'rt')
a = [[int(token) for token in line.split()] for line in f.readlines()[::2]]
</snippet></ROW><ROW><id>5245528</id><snippet>::2</snippet></ROW><ROW><id>5245528</id><snippet>map</snippet></ROW><ROW><id>5245528</id><snippet>map</snippet></ROW><ROW><id>5245959</id><snippet>contrib/feedexport.py</snippet></ROW><ROW><id>5245959</id><snippet>class FeedExporter(object):

    ...

    def open_spider(self, spider):
        file = TemporaryFile(prefix='feed-')
        exp = self._get_exporter(file)  # &lt;-- this is where the exporter is instantiated
        exp.start_exporting()
        self.slots[spider] = SpiderSlot(file, exp)

    def _get_exporter(self, *a, **kw):
        return self.exporters[self.format](*a, **kw)  # &lt;-- not passed in :(
</snippet></ROW><ROW><id>5245959</id><snippet>from scrapy.conf import settings
from scrapy.contrib.exporter import CsvItemExporter


class CsvOptionRespectingItemExporter(CsvItemExporter):

    def __init__(self, *args, **kwargs):
        delimiter = settings.get('CSV_DELIMITER', ',')
        kwargs['delimiter'] = delimiter
        super(CsvOptionRespectingItemExporter, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>5245959</id><snippet>settings.py</snippet></ROW><ROW><id>5245959</id><snippet>FEED_EXPORTERS = {
    'csv': 'importable.path.to.CsvOptionRespectingItemExporter',
}
</snippet></ROW><ROW><id>5245959</id><snippet>scrapy crawl spidername --set FEED_URI=output.csv --set FEED_FORMAT=csv --set CSV_DELIMITER=';'
</snippet></ROW><ROW><id>5246229</id><snippet>from collections import Counter
x = [k for k, v in Counter([1, 2, 5, 3, 4, 1, 5]).iteritems() if v == 1]
print x
</snippet></ROW><ROW><id>5246229</id><snippet>[2, 3, 4]
</snippet></ROW><ROW><id>5246235</id><snippet>s = ('%4.2f' % n).replace('-0','-')
</snippet></ROW><ROW><id>5246462</id><snippet>settings.py</snippet></ROW><ROW><id>5246462</id><snippet>django.contrib.auth.User</snippet></ROW><ROW><id>5246462</id><snippet>djangofb</snippet></ROW><ROW><id>5246462</id><snippet>settings.py</snippet></ROW><ROW><id>5246662</id><snippet>__str__</snippet></ROW><ROW><id>5246662</id><snippet>__repr__</snippet></ROW><ROW><id>5246662</id><snippet>Student</snippet></ROW><ROW><id>5246662</id><snippet>Student</snippet></ROW><ROW><id>5246662</id><snippet>def readStudents(filename):
    with open(filename) as student_file:
        return [Student(*line.split()) for line in student_file]
</snippet></ROW><ROW><id>5246746</id><snippet>ByteString</snippet></ROW><ROW><id>5246746</id><snippet>from google.appengine.api.datastore_types import ByteString

hasher = hashlib.sha256()
hasher.update('http://www.google.com/')
urlHash = hasher.digest()
bs = ByteString(urlHash)

m = Map(urlHash=bs).put()

query = db.Query(Map)
query = query.filter('urlHash =', bs)
results = query.fetch(1)
</snippet></ROW><ROW><id>5246975</id><snippet>a</snippet></ROW><ROW><id>5246975</id><snippet>b</snippet></ROW><ROW><id>5246975</id><snippet>c</snippet></ROW><ROW><id>5246975</id><snippet>c</snippet></ROW><ROW><id>5246975</id><snippet>a</snippet></ROW><ROW><id>5246975</id><snippet>c</snippet></ROW><ROW><id>5246975</id><snippet>long_pow()</snippet></ROW><ROW><id>5247079</id><snippet>HttpClient httpclient = new DefaultHttpClient();
HttpParams params = httpclient.getParams();
HttpConnectionParams.setConnectionTimeout(params, 5000);
HttpConnectionParams.setSoTimeout(params, 5000);
</snippet></ROW><ROW><id>5247079</id><snippet>HttpParams params = new BasicHttpParams();
HttpConnectionParams.setConnectionTimeout(params, timeout);
HttpConnectionParams.setSoTimeout(params, timeout);
HttpClient httpclient = new DefaultHttpClient(params);
</snippet></ROW><ROW><id>5247079</id><snippet>BasicHttpParams</snippet></ROW><ROW><id>5247079</id><snippet>DefaultHttpClient</snippet></ROW><ROW><id>5247079</id><snippet>HttpGet</snippet></ROW><ROW><id>5247206</id><snippet>keys = links.keys()
n = len(keys)
for i in range(n):
    thisKey = keys[i]
    nextKey = keys[(i + 1) % n]
    nextValue = links[nextKey]
    print thisKey, nextValue
</snippet></ROW><ROW><id>5247469</id><snippet> baudRadioButton1 = wx.RadioButton(mypanel, -1, '9600', style=wx.RB_GROUP)
</snippet></ROW><ROW><id>5247469</id><snippet>baudRadioButton1 = wx.RadioButton(mypanel, -1, label='9600', style=wx.RB_GROUP)
baudRadioButton2 = wx.RadioButton(mypanel, -1, label='14400')
baudRadioButton3 = wx.RadioButton(mypanel, -1, label='19200')
</snippet></ROW><ROW><id>5247469</id><snippet>self.Bind(wx.EVT_RADIOBUTTON,self.baudRadioButton1,self.clickstart1)
self.Bind(wx.EVT_RADIOBUTTON,self.baudRadioButton2,self.clickstart2)
self.Bind(wx.EVT_RADIOBUTTON,self.baudRadioButton3,self.clickstart3)
</snippet></ROW><ROW><id>5247469</id><snippet>def clickStart1(self, event):
    baudRate = 9600
    ......


def clickStart2(self, event):
    baudRate = 14400
    ......
</snippet></ROW><ROW><id>5247647</id><snippet>%j</snippet></ROW><ROW><id>5247647</id><snippet>%m</snippet></ROW><ROW><id>5247647</id><snippet>&gt;&gt;&gt; datetime.strptime('10 2011', '%j %Y')
datetime.datetime(2011, 1, 10, 0, 0)
</snippet></ROW><ROW><id>5247647</id><snippet>&gt;&gt;&gt; datetime.strptime('10 3 2011', '%d %m %Y')
datetime.datetime(2011, 3, 10, 0, 0)
</snippet></ROW><ROW><id>5247723</id><snippet>cursor.execute("INSERT INTO .... RETURNING id")
id_of_new_row = cursor.fetchone()[0]
</snippet></ROW><ROW><id>5247723</id><snippet>sql_string = "INSERT INTO domes_hundred (name,name_slug,status) VALUES (%s,%s,%s) RETURNING id;"
cursor.execute(sql_string, (hundred_name, hundred_slug, status))
hundred = cursor.fetchone()[0]
</snippet></ROW><ROW><id>5247755</id><snippet>DBMS_OUTPUT.GET_LINE(buffer, status)</snippet></ROW><ROW><id>5247755</id><snippet>get_lines(lines, numlines)</snippet></ROW><ROW><id>5247755</id><snippet>numlines</snippet></ROW><ROW><id>5247755</id><snippet>numlines</snippet></ROW><ROW><id>5247755</id><snippet>lines</snippet></ROW><ROW><id>5248292</id><snippet>n</snippet></ROW><ROW><id>5248369</id><snippet>split()</snippet></ROW><ROW><id>5248369</id><snippet>split()</snippet></ROW><ROW><id>5248369</id><snippet>re.split()</snippet></ROW><ROW><id>5248469</id><snippet>set</snippet></ROW><ROW><id>5248469</id><snippet>s = set([1, 2, 3, 3])
t = set([2, 4, 6])
print s
print t
print s - t
</snippet></ROW><ROW><id>5248469</id><snippet>set([1, 2, 3])
set([2, 4, 6])
set([1, 3])
</snippet></ROW><ROW><id>5248815</id><snippet>&lt;Location "/mysite/"&gt;

  SetHandler python-program
  PythonHandler django.core.handlers.modpython
  SetEnv DJANGO_SETTINGS_MODULE mysite.settings
  PythonOption django.root /mysite
  PythonPath "['/home/djangotest', '/home/djangotest/mysite'] + sys.path"

  PythonDebug On
&lt;/Location&gt;
</snippet></ROW><ROW><id>5248905</id><snippet> datetime.datetime.strptime("2011-03-09T09:58:28.649615","%Y-%m-%dT%H:%M:%S.%f") </snippet></ROW><ROW><id>5249137</id><snippet>list(itertools.product(*["01"] * 2))
</snippet></ROW><ROW><id>5249214</id><snippet>class Serializer(object):
    __public__ = None
    "Must be implemented by implementors"

    __internal__ = None
    "Must be implemented by implementors"

    def to_serializable_dict(self):
        # do stuff with __public__, __internal__
        # ...
</snippet></ROW><ROW><id>5249214</id><snippet>def my_controller(self):
   # ...

   return to_response(request, response, myobject)


# elsewhere
def to_response(req, resp, obj):
    # this would be more robust, look in
    # req, resp, catch key errors, whatever.
    # xxx_serialize are just functions.  don't need state
    serializer = {
       'application/json':json_serialize,
       'application/xml':xml_serialize,
       # ...
    }[req.headers['content-type']]

    return serializer(obj)
</snippet></ROW><ROW><id>5249298</id><snippet>is</snippet></ROW><ROW><id>5249298</id><snippet>if x is y:
</snippet></ROW><ROW><id>5249298</id><snippet>if x == y:
</snippet></ROW><ROW><id>5249298</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; a is b
True
&gt;&gt;&gt; id(a),id(b)
(13561552, 13561552)
</snippet></ROW><ROW><id>5249298</id><snippet>intern()</snippet></ROW><ROW><id>5249298</id><snippet>&gt;&gt;&gt; c = 'Long string'
&gt;&gt;&gt; d = 'Long string'
&gt;&gt;&gt; c is d
False
&gt;&gt;&gt; c = intern(c)
&gt;&gt;&gt; d = intern(d)
&gt;&gt;&gt; c is d
True
</snippet></ROW><ROW><id>5249298</id><snippet>long</snippet></ROW><ROW><id>5249298</id><snippet>&gt;&gt;&gt; a = 1L
&gt;&gt;&gt; b = 1L
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>5249298</id><snippet>__eq__</snippet></ROW><ROW><id>5249419</id><snippet>myDict = dict(zip(myList[::2], myList[1::2]))
</snippet></ROW><ROW><id>5249419</id><snippet>from itertools import izip, islice
myList = ['first_key', 'first_value', 'second_key', 'second_value']
myDict = dict(izip(islice(myList,0,None,2), islice(myList,1,None,2)))
</snippet></ROW><ROW><id>5249438</id><snippet>def reverse(data_list):
    length = len(data_list)
    s = length

    new_list = [None]*length

    for item in data_list:
        s = s - 1
        new_list[s] = item
    return new_list
</snippet></ROW><ROW><id>5249880</id><snippet>(global-semantic-folding-mode t)
</snippet></ROW><ROW><id>5250193</id><snippet>GENERICFILEHEADER</snippet></ROW><ROW><id>5250193</id><snippet>b = bytearray(your_byte_data)
big_endian = (b[0] == 0x52)
offset = 768 + big_endian
current_orientation = b[offset]  # get current orientation
b[offset] = new_offset           # set it to something new
open('out_file', 'wb').write(b) 
</snippet></ROW><ROW><id>5250205</id><snippet>socket</snippet></ROW><ROW><id>5250259</id><snippet>self.method</snippet></ROW><ROW><id>5250259</id><snippet>thisObj.method2</snippet></ROW><ROW><id>5250259</id><snippet>class ThisClass:

    def method1(self):
        text1 = 'iloveyou'
        return text1

    def method2(self):
        text2 = self.method1()
        print str(text2)

thisObj = ThisClass()
thisObj.method2()
</snippet></ROW><ROW><id>5250275</id><snippet>phones = []
for k, v in PHONE_CHOICES:
    try:
        current = ClientPhone.objects.filter(client=clientKEY, phone_type=k)
        if current.deleted is None:
            phones.append(current.latest('id'))
    except ClientPhone.DoesNotExist:
        pass
</snippet></ROW><ROW><id>5250289</id><snippet>GtkEntry</snippet></ROW><ROW><id>5250289</id><snippet>GtkTreeView</snippet></ROW><ROW><id>5250289</id><snippet>GtkButton</snippet></ROW><ROW><id>5250289</id><snippet>def find_closest_ancestor(widget, ancestor_class):
    if not isinstance(widget, gtk.Widget):
        raise TypeError("%r is not a gtk.Widget" % widget)
    ancestor = widget.get_parent()
    while ancestor is not None:
        if isinstance(ancestor, ancestor_class):
            break;
        ancestor = ancestor.get_parent() if hasattr(ancestor, 'get_parent') and callable(ancestor.get_parent) else None
    return ancestor
</snippet></ROW><ROW><id>5250289</id><snippet>button-press-event</snippet></ROW><ROW><id>5250289</id><snippet>GtkButton</snippet></ROW><ROW><id>5250289</id><snippet>GtkEntry</snippet></ROW><ROW><id>5250289</id><snippet>def propagate_button_press_event(parent, event, *data):
        parent_alloc = parent.get_allocation()
        x = parent_alloc.x + int(event.x)
        y = parent_alloc.y + int(event.y)
        children = parent.get_children()
        print "Propagating event:%r" % event
        print "- from parent:%r" % parent
        while children:
            for child in children:
                child_alloc = child.get_allocation()
                if child_alloc.x &lt;= x &lt;= child_alloc.x + child_alloc.width and child_alloc.y &lt;= y &lt;= child_alloc.y + child_alloc.height:
                    print "- to child:%r" % child
                    if child.get_property('can-focus'):
                        event.send_event = True
                        child.grab_focus()
                        child.emit('button-press-event', event, *data)
                        return True
                    else:
                        children = child.get_children() if hasattr(child, 'get_children') and callable(child.get_children) else None
                        break;
            else:
                children = None
        return False
</snippet></ROW><ROW><id>5250289</id><snippet>focus-in-event</snippet></ROW><ROW><id>5250289</id><snippet>GtkButton</snippet></ROW><ROW><id>5250289</id><snippet>GtkEntry</snippet></ROW><ROW><id>5250289</id><snippet>def propagate_focus_in_event(parent, event, *data):
    print 'focus-in', parent, event
    child = parent.get_child()
    if child.get_property('can-focus'):
        child.grab_focus()
    else:
        if not child.child_focus(gtk.DIR_TAB_FORWARD):
            parent.get_toplevel().child_focus(gtk.DIR_TAB_FORWARD)
    return True
</snippet></ROW><ROW><id>5250289</id><snippet># Fix style glitches
_gtk_styles = """
    # Use the default GtkEntry style for GtkEntry widgets in treeview headers.
    widget "*.treeview-header-entry" style "entry" 
"""
gtk.rc_parse_string(_gtk_styles)

# Columns
_columns = [
    (0, "Title"),
    (1, "Description")
    # etc.
]

# Create tree-view.
items_view = gtk.TreeView(self.items_store)
items_view.show()

# Setup treeview columns.
renderer = gtk.CellRendererText()
for column in _columns:
    column_index, column_title, column_filter = column
    column_view = gtk.TreeViewColumn(None, renderer, text=column_index)
    column_view.set_clickable(True)

    column_widget = gtk.VBox()
    column_widget.show()

    column_align = gtk.Alignment(0, 0, 0, 0)
    column_align.show()
    column_widget.pack_start(column_align)
    column_label = gtk.Label(column_title)
    column_label.show()
    column_align.add(column_label)

    column_entry = gtk.Entry()
    column_entry.set_name('treeview-header-entry')
    column_entry.show()
    column_widget.pack_start(column_entry)

    column_view.set_widget(column_widget)
    items_view.append_column(column_view)

# Setup column headers.
columns = items_view.get_columns()
for column in columns:
    column_widget = column.get_widget()
    column_header = find_closest_ancestor(column_widget, gtk.Button)
    if column_header:
        column_header.connect('focus-in-event', propagate_focus_in_event)
        column_header.connect('button-press-event', propagate_button_press_event)
        column_header.set_focus_on_click(False)
</snippet></ROW><ROW><id>5250325</id><snippet>u</snippet></ROW><ROW><id>5250325</id><snippet>u = User.objects.get(profile = p)
</snippet></ROW><ROW><id>5250479</id><snippet>def forget_torpedoes(mylist):
    return reduce(lambda acc, x: {x : acc}, reversed(mylist))
</snippet></ROW><ROW><id>5250479</id><snippet>In [9]: forget_torpedoes( [5, 6, 7, 8] )
Out[9]: {5: {6: {7: 8}}}
</snippet></ROW><ROW><id>5250484</id><snippet>ModelAdmin</snippet></ROW><ROW><id>5250484</id><snippet>save_model</snippet></ROW><ROW><id>5250484</id><snippet>class AppAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        obj.submitter = request.user # no need to check for it.
        obj.save()
</snippet></ROW><ROW><id>5250531</id><snippet>return render_to_response('results.html',
    {'data': sorted(results_dict.iteritems())})

{% for key, value in data %}
    &lt;tr&gt;
        &lt;td&gt; {{ key }}: &lt;/td&gt; &lt;td&gt; {{ value }} &lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>5250541</id><snippet>class Student(object):
    def __init__ (self, name, age, gender):
        self.name   = name
        self.age    = age
        self.gender = gender
</snippet></ROW><ROW><id>5250541</id><snippet>    @classmethod
    def parse(cls, s):
        # some input validation here would be a good idea
        name,age,gender = s.split('/')
        age = int(age)
        return cls(name, age, gender)

s1 = Student("Bob", 10, "M")
s2 = Student.parse("Bill/12/M")
</snippet></ROW><ROW><id>5250743</id><snippet>widget.AppendText</snippet></ROW><ROW><id>5250743</id><snippet>widget.WriteText</snippet></ROW><ROW><id>5250743</id><snippet>AppendText</snippet></ROW><ROW><id>5250743</id><snippet>WriteText</snippet></ROW><ROW><id>5250916</id><snippet>svn commit /path/where/you/code  
</snippet></ROW><ROW><id>5250916</id><snippet>svn checkout http:/repositoryurl /path/to/the/code
</snippet></ROW><ROW><id>5250916</id><snippet>svn update /path/to/the/code   
</snippet></ROW><ROW><id>5251047</id><snippet>position_of</snippet></ROW><ROW><id>5251047</id><snippet>class Test(object):

    def heading_positions(self):
        return {}

    def position_of(self, table_name, column_name):
        positions = self.heading_positions()
        try:
            position = positions['{t}.{c}'.format(t=table_name, c=column_name)]
        except KeyError:
            raise RuntimeError('No heading found for {t}.{c} in import profile "{ip}"'.format(t=table_name, c=column_name, ip=self))
        return position

a = Test()
a.position_of('customer', 'phone')
</snippet></ROW><ROW><id>5251047</id><snippet>Traceback (most recent call last):
  File "./a.py", line 17, in &lt;module&gt;
    a.position_of('customer', 'phone')
  File "./a.py", line 13, in position_of
    raise RuntimeError('No heading found for {t}.{c} in import profile "{ip}"'.format(t=table_name, c=column_name, ip=self))
RuntimeError: No heading found for customer.phone in import profile "&lt;__main__.Test object at 0x100426ad0&gt;"
</snippet></ROW><ROW><id>5251047</id><snippet>KeyError</snippet></ROW><ROW><id>5251047</id><snippet>RuntimeError</snippet></ROW><ROW><id>5251047</id><snippet>RuntimeError</snippet></ROW><ROW><id>5251047</id><snippet>KeyError</snippet></ROW><ROW><id>5251253</id><snippet>sums = np.sum(data,axis=0)
</snippet></ROW><ROW><id>5251253</id><snippet>plt.plot(sums)
</snippet></ROW><ROW><id>5251253</id><snippet>data.shape[0]</snippet></ROW><ROW><id>5251253</id><snippet>data.shape[1] &lt; data.shape[0]</snippet></ROW><ROW><id>5251383</id><snippet>import re

arbitrary_string = "File!name?.txt"
cleaned_up_filename = re.sub(r'[/\\:*?"&lt;&gt;|]', '', arbitrary_string)
filepath = os.path.join("/tmp", cleaned_up_filename)

with open(filepath, 'wb') as f:
    # ...
</snippet></ROW><ROW><id>5251460</id><snippet>if int(csvitem[63]) &lt;= 3:
</snippet></ROW><ROW><id>5251460</id><snippet>data = [(3, '&lt;4'), (7, '4-8'), (15, '8-16'), (23, '16-24'), (10000, '&gt;24']

dattime = int(cvsitem[63])
hsa_id = ''
for mytime, text in data:
    if dattime &lt;= mytime:
        hsa_id = '%s hours' % text
        break
</snippet></ROW><ROW><id>5251460</id><snippet>choices_dict = {'1':'&lt;4 hours', ...}
hsa_id = choices_dict.get(cvsitem[63], '')
</snippet></ROW><ROW><id>5251706</id><snippet>any(isinstance(el, list) for el in input_list)
</snippet></ROW><ROW><id>5251837</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.system(None)
TypeError ...
</snippet></ROW><ROW><id>5251837</id><snippet>os.system</snippet></ROW><ROW><id>5251896</id><snippet>Phone.objects.filter(number=u'945678987', person__employer=u'xyz')
</snippet></ROW><ROW><id>5251938</id><snippet>dbus.Struct</snippet></ROW><ROW><id>5251938</id><snippet>&gt;&gt;&gt; msg = dbus.Struct((dbus.String(u'msg_subject:Re: email subject'),), signature=None)
&gt;&gt;&gt; msg[0]
dbus.String(u'msg_subject:Re: email subject')
</snippet></ROW><ROW><id>5252044</id><snippet>libxml2</snippet></ROW><ROW><id>5252044</id><snippet>python-libxml2</snippet></ROW><ROW><id>5252044</id><snippet>c2p()</snippet></ROW><ROW><id>5252133</id><snippet>-fPIC</snippet></ROW><ROW><id>5252133</id><snippet>.o</snippet></ROW><ROW><id>5252133</id><snippet>.so</snippet></ROW><ROW><id>5252867</id><snippet>map( lambda s: s.replace(...), row )
</snippet></ROW><ROW><id>5252867</id><snippet>[s.replace(...) for s in row]
</snippet></ROW><ROW><id>5253068</id><snippet>import png
import sys

KERNING = 3

def find_rows(pixels,width, height):
    "find all rows that are purely white"
    white_rows = []
    is_white = False
    for y in range(height):
        if sum(sum( pixels[(y*4*width)+x*4+p] for p in range(3)) for x in range(width)) &gt;= width*3*254:
            if not is_white:
                white_rows.append(y)
            is_white = True
        else:
            is_white = False
    return white_rows

def find_words_in_image(blob, tolerance=30):    
    n = 0
    r = png.Reader(bytes=blob)
    (width,height,pixels_rows,meta) = r.asRGBA8()
    pixels = []
    for row in pixels_rows:
        for px in row:
            pixels.append(px)
    # find each horizontal line
    white_rows = find_rows(pixels,width,height)
    # for each line try to find a white vertical gap
    for i,y in enumerate(white_rows):
        if y &gt;= len(white_rows):
            continue
        y2 = white_rows[i+1]
        height_of_row = y2 - y
        is_white = False
        white_cols = []
        last_black = -100
        for x in range(width-4):
            s = y*4*width+x*4
            if sum(pixels[s+y3*4*width] + pixels[s+y3*4*width+1] + pixels[s+y3*4*width+2] for y3 in range(height_of_row)) &gt;= height_of_row*3*240:
                if not is_white:
                    if len(white_cols)&gt;0 and x-last_black &lt; KERNING:
                        continue
                    white_cols.append(x)
                is_white = True
            else:
                is_white = False
                last_black = x
        # now we have a list of x,y co-oords for all the words on this row
        for j,x in enumerate(white_cols):
            if j &gt;= len(white_cols)-1:
                continue
            wordpx = []
            new_width = white_cols[j+1]-x
            new_height = y2-y
            x_offset = x*4
            for h in range(new_height):
                y_offset = (y+h)*4*width
                start = x_offset+y_offset
                wordpx.append( pixels[start:start+(new_width*4)] )
            n += 1
            with open('word%s.png' % n, 'w') as f:
                w = png.Writer(
                    width=new_width,
                    height=new_height,
                    alpha=True
                    )
                w.write(f,wordpx)
    return n



if __name__ == "__main__":
    #
    # USAGE: python png2words.py yourpic.png
    #
    # OUTPUT: [word1.png...word2.png...wordN.png]
    #
    n = find_words_in_image( open(sys.argv[1]).read() )
    print "found %s words" % n
</snippet></ROW><ROW><id>5253179</id><snippet>"string_escape"</snippet></ROW><ROW><id>5253179</id><snippet>"unicode_escape"</snippet></ROW><ROW><id>5253179</id><snippet>s.decode('unicode_escape')</snippet></ROW><ROW><id>5253179</id><snippet>re</snippet></ROW><ROW><id>5253179</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>5253179</id><snippet>def substitute(match):
    if len(match.group(1)) % 2 == 1:
        return match.group()
    else:
        return ur"%s\%s" % (match.group(1), match.group(2))

ast.literal_eval("'%s'" % re.sub(ur"(\\+)(')", substitute, s))
</snippet></ROW><ROW><id>5253179</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>5253213</id><snippet>nearestNeighbour</snippet></ROW><ROW><id>5253213</id><snippet>for currentNode in nearestNeighbour</snippet></ROW><ROW><id>5253213</id><snippet>tentativeDistance</snippet></ROW><ROW><id>5253242</id><snippet>cmdprocess.stdin.write(("mklink " + linkname + " " + fullname + "\r\n").encode("utf-8"))
</snippet></ROW><ROW><id>5253378</id><snippet>if (abcdefghijklmnopqrstuvwxyz &gt; some_other_long_identifier and
   here_is_another_long_identifier != and_finally_another_long_name):
    # ... your code here ...
    pass
</snippet></ROW><ROW><id>5253434</id><snippet>__dict__</snippet></ROW><ROW><id>5253434</id><snippet>if name in cls.__dict__:
    # ... your code here ...
    pass
</snippet></ROW><ROW><id>5253554</id><snippet>rotate</snippet></ROW><ROW><id>5253554</id><snippet># original image
img = Image.open('test.png')
# converted to have an alpha layer
im2 = img.convert('RGBA')
# rotated image
rot = im2.rotate(22.2, expand=1)
# a white image same size as rotated image
fff = Image.new('RGBA', rot.size, (255,)*4)
# create a composite image using the alpha layer of rot as a mask
out = Image.composite(rot, fff, rot)
# save your work (converting back to mode='1' or whatever..)
out.convert(img.mode).save('test2.bmp')
</snippet></ROW><ROW><id>5253599</id><snippet>python-mode-hook</snippet></ROW><ROW><id>5253599</id><snippet>;; define your hook function
(defun python-mode-setup ()
  (message "Custom python hook run")
  (load-library "my-python-setup"))

;; install your hook so it is called when python-mode is invoked
(add-hook 'python-mode-hook 'python-mode-setup)
</snippet></ROW><ROW><id>5253599</id><snippet>python-mode-hook</snippet></ROW><ROW><id>5253599</id><snippet>(defun python-mode-setup ()
  (setq python-indent-offset 4
        python-indent 4
        ;; turn off indentation guessing in various python modes
        python-guess-indent nil
        python-indent-guess-indent-offset nil
        py-smart-indentation nil
        ;; fix mark-defun in new python.el
        python-use-beginning-of-innermost-defun t))
(add-hook 'python-mode-hook 'python-mode-setup)
</snippet></ROW><ROW><id>5253790</id><snippet>', '.join(d['memberId'] for d in my_list)
</snippet></ROW><ROW><id>5253790</id><snippet>str.join()</snippet></ROW><ROW><id>5253790</id><snippet>(d['memberId'] for d in my_list)</snippet></ROW><ROW><id>5253790</id><snippet>[d['memberId'] for d in my_list]</snippet></ROW><ROW><id>5253910</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; windll.kernel32.GetModuleHandleW(0)
486539264
</snippet></ROW><ROW><id>5253910</id><snippet>lib = ctypes.WinDLL('mylibrary.dll')
#lib = ctypes.WinDLL('full/path/to/mylibrary.dll')
func = lib['myFunc']#my func is double myFunc(double);
func.restype = ctypes.c_double
value = func(ctypes.c_double(42.0))
</snippet></ROW><ROW><id>5254156</id><snippet>myprog.py
pause
</snippet></ROW><ROW><id>5254455</id><snippet>&gt;&gt;&gt; s='355879ACB6'
&gt;&gt;&gt; s[4:4] = '-'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object does not support item assignment
</snippet></ROW><ROW><id>5254455</id><snippet>&gt;&gt;&gt; s[:4] + '-' + s[4:]
'3558-79ACB6'
</snippet></ROW><ROW><id>5254526</id><snippet>if request.method == 'POST':
   form = TransactionForm(user=request.user, data=request.POST)
</snippet></ROW><ROW><id>5254534</id><snippet>.</snippet></ROW><ROW><id>5254534</id><snippet>swapcase()</snippet></ROW><ROW><id>5254534</id><snippet>'A'</snippet></ROW><ROW><id>5254534</id><snippet>'a'</snippet></ROW><ROW><id>5254534</id><snippet>import re

def _human_key(key):
    parts = re.split('(\d*\.\d+|\d+)', key)
    return tuple((e.swapcase() if i % 2 == 0 else float(e))
            for i, e in enumerate(parts))

nums = ['9', 'aB', '1a2', '11', 'ab', '10', '2', '100ab', 'AB', '10a',
    '1', '1a', '100', '9.9', '3']
nums.sort(key=_human_key)

print '\n'.join(nums)
</snippet></ROW><ROW><id>5254534</id><snippet>1
1a
1a2
2
3
9
9.9
10
10a
11
100
100ab
ab
aB
AB
</snippet></ROW><ROW><id>5254534</id><snippet>Foo</snippet></ROW><ROW><id>5254534</id><snippet>__lt__</snippet></ROW><ROW><id>5254534</id><snippet>_human_key</snippet></ROW><ROW><id>5254534</id><snippet>_human_key(k1) &lt; _human_key(k2)</snippet></ROW><ROW><id>5254534</id><snippet>class Foo(object):

    def __init__(self, key):
        self.key = key

    def __lt__(self, obj):
        return _human_key(self.key) &lt; _human_key(obj.key)

&gt;&gt;&gt; Foo('ab') &lt; Foo('AB')
True
&gt;&gt;&gt; Foo('AB') &lt; Foo('AB')
False
</snippet></ROW><ROW><id>5254534</id><snippet>def __lt__(self, other):
    column = self.treeWidget().sortColumn()
    k1 = self.text(column)
    k2 = other.text(column)
    return _human_key(k1) &lt; _human_key(k2)
</snippet></ROW><ROW><id>5254534</id><snippet>__eq__</snippet></ROW><ROW><id>5254534</id><snippet>__gt__</snippet></ROW><ROW><id>5254714</id><snippet>django-query-using-order-by-and-latest</snippet></ROW><ROW><id>5254781</id><snippet>msgQ</snippet></ROW><ROW><id>5254781</id><snippet>self.msgQ.get()</snippet></ROW><ROW><id>5254781</id><snippet>Empty</snippet></ROW><ROW><id>5254781</id><snippet>self.sock.send()</snippet></ROW><ROW><id>5254781</id><snippet>self.sock.recv()</snippet></ROW><ROW><id>5254781</id><snippet>Empty</snippet></ROW><ROW><id>5254781</id><snippet>msgQ</snippet></ROW><ROW><id>5254781</id><snippet>send</snippet></ROW><ROW><id>5254781</id><snippet>recv</snippet></ROW><ROW><id>5254781</id><snippet>def run(self): 
    while not self._terminate: 
        try: 
            msgs = self.msgQ.get()

            self.sock.send(pickle.dumps(msgs))
            rdy = pickle.loads(self.sock.recv(2097152))
        except socket.error, EOFError: 
            print 'log socketmanager closing'
            self.terminate()
            break
        except Empty:
            results = select.select([], [], [self.sock], 0.5) # timeout of 0.5 seconds
            if self.sock in results[2]:
                print 'exceptional condition on socket'
                self.terminate()
                break
</snippet></ROW><ROW><id>5254833</id><snippet>numericVariable % 10
</snippet></ROW><ROW><id>5254912</id><snippet>class ThisFrame(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(0, 0))
        dlg = ThisClass(self, -1, "buttons.py")

        if dlg.ShowModal() == 1:
            from otherfile import MyFrame
            mf = MyFrame(self, "MyFrame")
            mf.Show()

app = wx.App(0)
frame = ThisFrame(None, 'ThisFrame')
app.MainLoop()
</snippet></ROW><ROW><id>5255409</id><snippet>if getattr(request, 'rk_user', None):
</snippet></ROW><ROW><id>5255473</id><snippet>alarm</snippet></ROW><ROW><id>5255473</id><snippet>import signal, errno
from contextlib import contextmanager
import fcntl

@contextmanager
def timeout(seconds):
    def timeout_handler(signum, frame):
        pass

    original_handler = signal.signal(signal.SIGALRM, timeout_handler)

    try:
        signal.alarm(seconds)
        yield
    finally:
        signal.alarm(0)
        signal.signal(signal.SIGALRM, original_handler)

with timeout(1):
    f = open("test.lck", "w")
    try:
        fcntl.flock(f.fileno(), fcntl.LOCK_EX)
    except IOError, e:
        if e.errno != errno.EINTR:
            raise e
        print "Lock timed out"
</snippet></ROW><ROW><id>5255552</id><snippet>def match_dict(new_list, old_list): 
    old = dict((v['id'], v) for v in old_list)
    return [dict(d, **old[d['id']]) for d in new_list if d['id'] in old]
</snippet></ROW><ROW><id>5255760</id><snippet>logging.disable(logging.CRITICAL)
</snippet></ROW><ROW><id>5255760</id><snippet>CRITICAL</snippet></ROW><ROW><id>5255880</id><snippet> select_answer = self.request.get('answer')
</snippet></ROW><ROW><id>5255880</id><snippet>name</snippet></ROW><ROW><id>5255880</id><snippet>name</snippet></ROW><ROW><id>5255880</id><snippet>answer</snippet></ROW><ROW><id>5256293</id><snippet>print</snippet></ROW><ROW><id>5256293</id><snippet>sys.stdout.write('text to print')</snippet></ROW><ROW><id>5256293</id><snippet>import sys</snippet></ROW><ROW><id>5256456</id><snippet>["%04d" % x for x in range(10000)]
</snippet></ROW><ROW><id>5256942</id><snippet>import csv

with open(filename) as file_object:
    # skip the first two lines
    file_object.next()
    file_object.next()
    list_of_dicts = list(csv.DictReader(file_object, dialect='excel-tab'))

# list_of_dicts now will contain a list of dictionaries extracted from the file
</snippet></ROW><ROW><id>5257428</id><snippet>sleep</snippet></ROW><ROW><id>5257575</id><snippet>take_action</snippet></ROW><ROW><id>5257575</id><snippet>OPTIONAL</snippet></ROW><ROW><id>5257575</id><snippet>ZERO_OR_MORE</snippet></ROW><ROW><id>5257575</id><snippet>ONE_OR_MORE</snippet></ROW><ROW><id>5257575</id><snippet>PARSER</snippet></ROW><ROW><id>5257575</id><snippet>REMAINDER</snippet></ROW><ROW><id>5257575</id><snippet>nargs</snippet></ROW><ROW><id>5257575</id><snippet>--foo-x x</snippet></ROW><ROW><id>5257575</id><snippet>--foo-y y</snippet></ROW><ROW><id>5257575</id><snippet>--foo-z z</snippet></ROW><ROW><id>5257575</id><snippet>--foo x y z</snippet></ROW><ROW><id>5257661</id><snippet>groupby()</snippet></ROW><ROW><id>5257661</id><snippet>from pprint import pprint
from datetime import datetime
from itertools import groupby

rows = [('Frodo party', datetime(3018, 9, 22, 10, 38)),
        ('Nazgul defeat Rangers', datetime(3018, 9, 22, 11, 57)),
        ('Frodo finishes packing', datetime(3018, 9, 23, 10, 59)),
        ('Gandalf tames Shadowfax', datetime(3018, 9, 23, 13, 11)),
        ('Gandalf crosses the Isen', datetime(3018, 9, 24, 18, 46))]

for key, values in groupby(rows, key=lambda row: row[1].date()):
    print('-')
    pprint(key)
    pprint(list(values))
</snippet></ROW><ROW><id>5257661</id><snippet>groupby()</snippet></ROW><ROW><id>5257661</id><snippet>key</snippet></ROW><ROW><id>5257661</id><snippet>[1]</snippet></ROW><ROW><id>5257661</id><snippet>datetime</snippet></ROW><ROW><id>5257661</id><snippet>date()</snippet></ROW><ROW><id>5257661</id><snippet>pprint()</snippet></ROW><ROW><id>5257661</id><snippet>-
datetime.date(3018, 9, 22)
[('Frodo party', datetime.datetime(3018, 9, 22, 10, 38)),
 ('Nazgul defeat Rangers', datetime.datetime(3018, 9, 22, 11, 57))]
-
datetime.date(3018, 9, 23)
[('Frodo finishes packing', datetime.datetime(3018, 9, 23, 10, 59)),
 ('Gandalf tames Shadowfax', datetime.datetime(3018, 9, 23, 13, 11))]
-
datetime.date(3018, 9, 24)
[('Gandalf crosses the Isen', datetime.datetime(3018, 9, 24, 18, 46))]
</snippet></ROW><ROW><id>5257670</id><snippet>def combine(dict1, dict2):
    if dict1['priority'] == dict2['priority'] and dict1['titles'] == dict2['titles']:
        return {
            'priority': dict1['priority'],
            'titles': dict1['titles'],
            'values': dict1['values'] + dict2['values']
        }
</snippet></ROW><ROW><id>5257670</id><snippet>import json
json.dumps(combine(dict1, dict2))
</snippet></ROW><ROW><id>5257670</id><snippet>s1 = '{"priority":"HIGH", "titles":["Brand", "Likes"], values:[["addidas", 130],["nike", 180]]}'

s2 = '{"priority":"HIGH", "titles":["Brand", "Likes"], values:[["iphone", 49],["ipod", 590]]}'
</snippet></ROW><ROW><id>5257670</id><snippet>dict1 = json.loads(s1)
dict2 = json.loads(s2)
result = combine(dict1, dict2)
</snippet></ROW><ROW><id>5257687</id><snippet>SESSION_EXPIRE_AT_BROWSER_CLOSE</snippet></ROW><ROW><id>5257687</id><snippet>COOKIE_AGE</snippet></ROW><ROW><id>5257700</id><snippet>connection.drain_events()
</snippet></ROW><ROW><id>5257770</id><snippet>import win32con, win32api, win32gui, ctypes, ctypes.wintypes

class COPYDATASTRUCT(ctypes.Structure):
    _fields_ = [
        ('dwData', ctypes.wintypes.LPARAM),
        ('cbData', ctypes.wintypes.DWORD),
        ('lpData', ctypes.c_void_p)
    ]
PCOPYDATASTRUCT = ctypes.POINTER(COPYDATASTRUCT)

class Listener:

    def __init__(self):
        message_map = {
            win32con.WM_COPYDATA: self.OnCopyData
        }
        wc = win32gui.WNDCLASS()
        wc.lpfnWndProc = message_map
        wc.lpszClassName = 'MyWindowClass'
        hinst = wc.hInstance = win32api.GetModuleHandle(None)
        classAtom = win32gui.RegisterClass(wc)
        self.hwnd = win32gui.CreateWindow (
            classAtom,
            "win32gui test",
            0,
            0, 
            0,
            win32con.CW_USEDEFAULT, 
            win32con.CW_USEDEFAULT,
            0, 
            0,
            hinst, 
            None
        )
        print self.hwnd

    def OnCopyData(self, hwnd, msg, wparam, lparam):
        print hwnd
        print msg
        print wparam
        print lparam
        pCDS = ctypes.cast(lparam, PCOPYDATASTRUCT)
        print pCDS.contents.dwData
        print pCDS.contents.cbData
        print ctypes.wstring_at(pCDS.contents.lpData)
        return 1

l = Listener()
win32gui.PumpMessages()
</snippet></ROW><ROW><id>5257770</id><snippet>WM_COPYDATA</snippet></ROW><ROW><id>5257770</id><snippet>Text := 'greetings!';
CopyData.cbData := (Length(Text)+1)*StringElementSize(Text);
CopyData.lpData := PWideChar(Text);
SendMessage(hwnd, WM_COPYDATA, Handle, NativeInt(@CopyData));
</snippet></ROW><ROW><id>5257770</id><snippet>461584
461584
74
658190
2620592
42
22
greetings!
</snippet></ROW><ROW><id>5257770</id><snippet>COPYDATASTRUCT</snippet></ROW><ROW><id>5257770</id><snippet>cbData</snippet></ROW><ROW><id>5257793</id><snippet>    BEGIN TRANSACTION;
    CREATE TEMPORARY TABLE t1_backup(a,b);
    INSERT INTO t1_backup SELECT a,b FROM t1;
    DROP TABLE t1;
    CREATE TABLE t1(a,b);
    INSERT INTO t1 SELECT a,b FROM t1_backup;
    DROP TABLE t1_backup;
    COMMIT;
</snippet></ROW><ROW><id>5258094</id><snippet>#include &lt;string&gt;
#include &lt;vector&gt;
enum order {
    order_lt = -1,
    order_eq,
    order_gt
};

// General case, templated version.
template &lt; typename T &gt;
order compare(T left, T right) {
    if (left &lt; right)
        return order_lt;
    if (left == right)
        return order_eq;
    return order_gt;
}

// Specialization
order compare(const std::string&amp; left, const std::string&amp; right) {
    return order(left.compare(right));
}
template &lt; typename T &gt;
order compare(const std::vector&lt;T&gt;&amp; left, const std::vector&lt;T&gt;&amp; right) {
     order o = compare(left.size(), right.size());
     if (o != order_eq)
         return o;
     for (size_t i = 0; i &lt; left.size(); ++ i) {
         o = compare(left[i], right[i]);
         if (o != order_eq)
             return o;
     }
     return order_eq;
}
</snippet></ROW><ROW><id>5258094</id><snippet>std::string::compare</snippet></ROW><ROW><id>5258094</id><snippet>strcmp</snippet></ROW><ROW><id>5258252</id><snippet>c:\MyProject\Helpers</snippet></ROW><ROW><id>5258252</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5258252</id><snippet>from MainHelper import MainHelper
</snippet></ROW><ROW><id>5258252</id><snippet>Helpers</snippet></ROW><ROW><id>5258252</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>5258252</id><snippet>c:\MyProject</snippet></ROW><ROW><id>5258252</id><snippet>Helpers</snippet></ROW><ROW><id>5258252</id><snippet>__init__.py</snippet></ROW><ROW><id>5258252</id><snippet>import Helpers.MainHelper
from Helpers.MainHelper import MainHelper
from Helpers import MainHelper
</snippet></ROW><ROW><id>5258339</id><snippet>QuerySet.delete()</snippet></ROW><ROW><id>5258339</id><snippet>EmployeeDetails.objects.filter(...).delete()
</snippet></ROW><ROW><id>5258371</id><snippet>{
    "ID" : 1,
    "name" : "John",
    "password" : "eek hope this is secure",
    "rules": [
        {
            "ID" : 1,
            "Title" : "Rule 1",
            "Points" : 100   
        },
        {
            "ID" : 2,
            "Title" : "Rule 2",
            "Points" : 200
        }
    ]
}
</snippet></ROW><ROW><id>5258651</id><snippet>a = ("cell", "trx")

query = "SELECT {0},{1} FROM tchdrop".format(*a)
db.execute(query)
</snippet></ROW><ROW><id>5258651</id><snippet>a = ("cell", "trx", "foo", "bar")
a = ", ".join(a)

query = "SELECT {0} FROM tchdrop".format(a)
# OUTPUT : 'SELECT cell, trx, foo, bar FROM tchdrop'
db.execute(query)
</snippet></ROW><ROW><id>5259010</id><snippet>from django.db.models.signals import post_save

def logging_function(sender, **kwargs):
   # do your logging

post_save.connect(logging_function)
</snippet></ROW><ROW><id>5259160</id><snippet>valid_utf8 = True
try:
    filename.decode('utf-8')
except UnicodeDecodeError:
    valid_utf8 = False
</snippet></ROW><ROW><id>5259279</id><snippet>self.factory</snippet></ROW><ROW><id>5259279</id><snippet>numProtocols</snippet></ROW><ROW><id>5259279</id><snippet>twisted.internet.protocol.Factory</snippet></ROW><ROW><id>5259279</id><snippet>from twisted.internet.protocol import Protocol, Factory
from twisted.internet import reactor

class Echo(Protocol):
    # ... your implementation as it is now ...

class EchoFactory(Factory):  # Factory for your protocol
    protocol = Echo
    numProtocols = 0

factory = EchoFactory()
factory.protocol = Echo

reactor.listenTCP(8007, factory)
reactor.run()
</snippet></ROW><ROW><id>5259279</id><snippet>from twisted.internet.protocol import Protocol, Factory
from twisted.internet import reactor

class Echo(Protocol):
    # ... your implementation as it is now ...

def getEchoFactory():
    factory = Factory()
    factory.protocol = Echo
    factory.numProtocols = 0
    return factory

reactor.listenTCP(8007, getEchoFactory())
reactor.run()
</snippet></ROW><ROW><id>5259353</id><snippet>import json

v = [1, 2, 4]
s = json.dumps(v)
</snippet></ROW><ROW><id>5259447</id><snippet>Ã¸</snippet></ROW><ROW><id>5259447</id><snippet>\xc3\xb8</snippet></ROW><ROW><id>5259447</id><snippet>\xc3\xb8</snippet></ROW><ROW><id>5259447</id><snippet>ø</snippet></ROW><ROW><id>5259807</id><snippet>&gt;&gt;&gt; from re import match
&gt;&gt;&gt; match(2 * '(.*?), ', 'some string, another string, ').groups()
('some string', 'another string')
</snippet></ROW><ROW><id>5259807</id><snippet>2 * '(.*?)
</snippet></ROW><ROW><id>5259807</id><snippet>&gt;&gt;&gt; match('(?:(.*?), ){2}', 'some string, another string, ').groups()
('another string',)
</snippet></ROW><ROW><id>5259875</id><snippet>Users.select(getattr(Users.q, column)==value)
</snippet></ROW><ROW><id>5259895</id><snippet>=?UTF-8?B?</snippet></ROW><ROW><id>5259895</id><snippet>?=</snippet></ROW><ROW><id>5259895</id><snippet>import base64

#My buggy SSH account needs this to write unicode output, you hopefully won't
import sys
import codecs
sys.stdout = codecs.getwriter('utf-8')(sys.stdout)


encoded = '=?UTF-8?B?0J/RgNC+0LLQtdGA0LrQsA==?='
prefix = '=?UTF-8?B?'
suffix = '?='

#extract the data part of the string
middle = encoded[len(prefix):len(encoded)-len(suffix)]
print "Middle: %s" % middle

#decode the bytes
decoded = base64.b64decode(middle)
#decode the utf-8
decoded = unicode(decoded, 'utf8')

print "Decoded: %s" % decoded
</snippet></ROW><ROW><id>5259895</id><snippet>Middle: 0J/RgNC+0LLQtdGA0LrQsA==
Decoded: Проверка
</snippet></ROW><ROW><id>5260047</id><snippet>makeHTMLTags</snippet></ROW><ROW><id>5260047</id><snippet>originalTextFor</snippet></ROW><ROW><id>5260047</id><snippet>start, end = makeHTMLTags('div')
#anchor = start + SkipTo(end).setResultsName('body') + end 
anchor = originalTextFor(start + SkipTo(end).setResultsName('body') + end)
</snippet></ROW><ROW><id>5260047</id><snippet>originalTextFor</snippet></ROW><ROW><id>5260047</id><snippet>originalTextFor</snippet></ROW><ROW><id>5260047</id><snippet>asString</snippet></ROW><ROW><id>5260047</id><snippet>originalTextFor</snippet></ROW><ROW><id>5260047</id><snippet>res.id</snippet></ROW><ROW><id>5260047</id><snippet>res[0]</snippet></ROW><ROW><id>5260047</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>5260047</id><snippet>makeHTMLTags</snippet></ROW><ROW><id>5260047</id><snippet>withAttribute</snippet></ROW><ROW><id>5260047</id><snippet>start.setParseAction(withAttribute(id="purchaseShvl"))
</snippet></ROW><ROW><id>5260047</id><snippet>start.setParseAction(withAttribute(**{"class":"shovelr"}))
</snippet></ROW><ROW><id>5260047</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>5260047</id><snippet>&lt;div class='shovelr' id='purchaseShvl&gt;
&lt;div class='shovelr-heading'&gt;
&lt;p&gt;Customers WhoBought This Item Also Bought&lt;/p&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>5260047</id><snippet>&lt;/div&gt;</snippet></ROW><ROW><id>5260509</id><snippet>dot()</snippet></ROW><ROW><id>5260509</id><snippet>vdot()</snippet></ROW><ROW><id>5260509</id><snippet>innerproduct()</snippet></ROW><ROW><id>5260509</id><snippet>numpy.linalg</snippet></ROW><ROW><id>5260529</id><snippet>bwdist</snippet></ROW><ROW><id>5260529</id><snippet>distance_transform_edt</snippet></ROW><ROW><id>5260529</id><snippet>0</snippet></ROW><ROW><id>5260529</id><snippet>a</snippet></ROW><ROW><id>5260529</id><snippet>&gt;&gt;&gt; a = np.array(([0,1,0,0,0],
              [1,0,0,0,0],
              [0,0,0,0,1],
              [0,0,0,0,0],
              [0,0,1,0,0]))
</snippet></ROW><ROW><id>5260529</id><snippet>1-a</snippet></ROW><ROW><id>5260529</id><snippet>&gt;&gt;&gt; a
array([[0, 1, 0, 0, 0],
       [1, 0, 0, 0, 0],
       [0, 0, 0, 0, 1],
       [0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0]])
&gt;&gt;&gt; 1 - a
array([[1, 0, 1, 1, 1],
       [0, 1, 1, 1, 1],
       [1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [1, 1, 0, 1, 1]])
</snippet></ROW><ROW><id>5260529</id><snippet>scipy.ndimage.morphology.distance_transform_edt</snippet></ROW><ROW><id>5260529</id><snippet>&gt;&gt;&gt; distance_transform_edt(1-a)
array([[ 1.        ,  0.        ,  1.        ,  2.        ,  2.        ],
       [ 0.        ,  1.        ,  1.41421356,  1.41421356,  1.        ],
       [ 1.        ,  1.41421356,  2.        ,  1.        ,  0.        ],
       [ 2.        ,  1.41421356,  1.        ,  1.41421356,  1.        ],
       [ 2.        ,  1.        ,  0.        ,  1.        ,  2.        ]])
</snippet></ROW><ROW><id>5260666</id><snippet>mylist</snippet></ROW><ROW><id>5260666</id><snippet>i</snippet></ROW><ROW><id>5260666</id><snippet>2</snippet></ROW><ROW><id>5260666</id><snippet>p = mylist.pop(0)
</snippet></ROW><ROW><id>5260666</id><snippet>p</snippet></ROW><ROW><id>5260666</id><snippet>2</snippet></ROW><ROW><id>5260666</id><snippet>i % p == 0</snippet></ROW><ROW><id>5260666</id><snippet>True</snippet></ROW><ROW><id>5260666</id><snippet>i</snippet></ROW><ROW><id>5260666</id><snippet>def number_list(n):
    mylist = []
    for i in range(2,n+1):
        mylist.append(i)
    return mylist
</snippet></ROW><ROW><id>5260666</id><snippet>def number_list(n):
    return range(2, n + 1)
</snippet></ROW><ROW><id>5260666</id><snippet>range(2, n + 1)</snippet></ROW><ROW><id>5261464</id><snippet>test_reversed = dict((v, k) for k, values in test.iteritems() for v in values)
</snippet></ROW><ROW><id>5261596</id><snippet>import mmap
from struct import *

def main():
    filename = raw_input("Input file name: ")
    f = open(filename, "r+b")
    offList, compList = getOffsets(f)
    for i in range(len(offList)):
        print "offset: ", offList[i], "\t Compression: ", compList[i]
    print "ran right"
    stripLabelAndMacro(f, offList, 3)
    offList, compList = getOffsets(f)
    for i in range(len(offList)):
        print "offset: ", offList[i], "\t Compression: ", compList[i]
    f.close()
    #test stripping end crap

def getOffsets(f):
    fmap = mmap.mmap(f.fileno(),0)
    offsets = []
    compressions = []
    #get TIFF version
    ver = int(unpack('H', fmap[2:4])[0])
    if ver == 42:
        #get first IDF
        offset = long(unpack('L', fmap[4:8])[0])
        while (offset != 0):
            offsets.append(offset)
            #get number of tags in this IDF
            tags = int(unpack('H', fmap[offset:offset+2])[0])
            i = 0
            while (i&lt;tags):
                tagID = int(unpack('H',fmap[offset+2:offset+4])[0])
                #if the tag is a compression, get the compression SHORT value and
                #if recognized use a string representation
                if tagID == 259:
                    tagValue = int(unpack('H', fmap[offset+10:offset+12])[0])
                    if tagValue == 1:
                        compressions.append("None")
                    elif tagValue == 5:
                        compressions.append("LZW")
                    elif tagValue == 6:
                        compressions.append("JPEG")
                    elif tagValue == 7:
                        compressions.append("JPEG")
                    elif tagValue == 34712 or tagValue == 33003 or tagValue == 33005:
                        compressions.append("JP2K")
                    else:
                        compressions.append("Unknown")
                i+=1
                offset += 12

            offset = long(unpack('L', fmap[offset+2:offset+6])[0])
    return offsets, compressions

#Tested, Doesn't break TIFF
def stripLabel(f, offsetList, labelIndex):
    fmap = mmap.mmap(f.fileno(),0)
    offsetLabel = offsetList[labelIndex]
    offsetMacro = offsetList[labelIndex+1]
    offsetEnd = fmap.size()
    macroSize = offsetEnd - offsetMacro
    for i in range(macroSize):
        fmap[offsetLabel+i] = fmap[offsetMacro+i]
    fmap.flush()
    fmap.resize(offsetLabel+macroSize-1)
    fmap.close()
</snippet></ROW><ROW><id>5262255</id><snippet>__iter__()</snippet></ROW><ROW><id>5262255</id><snippet>class MyList(object):
    def __init__(self):
        self.list = [42, 3.1415, "Hello World!"]
    def __iter__(self):
        return iter(self.list)

m = MyList()
for x in m:
    print x
</snippet></ROW><ROW><id>5262255</id><snippet>42
3.1415
Hello World!
</snippet></ROW><ROW><id>5262255</id><snippet>__iter__()</snippet></ROW><ROW><id>5262255</id><snippet>next()</snippet></ROW><ROW><id>5262278</id><snippet>handle_exception</snippet></ROW><ROW><id>5262278</id><snippet>class YourHandler(webapp.RequestHandler):

    def handle_exception(self, exception, mode):
        # run the default exception handling
        webapp.RequestHandler.handle_exception(self,exception, mode)
        # note the error in the log
        logging.error("Something bad happend: %s" % str(exception))
        # tell your users a friendly message
        self.response.out.write("Sorry lovely users, something went wrong")
</snippet></ROW><ROW><id>5262397</id><snippet>class C:
    def func1(self):
     self.var1 = "something"

    def func2(self):
     print self.var1

foo = C()
foo.func1()
foo.func2()
</snippet></ROW><ROW><id>5262460</id><snippet>&gt;&gt;&gt; a = '\('
&gt;&gt;&gt; a
'\\('
&gt;&gt;&gt; print(a)
\(
</snippet></ROW><ROW><id>5262532</id><snippet>NameError</snippet></ROW><ROW><id>5262532</id><snippet>import *</snippet></ROW><ROW><id>5262556</id><snippet>urlparse.urlparse()</snippet></ROW><ROW><id>5262853</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>5262853</id><snippet>&lt;meta http-equiv="refresh" content="3;URL=redirect_page.htm"&gt;
</snippet></ROW><ROW><id>5262853</id><snippet>3</snippet></ROW><ROW><id>5262853</id><snippet>redirect_page.htm</snippet></ROW><ROW><id>5262935</id><snippet># 
# use "tiffcp" to write compressed TIFF files.
#
# fredrik lundh (may 13, 1997)
#

import os, tempfile

# install standard driver
import Image, TiffImagePlugin 

LZW      = "lzw"
ZIP      = "zip"
JPEG     = "jpeg"
PACKBITS = "packbits"
G3       = "g3"
G4       = "g4"

def _save(im, fp, filename):

    # check compression mode
    try:
    compression = im.encoderinfo["compression"]
    except KeyError:
    # use standard driver
    TiffImagePlugin._save(im, fp, filename)
    else:
    # compress via temporary file
    if compression not in (LZW, ZIP, JPEG, PACKBITS, G3, G4):
        raise IOError, "unknown compression mode"
    file = tempfile.mktemp()
    im.save(file, "TIFF")
    os.system("tiffcp -c %s %s %s" % (compression, file, filename))
    try: os.unlink(file)
    except: pass

Image.register_save(TiffImagePlugin.TiffImageFile.format, _save)

if __name__ == "__main__":
    # test
    im = Image.open("/usr/iv/tip/images/lenna.ppm")
    im = im.point(lambda v: v &gt;= 128 and 255, "1")
    im.save("lenna.tif", compression=G4)
</snippet></ROW><ROW><id>5262935</id><snippet>Image</snippet></ROW><ROW><id>5263071</id><snippet>from django.utils.translation import activate
activate('en')
# do smthg
activate('pl')
# do something in other language
</snippet></ROW><ROW><id>5263402</id><snippet>Pure-Python</snippet></ROW><ROW><id>5263402</id><snippet>PDF toolkit.</snippet></ROW><ROW><id>5263402</id><snippet>extractText()</snippet></ROW><ROW><id>5263402</id><snippet>pdf = pyPdf.PdfFileReader(file(path, "rb"))
content = pdf.getPage(1).extractText()
</snippet></ROW><ROW><id>5263599</id><snippet>$ cloc decimal.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1            912           2495           2723
-------------------------------------------------------------------------------
</snippet></ROW><ROW><id>5263651</id><snippet>NSTask</snippet></ROW><ROW><id>5263651</id><snippet>NSTask</snippet></ROW><ROW><id>5264042</id><snippet>for line in open('basin_stclair.txt', 'U'):
    print line[0:64]
</snippet></ROW><ROW><id>5264468</id><snippet>suits = {'queen': 2, 'jack': 1, 'king': 2}
l = ['queen','jack','king']
print sorted(l, key=suits.get)
</snippet></ROW><ROW><id>5264821</id><snippet>copyfileobj</snippet></ROW><ROW><id>5264821</id><snippet>def copyfileobj(src, dst, length=None):
    """Copy length bytes from fileobj src to fileobj dst.
       If length is None, copy the entire content.
    """
    if length == 0:
        return
    if length is None:
        shutil.copyfileobj(src, dst)
        return

    BUFSIZE = 16 * 1024
    blocks, remainder = divmod(length, BUFSIZE)
    for b in xrange(blocks):
        buf = src.read(BUFSIZE)
        if len(buf) &lt; BUFSIZE:
            raise IOError("end of file reached")
        dst.write(buf)

    if remainder != 0:
        buf = src.read(remainder)
        if len(buf) &lt; remainder:
            raise IOError("end of file reached")
        dst.write(buf)
    return
</snippet></ROW><ROW><id>5264882</id><snippet>while</snippet></ROW><ROW><id>5264882</id><snippet>or</snippet></ROW><ROW><id>5264882</id><snippet>while AB != "A" or "a" or "B" or "b":
</snippet></ROW><ROW><id>5264882</id><snippet>while (AB != "A") or "a" or "B" or "b":
</snippet></ROW><ROW><id>5264882</id><snippet>or "B"</snippet></ROW><ROW><id>5264882</id><snippet>while AB.lower() not in ('a','b'):
</snippet></ROW><ROW><id>5264910</id><snippet>&gt;&gt;&gt; from sympy import I, solve
&gt;&gt;&gt; from sympy.abc import x, y

&gt;&gt;&gt; solve(x**4-1, x)
[1, -1, -I, I]
</snippet></ROW><ROW><id>5265396</id><snippet>import numpy, bisect
a = numpy.array([1, 2, 5, 10, 25, 36, 66, 90, 121, 230, 333, 500])
idx = bisect.bisect(a, 60)
print a[:idx]
</snippet></ROW><ROW><id>5265614</id><snippet>def foo(self):
   self.subplot.clear()
   hb = self.subplot.hexbin(...)
   if self.cb:
      self.figure.delaxes(self.figure.axes[1])
      self.figure.subplots_adjust(right=0.90)  #default right padding
   self.cb = self.figure.colorbar(hb)
</snippet></ROW><ROW><id>5265644</id><snippet>del</snippet></ROW><ROW><id>5265708</id><snippet>a</snippet></ROW><ROW><id>5265708</id><snippet>a * 2</snippet></ROW><ROW><id>5265708</id><snippet>a * 2</snippet></ROW><ROW><id>5265708</id><snippet>b is a * 2</snippet></ROW><ROW><id>5265708</id><snippet>False</snippet></ROW><ROW><id>5265708</id><snippet>True</snippet></ROW><ROW><id>5265708</id><snippet>b is a[2] * 2</snippet></ROW><ROW><id>5265708</id><snippet>&gt;&gt;&gt; a = [1, 2, 300, 4]
&gt;&gt;&gt; b = a[2] * 2
&gt;&gt;&gt; b is a[2] * 2
False
</snippet></ROW><ROW><id>5265809</id><snippet>/home/user/dev/
    src/pkg1/
         mod1.py

    test/
         mod1_test.py
</snippet></ROW><ROW><id>5265809</id><snippet>PYTHONPATH=$HOME/dev/src python test/mod1_test.py</snippet></ROW><ROW><id>5265809</id><snippet>distribute</snippet></ROW><ROW><id>5265809</id><snippet>virtualenv</snippet></ROW><ROW><id>5265809</id><snippet>% PYTHONPATH=foo:bar python -c 'import sys; print sys.path[:3]'
['', '/home/user/foo', '/home/user/bar']

# exporting the variable makes it sticky for your current session. you can 
# add this to your shell's resource file (e.g. ~/.profile) or source
# it from a textfile to save typing:

% export PYTHONPATH=bar:baz
% python -c 'import sys; print sys.path[:3]'
['', '/home/user/foo', '/home/user/bar']
% python -c 'import sys; print sys.path[:3]'
['', '/home/user/foo', '/home/user/bar']
</snippet></ROW><ROW><id>5265818</id><snippet>extends</snippet></ROW><ROW><id>5265818</id><snippet>include</snippet></ROW><ROW><id>5265818</id><snippet>safe_join</snippet></ROW><ROW><id>5265818</id><snippet>google_appengine\lib\django_1_2\django\template\loaders\filesystem.py</snippet></ROW><ROW><id>5265818</id><snippet>..</snippet></ROW><ROW><id>5265818</id><snippet>{% extends "../templates/base.html" %}
</snippet></ROW><ROW><id>5265818</id><snippet>app/
   controllers/
      home_controller.py
      posts_controller.py
   models/
      ...
   views/
      home/
          index.html
          about.html
      posts/
          show.html
          new.html
      shared/
          base.html
          post.html
</snippet></ROW><ROW><id>5265818</id><snippet>base.html</snippet></ROW><ROW><id>5265818</id><snippet>post.html</snippet></ROW><ROW><id>5265818</id><snippet>base/</snippet></ROW><ROW><id>5265818</id><snippet>..</snippet></ROW><ROW><id>5265818</id><snippet>from django.conf import settings
from django.template import TemplateDoesNotExist
from django.template.loader import BaseLoader
from django.utils._os import safe_join
import os

class MvcTemplateLoader(BaseLoader):
    "A custom template loader for the MVCEngine framework."

    is_usable = True

    __view_paths = None

    def __init__(self, views_path):
        self.views_path = views_path
        # We only need to instantiate the view_paths class variable once.
        if MvcTemplateLoader.__view_paths is None:
            temp_paths = []
            for each_path in os.listdir(views_path):
                # We want to skip hidden directories, so avoid anything that starts with .
                # This works on both Windows and *NIX, but could it fail for other OS's?
                if not each_path.startswith('.'):
                    full_path = os.path.join(views_path, each_path)
                    if each_path == "shared":
                        # The shared directory is special. Since templates in many other directories will be
                        # inheriting from or including templates there, it should come second, right after the
                        # root views directory. For now, it will be first.
                        temp_paths.insert(0, full_path)
                    else:
                        temp_paths.append(full_path)
            # The root views_path itself will always be first in order to give resolution precendence to templates
            # that are specified with a parent directory. In other words, home/index.html will be immediately
            # resolved with no ambiguity; whereas, index.html could resolve as bar/index.html rather than
            # foo/index.html.
            temp_paths.insert(0, views_path)
            MvcTemplateLoader.__view_paths = temp_paths


    def get_template_sources(self, template_name):
        for template_dir in MvcTemplateLoader.__view_paths:
            try:
                yield safe_join(template_dir, template_name)
            except UnicodeDecodeError:
                # The template dir name was a bytestring that wasn't valid UTF-8.
                raise
            except ValueError:
                # The joined path was located outside of this particular
                # template_dir (it might be inside another one, so this isn't
                # fatal).
                pass

    def load_template_source(self, template_name, template_dirs=None):
        tried = []
        for filepath in self.get_template_sources(template_name):
            try:
                file = open(filepath)
                try:
                    return (file.read().decode(settings.FILE_CHARSET), filepath)
                finally:
                    file.close()
            except IOError:
                tried.append(filepath)

        error_msg = "Could not find %s in any of the views subdirectories." % template_name
        raise TemplateDoesNotExist(error_msg)
    load_template_source.is_usable = True

_loader = MvcTemplateLoader
</snippet></ROW><ROW><id>5265818</id><snippet>main</snippet></ROW><ROW><id>5265818</id><snippet>def main():    
    from google.appengine.dist import use_library
    use_library('django', '1.2')

    os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

    from django.conf import settings 
    views_path = os.path.join(os.path.dirname(__file__), 'app','views')
    settings.TEMPLATE_LOADERS = (('gaemvclib.mvctemplateloader.MvcTemplateLoader', views_path), 'django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader')
</snippet></ROW><ROW><id>5265818</id><snippet>extends</snippet></ROW><ROW><id>5265818</id><snippet>include</snippet></ROW><ROW><id>5265818</id><snippet>..</snippet></ROW><ROW><id>5265818</id><snippet>views</snippet></ROW><ROW><id>5265902</id><snippet>from django.utils import translation

def ugettext_lazy(str):
    t = translation.ugettext_lazy(str)
    t.message = str
    return t

&gt;&gt;&gt; text = ugettext_lazy('Yes')
&gt;&gt;&gt; text.message
"Yes"
&gt;&gt;&gt; activate('lt')
&gt;&gt;&gt; unicode(text)
u"Taip"
&gt;&gt;&gt; activate('en')
&gt;&gt;&gt;&gt; unicode(text)
u"Yes"
</snippet></ROW><ROW><id>5265902</id><snippet>gettext = lambda s: s
some_text = gettext('Some text')

lazy_translated = ugettext_lazy(text)
untranslated = some_text
</snippet></ROW><ROW><id>5266042</id><snippet>pkg_resources</snippet></ROW><ROW><id>5266042</id><snippet>import pkg_resources
pkg_resources.require('FooPackage==1.2')
import FooPackage
</snippet></ROW><ROW><id>5266042</id><snippet>% easy_install simplejson==2.1.3
% easy_install simplejson==2.1.2

pkg_resources.require('simplejson==2.1.2')
import simplejson
assert simplejson.__version__ == '2.1.2'
</snippet></ROW><ROW><id>5266059</id><snippet>import traceback
traceback.print_exc()
</snippet></ROW><ROW><id>5266059</id><snippet>import System
...

except System.Exception, e:
</snippet></ROW><ROW><id>5266234</id><snippet>cond != True</snippet></ROW><ROW><id>5266234</id><snippet>not cond</snippet></ROW><ROW><id>5266234</id><snippet>class DataNotFound(Exception): pass

def get_key_value():
  if not cond:
    raise DataNotFound("Couldn't find it!")
  return val1, val2

try:
    key,value = get_key_value()
except DataNotFound:
    #handle the failure somehow
    key, value = 'ERROR', 'ERROR'
</snippet></ROW><ROW><id>5266961</id><snippet>totals</snippet></ROW><ROW><id>5266961</id><snippet>finished = false
while not finished:
    trueLine = testFile.readline()
    if not trueLine: # end of file
        finished = true
    else:
        trueLine = trueLine.split() # tokenise by whitespace
        taggedLine = taggedFile.readline()
        if not taggedLine:
            print 'Error: files are out of sync.'
        taggedLine = taggedLine.split()
        if len(trueLine) != len(taggedLine):
            print 'Error: files are out of sync.'
        for i in range(len(trueLine)):
            truePair = trueLine[i].split('/')
            taggedPair = taggedLine[i].split('/')
            if truePair[0] != taggedPair[0]: # the words should match
                print 'Error: files are out of sync.'
            trueTag = truePair[1]
            guessedTag = taggedPair[1]
            if trueTag == guessedTag:
                totals[trueTag]['truePositives'] += 1
            else:
                totals[trueTag]['falseNegatives'] += 1
                totals[guessedTag]['falsePositives'] += 1
</snippet></ROW><ROW><id>5267132</id><snippet>#!/usr/bin/env python
import sys
import signal

from PyQt4.QtCore import *
from PyQt 4.QtGui import *
from PyQt4.QtWebKit import QWebPage

def onLoadFinished(result):
    if not result:
        print "Request failed"
        sys.exit(1)

    # Set the size of the (virtual) browser window
    webpage.setViewportSize(webpage.mainFrame().contentsSize())

    # Paint this frame into an image
    image = QImage(webpage.viewportSize(), QImage.Format_ARGB32)
    painter = QPainter(image)
    webpage.mainFrame().render(painter)
    painter.end()
    image.save("output2.png")
    sys.exit(0)


app = QApplication(sys.argv)
signal.signal(signal.SIGINT, signal.SIG_DFL)

webpage = QWebPage()
webpage.connect(webpage, SIGNAL("loadFinished(bool)"), onLoadFinished)
webpage.mainFrame().load(QUrl("http://www.google.com"))

sys.exit(app.exec_())
</snippet></ROW><ROW><id>5267399</id><snippet>mogrify()</snippet></ROW><ROW><id>5267399</id><snippet>E'foo bar'</snippet></ROW><ROW><id>5267399</id><snippet>\t</snippet></ROW><ROW><id>5267399</id><snippet>unknown</snippet></ROW><ROW><id>5267399</id><snippet>psycopg2.ProgrammingError</snippet></ROW><ROW><id>5267399</id><snippet>CREATE OR REPLACE FUNCTION
    foo (num INTEGER, name VARCHAR, ts TIMESTAMP)
RETURNS TABLE (num INTEGER, name VARCHAR, ts TIMESTAMP)
AS $$ SELECT $1, $2, $3; $$
LANGUAGE SQL;
</snippet></ROW><ROW><id>5267399</id><snippet>% python
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; conn = psycopg2.connect("user=postgres")
&gt;&gt;&gt; r = conn.cursor()
&gt;&gt;&gt; args = [1, "hello", datetime.datetime.now()]
&gt;&gt;&gt; r.callproc('foo', args)
[1, 'hello', datetime.datetime(2011, 3, 10, 18, 51, 24, 904103)]

&gt;&gt;&gt; r.callproc('fooxyz', args)
psycopg2.ProgrammingError: function fooxyz(integer, unknown, unknown) does not exist

LINE 1: SELECT * FROM fooxyz(1,E'hello','2011-03-10T18:51:24.904103'...
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
</snippet></ROW><ROW><id>5267478</id><snippet>double haloshg_add(double d1, double s2)
{
    return d1+d2;
}
</snippet></ROW><ROW><id>5267478</id><snippet>nDLL = ctypes.CDLL('test.dll')
</snippet></ROW><ROW><id>5267478</id><snippet>stdcall</snippet></ROW><ROW><id>5267478</id><snippet>ctypes.WinDLL</snippet></ROW><ROW><id>5267478</id><snippet>double __stdcall haloshg_add(double d1, double s2)
</snippet></ROW><ROW><id>5267478</id><snippet>CDLL</snippet></ROW><ROW><id>5267685</id><snippet>[x == y for (x, y) in zip("TICK", "TOCK")].count(True)
</snippet></ROW><ROW><id>5267685</id><snippet>operator</snippet></ROW><ROW><id>5267685</id><snippet>import operator
map(operator.eq, "TICK", "TOCK").count(True)
</snippet></ROW><ROW><id>5267685</id><snippet>&lt;expr&gt;.count(True)</snippet></ROW><ROW><id>5267685</id><snippet>sum(&lt;expr&gt;)</snippet></ROW><ROW><id>5267862</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>5267862</id><snippet>pythonselect</snippet></ROW><ROW><id>5267951</id><snippet>parser.parse()
output.close()
</snippet></ROW><ROW><id>5267951</id><snippet>with</snippet></ROW><ROW><id>5267951</id><snippet>with open("test.svg", "w") as output:
    ...
    parser.parse()
load()
</snippet></ROW><ROW><id>5267951</id><snippet>QSvgWidget</snippet></ROW><ROW><id>5267951</id><snippet>load</snippet></ROW><ROW><id>5267969</id><snippet>import itertools

mylist = ['W', 'X', 'Y', 'Z']
for pair in itertools.combinations(mylist, 2):
    print pair        # pair is a tuple of 2 elements
</snippet></ROW><ROW><id>5267969</id><snippet>combinations()</snippet></ROW><ROW><id>5268131</id><snippet>malloc()</snippet></ROW><ROW><id>5268131</id><snippet>free()</snippet></ROW><ROW><id>5268131</id><snippet>PyString_AsStringAndSize()</snippet></ROW><ROW><id>5268401</id><snippet>script1.py</snippet></ROW><ROW><id>5268401</id><snippet>script2.py</snippet></ROW><ROW><id>5268474</id><snippet>getattr()</snippet></ROW><ROW><id>5268474</id><snippet>callable()</snippet></ROW><ROW><id>5268474</id><snippet>invert_op = getattr(self, "invert_op", None)
if callable(invert_op):
    invert_op(self.path.parent_op)
</snippet></ROW><ROW><id>5268474</id><snippet>getattr()</snippet></ROW><ROW><id>5268474</id><snippet>None</snippet></ROW><ROW><id>5268557</id><snippet>s = urllib2.urlopen("http://www.bing.com/search?"
              + urllib.urlencode({ 'q' : u'我爸是李刚' .encode('utf8') } )
</snippet></ROW><ROW><id>5268742</id><snippet>dict()</snippet></ROW><ROW><id>5268742</id><snippet>sdb = shelve.open('foo.db')
sdb['abc'] = {'a': 1, 'b': 2}
tmp = cPickle.dumps(dict(sdb), 2)
print cPickle.loads(tmp)
{'abc': {'a': 1, 'b': 2}}
</snippet></ROW><ROW><id>5268742</id><snippet>dict</snippet></ROW><ROW><id>5268742</id><snippet>keys</snippet></ROW><ROW><id>5268742</id><snippet>__getitem__</snippet></ROW><ROW><id>5268742</id><snippet>dict</snippet></ROW><ROW><id>5268742</id><snippet>dict</snippet></ROW><ROW><id>5268742</id><snippet>class Foo(object):

    def __init__(self):
        self.value = 0

    def keys(self):
        return ['a', 'b']

    def __getitem__(self, key):
        v = self.value
        self.value += 1
        return self.value

foo = Foo()
print dict(foo)
print dict(foo)
</snippet></ROW><ROW><id>5268742</id><snippet>{'a': 1, 'b': 2}
{'a': 3, 'b': 4}
</snippet></ROW><ROW><id>5268742</id><snippet>update()</snippet></ROW><ROW><id>5268742</id><snippet>d = {'a': 1, 'b': 2}
s = shelve.open('foo.db')
s.update(d)
print s
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>5268894</id><snippet>seek</snippet></ROW><ROW><id>5268894</id><snippet>struct.pack</snippet></ROW><ROW><id>5268894</id><snippet>numpy.memmap</snippet></ROW><ROW><id>5269042</id><snippet>import csv

f1 = file('hosts.csv', 'r')
f2 = file('masterlist.csv', 'r')
f3 = file('results.csv', 'w')

c1 = csv.reader(f1)
c2 = csv.reader(f2)
c3 = csv.writer(f3)

masterlist = [row for row in c2]

for hosts_row in c1:
    row = 1
    found = False
    for master_row in masterlist:
        results_row = hosts_row
        if hosts_row[3] == master_row[1]:
            results_row.append('FOUND in master list (row ' + str(row) + ')')
            found = True
            break
        row = row + 1
    if not found:
        results_row.append('NOT FOUND in master list')
    c3.writerow(results_row)

f1.close()
f2.close()
f3.close()
</snippet></ROW><ROW><id>5269148</id><snippet>class Node(object):
    def __init__(self, me, dists):
        super(Node,self).__init__()
        self.me = me
        self.dists = dists
        _inf = Network.INF
        self.neighbors = sorted((i for i,dist in enumerate(self.dists) if i!=me and dist!=_inf), key=dists.__getitem__)
        self.clear()

    def clear(self):
        self.dist = None
        self.prev = None

    def nearestNeighbor(self):
        try:
            return self.neighbors[0]
        except IndexError:
            return None

    def __str__(self):
        return "{0}: {1}".format(self.me, self.dists)

class Network(object):
    INF     = 10**6

    @classmethod
    def fromFile(cls, fname, delim=None):
        with open(fname) as inf:
            return cls([[int(dist) for dist in line.split(delim)] for line in inf])

    def __init__(self, distArray):
        super(Network,self).__init__()
        self.nodes = [Node(me,dists) for me,dists in enumerate(distArray)]

    def __str__(self):
        return '\n'.join(self.nodes)

    def floodFill(self, fromNode):
        _nodes = self.nodes
        for n in _nodes:
            n.clear()
        _nodes[fromNode].dist = 0
        # left as an exercise ;-)

    def distances(self):
        return [n.dist for n in self.nodes]

def main():
    nw = Network.fromFile('network.txt', delim=',')
    print(nw)

    nw.floodFill(fromNode=0)
    print(nw.distances())

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>5269255</id><snippet>l = ["foo","bar"]
d = {}
d[l[0] + "blah"] = []
d[l[0] + "blah"].append("foo")
</snippet></ROW><ROW><id>5269255</id><snippet>for k,v in d.iteritems():
    print "{0} --&gt; {1}".format(k,v)
</snippet></ROW><ROW><id>5269322</id><snippet>datatypes = {'string': 'z', 'double': 'd', 'number': 'i', 'blob': 'z'}
t = datatypes[self.datatype]
</snippet></ROW><ROW><id>5269962</id><snippet>#!/usr/bin/env python
#coding=utf-8

import urllib

class MyOpener(urllib.FancyURLopener):
    version = "App/1.7" #doesn't work
    version = "Mozilla/4.0 (MSIE 6.0; Windows NT 5.0)2011-03-10 15:38:34" #works

def textToSpeech(text, languageCode='en'):
    url = "http://translate.google.com/translate_tts?tl=%s&amp;q=%s" % (languageCode, urllib.quote(text))
    myopener = MyOpener()
    return myopener.open(url, 'rb').read()

open('urllib.mp3', 'wb').write(textToSpeech('vår', 'no'))
</snippet></ROW><ROW><id>5270577</id><snippet>itertools.product</snippet></ROW><ROW><id>5270577</id><snippet>&gt;&gt;&gt; list(itertools.product("ABCD", "1234"))
[('A', '1'), ('A', '2'), ('A', '3'), ('A', '4'), ('B', '1'),
('B', '2'), ('B', '3'), ('B', '4'), ('C', '1'), ('C', '2'),
('C', '3'), ('C', '4'), ('D', '1'), ('D', '2'), ('D', '3'),
('D', '4')]
</snippet></ROW><ROW><id>5271269</id><snippet>x</snippet></ROW><ROW><id>5271269</id><snippet>x.__module__</snippet></ROW><ROW><id>5271269</id><snippet>x.__class__.__module__</snippet></ROW><ROW><id>5271269</id><snippet># (Python 3 sample; use 'class Example(object): pass' for Python 2)
&gt;&gt;&gt; class Example: pass

&gt;&gt;&gt; Example.__module__
'__main__'
&gt;&gt;&gt; Example.__class__.__module__
'builtins'
</snippet></ROW><ROW><id>5271269</id><snippet>__module__</snippet></ROW><ROW><id>5271269</id><snippet>&gt;&gt;&gt; Example().__module__
'__main__'
</snippet></ROW><ROW><id>5271269</id><snippet>x.__class__.__module__</snippet></ROW><ROW><id>5271269</id><snippet>x.__module__</snippet></ROW><ROW><id>5271692</id><snippet>action='store_true'</snippet></ROW><ROW><id>5271692</id><snippet>&gt;&gt;&gt; from argparse import ArgumentParser
&gt;&gt;&gt; p = ArgumentParser()
&gt;&gt;&gt; _ = p.add_argument('-f', '--foo', action='store_true')
&gt;&gt;&gt; args = p.parse_args()
&gt;&gt;&gt; args.foo
False
&gt;&gt;&gt; args = p.parse_args(['-f'])
&gt;&gt;&gt; args.foo
True
</snippet></ROW><ROW><id>5271821</id><snippet>for button in stock_button_list:
    self.button1=gtk.Button(stock=getattr(gtk,button))
</snippet></ROW><ROW><id>5273037</id><snippet>stdin</snippet></ROW><ROW><id>5273037</id><snippet>for line in sys.stdin:
    # do suff
</snippet></ROW><ROW><id>5273037</id><snippet>cat file.txt | python script.py
</snippet></ROW><ROW><id>5273090</id><snippet>Number</snippet></ROW><ROW><id>5273090</id><snippet>i = int(Number)                                                                 
print "You selected:", List[i]
</snippet></ROW><ROW><id>5273090</id><snippet>List</snippet></ROW><ROW><id>5273090</id><snippet>my_list</snippet></ROW><ROW><id>5273090</id><snippet>Number</snippet></ROW><ROW><id>5273090</id><snippet>number</snippet></ROW><ROW><id>5273090</id><snippet>list</snippet></ROW><ROW><id>5273090</id><snippet>list</snippet></ROW><ROW><id>5273104</id><snippet>os.path</snippet></ROW><ROW><id>5273104</id><snippet>sys.modules['os.path'] = path</snippet></ROW><ROW><id>5273296</id><snippet>def somefunction(data, tupleofnames):
    length = len(tupleofnames)
    for i in range(0, length):
        globals()[tupleofnames[i]] = data[i]
</snippet></ROW><ROW><id>5273316</id><snippet>class MyModelForm(forms.ModelForm):
    class Meta:
         model = FirstClass
         exclude = ('SecondClass',)

# urls.py
(r'^foo/(?P&lt;object_id&gt;\d+)/$','django.views.generic.create_update.update_object',
                                                 {'form_class': MyModelForm})
</snippet></ROW><ROW><id>5273899</id><snippet>cp /tmp/experimental_buildmaster/master.cfg.example xperimental_buildmaster/master.cfg edit it 
</snippet></ROW><ROW><id>5274100</id><snippet>%module functions
%{
#include "functions.h"
%}
%include "std_vector.i"
namespace std {
  %template(VecDouble) vector&lt;double&gt;;
  %template(VecVecdouble) vector&lt; vector&lt;double&gt; &gt;;
}

%include "functions.h"
</snippet></ROW><ROW><id>5274100</id><snippet>*.cs</snippet></ROW><ROW><id>5274100</id><snippet>SWIGTYPE_*.cs</snippet></ROW><ROW><id>5274207</id><snippet>title = "This is my title, there are many like it but this one is mine..."
self.headerItem().setText(0, title)</snippet></ROW><ROW><id>5274843</id><snippet>B= np.split(A, np.where(A[:, 0]== 0.)[0][1:])
</snippet></ROW><ROW><id>5275017</id><snippet>ctypedef unsigned short const_ushort "const uint16_t"
</snippet></ROW><ROW><id>5275017</id><snippet>const</snippet></ROW><ROW><id>5275017</id><snippet>typedef unsigned short const uint16_t</snippet></ROW><ROW><id>5275017</id><snippet>const</snippet></ROW><ROW><id>5275017</id><snippet>uint16_t</snippet></ROW><ROW><id>5275017</id><snippet>ctypedef unsigned short *ushort_p "ushort_p"
</snippet></ROW><ROW><id>5275017</id><snippet>const</snippet></ROW><ROW><id>5275017</id><snippet>const</snippet></ROW><ROW><id>5275017</id><snippet>cdef class</snippet></ROW><ROW><id>5275247</id><snippet>f[50]</snippet></ROW><ROW><id>5275247</id><snippet>a, b, c, d, e, *f, g</snippet></ROW><ROW><id>5275247</id><snippet>f</snippet></ROW><ROW><id>5275247</id><snippet>x = unpack(...)
a, b, c, d, e = x[:5]
f = x[5:55]
&lt;etc&gt;
</snippet></ROW><ROW><id>5275412</id><snippet>class xml.etree.ElementTree.XMLParser(html=0, target=None, encoding=None)
</snippet></ROW><ROW><id>5275412</id><snippet>Element</snippet></ROW><ROW><id>5275412</id><snippet>target</snippet></ROW><ROW><id>5275462</id><snippet>animals = ["Cat", "Dog", "Fish", "Bird"]
if X in animals or Y in animals:
    print X, Y
</snippet></ROW><ROW><id>5275462</id><snippet>&gt;&gt;&gt; 'cat' or 'dog'
'cat'
&gt;&gt;&gt; 'cat' and 'dog'
'dog'
</snippet></ROW><ROW><id>5275462</id><snippet>or</snippet></ROW><ROW><id>5275462</id><snippet>and</snippet></ROW><ROW><id>5275771</id><snippet>ScriptContext</snippet></ROW><ROW><id>5275771</id><snippet>[Fri Mar 11 11:44:35] [root]@[dev] /usr/local/share/moin
# python2.6
Python 2.6.5 (r265:79063, Jun  4 2010, 21:43:07)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from MoinMoin.web.contexts import ScriptContext
&gt;&gt;&gt; request = ScriptContext('http://wiki.dev.mycompany.com')
2011-03-11 11:45:11,481 INFO MoinMoin.config.multiconfig:93 using farm config: /usr/local/share/moin/farmconfig.pyc
2011-03-11 11:45:11,561 INFO MoinMoin.config.multiconfig:127 using wiki config: /usr/local/share/moin/mywiki.pyc
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5275773</id><snippet>&gt;&gt;&gt; os.stat("C:\\autoexec.bat")
nt.stat_result(st_mode=33279, st_ino=0, st_dev=0, st_nlink=0, st_uid=0, st_gid=0,
st_size=0, st_atime=1150614982, st_mtime=1150614982, st_ctime=1150614982)
</snippet></ROW><ROW><id>5275809</id><snippet>scipy.integrate</snippet></ROW><ROW><id>5275918</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>5275918</id><snippet>from BeautifulSoup import BeautifulSoup, NavigableString, Tag

input = '''&lt;br /&gt;
Important Text 1
&lt;br /&gt;
&lt;br /&gt;
Not Important Text
&lt;br /&gt;
Important Text 2
&lt;br /&gt;
Important Text 3
&lt;br /&gt;
&lt;br /&gt;
Non Important Text
&lt;br /&gt;
Important Text 4
&lt;br /&gt;'''

soup = BeautifulSoup(input)

for br in soup.findAll('br'):
    next = br.nextSibling
    if not (next and isinstance(next,NavigableString)):
        continue
    next2 = next.nextSibling
    if next2 and isinstance(next2,Tag) and next2.name == 'br':
        text = str(next).strip()
        if text:
            print "Found:", next
</snippet></ROW><ROW><id>5275944</id><snippet>role_total</snippet></ROW><ROW><id>5275944</id><snippet>list_total</snippet></ROW><ROW><id>5275944</id><snippet>list_sum</snippet></ROW><ROW><id>5275944</id><snippet>from django.template import Library
register = Library()
@register.filter
def running_total(your_dict_list):
   return sum(d['total'] for d in your_dict_list)
</snippet></ROW><ROW><id>5275944</id><snippet>&lt;td&gt;{{ list|running_total}}&lt;/td&gt;</snippet></ROW><ROW><id>5275947</id><snippet>var userDate = new Date();
var tzOffset = userDate.getTimezoneOffset();
// Now set the cookie
</snippet></ROW><ROW><id>5276081</id><snippet>User</snippet></ROW><ROW><id>5276081</id><snippet>ScriptContext</snippet></ROW><ROW><id>5276081</id><snippet>request</snippet></ROW><ROW><id>5276081</id><snippet>&gt;&gt;&gt; import MoinMoin.user
&gt;&gt;&gt; user = MoinMoin.user.get_by_email_address(request,'jarrod.roberson@mycompany.com')
&gt;&gt;&gt; request.user = user
&gt;&gt;&gt; pe = PageEditor(request, 'MyNewTestPage')
&gt;&gt;&gt; pe.saveText('Hello World!', 0)
</snippet></ROW><ROW><id>5276081</id><snippet>User</snippet></ROW><ROW><id>5276264</id><snippet>add_route()</snippet></ROW><ROW><id>5276486</id><snippet>import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import mpl_toolkits.mplot3d.art3d as art3d
from matplotlib.patches import Rectangle, PathPatch

fig = plt.figure()
ax = fig.gca(projection='3d')
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)

xlo = X.min()
xhi = X.max()
ylo = Y.min()
yhi = Y.max()
zlo = -2
zhi = 2

surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, linewidth=1, zorder=100)
cset = ax.contour(X, Y, Z, zdir='z', offset=zlo, alpha=0.0)

def highlight((xmin, xmax),(ymin, ymax)):
    # draw highlight on xz plane
    p1 = Rectangle((ymin,zlo),(ymax-ymin),(zhi-zlo), color='y', alpha=0.5, zorder=0)
    ax.add_patch(p1)
    art3d.pathpatch_2d_to_3d(p1, z=xlo, zdir='x')

    # draw highlight on yz plane
    p2 = Rectangle((xmin,zlo),(xmax-xmin),(zhi-zlo), color='y', alpha=0.5, zorder=0)
    ax.add_patch(p2)
    art3d.pathpatch_2d_to_3d(p2, z=yhi, zdir='y')

    # define a region to highlight
    highlight = (X&gt;xmin)&amp;(X&lt;xmax)&amp;(Y&gt;ymin)&amp;(Y&lt;ymax)
    coll = ax.collections[0]
    # get the original color shading (if you want to keep that effect)
    colors = coll._facecolors_original
    #colors = coll.get_facecolors()
    # they are stored as a list for some reason so get the flat indicies
    for idx in np.where(highlight[:-1,:-1].flat)[0]:
        # and modifly one-by-one
        color = colors[idx][:]
        colors[idx][0] = color[2]  # swap red with blue
        colors[idx][3] = color[0]
        colors[idx][4] = .2  #change alpha
    # re-set the face colors
    coll.set_facecolors(colors)

highlight((-3,0),(-3,1))

ax.set_xlim3d(xlo, xhi)
ax.set_ylim3d(ylo, yhi)
ax.set_zlim3d(zlo, zhi)

plt.show()
</snippet></ROW><ROW><id>5276698</id><snippet>etree.tostring(element)</snippet></ROW><ROW><id>5276698</id><snippet>from lxml import etree

parser = etree.HTMLParser()

with open("whatever.xml") as fp:
    tree = etree.parse(fp)
    i = 0
    for node in tree.xpath('//section'):
        output_filename = "output-%d.xml" % (i,)
        with open(output_filename,"w") as fp:
            fp.write(etree.tostring(node))
        i += 1
</snippet></ROW><ROW><id>5277292</id><snippet>re.sub(r"(\.\d+)_\d+", r"\1", line)
</snippet></ROW><ROW><id>5277327</id><snippet>except a, b</snippet></ROW><ROW><id>5277327</id><snippet>a</snippet></ROW><ROW><id>5277327</id><snippet>b</snippet></ROW><ROW><id>5277327</id><snippet>EOFError</snippet></ROW><ROW><id>5277327</id><snippet>...
except (socket.error, EOFError):
    ...
</snippet></ROW><ROW><id>5277327</id><snippet>except a as b</snippet></ROW><ROW><id>5277476</id><snippet>import time
def time_chunk( some_source, period=10 ):
    start= time.time()
    buffer= []
    for line in some_source:
        buffer.append( line )
        if time.time() - start &gt;= period:
            start= time.time()
            yield buffer
            buffer= []
    yield buffer

for chunk in time_chunk( sys.stdin ):  
    print( stats( chunk ) )
</snippet></ROW><ROW><id>5277617</id><snippet>wsgiref</snippet></ROW><ROW><id>5277716</id><snippet>from unittest.runner import TextTestResult
TextTestResult.getDescription = lambda _, test: test.shortDescription()
</snippet></ROW><ROW><id>5277735</id><snippet>%s</snippet></ROW><ROW><id>5277735</id><snippet>?</snippet></ROW><ROW><id>5277735</id><snippet>for q in csvReader:
    name, price, LastUpdate, today = q
    co.execute("INSERT INTO fundata (name, price, LastUpdate) VALUES(%s, %s, %s);",q)
</snippet></ROW><ROW><id>5277735</id><snippet>c.executemany(
      """INSERT INTO breakfast (name, spam, eggs, sausage, price)
      VALUES (%s, %s, %s, %s, %s)""",
      [
      ("Spam and Sausage Lover's Plate", 5, 1, 8, 7.95 ),
      ("Not So Much Spam Plate", 3, 2, 0, 3.95 ),
      ("Don't Wany ANY SPAM! Plate", 0, 4, 3, 5.95 )
      ] )
</snippet></ROW><ROW><id>5277874</id><snippet>somedict = {0: {}, 1:{}}
somedict[0][-5] = "thingy"
somedict[1][4] = "bing"
</snippet></ROW><ROW><id>5277874</id><snippet>somedict[0]</snippet></ROW><ROW><id>5277874</id><snippet>getitem()</snippet></ROW><ROW><id>5277874</id><snippet>setdefault()</snippet></ROW><ROW><id>5277874</id><snippet>dict</snippet></ROW><ROW><id>5277874</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>5278107</id><snippet>nc</snippet></ROW><ROW><id>5278107</id><snippet>machineB</snippet></ROW><ROW><id>5278107</id><snippet>nc -l 12345 | processing_program
</snippet></ROW><ROW><id>5278107</id><snippet>machineA</snippet></ROW><ROW><id>5278107</id><snippet>generating_program | nc machineB 12345
</snippet></ROW><ROW><id>5278107</id><snippet>machineB</snippet></ROW><ROW><id>5278151</id><snippet>if len(x) &gt; len(set(x)):
   pass # do something
</snippet></ROW><ROW><id>5278389</id><snippet>tentativeDistance(theNetwork, nodeTable, nearestNeighbour)
</snippet></ROW><ROW><id>5278389</id><snippet> x = nearestNeighbour(nodeTable, theNetwork)
 tentativeDistance(theNetwork, nodeTable, x)
</snippet></ROW><ROW><id>5278389</id><snippet>for - in -</snippet></ROW><ROW><id>5278493</id><snippet>__base__</snippet></ROW><ROW><id>5278493</id><snippet>&gt;&gt;&gt; StreetCat.__base__ is Cat
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>5278493</id><snippet>__bases__</snippet></ROW><ROW><id>5278493</id><snippet>class Foo(A, B)</snippet></ROW><ROW><id>5278493</id><snippet>&gt;&gt;&gt; StreetCat._meta.get_parent_list() 
[Out] : Set([Class Animal, Class Cat])
</snippet></ROW><ROW><id>5278493</id><snippet>InheritedClass.parents</snippet></ROW><ROW><id>5278493</id><snippet>&gt;&gt;&gt; StreetCat._meta.parents.keys()[-1]
</snippet></ROW><ROW><id>5278493</id><snippet>&gt;&gt;&gt; StreetCat.__mro__[-3] 
# once you know that BaseModel is an Object, and since all defined models subclass 
# the BaseModel, [-3] is the first class that subclasses models.Model
</snippet></ROW><ROW><id>5278679</id><snippet>lenchunk</snippet></ROW><ROW><id>5278679</id><snippet>from random import randrange, choice


# this part is to create an exemple file with newline being :;:
alphabet = 'abcdefghijklmnopqrstuvwxyz '
ch = ':;:'.join(''.join(choice(alphabet) for nc in xrange(randrange(0,40)))
                for i in xrange(50))
with open('fofo.txt','wb') as g:
    g.write(ch)


# this generator function is an iterator for a file
# if nl receives an argument whose bool is True,
# the newlines :;: are returned in the lines

def liner(filename,eol,lenchunk,nl=0):
    # nl = 0 or 1 acts as 0 or 1 in splitlines()
    L = len(eol)
    NL = len(eol) if nl else 0
    with open(filename,'rb') as f:
        chunk = f.read(lenchunk)
        tail = ''
        while chunk:
            last = chunk.rfind(eol)
            if last==-1:
                kept = chunk
                newtail = ''
            else:
                kept = chunk[0:last+L]   # here: L
                newtail = chunk[last+L:] # here: L
            chunk = tail + kept
            tail = newtail
            x = y = 0
            while y+1:
                y = chunk.find(eol,x)
                if y+1: yield chunk[x:y+NL] # here: NL
                else: break
                x = y+L # here: L
            chunk = f.read(lenchunk)
        yield tail



for line in liner('fofo.txt',':;:'):
    print line
</snippet></ROW><ROW><id>5278679</id><snippet>from random import randrange, choice


# this part is to create an exemple file with newline being :;:
alphabet = 'abcdefghijklmnopqrstuvwxyz '
ch = ':;:'.join(''.join(choice(alphabet) for nc in xrange(randrange(0,40)))
                for i in xrange(50))
with open('fofo.txt','wb') as g:
    g.write(ch)


# this generator function is an iterator for a file
# if nl receives an argument whose bool is True,
# the newlines :;: are returned in the lines

def liner(filename,eol,lenchunk,nl=0):
    L = len(eol)
    NL = len(eol) if nl else 0
    with open(filename,'rb') as f:
        ch = f.read()
        the_end = '\n\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'+\
                  '\nend of the file=='+ch[-50:]+\
                  '\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n'
        f.seek(0,0)
        chunk = f.read(lenchunk)
        tail = ''
        while chunk:
            if (chunk[-1]==':' and chunk[-3:]!=':;:') or chunk[-2:]==':;':
                wr = [' ##########---------- cut newline cut ----------##########'+\
                     '\nchunk== '+chunk+\
                     '\n---------------------------------------------------']
            else:
                wr = ['chunk== '+chunk+\
                     '\n---------------------------------------------------']
            last = chunk.rfind(eol)
            if last==-1:
                kept = chunk
                newtail = ''
            else:
                kept = chunk[0:last+L]   # here: L
                newtail = chunk[last+L:] # here: L
            wr.append('\nkept== '+kept+\
                      '\n---------------------------------------------------'+\
                      '\nnewtail== '+newtail)
            chunk = tail + kept
            tail = newtail
            wr.append('\n---------------------------------------------------'+\
                      '\ntail + kept== '+chunk+\
                      '\n---------------------------------------------------')
            print ''.join(wr)
            x = y = 0
            while y+1:
                y = chunk.find(eol,x)
                if y+1: yield chunk[x:y+NL] # here: NL
                else: break
                x = y+L # here: L
            print '\n\n==================================================='
            chunk = f.read(lenchunk)
        yield tail
        print the_end



for line in liner('fofo.txt',':;:',1):
    print 'line== '+line
</snippet></ROW><ROW><id>5278679</id><snippet>alphabet = 'abcdefghijklmnopqrstuvwxyz '
ch = ':;:'.join(''.join(choice(alphabet) for nc in xrange(randrange(0,60)))
                for i in xrange(324000))
with open('fofo.txt','wb') as g:
    g.write(ch)
</snippet></ROW><ROW><id>5278679</id><snippet>te = clock()
for line in liner('fofo.txt',':;:', 65536):
    pass
print clock()-te


fh = open('fofo.txt', 'rb')
zenBreaker = SpecialDelimiters(fh, ':;:', 65536)

te = clock()
for line in zenBreaker:
    pass
print clock()-te
</snippet></ROW><ROW><id>5278679</id><snippet>liner2()</snippet></ROW><ROW><id>5278679</id><snippet>def liner2(fh,eol,lenchunk,nl=0):
    L = len(eol)
    NL = len(eol) if nl else 0
    chunk = fh.read(lenchunk)
    tail = ''
    while chunk:
        last = chunk.rfind(eol)
        if last==-1:
            kept = chunk
            newtail = ''
        else:
            kept = chunk[0:last+L]   # here: L
            newtail = chunk[last+L:] # here: L
        chunk = tail + kept
        tail = newtail
        x = y = 0
        while y+1:
            y = chunk.find(eol,x)
            if y+1: yield chunk[x:y+NL] # here: NL
            else: break
            x = y+L # here: L
        chunk = fh.read(lenchunk)
    yield tail

fh = open('fofo.txt', 'rb')
te = clock()
for line in liner2(fh,':;:', 65536):
    pass
print clock()-te
</snippet></ROW><ROW><id>5278724</id><snippet>0</snippet></ROW><ROW><id>5278724</id><snippet>.FPT</snippet></ROW><ROW><id>5278724</id><snippet>foo.fpt</snippet></ROW><ROW><id>5278724</id><snippet>foo.dbf</snippet></ROW><ROW><id>5278724</id><snippet>dbf</snippet></ROW><ROW><id>5278724</id><snippet>pydbfrw</snippet></ROW><ROW><id>5278724</id><snippet>Field Type      Description  DBF variety  Python 2.x type
0 (digit zero)  _NullFlags   VFP          N/A             

Notes: This field type is used only for the hidden _NullFlags field which
is a bit mask saying which fields in the record should be interpreted as NULL.
</snippet></ROW><ROW><id>5278724</id><snippet>None</snippet></ROW><ROW><id>5278822</id><snippet>dbus-python</snippet></ROW><ROW><id>5278822</id><snippet>Introspectable</snippet></ROW><ROW><id>5278822</id><snippet>Introspect</snippet></ROW><ROW><id>5278822</id><snippet>/path/to/users</snippet></ROW><ROW><id>5278822</id><snippet>dbus-python</snippet></ROW><ROW><id>5278822</id><snippet>ListUsers()</snippet></ROW><ROW><id>5278822</id><snippet>a{oa{sv}}</snippet></ROW><ROW><id>5278822</id><snippet>Properties.GetAll("uk.co.example.MyService.User")</snippet></ROW><ROW><id>5279010</id><snippet>wx.DECORATIVE, wx.DEFAULT,wx.MODERN, wx.ROMAN, wx.SCRIPT or wx.SWISS.
</snippet></ROW><ROW><id>5279010</id><snippet>font = wx.Font(sw/10 , wx.DEFAULT, wx.NORMAL, wx.NORMAL)
</snippet></ROW><ROW><id>5279229</id><snippet>data[i] = chr(ord(data[i]) ^ asConvCode[i % 3])
</snippet></ROW><ROW><id>5279229</id><snippet>return data</snippet></ROW><ROW><id>5279617</id><snippet>height_r_t = np.ma.masked_where(repelling_force_prefactor == 0, height_r_t)
repelling_forces = np.ma.exp(-(height_r_t/potential_steepness))
</snippet></ROW><ROW><id>5279864</id><snippet>if self.invoice_file.count() &gt; 0:
</snippet></ROW><ROW><id>5279864</id><snippet>class Post(models.Model):
    title = models.CharField(max_length=100)
    commenters = models.ManyToManyField(User)

me = User.objects.get(username='Josh')
p = Post(title="ManyToManyExample")
p.commenters.add(me) # error, Post does not yet have an ID.
p.save()
p.commenters.add(me) # success!
</snippet></ROW><ROW><id>5279864</id><snippet>invoice_file</snippet></ROW><ROW><id>5279864</id><snippet>invoice_files</snippet></ROW><ROW><id>5279864</id><snippet>Invoice.save</snippet></ROW><ROW><id>5279864</id><snippet>UploadFile</snippet></ROW><ROW><id>5279864</id><snippet>Invoice</snippet></ROW><ROW><id>5279864</id><snippet>class Invoice(models.Model):
    ...

    def add_invoice_file(self, uploaded_file):
        self.invoice_files.add(uploaded_file) # error if the Invoice hasn't been saved yet
        for invoice_file in self.invoice_files.all(): 
            status = invoice_file.locked_status(1)
            if status != 1:
                raise Exception('Blah')
</snippet></ROW><ROW><id>5279864</id><snippet>.all()</snippet></ROW><ROW><id>5279864</id><snippet>self.invoice_files.filter(locked=False)</snippet></ROW><ROW><id>5279872</id><snippet>thisInstance=myClass(atributeA=valueA, atributeB=valueB, atributeC=valueC)
</snippet></ROW><ROW><id>5279972</id><snippet>def runmethods(self, variables, methods):
   for method in methods:
       method(variables)
</snippet></ROW><ROW><id>5279972</id><snippet>self.runmethods(variables, (method1, method2))
</snippet></ROW><ROW><id>5279972</id><snippet>def rest(a, b):
    print a - b

def sum(a, b):
    print a + b

def run(adictio):
    for method, (a, b) in adictio.iteritems():
        method(a, b)

mydictio = {rest:(3, 2), sum:(4, 5)}

run(mydictio)
</snippet></ROW><ROW><id>5279972</id><snippet>for method, (a,b) in adictio.iteritems():
</snippet></ROW><ROW><id>5279972</id><snippet>def rest(*args):
    a, b = args
    print a - b

def sum(*args):
    a, b, c, d, e = args
    print a + b + c + d + e

def run(adictio):
    for method, params in adictio.iteritems():
        method(*params)

mydictio = {rest:(3, 2), sum:(4, 5, 6, 7, 8)}

run(mydictio)
</snippet></ROW><ROW><id>5280205</id><snippet>execfile('file.py')
</snippet></ROW><ROW><id>5280205</id><snippet>C:\junk&gt;copy con execfile_example.py
a = [9, 42, 888]
b = len(a)
^Z
        1 file(s) copied.

C:\junk&gt;\python27\python
Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; execfile('execfile_example.py')
&gt;&gt;&gt; a
[9, 42, 888]
&gt;&gt;&gt; b
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5280221</id><snippet>main()</snippet></ROW><ROW><id>5280221</id><snippet>main()</snippet></ROW><ROW><id>5280221</id><snippet>def main():
    Try:
        doSomething()
        return 0
    Except:
        return 1


if __name__ == "__main__":
    exit (main())
</snippet></ROW><ROW><id>5280442</id><snippet>if word == '\#':
</snippet></ROW><ROW><id>5280442</id><snippet>print "\#"</snippet></ROW><ROW><id>5280774</id><snippet>datetime</snippet></ROW><ROW><id>5280774</id><snippet>from datetime import tzinfo, timedelta, datetime

class FixedOffset(tzinfo):
    def __init__(self, offset):
        self.__offset = timedelta(hours=offset)
        self.__dst = timedelta(hours=offset-1)
        self.__name = ''

    def utcoffset(self, dt):
        return self.__offset

    def tzname(self, dt):
        return self.__name

    def dst(self, dt):
        return self.__dst

print datetime.now()
print datetime.now(FixedOffset(9))
</snippet></ROW><ROW><id>5280774</id><snippet>2011-03-12 00:28:32.214000
2011-03-12 14:28:32.215000+09:00
</snippet></ROW><ROW><id>5280784</id><snippet>C:\Python27\python.exe</snippet></ROW><ROW><id>5280784</id><snippet>python</snippet></ROW><ROW><id>5280784</id><snippet>python code.py</snippet></ROW><ROW><id>5280883</id><snippet>current</snippet></ROW><ROW><id>5280883</id><snippet>past</snippet></ROW><ROW><id>5280883</id><snippet>past.append(current)</snippet></ROW><ROW><id>5280883</id><snippet>def Gen(x,y):</snippet></ROW><ROW><id>5280883</id><snippet>past.append(current[:])</snippet></ROW><ROW><id>5280883</id><snippet>list[:]</snippet></ROW><ROW><id>5280883</id><snippet>current</snippet></ROW><ROW><id>5280924</id><snippet>login: admin</snippet></ROW><ROW><id>5280924</id><snippet>/task?blah=something</snippet></ROW><ROW><id>5280924</id><snippet>/task/?blah=something</snippet></ROW><ROW><id>5280924</id><snippet>/image/</snippet></ROW><ROW><id>5280924</id><snippet>/browse/</snippet></ROW><ROW><id>5280924</id><snippet>/api/</snippet></ROW><ROW><id>5280924</id><snippet>get</snippet></ROW><ROW><id>5280924</id><snippet>- url: /movie/(.*)/rating-review-video/ 
  script: /wianga/site/MoviePage.py 
- url: /movie/(.*)/rating-review-video 
  script: /wianga/site/MoviePage.py`
</snippet></ROW><ROW><id>5280924</id><snippet>- url: /movie/(.*)/rating-review-video.*
  script: /wianga/site/MoviePage.py`
</snippet></ROW><ROW><id>5280924</id><snippet>get</snippet></ROW><ROW><id>5280924</id><snippet> logging.info('environ: ' + str(self.request._environ))
</snippet></ROW><ROW><id>5281640</id><snippet>class struct_ifaddrs(Structure):
    pass
struct_ifaddrs._fields_ = [
    ('ifa_next', POINTER(struct_ifaddrs)),]
</snippet></ROW><ROW><id>5281840</id><snippet>eval</snippet></ROW><ROW><id>5281840</id><snippet>&gt;&gt;&gt; r"b'\x12\x12'"
"b'\\x12\\x12'"
&gt;&gt;&gt; eval(r"b'\x12\x12'")
'\x12\x12'
</snippet></ROW><ROW><id>5281840</id><snippet>eval</snippet></ROW><ROW><id>5281840</id><snippet>eval</snippet></ROW><ROW><id>5281840</id><snippet>eval</snippet></ROW><ROW><id>5281840</id><snippet>b''</snippet></ROW><ROW><id>5281840</id><snippet>\xXX</snippet></ROW><ROW><id>5281859</id><snippet>dict2</snippet></ROW><ROW><id>5281859</id><snippet>[]</snippet></ROW><ROW><id>5281859</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>5281859</id><snippet>dict2 = dict((v, []) for v in dict1.values())
</snippet></ROW><ROW><id>5282088</id><snippet>personal = form.save(commit = False)
personal.person = request.user
personal.save()
</snippet></ROW><ROW><id>5282178</id><snippet>urllib.request</snippet></ROW><ROW><id>5282511</id><snippet>"Hello %s" % user_name_function()
</snippet></ROW><ROW><id>5282511</id><snippet>"Hello {0}".format(user_name_function())
</snippet></ROW><ROW><id>5282623</id><snippet>your-script</snippet></ROW><ROW><id>5282623</id><snippet>/your/shared/home/virtualenv</snippet></ROW><ROW><id>5282623</id><snippet>$ pip install your-app.tar.gz -E /your/shared/home/virtualenv
</snippet></ROW><ROW><id>5282623</id><snippet>$ ln -s /your/shared/home/virtualenv/bin/your-script /shared/app/folder/
</snippet></ROW><ROW><id>5282623</id><snippet>/shared/app/folder/your-script</snippet></ROW><ROW><id>5282623</id><snippet>/shared/app/folder/</snippet></ROW><ROW><id>5282623</id><snippet>PATH</snippet></ROW><ROW><id>5282623</id><snippet>/your/shared/home/virtualenv-old-version/bin/your-script</snippet></ROW><ROW><id>5282623</id><snippet>pip install -e .</snippet></ROW><ROW><id>5282942</id><snippet>ConnectionPool</snippet></ROW><ROW><id>5282942</id><snippet>multiprocessing</snippet></ROW><ROW><id>5282942</id><snippet>import cloudfiles
import multiprocessing

USERNAME = '---'
API_KEY = '---'


def get_container():
    conn = cloudfiles.get_connection(USERNAME, API_KEY)
    testcontainer = conn.create_container('test')
    return testcontainer

def uploader(filenames):
    '''Worker process to upload the given files'''
    container = get_container()

    # Keep going till you reach STOP
    for filename in iter(filenames.get, 'STOP'):
        # Create the object and upload
        obj = container.create_object(filename)
        obj.load_from_filename(filename)

def main():
    NUMBER_OF_PROCESSES = 16

    # Add your filenames to this queue
    filenames = multiprocessing.Queue()

    # Start worker processes
    for i in range(NUMBER_OF_PROCESSES):
        multiprocessing.Process(target=uploader, args=(filenames,)).start()

    # You can keep adding tasks until you add STOP
    filenames.put('some filename')

    # Stop all child processes
    for i in range(NUMBER_OF_PROCESSES):
        filenames.put('STOP')

if __name__ == '__main__':
    multiprocessing.freeze_support()
    main()
</snippet></ROW><ROW><id>5283643</id><snippet>handlers:
- url: /js
  static_dir: js
</snippet></ROW><ROW><id>5283643</id><snippet>/js</snippet></ROW><ROW><id>5283643</id><snippet>&lt;script src="/js/jquery.js" type="text/javascript" &gt;&lt;/script&gt;
</snippet></ROW><ROW><id>5284038</id><snippet>scipy.interpolate.spline</snippet></ROW><ROW><id>5284038</id><snippet>from scipy.interpolate import spline

xnew = np.linspace(T.min(),T.max(),300)

power_smooth = spline(T,power,xnew)

plt.plot(xnew,power_smooth)
plt.show()
</snippet></ROW><ROW><id>5284082</id><snippet>os.fork</snippet></ROW><ROW><id>5284082</id><snippet>ptrace(PTRACE_ATTACH, child_pid, ...)</snippet></ROW><ROW><id>5284082</id><snippet>resource.getrusage(RUSAGE_CHILDREN, ...)</snippet></ROW><ROW><id>5284222</id><snippet>zip</snippet></ROW><ROW><id>5284222</id><snippet>timestamps, elements = zip(*sorted(zip(timestamps, elements)))
</snippet></ROW><ROW><id>5284367</id><snippet>self.socket</snippet></ROW><ROW><id>5284367</id><snippet>import asyncore
import socket

class User(asyncore.dispatcher_with_send):

    def __init__(self, sock, server):
        asyncore.dispatcher_with_send.__init__(self, sock)
        self.server = server

    def handle_read(self):
        data = self.recv(4096)
        # parse User auth protocol here, authenticate, set phase flag, etc.
        # if authenticated, send data to server
        if self.server:
            self.server.send(data)

    def handle_close(self):
        if self.server:
            self.server.close()
        self.close()

class Listener(asyncore.dispatcher_with_send):

    def __init__(self, listener_addr, server):
        asyncore.dispatcher_with_send.__init__(self)
        self.server = server
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind(listener_addr)
        self.listen(1)

    def handle_accept(self):
        conn, addr = self.accept()
        # this listener only accepts 1 client. while it is serving 1 client
        # it will reject all other clients.
        if not self.server.user:
            self.server.user = User(conn, self.server)
        else:
            conn.close()

class Server(asyncore.dispatcher_with_send):

    def __init__(self, server_addr, listener_addr):
        asyncore.dispatcher_with_send.__init__(self)
        self.server_addr = server_addr
        self.listener_addr = listener_addr
        self.listener = None
        self.user = None

    def start(self):
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect(self.server_addr)

    def handle_error(self, *n):
        self.close()

    def handle_read(self):
        data = self.recv(4096)
        # parse SomeServer auth protocol here, set phase flag, etc.
        if not self.listener:
            self.listener = Listener(self.listener_addr, self)
        # if user is attached, send data
        elif self.user:
            self.user.send(data)

    def handle_close(self):
        if self.user:
            self.user.server = None
            self.user.close()
            self.user = None
        if self.listener:
            self.listener.close()
            self.listener = None
        self.close()
        self.start()

if __name__ == '__main__':
    app = Server(('someserver', 143), ('localhost', 8080))
    app.start()
    asyncore.loop()
</snippet></ROW><ROW><id>5284372</id><snippet>%</snippet></ROW><ROW><id>5284372</id><snippet>M</snippet></ROW><ROW><id>5284372</id><snippet> date_struct = time.strptime(datetime, "%m-%d-%Y %I:%M %p")
</snippet></ROW><ROW><id>5284403</id><snippet>instanceof</snippet></ROW><ROW><id>5284703</id><snippet>array = numpy.array([4,2,7,1])
temp = array.argsort()
ranks = numpy.empty(len(array), int)
ranks[temp] = numpy.arange(len(array))
</snippet></ROW><ROW><id>5284800</id><snippet>eval</snippet></ROW><ROW><id>5284906</id><snippet>app.yaml</snippet></ROW><ROW><id>5284906</id><snippet>login: admin</snippet></ROW><ROW><id>5284906</id><snippet>/admin/.*</snippet></ROW><ROW><id>5284906</id><snippet> - url: /admin/.*
   script: admin.py
   login: admin
</snippet></ROW><ROW><id>5285210</id><snippet>import config
import MySQLdb
import multiprocessing as mp
import random
import string
import time

def random_string(n):
    return ''.join(random.choice(string.letters) for _ in range(n))

def generate_data():
    conn=MySQLdb.connect(
        host=config.HOST,user=config.USER,
        passwd=config.PASS,db='test')    
    cursor=conn.cursor()
    while True:
        with open('/tmp/test.dat','w') as f:
            for _ in range(20):
                f.write('{b}\n'.format(b=random_string(10)))
        # sql='LOCK TABLES foo WRITE'
        # cursor.execute(sql)
        sql="LOAD DATA INFILE '/tmp/test.dat' INTO TABLE test.foo"
        cursor.execute(sql)
        conn.commit()
        # sql='UNLOCK TABLES'
        # cursor.execute(sql)        
        time.sleep(0.05)

def setup_innodb(connection):
    cursor=connection.cursor()
    sql='DROP TABLE IF EXISTS foo'
    cursor.execute(sql)
    sql='''\
        CREATE TABLE `foo` (
          `bar` varchar(10) NOT NULL
        ) ENGINE=InnoDB  
        '''
    cursor.execute(sql)
    connection.commit()

if __name__ == '__main__':
    NUMBER_OF_ITERATIONS = 20
    conn=MySQLdb.connect(
        host=config.HOST,user=config.USER,
        passwd=config.PASS,db='test')
    setup_innodb(conn)

    # Start a process which is "simultaneously" calling LOAD DATA INFILE
    proc=mp.Process(target=generate_data)
    proc.daemon=True
    proc.start()

    for i in range( NUMBER_OF_ITERATIONS ):
        cursor = conn.cursor()
        # sql='''SELECT field 
        #        FROM table 
        #        WHERE other_field = 0 
        #        LIMIT 10 LOCK IN SHARE MODE'''
        # sql='LOCK TABLES foo READ'
        # cursor.execute(sql)
        sql='''SELECT * 
               FROM foo
               LOCK IN SHARE MODE
               '''
        res = cursor.execute(sql)
        print '# of selected rows: ' + str(res)
        values = cursor.fetchall()
        # http://dev.mysql.com/doc/refman/5.0/en/innodb-locking-reads.html
        # Locks set by LOCK IN SHARE MODE and FOR UPDATE reads are released when
        # the transaction is committed or rolled back.
        conn.commit()
        time.sleep(0.1)

    conn.close()
    print 'DONE'
</snippet></ROW><ROW><id>5285210</id><snippet># of selected rows: 0
# of selected rows: 40
# of selected rows: 80
# of selected rows: 120
# of selected rows: 160
# of selected rows: 180
# of selected rows: 220
# of selected rows: 260
# of selected rows: 300
# of selected rows: 340
# of selected rows: 360
# of selected rows: 400
# of selected rows: 440
# of selected rows: 460
# of selected rows: 500
# of selected rows: 540
# of selected rows: 580
# of selected rows: 600
# of selected rows: 640
# of selected rows: 680
DONE
</snippet></ROW><ROW><id>5285383</id><snippet>output = open('/home/user/test/wsservice/data.pkl', 'wb')
</snippet></ROW><ROW><id>5285395</id><snippet>text.tag_bind</snippet></ROW><ROW><id>5285395</id><snippet>'&lt;Button-1&gt;'</snippet></ROW><ROW><id>5285395</id><snippet>from Tkinter import *

rows = ["A few lines", "of text", "for our example"]
def callback(row):
    print "you picked row # %s which has this data: %s" % (row, rows[row])

rows = ["A few lines", "of text", "for our example"]
root = Tk()
t = Text(root)
t.pack()

t.insert(END, '\n'.join(rows))
for i in range(len(rows)):
    line_num = i + 1 # Tkinter text counts from 1, not zero
    tag_name = "tag_%s" % line_num
    t.tag_add(tag_name, "%s.0" % line_num, "%s.end" % line_num)
    t.tag_bind(tag_name, "&lt;Button-1&gt;", lambda e, row=i: callback(row))

root.mainloop()
</snippet></ROW><ROW><id>5285528</id><snippet>for row in nlist:
    row.insert(0, a)
</snippet></ROW><ROW><id>5285837</id><snippet>self.__class__</snippet></ROW><ROW><id>5285942</id><snippet>$ python
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; txt = u'Dassault Myst\xe8re'
&gt;&gt;&gt; txt
u'Dassault Myst\xe8re'
&gt;&gt;&gt; print txt
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  UnicodeEncodeError: 'ascii' codec can't encode character u'\xe8' in position 13:
  ordinal not in range(128)
&gt;&gt;&gt; ^D
$ export LANG=en_US.UTF-8
$ python
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; txt = u'Dassault Myst\xe8re'
&gt;&gt;&gt; txt
u'Dassault Myst\xe8re'
&gt;&gt;&gt; print txt
Dassault Mystère
&gt;&gt;&gt;^D 
</snippet></ROW><ROW><id>5286049</id><snippet>"%.16f" % f
</snippet></ROW><ROW><id>5286049</id><snippet>"%.16f" % f if f &gt;= 1e-16 else "0.0"
</snippet></ROW><ROW><id>5286066</id><snippet>P(cl|doc,len) = (P(doc,len|cl) * P(cl)) / P(doc,len)
              = (P(doc|cl) * P(len|cl) * P(cl)) / (P(doc) * P(len))
              = (P(doc|cl) * P(cl)) / P(doc) * P(len|cl) / P(len)
              = P(cl|doc) * P(len|cl) / P(len)
</snippet></ROW><ROW><id>5286066</id><snippet>from nltk.corpus import movie_reviews
from math import sqrt,log
import scipy

loglens = [log(len(movie_reviews.words(f))) for f in movie_reviews.fileids()]
sd = sqrt(scipy.var(loglens)) 
mu = scipy.mean(loglens)

p = scipy.stats.norm(mu,sd)
</snippet></ROW><ROW><id>5286066</id><snippet>p.cdf(log(L+1)) - p.cdf(log(L))
</snippet></ROW><ROW><id>5286136</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>5286136</id><snippet>assigns = ast.literal_eval(open(r'D:\Dropbox\Dev\Output\dict', 'r').read())
</snippet></ROW><ROW><id>5286143</id><snippet>&gt;&gt;&gt; class MyClass(object):
...   def get(self): return 10
...   def setprop(self, val): raise ValueError("hax%s"%str(val))
...   prop = property(get, setprop)
...
&gt;&gt;&gt; i = MyClass()
&gt;&gt;&gt; i.prop =4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in setprop
ValueError: hax4
&gt;&gt;&gt; i.prop
10
&gt;&gt;&gt; setattr(i, 'prop', 12)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in setprop
ValueError: hax12
</snippet></ROW><ROW><id>5286143</id><snippet>object</snippet></ROW><ROW><id>5286143</id><snippet>object</snippet></ROW><ROW><id>5286143</id><snippet>myClass.my_property = 4</snippet></ROW><ROW><id>5286143</id><snippet>object</snippet></ROW><ROW><id>5286143</id><snippet>object</snippet></ROW><ROW><id>5286152</id><snippet>f</snippet></ROW><ROW><id>5286152</id><snippet>if replacedText != content</snippet></ROW><ROW><id>5286152</id><snippet>count = 0
for match in all_files('*.html', '.'):       # all_files returns all html files in current directory
    with open(match) as thefile:
        content = thefile.read()                 # read entire file into memory
        replacedText = content.replace(oldtext, newtext)
    if replacedText!=content:
        with open(match, 'w') as thefile:
            count += 1
            thefile.write(replacedText)
print (count)        # print the number of files that we modified
</snippet></ROW><ROW><id>5286231</id><snippet>
Only 301, 302 and 303 statuses are permitted and it may not have a content body.
</snippet></ROW><ROW><id>5286242</id><snippet>queue.get()</snippet></ROW><ROW><id>5286242</id><snippet>task_done()</snippet></ROW><ROW><id>5286273</id><snippet>sys.modules</snippet></ROW><ROW><id>5286273</id><snippet>&gt;&gt;&gt; from subprocess import types
&gt;&gt;&gt; types
&lt;module 'types' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/types.pyc'&gt;
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['subprocess']
&lt;module 'subprocess' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.pyc'&gt;
</snippet></ROW><ROW><id>5286273</id><snippet>types</snippet></ROW><ROW><id>5286273</id><snippet>subprocess</snippet></ROW><ROW><id>5286273</id><snippet>import types</snippet></ROW><ROW><id>5286273</id><snippet>import types</snippet></ROW><ROW><id>5286273</id><snippet>subprocess</snippet></ROW><ROW><id>5286273</id><snippet>types</snippet></ROW><ROW><id>5286273</id><snippet>__all__</snippet></ROW><ROW><id>5286273</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; dir(subprocess)
['CalledProcessError', 'MAXFD', 'PIPE', 'Popen', 'STDOUT', '_PIPE_BUF', '__all__', '__builtins__', '__doc__',
 '__file__', '__name__', '__package__', '_active', '_cleanup', '_demo_posix', '_demo_windows', '_eintr_retry_call',
 '_has_poll', 'call', 'check_call', 'check_output', 'errno', 'fcntl', 'gc', 'list2cmdline', 'mswindows', 'os',
 'pickle', 'select', 'signal', 'sys', 'traceback', 'types']
&gt;&gt;&gt; subprocess.__all__
['Popen', 'PIPE', 'STDOUT', 'call', 'check_call', 'check_output', 'CalledProcessError']
</snippet></ROW><ROW><id>5286273</id><snippet>subprocess</snippet></ROW><ROW><id>5286323</id><snippet>for x in range( width ):</snippet></ROW><ROW><id>5286323</id><snippet>def</snippet></ROW><ROW><id>5286571</id><snippet>def flatten(foo):
    for x in foo:
        if hasattr(x, '__iter__'):
            for y in flatten(x):
                yield y
        else:
            yield x
</snippet></ROW><ROW><id>5286571</id><snippet>__iter__</snippet></ROW><ROW><id>5286571</id><snippet>def flatten(foo):
    for x in foo:
        if hasattr(x, '__iter__') and not isinstance(x, str):
            for y in flatten(x):
                yield y
        else:
            yield x
</snippet></ROW><ROW><id>5286611</id><snippet>from . import schema
from .inspectors import PostgresInspector
</snippet></ROW><ROW><id>5286693</id><snippet>from django.db import models as django_models

def register(cls, admin_cls):
    cls.add_to_class('field_name_here', django_models.TextField())
</snippet></ROW><ROW><id>5286726</id><snippet>feed = defaultdict()</snippet></ROW><ROW><id>5286726</id><snippet>appendfeed</snippet></ROW><ROW><id>5286726</id><snippet>dump</snippet></ROW><ROW><id>5286726</id><snippet>load</snippet></ROW><ROW><id>5286726</id><snippet>unpickle</snippet></ROW><ROW><id>5286726</id><snippet>dict</snippet></ROW><ROW><id>5286726</id><snippet>append</snippet></ROW><ROW><id>5286742</id><snippet>mylist = [item for item in mylist if item != 'cats']
</snippet></ROW><ROW><id>5286780</id><snippet>post_syncdb</snippet></ROW><ROW><id>5286780</id><snippet>ALTER</snippet></ROW><ROW><id>5286819</id><snippet>&gt;&gt;&gt; x
array([2, 4, 2, 3, 1])
&gt;&gt;&gt; ends = numpy.cumsum(x)
&gt;&gt;&gt; ranges = numpy.arange(ends[-1])
&gt;&gt;&gt; ranges = ranges - numpy.repeat(ends-x, x)
&gt;&gt;&gt; ranges
array([0, 1, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>5286950</id><snippet>C</snippet></ROW><ROW><id>5286950</id><snippet>List2</snippet></ROW><ROW><id>5286950</id><snippet>C</snippet></ROW><ROW><id>5286950</id><snippet>&gt;&gt;&gt; class List(list):
...     pass
... 
&gt;&gt;&gt; weaklist = List()
&gt;&gt;&gt; weaklist.append('a')
&gt;&gt;&gt; weaklist.append('b')
&gt;&gt;&gt; stronglist = [ ['c','d','e'] ]
&gt;&gt;&gt; weaklist
['a', 'b']
&gt;&gt;&gt; stronglist
[['c', 'd', 'e']]
&gt;&gt;&gt; import weakref
&gt;&gt;&gt; stronglist.append(weakref.ref(weaklist))
&gt;&gt;&gt; stronglist
[['c', 'd', 'e'], &lt;weakref at 0x10046e578; to 'List' at 0x100455f70&gt;]
&gt;&gt;&gt; stronglist[1]()
['a', 'b']
&gt;&gt;&gt; del weaklist
&gt;&gt;&gt; stronglist
[['c', 'd', 'e'], &lt;weakref at 0x10046e578; dead&gt;]
&gt;&gt;&gt; stronglist[1]()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>5286950</id><snippet>WeakValueDictionary</snippet></ROW><ROW><id>5287017</id><snippet> /*/daughter[@state = 'nice'][1]
| 
 /*/daughter[@state = 'nice'][1]
       /following-sibling::daughter[@state='naughty'] [1]
</snippet></ROW><ROW><id>5287017</id><snippet> /*/daughter[@state = 'nice'][2]
| 
 /*/daughter[@state = 'nice'][2]
       /following-sibling::daughter[@state='naughty'] [1]
</snippet></ROW><ROW><id>5287017</id><snippet>daughter</snippet></ROW><ROW><id>5287017</id><snippet>daughter</snippet></ROW><ROW><id>5287017</id><snippet>daughter</snippet></ROW><ROW><id>5287017</id><snippet>daughter</snippet></ROW><ROW><id>5287017</id><snippet>'nice'</snippet></ROW><ROW><id>5287017</id><snippet>'naughty</snippet></ROW><ROW><id>5287017</id><snippet>daughter</snippet></ROW><ROW><id>5287017</id><snippet>nice, naughty, nice, naughty,</snippet></ROW><ROW><id>5287017</id><snippet>k</snippet></ROW><ROW><id>5287037</id><snippet>import Tkinter as tk
import TkTreectrl as treectrl
import sqlite3

def setup_table(connection):
    cursor=connection.cursor()
    cursor.execute('''CREATE TABLE foo
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      bar TEXT)''')
    sql='INSERT INTO foo (bar) values (?)'
    for i in range(10):
        cursor.execute(sql,(i,))
    cursor.execute(sql,(u'\N{INFINITY}',))

def select_cmd(selected):
    print 'Selected items:', selected

def main():
    connection=sqlite3.connect(':memory:')   
    setup_table(connection)
    cursor=connection.cursor()

    root = tk.Tk()
    root.title('Simple MultiListbox demo')
    mlb = treectrl.MultiListbox(root)
    mlb.pack(side='top', fill='both', expand=1)
    tk.Button(root, text='Close', command=root.quit).pack(side='top', pady=5)
    mlb.focus_set()   
    mlb.configure(selectcmd=select_cmd, selectmode='extended')
    mlb.config(columns=('Column 1', 'Column 2'))
    cursor.execute('SELECT * from foo')
    for row in cursor.fetchall():
        mlb.insert('end',*map(unicode,row))
    root.mainloop()

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>5287053</id><snippet>nodeTable[node]</snippet></ROW><ROW><id>5287053</id><snippet>node[nodeTable]</snippet></ROW><ROW><id>5287053</id><snippet>theNetwork[node]</snippet></ROW><ROW><id>5287465</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "http://[ipaddress]/SaveData/127.0.0.1/00-0C-F1-56-98-AD/"
&gt;&gt;&gt; re.search(r'([0-9A-F]{2}[:-]){5}([0-9A-F]{2})', s, re.I).group()
'00-0C-F1-56-98-AD'
&gt;&gt;&gt; re.search(r'((2[0-5]|1[0-9]|[0-9])?[0-9]\.){3}((2[0-5]|1[0-9]|[0-9])?[0-9])', s, re.I).group()
'127.0.0.1'
</snippet></ROW><ROW><id>5287539</id><snippet>Circle()</snippet></ROW><ROW><id>5287539</id><snippet>dot_size = GRID_SIZE * 0.2
Circle(self.screen_point, dot_size, # No closing parentheses
(x, y) = self.place
neighbors = [ (x+1, y), (x-1, y)]
for neighbor in neighbors:
    self.check_neighbor(neighbor)
</snippet></ROW><ROW><id>5287795</id><snippet>Circle()</snippet></ROW><ROW><id>5287795</id><snippet>neighbors</snippet></ROW><ROW><id>5287795</id><snippet>for neighbor in neighbors:</snippet></ROW><ROW><id>5287795</id><snippet>(x, y) = self.place
neighbors = [ (x+1, y), (x-1, y)]
</snippet></ROW><ROW><id>5287795</id><snippet>width</snippet></ROW><ROW><id>5287795</id><snippet>for x in range( width ):</snippet></ROW><ROW><id>5287795</id><snippet>for neighbor in neighbors:</snippet></ROW><ROW><id>5287795</id><snippet>C:\junk&gt;\python27\python -c "print[x for x in enumerate(open('sometabs.py'),1)if'\t'in x[1]]"
[(1, 'foo\tbar\n'), (3, '\t\toof\n')]
</snippet></ROW><ROW><id>5287881</id><snippet>
# Create the engine. This starts a fresh database
engine = create_engine('sqlite://')
# Fills the database with the tables needed.
# If you use declarative, then the metadata for your tables can be found using Base.metadata
metadata.create_all(engine)
# Create a session to this database
session = sessionmaker(bind=engine)()

# Create some posts using the session and commit them
...

# Test your repository object...
repo = PostRepository(session)
results = repo.find_latest()

# Run your assertions of results
...
</snippet></ROW><ROW><id>5287934</id><snippet>fileinput</snippet></ROW><ROW><id>5287934</id><snippet>&gt;&gt;&gt; import fileinput
&gt;&gt;&gt; for linenum,line in enumerate( fileinput.FileInput("file",inplace=1) ):
...   if linenum==0 :
...     print "new line"
...     print line.rstrip()
...   else:
...     print line.rstrip()
...
</snippet></ROW><ROW><id>5288040</id><snippet>target_link_libraries(foo ${Boost_LIBRARIES})
</snippet></ROW><ROW><id>5288040</id><snippet>message("XXX ${Boost_LIBRARIES}")
</snippet></ROW><ROW><id>5288040</id><snippet>-Wl,-Bstatic -lxxx</snippet></ROW><ROW><id>5288614</id><snippet>some_drunk.move(field, cp)
</snippet></ROW><ROW><id>5288614</id><snippet>some_drunk</snippet></ROW><ROW><id>5288614</id><snippet>Drunk</snippet></ROW><ROW><id>5288614</id><snippet>UsualDrunk</snippet></ROW><ROW><id>5288614</id><snippet>cp</snippet></ROW><ROW><id>5288614</id><snippet>dist</snippet></ROW><ROW><id>5288992</id><snippet>__bool__</snippet></ROW><ROW><id>5288992</id><snippet>__nonzero__</snippet></ROW><ROW><id>5289136</id><snippet>struct</snippet></ROW><ROW><id>5289136</id><snippet>def calcentries(fmt):
    return len(struct.unpack(fmt, '\0' * struct.calcsize(fmt)))
</snippet></ROW><ROW><id>5289221</id><snippet>device in self.request.user_agent
</snippet></ROW><ROW><id>5289221</id><snippet>self.request.user_agent.__contains__(device)
</snippet></ROW><ROW><id>5289221</id><snippet>self.request.user_agent</snippet></ROW><ROW><id>5289221</id><snippet>device</snippet></ROW><ROW><id>5289221</id><snippet>self.request.user_agent</snippet></ROW><ROW><id>5289221</id><snippet>.__contains__()</snippet></ROW><ROW><id>5289231</id><snippet>'.'</snippet></ROW><ROW><id>5289231</id><snippet>replace('.','')
</snippet></ROW><ROW><id>5289231</id><snippet>import csv
import random
from sys import exit

with open('heights.csv','rb') as f:
    names,a = {},{}
    for k,row in enumerate(csv.reader(f)):
        names[k] = row[0]
        a[k]     = int(row[1].replace('.',''))
    print names
    print 'a==',a
    L = len(a)

compute = input("&gt;")

if compute == 1:

    if a[1] - a[0] &lt;= 1000 and all(a[i] - a[i-1] &lt;= 2300 for i in xrange(2,L)):

        read_b = {L-1 : random.randint( max(500,a[1]-a[0]), 1000 ) }
        read_a = {1   : a[0] + read_b[L-1] - a[1] }

        for i in xrange(2,L):
            read_b[L-i] = random.randint( max(500,a[i]-a[i-1]), 2300 )
            read_a[i] = a[i-1] + read_b[L-i] - a[i]

    else:
        exit("The file can't be treated because of the relative values of "
             "the following couples of lines : "+\
             ('(0,1) ' if 1000 &lt; a[1] - a[0] else "")+\
             ' '.join(repr((i-1,i)) for i in xrange(2,L) if 2300 &lt; a[i] - a[i-1]))



    with open('output.txt','w') as fw:
        fw.write('[1]\n1={}\n4={}\n\n[2]\n1={}\n4={}\n\n'.\
                 format(names[0],read_b[L-1],names[1],read_a[1]))

        fw.writelines('[{}]\n1=\n4={}\n\n[{}]\n1={}\n4={}\n\n'.\
                      format(str(2*k-1),read_b[L-k],str(2*k),names[k],read_a[k])
                      for k in xrange(2,L))                           



    # display of the execution

    print 'read_a== %s\nread_b== %s\n\n' % (read_a,read_b)+\
          ''+\
          ('\n'.join(('  a[%s] ========== %s ******' % (y,a[y])+\
                      '\n    +read_b[%s] == %s' % (str(L-y-1), read_b[L-y-1])+\
                      '\n    -read_a[%s] == %s' % (str(y+1)  ,-read_a[y+1]  ) )
                     for y in xrange(L-1)) )+\
          '\n  a[%s] ========== %s ******\n\n' % (L-1,a[L-1])+\
          ''+\
          ('\n'.join(('  a[%s] ========== %s ******' % (y,a[y])+\
                      '\n    +read_a[%s] == %s' % (y  , read_a[y]  )+\
                      '\n    -read_b[%s] == %s' % (L-y,-read_b[L-y]) )
                     for y in xrange(L-1,0,-1)) )+\
          '\n  a[%s] ========== %s ******\n\n' % (0,a[0])+\
          ''+\
          'sum(read_a.values())== %s\nsum(read_b.values())== %s' %\
          (sum(read_a.values()),sum(read_b.values()))
</snippet></ROW><ROW><id>5289231</id><snippet>randint()</snippet></ROW><ROW><id>5289231</id><snippet>randint()</snippet></ROW><ROW><id>5289231</id><snippet>read_0a = random.randint(500,1000)  
read_1a = a[0] + read_0a - a[1]
</snippet></ROW><ROW><id>5289231</id><snippet>read_a[0] = random.randint(500,1000)  
read_a[1] = a[0] + read_a[0] - a[1]
# nota bene: read_a[0] is in fact read_b[len(a)-1]
</snippet></ROW><ROW><id>5289231</id><snippet>read_a[0] = random.randint(500,1000)</snippet></ROW><ROW><id>5289231</id><snippet>read_a[0] = random.randint(a[1] - a[0]  ,1000)</snippet></ROW><ROW><id>5289231</id><snippet>read_a[0] = random.randint(500,1000)</snippet></ROW><ROW><id>5289231</id><snippet>read_b[len(a)-1] = random.randint(500,1000)</snippet></ROW><ROW><id>5289231</id><snippet>randint(500,2300)
</snippet></ROW><ROW><id>5289277</id><snippet>restProducer</snippet></ROW><ROW><id>5289292</id><snippet>def increment(self, name):
    """Increments a counter specified by the 'name' argument."""
    self.__dict__[name] += 1
</snippet></ROW><ROW><id>5289295</id><snippet>from PyQt4.QtGui import QTableWidgetItem

class ATableWidgetItem(QTableWidgetItem):

    def __init__(self, id, *args, **kwargs):
        super(ATableWidgetItem, self).__init__(*args, **kwargs)
        self.id = id

a = ATableWidgetItem(0)
b = ATableWidgetItem(0, QTableWidgetItem.UserType)
c = ATableWidgetItem(0, "text", type=QTableWidgetItem.UserType) 

class AnotherTableWidgetItem(QTableWidgetItem):

    def __init__(self, id):
        super(AnotherTableWidgetItem, self).__init__()
        self.id = id

d = AnotherTableWidgetItem(0)

class YetAnotherTableWidgetItem(QTableWidgetItem):

    def __init__(self, id, text="", type=QTableWidgetItem.Type):
        super(YetAnotherTableWidgetItem, self).__init__(text, type)
        self.id = id

e = YetAnotherTableWidgetItem(0)
f = YetAnotherTableWidgetItem(0, "Hello")
g = YetAnotherTableWidgetItem(0, "Hello", QTableWidgetItem.UserType)  
</snippet></ROW><ROW><id>5289523</id><snippet>tag</snippet></ROW><ROW><id>5289523</id><snippet>import BeautifulSoup

if __name__ == "__main__":
    data = """
&lt;html&gt;
&lt;h2 class='someclass'&gt;some title&lt;/h2&gt;
&lt;ul&gt;
   &lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;
   &lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;
   &lt;li&gt;Vestibulum auctor dapibus neque.&lt;/li&gt;
&lt;/ul&gt;
&lt;/html&gt;

    """
    soup = BeautifulSoup.BeautifulSoup(data)
    h2 = soup.find('h2')
    h2.name = 'h1'
    print soup
</snippet></ROW><ROW><id>5289523</id><snippet>print soup</snippet></ROW><ROW><id>5289523</id><snippet>&lt;html&gt;
&lt;h1 class='someclass'&gt;some title&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Lorem ipsum dolor sit amet, consectetuer adipiscing elit.&lt;/li&gt;
&lt;li&gt;Aliquam tincidunt mauris eu risus.&lt;/li&gt;
&lt;li&gt;Vestibulum auctor dapibus neque.&lt;/li&gt;
&lt;/ul&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>5289523</id><snippet>h2</snippet></ROW><ROW><id>5289523</id><snippet>h1</snippet></ROW><ROW><id>5289523</id><snippet>h2</snippet></ROW><ROW><id>5289523</id><snippet>soup = BeautifulSoup.BeautifulSoup(your_data)
while True: 
    h2 = soup.find('h2')
    if not h2:
        break
    h2.name = 'h1'
</snippet></ROW><ROW><id>5289858</id><snippet>join</snippet></ROW><ROW><id>5289858</id><snippet># start the two threads
t1.start()
t2.start()

# wait until both ended
t1.join()
t2.join()

# then start the third
t3.start()
</snippet></ROW><ROW><id>5289883</id><snippet>api = twitter.Api(consumer_key='consumer_key', consumer_secret='consumer_secret', 
          access_token_key='access_token', access_token_secret='access_token_secret') 
</snippet></ROW><ROW><id>5290049</id><snippet>import MySQLdb

## This is the connection to the database
self.db = MySQLdb.connect(host=self.host, port=self.port, user=self.user, passwd=self.passwd, db=self.dbname)

## To query you need a cursor, this is created here
c = self.db.cursor()

## On the cursor you can execute a sql stamement and look at result
rows = c.execute('select count(*) from test_table')

## To look at the result use a fetch method, here there is only one result so:
print rows.fetchone()
</snippet></ROW><ROW><id>5290081</id><snippet># tcpdump filter for HTTP GET 
sudo tcpdump -s 0 -A 'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420'

# tcpdump filter for HTTP POST 
sudo tcpdump -s 0 -A 'tcp dst port 80 and (tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354)'
</snippet></ROW><ROW><id>5290131</id><snippet>__init__</snippet></ROW><ROW><id>5290131</id><snippet>class Animal(models.Model):
   #class Meta:          #uncomment this for an abstract class
   #    abstract = True 
   aul = models.ForeignKey(Aul)
   weight = models.IntegerField(default=3)
   quality = models.IntegerField(default=10)
   age = models.IntegerField(default=0)

   def __unicode__(self):
       return self.age

class Sheep(Animal):
   wool = models.IntegerField()
</snippet></ROW><ROW><id>5290512</id><snippet>&lt;script type="text/javascript" src="http://mysite.com/widget/user/124546465"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>5290512</id><snippet>(function(){
document.write('&lt;div class="mysite-userprofile"&gt;');
document.write('My visits are {{total_visits}}&lt;br /&gt;') 
document.write('&lt;/div&gt;') })()
)
</snippet></ROW><ROW><id>5290512</id><snippet>def total_visits(request, user_id):
    user = get_object_or_404(User, id = user_id)
    total_visits = Visits.objects.filter(user:user).total_visits() #this is a method to count, you may have to write your own logic
    context = {'total_visits': total_visits}
    render_to_response('widget_total_visits.html', context, mimetype='text/javascript')
</snippet></ROW><ROW><id>5290512</id><snippet>&lt;script type="text/javascript"&gt;
      mysite_options = {
         'just_friends': True,
         'theme': 'bluemarine,
         'realtime': True
      }
&lt;/script&gt;
&lt;script type="text/javascript" src="http://mysite.com/widget/user/124546465"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>5290528</id><snippet>self.prevNode</snippet></ROW><ROW><id>5290528</id><snippet>None</snippet></ROW><ROW><id>5290528</id><snippet>node.prevNode.label</snippet></ROW><ROW><id>5290528</id><snippet>None.label</snippet></ROW><ROW><id>5290528</id><snippet>None</snippet></ROW><ROW><id>5290528</id><snippet>AttributeError</snippet></ROW><ROW><id>5290566</id><snippet>&gt;&gt;&gt; str = "(40.714353, -74.005973)"
&gt;&gt;&gt; tuple(float(x) for x in str.strip('()').split(','))
(40.714353, -74.005973)
</snippet></ROW><ROW><id>5290566</id><snippet>x.strip()</snippet></ROW><ROW><id>5290566</id><snippet>float(x)</snippet></ROW><ROW><id>5290566</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.match(r"^\(([-\d.]+), ([-\d.]+)\)$", str)
&gt;&gt;&gt; m.group(1)
'40.714353'
&gt;&gt;&gt; m.group(2)
'-74.005973'
</snippet></ROW><ROW><id>5290566</id><snippet>re</snippet></ROW><ROW><id>5290957</id><snippet>class ComboParser(object):
    def __init__(self,data):
        self.data=data
    def __getattr__(self,key):
        try:
            return ComboParser(self.data[key])
        except TypeError:
            result=[]
            for item in self.data:
                if key in item:
                    try:
                        result.append(item[key])
                    except TypeError: pass
            return ComboParser(result)
    def __getitem__(self,key):
        return ComboParser(self.data[key])
    def __iter__(self):
        if isinstance(self.data,basestring):
            # self.data might be a str or unicode object
            yield self.data
        else:
            # self.data might be a list or tuple
            try:
                for item in self.data:
                    yield item
            except TypeError:
                # self.data might be an int or float
                yield self.data
    def __length_hint__(self):
        return len(self.data)
</snippet></ROW><ROW><id>5290957</id><snippet>combination = {
    'item1': 3.14,
    'item2': 42,
    'items': [
        'text text text',
        {
            'field1': 'a',
            'field2': 'b',
            },
        {
            'field1': 'c',
            'field2': 'd',
            },
        {
            'field1': 'e',
            'field3': 'f',
            },        
        ]
    }
print(list(ComboParser(combination).item1))
# [3.1400000000000001]
print(list(ComboParser(combination).items))
# ['text text text', {'field2': 'b', 'field1': 'a'}, {'field2': 'd', 'field1': 'c'}, {'field3': 'f', 'field1': 'e'}]
print(list(ComboParser(combination).items[0]))
# ['text text text']
print(list(ComboParser(combination).items.field1))
# ['a', 'c', 'e']
</snippet></ROW><ROW><id>5291113</id><snippet>$ echo "Test reading from a file" &gt;&gt; test.out
$ python
&gt;&gt;&gt; f1 = file('test.out')
&gt;&gt;&gt; f1.readlines()
['Test reading from a file\n']
&gt;&gt;&gt; f1.readlines()
[]
</snippet></ROW><ROW><id>5291113</id><snippet>$ echo "Test reading from a file" &gt;&gt; test.out
$ python
&gt;&gt;&gt; f1 = file('test.out')
&gt;&gt;&gt; f1.readlines()
['Test reading from a file\n']
&gt;&gt;&gt; f1.seek(0)
&gt;&gt;&gt; f1.readlines()
['Test reading from a file\n']
</snippet></ROW><ROW><id>5291164</id><snippet>{|id|Foo_id|Bar_id|Role_id|}</snippet></ROW><ROW><id>5291396</id><snippet>for x in range (0,5):  
    b = "Loading" + "." * x
    print (b, end="\r")
    time.sleep(1)
</snippet></ROW><ROW><id>5291482</id><snippet>
def view1(request)
    args1 = 'a string'
    return render_to_response('page.mak',{'args1':args1}, request=request)

def view2(request)
    args2 = 'a string 2'
    return render_to_response('page.mak',{'args2':args2}, request=request)
</snippet></ROW><ROW><id>5291482</id><snippet>${args2}</snippet></ROW><ROW><id>5291482</id><snippet>{'args1'=args1}</snippet></ROW><ROW><id>5291482</id><snippet>${args2}</snippet></ROW><ROW><id>5291482</id><snippet>args2</snippet></ROW><ROW><id>5291482</id><snippet>args2</snippet></ROW><ROW><id>5291482</id><snippet>args2</snippet></ROW><ROW><id>5291844</id><snippet>def flags(self, index):
    if not index.isValid():
        return Qt.ItemIsEnabled

    if index.column() in self.booleanSet:
        return Qt.ItemIsUserCheckable | Qt.ItemIsSelectable | Qt.ItemIsEnabled
    elif index.column() in self.readOnlySet:
        return Qt.ItemIsSelectable | Qt.ItemIsEnabled
    else:
        return QSortFilterProxyModel.flags(self, index)

def data(self, index, role):
    if not index.isValid():
        return QVariant()

    if index.column() in self.booleanSet and role in (Qt.CheckStateRole, Qt.DisplayRole):
        if role == Qt.CheckStateRole:
            value = QVariant(Qt.Checked) if index.data(Qt.EditRole).toBool() else QVariant(Qt.Unchecked)
            return value
        else: #if role == Qt.DisplayRole:
            return QVariant()
    else:
        return QSortFilterProxyModel.data(self, index, role)

def setData(self, index, data, role):
    if not index.isValid():
        return False

    if index.column() in self.booleanSet and role == Qt.CheckStateRole:
        value = QVariant(True) if data.toInt()[0] == Qt.Checked else QVariant(False)
        return QSortFilterProxyModel.setData(self, index, value, Qt.EditRole)
    else:
        return QSortFilterProxyModel.setData(self, index, data, role)
</snippet></ROW><ROW><id>5291870</id><snippet>PYPY_LOCALBASE</snippet></ROW><ROW><id>5291870</id><snippet>PYPY_LOCALBASE=/Users/tav/local pypy-c translate.py -Ojit
</snippet></ROW><ROW><id>5291870</id><snippet>lib</snippet></ROW><ROW><id>5291870</id><snippet>include</snippet></ROW><ROW><id>5291870</id><snippet>PYPY_LOCALBASE</snippet></ROW><ROW><id>5291870</id><snippet>/Users/tav/local/lib</snippet></ROW><ROW><id>5291870</id><snippet>/Users/tav/local/include</snippet></ROW><ROW><id>5291870</id><snippet>gettext</snippet></ROW><ROW><id>5291870</id><snippet>pypy-c translate.py -Ojit</snippet></ROW><ROW><id>5291870</id><snippet>hg</snippet></ROW><ROW><id>5291870</id><snippet>git</snippet></ROW><ROW><id>5292264</id><snippet>l = ['a', 'b', 'c', 'd', 'e']
subarraysize = 3
for i in range(len(l)-subarraysize+1):
    print l[i:i+subarraysize]
</snippet></ROW><ROW><id>5292264</id><snippet>['a', 'b', 'c']
['b', 'c', 'd']
['c', 'd', 'e']
</snippet></ROW><ROW><id>5292360</id><snippet>hashlib.sha1</snippet></ROW><ROW><id>5292360</id><snippet>unicode</snippet></ROW><ROW><id>5292360</id><snippet>str</snippet></ROW><ROW><id>5292360</id><snippet>unicode</snippet></ROW><ROW><id>5292360</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; s = u'é'
&gt;&gt;&gt; hashlib.sha1(s.encode('utf-8'))
&lt;sha1 HASH object @ 029576A0&gt;
</snippet></ROW><ROW><id>5292360</id><snippet>unicode</snippet></ROW><ROW><id>5292360</id><snippet>str</snippet></ROW><ROW><id>5292360</id><snippet>ascii</snippet></ROW><ROW><id>5292418</id><snippet>json</snippet></ROW><ROW><id>5292418</id><snippet>json.loads</snippet></ROW><ROW><id>5292418</id><snippet>import json
data = json.loads(...)
</snippet></ROW><ROW><id>5292418</id><snippet>json.load</snippet></ROW><ROW><id>5292465</id><snippet>string normalizedPath = Path.GetDirectoryName(path);
</snippet></ROW><ROW><id>5292465</id><snippet>/</snippet></ROW><ROW><id>5292465</id><snippet>\</snippet></ROW><ROW><id>5292503</id><snippet>myvar = "String",value,"more string"
</snippet></ROW><ROW><id>5292503</id><snippet>String 5 more string</snippet></ROW><ROW><id>5292503</id><snippet>("String", 5, "more string")</snippet></ROW><ROW><id>5292503</id><snippet>myvar = "String " + str(value) + " more string"  # string concatenation
myvar = "String %d more string" % (value,)       # old-style string formatting
myvar = "String {0} more string".format(value)   # new-style string formatting
</snippet></ROW><ROW><id>5292647</id><snippet>from subprocess import Popen, PIPE
import platform


if platform.system() == 'Windows':
    close_fds=False
else: 
    close_fds=True

p = Popen('python long.py', stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=close_fds, shell=True)
print "Content-Type: text/plain\n"
print "invoked (%d)" % (p.pid)
</snippet></ROW><ROW><id>5292647</id><snippet>import time
import os
print "start (%d)" %(os.getpid())
time.sleep(10)
print "end (%d)" %(os.getpid())
</snippet></ROW><ROW><id>5292647</id><snippet>def application(environ, start_response):
    if platform.system() == 'Windows':
        close_fds=False
    else: 
        close_fds=True

    p = Popen('python "C:\testing\long.py"', stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=close_fds, shell=True)

    status = '200 OK'
    output = "invoked (%d)" % (p.pid)    
    response_headers = [('Content-type', 'text/plain'), ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>5292647</id><snippet>LoadModule wsgi_module modules/mod_wsgi.so
</snippet></ROW><ROW><id>5292647</id><snippet>&lt;Directory "C:/testing"&gt;
    AllowOverride None
    Options None
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>5292647</id><snippet>Alias /testapp "C:\testing"
</snippet></ROW><ROW><id>5292647</id><snippet>WSGIScriptAlias /testapp "C:\testing\invoke.wsgi"
</snippet></ROW><ROW><id>5293169</id><snippet>mylist = []
mylist.append(id1)  # or however you get your id values
mylist.append(id2)
# ..
</snippet></ROW><ROW><id>5293169</id><snippet>mylist = []
mylist.append( (id1, name1) )
mylist.append( (id2, name2) )
# ..
</snippet></ROW><ROW><id>5293169</id><snippet>[ (1, 'Bob'), (2, 'Alice'), (3, 'Carol')]</snippet></ROW><ROW><id>5293169</id><snippet>mylist[0][1] == 'Bob'  # True
mylist[1][2] == 'Alice'  # True
</snippet></ROW><ROW><id>5293169</id><snippet>for row in rv:
    the_id = row['id']
    name = row['name']
</snippet></ROW><ROW><id>5293492</id><snippet>sieve</snippet></ROW><ROW><id>5293492</id><snippet>6*k + 1</snippet></ROW><ROW><id>5293492</id><snippet>2*k</snippet></ROW><ROW><id>5293492</id><snippet>k*6 + 5</snippet></ROW><ROW><id>5293492</id><snippet>2*k + 1</snippet></ROW><ROW><id>5293492</id><snippet>3*i+1|1</snippet></ROW><ROW><id>5293492</id><snippet>2*n</snippet></ROW><ROW><id>5293492</id><snippet>6*n + 1</snippet></ROW><ROW><id>5293492</id><snippet>2*n + 1</snippet></ROW><ROW><id>5293492</id><snippet>6*n + 5</snippet></ROW><ROW><id>5293492</id><snippet>+1|1</snippet></ROW><ROW><id>5293492</id><snippet>0</snippet></ROW><ROW><id>5293492</id><snippet>1</snippet></ROW><ROW><id>5293492</id><snippet>3</snippet></ROW><ROW><id>5293492</id><snippet>5</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>5</snippet></ROW><ROW><id>5293492</id><snippet>i</snippet></ROW><ROW><id>5293492</id><snippet>i</snippet></ROW><ROW><id>5293492</id><snippet>sieve</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>sieve</snippet></ROW><ROW><id>5293492</id><snippet>k*k/3 + 2*m*k</snippet></ROW><ROW><id>5293492</id><snippet>m</snippet></ROW><ROW><id>5293492</id><snippet>k^2</snippet></ROW><ROW><id>5293492</id><snippet>6*k</snippet></ROW><ROW><id>5293492</id><snippet>k*(k-2*(i&amp;1)+4)/3</snippet></ROW><ROW><id>5293492</id><snippet>k * (k+4)</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>1</snippet></ROW><ROW><id>5293492</id><snippet>6</snippet></ROW><ROW><id>5293492</id><snippet>k * (k+2)</snippet></ROW><ROW><id>5293492</id><snippet>6*k</snippet></ROW><ROW><id>5293492</id><snippet>candidates</snippet></ROW><ROW><id>5293492</id><snippet>1</snippet></ROW><ROW><id>5293492</id><snippet>5</snippet></ROW><ROW><id>5293492</id><snippet>6</snippet></ROW><ROW><id>5293492</id><snippet>succ(k)</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>candidates</snippet></ROW><ROW><id>5293492</id><snippet>candidates</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>sieve</snippet></ROW><ROW><id>5293492</id><snippet>for k in candidates:
  for (l = k; ; l += 6) sieve[k * l] = False
  for (l = succ(k); ; l += 6) sieve[k * l] = False
</snippet></ROW><ROW><id>5293492</id><snippet>sieve</snippet></ROW><ROW><id>5293492</id><snippet>for k in candidates:
  for l in candidates where l &gt;= k:
    sieve[k * l] = False
</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>candidates</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293492</id><snippet>l</snippet></ROW><ROW><id>5293492</id><snippet>k</snippet></ROW><ROW><id>5293577</id><snippet>import urllib2
import json
import csv

def getRows(data):
    # ?? this totally depends on what's in your data
    return []

url = "http://www.yahoo.com/something"
data = urllib2.urlopen(url).read()
data = json.loads(data)

fname = "mydata.csv"
with open(fname,'wb') as outf:
    outcsv = csv.writer(outf)
    outcsv.writerows(getRows(data))
</snippet></ROW><ROW><id>5293955</id><snippet>django-pyodbc</snippet></ROW><ROW><id>5293955</id><snippet>'default'</snippet></ROW><ROW><id>5293983</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
&gt;&gt;&gt; chars=[]
&gt;&gt;&gt; for i in range(16):
    chars.append(random.choice(ALPHABET))

&gt;&gt;&gt; "".join(chars)
'wE9mg9pu2KSmp5lh'
</snippet></ROW><ROW><id>5294049</id><snippet>import re
lists = [
    [int(i) for i in match.split()]
    for match in re.findall(r'{(.*?)}', s)
]

print lists
</snippet></ROW><ROW><id>5294364</id><snippet>timedelta</snippet></ROW><ROW><id>5294364</id><snippet>datetime</snippet></ROW><ROW><id>5294364</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; before = datetime.datetime.strptime('3/6/2011','%m/%d/%Y')
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; type(now-before)
&lt;type 'datetime.timedelta'&gt;
&gt;&gt;&gt; (now-before).days
7
&gt;&gt;&gt; float((now-before).days)/365
0.019178082191780823
</snippet></ROW><ROW><id>5294604</id><snippet>&gt;&gt;&gt;import main
# main.pyc is created
</snippet></ROW><ROW><id>5294604</id><snippet>compileall</snippet></ROW><ROW><id>5294604</id><snippet>python -m compileall .
</snippet></ROW><ROW><id>5294604</id><snippet>python -m compileall --help
option --help not recognized
usage: python compileall.py [-l] [-f] [-q] [-d destdir] [-x regexp] [directory ...]
-l: don't recurse down
-f: force rebuild even if timestamps are up-to-date
-q: quiet operation
-d destdir: purported directory name for error messages
   if no directory arguments, -l sys.path is assumed
-x regexp: skip files matching the regular expression regexp
   the regexp is searched for in the full path of the file
</snippet></ROW><ROW><id>5294604</id><snippet>main.py</snippet></ROW><ROW><id>5294604</id><snippet>*.pyc</snippet></ROW><ROW><id>5294604</id><snippet>python -c "import script"</snippet></ROW><ROW><id>5295010</id><snippet>for key, value in jdata.iteritems():
    print key, value
</snippet></ROW><ROW><id>5295116</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>5295116</id><snippet>import operator

class Foo:
    def __init__(self, name):
        self.name = name

l = [Foo('AA'), Foo('a'), Foo('AB')]
l.sort(key=operator.attrgetter('name'))
print [o.name for o in l]
['AA', 'AB', 'a']
</snippet></ROW><ROW><id>5295116</id><snippet>_human_key</snippet></ROW><ROW><id>5295116</id><snippet>l.sort(key=lambda x: _human_key(x.name))
print [o.name for o in l]
['a', 'AA', 'AB']
</snippet></ROW><ROW><id>5295212</id><snippet>from util import get_content

class MyObj:    
    def func():
        get_content()
</snippet></ROW><ROW><id>5295212</id><snippet>import util

class MyObj:    
    def func():
        util.get_content()
</snippet></ROW><ROW><id>5295212</id><snippet>import mymodule
mymodule.get_content = mock.Mock(return_value="mocked stuff")
</snippet></ROW><ROW><id>5295459</id><snippet>StaticText</snippet></ROW><ROW><id>5295459</id><snippet>BufferedDC</snippet></ROW><ROW><id>5295459</id><snippet>DrawText</snippet></ROW><ROW><id>5295459</id><snippet>LEDNumberCtrl</snippet></ROW><ROW><id>5295515</id><snippet>-D ONLINE_JUDGE</snippet></ROW><ROW><id>5295515</id><snippet>#define ONLINE_JUDGE
</snippet></ROW><ROW><id>5295515</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>5295542</id><snippet>import itertools
import operator

L = [("tearing", 3), ("me", 3), ("apart", 3), ("lisa", 3), ("denny", 0), ("mark",0)]

print list(itertools.groupby(L, operator.itemgetter(1)).next()[1])

# [('tearing', 3), ('me', 3), ('apart', 3), ('lisa', 3)]
</snippet></ROW><ROW><id>5296208</id><snippet>removeHandler</snippet></ROW><ROW><id>5296208</id><snippet>addHandler</snippet></ROW><ROW><id>5296208</id><snippet>logger.handlers[index_of_handler_here].stream</snippet></ROW><ROW><id>5296208</id><snippet>logger.handlers[0].stream.close()
logger.removeHandler(logger.handlers[0])

file_handler = logging.FileHandler(filename)
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s %(filename)s, %(lineno)d, %(funcName)s: %(message)s")
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)
</snippet></ROW><ROW><id>5296388</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url_to_parse = "http://example.com/servlet/charting?base_color=grey&amp;chart_width=288&amp;chart_height=160&amp;chart_type=png&amp;chart_style=manufund_pie&amp;3DSet=true&amp;chart_size=small&amp;leg_on=left&amp;static_xvalues=10.21,12.12,43.12,12.10,&amp;static_labels=blue,red,green,purple"
&gt;&gt;&gt; parsed_url = urlparse.urlparse(url_to_parse)
&gt;&gt;&gt; query_as_dict = urlparse.parse_qs(parsed_url.query)
&gt;&gt;&gt; print query_as_dict
{'chart_size': ['small'], 'base_color': ['grey'], 'chart_style': ['manufund_pie'], 'chart_height': ['160'], 'static_xvalues': ['10.21,12.12,43.12,12.10,'], 'chart_width': ['288'], 'static_labels': ['blue,red,green,purple'], 'leg_on': ['left'], 'chart_type': ['png'], '3DSet': ['true']}
</snippet></ROW><ROW><id>5296388</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; import cgi
&gt;&gt;&gt; parsed_url = urlparse.urlparse(url_to_parse)
&gt;&gt;&gt; query_as_dict = cgi.parse_qs(parsed_url.query)
&gt;&gt;&gt; print query_as_dict
{'chart_size': ['small'], 'base_color': ['grey'], 'chart_style': ['manufund_pie'], 'chart_height': ['160'], 'static_xvalues': ['10.21,12.12,43.12,12.10,'], 'chart_width': ['288'], 'static_labels': ['blue,red,green,purple'], 'leg_on': ['left'], 'chart_type': ['png'], '3DSet': ['true']}
</snippet></ROW><ROW><id>5296388</id><snippet>&gt;&gt;&gt; print dict(zip( query_as_dict['static_labels'][0].split(','), query_as_dict['static_xvalues'][0].split(',')))
{'blue': '10.21', 'purple': '12.10', 'green': '43.12', 'red': '12.12'}
</snippet></ROW><ROW><id>5296566</id><snippet>my_fields = {u'question': {'name': 'CharField', 'attrs': {'max_length': 512} }} 
</snippet></ROW><ROW><id>5296566</id><snippet>properties = {}
for field_name, field_def in my_fields.items():
    properties[field_name] = getattr(forms, field_def['name'])(**field_def['attrs'])
</snippet></ROW><ROW><id>5296594</id><snippet>stdin</snippet></ROW><ROW><id>5296594</id><snippet>stdout</snippet></ROW><ROW><id>5296594</id><snippet>stderr</snippet></ROW><ROW><id>5296594</id><snippet>stdout</snippet></ROW><ROW><id>5296594</id><snippet>puts</snippet></ROW><ROW><id>5296594</id><snippet>stderr</snippet></ROW><ROW><id>5296637</id><snippet>Selector</snippet></ROW><ROW><id>5297073</id><snippet>import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

# http://matplotlib.sourceforge.net/examples/api/colorbar_only.html

fig=plt.figure(figsize=(1,5))
ax=fig.add_subplot(111)
ax.axis([0,1,-50,200])
cmap = mpl.cm.jet
norm = mpl.colors.Normalize(vmin=-40, vmax=180)
cb1 = mpl.colorbar.ColorbarBase(ax, cmap=cmap,
                                orientation='vertical',                                
                                norm=norm,
                                ticks=[-40,180]
                                )

plt.subplots_adjust(left=0.4, right=0.8)
plt.show()
</snippet></ROW><ROW><id>5297125</id><snippet>manage.py</snippet></ROW><ROW><id>5297495</id><snippet>import hashlib
m = hashlib.md5()
m.update("000005fab4534d05api_key9a0554259914a86fb9e7eb014e4e5d52permswrite")
print m.hexdigest()
</snippet></ROW><ROW><id>5297495</id><snippet>a02506b31c1cd46c2e0b6380fb94eb3d</snippet></ROW><ROW><id>5297773</id><snippet>[ a[0].values()[0] for a in d['array'] ]
</snippet></ROW><ROW><id>5297773</id><snippet>d</snippet></ROW><ROW><id>5297773</id><snippet>[15.0, 12.0, 12.0, 12.0, 45.0, 78.0, 89.0, 65.0, 352.0,
 45.0, 12.0, 45.0, 78.0, 98.0, 352.0, 56.0, 89.0, 78.0,
 45.0, 12.0, 23.0, 65.0, 65.0, 45.0, 78.0, 899.0, 8989.0,
 6565.0, 323.0, 1211.0]
</snippet></ROW><ROW><id>5298221</id><snippet>ZIP_DEFLATED</snippet></ROW><ROW><id>5298221</id><snippet>ZIP_STORED</snippet></ROW><ROW><id>5298221</id><snippet>tar</snippet></ROW><ROW><id>5298555</id><snippet>from _winreg import *

def get_guid_by_name(name):
    # Open the uninstaller key
    with OpenKey(HKEY_LOCAL_MACHINE, r'Software\Microsoft\Windows\CurrentVersion\Uninstall') as key:
        # We only care about subkeys of the installer key
        subkeys, _, _ = QueryInfoKey(key)
        for i in range(subkeys):
            subkey = EnumKey(key, i)
            # Since we're looking for uninstallers for MSI products,
            # the key name will always be the GUID. We assume that any
            # key starting with '{' and ending with '}' is a GUID, but
            # if not the name won't match.
            if subkey[0] != '{' or subkey[-1] != '}':
                 continue
            # Query the display name or other property of the key to
            # see if it's the one we want
            with OpenKey(key, subkey) as _subkey:
                if QueryValueEx(_subkey, 'DisplayName')[0] == name:
                    return subkey
     return None
</snippet></ROW><ROW><id>5298555</id><snippet>/passive</snippet></ROW><ROW><id>5298555</id><snippet>import wmi
c = wmi.WMI()
c.Win32_Product(Name = 'ProductName')[0].Uninstall()
</snippet></ROW><ROW><id>5298836</id><snippet>([fillvalue]*(len(args)-1))</snippet></ROW><ROW><id>5298836</id><snippet>args</snippet></ROW><ROW><id>5298836</id><snippet>['-']</snippet></ROW><ROW><id>5298836</id><snippet>counter</snippet></ROW><ROW><id>5298836</id><snippet>pop</snippet></ROW><ROW><id>5298836</id><snippet>sentinel</snippet></ROW><ROW><id>5298836</id><snippet>sentinel</snippet></ROW><ROW><id>5298836</id><snippet>fillvalue</snippet></ROW><ROW><id>5298836</id><snippet>sentinel</snippet></ROW><ROW><id>5298836</id><snippet>len(args) - 1</snippet></ROW><ROW><id>5298836</id><snippet>iters = [chain(it, sentinel(), fillers) for it in args]
</snippet></ROW><ROW><id>5298836</id><snippet>iters</snippet></ROW><ROW><id>5298836</id><snippet>args</snippet></ROW><ROW><id>5298836</id><snippet>args</snippet></ROW><ROW><id>5298836</id><snippet>fillvalue</snippet></ROW><ROW><id>5298836</id><snippet>fillvalue</snippet></ROW><ROW><id>5298836</id><snippet>len(args)-1</snippet></ROW><ROW><id>5298836</id><snippet>IndexError</snippet></ROW><ROW><id>5298836</id><snippet>IndexError</snippet></ROW><ROW><id>5298836</id><snippet>args</snippet></ROW><ROW><id>5299222</id><snippet>len(tup)</snippet></ROW><ROW><id>5299222</id><snippet>def leftShift1(tup, n):
    try:
        n = n % len(tup)
    except ZeroDivisionError:
        return tuple()
    return tup[n:] + tup[0:n]

def leftShift2(tup, n):
    length = len(tup)
    if length != 0:
        n = n % length
    else:
        return tuple()
    return tup[n:] + tup[0:n]

def leftShift3(tup, n):
    if len(tup) != 0:
        n = n % len(tup)
    else:
        return tuple()
    return tup[n:] + tup[0:n] 

def leftShift4(tup, n):
    if tup:
        n = n % len(tup)
    else:
        return tuple()
    return tup[n:] + tup[0:n]

sample= tuple(range(10))
</snippet></ROW><ROW><id>5299222</id><snippet>D:\downloads&gt;python -m timeit -s"from asd import *" "leftShift1(sample, 20)"
1000000 loops, best of 3: 0.472 usec per loop

D:\downloads&gt;python -m timeit -s"from asd import *" "leftShift2(sample, 20)"
1000000 loops, best of 3: 0.533 usec per loop

D:\downloads&gt;python -m timeit -s"from asd import *" "leftShift3(sample, 20)"
1000000 loops, best of 3: 0.582 usec per loop

D:\downloads&gt;python -m timeit -s"from asd import *" "leftShift4(sample, 20)"
1000000 loops, best of 3: 0.474 usec per loop
</snippet></ROW><ROW><id>5299222</id><snippet>try .. except</snippet></ROW><ROW><id>5299222</id><snippet>if tup:</snippet></ROW><ROW><id>5299343</id><snippet>title</snippet></ROW><ROW><id>5299343</id><snippet>str</snippet></ROW><ROW><id>5299343</id><snippet>'ac milan'.title()
</snippet></ROW><ROW><id>5299671</id><snippet>weights = [1, 2, 1, 3, 1, 2, 2, 4, 1, 2, 2]
capacity = 8
</snippet></ROW><ROW><id>5299671</id><snippet>itertools</snippet></ROW><ROW><id>5299671</id><snippet>itertools.combinations_with_replacement</snippet></ROW><ROW><id>5299671</id><snippet>combinations_with_replacements(range(10), ...)</snippet></ROW><ROW><id>5299671</id><snippet>combinations_with_replacements(weights, ...)</snippet></ROW><ROW><id>5299671</id><snippet>weights[i]</snippet></ROW><ROW><id>5299671</id><snippet>itertools.combinations</snippet></ROW><ROW><id>5299671</id><snippet>combinations_with_replacement</snippet></ROW><ROW><id>5299719</id><snippet>r'^(\d{5}), [^,]+, (\d{8}), (\d{4}), [^,]+, [^,]+,' + 37 * r' ([^,]+),' + r' ([^,]+)$'
</snippet></ROW><ROW><id>5299719</id><snippet>[^,]+</snippet></ROW><ROW><id>5299719</id><snippet>(?:"[^"]*"|[^,]+)
</snippet></ROW><ROW><id>5299751</id><snippet>bases&lt;...&gt;</snippet></ROW><ROW><id>5299751</id><snippet>boost::noncopyable</snippet></ROW><ROW><id>5299751</id><snippet>bp::class_&lt;LogManager, bp::bases&lt;boost::serialization::singleton&lt;LogManager&gt; &gt;, boost::noncopyable&gt;("LogManager", bp::no_init)
</snippet></ROW><ROW><id>5299751</id><snippet>bp::class_&lt;boost::serialization::singleton&lt;LogManager&gt;, boost::noncopyable&gt;("Singleton", bp::no_init)
</snippet></ROW><ROW><id>5299751</id><snippet>boost::serialization::singleton&lt;LogManager&gt;</snippet></ROW><ROW><id>5299751</id><snippet>LogManager</snippet></ROW><ROW><id>5299751</id><snippet>bp::class_&lt;LogManager, boost::noncopyable&gt;("LogManager", bp::no_init)
</snippet></ROW><ROW><id>5299855</id><snippet>s = ['language', 'Python', 'rocks']
some_text = "There is a %s called %s which %s."
x = some_text % tuple(s)
</snippet></ROW><ROW><id>5299855</id><snippet>format</snippet></ROW><ROW><id>5299855</id><snippet>x = '{} {}'.format(*s)
</snippet></ROW><ROW><id>5300175</id><snippet># a progress bar that uses ProgressMeter
class RealProgressBar:
     pm = Nothing
     def setMaximum(self, max):
         pm = progress.ProgressMeter(total=max)
         pc = 0
     def progress(self):
        pc += 1
        if pc % 100 = 0:
            pm.update(pc)

# a fake progress bar that does nothing
class NoProgressBar:
    def setMaximum(self, max):
         pass 
    def progress(self):
         pass

# Iterate with a given progress bar
def bigIteration(collection, progressBar=NoProgressBar()):
    progressBar.setMaximum(len(collection))
    for element in collection:
        progressBar.progress()
        doWork(element)

bigIteration(collection, RealProgressBar())
</snippet></ROW><ROW><id>5300175</id><snippet> # turn a collection into one that shows progress when iterated
 def withProgress(collection, progressBar=NoProgressBar()):
      progressBar.setMaximum(len(collection))
      for element in collection:
           progressBar.progress();
           yield element

 # simple iteration function
 def bigIteration(collection):
    for element in collection:
        doWork(element)

 # let's iterate with progress reports
 bigIteration(withProgress(collection, RealProgressBar()))
</snippet></ROW><ROW><id>5300175</id><snippet>bigIteration</snippet></ROW><ROW><id>5300175</id><snippet># highly simplified cancellation token
# probably needs synchronization
class CancellationToken:
     cancelled = False
     def isCancelled(self):
         return cancelled
     def cancel(self):
         cancelled = True

# iterates a collection with cancellation support
def withCancellation(collection, cancelToken):
     for element in collection:
         if cancelToken.isCancelled():
             break
         yield element

progressCollection = withProgress(collection, RealProgressBar())
cancellableCollection = withCancellation(progressCollection, cancelToken)
bigIteration(cancellableCollection)

# meanwhile, on another thread...
cancelToken.cancel()
</snippet></ROW><ROW><id>5300199</id><snippet>for msg_num in M.search(None, "UNDELETED")[1][0].split():
    msg = M.fetch('1', '(BODY.PEEK[TEXT])') 
    a = msg[1][0][1][139:161]
    print a

# later..
if a == 'this is just a test...':
   # your code here
   pass
</snippet></ROW><ROW><id>5300199</id><snippet>a</snippet></ROW><ROW><id>5300316</id><snippet>def downup(word):
    if len(word) &lt;= 1:
        return [word]
    return [word] + downup(s[1:]) + [word]
</snippet></ROW><ROW><id>5300316</id><snippet>def recursivefun(word):
    if len(word) == 2:
        return word
    else:
        x = []
        x.append(word)
        x.extend(recursivefun(word[1:]))
        x.append(word)
        return x

print recursivefun("banana")
</snippet></ROW><ROW><id>5300316</id><snippet>['banana', 'anana', 'nana', 'ana', 'n', 'a', 'ana', 'nana', 'anana', 'banana']
</snippet></ROW><ROW><id>5300615</id><snippet>gold_room</snippet></ROW><ROW><id>5300615</id><snippet>next = raw_input('&gt; ')
if '0' in next or '1' in next:
    how_much = int(next)
else:
    dead('man, learn how to type a number')
</snippet></ROW><ROW><id>5300615</id><snippet>'0' in next or '1' in next</snippet></ROW><ROW><id>5300615</id><snippet>next = raw_input('&gt; ')
try:
    how_much = int(next)
except ValueError:
    dead('man, learn how to type a number')
</snippet></ROW><ROW><id>5300615</id><snippet>int</snippet></ROW><ROW><id>5300615</id><snippet>if next.isdigit():
    how_much = int(next)
</snippet></ROW><ROW><id>5300759</id><snippet>import email

msg = email.message_from_string(emailstr)

if (msg.is_multipart() and len(msg.get_payload()) &gt; 1 and 
    msg.get_payload(1).get_content_type() == 'message/delivery-status'):
    # email is DSN
    print(msg.get_payload(0).get_payload()) # human-readable section

    for dsn in msg.get_payload(1).get_payload():
        print('action: %s' % dsn['action']) # e.g., "failed", "delivered"

    if len(msg.get_payload()) &gt; 2:
        print(msg.get_payload(2)) # original message
</snippet></ROW><ROW><id>5300759</id><snippet>A DSN is a MIME message with a top-level content-type of
multipart/report (defined in [REPORT]).  When a multipart/report
content is used to transmit a DSN:

(a) The report-type parameter of the multipart/report content is
    "delivery-status".

(b) The first component of the multipart/report contains a human-
    readable explanation of the DSN, as described in [REPORT].

(c) The second component of the multipart/report is of content-type
    message/delivery-status, described in section 2.1 of this
    document.

(d) If the original message or a portion of the message is to be
    returned to the sender, it appears as the third component of the
    multipart/report.
</snippet></ROW><ROW><id>5300789</id><snippet>time.strptime</snippet></ROW><ROW><id>5300789</id><snippet>" - "</snippet></ROW><ROW><id>5300789</id><snippet>for line in open(logfile, 'r'):
  (timestr, gamestr) = line.split(' - ')
  hour = time.strptime(timestr, time_format).tm_hour
  n_games = parse_game_count(gamestr)
  entry_counts[hour] += 1
  game_counts[hour] += n_games
for hour in range(25): # you can in theory get hour=24!
  busyness_by_hour[hour] = game_counts[hour] / entry_counts[hour]
</snippet></ROW><ROW><id>5300789</id><snippet>entry_counts[hour] += weight</snippet></ROW><ROW><id>5300789</id><snippet>game_counts[hour] += weight*n_games</snippet></ROW><ROW><id>5300789</id><snippet>weight</snippet></ROW><ROW><id>5300862</id><snippet>import datetime

#parse json to get offset(import json; json.load(resonse); etc.)
#offset is gmtoffset + dstoffset
datetime.datetime.utcnow() + datetime.timedelta(seconds = offset)
</snippet></ROW><ROW><id>5301235</id><snippet>__iter__</snippet></ROW><ROW><id>5301235</id><snippet>obj.__class__.__iter__(obj)</snippet></ROW><ROW><id>5301235</id><snippet>obj.__iter__()</snippet></ROW><ROW><id>5301235</id><snippet>__getattribute__</snippet></ROW><ROW><id>5301235</id><snippet>class</snippet></ROW><ROW><id>5301235</id><snippet>__metamethods__</snippet></ROW><ROW><id>5301660</id><snippet>f = gen_a()
f.next()
f.next()
</snippet></ROW><ROW><id>5302119</id><snippet>kind()</snippet></ROW><ROW><id>5302119</id><snippet>class MyModel(db.Model):
  @classmethod
  def kind(cls):
    return 'prefix_%s' % super(MyModel, cls).kind()
</snippet></ROW><ROW><id>5302119</id><snippet>class ModuleModel(db.Model):
  @classmethod
  def kind(cls):
    return '%s_%s' % (cls.__module__, super(ModuleModel, cls).kind())
</snippet></ROW><ROW><id>5302291</id><snippet>import string
def list_difference(list1, list2):
    """Uses list1 as the reference, returns list of items not in list2."""
    diff_list = []
    for item in list1:
        if not item in list2:
            diff_list.append(item)
    return diff_list

def list_in_list_newline_diff(h, i):
    """When h[0] equals i[0], diffs h[2] against i[2], returns diff'd h."""
    new_h = [[],[],[]]
    hh = zip(h[0], h[1], h[2])
    ii = zip(i[0], i[1], i[2])
    for hi, hd, hr in hh:
        # print 'host %s\n%s' % (hi, hr.split('\n'))
        for pi, pd, pr in ii:
                if hi == pi:
                #print 'prev %s\n%s' % (pi, pr.split('\n'))
                    hr = string.join(list_difference(hr.split('\n'), pr.split('\n')), sep='\n')
        if hr == '':
            continue
        new_h[0].append(hi)
        new_h[1].append(hd)
        new_h[2].append(hr)
    return new_h
</snippet></ROW><ROW><id>5302410</id><snippet>x = chr(a | (b &lt;&lt; 1) | (c &lt;&lt; 2) | (d &lt;&lt; 5))
</snippet></ROW><ROW><id>5302410</id><snippet>i = ord(x)
a = i &amp; 1
b = (i &gt;&gt; 1) &amp; 1
c = (i &gt;&gt; 2) &amp; 7
d = (i &gt;&gt; 5) &amp; 7
</snippet></ROW><ROW><id>5302410</id><snippet>0000000a
0000000b
00000ccc
00000ddd
</snippet></ROW><ROW><id>5302410</id><snippet>0000000a
000000b0
000ccc00
ddd00000
</snippet></ROW><ROW><id>5302410</id><snippet>dddcccba
</snippet></ROW><ROW><id>5302410</id><snippet>dddcccba
0dddcccb
00dddccc
00000ddd
</snippet></ROW><ROW><id>5302410</id><snippet>1</snippet></ROW><ROW><id>5302410</id><snippet>0b00000001</snippet></ROW><ROW><id>5302410</id><snippet>7</snippet></ROW><ROW><id>5302410</id><snippet>0b00000111</snippet></ROW><ROW><id>5302410</id><snippet>0000000a
0000000b
00000ccc
00000ddd
</snippet></ROW><ROW><id>5302490</id><snippet>int main (int argc, char** argv)
{
    try
    {
        // If you're going to use threads: PyEval_InitThreads();
        Py_Initialize();
        PySys_SetArgv(argc, argv);

        bp::object mMainModule = bp::import('__main__');
        bp::object mMainNamespace = mMainModule.attr('__dict__');

        bp::object ignored = bp::exec("hello = file('hello.txt', 'w')\n"
              "hello.write('Hello world!')\n"
              "hello.close()", mMainNamespace);
   }
   catch (bp::error_already_set const&amp;)
   {
        PyErr_Print();
   }
}
</snippet></ROW><ROW><id>5302490</id><snippet>Py_Initialize()</snippet></ROW><ROW><id>5302490</id><snippet>try { ... } catch () { ... }</snippet></ROW><ROW><id>5302490</id><snippet>bp::import</snippet></ROW><ROW><id>5302596</id><snippet>*</snippet></ROW><ROW><id>5302596</id><snippet>+</snippet></ROW><ROW><id>5302596</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>5302596</id><snippet>|</snippet></ROW><ROW><id>5302596</id><snippet>i = a + 2*b + 4*c + 32*d
</snippet></ROW><ROW><id>5302596</id><snippet>a, b, c, d = i % 2, i//2 % 2, i//4 % 8, i//32 % 8
</snippet></ROW><ROW><id>5302876</id><snippet>sys.stdout</snippet></ROW><ROW><id>5302876</id><snippet>class PrintAndLog(object):
    def __init__(self, fileOrPath): # choose which makes more sense
        self._file = ...

    def write(s):
        sys.stdout.write(s)
        self._file.write(s)

    def close(self):
        self._file.close()
    # insert wrappers for .flush, .writelines

_old_stdout = sys.stdout
sys.stdout = PrintAndLog(f)
... # print and stuff
sys.stdout = _old_stdout
</snippet></ROW><ROW><id>5302876</id><snippet>from contextlib import contextmanager

@contextmanager
def replace_stdout(f):
    old_stdout = sys.stdout
    try:
        sys.stdout = PrintAndLog(f)
        yield
    finally:
        sys.stdout = old_stdout
</snippet></ROW><ROW><id>5303047</id><snippet>-lgsl</snippet></ROW><ROW><id>5303085</id><snippet>import re
s = '1 stores(s)'
if re.match('store\(s\)$',s):
    print('match')
</snippet></ROW><ROW><id>5303085</id><snippet>re.search</snippet></ROW><ROW><id>5303085</id><snippet>re.match</snippet></ROW><ROW><id>5303769</id><snippet>cards[pos]</snippet></ROW><ROW><id>5303769</id><snippet>cards[randpos]</snippet></ROW><ROW><id>5303769</id><snippet>cards[pos]</snippet></ROW><ROW><id>5303769</id><snippet>cards[randpos]</snippet></ROW><ROW><id>5303769</id><snippet>random.shuffle</snippet></ROW><ROW><id>5303825</id><snippet>k = subprocess.Popen(['python', 'parser.py', '-f', r'C:\Report1\2011-03-14.txt'],
                     shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>5303825</id><snippet>import sys
import os
userinput = sys.argv[1]
data = open(userinput, 'rb').read()
datalength = len(data)
fname = os.path.basename(userinput)
print "%s datasize = %s" % (fname, datalength)
</snippet></ROW><ROW><id>5303825</id><snippet>&gt;&gt;&gt; k = subprocess.Popen(['python', 'test2.py', 'w:\bin\test2.py'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
&gt;&gt;&gt; k.communicate()
5: ('Traceback (most recent call last):\r\n  File "w:\\bin\\test2.py", line 4, in &lt;module&gt;
data = open(userinput, \'rb\').read()
IOError: [Errno 22] invalid mode (\'rb\') or filename: 'w:\\x08in\\test2.py', None)
&gt;&gt;&gt; k = subprocess.Popen(['python', r'w:\bin\test2.py', r'w:\bin\test2.py'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
&gt;&gt;&gt; k.communicate()
6: ('test2.py datasize = 194\n', None)
</snippet></ROW><ROW><id>5303974</id><snippet>WSGIPythonPath /path/to/my/py/files/folder
</snippet></ROW><ROW><id>5304086</id><snippet>def split_list(mylist, *args):
    ilist = map(lambda p : int(p * len(mylist) / 100.0), args) + [len(mylist)]
    return reduce(lambda l, v : [l[0] + [mylist[l[1]:v]], v], ilist, [[],0])[0]
</snippet></ROW><ROW><id>5304091</id><snippet>from django.core.cache import cache

# Generate HTML block to cache
html = '&lt;div&gt;Calendar&lt;/div&gt;'

# Cache the HTML as 'google_calendar'
cache.set('google_calendar', html, 3600)
</snippet></ROW><ROW><id>5304091</id><snippet>from django.shortcuts import render_to_response
from django.core.cache import cache

def home(request):
    data = {
        'gcal': cache.get('google_calendar')
    }
    return render_to_response('home.html', data)
</snippet></ROW><ROW><id>5304272</id><snippet>pip install -E your_virtualenv_here django-extensions</snippet></ROW><ROW><id>5304354</id><snippet>recordList = []
</snippet></ROW><ROW><id>5304456</id><snippet>a = {'Other': '1.05', 'United States': '93.67', 'Liberia': '3.26', '" alt="" /&gt;\n&lt;/p&gt;\n&lt;/div&gt;': '', 'Canada': '2.02'}
b = {}

for k, v in a.iteritems():
    if v == ''  or "alt" in k:
        pass
    else:
        b[k] = v
print b
</snippet></ROW><ROW><id>5304824</id><snippet>GqlQuery.bind()</snippet></ROW><ROW><id>5304824</id><snippet>Query</snippet></ROW><ROW><id>5304824</id><snippet>Query.filter()</snippet></ROW><ROW><id>5304824</id><snippet># this basic string query is safe
query = Song.all()
query.filter('title =', self.request.get('title'))

# a GqlQuery version of the previous example
query = GqlQuery("SELECT x FROM Song WHERE title = :1",self.request.get('title'))

# sanitize/validate when you have requirements: e.g., year must be a number
query = Song.all()
try:
    year = int(self.request.get('year'))  # make sure we got a number
except:
    show error msg
query.filter('year =', year)
</snippet></ROW><ROW><id>5305025</id><snippet>cdll</snippet></ROW><ROW><id>5305025</id><snippet>stdcall</snippet></ROW><ROW><id>5305025</id><snippet>cdecl</snippet></ROW><ROW><id>5305025</id><snippet>cdll</snippet></ROW><ROW><id>5305025</id><snippet>windll</snippet></ROW><ROW><id>5305028</id><snippet>list = [3, 4, 5]
y = Create(list)
y.other('one')
</snippet></ROW><ROW><id>5305028</id><snippet>other</snippet></ROW><ROW><id>5305028</id><snippet>Create</snippet></ROW><ROW><id>5305028</id><snippet>class Create:
    def __init__(self, something):
        self.test = something[1]
        self.other(123)

    def other(self, one):
        self.two = one
</snippet></ROW><ROW><id>5305028</id><snippet>self.two</snippet></ROW><ROW><id>5305028</id><snippet>other()</snippet></ROW><ROW><id>5305031</id><snippet>import string
....
safe_string = ""
for ch in compressed_string:
   if ch in string.printable and ch != '\\':
      safe_string += ch
   else:
      safe_string += "\%o" % ord(ch)
content = ".....\"%s\" ...." % safe_string
</snippet></ROW><ROW><id>5305053</id><snippet>import time
import wx

class MyFrame(wx.Frame):
    def __init__(self, *args, **kargs):
        wx.Frame.__init__(self, *args, **kargs)
        self.bt = wx.Button(self)
        self.status = ProgressStatusBar(self)
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.Bind(wx.EVT_BUTTON, self.on_bt, self.bt)

        self.sizer.Add(self.bt, 1, wx.EXPAND)
        self.sizer.Add(self.status, 1, wx.EXPAND)

        self.SetSizer(self.sizer)
        self.Fit()
        self.SetSize((500,200))

    def on_bt(self, evt):
        "press the button and it will start" 
        for n in range(100):
            time.sleep(0.1)
            self.status.SetProgress(n)
            self.Update()

if __name__ == '__main__':
    app = wx.PySimpleApp()
    frame = MyFrame(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>5305055</id><snippet>python-redis</snippet></ROW><ROW><id>5305055</id><snippet>Redis</snippet></ROW><ROW><id>5305055</id><snippet>ConnectionPool</snippet></ROW><ROW><id>5305055</id><snippet>threading.local</snippet></ROW><ROW><id>5305055</id><snippet>self._redis_sub</snippet></ROW><ROW><id>5305055</id><snippet>self._redis_sub</snippet></ROW><ROW><id>5305055</id><snippet>client.subscribe(channel)</snippet></ROW><ROW><id>5305055</id><snippet>self._sub_thread</snippet></ROW><ROW><id>5305055</id><snippet>listen()</snippet></ROW><ROW><id>5305055</id><snippet>python-redis</snippet></ROW><ROW><id>5305055</id><snippet>python-redis</snippet></ROW><ROW><id>5305220</id><snippet>list(set(l1) - set(l2))</snippet></ROW><ROW><id>5305220</id><snippet>set()</snippet></ROW><ROW><id>5305220</id><snippet>value in list</snippet></ROW><ROW><id>5305225</id><snippet>awk</snippet></ROW><ROW><id>5305225</id><snippet>awk '{ print &gt;&gt; $5 }' yourfile
</snippet></ROW><ROW><id>5305225</id><snippet>5</snippet></ROW><ROW><id>5305469</id><snippet>0b100</snippet></ROW><ROW><id>5305469</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; val = 0b100
&gt;&gt;&gt; print struct.pack('I', val).encode('base64')
BAAAAA==
</snippet></ROW><ROW><id>5305599</id><snippet>'\x00\x01\x02\x03'.encode('base64')
</snippet></ROW><ROW><id>5305599</id><snippet>'\xaa\xb2\xa2\x08'.encode('base64')
</snippet></ROW><ROW><id>5305600</id><snippet>% /usr/bin/python interpreterInfo.py | grep PyObjC
|/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/PyObjCINS_PATH
</snippet></ROW><ROW><id>5305600</id><snippet>&gt;&gt;&gt; import pycompletion
&gt;&gt;&gt; print pycompletion.GetImports('os')
@@COMPLETIONS(/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/os.py,(EX_CANTCREAT, 3),(EX_CONFIG, 3),(EX_DATAERR, 3), ....
</snippet></ROW><ROW><id>5305600</id><snippet>macobjc.py</snippet></ROW><ROW><id>5305606</id><snippet>from win32com import client

excel=client.Dispatch("Excel.Application")
excel.Visible=True
book=excel.Workbooks.Open("c:/desktop/test.xlsx", False, True)
sheet=book.Worksheets(1)
chart=book.Charts.Add()
chart.SetSourceData(sheet.Range("$A:$B"))

chart.Move(Before=book.Worksheets("Sheet2"))
chart.Move(book.Worksheets("Sheet2"))#equivalent to previous line
chart.Move(book.Worksheets("Sheet2"), None)#also equivalent

chart.Move(After=book.Worksheets("Sheet2"))
chart.Move(None,book.Worksheets("Sheet2"))#equivalent to previous line
</snippet></ROW><ROW><id>5305606</id><snippet>None</snippet></ROW><ROW><id>5305696</id><snippet>import re 
pat = re.compile('ENABLEPRINTER|PRINTERLIST|PRNT1.PORT')

def jojo(mat,dic = {'ENABLEPRINTER':'y',
                    'PRINTERLIST':'PRNT3',
                    'PRNT1.PORT':'734'} ):
    return dic[mat.group()]

with open('configfile','rb+') as f:
    content = f.read()
    f.seek(0,0)
    f.write(pat.sub(jojo,content))
    f.truncate()
</snippet></ROW><ROW><id>5305696</id><snippet>ENABLEPRINTER=n 
PRINTERLIST=PRNT1, PRNT2  

PRNT1.PORT=9600 
PRNT1.BITS=8
</snippet></ROW><ROW><id>5305696</id><snippet>y=n 
PRNT3==PRNT1, PRNT2  

734=9600
PRNT1.BITS=8
</snippet></ROW><ROW><id>5305696</id><snippet>import re
from os import fsync

def updating(filename,dico):

    RE = '(('+'|'.join(dico.keys())+')\s*=)[^\r\n]*?(\r?\n|\r)'
    pat = re.compile(RE)

    def jojo(mat,dic = dico ):
        return dic[mat.group(2)].join(mat.group(1,3))

    with open(filename,'rb') as f:
        content = f.read() 

    with open(filename,'wb') as f:
        f.write(pat.sub(jojo,content))



#-----------------------------------------------------------

vars = ['ENABLEPRINTER','PRINTERLIST','PRNT1.PORT']
new_values = ['y','PRNT3','8310']
what_to_change = dict(zip(vars,new_values))


updating('configfile_1.txt',what_to_change)
</snippet></ROW><ROW><id>5305696</id><snippet>ENABLEPRINTER=n 
PRINTERLIST=PRNT1, PRNT2  

PRNT1.PORT=9600 
PRNT1.BITS=8
</snippet></ROW><ROW><id>5305696</id><snippet>ENABLEPRINTER=y 
PRINTERLIST=PRNT3

PRNT1.PORT=8310 
PRNT1.BITS=8
</snippet></ROW><ROW><id>5305746</id><snippet>{'id__in' : Group.objects.all().get(name='Teachers').user_set.all()}</snippet></ROW><ROW><id>5305746</id><snippet>{'groups__name' : 'Teachers' }</snippet></ROW><ROW><id>5305746</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "teacher":
            kwargs["queryset"] = User.objects.filter(groups__name='Teacher')
        if db_field.name == "students":
            kwargs["queryset"] = User.objects.filter(groups__name='Student')
        return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>5306094</id><snippet>int</snippet></ROW><ROW><id>5306094</id><snippet>desired_array = [int(numeric_string) for numeric_string in current_array]
</snippet></ROW><ROW><id>5306243</id><snippet>my_custom_tags.py</snippet></ROW><ROW><id>5306243</id><snippet>customtags</snippet></ROW><ROW><id>5306243</id><snippet>__init__.py</snippet></ROW><ROW><id>5306243</id><snippet>.py</snippet></ROW><ROW><id>5306284</id><snippet>(1, 2, 3)              &lt; (1, 2, 4)
[1, 2, 3]              &lt; [1, 2, 4]
'ABC' &lt; 'C' &lt; 'Pascal' &lt; 'Python'
(1, 2, 3, 4)           &lt; (1, 2, 4)
(1, 2)                 &lt; (1, 2, -1)
(1, 2, 3)             == (1.0, 2.0, 3.0)
(1, 2, ('aa', 'ab'))   &lt; (1, 2, ('abc', 'a'), 4)
</snippet></ROW><ROW><id>5306284</id><snippet>C:\Users\jon&gt;python
Python 2.6.5 (r265:79096, Mar 19 2010, 21:48:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; [1,-1,1] == [1.0,-1,1]
True
</snippet></ROW><ROW><id>5306388</id><snippet>import sys
import io

with io.open(sys.stdin.fileno(),'r',encoding='latin-1') as sin:
    for line in sin:
        print ('type:{0} line:{1}'.format(type (line), line))
</snippet></ROW><ROW><id>5306388</id><snippet>type:&lt;class 'str'&gt; line:Hi! öäß
</snippet></ROW><ROW><id>5306402</id><snippet>eval</snippet></ROW><ROW><id>5306402</id><snippet>data = input()
m, b = (int(var) for var in data.split(","))
</snippet></ROW><ROW><id>5306787</id><snippet>format</snippet></ROW><ROW><id>5306787</id><snippet>&gt;&gt;&gt; print "{0:.0f}%".format(float(1)/3 * 100)
33%
</snippet></ROW><ROW><id>5306787</id><snippet>__future__</snippet></ROW><ROW><id>5306787</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1 / 3
0.3333333333333333

# The above 33% example would could now be written without the explicit
# float conversion:
&gt;&gt;&gt; print "{0:.0f}%".format(1/3 * 100)
33%

# Or even shorter using the format mini language:
&gt;&gt;&gt; print "{:.0%}".format(1/3)
33%
</snippet></ROW><ROW><id>5306853</id><snippet>while (&lt;DATA&gt;) {
    s/^(.+ (\d+))$/("$1" "#$2")/;
    print;
}

__DATA__
Chapter 3 Convex Functions 97
3.1 Definitions 98
3.2 Basic Properties 103
</snippet></ROW><ROW><id>5306853</id><snippet>("Chapter 3 Convex Functions 97" "#97")
("3.1 Definitions 98" "#98")
("3.2 Basic Properties 103" "#103")
</snippet></ROW><ROW><id>5306853</id><snippet>perl -pe 's/^(.+ (\d+))$/("$1" "#$2")/'
</snippet></ROW><ROW><id>5306885</id><snippet>parser.error(...)</snippet></ROW><ROW><id>5306885</id><snippet>parser</snippet></ROW><ROW><id>5306885</id><snippet>OptionParser</snippet></ROW><ROW><id>5306885</id><snippet>from optparse import OptionParser

parser = OptionParser('usage: %prog [options] target source [source ...]')
[...]

(opts, args) = parser.parse_args()

if len(args) &lt; 2:
    parser.error('need a target and at least one source')
</snippet></ROW><ROW><id>5306885</id><snippet>Usage: merge-into.py [options] target source [source ...]

merge-into.py: error: need a target and at least one source
</snippet></ROW><ROW><id>5306931</id><snippet>*</snippet></ROW><ROW><id>5306931</id><snippet>E.p(*params, **{'count': '2'})
</snippet></ROW><ROW><id>5306931</id><snippet>E.p(*params, **dict(count='2')})
</snippet></ROW><ROW><id>5307254</id><snippet>sys.stdout</snippet></ROW><ROW><id>5307254</id><snippet>print</snippet></ROW><ROW><id>5307254</id><snippet>#function for decrypting file
def decryptfile(openFile2, outfile): # &lt;- CHANGED to add outfile
    for line in openFile2:
        for word in line.split():
            empty = ''
            for char in word:
                if char not in string.punctuation:
                    char=char.lower()
                    empty = empty+char 
                if len(empty) == 2:
                    outfile.write(rulesdecrypt[empty]) # &lt;- CHANGED to write to file
                    empty = ''
            if len(empty) == 1:
                outfile.write(rulesdecrypt[empty]) # &lt;- CHANGED to write to file
</snippet></ROW><ROW><id>5307288</id><snippet>def prefix(input):
  op, num1, num2 = input.split(" ")
  num1 = int(num1)
  num2 = int(num2)
  if op == "+":
    return num1 + num2
  elif op == "*":
    return num1 * num2
  else:
    # handle invalid op
    return 0

print prefix("+ 2 2")
</snippet></ROW><ROW><id>5307343</id><snippet>perl -e '$n=29; ("a" x $n) =~ (("a?" x $n).("a" x $n))'
</snippet></ROW><ROW><id>5307343</id><snippet>$n++</snippet></ROW><ROW><id>5307497</id><snippet>sorted(D.iteritems(), key=lambda x: x[1][1][0])
</snippet></ROW><ROW><id>5307497</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>5307646</id><snippet>awk -F'#' 'NF&gt;1{split($2,a,"[0-9]+");print $1 FS $2+11 a[2];next}1' infile
</snippet></ROW><ROW><id>5307646</id><snippet>$ awk -F'#' 'NF&gt;1{split($2,a,"[0-9]+");print $1 FS $2+11 a[2];next}1' infile
(bookmarks
("Chapter 1 Introduction 1" "#12"
("1.1 Problem Statement and Basic Definitions 2" "#13")
("1.2 Illustrative Examples 4" "#15")
("1.3 Guidelines for Model Construction 26" "#37")
("Exercises 30" "#41")
("Notes and References 34" "#45"))
)
</snippet></ROW><ROW><id>5308072</id><snippet>def to_complete(request):
    if request.session.has_key("complete_pending"):
        return HttpResponseForbidden()
    request.session["complete_pending"] = True
    return MobileResponseRedirect('/battle/complete/')

def complete(request):
    if not request.session.get("complete_pending", False):
        return HttpResponseForbidden()
    request.session["complete_pending"] = False
    do_something()
    return MobileResponse(html)
</snippet></ROW><ROW><id>5308072</id><snippet>to_complete</snippet></ROW><ROW><id>5308072</id><snippet>complete</snippet></ROW><ROW><id>5308168</id><snippet>select.select()</snippet></ROW><ROW><id>5308168</id><snippet>select()</snippet></ROW><ROW><id>5308168</id><snippet>select()</snippet></ROW><ROW><id>5308168</id><snippet>timeout</snippet></ROW><ROW><id>5308168</id><snippet>import select
import socket

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server_socket.bind(('', 8888))
server_socket.listen(5)
print "Listening on port 8888"

read_list = [server_socket]
while True:
    readable, writable, errored = select.select(read_list, [], [])
    for s in readable:
        if s is server_socket:
            client_socket, address = server_socket.accept()
            read_list.append(client_socket)
            print "Connection from", address
        else:
            data = s.recv(1024)
            if data:
                s.send(data)
            else:
                s.close()
                read_list.remove(s)
</snippet></ROW><ROW><id>5308168</id><snippet>epoll</snippet></ROW><ROW><id>5308168</id><snippet>poll</snippet></ROW><ROW><id>5308168</id><snippet>kqueue</snippet></ROW><ROW><id>5308168</id><snippet>select</snippet></ROW><ROW><id>5308375</id><snippet>import numpy as np
import pylab as py
from scipy import *  # it is better practice to do: from scipy import module1, module2, etc...
from numpy.fft import fft
import mpl_toolkits.mplot3d.axes3d as p3

def fft2dplot(
    type = 'rect', aperature = 16, method = 'transfer',
    wavelength = 1, distance = 1000000):
    # here you are overwriting the built-in 'dict' suggest using a different variable name
    dict = {
        'rect' : 'Rectangle', 'circ' : 'Circle', 
        'transfer' : 'Tranfer Function', 'integral' : 'Integral'}
    #Scale is not correct
    scale = aperature/(distance*wavelength) #in mm
    #Range for aperature, 
    x = y = arange(-aperature*8,aperature*8, 1)
    X,Y = np.meshgrid(x,y)
    print len(X)
    # you were losing references to the meshgrid arrays X and Y here.
    # I've provided an alternate method of getting an array of zeros
    # Z = np.zeros(X.shape) works as well
    #X = Y = Z = X*0
    Z = X.copy()
    Z[:,:] = 0


    # Indexing does not work like this.  Indices are unsigned integers 0 and above
    # or a boolean array the same shape as the indexed array.
    #These following statements never enter (type == rect passes, but for loop don't)
##    if type == 'rect':
##        for u in x[-aperature/2:aperature/2]:
##                for w in y[-aperature/2:aperature/2]:
##                    Z[u,w] = 1
##                    print "I'm here"

    # what you need is to define your indices based on your conditions.  
    # Here we create a boolean array of indices that indicate where we meet your
    # conditions.
    # Then we use that array to assign those elements of the Z array to the value 1
    idxs = (X&gt;-aperature/2)&amp;(X&lt;aperature/2)&amp;(Y&gt;-aperature/2)&amp;(Y&lt;aperature/2)
    Z[idxs] = 1

    fig = py.figure()
    ax = p3.Axes3D(fig)
    #ax.contour3D(X,Y,Z)
    ax.plot_wireframe(X, Y, Z, rstride=1, cstride=1)
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    py.show()
</snippet></ROW><ROW><id>5308385</id><snippet>{% if newData %}
    newData
{% else %}
    error
{% endif %}
</snippet></ROW><ROW><id>5308914</id><snippet>post_data = [('name','Gladys'),]     # a sequence of two element tuples
result = urllib2.urlopen('http://example.com', urllib.urlencode(post_data))
content = result.read()
</snippet></ROW><ROW><id>5309027</id><snippet>a = models.ManyToManyField('A')
# ...
b = models.ManyToManyField('B')
</snippet></ROW><ROW><id>5309270</id><snippet>if all( x in 'hello world' for x in ['hel','ell','orl'] ):
    print "Found all of them"
</snippet></ROW><ROW><id>5309270</id><snippet>all</snippet></ROW><ROW><id>5309270</id><snippet>any</snippet></ROW><ROW><id>5309323</id><snippet>&gt;&gt;&gt; import _winreg
&gt;&gt;&gt; c = _winreg.ConnectRegistry("SOMEMACHINE", _winreg.HKEY_CLASSES_ROOT)
&gt;&gt;&gt; c = _winreg.ConnectRegistry("10.10.40.9", _winreg.HKEY_CLASSES_ROOT)
</snippet></ROW><ROW><id>5309733</id><snippet>options</snippet></ROW><ROW><id>5309733</id><snippet>setup()</snippet></ROW><ROW><id>5309733</id><snippet>from distutils.core import setup
import py2exe

setup(
    windows=[{'script': 'gui.py'}],
    options={
        'py2exe': 
        {
            'includes': ['lxml.etree', 'lxml._elementpath', 'gzip'],
        }
    }
)
</snippet></ROW><ROW><id>5309819</id><snippet>first_col = ColumnDefn('Name', 'left', -1, 'name', isEditable=True)
</snippet></ROW><ROW><id>5309819</id><snippet>self.TrackOlv.cellEditMode = self.TrackOlv.CELLEDIT_SINGLECLICK
</snippet></ROW><ROW><id>5310221</id><snippet>martineau</snippet></ROW><ROW><id>5310221</id><snippet>eumiro</snippet></ROW><ROW><id>5310221</id><snippet>val = struct.pack ('!' + 'B' +'B' + 'c'*3 + '?', *(tuple(dct['bt_arr'][0:2])+ tuple(dct['string'][0:3]) + (dct['boolean'],)))
</snippet></ROW><ROW><id>5310558</id><snippet> import json 
 config = {
  'name': 'hello',
  'see?': 'world'
 }
 out = open('config.json','w')
 out.write(json.dumps(config))
 out.close() 
</snippet></ROW><ROW><id>5310558</id><snippet> input = open('config.json','r')
 config = json.loads(input.read())
 input.close()
 print config
</snippet></ROW><ROW><id>5310674</id><snippet>&gt;&gt;&gt; a
set([1, 2, 3])
&gt;&gt;&gt; list(a)
[1, 2, 3]
</snippet></ROW><ROW><id>5311245</id><snippet>re.sub(r'\[\d+\]', '', 'something.something[0].somethingelse[21].blah')
</snippet></ROW><ROW><id>5311758</id><snippet>__init__.py</snippet></ROW><ROW><id>5311758</id><snippet>__input__.py</snippet></ROW><ROW><id>5311758</id><snippet>__init__.py</snippet></ROW><ROW><id>5311876</id><snippet>zip()</snippet></ROW><ROW><id>5311876</id><snippet>zip()</snippet></ROW><ROW><id>5312016</id><snippet>current_dict</snippet></ROW><ROW><id>5312016</id><snippet>k, v</snippet></ROW><ROW><id>5312016</id><snippet>(k, v)</snippet></ROW><ROW><id>5312016</id><snippet>from collections import defaultdict

dd = defaultdict(list)
for i in some_list_of_items:
    for k, v in dict_from_an_item(i).iteritems():
        dd[k].extend(v)
</snippet></ROW><ROW><id>5312057</id><snippet>snake_in_polish_in_ascii.decode('utf-8')
</snippet></ROW><ROW><id>5312057</id><snippet>print snake_in_polish_in_ascii.decode('utf-8')
</snippet></ROW><ROW><id>5312057</id><snippet>print snake_in_polish_in_ascii</snippet></ROW><ROW><id>5312057</id><snippet>w─ů┼╝</snippet></ROW><ROW><id>5312057</id><snippet>&gt;&gt;&gt; print snake_in_polish_in_ascii.decode("cp852")
w─ů┼╝
</snippet></ROW><ROW><id>5312461</id><snippet>User</snippet></ROW><ROW><id>5312461</id><snippet>username</snippet></ROW><ROW><id>5312461</id><snippet>CurrentUser</snippet></ROW><ROW><id>5312461</id><snippet>User</snippet></ROW><ROW><id>5312461</id><snippet>username</snippet></ROW><ROW><id>5312461</id><snippet>User</snippet></ROW><ROW><id>5312461</id><snippet>split</snippet></ROW><ROW><id>5312461</id><snippet>institute,username = CurrentUser.username.split('_')
</snippet></ROW><ROW><id>5313273</id><snippet>str(temp)</snippet></ROW><ROW><id>5313273</id><snippet>&gt;&gt;&gt; test = u"abcd"
&gt;&gt;&gt; test == "abcd"
True
</snippet></ROW><ROW><id>5313273</id><snippet>object_hook</snippet></ROW><ROW><id>5313485</id><snippet>staticmethod</snippet></ROW><ROW><id>5313485</id><snippet>class Foo(object):
    @staticmethod
    def foo(bar, baz, qux):
        pass
</snippet></ROW><ROW><id>5313485</id><snippet>class Foo(object):
    global_cache={}
    @classmethod
    def set(cls, key, value):
        cls.global_cache[key] = value
</snippet></ROW><ROW><id>5313485</id><snippet>self</snippet></ROW><ROW><id>5313485</id><snippet>self</snippet></ROW><ROW><id>5313569</id><snippet>{
    'TableName': {'FieldA': ['Type', FK(..)], 'FieldB': ['type']}
}
</snippet></ROW><ROW><id>5313958</id><snippet>a = [1, 2, 3, 4]
n = len(a)
[[a[i - j] for i in range(n)] for j in range(n)]
# [[1, 2, 3, 4], [4, 1, 2, 3], [3, 4, 1, 2], [2, 3, 4, 1]]
</snippet></ROW><ROW><id>5313958</id><snippet>[[a[i - j] for i in range(n)] for j in range(n, 0, -1)]
# [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]
</snippet></ROW><ROW><id>5314008</id><snippet>[0 if e == 1 else e for e in a]
</snippet></ROW><ROW><id>5314008</id><snippet>a</snippet></ROW><ROW><id>5314008</id><snippet>array.array</snippet></ROW><ROW><id>5314008</id><snippet>array.array('i', [0 if e == 1 else e for e in a])
</snippet></ROW><ROW><id>5314009</id><snippet>re.sub</snippet></ROW><ROW><id>5314009</id><snippet>import re

s = "Idaho Ave N,,Crystal,Mn,55427-1463,US,,610839124763,Expedited"

def upcase(match):
    return match.group().upper()

print re.sub("[A-Z][a-z],", upcase, s)
</snippet></ROW><ROW><id>5314009</id><snippet>re.sub</snippet></ROW><ROW><id>5314035</id><snippet># make a Flask app
from flask import Flask, render_template, g
app = Flask(__name__)
@app.route("/")
def index():
    return render_template("index.html")

# run in under twisted through wsgi
from twisted.web.wsgi import WSGIResource
from twisted.web.server import Site

resource = WSGIResource(reactor, reactor.getThreadPool(), app)
site = Site(resource)

# bind it etc
# ...
</snippet></ROW><ROW><id>5314291</id><snippet>last_index = len(number_spec) - 1
</snippet></ROW><ROW><id>5314307</id><snippet>enumerate</snippet></ROW><ROW><id>5314307</id><snippet>&gt;&gt;&gt; a = [0, 4, 10, 100]
&gt;&gt;&gt; [x - a[i - 1] for i, x in enumerate(a)][1:]
[4, 6, 90]

# or with a conditional inside the list comprehension:
&gt;&gt;&gt; [x - a[i - 1] for i, x in enumerate(a) if i &gt; 0]
[4, 6, 90]
</snippet></ROW><ROW><id>5314407</id><snippet>import sys
import path
import pkg_resources

APP_HOME = path.path(sys.executable).parent
SUPPORT = APP_HOME / 'support'

eggs = [egg for egg in SUPPORT.files('*.egg')]
reqs, errs = pkg_resources.working_set.find_plugins(
    pkg_resources.Environment(eggs)
)
map(pkg_resources.working_set.add, reqs)

sys.path.extend(SUPPORT.files('*.egg'))
</snippet></ROW><ROW><id>5314578</id><snippet>.npy</snippet></ROW><ROW><id>5314578</id><snippet>.npy</snippet></ROW><ROW><id>5314606</id><snippet>template&lt;class T&gt;
struct VecToList
{
    static PyObject* convert(const std::vector&lt;T&gt;&amp; vec)
    {
        boost::python::list* l = new boost::python::list();
        for(size_t i = 0; i &lt; vec.size(); i++)
            (*l).append(vec[i]);

        return l-&gt;ptr();
    }
};
</snippet></ROW><ROW><id>5314606</id><snippet>BOOST_PYTHON_MODULE(MyModule)
{
    to_python_converter&lt;std::vector&lt;std::string,class std::allocator&lt;std::string&gt; &gt;, VecToList&lt;std::string&gt; &gt;();
    bp::def("getListValue", getListValue);
}
</snippet></ROW><ROW><id>5314770</id><snippet>put</snippet></ROW><ROW><id>5314770</id><snippet>local_path</snippet></ROW><ROW><id>5314770</id><snippet>from fabric.api import env
from fabric.operations import run, put

env.hosts = ['frodo@middleearth.com']

def copy():
    # make sure the directory is there!
    run('mkdir -p /home/frodo/tmp')

    # our local 'testdirectory' - it may contain files or subdirectories ...
    put('testdirectory', '/home/frodo/tmp')

# [frodo@middleearth.com] Executing task 'copy'
# [frodo@middleearth.com] run: mkdir -p /home/frodo/tmp
# [frodo@middleearth.com] put: testdirectory/HELLO -&gt; \
#     /home/frodo/tmp/testdirectory/HELLO
# [frodo@middleearth.com] put: testdirectory/WORLD -&gt; \
#     /home/frodo/tmp/testdirectory/WORLD
# ...
</snippet></ROW><ROW><id>5314808</id><snippet>cStringIO</snippet></ROW><ROW><id>5314808</id><snippet>import os
import sys
import matplotlib
import matplotlib.pyplot as plt
import StringIO
import urllib, base64

plt.plot(range(10, 20))
fig = plt.gcf()

imgdata = StringIO.StringIO()
fig.savefig(imgdata, format='png')
imgdata.seek(0)  # rewind the data

print "Content-type: image/png\n"
uri = 'data:image/png;base64,' + urllib.quote(base64.b64encode(imgdata.buf))
print '&lt;img src = "%s"/&gt;' % uri
</snippet></ROW><ROW><id>5314925</id><snippet>&gt;&gt;&gt; def append(lst, elem):
...     return lst + [elem]
... 
&gt;&gt;&gt; append([1, 2, 3], 4)
[1, 2, 3, 4]
&gt;&gt;&gt; def extend(lst1, lst2):
...   return lst1 + lst2
... 
&gt;&gt;&gt; extend([1, 2], [3, 4])
[1, 2, 3, 4]</snippet></ROW><ROW><id>5314925</id><snippet>&gt;&gt;&gt; class MyList(list):
...   def append(self, x):
...     super(MyList, self).append(x)
...     return self
...   def extend(self, lst):
...     super(MyList, self).extend(lst)
...     return self
... 
&gt;&gt;&gt; l = MyList([1, 2, 3])
&gt;&gt;&gt; l.append(4)
[1, 2, 3, 4]
&gt;&gt;&gt; l.extend([5, 6, 7])
[1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; l
[1, 2, 3, 4, 5, 6, 7]</snippet></ROW><ROW><id>5315450</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>5315450</id><snippet>from top_settings import *
</snippet></ROW><ROW><id>5315687</id><snippet>TypeError</snippet></ROW><ROW><id>5315687</id><snippet>try:
    String = msg[1][0][1][139:161]
except TypeError:
    continue
</snippet></ROW><ROW><id>5315687</id><snippet>if 'This is just a test...' in String:
    # ...
</snippet></ROW><ROW><id>5315687</id><snippet>msg[1][0]</snippet></ROW><ROW><id>5315687</id><snippet>msg</snippet></ROW><ROW><id>5315734</id><snippet>.deb</snippet></ROW><ROW><id>5315734</id><snippet>/usr/lib/python2.6/dist-packages
</snippet></ROW><ROW><id>5315734</id><snippet>dpkg</snippet></ROW><ROW><id>5315734</id><snippet>/usr/local/lib/python2.6/dist-packages
</snippet></ROW><ROW><id>5315755</id><snippet>2007-04-05T14:30</snippet></ROW><ROW><id>5316012</id><snippet>        if game():
            wins = wins + 1
        if not game():
            losses = losses + 1
</snippet></ROW><ROW><id>5316012</id><snippet>        if game():
            wins = wins + 1
        else:
            losses = losses + 1
</snippet></ROW><ROW><id>5316012</id><snippet>game()</snippet></ROW><ROW><id>5316085</id><snippet>class Cat(object):
    def __init__(self, name...):
        self.__name = name # __ make the var private
        ...

    def getName(self):
        return self.__name

    def setName(self, name):
        self.__name = name

    ...
</snippet></ROW><ROW><id>5316085</id><snippet>class Cat(object):
    def __init__(self, name):
        self.name = name

c = Cat('billy')
print c.name
# billy
c.name = 'kit'
print c.name
# kit
</snippet></ROW><ROW><id>5316085</id><snippet>class Cat(object):

    def __init__(self, name):
        self._name = name # '_' is just a convention and does nothing

    @property # when you do cat.name, it will call this function
    def name(self):
        return self._name

    @name.setter # when you do cat.name = x, it will call this function
    def name(self, name):
        """ Make the name uppercase when setting it """
        self._name = name.upper()
</snippet></ROW><ROW><id>5316085</id><snippet>c = Cat('billy')
print c.name
# BILLY
c.name = 'kit'
print c.name
# KIT
</snippet></ROW><ROW><id>5316267</id><snippet>from subprocess import check_call
check_call(['dot','-Tpng','InputFile.dot','-o','OutputFile.png'])
</snippet></ROW><ROW><id>5316332</id><snippet>import threading, time

def wrapper(func, args, res):
    res.append(func(*args))

res = []
t = threading.Thread(target=wrapper, args=(findcluster, (companyid,), res))
t.start()
while t.is_alive():
    # print next iteration of ASCII spinner
    t.join(0.2)
print res[0]
</snippet></ROW><ROW><id>5316753</id><snippet>for sub in the_list:
    for key in sub:
        sub[key] = int(sub[key])
</snippet></ROW><ROW><id>5317094</id><snippet>for item in bases:
    print item
    return get_bases(item)
</snippet></ROW><ROW><id>5317094</id><snippet>for item in bases:
    print item
    get_bases(item)
</snippet></ROW><ROW><id>5317094</id><snippet>class Node(object):
    def __init__(self, item, children):
        self.item = item
        self.children = children

def get_class_tree(klass):
    bases = getattr(klass, '__bases__')
    return Node(klass, [get_class_tree(item) for item in bases])

def pprint_node(node, level=0):
    print ("  "*level) + str(node.item)
    for child in node.children:
        pprint_node(child, level+1)
</snippet></ROW><ROW><id>5317611</id><snippet>bzr</snippet></ROW><ROW><id>5317611</id><snippet>svn</snippet></ROW><ROW><id>5317611</id><snippet>hg</snippet></ROW><ROW><id>5317611</id><snippet>git</snippet></ROW><ROW><id>5317611</id><snippet>git</snippet></ROW><ROW><id>5317611</id><snippet>git</snippet></ROW><ROW><id>5318273</id><snippet>def model(self):
    return "{0}.{1}".format(self._meta.app_label, self._meta.object_name).lower()
</snippet></ROW><ROW><id>5318273</id><snippet>fields = ('id', 'model')
</snippet></ROW><ROW><id>5318286</id><snippet>boost::python::scope().attr("Pi") = Pi; 
</snippet></ROW><ROW><id>5318567</id><snippet>_no_related_name_counter = 0
def no_related_name():
    _no_related_name_counter += 1
    return "_norn_%%(class)s_%i" % _no_related_name_counter

ForeignKey(..., related_name=no_related_name())
</snippet></ROW><ROW><id>5318567</id><snippet>(\s*(\w+)\s*=\s*models\.ForeignKey\(.*)\)(\s*)$</snippet></ROW><ROW><id>5318567</id><snippet>$1, related_name="%(class)s_$2_reverse")$3</snippet></ROW><ROW><id>5318647</id><snippet>x</snippet></ROW><ROW><id>5318647</id><snippet>select a.*, b.*
from x as a
inner join x as b
  on a.filename&lt;b.filename
    and a.value2 = b.value2
        and a.value3 = b.value3
        and a.value4 = b.value4
union all
select a.*, b.*
from x as a
left join x as b
  on a.filename!=b.filename
        and a.value2 = b.value2
        and a.value3 = b.value3
        and a.value4 = b.value4
where b.filename is null
  and a.filename = (select min(filename) from x)
union all
select b.*, a.*
from x as a
left join x as b
  on a.filename!=b.filename
        and a.value2 = b.value2
        and a.value3 = b.value3
        and a.value4 = b.value4
where b.filename is null
  and a.filename = (select max(filename) from x)
</snippet></ROW><ROW><id>5318647</id><snippet>min(filename)</snippet></ROW><ROW><id>5318647</id><snippet>max(filename)</snippet></ROW><ROW><id>5318852</id><snippet>import urllib2
import json

url = 'http://api.twitter.com/1/trends/44418.json'

# download the json string
json_string = urllib2.urlopen(url).read()

# de-serialize the string so that we can work with it
the_data = json.loads(json_string)

# get the list of trends
trends = the_data[0]['trends']

# print the name of each trend
for trend in trends:
    print trend['name']
</snippet></ROW><ROW><id>5318852</id><snippet>names = [trend['name'] for trend in the_data[0]['trends']]

for name in names:
    print name
</snippet></ROW><ROW><id>5318852</id><snippet>json.loads()</snippet></ROW><ROW><id>5318867</id><snippet>InitialCaps</snippet></ROW><ROW><id>5318867</id><snippet>lower_case</snippet></ROW><ROW><id>5318867</id><snippet>__init__</snippet></ROW><ROW><id>5318867</id><snippet>__unicode__</snippet></ROW><ROW><id>5318933</id><snippet>super()</snippet></ROW><ROW><id>5318933</id><snippet>super()</snippet></ROW><ROW><id>5318933</id><snippet>super()</snippet></ROW><ROW><id>5318933</id><snippet>class Foo(object):
    def __init__(self):
        print 'Foo'

class Bar(Foo):
    def __init__(self):
        print 'Bar'
        super(Bar, self).__init__()

class Baz(Bar):
    def __init__(self):
        print 'Baz'
        super(Baz, self).__init__()
</snippet></ROW><ROW><id>5319118</id><snippet>import time
import threading

class Worker(threading.Thread):
    def __init__(self, stopper):
        threading.Thread.__init__(self)
        self.stopper = stopper

    def run(self):
        while not self.stopper.is_set():
            print 'Hello from Worker!'
            time.sleep(1)

stop = threading.Event()
worker = Worker(stop)
worker.start()

# ...

stop.set()
</snippet></ROW><ROW><id>5319206</id><snippet>import MySQLdb
db = MySQLdb.connect(host="host", user="username", passwd="your-pass", db="the-db-name")
</snippet></ROW><ROW><id>5319206</id><snippet>cursor = db.cursor()
max_age = 42
cursor.execute("""SELECT name FROM employees WHERE age &lt; %s""", (max_age,))
print cursor.fetchone()
</snippet></ROW><ROW><id>5319378</id><snippet>np.sum()</snippet></ROW><ROW><id>5319378</id><snippet>np.nansum()</snippet></ROW><ROW><id>5319378</id><snippet>return 0.5 * np.nansum(((array1 - array2) ** 2) / (array1 + array2))
</snippet></ROW><ROW><id>5319378</id><snippet>np.nansum()</snippet></ROW><ROW><id>5319378</id><snippet>nan</snippet></ROW><ROW><id>5319451</id><snippet>easy_install -Z zopepackage.egg
</snippet></ROW><ROW><id>5319457</id><snippet>httplib.HTTPSConnection('127.0.0.1', 443)</snippet></ROW><ROW><id>5319519</id><snippet>now = datetime.datetime.now()
now_frmt = now - datetime.timedelta(microseconds=now.microsecond)
</snippet></ROW><ROW><id>5319519</id><snippet>now = datetime.datetime.now()
delta = (0 if now.microsecond &lt; 500000 else 1000000) - now.microsecond
now_frmt = now + datetime.timedelta(microseconds=delta)
</snippet></ROW><ROW><id>5319578</id><snippet>#: Documentation for my_field.  You can
#: use one or more lines as well.
my_field = "something"
</snippet></ROW><ROW><id>5319578</id><snippet>conf.py</snippet></ROW><ROW><id>5319578</id><snippet>extensions = ["sphinx.ext.autodoc"]</snippet></ROW><ROW><id>5319578</id><snippet>#:</snippet></ROW><ROW><id>5319578</id><snippet>.. automodule::</snippet></ROW><ROW><id>5319578</id><snippet>my_project/
    package/
        __init__.py
        ...
    doc/
        build/
            ...
        source/
            conf.py
            ...
</snippet></ROW><ROW><id>5319578</id><snippet>/my_package</snippet></ROW><ROW><id>5319578</id><snippet>package</snippet></ROW><ROW><id>5319578</id><snippet>conf.py</snippet></ROW><ROW><id>5319578</id><snippet>import sys, os   # I believe conf.py already imports sys,
import os.path   # os, and os.path.  But just in case, I
                 # list it here.

sys.path.insert(0, os.path.abspath(os.path.join('..','..')))
</snippet></ROW><ROW><id>5319578</id><snippet>./../..</snippet></ROW><ROW><id>5319578</id><snippet>my_project</snippet></ROW><ROW><id>5319605</id><snippet>\\\\n</snippet></ROW><ROW><id>5319605</id><snippet>\\n</snippet></ROW><ROW><id>5319605</id><snippet>r</snippet></ROW><ROW><id>5319605</id><snippet>regex = re.compile(r"""&lt;entry&gt;\\n&lt;(\w+)&gt;(.+?)&lt;/\w+&gt;\\n&lt;/entry&gt;""")
</snippet></ROW><ROW><id>5319682</id><snippet>4</snippet></ROW><ROW><id>5319682</id><snippet>0</snippet></ROW><ROW><id>5319682</id><snippet>4</snippet></ROW><ROW><id>5319682</id><snippet>def roll_die():
    return random.randint(1,6)
</snippet></ROW><ROW><id>5319934</id><snippet>import networkx as nx
G = nx.Graph()
G.add_node(1)
G.add_nodes_from('spam')
print G.nodes()
</snippet></ROW><ROW><id>5319934</id><snippet>['a', 1, 's', 'm', 'p']
</snippet></ROW><ROW><id>5319934</id><snippet>start = 1
G = nx.convert_node_labels_to_integers(G,first_label=start)
print G.nodes()
</snippet></ROW><ROW><id>5319934</id><snippet>[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>5319942</id><snippet>if word in mystring: 
   print 'success'
</snippet></ROW><ROW><id>5319969</id><snippet>User</snippet></ROW><ROW><id>5319969</id><snippet>correct</snippet></ROW><ROW><id>5319969</id><snippet>__init__.py</snippet></ROW><ROW><id>5319969</id><snippet>from django.contrib.auth.models import User

def validate_for_fs(value): # &lt;-- If the value string doesn't meet a condition required to be a name on the filesystem then throw a ValidationError
    if foo_condition_not_met:
        raise ValidationError(u'foo is not true for %s' % value)
    if bar_condition_not_met:
        raise ValidationError(u'bar is not true for %s' % value)

for field in [f for f in User._meta.fields if f.name in ['first_name','last_name','email']]:
    field.validators.append(validate_for_fs)
</snippet></ROW><ROW><id>5320085</id><snippet>json</snippet></ROW><ROW><id>5320085</id><snippet>simplejson</snippet></ROW><ROW><id>5320085</id><snippet>load</snippet></ROW><ROW><id>5320085</id><snippet>def foo_view(request):
    ....
    decoded_json = json.loads(json_string)
    return render_to_response('foo.html',{'results':decoded_json['Result']})
</snippet></ROW><ROW><id>5320085</id><snippet>&lt;ul id="results"&gt;
     {% for result in results %}
     &lt;li&gt;Result{{ forloop.counter }}: {{ result.URL }}, {{ result.PlaylistID }}, {{ result.Name }} ...&lt;/li&gt;
     {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>5320085</id><snippet>Results</snippet></ROW><ROW><id>5320218</id><snippet>a = {'b':0}
</snippet></ROW><ROW><id>5320218</id><snippet>a = dict([('b',0)])
</snippet></ROW><ROW><id>5320218</id><snippet>a = dict.fromkeys(['b'], 0)
</snippet></ROW><ROW><id>5320218</id><snippet>a = {}
b = {'b':0}
a.update(b)
</snippet></ROW><ROW><id>5320218</id><snippet>a = {}
a.__setitem__('b',0)
</snippet></ROW><ROW><id>5320568</id><snippet>select</snippet></ROW><ROW><id>5320568</id><snippet>epoll</snippet></ROW><ROW><id>5320568</id><snippet>kqueue</snippet></ROW><ROW><id>5320568</id><snippet>fork</snippet></ROW><ROW><id>5320627</id><snippet>re</snippet></ROW><ROW><id>5320627</id><snippet>finditer</snippet></ROW><ROW><id>5320627</id><snippet>format = r"\:(.*)\:\`(.*)\`"
patt = re.compile(format, re.I|re.U)
for m in patt.finditer(l.rstrip()):
    tag, value = m.groups()
    ....
</snippet></ROW><ROW><id>5320627</id><snippet>.*</snippet></ROW><ROW><id>5320627</id><snippet>.*</snippet></ROW><ROW><id>5320627</id><snippet>finditer</snippet></ROW><ROW><id>5320849</id><snippet>a= {'u': lambda x: Unicode(x,'utf-8')}
</snippet></ROW><ROW><id>5320849</id><snippet>a= {'u':"def u(str):return Unicode(str,'utf-8')",}
</snippet></ROW><ROW><id>5320849</id><snippet>exec(a['u'])
</snippet></ROW><ROW><id>5320868</id><snippet>range(start, stop, jump)
</snippet></ROW><ROW><id>5320868</id><snippet>range(10, 1, -2)
</snippet></ROW><ROW><id>5320868</id><snippet>[10, 8, 6, 4, 2]
</snippet></ROW><ROW><id>5320888</id><snippet>class A:
    def u(x):
        return x*x
    def b():
        return self.u(5)
a = A()
</snippet></ROW><ROW><id>5320888</id><snippet>a = {'u': lambda x: x*x}
a['b'] = a['u'](5)
</snippet></ROW><ROW><id>5320888</id><snippet>self</snippet></ROW><ROW><id>5320895</id><snippet>seq = [x['the_key'] for x in dict_list]
min(seq)
max(seq)
</snippet></ROW><ROW><id>5320895</id><snippet>int</snippet></ROW><ROW><id>5320895</id><snippet>import sys

lo,hi = sys.maxint,-sys.maxint-1
for x in (item['the_key'] for item in dict_list):
    lo,hi = min(x,lo),max(x,hi)
</snippet></ROW><ROW><id>5320927</id><snippet>keys = mydict.keys(); keys.sort()</snippet></ROW><ROW><id>5320952</id><snippet>1,2,3</snippet></ROW><ROW><id>5320952</id><snippet>"1,2,3"</snippet></ROW><ROW><id>5320952</id><snippet>"1</snippet></ROW><ROW><id>5320974</id><snippet>print("Location:http://newurl.com/foobar")
print # to end the CGI response headers.
</snippet></ROW><ROW><id>5321014</id><snippet>import hashlib, random, datetime, os, shutil
# model to hold link info. has these fields: key (charfield), filepath (filepathfield)
# datetime (datetimefield), url (charfield), orgpath (filepathfield of the orignal path
# or a foreignkey to the files model.
from models import MyDlLink 
# settings.py for the app
from myapp import settings as myapp_settings

# full path and name of file to dl.
def genUrl(filepath):
  # create a onetime salt for randomness
  salt = ''.join(['{0}'.format(random.randrange(10) for i in range(10)])
  key = hashlib('{0}{1}'.format(salt, filepath).hexdigest()
  newpath = os.path.join(myapp_settings.DL_ROOT, key)
  shutil.copy2(fname, newpath)
  newlink = MyDlink()
  newlink.key = key
  newlink.date = datetime.datetime.now()
  newlink.orgpath = filepath
  newlink.newpath = newpath
  newlink.url = "{0}/{1}/{2}".format(myapp_settings.DL_URL, key, os.path.basename(fname))

  newlink.save()
  return newlink


# in commands
def check_url_expired():
  maxage = datetime.timedelta(days=7)
  now = datetime.datetime.now()
  for link in MyDlink.objects.all():
     if(now - link.date) &gt; maxage:
       os.path.remove(link.newpath)
           link.delete()
</snippet></ROW><ROW><id>5321090</id><snippet>__init__</snippet></ROW><ROW><id>5321090</id><snippet>__new__</snippet></ROW><ROW><id>5321090</id><snippet>except</snippet></ROW><ROW><id>5321382</id><snippet>markevery</snippet></ROW><ROW><id>5321382</id><snippet>stride = max( int(len(x) / 20), 1)
plt.plot(x,wave,"-o",color='forestgreen', markevery=stride)
</snippet></ROW><ROW><id>5321480</id><snippet>pytz</snippet></ROW><ROW><id>5321480</id><snippet>import datetime, pytz
zoneName = 'America/New_York'
now = datetime.datetime.now(pytz.timezone(zoneName))
</snippet></ROW><ROW><id>5321480</id><snippet>datetime.datetime(2011, 3, 16, 1, 39, 33, 87375, tzinfo=&lt;DstTzInfo 'America/New_York' EDT-1 day, 20:00:00 DST&gt;)
</snippet></ROW><ROW><id>5321505</id><snippet>targetName</snippet></ROW><ROW><id>5321505</id><snippet>executables = [Executable(targetName="myexecutable.exe")]
</snippet></ROW><ROW><id>5321771</id><snippet>keyid</snippet></ROW><ROW><id>5321771</id><snippet>channel.send_message(keyid,message_string)
</snippet></ROW><ROW><id>5321771</id><snippet>token = channel.create_channel(keyid)
</snippet></ROW><ROW><id>5321771</id><snippet>token</snippet></ROW><ROW><id>5321771</id><snippet>send_message()</snippet></ROW><ROW><id>5321771</id><snippet>logging.info()</snippet></ROW><ROW><id>5321771</id><snippet>keyid</snippet></ROW><ROW><id>5321771</id><snippet>token</snippet></ROW><ROW><id>5321771</id><snippet>console.log()</snippet></ROW><ROW><id>5321771</id><snippet>token</snippet></ROW><ROW><id>5321837</id><snippet>import time
print time.timezone
</snippet></ROW><ROW><id>5322203</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class paletteTableview(QAbstractTableModel):
    def __init__(self, test_data, parent=None):
        super(paletteTableview, self).__init__(parent)
        self.__test_data = test_data

    def rowCount(self, parent):
        return len(self.__test_data)

    def columnCount(self, parent):
        return len(self.__test_data[0])

    def data(self,index,role):
        if role == Qt.DisplayRole:

            row = index.row()
            column = index.column()
            value = self.__test_data[row][column]
            return value


        if role == Qt.DecorationRole:
            row = index.row()
            column = index.column()

            value = self.__test_data[row][column]
            print "data:" , index.row() , index.column() , value
            #print value

            value = QColor(value)
            #print value
            pixmap = QPixmap(26,26)
            pixmap.fill(value)

            icon = QIcon(pixmap)
            return icon


class MainWindow(QMainWindow):
    def __init__( self  , parent = None ):
        super( MainWindow , self ).__init__(parent)

        self.tv = QTableView(self)
        self.dm = paletteTableview( data( 4 , 5 ) )
        self.tv.setModel( self.dm )
        self.setCentralWidget(self.tv)


def data(row,column):
    import random

    test_data = []
    temp_data= []
    for i in range(row):
        for j in range(column):
            temp_data.append( "#%06X" % random.randint( 0 , 0xFFFFFF ) )
        test_data.append(temp_data)
        temp_data = []
    return test_data


def main():
    app = QApplication(sys.argv)
    form = MainWindow()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>5322333</id><snippet>\</snippet></ROW><ROW><id>5322333</id><snippet>con = lite.connect('data\\noktalar.sdb')
</snippet></ROW><ROW><id>5322333</id><snippet>con = lite.connect(r'data\noktalar.sdb')
</snippet></ROW><ROW><id>5322494</id><snippet>fabric.api.run</snippet></ROW><ROW><id>5322494</id><snippet>combine_stderr=False</snippet></ROW><ROW><id>5322494</id><snippet>run('scons 2&gt;/dev/null')
</snippet></ROW><ROW><id>5322910</id><snippet>defer()</snippet></ROW><ROW><id>5322994</id><snippet>a = [a, b, c]
b = [1, 2, 3] 
</snippet></ROW><ROW><id>5322994</id><snippet>dict(zip(a, b))
</snippet></ROW><ROW><id>5322994</id><snippet>{'a': '1', 'b': '2', 'c': '3'}
</snippet></ROW><ROW><id>5323248</id><snippet>foreach path in xpathlist
  find entries for path for both xml1 and xml2
  foreach entry in xmlentries1
    dict1[path#entry.value]++
  foreach entry in xmlentries2
    dict2[path#entry.value]++

  if dict1 and dict2 are not equal
    return false
return true
</snippet></ROW><ROW><id>5323290</id><snippet>sys.path.append('/%s/data/misc/django'%ROOT_2_DATA)
</snippet></ROW><ROW><id>5323902</id><snippet>In []: ti= triu_indices(5, 1)
In []: r, c= ti[0][5], ti[1][5]
In []: r, c
Out[]: (1, 3)
</snippet></ROW><ROW><id>5323902</id><snippet>In []: def f(n, c):
   ..:     n= ceil(sqrt(2* n))
   ..:     ti= triu_indices(n, 1)
   ..:     return ti[0][c]+ 1, ti[1][c]+ 1
   ..:
In []: f(len(c), 5)
Out[]: (2, 4)
</snippet></ROW><ROW><id>5323989</id><snippet>AnimalHandler</snippet></ROW><ROW><id>5323989</id><snippet>fields</snippet></ROW><ROW><id>5324161</id><snippet>c</snippet></ROW><ROW><id>5324161</id><snippet>sum(1,2)</snippet></ROW><ROW><id>5324161</id><snippet>c</snippet></ROW><ROW><id>5324161</id><snippet>def outer():
    y = 0
    def inner():
        nonlocal y
        y += 1
        return y
    return inner

f = outer() 
print(f(), f(), f()) #prints 1 2 3
</snippet></ROW><ROW><id>5324269</id><snippet>(?!pattern)</snippet></ROW><ROW><id>5324269</id><snippet>(?!...)</snippet></ROW><ROW><id>5324269</id><snippet>(?!\S+:)\S+</snippet></ROW><ROW><id>5324269</id><snippet>regex = re.compile(r'''
    [\S]+:                # a key (any word followed by a colon)
    (?:
    \s                    # then a space in between
        (?!\S+:)\S+       # then a value (any word not followed by a colon)
    )+                    # match multiple values if present
    ''', re.VERBOSE)

matches = regex.findall(my_str)
</snippet></ROW><ROW><id>5324269</id><snippet>['key1: val1-words ', 'key2: val2-words ', 'key3: val3-words']
</snippet></ROW><ROW><id>5324269</id><snippet>for match in matches:
    print match
</snippet></ROW><ROW><id>5324269</id><snippet>key1: val1-words
key2: val2-words
key3: val3-words
</snippet></ROW><ROW><id>5324269</id><snippet>Thème: O sombres héros 
Contraintes: sous titrés 
Author: nicoalabdou 
Tags: wakatanka productions court métrage kino session humour cantat bertrand noir désir sombres héros mer medine marie trintignant femme droit des femmes nicoalabdou pute soumise 
Posted: 06 June 2009 
Rating: 1.3 
Votes: 3
</snippet></ROW><ROW><id>5324269</id><snippet>pairs = dict([match.split(':', 1) for match in matches])
</snippet></ROW><ROW><id>5324483</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>5324483</id><snippet>Tex2.get("1.0",END)</snippet></ROW><ROW><id>5324483</id><snippet>("1.0","end-1c")</snippet></ROW><ROW><id>5324586</id><snippet>all((arr[:,:,x].T==arr[:,:,x]).all() for x in range(arr.shape[2]))
</snippet></ROW><ROW><id>5324586</id><snippet>(arr.transpose(1, 0, 2) == arr).all()
</snippet></ROW><ROW><id>5324660</id><snippet>itertools.product()</snippet></ROW><ROW><id>5324660</id><snippet>a=frange(0,1.0,0.01)
for z in itertools.product(a, repeat=n):
    calculate(*z)
</snippet></ROW><ROW><id>5324660</id><snippet>n</snippet></ROW><ROW><id>5324660</id><snippet>30</snippet></ROW><ROW><id>5324660</id><snippet>100**30 = 10**60</snippet></ROW></DATA>