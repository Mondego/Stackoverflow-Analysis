<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>10806699</id><snippet>for i, pinName in enumerate(allPorts[startIndex:endIndex]):
    ...
</snippet></ROW><ROW><id>10806699</id><snippet>enumerate()</snippet></ROW><ROW><id>10806913</id><snippet>import collections
letters = collections.Counter('google')
</snippet></ROW><ROW><id>10806913</id><snippet>import collections
letters = collections.defaultdict(int)
for letter in word:
    letters[letter] += 1
</snippet></ROW><ROW><id>10806947</id><snippet>import numpy as np

N = 100
b = np.random.random_integers(-2000,2000,size=(N,N))
b_symm = (b + b.T)/2
</snippet></ROW><ROW><id>10806947</id><snippet>np.random</snippet></ROW><ROW><id>10807121</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = '{text1} {stringA} {text2} {stringB} {text3}'
&gt;&gt;&gt; re.sub(r'(stringA)(.*)(stringB)', r'\3\2\1', text)
'{text1} {stringB} {text2} {stringA} {text3}'
</snippet></ROW><ROW><id>10807121</id><snippet>stringA</snippet></ROW><ROW><id>10807121</id><snippet>stringB</snippet></ROW><ROW><id>10807121</id><snippet>re.escape()</snippet></ROW><ROW><id>10807121</id><snippet>&gt;&gt;&gt; stringA = 'John'
&gt;&gt;&gt; stringB = 'Tim'
&gt;&gt;&gt; regex = re.compile(r'(%s)(.*)(%s)' % (stringA, stringB))
&gt;&gt;&gt; regex.sub(r'\3\2\1', "I told John to give the bag to Tim.")
'I told Tim to give the bag to John.'
&gt;&gt;&gt; regex.sub(r'\3\2\1', "John said hello to Tim.")
'Tim said hello to John.'
&gt;&gt;&gt; regex.sub(r'\3\2\1', "John!h9aghagTim")
'Tim!h9aghagJohn'
</snippet></ROW><ROW><id>10807158</id><snippet>import requests
import BeautifulSoup

session = requests.session()

req = session.get('http://stackoverflow.com/questions/10807081/script-to-extract-data-from-wbpage')

doc = BeautifulSoup.BeautifulSoup(req.content)

print doc.findAll('a', { "class" : "gp-share" })
</snippet></ROW><ROW><id>10807204</id><snippet>time.strftime()</snippet></ROW><ROW><id>10807204</id><snippet>%T</snippet></ROW><ROW><id>10807204</id><snippet>%H:%M:%S</snippet></ROW><ROW><id>10807437</id><snippet>self</snippet></ROW><ROW><id>10807437</id><snippet>self</snippet></ROW><ROW><id>10807718</id><snippet>{% url description_url "blabla" %}
</snippet></ROW><ROW><id>10807976</id><snippet>multiprocessing.Manager().dict()</snippet></ROW><ROW><id>10807976</id><snippet>dict</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet>&gt;&gt;&gt; d = multiprocessing.Manager().dict()
&gt;&gt;&gt; d
&lt;DictProxy object, typeid 'dict' at 0x7fa2bbe8ea50&gt;
</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet>dict</snippet></ROW><ROW><id>10807976</id><snippet>dict</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet>setdefault()</snippet></ROW><ROW><id>10807976</id><snippet>&gt;&gt;&gt; d['foo'] = []
&gt;&gt;&gt; foo = d['foo']
&gt;&gt;&gt; id(d['foo'])
140336914055536
&gt;&gt;&gt; id(foo)
140336914056184
</snippet></ROW><ROW><id>10807976</id><snippet>d['foo']</snippet></ROW><ROW><id>10807976</id><snippet>foo</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet># create a list proxy and append a mutable object (a dictionary)
lproxy = manager.list()
lproxy.append({})
# now mutate the dictionary
d = lproxy[0]
d['a'] = 1
d['b'] = 2
# at this point, the changes to d are not yet synced, but by
# reassigning the dictionary, the proxy is notified of the change
lproxy[0] = d
</snippet></ROW><ROW><id>10807976</id><snippet>DictProxy</snippet></ROW><ROW><id>10807976</id><snippet># d.setdefault('foo', []).append({'bar': 'baz'})
d['foo'] = d.get('foo', []) + [{'bar': 'baz'}]
</snippet></ROW><ROW><id>10807976</id><snippet>get()</snippet></ROW><ROW><id>10807976</id><snippet>setdefault()</snippet></ROW><ROW><id>10808021</id><snippet>any</snippet></ROW><ROW><id>10808021</id><snippet>all</snippet></ROW><ROW><id>10808021</id><snippet>if all(x == 1 for x in a, b, c, d):

if any(x == 1 for x in a, b, c, d):
</snippet></ROW><ROW><id>10808021</id><snippet>if any(x == 1 for x in states):
</snippet></ROW><ROW><id>10808021</id><snippet>if a == b == c == d == 1:
</snippet></ROW><ROW><id>10808021</id><snippet>in</snippet></ROW><ROW><id>10808021</id><snippet>if 1 in states:
</snippet></ROW><ROW><id>10808021</id><snippet>if any(flags):

if all(flags):
</snippet></ROW><ROW><id>10808082</id><snippet>fromtimestamp</snippet></ROW><ROW><id>10808167</id><snippet>taglist = set()
for d in docs:
    taglist |= set(d["tags"])
taglist = list(taglist)
</snippet></ROW><ROW><id>10808167</id><snippet>from itertools import chain
taglist = list(set(chain(*(d["tags"] for d in docs))))
</snippet></ROW><ROW><id>10808167</id><snippet>from itertools import chain
taglist = list(set(chain.from_iterable(d["tags"] for d in docs)))
</snippet></ROW><ROW><id>10808167</id><snippet>import operator
taglist = list(reduce(operator.or_, (set(d["tags"]) for d in docs)))
</snippet></ROW><ROW><id>10808168</id><snippet>def highscore(filename):
    try:
        text_file = open (filename, "r")
</snippet></ROW><ROW><id>10808168</id><snippet>try</snippet></ROW><ROW><id>10808168</id><snippet>def highscore(filename):
    if not os.path.isfile(filename):
        return 0
    with open(filename, 'r') as f:
        return int(f.read())
</snippet></ROW><ROW><id>10808168</id><snippet>def highscore(filename):
    try:
        with open(filename, 'r') as f:
            return int(f.read())
    except:
        return 0
</snippet></ROW><ROW><id>10808832</id><snippet>split</snippet></ROW><ROW><id>10808832</id><snippet>&gt;&gt;&gt; "foo bar asdf".split(' ')
['foo', 'bar', 'asdf']
</snippet></ROW><ROW><id>10808832</id><snippet>.split()</snippet></ROW><ROW><id>10808919</id><snippet>print "let's talk about this %s" % my_name
print "let's talk about this {:s}".format(my_name)
print "let's talk about this", my_name
</snippet></ROW><ROW><id>10808919</id><snippet>%</snippet></ROW><ROW><id>10808919</id><snippet>print</snippet></ROW><ROW><id>10808919</id><snippet>()</snippet></ROW><ROW><id>10809027</id><snippet>def read(str)
</snippet></ROW><ROW><id>10809027</id><snippet>:</snippet></ROW><ROW><id>10809027</id><snippet>strng</snippet></ROW><ROW><id>10809036</id><snippet>exec</snippet></ROW><ROW><id>10809036</id><snippet>echo</snippet></ROW><ROW><id>10809036</id><snippet>&lt;body&gt;

    &lt;p&gt;Hello! Here is a message: &lt;?php echo exec('python hello.py'); ?&gt;&lt;/p&gt;

&lt;/body&gt;
</snippet></ROW><ROW><id>10809204</id><snippet>__init__</snippet></ROW><ROW><id>10809204</id><snippet>a().data # data is a member of an instance of class `a`
</snippet></ROW><ROW><id>10809204</id><snippet>a.data   # data is not a member of the `a` class
</snippet></ROW><ROW><id>10809204</id><snippet>__init__</snippet></ROW><ROW><id>10809204</id><snippet>a</snippet></ROW><ROW><id>10809204</id><snippet>a()</snippet></ROW><ROW><id>10809204</id><snippet>__init__</snippet></ROW><ROW><id>10809204</id><snippet>a</snippet></ROW><ROW><id>10809211</id><snippet>for</snippet></ROW><ROW><id>10809211</id><snippet>table</snippet></ROW><ROW><id>10809211</id><snippet>a</snippet></ROW><ROW><id>10809211</id><snippet>table[:,0]</snippet></ROW><ROW><id>10809211</id><snippet>a</snippet></ROW><ROW><id>10809211</id><snippet> starts = table[:,0] == 1
 ends = table[:,0] == -1
 for start, end in zip(starts.nonzero()[0], ends.nonzero()[0]):
     table[start:end+1,2] = table[start,1]
</snippet></ROW><ROW><id>10809333</id><snippet>import sys  # probably near the top of the file
sys.stdout.flush()  # after printing
</snippet></ROW><ROW><id>10809450</id><snippet>source = tmp[start:]
</snippet></ROW><ROW><id>10809450</id><snippet>source</snippet></ROW><ROW><id>10809450</id><snippet>source</snippet></ROW><ROW><id>10809450</id><snippet>for i, e in enumerate(source):
   ...
</snippet></ROW><ROW><id>10809450</id><snippet>source[lasti+1:i]</snippet></ROW><ROW><id>10809450</id><snippet>lasti</snippet></ROW><ROW><id>10809515</id><snippet>&gt;&gt;&gt; lst = ['food', 'dinner', 'pasta', 'white sauce', 'fetucci alfredo']
&gt;&gt;&gt; for i in range(len(lst)):
...   print lst[:i+1]
... 
['food']
['food', 'dinner']
['food', 'dinner', 'pasta']
['food', 'dinner', 'pasta', 'white sauce']
['food', 'dinner', 'pasta', 'white sauce', 'fetucci alfredo']
</snippet></ROW><ROW><id>10809515</id><snippet>lst[:i+1]</snippet></ROW><ROW><id>10809515</id><snippet>d = mydict
for index in lst[:i+1]:
  d = d[index]
</snippet></ROW><ROW><id>10809554</id><snippet>and</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>or</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>and</snippet></ROW><ROW><id>10809554</id><snippet>False</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>or</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>if people == cats or dogs == cats:
    print "this is too hard"
</snippet></ROW><ROW><id>10809554</id><snippet>people == cats</snippet></ROW><ROW><id>10809554</id><snippet>dogs == cats</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>if</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>if</snippet></ROW><ROW><id>10809554</id><snippet>False</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>dogs</snippet></ROW><ROW><id>10809554</id><snippet>30</snippet></ROW><ROW><id>10809554</id><snippet>dogs == cats</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809554</id><snippet>True</snippet></ROW><ROW><id>10809612</id><snippet>'views.calender_resource'</snippet></ROW><ROW><id>10809612</id><snippet>'calender_resource'</snippet></ROW><ROW><id>10809612</id><snippet>urlpatterns = patterns('',

    url(r'^calendar/(?P&lt;id&gt;\d+)/(?P&lt;year&gt;\d+)/(?P&lt;month&gt;\d+)/$', 'APP_NAME.views.calendar_resource'),
)
</snippet></ROW><ROW><id>10809612</id><snippet>urlpatterns = patterns('APP_NAME.views',

    url(r'^calendar/(?P&lt;id&gt;\d+)/(?P&lt;year&gt;\d+)/(?P&lt;month&gt;\d+)/$', 'calendar_resource'),
)
</snippet></ROW><ROW><id>10809612</id><snippet>url(regex, view, kwargs=None, name=None, prefix='')
</snippet></ROW><ROW><id>10809612</id><snippet>urlpatterns = patterns('',
    url(r'^index/$', index_view, name="main-view"),
    ...
)
</snippet></ROW><ROW><id>10809612</id><snippet>url(regex, view, kwargs=None, name=None, prefix='')
</snippet></ROW><ROW><id>10809723</id><snippet>re.escape()</snippet></ROW><ROW><id>10809723</id><snippet>&gt;&gt;&gt; re.escape("C++ Developer")
'C\\+\\+\\ Developer'
&gt;&gt;&gt; re.escape(r'\+*.][')
'\\\\\\+\\*\\.\\]\\['
</snippet></ROW><ROW><id>10809757</id><snippet>starts = [4, 15]
stops = [9, 20]
data_array = [0,0,0,10,20,50,40,30,10,0,0,0,0,0,10,20,50,40,30,10,0,0]
segments = [ data_array[starts[i] - 1: stops[i]  ]  for i in range( len(starts) ) ]
</snippet></ROW><ROW><id>10809757</id><snippet>&gt;&gt;&gt; segments
[[10, 20, 50, 40, 30, 10], [10, 20, 50, 40, 30, 10]]
</snippet></ROW><ROW><id>10809757</id><snippet>&gt;&gt;&gt;segments[0]
[10, 20, 50, 40, 30, 10]
</snippet></ROW><ROW><id>10809757</id><snippet>itertools.islice</snippet></ROW><ROW><id>10809757</id><snippet>itertools.chain</snippet></ROW><ROW><id>10809757</id><snippet>numpy.fromiter</snippet></ROW><ROW><id>10810304</id><snippet>case COMPARE_OP:
    w = POP();
    v = TOP();
    if (PyInt_CheckExact(w) &amp;&amp; PyInt_CheckExact(v)) {
        /* INLINE: cmp(int, int) */
        register long a, b;
        register int res;
        a = PyInt_AS_LONG(v);
        b = PyInt_AS_LONG(w);
        switch (oparg) {
        case PyCmp_LT: res = a &lt;  b; break;
        case PyCmp_LE: res = a &lt;= b; break;
        case PyCmp_EQ: res = a == b; break;
        case PyCmp_NE: res = a != b; break;
        case PyCmp_GT: res = a &gt;  b; break;
        case PyCmp_GE: res = a &gt;= b; break;
        case PyCmp_IS: res = v == w; break;
        case PyCmp_IS_NOT: res = v != w; break;
        default: goto slow_compare;
        }
        x = res ? Py_True : Py_False;
        Py_INCREF(x);
    }
    else {
      slow_compare:
        x = cmp_outcome(oparg, v, w);
    }
</snippet></ROW><ROW><id>10810304</id><snippet>__cmp__</snippet></ROW><ROW><id>10810304</id><snippet>Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("2 &lt; 1")
0.06980299949645996
</snippet></ROW><ROW><id>10810304</id><snippet>Python 3.2.3 (v3.2.3:3d0686d90f55, Apr 10 2012, 11:25:50) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("2 &lt; 1")
0.06682920455932617
</snippet></ROW><ROW><id>10810304</id><snippet>operator</snippet></ROW><ROW><id>10810304</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; operator.gt(2,1)
True
</snippet></ROW><ROW><id>10810545</id><snippet>super()</snippet></ROW><ROW><id>10810545</id><snippet>fset()</snippet></ROW><ROW><id>10810545</id><snippet>__set__()</snippet></ROW><ROW><id>10810545</id><snippet>fset()</snippet></ROW><ROW><id>10810545</id><snippet>super()</snippet></ROW><ROW><id>10810952</id><snippet>returnTest</snippet></ROW><ROW><id>10810952</id><snippet>In [2]: x = Test()

In [3]: y = x.returnTest()

In [4]: y
Out[4]: &lt;__main__.Test instance at 0x1e36ef0&gt;

In [5]: 
</snippet></ROW><ROW><id>10811553</id><snippet>os.path</snippet></ROW><ROW><id>10811553</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>10811553</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>10811553</id><snippet>import os.path

def get_parents(path):
    parents = []
    path = os.path.normpath(path)
    while path:
        parents.insert(0, path)
        if path == '/':
            path = ''
        else:
            path = os.path.dirname(path)

    return parents

&gt;&gt;&gt; print get_parents('')
['.']
&gt;&gt;&gt; print get_parents('/')
['/']
&gt;&gt;&gt; print get_parents('/////')
['/']
&gt;&gt;&gt; print get_parents('/home/marx/Documents/papers/communism')
['/', '/home', '/home/marx', '/home/marx/Documents', '/home/marx/Documents/papers', '/home/marx/Documents/papers/communism']
&gt;&gt;&gt; print get_parents('/home/marx/Documents/papers/communism/')
['/', '/home', '/home/marx', '/home/marx/Documents', '/home/marx/Documents/papers', '/home/marx/Documents/papers/communism']
&gt;&gt;&gt; print get_parents('////home/marx////Documents/papers/communism/////')
['/', '/home', '/home/marx', '/home/marx/Documents', '/home/marx/Documents/papers', '/home/marx/Documents/papers/communism']
&gt;&gt;&gt; print get_parents('home/marx////Documents/papers/communism/////')
['home', 'home/marx', 'home/marx/Documents', 'home/marx/Documents/papers', 'home/marx/Documents/papers/communism']
&gt;&gt;&gt; print get_parents('/home/marx////Documents/papers/communism/////../Das Kapital/')
['/', '/home', '/home/marx', '/home/marx/Documents', '/home/marx/Documents/papers', '/home/marx/Documents/papers/Das Kapital']
&gt;&gt;&gt; print get_parents('/home/marx////Documents/papers/communism/////../Das Kapital/')
['/', '/home', '/home/marx', '/home/marx/Documents', '/home/marx/Documents/papers', '/home/marx/Documents/papers/Das Kapital']
&gt;&gt;&gt; print get_parents('/home/marx////Documents/papers/communism/////../Das Kapital/../../../../../../')
['/']
</snippet></ROW><ROW><id>10811701</id><snippet>&gt;&gt;&gt; myl = [1,2,3]
&gt;&gt;&gt; myl[-1]
3
</snippet></ROW><ROW><id>10811963</id><snippet>from django.db import models
from django.db.models import signals

def create_badge(sender, instance, created, **kwargs):
    print "Post save emited for", instance

class BadgeCategory(models.Model):
    name = models.CharField(max_length=100)

class Badge(models.Model):

    name = models.CharField(max_length=16, help_text="Name for Badge")
    category = models.ForeignKey(BadgeCategory, help_text="Category for badge")
    description = models.CharField(max_length=32, help_text="A brief description")

signals.post_save.connect(create_badge, sender=Badge)
</snippet></ROW><ROW><id>10811963</id><snippet>In [1]: category = BadgeCategory(name='foo')

In [2]: category.save()

In [3]: badge = Badge(category=category, name='bar', description='test badge')

In [4]: badge.save()
Post save emited for Badge object
</snippet></ROW><ROW><id>10812102</id><snippet>def start_requests(self):
    for i in range(1, 101):
        yield Request(url='http://www.somesite.com/details.html?pageId={0}'.format(i), callback=self.my_callback)
</snippet></ROW><ROW><id>10812187</id><snippet>for i in elements[0:5]:
    print "Element was: %d" % i
</snippet></ROW><ROW><id>10812187</id><snippet>for i in elements[:5]:
    print "Element was: %d" % i
</snippet></ROW><ROW><id>10812284</id><snippet>while len(mylist) &gt; 0:
    print mylist.pop()
</snippet></ROW><ROW><id>10812284</id><snippet>while len(mylist) &gt; 0:
</snippet></ROW><ROW><id>10812284</id><snippet>while len(mylist):
</snippet></ROW><ROW><id>10812284</id><snippet>while mylist:
</snippet></ROW><ROW><id>10812538</id><snippet>&gt;&gt;&gt; a, (b, c) = None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not iterable
&gt;&gt;&gt; a, (b, c) = ('foo', None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object is not iterable
</snippet></ROW><ROW><id>10812598</id><snippet>gevent.joinall(your_greenlets)</snippet></ROW><ROW><id>10813261</id><snippet>for nodes in G:
    ff.write(random_egde)
    ff.write('\n')
</snippet></ROW><ROW><id>10813270</id><snippet>import time

start_time = time.time()
interval = 1
for i in range(20):
    time.sleep(start_time + i*interval - time.time())
    f()
</snippet></ROW><ROW><id>10813480</id><snippet>&gt;&gt;&gt; d = {'mean': 2, 'sum': 4, 'max': 6}
&gt;&gt;&gt; var1 = "max"
&gt;&gt;&gt; var2 = d[var1]
&gt;&gt;&gt; var2
6
</snippet></ROW><ROW><id>10813563</id><snippet>class ProfileResource(ModelResource):
    uname = fields.CharField(attribute='user__username', readonly=True)
    class Meta:
        queryset =ExProfile.objects.all()
        ....
</snippet></ROW><ROW><id>10813585</id><snippet>image.crop</snippet></ROW><ROW><id>10813585</id><snippet>br@ymir:~/temp$ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import Image
&gt;&gt;&gt; im=Image.open('self.jpg')
&gt;&gt;&gt; im.size
(180, 181)
&gt;&gt;&gt; box=(10,10,100,100)
&gt;&gt;&gt; im1=im.crop(box)
&gt;&gt;&gt; im1.show()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10813630</id><snippet>ip = IPNetwork('192.0.2.0/255.255.255.0')
print ip.prefixlen
</snippet></ROW><ROW><id>10813630</id><snippet>ip = IPNetwork('192.0.2.0/255.255.255.0')
list(ip)
</snippet></ROW><ROW><id>10813669</id><snippet>from django.core import context_processors
</snippet></ROW><ROW><id>10813928</id><snippet>BLUR</snippet></ROW><ROW><id>10813928</id><snippet>ImageFilter.Kernel</snippet></ROW><ROW><id>10813928</id><snippet>class BLUR(BuiltinFilter):
    name = "Blur"
    filterargs = (5, 5), 16, 0, (
        1,  1,  1,  1,  1,
        1,  0,  0,  0,  1,
        1,  0,  0,  0,  1,
        1,  0,  0,  0,  1,
        1,  1,  1,  1,  1
        )
</snippet></ROW><ROW><id>10813928</id><snippet>filterargs</snippet></ROW><ROW><id>10813928</id><snippet>size</snippet></ROW><ROW><id>10813928</id><snippet>scale</snippet></ROW><ROW><id>10813928</id><snippet>offset</snippet></ROW><ROW><id>10813928</id><snippet>kernel</snippet></ROW><ROW><id>10813928</id><snippet>BLUR</snippet></ROW><ROW><id>10813928</id><snippet>BLUR = Kernel((5, 5), (1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1))
</snippet></ROW><ROW><id>10813928</id><snippet>16</snippet></ROW><ROW><id>10813928</id><snippet>mildblur = Kernel((3, 3), (1, 1, 1, 1, 0, 1, 1, 1, 1))
</snippet></ROW><ROW><id>10814468</id><snippet>global</snippet></ROW><ROW><id>10814468</id><snippet>g_c = 0

class TestClass():
    def run(self):
        global g_c
        for i in range(10):
            g_c = 1
            print g_c
</snippet></ROW><ROW><id>10814468</id><snippet>global</snippet></ROW><ROW><id>10814662</id><snippet>class it(type):
    def __iter__(self):
        # Wanna iterate over a class? Then ask that class for iterator.
        return self.classiter()

class Foo:
    __metaclass__ = it # We need that meta class...
    by_id = {} # Store the stuff here...

    def __init__(self, id): # new isntance of class
        self.id = id # do we need that?
        self.by_id[id] = self # register istance

    @classmethod
    def classiter(cls): # iterate over class by giving all instances which have been instantiated
        return iter(cls.by_id.values())

if __name__ == '__main__':
    a = Foo(123)
    print list(Foo)
    del a
    print list(Foo)
</snippet></ROW><ROW><id>10814662</id><snippet>by_id</snippet></ROW><ROW><id>10814662</id><snippet>weakref</snippet></ROW><ROW><id>10814662</id><snippet>import weakref
</snippet></ROW><ROW><id>10814662</id><snippet>by_id = weakref.WeakValueDictionary()
</snippet></ROW><ROW><id>10814662</id><snippet>a</snippet></ROW><ROW><id>10814662</id><snippet>del a</snippet></ROW><ROW><id>10814662</id><snippet>WeakValueDictionary()</snippet></ROW><ROW><id>10814662</id><snippet>[...]
    self.by_id[id] = weakref.ref(self)
[...]
@classmethod
def classiter(cls):
    # return all class instances which are still alive according to their weakref pointing to them
    return (i for i in (i() for i in cls.by_id.values()) if i is not None)
</snippet></ROW><ROW><id>10814662</id><snippet>weakref</snippet></ROW><ROW><id>10815245</id><snippet>row.getValue()</snippet></ROW><ROW><id>10815245</id><snippet>id(feat)</snippet></ROW><ROW><id>10815245</id><snippet>id(feat.firstPoint)</snippet></ROW><ROW><id>10815245</id><snippet>id(feat.lastPoint)</snippet></ROW><ROW><id>10815262</id><snippet>redis.Redis</snippet></ROW><ROW><id>10815262</id><snippet>redis.StrictRedis</snippet></ROW><ROW><id>10815262</id><snippet>db</snippet></ROW><ROW><id>10815262</id><snippet>rs1 = redis.Redis(host="localhost", db=0)
rs2 = redis.Redis(host="localhost", db=1)
</snippet></ROW><ROW><id>10815262</id><snippet>flushdb()</snippet></ROW><ROW><id>10815262</id><snippet>flushall()</snippet></ROW><ROW><id>10815359</id><snippet>scipy.integrate.simps</snippet></ROW><ROW><id>10815359</id><snippet>y</snippet></ROW><ROW><id>10815359</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import scipy
&gt;&gt;&gt; a=np.array([1,1,1,1,1])
&gt;&gt;&gt; scipy.integrate.simps(a)
4.0
&gt;&gt;&gt; scipy.integrate.simps(a,np.array([0,10,20,30,40]))
40.0
</snippet></ROW><ROW><id>10815359</id><snippet>&gt;&gt;&gt; a=np.array([0,1,1,1,1,10,10,10,10,0])
&gt;&gt;&gt; scipy.integrate.simps(a)
44.916666666666671
&gt;&gt;&gt; scipy.integrate.simps(a[:5])
3.6666666666666665
&gt;&gt;&gt; scipy.integrate.simps(a[5:])
36.666666666666664
</snippet></ROW><ROW><id>10815695</id><snippet>HTTP 302</snippet></ROW><ROW><id>10815695</id><snippet>requests</snippet></ROW><ROW><id>10815695</id><snippet>allow_redirects=False</snippet></ROW><ROW><id>10815695</id><snippet>inurl:...</snippet></ROW><ROW><id>10815955</id><snippet>file = '/var/log/test.txt'
path, file_name = os.path.split(file)
</snippet></ROW><ROW><id>10815955</id><snippet>path
'/var/log'

file_name
'test.txt'
</snippet></ROW><ROW><id>10815955</id><snippet>import os</snippet></ROW><ROW><id>10815955</id><snippet>.</snippet></ROW><ROW><id>10815955</id><snippet>if not path: path = '.'
</snippet></ROW><ROW><id>10815955</id><snippet>file = 'test.txt'
path, file_name = os.path.split(file)
if not path: path = '.'
</snippet></ROW><ROW><id>10815955</id><snippet>path
'.'

file_name
'test.txt'
</snippet></ROW><ROW><id>10816220</id><snippet>&gt;&gt;&gt; import paramiko
&gt;&gt;&gt; ssh=paramiko.SSHClient()
&gt;&gt;&gt; ssh.load_system_host_keys()
&gt;&gt;&gt; ssh.connect(hostname='localhost', username='haiprasan86', password='secret')
&gt;&gt;&gt; print ssh
&lt;paramiko.SSHClient object at 0xdf2590&gt;
</snippet></ROW><ROW><id>10816220</id><snippet>&gt;&gt;&gt; _, out, err = ssh.exec_command('ls -l /etc/passwd')
&gt;&gt;&gt; # block until remote command completes
&gt;&gt;&gt; status = out.channel.recv_exit_status()
&gt;&gt;&gt; print status
0
</snippet></ROW><ROW><id>10816220</id><snippet>&gt;&gt;&gt; print out.readlines()
['-rw-r--r--. 1 root root 2351 Mar 27 10:57 /etc/passwd\n']
</snippet></ROW><ROW><id>10816436</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>10816436</id><snippet>&gt;&gt;&gt; inputs = [{
...  "author": ["TIM ROCK"], 
...  "book_name": ["Truk Lagoon, Pohnpei &amp; Kosrae Dive Guide"], 
...  "category": "Travel", 
... },
... {
...  "author": ["JOY"], 
...  "book_name": ["PARSER"], 
...  "category": "Accomp", 
... }
... ]
&gt;&gt;&gt; 
&gt;&gt;&gt; from csv import DictWriter
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; 
&gt;&gt;&gt; buf=StringIO()
&gt;&gt;&gt; c=DictWriter(buf, fieldnames=['author', 'book_name', 'category'])
&gt;&gt;&gt; c.writeheader()
&gt;&gt;&gt; c.writerows(inputs)
&gt;&gt;&gt; print buf.getvalue()
author,book_name,category
['TIM ROCK'],"['Truk Lagoon, Pohnpei &amp; Kosrae Dive Guide']",Travel
['JOY'],['PARSER'],Accomp
</snippet></ROW><ROW><id>10816436</id><snippet>&gt;&gt;&gt; for row in inputs:
...     for k, v in row.iteritems():
...         if not isinstance(v, basestring):
...             try:
...                 row[k] = ', '.join(v)
...             except TypeError:
...                 pass
...     c.writerow(row)
... 
&gt;&gt;&gt; print buf.getvalue()
author,book_name,category
TIM ROCK,"Truk Lagoon, Pohnpei &amp; Kosrae Dive Guide",Travel
JOY,PARSER,Accomp
</snippet></ROW><ROW><id>10816573</id><snippet>def phone_split(x):
  return ' '.join([x[0:4], x[4:7], x[7:9], x[9:]])
</snippet></ROW><ROW><id>10816573</id><snippet>def phone_split(x, format=[4,3,2,2]):
  parts = []
  reduce(lambda x, y: parts.append(x[:y]) or x[y:], format, x)
  return ' '.join(parts)
</snippet></ROW><ROW><id>10816573</id><snippet>append()</snippet></ROW><ROW><id>10816573</id><snippet>or</snippet></ROW><ROW><id>10816613</id><snippet>PyCharm</snippet></ROW><ROW><id>10816613</id><snippet>Django Models</snippet></ROW><ROW><id>10816613</id><snippet>Meta Classes</snippet></ROW><ROW><id>10816613</id><snippet>TokenType.objects.</snippet></ROW><ROW><id>10816613</id><snippet>update                
by_id                 
by_lookup             
create                
use_for_related_fields
</snippet></ROW><ROW><id>10816613</id><snippet>TokenType.</snippet></ROW><ROW><id>10816613</id><snippet>__metaclass__                 
__hash__                      
_get_next_or_previous_in_order
__ne__                        
date_error_message            
description                   
_perform_date_checks          
delete                        
clean                         
objects                       
unique_error_message          
_set_pk_val                   
_deferred                     
save_base                     
pk                            
serializable_value            
full_clean                    
__init__                      
code                          
save                          
__str__                       
validate_unique               
clean_fields                  
__repr__                      
_perform_unique_checks        
__reduce__                    
_get_unique_checks            
prepare_database_save         
_get_pk_val                   
__eq__                        
lookups                       
_get_next_or_previous_by_FIELD
Meta                          
_get_FIELD_display    
</snippet></ROW><ROW><id>10816613</id><snippet>PyCharm</snippet></ROW><ROW><id>10816643</id><snippet>list</snippet></ROW><ROW><id>10816643</id><snippet>.split()</snippet></ROW><ROW><id>10816643</id><snippet>&gt;&gt;&gt; fields = ['8000.5', '16745', '0.1257']
&gt;&gt;&gt; fields[0]
'8000.5'
&gt;&gt;&gt; list(fields[0])
['8', '0', '0', '0', '.', '5']
</snippet></ROW><ROW><id>10816643</id><snippet>myfirstcolumn = []
for line in f1:
    fields = line.split()
    myfirstcolumn.append(fields[0])
</snippet></ROW><ROW><id>10816643</id><snippet>myfirstcolumn = [line.split()[0] for line in f1]
</snippet></ROW><ROW><id>10816915</id><snippet>if 'test' in COMMAND_LINE_TARGETS:
    runTestsCmd = env.Command('runTests', None, Action(runTests, "Running tests"))
    AlwaysBuild(runTestsCmd)
    Alias('test', runTestsCmd)
</snippet></ROW><ROW><id>10816915</id><snippet>def runTests(target = None, source = None, env = None) :
    # fill args
    retCode = subprocess.call(args, env = env['ENV'], cwd = cwd, shell = True)
    Exit(retCode)
</snippet></ROW><ROW><id>10816915</id><snippet>Depends(runTestsCmd, [appAndLibsToBuild])
</snippet></ROW><ROW><id>10817865</id><snippet>Planning.objects.raw()</snippet></ROW><ROW><id>10817865</id><snippet>RawQuerySet</snippet></ROW><ROW><id>10817865</id><snippet>RawQuerySet</snippet></ROW><ROW><id>10817865</id><snippet>qs = planning.objects.raw()
qs[0].key
for x in qs:
    x.key
</snippet></ROW><ROW><id>10817982</id><snippet>widget.configure(state="disabled")</snippet></ROW><ROW><id>10817982</id><snippet>&lt;1&gt;</snippet></ROW><ROW><id>10817982</id><snippet>update</snippet></ROW><ROW><id>10818002</id><snippet>list_ip = host_list - ip_value
</snippet></ROW><ROW><id>10818002</id><snippet>{'10.5.3.5', '10.3.24.45'}
</snippet></ROW><ROW><id>10818002</id><snippet>list_ip = list(set(host_list) - set(ip_value))
</snippet></ROW><ROW><id>10818002</id><snippet>['10.5.3.5', '10.3.24.45']
</snippet></ROW><ROW><id>10818038</id><snippet>def lone_sum(*args):
      return sum(v for v in args if args.count(v) == 1)
</snippet></ROW><ROW><id>10818052</id><snippet>subprocess.call( ["screen", "-d", "-m", "-S", "test", "./server"] )
</snippet></ROW><ROW><id>10818052</id><snippet>subprocess</snippet></ROW><ROW><id>10818052</id><snippet>shell</snippet></ROW><ROW><id>10818052</id><snippet>true</snippet></ROW><ROW><id>10818052</id><snippet>subprocess.call("screen -dmS test ./server", shell=True)
</snippet></ROW><ROW><id>10818087</id><snippet>print()</snippet></ROW><ROW><id>10818087</id><snippet>/var/log/mongodb/mongodb.log</snippet></ROW><ROW><id>10818087</id><snippet>map/reduce</snippet></ROW><ROW><id>10818495</id><snippet>request.user</snippet></ROW><ROW><id>10818587</id><snippet>pandas</snippet></ROW><ROW><id>10818587</id><snippet>read_fwf</snippet></ROW><ROW><id>10818587</id><snippet>import pandas
import StringIO

buf = StringIO.StringIO()
buf.write(''.join(line
    for line in open('f.txt')
    if not line.startswith('TEST')))
buf.seek(0)

df = pandas.read_fwf(buf, [(0, 24), (24, 27), (27, 30)],
        index_col=0, names=['switch', 'value'])
print df
</snippet></ROW><ROW><id>10818587</id><snippet>                        switch  value
2012-05-01 00:00:00.203    OFF      0
2012-05-01 00:00:11.203    OFF      0
2012-05-01 00:00:22.203     ON      1
2012-05-01 00:00:33.203     ON      1
2012-05-01 00:00:44.203    OFF      0
2012-05-02 00:00:00.203    OFF      0
2012-05-02 00:00:11.203    OFF      0
2012-05-02 00:00:22.203    OFF      0
2012-05-02 00:00:33.203     ON      1
2012-05-02 00:00:44.203     ON      1
2012-05-02 00:00:55.203    OFF      0
</snippet></ROW><ROW><id>10818689</id><snippet>unittest</snippet></ROW><ROW><id>10818689</id><snippet>SetUp()</snippet></ROW><ROW><id>10818689</id><snippet>TearDown()</snippet></ROW><ROW><id>10818689</id><snippet>SetUpClass()</snippet></ROW><ROW><id>10818689</id><snippet>TearDownClass()</snippet></ROW><ROW><id>10818689</id><snippet>TestSuite</snippet></ROW><ROW><id>10818689</id><snippet>.__dict__</snippet></ROW><ROW><id>10818689</id><snippet>dir()</snippet></ROW><ROW><id>10818700</id><snippet>import sys
sys.path.append("C:/path/to/database/module")
</snippet></ROW><ROW><id>10818843</id><snippet>os.chown(path, uid, gid)
</snippet></ROW><ROW><id>10818843</id><snippet>import pwd
import grp
import os

uid = pwd.getpwnam("nobody").pw_uid
gid = grp.getgrnam("nogroup").gr_gid
</snippet></ROW><ROW><id>10818976</id><snippet>scipy.spatial</snippet></ROW><ROW><id>10818976</id><snippet>scipy.spatial.KDTree</snippet></ROW><ROW><id>10819172</id><snippet>from my_settings import *</snippet></ROW><ROW><id>10819172</id><snippet>from default_settings import *</snippet></ROW><ROW><id>10819172</id><snippet>import</snippet></ROW><ROW><id>10819172</id><snippet>import</snippet></ROW><ROW><id>10819172</id><snippet>from module import *</snippet></ROW><ROW><id>10819172</id><snippet>*</snippet></ROW><ROW><id>10819172</id><snippet># settings.py
default_settings = {'foo': True, 'bar': False}
my_settings = {'foo': False}
current_settings = default_settings.copy()
current_settings.update(my_settings)
</snippet></ROW><ROW><id>10819172</id><snippet>import settings</snippet></ROW><ROW><id>10819172</id><snippet>foo = settings.default_settings['foo']
bar = settings.current_settings['bar']
settings.current_settings['bar'] = True
</snippet></ROW><ROW><id>10819172</id><snippet>settings</snippet></ROW><ROW><id>10819172</id><snippet>Settings</snippet></ROW><ROW><id>10819172</id><snippet>Settings</snippet></ROW><ROW><id>10819172</id><snippet>class Settings(object):
    def __init__(self, foo=None, bar=None):
        self.foo = foo if foo is not None else True
        self.bar = bar if bar is not None else False
</snippet></ROW><ROW><id>10819172</id><snippet># settings.py
default_settings = Settings()
my_settings = Settings(foo=False)
current_settings = my_settings.copy()
current_settings.foo = False    # pointless example
</snippet></ROW><ROW><id>10819172</id><snippet>import settings</snippet></ROW><ROW><id>10819172</id><snippet># foo.py
import settings
bar = settings.current_settings.bar
settings.current_settings.foo = True
</snippet></ROW><ROW><id>10819172</id><snippet>Settings</snippet></ROW><ROW><id>10819172</id><snippet>class LocalSettings(Settings):
    def __init__(self, foo=None, bar=None):             # in Python 3, 
        super(LocalSettings, self).__init__(foo, bar)   # super().__... works
        self.foo = foo if foo is not None else True
</snippet></ROW><ROW><id>10819321</id><snippet>import re

regex = re.compile(r'^([^&amp;]*)(&amp;)([^&amp;]*)(&amp;)([^&amp;]*)')

with open('test.tex', 'r+') as f:
    old = f.readlines() # Pull the file contents to a list
    f.seek(0) # Jump to start, so we overwrite instead of appending
    for line in old:
        s = raw_input(line)
        if s == 'y':
            f.write(regex.sub(r'\3\2\1\4\5',line))
        else:
            f.write(line)
</snippet></ROW><ROW><id>10819357</id><snippet>create_engine('mysql+mysqldb:///mydb?charset=utf8')
</snippet></ROW><ROW><id>10819357</id><snippet>use_unicode</snippet></ROW><ROW><id>10819445</id><snippet>split</snippet></ROW><ROW><id>10819445</id><snippet>join</snippet></ROW><ROW><id>10819445</id><snippet>animals = ['dog', 'cat', 'mouse']
"/".join(animals)
</snippet></ROW><ROW><id>10819461</id><snippet>r_v.obj.backend = 'mongoengine.django.auth.MongoEngineBackend'</snippet></ROW><ROW><id>10819607</id><snippet>genfromtxt</snippet></ROW><ROW><id>10819607</id><snippet>data.dtype
</snippet></ROW><ROW><id>10819607</id><snippet>data.dtype.names
</snippet></ROW><ROW><id>10819609</id><snippet>EasyInstall</snippet></ROW><ROW><id>10820194</id><snippet>project_identifiers_seen</snippet></ROW><ROW><id>10820194</id><snippet>foo.has_key(bar)</snippet></ROW><ROW><id>10820194</id><snippet>bar in foo</snippet></ROW><ROW><id>10820194</id><snippet>staticmethod</snippet></ROW><ROW><id>10820778</id><snippet>os.walk()</snippet></ROW><ROW><id>10820778</id><snippet>for root, dirs, files in os.walk(path):
    # do whatever you want to with dirs and files
    if root != path:
        # one level down, modify dirs in place so we don't go any deeper
        del dirs[:]
</snippet></ROW><ROW><id>10820879</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; from mock import MagicMock
&gt;&gt;&gt; os.listdir = MagicMock(return_value=['file1.txt', 'file2.txt', 'file3.txt'])
&gt;&gt;&gt; os.listdir('./test')
['file1.txt', 'file2.txt', 'file3.txt']
</snippet></ROW><ROW><id>10821114</id><snippet>dict12 = defaultdict(lambda:defaultdict(list))
for k,v in dict1.items():
    for k1,v1 in v.items():
        dict12[k][k1] = v1
for k,v in dict2.items():
    for k2,v2 in v.items():
        dict12[k][k2] += v2
for k,v in dict12.items():
    for k12,v12 in v.items():
        print "dict12[%r][%r] = %r" % (k,k12,v12)
</snippet></ROW><ROW><id>10821143</id><snippet>with open(r'\\myCompNameOrIP\C\windows\logs\logfile.txt','rb') as logfile:
    loglines = logfile.readlines()
</snippet></ROW><ROW><id>10821143</id><snippet>r'\\myCompNameOrIP\C\windows\logs\*.txt'</snippet></ROW><ROW><id>10821260</id><snippet>max_width = max(len(filename) for filename in filenames)
for filename in filenames:
    f.write(filename.ljust(max_width+1)+..whatever else..)
</snippet></ROW><ROW><id>10821260</id><snippet>f.write('%-40s %6s %10s %2s\n' % (filename, type, size, modified))
</snippet></ROW><ROW><id>10821267</id><snippet>np.all(numexpr.evaluate('(a==b)|((a!=a)&amp;(b!=b))'))
</snippet></ROW><ROW><id>10821267</id><snippet>np.all(a==b)
</snippet></ROW><ROW><id>10821656</id><snippet>outer</snippet></ROW><ROW><id>10821656</id><snippet>arange</snippet></ROW><ROW><id>10821656</id><snippet>PSI_i = numpy.sin((arange(1,1026)-0.5)*DI)
PSI_j = numpy.sin((arange(1,1026)-0.5)*DJ)
PSI = A*outer(PSI_i, PSI_j)

P_i = numpy.cos(2.*arange(1,1026)*DI)
P_j = numpy.cos(2.*arange(1,1026)*DJ)
P = PCF*outer(P_i, P_j) + 50000
</snippet></ROW><ROW><id>10821656</id><snippet>from numpy import *</snippet></ROW><ROW><id>10821656</id><snippet>from pylab import *</snippet></ROW><ROW><id>10821656</id><snippet>numpy.</snippet></ROW><ROW><id>10821656</id><snippet>math</snippet></ROW><ROW><id>10821698</id><snippet>(?&lt;=(?&lt;!_)__)([^_])(?=__(?!_))
</snippet></ROW><ROW><id>10821698</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(?&lt;=(?&lt;!_)__)([^_])(?=__(?!_))')
&gt;&gt;&gt; regex.findall('__a__ ')
['a']
&gt;&gt;&gt; regex.findall('___a___')
[]
&gt;&gt;&gt; regex.findall('__a__d___b___e__c__')
['a', 'c']
&gt;&gt;&gt; regex.findall('__a__c__')
['a', 'c']
</snippet></ROW><ROW><id>10821698</id><snippet>c</snippet></ROW><ROW><id>10821698</id><snippet>__a__c__</snippet></ROW><ROW><id>10821698</id><snippet>(?&lt;!_)__([^_])__(?!_)
</snippet></ROW><ROW><id>10821713</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as mplt  
&gt;&gt;&gt; fig = mplt.figure()  
&gt;&gt;&gt; ax = fig.add_subplot(111)  
&gt;&gt;&gt; mplt.plot([1,2,3],[1,2,1])  
&gt;&gt;&gt; plotlim = mplt.xlim() + mplt.ylim()  
&gt;&gt;&gt; ax.imshow([[0,0],[1,1]], cmap=mplt.cm.Greens, interpolation='bicubic', extent=plotlim)  
&gt;&gt;&gt; mplt.draw()  
</snippet></ROW><ROW><id>10821849</id><snippet>wmi.Win32_ComputerSystem</snippet></ROW><ROW><id>10821849</id><snippet>machine.Win32_ComputerSystem.__class__.__name__
</snippet></ROW><ROW><id>10821880</id><snippet>#!/bin/bash
SITE=/home/dev/sites/rmx

echo "RMX using siteroot=$SITE"
$SITE/rmx/manage.py runserver &amp;
compass watch $SITE/media/compass/ &amp;
coffee -o $SITE/media/js -cw $SITE/media/coffee &amp;
hamlpy-watcher $SITE/templates/hamlpy $SITE/templates/templates &amp;

trap "kill -TERM -$$" SIGINT

wait
</snippet></ROW><ROW><id>10821880</id><snippet>kill</snippet></ROW><ROW><id>10821880</id><snippet>$$</snippet></ROW><ROW><id>10822046</id><snippet>def is_close(l):
    for n in l:
        c = sum([1 for x in l if x &gt;= 0.8 *n and x &lt;= 1.2 * n])
        if c &gt;= 0.7 * len(l):
            return True
    return False

print is_close([1,7,8,9])
print is_close([3,4,100,101,102,103,104,105])
print is_close([1,8,9])
print is_close([1,10])
print is_close([100,200,300,400,500])
</snippet></ROW><ROW><id>10822046</id><snippet>True
True
False
False
False
</snippet></ROW><ROW><id>10822210</id><snippet>tag == 'a'</snippet></ROW><ROW><id>10822210</id><snippet>('href', 'http://creativecommons.org/licenses/by-sa/3.0/')
('class', 'cc-wiki-link')
</snippet></ROW><ROW><id>10822210</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>10822210</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>10822210</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>10822210</id><snippet>attr[0] == 'href'</snippet></ROW><ROW><id>10822273</id><snippet>import urllib

f = urllib.urlopen('http://stackoverflow.com/questions/10822223/check-if-folder-exists-in-a-webserver-using-python-and-http-functions/')
if f.code == 200:
  #success
</snippet></ROW><ROW><id>10822309</id><snippet>def GetTorrentClass(slots_iterable):
    class Torrent(object):
        __slots__ = slots_iterable
    return Torrent
</snippet></ROW><ROW><id>10822309</id><snippet>slots_iterable</snippet></ROW><ROW><id>10822309</id><snippet>__dict__</snippet></ROW><ROW><id>10822309</id><snippet>__slots__</snippet></ROW><ROW><id>10822309</id><snippet>__slots__</snippet></ROW><ROW><id>10822309</id><snippet>class Torrent(object):
    def __init__(self, fields):
        self.fields = fields #Fields could be ('field1', 'field2')

    def save(self):
        for field in self.fields:
            self.store_to_db(field, getattr(self, field))
</snippet></ROW><ROW><id>10822364</id><snippet>collections.Mapping</snippet></ROW><ROW><id>10822364</id><snippet>__contains__()</snippet></ROW><ROW><id>10822364</id><snippet>keys()</snippet></ROW><ROW><id>10822364</id><snippet>items()</snippet></ROW><ROW><id>10822364</id><snippet>values()</snippet></ROW><ROW><id>10822364</id><snippet>get()</snippet></ROW><ROW><id>10822364</id><snippet>__eq__()</snippet></ROW><ROW><id>10822364</id><snippet>__ne__()</snippet></ROW><ROW><id>10822364</id><snippet>__len__()</snippet></ROW><ROW><id>10822364</id><snippet>__iter__()</snippet></ROW><ROW><id>10822364</id><snippet>__getitem__()</snippet></ROW><ROW><id>10822364</id><snippet>Mapping</snippet></ROW><ROW><id>10822364</id><snippet>Mapping</snippet></ROW><ROW><id>10822364</id><snippet>Mapping.register(C)
</snippet></ROW><ROW><id>10822364</id><snippet>issubclass(C, Mapping)</snippet></ROW><ROW><id>10822842</id><snippet>rows = session.query(Congress).count()
</snippet></ROW><ROW><id>10822842</id><snippet>from sqlalchemy import func
rows = session.query(func.count(Congress.id)).scalar()
</snippet></ROW><ROW><id>10823125</id><snippet>set VAR_1=this
set VAR_2=that

python your_script.py %1 %VAR_1% %VAR_2%
</snippet></ROW><ROW><id>10823247</id><snippet>render</snippet></ROW><ROW><id>10823655</id><snippet>class Foo(object):
    pass

myobject = Foo()
myobject.foo = 'bar'
</snippet></ROW><ROW><id>10823655</id><snippet>myobject = type("Foo", (object,), {})()
myobject.foo = 'bar'
</snippet></ROW><ROW><id>10823655</id><snippet>type</snippet></ROW><ROW><id>10823655</id><snippet>class</snippet></ROW><ROW><id>10823655</id><snippet>myobject = type("", (), {})()
</snippet></ROW><ROW><id>10823655</id><snippet>list</snippet></ROW><ROW><id>10823655</id><snippet>object</snippet></ROW><ROW><id>10823655</id><snippet>class</snippet></ROW><ROW><id>10823655</id><snippet>type</snippet></ROW><ROW><id>10823707</id><snippet>all:
    ./test.py
</snippet></ROW><ROW><id>10823707</id><snippet>test.py</snippet></ROW><ROW><id>10823707</id><snippet>#!C:\\Python27\\python.exe</snippet></ROW><ROW><id>10823707</id><snippet>#!python</snippet></ROW><ROW><id>10823707</id><snippet>all:
    python test.py
</snippet></ROW><ROW><id>10823857</id><snippet>install</snippet></ROW><ROW><id>10823935</id><snippet>self.table.setRowCount(0)
self.table.setColumnCount(0)
</snippet></ROW><ROW><id>10824039</id><snippet>sorted()</snippet></ROW><ROW><id>10824333</id><snippet>&gt;&gt;&gt; s = '356a192b7913b04c54574d18c28d46e6395428ab'
&gt;&gt;&gt; s.decode("hex")
'5j\x19+y\x13\xb0LTWM\x18\xc2\x8dF\xe69T(\xab'
</snippet></ROW><ROW><id>10824333</id><snippet>binascii.a2b_hex(s)
</snippet></ROW><ROW><id>10824363</id><snippet>keypoint</snippet></ROW><ROW><id>10824363</id><snippet>x = keypoint.pt[0]
y = keypoint.pt[1]
size = keypoint.size
dir_in_degrees = keypoint.angle
laplacian = round(keypoint.class_id)
hessian = keypoint.response
</snippet></ROW><ROW><id>10824400</id><snippet>response.read</snippet></ROW><ROW><id>10824400</id><snippet>parse(response)</snippet></ROW><ROW><id>10824400</id><snippet>response.read</snippet></ROW><ROW><id>10824400</id><snippet>parse</snippet></ROW><ROW><id>10824400</id><snippet>response.read</snippet></ROW><ROW><id>10824400</id><snippet>import urllib, urllib2, time
import StringIO
from xml.dom.minidom import parse
response = urllib2.urlopen(req)
the_page = response.read() 
#print the_page 
dom = parse(StringIO.StringIO(the_page))
name = dom.getElementsByTagName('liverequesttime')
text = name[0].firstChild
print text.nodeValue
</snippet></ROW><ROW><id>10824421</id><snippet>10,000,000</snippet></ROW><ROW><id>10824512</id><snippet>legend( ('label1', 'label2', 'label3'), loc='upper left')
</snippet></ROW><ROW><id>10824512</id><snippet>loc=2</snippet></ROW><ROW><id>10824512</id><snippet>legend</snippet></ROW><ROW><id>10824727</id><snippet>class MyDocTemplate(BaseDocTemplate):  
     def __init__(self, filename, **kw):  
         self.allowSplitting = 0  
         apply(BaseDocTemplate.__init__, (self, filename), kw)  
         template = PageTemplate('normal', [Frame(1*inch, 1*inch, 6.5*inch, 9.5*inch, id='F1')])
         self.addPageTemplates(template)  

     def afterFlowable(self, flowable):  
         "Registers TOC entries."  
         if flowable.__class__.__name__ == 'Paragraph':  
             text = flowable.getPlainText()  
             style = flowable.style.name  

             if style == 'reportHeading1':
                 toc_el = [ 0, text, self.page ] # basic elements
                 toc_bm = getattr(flowable, '_bookmarkName', None) # bookmark for links
                 if toc_bm: 
                     toc_el.append( toc_bm )
                 self.notify('TOCEntry', tuple(toc_el) )

             elif style == 'reportHeading2':  
                 toc_el = [ 1, text, self.page ] # basic elements
                 toc_bm = getattr(flowable, '_bookmarkName', None) # bookmark for links
                 if toc_bm: 
                     toc_el.append( toc_bm )
                 self.notify('TOCEntry', tuple(toc_el) )

             elif style == 'TableTitleStyle':
                 toc_el = [ 1, text, self.page ] # basic elements
                 toc_bm = getattr(flowable, '_bookmarkName', None) # bookmark for links
                 if toc_bm: 
                     toc_el.append( toc_bm )
                 self.notify('TOCTable', tuple(toc_el) )

             elif style == 'GraphicTitleStyle':
                 toc_el = [ 1, text, self.page ] # basic elements
                 toc_bm = getattr(flowable, '_bookmarkName', None) # bookmark for links
                 if toc_bm: 
                     toc_el.append( toc_bm )
                 self.notify('TOCFigure', tuple(toc_el) )
</snippet></ROW><ROW><id>10824727</id><snippet>class ListOfFigures(TableOfContents):
    def notify(self, kind, stuff):
        """ The notification hook called to register all kinds of events.
            Here we are interested in 'Figure' events only.
        """
        if kind == 'TOCFigure':
            self.addEntry(*stuff)


class ListOfTables(TableOfContents):
    def notify(self, kind, stuff):
        """ The notification hook called to register all kinds of events.
            Here we are interested in 'Figure' events only.
        """
        if kind == 'TOCTable':
            self.addEntry(*stuff)
</snippet></ROW><ROW><id>10824854</id><snippet>&gt;&gt; ieee754(.3+.3+.3+.1)

ans =

0011111111101111111111111111111111111111111111111111111111111111

&gt;&gt; ieee754(.3+.3+.1+.3)

ans =

0011111111110000000000000000000000000000000000000000000000000000
</snippet></ROW><ROW><id>10825016</id><snippet>filename = "/Users/clifgray/Desktop/filename.jpeg"</snippet></ROW><ROW><id>10825016</id><snippet>imgObj.save(filename)</snippet></ROW><ROW><id>10825073</id><snippet>import sys, glob, win32api, os

pdfLoc = sys.argv[1]
try:
    copies = int(sys.argv[2])
except:
    copies = 1

for pdfname in glob.glob(os.path.join(pdfLoc, "*.pdf")):
    fullpath = os.path.join(pdfLoc, pdfname)
    for copy in range(copies):
        win32api.ShellExecute(0, "print", pdfname, None, ".", 0)
</snippet></ROW><ROW><id>10825126</id><snippet>all(len(i)==len(myList[0]) for i in myList)
</snippet></ROW><ROW><id>10825126</id><snippet>len_first = len(myList[0]) if myList else None
all(len(i)==len_first for i in myList)
</snippet></ROW><ROW><id>10825126</id><snippet>from itertools import groupby
groupby(sorted(myList, key=len), key=len)
</snippet></ROW><ROW><id>10825133</id><snippet># I create a class (a structure that stores data along with functions that
# operate on the data) to store information about each driver:
class Driver(object):
    def __init__(self, number, name, make, sponsor):
        self.number = number
        self.name = name
        self.make = make
        self.sponsor = sponsor

# Then I make a bunch of drivers, and store them in a list:
drivers = [
    Driver(1, "Jamie McMurray", "Chevrolet", "Bass Pro Shops/Allstate"),
    Driver(2, "Brad Keselowski", "Dodge", "Miller Lite")
]

# Then I use a comprehension (x for d in drivers) - it's kind of
# like a single-line for statement - to look at my list of drivers
# and create a dictionary so I can quickly look them up by driver number.
# It's a shorter way of writing:
#   number_index = {}  # an empty dictionary
#   for d in drivers:
#       number_index[d.number] = d
number_index = {d.number:d for d in drivers}

# Now I make a "main" function - this is a naming convention for
# "here's what I want this program to do" (the preceding stuff is
# just set-up):
def main():
    # show the welcome message
    print("\t\t\tWelcome to NASCAR Numbers!")
    print("\t\t Match Car Numbers to the Driver Names.")

    # loop forever
    # (it's not actually forever - when I want to quit, I call break to leave)
    while True:
        # prompt for input
        # get input from keyboard
        # strip off leading and trailing whitespace
        # save the result
        inp = input("\nEnter a car number (or 'exit' to quit):").strip()

        # done? leave the loop
        # .lower() makes the input lowercase, so the comparison works
        #   even if you typed in 'Exit' or 'EXIT'
        if inp.lower()=='exit':
            break

        try:
            # try to turn the input string into a number
            inp = int(inp)
        except ValueError:
            # int() didn't like the input string
            print("That wasn't a number!")

        try:
            # look up a driver by number (might fail)
            # then print a message about the driver
            print("Car #{} is driven by {}".format(inp, number_index[inp].name))
        except KeyError:
            # number[inp] doesn't exist
            print("I don't know any car #{}".format(inp))

# if this script is called directly by Python, run the main() function
# (if it is loaded as a module by another Python script, don't)
if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10825177</id><snippet>pub_date = models.DateTimeField('2012')
</snippet></ROW><ROW><id>10825177</id><snippet>AttributeError</snippet></ROW><ROW><id>10825325</id><snippet>json.loads</snippet></ROW><ROW><id>10825325</id><snippet>\r\n</snippet></ROW><ROW><id>10825325</id><snippet>data</snippet></ROW><ROW><id>10825325</id><snippet>on_receive</snippet></ROW><ROW><id>10825325</id><snippet>\r\n</snippet></ROW><ROW><id>10825358</id><snippet>&gt;&gt;&gt; class Deck:
...     def __init__(self, cards):
...         self.cards = cards
&gt;&gt;&gt; l0 = [1, 2, 3]
&gt;&gt;&gt; d1 = Deck(l0)
&gt;&gt;&gt; d2 = Deck(l0)
&gt;&gt;&gt; d1.cards
0: [1, 2, 3]
&gt;&gt;&gt; d2.cards
1: [1, 2, 3]
&gt;&gt;&gt; d1.cards.append(4)
&gt;&gt;&gt; d2.cards
2: [1, 2, 3, 4]    # d1 and d2 share the same list for cards
</snippet></ROW><ROW><id>10825358</id><snippet>deck = cards.deck(src)</snippet></ROW><ROW><id>10825358</id><snippet>src</snippet></ROW><ROW><id>10825436</id><snippet>from PIL import Image
import numpy as np

class Pic_Function():
    def __init__(self, picture_path):
        self.picture = Image.open(picture_path)
        self.pixels = self.picture.load()
        self.columns = []
        # is there really no image method to get a numpy array of pixels?
        for i in range(self.picture.size[0]):
            self.columns.append([self.pixels[i,j] for j in range(self.picture.size[1])])
        self.first_black = []
        for i in self.columns:
            try:
                self.first_black.append(self.picture.size[0] - i.index((0,0,0)))
            except ValueError:
                self.first_black.append(None)
        self.max, self.min = max(self.first_black), min([j for j in self.first_black if j != None])

    def at(self, x):
        upper_idx = int(math.ceil(x))
        lower_idx = upper_idx - 1
        try:
            upper = self.first_black[upper_idx]
            lower = self.first_black[lower_idx]
        except IndexError:
            return 0
        if None in [upper, lower]:
            return 0

        up_weight, low_weight = abs(upper-x), abs(lower-x)
        return (up_weight*upper + low_weight*lower)/(up_weight + low_weight)

    def norm_at(self, x, length):
        un_normed = self.at(x*self.picture.size[0]/length)
        return (un_normed - self.min)/self.max
</snippet></ROW><ROW><id>10825445</id><snippet>zope.interface.interfaces</snippet></ROW><ROW><id>10825445</id><snippet>Interface</snippet></ROW><ROW><id>10825445</id><snippet>IInterface</snippet></ROW><ROW><id>10825445</id><snippet>names</snippet></ROW><ROW><id>10825445</id><snippet>def names(all=False):
    """Get the interface attribute names

    Return a sequence of the names of the attributes, including
    methods, included in the interface definition.

    Normally, only directly defined attributes are included. If
    a true positional or keyword argument is given, then
    attributes defined by base classes will be included.
    """
</snippet></ROW><ROW><id>10825445</id><snippet>&gt;&gt;&gt; from zope.interface import Interface, Attribute
&gt;&gt;&gt; class IA(Interface):
...     foo = Attribute("foo")
... 
&gt;&gt;&gt; IA.names()
['foo']
&gt;&gt;&gt; class IB(IA):
...     bar = Attribute("bar")
... 
&gt;&gt;&gt; IB.names()
['bar']
&gt;&gt;&gt; IB.names(all=True)
['foo', 'bar']
</snippet></ROW><ROW><id>10825451</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; url = 'https://www.googleapis.com/freebase/v1/mqlread?query=hello&amp;key=xyz'
&gt;&gt;&gt; requests.get(url)
&lt;Response [400]&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10825451</id><snippet>&gt;&gt;&gt; requests.request("GET",url)
&lt;Response [400]&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10825518</id><snippet>next()</snippet></ROW><ROW><id>10825518</id><snippet>a = ()
b = [1, 2, 3]
print next(iter(a), "empty") # prints "empty", as a doesn't give any values.
print next(iter(b), "empty") # prints 1, the 1st value of b
</snippet></ROW><ROW><id>10825608</id><snippet>&lt;1&gt;</snippet></ROW><ROW><id>10825608</id><snippet>&lt;Leave&gt;</snippet></ROW><ROW><id>10825626</id><snippet>in</snippet></ROW><ROW><id>10825626</id><snippet>href = link.get('href')
if any(end in href for end in IMAGE_FORMAT):
    # do something
    pass
</snippet></ROW><ROW><id>10825626</id><snippet>ends with</snippet></ROW><ROW><id>10825626</id><snippet>.endswith</snippet></ROW><ROW><id>10825626</id><snippet>&gt;&gt;&gt; IMAGE_FORMAT = ('.png','.gif','.jpg','.jpeg')
&gt;&gt;&gt; 'fred.gif'.endswith(IMAGE_FORMAT)
True
</snippet></ROW><ROW><id>10825748</id><snippet>pkey</snippet></ROW><ROW><id>10825748</id><snippet>private_key = paramiko.RSAKey.from_private_key_file (private_key_filename)</snippet></ROW><ROW><id>10825748</id><snippet>key_filename</snippet></ROW><ROW><id>10825748</id><snippet>connect</snippet></ROW><ROW><id>10825767</id><snippet>base</snippet></ROW><ROW><id>10825767</id><snippet>&lt;base href='http://nedbatchelder.com'&gt;
</snippet></ROW><ROW><id>10825767</id><snippet>base</snippet></ROW><ROW><id>10825998</id><snippet>round</snippet></ROW><ROW><id>10825998</id><snippet>round</snippet></ROW><ROW><id>10825998</id><snippet>round 2.5 rounding as taught in school</snippet></ROW><ROW><id>10826247</id><snippet>&gt;&gt;&gt; d = {1:2}
&gt;&gt;&gt; dis.dis(lambda: d[1])
  1           0 LOAD_GLOBAL              0 (d)
              3 LOAD_CONST               1 (1)
              6 BINARY_SUBSCR       
              7 RETURN_VALUE   

&gt;&gt;&gt; dis.dis(lambda: d.get(1))
  1           0 LOAD_GLOBAL              0 (d)
              3 LOAD_ATTR                1 (get)
              6 LOAD_CONST               1 (1)
              9 CALL_FUNCTION            1
             12 RETURN_VALUE  

&gt;&gt;&gt; dis.dis(lambda: d.__getitem__(1))
  1           0 LOAD_GLOBAL              0 (d)
              3 LOAD_ATTR                1 (__getitem__)
              6 LOAD_CONST               1 (1)
              9 CALL_FUNCTION            1
             12 RETURN_VALUE
</snippet></ROW><ROW><id>10826247</id><snippet>dict.get</snippet></ROW><ROW><id>10826247</id><snippet>None</snippet></ROW><ROW><id>10826247</id><snippet>dict</snippet></ROW><ROW><id>10826247</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>10826247</id><snippet>__getitem__</snippet></ROW><ROW><id>10826247</id><snippet>thing.__getitem__(key)</snippet></ROW><ROW><id>10826247</id><snippet>thing[key]</snippet></ROW><ROW><id>10826247</id><snippet>__getitem__</snippet></ROW><ROW><id>10826247</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>10826404</id><snippet>numpy</snippet></ROW><ROW><id>10826404</id><snippet>import Image
import numpy as np

im = Image.open('snapshot.jpg')

# In this case, it's a 3-band (red, green, blue) image
# so we'll unpack the bands into 3 separate 2D arrays.
r, g, b = np.array(im).T

# Let's make an alpha (transparency) band based on where blue is &lt; 100
a = np.zeros_like(b)
a[b &lt; 100] = 255

# Random math... This isn't meant to look good...
# Keep in mind that these are unsigned 8-bit integers, and will overflow.
# You may want to convert to floats for some calculations.
r = (b + g) * 5

# Put things back together and save the result...
im = Image.fromarray(np.dstack([item.T for item in (r,g,b,a)]))

im.save('output.png')
</snippet></ROW><ROW><id>10826423</id><snippet>def _bisect2(dasList, word,lidx=0):
    mid = int(len(dasList)/2)
    if word.lower() &gt; dasList[mid].lower():
        return _bisect2(dasList[mid:], word,lidx=lidx+mid)            
    elif word.lower() &lt; dasList[mid].lower():
        return _bisect2(dasList[:mid], word,lidx=lidx)
    return lidx+mid

words=sorted(["one","two","three","four","five","twenty","foo"])
print (words)
print (_bisect2(words,'three'))
</snippet></ROW><ROW><id>10826506</id><snippet>reload(module)</snippet></ROW><ROW><id>10826506</id><snippet>mymodule = __import__('mymodule')
reload(mymodule)
</snippet></ROW><ROW><id>10826548</id><snippet>/polls/</snippet></ROW><ROW><id>10826548</id><snippet>/polls/index.html</snippet></ROW><ROW><id>10826548</id><snippet>url(r'^polls/$', 'polls.views.index'),
</snippet></ROW><ROW><id>10826548</id><snippet>url(r'^/polls/index.html', 'polls.views.index'),
</snippet></ROW><ROW><id>10826548</id><snippet>.html</snippet></ROW><ROW><id>10826624</id><snippet>files = sys.stdin.splitlines()
for n in range(start,end):
  fname = 'test%02d.ext' % (n,)
  if fname in files:
    some_loop(fname)
</snippet></ROW><ROW><id>10826702</id><snippet>dir</snippet></ROW><ROW><id>10826702</id><snippet>dir</snippet></ROW><ROW><id>10826702</id><snippet>shell=False</snippet></ROW><ROW><id>10826702</id><snippet>convert.exe</snippet></ROW><ROW><id>10826702</id><snippet>convert</snippet></ROW><ROW><id>10826702</id><snippet>PATH</snippet></ROW><ROW><id>10827001</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(946652400)
datetime.datetime(2000, 1, 1, 0, 0)
</snippet></ROW><ROW><id>10827001</id><snippet>&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(946652400)
&gt;&gt;&gt; OFFSET = datetime.timedelta(hours=-9)
&gt;&gt;&gt; adjusted_dt = dt + OFFSET
datetime.datetime(1999, 12, 31, 15, 0)
</snippet></ROW><ROW><id>10827120</id><snippet>ValueError</snippet></ROW><ROW><id>10827120</id><snippet>except</snippet></ROW><ROW><id>10827120</id><snippet>except block Python</snippet></ROW><ROW><id>10827120</id><snippet>main()</snippet></ROW><ROW><id>10827120</id><snippet>main</snippet></ROW><ROW><id>10827120</id><snippet>choice</snippet></ROW><ROW><id>10827120</id><snippet>break</snippet></ROW><ROW><id>10827120</id><snippet>choice</snippet></ROW><ROW><id>10827120</id><snippet>while</snippet></ROW><ROW><id>10827120</id><snippet>continue</snippet></ROW><ROW><id>10827120</id><snippet>try</snippet></ROW><ROW><id>10827120</id><snippet>continue</snippet></ROW><ROW><id>10827120</id><snippet>except</snippet></ROW><ROW><id>10827120</id><snippet>choice == 1</snippet></ROW><ROW><id>10827120</id><snippet>choice == 2</snippet></ROW><ROW><id>10827120</id><snippet>raise ValueError</snippet></ROW><ROW><id>10827120</id><snippet>while True:
    try:
        choice = int(raw_input("Give me a number"))
    except ValueError:
        print "Could you at least give me an actual number?"
        continue

    if choice == 1:
        do_something()
    elif choice == 2:
        do_something_else()
    elif choice == 3:
        break
    else:
        print "Try a different number"
</snippet></ROW><ROW><id>10827178</id><snippet>for line in molfile:
    if line.startswith("@"):
        mols.append([])
        mols[-1].append(line) # Keep first line
    else:
        mols[-1].append(line)
</snippet></ROW><ROW><id>10827178</id><snippet>for i in mols:
    out_filename = i[0].strip() + ".mol2"
    with open(out_filename, mode="w") as out_file:
        out_file.write(''.join(i));
</snippet></ROW><ROW><id>10827190</id><snippet>\u03b2</snippet></ROW><ROW><id>10827190</id><snippet>beta</snippet></ROW><ROW><id>10827190</id><snippet>u'...'</snippet></ROW><ROW><id>10827190</id><snippet>u'foo'</snippet></ROW><ROW><id>10827190</id><snippet>foo</snippet></ROW><ROW><id>10827190</id><snippet>u'\x66\x6f\x6f'</snippet></ROW><ROW><id>10827190</id><snippet>u'\u0066\u006f\u006f'</snippet></ROW><ROW><id>10827190</id><snippet>u'foo'</snippet></ROW><ROW><id>10827190</id><snippet>u'\u0066\u006f\u006f'</snippet></ROW><ROW><id>10827190</id><snippet>foo</snippet></ROW><ROW><id>10827190</id><snippet>u</snippet></ROW><ROW><id>10827190</id><snippet>print h.unescape('alpha &lt; &amp;beta;')</snippet></ROW><ROW><id>10827190</id><snippet>β</snippet></ROW><ROW><id>10827190</id><snippet>alpha &lt; β</snippet></ROW><ROW><id>10827190</id><snippet>β</snippet></ROW><ROW><id>10827297</id><snippet>for row in myColl.find():
    row['myvar'] = 123
    myColl.save(row)
</snippet></ROW><ROW><id>10827570</id><snippet>tree --charset ascii /home/pipitas &gt; pipitas-tree.txt
</snippet></ROW><ROW><id>10827570</id><snippet>text2pdf -o pipitas-tree.pdf -w 842 -h 595 -m 24 pipitas-tree.txt
</snippet></ROW><ROW><id>10827570</id><snippet>tree</snippet></ROW><ROW><id>10827570</id><snippet>text2pdf</snippet></ROW><ROW><id>10827658</id><snippet>def test(obj):
    obj.getNewObject().getNewObject().getNewObject()
</snippet></ROW><ROW><id>10827658</id><snippet>import dis
dis.dis(test)
</snippet></ROW><ROW><id>10827658</id><snippet>  2           0 LOAD_FAST                0 (obj)
              3 LOAD_ATTR                0 (getNewObject)
              6 CALL_FUNCTION            0
              9 LOAD_ATTR                0 (getNewObject)
             12 CALL_FUNCTION            0
             15 LOAD_ATTR                0 (getNewObject)
             18 CALL_FUNCTION            0
             21 POP_TOP             
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>10827658</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>10827658</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>10827794</id><snippet>logging</snippet></ROW><ROW><id>10827794</id><snippet>logging.getLogger()</snippet></ROW><ROW><id>10827798</id><snippet>import Host</snippet></ROW><ROW><id>10827798</id><snippet>import Host</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>some_function</snippet></ROW><ROW><id>10827798</id><snippet>SOME_GLOBAL</snippet></ROW><ROW><id>10827798</id><snippet>&gt;&gt;&gt; import Host
&gt;&gt;&gt; obj = Host.Host()
&gt;&gt;&gt; result = Host.some_function(1)
&gt;&gt;&gt; x = Host.SOME_GLOBAL
</snippet></ROW><ROW><id>10827798</id><snippet>'module' object is not callable</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>Host.Host</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>&gt;&gt;&gt; from Host import Host, some_function, SOME_GLOBAL
&gt;&gt;&gt; obj = Host()
&gt;&gt;&gt; result = some_function(1)
&gt;&gt;&gt; x = SOME_GLOBAL
</snippet></ROW><ROW><id>10827798</id><snippet>&gt;&gt;&gt; from Host import *
&gt;&gt;&gt; obj = Host()
&gt;&gt;&gt; # etc
</snippet></ROW><ROW><id>10827798</id><snippet>from Host import *</snippet></ROW><ROW><id>10827798</id><snippet>Host</snippet></ROW><ROW><id>10827798</id><snippet>import Host</snippet></ROW><ROW><id>10827798</id><snippet>reload(Host)</snippet></ROW><ROW><id>10827798</id><snippet>from Host</snippet></ROW><ROW><id>10827798</id><snippet>execfile</snippet></ROW><ROW><id>10827798</id><snippet>import</snippet></ROW><ROW><id>10827798</id><snippet>import</snippet></ROW><ROW><id>10827798</id><snippet>echo $PYTHONPATH
</snippet></ROW><ROW><id>10827798</id><snippet>/home/manish/project</snippet></ROW><ROW><id>10827798</id><snippet>ls -l /home/manish/project
</snippet></ROW><ROW><id>10827798</id><snippet>/home/manish/project</snippet></ROW><ROW><id>10827798</id><snippet>&gt;&gt;&gt; import Host
</snippet></ROW><ROW><id>10827798</id><snippet>import Host</snippet></ROW><ROW><id>10827798</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules[Host.__name__].__file__
&gt;&gt;&gt; obj = Host.Host()
</snippet></ROW><ROW><id>10827798</id><snippet>sys.modules[Host.__name__].__file__</snippet></ROW><ROW><id>10827798</id><snippet>import Host</snippet></ROW><ROW><id>10828136</id><snippet>data.append({res.name:url})
</snippet></ROW><ROW><id>10828136</id><snippet>data.append(url)
</snippet></ROW><ROW><id>10828136</id><snippet>onSelect: function(value, data){ window.location.replace(data); },
</snippet></ROW><ROW><id>10828261</id><snippet>callgrind_control</snippet></ROW><ROW><id>10828261</id><snippet>call</snippet></ROW><ROW><id>10828261</id><snippet>system</snippet></ROW><ROW><id>10828261</id><snippet>shell=True</snippet></ROW><ROW><id>10828261</id><snippet>from os import system,fork,getpid
from glob import glob
from subprocess import call
from multiprocessing import Process

def caller(filename):
  pid=getpid()
  call(["callgrind_control","--instr=on",str(pid)],shell=True)
  execfile(filename,{})
  call(["callgrind_control","--instr=off",str(pid)],shell=True)

for filename in glob("py/*.py"):
  p=Process(target=caller,args=(filename,))
  p.start()
  p.join()
</snippet></ROW><ROW><id>10828268</id><snippet>b = [ float(re.sub("[^0-9.]", " ", x)) for x in a ]
</snippet></ROW><ROW><id>10828268</id><snippet>import re

def extract_number(s):
    num = re.sub("[^0-9.]", " ", s)
    if re.search("\.", num):
        return float(num)
    else:
        return int(num)

a=['steps 4\n', 'time/step 0.005\n', '1.2\n', '-1.2\n', '0.22\n', '4\n']
b = [ float(re.sub("[^0-9.]", " ", x)) for x in a ]
c = [ extract_number(x) for x in a ]
</snippet></ROW><ROW><id>10828585</id><snippet>get</snippet></ROW><ROW><id>10828585</id><snippet> def get(self, *args, **kwargs):
     campaign = get_object_or_404(Campaign, id=self.kwargs['campaign_id'])
     ctx = self.get_context_data()
     ctx['campaign'] = campaign
     return self.render_to_response(ctx)
</snippet></ROW><ROW><id>10828585</id><snippet>post</snippet></ROW><ROW><id>10828585</id><snippet>get_form</snippet></ROW><ROW><id>10828585</id><snippet>FormView</snippet></ROW><ROW><id>10828585</id><snippet>FormMixin</snippet></ROW><ROW><id>10828585</id><snippet>ProcessFormView</snippet></ROW><ROW><id>10828589</id><snippet>for i in range(5):
    percent_complete += 20
    print '%d complete' % (percent_complete)
</snippet></ROW><ROW><id>10828589</id><snippet>d</snippet></ROW><ROW><id>10828730</id><snippet>if mainType == 'text':
    attachment = MIMEText(file.read())                      # &lt;- read file
elif mainType == 'message':
    attachment = email.message_from_file(file)              # &lt;- read file
elif mainType == 'image':
    attachment = MIMEImage(file.read(),_subType=subType)    # &lt;- read file
elif mainType == 'audio':
    attachment = MIMEAudio(file.read(),_subType=subType)    # &lt;- read file
else:
    attachment = MIMEBase(mainType, subType)

attachment.set_payload(file.read())           # &lt;- re-read file !
</snippet></ROW><ROW><id>10828730</id><snippet>else</snippet></ROW><ROW><id>10828821</id><snippet>import types
p = Person("Bar", -1)
new_hash_method = lambda obj: hash(obj.name)
p.__hash__ = types.MethodType(new_hash_method, p)
for i in xrange(0, len(union_list)):
    union_list[i].__hash__ = types.MethodType(new_hash_method, union_list[i])
set(union_list).intersection(p)
</snippet></ROW><ROW><id>10828821</id><snippet>types.MethodType</snippet></ROW><ROW><id>10828821</id><snippet>union_list</snippet></ROW><ROW><id>10828897</id><snippet>raw_input</snippet></ROW><ROW><id>10828897</id><snippet>sys.stdin</snippet></ROW><ROW><id>10828897</id><snippet>read()</snippet></ROW><ROW><id>10828897</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>10828897</id><snippet>print</snippet></ROW><ROW><id>10828897</id><snippet>.index()</snippet></ROW><ROW><id>10828897</id><snippet>itertools.islice</snippet></ROW><ROW><id>10828922</id><snippet>requests</snippet></ROW><ROW><id>10828922</id><snippet>requests</snippet></ROW><ROW><id>10829076</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>10829076</id><snippet>    master.grid_rowconfigure(3, weight=0)
    master.grid_rowconfigure(4, weight=1)
</snippet></ROW><ROW><id>10829130</id><snippet>^http://www\.example\.com/([a-zA-Z0-9\.]+?)(_[a-z]+)?(\(\d+\))?(\.html)?$
</snippet></ROW><ROW><id>10829130</id><snippet>?</snippet></ROW><ROW><id>10829130</id><snippet>.html</snippet></ROW><ROW><id>10829130</id><snippet>?</snippet></ROW><ROW><id>10829130</id><snippet>.html</snippet></ROW><ROW><id>10829130</id><snippet>^</snippet></ROW><ROW><id>10829130</id><snippet>$</snippet></ROW><ROW><id>10829381</id><snippet>a</snippet></ROW><ROW><id>10829381</id><snippet>b</snippet></ROW><ROW><id>10829381</id><snippet>c</snippet></ROW><ROW><id>10829381</id><snippet>import a

def _new_print_message(message):
    print "NEW:", message

a.print_message = _new_print_message

import b
b.execute()
</snippet></ROW><ROW><id>10829381</id><snippet>a</snippet></ROW><ROW><id>10829381</id><snippet>b</snippet></ROW><ROW><id>10829381</id><snippet>a</snippet></ROW><ROW><id>10829396</id><snippet>mount</snippet></ROW><ROW><id>10829396</id><snippet>noatime</snippet></ROW><ROW><id>10829396</id><snippet>/* &gt;&gt; fileutils.c from Python 3.2.3 */

FILE*
_Py_fopen(PyObject *path, const char *mode)
{
#ifdef MS_WINDOWS
    wchar_t wmode[10];
    int usize;

    usize = MultiByteToWideChar(CP_ACP, 0, mode, -1, wmode, sizeof(wmode));
    if (usize == 0)
        return NULL;

    return _wfopen(PyUnicode_AS_UNICODE(path), wmode);
#else
    FILE *f;
    PyObject *bytes = PyUnicode_EncodeFSDefault(path);
    if (bytes == NULL)
        return NULL;

    /* &gt;&gt; Plain fopen(), nothing fancy here. */
    f = fopen(PyBytes_AS_STRING(bytes), mode);
    Py_DECREF(bytes);
    return f;
#endif
}
</snippet></ROW><ROW><id>10829507</id><snippet>.*$.*#?</snippet></ROW><ROW><id>10829507</id><snippet>[^$]*#?</snippet></ROW><ROW><id>10829826</id><snippet>num = int(raw_input("input number: "))
print "\033[A                             \033[A"    # ansi escape arrow up then overwrite the line
</snippet></ROW><ROW><id>10830174</id><snippet>class customCombo(TableCellEditor, AbstractCellEditor):
</snippet></ROW><ROW><id>10830352</id><snippet>fr = {}
inp = open("file.txt",'r').read().strip().split('\n')
for line in map(str.split,inp):
    k = int(line[0])
    l = float(line[-1])
    key = abs(k-1) / 10 * 10

    if fr.has_key(key):
        fr[key] += l
    else:
        fr[key] = l

for k in sorted(fr.keys()):
    sum = fr[k]
    print '%d-%d\t%f' % (k+1 if k else 0, k+10, sum) 
</snippet></ROW><ROW><id>10830352</id><snippet>0-10    21.900000
11-20   36.400000
21-30   11.200000
</snippet></ROW><ROW><id>10830613</id><snippet>from pyparsing import *

expr   = Forward()
factor = Forward()
term   = Forward()

iand   = Literal("AND").suppress()
ior    = Literal("OR").suppress()
ieq    = Literal("=").suppress()
lpar   = Literal("(").suppress()
rpar   = Literal(")").suppress()
ident  = Word(alphas)
atom   = ident | lpar + expr + rpar

factor &lt;&lt; Group(atom + ZeroOrMore(ieq + atom))("equal")
term   &lt;&lt; Group(factor + ZeroOrMore(iand + term))("and")
expr   &lt;&lt; Group(term  + ZeroOrMore(ior + expr))("or")
</snippet></ROW><ROW><id>10830613</id><snippet>formula = "(assignee=cdecker OR due=tomorrow) AND status=open"
tree = expr.parseString(formula, parseAll=True)
print tree.asXML()
</snippet></ROW><ROW><id>10830781</id><snippet>chunkshape</snippet></ROW><ROW><id>10830781</id><snippet>chunkshape=(2000, 1)</snippet></ROW><ROW><id>10830781</id><snippet>chunkshape=(1, 2000)</snippet></ROW><ROW><id>10830846</id><snippet>&gt;&gt;&gt; example = [[1, 2, 3]]
&gt;&gt;&gt; example *= 2
&gt;&gt;&gt; example
[[1, 2, 3], [1, 2, 3]]
&gt;&gt;&gt; example[0][0] = 5
[[5, 2, 3], [5, 2, 3]]
&gt;&gt;&gt; example[0] is example[1]
True
</snippet></ROW><ROW><id>10830846</id><snippet>coefficient_array=[[0]*Coefficients_per_channel for i in xrange(Number_of_channels)]
</snippet></ROW><ROW><id>10830846</id><snippet>&gt;&gt;&gt; example = [[i, i, i] for i in xrange(2)]
&gt;&gt;&gt; example
[[0, 0, 0], [1, 1, 1]]
&gt;&gt;&gt; example[0][0] = 5
&gt;&gt;&gt; example
[[5, 0, 0], [1, 1, 1]]
&gt;&gt;&gt; example[0] is example[1]
False
</snippet></ROW><ROW><id>10831178</id><snippet>dict</snippet></ROW><ROW><id>10831178</id><snippet>.</snippet></ROW><ROW><id>10831178</id><snippet>dict.foo</snippet></ROW><ROW><id>10831178</id><snippet>dict["foo"]</snippet></ROW><ROW><id>10831281</id><snippet>ZODB</snippet></ROW><ROW><id>10831434</id><snippet>urllib</snippet></ROW><ROW><id>10831434</id><snippet>urllib2</snippet></ROW><ROW><id>10831434</id><snippet>*_PROXY</snippet></ROW><ROW><id>10831434</id><snippet>HTTP_PROXY</snippet></ROW><ROW><id>10831434</id><snippet>HTTPS_PROXY</snippet></ROW><ROW><id>10831434</id><snippet>urllib</snippet></ROW><ROW><id>10831434</id><snippet>NO_PROXY</snippet></ROW><ROW><id>10831973</id><snippet>collections.ChainMap</snippet></ROW><ROW><id>10831973</id><snippet>collections</snippet></ROW><ROW><id>10832015</id><snippet>sys.argv</snippet></ROW><ROW><id>10832015</id><snippet>import sys

def fooClicked():
    # Stuff to do when Foo was clicked

def barClicked():
    # Stuff to do when Bar was clicked

button = sys.argv[1]
if button == 'foo':
    fooClicked()
elif button == 'bar':
    barClicked()
</snippet></ROW><ROW><id>10832015</id><snippet>python.exe H:\Report_v7.py foo</snippet></ROW><ROW><id>10832015</id><snippet>fooClicked</snippet></ROW><ROW><id>10832015</id><snippet>optparse</snippet></ROW><ROW><id>10832015</id><snippet>argparse</snippet></ROW><ROW><id>10832036</id><snippet>tuple</snippet></ROW><ROW><id>10832036</id><snippet>&gt;&gt;&gt; example = [['AB', '132'], ['C D'], ['EFG'], ['HJ K', '2 1']]
&gt;&gt;&gt; [tuple(i) for i in example]
[('AB', '132'), ('C D',), ('EFG',), ('HJ K', '2 1')]
</snippet></ROW><ROW><id>10832036</id><snippet>map</snippet></ROW><ROW><id>10832036</id><snippet>&gt;&gt;&gt; map(tuple, example)
[('AB', '132'), ('C D',), ('EFG',), ('HJ K', '2 1')]
</snippet></ROW><ROW><id>10832163</id><snippet>fields = line.split()
</snippet></ROW><ROW><id>10832163</id><snippet>row.append(itemcount[row[1]])
</snippet></ROW><ROW><id>10832163</id><snippet>filename</snippet></ROW><ROW><id>10832163</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>10832163</id><snippet>with</snippet></ROW><ROW><id>10832163</id><snippet>t</snippet></ROW><ROW><id>10832163</id><snippet>import collections
with open(sys.argv[1], "r") as input:
    counts = collections.Counter(line.split()[1] for line in input)
    input.seek(0)
    with open("watout.csv", "w") as output:
        for line in input:
            count = counts[line.split()[1]]
            output.write(line.rstrip("\n") + "\t" + str(count) + "\n")
</snippet></ROW><ROW><id>10832335</id><snippet>is</snippet></ROW><ROW><id>10832335</id><snippet>True</snippet></ROW><ROW><id>10832335</id><snippet>a='this is a very long string'
b='this is a very long string'

a is b
False
</snippet></ROW><ROW><id>10832335</id><snippet>id(a)
62751232

id(b)
62664432
</snippet></ROW><ROW><id>10832335</id><snippet>==</snippet></ROW><ROW><id>10832335</id><snippet>True</snippet></ROW><ROW><id>10832335</id><snippet>a == b
True
</snippet></ROW><ROW><id>10832335</id><snippet>is</snippet></ROW><ROW><id>10832335</id><snippet>True</snippet></ROW><ROW><id>10832335</id><snippet>False</snippet></ROW><ROW><id>10832335</id><snippet>==</snippet></ROW><ROW><id>10832335</id><snippet>'3' is '3'
True
</snippet></ROW><ROW><id>10832335</id><snippet>'3' == '3'
True
</snippet></ROW><ROW><id>10832335</id><snippet>is</snippet></ROW><ROW><id>10832405</id><snippet>for (key, value) in set(aa.items()) &amp; set(bb.items()):
    print '%s: %s is present in both aa and bb' % (key, value)
</snippet></ROW><ROW><id>10832405</id><snippet>&amp;</snippet></ROW><ROW><id>10832405</id><snippet>set(aa.items()).intersection(set(bb.items()))
</snippet></ROW><ROW><id>10832405</id><snippet>for key in set(aa) &amp; set(bb):
    if aa[key] == bb[key]:
        print '%s: %s is present in both aa and bb' % (key, value)
</snippet></ROW><ROW><id>10832405</id><snippet>for (key, value) in aa.viewitems() &amp; bb.viewitems():
    print '%s: %s is present in both aa and bb' % (key, value)
</snippet></ROW><ROW><id>10832985</id><snippet>for i in detail:
    print dict.fromkeys(i, "Sandra")
</snippet></ROW><ROW><id>10832985</id><snippet>for i in detail:
    for key_in_i in i:
        {key_in_i: "Sandra"}
</snippet></ROW><ROW><id>10833137</id><snippet># forms.py
class LBooleanVForm(Form):
    def __init__(self,LTV, *args, **kwargs):
        super(LBooleanVForm, self).__init__(*args, **kwargs)
        self.fields[LTV.name] = BooleanField()

class LFloatVForm(Form):
    def __init__(self,LTV, *args, **kwargs):
        super(LFloatVForm, self).__init__(*args, **kwargs)
        self.fields[LTV.name] = FloatField()

class LTextVForm(Form):
    def __init__(self,LTV, *args, **kwargs):
        super(LTextVForm, self).__init__(*args, **kwargs)
        self.fields[LTV.name] = TextInput()

class LDateVForm(Form):
    def __init__(self,LTV, *args, **kwargs):
        super(LDateVForm, self).__init__(*args, **kwargs)
        self.fields[LTV.name] = DateField()

# views.py
ltv = LV.objects.filter(l_t=lt)
lvForm = []
for ltVars in ltv:
    if ltVars.type == 'bool':
        newField = LetterBooleanVariableForm(ltVars)
    elif ltVars.type == 'date':
        newField = LetterDateVariableForm(ltVars)
    elif ltVars.type == 'float':
        newField = LetterFloatVariableForm(ltVars)
    elif ltVars.type == 'text':
        newField = LetterTextVariableForm(ltVars)
    else:
        raise Http404
    lvForm.append(newField)
</snippet></ROW><ROW><id>10833139</id><snippet>headers = """GET / HTTP/1.0
Host: 10.2.0.12
User-Agent: Wget/1.12 (linux-gnu)
Accept: */*
Connection: Keep-Alive"""


headers = headers.splitlines()
firstLine = headers.pop(0)
(verb, url, version) = firstLine.split()
d = {'verb' : verb, 'url' : url, 'version' : version}
for h in headers:
    h = h.split(': ')
    if len(h) &lt; 2:
        continue
    field=h[0]
    value= h[1]
    d[field] = value

print d

print d['User-Agent']
print d['url']
</snippet></ROW><ROW><id>10833338</id><snippet>a.transpose()
</snippet></ROW><ROW><id>10833362</id><snippet>&gt;&gt;&gt; a
array([[1, 1, 1, 0, 0, 0, 0, 0, 0],
   [1, 1, 1, 0, 0, 0, 0, 0, 0],
   [1, 1, 1, 0, 0, 0, 0, 0, 0],
   [0, 0, 0, 2, 2, 2, 0, 0, 0],
   [0, 0, 0, 2, 2, 2, 0, 0, 0],
   [0, 0, 0, 2, 2, 2, 0, 0, 0],
   [0, 0, 0, 0, 0, 0, 3, 3, 3],
   [0, 0, 0, 0, 0, 0, 3, 3, 3],
   [0, 0, 0, 0, 0, 0, 3, 3, 3]]) 

&gt;&gt;&gt; M = 3
&gt;&gt;&gt; [a[i*M:(i+1)*M,i*M:(i+1)*M] for i in range(a.shape[0]/M)]
[array([[1, 1, 1],
   [1, 1, 1],
   [1, 1, 1]]), array([[2, 2, 2],
   [2, 2, 2],
   [2, 2, 2]]), array([[3, 3, 3],
   [3, 3, 3],
   [3, 3, 3]])]
</snippet></ROW><ROW><id>10833417</id><snippet>texttable</snippet></ROW><ROW><id>10833417</id><snippet>csv.writer</snippet></ROW><ROW><id>10833417</id><snippet>                  Title,                      Release Date,             Director            
And Now For Something Completely Different,       1971,              Ian MacNaughton        
Monty Python And The Holy Grail,                  1975,       Terry Gilliam and Terry Jones 
Monty Python's Life Of Brian,                     1979,                Terry Jones    
</snippet></ROW><ROW><id>10833417</id><snippet>from texttable import Texttable

# ----------------------------------------------------------------
# Imagine data to be generated by Scrapy, for each record:
# a dictionary of three items. The first set ot functions
# generate the data for use in the texttable function

def process_item(item):
    # This massages each record in preparation for writing to csv
    item['Title'] = item['Title'].encode('utf-8') + ','
    item['Release Date'] = item['Release Date'].encode('utf-8') + ','
    item['Director'] = item['Director'].encode('utf-8')
    return item

def initialise_dataset():
    data = [{'Title' : 'Title',
         'Release Date' : 'Release Date',
         'Director' : 'Director'
         }, # first item holds the table header
            {'Title' : 'And Now For Something Completely Different',
         'Release Date' : '1971',
         'Director' : 'Ian MacNaughton'
         },
        {'Title' : 'Monty Python And The Holy Grail',
         'Release Date' : '1975',
         'Director' : 'Terry Gilliam and Terry Jones'
         },
        {'Title' : "Monty Python's Life Of Brian",
         'Release Date' : '1979',
         'Director' : 'Terry Jones'
         }
        ]

    data = [ process_item(item) for item in data ]
    return data

def records(data):
    for item in data:
        yield [item['Title'], item['Release Date'], item['Director'] ]

# this ends the data simulation part
# --------------------------------------------------------

def create_table(data):
    # Create the table
    table = Texttable(max_width=0)
    table.set_deco(Texttable.HEADER)
    table.set_cols_align(["l", "c", "c"])
    table.add_rows( records(data) )

    # split, remove the underlining below the header
    # and pull together again. Many ways of cleaning this...
    tt = table.draw().split('\n')
    del tt[1] # remove the line under the header
    tt = '\n'.join(tt)
    return tt

if __name__ == '__main__':
    data = initialise_dataset()
    table = create_table(data)
    print table
</snippet></ROW><ROW><id>10833430</id><snippet>@_contextmanager
def failwrapper():
    try:
        yield
    except SystemExit:
        rollback()
        abort("********* Failed to execute deploy! *********")
</snippet></ROW><ROW><id>10833610</id><snippet>import struct

def readtoint(read):
    return struct.unpack('&lt;i', read)[0]
</snippet></ROW><ROW><id>10833610</id><snippet>&gt;&gt;&gt; readtoint('\xfe\xff\xff\xff')
-2
</snippet></ROW><ROW><id>10834087</id><snippet>for fileName in os.listdir('.'):
    if not fnmatch.fnmatch(fileName, '*.py'):
        print fileName
</snippet></ROW><ROW><id>10834087</id><snippet>for fileName in glob.glob('*.py'):
    print fileName
</snippet></ROW><ROW><id>10834419</id><snippet>import spynner

br = spynner.Browser() #you open it only once.

def crawling_js(url):
    br.load(url)
    text_page = br._get_html() #_get_html() to make sure you get the updated html
    return text_page 
</snippet></ROW><ROW><id>10834419</id><snippet>from crawler import crawling_js , br

l_url = ["https://www.google.com/", "https://www.tripadvisor.com/", ...]

for url in l_url:
    mytextpage = crawling_js(url)
    .. parse mytextpage....

br.close()
</snippet></ROW><ROW><id>10834588</id><snippet>os.rename()</snippet></ROW><ROW><id>10834588</id><snippet>w</snippet></ROW><ROW><id>10834588</id><snippet>os.rename(infile, newfilename)</snippet></ROW><ROW><id>10834588</id><snippet>output = open(infile + ".out", 'w')</snippet></ROW><ROW><id>10834984</id><snippet>[add(x, 2) for x in [1, 2, 3]]
</snippet></ROW><ROW><id>10834984</id><snippet>a = [1, 2, 3]

import functools
map(functools.partial(add, y=2), a)

import itertools
map(add, a, itertools.repeat(2, len(a)))
</snippet></ROW><ROW><id>10835259</id><snippet>&gt;&gt;&gt; from periodic import element
&gt;&gt;&gt; hydrogen = element('hydrogen')
&gt;&gt;&gt; hydrogen.mass
1.0079
</snippet></ROW><ROW><id>10835329</id><snippet>name = incoming.get('name')
age = incoming.get('age')
</snippet></ROW><ROW><id>10835329</id><snippet>.get()</snippet></ROW><ROW><id>10835558</id><snippet>print(content, file = f)
</snippet></ROW><ROW><id>10835558</id><snippet>print</snippet></ROW><ROW><id>10835558</id><snippet>bytes</snippet></ROW><ROW><id>10835558</id><snippet>content</snippet></ROW><ROW><id>10835558</id><snippet>str</snippet></ROW><ROW><id>10835558</id><snippet>print</snippet></ROW><ROW><id>10835558</id><snippet>file.write()</snippet></ROW><ROW><id>10835558</id><snippet>with open('maceio.jpg', 'wb') as f:
    f.write(content)
</snippet></ROW><ROW><id>10835814</id><snippet>import sys
import datetime
import time
from PyQt4 import QtCore, QtGui

class Main(QtGui.QMainWindow):
  def __init__(self, parent=None):
    super(Main, self).__init__(parent)       
    self.b = QtGui.QPushButton("exit", self, clicked=self.close)

  def myRun(self):
    while True:
      time.sleep(2)
      print "Print this + Show the Window???!!!"      

if __name__ == "__main__":
  app=QtGui.QApplication(sys.argv)
  myapp=Main()
  myapp.show()     

  thread = QtCore.QThread()
  thread.run = lambda myapp=myapp: myapp.myRun()
  thread.start()    

  app.connect(app, QtCore.SIGNAL("lastWindowClosed()"), app, QtCore.SLOT("quit()"))

  sys.exit(app.exec_())

  while thread.isAlive():
    #Make sure the rest of the GUI is responsive
    app.processEvents()
</snippet></ROW><ROW><id>10836343</id><snippet>import lxml.etree
doc = lxml.etree.parse('t.xml')
print doc.xpath('//element[text()="A"]')[0].text
print doc.xpath('//element[text()="A"]')[0].tag
</snippet></ROW><ROW><id>10836343</id><snippet>A
element
</snippet></ROW><ROW><id>10836356</id><snippet>&gt;&gt;&gt; 5556302616191343498765890791686005349041729624255239232159744 % 22
16L
&gt;&gt;&gt; 793714773254144 % 22
16
</snippet></ROW><ROW><id>10836834</id><snippet>values</snippet></ROW><ROW><id>10836834</id><snippet>for v in dictionList.values():
    if v['Type']=='Dog':
         print "Found a dog!"
</snippet></ROW><ROW><id>10836834</id><snippet>Type</snippet></ROW><ROW><id>10836946</id><snippet>def save_model(self, request, obj, form, change):        
    if not change:
        obj.slug = slugify(('%s') % obj.title)
    obj.save()
</snippet></ROW><ROW><id>10837046</id><snippet>print '{:10s} {:3d}  {:7.2f}'.format('xxx', 123, 98)
print '{:10s} {:3d}  {:7.2f}'.format('yyyy', 3, 1.0)
print '{:10s} {:3d}  {:7.2f}'.format('zz', 42, 123.34)
</snippet></ROW><ROW><id>10837046</id><snippet>xxx        123    98.00
yyyy         3     1.00
zz          42   123.34
</snippet></ROW><ROW><id>10837046</id><snippet>.format</snippet></ROW><ROW><id>10837046</id><snippet>print</snippet></ROW><ROW><id>10837046</id><snippet>10s</snippet></ROW><ROW><id>10837046</id><snippet>3d</snippet></ROW><ROW><id>10837046</id><snippet>7.2f</snippet></ROW><ROW><id>10837130</id><snippet>import wx

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Close Me")
        panel = wx.Panel(self)

        closeBtn = wx.Button(panel, label="Close")
        closeBtn.Bind(wx.EVT_BUTTON, self.onClose)

    #----------------------------------------------------------------------
    def onClose(self, event):
        """"""
        self.Close()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10837130</id><snippet>self.Destroy</snippet></ROW><ROW><id>10837130</id><snippet>self.Close()</snippet></ROW><ROW><id>10837130</id><snippet>self.Destroy()</snippet></ROW><ROW><id>10837130</id><snippet>self.stuff</snippet></ROW><ROW><id>10837130</id><snippet>self.Close()</snippet></ROW><ROW><id>10837130</id><snippet>self.Destroy()</snippet></ROW><ROW><id>10837182</id><snippet>for x in ('p1', 'p2', 'p3', 'q1', 'q2', 'q3', 'q4', 'q5', 'x1', 'x2'):
    try:
        f = form[x]
        if not f.filename: raise
        outfile = '%s/%s.wav' % (savepath, x)
        oggfile = '%s/%s.ogg' % (oggdir, x)
        open(outfile, 'wb').write(f.file.read())
        command = 'oggenc %s -o %s' % (outfile, oggfile)
        output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT)
    except:
        pass
</snippet></ROW><ROW><id>10837286</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self,*args,**kwargs):
        wx.Frame.__init__(self,*args,**kwargs)
        panel= wx.Panel(self)
        self.password_shown= False

        sizer= wx.BoxSizer(wx.VERTICAL)
        self.password_sizer= wx.BoxSizer(wx.HORIZONTAL)
        self.text_password= wx.TextCtrl(panel,style=wx.TE_PASSWORD)
        self.password_sizer.Add(self.text_password,0,wx.ALL,5)
        self.text_no_password= wx.TextCtrl(panel)
        self.text_no_password.Hide()
        self.password_sizer.Add(self.text_no_password,0,wx.ALL,5)
        sizer.Add(self.password_sizer)
        self.button= wx.Button(panel,-1,"Toggle Password")
        sizer.Add(self.button,0,wx.ALL,5)
        self.button.Bind(wx.EVT_BUTTON,self.OnButton)
        panel.SetSizer(sizer)

        self.Show()

    def OnButton(self,event):
        self.text_password.Show(self.password_shown)
        self.text_no_password.Show(not self.password_shown)
        if not self.password_shown:
            self.text_no_password.SetValue(self.text_password.GetValue())
            self.text_no_password.SetFocus()
        else:
            self.text_password.SetValue(self.text_no_password.GetValue())
            self.text_password.SetFocus()
        self.text_password.GetParent().Layout()
        self.password_shown= not self.password_shown


if __name__ == "__main__":
    app= wx.App(0)
    Frame(None)
    app.MainLoop()
</snippet></ROW><ROW><id>10837710</id><snippet> from crowd.forms import SearchForm
</snippet></ROW><ROW><id>10837710</id><snippet>from crowdfunder.models import Payment, Project, RewardLevel, ProjectUpdate, GalleryPhoto
</snippet></ROW><ROW><id>10837710</id><snippet>from models import Payment, Project, RewardLevel, ProjectUpdate, GalleryPhoto
</snippet></ROW><ROW><id>10837775</id><snippet>time.sleep</snippet></ROW><ROW><id>10837775</id><snippet>reactor.callLater</snippet></ROW><ROW><id>10837775</id><snippet>lineRate</snippet></ROW><ROW><id>10837941</id><snippet>s</snippet></ROW><ROW><id>10837941</id><snippet>s.split(":")[-2:]
</snippet></ROW><ROW><id>10837941</id><snippet>split()</snippet></ROW><ROW><id>10837941</id><snippet>[-2:]</snippet></ROW><ROW><id>10838202</id><snippet>EOFError</snippet></ROW><ROW><id>10838202</id><snippet>EOFError</snippet></ROW><ROW><id>10838227</id><snippet>SELECT content FROM log WHERE id =</snippet></ROW><ROW><id>10838227</id><snippet>SELECT content FROM log WHERE id IN (200, 200)</snippet></ROW><ROW><id>10838227</id><snippet>else:
    ids.append(id)
    ids.append(id)
</snippet></ROW><ROW><id>10838346</id><snippet>    def OpenButton(self, event):
        filedialog = wx.FileDialog(self, message = 'Open text file',
           defaultDir = '.',
            defaultFile = 'TestTOC.txt',
            wildcard = "Text source (*.txt)|*.txt|"  "All files (*.*)|*.*",
            style = wx.OPEN)
        if filedialog.ShowModal() == wx.ID_OK:
            self.filepath = filedialog.GetPath()
        event.Skip()

    def ReadButton(self, event):
         file=open(self.filepath,'r')    # the same path as above
         text=file.read() 
         file.close()  
</snippet></ROW><ROW><id>10838501</id><snippet>pcolormesh</snippet></ROW><ROW><id>10838501</id><snippet>import matplotlib.pyplot as plt
import numpy as np

# Generate some data...
# Note that all of these are _2D_ arrays, so that we can use meshgrid
# You'll need to "grid" your data to use pcolormesh if it's un-ordered points
theta, r = np.mgrid[0:2*np.pi:20j, 0:1:10j]
z = np.random.random(theta.size).reshape(theta.shape)


fig, (ax1, ax2) = plt.subplots(ncols=2, subplot_kw=dict(projection='polar'))


ax1.scatter(theta.flatten(), r.flatten(), c=z.flatten())
ax1.set_title('Scattered Points')

ax2.pcolormesh(theta, r, z)
ax2.set_title('Cells')

for ax in [ax1, ax2]:
    ax.set_ylim([0, 1])
    ax.set_yticklabels([])

plt.show()
</snippet></ROW><ROW><id>10838501</id><snippet>reshape</snippet></ROW><ROW><id>10838501</id><snippet>numpy.histogram2d</snippet></ROW><ROW><id>10838501</id><snippet>z</snippet></ROW><ROW><id>10838557</id><snippet>(doUpd == 1):</snippet></ROW><ROW><id>10838557</id><snippet>False</snippet></ROW><ROW><id>10838557</id><snippet>(doUpd == '1'):</snippet></ROW><ROW><id>10838557</id><snippet>name</snippet></ROW><ROW><id>10838557</id><snippet>print "&lt;input type=\"hidden\" id=\"mailUpdate\" name=\"mailUpdate\"&gt;&lt;/td&gt;&lt;/tr&gt;"
</snippet></ROW><ROW><id>10838707</id><snippet>super().__init__(x,y)</snippet></ROW><ROW><id>10838707</id><snippet>super(Point, self)</snippet></ROW><ROW><id>10838707</id><snippet>Circle</snippet></ROW><ROW><id>10838707</id><snippet>super(Circle, self)</snippet></ROW><ROW><id>10838707</id><snippet>super()</snippet></ROW><ROW><id>10838707</id><snippet>Circle</snippet></ROW><ROW><id>10838707</id><snippet>ToString()</snippet></ROW><ROW><id>10838707</id><snippet>        return super().ToString() + \
               ",{RADIUS=" + str(self.radius) + "}"
</snippet></ROW><ROW><id>10838707</id><snippet>super()</snippet></ROW><ROW><id>10838707</id><snippet>        return super(Circle, self).ToString() + \
               ",{RADIUS=" + str(self.radius) + "}"
</snippet></ROW><ROW><id>10838723</id><snippet>while True:
    subtotal = float(input("Enter the total price of your purchases (or 'exit' to quit) :\$").strip())
if subtotal.lower()=='exit':
    break
</snippet></ROW><ROW><id>10838723</id><snippet>main()</snippet></ROW><ROW><id>10838723</id><snippet>while</snippet></ROW><ROW><id>10838723</id><snippet>main()</snippet></ROW><ROW><id>10838723</id><snippet>subtotal</snippet></ROW><ROW><id>10838723</id><snippet>subtotal</snippet></ROW><ROW><id>10838723</id><snippet>tax</snippet></ROW><ROW><id>10838723</id><snippet>total</snippet></ROW><ROW><id>10838723</id><snippet>subtotal</snippet></ROW><ROW><id>10838723</id><snippet>while True:
    subtotal = float(input("Enter the total price of your purchases (or 'exit' to quit) :\$").strip())
    if subtotal.lower()=='exit':
        break
    tax = subtotal * nctaxrate
    total = subtotal + tax
</snippet></ROW><ROW><id>10838723</id><snippet>subtotal</snippet></ROW><ROW><id>10838723</id><snippet>total</snippet></ROW><ROW><id>10838723</id><snippet>tax</snippet></ROW><ROW><id>10838723</id><snippet>try...except</snippet></ROW><ROW><id>10839138</id><snippet>python setup.py build_ext --inplace</snippet></ROW><ROW><id>10839138</id><snippet># setup.py
from distutils.core import setup
from distutils.extension import Extension
setup(name="getting_started1",
    ext_modules=[
        Extension("getting_started1", ["getting_started1.cpp"],
        include_dirs=['boost_1_48_0'],
        libraries = ['boost_python-vc90-mt-1_48'],
        extra_compile_args=['/EHsc', '/FD', '/DBOOST_ALL_DYN_LINK=1']
        )
    ])
</snippet></ROW><ROW><id>10839138</id><snippet>getting_started1.pyd</snippet></ROW><ROW><id>10839138</id><snippet>myDLL.dll</snippet></ROW><ROW><id>10839242</id><snippet>class ConfigFile (dict):
    """
    Configuration file data
    """

    def __init__ (self, filename):
        """
        Parses config file.
        """

        from pyparsing import Suppress, Word, alphas, alphanums, nums, \
            delimitedList, restOfLine, printables, ZeroOrMore, Group, \
            Combine

        equal = Suppress ("=")
        lbrack = Suppress ("[")
        rbrack = Suppress ("]")
        delim = Suppress ("'")

        string = Word (printables, excludeChars = "'")
        identifier = Word (alphas, alphanums + '_')

        integer = Word (nums).setParseAction (lambda t: int (t[0]))
        real = Combine( Word(nums) + '.' + Word(nums) ).setParseAction (lambda t: float(t[0]))
        value = real | integer

        var_kwd = Suppress ("var")        
        load_kwd = Suppress ("load")
        list_kwd = Suppress ("list")            

        var_stm = Group (var_kwd + identifier + equal + value +
                         restOfLine.suppress ()).setParseAction (
                             lambda tok: tok[0].insert(len(tok[0]), 0))

        load_stm = Group (load_kwd + delim + string + delim +
                          restOfLine.suppress ()).setParseAction (
                              lambda tok: tok[0].insert(len(tok[0]), 1))

        list_stm = Group (list_kwd + identifier + equal + lbrack +
                          Group ( delimitedList (value, ",") ) +
                          rbrack + restOfLine.suppress ()).setParseAction (
                              lambda tok: tok[0].insert(len(tok[0]), 2))


        cnf_file = ZeroOrMore (var_stm | load_stm | list_stm)

        lines = cnf_file.parseFile (filename)
        self._lines = []
        for line in lines:
            self._lines.append ((line[-1], line[0]))
            if line[-1] != 1: dict.__setitem__(self, line[0], line[1])            
        self.__initialized = True
        # after initialisation, setting attributes is the same as setting an item

    def __getattr__ (self, key):
        try:
            return dict.__getitem__ (self, key)
        except KeyError:
            return None


    def __setattr__ (self, key, value):
        """Maps attributes to values. Only if we are initialised"""

        # this test allows attributes to be set in the __init__ method
        if not self.__dict__.has_key ('_ConfigFile__initialized'):
            return dict.__setattr__(self, key, value)

        # any normal attributes are handled normally
        elif self.__dict__.has_key (key): 
            dict.__setattr__(self, key, value)

        # takes care of including new 'load' statements
        elif key == 'load':
            if not isinstance (value, str):
                raise ValueError, "Invalid data type"
            self._lines.append ((1, value))

        # this is called when setting new attributes after __init__
        else:
            if not isinstance (value, int) and \
                not isinstance (value, float) and \
                not isinstance (value, list):
                raise ValueError, "Invalid data type"

            if dict.has_key (self, key):
                if type(dict.__getitem__(self, key)) != type (value):
                    raise ValueError, "Cannot modify data type."
            elif not isinstance (value, list): self._lines.append ((0, key))
            else: self._lines.append ((2, key))            
            dict.__setitem__(self, key, value)


    def Write (self, filename):
        """
        Write config file.
        """
        fid = open (filename, 'w')
        for d in self._lines:
            if d[0] == 0: fid.write ("var %s = %s\n" % (d[1], str(dict.__getitem__(self, d[1]))))
            elif d[0] == 1: fid.write ("file '%s'\n" % (d[1]))
            else: fid.write ("list %s = %s\n" % (d[1], str(dict.__getitem__(self, d[1]))))


if __name__ == "__main__":

    input="""var foo = 5
load 'filename.txt'
var bar = 6
list baz = [1, 2, 3, 4]"""

    file ("test.txt", 'w').write (input)
    config = ConfigFile ("test.txt")
    # Modify existent items
    config.foo = config.foo * 2
    # Add new items
    config.foo2 = [4,5,6,7]
    config.foo3 = 12.3456
    config.load = 'filenameX.txt'
    config.load = 'filenameXX.txt'
    config.Write ("test_new.txt")
</snippet></ROW><ROW><id>10839242</id><snippet>__getitem__, __setitem__
</snippet></ROW><ROW><id>10839242</id><snippet>__setitem__
</snippet></ROW><ROW><id>10839496</id><snippet>dict</snippet></ROW><ROW><id>10839496</id><snippet>dict</snippet></ROW><ROW><id>10839496</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>10839496</id><snippet>import numpy as np

# Lists can be modified, but preserve order. That's important in this case.
names = ['Name1', 'Name2', 'Name3']
# It's "S3" instead of "a3" for a string field in numpy, by the way
formats = ['S3', 'i4', 'f8'] 

# It's often cleaner to specify the dtype this way instead of as a giant string
dtype = dict(names=names, formats=formats)

# This won't preserve the order we're specifying things in!!
# If we iterate through it, things may be in any order.
header = dict(Name1='abc', Name2=456, Name3=3.45)

# Therefore, we'll be sure to pass things in in order...
# Also, np.array will expect a tuple instead of a list for a structured array...
values = tuple(header[name] for name in names)
header_array = np.array(values, dtype=dtype)

# We can access field in the array like this...
print header_array['Name2']

# And dump it to disk (similar to a C struct) with
header_array.tofile('test.dat')
</snippet></ROW><ROW><id>10839496</id><snippet>dict</snippet></ROW><ROW><id>10839496</id><snippet>import numpy as np

class SonarFile(object):
    # These define the format of the file header
    header_fields = ('num_frames', 'name1', 'name2', 'name3')
    header_formats = ('i4', 'f4', 'S10', '&gt;I4')

    def __init__(self, filename):
        self.infile = open(filename, 'r')
        dtype = dict(names=self.header_fields, formats=self.header_formats)

        # Read in the header as a numpy array (count=1 is important here!)
        self.header = np.fromfile(self.infile, dtype=dtype, count=1)

        # Store the position so we can "rewind" to the end of the header
        self.header_length = self.infile.tell()

        # You may or may not want to do this (If the field names can have
        # spaces, it's a bad idea). It will allow you to access things with
        # sonar_file.Name1 instead of sonar_file.header['Name1'], though.
        for field in self.header_fields:
            setattr(self, field, self.header[field])

    # __iter__ is a special function that defines what should happen when we  
    # try to iterate through an instance of this class.
    def __iter__(self):
        """Iterate through each frame in the dataset."""
        # Rewind to the end of the file header
        self.infile.seek(self.header_length)

        # Iterate through frames...
        for _ in range(self.num_frames):
            yield Frame(self.infile)

    def close(self):
        self.infile.close()

class Frame(object):
    header_fields = ('width', 'height', 'name')
    header_formats = ('i4', 'i4', 'S20')
    data_format = 'f4'

    def __init__(self, infile):
        dtype = dict(names=self.header_fields, formats=self.header_formats)
        self.header = np.fromfile(infile, dtype=dtype, count=1)

        # See discussion above...
        for field in self.header_fields:
            setattr(self, field, self.header[field])

        # I'm assuming that the size of the frame is in the frame header...
        ncols, nrows = self.width, self.height

        # Read the data in
        self.data = np.fromfile(infile, self.data_format, count=ncols * nrows)

        # And reshape it into a 2d array.
        # I'm assuming C-order, instead of Fortran order.
        # If it's fortran order, just do "data.reshape((ncols, nrows)).T"
        self.data = self.data.reshape((nrows, ncols))
</snippet></ROW><ROW><id>10839496</id><snippet>dataset = SonarFile('input.dat')

for frame in dataset:
    im = frame.data
    # Do something...
</snippet></ROW><ROW><id>10839538</id><snippet>punctuation = '''!$%*()_-=+\/.,&gt;&lt;:;'"?|'''
allowed = string.digits + string.letters + punctuation
filter(allowed.__contains__, s)
</snippet></ROW><ROW><id>10839538</id><snippet>s</snippet></ROW><ROW><id>10839583</id><snippet>p2</snippet></ROW><ROW><id>10839583</id><snippet>['wc', '-l']</snippet></ROW><ROW><id>10839583</id><snippet>['wc -l']</snippet></ROW><ROW><id>10839583</id><snippet>'wc -l'</snippet></ROW><ROW><id>10839583</id><snippet>p2</snippet></ROW><ROW><id>10839583</id><snippet>p1.stdout</snippet></ROW><ROW><id>10839583</id><snippet>def runCommands(thecust, thedevice):
    thepath='/smithy/%s/%s' % (thecust,thedevice)
    thefiles=glob.glob(thepath + '/*.smithy.xml')
    p1=subprocess.Popen(["grep", "&lt;record&gt;"] + thefiles, stdout=subprocess.PIPE)
    p2=subprocess.Popen(['wc', '-l'], stdin=p1.stdout, stdout=subprocess.PIPE)
    p1.stdout.close()
    thecount=p2.communicate()[0]
    p1.wait()
</snippet></ROW><ROW><id>10839644</id><snippet>json_string = json.dumps(cursor.fetchall())
</snippet></ROW><ROW><id>10839644</id><snippet>[["earning1", "date1"], ["earning2", "date2"], ...]</snippet></ROW><ROW><id>10839644</id><snippet>json_string = json.dumps(dict(cursor.fetchall()))
</snippet></ROW><ROW><id>10839644</id><snippet>earnings</snippet></ROW><ROW><id>10839644</id><snippet>{"earning1": "date1", "earning2": "date2", ...}</snippet></ROW><ROW><id>10839788</id><snippet>plt.xticks([1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>10839923</id><snippet>import zlib</snippet></ROW><ROW><id>10839925</id><snippet>python</snippet></ROW><ROW><id>10839925</id><snippet>&gt;&gt;&gt; foo = python self._setup['bar']
  File "&lt;stdin&gt;", line 1
    foo = python self._setup['bar']
                    ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>10839925</id><snippet>foo = self._setup['bar']
</snippet></ROW><ROW><id>10839925</id><snippet>self                     # Get the value of self (typically the current object)
self._setup              # Get the attribute "_setup" of that value
self._setup['bar']       # Get the item "bar" of the attribute value
foo = self._setup['bar'] # Assign the result to the variable foo
</snippet></ROW><ROW><id>10840019</id><snippet>np.fliplr(matrix)</snippet></ROW><ROW><id>10840019</id><snippet>np.flipud</snippet></ROW><ROW><id>10840019</id><snippet>np.triu_indices</snippet></ROW><ROW><id>10840019</id><snippet>np.tril_indices</snippet></ROW><ROW><id>10840019</id><snippet>&gt;&gt;&gt; matrix
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&gt;&gt;&gt; np.fliplr(matrix)[np.triu_indices(3)]
array([3, 2, 1, 5, 4, 7])
</snippet></ROW><ROW><id>10840234</id><snippet>post_save</snippet></ROW><ROW><id>10840234</id><snippet>def my_post_save_handler(sender, instance, **kwargs):
    post_save.disconnect(my_post_save_handler, sender=Order)
    instance.do_stuff()
    instance.save()
    post_save.connect(my_post_save_handler, sender=Order)
post_save.connect(my_post_save_handler, sender=Order)
</snippet></ROW><ROW><id>10840249</id><snippet>ax.plot</snippet></ROW><ROW><id>10840249</id><snippet>ax.plot(xs, z * np.ones(xs.shape), zs=ys, zdir='z', color=c)
</snippet></ROW><ROW><id>10840249</id><snippet>zs=ys</snippet></ROW><ROW><id>10840410</id><snippet>def foo():
    """This function does absolutely nothing"""
    pass
</snippet></ROW><ROW><id>10840410</id><snippet>help(foo)</snippet></ROW><ROW><id>10840410</id><snippet>foo.__doc__</snippet></ROW><ROW><id>10840410</id><snippet>a="This is a string literal"  #the string on the right side is a string literal, "a" is a string variable.
</snippet></ROW><ROW><id>10840410</id><snippet>foo("I'm passing this string literal to a function")
</snippet></ROW><ROW><id>10840410</id><snippet>'single quotes'
"double quotes"
""" triple-double quotes """  #This can contain line breaks!
</snippet></ROW><ROW><id>10840410</id><snippet>#This can contain line breaks too!  See?
''' triple-single 
    quotes '''
</snippet></ROW><ROW><id>10840458</id><snippet>direct_to_template</snippet></ROW><ROW><id>10840458</id><snippet>urls.py</snippet></ROW><ROW><id>10840458</id><snippet>url(r'^network/netmask/select/$', 'direct_to_template', {'template':'networks/subnet_network.html'}, name='subnet_network_detail')
</snippet></ROW><ROW><id>10840458</id><snippet>render</snippet></ROW><ROW><id>10840458</id><snippet>render_to_response</snippet></ROW><ROW><id>10840458</id><snippet>from django.shortcuts import render
...
return render('networks/subnet_network.html', extra_context)
</snippet></ROW><ROW><id>10840458</id><snippet>from django.shortcuts import render_to_response
from django.template import RequestContext
...
return render_to_response('networks/subnet_network.html', extra_context, RequestContext(request))
</snippet></ROW><ROW><id>10840586</id><snippet>try:
    os.remove(filename)
except OSError:
    pass
</snippet></ROW><ROW><id>10840586</id><snippet>os.path.exists()</snippet></ROW><ROW><id>10840586</id><snippet>import os, errno

def silentremove(filename):
    try:
        os.remove(filename)
    except OSError as e: # this would be "except OSError, e:" before Python 2.6
        if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            raise # re-raise exception if a different error occured
</snippet></ROW><ROW><id>10840796</id><snippet>import wx

# spoof the necessary matplotlib objects
class FakePlot:
    def __init__(self):
        self.figure = FakeFigure()
    def get_figure(self):
        return self.figure
class FakeFigure:
    def __init__(self):
        self.axes = [FakeAxis() for i in range(0,2)]
class FakeAxis:
    def __init__(self):
        self.lines = [FakeLine(i) for i in range(0, 4)]
class FakeLine:
    def __init__(self,i):
        self.label = "line #%s"%i
    def get_label(self):
        return self.label

class PlotEditFrame(wx.Frame):
    """
    This class holds the frame for plot editing tools
    """

    def __init__(self, parent, plot, size):
        """Constructor for PlotEditFrame"""
        wx.Frame.__init__(self, parent, -1, "Edit Plot", size=size)
        self.parent = parent
        self.plot = plot
        self.figure = plot.get_figure()
        self.advanced_options = None
        self.scroll = wx.ScrolledWindow(self, -1)
        self.InitControls()

    def InitControls(self):
        """Create labels and controls based on the figure's attributes"""

        # Get current axes labels
        self.lineCtrls = [( wx.StaticText(self.scroll, -1, "Column:"),
                            wx.StaticText(self.scroll, -1, "Color:"),
                            wx.StaticText(self.scroll, -1, ""))]

        for axis in self.figure.axes:
            for line in axis.lines:
                color = wx.Colour(255,0,0,0)
                lineTxt = wx.TextCtrl(self.scroll, -1, line.get_label(), size=(175,-1))
                lineColor = wx.TextCtrl(self.scroll, -1, "#%02x%02x%02x"%color.Get())
                lineBtn = wx.Button(self.scroll, -1, size=(25,25))
                lineBtn.SetBackgroundColour(color)
                self.lineCtrls.append((lineTxt, lineColor, lineBtn))

        # Place controls
        boxSizer = wx.BoxSizer(wx.VERTICAL)

        lineBox = wx.StaticBox(self, -1, "Lines")
        lineBoxSizer = wx.StaticBoxSizer(lineBox, wx.VERTICAL)
        lineSizer = wx.FlexGridSizer(rows=len(self.lineCtrls)+1, cols=4, vgap=3, hgap=3)
        for ctrls in self.lineCtrls:
            lineSizer.AddMany([(ctrls[0], 0, wx.ALIGN_LEFT | wx.EXPAND),
                               (ctrls[1], 0, wx.ALIGN_LEFT),
                               (ctrls[2], 0, wx.ALIGN_CENTER| wx.FIXED_MINSIZE),
                               ((3,3),    0, wx.ALIGN_CENTER)])
        lineSizer.AddGrowableCol(0)

        # Set size
        self.scroll.SetSizer(lineSizer)
        width = self.scroll.GetBestSize().width
        height = self.scroll.GetBestSize().height
        if height &gt; 400:
            height = 400
            width = width + 25 # button size
        self.scroll.SetSize((width, height))
        self.scroll.SetScrollbars(0, 1, 1,1)
        print "set scrollbars at %s x %s"%(width, height)

        lineBoxSizer.Add(self.scroll, 1, wx.EXPAND)

        boxSizer.Add(lineBoxSizer, 1, wx.EXPAND)

        self.SetSizer(boxSizer)
        self.SetAutoLayout(1)
        #self.Fit()

        height = self.GetSize().GetHeight()
        self.SetSizeHints(minH=height, maxH=height,
                                minW=width, maxW=width*5)

if __name__ == '__main__':
    app = wx.App(False)
    plot = FakePlot()
    frame = PlotEditFrame(None, plot, size=(300,300))
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10840796</id><snippet>lineBoxSizer.Add(self.scroll, 1, wx.EXPAND)    
boxSizer.Add(lineBoxSizer, 1, wx.EXPAND)
</snippet></ROW><ROW><id>10840845</id><snippet>from copy import deepcopy
listB = deepcopy(listA)
</snippet></ROW><ROW><id>10840944</id><snippet>*</snippet></ROW><ROW><id>10840944</id><snippet>?</snippet></ROW><ROW><id>10840944</id><snippet>re.findall(r"&lt;wx\.(?:.*?)&gt; &gt;", i)
</snippet></ROW><ROW><id>10840944</id><snippet>&lt;</snippet></ROW><ROW><id>10840944</id><snippet>&gt;</snippet></ROW><ROW><id>10840944</id><snippet>*</snippet></ROW><ROW><id>10840944</id><snippet>re.findall(r"&lt;wx\.[^&lt;]*&lt;[^&lt;]*&gt; &gt;", i)
</snippet></ROW><ROW><id>10841381</id><snippet>python</snippet></ROW><ROW><id>10841381</id><snippet>&gt;&gt;&gt; x = [1,2,3];
&gt;&gt;&gt; for i in x:
...     print(i);
... print('finished');
  File "&lt;stdin&gt;", line 3
    print('finished');
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; x = [1,2,3];
&gt;&gt;&gt; for i in x:
...     print(i);
... 
1
2
3
&gt;&gt;&gt; print('finished');
finished
</snippet></ROW><ROW><id>10841381</id><snippet>python</snippet></ROW><ROW><id>10841381</id><snippet>$ cat broken.py 
#!/usr/bin/python

x = [1,2,3];
for i in x:
    print(i);
print('finished');

$ ./broken.py 
1
2
3
finished
$ 
</snippet></ROW><ROW><id>10841476</id><snippet>jobs.append(job_server.submit(run, (cmd,), (), ('subprocess',)))
</snippet></ROW><ROW><id>10841476</id><snippet>jobs.append(job_server.submit(run, (cmd,), modules=('subprocess',)))
</snippet></ROW><ROW><id>10841609</id><snippet>(yearnum + yearnum / 4 - yearnum / 100 + yearnum / 400)</snippet></ROW><ROW><id>10841609</id><snippet>(497 * yearnum / 400) + 11) % 7)</snippet></ROW><ROW><id>10842016</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('echo "hello bob"')
['echo', 'hello bob']
</snippet></ROW><ROW><id>10842016</id><snippet>shlex</snippet></ROW><ROW><id>10842149</id><snippet>.+</snippet></ROW><ROW><id>10842149</id><snippet>;;;</snippet></ROW><ROW><id>10842149</id><snippet>;;;</snippet></ROW><ROW><id>10842149</id><snippet>.+</snippet></ROW><ROW><id>10842149</id><snippet>.+?</snippet></ROW><ROW><id>10842149</id><snippet>begin = re.search("begin .+?;;;", line)
</snippet></ROW><ROW><id>10842185</id><snippet>validator_factory</snippet></ROW><ROW><id>10842185</id><snippet>ip_version</snippet></ROW><ROW><id>10842185</id><snippet>ip_version</snippet></ROW><ROW><id>10842185</id><snippet>ipv4_validator</snippet></ROW><ROW><id>10842185</id><snippet>ipv6_validator</snippet></ROW><ROW><id>10842185</id><snippet>GenericIPAddressField</snippet></ROW><ROW><id>10842383</id><snippet>buttons</snippet></ROW><ROW><id>10842383</id><snippet>Rect()</snippet></ROW><ROW><id>10842383</id><snippet>click()</snippet></ROW><ROW><id>10842383</id><snippet>for event in pygame.event.get():    
    if event.type == MOUSEBUTTONDOWN :
        x, y = event.pos
        for button in buttons:
            if button.rect.collidepoint(x, y):
                print("play sound here.")

                # or, if button handles on clicking, by a defined function:
                button.click()
</snippet></ROW><ROW><id>10842615</id><snippet>Test.A</snippet></ROW><ROW><id>10842615</id><snippet>x.A</snippet></ROW><ROW><id>10842615</id><snippet>class Test:
    A = []  # a class attribute
    def __init__(self):
        self.a = []  # an instance attribute
</snippet></ROW><ROW><id>10842615</id><snippet>a</snippet></ROW><ROW><id>10842615</id><snippet>A</snippet></ROW><ROW><id>10842615</id><snippet>for i in xrange(5):
    x.A.append(i)
    x.a.append(i)  

with open('data', 'w') as f:
    pickle.dump(x,f)

with open('data') as f:
    y = pickle.load(f)

&gt;&gt;&gt; y.A
[0, 1, 2, 3, 4]
&gt;&gt;&gt; y.a
[0, 1, 2, 3, 4]
&gt;&gt;&gt; Test.A
[0, 1, 2, 3, 4]
&gt;&gt;&gt; Test.A = []  # resetting the class attribute
&gt;&gt;&gt; y.a 
[0, 1, 2, 3, 4]
&gt;&gt;&gt; y.A  # refers to the class attribute
[]
</snippet></ROW><ROW><id>10842655</id><snippet>--output-format=parseable'</snippet></ROW><ROW><id>10842655</id><snippet>#!/usr/bin/env python

import sys
from pylint import lint

print sys.argv[1:]
lint.Run(sys.argv[1:])
</snippet></ROW><ROW><id>10842655</id><snippet>['--output-format=parseable', '/Users/smithm5/test.py']
test.py:26 [C] Line too long (90/80)
…
</snippet></ROW><ROW><id>10842655</id><snippet>escape()</snippet></ROW><ROW><id>10842655</id><snippet>opts = ()</snippet></ROW><ROW><id>10842655</id><snippet>print line</snippet></ROW><ROW><id>10842806</id><snippet>self._speed + 5</snippet></ROW><ROW><id>10842806</id><snippet>self._speed = self._speed + 5</snippet></ROW><ROW><id>10842806</id><snippet>self._speed += 5</snippet></ROW><ROW><id>10843024</id><snippet>class check1:
    def helloworld(self):
        self.j = 5

check_instance=check1()
print (hasattr(check_instance,'j'))  #False -- j hasn't been set on check_instance yet
check_instance.helloworld()          #add j attribute to check_instance
print(check_instance.j)  #prints 5
</snippet></ROW><ROW><id>10843024</id><snippet>check_instance.k=6  #this works just fine.
</snippet></ROW><ROW><id>10843024</id><snippet>check_instance.j</snippet></ROW><ROW><id>10843024</id><snippet>check_instance.k</snippet></ROW><ROW><id>10843024</id><snippet>check_instance.helloworld()
</snippet></ROW><ROW><id>10843024</id><snippet>check1.helloworld(check_instance)
</snippet></ROW><ROW><id>10843024</id><snippet>self</snippet></ROW><ROW><id>10843024</id><snippet>class Foo(object):
    #define foolist at the class level 
    #(not at the instance level as self.foolist would be defined in a method)
    foolist=[]  

A=Foo()
B=Foo()

A.foolist.append("bar")
print (B.foolist)  # ["bar"]
print (A.foolist is B.foolist) #True -- A and B are sharing the same foolist variable.
</snippet></ROW><ROW><id>10843274</id><snippet>def post(self):
    member = Members.all().filter("author =", users.get_current_user()).get()
    event = Events()
    event.author = member
    event.put()
    self.redirect('/add')
</snippet></ROW><ROW><id>10843443</id><snippet>funcdict = {
  'echo': echocmd,
  'var': varcmd,
   ...
}

 ...

funcdict.get(arr[0], invalidcmd)(arr)
</snippet></ROW><ROW><id>10843494</id><snippet>def add_to_world(self, species, name, zone = 'retreat'):
    self.object_attr.setdefault(species, {})[name] = {'zone' : zone}
</snippet></ROW><ROW><id>10843517</id><snippet>(np.array([np.array(h)[...,:] == c for h in classes]).all(axis = -1) *
         (2 + np.arange(len(classes)))[:, None, None]).max(axis=0) - 1
</snippet></ROW><ROW><id>10843517</id><snippet>array([[-1, -1, -1],
       [ 3,  1, -1],
       [ 2,  2, -1]])
</snippet></ROW><ROW><id>10843591</id><snippet>glines = (line.strip() for line in lines)
</snippet></ROW><ROW><id>10843634</id><snippet>import numpy
import scipy.linalg

m = numpy.matrix([
    [1, 1, 1, 1, 1],
    [16, 8, 4, 2, 1],
    [81, 27, 9, 3, 1],
    [256, 64, 16, 4, 1],
    [625, 125, 25, 5, 1]
])

res = numpy.matrix([[1],[2],[3],[4],[8]])

print scipy.linalg.solve(m, res)
</snippet></ROW><ROW><id>10843634</id><snippet>[[ 0.125]
 [-1.25 ]
 [ 4.375]
 [-5.25 ]
 [ 3.   ]]
</snippet></ROW><ROW><id>10843804</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>10844066</id><snippet>(?&lt;!\d)((1[0-2])|(0?[0-9]))/(((1[0-9])|(2[0-9])|(3[0-1])|(0?[0-9])))(?!\d)
</snippet></ROW><ROW><id>10844083</id><snippet>import datetime
import urllib
import string
import random
import os
avatar = urlopen(url)

try:
    profile = Profile.objects.get(user=user)
except:
    profile = Profile.objects.create(user=user)

print profile
print "sdfffffffffffffffffffff"
filename_charset = string.ascii_letters + string.digits
filename_length = 10
file_save_dir = 'media/mugshots/'

filename = ''.join(random.choice(filename_charset)
                   for s in range(filename_length))

urllib.urlretrieve (url, os.path.join(file_save_dir, filename + '.png'))

profile.mugshot = 'mugshots/'+filename + '.png'


profile.save()
</snippet></ROW><ROW><id>10844242</id><snippet>report = "Total gold acquired: " + str(self.gold_total)
</snippet></ROW><ROW><id>10844242</id><snippet>report = "Total gold acquired: " + str(self.gold_total())
</snippet></ROW><ROW><id>10844242</id><snippet>gold_total</snippet></ROW><ROW><id>10844242</id><snippet>@property
def gold_total(self):
    ...
</snippet></ROW><ROW><id>10844581</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string2 = "THIS IS STRING2 7-A-4, 4-93-P"
&gt;&gt;&gt; re.split(r'[^,]\s+', string2)[-1]
'7-A-4, 4-93-P'
</snippet></ROW><ROW><id>10844590</id><snippet>d = {'one':(1,2,3), 'two':(3,2,1), 'three':(4,5,6)}
tuple(max(x) for x in zip(*d.values()))
</snippet></ROW><ROW><id>10844640</id><snippet>make_order_edit_form</snippet></ROW><ROW><id>10844640</id><snippet>ModelForm</snippet></ROW><ROW><id>10844640</id><snippet>form_cls = make_order_edit_form(fields)
order_form = form_cls(request.POST, instance=order)
</snippet></ROW><ROW><id>10844640</id><snippet>Form</snippet></ROW><ROW><id>10844640</id><snippet>class Form(BaseForm):
    "A collection of Fields, plus their associated data."
    # This is a separate class from BaseForm in order to abstract the way
    # self.fields is specified. This class (Form) is the one that does the
    # fancy metaclass stuff purely for the semantic sugar -- it allows one
    # to define a form using declarative syntax.
    # BaseForm itself has no way of designating self.fields.
    __metaclass__ = DeclarativeFieldsMetaclass
</snippet></ROW><ROW><id>10844640</id><snippet>Form</snippet></ROW><ROW><id>10844640</id><snippet>DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>10844640</id><snippet>Form</snippet></ROW><ROW><id>10844640</id><snippet>type()</snippet></ROW><ROW><id>10844640</id><snippet>type('ContactForm', (forms.Form,), {
    'name': forms.CharField(max_length=50),
    'email': forms.EmailField(),
    'message': forms.CharField(widget=forms.Textarea)}
# instead of
type('ContactForm', (forms.BaseForm,), { 'base_fields': fields })
</snippet></ROW><ROW><id>10844640</id><snippet>ModelForm</snippet></ROW><ROW><id>10844640</id><snippet>type</snippet></ROW><ROW><id>10844640</id><snippet>def make_order_edit_form(include_fields):
    d = {}
    class Meta:
        model = Order
        fields = include_fields
        widgets = custom_widgets 
    d = {'Meta':Meta}
    if 'fa_date' in include_fields:
        d['fa_date'] = CustomDateTimeField(label="first appointment time")
    return type('OrderEditForm', (forms.ModelForm,), d)
</snippet></ROW><ROW><id>10844760</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b[0] = 'WHOA!'
&gt;&gt;&gt; a
['WHOA!', 2, 3]
</snippet></ROW><ROW><id>10844760</id><snippet>e = d.copy()</snippet></ROW><ROW><id>10844760</id><snippet>a[1] = x</snippet></ROW><ROW><id>10844760</id><snippet>a.foo = bar</snippet></ROW><ROW><id>10844760</id><snippet>a</snippet></ROW><ROW><id>10845060</id><snippet>*</snippet></ROW><ROW><id>10845060</id><snippet>str</snippet></ROW><ROW><id>10845060</id><snippet>map</snippet></ROW><ROW><id>10845060</id><snippet>myfunc(*map(str, a))
</snippet></ROW><ROW><id>10845746</id><snippet>peaks_np = array([s.max() for s in segments])
</snippet></ROW><ROW><id>10845800</id><snippet>article.creator</snippet></ROW><ROW><id>10845800</id><snippet>User</snippet></ROW><ROW><id>10845800</id><snippet>request.user.username</snippet></ROW><ROW><id>10845800</id><snippet>request.user</snippet></ROW><ROW><id>10845814</id><snippet>__setattr__</snippet></ROW><ROW><id>10845907</id><snippet>Manager</snippet></ROW><ROW><id>10846997</id><snippet>    class StdoutRedirector(IORedirector):
        def write(self,str):
           self.TEXT_INFO.config(text=self.TEXT_INFO.cget('text') + str)
</snippet></ROW><ROW><id>10847069</id><snippet>from collections import defaultdict
myarray = defaultdict(dict)
myarray[4][5] = 34
</snippet></ROW><ROW><id>10847108</id><snippet>fn.f = 1</snippet></ROW><ROW><id>10847108</id><snippet>test.fn</snippet></ROW><ROW><id>10847108</id><snippet>self.fn</snippet></ROW><ROW><id>10847108</id><snippet>instancemethod</snippet></ROW><ROW><id>10847108</id><snippet>__get__</snippet></ROW><ROW><id>10847108</id><snippet>__get__</snippet></ROW><ROW><id>10847108</id><snippet>test.fn.im_func.f = 1
self.fn.im_func.f = 1
</snippet></ROW><ROW><id>10847310</id><snippet>print "created the piece: " + piece 
</snippet></ROW><ROW><id>10847310</id><snippet>piece</snippet></ROW><ROW><id>10847310</id><snippet>print "created the piece: %s" % piece 
</snippet></ROW><ROW><id>10847310</id><snippet>__unicode__</snippet></ROW><ROW><id>10847310</id><snippet>logging.info('created the piece: %s', piece)
</snippet></ROW><ROW><id>10847310</id><snippet>%</snippet></ROW><ROW><id>10847874</id><snippet>__init__</snippet></ROW><ROW><id>10847874</id><snippet>__init_</snippet></ROW><ROW><id>10847908</id><snippet># Python
# whatever.py
import sys
sys.stdout.write('abc')
sys.exit(0)

# In your shell
OUT=`python whatever.py`
echo $OUT
# Will print abc, and it's stored in the variable `OUT` for later consumption.
</snippet></ROW><ROW><id>10847908</id><snippet># Python
# whatever.py
import sys
sys.stdout.write('abc')
sys.exit(0)

# In a .bat file, or cli.
python whatever.py &gt; temp.txt
set /p OUT=&lt;temp.txt
# Creates/replaces a file called temp.txt containing the output of whatever.py
# then sets the `OUT` var with the contents of it.
</snippet></ROW><ROW><id>10847914</id><snippet>import numpy

x = numpy.array([1, 2, 3, 4, 5, 6])

numpy.mean(x.reshape(-1, 2), 1) # Prints array([ 1.5,  3.5,  5.5])
</snippet></ROW><ROW><id>10847914</id><snippet>2</snippet></ROW><ROW><id>10847914</id><snippet>reshape</snippet></ROW><ROW><id>10847914</id><snippet>n</snippet></ROW><ROW><id>10847914</id><snippet>x</snippet></ROW><ROW><id>10847914</id><snippet>def average(arr, n):
    end =  n * int(len(arr)/n)
    return numpy.mean(arr[:end].reshape(-1, n), 1)
</snippet></ROW><ROW><id>10847914</id><snippet>&gt;&gt;&gt; x = numpy.array([1, 2, 3, 4, 5, 6])
&gt;&gt;&gt; average(x, 2)
array([ 1.5,  3.5,  5.5])

&gt;&gt;&gt; x = numpy.array([1, 2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; average(x, 2)
array([ 1.5,  3.5,  5.5])
</snippet></ROW><ROW><id>10848002</id><snippet>import werkzeug

class SampleClass:
    def __init__(self):
        try:
            self.conn = MySQLdb.connect(host="host",user="user",passwd="passwd",db="db")
        except Exception as e:
            raise werkzeug.exceptions.HTTPException("Error: %s" % str(e) )

        self.cursor = self.conn.cursor(MySQLdb.cursors.DictCursor)
        form = cgi.FieldStorage()
        self.starttime = form["my_data"].value
</snippet></ROW><ROW><id>10848074</id><snippet>self.fake_client.copy</snippet></ROW><ROW><id>10848074</id><snippet>self.fake_client</snippet></ROW><ROW><id>10848074</id><snippet>self.fake_client("123")
self.fake_client.assert_called_with("123")
</snippet></ROW><ROW><id>10848074</id><snippet>copy</snippet></ROW><ROW><id>10848074</id><snippet>self.fake_client.copy("123")
self.fake_client.copy.assert_called_with("123")
</snippet></ROW><ROW><id>10848316</id><snippet>for retry in range(3):
    try:
        ... execute query ...
        return # Stop on success
    except e:
        if is_connection_broken_error(e):
             reconnect()
             continue
        raise

raise # throw if the retry fails too often
</snippet></ROW><ROW><id>10848506</id><snippet>In [1]: def myfunc(*args):
   ...:     print args
   ...:

In [2]: myfunc(1)
(1,)

In [3]: myfunc(1,2,3,4,5)
(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>10848556</id><snippet>vectorize</snippet></ROW><ROW><id>10848556</id><snippet>dist = numpy.sqrt(numpy.sum((d1-dr)**2, axis = 1))
</snippet></ROW><ROW><id>10848620</id><snippet>filtered = [x for x in os.listdir('.') if not any(fnmatch.fnmatch(x, p) for p in excluded)]
</snippet></ROW><ROW><id>10848620</id><snippet>filtered = [x for x in os.listdir('.') if not re.search(r'\.py~?$', x)]
</snippet></ROW><ROW><id>10848620</id><snippet>endswith</snippet></ROW><ROW><id>10848620</id><snippet>excluded = ('.py', '.py~')
filtered = [x for x in os.listdir('.') if not x.endswith(excluded)]
</snippet></ROW><ROW><id>10848959</id><snippet>update_idletasks</snippet></ROW><ROW><id>10848969</id><snippet>_VIEWSTATE\|([^|]*)
</snippet></ROW><ROW><id>10848969</id><snippet>(?:^|\|)_VIEWSTATE\|([^|]*)
</snippet></ROW><ROW><id>10849238</id><snippet>zip</snippet></ROW><ROW><id>10849238</id><snippet>for (a1, a2) in zip(arr1, arr2):
  if a1[0] == a2[0]:
      ##  do something.
</snippet></ROW><ROW><id>10849452</id><snippet>gauden</snippet></ROW><ROW><id>10849452</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>10849452</id><snippet>difflib</snippet></ROW><ROW><id>10849452</id><snippet>ratio()</snippet></ROW><ROW><id>10849452</id><snippet>0</snippet></ROW><ROW><id>10849452</id><snippet>1</snippet></ROW><ROW><id>10849452</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; difflib.SequenceMatcher(None,'no information available','n0 inf0rmation available').ratio()
0.91666666666666663
</snippet></ROW><ROW><id>10849452</id><snippet>get_close_matches</snippet></ROW><ROW><id>10849452</id><snippet>&gt;&gt;&gt; difflib.get_close_matches('unicorn', ['unicycle', 'uncorn', 'corny', 
                              'house'], cutoff=0.8)
['uncorn']
&gt;&gt;&gt; difflib.get_close_matches('unicorn', ['unicycle'  'uncorn', 'corny',
                              'house'], cutoff=0.5)
['uncorn', 'corny', 'unicycle']
</snippet></ROW><ROW><id>10849452</id><snippet>difflib.get_close_matches</snippet></ROW><ROW><id>10849452</id><snippet>import difflib
text = "Here is the text we are trying to match across to find the three word
        sequence n0 inf0rmation available I wonder if we will find it?"    
words = text.split()
three = [' '.join([i,j,k]) for i,j,k in zip(words, words[1:], words[2:])]
print difflib.get_close_matches('no information available', three, cutoff=0.9)
#Oyutput:
['n0 inf0rmation available']
</snippet></ROW><ROW><id>10849475</id><snippet>requests</snippet></ROW><ROW><id>10849934</id><snippet>rstrip('\x00')</snippet></ROW><ROW><id>10849934</id><snippet>fp.read(30).rstrip('\x00')
</snippet></ROW><ROW><id>10849934</id><snippet>&gt;&gt;&gt; 'abc\x00\x00\x00\x00'.rstrip('\x00')
'abc'
</snippet></ROW><ROW><id>10850024</id><snippet>dictConfig()</snippet></ROW><ROW><id>10850024</id><snippet>logutils</snippet></ROW><ROW><id>10850024</id><snippet>dictConfig()</snippet></ROW><ROW><id>10850024</id><snippet>logutils</snippet></ROW><ROW><id>10850024</id><snippet>dictConfig()</snippet></ROW><ROW><id>10850127</id><snippet>[]</snippet></ROW><ROW><id>10850127</id><snippet>open(name[, mode[, buffering]])
</snippet></ROW><ROW><id>10850127</id><snippet>open(filename, 'r')</snippet></ROW><ROW><id>10850127</id><snippet>open(filename)</snippet></ROW><ROW><id>10850127</id><snippet>buffering</snippet></ROW><ROW><id>10850292</id><snippet>ord()</snippet></ROW><ROW><id>10850292</id><snippet>import win32com.client

ldap="SELECT cn, mail, msExchMailboxGuid From 'LDAP://OU=XXXXXXXX,DC=center,DC=intranet,DC=sinotrans'"

c = win32com.client.Dispatch('ADODB.Connection')
c.Open('Provider=ADsDSOObject')

rs,rc = c.Execute(ldap)
rs.MoveFirst()
while not rs.EOF:
    for e in rs.fields:
        if e.Name != 'msExchMailboxGuid':
            print('{}: {}'.format(e.Name, e.Value))
        else:
            print('{}: {}'.format(e.Name, ''.join(['{:x}'.format(ord(x)) for x in e.Value]))
    print()
    rs.MoveNext()
</snippet></ROW><ROW><id>10850292</id><snippet>msExchMailboxGuid</snippet></ROW><ROW><id>10850292</id><snippet>msExchMailboxGuid</snippet></ROW><ROW><id>10850292</id><snippet>HexGuidToGuidStr</snippet></ROW><ROW><id>10850292</id><snippet>def hex_to_guid(s):
   return '-'.join([
       ''.join(s[8-2*x:10-2*x]  for x in range(1, 5)),
       ''.join(s[12-2*x:14-2*x] for x in range(1, 3)),
       ''.join(s[16-2*x:18-2*x] for x in range(1, 3)),
       s[16:20],
       s[20:]
   ])
</snippet></ROW><ROW><id>10850292</id><snippet>import win32com.client

ldap="SELECT cn, mail, msExchMailboxGuid From 'LDAP://OU=XXXXXXXX,DC=center,DC=intranet,DC=sinotrans'"

c = win32com.client.Dispatch('ADODB.Connection')
c.Open('Provider=ADsDSOObject')

rs,rc = c.Execute(ldap)
rs.MoveFirst()
while not rs.EOF:
    for e in rs.fields:
        if e.Name != 'msExchMailboxGuid':
            print('{}: {}'.format(e.Name, e.Value))
        else:
            if e.Value is not None:
                print('{}: {}'.format(e.Name, hex_to_guid(''.join(['{:x}'.format(ord(x)) for x in e.Value]))))
    print()
    rs.MoveNext()
</snippet></ROW><ROW><id>10850292</id><snippet>msExchMailboxGuid</snippet></ROW><ROW><id>10850372</id><snippet>mymodule.py</snippet></ROW><ROW><id>10850372</id><snippet>$ cat mymodule.py 
import sys

try:
  sys.exit(1)
except SystemExit:
  cmdline = "-user user1"
  sys.argv = ['config.py', cmdline]
  import config
</snippet></ROW><ROW><id>10850372</id><snippet>config.py</snippet></ROW><ROW><id>10850372</id><snippet>$ cat config.py 
print "Everything is ok for now"
</snippet></ROW><ROW><id>10850372</id><snippet>$ python mymodule.py 
Everything is ok for now
</snippet></ROW><ROW><id>10850372</id><snippet>SystemExit</snippet></ROW><ROW><id>10850372</id><snippet>config.py</snippet></ROW><ROW><id>10850372</id><snippet>config</snippet></ROW><ROW><id>10850372</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>10850372</id><snippet>except</snippet></ROW><ROW><id>10850372</id><snippet>import config # &lt;-- here...
try:
  sys.exit(1)
except SystemExit:
  try:    
    import config # &lt;-- and here
  except:
    print "errr"
</snippet></ROW><ROW><id>10850372</id><snippet>print "Everything is ok for now"
</snippet></ROW><ROW><id>10850372</id><snippet>def run():
    print "Everything is ok for now"
</snippet></ROW><ROW><id>10850372</id><snippet>import config # This line just imports, does not print nothing
config.run()  # OTOH, this one prints the line...
try:
  sys.exit(1)
except SystemExit:
  try:    
    config.run() # This one prints the line too
  except:
    print "errr"
</snippet></ROW><ROW><id>10850372</id><snippet>config.py</snippet></ROW><ROW><id>10850372</id><snippet>subprocess.call</snippet></ROW><ROW><id>10850372</id><snippet>sys.argv</snippet></ROW><ROW><id>10850372</id><snippet>import subprocess
# ...
subprocess.call(['python', 'config.py'])
try:
  sys.exit(1)
except SystemExit:
  try:
    subprocess.call(['python', 'config.py',  "-user", "user1"])  # Extra args
  except:    
    print "errr"
</snippet></ROW><ROW><id>10850680</id><snippet>ModelAdmin.save_formset</snippet></ROW><ROW><id>10850680</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def save_formset(self, *args, **kwargs):
        super(MyModelAdmin, self).save_formset(*args, **kwargs)
        # do your calculation here
</snippet></ROW><ROW><id>10850696</id><snippet>a='garbage'
def foo():pass
</snippet></ROW><ROW><id>10850696</id><snippet>def bar():
    return foobar()

def foobar():
    return "foobar is a cool word, don't you think?"
</snippet></ROW><ROW><id>10850696</id><snippet>def run_user(S):
    #S is the user's function as a string.
    lvars=None #make sure the name is in locals()
    lvars=set(locals())
    exec(S)  #exec isn't usually a good idea -- but I guess you're a very trusting person.
    usr_namespace=list(set(locals())-lvars)
    usr_func_name=usr_namespace[0]
    if(len(usr_namespace)&gt;1):
        raise ValueError("User input too much into the namespace!")

    usr_func=locals()[usr_func_name]
    usr_func()  #comment this out if you don't want to run the function immediately
    return usr_func

usr_string="""
def foo():
     a="Blah"
     print "Hello World! "+a
"""

func_handle=run_user(usr_string)  #prints "Hello World! Blah"
#and to demonstrate that we can pass a handle to the function around:...
func_handle() #prints "Hello World! Blah" again.  
</snippet></ROW><ROW><id>10850696</id><snippet>exec</snippet></ROW><ROW><id>10850696</id><snippet>execfile</snippet></ROW><ROW><id>10850696</id><snippet>{'__builtins__':None}</snippet></ROW><ROW><id>10850696</id><snippet>#python3.x
allowed=vars(__builtins__).copy()
allowed['__import__']=None
exec("import os",{'__builtins__':None},allowed)  #raises ImportError
exec("print(abs(-4))",{'__builtins__':None},allowed) #prints 4 as you'd expect.
</snippet></ROW><ROW><id>10850696</id><snippet>execfile</snippet></ROW><ROW><id>10850696</id><snippet>eval</snippet></ROW><ROW><id>10850696</id><snippet>a=5
b=eval('a+5')  #b == 10
</snippet></ROW><ROW><id>10850696</id><snippet>def f(a):
    return a+5
</snippet></ROW><ROW><id>10850696</id><snippet>a=5
b=eval('x+5') #won't work -- x isn't defined
</snippet></ROW><ROW><id>10850696</id><snippet>eval</snippet></ROW><ROW><id>10850696</id><snippet>def func(...):</snippet></ROW><ROW><id>10850696</id><snippet>return some_value</snippet></ROW><ROW><id>10850696</id><snippet>ss="""
def foo(x):
    return 5+x
"""

a=5
func=run_user(ss)
result=func(a)     #result = 10
</snippet></ROW><ROW><id>10850696</id><snippet>func</snippet></ROW><ROW><id>10851302</id><snippet>property</snippet></ROW><ROW><id>10851404</id><snippet>for line in code:
    line = line.replace( "begin", " :\n" + " " * 4 ).replace( ";;;", "\n" + " " * 4 ).replace( "end;", "\n" + " " * 4 )
</snippet></ROW><ROW><id>10851409</id><snippet>a1 == a2</snippet></ROW><ROW><id>10851409</id><snippet>In [1]: a1=[[1,44,55],
   ...:     [2,33,66],
   ...:     [3,77,91]]

In [2]: a2=[[1,44,55],
   ...:     [2,45,66], # &lt;- second element differs
   ...:     [3,77,91]]

In [3]: a1 == a2
Out[3]: False

In [4]: a1=[[1,44,55],
   ...:     [2,33,66],
   ...:     [3,77,91]]

In [5]: a2=[[1,44,55],
   ...:     [2,33,66],
   ...:     [3,77,91]]

In [6]: a1 == a2
Out[6]: True
</snippet></ROW><ROW><id>10851479</id><snippet>s = 'long string that I want to split up'
indices = [0,5,12,17]
parts = [s[i:j] for i,j in zip(indices, indices[1:]+[None])]
</snippet></ROW><ROW><id>10851479</id><snippet>['long ', 'string ', 'that ', 'I want to split up']
</snippet></ROW><ROW><id>10851479</id><snippet>print '\n'.join(parts)
</snippet></ROW><ROW><id>10851479</id><snippet>indices</snippet></ROW><ROW><id>10851479</id><snippet>s = 'long string that I want to split up'
indices = [0,5,12,17]
indices.append(None)
parts = [s[indices[i]:indices[i+1]] for i in xrange(len(indices)-1)]
</snippet></ROW><ROW><id>10851818</id><snippet>strB = strA.replace(...)</snippet></ROW><ROW><id>10851939</id><snippet>def function(Var1, Var2): 
    if Var2 == 0 and Var1 &gt; 0:
        print("Result One")
    elif Var2 == 1 and Var1 &gt; 0:
        print("Result Two")
    elif Var1 &lt; 1:
        print("Result Three")
    return Var1 - 1
function(1, 1)
</snippet></ROW><ROW><id>10852024</id><snippet>&gt;&gt;&gt; N['dog']
dog(n.)
&gt;&gt;&gt; N['dog'].getSenses()
('dog' in {noun: dog, domestic dog, Canis familiaris},
 'dog' in {noun: frump, dog}, 'dog' in {noun: dog},
 'dog' in {noun: cad, bounder, blackguard, dog, hound, heel},
 'dog' in {noun: pawl, detent, click, dog},
 'dog' in {noun: andiron, firedog, dog, dogiron})
</snippet></ROW><ROW><id>10852095</id><snippet>django.utils.importlib.py</snippet></ROW><ROW><id>10852095</id><snippet>if name.startswith('.'):
    if not package:
        raise TypeError("relative imports require the 'package' argument")
</snippet></ROW><ROW><id>10852095</id><snippet>.settings.py</snippet></ROW><ROW><id>10852194</id><snippet>.py</snippet></ROW><ROW><id>10852375</id><snippet>a = collections.defaultdict(list)
</snippet></ROW><ROW><id>10852375</id><snippet>b = ['a', 'b','c','d','e']
</snippet></ROW><ROW><id>10852375</id><snippet>for key in b:
    a[key].append(33) 
</snippet></ROW><ROW><id>10853118</id><snippet>num_buttons = 3
self.b_vars = [IntVar() for i in range(num_buttons)]
self.b = [CheckButton(self, variable=self.b_vars[i], text="%d." % (i + 1)) for i in range(num_buttons)]
for button in self.b:
    button.grid()
</snippet></ROW><ROW><id>10853474</id><snippet>@wait = Selenium::WebDriver::Wait.new(:timeout =&gt; 30)
#You can define as many as you want with various times
@wait_less = Selenium::WebDriver::Wait.new(:timeout =&gt; 15)
#and then
@wait.until { @driver.find_element(:id, "Submit") }
@driver.find_element(:id, "Submit").click
</snippet></ROW><ROW><id>10853474</id><snippet>@wait.until {@driver.window_handles.size &gt; 1}
</snippet></ROW><ROW><id>10853474</id><snippet>@wait_less.until {@driver.find_element(:tag_name =&gt; "body").text.include?("Some text")}
</snippet></ROW><ROW><id>10853519</id><snippet>mydataset = (
        ('Amy', '1', None, '1'),
        ('Kat', None, '1', '1'),
        ('Leo', None, None, '1')
)

def states(cols, data):
    """
    This function receives one of the tuples with data and returns a pair
    where the first element is the name from the tuple, and the second
    element is a set with all matched states. Well, at least *I* think
    it is more readable :)
    """
    name = data[0]
    states = set(state for state, value in zip(cols, data) if value == '1')
    return name, states

pairs = (states(state_cols, data) for data in mydataset)
# Since dicts can receive an iterator which yields pairs where the first one
# will become a key and the second one will become the value, I just pass
# a list with all pairs to the dict constructor.
print dict(pairs)
</snippet></ROW><ROW><id>10853519</id><snippet>{'Amy': set(['NY', 'NJ']), 'Leo': set(['NJ']), 'Kat': set(['NJ', 'TX'])}
</snippet></ROW><ROW><id>10853551</id><snippet>return dec2binr(n//2) + str(n%2)
</snippet></ROW><ROW><id>10853551</id><snippet>n%2</snippet></ROW><ROW><id>10853623</id><snippet>mysql-5.5.24-osx10.6-x86_64
</snippet></ROW><ROW><id>10853623</id><snippet>libmysqlclient.18.dylib</snippet></ROW><ROW><id>10854023</id><snippet>pexpect</snippet></ROW><ROW><id>10854023</id><snippet>def wait_for_prompt(session, prompt, timeout=1):
    gotprompt = 0
    while not gotprompt:
        session.expect(prompt, timeout=None)
        gotprompt = session.expect([".", pexpect.TIMEOUT], timeout=timeout)

child = pexpect.spawn("ssh ...")
wait_for_prompt(child, "[#&gt;]")
</snippet></ROW><ROW><id>10854218</id><snippet>capture=True</snippet></ROW><ROW><id>10854218</id><snippet>local()</snippet></ROW><ROW><id>10854218</id><snippet>local()</snippet></ROW><ROW><id>10854218</id><snippet>None</snippet></ROW><ROW><id>10854218</id><snippet>False</snippet></ROW><ROW><id>10854218</id><snippet>if</snippet></ROW><ROW><id>10854279</id><snippet>1.2246467991473532e-16</snippet></ROW><ROW><id>10854279</id><snippet>3.1415926535897931</snippet></ROW><ROW><id>10854279</id><snippet>math.pi</snippet></ROW><ROW><id>10854279</id><snippet>sin(pi)</snippet></ROW><ROW><id>10854279</id><snippet>print round(math.sin(math.pi), 15)
</snippet></ROW><ROW><id>10854379</id><snippet>good:(?P&lt;quote&gt;["'`])?(?P&lt;value&gt;(?(quote)((?!(?P=quote)).|((?=(?P=quote)).){2})*|[^;\s]*))(?(quote)(?P=quote)|)
bad :(?P&lt;quote&gt;["'`])?(?P&lt;value&gt;(?(quote)((?!(?P=quote)).|((?=(?P=quote)).){2})*|[^\s;]*))(?(quote)(?P=quote)|)
</snippet></ROW><ROW><id>10854509</id><snippet>clf()</snippet></ROW><ROW><id>10854509</id><snippet>from pylab import *</snippet></ROW><ROW><id>10854509</id><snippet>matplotlib</snippet></ROW><ROW><id>10854512</id><snippet>numpy.histogram</snippet></ROW><ROW><id>10854611</id><snippet>'x y z'</snippet></ROW><ROW><id>10854611</id><snippet>['x', 'y', 'z']</snippet></ROW><ROW><id>10854611</id><snippet>'x y z'.split()</snippet></ROW><ROW><id>10854611</id><snippet>len</snippet></ROW><ROW><id>10854611</id><snippet># don't use `list` as a variable name; it masks the built-in `list` constructor
str_list = ['a b', 'b c d e', 'c', 'd e f g h', 'e f g h i j', 'f g h', 'g h']
for s in str_list:
    split_list = s.split(' ')
    if len(split_list) &gt; 3 and split_list[3] == 'c':
        print "True"
    else:
        print "False"
</snippet></ROW><ROW><id>10854890</id><snippet>//set up a method on your model that returns your markers in JSON format,
//then load via ajax using jQuery or another library
$.get('/path/to/getMapMarkers', loadMarkers);

//or use the template to define it on the page so it looks like this
var stories = [{latitude:123.345,longitude:45.567},
    {latitude:123.345,longitude:45.567},
    {latitude:123.345,longitude:45.567}];

loadMarkers(stories);

//then either way, your function could look like this:
function loadMarkers(stories){
    for (var s in stories){
        var story = story[s];
        var point = new google.maps.LatLng(story.latitude, story.longitude);
        var marker = new google.maps.Marker({position: point, map: map}});
    }
}
</snippet></ROW><ROW><id>10855113</id><snippet>lista</snippet></ROW><ROW><id>10855113</id><snippet>for</snippet></ROW><ROW><id>10855113</id><snippet>for i in range(...)</snippet></ROW><ROW><id>10855113</id><snippet>for item in lista</snippet></ROW><ROW><id>10855113</id><snippet>if item == "begin"</snippet></ROW><ROW><id>10855166</id><snippet>os.popen4</snippet></ROW><ROW><id>10855166</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10855166</id><snippet>import subprocess
import shlex  #just so you don't need break "comand" into a list yourself ;)

p=subprocess.Popen(shlex.split(comand),stdout=subprocess.PIPE)
first_line_of_output=p.stdout.readline()
second_line_of_output=p.stdout.readline()
...
</snippet></ROW><ROW><id>10855193</id><snippet>import tweepy
import csv

keyword = 'McDonalds '
result = tweepy.api.search(q=keyword,rpp=1000,page=2, geocode= "34.085422,-117.900879,100mi" )

with open('some.csv', 'w') as acsv:
    w = csv.writer(acsv)
    w.writerow(('Keyword', 'Tweet', 'Lat', 'Lon'))
    for tweet in result:
        lat, lon = tweet.geo if tweet.geo else ('', '')
        w.writerow((keyword, tweet.text, lat, lon))
</snippet></ROW><ROW><id>10855523</id><snippet>__rmul__</snippet></ROW><ROW><id>10855523</id><snippet>int()</snippet></ROW><ROW><id>10855523</id><snippet>__mul__</snippet></ROW><ROW><id>10855523</id><snippet>class Matrix():
    # code

    def __rmul__(self, other):
        #define right multiplication here.

        #As Ignacio said, this is the ideal
        #place to define matrix-matrix multiplication as __rmul__() will
        #override __mul__().

    # code
</snippet></ROW><ROW><id>10855523</id><snippet>class Matrix(object):
</snippet></ROW><ROW><id>10855523</id><snippet>if type(other) == Matrix: ...
</snippet></ROW><ROW><id>10855702</id><snippet>&gt;&gt;&gt; x.__array_interface__['strides']
&gt;&gt;&gt; y.__array_interface__['strides']
(9, 1)
&gt;&gt;&gt; z.__array_interface__['strides']
(9, 3)
</snippet></ROW><ROW><id>10855702</id><snippet>if strides is not None:
    obj = obj.tobytes()
</snippet></ROW><ROW><id>10855702</id><snippet>tostring</snippet></ROW><ROW><id>10855702</id><snippet>tobytes</snippet></ROW><ROW><id>10855702</id><snippet># If obj is not contiguous, then the tostring method is called
# and {@link frombuffer} is used.
</snippet></ROW><ROW><id>10855702</id><snippet>tostring</snippet></ROW><ROW><id>10855702</id><snippet>if strides is not None:
    obj = obj.tostring()
</snippet></ROW><ROW><id>10855702</id><snippet>tobytes()</snippet></ROW><ROW><id>10855702</id><snippet>tostring()</snippet></ROW><ROW><id>10855702</id><snippet>Image.py</snippet></ROW><ROW><id>10855702</id><snippet>Python 3.2.3 (default, May  3 2012, 15:54:42) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; 
&gt;&gt;&gt; a = np.ones( ( 3,3,3), dtype='uint8' )
&gt;&gt;&gt; x = a[1,:,:]
&gt;&gt;&gt; y = a[:,1,:]
&gt;&gt;&gt; z = a[:,:,1]
&gt;&gt;&gt; 
&gt;&gt;&gt; imx = Image.fromarray(x)  # ok
&gt;&gt;&gt; imy = Image.fromarray(y)  # now no error!
&gt;&gt;&gt; imz = Image.fromarray(z)  # now no error!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10855925</id><snippet>A file_path1
R file_path2
R file_path3
A file_path4
M file_path5
</snippet></ROW><ROW><id>10856029</id><snippet>be = []
for e in G.edges_iter():
    if G.edge[e[0]][e[1]]['color'] == 'blue': # or G[e[0]][e[1]]['color']
        be.append(e)
</snippet></ROW><ROW><id>10856029</id><snippet>be = [(n1, n2) for n1, n2 in G.edges_iter() if G.edge[n1][n2]['color'] == 'blue']
</snippet></ROW><ROW><id>10856029</id><snippet>random</snippet></ROW><ROW><id>10856029</id><snippet>choice</snippet></ROW><ROW><id>10856029</id><snippet>sample</snippet></ROW><ROW><id>10856029</id><snippet>import random

# Select one random edge...
random_blue_edge = random.choice(be)

# ... or several random edges, 3 in this case
random_blue_edges = random.sample(be, 3)
</snippet></ROW><ROW><id>10856029</id><snippet>be</snippet></ROW><ROW><id>10856029</id><snippet>random.choice</snippet></ROW><ROW><id>10856029</id><snippet>random.sample</snippet></ROW><ROW><id>10856029</id><snippet>random.choice</snippet></ROW><ROW><id>10856029</id><snippet>IndexError</snippet></ROW><ROW><id>10856029</id><snippet>random.sample</snippet></ROW><ROW><id>10856029</id><snippet>ValueError</snippet></ROW><ROW><id>10856232</id><snippet>FOREIGN KEYS</snippet></ROW><ROW><id>10856232</id><snippet>CREATE TABLE synonym (
    SynID INTEGER,
    WordID1 INTEGER,
    WordID2 INTEGER,
    FOREIGN KEY (WordID1) REFERENCES word(ValID),
    FOREIGN KEY (WordID2) REFERENCES word(ValID)
);

CREATE TABLE antonym (
    AntID INTEGER,
    WordID1 INTEGER,
    WordID2 INTEGER,
    FOREIGN KEY (WordID1) REFERENCES word(ValID),
    FOREIGN KEY (WordID2) REFERENCES word(ValID) 
);
</snippet></ROW><ROW><id>10856232</id><snippet>ValId  Val        Eaxmples
1      'hot'      'the water is hot\n she's hot\n'
2      'warm'     '...'
3      'cold'     '...'
4      'freezing' '...'
</snippet></ROW><ROW><id>10856232</id><snippet>SynID  WordID1  WordID2
1      1        2
2      3        4
</snippet></ROW><ROW><id>10856232</id><snippet>AntID  WordID1  WordID2
1      1        3
2      1        4
3      2        3
4      2        4
</snippet></ROW><ROW><id>10856651</id><snippet>@compiles(group_concat, 'mysql')
def _group_concat_mysql(element, compiler, **kw):
    return "GROUP_CONCAT({0} SEPARATOR {1})".format(
                compiler.process(element.clauses.clauses[0]),
                compiler.process(element.clauses.clauses[1]) \
                    if len(element.clauses) == 2 else ",",
            )
</snippet></ROW><ROW><id>10856676</id><snippet>s.strip()</snippet></ROW><ROW><id>10856676</id><snippet>[NESW]</snippet></ROW><ROW><id>10856676</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('\A(\d+)([NESW])', '16N')
[('16', 'N')]
&gt;&gt;&gt; re.findall('\A(\d+)([NESW])', '15-16N')
[]
&gt;&gt;&gt; re.findall('\A(\d+)-(\d+)([NESW])', '15-16N')
[('15', '16', 'N')]
&gt;&gt;&gt; re.findall('\A(\d+)-(\d+)([NESW])', '16N')
[]
</snippet></ROW><ROW><id>10856676</id><snippet>'\A(\d+)([NESW])'</snippet></ROW><ROW><id>10856676</id><snippet>&gt;&gt;&gt; vals = re.findall('\A(\d+)([NESW])', '16N')[0]
&gt;&gt;&gt; ','.join(vals)
'16,N'
&gt;&gt;&gt; vals = re.findall('(\d+)-(\d+)([NESW])', '15-16N')[0]
&gt;&gt;&gt; ',,' + ','.join(vals)
',,15,16,N'
</snippet></ROW><ROW><id>10856716</id><snippet>imp.find_module()</snippet></ROW><ROW><id>10856716</id><snippet>&gt;&gt;&gt; import imp
&gt;&gt;&gt; imp.find_module('test') # A file I created at my current dir
(&lt;open file 'test.py', mode 'U' at 0x8d84e90&gt;, 'test.py', ('.py', 'U', 1))
&gt;&gt;&gt; imp.find_module('sys')  # A system module
(None, 'sys', ('', '', 6))
&gt;&gt;&gt; imp.find_module('lxml') # lxml, which I installed with pip
(None, '/usr/lib/python2.7/dist-packages/lxml', ('', '', 5))
&gt;&gt;&gt; imp.find_module('lxml')[1]
'/usr/lib/python2.7/dist-packages/lxml'
</snippet></ROW><ROW><id>10856792</id><snippet>line=f.readline()
subprocess.Popen([program]+line.split())
</snippet></ROW><ROW><id>10856792</id><snippet>program "arg1 arg2 arg3"</snippet></ROW><ROW><id>10856792</id><snippet>with open('test.dat','r') as f:
for line in f:
    #you could use shlex.split(line) as well -- that will preserve quotes, etc.
    subprocess.Popen([program]+line.split())
</snippet></ROW><ROW><id>10856973</id><snippet>UnboundLocalError: local variable 'token' referenced before assignment
</snippet></ROW><ROW><id>10856973</id><snippet>token</snippet></ROW><ROW><id>10856973</id><snippet>def get(url):
    global token
    ...
</snippet></ROW><ROW><id>10857282</id><snippet>event</snippet></ROW><ROW><id>10857282</id><snippet>GetSelections</snippet></ROW><ROW><id>10857282</id><snippet>GetSelection</snippet></ROW><ROW><id>10857282</id><snippet>ItemChecked</snippet></ROW><ROW><id>10857282</id><snippet>custom_tree</snippet></ROW><ROW><id>10857282</id><snippet>self.custom_tree</snippet></ROW><ROW><id>10857282</id><snippet>self.custom_tree.GetSelections()</snippet></ROW><ROW><id>10857282</id><snippet>ItemChecked</snippet></ROW><ROW><id>10857282</id><snippet>print(dir(event))</snippet></ROW><ROW><id>10857282</id><snippet>self.checked_items</snippet></ROW><ROW><id>10857282</id><snippet>ItemChecked</snippet></ROW><ROW><id>10857282</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, parent):
        # ....
        self.checked_items = []
        # ....

    def ItemChecked(self, event):
        if event.IsChecked():
            self.checked_items.append(event.GetItem())
            # or to store the item's text instead, you could do ...
            # self.checked_items.append(self.custom_tree.GetItemText(event.GetItem()))
        else:
            self.checked_items.remove(event.GetItem())
            # or ... 
            # self.checked_items.remove(self.custom_tree.GetItemText(event.GetItem()))
</snippet></ROW><ROW><id>10857305</id><snippet>from pyparsing import *
num = Word(nums)
accessionDate = Combine(num + "/" + num + "/" + num)("accDate")
accessionNumber = Combine("S" + num + "-" + num)("accNum")
patMedicalRecordNum = Combine(num + "/" + num + "-" + num + "-" + num)("patientNum")
gleason = Group("GLEASON" + Optional("SCORE:") + num("left") + "+" + num("right") + "=" + num("total"))
assert 'GLEASON 5+4=9' == gleason
assert 'GLEASON SCORE:  3 + 3 = 6' == gleason

patientData = Group(accessionDate + accessionNumber + patMedicalRecordNum)
assert '01/02/11  S11-4444 20/111-22-3333' == patientData

partMatch = patientData("patientData") | gleason("gleason")

lastPatientData = None
for match in partMatch.searchString(data):
    if match.patientData:
        lastPatientData = match
    elif match.gleason:
        if lastPatientData is None:
            print "bad!"
            continue
        print "{0.accDate}: {0.accNum} {0.patientNum} Gleason({1.left}+{1.right}={1.total})".format(
                        lastPatientData.patientData, match.gleason
                        )
</snippet></ROW><ROW><id>10857305</id><snippet>01/01/11: S11-55555 20/444-55-6666 Gleason(5+4=9)
01/02/11: S11-4444 20/111-22-3333 Gleason(3+3=6)
</snippet></ROW><ROW><id>10857391</id><snippet>pairwise</snippet></ROW><ROW><id>10857391</id><snippet>itertools</snippet></ROW><ROW><id>10857391</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</snippet></ROW><ROW><id>10857391</id><snippet>for x, x_next in pairwise(the_list):
    ...
</snippet></ROW><ROW><id>10857391</id><snippet>zip</snippet></ROW><ROW><id>10857391</id><snippet>for x, x_next in zip(the_list, the_list[1:]):
    ...
</snippet></ROW><ROW><id>10857509</id><snippet>with open("data.txt") as inf:
    data = {name.strip():int(num) for name,num in zip(inf, inf))
</snippet></ROW><ROW><id>10857509</id><snippet>{'Mary': 156, 'Sue': 160, 'Jenn': 154}
</snippet></ROW><ROW><id>10857509</id><snippet>"Mary,Jade,Jenn\n".split(',', 1)
</snippet></ROW><ROW><id>10857509</id><snippet>["Mary", "Jade,Jenn\n"]
</snippet></ROW><ROW><id>10857509</id><snippet>name = in_string.split(',', 1)[0]    # =&gt; "Mary"
</snippet></ROW><ROW><id>10857677</id><snippet>Jan = Mar = May = ... = range(1, 32)
</snippet></ROW><ROW><id>10857682</id><snippet>with open("test_m.rdb") as inf:
    results = [(i[2],i[4]) for i in (line.split() for line in inf)]

result_string = ",".join(str(res) for res in results)
</snippet></ROW><ROW><id>10857682</id><snippet>result_string = ", ".join("('{2}', '{4}')".format(*res) for res in results)
</snippet></ROW><ROW><id>10857802</id><snippet>setJavascriptEnabled(true)</snippet></ROW><ROW><id>10858155</id><snippet>&gt;&gt;&gt; matrix = [[1,2,3,4],[9,8,7,6],[4,8,2,6]]
&gt;&gt;&gt; dict(enumerate(zip(*matrix)))
{0: (1, 5, 4), 3: (4, 8, 6), 2: (3, 7, 2), 1: (2, 6, 8)}    
&gt;&gt;&gt; matrix = []
&gt;&gt;&gt; dict(enumerate(zip(*matrix)))
{}
</snippet></ROW><ROW><id>10858157</id><snippet>jist</snippet></ROW><ROW><id>10858157</id><snippet>from collections import defaultdict

game_dict = {}  # keyed by (game, player, round) tuple
game_player_ix = defaultdict(list)
game_round_ix = defaultdict(list)

def add_action(game, player, round):
    game_dict[(game, round, player)] = action # track the action in the main dict
    game_player_ix[(game, player)].append(round)  # keep an index for lookups by player
    game_round_ix[(game, round)].append(player) # another index for lookups by round

def get_all_player_actions(game, player):
    return (game_dict[(game,player,round)] for round in game_round_ix[(game, player)]) # iterator

def get_all_round_actions(game, round):
    return (game_dict[(game,player,round)] for player in game_player_ix[(game, round)]) # iterator
</snippet></ROW><ROW><id>10858290</id><snippet>manage.py</snippet></ROW><ROW><id>10858462</id><snippet>Popen</snippet></ROW><ROW><id>10858524</id><snippet>from itertools import islice
with open('file.txt', 'r') as f:
    # iterate over every 3rd line, starting with the 2nd
    for line in islice(f, 1, None, 3):
        parts = line.split()
        print 'Event'
        # iterate over 3-element chunks
        for x in zip(*(iter(parts),) * 3):
            print 'Disconnect branch from bus %s to %s circuit %s' % x
        print 'end'
</snippet></ROW><ROW><id>10858524</id><snippet>Event
Disconnect branch from bus 123 to 234 circuit 1
Disconnect branch from bus 456 to 876 circuit 1
Disconnect branch from bus 876 to 745 circuit 1
end
Event
Disconnect branch from bus 235 to 876 circuit 1
Disconnect branch from bus 647 to 987 circuit 1
Disconnect branch from bus 098 to 765 circuit 1
Disconnect branch from bus 234 to 546 circuit 1
end
</snippet></ROW><ROW><id>10858586</id><snippet>filter(lambda x: x.age == 30, myList)
</snippet></ROW><ROW><id>10858612</id><snippet>cookies = {"username": "USERNAME", "session": "xxxxxxx"...}
</snippet></ROW><ROW><id>10858612</id><snippet>cookies = [{
    "name": "username",
    "value": "USERNAME",
    "domain": "domain",
    "path": "path",
    "secure": "secure",
}]
</snippet></ROW><ROW><id>10858612</id><snippet>import cookielib
import urllib2

cj = cookielib.CookieJar()

for cookie in cookies:
    c = cookielib.Cookie(version=1,
                         name=cookie["name"],
                         value=cookie["value"],
                         port=None,
                         port_specified=False,
                         domain=cookie["domain"],
                         domain_specified=False,
                         domain_initial_dot=False,
                         path=cookie["path"],
                         path_specified=True,
                         secure=cookie["secure"],
                         expires=None,
                         discard=True,
                         comment=None,
                         comment_url=None,
                         rest={'HttpOnly': None},
                         rfc2109=False)
    cj.set_cookie(c)

opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
opener.open(urllib2.Request('http://www.example.com')
</snippet></ROW><ROW><id>10859029</id><snippet>#. `question 1`_
#. `question 2`_

.. _question 1:
the answer to question 1
</snippet></ROW><ROW><id>10859029</id><snippet>.. _List of questions:
...

.. _question 1:
the answer to question 1
`List of questions`_
</snippet></ROW><ROW><id>10859168</id><snippet>i</snippet></ROW><ROW><id>10859168</id><snippet>deep_reverse</snippet></ROW><ROW><id>10859168</id><snippet>i</snippet></ROW><ROW><id>10859168</id><snippet>def is_list(p):
    return isinstance(p, list)

def deep_reverse(a):
    a.reverse()
    for i in a:
        if is_list(i):
            deep_reverse(i)  # &lt;=== This is what changed
            print a
</snippet></ROW><ROW><id>10859430</id><snippet>$VIRTUAL_ENV/lib/python2.7/site-packages</snippet></ROW><ROW><id>10859430</id><snippet>workon myvirtualenv
pip install ipython
</snippet></ROW><ROW><id>10859430</id><snippet>import sys
sys.path
</snippet></ROW><ROW><id>10859473</id><snippet>PyObject_CallMethod()</snippet></ROW><ROW><id>10859500</id><snippet>    f = open('sample_text.txt', 'r')

    data = f.read()
    paragraphs = data.split("\n\n")

    paragraphs[:] = (value for value in paragraphs if value != '\t')
</snippet></ROW><ROW><id>10859506</id><snippet>__getitem__</snippet></ROW><ROW><id>10859506</id><snippet>a[5]</snippet></ROW><ROW><id>10859506</id><snippet>a.__getitem__(5)</snippet></ROW><ROW><id>10859506</id><snippet>help</snippet></ROW><ROW><id>10859506</id><snippet>help('class')</snippet></ROW><ROW><id>10859506</id><snippet>help</snippet></ROW><ROW><id>10859506</id><snippet>help(str)</snippet></ROW><ROW><id>10859506</id><snippet>help('str')</snippet></ROW><ROW><id>10859779</id><snippet>elif choice &gt; "4":
</snippet></ROW><ROW><id>10859779</id><snippet>&gt;&gt;&gt; '1' &lt; '2'
True
&gt;&gt;&gt; '1' &lt; '100'
True
&gt;&gt;&gt; '100' &lt; '2'
True
</snippet></ROW><ROW><id>10859779</id><snippet>&gt;&gt;&gt; int('1') &gt; 4
False
&gt;&gt;&gt; int('10') &gt; 4
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10859952</id><snippet>PyObject_Str</snippet></ROW><ROW><id>10859952</id><snippet>PyObject* PyObject_Str(PyObject *o)</snippet></ROW><ROW><id>10859952</id><snippet>o</snippet></ROW><ROW><id>10859952</id><snippet>NULL</snippet></ROW><ROW><id>10859952</id><snippet>str(o)</snippet></ROW><ROW><id>10859952</id><snippet>str()</snippet></ROW><ROW><id>10859952</id><snippet>print</snippet></ROW><ROW><id>10860022</id><snippet>PyList_Append()</snippet></ROW><ROW><id>10860086</id><snippet>s = str(int(s))
</snippet></ROW><ROW><id>10860086</id><snippet>s = s.lstrip('0') or '0'
</snippet></ROW><ROW><id>10860159</id><snippet>.truncate()</snippet></ROW><ROW><id>10860330</id><snippet>setup.py</snippet></ROW><ROW><id>10860330</id><snippet>python setup.py config --with-includepath=/path/to/your/install/of/python/includes/
</snippet></ROW><ROW><id>10860330</id><snippet>setup.py</snippet></ROW><ROW><id>10860330</id><snippet>python setup.py config --help
</snippet></ROW><ROW><id>10860330</id><snippet>--libraries</snippet></ROW><ROW><id>10860330</id><snippet>--library-dirs</snippet></ROW><ROW><id>10860330</id><snippet>python setup.py install --prefix=/path/to/install/to/
</snippet></ROW><ROW><id>10860330</id><snippet>setup.cfg</snippet></ROW><ROW><id>10860438</id><snippet>fin = open(test_file, 'r')
fout = open('clean.txt', 'w')

s = set()
for line in fin:
    if line.rstrip().isalpha():
        if not line in s:
            s.add(line)
            fout.write(line)

fin.close()
fout.close()
</snippet></ROW><ROW><id>10860785</id><snippet>getattr()</snippet></ROW><ROW><id>10860817</id><snippet>from Alumno import Alumno
</snippet></ROW><ROW><id>10860817</id><snippet>package/
    ...
        submodule/
            YourClass.py
            YourClass2.py
            __init__.py
</snippet></ROW><ROW><id>10860817</id><snippet>from YourClass import YourClass</snippet></ROW><ROW><id>10860817</id><snippet>__init__.py</snippet></ROW><ROW><id>10860817</id><snippet>import submodule.YourClass</snippet></ROW><ROW><id>10860817</id><snippet>from submodule import YourClass</snippet></ROW><ROW><id>10861028</id><snippet>existing = {"a": 1, "b": 2, "c": 3}
inbound = {"b": 3, "c": 4, "d": 5}
permitted = {"a","b","c"}
existing.update((key, val) for (key, val) in inbound.items() if key in permitted)
</snippet></ROW><ROW><id>10861055</id><snippet>while</snippet></ROW><ROW><id>10861055</id><snippet>a, b = 0, 1
counter = input("Please enter the term you wish to end at: ")
for _ in xrange(counter): #xrange is more efficient than range, the number is not used so _ is used to show that
    a, b = b, a+b
    print a
    print
</snippet></ROW><ROW><id>10861055</id><snippet>def fib(end):
    a, b = 0, 1
    for _ in xrange(end):
        a, b = b, a+b
        yield str(a)

counter = input("Please enter the term you wish to end at: ")    
print '\n\n'.join(fib(counter))
</snippet></ROW><ROW><id>10861089</id><snippet>Counter</snippet></ROW><ROW><id>10861089</id><snippet>collections</snippet></ROW><ROW><id>10861254</id><snippet>33[</snippet></ROW><ROW><id>10861254</id><snippet>\033[</snippet></ROW><ROW><id>10861261</id><snippet>*</snippet></ROW><ROW><id>10861261</id><snippet>set.intersection</snippet></ROW><ROW><id>10861261</id><snippet>&gt;&gt;&gt; lists = [[1, 2, 2], [2, 3, 2], [2, 5, 2], [2, 7, 2]]
&gt;&gt;&gt; list(set.intersection(*map(set, lists)))
[2]
</snippet></ROW><ROW><id>10861261</id><snippet>def intersect(lists):
    return list(set.intersection(*map(set, lists)))
</snippet></ROW><ROW><id>10861261</id><snippet>intersect()</snippet></ROW><ROW><id>10861261</id><snippet>def intersect(*lists):
    return list(set.intersection(*map(set, lists)))
</snippet></ROW><ROW><id>10861587</id><snippet>rd, wr = os.pipe()
oldstdout = os.dup(1)
os.dup2(wr, 1)
os.close(wr)
</snippet></ROW><ROW><id>10861587</id><snippet>rd</snippet></ROW><ROW><id>10861587</id><snippet>os.dup2(oldstdout, 1)
os.close(oldstdout)
os.close(rd)
</snippet></ROW><ROW><id>10861597</id><snippet>python manage.py shell</snippet></ROW><ROW><id>10861847</id><snippet>for person in people:
  for key in person:
     print(key, '=&gt;\n  ', person[key])
</snippet></ROW><ROW><id>10861976</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; X = np.matrix(np.arange(25).reshape((5,5)))
&gt;&gt;&gt; print X
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
</snippet></ROW><ROW><id>10861976</id><snippet>mean</snippet></ROW><ROW><id>10861976</id><snippet>axis</snippet></ROW><ROW><id>10861976</id><snippet>&gt;&gt;&gt; np.mean(X, axis=1)
matrix([[  2.],
        [  7.],
        [ 12.],
        [ 17.],
        [ 22.]])
</snippet></ROW><ROW><id>10861976</id><snippet>axis=1</snippet></ROW><ROW><id>10861976</id><snippet>X</snippet></ROW><ROW><id>10861976</id><snippet>np.matrix</snippet></ROW><ROW><id>10861976</id><snippet>np.mean</snippet></ROW><ROW><id>10861976</id><snippet>&gt;&gt;&gt; X = np.arange(25).reshape((5,5))
&gt;&gt;&gt; r_means = np.mean(X, axis=1)
&gt;&gt;&gt; print r_means
[  2.   7.  12.  17.  22.]
</snippet></ROW><ROW><id>10861976</id><snippet>X</snippet></ROW><ROW><id>10861976</id><snippet>r_means</snippet></ROW><ROW><id>10861976</id><snippet>&gt;&gt;&gt; X - r_means
array([[ -2.,  -6., -10., -14., -18.],
       [  3.,  -1.,  -5.,  -9., -13.],
       [  8.,   4.,   0.,  -4.,  -8.],
       [ 13.,   9.,   5.,   1.,  -3.],
       [ 18.,  14.,  10.,   6.,   2.]])
</snippet></ROW><ROW><id>10861976</id><snippet>N x 1</snippet></ROW><ROW><id>10861976</id><snippet>&gt;&gt;&gt; X - r_means.reshape((-1, 1))
array([[-2., -1.,  0.,  1.,  2.],
       [-2., -1.,  0.,  1.,  2.],
       [-2., -1.,  0.,  1.,  2.],
       [-2., -1.,  0.,  1.,  2.],
       [-2., -1.,  0.,  1.,  2.]])
</snippet></ROW><ROW><id>10861976</id><snippet>-1</snippet></ROW><ROW><id>10861976</id><snippet>reshape</snippet></ROW><ROW><id>10861976</id><snippet>r_means[:, np.newaxis]</snippet></ROW><ROW><id>10862054</id><snippet>#!/usr/bin/env python
import Queue
import threading
import urllib2
import time

input_file = 'proxylist.txt'
threads = 10

queue = Queue.Queue()
output = []

class ThreadUrl(threading.Thread):
    """Threaded Url Grab"""
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            #grabs host from queue
            proxy_info = self.queue.get()

            try:
                proxy_handler = urllib2.ProxyHandler({'http':proxy_info})
                opener = urllib2.build_opener(proxy_handler)
                opener.addheaders = [('User-agent','Mozilla/5.0')]
                urllib2.install_opener(opener)
                req = urllib2.Request("http://www.google.com")
                sock=urllib2.urlopen(req, timeout= 7)
                rs = sock.read(1000)
                if '&lt;title&gt;Google&lt;/title&gt;' in rs:
                    output.append(('0',proxy_info))
                else:
                    raise "Not Google"
            except:
                output.append(('x',proxy_info))
            #signals to queue job is done
            self.queue.task_done()

start = time.time()
def main():

    #spawn a pool of threads, and pass them queue instance 
    for i in range(5):
        t = ThreadUrl(queue)
        t.setDaemon(True)
        t.start()
    hosts = [host.strip() for host in open(input_file).readlines()]
    #populate queue with data   
    for host in hosts:
        queue.put(host)

    #wait on the queue until everything has been processed     
    queue.join()

main()
for proxy,host in output:
    print proxy,host

print "Elapsed Time: %s" % (time.time() - start)
</snippet></ROW><ROW><id>10862293</id><snippet>class MyClass():
    temp = []  
    def myfunc(self, val):
          self.temp.append(val)
          print self.temp

instance1 = MyClass()
instance1.myfunc(1)    # [1]
instance2 = MyClass()
instance2.myfunc(2)    # [1, 2]
</snippet></ROW><ROW><id>10862293</id><snippet>temp</snippet></ROW><ROW><id>10862293</id><snippet>MyClass.temp.append(3)
print instance1.temp   # [1, 2, 3]
instance1.temp = []
print instance1.temp   # []         uses the instances temp
print instance2.temp   # [1, 2, 3]
del instance1.temp
print instance1.temp   # [1, 2, 3]  uses the class' temp again
</snippet></ROW><ROW><id>10862361</id><snippet>os.system</snippet></ROW><ROW><id>10862361</id><snippet>cd</snippet></ROW><ROW><id>10862361</id><snippet>os.chdir</snippet></ROW><ROW><id>10862652</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>10862812</id><snippet>BUT1</snippet></ROW><ROW><id>10862812</id><snippet>main</snippet></ROW><ROW><id>10862812</id><snippet>main</snippet></ROW><ROW><id>10862812</id><snippet>BUT1</snippet></ROW><ROW><id>10862812</id><snippet>main</snippet></ROW><ROW><id>10862812</id><snippet>main</snippet></ROW><ROW><id>10862820</id><snippet>&gt;&gt;&gt; mylist = [int(x) for x in bin(23)[2:]]
&gt;&gt;&gt; print mylist
[1, 0, 1, 1, 1]
</snippet></ROW><ROW><id>10862820</id><snippet>&gt;&gt;&gt; for i, j in enumerate(mylist):
...     print '%ix %i' % (j, 2**(len(mylist)-i-1))
...
1x 16
0x 8
1x 4
1x 2
1x 1
</snippet></ROW><ROW><id>10862953</id><snippet>for word in soup.page.chunk.find_all('word'):
    print word['x1']
</snippet></ROW><ROW><id>10862953</id><snippet>soup.page.chunk</snippet></ROW><ROW><id>10862953</id><snippet>find_all('word')</snippet></ROW><ROW><id>10862953</id><snippet>word.parent.name == 'smth'</snippet></ROW><ROW><id>10862953</id><snippet>findAll</snippet></ROW><ROW><id>10862953</id><snippet>find_all</snippet></ROW><ROW><id>10863062</id><snippet>if value &gt;= 1&lt;&lt;31:
    value -= 1&lt;&lt;32
</snippet></ROW><ROW><id>10863251</id><snippet>show_all</snippet></ROW><ROW><id>10863251</id><snippet>import pygtk
pygtk.require('2.0')
import gtk

class Base:
    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        vbox=gtk.VBox(False, 0)

        table = gtk.Table(3, 3, True)
        table.attach(gtk.Button("1"), 0, 1, 0, 1)
        vbox.pack_start(table)

        self.window.add(vbox)

        self.window.show_all()

  def main(self):
      gtk.main()

if __name__ == "__main__":
    base = Base()
    base.main()
</snippet></ROW><ROW><id>10863272</id><snippet>mainwindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)
mainwindow.showFullScreen()
</snippet></ROW><ROW><id>10863398</id><snippet>import matplotlib.pyplot as plt

# plot returns a list, therefore we must have a COMMA after new_handler
new_handler, = plt.plot(0.5, 0, 'go', ms=10)

# new_handler now contains a Line2D object
# and the appropriate way to get data from it is therefore:
xdata, ydata = new_handler.get_data()
print xdata

# output:
# [ 0.5]
</snippet></ROW><ROW><id>10863620</id><snippet>s</snippet></ROW><ROW><id>10863620</id><snippet>s.split('\x00')[0]
</snippet></ROW><ROW><id>10863620</id><snippet>'NPC_me_lvup_event_contact()'
</snippet></ROW><ROW><id>10863620</id><snippet>split</snippet></ROW><ROW><id>10863815</id><snippet>PyList_SetItem()</snippet></ROW><ROW><id>10863815</id><snippet>trio_tmp</snippet></ROW><ROW><id>10863815</id><snippet>PyObject * bugmaybe(PyObject *self, PyObject *args)
{
  PyObject * trio=PyList_New(3);
  PyObject * otmp = PyFloat_FromDouble(1.2);
  PyList_SetItem(trio,0,otmp);
  otmp = PyFloat_FromDouble(2.3);
  PyList_SetItem(trio,1,otmp);
  PyList_Append(trio,2, PyList_New(0));
  return trio;
}
</snippet></ROW><ROW><id>10863815</id><snippet>PyList_Append</snippet></ROW><ROW><id>10863815</id><snippet>trio_tmp</snippet></ROW><ROW><id>10863815</id><snippet>PyObject * bugmaybe(PyObject *self, PyObject *args)
{
  PyObject * trio=PyList_New(0);
  // trio has refcount 1
  PyObject * trio_tmp = PyList_New(0);
  // trio_tmp has recount 1
  PyObject * otmp = PyFloat_FromDouble(1.2);
  // otmp has recount 1
  PyList_Append(trio_tmp,otmp);
  // Append does not steal a reference, so otmp refcoun = 2
  Py_DECREF(otmp);
  // otmp refcount = 1, but stored in the list so the pointer var
  // can be reused
  otmp = PyFloat_FromDouble(2.3);
  PyList_Append(trio_tmp,otmp);
  Py_DECREF(otmp);
  // as above
  PyList_Append(trio,trio_tmp);
  // decrement refcount for trio_tmp, as it has recount 2 now.
  Py_DECREF(trio_tmp);
  return trio;
}
</snippet></ROW><ROW><id>10863815</id><snippet> trio = []
 trio_tmp = []
 otmp = 1.2
 trio_tmp.append(otmp)
 otmp = 2.3
 trio_tmp.append(otmp)
 trio.append(trio_tmp)
</snippet></ROW><ROW><id>10863853</id><snippet>&gt;&gt;&gt; v1 = "foo"
&gt;&gt;&gt; v2,v3,v4,v5 = 1,2,3,4
&gt;&gt;&gt; s = "{v1}_{v2}_{v3}_{v4}_{v5}".format(v1="foo", v2=v2, v3=v3, v4=v4, v5=v5)
&gt;&gt;&gt; s
'foo_1_2_3_4'
&gt;&gt;&gt; s = "{v1}_{v2}_{v3}_{v4}_{v5}".format(**locals())
&gt;&gt;&gt; s
'foo_1_2_3_4'
</snippet></ROW><ROW><id>10863853</id><snippet>locals()</snippet></ROW><ROW><id>10863853</id><snippet>locals()</snippet></ROW><ROW><id>10863853</id><snippet>string.Template</snippet></ROW><ROW><id>10863853</id><snippet>locals()</snippet></ROW><ROW><id>10863980</id><snippet>import sys
sys.path.append("/libraries") 
</snippet></ROW><ROW><id>10864154</id><snippet>:python import sys; print(sys.version)
</snippet></ROW><ROW><id>10864181</id><snippet>Info.plist</snippet></ROW><ROW><id>10864181</id><snippet>LSUIElement</snippet></ROW><ROW><id>10864181</id><snippet>&lt;true/&gt;</snippet></ROW><ROW><id>10864181</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;LSUIElement&lt;/key&gt;
    &lt;true/&gt;
</snippet></ROW><ROW><id>10864181</id><snippet>LSUIelement</snippet></ROW><ROW><id>10864181</id><snippet>.plist</snippet></ROW><ROW><id>10864181</id><snippet>.plist</snippet></ROW><ROW><id>10864181</id><snippet>Info.plist</snippet></ROW><ROW><id>10864181</id><snippet>plutil</snippet></ROW><ROW><id>10864181</id><snippet>plutil -convert xml1 /Applications/Firefox.app/Contents/Info.plist
</snippet></ROW><ROW><id>10864181</id><snippet>activate</snippet></ROW><ROW><id>10864181</id><snippet>tell application "Firefox" to get windows
</snippet></ROW><ROW><id>10864181</id><snippet>get windows</snippet></ROW><ROW><id>10864181</id><snippet>osascript</snippet></ROW><ROW><id>10864181</id><snippet>osascript -e 'tell application "Firefox" to get windows'
</snippet></ROW><ROW><id>10864218</id><snippet>.load()</snippet></ROW><ROW><id>10864456</id><snippet>..., command=file.open
</snippet></ROW><ROW><id>10864456</id><snippet>..., command=file.open()
</snippet></ROW><ROW><id>10864532</id><snippet>bulbs_config.set_neo4j_heroku()
</snippet></ROW><ROW><id>10864532</id><snippet>from bulbsconf import graph
</snippet></ROW><ROW><id>10864570</id><snippet>import codecs

unicode(part, "utf8").lstrip(codecs.BOM_UTF8.decode("utf8", "strict"))
</snippet></ROW><ROW><id>10864796</id><snippet>class PurchaseQuerySet(QuerySet):
  def __init__(self, *args, **kwargs):
    super(PurchaseQuerySet, self).__init__(*args, **kwargs)
    self.todays_price = None

  def get_with_todays_price(self, todays_price):
    self.todays_price = todays_price
    cloned = self.all()
    cloned.todays_price = todays_price
    return cloned

  def iterator(self):
    for p in super(PurchaseQuerySet, self).iterator():
      p.todays_price = self.todays_price
      yield p

class PurchaseManager(models.Manager):
  def get_query_set(self):
    return PurchaseQuerySet(self.model)

  def __getattr__(self, name)
    return getattr(self.get_query_set(), name)

class Purchase(models.Model):
  ticker = models.CharField(max_length=5)
  date = models.DateField()
  price = models.DecimalField(max_digits=20, decimal_places=3)
  quantity = models.IntegerField()

  objects = PurchaseManager()

  @property
  def gain(self):
    return self.todays_price - self.price
</snippet></ROW><ROW><id>10864796</id><snippet>for p in Purchase.objects.filter(ticker=ticker).get_with_todays_price(100):
  print p
  print p.gain
</snippet></ROW><ROW><id>10865054</id><snippet>elif</snippet></ROW><ROW><id>10865054</id><snippet>else</snippet></ROW><ROW><id>10865054</id><snippet># Task 4
elif choice == int('4'):
    task4()

# Everything else
else:
    notatask()
</snippet></ROW><ROW><id>10865109</id><snippet>cut_circle</snippet></ROW><ROW><id>10865109</id><snippet>PIL</snippet></ROW><ROW><id>10865109</id><snippet>img.save(filename,format='png')
</snippet></ROW><ROW><id>10865199</id><snippet>from datetime import datetime, timedelta</snippet></ROW><ROW><id>10865199</id><snippet>datetime.date</snippet></ROW><ROW><id>10865199</id><snippet>from datetime import datetime, timedelta, date</snippet></ROW><ROW><id>10865199</id><snippet>date(year, month, 1)</snippet></ROW><ROW><id>10865199</id><snippet>datetime.date(year, month, 1)</snippet></ROW><ROW><id>10865213</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>10865213</id><snippet>&gt;&gt;&gt; print json.dumps('růže', ensure_ascii=False)
"růže"
</snippet></ROW><ROW><id>10865254</id><snippet>urlpatterns = patterns('',
    # ... the rest of your URLconf goes here ...
) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</snippet></ROW><ROW><id>10865254</id><snippet>conf</snippet></ROW><ROW><id>10865349</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; foo = lambda x, y, z: x + y + z
&gt;&gt;&gt; inspect.getargspec(foo)
ArgSpec(args=['x', 'y', 'z'], varargs=None, keywords=None, defaults=None)
</snippet></ROW><ROW><id>10865629</id><snippet>prettytable</snippet></ROW><ROW><id>10865629</id><snippet>x = PrettyTable(["City name", "Area", "Population", "Annual Rainfall"])
x.set_field_align("City name", "l") # Left align city names
x.set_padding_width(1) # One space between column edges and contents (default)
x.add_row(["Adelaide",1295, 1158259, 600.5])
x.add_row(["Brisbane",5905, 1857594, 1146.4])
x.add_row(["Darwin", 112, 120900, 1714.7])
x.add_row(["Hobart", 1357, 205556, 619.5])
x.add_row(["Sydney", 2058, 4336374, 1214.8])
x.add_row(["Melbourne", 1566, 3806092, 646.9])
x.add_row(["Perth", 5386, 1554769, 869.4])
print x

+-----------+------+------------+-----------------+
| City name | Area | Population | Annual Rainfall |
+-----------+------+------------+-----------------+
| Adelaide  | 1295 |  1158259   |      600.5      |
| Brisbane  | 5905 |  1857594   |      1146.4     |
| Darwin    | 112  |   120900   |      1714.7     |
| Hobart    | 1357 |   205556   |      619.5      |
| Sydney    | 2058 |  4336374   |      1214.8     |
| Melbourne | 1566 |  3806092   |      646.9      |
| Perth     | 5386 |  1554769   |      869.4      |
+-----------+------+------------+-----------------+
</snippet></ROW><ROW><id>10865669</id><snippet>geoResult = g.geocode(a)
if geoResult is None:
    f.write("none")

# If we get here, the result is not None and we can proceed normally
place, (lat, lng) = geoResult
b = "..." # continue with your processing here
</snippet></ROW><ROW><id>10865803</id><snippet>class TestDaemon:
    def __init__(self):

        # start thread here
        cmdman = CommandManager()
        self.cmdThread = threading.Thread(target=cmdman.run, args=('CmdThread', 1))
        self.cmdThread.daemon = True
        self.cmdThread.start()

        ...

    def quit_app(self, widget, data = None):
        self.cmdThread.join()
        gtk.main_quit()
</snippet></ROW><ROW><id>10866004</id><snippet>sum(k*v for k,v in a.items())
</snippet></ROW><ROW><id>10866004</id><snippet>sum(p*c for p,c in primesToCounts.items())
</snippet></ROW><ROW><id>10866138</id><snippet>as_p</snippet></ROW><ROW><id>10866138</id><snippet>as_p()</snippet></ROW><ROW><id>10866147</id><snippet>add_data(data,callback_function)</snippet></ROW><ROW><id>10866147</id><snippet>innerHTML</snippet></ROW><ROW><id>10866161</id><snippet>itertools.tee</snippet></ROW><ROW><id>10866161</id><snippet>&gt;&gt;&gt; z = zip(a, b)
&gt;&gt;&gt; zip1, zip2 = itertools.tee(z)
&gt;&gt;&gt; list(zip1)
[(1, 7), (2, 8), (3, 9)]
&gt;&gt;&gt; list(zip2)
[(1, 7), (2, 8), (3, 9)]
</snippet></ROW><ROW><id>10866161</id><snippet>def gen(x):
    for i in range(x):
        yield i ** 2

def make_two_lists(gen):
    return list(gen()), list(gen())
</snippet></ROW><ROW><id>10866161</id><snippet>lambda</snippet></ROW><ROW><id>10866161</id><snippet>lambda</snippet></ROW><ROW><id>10866161</id><snippet>&gt;&gt;&gt; make_two_lists(lambda: gen(10))
([0, 1, 4, 9, 16, 25, 36, 49, 64, 81], [0, 1, 4, 9, 16, 25, 36, 49, 64, 81])
</snippet></ROW><ROW><id>10866161</id><snippet>z = zip(a, b)
while some_condition():
    fst = next(z, None)
    snd = next(z, None)
    do_some_things(fst, snd)
    if fst is None and snd is None:
        do_some_other_things()
</snippet></ROW><ROW><id>10866161</id><snippet>z</snippet></ROW><ROW><id>10866161</id><snippet>z</snippet></ROW><ROW><id>10866161</id><snippet>send</snippet></ROW><ROW><id>10866161</id><snippet>send</snippet></ROW><ROW><id>10866161</id><snippet>send</snippet></ROW><ROW><id>10866217</id><snippet>a</snippet></ROW><ROW><id>10866217</id><snippet>return var01, Q
</snippet></ROW><ROW><id>10866217</id><snippet>for</snippet></ROW><ROW><id>10866217</id><snippet>for i in xrange(N-1):
    result, Q = main_loop(...)
    TempLake[i + 1] = result
do_something_with(Q)
</snippet></ROW><ROW><id>10866217</id><snippet>Q</snippet></ROW><ROW><id>10866217</id><snippet>N</snippet></ROW><ROW><id>10866339</id><snippet>reactor</snippet></ROW><ROW><id>10866339</id><snippet>.run()</snippet></ROW><ROW><id>10866339</id><snippet>connectionMade()</snippet></ROW><ROW><id>10866339</id><snippet>connectionLost()</snippet></ROW><ROW><id>10866339</id><snippet>dataReceived()</snippet></ROW><ROW><id>10866339</id><snippet>reactor.run()</snippet></ROW><ROW><id>10866339</id><snippet>for</snippet></ROW><ROW><id>10866339</id><snippet>reactor.run()</snippet></ROW><ROW><id>10866339</id><snippet>NUM_TABLES = 10

factories = [ ]
for i in range(0, NUM_TABLES):
    print i
    factory = Factory()
    factory.protocol = Socket
    factory.clients = []
    factories.append(factory)
    reactor.listenTCP(1025+i, factory)

# print "Blackjack server started"

reactor.run()

# whatever code you put here, is executed only **after reactor has stopped**
</snippet></ROW><ROW><id>10866351</id><snippet>define_block</snippet></ROW><ROW><id>10866351</id><snippet>end_block</snippet></ROW><ROW><id>10866351</id><snippet>define_block</snippet></ROW><ROW><id>10866351</id><snippet>end_block</snippet></ROW><ROW><id>10866351</id><snippet>//</snippet></ROW><ROW><id>10866351</id><snippet>"</snippet></ROW><ROW><id>10866351</id><snippet>//define_block</snippet></ROW><ROW><id>10866351</id><snippet>"define_block"</snippet></ROW><ROW><id>10866351</id><snippet>block = re.compile(r'^\s*define_block.*?^\s*end_block[^$]*', re.I | re.M | re.S)
input = block.sub('', input)
for line in input.split('\n'):
    if line.lower().startswith('variable'):
        print line
</snippet></ROW><ROW><id>10866351</id><snippet>block = Regexp(r'(?ims)^\s*define_block.*?^\s*end_block[^$]*')
</snippet></ROW><ROW><id>10866351</id><snippet>variable = ...
other_line = Regexp(r'^.*$')
parser = (variable | block | other_line)[:]
</snippet></ROW><ROW><id>10866370</id><snippet>reactor.run()</snippet></ROW><ROW><id>10866380</id><snippet>import re
def natkey(s):
    return [int(p) if p else q for p, q in re.findall(r'(\d+)|(\D+)', s)]

x = ['1th Word', 'Another Word 2x', 'Another Word 20x', '10th Word 10', '2nd Word']

print sorted(x)
print sorted(x, key=natkey)
</snippet></ROW><ROW><id>10866380</id><snippet>['10th Word 10', '1th Word', '2nd Word', 'Another Word 20x', 'Another Word 2x']
['1th Word', '2nd Word', '10th Word 10', 'Another Word 2x', 'Another Word 20x']
</snippet></ROW><ROW><id>10866414</id><snippet>next</snippet></ROW><ROW><id>10866414</id><snippet>callable_iterator</snippet></ROW><ROW><id>10866414</id><snippet>iter</snippet></ROW><ROW><id>10866414</id><snippet>&gt;&gt;&gt; d = {1:2, 2:3, 3:4, 4:5, 5:None}
&gt;&gt;&gt; list(iter(lambda st=[1]: st.__setitem__(0, d[st[0]]) or st[0], None))
[2, 3, 4, 5]
</snippet></ROW><ROW><id>10866416</id><snippet>for i,fruit in enumerate(fruits, 1):
    print i, fruit.capitalize()
</snippet></ROW><ROW><id>10866416</id><snippet>1 Apple
2 Orange
3 Banana
4 Strawberry
5 Kiwi
</snippet></ROW><ROW><id>10866541</id><snippet>circleRect = pygame.draw.circle(windowSurface, (0,0,0), (10, 10), 5)
</snippet></ROW><ROW><id>10866717</id><snippet>set_test_cookie</snippet></ROW><ROW><id>10866717</id><snippet>set_test_cookie</snippet></ROW><ROW><id>10866717</id><snippet>TEST_COOKIE_NAME</snippet></ROW><ROW><id>10866717</id><snippet>TEST_COOKIE_VALUE</snippet></ROW><ROW><id>10866717</id><snippet>__setitem__</snippet></ROW><ROW><id>10866717</id><snippet>POST</snippet></ROW><ROW><id>10866717</id><snippet>TEST_COOKIE_NAME</snippet></ROW><ROW><id>10866717</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>10866717</id><snippet>SESSION_SAVE_EVERY_REQUEST</snippet></ROW><ROW><id>10866760</id><snippet>__new__</snippet></ROW><ROW><id>10866760</id><snippet>class Foo(object):
    def __new__(cls, arg):
        if arg &gt; 10: #error!
            return None 
        return super(Foo, cls).__new__(cls)

print Foo(1)    # &lt;__main__.Foo object at 0x10c903410&gt;
print Foo(100)  # None
</snippet></ROW><ROW><id>10866760</id><snippet>__init__</snippet></ROW><ROW><id>10866760</id><snippet>class Foo(object):
    def __init__(self, arg):
        if arg &gt; 10: #error!
            raise ValueError("invalid argument!") 
        # do stuff
</snippet></ROW><ROW><id>10866880</id><snippet>StopIteration</snippet></ROW><ROW><id>10866945</id><snippet>os.listdir</snippet></ROW><ROW><id>10866945</id><snippet>os.listdir(SOME_DIR)</snippet></ROW><ROW><id>10866945</id><snippet>os.path.join(SOME_DIR, fname)</snippet></ROW><ROW><id>10866945</id><snippet>files = [os.path.join("/", fname) for fname in os.listdir("/")]
latest = max(files, key=os.path.getmtime)
cause = channel.FilePlayer.play(latest)
</snippet></ROW><ROW><id>10866998</id><snippet>xrange(N)</snippet></ROW><ROW><id>10866998</id><snippet>Q</snippet></ROW><ROW><id>10866998</id><snippet>Q</snippet></ROW><ROW><id>10867151</id><snippet>while line</snippet></ROW><ROW><id>10867151</id><snippet>line = file.readline()</snippet></ROW><ROW><id>10867151</id><snippet>for line in file</snippet></ROW><ROW><id>10867151</id><snippet>line = file.readline()</snippet></ROW><ROW><id>10867212</id><snippet>while True:
    foo(some_name)
</snippet></ROW><ROW><id>10867212</id><snippet>names = ["Ned", "Felix", "Guy"]
fooses = [foo(name) for name in names]
</snippet></ROW><ROW><id>10867226</id><snippet>csv.reader</snippet></ROW><ROW><id>10867226</id><snippet>csv.reader</snippet></ROW><ROW><id>10867226</id><snippet>csv.reader(csvdata.splitlines())
</snippet></ROW><ROW><id>10867298</id><snippet>len(my_long_string.split(';'))
</snippet></ROW><ROW><id>10867298</id><snippet>my_long_string.count(';') + 1
</snippet></ROW><ROW><id>10867298</id><snippet>len</snippet></ROW><ROW><id>10867298</id><snippet>split</snippet></ROW><ROW><id>10867298</id><snippet>count</snippet></ROW><ROW><id>10867334</id><snippet>txt.Refresh()</snippet></ROW><ROW><id>10867334</id><snippet>Refresh()</snippet></ROW><ROW><id>10867334</id><snippet>SetBackground()</snippet></ROW><ROW><id>10867334</id><snippet>txt.StyleSetBackground(wx.stc.STC_STYLE_DEFAULT, (255,0,0))
</snippet></ROW><ROW><id>10867334</id><snippet>SyleSetBackground()</snippet></ROW><ROW><id>10867334</id><snippet>txt.StyleClearAll()
</snippet></ROW><ROW><id>10867334</id><snippet>wx.stc.STC_STYLE_DEFAULT</snippet></ROW><ROW><id>10867484</id><snippet>giveraise</snippet></ROW><ROW><id>10867484</id><snippet>*=</snippet></ROW><ROW><id>10867636</id><snippet>\S+\/?
</snippet></ROW><ROW><id>10867636</id><snippet>\S+?\/?
</snippet></ROW><ROW><id>10867636</id><snippet>regex = re.compile(r'^(\[)(\S+?)(\/?)(\][ST]$)')
</snippet></ROW><ROW><id>10867636</id><snippet>regex = re.compile(r'^ (\[) (\S+?) (\/?) (\][ST]$) ', re.VERBOSE)
</snippet></ROW><ROW><id>10867677</id><snippet>menu.add_command(label="Open", myfunc(myarg))
</snippet></ROW><ROW><id>10867677</id><snippet>menu.add_command(label="Open", lambda: myfunc(myarg))
</snippet></ROW><ROW><id>10867690</id><snippet>mdays[month]</snippet></ROW><ROW><id>10867690</id><snippet>month</snippet></ROW><ROW><id>10867690</id><snippet>int</snippet></ROW><ROW><id>10867690</id><snippet>month</snippet></ROW><ROW><id>10867690</id><snippet>calendar.mdays[month]</snippet></ROW><ROW><id>10867690</id><snippet>mdays[month]</snippet></ROW><ROW><id>10867690</id><snippet>int(month)</snippet></ROW><ROW><id>10867891</id><snippet>&gt;&gt;&gt; x = (1,2)
&gt;&gt;&gt; a, b = x
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
</snippet></ROW><ROW><id>10867891</id><snippet>&gt;&gt;&gt; x = [(1,2), (3,4), (5,6)]
&gt;&gt;&gt; for item in x:
...     print "A tuple", item
A tuple (1, 2)
A tuple (3, 4)
A tuple (5, 6)
&gt;&gt;&gt; for a, b in x:
...     print "First", a, "then", b
First 1 then 2
First 3 then 4
First 5 then 6
</snippet></ROW><ROW><id>10867951</id><snippet>data</snippet></ROW><ROW><id>10867951</id><snippet>[(u'DAY1 KWH', u'300.000000'), (u'DAY2 KWH', u'300.000000'), ...]</snippet></ROW><ROW><id>10867951</id><snippet>for desc, val in data:
    if 'DAY' in desc:
        # do something with val
    elif 'WEEK' in desc:
       # do something else with val
    # etc...
</snippet></ROW><ROW><id>10867951</id><snippet>desc</snippet></ROW><ROW><id>10867956</id><snippet>&gt;&gt;&gt; 94970389L * 94958913L % 775920493L
1L
</snippet></ROW><ROW><id>10867966</id><snippet>cursor.execute("""
INSERT INTO se_xbrl_concepts( xbrl_id,xbrl_name,xbrl_type,Xbrl_enumerations,Xbrl_substitutiongroup,Xbrl_balance, Xbrl_periodtype, Xbrl_IsAbstract,xbrl_label,Xbrl_desc)
 values(clist[0],%s,%s,%s,%s,%s,%s,%s,clist[9],%s)""")(name,clist[3],clist[4],clist[5],clist[6],clist[7],clist[8],clist[10])
</snippet></ROW><ROW><id>10867966</id><snippet>cursor.execute("""
INSERT INTO se_xbrl_concepts( xbrl_id,xbrl_name,xbrl_type,Xbrl_enumerations,Xbrl_substitutiongroup,Xbrl_balance, Xbrl_periodtype, Xbrl_IsAbstract,xbrl_label,Xbrl_desc)
 values(clist[0],%s,%s,%s,%s,%s,%s,%s,clist[9],%s)""",(name,clist[3],clist[4],clist[5],clist[6],clist[7],clist[8],clist[10]))
</snippet></ROW><ROW><id>10868002</id><snippet>import time
print hex(int(time.mktime(time.strptime('1999-12-31 15:00:00', '%Y-%m-%d %H:%M:%S'))) - time.timezone)
</snippet></ROW><ROW><id>10868065</id><snippet>x = numpy.ma.array(numpy.array([1,2,3]),mask=[True,True,True])
try: 
    my_min = numpy.min(x[~x.mask])
    # Continue with my_min
except ValueError: 
    # Bail or what have you
    print 'Masks all around!'
</snippet></ROW><ROW><id>10868405</id><snippet>oldTotal == newTotal</snippet></ROW><ROW><id>10868405</id><snippet>abs(oldTotal-newTotal)&lt;0.0001</snippet></ROW><ROW><id>10868550</id><snippet>var</snippet></ROW><ROW><id>10868550</id><snippet>mod1</snippet></ROW><ROW><id>10868550</id><snippet>from mod2 import var,fun_of_mod2
</snippet></ROW><ROW><id>10868550</id><snippet>var</snippet></ROW><ROW><id>10868550</id><snippet>import mod2
var = mod2.var
fun_of_mod2 = mod2.fun_of_mod2
del mod2
</snippet></ROW><ROW><id>10868550</id><snippet>mod1.var</snippet></ROW><ROW><id>10868550</id><snippet>mod2.var</snippet></ROW><ROW><id>10868550</id><snippet>mod1.var</snippet></ROW><ROW><id>10868550</id><snippet>mod2.var</snippet></ROW><ROW><id>10868550</id><snippet>import mod2
</snippet></ROW><ROW><id>10868550</id><snippet>mod2.var</snippet></ROW><ROW><id>10868550</id><snippet>module.variable</snippet></ROW><ROW><id>10868550</id><snippet>global</snippet></ROW><ROW><id>10868721</id><snippet>response.set_cookie('name', 'value', domain='.example.com')
</snippet></ROW><ROW><id>10868965</id><snippet>mychoice = {1: 0.2, 2: 0.7, 3:0.1}
current = 0
limits = {}

for key in mychoice:
    limits[key] = (current,current + mychoice[key])
    current = current + mychoice[key] #Next range should start at the end of current

#This should give a new dictionary: {1:(0,0.2),2:(0.2,0.9),3;(0.9,1)}

r = random.random() # float between 0 and 1

for key in limits:
    range = limits[key]
    if r &gt;= range[0] and r &lt; range[1]:
          return key
return Null
</snippet></ROW><ROW><id>10869013</id><snippet>img1, img2 should be numpy array
template_pt, target_pt should be numpy array
</snippet></ROW><ROW><id>10869013</id><snippet>target_pt, status, track_error = calcOpticalFlowPyrLK(img1, 
                  img2, 
                  template_pt, 
                  target_pt, 
                  winSize=(win_size_lk, win_size_lk), 
                  flags = OPTFLOW_USE_INITIAL_FLOW,
                  criteria = (TERM_CRITERIA_EPS | TERM_CRITERIA_COUNT, 10, 0.03))
</snippet></ROW><ROW><id>10869360</id><snippet>p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>10869360</id><snippet>communicate()</snippet></ROW><ROW><id>10869360</id><snippet>stdout</snippet></ROW><ROW><id>10869360</id><snippet>stderr</snippet></ROW><ROW><id>10869497</id><snippet>email_dialog.set_action(gtk.FILE_CHOOSER_ACTION_SELECT_FOLDER)
</snippet></ROW><ROW><id>10869575</id><snippet>QTimer</snippet></ROW><ROW><id>10869575</id><snippet>timer = QTimer()
timer.timeout.connect(myapp.myPeriodicRun)  # connect the "timeout" signal
timer.start(2000)  # call every 2 seconds
</snippet></ROW><ROW><id>10869575</id><snippet>Main</snippet></ROW><ROW><id>10869575</id><snippet>myRun</snippet></ROW><ROW><id>10869575</id><snippet>def myPeriodicRun(self):
  print "[Debug]: " + self.showNowHour() + " " + self.showNowMinute()      
  hour = int(self.showNowHour())
  minute = int(self.showNowMinute())
  if (hour&gt;8 and hour&lt;15):
    print "is open"
    self.hide()
  else:
    print "is close"
    self.show()
</snippet></ROW><ROW><id>10869576</id><snippet>import os
os.chdir(os.path.dirname(__file__))
</snippet></ROW><ROW><id>10869642</id><snippet>[    0   31   28    1]
[  -31    0  183   28] / 720
[  -28 -183    0   31]
[   -1  -28  -31    0]
</snippet></ROW><ROW><id>10869642</id><snippet>[(0,0)  (1,0)  (1,1)  (0,1)]</snippet></ROW><ROW><id>10869642</id><snippet>[(0,0), (1,0), (1,1), (0,1)] -&gt; 242/720
[(1,0), (1,1), (0,1), (0,0)] -&gt; 242/720
[(1,1), (0,1), (0,0), (1,0)] -&gt;   2/720
[(0,1), (0,0), (1,0), (1,1)] -&gt;   2/720
</snippet></ROW><ROW><id>10869728</id><snippet>import dj_database_url
DATABASES = {'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))}
</snippet></ROW><ROW><id>10870203</id><snippet>tcpdump</snippet></ROW><ROW><id>10870203</id><snippet>tshark</snippet></ROW><ROW><id>10870203</id><snippet>perl</snippet></ROW><ROW><id>10870203</id><snippet>sed</snippet></ROW><ROW><id>10870203</id><snippet>[mpenning@Bucksnort ~]$ sudo tcpdump -Aq udp port 1900 | perl -e 'while ($line=&lt;STDIN&gt;) { if ($line!~/239.255.255.250.+?UDP/) { if ($line=~/(NOTIFY.+)$/) {print "$1\n";} else {print $line;}}}'
NOTIFY * HTTP/1.1
HOST: 239.255.255.250:1900

[mpenning@Bucksnort ~]$
</snippet></ROW><ROW><id>10870203</id><snippet>STDIN</snippet></ROW><ROW><id>10870203</id><snippet>while ($line=&lt;STDIN&gt;) {
    if ($line!~/239.255.255.250.+?UDP/) {
        if ($line=~/(NOTIFY.+)$/) {
            print "$1\n";
        } else {
            print $line;
        }
    }
}
</snippet></ROW><ROW><id>10870360</id><snippet>row</snippet></ROW><ROW><id>10870360</id><snippet>row[a:b]</snippet></ROW><ROW><id>10870360</id><snippet>a</snippet></ROW><ROW><id>10870360</id><snippet>b</snippet></ROW><ROW><id>10870360</id><snippet>row = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']

print row[2:4]
</snippet></ROW><ROW><id>10870360</id><snippet>['gamma', 'delta']
</snippet></ROW><ROW><id>10870360</id><snippet>for col in row[6:20]:
    foo()
</snippet></ROW><ROW><id>10870360</id><snippet>for col in row[6:]:
    foo()
</snippet></ROW><ROW><id>10870416</id><snippet>DataDocumenter.add_directive_header()</snippet></ROW><ROW><id>10870416</id><snippet>self.add_line(u'   :annotation: = ' + objrepr, '&lt;autodoc&gt;')
</snippet></ROW><ROW><id>10870416</id><snippet>objrepr</snippet></ROW><ROW><id>10870416</id><snippet>from sphinx.ext.autodoc import ModuleLevelDocumenter, DataDocumenter

def add_directive_header(self, sig):
    ModuleLevelDocumenter.add_directive_header(self, sig)
    # Rest of original method ignored

DataDocumenter.add_directive_header = add_directive_header
</snippet></ROW><ROW><id>10870465</id><snippet>&gt;&gt;&gt; mylist = ['ab=2','bc=5','ab=1','cd=6','ab=7']
&gt;&gt;&gt; [i for i in mylist if 'ab' in i]
['ab=2', 'ab=1', 'ab=7']
</snippet></ROW><ROW><id>10870465</id><snippet>timeit</snippet></ROW><ROW><id>10870514</id><snippet>imshow</snippet></ROW><ROW><id>10870514</id><snippet>(M,N,3)</snippet></ROW><ROW><id>10870514</id><snippet>interpolation='nearest'</snippet></ROW><ROW><id>10870514</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Example pixel array
pixels = np.random.rand(100,100,3)
reds = pixels[:,:,1:] = 0.          # Remove B and G

plt.imshow(reds, interpolation='nearest')
</snippet></ROW><ROW><id>10870514</id><snippet>np.array(...)</snippet></ROW><ROW><id>10870745</id><snippet>for i,col in enumerate(fields[5:], 5):
    ....
</snippet></ROW><ROW><id>10870745</id><snippet>i</snippet></ROW><ROW><id>10870745</id><snippet>col</snippet></ROW><ROW><id>10870745</id><snippet>start_col = 5
for i,col in enumerate(fields[start_col:], start_col):
    ....
</snippet></ROW><ROW><id>10870745</id><snippet>cur_column = 5
for line in Input:
    line = line.rstrip() 
    fields = line.split("\t")   
    for col in fields[cur_colum:]:
       ...
       ...

cur_column += 1 # done processing current column, increment value to next column
</snippet></ROW><ROW><id>10870781</id><snippet>Import error: No module named site.</snippet></ROW><ROW><id>10870781</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10871071</id><snippet>class   Application(Frame): 
    def __init__(self,  master=None):
        Frame.__init__(self, master)    
        self.grid(sticky=N+S+E+W)   
        self.mainframe()

    def mainframe(self):                
        self.data = Listbox(self, bg='red')
        self.scrollbar = Scrollbar(self.data, orient=VERTICAL)
        self.data.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.data.yview)

        for i in range(1000):
            self.data.insert(END, str(i))

    self.run = Button(self, text="run")
    self.stop = Button(self, text="stop")

    self.data.grid(row=0, column=0, rowspan=4,
                   columnspan=2, sticky=N+E+S+W)
    self.data.columnconfigure(0, weight=1)

    self.run.grid(row=4,column=0,sticky=EW)
    self.stop.grid(row=4,column=1,sticky=EW)

    self.scrollbar.grid(column=2, sticky=N+S)

a = Application()
a.mainframe()
a.mainloop()
</snippet></ROW><ROW><id>10871172</id><snippet>int.from_bytes()</snippet></ROW><ROW><id>10871172</id><snippet>&gt;&gt;&gt; myvalue = b"\xff\x80\x17\x90\x12\x44\x55\x99\x90\x12\x80"
&gt;&gt;&gt; int.from_bytes(myvalue, "big")
308880981568086674938794624
</snippet></ROW><ROW><id>10871172</id><snippet>&gt;&gt;&gt; myvalue = "\xff\x80\x17\x90\x12\x44\x55\x99\x90\x12\x80"
&gt;&gt;&gt; int(myvalue.encode("hex"), 16)
308880981568086674938794624L
</snippet></ROW><ROW><id>10871207</id><snippet>.co.uk</snippet></ROW><ROW><id>10871296</id><snippet>chmod a+x mapperSimple.py</snippet></ROW><ROW><id>10871296</id><snippet>#!/usr/bin/python
import sys

for line in sys.stdin:
    line = line.strip()
    print '%s' % line
</snippet></ROW><ROW><id>10871296</id><snippet>cat input.txt | ./mapper.py | sort | ./reducer.py &gt; a.out
</snippet></ROW><ROW><id>10871725</id><snippet>pageName</snippet></ROW><ROW><id>10871725</id><snippet>content</snippet></ROW><ROW><id>10871725</id><snippet>content</snippet></ROW><ROW><id>10871725</id><snippet>else:</snippet></ROW><ROW><id>10871725</id><snippet>query = db.GqlQuery("SELECT * FROM Pages WHERE pageName=:1", pageName)
for page in query:
  page.content = content
  page.put()
</snippet></ROW><ROW><id>10871978</id><snippet>html = r'&lt;a href="http://www.chrisstucchio.com/blog/2012/bandit_algorithms_vs_ab.html"&gt;Why Multi-armed Bandit algorithms are superior to A/B testing (with Math)&lt;/a&gt;, &lt;a href="user?id=yummyfajitas"&gt;yummyfajitas&lt;/a&gt;, &lt;a href="item?id=4060658"&gt;11 comments&lt;/a&gt;, '

from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup(html) #sort the html
bowl = soup.findAll('a') #find all links in the html

link = bowl[0]['href'] #find the first 'a' tags href
text = bowl[0].contents[0] #find the first tags url
user_id = bowl[1]['href'].split('?id=')[1] #split on '?id=' and take the second  value. could be [-1] too
item_id = bowl[2]['href'].split('?id=')[1]

print 'link:', link
print 'text:', text
print 'user_id:', user_id
print 'item_id:', item_id
</snippet></ROW><ROW><id>10872087</id><snippet>id()</snippet></ROW><ROW><id>10872087</id><snippet>string_id()</snippet></ROW><ROW><id>10872234</id><snippet>import itertools

numbers = range(lower, upper + 1)
words = "a, b, c".split(", ")

data = (numbers, words) if numbers_first else (words, numbers)
for n, w in itertools.product(*data):
    if not numbers_first: n, w = w, n
    print("Player %d likes %s." % (n, w))
</snippet></ROW><ROW><id>10872234</id><snippet>if</snippet></ROW><ROW><id>10872234</id><snippet>template = "Player # likes @."
subs = ("{n}", "{w}") if numbers_first else ("{w}", "{n}")
format = make_format(template, subs) # escape {}, replace # and @

# ...
for n, w in product(*data):
    print(format.format(n=n, w=w))
</snippet></ROW><ROW><id>10872262</id><snippet>codecs.utf_8_decode(input.encode('utf8'))
</snippet></ROW><ROW><id>10872551</id><snippet>A = [2, 3, [6, 7], 0]
B = [4, 7, 10, 2]


def has_lists(lst):
    return any(isinstance(x, list) for x in lst)

print has_lists(A) # True
print has_lists(B) # False
</snippet></ROW><ROW><id>10872643</id><snippet>type()</snippet></ROW><ROW><id>10872643</id><snippet>dict()</snippet></ROW><ROW><id>10872672</id><snippet>action="/cgi-bin/save_file.py"</snippet></ROW><ROW><id>10872672</id><snippet>chmod 755 save_file.py</snippet></ROW><ROW><id>10872672</id><snippet>open(os.path.join('/path/to/upload/files', fn)</snippet></ROW><ROW><id>10873058</id><snippet>$:~/temp$ cat data.dat
1.0  2.0
2.0  4.2
3.0  8.4
4.0  16.1
</snippet></ROW><ROW><id>10873058</id><snippet>pylab</snippet></ROW><ROW><id>10873058</id><snippet>loadtxt</snippet></ROW><ROW><id>10873058</id><snippet>import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import scipy as sy
import pylab as plb  

data = plb.loadtxt('data.dat')  
x = data[:,0]
y= data[:,1]

def func(x, a, b, c):
  return a*x**b + c

p0 = sy.array([1,1,1])
coeffs, matcov = curve_fit(func, x, y, p0)

yaj = func(x, coeffs[0], coeffs[1], coeffs[2])
print(coeffs)
print(matcov)

plt.plot(x,y,'x',x,yaj,'r-')
plt.show()
</snippet></ROW><ROW><id>10873256</id><snippet>button_image_url</snippet></ROW><ROW><id>10873256</id><snippet>---SWFUpload Instance Info---
Version: 2.2.0 2009-03-25
Movie Name: SWFUpload_0
Settings:
    upload_url:               /document/1/add-file
    flash_url:                /static/g/plugins/uploadify/uploadify.swf
    use_query_string:         false
    requeue_on_error:         false
    http_success:             
    assume_success_timeout:   30
    file_post_name:           file
    post_params:              [object Object]
    file_types:               *.*
    file_types_description:   All Files
    file_size_limit:          0
    file_upload_limit:        0
    file_queue_limit:         999
    debug:                    true
    prevent_swf_caching:      false
    button_placeholder_id:    id_file
    button_placeholder:       Not Set
    button_image_url:         /document/1/
    button_width:             120
    button_height:            30
    button_text:              
    button_text_style:        color: #000000; font-size: 16pt;
    button_text_top_padding:  0
    button_text_left_padding: 0
    button_action:            -110
    button_disabled:          false
    custom_settings:          [object Object]
Event Handlers:
    swfupload_loaded_handler assigned:  false
    file_dialog_start_handler assigned: true
    file_queued_handler assigned:       true
    file_queue_error_handler assigned:  true
    upload_start_handler assigned:      true
    upload_progress_handler assigned:   true
    upload_error_handler assigned:      true
    upload_success_handler assigned:    true
    upload_complete_handler assigned:   true
    debug_handler assigned:             true

SWF DEBUG: SWFUpload Init Complete
SWF DEBUG: 
SWF DEBUG: ----- SWF DEBUG OUTPUT ----
SWF DEBUG: Build Number:           SWFUPLOAD 2.2.0
SWF DEBUG: movieName:              SWFUpload_0
SWF DEBUG: Upload URL:             /document/1/add-file
SWF DEBUG: File Types String:      *.*
SWF DEBUG: Parsed File Types:      
</snippet></ROW><ROW><id>10873320</id><snippet>exact</snippet></ROW><ROW><id>10873320</id><snippet>iexact</snippet></ROW><ROW><id>10873320</id><snippet>contains</snippet></ROW><ROW><id>10873320</id><snippet>icontains</snippet></ROW><ROW><id>10873320</id><snippet>in</snippet></ROW><ROW><id>10873320</id><snippet>gt</snippet></ROW><ROW><id>10873320</id><snippet>gte</snippet></ROW><ROW><id>10873320</id><snippet>lt</snippet></ROW><ROW><id>10873320</id><snippet>lte</snippet></ROW><ROW><id>10873320</id><snippet>startswith</snippet></ROW><ROW><id>10873320</id><snippet>istartswith</snippet></ROW><ROW><id>10873320</id><snippet>endswith</snippet></ROW><ROW><id>10873320</id><snippet>iendswith</snippet></ROW><ROW><id>10873320</id><snippet>range</snippet></ROW><ROW><id>10873320</id><snippet>year</snippet></ROW><ROW><id>10873320</id><snippet>month</snippet></ROW><ROW><id>10873320</id><snippet>day</snippet></ROW><ROW><id>10873320</id><snippet>week_day</snippet></ROW><ROW><id>10873320</id><snippet>isnull</snippet></ROW><ROW><id>10873320</id><snippet>search</snippet></ROW><ROW><id>10873320</id><snippet>regex</snippet></ROW><ROW><id>10873320</id><snippet>iregex</snippet></ROW><ROW><id>10873343</id><snippet>&lt;META HTTP-EQUIV="refresh" CONTENT="15"&gt;
</snippet></ROW><ROW><id>10873343</id><snippet>setTimeout("javascript statement to update part of page",milliseconds);
</snippet></ROW><ROW><id>10873353</id><snippet>{{ content|safe }}
</snippet></ROW><ROW><id>10873353</id><snippet>|safe</snippet></ROW><ROW><id>10873516</id><snippet>shutil.rmtree()</snippet></ROW><ROW><id>10873516</id><snippet>noob</snippet></ROW><ROW><id>10873516</id><snippet>noob</snippet></ROW><ROW><id>10873611</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>10873611</id><snippet>/usr/bin/env python /tmp/test.py
</snippet></ROW><ROW><id>10873611</id><snippet>#!/tmp/oh no/bin/python
</snippet></ROW><ROW><id>10873743</id><snippet>re.I</snippet></ROW><ROW><id>10873743</id><snippet>compile()</snippet></ROW><ROW><id>10873743</id><snippet>match()</snippet></ROW><ROW><id>10873743</id><snippet>&gt;&gt;&gt; pattern = re.compile(r'^9', re.I)
&gt;&gt;&gt; a=pattern.match(teststring)
&gt;&gt;&gt; print a
&lt;_sre.SRE_Match object at 0x1140168&gt;
</snippet></ROW><ROW><id>10873791</id><snippet>if file_name.endswith((".html", "_files")):
    # whatever
</snippet></ROW><ROW><id>10873791</id><snippet>with open(file_name) as f:
    f.seek(-6, 2)           # only read the last 6 characters of the file
    if f.read().endswith((".html", "_files")):
        # whatever
</snippet></ROW><ROW><id>10873823</id><snippet>$ celeryd --autoscale=0,10
</snippet></ROW><ROW><id>10873823</id><snippet>$ pip install https://github.com/ask/kombu/zipball/master
$ pip install https://github.com/ask/celery/zipball/master
</snippet></ROW><ROW><id>10873834</id><snippet>&gt;&gt;&gt; x = "foo(a) foo(something), foo(stuff)\n foo(1)"
&gt;&gt;&gt; re.sub(r'foo\(([^)]*)\)', r'\1', x)
u'a something, stuff\n 1'
</snippet></ROW><ROW><id>10873843</id><snippet>astype</snippet></ROW><ROW><id>10873843</id><snippet>&gt;&gt;&gt; x = np.array([[1.0, 2.3], [1.3, 2.9]])
&gt;&gt;&gt; x
array([[ 1. ,  2.3],
       [ 1.3,  2.9]])
&gt;&gt;&gt; x.astype(int)
array([[1, 2],
       [1, 2]])
</snippet></ROW><ROW><id>10873852</id><snippet>class Checkr(Document):
 name = StringField()
 slug = SlugField()
 url = URLField()
 frequency = IntField()
 owner = IntField()
 start_date = DateTimeField()
 end_date = DateTimeField()
 current_response_time = FloatField()
 current_response_code = IntField()
 hourly_log = ListField(EmbeddedDocumentField(AggregatedUptime))
 dayly_log = ListField(EmbeddedDocumentField(AggregatedUptime))
 weekly_log = ListField(EmbeddedDocumentField(AggregatedUptime))
</snippet></ROW><ROW><id>10873852</id><snippet>class Checkr(Document):
 name = StringField()
 slug = SlugField()
 url = URLField()
 frequency = IntField()
 owner = IntField()
 start_date = DateTimeField()
 end_date = DateTimeField()
 current_response_time = FloatField()
 current_response_code = IntField()
 HourlyLog = ListField(EmbeddedDocumentField(AggregatedUptime))
 DaylyLog = ListField(EmbeddedDocumentField(AggregatedUptime))
 WeeklyLog = ListField(EmbeddedDocumentField(AggregatedUptime))
</snippet></ROW><ROW><id>10874042</id><snippet>import numpy as np
scores, ratings = np.array([(t.score, t.rating) for t in text_collection]).T

print 'average score: ', np.mean(scores)
print 'average rating: ', np.mean(ratings)
print 'average positive score: ', np.mean(scores[scores &gt; 0])
print 'average negative score: ', np.mean(scores[scores &lt; 0])
</snippet></ROW><ROW><id>10874042</id><snippet>if np.count_nonzero(scores &lt; 0):
    print 'average negative score: ', np.mean(scores[scores &lt; 0])
</snippet></ROW><ROW><id>10874087</id><snippet>DATABASE = 'C:\\Users\\Brad\\Documents\\flaskr\\flaskr.db'
</snippet></ROW><ROW><id>10874131</id><snippet>sudo pip uninstall flask</snippet></ROW><ROW><id>10874242</id><snippet>blob_key</snippet></ROW><ROW><id>10874242</id><snippet>self.blob_key</snippet></ROW><ROW><id>10874242</id><snippet>self.testbed.init_blobstore_stub()
self.testbed.init_files_stub()
from google.appengine.api import files
file_name = files.blobstore.create(mime_type='application/octet-stream')
with files.open(file_name, 'a') as f:
    f.write('blobdata')
files.finalize(file_name)
blob_key = files.blobstore.get_blob_key(file_name)
</snippet></ROW><ROW><id>10874242</id><snippet>from google.appengine.ext import testbed</snippet></ROW><ROW><id>10874242</id><snippet>self.testbed</snippet></ROW><ROW><id>10874474</id><snippet>def rename(newname):
    def decorator(f):
        f.__name__ = newname
        return f
    return decorator
</snippet></ROW><ROW><id>10874474</id><snippet>@rename('new name')
def f():
    pass
print f.__name__
</snippet></ROW><ROW><id>10874474</id><snippet>f</snippet></ROW><ROW><id>10874503</id><snippet>pairwise()</snippet></ROW><ROW><id>10874503</id><snippet>map()</snippet></ROW><ROW><id>10874562</id><snippet>a.x</snippet></ROW><ROW><id>10874562</id><snippet>__init__()</snippet></ROW><ROW><id>10874562</id><snippet>A</snippet></ROW><ROW><id>10874562</id><snippet>&gt;&gt;&gt; def f(): return 10000
&gt;&gt;&gt; f.__code__.co_consts
(None, 10000)
</snippet></ROW><ROW><id>10874562</id><snippet>del A
</snippet></ROW><ROW><id>10874562</id><snippet>A</snippet></ROW><ROW><id>10874562</id><snippet>A</snippet></ROW><ROW><id>10874562</id><snippet>import gc
gc.collect()
</snippet></ROW><ROW><id>10874562</id><snippet>del A</snippet></ROW><ROW><id>10874562</id><snippet>b</snippet></ROW><ROW><id>10874647</id><snippet>subprocess</snippet></ROW><ROW><id>10874647</id><snippet>subprocess.call(['python.exe', 'testingosfile.py'])
</snippet></ROW><ROW><id>10874647</id><snippet>testingosfile.py</snippet></ROW><ROW><id>10874647</id><snippet>import testingosfile
</snippet></ROW><ROW><id>10874647</id><snippet>testingosfile.py</snippet></ROW><ROW><id>10874647</id><snippet>import testingosfile
</snippet></ROW><ROW><id>10875132</id><snippet>__init__</snippet></ROW><ROW><id>10875132</id><snippet>__init__</snippet></ROW><ROW><id>10875132</id><snippet>class Foo(object):
    def __init__(self):
        self.someAttr = 10
</snippet></ROW><ROW><id>10875142</id><snippet>ValueError: cannot switch from manual field specification to automatic field numbering
</snippet></ROW><ROW><id>10875142</id><snippet>print('{0[0]:{1}s} {0[1]:{2}d} {0[2]:{3}f}'.format(res, 10, 5, .2))
</snippet></ROW><ROW><id>10875157</id><snippet>)</snippet></ROW><ROW><id>10875300</id><snippet>from urllib2 import urlopen
import re

urlpath =urlopen('http://www.divms.uiowa.edu/~jni/courses/ProgrammignInCobol/presentation/')
string = urlpath.read().decode('utf-8')

pattern = re.compile('ch[0-9]*.ppt"') #the pattern actually creates duplicates in the list

filelist = pattern.findall(string)
print(filelist)

for filename in filelist:
    filename=filename[:-1]
    remotefile = urlopen('http://www.divms.uiowa.edu/~jni/courses/ProgrammignInCobol/presentation/' + filename)
    localfile = open(filename,'wb')
    localfile.write(remotefile.read())
    localfile.close()
    remotefile.close()
</snippet></ROW><ROW><id>10875412</id><snippet>QLCDNumber{
    color: rgb(255, 89, 242);    
    background-color: rgb(0, 85, 0);
}
</snippet></ROW><ROW><id>10875449</id><snippet>if 'jay' in rapper.lower():
    #do stuff
</snippet></ROW><ROW><id>10875517</id><snippet>import functools
class reprwrapper(object):
    def __init__(self, repr, func):
        self._repr = repr
        self._func = func
        functools.update_wrapper(self, func)
    def __call__(self, *args, **kw):
        return self._func(*args, **kw)
    def __repr__(self):
        return self._repr(self._func)
</snippet></ROW><ROW><id>10875517</id><snippet>def withrepr(reprfun):
    def _wrap(func):
        return reprwrapper(reprfun, func)
    return _wrap
</snippet></ROW><ROW><id>10875517</id><snippet>@withrepr(lambda x: "&lt;Func: %s&gt;" % x.__name__)
def mul42(y):
    return y*42
</snippet></ROW><ROW><id>10875517</id><snippet>repr(mul42)</snippet></ROW><ROW><id>10875517</id><snippet>'&lt;Func: mul42&gt;'</snippet></ROW><ROW><id>10875624</id><snippet>def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance) # no university here

post_save.connect(create_user_profile, sender=User)
</snippet></ROW><ROW><id>10875624</id><snippet>def save(self, commit=True):
    user = super(RegistrationForm, self).save(commit=False) #this should trigger the signal handler to create a UserProfile instance, but not commit
    user_profile = user.get_profile()
    user_profile.university=self.cleaned_data["university"]
    user_profile.course_title=self.cleaned_data["course_title"]
    if commit:
        user.save()
        user_profile.save()
</snippet></ROW><ROW><id>10875624</id><snippet>class UserProfile(models.Model):
    user = models.OneToOneField(User)

    university = models.ForeignKey('University', default=1)
    course_title = models.ForeignKey('Course_Title', default=1)
</snippet></ROW><ROW><id>10875688</id><snippet>x = static</snippet></ROW><ROW><id>10875688</id><snippet>if</snippet></ROW><ROW><id>10875688</id><snippet>x = static[:]</snippet></ROW><ROW><id>10875688</id><snippet>x</snippet></ROW><ROW><id>10875688</id><snippet>static</snippet></ROW><ROW><id>10875688</id><snippet>static</snippet></ROW><ROW><id>10875795</id><snippet>current = timestamps[0]
count = 0
res = []
for t in timestamps:
    if (t - current) &lt;=  timedelta(minutes= 2): 
         count = count + 1
    else:
         res.append((current,count))
         current = t
         count = 1
res.append(current,count) #add last tuple
</snippet></ROW><ROW><id>10875795</id><snippet>timestamps = [datetime(hours=13,minutes=00), datetime(hours=13,minutes=01), datetime(hours=13,minutes=03), datetime(hours=13,minutes=04), datetime(hours=13,minutes=05), datetime(hours=13,minutes=06), datetime(hours=13,minutes=09)]

res = [(datetime(hours=13,minutes=00),2),(datetime(hours=13,minutes=03),3),(datetime(hours=13,minutes=06),1),(datetime(hours=13,minutes=09),1)]
</snippet></ROW><ROW><id>10876138</id><snippet>from Person import Person
</snippet></ROW><ROW><id>10876138</id><snippet>Basic.py</snippet></ROW><ROW><id>10876138</id><snippet>__init__.py</snippet></ROW><ROW><id>10876138</id><snippet>Person</snippet></ROW><ROW><id>10876388</id><snippet>&gt;&gt;&gt; re.findall('enum\s*{\s*([^}]*)};', 'enum {A,B,C};')
['A,B,C']
&gt;&gt;&gt; re.findall("typedef\s+struct\s+(\w+)\s+(\w+);", "typedef struct blah blah;")
[('blah', 'blah')]
</snippet></ROW><ROW><id>10876481</id><snippet>len(p[0])
</snippet></ROW><ROW><id>10876481</id><snippet>[]</snippet></ROW><ROW><id>10876481</id><snippet>len(p[0]) if len(p)!=0 else 0
</snippet></ROW><ROW><id>10876481</id><snippet>[[],[],[],...]</snippet></ROW><ROW><id>10876481</id><snippet>[]</snippet></ROW><ROW><id>10876481</id><snippet>numpy</snippet></ROW><ROW><id>10876481</id><snippet>numpy.matrix([]).tolist()</snippet></ROW><ROW><id>10876481</id><snippet>[[]]</snippet></ROW><ROW><id>10876481</id><snippet>numpy.matrix([[],[],[]])</snippet></ROW><ROW><id>10876481</id><snippet>matrix([], shape=(3, 0), dtype=float64)</snippet></ROW><ROW><id>10876715</id><snippet>class MyMainWindow(QWidget):
    def __init__(self):
        QWidget.__init__(self, None)

        vbox = QVBoxLayout(self)

        self.sone = QSlider(Qt.Horizontal)
        self.sone.setRange(0,99)
        self.sone.setValue(0)
        vbox.addWidget(self.sone)

        self.stwo = QSlider(Qt.Horizontal)
        self.stwo.setRange(0,99)
        self.stwo.setValue(99)
        vbox.addWidget(self.stwo)

        self.sone.valueChanged.connect(self.sliderChanged)

    def sliderChanged(self, val):
        self.stwo.setValue(self.stwo.maximum() - val)
</snippet></ROW><ROW><id>10876715</id><snippet>sliderChanged()</snippet></ROW><ROW><id>10876715</id><snippet>setValue()</snippet></ROW><ROW><id>10876715</id><snippet>stwo</snippet></ROW><ROW><id>10877019</id><snippet>gtk.Frame</snippet></ROW><ROW><id>10877019</id><snippet>import gtk

w = gtk.Window()
w.connect('destroy', lambda x: gtk.main_quit())
f = gtk.Frame()
b = gtk.HBox()
f.add(b)
w.add(f)
w.show_all()

gtk.main()
</snippet></ROW><ROW><id>10877096</id><snippet>def Colluding(p1,p2,itemDict,k, time):
if k &gt;= len(itemDict)/2:
    return True
if k == 0:
    if time == 0:
        if p1 == p2 and p1 in itemDict[p2]:
            return True
        else:
            return False
    if time == 1:
        if p1 in itemDict[p2]:
            return True
        else:
            return False
for p in itemDict[p1]:
    if Colluding(p1,p,itemDict,k-1,1) and p == p2:
        return True
    else:
        return False
return False

def compute_ranks(graph, k):
    d = 0.8 # damping factor
    numloops = 10
    ranks = {}
    npages = len(graph)
    for page in graph:
        ranks[page] = 1.0 / npages
    for i in range(0, numloops):
        newranks = {}
        for page in graph:
            newrank = (1 - d) / npages
            for node in graph:
                if page in graph[node] and not Colluding(page, node, graph, k,0):
                    newrank = newrank + d * (ranks[node]/len(graph[node]))
            newranks[page] = newrank
        ranks = newranks
    return ranks
</snippet></ROW><ROW><id>10877278</id><snippet>&lt;% if news_items|length &gt; 0 %&gt;
</snippet></ROW><ROW><id>10877278</id><snippet>{% if news_items|length &gt; 0 %}
</snippet></ROW><ROW><id>10877340</id><snippet>[(k, dict(L2).get(k, '')) for k in L1]</snippet></ROW><ROW><id>10877340</id><snippet>dict(L2)</snippet></ROW><ROW><id>10877340</id><snippet>d = dict(L2)
[(k, d.get(k, '')) for k in L1]
</snippet></ROW><ROW><id>10877699</id><snippet>In [5]: A &amp; B

array([[ True, False, False],
       [False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>10877699</id><snippet>In [6]: C = empty_like(A)

In [7]: logical_and(A, B, C)

array([[ True, False, False],
       [False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>10877825</id><snippet>self.StyleSetForeground(wx.stc.STC_STYLE_DEFAULT,wx.Colour(230, 230, 250))</snippet></ROW><ROW><id>10877825</id><snippet>self.StyleSetSpec(stc.STC_P_COMMENTLINE,
    "fore:#007F00,face:%(other)s,size:%(size)d" % faces)
</snippet></ROW><ROW><id>10877825</id><snippet>wx.stc.STC_STYLE_LINENUMBER</snippet></ROW><ROW><id>10877825</id><snippet>self.StlyeSetSpec()</snippet></ROW><ROW><id>10877825</id><snippet>self.StyleSetForeground()</snippet></ROW><ROW><id>10877825</id><snippet>self.StyleClearAll()</snippet></ROW><ROW><id>10877892</id><snippet>#include &lt;dlfcn.h&gt;

typedef int (*fcn)();

int main()
{
    void* dll = dlopen("libtest.so", RTLD_LAZY);

    /* dlerror checks here */

    fcn Test = (fcn)dlsym(dll, "test");

    Test();

    dclose(dll);

    return 0;
}
</snippet></ROW><ROW><id>10877921</id><snippet>data['name'].encode('utf8').decode('utf8') 
</snippet></ROW><ROW><id>10877921</id><snippet>bytes</snippet></ROW><ROW><id>10878795</id><snippet>@app.template_filter()
@evalcontextfilter
def mark2html(eval_ctx, value):
    result = value.replace('[s]',u'&lt;strong&gt;')
    result = result.replace('[/s]',u'&lt;/strong&gt;')
    if eval_ctx.autoescape:
        result = Markup(result)
    return result
</snippet></ROW><ROW><id>10878858</id><snippet>class priyank_patel:
    def __init__(priyank):
       priyank.bla = 2
</snippet></ROW><ROW><id>10879093</id><snippet>a</snippet></ROW><ROW><id>10879093</id><snippet>b</snippet></ROW><ROW><id>10879093</id><snippet>c</snippet></ROW><ROW><id>10879093</id><snippet>a</snippet></ROW><ROW><id>10879093</id><snippet>b</snippet></ROW><ROW><id>10879093</id><snippet>c</snippet></ROW><ROW><id>10879355</id><snippet>import matplotlib.pyplot as plt

x = [0,0,1,0,1,1,0,1,1,0,0,0,1]
plt.bar(range(len(x)), x, align='center')
</snippet></ROW><ROW><id>10879367</id><snippet>import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)
button1 = QtGui.QCheckBox('test 1')
group = QtGui.QButtonGroup()
group.setExclusive(True)
group.addButton(button1)
print button1.isChecked()
button1.toggle()
print button1.isChecked()
button1.toggle()
print button1.isChecked()
# toggle seems not to work, add a second button
button2 =  QtGui.QCheckBox('test 2')
group.addButton(button2)
print button2.isChecked()
button2.toggle()
print button1.isChecked()
print button2.isChecked()
</snippet></ROW><ROW><id>10879441</id><snippet>&gt;&gt;&gt; parts = [int(s) for s in '198.124.252.130'.split('.')]
&gt;&gt;&gt; parts2 = [int(s) for s in '198.124.252.101'.split('.')]
&gt;&gt;&gt; from operator import sub
&gt;&gt;&gt; diff = sum(d * 10**(3-pos) for pos,d in enumerate(map(sub, parts, parts2)))
&gt;&gt;&gt; diff
29
</snippet></ROW><ROW><id>10879441</id><snippet>from functools import partial
from operator import sub

def compare_ips(base, ip1, ip2):
    base = [int(s) for s in base.split('.')]
    parts1 = (int(s) for s in ip1.split('.'))
    parts2 = (int(s) for s in ip2.split('.'))
    test1 = sum(abs(d * 10**(3-pos)) for pos,d in enumerate(map(sub, base, parts1)))
    test2 = sum(abs(d * 10**(3-pos)) for pos,d in enumerate(map(sub, base, parts2)))
    return cmp(test1, test2)

base = '198.124.252.101'
test_list = ['198.124.252.102','134.55.41.41','134.55.219.121',
             '134.55.219.137','134.55.220.45', '198.124.252.130']
sorted(test_list, cmp=partial(compare_ips, base))
# yields:
# ['198.124.252.102', '198.124.252.130', '134.55.219.121', '134.55.219.137', 
#  '134.55.220.45', '134.55.41.41']
</snippet></ROW><ROW><id>10879498</id><snippet>settings.py</snippet></ROW><ROW><id>10879498</id><snippet>.bashrc</snippet></ROW><ROW><id>10879619</id><snippet>runserver</snippet></ROW><ROW><id>10879660</id><snippet>class QStandardItemEditorCreator(QItemEditorCreatorBase):
    def __init__(self, cls):
        super(QStandardItemEditorCreator, self).__init__()
        self.propertyName = cls.staticMetaObject.userProperty().name()
        self.cls = cls

    def createWidget(self, parent):
        return self.cls(parent)

    def valuePropertyName(self):
        return self.propertyName
</snippet></ROW><ROW><id>10879860</id><snippet>__getattr__()</snippet></ROW><ROW><id>10879860</id><snippet>class MagicClass(object):
    def __getattr__(self, name):
        def wrapper(*args, **kwargs):
            print "'%s' was called" % name
        return wrapper

ob = MagicClass()
ob.unknown_method()
ob.unknown_method2()
</snippet></ROW><ROW><id>10879860</id><snippet>'unknown_method' was called
'unknown_method2' was called
</snippet></ROW><ROW><id>10879883</id><snippet>sum(c.A for c in c_list)
</snippet></ROW><ROW><id>10880123</id><snippet>sorted(ex1_pattern, key=ex1_pattern.get)
</snippet></ROW><ROW><id>10880174</id><snippet>turns = [[4, 6, 2, 8, 1, 9, 5, 5, 3, 7, 6, 8, 2, 4]]
turns.append([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4])
turns.append([4, 6, 2, 8, 1, 9, 6, 5, 3, 7, 6, 8, 2, 4]) 
turns.append([0, 0, 26, 24, 3, 7, 5, 4, 25, 25, 21, 21, 21, 21])
turns.append([0, 0, 0, 0, 7, 3, 8, 2, 0, 0, 29, 29, 29, 29])
turns.append([0, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>10880174</id><snippet>turns = [[4, 6, 2, 8, 1, 9, 5, 5, 3, 7, 6, 8, 2, 4],
         [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4],
         [4, 6, 2, 8, 1, 9, 6, 5, 3, 7, 6, 8, 2, 4],
         [0, 0, 26, 24, 3, 7, 5, 4, 25, 25, 21, 21, 21, 21],
         [0, 0, 0, 0, 7, 3, 8, 2, 0, 0, 29, 29, 29, 29],
         [0, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>10880397</id><snippet>c = Counter(dict((x.split()[0], float(x.split()[1])) for x in inp))
d = Counter(dict((x.split()[0], float(x.split()[1])) for x in inp2))
</snippet></ROW><ROW><id>10880397</id><snippet>c+d</snippet></ROW><ROW><id>10880397</id><snippet>Counter({'gln': 4.21, 'asp': 2.87, 'his': 1.12, 'arg': 1.07})
</snippet></ROW><ROW><id>10880397</id><snippet>s = Counter()
for filename in glob.iglob('*.txt'):
    with open(filename, 'r') as f:
        for line in f:
            k, v = line.split()
            s[k] += float(v)
print s
with open('sum.txt', 'w') as f:
    for k, v in sorted(s.iteritems()):
        f.write('{0} {1}\n'.format(k, v))
</snippet></ROW><ROW><id>10880820</id><snippet>string.join</snippet></ROW><ROW><id>10880820</id><snippet>values = ','.join(str(v) for v in value_list)
</snippet></ROW><ROW><id>10881210</id><snippet>ax.set_xlim()</snippet></ROW><ROW><id>10881210</id><snippet>ax.set_ylim()</snippet></ROW><ROW><id>10881210</id><snippet>ax.set_zlim()</snippet></ROW><ROW><id>10881210</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)

x = 0.7 * np.outer(np.cos(u), np.sin(v))
y = 0.4 * np.outer(np.sin(u), np.sin(v))
z = 0.1 * np.outer(np.ones(np.size(u)), np.cos(v))
ax.plot_surface(x, y, z,  rstride=4, cstride=4, color='b')
ax.set_xlim([-0.5, 0.5])
ax.set_ylim([-0.5, 0.5])
ax.set_zlim([-0.5, 0.5])

plt.show()
</snippet></ROW><ROW><id>10881447</id><snippet>from sales.models import Item as SalesItem
from expenses.models import Item as ExpenseItem

class ExpenseChannel(autocomplete_light.ChannelBase):
    placeholder='Select an item (e)'
    model = ExpenseItem

    def query_filter(self, results):
        q = self.request.GET.get('q', None)

        if q:
            if results.model == ExpenseItem:
                results = results.filter(
                    Q(name__icontains=q)
    return results

class SalesChannel(autocomplete_light.ChannelBase):
    model = SalesItem
    placeholder = 'Select an item (s)'

    def query_filter(self, results):
        q = self.request.GET.get('q', None)

        if q:
            if results.model == SalesItem:
                results = results.filter(
                    Q(name__icontains=q)
    return results

autocomplete_light.register(ExpenseChannel)
autocomplete_light.register(SalesChannel)
</snippet></ROW><ROW><id>10881447</id><snippet>channel_name</snippet></ROW><ROW><id>10881514</id><snippet>&gt;&gt;&gt; t = Trie()
&gt;&gt;&gt; t['they'] = 15
&gt;&gt;&gt; 'the' in t
True
&gt;&gt;&gt; print t['the']
None
</snippet></ROW><ROW><id>10881514</id><snippet>find_prefix</snippet></ROW><ROW><id>10881514</id><snippet>&gt;&gt;&gt; t.find_prefix("theirs")
(None, 'irs')                 # Prefix "the" has no value
</snippet></ROW><ROW><id>10881514</id><snippet>nltk/containers.py</snippet></ROW><ROW><id>10881514</id><snippet>__setitem__</snippet></ROW><ROW><id>10881514</id><snippet>__getitem__</snippet></ROW><ROW><id>10881514</id><snippet>t[key]</snippet></ROW><ROW><id>10881514</id><snippet>keys()</snippet></ROW><ROW><id>10881514</id><snippet>subtrie</snippet></ROW><ROW><id>10881514</id><snippet>&gt;&gt;&gt; t.subtrie('th').keys()
['ey']
</snippet></ROW><ROW><id>10881514</id><snippet>containers.py</snippet></ROW><ROW><id>10881514</id><snippet>nltk/containers.py</snippet></ROW><ROW><id>10881514</id><snippet>Trie</snippet></ROW><ROW><id>10881571</id><snippet>&gt;&gt;&gt; API_STATUS = {1: 'some status', 2: 'some other status message'}
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(API_STATUS, width=1)
{1: 'some status',
 2: 'some other status message'}
</snippet></ROW><ROW><id>10881737</id><snippet>&gt;&gt;&gt; a = [['id123','ddf',1],['id456','ddf',1],['id789','ddf',1]]
&gt;&gt;&gt; next(x for x in a if x[0] == 'id456')
['id456', 'ddf', 1]
</snippet></ROW><ROW><id>10881753</id><snippet>CategorizedPlaintextCorpusReader</snippet></ROW><ROW><id>10881753</id><snippet>mr = CategorizedPlaintextCorpusReader(path_to_your_reviews, r'(?!\.).*\.txt',
        cat_pattern=r'(neg|pos)/.*')
</snippet></ROW><ROW><id>10881753</id><snippet>cat_pattern</snippet></ROW><ROW><id>10881925</id><snippet>s2 = s1[:s.rfind('\n')]  #This picks up the newline after "everything"
</snippet></ROW><ROW><id>10881925</id><snippet>s2 = s1[:s1.rfind('\n')]  
</snippet></ROW><ROW><id>10882066</id><snippet>set</snippet></ROW><ROW><id>10882094</id><snippet>__init__</snippet></ROW><ROW><id>10882094</id><snippet>def get_id_tuple(f, args, kwargs, mark=object()):
    """ 
    Some quick'n'dirty way to generate a unique key for an specific call.
    """
    l = [id(f)]
    for arg in args:
        l.append(id(arg))
    l.append(id(mark))
    for k, v in kwargs:
        l.append(k)
        l.append(id(v))
    return tuple(l)

_memoized = {}
def memoize(f):
    """ 
    Some basic memoizer
    """
    def memoized(*args, **kwargs):
        key = get_id_tuple(f, args, kwargs)
        if key not in _memoized:
            _memoized[key] = f(*args, **kwargs)
        return _memoized[key]
    return memoized
</snippet></ROW><ROW><id>10882094</id><snippet>@memoize
class Test(object):
    def __init__(self, somevalue):
        self.somevalue = somevalue
</snippet></ROW><ROW><id>10882094</id><snippet>tests = [Test(1), Test(2), Test(3), Test(2), Test(4)]
for test in tests:
    print test.somevalue, id(test)
</snippet></ROW><ROW><id>10882094</id><snippet>1 3072319660
2 3072319692
3 3072319724
2 3072319692
4 3072319756
</snippet></ROW><ROW><id>10882094</id><snippet>class Test(object):
    def __init__(self, somevalue):
        self.somevalue = somevalue

@memoize
def get_test_from_value(somevalue):
    return Test(somevalue)
</snippet></ROW><ROW><id>10882094</id><snippet>__new__</snippet></ROW><ROW><id>10882094</id><snippet>__new__</snippet></ROW><ROW><id>10882094</id><snippet>__new__</snippet></ROW><ROW><id>10882094</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>10882094</id><snippet>__new__</snippet></ROW><ROW><id>10882236</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; replace = re.compile(ur'најавени', flags=re.IGNORECASE | re.UNICODE)
&gt;&gt;&gt; docText = u"трендафилов во мвр се Најавени нови смени поврзани со безбедноста и борбата против организираниот криминал"
&gt;&gt;&gt; print docText
трендафилов во мвр се Најавени нови смени поврзани со безбедноста и борбата против организираниот криминал
&gt;&gt;&gt; docText = replace.sub(u"најавени1",docText)
&gt;&gt;&gt; print docText
трендафилов во мвр се најавени1 нови смени поврзани со безбедноста и борбата против организираниот криминал
</snippet></ROW><ROW><id>10882237</id><snippet>/etc/init.d/net.eth0 restart</snippet></ROW><ROW><id>10882237</id><snippet>HANGUP</snippet></ROW><ROW><id>10882237</id><snippet>nohup</snippet></ROW><ROW><id>10882350</id><snippet>&gt;&gt;&gt;test = ['1/1/9-1/1/13', '1/1/20-1/1/22']
&gt;&gt;&gt;test = [tuple(x.split('-')) for x in test]
&gt;&gt;&gt;print test
[('1/1/9', '1/1/13'), ('1/1/20', '1/1/22')]
&gt;&gt;&gt;result = [x[:x.rfind('/')+1]+str(t) for x,y in test for t in range(int(x.split('/')[-1])+1, int(y.split('/')[-1]))]
&gt;&gt;&gt;print result
['1/1/10', '1/1/11', '1/1/12', '1/1/21']
</snippet></ROW><ROW><id>10882426</id><snippet>draw</snippet></ROW><ROW><id>10882426</id><snippet>import numpy as np
import networkx as nx
import pylab as plt

A = np.array([[0,0,1,0],[1,0,0,0],[1,0,0,1],[1,0,0,0]])
G = nx.DiGraph(A)

pos = [[0,0], [0,1], [1,0], [1,1]]
nx.draw(G,pos)
plt.show()
</snippet></ROW><ROW><id>10882498</id><snippet>arrows</snippet></ROW><ROW><id>10882498</id><snippet>plot(c(0,1),c(0,1))
arrows(0,0,1,1)
</snippet></ROW><ROW><id>10882525</id><snippet>// Introspection, know all the details about classes :
// List all constructors of a class
String.constructors.each{println it}

// List all interfaces implemented by a class
String.interfaces.each{println it}

// List all methods offered by a class
String.methods.each{println it}

// Just list the methods names
String.methods.name

// Get the fields of an object (with their values)
d = new Date()
d.properties.each{println it}
</snippet></ROW><ROW><id>10882666</id><snippet>total = sum(range(upper))
</snippet></ROW><ROW><id>10882666</id><snippet>total = upper * (upper - 1) / 2
</snippet></ROW><ROW><id>10882666</id><snippet>total = sum(range(lower, upper))
</snippet></ROW><ROW><id>10882666</id><snippet>upper</snippet></ROW><ROW><id>10882666</id><snippet>lower</snippet></ROW><ROW><id>10882666</id><snippet>total = upper * (upper - 1) / 2 - lower * (lower - 1) / 2
</snippet></ROW><ROW><id>10882666</id><snippet>range</snippet></ROW><ROW><id>10882666</id><snippet>xrange</snippet></ROW><ROW><id>10883020</id><snippet>def upload():
    if request.vars.myfile:
        video = encode_video(request.vars.myfile.file)
        [do something with video]
    form = SQLFORM.factory(Field('myfile', 'upload',
        uploadfolder='/path/to/upload')).process()
    return dict(form=form)
</snippet></ROW><ROW><id>10883154</id><snippet>import sys

rounds = int(sys.stdin.readline())

score = [0,0]
leads = [0,0]
while rounds &gt; 0:
    results = map(int, sys.stdin.readline().split())
    score[0] += results[0]
    score[1] += results[1]
    lead = score[0] - score[1]
    if (lead &lt; 0 and leads[1] &lt; -lead): leads[1] = -lead
    if (lead &gt; 0 and leads[0] &lt; lead): leads[0] = lead
    rounds -= 1

if (leads[0] &gt; leads[1]): print 1, leads[0]
else: print 2, leads[1]
</snippet></ROW><ROW><id>10883154</id><snippet>cat inputfile | python -m cProfile yourScript.py
</snippet></ROW><ROW><id>10883406</id><snippet>timeit</snippet></ROW><ROW><id>10883406</id><snippet>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; timer = Timer('main()', 'from yourmodule import main')
&gt;&gt;&gt; print timer.timeit()
</snippet></ROW><ROW><id>10883406</id><snippet>python profilers</snippet></ROW><ROW><id>10883406</id><snippet>cProfile</snippet></ROW><ROW><id>10883406</id><snippet>$ python -m cProfile yourprogram.py
</snippet></ROW><ROW><id>10883893</id><snippet>pprint</snippet></ROW><ROW><id>10883893</id><snippet>repr</snippet></ROW><ROW><id>10883893</id><snippet>PrettyPrinter.format</snippet></ROW><ROW><id>10883893</id><snippet># coding=utf8

import pprint

class MyPrettyPrinter(pprint.PrettyPrinter):
    def format(self, object, context, maxlevels, level):
        if isinstance(object, unicode):
            return (object.encode('utf8'), True, False)
        return pprint.PrettyPrinter.format(self, object, context, maxlevels, level)


d = {'foo': u'işüğçö'}

pprint.pprint(d)              # {'foo': u'i\u015f\xfc\u011f\xe7\xf6'}
MyPrettyPrinter().pprint(d)   # {'foo': işüğçö}
</snippet></ROW><ROW><id>10884250</id><snippet>txt.SetSelection(0, 0)
</snippet></ROW><ROW><id>10884280</id><snippet>for i in range(upper + 1)</snippet></ROW><ROW><id>10884280</id><snippet>for i in range(lower, upper + 1)</snippet></ROW><ROW><id>10884280</id><snippet>ar</snippet></ROW><ROW><id>10884280</id><snippet>for i in range(5):</snippet></ROW><ROW><id>10884280</id><snippet>for i in range(len(ar)):</snippet></ROW><ROW><id>10884400</id><snippet>chdir</snippet></ROW><ROW><id>10884400</id><snippet>bin/uwsgi -s $PWD/sock/uwsgi.sock --chdir testit --vacuum \
--env DJANGO_SETTINGS_MODULE=testit.testit.settings \
--wsgi-file $PWD/testit/wsgi.py --master
</snippet></ROW><ROW><id>10884449</id><snippet>print "{:&gt;17} {:&gt;17s}".format('line1', 'line2')
</snippet></ROW><ROW><id>10884449</id><snippet>print "{:&gt;17.1f}      {:&gt;12.3f}".format(h,m)
</snippet></ROW><ROW><id>10884449</id><snippet>print 
print "Mean: {:11.2f}      {:12.3f}".format(-0.026, 7.26)
print "Std : {:11.2f}      {:12.3f}".format(2.918, 6.3)
</snippet></ROW><ROW><id>10884449</id><snippet>            line1             line2
             -6.0             7.200
             -5.0             6.377
            -10.0            14.688
             -5.0             2.580
             -8.0             8.421
             -3.0             2.876
             -6.0             9.812
             -8.0             6.218
             -8.0            15.873
              7.5            -2.805

Mean:       -0.03             7.260
Std :        2.92             6.300
</snippet></ROW><ROW><id>10884469</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>10884469</id><snippet>EOF</snippet></ROW><ROW><id>10884469</id><snippet>"""</snippet></ROW><ROW><id>10884527</id><snippet>cron</snippet></ROW><ROW><id>10884527</id><snippet>import datetime
from time import sleep

SECONDS_PER_DAY = 3600 * 24
DAILY_START_TIME = datetime.time(8,15)   # 8:15 am

def seconds(t):
    return 3600*t.hour + 60*t.minute + t.second

def now():
    t = datetime.datetime.now()
    return t.weekday(), seconds(t)

def load_run_days():
    # get data from registry
    return [1,1,1,1,1,0,0]

def days_until_next_run(today, run_days=None):
    if run_days is None:
        run_days = load_run_days()
    # rotate
    run_days = run_days[today+1:] + run_days[:today+1]
    # find next On day
    for days,_on in enumerate(run_days, 1):
        if _on:
            return days
    # no run day found?
    raise ValueError("No 'On' days found")

def sleep_until_next_run():
    today, elapsed = now()
    days_to_wait = days_until_next_run(today)
    sleep(-elapsed + days_to_wait*SECONDS_PER_DAY + seconds(DAILY_START_TIME))

def main():
    while True:
        try:
            sleep_until_next_run()
        except ValueError:
            break

        do_my_stuff()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10884643</id><snippet>?reconnect=true</snippet></ROW><ROW><id>10884643</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>10884762</id><snippet>&gt;&gt;&gt; from scipy.stats import ks_2samp
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; 
&gt;&gt;&gt; np.random.seed(12345678);
&gt;&gt;&gt; x = np.random.normal(0,1,1000)
&gt;&gt;&gt; y = np.random.normal(0,1,1000)
&gt;&gt;&gt; z = np.random.normal(1.1,0.9, 1000)
&gt;&gt;&gt; 
&gt;&gt;&gt; ks_2samp(x, y)
(0.022999999999999909, 0.95189016804849658)
&gt;&gt;&gt; ks_2samp(x, z)
(0.41800000000000004, 3.7081494119242173e-77)
</snippet></ROW><ROW><id>10884827</id><snippet>.get()</snippet></ROW><ROW><id>10884827</id><snippet>.post()</snippet></ROW><ROW><id>10884827</id><snippet>LocaleMiddleware</snippet></ROW><ROW><id>10884827</id><snippet>translation.get_language_from_request()</snippet></ROW><ROW><id>10884827</id><snippet>translation.activate(language)</snippet></ROW><ROW><id>10884827</id><snippet>def testFoobar(self):
    c = Client()
    # This will not work.
    translation.deactivate_all()
    # This will not work either.
    translation.activate('en-us')
    # The next call will override the earlier activate/deactivate calls.
    response = c.get("/foobar")
</snippet></ROW><ROW><id>10884827</id><snippet>HTTP_ACCEPT_LANGUAGE</snippet></ROW><ROW><id>10884827</id><snippet>settings.LANGUAGE_CODE</snippet></ROW><ROW><id>10884827</id><snippet>django.utils.translation.get_language_from_request()</snippet></ROW><ROW><id>10884827</id><snippet>django.middleware.locale.LocaleMiddleware.process_request()</snippet></ROW><ROW><id>10884888</id><snippet>timer = Timer('print func()', 'from __main__ import func')
print timer.timeit(1)
</snippet></ROW><ROW><id>10884888</id><snippet>timeit</snippet></ROW><ROW><id>10884888</id><snippet>import sys
import time

if sys.platform == "win32":
    # On Windows, the best timer is time.clock()
    default_timer = time.clock
else:
    # On most other platforms the best timer is time.time()
    default_timer = time.time

t0 = default_timer()
output = func()
t1 = default_timer()
print output, t1 - t0
</snippet></ROW><ROW><id>10884888</id><snippet>    timer = Timer('func()', 'from __main__ import func')
    print timer.timeit(100),
    print func()
</snippet></ROW><ROW><id>10884953</id><snippet>session = Session.object_session(someobject)</snippet></ROW><ROW><id>10885555</id><snippet>raw_input()</snippet></ROW><ROW><id>10885555</id><snippet>input()</snippet></ROW><ROW><id>10885555</id><snippet>input()</snippet></ROW><ROW><id>10885555</id><snippet>eval(input())</snippet></ROW><ROW><id>10885617</id><snippet>source ~/.bashrc</snippet></ROW><ROW><id>10885848</id><snippet>easy_install-2.5</snippet></ROW><ROW><id>10885848</id><snippet>easy_install-2.5 pyopenssl</snippet></ROW><ROW><id>10885848</id><snippet>easy_install</snippet></ROW><ROW><id>10885848</id><snippet>easy_install-2.7</snippet></ROW><ROW><id>10885907</id><snippet>wildcard</snippet></ROW><ROW><id>10885907</id><snippet>print userIndex.query(Q('username', "*", wildcard=True))[:]
</snippet></ROW><ROW><id>10885988</id><snippet>if isValid</snippet></ROW><ROW><id>10885988</id><snippet>if isValid == True</snippet></ROW><ROW><id>10885988</id><snippet>isValid</snippet></ROW><ROW><id>10885988</id><snippet>print</snippet></ROW><ROW><id>10885988</id><snippet>def match(pList):
    b = []
    z = len(pList)-1
    for x in range(z):
        b.append([pList[x][0],0])
    for x in range(z):
        isValid = False
        q = p = 0
        while not isValid:
            q = random.randint(0, z)
            if q &gt; z:
                isValid = False
            elif q &lt; 0:
                isValid = False
            elif pList[q][1]:
                isValid = False
            else:
                isValid = True
        isMatch = False
        while not isMatch:
            if not pList[q][1]:
                isValid = False
                while not isValid:
                    p = random.randint(0,z)
                    if p &gt; z:
                        isValid = False
                    elif p &lt; 0:
                        isValid = False
                    elif pList[p][2]:
                        isValid = False
                    else:
                        if q == p:
                            isValid = False
                        else:
                            isValid = True
                b[q][1] = pList[p][0]
                isMatch = True
    return b
</snippet></ROW><ROW><id>10885988</id><snippet>random.randint(0, z)</snippet></ROW><ROW><id>10885988</id><snippet>&lt; 0</snippet></ROW><ROW><id>10885988</id><snippet>&gt; z</snippet></ROW><ROW><id>10885988</id><snippet>random.randint</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>if x == 1:
    y == 1
elif x == 2:
    y == 2
# ... etc. ad infinitum for every possible integer value of x
</snippet></ROW><ROW><id>10885988</id><snippet>and</snippet></ROW><ROW><id>10885988</id><snippet>or</snippet></ROW><ROW><id>10885988</id><snippet>def match(pList):
    b = []
    z = len(pList)-1
    for x in range(z):
        b.append([pList[x][0],0])
    for x in range(z):
        isValid = False
        q = p = 0
        while not isValid:
            q = random.randint(0, z)
            isValid = not pList[q][1]
        isMatch = False
        while not isMatch:
            if not pList[q][1]:
                isValid = False
                while not isValid:
                    p = random.randint(0,z)
                    isValid = not pList[p][2] and (q != p)
                b[q][1] = pList[p][0]
                isMatch = True
    return b
</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>range(z)</snippet></ROW><ROW><id>10885988</id><snippet>0</snippet></ROW><ROW><id>10885988</id><snippet>z-1</snippet></ROW><ROW><id>10885988</id><snippet>len(pList)</snippet></ROW><ROW><id>10885988</id><snippet>z</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>z = 4</snippet></ROW><ROW><id>10885988</id><snippet>range(z) = [0, 1, 2, 3]</snippet></ROW><ROW><id>10885988</id><snippet>pList[4]</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>z</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>range</snippet></ROW><ROW><id>10885988</id><snippet>for</snippet></ROW><ROW><id>10885988</id><snippet>z</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>random</snippet></ROW><ROW><id>10885988</id><snippet>random.choice</snippet></ROW><ROW><id>10885988</id><snippet>p == q</snippet></ROW><ROW><id>10885988</id><snippet>is</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>q</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>zip</snippet></ROW><ROW><id>10885988</id><snippet>q, p = ...</snippet></ROW><ROW><id>10885988</id><snippet>p</snippet></ROW><ROW><id>10885988</id><snippet>q</snippet></ROW><ROW><id>10885988</id><snippet>z</snippet></ROW><ROW><id>10885988</id><snippet>def match(pList):
    b = []
    for row in pList:
        b.append([row[0], 0])
    for row in pList:
        isValid = False
        while not isValid:
            first_row, b_row = random.choice(zip(pList, b))
            isValid = not first_row[1]
        isMatch = False
        while not isMatch:
            if not first_row[1]:
                isValid = False
                while not isValid:
                    second_row = random.choice(pList)
                    isValid = not second_row[2] and (first_row is not second_row)
                b_row[1] = second_row[0]
                isMatch = True
    return b
</snippet></ROW><ROW><id>10885988</id><snippet>isValid</snippet></ROW><ROW><id>10885988</id><snippet>not first_row[1]</snippet></ROW><ROW><id>10885988</id><snippet>first_row</snippet></ROW><ROW><id>10885988</id><snippet>not first_row[1]</snippet></ROW><ROW><id>10885988</id><snippet>while not isMatch</snippet></ROW><ROW><id>10885988</id><snippet>isMatch</snippet></ROW><ROW><id>10885988</id><snippet>isMatch</snippet></ROW><ROW><id>10885988</id><snippet>False</snippet></ROW><ROW><id>10885988</id><snippet>True</snippet></ROW><ROW><id>10885988</id><snippet>isMatch</snippet></ROW><ROW><id>10885988</id><snippet>isMatch</snippet></ROW><ROW><id>10885988</id><snippet>while isValid</snippet></ROW><ROW><id>10885988</id><snippet>break</snippet></ROW><ROW><id>10885988</id><snippet>break</snippet></ROW><ROW><id>10885988</id><snippet>continue</snippet></ROW><ROW><id>10885988</id><snippet>not isValid</snippet></ROW><ROW><id>10885988</id><snippet>not</snippet></ROW><ROW><id>10885988</id><snippet>isValid</snippet></ROW><ROW><id>10885988</id><snippet>isValid</snippet></ROW><ROW><id>10885988</id><snippet>def match(pList):
    b = []
    for row in pList:
        b.append([row[0], 0])
    for row in pList:
        while True:
            first_row, b_row = random.choice(zip(pList, b))
            if not first_row[1]:
                break
        while True:
            second_row = random.choice(pList)
            if not second_row[2] and (first_row is not second_row):
                break
        b_row[1] = second_row[0]
    return b
</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>def match(pList):
    b = [[row[0], 0] for row in pList]
    for row in pList:
        while True:
            first_row, b_row = random.choice(zip(pList, b))
            if not first_row[1]:
                break
        while True:
            second_row = random.choice(pList)
            if not second_row[2] and (first_row is not second_row):
                break
        b_row[1] = second_row[0]
    return b
</snippet></ROW><ROW><id>10885988</id><snippet>b</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>pList</snippet></ROW><ROW><id>10885988</id><snippet>match</snippet></ROW><ROW><id>10886140</id><snippet>$("#submit_financials").live('click', function(){
    $.ajax({
      url: '', // script url to send
      method: 'POST', // method of sending
      data: $('form').has(this).serialize(),  // .serialize() make query string with form inputs name and value
      dataType:'json',  // expected data format returned from server, you may have something else
      success: function(response) {
          // response contains data returned from server
      }
    });
});
</snippet></ROW><ROW><id>10886140</id><snippet>live()</snippet></ROW><ROW><id>10886140</id><snippet>.on()</snippet></ROW><ROW><id>10886140</id><snippet>$("#container").on('click', '#submit_financials', function(){
    $.ajax({
      url: '', // script url to send
      method: 'POST', // method of sending
      data: $('form').has(this).serialize(),  // .serialize() make query string with form inputs name and value
      dataType:'json',  // expected data format returned from server, you may have something else
      success: function(response) {
          // response contains data returned from server
      }
    });
});
</snippet></ROW><ROW><id>10886140</id><snippet>#container</snippet></ROW><ROW><id>10886140</id><snippet>#submit_financials</snippet></ROW><ROW><id>10886270</id><snippet>sum(int(i.split(':')[-1]) for i in fd.keys())
</snippet></ROW><ROW><id>10886270</id><snippet>55
</snippet></ROW><ROW><id>10886270</id><snippet>:</snippet></ROW><ROW><id>10886270</id><snippet>[int(i.split(':')[-1]) for i in fd.keys()]
</snippet></ROW><ROW><id>10886382</id><snippet>table matrix(record_id, parent_id, matrix_id, x, y, value) 
</snippet></ROW><ROW><id>10886382</id><snippet>select * 
    from matrix
where matrix_id=?
order by x asc, y asc
</snippet></ROW><ROW><id>10886448</id><snippet>from bs4 import BeautifulSoup
import re
import urllib2
soup = BeautifulSoup(urllib2.urlopen("http://www.419scam.org/emails/"))
tags = soup.find_all(href=re.compile("20......../index\.htm")
links = []
for t in tags:
    links.append("http://www.419scam.org/emails/" + t['href'])
</snippet></ROW><ROW><id>10886561</id><snippet>point</snippet></ROW><ROW><id>10886561</id><snippet>1.5</snippet></ROW><ROW><id>10886561</id><snippet>import Image
im = Image.open('1_tree.jpg')
im = im.convert('RGB')
r, g, b = im.split()
r = r.point(lambda i: i * 1.5)
out = Image.merge('RGB', (r, g, b))
out.show()
</snippet></ROW><ROW><id>10886561</id><snippet>1.5</snippet></ROW><ROW><id>10886637</id><snippet>total time used 4.7220001220703125  seconds</snippet></ROW><ROW><id>10886637</id><snippet>2**20</snippet></ROW><ROW><id>10886637</id><snippet>('created proc:', 0)
('created proc:', 1)
('created proc:', 2)
('created proc:', 3)
('created proc:', 4)
('created proc:', 5)
('batch0', ' started')
('batch1', ' started')
('batch2', ' started')
('batch3', ' started')
('batch4', ' started')
('batch5', ' started')
('batch0', ' ended')
('batch1', ' ended')
('batch2', ' ended')
('batch3', ' ended')
('batch5', ' ended')
('batch4', ' ended')
[500.12090773656854, 499.92759577086059, 499.97075039983588]
('total time used', 5.1031057834625244, ' seconds')
</snippet></ROW><ROW><id>10886682</id><snippet>with open('input.txt') as in_file:
    with open('output.txt', 'w') as out_file:
        for line in in_file.readlines():
            word, weight = line.split()[:2]
            out_file.write('%s\t%s' % (word, float(weight) * 2))
</snippet></ROW><ROW><id>10886883</id><snippet>class MyMock(MyClass):
    def f():
        pass
</snippet></ROW><ROW><id>10886883</id><snippet>my_mock = self.mox.CreateMock(MyMock)
my_mock.f().AndReturn(None)
</snippet></ROW><ROW><id>10886947</id><snippet>%paste</snippet></ROW><ROW><id>10887220</id><snippet>import sys
import timeit

def foo():

    setup = """
import random
"""

    foo_1 = """
for i in range(1000):
    random.randint(0, 99) + random.randint(0, 99)
"""

    foo_2 = """
for i in range(1000):
    random.randint(0, 99) + random.randint(0, 99)
"""

    foo_3 = """
for i in range(1000):
    random.randint(0, 99) + random.randint(0, 99)
"""

    print 'foo_1', timeit.Timer(foo_1, setup).timeit(1000)
    print 'foo_2', timeit.Timer(foo_2, setup).timeit(1000)
    print 'foo_3', timeit.Timer(foo_3, setup).timeit(1000)

if __name__ == '__main__':
    if (len(sys.argv) &gt; 1):
        if (sys.argv[1] == 'foo'):
            foo()
    else:
        print 'Which profiling do you want to run?'
        print 'available:'
        print '    foo'
</snippet></ROW><ROW><id>10887220</id><snippet>setup</snippet></ROW><ROW><id>10887220</id><snippet>foo_1</snippet></ROW><ROW><id>10887220</id><snippet>timeit</snippet></ROW><ROW><id>10887220</id><snippet>exec("    import sys")
</snippet></ROW><ROW><id>10887294</id><snippet>class _object: __slots__ = '_MetaSafe__exec', '__dict__'

class MetaSafe(type):

    __REGISTRY = {object: _object}

    @classmethod
    def clone(cls, old):
        return cls(old.__name__, old.__bases__, dict(old.__dict__), old)

    def __new__(cls, name, bases, classdict, old=None):
        # Check on a few classdict keys.
        assert '__new__' not in classdict, '__new__ must not be defined!'
        assert '__slots__' not in classdict, '__slots__ must not be defined!'
        assert '__module__' in classdict, '__module__ must be defined!'
        # Validate all the parent classes.
        valid = []
        for base in bases:
            if base in cls.__REGISTRY:
                valid.append(cls.__REGISTRY[base])
            elif base in cls.__REGISTRY.values():
                valid.append(base)
            else:
                valid.append(cls.clone(base))
        # Wrap callables without thread mark.
        for key, value in classdict.items():
            if callable(value):
                classdict[key] = cls.__wrap(value)
        # Fix classdict and create new class.
        classdict.update({'__new__': cls.__new, '__slots__': (), '__module__':
                          '{}.{}'.format(__name__, classdict['__module__'])})
        cls.__REGISTRY[old] = new = \
            super().__new__(cls, name, tuple(valid), classdict)
        return new

    def __init__(self, name, bases, classdict, old=None):
        return super().__init__(name, bases, classdict)

    @staticmethod
    def __wrap(func):
        @functools.wraps(func)
        def safe(self, *args, **kwargs):
            return self.__exec(func, self, *args, **kwargs)
        return safe

    @classmethod
    def __new(meta, cls, *args, **kwargs):
        self = object.__new__(cls, *args, **kwargs)
        if 'master' in kwargs:
            self.__exec = kwargs['master'].__exec
        else:
            array = tuple(meta.__REGISTRY.values())
            for value in args:
                if isinstance(value, array):
                    self.__exec = value.__exec
                    break
            else:
                self.__exec = Affinity()
        return self
</snippet></ROW><ROW><id>10887294</id><snippet>tkinter</snippet></ROW><ROW><id>10887294</id><snippet>Affinity</snippet></ROW><ROW><id>10887363</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.issubdtype(np.int32, int)
True
&gt;&gt;&gt; np.issubdtype(np.int32, float)
False
&gt;&gt;&gt; np.issubdtype(float, np.floating)
True
&gt;&gt;&gt; np.issubdtype(float, np.inexact)
True
&gt;&gt;&gt; np.issubdtype(np.float32, float)
True
&gt;&gt;&gt; np.issubdtype(np.float32, int)
False
&gt;&gt;&gt; np.issubdtype(np.float32, np.floating)
True
</snippet></ROW><ROW><id>10887452</id><snippet>XWidget</snippet></ROW><ROW><id>10887452</id><snippet>Widget</snippet></ROW><ROW><id>10887452</id><snippet>Widget</snippet></ROW><ROW><id>10887526</id><snippet>json.dumps(json.dumps({ "color" : "color", "message" : "message" }))
</snippet></ROW><ROW><id>10887526</id><snippet>def returnJSON(color, message=None):
  return { "color" : "color", "message" : "message" }
</snippet></ROW><ROW><id>10887526</id><snippet>from pyramid.config import Configurator
from pyramid.renderers import JSON

config = Configurator()
config.add_renderer('json_with_custom_default', JSON(default=json_util.default))
</snippet></ROW><ROW><id>10887526</id><snippet>@view_config(route_name='CreateNewAccount', request_method='GET', renderer='json_with_custom_default')
</snippet></ROW><ROW><id>10887526</id><snippet>Response</snippet></ROW><ROW><id>10887526</id><snippet>from pyramid.response import Response
def returnJSON(color, message):
  json_string = json.dumps({"color": color, "message": message}, default=json_util.default)
  return Response(json_string)
</snippet></ROW><ROW><id>10887566</id><snippet>open('file', 'rb')
</snippet></ROW><ROW><id>10887566</id><snippet>chr(26)
</snippet></ROW><ROW><id>10887606</id><snippet>annotations.py</snippet></ROW><ROW><id>10887606</id><snippet>import Helper
</snippet></ROW><ROW><id>10887606</id><snippet>from . import Helper
</snippet></ROW><ROW><id>10887933</id><snippet> def __init__(self):
         super(django.http.HttpResponseBadRequest, self).__init__("Must add content before making this request.")
</snippet></ROW><ROW><id>10888005</id><snippet>if (udpSocketSend)
{
    udpSocketSend-&gt;bind(*bcast, txudp);
}
</snippet></ROW><ROW><id>10888005</id><snippet>s.bind(('', port))
</snippet></ROW><ROW><id>10888005</id><snippet>bind()</snippet></ROW><ROW><id>10888005</id><snippet>udpSocketSend-&gt;writeDatagram(...)</snippet></ROW><ROW><id>10888005</id><snippet>bind</snippet></ROW><ROW><id>10888005</id><snippet>bind</snippet></ROW><ROW><id>10888005</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>10888132</id><snippet>from Tkinter import *

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.parent = master
        self.initUI()

    def initUI(self):
        self.outputBox = Text(self.parent, bg='yellow', height= 10, fg='green', relief=SUNKEN, yscrollcommand='TRUE')
        self.outputBox.pack(fill='both', expand=True)
        self.button1 = Button(self.parent, text='button1', width=20, bg ='blue', fg='green', activebackground='black', activeforeground='green')
        self.button1.pack(side=RIGHT, padx=5, pady=5)
        self.button2 = Button(self.parent, text='button2', width=25, bg='white', fg='green', activebackground='black', activeforeground='green')
        self.button2.pack(side=LEFT, padx=5, pady=5)

def main():
    root = Tk()
    app = Application(root)
    app.parent.geometry('300x200+100+100')
    app.parent.configure(background = 'red')
    app.mainloop()

main()
</snippet></ROW><ROW><id>10888145</id><snippet>if event.button == 1:</snippet></ROW><ROW><id>10888145</id><snippet>import pygame, sys
from pygame.locals import *

TIMER = 30
SCREEN_X = 200
SCREEN_Y = 200

screen = pygame.display.set_mode((SCREEN_X, SCREEN_Y))
clock = pygame.time.Clock() #tick-tock

ending = button1 = button2 = False

corner1 = (28,18)  #Top Left corner of button 1
corner2 = (56,18)  #Top Left corner of button 2

image_length = 100 #length of the buttons
image_height = 100 #height of the buttons

counter = 0

#Main Loop:
while ending==False:
    counter+=1
    clock.tick(TIMER)
    for event in pygame.event.get():
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                ending=True # Time to leave
                print("Game Stopped Early by user")
        elif event.type == MOUSEBUTTONDOWN:
            if event.button == 1:
                mouse_x, mouse_y = event.pos
                if (mouse_x &gt;= corner1[0]) and (mouse_x &lt;= corner1[0]+image_length) and (mouse_y &gt;= corner1[1]) and (mouse_y &lt;= corner1[1]+image_height):
                    print ("Button one is selected")
                    button1=True
                    button2=False
                elif (mouse_x &gt;= corner2[0]) and (mouse_x &lt;= corner2[0]+image_length) and (mouse_y &gt;= corner2[1]) and (mouse_y &lt;= corner2[1]+image_height):
                    print ("Button two is selected")
                    button1=False
                    button2=True
                else:
                    print ("That's not a button")
                    button1=False
                    button2=False
    if counter == TIMER:  #prints the statements once a second
        counter=0
        if button1==True:
            print ("Button one is currently selected")
        elif button2==True:
            print ("Button two is currently selected")
        else:
            print ("No buttons currently selected")
</snippet></ROW><ROW><id>10888145</id><snippet>True</snippet></ROW><ROW><id>10888218</id><snippet>for line in fileinput.input(inputfilename, openhook=fileinput.hook_compressed):
    #do stuff
</snippet></ROW><ROW><id>10888218</id><snippet>my_list=["foo",bar="baz"]  #this doesn't work (SyntaxError)
</snippet></ROW><ROW><id>10888218</id><snippet>[</snippet></ROW><ROW><id>10888218</id><snippet>]</snippet></ROW><ROW><id>10888368</id><snippet>QueryFrame</snippet></ROW><ROW><id>10888368</id><snippet>cvSetCaptureProperty( capture, CV_CAP_PROP_FRAME_WIDTH, 320);
cvSetCaptureProperty( capture, CV_CAP_PROP_FRAME_HEIGHT, 240);
</snippet></ROW><ROW><id>10888530</id><snippet>{% load staticfiles %}
&lt;img src="{% static "images/hi.jpg" %}" /&gt;
</snippet></ROW><ROW><id>10888530</id><snippet>{% load staticfiles %}
&lt;img src="{% static object.image.url %}" /&gt;
</snippet></ROW><ROW><id>10888782</id><snippet>/Applications/MAMP/htdocs/</snippet></ROW><ROW><id>10888782</id><snippet>app.run</snippet></ROW><ROW><id>10888782</id><snippet>app.run()</snippet></ROW><ROW><id>10888782</id><snippet>todo.py</snippet></ROW><ROW><id>10888782</id><snippet>static_file(filename, root='./static')</snippet></ROW><ROW><id>10888782</id><snippet>todo.py</snippet></ROW><ROW><id>10888782</id><snippet>@route('/static/:filename#.*#', name='css')
def server_static(filename):
    return static_file(filename, root=os.path.join(appPath, 'static'))
</snippet></ROW><ROW><id>10888782</id><snippet>http://localhost:8888/todo/static/style.css</snippet></ROW><ROW><id>10888782</id><snippet>/todo</snippet></ROW><ROW><id>10888782</id><snippet>todo_list</snippet></ROW><ROW><id>10888782</id><snippet>/todo</snippet></ROW><ROW><id>10888782</id><snippet>http://localhost/todo/todo</snippet></ROW><ROW><id>10888782</id><snippet>/</snippet></ROW><ROW><id>10888782</id><snippet>from os.path import join, dirname
...
appPath = dirname(__file__)

@app.route('/todo')
def todo_list():
    conn = sqlite3.connect(join(appPath, 'todo.db'))
    ...
</snippet></ROW><ROW><id>10889125</id><snippet>object_pairs_hook</snippet></ROW><ROW><id>10889125</id><snippet>import json

class decoder(json.JSONDecoder):

    def __init__(self, list_type=list,  **kwargs):
        json.JSONDecoder.__init__(self, **kwargs)
        # Use the custom JSONArray
        self.parse_array = self.JSONArray
        # Use the python implemenation of the scanner
        self.scan_once = json.scanner.py_make_scanner(self) 
        self.list_type=list_type

    def JSONArray(self, s_and_end, scan_once, **kwargs):
        values, end = json.decoder.JSONArray(s_and_end, scan_once, **kwargs)
        return self.list_type(values), end

s = "[1, 2, 3, 4, 3, 2]"
print json.loads(s, cls=decoder) # [1, 2, 3, 4, 3, 2]
print json.loads(s, cls=decoder, list_type=list) # [1, 2, 3, 4, 3, 2]
print json.loads(s, cls=decoder, list_type=set) # set([1, 2, 3, 4])
print json.loads(s, cls=decoder, list_type=tuple) # set([1, 2, 3, 4, 3, 2])
</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>command</snippet></ROW><ROW><id>10889177</id><snippet>commands</snippet></ROW><ROW><id>10889177</id><snippet>os</snippet></ROW><ROW><id>10889177</id><snippet>commands</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>commands</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>commands</snippet></ROW><ROW><id>10889177</id><snippet>&gt;&gt;&gt; %timeit commands.getoutput('echo "foo" | cat')
100 loops, best of 3: 3.02 ms per loop
&gt;&gt;&gt; %timeit subprocess.check_output('echo "foo" | cat', shell=True)
100 loops, best of 3: 5.76 ms per loop
</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>&gt;&gt;&gt; %timeit commands.getoutput('echo "foo" | cat')
100 loops, best of 3: 2.97 ms per loop
&gt;&gt;&gt; %timeit Popen('cat', stdin=PIPE, stdout=PIPE).communicate('foo')[0]
100 loops, best of 3: 4.15 ms per loop
</snippet></ROW><ROW><id>10889177</id><snippet>subprocess</snippet></ROW><ROW><id>10889177</id><snippet>command</snippet></ROW><ROW><id>10889369</id><snippet>users.create_logout_url(self.request.url)
</snippet></ROW><ROW><id>10889606</id><snippet>pat = re.compile(r' A(\d+)')
lst = re.findall(pat, "= A1 A2 A3 A4")
</snippet></ROW><ROW><id>10889606</id><snippet>t = tuple(lst)
</snippet></ROW><ROW><id>10889606</id><snippet>=</snippet></ROW><ROW><id>10889606</id><snippet>pat0 = re.compile(r'=(?: A\d+)+')
pat1 = re.compile(r' A(\d+)')

m = pat0.search("= A1 A2 A3 A4")
if not m:
    print("input string not what was expected")
else:
    s = m.group(0)
    lst = re.findall(pat, s)
</snippet></ROW><ROW><id>10889606</id><snippet>func()</snippet></ROW><ROW><id>10889606</id><snippet>s_code = "func(cmd, param1, param2, param3, param4)"
pat_recognize_args = re.compile(r'func\(cmd([^)]*)\)')
pat_parse_args = re.compile(r'[, ]+([^, ]+)')

m = pat_recognize_args.search(s_code)
if m:
    s = m.group(1)
    lst = re.findall(pat_parse_args, s)
</snippet></ROW><ROW><id>10889606</id><snippet>lst</snippet></ROW><ROW><id>10889606</id><snippet>['param1', 'param2', 'param3', 'param4']</snippet></ROW><ROW><id>10889606</id><snippet>pat_recognize_args</snippet></ROW><ROW><id>10889606</id><snippet>func</snippet></ROW><ROW><id>10889606</id><snippet>(</snippet></ROW><ROW><id>10889606</id><snippet>re</snippet></ROW><ROW><id>10889606</id><snippet>cmd</snippet></ROW><ROW><id>10889606</id><snippet>)</snippet></ROW><ROW><id>10889606</id><snippet>)</snippet></ROW><ROW><id>10889606</id><snippet>)</snippet></ROW><ROW><id>10889606</id><snippet>)</snippet></ROW><ROW><id>10889606</id><snippet>s = m.group(1)</snippet></ROW><ROW><id>10889606</id><snippet>re.findall()</snippet></ROW><ROW><id>10889684</id><snippet>self.crackButton.bind('&lt;ButtonRelease-1&gt;', lambda e: self.crack(Filenamelist, forceclick))
</snippet></ROW><ROW><id>10890206</id><snippet>from selenium.webdriver.common.alert import Alert

... ... ... (code placeholder)

browser.execute_script("document.roomBookingForm.submit(); return true;")
alert = browser.switch_to_alert()
alert.dismiss()
browser.execute_script("processPayment(); return true;")
</snippet></ROW><ROW><id>10890297</id><snippet>string1_gbk = string1.decode('utf-8').encode('gb2312', 'replace')
</snippet></ROW><ROW><id>10890325</id><snippet>self.p4 = p4python.P4.P4(user='new-user')
</snippet></ROW><ROW><id>10890349</id><snippet>&gt;&gt;&gt; A = [[2, 3], 5, 7, 8, [2, 3], 1, [9, 2]]
&gt;&gt;&gt; L = [y for x in A if type(x) == list for y in x]
&gt;&gt;&gt;&gt; [x if (type(x) == int) else x if all([L.count(y) &gt; 1 for y in x]) \
      else [y for y in x if L.count(y) == 1] for x in A]

[[2, 3], 5, 7, 8, [2, 3], 1, [9]]
</snippet></ROW><ROW><id>10890352</id><snippet>import json
import glob
import fileinput
from dateutil import parser
import ast
import gzip

line = []

filestobeanalyzed = glob.glob('../data/*')

for fileName in filestobeanalyzed:
        inputfilename = fileName
        print inputfilename
        pastlines = "" # stores previous unparsable lines
        for line in fileinput.input([inputfilename]):
                line = pastlines + line # put past unparsable lines with current line
                line = line.strip();
                if not line: continue
                try:
                    line = ast.literal_eval(line)
                    line = json.dumps(line)
                    pastlines = "" # reset unparsable lines
                except:
                    pastlines += line # add current line to unparsable lines
                    continue
                date = json.loads(line).get('created_at', None)
                if not date: continue
                date_converted = parser.parse(date).strftime('%Y%m%d')
                outputfilename = gzip.open(date_converted, "a")
                outputfilename.write(line)
                outputfilename.write("\n")

outputfilename.close()
</snippet></ROW><ROW><id>10890416</id><snippet>process_exception</snippet></ROW><ROW><id>10890416</id><snippet>class MyExceptionMiddleware(object):
    def process_exception(self, request, exception):
        if not isinstance(exception, SomeExceptionType):
            return None
        return HttpResponse('some message')
</snippet></ROW><ROW><id>10890555</id><snippet>from mytests import testfunc

def test_parameter_view(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ParameterForm(request.POST)
        if form.is_valid():
            testfunc(form.cleaned_data['parameter'])   # &lt;-- Here the actual testing happens
            return HttpResponseRedirect(reverse(test_result)) # Redirect after POST
    else:
        form = ParameterForm()

    return render_to_response('test.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>10890555</id><snippet>test_result</snippet></ROW><ROW><id>10890640</id><snippet>instance.save()</snippet></ROW><ROW><id>10890640</id><snippet>from django.db.models import Sum
from django.utils.functional import cached_property

class Order(model.Model):
    ...
    @cached_property       # or @property
    def total(self):
         return self.orderitem_set.aggregate(total_sum=Sum('total'))['total_sum']

    # do the same with tax
</snippet></ROW><ROW><id>10890663</id><snippet>import urllib2, gzip

api_url='http://api.crunchbase.com/v/1/financial-organization/venrock.js'
req = urllib2.Request(api_url)
req.add_header('Accept-encoding', 'gzip')
resp = urllib2.urlopen(req)
data = resp.read()

&gt;&gt;&gt; print len(data)
26610
</snippet></ROW><ROW><id>10890663</id><snippet>from StringIO import StringIO

if resp.info().get('Content-Encoding') == 'gzip':
    g = gzip.GzipFile(fileobj=StringIO(data))
    data = g.read()

&gt;&gt;&gt; print len(data)
183159
</snippet></ROW><ROW><id>10890745</id><snippet>last = L.pop</snippet></ROW><ROW><id>10890745</id><snippet>last = L.pop()</snippet></ROW><ROW><id>10890745</id><snippet>L.pop</snippet></ROW><ROW><id>10890745</id><snippet>&lt;build-in method pop of list object&gt;</snippet></ROW><ROW><id>10890745</id><snippet>PIL image object</snippet></ROW><ROW><id>10891039</id><snippet>import matplotlib.pyplot as plt

def read_data(f, num_lines=1, split_on=':'):
    lines = (f.next() for i in range(num_lines))
    pieces = (line.split(split_on) for line in lines)
    data = ((a,float(b)) for a,b in pieces)
    return zip(*data)

with open("xx.txt") as inf:
    amino_names, amino_values = read_data(inf, 4)
    ph_names, ph_values = read_data(inf, 2)

fig = plt.figure(figsize=(2,1))
p1 = fig.add_subplot(1,2,1)
p1.pie(amino_values, labels=amino_names)
p2 = fig.add_subplot(1,2,2)
p2.pie(ph_values, labels=ph_names)
fig.show()
</snippet></ROW><ROW><id>10891340</id><snippet>def add_callback(control, fun):
    def inner():
        return fun(control)
    control['command'] = inner

...

def test_callback(button):
    print "button instance:", button

b = Button(text="click me")
add_callback(b, test_callback)
</snippet></ROW><ROW><id>10891340</id><snippet>def with_callback(control, fun):
    def inner():
        return fun(control)
    control['command'] = inner
    return control

...
b = with_callback(Button(text="click me"), test_callback)
</snippet></ROW><ROW><id>10891796</id><snippet>import matplotlib
from matplotlib.mlab import csv2rec                           
import matplotlib.pyplot as plt                                                           
import numpy
import datetime

inputfilename="test_tpm_log.log"


data = csv2rec(inputfilename, names=['packets', 'time'])

old_value = 0
counter_tpm = []
counter_rollmean = []

for tpm in data['packets']:
        new_value = (tpm + old_value) / 2
        old_value = tpm
        counter_tpm.append(tpm)
        counter_rollmean.append(new_value)


dates_in_file = str(data['time'])
for dates in dates_in_file:
        print dates

rec = zip(counter_tpm, counter_rollmean, data['time'])

print rec
</snippet></ROW><ROW><id>10892021</id><snippet>xrange</snippet></ROW><ROW><id>10892021</id><snippet>open</snippet></ROW><ROW><id>10892021</id><snippet>gc</snippet></ROW><ROW><id>10892021</id><snippet>numpy</snippet></ROW><ROW><id>10892042</id><snippet>fabric.operations.sudo(command, shell=True, pty=True, 
                       combine_stderr=True, user=None, 
                       quiet=False, stdout=None, stderr=None)
</snippet></ROW><ROW><id>10892042</id><snippet>sudo(command, user=sudouser)
</snippet></ROW><ROW><id>10892042</id><snippet>with settings(sudo_user=sudouser):
      sudo(command)
</snippet></ROW><ROW><id>10892262</id><snippet>1e-6 * grid_cell_size</snippet></ROW><ROW><id>10892262</id><snippet>1e-6</snippet></ROW><ROW><id>10892262</id><snippet>scipy</snippet></ROW><ROW><id>10892404</id><snippet>join</snippet></ROW><ROW><id>10892404</id><snippet>from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, relation
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
engine = create_engine('sqlite:///')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String(50))
    addresses = relation("Address", backref="user")

class Address(Base):
    __tablename__ = 'addresses'
    id = Column(Integer, primary_key=True)
    email = Column(String(50))
    user_id = Column(Integer, ForeignKey("users.id"))


Base.metadata.create_all(engine)
</snippet></ROW><ROW><id>10892404</id><snippet>&gt;&gt;&gt; session = Session()
&gt;&gt;&gt; session.add(Address(user=User(name='test')))
&gt;&gt;&gt; session.query(Address).join(User).filter(User.name == 'test').first()
&lt;__main__.Address object at 0x02DB3730&gt;
</snippet></ROW><ROW><id>10892404</id><snippet>&gt;&gt;&gt; a = session.query(Address).join(User).filter(User.name == 'test').first()
&gt;&gt;&gt; a.user.name
'test'
</snippet></ROW><ROW><id>10892442</id><snippet>&gt;&gt;&gt; def merge_func(x,y):
...    return x + y
...
&gt;&gt;&gt;
&gt;&gt;&gt; d1 = {'a' : [42], 'b' : [12], 'c' : [4]}
&gt;&gt;&gt; d2 = {'a' : [3], 'b' : [2], 'd' : [0]}
&gt;&gt;&gt; { key: merge_func(d1.get(key, []), d2.get(key, [])) for key in set( d1.keys() + d2.keys())}
{'a': [42, 3], 'c': [4], 'b': [12, 2], 'd': [0]}
</snippet></ROW><ROW><id>10892469</id><snippet>super(RegisterForm, self).save(commit=False)</snippet></ROW><ROW><id>10892469</id><snippet>commit=False</snippet></ROW><ROW><id>10892979</id><snippet>os.walk</snippet></ROW><ROW><id>10892979</id><snippet>glob.iglob</snippet></ROW><ROW><id>10892979</id><snippet>import os, os.path, re, pprint, sys
#...
for root, dirs, files in os.walk(path):
  counts = {}
  nlines = 0
  for f in filter(lambda n: re.search(r'\.txt$', n), files):
    for l in open(f, 'rt'):
      nlines += 1
      for k in l.split():
        counts[k] = counts[k]+1 if k in counts else 1
  for k, v in counts.items():
    counts[k] = float(v)/nlines

  sys.stdout.write('Frequencies for directory %s:\n'%root
  pprint.pprint(counts)
</snippet></ROW><ROW><id>10893307</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; fobj = StringIO('file\ncontent')
&gt;&gt;&gt; for line in fobj:
...   print line
...
file

content
</snippet></ROW><ROW><id>10893307</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; obj = 1
&gt;&gt;&gt; serialized = pickle.dumps(obj)
&gt;&gt;&gt; serialized
'I1\n.'
&gt;&gt;&gt; pickle.loads(serialized)
1
</snippet></ROW><ROW><id>10893414</id><snippet>&gt;&gt;&gt; from mock import Mock
&gt;&gt;&gt; db = Mock()
&gt;&gt;&gt; db.exists.return_value = True
&gt;&gt;&gt; db.exists()
True
</snippet></ROW><ROW><id>10893414</id><snippet>&gt;&gt;&gt; db.delete(1)
&lt;Mock name='mock.delete()' id='37588880'&gt;
&gt;&gt;&gt; db.delete.assert_called_with(1)
&gt;&gt;&gt; db.delete.assert_called_with(2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\site-packages\mock.py", line 863, in assert_called_with
    raise AssertionError(msg)
AssertionError: Expected call: delete(2)
Actual call: delete(1)
</snippet></ROW><ROW><id>10893420</id><snippet>sed -n '/.*Visible.*/,$p' originalfile &gt; newfile
</snippet></ROW><ROW><id>10893420</id><snippet>sed '1,/.*Visible.*/d' originalfile &gt; newfile
</snippet></ROW><ROW><id>10893427</id><snippet>base</snippet></ROW><ROW><id>10893427</id><snippet>url</snippet></ROW><ROW><id>10893427</id><snippet>&gt;&gt;&gt; urljoin('some', 'thing')
'thing'
</snippet></ROW><ROW><id>10893427</id><snippet>&gt;&gt;&gt; urljoin('http://some', 'thing')
'http://some/thing'
</snippet></ROW><ROW><id>10893427</id><snippet>&lt;a href='thing'&gt;Foo&lt;/a&gt;</snippet></ROW><ROW><id>10893427</id><snippet>http://some/thing</snippet></ROW><ROW><id>10893427</id><snippet>&gt;&gt;&gt; urljoin('http://some/more', 'thing')
'http://some/thing'
</snippet></ROW><ROW><id>10893427</id><snippet>some/more</snippet></ROW><ROW><id>10893427</id><snippet>thing</snippet></ROW><ROW><id>10893427</id><snippet>/some/thing</snippet></ROW><ROW><id>10893427</id><snippet>&gt;&gt;&gt; urljoin('http://some/more/', 'thing') # just a tad / after 'more'
'http://some/more/thing'
</snippet></ROW><ROW><id>10893427</id><snippet>some/more</snippet></ROW><ROW><id>10893427</id><snippet>some/more/</snippet></ROW><ROW><id>10893427</id><snippet>some/more/thing</snippet></ROW><ROW><id>10893427</id><snippet>&gt;&gt;&gt; urljoin('http://some/more/', '/thing')
'http://some/thing'
</snippet></ROW><ROW><id>10893427</id><snippet>some/more/</snippet></ROW><ROW><id>10893427</id><snippet>/thing</snippet></ROW><ROW><id>10893427</id><snippet>some/thing</snippet></ROW><ROW><id>10893632</id><snippet>calibre</snippet></ROW><ROW><id>10893632</id><snippet>.mobi</snippet></ROW><ROW><id>10893778</id><snippet>TorCtl.connect(passphrase="test")
</snippet></ROW><ROW><id>10893778</id><snippet>None</snippet></ROW><ROW><id>10893778</id><snippet>.send_signal</snippet></ROW><ROW><id>10893778</id><snippet>newTorId()</snippet></ROW><ROW><id>10893778</id><snippet>TorCtl.Connection.send_signal(conn, "NEWNYM")</snippet></ROW><ROW><id>10893855</id><snippet>sphinxcontrib.programoutput</snippet></ROW><ROW><id>10893855</id><snippet>argparse</snippet></ROW><ROW><id>10893987</id><snippet>for ax in axes:
    ax.set_anchor('W')
</snippet></ROW><ROW><id>10894075</id><snippet>SL4A -&gt; Interpreters -&gt; Menu -&gt; Start Server
</snippet></ROW><ROW><id>10894075</id><snippet>adb</snippet></ROW><ROW><id>10894075</id><snippet>$ adb shell am start -a com.googlecode.android_scripting.action.LAUNCH_SERVER \
  -n com.googlecode.android_scripting/.activity.ScriptingLayerServiceLauncher \
  --ei com.googlecode.android_scripting.extra.USE_SERVICE_PORT 51943
</snippet></ROW><ROW><id>10894075</id><snippet>$ adb forward tcp:51943 tcp:51943
$ export AP_PORT=51943
</snippet></ROW><ROW><id>10894075</id><snippet>$ python my_script.py
</snippet></ROW><ROW><id>10894075</id><snippet>adb</snippet></ROW><ROW><id>10894075</id><snippet>$ export AP_HOST=192.168.0.100 
</snippet></ROW><ROW><id>10894198</id><snippet>operator.add</snippet></ROW><ROW><id>10894198</id><snippet>sub</snippet></ROW><ROW><id>10894198</id><snippet>PyArg_UnpackTuple(a,#OP,2,2,&amp;a1,&amp;a2)
</snippet></ROW><ROW><id>10894198</id><snippet>operator.add</snippet></ROW><ROW><id>10894198</id><snippet>#define spam2(OP,AOP) static PyObject *OP(PyObject *s, PyObject *a) { \
  PyObject *a1, *a2; \
  if(! PyArg_UnpackTuple(a,#OP,2,2,&amp;a1,&amp;a2)) return NULL; \
  return AOP(a1,a2); }

spam2(op_add           , PyNumber_Add)
</snippet></ROW><ROW><id>10894198</id><snippet>#define spam2(OP,ALTOP,DOC) {#OP, op_##OP, METH_VARARGS, PyDoc_STR(DOC)}, \
                           {#ALTOP, op_##OP, METH_VARARGS, PyDoc_STR(DOC)},
spam2(add,__add__, "add(a, b) -- Same as a + b.")
</snippet></ROW><ROW><id>10894198</id><snippet>a</snippet></ROW><ROW><id>10894198</id><snippet>b</snippet></ROW><ROW><id>10894198</id><snippet>METH_KEYWORDS</snippet></ROW><ROW><id>10894198</id><snippet>*args</snippet></ROW><ROW><id>10894221</id><snippet>try:
    while True:
        packet = eventList.read(24)
except ReadError:
    pass
</snippet></ROW><ROW><id>10894441</id><snippet>-fPIC</snippet></ROW><ROW><id>10894441</id><snippet>-fPIC</snippet></ROW><ROW><id>10894767</id><snippet>data = numpy.array([[1,2,3],[55,56,57],[1,2,3]])

to_select = numpy.array([1,2,3]*3).reshape(3,3) # three rows of [1,2,3]

selected_indices = data == to_select
# array([[ True,  True,  True],
#        [False, False, False],
#        [ True,  True,  True]], dtype=bool)

data = numpy.where(selected_indices, [4,5,6], data)
# array([[4, 5, 6],
#        [55, 56, 57],
#        [4, 5, 6]])

# done in one step, but perhaps not very clear as to its intent
data = numpy.where(data == numpy.array([1,2,3]*3).reshape(3,3), [4,5,6], data)
</snippet></ROW><ROW><id>10894767</id><snippet>numpy.where</snippet></ROW><ROW><id>10894767</id><snippet>selected_indices</snippet></ROW><ROW><id>10894767</id><snippet>selected_indices</snippet></ROW><ROW><id>10894767</id><snippet>[1,2,3]</snippet></ROW><ROW><id>10894834</id><snippet>from lxml import html

doc = html.fromstring(content)
print doc.text_content()
</snippet></ROW><ROW><id>10894834</id><snippet>print doc.body.text_content()
</snippet></ROW><ROW><id>10894928</id><snippet>class Child:
    guardians = models.ManyToManyField('Guardian', related_name='children')

class Guardian:
    .... some other fields
    # children = models.ManyToManyField(Child)  &lt;--- not needed
</snippet></ROW><ROW><id>10894928</id><snippet>class Child:
    guardians = models.ManyToManyField('Guardian', 
        through='ChildGuardianMembership', related_name='children')

class Guardian:
    .... some other fields

class ChildGuardianMembership:
    child = models.ForeignKey(Child)
    guardian = models.ForeignKey(Guardian)
    created_at = models.DateTimeField(auto_now_add=True) # When was this relationship established?
</snippet></ROW><ROW><id>10894928</id><snippet>ChildGuardianMembership.objects.create(child=child_inst, guardian=guardian_inst)
</snippet></ROW><ROW><id>10895081</id><snippet>jsobj["a"]["b"]["e"].append({"f":var3, "g":var4, "h":var5})
jsobj["a"]["b"]["e"].append({"f":var6, "g":var7, "h":var8})
</snippet></ROW><ROW><id>10895485</id><snippet>&gt;&gt;&gt; import pkg_resources
&gt;&gt;&gt; pkg_resources.get_distribution("pyramid").version
</snippet></ROW><ROW><id>10895485</id><snippet>pip install --upgrade pyramid</snippet></ROW><ROW><id>10895674</id><snippet>SELECT id, ( 3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance &lt; 25 ORDER BY distance LIMIT 0 , 20;
</snippet></ROW><ROW><id>10895991</id><snippet>MustacheRendererFactory</snippet></ROW><ROW><id>10895991</id><snippet>class MustacheRendererFactory(object):
  def __init__(self, info):
    self.info = info

  def __call__(self, value, system):
    package, filename = resolve_asset_spec(self.info.name)
    template = os.path.join(package_path(self.info.package), filename)
    template_fh = open(template)
    template_stream = template_fh.read()
    template_fh.close()
    return pystache.render(template_stream, value)
</snippet></ROW><ROW><id>10895991</id><snippet>__init__.py</snippet></ROW><ROW><id>10895991</id><snippet>def main(global_config, **settings):
  config = Configurator(settings=settings)
  # ...
  # Use Mustache renderer
  config.add_renderer(name='.mustache',
    factory='myapp.mustacherenderer.MustacheRendererFactory')
  # ...
</snippet></ROW><ROW><id>10895991</id><snippet>@view_config(route_name='myview', renderer='myapp:templates/notes.mustache')
def my_view(request):
  # ...
</snippet></ROW><ROW><id>10896303</id><snippet>from itertools import imap
max(imap(len, d))
</snippet></ROW><ROW><id>10896303</id><snippet>$ python -m timeit -s "d = {'group 1': 1, 'group 1000': 0}" "len(max(d,key=len))"
1000000 loops, best of 3: 0.538 usec per loop

$ python -m timeit -s "d = {'group 1': 1, 'group 1000': 0}" "max(len(x) for x in d)"
1000000 loops, best of 3: 0.7 usec per loop

$ python -m timeit -s "d = {'group 1': 1, 'group 1000': 0}; from itertools import imap" \
  "max(imap(len, d))"
1000000 loops, best of 3: 0.557 usec per loop
</snippet></ROW><ROW><id>10896382</id><snippet>try:
    # action that may throw an exception
except IOError, e: # Will only catch IOErrors
    if e.errno == errno.ENOENT:
        messages.add_message(request, messages.ERROR, "File not found")
    else:
        raise e    # Re-raise other IOErrors
except OSError, e: # Will only catch OSErrors
    messages.add_message(request, messages.ERROR, "Insufficient permissions")

return render(request, 'hello.html', {})
</snippet></ROW><ROW><id>10896382</id><snippet>OSErrors</snippet></ROW><ROW><id>10896688</id><snippet>import matplotlib.pyplot as plt 
import numpy as np

fig, ax = plt.subplots()

x = [1, 2, 3, 4]
y = [5, 6, 7, 8]

for t in range(10):
    if t == 0:
        points, = ax.plot(x, y, marker='o', linestyle='None')
        ax.set_xlim(0, 10) 
        ax.set_ylim(0, 10) 
    else:
        new_x = np.random.randint(10, size=5)
        new_y = np.random.randint(10, size=5)
        points.set_data(new_x, new_y)
    plt.pause(0.5)
</snippet></ROW><ROW><id>10896813</id><snippet>os.stat('filename').st_size</snippet></ROW><ROW><id>10896813</id><snippet>import os
import sys

class RotatingFile(object):
    def __init__(self, directory='', filename='foo', max_files=sys.maxint,
        max_file_size=50000):
        self.ii = 1
        self.directory, self.filename      = directory, filename
        self.max_file_size, self.max_files = max_file_size, max_files
        self.finished, self.fh             = False, None
        self.open()

    def rotate(self):
        """Rotate the file, if necessary"""
        if (os.stat(self.filename_template).st_size&gt;self.max_file_size):
            self.close()
            self.ii += 1
            if (self.ii&lt;=self.max_files):
                self.open()
            else:
                self.close()
                self.finished = True

    def open(self):
        self.fh = open(self.filename_template, 'w')

    def write(self, text=""):
        self.fh.write(text)
        self.fh.flush()
        self.rotate()

    def close(self):
        self.fh.close()

    @property
    def filename_template(self):
        return self.directory + self.filename + "_%0.2d" % self.ii

if __name__=='__main__':
    myfile = RotatingFile(max_files=9)
    while not myfile.finished:
        myfile.write('this is a test')
</snippet></ROW><ROW><id>10896813</id><snippet>[mpenning@Bucksnort ~]$ ls -la | grep foo_
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_01
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_02
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_03
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_04
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_05
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_06
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_07
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_08
-rw-r--r--  1 mpenning mpenning    50008 Jun  5 06:51 foo_09
[mpenning@Bucksnort ~]$
</snippet></ROW><ROW><id>10896907</id><snippet>extra_content</snippet></ROW><ROW><id>10896907</id><snippet>from django.conf.urls import patterns, include, url
from django.views.generic.dates import ArchiveIndexView
from blog.models import Entry

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^$', ArchiveIndexView.as_view(date_field='pub_date', queryset=Entry.objects.all())),

    url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    url(r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>10896908</id><snippet>unquote</snippet></ROW><ROW><id>10896908</id><snippet>%xx</snippet></ROW><ROW><id>10897312</id><snippet>template.render</snippet></ROW><ROW><id>10897312</id><snippet>path</snippet></ROW><ROW><id>10897354</id><snippet>list[:10]
</snippet></ROW><ROW><id>10897354</id><snippet>list</snippet></ROW><ROW><id>10897708</id><snippet>import json
# get the json str somehow
json_dict = json.loads(json_str)
for domain_dict in json_dict['sip_domains']['domain']:
  print 'domain : %s' % (domain_dict['name']) 
</snippet></ROW><ROW><id>10897992</id><snippet># when instantiating your authentication
api_auth = UserAuth(auth, protected_methods=['GET', 'POST', 'PUT', 'DELETE'])
read_only_auth = UserAuth(auth) # default protected methods are POST/PUT/DELETE
</snippet></ROW><ROW><id>10898267</id><snippet>'20.0'</snippet></ROW><ROW><id>10898267</id><snippet>float</snippet></ROW><ROW><id>10898267</id><snippet>int</snippet></ROW><ROW><id>10898267</id><snippet>float</snippet></ROW><ROW><id>10898267</id><snippet>int</snippet></ROW><ROW><id>10898267</id><snippet>&gt;&gt;&gt; int(float('20.0'))
20
</snippet></ROW><ROW><id>10898354</id><snippet>if False:</snippet></ROW><ROW><id>10898383</id><snippet>Google App Engine/1.6.6
Python 2.5.2 (r252:60911, May 17 2011, 11:51:03) 
[GCC 4.3.1]

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxint
9223372036854775807
</snippet></ROW><ROW><id>10898383</id><snippet>Google App Engine/1.6.6
Python 2.7.2 (default, Dec 14 2011, 14:36:31) 
[GCC 4.4.3]

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxint
2147483647
</snippet></ROW><ROW><id>10898414</id><snippet>&gt;&gt;&gt; from docopt import docopt

&gt;&gt;&gt; usage = """
... usage: prog.py command [--test]
...        prog.py another [--test]
... 
... --test  Perform the test."""

&gt;&gt;&gt; docopt(usage, argv='command --test')
{'--test': True,
 'another': False,
 'command': True}

&gt;&gt;&gt; docopt(usage, argv='--test command')
{'--test': True,
 'another': False,
 'command': True}
</snippet></ROW><ROW><id>10898748</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>10898748</id><snippet># spawnProcess requires you to implement a ProcessProtocol
class TwitterProcess(protocol.ProcessProtocol):
    def outReceived(self, data):
        print("TWITTER: ", data)

    def errReceived(self, data):
        print("TWITTER ERR: ", data)

    def processEnded(self, reason):
        print("twitter process ended.")

# later on...

args = ["python", "twitter_stream.py"] # add other args here if necessary
pp = TwitterProcess()
feedProcess = reactor.spawnProcess(pp, "python", args)
</snippet></ROW><ROW><id>10898748</id><snippet>feedProcess.signalProcess("TERM")
</snippet></ROW><ROW><id>10898923</id><snippet>pat = re.compile('''
    [^A-Z]    # any character except a capital letter
    [A-Z]{3}  # three capital letters
    (         # the beginning of a capturing group
    [a-z]     # one lowercase letter 
    )         # the end of the group
    [A-Z]{3}  # three capital letters
    [^A-Z]    # any character except a capital letter
    ''', re.VERBOSE)
</snippet></ROW><ROW><id>10898923</id><snippet>&gt;&gt;&gt; re.findall(pat, 'AAAAaBBBbBBBBzzZZZxXXXyYYYYwWWWvABCn')
['x', 'v']
</snippet></ROW><ROW><id>10898930</id><snippet>for func in [this_may_cause_an_exception,
             but_I_still_wanna_run_this,
             and_this,
             and_also_this]:
    try:
        func()
    except:
        pass
</snippet></ROW><ROW><id>10898930</id><snippet>lambda</snippet></ROW><ROW><id>10898930</id><snippet>except</snippet></ROW><ROW><id>10898930</id><snippet>def logging_exceptions(f, *args, **kwargs):
    try:
        f(*args, **kwargs)
    except Exception as e:
        print("Houston, we have a problem: {0}".format(e))
</snippet></ROW><ROW><id>10899170</id><snippet>{{ route.list.0.pickup.name }}</snippet></ROW><ROW><id>10899170</id><snippet>{{ route.grouper }}</snippet></ROW><ROW><id>10899216</id><snippet>f.flush()
</snippet></ROW><ROW><id>10899216</id><snippet>flush</snippet></ROW><ROW><id>10899238</id><snippet>def resize_uploaded_image(buf):
    image = Image.open(buf)

    (width, height) = image.size
    (width, height) = scale_dimensions(width, height, longest_side=240)

    resizedImage = image.resize((width, height))

    # Turn back into file-like object
    resizedImageFile = StringIO.StringIO()
    resizedImage.save(resizedImageFile , 'PNG', optimize = True)
    resizedImageFile.seek(0)    # So that the next read starts at the beginning

    return resizedImageFile
</snippet></ROW><ROW><id>10899238</id><snippet>thumbnail()</snippet></ROW><ROW><id>10899238</id><snippet>def resize_uploaded_image(buf):
    from cStringIO import StringIO
    import Image

    image = Image.open(buf)

    maxSize = (240, 240)
    resizedImage = image.thumbnail(maxSize, Image.ANTIALIAS)

    # Turn back into file-like object
    resizedImageFile = StringIO()
    resizedImage.save(resizedImageFile , 'PNG', optimize = True)
    resizedImageFile.seek(0)    # So that the next read starts at the beginning

    return resizedImageFile
</snippet></ROW><ROW><id>10899249</id><snippet>eval</snippet></ROW><ROW><id>10899249</id><snippet>import json
from pprint import pprint

output = '''[data extract]Set-Cookie: JSESSIONID=12buplms5odzt;Path=/config
Transfer-Encoding: chunked
Closing connection #0
 SSLv3, TLS alert, Client hello (1):
} [data not shown]
{"sip_domains":{"prefix":[{"name":""}],"domain":[{"name":"k200.com"},{"name":"zinga.com"},{"name":"rambo.com"}]},"sip_security":{"level":2},"sip_trusted_hosts":{"host":[]},"sip_proxy_mode":{"handle_requests":1}}'''

output = json.loads( output.split("\n")[-1] )

pprint( output )
</snippet></ROW><ROW><id>10899249</id><snippet>output</snippet></ROW><ROW><id>10899249</id><snippet>{'sip_domains': {'domain': [{'name': 'k200.com'},
                            {'name': 'zinga.com'},
                            {'name': 'rambo.com'}],
                 'prefix': [{'name': ''}]},
 'sip_proxy_mode': {'handle_requests': 1},
 'sip_security': {'level': 2},
 'sip_trusted_hosts': {'host': []}}
</snippet></ROW><ROW><id>10899412</id><snippet>lst</snippet></ROW><ROW><id>10899412</id><snippet>None</snippet></ROW><ROW><id>10899672</id><snippet>repr</snippet></ROW><ROW><id>10899672</id><snippet>ping.__repr__</snippet></ROW><ROW><id>10899672</id><snippet>&gt;&gt;&gt; f = getattr(proxy, 'ping')
&gt;&gt;&gt; f()
'ping'
</snippet></ROW><ROW><id>10899957</id><snippet>if not log_entries[lan_host].has_key(domain): 
        log_entries[lan_host][domain]= categories
</snippet></ROW><ROW><id>10899957</id><snippet>log_entries['192.168.5.210']['google.com']
log_entries['192.168.5.210']['webtrendslive.com']
</snippet></ROW><ROW><id>10900047</id><snippet>accept()</snippet></ROW><ROW><id>10900047</id><snippet>read() =&gt; .... =&gt; write()</snippet></ROW><ROW><id>10900047</id><snippet>select()</snippet></ROW><ROW><id>10900047</id><snippet>accept()</snippet></ROW><ROW><id>10900047</id><snippet>tornado</snippet></ROW><ROW><id>10900047</id><snippet>gevent</snippet></ROW><ROW><id>10900047</id><snippet>twisted</snippet></ROW><ROW><id>10900202</id><snippet>def get_fieldsets(self, request, obj=None):
    "Hook for specifying fieldsets for the add form."
    if self.declared_fieldsets:
        return self.declared_fieldsets
    #form = self.get_form(request, obj)
    #return [(None, {'fields': form.base_fields.keys()})]
    form = self.get_form(request, obj)(instance=obj)
    return [(None, {'fields': form.fields.keys()})]
</snippet></ROW><ROW><id>10900355</id><snippet>Counter</snippet></ROW><ROW><id>10900355</id><snippet>floatsums = {}
floatsums['file1.txt'] = ... // insert code to sum the floats

total = sum(floatsums.values())
numfiles = len(floatsums)
</snippet></ROW><ROW><id>10900503</id><snippet>settings.py</snippet></ROW><ROW><id>10900503</id><snippet>craigslist</snippet></ROW><ROW><id>10900503</id><snippet>craigslist\craigslist</snippet></ROW><ROW><id>10900503</id><snippet>settings.py</snippet></ROW><ROW><id>10900503</id><snippet>manage.py sqlall webpage</snippet></ROW><ROW><id>10900564</id><snippet># These functions should be called when you tear down the application
app.teardown_functions = []

def teardown_applications(): 
    for func in app.teardown_functions:
       print('Calling teardown function %s' % func.__name__)
        func()

app.teardown_functions.append(function_tocall_at_exit)
</snippet></ROW><ROW><id>10900564</id><snippet>if __name__ == '__main__':
    gevent.signal(signal.SIGINT, teardown_applications)
    http_server = WSGIServer(('', 5000), app)
    http_server.serve_forever()
</snippet></ROW><ROW><id>10900564</id><snippet>from flask import Flask
from gevent.wsgi import WSGIServer
import gevent
import signal

from gevent import monkey
monkey.patch_all()
</snippet></ROW><ROW><id>10900619</id><snippet>def Runner():
    Lists = []
    for G in range(someRange):
        Lists[G] = []
        Lists[G].append(G*500000 or whatever)
        print Lists[G]
        #This way, you have Lists[0], Lists[1], ..., Lists[someRange]
</snippet></ROW><ROW><id>10900690</id><snippet>Entry</snippet></ROW><ROW><id>10900690</id><snippet>Text</snippet></ROW><ROW><id>10900690</id><snippet># test.py:

#!/usr/bin/env python
a = raw_input('Type something!: \n') #the '\n' flushes the prompt
print a
</snippet></ROW><ROW><id>10900690</id><snippet>sys.stdin</snippet></ROW><ROW><id>10900690</id><snippet>from Tkinter import *
import subprocess

root = Tk() 

e = Entry(root)
e.grid()

b = Button(root,text='QUIT',command=root.quit)
b.grid()

def entryreturn(event):
    proc.stdin.write(e.get()+'\n') # the '\n' is important to flush stdin
    e.delete(0,END)

# when you press Return in Entry, use this as stdin 
# and remove it
e.bind("&lt;Return&gt;", entryreturn)

proc = subprocess.Popen('./test.py',stdin=subprocess.PIPE)

root.mainloop()
</snippet></ROW><ROW><id>10900690</id><snippet>Entry</snippet></ROW><ROW><id>10900690</id><snippet>e</snippet></ROW><ROW><id>10900690</id><snippet>Return</snippet></ROW><ROW><id>10900690</id><snippet>proc</snippet></ROW><ROW><id>10900690</id><snippet>class MyStdout(object):
    def __init__(self,textwidget):
        self.textwidget = textwidget
    def write(self,txt):
        self.textwidget.insert(END,txt)

sys.stdout = MyStdout(mytextwidget)
</snippet></ROW><ROW><id>10900701</id><snippet>    cmd = 'ls -l ' + line
</snippet></ROW><ROW><id>10900701</id><snippet>    cmd = 'ls -l ' + line.strip() 
</snippet></ROW><ROW><id>10900701</id><snippet>\n</snippet></ROW><ROW><id>10900701</id><snippet>getstatusoutput()</snippet></ROW><ROW><id>10900701</id><snippet>In [7]: s, o = commands.getstatusoutput('ls -l dummyFile')

In [8]: s, o = commands.getstatusoutput('ls -l dummyFile\n')
sh: Syntax error: ";" unexpected
</snippet></ROW><ROW><id>10900795</id><snippet>os.mkdir( myTmpDir, 0700 )
// Now save the CookieJar in there...
</snippet></ROW><ROW><id>10900819</id><snippet>except</snippet></ROW><ROW><id>10900819</id><snippet>sys.exit</snippet></ROW><ROW><id>10900819</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; try:
...     sys.exit()
... except Exception:
...     print 'oops'
... 
$ 
</snippet></ROW><ROW><id>10900819</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>10900996</id><snippet>cursor.execute("select CONCAT(nameid, '_', cityid, '.txt') from mydata")
present = set([r[0] for r in cursor])

for pdffile in os.listdir(filepath):
    nameid, cityid = map(int, pdffile.rsplit('.', 1)[0].split('_'))
    print nameid, cityid,
    print "Found" if pdffile in present else "Not found"
</snippet></ROW><ROW><id>10900996</id><snippet>CONCAT</snippet></ROW><ROW><id>10900996</id><snippet>pdffile in present</snippet></ROW><ROW><id>10900996</id><snippet>cursor.execute("select CONCAT(nameid, '_', cityid, '.txt') from mydata")
present = set([r[0] for r in cursor])

for pdffile in (set(os.listdir(filepath)) - present):
    nameid, cityid = map(int, pdffile.rsplit('.', 1)[0].split('_'))
    print nameid, cityid, "Found"
</snippet></ROW><ROW><id>10900996</id><snippet>.difference</snippet></ROW><ROW><id>10900996</id><snippet>-</snippet></ROW><ROW><id>10901038</id><snippet>from webapp2_extras.i18n import _lazy as _
category_list['bikes'] = {'value': _('CATEGORY_BIKES')}
</snippet></ROW><ROW><id>10901091</id><snippet>class NewDict(dict):

    def __init__(self):
        self['Key1'] = 'stuff'
        ...

PrefilledDict = NewDict()
print PrefilledDict['Key1']
</snippet></ROW><ROW><id>10901091</id><snippet>PrefilledDict = NewDict()
print PrefilledDict.Key1
</snippet></ROW><ROW><id>10901092</id><snippet>numpy.random</snippet></ROW><ROW><id>10901092</id><snippet>Image.save</snippet></ROW><ROW><id>10901092</id><snippet>import numpy, Image

for n in xrange(10):
    a = numpy.random.rand(30,30,3) * 255
    im_out = Image.fromarray(a.astype('uint8')).convert('RGBA')
    im_out.save('out%000d.jpg' % n)
</snippet></ROW><ROW><id>10901221</id><snippet>diffs = [0] + [j - data[i] for i,j in enumerate(data[1:])]
</snippet></ROW><ROW><id>10901221</id><snippet>data.txt</snippet></ROW><ROW><id>10901221</id><snippet>123.456
234.567
345.678
</snippet></ROW><ROW><id>10901221</id><snippet>with open('data.txt') as f:
    data = f.readlines()
    diffs = [0] + [float(j) - float(data[i]) for i,j in enumerate(data[1:])]

print diffs
</snippet></ROW><ROW><id>10901221</id><snippet>[0, 111.111, 111.11099999999999]
</snippet></ROW><ROW><id>10901221</id><snippet>with open('result.txt', 'w') as outf:
    for i in diffs:
        outf.write('{0:12.5f}\n'.format(i))
</snippet></ROW><ROW><id>10901221</id><snippet>result.txt</snippet></ROW><ROW><id>10901221</id><snippet>with</snippet></ROW><ROW><id>10901221</id><snippet>with open('result2.txt', 'w') as outf:
    outf.write('{0:12.5f}\n'.format(0.0))
    prev_item = 0;
    with open('data.txt') as inf:
        for i, item in enumerate(inf):
            item = float(item.strip())
            val = item - prev_item
            if i &gt; 0:
                outf.write('{0:12.5f}\n'.format(val))
            prev_item = item
</snippet></ROW><ROW><id>10901261</id><snippet>from itertools import chain

def get_lines(f, n=1):
    return [f.next() for i in xrange(n)]

class BlockReader(object):
    def __init__(self, f, n=1):
        self.f = f
        self.n = n
    def __iter__(self):
        return self
    def next(self):
        return [self.f.next() for i in xrange(self.n)]

fmt = "{:&lt;12}" + "{:&lt;16}"*6 + "\n"
cols = [
    "Time",
    "Head(Depth=0)",
    "Head(Depth=-1)",
    "Head(Depth=-2)",
    "Moisture(Depth=0)",
    "Moisture(Depth=-1)",
    "Moisture(Depth=-2)"
]

def main():
    with open("simulation.txt") as inf, open("result.txt","w") as outf:
        # throw away input header
        get_lines(inf, 5)
        # write output header
        outf.write(fmt.format(*cols))

        # read input file in ten-line chunks
        for block in BlockReader(inf, 10):
            # grab time value
            time = float(block[1].split()[1])

            # grab head and moisture columns
            data = (line.split()[2:4] for line in block[6:9])
            values = (map(float,dat) for dat in data)
            h,m = zip(*values)

            # write data to output file
            outf.write(fmt.format(*chain([time],h,m)))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10901261</id><snippet>Time        Head(Depth=0)   Head(Depth=-1)  Head(Depth=-2)  Moisture(Depth=0)Moisture(Depth=-1)Moisture(Depth=-2)
0.0         -37.743         -36.123         -33.002         0.063           0.075           0.083           
360.0       -1000000.0      -253.971        -64.51          0.045           0.0457          0.0525          
720.0       -1000000.0      -282.591        -71.829         0.055           0.0456          0.0513          
</snippet></ROW><ROW><id>10901341</id><snippet>main_view=models.ImageField(upload_to="photos")
side_view=models.ImageField(upload_to="photos")
</snippet></ROW><ROW><id>10901341</id><snippet>main_view=models.ImageField(upload_to="photos", blank=True, null=True)
side_view=models.ImageField(upload_to="photos", blank=True, null=True)
</snippet></ROW><ROW><id>10902279</id><snippet>with open('filename', 'rb') as f:
    im = Image.fromstring('L;16', (width, height), f.read()) # also try 'L;16B', 'I;16', and 'I;16B'
im.show()
</snippet></ROW><ROW><id>10902279</id><snippet>'L'</snippet></ROW><ROW><id>10902279</id><snippet>'I'</snippet></ROW><ROW><id>10902279</id><snippet>.bin</snippet></ROW><ROW><id>10902311</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; from numpy.random import choice
&gt;&gt;&gt; names = ['Harry', 'Sally', 'Joe', 'Bob', 'Angela', 'Jack', 'Jill', 'Jeff']
&gt;&gt;&gt; weights = [1,4,6,3,5,7,10,14]
&gt;&gt;&gt; p = np.array(weights, dtype=float) / sum(weights)
&gt;&gt;&gt; p
array([ 0.02,  0.08,  0.12,  0.06,  0.1 ,  0.14,  0.2 ,  0.28])

&gt;&gt;&gt; choice(names, size=5, p=p)
array(['Jill', 'Jack', 'Jeff', 'Jeff', 'Angela'], 
      dtype='|S6')
&gt;&gt;&gt; choice(names, size=5, p=p)
array(['Jill', 'Jack', 'Joe', 'Jill', 'Sally'], 
      dtype='|S6')
&gt;&gt;&gt; choice(names, size=5, p=p)
array(['Jack', 'Angela', 'Joe', 'Sally', 'Jill'], 
      dtype='|S6')
</snippet></ROW><ROW><id>10902447</id><snippet># the entry below mixes timestamped and non-timestamped inputs
entry = [[[[240,0,1,116]]],    [[[3,100,8,1]]],
         [[[107,247,0,0]]],    [[[240,0,1,116],26738]],
         [[[3,100,8,1],26738]],[[[107,247,0,0],26738]]]

data = array.array('B')
for sublist in entry:
    for item in sublist[0][0]:
        data.append(item)
        if item == 247:
            break
</snippet></ROW><ROW><id>10902473</id><snippet>colorsys</snippet></ROW><ROW><id>10902473</id><snippet>import colorsys

def pseudocolor(val, minval, maxval):
    # convert val in range minval..maxval to the range 0..120 degrees which
    # coorespond to the colors red..green in the HSV colorspace
    h = (float(val-minval) / (maxval-minval)) * 120
    # convert hsv color (h,1,1) to its rgb equivalent
    # note: the hsv_to_rgb() function expects h to be in the range 0..1 not 0..360
    r, g, b = colorsys.hsv_to_rgb(h/360, 1., 1.)
    return r, g, b

if __name__ == '__main__':
    steps = 10
    print 'val       R      G      B'
    for val in xrange(0, 100+steps, steps):
        print '%3d -&gt; (%.3f, %.3f, %.3f)' % ((val,) + pseudocolor(val, 0, 100))
</snippet></ROW><ROW><id>10902473</id><snippet>val       R      G      B
  0 -&gt; (1.000, 0.000, 0.000)
 10 -&gt; (1.000, 0.200, 0.000)
 20 -&gt; (1.000, 0.400, 0.000)
 30 -&gt; (1.000, 0.600, 0.000)
 40 -&gt; (1.000, 0.800, 0.000)
 50 -&gt; (1.000, 1.000, 0.000)
 60 -&gt; (0.800, 1.000, 0.000)
 70 -&gt; (0.600, 1.000, 0.000)
 80 -&gt; (0.400, 1.000, 0.000)
 90 -&gt; (0.200, 1.000, 0.000)
100 -&gt; (0.000, 1.000, 0.000)
</snippet></ROW><ROW><id>10902477</id><snippet>FormSet</snippet></ROW><ROW><id>10902477</id><snippet>formset.empty_form</snippet></ROW><ROW><id>10902477</id><snippet>__prefix__</snippet></ROW><ROW><id>10902477</id><snippet>var form_count = {{ formset.total_form_count }};
$('#add_form').click(function() {
    var form = $("#empty_form").html().replace(/__prefix__/g, form_count);
    $('#forms').append(form);
    form_count++;
    $('#id_form-TOTAL_FORMS').val(form_count);
});


&lt;div id="empty_form" style="display:none;"&gt;
    {{ formset.empty_form.as_p }}
&lt;/div&gt;
&lt;div id="add_form"&gt;Add another form&lt;/div&gt;
&lt;form id="forms"&gt;
    {{ formset.management_form }}
    {% for form in formset %}
        {{ form.as_p }}
    {% endfor %}
&lt;/form&gt;
</snippet></ROW><ROW><id>10902696</id><snippet>L1[0:1] = 'cake'
</snippet></ROW><ROW><id>10902696</id><snippet>L1</snippet></ROW><ROW><id>10902696</id><snippet>'cake'</snippet></ROW><ROW><id>10902696</id><snippet>'cake'</snippet></ROW><ROW><id>10902696</id><snippet>L1[0] = 'cake'
</snippet></ROW><ROW><id>10902696</id><snippet>L1[0:1] = ['cake']
</snippet></ROW><ROW><id>10902783</id><snippet>ping</snippet></ROW><ROW><id>10902783</id><snippet>ping</snippet></ROW><ROW><id>10902783</id><snippet>scapy</snippet></ROW><ROW><id>10902783</id><snippet>scapy</snippet></ROW><ROW><id>10902783</id><snippet>tcpdump</snippet></ROW><ROW><id>10902858</id><snippet>for root, dirs, files in os.walk(path, '*.txt'):
    out = open(os.path.join(root, '..', '..'), 'a')
    out.write(...)
</snippet></ROW><ROW><id>10903186</id><snippet>&gt;&gt;&gt; sorted(['23', '9', '2'])
['2', '23', '9']
&gt;&gt;&gt; sorted(map(int, ['23', '9', '2']))
[2, 9, 23]
</snippet></ROW><ROW><id>10903186</id><snippet>input = raw_input()
a, b, c = map(int, input.split("/", 2))
order = [a, b, c]
print order
order.sort()
print order
</snippet></ROW><ROW><id>10903186</id><snippet>map(str, order)</snippet></ROW><ROW><id>10903186</id><snippet>map()</snippet></ROW><ROW><id>10903418</id><snippet>def format_row(row):
    return '|' + '|'.join('{0:^3s}'.format(x) for x in row) + '|'

def format_board(board):
    # for a single list with 9 elements uncomment the following line:
    # return '\n\n'.join(format_row(row) for row in zip(*[iter(board)]*3))
    # for a 3x3 list:
    return '\n\n'.join(format_row(row) for row in board)
</snippet></ROW><ROW><id>10903418</id><snippet>&gt;&gt;&gt; print format_board([['1', '1', '9'], ['2@3', '1*6', '7*2'], ['4', '1', '2']])
| 1 | 1 | 9 |

|2@3|1*6|7*2|

| 4 | 1 | 2 |
</snippet></ROW><ROW><id>10903587</id><snippet>%</snippet></ROW><ROW><id>10903587</id><snippet>c.execute("SELECT * FROM data WHERE params LIKE ('%%%s%%') LIMIT 1" % (param))</snippet></ROW><ROW><id>10903587</id><snippet>c.execute("SELECT * FROM data WHERE params LIKE %s LIMIT 1", ("%" + param + "%",))</snippet></ROW><ROW><id>10903737</id><snippet>Food['Fruit'] = Fruit</snippet></ROW><ROW><id>10903737</id><snippet>food</snippet></ROW><ROW><id>10903766</id><snippet>extra</snippet></ROW><ROW><id>10903766</id><snippet>from django.db.models import Sum

items = Item.objects.filter(status='A').annotate(total_amount=Sum('offer__amount'))
</snippet></ROW><ROW><id>10903766</id><snippet>percentage_met</snippet></ROW><ROW><id>10903766</id><snippet>class Item(models.Model):
    ...
    @property
    def percentage_met(self):
        if hasattr(self, 'total_amount'):
            return (self.total_amount / float(self.target_amount)) * 100
        return None
</snippet></ROW><ROW><id>10903839</id><snippet>path</snippet></ROW><ROW><id>10904300</id><snippet>In [11]: import numpy as np
In [12]: import numexpr as ne    
In [13]:     
In [13]: x = np.linspace(0.02, 5.0, 1e7)
In [14]: y = np.sin(x)
In [15]:     
In [15]: timeit z0 = ((x-y) - ((x-y) &gt; 1) * (x-y - 1))/(x+y)
1 loops, best of 3: 1.02 s per loop
In [16]: timeit z1 = ne.evaluate("((x-y) - ((x-y) &gt; 1.) * ((x-y) - 1.))/(x+y)")
10 loops, best of 3: 120 ms per loop    
In [17]: timeit z2 = ne.evaluate("((x-y)/(x+y))")
10 loops, best of 3: 103 ms per loop
</snippet></ROW><ROW><id>10904300</id><snippet>In [40]: timeit w0 = ne.evaluate("where(x-y&gt;1,1,x-y)/(x+y)")
10 loops, best of 3: 114 ms per loop
</snippet></ROW><ROW><id>10904469</id><snippet>fmin_cg</snippet></ROW><ROW><id>10904469</id><snippet>ndarray</snippet></ROW><ROW><id>10904469</id><snippet>sq_fidelity</snippet></ROW><ROW><id>10904469</id><snippet>H_sq = squeez(N, float(eps))
</snippet></ROW><ROW><id>10904867</id><snippet>def before_save(sender, instance, *args, **kwargs):
    instance.test_field = "It worked"

pre_save.connect(before_save, sender=MyClass)
</snippet></ROW><ROW><id>10904905</id><snippet>sorted</snippet></ROW><ROW><id>10904905</id><snippet>L.sort</snippet></ROW><ROW><id>10904905</id><snippet>L</snippet></ROW><ROW><id>10904905</id><snippet>sorted</snippet></ROW><ROW><id>10904961</id><snippet>fileResolver.resolve</snippet></ROW><ROW><id>10904961</id><snippet>str</snippet></ROW><ROW><id>10904961</id><snippet>boost::filesystem::basic_path</snippet></ROW><ROW><id>10904961</id><snippet>boost::fs::path</snippet></ROW><ROW><id>10904961</id><snippet>StringMap</snippet></ROW><ROW><id>10904961</id><snippet>type(paramMap.__class__)</snippet></ROW><ROW><id>10904961</id><snippet>ParameterMap</snippet></ROW><ROW><id>10904961</id><snippet>`std::map&lt;std::string, std::string, mitsuba::SimpleStringOrdering&gt;`
</snippet></ROW><ROW><id>10905069</id><snippet>import threading
import subprocess
import uuid
from flask import Flask
from flask import render_template, url_for, abort, jsonify, request
app = Flask(__name__)

background_scripts = {}

def run_script(id):
    subprocess.call(["/path/to/yourscript.py", "argument1", "argument2"])
    background_scripts[id] = True

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate')
def generate():
    id = str(uuid.uuid4())
    background_scripts[id] = False
    threading.Thread(target=lambda: run_script(id)).start()
    return render_template('processing.html', id=id)

@app.route('/is_done')
def is_done():
    id = request.args.get('id', None)
    if id not in background_scripts:
        abort(404)
    return jsonify(done=background_scripts[id])
</snippet></ROW><ROW><id>10905069</id><snippet>index.html</snippet></ROW><ROW><id>10905069</id><snippet>&lt;a href="{{ url_for('generate') }}"&gt;click me&lt;/a&gt;
</snippet></ROW><ROW><id>10905069</id><snippet>processing.html</snippet></ROW><ROW><id>10905069</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;
    function ajaxCallback(data) {
        if (data.done)
            window.location.replace("http://YOUR_GENERATED_PAGE_URL");
        else
            window.setTimeout(function() {
                $.getJSON('{{ url_for('is_done') }}', {id: {{ id }} }, ajaxCallback);
            }, 3000);
    }
    $(document).ready(function(){
        ajaxCallback({done=false});
    });
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    Processing...
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>10905155</id><snippet># python3
from ctypes import *

_GetWindowText = WinDLL('user32').GetWindowTextW
_GetWindowText.argtypes = [c_void_p,c_wchar_p,c_int]
_GetWindowText.restype = c_int

def GetWindowText(h):
    b = create_unicode_buffer(255)
    _GetWindowText(h,b,255)
    return b.value

FindWindow = WinDLL('user32').FindWindowW
FindWindow.argtypes = [c_wchar_p,c_wchar_p]
FindWindow.restype = c_void_p

h = FindWindow(None,'Untitled - Notepad')
print(GetWindowText(h))
</snippet></ROW><ROW><id>10905155</id><snippet>import win32gui
h = win32gui.FindWindow(None,'Untitled - Notepad')
print(win32gui.GetWindowText(h))
</snippet></ROW><ROW><id>10905397</id><snippet>@decorate
def foo(...):
    ...
</snippet></ROW><ROW><id>10905397</id><snippet>def foo(...):
    ...
foo = decorate(foo)
</snippet></ROW><ROW><id>10905397</id><snippet>started</snippet></ROW><ROW><id>10905397</id><snippet>AttributeError</snippet></ROW><ROW><id>10905397</id><snippet>_started</snippet></ROW><ROW><id>10905397</id><snippet>None</snippet></ROW><ROW><id>10905397</id><snippet>None</snippet></ROW><ROW><id>10905397</id><snippet>import functools

def started(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        if not self._started:
            raise ...
        else:
            return func(self, *args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>10905397</id><snippet>functools.wraps</snippet></ROW><ROW><id>10905397</id><snippet>wrapper</snippet></ROW><ROW><id>10905444</id><snippet>sys.stdin.readline()</snippet></ROW><ROW><id>10905444</id><snippet>raw_input()</snippet></ROW><ROW><id>10905444</id><snippet>line.rstrip("\n")</snippet></ROW><ROW><id>10905444</id><snippet>line.strip().lower()</snippet></ROW><ROW><id>10905483</id><snippet>echo name</snippet></ROW><ROW><id>10905483</id><snippet>echo</snippet></ROW><ROW><id>10905483</id><snippet>print name</snippet></ROW><ROW><id>10905483</id><snippet>os.system()</snippet></ROW><ROW><id>10905483</id><snippet>subprocess</snippet></ROW><ROW><id>10905766</id><snippet>'X' * 42</snippet></ROW><ROW><id>10905766</id><snippet>XXX…</snippet></ROW><ROW><id>10905766</id><snippet>def printLine (text = ''):
    print('X {: ^38} X'.format(text))

def printBorder (title = None):
    print('X' * 42)

def printBox (*lines, title = None, showBottomBorder = False):
    printBorder(title)
    printLine()
    for line in lines:
        printLine(line)
    printLine()
    if showBottomBorder:
        printBorder()

printBox('MULTITASKER - DEEP MENU SYSTEM')
printBox('READY TO START?', '-' * 21, "PRESS THE 'ENTER'", 'KEY TO BEGIN!', '-' * 21, showBottomBorder = True)
</snippet></ROW><ROW><id>10905803</id><snippet>import os
os.chdir('/pathto')
del os 
</snippet></ROW><ROW><id>10905803</id><snippet>os.chdir('/pathto')
</snippet></ROW><ROW><id>10906015</id><snippet>im = np.arange(81).reshape(9,9)
print np.swapaxes(im.reshape(3,3,3,-1),1,2)
</snippet></ROW><ROW><id>10906015</id><snippet>[[[[ 0  1  2]   [[ 3  4  5]   [[ 6  7  8]
   [ 9 10 11]    [12 13 14]    [15 16 17]
   [18 19 20]]   [21 22 23]]   [24 25 26]]]

 [[[27 28 29]   [[30 31 32]   [[33 34 35]
   [36 37 38]    [39 40 41]    [42 43 44]
   [45 46 47]]   [48 49 50]]   [51 52 53]]]

 [[[54 55 56]   [[57 58 59]   [[60 61 62]
   [63 64 65]    [66 67 68]    [69 70 71]
   [72 73 74]]   [75 76 77]]   [78 79 80]]]]
</snippet></ROW><ROW><id>10906015</id><snippet>vstack</snippet></ROW><ROW><id>10906015</id><snippet>column_stack</snippet></ROW><ROW><id>10906015</id><snippet>im =  np.vstack((im[1:],im[0]))
im =  np.column_stack((im[:,1:],im[:,0]))
print np.swapaxes(im.reshape(3,3,3,-1),1,2)

#Output:
[[[[10 11 12]   [[13 14 15]   [[16 17  9]
   [19 20 21]    [22 23 24]    [25 26 18]
   [28 29 30]]   [31 32 33]]   [34 35 27]]]

 [[[37 38 39]   [[40 41 42]   [[43 44 36]
   [46 47 48]    [49 50 51]    [52 53 45]
   [55 56 57]]   [58 59 60]]   [61 62 54]]]

 [[[64 65 66]   [[67 68 69]   [[70 71 63]
   [73 74 75]    [76 77 78]    [79 80 72]
   [ 1  2  3]]   [ 4  5  6]]   [ 7  8  0]]]]
</snippet></ROW><ROW><id>10906015</id><snippet>def new(im):
    rows,cols = im.shape
    final = np.zeros((rows, cols, 3, 3))
    for x in (0,1,2):
        for y in (0,1,2):
            im1 = np.vstack((im[x:],im[:x]))
            im1 = np.column_stack((im1[:,y:],im1[:,:y]))
            final[x::3,y::3] = np.swapaxes(im1.reshape(rows/3,3,cols/3,-1),1,2)
    return final
</snippet></ROW><ROW><id>10906015</id><snippet>new</snippet></ROW><ROW><id>10906015</id><snippet>timeit</snippet></ROW><ROW><id>10906015</id><snippet>def old(im):
    rows,cols = im.shape
    s = []
    for x in xrange(1,rows):
        for y in xrange(1,cols):
            s.append(im[x-1:x+2,y-1:y+2])
    return s
</snippet></ROW><ROW><id>10906025</id><snippet>repr</snippet></ROW><ROW><id>10906025</id><snippet>tuple</snippet></ROW><ROW><id>10906025</id><snippet>from collections import defaultdict

dataset = [('121', set(['NY'])), ('132', set(['CA', 'NY'])), ('198', set(['NY'])), ('676', set(['NY'])), ('89', set(['NY', 'CA']))]
output = defaultdict(list)
for value, key in dataset:
    output[frozenset(key)].append(value)
</snippet></ROW><ROW><id>10906025</id><snippet>from collections import defaultdict

dataset = [('121', set(['NY'])), ('132', set(['CA', 'NY'])), ('198', set(['NY'])), ('676', set(['NY'])), ('89', set(['NY', 'CA']))]
output = defaultdict(list)
for value, key in dataset:
    output[tuple(sorted(key))].append(value)
</snippet></ROW><ROW><id>10906025</id><snippet>&gt;&gt;&gt; s,t = set([736, 9753, 7126, 7907, 3350]), set([3350, 7907, 7126, 9753, 736])
&gt;&gt;&gt; s == t
True
&gt;&gt;&gt; tuple(s) == tuple(t)
False
&gt;&gt;&gt; frozenset(s) == frozenset(t)
True
&gt;&gt;&gt; hash(tuple(s)) == hash(tuple(t))
False
&gt;&gt;&gt; hash(frozenset(s)) == hash(frozenset(t))
True
</snippet></ROW><ROW><id>10906236</id><snippet>class flooderthread(QtCore.QThread):
    ...
    def run(self):
        connecter() # this is the culprit
</snippet></ROW><ROW><id>10906236</id><snippet>fun.main()</snippet></ROW><ROW><id>10906236</id><snippet>connecter()</snippet></ROW><ROW><id>10906236</id><snippet>def main(self):
    connecter()
    ...
    time.sleep(3)
    gui()
    f5.start()
    gui()
    self.sleep(3)  # should be time.sleep(3)
    gui()
    ...
</snippet></ROW><ROW><id>10906282</id><snippet>echo</snippet></ROW><ROW><id>10906282</id><snippet>print</snippet></ROW><ROW><id>10906282</id><snippet>echo</snippet></ROW><ROW><id>10906282</id><snippet>mod_python</snippet></ROW><ROW><id>10906282</id><snippet>wsgi</snippet></ROW><ROW><id>10906282</id><snippet>mod_wsgi</snippet></ROW><ROW><id>10906409</id><snippet>main</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler2</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler2</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler2</snippet></ROW><ROW><id>10906409</id><snippet>main</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler</snippet></ROW><ROW><id>10906409</id><snippet>main</snippet></ROW><ROW><id>10906409</id><snippet>main</snippet></ROW><ROW><id>10906409</id><snippet>BlahHandler</snippet></ROW><ROW><id>10906957</id><snippet>l = ['start of paragraph 1','start of paragraph 2','para 3']
first_words = [p.split()[0] for p in l]
print first_words
</snippet></ROW><ROW><id>10906957</id><snippet>l = ['start of paragraph 1','start of paragraph 2','para 3']
first_words = [p[:p.find(' ')] for p in l]
print first_words
</snippet></ROW><ROW><id>10906957</id><snippet>p</snippet></ROW><ROW><id>10907002</id><snippet>import csv

#
# Row tests
#

def test_notblank(row):
    return any(len(i) for i in row)

def test_bnumeric(row):
    return row[1].isdigit()

def do_tests(row, tests=[test_notblank, test_bnumeric]):
    return all(t(row) for t in tests)

#
# Row processing
#

def process_splitb(row):
    b = row[1].split('.')
    row[1] = b[0]
    row.append(b[1])
    return row

def do_processes(row, processes=[process_splitb]):
    for p in processes:
        row = p(row)
    return row

def main():
    with open("in.csv","rb") as inf, open("out.csv","wb") as outf:
        incsv = csv.reader(inf)
        outcsv = csv.writer(outf)

        outcsv.writerow(incsv.next())    # pass header row
        outcsv.writerows(do_processes(row) for row in incsv if do_tests(row))

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10907205</id><snippet>{{ 5|multiply:10|add:3 }}
</snippet></ROW><ROW><id>10907205</id><snippet>{% with %}</snippet></ROW><ROW><id>10907205</id><snippet>{% with temp=5|multiply:10 %}
    {{ 3|add:temp }}
{% endwith %}
</snippet></ROW><ROW><id>10907330</id><snippet>text = '''mylib|C://desktop//baseicmylib.lib
    randlib|C://desktop//randlib.lib'''

libs = dict(line.split('|', 1) for line in
    (s.strip() for s in text.split('\n')))
</snippet></ROW><ROW><id>10907330</id><snippet>{'randlib': 'C://desktop//randlib.lib',
   'mylib': 'C://desktop//baseicmylib.lib'}
</snippet></ROW><ROW><id>10907622</id><snippet>class Subscription(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))
    secret = db.Column(postgresql.BYTEA)
    type = db.Column(SubscriptionType.db_type())
    status = db.Column(StatusType.db_type())
    subscription_id = db.Column(db.Integer)

    billing_system_id = db.Column(
        db.Integer, 
        db.ForeignKey('public.billing_system.id')
    )
    billing_system = db.relationship('BillingSystem', backref='subscriptions')
</snippet></ROW><ROW><id>10907622</id><snippet>&gt;&gt;&gt; o = BillingSystem.query.get(1)
&gt;&gt;&gt; a = Product1()
&gt;&gt;&gt; a.billing_system_id = o.id
</snippet></ROW><ROW><id>10907622</id><snippet>&gt;&gt;&gt; a.billing_system.subscriptions
[&lt;cPanel Hosting Reseller: 2&gt;]
&gt;&gt;&gt; a.billing_system_id
2
</snippet></ROW><ROW><id>10907800</id><snippet>print</snippet></ROW><ROW><id>10907800</id><snippet>print(aasd),</snippet></ROW><ROW><id>10907800</id><snippet>print('123', end='')</snippet></ROW><ROW><id>10907800</id><snippet>print "1", # special syntax for print statement
print "2"
</snippet></ROW><ROW><id>10907800</id><snippet>print("1", end="") # actually returns None (print() is a function)
print("2")
</snippet></ROW><ROW><id>10907800</id><snippet>12</snippet></ROW><ROW><id>10907800</id><snippet>&gt;&gt;&gt; a = print('123')
123
&gt;&gt;&gt; repr(a)
'None'
&gt;&gt;&gt; a = print('123'),
123 # newline presents
&gt;&gt;&gt; repr(a)
'(None,)' # result is tuple constructed by comma
</snippet></ROW><ROW><id>10908035</id><snippet>variance = sigma
</snippet></ROW><ROW><id>10908035</id><snippet>variance = sigma.copy()
</snippet></ROW><ROW><id>10908035</id><snippet>+=</snippet></ROW><ROW><id>10908035</id><snippet>variance</snippet></ROW><ROW><id>10908035</id><snippet>sigma</snippet></ROW><ROW><id>10908035</id><snippet>&gt;&gt;&gt; sigma = np.array([1])
&gt;&gt;&gt; variance = sigma
&gt;&gt;&gt; variance += 3
&gt;&gt;&gt; sigma
array([4])
</snippet></ROW><ROW><id>10908103</id><snippet>while True:
    try:
        os.mkdir(r"z:\my_lock")
        return
    except OSError as e:
        if e.errno != 21: # Double check that errno will be the same on Windows
            raise
        time.sleep(5)
</snippet></ROW><ROW><id>10908216</id><snippet>codecs.open()</snippet></ROW><ROW><id>10908314</id><snippet>'//table[@class="dataTable sortable"]/form/tr/td[1]/a'</snippet></ROW><ROW><id>10908314</id><snippet>range(1,18)</snippet></ROW><ROW><id>10908314</id><snippet>range(1:18)</snippet></ROW><ROW><id>10908314</id><snippet>scrape = []
companies =[]
import lxml
import lxml.html
import lxml.etree

urlbase = 'http://reuters.com/finance/markets/index?symbol=us!spx&amp;sortBy=&amp;sortDir=&amp;pn='
for i in range(1,18):
    url = urlbase+str(i)
    content = lxml.html.parse(url)
    item = content.xpath('//table[@class="dataTable sortable"]/form/tr/td[1]/a')
    ticker = [thing.text for thing in item]
    print ticker
</snippet></ROW><ROW><id>10908498</id><snippet>days = [today.strftime("%a %b %y"), ...]
</snippet></ROW><ROW><id>10908555</id><snippet>airodump-ng</snippet></ROW><ROW><id>10908555</id><snippet>pexpect.run()</snippet></ROW><ROW><id>10908555</id><snippet>ls -la</snippet></ROW><ROW><id>10908555</id><snippet>results = pexpect.run('ls -la')
</snippet></ROW><ROW><id>10908555</id><snippet>child = pexpect.spawn('airodump-ng -a -w /root/Desktop/TEST --output-format csv %s' % INTERFACE)
</snippet></ROW><ROW><id>10909016</id><snippet>extractall</snippet></ROW><ROW><id>10909016</id><snippet>read</snippet></ROW><ROW><id>10909016</id><snippet>def extract_zip(input_zip):
    input_zip=ZipFile(input_zip)
    return {name: input_zip.read(name) for name in input_zip.namelist()}
</snippet></ROW><ROW><id>10909034</id><snippet>str.encode('string-escape')</snippet></ROW><ROW><id>10909034</id><snippet>template = Template('{{ list[0].encode("string-escape") }}')
</snippet></ROW><ROW><id>10909065</id><snippet>class Parent():
    def __init__(self):
        self.myvar = 1

class Child(Parent):
    def __init__(self):
        Parent.__init__(self)

        # here you can access myvar like below.
        print self.myvar

child = Child()
print child.myvar
</snippet></ROW><ROW><id>10909511</id><snippet>aa = {1:'a', 3:'c', 2:'b', 4:'d'}
bb = {'apple':'a', 'pear':'b', 'mango': 'g'}

bb_rev = dict((value, key)
    for key, value in bb.iteritems()) # bb.items() in python3
dd = dict((key, bb_rev[value])
    for key, value in aa.iteritems() # aa.items() in python3
    if value in bb_rev)

print dd
</snippet></ROW><ROW><id>10909691</id><snippet>s = pages[:4] + pages[10:]
</snippet></ROW><ROW><id>10909691</id><snippet>pages = pages[:4] + pages[10:]
</snippet></ROW><ROW><id>10910305</id><snippet>from zipfile import ZipFile, is_zipfile

def extract_zip(input_zip):
    input_zip=ZipFile(input_zip)
    return {name: input_zip.read(name) for name in input_zip.namelist()}

def extract_all(input_zip): 
    return {entry: extract_zip(entry) for entry in ZipFile(input_zip).namelist() if is_zipfile(entry)}
</snippet></ROW><ROW><id>10910407</id><snippet>import reportlab
print reportlab.__file__
</snippet></ROW><ROW><id>10910409</id><snippet>db.query("""
    SELECT *
    FROM employee, department 
    WHERE employee.DepartmentID = department.DepartmentID;
""")
</snippet></ROW><ROW><id>10910409</id><snippet>"""..."""</snippet></ROW><ROW><id>10910409</id><snippet>"</snippet></ROW><ROW><id>10910409</id><snippet>'</snippet></ROW><ROW><id>10911034</id><snippet>__call__</snippet></ROW><ROW><id>10911034</id><snippet>from zope.publisher.browser import BrowserView
from zope.component import getMultiAdapter

class DispatchingView(BrowserView):
    def __call__(self):
        if somecondition:
            newviewname = 'foo'
        else:
            newviewname = 'bar'

        return getMultiAdapter((self.context, self.request), name=newviewname)()
</snippet></ROW><ROW><id>10911034</id><snippet>@@</snippet></ROW><ROW><id>10911086</id><snippet>import os
os.path.normpath(pages)
</snippet></ROW><ROW><id>10911086</id><snippet>'/bbs/board.php?bo_table=humor&amp;wr_id=195?los=09&amp;qwe=2&amp;'
</snippet></ROW><ROW><id>10911372</id><snippet>abc['user_account']</snippet></ROW><ROW><id>10911372</id><snippet>a=['hello',1,2,'people']</snippet></ROW><ROW><id>10911372</id><snippet>a[0]</snippet></ROW><ROW><id>10911372</id><snippet>a[3]</snippet></ROW><ROW><id>10911372</id><snippet>d={'a':1,'b':2}</snippet></ROW><ROW><id>10911372</id><snippet>d['a']</snippet></ROW><ROW><id>10911372</id><snippet>d[b']</snippet></ROW><ROW><id>10911372</id><snippet>abc['user_account']</snippet></ROW><ROW><id>10911372</id><snippet>abc['user_account'][42]</snippet></ROW><ROW><id>10911372</id><snippet>for a in abc['user_account']:
  print a
</snippet></ROW><ROW><id>10911471</id><snippet># A sample context menu handler.
# Adds a menu item with sub menu to all files and folders, different options inside specified folder. 
# When clicked a list of selected items is displayed.
#
# To demostrate:
# * Execute this script to register the context menu. `python context_menu.py --register`
# * Restart explorer.exe- in the task manager end process on explorer.exe. Then file &gt; new task, then type explorer.exe
# * Open Windows Explorer, and browse to a file/directory.
# * Right-Click file/folder - locate and click on an option under 'Menu options'.

import os
import pythoncom
from win32com.shell import shell, shellcon
import win32gui
import win32con
import win32api

class ShellExtension:
    _reg_progid_ = "Python.ShellExtension.ContextMenu"
    _reg_desc_ = "Python Sample Shell Extension (context menu)"
    _reg_clsid_ = "{CED0336C-C9EE-4a7f-8D7F-C660393C381F}"
    _com_interfaces_ = [shell.IID_IShellExtInit, shell.IID_IContextMenu]
    _public_methods_ = shellcon.IContextMenu_Methods + shellcon.IShellExtInit_Methods

    def Initialize(self, folder, dataobj, hkey):
        print "Init", folder, dataobj, hkey
        win32gui.InitCommonControls()
        self.brand= "Menu options"
        self.folder= "C:\\Users\\Paul\\"
        self.dataobj = dataobj
        self.hicon= self.prep_menu_icon(r"C:\path\to\icon.ico")


    def QueryContextMenu(self, hMenu, indexMenu, idCmdFirst, idCmdLast, uFlags):
        print "QCM", hMenu, indexMenu, idCmdFirst, idCmdLast, uFlags

        # Query the items clicked on
        files= self.getFilesSelected()

        fname = files[0]
        idCmd = idCmdFirst

        isdir= os.path.isdir(fname)
        in_folder= all([f_path.startswith(self.folder) for f_path in files])

        win32gui.InsertMenu(hMenu, indexMenu,
            win32con.MF_SEPARATOR|win32con.MF_BYPOSITION,
            0, None)
        indexMenu += 1

        menu= win32gui.CreatePopupMenu()
        win32gui.InsertMenu(hMenu,indexMenu,win32con.MF_STRING|win32con.MF_BYPOSITION|win32con.MF_POPUP,menu,self.brand)
        win32gui.SetMenuItemBitmaps(hMenu,menu,0,self.hicon,self.hicon)
#        idCmd+=1
        indexMenu+=1

        if in_folder:
            if len(files) == 1:
                if isdir:
                    win32gui.InsertMenu(menu,0,win32con.MF_STRING,idCmd,"Item 1"); idCmd+=1
                else:
                    win32gui.InsertMenu(menu,0,win32con.MF_STRING,idCmd,"Item 2")
                    win32gui.SetMenuItemBitmaps(menu,idCmd,0,self.hicon,self.hicon)
                    idCmd+=1
        else:
            win32gui.InsertMenu(menu,0,win32con.MF_STRING,idCmd,"Item 3")
            win32gui.SetMenuItemBitmaps(menu,idCmd,0,self.hicon,self.hicon)
            idCmd+=1

        if idCmd &gt; idCmdFirst:
            win32gui.InsertMenu(menu,1,win32con.MF_SEPARATOR,0,None)

        win32gui.InsertMenu(menu,2,win32con.MF_STRING,idCmd,"Item 4")
        win32gui.SetMenuItemBitmaps(menu,idCmd,0,self.hicon,self.hicon)
        idCmd+=1
        win32gui.InsertMenu(menu,3,win32con.MF_STRING,idCmd,"Item 5")
        win32gui.SetMenuItemBitmaps(menu,idCmd,0,self.hicon,self.hicon)
        idCmd+=1

        win32gui.InsertMenu(menu,4,win32con.MF_SEPARATOR,0,None)

        win32gui.InsertMenu(menu,5,win32con.MF_STRING|win32con.MF_DISABLED,idCmd,"Item 6")
        win32gui.SetMenuItemBitmaps(menu,idCmd,0,self.hicon,self.hicon)
        idCmd+=1

        win32gui.InsertMenu(hMenu, indexMenu,
                            win32con.MF_SEPARATOR|win32con.MF_BYPOSITION,
                            0, None)
        indexMenu += 1
        return idCmd-idCmdFirst # Must return number of menu items we added.

    def getFilesSelected(self):
        format_etc = win32con.CF_HDROP, None, 1, -1, pythoncom.TYMED_HGLOBAL
        sm = self.dataobj.GetData(format_etc)
        num_files = shell.DragQueryFile(sm.data_handle, -1)
        files= []
        for i in xrange(num_files):
            fpath= shell.DragQueryFile(sm.data_handle,i)
            files.append(fpath)
        return files

    def prep_menu_icon(self, icon): #Couldn't get this to work with pngs, only ico
        # First load the icon.
        ico_x = win32api.GetSystemMetrics(win32con.SM_CXSMICON)
        ico_y = win32api.GetSystemMetrics(win32con.SM_CYSMICON)
        hicon = win32gui.LoadImage(0, icon, win32con.IMAGE_ICON, ico_x, ico_y, win32con.LR_LOADFROMFILE)

        hdcBitmap = win32gui.CreateCompatibleDC(0)
        hdcScreen = win32gui.GetDC(0)
        hbm = win32gui.CreateCompatibleBitmap(hdcScreen, ico_x, ico_y)
        hbmOld = win32gui.SelectObject(hdcBitmap, hbm)
        # Fill the background.
        brush = win32gui.GetSysColorBrush(win32con.COLOR_MENU)
        win32gui.FillRect(hdcBitmap, (0, 0, 16, 16), brush)
        # unclear if brush needs to be feed.  Best clue I can find is:
        # "GetSysColorBrush returns a cached brush instead of allocating a new
        # one." - implies no DeleteObject
        # draw the icon
        win32gui.DrawIconEx(hdcBitmap, 0, 0, hicon, ico_x, ico_y, 0, 0, win32con.DI_NORMAL)
        win32gui.SelectObject(hdcBitmap, hbmOld)
        win32gui.DeleteDC(hdcBitmap)

        return hbm

    def InvokeCommand(self, ci):
        mask, hwnd, verb, params, dir, nShow, hotkey, hicon = ci
        win32gui.MessageBox(hwnd, str(self.getFilesSelected()), "Wow", win32con.MB_OK)

    def GetCommandString(self, cmd, typ):
        # If GetCommandString returns the same string for all items then
        # the shell seems to ignore all but one.  This is even true in
        # Win7 etc where there is no status bar (and hence this string seems
        # ignored)
        return "Hello from Python (cmd=%d)!!" % (cmd,)

def DllRegisterServer():
    import _winreg
    folder_key = _winreg.CreateKey(_winreg.HKEY_CLASSES_ROOT,
    "Folder\\shellex")
    folder_subkey = _winreg.CreateKey(folder_key, "ContextMenuHandlers")
    folder_subkey2 = _winreg.CreateKey(folder_subkey, "PythonSample")
    _winreg.SetValueEx(folder_subkey2, None, 0, _winreg.REG_SZ,
    ShellExtension._reg_clsid_)

    file_key = _winreg.CreateKey(_winreg.HKEY_CLASSES_ROOT,
    "*\\shellex")
    file_subkey = _winreg.CreateKey(file_key, "ContextMenuHandlers")
    file_subkey2 = _winreg.CreateKey(file_subkey, "PythonSample")
    _winreg.SetValueEx(file_subkey2, None, 0, _winreg.REG_SZ,
    ShellExtension._reg_clsid_)

    print ShellExtension._reg_desc_, "registration complete."

def DllUnregisterServer():
    import _winreg
    try:
        folder_key = _winreg.DeleteKey(_winreg.HKEY_CLASSES_ROOT,

        "Folder\\shellex\\ContextMenuHandlers\\PythonSample")
        file_key = _winreg.DeleteKey(_winreg.HKEY_CLASSES_ROOT,

        "*\\shellex\\ContextMenuHandlers\\PythonSample")
    except WindowsError, details:
        import errno
        if details.errno != errno.ENOENT:
            raise
    print ShellExtension._reg_desc_, "unregistration complete."

if __name__=='__main__':
    from win32com.server import register
    register.UseCommandLine(ShellExtension,
                   finalize_register = DllRegisterServer,
                   finalize_unregister = DllUnregisterServer)
</snippet></ROW><ROW><id>10911560</id><snippet>from google.appengine.api import datastore_errors

all_foo = Foo.all()
for bar in all_foo:
    try:
        user_refProperty = bar.user
    except datastore_errors.Error, e:
        if e.args[0][0:40] == "ReferenceProperty failed to be resolved:":
            bar.delete()
            self.response.out.write('deleted due to bad reference property')
        else: raise
</snippet></ROW><ROW><id>10911613</id><snippet>series[1][2] += val
</snippet></ROW><ROW><id>10911949</id><snippet>x</snippet></ROW><ROW><id>10911949</id><snippet>my_list[0] + len(my_list) - 1</snippet></ROW><ROW><id>10912241</id><snippet>pytables.Expr</snippet></ROW><ROW><id>10912241</id><snippet>Numexpr</snippet></ROW><ROW><id>10912705</id><snippet>form = CommentForm()
form.storyId = xyz
</snippet></ROW><ROW><id>10912856</id><snippet>  (r'^$',process.internal.views.HomePage.as_view(template_name='homepage.html')),
</snippet></ROW><ROW><id>10913476</id><snippet>- (void)myMethodWithArgument:(NSObject *)argument andArgument:(NSObject *)another;
</snippet></ROW><ROW><id>10913498</id><snippet>generic_evaluator</snippet></ROW><ROW><id>10913498</id><snippet>generic_evaluator</snippet></ROW><ROW><id>10913498</id><snippet>global generic_evaluator
</snippet></ROW><ROW><id>10913498</id><snippet>local_generic_evaluator = generic_evaluator
</snippet></ROW><ROW><id>10913695</id><snippet>random</snippet></ROW><ROW><id>10913695</id><snippet>os.urandom</snippet></ROW><ROW><id>10913695</id><snippet>random.SystemRandom</snippet></ROW><ROW><id>10914026</id><snippet>CEST</snippet></ROW><ROW><id>10914026</id><snippet>Europe/Paris</snippet></ROW><ROW><id>10914026</id><snippet>Europe/Berlin</snippet></ROW><ROW><id>10914026</id><snippet>Europe/Prague</snippet></ROW><ROW><id>10914026</id><snippet>&gt;&gt;&gt; pytz.country_timezones('de')
[u'Europe/Berlin']

&gt;&gt;&gt; pytz.country_timezones('fr')
[u'Europe/Paris']
</snippet></ROW><ROW><id>10914026</id><snippet>CEST</snippet></ROW><ROW><id>10914026</id><snippet>&gt;&gt;&gt; dateutil.parser.parse("2012/06/05 17:42:29 CEST").astimezone(pytz.utc)
datetime.datetime(2012, 6, 5, 15, 42, 29, tzinfo=&lt;UTC&gt;)
</snippet></ROW><ROW><id>10914386</id><snippet>--extra-search-dir</snippet></ROW><ROW><id>10914386</id><snippet>distribute</snippet></ROW><ROW><id>10914795</id><snippet>python open directory dialog box</snippet></ROW><ROW><id>10914795</id><snippet>TKinter</snippet></ROW><ROW><id>10914795</id><snippet>import Tkinter, tkFileDialog
root = Tkinter.Tk()
dirname = tkFileDialog.askdirectory(parent=root, initialdir="/",
                                    title='Please select a directory')
</snippet></ROW><ROW><id>10914900</id><snippet>::date[]</snippet></ROW><ROW><id>10915173</id><snippet>run()</snippet></ROW><ROW><id>10915173</id><snippet>&gt;&gt;&gt; query = Model.all()
&gt;&gt;&gt; query_iterator = query.run(limit=5)
&gt;&gt;&gt; query.cursor()
''
&gt;&gt;&gt; list(query_iterator) # Exhaust iterator
[&lt;db.Model instance at 0x...&gt;, ...]
&gt;&gt;&gt; query.cursor()
'E-ABAIICG2oMYXByaWdvbmluamE0cgsLEgVNb2RlbBgKDBQ='
</snippet></ROW><ROW><id>10915714</id><snippet>__iter__()</snippet></ROW><ROW><id>10915714</id><snippet>dict()</snippet></ROW><ROW><id>10915714</id><snippet>def __iter__(self):
    for key in "y", "z":
        yield key, getattr(self, key)
</snippet></ROW><ROW><id>10915714</id><snippet>_dictkeys = "y", "z"

def __iter__(self):
    for key in self._dictkeys:
        yield key, getattr(self, key)
</snippet></ROW><ROW><id>10915714</id><snippet>def __iter__(self):
    for key in dir(self):
        if not key.startswith("_"):
            value = getattr(self, key)
            if not callable(value):
                yield key, value
</snippet></ROW><ROW><id>10915793</id><snippet>proxy.calculateOutput([1,2,100])</snippet></ROW><ROW><id>10915793</id><snippet>proxy.calculateOutput(1,2,100)</snippet></ROW><ROW><id>10915793</id><snippet>def calculateOutput(*w):</snippet></ROW><ROW><id>10915793</id><snippet>def calculateOutput(w):</snippet></ROW><ROW><id>10915793</id><snippet>&gt;&gt;&gt; def a(*b):
&gt;&gt;&gt;    print b

&gt;&gt;&gt; a(1,2,3)
(1, 2, 3)
&gt;&gt;&gt; a([1,2,3])
([1, 2, 3],)
</snippet></ROW><ROW><id>10915793</id><snippet>n</snippet></ROW><ROW><id>10915793</id><snippet>sum()</snippet></ROW><ROW><id>10915991</id><snippet>render_to_response</snippet></ROW><ROW><id>10915991</id><snippet>render(request, 'reserve/templates/contact_form.html',{'form': form})</snippet></ROW><ROW><id>10915991</id><snippet>from django.shortcuts import render</snippet></ROW><ROW><id>10916008</id><snippet>/home/jake/.themes</snippet></ROW><ROW><id>10916008</id><snippet>gtk.rc_parse('/home/jake/.themes/Elegant Brit/gtk-2.0/gtkrc')</snippet></ROW><ROW><id>10916008</id><snippet>gtkrc</snippet></ROW><ROW><id>10916118</id><snippet>Series.value_counts</snippet></ROW><ROW><id>10916118</id><snippet>In [9]: df['Qu1'].value_counts()
Out[9]: 
4    2
3    2
1    1
</snippet></ROW><ROW><id>10916118</id><snippet>In [13]: table = df[['Qu1', 'Qu2', 'Qu3']].apply(lambda x: x.value_counts())

In [14]: table
Out[14]: 
   Qu1  Qu2  Qu3
1    1    1    1
2  NaN    2    1
3    2    2  NaN
4    2  NaN    2
5  NaN  NaN    1

In [15]: table = table.fillna(0)

In [16]: table
Out[16]: 
   Qu1  Qu2  Qu3
1    1    1    1
2    0    2    1
3    2    2    0
4    2    0    2
5    0    0    1
</snippet></ROW><ROW><id>10916118</id><snippet>table.reindex</snippet></ROW><ROW><id>10916118</id><snippet>table.ix[some_array]</snippet></ROW><ROW><id>10916118</id><snippet>In [17]: table.rename(index=str)
Out[17]: 
   Qu1  Qu2  Qu3
1    1    1    1
2    0    2    1
3    2    2    0
4    2    0    2
5    0    0    1

In [18]: table.rename(index=str).index[0]
Out[18]: '1'
</snippet></ROW><ROW><id>10916157</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://google.com')
&gt;&gt;&gt; r
&lt;Response [200]&gt;
&gt;&gt;&gt; r.history
[&lt;Response [301]&gt;, &lt;Response [302]&gt;]
&gt;&gt;&gt; r.url
u'http://www.google.co.uk/'
</snippet></ROW><ROW><id>10916157</id><snippet>&gt;&gt;&gt; r = requests.get('http://sitesurgeon.co.uk/!dev/http-authorisation/staff/index.htm')
&gt;&gt;&gt; r
&lt;Response [401]&gt;
&gt;&gt;&gt; r.content
'&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"&gt; ...
....'
&gt;&gt;&gt; r.headers
{'date': 'Wed, 06 Jun 2012 14:24:16 GMT', 'x-powered-by': 'PHP/5.3.13', 'transfer-encoding': 'chunked', 'content-type': 'text/html; charset=utf-8', 'www-authenticate': 'Basic realm="Staff Area"', 'server': 'Apache'}
</snippet></ROW><ROW><id>10916157</id><snippet>requests.get('http://google.com', timeout=0.1)
</snippet></ROW><ROW><id>10916212</id><snippet>class FooModel(models.Model):
    filename = models.CharField(max_length=128)
    file = models.FileField(upload_to=get_random_filename)
</snippet></ROW><ROW><id>10916212</id><snippet>upload_to()</snippet></ROW><ROW><id>10916212</id><snippet>pre_save()</snippet></ROW><ROW><id>10916212</id><snippet>FileField</snippet></ROW><ROW><id>10916212</id><snippet>filename</snippet></ROW><ROW><id>10916212</id><snippet>upload()</snippet></ROW><ROW><id>10916212</id><snippet>filename</snippet></ROW><ROW><id>10916380</id><snippet>os.mkdir(r'C:\Dir%s' % i) 
</snippet></ROW><ROW><id>10916403</id><snippet># content of conftest.py
#
import sys
import pytest

ALL = set("osx linux2 win32".split())

def pytest_runtest_setup(item):
    if isinstance(item, item.Function):
        plat = sys.platform
        if not hasattr(item.obj, plat):
            if ALL.intersection(set(item.obj.__dict__)):
                pytest.skip("cannot run on platform %s" %(plat))
</snippet></ROW><ROW><id>10916403</id><snippet># content of test_plat.py

import pytest

@pytest.mark.osx
def test_if_apple_is_evil():
    pass

@pytest.mark.linux2
def test_if_linux_works():
    pass

@pytest.mark.win32
def test_if_win32_crashes():
    pass

def test_runs_everywhere_yay():
    pass
</snippet></ROW><ROW><id>10916403</id><snippet>$ py.test -rs
</snippet></ROW><ROW><id>10916403</id><snippet>$ py.test -rs # this option reports skip reasons
=========================== test session starts ============================
platform linux2 -- Python 2.7.3 -- pytest-2.2.5.dev1
collecting ... collected 4 items

test_plat.py s.s.
========================= short test summary info ==========================
SKIP [2] /home/hpk/tmp/doc-exec-222/conftest.py:12: cannot run on platform linux2

=================== 2 passed, 2 skipped in 0.01 seconds ====================
</snippet></ROW><ROW><id>10916403</id><snippet>$ py.test -m linux2
=========================== test session starts ============================
platform linux2 -- Python 2.7.3 -- pytest-2.2.5.dev1
collecting ... collected 4 items

test_plat.py .

=================== 3 tests deselected by "-m 'linux2'" ====================
================== 1 passed, 3 deselected in 0.01 seconds ==================
</snippet></ROW><ROW><id>10916606</id><snippet>a[2].keys()[0]
</snippet></ROW><ROW><id>10916606</id><snippet>next(a[2].iterkeys())
</snippet></ROW><ROW><id>10916606</id><snippet>36</snippet></ROW><ROW><id>10916606</id><snippet>[next(d.iterkeys()) for d in a]
</snippet></ROW><ROW><id>10916606</id><snippet>[43, 3, 36, 2, 23]</snippet></ROW><ROW><id>10916606</id><snippet>d = {}
for x in a:
    d.update(x) 
</snippet></ROW><ROW><id>10916606</id><snippet>{2: 102, 3: 103, 23: 100, 36: 103, 43: 123}</snippet></ROW><ROW><id>10916606</id><snippet>d.keys()</snippet></ROW><ROW><id>10916606</id><snippet>[3, 2, 43, 36, 23]</snippet></ROW><ROW><id>10916820</id><snippet>unicode</snippet></ROW><ROW><id>10916820</id><snippet>input = file.read()   # Replace with your file input code...
input = input.decode('utf-8-sig')   # '-sig' handles BOM

# Now isinstance(input, unicode) is True

# ...
Sentence = Sentence.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>10916820</id><snippet>a</snippet></ROW><ROW><id>10916820</id><snippet>b</snippet></ROW><ROW><id>10916820</id><snippet>a</snippet></ROW><ROW><id>10916820</id><snippet>b</snippet></ROW><ROW><id>10916820</id><snippet>def scraping(File):
    '''Takes in txt file of curriculum, removes all newlines and returns that occur \
    after a lowercase character, then splits at all remaining newlines'''
    Curriculum_Elements = []
    Document = open(File, 'rb').read().decode('utf-8-sig')
    Document = re.sub(r'(?&lt;=[a-zA-Z,])\r?\n', ' ', Document)
    Curriculum_Elements = Document.split('\r\n')
    return Curriculum_Elements

# ...

for Element in Curriculum_Elements:
    Curriculum_Tuples.append(Map_Sentence_To_Keywords(Element, Keywords))
</snippet></ROW><ROW><id>10916915</id><snippet>Accept-Encoding: gzip, deflate</snippet></ROW><ROW><id>10916959</id><snippet>shell=True</snippet></ROW><ROW><id>10916959</id><snippet>['git', 'log']</snippet></ROW><ROW><id>10916959</id><snippet>&gt;&gt;&gt; proc = subprocess.Popen(['git', 'log'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
&gt;&gt;&gt; proc.communicate()
('', 'fatal: Not a git repository (or any of the parent directories): .git\n')
</snippet></ROW><ROW><id>10916959</id><snippet>communicate()[0]</snippet></ROW><ROW><id>10916959</id><snippet>communicate()[1]</snippet></ROW><ROW><id>10916983</id><snippet>[[x[0], x[1], " ".join(x[2:])] for x in biglist]
</snippet></ROW><ROW><id>10916983</id><snippet>for x in biglist:
    x[2:] = [" ".join(x[2:])]
</snippet></ROW><ROW><id>10917000</id><snippet>$_REQUEST</snippet></ROW><ROW><id>10917000</id><snippet>$_GET</snippet></ROW><ROW><id>10917000</id><snippet>$_POST</snippet></ROW><ROW><id>10917000</id><snippet>import urllib2
u = urllib2.urlopen("http://www.avcodes.co.uk/airllistres.asp", "statuslst=Y&amp;iataairllst=&amp;icaoairllst=B&amp;B1=Submit")
print u.read()
</snippet></ROW><ROW><id>10917375</id><snippet>unittest.py</snippet></ROW><ROW><id>10917811</id><snippet>s/$/\n/</snippet></ROW><ROW><id>10917811</id><snippet>-e</snippet></ROW><ROW><id>10917811</id><snippet>sed -e 's:\x01: | :g' -e 's/$/\n/'
</snippet></ROW><ROW><id>10917913</id><snippet>StringIO()</snippet></ROW><ROW><id>10917913</id><snippet>.seek()</snippet></ROW><ROW><id>10918201</id><snippet>from pydbg import pydbg
dbg = pydbg()
</snippet></ROW><ROW><id>10918201</id><snippet>import pydbg
dbg = pydbg.pydbg()
</snippet></ROW><ROW><id>10918201</id><snippet>pydbg.py</snippet></ROW><ROW><id>10918426</id><snippet>with open("filename") as f:    
    cols = [float(row.split("-")[-2]) for row in f.readlines()]
print min(cols), max(cols), sum(cols) / len(cols)
</snippet></ROW><ROW><id>10918698</id><snippet>import os
</snippet></ROW><ROW><id>10918698</id><snippet>base_dir = r'c:\bla\bing'
filename = r'data.txt'

os.path.join(base_dir, filename)
'c:\\bla\\bing\\data.txt'
</snippet></ROW><ROW><id>10918698</id><snippet>base_dir = '/bla/bing'
filename = 'data.txt'

os.path.join(base_dir, filename)
'/bla/bing/data.txt'
</snippet></ROW><ROW><id>10919120</id><snippet>soup.findAll(True, "post", text=re.compile(".*This post is about.*Google.com.*"))
</snippet></ROW><ROW><id>10919120</id><snippet>regex = re.compile('.*This post is about.*Google.com.*')
[post for post in soup.findAll(True, 'post') if regex.match(post.text)]
</snippet></ROW><ROW><id>10919120</id><snippet>"This post is about"</snippet></ROW><ROW><id>10919120</id><snippet>"Google.com"</snippet></ROW><ROW><id>10919120</id><snippet>post.text</snippet></ROW><ROW><id>10919120</id><snippet>post</snippet></ROW><ROW><id>10919140</id><snippet>import sys
import os

def my_open(filename, mode):
    for path in sys.path:
        try:
            return open(os.path.join(path, filename), mode)
        except IOError:
            continue
    return None
</snippet></ROW><ROW><id>10919140</id><snippet>my_open('foo_060112.dat', 'rb')</snippet></ROW><ROW><id>10919663</id><snippet>multiprocessing</snippet></ROW><ROW><id>10919663</id><snippet>import multiprocessing
pool = multiprocessing.Pool(10)

def process(line):
    return len(line) #or whatever

with open(path) as lines:
    results = pool.map(process, lines)
</snippet></ROW><ROW><id>10919663</id><snippet>reduce</snippet></ROW><ROW><id>10919663</id><snippet>import operator
with open(path) as lines:
    result = reduce(operator.add, pool.map(process, lines))
</snippet></ROW><ROW><id>10919690</id><snippet>from __future__ import division
def mean(a):
    return sum(a) / len(a)
a =  [[240, 240, 239],
      [250, 249, 237], 
      [242, 239, 237],
      [240, 234, 233]]
print map(mean, zip(*a))
</snippet></ROW><ROW><id>10919690</id><snippet>[243.0, 240.5, 236.5]
</snippet></ROW><ROW><id>10919690</id><snippet>a = numpy.array([[240, 240, 239],
                 [250, 249, 237], 
                 [242, 239, 237],
                 [240, 234, 233]])
print numpy.mean(a, axis=0)
</snippet></ROW><ROW><id>10919730</id><snippet>from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt,numpy as np
plt.clf()
fig = plt.figure(1)
ax = fig.gca(projection='3d')
X, Y, Z = axes3d.get_test_data(0.05)
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)
cset = ax.contourf(X, Y, Z, zdir='z', offset=-100,
        levels=np.linspace(-100,100,1200),cmap=plt.cm.jet)
cset = ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=plt.cm.jet)
cset = ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=plt.cm.jet)
ax.set_xlabel('X')
ax.set_xlim(-40, 40)
ax.set_ylabel('Y')
ax.set_ylim(-40, 40)
ax.set_zlabel('Z')
ax.set_zlim(-100, 100)    
plt.show()
</snippet></ROW><ROW><id>10919761</id><snippet>pip</snippet></ROW><ROW><id>10919761</id><snippet>python2.6-pip</snippet></ROW><ROW><id>10919761</id><snippet>python2.7-pip</snippet></ROW><ROW><id>10919761</id><snippet>pip-2.6</snippet></ROW><ROW><id>10919761</id><snippet>pip-2.7</snippet></ROW><ROW><id>10919828</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10919828</id><snippet>results = cxn.execute("SELECT * FROM orders ORDER BY Company")
for company, orders_iter in itertools.groupby(results, key=lambda r: r[0]):
    orders = list(orders_iter)
    total_qty = sum(order[2] for order in orders)
    ... print out orders ...
</snippet></ROW><ROW><id>10919828</id><snippet>O(n)</snippet></ROW><ROW><id>10919828</id><snippet>O(1)</snippet></ROW><ROW><id>10919862</id><snippet>"\x1b]0;test\x07"</snippet></ROW><ROW><id>10919862</id><snippet>0</snippet></ROW><ROW><id>10919862</id><snippet>2</snippet></ROW><ROW><id>10920076</id><snippet>def one_of(alternatives):
    return lambda val: val in alternatives

def within(frm, to):
    return lambda val: frm &lt;= val &lt;= to

def gte(const):
    return lambda val: val &gt;= const

def lte(const):
    return lambda val: val &lt;= const

def exact(const):
    return lambda val: val == const


def select(data, **kwargs):
    for item in data:
        if all(chk(item[key]) for key, chk in kwargs.items()):
            yield item

data = [
    {'id': 1, 'name': 'Ann', 'age': 25},
    {'id': 2, 'name': 'Tom', 'age': 10},
    {'id': 3, 'name': 'John', 'age': 40},
    {'id': 4, 'name': 'Tom', 'age': 18},
]

for person in select(data, age=gte(15), id=within(3, 4), name=exact('Tom')):
    print person['name']
</snippet></ROW><ROW><id>10920160</id><snippet>idle</snippet></ROW><ROW><id>10920160</id><snippet>head -1 `which idle`
</snippet></ROW><ROW><id>10920160</id><snippet>which python
</snippet></ROW><ROW><id>10920183</id><snippet>class BaseHandler(tornado.web.RequestHandler):
    @property
    def prepare(self):
        self.set_header('P3P', 'CP="HONK"')

    def initialize(self):
        if self.request.full_url() == "http://mydomain/a/facebook/":
            self.request.protocol = "https"
        self.init_facebook()

    def init_facebook(self):
        """Sets up the request specific Facebook and User instance"""

        # initial facebook request comes in as a POST with a signed_request
        signed_request = self.get_argument('signed_request', None)
        if signed_request and self.request.method == u'POST':
            app_secret = options.facebook_app_secret
            data = load_signed_request(signed_request, app_secret)
            user_id = data.get(u"user_id")
            if user_id:
                self.set_secure_cookie("uid", user_id)
            self.request.method = u'GET'

class FacebookCanvasHandler(HomeHandler):
    def get(self, *args, **kwds):
        logging.info("Facebook Canvas called.")
        if not self.current_user:
            logging.info("Need user grant permission, redirect to oauth dialog.")
            logging.info(self.settings.get("facebook_canvas_id"))
            oauth_url = self.get_login_url(self.settings.get("facebook_canvas_id"))
            logging.info(oauth_url)
            self.render("canvas_oauth.html", oauth_url=oauth_url)
        else:
            super(FacebookCanvasHandler, self).get(*args, **kwds)

def load_signed_request(signed_request, app_secret):
    try:
        sig, payload = signed_request.split(u'.', 1)
        sig = base64_url_decode(sig)
        data = json.loads(base64_url_decode(payload))

        expected_sig = hmac.new(app_secret, msg=payload, digestmod=hashlib.sha256).digest()

        if sig == expected_sig and data[u'issued_at'] &gt; (time.time() - 86400):
            return data
        else:
            return None
    except ValueError, ex:
        return None

def base64_url_decode(data):
    data = data.encode(u'ascii')
    data += '=' * (4 - (len(data) % 4))
    return base64.urlsafe_b64decode(data)
</snippet></ROW><ROW><id>10920183</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml"&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
    &lt;title&gt;
        Page Title
    &lt;/title&gt;
    &lt;meta name="description" content="description of the page" /&gt;&lt;meta name="keywords" content="" /&gt;&lt;meta name="viewport" content="width=device-width" /&gt;
    &lt;link rel="icon" type="image/png" href="/static/favicon.ico" /&gt;
    &lt;script&gt;
        window.top.location = "{% raw oauth_url %}";
    &lt;/script&gt;

&lt;/head&gt;

&lt;body id="inner_body" class="inner_body"&gt;
redirecting to oauth...
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>10920400</id><snippet>import logging</snippet></ROW><ROW><id>10920400</id><snippet>logging.info()</snippet></ROW><ROW><id>10920529</id><snippet>savetxt</snippet></ROW><ROW><id>10920529</id><snippet>print (len(targethist[0]))
print (len(targethist[1]))
</snippet></ROW><ROW><id>10920529</id><snippet>np.savetxt('stuff.dat',(targethist[0],targethist[1][1:]),delimiter='\t')
</snippet></ROW><ROW><id>10920994</id><snippet>Display</snippet></ROW><ROW><id>10920994</id><snippet>VendorRelease()</snippet></ROW><ROW><id>10920994</id><snippet>pygtk</snippet></ROW><ROW><id>10920994</id><snippet>Display *</snippet></ROW><ROW><id>10920994</id><snippet>gtkmm</snippet></ROW><ROW><id>10920994</id><snippet>pygtk</snippet></ROW><ROW><id>10920994</id><snippet>ServerVendor()</snippet></ROW><ROW><id>10920994</id><snippet>ServerVendor()</snippet></ROW><ROW><id>10921234</id><snippet>[]</snippet></ROW><ROW><id>10921234</id><snippet>&lt;input type="text" name="client_1" value="client1" /&gt;
&lt;input type="text" name="address_1" value="address1" /&gt;
&lt;input type="text" name="post_1" value="post1" /&gt;
...
&lt;input type="text" name="client_n" value="clientn" /&gt;
&lt;input type="text" name="address_n" value="addressn" /&gt;
&lt;input type="text" name="post_n" value="postn" /&gt;
</snippet></ROW><ROW><id>10921234</id><snippet>for i in range(1, n+1):
    client = request.POST['client_%s' % i]
    address = request.POST['address_%s' % i]
    post = request.POST['post_%s' % i]
    ... do something with these values ...
</snippet></ROW><ROW><id>10921408</id><snippet>import inspect

class key_memoized(object):
    def __init__(self, func):
       self.func = func
       self.cache = {}

    def __call__(self, *args, **kwargs):
        key = self.key(args, kwargs)
        if key not in self.cache:
            self.cache[key] = self.func(*args, **kwargs)
        return self.cache[key]

    def normalize_args(self, args, kwargs):
        spec = inspect.getargs(self.func.__code__).args
        return dict(kwargs.items() + zip(spec, args))

    def key(self, args, kwargs):
        a = self.normalize_args(args, kwargs)
        return tuple(sorted(a.items()))
</snippet></ROW><ROW><id>10921408</id><snippet>@key_memoized
def foo(bar, baz, spam):
    print 'calling foo: bar=%r baz=%r spam=%r' % (bar, baz, spam)
    return bar + baz + spam

print foo(1, 2, 3)
print foo(1, 2, spam=3)         #memoized
print foo(spam=3, baz=2, bar=1) #memoized
</snippet></ROW><ROW><id>10921408</id><snippet>key_memoized</snippet></ROW><ROW><id>10921408</id><snippet>key()</snippet></ROW><ROW><id>10921408</id><snippet>class memoize_by_bar(key_memoized):
    def key(self, args, kwargs):
        return self.normalize_args(args, kwargs)['bar']

@memoize_by_bar
def foo(bar, baz, spam):
    print 'calling foo: bar=%r baz=%r spam=%r' % (bar, baz, spam)
    return bar

print foo('x', 'ignore1', 'ignore2')
print foo('x', 'ignore3', 'ignore4')
</snippet></ROW><ROW><id>10921608</id><snippet>sys.exit</snippet></ROW><ROW><id>10921888</id><snippet>for i in gen:
        print i
        print testlist
        testlist.pop(i)
</snippet></ROW><ROW><id>10921888</id><snippet>0
[12, 2, 1, 1, 1, 0, -3, -3, -1]
5
[2, 1, 1, 1, 0, -3, -3, -1]
6
[2, 1, 1, 1, 0, -3, -1]
</snippet></ROW><ROW><id>10921888</id><snippet>enumerate</snippet></ROW><ROW><id>10921888</id><snippet>0, 1, 2, ...</snippet></ROW><ROW><id>10921888</id><snippet>testlist = [x for x in testlist if 0 &lt;= x &lt;= 2.5]
</snippet></ROW><ROW><id>10922062</id><snippet>find . -name '*.pyc' -exec rm {} \;
</snippet></ROW><ROW><id>10922251</id><snippet>def tag_text(self, items, text):
    text = text.decode('utf-8') 
    for item in items: 
        text = re.sub(
            re.escape(item), 
            ur'&lt;b style="color:red"&gt;\g&lt;0&gt;&lt;/b&gt;', 
            text,
            flags=re.IGNORECASE | re.UNICODE)
    return text

print tag_text(None, ["foo", "bar"], "text with Foo and BAR")
# text with &lt;b style="color:red"&gt;Foo&lt;/b&gt; and &lt;b style="color:red"&gt;BAR&lt;/b&gt;
</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a = np.random.standard_normal(size=(2,5))
&gt;&gt;&gt; a
array([[ 0.72322499, -0.05376714, -0.28316358,  1.43025844, -0.90814293],
       [ 0.7459107 ,  0.43020728,  0.05411805, -0.32813465,  2.38829386]])
&gt;&gt;&gt; i = np.array([[0,1,2,4,3],[0,1,2,3,4]]) 
&gt;&gt;&gt; a[np.arange(a.shape[0])[:,np.newaxis],i]
array([[ 0.72322499, -0.05376714, -0.28316358, -0.90814293,  1.43025844],
       [ 0.7459107 ,  0.43020728,  0.05411805, -0.32813465,  2.38829386]])
</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[list(np.ogrid[[slice(x) for x in a.shape]][:-1])+[i]]
</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(24).reshape((2,3,4))
&gt;&gt;&gt; a
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[0,1,2]
6
</snippet></ROW><ROW><id>10922358</id><snippet>a[0][1][2]</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[[0,1],[1,1],[2,2]]
array([ 6, 18])
&gt;&gt;&gt; a[[0,1],[1,2],[2,2]]
array([ 6, 22])
</snippet></ROW><ROW><id>10922358</id><snippet>[a[0][1][2],a[1][1][2]]</snippet></ROW><ROW><id>10922358</id><snippet>[a[0][1][2],a[1][2][2]]</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[[0,1],1,2]
array([ 6, 18])
&gt;&gt;&gt; a[[0,1],[1,2],2]
array([ 6, 22])
</snippet></ROW><ROW><id>10922358</id><snippet>(2,3,4)</snippet></ROW><ROW><id>10922358</id><snippet>(2,3,4)</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]]
array([[0, 0],
       [0, 0]])
</snippet></ROW><ROW><id>10922358</id><snippet>a[0,0,0]</snippet></ROW><ROW><id>10922358</id><snippet>index</snippet></ROW><ROW><id>10922358</id><snippet>[[a[0,0],a[0,1],a[0,2],a[0,4],a[0,3]],a[1,0],a[1,1],...</snippet></ROW><ROW><id>10922358</id><snippet>a[0]</snippet></ROW><ROW><id>10922358</id><snippet>a[1]</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[[[0]*5,[1]*5],index]
</snippet></ROW><ROW><id>10922358</id><snippet>a</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; i = np.array(range(4)[::-1]*6).reshape(a.shape)
&gt;&gt;&gt; i
array([[[3, 2, 1, 0],
        [3, 2, 1, 0],
        [3, 2, 1, 0]],

       [[3, 2, 1, 0],
        [3, 2, 1, 0],
        [3, 2, 1, 0]]])
</snippet></ROW><ROW><id>10922358</id><snippet>i1 = [[[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0]],

      [[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]]]
</snippet></ROW><ROW><id>10922358</id><snippet>i2 = [[[0, 0, 0, 0],
       [1, 1, 1, 1],
       [2, 2, 2, 2]],

      [[0, 0, 0, 0],
       [1, 1, 1, 1],
       [2, 2, 2, 2]]]
</snippet></ROW><ROW><id>10922358</id><snippet>&gt;&gt;&gt; a[i1,i2,i]
array([[[ 3,  2,  1,  0],
        [ 7,  6,  5,  4],
        [11, 10,  9,  8]],

       [[15, 14, 13, 12],
        [19, 18, 17, 16],
        [23, 22, 21, 20]]])
</snippet></ROW><ROW><id>10922358</id><snippet>i1</snippet></ROW><ROW><id>10922358</id><snippet>i2</snippet></ROW><ROW><id>10922358</id><snippet>np.mgrid</snippet></ROW><ROW><id>10922358</id><snippet>np.ogrid</snippet></ROW><ROW><id>10922371</id><snippet>Control+Shift+Alt+R</snippet></ROW><ROW><id>10922371</id><snippet>istanbul</snippet></ROW><ROW><id>10922371</id><snippet>screencast &lt;your-os-here&gt;</snippet></ROW><ROW><id>10922371</id><snippet>ogv</snippet></ROW><ROW><id>10922376</id><snippet>import sys, os
import mydatabasemodule
PDFReport = [...read file from database ...]
print 'Content-Type: application/octet-stream'
print 'Content-Disposition: attachment; filename="mytest.pdf"'
print
sys.stdout.write(PDFReport)
sys.stdout.flush()
</snippet></ROW><ROW><id>10922515</id><snippet>test.py             (1): import foo.bar
foo\bar\__init__.py (1): from .derived import Derived
foo\bar\derived.py  (1): from . import base
</snippet></ROW><ROW><id>10922515</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>10922744</id><snippet>numpy.sum</snippet></ROW><ROW><id>10922744</id><snippet>import numpy as np
import timeit

x = range(1000)
# or 
#x = np.random.standard_normal(1000)

def pure_sum():
    return sum(x)

def numpy_sum():
    return np.sum(x)

n = 10000

t1 = timeit.timeit(pure_sum, number = n)
print 'Pure Python Sum:', t1
t2 = timeit.timeit(numpy_sum, number = n)
print 'Numpy Sum:', t2
</snippet></ROW><ROW><id>10922744</id><snippet>x = range(1000)</snippet></ROW><ROW><id>10922744</id><snippet>Pure Python Sum: 0.445913167735
Numpy Sum: 8.54926219673
</snippet></ROW><ROW><id>10922744</id><snippet>x = np.random.standard_normal(1000)</snippet></ROW><ROW><id>10922744</id><snippet>Pure Python Sum: 12.1442425643
Numpy Sum: 0.303303771848
</snippet></ROW><ROW><id>10922895</id><snippet>key</snippet></ROW><ROW><id>10922895</id><snippet>.sort</snippet></ROW><ROW><id>10922895</id><snippet>sorted</snippet></ROW><ROW><id>10922895</id><snippet>&gt;&gt;&gt; my_list = [(1, 4), (3, 0), (6, 2), (3, 8)]
&gt;&gt;&gt; sorted(my_list, key=min)
[(3, 0), (1, 4), (6, 2), (3, 8)]
</snippet></ROW><ROW><id>10922952</id><snippet>class Myclass(object):
    def __init__(self, total=0.):
        self.total = total

    def add(self, amount):     # &lt;= needs `self` parameter
        self.total += amount

v = Myclass()
v.add(2.)
</snippet></ROW><ROW><id>10922952</id><snippet>v.add(something)</snippet></ROW><ROW><id>10922952</id><snippet>Myclass.add(v, something)</snippet></ROW><ROW><id>10923101</id><snippet>kernel.CreateRemoteThread(hProcs, None, 4096*16, hLib, argAddy, 0, ctypes.byref(t_Id))
</snippet></ROW><ROW><id>10923259</id><snippet>a[:,1] = x[:,0]</snippet></ROW><ROW><id>10923259</id><snippet>x[:,0]</snippet></ROW><ROW><id>10923259</id><snippet>&gt;&gt;&gt; a
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
&gt;&gt;&gt; x = numpy.ones(5)
&gt;&gt;&gt; x
array([ 1.,  1.,  1.,  1.,  1.])
&gt;&gt;&gt; a[:,1] = x
&gt;&gt;&gt; a
array([[ 0.,  1.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  1.,  0.]])
</snippet></ROW><ROW><id>10923347</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(lambda: 'My default')
&gt;&gt;&gt; d['junk']
'My default'
</snippet></ROW><ROW><id>10923347</id><snippet>&gt;&gt;&gt; def myDefault():
...     return 'My default'
&gt;&gt;&gt;&gt; d = defaultdict(myDefault)
&gt;&gt;&gt; d['junk']
'My default'
</snippet></ROW><ROW><id>10923401</id><snippet>new_safe_str = some_string.encode('ascii','ignore') 
</snippet></ROW><ROW><id>10923401</id><snippet>"".join([ch for ch in orig_string if ord(ch)&lt;= 128])
</snippet></ROW><ROW><id>10923638</id><snippet>x = 0x32
i ='1234'.index(chr(x))
</snippet></ROW><ROW><id>10923658</id><snippet>staticmethod</snippet></ROW><ROW><id>10923658</id><snippet>staticmethod</snippet></ROW><ROW><id>10923658</id><snippet>@staticmethod</snippet></ROW><ROW><id>10923658</id><snippet>foo</snippet></ROW><ROW><id>10923658</id><snippet>Bar</snippet></ROW><ROW><id>10923658</id><snippet>bar.foo(...)</snippet></ROW><ROW><id>10923658</id><snippet>bar</snippet></ROW><ROW><id>10923658</id><snippet>Bar</snippet></ROW><ROW><id>10923658</id><snippet>bar</snippet></ROW><ROW><id>10923658</id><snippet>Bar.foo(...)</snippet></ROW><ROW><id>10923658</id><snippet>self</snippet></ROW><ROW><id>10924364</id><snippet>import os
import subprocess
import time
from daemon import runner

class App():
    def __init__(self):
        self.stdin_path = '/dev/null'
        self.stdout_path = '/dev/tty'
        self.stderr_path = '/dev/tty'
        self.pidfile_path =  '/tmp/your-pid-name.pid'
        self.pidfile_timeout = 5
    def run(self):

        try:
            while True:

                ### PUT YOUR SCRIPT HERE ###

                time.sleep(300)

        except Exception, e:
            raise

app = App()
daemon_runner = runner.DaemonRunner(app)
daemon_runner.do_action()
</snippet></ROW><ROW><id>10924415</id><snippet>x</snippet></ROW><ROW><id>10924415</id><snippet>return x</snippet></ROW><ROW><id>10924415</id><snippet>shape()</snippet></ROW><ROW><id>10924440</id><snippet>agents = {
    'a1': ['a2', 'a3', 'a5'],
    'a2': ['a1', 'a3', 'a4'],
    'a3': ['a1', 'a2', 'a5'],
    'a4': ['a2'],
    'a5': ['a1', 'a3'],
    'a6': []
}
pairs = {(k,v) for k in agents for v in agents[k]}
</snippet></ROW><ROW><id>10924440</id><snippet>pairs = {(k,v) for k,vs in agents.iteritems() for v in vs}
</snippet></ROW><ROW><id>10924627</id><snippet>fruits = [{
    'name':"apple",
    'color':["red","green"],
    'weight':1
}, {
    'name':"banana",
    'color':["yellow","green"],
    'weight':1
}, {
    'name':"orange",
    'color':"orange",
    'weight':[1,2]
}]

def findit(fruits,color):
    for indv in fruits:
        if color in indv['color']:
            return indv['name'], indv['weight']

print findit(fruits,"red")
</snippet></ROW><ROW><id>10924627</id><snippet>('apple', 1)</snippet></ROW><ROW><id>10924627</id><snippet>def findit2(fruits,color):
    return [(x['name'],x['weight']) for x in fruits if color in x['color']]

print findit2(fruits,"green")
</snippet></ROW><ROW><id>10924627</id><snippet>[('apple', 1), ('banana', 1)]</snippet></ROW><ROW><id>10924627</id><snippet>def findit3(fruits,color):
    mylist = []
    for indv in fruits:
        if color in indv['color']:
            mylist.append(  (indv['name'], indv['weight'])  )
    return mylist
</snippet></ROW><ROW><id>10924730</id><snippet>len(u'\U00010000') == 2</snippet></ROW><ROW><id>10924730</id><snippet>unichr(0x10000)</snippet></ROW><ROW><id>10924995</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>10924995</id><snippet>&gt;&gt;&gt; ast.literal_eval("{'a': {'b':'c'}}")
{'a': {'b': 'c'}}
</snippet></ROW><ROW><id>10924995</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>10924995</id><snippet>null</snippet></ROW><ROW><id>10924995</id><snippet>json.loads()</snippet></ROW><ROW><id>10925125</id><snippet>mydict={"keyy":{"key": "value", "cey": "value"}, "kaye":{"key": "value"}}

mytuplelist=[(key,y,mydict[key][y]) for key in mydict for y in mydict[key]]

print (mytuplelist)
</snippet></ROW><ROW><id>10925125</id><snippet>[('keyy', 'cey', 'value'), ('keyy', 'key', 'value'), ('kaye', 'key', 'value')]
</snippet></ROW><ROW><id>10925125</id><snippet>dic={"keyy":{"key": "value", "cey": "value"}, "kaye":{"key": "value"}}
lis=[]
for x in dic:
  for y in dic[x]:
      lis.append((x,y,dic[x][y]))
print(lis)
</snippet></ROW><ROW><id>10925125</id><snippet>[('keyy', 'cey', 'value'), ('keyy', 'key', 'value'), ('kaye', 'key', 'value')]
</snippet></ROW><ROW><id>10925225</id><snippet>def extract(s, start, end):
  return s[s.index(start) + len(start):s.index(end)]
</snippet></ROW><ROW><id>10925225</id><snippet>+ len(start)</snippet></ROW><ROW><id>10925225</id><snippet>start</snippet></ROW><ROW><id>10925225</id><snippet>.partition()</snippet></ROW><ROW><id>10925225</id><snippet>&gt;&gt;&gt; 'get stuff from here'.partition('get')[-1].partition('here')[0]
' stuff from '
</snippet></ROW><ROW><id>10925230</id><snippet>post_syncdb</snippet></ROW><ROW><id>10925230</id><snippet>class_prepared</snippet></ROW><ROW><id>10925230</id><snippet>syncdb</snippet></ROW><ROW><id>10925230</id><snippet>def db_default(field, db_default):
    """
    Set attribute __db_default for signal to set default values with.
    """
    field.__db_default = db_default
    return field

class OrderShipLog(models.Model):
    date = db_default(models.DateTimeField(), 'now()')

def generate_default_sql(model):
    """
    Generate SQL for postgresql_psycopg2 default values because the shipping
    database post doesn't guarantee posting certain fields but id like them all to be strings.
    """
    db_fields = filter(lambda x: hasattr(x, '__db_default'), model._meta.fields)
    db_table = model._meta.db_table
    modelname = model._meta.object_name

    sql_dir = os.path.join(os.path.dirname(__file__), 'sql/')
    sql_filename = os.path.join(sql_dir, '{modelname}.postgresql_psycopg2.sql'.format(
        modelname=modelname.lower()))

    from django.db import connection
    if not db_table in connection.introspection.table_names():
        print &gt;&gt; sys.stderr, "{0} not in introspected table list; creating db default sql file : {1}".format(db_table, sql_filename)
        try:
            if not os.path.exists(sql_dir):
                os.makedirs(sql_dir)

            with open(sql_filename, 'w+') as f:
                for field in db_fields:
                    attname, db_column = field.get_attname_column()
                    if not field.__db_default:
                        raise Exception("Must enter value for field {modelname}.{field}.__db_default".format(
                            modelname=modelname,
                            field=attname))
                    f.write('ALTER TABLE {db_table} ALTER COLUMN {db_column} SET DEFAULT {default};\n'.format(
                        db_table=db_table,
                        db_column=db_column,
                        default=field.__db_default,
                        ))
        except Exception, e:
            print &gt;&gt; sys.stderr, "Could not generate SQL file. Manually set the defaults! {0}\n".format(e) * 10

generate_default_sql(OrderShipLog)
</snippet></ROW><ROW><id>10925448</id><snippet>slicing</snippet></ROW><ROW><id>10925448</id><snippet>error</snippet></ROW><ROW><id>10925448</id><snippet>strings</snippet></ROW><ROW><id>10925448</id><snippet>lists</snippet></ROW><ROW><id>10925448</id><snippet>&gt;&gt;&gt; s='abc'
&gt;&gt;&gt; s[-1000:1000]
'abc'
</snippet></ROW><ROW><id>10925448</id><snippet>Indexes</snippet></ROW><ROW><id>10925448</id><snippet>IndexError</snippet></ROW><ROW><id>10925448</id><snippet>strings</snippet></ROW><ROW><id>10925448</id><snippet>lists</snippet></ROW><ROW><id>10925448</id><snippet>&gt;&gt;&gt; s[4]
Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    s[4]
IndexError: string index out of range
</snippet></ROW><ROW><id>10925519</id><snippet>&amp;</snippet></ROW><ROW><id>10925519</id><snippet>encodeURIComponent</snippet></ROW><ROW><id>10925519</id><snippet>// ...
"&amp;Comments=" + encodeURIComponent(commentsText)    // ...
</snippet></ROW><ROW><id>10925519</id><snippet>import urllib
# ...
Comments_ = urllib.unquote(kwargs['Comments']).decode('utf-8'))
</snippet></ROW><ROW><id>10925721</id><snippet>$ easy_install http://pypi.python.org/packages/2.7/r/readline/readline-6.2.2-py2.7-macosx-10.7-intel.egg#md5=25383d860632d4a1521961ba68a52fe2
</snippet></ROW><ROW><id>10925779</id><snippet>get()</snippet></ROW><ROW><id>10925779</id><snippet>def resolve(root, *keys):
   for key in keys:
       try:
           root = root[key]
       except (KeyError, IndexError):
           return None
   return root
</snippet></ROW><ROW><id>10925779</id><snippet>uri = resolve(entry_obj, 'media$group', 'media$content', 0, 'url')
</snippet></ROW><ROW><id>10925779</id><snippet>def resolve(root, keys, default=None):
    for key in keys.split():
        try:
            root = root[key]
        except (TypeError, KeyError):
            try:
                root = root[int(key)]
            except (IndexError, ValueError, KeyError):
                return default

uri = resolve(entry_obj, 'media$group media$content 0 url', '')
</snippet></ROW><ROW><id>10925925</id><snippet>str.split()</snippet></ROW><ROW><id>10925925</id><snippet>s = ["this is a string","python python python","split split split"]
map(str.split, s)
</snippet></ROW><ROW><id>10925925</id><snippet>[['this', 'is', 'a', 'string'],
 ['python', 'python', 'python'],
 ['split', 'split', 'split']]
</snippet></ROW><ROW><id>10925925</id><snippet>NameError: name 'split' is not defined</snippet></ROW><ROW><id>10925925</id><snippet>split</snippet></ROW><ROW><id>10925925</id><snippet>split</snippet></ROW><ROW><id>10925925</id><snippet>split</snippet></ROW><ROW><id>10925925</id><snippet>str</snippet></ROW><ROW><id>10925950</id><snippet>~/Library/Python</snippet></ROW><ROW><id>10925950</id><snippet>~/.local</snippet></ROW><ROW><id>10926512</id><snippet>cp437</snippet></ROW><ROW><id>10926512</id><snippet>utf-8</snippet></ROW><ROW><id>10926512</id><snippet>&gt;&gt;&gt; sys.stdout.write(s.encode('utf-8').ljust(20) + "hello")
你好              hello
&gt;&gt;&gt; sys.stdout.write(s.ljust(20).encode('utf-8') + "hello")
你好                  hello
</snippet></ROW><ROW><id>10926512</id><snippet>&gt;&gt;&gt; sys.stdout.write("12".ljust(20) + "hello")
12                  hello
</snippet></ROW><ROW><id>10926512</id><snippet>stdout</snippet></ROW><ROW><id>10926512</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>10926512</id><snippet>sys.stdout.write(s.ljust(20))
</snippet></ROW><ROW><id>10926512</id><snippet>print</snippet></ROW><ROW><id>10926512</id><snippet>print "%20s" % s   # old-style
</snippet></ROW><ROW><id>10926512</id><snippet>print '{:20}'.format(s)  # new-style
</snippet></ROW><ROW><id>10926731</id><snippet>app.run</snippet></ROW><ROW><id>10926731</id><snippet>app.run</snippet></ROW><ROW><id>10926731</id><snippet>werkzeug.serving.run_simple</snippet></ROW><ROW><id>10926731</id><snippet>wsgiref</snippet></ROW><ROW><id>10926731</id><snippet># your_app.config.develop
DEBUG = True

# your_app.config.production
DEBUG = False

# your_app.app
from flask import Flask
from os import environ

mode = environ.get("YOURAPP_MODE")
mode = "production" if mode is None else "develop"

config = __import__("your_app.config." + mode)

app = Flask("your_app")
app.config.from_object(config)
</snippet></ROW><ROW><id>10926753</id><snippet>mean</snippet></ROW><ROW><id>10926753</id><snippet>In [24]: import numpy as np

In [25]: b = np.arange(5)

In [26]: b
Out[26]: array([0, 1, 2, 3, 4])

In [27]: b.mean()
Out[27]: 2.0
</snippet></ROW><ROW><id>10926753</id><snippet>In [28]: A = [np.arange(i) for i in range(3, 6)]

In [29]: A
Out[29]: [array([0, 1, 2]), array([0, 1, 2, 3]), array([0, 1, 2, 3, 4])]

In [30]: for B in A: print B.mean()
1.0
1.5
2.0
</snippet></ROW><ROW><id>10926753</id><snippet>sum</snippet></ROW><ROW><id>10926753</id><snippet>In [31]: sum(B.sum() for B in A) / sum(len(B) for B in A)
Out[31]: 1.5833333333333333
</snippet></ROW><ROW><id>10927146</id><snippet>plt.tight_layout()</snippet></ROW><ROW><id>10927146</id><snippet>plt.subplots_adjust()</snippet></ROW><ROW><id>10927146</id><snippet>fig.savefig(bbox_inches='tight')</snippet></ROW><ROW><id>10927146</id><snippet>subplots_adjust</snippet></ROW><ROW><id>10927146</id><snippet>tight_layout()</snippet></ROW><ROW><id>10927146</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>10927803</id><snippet>&gt;&gt;&gt; from urlparse import parse_qs
&gt;&gt;&gt; parse_qs('next=/contact/200/10626096&amp;back%3DZHViYWkuZHViaXp6bGUubmxoL2NsYXNzaWZpZWQvYXV0b3M0eDRzL2FjdXJhL2NzeGVsLz95ZWFyX19ndGU9JmFkZGVkX19ndGU9JnNlbGxlcl90eXBlPSZpc19zZWFyY2g9MSZraWxvbWV0ZXJzX19ndGU9JnByaWNlX19ndGU9JnBsYWNlc19faWRfX2luPUVudGVyK0xvY2F0aW9uJTI4cyUyOStIZXJlJnBsYWNlc19faWRfX2luPSZ5ZWFyX19sdGU9MjAxMiZraWxvbWV0ZXJzX19sdGU9JmtleXdvcmRzPSZpc19iYXNpY19zZWFyY2hfd2lkZ2V0PTAmcHJpY2VfX2x0ZT0%3D')
{'next': ['/contact/200/10626096']}
</snippet></ROW><ROW><id>10927860</id><snippet>import time
import signal
import threading
import sys 
if sys.version_info &gt; (3,0):
    from socketserver import TCPServer, BaseRequestHandler
else:
    from SocketServer import TCPServer, BaseRequestHandler

def shutdown(signum, frame):
    print("Shutting down server thread")
    server.running = False
    server.shutdown()

server = TCPServer(
    ('127.0.0.1', 7654),
    BaseRequestHandler
)
signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)
server_thread = threading.Thread(target=server.serve_forever)
print("Starting server thread")
server_thread.start()
server.running = True
print("Waiting for server thread to shut down")

while server.running:
    time.sleep(1)

server_thread.join()
print("Server thread terminated")
</snippet></ROW><ROW><id>10927934</id><snippet>list</snippet></ROW><ROW><id>10927934</id><snippet>sort</snippet></ROW><ROW><id>10927934</id><snippet>&gt;&gt;&gt; class MyList(list):
    def sort(self):
        copy = list(self)
        copy.sort()
        return MyList(copy)


&gt;&gt;&gt; l2 = MyList([2, 6, 9, 8])
&gt;&gt;&gt; l2
[2, 6, 9, 8]
&gt;&gt;&gt; l3 = l2.sort()
&gt;&gt;&gt; l2
[2, 6, 9, 8]
&gt;&gt;&gt; l3
[2, 6, 8, 9]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10927934</id><snippet>sort</snippet></ROW><ROW><id>10927934</id><snippet>&gt;&gt;&gt; class MyList(list):
    def sort_copy(self):
        copy = list(self)
        copy.sort()
        return MyList(copy)
</snippet></ROW><ROW><id>10927934</id><snippet>sort</snippet></ROW><ROW><id>10927934</id><snippet>sort_copy</snippet></ROW><ROW><id>10928446</id><snippet>json.dumps</snippet></ROW><ROW><id>10928446</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>10928446</id><snippet>eval</snippet></ROW><ROW><id>10928446</id><snippet>for obj in MyModel.objects.all():
    value = ast.literal_eval(obj.dict_value)
    obj.dict_value = json.dumps(value)
    value.save()
</snippet></ROW><ROW><id>10928579</id><snippet>import sqlite3

def select(self, attr="*", table="reuters", fetch=None, num=None, tologfile=False, logfile=""):
    if fetch is None:
        fetch=self.fetchone
    output=self.execute("select * from ?;".replace('?',table).replace("select * ", ("select "+attr+' ')))

    output=fetch(num) if num else fetch()

    if tologfile:
        logfile = open(logfile, 'w')
        logfile.write(str(output))
        logfile.close()
    else: return output

if __name__ == '__main__':    
    connection = sqlite3.connect('winkwinknudgenudgesaynomore.db')
    cursor = connection.cursor()
    cursor.execute("drop table reuters;")
    cursor.execute("create table reuters (foo text, bar text);")
    connection.commit()
    print select(cursor)
    print select(cursor, 'bar')
    print select(cursor, 'bar', fetch=cursor.fetchmany, num=5)
    cursor.close()
</snippet></ROW><ROW><id>10928705</id><snippet>\\u795d</snippet></ROW><ROW><id>10928705</id><snippet>\u795d</snippet></ROW><ROW><id>10928705</id><snippet>&gt;&gt;&gt; u'\\u795d\\u798f'.decode('unicode_escape')
u'\u795d\u798f'
</snippet></ROW><ROW><id>10928705</id><snippet>print</snippet></ROW><ROW><id>10928705</id><snippet>&gt;&gt;&gt; bytes('\\u795d\\u798f','utf-8').decode('unicode_escape')
'祝福'
</snippet></ROW><ROW><id>10928853</id><snippet>def test_update_using_positional_operator(self):
    """Ensure that the list fields can be updated using the positional
    operator."""

    class Comment(EmbeddedDocument):
        by = StringField()
        votes = IntField()

    class BlogPost(Document):
        title = StringField()
        comments = ListField(EmbeddedDocumentField(Comment))

    BlogPost.drop_collection()

    c1 = Comment(by="joe", votes=3)
    c2 = Comment(by="jane", votes=7)

    BlogPost(title="ABC", comments=[c1, c2]).save()

    BlogPost.objects(comments__by="jane").update(inc__comments__S__votes=1)

    post = BlogPost.objects.first()
    self.assertEquals(post.comments[1].by, 'jane')
    self.assertEquals(post.comments[1].votes, 8)
</snippet></ROW><ROW><id>10929077</id><snippet>import operator

class Person(object):
    def __init__(self, name, ssn):
        self.name = name
        self._ssn = ssn
    ssn = property(operator.attrgetter("_ssn"))
</snippet></ROW><ROW><id>10929077</id><snippet>_ssn</snippet></ROW><ROW><id>10929077</id><snippet>_</snippet></ROW><ROW><id>10929333</id><snippet>import signal

def sig_handler(signum, frame):
    #deal with the signal.. 

signal.signal(signal.SIGSEGV, sig_handler)  
</snippet></ROW><ROW><id>10929647</id><snippet>MyButton1 = Button(master, text="BUTTON1", width=10, command=callback)
MyButton1.grid(row=0, column=0)

MyButton2 = Button(master, text="BUTTON2", width=10, command=callback)
MyButton2.grid(row=1, column=0)

MyButton3 = Button(master, text="BUTTON3", width=10, command=callback)
MyButton3.grid(row=2, column=0)
</snippet></ROW><ROW><id>10929743</id><snippet>for item in list:
</snippet></ROW><ROW><id>10929743</id><snippet>for pos, item in enumerate(collection):
</snippet></ROW><ROW><id>10930501</id><snippet>temp</snippet></ROW><ROW><id>10930501</id><snippet>def str_replace(search, replace, subject):
    for s in search:
        subject = subject.replace(s, replace)
    return subject
</snippet></ROW><ROW><id>10930501</id><snippet>import re

def str_replace(search, replace, subject):
    search = '|'.join(map(re.escape, search))
    return re.sub(search, replace, subject)
</snippet></ROW><ROW><id>10930501</id><snippet>replace</snippet></ROW><ROW><id>10930501</id><snippet>search</snippet></ROW><ROW><id>10930579</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; t = time.time()
&gt;&gt;&gt; int(str(t-int(t))[2:])%100 #Keeping only the numbers after the decimal point, otherwise you would get the same "random" number each second
33
</snippet></ROW><ROW><id>10930713</id><snippet>parser.epilog</snippet></ROW><ROW><id>10930713</id><snippet>-h</snippet></ROW><ROW><id>10930713</id><snippet>parser = argparse.ArgumentParser(
    description='My first argparse attempt',
    epilog='Example of use')

output = parser.parse_args()
</snippet></ROW><ROW><id>10930713</id><snippet>My first argparse attempt

optional arguments:
  -h, --help  show this help message and exit

Example of use
</snippet></ROW><ROW><id>10931193</id><snippet>import re
dict = {}
dict[re.compile('actionname (\d+) (\d+)')] = method
dict[re.compile('differentaction (\w+) (\w+)')] = appropriate_method

def execute_method_for(str):
    #Match each regex on the string
    matches = (
        (regex.match(str), f) for regex, f in dict.iteritems()
    )

    #Filter out empty matches, and extract groups
    matches = (
        (match.groups(), f) for match, f in matches if match is not None
    )


    #Apply all the functions
    for args, f in matches:
        f(*args)
</snippet></ROW><ROW><id>10931234</id><snippet>WEXITSTATUS(status)</snippet></ROW><ROW><id>10931234</id><snippet>wait</snippet></ROW><ROW><id>10931234</id><snippet>int status = system("/path/to/my/program");
if (status &lt; 0)
    std::cout &lt;&lt; "Error: " &lt;&lt; strerror(errno) &lt;&lt; '\n';
else
{
    if (WIFEXITED(status))
        std::cout &lt;&lt; "Program returned normally, exit code " &lt;&lt; WEXITSTATUS(status) &lt;&lt; '\n';
    else
        std::cout &lt;&lt; "Program exited abnormaly\n";
}
</snippet></ROW><ROW><id>10931427</id><snippet>class MyObject(object):
    def __init__(self, attr1 = default1, attr2 = default2):
        self.attr1 = attr1
        self.attr2 = attr2
</snippet></ROW><ROW><id>10931427</id><snippet>MyObject</snippet></ROW><ROW><id>10931427</id><snippet>myObject1 = MyObject() # gets default values 
myObject2 = MyObject(foo, bar) # overrides defaults
</snippet></ROW><ROW><id>10931427</id><snippet>kwargs</snippet></ROW><ROW><id>10931514</id><snippet>def strtr(strng, replace):
    buffer = []
    i, n = 0, len(strng)
    while i &lt; n:
        match = False
        for s, r in replace.items():
            if strng[i:len(s)+i] == s:
                buffer.append(r)
                i = i + len(s)
                match = True
                break
        if not match:
            buffer.append(strng[i])
            i = i + 1
    return ''.join(buffer)
</snippet></ROW><ROW><id>10931747</id><snippet>logger.handlers = []</snippet></ROW><ROW><id>10931747</id><snippet>logger2 = logging.getLogger('extensive')
logfile = logging.FileHandler("test.log")
logger2.handlers = []
logger2.addHandler(logfile)
</snippet></ROW><ROW><id>10932113</id><snippet>N+1</snippet></ROW><ROW><id>10932113</id><snippet>$in</snippet></ROW><ROW><id>10932113</id><snippet>Post {
  PosterId: ObjectId
  Text: string
  Comments: [ObjectId, ObjectId, ...] // option 1
}

Comment {
  PostId: ObjectId // option 2 (better)
  Created: dateTime,
  AuthorName: string,
  AuthorId: ObjectId,
  Text: string
}
</snippet></ROW><ROW><id>10932113</id><snippet>$in</snippet></ROW><ROW><id>10932113</id><snippet>$in</snippet></ROW><ROW><id>10932113</id><snippet>$push</snippet></ROW><ROW><id>10932131</id><snippet>def is_palindrome(s):
   return s == s[::-1]
</snippet></ROW><ROW><id>10932131</id><snippet>lower()</snippet></ROW><ROW><id>10932150</id><snippet>loadtxt</snippet></ROW><ROW><id>10932150</id><snippet>genfromtxt</snippet></ROW><ROW><id>10932150</id><snippet>csv</snippet></ROW><ROW><id>10932150</id><snippet>import csv

arr = []

with open('test.txt', 'r') as fh:
    reader = csv.reader(fh)
    for row in reader:
        if row:
            arr.extend(row)
</snippet></ROW><ROW><id>10932150</id><snippet>fileobj = open(...)</snippet></ROW><ROW><id>10932150</id><snippet>for line in fileobj</snippet></ROW><ROW><id>10932150</id><snippet>&gt;&gt;&gt; arr
['883825.00', '373395.00', '0.00', '20,080.84', '2012500.00', '#EANF#', '121449.
39', '0.00', '0.00', '0.00', '38,849.10', '0.00', '#EANF#', '0.00', '0.00', '0.0
0', '0.00', '83,167.42', '1640625.00', '#EANF#', '0.00', '#EANF#', '#EANF#', '#E
ANF#', '#EANF#', '#EANF#', '#EANF#', '#EANF#', '-1,202,600.00', '-0.00', '#EANF#
', '2267168', '0.00', '#EANF#', '-173,710.66', '-125.60', '#EANF#', '17,459.68',
 '#EANF#.']
</snippet></ROW><ROW><id>10932150</id><snippet>#EANF#</snippet></ROW><ROW><id>10932150</id><snippet>numpy.NaN</snippet></ROW><ROW><id>10932150</id><snippet>float(str(float_string).replace(',', ''))
</snippet></ROW><ROW><id>10932150</id><snippet>#EANF#</snippet></ROW><ROW><id>10932150</id><snippet>.</snippet></ROW><ROW><id>10932150</id><snippet>convert</snippet></ROW><ROW><id>10932150</id><snippet>import numpy

def convert(v):
    try:
        return float(v)
    except ValueError:
        if v.startswith('#EANF#'):
            return numpy.NaN
        else:
            return float(str(v).replace(',', ''))

arr = numpy.asarray([convert(a) for a in arr])
</snippet></ROW><ROW><id>10932150</id><snippet>convert</snippet></ROW><ROW><id>10932150</id><snippet>numpy.NaN</snippet></ROW><ROW><id>10932150</id><snippet>&gt;&gt;&gt; arr
[883825.0, 373395.0, 0.0, 20080.84, 2012500.0, nan, 121449.39, 0.0, 0.0, 0.0, 38
849.1, 0.0, nan, 0.0, 0.0, 0.0, 0.0, 83167.42, 1640625.0, nan, 0.0, nan, nan, na
n, nan, nan, nan, nan, -1202600.0, -0.0, nan, 2267168.0, 0.0, nan, -173710.66, -
125.6, nan, 17459.68, nan]
</snippet></ROW><ROW><id>10932349</id><snippet>sudo apt-get install python-lxml python-fpconst python-soappy
</snippet></ROW><ROW><id>10932349</id><snippet>pip install lxml
pip install fpconst
pip install soappy
</snippet></ROW><ROW><id>10933138</id><snippet>data.txt</snippet></ROW><ROW><id>10933138</id><snippet>cat 3
dog 5
foo 7
</snippet></ROW><ROW><id>10933138</id><snippet>from pyparsing import *

# Read the input data
filename = "data.txt"
FIN      = open(filename)
TEXT     = FIN.read()

# Define a simple grammar for the text, multiply the first col by 2
digits = Word(nums)
digits.setParseAction(lambda x:int(x[0]) * 2)

blocks   = Group(Word(alphas) + digits)
grammar  = OneOrMore(blocks)

# Parse the results
result = grammar.parseString( TEXT )
# This gives a list of lists
# [['cat', 6], ['dog', 10], ['foo', 14]]

# Open up a new file for the output
filename2 = "data2.txt"
FOUT = open(filename2,'w')

# Walk through the results and write to the file
for item in result:
    print item
    FOUT.write("%s %i\n" % (item[0],item[1]))
FOUT.close()
</snippet></ROW><ROW><id>10933138</id><snippet>data2.txt</snippet></ROW><ROW><id>10933138</id><snippet>cat 6
dog 10
foo 14
</snippet></ROW><ROW><id>10933138</id><snippet>parseFile</snippet></ROW><ROW><id>10933138</id><snippet>expr.parseString(open(filename).read())</snippet></ROW><ROW><id>10933307</id><snippet>output_file.write(a)</snippet></ROW><ROW><id>10933307</id><snippet>output_file.write(str(a))</snippet></ROW><ROW><id>10933307</id><snippet>print</snippet></ROW><ROW><id>10933307</id><snippet>print</snippet></ROW><ROW><id>10933307</id><snippet>file.write()</snippet></ROW><ROW><id>10933307</id><snippet>str()</snippet></ROW><ROW><id>10933307</id><snippet>.close()</snippet></ROW><ROW><id>10933309</id><snippet>os.path.isfile("somefile.ext")</snippet></ROW><ROW><id>10933309</id><snippet>os.path.isfile("~/somefile.ext")</snippet></ROW><ROW><id>10933309</id><snippet>import os

homedir = os.path.expanduser("~")
print len([
    name
    for name in os.listdir(homedir)
    if os.path.isfile(os.path.join(homedir, name))
])
</snippet></ROW><ROW><id>10933309</id><snippet>print sum(
    os.path.isfile(os.path.join(homedir, name)) for name in os.listdir(homedir)
)
</snippet></ROW><ROW><id>10933428</id><snippet>echo</snippet></ROW><ROW><id>10933428</id><snippet>cmd.exe</snippet></ROW><ROW><id>10933428</id><snippet>subprocess.call()</snippet></ROW><ROW><id>10933428</id><snippet>shell=True</snippet></ROW><ROW><id>10933428</id><snippet>subprocess.call('echo hello', shell=True)
</snippet></ROW><ROW><id>10933440</id><snippet>%</snippet></ROW><ROW><id>10933440</id><snippet>%s</snippet></ROW><ROW><id>10933440</id><snippet>('/welcome?resident=%s&amp;nacionality=%s?SSN=%s?driverLicense=%s?email=%s?witness =%s?
owner=%s' % (resident_name, user_nacionality, user_SSN, user_driverLicense, user_email,
witness, owner)
</snippet></ROW><ROW><id>10933682</id><snippet>dict()</snippet></ROW><ROW><id>10933682</id><snippet>dict((x1, (x0,x2)) for (x0,x1,x2) in zip(x[:-2],x[1:-1],x[2:]))
</snippet></ROW><ROW><id>10933724</id><snippet>mmap.PAGESIZE</snippet></ROW><ROW><id>10933724</id><snippet>mmap.ALLOCATIONGRANULARITY</snippet></ROW><ROW><id>10934230</id><snippet>u</snippet></ROW><ROW><id>10934596</id><snippet>format()</snippet></ROW><ROW><id>10934596</id><snippet>def wordCount(paragraph):
    splited = paragraph.split()
    wordnum = len(splited)
    eWord = []
    for aWord in splited:
        if "e" in aWord:
            eWord.append(aWord)
    eWordnum = len(eWord)
    percent = round(eWordnum / wordnum * 100,2)
    return "Your text contains {0} words, of which {1} ({2}%) contains an 'e'".format(wordnum, eWordnum, percent)
</snippet></ROW><ROW><id>10934596</id><snippet>&gt;&gt;&gt; wordCount("doodle bugs")

"Your text contains 2 words, of which 1 (0.0%) contains an 'e'"
</snippet></ROW><ROW><id>10934872</id><snippet>^@@:([a-zA-Z0-9_-]*)\s*^(.*?)(^@@|\Z)
</snippet></ROW><ROW><id>10935185</id><snippet>python manage.py collectstatic --noinput
</snippet></ROW><ROW><id>10935185</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10935185</id><snippet>urlpatterns += patterns('',
    (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.STATIC_ROOT}),
)
</snippet></ROW><ROW><id>10935185</id><snippet>collectstatic</snippet></ROW><ROW><id>10935185</id><snippet>static</snippet></ROW><ROW><id>10935241</id><snippet>app.yaml</snippet></ROW><ROW><id>10935241</id><snippet>- url: /static/
  static_dir: static
</snippet></ROW><ROW><id>10935309</id><snippet>...
http_server = httpserver.HTTPServer(application1)
http_server.listen(8080)    # NOTE - port 8080

...
http_server2 = httpserver.HTTPServer(application2)
http_server2.listen(8081)   # NOTE - port 8081

ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>10935559</id><snippet>table.write(\nflux + " " + observed)
</snippet></ROW><ROW><id>10935559</id><snippet>table.write("\n" + flux + " " + observed)
</snippet></ROW><ROW><id>10935559</id><snippet>table.write("\n{} {}".format(flux, observed))
</snippet></ROW><ROW><id>10935701</id><snippet>for i in range(sheet.nrows):
     row = sheet.row_values(i)
     for j in range(len(row)):
          if row[j] == search_value:
                return i,j
return None
</snippet></ROW><ROW><id>10935744</id><snippet>import re

with open("Tyger.txt") as f:
    words = re.findall("\w+", f.read())
</snippet></ROW><ROW><id>10936091</id><snippet>proc = subprocess.Popen(['git', '--git-dir', '/home/git/repos/testing.git', 'log', '-n1'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>10936091</id><snippet>--git-dir</snippet></ROW><ROW><id>10936091</id><snippet>.git</snippet></ROW><ROW><id>10936091</id><snippet>--work-tree</snippet></ROW><ROW><id>10936091</id><snippet>GIT_DIR</snippet></ROW><ROW><id>10936091</id><snippet>import os
env = os.environ.copy()
env['GIT_DIR'] = '/home/git/repos/testing.git'
proc = subprocess.Popen((['git', 'log', '-n1', stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
</snippet></ROW><ROW><id>10936091</id><snippet>GIT_DIR</snippet></ROW><ROW><id>10936091</id><snippet>git</snippet></ROW><ROW><id>10936091</id><snippet>GIT_DIR</snippet></ROW><ROW><id>10936091</id><snippet>import os
repo = '/home/git/repos/testing.git'
env = os.environ.copy()
env['GIT_DIR'] = repo
proc = subprocess.Popen((['git', 'log', '-n1', stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, cwd=repo)
</snippet></ROW><ROW><id>10936234</id><snippet>["steve@gmail.com"]</snippet></ROW><ROW><id>10936234</id><snippet>import json
python_data = [u'steve@gmail.com']
json_string = json.dumps(data)
</snippet></ROW><ROW><id>10936234</id><snippet>u</snippet></ROW><ROW><id>10936254</id><snippet>&gt;&gt;&gt; class Derived(Base):
...    pass
</snippet></ROW><ROW><id>10936254</id><snippet>Base</snippet></ROW><ROW><id>10936254</id><snippet>&gt;&gt;&gt; class Base(object):
...     ...
</snippet></ROW><ROW><id>10936513</id><snippet>unpack.c</snippet></ROW><ROW><id>10936513</id><snippet>16</snippet></ROW><ROW><id>10936513</id><snippet>.bin</snippet></ROW><ROW><id>10936513</id><snippet>.png</snippet></ROW><ROW><id>10936513</id><snippet>changed.convert('L').save(saveFile)
</snippet></ROW><ROW><id>10936513</id><snippet>'raw'</snippet></ROW><ROW><id>10936513</id><snippet>tostring</snippet></ROW><ROW><id>10936513</id><snippet>changed.save(saveFile, 'raw')
</snippet></ROW><ROW><id>10936772</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2, re

emailContents = []

def analyze_emails():
    # this function and any sub-routines would analyze the emails after they are loaded into a data structure, e.g. emailContents

def parse_email_page(link):
    print "opening " + link
    # open, soup, and parse the page.  
    #Looks like the email itself is in a "blockquote" tag so that may be the starting place.  
    #From there you'll need to create arrays and/or dictionaries of the emails' contents to do your analysis on, e.g. emailContents

def parse_list_page(link):
    print "opening " + link
    html = urllib2.urlopen(link).read()
    soup = BeatifulSoup(html)
    email_page_links = # add your own code here to filter the list page soup to get all the relevant links to actual email pages   
    for link in email_page_links:
        parseEmailPage(link['href'])


def main():
    html = urllib2.urlopen('http://www.419scam.org/emails/').read()
    soup = BeautifulSoup(html)    
    links = soup.findAll(href=re.compile("20")) # I use '20' to filter links since all the relevant links seem to have 20XX year in them. Seemed to work

    for link in links:
        parse_list_page(link['href'])

    analyze_emails()         

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10936915</id><snippet>get_state_dict_code</snippet></ROW><ROW><id>10936915</id><snippet>state_code_dict</snippet></ROW><ROW><id>10936915</id><snippet>state_code_dict = generate_state_code_dict()
</snippet></ROW><ROW><id>10936940</id><snippet>__year</snippet></ROW><ROW><id>10936940</id><snippet>Exemple.objects.filter(date_field__year__lt=F('year_field'))
</snippet></ROW><ROW><id>10936940</id><snippet>extra</snippet></ROW><ROW><id>10936957</id><snippet>import re

i = 96
def replace(matches):
    global i
    i += 1
    return " " + chr(i) + matches.group(0)

re.sub(',|\)', replace, "void some_function(int,  int *, float);")
</snippet></ROW><ROW><id>10937041</id><snippet>unicodedata</snippet></ROW><ROW><id>10937086</id><snippet>#                 a  b  c  d  e  f
A = numpy.array([[0, 1, 2, 3, 4, 5],
                 [1, 0, 3, 4, 5, 6],
                 [2, 3, 0, 5, 6, 7],
                 [3, 4, 5, 0, 7, 8],
                 [4, 5, 6, 7, 0, 9],
                 [5, 6, 7, 8, 9, 0]])

#            a  d  b  e  c  f
new_order = [0, 3, 1, 4, 2, 5]
A1 = A[:, new_order][new_order]
</snippet></ROW><ROW><id>10937086</id><snippet>#     a  b  c  d  e  f
A = [[0, 1, 2, 3, 4, 5],
     [1, 0, 3, 4, 5, 6],
     [2, 3, 0, 5, 6, 7],
     [3, 4, 5, 0, 7, 8],
     [4, 5, 6, 7, 0, 9],
     [5, 6, 7, 8, 9, 0]]

#            a  d  b  e  c  f
new_order = [0, 3, 1, 4, 2, 5]    # maps previous index to new index
A1 = [[A[i][j] for j in new_order] for i in new_order]
</snippet></ROW><ROW><id>10937086</id><snippet>&gt;&gt;&gt; pprint.pprint(A1)
[[0, 3, 1, 4, 2, 5],
 [3, 0, 4, 7, 5, 8],
 [1, 4, 0, 5, 3, 6],
 [4, 7, 5, 0, 6, 9],
 [2, 5, 3, 6, 0, 7],
 [5, 8, 6, 9, 7, 0]]
</snippet></ROW><ROW><id>10937086</id><snippet>A</snippet></ROW><ROW><id>10937086</id><snippet>A[:] = [A[i] for i in new_order]
for row in A:
    row[:] = [row[i] for i in new_order]
</snippet></ROW><ROW><id>10937226</id><snippet>z3c.recipe.scripts</snippet></ROW><ROW><id>10937226</id><snippet>zc.recipe.egg</snippet></ROW><ROW><id>10937226</id><snippet>z3c.recipe.scripts</snippet></ROW><ROW><id>10937226</id><snippet>z3c.recipe.eggs</snippet></ROW><ROW><id>10937226</id><snippet>zc.recipe.egg</snippet></ROW><ROW><id>10937226</id><snippet>zc.buildout</snippet></ROW><ROW><id>10937623</id><snippet>gnuplot --persist -e 'plot "table.dat" u 1:2'
</snippet></ROW><ROW><id>10937623</id><snippet>gnuplot temp.gp</snippet></ROW><ROW><id>10937623</id><snippet>--persist</snippet></ROW><ROW><id>10937623</id><snippet>help set term</snippet></ROW><ROW><id>10937623</id><snippet>help set output</snippet></ROW><ROW><id>10937623</id><snippet>set term</snippet></ROW><ROW><id>10937623</id><snippet>gnuplot -e 'plot "table.dat" u 1:2; pause -1'  #this should leave your plot open until you hit return
</snippet></ROW><ROW><id>10937623</id><snippet>#tmp.gp
set term postscript enh color
set output "tmp.ps"
plot "table.dat" u 1:2
</snippet></ROW><ROW><id>10937623</id><snippet>gnuplot tmp.gp
</snippet></ROW><ROW><id>10937623</id><snippet>gv</snippet></ROW><ROW><id>10937623</id><snippet>gv tmp.ps &amp;
</snippet></ROW><ROW><id>10937650</id><snippet>bash</snippet></ROW><ROW><id>10937650</id><snippet>bash</snippet></ROW><ROW><id>10937650</id><snippet>xampp_store.exe</snippet></ROW><ROW><id>10937650</id><snippet>#!/bin/env python

import subprocess
p = subprocess.Popen(["C:\\xampp\\xampp_stop.exe"])
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>10937842</id><snippet>C:\Python27\mydir&gt; python setup.py py2exe
</snippet></ROW><ROW><id>10937842</id><snippet>C:\Python27\mydir&gt; setup.py py2exe
</snippet></ROW><ROW><id>10937842</id><snippet>C:\Python27\mydir&gt;setup.py --help-commands
Standard commands:
  build            build everything needed to install
  build_py         "build" pure Python modules (copy to build directory)
  build_ext        build C/C++ extensions (compile/link to build directory)
  build_clib       build C/C++ libraries used by Python extensions
  build_scripts    "build" scripts (copy and fixup #! line)
  clean            clean up temporary files from 'build' command
  install          install everything from build directory
  install_lib      install all Python modules (extensions and pure Python)
  install_headers  install C/C++ header files
  install_scripts  install scripts (Python or otherwise)
  install_data     install data files
  sdist            create a source distribution (tarball, zip file, etc.)
  register         register the distribution with the Python package index
  bdist            create a built (binary) distribution
  bdist_dumb       create a "dumb" built distribution
  bdist_rpm        create an RPM distribution
  bdist_wininst    create an executable installer for MS Windows
  upload           upload binary package to PyPI
  check            perform some checks on the package
  py2exe

usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: setup.py --help [cmd1 cmd2 ...]
   or: setup.py --help-commands
   or: setup.py cmd --help


C:\Python27\mydir&gt;
</snippet></ROW><ROW><id>10937852</id><snippet>sudo chown your_username:your_groupname filename
</snippet></ROW><ROW><id>10937852</id><snippet>nobody</snippet></ROW><ROW><id>10937927</id><snippet>python-magic</snippet></ROW><ROW><id>10937927</id><snippet>magic</snippet></ROW><ROW><id>10937927</id><snippet>imghdr</snippet></ROW><ROW><id>10938206</id><snippet>output</snippet></ROW><ROW><id>10938206</id><snippet>conn = sqlite3.connect('database.db')
c = conn.cursor()
c.execute('select y1 from table where pagenr=? and x1=?',
(pagenr_value, x1_value))
output = c.fetchall()
</snippet></ROW><ROW><id>10938231</id><snippet># grow the y axis down by 0.05
ax.set_ylim(1.35, 1.8)
# expand the x axis by 0.5 at two ends
ax.set_xlim(-0.5, len(labels)-0.5)
</snippet></ROW><ROW><id>10938284</id><snippet>\</snippet></ROW><ROW><id>10938284</id><snippet>def removebackslash(source):
    while(source.find('\&lt;b&gt;\&lt;/b&gt;') != -1):
        startback = source.find('\&lt;b&gt;\&lt;/b&gt;')
        endback = source[startback:].find(' ') + startback + 1
        source = source[0:startback] + source[endback:]
    return source</snippet></ROW><ROW><id>10938347</id><snippet>install_requires = []

try: import numpy
except ImportError: install_requires.append('numpy')

setup(
    ...
    install_requires=install_requires,
    ...
)
</snippet></ROW><ROW><id>10938519</id><snippet>NestedList = [["BLAHBLAH\Desktop","BLAHBLAH\Documents","BLAHBLAH\Vids"],["BLAHBLAH\Pics","BLAHBLAH\Folder","BLAHBLAH\Music"]]
output = [[os.path.basename(path) for path in li] for li in NestedList]
</snippet></ROW><ROW><id>10938735</id><snippet>for pos in positions:
    for line in open('clears'):
        if pos[0] in line and pos[3] in line:
            print line
</snippet></ROW><ROW><id>10938735</id><snippet>pos</snippet></ROW><ROW><id>10939032</id><snippet>l</snippet></ROW><ROW><id>10939032</id><snippet>url</snippet></ROW><ROW><id>10939032</id><snippet>url</snippet></ROW><ROW><id>10939032</id><snippet>#....
url2 = url + str(l)
print url2
#....
</snippet></ROW><ROW><id>10939255</id><snippet>import os, fnmatch

#
# This wrapper for os.walk is based on Python Cookbook, 2.16.
# Added the exclude_dirs named parameter so that we can skip svn folders.
# Added the yield_files named parameter so that we can return only folders.
#

def walk_file_system (root, patterns='*', single_level=False, yield_folders=False, yield_files=True, exclude_dirs='.svn'):
    # Expand patterns from semicolon-separated string to list
    patterns = patterns.split (';')
    exclude_dirs = exclude_dirs.split (';')
    for path, subdirs, files in os.walk (root):
        for exclude_dir in exclude_dirs:
            for dir in subdirs:
                if fnmatch.fnmatch (dir, exclude_dir):
                    subdirs.remove(dir)
        fsnodes = []
        if yield_folders:
            fsnodes.extend(subdirs)
        if yield_files:
            fsnodes.extend(files)
        fsnodes.sort ( )
        for name in fsnodes:
            for pattern in patterns:
                if fnmatch.fnmatch (name, pattern):
                    yield os.path.join (path, name)
                    break
        if single_level:
            break
</snippet></ROW><ROW><id>10939255</id><snippet>def walk_file_system_test():
    #patterns='*', single_level=False, yield_folders=False, yield_files=True, exclude_dirs='.svn'):
    print "Walk current directory with function defaults."
    for fsnode in walk_file_system(os.getcwd()):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=True, exclude_dirs='.svn'):
    print "Walk current directory with yield_folders=True."
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=False, exclude_dirs='.svn'):
    print "Walk current directory with yield_folders=True, yield_files=False."
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True, yield_files=False):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=False, exclude_dirs='.svn'):
    print "Walk current directory with yield_folders=True, yield_files=False, exclude_dirs='.svn;temp'."
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True, yield_files=False, exclude_dirs='.svn;temp'):
        print fsnode
</snippet></ROW><ROW><id>10939575</id><snippet>python -m unittest discover</snippet></ROW><ROW><id>10939576</id><snippet>numpy.isnan</snippet></ROW><ROW><id>10939576</id><snippet>a=np.array([np.nan,1,2,3,4,np.nan])
mask=~np.isnan(a)
maskedA=a[mask]

#... Plot maskedA here, continue working with a as you normally would.
</snippet></ROW><ROW><id>10939786</id><snippet>__name__</snippet></ROW><ROW><id>10939786</id><snippet>&gt;&gt;&gt; type(ham).__name__
'eggs'
</snippet></ROW><ROW><id>10939786</id><snippet>type()</snippet></ROW><ROW><id>10939808</id><snippet>&gt;&gt;&gt; type(type)
&lt;class 'type'&gt;
</snippet></ROW><ROW><id>10939808</id><snippet>type</snippet></ROW><ROW><id>10939808</id><snippet>__class__</snippet></ROW><ROW><id>10939808</id><snippet>__class__</snippet></ROW><ROW><id>10939808</id><snippet>__slots__</snippet></ROW><ROW><id>10939808</id><snippet>__slots__</snippet></ROW><ROW><id>10939901</id><snippet>&gt;&gt;&gt; from jinja2 import Template
&gt;&gt;&gt; def jformat(fmt, **kwds):
...     return Template(fmt).render(**kwds)
...
&gt;&gt;&gt; jformat("{{foo[:2]}}", foo='abcd')
u'ab'
&gt;&gt;&gt; jformat("{{1+2}}")
u'3'
&gt;&gt;&gt; jformat("{{bar['blue']}} {{bar['red']}}", bar={'red':1, 'blue':2})
u'2 1'
&gt;&gt;&gt; bar={'red':1, 'blue':2}
&gt;&gt;&gt; jformat("{{blue}} {{red}}", **bar)
u'2 1'
&gt;&gt;&gt; jformat('{{"%2.5f"|format(x)}}', x=18.3)
u'18.30000'
</snippet></ROW><ROW><id>10939999</id><snippet>field2:\s(.*)
</snippet></ROW><ROW><id>10939999</id><snippet>match = re.search(r"field2:\s(.*)", subject)
if match:
    result = match.group(1)
else:
    result = ""
</snippet></ROW><ROW><id>10940038</id><snippet>load</snippet></ROW><ROW><id>10940038</id><snippet>loadtxt</snippet></ROW><ROW><id>10940038</id><snippet>fromfile</snippet></ROW><ROW><id>10940038</id><snippet>genfromtxt</snippet></ROW><ROW><id>10940038</id><snippet>file.txt</snippet></ROW><ROW><id>10940038</id><snippet>1   2   3   4
7   8   9   10  11  12
13  14  15
</snippet></ROW><ROW><id>10940038</id><snippet>rb</snippet></ROW><ROW><id>10940038</id><snippet>&gt;&gt;&gt; file = open('file.txt', 'rb')
&gt;&gt;&gt; table = [row.strip().split('\t') for row in file]
</snippet></ROW><ROW><id>10940038</id><snippet>rb</snippet></ROW><ROW><id>10940038</id><snippet>reader</snippet></ROW><ROW><id>10940038</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; file = open('file.txt', 'rb')
&gt;&gt;&gt; data = csv.reader(file, delimiter='\t')
&gt;&gt;&gt; table = [row for row in data]
</snippet></ROW><ROW><id>10940038</id><snippet>table[row][col]</snippet></ROW><ROW><id>10940038</id><snippet>&gt;&gt;&gt; table
[['1', '2', '3', '4'], ['7', '8', '9', '10', '11', '12'], ['13', '14', '15']]    
&gt;&gt;&gt; table[0]
['1', '2', '3', '4']
&gt;&gt;&gt; table[1][2]
9
</snippet></ROW><ROW><id>10940154</id><snippet>gunzip test.txt.gz | grep -m1 'a'</snippet></ROW><ROW><id>10940154</id><snippet>gzip: stdout: Broken pipe
</snippet></ROW><ROW><id>10940174</id><snippet>fruits</snippet></ROW><ROW><id>10940174</id><snippet>def findItByColor(theColor):
    array=[]
    for x in fruits: 
        if theColor in x['color']:
            try:
                array.append(x['name']+" "+ str(x['weight']))
            except KeyError:
                size = ' '.join( [ '[Weight %s Mass %s]'
                                   % (str(item['weight']),str(item['mass']))
                         for item in x['size'] ])
                array.append( x['name']+" "+ size )
    return array

print findItByColor("orange")
</snippet></ROW><ROW><id>10940174</id><snippet>['orange [1, 2]', 'pear [Weight 4 Mass 1.6] [Weight 4 Mass 2] [Weight 4 Mass 2.5]']
</snippet></ROW><ROW><id>10940174</id><snippet>print findItByColor("green")
</snippet></ROW><ROW><id>10940174</id><snippet>['apple 1', 'banana 1']
</snippet></ROW><ROW><id>10940283</id><snippet>import numpy as np,numpy.linalg

def _getAplus(A):
    eigval, eigvec = np.linalg.eig(A)
    Q = np.matrix(eigvec)
    xdiag = np.matrix(np.diag(np.maximum(eigval, 0)))
    return Q*xdiag*Q.T

def _getPs(A, W=None):
    W05 = np.matrix(W**.5)
    return  W05.I * _getAplus(W05 * A * W05) * W05.I

def _getPu(A, W=None):
    Aret = np.array(A.copy())
    Aret[W &gt; 0] = np.array(W)[W &gt; 0]
    return np.matrix(Aret)

def nearPD(A, nit=10):
    n = A.shape[0]
    W = np.identity(n) 
# W is the matrix used for the norm (assumed to be Identity matrix here)
# the algorithm should work for any diagonal W
    deltaS = 0
    Yk = A.copy()
    for k in range(nit):
        Rk = Yk - deltaS
        Xk = _getPs(Rk, W=W)
        deltaS = Xk - Rk
        Yk = _getPu(Xk, W=W)
    return Yk
</snippet></ROW><ROW><id>10940283</id><snippet>print nearPD(np.matrix([[2,-1,0,0],[-1,2,-1,0],[0,-1,2,-1],[0,0,-1,2]]),nit=10)
[[ 1.         -0.80842467  0.19157533  0.10677227]
 [-0.80842467  1.         -0.65626745  0.19157533]
 [ 0.19157533 -0.65626745  1.         -0.80842467]
 [ 0.10677227  0.19157533 -0.80842467  1.        ]]
</snippet></ROW><ROW><id>10940382</id><snippet>pip</snippet></ROW><ROW><id>10940382</id><snippet>MinGW\bin</snippet></ROW><ROW><id>10940382</id><snippet>MingGW\msys\1.0\bin</snippet></ROW><ROW><id>10940382</id><snippet>bash configure</snippet></ROW><ROW><id>10940382</id><snippet>make</snippet></ROW><ROW><id>10940382</id><snippet>libmpir.a</snippet></ROW><ROW><id>10940382</id><snippet>mpir-2.5.0\.libs</snippet></ROW><ROW><id>10940382</id><snippet>C:\Python2.7.1\libs</snippet></ROW><ROW><id>10940382</id><snippet>distutils</snippet></ROW><ROW><id>10940382</id><snippet>C:\Python2.7.1\Lib\distutils\cygwincompiler.py</snippet></ROW><ROW><id>10940382</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>10940382</id><snippet>CPPFLAGS</snippet></ROW><ROW><id>10940382</id><snippet>mpir.h</snippet></ROW><ROW><id>10940382</id><snippet>setup.py</snippet></ROW><ROW><id>10940382</id><snippet>build_extension</snippet></ROW><ROW><id>10940382</id><snippet>bash configure</snippet></ROW><ROW><id>10940382</id><snippet>python setup.py build -c mingw32</snippet></ROW><ROW><id>10940382</id><snippet>python setup.py test</snippet></ROW><ROW><id>10940382</id><snippet>python setup.py install</snippet></ROW><ROW><id>10940382</id><snippet>python setup.py bdist_wininst</snippet></ROW><ROW><id>10940459</id><snippet>import numpy as np

# create example file
np.arange(256).astype('uint8').tofile('uint8_file.bin')

# read example file and convert to uint16
u1 = np.fromfile('uint8_file.bin', 'uint8')
u2 = u1.astype('uint16')
u2 *= 257  # scale to full 16 bit range
u2.tofile('uint16_file.bin')
</snippet></ROW><ROW><id>10940462</id><snippet>module itime

contains

subroutine itimes(th)
  use fd
  implicit none
  real(dp) th

  write(*,*) 'th - it',th
  call lprsmf(th)
end subroutine itimes

end module
</snippet></ROW><ROW><id>10940462</id><snippet>gfortran -c fd.f90
c:\python27_w32\python.exe c:\python27_w32\scripts\f2py.py -c -m it --compiler=mingw32 fd.f90 itimes.f90
</snippet></ROW><ROW><id>10940462</id><snippet>import it

th = 200
it.itime.itimes(th)
</snippet></ROW><ROW><id>10940462</id><snippet> th - it   200.00000000000000     
 th - fd   200.00000000000000     
</snippet></ROW><ROW><id>10940492</id><snippet>sendCommand</snippet></ROW><ROW><id>10940492</id><snippet>"""</snippet></ROW><ROW><id>10940492</id><snippet>dataForPost = {'access_token' : '____',  
               'batch' : """[
               {
                "method": "POST",
                "relative_url": "6004251715639",
                "body": "redownload=1&amp;max_bid=35"
               },
               {
                "method": "POST",
                "relative_url": "6004251716039",
                "body": "redownload=1&amp;max_bid=35"
               },
               {
                "method": "POST",
                "relative_url": "6004251715839",
                "body": "redownload=1&amp;max_bid=35"
               }
              ]""".replace('\n', '').replace('\t', '').replace(' ', '')}
</snippet></ROW><ROW><id>10940506</id><snippet>https://www.google.com/m8/feeds/contacts/&lt;email&gt;/base/&lt;contactId&gt;
</snippet></ROW><ROW><id>10940506</id><snippet>&lt;email&gt;</snippet></ROW><ROW><id>10940506</id><snippet>contactId</snippet></ROW><ROW><id>10940506</id><snippet>https</snippet></ROW><ROW><id>10940506</id><snippet>http</snippet></ROW><ROW><id>10940550</id><snippet>charset='utf8'</snippet></ROW><ROW><id>10940550</id><snippet>connect()</snippet></ROW><ROW><id>10940741</id><snippet>numpy</snippet></ROW><ROW><id>10940741</id><snippet>import numpy as np

myList = ['a','b','c','d']
toRemove = [0,2]

new_list = np.delete(myList, toRemove)
</snippet></ROW><ROW><id>10940741</id><snippet>&gt;&gt;&gt; new_list
array(['b', 'd'], 
      dtype='|S1')
</snippet></ROW><ROW><id>10940741</id><snippet>new_list</snippet></ROW><ROW><id>10940741</id><snippet>numpy</snippet></ROW><ROW><id>10940741</id><snippet>array</snippet></ROW><ROW><id>10940814</id><snippet>class DataLogger(object):
  def __init__(self):
      # do init stuff

  def startlog(self, t):
      # start the log 


class Heater(DataLogger):
   def __init__(self):
      # do some stuff before initing your dataLogger
      super(Heater, self).__init__() # init the DataLogger
   #other functions
</snippet></ROW><ROW><id>10940814</id><snippet>h1 = Heater()
h1.startlog(5)
h1.do_other_stuff()
</snippet></ROW><ROW><id>10940814</id><snippet>class DataLoggerMixin(object): 
  def __init__(self):
    # do your init things
    super(DataLogger, this).__init__()  # this will trigger the next __init__ call in the inheritance chain (i.e. whatever you mix it with)

class Heater(object):
    """ Here's a heater you have lying around that doesn't do data logging.  No need to change it."""

# add a new child class with 2 lines, that includes the DataLoggerMixin as the first parent class, and you will have a new class with all the DataLogging functionality and the Heater functionality. 
class LoggingHeater(DataLoggerMixin, Heater):
    """ Now its a data logging heater """
    pass  # no further code should be necessary if you list DataLoggerMixin first in the base classes. 


&gt;&gt;&gt; logging_heater = LoggingHeater()
&gt;&gt;&gt; logging_heater.start_log(5)
&gt;&gt;&gt; logging_heater.do_heater_stuff()
</snippet></ROW><ROW><id>10940814</id><snippet>____________________________________________________________________
</snippet></ROW><ROW><id>10940814</id><snippet>class DataLogger(object)
  def __init__(self, object_to_log)
    self.object = object_to_log   # now you have access to self.object in all your methods.
    # Record measurements and controls in a database
  def start(self,t)
    # Starts a new thread to aqcuire and reccord measuements every t secconds
</snippet></ROW><ROW><id>10940814</id><snippet>h1 = Heater() 
log = DataLogger(h1)
log.start(60)
h1.set_power(10,100)
h1.turn_on()
sleep(10)
h1.turn_off()
</snippet></ROW><ROW><id>10940872</id><snippet>short = [x for x in appliances if 'v' in x]
</snippet></ROW><ROW><id>10941092</id><snippet>id()</snippet></ROW><ROW><id>10941092</id><snippet>out=[[0]*3]*3
id(out[0])
&gt;&gt;&gt; 140503648365240
id(out[1])
&gt;&gt;&gt; 140503648365240
id(out[2])
&gt;&gt;&gt; 140503648365240
</snippet></ROW><ROW><id>10941092</id><snippet>out = [ [()]*3 for i in range(3) ]
</snippet></ROW><ROW><id>10941092</id><snippet>out = [ [0]*3 for i in range(3) ]
</snippet></ROW><ROW><id>10941132</id><snippet>goal = ['&lt;li&gt;{0}&lt;/li&gt;'.format(x) for x in l]
</snippet></ROW><ROW><id>10941193</id><snippet>communicate</snippet></ROW><ROW><id>10941193</id><snippet>stdout</snippet></ROW><ROW><id>10941210</id><snippet># a recursive function to flatten arbitrary nested lists into one simple 1D list
def flatten(inlist,outlist):   
    for e in inlist:
        if isinstance(e,list) :
            flatten(e,outlist)
        else:
            outlist.append(e)
</snippet></ROW><ROW><id>10941237</id><snippet>e = [(1,), (2,), (3,)]
[i[0] for i in e]
</snippet></ROW><ROW><id>10941237</id><snippet>[1, 2, 3]
</snippet></ROW><ROW><id>10941321</id><snippet>lines</snippet></ROW><ROW><id>10941321</id><snippet>lines.sort(key=lambda line: line.split()[4])
</snippet></ROW><ROW><id>10941569</id><snippet>request.args</snippet></ROW><ROW><id>10941569</id><snippet>request.form</snippet></ROW><ROW><id>10941569</id><snippet>request.values</snippet></ROW><ROW><id>10941569</id><snippet>request.files</snippet></ROW><ROW><id>10941569</id><snippet>KeyError</snippet></ROW><ROW><id>10941569</id><snippet>{}["test"]</snippet></ROW><ROW><id>10941569</id><snippet>request</snippet></ROW><ROW><id>10941569</id><snippet>KeyError</snippet></ROW><ROW><id>10941569</id><snippet>HTTPException</snippet></ROW><ROW><id>10941569</id><snippet>request.files['xhr2upload']</snippet></ROW><ROW><id>10941569</id><snippet>&lt;input type="file"&gt;</snippet></ROW><ROW><id>10941569</id><snippet>request.files['xhr2upload']</snippet></ROW><ROW><id>10941569</id><snippet>request.files['file']</snippet></ROW><ROW><id>10941569</id><snippet>xhr2upload</snippet></ROW><ROW><id>10941569</id><snippet>KeyError</snippet></ROW><ROW><id>10941569</id><snippet>.get</snippet></ROW><ROW><id>10941569</id><snippet>request.form["not_here"] # KeyError -&gt; 400 Bad Request

request.form.get("might_be_here") # Value if provided, else None
</snippet></ROW><ROW><id>10941574</id><snippet>request.url</snippet></ROW><ROW><id>10941574</id><snippet>request.path_info</snippet></ROW><ROW><id>10941613</id><snippet>import timeit
import random

with open('/usr/share/dict/words','r') as di:  # UNIX 250k unique word list 
    all_words_set={line.strip() for line in di}

all_words_list=list(all_words_set)    # slightly faster if this list is sorted...      

test_list=[random.choice(all_words_list) for i in range(10000)] 
test_set=set(test_list)

def set_f():
    count = 0
    for word in test_set:
        if word in all_words_set: 
           count+=1
    return count

def list_f():
    count = 0
    for word in test_list:
        if word in all_words_list: 
           count+=1
    return count

def mix_f():
    # use list for source, set for membership testing
    count = 0
    for word in test_list:
        if word in all_words_set: 
           count+=1
    return count    

print "list:", timeit.Timer(list_f).timeit(1),"secs"
print "set:", timeit.Timer(set_f).timeit(1),"secs" 
print "mixed:", timeit.Timer(mix_f).timeit(1),"secs" 
</snippet></ROW><ROW><id>10941613</id><snippet>list: 47.4126560688 secs
set: 0.00277495384216 secs
mixed: 0.00166988372803 secs
</snippet></ROW><ROW><id>10941776</id><snippet>func(1819)</snippet></ROW><ROW><id>10941776</id><snippet>1819
5458
2729
</snippet></ROW><ROW><id>10941776</id><snippet>851290
425645
1276936
[...]
IndexError: list index out of range
</snippet></ROW><ROW><id>10941776</id><snippet>def func_with_dict(i) :
    k=1
    a = i
    arr = {}
    while (i&gt;1):    
        print i
        if i in arr:
            k = k + arr[i] - 1
            break
        if i%2 == 0:
            i = i/2
        else:
            i = 3*i + 1
        k += 1
        arr[a] = k
    return k
</snippet></ROW><ROW><id>10941776</id><snippet>1819
5458
2729
8188
[...]
851290
425645
1276936
638468
319234
[...]
20
10
5
16
8
4
2
</snippet></ROW><ROW><id>10941776</id><snippet>arr</snippet></ROW><ROW><id>10941971</id><snippet>#!/usr/bin/python
from twisted.internet import reactor

from twisted.internet import protocol

class Echo(protocol.Protocol):
    def connectionMade(self):
        self.pp = MyPP()
        reactor.spawnProcess(self.pp, 'cat', ['cat'])
    def dataReceived(self, data):
        self.pp.transport.write(data)
    def connectionLost(self, reason):
        self.pp.transport.loseConnection()

class MyPP(protocol.ProcessProtocol):
    def connectionMade(self):
        print "connectionMade!"
    def outReceived(self, data):
        print "out", data,
    def errReceived(self, data):
        print "error", data,
    def processExited(self, reason):
        print "processExited"
    def processEnded(self, reason):
        print "processEnded"
        print "quitting"

factory = protocol.Factory()
factory.protocol = Echo
reactor.listenTCP(8200, factory)
reactor.run()
</snippet></ROW><ROW><id>10942241</id><snippet>inventory = {'cows': 4, 'pigs': 3, 'chickens': 5, 'bears': 2}
print(type(inventory))
</snippet></ROW><ROW><id>10942241</id><snippet>&lt;class 'dict'&gt;</snippet></ROW><ROW><id>10942241</id><snippet>aList = [ 'hunger', 'anger', 'burger']
print(aList)
</snippet></ROW><ROW><id>10942241</id><snippet>['hunger', 'anger', 'burger']
</snippet></ROW><ROW><id>10942283</id><snippet>script: template-123.py
</snippet></ROW><ROW><id>10942337</id><snippet>def shortest_of(lists):
    return min(lists, key=len)

def contains_sublist(lst, sublst):
    n = len(sublst)
    return any((sublst == lst[i:i+n]) for i in xrange(len(lst)-n+1)) 

def longest_common(lists):
    if not lists:
        return ()
    res = set()    
    base = shortest_of(lists)
    length = len(base)

    for i in xrange(length, 0, -1):
        for j in xrange(length - i + 1):
            candidate = ', ' + str(base[j:i+j]).strip('[]') + ','
            #candidate = base[j:i+j]  

            for alist in lists:
                if not candidate in ', ' + str(alist).strip('[]') + ',':
                #if not contains_sublist(alist, candidate):   
                    break
            else:
                res.add(tuple([int(a) for a in candidate[2:-1].split(',')]))
                #res.add(tuple(candidate))

        if res:
            return tuple(res)    

    return ()

if __name__ == '__main__':
    a = [1,0,2,5,4,3,1]
    b = [1,2,5,4,3,0,1]
    c = [1,3,5,4,2,0,1]

    print longest_common([a,b,c])
    print longest_common([b,c])
</snippet></ROW><ROW><id>10942337</id><snippet>((5, 4),)
((0, 1), (5, 4))
</snippet></ROW><ROW><id>10942378</id><snippet>&gt;&gt;&gt; 5 * (3 + 2)
25
</snippet></ROW><ROW><id>10942378</id><snippet>b=(a)
</snippet></ROW><ROW><id>10942378</id><snippet>b = a 
</snippet></ROW><ROW><id>10942378</id><snippet>b is a</snippet></ROW><ROW><id>10942378</id><snippet>True</snippet></ROW><ROW><id>10942378</id><snippet>b</snippet></ROW><ROW><id>10942378</id><snippet>b = a, 
</snippet></ROW><ROW><id>10942378</id><snippet>()</snippet></ROW><ROW><id>10942378</id><snippet>c = (a, 1)
</snippet></ROW><ROW><id>10942378</id><snippet>a = ()</snippet></ROW><ROW><id>10942378</id><snippet>c = ((), 1)
</snippet></ROW><ROW><id>10942378</id><snippet>1</snippet></ROW><ROW><id>10942378</id><snippet>()</snippet></ROW><ROW><id>10942378</id><snippet>[]</snippet></ROW><ROW><id>10942378</id><snippet>c = (), 1
</snippet></ROW><ROW><id>10942378</id><snippet>repr</snippet></ROW><ROW><id>10942378</id><snippet>str</snippet></ROW><ROW><id>10942481</id><snippet>#!/usr/bin/env python
import paramiko
import select
client = paramiko.SSHClient()
client.load_system_host_keys()
client.connect('host.example.com')
transport = client.get_transport()
channel = transport.open_session()
channel.exec_command(COMMAND)
while True:
  rl, wl, xl = select.select([channel],[],[],0.0)
  if len(rl) &gt; 0:
      # Must be stdout
      print channel.recv(1024)
</snippet></ROW><ROW><id>10942535</id><snippet>my_list = [[u'polySurface5.e[4]', u'polySurface5.e[1]', .5], [u'polySurface5.e[8]', u'polySurface5.e[2]', .9], [u'polySurface5.e[1]', u'polySurface5.e[4]', .5], [u'polySurface5.e[2]', u'polySurface5.e[9]', 1.2], [u'polySurface5.e[2]', u'polySurface5.e[2]', 0] ]

new_list = []
my_set = set()
for sublist in my_list:
    if sublist[2] != 0:
        frozen_sub = frozenset(sublist)
        if not frozen_sub in my_set:
            new_list.append(sublist)
            my_set.add(frozen_sub)
</snippet></ROW><ROW><id>10942535</id><snippet>&gt;&gt;&gt; new_list
[[u'polySurface5.e[4]', u'polySurface5.e[1]', 0.5], [u'polySurface5.e[8]', u'polySurface5.e[2]', 0.9], [u'polySurface5.e[2]', u'polySurface5.e[9]', 1.2]]
</snippet></ROW><ROW><id>10942535</id><snippet>list</snippet></ROW><ROW><id>10942535</id><snippet>my_list</snippet></ROW><ROW><id>10942535</id><snippet>list</snippet></ROW><ROW><id>10942535</id><snippet>object</snippet></ROW><ROW><id>10942535</id><snippet>list</snippet></ROW><ROW><id>10942535</id><snippet>&gt;&gt;&gt; list((1,2,3))
[1, 2, 3]
&gt;&gt;&gt; list = [3,4,5]
&gt;&gt;&gt; list((6,7,8))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
</snippet></ROW><ROW><id>10942535</id><snippet>set</snippet></ROW><ROW><id>10942535</id><snippet>&gt;&gt;&gt; set([1,2,2,4,4])
set([1, 2, 4])
&gt;&gt;&gt; set([1,2,4]) == set([4,4,4,1,2])
True
</snippet></ROW><ROW><id>10942535</id><snippet>frozenset</snippet></ROW><ROW><id>10942535</id><snippet>set</snippet></ROW><ROW><id>10942535</id><snippet>frozenset</snippet></ROW><ROW><id>10942535</id><snippet>frozenset</snippet></ROW><ROW><id>10942535</id><snippet>frozenset</snippet></ROW><ROW><id>10942535</id><snippet>set</snippet></ROW><ROW><id>10942535</id><snippet>fozenset</snippet></ROW><ROW><id>10942535</id><snippet>&gt;&gt;&gt; b = set([1,2,3])
&gt;&gt;&gt; b.add(6)
&gt;&gt;&gt; b
set([1, 2, 3, 6])
&gt;&gt;&gt; d = frozenset([1,2,3])
&gt;&gt;&gt; d.add(6)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'frozenset' object has no attribute 'add'
</snippet></ROW><ROW><id>10942535</id><snippet>&gt;&gt;&gt; b = set([1,2])
&gt;&gt;&gt; d = set([5,3])
&gt;&gt;&gt; g = set([b,d])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'set'
&gt;&gt;&gt; b = frozenset([1,2])
&gt;&gt;&gt; d = frozenset([5,3])
&gt;&gt;&gt; g = set([b,d])
&gt;&gt;&gt; g
set([frozenset([1, 2]), frozenset([3, 5])])
</snippet></ROW><ROW><id>10942766</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>10942766</id><snippet>None</snippet></ROW><ROW><id>10942766</id><snippet>[]</snippet></ROW><ROW><id>10942766</id><snippet>l = ['100 ug/ml', '50 ug/ml', '25 ug/ml', '12.5 ug/ml', '6.25 ug/ml',
     '3.125 ug/ml', '1.5625 ug/ml', '0 ug/ml']

growth_data = dict.fromkeys(l, '')
</snippet></ROW><ROW><id>10942998</id><snippet>#!/usr/bin/env python
import code
import sys

LINE_NUMBER=0

def reset_linenum():
    global LINE_NUMBER
    LINE_NUMBER=-1

def resettable_REPL():
    global LINE_NUMBER
    BUFFERED_LINES=[]
    ii=code.InteractiveInterpreter({"reset_linenum":reset_linenum})
    while True:
        try:
            BUFFERED_LINES.append(raw_input("!"+sys.ps1)+'\n')
            while (BUFFERED_LINES[-1][:1] in " \t" or
                   ii.runsource("\n"*LINE_NUMBER+"".join(BUFFERED_LINES), "console")):
                BUFFERED_LINES.append(raw_input("!"+sys.ps2)+'\n')
            LINE_NUMBER+=len(BUFFERED_LINES)
            BUFFERED_LINES=[]
        except EOFError:
            break

if __name__=='__main__':
    resettable_REPL()
</snippet></ROW><ROW><id>10942998</id><snippet>reset_linenum()</snippet></ROW><ROW><id>10942998</id><snippet>!!!&gt; print "hello"              # line 1
hello
!!!&gt; def badfunc():             # line 2
!...     raise Exception("doh") # line 3
!!!&gt; badfunc()                  # line 4
Traceback (most recent call last):
  File "console", line 4, in &lt;module&gt;
  File "console", line 3, in badfunc
Exception: doh
!!!&gt; ?                          # line 5
  File "console", line 5
    ?
    ^
SyntaxError: invalid syntax
!!!&gt; reset_linenum()            # RESET
!!!&gt; raise Exception("!")       # line 1
Traceback (most recent call last):
  File "console", line 1, in &lt;module&gt;
Exception: !
!!!&gt; 
</snippet></ROW><ROW><id>10943132</id><snippet>browser.implicitly_wait(10)
</snippet></ROW><ROW><id>10943326</id><snippet>br.submit()</snippet></ROW><ROW><id>10943326</id><snippet>br.select_form(nr=0)</snippet></ROW><ROW><id>10943451</id><snippet>a</snippet></ROW><ROW><id>10943451</id><snippet>a.max</snippet></ROW><ROW><id>10943451</id><snippet>np.max</snippet></ROW><ROW><id>10943451</id><snippet>a.max</snippet></ROW><ROW><id>10943451</id><snippet>max</snippet></ROW><ROW><id>10943451</id><snippet>np.ndarray</snippet></ROW><ROW><id>10943451</id><snippet>a.max</snippet></ROW><ROW><id>10943451</id><snippet>list</snippet></ROW><ROW><id>10943451</id><snippet>np.ndarray</snippet></ROW><ROW><id>10943451</id><snippet>max</snippet></ROW><ROW><id>10943528</id><snippet>indexes:
- kind: UserImage
  properties:
  - name: user
  - name: votes
    direction: desc

- kind: UserImage
  properties:
  - name: user
  - name: creation_date
    direction: desc    
</snippet></ROW><ROW><id>10943545</id><snippet>reindex</snippet></ROW><ROW><id>10943545</id><snippet>[0, 1, 2]</snippet></ROW><ROW><id>10943545</id><snippet>reindex([2, 1, 0])</snippet></ROW><ROW><id>10943545</id><snippet>reindex([8, 9, 10])</snippet></ROW><ROW><id>10943545</id><snippet>NaN</snippet></ROW><ROW><id>10943545</id><snippet>df.index = df['dtstamp']</snippet></ROW><ROW><id>10943640</id><snippet>make</snippet></ROW><ROW><id>10943640</id><snippet>make</snippet></ROW><ROW><id>10943704</id><snippet>...
'environment_args': {'extensions': ['jinja2.ext.i18n', 
                                    'jinja2htmlcompress.SelectiveHTMLCompress']}
...
</snippet></ROW><ROW><id>10943704</id><snippet>config</snippet></ROW><ROW><id>10943704</id><snippet>'webapp2_extras.sessions'</snippet></ROW><ROW><id>10944103</id><snippet>scrapy runspider foo &amp;
scrapy runspider bar
</snippet></ROW><ROW><id>10944103</id><snippet>chmod +x script_name</snippet></ROW><ROW><id>10944103</id><snippet>crontab -e</snippet></ROW><ROW><id>10944103</id><snippet>* */6 * * * path/to/shell/script_name &gt;&gt; path/to/file.log
</snippet></ROW><ROW><id>10944136</id><snippet>dt = dt_tz.replace(tzinfo=None)</snippet></ROW><ROW><id>10944484</id><snippet>import re
valid = re.match('^[\w-]+$', str) is not None
</snippet></ROW><ROW><id>10944857</id><snippet>name</snippet></ROW><ROW><id>10944857</id><snippet>rdb, temp = name.split('_', 1)
master, db = temp.rsplit('_', 1)
</snippet></ROW><ROW><id>10944857</id><snippet>db</snippet></ROW><ROW><id>10944857</id><snippet>VALID_DB = ('mysql', 'postgres', 'mongodb', 'mssql', 'bdb')
if db in VALID_DB:
   ...
</snippet></ROW><ROW><id>10944857</id><snippet>rdb, master, db</snippet></ROW><ROW><id>10944965</id><snippet>string-escape</snippet></ROW><ROW><id>10944965</id><snippet>&gt;&gt;&gt; escaped_data = '\\x50\\x51'
&gt;&gt;&gt; escaped_data.decode('string-escape')
'PQ'
</snippet></ROW><ROW><id>10944965</id><snippet>string-escape</snippet></ROW><ROW><id>10944965</id><snippet>unicode_escape</snippet></ROW><ROW><id>10944965</id><snippet>bytes</snippet></ROW><ROW><id>10944965</id><snippet>&gt;&gt;&gt; escaped_data = b'\\x50\\x51'
&gt;&gt;&gt; escaped_data.decode("unicode_escape")
'PQ'
</snippet></ROW><ROW><id>10944965</id><snippet>str</snippet></ROW><ROW><id>10944965</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; escaped_data = '\\x50\\x51'
&gt;&gt;&gt; codecs.decode(escaped_data, "unicode_escape")
'PQ'
</snippet></ROW><ROW><id>10945263</id><snippet>sample_8_1/</snippet></ROW><ROW><id>10945263</id><snippet>dire.find(name+'/')</snippet></ROW><ROW><id>10945719</id><snippet>-I</snippet></ROW><ROW><id>10945719</id><snippet>-L</snippet></ROW><ROW><id>10945719</id><snippet>gcc -I/usr/include/python2.7 myfile.c
</snippet></ROW><ROW><id>10946069</id><snippet>compute_importances</snippet></ROW><ROW><id>10946193</id><snippet> with open(infile) as fp:
    indata = fp.read()
</snippet></ROW><ROW><id>10946193</id><snippet>with</snippet></ROW><ROW><id>10946193</id><snippet> with open(infile) as fp: indata = fp.read()
</snippet></ROW><ROW><id>10946193</id><snippet>with</snippet></ROW><ROW><id>10946193</id><snippet>with open(input, 'r') as infile, open(output, 'w') as outfile:
    # use infile, outfile
</snippet></ROW><ROW><id>10946261</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/asyncore.py</snippet></ROW><ROW><id>10946261</id><snippet>use_poll</snippet></ROW><ROW><id>10946261</id><snippet>False</snippet></ROW><ROW><id>10946261</id><snippet>True</snippet></ROW><ROW><id>10946261</id><snippet>def loop(timeout=30.0, use_poll=False, map=None, count=None):
</snippet></ROW><ROW><id>10946261</id><snippet>def loop(timeout=30.0, use_poll=True, map=None, count=None):
</snippet></ROW><ROW><id>10946381</id><snippet>execute()</snippet></ROW><ROW><id>10946381</id><snippet>conn.execute("DELETE FROM temporary_data_key WHERE key={0}".format(guid))
</snippet></ROW><ROW><id>10946381</id><snippet>conn.execute("DELETE FROM temporary_data_key WHERE key={0}".format(guid)
</snippet></ROW><ROW><id>10946713</id><snippet>help(ginput)</snippet></ROW><ROW><id>10946713</id><snippet>n=0</snippet></ROW><ROW><id>10946713</id><snippet>timeout=0</snippet></ROW><ROW><id>10946713</id><snippet>import pylab
x = randn(10,10)
imshow(x)
points = ginput(0, 0)
# Select the points defining your region from the
# plot then middle click to terminate ginput.
</snippet></ROW><ROW><id>10947203</id><snippet>import datetime
import pytz

now = datetime.now(pytz.utc)
# datetime.datetime(2012, 6, 8, 10, 31, 58, 493905, tzinfo=&lt;UTC&gt;)

[tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 9]
# ['Atlantic/Cape_Verde']

[tz for tz in pytz.common_timezones_set if now.astimezone(pytz.timezone(tz)).hour == 12]
# returns a list of 45 timezones, 'Europe/Oslo' included
</snippet></ROW><ROW><id>10947250</id><snippet>sorted(glob.glob('*.dat'), key=lambda x: int(x.split('.')[0][4:]))
</snippet></ROW><ROW><id>10947291</id><snippet>time.sleep(10)
</snippet></ROW><ROW><id>10947503</id><snippet>scrapyd</snippet></ROW><ROW><id>10947503</id><snippet>scrapyd</snippet></ROW><ROW><id>10947503</id><snippet>scrapy server
</snippet></ROW><ROW><id>10947503</id><snippet>twistd -ny extras/scrapyd.tac
</snippet></ROW><ROW><id>10947683</id><snippet>plt.ylim(min(oy),max(oy))
plt.xlim(min(ox),max(ox))
</snippet></ROW><ROW><id>10948117</id><snippet>&gt;&gt;&gt; with open("c:\\tmp\\test.txt", "w") as myFile:
...   myFile.write(someString + r'\r\n\ ')
</snippet></ROW><ROW><id>10948117</id><snippet>someString</snippet></ROW><ROW><id>10948117</id><snippet>Hallo\r\n\_</snippet></ROW><ROW><id>10948117</id><snippet>_</snippet></ROW><ROW><id>10948117</id><snippet>&gt;&gt;&gt; with open("c:\\tmp\\test.txt", "w") as myFile:
...   myFile.write(someString + r'\r\n\ '[:-1])
</snippet></ROW><ROW><id>10948117</id><snippet>Hallo\r\n\</snippet></ROW><ROW><id>10948173</id><snippet>__dict__</snippet></ROW><ROW><id>10948173</id><snippet>&gt;&gt;&gt; class B(object): 
       pass
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.b = 6
&gt;&gt;&gt; b.b
6
&gt;&gt;&gt; b.__dict__ = {}
&gt;&gt;&gt; b.b
Traceback (most recent call last):
  File "&lt;pyshell#57&gt;", line 1, in &lt;module&gt;
    b.b
AttributeError: 'B' object has no attribute 'b'
</snippet></ROW><ROW><id>10948310</id><snippet>map = np.zeros((spec_cube.shape[1],spec_cube.shape[2])) # This will be the power index map
x = scale_array
for i in np.mgrid[1:spec_cupe.shape[0]]:
  spec_cube[i-1] = (spec_cube[i]-spec_cube[i-1])/(scale_array[i]-scale_array[i-1])
  map += spec_cube[i-1]
map /= (spec_cube.shape[0]-1)
</snippet></ROW><ROW><id>10948382</id><snippet>    list1.append([i2[0],dict1[i2[0]]]) 
</snippet></ROW><ROW><id>10948382</id><snippet>    list1.append([i2[0],dict1[i2[0]][:]])
</snippet></ROW><ROW><id>10948382</id><snippet>[:]</snippet></ROW><ROW><id>10948382</id><snippet>i2[0]</snippet></ROW><ROW><id>10948591</id><snippet>DataFrame.from_records([(int(word['x1']), int(word['x2']))
                        for word in soup.page.findAll('word')],
                       columns=('x1', 'x2'))
</snippet></ROW><ROW><id>10948706</id><snippet>?</snippet></ROW><ROW><id>10948706</id><snippet>In [2]: c_?
Type:       CClass
Base Class: &lt;class 'numpy.lib.index_tricks.CClass'&gt;
String Form:&lt;numpy.lib.index_tricks.CClass object at 0x9a848cc&gt;
Namespace:  Interactive
Length:     0
File:       /usr/lib/python2.7/dist-packages/numpy/lib/index_tricks.py
Docstring:
Translates slice objects to concatenation along the second axis.

This is short-hand for ``np.r_['-1,2,0', index expression]``, which is
useful because of its common occurrence. In particular, arrays will be
stacked along their last axis after being upgraded to at least 2-D with
1's post-pended to the shape (column vectors made out of 1-D arrays).

For detailed documentation, see `r_`.

Examples
--------
&gt;&gt;&gt; np.c_[np.array([[1,2,3]]), 0, 0, np.array([[4,5,6]])]
array([[1, 2, 3, 0, 0, 4, 5, 6]])
</snippet></ROW><ROW><id>10948843</id><snippet>SET_CLIENT_ID

    This sets the worker ID in a job server so monitoring and reporting
    commands can uniquely identify the various workers, and different
    connections to job servers from the same worker.
</snippet></ROW><ROW><id>10948942</id><snippet>.Layout()</snippet></ROW><ROW><id>10948942</id><snippet>self.Layout()</snippet></ROW><ROW><id>10948942</id><snippet>wx.ALL</snippet></ROW><ROW><id>10948942</id><snippet>Layout</snippet></ROW><ROW><id>10949446</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>10949446</id><snippet>read()</snippet></ROW><ROW><id>10949446</id><snippet>headers</snippet></ROW><ROW><id>10949446</id><snippet>import urllib2
f = urllib2.urlopen('http://www.google.com')

&gt;&gt;&gt; print f.headers
Date: Fri, 08 Jun 2012 12:57:25 GMT
Expires: -1
Cache-Control: private, max-age=0
Content-Type: text/html; charset=ISO-8859-1
Server: gws
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Connection: close

&gt;&gt;&gt; print f.read()
&lt;!doctype html&gt;&lt;html itemscope itemtype="http://schema.org/WebPage"&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"&gt;
... etc ...
</snippet></ROW><ROW><id>10949895</id><snippet>DictVectorizer</snippet></ROW><ROW><id>10949895</id><snippet>samples = [['asdf', '1'], ['asdf', '0']]
# turn the samples into dicts
samples = [dict(enumerate(sample)) for sample in samples]

# turn list of dicts into a numpy array
vect = DictVectorizer(sparse=False)
X = vect.fit_transform(samples)

clf = DecisionTreeClassifier()
clf.fit(X, ['2', '3'])
</snippet></ROW><ROW><id>10949895</id><snippet>vect.transform</snippet></ROW><ROW><id>10950090</id><snippet>sum(l[-1] for l in list)
</snippet></ROW><ROW><id>10950090</id><snippet>sum(sum(l[-1] for l in list) for list in lists)
</snippet></ROW><ROW><id>10950090</id><snippet>sum(l[-1] for l in list for list in lists)
</snippet></ROW><ROW><id>10950090</id><snippet>cumsum = 0
for list in lists:
   cumsum += sum(l[1] for l in list)
   print(cumsum)
</snippet></ROW><ROW><id>10950213</id><snippet>ctype, (codename, name)</snippet></ROW><ROW><id>10950213</id><snippet>(ctype, (codename, name))</snippet></ROW><ROW><id>10950213</id><snippet>searched_perms</snippet></ROW><ROW><id>10950213</id><snippet>ctype</snippet></ROW><ROW><id>10950213</id><snippet>codename</snippet></ROW><ROW><id>10950213</id><snippet>name</snippet></ROW><ROW><id>10950377</id><snippet>kill 100
</snippet></ROW><ROW><id>10950702</id><snippet>ConnectionHandler</snippet></ROW><ROW><id>10950702</id><snippet>class ConnectionHandler(SockJSConnection):
    def __init__(self, *args, **kwargs):
        super(ConnectionHandler, self).__init__(*args, **kwargs)
        self.client = brukva.Client()
        self.client.connect()
        self.client.subscribe('some_channel')

    def on_open(self, info):
        self.client.listen(self.on_chan_message)

    def on_message(self, msg):
        # this is a message broadcast from the client
        # handle it as necessary (this implementation ignores them)
        pass

    def on_chan_message(self, msg):
        # this is a message received from redis
        # send it to the client
        self.send(msg.body)

    def on_close(self):
        self.client.unsubscribe('text_stream')
        self.client.disconnect()
</snippet></ROW><ROW><id>10950702</id><snippet>import redis
r = redis.Redis()
r.publish('text_channel', 'oh hai!')
</snippet></ROW><ROW><id>10950787</id><snippet>bottle.run()</snippet></ROW><ROW><id>10950787</id><snippet>bottle.run()</snippet></ROW><ROW><id>10950787</id><snippet>request</snippet></ROW><ROW><id>10951295</id><snippet>d(A, B)</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>sqrt(2)</snippet></ROW><ROW><id>10951295</id><snippet>d(A, B)</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>r</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>r</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>p</snippet></ROW><ROW><id>10951295</id><snippet>A</snippet></ROW><ROW><id>10951295</id><snippet>B</snippet></ROW><ROW><id>10951295</id><snippet>q</snippet></ROW><ROW><id>10951316</id><snippet>__rmul__</snippet></ROW><ROW><id>10951316</id><snippet>__mul__</snippet></ROW><ROW><id>10951316</id><snippet>MyNumericClass</snippet></ROW><ROW><id>10951316</id><snippet>complex</snippet></ROW><ROW><id>10951367</id><snippet>float</snippet></ROW><ROW><id>10951367</id><snippet>numpy.float</snippet></ROW><ROW><id>10951367</id><snippet>numpy.float64</snippet></ROW><ROW><id>10951367</id><snippet>dtype</snippet></ROW><ROW><id>10951367</id><snippet>numpy.float32</snippet></ROW><ROW><id>10951367</id><snippet>numpy.allclose()</snippet></ROW><ROW><id>10951367</id><snippet>True</snippet></ROW><ROW><id>10951442</id><snippet>__in</snippet></ROW><ROW><id>10951442</id><snippet>Player.objects.order_by('-cup_points').exclude(pk__in=[1,2,3,4])
</snippet></ROW><ROW><id>10951462</id><snippet>&gt;&gt;&gt; result=_
</snippet></ROW><ROW><id>10951462</id><snippet>_</snippet></ROW><ROW><id>10951462</id><snippet>&gt;&gt;&gt; iter(range(10))
&lt;listiterator object at 0x10ebcccd0&gt;
&gt;&gt;&gt; result=_
&gt;&gt;&gt; result
&lt;listiterator object at 0x10ebcccd0&gt;
&gt;&gt;&gt; list(result)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10951462</id><snippet>repr(_)</snippet></ROW><ROW><id>10951766</id><snippet>.qrc</snippet></ROW><ROW><id>10951766</id><snippet>pixmap = QPixMap(':/images/filename.jpg')
</snippet></ROW><ROW><id>10951766</id><snippet>&lt;RCC&gt;
  &lt;qresource prefix="/images"&gt;
    &lt;file alias='filename.jpg'&gt;images/filename.jpg&lt;/file&gt;
  &lt;/qresource&gt;
&lt;/RCC&gt;
</snippet></ROW><ROW><id>10951766</id><snippet>pyrcc4 -o images_rc.py images.qrc
</snippet></ROW><ROW><id>10951922</id><snippet>def sum_up(id, list):
    counted = len(list)
    summed = sum(list)
    avrg = summed/counted
    # print, insert or do whatever needed with the lines:
    print counted, summed, avrg

last_id = None
current = []
for line in file:
    (id, value) = line.split()
    if last_id != id:
        if last_id is not None:
            # evaluate last id
            sum_up(last_id, current)
            current = []
        # remember id
        last_id = id
    # append to current ids entries
    current.append(value)

# do the last id, if there is any:
if len(current) &gt; 0:
    sum_up(last_id, current)
</snippet></ROW><ROW><id>10952009</id><snippet>def leading(a, b):
    # generate digit pairs a=123, b=456 -&gt; [(1, 4), (2, 5), (3, 6)]
    zip_digits = zip(str(a), str(b))
    zip_digits = map(lambda (x,y):(int(x), int(y)), zip_digits)

    # this ignores problems where the last matching digits are 0 and 9
    # leading (12000, 12999) is same as leading(12, 12)
    while(zip_digits[-1] == (0,9)):         
        zip_digits.pop()            

    # start recursion
    return compute_leading(zip_digits)

def compute_leading(zip_digits):
    if(len(zip_digits) == 1):   # 1 digit case is simple!! :)
        (a,b) = zip_digits.pop()
        return range(a, b+1)

    #now we partition the problem
    # given leading(123,456) we decompose this into 3 problems
    # lows    -&gt; leading(123,129)
    # middle  -&gt; leading(130,449) which we can recurse to leading(13,44)
    # highs   -&gt; leading(450,456)

    last_digits = zip_digits.pop()
    low_prefix  = reduce(lambda x, y : 10 * x + y, [tup[0] for tup in zip_digits]) * 10     # base for lows e.g. 120
    high_prefix = reduce(lambda x, y : 10 * x + y, [tup[1] for tup in zip_digits]) * 10     # base for highs e.g. 450
    lows = range(low_prefix + last_digits[0], low_prefix + 10)
    highs = range(high_prefix + 0, high_prefix + last_digits[1] + 1)

    #check for boundary cases where lows or highs have all ten digits
    (a,b) = zip_digits.pop()    # pop last digits of middle so they can be adjusted
    if len(lows) == 10:
        lows = []
    else:
        a = a + 1

    if len(highs) == 10:
        highs = []
    else:
        b = b - 1

    zip_digits.append((a,b))    # push back last digits of middle after adjustments

    return lows + compute_leading(zip_digits) + highs       # and recurse - woohoo!!



print leading(199,411)

print leading(2169800, 2171194)

print leading(1000, 1452)
</snippet></ROW><ROW><id>10952180</id><snippet>matplotlib.patches.Ellipse</snippet></ROW><ROW><id>10952311</id><snippet>(-1)**_sign * _int * 10**_exp</snippet></ROW><ROW><id>10952528</id><snippet>QApplication</snippet></ROW><ROW><id>10952528</id><snippet>app = QtGui.QApplication(sys.argv)
</snippet></ROW><ROW><id>10952528</id><snippet>sys.exit(app.exec_())
</snippet></ROW><ROW><id>10952575</id><snippet>import itertools

class PhoneWords(object):
    letters = {
        2: 'abc',
        3: 'def',
        4: 'ghi',
        5: 'jkl',
        6: 'mno',
        7: 'pqrs',
        8: 'tuv',
        9: 'wxyz'
    }

    def __init__(self, num_string):
        self.num = [int(i) for i in num_string]                 # =&gt; [3, 4]
        self.chars = [PhoneWords.letters[i] for i in self.num]  # -&gt; ['def', 'ghi']

    def __iter__(self):
        return (''.join(letters) for letters in itertools.product(*self.chars))
</snippet></ROW><ROW><id>10952575</id><snippet>for word in PhoneWords("34"):
    print word
</snippet></ROW><ROW><id>10952575</id><snippet>dg
dh
di
eg
eh
ei
fg
fh
fi
</snippet></ROW><ROW><id>10952764</id><snippet>if</snippet></ROW><ROW><id>10952764</id><snippet>minr</snippet></ROW><ROW><id>10952764</id><snippet>if(sg&lt;sn &amp; mg&gt;mn):
    minr=mn+60-mg
elif(sg&lt;sn &amp; mg&lt;mn):
    minr= mn-mg
elif(sg&gt;sn &amp; mg&gt;mn):
    minr=mn+60-mg-1
elif(sg&gt;sn &amp; mg&lt;mn):
    minr=mn-mg-1
elif(mg==mn):
    minr=0
</snippet></ROW><ROW><id>10952764</id><snippet>True</snippet></ROW><ROW><id>10952764</id><snippet>minr</snippet></ROW><ROW><id>10952764</id><snippet>and</snippet></ROW><ROW><id>10952764</id><snippet>&amp;</snippet></ROW><ROW><id>10952764</id><snippet>sg == sn</snippet></ROW><ROW><id>10952764</id><snippet>mg != mn</snippet></ROW><ROW><id>10952899</id><snippet>x = cgi.print_environ()</snippet></ROW><ROW><id>10952899</id><snippet>f = open('file', 'w')
old = sys.stdout
sys.stdout = f
cgi.print_environ()
f.flush()
sys.stdout = old
f.close()
</snippet></ROW><ROW><id>10953205</id><snippet>socket.sendmsg</snippet></ROW><ROW><id>10953570</id><snippet>__file__</snippet></ROW><ROW><id>10953570</id><snippet>__file__</snippet></ROW><ROW><id>10953696</id><snippet> cd ~
 mkdir ~/tmp
 cd ~/tmp
 wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
 tar zxvf Python-2.7.3.tgz
 cd Python-2.7.3
 ./configure --prefix=$HOME/Python27
 make
 make install
</snippet></ROW><ROW><id>10953696</id><snippet> export PATH="$HOME/Python27/bin:$PATH"

 #save it and run
 source ~/.bashrc
</snippet></ROW><ROW><id>10953696</id><snippet>which python</snippet></ROW><ROW><id>10953696</id><snippet>easy_install</snippet></ROW><ROW><id>10953696</id><snippet>pip</snippet></ROW><ROW><id>10953696</id><snippet>cd ~/tmp
wget http://peak.telecommunity.com/dist/ez_setup.py
python ez_setup.py
easy_install pip
</snippet></ROW><ROW><id>10953696</id><snippet>virtualenv</snippet></ROW><ROW><id>10953696</id><snippet> pip install virtualenv
 virtualenv $HOME/&lt;site&gt;/env
 #Switch to virtualenv
 source $HOME/&lt;site&gt;/env/bin/activate
</snippet></ROW><ROW><id>10953696</id><snippet>bashrc</snippet></ROW><ROW><id>10953696</id><snippet> export PATH="$HOME/&lt;site&gt;/env/bin/:$PATH"
 source ~/.bashrc
</snippet></ROW><ROW><id>10953696</id><snippet> pip install django
 pip install ....
 pip install ....
 pip install ....
</snippet></ROW><ROW><id>10953696</id><snippet> cd $HOME/&lt;site&gt;/
 python $HOME/&lt;site&gt;/env/bin/django-admin.py startproject project
</snippet></ROW><ROW><id>10953696</id><snippet>passenger_wsgi.py</snippet></ROW><ROW><id>10953696</id><snippet>HOME/&lt;site&gt;/</snippet></ROW><ROW><id>10953696</id><snippet> import sys, os
 cwd = os.getcwd()
 sys.path.append(cwd)
 sys.path.append(cwd + '/project')  #You must add your project here or 500

 #Switch to new python
 #You may try to replace $HOME with your actual path
 if sys.version &lt; "2.7.3": os.execl("$HOME/&lt;site&gt;/env/bin/python",
     "python2.7.3", *sys.argv)

 sys.path.insert(0,'$HOME/&lt;site&gt;/env/bin')
 sys.path.insert(0,'$HOME/&lt;site&gt;/env/lib/python2.7/site-packages/django')
 sys.path.insert(0,'$HOME/&lt;site&gt;/env/lib/python2.7/site-packages')

 os.environ['DJANGO_SETTINGS_MODULE'] = "project.settings"
 import django.core.handlers.wsgi
 application = django.core.handlers.wsgi.WSGIHandler()
</snippet></ROW><ROW><id>10953944</id><snippet>sys.ps1 = '\001\033[96m\002&gt;&gt;&gt; \001\033[0m\002'
sys.ps2 = '\001\033[96m\002... \001\033[0m\002'
</snippet></ROW><ROW><id>10953944</id><snippet>\001</snippet></ROW><ROW><id>10953944</id><snippet>\002</snippet></ROW><ROW><id>10954229</id><snippet>coef_</snippet></ROW><ROW><id>10954229</id><snippet>(n_classes, n_features)</snippet></ROW><ROW><id>10954229</id><snippet>n_classes &gt; 1</snippet></ROW><ROW><id>10954229</id><snippet>(1, n_features)</snippet></ROW><ROW><id>10954229</id><snippet>n_features == 2</snippet></ROW><ROW><id>10954229</id><snippet>w = coef_[0]</snippet></ROW><ROW><id>10954229</id><snippet>f</snippet></ROW><ROW><id>10954229</id><snippet>y = f(x) = a.x + b</snippet></ROW><ROW><id>10954229</id><snippet>a</snippet></ROW><ROW><id>10954229</id><snippet>a = -w[0] / w[1]</snippet></ROW><ROW><id>10954477</id><snippet>__all__</snippet></ROW><ROW><id>10954477</id><snippet>__all__ = ['Class1', 'Class2', 'variable_i_want']
</snippet></ROW><ROW><id>10954477</id><snippet>from foo import *
</snippet></ROW><ROW><id>10954539</id><snippet>from django.db.models import Q
SomeModel.objects.filter(Q(propertyA=foo) | Q(propertyB=bar))
</snippet></ROW><ROW><id>10954555</id><snippet>pack_forget</snippet></ROW><ROW><id>10954555</id><snippet>pack</snippet></ROW><ROW><id>10954555</id><snippet>bind</snippet></ROW><ROW><id>10954555</id><snippet>import Tkinter as tk

class App(tk.Frame):
    def __init__(self,master):
        tk.Frame.__init__(self,master)
        self.b=tk.Button(self,text='hide',command=self.hide)
        self.lbl=tk.Label(self,text="This is a label you can hide")
        self.b.grid(row=0,column=0)
        self.lbl.grid(row=0,column=1)

    def hide(self):
        self.lbl.grid_forget()
        self.b.config(command=self.show,text='show')

    def show(self):
        self.l.grid(row=0,column=1)
        self.b.config(command=self.hide,text='hide')

if __name__ == '__main__':
    root = tk.Tk()
    f=App(root)
    f.grid(row=0,column=0)
    root.mainloop()
</snippet></ROW><ROW><id>10954729</id><snippet>extra</snippet></ROW><ROW><id>10954729</id><snippet>extra</snippet></ROW><ROW><id>10954729</id><snippet>initial</snippet></ROW><ROW><id>10954729</id><snippet>LineFormSet</snippet></ROW><ROW><id>10954729</id><snippet>add_fields</snippet></ROW><ROW><id>10954729</id><snippet>Result</snippet></ROW><ROW><id>10954729</id><snippet>result</snippet></ROW><ROW><id>10954729</id><snippet>initial</snippet></ROW><ROW><id>10954729</id><snippet>LineFormSet</snippet></ROW><ROW><id>10954729</id><snippet>class LineFormSet(forms.BaseModelFormSet):
    # whatever other code you have in it already
    # ...
    # ...
    def __init__(self, result, *args, **kwargs):
        super(LineFormSet, self).__init__(*args, **kwargs)
        self.result = result

    def save_new(self, form, commit=True):
        instance = form.save(commit=False)
        instance.result = self.result
        if commit:
            instance.save()
        return instance

    def save_existing(self, form, instance, commit=True):
        return self.save_new(form, commit)
</snippet></ROW><ROW><id>10954729</id><snippet>add_fields</snippet></ROW><ROW><id>10954729</id><snippet>   form.nested = [
        LineFormSet(
            result = instance,
            queryset = q, #data=self.data, instance = instance, prefix = 'LINES_%s' % pk_value)]
            prefix = 'lines-%s' % pk_value,
        )]
</snippet></ROW><ROW><id>10954814</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10954814</id><snippet>stdout</snippet></ROW><ROW><id>10954814</id><snippet>import sys
import os
from subprocess import Popen
from contextlib import contextmanager

@contextmanager
def monitor(stream, callback):
    read, write = os.pipe()
    yield write
    os.close(write)
    with os.fdopen(read) as f:
        for line in f:
            callback(line)
            stream.write(line)

def f(s):
    print("Write")

with monitor(sys.stdout, f) as stream:
    p = Popen(["ls"], stdout=stream)
    p.communicate()
</snippet></ROW><ROW><id>10954814</id><snippet>import sys
import os
from subprocess import Popen

class MonitoredStream():
    def __init__(self, stream, callback):
        self.stream = stream
        self.callback = callback
        self._read, self._write = os.pipe()

    def fileno(self):
        return self._write

    def process(self):
        os.close(self._write)
        with os.fdopen(self._read) as f:
            for line in f:
                self.callback(line)
                self.stream.write(line)

def f(s):
    print("Write")

stream = MonitoredStream(sys.stdout, f)
p = Popen(["ls"], stdout=stream)
p.communicate()
print(stream.process())
</snippet></ROW><ROW><id>10954860</id><snippet>with</snippet></ROW><ROW><id>10954860</id><snippet>with open(filename, 'r') as file:
    lines = file.read().splitlines()
</snippet></ROW><ROW><id>10954957</id><snippet>import csv
f = open("summary.csv", "r+w")
lines=f.readlines()
lines=lines[:-1]

cWriter = csv.writer(f, delimiter=',')
for line in lines:
    cWriter.writerow(line)
</snippet></ROW><ROW><id>10955181</id><snippet>python hello.py</snippet></ROW><ROW><id>10955181</id><snippet>import hello</snippet></ROW><ROW><id>10955181</id><snippet>reload(hello)</snippet></ROW><ROW><id>10955181</id><snippet>reload()</snippet></ROW><ROW><id>10955181</id><snippet>reload()</snippet></ROW><ROW><id>10955181</id><snippet>    ...
    existing_m = PyDict_GetItemString(modules_reloading, name);
    if (existing_m != NULL) {
        /* Due to a recursive reload, this module is already
           being reloaded. */
        Py_INCREF(existing_m);
        return existing_m;
    }
    ... load module code is below here
</snippet></ROW><ROW><id>10955713</id><snippet>(4).bit_length()
</snippet></ROW><ROW><id>10955713</id><snippet>x = 4
x.bit_length()
</snippet></ROW><ROW><id>10955842</id><snippet>[1,2]</snippet></ROW><ROW><id>10955842</id><snippet>[3,4]</snippet></ROW><ROW><id>10955842</id><snippet>(1,3),(1,4),(2,3),(2,4)</snippet></ROW><ROW><id>10955887</id><snippet>mysql&gt; create table bigtable (created_at date);
Query OK, 0 rows affected (0.07 sec)

mysql&gt; 

Query OK, 1 row affected, 1 warning (0.00 sec)

mysql&gt; show warnings;
+---------+------+-------------------------------------------------+
| Level   | Code | Message                                         |
+---------+------+-------------------------------------------------+
| Warning | 1265 | Data truncated for column 'created_at' at row 1 |
+---------+------+-------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; select * from bigtable;
+------------+
| created_at |
+------------+
| 2012-06-08 |
+------------+
1 row in set (0.00 sec)
</snippet></ROW><ROW><id>10956065</id><snippet>ftp.cwd("./public_html/eeeeeeee/rrrrrrrr/images")</snippet></ROW><ROW><id>10956381</id><snippet>str.translate()</snippet></ROW><ROW><id>10956381</id><snippet>import string

def LetterChanges(s):
    orig = string.letters
    new = string.ascii_lowercase[1:] + 'a' + string.ascii_uppercase[1:] + 'A'
    for vowel in 'aeiou':
        new = new.replace(vowel, vowel.upper())

    table = string.maketrans(orig, new)
    return s.translate(table)
</snippet></ROW><ROW><id>10956381</id><snippet>&gt;&gt;&gt; LetterChanges('sentence')
'tfOUfOdf'
</snippet></ROW><ROW><id>10956381</id><snippet>table</snippet></ROW><ROW><id>10956381</id><snippet>orig</snippet></ROW><ROW><id>10956381</id><snippet>new</snippet></ROW><ROW><id>10956381</id><snippet>import string

def LetterChanges(s):
    t = string.maketrans('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
                         'bcdEfghIjklmnOpqrstUvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZA')
    return s.translate(t)
</snippet></ROW><ROW><id>10956381</id><snippet>def LetterChanges(s):
    orig = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    new = 'bcdEfghIjklmnOpqrstUvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZA'
    result = ''
    for c in s:
        if c in orig:
            c = new[orig.index(c)]
        result += c
    return result
</snippet></ROW><ROW><id>10956669</id><snippet>r_vals = [u['item3'].r for u in mydict.itervalues() if 'item3' in u]
if r_vals:
   r_avg = sum(r_vals)/len(r_vals)
else:
   r_avg = 0   # ???
</snippet></ROW><ROW><id>10956687</id><snippet>PreferencesDialog</snippet></ROW><ROW><id>10956687</id><snippet>myapp.widgets</snippet></ROW><ROW><id>10956687</id><snippet>from preferencesdialog import *</snippet></ROW><ROW><id>10956687</id><snippet>myapp.widgets</snippet></ROW><ROW><id>10956687</id><snippet>myapp.widgets</snippet></ROW><ROW><id>10956687</id><snippet>from ... import *</snippet></ROW><ROW><id>10956725</id><snippet>&gt;&gt;&gt; re.findall(r'\{(.*)\}', '1:{test}')
['test']
</snippet></ROW><ROW><id>10956725</id><snippet>[(re.findall(r'\{(.*)\}', i) or [''])[0] for i in your_list]
</snippet></ROW><ROW><id>10956725</id><snippet>[''.join(re.findall(r'\{(.*)\}', i)) for i in your_list]
</snippet></ROW><ROW><id>10957084</id><snippet>markerfacecolor</snippet></ROW><ROW><id>10957084</id><snippet>pylab.semilogy(xaxis, pq_averages, 'ks-', markerfacecolor='white', label='DCTCP-PQ47.5')
</snippet></ROW><ROW><id>10957424</id><snippet>decorator</snippet></ROW><ROW><id>10957424</id><snippet>inner</snippet></ROW><ROW><id>10957424</id><snippet>wrapped</snippet></ROW><ROW><id>10957424</id><snippet>wrapper</snippet></ROW><ROW><id>10957424</id><snippet>functools.wraps(f)</snippet></ROW><ROW><id>10957424</id><snippet>f</snippet></ROW><ROW><id>10957424</id><snippet>func</snippet></ROW><ROW><id>10957424</id><snippet>def decorator_name(whatevs):
    def decorator(f):
        @wraps(f)
        def wrapper(*args, **kwargs):
            pass # sweet decorator goodness
        return wrapper
    return decorator
</snippet></ROW><ROW><id>10957555</id><snippet>%B</snippet></ROW><ROW><id>10957555</id><snippet>%b</snippet></ROW><ROW><id>10957555</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; datetimestring = 'Fri, 08 Jun 2012 22:40:26 GMT' 
&gt;&gt;&gt; timestamp = time.mktime(time.strptime(datetimestring, '%a, %d %B %Y %H:%M:%S GMT'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_strptime.py", line 454, in _strptime_time
    return _strptime(data_string, format)[0]
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_strptime.py", line 325, in _strptime
    (data_string, format))
ValueError: time data 'Fri, 08 Jun 2012 22:40:26 GMT' does not match format '%a, %d %B %Y %H:%M:%S GMT'
&gt;&gt;&gt; timestamp = time.mktime(time.strptime(datetimestring, '%a, %d %b %Y %H:%M:%S GMT'))
&gt;&gt;&gt; timestamp
1339209626.0
</snippet></ROW><ROW><id>10957766</id><snippet>BROKER_URL = 'redis://localhost:8889/0'
REDIS_DB = 0
REDIS_CONNECT_RETRY = True
CELERY_RESULT_BACKEND = 'redis'
CELERY_REDIS_PORT = 8889
BROKER_PORT = 8889
CELERY_RESULT_PORT = 8889
CELERY_TASK_RESULT_EXPIRES = 10
CELERYBEAT_SCHEDULER= 'djcelery.schedulers.DatabaseScheduler'
</snippet></ROW><ROW><id>10957836</id><snippet>reversed</snippet></ROW><ROW><id>10957836</id><snippet>for li in reversed(lvl):
    print li
</snippet></ROW><ROW><id>10957836</id><snippet>[0, 0, 0, 0, 0]
[0, 0, 0, 0, 0]
[0, 0, 1, 0, 0]
[0, 0, 1, 0, 0]
[0, 0, 1, 0, 0]
</snippet></ROW><ROW><id>10957885</id><snippet>array = [1,2,3,4,5,6,7,8,9]

newarray = [array[i] for i in range(0, len(array), 2)]

print(newarray)
</snippet></ROW><ROW><id>10957885</id><snippet>[1, 3, 5, 7, 9]</snippet></ROW><ROW><id>10957975</id><snippet>print()</snippet></ROW><ROW><id>10957975</id><snippet>return</snippet></ROW><ROW><id>10957975</id><snippet>python myscript.py
</snippet></ROW><ROW><id>10957977</id><snippet>sqlite3</snippet></ROW><ROW><id>10957977</id><snippet>json</snippet></ROW><ROW><id>10957977</id><snippet>csv</snippet></ROW><ROW><id>10957977</id><snippet>pickle</snippet></ROW><ROW><id>10957977</id><snippet>shelve</snippet></ROW><ROW><id>10958041</id><snippet>gtk.main</snippet></ROW><ROW><id>10958041</id><snippet> while Gtk.events_pending():
        Gtk.main_iteration()
</snippet></ROW><ROW><id>10958051</id><snippet>0 0 0 2
1 0 0 0
0 0 0 0
0 0 3 0
0 0 0 0
</snippet></ROW><ROW><id>10958051</id><snippet>0 3 2
1 0 1
3 2 3
</snippet></ROW><ROW><id>10958051</id><snippet>100 200 300</snippet></ROW><ROW><id>10958051</id><snippet>f = open('file', 'wb')
f.write('%c' % 123)
f.close()
</snippet></ROW><ROW><id>10958051</id><snippet>import array
f = open('file', 'wb')
data = array.array('B')
data.append(1)
data.append(2)
data.append(3)
data.tofile(f)
f.close()
</snippet></ROW><ROW><id>10958051</id><snippet>python</snippet></ROW><ROW><id>10958143</id><snippet>np.matlib.identity(n)
</snippet></ROW><ROW><id>10958143</id><snippet>In [1]: n = 1000
In [2]: timeit np.matlib.identity(n)
100 loops, best of 3: 8.78 ms per loop
In [3]: timeit np.matlib.eye(n)
1000 loops, best of 3: 695 us per loop
</snippet></ROW><ROW><id>10958211</id><snippet>PAIR</snippet></ROW><ROW><id>10958211</id><snippet>with open('data.txt') as infp:
   for line in infp:
      line = line.strip()
      if line.startswith('PAIR'):
         print(line)
</snippet></ROW><ROW><id>10958211</id><snippet>PAIR 1MNS HE 10 NM A ARG 33 OX1 3.22 32
PAIR 1MNS UR 11 NM A ARG 33 OX2 3.21 12
PAIR IMNS UK 32 NH A ASN 43 OZ1 5.21 22
</snippet></ROW><ROW><id>10958211</id><snippet>with</snippet></ROW><ROW><id>10958213</id><snippet>write()</snippet></ROW><ROW><id>10958213</id><snippet>"".join()</snippet></ROW><ROW><id>10958213</id><snippet>re.sub()</snippet></ROW><ROW><id>10958213</id><snippet>write()</snippet></ROW><ROW><id>10958390</id><snippet>import subprocess
import datetime

t1 = datetime.datetime.now()
h = subprocess.Popen(...) # See subprocess module documentation for the args
h.communicate()
t2 = datetime.datetime.now()
print("Return Code: %d" % h.returncode)
print("Delta: %s" % (t2 - t1))
</snippet></ROW><ROW><id>10958477</id><snippet>a</snippet></ROW><ROW><id>10958477</id><snippet>str</snippet></ROW><ROW><id>10958477</id><snippet>str(a)</snippet></ROW><ROW><id>10958477</id><snippet>a</snippet></ROW><ROW><id>10958505</id><snippet>*args</snippet></ROW><ROW><id>10958505</id><snippet>instance</snippet></ROW><ROW><id>10958505</id><snippet>MyForm</snippet></ROW><ROW><id>10958505</id><snippet>instance</snippet></ROW><ROW><id>10958505</id><snippet>MyForm</snippet></ROW><ROW><id>10958505</id><snippet>class MyForm(forms.ModelForm):
    def __init__(self, data=None, files=None, instance=None, *args, **kwargs):
        kwargs['instance'] = instance
        super(EdocForm, self).__init__(data, files, *args, **kwargs)
</snippet></ROW><ROW><id>10958505</id><snippet>class MyForm(forms.ModelForm):
    def __init__(self, data=None, files=None, **kwargs):
        super(EdocForm, self).__init__(data, files, *args, **kwargs)
        self.Meta.model.get_others(data, files, kwargs.get('instance', None))
</snippet></ROW><ROW><id>10958505</id><snippet>MyForm</snippet></ROW><ROW><id>10958505</id><snippet>TypeError: &lt;func&gt; takes exactly 2 arguments (# given)</snippet></ROW><ROW><id>10958505</id><snippet>instance</snippet></ROW><ROW><id>10958505</id><snippet>MyForm</snippet></ROW><ROW><id>10958505</id><snippet>self.instance</snippet></ROW><ROW><id>10958505</id><snippet>self.instance = super(EdocForm, self).instance</snippet></ROW><ROW><id>10958545</id><snippet>from itertools import chain, combinations, product

def pairwiseGen(*sequences):
    unseen = set(chain.from_iterable(product(*i) for i in combinations(sequences, 2)))
    for path in product(*sequences):
        common_pairs = set(combinations(path, 2)) &amp; unseen
        if common_pairs:
            yield path
            unseen.difference_update(common_pairs)
</snippet></ROW><ROW><id>10958545</id><snippet>parameters</snippet></ROW><ROW><id>10958545</id><snippet>&gt;&gt;&gt; pairs = list(pairwiseGen(*parameters))
&gt;&gt;&gt; len(pairs)
846
</snippet></ROW><ROW><id>10958545</id><snippet>&gt;&gt;&gt; all_possible = list(product(*parameters))
&gt;&gt;&gt; len(all_possible)
60480
</snippet></ROW><ROW><id>10958658</id><snippet>.communicate()</snippet></ROW><ROW><id>10958679</id><snippet>__init__</snippet></ROW><ROW><id>10958679</id><snippet>def __init__(self, request=None, response=None)</snippet></ROW><ROW><id>10958785</id><snippet>ser()</snippet></ROW><ROW><id>10958785</id><snippet>ser()</snippet></ROW><ROW><id>10958785</id><snippet>serializer = ser()
serializer.next()
</snippet></ROW><ROW><id>10958785</id><snippet>ser()</snippet></ROW><ROW><id>10958785</id><snippet>def ser(n=sys.maxint):
    for sn in xrange(0, n):
        yield sn
</snippet></ROW><ROW><id>10958885</id><snippet>myList = [4, 4, 9, 12]

if not any(isPrime(x) for x in myList):
    print("The list did not contain a prime")
</snippet></ROW><ROW><id>10958885</id><snippet>all()</snippet></ROW><ROW><id>10958885</id><snippet>True</snippet></ROW><ROW><id>10958885</id><snippet>any()</snippet></ROW><ROW><id>10958885</id><snippet>all()</snippet></ROW><ROW><id>10958885</id><snippet>any()</snippet></ROW><ROW><id>10958885</id><snippet>True</snippet></ROW><ROW><id>10958885</id><snippet>all()</snippet></ROW><ROW><id>10958885</id><snippet>False</snippet></ROW><ROW><id>10958885</id><snippet>import random
def rand_sequence(n_max):
    while True:
        next_random = random.randint(0, n_max)
        print(next_random)
        yield next_random

all(isPrime(x) for x in rand_sequence(20))
</snippet></ROW><ROW><id>10958885</id><snippet>False</snippet></ROW><ROW><id>10958885</id><snippet>17
3
0
</snippet></ROW><ROW><id>10958885</id><snippet>any()</snippet></ROW><ROW><id>10958885</id><snippet>for</snippet></ROW><ROW><id>10958885</id><snippet>any()</snippet></ROW><ROW><id>10958885</id><snippet>any()</snippet></ROW><ROW><id>10958885</id><snippet>None</snippet></ROW><ROW><id>10958885</id><snippet>None</snippet></ROW><ROW><id>10958885</id><snippet>all()</snippet></ROW><ROW><id>10958885</id><snippet>any(my_function(x) and False for x in sequence)
</snippet></ROW><ROW><id>10958885</id><snippet>all()</snippet></ROW><ROW><id>10958885</id><snippet>isPrime()</snippet></ROW><ROW><id>10958885</id><snippet>is_prime()</snippet></ROW><ROW><id>10958885</id><snippet>def is_prime(element):
    """ just a helper function! don't get religious about it! """
    if element == 2:
        return True
    elif element &lt;= 1 or element % 2 == 0:
        return False
    else:
        return all(element % i for i in xrange(3, element, 2))
</snippet></ROW><ROW><id>10958950</id><snippet>.execute()</snippet></ROW><ROW><id>10958950</id><snippet>%s</snippet></ROW><ROW><id>10958950</id><snippet>sql = '''insert into headline (guid,title,link,description,timestamp) 
                       values ("%s","%s","%s","%s","%s");'''
cursor.execute(sql, (guid_text,title_text,link_text,desc_text,timestamp2))
</snippet></ROW><ROW><id>10958950</id><snippet>except:</snippet></ROW><ROW><id>10958950</id><snippet>MySQLdb.connect()</snippet></ROW><ROW><id>10958991</id><snippet>"indent_to_bracket": true
</snippet></ROW><ROW><id>10958991</id><snippet>Packages/User/Preferences.sublime-settings</snippet></ROW><ROW><id>10958991</id><snippet>()</snippet></ROW><ROW><id>10958991</id><snippet>{}[]</snippet></ROW><ROW><id>10959190</id><snippet>top_clients</snippet></ROW><ROW><id>10959190</id><snippet>Client</snippet></ROW><ROW><id>10959190</id><snippet>top_clients = Client.objects.annotate(total_business=Sum('order__grand_total')).order_by('-total_business')
</snippet></ROW><ROW><id>10959190</id><snippet>{% for c in top_clients %}
&lt;li&gt;{{ c.total_business|currency }} {{ c.company_name }}&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>10959223</id><snippet>open</snippet></ROW><ROW><id>10959223</id><snippet>os.chdir(...)</snippet></ROW><ROW><id>10959274</id><snippet>Halfwidth and Fullwidth forms</snippet></ROW><ROW><id>10959274</id><snippet>\u00F01-\uFF60</snippet></ROW><ROW><id>10959274</id><snippet>\uFFE0-\uFFE6</snippet></ROW><ROW><id>10959274</id><snippet>\uFF61-\uFFDC</snippet></ROW><ROW><id>10959274</id><snippet>\uFFE8-\uFFEE</snippet></ROW><ROW><id>10959313</id><snippet>except IqError as e:
    ...
    message = """...

    RECV: %s""" % e.iq
</snippet></ROW><ROW><id>10959313</id><snippet>e.iq['error']['code']
e.iq['error']['type']
e.iq['error']['condition']
e.iq['error']['text']
</snippet></ROW><ROW><id>10959313</id><snippet>'404'
'cancel'
'remote-server-not-found'
"" # Because no human friendly text was included
</snippet></ROW><ROW><id>10959313</id><snippet>IqError</snippet></ROW><ROW><id>10959313</id><snippet>e.iq</snippet></ROW><ROW><id>10959313</id><snippet>IqTimeout</snippet></ROW><ROW><id>10959313</id><snippet>e.iq</snippet></ROW><ROW><id>10959313</id><snippet>e.iq['error']</snippet></ROW><ROW><id>10959313</id><snippet>sleek@conference.jabber.org</snippet></ROW><ROW><id>10959352</id><snippet> SUBJECT = {'dc':'Directory changed', 'sf':'Server fault' and etc}
 TO = 'user@localhost'
 FROM = 'user@localhost'
 and etc ...
</snippet></ROW><ROW><id>10959392</id><snippet> def get(self, section, key, default=''):
     return self[section].get(key, default)
</snippet></ROW><ROW><id>10959421</id><snippet>\7</snippet></ROW><ROW><id>10959421</id><snippet>8</snippet></ROW><ROW><id>10959421</id><snippet>\7</snippet></ROW><ROW><id>10959421</id><snippet>\78</snippet></ROW><ROW><id>10959421</id><snippet>r</snippet></ROW><ROW><id>10959421</id><snippet>print r'\78'
</snippet></ROW><ROW><id>10959421</id><snippet>0x78</snippet></ROW><ROW><id>10959421</id><snippet>x</snippet></ROW><ROW><id>10959421</id><snippet>x</snippet></ROW><ROW><id>10959421</id><snippet>print '\x78'
</snippet></ROW><ROW><id>10959421</id><snippet>\o123</snippet></ROW><ROW><id>10959421</id><snippet>0o153</snippet></ROW><ROW><id>10959968</id><snippet>tag_lower()</snippet></ROW><ROW><id>10959968</id><snippet>tag_raise()</snippet></ROW><ROW><id>10959968</id><snippet>Canvas</snippet></ROW><ROW><id>10959968</id><snippet>canvas.tag_raise(firstRect)
</snippet></ROW><ROW><id>10959968</id><snippet>canvas.tag_lower(secondRect)
</snippet></ROW><ROW><id>10960238</id><snippet>WrapperClass.fromSpambar(spambar)
</snippet></ROW><ROW><id>10960238</id><snippet>cdef WrapperClass wrpclsi
if isinstance(instance, WrapperClass):
    wrpclsi = instance
else:
    raise TypeError('expected instance of WrapperClass.')

cdef WrappedClassFromCpp* thisptr = wrpclsi.thisptr 
</snippet></ROW><ROW><id>10960464</id><snippet>  matplotlib.rc('font', **{'sans-serif' : 'Arial',
                           'family' : 'sans-serif'})
</snippet></ROW><ROW><id>10960464</id><snippet>sans-serif</snippet></ROW><ROW><id>10960464</id><snippet>**{}</snippet></ROW><ROW><id>10960464</id><snippet>sans-serif</snippet></ROW><ROW><id>10960464</id><snippet>sans-serif</snippet></ROW><ROW><id>10960464</id><snippet>u</snippet></ROW><ROW><id>10960464</id><snippet>  plt.xlabel("Średnia odległość między stacjami wsparcia a modelowaną [km]")
</snippet></ROW><ROW><id>10960464</id><snippet>u</snippet></ROW><ROW><id>10960464</id><snippet>  plt.xlabel(u"Średnia odległość między stacjami wsparcia a modelowaną [km]")
</snippet></ROW><ROW><id>10960464</id><snippet> # -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>10960485</id><snippet>os.stat</snippet></ROW><ROW><id>10960485</id><snippet>import os
for filename in os.listdir():
    info = os.stat(filename)
    print info.st_mtime
</snippet></ROW><ROW><id>10960485</id><snippet>st_mtime</snippet></ROW><ROW><id>10960485</id><snippet>time</snippet></ROW><ROW><id>10960485</id><snippet>datetime</snippet></ROW><ROW><id>10960485</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>10960485</id><snippet>os.stat</snippet></ROW><ROW><id>10960485</id><snippet>os.stat</snippet></ROW><ROW><id>10960485</id><snippet>os.stat</snippet></ROW><ROW><id>10960485</id><snippet>os.path</snippet></ROW><ROW><id>10960485</id><snippet>os.stat</snippet></ROW><ROW><id>10961102</id><snippet>\a</snippet></ROW><ROW><id>10961102</id><snippet>\7</snippet></ROW><ROW><id>10961115</id><snippet>'(\w+)\s*=\s*'
re.findall('(\w+)\s*=\s*', 'I think Python=amazing')   \\ return 'Python'
re.findall('(\w+)\s*=\s*', 'I think Python = amazing') \\ return 'Python'
re.findall('(\w+)\s*=\s*', 'I think Python =amazing')  \\ return 'Python'
</snippet></ROW><ROW><id>10961173</id><snippet>/usr</snippet></ROW><ROW><id>10961173</id><snippet>/usr/local</snippet></ROW><ROW><id>10961173</id><snippet>virtualenv</snippet></ROW><ROW><id>10961173</id><snippet>easy_install</snippet></ROW><ROW><id>10961173</id><snippet>$ virtualenv -p &lt;path-to-python-interpreter&gt;  &lt;environment-dir&gt;
$ source &lt;environment-dir&gt;/bin/activate
</snippet></ROW><ROW><id>10961350</id><snippet>aliased</snippet></ROW><ROW><id>10961350</id><snippet>select</snippet></ROW><ROW><id>10961350</id><snippet>select</snippet></ROW><ROW><id>10961350</id><snippet>_H1 = C1.__table__.alias()</snippet></ROW><ROW><id>10961350</id><snippet>aliased</snippet></ROW><ROW><id>10961350</id><snippet>alias</snippet></ROW><ROW><id>10961429</id><snippet>is_critical = (type_code &amp; 0x20) == 0
</snippet></ROW><ROW><id>10961429</id><snippet>is_critical = (type_code &amp; (0x1 &lt;&lt; 5)) == 0
</snippet></ROW><ROW><id>10961462</id><snippet>list</snippet></ROW><ROW><id>10961462</id><snippet>list</snippet></ROW><ROW><id>10961493</id><snippet>FirstStrike</snippet></ROW><ROW><id>10961493</id><snippet>if __name__ == "__main__":
    tokens = FirstStrike(url)
    analyze(tokens)
</snippet></ROW><ROW><id>10961493</id><snippet>tokens</snippet></ROW><ROW><id>10961493</id><snippet>analyze</snippet></ROW><ROW><id>10961695</id><snippet>import</snippet></ROW><ROW><id>10961695</id><snippet>s</snippet></ROW><ROW><id>10961717</id><snippet>.xslt</snippet></ROW><ROW><id>10961717</id><snippet>lxml</snippet></ROW><ROW><id>10961717</id><snippet>lxml.etree.ElementTree</snippet></ROW><ROW><id>10961717</id><snippet>etbuilder</snippet></ROW><ROW><id>10961943</id><snippet>Gaby aka G. Petrioli</snippet></ROW><ROW><id>10961943</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data1 = np.random.random_sample((2, 10000))
data2 = np.random.random_sample((2, 100000))
plt.plot(data1[0], data1[1], 'o',markersize=10, markeredgewidth=1)
plt.plot(data1[0], data1[1]+1, 'o',markersize=10, markeredgewidth=0)
plt.plot(data2[0], data2[1]+2, 'o',markersize=1, markeredgewidth=0)

plt.xlim((-0.5,1.5))
plt.ylim((-0.5,3.5))
plt.show()
</snippet></ROW><ROW><id>10961987</id><snippet>C</snippet></ROW><ROW><id>10961987</id><snippet>g(myC)</snippet></ROW><ROW><id>10961987</id><snippet>C</snippet></ROW><ROW><id>10961987</id><snippet>myC</snippet></ROW><ROW><id>10961987</id><snippet>g(boost::python::ptr(myC))</snippet></ROW><ROW><id>10961987</id><snippet>g(boost::ref(*myC))</snippet></ROW><ROW><id>10961987</id><snippet>g()</snippet></ROW><ROW><id>10961987</id><snippet>boost::shared_ptr</snippet></ROW><ROW><id>10961991</id><snippet>def make_tree(path):
    tree = dict(name=os.path.basename(path), children=[])
    try: lst = os.listdir(path)
    except OSError:
        pass #ignore errors
    else:
        for name in lst:
            fn = os.path.join(path, name)
            if os.path.isdir(fn):
                tree['children'].append(make_tree(fn))
            else:
                tree['children'].append(dict(name=name))
    return tree
</snippet></ROW><ROW><id>10961991</id><snippet>recursive</snippet></ROW><ROW><id>10961991</id><snippet>&lt;!doctype html&gt;
&lt;title&gt;Path: {{ tree.name }}&lt;/title&gt;
&lt;h1&gt;{{ tree.name }}&lt;/h1&gt;
&lt;ul&gt;
{%- for item in tree.children recursive %}
    &lt;li&gt;{{ item.name }}
    {%- if item.children -%}
        &lt;ul&gt;{{ loop(item.children) }}&lt;/ul&gt;
    {%- endif %}&lt;/li&gt;
{%- endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>10961991</id><snippet>http://localhost:8888/</snippet></ROW><ROW><id>10961991</id><snippet>import os
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def dirtree():
    path = os.path.expanduser(u'~')
    return render_template('dirtree.html', tree=make_tree(path))

if __name__=="__main__":
    app.run(host='localhost', port=8888, debug=True)
</snippet></ROW><ROW><id>10962176</id><snippet>pydoc function</snippet></ROW><ROW><id>10962176</id><snippet>function</snippet></ROW><ROW><id>10962176</id><snippet>module.function</snippet></ROW><ROW><id>10962176</id><snippet>&gt; PAGER=cat pydoc urllib.urlencode
[adrian@hades:~]&gt; PAGER=cat pydoc urllib.urlencode
Help on function urlencode in urllib:

urllib.urlencode = urlencode(query, doseq=0)
    Encode a sequence of two-element tuples or dictionary into a URL query string.
...
</snippet></ROW><ROW><id>10962176</id><snippet>PAGER=cat</snippet></ROW><ROW><id>10962176</id><snippet>function?</snippet></ROW><ROW><id>10962176</id><snippet>function</snippet></ROW><ROW><id>10962176</id><snippet>function??</snippet></ROW><ROW><id>10962176</id><snippet>help(function)</snippet></ROW><ROW><id>10962272</id><snippet>username = TextField('Username', [validators.Regexp(r'^[\w.@+-]+$'), validators.Length(min=4, max=25)])
</snippet></ROW><ROW><id>10962283</id><snippet>global_func</snippet></ROW><ROW><id>10962283</id><snippet>decorate_class</snippet></ROW><ROW><id>10962283</id><snippet>def decorate_class(clazz):
    print global_func, clazz.__dict__["world"] == global_func
    return clazz
</snippet></ROW><ROW><id>10962283</id><snippet>global_func</snippet></ROW><ROW><id>10962283</id><snippet>None</snippet></ROW><ROW><id>10962283</id><snippet>global_func</snippet></ROW><ROW><id>10962283</id><snippet>global</snippet></ROW><ROW><id>10962283</id><snippet>decorate_func</snippet></ROW><ROW><id>10962283</id><snippet>def decorate_func(func):
    global global_func
    global_func = func
    return func
</snippet></ROW><ROW><id>10962317</id><snippet>Popen.communicate</snippet></ROW><ROW><id>10962317</id><snippet>proc.stdin.write(...)</snippet></ROW><ROW><id>10962317</id><snippet>proc.stdout.read*()</snippet></ROW><ROW><id>10962317</id><snippet>while True:
    proc.stdin.write(c)
    r = proc.stdout.readline()
</snippet></ROW><ROW><id>10962506</id><snippet>TableStyles</snippet></ROW><ROW><id>10962506</id><snippet>SPAN</snippet></ROW><ROW><id>10962506</id><snippet>TableStyles</snippet></ROW><ROW><id>10962531</id><snippet>class Math(object):
    def __init__(self, *args, **kwargs):
        self.list = list(args)

    def __getitem__(self, i):
        return MathSlice(self, i)

class MathSlice(object):
    def __init__(self, math, slice):
        self.math = math
        self.slice = slice

    def add_one(self):
        for i in xrange(*self.slice.indices(len(self.math.list))):
            self.math.list[i] += 1


instance = Math(1,2,3,4,5)
instance[2:4].add_one()

print instance.list
</snippet></ROW><ROW><id>10962583</id><snippet>re</snippet></ROW><ROW><id>10962583</id><snippet>re.escape</snippet></ROW><ROW><id>10962749</id><snippet>action="/upload" 
</snippet></ROW><ROW><id>10963196</id><snippet>pattern = re.compile(r"\{(?:.*?,|.*?)(\S+)\t \t(.*?)\}")
</snippet></ROW><ROW><id>10963306</id><snippet>&lt;post&gt;&lt;link&gt;http://blablabla.com/&lt;/link&gt;&lt;/post&gt;
</snippet></ROW><ROW><id>10963306</id><snippet>&lt;post&gt;&lt;link&gt;http://mysite.com/log?page=http%3A%2F%2Fblablabla.com%2F&lt;/link&gt;&lt;/post&gt;
</snippet></ROW><ROW><id>10963313</id><snippet>from itertools import chain
chained_qs = chain(qs1, qs2)
</snippet></ROW><ROW><id>10963343</id><snippet>brew install igraph
sudo pip install python-igraph
</snippet></ROW><ROW><id>10963577</id><snippet>Exception</snippet></ROW><ROW><id>10963577</id><snippet>try:
    doSomething()
except Exception as e:
    doSomethingWithException(e)
</snippet></ROW><ROW><id>10963603</id><snippet>obj</snippet></ROW><ROW><id>10963603</id><snippet>[(field.name, getattr(obj,field.name)) for field in obj._meta.fields]
</snippet></ROW><ROW><id>10963603</id><snippet>dict()</snippet></ROW><ROW><id>10963657</id><snippet>u = [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
u[0:8:3] = [ 10, 11 ]
</snippet></ROW><ROW><id>10963866</id><snippet>from imptee import *</snippet></ROW><ROW><id>10963866</id><snippet>import imptee</snippet></ROW><ROW><id>10963866</id><snippet>foo = imptee.foo</snippet></ROW><ROW><id>10963866</id><snippet>foo = 123</snippet></ROW><ROW><id>10963969</id><snippet>largest_key = max(my_dict, key=lambda x: x[1])
</snippet></ROW><ROW><id>10963969</id><snippet>from operator import itemgetter
largest_key = max(my_dict, key=itemgetter(1))
</snippet></ROW><ROW><id>10963969</id><snippet>dict</snippet></ROW><ROW><id>10963969</id><snippet>keys()</snippet></ROW><ROW><id>10963969</id><snippet>viewkeys()</snippet></ROW><ROW><id>10963969</id><snippet>dict</snippet></ROW><ROW><id>10963969</id><snippet>tuple</snippet></ROW><ROW><id>10963969</id><snippet>my_dict = {
    'a': {
            1: value_1,
            2: value_3
         }
    'b': {
            1: value_2,
            2: value_5
         }
    'c': {
            3: value_4
         }
}
</snippet></ROW><ROW><id>10963969</id><snippet>a</snippet></ROW><ROW><id>10963969</id><snippet>largest_key = max(d['a'])
</snippet></ROW><ROW><id>10963969</id><snippet>&gt;&gt;&gt; subset = 'a'
&gt;&gt;&gt; largest_key_within_subset = max((i for i in my_dict if i[0] == subset), key=itemgetter(1))
</snippet></ROW><ROW><id>10963969</id><snippet>(i for i in my_dict if i[0] == subset)</snippet></ROW><ROW><id>10964049</id><snippet>import re

def remove(reg, s, multiline=False):
    flags = [re.M, re.M | re.DOTALL][multiline]
    s,num = re.subn(reg, "", s, flags=flags)
    return s

def classname(s):
    s = remove("\"\"\".*?\"\"\"", s, multiline=True)
    s = remove("\'\'\'.*?\'\'\'", s, multiline=True)
    s = remove("\".*?\"", s)
    s = remove("\'.*?\'", s)

    res = re.search("(^|\s)class\s+(\w+)", s, flags=re.M)
    # print "*** {} -&gt; {}".format(s, res.groups() if res else None)
    if res is None:
        return None
    else:
        return res.group(2)
</snippet></ROW><ROW><id>10964049</id><snippet>tests = [
    ("class hi()", "hi"),
    ("class hi(dff)", "hi"),
    ("class hi   (  dff  )  :", "hi"),
    ("  class        hi       (  dff  )  :", "hi"),
    ("class hi", "hi"),
    ("classf hi", None),
    ("fclass hi", None),
    ("'class hi(dd)'", None),
    ('"class hi(dd)"', None),
    ("'''class hi(dd)'''", None),
    ('"""class hi(dd)"""', None),
    ('"""\n\n\n\nclass hi(dd)\n\n\n\n"""', None),   
    ("'class' hi()", None),
    ("a = ''; class hi(object): pass", "hi")
]

def run_tests(fn, tests=tests):
    for inp,outp in tests:
        res = fn(inp)
        if res == outp:
            print("passed")
        else:
            print("FAILED on {} (gave '{}', should be '{}')".format(inp, repr(res), repr(outp)))
</snippet></ROW><ROW><id>10964114</id><snippet>random</snippet></ROW><ROW><id>10964190</id><snippet>%# directory that Python code is watching for modifications
dirPath = 'some_directory';

x = 0;
for i=1:1000
    %# some lengthy operation
    pause(0.5)
    x = x + 1;

    %# check if variable exceeds threshold
    if x &gt; 10
        %# save the workspace to MAT-file inside the directory watched.
        %# this shall trigger the notification in Python
        save( fullfile(dirPath,'out.mat') )
        break
    end
end
</snippet></ROW><ROW><id>10964190</id><snippet>import os, sys, time
import win32file, win32event, win32con

# stub your functions in my case
def connectToMatlab():
  pass
def getValueFromMatlab():
  return 99

# path to predetermined directory to watch
dirPath = "some_directory"
dirPath = os.path.abspath(dirPath)

# start/connect to a MATLAB session, running the script above
connectToMatlab()

# set up folder watching (notify on file addition/deletion/renaming)
print "Started watching '%s' at %s" % (dirPath, time.asctime())
change_handle = win32file.FindFirstChangeNotification(
  dirPath, 0, win32con.FILE_NOTIFY_CHANGE_FILE_NAME)

# time-out in 10 sec (win32event.INFINITE to wait indefinitely)
timeout = 10000

try:
  # block/wait for notification
  result = win32event.WaitForSingleObject(change_handle, timeout)

  # returned because of a change notification
  if result == win32con.WAIT_OBJECT_0:
    # retrieve final result from MATLAB
    print "MALTAB variable has exceeded threshold at %s" % time.asctime()
    val = getValueFromMatlab()

  # timed out
  elif result == win32con.WAIT_TIMEOUT:
    print "timed-out after %s msec at %s" % (timeout,time.asctime())
    val = None    # maybe to indicate failure

finally:
  # cleanup properly
  win32file.FindCloseChangeNotification(change_handle)

# work with val
print val
</snippet></ROW><ROW><id>10964190</id><snippet>WaitForSingleObject</snippet></ROW><ROW><id>10964190</id><snippet>WaitFor...</snippet></ROW><ROW><id>10964201</id><snippet>&lt;</snippet></ROW><ROW><id>10964201</id><snippet>|</snippet></ROW><ROW><id>10964201</id><snippet>shell=True</snippet></ROW><ROW><id>10964201</id><snippet>Popen()</snippet></ROW><ROW><id>10964221</id><snippet>s = repr('''\n\t\n\t\n\t\tApple - Wikipedia, the free encyclopedia\n\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\n\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\tLanguage:English\xd8\xa7\xd9\x84\xd8\xb9\xd8\xb1\xd8\xa8\xd9\x8a\xd8\xa9Aragon\xc3\xa9sAsturianuAz\xc9\x99rbaycanca\xe0\xa6\xac\xe0\xa6\xbe\xe0\xa6\x82\xe0\xa6\xb2\xe0\xa6\xbeB\xc3\xa2n-l\xc3\xa2m-g\xc3\xbaBasa Banyumasan\xd0\x91\xd0\xb5\xd0\xbb\xd0\xb0\xd1\x80\xd1\x83\xd1\x81\xd0\xba\xd0''')
s =  re.sub(r'\\[tn]', '', s)
s =  re.sub(r'\\x..', '', s)
print s
</snippet></ROW><ROW><id>10964602</id><snippet>threading.local</snippet></ROW><ROW><id>10964602</id><snippet>runtime/request_environment.py</snippet></ROW><ROW><id>10964602</id><snippet>import threading

class _State(threading.local):
    """State keeps track of request info"""
    user = None

_state = _State()
</snippet></ROW><ROW><id>10964602</id><snippet>from state import _state
if authentication_passed:
    _state.user = user
</snippet></ROW><ROW><id>10964602</id><snippet>from state import _state
def get_authenticated_user():
    user = _state.user
    if not user:
        raise AuthenticationError()
    return user
</snippet></ROW><ROW><id>10964783</id><snippet>.text()</snippet></ROW><ROW><id>10964783</id><snippet>    self.file = QtCore.QStringList()
    archivos = self.file

    cuenta = self.ventana.listWidget.count()
    for index in range(cuenta):
        archivos.append(self.ventana.listWidget.item(index).text())
</snippet></ROW><ROW><id>10964914</id><snippet>from BeautifulSoup import BeautifulSoup, Tag, NavigableString
import re    

html = """
&lt;div&gt;
    &lt;p&gt;The quick brown &lt;a href='http://en.wikipedia.org/wiki/Dog'&gt;fox&lt;/a&gt; jumped over the lazy Dog&lt;/p&gt;
    &lt;p&gt;The &lt;a href='http://en.wikipedia.org/wiki/Dog'&gt;dog&lt;/a&gt;, who was, in reality, not so lazy, gave chase to the fox.&lt;/p&gt;
    &lt;p&gt;See image for reference:&lt;/p&gt;
    &lt;img src='dog_chasing_fox.jpg' title='Dog chasing fox'/&gt;
&lt;/div&gt;
"""
soup = BeautifulSoup(html)

#search term, url reference
keywords = [("dog","http://en.wikipedia.org/wiki/Dog"),
            ("fox","http://en.wikipedia.org/wiki/Fox")]

def insertLinks(string_value,string_href):
    for t in soup.findAll(text=re.compile(string_value, re.IGNORECASE)):
            if t.parent.name !='a':
                    a = Tag('a', name='a')
                    a['href'] = string_href
                    a.insert(0, NavigableString(string_value))
                    string_list = re.compile(string_value, re.IGNORECASE).split(t)
                    replacement_text = soup.new_string(string_list[0])
                    t.replace_with(replacement_text)
                    replacement_text.insert_after(a)
                    a.insert_after(soup.new_string(string_list[1]))


for word in keywords:
    insertLinks(word[0],word[1])

print soup
</snippet></ROW><ROW><id>10964914</id><snippet>&lt;div&gt;
    &lt;p&gt;The quick brown &lt;a href="http://en.wikipedia.org/wiki/Dog"&gt;fox&lt;/a&gt; jumped over the lazy &lt;a href="http://en.wikipedia.org/wiki/Dog"&gt;dog&lt;/a&gt;&lt;/p&gt;
    &lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Dog"&gt;dog&lt;/a&gt;, who was, in reality, not so lazy, gave chase to the &lt;a href="http://en.wikipedia.org/wiki/Fox"&gt;fox&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;See image for reference:&lt;/p&gt;
    &lt;img src="dog_chasing_fox.jpg" title="Dog chasing fox"/&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>10964958</id><snippet>def some_function(arg, property):
    return getattr(Some_Object, propery)
</snippet></ROW><ROW><id>10964991</id><snippet>readline()</snippet></ROW><ROW><id>10964991</id><snippet>if</snippet></ROW><ROW><id>10964991</id><snippet>read()</snippet></ROW><ROW><id>10964991</id><snippet>write()</snippet></ROW><ROW><id>10964991</id><snippet>wfile.read()</snippet></ROW><ROW><id>10964991</id><snippet>#!/usr/bin/...</snippet></ROW><ROW><id>10964991</id><snippet>with open(file, 'r+') as wfile:
   before = wfile.readline()
   if before != "#! /usr/bin/env python\n":
      wfile.seek(0)
      wfile.write('#! /usr/bin/env python\n' + before)
</snippet></ROW><ROW><id>10964991</id><snippet>before</snippet></ROW><ROW><id>10964991</id><snippet>with</snippet></ROW><ROW><id>10965025</id><snippet>super</snippet></ROW><ROW><id>10965025</id><snippet>IntegrityError</snippet></ROW><ROW><id>10965025</id><snippet>def save(self, *args, **kwargs):
    sender = self.sender
    thread_initiator = self.thread.initiator
    thread_recipient = self.thread.recipient
    if sender == thread_recipient:
        self.recipient = thread_initiator
    else:
        self.recipient = thread_recipient
    self.status = 'unread' 
    super(Message, self).save(*args, **kwargs)

    # instead of Message.objects.create(thread=self.thread, content=self.content, sender=sender, recipient=sender, status='read')
    self.pk +=1
    self.sender = sender
    self.recipient = sender
    self.status = 'read'
    super(Message, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>10965351</id><snippet>sudo apt-get install python-numpy python-scipy python-matplotlib
</snippet></ROW><ROW><id>10965392</id><snippet>In [267]: 5 / 2
Out[267]: 2
</snippet></ROW><ROW><id>10965392</id><snippet>In [1]: 5 / 2
Out[1]: 2.5
</snippet></ROW><ROW><id>10965392</id><snippet>//</snippet></ROW><ROW><id>10965392</id><snippet>In [2]: 5 // 2
Out[2]: 2
</snippet></ROW><ROW><id>10965392</id><snippet>from __future__ import division</snippet></ROW><ROW><id>10965392</id><snippet>In [1]: 5 / 2
Out[1]: 2

In [2]: from __future__ import division

In [3]: 5 / 2
Out[3]: 2.5
</snippet></ROW><ROW><id>10965449</id><snippet>after</snippet></ROW><ROW><id>10965449</id><snippet>def draw(self):
    # draw the board according to the current state
    ...
    # arrange for the next frame to draw in 4 seconds
    self.after(4000, self.draw)

def __init__(self, ...):
    ...
    self.go = tk.Button(self, text="Go", command=self.draw)
    ...
</snippet></ROW><ROW><id>10965449</id><snippet>draw</snippet></ROW><ROW><id>10965449</id><snippet>self.after</snippet></ROW><ROW><id>10965572</id><snippet>__del__</snippet></ROW><ROW><id>10965572</id><snippet>__enter__</snippet></ROW><ROW><id>10965572</id><snippet>__exit__</snippet></ROW><ROW><id>10965572</id><snippet>with</snippet></ROW><ROW><id>10965572</id><snippet>@contextlib.contextmanager
def tempdir(prefix='tmp'):
    """A context manager for creating and then deleting a temporary directory."""
    tmpdir = tempfile.mkdtemp(prefix=prefix)
    try:
        yield tmpdir
    finally:
        shutil.rmtree(tmpdir)
</snippet></ROW><ROW><id>10965606</id><snippet>## Create a Decl object for the variable test
id_obj          = c_ast.ID('test')
identifier_obj  = c_ast.IdentifierType(['int'])
typedecl_obj    = c_ast.TypeDecl(id_obj.name,None,identifier_obj)
decl_obj        = c_ast.Decl(id_obj.name,[],[],[],typedecl_obj,None,None)
</snippet></ROW><ROW><id>10965719</id><snippet>wa</snippet></ROW><ROW><id>10965719</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>10965719</id><snippet>test.py</snippet></ROW><ROW><id>10965719</id><snippet>import test</snippet></ROW><ROW><id>10965719</id><snippet>test.py</snippet></ROW><ROW><id>10965719</id><snippet>__name__ == 'test'</snippet></ROW><ROW><id>10965719</id><snippet>__main__</snippet></ROW><ROW><id>10965719</id><snippet>wa</snippet></ROW><ROW><id>10965719</id><snippet>__main__</snippet></ROW><ROW><id>10965719</id><snippet>test2.py</snippet></ROW><ROW><id>10965719</id><snippet>import test2
test2.parent = sys.modules[__name__]
</snippet></ROW><ROW><id>10965719</id><snippet>test</snippet></ROW><ROW><id>10965719</id><snippet>test</snippet></ROW><ROW><id>10965719</id><snippet>test2</snippet></ROW><ROW><id>10965719</id><snippet>parent.wa.label.setText('Blablabla')
</snippet></ROW><ROW><id>10965916</id><snippet>@app.route('/')
@app.route('/index')
def index():
    ...
</snippet></ROW><ROW><id>10965965</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10965965</id><snippet>subprocess.call</snippet></ROW><ROW><id>10965965</id><snippet>process = subprocess.Popen(['foo', '-b', 'bar'])
</snippet></ROW><ROW><id>10966012</id><snippet>response.content</snippet></ROW><ROW><id>10966012</id><snippet>response.content = response.content.replace("BAD", "GOOD")
</snippet></ROW><ROW><id>10966034</id><snippet>__contains__</snippet></ROW><ROW><id>10966034</id><snippet>x in object</snippet></ROW><ROW><id>10966034</id><snippet>__iter__</snippet></ROW><ROW><id>10966034</id><snippet>__contains__</snippet></ROW><ROW><id>10966034</id><snippet>__contains__</snippet></ROW><ROW><id>10966034</id><snippet>'GOOG' in p</snippet></ROW><ROW><id>10966034</id><snippet>investment_object_with_GOOG_name in p</snippet></ROW><ROW><id>10966034</id><snippet>True</snippet></ROW><ROW><id>10966034</id><snippet>def ___contains___(self, item):
    # checks investment name strings by comparing to dictionary keys
    if item in self.d_investments:
        return True
    # checks investment objects by comparing to dictionary values
    if item in self.d_investments.values():
        return True
</snippet></ROW><ROW><id>10966034</id><snippet>    # checks investment objects by comparing to dictionary keys
    if isinstance(item, Investment) and item.name in self.d_investments:
        return True
</snippet></ROW><ROW><id>10966077</id><snippet>ImportError: dlopen(/Library/Python/2.7/site-packages/_mysql.so, 2): Library not loaded: libmysqlclient.18.dylib
  Referenced from: /Library/Python/2.7/site-packages/_mysql.so
  Reason: image not found
</snippet></ROW><ROW><id>10966077</id><snippet>export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH
</snippet></ROW><ROW><id>10966108</id><snippet>def counter(func):
    def wrapper(*args, **kwargs):
        wrapper.count += 1
        return func(*args, **kwargs)       # &lt;- this line is important!!
    wrapper.count = 0
    return wrapper
</snippet></ROW><ROW><id>10966550</id><snippet>1,2,3,4,5
</snippet></ROW><ROW><id>10966550</id><snippet>csv</snippet></ROW><ROW><id>10966550</id><snippet>data = [ map( float, row) for row in csvreader]
</snippet></ROW><ROW><id>10966560</id><snippet>import hashlib
salt = "-WOu@p.Za,&gt;W+6&amp;`A63/"
user_password = "password"
sha1 = hashlib.sha1()
sha1.update(user_password + salt)
encrypted = sha1.hexdigest()
print encrypted
# 476dc4076d1c7eb43152b78e9dc20d892f660f24
</snippet></ROW><ROW><id>10966560</id><snippet>test_sha1 = hashlib.sha1(raw_input("Enter password: ") + salt).hexdigest()
# Enter password:  password
print encrypted == test_sha1
# True
</snippet></ROW><ROW><id>10966910</id><snippet>S</snippet></ROW><ROW><id>10966910</id><snippet>&gt;&gt;&gt; S="Hello World"
&gt;&gt;&gt; id(S)
32386960
&gt;&gt;&gt; S="Hello Human"
&gt;&gt;&gt; id(S)
32387008
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10966910</id><snippet>+=</snippet></ROW><ROW><id>10966910</id><snippet>&gt;&gt;&gt; S="Hello"
&gt;&gt;&gt; id(S)
32386912
&gt;&gt;&gt; S+=" World"
&gt;&gt;&gt; id(S)
32386960
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10967100</id><snippet>*args</snippet></ROW><ROW><id>10967100</id><snippet>args</snippet></ROW><ROW><id>10967100</id><snippet>cursor</snippet></ROW><ROW><id>10967100</id><snippet>insert("foo", *cursor)</snippet></ROW><ROW><id>10967100</id><snippet>insert("foo", cursor)</snippet></ROW><ROW><id>10967100</id><snippet>pass_many([["foo", "bar"], "pew"], insert, (cursor,))</snippet></ROW><ROW><id>10967100</id><snippet>test_var_args</snippet></ROW><ROW><id>10967100</id><snippet>insert</snippet></ROW><ROW><id>10967100</id><snippet>v</snippet></ROW><ROW><id>10967100</id><snippet>func</snippet></ROW><ROW><id>10967100</id><snippet>v</snippet></ROW><ROW><id>10967100</id><snippet>cursor</snippet></ROW><ROW><id>10967100</id><snippet>cursor</snippet></ROW><ROW><id>10967100</id><snippet>insert</snippet></ROW><ROW><id>10967336</id><snippet>read_file()</snippet></ROW><ROW><id>10967336</id><snippet>variable = read_file() or "File was empty"
</snippet></ROW><ROW><id>10967409</id><snippet>In [2]: 1.0/50000
Out[2]: 2e-05
</snippet></ROW><ROW><id>10967409</id><snippet>.0</snippet></ROW><ROW><id>10967409</id><snippet>1.0</snippet></ROW><ROW><id>10967409</id><snippet>In [3]: float(1)/50000
Out[3]: 2e-05
</snippet></ROW><ROW><id>10967409</id><snippet>1/50000</snippet></ROW><ROW><id>10967409</id><snippet>0</snippet></ROW><ROW><id>10967409</id><snippet>0.0</snippet></ROW><ROW><id>10967409</id><snippet>float()</snippet></ROW><ROW><id>10967471</id><snippet>myarray</snippet></ROW><ROW><id>10967471</id><snippet>1.0</snippet></ROW><ROW><id>10967471</id><snippet>myarray</snippet></ROW><ROW><id>10967471</id><snippet>0-255</snippet></ROW><ROW><id>10967471</id><snippet>np.uint8()</snippet></ROW><ROW><id>10967471</id><snippet>Image.fromarray()</snippet></ROW><ROW><id>10967471</id><snippet>import Image
im = Image.fromarray(np.uint8(cm.gist_earth(myarray)*255))
</snippet></ROW><ROW><id>10967471</id><snippet>plt.savefig()</snippet></ROW><ROW><id>10967471</id><snippet>im.save()</snippet></ROW><ROW><id>10967617</id><snippet>__getattr__(self, name)</snippet></ROW><ROW><id>10967617</id><snippet>__setattr__(self, name, value)</snippet></ROW><ROW><id>10967617</id><snippet>__delattr__(self, name)</snippet></ROW><ROW><id>10967617</id><snippet>__getattr__</snippet></ROW><ROW><id>10967617</id><snippet>def __getattr__(self, name):
    try:
        return self.__dict[name]
    except KeyError:
        msg = "'{0}' object has no attribute '{1}'"
        raise AttributeError(msg.format(type(self).__name__, name))
</snippet></ROW><ROW><id>10967834</id><snippet>*iterable</snippet></ROW><ROW><id>10967834</id><snippet>[*args] = [1, 2, 3]
</snippet></ROW><ROW><id>10967836</id><snippet>s.Starter()
</snippet></ROW><ROW><id>10967836</id><snippet>def Starter(self):
        while True:
            try:
                i = int(input(''))
            except TypeError:
                print 'Not a Number, Try Again.'
                continue
</snippet></ROW><ROW><id>10968040</id><snippet>np.bincount(n * (Ytrue - 1) + (Ypred -1), minlength=n*n).reshape(n, n)
</snippet></ROW><ROW><id>10968113</id><snippet>step = 200 # change values by this amount
with open('Chr20.bed', 'w') as outfp:
   for val in range(0, 1000, step):  #increment by step, max value 1000
      outfp.write('{0}\t{1:d}\t{2:d}\n'.format('chr20', val, val+step))
</snippet></ROW><ROW><id>10968113</id><snippet>chr20   0   200
chr20   200 400
chr20   400 600
chr20   600 800
chr20   800 1000
</snippet></ROW><ROW><id>10968113</id><snippet>with</snippet></ROW><ROW><id>10968171</id><snippet>import urllib, urllib2

##Download SocksiPy - A Python SOCKS client module. ( http://code.google.com/p/socksipy-branch/downloads/list )
##Simply copy the file "socks.py" to your Python's lib/site-packages directory, and initiate a socks socket like this.
## NOTE: you must use socks before urllib2.
import socks
import socket
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050)
socket.socket = socks.socksocket

url = 'http://ifconfig.me/ip'
request = urllib2.Request(url)
request.add_header('Cache-Control','max-age=0')
response = urllib2.urlopen(request)
print response.read()
</snippet></ROW><ROW><id>10968347</id><snippet>hello_world.so</snippet></ROW><ROW><id>10968347</id><snippet>libhello_world.so</snippet></ROW><ROW><id>10968395</id><snippet>postTool().setModPosition()</snippet></ROW><ROW><id>10968395</id><snippet>OnKeyboardEvent</snippet></ROW><ROW><id>10968395</id><snippet>show()</snippet></ROW><ROW><id>10968395</id><snippet>setText</snippet></ROW><ROW><id>10968395</id><snippet>OMD_post</snippet></ROW><ROW><id>10968395</id><snippet>OnKeyBoardEvent</snippet></ROW><ROW><id>10968395</id><snippet>postTool</snippet></ROW><ROW><id>10968395</id><snippet>class postTool(QtGui.QMainWindow):
    def __init__(self,parent=None):
        QtGui.QWidget.__init__(self,parent)
        self.ui2 = Ui_postTool()
        self.ui2.setupUi(self)
    def setModPosition(self):
        self.ui2.lineEdit_2.setText("something")
        print "nomnom"
    def keyPressEvent(event):
        if type(event) == QtGui.QKeyEvent:
            key = str(event.text()).lower()
            if key == 'whatever':
                self.setModPosition()
</snippet></ROW><ROW><id>10968395</id><snippet>class postTool(QtGui.QMainWindow):
    def __init__(self,parent=None):
        ... # the existing stuff
        QtGui.QShortcut(QtGui.QKeySequence("F10"), self, self.setModPosition)
</snippet></ROW><ROW><id>10968625</id><snippet>x+</snippet></ROW><ROW><id>10968625</id><snippet>x</snippet></ROW><ROW><id>10968625</id><snippet>+</snippet></ROW><ROW><id>10968625</id><snippet>re.sub('\+', '', string)</snippet></ROW><ROW><id>10968625</id><snippet>exclusions = '|'.join(exclusionList)
first_word = re.sub(exclusions, '', first_word)
</snippet></ROW><ROW><id>10968625</id><snippet>|</snippet></ROW><ROW><id>10968625</id><snippet>x|y|z</snippet></ROW><ROW><id>10968791</id><snippet>import re

content="""fox
    &lt;a&gt;fox&lt;/a&gt; fox &lt;p fox&gt; and &lt;tag fox bar&gt; 
    &lt;a&gt;small &lt;b&gt;fox&lt;/b&gt; and&lt;/a&gt;
fox"""

rr = """
(fox)
(?! [^&lt;&gt;]*&gt;)
(?!
    (.(?!&lt;a))*
    &lt;/a
)
"""

p = re.compile(rr, re.IGNORECASE | re.MULTILINE | re.VERBOSE)
print p.sub(r'((\g&lt;1&gt;))', content)
</snippet></ROW><ROW><id>10968830</id><snippet>notAccepted</snippet></ROW><ROW><id>10968830</id><snippet>#!/usr/bin/python

import select
import socket

ports_list=[7777,7778]


def make_socket(number):
  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
  sock.bind(('', number))
  sock.listen(5)
  return sock


read_list= map(lambda x: make_socket(x), ports_list)

print(read_list)

print "Listening on port %s" % ports_list

notAccepted = read_list[:]

while True:
    readable, writable, errored = select.select(read_list, [], [])
    for s in readable:
        if s in notAccepted:
            client_socket, address = s.accept()
            read_list.append(client_socket)
            print "Connection from", address, client_socket
        else:
            data = s.recv(1024)
            if data:
                s.send(data)
            else:
                s.close()
                read_list.remove(s)
</snippet></ROW><ROW><id>10969458</id><snippet>@auth.requires_login()</snippet></ROW><ROW><id>10969458</id><snippet>user()</snippet></ROW><ROW><id>10969458</id><snippet>user()</snippet></ROW><ROW><id>10969458</id><snippet>def user():
    return dict(form=auth())
</snippet></ROW><ROW><id>10969458</id><snippet>auth()</snippet></ROW><ROW><id>10969458</id><snippet>__call__()</snippet></ROW><ROW><id>10969458</id><snippet>auth()</snippet></ROW><ROW><id>10969458</id><snippet>auth.login()</snippet></ROW><ROW><id>10969458</id><snippet>auth.login()</snippet></ROW><ROW><id>10969458</id><snippet>auth.logout()</snippet></ROW><ROW><id>10969458</id><snippet>URL()</snippet></ROW><ROW><id>10969458</id><snippet>A('Logout', _href=URL('default', 'user', args='logout'))
</snippet></ROW><ROW><id>10969458</id><snippet>auth.navbar()</snippet></ROW><ROW><id>10969618</id><snippet>def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = itertools.tee(iterable)
    next(b, None)
    return itertools.izip(a, b)
</snippet></ROW><ROW><id>10969618</id><snippet>for curr, next in pairwise(list):
</snippet></ROW><ROW><id>10969618</id><snippet>curr</snippet></ROW><ROW><id>10969618</id><snippet>(next_to_last, last)</snippet></ROW><ROW><id>10969618</id><snippet>(last, None)</snippet></ROW><ROW><id>10969618</id><snippet>izip</snippet></ROW><ROW><id>10969618</id><snippet>izip_longest</snippet></ROW><ROW><id>10969618</id><snippet>pairwise</snippet></ROW><ROW><id>10970034</id><snippet>mapred.min.split.size</snippet></ROW><ROW><id>10970034</id><snippet>-D mapred.min.split.size=10737418240
</snippet></ROW><ROW><id>10970034</id><snippet>isSplittable(FileSystem, Path)</snippet></ROW><ROW><id>10970093</id><snippet>WRITEFUNCTION</snippet></ROW><ROW><id>10970093</id><snippet>handle_data</snippet></ROW><ROW><id>10970093</id><snippet>JSON</snippet></ROW><ROW><id>10970093</id><snippet>JSON</snippet></ROW><ROW><id>10970093</id><snippet>curl</snippet></ROW><ROW><id>10970093</id><snippet>
def handle_data(self, buf): 
    try:
        self.tweet = json.loads(buf)
    except Exception as json_ex:
        self.data_list = buf.split('\r\n')
        for data in self.data_list:
            self.tweet_list.append(json.loads(data))    
</snippet></ROW><ROW><id>10970122</id><snippet>help(imshow)</snippet></ROW><ROW><id>10970122</id><snippet>aspect</snippet></ROW><ROW><id>10970122</id><snippet>imshow(z, origin='lower', extent=[-4,4,-1,1], aspect=4)
</snippet></ROW><ROW><id>10970122</id><snippet>plot</snippet></ROW><ROW><id>10970122</id><snippet>plot(x[:]*4, z[50, :])
</snippet></ROW><ROW><id>10970122</id><snippet>xticks(xticks()[0], [str(t*4) for t in xticks()[0]])
</snippet></ROW><ROW><id>10970124</id><snippet>from selenium.webdriver.common.action_chains import ActionChains

saveas = ActionChains(driver).key_down(Keys.CTRL)\
         .send_keys('s').key_up(Keys.CTRL)
saveas.perform()
</snippet></ROW><ROW><id>10970233</id><snippet>safe=True</snippet></ROW><ROW><id>10970233</id><snippet>update</snippet></ROW><ROW><id>10970233</id><snippet>lastError</snippet></ROW><ROW><id>10970233</id><snippet>None</snippet></ROW><ROW><id>10970233</id><snippet>_id</snippet></ROW><ROW><id>10970233</id><snippet>find_and_modify</snippet></ROW><ROW><id>10970233</id><snippet>update</snippet></ROW><ROW><id>10970348</id><snippet>staticfiles</snippet></ROW><ROW><id>10970348</id><snippet>models.py</snippet></ROW><ROW><id>10970348</id><snippet>views.py</snippet></ROW><ROW><id>10970348</id><snippet>templates</snippet></ROW><ROW><id>10970348</id><snippet>static</snippet></ROW><ROW><id>10970348</id><snippet>static</snippet></ROW><ROW><id>10970348</id><snippet>collectstatic</snippet></ROW><ROW><id>10970348</id><snippet>static</snippet></ROW><ROW><id>10970348</id><snippet>templates</snippet></ROW><ROW><id>10970348</id><snippet>static</snippet></ROW><ROW><id>10970348</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10970348</id><snippet>static</snippet></ROW><ROW><id>10970348</id><snippet>staticfiles</snippet></ROW><ROW><id>10970348</id><snippet>blog</snippet></ROW><ROW><id>10970348</id><snippet>photos</snippet></ROW><ROW><id>10970461</id><snippet>im = cv2.imread(path,-1)
</snippet></ROW><ROW><id>10970649</id><snippet>reporter:status:&lt;msg&gt;</snippet></ROW><ROW><id>10970649</id><snippet>reporter:counter:&lt;group&gt;,&lt;name&gt;,&lt;increment&gt;</snippet></ROW><ROW><id>10970690</id><snippet>lambda</snippet></ROW><ROW><id>10970690</id><snippet>column</snippet></ROW><ROW><id>10970690</id><snippet>lambda cls, v: cls.setAttribute( cls, column, v )
</snippet></ROW><ROW><id>10970690</id><snippet>column</snippet></ROW><ROW><id>10970690</id><snippet>'username'</snippet></ROW><ROW><id>10970690</id><snippet>column</snippet></ROW><ROW><id>10970690</id><snippet>    def __new__( cls, *args, **kwargs ):
        for column in cls.columns:
            setattr( cls, "set%s" % column.capitalize(), lambda cls, v, column=column: cls.setAttribute( cls, column, v ) )
        return super( Test, cls ).__new__( cls, *args, **kwargs )
</snippet></ROW><ROW><id>10970690</id><snippet>    def __new__( cls, *args, **kwargs ):
        def make_setter(column):
            return lambda cls, v: cls.setAttribute( cls, column, v )
        for column in cls.columns:
            setattr( cls, "set%s" % column.capitalize(), make_setter(column))
        return super( Test, cls ).__new__( cls, *args, **kwargs )
</snippet></ROW><ROW><id>10970739</id><snippet>application: your_app
version: 1
runtime: python27
api_version: 1
default_expiration: "1d"
threadsafe: True

- url: /about.html
  static_files: static/html/about.html
  upload: static/html/about.html
  secure: never

- url: /about
  script: main.app

- url: /.*
  script: main.app
</snippet></ROW><ROW><id>10970739</id><snippet>import webapp2
from google.appengine.ext.webapp2 import template
from google.appengine.ext.webapp2 import util
import os

class MainHandler(webapp2.RequestHandler):
    def get(self):
        template_values = {}
        path = os.path.join(os.path.dirname(__file__), 'index.html')
        self.response.out.write(template.render(path, template_values))

class AboutHandler(webapp2.RequestHandler):
    def get(self):
        self.response.our.write(template.render('about.html',None)

#  Setup the Application &amp; Routes
app = webapp2.WSGIApplication([
    webapp2.Route(r'/', MainHandler),
    webapp2.Route(r'/about', AboutHandler)
], debug=True)
</snippet></ROW><ROW><id>10970769</id><snippet>lambda x: my_dict[x]['market_data']['sellValue']
</snippet></ROW><ROW><id>10970769</id><snippet>lambda x: my_dict[x]['market_data']['buyValue']
</snippet></ROW><ROW><id>10970907</id><snippet>Container.array</snippet></ROW><ROW><id>10970907</id><snippet>Container</snippet></ROW><ROW><id>10970907</id><snippet>self.array = []</snippet></ROW><ROW><id>10970907</id><snippet>__init__()</snippet></ROW><ROW><id>10970907</id><snippet>    def __init__(self):
        self.array = []
        print self.array
</snippet></ROW><ROW><id>10970939</id><snippet>:</snippet></ROW><ROW><id>10970939</id><snippet>&gt;&gt;&gt; import numpy

&gt;&gt;&gt; a = numpy.array([[1,2,3],[2,2,2],[5,5,5]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [2, 2, 2],
       [5, 5, 5]])

&gt;&gt;&gt; a[0:2,0:2]
array([[1, 2],
       [2, 2]])
</snippet></ROW><ROW><id>10970965</id><snippet>def callback(files):
    joined_files = ''.join([open(f).read() for f in files])
    do_something_with(joined_files)

dialog = QtGui.QFileDialog()
dialog.setFileMode(3) #allow selection of multiple files
dialog.filesSelected.connect(callback)
dialog.show()
</snippet></ROW><ROW><id>10971159</id><snippet>d = dict()
d.get("abc")              #-&gt; None
d.get("abc", "default")   #-&gt; "default"
</snippet></ROW><ROW><id>10971195</id><snippet>def set_nested_val(l, indices, val):
  for i in indices[:-1]:
    l = l[i]
  l[indices[-1]] = val
</snippet></ROW><ROW><id>10971195</id><snippet>l</snippet></ROW><ROW><id>10971195</id><snippet>l</snippet></ROW><ROW><id>10971195</id><snippet>functools.partial</snippet></ROW><ROW><id>10971195</id><snippet>import functools
l = [[1, [2,3, [4,5,6]]]]
modify_list = functools.partial(set_nested_val, l)
</snippet></ROW><ROW><id>10971195</id><snippet>dict</snippet></ROW><ROW><id>10971264</id><snippet>import sqlite3

if __name__ == '__main__':
    connection = sqlite3.connect('array.db')
    cursor = connection.cursor()
    cursor.execute("create table array (word text);")
    cursor.executemany("insert into array values (?)", [[u'nabisco'],[u'usa'], [u'sharp'], [u'rise']])
    connection.commit()
    cursor.execute("select * from array;")
    print cursor.fetchall()
</snippet></ROW><ROW><id>10971399</id><snippet>func</snippet></ROW><ROW><id>10971399</id><snippet>@counter</snippet></ROW><ROW><id>10971399</id><snippet>def counter(func):
    def wrapper(val, *args, **kwargs):
        if val:
            wrapper.count = wrapper.count + 1
            if wrapper.count % 100000 == 0: # insert 100,000 at a time, should be speedier thanks to `.executemany()`
                to_logfile(str(wrapper.count) + '\n', 'counter2.log')
                return func(wrapper.valarr, *args, **kwargs)
            else:
                if len(wrapper.valarr)==1000000:
                    wrapper.vallarr = []
                wrapper.valarr.append([val])
                return
    wrapper.count = 0
    wrapper.valarr = []

    return wrapper
</snippet></ROW><ROW><id>10971466</id><snippet>Python 2.7.3 (default, Apr 20 2012, 22:39:59) 
[GCC 4.6.3] on linux2
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; soup = BeautifulSoup(urllib2.urlopen('http://morfix.nana10.co.il/test').read())

&gt;&gt;&gt; print soup

&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;

&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml"&gt;
&lt;head&gt;
&lt;base href="http://morfix.nana10.co.il/"/&gt;
&lt;script src="js/search2/performanceCounter.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
            var oLoadCounter = null;

            try
            {                                           
                oLoadCounter = new PerfomanceCounter('load',true);              
            }catch(e)
            {
            }                                         
        &lt;/script&gt;
&lt;meta content="hyV6tXF5r6ClcgwEB4v4Q9SDIZU_isqlAONC5zk4b-8" name="google-site-verification"&gt;&lt;meta content="CUQyCuYF1VpbyV7NX9gCZbe-D34iAwTtK9a5Y1YK3So" name="google-site-verification"&gt;&lt;meta content="jKNHb3nlKVIBl0Z059KKo7mtvAVY9U4gbC+W10WdhWc=" name="verify-v1"&gt;
&lt;link href="images/MobileLandingPage/icon.png" rel="image_src"&gt;
&lt;style type="text/css"&gt;
        @import "styles/search2_general.css?ver=280512";
        @import "styles/search2_he.css?ver=280512";
        @import "styles/mobileAppsModalPopup.css?ver=280512";
    &lt;/style&gt;
&lt;meta content="he" http-equiv="Content-Language"/&gt;
&lt;meta content="תרגום של המילה test על ידי אתר מורפיקס, השירות החינמי המוביל לתרגום אנגלית עברית, הכולל הקראת מילים וביטויים, משפטי דוגמה, ניקוד בעברית, ניתוח נטיות בעברית ובאנגלית ועוד." name="description"&gt;&lt;meta content="test,מילון, תרגום אנגלי עברי עיברי, מילון אנגלי עברי עיברי" name="keywords"&gt;&lt;link href="MorfixSearch.xml" rel="search" title="מילון מורפיקס" type="application/opensearchdescription+xml"/&gt;&lt;link href="images/favicon.ico" rel="shortcut icon"/&gt;
&lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="js/AjaxAutoComplete/AutoComplete.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;link href="js/AjaxAutoComplete/AutoComplete.css?ver=280512" rel="stylesheet" type="text/css"&gt;
&lt;script src="js/search2/global.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="external/embedded/mobileapps/js/mobileAppsPopup.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
        oMobileAppsPopup.initialize({ mode: 'modal'});
    &lt;/script&gt;
&lt;script language="javascript" type="text/javascript"&gt;
        $(document).ready(function()
        {
            oSearch.changeDefaultSearchPage("http://morfix.nana10.co.il/");
            oStuff.changeKeyboardPage("http://morfix.nana10.co.il/keyboard2.aspx?source=site");
            oDynamicAds.changeMarginLeftAdDirection('right');
        });
    &lt;/script&gt;
&lt;script type="text/javascript"&gt;
           try
            {                           
                oStuff.oFeatures.oPerformance.bMonitor = true;                                              
            }catch(e)
            {
            }                                         
        &lt;/script&gt;
&lt;script type="text/javascript"&gt;                                                             
                oSearch.onLoad(90,'transmit performance', function() { 
                   setTimeout('oPerformance.transmitPerformance();',5000);
                });                                                 
            &lt;/script&gt;
&lt;script type="text/javascript"&gt;
        $(document).ready(function()
        {                                              
           $("[id$=searchField]").autocomplete("http://dictionary.melingo.com/autocomplete/",                                   
            {
            delay:400,
            minChars:3,
            matchSubset:1,
            matchContains:1,
            cacheLength:0,
            cacheActive:false,
            width:443,
            OffsetX: 75,
            offsetHeight: 44,
            maxItemsToShow:10

            });     
        });             
     &lt;/script&gt;
&lt;script type="text/javascript"&gt;
        $(document).ready(function()
        {                                              
           $("[id$=searchField]").keypress(function()
                                        {
                                            imposeMaxLength(this,50);
                                        });  
           $("[id$=searchField]").blur(function()
                                        {
                                            imposeMaxLength(this,50);
                                        });                                                
           $("[id$=searchField]").bind('input paste',function(eventObject)
                                        {
                                            imposeMaxLength(this,50);
                                        });                             
        });     
    &lt;/script&gt;
&lt;script type="text/javascript"&gt; 

      var _gaq = _gaq || []; 
      _gaq.push( 
          ['_setAccount', 'UA-5815264-1'], 
          ['_setDetectFlash', false],
          ['_trackPageview']
        );            

      (function() { 
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; 
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; 
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); 
      })(); 

    &lt;/script&gt;
&lt;!-- (C)2000-2011 Gemius SA - gemiusAudience / nana10.co.il / morfix --&gt;
&lt;script type="text/javascript"&gt;
    &lt;!--//--&gt;&lt;![CDATA[//&gt;&lt;!--
        var pp_gemius_identifier = new String('AqJAUqeLz8WkBf708M4kAJdRTO4I5.hWHKupK3C.n2b.l7');
    //--&gt;&lt;!]]&gt;
    &lt;/script&gt;
&lt;script src="http://common.nana10.co.il/JScript/GeneralModules/Banner/xgemius.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="http://storage.conduit.com/PS/morfix/tbinstall/tbInstall.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;meta content="197722006971114" property="fb:app_id"/&gt;
&lt;meta content="100000681777777" property="fb:admins"/&gt;
&lt;meta content="100000681777777" property="fb:moderator"/&gt;
&lt;meta content="http://morfix.nana10.co.il/default.aspx" property="og:url"/&gt;
&lt;script src="js/Facebook.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;title&gt;
    מילון מורפיקס – Morfix Dictionary  - test
&lt;/title&gt;&lt;/link&gt;&lt;/meta&gt;&lt;/meta&gt;&lt;/link&gt;&lt;/meta&gt;&lt;/meta&gt;&lt;/meta&gt;&lt;/head&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;
            var CM8Server = "nana10.checkm8.com";
            var CM8Cat = "pid48.affiliates.morfix.search_page";
            var CM8Profile = "";
        &lt;/script&gt;
&lt;script type="text/javascript"&gt;
                oStuff.oFeatures.oSound.bEnable = true;
                oStuff.oFeatures.oSound.SoundManagerPath = './SoundManager';
           &lt;/script&gt;
&lt;script src="SoundManager/soundmanager2-nodebug-jsmin.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="js/search2/sound/flashblock.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="js/search2/flash/detectflash.js?ver=280512" type="text/javascript"&gt;&lt;/script&gt;
&lt;div id="underHeaderAdv"&gt;
&lt;div class="adv_ph"&gt;
&lt;center&gt;
&lt;div id="_ctl0_frmResultsPageUnderHeaderLeft1" style="overflow:hidden;padding:0;margin:0;width:780px;height:90px;"&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style="height:5px;"&gt;&lt;/div&gt;
&lt;div id="_ctl0_headerToolBarContainer" style="overflow:hidden;padding:0;margin:0;margin-left:auto ;margin-right:auto ;width:950px;height:36px;"&gt;
&lt;/div&gt;
&lt;div id="page"&gt;
&lt;div id="header2"&gt;
&lt;div class="first_row"&gt;
&lt;div class="google"&gt;
&lt;div class="googleLogo"&gt;&lt;/div&gt;
&lt;form action="search.aspx" id="cse-search-box" onsubmit="_gaq.push(['_trackEvent', 'Google', 'Search', 'Milon search page']);"&gt;
&lt;input name="cx" type="hidden" value="partner-pub-0096668058692956:f679gw5cgah"/&gt;
&lt;input name="cof" type="hidden" value="FORID:11"/&gt;
&lt;input name="ie" type="hidden" value="UTF-8"/&gt;
&lt;input name="hl" type="hidden" value="he"/&gt;
&lt;input id="queryField" name="q" size="27" style="" type="text"/&gt;
&lt;input class="GoogleSubmitButton" name="sa" type="submit" value=""/&gt;
&lt;/form&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="right_menu"&gt;
&lt;div class="right_menu_row"&gt;
&lt;div class="itemDouble button morfixApps" id="mobileAppsBtn" onclick="oStuff.gaLog('UserAction','To page: mobile applications (Upper Menu)'); return oMobileAppsPopup.startTimedoutModalPopup({url:'external/Embedded/MobileApps/MobileAppsDownload2.htm'});" onmouseout="this.className='itemDouble button morfixApps'" onmouseover="this.className='morfixAppsOver button'"&gt;
&lt;em style="vertical-align:top;"&gt;אפליקציות להורדה &lt;b&gt;חינם!&lt;/b&gt;&lt;/em&gt;
&lt;/div&gt;
&lt;div class="itemDouble button" onclick="oStuff.gaLog('UserAction','To page: storefix (Upper Menu)'); return oBrowser.openURL('https://www.facebook.com/morfix?sk=app_144440148901844','_blank');" onmouseout="this.className='itemDouble button'" onmouseover="this.className='itemDoubleOver button'"&gt;&lt;img alt="storefix" src="../images/hive/storefixbtn.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="right_menu_row"&gt;
&lt;div class="item button" onclick="oStuff.gaLog('UserAction','To page: blog (Upper Menu)'); return oBrowser.openURL('http://blog.ravmilim.co.il/','_blank');" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'" style="font-size:9pt"&gt;
                            בלוג רב-מילים
                        &lt;/div&gt;
&lt;div class="item button" onclick="oStuff.gaLog('UserAction','To page: download toolbar (Upper Menu)'); return oBrowser.openURL('http://downloadmytoolbar.com/morfix/lp2/','_blank');" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'"&gt;סרגל-כלים&lt;/div&gt;
&lt;div class="item button" onclick="oStuff.gaLog('UserAction','To page: Nakdan (Upper Menu)'); return oBrowser.openURL('http://www.melingo.co.il/nakdan/naerr.asp','_blank');" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'"&gt;נקדן טקסט&lt;/div&gt;
&lt;div class="item button" id="_ctl0_divChangeLangHiveBtn" onclick="oStuff.gaLog('UserAction','To page: english version (Upper Menu)');return oBrowser.openURL('http://morfix.nana10.co.il/en/test')" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'" style="color:#06377A"&gt;English
                        &lt;/div&gt;
&lt;/div&gt;
&lt;div class="right_menu_row"&gt;
&lt;div class="item button" onclick="oStuff.gaLog('UserAction','To page: Ravmilim (Upper Menu)'); return oBrowser.openURL('http://www.ravmilim.co.il','_blank');" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'"&gt;
                            רב-מילים&lt;/div&gt;
&lt;div class="item button" id="_ctl0_divMakeMyHomepage" onclick="oStuff.gaLog('UserAction','Make Morfix my homepage'); return oStuff.makeHomePage('http://morfix.nana10.co.il/');" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'" style="font-size:9pt"&gt;הפוך לדף הבית
                        &lt;/div&gt;
&lt;div class="item button" onclick="oStuff.gaLog('UserAction','To page: email us (Upper Menu)');window.open('http://morfix.nana10.co.il/pages/contactus', 'morfix_emailus', 'width=600,height=600,status=yes,toolbar=no,menubar=no,scrollbars=yes,left=80,top=60');return false;" onmouseout="this.className='item button'" onmouseover="this.className='itemOver button'" style=""&gt;כתבו לנו
                        &lt;/div&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id="mobileAppsPopUp"&gt;
&lt;div id="mobileAppsPopUpContent"&gt;
&lt;div id="mobileAppsPopUpCloseButton"&gt;&lt;/div&gt;
&lt;iframe frameborder="0" scrolling="no" src="external/Embedded/MobileApps/MobileAppsDownload2.htm"&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="second_row"&gt;
&lt;div class="nanaAlign"&gt;
&lt;div class="nana_logo"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="logo_ph"&gt;
&lt;div class="logo" onclick="oBrowser.openURL('http://morfix.nana10.co.il/')" style="cursor:pointer;"&gt;&lt;/div&gt;
&lt;div class="faceBookLikes"&gt;
&lt;div id="_ctl0_frmLogoHeaderLeft1" style="overflow:visible;padding:0;margin:0;width:100px;height:21px;"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;form action="default.aspx?hl=&amp;q=test" id="aspnetForm" method="post" name="aspnetForm" onsubmit="return false;"&gt;
&lt;input id="originalSearch" name="originalSearch" type="hidden" value="test"/&gt;
&lt;input id="isC" name="isC" type="hidden" value="0"/&gt;
&lt;input id="q" name="q" type="hidden" value="test"/&gt;
&lt;input id="source" name="source" type="hidden" value="milon"/&gt;
&lt;input id="__VIEWSTATE" name="__VIEWSTATE" type="hidden" value="/wEPDwUKLTEwNTI0MDMxN2QYAgUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFEl9jdGwwOnRyYW5zbGF0ZUJ0bgUuX2N0bDA6bWFpbkNvbnRlbnQ6dGl0bGVDb250cm9sOnZpZXdDb2xsb2NhdGlvbg8PZGZk/g1bbc4Dh0CUEZ6GxJzIGld9d48="/&gt;
&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_above_translations_results', sHtmlContent : '&lt;!-- Morfix_HE_Sentences --&gt;&lt;div id='div-gpt-ad-1334224791925-0' style='width:468px; height:60px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1334224791925-0'); });', nWidth : 468, nHeight : 60});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_popUnder', sHtmlContent : '&lt;div id="CM8ShowAd_RichInline" title="RichInline"&gt;&lt;/div&gt;', sType : 'div', sScriptContent: '', nWidth : 10, nHeight : 10});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_frmLogoHeaderLeft1', sHtmlContent : '&lt;iframe src="//www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.morfix.co.il&amp;send=false&amp;layout=button_count&amp;width=100&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font&amp;height=21&amp;appId=210469539042747" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100px; height:21px;" allowTransparency="true"&gt;&lt;/iframe&gt;', sType : 'div', sScriptContent: '', nWidth : 100, nHeight : 21});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_rowSearch_subrow1_col3_results', sURL : 'external/ads/nana/rowsearch_subrow1_col3_results.htm', sType : 'div', nWidth : 300, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row1col3_results', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row01Col03 --&gt;&lt;div id='div-gpt-ad-1330963433824-2' style='width:300px; height:300px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-2'); });', nWidth : 300, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row2col3_results', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row02Col03 --&gt;&lt;div id='div-gpt-ad-1330963433824-5' style='width:300px; height:300px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-5'); });', nWidth : 300, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row3col3_results', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row03Col03 --&gt;&lt;div id='div-gpt-ad-1330963433824-8' style='width:300px; height:400px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-8'); });', nWidth : 300, nHeight : 400});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row1col1', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row01Col01 --&gt;&lt;div id='div-gpt-ad-1330963433824-0' style='width:300px; height:300px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-0'); });', nWidth : 300, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row2col1', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row02Col01 --&gt;&lt;div id='div-gpt-ad-1330963433824-3' style='width:300px; height:300px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-3'); });', nWidth : 300, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row3col1', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row03Col01 --&gt;&lt;div id='div-gpt-ad-1330963433824-6' style='width:300px; height:400px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-6'); });', nWidth : 300, nHeight : 400});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row1col2', sHtmlContent : '&lt;div id="CM8ShowAd_Box_250x250_1" title="Box_250x250_1"&gt;&lt;/div&gt;', sType : 'div', sScriptContent: '', nWidth : 250, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row2col2', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row02Col02 --&gt;&lt;div id='div-gpt-ad-1330963433824-4' style='width:250px; height:250px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-4'); });', nWidth : 250, nHeight : 250});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_row3col2', sHtmlContent : '&lt;!-- Morfix_HE_Bottom_Row03Col02 --&gt;&lt;div id='div-gpt-ad-1330963433824-7' style='width:250px; height:400px;'&gt;&lt;/div&gt;', sType : 'div', sScriptContent: 'googletag.cmd.push(function() { googletag.display('div-gpt-ad-1330963433824-7'); });', nWidth : 250, nHeight : 400});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_frmUnderSearchBoxLeft1', sHtmlContent : '&lt;div&gt;&lt;/div&gt;', sType : 'div', sScriptContent: '', nWidth : 468, nHeight : 60});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdvHighPriority({sID : '_ctl0_frmResultsPageUnderHeaderLeft1', sHtmlContent : '&lt;div id="CM8ShowAd_Plazma_720x300" title="Plazma_720x300"&gt;&lt;/div&gt;&lt;div id="CM8ShowAd_Mainstrip_780x150" title="Mainstrip_780x150"&gt;&lt;/div&gt;&lt;div id="CM8ShowAd_Top_728x90" title="Top_728x90"&gt;&lt;/div&gt;', sType : 'div', sScriptContent: '', nWidth : 780, nHeight : 90});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_frmMarginLeftResultsTop1', sHtmlContent : '&lt;div id="CM8ShowAd_Ozen_160x600" title="Ozen_160x600"&gt;&lt;/div&gt;', sType : 'div', sScriptContent: '', nWidth : 160, nHeight : 600});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdv({sID : '_ctl0_frmMarginRightResultsTop1', sURL : 'external/ads/nana/margin_right_result.htm', sType : 'div', nWidth : 160, nHeight : 600});&lt;/script&gt;&lt;script type="text/javascript"&gt;oAdv.registerAdvHighPriority({sID : '_ctl0_headerToolBarContainer', sURL : 'http://common.nana10.co.il/GeneralModules/Category/default.asp?sid=27&amp;pid=48&amp;CategoryID=27&amp;TypeID=1000&amp;ABG=c03&amp;AFR=fff&amp;BG=F4F4F4&amp;FR=2&amp;StripBG=c03&amp;Logo=2', sType : 'div', nWidth : 950, nHeight : 36});&lt;/script&gt;
&lt;input id="__EVENTVALIDATION" name="__EVENTVALIDATION" type="hidden" value="/wEWAwLF0uiPDQLExriHBgK1vsKpCCf/JKPBwLmLLUs6eTqpIuD8QTIh"/&gt;
&lt;div id="main"&gt;
&lt;div class="row"&gt;
&lt;div class="colspan_1_2"&gt;
&lt;div id="search"&gt;
&lt;div class="searchbox_ph"&gt;
&lt;div class="searchbox_bg"&gt;
&lt;div class="container"&gt;
&lt;div class="title"&gt;
&lt;div class="description"&gt;הקלידו מילה, ביטוי, מושג או משפט קצר, בעברית או באנגלית&lt;/div&gt;
&lt;/div&gt;
&lt;textarea class="searchField english" id="_ctl0_searchField" name="_ctl0:searchField" onkeyup="oUI.changeSearchFieldDir();" style="overflow:hidden;"&gt;test&lt;/textarea&gt;
&lt;div class="keyboard_container button" onclick="oStuff.gaLog('UserAction','Show virtual keyboard');oStuff.openKeyboard();" title="לחצו לקבלת מקלדת וירטואלית עברית"&gt;
&lt;div class="keyboard"&gt;&lt;/div&gt;
&lt;div style="color:Gray;font-size:7pt;"&gt;מקלדת&lt;/div&gt;
&lt;/div&gt;
&lt;div class="buttons_container"&gt;
&lt;div class="action_buttons"&gt;
&lt;div class="translate button" onclick="oStuff.gaLog('UserAction','milon search'); return oSearch.performSearch($('[id$=searchField]').val());" title="לחצו לתרגום מילים מעברית לאנגלית ולהפך"&gt;
&lt;input border="0" id="_ctl0_translateBtn" name="_ctl0:translateBtn" style="display:none;" type="image"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="features_menu"&gt;
&lt;div class="search button" onclick="oStuff.gaLog('UserAction','Open Last search list');oUI.changeToWait(this);oBrowser.openURL('http://morfix.nana10.co.il/pages/lastsearches');" title="לחצו לקבלת רשימת מילים אחרונות – לחזרה ולשינון"&gt;&lt;/div&gt;
&lt;div class="hagrel button" onclick="oStuff.gaLog('UserAction','Request Gesture');oStuff.executeGesture(this);" title="לחצו להגרלת ערך מעניין מויקיפדיה – להרחבת הידע הכללי"&gt;&lt;/div&gt;
&lt;div class="facebookCommentsLink" id="_ctl0_facebookCommentsLinkPlaceHolder_facebookCommentsLinkRef" onclick="oStuff.scrollTo('facebookComments')"&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="result_ph"&gt;
&lt;div class="warning_line content" id="reachedMaxCharsLimit" style="display:none"&gt;
&lt;div class="content"&gt;
                                ניתן להקליד עד 50 תווים בלבד                            
                            &lt;/div&gt;
&lt;/div&gt;
&lt;div class="box584_m"&gt;
&lt;div style="padding: 10px 10px 0 10px"&gt;
&lt;script type="text/javascript"&gt;
            oFacebook.setFacebookIdURL('http://morfix.nana10.co.il/default.aspx?q=test&amp;source=Milon');  
        &lt;/script&gt;
&lt;!-- flash for sound code --&gt;
&lt;div&gt;
&lt;div id="noFlashDiv"&gt;
&lt;div class="warning_line noFlash button" onclick="oBrowser.openURL('http://www.adobe.com/go/getflash/','_blank');"&gt;&lt;div class="content"&gt;על-מנת להשתמש באפשרות השמעת מילים עליכם להתקין פלאש. &lt;span class="link"&gt;לחצו כאן&lt;/span&gt; להתקנה&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="warning_line" id="blockFlashDiv"&gt;&lt;div class="content" style="margin-top:2px"&gt;על-מנת להשתמש באפשרות השמעת מילים עליכם ללחוץ על סרטון הפלאש שמופיע מתחת להודעה זו&lt;/div&gt;&lt;/div&gt;
&lt;div class="swf-default" id="sm2-container" style=""&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h1 class="box_title"&gt;תוצאות תרגום עבור: test&lt;/h1&gt;
&lt;div id="_ctl0_mainContent_milonResultControl_ResultContainer"&gt;
&lt;div class="translate_box_en box heWord0"&gt;
&lt;div class="title_ph"&gt;
&lt;div class="word_ph translation_en"&gt;
&lt;span class="word"&gt;test&lt;/span&gt;
&lt;span class="diber"&gt;noun&lt;/span&gt;
&lt;/div&gt;
&lt;div class="translation translation_he heTrans"&gt;מִבְחָן, מִבְדָּק, טֶסְט; תַּבְחִין &lt;/div&gt;
&lt;div class="translation translation_he heSoundTrans"&gt; &lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="goodies_ph"&gt;
&lt;div class="goody"&gt;
&lt;a class="button speaker imageSoundUnclicked" onclick="oStuff.gaLog('UserAction','Play sound');oSound.playSound('http://morfix.nana10.co.il/getwave.aspx?word=test&amp;ext=.wav&amp;source=site&amp;isEnglish=true')" style="cursor:wait;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="extra_data"&gt;
&lt;div class="inflection_ph" id="inflDiv0"&gt;
&lt;div class="english translation_header"&gt;
                                            test
                                        &lt;/div&gt;
&lt;div dir="ltr" style="position:relative"&gt;
                                            test: &lt;em class="english english_font"&gt;יחיד&lt;/em&gt;;
                                            tests: &lt;em class="english english_font"&gt;רבים&lt;/em&gt;;

                                        &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="result_seperator"&gt;&lt;/div&gt;
&lt;div class="translate_box_en box heWord1"&gt;
&lt;div class="title_ph"&gt;
&lt;div class="word_ph translation_en"&gt;
&lt;span class="word"&gt;test&lt;/span&gt;
&lt;span class="diber"&gt;verb&lt;/span&gt;
&lt;/div&gt;
&lt;div class="translation translation_he heTrans"&gt;בָּדַק, בָּחַן &lt;/div&gt;
&lt;div class="translation translation_he heSoundTrans"&gt; &lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="goodies_ph"&gt;
&lt;div class="goody"&gt;
&lt;a class="button speaker imageSoundUnclicked" onclick="oStuff.gaLog('UserAction','Play sound');oSound.playSound('http://morfix.nana10.co.il/getwave.aspx?word=test&amp;ext=.wav&amp;source=site&amp;isEnglish=true')" style="cursor:wait;"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class="clear"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="extra_data"&gt;
&lt;div class="inflection_ph" id="inflDiv1"&gt;
&lt;div class="english translation_header"&gt;
                                            to test
                                        &lt;/div&gt;
&lt;div dir="ltr" style="position:relative"&gt;
                                          tested: &lt;em class="english english_font"&gt;עבר&lt;/em&gt;;
                                          test / tests: &lt;em class="english english_font"&gt;הווה&lt;/em&gt;;
                                          is testing: &lt;em class="english english_font"&gt;הווה ממושך&lt;/em&gt;;
                                          has tested: &lt;em class="english english_font"&gt;הווה מושלם&lt;/em&gt;;
                                          will test: &lt;em class="english english_font"&gt;עתיד&lt;/em&gt;;

                                        &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style="height:5px;"&gt;&lt;/div&gt;
&lt;div id="SampleSentencesTitle"&gt;דוגמאות שימוש:&lt;/div&gt;
&lt;div style="height:3px;"&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>10971482</id><snippet>SELECT coalesce(max(ID_B),0)+1 
FROM yourTable 
WHERE ID_A = '1'</snippet></ROW><ROW><id>10971516</id><snippet>for line in iter(sys.stdin.readline, ''):
    print line,
</snippet></ROW><ROW><id>10971516</id><snippet>for line in iter(sys.stdin.readline, ''):
    print(line, end='')
</snippet></ROW><ROW><id>10971516</id><snippet>iter()</snippet></ROW><ROW><id>10971607</id><snippet>decimal</snippet></ROW><ROW><id>10971607</id><snippet>&gt;&gt;&gt; s = '23.456'
&gt;&gt;&gt; d = decimal.Decimal(s)

&gt;&gt;&gt; d - decimal.Decimal('1')
Decimal('22.456')
&gt;&gt;&gt; d - decimal.Decimal('1.0')
Decimal('22.456')
</snippet></ROW><ROW><id>10971607</id><snippet>&gt;&gt;&gt; d - 1
Decimal('22.456')
&gt;&gt;&gt; d - 1.0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for -: 'Decimal' and 'float'
</snippet></ROW><ROW><id>10971767</id><snippet>zip</snippet></ROW><ROW><id>10971767</id><snippet>n = 3
s = "The quick brown fox jumps over the lazy dog."
zip(*(s[i:] for i in xrange(n)))
</snippet></ROW><ROW><id>10971767</id><snippet>itertools</snippet></ROW><ROW><id>10971767</id><snippet>from itertools import izip, islice, tee

def slices(iterable, n):
    return izip(*(islice(it, i, None) for i, it in enumerate(tee(iterable, n))))
</snippet></ROW><ROW><id>10971767</id><snippet>i</snippet></ROW><ROW><id>10971770</id><snippet>pickle</snippet></ROW><ROW><id>10972075</id><snippet>import</snippet></ROW><ROW><id>10972075</id><snippet>from threading, multiprocessing import Thread, Condition, Lock
</snippet></ROW><ROW><id>10972075</id><snippet>Condition</snippet></ROW><ROW><id>10972524</id><snippet>conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
</snippet></ROW><ROW><id>10972557</id><snippet>pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)
</snippet></ROW><ROW><id>10972557</id><snippet>bar</snippet></ROW><ROW><id>10972557</id><snippet>df['bar']</snippet></ROW><ROW><id>10972767</id><snippet>running install
running build
running build_ext
skipping 'squish.c' Cython extension (up-to-date)
building 'squish' extension
gcc -pthread -fno-strict-aliasing -march=i686 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -DNDEBUG -march=i686 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -fPIC -I.. -I/usr/include/python2.7 -c squish.c -o build/temp.linux-i686-2.7/squish.o
In file included from squish.c:274:0:
/usr/include/squish.h:32:1: error: unknown type name 'namespace'
/usr/include/squish.h:32:18: error: expected '=', ',', ';', 'asm' or '__attribute__' before '{' token
squish.c: In function '__pyx_pf_6squish_compressImage':
squish.c:790:22: error: 'squish' undeclared (first use in this function)
squish.c:790:22: note: each undeclared identifier is reported only once for each function it appears in
squish.c:790:28: error: expected ';' before ':' token
squish.c:866:10: error: expected expression before ':' token
squish.c: In function '__pyx_pf_6squish_2decompressImage':
squish.c:1202:10: error: expected expression before ':' token
error: command 'gcc' failed with exit status 1
</snippet></ROW><ROW><id>10972767</id><snippet>#ifndef SQUISH_H
#define SQUISH_H

//! All squish API functions live in this namespace.
namespace squish {

// -----------------------------------------------------------------------------
</snippet></ROW><ROW><id>10972767</id><snippet>namespace</snippet></ROW><ROW><id>10972825</id><snippet>custom_sqrt</snippet></ROW><ROW><id>10972825</id><snippet>custom_sqrt</snippet></ROW><ROW><id>10972825</id><snippet>def custom_sqrt(num):
    if num &gt;= 0:
        return math.sqrt(num)
    else: 
        return 0
</snippet></ROW><ROW><id>10972846</id><snippet>f.seek(10)
f.read(1)
</snippet></ROW><ROW><id>10972859</id><snippet>file = open("foo.txt", "r+")  # reading and writing to file
</snippet></ROW><ROW><id>10972859</id><snippet>file = open("foo.txt", "w")   # writing only to file
</snippet></ROW><ROW><id>10972865</id><snippet>import scipy
from scipy import interpolate
import numpy as np

#This is your data, but we're 'zooming' into just 5 data points
#because it'll provide a better visually illustration
#also we need to transpose to get the data in the right format
data = data[100:105].transpose()

#now we get all the knots and info about the interpolated spline
tck, u= interpolate.splprep(data)
#here we generate the new interpolated dataset, 
#increase the resolution by increasing the spacing, 500 in this example
new = interpolate.splev(np.linspace(0,1,500), tck)

#now lets plot it!
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
fig = plt.figure()
ax = Axes3D(fig)
ax.plot(data[0], data[1], data[2], label='originalpoints', lw =2, c='Dodgerblue')
ax.plot(new[0], new[1], new[2], label='fit', lw =2, c='red')
ax.legend()
plt.savefig('junk.png')
plt.show()
</snippet></ROW><ROW><id>10972969</id><snippet>with open("info.txt") as inf:
    data = []
    for line in inf:
        line = line.split()
        if len(line)==4:
            data.append(line)

data.sort(key=lambda s:(s[2],s[1]))
</snippet></ROW><ROW><id>10972969</id><snippet>from collections import namedtuple
Input = namedtuple('Input', ('name', 'time', 'identity', 'domain'))

with open("info.txt") as inf:
    inf.next()  # skip header
    data = [Input(*(line.split()) for line in inf]

data.sort(key=lambda s:(s['identity'],s['time']))
</snippet></ROW><ROW><id>10972969</id><snippet>import time

class Data(object):
    def __init__(self, event, time_, identity, domain):
        self.event = event
        self.time = time.strptime(time_, "%H%M")
        self.identity = identity
        self.domain = domain

with open("info.txt") as inf:
    data = []
    for line in inf:
        try:
            data.append(Data(*(line.split()))
        except TypeError:
            # wrong number of arguments (ie header or footer)
            pass

data.sort(key=lambda s:(s.identity,s.time))
</snippet></ROW><ROW><id>10973140</id><snippet>g.db.execute('insert into images(fileName, fileTitle, file_height, file_width, file_size) values (?,?,?,?,?)', (filename, request.form['title'], fileMetaData['height'], fileMetaData['width'], fileMetaData['fileSize'])) 
</snippet></ROW><ROW><id>10973336</id><snippet>json</snippet></ROW><ROW><id>10973336</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; s = '{"name": "Alex"}'
&gt;&gt;&gt; obj = json.loads(s)
&gt;&gt;&gt; obj
{'name': 'Alex'}
&gt;&gt;&gt; obj["name"]
'Alex'
</snippet></ROW><ROW><id>10973336</id><snippet>json</snippet></ROW><ROW><id>10973336</id><snippet>simplejson</snippet></ROW><ROW><id>10973336</id><snippet>import simplejson as json
</snippet></ROW><ROW><id>10973426</id><snippet>def find2LetterWords():
     #this generates all possible 2-letter combos with a list comprehension
     words = [first + second for second in alphabet for first in alphabet]
     #create a new list with only those words that are in your_dictionary (a list)
     real_words = [word for word in words if word in your_dictionary]
     return real_words
</snippet></ROW><ROW><id>10973426</id><snippet>[word for word in [first + second for second in alphabet for first in alphabet] if word in your_dictionary]
</snippet></ROW><ROW><id>10973426</id><snippet>your_dictionary</snippet></ROW><ROW><id>10973469</id><snippet>source bin/activate
file `which python`
# .../bin/python: Mach-O universal binary with 2 architectures
# .../bin/python (for architecture i386):   Mach-O executable i386
# .../bin/python (for architecture x86_64): Mach-O 64-bit executable x86_64
lipo -thin i386 `which python` -output `which python`
file `which python`
# .../bin/python: Mach-O executable i386
</snippet></ROW><ROW><id>10973513</id><snippet>IconView</snippet></ROW><ROW><id>10973513</id><snippet>gtk.ListStore.reorder</snippet></ROW><ROW><id>10973513</id><snippet>gtk.ListStore.get_iter()</snippet></ROW><ROW><id>10973513</id><snippet>gtk.ListStore.get_iter_first()</snippet></ROW><ROW><id>10973518</id><snippet>request.META['REMOTE_ADDR']</snippet></ROW><ROW><id>10973518</id><snippet>v4.yourdomain.tld</snippet></ROW><ROW><id>10973518</id><snippet>v6.yourdomain.tld</snippet></ROW><ROW><id>10973518</id><snippet>&lt;script src="//vX.yourdomain.tld/?token=YYY"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>10973518</id><snippet>X=6</snippet></ROW><ROW><id>10973518</id><snippet>X=4</snippet></ROW><ROW><id>10973550</id><snippet>bibliography = [
    { 'name': 'bdhar', 'summary': 'questioner' },
    { 'name': 'msw', 'content': 'an answer' },
]
</snippet></ROW><ROW><id>10973550</id><snippet>for article in bibliography:
    for key in article:
        ...
</snippet></ROW><ROW><id>10973638</id><snippet>import json

array = '{"fruits": ["apple", "banana", "orange"]}'
data  = json.loads(array)
print data['fruits']
# {u'fruits': [u'apple', u'banana', u'orange']}
</snippet></ROW><ROW><id>10973638</id><snippet>data</snippet></ROW><ROW><id>10973638</id><snippet>data['fruits']</snippet></ROW><ROW><id>10973817</id><snippet>map</snippet></ROW><ROW><id>10973817</id><snippet>map(f, iterable)
</snippet></ROW><ROW><id>10973817</id><snippet>[f(x) for x in iterable]
</snippet></ROW><ROW><id>10973817</id><snippet>map</snippet></ROW><ROW><id>10973817</id><snippet>[(a, b) for a in iterable_a for b in iterable_b]
</snippet></ROW><ROW><id>10973817</id><snippet>list = []
for a in iterable_a:
    for b in iterable_b:
        list.append((a, b))
</snippet></ROW><ROW><id>10973893</id><snippet>request.POST</snippet></ROW><ROW><id>10973893</id><snippet>RegisterForm(request.POST)</snippet></ROW><ROW><id>10973893</id><snippet>RegisterForm()</snippet></ROW><ROW><id>10973893</id><snippet>    form = RegisterForm(request.POST)
    if form.is_valid():
       ....
    context['able_form'] = form # you must pass back the bound form if you want to see errors.
return render_to_response('register.html', context, RequestContext(request))
</snippet></ROW><ROW><id>10973893</id><snippet>able_form</snippet></ROW><ROW><id>10974075</id><snippet>struct</snippet></ROW><ROW><id>10974075</id><snippet>&gt;&gt;&gt; struct.unpack("&lt;f", "\x00\x00\x00\x3f")
(0.5,)
</snippet></ROW><ROW><id>10974075</id><snippet>&gt;&gt;&gt; struct.unpack("&lt;f", struct.pack("&lt;I", 1056964608))
(0.5,)
</snippet></ROW><ROW><id>10974162</id><snippet>def pathchange(old, new):
    if not(os.path.exists(new)):
        os.mkdir(new)
    os.chdir(new)
</snippet></ROW><ROW><id>10974162</id><snippet>old</snippet></ROW><ROW><id>10974175</id><snippet>__str__</snippet></ROW><ROW><id>10974175</id><snippet>__str__</snippet></ROW><ROW><id>10974175</id><snippet>__repr__</snippet></ROW><ROW><id>10974175</id><snippet>&lt;classname object at id&gt;</snippet></ROW><ROW><id>10974175</id><snippet>repr(object)</snippet></ROW><ROW><id>10974175</id><snippet>object.__repr__()</snippet></ROW><ROW><id>10974197</id><snippet>line = f.readlines ()
</snippet></ROW><ROW><id>10974197</id><snippet>plt.pie (values [start:stop], labels=labels [start:stop])
</snippet></ROW><ROW><id>10974197</id><snippet>start</snippet></ROW><ROW><id>10974197</id><snippet>stop</snippet></ROW><ROW><id>10974197</id><snippet>start = 2</snippet></ROW><ROW><id>10974197</id><snippet>stop = 5</snippet></ROW><ROW><id>10974413</id><snippet>.pth</snippet></ROW><ROW><id>10974413</id><snippet>.pth</snippet></ROW><ROW><id>10974413</id><snippet>sys.path</snippet></ROW><ROW><id>10974413</id><snippet>sys.path</snippet></ROW><ROW><id>10974413</id><snippet>sys.path</snippet></ROW><ROW><id>10974413</id><snippet>.pth</snippet></ROW><ROW><id>10974413</id><snippet>sys</snippet></ROW><ROW><id>10974413</id><snippet>sys.path</snippet></ROW><ROW><id>10974413</id><snippet>import sys
sys.path.insert(0, '/this/path/will/be/considered/first')
</snippet></ROW><ROW><id>10974508</id><snippet>logging</snippet></ROW><ROW><id>10974508</id><snippet>locals()</snippet></ROW><ROW><id>10974508</id><snippet>self</snippet></ROW><ROW><id>10974508</id><snippet>%</snippet></ROW><ROW><id>10974508</id><snippet>"%(foo)s" % bar</snippet></ROW><ROW><id>10974508</id><snippet>bar["foo"]</snippet></ROW><ROW><id>10974508</id><snippet>pdb</snippet></ROW><ROW><id>10974508</id><snippet>def autolog(message):
    "Automatically log the current function details."
    import inspect, logging
    # Get the previous frame in the stack, otherwise it would
    # be this function!!!
    func = inspect.currentframe().f_back.f_code
    # Dump the message + the name of this function to the log.
    logging.debug("%s: %s in %s:%i" % (
        message, 
        func.co_name, 
        func.co_filename, 
        func.co_firstlineno
    ))
</snippet></ROW><ROW><id>10974508</id><snippet>pdb</snippet></ROW><ROW><id>10974508</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>10974550</id><snippet>subprocess</snippet></ROW><ROW><id>10974550</id><snippet>stdin</snippet></ROW><ROW><id>10974550</id><snippet>PIPE</snippet></ROW><ROW><id>10974550</id><snippet>STDOUT</snippet></ROW><ROW><id>10974550</id><snippet>raw_input()</snippet></ROW><ROW><id>10974550</id><snippet>multiprocessing</snippet></ROW><ROW><id>10974550</id><snippet>from multiprocessing import Process, Pipe
import time

def child(conn):
    while True:
        print "Processing..."
        time.sleep(1)
        if conn.poll(0):
            output = conn.recv()
            print output
        else:
            print "I got nothing this time"

def parent():
    parent_conn, child_conn = Pipe()
    p = Process(target=child, args=(child_conn,))
    p.start()
    while True:
        data = raw_input()
        parent_conn.send(data)
    # p.join() - you have to find some way to stop all this...
    # like a specific message to quit etc.


if __name__ == '__main__':
    parent()
</snippet></ROW><ROW><id>10974566</id><snippet>def C(i, coins, cdict = None):
    if cdict == None:
        cdict = {}
    if i &lt;= 0:
        cdict[i] = 0
        return cdict[i]
    elif i in cdict:
        return cdict[i]
    elif i in coins:
        cdict[i] = 1
        return cdict[i]
    else:
        min = 0
        for cj in coins:
            result = C(i - cj, coins)
            if result != 0:
                if min == 0 or (result + 1) &lt; min:
                    min = 1 + result
        cdict[i] = min
        return cdict[i]
</snippet></ROW><ROW><id>10974566</id><snippet>def get_min_coin_configuration(sum = None, coins = None):
if sum in coins: # if sum in coins, nothing to do but return.
    return [sum]
elif max(coins) &gt; sum: # if the largest coin is greater then the sum, there's nothing we can do.
    return None
else: # check for each coin, keep track of the minimun configuration, then return it.
    min_length = None
    min_configuration = None
    for coin in coins:
        results = get_min_coin_configuration(sum = sum - coin, coins = coins)
        if results != None:
            if min_length == None or (1 + len(results)) &lt; len(min_configuration):
                min_configuration = [coin] + results
                min_length = len(min_configuration)
    return min_configuration
</snippet></ROW><ROW><id>10974566</id><snippet>def get_min_coin_configuration(sum = None, coins = None, cache = None):
if cache == None: # this is quite crucial if its in the definition its presistent ...
    cache = {}
if sum in cache:
    return cache[sum]
elif sum in coins: # if sum in coins, nothing to do but return.
    cache[sum] = [sum]
    return cache[sum]
elif max(coins) &gt; sum: # if the largest coin is greater then the sum, there's nothing we can do.
    cache[sum] = None
    return cache[sum]
else: # check for each coin, keep track of the minimun configuration, then return it.
    min_length = None
    min_configuration = None
    for coin in coins:
        results = get_min_coin_configuration(sum = sum - coin, coins = coins, cache = cache)
        if results != None:
            if min_length == None or (1 + len(results)) &lt; len(min_configuration):
                min_configuration = [coin] + results
                min_length = len(min_configuration)
    cache[sum] = min_configuration
    return cache[sum]
</snippet></ROW><ROW><id>10974566</id><snippet>assert all([ get_min_coin_configuration(**test[0]) == test[1] for test in
[({'sum':25,  'coins':[1, 5, 10]}, [5, 10, 10]),
 ({'sum':153, 'coins':[1, 5, 10, 50]}, [1, 1, 1, 50, 50, 50]),
 ({'sum':100, 'coins':[1, 5, 10, 25]}, [25, 25, 25, 25]),
 ({'sum':123, 'coins':[5, 10, 25]}, None),
 ({'sum':100, 'coins':[1,5,25,100]}, [100])] ])
</snippet></ROW><ROW><id>10974566</id><snippet>import random
random_sum = random.randint(10**3, 10**4)
result = get_min_coin_configuration(sum = random_sum, coins = random.sample(range(10**3), 200))
assert sum(result) == random_sum
</snippet></ROW><ROW><id>10974566</id><snippet>[]</snippet></ROW><ROW><id>10974566</id><snippet>None</snippet></ROW><ROW><id>10974566</id><snippet>def get_min_coin_configuration(total_sum, coins, cache=None):  # shadowing python built-ins is frowned upon.
    # assert(all(c &gt; 0 for c in coins)) Assuming all coins are &gt; 0
    if cache is None:  # initialize cache.
        cache = {}
    if total_sum in cache:  # check cache, for previously discovered solution.
        return cache[total_sum]
    elif total_sum in coins:  # check if total_sum is one of the coins.
        cache[total_sum] = [total_sum]
        return [total_sum]
    elif min(coins) &gt; total_sum:  # check feasibility, if min(coins) &gt; total_sum
        cache[total_sum] = []     # no combination of coins will yield solution as per our assumption (all +).
        return []
    else:
        min_configuration = []  # default solution if none found.
        for coin in coins:  # iterate over all coins, check which one will yield the smallest combination.
            results = get_min_coin_configuration(total_sum - coin, coins, cache=cache)  # recursively search.
            if results and (not min_configuration or (1 + len(results)) &lt; len(min_configuration)):  # check if better.
                min_configuration = [coin] + results
        cache[total_sum] = min_configuration  # save this solution, for future calculations.
    return cache[total_sum]



assert all([ get_min_coin_configuration(**test[0]) == test[1] for test in
             [({'total_sum':25,  'coins':[1, 5, 10]}, [5, 10, 10]),
              ({'total_sum':153, 'coins':[1, 5, 10, 50]}, [1, 1, 1, 50, 50, 50]),
              ({'total_sum':100, 'coins':[1, 5, 10, 25]}, [25, 25, 25, 25]),
              ({'total_sum':123, 'coins':[5, 10, 25]}, []),
              ({'total_sum':100, 'coins':[1,5,25,100]}, [100])] ])
</snippet></ROW><ROW><id>10974578</id><snippet>for</snippet></ROW><ROW><id>10974578</id><snippet>a, b = ...
temp = []
for i in range(a):
    temp.append(int(raw_input()) % b == 0)
print temp.count(True)
</snippet></ROW><ROW><id>10974578</id><snippet>a, b = ...
count = 0
for i in xrange(a):
    if int(raw_input()) % b == 0:
        count += 1
print count
</snippet></ROW><ROW><id>10974578</id><snippet>input</snippet></ROW><ROW><id>10974578</id><snippet>int(raw_input())</snippet></ROW><ROW><id>10974578</id><snippet>input()</snippet></ROW><ROW><id>10974957</id><snippet>(</snippet></ROW><ROW><id>10974957</id><snippet>)</snippet></ROW><ROW><id>10974957</id><snippet>&gt;&gt;&gt; str1 = "a    b     c      d"
&gt;&gt;&gt; re.split(" +", str1)
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>10974957</id><snippet>str.split</snippet></ROW><ROW><id>10974957</id><snippet>&gt;&gt;&gt; str1.split()
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>10974957</id><snippet>'\s'</snippet></ROW><ROW><id>10974957</id><snippet>&gt;&gt;&gt; re.split("\s+", str1)
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>10974957</id><snippet>&gt;&gt;&gt; re.findall(r'\S+',str1)
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>10974993</id><snippet>dist_python_DATA = foo.py
</snippet></ROW><ROW><id>10974993</id><snippet>foo.py</snippet></ROW><ROW><id>10974993</id><snippet>$(pythondir)</snippet></ROW><ROW><id>10974993</id><snippet>_DATA</snippet></ROW><ROW><id>10975088</id><snippet>output_list = list(itertools.product(*test_list))
</snippet></ROW><ROW><id>10975371</id><snippet>io.open</snippet></ROW><ROW><id>10975371</id><snippet>io</snippet></ROW><ROW><id>10975371</id><snippet>codecs.open</snippet></ROW><ROW><id>10975371</id><snippet>io.open</snippet></ROW><ROW><id>10975487</id><snippet>[app:main]
production_deployment = True # Set to False in your development .ini file
</snippet></ROW><ROW><id>10975487</id><snippet>def main(global_config, **settings):
    # ...
    from pyramid.settings import asbool
    production_deployment = asbool(settings.get(
               'production_deployment', 'false'))
    settings['production_deployment'] = production_deployment
    config = Configurator(settings=settings)
</snippet></ROW><ROW><id>10975487</id><snippet>settings = request.registry.settings
if settings['production_deployment']:
    # Enable some production code here.
</snippet></ROW><ROW><id>10975506</id><snippet>from django.contrib.auth.models import User
models.ForeignKey(Badge, null=True, blank=True).contribute_to_class(User, 'badge')
</snippet></ROW><ROW><id>10975553</id><snippet>def your_has_perm(user, perm, obj):
    has = user.has_perm(perm, obj)

    if not has and hasattr(obj, 'parent'):
        return your_has_perm(user, perm, obj.parent)

    return has
</snippet></ROW><ROW><id>10975590</id><snippet>import re

def parse_slash_date(value):
    m = re.match(r'^(?P&lt;day&gt;[0-9]{1,2})/(?P&lt;month&gt;[0-9]{1,2})/(?P&lt;year&gt;[0-9]{4})$', value)
    if m:
        return '%s-%s-%s' % (
            m.group('year'), m.group('month'), m.group('day'))
</snippet></ROW><ROW><id>10975590</id><snippet>In [4]: parse_slash_date('06/10/2012')
Out[4]: '2012-10-06'
</snippet></ROW><ROW><id>10975590</id><snippet>class YourDateField(models.DateField):
    def get_prep_lookup(self, lookup_type, value):
        if value and '/' in value:
            value = parse_slash_date(value)
        return super(YourDateField, self).get_prep_lookup(
            lookup_type, value)
</snippet></ROW><ROW><id>10975747</id><snippet>stdout</snippet></ROW><ROW><id>10975747</id><snippet>from subprocess import Popen, STDOUT
import os

p = Popen(["ls","-l"], stdout=open(os.devnull, "w"), stderr=STDOUT)
</snippet></ROW><ROW><id>10975782</id><snippet>df.groupby(get_day)
</snippet></ROW><ROW><id>10975782</id><snippet>.day</snippet></ROW><ROW><id>10975782</id><snippet>.date()</snippet></ROW><ROW><id>10975782</id><snippet>def get_day(date_string):
    return datetime.strptime(date_string, '%m/%d/%Y').date()
</snippet></ROW><ROW><id>10975782</id><snippet>df.groupby(lambda x: datetime.strptime(date_string, '%m/%d/%Y').date())
</snippet></ROW><ROW><id>10975816</id><snippet>scores=[(similarity(prefs,person,other),other) for other in prefs if other!=person]</snippet></ROW><ROW><id>10975816</id><snippet>scores = []
for other in prefs:
    if other != person:
        scores.append((similarity(prefs, person, other))
</snippet></ROW><ROW><id>10975816</id><snippet>other</snippet></ROW><ROW><id>10975816</id><snippet>other</snippet></ROW><ROW><id>10975816</id><snippet>person</snippet></ROW><ROW><id>10975816</id><snippet>scores</snippet></ROW><ROW><id>10976099</id><snippet>__getattr__</snippet></ROW><ROW><id>10976099</id><snippet>value</snippet></ROW><ROW><id>10976099</id><snippet>__new__</snippet></ROW><ROW><id>10976099</id><snippet>def __new__(cls, value):
    return type("A", (type(value), A), {})(value)
</snippet></ROW><ROW><id>10976099</id><snippet>A</snippet></ROW><ROW><id>10976099</id><snippet>type(value)</snippet></ROW><ROW><id>10976099</id><snippet>__new__</snippet></ROW><ROW><id>10976099</id><snippet>A</snippet></ROW><ROW><id>10976099</id><snippet>type(value)</snippet></ROW><ROW><id>10976099</id><snippet>type()</snippet></ROW><ROW><id>10976121</id><snippet>settings.py.dist</snippet></ROW><ROW><id>10976121</id><snippet>SOME_KEY = ''
ANOTHER_KEY = ''
</snippet></ROW><ROW><id>10976121</id><snippet>settings.py</snippet></ROW><ROW><id>10976121</id><snippet>settings.py</snippet></ROW><ROW><id>10976121</id><snippet>settings.py</snippet></ROW><ROW><id>10976121</id><snippet>.gitignore</snippet></ROW><ROW><id>10976225</id><snippet>'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            'formatter': 'simple'
           }
</snippet></ROW><ROW><id>10976225</id><snippet>    'django': {
        'handlers':['console'],
        'propagate': True,
        'level':'INFO',
    },
</snippet></ROW><ROW><id>10976306</id><snippet>import matplotlib
from pylab import *
import numpy as np

#Create test data with zero valued diagonal:
data = np.random.random_sample((25, 25))
rows, cols = np.indices((25,25))
data[np.diag(rows, k=0), np.diag(cols, k=0)] = 0

#Create new colormap, with white for zero 
#(can also take RGB values, like (255,255,255):
colors = [('white')] + [(cm.jet(i)) for i in xrange(1,256)]
new_map = matplotlib.colors.LinearSegmentedColormap.from_list('new_map', colors, N=256)

pcolor(data, cmap=new_map)
colorbar()
savefig('map.png')
show()
</snippet></ROW><ROW><id>10976306</id><snippet>#Create test data:
data = np.random.random_sample((25, 25))
#Create a diagonal mask:
mask = np.diag(np.ones(25))
#Apply mask to data:
masked_data = ma.masked_array(data, mask)
#Set mask color to white:
cm.jet.set_bad(color='white', alpha=None)
#for this to work we use pcolormesh instead of pcolor:
pcolormesh(masked_data, cmap=cm.jet)
colorbar()
show()
</snippet></ROW><ROW><id>10976672</id><snippet>$word#$</snippet></ROW><ROW><id>10976672</id><snippet>&gt;&gt;&gt; expr = r"\$(word\d)\$(?:, \$(word\d)\$)*"
&gt;&gt;&gt; c = re.compile(expr, re.DEBUG)
literal 36
subpattern 1
  literal 119
  literal 111
  literal 114
  literal 100
  in
    category category_digit
literal 36
max_repeat 0 65535
  subpattern None
    literal 44
    literal 32
    literal 36
    subpattern 2
      literal 119
      literal 111
      literal 114
      literal 100
      in
        category category_digit
    literal 36
</snippet></ROW><ROW><id>10976672</id><snippet>subpattern 1</snippet></ROW><ROW><id>10976672</id><snippet>subpattern 2</snippet></ROW><ROW><id>10976672</id><snippet>$word#$</snippet></ROW><ROW><id>10976672</id><snippet>subpattern 2</snippet></ROW><ROW><id>10976672</id><snippet>re.findall()</snippet></ROW><ROW><id>10976672</id><snippet>re.match()</snippet></ROW><ROW><id>10976672</id><snippet>&gt;&gt;&gt; s = "$word1$, $word2$, $word3$, $word4$"
&gt;&gt;&gt; authors = re.findall(r"\$(\w+)\$", s)
&gt;&gt;&gt; authors
['word1', 'word2', 'word3', 'word4']
</snippet></ROW><ROW><id>10976921</id><snippet>[1]</snippet></ROW><ROW><id>10976921</id><snippet>a = [c.text for c in kontent.xpath('//table[@id="blk-ctnt-2308"][1]//tr/td[5]') ]
</snippet></ROW><ROW><id>10976921</id><snippet>//table[@id="blk-ctnt-2308"][1]</snippet></ROW><ROW><id>10976921</id><snippet>id</snippet></ROW><ROW><id>10976921</id><snippet>[1]</snippet></ROW><ROW><id>10976921</id><snippet>lxml</snippet></ROW><ROW><id>10976921</id><snippet>import xml.etree.ElementTree

html = '''&lt;html&gt;
&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;table id="blk-ctnt-2308"&gt;
&lt;tr&gt;&lt;td&gt;1a&lt;/td&gt;&lt;td&gt;2a&lt;/td&gt;&lt;td&gt;3a&lt;/td&gt;&lt;td&gt;4a&lt;/td&gt;&lt;td&gt;5a&lt;/td&gt;&lt;td&gt;6a&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1b&lt;/td&gt;&lt;td&gt;2b&lt;/td&gt;&lt;td&gt;3b&lt;/td&gt;&lt;td&gt;4b&lt;/td&gt;&lt;td&gt;5b&lt;/td&gt;&lt;td&gt;6b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1c&lt;/td&gt;&lt;td&gt;2c&lt;/td&gt;&lt;td&gt;3c&lt;/td&gt;&lt;td&gt;4c&lt;/td&gt;&lt;td&gt;5c&lt;/td&gt;&lt;td&gt;6c&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;table id="blk-ctnt-2309"&gt;
&lt;tr&gt;&lt;td&gt;1a&lt;/td&gt;&lt;td&gt;2a&lt;/td&gt;&lt;td&gt;3a&lt;/td&gt;&lt;td&gt;4a&lt;/td&gt;&lt;td&gt;5a&lt;/td&gt;&lt;td&gt;6a&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1b&lt;/td&gt;&lt;td&gt;2b&lt;/td&gt;&lt;td&gt;3b&lt;/td&gt;&lt;td&gt;4b&lt;/td&gt;&lt;td&gt;5b&lt;/td&gt;&lt;td&gt;6b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1c&lt;/td&gt;&lt;td&gt;2c&lt;/td&gt;&lt;td&gt;3c&lt;/td&gt;&lt;td&gt;4c&lt;/td&gt;&lt;td&gt;5c&lt;/td&gt;&lt;td&gt;6c&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;'''

tree = xml.etree.ElementTree.fromstring(html)
results = [ c.text
            for c in tree.findall('body/table[@id="blk-ctnt-2308"]//tr/td[5]') ]
print results
</snippet></ROW><ROW><id>10976921</id><snippet>['5a', '5b', '5c']
</snippet></ROW><ROW><id>10977036</id><snippet>mr.developer</snippet></ROW><ROW><id>10977059</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>10977059</id><snippet>def two_largest(sequence):
    first = second = 0
    for item in sequence:
        if item &gt; second:
            if item &gt; first:
                first, second = item, first
            else:
                second = item
    return first, second
</snippet></ROW><ROW><id>10977059</id><snippet>timeit</snippet></ROW><ROW><id>10977059</id><snippet>time.time()</snippet></ROW><ROW><id>10977059</id><snippet>&gt;&gt;&gt; from random import shuffle
&gt;&gt;&gt; from time import time
&gt;&gt;&gt; seq = range(1000000)
&gt;&gt;&gt; shuffle(seq)
&gt;&gt;&gt; def time_it(func, *args, **kwargs):
...     t0 = time()
...     func(*args, **kwargs)
...     return time() - t0
...

&gt;&gt;&gt; #here I define the above function, two_largest().
&gt;&gt;&gt; from heapq import nlargest
&gt;&gt;&gt; time_it(nlargest, 2, seq)
0.258958101273
&gt;&gt;&gt; time_it(two_largest, seq)
0.145977973938
</snippet></ROW><ROW><id>10977734</id><snippet>class SoapFixer(MessagePlugin):

    def marshalled(self, context):
        # Alter the envelope so that the xsd namespace is allowed
        context.envelope.nsprefixes['xsd'] = 'http://www.w3.org/2001/XMLSchema'
        # Go through every node in the document and apply the fix function to patch up incompatible XML. 
        context.envelope.walk(self.fix_any_type_string)

    def fix_any_type_string(self, element):
        """Used as a filter function with walk in order to fix errors.
        If the element has a certain name, give it a xsi:type=xsd:string. Note that the nsprefix xsd must also
         be added in to make this work."""
        # Fix elements which have these names
        fix_names = ['elementnametofix', 'anotherelementname']
        if element.name in fix_names:
            element.attributes.append(Attribute('xsi:type', 'xsd:string'))
</snippet></ROW><ROW><id>10978031</id><snippet>codecs.open()</snippet></ROW><ROW><id>10978031</id><snippet>for l in a:
    dasFile.write(l.encode('utf-8'))
</snippet></ROW><ROW><id>10978114</id><snippet>[x + (1,) for x in list(permutations(alphabet,2))+[(alpha, alpha) for alpha in alphabet]]
</snippet></ROW><ROW><id>10978308</id><snippet>write()</snippet></ROW><ROW><id>10978308</id><snippet>read()</snippet></ROW><ROW><id>10978308</id><snippet>serial.Serial(3, timeout=.1)</snippet></ROW><ROW><id>10978312</id><snippet>class Modifiedabcd(abcd):
    def test1(self, list_of_ids):
        ###some other statements
        temp = super(Modifiedabcd, self).test1(list_of_ids)
        return list(set(temp))
</snippet></ROW><ROW><id>10978528</id><snippet>^</snippet></ROW><ROW><id>10978528</id><snippet>$</snippet></ROW><ROW><id>10978528</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sentence = "foo bar @match don't match @success;"
&gt;&gt;&gt; re.findall('@([a-zA-Z0-9_])*[:;, ]', sentence)
['h', 's']
</snippet></ROW><ROW><id>10978528</id><snippet>*</snippet></ROW><ROW><id>10978528</id><snippet>&gt;&gt;&gt; re.findall('@([a-zA-Z0-9_]*)[:;, ]', sentence)
['match', 'success']
</snippet></ROW><ROW><id>10978528</id><snippet>&gt;&gt;&gt; re.findall('(@[a-zA-Z0-9_]*[:;, ])', sentence)
['@match ', '@success;']
</snippet></ROW><ROW><id>10978528</id><snippet>&gt;&gt;&gt; sentence = "foo bar @match don't match @somereallylongnamehere @success;"
&gt;&gt;&gt; re.findall('(@[a-zA-Z0-9_]{1,15}[:;, ])', sentence)
['@match ', '@success;']
</snippet></ROW><ROW><id>10978633</id><snippet>nonlocal</snippet></ROW><ROW><id>10979012</id><snippet>a_dict = dict([str.strip('{}').split(":"),])
</snippet></ROW><ROW><id>10979030</id><snippet>cv2</snippet></ROW><ROW><id>10979030</id><snippet>cv</snippet></ROW><ROW><id>10979030</id><snippet>import cv2
import cv2.cv as cv

#Using cv2:
stream = cv2.VideoCapture(filename)
print stream.get(cv.CV_CAP_PROP_FRAME_COUNT)

#using cv:
stream = cv.CaptureFromFile(filename)
print cv.GetCaptureProperty(stream, cv.CV_CAP_PROP_FRAME_COUNT)
</snippet></ROW><ROW><id>10979149</id><snippet>'abc' in myObject 
</snippet></ROW><ROW><id>10979149</id><snippet>for i in myObject:
    if myObject[i] == 'abc':
        return true
</snippet></ROW><ROW><id>10979149</id><snippet>i</snippet></ROW><ROW><id>10979149</id><snippet>__contains__(self, value)</snippet></ROW><ROW><id>10979247</id><snippet>while True:
    fml=getFml()
    fml=parseFml(fml)
    count=count+1
    if count&gt;1:
        oldfml=fml
    if oldfml == fml:
        ...
</snippet></ROW><ROW><id>10979247</id><snippet>oldfml=fml</snippet></ROW><ROW><id>10979247</id><snippet>while True:
    if count&gt;1:
        oldfml=fml
    count=count+1
    fml=getFml()
    fml=parseFml(fml)
    if oldfml == fml:
        ...
</snippet></ROW><ROW><id>10979247</id><snippet>oldfml</snippet></ROW><ROW><id>10979348</id><snippet>f.write(title.encode('utf-8'))
</snippet></ROW><ROW><id>10979503</id><snippet>numpy.zeros((height,width,3),'uint8')</snippet></ROW><ROW><id>10979503</id><snippet>array[0:320,0:128,0:3]</snippet></ROW><ROW><id>10979569</id><snippet>open()</snippet></ROW><ROW><id>10979569</id><snippet>os.open()</snippet></ROW><ROW><id>10979569</id><snippet>O_CREAT | O_EXCL</snippet></ROW><ROW><id>10979569</id><snippet>open(2)</snippet></ROW><ROW><id>10979569</id><snippet>O_EXCL</snippet></ROW><ROW><id>10979569</id><snippet>O_CREAT</snippet></ROW><ROW><id>10979569</id><snippet>open()</snippet></ROW><ROW><id>10979569</id><snippet>O_EXCL</snippet></ROW><ROW><id>10979569</id><snippet>O_CREAT</snippet></ROW><ROW><id>10979569</id><snippet>open()</snippet></ROW><ROW><id>10979569</id><snippet>O_EXCL</snippet></ROW><ROW><id>10979569</id><snippet>O_EXCL</snippet></ROW><ROW><id>10979569</id><snippet>os.open()</snippet></ROW><ROW><id>10979569</id><snippet>open()</snippet></ROW><ROW><id>10979569</id><snippet>O_RDONLY</snippet></ROW><ROW><id>10979569</id><snippet>O_WRONLY</snippet></ROW><ROW><id>10979569</id><snippet>O_RDWR</snippet></ROW><ROW><id>10979569</id><snippet>O_*</snippet></ROW><ROW><id>10979569</id><snippet>os</snippet></ROW><ROW><id>10979569</id><snippet>import os</snippet></ROW><ROW><id>10979569</id><snippet>os.O_CREAT</snippet></ROW><ROW><id>10979812</id><snippet>city:Hyderabad 
cat:0 
area:0 
fromDate: 
toDate: 
subCat:0 
pageNo:2
fetch:events
</snippet></ROW><ROW><id>10979812</id><snippet>import re
import json

class justdialdotcomSpider(BaseSpider):
    name = "justdialdotcom"
    domain_name = "www.justdial.com"
    start_urls = ["http://events.justdial.com/events/search.php"]


    # Initial request
    def parse(self, response):
        return [FormRequest(url="http://events.justdial.com/events/search.php",
                                        formdata={'fetch': 'area',
                                                  'pageNo': '1',
                                                  'city' : 'Hyderabad',
                                                  'cat' : '0',
                                                  'area' : '0',
                                                  'fromDate': '',
                                                  'toDate' : '',
                                                  'subCat' : '0'
                                                  },
                                        callback=self.area_count
                                        )]


# Get total count and paginate through events
    def area_count(self, response):
        total_count = 0
        for area in  json.loads(response.body):
            total_count += int(area["count"])

        pages_count = (total_count / 10) + 1

        page = 1
        while (page &lt;= pages_count):
            yield FormRequest(url="http://events.justdial.com/events/search.php",
                                        formdata={'fetch': 'events',
                                                  'pageNo': str(page),
                                                  'city' : 'Hyderabad',
                                                  'cat' : '0',
                                                  'area' : '0',
                                                  'fromDate': '',
                                                  'toDate' : '',
                                                  'subCat' : '0'
                                                  },
                                        callback=self.parse_events
                                        )
            page += 1


# parse events 
    def parse_events(self, response):
        events = json.loads(response.body)
        events.pop(0)

        for event_details in events:
            yield FormRequest(url="http://events.justdial.com/events/search.php",
                                        formdata={'fetch': 'event',
                                                  'eventId': str(event_details["id"]),
                                                  },
                                        callback=self.parse_event
                                        )



    def parse_event(self, response):
        event_details = json.loads(response.body)
        items = []
        #item = Product()

        items.append(item)
        return items
</snippet></ROW><ROW><id>10979853</id><snippet>set_data</snippet></ROW><ROW><id>10979853</id><snippet>set_text</snippet></ROW><ROW><id>10979853</id><snippet>text = plt.text(x, y, "Some text")
</snippet></ROW><ROW><id>10979853</id><snippet>text.set_text("Some other text")
</snippet></ROW><ROW><id>10979853</id><snippet>for t in range(10):
    if t == 0:
        points, = ax.plot(x, y, marker='o', linestyle='None')
        text = plt.text(1, 5, "Loops passed: 0")
    else:
        new_x = ... # x updated
        new_y = ... # y updated
        points.set_data(new_x, new_y)
        text.set_text("Loops passed: {0}".format(t))
    plt.pause(0.5)
</snippet></ROW><ROW><id>10980172</id><snippet>tree = {
    '_data': 123,
    'node1': {
        '_data': 456,
        'node11': {
           'node111': {}
        },
    'node2': {
    }
}
</snippet></ROW><ROW><id>10980172</id><snippet>tree['node1']['node12']['node123']['_data'] = 123 # adding
</snippet></ROW><ROW><id>10980172</id><snippet>shortcuts = {}
shortcuts['name'] = tree['node1']['node11']['node111']
print shortcuts['name']['_data']
</snippet></ROW><ROW><id>10980541</id><snippet>&gt;&gt;&gt; b = {'id123_1': ['ddf', 1], 'id123_2': ['dff', 1], 'id789': ['ddf', 1]}
&gt;&gt;&gt; [v for k,v in b.iteritems() if k.startswith('id123')]
[['dff', 1], ['ddf', 1]]
</snippet></ROW><ROW><id>10980541</id><snippet>&gt;&gt;&gt; [k for k,v in b.iteritems() if k.startswith('id123')]
['id123_2', 'id123_1']
</snippet></ROW><ROW><id>10980763</id><snippet>f = {}
for item in a:
    ak1,ak2 = item.split('_')
    f[ak1] = {ak2:{}}
for item in b:
    bk1,bk2 = item.split('_')
    next(f[akey][bk1] 
            for akey in f 
                if bk1 in f[akey])[bk2] = {}
for item in c:
    ck1,ck2 = item.split('_')
    next(f[akey][bkey][ck1] 
            for akey in f 
                for bkey in f[akey] 
                    if ck1 in f[akey][bkey])[ck2] = []
for item in d:
    dk1,dk2 = item.split('_')
    next(f[akey][bkey][ckey][dk1] 
            for akey in f 
                for bkey in f[akey]
                    for ckey in f[akey][bkey]
                        if dk1 in f[akey][bkey][ckey]).append(dk2)

import pprint
pprint.pprint(f)
</snippet></ROW><ROW><id>10980763</id><snippet>{'t1': {'h1': {'d1': {'dom1': ['a', 'b']}, 'd2': {'dom2': ['a', 'b']}}},
 't2': {'h2': {'d3': {'dom3': ['a', 'b']}}}}
</snippet></ROW><ROW><id>10981102</id><snippet>{% include "main/includes/subtemplate.html" %}
</snippet></ROW><ROW><id>10981187</id><snippet>UPDATE tablename
SET freq = freq + 1
WHERE char1=? and char2=?;
</snippet></ROW><ROW><id>10981187</id><snippet>UPDATE tablename 
SET freq = t2.freq + 1 -- whatever your calc is
FROM tablename t1
JOIN othertable t2
ON t1.other_id = t2.id
WHERE t1.char1=? and t1.char2=? and t2.char1=? and t2.char2=?
</snippet></ROW><ROW><id>10981195</id><snippet>self.cb(text)
</snippet></ROW><ROW><id>10981275</id><snippet>system</snippet></ROW><ROW><id>10981275</id><snippet>#-- returns one string
$result = `command arg1 arg2`;

#-- returns a list of strings
@result = `command arg2 arg2`;
</snippet></ROW><ROW><id>10981339</id><snippet>key = lambda action: action["phase"]
</snippet></ROW><ROW><id>10981339</id><snippet>key</snippet></ROW><ROW><id>10981339</id><snippet>groupby</snippet></ROW><ROW><id>10981339</id><snippet>itertools</snippet></ROW><ROW><id>10981339</id><snippet>from itertools import groupby

actions.sort(key=key)

results = []    
for phase, action_iterable in groupby(actions, key=key):
    action_list = list(action_iterable)
    action_list.reverse()
    results.append((phase, action_list)))
</snippet></ROW><ROW><id>10981339</id><snippet>for phase, actions in results:
    while actions:
        action = actions.pop()
        # etc...
</snippet></ROW><ROW><id>10981487</id><snippet>fp_while = lambda pred, fun, acc: (lambda val: fp_while(pred, fun, val) if pred(val) else val)(fun(acc))

print fp_while(lambda x: x &lt; 5, lambda x: x + 1, 1)
</snippet></ROW><ROW><id>10981487</id><snippet>def add_and_print(x):
   print x
   return x + 1

fp_while(lambda x: x &lt; 5, add_and_print, 1)
</snippet></ROW><ROW><id>10981769</id><snippet>struct</snippet></ROW><ROW><id>10981769</id><snippet>struct.pack("&lt;f", .5).encode('hex')
</snippet></ROW><ROW><id>10982037</id><snippet>from collections import OrderedDict
OrderedDict((word, True) for word in words)
</snippet></ROW><ROW><id>10982037</id><snippet>OrderedDict([('He', True), ('will', True), ('be', True), ('the', True), ('winner', True)])
</snippet></ROW><ROW><id>10982037</id><snippet>True</snippet></ROW><ROW><id>10982037</id><snippet>OrderedDict.fromkeys(words, True)
</snippet></ROW><ROW><id>10982198</id><snippet>In [18]: a
Out[18]: 
   x1  x2
0   0   5
1   1   6
2   2   7
3   3   8
4   4   9

In [19]: a.x2 = a.x2.shift(1)

In [20]: a
Out[20]: 
   x1  x2
0   0 NaN
1   1   5
2   2   6
3   3   7
4   4   8
</snippet></ROW><ROW><id>10982380</id><snippet>sum</snippet></ROW><ROW><id>10982380</id><snippet>__builtin__.sum</snippet></ROW><ROW><id>10982380</id><snippet>e</snippet></ROW><ROW><id>10982380</id><snippet>s</snippet></ROW><ROW><id>10982380</id><snippet>s = np.sum(buffer)</snippet></ROW><ROW><id>10982380</id><snippet>self.probs.append(array / np.sum(array))
</snippet></ROW><ROW><id>10982412</id><snippet>re.sub(r'(\w)\1+', r'\1', 'yeeeesssss')  // yes
</snippet></ROW><ROW><id>10982599</id><snippet>In [28]: a = pd.read_csv('aa.csv')

In [29]: a
Out[29]: 
       time contract ticker    expiry  strike quote  price  volume
0  08:01:08        C    PXA  20100101    4000     A   57.8      60
1  08:01:11        C    PXA  20100101    4000     A   58.4      60
2  08:01:12        C    PXA  20100101    4000     A   58.0      60
3  08:01:16        C    PXA  20100101    4000     A   58.4      60
4  08:01:16        C    PXA  20100101    4000     A   58.0      60
5  08:01:21        C    PXA  20100101    4000     A   58.4      60
6  08:01:21        C    PXA  20100101    4000     A   58.0      60

In [30]: pd.DataFrame([{'time': k,
                        'price': (v.price * v.volume).sum() / v.volume.sum(),
                        'volume': v.volume.mean()}
                       for k,v in a.groupby(['time'])],
                      columns=['time', 'price', 'volume'])
Out[30]: 
       time  price  volume
0  08:01:08   57.8      60
1  08:01:11   58.4      60
2  08:01:12   58.0      60
3  08:01:16   58.2      60
4  08:01:21   58.2      60
</snippet></ROW><ROW><id>10982619</id><snippet>&gt;&gt;&gt; s = """&lt;a&gt;
  &lt;b name="b1"&gt;&lt;/b&gt;
  &lt;b name="b2"&gt;&lt;c /&gt;&lt;/b&gt;
  &lt;b name="b2"&gt;&lt;/b&gt;
  &lt;b name="b3"&gt;&lt;/b&gt;
&lt;/a&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; t = etree.fromstring(s)
&gt;&gt;&gt; t.xpath("b[@name='b2' and c]")
[&lt;Element b at 1340788&gt;]
</snippet></ROW><ROW><id>10982818</id><snippet>from datetime import *
d1 = datetime.strptime('05/01/2012', "%d/%m/%Y").date()
d2 = datetime.strptime('06/01/2012', "%d/%m/%Y").date()
delta = d2 - d1
print(delta.days)
</snippet></ROW><ROW><id>10983037</id><snippet>last_active_at</snippet></ROW><ROW><id>10983037</id><snippet>Person</snippet></ROW><ROW><id>10983037</id><snippet>from django.db.models.signals import post_save
from django.dispatch import receiver

@receiver(post_save, sender=RelatedModel)
def my_handler(sender, **kwargs):
    # sender is the object being saved
    person = # Person to be updated
    person.update_activity()
</snippet></ROW><ROW><id>10983037</id><snippet>def update_activity(self):
    self.last_active_at = now()
</snippet></ROW><ROW><id>10983212</id><snippet>from subprocess import PIPE
import subprocess
pro = subprocess.Popen("ifconfig", stdout=PIPE, stderr=PIPE)
data = pro.communicate()[0].split()
for line in data:
    print "THIS IS A LINE"
    print line
    print "**************"
</snippet></ROW><ROW><id>10983459</id><snippet>elif:</snippet></ROW><ROW><id>10983459</id><snippet>else: if</snippet></ROW><ROW><id>10983459</id><snippet>if:</snippet></ROW><ROW><id>10983459</id><snippet>else: if</snippet></ROW><ROW><id>10983459</id><snippet>if</snippet></ROW><ROW><id>10983459</id><snippet>elif:</snippet></ROW><ROW><id>10983670</id><snippet>COLOR_BGR2YCrCb</snippet></ROW><ROW><id>10983670</id><snippet>COLOR_BGR2YCR_CB</snippet></ROW><ROW><id>10983670</id><snippet>build/modules/python/pyopencv_generated_const_reg.h</snippet></ROW><ROW><id>10983670</id><snippet>97: PUBLISH2(COLOR_BGR2YCR_CB,cv::COLOR_BGR2YCrCb);
</snippet></ROW><ROW><id>10983687</id><snippet>mkfifo</snippet></ROW><ROW><id>10983687</id><snippet>sock = socket.socket()
sock.connect(('localhost', 9999))
sock.sendall('update')
sock.close()
</snippet></ROW><ROW><id>10983730</id><snippet>def data(self, data):
    if data:
        print '... data called ...'
        print repr(data), 'length -' , len(data)
</snippet></ROW><ROW><id>10983730</id><snippet>&gt;&gt;&gt; Entering - /a
... data called ...
'\n' length - 1
... data called ...
'  ' length - 2
&gt;&gt;&gt; Entering - /a/b
... data called ...
'\n' length - 1
... data called ...
'  ' length - 2
&lt;&lt;&lt; Leaving - /a/b
... data called ...
'\n' length - 1
... data called ...
'  ' length - 2
&gt;&gt;&gt; Entering - /a/b
... data called ...
'\n' length - 1
... data called ...
'    ' length - 4
# ... etc ...
</snippet></ROW><ROW><id>10983925</id><snippet>import os
dirs = [d for d in os.listdir('.') if os.path.isdir(d)]
sorted(dirs, key=lambda x: os.path.getctime(x), reverse=True)[:1]
</snippet></ROW><ROW><id>10983925</id><snippet>[d for d in os.listdir('.') if os.path.isdir(d)]</snippet></ROW><ROW><id>10983925</id><snippet>dirs = []
for d in os.listdir('.'):
    if os.path.isdir(d):
        dirs.append(d)
</snippet></ROW><ROW><id>10983925</id><snippet>sorted()</snippet></ROW><ROW><id>10983925</id><snippet>[index]</snippet></ROW><ROW><id>10983950</id><snippet>&gt;&gt;&gt; docu = '&lt;a href="http" alt=":)"&gt;&lt;/a&gt;'
&gt;&gt;&gt; dom = xml.dom.minidom.parseString(docu)
&gt;&gt;&gt; a = dom.getElementsByTagName("a")[0]
&gt;&gt;&gt; a.attributes.items()
[(u'alt', u':)'), (u'href', u'http')]
</snippet></ROW><ROW><id>10984149</id><snippet>x = '[1,3,4]'
new_x = [int(i) for i in x.strip('[]').split(',')]
new_x
[1, 3, 4]
</snippet></ROW><ROW><id>10984149</id><snippet>int</snippet></ROW><ROW><id>10984149</id><snippet>from numpy import array

a = array(new_x)
a
array([1, 3, 4])

a * 4
array([ 4, 12, 16])
</snippet></ROW><ROW><id>10984191</id><snippet>deploy_ec2_ami (name, puppetClass, size, region, basedn, ldap, secret, subnet, sgroup)
</snippet></ROW><ROW><id>10984246</id><snippet>thrustmaster@thrustmaster:~/Temp$ curl 'http://translate.google.com/translate_a/t?client=t&amp;text=test&amp;hl=en&amp;sl=en&amp;tl=es&amp;multires=1&amp;ssel=0&amp;tsel=0&amp;sc=1' -H 'User-Agent: blah'
[[["prueba","test","",""]],[["noun",["prueba","ensayo","test","examen","an�lisis","criterio","toque","ejercicio","tanteo"],[["prueba",["test","proof","evidence","trial","event","race"]],["ensayo",["test","trial","essay","assay","testing","rehearsal"]],["test",["test"]],["examen",["examination","review","exam","test","inspection","quiz"]],["an�lisis",["analysis","test","review","assay","breakdown"]],["criterio",["criterion","judgment","standard","test","view","yardstick"]],["toque",["touch","stroke","test","knock","blast","chime"]],["ejercicio",["exercise","practice","drill","practicing","test","prosecution"]],["tanteo",["score","scoring","trial","test","try","calculation"]]]],["adjective",["de prueba"],[["de prueba",["test","testing","trial","probationary","corrective"]]]],["verb",["probar","comprobar","ensayar","examinar","poner a prueba","experimentar","someter a prueba","interrogar","hacer investigaciones","justificar","graduar"],[["probar",["test","try","prove","taste","try out","sample"]],["comprobar",["check","test","prove","ascertain","make sure","substantiate"]],["ensayar",["test","try","rehearse","try out","assay","essay"]],["examinar",["examine","consider","review","look at","explore","test"]],["poner a prueba",["test","try","try out","prove","tempt","put through his paces"]],["experimentar",["experience","experiment","undergo","experiment with","feel","test"]],["someter a prueba",["test","try out","touch"]],["interrogar",["question","interrogate","examine","cross-examine","ask","test"]],["hacer investigaciones",["test"]],["justificar",["justify","warrant","substantiate","prove","make good","test"]],["graduar",["graduate","grade","calibrate","time","test"]]]]],"en",,[["prueba",[5],1,0,1000,0,1,0]],[["test",4,,,""],["test",5,[["prueba",1000,1,0],["prueba de",0,1,0],["ensayo",0,1,0],["de prueba",0,1,0],["test",0,1,0]],[[0,4]],"test"]],,,[["en"]],5]thrustmaster@thrustmaster:~/Temp$ 
</snippet></ROW><ROW><id>10984306</id><snippet>&amp;</snippet></ROW><ROW><id>10984306</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>10984790</id><snippet>getPeerCertificate</snippet></ROW><ROW><id>10984790</id><snippet>connectionMade</snippet></ROW><ROW><id>10984790</id><snippet>dataReceived</snippet></ROW><ROW><id>10984799</id><snippet>transport.getPeerCertificate</snippet></ROW><ROW><id>10984799</id><snippet>Protocol.dataReceived</snippet></ROW><ROW><id>10984848</id><snippet>datetime.weekday()</snippet></ROW><ROW><id>10984848</id><snippet>start = datetime(2012, 1, 1)
end = datetime(2012, 10, 6)
delta = timedelta(days=1)
d = start
diff = 0
weekend = set([5, 6])
while d &lt;= end:
    if d.weekday() not in weekend:
        diff += 1
    d += delta
</snippet></ROW><ROW><id>10984991</id><snippet>def newfunction(*args):
    return oldfunction(10, *args)
</snippet></ROW><ROW><id>10985018</id><snippet>&gt;&gt;&gt; a=np.argmax(b, axis=0)
&gt;&gt;&gt; b[a] = -1
&gt;&gt;&gt; b
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [-1, -1, -1, -1]])
</snippet></ROW><ROW><id>10985019</id><snippet>import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--name',nargs='*',action='store')

print(parser.parse_args('--name try1 3'.split())) #Namespace(name=['try1', '3'])
</snippet></ROW><ROW><id>10985093</id><snippet>set_proxy</snippet></ROW><ROW><id>10985093</id><snippet>webkit</snippet></ROW><ROW><id>10985192</id><snippet>pysqlite</snippet></ROW><ROW><id>10985192</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>10985254</id><snippet>ifconfig</snippet></ROW><ROW><id>10985254</id><snippet>ipconfig</snippet></ROW><ROW><id>10985348</id><snippet>&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse("2011-10-23T08:00:00-07:00")
datetime.datetime(2011, 10, 23, 8, 0, tzinfo=tzoffset(None, -25200))
</snippet></ROW><ROW><id>10985348</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime(data[4].partition('T')[0], '%Y-%m-%d').date()
datetime.date(2011, 10, 23)
</snippet></ROW><ROW><id>10985578</id><snippet>zipfile</snippet></ROW><ROW><id>10985578</id><snippet>verletphysics.jar</snippet></ROW><ROW><id>10985578</id><snippet>META-INF/
META-INF/MANIFEST.MF
toxi/
toxi/physics/
toxi/physics/behaviors/
toxi/physics/constraints/
toxi/physics2d/
toxi/physics2d/behaviors/
toxi/physics2d/constraints/
toxi/physics/ParticlePath.class
toxi/physics/ParticleString.class
toxi/physics/PullBackString.class
toxi/physics/VerletConstrainedSpring.class
toxi/physics/VerletMinDistanceSpring.class
toxi/physics/VerletParticle.class
toxi/physics/VerletPhysics.class
toxi/physics/VerletSpring.class
toxi/physics/behaviors/AttractionBehavior.class
toxi/physics/behaviors/ConstantForceBehavior.class
toxi/physics/behaviors/GravityBehavior.class
toxi/physics/behaviors/ParticleBehavior.class
toxi/physics/constraints/AxisConstraint.class
toxi/physics/constraints/BoxConstraint.class
toxi/physics/constraints/CylinderConstraint.class
toxi/physics/constraints/MaxConstraint.class
toxi/physics/constraints/MinConstraint.class
toxi/physics/constraints/ParticleConstraint.class
toxi/physics/constraints/PlaneConstraint.class
toxi/physics/constraints/SoftBoxConstraint.class
toxi/physics/constraints/SphereConstraint.class
toxi/physics2d/ParticlePath2D.class
toxi/physics2d/ParticleString2D.class
toxi/physics2d/PullBackString2D.class
toxi/physics2d/VerletConstrainedSpring2D.class
toxi/physics2d/VerletMinDistanceSpring2D.class
toxi/physics2d/VerletParticle2D.class
toxi/physics2d/VerletPhysics2D.class
toxi/physics2d/VerletSpring2D.class
toxi/physics2d/behaviors/AttractionBehavior.class
toxi/physics2d/behaviors/ConstantForceBehavior.class
toxi/physics2d/behaviors/GravityBehavior.class
toxi/physics2d/behaviors/ParticleBehavior2D.class
toxi/physics2d/constraints/AngularConstraint.class
toxi/physics2d/constraints/AxisConstraint.class
toxi/physics2d/constraints/CircularConstraint.class
toxi/physics2d/constraints/MaxConstraint.class
toxi/physics2d/constraints/MinConstraint.class
toxi/physics2d/constraints/ParticleConstraint2D.class
toxi/physics2d/constraints/RectConstraint.class
verletphysics.mf
</snippet></ROW><ROW><id>10985578</id><snippet> Index  File
     0  behaviors
     1  BoxConstraint.class
     2  MaxConstraint.class
     3  VerletParticle.class
     4  ParticleConstraint2D.class
     5  ConstantForceBehavior.class
     6  META-INF
     7  VerletMinDistanceSpring2D.class
     8  AxisConstraint.class
     9  AttractionBehavior.class
    10  physics2d
    11  VerletPhysics.class
    12  PullBackString.class
    13  VerletSpring.class
    14  VerletConstrainedSpring.class
    15  ParticleString2D.class
    16  verletphysics.mf
    17  ParticleBehavior2D.class
    18  ParticleString.class
    19  RectConstraint.class
    20  CylinderConstraint.class
    21  toxi
    22  VerletMinDistanceSpring.class
    23  VerletSpring2D.class
    24  VerletParticle2D.class
    25  ParticlePath2D.class
    26  CircularConstraint.class
    27  ParticlePath.class
    28  MinConstraint.class
    29  MANIFEST.MF
    30  ParticleConstraint.class
    31  GravityBehavior.class
    32  VerletPhysics2D.class
    33  SoftBoxConstraint.class
    34  ParticleBehavior.class
    35  VerletConstrainedSpring2D.class
    36  PlaneConstraint.class
    37  PullBackString2D.class
    38  SphereConstraint.class
    39  physics
    40  AngularConstraint.class
    41  constraints
</snippet></ROW><ROW><id>10985578</id><snippet>import zipfile
import networkx as nx
import matplotlib.pyplot as plt

# Download the code from
# http://www.openprocessing.org/sketch/46757
# Unzip and find the jar file: verletphysics.jar
# This example uses that file for demo

def get_edges(fName):
    edges = []
    nodes = []

    jar = zipfile.ZipFile(fName, "r")
    for name in jar.namelist():
        print name # prints the list of files in the jar
        if name.endswith('/'): name = name[:-1]
        parts = name.split('/')
        nodes.extend( parts )
        if len(parts) &gt; 1:
            edges += zip(nodes[:-1], nodes[1:]) 

    nodes = set(nodes)
    nodes = dict( zip(nodes, range(len(nodes)) ) )
    edges = [ (nodes[ edge[0] ], nodes[ edge[1] ])
              for edge in edges ]
    nodes = [ (index, label) for label, index in nodes.iteritems() ]
    nodes = sorted( nodes, key = lambda node: node[0] )
    return set( edges ), nodes

if __name__ == '__main__':
    fName = 'verletphysics.jar'
    edges, nodes = get_edges(fName)

    # print list of nodes
    # serving as a key to the graph
    print '%10s  %s' % ('Index', 'File')
    for node in nodes:
        print '%10s  %s' % (node[0], node[1])

    # Plot the network graph 
    G = nx.Graph()
    G.add_edges_from( edges )
    nx.draw_networkx(G, pos=nx.spring_layout(G))
    plt.axis('off')
    plt.show()
</snippet></ROW><ROW><id>10985648</id><snippet>(</snippet></ROW><ROW><id>10985648</id><snippet>,</snippet></ROW><ROW><id>10985648</id><snippet>cmd = """line %d
      line %d
      line %d""" % (
      1,
      2,
      3)
</snippet></ROW><ROW><id>10985668</id><snippet>x = input("Enter x:")
y = input("Enter y:")
xv = input("Enter xv:")
yv = input("Enter yv:")
s = input("Enter s:")

DrawGraph(x, y, xv, yv, s)
</snippet></ROW><ROW><id>10985776</id><snippet>\b</snippet></ROW><ROW><id>10985776</id><snippet>Wellness</snippet></ROW><ROW><id>10985776</id><snippet>echo "All's Well That Ends Well" | grep -o '\(\bThat\b\|\bWell\b\)'
</snippet></ROW><ROW><id>10985966</id><snippet>if 'this' in csvLine and not 'that' in csvLine:
    do_something()
</snippet></ROW><ROW><id>10986040</id><snippet>c.execute("""SELECT * FROM records WHERE id = %(id)s""", {"id": 2})
</snippet></ROW><ROW><id>10986041</id><snippet>True</snippet></ROW><ROW><id>10986041</id><snippet>False</snippet></ROW><ROW><id>10986041</id><snippet>from PIL import Image, ImageChops

def is_there_a_border(im):
    bg = Image.new(im.mode, im.size, im.getpixel((0,0)))
    diff = ImageChops.difference(im, bg)
    diff = ImageChops.add(diff, diff, 2.0, -100)
    bbox = diff.getbbox()
    return bbox != (0,0,im.size[0],im.size[1])
</snippet></ROW><ROW><id>10986041</id><snippet>True</snippet></ROW><ROW><id>10986041</id><snippet>    return all((bbox[0], bbox[1], (bbox[0] + bbox[2]) &lt;= im.size[0], 
                                  (bbox[1] + bbox[3]) &lt;= im.size[1]))
</snippet></ROW><ROW><id>10986041</id><snippet>False:</snippet></ROW><ROW><id>10986041</id><snippet>False:</snippet></ROW><ROW><id>10986041</id><snippet>True:</snippet></ROW><ROW><id>10986157</id><snippet>from glob import glob
from process import process_one_file

for i in range(100):
    process_one_file(glob('prefix_foo_{}_*'.format(i)))
</snippet></ROW><ROW><id>10986179</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>10986179</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>10986179</id><snippet>/usr/bin</snippet></ROW><ROW><id>10986179</id><snippet>chmod +x script_name.py
</snippet></ROW><ROW><id>10986179</id><snippet>python</snippet></ROW><ROW><id>10986179</id><snippet>./script_name.py 
</snippet></ROW><ROW><id>10986179</id><snippet>alias</snippet></ROW><ROW><id>10986179</id><snippet>alias p="python"
</snippet></ROW><ROW><id>10986179</id><snippet>~/.bashrc</snippet></ROW><ROW><id>10986942</id><snippet>from pandas import read_csv
import numpy as np

df = read_csv('/Users/admin/Documents/data.csv')
</snippet></ROW><ROW><id>10987025</id><snippet>itertools.cycle()</snippet></ROW><ROW><id>10987025</id><snippet>from itertools import cycle
myIterator = cycle(range(2))

myIterator.next()   # or next(myIterator) which works in Python 3.x. Yields 0
myIterator.next()   # or next(myIterator) which works in Python 3.x. Yields 1
# etc.
</snippet></ROW><ROW><id>10987025</id><snippet>[0, 1]</snippet></ROW><ROW><id>10987025</id><snippet>from itertools import cycle
mySmallSquareIterator = cycle(i*i for i in range(10))
# Will yield 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 0, 1, 4, ...
</snippet></ROW><ROW><id>10987035</id><snippet>import cv2
import numpy as np

# Load the images
img =cv2.imread('messi4.jpg')

# Convert them to grayscale
imgg =cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# SURF extraction
surf = cv2.SURF()
kp, descritors = surf.detect(imgg,None,useProvidedKeypoints = False)

# Setting up samples and responses for kNN
samples = np.array(descritors)
responses = np.arange(len(kp),dtype = np.float32)

# kNN training
knn = cv2.KNearest()
knn.train(samples,responses)

# Now loading a template image and searching for similar keypoints
template = cv2.imread('template.jpg')
templateg= cv2.cvtColor(template,cv2.COLOR_BGR2GRAY)
keys,desc = surf.detect(templateg,None,useProvidedKeypoints = False)

for h,des in enumerate(desc):
    des = np.array(des,np.float32).reshape((1,128))
    retval, results, neigh_resp, dists = knn.find_nearest(des,1)
    res,dist =  int(results[0][0]),dists[0][0]

    if dist&lt;0.1: # draw matched keypoints in red color
        color = (0,0,255)
    else:  # draw unmatched in blue color
        print dist
        color = (255,0,0)

    #Draw matched key points on original image
    x,y = kp[res].pt
    center = (int(x),int(y))
    cv2.circle(img,center,2,color,-1)

    #Draw matched key points on template image
    x,y = keys[h].pt
    center = (int(x),int(y))
    cv2.circle(template,center,2,color,-1)

cv2.imshow('img',img)
cv2.imshow('tm',template)
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>10987345</id><snippet>self.fields['password1'] = forms.CharField(label=_("Password"),
            widget=forms.PasswordInput, required = False)
self.fields['password2'] = forms.CharField(label=_("Password confirmation"),
            widget=forms.PasswordInput, required = False,
            help_text = _("Enter the same password as above, for verification."))
</snippet></ROW><ROW><id>10987416</id><snippet>-noreset</snippet></ROW><ROW><id>10987416</id><snippet>top</snippet></ROW><ROW><id>10987597</id><snippet>class FooAdmin(admin.ModelAdmin):
    def queryset(self, request):
        qs = super(FooAdmin, self).queryset(request)

        return qs.distinct() \
        .annotate(date_of_last_comment=Max('comment__date')) \
        .order_by('-date_of_last_comment')
</snippet></ROW><ROW><id>10987875</id><snippet>a = [0, 1, 2, 3, 5, 7, 8, 10]
it = iter(a)
start = next(it)
slices = []
for i, x in enumerate(it):
    if x - a[i] != 1:
        end = a[i]
        if start == end:
            slices.append([start])
        else:
            slices.append([start, end])
        start = x
if a[-1] == start:
    slices.append([start])
else:
    slices.append([start, a[-1]])
</snippet></ROW><ROW><id>10987875</id><snippet>from itertools import groupby
a = [0, 1, 2, 3, 5, 7, 8, 10]
slices = []
for key, it in groupby(enumerate(a), lambda x: x[1] - x[0]):
    indices = [y for x, y in it]
    if len(indices) == 1:
        slices.append([indices[0]])
    else:
        slices.append([indices[0], indices[-1]])
</snippet></ROW><ROW><id>10987912</id><snippet>from datetime import datetime, timedelta

posts = Post.objects.filter(author=member.user, xyz=xzy_id, pub_date__gte=datetime.now()-timedelta(days=7))
</snippet></ROW><ROW><id>10988027</id><snippet>l = len(myArray)

#create start and end indices for each slice
slices = ((i * l // 10, (i + 1) * l // 10) for i in xrange(0, 10))

#build (small, big) pairs
pairs = [(myArray[a:b], myArray[:a] + myArray[b:]) for a, b in slices]

for small, big in pairs:
    pass
</snippet></ROW><ROW><id>10988292</id><snippet>def repaintAll(self):
    """ Refresh the paint on the entire tree """
    region = self.tree.childrenRegion()
    self.tree.setDirtyRegion(region)
</snippet></ROW><ROW><id>10988303</id><snippet>with r.pipeline() as pipe:
    while True:
        try:
            pipe.watch("a_hash")
            if pipe.exists("a_hash"):
                pipe.multi()
                pipe.hset("a_hash", "key", "value")
                pipe.execute()
            break
        except redis.WatchError:
            continue
        finally:
            pipe.reset()
</snippet></ROW><ROW><id>10988596</id><snippet>\xd7</snippet></ROW><ROW><id>10988596</id><snippet>×</snippet></ROW><ROW><id>10988596</id><snippet>Ã—</snippet></ROW><ROW><id>10988596</id><snippet>×</snippet></ROW><ROW><id>10988596</id><snippet>Ã—</snippet></ROW><ROW><id>10988668</id><snippet>find -type f | parallel --tag 'eml-to-text {} | grep -o -n -b -f /tmp/list_of_interesting_words'
</snippet></ROW><ROW><id>10988668</id><snippet>grep</snippet></ROW><ROW><id>10988668</id><snippet>grep</snippet></ROW><ROW><id>10988668</id><snippet>find . -type f | parallel 'eml-to-text {} &gt;/tmp/unpacked/{#}'
find /tmp/unpacked -type f | parallel -X grep -H -o -n -b -f /tmp/list_of_interesting_words
</snippet></ROW><ROW><id>10988668</id><snippet>grep -f</snippet></ROW><ROW><id>10988668</id><snippet>cat /tmp/list_of_interesting_words | parallel --pipe --block 10k --files &gt; /tmp/blocks_of_words
</snippet></ROW><ROW><id>10988668</id><snippet>find /tmp/unpacked -type f | parallel -j1 -I ,, parallel --arg-file-sep // -X grep -H -o -n -b -f ,, {} // - :::: /tmp/blocks_of_words
</snippet></ROW><ROW><id>10988668</id><snippet>word</snippet></ROW><ROW><id>10988668</id><snippet>... | sort -k4 -t: &gt; index.by.word
</snippet></ROW><ROW><id>10988668</id><snippet>... | sort -k4 -t: | tee index.by.word | awk 'FS=":" {print $4}' | uniq -c
</snippet></ROW><ROW><id>10988668</id><snippet>find . -type f | parallel --tag 'eml-to-text {} | grep -F -w -o -n -b -f /tmp/list_of_interesting_words' | sort -k3 -t: | tee index.by.word | awk 'FS=":" {print $3}' | uniq -c
</snippet></ROW><ROW><id>10988745</id><snippet>**kwargs</snippet></ROW><ROW><id>10988745</id><snippet>**kwargs</snippet></ROW><ROW><id>10988745</id><snippet>INITIAL_ARGS = set(['a','b','c','d','e'...])

def __init__(self, **kwargs):
    if not INITIAL_ARGS.issubset(set(kwargs.iterkeys())):
        raise ValueError("Class &lt;myclass&gt; requires 20 keyword arguments"
                          "only given %d" % len(kwargs))
    self.__dict__.update(kwargs)
</snippet></ROW><ROW><id>10988909</id><snippet>DiffWithSaved</snippet></ROW><ROW><id>10988909</id><snippet>Gvim</snippet></ROW><ROW><id>10988909</id><snippet>" copy this to your vimrc or source it

" tells vim not to automatically reload changed files
set noautoread 

function! DiffWithSaved()
  let filetype=&amp;ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

" sets up mappings to function

com! DiffSaved call DiffWithSaved()
map &lt;Leader&gt;ds :DiffSaved&lt;CR&gt;
</snippet></ROW><ROW><id>10988909</id><snippet>" run these commands after sourcing the above function

" % expands to filename (also %:h to head, %:t to tail)
" if it throws an error, just do :cd %:h first

:!autopep8 --in-place %
:DiffSaved
</snippet></ROW><ROW><id>10988909</id><snippet>difftool</snippet></ROW><ROW><id>10988909</id><snippet>diff</snippet></ROW><ROW><id>10989089</id><snippet>__tablename__ = "paste_code"
</snippet></ROW><ROW><id>10989155</id><snippet>os.walk</snippet></ROW><ROW><id>10989155</id><snippet>os.walk('C:\dir1\dir2\startdir').next()[0]</snippet></ROW><ROW><id>10989155</id><snippet>os.walk('C:\dir1\dir2\startdir').next()[1]</snippet></ROW><ROW><id>10989155</id><snippet>os.walk('C:\dir1\dir2\startdir').next()[2]</snippet></ROW><ROW><id>10989155</id><snippet>import os.path
....
for path, directories, files in os.walk('C:\dir1\dir2\startdir'):
     if file in files:
          print 'found %s' % os.path.join(path, file)
</snippet></ROW><ROW><id>10989155</id><snippet>def search_file(directory = None, file = None):
    assert os.path.isdir(directory)
    for cur_path, directories, files in os.walk(directory):
        if file in files:
            return os.path.join(directory, cur_path, file)
    return None
</snippet></ROW><ROW><id>10989155</id><snippet>import os
def search_file(directory = None, file = None):
    assert os.path.isdir(directory)
    current_path, directories, files = os.walk(directory).next()
    if file in files:
        return os.path.join(directory, file)
    elif directories == '':
        return None
    else:
        for new_directory in directories:
            result = search_file(directory = os.path.join(directory, new_directory), file = file)
            if result:
                return result
        return None
</snippet></ROW><ROW><id>10989358</id><snippet>empty()</snippet></ROW><ROW><id>10989358</id><snippet>in</snippet></ROW><ROW><id>10989358</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; a[1] = "x"
&gt;&gt;&gt; a[3] = "y"
&gt;&gt;&gt; a[5] = "z"
&gt;&gt;&gt; i = 3
&gt;&gt;&gt; i in a
True
&gt;&gt;&gt; i = 2
&gt;&gt;&gt; i in a
False
</snippet></ROW><ROW><id>10989373</id><snippet>for x in range(n):
      M1[i:i+n,j+x] = m[x]
for x in range(n): 
      M1[j+x,i:i+n] = m[x]
</snippet></ROW><ROW><id>10989373</id><snippet>xs=np.arange(4).reshape(2,2)
ys=np.zeros((7,7))
ys[i:i+n,j:j+n]=xs
ys[j:j+n,i:i+n]=xs.T
print ys
&gt;&gt; array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  2.,  3.,  0.,  0.],
       [ 0.,  0.,  2.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  3.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>10989385</id><snippet>ABC(?:(?!ABC).)*?XYZ</snippet></ROW><ROW><id>10989385</id><snippet>DOTALL</snippet></ROW><ROW><id>10989547</id><snippet>ix_</snippet></ROW><ROW><id>10989547</id><snippet>&gt;&gt;&gt; from numpy import array, arange, ix_
&gt;&gt;&gt; a = arange(25).reshape(5,5)
&gt;&gt;&gt; Xinds = array([1,2,3])
&gt;&gt;&gt; Yinds = array([1,2,3])
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&gt;&gt;&gt; a[ix_(Xinds, Yinds)]
array([[ 6,  7,  8],
       [11, 12, 13],
       [16, 17, 18]])
&gt;&gt;&gt; a[ix_(Xinds+1, Yinds)]
array([[11, 12, 13],
       [16, 17, 18],
       [21, 22, 23]])
&gt;&gt;&gt; Y2inds = array([1,3,4])
&gt;&gt;&gt; a[ix_(Xinds, Y2inds)]
array([[ 6,  8,  9],
       [11, 13, 14],
       [16, 18, 19]])
&gt;&gt;&gt; a[ix_(Xinds, Y2inds-1)]
array([[ 5,  7,  8],
       [10, 12, 13],
       [15, 17, 18]])
</snippet></ROW><ROW><id>10989577</id><snippet>?</snippet></ROW><ROW><id>10989584</id><snippet>subprocess.Popen.args</snippet></ROW><ROW><id>10989584</id><snippet>_args</snippet></ROW><ROW><id>10989584</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>10989584</id><snippet>&gt;&gt;&gt; class NamedPopen(Popen):
...     def __init__(self, cargs, *args):
...         Popen.__init__(self, cargs, *args)
...         self.args = cargs
... 
&gt;&gt;&gt; x = NamedPopen("ls")
&gt;&gt;&gt; x.args
'ls'
</snippet></ROW><ROW><id>10989674</id><snippet>pack</snippet></ROW><ROW><id>10989674</id><snippet>grid</snippet></ROW><ROW><id>10989674</id><snippet>master</snippet></ROW><ROW><id>10989674</id><snippet>top</snippet></ROW><ROW><id>10989674</id><snippet>callback</snippet></ROW><ROW><id>10989674</id><snippet>from Tkinter import *

def callback():
    print 'You clicked the button!'

top = Tk()
L1 = Label(top, text="User Name")
L1.grid(row=0, column=0)
E1 = Entry(top, bd = 5)
E1.grid(row=0, column=1)

MyButton1 = Button(top, text="Submit", width=10, command=callback)
MyButton1.grid(row=1, column=1)

top.mainloop()
</snippet></ROW><ROW><id>10989692</id><snippet>print "Being imported..."
</snippet></ROW><ROW><id>10989692</id><snippet>module1.py</snippet></ROW><ROW><id>10989692</id><snippet>sys.path</snippet></ROW><ROW><id>10989693</id><snippet>new_list = [item for item in itertools.product(*start_list) if sum(item) == 200]
</snippet></ROW><ROW><id>10989717</id><snippet>import Tkinter as tk

class ButtonEntry(tk.Frame):
    def __init__(self,master,ss):
        tk.Frame.__init__(self)
        self.var=tk.StringVar()
        self.var.set(ss)
        self.Button=tk.Button(self,text='Button',command=lambda :self.var.set("foo!"))
        self.Entry=tk.Entry(self,textvariable=self.var)
        self.Button.grid(row=0,column=0)
        self.Entry.grid(row=0,column=1)


class App(tk.Frame):
    def __init__(self,master=None):
        tk.Frame.__init__(self,master)
        self.BEs=[]
        for i in range(10):
            b=ButtonEntry(self,'Button %d'%i)
            b.grid(row=i,column=0)
            self.BEs.append(b)


if __name__ == '__main__':
    root=tk.Tk()
    f=App(root)
    f.grid(row=0,column=0)
    root.mainloop()
</snippet></ROW><ROW><id>10989810</id><snippet>retcode=subprocess.call(...)</snippet></ROW><ROW><id>10989810</id><snippet>retcode</snippet></ROW><ROW><id>10989810</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>10989810</id><snippet>retcode</snippet></ROW><ROW><id>10989810</id><snippet>raise subprocess.CalledProcessError</snippet></ROW><ROW><id>10989810</id><snippet>&gt;&gt;&gt; import subprocess 
&gt;&gt;&gt; raise subprocess.CalledProcessError
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __init__() takes exactly 3 arguments (1 given)
</snippet></ROW><ROW><id>10989810</id><snippet>try:
    subprocess.check_call('ST convert.stc', shell = True, stdout = TEMPFILE, stderr = TEMPFILE)
except Exception as e:
    raise CritError(messages.crit_error_bad_command+' '+str(e))
</snippet></ROW><ROW><id>10989810</id><snippet>subprocess.call</snippet></ROW><ROW><id>10989841</id><snippet>show="*"</snippet></ROW><ROW><id>10989841</id><snippet>E1 = Entry(top, bd = 5, show="*")
</snippet></ROW><ROW><id>10989954</id><snippet>{{ your_date_value|date:"SHORT_DATE_FORMAT" }}
</snippet></ROW><ROW><id>10990325</id><snippet>submit_btn = Button(top, text="Submit", width=10, command=check_vincent)

def check_vincent():
    if username.get() == "Vincent":
        print "Hi, Vincent!"
    else:
        print "Where's Vincent?"
</snippet></ROW><ROW><id>10990558</id><snippet>|</snippet></ROW><ROW><id>10990558</id><snippet>if contactstring == (""['Practice Address Not Available']"" | contactstring) == "['']":
</snippet></ROW><ROW><id>10990558</id><snippet>if contactstring == ""['Practice Address Not Available']"" or contactstring == "['']":
</snippet></ROW><ROW><id>10990558</id><snippet> if contactstring in ("['Practice Address Not Available']", ['']):
</snippet></ROW><ROW><id>10990569</id><snippet>dict()</snippet></ROW><ROW><id>10990569</id><snippet>old_name_list = ["a-1234", "a-1235", "a-1236"]
new_name_list = [("a-1235", "a-5321"), ("a-1236", "a-6321"), ("a-1234", "a-4321") ]

d = dict(new_name_list)

for n in old_name_list:
    print d[n]
</snippet></ROW><ROW><id>10990793</id><snippet># Assuming you have a large dictionary across a multi-part gzip files.
def files_to_be_analyzed(files):
    lines = ast.literal_eval("".join([gzip.open(file).read() for file in files]))
    date = lines['created_at']
    date_converted = parser.parse(date).strftime('%Y%m%d')
    output_file = gzip.open(date_converted, "a")
    output_file.write(lines + "\n")
    output_file.close()
</snippet></ROW><ROW><id>10990793</id><snippet>import gzip
import ast
import json
import glob
import fileinput
from dateutil import parser
from multiprocessing import Pool

# Assuming you have a large dictionary across a multi-part gzip files.
def files_to_be_analyzed(files):
    lines = ast.literal_eval("".join([gzip.open(file).read() for file in files]))
    date = lines['created_at']
    date_converted = parser.parse(date).strftime('%Y%m%d')
    output_file = gzip.open(date_converted, "a")
    output_file.write(lines + "\n")
    output_file.close()

if __name__ == '__main__':
    pool = Pool(processes = 5) # Or what ever number of cores you have
    directories = ['/path/to/this/dire', '/path/to/another/dir']
    pool.map(files_to_be_analyzed, [glob.glob(path) for path in directories])
    pools.close()
    pools.join()
</snippet></ROW><ROW><id>10990830</id><snippet>wx.EVT_LEFT_DOWN</snippet></ROW><ROW><id>10990830</id><snippet>MoveMouse()</snippet></ROW><ROW><id>10990830</id><snippet>Click()</snippet></ROW><ROW><id>10991168</id><snippet>cascade='delete'</snippet></ROW><ROW><id>10991168</id><snippet>to_user</snippet></ROW><ROW><id>10991168</id><snippet>relationship()</snippet></ROW><ROW><id>10991168</id><snippet>ondelete</snippet></ROW><ROW><id>10991168</id><snippet>ForeignKey</snippet></ROW><ROW><id>10991222</id><snippet>def intF(n, d, l=40):
    s=str(n*10**l / d)
    if len(s) &lt; l:
        return '0.{:0&gt;{width}}'.format(s,width=l)
    if len(s) &gt; l:
        return s[0:len(s)-l]+'.'+s[len(s)-l:] 

    return '0.'+s


for f in [(1,7), (2,3), (22,7), (7001,7), (9,3), 
          (611951,611953), (1,11),(1,7689585)]:
    print intF(*f)
    print float(f[0]) / f[1]
    print 
</snippet></ROW><ROW><id>10991222</id><snippet>0.1428571428571428571428571428571428571428
0.142857142857

0.6666666666666666666666666666666666666666
0.666666666667

3.1428571428571428571428571428571428571428
3.14285714286

1000.1428571428571428571428571428571428571428
1000.14285714

3.0000000000000000000000000000000000000000
3.0

0.9999967317751526669531810449495304377950
0.999996731775

0.0909090909090909090909090909090909090909
0.0909090909091

0.0000001300460297922449651053990559958697
1.30046029792e-07
</snippet></ROW><ROW><id>10991334</id><snippet>plt.xticks(width, heightList, rotation='vertical')
</snippet></ROW><ROW><id>10991348</id><snippet>\x08 \x08</snippet></ROW><ROW><id>10991348</id><snippet>\x08</snippet></ROW><ROW><id>10991348</id><snippet>\x08</snippet></ROW><ROW><id>10991348</id><snippet>*</snippet></ROW><ROW><id>10991348</id><snippet>print repr(x)</snippet></ROW><ROW><id>10991348</id><snippet>x = msvcrt.getch()</snippet></ROW><ROW><id>10991813</id><snippet>in</snippet></ROW><ROW><id>10991813</id><snippet>list.index()</snippet></ROW><ROW><id>10991813</id><snippet>n^2 / 2 - n</snippet></ROW><ROW><id>10991813</id><snippet>for each first element in theList:
    for each second element in the rest of theList from the checked one on:
        if the first and the second elements give the solution:
            report the result
            possibly early break if only the first should be reported
</snippet></ROW><ROW><id>10991813</id><snippet>enumerate()</snippet></ROW><ROW><id>10991813</id><snippet>searched = sum - first</snippet></ROW><ROW><id>10991813</id><snippet>if</snippet></ROW><ROW><id>10991813</id><snippet>if searched in the rest of theList:</snippet></ROW><ROW><id>10991813</id><snippet>def sumPair(theList, n):
    for index, e in enumerate(theList):     # to know the index for the slicing below
        complement = n - e                  # we are searching for the complement
        if complement in theList[index+1:]: # only the rest is searched
            return e, complement            

print sumPair([6,3,6,8,3,2,8,3,2], 11)
</snippet></ROW><ROW><id>10991813</id><snippet>list.index()</snippet></ROW><ROW><id>10991813</id><snippet>ValueError</snippet></ROW><ROW><id>10991813</id><snippet>if complement...</snippet></ROW><ROW><id>10991813</id><snippet>try ... except</snippet></ROW><ROW><id>10991813</id><snippet>def sumPair2(theList, n):
    for ind, e in enumerate(theList):
        try:
            theList.index(n - e, ind + 1)
            return e, n - e
        except ValueError:
            pass
</snippet></ROW><ROW><id>10991813</id><snippet>set</snippet></ROW><ROW><id>10991813</id><snippet>import timeit

def sumPair(theList, n):
    for index, e in enumerate(theList):
        if n - e in theList[index+1:]:
            return e, n - e

def sumPair2(theList, n):
    for ind, e in enumerate(theList):
        try:
            theList.index(n - e, ind + 1)
            return e, n - e
        except ValueError:
            pass

def sumPair_gnibbler(theList, n):
    # If n is even, check whether n/2 occurs twice or more in theList
    if n%2 == 0 and theList.count(n/2) &gt; 1:
        return n/2, n/2

    theSet = set(theList)
    for e in theSet:
        if n - e in theSet:
            return e, n - e
</snippet></ROW><ROW><id>10991813</id><snippet>n = 1</snippet></ROW><ROW><id>10991813</id><snippet>theList = [6,3,6,8,3,2,8,3,2]

n = 11
print '---------------------', n
print sumPair(theList, n), 
print timeit.timeit('sumPair(theList, n)', 'from __main__ import sumPair, theList, n', number = 1000)

print sumPair2(theList, n), 
print timeit.timeit('sumPair2(theList, n)', 'from __main__ import sumPair2, theList, n', number = 1000)

print sumPair_gnibbler(theList, n),
print timeit.timeit('sumPair_gnibbler(theList, n)', 'from __main__ import sumPair_gnibbler, theList, n', number = 1000)

n = 1
print '---------------------', n
print sumPair(theList, n), 
print timeit.timeit('sumPair(theList, n)', 'from __main__ import sumPair, theList, n', number = 1000)

print sumPair2(theList, n), 
print timeit.timeit('sumPair2(theList, n)', 'from __main__ import sumPair2, theList, n', number = 1000)

print sumPair_gnibbler(theList, n),
print timeit.timeit('sumPair_gnibbler(theList, n)', 'from __main__ import sumPair_gnibbler, theList, n', number = 1000)
</snippet></ROW><ROW><id>10991813</id><snippet>--------------------- 11
(3, 8) 0.00180958639191
(3, 8) 0.00594907526295
(8, 3) 0.00124991060067
--------------------- 1
None 0.00502748219333
None 0.026334041968
None 0.00150958864789
</snippet></ROW><ROW><id>10991813</id><snippet>theList = range(10000)

n = 11
print '---------------------', n
print sumPair(theList, n), 
print timeit.timeit('sumPair(theList, n)', 'from __main__ import sumPair, theList, n', number = 100)

print sumPair2(theList, n), 
print timeit.timeit('sumPair2(theList, n)', 'from __main__ import sumPair2, theList, n', number = 100)

print sumPair_gnibbler(theList, n),
print timeit.timeit('sumPair_gnibbler(theList, n)', 'from __main__ import sumPair_gnibbler, theList, n', number = 100)

n = 3000
print '---------------------', n
print sumPair(theList, n), 
print timeit.timeit('sumPair(theList, n)', 'from __main__ import sumPair, theList, n', number = 100)

print sumPair2(theList, n), 
print timeit.timeit('sumPair2(theList, n)', 'from __main__ import sumPair2, theList, n', number = 100)

print sumPair_gnibbler(theList, n),
print timeit.timeit('sumPair_gnibbler(theList, n)', 'from __main__ import sumPair_gnibbler, theList, n', number = 100)

n = 30000
print '---------------------', n
print sumPair(theList, n), 
print timeit.timeit('sumPair(theList, n)', 'from __main__ import sumPair, theList, n', number = 100)

print sumPair2(theList, n), 
print timeit.timeit('sumPair2(theList, n)', 'from __main__ import sumPair2, theList, n', number = 100)

print sumPair_gnibbler(theList, n),
print timeit.timeit('sumPair_gnibbler(theList, n)', 'from __main__ import sumPair_gnibbler, theList, n', number = 100)
</snippet></ROW><ROW><id>10991813</id><snippet>number</snippet></ROW><ROW><id>10991813</id><snippet>--------------------- 11
(0, 11) 0.00840137682165
(0, 11) 0.00015695881967
(0, 11) 0.089894683992
--------------------- 3000
(0, 3000) 0.0166750746034
(0, 3000) 0.00966040735374
(0, 3000) 0.12532849753
--------------------- 30000
None 180.328006493
None 163.651082944
None 0.204691100723
</snippet></ROW><ROW><id>10991862</id><snippet>manage.py</snippet></ROW><ROW><id>10991862</id><snippet>from gevent import monkey; monkey.patch_all()</snippet></ROW><ROW><id>10991862</id><snippet>run_production_server</snippet></ROW><ROW><id>10991862</id><snippet>1234</snippet></ROW><ROW><id>10991862</id><snippet>run_production_server</snippet></ROW><ROW><id>10991862</id><snippet>from gevent import monkey; monkey.patch_all()
from gevent.wsgi import WSGIServer

from django.core.management import setup_environ    
import settings
setup_environ(settings)

from django.core.handlers.wsgi import WSGIHandler as DjangoWSGIApp
application = DjangoWSGIApp()
server = WSGIServer(("127.0.0.1", 1234), application)
print "Starting server on http://127.0.0.1:1234"
server.serve_forever()
</snippet></ROW><ROW><id>10991862</id><snippet>gunicorn</snippet></ROW><ROW><id>10991862</id><snippet>uwsgi</snippet></ROW><ROW><id>10991872</id><snippet>to_json = {'query': q, 'suggestions': s}
</snippet></ROW><ROW><id>10991872</id><snippet>{query:q ...</snippet></ROW><ROW><id>10991872</id><snippet>global name 'query' is not defined</snippet></ROW><ROW><id>10991920</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import subprocess
import sys
import os
import re
import time
from visual import *


def find_window_id (title):
    """Gets the OpenGL window ID."""
    pattern = re.compile('0x[0-9abcdef]{7}')
    proc = subprocess.Popen(['xwininfo', '-name', title],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    errors = proc.stderr.readlines()
    if errors:
        return None
    for line in proc.stdout.readlines():
        match = pattern.findall(line)
        if len(match):
            return long(match[0], 16)
    return None



class Setting ():
    """VPython/OpenGL class."""

    def __init__ (self, w=256, h=256, title='OpenGL via VPython'):
        """Initiator."""
        self.width = w
        self.height = h
        self.title = title
        self.scene = display.get_selected() 
        self.scene.title = self.title
        self.scene.width = self.width
        self.scene.height = self.height
        self.sphere = sphere()



class GTKDisplay ():

    def __init__ (self, winID):
        """Initiator: Draws the GTK GUI."""
        import gtk
        import pygtk
        self.OpenGLWindowID = winID
        window = gtk.Window()
        window.show()
        socket = gtk.Socket()
        socket.show()
        window.add(socket)
        window.connect("destroy", lambda w: gtk.main_quit())
        socket.add_id(long(self.OpenGLWindowID))
        gtk.main()



def main ():
    """Main entry point."""
    name = 'sphere OpenGL window'
    child_pid = os.fork()
    if 0 == child_pid:
        sut = Setting(title=name)
    else:
        winID = None
        while not winID:
            time.sleep(.1)
            winID = find_window_id(name)
        try:
            gui = GTKDisplay(winID)
        except KeyboardInterrupt, err:
            print '\nAdieu monde cruel!'


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>10992173</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10992173</id><snippet>/usr/local/lib/python2.7/site-packages:$PYTHONPATH</snippet></ROW><ROW><id>10992173</id><snippet>PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH</snippet></ROW><ROW><id>10992239</id><snippet>ROW_COUNT()</snippet></ROW><ROW><id>10992239</id><snippet>UPDATE</snippet></ROW><ROW><id>10992239</id><snippet>CLIENT_FOUND_ROWS</snippet></ROW><ROW><id>10992239</id><snippet>mysql_real_connect()</snippet></ROW><ROW><id>10992239</id><snippet>mysqld</snippet></ROW><ROW><id>10992239</id><snippet>WHERE</snippet></ROW><ROW><id>10992239</id><snippet>SQL</snippet></ROW><ROW><id>10992239</id><snippet>UPDATE  table
SET     field = 10
WHERE   id = 1
    AND field &lt; 10
</snippet></ROW><ROW><id>10992318</id><snippet>item == 'audio' and 'video'</snippet></ROW><ROW><id>10992318</id><snippet>item == 'audio and True'</snippet></ROW><ROW><id>10992318</id><snippet>item == 'audio'</snippet></ROW><ROW><id>10992318</id><snippet>files = []
for item in mylist:
  if item == 'video':
    files.append('../download/video.html')
  elif item == 'audio':
    files.append('../download/audio.html')
zip(files)
</snippet></ROW><ROW><id>10992318</id><snippet>def zip (filenames):
    buffer= StringIO.StringIO()
    z= zipfile.ZipFile( buffer, "w" )
    [z.writestr(f) for f in filenames]
    z.close()
    # generate the file
    response = HttpResponse(FileWrapper(z), content_type='application/zip')
    response['Content-Disposition'] = 'attachment; filename=z.zip'
    return response
</snippet></ROW><ROW><id>10992363</id><snippet> re.findall(r'[369]', my_str)
</snippet></ROW><ROW><id>10992363</id><snippet>lst = "55,62,12,72,55"
print [x for x in lst.split(',') if int(x) % 3 == 0]
</snippet></ROW><ROW><id>10992555</id><snippet>set character set utf8</snippet></ROW><ROW><id>10992555</id><snippet>default-character-set=utf8</snippet></ROW><ROW><id>10992555</id><snippet>~/.my.cnf</snippet></ROW><ROW><id>10993202</id><snippet>from X import Y</snippet></ROW><ROW><id>10993202</id><snippet>from fibo import fib
print("foo")
import fibo
</snippet></ROW><ROW><id>10993202</id><snippet>This is a statement</snippet></ROW><ROW><id>10993202</id><snippet>foo</snippet></ROW><ROW><id>10993202</id><snippet>import</snippet></ROW><ROW><id>10993202</id><snippet>This is a statement</snippet></ROW><ROW><id>10993202</id><snippet>fibo</snippet></ROW><ROW><id>10993362</id><snippet>askopenfilename</snippet></ROW><ROW><id>10993362</id><snippet>askopenfile</snippet></ROW><ROW><id>10993362</id><snippet>mode</snippet></ROW><ROW><id>10993427</id><snippet>apt-get remove --purge scrapy-0.14 python-mysqldb
apt-get autoremove
apt-get clean
easy_install -U scrapy
easy_install -U MySQL-python
</snippet></ROW><ROW><id>10993427</id><snippet>python-setuptools</snippet></ROW><ROW><id>10993427</id><snippet>python-dev</snippet></ROW><ROW><id>10993427</id><snippet>libmysqlclient-dev</snippet></ROW><ROW><id>10993777</id><snippet>&amp;</snippet></ROW><ROW><id>10993777</id><snippet>&lt;</snippet></ROW><ROW><id>10993777</id><snippet>&gt;</snippet></ROW><ROW><id>10993777</id><snippet>&gt;&gt;&gt; import cgi
&gt;&gt;&gt; cgi.escape("&lt;hello&amp;goodbye&gt;")
'&lt;hello&amp;goodbye&gt;'
</snippet></ROW><ROW><id>10993777</id><snippet>&gt;&gt;&gt; "Übeltäter".encode("ascii", "xmlcharrefreplace")
b'Übeltäter'
</snippet></ROW><ROW><id>10993777</id><snippet>&gt;&gt;&gt; cgi.escape("&lt;Übeltäter&gt;").encode("ascii", "xmlcharrefreplace")
b'&lt;Übeltäter&gt;'
</snippet></ROW><ROW><id>10993890</id><snippet>xterm -e python something.py &amp;
</snippet></ROW><ROW><id>10993890</id><snippet>&amp;</snippet></ROW><ROW><id>10994240</id><snippet>__eq__()</snippet></ROW><ROW><id>10994240</id><snippet>__hash__()</snippet></ROW><ROW><id>10994713</id><snippet>from collections import defaultdict
import logging
import threading

class ContextAwareFormatter(logging.Formatter):
    """
    Makes use of get_context() to populate the record attributes.
    """

    def format(self, record):
        # Using defaultdict to avoid KeyErrorS when a key is not in the context.
        def factory():
            return ""
        record.__dict__ = defaultdict(factory, record.__dict__)

        for k, v in get_context().iteritems():
            if not hasattr(record, k):
                setattr(record, k, v)
        return logging.Formatter.format(self, record)

THREADLOCAL_ATTR = "logging_context"
_threadlocal = threading.local()

def get_context():
    result = getattr(_threadlocal, THREADLOCAL_ATTR, None)
    if result is None:
        result = {}
        setattr(_threadlocal, THREADLOCAL_ATTR, result)
    return result

def set_context(**context):
    c = get_context()
    c.clear()
    c.update(**context)
    return c

def update_context(**context):
    c = get_context()
    c.update(**context)
    return c
</snippet></ROW><ROW><id>10994713</id><snippet>"formatters": {
    "default": {
        "()": "log.ContextAwareFormatter",
        "format": "%(asctime)s %(levelname)s [%(request_id)s] %(message)s (%(module)s:%(lineno)d)",
    },
}
</snippet></ROW><ROW><id>10994713</id><snippet>update_context(request_id=request_id)
</snippet></ROW><ROW><id>10994713</id><snippet>request_id</snippet></ROW><ROW><id>10994844</id><snippet>import wx
from wx import EVT_MENU, EVT_CLOSE
import wx.grid as gridlib

from statusclient import JobDataTable, JobDataGrid


app = wx.App()


log = Logger(__name__)


class JobManager(wx.Frame):

    def __init__(self, parent, title):
        super(JobManager, self).__init__(parent, title=title)
        panel = wx.Panel(self, -1)

        self.client_id = job_server.register()
        log.info('Registered with server as {}'.format(self.client_id))
        self.jobs = job_server.get_all_jobs()
        grid = self.create_grid(panel, self.jobs)       
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(grid, 1, wx.ALL|wx.EXPAND)
        panel.SetSizer(sizer)

        # Bind Close Event
        EVT_CLOSE(self, self.exit)
        self.Center()
        self.Show()

    def exit(self, event):
        log.info('Unregistering {0} from server...'.format(self.client_id))
        job_server.unregister(self.client_id)
        job_server.close()
        exit()

    def create_grid(self, panel, data):
        table = JobDataTable(jobs=data)
        grid = JobDataGrid(panel)
        grid.CreateGrid(len(data), len(data[0].keys()))
        grid.SetTable(table)
        grid.AutoSize()
        grid.AutoSizeColumns(True)
        return grid

def main():
    frame = JobManager(None, 'Larskhill Job Manager')
    app.MainLoop()

if __name__ == '__main__':
        job_server = zerorpc.Client()
        job_server.connect('tcp://0.0.0.0:4242')
    main()


####
ui/client.py
####

import wx
import wx.grid as gridlib

EVEN_ROW_COLOUR = '#CCE6FF'
GRID_LINE_COLOUR = '#ccc'
COLUMNS = {0:('id', 'ID'), 1:('name', 'Name'), 2:('created_at', 'Created'), 3:('status', 'Current Status')}

log = Logger(__name__)

class JobDataTable(gridlib.PyGridTableBase):

    """
    A custom wxGrid Table that expects a user supplied data source.
    """
    def __init__(self, jobs=None):
        gridlib.PyGridTableBase.__init__(self)
        self.headerRows = 0
        self.jobs = jobs

#-------------------------------------------------------------------------------
# Required methods for the wxPyGridTableBase interface
#-------------------------------------------------------------------------------

    def GetNumberRows(self):
        return len(self.jobs)

    def GetNumberCols(self):
        return len(COLUMNS.keys())

    #---------------------------------------------------------------------------
    # Get/Set values in the table.  The Python version of these
    # methods can handle any data-type, (as long as the Editor and
    # Renderer understands the type too,) not just strings as in the
    # C++ version. We load thises directly from the Jobs Data.
    #---------------------------------------------------------------------------
    def GetValue(self, row, col):
        prop, label = COLUMNS.get(col)
        #log.debug('Setting cell value')
        return self.jobs[row][prop]

    def SetValue(self, row, col, value):
        pass

    #---------------------------------------------------------------------------
    # Some optional methods
    # Called when the grid needs to display labels
    #---------------------------------------------------------------------------
    def GetColLabelValue(self, col):
        prop, label = COLUMNS.get(col)
        return label

    #---------------------------------------------------------------------------
    # Called to determine the kind of editor/renderer to use by
    # default, doesn't necessarily have to be the same type used
    # natively by the editor/renderer if they know how to convert.
    #---------------------------------------------------------------------------
    def GetTypeName(self, row, col):
        return gridlib.GRID_VALUE_STRING

    #---------------------------------------------------------------------------`
    # Called to determine how the data can be fetched and stored by the
    # editor and renderer.  This allows you to enforce some type-safety
    # in the grid.
    #---------------------------------------------------------------------------
    def CanGetValueAs(self, row, col, typeName):
        pass

    def CanSetValueAs(self, row, col, typeName):
        pass

    #---------------------------------------------------------------------------
    # Style the table, stripy rows and also highlight changed rows.
    #---------------------------------------------------------------------------
    def GetAttr(self, row, col, prop):
        attr = gridlib.GridCellAttr()

        # Odd Even Rows
        if row % 2 == 1:
            bg_colour = EVEN_ROW_COLOUR
            attr.SetBackgroundColour(bg_colour)

        return attr

#-------------------------------------------------------------------------------
# Custom Job Grid
#-------------------------------------------------------------------------------
class JobDataGrid(gridlib.Grid):
    def __init__(self, parent, size=wx.Size(1000, 500), data_table=None):
        self.parent = parent
        gridlib.Grid.__init__(self, self.parent, -1) # so grid references a weak reference to the parent
        self.SetGridLineColour(GRID_LINE_COLOUR)
        self.SetRowLabelSize(0)
        self.SetColLabelSize(30)
        self.table = JobDataTable()
</snippet></ROW><ROW><id>10995088</id><snippet>TemplateNotFound</snippet></ROW><ROW><id>10995088</id><snippet>def myview():
    return render_template(...)
</snippet></ROW><ROW><id>10995088</id><snippet>def myview():
    try:
        return render_template(...)
    except TemplateNotFound:
        abort(404)
</snippet></ROW><ROW><id>10995088</id><snippet>abort</snippet></ROW><ROW><id>10995088</id><snippet>flask</snippet></ROW><ROW><id>10995088</id><snippet>TemplateNotFound</snippet></ROW><ROW><id>10995088</id><snippet>jinja2</snippet></ROW><ROW><id>10995203</id><snippet>all()</snippet></ROW><ROW><id>10995203</id><snippet>if all(name in grades for name in class_):
    # whatever
</snippet></ROW><ROW><id>10995203</id><snippet>class</snippet></ROW><ROW><id>10995481</id><snippet>import matplotlib.pyplot as plt,numpy as np

def gauplot(centers, radiuses, xr=None, yr=None):
        nx, ny = 1000.,1000.
        xgrid, ygrid = np.mgrid[xr[0]:xr[1]:(xr[1]-xr[0])/nx,yr[0]:yr[1]:(yr[1]-yr[0])/ny]
        im = xgrid*0 + np.nan
        xs = np.array([np.nan])
        ys = np.array([np.nan])
        fis = np.concatenate((np.linspace(-np.pi,np.pi,100), [np.nan]) )
        cmap = plt.cm.gray
        cmap.set_bad('white')
        thresh = 3
        for curcen,currad in zip(centers,radiuses):
                curim=(((xgrid-curcen[0])**2+(ygrid-curcen[1])**2)**.5)/currad*thresh
                im[curim&lt;thresh]=np.exp(-.5*curim**2)[curim&lt;thresh]
                xs = np.append(xs, curcen[0] + currad * np.cos(fis))
                ys = np.append(ys, curcen[1] + currad * np.sin(fis))
        plt.imshow(im.T, cmap=cmap, extent=xr+yr)
        plt.plot(xs, ys, 'r-')
</snippet></ROW><ROW><id>10995481</id><snippet>    gauplot([(0,0), (2,3), (5,1), (6, 7), (6.1, 6.1)], [.3,. 4, .5, 1, .4], [-1,10], [-1,10])
             #           centers of circles           # radii of circles#
</snippet></ROW><ROW><id>10995537</id><snippet>self.txtLog.tag_config("success", foreground="blue", font="Arial 10 italic")
log = open(logFile, 'r')
while 1:
    line = log.readline()
    if len(line) == 0:
        break
    else:
        tags = ("success",) if line.startswith("SUCCESS") else None
        self.txtLog.insert(Tkinter.END, line+os.linesep, tags)
log.close()
</snippet></ROW><ROW><id>10995537</id><snippet>tag_add</snippet></ROW><ROW><id>10995537</id><snippet>tag_config</snippet></ROW><ROW><id>10995682</id><snippet>int fib (int x) { 
    if (x &lt; 2) return x;
    return fib (x-1) + fib(x-2);
}
</snippet></ROW><ROW><id>10995682</id><snippet>C</snippet></ROW><ROW><id>10995682</id><snippet>C</snippet></ROW><ROW><id>10995682</id><snippet>static int fib (int x)</snippet></ROW><ROW><id>10995682</id><snippet>def f(first, rest):
    print first
    first = rest[0]; rest = rest[1:]
    f(first, rest)
</snippet></ROW><ROW><id>10995682</id><snippet> def sum (a,b):
     return a+b

 def square(c):
     return c*c

 def square_of_sum (x,y):
     return square(sum(x,y))
</snippet></ROW><ROW><id>10995815</id><snippet>error: 'i' format requires -2147483648 &lt;= number &lt;= 2147483647
</snippet></ROW><ROW><id>10995815</id><snippet>return self._store_result(task_id, result, status, traceback, **kwargs)
</snippet></ROW><ROW><id>10995815</id><snippet>task.backend.mark_as_failure(req.id, exc, self.strtb)
</snippet></ROW><ROW><id>10995815</id><snippet>def mark_as_failure(self, task_id, exc, traceback=None):
        """Mark task as executed with failure. Stores the execption."""
        return self.store_result(task_id, exc, status=states.FAILURE,
                                 traceback=traceback)
</snippet></ROW><ROW><id>10996196</id><snippet>numpy.delete(a, index)
</snippet></ROW><ROW><id>10996196</id><snippet>import numpy as np
a
array([1, 2, 3, 4, 5, 6, 7, 8, 9])

index
[2, 3, 6]

new_a = np.delete(a, index)

new_a
array([1, 2, 5, 6, 8, 9])
</snippet></ROW><ROW><id>10996196</id><snippet>numpy.delete()</snippet></ROW><ROW><id>10996196</id><snippet>delete()</snippet></ROW><ROW><id>10996347</id><snippet>for i in listEntries :
   if i :
       print i
</snippet></ROW><ROW><id>10996580</id><snippet>self.lnchTab</snippet></ROW><ROW><id>10996580</id><snippet>self.lnchTab.setObjectName("myParentWidget");
self.lnchTab.setStyleSheet('QWidget#myParentWidget { background-color: #1d1d1d ; color: #f8f8f8}')
</snippet></ROW><ROW><id>10996836</id><snippet>+</snippet></ROW><ROW><id>10996836</id><snippet>data[0:2] + data[-2:]
</snippet></ROW><ROW><id>10997304</id><snippet>*header</snippet></ROW><ROW><id>10997304</id><snippet>[ row1, row2, ...]</snippet></ROW><ROW><id>10997304</id><snippet>row1=[elem1,elem2,elem3,...]</snippet></ROW><ROW><id>10997304</id><snippet>block=dictionary['headername']</snippet></ROW><ROW><id>10997304</id><snippet>import sys

def convert_type(ss):
    try:
        return int(ss)
    except ValueError:
        try:
            return float(ss)
        except ValueError:
            return ss

def parse_file(ff):
    out={}
    block=None
    for i,line in enumerate(ff):
        #Allow for comments to start with '#'.  We break off anything after a '#'
        #and ignore it.  After that, we 
        data=line.split('#',1)
        line=data[0]  #comments (if in line) are in data[1] ... ignore those.
        line=line.strip() #remove whitespace from front and back of line.
        if(line.startswith('*')):
            #python supports multiple assignment.  
            #e.g. out['header'] is the same object as block.  
            #     changing block also changes out['header']
            block=out[line.strip()[1:]]=[]
        elif (block is not None) and line: #checks to make sure there is an active block and the line wasn't empty.
            #If the file could also have floats, you should use float instead of int
            #We also put the parsing in a try/except block.  If parsing fails (e.g. a
            #element can't be converted to a float, you'll know it and you'll know the
            #line which caused the problem.)
            try:
                #block.append(map(int,line.split()))
                block.append(map(convert_type,line.split()))  
            except Exception:
                sys.stderr.write("Parsing datafile choked on line %d '%s'\n"%(i+1,line.rstrip()))
                raise
    return out

with open('textfile.txt','r') as f:
    data_dict=parse_file(f)

#get information from '*load' block:
info=data_dict['load']
for row in info:
    a,b,c=row
    ##same as:
    #a=row[0]
    #b=row[1]
    #c=row[2]
    ##as long as row only has 3 elements.

    #Do something with that particular row. 
    #(each row in the 'load' block will be visited once in this loop)

#get info from stiffness block:
info=data_dict['stiffness']
for row in info:
    pass #Do something with this particular row.
</snippet></ROW><ROW><id>10997304</id><snippet>info</snippet></ROW><ROW><id>10997304</id><snippet>element=info[row_number][column_number]</snippet></ROW><ROW><id>10997304</id><snippet>row=info[row_number]</snippet></ROW><ROW><id>10997335</id><snippet>scipy.io.savemat</snippet></ROW><ROW><id>10997335</id><snippet>import numpy as np
import scipy.io

x = np.linspace(0, 2 * np.pi, 100)
y = np.cos(x)

scipy.io.savemat('test.mat', dict(x=x, y=y))
</snippet></ROW><ROW><id>10997335</id><snippet>scipy.io.loadmat</snippet></ROW><ROW><id>10997335</id><snippet>load test</snippet></ROW><ROW><id>10997335</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>10997923</id><snippet>Form
class DynamicForm(forms.Form):
    def __init__(self,*k,**kw):
        forms.Form.__init__(self,*k,**kw)
        # loop over data from **kw
        # create field 
        # set field default value
</snippet></ROW><ROW><id>10997923</id><snippet>super(SuperForm, self).__init__(*args, **kwargs)</snippet></ROW><ROW><id>10997923</id><snippet>forms.Form.__init__(self,*k,**kw)</snippet></ROW><ROW><id>10997923</id><snippet>self.data[field] = defVal</snippet></ROW><ROW><id>10997923</id><snippet>initial = defVal</snippet></ROW><ROW><id>10997923</id><snippet>is_valid() False</snippet></ROW><ROW><id>10997923</id><snippet>request.POST</snippet></ROW><ROW><id>10997923</id><snippet>View
for name,field in form.fields.items():
    # name - field name
    # form.data[name] - field value
</snippet></ROW><ROW><id>10997923</id><snippet>:</snippet></ROW><ROW><id>10997923</id><snippet>Template
&lt;form action="/Tris/save/" method="post"&gt;
  {% csrf_token %}
  {% for field  in textWidget %}
        &lt;div class="fieldWrapper"&gt;
            {{ field.errors }}
            {{ field.non_field_errors }}
            {{ field.label }}: {{ field }}
        &lt;/div&gt;
    {% endfor %}
  &lt;p&gt;&lt;input type="submit" value="Save" /&gt;&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10998051</id><snippet>arg1 = r'\work\parser\main\tools\app\shared\xml\calculators\2012\example\calculator'
arg2 = r'calculators/2012/example/calculator'

&gt;&gt;&gt; arg1.endswith(arg2.replace('/','\\'))
True
</snippet></ROW><ROW><id>10998051</id><snippet>&gt;&gt;&gt; arg2.split('/')[-1]
'calculator'
</snippet></ROW><ROW><id>10998051</id><snippet>&gt;&gt;&gt; '/'.join(arg2.split('/')[:-1])
'calculators/2012/example'
</snippet></ROW><ROW><id>10998103</id><snippet>Shape</snippet></ROW><ROW><id>10998103</id><snippet>namedtuple()</snippet></ROW><ROW><id>10998215</id><snippet>import Tkinter as tk

class dropDown():
    def __init__(self, master):

        #background set_up
        image1 = tk.PhotoImage(file="test.gif")
        w = image1.width()
        h = image1.height()
        panel1 = tk.Label(root, image=image1)
        panel1.pack(side='top', fill='both', expand='yes')

        # save the panel's image from 'garbage collection'
        panel1.image = image1

        #Drop down menu
        self.var = tk.StringVar(master)
        self.var.set('Alaska') # initial value

        #Have not used countries list just pasted
        self.option = tk.OptionMenu(master, self.var, 'Alaska','Alberta', 'Australia')
        self.option.pack()

        geomstr="%dx%d+0+0" % (w, panel1.winfo_reqheight()+self.option.winfo_reqheight())
        root.geometry(geomstr)

root = tk.Tk()
root.title('drop down test')
dropDown(root)
root.mainloop()
</snippet></ROW><ROW><id>10998215</id><snippet>import Tkinter as tk

class dropDown(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self,master)

        #background set_up
        image1 = tk.PhotoImage(file="test.gif")
        panel1 = tk.Label(root, image=image1)
        panel1.pack(side='top', fill='both', expand='yes')

        # save the panel's image from 'garbage collection'
        panel1.image = image1

        #Drop down menu
        self.var = tk.StringVar(master)
        self.var.set('Alaska') # initial value

        #Have not used countries list just pasted
        self.option = tk.OptionMenu(master, self.var, 'Alaska','Alberta', 'Australia')
        self.option.pack()


root = tk.Tk()
root.title('drop down test')
d=dropDown(root)
d.pack(side='top',fill='both',expand='yes')
root.mainloop()
</snippet></ROW><ROW><id>10998514</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; result = [row for row in csv.reader(x.splitlines(), delimiter=';')]
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(result)
[['High', '10', 'Assigned', '2012/06/12 10:11:02'],
 ['Low', '20', 'Assigned', '2012/06/12 10:11:02'],
 ['Medium', '30', 'Assigned', '2012/06/12 10:11:02']]
</snippet></ROW><ROW><id>10998554</id><snippet>y = (x for x in range(10))
</snippet></ROW><ROW><id>10998554</id><snippet>sum</snippet></ROW><ROW><id>10998554</id><snippet>&gt;&gt;&gt; y = (x for x in range(10))
&gt;&gt;&gt; y
&lt;generator object &lt;genexpr&gt; at 0x0000000001E15A20&gt;
&gt;&gt;&gt; sum(y)
45
</snippet></ROW><ROW><id>10998554</id><snippet>sum</snippet></ROW><ROW><id>10998554</id><snippet>&gt;&gt;&gt; sum(y)
0
</snippet></ROW><ROW><id>10998554</id><snippet>def foo(numbers):
    s = sum(numbers)
    p = reduce(lambda x,y: x*y, numbers, 1)
    print "The sum is:", s, "and the product:", p
</snippet></ROW><ROW><id>10998554</id><snippet>&gt;&gt;&gt; foo(x for x in range(1, 10))
The sum is: 45 and the product: 1
</snippet></ROW><ROW><id>10998554</id><snippet>&gt;&gt;&gt; y = (x for x in range(10))
&gt;&gt;&gt; list(y)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10998554</id><snippet>&gt;&gt;&gt; foo(list(x for x in range(1, 10)))
The sum is: 45 and the product: 362880
</snippet></ROW><ROW><id>10998554</id><snippet>sum(generator expression)</snippet></ROW><ROW><id>10998554</id><snippet>sum(list)</snippet></ROW><ROW><id>10999074</id><snippet>filter_vertical</snippet></ROW><ROW><id>10999074</id><snippet>filter_horizontal</snippet></ROW><ROW><id>10999074</id><snippet>class DirectorInline(admin.TabularInline):
    model = Film.director.through
    extra = 3
</snippet></ROW><ROW><id>10999092</id><snippet>tee()</snippet></ROW><ROW><id>10999092</id><snippet>&gt;&gt;&gt; from itertools import islice, count
&gt;&gt;&gt; a = list(range(5))
&gt;&gt;&gt; b = islice(count(), 0, 5)
&gt;&gt;&gt; a
[0, 1, 2, 3, 4]
&gt;&gt;&gt; b
&lt;itertools.islice object at 0x7fabc95d0fc8&gt;
&gt;&gt;&gt; for item in a:
...     print(item)
... 
0
1
2
3
4
&gt;&gt;&gt; for item in a:
...     print(item)
... 
0
1
2
3
4
&gt;&gt;&gt; for item in b:
...     print(item)
... 
0
1
2
3
4
&gt;&gt;&gt; for item in b:
...     print(item)
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10999098</id><snippet>&gt;&gt;&gt; gmt = pytz.timezone('GMT')
&gt;&gt;&gt; eastern = pytz.timezone('US/Eastern')
&gt;&gt;&gt; time = "Tue, 12 Jun 2012 14:03:10 GMT"
&gt;&gt;&gt; date = datetime.datetime.strptime(time, '%a, %d %b %Y %H:%M:%S GMT')
&gt;&gt;&gt; date
datetime.datetime(2012, 6, 12, 14, 3, 10)
&gt;&gt;&gt; dategmt = gmt.localize(date)
&gt;&gt;&gt; dategmt
datetime.datetime(2012, 6, 12, 14, 3, 10, tzinfo=&lt;StaticTzInfo 'GMT'&gt;)
&gt;&gt;&gt; dateeastern = dategmt.astimezone(eastern)
&gt;&gt;&gt; dateeastern
datetime.datetime(2012, 6, 12, 10, 3, 10, tzinfo=&lt;DstTzInfo 'US/Eastern' EDT-1 day, 20:00:00 DST&gt;)
</snippet></ROW><ROW><id>10999406</id><snippet>with Timeout(5, False):
    while 1:
        data = s.recv(1024)
        if not data:
            break

        sock_buffer += data
        stop = time.time()
</snippet></ROW><ROW><id>10999406</id><snippet>#recv</snippet></ROW><ROW><id>10999406</id><snippet>gevent.sleep()</snippet></ROW><ROW><id>10999406</id><snippet>with Timeout(5, False):
    while True:
        data = s.recv(1024)
        if data:
            sock_buffer += data
            stop = time.time()

        gevent.sleep()
</snippet></ROW><ROW><id>10999545</id><snippet>d</snippet></ROW><ROW><id>10999545</id><snippet>del d['value']
</snippet></ROW><ROW><id>10999545</id><snippet>v = d['value']</snippet></ROW><ROW><id>10999545</id><snippet>d['value']</snippet></ROW><ROW><id>10999545</id><snippet>v</snippet></ROW><ROW><id>10999545</id><snippet>d['value'] = { 'foo': 'bar' }
</snippet></ROW><ROW><id>10999545</id><snippet>v = { ... }</snippet></ROW><ROW><id>10999545</id><snippet>dict</snippet></ROW><ROW><id>10999545</id><snippet>v</snippet></ROW><ROW><id>10999545</id><snippet>d['value']</snippet></ROW><ROW><id>10999545</id><snippet>dict</snippet></ROW><ROW><id>10999545</id><snippet>d</snippet></ROW><ROW><id>10999545</id><snippet>plistlib._InternalDict</snippet></ROW><ROW><id>10999545</id><snippet>dict</snippet></ROW><ROW><id>10999545</id><snippet>dict</snippet></ROW><ROW><id>11000022</id><snippet>chp = urllib.urlencode(dict({'k': key}))
chg = urllib2.urlopen('http://www.google.com/recaptcha/api/challenge?' + chp).read()
</snippet></ROW><ROW><id>11000022</id><snippet>urllib2</snippet></ROW><ROW><id>11000022</id><snippet>chp</snippet></ROW><ROW><id>11000022</id><snippet>urlopen</snippet></ROW><ROW><id>11000022</id><snippet>?</snippet></ROW><ROW><id>11000054</id><snippet>{% if show_save %}&lt;input name="_save" type="submit" value="{% trans 'Save' %}" class="default" {{ onclick_attrib }}/&gt;{% endif %}
</snippet></ROW><ROW><id>11000054</id><snippet>{% if show_save %}&lt;input name="_continue" type="submit" value="{% trans 'Save' %}" class="default" {{ onclick_attrib }}/&gt;{% endif %}
</snippet></ROW><ROW><id>11000054</id><snippet>{% load i18n %}
&lt;div class="submit-row"&gt;
{% if show_save %}&lt;input type="submit" value="{% trans 'Save' %}" class="default" name="_continue" {{ onclick_attrib }}/&gt;{% endif %}
{% if show_delete_link %}&lt;p class="deletelink-box"&gt;&lt;a href="delete/" class="deletelink"&gt;{% trans "Delete" %}&lt;/a&gt;&lt;/p&gt;{% endif %}
{% if show_save_as_new %}&lt;input type="submit" value="{% trans 'Save as new' %}" name="_saveasnew" {{ onclick_attrib }}/&gt;{%endif%}
{% if show_save_and_add_another %}&lt;input type="submit" value="{% trans 'Save and add another' %}" name="_addanother" {{ onclick_attrib }} /&gt;{% endif %}
&lt;/div&gt;
</snippet></ROW><ROW><id>11000136</id><snippet>print args</snippet></ROW><ROW><id>11000136</id><snippet>args = parser.parse_args()</snippet></ROW><ROW><id>11000136</id><snippet>~/coding$ python ap.py -k kindledx http://url.com
Namespace(dropbox_dir=None, gallery_name='Gallery', kindle_type='kindledx', url='http://url.com')
</snippet></ROW><ROW><id>11000136</id><snippet>print parser.parse_args(['imgur_url', '-k'])
</snippet></ROW><ROW><id>11000136</id><snippet>print parser.parse_args(['imgur_url', '-k', 'kindledx'])
</snippet></ROW><ROW><id>11000136</id><snippet>Namespace(dropbox_dir=None, gallery_name='Gallery', kindle_type='kindledx', url='imgur_url')
</snippet></ROW><ROW><id>11000193</id><snippet>im[i-d:i+d+1, j-d:j+d+1].flatten()</snippet></ROW><ROW><id>11000193</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided

def sliding_window(arr, window_size):
    """ Construct a sliding window view of the array"""
    arr = np.asarray(arr)
    window_size = int(window_size)
    if arr.ndim != 2:
        raise ValueError("need 2-D input")
    if not (window_size &gt; 0):
        raise ValueError("need a positive window size")
    shape = (arr.shape[0] - window_size + 1,
             arr.shape[1] - window_size + 1,
             window_size, window_size)
    if shape[0] &lt;= 0:
        shape = (1, shape[1], arr.shape[0], shape[3])
    if shape[1] &lt;= 0:
        shape = (shape[0], 1, shape[2], arr.shape[1])
    strides = (arr.shape[1]*arr.itemsize, arr.itemsize,
               arr.shape[1]*arr.itemsize, arr.itemsize)
    return as_strided(arr, shape=shape, strides=strides)

def cell_neighbors(arr, i, j, d):
    """Return d-th neighbors of cell (i, j)"""
    w = sliding_window(arr, 2*d+1)

    ix = np.clip(i - d, 0, w.shape[0]-1)
    jx = np.clip(j - d, 0, w.shape[1]-1)

    i0 = max(0, i - d - ix)
    j0 = max(0, j - d - jx)
    i1 = w.shape[2] - max(0, d - i + ix)
    j1 = w.shape[3] - max(0, d - j + jx)

    return w[ix, jx][i0:i1,j0:j1].ravel()

x = np.arange(8*8).reshape(8, 8)
print x

for d in [1, 2]:
    for p in [(0,0), (0,1), (6,6), (8,8)]:
        print "-- d=%d, %r" % (d, p)
        print cell_neighbors(x, p[0], p[1], d=d)
</snippet></ROW><ROW><id>11000236</id><snippet>python -m json.tool myfile.json
</snippet></ROW><ROW><id>11000716</id><snippet>rules.update(rule.split('=', 1) for rule in recurrence.split(';'))
</snippet></ROW><ROW><id>11000716</id><snippet>rules</snippet></ROW><ROW><id>11000716</id><snippet>rules = dict(rule.split('=', 1) for rule in recurrence.split(';'))
</snippet></ROW><ROW><id>11000716</id><snippet>dict</snippet></ROW><ROW><id>11000716</id><snippet>dict.update</snippet></ROW><ROW><id>11000733</id><snippet>import getpass
getpass.getuser()
</snippet></ROW><ROW><id>11000765</id><snippet>class Grid:

    def __init__(self):
        self.list = [[1,2], [3,4]]

    def __getitem__(self, index):
        return self.list[index]

g = Grid();

print g[0]
print g[1]
print g[0][1]
</snippet></ROW><ROW><id>11000765</id><snippet>[1, 2]
[3, 4]
2
</snippet></ROW><ROW><id>11000940</id><snippet>proc.poll()</snippet></ROW><ROW><id>11000940</id><snippet>None</snippet></ROW><ROW><id>11000940</id><snippet>proc.poll()</snippet></ROW><ROW><id>11000940</id><snippet>0</snippet></ROW><ROW><id>11000940</id><snippet>if proc.poll():
</snippet></ROW><ROW><id>11000940</id><snippet>if proc.poll() is not None:
</snippet></ROW><ROW><id>11001298</id><snippet>foo.strip(";").split(";")</snippet></ROW><ROW><id>11001298</id><snippet>[ x.strip() for x in foo.split(";") if x.strip() ]</snippet></ROW><ROW><id>11001298</id><snippet>%timeit</snippet></ROW><ROW><id>11001346</id><snippet>OSError: [Errno 2] No such file or directory</snippet></ROW><ROW><id>11001346</id><snippet>#!/bin/bash

echo "This is stdout"
echo "This is a failure on stderr" &gt;&amp;2
exit 1
</snippet></ROW><ROW><id>11001346</id><snippet>import subprocess

cmd = './fail.sh'
proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
proc.communicate()
</snippet></ROW><ROW><id>11001346</id><snippet>('This is stdout\n', 'This is a failure on stderr\n')</snippet></ROW><ROW><id>11001346</id><snippet>str</snippet></ROW><ROW><id>11001346</id><snippet>str</snippet></ROW><ROW><id>11001346</id><snippet>string</snippet></ROW><ROW><id>11001412</id><snippet>argparse.Action</snippet></ROW><ROW><id>11001717</id><snippet>buildProtocol</snippet></ROW><ROW><id>11001726</id><snippet>import</snippet></ROW><ROW><id>11001726</id><snippet>import myModule
</snippet></ROW><ROW><id>11001726</id><snippet>myModule.py</snippet></ROW><ROW><id>11001726</id><snippet>myModule.hello('world')
</snippet></ROW><ROW><id>11001726</id><snippet>from myModule import hello
hello('world')
</snippet></ROW><ROW><id>11002105</id><snippet>a</snippet></ROW><ROW><id>11002105</id><snippet>a_set = set(a)
c = [x for x in b if x not in a_set]
</snippet></ROW><ROW><id>11002105</id><snippet>c = list(set(b) - set(a))
</snippet></ROW><ROW><id>11002105</id><snippet>-</snippet></ROW><ROW><id>11002123</id><snippet>nargs=0</snippet></ROW><ROW><id>11002123</id><snippet>start.add_argument</snippet></ROW><ROW><id>11002123</id><snippet>start.add_argument('-s', '--start', action=StartAction, nargs=0)
</snippet></ROW><ROW><id>11002273</id><snippet>from functools import partial

PROXIES = [A, B, C, D] # As appropriate
...
def handle_request(proxies, response):
    if ...BAD RESPONSE...:
        return http_client.fetch(response.request.url, partial(handle_request, proxies[1:]))
    # Now handle the case that you have a good result or you're out of proxies

http_client.fetch("http://www.google.com/", partial(handle_request, PROXIES[:]))
</snippet></ROW><ROW><id>11002273</id><snippet>class ProxyRequest(object):
     PROXIES = [A, B, C]

     def __init__(self, url):
          self.url = url
          self.proxies = self.PROXIES[:]
          self.fetch()

     def fetch(self):
          p, self.proxies = self.proxies[0], self.proxies[1:]

          http_client.fetch(self.url, self.handle, proxy=p)

     def handle(self, response):
          if response.error:
               if self.proxies:
                     return self.fetch()
               else:
                     ...error case...

          ...stop the ioloop if you want...
</snippet></ROW><ROW><id>11002357</id><snippet>apps</snippet></ROW><ROW><id>11002357</id><snippet>main/main</snippet></ROW><ROW><id>11002357</id><snippet>apps</snippet></ROW><ROW><id>11002357</id><snippet>sys.path</snippet></ROW><ROW><id>11002658</id><snippet>import xml.etree.ElementTree as ETree
....

    try:
        self.doc = ETree.parse( file )
        # do stuff with it ...
    except  ETree.ParseError :
        print( "ERROR in {0} : {1}".format( ETree.ParseError.filename, ETree.ParseError.msg ) )
</snippet></ROW><ROW><id>11002755</id><snippet>{
  u'user1': [
                {
                  u'host_dst': {
                                  u'addr': u'195.149.144.60',
                                  u'vid': 0,
                                  u'port': 80
                               },

                  'usi': '7932fee11ba72ae84180044d75521368',
                  u'host_src': {
                                  u'addr': u'83.233.59.215', 
                                  u'vid': 0, 
                                  u'port': 51068
                                }
                 },
                item2,
                ...
           ]
}
</snippet></ROW><ROW><id>11002755</id><snippet>item</snippet></ROW><ROW><id>11002755</id><snippet>list</snippet></ROW><ROW><id>11002755</id><snippet>item[0]["host_dst"][addr]</snippet></ROW><ROW><id>11002801</id><snippet>with open('data.txt') as inf:
    for line in inf:
        if line.startswith('ExitAddress'):
            print line.split()[1]
</snippet></ROW><ROW><id>11002801</id><snippet>220.0.231.71
</snippet></ROW><ROW><id>11002801</id><snippet>data.txt</snippet></ROW><ROW><id>11002801</id><snippet>with</snippet></ROW><ROW><id>11002801</id><snippet>   a = [line.split()[1] for line in inf if line.startswith('ExitAddress')]
</snippet></ROW><ROW><id>11002801</id><snippet>   g = (line.split()[1] for line in inf if line.startswith('ExitAddress'))
</snippet></ROW><ROW><id>11002854</id><snippet>urls.py</snippet></ROW><ROW><id>11002854</id><snippet>urlpatterns = patterns('',
    (r'^main/$', 'apps.builder.views.main'),
)
</snippet></ROW><ROW><id>11002892</id><snippet>__init__.py</snippet></ROW><ROW><id>11002892</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>11002892</id><snippet>bs4</snippet></ROW><ROW><id>11002892</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>11003145</id><snippet>&lt;(...)</snippet></ROW><ROW><id>11003145</id><snippet>shell=True</snippet></ROW><ROW><id>11003145</id><snippet>cmd = "diff &lt;(ssh -n root@10.22.254.34 cat /vms/cloudburst.qcow2.*) &lt;(ssh -n root@10.22.254.101 cat /vms/cloudburst.qcow2)"
output,error = subprocess.Popen(cmd, shell=True, executable="/bin/bash", stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>11003380</id><snippet>win.set_icon_from_file("logo.png")
</snippet></ROW><ROW><id>11003380</id><snippet>win.set_icon_name("logo.png")
</snippet></ROW><ROW><id>11003528</id><snippet>Video</snippet></ROW><ROW><id>11003528</id><snippet>Video</snippet></ROW><ROW><id>11003544</id><snippet>import sys, pymouse
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class printImage(QWidget):
    def __init__(self, *args):
        apply(QWidget.__init__,(self, ) + args)
        QWidget.__init__(self)

        self.winId = QApplication.desktop().winId()
        self.mouse = pymouse.PyMouse()
        self.timer = QTimer()

        self.x = self.y = self.cX = self.cY = 0

        self.createLabel()
        self.show()
        self.startListening()

    def createLabel(self):
        self.label = QLabel(self)
        self.label.move(10, 15)
        self.label.resize(150, 130)

    def startListening(self):
        self.timer.connect(self.timer, SIGNAL('timeout()'), self.sendData)
        self.timer.start(0)

    def sendData(self):
        pos = self.mouse.position()
        x = pos[0]
        y = pos[1]

        if (self.cX != x) and (self.cY != y):
            self.x = self.cX = x
            self.y = self.cY = y

            self.label.setPixmap(
                self.cropScreenArea()
            )

    def cropScreenArea(self):
        return QPixmap.grabWindow(
            self.winId,
            x = self.x - 80,
            y = self.y - 60,
            width = 150,
            height = 130
        )

    def keyPressEvent(self, e):
        if e.key() == Qt.Key_Escape:
            self.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    view = printImage()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>11003711</id><snippet>episodes = Episode.query.subquery()
userseries = UserSerie.query.subquery()
# Get the min air time for each of the favorite series.
min_air_times = db.session.query(
        Serie.id.label('serie_id'),
        db.func.min(episodes.c.id).label('id')
    ).filter(
        Serie.id.in_(x.id for x in u1.favorite_series)
    ).outerjoin(
        userseries,
        Serie.id == userseries.c.serie_id
    ).outerjoin(
        episodes,
        Serie.id == episodes.c.serie_id
    ).filter(
        ~episodes.c.id.in_(x.id for x in u1.watched_episodes)
    ).filter(
        episodes.c.seas_num != 0
    ).order_by(
        desc(userseries.c.last_watched)
    ).group_by(
        Serie.id
    ).subquery()
# Select the serie and episode.
shows = db.session.query(
        Serie,
        Episode
    ).join(
        Episode,
        Episode.serie_id == Serie.id
    ).join(
        min_air_times,
        db.and_(
            min_air_times.c.serie_id == Serie.id,
            min_air_times.c.id == Episode.id
        )
    ).all()
</snippet></ROW><ROW><id>11003723</id><snippet># genPlayM21Score.py Generates and Plays 2 Music21 Scores "on the fly".
#
# see way below for source notes

from music21 import *

# we create the music21 Bottom Part, and do this explicitly, one object at a time.

n1 = note.Note('e4')
n1.duration.type = 'whole'
n2 = note.Note('d4')
n2.duration.type = 'whole'
m1 = stream.Measure()
m2 = stream.Measure()
m1.append(n1)
m2.append(n2)
partLower = stream.Part()
partLower.append(m1)
partLower.append(m2)

# For the music21 Upper Part, we automate the note creation procedure

data1 = [('g4', 'quarter'), ('a4', 'quarter'), ('b4', 'quarter'), ('c#5', 'quarter')]
data2 = [('d5', 'whole')]
data = [data1, data2]
partUpper = stream.Part()

def makeUpperPart(data):
    for mData in data:
        m = stream.Measure()
        for pitchName, durType in mData:
            n = note.Note(pitchName)
            n.duration.type = durType
            m.append(n)
        partUpper.append(m)
makeUpperPart(data)        

# Now, we can add both Part objects into a music21 Score object.  

sCadence = stream.Score()
sCadence.insert(0, partUpper)
sCadence.insert(0, partLower)

# Now, let's play the MIDI of the sCadence Score [from memory, ie no file  write necessary] using pygame

import cStringIO

# for music21 &lt;= v.1.2:
if hasattr(sCadence, 'midiFile'):
   sCadence_mf = sCadence.midiFile
else: # for &gt;= v.1.3:
   sCadence_mf = midi.translate.streamToMidiFile(sCadence)
sCadence_mStr = sCadence_mf.writestr()
sCadence_mStrFile = cStringIO.StringIO(sCadence_mStr)

import pygame

freq = 44100    # audio CD quality
bitsize = -16   # unsigned 16 bit
channels = 2    # 1 is mono, 2 is stereo
buffer = 1024    # number of samples
pygame.mixer.init(freq, bitsize, channels, buffer)

# optional volume 0 to 1.0
pygame.mixer.music.set_volume(0.8)

def play_music(music_file):
    """
    stream music with mixer.music module in blocking manner
    this will stream the sound from disk while playing
    """
    clock = pygame.time.Clock()
    try:
        pygame.mixer.music.load(music_file)
        print "Music file %s loaded!" % music_file
    except pygame.error:
        print "File %s not found! (%s)" % (music_file, pygame.get_error())
        return
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy():
        # check if playback has finished
        clock.tick(30)

# play the midi file we just saved
play_music(sCadence_mStrFile)

#============================

# now let's make a new music21 Score by reversing the upperPart notes
data1.reverse()
data2 = [('d5', 'whole')]
data = [data1, data2]
partUpper = stream.Part()
makeUpperPart(data)        
sCadence2 = stream.Score()
sCadence2.insert(0, partUpper)
sCadence2.insert(0, partLower)

# now let's play the new Score
sCadence2_mf = sCadence2.midiFile
sCadence2_mStr = sCadence2_mf.writestr()
sCadence2_mStrFile = cStringIO.StringIO(sCadence2_mStr)
play_music(sCadence2_mStrFile)



## SOURCE NOTES
## There are 3 sources for this mashup:

# 1. Source for the Music21 Score Creation http://web.mit.edu/music21/doc/html/quickStart.html#creating-notes-measures-parts-and-scores

# 2.  Source for the Music21 MidiFile Class Behaviour http://mit.edu/music21/doc/html/moduleMidiBase.html?highlight=midifile#music21.midi.base.MidiFile

# 3.  Source for the pygame player: http://www.daniweb.com/software-development/python/code/216979/embed-and-play-midi-music-in-your-code-python
</snippet></ROW><ROW><id>11004041</id><snippet>if str(Number).startswith('1'):
</snippet></ROW><ROW><id>11004041</id><snippet>startswith</snippet></ROW><ROW><id>11004041</id><snippet>[:1]</snippet></ROW><ROW><id>11004250</id><snippet>conn.commit()</snippet></ROW><ROW><id>11004250</id><snippet>isolation_level=None</snippet></ROW><ROW><id>11004250</id><snippet>connect()</snippet></ROW><ROW><id>11004294</id><snippet>from bottle import run
run(reloader=True)
</snippet></ROW><ROW><id>11004560</id><snippet>import Cocoa
def evthandler(event):
  pass # this is where you do stuff; see NSEvent documentation for event
observer = Cocoa.NSEvent.addGlobalMonitorForEventsMatchingMask_handler_(NSKeyDown, evthandler)
# when you're done
Cocoa.NSEvent.removeMonitor_(observer)

import Quartz
def evthandler(proxy, type, event, refcon):
    pass # Here's where you do your stuff; see CGEventTapCallback
    return event
source = Quartz.CGEventSourceCreate(Quartz.kCGEventSourceStateHIDSystemState)
tap = Quartz.CGEventTapCreate(Quartz.kCGSessionEventTap,
                              Quartz.kCGHeadInsertEventTap,
                              Quartz.kCGEventTapOptionListenOnly,
                              (Quartz.CGEventMaskBit(Quartz.kCGEventKeyDown) |
                               Quartz.CGEventMaskBit(Quartz.kCGEventKeyUp)),
                              handler,
                              refcon)
</snippet></ROW><ROW><id>11004728</id><snippet>from random import choice

numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']

r1 = choice(numbers)
r2 = choice(numbers)

print("h = HIGHER ,, l = LOWER ,, s = SAME")
print(r1)
a = raw_input()
print(r2)

if r2 == r1 and a == 's':
    print("well done")
elif r2 &lt; r1 and a == 'l':
    print("well done")
elif r2 &gt; r1 and a == 'h':
    print("well done")
else:
    print("unlucky")
</snippet></ROW><ROW><id>11004728</id><snippet>a</snippet></ROW><ROW><id>11004728</id><snippet>raw_input</snippet></ROW><ROW><id>11004728</id><snippet>input</snippet></ROW><ROW><id>11004728</id><snippet>choice</snippet></ROW><ROW><id>11004728</id><snippet>import random 
random.seed(1)
</snippet></ROW><ROW><id>11004760</id><snippet>__separator__</snippet></ROW><ROW><id>11004760</id><snippet>__keys__</snippet></ROW><ROW><id>11004760</id><snippet>__vals__</snippet></ROW><ROW><id>11004760</id><snippet>__slots__</snippet></ROW><ROW><id>11004760</id><snippet>__init__</snippet></ROW><ROW><id>11004760</id><snippet>class Storage(object):
    __slots__ = ('__keys__', '__vals__', '__separator__')
    def __init__(self):
        super(Storage, self).__setattr__('__separator__', "ANY OF ANYS")
        super(Storage, self).__setattr__('__keys__', [])
        super(Storage, self).__setattr__('__vals__', [])

    def __getattr__(self, key):
        try:
            vals = getattr(self, '__vals__')
            keys = getattr(self, '__keys__')
            return vals[keys.index(key)]
        except IndexError:
            raise AttributeError

    def __setattr__(self, key, val):
        vals = getattr(self, '__vals__')
        keys = getattr(self, '__keys__')
        vals.append(val)
        keys.append(key)
</snippet></ROW><ROW><id>11005070</id><snippet>def combine(a)
    grouped = defaultdict(lambda: 1)

    for _, value, key in a:
        grouped[key] *= value

    for key, value in grouped.items():
        yield ('x', value, key)
</snippet></ROW><ROW><id>11005166</id><snippet>select e.user_id
from table_entities e
inner join table_tweets t on e.id = t.id
where e.type='mention' and t.user_id=%s
group by e.type having count('hashtag') &lt; 3
</snippet></ROW><ROW><id>11005166</id><snippet>e.user_id</snippet></ROW><ROW><id>11005166</id><snippet>Having count('literalString')</snippet></ROW><ROW><id>11005166</id><snippet>Having COUNT(*)</snippet></ROW><ROW><id>11005166</id><snippet>SELECT e.user_id 
FROM   table_entities e 
       INNER JOIN table_tweets t 
               ON e.id = t.id 
WHERE  e.type = 'mentions' 
       AND t.user_id =% s 
       AND e.user_ID  IN (SELECT e.user_id 
                             FROM   table_entities e 
                                    INNER JOIN table_tweets t 
                                            ON e.id = t.id 
                             WHERE  e.type = 'hashtag' 
                                    AND t.user_id =% s 
                             GROUP  BY e.user_id 
                             HAVING Count(*) &gt;= 3) 
</snippet></ROW><ROW><id>11005166</id><snippet>% s</snippet></ROW><ROW><id>11005208</id><snippet>result.fillna('')</snippet></ROW><ROW><id>11005208</id><snippet>na_values</snippet></ROW><ROW><id>11005249</id><snippet>Location</snippet></ROW><ROW><id>11005249</id><snippet>import datetime
from django.contrib import admin
from my_app.models import Location

class LocationAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'custom_column',)

    # define the row x column value here
    def custom_column(self, obj):
        if obj.last_updated &lt; datetime.datetime.now() - datetime.timedelta(minutes=5):
            retval = ('red.jpg', 'This location checked in more than 5 minutes')
        else
            retval = ('green.jpg', 'This location checked in less than 5 minutes ago')
        return "&lt;img src='%s' alt='%s' /&gt;" % retval

    # set the column heading here
    custom_column.short_description = 'Status'

# don't forget to register the newly sub-classed ModelAdmin
admin.site.register(Location, LocationAdmin)
</snippet></ROW><ROW><id>11005329</id><snippet>in</snippet></ROW><ROW><id>11005329</id><snippet>__contains__()</snippet></ROW><ROW><id>11005329</id><snippet>&gt;&gt;&gt; l = ['a']
&gt;&gt;&gt; l.__contains__('a')
True
&gt;&gt;&gt; 'a' in l
True
</snippet></ROW><ROW><id>11005329</id><snippet>__contains__()</snippet></ROW><ROW><id>11005329</id><snippet>__iter__()</snippet></ROW><ROW><id>11005329</id><snippet>__getitem__()</snippet></ROW><ROW><id>11005329</id><snippet>in</snippet></ROW><ROW><id>11005329</id><snippet>__iter__()</snippet></ROW><ROW><id>11005329</id><snippet>l = range(5)
l.__iter__()
# &lt;listiterator object at 0x1004e4fd0&gt;
it = l.__iter__()
it.next()
# 0
it.next()
# 1
it.next()
# 2
</snippet></ROW><ROW><id>11005329</id><snippet>__iter__()</snippet></ROW><ROW><id>11005329</id><snippet>__getitem__()</snippet></ROW><ROW><id>11005329</id><snippet>__iter__()</snippet></ROW><ROW><id>11005329</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; s = "string"
&gt;&gt;&gt; while i &lt; len(s):
...  print s.__getitem__(i)
...  i+=1
... 
s
t
r
i
n
g
</snippet></ROW><ROW><id>11005329</id><snippet>gen = (s.__getitem__(i) for i in xrange(len(s)))
# &lt;generator object &lt;genexpr&gt; at 0x1004e8780&gt;
gen.next()
# 's'
gen.next()
# 't'
gen.next()
# 'r'
</snippet></ROW><ROW><id>11005426</id><snippet>lambda: select(b.cat, b.value)
</snippet></ROW><ROW><id>11005426</id><snippet>lambda b = b: select(b.cat, b.value)
</snippet></ROW><ROW><id>11005426</id><snippet>b</snippet></ROW><ROW><id>11005426</id><snippet>lambda</snippet></ROW><ROW><id>11005426</id><snippet>for-loop</snippet></ROW><ROW><id>11005426</id><snippet>b</snippet></ROW><ROW><id>11005426</id><snippet>lambda</snippet></ROW><ROW><id>11005426</id><snippet>b</snippet></ROW><ROW><id>11005426</id><snippet>lambda</snippet></ROW><ROW><id>11005426</id><snippet>b</snippet></ROW><ROW><id>11005585</id><snippet>Browser.webview</snippet></ROW><ROW><id>11005585</id><snippet>showMaximized()</snippet></ROW><ROW><id>11005585</id><snippet>browser = spynner.Browser()
browser.debug_level = spynner.DEBUG
browser.create_webview()
browser.show()
# now maximize the webview
browser.webview.showMaximized()
</snippet></ROW><ROW><id>11005588</id><snippet>OneToOneField</snippet></ROW><ROW><id>11005588</id><snippet>primary_key</snippet></ROW><ROW><id>11005588</id><snippet>OneToOneField</snippet></ROW><ROW><id>11005621</id><snippet>from sqlalchemy.orm import mapper
class ElevationMode(object):
    pass

mapper(ElevationMode, elevation_mode_table)

class ScanModes(db.Model):
    elevations = relationship(ElevationMode)
</snippet></ROW><ROW><id>11005621</id><snippet>ElevationMode.__table__</snippet></ROW><ROW><id>11005651</id><snippet>%(named)s</snippet></ROW><ROW><id>11005651</id><snippet>%s</snippet></ROW><ROW><id>11005651</id><snippet>connection.execute("select * from table where "
                   "string like '_stringStart%%' limit 1")
</snippet></ROW><ROW><id>11005651</id><snippet>text()</snippet></ROW><ROW><id>11005651</id><snippet>from sqlalchemy import text
connection.execute(
         text("select * from table where "
                "string like :string limit 1"), 
                 string="_stringStart%")
</snippet></ROW><ROW><id>11005671</id><snippet>BufferedReader.read()</snippet></ROW><ROW><id>11005671</id><snippet>readLine()</snippet></ROW><ROW><id>11005671</id><snippet>DataInputStream</snippet></ROW><ROW><id>11005671</id><snippet>DataInputStream</snippet></ROW><ROW><id>11005671</id><snippet>DataOutputStream</snippet></ROW><ROW><id>11005671</id><snippet>ByteBuffers</snippet></ROW><ROW><id>11005877</id><snippet>w</snippet></ROW><ROW><id>11005877</id><snippet>myfile = open("grep.txt", "w")
for i in ...
    if i[1] ...:
         myfile.write(i + '\n')
</snippet></ROW><ROW><id>11005877</id><snippet>newstr = '\n'.join([''.join(i) for i in items if i[1] in items_grep])
</snippet></ROW><ROW><id>11005877</id><snippet>\n</snippet></ROW><ROW><id>11005877</id><snippet>with</snippet></ROW><ROW><id>11005877</id><snippet>with open("grep.txt","w") as f:
    f.write(newstr)
</snippet></ROW><ROW><id>11005974</id><snippet>distutils</snippet></ROW><ROW><id>11005974</id><snippet>disutils</snippet></ROW><ROW><id>11005981</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base= declarative_base()

_usergroup_table = Table('usergroup_table', Base.metadata,
    Column('user_id',  Integer, ForeignKey('user.id')),
    Column('group_id', Integer, ForeignKey('group.id')))

class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    name = Column(String(60), nullable=False, unique=True)
    group_id = Column(Integer, ForeignKey('group.id'), nullable=False)
    primary_group = relationship("Group")

    @validates('primary_group')
    def _add_pg(self, key, target):
        self.groups.add(target)
        return target

    @validates('groups', include_removes=True)
    def _modify_groups(self, key, target, is_remove):
        if is_remove and target is self.primary_group:
            del self.primary_group
        return target

class Group(Base):
    __tablename__ = 'group'
    id = Column(Integer, primary_key=True)
    name = Column(String(60), nullable=False)
    users = relationship('User', secondary=_usergroup_table,
                            backref=backref('groups', collection_class=set))

e = create_engine("sqlite://", echo=True)
Base.metadata.create_all(e)

s = Session(e)

g1, g2, g3 = Group(name='g1'), Group(name='g2'), Group(name='g3')
u1 = User(name='u1', primary_group=g1)

u1.groups.update([g2, g3])

s.add_all([
    g1, g2, g3, u1
])
s.commit()

u1.groups.remove(g1)
assert u1.primary_group is None
u1.primary_group = g2
s.commit()
</snippet></ROW><ROW><id>11005995</id><snippet>a</snippet></ROW><ROW><id>11005995</id><snippet>a = [1, 2, 3]</snippet></ROW><ROW><id>11005995</id><snippet>dir(a)
</snippet></ROW><ROW><id>11005995</id><snippet>insert</snippet></ROW><ROW><id>11005995</id><snippet>help(a.insert)
</snippet></ROW><ROW><id>11005995</id><snippet>a.insert(0, 7)
print a
</snippet></ROW><ROW><id>11005995</id><snippet>dir()</snippet></ROW><ROW><id>11005995</id><snippet>help()</snippet></ROW><ROW><id>11006065</id><snippet>__file__</snippet></ROW><ROW><id>11006065</id><snippet>open(os.path.join(os.path.dirname(__file__), 'text.txt'), 'r')
</snippet></ROW><ROW><id>11006065</id><snippet>__file__</snippet></ROW><ROW><id>11006179</id><snippet>if str(Number)[:1] == '1':</snippet></ROW><ROW><id>11006261</id><snippet>from __future__ import print_function
# Note: If you are using Python 3 leave this line out
# This must be the first statement before other statements.
# You may only put a quoted or triple quoted string, 
# Python comments or blank lines before the __future__ line.
import sys

def print(*args, **kwargs):
    """My custom print() function."""
    # Adding new arguments to the print function signature 
    # is probably a bad idea.
    # Instead consider testing if custom argument keywords
    # are present in kwargs
    sys.stdout.write('hello')
    return __builtins__.print(*args, **kwargs)

print ("hello there")
print (" hi again")
</snippet></ROW><ROW><id>11006261</id><snippet>from __future__ import print_function
# Note: If you are using Python 3 leave this line out
# This must be the first statement before other statements.
# You may only put a quoted or triple quoted string, 
# Python comments or blank lines before the __future__ line.

def print(*args, **kwargs):
    """My custom print() function."""
    # Adding new arguments to the print function signature 
    # is probably a bad idea.
    # Instead consider testing if custom argument keywords
    # are present in kwargs
    __builtins__.print('hello',end='')
    return __builtins__.print(*args, **kwargs)

print ("hello there")
print (" hi again")
</snippet></ROW><ROW><id>11006401</id><snippet>C</snippet></ROW><ROW><id>11006401</id><snippet>object</snippet></ROW><ROW><id>11006401</id><snippet>c.a</snippet></ROW><ROW><id>11006401</id><snippet>c.a = 3</snippet></ROW><ROW><id>11006401</id><snippet>C.a</snippet></ROW><ROW><id>11006401</id><snippet>c = C()
c.a
c.a = 3
print c.__dict__['a']
print C.__dict__['a']
del c.a
c.a
</snippet></ROW><ROW><id>11006401</id><snippet>read
3
&lt;__main__.Descriptor object at 0x04625570&gt;
read
finished
</snippet></ROW><ROW><id>11006581</id><snippet>autodoc</snippet></ROW><ROW><id>11006581</id><snippet>if __name__ == "__main__": do_stuff()</snippet></ROW><ROW><id>11006780</id><snippet>':'.join(h[i:i+2] for i in range(0,12,2))
</snippet></ROW><ROW><id>11007064</id><snippet>import csv

file  = open('names.csv', "rb") #Open CSV File in Read Mode
reader = csv.reader(file)      #Create reader object which iterates over lines

class Object:                   #Object to store unique data
    def __init__(self, name, produce, amount):
        self.name = name
        self.produce = produce
        self.amount = amount

rownum = 0 #Row Number currently iterating over
list = []  #List to store objects

def checkList(name, produce, amount):

    for object in list:  #Iterate through list        
        if object.name == name and object.produce == produce:  #Check if name and produce combination exists
            object.amount += int(amount) #If it does add to amount variable and break out
            return

    newObject = Object(name, produce, int(amount)) #Create a new object with new name, produce, and amount
    list.append(newObject)  #Add to list and break out


for row in reader:  #Iterate through all the rows
    if rownum == 0:  #Store header row seperately to not get confused
        header = row
    else:
        name = row[0]  #Store name
        produce = row[1]  #Store produce
        amount = row[2]  #Store amount

        if len(list) == 0:  #Default case if list = 0
            newObject = Object(name, produce, int(amount))
            list.append(newObject)
        else:  #If not...
            checkList(name, produce, amount)


rownum += 1

for each in list: #Print out result
    print each.name, each.produce, each.amount

file.close() #Close file
</snippet></ROW><ROW><id>11007153</id><snippet>STATICFILES_DIRS = (os.path.join( os.path.dirname( __file__ ), 'static' ),)</snippet></ROW><ROW><id>11007153</id><snippet>STATICFILES_FINDERS = (
'django.contrib.staticfiles.finders.FileSystemFinder',
'django.contrib.staticfiles.finders.AppDirectoriesFinder',)</snippet></ROW><ROW><id>11007153</id><snippet>STATIC_URL = '/static/'</snippet></ROW><ROW><id>11007153</id><snippet>STATIC_ROOT = ''</snippet></ROW><ROW><id>11007153</id><snippet>&lt;img src="{{ STATIC_URL }}images/under_construction.jpg" alt="Hi!" /&gt;</snippet></ROW><ROW><id>11007208</id><snippet>level5.charCount</snippet></ROW><ROW><id>11007208</id><snippet>if level5.charCount(theList).get(a):</snippet></ROW><ROW><id>11007208</id><snippet>a</snippet></ROW><ROW><id>11007208</id><snippet>level5.charCount(theList)</snippet></ROW><ROW><id>11007208</id><snippet>form collections import Counter

def sumPair(the_list, n):
    for a, b in Counter(the_list).iteritems():
        x = n - a
        if a == x and b &gt;1:
            return a, x
        if a != x and b != x:
            return a, x

print sumPair([6, 3, 8, 3, 2, 8, 3, 2], 9)   #output&gt;&gt;&gt; (8, 1)
</snippet></ROW><ROW><id>11007208</id><snippet>&gt;&gt;&gt;result = [(a, n-a) for a, b in Counter(the_list).iteritems() if a==n-a and b&gt;1 or (a != n-a and b != n-a)]
&gt;&gt;&gt;print result
[(8, 1), (2, 7), (3, 6), (6, 3)]
&gt;&gt;&gt;print result[0]   #this is the result you want
(8, 1)
</snippet></ROW><ROW><id>11007676</id><snippet>__import__()</snippet></ROW><ROW><id>11007676</id><snippet>http://docs.python.org/library/functions.html#__import__</snippet></ROW><ROW><id>11007676</id><snippet>cmds.button(l='print', c='bt_press()')</snippet></ROW><ROW><id>11007676</id><snippet>bt_press()</snippet></ROW><ROW><id>11007676</id><snippet>bt_press()</snippet></ROW><ROW><id>11007676</id><snippet>cmds.button(l='print', c='bt_test.bt_press()')</snippet></ROW><ROW><id>11007676</id><snippet>c</snippet></ROW><ROW><id>11007676</id><snippet>cmds.button(l='print', c=bt_press)</snippet></ROW><ROW><id>11007737</id><snippet>line_out = unicode(table_row.encode('utf-8').format(link_text, link_target.encode('utf-8')))
</snippet></ROW><ROW><id>11007737</id><snippet>line_out = unicode(table_row.format(link_text, link_target))
</snippet></ROW><ROW><id>11007737</id><snippet>table_row</snippet></ROW><ROW><id>11007749</id><snippet>from django.conf import settings

settings.DEBUG = True   # Don't do this!
</snippet></ROW><ROW><id>11007749</id><snippet>The only place you should assign to settings is in a settings file.</snippet></ROW><ROW><id>11007820</id><snippet>Item.query.order_by(func.rand()).offset(20).limit(10).all()
</snippet></ROW><ROW><id>11007820</id><snippet>Item.query.order_by(func.random()).offset(20).limit(10).all()
</snippet></ROW><ROW><id>11007995</id><snippet>socket.getaddrinfo</snippet></ROW><ROW><id>11007995</id><snippet>import socket
def bound_socket(*a, **k):
    sock = socket.socket(*a, **k)
    if socket.AF_INET6 in a:
        if not socket.has_ipv6:
            raise ValueError("There's no support for IPV6!")
        else:
            address = [addr for addr in socket.getaddrinfo(source_ip, None)
                        if socket.AF_INET6 == addr[0]] # You ussually want the first one.
            if not address:
                raise ValueError("Couldn't find ipv6 address for source %s" % source_ip)
            sock.bind(address[0][-1])
    else:
        sock.bind((source_ip, 0))
    return sock
</snippet></ROW><ROW><id>11008117</id><snippet>%s</snippet></ROW><ROW><id>11008117</id><snippet>text = 'Damien'
def my_function():
    return 'Damien'

# All of the following will print "Hello, Damien":
print 'Hello, %s' % 'Damien'
print 'Hello, %s' % text
print 'Hello, %s' % my_function()
</snippet></ROW><ROW><id>11008175</id><snippet>V8</snippet></ROW><ROW><id>11008311</id><snippet>foo = 'bar' # the name 'foo' is now a name for the string 'bar'
foo = 2 * 3 # the name 'foo' stops being a name for the string 'bar',
# and starts being a name for the integer 6, resulting from the multiplication
</snippet></ROW><ROW><id>11008311</id><snippet>class</snippet></ROW><ROW><id>11008311</id><snippet>def</snippet></ROW><ROW><id>11008311</id><snippet>class Example:
    data = 42
    def method(self): pass
</snippet></ROW><ROW><id>11008311</id><snippet>Example</snippet></ROW><ROW><id>11008311</id><snippet>Example</snippet></ROW><ROW><id>11008311</id><snippet>data</snippet></ROW><ROW><id>11008311</id><snippet>42</snippet></ROW><ROW><id>11008311</id><snippet>method</snippet></ROW><ROW><id>11008311</id><snippet>x = Example()
</snippet></ROW><ROW><id>11008311</id><snippet>x</snippet></ROW><ROW><id>11008311</id><snippet>Example</snippet></ROW><ROW><id>11008311</id><snippet>data</snippet></ROW><ROW><id>11008311</id><snippet>method</snippet></ROW><ROW><id>11008311</id><snippet>x</snippet></ROW><ROW><id>11008311</id><snippet>method</snippet></ROW><ROW><id>11008311</id><snippet>x</snippet></ROW><ROW><id>11008311</id><snippet>self</snippet></ROW><ROW><id>11008311</id><snippet>Example.method</snippet></ROW><ROW><id>11008311</id><snippet>x.data</snippet></ROW><ROW><id>11008311</id><snippet>x.data</snippet></ROW><ROW><id>11008311</id><snippet>__init__</snippet></ROW><ROW><id>11008311</id><snippet>class Example:
    name = "Ignored"
    def __init__(self, name):
        self.name = name
    # rest as before
</snippet></ROW><ROW><id>11008311</id><snippet>name</snippet></ROW><ROW><id>11008311</id><snippet>Example</snippet></ROW><ROW><id>11008311</id><snippet>name</snippet></ROW><ROW><id>11008311</id><snippet>Example.name</snippet></ROW><ROW><id>11008311</id><snippet>.name</snippet></ROW><ROW><id>11008311</id><snippet>a = 'hi '
b = a
a += 'mom'
</snippet></ROW><ROW><id>11008311</id><snippet>'hi mom'</snippet></ROW><ROW><id>11008311</id><snippet>a</snippet></ROW><ROW><id>11008311</id><snippet>'hi '</snippet></ROW><ROW><id>11008311</id><snippet>'hi mom'</snippet></ROW><ROW><id>11008311</id><snippet>b</snippet></ROW><ROW><id>11008311</id><snippet>'hi '</snippet></ROW><ROW><id>11008311</id><snippet>a</snippet></ROW><ROW><id>11008311</id><snippet>b</snippet></ROW><ROW><id>11008311</id><snippet>'hi '</snippet></ROW><ROW><id>11008311</id><snippet>'hi '</snippet></ROW><ROW><id>11008311</id><snippet>a = [1, 2, 3]
b = a
a += [4]
</snippet></ROW><ROW><id>11008311</id><snippet>b</snippet></ROW><ROW><id>11008311</id><snippet>b</snippet></ROW><ROW><id>11008311</id><snippet>a</snippet></ROW><ROW><id>11008311</id><snippet>a</snippet></ROW><ROW><id>11008311</id><snippet>+=</snippet></ROW><ROW><id>11008455</id><snippet>p1 = Point("53.4235217000000020 -113.4741271000000040")
p2 = Point("53.5343457999999970 -113.5013688000000229")
</snippet></ROW><ROW><id>11009128</id><snippet>Flask</snippet></ROW><ROW><id>11009128</id><snippet>from flask import Flask, render_template

app = Flask(__name__)

app.route('/',methods=['GET','POST'])
def print_form():
    if request.method == 'POST':
        return render_template('form.html',result=request.form['fooput'])
    if request.method == 'GET':
        return render_template('form.html')

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>11009128</id><snippet>form.html</snippet></ROW><ROW><id>11009128</id><snippet>{% if result %}
    You entered: {{ result }}
{% endif %}
&lt;form method="POST" action="."&gt;
   &lt;input id="post_form_id" name="fooput" value="" /&gt;
   &lt;input type="submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>11009205</id><snippet>str.partition</snippet></ROW><ROW><id>11009205</id><snippet>&gt;&gt;&gt; 'jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,'.partition('=')
('jvm.args', '=', ' -Dappdynamics.com=true, -Dsomeotherparam=false,')
</snippet></ROW><ROW><id>11009395</id><snippet>syncdb</snippet></ROW><ROW><id>11009395</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>11009840</id><snippet>Differ.compare()</snippet></ROW><ROW><id>11009840</id><snippet>item.split()</snippet></ROW><ROW><id>11009840</id><snippet>temp3</snippet></ROW><ROW><id>11009840</id><snippet>temp4</snippet></ROW><ROW><id>11009840</id><snippet>append()</snippet></ROW><ROW><id>11009840</id><snippet>extend()</snippet></ROW><ROW><id>11009840</id><snippet>readlines()</snippet></ROW><ROW><id>11009840</id><snippet>with open("seqdetect") as f, open("seqdetect_2") as g:
    flines = f.readlines()
    glines = g.readlines()

    d = difflib.Differ()
    diff = d.compare(flines, glines)
    print("\n".join(diff))
</snippet></ROW><ROW><id>11009840</id><snippet>linejunk</snippet></ROW><ROW><id>11009840</id><snippet>charjunk</snippet></ROW><ROW><id>11009986</id><snippet>thread.error: can't start new thread

(r.py:12227): GLib-ERROR **: creating thread 'gdbus': Error creating thread: Resource temporarily unavailable
</snippet></ROW><ROW><id>11009986</id><snippet>if __name__ == '__main__':
  applicationName = "DSS POS"
  # Initialization of the Notification library
  if not pynotify.init(applicationName):
   sys.exit(1)         

  flagContinous = True
  timeout = 5
  # This loop will continously keep the application in the background
  while flagContinous:
   time.sleep(timeout)
   runWorks()
  # After 30 seconds, "hello, world" will be printed  
</snippet></ROW><ROW><id>11009986</id><snippet>pid = str(os.getpid())
  pidfile = "/tmp/mydaemon.pid"

  # If we have a lock already block the program
  if os.path.isfile(pidfile):
    print "%s already exists, exiting" % pidfile
    sys.exit()
  else:
    file(pidfile, 'w').write(pid)
  # Do all the work
  applicationName = "DSS POS"
  # Initialization of the Notification library
  if not pynotify.init(applicationName):
   sys.exit(1)         

  # Controls for the application
  flagContinous = True
  timeout = 5
  # This loop will continously keep the application in the background
  while flagContinous:
   time.sleep(timeout)
   runWorks()
  # After 30 seconds, "hello, world" will be printed  

  # Release the file
  os.unlink(pidfile)
</snippet></ROW><ROW><id>11010413</id><snippet>fork</snippet></ROW><ROW><id>11010413</id><snippet>_exit</snippet></ROW><ROW><id>11010413</id><snippet>exit</snippet></ROW><ROW><id>11010413</id><snippet>atexit</snippet></ROW><ROW><id>11010413</id><snippet>stdio</snippet></ROW><ROW><id>11010413</id><snippet>_exit</snippet></ROW><ROW><id>11010413</id><snippet>sys.exit</snippet></ROW><ROW><id>11010413</id><snippet>exit</snippet></ROW><ROW><id>11010413</id><snippet>os._exit</snippet></ROW><ROW><id>11010413</id><snippet>fork</snippet></ROW><ROW><id>11010413</id><snippet>exit</snippet></ROW><ROW><id>11010413</id><snippet>_exit</snippet></ROW><ROW><id>11010440</id><snippet>GET /calendar/v3/users/me/calendarList HTTP/1.1
Host: www.googleapis.com
Content-Length: 36
content-type: text/plain
accept-encoding: gzip, deflate
user-agent: Python-httplib2/$Rev$

key=ThisIsMyApiKeyICopiedAndPastedIt
</snippet></ROW><ROW><id>11010440</id><snippet>GET /calendar/v3/users/me/calendarList?key=ThisIsMyApiKeyICopiedAndPastedIt HTTP/1.1
Host: localhost:1234
content-type: text/plain
accept-encoding: gzip, deflate
user-agent: Python-httplib2/$Rev$
</snippet></ROW><ROW><id>11010440</id><snippet>url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList'
uri = '%s?%s' % (url, urlencode(data))
resp, content = h.request(uri, "GET", headers={'content-type':'text/plain'})
</snippet></ROW><ROW><id>11010527</id><snippet>from PythonMagick import Image
Image("img.png").write("clipboard:") 
</snippet></ROW><ROW><id>11010546</id><snippet>class MyWidget(QWidget):
    def __init__(self,parent=None):
        QWidget.__init__(self,parent)
        policy=QSizePolicy(QSizePolicy.Preferred,QSizePolicy.Preferred)
        policy.setHeightForWidth(True)
        policy.setWidthForHeight(True)
        self.setSizePolicy(policy)
    ...
    def heightForWidth(self,width):
        return width
    def widthForHeight(self,height):
        return height
    ...
</snippet></ROW><ROW><id>11010546</id><snippet>min(width,height)</snippet></ROW><ROW><id>11010546</id><snippet>QMouseEvent.accept</snippet></ROW><ROW><id>11010692</id><snippet>dicResults =  {}
for row in results:
    dicResults[row[1]] = [row[0], row[2], row[3]]
</snippet></ROW><ROW><id>11010791</id><snippet>&gt;&gt;&gt; a = -0.0
&gt;&gt;&gt; a + 0
0.0
</snippet></ROW><ROW><id>11010791</id><snippet>&gt;&gt;&gt; '{0:.3f}'.format(a + 0)
'0.000'
</snippet></ROW><ROW><id>11010833</id><snippet>for filename in os.listdir(folderpath):
    filepath = os.path.join(folderpath, filename)
    fd = open(filepath, 'r')

    # here is your code
    for line in fd.readlines():
        ....
</snippet></ROW><ROW><id>11011012</id><snippet>invalid_id_arr=["id123-3431","id124-4341","id125-4341","id126-1w","id789-123","id666"] 
valid_id_arr=["id123-12345","id124-1122","id125-13232","id126-12332","id1new","idagain"]
valid_id_set = set(ele.split('-')[0] for ele in valid_id_arr)
diff = [ele for ele in invalid_id_arr if ele.split('-')[0] not in valid_id_set]
print diff
</snippet></ROW><ROW><id>11011012</id><snippet>['id789-123', 'id666']
</snippet></ROW><ROW><id>11011226</id><snippet>from pyparsing import *
# elements of the makefile are delimited by line, so we must
# define skippable whitespace to include just spaces and tabs
ParserElement.setDefaultWhitespaceChars(' \t')
NL = LineEnd().suppress()

EQ,COLON,LBRACK,RBRACK = map(Suppress, "=:[]")
identifier = Word(alphas+'_', alphanums)

symbol_assignment = Group(identifier("name") + EQ + empty + 
                          restOfLine("value"))("symbol_assignment")
symbol_ref = Word("$",alphanums+"_.")

def only_column_one(s,l,t):
    if col(l,s) != 1:
        raise ParseException(s,l,"not in column 1")
# task identifiers have to start in column 1
task_identifier = identifier.copy().setParseAction(only_column_one)

task_description = "des:" + empty + restOfLine("des")
task_path = "path:" + empty + restOfLine("path")
task_para_body = delimitedList(symbol_ref)
task_para = "para:" + LBRACK + task_para_body("para") + RBRACK
task_para.ignore(NL)
task_definition = Group(task_identifier("target") + COLON + 
        Optional(delimitedList(identifier))("deps") + NL +
        (
        Optional(task_description + NL) &amp; 
        Optional(task_path + NL) &amp; 
        Optional(task_para + NL)
        )
    )("task_definition")

makefile_parser = ZeroOrMore(
    symbol_assignment |
    task_definition |
    NL
    )


if __name__ == "__main__":
    test = """\
samtools=/path/to/samtools
picard=/path/to/picard

task1:  
    des: description 
    path: /path/to/task1 
    para: [$global.samtools, 
           $args.input, 
           $path 
          ] 

task2: task1 
"""

# dump out what we parsed, including results names
for element in makefile_parser.parseString(test):
    print element.getName()
    print element.dump()
    print
</snippet></ROW><ROW><id>11011226</id><snippet>symbol_assignment
['samtools', '/path/to/samtools']
- name: samtools
- value: /path/to/samtools

symbol_assignment
['picard', '/path/to/picard']
- name: picard
- value: /path/to/picard

task_definition
['task1', 'des:', 'description ', 'path:', '/path/to/task1 ', 'para:', 
 '$global.samtools', '$args.input', '$path']
- des: description 
- para: ['$global.samtools', '$args.input', '$path']
- path: /path/to/task1 
- target: task1

task_definition
['task2', 'task1']
- deps: ['task1']
- target: task2
</snippet></ROW><ROW><id>11011226</id><snippet>element.target</snippet></ROW><ROW><id>11011226</id><snippet>element.deps</snippet></ROW><ROW><id>11011226</id><snippet>element.name</snippet></ROW><ROW><id>11011226</id><snippet>element[key]</snippet></ROW><ROW><id>11011226</id><snippet>for element in makefile_parser.parseString(test):
    if element.getName() == 'task_definition':
        print "TASK:", element.target,
        if element.deps:
            print "DEPS:(" + ','.join(element.deps) + ")"
        else:
            print
        for key in ('des', 'path', 'para'):
            if key in element:
                print " ", key.upper()+":", element[key]

    elif element.getName() == 'symbol_assignment':
        print "SYM:", element.name, "-&gt;", element.value
</snippet></ROW><ROW><id>11011226</id><snippet>SYM: samtools -&gt; /path/to/samtools
SYM: picard -&gt; /path/to/picard
TASK: task1
  DES: description 
  PATH: /path/to/task1 
  PARA: ['$global.samtools', '$args.input', '$path']
TASK: task2 DEPS:(task1)
</snippet></ROW><ROW><id>11011453</id><snippet>text_edit = QPlainTextEdit()
...
text=open('file.txt').read()
text_edit.setPlainText(text)
</snippet></ROW><ROW><id>11011777</id><snippet>file_len()</snippet></ROW><ROW><id>11011777</id><snippet>def file_len(fname):
    i = 0
    with open(fname) as f:
        for i, l in enumerate(f, 1):
            pass
    return i
</snippet></ROW><ROW><id>11011777</id><snippet>result = sum(e.calculate_result(i).real for i in xrange(10000) for e in element_list)
</snippet></ROW><ROW><id>11011777</id><snippet>reduce()</snippet></ROW><ROW><id>11011777</id><snippet>reduce()</snippet></ROW><ROW><id>11011777</id><snippet>e</snippet></ROW><ROW><id>11011777</id><snippet>e.calculate_result(i).real</snippet></ROW><ROW><id>11011777</id><snippet>e</snippet></ROW><ROW><id>11011777</id><snippet>import itertools as it
import operator as op
result = reduce(op.add, it.imap(SomeClass.calculate_something, it.product(element_list, xrange(10000))))
</snippet></ROW><ROW><id>11011777</id><snippet>it.product()</snippet></ROW><ROW><id>11011777</id><snippet>(e, i)</snippet></ROW><ROW><id>11011777</id><snippet>e</snippet></ROW><ROW><id>11011777</id><snippet>element_list</snippet></ROW><ROW><id>11011777</id><snippet>i</snippet></ROW><ROW><id>11011777</id><snippet>xrange(10000)</snippet></ROW><ROW><id>11011777</id><snippet>it.imap()</snippet></ROW><ROW><id>11011777</id><snippet>reduce()</snippet></ROW><ROW><id>11011777</id><snippet>sum()</snippet></ROW><ROW><id>11011777</id><snippet>reduce(op.add)</snippet></ROW><ROW><id>11011777</id><snippet>SomeClass.calculate_something</snippet></ROW><ROW><id>11011777</id><snippet>sum()</snippet></ROW><ROW><id>11011777</id><snippet>reduce()</snippet></ROW><ROW><id>11011777</id><snippet>.real</snippet></ROW><ROW><id>11011777</id><snippet>reduce()</snippet></ROW><ROW><id>11011777</id><snippet>result = sum(e.calculate_result(i).real for e in element_list for i in xrange(10000))
</snippet></ROW><ROW><id>11011777</id><snippet>e</snippet></ROW><ROW><id>11011824</id><snippet>i = 1
while i &lt; len(sub_meta):
    if sub_meta[i][1] &lt; sub_meta[i-1][1]:
        dict_meta[sub_meta[i-1][0]]= sub_meta[i][0]
    elif sub_meta[i][1] == sub_meta[i-1][1]:
        dict_meta[sub_meta[i-1][0]]= ''
        i += 1
    i += 2
</snippet></ROW><ROW><id>11011846</id><snippet>collections.Counter</snippet></ROW><ROW><id>11011846</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; A = Counter({'a':1, 'b':2, 'c':3})
&gt;&gt;&gt; B = Counter({'b':3, 'c':4, 'd':5})
&gt;&gt;&gt; A + B
Counter({'c': 7, 'b': 5, 'd': 5, 'a': 1})
</snippet></ROW><ROW><id>11011846</id><snippet>dict</snippet></ROW><ROW><id>11012276</id><snippet>kode_prod</snippet></ROW><ROW><id>11012276</id><snippet>'blur'</snippet></ROW><ROW><id>11012276</id><snippet>from django.core import serializers

def get_product(request, pk):
    return HttpResponse(serializers.serialize("xml", Product.objects.filter(pk=pk)))
</snippet></ROW><ROW><id>11012331</id><snippet>from dico import dicoMentalRay2
self.dicoMentalRay.update(dicoMentalRay2)
</snippet></ROW><ROW><id>11012331</id><snippet>import dico
self.dicoMentalRay.update(dico.dicoMentalRay2)
</snippet></ROW><ROW><id>11012391</id><snippet>while</snippet></ROW><ROW><id>11012391</id><snippet>b_not_sorted = False</snippet></ROW><ROW><id>11012391</id><snippet>b_not_sorted</snippet></ROW><ROW><id>11012391</id><snippet>I_still_need_to_go_through_the_list</snippet></ROW><ROW><id>11012391</id><snippet>while I_still_need_to_go_through_the_list:
</snippet></ROW><ROW><id>11012391</id><snippet>if highest_scores[counter] &lt; highest_scores[counter + 1]:
</snippet></ROW><ROW><id>11012391</id><snippet>I_still_need_to_go_through_the_list</snippet></ROW><ROW><id>11012391</id><snippet>False</snippet></ROW><ROW><id>11012391</id><snippet>I_still_need_to_go_through_the_list = False</snippet></ROW><ROW><id>11012391</id><snippet>for</snippet></ROW><ROW><id>11012391</id><snippet>False</snippet></ROW><ROW><id>11012642</id><snippet>Paginator</snippet></ROW><ROW><id>11012642</id><snippet>from django.core.paginator import Paginator

# in the view:
p = Paginator(objects, 2)
page = p.page(current_page)
for o in page.object_list:
    # do processing
    pass
</snippet></ROW><ROW><id>11012642</id><snippet>current_page</snippet></ROW><ROW><id>11012642</id><snippet>page</snippet></ROW><ROW><id>11012642</id><snippet>request.GET</snippet></ROW><ROW><id>11013309</id><snippet>sending_date</snippet></ROW><ROW><id>11013309</id><snippet>datetime.now()</snippet></ROW><ROW><id>11013309</id><snippet>now</snippet></ROW><ROW><id>11013309</id><snippet>import datetime
from django.utils.timezone import utc

now = datetime.datetime.utcnow().replace(tzinfo=utc)
if self.newsletter.sending_date &lt;= now and \
    ...
</snippet></ROW><ROW><id>11013405</id><snippet>&lt;a href="http://docs.python.org/dev/library/difflib.html" rel="nofollow"&gt;difflib&lt;/a&gt;.&lt;a href="http://docs.python.org/dev/library/difflib.html#difflib.SequenceMatcher" rel="nofollow"&gt;SequenceMatcher&lt;/a&gt;.&lt;a href="http://docs.python.org/dev/library/difflib.html#difflib.SequenceMatcher.get_opcodes" rel="nofollow"&gt;get_opcodes&lt;/a&gt;</snippet></ROW><ROW><id>11013405</id><snippet>import difflib

def diff(a, b):
    for tag, i1, i2, j1, j2 in difflib.SequenceMatcher(a=a, b=b).get_opcodes():
        if tag!='equal':
            yield a[i1:i2], b[j1:j2]

&gt;&gt;&gt; d = list(diff('A B C D E F G'.split(), 'A X D Y Z W G'.split()))
&gt;&gt;&gt; d
[(['B', 'C'], ['X']), (['E', 'F'], ['Y', 'Z', 'W'])]
&gt;&gt;&gt; '\n'.join('{} -&gt; {}'.format(*(' '.join(i) for i in l)) for l in d)
B C -&gt; X
E F -&gt; Y Z W
</snippet></ROW><ROW><id>11013405</id><snippet>import difflib

def diff(a, b):
    add, remove = [], []
    for line in difflib.ndiff(a, b):
        d, line = line[0], line[2:]
        if d in '+-':
            (add if d=='+' else remove).append(line)
        elif add or remove:
            yield remove, add
            add, remove = [], []
    if add or remove:
        yield remove, add
</snippet></ROW><ROW><id>11013771</id><snippet>shell=True</snippet></ROW><ROW><id>11013771</id><snippet>In [4]: from subprocess import check_output

In [5]: check_output(['echo', '123'])
Out[5]: '123\n'

In [6]: check_output(['echo', '123'], shell=True)
Out[6]: '\n'

In [7]: check_output('echo 123', shell=True)
Out[7]: '123\n'
</snippet></ROW><ROW><id>11013771</id><snippet>call</snippet></ROW><ROW><id>11013771</id><snippet>p.stdout.read</snippet></ROW><ROW><id>11013771</id><snippet>Popen().communicate</snippet></ROW><ROW><id>11013771</id><snippet>cmd = ' '.join([cmd, args])
(out, err) = Popen(cmd,  stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True, shell=True).communicate(None)
</snippet></ROW><ROW><id>11013771</id><snippet>Popen</snippet></ROW><ROW><id>11013771</id><snippet>communicate</snippet></ROW><ROW><id>11013771</id><snippet>process.stdin</snippet></ROW><ROW><id>11013771</id><snippet>process</snippet></ROW><ROW><id>11013771</id><snippet>Popen</snippet></ROW></DATA>