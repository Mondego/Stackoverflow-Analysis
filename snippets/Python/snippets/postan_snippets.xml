<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>3429077</id><snippet>global "foo" is not defined</snippet></ROW><ROW><id>3429077</id><snippet>self.foo</snippet></ROW><ROW><id>3429077</id><snippet>self.</snippet></ROW><ROW><id>3429077</id><snippet>x</snippet></ROW><ROW><id>3429915</id><snippet>auto_now</snippet></ROW><ROW><id>3429915</id><snippet>auto_now_add</snippet></ROW><ROW><id>3429915</id><snippet>updated_at</snippet></ROW><ROW><id>3429915</id><snippet>created_at</snippet></ROW><ROW><id>3429915</id><snippet>class MyModel(models.Model):
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
</snippet></ROW><ROW><id>3429988</id><snippet>sorted</snippet></ROW><ROW><id>3429988</id><snippet>transactions.sort(key=itemgetter(0))
</snippet></ROW><ROW><id>3429988</id><snippet>key</snippet></ROW><ROW><id>3430231</id><snippet>&gt;&gt;&gt; from itertools import count, groupby
&gt;&gt;&gt; L=[1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 19, 20, 22, 23, 40, 44]
&gt;&gt;&gt; G=(list(x) for _,x in groupby(L, lambda x,c=count(): next(c)-x))
&gt;&gt;&gt; print ",".join("-".join(map(str,(g[0],g[-1])[:len(g)])) for g in G)
1-4,6-9,12-13,19-20,22-23,40,44
</snippet></ROW><ROW><id>3430231</id><snippet>count()</snippet></ROW><ROW><id>3430231</id><snippet>enumerate()</snippet></ROW><ROW><id>3430231</id><snippet>G=(list(x) for _,x in groupby(enumerate(L), lambda (i,x):i-x))
print ",".join("-".join(map(str,(g[0][1],g[-1][1])[:len(g)])) for g in G)
</snippet></ROW><ROW><id>3430395</id><snippet>import os
os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>3430395</id><snippet>import os
os.getcwd()
</snippet></ROW><ROW><id>3430444</id><snippet>import datetime as DT
import itertools

start_date=DT.date(2008,5,5)

def mkdate(datestring):
    return DT.datetime.strptime(datestring, "%Y-%m-%d").date()

def fortnight(date):
    return (date-start_date).days //14

raw = ("2010-08-01",
       "2010-06-25",
       "2010-07-01",
       "2010-07-08")
transactions=[(date,"Some data") for date in map(mkdate,raw)]
transactions.sort(key=lambda (date,data):date)

for key,grp in itertools.groupby(transactions,key=lambda (date,data):fortnight(date)):
    print(key,list(grp))
</snippet></ROW><ROW><id>3430444</id><snippet># (55, [(datetime.date(2010, 6, 25), 'Some data')])
# (56, [(datetime.date(2010, 7, 1), 'Some data'), (datetime.date(2010, 7, 8), 'Some data')])
# (58, [(datetime.date(2010, 8, 1), 'Some data')])
</snippet></ROW><ROW><id>3430444</id><snippet>start_date</snippet></ROW><ROW><id>3430444</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3430444</id><snippet>lambda</snippet></ROW><ROW><id>3430444</id><snippet>def</snippet></ROW><ROW><id>3430444</id><snippet>def</snippet></ROW><ROW><id>3430444</id><snippet>import operator
transactions.sort(key=operator.itemgetter(0))

def transaction_fortnight(transaction):
    date,data=transaction
    return fortnight(date)

for key,grp in itertools.groupby(transactions,key=transaction_fortnight):
    print(key,list(grp))
</snippet></ROW><ROW><id>3430477</id><snippet>settings.py</snippet></ROW><ROW><id>3430477</id><snippet>SITE_URL='www.mydomain.tld/somewhere/'
SITE_NAME='My site'
</snippet></ROW><ROW><id>3430477</id><snippet>from django.shortcuts import render_to_response
from django.conf import settings

def my_view(request, ...):
    response_dict = {
        'site_name': settings.SITE_NAME,
        'site_url': settings.SITE_URL,
    }
    ...
    return render_to_response('my_template_dir/my_template.html', response_dict)
</snippet></ROW><ROW><id>3430477</id><snippet>my_context_processors.py</snippet></ROW><ROW><id>3430477</id><snippet>from django.conf import settings

def some_context_processor(request):
    my_dict = {
        'site_url': settings.SITE_URL,
        'site_name': settings.SITE_NAME,
    }

    return my_dict
</snippet></ROW><ROW><id>3430477</id><snippet>settings.py</snippet></ROW><ROW><id>3430477</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    ...

    # yours
    'my_context_processors.some_context_processor',
)
</snippet></ROW><ROW><id>3430477</id><snippet>views.py</snippet></ROW><ROW><id>3430477</id><snippet>from django.shortcuts import render_to_response
from django.template import RequestContext

def my_view(request, ...):  
    response_dict = RequestContext(request)
    ...
    # you can still still add variables that specific only to this view
    response_dict['some_var_only_in_this_view'] = 42
    ...
    return render_to_response('my_template_dir/my_template.html', response_dict)
</snippet></ROW><ROW><id>3430577</id><snippet>obj.some_field = some_var
obj.save()
</snippet></ROW><ROW><id>3430577</id><snippet>UPDATE</snippet></ROW><ROW><id>3430577</id><snippet>INSERT</snippet></ROW><ROW><id>3430812</id><snippet>data
</snippet></ROW><ROW><id>3430812</id><snippet>protocols.basic.LineReceiver</snippet></ROW><ROW><id>3430812</id><snippet>Host</snippet></ROW><ROW><id>3431180</id><snippet>xdg-open</snippet></ROW><ROW><id>3431180</id><snippet>import os
os.system('xdg-open ./img.jpg')
</snippet></ROW><ROW><id>3431180</id><snippet>subprocess</snippet></ROW><ROW><id>3431180</id><snippet>os.system</snippet></ROW><ROW><id>3431180</id><snippet>xdg-open</snippet></ROW><ROW><id>3431475</id><snippet>FakeModule</snippet></ROW><ROW><id>3431475</id><snippet>World</snippet></ROW><ROW><id>3431475</id><snippet>World</snippet></ROW><ROW><id>3431475</id><snippet>FakeModule</snippet></ROW><ROW><id>3431475</id><snippet>CoolModule</snippet></ROW><ROW><id>3431475</id><snippet>import FakeModule
import CoolModule
FakeModule.World = CoolModule.World
</snippet></ROW><ROW><id>3431475</id><snippet>__name__</snippet></ROW><ROW><id>3431475</id><snippet>'__main__'</snippet></ROW><ROW><id>3431475</id><snippet>__main__.World</snippet></ROW><ROW><id>3431475</id><snippet>$ cat file
(i__main__
World
p0
(dp1
</snippet></ROW><ROW><id>3431475</id><snippet>__main__</snippet></ROW><ROW><id>3431475</id><snippet>$ py26
Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import world
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.load(open("file", "rb"))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pickle.py", line 1370, in load
    return Unpickler(file).load()
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pickle.py", line 858, in load
    dispatch[key](self)
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pickle.py", line 1069, in load_inst
    klass = self.find_class(module, name)
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pickle.py", line 1126, in find_class
    klass = getattr(mod, name)
AttributeError: 'module' object has no attribute 'World'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3431475</id><snippet>__main__</snippet></ROW><ROW><id>3431475</id><snippet>world</snippet></ROW><ROW><id>3431475</id><snippet>&gt;&gt;&gt; World = world.World
&gt;&gt;&gt; pickle.load(open("file", "rb"))
&lt;world.World instance at 0xf5300&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3431475</id><snippet>from world import World</snippet></ROW><ROW><id>3431475</id><snippet>__main__</snippet></ROW><ROW><id>3431475</id><snippet>In [1]: import world

In [2]: import pickle

In [3]: import sys

In [4]: sys.modules['__main__'].World = world.World

In [5]: pickle.load(open("file", "rb"))
Out[5]: &lt;world.World instance at 0x118fc10&gt;

In [6]: 
</snippet></ROW><ROW><id>3431475</id><snippet>__main__</snippet></ROW><ROW><id>3431475</id><snippet>Word</snippet></ROW><ROW><id>3431475</id><snippet>world</snippet></ROW><ROW><id>3431475</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>3431475</id><snippet>world.py</snippet></ROW><ROW><id>3431475</id><snippet>import pickle
class World:
    ""
if __name__ == '__main__':
    import world
    w = world.World()
    pickle.dump(w, open("file", "wb"))
</snippet></ROW><ROW><id>3431699</id><snippet>k</snippet></ROW><ROW><id>3431699</id><snippet>test</snippet></ROW><ROW><id>3431699</id><snippet>def f():</snippet></ROW><ROW><id>3431699</id><snippet>def f(k=k):</snippet></ROW><ROW><id>3431699</id><snippet>k</snippet></ROW><ROW><id>3431699</id><snippet>k=k</snippet></ROW><ROW><id>3431699</id><snippet>k</snippet></ROW><ROW><id>3431699</id><snippet>k</snippet></ROW><ROW><id>3431699</id><snippet>k=k</snippet></ROW><ROW><id>3431699</id><snippet>def</snippet></ROW><ROW><id>3431699</id><snippet>call</snippet></ROW><ROW><id>3431699</id><snippet>f</snippet></ROW><ROW><id>3431699</id><snippet>    def make_f(kwargs, k):
        def f():
            print k, kwargs[k]
        return f
</snippet></ROW><ROW><id>3431699</id><snippet>f = make_f(kwargs, k)</snippet></ROW><ROW><id>3431699</id><snippet>def</snippet></ROW><ROW><id>3431749</id><snippet>line.startswith("")</snippet></ROW><ROW><id>3431749</id><snippet>line.strip()</snippet></ROW><ROW><id>3431749</id><snippet>line.rstrip()</snippet></ROW><ROW><id>3431749</id><snippet>\t</snippet></ROW><ROW><id>3431749</id><snippet>line = line.rstrip()
if not line.startswith(('(', '\t')):
    #....
</snippet></ROW><ROW><id>3431749</id><snippet>#edited in response to comments in post
for i, line in input_file:
    if i % 4 == 0:
        output_file.write(line)
</snippet></ROW><ROW><id>3431992</id><snippet>ChoiceField</snippet></ROW><ROW><id>3431992</id><snippet>TypeChoiceField</snippet></ROW><ROW><id>3431992</id><snippet>class ChoiceField(Field):
    widget = Select
    default_error_messages = {
        'invalid_choice': _(u'Select a valid choice. %(value)s is not one of the available choices.'),
    }

    def __init__(self, choices=(), required=True, widget=None, label=None,
                 initial=None, help_text=None, *args, **kwargs):
        super(ChoiceField, self).__init__(required=required, widget=widget, label=label,
                                        initial=initial, help_text=help_text, *args, **kwargs)
        self.choices = choices

    def _get_choices(self):
        return self._choices

    def _set_choices(self, value):
        # Setting choices also sets the choices on the widget.
        # choices can be any iterable, but we call list() on it because
        # it will be consumed more than once.
        self._choices = self.widget.choices = list(value)

    choices = property(_get_choices, _set_choices)
</snippet></ROW><ROW><id>3431992</id><snippet>     self.fields['attending_ceremony'] = forms.TypedChoiceField(
                required=True,
                widget=forms.RadioSelect(choices=Guest.CHOICES)
            )
</snippet></ROW><ROW><id>3431992</id><snippet>super(ChoiceField, self).__init__</snippet></ROW><ROW><id>3431992</id><snippet>self.choices=choices</snippet></ROW><ROW><id>3431992</id><snippet>()</snippet></ROW><ROW><id>3431992</id><snippet>_set_choices</snippet></ROW><ROW><id>3432032</id><snippet>cgi_directories</snippet></ROW><ROW><id>3432032</id><snippet>["/"]</snippet></ROW><ROW><id>3432032</id><snippet>[""]</snippet></ROW><ROW><id>3432514</id><snippet>mod = __import__(module_name)
fn = getattr(mod, fn_name)
fn()
</snippet></ROW><ROW><id>3432798</id><snippet>from orbited.cometsession import Port
...
reactor.listenWith(Port, factory=someFactoryYouWrote, resource=someResourceYouWrote, childName='tcp')
</snippet></ROW><ROW><id>3432848</id><snippet>def running_sum(a):
  tot = 0
  for item in a:
    tot += item
    yield tot
</snippet></ROW><ROW><id>3432848</id><snippet>list(running_sum(a))</snippet></ROW><ROW><id>3432874</id><snippet>memcache</snippet></ROW><ROW><id>3432874</id><snippet>pickle</snippet></ROW><ROW><id>3432874</id><snippet>len(pickle.dumps(yourobject, -1))</snippet></ROW><ROW><id>3432874</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof(23)
12
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; len(pickle.dumps(23, -1))
5
</snippet></ROW><ROW><id>3432914</id><snippet>urllib</snippet></ROW><ROW><id>3433045</id><snippet>ModelForm</snippet></ROW><ROW><id>3433045</id><snippet>class</snippet></ROW><ROW><id>3433045</id><snippet>id</snippet></ROW><ROW><id>3433045</id><snippet>name = forms.CharField(
                widget=forms.TextInput(attrs={'class':'special'}))
</snippet></ROW><ROW><id>3433045</id><snippet>fields</snippet></ROW><ROW><id>3433045</id><snippet>Meta</snippet></ROW><ROW><id>3433045</id><snippet>class Meta:
    model = YourModel
    fields = ('title', 'content')
</snippet></ROW><ROW><id>3433159</id><snippet>007 == 7
010 == 8
011 == 9
</snippet></ROW><ROW><id>3433199</id><snippet>_socket.socket</snippet></ROW><ROW><id>3433199</id><snippet>isinstance</snippet></ROW><ROW><id>3433199</id><snippet>_socket.socket</snippet></ROW><ROW><id>3433199</id><snippet>def socketify( socket_protocol_compliant_object ):
    import _socket
    class proxy( _socket.socket ):
        def __init__( self ): pass
        def __getattribute__( self, attr_name ):
            return getattr( socket_protocol_compliant_object, attr_name )
        def __setattribute__( self, attr_name, new_value ):
            setattr( socket_protocol_compliant_object, attr_name, new_value )
    return proxy()

self._sslobj = _ssl.sslwrap( socketify(self._sock), server_side, keyfile, ... )
</snippet></ROW><ROW><id>3433244</id><snippet>__as_number__</snippet></ROW><ROW><id>3433244</id><snippet>TAG_Short</snippet></ROW><ROW><id>3433244</id><snippet>ValueError</snippet></ROW><ROW><id>3433244</id><snippet>__add__</snippet></ROW><ROW><id>3433244</id><snippet>__radd__</snippet></ROW><ROW><id>3433244</id><snippet>__mul__</snippet></ROW><ROW><id>3433244</id><snippet>__rmul__</snippet></ROW><ROW><id>3433244</id><snippet>TAG_Short</snippet></ROW><ROW><id>3433244</id><snippet>class AbstractNumberImpersonator:
    # child classes should define method .to_number()
    def __add__( self, other ):
        return self.to_number() + other
    __radd__ = __add__
    def __mul__( self, other ):
        return self.to_number() * other
    __rmul__ = __mul__
    # etc - implement all the others in the same fashion
</snippet></ROW><ROW><id>3433244</id><snippet>class TAG_Short(NBTTag,AbstractNumberImpersonator):
    def __init__(self, value=None):
        self.name = None
        self.value = value

    def __repr__(self):
        return "TAG_Short: %i" % self.value

    def to_number(self):
        return self.value
</snippet></ROW><ROW><id>3433565</id><snippet>threading.Timer</snippet></ROW><ROW><id>3433565</id><snippet>from threading import Timer

def hello():
    print "hello, world"

t = Timer(30.0, hello)
t.start() # after 30 seconds, "hello, world" will be printed
</snippet></ROW><ROW><id>3433852</id><snippet>ContentTypes</snippet></ROW><ROW><id>3433852</id><snippet>Manager.raw()</snippet></ROW><ROW><id>3433852</id><snippet>MyModel.objects.raw()</snippet></ROW><ROW><id>3433852</id><snippet>cursor</snippet></ROW><ROW><id>3433852</id><snippet>Manager.raw()</snippet></ROW><ROW><id>3433852</id><snippet>RawQuerySet</snippet></ROW><ROW><id>3433852</id><snippet>QuerySet</snippet></ROW><ROW><id>3433852</id><snippet>QuerySet</snippet></ROW><ROW><id>3433941</id><snippet>"{0}{2}{3}{1}".format(a, b, *tup)</snippet></ROW><ROW><id>3433941</id><snippet>tup</snippet></ROW><ROW><id>3433941</id><snippet>*</snippet></ROW><ROW><id>3434596</id><snippet>itsProblem</snippet></ROW><ROW><id>3434596</id><snippet>self</snippet></ROW><ROW><id>3434596</id><snippet>__init__</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    def __init__(self):
        self.itsProblem = "problem"


theExample = Example()
print(theExample.itsProblem)
</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    itsProblem = "problem"


theExample = Example()
print(theExample.itsProblem)
print (Example.itsProblem)
</snippet></ROW><ROW><id>3434596</id><snippet>theExample.itsProblem</snippet></ROW><ROW><id>3434596</id><snippet>Example.itsProblem</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    pass

Example.itsProblem = "problem"

e = Example()
e.itsSecondProblem = "problem"

print Example.itsProblem == e.itsSecondProblem 
</snippet></ROW><ROW><id>3434596</id><snippet>self</snippet></ROW><ROW><id>3434596</id><snippet>this</snippet></ROW><ROW><id>3434596</id><snippet>Self</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    def __init__(self):
        self.itsProblem = "problem"


theExample = Example()
print(theExample.itsProblem)
</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    def __init__(my_super_self):
        my_super_self.itsProblem = "problem"


theExample = Example()
print(theExample.itsProblem)
</snippet></ROW><ROW><id>3434596</id><snippet>class Example(object):
    itsProblem = "problem"


theExample = Example()
print(theExample.itsProblem)
</snippet></ROW><ROW><id>3434596</id><snippet>__init__</snippet></ROW><ROW><id>3434623</id><snippet>foreach</snippet></ROW><ROW><id>3434623</id><snippet>std::find_if</snippet></ROW><ROW><id>3434623</id><snippet>bool isAnyTrue()
{
    return std::find_if(mylist.begin(), mylist.end(), std::mem_fun(&amp;Foo::isTrue))
           != mylist.end();
}
</snippet></ROW><ROW><id>3434623</id><snippet>std::vector</snippet></ROW><ROW><id>3434623</id><snippet>std::deque</snippet></ROW><ROW><id>3434623</id><snippet>std::list</snippet></ROW><ROW><id>3434623</id><snippet>shared_ptr</snippet></ROW><ROW><id>3434623</id><snippet>//#include &lt;boost/ptr_container/indirect_fun.hpp&gt;

bool isAnyTrue()
{
    return std::find_if(mylist.begin(), mylist.end(), 
           boost::make_indirect_fun(std::mem_fun(&amp;Foo::isTrue))) != mylist.end();
}
</snippet></ROW><ROW><id>3434959</id><snippet>__getattr__</snippet></ROW><ROW><id>3434959</id><snippet>class MyClass(object):
    def create(self, itemType, itemName):
        print "Creating item %s with name %s" % (itemType, itemName)

    def __getattr__(self, attrName):
        def create_wrapper(name):
            self.create(attrName, name)
        return create_wrapper
</snippet></ROW><ROW><id>3434959</id><snippet>functools.partial</snippet></ROW><ROW><id>3434959</id><snippet>import functools

class MyClass(object):
    def create(self, itemType, itemName, *args, **kwargs):
        print "Creating item %s with name %s, args %r and kwargs %r" % (itemType, itemName, args, kwargs)

    def __getattr__(self, attrName):
        return functools.partial(self.create, attrName)

c = MyClass()
bFunc = c.B
bFunc("nameB", 1, 2, foo=3)
</snippet></ROW><ROW><id>3435392</id><snippet>i = 0
....
for i in range(nphones):
           rbuttons[i].SetLabel(voice1.phones[i].name)
           rbuttons[i].Show()

i = i + 1

rbuttons[i].SetLabel('Voicemail')
rbuttons[i].Show()
</snippet></ROW><ROW><id>3435392</id><snippet>for i in range(nphones):
           rbuttons[i].SetLabel(voice1.phones[i].name)
           rbuttons[i].Show()

vm_idx = nphones    
rbuttons[vm_idx].SetLabel('Voicemail')
rbuttons[vm_idx].Show()
</snippet></ROW><ROW><id>3435612</id><snippet>!'</snippet></ROW><ROW><id>3435612</id><snippet>'H'</snippet></ROW><ROW><id>3435612</id><snippet>'!'</snippet></ROW><ROW><id>3435612</id><snippet>'&gt;'</snippet></ROW><ROW><id>3435914</id><snippet>s = "Wouldn't it be (most) beneficial to have (at least) some idea?"
l = re.split('[()]', s);
</snippet></ROW><ROW><id>3436091</id><snippet>&lt;%inherit file="base.html"/&gt;

&lt;table&gt;
    % for row in rows:
        ${makerow(row)}
    % endfor
&lt;/table&gt;

&lt;%def name="makerow(row)"&gt;
    &lt;tr&gt;
    % for name in row:
        &lt;td&gt;${name}&lt;/td&gt;
    % endfor
    &lt;/tr&gt;
&lt;/%def&gt;
</snippet></ROW><ROW><id>3436091</id><snippet>&lt;% ... python code ... %&gt;</snippet></ROW><ROW><id>3436091</id><snippet>&lt;%</snippet></ROW><ROW><id>3436091</id><snippet>/&gt;</snippet></ROW><ROW><id>3436091</id><snippet>%&gt;</snippet></ROW><ROW><id>3436091</id><snippet>${foo}</snippet></ROW><ROW><id>3436091</id><snippet>{% extends "base.html" %}

&lt;table&gt;
  {% for row in rows %}
    {{ makerow(row) }}
  {% endfor %}
&lt;/table&gt;

{% macro make_row(row) %}
  &lt;tr&gt;
    {% for name in row %}
      &lt;td&gt;{{ name }}&lt;/td&gt;    
    {% endfor %}
  &lt;/tr&gt;
{% endmacro %}
</snippet></ROW><ROW><id>3436091</id><snippet>${user | get_name, default('No name')}
</snippet></ROW><ROW><id>3436091</id><snippet>{{ user | get_name | default('No Name') | escape }}
</snippet></ROW><ROW><id>3436091</id><snippet>{% %}</snippet></ROW><ROW><id>3436091</id><snippet>{{ }}</snippet></ROW><ROW><id>3436377</id><snippet>from time import time
start = time()
q = 2 ** 1000000000 # number literal
q += 3 &lt;&lt; 1000000000 # still a literal
print(q.__sizeof__(), time() - start)
</snippet></ROW><ROW><id>3436377</id><snippet>time</snippet></ROW><ROW><id>3436686</id><snippet>sudo apt-get remove python-beautifulsoup
</snippet></ROW><ROW><id>3436686</id><snippet>import BeautifulSoup
print BeautifulSoup.__version__
</snippet></ROW><ROW><id>3436750</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>3436750</id><snippet>O</snippet></ROW><ROW><id>3436750</id><snippet>O!</snippet></ROW><ROW><id>3436750</id><snippet>O! (object) [typeobject, PyObject *]
</snippet></ROW><ROW><id>3436750</id><snippet>(PointObject*)point</snippet></ROW><ROW><id>3436750</id><snippet>PointObject</snippet></ROW><ROW><id>3436750</id><snippet>-&gt;my_point</snippet></ROW><ROW><id>3436750</id><snippet>Point*</snippet></ROW><ROW><id>3436750</id><snippet>O</snippet></ROW><ROW><id>3436750</id><snippet>static PyObject*
set_point(PyObject* self, PyObject* args)
{
    PyObject* point; 

    if (!PyArg_ParseTuple(args, "O!", &amp;PointType, &amp;point))
    {
        return NULL;
    }

    Point* pp = ((PointObject*)point)-&gt;my_point;

    // ... use pp as the pointer to Point you were looking for...

    // ... and incidentally don't forget to return a properly incref'd
    // PyObject*, of course;-)
}
</snippet></ROW><ROW><id>3436786</id><snippet>name, attrs, recursive, text, limit</snippet></ROW><ROW><id>3436786</id><snippet>name</snippet></ROW><ROW><id>3436786</id><snippet>text</snippet></ROW><ROW><id>3436786</id><snippet>text</snippet></ROW><ROW><id>3436786</id><snippet>name</snippet></ROW><ROW><id>3436786</id><snippet>allrows = s.findAll('tr')
userrows = [t for t in allrows if t.findAll(text=re.compile('abc123123'))]
</snippet></ROW><ROW><id>3436786</id><snippet>findAll</snippet></ROW><ROW><id>3437022</id><snippet>python manage.py shell</snippet></ROW><ROW><id>3437022</id><snippet>help(management)</snippet></ROW><ROW><id>3437022</id><snippet>__init__.py</snippet></ROW><ROW><id>3437022</id><snippet>django.core.management</snippet></ROW><ROW><id>3437022</id><snippet>call_command</snippet></ROW><ROW><id>3437031</id><snippet>from pygooglechart import PieChart3D

def python_pie3D() :
  # initialize chart object, 250 x 250 pixels
  chart = PieChart3D(250, 250)

  # pass your data to the chart object
  chart.add_data([398, 294, 840, 462])

  # make labels for the slices
  chart.set_pie_labels("Lithuania Bulgaria Ukraine Romania".split())

  # render the image
  chart.download('revenue_east_europe.png')
</snippet></ROW><ROW><id>3437134</id><snippet>self.fps</snippet></ROW><ROW><id>3437134</id><snippet>1.0 / self.fps</snippet></ROW><ROW><id>3437134</id><snippet>self.frameTime</snippet></ROW><ROW><id>3437134</id><snippet>set_state(self, newState)</snippet></ROW><ROW><id>3437134</id><snippet>self.currentFrame</snippet></ROW><ROW><id>3437134</id><snippet>self.fps</snippet></ROW><ROW><id>3437134</id><snippet>update(self, dt)</snippet></ROW><ROW><id>3437134</id><snippet>1.0 / self.fps</snippet></ROW><ROW><id>3437134</id><snippet>self.frameTime</snippet></ROW><ROW><id>3437134</id><snippet>self.currentFrame</snippet></ROW><ROW><id>3437134</id><snippet>self.fps</snippet></ROW><ROW><id>3437411</id><snippet>import re
import time
import serial

def doRead(ser,term):
    matcher = re.compile(term)    #gives you the ability to search for anything
    buff    = ""
    tic     = time.clock()
    buff   += ser.read(128)
    # you can use if not ('\n' in buff) too if you don't like re
    while ((time.clock - tic) &lt; tout) and (not matcher.search(buff)):
       buff += ser.read(128)

    return buff

if __name__ == "__main__":
    ser = serial.Serial(PORT, BAUD, timeout = TOUT)
    ser.write(CMD)
    print doRead(ser,term='\n')
</snippet></ROW><ROW><id>3437466</id><snippet>Enable</snippet></ROW><ROW><id>3437466</id><snippet>Disable</snippet></ROW><ROW><id>3437468</id><snippet>from functools import wraps
import time

def timed(f):
    """Time a function."""
    @wraps(f)
    def wrapper(*args, **kwds):
        start = time.clock()
        result = f(*args)
        end = 1000 * (time.clock() - start)
        print '%s: %.3f ms' % (f.func_name, end)
        return result
    return wrapper
</snippet></ROW><ROW><id>3437468</id><snippet>@timed
def toBeTimed():
    pass
</snippet></ROW><ROW><id>3437522</id><snippet>len([phrase for phrase nltk.Chunker(sentence) if phrase[1] == 'VP'])
</snippet></ROW><ROW><id>3437833</id><snippet>os</snippet></ROW><ROW><id>3437833</id><snippet>import os
from datetime import datetime
dirname = datetime.now().strftime('%Y.%m.%d.%H.%M.%S') #2010.08.09.12.08.45 
os.mkdir(os.path.join('/opt/files', dirname))
</snippet></ROW><ROW><id>3437833</id><snippet>os.rename</snippet></ROW><ROW><id>3437833</id><snippet>gzip</snippet></ROW><ROW><id>3438048</id><snippet>type</snippet></ROW><ROW><id>3438048</id><snippet>an_object = Car(name = "foo", speed = 80)
an_object.save()
type(an_object) # &lt;class 'project.app.models.Car'&gt;
</snippet></ROW><ROW><id>3438048</id><snippet>an_object</snippet></ROW><ROW><id>3438048</id><snippet>Car</snippet></ROW><ROW><id>3438048</id><snippet>isinstance</snippet></ROW><ROW><id>3438048</id><snippet>isinstance(an_object, Car) # True
</snippet></ROW><ROW><id>3438218</id><snippet>.union()</snippet></ROW><ROW><id>3438218</id><snippet>&gt;&gt;&gt; l = [set([1,2,3]), set([4,5,6]), set([1,4,9])]
&gt;&gt;&gt; frozenset().union(*l)
frozenset([1, 2, 3, 4, 5, 6, 9])
</snippet></ROW><ROW><id>3438292</id><snippet>import locale
locale.setlocale(locale.LC_ALL, '')
</snippet></ROW><ROW><id>3438292</id><snippet>LC_TIME</snippet></ROW><ROW><id>3438292</id><snippet>import locale
locale.setlocale(locale.LC_TIME, '')
</snippet></ROW><ROW><id>3438748</id><snippet>itertools.product</snippet></ROW><ROW><id>3438748</id><snippet>import itertools
for x in itertools.product(*pathList):
    print x
</snippet></ROW><ROW><id>3438818</id><snippet>a+=['']*(N-len(a))
</snippet></ROW><ROW><id>3438818</id><snippet>a</snippet></ROW><ROW><id>3438818</id><snippet>new_a = a+['']*(N-len(a))
</snippet></ROW><ROW><id>3438818</id><snippet>N=5
class MyList(list):
    def ljust(self, n, fillvalue=''):
        return self+[fillvalue]*(N-len(self))

a=MyList(['1'])
b=a.ljust(5, '')
</snippet></ROW><ROW><id>3439142</id><snippet>computers.py</snippet></ROW><ROW><id>3439142</id><snippet>import computers
getattr( computers, "Laptop" )( &lt;params&gt; )
</snippet></ROW><ROW><id>3439142</id><snippet>computers.Laptop</snippet></ROW><ROW><id>3439142</id><snippet>globals()[ "Laptop" ]
</snippet></ROW><ROW><id>3439142</id><snippet>Laptop</snippet></ROW><ROW><id>3439142</id><snippet>mapping = { "Laptop": Laptop, "Nettop": Laptop, ... }
mapping[ "Laptop" ]()
</snippet></ROW><ROW><id>3439163</id><snippet>easy_install</snippet></ROW><ROW><id>3439163</id><snippet>greenlet</snippet></ROW><ROW><id>3439163</id><snippet>build-essential</snippet></ROW><ROW><id>3439163</id><snippet>python-all-dev</snippet></ROW><ROW><id>3439163</id><snippet>Python.h</snippet></ROW><ROW><id>3439449</id><snippet>import sys
print (sys.version)
</snippet></ROW><ROW><id>3439449</id><snippet>./fraction.py</snippet></ROW><ROW><id>3439449</id><snippet>#!/usr/bin/env python3.1
</snippet></ROW><ROW><id>3439953</id><snippet>import numpy as np
import matplotlib.pyplot as plt

e = np.e
X, Y = np.meshgrid(np.linspace(0, 5, 100), np.linspace(0, 5, 100))
F = X ** Y
G = Y ** X

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
circ = plt.Circle((e, e), radius=0.07, color='g')
plt.contour(X, Y, (F - G), [0])
ax.add_patch(circ)
plt.show()
</snippet></ROW><ROW><id>3439953</id><snippet>plot</snippet></ROW><ROW><id>3439953</id><snippet>import numpy as np
import matplotlib.pyplot as plt

e = np.e
X, Y = np.meshgrid(np.linspace(0, 5, 100), np.linspace(0, 5, 100))
F = X ** Y
G = Y ** X

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
plt.contour(X, Y, (F - G), [0])
plt.plot([e], [e], 'g.', markersize=20.0)
plt.show()
</snippet></ROW><ROW><id>3440393</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>3440393</id><snippet>from refunc import *

pattern = Compile(
    'a',
    Capture(
        Choices('b', 'c'),
        N_of( 'd', 1, Infin() ),
        N_of( 'e', 0, Infin() ),
    ),
    Look_ahead('foo'),
)
</snippet></ROW><ROW><id>3440393</id><snippet>+</snippet></ROW><ROW><id>3440393</id><snippet>pattern = Compile(
    'a',
    Capture(
        '[bc]',
        'd+',
        'e*',
    ),
    Look_ahead('foo'),
)
</snippet></ROW><ROW><id>3440570</id><snippet>groupby</snippet></ROW><ROW><id>3440570</id><snippet>raw</snippet></ROW><ROW><id>3440570</id><snippet>for key, grp in itertools.groupby(sorted(raw), key=operator.itemgetter(0)):
    print key, map(operator.itemgetter(1), grp)

# 1 ['one', 'one']
# 2 ['two', 'two']
# 3 ['three']
</snippet></ROW><ROW><id>3441004</id><snippet>*args</snippet></ROW><ROW><id>3441004</id><snippet>import types
def handle(self, *args, **options):
    if not args:
       do_something()
    # check if everything in args is a Int
    elif all( isinstance(s, types.IntType) for s in args):
       do_some_ather_thing()
    # as before with strings
    elif all( isinstance(s, types.StringTypes) for s in args):
       do_totally_different_thing()
</snippet></ROW><ROW><id>3441004</id><snippet>types.StringTypes</snippet></ROW><ROW><id>3441004</id><snippet>types</snippet></ROW><ROW><id>3441004</id><snippet>isinstance(s, int)</snippet></ROW><ROW><id>3441004</id><snippet>isinstance(s, str)</snippet></ROW><ROW><id>3441295</id><snippet>startswith</snippet></ROW><ROW><id>3441295</id><snippet>top_path = '/A/B'
for p in d.iterkeys():
    if p.startswith(top_path):
        print d[p]
</snippet></ROW><ROW><id>3441388</id><snippet>TypeError</snippet></ROW><ROW><id>3441799</id><snippet>Inline::Python</snippet></ROW><ROW><id>3442046</id><snippet>lxml.etree</snippet></ROW><ROW><id>3442046</id><snippet>xpath</snippet></ROW><ROW><id>3442046</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; doc = etree.HTML("""&lt;html&gt;
... &lt;head&gt;&lt;/head&gt;
... &lt;body&gt;
... &lt;tr&gt;
... &lt;td class="or_q_artist"&gt;&lt;a title="[Artist916]" href="http://rateyourmusic.com/artist/ac_dc" class="artist"&gt;AC/DC&lt;/a&gt;&lt;/td&gt;
... &lt;td class="or_q_album"&gt;&lt;a title="[Album374717]" href="http://rateyourmusic.com/release/album/ac_dc/live_f5/" class="album"&gt;Live&lt;/a&gt;&lt;/td&gt;
... &lt;td class="or_q_rating" id="rating374717"&gt;4.0&lt;/td&gt;&lt;td class="or_q_ownership" id="ownership374717"&gt;CD&lt;/td&gt;
... &lt;td class="or_q_tags_td"&gt;
... &lt;/tr&gt;
... &lt;/body&gt;
... &lt;/html&gt;
... """)
&gt;&gt;&gt; doc.xpath('//td[@class="or_q_artist"]/a/text()|//td[@class="or_q_album"]/a/text()')
['AC/DC', 'Live']
</snippet></ROW><ROW><id>3442077</id><snippet>last_insert_rowid()</snippet></ROW><ROW><id>3442077</id><snippet>g.db.lastrowid</snippet></ROW><ROW><id>3442258</id><snippet>registration/login.html</snippet></ROW><ROW><id>3442258</id><snippet>'{{ next }}</snippet></ROW><ROW><id>3442258</id><snippet>&lt;input type="submit" value="login" /&gt;
&lt;input type="hidden" name="next" value="/gallery/" /&gt;
</snippet></ROW><ROW><id>3442258</id><snippet>/gallery/</snippet></ROW><ROW><id>3442258</id><snippet>@permission_required</snippet></ROW><ROW><id>3442258</id><snippet>@login_required</snippet></ROW><ROW><id>3442258</id><snippet>@login_required
def gallery(request):
    url = '/gallery/%s/' % request.user.username
    return HttpResponseRedirect(url)
</snippet></ROW><ROW><id>3442343</id><snippet>self.cursor.commit()</snippet></ROW><ROW><id>3442343</id><snippet>self.cursor.executemany("INSERT INTO reel (etime,etext) VALUES (%s,%s)", tups)</snippet></ROW><ROW><id>3442367</id><snippet>str</snippet></ROW><ROW><id>3442544</id><snippet>secure_required</snippet></ROW><ROW><id>3442557</id><snippet>wsgiref</snippet></ROW><ROW><id>3442557</id><snippet>return page
</snippet></ROW><ROW><id>3442557</id><snippet>return [page.encode('utf-8')]
</snippet></ROW><ROW><id>3442557</id><snippet>[]</snippet></ROW><ROW><id>3442741</id><snippet>try:
  connection.test.foo.find_one()
except pymongo.errors.OperationFailure:
  print "caught"
</snippet></ROW><ROW><id>3442919</id><snippet>myprogram.py</snippet></ROW><ROW><id>3442919</id><snippet>foo</snippet></ROW><ROW><id>3442919</id><snippet>import foo
</snippet></ROW><ROW><id>3442919</id><snippet>foo.py</snippet></ROW><ROW><id>3442919</id><snippet>myprogram.py</snippet></ROW><ROW><id>3442919</id><snippet>foo</snippet></ROW><ROW><id>3442919</id><snippet>__init__.py</snippet></ROW><ROW><id>3442919</id><snippet>.py</snippet></ROW><ROW><id>3442919</id><snippet>.pyc</snippet></ROW><ROW><id>3442919</id><snippet>myprogram.py</snippet></ROW><ROW><id>3442947</id><snippet>from SOAPpy import *

def hello(_SOAPContext = None):
    return "Your IP address is %s" % _SOAPContext.connection.getpeername()[0]

if __name__ == "__main__":
  server = SOAPServer( ( '10.3.40.104', 8080 ) )
  server.registerFunction( MethodSig(hello, keywords=0, context=1) )
  server.serve_forever()
</snippet></ROW><ROW><id>3443018</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>3443018</id><snippet>set_trace</snippet></ROW><ROW><id>3443018</id><snippet>import code
code.interact(local=locals())
</snippet></ROW><ROW><id>3443018</id><snippet>import IPython.Shell 
ipshell = IPython.Shell.IPShellEmbed()
ipshell(local_ns=locals())
</snippet></ROW><ROW><id>3443166</id><snippet>__add__</snippet></ROW><ROW><id>3443166</id><snippet>__div__</snippet></ROW><ROW><id>3443166</id><snippet>__ge__</snippet></ROW><ROW><id>3443166</id><snippet>__getattribute__</snippet></ROW><ROW><id>3443166</id><snippet>__getattr__</snippet></ROW><ROW><id>3443166</id><snippet>__delattr__</snippet></ROW><ROW><id>3443166</id><snippet>__getattr__</snippet></ROW><ROW><id>3443166</id><snippet>__getattribute__</snippet></ROW><ROW><id>3443267</id><snippet>views.py</snippet></ROW><ROW><id>3443267</id><snippet>urls.py</snippet></ROW><ROW><id>3443267</id><snippet>include</snippet></ROW><ROW><id>3443267</id><snippet>views</snippet></ROW><ROW><id>3443267</id><snippet>__init__.py</snippet></ROW><ROW><id>3443287</id><snippet>def get_option(field_type):
    options = {
        'artifact': forms.BooleanField,
       'environment': forms.Choice Field,
    }

return options[field_type](label='blah')
</snippet></ROW><ROW><id>3443301</id><snippet>numpy.frompyfunc</snippet></ROW><ROW><id>3443301</id><snippet>kl</snippet></ROW><ROW><id>3443301</id><snippet>kl_ufunc = numpy.frompyfunc(kl, 4, 1)
...
z = kl_ufunc(x + 1.0, y + 1.0, myA, myB)
</snippet></ROW><ROW><id>3443301</id><snippet>kl</snippet></ROW><ROW><id>3443301</id><snippet>kl_ufunc</snippet></ROW><ROW><id>3443301</id><snippet>kl</snippet></ROW><ROW><id>3443396</id><snippet>data</snippet></ROW><ROW><id>3443396</id><snippet>raw_post_data</snippet></ROW><ROW><id>3443825</id><snippet>&lt;body onload="javascript:getContent('aerosmith', 'crazy', '1281384888', '0475352e376cf1c3906afd8ec1b8ac70')"&gt; 
</snippet></ROW><ROW><id>3443924</id><snippet>survfit</snippet></ROW><ROW><id>3443924</id><snippet>library(survival)
x &lt;- rexp(10)
ev &lt;- rep(1, length(x))
sf &lt;- survfit(Surv(x,ev)~1)
</snippet></ROW><ROW><id>3443924</id><snippet>&gt;summary(sf)
Call: survfit(formula = Surv(x, ev) ~ 1)

     time n.risk n.event survival std.err lower 95% CI upper 95% CI
-1.4143     10       1      0.9  0.0949       0.7320        1.000
-1.1229      9       1      0.8  0.1265       0.5868        1.000
-0.9396      8       1      0.7  0.1449       0.4665        1.000
-0.4413      7       1      0.6  0.1549       0.3617        0.995
-0.2408      6       1      0.5  0.1581       0.2690        0.929
-0.1698      5       1      0.4  0.1549       0.1872        0.855
 0.0613      4       1      0.3  0.1449       0.1164        0.773
 0.1983      3       1      0.2  0.1265       0.0579        0.691
 0.5199      2       1      0.1  0.0949       0.0156        0.642
 0.8067      1       1      0.0     NaN           NA           NA
</snippet></ROW><ROW><id>3443924</id><snippet>survfit</snippet></ROW><ROW><id>3443924</id><snippet>&gt;sf
Call: survfit(formula = Surv(x, ev) ~ 1)

records   n.max n.start  events  median 0.95LCL 0.95UCL 
 10.000  10.000  10.000  10.000  -0.205  -0.940      NA 
</snippet></ROW><ROW><id>3443924</id><snippet>survival:::survmean</snippet></ROW><ROW><id>3444141</id><snippet>myLoopFN</snippet></ROW><ROW><id>3444141</id><snippet>import new
b.loopFN = new.instancemethod( myLoopFN, b, A )
</snippet></ROW><ROW><id>3444141</id><snippet>myLoopFN</snippet></ROW><ROW><id>3444141</id><snippet>A</snippet></ROW><ROW><id>3444141</id><snippet>A</snippet></ROW><ROW><id>3444141</id><snippet>loopFN</snippet></ROW><ROW><id>3444141</id><snippet>A</snippet></ROW><ROW><id>3444141</id><snippet>class myA( A ):
    def loopFN(self):
        #put modified function here
</snippet></ROW><ROW><id>3444141</id><snippet>__mess</snippet></ROW><ROW><id>3444141</id><snippet>__</snippet></ROW><ROW><id>3444141</id><snippet>_&lt;class-name&gt;__</snippet></ROW><ROW><id>3444141</id><snippet>__mess</snippet></ROW><ROW><id>3444141</id><snippet>mess</snippet></ROW><ROW><id>3444141</id><snippet>__mess</snippet></ROW><ROW><id>3444141</id><snippet>def myFN(self):
    print( self._A__mess )
</snippet></ROW><ROW><id>3444443</id><snippet>reactor.callLater(0, x)</snippet></ROW><ROW><id>3444443</id><snippet>reactor.callFromThread(x)</snippet></ROW><ROW><id>3444987</id><snippet>import unittest

class Test(unittest.TestCase):
    def setUp(self):
        print 'Setting Up'

    def test1(self):
        print 'In test1'
        self.test2()

    def test2(self):
        print 'In test2'

    def tearDown(self):
        print 'Tearing Down'

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>3444987</id><snippet>Setting Up
In test1
In test2
Tearing Down
.Setting Up
In test2
Tearing Down
.
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>3444987</id><snippet>setUp</snippet></ROW><ROW><id>3444987</id><snippet>tearDown</snippet></ROW><ROW><id>3445079</id><snippet>with open("data.txt") as f:
  filecontents = simplejson.load(f)
</snippet></ROW><ROW><id>3445079</id><snippet>simplejson</snippet></ROW><ROW><id>3445079</id><snippet>json</snippet></ROW><ROW><id>3445079</id><snippet>json</snippet></ROW><ROW><id>3445079</id><snippet>simplejson</snippet></ROW><ROW><id>3445079</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; simplejson = json
&gt;&gt;&gt; f = open("data.txt","w")
&gt;&gt;&gt; l = ["a","b","c"]
&gt;&gt;&gt; simplejson.dump(l,f)
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; with open("data.txt") as f: fc = simplejson.load(f)
... 
&gt;&gt;&gt; fc
[u'a', u'b', u'c']
&gt;&gt;&gt; fc.append("d")
&gt;&gt;&gt; fc
[u'a', u'b', u'c', 'd']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3445079</id><snippet>import simplejson</snippet></ROW><ROW><id>3445079</id><snippet>simplejson</snippet></ROW><ROW><id>3445098</id><snippet>get_session</snippet></ROW><ROW><id>3445098</id><snippet>__init__</snippet></ROW><ROW><id>3445098</id><snippet>Grooveshark</snippet></ROW><ROW><id>3445117</id><snippet>py2exe</snippet></ROW><ROW><id>3445117</id><snippet>PyInstaller</snippet></ROW><ROW><id>3445216</id><snippet>sudo apt-get remove --purge xserver-xorg</snippet></ROW><ROW><id>3445216</id><snippet>sudo apt-get install xserver-xorg</snippet></ROW><ROW><id>3445216</id><snippet>sudo dpkg-reconfigure xserver-xorg</snippet></ROW><ROW><id>3445621</id><snippet>from cStringIO import StringIO
img_temp = StringIO()
inImage.save(fh, 'PNG')
img_temp.seek(0)

file_object = File(img_temp, filename)
</snippet></ROW><ROW><id>3446055</id><snippet>from xml.etree import ElementTree as ET

xml = '&lt;root&gt;start here&lt;child1&gt;some text&lt;sub1/&gt;here&lt;/child1&gt;and&lt;child2&gt;here as well&lt;sub2/&gt;&lt;sub3/&gt;&lt;/child2&gt;end here&lt;/root&gt;'
root = ET.fromstring(xml)

def content(tag):
    return tag.text + ''.join(ET.tostring(e) for e in tag)

print content(root)
print content(root.find('child2'))
</snippet></ROW><ROW><id>3446055</id><snippet>start here&lt;child1&gt;some text&lt;sub1 /&gt;here&lt;/child1&gt;and&lt;child2&gt;here as well&lt;sub2 /&gt;&lt;sub3 /&gt;&lt;/child2&gt;end here
here as well&lt;sub2 /&gt;&lt;sub3 /&gt;
</snippet></ROW><ROW><id>3446945</id><snippet>patterns = [
  "Case Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\"Value\"&gt;([^&lt;]*?)&lt;",
  "Citation Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\"Value\"&gt;([^&lt;]*?)&lt;",
  "Citation Number:&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=\"Value\"&gt;([^&lt;]*?)&lt;"   # same as #2?
]
text = br.response().read()
case_no  = "N/A"
for pattern in patterns:
  res = re.search(pattern, text)
  if res:
    case_no = res.group(1)
    break
</snippet></ROW><ROW><id>3447176</id><snippet>x.__len__()</snippet></ROW><ROW><id>3447176</id><snippet>len(x)</snippet></ROW><ROW><id>3447176</id><snippet>len</snippet></ROW><ROW><id>3447176</id><snippet>int</snippet></ROW><ROW><id>3447176</id><snippet>__len__</snippet></ROW><ROW><id>3447176</id><snippet>sys.maxsize</snippet></ROW><ROW><id>3447176</id><snippet>long</snippet></ROW><ROW><id>3447176</id><snippet>&gt;&gt;&gt; class A(object):
...     def __len__(self):
...         return 2**80
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; len(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: long int too large to convert to int
&gt;&gt;&gt; a.__len__()
1208925819614629174706176L
</snippet></ROW><ROW><id>3447176</id><snippet>len</snippet></ROW><ROW><id>3447509</id><snippet>+</snippet></ROW><ROW><id>3447509</id><snippet>__add__</snippet></ROW><ROW><id>3447509</id><snippet>+=</snippet></ROW><ROW><id>3447509</id><snippet>__iadd__</snippet></ROW><ROW><id>3447509</id><snippet>__add__</snippet></ROW><ROW><id>3447509</id><snippet>__iadd__</snippet></ROW><ROW><id>3447509</id><snippet>__add__</snippet></ROW><ROW><id>3447509</id><snippet>__iadd__</snippet></ROW><ROW><id>3447745</id><snippet>datetime</snippet></ROW><ROW><id>3447745</id><snippet>datetime</snippet></ROW><ROW><id>3447745</id><snippet>strptime</snippet></ROW><ROW><id>3447745</id><snippet>strptime</snippet></ROW><ROW><id>3447745</id><snippet>&gt;&gt;&gt; time = "20100629T110000"
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; line_time = datetime.strptime(time, "%Y%m%dT%H%M%S")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'strptime'
&gt;&gt;&gt; line_time = datetime.datetime.strptime(time, "%Y%m%dT%H%M%S")
&gt;&gt;&gt; line_time
datetime.datetime(2010, 6, 29, 11, 0)
</snippet></ROW><ROW><id>3447745</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3447745</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; line_time = datetime.strptime(time, "%Y%m%dT%H%M%S")
&gt;&gt;&gt; line_time
datetime.datetime(2010, 6, 29, 11, 0)
</snippet></ROW><ROW><id>3447745</id><snippet>%Y%D%MT%H%M%S</snippet></ROW><ROW><id>3447745</id><snippet>%Y%m%dT%H%M%S</snippet></ROW><ROW><id>3447907</id><snippet>origin.py | process1.py | process2.py | process3.py
</snippet></ROW><ROW><id>3447907</id><snippet>def transform1( piece ):
    Some transformation or calculation.
</snippet></ROW><ROW><id>3447907</id><snippet>def t1( iterable ):
    for piece in iterable:
        more_data = transform1( piece )
        yield NewNamedTuple( piece, more_data )
</snippet></ROW><ROW><id>3447907</id><snippet>for x in t1( t2( t3( the_whole_structure ) ) ):
    print( x )
</snippet></ROW><ROW><id>3447907</id><snippet>while True:
    a_piece = pickle.load(sys.stdin)
    more_data = transform1( a_piece )
    pickle.dump( NewNamedTuple( piece, more_data ) )
</snippet></ROW><ROW><id>3448071</id><snippet>@app.route('/upload_file', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        file = request.files.get('file')
        if file:
            mimetype = file.content_type
            filename = werkzeug.secure_filename(file.filename)
            file.save(os.path.join(UPLOAD_FOLDER, filename)
            return redirect(url_for('uploaded_file'))
        else:
            return redirect(url_for('upload'))
</snippet></ROW><ROW><id>3448260</id><snippet>else</snippet></ROW><ROW><id>3448260</id><snippet>if (alist == []):
    yield []
else:
    for ...
</snippet></ROW><ROW><id>3448260</id><snippet>yield</snippet></ROW><ROW><id>3448260</id><snippet>return</snippet></ROW><ROW><id>3448260</id><snippet>yield</snippet></ROW><ROW><id>3448407</id><snippet>10
+---------------------------+
|                           |
|                           |
|                           |
|                           |
|                           |
|       4_                  |
|       | |                 |
|  2_   | |                 |
|  | |  | |                 |
|  | |  | |                 |
+---------------------------+ 10
</snippet></ROW><ROW><id>3448407</id><snippet>10
+---------------------------+
|                           |
|                           |
|                 7_        |
|                 | |       |
|                 | |       |
|       4_        | |       |
|       | |  3_   | |       |
|  2_   | |  | |  | |       |
|  | |  | |  | |  | |       |
|  | |  | |  | |  | |       |
+---------------------------+ 10
</snippet></ROW><ROW><id>3448407</id><snippet>import matplotlib
matplotlib.use('GTKAgg')

import matplotlib.pyplot as plt
import gobject

fig = plt.figure()
ax = fig.add_subplot(111)

def draw1():
    plt.bar(0,2)
    plt.bar(2,4)
    ax.set_xlim((0,10))
    ax.set_ylim((0,10))
    fig.canvas.draw()
    return False

def draw2():
    plt.bar(4,3)
    plt.bar(6,7)

    ax.set_xlim((0,10))
    ax.set_ylim((0,10))
    fig.canvas.draw()
    return False

draw1()
gobject.timeout_add(1000, draw2)
plt.show()
</snippet></ROW><ROW><id>3448824</id><snippet>QtNetwork.QSslSocket.supportsSsl()
</snippet></ROW><ROW><id>3449379</id><snippet>strip()</snippet></ROW><ROW><id>3449379</id><snippet>\n</snippet></ROW><ROW><id>3449379</id><snippet>fscript.write (("update %s va set %s = %s where %s = %s;") % (argv[1],argv[2],vl[0],argv[3],vl[1].strip()))
</snippet></ROW><ROW><id>3449408</id><snippet>print mail</snippet></ROW><ROW><id>3449408</id><snippet>email.message.Message</snippet></ROW><ROW><id>3449408</id><snippet>mail.get_payload()[ 0 ].get_payload()
</snippet></ROW><ROW><id>3449423</id><snippet>text.count('\n',0,pos)</snippet></ROW><ROW><id>3449423</id><snippet>grep</snippet></ROW><ROW><id>3449439</id><snippet>from django.template import Library, Node, TemplateSyntaxError
from django.utils.encoding import smart_unicode

register = Library()

class FirstNotNoneNode(Node):
    def __init__(self, vars):
        self.vars = vars

    def render(self, context):
        for var in self.vars:
            value = var.resolve(context, True)
            if value is not None:
                return smart_unicode(value)
        return u''

def firstnotnone(parser,token):
    """
    Outputs the first variable passed that is not None
    """
    bits = token.split_contents()[1:]
    if len(bits) &lt; 1:
        raise TemplateSyntaxError("'firstnotnone' statement requires at least one argument")
    return FirstNotNoneNode([parser.compile_filter(bit) for bit in bits])

firstnotnone = register.tag(firstnotnone)
</snippet></ROW><ROW><id>3449551</id><snippet>.getlist('objarrid')</snippet></ROW><ROW><id>3449973</id><snippet>struct statvfs</snippet></ROW><ROW><id>3449973</id><snippet>echo '#include &lt;sys/statvfs.h&gt;' | gcc -E - | less
</snippet></ROW><ROW><id>3449973</id><snippet>/struct statvfs&lt;enter&gt;</snippet></ROW><ROW><id>3450273</id><snippet>isSpeltCorrectly</snippet></ROW><ROW><id>3450273</id><snippet>set</snippet></ROW><ROW><id>3450273</id><snippet>O(log N)</snippet></ROW><ROW><id>3450273</id><snippet>set</snippet></ROW><ROW><id>3450448</id><snippet>whois</snippet></ROW><ROW><id>3450448</id><snippet>r = subprocess.Popen(['whois', domain], stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>3450448</id><snippet>whois</snippet></ROW><ROW><id>3450643</id><snippet>myos.chown</snippet></ROW><ROW><id>3450643</id><snippet>os.chown</snippet></ROW><ROW><id>3450643</id><snippet>myown</snippet></ROW><ROW><id>3450656</id><snippet>FTPClient</snippet></ROW><ROW><id>3450656</id><snippet>twisted.protocols.ftp</snippet></ROW><ROW><id>3450656</id><snippet>FileConsumer</snippet></ROW><ROW><id>3450656</id><snippet>retrieveFile</snippet></ROW><ROW><id>3450656</id><snippet>IProtocol</snippet></ROW><ROW><id>3450656</id><snippet>twisted.internet.protocol.ConsumerToProtocolAdapter</snippet></ROW><ROW><id>3450656</id><snippet>unregisterProducer</snippet></ROW><ROW><id>3450656</id><snippet>FileConsumer</snippet></ROW><ROW><id>3450656</id><snippet>FileConsumer</snippet></ROW><ROW><id>3450656</id><snippet>addCallback</snippet></ROW><ROW><id>3450656</id><snippet>from twisted.python import log
from twisted.internet import interfaces
from zope.interface import implements

class FTPFile(object):
    """
    A consumer for FTP input that writes data to a file.

    @ivar filename: a filename to be opened for writing.
    """

    implements(interfaces.IProtocol)

    def __init__(self, filename):
        self.fObj = None
        self.filename = filename

    def makeConnection(self,transport)
        self.fObj = open(self.filename,'wb')
        log.info('Opened %s for writing' % self.filename)

    def connectionLost(self,reason):
        self.fObj.close()
        log.info('Closed %s' % self.filename)

    def dataReceived(self, bytes):
        self.fObj.write(bytes)
</snippet></ROW><ROW><id>3450682</id><snippet>IncludeTimeValue</snippet></ROW><ROW><id>3450682</id><snippet>Value</snippet></ROW><ROW><id>3450682</id><snippet>&lt;Value Type="DateTime" IncludeTimeValue="TRUE"&gt;[Now+2Minute(s)]&lt;/Value&gt;
</snippet></ROW><ROW><id>3451016</id><snippet>  def OnInit(self):
    # Check for a running instance for this user.  Do not instantiate if found.
    if self.checkInstance():
      dbcon.cursor().callproc('post_mutex', (self.mutexname,))
      dbcon.commit()
      self.Cleanup()
      return False

    # Register for database events.
    DataCache['dbListener'] = dbListener()

    return True
</snippet></ROW><ROW><id>3451052</id><snippet>rand_num = random.random()
entity = MyModel.all().order('rand_num').filter('rand_num &gt;=', rand_num).get()
if entity is None:
  entity = MyModel.all().order('rand_num').get()
</snippet></ROW><ROW><id>3451150</id><snippet>zip_ref = zipfile.ZipFile(path_to_zip_file, 'r')
zip_ref.extractall(directory_to_extract_to)
zip_ref.close()
</snippet></ROW><ROW><id>3451332</id><snippet>def view1(request, form_class=MyForm, template_name='myapp/page.html'):
    # app code here
    this_url = reverse('view1')
    render_to_response(template_name, locals(), RequestContext(request))

def view2(request, form_class=MyForm, template_name='myapp/page.html'):
    # app code here
    this_url = reverse('view2')
    render_to_response(template_name, locals(), RequestContext(request))
</snippet></ROW><ROW><id>3451332</id><snippet>myapp/page.html</snippet></ROW><ROW><id>3451332</id><snippet>&lt;a href="{{ this_url }}"&gt;Webpage&lt;/a&gt;
</snippet></ROW><ROW><id>3451332</id><snippet>dynurl</snippet></ROW><ROW><id>3451332</id><snippet>def view2(request, form_class=MyForm, template_name='myapp/page2.html'):
    # app code here
    this_view = 'view2'
    render_to_response(template_name, locals(), RequestContext(request))
</snippet></ROW><ROW><id>3451332</id><snippet>myapp/page.html</snippet></ROW><ROW><id>3451332</id><snippet>{% load dynurl_tags %}
&lt;a href="{% dynurl this_view %}"&gt;Webpage&lt;/a&gt;
</snippet></ROW><ROW><id>3451332</id><snippet>&lt;a href=""&gt;technically this points back to the same page&lt;/a&gt;
&lt;a href="{{ request.path }}"&gt;this url is the full path before the query string&lt;/a&gt;
&lt;a href="{{ request.get_full_path }}"&gt;this url is the full path plus the query string&lt;/a&gt;
</snippet></ROW><ROW><id>3451332</id><snippet>{% groupurl %}</snippet></ROW><ROW><id>3451530</id><snippet>PUT</snippet></ROW><ROW><id>3451530</id><snippet>POST</snippet></ROW><ROW><id>3451530</id><snippet>_id</snippet></ROW><ROW><id>3451530</id><snippet>_rev</snippet></ROW><ROW><id>3451651</id><snippet>def myfunc(somevar = None):
    if somevar is None:
        print globals().get('somevar')
    else:
        print somevar
</snippet></ROW><ROW><id>3451651</id><snippet>mufunc</snippet></ROW><ROW><id>3451651</id><snippet>myfunc</snippet></ROW><ROW><id>3452064</id><snippet>PyCStructType_Type</snippet></ROW><ROW><id>3452064</id><snippet>Structure</snippet></ROW><ROW><id>3452064</id><snippet>class</snippet></ROW><ROW><id>3452064</id><snippet>__new__</snippet></ROW><ROW><id>3452064</id><snippet>Structure</snippet></ROW><ROW><id>3452064</id><snippet>ctypes</snippet></ROW><ROW><id>3452064</id><snippet>A_STRUCT</snippet></ROW><ROW><id>3452064</id><snippet>A_STRUCT</snippet></ROW><ROW><id>3452152</id><snippet>ftp.set_pasv(True)</snippet></ROW><ROW><id>3452300</id><snippet>import time
log = '16/Jan/2010:18:11:06 +0100'
dt = time.strptime(log, '%d/%b/%Y:%H:%M:%S +0100')
</snippet></ROW><ROW><id>3452347</id><snippet>lista</snippet></ROW><ROW><id>3452347</id><snippet>[['apple','car','red'],['orange','boat','black']]</snippet></ROW><ROW><id>3452347</id><snippet>k</snippet></ROW><ROW><id>3452347</id><snippet>,</snippet></ROW><ROW><id>3452347</id><snippet>for k in lista:
    pad_file.write(','.join(k))
    pad_file.write('\n')
</snippet></ROW><ROW><id>3452347</id><snippet>lista</snippet></ROW><ROW><id>3452347</id><snippet>['apple, 'car', 'red', 'orange', 'boat', 'black']</snippet></ROW><ROW><id>3452347</id><snippet>for</snippet></ROW><ROW><id>3452347</id><snippet>for k in [lista[x:x+3] for x in xrange(0, len(lista), 3)]:
    pad_file.write(','.join(k))
    pad_file.write('\n')
</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>Deferred</snippet></ROW><ROW><id>3452525</id><snippet>IProtocol.connectionLost</snippet></ROW><ROW><id>3452525</id><snippet>ClientFactory.clientConnectionFailed</snippet></ROW><ROW><id>3452525</id><snippet>Failure(ConnectionDone)</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>Failure(ConnectionDone())</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>Failure()</snippet></ROW><ROW><id>3452525</id><snippet>except</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>3452525</id><snippet>Failure</snippet></ROW><ROW><id>3452525</id><snippet>raise SomeException(...)</snippet></ROW><ROW><id>3452599</id><snippet>FindFocus()</snippet></ROW><ROW><id>3452833</id><snippet>Content-Type:</snippet></ROW><ROW><id>3452838</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>3452838</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>3452838</id><snippet>-rpath</snippet></ROW><ROW><id>3452838</id><snippet>-Wl</snippet></ROW><ROW><id>3452838</id><snippet>g++ -Wall -Wextra -Wl,-rpath /path/to/boost -L /path/to/boost -lboost_python ...
</snippet></ROW><ROW><id>3452924</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>3452924</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.list_ctrl_1, 1, wx.EXPAND, 0)
        self.list_ctrl_1.InsertColumn(0,"1")
        self.list_ctrl_1.InsertStringItem(0,"HELLO1")
        self.list_ctrl_1.InsertStringItem(0,"HELLO2")
        self.list_ctrl_1.InsertStringItem(0,"HELLO3")
        self.list_ctrl_1.InsertStringItem(0,"HELLO4")
        self.list_ctrl_1.InsertStringItem(0,"HELLO5")
        self.list_ctrl_1.InsertStringItem(0,"HELLO6")
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnItemDeselected, self.list_ctrl_1)
        self.dirty = False
    def Cleanup(self, StringToPrint):
        print 'No Longer Dirty!'
        self.dirty = False

    def OnItemSelected(self,event):
        print str(self.__class__) + " - OnItemSelected"
        if not self.dirty:
            self.dirty = True
            wx.CallAfter(self.Cleanup)
        event.Skip()

    def OnItemDeselected(self,event):
        print str(self.__class__) + " - OnItemDeselected"
        if not self.dirty:
            self.dirty = True
            wx.CallAfter(self.Cleanup)
        event.Skip()

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3453038</id><snippet>wx.ProgressDialog</snippet></ROW><ROW><id>3453038</id><snippet>ProgressDialog</snippet></ROW><ROW><id>3453038</id><snippet>wx.Dialog</snippet></ROW><ROW><id>3453038</id><snippet>wx.Gauge</snippet></ROW><ROW><id>3453265</id><snippet>_sections</snippet></ROW><ROW><id>3453265</id><snippet>config._sections[new_name] = config._sections[old_name]; config._sections.pop(old_name)</snippet></ROW><ROW><id>3453277</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; from email import utils
&gt;&gt;&gt; nowdt = datetime.datetime.now()
&gt;&gt;&gt; nowtuple = nowdt.timetuple()
&gt;&gt;&gt; nowtimestamp = time.mktime(nowtuple)
&gt;&gt;&gt; utils.formatdate(nowtimestamp)
'Tue, 10 Aug 2010 20:43:53 -0000'
</snippet></ROW><ROW><id>3453277</id><snippet>email.utils.formatdate</snippet></ROW><ROW><id>3453277</id><snippet>datetime</snippet></ROW><ROW><id>3453277</id><snippet>timetuple</snippet></ROW><ROW><id>3453277</id><snippet>time.mktime</snippet></ROW><ROW><id>3453311</id><snippet>class DerivedAgent(Agent):
    __states__ = ['StateA', 'StateB', ...]
</snippet></ROW><ROW><id>3453311</id><snippet>class AgentMeta(type):
    def __new__(meta, classname, bases, classdict):
        for clsname in classdict['__states__']:
            classdict[clsname] = type(clsname, (State,), {})
        return type.__new__(meta, classname, bases, classdict))
</snippet></ROW><ROW><id>3453311</id><snippet>Agent</snippet></ROW><ROW><id>3453311</id><snippet>#python3.x
class Agent(Base1, Base2, ..., BaseN, metaclass=AgentMeta):
    #everything else unchanged

# 2.2 &lt;= python &lt;= 2.7 
class Agent(Base1, Base2, ..., BaseN):
    __metaclass__ = AgentMeta
    #everything else unchanged
</snippet></ROW><ROW><id>3453311</id><snippet>Agent</snippet></ROW><ROW><id>3453351</id><snippet>if make_directories:
    for car in cars:
        carpath = os.path.join(outer_dir, car)
        os.makedirs(carpath)
        for fn in textfiles:
            filepath = os.path.join(carpath, fn)
            #... use filepath ...
</snippet></ROW><ROW><id>3453383</id><snippet>import sqlite3
conn = sqlite3.connect('single.db')
cur = conn.cursor()
cur.execute("""create table test(
f1 text,
f2 text,
f3 text,
f4 text,
f5 text,
f6 text,
f7 text,
f8 text,
f9 text,
f10 text,
f11 text,
f12 text,
f13 text,
f14 text,
f15 text,
primary key(f1,  f2,  f3,  f4,  f5,  f6,  f7,  
            f8,  f9,  f10,  f11,  f12,  f13,  f14,  f15))
"""
conn.commit()

#simplified/pseudo code
for row in reader:
    #assuming row returns a list-type object
    try:
        cur.execute('''insert into test values(?, ?, ?, ?, ?, ?, ?, 
                       ?, ?, ?, ?, ?, ?, ?, ?)''', row)
        conn.commit()
    except IntegrityError:
        pass

conn.commit()
cur.execute('select * from test')

for row in cur:
    #write row to csv file
</snippet></ROW><ROW><id>3453432</id><snippet>write</snippet></ROW><ROW><id>3453432</id><snippet>p.stdin</snippet></ROW><ROW><id>3453432</id><snippet>flush</snippet></ROW><ROW><id>3453432</id><snippet>stdout=</snippet></ROW><ROW><id>3453432</id><snippet>Popen</snippet></ROW><ROW><id>3453432</id><snippet>pexpect</snippet></ROW><ROW><id>3453432</id><snippet>wexpect</snippet></ROW><ROW><id>3453527</id><snippet>import matplotlib
matplotlib.use('GTK')  # Or any other X11 back-end
</snippet></ROW><ROW><id>3453527</id><snippet>use()</snippet></ROW><ROW><id>3453753</id><snippet>import datetime as dt
import dateutil.parser as dparser

date_str='on Jun 03, 02010 at 10:22PM'
date=dparser.parse(date_str)
print(date)
# 2010-06-03 22:22:00
print(date.strftime('%a, %d %b %Y %H:%M:%S'))
# Thu, 03 Jun 2010 22:22:00
</snippet></ROW><ROW><id>3453753</id><snippet>date_str</snippet></ROW><ROW><id>3453753</id><snippet>dt.datetime.strptime</snippet></ROW><ROW><id>3453753</id><snippet>date_str='Jun 03, 2010 at 22:22PM'
date=dt.datetime.strptime(date_str,'%b %d, %Y at %H:%M%p')
print(date)
# 2010-06-03 22:22:00
</snippet></ROW><ROW><id>3453753</id><snippet>date_str</snippet></ROW><ROW><id>3453753</id><snippet>on</snippet></ROW><ROW><id>3453753</id><snippet>date_str='on Jun 03, 02010 at 22:22PM'
date=dt.datetime.strptime(date_str,'on %b %d, 0%Y at %H:%M%p')
print(date)
# 2010-06-03 22:22:00
</snippet></ROW><ROW><id>3453753</id><snippet>strftime</snippet></ROW><ROW><id>3453753</id><snippet>strptime</snippet></ROW><ROW><id>3453986</id><snippet>signal.signal</snippet></ROW><ROW><id>3453986</id><snippet>SIGINT</snippet></ROW><ROW><id>3453986</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>3453986</id><snippet>IService.stopService</snippet></ROW><ROW><id>3453986</id><snippet>reactor.addSystemEventTrigger</snippet></ROW><ROW><id>3453986</id><snippet>twistd</snippet></ROW><ROW><id>3453986</id><snippet>IService.stopService</snippet></ROW><ROW><id>3453986</id><snippet>Application</snippet></ROW><ROW><id>3453986</id><snippet>stopService</snippet></ROW><ROW><id>3453986</id><snippet>Deferred</snippet></ROW><ROW><id>3453986</id><snippet>Deferred</snippet></ROW><ROW><id>3453986</id><snippet>twistd</snippet></ROW><ROW><id>3453986</id><snippet>reactor.addSystemEventTrigger</snippet></ROW><ROW><id>3453986</id><snippet>IService.stopService</snippet></ROW><ROW><id>3453986</id><snippet>Deferred</snippet></ROW><ROW><id>3453986</id><snippet>reactor.addSystemEventTrigger('before', 'shutdown', callable)</snippet></ROW><ROW><id>3453986</id><snippet>addSystemEventTrigger</snippet></ROW><ROW><id>3453986</id><snippet>kill -INT ...</snippet></ROW><ROW><id>3453986</id><snippet>reactor.stop()</snippet></ROW><ROW><id>3454478</id><snippet>stdin=subprocess.PIPE</snippet></ROW><ROW><id>3454478</id><snippet>'\4'</snippet></ROW><ROW><id>3454833</id><snippet>import pefile
pe =  pefile.PE(‘/path/to/pefile.dll’)
for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
  print hex(pe.OPTIONAL_HEADER.ImageBase + exp.address), exp.name, exp.ordinal
</snippet></ROW><ROW><id>3454833</id><snippet>0x7ca0ab4f SHUpdateRecycleBinIcon 336
0x7cab44c0 SHValidateUNC 173
0x7ca7b0aa SheChangeDirA 337
0x7ca7b665 SheChangeDirExA 338
0x7ca7b3e1 SheChangeDirExW 339
0x7ca7aec6 SheChangeDirW 340
0x7ca8baae SheConvertPathW 341
</snippet></ROW><ROW><id>3455109</id><snippet>__call__</snippet></ROW><ROW><id>3455109</id><snippet>_call__</snippet></ROW><ROW><id>3455130</id><snippet>http://en.wikipedia.org/w/api.php?action=query&amp;titles=Fractal&amp;prop=links&amp;pllimit=500
</snippet></ROW><ROW><id>3455130</id><snippet>format=xml</snippet></ROW><ROW><id>3455130</id><snippet>http://en.wikipedia.org/w/api.php?action=query&amp;titles=Fractal&amp;prop=links&amp;pllimit=500&amp;format=xml
</snippet></ROW><ROW><id>3455325</id><snippet>exec_</snippet></ROW><ROW><id>3455325</id><snippet>exec_</snippet></ROW><ROW><id>3455325</id><snippet>exec_</snippet></ROW><ROW><id>3455325</id><snippet># Define a new signal called 'trigger' that has no arguments.
trigger = QtCore.pyqtSignal()

def connect_and_emit_trigger(self):
    # Connect the trigger signal to a slot.
    self.trigger.connect(self.handle_trigger)

    # Emit the signal.
    self.trigger.emit()

def handle_trigger(self):
    # Show that the slot has been called.

    print "trigger signal received"
</snippet></ROW><ROW><id>3456012</id><snippet>modelformset_factory</snippet></ROW><ROW><id>3456012</id><snippet>class AuthorForm(forms.ModelForm):
    class Meta:
        model = Author
        exclude = ('user',)
</snippet></ROW><ROW><id>3456012</id><snippet>commit=False</snippet></ROW><ROW><id>3456012</id><snippet>save()</snippet></ROW><ROW><id>3456012</id><snippet>def my_view(request):
    if request.method == 'POST':
        formset = AuthorFormSet(request.POST)
        if formset.is_valid(): 
            for author in formset.save(commit=False):
                author.user = request.user
                author.save()
            formset.save_m2m() # if your model has many to many relationships you need to call this
</snippet></ROW><ROW><id>3456695</id><snippet>class Car:
    def __init__(self, driver):
        self.driver = driver

class Driver:
    pass

driver = Driver()
car = Car(driver)
</snippet></ROW><ROW><id>3456768</id><snippet>from string import Template
the_template = Template("&lt;div id='$section_id'&gt;First name: $first&lt;/div&gt;")
print the_template.substitute(section_id="anID", first="Sarah")
</snippet></ROW><ROW><id>3456768</id><snippet>&lt;div id='anID'&gt;First name: Sarah&lt;/div&gt;
</snippet></ROW><ROW><id>3456768</id><snippet>print the_template.substitute(section_id="theID", first="Sarah" if 0==0 else "John")
</snippet></ROW><ROW><id>3456952</id><snippet>sys.modules</snippet></ROW><ROW><id>3456952</id><snippet>import</snippet></ROW><ROW><id>3456952</id><snippet>bar1</snippet></ROW><ROW><id>3456952</id><snippet>bar3</snippet></ROW><ROW><id>3456952</id><snippet>sys.modules</snippet></ROW><ROW><id>3456952</id><snippet>bar2</snippet></ROW><ROW><id>3456952</id><snippet>bar3</snippet></ROW><ROW><id>3456952</id><snippet>import sys
print( sys.modules )
</snippet></ROW><ROW><id>3456952</id><snippet>from src import *</snippet></ROW><ROW><id>3456952</id><snippet>import src</snippet></ROW><ROW><id>3456952</id><snippet>src.specialSandwichMaker</snippet></ROW><ROW><id>3456952</id><snippet>from src import specialSandwichMaker</snippet></ROW><ROW><id>3456952</id><snippet>from src import *</snippet></ROW><ROW><id>3456952</id><snippet>src</snippet></ROW><ROW><id>3457216</id><snippet>exec</snippet></ROW><ROW><id>3457216</id><snippet>var</snippet></ROW><ROW><id>3457216</id><snippet>run()</snippet></ROW><ROW><id>3457216</id><snippet>runctx</snippet></ROW><ROW><id>3457216</id><snippet>exec</snippet></ROW><ROW><id>3457216</id><snippet>cProfile.runctx( "...", globals(), locals() )
</snippet></ROW><ROW><id>3457803</id><snippet>dict(x[1:] for x in reversed(myListOfTuples))
</snippet></ROW><ROW><id>3458484</id><snippet>setup.py</snippet></ROW><ROW><id>3458484</id><snippet>setup.py</snippet></ROW><ROW><id>3458484</id><snippet>setup.py</snippet></ROW><ROW><id>3458484</id><snippet>$ python setup.py command
</snippet></ROW><ROW><id>3458484</id><snippet>$ python setup.py --help
</snippet></ROW><ROW><id>3458484</id><snippet>build</snippet></ROW><ROW><id>3458484</id><snippet>install</snippet></ROW><ROW><id>3458484</id><snippet>install</snippet></ROW><ROW><id>3458484</id><snippet>setup.py</snippet></ROW><ROW><id>3458484</id><snippet>py2exe</snippet></ROW><ROW><id>3458484</id><snippet>$ python maps.py
</snippet></ROW><ROW><id>3458633</id><snippet>while the-program-is-running:
    wait-for-an-event
    service-the-event
exit
</snippet></ROW><ROW><id>3458633</id><snippet>while the-program-is-running:
    wait-for-an-event
    while the-internet-is-on:
        do-something
exit
</snippet></ROW><ROW><id>3458734</id><snippet>_newClass</snippet></ROW><ROW><id>3458734</id><snippet>dynamictypes._newClass</snippet></ROW><ROW><id>3458734</id><snippet>globals()[ _className ] = _newClass
</snippet></ROW><ROW><id>3458734</id><snippet>a4-page-template.tex</snippet></ROW><ROW><id>3458734</id><snippet>a4PageTemplate</snippet></ROW><ROW><id>3458734</id><snippet>A4PageTemplate</snippet></ROW><ROW><id>3459131</id><snippet>[e] * n
</snippet></ROW><ROW><id>3459131</id><snippet>&gt;&gt;&gt; timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)
0.37095273281943264
&gt;&gt;&gt; timeit.timeit('[0] * 10', 'import itertools', number = 1000000)
0.5577236771712819
</snippet></ROW><ROW><id>3459131</id><snippet>&gt;&gt;&gt; itertools.repeat(0, 10)
repeat(0, 10)  # Not a list!!!
</snippet></ROW><ROW><id>3459131</id><snippet>itertools.repeat</snippet></ROW><ROW><id>3459131</id><snippet>&gt;&gt;&gt; timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)
1.7508119747063233
</snippet></ROW><ROW><id>3459131</id><snippet>[e] * n</snippet></ROW><ROW><id>3459131</id><snippet>repeat</snippet></ROW><ROW><id>3459578</id><snippet>class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if width == 0 and height == 0 and \
           color == 'red' and emphasis == 'strong' or \
           highlight &gt; 100:
            raise ValueError("sorry, you lose")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError("I don't think so -- values are %s, %s" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
</snippet></ROW><ROW><id>3459578</id><snippet>Two good reasons to break a particular rule:

(1) When applying the rule would make the code less readable, even for
    someone who is used to reading code that follows the rules.
[...]
</snippet></ROW><ROW><id>3459578</id><snippet>self.some_long_attribute_name = {
    'someLongKeyName': 'someLongValueName',
    'anotherLongKeyName': 'anotherLongValueName'
}
</snippet></ROW><ROW><id>3459578</id><snippet>long_object_name.do_something_with_long_name(
    long_expression_returning_is_first_arg,
    long_expression_returning_is_second_arg
)
</snippet></ROW><ROW><id>3459757</id><snippet>LOCK_EXPIRE = 60 * 5

lock_id = "%s-lock-%s" % (self.name, id_hexdigest) #computed earlier

is_locked = lambda: str(cache.get(lock_id)) == "true"
acquire_lock = lambda: cache.set(lock_id, "true", LOCK_EXPIRE)
release_lock = lambda: cache.set(lock_id, "nil", 1)

if not is_locked():
    aquire_lock()
    try:
        #do something
    finally:
        release_lock()
</snippet></ROW><ROW><id>3459757</id><snippet>try...finally</snippet></ROW><ROW><id>3459757</id><snippet>if</snippet></ROW><ROW><id>3459803</id><snippet>__call__</snippet></ROW><ROW><id>3459803</id><snippet>myfunc</snippet></ROW><ROW><id>3459823</id><snippet>  class MyUser(auth.models.User):
        profile = models.OneToOneField(Profile)
        def get_profile(self):
            prof = None
            try:
                prof = Standard.objects.get(id=self.profile.pk)
            except ObjectDoesNotExist:
                prof = Premium.objects.get(id=self.profile.pk)
            return prof
</snippet></ROW><ROW><id>3459823</id><snippet>user.profile.has_permission(project)
</snippet></ROW><ROW><id>3459823</id><snippet>user.get_profile().has_permission(project)
</snippet></ROW><ROW><id>3459948</id><snippet>from PyQt4 import QtCore, QtGui, Qt
import cPickle
import pickle
</snippet></ROW><ROW><id>3459948</id><snippet>cPickle</snippet></ROW><ROW><id>3459948</id><snippet>pickle</snippet></ROW><ROW><id>3459948</id><snippet>class DragTable(QtGui.QTableView):
    def __init__(self, parent = None):
        super(DragTable, self).__init__(parent)
        self.setDragEnabled(True)
        self.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
</snippet></ROW><ROW><id>3459948</id><snippet>    def dragEnterEvent(self, event):
        if event.mimeData().hasFormat("application/pubmedrecord"):
            event.setDropAction(Qt.MoveAction)
            event.accept()
        else:
            event.ignore()

    def startDrag(self, event):
</snippet></ROW><ROW><id>3459948</id><snippet>QTableView</snippet></ROW><ROW><id>3459948</id><snippet>selectedIndexes()</snippet></ROW><ROW><id>3459948</id><snippet>        indices = self.selectedIndexes()
</snippet></ROW><ROW><id>3459948</id><snippet>QModelIndex</snippet></ROW><ROW><id>3459948</id><snippet>QPersistentModelIndex</snippet></ROW><ROW><id>3459948</id><snippet>set</snippet></ROW><ROW><id>3459948</id><snippet>list</snippet></ROW><ROW><id>3459948</id><snippet>        selected = set()
        for index in indices:
            selected.add(index.row())
</snippet></ROW><ROW><id>3459948</id><snippet>        bstream = cPickle.dumps(selected)
        mimeData = QtCore.QMimeData()
        mimeData.setData("application/pubmedrecord", bstream)
        drag = QtGui.QDrag(self)
        drag.setMimeData(mimeData)
        pixmap = QtGui.QPixmap(":/drag.png")

        drag.setHotSpot(QtCore.QPoint(pixmap.width()/3, pixmap.height()/3))
        drag.setPixmap(pixmap)
        result = drag.start(QtCore.Qt.MoveAction)

    def mouseMoveEvent(self, event):
        self.startDrag(event)


class TagLabel(QtGui.QLabel):
    def __init__(self, text, color, parent = None):
        super(TagLabel, self).__init__(parent)
        self.tagColor = color
        self.setText(text)
        self.setStyleSheet("QLabel { background-color: %s; font-size: 14pt; }" % self.tagColor)
        self.defaultStyle = self.styleSheet()
        self.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasFormat("application/pubmedrecord"):
            self.set_bg(True)
            event.accept()
        else:
            event.reject()

    def dragLeaveEvent(self, event):
        self.set_bg(False)
        event.accept()

    def dropEvent(self, event):
        self.set_bg(False)
        data = event.mimeData()
        bstream = data.retrieveData("application/pubmedrecord", QtCore.QVariant.ByteArray)
        selected = pickle.loads(bstream.toByteArray())
        event.accept()
        self.emit(QtCore.SIGNAL("dropAccepted(PyQt_PyObject)"), (selected, str(self.text()), str(self.tagColor)))
</snippet></ROW><ROW><id>3459948</id><snippet>dropAccepted</snippet></ROW><ROW><id>3459948</id><snippet>    def set_bg(self, active = False):
        if active:
            style = "QLabel {background: yellow; font-size: 14pt;}"
            self.setStyleSheet(style)
        else:
            self.setStyleSheet(self.defaultStyle)



app = QtGui.QApplication([])

l = TagLabel("bla bla bla bla bla bla bla", "red")
l.show()

m = QtGui.QStandardItemModel()
for _ in xrange(4):
    m.appendRow([QtGui.QStandardItem(x) for x in ["aap", "noot", "mies"]])

t = DragTable()
t.setModel(m)
t.show()

def h(o):
    print "signal handled", o
l.connect(l, QtCore.SIGNAL("dropAccepted(PyQt_PyObject)"), h)

app.exec_()
</snippet></ROW><ROW><id>3460220</id><snippet>17 * ['th']</snippet></ROW><ROW><id>3460220</id><snippet>['th', 'th', ..., 'th']</snippet></ROW><ROW><id>3460220</id><snippet>'th'</snippet></ROW><ROW><id>3460220</id><snippet>['th']</snippet></ROW><ROW><id>3460220</id><snippet>['th', ...]</snippet></ROW><ROW><id>3460220</id><snippet>+</snippet></ROW><ROW><id>3460221</id><snippet>new_data = data[['a','b','c']].astype(np.float).reshape((data.size, 3))
</snippet></ROW><ROW><id>3460221</id><snippet>new_data = np.vstack([data[item] for item in ['a','b','c']]).T
</snippet></ROW><ROW><id>3460268</id><snippet>yield</snippet></ROW><ROW><id>3460268</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3460268</id><snippet>for elt in theList[ : ]:
    ...
</snippet></ROW><ROW><id>3460292</id><snippet>from PIL import Image

image = request.FILES['new_photo']
if image:
    img = Image.open(image)
    img.save(path.join(app.config['UPLOAD_FOLDER'],
        secure_filename('upload-%d.jpg' % self.obj.id)), 'JPEG')
    img.thumbnail((200, 200), Image.ANTIALIAS)
    img.save(path.join(app.config['UPLOAD_FOLDER'],
        secure_filename('upload-%d.200.jpg' % self.obj.id)), 'JPEG')
</snippet></ROW><ROW><id>3460726</id><snippet>select geocolumn.STX, geocolumn.STY from myTable;</snippet></ROW><ROW><id>3460726</id><snippet>select geocolumn.AsGml() from myTable;</snippet></ROW><ROW><id>3460747</id><snippet>collections.Hashable</snippet></ROW><ROW><id>3460747</id><snippet>import collections
&gt;&gt;&gt; isinstance({}, collections.Hashable)
False
&gt;&gt; isinstance(0, collections.Hashable)
True
</snippet></ROW><ROW><id>3460747</id><snippet>__hash__</snippet></ROW><ROW><id>3460747</id><snippet>TypeError</snippet></ROW><ROW><id>3460747</id><snippet>isinstance(obj, collections.Hashable)</snippet></ROW><ROW><id>3460747</id><snippet>__hash__()</snippet></ROW><ROW><id>3460747</id><snippet>TypeError</snippet></ROW><ROW><id>3460930</id><snippet>for i in range(timesteps):
    fig = pyplot.figure()
    ...
    fig.savefig(filepath)
</snippet></ROW><ROW><id>3460930</id><snippet>map_init  #[Basemap Instance]
extra_shapes  #[Basemap.readshapefile object]


#plot the weather data for current timestep to current plot
img = map_init.imshow(data[0])

# extra_shapes are county boundaries.  Plot those as polygons
plygn = pyplot.Polygon(map_init.extra_shapes[0])

# Plot the state boundaries (in basemap)
map_init.drawstates()

# add a colorbar
pyplot.colorbar()

for i in range(timestamps):
    img.set_data(data[i])
    plygn.set_xy(map_init.extra_shapes[i])
    pyplot.draw()
    pyplot.savefig(filepath)
</snippet></ROW><ROW><id>3460932</id><snippet>subprocess.call(['/home/path/formatdb', ...])
</snippet></ROW><ROW><id>3461014</id><snippet>my_date.strftime('%A, %d %B')
</snippet></ROW><ROW><id>3461014</id><snippet>if 4 &lt;= day &lt;= 20 or 24 &lt;= day &lt;= 30:
    suffix = "th"
else:
    suffix = ["st", "nd", "rd"][day % 10 - 1]
</snippet></ROW><ROW><id>3461036</id><snippet>import constants
print(constants.__dict__)
</snippet></ROW><ROW><id>3461195</id><snippet>__getitem__</snippet></ROW><ROW><id>3461195</id><snippet>def __getitem__(self, c):
  x, y = c
  return self.data[x-self.dx][y-self.dy]

def __setitem__(self, c, v):
  x, y = c
  self.data[x-self.dx][y-self.dy] = v
</snippet></ROW><ROW><id>3461195</id><snippet>a[-5,-1] = 10
</snippet></ROW><ROW><id>3461254</id><snippet>import project.ui</snippet></ROW><ROW><id>3461254</id><snippet>from project import ui</snippet></ROW><ROW><id>3461254</id><snippet>project</snippet></ROW><ROW><id>3461462</id><snippet>In [2]: import dateutil.parser as dparser

In [3]: date = dparser.parse('5th November 2010')

In [4]: date
Out[4]: datetime.datetime(2010, 11, 5, 0, 0)
</snippet></ROW><ROW><id>3461905</id><snippet>    myIndex = self.parent.index(self)
AttributeError: 'NoneType' object has no attribute 'index'
</snippet></ROW><ROW><id>3461905</id><snippet>self.parent</snippet></ROW><ROW><id>3461905</id><snippet>self</snippet></ROW><ROW><id>3461905</id><snippet>node</snippet></ROW><ROW><id>3461905</id><snippet>node</snippet></ROW><ROW><id>3461905</id><snippet>replaceWith</snippet></ROW><ROW><id>3461905</id><snippet>node.replaceWith</snippet></ROW><ROW><id>3461905</id><snippet>n.replaceWith</snippet></ROW><ROW><id>3461905</id><snippet>node.parent</snippet></ROW><ROW><id>3461905</id><snippet>if node.parent is not None:
</snippet></ROW><ROW><id>3461905</id><snippet>node.replaceWith</snippet></ROW><ROW><id>3461905</id><snippet>print</snippet></ROW><ROW><id>3461905</id><snippet>node.parent</snippet></ROW><ROW><id>3461905</id><snippet>print node.contents</snippet></ROW><ROW><id>3461905</id><snippet>print node.previous.contents</snippet></ROW><ROW><id>3461905</id><snippet>print node.next.contents</snippet></ROW><ROW><id>3461905</id><snippet>node.parent</snippet></ROW><ROW><id>3461905</id><snippet>None</snippet></ROW><ROW><id>3461914</id><snippet>Thread</snippet></ROW><ROW><id>3461914</id><snippet>t = Thread(target=myfunc); t.run()</snippet></ROW><ROW><id>3462033</id><snippet>mod_rewrite</snippet></ROW><ROW><id>3462033</id><snippet>x</snippet></ROW><ROW><id>3462033</id><snippet>/skill/</snippet></ROW><ROW><id>3462033</id><snippet>RewriteCond %{HTTP_HOST} !www.example.com$ [NC]
RewriteCond %{HTTP_HOST} ^(www.)?skill.example.com [NC]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule (/skill/)?(.*) /skill/$2
</snippet></ROW><ROW><id>3462033</id><snippet>import re
from django.template import Library
from django.template.defaulttags import URLNode, url

register = Library()

class SubdomainURLNode(URLNode):
    def render(self, context):
        domain = context['request'].get_host()
        subdomain = re.sub(r'^www\.','',domain).split('.')[0]
        path = super(SubdomainURLNode, self).render(context)
        return re.sub(r'^/%s/' % subdomain, '/', path)

@register.tag
def subdomainurl(parser, token, node_cls=SubdomainURLNode):
    """Just like {% url %} but checks for a subdomain."""
    node_instance = url(parser, token)
    return node_cls(view_name=node_instance.view_name,
        args=node_instance.args,
        kwargs=node_instance.kwargs,
        asvar=node_instance.asvar)
</snippet></ROW><ROW><id>3462160</id><snippet>In [5]: list(set(temp1) - set(temp2))
Out[5]: ['Four', 'Three']
</snippet></ROW><ROW><id>3462312</id><snippet>-passout stdin</snippet></ROW><ROW><id>3462312</id><snippet>openssl genrsa</snippet></ROW><ROW><id>3462312</id><snippet>communicate</snippet></ROW><ROW><id>3462312</id><snippet>-passout</snippet></ROW><ROW><id>3462682</id><snippet>get_*</snippet></ROW><ROW><id>3462682</id><snippet>class Foo(object):
    @property
    def something1(self):
        # in the actual code it asks a web server but here I replaced that with "foo_something1" instead of the code from a web server
        return "foo_something1"
    @property
    def something2(self):
        # needs the result of get_something1; right now I have it get it by instance variable like so
        return self.something1 + "_something_2"
</snippet></ROW><ROW><id>3462682</id><snippet>something1</snippet></ROW><ROW><id>3462682</id><snippet>self.something1</snippet></ROW><ROW><id>3462682</id><snippet>Foo.something1</snippet></ROW><ROW><id>3462682</id><snippet>something2</snippet></ROW><ROW><id>3462682</id><snippet>    @property
    def something2(self):
        return self.something1 + "_something_2"

    @property
    def something3(self):
        return self.otherthing1 + "_something_2"
</snippet></ROW><ROW><id>3462682</id><snippet>    def something2(self,prefix):
        return prefix+"_something_2"
</snippet></ROW><ROW><id>3462793</id><snippet>str(DEPT)</snippet></ROW><ROW><id>3462793</id><snippet>%s</snippet></ROW><ROW><id>3462793</id><snippet>conn = MySQLdb.connect(host="localhost", user="user", passwd="pass", db="dbase")
cursor = conn.cursor()
q = 'SELECT * FROM %s WHERE course=%%s AND sec = %%s""" % (DEPT,)
cursor.execute(q, (CLASS, SEC))
</snippet></ROW><ROW><id>3462793</id><snippet>%%</snippet></ROW><ROW><id>3462793</id><snippet>q</snippet></ROW><ROW><id>3462793</id><snippet>%</snippet></ROW><ROW><id>3462793</id><snippet>q</snippet></ROW><ROW><id>3462793</id><snippet>%s</snippet></ROW><ROW><id>3462793</id><snippet>execute</snippet></ROW><ROW><id>3462793</id><snippet>CLASS</snippet></ROW><ROW><id>3462793</id><snippet>SEC</snippet></ROW><ROW><id>3462793</id><snippet>str</snippet></ROW><ROW><id>3462793</id><snippet>format</snippet></ROW><ROW><id>3462793</id><snippet>%</snippet></ROW><ROW><id>3462840</id><snippet>from IPy import IP
IP('127.0.0.1')
</snippet></ROW><ROW><id>3462840</id><snippet>socket</snippet></ROW><ROW><id>3462840</id><snippet>import socket
try:
    socket.inet_aton(addr)
    # legal
except socket.error:
    # Not legal
</snippet></ROW><ROW><id>3462840</id><snippet>def validate_ip(s):
    a = s.split('.')
    if len(a) != 4:
        return False
    for x in a:
        if not x.isdigit():
            return False
        i = int(x)
        if i &lt; 0 or i &gt; 255:
            return False
    return True
</snippet></ROW><ROW><id>3462840</id><snippet>999.999.999.999</snippet></ROW><ROW><id>3463344</id><snippet>def initSearch(self):
    with self.searchingLock:
        if self.searching : raise SearchingError('AlreadySearching')
        self.searching = True
def startSearching(self):
    try: self.initSearch()
    except SearchingError as error :
        self.logger.error(error.message)
        return False
    #some more init code, then start the thread which
    #constantly checks self.searching to determine when to stop
</snippet></ROW><ROW><id>3463344</id><snippet>searchingLock</snippet></ROW><ROW><id>3463666</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; the_string="http://hello-world.com"
&gt;&gt;&gt; re.findall(r'[\w.]+',the_string)
['http', 'hello', 'world.com']
</snippet></ROW><ROW><id>3463848</id><snippet>import atexit
from turbomail import interface
from turbomail.adapters import tm_pylons
from beaker.cache import CacheManager
from beaker.util import parse_cache_config_options

class Globals(object):
    def __init__(self, config):
        self.cache = CacheManager(**parse_cache_config_options(config))

        atexit.register(tm_pylons.shutdown_extension)
        interface.start(tm_pylons.FakeConfigObj(config))
</snippet></ROW><ROW><id>3463851</id><snippet>from configobj import ConfigObj

conf = ConfigObj('filename.ini')
section = conf['section']
value = section['value']
</snippet></ROW><ROW><id>3464154</id><snippet>__class__</snippet></ROW><ROW><id>3464154</id><snippet>from math import pi

class Circle(object):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return pi * self.radius**2

class CirclePlus(Circle):
    def diameter(self):
        return self.radius*2

    def circumference(self):
        return self.radius*2*pi

c = Circle(10)
print c.radius
print c.area()
print repr(c)

c.__class__ = CirclePlus
print c.diameter()
print c.circumference()
print repr(c)
</snippet></ROW><ROW><id>3464154</id><snippet>10
314.159265359
&lt;__main__.Circle object at 0x00A0E270&gt;
20
62.8318530718
&lt;__main__.CirclePlus object at 0x00A0E270&gt;
</snippet></ROW><ROW><id>3464227</id><snippet>&gt;&gt;&gt; import code, dis
&gt;&gt;&gt; c = code.compile_command('x = []; x.append("foo")')
&gt;&gt;&gt; dis.disassemble(c)
  1           0 BUILD_LIST               0
              3 STORE_NAME               0 (x)
              6 LOAD_NAME                0 (x)
              9 LOAD_ATTR                1 (append)
             12 LOAD_CONST               0 ('foo')
             15 CALL_FUNCTION            1
             18 PRINT_EXPR          
             19 LOAD_CONST               1 (None)
</snippet></ROW><ROW><id>3464227</id><snippet>$ decompyle --showasm -o ./ app.pyc
</snippet></ROW><ROW><id>3464227</id><snippet>app.pyc_dis</snippet></ROW><ROW><id>3464227</id><snippet>0   BUILD_LIST_0      ''
3   STORE_NAME        'x'
6   LOAD_NAME         'x'
9   LOAD_ATTR         'append'
12  LOAD_CONST        'foo'
15  CALL_FUNCTION_1   ''
18  POP_TOP           ''
19  LOAD_CONST        ''
22  RETURN_VALUE      ''

x = []
x.append('foo')
</snippet></ROW><ROW><id>3464260</id><snippet>IMP_CHOICES = (
    ('1', 'imp 1'),
    ('2', 'imp 2'),
    ('3', 'imp 3'),
    ('4', 'imp 4'),
)

class UploadFileForm(forms.Form):
    title = forms.CharField(max_length=50)
    file  = forms.FileField(widget=forms.FileInput())
    imp = forms.ChoiceField(choices=IMP_CHOICES)
</snippet></ROW><ROW><id>3464269</id><snippet>def fromcin(prompt=None):
  while True:
    try: line = raw_input(prompt)
    except EOFError: break
    for w in line.split(): yield w
</snippet></ROW><ROW><id>3464269</id><snippet>for</snippet></ROW><ROW><id>3464269</id><snippet>for w in fromcin():
  dosomething(w)
</snippet></ROW><ROW><id>3464416</id><snippet>ax.set_xticklabels(labels, rotation=45)
</snippet></ROW><ROW><id>3464416</id><snippet>rotation</snippet></ROW><ROW><id>3464418</id><snippet>def ops_list():
    "calculate the list of overloadable operators"
    #&lt;type 'object'&gt; has functions but no operations
    not_ops = dir(object)

    #calculate the list of operation names
    ops = set()
    for mytype in (int, float, str):
        for op in dir(mytype):
            if op.endswith("__") and op not in not_ops:
                ops.add(op)
    return sorted(ops)

class MetaCastable(type):
    __ops = ops_list()

    def __new__(mcs, name, bases, dict):
        #pass any undefined ops to self.__op__
        def add_op(op):
            if op in dict:
                return
            fn = lambda self, *args: self.__op__(op, args)
            fn.__name__ = op
            dict[op] = fn

        for op in mcs.__ops:
            add_op( op )
        return type.__new__(mcs, name, bases, dict)


class Castable(object):
    __metaclass__ = MetaCastable
    def __str__(self):
        print "str!"
        return "&lt;Castable&gt;"
    def __int__(self):
        print "int!"
        return 42
    def __float__(self):
        print "float!"
        return 2.718281828459045

    def __op__(self, op, args):
        try:
            other = args[0]
        except IndexError:
            other = None
        print "%s %s %s" % (self, op, other)
        self, other = coerce(self, other)
        return getattr(self, op)(*args)

    def __coerce__(self, other):
        print "coercing like %r!" % other
        if other is None: other = 0.0
        return (type(other)(self), other)
</snippet></ROW><ROW><id>3464445</id><snippet>Response</snippet></ROW><ROW><id>3464616</id><snippet>Popen(..., universal_newlines=True)</snippet></ROW><ROW><id>3464616</id><snippet>class Popen(object):
    [...]
    def __init__(self, ...):
        [...]
        if p2cwrite is not None:
            self.stdin = os.fdopen(p2cwrite, 'wb', bufsize)
        if c2pread is not None:
            if universal_newlines:
                self.stdout = os.fdopen(c2pread, 'rU', bufsize)
            else:
                self.stdout = os.fdopen(c2pread, 'rb', bufsize)
        if errread is not None:
            if universal_newlines:
                self.stderr = os.fdopen(errread, 'rU', bufsize)
            else:
                self.stderr = os.fdopen(errread, 'rb', bufsize)
</snippet></ROW><ROW><id>3464617</id><snippet>HTTP_REFERER</snippet></ROW><ROW><id>3464848</id><snippet>sqlite</snippet></ROW><ROW><id>3464848</id><snippet>d[key="NAME", 'Joe']</snippet></ROW><ROW><id>3464848</id><snippet>d.fetch('Joe', key='Name')</snippet></ROW><ROW><id>3464848</id><snippet>set_key</snippet></ROW><ROW><id>3464848</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>3464848</id><snippet>.format</snippet></ROW><ROW><id>3464848</id><snippet>import collections
import sqlite3

class SqliteDict(collections.MutableMapping):
  @classmethod
  def create(cls, path, columns):
    conn = sqlite3.connect(path)
    conn.execute('DROP TABLE IF EXISTS SqliteDict')
    conn.execute('CREATE TABLE SqliteDict ({0})'.format(','.join(columns.split())))
    conn.commit()
    return cls(conn)

  @classmethod
  def open(cls, path):
    conn = sqlite3.connect(path)
    return cls(conn)

  def __init__(self, conn):
    # looks like for sime weird reason you want str, not unicode, when feasible, so...:
    conn.text_factory = sqlite3.OptimizedUnicode
    c = conn.cursor()
    c.execute('SELECT * FROM SqliteDict LIMIT 0')
    self.cols = [x[0] for x in c.description]
    self.conn = conn
    # start with a keyname (==column name) of `ID`
    self.set_key('ID')

  def set_key(self, key):
    self.i = self.cols.index(key)
    self.kn = key

  def __len__(self):
    c = self.conn.cursor()
    c.execute('SELECT COUNT(*) FROM SqliteDict')
    return c.fetchone()[0]

  def __iter__(self):
    c = self.conn.cursor()
    c.execute('SELECT * FROM SqliteDict')
    while True:
      result = c.fetchone()
      if result is None: break
      k = result.pop(self.i)
      return k, result

  def __getitem__(self, k):
    c = self.conn.cursor()
    # print 'doing:', 'SELECT * FROM SqliteDict WHERE {0}=?'.format(self.kn)
    # print ' with:', repr(k)
    c.execute('SELECT * FROM SqliteDict WHERE {0}=?'.format(self.kn), (k,))
    result = [list(r) for r in c.fetchall()]
    # print ' resu:', repr(result)
    for r in result: del r[self.i]
    return result

  def __contains__(self, k):
    c = self.conn.cursor()
    c.execute('SELECT * FROM SqliteDict WHERE {0}=?'.format(self.kn), (k,))
    return c.fetchone() is not None

  def __delitem__(self, k):
    c = self.conn.cursor()
    c.execute('DELETE FROM SqliteDict WHERE {0}=?'.format(self.kn), (k,))
    self.conn.commit()

  def __setitem__(self, k, v):
    r = list(v)
    r.insert(self.i, k)
    if len(r) != len(self.cols):
      raise ValueError, 'len({0}) is {1}, must be {2} instead'.format(r, len(r), len(self.cols))
    c = self.conn.cursor()
    # print 'doing:', 'REPLACE INTO SqliteDict VALUES({0})'.format(','.join(['?']*len(r)))
    # print ' with:', r
    c.execute('REPLACE INTO SqliteDict VALUES({0})'.format(','.join(['?']*len(r))), r)
    self.conn.commit()

  def close(self):
    self.conn.close()


def main():
  d = SqliteDict.create('student_table', 'ID NAME BIRTH AGE SEX')
  d['1'] = ["Joe", "01011980", "30", "M"]    
  d['2'] = ["Rose", "12111986", "24", "F"]
  print len(d), 'items in table created.'
  print d['2']
  print d['1']
  d.close()

  d = SqliteDict.open('student_table')
  d.set_key('NAME')
  print len(d), 'items in table opened.'
  print d['Joe']


if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>3464848</id><snippet>SqliteDict</snippet></ROW><ROW><id>3464848</id><snippet>create</snippet></ROW><ROW><id>3464848</id><snippet>open</snippet></ROW><ROW><id>3464848</id><snippet>__init__</snippet></ROW><ROW><id>3464848</id><snippet>gdbm</snippet></ROW><ROW><id>3464848</id><snippet>'r'</snippet></ROW><ROW><id>3464848</id><snippet>'c'</snippet></ROW><ROW><id>3464848</id><snippet>'w'</snippet></ROW><ROW><id>3464848</id><snippet>create</snippet></ROW><ROW><id>3464848</id><snippet>ID</snippet></ROW><ROW><id>3464848</id><snippet>2 items in table created.
[['Rose', '12111986', '24', 'F']]
[['Joe', '01011980', '30', 'M']]
2 items in table opened.
[['1', '01011980', '30', 'M']]
</snippet></ROW><ROW><id>3464848</id><snippet>d[x] = d[x]</snippet></ROW><ROW><id>3464848</id><snippet>executemany</snippet></ROW><ROW><id>3464848</id><snippet>execute</snippet></ROW><ROW><id>3464848</id><snippet>d[x] = v</snippet></ROW><ROW><id>3464848</id><snippet>k</snippet></ROW><ROW><id>3464848</id><snippet>n</snippet></ROW><ROW><id>3464848</id><snippet>REPLACE</snippet></ROW><ROW><id>3464848</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>3464848</id><snippet>sqlite</snippet></ROW><ROW><id>3465057</id><snippet>None</snippet></ROW><ROW><id>3465057</id><snippet>def whats_on_the_telly(penguin=None):
    if penguin is None:
        penguin = []
    penguin.append("property of the zoo")
    return penguin
</snippet></ROW><ROW><id>3465057</id><snippet>&gt;&gt;&gt; def make_function():
...     def f(value=[]):
...             value.append('hello')
...             return value
...     return f
... 
&gt;&gt;&gt; f1 = make_function()
&gt;&gt;&gt; f2 = make_function()
&gt;&gt;&gt; f1()
['hello']
&gt;&gt;&gt; f1()
['hello', 'hello']
&gt;&gt;&gt; f2()
['hello']
</snippet></ROW><ROW><id>3465057</id><snippet>function</snippet></ROW><ROW><id>3465057</id><snippet>[]</snippet></ROW><ROW><id>3465057</id><snippet>a_list</snippet></ROW><ROW><id>3465057</id><snippet>func_defaults</snippet></ROW><ROW><id>3465057</id><snippet>[]</snippet></ROW><ROW><id>3465057</id><snippet>a_list</snippet></ROW><ROW><id>3465057</id><snippet>None</snippet></ROW><ROW><id>3465131</id><snippet>''.join([ bin(int(x))[2:].rjust(8,'0') for x in '123.123.123.123'.split('.')])
</snippet></ROW><ROW><id>3465450</id><snippet>(x for x in o1 if x not in value)
(x for i, x in enumerate( o1 ) if i not in index )
</snippet></ROW><ROW><id>3465510</id><snippet>def treeify(seq):
    ret = {}
    for path in seq:
        cur = ret
        for node in path:
            cur = cur.setdefault(node, {})
    return ret
</snippet></ROW><ROW><id>3465510</id><snippet>&gt;&gt;&gt; pprint.pprint(treeify(L))
{'object-top-1': {'object-lvl1-1': {'object-lvl2-1': {}, 'object-lvl2-3': {}}},
 'object-top-2': {'object-lvl1-1': {'object-lvl2-2': {'object-lvl3-1': {}}},
                  'object-lvl1-2': {'object-lvl2-4': {'object-lvl3-2': {'object-lvl4-1': {}}}}}}
</snippet></ROW><ROW><id>3465510</id><snippet>dict.setdefault</snippet></ROW><ROW><id>3465796</id><snippet>URLError</snippet></ROW><ROW><id>3465796</id><snippet>HTTPError</snippet></ROW><ROW><id>3465796</id><snippet>URLError</snippet></ROW><ROW><id>3465796</id><snippet>try:
    urllib2.urlopen(url)
except urllib2.HTTPError, e:
    print e.code
except urllib2.URLError, e:
    print e.args
</snippet></ROW><ROW><id>3465909</id><snippet>is</snippet></ROW><ROW><id>3465909</id><snippet>a = 'aaaaa'
b = 'bbbbb'

print a is b
a = b
print a is b

c = a[:]
print c is a
</snippet></ROW><ROW><id>3465909</id><snippet>a is b</snippet></ROW><ROW><id>3465909</id><snippet>id(a) == id(b)</snippet></ROW><ROW><id>3465909</id><snippet>id(foo)</snippet></ROW><ROW><id>3465909</id><snippet>foo</snippet></ROW><ROW><id>3465909</id><snippet>foo is bar</snippet></ROW><ROW><id>3465909</id><snippet>a = 'aaaaa'
b = 'aaaaa'
a is b
</snippet></ROW><ROW><id>3465909</id><snippet>True</snippet></ROW><ROW><id>3466050</id><snippet>u_str.encode(some_codec</snippet></ROW><ROW><id>3466050</id><snippet>print u'{0}'.format(s).encode('utf-8')
</snippet></ROW><ROW><id>3466094</id><snippet>commands</snippet></ROW><ROW><id>3466094</id><snippet>subprocess</snippet></ROW><ROW><id>3466272</id><snippet>is_html</snippet></ROW><ROW><id>3466342</id><snippet>.egg-info</snippet></ROW><ROW><id>3466342</id><snippet>myproj-bin</snippet></ROW><ROW><id>3466342</id><snippet>./setup.py
./myproj
./myproj/__init__.py
./scripts
./scripts/myproj-bin
</snippet></ROW><ROW><id>3466342</id><snippet>setup.py</snippet></ROW><ROW><id>3466342</id><snippet>#! /usr/bin/python

from setuptools import setup

setup(name="myproj",
      description='shows how to create a python package',
      version='123',
      packages=['myproj'],  # python package names here
      scripts=['scripts/myproj-bin'],  # scripts here
      )
</snippet></ROW><ROW><id>3467191</id><snippet>?</snippet></ROW><ROW><id>3467191</id><snippet>object_id</snippet></ROW><ROW><id>3467191</id><snippet>../foo/app/3</snippet></ROW><ROW><id>3467191</id><snippet>3</snippet></ROW><ROW><id>3467191</id><snippet>object_id</snippet></ROW><ROW><id>3467727</id><snippet>self.a</snippet></ROW><ROW><id>3467727</id><snippet>__init__</snippet></ROW><ROW><id>3467727</id><snippet>class myObj:
    def __init__(self):
        self.a = []
        self.b = False
</snippet></ROW><ROW><id>3467879</id><snippet>class Something:
   def foo(self): pass

for name, fn in inspect.getmembers(Something):
    if isinstance(fn, types.UnboundMethodType):
        setattr(Something, name, decorator(fn))
</snippet></ROW><ROW><id>3468188</id><snippet>Thread.currentThread().</snippet></ROW><ROW><id>3468188</id><snippet>getStackTrace()</snippet></ROW><ROW><id>3468188</id><snippet>StackTraceElements</snippet></ROW><ROW><id>3468188</id><snippet>public void methodThatPrintsCaller() {
    StackTraceElement elem = Thread.currentThread.getStackTrace()[2];
    System.out.println(elem);

    // rest of you code
}
</snippet></ROW><ROW><id>3468588</id><snippet>&lt;?php 
function colorPalette($imageFile, $numColors, $granularity = 5) 
{ 
   $granularity = max(1, abs((int)$granularity)); 
   $colors = array(); 
   $size = @getimagesize($imageFile); 
   if($size === false) 
   { 
      user_error("Unable to get image size data"); 
      return false; 
   } 
   $img = @imagecreatefromjpeg($imageFile);
   // Andres mentioned in the comments the above line only loads jpegs, 
   // and suggests that to load any file type you can use this:
   // $img = @imagecreatefromstring(file_get_contents($imageFile)); 

   if(!$img) 
   { 
      user_error("Unable to open image file"); 
      return false; 
   } 
   for($x = 0; $x &lt; $size[0]; $x += $granularity) 
   { 
      for($y = 0; $y &lt; $size[1]; $y += $granularity) 
      { 
         $thisColor = imagecolorat($img, $x, $y); 
         $rgb = imagecolorsforindex($img, $thisColor); 
         $red = round(round(($rgb['red'] / 0x33)) * 0x33); 
         $green = round(round(($rgb['green'] / 0x33)) * 0x33); 
         $blue = round(round(($rgb['blue'] / 0x33)) * 0x33); 
         $thisRGB = sprintf('%02X%02X%02X', $red, $green, $blue); 
         if(array_key_exists($thisRGB, $colors)) 
         { 
            $colors[$thisRGB]++; 
         } 
         else 
         { 
            $colors[$thisRGB] = 1; 
         } 
      } 
   } 
   arsort($colors); 
   return array_slice(array_keys($colors), 0, $numColors); 
} 
// sample usage: 
$palette = colorPalette('rmnp8.jpg', 10, 4); 
echo "&lt;table&gt;\n"; 
foreach($palette as $color) 
{ 
   echo "&lt;tr&gt;&lt;td style='background-color:#$color;width:2em;'&gt; &lt;/td&gt;&lt;td&gt;#$color&lt;/td&gt;&lt;/tr&gt;\n"; 
} 
echo "&lt;/table&gt;\n";
</snippet></ROW><ROW><id>3468588</id><snippet>    if ($handle = opendir('./path/to/images')) {

        while (false !== ($file = readdir($handle))) {
           $palette = colorPalette($file, 10, 4);
           echo "&lt;table&gt;\n"; 
           foreach($palette as $color) { 
               echo "&lt;tr&gt;&lt;td style='background-color:#$color;width:2em;'&gt; &lt;/td&gt;&lt;td&gt;#$color&lt;/td&gt;&lt;/tr&gt;\n"; 
           } 
           echo "&lt;/table&gt;\n";
        }
        closedir($handle);
    }
</snippet></ROW><ROW><id>3468628</id><snippet># Then hook it into the Book model explicitly.
class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=50)

    objects = models.Manager() # The default manager.
    dahl_objects = DahlBookManager() # The Dahl-specific manager.
</snippet></ROW><ROW><id>3468628</id><snippet>objects</snippet></ROW><ROW><id>3468628</id><snippet>dahl_objects</snippet></ROW><ROW><id>3468698</id><snippet>from lxml import etree
doc = etree.HTML(open('test.data').read())

for t in doc.xpath('//table[.//div[@id="title"] and .//td[@class="text"]]'):
    print etree.tostring(t.xpath('.//div[@id="title"]')[0])
    print etree.tostring(t.xpath('.//td[@class="text"]')[0])
    print "--"
</snippet></ROW><ROW><id>3468698</id><snippet>&lt;div id="title"&gt;
              &lt;span class="Browse"&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            &lt;a href="/***/***.dll?p=***&amp;sql=xxx:yyy"&gt;string&lt;/a&gt;
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            &lt;a href="/***/***.dll?p=***&amp;sql=xxx:yyy"&gt;string&lt;/a&gt;
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            Gospodar of Lutaka
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            1986
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            Sep 1985-Dec 1985
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            Elektra
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
            54:51
          &lt;/td&gt;

--
&lt;div id="title"&gt;
              &lt;span&gt;string&lt;/span&gt;
            &lt;/div&gt;

&lt;td class="text" style="padding-left:5px;"&gt;
          &lt;/td&gt;

--
</snippet></ROW><ROW><id>3468698</id><snippet>from urllib2 import urlopen
from lxml import etree
doc = etree.HTML(urlopen('http://pastebin.com/download.php?i=cg5HHJ6x').read())

for t in doc.xpath('//table/tr/td/table[.//div[@id="title"] and .//td[@class="text"]]'):
    print etree.tostring(t.xpath('.//div[@id="title"]')[0])
    print etree.tostring(t.xpath('.//td[@class="text"]')[0])
    print "--"
</snippet></ROW><ROW><id>3468962</id><snippet>print ("%s" * len(vars)) % tuple(vars)
</snippet></ROW><ROW><id>3468962</id><snippet>print ''.join(str(x) for x in vars)
</snippet></ROW><ROW><id>3468991</id><snippet>pyparsing</snippet></ROW><ROW><id>3468991</id><snippet>.+</snippet></ROW><ROW><id>3468991</id><snippet>else</snippet></ROW><ROW><id>3468991</id><snippet>.+?</snippet></ROW><ROW><id>3468991</id><snippet>pyparsing</snippet></ROW><ROW><id>3468991</id><snippet>regex_cond = re.compile( r'.+?(else\sif|else|if).+?' )
...
# else if
</snippet></ROW><ROW><id>3468994</id><snippet>p = subprocess.Popen(runn.split(), shell=False)
</snippet></ROW><ROW><id>3468994</id><snippet>shell=True</snippet></ROW><ROW><id>3468994</id><snippet>sh -c "your string"</snippet></ROW><ROW><id>3468994</id><snippet>sh</snippet></ROW><ROW><id>3468994</id><snippet>sh -c "your string"</snippet></ROW><ROW><id>3468994</id><snippet>your string</snippet></ROW><ROW><id>3468994</id><snippet>sh</snippet></ROW><ROW><id>3468994</id><snippet>exec</snippet></ROW><ROW><id>3468994</id><snippet>sh</snippet></ROW><ROW><id>3468994</id><snippet>sh</snippet></ROW><ROW><id>3468994</id><snippet>sh -c</snippet></ROW><ROW><id>3468994</id><snippet>sh</snippet></ROW><ROW><id>3468994</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3468994</id><snippet>shell=True</snippet></ROW><ROW><id>3468994</id><snippet>sh -c</snippet></ROW><ROW><id>3469742</id><snippet>added()</snippet></ROW><ROW><id>3469742</id><snippet>MyModel</snippet></ROW><ROW><id>3469742</id><snippet>BitRate</snippet></ROW><ROW><id>3469742</id><snippet>added()</snippet></ROW><ROW><id>3470036</id><snippet>class LastMonthFeed(Feed):

    def items(self):
        ts = datetime.datetime.now() - datetime.timedelta(days=30)
        return sol.object.filter(date__gte=ts).order_by('-date')
</snippet></ROW><ROW><id>3470036</id><snippet>urls.py</snippet></ROW><ROW><id>3470288</id><snippet>class Question(models.Model):

    def can_answer(self, user):
        return Answer.filter(question=self, user=user).count() &lt; 3
</snippet></ROW><ROW><id>3470359</id><snippet>setDaemon(daemonic)</snippet></ROW><ROW><id>3470359</id><snippet>isDaemon()</snippet></ROW><ROW><id>3470359</id><snippet>daemon</snippet></ROW><ROW><id>3470359</id><snippet>daemon</snippet></ROW><ROW><id>3470359</id><snippet>daemon</snippet></ROW><ROW><id>3470417</id><snippet>relationship</snippet></ROW><ROW><id>3470417</id><snippet>mediaGroup = relationship("MediaGroup",
        secondary=media_group_groups,
        order_by="MediaGroup.title",
        backref=backref('media_groups', 
                        secondary="media_media_groups",
                        primaryjoin= id == "groupB_id",
                        secondaryjoin = id == "groupA_id",
                        foreignkeys = ["groupA_id", "groupB_id"] ),  
        primaryjoin = id == "groupA_id",
        secondaryjoin = id == "groupB_id")
</snippet></ROW><ROW><id>3470461</id><snippet>.sort()</snippet></ROW><ROW><id>3470461</id><snippet>opt.sort()</snippet></ROW><ROW><id>3470461</id><snippet>sorted()</snippet></ROW><ROW><id>3470652</id><snippet>array</snippet></ROW><ROW><id>3470652</id><snippet>struct</snippet></ROW><ROW><id>3470652</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; array.array('B', [17, 24, 121, 1, 12, 222, 34, 76]).tostring()
'\x11\x18y\x01\x0c\xde"L'
</snippet></ROW><ROW><id>3470652</id><snippet>len</snippet></ROW><ROW><id>3471098</id><snippet>kid_keys = db.Query(keys_only=True).ancestor(john).fetch(1000)
</snippet></ROW><ROW><id>3471098</id><snippet>facts_key = db.Query(Details, keys_only=True).ancestor(john).get()
</snippet></ROW><ROW><id>3471098</id><snippet>get()</snippet></ROW><ROW><id>3471098</id><snippet>fetch()</snippet></ROW><ROW><id>3471098</id><snippet>Details</snippet></ROW><ROW><id>3471098</id><snippet>fetch</snippet></ROW><ROW><id>3471164</id><snippet>possible = range(1, 101)
</snippet></ROW><ROW><id>3471181</id><snippet>def</snippet></ROW><ROW><id>3471181</id><snippet>def draw_circle(turtle, r):
    # ...
</snippet></ROW><ROW><id>3471186</id><snippet>def capacity(self):
    return self.trucks * self.multiplier
</snippet></ROW><ROW><id>3471186</id><snippet>list_display = ('trucks', 'multiplier', 'capacity')
</snippet></ROW><ROW><id>3471361</id><snippet>lxml.etree</snippet></ROW><ROW><id>3471361</id><snippet>&lt;x&gt;</snippet></ROW><ROW><id>3471361</id><snippet>from lxml import etree

parser = etree.XMLParser(remove_blank_text=True)

tree = etree.XML("""\
    &lt;x&gt;
      &lt;a&gt;Some text&lt;/a&gt;
      &lt;b&gt;Some text 2&lt;/b&gt;
      &lt;c&gt;Some text 3&lt;/c&gt;
    &lt;/x&gt;
""", parser)

for node in tree.iter():
    if node.text == None: continue
    print node.text
</snippet></ROW><ROW><id>3471361</id><snippet>node.text</snippet></ROW><ROW><id>3471361</id><snippet>getiterator()</snippet></ROW><ROW><id>3471361</id><snippet>iter()</snippet></ROW><ROW><id>3471391</id><snippet>except SomeException as err</snippet></ROW><ROW><id>3471391</id><snippet>except SomeException, err</snippet></ROW><ROW><id>3471453</id><snippet>ModuleB</snippet></ROW><ROW><id>3471453</id><snippet>ModuleB.py</snippet></ROW><ROW><id>3471453</id><snippet>import ModuleB
print ModuleB.__file__
</snippet></ROW><ROW><id>3471453</id><snippet>global</snippet></ROW><ROW><id>3471594</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>3471594</id><snippet>__sizeof__</snippet></ROW><ROW><id>3471616</id><snippet>/opt/thisapp</snippet></ROW><ROW><id>3471616</id><snippet>/opt/thatapp</snippet></ROW><ROW><id>3471616</id><snippet>/opt/thisapp</snippet></ROW><ROW><id>3471616</id><snippet>__init__.py</snippet></ROW><ROW><id>3471616</id><snippet>main.py</snippet></ROW><ROW><id>3471616</id><snippet>runpy</snippet></ROW><ROW><id>3471616</id><snippet>__main__.py</snippet></ROW><ROW><id>3471616</id><snippet>packages</snippet></ROW><ROW><id>3472069</id><snippet>[j for i in zip(a,b) for j in i]
</snippet></ROW><ROW><id>3472188</id><snippet>num_evens = {} 
for combination in itertools.product(*li):
    even_counter = len([ y for y in combination if y &amp; 1 == 0 ])
    num_evens.setdefault(even_counter,[]).append(combination)

import pprint
pprint.pprint(num_evens)
</snippet></ROW><ROW><id>3472211</id><snippet>def guesser(low = 0, up = 100):
    print("Choose a number between %d and %d" % (low, up-1))
    while low &lt; up - 1:
        mid = (low+up)//2
        yn = raw_input("Is Your Number Smaller Than %s? (y/n): " % mid)
        if yn not in ['y', 'n']: continue
        low, up =  (low, mid) if yn == 'y' else (mid, up)
    print "Your Number is:", low


guesser()
</snippet></ROW><ROW><id>3472640</id><snippet>floor( val / step ) * step</snippet></ROW><ROW><id>3472777</id><snippet>from subprocess import *
output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>3472831</id><snippet>'(ID PRIMARY KEY AUTOINCREASEMENT INT, NAME TEXT, BIRTH, SEX, AGE)'
</snippet></ROW><ROW><id>3472831</id><snippet>l1 = [1, 2, 3, 4]
l2 = [2, 3]
l3 = list(set(l1) - set(l2))
print l3
--&gt; [1, 4]

l3 = [val for val in l1 if val not in l2]
print l3
--&gt; [1, 4]
</snippet></ROW><ROW><id>3472831</id><snippet>", ".join(_SQL_fields) 
</snippet></ROW><ROW><id>3472831</id><snippet>'ID, NAME, BIRTH, SEX, AGE'
</snippet></ROW><ROW><id>3472905</id><snippet>import threading, urllib2
import Queue

urls_to_load = [
'http://stackoverflow.com/',
'http://slashdot.org/',
'http://www.archive.org/',
'http://www.yahoo.co.jp/',
]

def read_url(url, queue):
    data = urllib2.urlopen(url).read()
    print('Fetched %s from %s' % (len(data), url))
    queue.put(data)

def fetch_parallel():
    result = Queue.Queue()
    threads = [threading.Thread(target=read_url, args = (url,result)) for url in urls_to_load]
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    return result

def fetch_sequencial():
    result = Queue.Queue()
    for url in urls_to_load:
        read_url(url,result)
    return result
</snippet></ROW><ROW><id>3472949</id><snippet>D:\Program Files\Steam\steamapps\terabytest\sourcesdk\bin\orangebox\bin\vbsp.exe</snippet></ROW><ROW><id>3472949</id><snippet>D:/Program Files/Steam/steamapps/terabytest/sourcesdk/bin/orangebox/bin/vbsp.exe</snippet></ROW><ROW><id>3472963</id><snippet>f = open(.......)
header = f.next() # get first line
posns = [i for i, c in enumerate(header + "#") if c = '#']
for line in f:
    fields = [line[posns[k]:posns[k+1]] for k in xrange(len(posns) - 1)]
</snippet></ROW><ROW><id>3472963</id><snippet>import sys
f = open(sys.argv[1])
header = f.next() # get first line
print repr(header)
posns = [i for i, c in enumerate(header) if c == '#'] + [-1]
print posns
for line in f:
    posns[-1] = len(line)
    fields = [line[posns[k]:posns[k+1]].rstrip() for k in xrange(len(posns) - 1)]
    print fields
</snippet></ROW><ROW><id>3472963</id><snippet>#      #  #
Foo    BarBaz
123456789abcd
</snippet></ROW><ROW><id>3472963</id><snippet>'#      #  #\n'
[0, 7, 10, -1]
['Foo', 'Bar', 'Baz']
['1234567', '89a', 'bcd']
</snippet></ROW><ROW><id>3472963</id><snippet>#</snippet></ROW><ROW><id>3472963</id><snippet>#</snippet></ROW><ROW><id>3472963</id><snippet>slice()</snippet></ROW><ROW><id>3472963</id><snippet>import sys
f = open(sys.argv[1])
header = f.next() # get first line
print repr(header)
posns = [i for i, c in enumerate(header) if c == '#']
print posns
slices = [slice(lo, hi) for lo, hi in zip(posns, posns[1:] + [None])]
print slices
for line in f:
    fields = [line[sl].rstrip() for sl in slices]
    print fields
</snippet></ROW><ROW><id>3473192</id><snippet>ImageField</snippet></ROW><ROW><id>3473192</id><snippet>contribute_to_class</snippet></ROW><ROW><id>3473192</id><snippet>class ImageWithThumbnailField(ImageField):
    def contribute_to_class(self, cls, name):
        super(ImageWithThumbnailField, self).contribute_to_class(cls, name)


        def photo_thumb(self):
            photo = getattr(self, name, None)
            if photo:
               return u'&lt;img src="%s" /&gt;' % (settings.MEDIA_URL + '/thumbs/?h=64&amp;w=80&amp;c=50x0&amp;p=' + photo.name)
            else: 
               return u'(no photo)'
        photo_thumb.short_description = u'Photo'
        photo_thumb.allow_tags = True
        photo_thumb.admin_order_field = 'photo' 

        setattr(cls, 'photo_thumb', photo_thumb);
</snippet></ROW><ROW><id>3473192</id><snippet>photo_thumb</snippet></ROW><ROW><id>3473192</id><snippet>self.photo</snippet></ROW><ROW><id>3473192</id><snippet>getattr(self, name)</snippet></ROW><ROW><id>3473206</id><snippet>encode</snippet></ROW><ROW><id>3473206</id><snippet>str</snippet></ROW><ROW><id>3473206</id><snippet>print u"Español\nPortuguês\nItaliano".encode('utf-8')
</snippet></ROW><ROW><id>3473206</id><snippet>chcp 65001</snippet></ROW><ROW><id>3473206</id><snippet>encodings._aliases</snippet></ROW><ROW><id>3473420</id><snippet>[x + y for x in xrange(limit + 1) for y in xrange(x + 1)]
</snippet></ROW><ROW><id>3473420</id><snippet>from itertools import combinations

(a + b for a, b in combinations(xrange(n + 1, 2)))
</snippet></ROW><ROW><id>3473420</id><snippet>xrange(2*n + 2)</snippet></ROW><ROW><id>3473420</id><snippet> [x + y for x in set set1 for y in set2]
</snippet></ROW><ROW><id>3473627</id><snippet>putrequest</snippet></ROW><ROW><id>3473627</id><snippet>request</snippet></ROW><ROW><id>3473627</id><snippet>request</snippet></ROW><ROW><id>3473627</id><snippet>import httplib, urllib
params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
headers = {"Content-type": "application/x-www-form-urlencoded", "Accept": "text/plain"}
conn = httplib.HTTPConnection("musi-cal.mojam.com:80")
conn.request("POST", "/cgi-bin/query", params, headers)
response = conn.getresponse()
</snippet></ROW><ROW><id>3473796</id><snippet>Base</snippet></ROW><ROW><id>3473796</id><snippet>import abc

class Base:
    __metaclass__ = abc.ABCMeta
    @abc.abstractmethod
    def g(self):
        pass
    def f(self): # &amp;c
</snippet></ROW><ROW><id>3473796</id><snippet>Base</snippet></ROW><ROW><id>3473796</id><snippet>g</snippet></ROW><ROW><id>3473796</id><snippet>super</snippet></ROW><ROW><id>3473796</id><snippet>g</snippet></ROW><ROW><id>3473837</id><snippet>def modify_all(f):
    def fun(objs):
        for o in objs:
            f(o)
    fun.unmodified = f
    return fun

def undecorate(f):
    return f.unmodified

@modify_all
def modify(obj):
    # Modify obj in some way.

modify(all_my_objs)
undecorate(modify)(one_obj)
</snippet></ROW><ROW><id>3473837</id><snippet>undecorate</snippet></ROW><ROW><id>3473837</id><snippet>def modify_one(modify, one):
    return modify.unmodified(one)
</snippet></ROW><ROW><id>3474059</id><snippet>def do_GET(self):
    """Respond to a GET request."""
    if self.path == '/':
        self.do_index()
    elif self.path == '/timestamp':
        self.do_entry()
    elif self.path == '/post':
        self.do_post_form()
</snippet></ROW><ROW><id>3474156</id><snippet>super</snippet></ROW><ROW><id>3474156</id><snippet>def __new__(cls, status):
    return cls.__bases__[0].__new__(cls,
                                    status &amp; 1, status &amp; 2, status &amp; 4,
                                    status &amp; 8, status &amp; 16, status &amp; 32,
                                    status &amp; 64, status &amp; 128)
</snippet></ROW><ROW><id>3474571</id><snippet>qs=Model.objects.all()
qs.query.as_sql() 
</snippet></ROW><ROW><id>3474571</id><snippet>qs=Model.objects.all()
print qs.query
</snippet></ROW><ROW><id>3474718</id><snippet>a.count("__TEXT__")</snippet></ROW><ROW><id>3474776</id><snippet>def findNodes(nodes):
    def traverse(ns):
        if not ns:
            return ''

        ret = ['&lt;ul&gt;']
        for child in ns:
            ret.extend(['&lt;li&gt;', traverse(child.Children), '&lt;/li&gt;'])
        ret.append('&lt;/ul&gt;')
        return ''.join(ret)

    return traverse(nodes)
</snippet></ROW><ROW><id>3475270</id><snippet>string.split('$$TEXT$$')</snippet></ROW><ROW><id>3475270</id><snippet>&gt;&gt;&gt; a="1.MATCHES$$TEXT$$STRING"
&gt;&gt;&gt; a.split("$$TEXT$$")
['1.MATCHES', 'STRING']

&gt;&gt;&gt; a="2.MATCHES $$TEXT$$ STRING"
&gt;&gt;&gt; a.split("$$TEXT$$")
['2.MATCHES ', ' STRING']
</snippet></ROW><ROW><id>3475270</id><snippet>&gt;&gt;&gt; [x.strip() for x in "2.MATCHES $$TEXT$$ STRING".split("$$TEXT$$")]
['2.MATCHES', 'STRING']
</snippet></ROW><ROW><id>3475435</id><snippet>return render_to_response('my_template.html', my_data_dictionary, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>3475678</id><snippet>type(self)</snippet></ROW><ROW><id>3475678</id><snippet>&gt;&gt;&gt; class A(object):
 var  = 2
 def write(self):
  print type(self).var
&gt;&gt;&gt; class B(A):
 pass
&gt;&gt;&gt; B().write()
2
&gt;&gt;&gt; B.var = 3
&gt;&gt;&gt; B().write()
3
&gt;&gt;&gt; A().write()
2
</snippet></ROW><ROW><id>3476175</id><snippet>t=[]
for line in f.readlines():
    line = line.split('\t')
    t.append('%s,%s\n' % (line[0], line[3]))
f1.writelines(t)
</snippet></ROW><ROW><id>3476175</id><snippet>t</snippet></ROW><ROW><id>3476175</id><snippet>for line in f.readlines():
    line = line.split('\t')
    s = '%s,%s\n' % (line[0], line[3])
    f1.write(s)
</snippet></ROW><ROW><id>3476364</id><snippet>my_function</snippet></ROW><ROW><id>3476364</id><snippet>my_function()</snippet></ROW><ROW><id>3476551</id><snippet>import numpy as np
</snippet></ROW><ROW><id>3476551</id><snippet>from math import sin, sqrt
</snippet></ROW><ROW><id>3476551</id><snippet>from math import *</snippet></ROW><ROW><id>3476768</id><snippet>range()</snippet></ROW><ROW><id>3476768</id><snippet>xrange()</snippet></ROW><ROW><id>3476768</id><snippet>range(10, 0, -1)
</snippet></ROW><ROW><id>3476768</id><snippet>[10, 9, 8, 7, 6, 5, 4, 3, 2, 1] 
</snippet></ROW><ROW><id>3476768</id><snippet>xrange</snippet></ROW><ROW><id>3476768</id><snippet>xrange(10, 0, -1)
</snippet></ROW><ROW><id>3477338</id><snippet>from twisted.internet import defer
from twisted.web import client
from twisted.python import log
from urllib import urlencode
import time

class APIException(Exception):
    pass

class ASyncExampleClass(object):
    def __init__(self):
        self.session = None
        self.token = None

    @defer.inlineCallbacks
    def api_call(self, api_method,tries=3,timeout=10):
        attempt = 1
        while attempt &lt;= tries:
            attempt += 1
            if self.session = None:
                yield sess_data = client.getPage("http://example.com/session/",timeout=timeout)
                self.session = extractSessionFromData(sess_data)
            if self.token = None:
                yield token_data = client.getPage("http://example.com/token/?%s" % urlencode(dict(session=self.session)),timeout=timeout)
                self.token = extractTokenFromData(token_data)
            # Place "the" call
            yield api_result = client.getPage("http://example.com/api/?%s" % urlencode(dict(api_method=api_method,session=self.session,token=self.token)),timeout=timeout)
            #
            if sessionInvalid(api_result):
                log.msg("Request for %s failed because invalid session %s" % (api_method,self.session))
                self.session = None
                self.token = None
                continue
            if tokenInvalid(api_result):
                log.msg("Request for %s failed because invalid token %s" % (api_method,self.token))
                self.token = None
                continue
            # Any other checks for valid result
            returnValue(api_result)
            break # Not sure if this is needed, not in an position to test readily.
        else:
            raise APIException("Tried and failed %s times to do %s" % (attempt - 1, api_method))
</snippet></ROW><ROW><id>3477338</id><snippet>try/except</snippet></ROW><ROW><id>3477338</id><snippet>twisted.web.client.getPage</snippet></ROW><ROW><id>3477534</id><snippet>[A-C]{2}\d{2}
@|TH[12]
@(@|TH[12])?
@(@|TH[12]|AL[12]|SP[123]|TB(1[0-9]?|20?|[3-9]))?
@(@|TH[12]|AL[12]|SP[123]|TB(1[0-9]?|20?|[3-9])|OH(1[0-9]?|2[0-9]?|30?|[4-9]))?
(([ECMP]|HA|AK)[SD]|HS)T
[A-CV]{2}
A[cglmrstu]|B[aehikr]?|C[adeflmorsu]?|D[bsy]|E[rsu]|F[emr]?|G[ade]|H[efgos]?|I[nr]?|Kr?|L[airu]|M[dgnot]|N[abdeiop]?|Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehilm]|Uu[bhopqst]|U|V|W|Xe|Yb?|Z[nr]
(a|b)|(x|y)
</snippet></ROW><ROW><id>3477534</id><snippet>random.choice</snippet></ROW><ROW><id>3477534</id><snippet>class RandomString(object):
    def __init__(self, regex):
        self.possible_strings = list(invRegex.invert(regex))
    def random_string(self):
        return random.choice(self.possible_strings)
</snippet></ROW><ROW><id>3477666</id><snippet>&gt;&gt;&gt; x = (
... 'a very long string - part 1' +
... 'a very long string - part 2' +
... 'a very long string - part 3' )
&gt;&gt;&gt; x
'a very long string - part 1a very long string - part 2a very long string - part 3'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3477666</id><snippet>+</snippet></ROW><ROW><id>3477666</id><snippet>re.compile("[A-Za-z_]"       # letter or underscore
       "[A-Za-z0-9_]*"   # letter, digit or underscore
      )
</snippet></ROW><ROW><id>3477666</id><snippet>&gt;&gt;&gt; x = (
... 'a very long string - part 1' 
... 'a very long string - part 2' 
... 'a very long string - part 3' )
&gt;&gt;&gt; x
'a very long string - part 1a very long string - part 2a very long string - part 3'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3478089</id><snippet>Process</snippet></ROW><ROW><id>3478089</id><snippet>Process myProcess = System.getRuntime().exec("cmd here"));</snippet></ROW><ROW><id>3478351</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.collections import EllipseCollection

x = np.arange(10)
y = np.arange(15)
X, Y = np.meshgrid(x, y)

XY = np.hstack((X.ravel()[:,np.newaxis], Y.ravel()[:,np.newaxis]))

ww = X/10.0
hh = Y/15.0
aa = X*9


ax = plt.subplot(1,1,1)

ec = EllipseCollection(
                        ww,
                        hh,
                        aa,
                        units='x',
                        offsets=XY,
                        transOffset=ax.transData)
ec.set_array((X+Y).ravel())
ax.add_collection(ec)
ax.autoscale_view()
ax.set_xlabel('X')
ax.set_ylabel('y')
cbar = plt.colorbar(ec)
cbar.set_label('X+Y')
plt.show()
</snippet></ROW><ROW><id>3478399</id><snippet> Accommodation.objects.filter(product__date__begin__gte=values['start_day'])
</snippet></ROW><ROW><id>3478608</id><snippet>bool success = true;
try {
    something();
} catch (Exception e) {
    success = false;
    // other exception handling
} finally {
    if (success) {
        // equivalent of Python else goes here

        // putting this in a finally-block is especially
        // important if there is a return in the try-block
    }
}
</snippet></ROW><ROW><id>3478793</id><snippet>for letter in ['a', ..., 'z']:
    globals()[letter] = letter
</snippet></ROW><ROW><id>3478793</id><snippet>global_dict = globals()
for letter in ['a', ..., 'z']:
    global_dict[letter] = letter
</snippet></ROW><ROW><id>3478793</id><snippet>globals().update((l,l) for l in ['a', ...,'z'])
</snippet></ROW><ROW><id>3479037</id><snippet>import Tkinter as tk

def keyPress(event):
    if event.char in ('V', 'F', ' '):
        print event.char
    elif event.keysym not in ('Alt_r', 'Alt_L', 'F4'):
        print event.keysym
        return 'break'


root = tk.Tk()
entry = tk.Entry()
entry.bind('&lt;KeyPress&gt;', keyPress)
entry.pack()
entry.focus()

root.mainloop()
</snippet></ROW><ROW><id>3479037</id><snippet>event.keysym</snippet></ROW><ROW><id>3479037</id><snippet>else: return 'break'</snippet></ROW><ROW><id>3479037</id><snippet>event.char.upper()</snippet></ROW><ROW><id>3479187</id><snippet>url = request.get_full_url()
data = request.get_data()
headers = request.headers
</snippet></ROW><ROW><id>3479346</id><snippet>create_rectangle</snippet></ROW><ROW><id>3479346</id><snippet>__init__</snippet></ROW><ROW><id>3479346</id><snippet>draw()</snippet></ROW><ROW><id>3479346</id><snippet>from Tkinter import *

class Rectangle():
    def __init__(self, coords, color):
        self.coords = coords
        self.color = color

    def draw(self, canvas):
        """Draw the rectangle on a Tk Canvas."""
        canvas.create_rectangle(*self.coords, fill=self.color)

master = Tk()
w = Canvas(master, width=300, height=300)
w.pack()

rect1 = Rectangle((0, 0, 100, 100), 'blue')
rect1.draw(w)

mainloop()
</snippet></ROW><ROW><id>3479346</id><snippet>*</snippet></ROW><ROW><id>3479346</id><snippet>self.coords</snippet></ROW><ROW><id>3479346</id><snippet>create_rectangle</snippet></ROW><ROW><id>3479346</id><snippet>Canvas.create_rectangle(x0, y0, x1, y1, option, ...)
</snippet></ROW><ROW><id>3479346</id><snippet>x0</snippet></ROW><ROW><id>3479346</id><snippet>y0</snippet></ROW><ROW><id>3479346</id><snippet>*</snippet></ROW><ROW><id>3479346</id><snippet>self.coords = (0, 0, 1, 1)</snippet></ROW><ROW><id>3479346</id><snippet>create_rectangle(*self.coords)</snippet></ROW><ROW><id>3479346</id><snippet>create_rectangle(0, 0, 1, 1)</snippet></ROW><ROW><id>3479346</id><snippet>create_rectangle((0, 0, 1, 1))</snippet></ROW><ROW><id>3479484</id><snippet>UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-10: ordinal not in range(128)</snippet></ROW><ROW><id>3479598</id><snippet>functools.wraps</snippet></ROW><ROW><id>3479598</id><snippet>import decorator

class FooType(type):
    def __init__(cls,name,bases,clsdict):
        @decorator.decorator        
        def modify_stub(func, *args,**kw):
            return func(*args,**kw)+' + new'
        setattr(cls,'stub',modify_stub(clsdict['stub']))
class Foo(object):
    __metaclass__=FooType
    def stub(self,a,b,c):
        return 'original'


foo=Foo()
help(foo.stub)
# Help on method stub in module __main__:

# stub(self, a, b, c) method of __main__.Foo instance

print(foo.stub(1,2,3))
# original + new
</snippet></ROW><ROW><id>3479981</id><snippet>import glob
import shutil

for extfile in glob.glob('*.ext'):
    shutil.move(extfile,dest)  
</snippet></ROW><ROW><id>3480016</id><snippet>&gt;&gt;&gt; s = "La Pe\xf1a"
&gt;&gt;&gt; print s
La Pe±a
&gt;&gt;&gt; print s.decode("latin-1")
La Peña
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3480016</id><snippet>&gt;&gt;&gt; s = "12\xa3"
&gt;&gt;&gt; print s.decode("latin-1")
12£
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3480097</id><snippet>approved_rides = [ride for ride in initial_rides if any(
          (lat_min &lt; step.latitude&lt; lat_max and \
           lng_min&lt; step.longitude&lt; lng_max) for step in ride.route.steps.all())]
</snippet></ROW><ROW><id>3480153</id><snippet>inspect.getouterframes</snippet></ROW><ROW><id>3480153</id><snippet>import inspect
record=inspect.getouterframes(inspect.currentframe())[1]
frame=record[0]

if 'FOO' in frame.f_globals:
    print 'FOO in globals'
else:
    print 'nah'

% python
&gt;&gt;&gt; import test
nah
&gt;&gt;&gt; 

% python
&gt;&gt;&gt; FOO=True
&gt;&gt;&gt; import test
FOO in globals
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3480190</id><snippet>function_that_needs_strings(*my_list) # works!
</snippet></ROW><ROW><id>3480554</id><snippet>import sys

sys.stdout.close()
sys.stderr.close()
</snippet></ROW><ROW><id>3480744</id><snippet>name.string.decode('utf-8')</snippet></ROW><ROW><id>3480744</id><snippet>name.string</snippet></ROW><ROW><id>3480860</id><snippet>AttributeError: '_fields_' must be a sequence of pairs
</snippet></ROW><ROW><id>3480935</id><snippet>def make_pairs( tc_query_set ):
    start = None
    for row in tc_query_set:
         if start is None:
             start= row
             continue
         elif start.card == row.card and start.rec_date == row.rec_date:
             yield start, row
             start= None
         else:
             # May as well raise an exception -- the data cannot the processed
             yield start, None 
             start= row
</snippet></ROW><ROW><id>3480935</id><snippet>data = TimeClock.objects.order_by('card','rec_date','rec_time').all()
for start, end in make_pairs( data ):
    WorkIntervals.objects.create( start.card, start.rec_date, start.rec_time, end.rec_time, ... )
</snippet></ROW><ROW><id>3481388</id><snippet>setup(
   ...
   dependency_links = ['http://github.com/mtai/python-gearman/tarball/master#egg=gearman-2.0.0beta']
)
</snippet></ROW><ROW><id>3481420</id><snippet>for x in range(100):
  if x not in mydic:
    mydic[x] = x  # or whatever value you want
</snippet></ROW><ROW><id>3481420</id><snippet>not in</snippet></ROW><ROW><id>3481420</id><snippet>in</snippet></ROW><ROW><id>3481420</id><snippet>auxset = set(mylist)
for x in range(100):
  if x not in auxset:
    auxset.add(x)
    mylist.append(x)  # or whatever
</snippet></ROW><ROW><id>3481517</id><snippet>librepeater.dylib</snippet></ROW><ROW><id>3481517</id><snippet>file</snippet></ROW><ROW><id>3481517</id><snippet>librepeater.dylib</snippet></ROW><ROW><id>3481575</id><snippet>"%.40r" % a_float</snippet></ROW><ROW><id>3481575</id><snippet>repr(a_float)</snippet></ROW><ROW><id>3481575</id><snippet>repr()</snippet></ROW><ROW><id>3481575</id><snippet>float(repr(a_float)) == a_float
</snippet></ROW><ROW><id>3481575</id><snippet>Python 2.6.4 (r264:75708, Oct 26 2009, 08:23:19) [MSC v.1500 32 bit (Intel)] on win32
&gt;&gt;&gt; f = 0.38288746115497402
&gt;&gt;&gt; repr(f)
'0.38288746115497402'
&gt;&gt;&gt; float(repr(f)) == f
True

Python 2.7 (r27:82525, Jul  4 2010, 09:01:59) [MSC v.1500 32 bit (Intel)] on win32
&gt;&gt;&gt; f = 0.38288746115497402
&gt;&gt;&gt; repr(f)
'0.382887461154974'
&gt;&gt;&gt; float(repr(f)) == f
True
</snippet></ROW><ROW><id>3481575</id><snippet>preserved = repr(the_float_object)</snippet></ROW><ROW><id>3481575</id><snippet>float(preserved)</snippet></ROW><ROW><id>3481575</id><snippet>decimal</snippet></ROW><ROW><id>3481700</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('if x not in d: pass', '', 'exec'))
  1           0 LOAD_NAME                0 (x)
              3 LOAD_NAME                1 (d)
              6 COMPARE_OP               7 (not in)
              9 JUMP_IF_FALSE            4 (to 16)
             12 POP_TOP             
             13 JUMP_FORWARD             1 (to 17)
        &gt;&gt;   16 POP_TOP             
        &gt;&gt;   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(compile('if not x in d: pass', '', 'exec'))
  1           0 LOAD_NAME                0 (x)
              3 LOAD_NAME                1 (d)
              6 COMPARE_OP               7 (not in)
              9 JUMP_IF_FALSE            4 (to 16)
             12 POP_TOP             
             13 JUMP_FORWARD             1 (to 17)
        &gt;&gt;   16 POP_TOP             
        &gt;&gt;   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE        
</snippet></ROW><ROW><id>3481700</id><snippet>if x not in y</snippet></ROW><ROW><id>3481700</id><snippet>not in</snippet></ROW><ROW><id>3481700</id><snippet>if not x in y</snippet></ROW><ROW><id>3481700</id><snippet>if (not x) in y</snippet></ROW><ROW><id>3481733</id><snippet>doctest</snippet></ROW><ROW><id>3481733</id><snippet>dt.py</snippet></ROW><ROW><id>3481733</id><snippet>'''
  &gt;&gt;&gt; foo
  23
'''

foo = 23

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>3481733</id><snippet>$ py26 dt.py -v
Trying:
    foo
Expecting:
    23
ok
1 items passed all tests:
   1 tests in __main__
1 tests in 1 items.
1 passed and 0 failed.
Test passed.
</snippet></ROW><ROW><id>3481733</id><snippet>-v</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw_old = tokens_raw</snippet></ROW><ROW><id>3481873</id><snippet>token_raw_old</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw_old = tokens_raw.copy()
</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw_old = dict(tokens_raw)
</snippet></ROW><ROW><id>3481873</id><snippet>tokens_raw</snippet></ROW><ROW><id>3481873</id><snippet>import copy

tokens_raw_old = copy.deepcopy(tokens_raw)
</snippet></ROW><ROW><id>3481900</id><snippet>None</snippet></ROW><ROW><id>3481900</id><snippet>def test(first): pass
test = d(test)
</snippet></ROW><ROW><id>3482156</id><snippet>label.configure</snippet></ROW><ROW><id>3482156</id><snippet>panel.configure(image = img)</snippet></ROW><ROW><id>3482156</id><snippet>panel.image = img</snippet></ROW><ROW><id>3482156</id><snippet>import Tkinter as tk
import ImageTk

root = tk.Tk()
img = ImageTk.PhotoImage(Image.open(path))
panel = tk.Label(root, image = img)
panel.pack(side = "bottom", fill = "both", expand = "yes")
def callback(e):
  img2 = ImageTk.PhotoImage(Image.open(path2))
  panel.configure(image = img2)
  panel.image = img
root.bind("&lt;Return&gt;", callback)
root.mainloop()
</snippet></ROW><ROW><id>3482217</id><snippet>seek</snippet></ROW><ROW><id>3482217</id><snippet>tell</snippet></ROW><ROW><id>3482217</id><snippet>(im.seek(im.tell()+1)</snippet></ROW><ROW><id>3482342</id><snippet>read()</snippet></ROW><ROW><id>3482342</id><snippet>read</snippet></ROW><ROW><id>3482342</id><snippet>yes(1)</snippet></ROW><ROW><id>3482659</id><snippet>Upload</snippet></ROW><ROW><id>3482659</id><snippet>id</snippet></ROW><ROW><id>3482659</id><snippet>idarr</snippet></ROW><ROW><id>3482659</id><snippet>Upload.objects.filter(id__in = idarr)
</snippet></ROW><ROW><id>3483055</id><snippet>fd = open(filename, read)
file_data = read(fd)
close(fd)
/* you edit your file, and save it */
unlink(filename)
fd = open(filename, write, create)
write(fd, file_data)
</snippet></ROW><ROW><id>3483055</id><snippet>ls -li</snippet></ROW><ROW><id>3483055</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>3483055</id><snippet>$ echo one &gt;&gt; test.log
$ echo two &gt;&gt; test.log
$ echo three &gt;&gt; test.log
$ ls -li test.log
671147 -rw-r--r-- 1 sarnold sarnold 14 2010-08-14 04:15 test.log
$ echo four &gt;&gt; test.log
$ ls -li test.log
671147 -rw-r--r-- 1 sarnold sarnold 19 2010-08-14 04:15 test.log

&gt;&gt;&gt; log=open('test.log')
&gt;&gt;&gt; log.tell()
0
&gt;&gt;&gt; log.seek(0,2)
&gt;&gt;&gt; log.tell()
19

$ echo five &gt;&gt; test.log
$ echo six &gt;&gt; test.log

&gt;&gt;&gt; log.seek(0,2)
&gt;&gt;&gt; log.tell()
28
</snippet></ROW><ROW><id>3483055</id><snippet>tail(1)</snippet></ROW><ROW><id>3483055</id><snippet>-F</snippet></ROW><ROW><id>3483161</id><snippet>Thread</snippet></ROW><ROW><id>3483161</id><snippet>pubsub</snippet></ROW><ROW><id>3483161</id><snippet>GUI</snippet></ROW><ROW><id>3483161</id><snippet>import time

import wx
from threading import Thread
from wx.lib.pubsub import Publisher

class WorkerThread(Thread):
    def __init__(self):
        Thread.__init__(self)

        #A flag that can be set 
        #to tell the thread to end
        self.stop_flag = False

        #This calls the run() to start the new thread
        self.start()


    def run(self):
        """ Over-rides the super-classes run()"""
        #Put everything in here that 
        #you want to run in your new thread

        #e.g...
        for x in range(20):
            if self.stop_flag:
                break
            time.sleep(1)
            #Broadcast a message to who ever's listening
            Publisher.sendMessage("your_topic_name", x)
        Publisher.sendMessage("your_topic_name", "finished")


    def stop(self):
        """
        Call this method to tell the thread to stop
        """
        self.stop_flag = True




class GUI(wx.Frame):
    def __init__(self, parent, id=-1,title=""):
        wx.Frame.__init__(self, parent, id, title, size=(140,180))
        self.SetMinSize((140,180)) 
        panel = wx.Panel(id=wx.ID_ANY, name=u'mainPanel', parent=self)

        #Subscribe to messages from the workerThread
        Publisher().subscribe(self.your_message_handler, "your_topic_name")

        #A button to start the workerThread
        self.startButton = wx.Button(panel, wx.ID_ANY, 'Start thread')
        self.Bind(wx.EVT_BUTTON,  self.onStart, self.startButton)

        #A button to stop the workerThread
        self.stopButton = wx.Button(panel, wx.ID_ANY, 'Stop thread')
        self.Bind(wx.EVT_BUTTON,  self.onStop, self.stopButton)

        #A text control to display messages from the worker thread
        self.threadMessage = wx.TextCtrl(panel, wx.ID_ANY, '', size=(75, 20))

        #Do the layout
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.startButton, 0, wx.ALL, 10)
        sizer.Add(self.stopButton, 0, wx.ALL, 10)
        sizer.Add(self.threadMessage, 0, wx.ALL, 10)
        panel.SetSizerAndFit(sizer)


    def onStart(self, event):
        #Start the worker thread
        self.worker = WorkerThread()

        #Disable any widgets which could affect your thread
        self.startButton.Disable()

    def onStop(self, message):
        self.worker.stop()

    def your_message_handler(self, message):
        message_data = message.data
        if message_data == 'finished':
            self.startButton.Enable()
            self.threadMessage.SetLabel(str(message_data))
        else:
            self.threadMessage.SetLabel(str(message_data))

if __name__ == "__main__":

    app = wx.PySimpleApp()
    frame = GUI(None, wx.ID_ANY, 'Threading Example')
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3483239</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>3483544</id><snippet>LatestSubmission</snippet></ROW><ROW><id>3483544</id><snippet>class LatestSubmission(models.Model):
    user = models.ForeignKey(User)     
    problem = models.ForeignKey(Problem)
    submission = models.ForeignKey(Submission)
</snippet></ROW><ROW><id>3483544</id><snippet>Submission.save()</snippet></ROW><ROW><id>3483544</id><snippet>LatestSubmission</snippet></ROW><ROW><id>3483544</id><snippet>LatestSubmission</snippet></ROW><ROW><id>3483544</id><snippet>LatestSubmission.objects.all().order_by('problem')
</snippet></ROW><ROW><id>3483544</id><snippet>for user in User.objects.all(): # Get all users
    user.submission_set.latest('time') # Pick the latest submission based on time.
</snippet></ROW><ROW><id>3483544</id><snippet>id</snippet></ROW><ROW><id>3483544</id><snippet>Submission</snippet></ROW><ROW><id>3483544</id><snippet>for user in User.objects.all(): # Get all users
    user.submission_set.latest('id') # Pick the latest submission by each user.
</snippet></ROW><ROW><id>3483652</id><snippet>defaultdict</snippet></ROW><ROW><id>3483652</id><snippet>setdefault</snippet></ROW><ROW><id>3483652</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3483652</id><snippet># really verbose
new = {}
for (key, value) in data:
    if key in new:
        new[key].append( value )
    else:
        new[key] = [value]


# easy with setdefault
new = {}
for (key, value) in data:
    group = new.setdefault(key, []) # key might exist already
    group.append( value )


# even simpler with defaultdict 
new = defaultdict(list)
for (key, value) in data:
    new[key].append( value ) # all keys have a default already
</snippet></ROW><ROW><id>3483652</id><snippet>defaultdict</snippet></ROW><ROW><id>3483652</id><snippet>headers = parse_headers( msg ) # parse the message, get a dict
# now add all the optional headers
for headername, defaultvalue in optional_headers:
    headers.setdefault( headername, defaultvalue )
</snippet></ROW><ROW><id>3483692</id><snippet>interface IFoo { ... }
class FooHelper { ... }
class app1.Foo extends Model implements IFoo { ... }
class app2.Foo implements IFoo { ... }
</snippet></ROW><ROW><id>3483692</id><snippet>IFoo</snippet></ROW><ROW><id>3483692</id><snippet>app1.Foo</snippet></ROW><ROW><id>3483692</id><snippet>app2.Foo</snippet></ROW><ROW><id>3483692</id><snippet>FooHelper</snippet></ROW><ROW><id>3483692</id><snippet>bar</snippet></ROW><ROW><id>3483692</id><snippet>interface IFoo { 
    int bar(); 
}

class FooHelper { 
    int bar( object foo ) { ... } 
}

package app1;
class Foo extends Model implements IFoo {
    ...
    int bar() {
        return FooHelper.bar( this );
    }
}

package app2;
class Foo implements IFoo {
    ...
    int bar() {
        return FooHelper.bar( this );
    }
}
</snippet></ROW><ROW><id>3483692</id><snippet># Create a class decorator
def decorate_foo( fooclass ):

    def bar( self ):
        return 0

    fooclass.bar = bar

# Create a class to decorate
class Foo: pass

# Decorate the class
decorate_foo( Foo )

# Use the decorated class
f = Foo()
f.bar()
</snippet></ROW><ROW><id>3483823</id><snippet>for each in grid:
</snippet></ROW><ROW><id>3483823</id><snippet>floodfillque = grid
</snippet></ROW><ROW><id>3483823</id><snippet>collength = 3

grid = []
for x in range(1,collength + 1):
    for y in range(1,collength + 1):
        grid.append([x,y,'e'])

for each in grid:
    floodfilllist = []
    currentfloodfill = []
    print '::'
    print each[1]
</snippet></ROW><ROW><id>3483860</id><snippet>__module__</snippet></ROW><ROW><id>3483860</id><snippet>__name__</snippet></ROW><ROW><id>3483860</id><snippet>repr</snippet></ROW><ROW><id>3483860</id><snippet>&gt;&gt;&gt; class Mcl(type): pass
... 
&gt;&gt;&gt; class A: __metaclass__ = Mcl
...
&gt;&gt;&gt; class B:
...   class __metaclass__(type): pass
... 
&gt;&gt;&gt; type(A)
&lt;class '__main__.Mcl'&gt;
&gt;&gt;&gt; type(B)
&lt;class '__main__.__metaclass__'&gt;
</snippet></ROW><ROW><id>3483860</id><snippet>Mcl</snippet></ROW><ROW><id>3483860</id><snippet>__metaclass__</snippet></ROW><ROW><id>3483860</id><snippet>main</snippet></ROW><ROW><id>3483860</id><snippet>&gt;&gt;&gt; import __main__
&gt;&gt;&gt; __main__.__metaclass__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__metaclass__'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3483860</id><snippet>'%s.%s' % (c.__module__, c.__name__)</snippet></ROW><ROW><id>3483860</id><snippet>class</snippet></ROW><ROW><id>3483860</id><snippet>class</snippet></ROW><ROW><id>3483860</id><snippet>&gt;&gt;&gt; class A(object):
...   def foo(self): print('first')
... 
&gt;&gt;&gt; x = A()
&gt;&gt;&gt; class A(object):
...   def foo(self): print('second')
... 
&gt;&gt;&gt; y = A()
&gt;&gt;&gt; x.foo()
first
&gt;&gt;&gt; y.foo()
second
&gt;&gt;&gt; x.__class__
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; y.__class__
&lt;class '__main__.A'&gt;
&gt;&gt;&gt; x.__class__ is y.__class__
False
</snippet></ROW><ROW><id>3483860</id><snippet>class</snippet></ROW><ROW><id>3483860</id><snippet>A</snippet></ROW><ROW><id>3483860</id><snippet>type</snippet></ROW><ROW><id>3483860</id><snippet>__class__</snippet></ROW><ROW><id>3483860</id><snippet>type</snippet></ROW><ROW><id>3483860</id><snippet>lambda</snippet></ROW><ROW><id>3483860</id><snippet>def</snippet></ROW><ROW><id>3483860</id><snippet>lambda</snippet></ROW><ROW><id>3483860</id><snippet>def</snippet></ROW><ROW><id>3483860</id><snippet>class A(metaclass=Mcl):</snippet></ROW><ROW><id>3483860</id><snippet>__metaclass__</snippet></ROW><ROW><id>3483873</id><snippet>class ReaderControl(wx.richtext.RichTextCtrl):
    def __init__(self, parent, id=-1, value=''):
        wx.richtext.RichTextCtrl.__init__(self, parent, id, value, style=wx.richtext.RE_READONLY, name='ReaderControl'
</snippet></ROW><ROW><id>3484033</id><snippet>scores = [ student.name for student in names if student.gender == "Male" ]
</snippet></ROW><ROW><id>3484033</id><snippet>names</snippet></ROW><ROW><id>3484033</id><snippet>Student</snippet></ROW><ROW><id>3484033</id><snippet>names</snippet></ROW><ROW><id>3484033</id><snippet>names = [ ]
for ( score, gender ) in &lt;some-data-source&gt;:
    names.append( Student( score, gender ) )
</snippet></ROW><ROW><id>3484033</id><snippet>names = [ Student( score, gender ) for score, gender in &lt;some-data-source&gt; ]
</snippet></ROW><ROW><id>3484033</id><snippet>names = [ Student( *row ) for row in &lt;some-data-source&gt; ]
</snippet></ROW><ROW><id>3484033</id><snippet>for</snippet></ROW><ROW><id>3484033</id><snippet>def process_row( row ):
    ...
    return score, gender

names = [ Student( *process_row( row ) ) for row in &lt;some-data-source&gt; ]
</snippet></ROW><ROW><id>3484033</id><snippet>for i in range(len(names)):
    student = Student()
    student = names[i]
    if student.gender == "Male":
        # Whatever
</snippet></ROW><ROW><id>3484033</id><snippet>student = Student()</snippet></ROW><ROW><id>3484033</id><snippet>student</snippet></ROW><ROW><id>3484033</id><snippet>for student in students:
   if student.gender == "Male":
       # Whatever
</snippet></ROW><ROW><id>3484033</id><snippet>range(n)</snippet></ROW><ROW><id>3484033</id><snippet>names</snippet></ROW><ROW><id>3484033</id><snippet>for</snippet></ROW><ROW><id>3484033</id><snippet>student</snippet></ROW><ROW><id>3484033</id><snippet>Student</snippet></ROW><ROW><id>3484033</id><snippet>students</snippet></ROW><ROW><id>3484033</id><snippet>student.gender</snippet></ROW><ROW><id>3484033</id><snippet>gender</snippet></ROW><ROW><id>3484033</id><snippet>student</snippet></ROW><ROW><id>3484242</id><snippet>class Interval {

  private length;
  private point_count;

  constructor(length) {
    this.length = length;
    this.point_count = 0;
  }

  public add_point() {
    this.point_count++;
  }

  public length() {
    return this.length;
  }

  // The current length of each sub-interval
  public sub_length() {
    return this.length / (this.point_count + 1);
  }

  // The sub-interval length if you were to add another point
  public next_sub_length() { 
    return this.length / (this.point_count + 2);
  }

  public point_count() {
    return this.point_count;
  }
}
</snippet></ROW><ROW><id>3484421</id><snippet>t</snippet></ROW><ROW><id>3484421</id><snippet>for x in range(22): #Remember that the range function returns integers up to 22-1
    exec "f%02d = open('file%02d.txt', 'w')" % (x, x)
</snippet></ROW><ROW><id>3484421</id><snippet>exec</snippet></ROW><ROW><id>3484421</id><snippet>fXX</snippet></ROW><ROW><id>3484421</id><snippet>fileXX.txt</snippet></ROW><ROW><id>3484421</id><snippet>fXX</snippet></ROW><ROW><id>3484456</id><snippet>def smallest_diff_key(A, B):
    """return the smallest key adiff in A such that A[adiff] != B[bdiff]"""
    diff_keys = [k for k in A if A.get(k) != B.get(k)]
    return min(diff_keys)

def dict_cmp(A, B):
    if len(A) != len(B):
        return cmp(len(A), len(B))
    adiff = smallest_diff_key(A, B)
    bdiff = smallest_diff_key(B, A)
    if adiff != bdiff:
        return cmp(adiff, bdiff)
    return cmp(A[adiff], b[bdiff])
</snippet></ROW><ROW><id>3484501</id><snippet>self.v_sizer.Fit(self)</snippet></ROW><ROW><id>3484501</id><snippet>onOpenFileDialog()</snippet></ROW><ROW><id>3484660</id><snippet>x</snippet></ROW><ROW><id>3484660</id><snippet>matplotlib</snippet></ROW><ROW><id>3484946</id><snippet>eval</snippet></ROW><ROW><id>3484946</id><snippet>exec</snippet></ROW><ROW><id>3484946</id><snippet>globals</snippet></ROW><ROW><id>3484946</id><snippet>locals</snippet></ROW><ROW><id>3484946</id><snippet>vars</snippet></ROW><ROW><id>3484946</id><snippet>feeds = {}
for item in whatever:
    feeds[item[0]] = lw.twitterWeather(*item[1:])

def getWeather(feeds, accountList):
    for item in accountList:
        print '%s: %s' % (item, feeds[item].parseFeed())
</snippet></ROW><ROW><id>3485082</id><snippet>from twisted.protocols.basic import Int32StringReceiver

class YourProtocol(Int32StringReceiver):
    def connectionMade(self):
        self.sendString('This string will automatically have its length '
            'prepended before it\'s sent over the wire!')

    def stringReceived(self, string):
        print ('Received %r, which came in with a prefixed length, but which '
            'has been stripped off for convenience.' % (string,))
</snippet></ROW><ROW><id>3485416</id><snippet>r1, r2, r3 = [foo(x) for x in [x1, x2, x3]]
</snippet></ROW><ROW><id>3485416</id><snippet>ijs = [(i1, j1), (i2, j2), (i3, j3)]
for i, j in ijs:
    bar(i, j)
</snippet></ROW><ROW><id>3485416</id><snippet>old_colors = self.get_pixel_colors(x, y)
new_colors = function(*old_colors)
if new_colors:
    self.set_pixel_colors(x, y, *new_colors)
</snippet></ROW><ROW><id>3485469</id><snippet>import sys, os, string, threading
import paramiko

cmd = "grep -h 'king' /opt/data/horror_20100810*"

outlock = threading.Lock()

def workon(host):

    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(host, username='xy', password='xy')
    stdin, stdout, stderr = ssh.exec_command(cmd)
    stdin.write('xy\n')
    stdin.flush()

    with outlock:
        print stdout.readlines()

def main():
    hosts = ['10.10.3.10', '10.10.4.12', '10.10.2.15', ] # etc
    threads = []
    for h in hosts:
        t = threading.Thread(target=workon, args=(h,))
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

main()
</snippet></ROW><ROW><id>3485490</id><snippet>import collections

class ROListSlice(collections.sequence):

    def __init__(self, alist, start, alen):
        self.alist = alist
        self.start = start
        self.alen = alen

    def __len__(self):
        return self.alen

    def adj(self, i):
        if i&lt;0: i += self.alen
        return i + self.start

    def __getitem__(self, i):
        return self.alist[self.adj(i)]
</snippet></ROW><ROW><id>3485490</id><snippet>__setitem__</snippet></ROW><ROW><id>3485490</id><snippet>__delitem__</snippet></ROW><ROW><id>3485490</id><snippet>insert</snippet></ROW><ROW><id>3485490</id><snippet>class ListSlice(ROListSlice):

    def __setitem__(self, i, v):
        self.alist[self.adj(i)] = v

    def __delitem__(self, i, v):
        del self.alist[self.adj(i)]
        self.alen -= 1

    def insert(self, i, v):
        self.alist.insert(self.adj(i), v)
        self.alen += 1
</snippet></ROW><ROW><id>3485519</id><snippet>import Tkinter
import sys

class App(Tkinter.Tk):
    def __init__(self):
        Tkinter.Tk.__init__(self)
        menubar = Tkinter.Menu(self)
        fileMenu = Tkinter.Menu(menubar, tearoff=False)
        menubar.add_cascade(label="File",underline=0, menu=fileMenu)
        fileMenu.add_command(label="Exit", underline=1, 
                             command=quit, accelerator="Ctrl+Q")
        self.config(menu=menubar)

        self.bind_all("&lt;Control-q&gt;", self.quit)

    def quit(self, event):
        print "quitting..."
        sys.exit(0)

if __name__ == "__main__":
    app=App()
    app.mainloop()
</snippet></ROW><ROW><id>3485554</id><snippet>now</snippet></ROW><ROW><id>3485554</id><snippet>now()</snippet></ROW><ROW><id>3485554</id><snippet>datetime</snippet></ROW><ROW><id>3485554</id><snippet>datetime</snippet></ROW><ROW><id>3485554</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; x = datetime.datetime.now()
&gt;&gt;&gt; x
datetime.datetime(2010, 8, 14, 16, 26, 6, 592441)
&gt;&gt;&gt; time.sleep(5)
&gt;&gt;&gt; x
datetime.datetime(2010, 8, 14, 16, 26, 6, 592441)
</snippet></ROW><ROW><id>3485636</id><snippet>python-</snippet></ROW><ROW><id>3485636</id><snippet>apt-get dist-upgrade</snippet></ROW><ROW><id>3485636</id><snippet>easy_install</snippet></ROW><ROW><id>3485636</id><snippet>yolk -l</snippet></ROW><ROW><id>3485636</id><snippet>easy_install</snippet></ROW><ROW><id>3486047</id><snippet>pack = packet[:]</snippet></ROW><ROW><id>3486047</id><snippet>pack = list(packet)</snippet></ROW><ROW><id>3486047</id><snippet>return ''.join(pack)</snippet></ROW><ROW><id>3486151</id><snippet>.bat</snippet></ROW><ROW><id>3486151</id><snippet>PortablePython</snippet></ROW><ROW><id>3486151</id><snippet>.1</snippet></ROW><ROW><id>3486252</id><snippet>&lt;font&gt;</snippet></ROW><ROW><id>3486252</id><snippet>&lt;font&gt;</snippet></ROW><ROW><id>3486252</id><snippet>from BeautifulSoup import BeautifulSoup


html = open("products.html").read()
soup = BeautifulSoup(html)

product_codes = [tag.parent.findNextSiblings('font')[0].contents[0]
                 for tag in 
                 soup.findAll(text='Product Code#')]
</snippet></ROW><ROW><id>3486275</id><snippet>connect</snippet></ROW><ROW><id>3486275</id><snippet>    self.connect(self.okButton, QtCore.SIGNAL("clicked()"),
                 self, QtCore.SLOT("accept()"))
</snippet></ROW><ROW><id>3486355</id><snippet>import urlparse
u = 'http://www.example.com/cgi-bin/blahblah?&amp;PC=abd23423&amp;uy=020'
query = urlparse.urlparse(u).query
urlparse.parse_qs(query) # {'PC': ['abd23423'], 'uy': ['020']}
</snippet></ROW><ROW><id>3486355</id><snippet>import urlparse, re

u = 'http://www.example.com/cgi-bin/blahblah?&amp;PC=abd23423&amp;uy=020'
query = urlparse.urlparse(u).query

pattern = re.compile('PC=(\w*)&amp;uy')
pattern.findall(query) # ['abd23423']
</snippet></ROW><ROW><id>3486387</id><snippet>print my_string[0:100]
</snippet></ROW><ROW><id>3486511</id><snippet>from jinja2 import Template

items = [
    ['foo', 'bar'],
    ['bax', 'quux', 'ketchup', 'mustard'],
    ['bacon', 'eggs'],
    ]

print Template("""
{% set counter = 0 -%}
{% for group in items -%}
  {% for item in group -%}
    item={{ item }}, count={{ counter + loop.index0 }}
  {% endfor -%}
  {% set counter = counter + group|length %}
{% endfor -%}
""").render(items=items)
</snippet></ROW><ROW><id>3486511</id><snippet>item=foo, count=0
  item=bar, count=1

item=bax, count=2
  item=quux, count=3
  item=ketchup, count=4
  item=mustard, count=5

item=bacon, count=6
  item=eggs, count=7
</snippet></ROW><ROW><id>3486574</id><snippet>Queue</snippet></ROW><ROW><id>3486617</id><snippet>readline</snippet></ROW><ROW><id>3486617</id><snippet>readline</snippet></ROW><ROW><id>3486617</id><snippet>editline</snippet></ROW><ROW><id>3486617</id><snippet>libedit</snippet></ROW><ROW><id>3486617</id><snippet>$ python -c 'import sys;print(sys.version);print(sys.executable)'
2.6.5 (r265:79063, Jul 15 2010, 01:53:46) 
[GCC 4.2.1 (Apple Inc. build 5659)]
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python

$ otool -L $(python -c 'import readline; print(readline.__file__)')
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload/readline.so:
    /opt/local/lib/libreadline.6.1.dylib (compatibility version 6.0.0, current version 6.1.0)
    /opt/local/lib/libncursesw.5.dylib (compatibility version 5.0.0, current version 5.0.0)
    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)
</snippet></ROW><ROW><id>3486617</id><snippet>/opt/local/</snippet></ROW><ROW><id>3486617</id><snippet>otool</snippet></ROW><ROW><id>3486617</id><snippet>readline</snippet></ROW><ROW><id>3486617</id><snippet>readline</snippet></ROW><ROW><id>3486992</id><snippet>exec</snippet></ROW><ROW><id>3486992</id><snippet>exec</snippet></ROW><ROW><id>3486992</id><snippet>print</snippet></ROW><ROW><id>3486992</id><snippet>libgmail</snippet></ROW><ROW><id>3487359</id><snippet>data[0]</snippet></ROW><ROW><id>3487359</id><snippet>data[1]</snippet></ROW><ROW><id>3487359</id><snippet>data</snippet></ROW><ROW><id>3487359</id><snippet>data</snippet></ROW><ROW><id>3487359</id><snippet>self.data=data
</snippet></ROW><ROW><id>3487359</id><snippet>self.data=data[:]
</snippet></ROW><ROW><id>3487359</id><snippet>init</snippet></ROW><ROW><id>3487359</id><snippet>#!/usr/bin/python

import threading
import time
import random
#the list "data" must contain two values.
#The second must always be equal to the first multiplied by 4

class GeneratorThread(threading.Thread):
    #Thread for generating value pairs
    def __init__(self,data):
        threading.Thread.__init__(self)
        self.datamutex=datamutex         # save reference to the mutex.
        self.data=data
    def run(self):
        while True:
            #Pick a new first number
            num=random.randint(0,100)
            self.datamutex.acquire()     # get the mutex.
            self.data[0]=num
            #simulate some processing
          #to calculate second number
            time.sleep(1)
            #Place second value into ata
            self.data[1]=num*4
            self.datamutex.release()     # release it to allow other thread
                                         #  to run now that data is consistent.
            time.sleep(1)
</snippet></ROW><ROW><id>3487359</id><snippet>class ProcessorThread(threading.Thread):
    #Thread for processing value pairs
    def __init__(self,data):
        threading.Thread.__init__(self)
        self.datamutex=datamutex         # save mutex reference.
        self.data=data
    def run(self):
        while True:
            #Process current data
            self.datamutex.acquire()     # lock (can only happen if data consistent).
            num1=self.data[0]
            num2=self.data[1]
            self.datamutex.release()     # release it to allow updates.

            print "Values are %d and %d."%(num1,num2)
            if num2!=num1*4:
                print "\tDATA INCONSISTENCY!"
            time.sleep(2)

if __name__=="__main__":
    datamutex = threading.Lock()         # Create the mutex for both threads.
    data=[1,4]
    t1=GeneratorThread(data)
    t2=ProcessorThread(data)
    t1.start()
    t2.start()
</snippet></ROW><ROW><id>3487408</id><snippet>&gt;&gt;&gt; import twill.commands
&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; 
&gt;&gt;&gt; class browser:
...    def __init__(self, url="http://www.google.com",log = None):
...       self.a=twill.commands
...       self.a.config("readonly_controls_writeable", 1)
...       self.b = self.a.get_browser()
...       self.b.set_agent_string("Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14")
...       self.log = log
...       self.b.clear_cookies()
...       self.url=url
...    def googleQuery(self, query="python code"):
...       self.b.go(self.url)
...       #self.b.showforms()
...       f = self.b.get_form("f")
...       #print "form is %s" % f
...       f["q"] = query
...       self.b.clicked(f, "btnG")
...       self.b.submit()
...       pageContent = self.b.get_html()
...       soup=BeautifulSoup.BeautifulSoup(pageContent)
...       ths = soup.findAll(attrs={"class" : "l"})
...       for a in ths:
...          print a
... 
&gt;&gt;&gt; t=browser()
&gt;&gt;&gt; t.googleQuery("twill queries")
==&gt; at http://www.google.ie/
Note: submit is using submit button: name="btnG", value="Google Search"

&lt;a href="http://pyparsing.wikispaces.com/WhosUsingPyparsing" class="l" onmousedown="return clk    (this.href,'','','res','1','','0CBMQFjAA')"&gt;pyparsing - WhosUsingPyparsing&lt;/a&gt;
&lt;a href="http://www.mail-archive.com/twill@lists.idyll.org/msg00048.html" class="l" onmousedown="return clk(this.href,'','','res','2','','0CBcQFjAB')"&gt;Re: [&lt;em&gt;twill&lt;/em&gt;] &lt;em&gt;query&lt;/em&gt;: docs, and web site.&lt;/a&gt;
&lt;a href="http://www.mail-archive.com/twill@lists.idyll.org/msg00050.html" class="l" onmousedown="return clk(this.href,'','','res','3','','0CBkQFjAC')"&gt;Re: [&lt;em&gt;twill&lt;/em&gt;] &lt;em&gt;query&lt;/em&gt;: docs, and web site.&lt;/a&gt;
&lt;a href="http://www.genealogytoday.com/surname/finder.mv?Surname=Twill" class="l" onmousedown="return clk(this.href,'','','res','4','','0CB4QFjAD')"&gt;&lt;em&gt;Twill&lt;/em&gt; Genealogy and Family Tree Resources - Surname Finder&lt;/a&gt;
&lt;a href="http://a706cheap-apparel.hobby-site.com/ladies-cotton-faded-twill-le-chameau-breeks-42" class="l" onmousedown="return clk(this.href,'','','res','5','','0CCEQFjAE')"&gt;Ladies Cotton Faded &lt;em&gt;Twill&lt;/em&gt; Le Chameau Breeks 42&lt;/a&gt;
&lt;a href="http://twill.idyll.org/examples.html" class="l" onmousedown="return clk(this.href,'','','res','6','','0CCMQFjAF')"&gt;&lt;em&gt;twill&lt;/em&gt; Examples&lt;/a&gt;
&lt;a href="http://panjiva.com/Sri-Lankan-Manufacturers-Of/twill+capri" class="l" onmousedown="return clk(this.href,'','','res','7','','0CCcQFjAG')"&gt;Sri-Lankan &lt;em&gt;Twill&lt;/em&gt; Capri Manufacturers | Sri-Lankan Suppliers of &lt;b&gt;...&lt;/b&gt;&lt;/a&gt;
&lt;a href="http://c586cheap-apparel.dyndns.ws/twill-beige-blazer" class="l" onmousedown="return clk(this.href,'','','res','8','','0CCoQFjAH')"&gt;&lt;em&gt;Twill&lt;/em&gt; beige blazer&lt;/a&gt;
&lt;a href="http://stackoverflow.com/questions/2267537/how-do-you-use-relative-paths-for-twill-tests" class="l" onmousedown="return clk(this.href,'','','res','9','','0CCwQFjAI')"&gt;How do you use Relative Paths for &lt;em&gt;Twill&lt;/em&gt; tests? - Stack Overflow&lt;/a&gt;
&lt;a href="http://mytextilenotes.blogspot.com/2010/01/introduction-to-twill-weave.html" class="l" onmousedown="return clk(this.href,'','','res','10','','0CC8QFjAJ')"&gt;My Textile Notes: Introduction to &lt;em&gt;Twill&lt;/em&gt; Weave&lt;/a&gt;
</snippet></ROW><ROW><id>3487449</id><snippet>type</snippet></ROW><ROW><id>3487449</id><snippet>type</snippet></ROW><ROW><id>3487449</id><snippet>self.</snippet></ROW><ROW><id>3487449</id><snippet>self.&lt;variable name&gt;</snippet></ROW><ROW><id>3487449</id><snippet>class TypedList(list):
    def __init__(self, type):
        self.type = type

    def append(self, item):
        if not isinstance(item, self.type):
            raise TypeError, 'item is not of type %s' % self.type
        super(TypedList, self).append(item)  #append the item to itself (the list)

from types import *
tl = TypedList(StringType)
tl.append('abc')
tl.append(None)
Traceback (most recent call last):
  File "&lt;pyshell#25&gt;", line 1, in &lt;module&gt;
    tl.append(None)
  File "&lt;pyshell#22&gt;", line 7, in append
    raise TypeError, 'item is not of type %s' % self.type
TypeError: item is not of type &lt;type 'str'&gt;
</snippet></ROW><ROW><id>3487495</id><snippet>__</snippet></ROW><ROW><id>3487495</id><snippet>MyOrder.objects.filter(order_date__year = 2010)
</snippet></ROW><ROW><id>3487844</id><snippet>yield</snippet></ROW><ROW><id>3487844</id><snippet># yield_vs_append.py
data = range(1000)

def yielding():
    def yielder():
        for d in data:
            yield d
    return list(yielder())

def appending():
    lst = []
    for d in data:
        lst.append(d)
    return lst
</snippet></ROW><ROW><id>3487844</id><snippet>python2.7 -m timeit -s "from yield_vs_append import yielding,appending" "yielding()"
10000 loops, best of 3: 80.1 usec per loop

python2.7 -m timeit -s "from yield_vs_append import yielding,appending" "appending()"
10000 loops, best of 3: 130 usec per loop
</snippet></ROW><ROW><id>3487844</id><snippet>yield</snippet></ROW><ROW><id>3488013</id><snippet>import datetime as DT
from matplotlib import pyplot as plt
from matplotlib.dates import date2num

data = [(DT.datetime.strptime('2010-02-05', "%Y-%m-%d"), 123),
        (DT.datetime.strptime('2010-02-19', "%Y-%m-%d"), 678),
        (DT.datetime.strptime('2010-03-05', "%Y-%m-%d"), 987),
        (DT.datetime.strptime('2010-03-19', "%Y-%m-%d"), 345)]

x = [date2num(date) for (date, value) in data]
y = [value for (date, value) in data]

fig = plt.figure()

graph = fig.add_subplot(111)

# Plot the data as a red line with round markers
graph.plot(x,y,'r-o')

# Set the xtick locations to correspond to just the dates you entered.
graph.set_xticks(x)

# Set the xtick labels to correspond to just the dates you entered.
graph.set_xticklabels(
        [date.strftime("%Y-%m-%d") for (date, value) in data]
        )

plt.show()
</snippet></ROW><ROW><id>3488013</id><snippet>plt.bar()</snippet></ROW><ROW><id>3488013</id><snippet>plt.plot()</snippet></ROW><ROW><id>3488155</id><snippet>pdb</snippet></ROW><ROW><id>3488155</id><snippet>ipdb</snippet></ROW><ROW><id>3488155</id><snippet>ipython</snippet></ROW><ROW><id>3488155</id><snippet>ipdb</snippet></ROW><ROW><id>3488155</id><snippet>pdb</snippet></ROW><ROW><id>3488298</id><snippet>value</snippet></ROW><ROW><id>3488298</id><snippet>class Wizvar</snippet></ROW><ROW><id>3488298</id><snippet>class Wizvar():
        value = None

    def select(self):
        self.selected = True

    def unselect(self):
        self.selected = False
</snippet></ROW><ROW><id>3488298</id><snippet>% test.py
  File "/home/unutbu/pybin/test.py", line 7
    def select(self):
                    ^
IndentationError: unindent does not match any outer indentation level
</snippet></ROW><ROW><id>3488339</id><snippet>python.org</snippet></ROW><ROW><id>3488360</id><snippet>c_char_p</snippet></ROW><ROW><id>3488360</id><snippet>char *</snippet></ROW><ROW><id>3488360</id><snippet>typedef struct
{
  char TerminalId[8+1];
  char AcquirerId[11+1];
  char TransactionType[3+1];

&amp;c
</snippet></ROW><ROW><id>3488360</id><snippet>typedef struct
{
  char* TerminalId;
  char* AcquirerId;
  char* TransactionType;

&amp;c
</snippet></ROW><ROW><id>3488473</id><snippet># first try with exceptions
def nonempty( iter ):
    """ returns `iter` if iter is not empty, else raises TypeError """
    try:
        first = next(iter)
    except StopIteration:
        raise TypeError("Emtpy Iterator")
    yield first
    for item in iter:
        yield item


# a version without exceptions. Seems nicer:
def isempty( iter ):
    """ returns `(True, ())` if `iter` if is empty else `(False, iter)`
         Don't use the original iterator! """
    try:
        first = next(iter)
    except StopIteration:
        return True, ()
    else:
        def iterator():
            yield first
            for item in iter:
                yield item
        return False, iterator()



for x in ([],[1]):
    # first version
    try:
        list(nonempty(iter(x))) # trying to consume a empty iterator raises
    except TypeError:
        print x, "is empty"
    else:
        print x, "is not empty"

    # with isempty
    empty, it = isempty(iter(x))
    print x,  "is", ("empty" if empty else "not empty")
</snippet></ROW><ROW><id>3488535</id><snippet>db1 = dbConnections.dbConnn
</snippet></ROW><ROW><id>3488535</id><snippet>dbConn</snippet></ROW><ROW><id>3488535</id><snippet>db1</snippet></ROW><ROW><id>3488535</id><snippet>db1 = dbConnections.dbConnn()
</snippet></ROW><ROW><id>3488635</id><snippet>twisted.protocols.policies.ThrottlingFactory</snippet></ROW><ROW><id>3488743</id><snippet>\r</snippet></ROW><ROW><id>3488743</id><snippet>import time
import sys
for i in range(100):
    print i,
    sys.stdout.flush()
    time.sleep(1)
    print "\r",
</snippet></ROW><ROW><id>3488753</id><snippet>identi.ca</snippet></ROW><ROW><id>3488753</id><snippet>api_root</snippet></ROW><ROW><id>3488753</id><snippet>/api</snippet></ROW><ROW><id>3488999</id><snippet>simplejson.dumps(somearray.tolist())</snippet></ROW><ROW><id>3488999</id><snippet>simplejson</snippet></ROW><ROW><id>3488999</id><snippet>json</snippet></ROW><ROW><id>3488999</id><snippet>json</snippet></ROW><ROW><id>3488999</id><snippet>simplejson</snippet></ROW><ROW><id>3488999</id><snippet>default</snippet></ROW><ROW><id>3488999</id><snippet>numpy.array</snippet></ROW><ROW><id>3489050</id><snippet>dateutil</snippet></ROW><ROW><id>3489050</id><snippet>&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; (datetime.now() - relativedelta(months=2)).replace(day=1)
datetime.datetime(2010, 6, 1, 13, 16, 29, 643077)
&gt;&gt;&gt; (datetime(2010, 4, 30) - relativedelta(months=2)).replace(day=1)
datetime.datetime(2010, 2, 1, 0, 0)
&gt;&gt;&gt; (datetime(2010, 2, 28) - relativedelta(months=2)).replace(day=1)
datetime.datetime(2009, 12, 1, 0, 0)
</snippet></ROW><ROW><id>3489088</id><snippet>DeferredList</snippet></ROW><ROW><id>3489088</id><snippet>twisAmaz</snippet></ROW><ROW><id>3489088</id><snippet>callbacks</snippet></ROW><ROW><id>3489088</id><snippet>DeferredList</snippet></ROW><ROW><id>3489088</id><snippet>value</snippet></ROW><ROW><id>3489088</id><snippet>DeferredList</snippet></ROW><ROW><id>3489088</id><snippet>from twisted.internet import defer

def twisAmaz(contents):
    stonesoup = BeautifulStoneSoup(contents)
    ret = {}
    if stonesoup.find("mediumimage") is None:
        ret['imageurl'] = "/images/notfound.png"
    else:
        ret['imageurl'] = stonesoup.find("mediumimage").url.contents[0]
    ret['usedPdata'] = stonesoup.find("lowestusedprice")
    ret['newPdata'] = stonesoup.find("lowestnewprice")
    ret['titledata'] = stonesoup.find("title")
    ret['reviewdata'] = stonesoup.find("editorialreview")
    if stonesoup.find("asin") is not None:
        ret['asin'] = stonesoup.find("asin").contents[0]
    else:
        ret['asin'] = 'None'
    return ret

callbacks = []
for tmpISBN in isbn:  #Go through ISBN numbers and get Amazon API information for each
    callbacks.append(getPage(fetchInfo(tmpISBN)).addCallback(twisAmazon))

def printResult(result):
    for e, (success, value) in enumerate(result):
        print ('[%r]:' % isbn[e]),
        if success:
            print 'Success:', value
        else:
            print 'Failure:', value.getErrorMessage()

callbacks = defer.DeferredList(callbacks)
callbacks.addCallback(printResult)

reactor.run()
</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>dict</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>dict</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489100</id><snippet>collections.Counter</snippet></ROW><ROW><id>3489100</id><snippet>dict</snippet></ROW><ROW><id>3489100</id><snippet>collections</snippet></ROW><ROW><id>3489100</id><snippet>collections.defaultdict(int)</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>dict</snippet></ROW><ROW><id>3489100</id><snippet>set</snippet></ROW><ROW><id>3489100</id><snippet>list</snippet></ROW><ROW><id>3489333</id><snippet>cmd = """osascript -e 'tell app "Finder" to sleep'"""
def stupidtrick():
    os.system(cmd)
</snippet></ROW><ROW><id>3489333</id><snippet>subprocess</snippet></ROW><ROW><id>3489333</id><snippet>os.system</snippet></ROW><ROW><id>3489361</id><snippet>Options +FollowSymLinks 
RewriteEngine on 
RewriteCond %{HTTP_HOST} ^colorurl.com [NC] 
RewriteRule ^(.*)$ http://www.colorurl.com/$1 [L,R=301]
</snippet></ROW><ROW><id>3489528</id><snippet>dest_url</snippet></ROW><ROW><id>3489528</id><snippet>create_login_url</snippet></ROW><ROW><id>3489528</id><snippet>None</snippet></ROW><ROW><id>3489528</id><snippet>dest_url</snippet></ROW><ROW><id>3489805</id><snippet>if __name__ == "__main__":
    # do something if this script is invoked
    # as python scriptname. Otherwise, gets ignored.
</snippet></ROW><ROW><id>3489805</id><snippet>__name__</snippet></ROW><ROW><id>3489805</id><snippet>"__main__"</snippet></ROW><ROW><id>3489805</id><snippet>def somescriptfunc():
    # does something
    pass


if __name__ == "__main__":
    # do something if this script is invoked
    # as python scriptname. Otherwise, gets ignored.

    import cProfile
    cProfile.run('somescriptfunc()')
</snippet></ROW><ROW><id>3489805</id><snippet># do some stuff to extract the parameters
# do something with the parameters
# return the response.
</snippet></ROW><ROW><id>3489805</id><snippet>def do_something_with_parameters(param1, param2):
    pass

if __name__ = "__main__":
    import cProfile
    cProfile.run('do_something_with_parameters(param1=\'sometestvalue\')')
</snippet></ROW><ROW><id>3489805</id><snippet>import {insert name of script from above here}

# do something to determine parameter values
# do something with them *via the function*:
do_something_with_parameters(param1=..., param2=...)
# return something
</snippet></ROW><ROW><id>3489851</id><snippet>c</snippet></ROW><ROW><id>3489851</id><snippet>range(1,20)</snippet></ROW><ROW><id>3489851</id><snippet>exec</snippet></ROW><ROW><id>3489851</id><snippet>from __future__ import with_statement</snippet></ROW><ROW><id>3489851</id><snippet>f00 = open('file00.txt').readlines()
for w in range(1, 21):
    for x in range(100):
        with open('file%02d.txt' % w) as f:
            for line in f:
                xvp = float(line)
                for line00 in f00:
                    rvp = float(line00)
                    do_stuff(xvp, rvp)
</snippet></ROW><ROW><id>3489851</id><snippet>file00.txt</snippet></ROW><ROW><id>3489851</id><snippet>file00.txt</snippet></ROW><ROW><id>3489851</id><snippet>import itertools</snippet></ROW><ROW><id>3489851</id><snippet>with</snippet></ROW><ROW><id>3489851</id><snippet>            for line00, line in itertools.izip(f00, f):
                rvp = float(line00)
                xvp = float(line)
                do_stuff(xvp, rvp)
</snippet></ROW><ROW><id>3489851</id><snippet>file00.txt</snippet></ROW><ROW><id>3489851</id><snippet>f00</snippet></ROW><ROW><id>3489851</id><snippet>file00.txt</snippet></ROW><ROW><id>3489851</id><snippet>f00 =</snippet></ROW><ROW><id>3489851</id><snippet>with open('file00.txt') as f:
  rvps = [float(line) for line in f]
</snippet></ROW><ROW><id>3489851</id><snippet>rvps</snippet></ROW><ROW><id>3489851</id><snippet>f00</snippet></ROW><ROW><id>3489851</id><snippet>itertools.izip</snippet></ROW><ROW><id>3489851</id><snippet>            for rvp, line in itertools.izip(rvps, f):
                xvp = float(line)
                do_stuff(xvp, rvp)
</snippet></ROW><ROW><id>3489851</id><snippet>'r'</snippet></ROW><ROW><id>3489851</id><snippet>float</snippet></ROW><ROW><id>3489851</id><snippet>float</snippet></ROW><ROW><id>3489851</id><snippet>file20.txt</snippet></ROW><ROW><id>3489851</id><snippet>range</snippet></ROW><ROW><id>3489851</id><snippet>range(1, 21)</snippet></ROW><ROW><id>3489851</id><snippet>with open(...) as f:</snippet></ROW><ROW><id>3489851</id><snippet>f</snippet></ROW><ROW><id>3489851</id><snippet>open</snippet></ROW><ROW><id>3489851</id><snippet>with</snippet></ROW><ROW><id>3489851</id><snippet>f</snippet></ROW><ROW><id>3489851</id><snippet>for line in f:</snippet></ROW><ROW><id>3489851</id><snippet>f</snippet></ROW><ROW><id>3489851</id><snippet>rvps = [float(line) for line in f]</snippet></ROW><ROW><id>3489851</id><snippet>itertools.izip</snippet></ROW><ROW><id>3489851</id><snippet>zip</snippet></ROW><ROW><id>3489851</id><snippet>itertools.izip</snippet></ROW><ROW><id>3489851</id><snippet>itertools</snippet></ROW><ROW><id>3489922</id><snippet>virutalenv</snippet></ROW><ROW><id>3489922</id><snippet>virtualenv</snippet></ROW><ROW><id>3489922</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/</snippet></ROW><ROW><id>3489922</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>3489922</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>3489922</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>3489922</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>3489922</id><snippet>/opt/local/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>../Versions/x.x/bin</snippet></ROW><ROW><id>3489922</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions/
$ ls -l
total 8
drwxrwxr-x  8 root  admin  340 Dec 23  2008 2.5/
drwxrwxr-x  8 root  admin  340 Aug 10 21:42 2.6/
drwxrwxr-x  8 root  admin  340 Jul  3 12:24 2.7/
drwxrwxr-x  7 root  admin  306 Mar 23 17:42 3.1/
drwxrwxr-x  7 root  admin  306 Aug 10 22:14 3.2/
lrwxr-xr-x  1 root  admin    3 Aug 10 21:47 Current@ -&gt; 2.6
$ cd 2.6
$ ls -l
total 7776
lrwxr-xr-x  1 root  admin       17 Aug 10 21:47 Headers@ -&gt; include/python2.6
drwxrwxr-x  3 root  admin      102 Aug 10 21:42 Mac/
-r-xrwxr-x  1 root  admin  3973552 Aug 10 21:41 Python*
drwxrwxr-x  4 root  admin      170 Aug 10 21:48 Resources/
drwxrwxr-x  2 root  admin      578 Aug 12 15:19 bin/
drwxrwxr-x  3 root  admin      102 Aug 10 21:42 include/
drwxrwxr-x  3 root  admin      646 Aug 10 21:43 lib/
drwxrwxr-x  3 root  admin      102 Aug 10 21:41 share/
$ ls -l bin
total 264
-rwxrwxr-x  1 root  admin    150 Aug 10 21:41 2to3*
-rwxr-xr-x  1 nad   admin    360 Aug 12 15:19 easy_install*
-rwxr-xr-x  1 nad   admin    368 Aug 12 15:19 easy_install-2.6*
lrwxr-xr-x  1 root  admin      7 Aug 10 21:47 idle@ -&gt; idle2.6
-rwxrwxr-x  1 root  admin    138 Aug 10 21:41 idle2.6*
lrwxr-xr-x  1 root  admin      8 Aug 10 21:47 pydoc@ -&gt; pydoc2.6
-rwxrwxr-x  1 root  admin    123 Aug 10 21:41 pydoc2.6*
lrwxr-xr-x  1 root  admin      9 Aug 10 21:47 python@ -&gt; python2.6
lrwxr-xr-x  1 root  admin     16 Aug 10 21:47 python-config@ -&gt; python2.6-config
-rwxrwxr-x  1 root  admin  29584 Aug 10 21:43 python2.6*
-rwxrwxr-x  1 root  admin   1463 Aug 10 21:42 python2.6-config*
lrwxr-xr-x  1 root  admin     10 Aug 10 21:47 pythonw@ -&gt; pythonw2.6
-rwxrwxr-x  1 root  admin  29584 Aug 10 21:43 pythonw2.6*
lrwxr-xr-x  1 root  admin     11 Aug 10 21:47 smtpd.py@ -&gt; smtpd2.6.py
-rwxrwxr-x  1 root  admin  18272 Aug 10 21:41 smtpd2.6.py*
</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>$ cd /opt/local/Library/Frameworks/Python.framework/Versions/2.6
$ ls -l bin
total 952
-rwxr-xr-x  2 root  wheel    160 Jul 15 01:56 2to3*
-rwxr-xr-x  2 root  wheel   1541 Jun  8 19:59 apirst2html.py*
-rwxr-xr-x  2 root  wheel    363 Oct  5  2009 bdist_mpkg*
[...]
-rwxr-xr-x  2 root  wheel    211 Jun  2 12:45 django-admin.py*
-rwxr-xr-x  2 root  wheel    410 Jul 15 17:30 easy_install*
-rwxr-xr-x  2 root  wheel    418 Jul 15 17:30 easy_install-2.6*
[...]
-rwxr-xr-x  2 root  wheel    368 Jun 24 02:00 pip*
-rwxr-xr-x  1 root  wheel    342 Sep 18  2009 pkginfo*
[...]
lrwxr-xr-x  1 root  wheel      9 Jul 15 01:58 python@ -&gt; python2.6
lrwxr-xr-x  1 root  wheel     16 Jul 15 01:58 python-config@ -&gt; python2.6-config
-rwxr-xr-x  2 root  wheel  24932 Jul 15 01:57 python2.6*
-rwxr-xr-x  2 root  wheel   1473 Jul 15 01:57 python2.6-config*
[...]
</snippet></ROW><ROW><id>3489922</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>3489922</id><snippet>/opt/local/Library/Frameworks</snippet></ROW><ROW><id>3489922</id><snippet>PATH</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>PATH</snippet></ROW><ROW><id>3489922</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>3489922</id><snippet>export PATH="/opt/local/Library/Frameworks/Python.framework/Versions/2.6/bin:/opt/local/bin:$PATH
</snippet></ROW><ROW><id>3489922</id><snippet>export PATH="/Library/Frameworks/Python.framework/Versions/2.6/bin:$PATH
</snippet></ROW><ROW><id>3489922</id><snippet>pip</snippet></ROW><ROW><id>3489922</id><snippet>easy_install</snippet></ROW><ROW><id>3489922</id><snippet>Distribute</snippet></ROW><ROW><id>3489922</id><snippet>setuptools</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>sudo port install py26-pip</snippet></ROW><ROW><id>3489922</id><snippet>sudo port install py31-distribute</snippet></ROW><ROW><id>3489922</id><snippet>easy_install</snippet></ROW><ROW><id>3489922</id><snippet>/usr/bin</snippet></ROW><ROW><id>3489922</id><snippet>/Library/Python</snippet></ROW><ROW><id>3489922</id><snippet>easy_install</snippet></ROW><ROW><id>3489922</id><snippet>pip</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>PATH</snippet></ROW><ROW><id>3489922</id><snippet>python_select</snippet></ROW><ROW><id>3489922</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>3489922</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>3489922</id><snippet>python</snippet></ROW><ROW><id>3489922</id><snippet>python</snippet></ROW><ROW><id>3489922</id><snippet>bin</snippet></ROW><ROW><id>3489922</id><snippet>python_select</snippet></ROW><ROW><id>3489922</id><snippet>MySQLdb</snippet></ROW><ROW><id>3489922</id><snippet>PIL</snippet></ROW><ROW><id>3489922</id><snippet>libjpeg</snippet></ROW><ROW><id>3489922</id><snippet>sudo port py26-pil</snippet></ROW><ROW><id>3489922</id><snippet>pip</snippet></ROW><ROW><id>3489922</id><snippet>sudo pip install pil</snippet></ROW><ROW><id>3489922</id><snippet>easy_install</snippet></ROW><ROW><id>3489922</id><snippet>sudo python setup.py ...</snippet></ROW><ROW><id>3489922</id><snippet>Distutils</snippet></ROW><ROW><id>3489983</id><snippet>python yourfilename.py
</snippet></ROW><ROW><id>3489983</id><snippet>conversion_func()</snippet></ROW><ROW><id>3489983</id><snippet>def conversion(number, conversion)
    return number*conversion
</snippet></ROW><ROW><id>3489983</id><snippet>answer = conversion(number=x, conversion=y)
</snippet></ROW><ROW><id>3489983</id><snippet>def getuserinput():
    input = dict()
    input["number"] = float(raw_input("Enter the number of units you would like to convert: "))
    input["from_metric"] = raw_input("I would like to convert from (miles or kilomters): ")
    input["to_metric"] = raw_input("to(miles or kilomters): ")

    return input
</snippet></ROW><ROW><id>3489983</id><snippet>input = getuserinput()
</snippet></ROW><ROW><id>3489983</id><snippet>input["parametername"]</snippet></ROW><ROW><id>3489990</id><snippet>line_profile</snippet></ROW><ROW><id>3489990</id><snippet>cProfile</snippet></ROW><ROW><id>3489990</id><snippet>import cProfile
cProfile.run('foo()', 'fooprof')
</snippet></ROW><ROW><id>3489990</id><snippet>def foo():</snippet></ROW><ROW><id>3489990</id><snippet>fooprof</snippet></ROW><ROW><id>3490013</id><snippet>start = time.time()</snippet></ROW><ROW><id>3490013</id><snippet>time.time() - start</snippet></ROW><ROW><id>3490245</id><snippet>gtk.Buildable.get_name(widget)</snippet></ROW><ROW><id>3490553</id><snippet>setuptools</snippet></ROW><ROW><id>3490553</id><snippet>easy_install</snippet></ROW><ROW><id>3490553</id><snippet>pip</snippet></ROW><ROW><id>3490778</id><snippet>dictf = reduce(lambda x, y: dict((k, v + y[k]) for k, v in x.iteritems()), dict1)
</snippet></ROW><ROW><id>3490944</id><snippet>import time
import threading
import Queue

# utility - spawn a thread to execute target for each args
def run_parallel_in_threads(target, args_list):
    result = Queue.Queue()
    # wrapper to collect return value in a Queue
    def task_wrapper(*args):
        result.put(target(*args))
    threads = [threading.Thread(target=task_wrapper, args=args) for args in args_list]
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    return result

def dummy_task(n):
    for i in xrange(n):
        time.sleep(0.1)
    return n

# below is the application code
urls = [
    ('http://www.google.com/',),
    ('http://www.lycos.com/',),
    ('http://www.bing.com/',),
    ('http://www.altavista.com/',),
    ('http://achewood.com/',),
]

def fetch(url):
    return urllib2.urlopen(url).read()

run_parallel_in_threads(fetch, urls)
</snippet></ROW><ROW><id>3490944</id><snippet>join()</snippet></ROW><ROW><id>3490944</id><snippet>twisted</snippet></ROW><ROW><id>3490944</id><snippet>In [274]: %time run_parallel_in_threads(dummy_task, [(0,)]*5)
CPU times: user 0.00 s, sys: 0.00 s, total: 0.00 s
Wall time: 0.00 s
Out[275]: &lt;Queue.Queue instance at 0x038B2878&gt;

In [276]: %time run_parallel_in_threads(dummy_task, [(0,)]*500)
CPU times: user 0.16 s, sys: 0.00 s, total: 0.16 s
Wall time: 0.16 s

In [278]: %time run_parallel_in_threads(dummy_task, [(10,)]*500)
CPU times: user 1.13 s, sys: 0.00 s, total: 1.13 s
Wall time: 1.13 s       &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; This means 0.13s of overhead
</snippet></ROW><ROW><id>3490944</id><snippet>0.75 s
0.38 s
0.59 s
0.38 s
0.62 s
1.50 s
0.49 s
0.36 s
0.95 s
0.43 s
0.61 s
0.81 s
0.46 s
1.21 s
2.87 s
1.04 s
1.72 s
</snippet></ROW><ROW><id>3491349</id><snippet>input</snippet></ROW><ROW><id>3491349</id><snippet>Jhon</snippet></ROW><ROW><id>3491349</id><snippet>raw_input</snippet></ROW><ROW><id>3491349</id><snippet>range</snippet></ROW><ROW><id>3491349</id><snippet>#!usr/bin/python

listofnames = []
names = 0
try:
    names = int(raw_input("Pls enter how many of names:"))
except:
    print "Problem with input"

for x in range(0, names):
    inname = raw_input("Enter the name %d: "%(x))
    listofnames.append(inname)

print listofnames
</snippet></ROW><ROW><id>3491542</id><snippet> thread_queues = []
 for i in range(4):
     thread_queues = Queue()

 for user in user_list:
    user_hash=hash(user.user_id) #hash in here is just shortcut to some standard hash utility 
    thread_id = user_hash % 4
    thread_queues[thread_id].put(user)

 # From here ... your pool of threads access thread_queues but each thread ONLY accesses 
 # one queue based on a numeric id given to each of them.
</snippet></ROW><ROW><id>3491959</id><snippet>list_keys = [ "".join(x[:-1]) for x in items ]
for i in range(len(list_keys)-1):
  if not list_keys[i+1].startswith(list_keys[i]):
     print items[i]
print items[-1]
</snippet></ROW><ROW><id>3491959</id><snippet>['Schools', 'Primary schools', '', '16']
['Schools', 'Secondary schools', 'Special ed', '4']
['Schools', 'Secondary schools', 'Non-special ed', '4'],
</snippet></ROW><ROW><id>3492399</id><snippet>import socket, struct

def atod(a): # ascii_to_decimal
    return struct.unpack("!L",socket.inet_aton(a))[0]

def dtoa(d): # decimal_to_ascii
    return socket.inet_ntoa(struct.pack("!L", d))

net,_,mask = sys.argv[1].partition('/')
mask = int(mask)
net = atod(net)

for host in (dtoa(net+n) for n in range(0, 1&lt;&lt;32-mask)):
    print host
</snippet></ROW><ROW><id>3492428</id><snippet>def get_or_insert(cls, key_name, **kwargs):
  def _tx():
    model = cls.get_by_key_name(key_name)
    if not model:
      model = cls(key_name=key_name, **kwargs)
      model.put()
    return model
  return db.run_in_transaction(_tx)
</snippet></ROW><ROW><id>3492549</id><snippet>set_cell_data_func</snippet></ROW><ROW><id>3492549</id><snippet>add_attribute</snippet></ROW><ROW><id>3492549</id><snippet>col = gtk.TreeViewColumn(_("Series title"))
cell = gtk.CellRendererText()
col.pack_start(cell)
col.set_cell_data_func(cell, get_series_title)
</snippet></ROW><ROW><id>3492576</id><snippet>np.zeros</snippet></ROW><ROW><id>3492576</id><snippet>np.ones</snippet></ROW><ROW><id>3492576</id><snippet>np.empty</snippet></ROW><ROW><id>3492576</id><snippet>np.zeros_like</snippet></ROW><ROW><id>3492576</id><snippet>np.ones_like</snippet></ROW><ROW><id>3492576</id><snippet>np.empty_like</snippet></ROW><ROW><id>3492576</id><snippet>np.linspace</snippet></ROW><ROW><id>3492576</id><snippet>np.arange</snippet></ROW><ROW><id>3492576</id><snippet>ar0 = np.linspace(10, 20, 16).reshape(4, 4)
</snippet></ROW><ROW><id>3492576</id><snippet>ar0</snippet></ROW><ROW><id>3492576</id><snippet>ar0[:,-1]=1
</snippet></ROW><ROW><id>3492576</id><snippet>ar0[:,-1]</snippet></ROW><ROW><id>3492576</id><snippet>(4,)</snippet></ROW><ROW><id>3492715</id><snippet>&gt;&gt;&gt; def f():
...   x = (set(),)
...   y = set([0])
...   x[0] |= y
...   return   
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_GLOBAL              0 (set)
              3 CALL_FUNCTION            0
              6 BUILD_TUPLE              1
              9 STORE_FAST               0 (x)

  3          12 LOAD_GLOBAL              0 (set)
             15 LOAD_CONST               1 (0)
             18 BUILD_LIST               1
             21 CALL_FUNCTION            1
             24 STORE_FAST               1 (y)

  4          27 LOAD_FAST                0 (x)
             30 LOAD_CONST               1 (0)
             33 DUP_TOPX                 2
             36 BINARY_SUBSCR       
             37 LOAD_FAST                1 (y)
             40 INPLACE_OR          
             41 ROT_THREE           
             42 STORE_SUBSCR        

  5          43 LOAD_CONST               0 (None)
             46 RETURN_VALUE        
</snippet></ROW><ROW><id>3492715</id><snippet>x[0] |= y</snippet></ROW><ROW><id>3492715</id><snippet>x[0].__ior__(y)</snippet></ROW><ROW><id>3492715</id><snippet>x[0]</snippet></ROW><ROW><id>3492715</id><snippet>set</snippet></ROW><ROW><id>3492715</id><snippet>|=</snippet></ROW><ROW><id>3492715</id><snippet>set.__ior__</snippet></ROW><ROW><id>3492715</id><snippet>self</snippet></ROW><ROW><id>3492715</id><snippet>x[0]</snippet></ROW><ROW><id>3492715</id><snippet>x = (set(),)
x[0] = x[0]
</snippet></ROW><ROW><id>3493222</id><snippet>sudo ./script.py X</snippet></ROW><ROW><id>3493222</id><snippet>su -c "./script.py X"</snippet></ROW><ROW><id>3493222</id><snippet>su</snippet></ROW><ROW><id>3493222</id><snippet>./script.py X</snippet></ROW><ROW><id>3493222</id><snippet>$</snippet></ROW><ROW><id>3493222</id><snippet>%</snippet></ROW><ROW><id>3493222</id><snippet>#</snippet></ROW><ROW><id>3493356</id><snippet>shell_plus</snippet></ROW><ROW><id>3493356</id><snippet>./manage.py shell_plus</snippet></ROW><ROW><id>3493402</id><snippet>python create-application.py</snippet></ROW><ROW><id>3493402</id><snippet>python</snippet></ROW><ROW><id>3493484</id><snippet>ang</snippet></ROW><ROW><id>3493484</id><snippet>-ang</snippet></ROW><ROW><id>3493484</id><snippet>sin</snippet></ROW><ROW><id>3493484</id><snippet>sin(-x)==-sin(x)</snippet></ROW><ROW><id>3493484</id><snippet>cos(-x)==cos(x)</snippet></ROW><ROW><id>3493484</id><snippet>(0,0)</snippet></ROW><ROW><id>3493484</id><snippet>0*cos(...)==0</snippet></ROW><ROW><id>3493484</id><snippet>rotate</snippet></ROW><ROW><id>3493484</id><snippet>transform.c</snippet></ROW><ROW><id>3493484</id><snippet>static void
rotate (SDL_Surface *src, SDL_Surface *dst, Uint32 bgcolor, double sangle,
        double cangle)
{
    int x, y, dx, dy;

    Uint8 *srcpix = (Uint8*) src-&gt;pixels;
    Uint8 *dstrow = (Uint8*) dst-&gt;pixels;
    int srcpitch = src-&gt;pitch;
    int dstpitch = dst-&gt;pitch;

    int cy = dst-&gt;h / 2;
    int xd = ((src-&gt;w - dst-&gt;w) &lt;&lt; 15);
    int yd = ((src-&gt;h - dst-&gt;h) &lt;&lt; 15);

    int isin = (int)(sangle * 65536);
    int icos = (int)(cangle * 65536);

    int ax = ((dst-&gt;w) &lt;&lt; 15) - (int)(cangle * ((dst-&gt;w - 1) &lt;&lt; 15));
    int ay = ((dst-&gt;h) &lt;&lt; 15) - (int)(sangle * ((dst-&gt;w - 1) &lt;&lt; 15));

    int xmaxval = ((src-&gt;w) &lt;&lt; 16) - 1;
    int ymaxval = ((src-&gt;h) &lt;&lt; 16) - 1;

    switch (src-&gt;format-&gt;BytesPerPixel)
    {
    case 1:
        for (y = 0; y &lt; dst-&gt;h; y++)
        {
            Uint8 *dstpos = (Uint8*)dstrow;
            dx = (ax + (isin * (cy - y))) + xd;
            dy = (ay - (icos * (cy - y))) + yd;
            for (x = 0; x &lt; dst-&gt;w; x++)
            {
                if(dx &lt; 0 || dy &lt; 0 || dx &gt; xmaxval || dy &gt; ymaxval)
                    *dstpos++ = bgcolor;
                else
                    *dstpos++ = *(Uint8*)
                        (srcpix + ((dy &gt;&gt; 16) * srcpitch) + (dx &gt;&gt; 16));
                dx += icos;
                dy += isin;
            }
            dstrow += dstpitch;
        }
        break;
    case 2:
        for (y = 0; y &lt; dst-&gt;h; y++)
        {
            Uint16 *dstpos = (Uint16*)dstrow;
            dx = (ax + (isin * (cy - y))) + xd;
            dy = (ay - (icos * (cy - y))) + yd;
            for (x = 0; x &lt; dst-&gt;w; x++)
            {
                if (dx &lt; 0 || dy &lt; 0 || dx &gt; xmaxval || dy &gt; ymaxval)
                    *dstpos++ = bgcolor;
                else
                    *dstpos++ = *(Uint16*)
                        (srcpix + ((dy &gt;&gt; 16) * srcpitch) + (dx &gt;&gt; 16 &lt;&lt; 1));
                dx += icos;
                dy += isin;
            }
            dstrow += dstpitch;
        }
        break;
    case 4:
        for (y = 0; y &lt; dst-&gt;h; y++)
        {
            Uint32 *dstpos = (Uint32*)dstrow;
            dx = (ax + (isin * (cy - y))) + xd;
            dy = (ay - (icos * (cy - y))) + yd;
            for (x = 0; x &lt; dst-&gt;w; x++)
            {
                if (dx &lt; 0 || dy &lt; 0 || dx &gt; xmaxval || dy &gt; ymaxval)
                    *dstpos++ = bgcolor;
                else
                    *dstpos++ = *(Uint32*)
                        (srcpix + ((dy &gt;&gt; 16) * srcpitch) + (dx &gt;&gt; 16 &lt;&lt; 2));
                dx += icos;
                dy += isin;
            }
            dstrow += dstpitch;
        }
        break;
    default: /*case 3:*/
        for (y = 0; y &lt; dst-&gt;h; y++)
        {
            Uint8 *dstpos = (Uint8*)dstrow;
            dx = (ax + (isin * (cy - y))) + xd;
            dy = (ay - (icos * (cy - y))) + yd;
            for (x = 0; x &lt; dst-&gt;w; x++)
            {
                if (dx &lt; 0 || dy &lt; 0 || dx &gt; xmaxval || dy &gt; ymaxval)
                {
                    dstpos[0] = ((Uint8*) &amp;bgcolor)[0];
                    dstpos[1] = ((Uint8*) &amp;bgcolor)[1];
                    dstpos[2] = ((Uint8*) &amp;bgcolor)[2];
                    dstpos += 3;
                }
                else
                {
                    Uint8* srcpos = (Uint8*)
                        (srcpix + ((dy &gt;&gt; 16) * srcpitch) + ((dx &gt;&gt; 16) * 3));
                    dstpos[0] = srcpos[0];
                    dstpos[1] = srcpos[1];
                    dstpos[2] = srcpos[2];
                    dstpos += 3;
                }
                dx += icos; dy += isin;
            }
            dstrow += dstpitch;
        }
        break;
    }
}
</snippet></ROW><ROW><id>3493488</id><snippet>import matplotlib
matplotlib.use('Agg')
</snippet></ROW><ROW><id>3493488</id><snippet>python -c 'import matplotlib; matplotlib.use("")'
</snippet></ROW><ROW><id>3493488</id><snippet>matplotlib.use</snippet></ROW><ROW><id>3493488</id><snippet>backend      : GtkAgg
</snippet></ROW><ROW><id>3493488</id><snippet>matplotlib.use(...)</snippet></ROW><ROW><id>3493864</id><snippet>bitstring.BitString(filename='your_file').uint
</snippet></ROW><ROW><id>3493864</id><snippet>int</snippet></ROW><ROW><id>3493864</id><snippet>struct.unpack</snippet></ROW><ROW><id>3493966</id><snippet>import email.utils as eutils
import time
import datetime

ntuple=eutils.parsedate('Mon, 16 Aug 2010 24:00:00')
print(ntuple)
# (2010, 8, 16, 24, 0, 0, 0, 1, -1)
timestamp=time.mktime(ntuple)
print(timestamp)
# 1282017600.0
date=datetime.datetime.fromtimestamp(timestamp)
print(date)
# 2010-08-17 00:00:00
print(date.strftime('%a, %d %b %Y %H:%M:%S'))
# Tue, 17 Aug 2010 00:00:00
</snippet></ROW><ROW><id>3493966</id><snippet>def standardize_date(date_str):
    ntuple=eutils.parsedate(date_str)
    timestamp=time.mktime(ntuple)
    date=datetime.datetime.fromtimestamp(timestamp)
    return date.strftime('%a, %d %b %Y %H:%M:%S')

print(standardize_date('Mon, 16 Aug 2010 24:00:00'))
# Tue, 17 Aug 2010 00:00:00
</snippet></ROW><ROW><id>3493994</id><snippet>.py</snippet></ROW><ROW><id>3493994</id><snippet>python generate.py</snippet></ROW><ROW><id>3494201</id><snippet>&gt;&gt;&gt; from pyquery import PyQuery as pq
&gt;&gt;&gt; html = pq("""&lt;div class='head'&gt; Article TExt &lt;div&gt; &lt;tag&gt; Some ather text &lt;/tag&gt;""")
&gt;&gt;&gt; print html('div.head').text()
Article TExt Some ather text
</snippet></ROW><ROW><id>3494642</id><snippet>./manage.py test &amp;&amp; svn commit $@
</snippet></ROW><ROW><id>3494662</id><snippet>from django.db import models
from django import forms

class BitFlagFormField(forms.MultipleChoiceField):
    widget = forms.CheckboxSelectMultiple

    def __init__(self, *args, **kwargs):
        super(BitFlagFormField, self).__init__(*args, **kwargs)

class BitFlagField(models.Field):
    __metaclass__ = models.SubfieldBase

    def get_internal_type(self):
        return "Integer"

    def get_choices_default(self):
        return self.get_choices(include_blank=False)

    def _get_FIELD_display(self, field):
        value = getattr(self, field.attname)
        choicedict = dict(field.choices)

    def formfield(self, **kwargs):
        # do not call super, as that overrides default widget if it has choices
        defaults = {'required': not self.blank, 'label': capfirst(self.verbose_name), 
                    'help_text': self.help_text, 'choices':self.choices}
        if self.has_default():
            defaults['initial'] = self.get_default()
        defaults.update(kwargs)
        return BitFlagFormField(**defaults)

    def get_db_prep_value(self, value):
        if isinstance(value, int):
            return value
        elif isinstance(value, list):
            return sum(value)

    def to_python(self, value):
        result = []
        n = 1
        while value &gt; 0:
            if (value % 2) &gt; 0:
                result.append(n)
            n *= 2
            value /= 2
        return sorted(result)


    def contribute_to_class(self, cls, name):
        super(BitFlagField, self).contribute_to_class(cls, name)
        if self.choices:
            func = lambda self, fieldname = name, choicedict = dict(self.choices):" and ".join([choicedict.get(value,value) for value in getattr(self,fieldname)])
            setattr(cls, 'get_%s_display' % self.name, func)
</snippet></ROW><ROW><id>3494777</id><snippet>for each in floodfillque:
    if each[2] == 'w':
        floodfillque.remove(each)
</snippet></ROW><ROW><id>3494777</id><snippet>for each in list(floodfillque):
</snippet></ROW><ROW><id>3494777</id><snippet>floodfillque</snippet></ROW><ROW><id>3494788</id><snippet>v = int(..</snippet></ROW><ROW><id>3494982</id><snippet>scipy.misc.imread()</snippet></ROW><ROW><id>3495112</id><snippet>gtk.get_current_event_time()</snippet></ROW><ROW><id>3495286</id><snippet>&gt;&gt;&gt; [x*x for x in range(5)]
[0, 1, 4, 9, 16]
&gt;&gt;&gt; sum(_) # instead of having to type sum([0,1,4,9,16]) by hand
30
</snippet></ROW><ROW><id>3495352</id><snippet>mod_wsgi</snippet></ROW><ROW><id>3495395</id><snippet>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for d in L: result.update(d)
... 
{'a':1,'c':2,'b':1,'d':2}
</snippet></ROW><ROW><id>3495395</id><snippet>dict((k,v) for d in L for (k,v) in d.items())
</snippet></ROW><ROW><id>3495395</id><snippet>{ k: v for d in L for k, v in d.items() }
</snippet></ROW><ROW><id>3495654</id><snippet>SELECT *
  FROM TABLE_A a
 WHERE EXISTS(SELECT NULL
                FROM TABLE_A$foo f
               WHERE a.id = f.id
                 AND a.value1 = f.value1
                 AND a.value2 = f.value2)
</snippet></ROW><ROW><id>3495654</id><snippet>SELECT *
  FROM TABLE_A a
 WHERE NOT EXISTS(SELECT NULL
                    FROM TABLE_A$foo f
                   WHERE a.id = f.id
                     AND a.value1 = f.value1
                     AND a.value2 = f.value2)
</snippet></ROW><ROW><id>3495670</id><snippet>  "1.3.6.1.2.1.6.13.1.1" tcpConnState 
  "1.3.6.1.2.1.7.5.1.1"  udpLocalAddress
</snippet></ROW><ROW><id>3495670</id><snippet>snmpwalk -cpublic 192.168.1.13 1.3.6.1.2.1.7.5.1.1                                                    
   UDP-MIB::udpLocalAddress.0.0.0.0.68 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.161 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.32908 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.33281 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.33795 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.34822 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.0.0.0.0.44782 = IpAddress: 0.0.0.0
   UDP-MIB::udpLocalAddress.192.168.1.13.9950 = IpAddress: 192.168.1.13
</snippet></ROW><ROW><id>3495670</id><snippet>snmpwalk -cpublic 192.168.1.13 1.3.6.1.2.1.6.13.1.1                                                   
   TCP-MIB::tcpConnState.0.0.0.0.21.0.0.0.0.0 = INTEGER: listen(2)
   TCP-MIB::tcpConnState.0.0.0.0.23.0.0.0.0.0 = INTEGER: listen(2)
   TCP-MIB::tcpConnState.0.0.0.0.80.0.0.0.0.0 = INTEGER: listen(2)
</snippet></ROW><ROW><id>3495670</id><snippet>ftp -- 1.3.6.1.2.1.6.13.1.1.0.0.0.0.21.0.0.0.0.0
ssh -- 1.3.6.1.2.1.6.13.1.1.0.0.0.0.22.0.0.0.0.0
http --  1.3.6.1.2.1.6.13.1.1.0.0.0.0.80.0.0.0.0.0
https -- 1.3.6.1.2.1.6.13.1.1.0.0.0.0.443.0.0.0.0.0
bind -- 1.3.6.1.2.1.7.5.1.1.0.0.0.0.53 
</snippet></ROW><ROW><id>3495670</id><snippet>1.3.6.1.2.1.7.5.1.1.192.168.10.1.53  for bind
</snippet></ROW><ROW><id>3495670</id><snippet>import netsnmp
oid = netsmp.Varbind('1.3.6.1.2.1.6.13.1.1.0.0.0.0.80.0.0.0.0.0')
result = netsnmp.snmp(oid,
                      Version = 2,
                      DestHost="192.168.10.1",
                      Community="public")
</snippet></ROW><ROW><id>3496251</id><snippet>type</snippet></ROW><ROW><id>3496251</id><snippet>object</snippet></ROW><ROW><id>3496251</id><snippet>type</snippet></ROW><ROW><id>3496251</id><snippet>type(C)</snippet></ROW><ROW><id>3496251</id><snippet>def silly(n):
    class Silly(object):
        buh = ' '.join(n * ['hello'])
    return Silly

Silly1 = silly(1)
Silly2 = silly(2)
a = Silly1()
print(a.buh)
b = Silly2()
print(b.buh)
</snippet></ROW><ROW><id>3496251</id><snippet>hello
hello hello
</snippet></ROW><ROW><id>3496251</id><snippet>type</snippet></ROW><ROW><id>3496275</id><snippet>from django.core.management import call_command
call_command('syncdb', interactive=True)
</snippet></ROW><ROW><id>3496275</id><snippet>runserver</snippet></ROW><ROW><id>3496275</id><snippet>runserver_newdb</snippet></ROW><ROW><id>3496275</id><snippet>from django.core.management import call_command
call_command('syncdb', interactive=True)
call_command('runserver')
</snippet></ROW><ROW><id>3496385</id><snippet>def register():
    form = SignupForm(request.form)
    if request.method == 'POST' and form.validate():
        create_user = ({'username' : form.username.data, 'email' : form.email.data,
                            'password': form.password.data})
        flash('Thanks for registering')
        return create_user, redirect(url_for('loggedin.html'))
    return render_template('get-started.html', form=form)
</snippet></ROW><ROW><id>3496385</id><snippet>if</snippet></ROW><ROW><id>3496385</id><snippet>if</snippet></ROW><ROW><id>3496560</id><snippet>import unittest
import SomeTestModule

loader = unittest.TestLoader()
loader.loadTestsFromModule(SomeTestModule)
</snippet></ROW><ROW><id>3496711</id><snippet>$1.Rnw</snippet></ROW><ROW><id>3496711</id><snippet>$1.tex</snippet></ROW><ROW><id>3496711</id><snippet>$1.pdf</snippet></ROW><ROW><id>3496711</id><snippet>cut -f 1 -d '.' $1</snippet></ROW><ROW><id>3497084</id><snippet>dir</snippet></ROW><ROW><id>3497084</id><snippet>import foo
dir(foo)
</snippet></ROW><ROW><id>3497084</id><snippet>help(foo)
</snippet></ROW><ROW><id>3497084</id><snippet>foo</snippet></ROW><ROW><id>3497084</id><snippet>argcount = f.func_code.co_argcount
</snippet></ROW><ROW><id>3497084</id><snippet>f.func_code.co_varnames
</snippet></ROW><ROW><id>3497242</id><snippet>dict</snippet></ROW><ROW><id>3497242</id><snippet>keys = ['a','b','c','d']
values = (1,2,3)
result = dict(zip(keys, values)) # {'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>3497242</id><snippet>result.update({ 'f' : 5 })
print result # {'a': 1, 'c': 3, 'b': 2, 'f': 5}
</snippet></ROW><ROW><id>3497367</id><snippet>#for $item in $products
&lt;td&gt;$products[$item].Name&lt;/td&gt;
...
#end for
</snippet></ROW><ROW><id>3497367</id><snippet>products = [{'Name':'prod1', ...}, {'Name': 'prod2', ...}]
</snippet></ROW><ROW><id>3497390</id><snippet>digraph "my_graph" {

     graph[ fontname = "Helvetica-Oblique",
            fontsize = 12,
            label = "some label",
            size = "7.75,10.25" ];

     node [ shape = polygon,
            sides = 4 ];
}
</snippet></ROW><ROW><id>3497408</id><snippet>__init__.py</snippet></ROW><ROW><id>3497408</id><snippet>__init_.py</snippet></ROW><ROW><id>3497408</id><snippet>__file__</snippet></ROW><ROW><id>3497408</id><snippet>from os.path import dirname
ROOT = dirname(__file__)
</snippet></ROW><ROW><id>3497408</id><snippet>conf.conf</snippet></ROW><ROW><id>3497408</id><snippet>os.path.join(ROOT, 'conf.conf')</snippet></ROW><ROW><id>3497439</id><snippet>notifyUpdated()</snippet></ROW><ROW><id>3497439</id><snippet>try:
    if x:
        return update(1)
    else:
        return update(2)
except:
    raise
else:
    notifyUpdated()
</snippet></ROW><ROW><id>3497439</id><snippet>try</snippet></ROW><ROW><id>3497576</id><snippet>mymodule
 |- __init__.py
 |--database
 |   |- __init__.py
 |   |- dbclasses.py
 | 
 |--api
 |   |- __init__.py
 |   |- apiclasses.py
 |
 |--other

[etc]
</snippet></ROW><ROW><id>3497576</id><snippet>from mymodule.database.dbclasses import MyDBClass
from mymodule.api.apiclasses import MyAPIClass
</snippet></ROW><ROW><id>3497576</id><snippet>src</snippet></ROW><ROW><id>3497576</id><snippet>__init__.py</snippet></ROW><ROW><id>3497576</id><snippet>__init__.py</snippet></ROW><ROW><id>3497576</id><snippet>from mymodule import MyDBClass, MyAPIClass</snippet></ROW><ROW><id>3497576</id><snippet>__init__.py</snippet></ROW><ROW><id>3497576</id><snippet>from mymodule.database.dbclasses import MyDBClass
from mymodule.api.apiclasses import MyAPIClass
__all__ = ['MyDBClass', 'MyAPIClass']
</snippet></ROW><ROW><id>3497915</id><snippet>self.id</snippet></ROW><ROW><id>3497915</id><snippet>obj.id</snippet></ROW><ROW><id>3497922</id><snippet>plt.show()</snippet></ROW><ROW><id>3497922</id><snippet>plt.imshow()</snippet></ROW><ROW><id>3497922</id><snippet>plt.show()</snippet></ROW><ROW><id>3497922</id><snippet>plt.figure()</snippet></ROW><ROW><id>3498028</id><snippet>&gt;&gt;&gt; lst = "my first program".split()
&gt;&gt;&gt; set(itertools.permutations(lst))

set([('first', 'my', 'program'),
     ('first', 'program', 'my'),
     ('my', 'first', 'program'),
     ('my', 'program', 'first'),
     ('program', 'first', 'my'),
     ('program', 'my', 'first')])
</snippet></ROW><ROW><id>3498074</id><snippet>msvcrt.setmode(fd, flags)</snippet></ROW><ROW><id>3498074</id><snippet>fd</snippet></ROW><ROW><id>3498074</id><snippet>sys.stdin.fileno()</snippet></ROW><ROW><id>3498127</id><snippet>python myScript.py test.txt &gt; test.out &amp;&amp; mv test.out test.txt
</snippet></ROW><ROW><id>3498223</id><snippet>"OOO"</snippet></ROW><ROW><id>3498223</id><snippet>"ooo"</snippet></ROW><ROW><id>3498247</id><snippet>def brightness( im_file ):
   im = Image.open(im_file).convert('L')
   stat = ImageStat.Stat(im)
   return stat.mean[0]
</snippet></ROW><ROW><id>3498247</id><snippet>def brightness( im_file ):
   im = Image.open(im_file).convert('L')
   stat = ImageStat.Stat(im)
   return stat.rms[0]
</snippet></ROW><ROW><id>3498247</id><snippet>def brightness( im_file ):
   im = Image.open(im_file)
   stat = ImageStat.Stat(im)
   r,g,b = stat.mean
   return math.sqrt(0.241*(r**2) + 0.691*(g**2) + 0.068*(b**2))
</snippet></ROW><ROW><id>3498247</id><snippet>def brightness( im_file ):
   im = Image.open(im_file)
   stat = ImageStat.Stat(im)
   r,g,b = stat.rms
   return math.sqrt(0.241*(r**2) + 0.691(g**2) + 0.068*(b**2))
</snippet></ROW><ROW><id>3498247</id><snippet>def brightness( im_file ):
   im = Image.open(im_file)
   stat = ImageStat.Stat(im)
   gs = (math.sqrt(0.241*(r**2) + 0.691*(g**2) + 0.068*(b**2)) 
         for r,g,b in im.getdata())
   return sum(gs)/stat.count[0]
</snippet></ROW><ROW><id>3498303</id><snippet>foo.py</snippet></ROW><ROW><id>3498303</id><snippet>import pprint

def show(obj):
    pprint(obj)
</snippet></ROW><ROW><id>3498303</id><snippet>bar.py</snippet></ROW><ROW><id>3498303</id><snippet>import foo

class fubar(object):
   #code

   def method(self, obj):
       #more stuff
       foo.show(obj)
</snippet></ROW><ROW><id>3498303</id><snippet>foo</snippet></ROW><ROW><id>3498303</id><snippet>foo</snippet></ROW><ROW><id>3498303</id><snippet>foo</snippet></ROW><ROW><id>3498303</id><snippet>self</snippet></ROW><ROW><id>3498381</id><snippet>channels = session.query(Channel).options(eagerload("items")).filter(Channel.items.type == "jpg").all()
</snippet></ROW><ROW><id>3498496</id><snippet>values = []
with open('file00.txt') as f00:
    for line in f00:
        value = float(line)
        values.append(value)
        print "farr= ", value
</snippet></ROW><ROW><id>3498496</id><snippet>values</snippet></ROW><ROW><id>3498727</id><snippet>C:\Blah\Modules</snippet></ROW><ROW><id>3498727</id><snippet>fh = open('c:/Blah/Modules/DictionaryE.txt')
</snippet></ROW><ROW><id>3498727</id><snippet>\</snippet></ROW><ROW><id>3498742</id><snippet>c:/wher/ever</snippet></ROW><ROW><id>3498816</id><snippet>dtype</snippet></ROW><ROW><id>3498816</id><snippet>In [77]: arr=np.genfromtxt('a',dtype='f8,f8')

In [78]: arr
Out[78]: 
array([(1.0, 2.0), (3.0, 4.0)], 
      dtype=[('f0', '&lt;f8'), ('f1', '&lt;f8')])
</snippet></ROW><ROW><id>3498816</id><snippet>astype</snippet></ROW><ROW><id>3498816</id><snippet>dtype</snippet></ROW><ROW><id>3498816</id><snippet>In [79]: arr=np.genfromtxt('a',dtype='f8,f8').astype(dtype)

In [80]: arr
Out[80]: 
array([(1.0, 2.0), (3.0, 4.0)], 
      dtype=[(('Amps', 'Current'), '&lt;f8'), (('Volts', 'Voltage'), '&lt;f8')])
</snippet></ROW><ROW><id>3498816</id><snippet>numpy.lib.io.flatten_dtype</snippet></ROW><ROW><id>3498816</id><snippet>import numpy
import numpy.lib.io
def flatten_dtype(ndtype):
    """
    Unpack a structured data-type.

    """
    names = ndtype.names
    if names is None:
        return [ndtype]
    else:
        types = []
        for field in names:
            typ_fields = ndtype.fields[field]
            flat_dt = flatten_dtype(typ_fields[0])
            types.extend(flat_dt)
        return types
numpy.lib.io.flatten_dtype=flatten_dtype
</snippet></ROW><ROW><id>3498831</id><snippet>private</snippet></ROW><ROW><id>3498935</id><snippet>https</snippet></ROW><ROW><id>3498960</id><snippet>sys.modules</snippet></ROW><ROW><id>3498960</id><snippet>sys.modules</snippet></ROW><ROW><id>3498960</id><snippet>sys.modules</snippet></ROW><ROW><id>3498960</id><snippet>__init__.py</snippet></ROW><ROW><id>3499027</id><snippet>min()</snippet></ROW><ROW><id>3499027</id><snippet>&gt;&gt;&gt; darr = [1, 3.14159, 1e100, -2.71828]
&gt;&gt;&gt; min(darr)
-2.71828
</snippet></ROW><ROW><id>3499076</id><snippet>execute_transforms</snippet></ROW><ROW><id>3499076</id><snippet>str</snippet></ROW><ROW><id>3499076</id><snippet>len(image_str)</snippet></ROW><ROW><id>3499241</id><snippet>list</snippet></ROW><ROW><id>3499241</id><snippet>array</snippet></ROW><ROW><id>3499241</id><snippet>del mylist[:]
</snippet></ROW><ROW><id>3499241</id><snippet>a = [1,2]
b = a
a = []
</snippet></ROW><ROW><id>3499241</id><snippet>a = [1,2]
b = a
del a[:]
</snippet></ROW><ROW><id>3499241</id><snippet>a</snippet></ROW><ROW><id>3499241</id><snippet>b</snippet></ROW><ROW><id>3499276</id><snippet>import itertools

def nwise(iterable, n=2):
    "s-&gt;(s_0,s_1, ..., s_n), (s_1,s_2,..., s_n+1), ... "
    ntup = itertools.tee(iterable, n)
    for i, item in enumerate(ntup):
        for ii in range(i):
            next(item, None)
    return itertools.izip(*ntup)
</snippet></ROW><ROW><id>3499276</id><snippet>&gt;&gt;&gt; import nwise
&gt;&gt;&gt; ll = range(10)
&gt;&gt;&gt; for tup in nwise.nwise(ll,3): print tup
... 
(0, 1, 2)
(1, 2, 3)
(2, 3, 4)
(3, 4, 5)
(4, 5, 6)
(5, 6, 7)
(6, 7, 8)
(7, 8, 9)
</snippet></ROW><ROW><id>3499533</id><snippet>-</snippet></ROW><ROW><id>3499533</id><snippet>mac = '0024e865a023'
blocks = [mac[x:x+2] for x in xrange(0, len(mac), 2)]
macFormatted = '-'.join(blocks)
</snippet></ROW><ROW><id>3499678</id><snippet>enumerate</snippet></ROW><ROW><id>3499678</id><snippet>darr</snippet></ROW><ROW><id>3499678</id><snippet>list</snippet></ROW><ROW><id>3499678</id><snippet>dict</snippet></ROW><ROW><id>3499678</id><snippet>dvp</snippet></ROW><ROW><id>3499678</id><snippet>xindex</snippet></ROW><ROW><id>3499678</id><snippet>pindex</snippet></ROW><ROW><id>3499678</id><snippet>for xindex, xvalue in enumerate(xarr):
  darr = {}
  for pindex, pvalue in enumerate(parr):
    dvp = math.fabs(xvalue - pvalue)
    darr[dvp] = {'xindex': xindex, 'pindex': pindex}
  mini = min(darr.keys())
  minix = darr[mini]['xindex']
  minip = darr[mini]['pindex']
  minindex = darr.keys().index(mini)


  print "minimum_index&gt; {0}, is the difference of xarr[{1}] and parr[{2}]".format(minindex, minix, minip)
  darr.clear()
</snippet></ROW><ROW><id>3499678</id><snippet>enumerate</snippet></ROW><ROW><id>3499678</id><snippet>range(100)</snippet></ROW><ROW><id>3499678</id><snippet>xpre</snippet></ROW><ROW><id>3499678</id><snippet>ppre</snippet></ROW><ROW><id>3499678</id><snippet>enumerate</snippet></ROW><ROW><id>3499678</id><snippet>darr</snippet></ROW><ROW><id>3499678</id><snippet>[130, 18, 42, 37 ...]
</snippet></ROW><ROW><id>3499678</id><snippet>{
  130: {'xindex': 1, 'pindex': 4},
  18: {'xindex': 1, 'pindex': 6},
  43: {'xindex': 1, 'pindex': 9},
  ...
}
</snippet></ROW><ROW><id>3499678</id><snippet>dvp</snippet></ROW><ROW><id>3499678</id><snippet>x</snippet></ROW><ROW><id>3499678</id><snippet>p</snippet></ROW><ROW><id>3499678</id><snippet>dvp</snippet></ROW><ROW><id>3499678</id><snippet>x</snippet></ROW><ROW><id>3499678</id><snippet>p</snippet></ROW><ROW><id>3499678</id><snippet>dvp</snippet></ROW><ROW><id>3499678</id><snippet>xindex = darr[43]['xindex']
pindex = darr[43]['pindex']
x = xarr[xindex]
p = parr[pindex]
</snippet></ROW><ROW><id>3499678</id><snippet>x</snippet></ROW><ROW><id>3499678</id><snippet>p</snippet></ROW><ROW><id>3499678</id><snippet>dvp</snippet></ROW><ROW><id>3499714</id><snippet>-- Create the temp table:
CREATE TEMP TABLE foo AS SELECT * FROM (VALUES(1,2), (1,3)) AS sub (pond1, pond2);

-- Delete
DELETE FROM bar 
USING  
  foo -- the joined table
WHERE 
  bar.pond1= foo.pond1 
AND 
  bar.pond2 = foo.pond2;
</snippet></ROW><ROW><id>3500489</id><snippet>setup.py</snippet></ROW><ROW><id>3500489</id><snippet>cd C:\path\to\Django\
</snippet></ROW><ROW><id>3500489</id><snippet>python setup.py install
</snippet></ROW><ROW><id>3500489</id><snippet>python</snippet></ROW><ROW><id>3500489</id><snippet>PATH</snippet></ROW><ROW><id>3500489</id><snippet>PATH</snippet></ROW><ROW><id>3500489</id><snippet>python</snippet></ROW><ROW><id>3500489</id><snippet>import django</snippet></ROW><ROW><id>3500782</id><snippet>rx = re.compile(r'^(\d+)((?:sheep)*)$')
m = rx.match(theString)
if m and len(m.group(2)) == 5 * int(m.group(1)):
   print ("Matched")
</snippet></ROW><ROW><id>3501021</id><snippet>if self.permission_index_link not in (0,8):
    # code
</snippet></ROW><ROW><id>3501021</id><snippet>self.permission_index_link</snippet></ROW><ROW><id>3501044</id><snippet>from BeautifulSoup import BeautifulSoup
import urlparse

soup = BeautifulSoup(html)
links = soup.findAll('a', href=True)

for link in links:
  href = link['href']
  url = urlparse.urlparse(href)
  params = urlparse.parse_qs(url.query)
  if 'sessionid' in params:
    print params['sessionid'][0]
</snippet></ROW><ROW><id>3501408</id><snippet>isinstance( &lt;var&gt;, int )
</snippet></ROW><ROW><id>3501408</id><snippet>isinstance( &lt;var&gt;, ( int, long ) )
</snippet></ROW><ROW><id>3501408</id><snippet>type</snippet></ROW><ROW><id>3501408</id><snippet>int</snippet></ROW><ROW><id>3501408</id><snippet>int</snippet></ROW><ROW><id>3501408</id><snippet>type</snippet></ROW><ROW><id>3501408</id><snippet>class Spam( int ): pass
x = Spam( 0 )
type( x ) == int # False
isinstance( x, int ) # True
</snippet></ROW><ROW><id>3501408</id><snippet>int</snippet></ROW><ROW><id>3501408</id><snippet>x</snippet></ROW><ROW><id>3501408</id><snippet>try:
    x += 1
except TypeError:
    ...
</snippet></ROW><ROW><id>3502356</id><snippet>from django.core.files import File

file = open('mytest.pdf')
djangofile = File(file)
pdfImage.myfile.save('new', djangofile)
file.close()
</snippet></ROW><ROW><id>3502356</id><snippet>pdfImage.myfile.save('new', File(file))`.
</snippet></ROW><ROW><id>3502495</id><snippet>public delegate void Action&lt;T1, T2, T3, T4, T5&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
</snippet></ROW><ROW><id>3502495</id><snippet>yield</snippet></ROW><ROW><id>3502604</id><snippet>logger</snippet></ROW><ROW><id>3502604</id><snippet>self.logger</snippet></ROW><ROW><id>3502604</id><snippet>__all__ = [anything but logger]
import logging
logger = logging.getLogger("why.is.this.method.still.java.camel.case")
del logging
</snippet></ROW><ROW><id>3502604</id><snippet>from x import *</snippet></ROW><ROW><id>3502810</id><snippet>from dateutil.parser import parse as dparse
for each in ('25/08/1970', '25-08-1970', '1970/08/25', '1970-08-25'):
    dparse(each)
</snippet></ROW><ROW><id>3502810</id><snippet>dparse(each)</snippet></ROW><ROW><id>3502810</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3502810</id><snippet>datetime</snippet></ROW><ROW><id>3503389</id><snippet>instance.method(...)</snippet></ROW><ROW><id>3503389</id><snippet>class.method(instance, ...)</snippet></ROW><ROW><id>3503389</id><snippet>this</snippet></ROW><ROW><id>3503443</id><snippet>python one_process.py | python the_other_process.py
</snippet></ROW><ROW><id>3503443</id><snippet>one_process.py</snippet></ROW><ROW><id>3503443</id><snippet>sys.stdout</snippet></ROW><ROW><id>3503443</id><snippet>the_other_process.py</snippet></ROW><ROW><id>3503443</id><snippet>sys.stdin</snippet></ROW><ROW><id>3503683</id><snippet>find . -type f -name '*.py' | xargs etags
</snippet></ROW><ROW><id>3503886</id><snippet>Dog = foo('fido')</snippet></ROW><ROW><id>3503886</id><snippet>foo</snippet></ROW><ROW><id>3503886</id><snippet>Dog</snippet></ROW><ROW><id>3503909</id><snippet>popen</snippet></ROW><ROW><id>3503909</id><snippet>os.popen('cat /etc/services').read()
</snippet></ROW><ROW><id>3503909</id><snippet>subprocess</snippet></ROW><ROW><id>3503909</id><snippet>import subprocess

proc = subprocess.Popen(["cat", "/etc/services"], stdout=subprocess.PIPE, shell=True)
(out, err) = proc.communicate()
print "program output:", out
</snippet></ROW><ROW><id>3503985</id><snippet>.wsgi</snippet></ROW><ROW><id>3503985</id><snippet>activate_this = os.path.join(path_to_my_site, "bin/activate_this.py")
execfile(activate_this, dict(__file__=activate_this))
</snippet></ROW><ROW><id>3503994</id><snippet>Thing</snippet></ROW><ROW><id>3503994</id><snippet>__lt__</snippet></ROW><ROW><id>3503994</id><snippet>class Thing():
     timeTo = 0
     timeFrom = 0
     name = ""

     def __lt__(self, other):
         return self.timeFrom &lt; other.timeTo


lesser, bigger = sorted(myList)
</snippet></ROW><ROW><id>3503994</id><snippet>lesser, bigger = sorted(myList, cmp=lambda one,other: one.timeFrom &lt; other.timeTo)</snippet></ROW><ROW><id>3503994</id><snippet>cmp</snippet></ROW><ROW><id>3503994</id><snippet>class SortAdaper(object):
    def __init__(self, obj ):
        self.obj = obj

class TimeLineSorter(SortAdaper):
    """ sorts in a timeline """
    def __lt__(self, other):
        return self.obj.timeFrom &lt; other.obj.timeTo

class NameSorter(SortAdaper):
    """ sorts by name """
    def __lt__(self, other):
        return self.obj.name &lt; other.obj.name

print sorted( myList, key=TimeLineSorter)
print sorted( myList, key=NameSorter)
</snippet></ROW><ROW><id>3504027</id><snippet>import shelve

def main(argv):
    """Main of script 1
    Due to the  internal structure of the script this 
    main function must always be called with the flag -d
    and a corresponding argument.
    """

    settings = shelve.open('mySettings')

    global now
    now = datetime.datetime.now()

    settings['vroot_directory'] = commands.getoutput("pwd")

    settings['testcase_list_file'] = 'no_argument'

    try:
        opts, args = getopt.getopt(argv, "d:t:", 
            ["directory_path=", "testcase_list="])
    except getopt.GetoptError, err:
        print command_syntax
        sys.exit()
    for opt, arg in opts:
        if opt in ("-d", "--directory"):
            settings['vroot_directory'] = arg
        if opt in ("-t", "--testcase"):
            settings['testcase_list_file'] = arg

    def function1():
        pass  

    def function2():
        if testcase_list_file == 'no_argument':
            function1()
        else:
            function2()

if __name__ == "__main__":
    main(sys.argv[1:]) 
</snippet></ROW><ROW><id>3504027</id><snippet>from Tkinter import *
import shelve

class Application:
    def __init__(self):
        settings = shelve.open('mySettings')

        """ main window constructor """
        self.root = Tk()
        # I'd like to import here the variables of script1.py
        self.root.title(settings['vroot_directory'])   ?
        self.root.mainloop()

# Main program
f = Application()
</snippet></ROW><ROW><id>3504066</id><snippet>__builtins__.__import__</snippet></ROW><ROW><id>3504066</id><snippet>import</snippet></ROW><ROW><id>3504066</id><snippet>from</snippet></ROW><ROW><id>3504066</id><snippet>.py</snippet></ROW><ROW><id>3504066</id><snippet>.pyc</snippet></ROW><ROW><id>3504066</id><snippet>.pyc</snippet></ROW><ROW><id>3504066</id><snippet>.py</snippet></ROW><ROW><id>3504066</id><snippet>.pyc</snippet></ROW><ROW><id>3504066</id><snippet>__import__</snippet></ROW><ROW><id>3504168</id><snippet>_manage_request</snippet></ROW><ROW><id>3504168</id><snippet>protected</snippet></ROW><ROW><id>3504168</id><snippet>private</snippet></ROW><ROW><id>3504341</id><snippet>import cgi
.
.
fileupload = self.request.POST["content"]

if not isinstance(fileupload, cgi.FieldStorage):
   return self.error(400)
</snippet></ROW><ROW><id>3504714</id><snippet>__import__('rules.adom')</snippet></ROW><ROW><id>3504714</id><snippet>exec</snippet></ROW><ROW><id>3504763</id><snippet>import xlrd

book = xlrd.open_workbook('myfile.xls')

print book.nsheets
print book.sheet_names()

sh = book.sheet_by_index(0)
print sh.name, sh.nrows, sh.ncols
</snippet></ROW><ROW><id>3505043</id><snippet>MACOSX_DEPLOYMENT_TARGET</snippet></ROW><ROW><id>3505043</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3505043</id><snippet># OS X 10.6.4
$ /usr/bin/python -c 'import sys;print(sys.version)'
2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)]
$ /usr/bin/python2.6 -c 'import sys;print(sys.version)'  # same as above
2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)]
$ /usr/bin/python2.5 -c 'import sys;print(sys.version)'
2.5.4 (r254:67916, Feb 11 2010, 00:50:55) 
[GCC 4.2.1 (Apple Inc. build 5646)]
$ /usr/local/bin/python2.5 -c 'import sys;print(sys.version);print(sys.executable)'
2.5.4 (r254:67917, Dec 23 2008, 14:57:27) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)]
/Library/Frameworks/Python.framework/Versions/2.5/Resources/Python.app/Contents/MacOS/Python
</snippet></ROW><ROW><id>3505043</id><snippet>which python</snippet></ROW><ROW><id>3505433</id><snippet> for editor in dashboard.dashboardeditor_set.iterator():
</snippet></ROW><ROW><id>3505433</id><snippet>iterator</snippet></ROW><ROW><id>3505450</id><snippet>boxSizer</snippet></ROW><ROW><id>3505450</id><snippet>imagePanel</snippet></ROW><ROW><id>3505450</id><snippet>SetBackgroundColour</snippet></ROW><ROW><id>3505450</id><snippet>ImgPanels</snippet></ROW><ROW><id>3505450</id><snippet>ImgPanel</snippet></ROW><ROW><id>3505450</id><snippet>class ImgPanel(wx.Panel):
    def __init__(self, parent, image):
        wx.Panel.__init__(self, parent)

        img = wx.Image(image, wx.BITMAP_TYPE_ANY)
        self.sBmp = wx.StaticBitmap(self, wx.ID_ANY, wx.BitmapFromImage(img))

        sizer = wx.BoxSizer()
        sizer.Add(item=self.sBmp, proportion=0, flag=wx.ALL, border=10)
        self.SetBackgroundColour('green')
        self.SetSizerAndFit(sizer)
</snippet></ROW><ROW><id>3505524</id><snippet>file.tell()</snippet></ROW><ROW><id>3505524</id><snippet>file.seek()</snippet></ROW><ROW><id>3505524</id><snippet>fp = open('myfile')
last_pos = fp.tell()
line = fp.readline()
while line != '':
  if line == 'SPECIAL':
    fp.seek(last_pos)
    other_function(fp)
    break
  last_pos = fp.tell()
  line = fp.readline()
</snippet></ROW><ROW><id>3505524</id><snippet>file.seek()</snippet></ROW><ROW><id>3505524</id><snippet>for line in file</snippet></ROW><ROW><id>3505524</id><snippet>while</snippet></ROW><ROW><id>3505559</id><snippet>return self.printTag()</snippet></ROW><ROW><id>3505559</id><snippet>return self.printTag(self)</snippet></ROW><ROW><id>3505826</id><snippet>#! /usr/bin/env python

import os
import pprint
import subprocess

command = ['bash', '-c', 'source init_env &amp;&amp; env']

proc = subprocess.Popen(command, stdout = subprocess.PIPE)

for line in proc.stdout:
  (key, _, value) = line.partition("=")
  os.environ[key] = value

proc.communicate()

pprint.pprint(dict(os.environ))
</snippet></ROW><ROW><id>3505826</id><snippet>source init_env</snippet></ROW><ROW><id>3505826</id><snippet>export</snippet></ROW><ROW><id>3505826</id><snippet>env</snippet></ROW><ROW><id>3505826</id><snippet>os.environ</snippet></ROW><ROW><id>3505826</id><snippet>os.putenv()</snippet></ROW><ROW><id>3505833</id><snippet>def index():
    if request.vars.code == '400':
        return(dict(app=request.application,
            ticket=None,
            traceback="A 400 error was raised, this is controller/method path not found",
            code=None,
            layer=None,
            wasEmailed=False))
    elif request.vars.code == '404':
        return(dict(app=request.application,
            ticket=None,
            traceback="A 404 error was raised, this is bad.",
            code=None,
            layer=None,
            wasEmailed=False))  
    else:
        fH = file('applications/%s/errors/%s' % (request.application,request.vars.ticket.split("/")[1]))
        e = cPickle.load(fH)
            fH.close()
            __sendEmail(request.application,e['layer'],e['traceback'],e['code'])
        return(dict(app=request.application,
            ticket=request.vars.ticket,
            traceback=e['traceback'],
            code=e['code'],
            layer=e['layer'],
            wasEmailed=True))
</snippet></ROW><ROW><id>3505854</id><snippet>print "%02d"%a</snippet></ROW><ROW><id>3505854</id><snippet>"{0:0=2d}".format(a)
</snippet></ROW><ROW><id>3506218</id><snippet>class Foo:
    bar = 1

print Foo.bar # prints '1'
</snippet></ROW><ROW><id>3506218</id><snippet># Create static member
class Foo:
    bar = 1

# Create and destroy object of type Foo
foo = Foo()
del foo

# Check that static members survive
print Foo.bar # Still prints '1'
</snippet></ROW><ROW><id>3506515</id><snippet>k = int(raw_input('From What row items should be appeared again at the end?'))
res = [l for l in product(*(li+[li[k]])) if l[k]&lt;l[len(li)] ]
</snippet></ROW><ROW><id>3506624</id><snippet>incr()</snippet></ROW><ROW><id>3506624</id><snippet>incr()</snippet></ROW><ROW><id>3506624</id><snippet>set()</snippet></ROW><ROW><id>3506624</id><snippet>incr()</snippet></ROW><ROW><id>3506652</id><snippet>key</snippet></ROW><ROW><id>3506652</id><snippet>&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; RSAkey = RSA.generate(1024)
&gt;&gt;&gt; getattr(RSAkey.key, 'n')
13773...L
&gt;&gt;&gt; getattr(RSAkey.key, 'p')
11731...L
&gt;&gt;&gt; getattr(RSAkey.key, 'q')
11740...L
</snippet></ROW><ROW><id>3506652</id><snippet>exportKey()</snippet></ROW><ROW><id>3506652</id><snippet>&gt;&gt;&gt; private = RSA.generate(1024)
&gt;&gt;&gt; public  = private.publickey()
&gt;&gt;&gt; private.exportKey()
'-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDo1M0P3nryaF8ZITv8vCFVnjUJ1mnIsrqXZRTzjin69xepr3cz\nKicG3EYSUqMODQAsvMj0tGMo+ElGOVOkPFLVVBHd8izgA/E1RqUzbUDMj4WnhlhA\nQq7tNaViOXNaZ7krJZHabZKxfYvLAQtm4tr+m5NtXPBaWvjwhd5M9xvktwIDAQAB\nAoGBANVsS1Rikbymo5V7e2teYAgFb4THAEyyWIvyYlQnWp/r48rtRoyl9QQ64hhl\nm4WDsUdQ/bwhpkul3DT804jWqu2V71p68rQP7h5D6ldCBUr5nQc9o/uEyy4YCgxD\n/ZxNiY5Bb/lMP9nhb2NbG4184mhUMHu+06wWX6RrXQtMtjYhAkEA8DioToMZIy3s\nhPohri3CAgByV2Jxf7JPqVZ93JjlSlBz+aybSv1mOJUPRFpkMk2xiPmHtEn16hYr\nesVK11tcjwJBAPgf4QYAw9dV+DuVqdwz+kmTjnlkr0Q7fjaGfl60DWmuLWmxiRhe\nMYQ2+8iyPDmxcPFTGSpGqyvyJDjQ/wOlWVkCQQCRIuotZW/OnXSFc0reHa9V3kc3\nHLdOW8FdonAw0//Uwn8PnoXE7QzRqt2qgqJ+8goNpBWli/oUEIj8iC8LpptpAkBV\nFFlMfaaph8j+ZWtBHnGMGRSZe3S9qMi2WZerUYHn4tmfjEi+Gk5QT6o2Pyd3gOiB\nV0Uhwemfv/+7m65VybTBAkEA5H59kG+B9HHD5hJtksAtMh8dxk/MI8G0csduU0vu\n7K5ejL522XsHurVrWdqnk6KvjlRXqB4FsMWLE6RBgBNV0A==\n-----END RSA PRIVATE KEY-----'
&gt;&gt;&gt; public.exportKey()
'-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDo1M0P3nryaF8ZITv8vCFVnjUJ\n1mnIsrqXZRTzjin69xepr3czKicG3EYSUqMODQAsvMj0tGMo+ElGOVOkPFLVVBHd\n8izgA/E1RqUzbUDMj4WnhlhAQq7tNaViOXNaZ7krJZHabZKxfYvLAQtm4tr+m5Nt\nXPBaWvjwhd5M9xvktwIDAQAB\n-----END PUBLIC KEY-----'
</snippet></ROW><ROW><id>3506692</id><snippet>Content.objects.all().order_by('?')[:100]
</snippet></ROW><ROW><id>3506750</id><snippet>class Tag(Declarative):
    ...
    @classmethod
    def get(cls, tag_name):
        tag = cls.query.filter(cls.name == tag_name).first()
        if not tag:
            tag = cls(tag_name)
        return tag
</snippet></ROW><ROW><id>3506750</id><snippet>def _set_tags(self, taglist):
    self._tags = []
    for tag_name in taglist:
        self._tags.append(Tag.get(tag_name))
</snippet></ROW><ROW><id>3506750</id><snippet>__new__</snippet></ROW><ROW><id>3506750</id><snippet>__init__</snippet></ROW><ROW><id>3506750</id><snippet>def __new__(cls, name=None): 
    tag = cls.query.filter(cls.name == tag_name).first()
    if not tag:
        tag = object.__new__(cls)
    return tag
</snippet></ROW><ROW><id>3506750</id><snippet>__init__</snippet></ROW><ROW><id>3506750</id><snippet>__new__</snippet></ROW><ROW><id>3506750</id><snippet>cls</snippet></ROW><ROW><id>3506750</id><snippet>__init__</snippet></ROW><ROW><id>3506753</id><snippet>@route('/api/status')
def api_status():
    return {'status':'online', 'servertime':time.time()}
</snippet></ROW><ROW><id>3507223</id><snippet>find = self.db.action_log.find()
find.where(pymongo.code.Code('this.dest_id==1 || this.src_id==2'))
</snippet></ROW><ROW><id>3507487</id><snippet>multiprocessing</snippet></ROW><ROW><id>3507487</id><snippet>from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print parent_conn.recv()   # prints "[42, None, 'hello']"
    p.join()
</snippet></ROW><ROW><id>3507572</id><snippet>0</snippet></ROW><ROW><id>3507572</id><snippet>1</snippet></ROW><ROW><id>3507572</id><snippet>find(target, key) == -1</snippet></ROW><ROW><id>3507572</id><snippet>return 1 + ( 1 + (1 + (1 + (0))))</snippet></ROW><ROW><id>3507680</id><snippet>&lt;!-- //--&gt;</snippet></ROW><ROW><id>3507680</id><snippet>markupMassage</snippet></ROW><ROW><id>3507680</id><snippet>import re, copy

myMassage = [(re.compile('&lt;!-([^-])'), lambda match: '&lt;!--' + match.group(1))]
myNewMassage = copy.copy(BeautifulSoup.MARKUP_MASSAGE)
myNewMassage.extend(myMassage)

BeautifulSoup(badString, markupMassage=myNewMassage)
# Foo&lt;!--This comment is malformed.--&gt;Bar&lt;br /&gt;Baz
</snippet></ROW><ROW><id>3507717</id><snippet>from functools import reduce
class DerivationRegistry(type):
    def __init__(cls,name,bases,cls_dict):
        type.__init__(cls,name,bases,cls_dict)
        cls._subclasses = set()
        for base in bases:
            if isinstance(base,DerivationRegistry):
                base._subclasses.add(cls)

    def getSubclasses(cls):
        return reduce( set.union,
                       ( succ.getSubclasses() for succ  in cls._subclasses if isinstance(succ,DerivationRegistry)),
                       cls._subclasses)

class Base(object):
    __metaclass__ = DerivationRegistry

class Cls1(object):
    pass

class Cls2(Base):
    pass

class Cls3(Cls2,Cls1):
    pass

class Cls4(Cls3):
    pass

print(Base.getSubclasses())
</snippet></ROW><ROW><id>3508014</id><snippet>os</snippet></ROW><ROW><id>3508014</id><snippet>SSH_CONNECTION</snippet></ROW><ROW><id>3508014</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; using_ssh = 'SSH_CONNECTION' in os.environ
</snippet></ROW><ROW><id>3508120</id><snippet>class HelloPython:
    def on_window_destroy(self, widget, data=None):
        gtk.main_quit()

    def __init__(self):
        builder = gtk.Builder()
        builder.add_from_file("HelloPython.xml") 
        self.window = builder.get_object("window")
        self.label = builder.get_object("label1") # get reference to the label
        builder.connect_signals(self)   

    def on_button1_clicked(self, widget):
        #widget.set_label("Hello World!") this would set the button's text
        self.label.set_text("Hello World!") # this sets the label's text
</snippet></ROW><ROW><id>3508201</id><snippet>  (S
    (NP (DT The) (NN park))
    (VP
      (VBZ is)
      (ADJP (RB so) (JJ wonderful))
      (SBAR
        (WHADVP (WRB when))
        (S
          (S (NP (DT the) (NN sun)) (VP (VBZ is) (VP (VBG setting))))
          (CC and)
          (S
            (NP (DT a) (JJ cool) (NN breeze))
            (VP (VBZ is) (VP (VBG blowing)))))))
    (. .)))
</snippet></ROW><ROW><id>3508201</id><snippet>import os, sys
from subprocess import Popen, PIPE
import nltk

BP = os.path.dirname(os.path.abspath(__file__))
CP = "%(BP)s/opennlp-tools-1.4.3.jar:%(BP)s/opennlp-tools-1.4.3/lib/maxent-2.5.2.jar:%(BP)s/opennlp-tools-1.4.3/lib/jwnl-1.3.3.jar:%(BP)s/opennlp-tools-1.4.3/lib/trove.jar" % dict(BP=BP)
cmd = "java -cp %(CP)s -Xmx1024m opennlp.tools.lang.english.TreebankParser -k 1 -d %(BP)s/opennlp.models/english/parser" % dict(CP=CP, BP=BP)
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
stdin, stdout, stderr = (p.stdin, p.stdout, p.stderr)
text = "This is my sample sentence."
stdin.write('%s\n' % text)
ret = stdout.readline()
ret = ret.split(' ')
prob = float(ret[1])
tree = nltk.Tree.parse(' '.join(ret[2:]))
</snippet></ROW><ROW><id>3508300</id><snippet>for w in words:
     if re.search('^[a-zA-Z]+$', w) == None:
          continue
</snippet></ROW><ROW><id>3508300</id><snippet>isalpha()</snippet></ROW><ROW><id>3508300</id><snippet>for w in words:
    if not w.isalpha():
          continue
</snippet></ROW><ROW><id>3508321</id><snippet>p_values = scipy.stats.norm.sf(z_scores) #one-sided

p_values = scipy.stats.norm.sf(z_scores)*2 #twosided
</snippet></ROW><ROW><id>3508706</id><snippet>    rendererText = gtk.CellRendererText()
    tvcols = ["Name", "Pid", "User", "Group"]

    for num, name in enumerate(tvcols):
        column_name = gtk.TreeViewColumn(name ,rendererText, text=num)
        self.tree.append_column(column_name)
</snippet></ROW><ROW><id>3508924</id><snippet>i</snippet></ROW><ROW><id>3508924</id><snippet>,</snippet></ROW><ROW><id>3508924</id><snippet>print re.split(r',', 'p,,,g')
</snippet></ROW><ROW><id>3508924</id><snippet>'p'</snippet></ROW><ROW><id>3508924</id><snippet>'g'</snippet></ROW><ROW><id>3508924</id><snippet>''</snippet></ROW><ROW><id>3508979</id><snippet>sum()</snippet></ROW><ROW><id>3508979</id><snippet>total = sum(v.amount for ob in self.oblist for v in ob.anotherob)
</snippet></ROW><ROW><id>3509072</id><snippet>BLACK = 0
BLUE = 1
GREEN = 2
CYAN = 3
RED = 4
MAGENTA = 5
BROWN = 6
LIGHTGRAY = LIGHTGREY = 7
DARKGRAY = DARKGREY = 8
LIGHTBLUE = 9
LIGHTGREEN = 10
LIGHTCYAN = 11
LIGHTRED = 12
LIGHTMAGENTA = 13
YELLOW = 14
WHITE = 15
</snippet></ROW><ROW><id>3509072</id><snippet>WConio.textcolor(WConio.RED)
</snippet></ROW><ROW><id>3509553</id><snippet>'none'</snippet></ROW><ROW><id>3509553</id><snippet>'left'</snippet></ROW><ROW><id>3509553</id><snippet>'bottom'</snippet></ROW><ROW><id>3509553</id><snippet>matplotlibrc</snippet></ROW><ROW><id>3509553</id><snippet>matplotlibrc</snippet></ROW><ROW><id>3509553</id><snippet>rcParams</snippet></ROW><ROW><id>3509553</id><snippet>rc</snippet></ROW><ROW><id>3509553</id><snippet>rc</snippet></ROW><ROW><id>3509553</id><snippet>rc</snippet></ROW><ROW><id>3509553</id><snippet>'none'</snippet></ROW><ROW><id>3509553</id><snippet>top</snippet></ROW><ROW><id>3509553</id><snippet>right</snippet></ROW><ROW><id>3509553</id><snippet>left</snippet></ROW><ROW><id>3509553</id><snippet>bottom</snippet></ROW><ROW><id>3509553</id><snippet>rc</snippet></ROW><ROW><id>3509553</id><snippet>self.set_edgecolor( rcParams['axes.edgecolor'] )
</snippet></ROW><ROW><id>3509553</id><snippet>import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.pyplot import show

# Set up a default, sample figure. 
fig = plt.figure()
x = np.linspace(-np.pi,np.pi,100)
y = 2*np.sin(x)

ax = fig.add_subplot(1,2,2)
ax.plot(x,y)
ax.set_title('Normal Spines')

def hide_spines():
    """Hides the top and rightmost axis spines from view for all active
    figures and their respective axes."""

    # Retrieve a list of all current figures.
    figures = [x for x in matplotlib._pylab_helpers.Gcf.get_all_fig_managers()]
    for figure in figures:
        # Get all Axis instances related to the figure.
        for ax in figure.canvas.figure.get_axes():
            # Disable spines.
            ax.spines['right'].set_color('none')
            ax.spines['top'].set_color('none')
            # Disable ticks.
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

hide_spines()
show()
</snippet></ROW><ROW><id>3509553</id><snippet>hide_spines()</snippet></ROW><ROW><id>3509553</id><snippet>show()</snippet></ROW><ROW><id>3509553</id><snippet>show()</snippet></ROW><ROW><id>3509553</id><snippet>matplotlib</snippet></ROW><ROW><id>3509553</id><snippet>rc</snippet></ROW><ROW><id>3509636</id><snippet>data = "Please vc or pc:</snippet></ROW><ROW><id>3509636</id><snippet>if data == 'pc' | data == 'vc'</snippet></ROW><ROW><id>3509636</id><snippet>|</snippet></ROW><ROW><id>3509636</id><snippet>or</snippet></ROW><ROW><id>3509636</id><snippet>and</snippet></ROW><ROW><id>3509723</id><snippet>gtk.Dialog.run()</snippet></ROW><ROW><id>3509723</id><snippet>Deferred</snippet></ROW><ROW><id>3509723</id><snippet>gtk.Dialog</snippet></ROW><ROW><id>3509723</id><snippet>response</snippet></ROW><ROW><id>3509723</id><snippet>Deferred</snippet></ROW><ROW><id>3509723</id><snippet>def showMessage(text):
    mdlg = gtk.MessageDialog(type=gtk.MESSAGE_INFO,
                             buttons=gtk.BUTTONS_CLOSE,
                             message_format=text)
    result = Deferred()
    def response(dialog, response_id):
        mdlg.destroy()
        result.callback(response_id)
        return False
    mdlg.connect("response", response)
    mdlg.show_all()
    return result
</snippet></ROW><ROW><id>3510060</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/bin/python</snippet></ROW><ROW><id>3510060</id><snippet>ppc</snippet></ROW><ROW><id>3510060</id><snippet>i386</snippet></ROW><ROW><id>3510060</id><snippet>i386</snippet></ROW><ROW><id>3510060</id><snippet>x86_64</snippet></ROW><ROW><id>3510060</id><snippet>ppc</snippet></ROW><ROW><id>3510060</id><snippet>$ /usr/local/bin/python2.6 -c 'import sys;print(sys.executable)'  # python.org Python
/Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python
$ /usr/bin/python2.6 -c 'import sys;print(sys.executable)'  # Apple-supplied Python
/usr/bin/python2.6
</snippet></ROW><ROW><id>3510087</id><snippet>Ll -- lowercase
Lu -- uppercase
Lt -- titlecase
Lm -- modifier
Lo -- other
</snippet></ROW><ROW><id>3510087</id><snippet>Ll &lt;-&gt; islower()</snippet></ROW><ROW><id>3510087</id><snippet>Lu</snippet></ROW><ROW><id>3510087</id><snippet>(Lu or Lt) &lt;-&gt; istitle()</snippet></ROW><ROW><id>3510087</id><snippet>Lm</snippet></ROW><ROW><id>3510087</id><snippet>Lo</snippet></ROW><ROW><id>3510087</id><snippet>&gt;&gt;&gt; cased = lambda c: c.upper() != c or c.lower() != c
&gt;&gt;&gt; sum(cased(unichr(i)) for i in xrange(65536))
1970
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3510160</id><snippet>modulegraph</snippet></ROW><ROW><id>3510160</id><snippet>build/bdist.macosx-10.6-universal/egg/modulegraph</snippet></ROW><ROW><id>3510160</id><snippet>py2app</snippet></ROW><ROW><id>3510160</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages</snippet></ROW><ROW><id>3510723</id><snippet>makemessages</snippet></ROW><ROW><id>3510723</id><snippet>django</snippet></ROW><ROW><id>3510723</id><snippet>django/bin/make-messages.py</snippet></ROW><ROW><id>3510723</id><snippet>django-admin.py makemessages --locale=en
</snippet></ROW><ROW><id>3510728</id><snippet>import subprocess
def psql_copy_from(filename, tablename, columns = None):
    """Warning, this does not properly quote things"""
    coltxt = ' (%s)' % ', '.join(columns) if columns else ''
    with open(filename) as f:
        subprocess.check_call([
            'psql',
            '-c', 'COPY %s%s FROM STDIN' % (tablename, coltxt),
            '--set=ON_ERROR_STOP=true', # to be safe
            # add your connection args here
        ], stdin=f)
</snippet></ROW><ROW><id>3510831</id><snippet>foo.decode('utf8').encode('utf8')
</snippet></ROW><ROW><id>3510831</id><snippet>b'\xed\xbd\xbf'.decode('utf8')
</snippet></ROW><ROW><id>3510860</id><snippet>struct</snippet></ROW><ROW><id>3510860</id><snippet>"&lt;ii%ds" % len(value)</snippet></ROW><ROW><id>3510860</id><snippet>&lt;ii4s</snippet></ROW><ROW><id>3510860</id><snippet>struct.pack</snippet></ROW><ROW><id>3510860</id><snippet>value</snippet></ROW><ROW><id>3510894</id><snippet>import re
pattern = re.compile("(of|the|in|for|at)\W", re.I)
phrases = ['of New York', 'of the New York']
map(lambda phrase: pattern.sub("", phrase),  phrases) # ['New York', 'New York']
</snippet></ROW><ROW><id>3510894</id><snippet>lambda</snippet></ROW><ROW><id>3510894</id><snippet>[pattern.sub("", phrase) for phrase in phrases]
</snippet></ROW><ROW><id>3510894</id><snippet>pattern = re.compile("\\b(of|the|in|for|at)\\W", re.I)
phrases = ['of New York', 'of the New York', 'Spain has rain']
[pattern.sub("", phrase) for phrase in phrases] # ['New York', 'New York', 'Spain has rain']
</snippet></ROW><ROW><id>3511113</id><snippet>__MyClass</snippet></ROW><ROW><id>3511113</id><snippet>_MyClass</snippet></ROW><ROW><id>3511154</id><snippet>any</snippet></ROW><ROW><id>3511154</id><snippet>any(&lt;condition&gt; for it in &lt;iterable&gt;)      # return True on &lt;condition&gt;
</snippet></ROW><ROW><id>3511300</id><snippet>self.commands = ("command1",)
</snippet></ROW><ROW><id>3511525</id><snippet>    from bitstring import ConstBitStream
    s = ConstBitStream(filename='somefile.h264')
    profile_idc = s.read('uint:8')
    # Multiple reads in one go returns a list:
    constraint_flags = s.readlist('4*uint:1')
    reserved_zero_4bits = s.read('bin:4')
    level_idc = s.read('uint:8')
    seq_parameter_set_id = s.read('ue')
    if profile_idc in [100, 110, 122, 244, 44, 83, 86]:
        chroma_format_idc = s.read('ue')
        if chroma_format_idc == 3:
            separate_colour_plane_flag = s.read('uint:1')
        bit_depth_luma_minus8 = s.read('ue')
        bit_depth_chroma_minus8 = s.read('ue')
        ...
</snippet></ROW><ROW><id>3511689</id><snippet>Profile</snippet></ROW><ROW><id>3511689</id><snippet>User</snippet></ROW><ROW><id>3511689</id><snippet>OneToOneField</snippet></ROW><ROW><id>3511689</id><snippet>ForeignKey</snippet></ROW><ROW><id>3511689</id><snippet>User</snippet></ROW><ROW><id>3511887</id><snippet>preparse</snippet></ROW><ROW><id>3511887</id><snippet>sage: preparse("(1..12)")
'(ellipsis_iter(Integer(1),Ellipsis,Integer(12)))'
</snippet></ROW><ROW><id>3511887</id><snippet>ellipsis_iter</snippet></ROW><ROW><id>3512149</id><snippet>import Tkinter

root = Tkinter.Tk()
menubar = Tkinter.Menu(root)
root.config(menu=menubar)

fileMenu = Tkinter.Menu(menubar, tearoff=False)
editMenu = Tkinter.Menu(menubar, tearoff=False)

menubar.add_cascade(label="File",underline=0, menu=fileMenu)
menubar.add_cascade(label="Edit",underline=0, menu=editMenu)

fileMenu.add_command(label="Open...", underline=0)
fileMenu.add_command(label="Save", underline=0)
fileMenu.add_separator()
fileMenu.add_command(label="Exit", underline=1)

editMenu.add_command(label="Cut", underline=2)
editMenu.add_command(label="Copy", underline=0)
editMenu.add_command(label="Paste", underline=0)

root.mainloop()
</snippet></ROW><ROW><id>3512476</id><snippet>PyList_Append</snippet></ROW><ROW><id>3512476</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>3513906</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>3513906</id><snippet>&lt;KeyPress&gt;</snippet></ROW><ROW><id>3513906</id><snippet>entry.bind(...)</snippet></ROW><ROW><id>3513906</id><snippet>import Tkinter

def OnKeyPress(event):
    value = event.widget.get()
    string="value of %s is '%s'" % (event.widget._name, value)
    status.configure(text=string)

root = Tkinter.Tk()

entry1 = Tkinter.Entry(root, name="entry1")
entry2 = Tkinter.Entry(root, name="entry2")
entry3 = Tkinter.Entry(root, name="entry3")

# Three different bindtags. The first is just the default but I'm
# including it for illustrative purposes. The second reverses the
# order of the first two tags. The third introduces a new tag after
# the class tag.
entry1.bindtags(('.entry1', 'Entry', '.', 'all'))
entry2.bindtags(('Entry', '.entry2', '.', 'all'))
entry3.bindtags(('.entry3','Entry','post-class-bindings', '.', 'all'))

btlabel1 = Tkinter.Label(text="bindtags: %s" % " ".join(entry1.bindtags()))
btlabel2 = Tkinter.Label(text="bindtags: %s" % " ".join(entry2.bindtags()))
btlabel3 = Tkinter.Label(text="bindtags: %s" % " ".join(entry3.bindtags()))
status = Tkinter.Label(anchor="w")

entry1.grid(row=0,column=0)
btlabel1.grid(row=0,column=1, padx=10, sticky="w")
entry2.grid(row=1,column=0)
btlabel2.grid(row=1,column=1, padx=10, sticky="w")
entry3.grid(row=2,column=0)
btlabel3.grid(row=2,column=1, padx=10)
status.grid(row=3, columnspan=2, sticky="w")

# normally you bind to the widget; in the third case we're binding
# to the new bindtag we've created
entry1.bind("&lt;KeyPress&gt;", OnKeyPress)
entry2.bind("&lt;KeyPress&gt;", OnKeyPress)
entry3.bind_class("post-class-bindings", "&lt;KeyPress&gt;", OnKeyPress)

root.mainloop()
</snippet></ROW><ROW><id>3514000</id><snippet>m</snippet></ROW><ROW><id>3514000</id><snippet>np.swapaxes</snippet></ROW><ROW><id>3514000</id><snippet>import numpy as np
m=np.arange(24).reshape(2,3,4)
print(m.shape)
# (2, 3, 4)
</snippet></ROW><ROW><id>3514000</id><snippet>axis</snippet></ROW><ROW><id>3514000</id><snippet>m_swapped</snippet></ROW><ROW><id>3514000</id><snippet>m</snippet></ROW><ROW><id>3514000</id><snippet>axis=1</snippet></ROW><ROW><id>3514000</id><snippet>axis=-1</snippet></ROW><ROW><id>3514000</id><snippet>axis=1
m_swapped=m.swapaxes(axis,-1)
print(m_swapped.shape)
# (2, 4, 3)
</snippet></ROW><ROW><id>3514000</id><snippet>for i in xrange(m_swapped.shape[-1]):
    assert np.all(m[:,i,:] == m_swapped[...,i])
</snippet></ROW><ROW><id>3514000</id><snippet>m_swapped</snippet></ROW><ROW><id>3514000</id><snippet>m</snippet></ROW><ROW><id>3514000</id><snippet>m_swapped</snippet></ROW><ROW><id>3514000</id><snippet>m</snippet></ROW><ROW><id>3514000</id><snippet>m_swapped[1,2,0]=100
print(m)
assert(m[1,0,2]==100)
</snippet></ROW><ROW><id>3514009</id><snippet>first, rest = l[0], l[1:]
</snippet></ROW><ROW><id>3514009</id><snippet>i = iter(l)
first = next(i) # i.next() in older versions
rest = list(i)
</snippet></ROW><ROW><id>3514165</id><snippet>guess = input ("What's yer guess? ")
</snippet></ROW><ROW><id>3514165</id><snippet>input</snippet></ROW><ROW><id>3514165</id><snippet>string</snippet></ROW><ROW><id>3514165</id><snippet>int</snippet></ROW><ROW><id>3514165</id><snippet>guess</snippet></ROW><ROW><id>3514165</id><snippet>&lt;</snippet></ROW><ROW><id>3514165</id><snippet>int</snippet></ROW><ROW><id>3514165</id><snippet>try:
    guess = int(input("What's yer guess? "))
except ValueError:
    # Handle bad input
</snippet></ROW><ROW><id>3514653</id><snippet>import web
import json

class index:
    def GET(self):
        pyDict = {'one':1,'two':2}
        web.header('Content-Type', 'application/json')
        return json.dumps(pyDict)
</snippet></ROW><ROW><id>3515006</id><snippet>.html</snippet></ROW><ROW><id>3515006</id><snippet>$("select, textarea, input", $("#dialog")).each(function (i) {
    $("#hiddeninform").append($("&lt;input/&gt;").attr("name", $(this).attr("name")).val($(this).val()));
});
</snippet></ROW><ROW><id>3515150</id><snippet>urllib2.HTTPError</snippet></ROW><ROW><id>3515150</id><snippet>try...except</snippet></ROW><ROW><id>3515150</id><snippet>import urllib2
import time

for url in urls:
    while True:
        try:
            sock=urllib2.urlopen(url)
        except (urllib2.HTTPError, urllib2.URLError) as err:
            # You may want to count how many times you reach here and
            # do something smarter if you fail too many times.
            # If a site is down, pestering it every 10 seconds may not
            # be very fruitful or polite.
            time.sleep(10)
        else:              
            # Success  
            contents=sock.read()
            # process contents
            break                # break out of the while loop
</snippet></ROW><ROW><id>3515179</id><snippet>def pagination(request, objects, pages):
    paginator = Paginator(objects, pages)

    try:
        page = int(request.GET.get('page', '1'))
    except ValueError:
        page = 1

    try:
        results = paginator.page(page)
    except (EmptyPage, InvalidPage):
        results = paginator.page(paginator.num_pages)

    return results
</snippet></ROW><ROW><id>3515179</id><snippet>def index(request):
    if 'q' in request.GET:
        company_list = Company.objects.filter(
            Q(company__icontains = request.GET['q']) | 
            Q(county__icontains = request.GET['q']) | 
            Q(city__icontains = request.GET['q']) |
            Q(product_description__icontains = request.GET['q'])
        )
        query = request.GET['q']
        companies = pagination(request, company_list, 10)
        return render_response(request, 'database/index.html', {"companies": companies, "query": query})
    else:
        company_list = Company.objects.all()
        companies = pagination(request, company_list, 10)
        return render_response(request, 'database/index.html', {"companies": companies})
</snippet></ROW><ROW><id>3515234</id><snippet>__getattr__</snippet></ROW><ROW><id>3515234</id><snippet>def __getattr__(self, name):
    # This is only called when the normal mechanism fails, so in practice should never be called.
    # It is only provided to satisfy pylint that it is okay not to raise E1101 errors in the client code.
    raise AttributeError("%r instance has no attribute %r" % (self, name))
</snippet></ROW><ROW><id>3515882</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>3515882</id><snippet>-u</snippet></ROW><ROW><id>3515882</id><snippet>sys.stdout</snippet></ROW><ROW><id>3515882</id><snippet>PYTHONUNBUFFERED</snippet></ROW><ROW><id>3515882</id><snippet>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)</snippet></ROW><ROW><id>3516211</id><snippet>class RepeatedDeferred:
    def __init__(self):
        self.callbacks = []

        self.df = defer.Deferred()

    def addCallback(self, callback):
        self.callbacks.append(callback)

        self.df.addCallback(callback)

    def callback(self, res):
        self.df.callback(res)

        self.df = defer.Deferred()
        for c in self.callbacks:
            self.df.addCallback(c)
</snippet></ROW><ROW><id>3516348</id><snippet>federated_identity()</snippet></ROW><ROW><id>3516590</id><snippet>&gt;&gt;&gt; string='texttexttextblahblah",".'
&gt;&gt;&gt; string = string[:-3]
&gt;&gt;&gt; string
'texttexttextblahblah"'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3516590</id><snippet>string</snippet></ROW><ROW><id>3516590</id><snippet>text</snippet></ROW><ROW><id>3516590</id><snippet>blah</snippet></ROW><ROW><id>3516590</id><snippet>.find()</snippet></ROW><ROW><id>3516590</id><snippet>.index(x)</snippet></ROW><ROW><id>3516590</id><snippet>x</snippet></ROW><ROW><id>3516590</id><snippet>"</snippet></ROW><ROW><id>3516590</id><snippet>find</snippet></ROW><ROW><id>3516590</id><snippet>,</snippet></ROW><ROW><id>3516590</id><snippet>mystr = mystr[:mystr.find('"') + 1]
</snippet></ROW><ROW><id>3516692</id><snippet>import mechanize
br=mechanize.Browser()
br.open('http://www.yourfavoritesite.com')
br.select_form(nr=0) #check yoursite forms to match the correct number
br['Username']='Username' #use the proper input type=text name
br['Password']='Password' #use the proper input type=password name
br.submit()
br.retrieve('https://www.yourfavoritesite.com/pagetoretrieve.html','yourfavoritepage.html')
</snippet></ROW><ROW><id>3516692</id><snippet>Username</snippet></ROW><ROW><id>3516692</id><snippet>Password</snippet></ROW><ROW><id>3516692</id><snippet>br.select_form(name="thisthing")
</snippet></ROW><ROW><id>3516754</id><snippet>import lxml
from lxml import html
testFile=open(r'c:\temp\testlxml.htm').read()
aTree=html.fromstring(testFile)
bolds=aTree.cssselect('b')
theTitles=[item.text for item in bolds if item.text if 'KEY' in item.text]
theBoldKeys=[item for item in bolds if item.text if 'KEY' in item.text]
theFullList=[]
for e in aTree.iter():
    theFullList.append(e)

for numb,item in enumerate(theFullList):
    if item==theBoldItems[0]:
        first=numb
    if item==theBoldItems[1]:
        second=numb
theText=[]
for item in theFullList[first:second]:
    if item.text:
        theText.append(item.text)
    if item.tail:
       theText.append(item.tail)

aString=' '.join(theText)
</snippet></ROW><ROW><id>3516905</id><snippet>str</snippet></ROW><ROW><id>3516905</id><snippet>struct</snippet></ROW><ROW><id>3517046</id><snippet>Cython</snippet></ROW><ROW><id>3517299</id><snippet>ctypes.cast</snippet></ROW><ROW><id>3517299</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; b = ctypes.create_string_buffer(500)
&gt;&gt;&gt; b[:6] = 'foobar'
&gt;&gt;&gt; ctypes.cast(ctypes.byref(b, 4), ctypes.POINTER(ctypes.c_char))
&lt;ctypes.LP_c_char object at 0x100756e60&gt;
&gt;&gt;&gt; _.contents
c_char('a')
</snippet></ROW><ROW><id>3517646</id><snippet>In [9]: %pdb
Automatic pdb calling has been turned ON
</snippet></ROW><ROW><id>3517827</id><snippet>s = 'c:/path/to/folder/'
</snippet></ROW><ROW><id>3517827</id><snippet>str</snippet></ROW><ROW><id>3517886</id><snippet>HTTPS</snippet></ROW><ROW><id>3517901</id><snippet>void add</snippet></ROW><ROW><id>3517901</id><snippet>a</snippet></ROW><ROW><id>3517901</id><snippet>std::vector&lt;int&gt;</snippet></ROW><ROW><id>3517901</id><snippet>add</snippet></ROW><ROW><id>3517901</id><snippet>return None</snippet></ROW><ROW><id>3517901</id><snippet>return None</snippet></ROW><ROW><id>3517911</id><snippet>(f)</snippet></ROW><ROW><id>3517911</id><snippet>f</snippet></ROW><ROW><id>3517911</id><snippet>*a</snippet></ROW><ROW><id>3517911</id><snippet>**k</snippet></ROW><ROW><id>3517911</id><snippet>import inspect

def magical_way(f):
    return inspect.getargspec(f)[0]
</snippet></ROW><ROW><id>3518170</id><snippet>text_content</snippet></ROW><ROW><id>3518170</id><snippet>import lxml.html as lh
data = """&lt;a&gt;&lt;b&gt;&lt;c&gt;blah&lt;/c&gt;&lt;/b&gt;&lt;/a&gt;"""
doc = lh.fromstring(data)
print(doc)
# &lt;Element a at b76eb83c&gt;
</snippet></ROW><ROW><id>3518170</id><snippet>doc</snippet></ROW><ROW><id>3518170</id><snippet>Element</snippet></ROW><ROW><id>3518170</id><snippet>a</snippet></ROW><ROW><id>3518170</id><snippet>a</snippet></ROW><ROW><id>3518170</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>3518170</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>3518170</id><snippet>doc.text</snippet></ROW><ROW><id>3518170</id><snippet>None</snippet></ROW><ROW><id>3518170</id><snippet>print(doc.text)
# None
</snippet></ROW><ROW><id>3518170</id><snippet>c</snippet></ROW><ROW><id>3518170</id><snippet>doc.text_content()</snippet></ROW><ROW><id>3518170</id><snippet>None</snippet></ROW><ROW><id>3518170</id><snippet>print(doc.text_content())
# blah
</snippet></ROW><ROW><id>3518170</id><snippet>text</snippet></ROW><ROW><id>3518170</id><snippet>lxml.etree.Element</snippet></ROW><ROW><id>3518170</id><snippet>text</snippet></ROW><ROW><id>3518170</id><snippet>tail</snippet></ROW><ROW><id>3518170</id><snippet>lxml.html.Element</snippet></ROW><ROW><id>3518175</id><snippet>read()</snippet></ROW><ROW><id>3518241</id><snippet>def save(self):
    if yourvalidation:
        super(Model, self).save() #call super to actually do save
    else:
        raise #either ValueError or ValidationException
</snippet></ROW><ROW><id>3518464</id><snippet>&gt;&gt;&gt; from nltk.corpus import stopwords
&gt;&gt;&gt; stopwords.words('english')
['a', "a's", 'able', 'about', 'above', 'according', 'accordingly', 'across',
'actually', 'after', 'afterwards', 'again', 'against', "ain't", 'all', 'allow',
'allows', 'almost', 'alone', 'along', 'already', 'also', 'although', 'always',
 ...]
</snippet></ROW><ROW><id>3518512</id><snippet>SyntaxError</snippet></ROW><ROW><id>3518512</id><snippet>try</snippet></ROW><ROW><id>3518512</id><snippet>compile</snippet></ROW><ROW><id>3518512</id><snippet>compile</snippet></ROW><ROW><id>3518512</id><snippet>$ python2.4 -mtimeit 'try:
  compile("with x: pass", "", "exec")
except SyntaxError: x=1
else: x=2'
100000 loops, best of 3: 10.8 usec per loop
$ python2.6 -mtimeit 'try:
  compile("with x: pass", "", "exec")
except SyntaxError: x=1
else: x=2'
10000 loops, best of 3: 40.5 usec per loop

$ python2.4 -mtimeit -s'import sys' 'if sys.version&gt;="2.5": x=2
else: x=1'
1000000 loops, best of 3: 0.221 usec per loop
$ python2.6 -mtimeit -s'import sys' 'if sys.version&gt;="2.5": x=2
else: x=1'
10000000 loops, best of 3: 0.156 usec per loop
</snippet></ROW><ROW><id>3518512</id><snippet>10.8 / 0.221</snippet></ROW><ROW><id>3518512</id><snippet>40.5 / 0.156</snippet></ROW><ROW><id>3518711</id><snippet>&gt; $pys = get-wmiobject Win32_process -filter "Name='python.exe'"
&gt; $pys.CommandLine
</snippet></ROW><ROW><id>3518711</id><snippet>"C:\Python27\python.exe" "D:\Projects\wait.py"
</snippet></ROW><ROW><id>3518711</id><snippet>$pys</snippet></ROW><ROW><id>3518711</id><snippet>&gt; $pys[0].CommandLine
</snippet></ROW><ROW><id>3518711</id><snippet> &gt; get-wmiobject Win32_process -filter "Name='python.exe'" | foreach -process {$_.CommandLine}
</snippet></ROW><ROW><id>3518734</id><snippet>from itertools import product
from random import choice
n=10
m=5
finalList = choice([x for x in product(*[range(2*n/m+1)]*m) if sum(x) == 10])
</snippet></ROW><ROW><id>3518734</id><snippet>2*n/m+1 = 5</snippet></ROW><ROW><id>3518734</id><snippet>finalList = choice([x for x in product(*[range(5)]*5) if sum(x) == 10])
</snippet></ROW><ROW><id>3518734</id><snippet>finalList = choice([x for x in product(range(5),range(5),range(5),range(5),range(5)) if sum(x) == 10])
</snippet></ROW><ROW><id>3518734</id><snippet>product()</snippet></ROW><ROW><id>3518734</id><snippet>choice()</snippet></ROW><ROW><id>3519142</id><snippet>\x</snippet></ROW><ROW><id>3519142</id><snippet>&gt;&gt;&gt; '\\xF3\\xBE\\x80\\x80'.replace('\\x', '').decode('hex')
'\xf3\xbe\x80\x80'
</snippet></ROW><ROW><id>3519142</id><snippet>\</snippet></ROW><ROW><id>3519142</id><snippet>x</snippet></ROW><ROW><id>3519142</id><snippet>f</snippet></ROW><ROW><id>3519142</id><snippet>3</snippet></ROW><ROW><id>3519161</id><snippet>import re
exp = 'qty * price - discount + 100'
exp = re.sub('(qty|price|discount)','%(\\1)f', exp)%vars(obj)
</snippet></ROW><ROW><id>3519188</id><snippet>calcDistanceMatrixFastEuclidean2</snippet></ROW><ROW><id>3519188</id><snippet>calcDistanceMatrixFastEuclidean</snippet></ROW><ROW><id>3519188</id><snippet>fast1</snippet></ROW><ROW><id>3519188</id><snippet>calcDistanceMatrixFastEuclidean2</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>fast1</snippet></ROW><ROW><id>3519188</id><snippet>repmap</snippet></ROW><ROW><id>3519188</id><snippet>repmap</snippet></ROW><ROW><id>3519188</id><snippet>reshape</snippet></ROW><ROW><id>3519188</id><snippet>repeat</snippet></ROW><ROW><id>3519188</id><snippet>repeat</snippet></ROW><ROW><id>3519188</id><snippet>[1,2,3]</snippet></ROW><ROW><id>3519188</id><snippet>[1,2,3,1,2,3,1,2,3]</snippet></ROW><ROW><id>3519188</id><snippet>[1,1,1,2,2,2,3,3,3]</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>fast1</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>repmat</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>repmat</snippet></ROW><ROW><id>3519188</id><snippet>repeat</snippet></ROW><ROW><id>3519188</id><snippet>fast1</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>fast2</snippet></ROW><ROW><id>3519188</id><snippet>def calcDistanceMatrixFastEuclidean3(nDimPoints):
  nDimPoints = array(nDimPoints)
  n,m = nDimPoints.shape
  data = nDimPoints[:,0]
  delta = (data - data[:,newaxis])**2
  for d in xrange(1,m):
    data = nDimPoints[:,d]
    delta += (data - data[:,newaxis])**2
  return sqrt(delta)
</snippet></ROW><ROW><id>3519314</id><snippet>genfromtxt()</snippet></ROW><ROW><id>3519314</id><snippet>delimiter</snippet></ROW><ROW><id>3519314</id><snippet>from numpy import genfromtxt
my_data = genfromtxt('my_file.csv', delimiter=',')
</snippet></ROW><ROW><id>3519520</id><snippet>try:
    raise imaplib.IMAP4.error('Some exception')
except imaplib.IMAP4.error, error:
    print error
</snippet></ROW><ROW><id>3519554</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; originalstring = 'fksf var:asfkj;'
&gt;&gt;&gt; pattern = '.*?var:(.*?);'
&gt;&gt;&gt; pattern_obj = re.compile(pattern, re.MULTILINE)
&gt;&gt;&gt; replacement_string="\\1" + 'test'
&gt;&gt;&gt; pattern_obj.sub(replacement_string, originalstring)
'asfkjtest'
</snippet></ROW><ROW><id>3519601</id><snippet>re.finditer(pattern, string[, flags]) 
</snippet></ROW><ROW><id>3519601</id><snippet>[(m.start(0), m.end(0)) for m in re.finditer(pattern, string)]
</snippet></ROW><ROW><id>3519699</id><snippet>import re
import sys
import socket
import encodings.idna
import stringprep

# These characters aren't allowed in domain names that are used
# in XMPP
BAD_DOMAIN_ASCII = "".join([chr(c) for c in range(0,0x2d) +
                    [0x2e, 0x2f] +
                    range(0x3a,0x41) +
                    range(0x5b,0x61) +
                    range(0x7b, 0x80)])

# check bi-directional character validity
def bidi(chars):
    RandAL = map(stringprep.in_table_d1, chars)
    for c in RandAL:
        if c:
            # There is a RandAL char in the string. Must perform further
            # tests:
            # 1) The characters in section 5.8 MUST be prohibited.
            # This is table C.8, which was already checked
            # 2) If a string contains any RandALCat character, the string
            # MUST NOT contain any LCat character.
            if filter(stringprep.in_table_d2, chars):
                raise UnicodeError("Violation of BIDI requirement 2")

            # 3) If a string contains any RandALCat character, a
            # RandALCat character MUST be the first character of the
            # string, and a RandALCat character MUST be the last
            # character of the string.
            if not RandAL[0] or not RandAL[-1]:
                raise UnicodeError("Violation of BIDI requirement 3")

def nodeprep(u):
    chars = list(unicode(u))
    i = 0
    while i &lt; len(chars):
        c = chars[i]
        # map to nothing
        if stringprep.in_table_b1(c):
            del chars[i]
        else:
            # case fold
            chars[i] = stringprep.map_table_b2(c)
            i += 1
    # NFKC
    chars = stringprep.unicodedata.normalize("NFKC", "".join(chars))
    for c in chars:
        if (stringprep.in_table_c11(c) or
            stringprep.in_table_c12(c) or
            stringprep.in_table_c21(c) or
            stringprep.in_table_c22(c) or
            stringprep.in_table_c3(c) or
            stringprep.in_table_c4(c) or
            stringprep.in_table_c5(c) or
            stringprep.in_table_c6(c) or
            stringprep.in_table_c7(c) or
            stringprep.in_table_c8(c) or
            stringprep.in_table_c9(c) or
            c in "\"&amp;'/:&lt;&gt;@"):
            raise UnicodeError("Invalid node character")

    bidi(chars)

    return chars

def resourceprep(res):
    chars = list(unicode(res))
    i = 0
    while i &lt; len(chars):
        c = chars[i]
        # map to nothing
        if stringprep.in_table_b1(c):
            del chars[i]
        else:
            i += 1
    # NFKC
    chars = stringprep.unicodedata.normalize("NFKC", "".join(chars))
    for c in chars:
        if (stringprep.in_table_c12(c) or
            stringprep.in_table_c21(c) or
            stringprep.in_table_c22(c) or
            stringprep.in_table_c3(c) or
            stringprep.in_table_c4(c) or
            stringprep.in_table_c5(c) or
            stringprep.in_table_c6(c) or
            stringprep.in_table_c7(c) or
            stringprep.in_table_c8(c) or
            stringprep.in_table_c9(c)):
            raise UnicodeError("Invalid node character")

    bidi(chars)

    return chars

def parse_jid(jid):
    # first pass
    m = re.match("^(?:([^\"&amp;'/:&lt;&gt;@]{1,1023})@)?([^/@]{1,1023})(?:/(.{1,1023}))?$", jid)
    if not m:
        return False

    (node, domain, resource) = m.groups()
    try:
        # ipv4 address?
        socket.inet_pton(socket.AF_INET, domain)
    except socket.error:
        # ipv6 address?
        try:
            socket.inet_pton(socket.AF_INET6, domain)
        except socket.error:
            # domain name
            dom = []
            for label in domain.split("."):
                try:
                    label = encodings.idna.nameprep(unicode(label))
                    encodings.idna.ToASCII(label)
                except UnicodeError:
                    return False

                # UseSTD3ASCIIRules is set, but Python's nameprep doesn't enforce it.
                # a) Verify the absence of non-LDH ASCII code points; that is, the
                for c in label:
                    if c in BAD_DOMAIN_ASCII:
                        return False
                # Verify the absence of leading and trailing hyphen-minus
                if label[0] == '-' or label[-1] == "-":
                    return False
                dom.append(label)
            domain = ".".join(dom)
    try:
        if node is not None:
            node = nodeprep(node)
        if resource is not None:
            resource = resourceprep(resource)
    except UnicodeError:
        return False

    return node, domain, resource

if __name__ == "__main__":
    results = parse_jid(sys.argv[1])
    if not results:
        print "FAIL"
    else:   
        print results
</snippet></ROW><ROW><id>3520191</id><snippet>type</snippet></ROW><ROW><id>3520191</id><snippet>bool</snippet></ROW><ROW><id>3520191</id><snippet>None</snippet></ROW><ROW><id>3520191</id><snippet>[]</snippet></ROW><ROW><id>3520191</id><snippet>type</snippet></ROW><ROW><id>3520191</id><snippet>collections</snippet></ROW><ROW><id>3520191</id><snippet>import collections
if isinstance( ..., collections.MutableMapping ):
    ...
</snippet></ROW><ROW><id>3520191</id><snippet>__getitem__</snippet></ROW><ROW><id>3520191</id><snippet>__delitem__</snippet></ROW><ROW><id>3520191</id><snippet>__setitem__</snippet></ROW><ROW><id>3520191</id><snippet>MutableMapping</snippet></ROW><ROW><id>3520693</id><snippet>&gt;&gt;&gt; from appscript import *
&gt;&gt;&gt; file_to_show = "/Applications/iTunes.app"
&gt;&gt;&gt; app("Finder").reveal(mactypes.Alias(file_to_show).alias)
app(u'/System/Library/CoreServices/Finder.app').startup_disk.folders[u'Applications'].application_files[u'iTunes.app']
&gt;&gt;&gt; #  Finder window of "Applications" folder appears with iTunes selected
</snippet></ROW><ROW><id>3520693</id><snippet>-R</snippet></ROW><ROW><id>3520693</id><snippet>open</snippet></ROW><ROW><id>3520693</id><snippet>man 1 open</snippet></ROW><ROW><id>3520693</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; file_to_show = "/Applications/iTunes.app"
&gt;&gt;&gt; subprocess.call(["open", "-R", file_to_show])
</snippet></ROW><ROW><id>3520986</id><snippet>": "</snippet></ROW><ROW><id>3520986</id><snippet>"Host"</snippet></ROW><ROW><id>3520986</id><snippet>txheaders = { "User-Agent": UA, "Host": nohttp_url }
robots = urllib2.Request("http://" + ip  + "/robots.txt", txdata, txheaders)
</snippet></ROW><ROW><id>3521134</id><snippet>import Tkinter
import sys

class MenuBar(Tkinter.Menu):
    def __init__(self, parent):
        Tkinter.Menu.__init__(self, parent)

        fileMenu = Tkinter.Menu(self, tearoff=False)
        self.add_cascade(label="File",underline=0, menu=fileMenu)
        fileMenu.add_command(label="Exit", underline=1, command=self.quit)

    def quit(self):
        sys.exit(0)

class App(Tkinter.Tk):
    def __init__(self):
        Tkinter.Tk.__init__(self)
        menubar = MenuBar(self)
        self.config(menu=menubar)

if __name__ == "__main__":
    app=App()
    app.mainloop()
</snippet></ROW><ROW><id>3521742</id><snippet>class Foo:
    def bar1(self):
        print 1
    def bar2(self):
        print 2

def callMethod(o, name):
    getattr(o, name)()


f = Foo()
callMethod(f, "bar1")
</snippet></ROW><ROW><id>3521804</id><snippet>pywin32</snippet></ROW><ROW><id>3521804</id><snippet>Python-UNO</snippet></ROW><ROW><id>3521804</id><snippet>pod</snippet></ROW><ROW><id>3521835</id><snippet>tail</snippet></ROW><ROW><id>3521835</id><snippet>tail -n +3 input.txt &gt; output.txt
</snippet></ROW><ROW><id>3521996</id><snippet>process = subprocess.Popen(your_cmd, shell=true, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

count=0    
while True:
    buff = process.stdout.readline()

    if buff == '':    
        count += 1

    if buff == '' and process.poll() != None: 
        break

    sys.stdout.write(buff)

process.wait()
</snippet></ROW><ROW><id>3522121</id><snippet>import BeautifulSoup
resp = urllib2.urlopen("http://stackoverflow.com")
rawhtml = resp.read()
#parse through html to get text
soup=BeautifulSoup(rawhtml)
</snippet></ROW><ROW><id>3522130</id><snippet>Cookie</snippet></ROW><ROW><id>3522130</id><snippet>http.cookie</snippet></ROW><ROW><id>3522130</id><snippet>/usr/lib/python2.4/Cookie.py</snippet></ROW><ROW><id>3522130</id><snippet>sys.path.append('/usr/lib/python2.4/')
</snippet></ROW><ROW><id>3522217</id><snippet>__pycache__</snippet></ROW><ROW><id>3522217</id><snippet>__pycache__</snippet></ROW><ROW><id>3522293</id><snippet>n=0 for f in $(ls * | sort); do ln -s $f $n &amp;&amp; $n=$((n+1))</snippet></ROW><ROW><id>3522293</id><snippet>gst-launch multifilesrc location=%d ! pngdec ! theoraenc ! oggmux ! filesink location=movie.ogg
</snippet></ROW><ROW><id>3522800</id><snippet>import os
print os.getcwd()
</snippet></ROW><ROW><id>3523101</id><snippet>filename</snippet></ROW><ROW><id>3523101</id><snippet>foldername</snippet></ROW><ROW><id>3523101</id><snippet>.replace()</snippet></ROW><ROW><id>3523101</id><snippet>filename = line[2]
foldername = line[5]

for letter in bad_characters:
    filename = filename.replace(letter, "_")
    foldername = foldername.replace(letter, "_")
</snippet></ROW><ROW><id>3523101</id><snippet>p = re.compile('[/:()&lt;&gt;|?*]|(\\\)')
filename = p.sub('_', line[2])
folder = p.sub('_', line[5])
</snippet></ROW><ROW><id>3523128</id><snippet>another_choice</snippet></ROW><ROW><id>3523128</id><snippet>final_choices = (another_choice,) + my_choices
</snippet></ROW><ROW><id>3523128</id><snippet>my_choices</snippet></ROW><ROW><id>3523128</id><snippet>my_choices=[
     ('1','first choice'),
     ('2','second choice'),
     ('3','third choice')
]
</snippet></ROW><ROW><id>3523128</id><snippet>my_choices.insert(0, another_choice)
</snippet></ROW><ROW><id>3523320</id><snippet>import numpy as np

lookup = np.array([[  1.     ,   3.14   ,   4.14   ],
                   [  2.     ,   2.71818,   3.7    ],
                   [  3.     ,  42.     ,  43.     ]])

a = np.array([[ 1, 11],
              [ 1, 12],
              [ 2, 21],
              [ 3, 31]])
</snippet></ROW><ROW><id>3523320</id><snippet>mapping = dict(zip(lookup[:,0], range(len(lookup))))
</snippet></ROW><ROW><id>3523320</id><snippet>&gt;&gt;&gt; np.hstack((a, np.array([lookup[mapping[key],1:] 
                            for key in a[:,0]])))
array([[  1.     ,  11.     ,   3.14   ,   4.14   ],
       [  1.     ,  12.     ,   3.14   ,   4.14   ],
       [  2.     ,  21.     ,   2.71818,   3.7    ],
       [  3.     ,  31.     ,  42.     ,  43.     ]])    
</snippet></ROW><ROW><id>3523340</id><snippet>msvcrt</snippet></ROW><ROW><id>3523340</id><snippet>getch</snippet></ROW><ROW><id>3523439</id><snippet>time.sleep(random.uniform(0.1, 0.6))</snippet></ROW><ROW><id>3523501</id><snippet>&gt;&gt;&gt; class ws(object):
...   __slots__ = 'a', 'b'
...   def __init__(self, a=23, b=45): self.a, self.b = a, b
... 
&gt;&gt;&gt; x = ws()
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; pickle.dumps(x, -1)
'\x80\x02c__main__\nws\nq\x00)\x81q\x01N}q\x02(U\x01aq\x03K\x17U\x01bq\x04K-u\x86q\x05b.'
&gt;&gt;&gt; pickle.dumps(x)
Traceback (most recent call last):
    [[snip]]
  File "/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/copy_reg.py", line 77, in _reduce_ex
    raise TypeError("a class that defines __slots__ without "
TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3523501</id><snippet>-1</snippet></ROW><ROW><id>3523501</id><snippet>0</snippet></ROW><ROW><id>3523501</id><snippet>-1</snippet></ROW><ROW><id>3523501</id><snippet>wb</snippet></ROW><ROW><id>3523501</id><snippet>w</snippet></ROW><ROW><id>3523501</id><snippet>pickle.Pickler</snippet></ROW><ROW><id>3523501</id><snippet>pickle.dumps</snippet></ROW><ROW><id>3523501</id><snippet>save</snippet></ROW><ROW><id>3523501</id><snippet>type(obj)</snippet></ROW><ROW><id>3523501</id><snippet>-1</snippet></ROW><ROW><id>3523575</id><snippet>if os.getenv('MYHACK')=='Y':</snippet></ROW><ROW><id>3523575</id><snippet>$ MYHACK=Y ipython ...
</snippet></ROW><ROW><id>3523575</id><snippet>bash</snippet></ROW><ROW><id>3523575</id><snippet>sh</snippet></ROW><ROW><id>3523876</id><snippet>ids = set( datafile.readlines( ) )
for line in fulldataset:
    if any( id in line for id in ids ):
        smallerdataset.write( line )
</snippet></ROW><ROW><id>3523876</id><snippet>"foo" in "XY-foo"</snippet></ROW><ROW><id>3523876</id><snippet>datafile</snippet></ROW><ROW><id>3523876</id><snippet>datafile</snippet></ROW><ROW><id>3523876</id><snippet>line</snippet></ROW><ROW><id>3523876</id><snippet>break</snippet></ROW><ROW><id>3523876</id><snippet>datafile</snippet></ROW><ROW><id>3524079</id><snippet>constant()</snippet></ROW><ROW><id>3524079</id><snippet>import myconstants
num = int(getattr(myconstants, self.config['match_mode']))
</snippet></ROW><ROW><id>3524079</id><snippet>X = 1
num = int(globals()['X'])
</snippet></ROW><ROW><id>3524079</id><snippet>eval()</snippet></ROW><ROW><id>3524079</id><snippet>int()</snippet></ROW><ROW><id>3524079</id><snippet>constant()</snippet></ROW><ROW><id>3524081</id><snippet>from . import module2</snippet></ROW><ROW><id>3524081</id><snippet>import bar.module1
print(bar.module1.module2.thing)
</snippet></ROW><ROW><id>3524081</id><snippet>#
</snippet></ROW><ROW><id>3524081</id><snippet>#import module2 # fails in python31
from . import module2 # intrapackage reference, works in python26 and python31
</snippet></ROW><ROW><id>3524081</id><snippet>thing = "blah"
</snippet></ROW><ROW><id>3524096</id><snippet>_</snippet></ROW><ROW><id>3524096</id><snippet>in</snippet></ROW><ROW><id>3524096</id><snippet>_</snippet></ROW><ROW><id>3524247</id><snippet>dir(YOURMODULE)</snippet></ROW><ROW><id>3524247</id><snippet>__version__</snippet></ROW><ROW><id>3524247</id><snippet>VERSION</snippet></ROW><ROW><id>3524247</id><snippet>version</snippet></ROW><ROW><id>3524247</id><snippet>__version__</snippet></ROW><ROW><id>3524247</id><snippet>numpy</snippet></ROW><ROW><id>3524247</id><snippet>version.version</snippet></ROW><ROW><id>3524281</id><snippet>my.db</snippet></ROW><ROW><id>3524281</id><snippet>C:\users\you\</snippet></ROW><ROW><id>3524281</id><snippet>DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'C:/users/you/my.db' 
</snippet></ROW><ROW><id>3524281</id><snippet>syncdb</snippet></ROW><ROW><id>3524281</id><snippet>C:\users\you\myproject\</snippet></ROW><ROW><id>3524281</id><snippet>DATABASE_ENGINE = 'sqlite3'
DATABASE_NAME = 'C:/users/you/myproject/my.db' 
</snippet></ROW><ROW><id>3524543</id><snippet>f.seek(0)</snippet></ROW><ROW><id>3524543</id><snippet>&gt;&gt;&gt; f = open('/tmp/version.txt', 'r')
&gt;&gt;&gt; f
&lt;open file '/tmp/version.txt', mode 'r' at 0xb788e2e0&gt;
&gt;&gt;&gt; f.readlines()
['2.3.4\n']
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; f.readlines()
['2.3.4\n']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3524630</id><snippet>for entry in PhoneDirectory:
    if 'John' in entry: ...
</snippet></ROW><ROW><id>3524630</id><snippet>if any('John' in entry for entry in PhoneDirectory):
    ...
</snippet></ROW><ROW><id>3524630</id><snippet>any</snippet></ROW><ROW><id>3524630</id><snippet>True</snippet></ROW><ROW><id>3524630</id><snippet>False</snippet></ROW><ROW><id>3524793</id><snippet>\A</snippet></ROW><ROW><id>3524793</id><snippet>\Z</snippet></ROW><ROW><id>3524793</id><snippet>^</snippet></ROW><ROW><id>3524793</id><snippet>$</snippet></ROW><ROW><id>3524909</id><snippet>a</snippet></ROW><ROW><id>3524909</id><snippet>z</snippet></ROW><ROW><id>3524909</id><snippet>A-z</snippet></ROW><ROW><id>3524909</id><snippet>re.compile('[^A-Za-z ?!.]')
</snippet></ROW><ROW><id>3524909</id><snippet>import re
regex = re.compile('[^A-Za-z ?!.]')
result = regex.sub(' ', 'Hey !$%^&amp;*.#$%^&amp;.')
print result
</snippet></ROW><ROW><id>3525133</id><snippet>[legname for cow in listofcows for legname in cow.legnames]
</snippet></ROW><ROW><id>3525294</id><snippet>./configure --with-python=/System/Library/Frameworks/Python.framework/Versions/2.3/
make
sudo make install
</snippet></ROW><ROW><id>3525294</id><snippet>python setup.py install
</snippet></ROW><ROW><id>3525380</id><snippet>"".join(list_of_strings)
</snippet></ROW><ROW><id>3525380</id><snippet>$ python -m timeit -s 'import operator; strings = ["a"]*10000' 'r = reduce(operator.add, strings)'
100 loops, best of 3: 8.46 msec per loop
$ python -m timeit -s 'import operator; strings = ["a"]*10000' 'r = "".join(strings)'
1000 loops, best of 3: 296 usec per loop
</snippet></ROW><ROW><id>3525380</id><snippet>sum</snippet></ROW><ROW><id>3525380</id><snippet>sum</snippet></ROW><ROW><id>3525516</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>3525516</id><snippet>from copy import deepcopy
dictionary_new = deepcopy(dictionary_old)
</snippet></ROW><ROW><id>3525516</id><snippet>a = dict(b)</snippet></ROW><ROW><id>3525516</id><snippet>a = b.copy()</snippet></ROW><ROW><id>3525696</id><snippet>&gt;&gt;&gt; filenames=["file1","FILE2","file3","fiLe4"]
&gt;&gt;&gt; c = "suffixes=c(%s)" % (",".join('".%s"' %f for f in filenames))
&gt;&gt;&gt; c
'suffixes=c(".file1",".FILE2",".file3",".fiLe4")'
</snippet></ROW><ROW><id>3525724</id><snippet>rpy</snippet></ROW><ROW><id>3525724</id><snippet>"TRUE"</snippet></ROW><ROW><id>3525724</id><snippet>TRUE</snippet></ROW><ROW><id>3525724</id><snippet>rpy</snippet></ROW><ROW><id>3525724</id><snippet>r.TRUE</snippet></ROW><ROW><id>3525845</id><snippet>class Page(db.Model):
    url = db.StringProperty(required=True)
    has_items = db.BooleanProperty(default=False)
</snippet></ROW><ROW><id>3525845</id><snippet>class Item(db.Model):
    page = db.ReferenceProperty(Page, required=True)
    name = db.StringProperty(required=True)

    def put(self):
        if not self.page.has_items:
            self.page.has_items = True
            self.page.put()
        return db.put(self)
</snippet></ROW><ROW><id>3525845</id><snippet>pages_with_no_items = Page.all().filter("has_items =", False)
</snippet></ROW><ROW><id>3525976</id><snippet>clean()</snippet></ROW><ROW><id>3525976</id><snippet>clean()</snippet></ROW><ROW><id>3525991</id><snippet>def countSubStringMatch("atgacatgcacaagtatgcat","atgc")
</snippet></ROW><ROW><id>3525991</id><snippet>def</snippet></ROW><ROW><id>3525991</id><snippet>def</snippet></ROW><ROW><id>3526020</id><snippet>a</snippet></ROW><ROW><id>3526020</id><snippet>a</snippet></ROW><ROW><id>3526020</id><snippet>a</snippet></ROW><ROW><id>3526020</id><snippet>a</snippet></ROW><ROW><id>3526020</id><snippet>a</snippet></ROW><ROW><id>3526115</id><snippet>IP = sys.stdin.readline().strip()
ADDR = sys.stdin.readline().strip()
</snippet></ROW><ROW><id>3526115</id><snippet>print '_%s_' % IP
print '_%s_' % ADDR
</snippet></ROW><ROW><id>3526128</id><snippet>l = ['_'.join(s.split('_')[:2]) for s in l]
</snippet></ROW><ROW><id>3526264</id><snippet>unmatched_items_10 = [d for d in entries10 if d not in entries9]
</snippet></ROW><ROW><id>3526264</id><snippet>N log N</snippet></ROW><ROW><id>3526264</id><snippet>N</snippet></ROW><ROW><id>3526264</id><snippet>d1</snippet></ROW><ROW><id>3526264</id><snippet>d2</snippet></ROW><ROW><id>3526264</id><snippet>d1 == d2</snippet></ROW><ROW><id>3526264</id><snippet>in</snippet></ROW><ROW><id>3526264</id><snippet>d1[a]==d2[a] and d1[b]==d2[b]</snippet></ROW><ROW><id>3526264</id><snippet>in</snippet></ROW><ROW><id>3526264</id><snippet>all</snippet></ROW><ROW><id>3526264</id><snippet>unmatched_items_10 = [d for d in entries10
                      if all(d[a]!=d1[a] or d[b]!=d2[b] for d2 in entries9)]
</snippet></ROW><ROW><id>3526264</id><snippet>!=</snippet></ROW><ROW><id>3526264</id><snippet>or</snippet></ROW><ROW><id>3526264</id><snippet>unmatched_items_10 = [d for d in entries10
                      if not any(d[a]==d1[a] and d[b]==d2[b] for d2 in entries9)]
</snippet></ROW><ROW><id>3526264</id><snippet>if not any</snippet></ROW><ROW><id>3526264</id><snippet>if not all</snippet></ROW><ROW><id>3526264</id><snippet>any</snippet></ROW><ROW><id>3526264</id><snippet>all</snippet></ROW><ROW><id>3526286</id><snippet>all(v == 0 for v in values)
</snippet></ROW><ROW><id>3526286</id><snippet>all</snippet></ROW><ROW><id>3526286</id><snippet>alltrue</snippet></ROW><ROW><id>3526286</id><snippet>all</snippet></ROW><ROW><id>3526286</id><snippet>while</snippet></ROW><ROW><id>3526286</id><snippet>whiletrue</snippet></ROW><ROW><id>3526286</id><snippet>list(l) == [0] * len(l)
</snippet></ROW><ROW><id>3526427</id><snippet>matplotlib.py</snippet></ROW><ROW><id>3526427</id><snippet>transforms</snippet></ROW><ROW><id>3526427</id><snippet>import matplotlib</snippet></ROW><ROW><id>3526427</id><snippet>matplotlib</snippet></ROW><ROW><id>3526427</id><snippet>matplotlib.py</snippet></ROW><ROW><id>3526832</id><snippet>import itertools
keylist = ['key1', 'key4','key2']
worddict = {'key1': ['a','b','c'],
            'key2':['d','e','f'],
            'key3':['g','h','i'],
            'key4':['j','k','l']}
sentences = (' '.join(sentence)
             for sentence in itertools.product(*(worddict[k]
                                                 for k in keylist)))
print '\n'.join(sentences)
</snippet></ROW><ROW><id>3527526</id><snippet>wx.Frame</snippet></ROW><ROW><id>3527526</id><snippet>*args</snippet></ROW><ROW><id>3527526</id><snippet>**kwargs</snippet></ROW><ROW><id>3527526</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>3527526</id><snippet>kwargs</snippet></ROW><ROW><id>3527526</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, *args, **kwargs):
        kwargs['size']=(1000,200)
        wx.Frame.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>3527526</id><snippet>python</snippet></ROW><ROW><id>3527526</id><snippet>pythonw</snippet></ROW><ROW><id>3527526</id><snippet>N:\Code&gt;pythonw wxso.pyw

N:\Code&gt;rem nothing happened.

N:\Code&gt;python wxso.pyw
  File "wxso.pyw", line 24
    class MyFrame(wx.Frame)
                          ^
SyntaxError: invalid syntax

N:\Code&gt;
</snippet></ROW><ROW><id>3527526</id><snippet>class MyFrame(wx.Frame):
    def __init__(self, parent, id, title, size, style):
        #wx.Frame.__init__(self, parent, id, title, size, style) # broken
        # equivalent to:
        #wx.Frame.__init__(self, parent, id=id, title=title, pos=size, size=style)

        # the below works.
        wx.Frame.__init__(self, parent, id, title=title, size=size, style=style)
</snippet></ROW><ROW><id>3527526</id><snippet>wx.Frame.__init__</snippet></ROW><ROW><id>3527742</id><snippet>localhost</snippet></ROW><ROW><id>3527742</id><snippet>127.0.0.1</snippet></ROW><ROW><id>3527742</id><snippet>'::1'</snippet></ROW><ROW><id>3527742</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3527742</id><snippet>ifconfig</snippet></ROW><ROW><id>3527742</id><snippet>ipconfig</snippet></ROW><ROW><id>3527898</id><snippet>pyglet.graphics.draw</snippet></ROW><ROW><id>3527898</id><snippet>pyglet.gl.GL_POINTS</snippet></ROW><ROW><id>3527898</id><snippet>for i in range(50):
    for j in range(50):
        color = int(2.56 * (i + j))
        pyglet.graphics.draw(1, pyglet.gl.GL_POINTS,
            ('v2i', (i, j)),
            ('c3B', (color, color, color))
        )
</snippet></ROW><ROW><id>3528345</id><snippet>//</snippet></ROW><ROW><id>3528345</id><snippet>float(sum(seq))</snippet></ROW><ROW><id>3528345</id><snippet>int(...)</snippet></ROW><ROW><id>3528613</id><snippet>for character in range(ord('a'), ord('z')):
    if "(++info++)" not in decoded_str:
        break
    decoded_str = decoded_str.replace("(++info++)", "(++info {0}++)".format(chr(character)), 1)

print decoded_str
</snippet></ROW><ROW><id>3528613</id><snippet>import itertools

for character in itertools.cycle(range(ord('a'), ord('z'))):
    if "(++info++)" not in decoded_str:
        break
    decoded_str = decoded_str.replace("(++info++)", "(++info {0}++)".format(chr(character)), 1)

print decoded_str
</snippet></ROW><ROW><id>3528613</id><snippet>dstr = "".join(x + "(++info {0}++)".format(chr(y)) for x, y in zip(dstr.split("(++info++)"), range(ord('a'), ord('z'))))[:-len("(++info a++)")]
</snippet></ROW><ROW><id>3528810</id><snippet>COPY</snippet></ROW><ROW><id>3528810</id><snippet>STORE</snippet></ROW><ROW><id>3528810</id><snippet>expunge</snippet></ROW><ROW><id>3528810</id><snippet>import imaplib, getpass, re
pattern_uid = re.compile('\d+ \(UID (?P&lt;uid&gt;\d+)\)')

def connect(email):
    imap = imaplib.IMAP4_SSL("imap.gmail.com")
    password = getpass.getpass("Enter your password: ")
    imap.login(email, password)
    return imap

def disconnect(imap):
    imap.logout()

def parse_uid(data):
    match = pattern_uid.match(data)
    return match.group('uid')

if __name__ == '__main__':
    imap = connect('&lt;your mail id&gt;')
    imap.select(mailbox = '&lt;source folder&gt;', readonly = False)
    resp, items = imap.search(None, 'All')
    email_ids  = items[0].split()
    latest_email_id = email_ids[-1] # Assuming that you are moving the latest email.

    resp, data = imap.fetch(latest_email_id, "(UID)")
    msg_uid = parse_uid(data[0])

    result = imap.uid('COPY', msg_uid, '&lt;destination folder&gt;')

    if result[0] == 'OK':
        mov, data = imap.uid('STORE', msg_uid , '+FLAGS', '(\Deleted)')
        imap.expunge()

    disconnect(imap)
</snippet></ROW><ROW><id>3529360</id><snippet>&lt;b&gt;.*Items\s*&lt;\/b&gt;\s*&lt;br&gt;(?:\s*[1-4]0[0-9][0-9][0-9] &lt;br&gt;\s*(\d*)\s*(.*) &lt;br&gt;)
</snippet></ROW><ROW><id>3529604</id><snippet>from PIL import Image
filenames = ['/home/you/Desktop/chstamp.jpg', '/home/you/Desktop/something.jpg']
sizes = [Image.open(f, 'r').size for f in filenames]
max(sizes)
</snippet></ROW><ROW><id>3529604</id><snippet>max(Image.open(f, 'r').size for f in filenames)
</snippet></ROW><ROW><id>3529604</id><snippet>numpy</snippet></ROW><ROW><id>3529604</id><snippet>from numpy import array
image_array = array([Image.open(f, 'r').size for f in filenames])
print image_array.argmax()
</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>su -</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>env_backups.sh</snippet></ROW><ROW><id>3530000</id><snippet>env_uploads.sh</snippet></ROW><ROW><id>3530000</id><snippet>.profile</snippet></ROW><ROW><id>3530000</id><snippet>source env_backup.sh</snippet></ROW><ROW><id>3530000</id><snippet>source env_uploads.sh</snippet></ROW><ROW><id>3530000</id><snippet>env_this</snippet></ROW><ROW><id>3530000</id><snippet>env_that</snippet></ROW><ROW><id>3530000</id><snippet>source ~oracle/env_backup.sh
source ~amazon/env_uploads.sh
python my_script.py
</snippet></ROW><ROW><id>3530326</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; uuid.uuid4().int &amp; (1&lt;&lt;64)-1
9518405196747027403L
&gt;&gt;&gt; uuid.uuid4().int &amp; (1&lt;&lt;64)-1
12558137269921983654L
</snippet></ROW><ROW><id>3530326</id><snippet>&gt;&gt;&gt; uuid.uuid1().int&gt;&gt;64
9392468011745350111L
&gt;&gt;&gt; uuid.uuid1().int&gt;&gt;64
9407757923520418271L
&gt;&gt;&gt; uuid.uuid1().int&gt;&gt;64
9418928317413528031L
</snippet></ROW><ROW><id>3530891</id><snippet>file_list</snippet></ROW><ROW><id>3530891</id><snippet>if len(file_list) &gt; &lt;your number&gt;:</snippet></ROW><ROW><id>3530891</id><snippet>fork()</snippet></ROW><ROW><id>3530891</id><snippet>multiprocessing</snippet></ROW><ROW><id>3530891</id><snippet>time</snippet></ROW><ROW><id>3530989</id><snippet>auth_handler</snippet></ROW><ROW><id>3530989</id><snippet>mechanize</snippet></ROW><ROW><id>3530989</id><snippet>import mechanize

browser = mechanize.Browser()

browser.open('https://webfiles.duke.edu/?path=/afs/acpub/users/a')

browser.select_form(nr=0)

browser.form['user'] = 'username'
browser.form['pass'] = 'password'
req = browser.submit()

print req.read()
</snippet></ROW><ROW><id>3531072</id><snippet>def process_url(url):
    # Do what you want
    return what_you_want

pool = multiprocessing.Pool(workers=4) # how much parallelism?
pool.map(process_url, list_of_urls)
</snippet></ROW><ROW><id>3531512</id><snippet>"\\"</snippet></ROW><ROW><id>3531512</id><snippet>os.path.sep</snippet></ROW><ROW><id>3531512</id><snippet>/</snippet></ROW><ROW><id>3531512</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; path='C:\\dir\\dir1\\dir2\\filename.doc'
&gt;&gt;&gt; os.path.splitext(os.path.basename(path))
('filename', '.doc')
</snippet></ROW><ROW><id>3531512</id><snippet>&gt;&gt;&gt; path='C:/dir/dir1/dir2/filename.doc'
&gt;&gt;&gt; os.path.splitext(os.path.basename(path))
('filename', '.doc')
</snippet></ROW><ROW><id>3531548</id><snippet>%ed</snippet></ROW><ROW><id>3531548</id><snippet>%edit</snippet></ROW><ROW><id>3531548</id><snippet>In [72]: %ed
IPython will make a temporary file named: c:\docume~1\wjwe312\locals~1\temp\ipython_edit_ar8veu.py
</snippet></ROW><ROW><id>3531548</id><snippet>x = "Hello World"
print 3
</snippet></ROW><ROW><id>3531548</id><snippet>Editing... done. Executing edited code...
3
Out[72]: "x = 'Hello world'\nprint 3\n"

In [73]: x
Out[73]: 'Hello world'
</snippet></ROW><ROW><id>3531548</id><snippet>cd</snippet></ROW><ROW><id>3531548</id><snippet>%run</snippet></ROW><ROW><id>3531548</id><snippet>test.py</snippet></ROW><ROW><id>3531548</id><snippet>/home/myself</snippet></ROW><ROW><id>3531548</id><snippet>    class Tester(object):
        def __init__(self):
            print "hi"

    def knightme(name):
        print "Hello, Sir ", name
</snippet></ROW><ROW><id>3531548</id><snippet>In [42]: cd /home/myself
/home/myself

In [43]: %run test.py # &lt;Tab&gt; autocomplete also works

In [44]: knightme('John')
Hello, Sir  John

In [45]: t = Tester()
Hi
</snippet></ROW><ROW><id>3531743</id><snippet>''.join</snippet></ROW><ROW><id>3531743</id><snippet>&gt;&gt;&gt; value = ['\x7f', '\x15', '\xb7', '\xdb', '5', '\x03', '\xc0', '@']
&gt;&gt;&gt; ''.join(value)
'\x7f\x15\xb7\xdb5\x03\xc0@'
&gt;&gt;&gt; from struct import unpack
&gt;&gt;&gt; unpack('d', ''.join(value))
(8198.4207676749193,)
</snippet></ROW><ROW><id>3531747</id><snippet>class DictRef(object):
    def __init__(self, d, key): self.d, self.key = d, key

d = {}
d.update({
    'key1': ['val1','val2'],
    'key2': DictRef(d, 'key1')
})
</snippet></ROW><ROW><id>3531747</id><snippet>'key2'</snippet></ROW><ROW><id>3531747</id><snippet>'key1'</snippet></ROW><ROW><id>3531747</id><snippet>d['key1']</snippet></ROW><ROW><id>3531747</id><snippet>list</snippet></ROW><ROW><id>3531747</id><snippet>d['key2']</snippet></ROW><ROW><id>3531747</id><snippet>DictRef</snippet></ROW><ROW><id>3531747</id><snippet>'key1'</snippet></ROW><ROW><id>3531747</id><snippet>d['key1']</snippet></ROW><ROW><id>3531747</id><snippet>'key2'</snippet></ROW><ROW><id>3531747</id><snippet>d[d['key2'].key]</snippet></ROW><ROW><id>3531747</id><snippet>d[d[d['key2'].key].key]</snippet></ROW><ROW><id>3531747</id><snippet>d.update(key2=d['key1'])</snippet></ROW><ROW><id>3531747</id><snippet>class DictRef(object):
    def __init__(self, d, key): 
        self.d = d
        self.key = key

    def value(self):
        return self.d[self.key].value()

class DictVal(object):
    def __init__(self, value):
        self._value = value

    def value(self):
        return self._value

d = {}
d.update(
    key1=DictVal(['val1', 'val2']),
    key2=DictRef(d, 'key1')
)
</snippet></ROW><ROW><id>3531747</id><snippet>d[k].value()</snippet></ROW><ROW><id>3531984</id><snippet>L = ['a', 'b',['aa','bb','cc'], 'c']

def lookups( L ):
    """ returns `item`, `code` tuples """
    for i, item in enumerate(L):
        if isinstance(item, list):
            for j, sub in enumerate(item):
                yield sub, "%02d%02d" % (i,j)
        else:
            yield item, "%02d" % i
</snippet></ROW><ROW><id>3531984</id><snippet>lookupdict = dict(lookups(L))
print lookupdict['bb'] # but you have to do 'bb' before trying 'b' ...
</snippet></ROW><ROW><id>3532014</id><snippet>ListProperty</snippet></ROW><ROW><id>3532014</id><snippet>Friendship</snippet></ROW><ROW><id>3532078</id><snippet>(8.2,10]</snippet></ROW><ROW><id>3532078</id><snippet>cut</snippet></ROW><ROW><id>3532078</id><snippet>labels=FALSE</snippet></ROW><ROW><id>3532130</id><snippet>subprocess</snippet></ROW><ROW><id>3532408</id><snippet>ax.get_xticks()</snippet></ROW><ROW><id>3532408</id><snippet>array([-1.,  0.,  1.,  2.,  3.,  4.])</snippet></ROW><ROW><id>3532408</id><snippet>ax.set_xticklabels(['']+alpha)
ax.set_yticklabels(['']+alpha)
</snippet></ROW><ROW><id>3532408</id><snippet>import numpy as np
import matplotlib.pyplot as plt

alpha = ['ABC', 'DEF', 'GHI', 'JKL']

data = np.random.random((4,4))

fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(data, interpolation='nearest')
fig.colorbar(cax)

ax.set_xticklabels(['']+alpha)
ax.set_yticklabels(['']+alpha)

plt.show()
</snippet></ROW><ROW><id>3532673</id><snippet>class CategoryAliasRoot(db.Model):
    count = db.IntegerProperty()
    # Not actually used in current code; just here to avoid having an empty
    # model definition.

    __singleton_keyname = "categoryaliasroot"

    @classmethod
    def get_instance(cls):
            # get_or_insert is inherently transactional; no chance of
            # getting two of these objects.
        return cls.get_or_insert(cls.__singleton_keyname, count=0)

class CategoryAlias(db.Model):
    alias = db.StringProperty()

    @classmethod
    def get_or_create(cls, category_alias):
        alias_root = CategoryAliasRoot.get_instance()
        def txn():
            existing_alias = cls.all().ancestor(alias_root).filter('alias = ', category_alias).get()
            if existing_alias is None:
                existing_alias = CategoryAlias(parent=alias_root, alias=category_alias)
                existing_alias.put()

            return existing_alias

        return db.run_in_transaction(txn)

    def keyname_for_category(self):
        return "category_" + self.key().id

    def rename(self, new_name):
        self.alias = new_name
        self.put()

class Category(db.Model):
    pass

class Item(db.Model):
    name = db.StringProperty()

def get_or_create_item(category_name, item_name):

    def txn(category_keyname):
        category_key = Key.from_path('Category', category_keyname)

        existing_category = db.get(category_key)
        if existing_category is None:
            existing_category = Category(key_name=category_keyname)
            existing_category.put()

        existing_item = Item.all().ancestor(existing_category).filter('name = ', item_name).get()
        if existing_item is None:
            existing_item = Item(parent=existing_category, name=item_name)
            existing_item.put()

        return existing_item

    cat_alias = CategoryAlias.get_or_create(category_name)
    return db.run_in_transaction(txn, cat_alias.keyname_for_category())
</snippet></ROW><ROW><id>3532890</id><snippet>self.fields['question_' + question.id]
</snippet></ROW><ROW><id>3532890</id><snippet>self.fields['question_' + str(question.id)]
</snippet></ROW><ROW><id>3532890</id><snippet>&gt;&gt;&gt; 'hi' + 6

Traceback (most recent call last):
  File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;
    'hi' + 6
TypeError: cannot concatenate 'str' and 'int' objects
&gt;&gt;&gt; 'hi' + str(6)
'hi6'
</snippet></ROW><ROW><id>3533002</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s="four digits 1234 five digits 56789 six digits 012345"
&gt;&gt;&gt; re.findall(r"\D(\d{5})\D", s)
['56789']
</snippet></ROW><ROW><id>3533002</id><snippet>&gt;&gt;&gt; re.findall(r"\D(\d{5})\D", " "+s+" ")
</snippet></ROW><ROW><id>3533093</id><snippet>f.read()</snippet></ROW><ROW><id>3533093</id><snippet>while 1:
   packet = f.read()
   if not packet:
      break
   localFile.write(packet)
f.close()
</snippet></ROW><ROW><id>3533093</id><snippet>f.read()</snippet></ROW><ROW><id>3533097</id><snippet>&gt;&gt;&gt; x = xattr.get_all('tiger_8a428_userdvd.dmg')</snippet></ROW><ROW><id>3533232</id><snippet>import re

data = '123:Palo Alto, CA -&gt; 456:Seattle, WA 789'

name_list = []
r = re.compile("(\s?\d)|:")
name_list += r.sub("", data).split(" -&gt;")
print name_list # Prints ['Palo Alto, CA', 'Seattle, WA']
</snippet></ROW><ROW><id>3533232</id><snippet>&gt;&gt;&gt; s = ""
&gt;&gt;&gt; len(s)
0
</snippet></ROW><ROW><id>3533232</id><snippet>+</snippet></ROW><ROW><id>3533232</id><snippet>&gt;&gt;&gt; s += "Some"
&gt;&gt;&gt; s += " Text"
&gt;&gt;&gt; print s
Some Text
</snippet></ROW><ROW><id>3533268</id><snippet>random.uniform(0.1, 0.9)</snippet></ROW><ROW><id>3533268</id><snippet>def rand_float_range(start, end):
    return random.random() * (end - start) + start
</snippet></ROW><ROW><id>3533322</id><snippet>filterlist</snippet></ROW><ROW><id>3533322</id><snippet>\b</snippet></ROW><ROW><id>3533322</id><snippet>inside_words</snippet></ROW><ROW><id>3533322</id><snippet>['bad', 'un\w+']</snippet></ROW><ROW><id>3533322</id><snippet>ignore_case</snippet></ROW><ROW><id>3533322</id><snippet>True</snippet></ROW><ROW><id>3533322</id><snippet>replacements</snippet></ROW><ROW><id>3533322</id><snippet>"$@%-?!"</snippet></ROW><ROW><id>3533322</id><snippet>"%&amp;$?!"</snippet></ROW><ROW><id>3533322</id><snippet>"-"</snippet></ROW><ROW><id>3533322</id><snippet>complete</snippet></ROW><ROW><id>3533322</id><snippet>True</snippet></ROW><ROW><id>3533322</id><snippet>inside_words</snippet></ROW><ROW><id>3533322</id><snippet>False</snippet></ROW><ROW><id>3533322</id><snippet>"""
Module that provides a class that filters profanities

"""

__author__ = "leoluk"
__version__ = '0.0.1'

import random
import re

class ProfanitiesFilter(object):
    def __init__(self, filterlist, ignore_case=True, replacements="$@%-?!", 
                 complete=True, inside_words=False):
        """
        Inits the profanity filter.

        filterlist -- a list of regular expressions that
        matches words that are forbidden
        ignore_case -- ignore capitalization
        replacements -- string with characters to replace the forbidden word
        complete -- completely remove the word or keep the first and last char?
        inside_words -- search inside other words?

        """

        self.badwords = filterlist
        self.ignore_case = ignore_case
        self.replacements = replacements
        self.complete = complete
        self.inside_words = inside_words

    def _make_clean_word(self, length):
        """
        Generates a random replacement string of a given length
        using the chars in self.replacements.

        """
        return ''.join([random.choice(self.replacements) for i in
                  range(length)])

    def __replacer(self, match):
        value = match.group()
        if self.complete:
            return self._make_clean_word(len(value))
        else:
            return value[0]+self._make_clean_word(len(value)-2)+value[-1]

    def clean(self, text):
        """Cleans a string from profanity."""

        regexp_insidewords = {
            True: r'(%s)',
            False: r'\b(%s)\b',
            }

        regexp = (regexp_insidewords[self.inside_words] % 
                  '|'.join(self.badwords))

        r = re.compile(regexp, re.IGNORECASE if self.ignore_case else 0)

        return r.sub(self.__replacer, text)


if __name__ == '__main__':

    f = ProfanitiesFilter(['bad', 'un\w+'], replacements="-")    
    example = "I am doing bad ungood badlike things."

    print f.clean(example)
    # Returns "I am doing --- ------ badlike things."

    f.inside_words = True    
    print f.clean(example)
    # Returns "I am doing --- ------ ---like things."

    f.complete = False    
    print f.clean(example)
    # Returns "I am doing b-d u----d b-dlike things."
</snippet></ROW><ROW><id>3533447</id><snippet>UserProfile</snippet></ROW><ROW><id>3533447</id><snippet>Country</snippet></ROW><ROW><id>3533447</id><snippet>ManyToManyField</snippet></ROW><ROW><id>3533447</id><snippet>class UserProfile(models.Model):
    countries = models.ManyToManyField(Country)
</snippet></ROW><ROW><id>3533447</id><snippet>SuperUserToCountry</snippet></ROW><ROW><id>3533447</id><snippet>blank = True</snippet></ROW><ROW><id>3533447</id><snippet>null = True</snippet></ROW><ROW><id>3533447</id><snippet>an_instance.countries.all()</snippet></ROW><ROW><id>3533447</id><snippet>profile = User.get_profile()
denmark = Country.objects.get(name = 'Denmark')
russia  = Country.objects.get(name = 'Russia')

if denmark in profile.countries.all():
    print "Something is rotten in the state of Denmark"
elsif russia in profile.countries.all():
    print "In Soviet Russia, profiles have countries!"
</snippet></ROW><ROW><id>3533447</id><snippet>profile = User.get_profile()
denmark = Country.objects.get(name = 'Denmark')
profile.countries.add(denmark)
</snippet></ROW><ROW><id>3533462</id><snippet>img=cv.LoadImage("asd.png")
mat=cv.GetMat(img)
mat[3,1]
(83.0, 88.0, 89.0)
</snippet></ROW><ROW><id>3533666</id><snippet>modify the page and return the modified page</snippet></ROW><ROW><id>3533756</id><snippet>buffer</snippet></ROW><ROW><id>3533756</id><snippet>encPwd</snippet></ROW><ROW><id>3533756</id><snippet>encPwd</snippet></ROW><ROW><id>3533892</id><snippet>def createMatcher( self, regex ):
    def matchCheck( argument ):
        self.assertTrue( regex.match( argument ) )
    return matchCheck
</snippet></ROW><ROW><id>3533892</id><snippet>map( self.createMatcher( REGEX ), mySetOfStrings )
</snippet></ROW><ROW><id>3533998</id><snippet>from shell import * 
basename("/path/to/file.ext")
</snippet></ROW><ROW><id>3533998</id><snippet>from os.path import basename
</snippet></ROW><ROW><id>3534006</id><snippet>split</snippet></ROW><ROW><id>3534006</id><snippet>def get_means_intecepts_thresholds( source_iter ):
    """Precondition: Current line is a "MEANS/INTERCEPTS/THRESHOLDS" line"""
    head= source_iter.next().strip().split()
    junk= source_iter.next().strip()
    assert set( junk ) == set( [' ','-'] )
    for line in source_iter:
        if len(line.strip()) == 0: continue
        if line.strip() == "SLOPES": break
        raw_data= line.strip().split()
        data = dict( zip( head, map( float, raw_data[1:] ) ) )
        yield int(raw_data[0]), data 

def get_slopes( source_iter ):
    """Precondition: Current line is a "SLOPES" line"""
    head= source_iter.next().strip().split()
    junk= source_iter.next().strip()
    assert set( junk ) == set( [' ','-'] )
    for line in source_iter:
        if len(line.strip()) == 0: continue
        if line.strip() == "SLOPES": break
        raw_data= line.strip().split() )
        data = dict( zip( head, map( float, raw_data[1:] ) ) )
        yield raw_data[0], data
</snippet></ROW><ROW><id>3534006</id><snippet>def get_estimated_sample_statistics( source_iter ):
    """Precondition: at the ESTIMATED SAMPLE STATISTICS line"""
    for line in source_iter:
        if len(line.strip()) == 0: continue
    assert line.strip() == "MEANS/INTERCEPTS/THRESHOLDS"
    for data in get_means_intercepts_thresholds( source_iter ):
        yield data
    while True:
        if len(line.strip()) == 0: continue
        if line.strip() != "SLOPES": break
        for data in get_slopes( source_iter ): 
            yield data
</snippet></ROW><ROW><id>3534190</id><snippet>row-activated</snippet></ROW><ROW><id>3534389</id><snippet>def exampleFunction(a, b, c = None):
    if c is None:
        c = a
    ...function body...
</snippet></ROW><ROW><id>3534389</id><snippet>def main(argv=None):
    if argv is None:
        argv = sys.argv
</snippet></ROW><ROW><id>3534554</id><snippet>re.findall(r"####(.*?)\s(.*?)\s####", string, re.DOTALL)</snippet></ROW><ROW><id>3534554</id><snippet>re.compile</snippet></ROW><ROW><id>3534554</id><snippet>[('1', 'ttteest'), ('2', '  \n\nttest')]</snippet></ROW><ROW><id>3534554</id><snippet>'''</snippet></ROW><ROW><id>3534554</id><snippet>"""</snippet></ROW><ROW><id>3534670</id><snippet>settings.py</snippet></ROW><ROW><id>3534670</id><snippet>utils.py</snippet></ROW><ROW><id>3534670</id><snippet>mock.py</snippet></ROW><ROW><id>3534670</id><snippet>import configobj

class MockConfigObj(object):
     #mock whatever you wan

configobj.ConfigObj = MockConfigObj
</snippet></ROW><ROW><id>3534670</id><snippet>import mock</snippet></ROW><ROW><id>3534670</id><snippet>settings</snippet></ROW><ROW><id>3534670</id><snippet>settings.config</snippet></ROW><ROW><id>3534670</id><snippet>MockConfigObj</snippet></ROW><ROW><id>3534670</id><snippet>configobj</snippet></ROW><ROW><id>3534670</id><snippet>configobj</snippet></ROW><ROW><id>3534670</id><snippet>sys.modules</snippet></ROW><ROW><id>3534670</id><snippet>mock.py</snippet></ROW><ROW><id>3534670</id><snippet>ConfigObj</snippet></ROW><ROW><id>3534670</id><snippet>sys.modules</snippet></ROW><ROW><id>3534706</id><snippet>xml</snippet></ROW><ROW><id>3534706</id><snippet>ElementTree</snippet></ROW><ROW><id>3534706</id><snippet>findall()</snippet></ROW><ROW><id>3534706</id><snippet>limit = 10
limited_artists = xml.findall('artist')[:limit]
results = [xml_to_dict(artist) for artist in limited_artists]
</snippet></ROW><ROW><id>3534792</id><snippet>print '%8s %8s %8s' % ('date', 'price', 'ret')
</snippet></ROW><ROW><id>3534792</id><snippet>qw</snippet></ROW><ROW><id>3534792</id><snippet>def qw(s):
    return tuple(s.split())
</snippet></ROW><ROW><id>3534792</id><snippet>print '%8s %8s %8s' % qw('date price ret')
</snippet></ROW><ROW><id>3534792</id><snippet>qw</snippet></ROW><ROW><id>3534792</id><snippet>#define BEGIN {
#define END   }
</snippet></ROW><ROW><id>3534865</id><snippet>.format()</snippet></ROW><ROW><id>3534865</id><snippet># dict must be passed by reference to .format()
print("{foo}, {bar}, {baz}").format(**locals()) 
</snippet></ROW><ROW><id>3534865</id><snippet># Python 2.6
print("{0}, {1}, {2}").format(foo, bar, baz) 

# Python 2.7/3.1+
print("{}, {}, {}").format(foo, bar, baz)    
</snippet></ROW><ROW><id>3534887</id><snippet>import inspect
len(inspect.getargspec(foo_func)[0])
</snippet></ROW><ROW><id>3534887</id><snippet>def foo(a, b, *args, **kwargs):
    pass
</snippet></ROW><ROW><id>3535099</id><snippet>(item,weight)</snippet></ROW><ROW><id>3535099</id><snippet>loot = [ (A,20), (B,20), (C,15), (D,10), (E,2), (F,1) ]
</snippet></ROW><ROW><id>3535099</id><snippet>choices = []
for item, weight in loot:
    choices.extend( [item]*weight )
</snippet></ROW><ROW><id>3535099</id><snippet>random.choice( choices )</snippet></ROW><ROW><id>3535331</id><snippet>&gt;&gt;&gt; s = '0xFFFF00'
&gt;&gt;&gt; i = int(s, 16)
&gt;&gt;&gt; print i
</snippet></ROW><ROW><id>3535668</id><snippet>blog.comment_set.all()
</snippet></ROW><ROW><id>3535710</id><snippet>conn.commit</snippet></ROW><ROW><id>3535710</id><snippet>conn.commit()</snippet></ROW><ROW><id>3535731</id><snippet>hg rename doc docs</snippet></ROW><ROW><id>3535731</id><snippet>hg addremove</snippet></ROW><ROW><id>3535731</id><snippet>hg stat</snippet></ROW><ROW><id>3535731</id><snippet>doc/*</snippet></ROW><ROW><id>3535731</id><snippet>test/*</snippet></ROW><ROW><id>3535731</id><snippet>util/*</snippet></ROW><ROW><id>3535731</id><snippet>docs/*</snippet></ROW><ROW><id>3535731</id><snippet>hg log --follow</snippet></ROW><ROW><id>3535956</id><snippet># download some files from the login directory
host = ftputil.FTPHost('ftp.domain.com', 'user', 'secret')
names = host.listdir(host.curdir)
for name in names:
    if host.path.isfile(name):
        host.download(name, name, 'b')        # remote, local, binary mode
</snippet></ROW><ROW><id>3535956</id><snippet>ftputil</snippet></ROW><ROW><id>3535956</id><snippet>pypi</snippet></ROW><ROW><id>3536150</id><snippet>... + ((16 - len(name)) * '4341')
</snippet></ROW><ROW><id>3536368</id><snippet>def haslower(unicodechar):
    return unicodechar != unicodechar.lower()

def anylower(unicodestring):
    return any(haslower(c) for c in unicodestring)
</snippet></ROW><ROW><id>3536368</id><snippet>.lower()</snippet></ROW><ROW><id>3536368</id><snippet>u'a'</snippet></ROW><ROW><id>3536368</id><snippet>def changescase(uc):
    return uc != uc.lower() or uc != uc.upper()
</snippet></ROW><ROW><id>3536368</id><snippet>uc</snippet></ROW><ROW><id>3536638</id><snippet>from bar import a</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>bar.py</snippet></ROW><ROW><id>3536638</id><snippet>import bar</snippet></ROW><ROW><id>3536638</id><snippet>__init__.py</snippet></ROW><ROW><id>3536638</id><snippet>bar.a = 1</snippet></ROW><ROW><id>3536638</id><snippet>bar.__dict__['a']</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>bar.a = 1</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>bar</snippet></ROW><ROW><id>3536638</id><snippet>__init__.py</snippet></ROW><ROW><id>3536638</id><snippet>a</snippet></ROW><ROW><id>3536638</id><snippet>foobar</snippet></ROW><ROW><id>3536638</id><snippet>foobar</snippet></ROW><ROW><id>3536638</id><snippet>bar.py</snippet></ROW><ROW><id>3536638</id><snippet>bar.bar.a</snippet></ROW><ROW><id>3536638</id><snippet>from foo import bar</snippet></ROW><ROW><id>3536638</id><snippet>import</snippet></ROW><ROW><id>3536638</id><snippet>bar</snippet></ROW><ROW><id>3536638</id><snippet>foo</snippet></ROW><ROW><id>3536638</id><snippet>import</snippet></ROW><ROW><id>3536638</id><snippet>reload</snippet></ROW><ROW><id>3536713</id><snippet>class Stock(object):
    &lt;...&gt;

    def showHistory(self, figNum):
        pylab.figure(figNum)
        pylab.plot(self.history)
        pylab.title('Closing Price, Test  ' + str(figNum))
        pylab.xlabel('Day')
        pylab.ylabel('Price')

def unitTestStock():
    def runSim(stks, fig, mo):
        mean = 0.0
        for s in stks:
            for d in range(numDays):
                s.makeMove(bias, mo)
            s.showHistory(fig)
            mean += s.getPrice()
        mean = mean/float(numStks)
        pylab.axhline(mean)
    numStks = 20
    numDays = 200
    stks1 = []
    stks2 = []
    bias = 0.0
    mo = False
    for i in range(numStks):
        volatility = random.uniform(0,0.2)
        d1 = lambda: random.uniform(-volatility, volatility)
        d2 = lambda: random.gauss(0.0, volatility/2.0)
        stks1.append(Stock(100.0, d1))
        stks2.append(Stock(100.0, d2))
    runSim(stks1, 1, mo)
    runSim(stks2, 2, mo)

unitTestStock()
pylab.show()
assert False
</snippet></ROW><ROW><id>3537631</id><snippet>settings.py</snippet></ROW><ROW><id>3537631</id><snippet>HTTP_X_REQUESTED_WITH</snippet></ROW><ROW><id>3537631</id><snippet>is_ajax()</snippet></ROW><ROW><id>3537648</id><snippet># these are tokens (defined as regexps)
stg_marker = Token(r'\*\*')
emp_marker = Token(r'\*') # tokens are longest match, so strong is preferred if possible
spo_marker = Token(r'%%')
....
# grammar rules combine tokens
contents = Delayed() # this will be defined later and lets us recurse
strong = stg_marker + contents + stg_marker
emphasis = emp_marker + contents + emp_marker
spoiler = spo_marker + contents + spo_marker
other_stuff = .....
contents += strong | emphasis | spoiler | other_stuff # this defines contents recursively
</snippet></ROW><ROW><id>3537726</id><snippet>0</snippet></ROW><ROW><id>3537726</id><snippet>index</snippet></ROW><ROW><id>3537726</id><snippet>&gt;&gt;&gt; s = "Hello, I am 12! I like plankton but I don't like Baseball."
&gt;&gt;&gt; index = 34 #points to the 't' in 'but'
&gt;&gt;&gt; index_of_2nd_I = s.rfind('I', 0, index)
&gt;&gt;&gt;
&gt;&gt;&gt; index_of_2nd_I
16
</snippet></ROW><ROW><id>3537862</id><snippet>__init__.py</snippet></ROW><ROW><id>3537862</id><snippet>init.py</snippet></ROW><ROW><id>3537862</id><snippet>data.py</snippet></ROW><ROW><id>3537862</id><snippet>import sys
import pprint

pprint.pprint(sys.path)

from myapp.models.models import *
</snippet></ROW><ROW><id>3537862</id><snippet>data.py</snippet></ROW><ROW><id>3537862</id><snippet>sys.path</snippet></ROW><ROW><id>3538118</id><snippet>O(N log N)</snippet></ROW><ROW><id>3538118</id><snippet>N</snippet></ROW><ROW><id>3538118</id><snippet>timsort</snippet></ROW><ROW><id>3538118</id><snippet>import itertools
import operator
f = operator.itemgetter(0)

def minima(lol):
  return list(next(itertools.groupby(sorted(lol, key=f), key=f))[1])
</snippet></ROW><ROW><id>3538118</id><snippet>f</snippet></ROW><ROW><id>3538118</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>3538118</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>3538118</id><snippet>sorted(lol, key=f)</snippet></ROW><ROW><id>3538118</id><snippet>lol</snippet></ROW><ROW><id>3538118</id><snippet>key=f</snippet></ROW><ROW><id>3538118</id><snippet>key=f</snippet></ROW><ROW><id>3538118</id><snippet>itertools.groupby(sorted(lol, key=f), key=f)</snippet></ROW><ROW><id>3538118</id><snippet>sorted</snippet></ROW><ROW><id>3538118</id><snippet>key</snippet></ROW><ROW><id>3538118</id><snippet>f</snippet></ROW><ROW><id>3538118</id><snippet>groupby</snippet></ROW><ROW><id>3538118</id><snippet>lol</snippet></ROW><ROW><id>3538118</id><snippet>groupby</snippet></ROW><ROW><id>3538118</id><snippet>yield</snippet></ROW><ROW><id>3538118</id><snippet>groupby</snippet></ROW><ROW><id>3538118</id><snippet>k, g</snippet></ROW><ROW><id>3538118</id><snippet>k</snippet></ROW><ROW><id>3538118</id><snippet>f(i)</snippet></ROW><ROW><id>3538118</id><snippet>g</snippet></ROW><ROW><id>3538118</id><snippet>next</snippet></ROW><ROW><id>3538118</id><snippet>groupby</snippet></ROW><ROW><id>3538118</id><snippet>groupby(...).next()</snippet></ROW><ROW><id>3538118</id><snippet>next</snippet></ROW><ROW><id>3538118</id><snippet>next(...)</snippet></ROW><ROW><id>3538118</id><snippet>k, g</snippet></ROW><ROW><id>3538118</id><snippet>k</snippet></ROW><ROW><id>3538118</id><snippet>g</snippet></ROW><ROW><id>3538118</id><snippet>[1]</snippet></ROW><ROW><id>3538118</id><snippet>list(...)</snippet></ROW><ROW><id>3538118</id><snippet>minima</snippet></ROW><ROW><id>3538209</id><snippet>from pyamf.remoting.gateway.google import WebAppGateway
import logging

class TottysGateway(WebAppGateway):
def __init__(self, services_available, root_path, not_found_service, logger, debug):
    # override the contructor and then call the super
    self.services_available = services_available
    self.root_path = root_path
    self.not_found_service = not_found_service
    WebAppGateway.__init__(self, {}, logger=logging, debug=True)

def getServiceRequest(self, request, target):
    # override the original getServiceRequest method
    try:
        # try looking for the service in the services list
        return WebAppGateway.getServiceRequest(self, request, target)
    except:
        pass

    try:
        # don't know what it does but is an error for now
        service_func = self.router(target)
    except:
        if(target in self.services_available):
            # only if is an available service import it's module
            # so it doesn't access services that should be hidden
            try:
                module_path = self.root_path + '.' + target
                paths = target.rsplit('.')
                func_name = paths[len(paths) - 1]
                import_as = '_'.join(paths) + '_' + func_name
                import_string = "from "+module_path+" import "+func_name+' as service_func'
                exec import_string
            except:
                service_func = False

    if(not service_func):
        # if is not found load the default not found service
        module_path = self.rootPath + '.' + self.not_found_service
        import_string = "from "+module_path+" import "+func_name+' as service_func'

    # add the service loaded above
    assign_string = "self.addService(service_func, target)"
    exec assign_string

    return WebAppGateway.getServiceRequest(self, request, target)
</snippet></ROW><ROW><id>3538318</id><snippet>sourceline</snippet></ROW><ROW><id>3538318</id><snippet>from lxml import etree

xml = '&lt;doc&gt;\n&lt;foo&gt;rain in spain&lt;/foo&gt;\n&lt;/doc&gt;'
root = etree.fromstring(xml)

print root.find('foo').sourceline # 2

root.append(etree.Element('bar'))
print etree.tostring(root)
print root.find('bar').sourceline # None
</snippet></ROW><ROW><id>3538318</id><snippet>lxml.html</snippet></ROW><ROW><id>3538340</id><snippet>sqlite</snippet></ROW><ROW><id>3538340</id><snippet>':memory:'</snippet></ROW><ROW><id>3538340</id><snippet>Books</snippet></ROW><ROW><id>3538340</id><snippet>Authors</snippet></ROW><ROW><id>3538340</id><snippet>BookAuthors</snippet></ROW><ROW><id>3538340</id><snippet>BookID</snippet></ROW><ROW><id>3538340</id><snippet>AuthorID</snippet></ROW><ROW><id>3538340</id><snippet>BookAuthors</snippet></ROW><ROW><id>3538340</id><snippet>ON DELETE CASCADE</snippet></ROW><ROW><id>3538453</id><snippet>email</snippet></ROW><ROW><id>3538782</id><snippet>class MyMessageHandler(object):
    def __init__(self):
        self.sockets = [...]

    def wait(self):
        debug('waiting...')
        i, o, e = select(...)
</snippet></ROW><ROW><id>3538944</id><snippet>dcopy = list(d)
[dcopy.pop() for _ in range(len(d))]
</snippet></ROW><ROW><id>3538944</id><snippet>[dcopy.pop() for dcopy in [list(d)] for _ in range(len(d))]
</snippet></ROW><ROW><id>3538944</id><snippet>for</snippet></ROW><ROW><id>3538944</id><snippet>d</snippet></ROW><ROW><id>3538944</id><snippet>d[::-1]
</snippet></ROW><ROW><id>3538944</id><snippet>numpy</snippet></ROW><ROW><id>3538944</id><snippet>numpy.array</snippet></ROW><ROW><id>3539062</id><snippet>return None</snippet></ROW><ROW><id>3539062</id><snippet>else</snippet></ROW><ROW><id>3539062</id><snippet>None</snippet></ROW><ROW><id>3539062</id><snippet>subStringMatchExact("banana","x")</snippet></ROW><ROW><id>3539062</id><snippet>None</snippet></ROW><ROW><id>3539132</id><snippet>next</snippet></ROW><ROW><id>3539132</id><snippet>itertools.tee</snippet></ROW><ROW><id>3539132</id><snippet>class rewindable_iterator(object):
    not_started = object()

    def __init__(self, iterator):
        self._iter = iter(iterator)
        self._use_save = False
        self._save = self.not_started

    def __iter__(self):
        return self

    def next(self):
        if self._use_save:
            self._use_save = False
        else:
            self._save = self._iter.next()
        return self._save

    def backup(self):
        if self._use_save:
            raise RuntimeError("Tried to backup more than one step.")
        elif self._save is self.not_started:
            raise RuntimeError("Can't backup past the beginning.")
        self._use_save = True


fiter = rewindable_iterator(file('file.txt', 'r'))
for line in fiter:
    result = process_line(line)
    if result is DoOver:
        fiter.backup()
</snippet></ROW><ROW><id>3539197</id><snippet>open()</snippet></ROW><ROW><id>3539197</id><snippet>file = open(location, 'rb')
</snippet></ROW><ROW><id>3539393</id><snippet>‰</snippet></ROW><ROW><id>3539393</id><snippet>%</snippet></ROW><ROW><id>3539393</id><snippet>import spam</snippet></ROW><ROW><id>3539440</id><snippet>.replace(u'\x97','')</snippet></ROW><ROW><id>3539440</id><snippet>'|'</snippet></ROW><ROW><id>3539440</id><snippet>&gt;&gt;&gt; s = u'KEY1A\x97DEMOGRAPHICRESPONSES'
&gt;&gt;&gt; s.replace(u'\x97', '')
u'KEY1ADEMOGRAPHICRESPONSES'
</snippet></ROW><ROW><id>3539576</id><snippet>SSD</snippet></ROW><ROW><id>3539576</id><snippet>with open('old.dat', 'rb') as oldf:</snippet></ROW><ROW><id>3539576</id><snippet>with open('NEWold.dat', 'wb') as newf:</snippet></ROW><ROW><id>3539576</id><snippet>seek</snippet></ROW><ROW><id>3539576</id><snippet>oldf</snippet></ROW><ROW><id>3539576</id><snippet>def copyN1(oldf, newf, N1, buflen=1024*1024):
    while N1:
      newf.write(oldf.read(min(N1, buflen)))
      N1 -= buflen
</snippet></ROW><ROW><id>3539747</id><snippet>sourcecode</snippet></ROW><ROW><id>3539747</id><snippet>#!/usr/bin/python
# EASY-INSTALL-SCRIPT: 'docutils==0.5','rst2html.py'
"""
A minimal front end to the Docutils Publisher, producing HTML.
"""

try:
    from ulif.rest import directives_plain
    from ulif.rest import roles_plain
    from ulif.rest import pygments_directive

    import locale
    locale.setlocale(locale.LC_ALL, '')
except:
  pass

from docutils.core import publish_doctree, publish_from_doctree
from smartypants import smartyPants
import sys


description = ('Personal docutils parser with extra features.')

doctree = publish_doctree(file(sys.argv[1]).read())
result = publish_from_doctree(doctree, writer_name='html')
result = smartyPants(result)
print result
</snippet></ROW><ROW><id>3539766</id><snippet>re.search</snippet></ROW><ROW><id>3539766</id><snippet>re.match</snippet></ROW><ROW><id>3539766</id><snippet>re.match</snippet></ROW><ROW><id>3539766</id><snippet>re.search</snippet></ROW><ROW><id>3539766</id><snippet>m = re.search('\((\d+)\)', zznew)
print m.group(1)
</snippet></ROW><ROW><id>3539954</id><snippet>import random

length = random.randrange(5, 16)

randstr = ''.join(random.choice(letters) for _ in range(length))
</snippet></ROW><ROW><id>3539960</id><snippet>M = [3 0 0 0 0;
     0 0 1 0 0;
     0 0 0 0 1; 
     0 2 0 0 0]

[Q,R,E] = qr(M)
Q =
     1     0     0     0
     0     0     1     0
     0     0     0     1
     0     1     0     0

R =
     3     0     0     0     0
     0     2     0     0     0
     0     0     1     0     0
     0     0     0     1     0

E =
     1     0     0     0     0
     0     1     0     0     0
     0     0     1     0     0
     0     0     0     0     1
     0     0     0     1     0
</snippet></ROW><ROW><id>3539960</id><snippet>M*E
ans =
     3     0     0     0     0
     0     0     1     0     0
     0     0     0     1     0
     0     2     0     0     0
</snippet></ROW><ROW><id>3540249</id><snippet>gmtime</snippet></ROW><ROW><id>3540249</id><snippet>localtime</snippet></ROW><ROW><id>3540249</id><snippet>calendar.timegm</snippet></ROW><ROW><id>3540249</id><snippet>mktime</snippet></ROW><ROW><id>3540249</id><snippet>struct_time</snippet></ROW><ROW><id>3540249</id><snippet>&gt;&gt;&gt; loct
1282453595
&gt;&gt;&gt; time.mktime(time.gmtime(loct)) - loct
28800.0
&gt;&gt;&gt; _ / 3600
8.0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3540249</id><snippet>&gt;&gt;&gt; time.localtime(loct)[-1]
1
</snippet></ROW><ROW><id>3540315</id><snippet>R(3.4.2)</snippet></ROW><ROW><id>3540315</id><snippet>import random

def random_line(afile):
    line = next(afile)
    for num, aline in enumerate(afile):
      if random.randrange(num + 2): continue
      line = aline
    return line
</snippet></ROW><ROW><id>3540315</id><snippet>num + 2</snippet></ROW><ROW><id>3540315</id><snippet>randrange</snippet></ROW><ROW><id>3540315</id><snippet>1.0/(num + 2)</snippet></ROW><ROW><id>3540375</id><snippet>execfile()</snippet></ROW><ROW><id>3540405</id><snippet>def handle_result(rpc):
    result = rpc.get_result()
    # ... Do something with result...

# Use a helper function to define the scope of the callback.
def create_callback(rpc):
    return lambda: handle_result(rpc)

rpcs = []
for url in urls:
    rpc = urlfetch.create_rpc()
    rpc.callback = create_callback(rpc)
    urlfetch.make_fetch_call(rpc, url)
    rpcs.append(rpc)

# ...

# Finish all RPCs, and let callbacks process the results.
for rpc in rpcs:
    rpc.wait()
</snippet></ROW><ROW><id>3540456</id><snippet>random.randrange([start], stop[, step])</snippet></ROW><ROW><id>3540456</id><snippet>range(start, stop, step)</snippet></ROW><ROW><id>3540456</id><snippet>choice(range(start, stop, step))</snippet></ROW><ROW><id>3540456</id><snippet>[start, start+step, ..., stop-1]</snippet></ROW><ROW><id>3540456</id><snippet>[start, start+step, ..., stop]</snippet></ROW><ROW><id>3540456</id><snippet>range(n)</snippet></ROW><ROW><id>3540456</id><snippet>random.randint(a, b)</snippet></ROW><ROW><id>3540456</id><snippet>a &lt;= N &lt;= b</snippet></ROW><ROW><id>3540456</id><snippet>randrange(a, b+1)</snippet></ROW><ROW><id>3541234</id><snippet>Python 3.1.2 (r312:79149, Mar 21 2010, 00:41:52) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open('/junk/so/foo.txt')
&gt;&gt;&gt; type(f.readlines())
&lt;class 'list'&gt;
&gt;&gt;&gt; help(f.readlines)
Help on built-in function readlines:

readlines(...)
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.

&gt;&gt;&gt;
</snippet></ROW><ROW><id>3541282</id><snippet>&gt;&gt;&gt; f = open('1.txt')
&gt;&gt;&gt; f
&lt;_io.TextIOWrapper name='1.txt' encoding='UTF-8'&gt;
&gt;&gt;&gt; next(f)
'1,B,-0.0522642316338,0.997268450092\n'
&gt;&gt;&gt; next(f)
'2,B,-0.081127897359,2.05114559572\n'
</snippet></ROW><ROW><id>3541282</id><snippet>itertools.islice</snippet></ROW><ROW><id>3541282</id><snippet>&gt;&gt;&gt; f.seek(0)
0
&gt;&gt;&gt; next(islice(f, 7, None))
'8,A,-0.0518101108474,12.094341554\n'
</snippet></ROW><ROW><id>3541394</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>3541394</id><snippet>PyObject *</snippet></ROW><ROW><id>3541394</id><snippet>PyObject_Hash</snippet></ROW><ROW><id>3541394</id><snippet>==</snippet></ROW><ROW><id>3541497</id><snippet>ComputedProperty</snippet></ROW><ROW><id>3541497</id><snippet>DerivedProperty</snippet></ROW><ROW><id>3541497</id><snippet>Property</snippet></ROW><ROW><id>3541497</id><snippet>ComputedProperty</snippet></ROW><ROW><id>3541497</id><snippet>Property</snippet></ROW><ROW><id>3541790</id><snippet>'localhost'</snippet></ROW><ROW><id>3541790</id><snippet>'192.168.1.5'</snippet></ROW><ROW><id>3541790</id><snippet>'192.168.1.4'</snippet></ROW><ROW><id>3541858</id><snippet>[buildout] 
parts = python 
eggs = tornado 
extra-paths = ${buildout:directory}

[python] 
recipe = zc.recipe.egg 
interpreter = python 
eggs = ${buildout:eggs} 
entry-points = myapp=app:main 
extra-paths = ${buildout:extra-paths}
</snippet></ROW><ROW><id>3541978</id><snippet>r'\(#\d+\.\d+\)\}'</snippet></ROW><ROW><id>3541978</id><snippet>(</snippet></ROW><ROW><id>3541978</id><snippet>)</snippet></ROW><ROW><id>3541978</id><snippet>.</snippet></ROW><ROW><id>3541978</id><snippet>}</snippet></ROW><ROW><id>3541978</id><snippet>\</snippet></ROW><ROW><id>3541978</id><snippet>+</snippet></ROW><ROW><id>3541978</id><snippet>\d</snippet></ROW><ROW><id>3541978</id><snippet>r'raw string literals'</snippet></ROW><ROW><id>3541978</id><snippet>u</snippet></ROW><ROW><id>3541978</id><snippet>r</snippet></ROW><ROW><id>3541978</id><snippet>\(\#+(\d\.\d)+\)\}
</snippet></ROW><ROW><id>3541978</id><snippet>\( \#+ ( \d \. \d )+ \) \}
       \__________/
         this is one group, repeated with +
</snippet></ROW><ROW><id>3541978</id><snippet>(</snippet></ROW><ROW><id>3541978</id><snippet>#</snippet></ROW><ROW><id>3541978</id><snippet>)}</snippet></ROW><ROW><id>3541978</id><snippet>(###1.23.45.6)}</snippet></ROW><ROW><id>3541978</id><snippet>(…)</snippet></ROW><ROW><id>3541978</id><snippet>?</snippet></ROW><ROW><id>3541978</id><snippet>BEFORE
\(#\d+\.\d+\)\}
      \___/
      let's make this optional! (…)?

AFTER
\(#\d+(\.\d+)?\)\}
</snippet></ROW><ROW><id>3541978</id><snippet>(#1.23)}</snippet></ROW><ROW><id>3541978</id><snippet>(#666)}</snippet></ROW><ROW><id>3542410</id><snippet># On Windows/wininst, add a .py extension and an .exe launcher
if group=='gui_scripts':
    ext, launcher = '-script.pyw', 'gui.exe'
    old = ['.pyw']
    new_header = re.sub('(?i)python.exe','pythonw.exe',header)
else:
    ext, launcher = '-script.py', 'cli.exe'
    old = ['.py','.pyc','.pyo']
    new_header = re.sub('(?i)pythonw.exe','python.exe',header)

if os.path.exists(new_header[2:-1]) or sys.platform!='win32':
    hdr = new_header
else:
    hdr = header
</snippet></ROW><ROW><id>3542410</id><snippet>if</snippet></ROW><ROW><id>3542410</id><snippet>else</snippet></ROW><ROW><id>3542410</id><snippet>new_header[2:-1]</snippet></ROW><ROW><id>3542410</id><snippet>os.path.exists</snippet></ROW><ROW><id>3542410</id><snippet>dogsync-frontend-script.pyw</snippet></ROW><ROW><id>3542410</id><snippet>#!pythonw.exe

# This script will be executed by the primary Python version that is installed, which might as well be Python 3. But
# we want to execute it with the Python version that belongs to this script's path. So let's do a major hack:

import os
import sys
import subprocess

if sys.argv[-1] == "magic":
    from dogsync_frontend.launcher import main
    main()
else:
    # The CPython folder hierarchy is assumed here (&lt;installation&gt;\pythonw.exe, &lt;installation&gt;\Scripts\&lt;thisscript&gt;)
    subprocess.Popen([os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "pythonw.exe")),
                      __file__,
                      "magic"])
</snippet></ROW><ROW><id>3542410</id><snippet>dogsync-frontend.exe</snippet></ROW><ROW><id>3542410</id><snippet>&lt;python installation&gt;\lib\site-packages\setuptools\gui.exe</snippet></ROW><ROW><id>3542410</id><snippet>&lt;name of EXE&gt;-script.py[w]</snippet></ROW><ROW><id>3542410</id><snippet>setup.py</snippet></ROW><ROW><id>3542410</id><snippet>from setuptools import __file__ as setupToolsFilename

if os.name == "nt":
    # Use a customized (major hack) start script instead of the one that gets automatically created by setuptools
    # when the "gui_scripts" parameter is used. This way, we don't need setuptools installed in order to run DogSync.
    shutil.copy2(os.path.join(os.path.dirname(setupToolsFilename), "gui.exe"),
                 "build-environment/windows-scripts/dogsync-frontend.exe")
    startScripts = dict(scripts = ["build-environment/windows-scripts/dogsync-frontend-script.pyw",
                                   "build-environment/windows-scripts/dogsync-frontend.exe"])
else:
    # For Linux, I don't have a solution to remove the runtime dependency on setuptools (yet)
    startScripts = dict(entry_points = {"gui_scripts" : ['dogsync-frontend = dogsync_frontend.launcher:main']})

setup(&lt;other options&gt;,
      **startScripts)
</snippet></ROW><ROW><id>3542410</id><snippet>&lt;python installation&gt;\Scripts</snippet></ROW><ROW><id>3542410</id><snippet>dogsync-frontend.exe</snippet></ROW><ROW><id>3542481</id><snippet>import os
print os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>3542481</id><snippet>__file__</snippet></ROW><ROW><id>3542481</id><snippet>.py</snippet></ROW><ROW><id>3542481</id><snippet>os.path</snippet></ROW><ROW><id>3542481</id><snippet>abspath</snippet></ROW><ROW><id>3542481</id><snippet>dirname</snippet></ROW><ROW><id>3542481</id><snippet>foo.py</snippet></ROW><ROW><id>3542481</id><snippet>bar.py</snippet></ROW><ROW><id>3542732</id><snippet>&gt;&gt;&gt; fruit = 'Pear'
&gt;&gt;&gt; print("Hey, {fruit}".format(**locals()))
Hey, Pear
</snippet></ROW><ROW><id>3542767</id><snippet>n = int(input())
l = [int(input()) for _ in range(n)]
</snippet></ROW><ROW><id>3542767</id><snippet>def getNumber(prompt = ''):
    while True:
        try:
            return int(raw_input(prompt))
        except:
            print "Invalid input, try again."
</snippet></ROW><ROW><id>3542847</id><snippet>base64.b64decode</snippet></ROW><ROW><id>3542847</id><snippet>str.decode('base64')</snippet></ROW><ROW><id>3542847</id><snippet>message = '''
RGF0ZSBldCBoZXVyZTogICAgICAgICAgICAgICAgICAgICAgICAgICAyMi8wOC8yMDEwIDE0
OjMzOjAzIEdNVCBVbmtub3duDQpQcsOpbm9tOiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgamFjaW50bw0KTm9tOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBjYXJ2YWxobw0KRS1NYWlsOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
'''

print message.decode('base64')
</snippet></ROW><ROW><id>3542847</id><snippet>Ã©</snippet></ROW><ROW><id>3542847</id><snippet>print message.decode('base64').decode('utf-8')
</snippet></ROW><ROW><id>3542847</id><snippet>base64.b64decode</snippet></ROW><ROW><id>3542894</id><snippet>urlencode</snippet></ROW><ROW><id>3542894</id><snippet>cgi</snippet></ROW><ROW><id>3542894</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; d = {'a':'b', 'c':'d'}
&gt;&gt;&gt; s = urllib.urlencode(d)
&gt;&gt;&gt; s
'a=b&amp;c=d'
&gt;&gt;&gt; d1 = urlparse.parse_qs(s)
&gt;&gt;&gt; d1
{'a': ['b'], 'c': ['d']}
</snippet></ROW><ROW><id>3542894</id><snippet>d</snippet></ROW><ROW><id>3542894</id><snippet>d1</snippet></ROW><ROW><id>3542894</id><snippet>&gt;&gt;&gt; sq = urlparse.parse_qsl(s)
&gt;&gt;&gt; sq  
[('a', 'b'), ('c', 'd')]
&gt;&gt;&gt; dict(sq)
{'a': 'b', 'c': 'd'}
</snippet></ROW><ROW><id>3542894</id><snippet>dict</snippet></ROW><ROW><id>3543044</id><snippet>self.request.host</snippet></ROW><ROW><id>3543044</id><snippet>self.request.host_url</snippet></ROW><ROW><id>3543310</id><snippet>cv.PyrDown(img, dsimg)

data = np.asarray(dsimg)
blue, green, red = data.T

res = (green &gt; (_RED_DIFF + red)) &amp; (green &gt; (_BLU_DIFF + blue))
res = res.astype(np.uint8) * 255

res = cv.fromarray(res)
</snippet></ROW><ROW><id>3543464</id><snippet>n //= 10</snippet></ROW><ROW><id>3543464</id><snippet>n /= 10</snippet></ROW><ROW><id>3543464</id><snippet>1 / 10</snippet></ROW><ROW><id>3543464</id><snippet>0.1</snippet></ROW><ROW><id>3543464</id><snippet>0</snippet></ROW><ROW><id>3543464</id><snippet>//=</snippet></ROW><ROW><id>3543465</id><snippet>IndentedHelpFormatter</snippet></ROW><ROW><id>3543465</id><snippet> def format_description(self, description):
    if description:
        return self._format_text(description) + "\n"
    else:
        return ""
</snippet></ROW><ROW><id>3543465</id><snippet>IndentedHelpFormatter</snippet></ROW><ROW><id>3543465</id><snippet>self._format_text</snippet></ROW><ROW><id>3543465</id><snippet>import optparse

class PlainHelpFormatter(optparse.IndentedHelpFormatter): 
    def format_description(self, description):
        if description:
            return description + "\n"
        else:
            return ""

parser = optparse.OptionParser(
    prog='./spill.py',
    formatter=PlainHelpFormatter(),
    description=u'''
  /     \                                     
  vvvvvvv  /|__/|                             
      I   /O,O   |                            
      I /_____   |      /|/|                 
     J|/^ ^ ^ \  |    /00  |    _//|          
      |^ ^ ^ ^ |W|   |/^^\ |   /oo |         
       \m___m__|_|    \m_m_|   \mm_|         
''',
    epilog='''
        Las cucarachas lograron con exito su plan, echando a los pestilentes sangre caliente de sus cajas de cemento. 
Ahora el hombre es una especie errante en el espacio, un vagabundo errante en las estrellas.''')
(opt,args) = parser.parse_args()
</snippet></ROW><ROW><id>3543584</id><snippet>Link.objects.extra(select={'month': 'extract( month from pub_date )'}).values('month').annotate(dcount=Count('pub_date'))
</snippet></ROW><ROW><id>3543584</id><snippet>extract</snippet></ROW><ROW><id>3543586</id><snippet>def process_match(m):
    # Process the match here.
    return ''

s = p.sub(process_match, s)
</snippet></ROW><ROW><id>3543597</id><snippet>main</snippet></ROW><ROW><id>3543597</id><snippet>functions.py</snippet></ROW><ROW><id>3543597</id><snippet>import main
print main.some_var
</snippet></ROW><ROW><id>3543597</id><snippet>some_var</snippet></ROW><ROW><id>3543597</id><snippet>constants.py</snippet></ROW><ROW><id>3543597</id><snippet>main.py</snippet></ROW><ROW><id>3543597</id><snippet>import functions
from constants import some_var
... etc
</snippet></ROW><ROW><id>3543597</id><snippet>functions.py</snippet></ROW><ROW><id>3543597</id><snippet>from constants import some_var
</snippet></ROW><ROW><id>3543866</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules[__name__].__dict__.clear()
</snippet></ROW><ROW><id>3543866</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; this = sys.modules[__name__]
&gt;&gt;&gt; for n in dir():
...   if n[0]!='_': delattr(this, n)
... 
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3543866</id><snippet>__builtins__</snippet></ROW><ROW><id>3543866</id><snippet>&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__', 'n']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3543866</id><snippet>n</snippet></ROW><ROW><id>3543866</id><snippet>for</snippet></ROW><ROW><id>3543866</id><snippet>for</snippet></ROW><ROW><id>3543866</id><snippet>_</snippet></ROW><ROW><id>3543866</id><snippet>_</snippet></ROW><ROW><id>3543874</id><snippet>{% if article|user_may_see_full_version:user %}{{ article }}{% else %}{{article.title }}{% endif %}
</snippet></ROW><ROW><id>3543874</id><snippet>@register.filter()
def user_may_see_full_version(article, user):
    return article.user_may_see_full_version(user)
</snippet></ROW><ROW><id>3544061</id><snippet>import sys

class Kangaroo(object):
    def __str__(self):
        flocals = sys._getframe(1).f_locals
        for ident in flocals:
            if flocals[ident] is self:
                name = ident
                break
        else:   
            name = 'roo'
        return "in {0}'s pouch, there is {1}".format(name, self.pouch_contents)

kang = Kangaroo()
print kang
</snippet></ROW><ROW><id>3544061</id><snippet>f_locals</snippet></ROW><ROW><id>3544061</id><snippet>print kang</snippet></ROW><ROW><id>3544061</id><snippet>f_locals</snippet></ROW><ROW><id>3544061</id><snippet>self</snippet></ROW><ROW><id>3544061</id><snippet>break</snippet></ROW><ROW><id>3544061</id><snippet>break</snippet></ROW><ROW><id>3544061</id><snippet>else</snippet></ROW><ROW><id>3544061</id><snippet>f_locals</snippet></ROW><ROW><id>3544274</id><snippet>ls -las /home/wot/django-projects/aedo/
</snippet></ROW><ROW><id>3544342</id><snippet>comm</snippet></ROW><ROW><id>3544342</id><snippet>sort file1 file2 | uniq -u</snippet></ROW><ROW><id>3544420</id><snippet>cdef extern from "stdint.h":
    ctypedef unsigned long long uint64_t
</snippet></ROW><ROW><id>3544420</id><snippet>ctypedef</snippet></ROW><ROW><id>3544420</id><snippet>extern</snippet></ROW><ROW><id>3544420</id><snippet>stdint.h</snippet></ROW><ROW><id>3544420</id><snippet>unsigned long long</snippet></ROW><ROW><id>3544420</id><snippet>PyLong_FromUnsignedLongLong</snippet></ROW><ROW><id>3544420</id><snippet>PyLong_AsLongLongAndOverflow</snippet></ROW><ROW><id>3544440</id><snippet>dpkg -r</snippet></ROW><ROW><id>3544514</id><snippet>&lt;div style="width:400px"&gt;
{% for image in image_list%}
    &lt;div style="float:left; width:100px; height:100px;"&gt;
        {{ image.whatever }}
    &lt;/div&gt;
{% endfor%}
&lt;/div&gt;
</snippet></ROW><ROW><id>3544514</id><snippet>display:inline-block</snippet></ROW><ROW><id>3544514</id><snippet>{% for image in image_list %}
    {% if forloop.first %}
        &lt;tr&gt;
    {% endif %}

    &lt;td&gt;{{ forloop.counter }} - {{ image }}&lt;/td&gt;

    {% if forloop.last %}
        &lt;/tr&gt;
    {% else %}
        {% if forloop.counter|divisibleby:"4" %}
            &lt;/tr&gt;&lt;tr&gt;
        {% endif %}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>3544621</id><snippet>%</snippet></ROW><ROW><id>3544621</id><snippet>==</snippet></ROW><ROW><id>3544621</id><snippet>or</snippet></ROW><ROW><id>3544621</id><snippet>     ___or___
    /        \
  ==          ==
 /  \        /  \
n    1      %    0
           / \
          n   i
</snippet></ROW><ROW><id>3544621</id><snippet>for</snippet></ROW><ROW><id>3544621</id><snippet>s</snippet></ROW><ROW><id>3544621</id><snippet>"prime"</snippet></ROW><ROW><id>3544621</id><snippet>2,n/2+1</snippet></ROW><ROW><id>3544621</id><snippet>n</snippet></ROW><ROW><id>3544621</id><snippet>2,1</snippet></ROW><ROW><id>3544621</id><snippet>n</snippet></ROW><ROW><id>3544621</id><snippet>2/2+1</snippet></ROW><ROW><id>3544621</id><snippet>2,2</snippet></ROW><ROW><id>3544621</id><snippet>s</snippet></ROW><ROW><id>3544621</id><snippet>#!usr/bin/python

n = 9
s = 'prime'
if n == 1:
    s = 'non-prime'
else:
    i = 2
    while i * i &lt;= n:
        if n % i == 0:
            s= 'non-prime'
            break
        i = i + 1
print s
</snippet></ROW><ROW><id>3544621</id><snippet>n/2</snippet></ROW><ROW><id>3544621</id><snippet>n</snippet></ROW><ROW><id>3545353</id><snippet>for key in mydictionary.keys():
   print "key: %s , value: %s" % (key, mydictionary[key])
</snippet></ROW><ROW><id>3545670</id><snippet>2.*</snippet></ROW><ROW><id>3545670</id><snippet>3.*</snippet></ROW><ROW><id>3545729</id><snippet>class WindowProgram(Tkinter.Frame)
    """ This class creates a frame for my program window """
    def __init__(self, parent):
        Tkinter.Frame.__init__(self, parent)

class App(Tkinter.Tk):
    """ application constructor """
    def __init__(self):
        Tkinter.Tk.__init__(self)
        self.window_program = Window_Program(self)
</snippet></ROW><ROW><id>3545846</id><snippet>NUL</snippet></ROW><ROW><id>3545846</id><snippet>'nlna*na*na*na*i3ni6'
</snippet></ROW><ROW><id>3545846</id><snippet>serialize</snippet></ROW><ROW><id>3545846</id><snippet>deserialize</snippet></ROW><ROW><id>3546083</id><snippet>if (object not possitioned exactly on the grid):
    (possition the item on the grid)
</snippet></ROW><ROW><id>3546213</id><snippet>filterAcceptsRow</snippet></ROW><ROW><id>3546213</id><snippet>QTableView</snippet></ROW><ROW><id>3546213</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>3546237</id><snippet>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; src="hello\n#foo\n#bar\n#baz\nworld\n"
&gt;&gt;&gt; line_gen = (''.join(j) for i,j in it.groupby(src, "\n".__ne__) if i)
&gt;&gt;&gt; '\n'.join(s for s in line_gen if s[0]!="#")
'hello\nworld'
</snippet></ROW><ROW><id>3546237</id><snippet>&gt;&gt;&gt; src="hello\n#foo\n#bar\n#baz\nworld\n"
&gt;&gt;&gt;
&gt;&gt;&gt; def isplit(s, t): # iterator to split string s at character t
...     i=j=0
...     while True:
...         try:
...             j = s.index(t, i)
...         except ValueError:
...             if i&lt;len(s):
...                 yield s[i:]
...             raise StopIteration
...         yield s[i:j]
...         i = j+1
...
&gt;&gt;&gt; '\n'.join(x for x in isplit(src, '\n') if x[0]!='#')
'hello\nworld'
</snippet></ROW><ROW><id>3546237</id><snippet>re</snippet></ROW><ROW><id>3546237</id><snippet>finditer</snippet></ROW><ROW><id>3546237</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; src="hello\n#foo\n#bar\n#baz\nworld\n"
&gt;&gt;&gt; line_gen = (m.group(1) for m in re.finditer("(.*?)(\n|$)",src))
&gt;&gt;&gt; '\n'.join(s for s in line_gen if not s.startswith("#"))
'hello\nworld'
</snippet></ROW><ROW><id>3546385</id><snippet>from .y import Y
Class X(Base):
    ...
    y = relation(Y, backref="x")

Class Y(Base):
    ...
    @classmethod
    def get_x(cls):
        return cls.x.attr.target_mapper.class_
</snippet></ROW><ROW><id>3546523</id><snippet>getattr(foo.__class__, &lt;field_name&gt;)
</snippet></ROW><ROW><id>3546523</id><snippet>getattr(foo, &lt;field_name&gt;)
</snippet></ROW><ROW><id>3546559</id><snippet>user = relation('User', backref='articles', primaryjoin="Article.user_id==User.id")
</snippet></ROW><ROW><id>3546977</id><snippet>function compare(profile_id){
    if (profile_id == {{ profilegroup.subject.id }})
        \\ do something
}
</snippet></ROW><ROW><id>3547150</id><snippet>{% comment %}

add your comment here :-)

{% endcomment %}
</snippet></ROW><ROW><id>3547323</id><snippet>import os
import networkx as nx

g = nx.DiGraph( )
for filename in os.listdir( &lt;dir&gt; ):
    # do something to filename to get the number
    g.add_node( &lt;number&gt; )

for filename in os.listdir( &lt;dir&gt; ):
    # do something to filename to get the source
    with open( filename ) as theFile:
        # do something to theFile to get the targets
        for target in &lt;targets&gt;:
            g.add_edge( &lt;source&gt;, &lt;target&gt; )

import matplotlib.pyplot as plt
nx.draw( g )
</snippet></ROW><ROW><id>3548609</id><snippet>gzip.GzipFile(fileobj=handle)</snippet></ROW><ROW><id>3548609</id><snippet>fileobj=</snippet></ROW><ROW><id>3548740</id><snippet>&gt;&gt;&gt; json.loads(json.dumps({123: None}))
{'123': None}
&gt;&gt;&gt; json.loads(json.dumps({None: None}))
{'null': None}
</snippet></ROW><ROW><id>3548935</id><snippet>exec("/usr/bin/python /usr/lib/python2.4/site-packages/MyModule/myModule script.py -v pixfx.xml 2&gt;&amp;1", $output, $return);
</snippet></ROW><ROW><id>3548935</id><snippet>exec("/usr/bin/python/python /usr/lib/python2.4/site-packages/MyModule/myModule script.py -v pixfx.xml 2&gt;&amp;1", $output, $return);
</snippet></ROW><ROW><id>3548967</id><snippet>loadTestsFromModule</snippet></ROW><ROW><id>3548967</id><snippet>TestAllSuite</snippet></ROW><ROW><id>3548967</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>3548967</id><snippet>allsuite = unittest.TestLoader.loadTestsFromModule(TestAllSuite)
</snippet></ROW><ROW><id>3548967</id><snippet>test_*.py</snippet></ROW><ROW><id>3548967</id><snippet>import unittest
import sys
import os

__usage__='''
%prog      # Searches CWD
%prog DIR   
'''

if __name__=='__main__':
    if len(sys.argv)&gt;1:
        unit_dir=sys.argv[1]
    else:
        unit_dir='.'
    test_modules=[filename.replace('.py','') for filename in os.listdir(unit_dir)
                  if filename.endswith('.py') and filename.startswith('test_')]
    map(__import__,test_modules)

    suite = unittest.TestSuite()
    for mod in [sys.modules[modname] for modname in test_modules]:
        suite.addTest(unittest.TestLoader().loadTestsFromModule(mod))
    unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>3549150</id><snippet>## pattern: Upercase, then anything that is not in (.!?), then one of them
&gt;&gt;&gt; pat = re.compile(r'([A-Z][^\.!?]*[\.!?])', re.M)
&gt;&gt;&gt; pat.findall('OMG is this a question ! Is this a sentence ? My. name is.')
['OMG is this a question !', 'Is this a sentence ?', 'My.']
</snippet></ROW><ROW><id>3549150</id><snippet>name is.</snippet></ROW><ROW><id>3549150</id><snippet>^$</snippet></ROW><ROW><id>3549200</id><snippet>bit_length</snippet></ROW><ROW><id>3549200</id><snippet>&gt;&gt;&gt; i = 456
&gt;&gt;&gt; bitstring.BitString(uint=i, length=(i.bit_length()+7)/8*8).bytes
'\x01\xc8'
</snippet></ROW><ROW><id>3549200</id><snippet>&gt;&gt;&gt; s = bitstring.BitString(hex=hex(i))
&gt;&gt;&gt; ('0x0' + s if s.len%8 else s).bytes
'\x01\xc8'
</snippet></ROW><ROW><id>3549264</id><snippet>&gt;&gt;&gt; "name=" in "uname="
True
</snippet></ROW><ROW><id>3549337</id><snippet>sys.std[out|err]</snippet></ROW><ROW><id>3549337</id><snippet>class StdoutWrapper(object):
    def __init__(self, outwidget):
        self.widget = outwidget
        self.widget.setReadOnly(True) # assuming QPlainTextEdit
        self.widget.hide()

    def write(self, s):
        self.widget.show()
        self.widget.appendPlainText(s) # again assuming QPlainTextEdit
</snippet></ROW><ROW><id>3549337</id><snippet>import sys

sys.stdout = StdoutWrapper(yourwidget)
# similar for stderr, but you might want an error dialog or make 
# the text stand out using appendHtml
</snippet></ROW><ROW><id>3549741</id><snippet>import MySQLdb
column = str(MySQLdb.escape_string(row[1]))
query = "update myTable set %(column)s = %%s where ID = %%s" % dict(column = column) 
cursor2.execute(query, [row[3], row[0]])
</snippet></ROW><ROW><id>3549741</id><snippet>column = str(MySQLdb.escape_string(row[1]))
</snippet></ROW><ROW><id>3549741</id><snippet>query = "update myTable set %(column)s = %%s where ID = %%s" % dict(column = column) 
</snippet></ROW><ROW><id>3549741</id><snippet>column</snippet></ROW><ROW><id>3549741</id><snippet>dict(column = column)</snippet></ROW><ROW><id>3549741</id><snippet>{'column': column}</snippet></ROW><ROW><id>3549741</id><snippet>%%</snippet></ROW><ROW><id>3549741</id><snippet>cursor2.execute(query, [row[3], row[0]])
</snippet></ROW><ROW><id>3549741</id><snippet>update myTable set column_name = %s where ID = %s</snippet></ROW><ROW><id>3549755</id><snippet>_expensive_to_compute = None
def get_expensive_to_compute():
    global _expensive_to_compute
    if _expensive_to_compute is None:
        _expensive_to_compute = do_computation()
    return _expensive_to_compute
</snippet></ROW><ROW><id>3549755</id><snippet>@memoize</snippet></ROW><ROW><id>3549968</id><snippet>enumerate</snippet></ROW><ROW><id>3549968</id><snippet>for index, name in enumerate(nameList):
    ...
</snippet></ROW><ROW><id>3549972</id><snippet>L</snippet></ROW><ROW><id>3549972</id><snippet>t</snippet></ROW><ROW><id>3549972</id><snippet>any(t.lower()==w.lower() for w in L)
</snippet></ROW><ROW><id>3549972</id><snippet>lt = t.lower()
any(lt==w.lower() for w in L)
</snippet></ROW><ROW><id>3549972</id><snippet>lol</snippet></ROW><ROW><id>3549972</id><snippet>t</snippet></ROW><ROW><id>3549972</id><snippet>longest = max((L for L in lol if any(lt==w.lower() for w in L)), key=len)
</snippet></ROW><ROW><id>3549972</id><snippet>t</snippet></ROW><ROW><id>3550034</id><snippet>original_input = builtins.input

def input(prompt=''):  
    return original_input(prompt).rstrip('\r')

input.__doc__ = original_input.__doc__

builtins.input = input
</snippet></ROW><ROW><id>3550359</id><snippet>&gt;&gt;&gt; s = s[0:-2] + "A" + s[-1:]
&gt;&gt;&gt; print s
abcdefghijAl
</snippet></ROW><ROW><id>3550359</id><snippet>&gt;&gt;&gt; rindex = -2 #Second to the last letter
&gt;&gt;&gt; s = s[0:rindex] + "A" + s[rindex+1:]
&gt;&gt;&gt; print s
abcdefghijAl
</snippet></ROW><ROW><id>3550359</id><snippet>&gt;&gt;&gt; s = "abcdefghijkl"
&gt;&gt;&gt; repl_str = "A"
&gt;&gt;&gt; rindex = -4 #Start at 4th character from the end
&gt;&gt;&gt; repl = 3 #Replace 3 characters
&gt;&gt;&gt; s = s[0:rindex] + (repl_str * repl) + s[rindex+repl:]
&gt;&gt;&gt; print s
abcdefghAAAl
</snippet></ROW><ROW><id>3550436</id><snippet>data</snippet></ROW><ROW><id>3550436</id><snippet>import itertools as it

d = [k+1 for k, L in
         ((k, len(list(g))) for k, g in it.groupby(data,key=lambda x:x//10))
     if L&gt;=3]
</snippet></ROW><ROW><id>3550436</id><snippet>data</snippet></ROW><ROW><id>3550436</id><snippet>sorted(data)</snippet></ROW><ROW><id>3550436</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3550436</id><snippet>data</snippet></ROW><ROW><id>3550436</id><snippet>def divby10(x): return x//10

distribution = []
for k, g in it.groupby(data, key=divby10):
    L = len(list(g))
    if L &lt; 3: continue
    distribution.append(k+1)
</snippet></ROW><ROW><id>3550436</id><snippet>groupby</snippet></ROW><ROW><id>3550436</id><snippet>key=</snippet></ROW><ROW><id>3550436</id><snippet>groupby</snippet></ROW><ROW><id>3550436</id><snippet>len(list(g))</snippet></ROW><ROW><id>3550500</id><snippet>__dict__</snippet></ROW><ROW><id>3550500</id><snippet>__eq__</snippet></ROW><ROW><id>3550500</id><snippet>__eq__</snippet></ROW><ROW><id>3550500</id><snippet>__eq__</snippet></ROW><ROW><id>3550515</id><snippet>def mix(s, c=' ', n=1):
    return ''.join(s[i:i+n]+c for i in range(0,len(s),n))
</snippet></ROW><ROW><id>3550954</id><snippet>#!/usr/bin/env ruby

module Kernel
  def vars(b)
    Hash[
      (b.eval('local_variables')-[:_]).
      map{|v| [v,b.eval(v.to_s)]}
    ]
  end
end

a = 10
puts vars(binding)
</snippet></ROW><ROW><id>3551477</id><snippet>TextEntryDialog</snippet></ROW><ROW><id>3551477</id><snippet>import wx

class TextEntryDialog(wx.Dialog):
    def __init__(self, parent, title, caption):
        style = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        super(TextEntryDialog, self).__init__(parent, -1, title, style=style)
        text = wx.StaticText(self, -1, caption)
        input = wx.TextCtrl(self, -1, style=wx.TE_MULTILINE)
        input.SetInitialSize((400, 300))
        buttons = self.CreateButtonSizer(wx.OK|wx.CANCEL)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(text, 0, wx.ALL, 5)
        sizer.Add(input, 1, wx.EXPAND|wx.ALL, 5)
        sizer.Add(buttons, 0, wx.EXPAND|wx.ALL, 5)
        self.SetSizerAndFit(sizer)
        self.input = input
    def SetValue(self, value):
        self.input.SetValue(value)
    def GetValue(self):
        return self.input.GetValue()

if __name__ == '__main__':
    app = wx.PySimpleApp()
    dialog = TextEntryDialog(None, 'Title', 'Caption')
    dialog.Center()
    dialog.SetValue('Value')
    if dialog.ShowModal() == wx.ID_OK:
        print dialog.GetValue()
    dialog.Destroy()
    app.MainLoop()
</snippet></ROW><ROW><id>3551528</id><snippet>cursor._rows</snippet></ROW><ROW><id>3551528</id><snippet>_rows</snippet></ROW><ROW><id>3551528</id><snippet>cursor</snippet></ROW><ROW><id>3551528</id><snippet>cursor</snippet></ROW><ROW><id>3551528</id><snippet>def start(self,cursor):
    recs = self.get_recs(cursor)  
    doms = self.get_doms(cursor)  
    print(recs)
    print(doms)
def get_doms(self,cursor):
    cursor.execute("select domain from domains")
    doms = [row[0] for row in cursor]
    return doms

def get_recs(self,cursor):
    cursor.execute("select * from records")
    recs=[list(row) for row in cursor]
    return recs
</snippet></ROW><ROW><id>3551699</id><snippet>{{ myvariable|safe }}
</snippet></ROW><ROW><id>3551699</id><snippet>|safe</snippet></ROW><ROW><id>3551699</id><snippet>{% autoescape off %}
blah {{myvariable}} blah {{myothervariable}}
{% endautoescape %}
</snippet></ROW><ROW><id>3551701</id><snippet>import difflib

&gt;&gt;&gt; a = 'alex is a buff dude'
&gt;&gt;&gt; b = 'a;exx is a buff dud'
&gt;&gt;&gt; difflib.SequenceMatcher(None, a, b).ratio()

0.89473684210526316
</snippet></ROW><ROW><id>3551808</id><snippet>l = [('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4, 5)]
print zip(*l)
</snippet></ROW><ROW><id>3552024</id><snippet>[buildout]
eggs-directory = /home/reinout/.buildout/eggs
download-cache = /home/reinout/.buildout/downloads
extends-cache = /home/reinout/.buildout/configs
</snippet></ROW><ROW><id>3552275</id><snippet>self.date</snippet></ROW><ROW><id>3552275</id><snippet>fromdayofyear</snippet></ROW><ROW><id>3552275</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3552275</id><snippet>daytime</snippet></ROW><ROW><id>3552275</id><snippet>cls</snippet></ROW><ROW><id>3552275</id><snippet>class daytime(datetime.datetime):

    @property
    def dayofyear(self):
        return (self.date() - datetime.date(self.year, 1, 1)).days + 1

    @classmethod
    def fromdayofyear(cls, year, dayofyear):
        dt = datetime.datetime(year, 1, 1) + datetime.timedelta(dayofyear-1)
        return cls(dt.year, dt.month, dt.day)
</snippet></ROW><ROW><id>3552356</id><snippet>django.core.urlresolvers.resolve</snippet></ROW><ROW><id>3552356</id><snippet>django.core.urlresolvers.Resolver404</snippet></ROW><ROW><id>3552356</id><snippet>REFERER</snippet></ROW><ROW><id>3552356</id><snippet>resolve</snippet></ROW><ROW><id>3552356</id><snippet>resolve</snippet></ROW><ROW><id>3552356</id><snippet>REFERER</snippet></ROW><ROW><id>3552356</id><snippet>resolve</snippet></ROW><ROW><id>3552356</id><snippet># code not tested, YMMV, etc. 

from urlparse import urlparse

from django.core import urlresolvers

HOME = 'http://my.site.com/'

def generate_back_url(url, default_url=HOME):
    parsed = urlparse(url)
    if parsed.netloc == 'my.site.com':
        try:
            urlresolvers.resolve(parsed.path)
        except urlresolvers.Resolver404:
            back_url = default_url
        else:
            back_url = url
    else:
        back_url = default_url
    return back_url

# ...

def my_view(request):
    # ...
    # truth be told I'm not sure whether the .get() is necessary, sorry.
    back_url = generate_back_url(request.META.get('REFERER', HOME))
    # ...
</snippet></ROW><ROW><id>3552462</id><snippet>import gtk
import wnck
import glib

class WindowTitle(object):
    def __init__(self):
        self.title = None
        glib.timeout_add(100, self.get_title)

    def get_title(self):
        try:
            title = wnck.screen_get_default().get_active_window().get_name()
            if self.title != title:
                self.title  = title
                print title
        except AttributeError:
            pass
        return True

WindowTitle()
gtk.main()
</snippet></ROW><ROW><id>3552462</id><snippet>from subprocess import PIPE, Popen
import time

title = ''
root_check = ''

while True:
    time.sleep(0.6)
    root = Popen(['xprop', '-root'],  stdout=PIPE)

    if root.stdout != root_check:
        root_check = root.stdout

        for i in root.stdout:
            if '_NET_ACTIVE_WINDOW(WINDOW):' in i:
                id_ = i.split()[4]
                id_w = Popen(['xprop', '-id', id_], stdout=PIPE)

        for j in id_w.stdout:
            if 'WM_ICON_NAME(STRING)' in j:
                if title != j.split()[2]:
                    title = j.split()[2]
                    print "current window title: %s" % title
</snippet></ROW><ROW><id>3552505</id><snippet>with open(keyfile, 'rb') as f:
    key = f.read()
encrypt = 1
cipher = Cipher(alg='des_ede3_ecb', key=key, op=encrypt, iv='\0'*16)
ciphertext = cipher.update(plaintext)
ciphertext += cipher.final()
</snippet></ROW><ROW><id>3552505</id><snippet>None</snippet></ROW><ROW><id>3552662</id><snippet>klog</snippet></ROW><ROW><id>3552662</id><snippet>/dev/tty</snippet></ROW><ROW><id>3552662</id><snippet>wait</snippet></ROW><ROW><id>3552662</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3552662</id><snippet>wait</snippet></ROW><ROW><id>3552662</id><snippet>pwd = getpass.getpass('password:')
</snippet></ROW><ROW><id>3552662</id><snippet>import getpass</snippet></ROW><ROW><id>3552662</id><snippet>klog</snippet></ROW><ROW><id>3552662</id><snippet>-pipe</snippet></ROW><ROW><id>3552662</id><snippet>stdin=subprocess.PIPE</snippet></ROW><ROW><id>3552662</id><snippet>pwd</snippet></ROW><ROW><id>3552662</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3553193</id><snippet>import mechanize
browser = mechanize.Browser()
browser.set_handle_refresh(False)
</snippet></ROW><ROW><id>3553243</id><snippet>m = re.match(regex.new_round, hh_line)
if m:
    # ...
</snippet></ROW><ROW><id>3553243</id><snippet>def process_a(data):
    # ...

def process_b(data):
    # ...

regex_to_process = {
    'regex_a': process_a,
    'regex_b': process_b,
}

for hh_line in &lt;file object&gt;:
    for regex,process in regex_to_process.iteritems():
        m = re.match(regex, hh_line)
        if m:
            process(hh_line)
</snippet></ROW><ROW><id>3553293</id><snippet>@</snippet></ROW><ROW><id>3553293</id><snippet>import pbapi

import webbrowser
import cPickle
import os
import re
import sys
from xml.etree import ElementTree

__author__ = "leoluk"

###############################################
##               CONFIGURATION               ##
###############################################

# File in which the oAuth token will be stored
TOKEN_FILE = "token.txt"

IMAGE_PATH = r"D:\Eigene Dateien\Bilder\SC\foo.png"

IMAGE_RECORD = {
    "type": 'image',
    "uploadfile": '@'+IMAGE_PATH,

    "title": "My title", # &lt;---
    "description": "My description", # &lt;---
}

ALBUM_NAME = None # default album if None


API_KEY = "149[..]"
API_SECRET = "528[...]"


###############################################
##                   SCRIPT                  ##
###############################################

api = pbapi.PbApi(API_KEY, API_SECRET)

api.pb_request.connection.cache = None

# Test if service online
api.reset().ping().post()

result = api.reset().ping().post().response_string

ET = ElementTree.fromstring(result)

if ET.find('status').text != 'OK':
    sys.stderr.write("error: Ping failed \n"+result)
    sys.exit(-1)

try:
    # If there is already a saved oAuth token, no need for a new one
    api.username, api.pb_request.oauth_token = cPickle.load(open(TOKEN_FILE))
except (ValueError, KeyError, IOError, TypeError):
    # If error, there's no valid oAuth token

    # Getting request token
    api.reset().login().request().post().load_token_from_response()

    # Requesting user permission (you have to login with your account)
    webbrowser.open_new_tab(api.login_url)

    raw_input("Press Enter when you finished access permission. ")

    #Getting oAuth token
    api.reset().login().access().post().load_token_from_response()


# This is needed for getting the right subdomain
infos = api.reset().album(api.username).url().get().response_string

ET = ElementTree.fromstring(infos)

if ET.find('status').text != 'OK':
    # Remove the invalid oAuth
    os.remove(TOKEN_FILE)
    # This happend is user deletes the oAuth permission online
    sys.stderr.write("error: Permission deleted. Please re-run.")
    sys.exit(-1)

# Fresh values for username and subdomain
api.username = ET.find('content/username').text
api.set_subdomain(ET.find('content/subdomain/api').text)

# Default album name
if not ALBUM_NAME:
    ALBUM_NAME = api.username

# Debug :-)
print "User: %s" % api.username

# Save the new, valid oAuth token
cPickle.dump((api.username, api.oauth_token), open(TOKEN_FILE, 'w'))

# Posting the image
result = (api.reset().album(ALBUM_NAME).
          upload(IMAGE_RECORD).post().response_string)

ET = ElementTree.fromstring(result)

if ET.find('status').text != 'OK':
    sys.stderr.write("error: File upload failed \n"+result)
    sys.exit(-1)


# Now, as an example what you could do now, open the image in the browser

webbrowser.open_new_tab(ET.find('content/browseurl').text)
</snippet></ROW><ROW><id>3553367</id><snippet>+</snippet></ROW><ROW><id>3553367</id><snippet>|</snippet></ROW><ROW><id>3553367</id><snippet>result = (user_id &lt;&lt; 32) + timestamp
</snippet></ROW><ROW><id>3553367</id><snippet>&gt;&gt;&gt; x = 0b0010
&gt;&gt;&gt; y = 0b0101
&gt;&gt;&gt; (x &lt;&lt; 4) + y
37
&gt;&gt;&gt; 0b00100101
37
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3553391</id><snippet>time.time</snippet></ROW><ROW><id>3553517</id><snippet>fetch()</snippet></ROW><ROW><id>3553517</id><snippet>db.Query()</snippet></ROW><ROW><id>3553517</id><snippet>put(list_of_entities)</snippet></ROW><ROW><id>3553517</id><snippet>voters = db.GqlQuery("SELECT * FROM Voter WHERE lastname = :1", 'AGEE').fetch(10)

for voter in voters:
    voter.email = 'testemail@testemail.com'
db.put(voters)
</snippet></ROW><ROW><id>3553517</id><snippet>fetch()</snippet></ROW><ROW><id>3553517</id><snippet>put()</snippet></ROW><ROW><id>3553517</id><snippet>voters_query = db.GqlQuery("SELECT * FROM Voter WHERE lastname = :1", 'AGEE')

for voter in voters_query:
    voter.email = 'testemail@testemail.com'
    voter.put()
</snippet></ROW><ROW><id>3553517</id><snippet>fetch()</snippet></ROW><ROW><id>3553517</id><snippet>fetch()</snippet></ROW><ROW><id>3553549</id><snippet>ipull[]</snippet></ROW><ROW><id>3553634</id><snippet>py2app</snippet></ROW><ROW><id>3553634</id><snippet>MACOSX_DEPLOYMENT_TARGET</snippet></ROW><ROW><id>3553634</id><snippet>10.4u</snippet></ROW><ROW><id>3553634</id><snippet>universal</snippet></ROW><ROW><id>3553634</id><snippet>Xcode</snippet></ROW><ROW><id>3553634</id><snippet>i386</snippet></ROW><ROW><id>3553634</id><snippet>ppc</snippet></ROW><ROW><id>3553634</id><snippet>Distutils</snippet></ROW><ROW><id>3553634</id><snippet>Distutils</snippet></ROW><ROW><id>3553634</id><snippet>setup.py</snippet></ROW><ROW><id>3553634</id><snippet>Distutils</snippet></ROW><ROW><id>3553634</id><snippet>easy_install</snippet></ROW><ROW><id>3553634</id><snippet>pip</snippet></ROW><ROW><id>3553634</id><snippet>Distutils</snippet></ROW><ROW><id>3553634</id><snippet>-arch x86_64</snippet></ROW><ROW><id>3553634</id><snippet>i386</snippet></ROW><ROW><id>3553634</id><snippet>ppc</snippet></ROW><ROW><id>3553634</id><snippet>IDLE</snippet></ROW><ROW><id>3553634</id><snippet>Tkinter</snippet></ROW><ROW><id>3553634</id><snippet>PIL</snippet></ROW><ROW><id>3553634</id><snippet>MySQLdb</snippet></ROW><ROW><id>3553773</id><snippet>getmembers</snippet></ROW><ROW><id>3553773</id><snippet>inspect</snippet></ROW><ROW><id>3553773</id><snippet>(key, value)</snippet></ROW><ROW><id>3553773</id><snippet>obj.__dict__</snippet></ROW><ROW><id>3553773</id><snippet>getattr</snippet></ROW><ROW><id>3553773</id><snippet>obj.__dict__</snippet></ROW><ROW><id>3554146</id><snippet>mechanize.urlopen</snippet></ROW><ROW><id>3554146</id><snippet>timeout</snippet></ROW><ROW><id>3554146</id><snippet>mechanize.urlopen('http://url/', timeout=30.0)</snippet></ROW><ROW><id>3554146</id><snippet>mechanize.urlopen</snippet></ROW><ROW><id>3554146</id><snippet>def urlopen(url, data=None, timeout=_sockettimeout._GLOBAL_DEFAULT_TIMEOUT):
    ...
    return _opener.open(url, data, timeout)
</snippet></ROW><ROW><id>3554146</id><snippet>mechanize._sockettimeout._GLOBAL_DEFAULT_TIMEOUT</snippet></ROW><ROW><id>3554146</id><snippet>socket</snippet></ROW><ROW><id>3554146</id><snippet>import socket

try:
    _GLOBAL_DEFAULT_TIMEOUT = socket._GLOBAL_DEFAULT_TIMEOUT
except AttributeError:
    _GLOBAL_DEFAULT_TIMEOUT = object()
</snippet></ROW><ROW><id>3554285</id><snippet>importlib</snippet></ROW><ROW><id>3554285</id><snippet>__import__</snippet></ROW><ROW><id>3554285</id><snippet>import sys
module_name = "web1.%s.models" % app
__import__(module_name)
models = sys.modules[module_name]
models.modelname
</snippet></ROW><ROW><id>3554380</id><snippet>name1 = "John"
name2 = "Mary"
"hello, #{name1}.  Where is #{name2}?"
</snippet></ROW><ROW><id>3554380</id><snippet>"hello, %s.  Where is %s?" % ["John", "Mary"]
</snippet></ROW><ROW><id>3554398</id><snippet>super(B,self)</snippet></ROW><ROW><id>3554398</id><snippet>B</snippet></ROW><ROW><id>3554398</id><snippet>A</snippet></ROW><ROW><id>3554398</id><snippet>import cPickle
class A(object):
    def __init__(self):
        self.value=1
    def __getstate__(self):
        return self.value
    def __setstate__(self, state):
        self.value = state

class B(A):
    def __init__(self):
        super(B,self).__init__()
        self.anothervalue=2
    def __getstate__(self):
        return (super(B,self).__getstate__(), self.anothervalue)
    def __setstate__(self, state):
        superstate, self.anothervalue = state
        super(B,self).__setstate__(superstate)

b=B()
with open('a','w') as f:
    cPickle.dump(b,f)


with open('a','r') as f:
    c=cPickle.load(f)
print(b.value)
print(b.anothervalue)
</snippet></ROW><ROW><id>3554836</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>3554836</id><snippet>&gt;&gt;&gt; urlparse.urljoin("http://google.com/some/path/", "../../img/icon.png")
'http://google.com/img/icon.png'
</snippet></ROW><ROW><id>3555490</id><snippet>import itertools
filtered = itertools.compress(s, b)
</snippet></ROW><ROW><id>3555490</id><snippet>list(itertools.compress(s, b))</snippet></ROW><ROW><id>3555529</id><snippet>&gt;&gt;&gt; from tasks.base import Task1
&gt;&gt;&gt; type(Task1)
&lt;class 'tasks.base.MetaClass'&gt;
&gt;&gt;&gt; from types import TypeType
&gt;&gt;&gt; type(Task1) == TypeType
False
&gt;&gt;&gt; issubclass(type(Task1), TypeType)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3555529</id><snippet>TypeType</snippet></ROW><ROW><id>3555529</id><snippet>tasks.base.MetaClass</snippet></ROW><ROW><id>3555529</id><snippet>TypeType</snippet></ROW><ROW><id>3555529</id><snippet>def _append_class(d, task, base):
    if (issubclass(type(task), types.TypeType) and issubclass(task, base):
</snippet></ROW><ROW><id>3555529</id><snippet>TypeType</snippet></ROW><ROW><id>3555610</id><snippet>Webclient</snippet></ROW><ROW><id>3555610</id><snippet>UploadValues()</snippet></ROW><ROW><id>3555610</id><snippet>UploadString()</snippet></ROW><ROW><id>3555998</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>3555998</id><snippet>import ipdb; ipdb.set_trace()
</snippet></ROW><ROW><id>3556051</id><snippet>subprocess</snippet></ROW><ROW><id>3556207</id><snippet>name, timestamp = oldfilename.split('_', 1)
day, month, timestamp = timestamp.split('-', 2)

newfilename = '%s_%s-%s-%s' % (name, day, month, timestamp)
</snippet></ROW><ROW><id>3556318</id><snippet>pip install -f http://downloads.sourceforge.net/project/matplotlib/matplotlib/matplotlib-1.0/matplotlib-1.0.0.tar.gz matplotlib
</snippet></ROW><ROW><id>3556527</id><snippet>bisect</snippet></ROW><ROW><id>3556527</id><snippet>def find_ge(a, key):
    '''Find smallest item greater-than or equal to key.
    Raise ValueError if no such item exists.
    If multiple keys are equal, return the leftmost.

    '''
    i = bisect_left(a, key)
    if i == len(a):
        raise ValueError('No item found with key at or above: %r' % (key,))
    return a[i]

find_ge(somenumbers, 262139)
</snippet></ROW><ROW><id>3556527</id><snippet>low &gt; high</snippet></ROW><ROW><id>3556527</id><snippet>low == high</snippet></ROW><ROW><id>3556527</id><snippet>num == 3</snippet></ROW><ROW><id>3556527</id><snippet>somenumbers</snippet></ROW><ROW><id>3556672</id><snippet>B[:2,:2] += A
</snippet></ROW><ROW><id>3556672</id><snippet>C = B.copy()
C[:2,:2] += A
</snippet></ROW><ROW><id>3556945</id><snippet>argv</snippet></ROW><ROW><id>3556945</id><snippet>script1.main</snippet></ROW><ROW><id>3556945</id><snippet>script1.main(['-m', 'Carrera'])
</snippet></ROW><ROW><id>3556945</id><snippet>script1.main('-m Carrera'.split())
</snippet></ROW><ROW><id>3557431</id><snippet>__str__</snippet></ROW><ROW><id>3557431</id><snippet>'ascii'</snippet></ROW><ROW><id>3557431</id><snippet>__str__</snippet></ROW><ROW><id>3557431</id><snippet>__str__</snippet></ROW><ROW><id>3557431</id><snippet>print str(x)</snippet></ROW><ROW><id>3557431</id><snippet>s = str(x); print s</snippet></ROW><ROW><id>3557431</id><snippet>str(x)</snippet></ROW><ROW><id>3557431</id><snippet>x.__str__()</snippet></ROW><ROW><id>3557431</id><snippet>print</snippet></ROW><ROW><id>3557431</id><snippet>.encoding</snippet></ROW><ROW><id>3557431</id><snippet>sys.stdout</snippet></ROW><ROW><id>3557431</id><snippet>str(x)</snippet></ROW><ROW><id>3557431</id><snippet>x.__str__()</snippet></ROW><ROW><id>3557431</id><snippet>import sys

DEFAULT_ENCODING = 'UTF-8'  # or whatever you like best

class sic(object):

    def __unicode__(self):  # the "real thing"
        return u'Pel\xe9'

    def __str__(self):      # tries to "look nice"
        return unicode(self).encode(sys.stdout.encoding or DEFAULT_ENCODING,
                                    'replace')

    def __repr__(self):     # must be unambiguous
        return repr(unicode(self))
</snippet></ROW><ROW><id>3557431</id><snippet>__unicode__</snippet></ROW><ROW><id>3557431</id><snippet>print</snippet></ROW><ROW><id>3557431</id><snippet>__str__</snippet></ROW><ROW><id>3557431</id><snippet>__unicode__</snippet></ROW><ROW><id>3557431</id><snippet>print</snippet></ROW><ROW><id>3557431</id><snippet>__repr__</snippet></ROW><ROW><id>3557431</id><snippet>eval</snippet></ROW><ROW><id>3557431</id><snippet>__str__</snippet></ROW><ROW><id>3557431</id><snippet>__repr__</snippet></ROW><ROW><id>3557815</id><snippet>PREFIX</snippet></ROW><ROW><id>3557815</id><snippet>.ttl</snippet></ROW><ROW><id>3557815</id><snippet>.ttl</snippet></ROW><ROW><id>3557815</id><snippet>Validation failed: The @PREFIX directive is not supported, line 1 col 0.</snippet></ROW><ROW><id>3557815</id><snippet>p:given_by [</snippet></ROW><ROW><id>3557815</id><snippet>Validation failed: Expecting a period, semicolon, comma, close-bracket, or close-brace but found '/', line 31 col 33.
</snippet></ROW><ROW><id>3557815</id><snippet>p:source/Philip_Miller</snippet></ROW><ROW><id>3557815</id><snippet>.ttl</snippet></ROW><ROW><id>3558100</id><snippet>__import__</snippet></ROW><ROW><id>3558100</id><snippet>__import__</snippet></ROW><ROW><id>3558100</id><snippet>__import__</snippet></ROW><ROW><id>3558100</id><snippet>import sys

import __builtin__
_orgimp = __builtin__.__import__

import logging
FORMAT = "%(asctime)-15s %(message)s"
logging.basicConfig(format=FORMAT, level=logging.INFO)

def __import__(name, *a):
  r = sys.modules.get(name)
  if r is not None: return r
  logging.info('import bgn %s', name)
  r = _orgimp(name, *a)
  logging.info('import end %s', name)
  return r
__builtin__.__import__ = __import__

import pyparsing
</snippet></ROW><ROW><id>3558100</id><snippet>2010-08-24 08:36:39,649 import bgn pyparsing
2010-08-24 08:36:39,652 import bgn weakref
2010-08-24 08:36:39,652 import bgn _weakref
2010-08-24 08:36:39,653 import end _weakref
2010-08-24 08:36:39,653 import end weakref
2010-08-24 08:36:39,654 import bgn copy
2010-08-24 08:36:39,655 import bgn org.python.core
2010-08-24 08:36:39,656 import end copy
2010-08-24 08:36:39,675 import end pyparsing
</snippet></ROW><ROW><id>3558100</id><snippet>org.python.core</snippet></ROW><ROW><id>3558100</id><snippet>copy</snippet></ROW><ROW><id>3558100</id><snippet>try</snippet></ROW><ROW><id>3558100</id><snippet>except</snippet></ROW><ROW><id>3558100</id><snippet>try</snippet></ROW><ROW><id>3558100</id><snippet>finally</snippet></ROW><ROW><id>3558507</id><snippet>class Test:
   def __repr__(self):
       return 'asd'
</snippet></ROW><ROW><id>3558507</id><snippet>http://docs.python.org/reference/datamodel.html#object.__repr__</snippet></ROW><ROW><id>3558606</id><snippet>zip(*a)
</snippet></ROW><ROW><id>3558772</id><snippet>import pickle</snippet></ROW><ROW><id>3558881</id><snippet>import re
s1 = "Fantini, Rauch, C.Straus, Priuli, Bertali: 'Festival Mass at the Imperial Court of Vienna, 1648' (Yorkshire Bach Choir &amp; Baroque Soloists + Baroque Brass of London/Seymour)"
s2 = "Vinci, Leonardo {c.1690-1730}: Arias from Semiramide Riconosciuta, Didone Abbandonata, La Caduta dei Decemviri, Lo Cecato Fauzo, La Festa de Bacco, Catone in Utica. (Maria Angeles Peters sop. w.M.Carraro conducting)"
s1w = re.findall('\w+', s1.lower())
s2w = re.findall('\w+', s2.lower())
</snippet></ROW><ROW><id>3558881</id><snippet>collections.Counter</snippet></ROW><ROW><id>3558881</id><snippet>from collections import Counter
s1cnt = Counter(s1w)
s2cnt = Counter(s2w)
</snippet></ROW><ROW><id>3558881</id><snippet>set.intersection</snippet></ROW><ROW><id>3558881</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>3558881</id><snippet>common = set(s1w).intersection(s2w) 
# returns set(['c'])

import difflib
common_ratio = difflib.SequenceMatcher(None, s1w, s2w).ratio()
print '%.1f%% of words common.' % (100*common_ratio)
</snippet></ROW><ROW><id>3558881</id><snippet>3.4% of words similar.</snippet></ROW><ROW><id>3558967</id><snippet>Object</snippet></ROW><ROW><id>3558967</id><snippet>object.py</snippet></ROW><ROW><id>3558967</id><snippet>object_info.Object</snippet></ROW><ROW><id>3558967</id><snippet>GenericObject</snippet></ROW><ROW><id>3558967</id><snippet>GenericBase</snippet></ROW><ROW><id>3558967</id><snippet>object.py</snippet></ROW><ROW><id>3558967</id><snippet>Object</snippet></ROW><ROW><id>3558967</id><snippet>player = object_info.Object(BurglaryConstants.SCREEN_WIDTH/2, BurglaryConstants.SCREEN_HEIGHT/2, '@', libtcod.white)
</snippet></ROW><ROW><id>3559030</id><snippet>lines = readin.readlines()
out1.write(''.join(lines[5:67]))
out2.write(''.join(lines[89:111]))
</snippet></ROW><ROW><id>3559120</id><snippet>mymod</snippet></ROW><ROW><id>3559120</id><snippet>mdir.mymod</snippet></ROW><ROW><id>3559120</id><snippet>mydir</snippet></ROW><ROW><id>3559120</id><snippet>__init__.py</snippet></ROW><ROW><id>3559120</id><snippet>mymod.py</snippet></ROW><ROW><id>3559120</id><snippet>mydir</snippet></ROW><ROW><id>3559120</id><snippet>&gt;&gt;&gt; import mydir.mymod
&gt;&gt;&gt; from mydir import mymod
&gt;&gt;&gt; mymod == mydir.mymod
True
</snippet></ROW><ROW><id>3559120</id><snippet>mymod</snippet></ROW><ROW><id>3559120</id><snippet>mydir.mymod</snippet></ROW><ROW><id>3559120</id><snippet>&gt;&gt;&gt; mymod
&lt;module 'mydir.mymod' from 'mydir\mymod.py'&gt;
&gt;&gt;&gt; mydir.mymod
&lt;module 'mydir.mymod' from 'mydir\mymod.py'&gt;
</snippet></ROW><ROW><id>3559120</id><snippet>sys.path</snippet></ROW><ROW><id>3559120</id><snippet>mydir</snippet></ROW><ROW><id>3559120</id><snippet>mymod</snippet></ROW><ROW><id>3559120</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append( "d:/zrodla/stack/mydir" )
# note that importing mymod (and not mydir.mymod) prior to appending mydir to 
# path would cause an error
&gt;&gt;&gt; mymod2
&lt;module 'mymod' from 'd:/zrodla/stack/mydir\mymod.pyc'&gt;
&gt;&gt;&gt; mymod2 == mydir.mymod
False
</snippet></ROW><ROW><id>3559120</id><snippet>sys.modules</snippet></ROW><ROW><id>3559120</id><snippet>&gt;&gt;&gt; [x for x in sys.modules.keys() if "my" in x]
['mydir', 'mymod', 'mydir.mymod']
</snippet></ROW><ROW><id>3559218</id><snippet>"".join([(((c in this.d) and this.d[c]) or c) for c in this.s])
</snippet></ROW><ROW><id>3559218</id><snippet>result = []
for c in this.s:
   result.append(((c in this.d) and this.d[c]) or c)
print "".join(result)
</snippet></ROW><ROW><id>3559218</id><snippet>and</snippet></ROW><ROW><id>3559218</id><snippet>or</snippet></ROW><ROW><id>3559218</id><snippet>if</snippet></ROW><ROW><id>3559218</id><snippet>else</snippet></ROW><ROW><id>3559218</id><snippet>result = []
for c in this.s:
   if c in this.d:
      result.append(this.d[c])
   else:
      result.append(c)
print "".join(result)
</snippet></ROW><ROW><id>3559364</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.sample(range(30), 4)
[3, 1, 21, 19]
</snippet></ROW><ROW><id>3559567</id><snippet>from decimal import *
getcontext().prec = 40
Decimal(1).exp()
</snippet></ROW><ROW><id>3559567</id><snippet>Decimal('2.718281828459045235360287471352662497757')
</snippet></ROW><ROW><id>3559574</id><snippet>sys.argv</snippet></ROW><ROW><id>3559574</id><snippet>import sys</snippet></ROW><ROW><id>3559574</id><snippet>blah*.txt</snippet></ROW><ROW><id>3559600</id><snippet>newstr = oldstr.replace("M", "")
</snippet></ROW><ROW><id>3559600</id><snippet>midlen = len(oldstr)/2
newstr = oldstr[:midlen] + oldstr[midlen+1:]
</snippet></ROW><ROW><id>3559600</id><snippet>\0</snippet></ROW><ROW><id>3559671</id><snippet>import os.path
os.path.isfile(filename)
</snippet></ROW><ROW><id>3559916</id><snippet>&gt;&gt;&gt; def flatten(lst):
    return sum( ([x] if not isinstance(x, (list, tuple)) else flatten(x)
             for x in lst), [] )

&gt;&gt;&gt; def modify(lst):
    return [tuple(flatten(x)) for x in lst]

&gt;&gt;&gt; x = [('AAA', '1-1', 1, (1.11, (2.22, 3.33))), ('BBB', '2-2', 2, (4.44, (5.55, 6.66))), ('CCC', '3-3', 3, (7, (8, 9)))]
&gt;&gt;&gt; modify(x)
[('AAA', '1-1', 1, 1.11, 2.22, 3.33), ('BBB', '2-2', 2, 4.44, 5.55, 6.66), ('CCC', '3-3', 3, 7, 8, 9)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3559976</id><snippet>split</snippet></ROW><ROW><id>3559976</id><snippet>enumerate</snippet></ROW><ROW><id>3559976</id><snippet>datafile = open('C:\\middlelist3.txt', 'r')

smallerdataset = open('C:\\nocommas.txt', 'w')

for counter, line in enumerate(datafile):
    print counter
    smallerdataset.write(line.split(',', 1)[0])   

smallerdataset.close()
</snippet></ROW><ROW><id>3559976</id><snippet>with</snippet></ROW><ROW><id>3559976</id><snippet>with open('C:\\middlelist3.txt') as datafile:
    list = (line.split(',', 1)[0] for line in datafile)
    with open('C:\\nocommas.txt', 'w') as smallfile:
        smallfile.writelines(list)
</snippet></ROW><ROW><id>3560458</id><snippet>yview</snippet></ROW><ROW><id>3560458</id><snippet>see</snippet></ROW><ROW><id>3560458</id><snippet>class App(Tkinter.Tk):
    def __init__(self):
        Tkinter.Tk.__init__(self)
        self.entry = Tkinter.Entry()
        self.listbox = Tkinter.Listbox()
        self.entry.pack(side="top", fill="x")
        self.listbox.pack(side="top", fill="both", expand=True)
        for i in range(100):
            self.listbox.insert("end", "item %s" % i)

        self.entry.bind("&lt;Down&gt;", self.OnEntryDown)
        self.entry.bind("&lt;Up&gt;", self.OnEntryDown)

    def OnEntryDown(self, event):
        self.listbox.yview_scroll(1,"units")

    def OnEntryUP(self, event):
        self.listbox.yview_scroll(-1,"units")
</snippet></ROW><ROW><id>3560946</id><snippet>install-headers=python/??
</snippet></ROW><ROW><id>3560946</id><snippet>[install]
install-base=$HOME
install-purelib=python/lib
install-platlib=python/lib.$PLAT
install-scripts=python/scripts
install-headers=python/include
install-data=python/data
</snippet></ROW><ROW><id>3561009</id><snippet>&lt;?php
$lst = array('a', 'b', 'c');
unset($lst[1]);
foreach ($lst as $i =&gt; $val) {
        echo "$i $val \n";
}
foreach (array_values($lst) as $i =&gt; $val) {
        echo "$i $val \n";
}
?&gt;
</snippet></ROW><ROW><id>3561009</id><snippet>0 a 
2 c 
0 a 
1 c 
</snippet></ROW><ROW><id>3561039</id><snippet>pywinauto</snippet></ROW><ROW><id>3561039</id><snippet>pywinauto.controls.HwndWrapper.DragMouse(button='left', pressed='', 
                                         press_coords=(0, 0), 
                                         release_coords=(0, 0))
</snippet></ROW><ROW><id>3561265</id><snippet>delta = dateTo - dateFrom

for delta_day in range(0, delta.days+1): # Or use xrange in Python 2.x
    print dateFrom + datetime.timedelta(delta_day)
</snippet></ROW><ROW><id>3561265</id><snippet>str</snippet></ROW><ROW><id>3561265</id><snippet>date</snippet></ROW><ROW><id>3561265</id><snippet>'%Y-%m-%d'</snippet></ROW><ROW><id>3561265</id><snippet>[dateFrom + datetime.timedelta(delta_day) for delta_day in range(0, delta.days+1)]
</snippet></ROW><ROW><id>3561265</id><snippet>[...]</snippet></ROW><ROW><id>3561265</id><snippet>(...)</snippet></ROW><ROW><id>3561265</id><snippet>def gen_days_inclusive(start_date, end_date):
    delta_days = (end_date - start_date).days
    for day in xrange(delta_days + 1):
        yield start_date + datetime.timedelta(day)
</snippet></ROW><ROW><id>3561299</id><snippet>indata = open(from_file).read()
</snippet></ROW><ROW><id>3561526</id><snippet>blank=True</snippet></ROW><ROW><id>3561526</id><snippet>ManyToManyField</snippet></ROW><ROW><id>3561526</id><snippet>class Article(models.Model):
    tags = models.ManyToManyField(ArticleTag, blank=True, 
        related_name="articles")
</snippet></ROW><ROW><id>3561584</id><snippet>\x??</snippet></ROW><ROW><id>3561584</id><snippet>&gt;&gt;&gt; '\x68\x65\x6c\x6c\x6f'
'hello'
</snippet></ROW><ROW><id>3561584</id><snippet>bytearray</snippet></ROW><ROW><id>3561584</id><snippet>ord</snippet></ROW><ROW><id>3561584</id><snippet>struct</snippet></ROW><ROW><id>3561584</id><snippet>&gt;&gt;&gt; vals = [12, 0, 0, 0, 0, 0, 0, 0, 7, 0, 36, 100]
&gt;&gt;&gt; b = bytearray(vals)
&gt;&gt;&gt; b
bytearray(b'\x0c\x00\x00\x00\x00\x00\x00\x00\x07\x00$d')
</snippet></ROW><ROW><id>3561584</id><snippet>str</snippet></ROW><ROW><id>3561584</id><snippet>bytes</snippet></ROW><ROW><id>3561584</id><snippet>&gt;&gt;&gt; str(b)
'\x0c\x00\x00\x00\x00\x00\x00\x00\x07\x00$d'
&gt;&gt;&gt; b[0]
12
&gt;&gt;&gt; b[-1]
100
</snippet></ROW><ROW><id>3561704</id><snippet>"</snippet></ROW><ROW><id>3561704</id><snippet>""" a very long string ...... 
....that can span multiple lines
"""
</snippet></ROW><ROW><id>3561724</id><snippet>string1="""blah blah blah "  some'  thi'ng "  end of string """
</snippet></ROW><ROW><id>3562026</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; test = "i am test-ing., i am test.ing-, i am_, test_ing,"
&gt;&gt;&gt; re.sub(r'([^\w\s]|_)+(?=\s|$)', '', test)
'i am test-ing i am test.ing i am test_ing'
</snippet></ROW><ROW><id>3562026</id><snippet>[^\w\s]|_</snippet></ROW><ROW><id>3562026</id><snippet>\s</snippet></ROW><ROW><id>3562026</id><snippet>$</snippet></ROW><ROW><id>3562026</id><snippet>(?= )</snippet></ROW><ROW><id>3562026</id><snippet>[\W_]+</snippet></ROW><ROW><id>3562026</id><snippet>[^\w\s]|_</snippet></ROW><ROW><id>3562026</id><snippet>[^\w]</snippet></ROW><ROW><id>3562026</id><snippet>[^\s]</snippet></ROW><ROW><id>3562026</id><snippet>|_</snippet></ROW><ROW><id>3562064</id><snippet>character</snippet></ROW><ROW><id>3562064</id><snippet>def countLetters(string, character):
    count = 0
    for char in string:
        if char == character:
            count = count + 1
    print count
</snippet></ROW><ROW><id>3562064</id><snippet>str.count()</snippet></ROW><ROW><id>3562140</id><snippet>city</snippet></ROW><ROW><id>3562140</id><snippet>initargs = 21, 50000
initkwargs = {car: 'blue', make: 'mazda'}

for loop:
    cityThisInstance = people(*initargs, **initkwargs)
</snippet></ROW><ROW><id>3562140</id><snippet>import copy

for loop:
    cityThisInstance = copy.deepcopy(city)
</snippet></ROW><ROW><id>3562415</id><snippet>vars['list%s' % toreplacetype][5] = ...
</snippet></ROW><ROW><id>3562669</id><snippet>A[[[-1],[0],[1]],[2,3,4]] += np.ones((3, 3))
</snippet></ROW><ROW><id>3562669</id><snippet>A[np.ix_([-1,0,1],[2,3,4])] += np.ones((3, 3))
</snippet></ROW><ROW><id>3563211</id><snippet>$ cat sshtest.py
import paramiko
import getpass

pw = getpass.getpass()

client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.WarningPolicy())
client.connect('127.0.0.1', password=pw)

while True:
    cmd = raw_input("Command to run: ")
    if cmd == "":
        break
    chan = client.get_transport().open_session()
    print "running '%s'" % cmd
    chan.exec_command(cmd)
    print "exit status: %s" % chan.recv_exit_status()

client.close()

$ python sshtest.py
Password: 
Command to run: true
running 'true'
exit status: 0
Command to run: false
running 'false'
exit status: 1
Command to run: 
$
</snippet></ROW><ROW><id>3563550</id><snippet>from django.db.models import Count
all_countries = Country.objects.annotate(Count('story')).order_by('-story__count')

for country in all_countries:
    print "Country %s (%s)" % (country.name, country.story__count)
    all_cities = City.objects.filter(country = country).annotate(Count('story')).order_by('-story__count')
    for city in all_cities:
        print "\tCity %s (%s)" % (city.name, city.story__count)
</snippet></ROW><ROW><id>3563550</id><snippet>@register.filter
def get_cities_and_counts(country):
    all_cities = City.objects.filter(country = country).annotate(Count('story')).order_by('-story__count')
    return all_cities
</snippet></ROW><ROW><id>3563550</id><snippet>def story_counts(request, *args, **kwargs):
    all_countries = Country.objects.annotate(Count('story')).order_by('-story__count')
    context = dict(all_countries = all_countries)
    return render_to_response(..., context)
</snippet></ROW><ROW><id>3563550</id><snippet>{% for country in all_countries %}
    &lt;h3&gt;{{ country.name }} ({{ country.story__count }})&lt;/h3&gt;
    {% for city in country|get_cities_and_counts %}
        &lt;p&gt;{{ city.name }} ({{ city.story__count }})&lt;/p&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>3563550</id><snippet>class Country(models.Model):
    name = models.CharField(max_length=50)

    def _get_cities_and_story_counts(self):
        retrun City.objects.filter(country = self).annotate(Count('story')).order_by('-story__count')
    city_story_counts = property(_get_cities_and_story_counts)
</snippet></ROW><ROW><id>3563550</id><snippet>{% for country in all_countries %}
    &lt;h3&gt;{{ country.name }} ({{ country.story__count }})&lt;/h3&gt;
    {% for city in country.city_story_counts %}
        &lt;p&gt;{{ city.name }} ({{ city.story__count }})&lt;/p&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>3563893</id><snippet>/usr/bin/python -c "import MyModule"
</snippet></ROW><ROW><id>3563893</id><snippet>MyModule/__init__.py</snippet></ROW><ROW><id>3563893</id><snippet>__init__.py</snippet></ROW><ROW><id>3563893</id><snippet>__init__.py</snippet></ROW><ROW><id>3563893</id><snippet>from MyModule.myModule.ttLib import …
</snippet></ROW><ROW><id>3564097</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"&gt;&lt;/script&gt;

  &lt;/head&gt;
  &lt;body onload="initialize()"&gt;
    &lt;div id="map_canvas" style="width:400px; height:600px; display:block; float:left"&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;script type="text/javascript"&gt;
var map;
var marker = null;

function initialize() {
  var myLatlng = new google.maps.LatLng(54, -2.0);
  var myOptions = {
    zoom: 6,
    center: myLatlng,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  }
  map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

  google.maps.event.addListener(map, 'click', function(event) {
    placeMarker(event.latLng);
  });
}

function placeMarker(location) {
  var clickedLocation = new google.maps.LatLng(location);

  if(marker == null){
    marker = new google.maps.Marker({
      position: location, 
      map: map
    });
  }else{
    marker.setPosition(location);
  }
  map.setCenter(location);
}
&lt;/script&gt;
</snippet></ROW><ROW><id>3564110</id><snippet>import inspect
ismethod = inspect.getargspec(method).args[0] == 'self'
</snippet></ROW><ROW><id>3564110</id><snippet>import inspect

def decorate(f):
    def detect(*args, **kwargs):
        try:
            members = inspect.getmembers(args[0])
            members = (x[1].im_func for x in members if 'im_func' in dir(x[1]))
            ismethod = detect in members
        except:
            ismethod = False
        print ismethod

        return f(*args, **kwargs)
    return detect

@decorate
def foo():
    pass

class bar(object):
    @decorate
    def baz(self):
        pass

foo() # prints False
bar().baz() # prints True
</snippet></ROW><ROW><id>3564557</id><snippet>br.addheaders = [('user-agent', '   Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.3) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3'),
('accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')]
</snippet></ROW><ROW><id>3564778</id><snippet>script1</snippet></ROW><ROW><id>3564778</id><snippet>...
porsche_container = { myPorsche1, myPorsche2 }
</snippet></ROW><ROW><id>3564778</id><snippet>script 2</snippet></ROW><ROW><id>3564778</id><snippet>import script1
for porsche in script1.porsche_container:
    ...
</snippet></ROW><ROW><id>3565191</id><snippet>L</snippet></ROW><ROW><id>3565191</id><snippet>a</snippet></ROW><ROW><id>3565191</id><snippet>b</snippet></ROW><ROW><id>3565460</id><snippet>.encode("utf8")</snippet></ROW><ROW><id>3565460</id><snippet>.quote()</snippet></ROW><ROW><id>3565460</id><snippet>&gt;&gt;&gt; s = u'1234567890-/:;()$&amp;@".,?!\'[]{}#%^*+=_\|~&lt;&gt;\u20ac\xa3\xa5\u2022.,?!\''
&gt;&gt;&gt; urllib2.quote(s.encode("utf8"))
'1234567890-/%3A%3B%28%29%24%26%40%22.%2C%3F%21%27%5B%5D%7B%7D%23%25%5E%2A%2B%3D_%5C%7C%7E%3C%3E%E2%82%AC%C2%A3%C2%A5%E2%80%A2.%2C%3F%21%27'
</snippet></ROW><ROW><id>3565460</id><snippet>unquote()</snippet></ROW><ROW><id>3565460</id><snippet>decode()</snippet></ROW><ROW><id>3565460</id><snippet>&gt;&gt;&gt; print urllib2.unquote(urllib2.quote(s.encode("utf8")))
1234567890-/:;()$&amp;@".,?!'[]{}#%^*+=_\|~&lt;&gt;â‚¬Â£Â¥â€¢.,?!'
&gt;&gt;&gt; # oops, nasty Â means we've got a utf8 byte stream being treated as an ascii stream
&gt;&gt;&gt; print urllib2.unquote(urllib2.quote(s.encode("utf8"))).decode("utf8")
1234567890-/:;()$&amp;@".,?!'[]{}#%^*+=_\|~&lt;&gt;€£¥•.,?!'
</snippet></ROW><ROW><id>3565748</id><snippet>networkx</snippet></ROW><ROW><id>3565748</id><snippet>from collections import defaultdict
adj_list = defaultdict( set )

for filename in os.listdir( &lt;dir&gt; ):
    with open( filename ) as theFile:
        for line in theFile:
            # parse line into filename, say 'target'
            adj_list[ filename ].add( target )
</snippet></ROW><ROW><id>3566050</id><snippet>Porsche</snippet></ROW><ROW><id>3566050</id><snippet>class Porsche(object):
    def __init__(self, color):
        self.color = color

class PorscheCreator(object):
    def __init__(self):
        self._cars = []
    def create(self, *args, **kwargs):
        porsche = Porsche(*args, **kwargs)
        self._cars.append(porsche)
        return porsche
    def _get_cars(self):
        for each in self._cars:
            yield each
    cars = property(_get_cars)

creator = PorscheCreator()
myPorsche = creator.create('blue')
myPorsche2 = creator.create('red')     
</snippet></ROW><ROW><id>3566050</id><snippet>from script1 import creator

for each in creator.cars:
     print car.color
</snippet></ROW><ROW><id>3566252</id><snippet>In-Reply-To</snippet></ROW><ROW><id>3566252</id><snippet>Message-Id</snippet></ROW><ROW><id>3566735</id><snippet>Refresh()</snippet></ROW><ROW><id>3566735</id><snippet>textCtrl</snippet></ROW><ROW><id>3566823</id><snippet>ar[:,:,i]
</snippet></ROW><ROW><id>3566823</id><snippet>ar[:]</snippet></ROW><ROW><id>3566823</id><snippet>ar</snippet></ROW><ROW><id>3566823</id><snippet>ar[:][:][i]</snippet></ROW><ROW><id>3566823</id><snippet>ar[i]</snippet></ROW><ROW><id>3566965</id><snippet>/Library/Frameworks/Python.framework/Versions/2.6</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>/usr/bin</snippet></ROW><ROW><id>3566965</id><snippet>$ ls -l /usr/bin/easy_install*
-rwxr-xr-x  2 root  wheel  925 Jun 30  2009 /usr/bin/easy_install*
-rwxr-xr-x  1 root  wheel  421 Jun 30  2009 /usr/bin/easy_install-2.5*
-rwxr-xr-x  1 root  wheel  421 Jun 30  2009 /usr/bin/easy_install-2.6*
</snippet></ROW><ROW><id>3566965</id><snippet>/Library/Python/2.x/</snippet></ROW><ROW><id>3566965</id><snippet>/Library/Frameworks/Python.framework/Versions/x.y</snippet></ROW><ROW><id>3566965</id><snippet>lib/pythonx.y/site-packages</snippet></ROW><ROW><id>3566965</id><snippet>bin</snippet></ROW><ROW><id>3566965</id><snippet>bin</snippet></ROW><ROW><id>3566965</id><snippet>/usr/bin/</snippet></ROW><ROW><id>3566965</id><snippet>export PATH="/Library/Frameworks/Python.framework/Versions/2.6/bin:${PATH}"
</snippet></ROW><ROW><id>3566965</id><snippet>.bash_profile</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>easy_install</snippet></ROW><ROW><id>3566965</id><snippet>bin</snippet></ROW><ROW><id>3566965</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions/2.6
$ ls -l bin/easy_install*
-rwxr-xr-x  1 nad  admin  360 Aug 25 07:30 bin/easy_install*
-rwxr-xr-x  1 nad  admin  368 Aug 25 07:30 bin/easy_install-2.6*
</snippet></ROW><ROW><id>3567055</id><snippet>      &lt;form action="/sign" enctype="multipart/form-data" method="post"&gt;
        &lt;div&gt;&lt;label&gt;Message:&lt;/label&gt;&lt;/div&gt;
        &lt;div&gt;&lt;textarea name="content" rows="3" cols="60"&gt;&lt;/textarea&gt;&lt;/div&gt;
        &lt;div&gt;&lt;label&gt;Avatar:&lt;/label&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="file" name="img"/&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="submit" value="Sign Guestbook"&gt;&lt;/div&gt;
      &lt;/form&gt;
</snippet></ROW><ROW><id>3567055</id><snippet>label</snippet></ROW><ROW><id>3567055</id><snippet>def post(self):
    greeting = Greeting()
    if users.get_current_user():
        greeting.author = users.get_current_user()
    greeting.content = self.request.get("content")
    avatar = self.request.get("img")
    greeting.avatar = db.Blob(avatar)
    greeting.put()
    self.redirect('/')
</snippet></ROW><ROW><id>3567055</id><snippet>/sign</snippet></ROW><ROW><id>3567055</id><snippet>do_post</snippet></ROW><ROW><id>3567310</id><snippet>staticBitmap</snippet></ROW><ROW><id>3567310</id><snippet>self.images</snippet></ROW><ROW><id>3567310</id><snippet>self.images.SetBitmap(bmp)</snippet></ROW><ROW><id>3567310</id><snippet>newImage = wx.StaticBitmap(self, id=-1
                           size=(200,150),
                           style= wx.SUNKEN_BORDER
                           bitmap = bmp)


self.hbox.Add(newImage, 1, wx.EXPAND | wx.ALL, 3)
self.SetSizerAndFit(self.sizer)
self.Refresh()
self.Layout()
</snippet></ROW><ROW><id>3567470</id><snippet>datetime.timedelta(seconds=15*60)</snippet></ROW><ROW><id>3567567</id><snippet>class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

    def do_GET(self):
          #implementation here
</snippet></ROW><ROW><id>3567689</id><snippet>_sentinel = object()

class MyClass(object):
  def __init__(self, logger=None):
    self.logger = logger
  def test(self, logger=_sentinel):
    if logger is _sentinel: logger = self.logger

# in case you want to use this inside a function from your module use:
_sentinel = object()
logger = None
def test(logger=_sentinel)
    if logger is _sentinel: logger = globals().get('logger')
</snippet></ROW><ROW><id>3567689</id><snippet>None</snippet></ROW><ROW><id>3567689</id><snippet>None</snippet></ROW><ROW><id>3568084</id><snippet>import wx

class PanelX(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.x = 3

class PanelY(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.y = 4

class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="Main Frame", size = (500,450))

        p = wx.Panel(self)
        nb = wx.Notebook(p)

        nb.AddPage(PanelX(nb), "Panel X")
        nb.AddPage(PanelY(nb), "Panel Y")


        sizer = wx.BoxSizer()
        sizer.Add(nb, 1, wx.EXPAND)
        p.SetSizer(sizer)

        page = nb.GetPage(0)
        print "PanelX's X value is %s" % page.x

        page = nb.GetPage(1)
        print "PanelY's Y value is %s" % page.y       


if __name__ == "__main__":
    app = wx.App()
    MainFrame().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3568154</id><snippet>io_submit()</snippet></ROW><ROW><id>3568154</id><snippet>io_submit()</snippet></ROW><ROW><id>3568154</id><snippet>io_submit</snippet></ROW><ROW><id>3568492</id><snippet>class HeaderViewFilter(QObject):
    # ...
    def eventFilter(self, object, event):
        if event.type() == QEvent.HoverEvent:
            pass # do something useful
            # you could emit a signal here if you wanted

self. filter = HeaderViewFilter()
horizontalHeader().installEventFilter(self.filter)
</snippet></ROW><ROW><id>3568492</id><snippet>self.filter</snippet></ROW><ROW><id>3568492</id><snippet>Qt::WA_Hover</snippet></ROW><ROW><id>3568492</id><snippet>class HeaderViewFilter(QObject):
    def __init__(self, parent, header, *args):
        super(HeaderViewFilter, self).__init__(parent, *args)
        self.header = header
    def eventFilter(self, object, event):
        if event.type() == QEvent.MouseMove:
            logicalIndex = self.header.logicalIndexAt(event.pos())
            # you could emit a signal here if you wanted

self.filter = HeaderViewFilter()
self.horizontalHeader = yourView.horizontalHeader()
self.horizontalHeader.setMouseTracking(1)
self.horizontalHeader.installEventFilter(self.filter)
</snippet></ROW><ROW><id>3568492</id><snippet>QHeaderView</snippet></ROW><ROW><id>3568647</id><snippet>Qt::DisplayRole</snippet></ROW><ROW><id>3568647</id><snippet>Qt::EditRole</snippet></ROW><ROW><id>3568647</id><snippet>Qt::UserRole</snippet></ROW><ROW><id>3568647</id><snippet>Qt::UserRole+1</snippet></ROW><ROW><id>3568647</id><snippet>def setModelData(self, editor, model, index):
    cbIndex = editor.currentIndex()
    model.setData(index, cbIndex, Qt.UserRole+1)
    # we want a nice displayable though
    model.setData(index, countryIndexToDisplayable(cbIndex), Qt.DisplayRole)
</snippet></ROW><ROW><id>3568647</id><snippet>def setEditorData(self, widget, index):
    widget.setCurrentIndex(index.data(Qt.UserRole+1))
</snippet></ROW><ROW><id>3568647</id><snippet>Qt::EditRole</snippet></ROW><ROW><id>3568905</id><snippet>’\0’</snippet></ROW><ROW><id>3568905</id><snippet>printf()</snippet></ROW><ROW><id>3568905</id><snippet>\n</snippet></ROW><ROW><id>3568905</id><snippet>ret = libc.printf("Test\n")
</snippet></ROW><ROW><id>3568910</id><snippet>args</snippet></ROW><ROW><id>3568910</id><snippet>args=['a','b','c']</snippet></ROW><ROW><id>3568910</id><snippet>defaults=(5,)</snippet></ROW><ROW><id>3568910</id><snippet>c</snippet></ROW><ROW><id>3568910</id><snippet>import inspect

def foo(a, b, c=5):
    return a + b + c
def show_defaults(f):
    args, varargs, varkw, defaults = inspect.getargspec(f) 
    if defaults:
        for arg, default in zip(args[-len(defaults):], defaults):
            print('{a} = {d}'.format(a=arg,d=default))

show_defaults(foo)
# c = 5
</snippet></ROW><ROW><id>3569173</id><snippet>type(x) == foo</snippet></ROW><ROW><id>3569173</id><snippet>isinstance(x, foo)</snippet></ROW><ROW><id>3569173</id><snippet>self.values.append((name, description))</snippet></ROW><ROW><id>3569173</id><snippet>self.values[name] = description</snippet></ROW><ROW><id>3569173</id><snippet>newO</snippet></ROW><ROW><id>3569173</id><snippet>def add(self, name, description):
    ...
def add_many(self, name_list, description):
    for name in name_list:
        self.add(name, description)
</snippet></ROW><ROW><id>3569173</id><snippet>def add_names(self, description, *name_list):
    for name in name_list:
        self.add(name, description)
</snippet></ROW><ROW><id>3569241</id><snippet>class Details(db.Model):
    data = db.ReferenceProperty(reference_class=Data)
    has_data = db.BooleanProperty(default=False)

    def add_data(self, data):
        """ Adds data"""
        if not data: return
        self.has_data = True
        self.data = data
        return self.put()
</snippet></ROW><ROW><id>3569555</id><snippet>import lxml.html as lh
import urllib2

def text_tail(node):
    yield node.text
    yield node.tail

url='http://bit.ly/bf1T12'
doc=lh.parse(urllib2.urlopen(url))
for elt in doc.iter('td'):
    text=elt.text_content()
    if text.startswith('Additional  Info'):
        blurb=[text for node in elt.itersiblings('td')
               for subnode in node.iter()
               for text in text_tail(subnode) if text and text!=u'\xa0']
        break
print('\n'.join(blurb))
</snippet></ROW><ROW><id>3569555</id><snippet>import lxml.html as lh
import urllib2

url='http://bit.ly/bf1T12'
doc=lh.parse(urllib2.urlopen(url))

blurb=doc.xpath('//td[child::*[text()="Additional  Info"]]/following-sibling::td/text()')

blurb=[text for text in blurb if text != u'\xa0']
print('\n'.join(blurb))
</snippet></ROW><ROW><id>3569583</id><snippet>import sys

def main(*files):
    # your program's logic goes here

if __name__ == "__main__": #i.e. run directly
    try:
        main(*sys.argv[1:])
    except IOError:
        handle_error()
</snippet></ROW><ROW><id>3569583</id><snippet>__name__</snippet></ROW><ROW><id>3569583</id><snippet>"__main__"</snippet></ROW><ROW><id>3569583</id><snippet>main(file1, file2)</snippet></ROW><ROW><id>3569583</id><snippet>main</snippet></ROW><ROW><id>3569707</id><snippet>br.follow_link</snippet></ROW><ROW><id>3569707</id><snippet>Link</snippet></ROW><ROW><id>3569707</id><snippet>nr=0</snippet></ROW><ROW><id>3569707</id><snippet>br.links()</snippet></ROW><ROW><id>3569707</id><snippet>br.links(url_regex='...')</snippet></ROW><ROW><id>3569707</id><snippet>br.links(text_regex='...')</snippet></ROW><ROW><id>3569707</id><snippet>br.follow_link(nr=num)</snippet></ROW><ROW><id>3569707</id><snippet>num</snippet></ROW><ROW><id>3569707</id><snippet>br.find_link(url='...')</snippet></ROW><ROW><id>3569707</id><snippet>Link</snippet></ROW><ROW><id>3569707</id><snippet>url</snippet></ROW><ROW><id>3569707</id><snippet>br.find_link</snippet></ROW><ROW><id>3569707</id><snippet>br.links</snippet></ROW><ROW><id>3569707</id><snippet>br.follow_link</snippet></ROW><ROW><id>3569707</id><snippet>br.click_link</snippet></ROW><ROW><id>3569707</id><snippet>help(br.find_link)</snippet></ROW><ROW><id>3569707</id><snippet>import mechanize
br = mechanize.Browser()
response=br.open("http://www.example.com/")
target_url='http://www.rfc-editor.org/rfc/rfc2606.txt'
for link in br.links():
    print(link)
    # Link(base_url='http://www.example.com/', url='http://www.rfc-editor.org/rfc/rfc2606.txt', text='RFC 2606', tag='a', attrs=[('href', 'http://www.rfc-editor.org/rfc/rfc2606.txt')])
    print(link.url)
    # http://www.rfc-editor.org/rfc/rfc2606.txt
    if link.url == target_url:
        print('match found')
        # match found            
        break

br.follow_link(link)   # link still holds the last value it had in the loop
print(br.geturl())
# http://www.rfc-editor.org/rfc/rfc2606.txt
</snippet></ROW><ROW><id>3569831</id><snippet>PASV</snippet></ROW><ROW><id>3569831</id><snippet>500 Unknown command</snippet></ROW><ROW><id>3569831</id><snippet>227 Entering Passive Mode</snippet></ROW><ROW><id>3569831</id><snippet>% telnet ftp.mozilla.org 21
Trying 63.245.208.138...
Connected to dm-ftp01.mozilla.org.
Escape character is '^]'.
220-  [greeting omitted]
USER anonymous
331 Please specify the password.
PASS jathanism@
230-  [banner omitted]
230 Login successful.
</snippet></ROW><ROW><id>3569831</id><snippet>PASV
227 Entering Passive Mode (63,245,208,138,202,53)
</snippet></ROW><ROW><id>3569831</id><snippet>FART
500 Unknown command.
</snippet></ROW><ROW><id>3570007</id><snippet>&gt;&gt;&gt; class MyList(list):
...     def __iter__(self):
...         return (x for x in list.__iter__(self) if x is not None)
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; ml = MyList(["cat", "dog", None, "fox"])
&gt;&gt;&gt; for item in ml:
...     print item
... 
cat
dog
fox

&gt;&gt;&gt; [x for x in ml]
['cat', 'dog', 'fox']
&gt;&gt;&gt; list(ml)
['cat', 'dog', 'fox']
</snippet></ROW><ROW><id>3570219</id><snippet>--use_sqlite=true</snippet></ROW><ROW><id>3570219</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>3570235</id><snippet>annotate()</snippet></ROW><ROW><id>3570235</id><snippet>q = A.objects.select_related().annotate(num_B=Count('B'))
print A[0].num_B
</snippet></ROW><ROW><id>3570297</id><snippet>def zipws(path, zip, filename='Data.gdb'):
  for root, dirs, files in os.walk(path):
    if filename in files:
      zip.write(os.path.join(root, filename),
                os.path.join(os.path.basename(root), filename))
      return
</snippet></ROW><ROW><id>3570297</id><snippet>zip.write</snippet></ROW><ROW><id>3570297</id><snippet>return</snippet></ROW><ROW><id>3570297</id><snippet>return</snippet></ROW><ROW><id>3570297</id><snippet>return</snippet></ROW><ROW><id>3570297</id><snippet>def zipws(path, zip, dirname='Data.gdb'):
  for root, dirs, files in os.walk(path):
    if os.path.basename(root) != dirname: continue
    for filename in files:
      zip.write(os.path.join(root, filename),
                os.path.join(dirname, filename))
    return
</snippet></ROW><ROW><id>3570391</id><snippet>wx.EVT_CHAR_HOOK</snippet></ROW><ROW><id>3570391</id><snippet>self.Bind(wx.EVT_CHAR_HOOK, self.onKey)

  ...

def onKey(self, evt):
    if evt.GetKeyCode() == wx.WXK_DOWN:
        print "Down key pressed"
    else:
        evt.Skip()
</snippet></ROW><ROW><id>3570516</id><snippet>unicoded = unicode(non_unicode_string, source_encoding)
</snippet></ROW><ROW><id>3570516</id><snippet>source_encoding</snippet></ROW><ROW><id>3570516</id><snippet>'cp1252'</snippet></ROW><ROW><id>3570516</id><snippet>'iso-8859-1'</snippet></ROW><ROW><id>3570636</id><snippet>result = reduce(operator.and_, [False] * 1000)
result = reduce(operator.or_, [True] * 1000)
</snippet></ROW><ROW><id>3570636</id><snippet>result = all([False] * 1000)
result = any([True] * 1000)
</snippet></ROW><ROW><id>3570636</id><snippet>In [1]: import operator

In [2]: timeit result = reduce(operator.and_, [False] * 1000)
10000 loops, best of 3: 113 us per loop

In [3]: timeit result = all([False] * 1000)
100000 loops, best of 3: 5.59 us per loop

In [4]: timeit result = reduce(operator.or_, [True] * 1000)
10000 loops, best of 3: 113 us per loop

In [5]: timeit result = any([True] * 1000)
100000 loops, best of 3: 5.49 us per loop
</snippet></ROW><ROW><id>3570945</id><snippet>transform</snippet></ROW><ROW><id>3570945</id><snippet>transform</snippet></ROW><ROW><id>3571335</id><snippet>FigureCanvasWxAgg</snippet></ROW><ROW><id>3571335</id><snippet>Copy_to_Clipboard</snippet></ROW><ROW><id>3571491</id><snippet>def opt_arguments(func):
    def meta_wrapper(*args, **kwargs):
        if len(args) == 1 and callable(args[0]):
            return func(args[0])
        else:
            def meta_func(inner_func):
                return func(inner_func, *args, **kwargs)
            return meta_func
    return meta_wrapper
</snippet></ROW><ROW><id>3571558</id><snippet>def f():
    from module import *    # not allowed
</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571558</id><snippet>def f():
    ...

from module import *

def g():
    ...
</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571558</id><snippet>exec</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571558</id><snippet>exec</snippet></ROW><ROW><id>3571558</id><snippet>lambda</snippet></ROW><ROW><id>3571558</id><snippet>SyntaxError</snippet></ROW><ROW><id>3571558</id><snippet>from module import *</snippet></ROW><ROW><id>3571805</id><snippet>class Person:

    name_map = {}

    @classmethod
    def person_from_name(cls, name):
        if name not in cls.name_map:
            cls.name_map[name] = cls(name)
        return cls.name_map[name]

    def __init__(self, name):
        etc...
</snippet></ROW><ROW><id>3571807</id><snippet>communicate()</snippet></ROW><ROW><id>3571807</id><snippet> p = subprocess.Popen('find . -name "*.txt"', stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>3571807</id><snippet>wait()</snippet></ROW><ROW><id>3571829</id><snippet>import os
import stat
import tempfile

...

f, tmpname = tempfile.mkstemp(dir=directory)
os.write(f, content)
# See http://docs.python.org/library/os.html#os.fsync
f.flush()
os.fsync(f.fileno())
os.close(f)
# Ensure it is webserver readable
os.chmod(tmpname, stat.S_IREAD | stat.S_IWRITE | stat.S_IWUSR | stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
# Rename is an atomic operation in POSIX
# See: http://docs.python.org/library/os.html#os.rename
os.rename(tmpname, fn)
</snippet></ROW><ROW><id>3571867</id><snippet>xsel</snippet></ROW><ROW><id>3571867</id><snippet>GTK</snippet></ROW><ROW><id>3571867</id><snippet>def copy_image(f):
    assert os.path.exists(f), "file does not exist"
    image = gtk.gdk.pixbuf_new_from_file(f)

    clipboard = gtk.clipboard_get()
    clipboard.set_image(image)
    clipboard.store()
</snippet></ROW><ROW><id>3571946</id><snippet>__str__()</snippet></ROW><ROW><id>3571946</id><snippet>print()</snippet></ROW><ROW><id>3571946</id><snippet>print()</snippet></ROW><ROW><id>3571946</id><snippet>print()</snippet></ROW><ROW><id>3572358</id><snippet>import sys
import string
import nltk
from nltk.corpus import gutenberg

def longest_element(p):
    """return the first element of p which has the greatest len()"""
    max_len = 0
    elem = None
    for e in p:
        if len(e) &gt; max_len:
            elem = e
            max_len = len(e)
    return elem

def downcase(p):
    """returns a list of words in p shifted to lower case"""
    return map(string.lower, p)


def unique_words():
    """it turns out unique_words was never referenced so this is here
       for pedagogy"""
    # there are 2.6 million words in the gutenburg corpus but only ~42k unique
    # ignoring case, let's pare that down a bit
    for word in gutenberg.words():
        words.add(word.lower())
    print 'gutenberg.words() has', len(words), 'unique caseless words'
    return words

print 'loading gutenburg corpus...'
sentences = []
for sentence in gutenberg.sents():
    sentences.append(downcase(sentence))

trigger = sys.argv[1:]
target = longest_element(trigger).lower()
last_target = None

while target != last_target:
    matched_sentences = []
    for sentence in sentences:
        if target in sentence:
            matched_sentences.append(sentence)

    print '===', target, 'matched', len(matched_sentences), 'sentences'
    longestSentence = longest_element(matched_sentences)
    print ' '.join(longestSentence)

    trigger = longestSentence
    last_target = target
    target = longest_element(trigger).lower()
</snippet></ROW><ROW><id>3572558</id><snippet>class PseudoDict(object):
    def __init__(self, c):
        self.c = c

    def __getitem__(self, key):
        return self.c.somethingmagical()

class C(object):
    def __init__(self):
        self.a = PseudoDict(self)
        self.b = PseudoDict(self)

c = C()
print c.a['foo']
print c.b['bar']
</snippet></ROW><ROW><id>3572558</id><snippet>__getitem__</snippet></ROW><ROW><id>3572732</id><snippet>CSSSelector</snippet></ROW><ROW><id>3572732</id><snippet>headline[0]</snippet></ROW><ROW><id>3572732</id><snippet>&gt;&gt;&gt; html  ="""&lt;tr class="headlineRow"&gt;
  &lt;td&gt;
    &lt;span class="headline"&gt;This is some awesome text&lt;/span&gt;
  &lt;/td&gt;
&lt;/tr&gt;"""
&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from lxml.cssselect import CSSSelector
&gt;&gt;&gt; doc = etree.fromstring(html)
&gt;&gt;&gt; sel1 = CSSSelector('tr.headlineRow')
&gt;&gt;&gt; sel2 = CSSSelector('td span.headline')
&gt;&gt;&gt; for row in sel1(doc):
    headline = sel2(row)
    print headline[0]

&lt;Element span at 8f31e3c&gt;
</snippet></ROW><ROW><id>3573180</id><snippet>from module import *</snippet></ROW><ROW><id>3573180</id><snippet>__all__</snippet></ROW><ROW><id>3573180</id><snippet>__init__.py</snippet></ROW><ROW><id>3573180</id><snippet>__all__ = ['my_class_name']
</snippet></ROW><ROW><id>3573283</id><snippet>#!/usr/bin/python

import socket, sys, time, struct

textport = "35200"
host = "localhost"

if len(sys.argv) &gt; 1:
    host = sys.argv[1]

print "Sending Data"

port = int(textport)
addr = (host, port)
buf = 1024
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

s.sendto("hello World", addr)

print "Looking for replies; press Ctrl-C or Ctrl-Break to stop."
while 1:
    data,addr = s.recvfrom(buf)
    if not data:
        print "Client has exited!"
        break
    else:
        print "\nReceived: '", data,"'"

# Close socket
s.close()
</snippet></ROW><ROW><id>3573288</id><snippet>Selenium.getHtmlSource()</snippet></ROW><ROW><id>3573290</id><snippet>Object...</snippet></ROW><ROW><id>3573290</id><snippet>public class Test {

    public static void varargMethod(Object... args) {
        System.out.println("Arguments:");
        for (Object s : args) System.out.println(s);
    }

    public static void main(String[] args) throws Exception {
        varargMethod("Hello", "World", "!");

        String[] someArgs = { "Lorem", "ipsum", "dolor", "sit" };

        // Eclipse warns:
        //   The argument of type String[] should explicitly be cast to Object[]
        //   for the invocation of the varargs method varargMethod(Object...)
        //   from type Test. It could alternatively be cast to Object for a
        //   varargs invocation
        varargMethod(someArgs);

        // Calls the vararg method with multiple arguments
        // (the objects in the array).
        varargMethod((Object[]) someArgs);

        // Calls the vararg method with a single argument (the object array)
        varargMethod((Object) someArgs);
    }
}
</snippet></ROW><ROW><id>3573290</id><snippet>Arguments:
    Hello
    World
    !
Arguments:
    Lorem
    ipsum
    dolor
    sit
Arguments:
    Lorem
    ipsum
    dolor
    sit
Arguments:
    [Ljava.lang.String;@1d9f953d
</snippet></ROW><ROW><id>3573290</id><snippet>nonVarargMethod(args[0], args[1], args[2]);
</snippet></ROW><ROW><id>3573801</id><snippet>modulefinder</snippet></ROW><ROW><id>3573801</id><snippet>snakefood</snippet></ROW><ROW><id>3573801</id><snippet>pylint</snippet></ROW><ROW><id>3573801</id><snippet>pychecker</snippet></ROW><ROW><id>3574460</id><snippet>def GetLineHeight(rtc):
    tallString = "\n".join([str(i) for i in xrange(200)])
    rtc.SetValue(tallString)
    rtc.SetInsertionPoint(0)
    rtc.PageDown()
    pos = rtc.GetInsertionPoint()
    end = tallString.find("\n",pos)
    lineHeight=int(tallString[pos:end])
    return lineHeight
</snippet></ROW><ROW><id>3574957</id><snippet>...\blah\winpdb.py ...\blah\tools\myBuildFile.py build -arg1 -arg2</snippet></ROW><ROW><id>3575213</id><snippet>del os.environ['MYVAR']
</snippet></ROW><ROW><id>3575365</id><snippet>settings.py</snippet></ROW><ROW><id>3575365</id><snippet>'django.db.backends.postgis'
</snippet></ROW><ROW><id>3575365</id><snippet>django.contrib.gis.db.backends.postgis
</snippet></ROW><ROW><id>3575510</id><snippet>from BeautifulSoup import BeautifulSoup

html = ('&lt;html&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;'
       '&lt;body&gt;'
       '&lt;table&gt;&lt;tr&gt;'
       '&lt;td class="name"&gt;&lt;a href="/torrent/32726/0/"&gt;Slackware Linux 13.0 [x86 DVD ISO]&lt;/a&gt;&lt;/td&gt;'
       '&lt;td class="name"&gt;&lt;a href="/torrent/32727/0/"&gt;Slackware Linux 14.0 [x86 DVD ISO]&lt;/a&gt;&lt;/td&gt;'
       '&lt;td class="name"&gt;&lt;a href="/torrent/32728/0/"&gt;Slackware Linux 15.0 [x86 DVD ISO]&lt;/a&gt;&lt;/td&gt;'
       '&lt;/tr&gt;&lt;/table&gt;'
       'body'
       '&lt;/html&gt;')
soup = BeautifulSoup(html)
links = [td.find('a') for td in soup.findAll('td', { "class" : "name" })]
for link in links:
    print link.string
</snippet></ROW><ROW><id>3575510</id><snippet>Slackware Linux 13.0 [x86 DVD ISO]  
Slackware Linux 14.0 [x86 DVD ISO]  
Slackware Linux 15.0 [x86 DVD ISO]  
</snippet></ROW><ROW><id>3575552</id><snippet>json</snippet></ROW><ROW><id>3575552</id><snippet>import json
json.loads( &lt;string&gt; )
</snippet></ROW><ROW><id>3575552</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>3575552</id><snippet>lxml</snippet></ROW><ROW><id>3575552</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup( &lt;string&gt; )
</snippet></ROW><ROW><id>3575552</id><snippet>soup.findAll</snippet></ROW><ROW><id>3575552</id><snippet>json.loads</snippet></ROW><ROW><id>3575557</id><snippet>wx.lib.pubsub</snippet></ROW><ROW><id>3575557</id><snippet>wx.Yield</snippet></ROW><ROW><id>3575557</id><snippet>import wx

class GUI(wx.Frame):
    def __init__(self, parent, title=""):
        wx.Frame.__init__(self, parent=parent, title=title, size=(340,380))
        self.SetMinSize((140,180))

        self.creating_widgets = False

        self.panel = wx.Panel(id=wx.ID_ANY, parent=self)

        self.startButton = wx.Button(self.panel, wx.ID_ANY, 'Start')
        self.stopButton = wx.Button(self.panel, wx.ID_ANY, 'Stop')
        self.messageBox = wx.TextCtrl(self.panel, wx.ID_ANY, '', size=(75, 20))

        self.Bind(wx.EVT_BUTTON,  self.onStart, self.startButton)     
        self.Bind(wx.EVT_BUTTON,  self.onStop, self.stopButton)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.startButton, 0, wx.ALL, 10)
        self.sizer.Add(self.stopButton, 0, wx.ALL, 10)
        self.sizer.Add(self.messageBox, 0, wx.ALL, 10)

        self.panel.SetSizerAndFit(self.sizer)

    def onStart(self, event):
        self.creating_widgets = True
        count = 0
        self.startButton.Disable()
        while self.creating_widgets:
            count += 1
            #Create your widgets here

            #just for simulations sake...
            wx.MilliSleep(100)
            self.messageBox.SetLabel(str(count))

            #Allow the window to update, 
            #You must call wx.yield() frequently to update your window
            wx.Yield()

    def onStop(self, message):
        self.startButton.Enable()
        self.creating_widgets = False


if __name__ == "__main__":

    app = wx.PySimpleApp()
    frame = GUI(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3576073</id><snippet>method1</snippet></ROW><ROW><id>3576073</id><snippet>for method_name in [ 'method1', 'method2' ]:
    locals()[ method_name ] = Mock( )
</snippet></ROW><ROW><id>3576073</id><snippet>func</snippet></ROW><ROW><id>3576073</id><snippet>method1</snippet></ROW><ROW><id>3576328</id><snippet>doc = '''&lt;Response&gt;
    &lt;exitCode&gt;1&lt;/exitCode&gt;
    &lt;fileName&gt;C:/Something/&lt;/fileName&gt;
    &lt;errors&gt;
        &lt;error&gt;Error generating report&lt;/error&gt;
    &lt;/errors&gt;
&lt;/Response&gt;'''

from xml.dom import minidom

something = minidom.parseString( doc )

nodeList = [ ]
for node in something.getElementsByTagName( "Response" ):
    response = { }
    response[ "exit code" ] = node.getElementsByTagName( "exitCode" )[ 0 ].childNodes[ 0 ].nodeValue
    response[ "file name" ] = node.getElementsByTagName( "fileName" )[ 0 ].childNodes[ 0 ].nodeValue
    errors = node.getElementsByTagName( "errors" )[ 0 ].getElementsByTagName( "error" )
    response[ "errors" ] = [ error.childNodes[ 0 ].nodeValue for error in errors ]

    nodeList.append( response )

import pprint
pprint.pprint( nodeList )
</snippet></ROW><ROW><id>3576328</id><snippet>[{'errors': [u'Error generating report'],
  'exit code': u'1',
  'file name': u'C:/Something/'}]
</snippet></ROW><ROW><id>3576551</id><snippet># griddata vs SmoothBivariateSpline
# http://stackoverflow.com/questions/3526514/
#   problem-with-2d-interpolation-in-scipy-non-rectangular-grid

# http://www.scipy.org/Cookbook/Matplotlib/Gridding_irregularly_spaced_data
# http://en.wikipedia.org/wiki/Natural_neighbor
# http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html

from __future__ import division
import sys
import numpy as np
from scipy.interpolate import SmoothBivariateSpline  # $scipy/interpolate/fitpack2.py
from matplotlib.mlab import griddata

__date__ = "2010-10-08 Oct"  # plot diffs, ypow
    # "2010-09-13 Sep"  # smooth relative

def avminmax( X ):
    absx = np.abs( X[ - np.isnan(X) ])
    av = np.mean(absx)
    m, M = np.nanmin(X), np.nanmax(X)
    histo = np.histogram( X, bins=5, range=(m,M) ) [0]
    return "av %.2g  min %.2g  max %.2g  histo %s" % (av, m, M, histo)

def cosr( x, y ):
    return 10 * np.cos( np.hypot(x,y) / np.sqrt(2) * 2*np.pi * cycle )

def cosx( x, y ):
    return 10 * np.cos( x * 2*np.pi * cycle )

def dipole( x, y ):
    r = .1 + np.hypot( x, y )
    t = np.arctan2( y, x )
    return np.cos(t) / r**3

#...............................................................................
testfunc = cosx
Nx = Ny = 20  # interpolate random Nx x Ny points -&gt; Newx x Newy grid
Newx = Newy = 100
cycle = 3
noise = 0
ypow = 2  # denser =&gt; smaller error
imclip = (-5., 5.)  # plot trierr, splineerr to same scale
kx = ky = 3
smooth = .01  # Spline s = smooth * z2sum, see note
    # s is a target for sum (Z() - spline())**2  ~ Ndata and Z**2;
    # smooth is relative, s absolute
    # s too small =&gt; interpolate/fitpack2.py:580: UserWarning: ier=988, junk out
    # grr error message once only per ipython session
seed = 1
plot = 0

exec "\n".join( sys.argv[1:] )  # run this.py N= ...
np.random.seed(seed)
np.set_printoptions( 1, threshold=100, suppress=True )  # .1f

print 80 * "-"
print "%s  Nx %d Ny %d -&gt; Newx %d Newy %d  cycle %.2g noise %.2g  kx %d ky %d smooth %s" % (
    testfunc.__name__, Nx, Ny, Newx, Newy, cycle, noise, kx, ky, smooth)

#...............................................................................

    # interpolate X Y Z to xnew x ynew --
X, Y = np.random.uniform( size=(Nx*Ny, 2) ) .T
Y **= ypow
    # 1d xlin ylin -&gt; 2d X Y Z, Ny x Nx --
    # xlin = np.linspace( 0, 1, Nx )
    # ylin = np.linspace( 0, 1, Ny )
    # X, Y = np.meshgrid( xlin, ylin )
Z = testfunc( X, Y )  # Ny x Nx
if noise:
    Z += np.random.normal( 0, noise, Z.shape )
# print "Z:\n", Z
z2sum = np.sum( Z**2 )

xnew = np.linspace( 0, 1, Newx )
ynew = np.linspace( 0, 1, Newy )
Zexact = testfunc( *np.meshgrid( xnew, ynew ))
if imclip is None:
    imclip = np.min(Zexact), np.max(Zexact)
xflat, yflat, zflat = X.flatten(), Y.flatten(), Z.flatten()

#...............................................................................
print "SmoothBivariateSpline:"
fit = SmoothBivariateSpline( xflat, yflat, zflat, kx=kx, ky=ky, s = smooth * z2sum )
Zspline = fit( xnew, ynew ) .T  # .T ??

splineerr = Zspline - Zexact
print "Zspline - Z:", avminmax(splineerr)
print "Zspline:    ", avminmax(Zspline)
print "Z:          ", avminmax(Zexact)
res = fit.get_residual()
print "residual %.0f  res/z2sum %.2g" % (res, res / z2sum)
# print "knots:", fit.get_knots()
# print "Zspline:", Zspline.shape, "\n", Zspline
print ""

#...............................................................................
print "griddata:"
Ztri = griddata( xflat, yflat, zflat, xnew, ynew )
        # 1d x y z -&gt; 2d Ztri on meshgrid(xnew,ynew)

nmask = np.ma.count_masked(Ztri)
if nmask &gt; 0:
    print "info: griddata: %d of %d points are masked, not interpolated" % (
        nmask, Ztri.size)
    Ztri = Ztri.data  # Nans outside convex hull
trierr = Ztri - Zexact
print "Ztri - Z:", avminmax(trierr)
print "Ztri:    ", avminmax(Ztri)
print "Z:       ", avminmax(Zexact)
print ""

#...............................................................................
if plot:
    import pylab as pl
    nplot = 2
    fig = pl.figure( figsize=(10, 10/nplot + .5) )
    pl.suptitle( "Interpolation error: griddata - %s, BivariateSpline - %s" % (
        testfunc.__name__, testfunc.__name__ ), fontsize=11 )

    def subplot( z, jplot, label ):
        ax = pl.subplot( 1, nplot, jplot )
        im = pl.imshow(
            np.clip( z, *imclip ),  # plot to same scale
            cmap=pl.cm.RdYlBu,
            interpolation="nearest" )
                # nearest: squares, else imshow interpolates too
                # todo: centre the pixels
        ny, nx = z.shape
        pl.scatter( X*nx, Y*ny, edgecolor="y", s=1 )  # for random XY
        pl.xlabel(label)
        return [ax, im]

    subplot( trierr, 1,
        "griddata, Delaunay triangulation + Natural neighbor: max %.2g" %
        np.nanmax(np.abs(trierr)) )

    ax, im = subplot( splineerr, 2,
        "SmoothBivariateSpline kx %d ky %d smooth %.3g: max %.2g" % (
        kx, ky, smooth, np.nanmax(np.abs(splineerr)) ))

    pl.subplots_adjust( .02, .01, .92, .98, .05, .05 )  # l b r t
    cax = pl.axes([.95, .05, .02, .9])  # l b w h
    pl.colorbar( im, cax=cax )  # -1.5 .. 9 ??
    if plot &gt;= 2:
        pl.savefig( "tmp.png" )
    pl.show() 
</snippet></ROW><ROW><id>3576551</id><snippet>scipy.interpolate.*BivariateSpline</snippet></ROW><ROW><id>3576551</id><snippet>matplotlib.mlab.griddata</snippet></ROW><ROW><id>3576551</id><snippet>Znew = griddata( X,Y,Z, Xnew,Ynew )
    # 1d X Y Z Xnew Ynew -&gt; interpolated 2d Znew on meshgrid(Xnew,Ynew)
assert X.ndim == Y.ndim == Z.ndim == 1  and  len(X) == len(Y) == len(Z)
</snippet></ROW><ROW><id>3576551</id><snippet>X,Y,Z</snippet></ROW><ROW><id>3576551</id><snippet>X,Y</snippet></ROW><ROW><id>3576551</id><snippet>Z</snippet></ROW><ROW><id>3576551</id><snippet>X,Y</snippet></ROW><ROW><id>3576551</id><snippet>Z</snippet></ROW><ROW><id>3576551</id><snippet>Znew[Xnew0,Ynew0], Znew[Xnew1,Ynew0], Znew[Xnew2,Ynew0] ...
Znew[Xnew0,Ynew1] ...
Znew[Xnew0,Ynew2] ...
...
</snippet></ROW><ROW><id>3576551</id><snippet>griddata</snippet></ROW><ROW><id>3576551</id><snippet>griddata</snippet></ROW><ROW><id>3576551</id><snippet>Xmesh, Ymesh = np.meshgrid( np.linspace(0,1,Nx), np.linspace(0,1,Ny) )
Z = f( Xmesh, Ymesh )  # Nx x Ny
Znew = griddata( Xmesh.flatten(), Ymesh.flatten(), Z.flatten(), Xnew, Ynew )
</snippet></ROW><ROW><id>3576551</id><snippet>Znew = griddata(...)
nmask = np.ma.count_masked(Znew)
if nmask &gt; 0:
    print "info: griddata: %d of %d points are masked, not interpolated" % (
        nmask, Znew.size)
    # Znew = Znew.data  # array with NaNs
</snippet></ROW><ROW><id>3576551</id><snippet>from mpl_toolkits.mplot3d import Axes3D
Znew = griddata( R,T,Z, Rnew,Tnew )
ax = Axes3D(fig)
ax.plot_surface( Rnew * np.cos(Tnew), Rnew * np.sin(Tnew), Znew )
</snippet></ROW><ROW><id>3576551</id><snippet>ax = subplot(1,1,1, projection="polar", aspect=1.)
ax.pcolormesh(theta, r, Z)
</snippet></ROW><ROW><id>3576551</id><snippet>def minavmax( X ):
    m = np.nanmin(X)
    M = np.nanmax(X)
    av = np.mean( X[ - np.isnan(X) ])  # masked ?
    histo = np.histogram( X, bins=5, range=(m,M) ) [0]
    return "min %.2g  av %.2g  max %.2g  histo %s" % (m, av, M, histo)

for nm, x in zip( "X Y Z  Xnew Ynew Znew".split(),
                (X,Y,Z, Xnew,Ynew,Znew) ):
    print nm, minavmax(x)
</snippet></ROW><ROW><id>3576551</id><snippet>interpolate( X,Y,Z, X,Y )  -- interpolate at the same points
interpolate( X,Y, np.ones(len(X)), Xnew,Ynew )  -- constant 1 ?
</snippet></ROW><ROW><id>3576690</id><snippet>raw</snippet></ROW><ROW><id>3576690</id><snippet>pstr = ctypes.create_string_buffer( 1000 )
f.write( pstr.raw )
</snippet></ROW><ROW><id>3576711</id><snippet>autocmd Filetype python py os.chdir(directory)
</snippet></ROW><ROW><id>3576765</id><snippet>sorted( ..., key = lambda s: ( not s.startswith( "_" ), s ) )
</snippet></ROW><ROW><id>3577062</id><snippet>klass</snippet></ROW><ROW><id>3577236</id><snippet>gtk_tree_view_set_search_column (GtkTreeView *tree_view, gint column)

column :
    the column of the model to search in, or -1 to disable searching 
</snippet></ROW><ROW><id>3577236</id><snippet>-1</snippet></ROW><ROW><id>3577243</id><snippet>import sys

def main():
   input1 = sys.argv[1]
   input2 = sys.argv[2]
...

if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>3577301</id><snippet>$</snippet></ROW><ROW><id>3577377</id><snippet>loaddata</snippet></ROW><ROW><id>3577377</id><snippet>RateDescription</snippet></ROW><ROW><id>3577417</id><snippet>form_fields</snippet></ROW><ROW><id>3577417</id><snippet>doseq</snippet></ROW><ROW><id>3577417</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>3577417</id><snippet>form_fields = {
   "data": ["foo","bar"]
}

form_data = urllib.urlencode(form_fields, doseq=True)
</snippet></ROW><ROW><id>3577417</id><snippet>form_data</snippet></ROW><ROW><id>3577417</id><snippet>'data=foo&amp;data=bar'</snippet></ROW><ROW><id>3577608</id><snippet>"localhost"</snippet></ROW><ROW><id>3577608</id><snippet>"127.0.0.1"</snippet></ROW><ROW><id>3577608</id><snippet>db=_mysql.connect(host="outhouse", port=3307, passwd="moonpie", db="thangs")</snippet></ROW><ROW><id>3577616</id><snippet>my_string = "%05d" % 100
</snippet></ROW><ROW><id>3577643</id><snippet>def save(self, *args, **kwargs):
    # Only do this if it's the first time we're saving.
    if not self.id:
        entries = PlaylistEntry.objects.order_by('-order')
        try:
            self.order = entries[0].order + 1
        except IndexError:
            # we don't have any PlaylistEntries yet, so we just start @ 0
            self.order = 0

    super(PlaylistEntry, self).save(*args, **kwargs) 
</snippet></ROW><ROW><id>3577938</id><snippet>teamdict = dict([(data['team'], data) for data in t])
new = [{'team': team, 'abbrev': data['abbrev']} for (team, data) in teamdict.items()]
</snippet></ROW><ROW><id>3577938</id><snippet>dict()</snippet></ROW><ROW><id>3577938</id><snippet>teamdict={}
for data in t:
  teamdict[data['team']] = data
</snippet></ROW><ROW><id>3578126</id><snippet>python-twitter</snippet></ROW><ROW><id>3578126</id><snippet>tweetstream</snippet></ROW><ROW><id>3578126</id><snippet>easy-install</snippet></ROW><ROW><id>3578335</id><snippet>def search_s(utest, in_str):
  s = utest.selenium
  s.type('q', in_str)
  s.click('btnG')
  s.wait_for_page_to_load('30000')
  utest.assertEqual("%s - Google Search" % (in_str,), s.get_title())
</snippet></ROW><ROW><id>3578335</id><snippet>def test_google(self):
  s.open('/')
  search_s(self, "hello world")
</snippet></ROW><ROW><id>3578598</id><snippet>package = __import__('qux', fromlist=['foo'])
module = getattr(package, 'foo')
</snippet></ROW><ROW><id>3578598</id><snippet>fromlist</snippet></ROW><ROW><id>3578598</id><snippet>__import__</snippet></ROW><ROW><id>3578598</id><snippet>baz.bar.qux</snippet></ROW><ROW><id>3578598</id><snippet>__import__</snippet></ROW><ROW><id>3578598</id><snippet>baz.bar.qux.foo</snippet></ROW><ROW><id>3578658</id><snippet>def get(self):

    que = db.Query(models.URL).order('-created')
    url_list = que.fetch(limit=100)

    path = self.request.path        
    if doRender(self,path):
        return
    doRender(self,'base/index.html', { 'url_list' : url_list })
</snippet></ROW><ROW><id>3578960</id><snippet># ---------- settings.py

NAME = "Lance"
DOMAIN = "http://example.com"

# ---------- main.py

import settings

settings.DOMAIN # [...]
</snippet></ROW><ROW><id>3578960</id><snippet># ---------- settings.ini

[basic]
name = Lance
domain = http://example.com

# ---------- main.py

import ConfigParser

parser = ConfigParser.ConfigParser()
parser.read('setting.ini')

try:
    name = get('basic', 'name')
except (NoOptionError, NoSectionError):
    # no settings
</snippet></ROW><ROW><id>3578991</id><snippet>class Media:
    js = (
        'http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js',
        '/media/js/calculate.js',
    )
</snippet></ROW><ROW><id>3578991</id><snippet>function currencyFormat(nStr) {
    nStr += '';
    x = nStr.split('.');
    x1 = x[0];
    x2 = x.length &gt; 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + '.' + '$2');
    }
    return x1 + x2;
}

jQuery(document).ready(function($){
    $('input[id$=quantity], input[id$=per_unit_cost]').live('keyup', function() {
        var $tr = $(this).parents('tr');
        var quantity = parseInt($tr.find('input[id$=quantity]').val());
        var count = parseInt($tr.find('input[id$=per_unit_cost]').val());

        if(quantity &amp;&amp; count) {
            $tr.find('input[id$=per_unit_price]').html(currencyFormat(quantity * count));
        }
    });
});
</snippet></ROW><ROW><id>3579151</id><snippet>r, g, b = im.split()              # split the image into separate color planes
im = Image.merge("RGB", (g, g, g))  # merge them back, using the green plane for each
</snippet></ROW><ROW><id>3579538</id><snippet>o</snippet></ROW><ROW><id>3579538</id><snippet>one()</snippet></ROW><ROW><id>3579538</id><snippet>one()</snippet></ROW><ROW><id>3579538</id><snippet>two()</snippet></ROW><ROW><id>3579550</id><snippet>def mytext(stmt, params):
    bindparams = []
    for k, v in params:
        if isinstance(v, datetime):
            type_ = MyType()
        else:
            type_ = None
        bindparams.append(bindparam(k, v, type_=type))
    return text(stmt, bindparams=bindparams)
</snippet></ROW><ROW><id>3579603</id><snippet>import htmlentitydefs as ents
from lxml import etree  # or maybe 'html' , if the input is still more broken
def repl_ent(m): 
     return ents.entitydefs[m.group()[1:-1]]
goodxml = re.sub( '&amp;\w+;', repl_ent, badxml )
etree.fromstring( goodxml )
</snippet></ROW><ROW><id>3579625</id><snippet>from Tkinter import Tk
from tkFileDialog import askopenfilename

Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing
filename = askopenfilename() # show an "Open" dialog box and return the path to the selected file
print(filename)
</snippet></ROW><ROW><id>3579769</id><snippet>import re
import array

listcdtitles = ["""    Liszt, Hungarian Rhapsody #6 {'Pesther Carneval'}; 2 Episodes from Lenau's 'Faust'; 'Hunnenschlacht' Symphonic Poem. (NW German Phil./ Kulka)   """,
""" Puccini, Verdi, Gounod, Bizet: Arias &amp; Duets from Butterfly, Tosca, Boheme, Turandot, I Vespri, Faust, Carmen. (Fiamma Izzo d'Amico &amp; Peter Dvorsky w.Berlin Radio Symph./Paternostro)  """,
""" Tchaikovsky, 'The Tempest' Fantasy. Liszt, Symphonic Poem #1. (London Symph./Butt)  """,
""" Duffy, John: 'Heritage: Civilization and the Jews'- Fanfare &amp; Chorale, Symphonic Dances + Orchestral Suite. Bernstein, 'On the Town' Dance Episodes. (Royal Phil./R.Williams)   """,
""" Lilien, Ignace {1897-1963}: Songs, 1920-1935. (Anja van Wijk, mezzo &amp; Frans van Ruth, piano)    """,
""" Hindemith, Trauermusik. Purcell, 'Fairy Queen' Suite. Rossini, String Sonata #6. Petrov, 'Creation of the World' Ballet Suite. Bartok, Romanian Folkdances Sz 56. Tartini, Flute Concerto in G {w.A.Maiorov} (Leningrad Orch.for Ancient &amp; Modern Music/ Serov) """,
""" Bizet, Verdi, Massenet, Puccini: Arias from Carmen, Rigoletto, Werther, Manon Lescaut, Tosca, Turandot + Songs by Lara, Di Capua et al. (Peter Dvorsky, tenor w.Bratislava Orch./Lenard {Also performing 'Carmen' Overt.&amp; 'Thais' Meditation}. Rec.Live, 10/87) """,
""" Fantini, Rauch, C.Straus, Priuli, Bertali: 'Festival Mass at the Imperial Court of Vienna, 1648' (Yorkshire Bach Choir &amp; Baroque Soloists + Baroque Brass of London/Seymour)    """,
""" Vinci, Leonardo {c.1690-1730}: Arias from Semiramide Riconosciuta, Didone Abbandonata, La Caduta dei Decemviri, Lo Cecato Fauzo, La Festa de Bacco, Catone in Utica. (Maria Angeles Peters sop. w.M.Carraro conducting) """,
""" Gluck, Mozart, Beethoven, Weber, Verdi, Wagner, Ponchielli, Mascagni, Puccini: Arias from Alceste, Don Giovanni, Fidelio, Oberon, Ballo, Tristan, Walkure, Siegfried, Gotterdammerung, Gioconda, Cavalleria, Tosca. (Helene Wildbrunn. Rec.1919-24) """,
""" Stanley, Wesley, Stubley, Boyce, Handel, Heron, Russell, Hook: '18th Century Organ Music on Period Instruments' (Same instruments and artist as above)  """,
""" Reimann, 'Unrevealed' for Baritone &amp; String Quartet to Texts by Lord Byron {R.Salter w.Kreuzberger Quartet}; Variations for Piano (David Levine)    """,
""" Bruckner, Symphony #9. (Berlin Philharmonic/ Jochum. Rec. 'live', 11/28/77) """,
""" Bruckner, Symphony #5. (Haas Edition. BBC Symph./ Horenstein. Rec.9/71) """]

entryDictionary = {}
i=0
for entry in listcdtitles:
    #remove unnecessary characters from the string
    entry=re.sub(r'[^\w ]', '', entry.lower(), flags=re.IGNORECASE)
    #split the entry into words and store it in the 
    entryDictionary[i]=entry.split(" ")
    i=i+1
# print the dictionary
print("Entries")
print(entryDictionary)

# define a score matrix, compare the words in each entry and if
# a word is same in both entries, that is one point
scoreMatrix = []
for k in range(i):
    scoreMatrix.append([])
    for j in range (i):
        if j&gt;k:
            scoreMatrix[k].append(0)
        else:
            scoreMatrix[k].append("-")
k=0
j=0

for k in range(i-1):
    entry1 = entryDictionary[k]
    for j in range(k+1,i):
        entry2 = entryDictionary[j]
        for kk in range(len(entry1)):
            for jj in range(len(entry2)):
                if entry1[kk] != "" and entry1[kk] == entry2[jj]:
                    scoreMatrix[k][j] = scoreMatrix[k][j] + 1

print "Score Matrix (Higher numbers denote heigher similarity between two entries"

print repr("").rjust(10),
for k in range(i-1):
    print repr("Entry " + str(k)).rjust(10),
print repr("Entry " + str(i-1)).rjust(10)

for k in range(i):
    scoreMatrix.append([])
    print repr("Entry " + str(k)).rjust(10),
    for j in range (i-1):
        print repr(scoreMatrix[k][j]).rjust(10),
    print repr(scoreMatrix[k][i-1]).rjust(10)
</snippet></ROW><ROW><id>3579769</id><snippet>        ''  'Entry 0'  'Entry 1'  'Entry 2'  'Entry 3'  'Entry 4'  'Entry 5'  'Entry 6'  'Entry 7'  'Entry 8'  'Entry 9' 'Entry 10' 'Entry 11' 'Entry 12' 'Entry 13'
 'Entry 0'        '-'          2          3          2          0          1          1          0          1          1          0          0          0          0
 'Entry 1'        '-'        '-'          0          0          0          0         11          0          2          5          0          0          0          0
 'Entry 2'        '-'        '-'        '-'          3          0          1          0          1          0          0          0          0          0          0
 'Entry 3'        '-'        '-'        '-'        '-'          0          4          0          2          0          0          2          0          0          0
 'Entry 4'        '-'        '-'        '-'        '-'        '-'          0          1          0          0          0          0          1          0          0
 'Entry 5'        '-'        '-'        '-'        '-'        '-'        '-'          0          3          1          0          1          1          0          0
 'Entry 6'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          0          2          5          0          1          0          0
 'Entry 7'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          0          0          0          0          0          0
 'Entry 8'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          2          0          0          0          0
 'Entry 9'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          0          0          0          0
'Entry 10'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          0          0          0
'Entry 11'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          0          0
'Entry 12'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'          2
'Entry 13'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'        '-'
</snippet></ROW><ROW><id>3580047</id><snippet>get_backend()</snippet></ROW><ROW><id>3580047</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.get_backend()
'TkAgg'
</snippet></ROW><ROW><id>3580114</id><snippet>None</snippet></ROW><ROW><id>3580236</id><snippet>--no-site-packages</snippet></ROW><ROW><id>3580245</id><snippet>return (x[0] == x[-1])
</snippet></ROW><ROW><id>3580245</id><snippet>if x[0] == x[-1]
</snippet></ROW><ROW><id>3580245</id><snippet>if x[0] == x[-1]: # if this is true
    return True # then return true
else:
    return False
</snippet></ROW><ROW><id>3580245</id><snippet>return x[0] == x[-1]
</snippet></ROW><ROW><id>3580245</id><snippet>x[-1]</snippet></ROW><ROW><id>3580245</id><snippet>x[0]</snippet></ROW><ROW><id>3580245</id><snippet>x[-1]</snippet></ROW><ROW><id>3580553</id><snippet>delete_event</snippet></ROW><ROW><id>3580553</id><snippet>True</snippet></ROW><ROW><id>3580553</id><snippet>    self.widget_a.connect('delete_event', self.on_widget_a_delete)

def on_widget_a_delete(self, widget, event):
    widget.hide()
    # do something
    return True
</snippet></ROW><ROW><id>3580553</id><snippet>self.widget_a.connect('delete_event', self.widget_a.hide_on_delete)
</snippet></ROW><ROW><id>3580618</id><snippet>sudo python</snippet></ROW><ROW><id>3580760</id><snippet>try:                                                                    
    from threading import local                                         
except ImportError:                                                     
    from django.utils._threading_local import local                     

_thread_locals = local()                                                
def get_request():                                                
    return getattr(_thread_locals, 'request', None)                       

class ThreadLocals(object):                                             
    def process_request(self, request):                                 
        _thread_locals.request = request
</snippet></ROW><ROW><id>3580760</id><snippet>import get_request</snippet></ROW><ROW><id>3580760</id><snippet>request.user</snippet></ROW><ROW><id>3581015</id><snippet>=</snippet></ROW><ROW><id>3581015</id><snippet>copy</snippet></ROW><ROW><id>3581015</id><snippet>copy</snippet></ROW><ROW><id>3581015</id><snippet>deepcopy</snippet></ROW><ROW><id>3581015</id><snippet>list</snippet></ROW><ROW><id>3581015</id><snippet>list(somethingelse)</snippet></ROW><ROW><id>3581015</id><snippet>list</snippet></ROW><ROW><id>3581015</id><snippet>dict(somemapping)</snippet></ROW><ROW><id>3581015</id><snippet>dict</snippet></ROW><ROW><id>3581015</id><snippet>set(someiterable)</snippet></ROW><ROW><id>3581682</id><snippet>    status, email_ids = con.search(None, query)
    if status != 'OK':
        raise Exception("Error running imap search for spinvox messages: "
                        "%s" % status)

    fetch_ids = ','.join(email_ids[0].split())
    status, data = con.fetch(fetch_ids, '(RFC822.HEADER BODY.PEEK[1])')
    if status != 'OK':
        raise Exception("Error running imap fetch for spinvox message: "
                        "%s" % status)
    for i in range(len(email_ids[0].split())):
        header_msg = email.message_from_string(data[i * 3 + 0][1])
        subject = header_msg['Subject'],
        date = header_msg['Date'],
        body = data[i * 3 + 1][1] # includes some mime multipart junk
</snippet></ROW><ROW><id>3582194</id><snippet>m = diag(range(1, 11))
print m**0.5
</snippet></ROW><ROW><id>3582194</id><snippet>m = matrix([[1, 1], [1, 2]])
print m**0.5
</snippet></ROW><ROW><id>3582540</id><snippet>import cgi
import cgitb; cgitb.enable() # Optional; for debugging only

print "Content-Type: text/html"
print ""

arguments = cgi.FieldStorage()
for i in arguments.keys():
 print arguments[i].value
</snippet></ROW><ROW><id>3582613</id><snippet>print arr[1,1]
</snippet></ROW><ROW><id>3582719</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>3582719</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>3582780</id><snippet>$ hachoir-metadata pacte_des_gnous.avi
Common:
- Duration: 4 min 25 sec
- Comment: Has audio/video index (248.9 KB)
- MIME type: video/x-msvideo
- Endian: Little endian
Video stream:
- Image width: 600
- Image height: 480
- Bits/pixel: 24
- Compression: DivX v4 (fourcc:"divx")
- Frame rate: 30.0
Audio stream:
- Channel: stereo
- Sample rate: 22.1 KHz
- Compression: MPEG Layer 3
</snippet></ROW><ROW><id>3583022</id><snippet>ar[filenumber,k,m] = data</snippet></ROW><ROW><id>3583022</id><snippet>filename</snippet></ROW><ROW><id>3583302</id><snippet>(r'^plus/(?P&lt;offset&gt;\d{1,2})/$', hours_ahead),
</snippet></ROW><ROW><id>3583372</id><snippet>&gt;&gt;&gt; hashlib.md5("foo").hexdigest() == "acbd18db4cc2f85cedef654fccc4a4d8"
True
&gt;&gt;&gt; type(hashlib.md5("foo").hexdigest())
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>3583372</id><snippet>&gt;&gt;&gt; hashlib.md5("foo").hexdigest()
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    hashlib.md5("foo").hexdigest()
TypeError: Unicode-objects must be encoded before hashing

&gt;&gt;&gt; hashlib.md5("foo".encode("utf8")).hexdigest()
'acbd18db4cc2f85cedef654fccc4a4d8'

&gt;&gt;&gt; hashlib.md5("foo".encode("utf8")).hexdigest() == 'acbd18db4cc2f85cedef654fccc4a4d8'
True
</snippet></ROW><ROW><id>3583477</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3583477</id><snippet>/usr/bin/easy_install</snippet></ROW><ROW><id>3583477</id><snippet>easy_install</snippet></ROW><ROW><id>3583477</id><snippet>sh setuptools...</snippet></ROW><ROW><id>3583477</id><snippet>--install-dir</snippet></ROW><ROW><id>3583477</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3583477</id><snippet>PATH</snippet></ROW><ROW><id>3583477</id><snippet>$ curl -O http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  325k  100  325k    0     0   125k      0  0:00:02  0:00:02 --:--:--  136k
$ PATH="/Library/Frameworks/Python.framework/Versions/2.6/bin:${PATH}"
$ export PATH
$ echo $PATH
/Library/Frameworks/Python.framework/Versions/2.6/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
$ which python2.6
/Library/Frameworks/Python.framework/Versions/2.6/bin/python2.6
$ python2.6 -c "import sys;print(sys.version_info)"
(2, 6, 5, 'final', 0)
$ sh setuptools-0.6c11-py2.6.egg 
Processing setuptools-0.6c11-py2.6.egg
Copying setuptools-0.6c11-py2.6.egg to /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages
Adding setuptools 0.6c11 to easy-install.pth file
Installing easy_install script to /Library/Frameworks/Python.framework/Versions/2.6/bin
Installing easy_install-2.6 script to /Library/Frameworks/Python.framework/Versions/2.6/bin
Installed /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/setuptools-0.6c11-py2.6.egg
Processing dependencies for setuptools==0.6c11
Finished processing dependencies for setuptools==0.6c11
$ which easy_install
/Library/Frameworks/Python.framework/Versions/2.6/bin/easy_install
$ easy_install pip
Searching for pip
Reading http://pypi.python.org/simple/pip/
Reading http://pip.openplans.org
Best match: pip 0.8
Downloading http://pypi.python.org/packages/source/p/pip/pip-0.8.tar.gz#md5=468d9adc309f33ad51cee38f0d455429
Processing pip-0.8.tar.gz
Running pip-0.8/setup.py -q bdist_egg --dist-dir /var/folders/Ux/UxzFPTCnF3esOnKQ1d3bbE+++TI/-Tmp-/easy_install-JU05mJ/pip-0.8/egg-dist-tmp-zwrzwI
warning: no previously-included files matching '*.txt' found under directory 'docs/_build'
no previously-included directories found matching 'docs/_build/_sources'
Adding pip 0.8 to easy-install.pth file
Installing pip script to /Library/Frameworks/Python.framework/Versions/2.6/bin
Installing pip-2.6 script to /Library/Frameworks/Python.framework/Versions/2.6/bin
Installed /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pip-0.8-py2.6.egg
Processing dependencies for pip
Finished processing dependencies for pip
$ pip --version
pip 0.8 from /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/pip-0.8-py2.6.egg (python 2.6)
</snippet></ROW><ROW><id>3583527</id><snippet>from django.core.files.temp import NamedTemporaryFile
def send_file(request):
    newfile = NamedTemporaryFile(suffix='.txt')
    # save your data to newfile.name
    wrapper = FileWrapper(newfile)
    response = HttpResponse(wrapper, content_type=mime_type)
    response['Content-Disposition'] = 'attachment; filename=%s' % os.path.basename(modelfile.name)
    response['Content-Length'] = os.path.getsize(modelfile.name)
    return response
</snippet></ROW><ROW><id>3583576</id><snippet>import wx
import  wx.lib.scrolledpanel as scrolled

class ImageDlg(wx.Dialog):
    def __init__(self, parent, title):
        wx.Dialog.__init__(self, parent=parent,title=title, size=wx.DefaultSize)

        self.scrollPnl = scrolled.ScrolledPanel(self, -1, size=(200, 200), style = wx.TAB_TRAVERSAL|wx.SUNKEN_BORDER)

        self.addBtn = wx.Button(self, id=wx.ID_ADD)
        self.Bind(wx.EVT_BUTTON, self.on_add, self.addBtn)

        self.mainSizer = wx.BoxSizer(wx.VERTICAL)       

        self.scrollPnlSizer = wx.BoxSizer(wx.VERTICAL)       
        img = wx.Image("image.jpg", wx.BITMAP_TYPE_ANY)
        staticBitmap = wx.StaticBitmap(self.scrollPnl, wx.ID_ANY, wx.BitmapFromImage(img))
        self.scrollPnlSizer.Add(staticBitmap, 1, wx.EXPAND | wx.ALL, 3)

        self.mainSizer.Add(self.addBtn)
        self.mainSizer.Add(self.scrollPnl)

        self.SetSizerAndFit(self.mainSizer)


    def on_add(self, event):
        img = wx.Image("image.jpg", wx.BITMAP_TYPE_ANY)
        staticBitmap = wx.StaticBitmap(self.scrollPnl, wx.ID_ANY, wx.BitmapFromImage(img))
        self.scrollPnlSizer.Add(staticBitmap, 1, wx.EXPAND | wx.ALL, 3)
        self.scrollPnl.SetSizer(self.scrollPnlSizer)
        self.scrollPnl.SetAutoLayout(1)
        self.scrollPnl.SetupScrolling()  

        self.Refresh()
        self.Layout()

class TestPanel(wx.Panel):     
    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent)

        openDlg_btn = wx.Button(self, label="Open Dialog")
        self.Bind(wx.EVT_BUTTON, self.onBtn)

        mainSizer = wx.BoxSizer(wx.HORIZONTAL)
        mainSizer.Add(openDlg_btn, 0, wx.ALL, 10)
        self.SetSizerAndFit(mainSizer)
        self.Centre()

    def onBtn(self, event):
        dlg = ImageDlg(self, title='Image Dialog')
        dlg.SetSize((300,300))

        dlg.CenterOnScreen()
        dlg.ShowModal()  
        dlg.Destroy()


class TestFrame(wx.Frame):    
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)
        TestPanel(self)


if __name__ == "__main__":

    app = wx.PySimpleApp()
    frame = TestFrame(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>3583891</id><snippet>l</snippet></ROW><ROW><id>3583891</id><snippet>if all(x is None for x in l):
  ...
</snippet></ROW><ROW><id>3583903</id><snippet>#!/usr/bin/python
# -*- coding:utf8 -*-

import pygame, sys

#init pygame
pygame.init()

#init screen
screen=pygame.display.set_mode((800,600))
screen.fill((255,0,255))

#loading the images
texture=pygame.image.load("texture.jpg").convert()
texture_rect=texture.get_rect()
texture_rect.center=(200,300)
mask=pygame.Surface((texture_rect.width,texture_rect.height)) # mask should have only 2 colors: black and white
mask.fill((255,255,255))
pygame.draw.circle(mask,(0,0,0),(texture_rect.width/2,texture_rect.height/2),int(texture_rect.width*0.3))
mask_rect=mask.get_rect()
mask_rect.center=(600,300)

tmp_image=texture.copy() # make a copy of the texture to keep it unchanged for future usage
mask.set_colorkey((0,0,0)) # we want the black colored parts of the mask to be transparent
tmp_image.blit(mask,(0,0)) # blit the mask to the texture. the black parts are transparent so we see the pixels of the texture there

tmp_rect=tmp_image.get_rect()
tmp_rect.center=(400,300)
tmp_image.set_colorkey((255,255,255))
screen.blit(texture,texture_rect)
screen.blit(mask,mask_rect)
screen.blit(tmp_image,tmp_rect)

pygame.display.flip()

while 1:
    event=pygame.event.wait()
    if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key in [pygame.K_ESCAPE, pygame.K_q]):
        sys.exit()
</snippet></ROW><ROW><id>3583903</id><snippet>import pygame, sys

#init pygame
pygame.init()

#init screen
screen=pygame.display.set_mode((800,600))
screen.fill((255,0,255))

#loading the images
texture=pygame.image.load("texture.jpg").convert_alpha()
texture_rect=texture.get_rect()
texture_rect.center=(200,300)
mask=pygame.image.load("mask2.png").convert_alpha()
mask_rect=mask.get_rect()
mask_rect.center=(600,300)

textured_mask=mask.copy()
textured_rect=textured_mask.get_rect()
textured_rect.center=400,300

textured_mask.blit(texture,(0,0),None,pygame.BLEND_ADD)

screen.blit(texture,texture_rect)
screen.blit(mask,mask_rect)
screen.blit(textured_mask,textured_rect)

pygame.display.flip()

while 1:
    event=pygame.event.wait()
    if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key in [pygame.K_ESCAPE, pygame.K_q]):
        sys.exit()
</snippet></ROW><ROW><id>3583940</id><snippet>class Territory(models.Model):
    name = models.CharField(max_length=150)

class Country(Territory):
    iso = models.CharField(max_length=2, primary_key=True)

class Region(Territory):
    iso = models.CharField(max_length=2, blank=True)
    country = models.ForeignKey('Country')

class City(Territory):
    region = models.ForeignKey('Region')

class Artist(models.Model):
    name = models.CharField(max_length=128)
    born_place = models.ForeignKey(Territory)
    dead_place = models.ForeignKey(Territory)
    live_places = models.ManyToManyField(Territory)
    work_places = models.ManyToManyField(Territory)
</snippet></ROW><ROW><id>3584038</id><snippet>patch</snippet></ROW><ROW><id>3584038</id><snippet>patch -p1 &lt; downloaded-patch.diff</snippet></ROW><ROW><id>3584038</id><snippet>-p</snippet></ROW><ROW><id>3584038</id><snippet>patch</snippet></ROW><ROW><id>3584063</id><snippet>__new__</snippet></ROW><ROW><id>3584063</id><snippet>__new__</snippet></ROW><ROW><id>3584063</id><snippet>__new__</snippet></ROW><ROW><id>3584063</id><snippet>__init__</snippet></ROW><ROW><id>3584063</id><snippet>__new__</snippet></ROW><ROW><id>3584260</id><snippet>argmax()</snippet></ROW><ROW><id>3584260</id><snippet>argmax()</snippet></ROW><ROW><id>3584260</id><snippet>&gt;&gt;&gt; a = array([[10,50,30],[60,20,40]])
&gt;&gt;&gt; maxindex = a.argmax()
&gt;&gt;&gt; maxindex
3
</snippet></ROW><ROW><id>3584260</id><snippet>unravel_index(a.argmax(), a.shape)</snippet></ROW><ROW><id>3584260</id><snippet>&gt;&gt;&gt; from numpy import unravel_index
&gt;&gt;&gt; unravel_index(a.argmax(), a.shape)
(1, 0)
</snippet></ROW><ROW><id>3584855</id><snippet>import re

tests = [
    # Test data in original question.
    ( '',                '""'                ),
    ( 'a',               '"a"'               ),
    ( '"a"',             '"a"'               ), # No change.
    ( '""a" b"',         '""a" b"'           ), # No change.
    ( '"a" b',           '""a" b"'           ),
    ( '"a" "b"',         '""a" "b""'         ),
    ( 'a "b" c',         '"a "b" c"'         ),

    # Test data in latest edits.
    ( 'type',            '"type"'         ),    # Quote these.
    ( '"type" /?',       '""type" /?"'    ),
    ( '"type" "/?"',     '""type" "/?""'  ),
    ( 'type "a a" b',    '"type "a a" b"' ),
    ( 'type "" b',       '"type "" b"'    ),
    ( '"type"',          '"type"'         ),    # Don't quote.
    ( '""type" /?"',     '""type" /?"'    ),

    # Some more tests.
    ( '"a b" "c d"',     '""a b" "c d""'     ),
    ( '" a " foo " b "', '"" a " foo " b ""' ),
]

Q = '"'
re_quoted_items = re.compile(r'" \s* [^"\s] [^"]* \"', re.VERBOSE)

for orig, expected in tests:
    # The orig string w/o the internally quoted items.
    woqi = re_quoted_items.sub('', orig)

    if len(orig) == 0:
        orig_quoted = Q + orig + Q
    elif len(woqi) &gt; 0 and not (woqi[0] == Q and woqi[-1] == Q):
        orig_quoted = Q + orig + Q    
    else:
        orig_quoted = orig

    print orig_quoted == expected
</snippet></ROW><ROW><id>3585381</id><snippet>partial</snippet></ROW><ROW><id>3585381</id><snippet>functools</snippet></ROW><ROW><id>3585381</id><snippet>def match( packet_dict, criteria_list ):
    t = [ packet_dict[f] == v for f,v in criteria_list ]
    return any( t )
</snippet></ROW><ROW><id>3585432</id><snippet>  SUBROUTINE ZAP(I)
  I = 0
  RETURN
</snippet></ROW><ROW><id>3585432</id><snippet>  PRINT 23
  ZAP(23)
  PRINT 23
</snippet></ROW><ROW><id>3585432</id><snippet>const foo* const bar</snippet></ROW><ROW><id>3585432</id><snippet>const</snippet></ROW><ROW><id>3585432</id><snippet>bar</snippet></ROW><ROW><id>3585432</id><snippet>bar</snippet></ROW><ROW><id>3585432</id><snippet>const</snippet></ROW><ROW><id>3585432</id><snippet>const</snippet></ROW><ROW><id>3585432</id><snippet>tuple</snippet></ROW><ROW><id>3585478</id><snippet>assert each &gt;= 0, 'Growth Rate is not between 0 and 100'
</snippet></ROW><ROW><id>3585478</id><snippet>assert growthRates &gt;= 0, 'Growth Rate is not between 0 and 100'
</snippet></ROW><ROW><id>3586030</id><snippet>BlogPost.objects.order_by('-timestamp')[:5]
</snippet></ROW><ROW><id>3586165</id><snippet>urlpatterns = __import__(project_urls).whateversubmodule.urlpatterns
</snippet></ROW><ROW><id>3586168</id><snippet>ssh = paramiko.SSHClient()
ssh.connect(server, username=username, password=password)
ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd_to_execute)
</snippet></ROW><ROW><id>3586280</id><snippet>import win32gui
import win32ui 
wDC = win32gui.GetWindowDC(hwnd)
dcObj=win32ui.CreateDCFromHandle(wDC)
cDC=dcObj.CreateCompatibleDC()
dataBitMap = win32ui.CreateBitmap()
dataBitMap.CreateCompatibleBitmap(dcObj, w, h)
cDC.SelectObject(dataBitMap)
cDC.BitBlt((0,0),(w, h) , dcObj, (0,0), win32con.SRCCOPY)
dataBitMap.SaveBitmapFile(cDC, bmpfilenamename)
</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.main()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.main()</snippet></ROW><ROW><id>3586315</id><snippet>idle</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_enter()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_leave()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.main()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>3586315</id><snippet>gtk.gdk.threads_init()</snippet></ROW><ROW><id>3586756</id><snippet>namespace_packages</snippet></ROW><ROW><id>3586756</id><snippet>company_name</snippet></ROW><ROW><id>3586796</id><snippet>response().info().headers</snippet></ROW><ROW><id>3586796</id><snippet>X-Cache</snippet></ROW><ROW><id>3586796</id><snippet>X-Cache-Lookup</snippet></ROW><ROW><id>3586796</id><snippet>X-Cache: HIT from proxy.domain.tld</snippet></ROW><ROW><id>3586796</id><snippet>X-Cache MISS from proxy.domain.tld</snippet></ROW><ROW><id>3587099</id><snippet>try...except</snippet></ROW><ROW><id>3587099</id><snippet>    try:
        value=parser.getint(section,option)
    except ValueError:
        value=parser.get(section,option)
</snippet></ROW><ROW><id>3587099</id><snippet>import ConfigParser

filename='config'
parser=ConfigParser.SafeConfigParser()
parser.read([filename])
print(parser.sections())
# ['section']
for section in parser.sections():
    print(parser.options(section))
    # ['id', 'rb', 'person']
    for option in parser.options(section):
        try:
            value=parser.getint(section,option)
        except ValueError:
            value=parser.get(section,option)
        print(option,value,type(value))
        # ('id', 0, &lt;type 'int'&gt;)
        # ('rb', '', &lt;type 'str'&gt;)
        # ('person', 'name', &lt;type 'str'&gt;) 
print(parser.items('section'))
# [('id', '000'), ('rb', ''), ('person', 'name')]
</snippet></ROW><ROW><id>3587184</id><snippet>wait = sleep()
wait.sleepInSeconds(10)
</snippet></ROW><ROW><id>3587184</id><snippet>sleep</snippet></ROW><ROW><id>3587184</id><snippet>wait</snippet></ROW><ROW><id>3587184</id><snippet>wait = sleep().sleepInSeconds(10)
</snippet></ROW><ROW><id>3587184</id><snippet>sleepInSeconds()</snippet></ROW><ROW><id>3587184</id><snippet>None</snippet></ROW><ROW><id>3587184</id><snippet>sleepInSeconds()</snippet></ROW><ROW><id>3587184</id><snippet>self</snippet></ROW><ROW><id>3587184</id><snippet>sleep().sleepInSeconds(10)
</snippet></ROW><ROW><id>3587184</id><snippet>sleep</snippet></ROW><ROW><id>3587269</id><snippet>[row]*height</snippet></ROW><ROW><id>3587269</id><snippet>row</snippet></ROW><ROW><id>3587269</id><snippet>id()</snippet></ROW><ROW><id>3587269</id><snippet>&gt;&gt;&gt; grid = [[None] * width] * height
&gt;&gt;&gt; [id(row) for row in grid]
[148014860, 148014860, 148014860, 148014860, 148014860]
</snippet></ROW><ROW><id>3587269</id><snippet>[rowexpr for i in xrange(height)]</snippet></ROW><ROW><id>3587269</id><snippet>rowexpr</snippet></ROW><ROW><id>3587269</id><snippet>&gt;&gt;&gt; grid = [[None] * width for i in xrange(height)]
&gt;&gt;&gt; grid[2][3] = 'foo'
&gt;&gt;&gt; grid
[[None, None, None, None],
 [None, None, None, None],
 [None, None, None, 'foo'],
 [None, None, None, None],
 [None, None, None, None]]
</snippet></ROW><ROW><id>3587269</id><snippet>[None] * width</snippet></ROW><ROW><id>3587269</id><snippet>&gt;&gt;&gt; [id(row) for row in grid]
[148016172, 148015212, 148016236, 148016108, 148016332]
</snippet></ROW><ROW><id>3587489</id><snippet>self._children</snippet></ROW><ROW><id>3587489</id><snippet>[A, B, C]</snippet></ROW><ROW><id>3587489</id><snippet>A</snippet></ROW><ROW><id>3587489</id><snippet>A</snippet></ROW><ROW><id>3587489</id><snippet>[AA, AB, AC</snippet></ROW><ROW><id>3587489</id><snippet>cur_children = cur_children._children</snippet></ROW><ROW><id>3587489</id><snippet>B</snippet></ROW><ROW><id>3587489</id><snippet>[A, B, C]</snippet></ROW><ROW><id>3587489</id><snippet>AA</snippet></ROW><ROW><id>3587489</id><snippet>B</snippet></ROW><ROW><id>3587489</id><snippet>is_current_node()</snippet></ROW><ROW><id>3587489</id><snippet>None</snippet></ROW><ROW><id>3587489</id><snippet>bool(None) == False</snippet></ROW><ROW><id>3587489</id><snippet>def is_active(self):

    def check_children(children):
        for child in children:
            if child.is_current_node():
                return True
            else:
                if children._children:
                    return check_children(children._children)
        return False

    if self.is_current_node():
        return True
    return check_children(children)
</snippet></ROW><ROW><id>3587600</id><snippet>def your_code():
    # ...
    warnings.warn("deprecated", DeprecationWarning)
    # ...

def your_test():
    with warnings.catch_warnings(True) as w:
        your_code()
        assert len(w) &gt; 1
</snippet></ROW><ROW><id>3587600</id><snippet>assert str(w.args[0]) == "deprecated"</snippet></ROW><ROW><id>3587731</id><snippet>python</snippet></ROW><ROW><id>3587731</id><snippet>python3</snippet></ROW><ROW><id>3587731</id><snippet>python</snippet></ROW><ROW><id>3587830</id><snippet>m_product_types = models.ForeignKey(MProductTypes, 
                                    verbose_name = u'Produktart',
                                   )
</snippet></ROW><ROW><id>3587987</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; a = struct.pack("dd", 1.000000,1.000001)
&gt;&gt;&gt; b = struct.unpack("ll",a)
&gt;&gt;&gt; b[1] - b[0]
4503599627
&gt;&gt;&gt; a = struct.pack("dd", 1.000000000,1.000000001)
&gt;&gt;&gt; b = struct.unpack("ll",a)
&gt;&gt;&gt; b[1] - b[0]
4503600
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3588183</id><snippet>x.decode</snippet></ROW><ROW><id>3588183</id><snippet>x</snippet></ROW><ROW><id>3588183</id><snippet>ansi</snippet></ROW><ROW><id>3588183</id><snippet>x</snippet></ROW><ROW><id>3588183</id><snippet>encode</snippet></ROW><ROW><id>3588183</id><snippet>decode</snippet></ROW><ROW><id>3588183</id><snippet>x</snippet></ROW><ROW><id>3588310</id><snippet>os.environ['USER_EMAIL'] = 'info@example.com'
</snippet></ROW><ROW><id>3588310</id><snippet>os.environ['USER_IS_ADMIN'] = '1'
</snippet></ROW><ROW><id>3588310</id><snippet>class TestingRoutes(WebTestCase, unittest.TestCase):

    APPLICATION = application()

    def tearDown(self):
        os.environ['USER_EMAIL'] = ''
        os.environ['USER_IS_ADMIN'] = ''

    #AdminIndex .....
    def test_adminindex_no_user(self):
        #No user: redirect to login form
        response = app.get( url_map['adminindex'] )
        self.assertRedirects(response)

    def test_adminindex_user(self):      
        os.environ['USER_EMAIL'] = 'info@example.com'
        response = app.get( url_map['adminindex'] )
        self.assertForbidden(response)

    def test_adminindex_admin(self):
        os.environ['USER_EMAIL'] = 'info@example.com'
        os.environ['USER_IS_ADMIN'] = '1'
        response = app.get( url_map['adminindex'] )
        self.assertOK(response)
</snippet></ROW><ROW><id>3588390</id><snippet>replace</snippet></ROW><ROW><id>3588390</id><snippet>line[8] = line[8].replace(letter, "")
</snippet></ROW><ROW><id>3588460</id><snippet>''.join([s for s in string1 if s in a])
</snippet></ROW><ROW><id>3588460</id><snippet>[s for s in string1 if s in a]
</snippet></ROW><ROW><id>3588460</id><snippet>''.join([...])
</snippet></ROW><ROW><id>3588790</id><snippet>intltool-extract --type=gettext/glade foo.glade</snippet></ROW><ROW><id>3588790</id><snippet>intltool</snippet></ROW><ROW><id>3588809</id><snippet>a == b</snippet></ROW><ROW><id>3588809</id><snippet>A.__eq__</snippet></ROW><ROW><id>3588809</id><snippet>self.value == other</snippet></ROW><ROW><id>3588809</id><snippet>B.__eq__</snippet></ROW><ROW><id>3588809</id><snippet>class A(object):
    def __eq__(self, other):
        print "A __eq__ called: %r == %r ?" % (self, other)
        return self.value == other
class B(object):
    def __eq__(self, other):
        print "B __eq__ called: %r == %r ?" % (self, other)
        return self.value == other

a = A()
a.value = 3
b = B()
b.value = 4
a == b
</snippet></ROW><ROW><id>3588809</id><snippet>A __eq__ called: &lt;__main__.A object at 0x013BA070&gt; == &lt;__main__.B object at 0x013BA090&gt; ?
B __eq__ called: &lt;__main__.B object at 0x013BA090&gt; == 3 ?
</snippet></ROW><ROW><id>3588898</id><snippet>dev_appserver.py --datastore_path=/tmp/myapp_datastore myapp</snippet></ROW><ROW><id>3589178</id><snippet>event</snippet></ROW><ROW><id>3589178</id><snippet>event.KeyID</snippet></ROW><ROW><id>3589178</id><snippet>def onKeyboardEvent(event):
    if event.KeyID == 115:      #F4
        startTimer(doTimer, 2)
    if event.KeyID == 113:
        stopTimer()

def doTimer():
    selectAndCopy(468,722)
    getClipboard()
</snippet></ROW><ROW><id>3589178</id><snippet>startTimer()</snippet></ROW><ROW><id>3589178</id><snippet>stopTimer()</snippet></ROW><ROW><id>3589192</id><snippet>.py</snippet></ROW><ROW><id>3589192</id><snippet>sys.path</snippet></ROW><ROW><id>3589192</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3589192</id><snippet>filepath</snippet></ROW><ROW><id>3589192</id><snippet>QString</snippet></ROW><ROW><id>3589192</id><snippet>.encode</snippet></ROW><ROW><id>3589192</id><snippet>import sys, os

def importfrom(filepath):
    ufp = unicode(filepath)
    thedir, thefile = os.path.split(ufp)
    if sys.path[0] != thedir:
      sys.path.insert(0, thedir)
    themodule, theext = os.path.splitext(thefile)
    return __import__(themodule)
</snippet></ROW><ROW><id>3589192</id><snippet>sys.path</snippet></ROW><ROW><id>3589192</id><snippet>importfrom</snippet></ROW><ROW><id>3589192</id><snippet>from PyQt4 import QtGui 
import inspect

def is_widget(w):
    return inspect.isclass(w) and issubclass(w, QtGui.QWidget)

def all_widget_classes(amodule):
    return [v for n, v in inspect.getmembers(amodule, is_widget)]
</snippet></ROW><ROW><id>3589192</id><snippet>amodule</snippet></ROW><ROW><id>3589200</id><snippet>wm_overrideredirect</snippet></ROW><ROW><id>3589261</id><snippet>b = random.randint(2, 38)
a = random.randint(1, b - 1)
c = random.randint(b + 1, 39)
return [a, b - a, c - b, 40 - c]
</snippet></ROW><ROW><id>3589335</id><snippet>&gt;&gt;&gt; class X:
...   def Y(self): pass
... 
&gt;&gt;&gt; type(X.Y)
&lt;class 'function'&gt;
</snippet></ROW><ROW><id>3589364</id><snippet>Console.Write(File.ReadLines(@"s:\source\transactions.dat").ElementAt(219506323));
</snippet></ROW><ROW><id>3589364</id><snippet>Console.Write(File.ReadLines(filename).ElementAt(linenumber - 1));
</snippet></ROW><ROW><id>3589364</id><snippet>Console.Write(string.Join("\n",
              File.ReadLines(filename).Skip(linenumber - 5).Take(10)));
</snippet></ROW><ROW><id>3589364</id><snippet>File
.ReadLines(filename)
.Skip(linenumber - 5)
.Take(10)
.AsObservable()
.Do(Console.WriteLine);
</snippet></ROW><ROW><id>3589364</id><snippet>linecache</snippet></ROW><ROW><id>3589364</id><snippet>    fp = open(fullname, 'rU')
    lines = fp.readlines()
    fp.close()
</snippet></ROW><ROW><id>3589398</id><snippet>__unicode__</snippet></ROW><ROW><id>3589398</id><snippet>http://www.djangoproject.com/documentation/models/str/
</snippet></ROW><ROW><id>3589505</id><snippet>def enum(classname, values):
    class EnumMeta(type):
        def __iter__(cls):
            return cls._instances.itervalues()

    class EnumType(object):
        __metaclass__ = EnumMeta
        _instances = {}
        _next_id = 0
        def __init__(self, value):
            self.value = value
            self.id = type(self)._next_id
            type(self)._next_id += 1

        def instance(self, value):
            return type(self)._instances[value]

    cls = type(classname, (EnumType, ), {})
    instances = dict((value, cls(value)) for value in values)
    cls._instances = instances

    def __new__(cls, value):
        raise TypeError('No more instances allowed')

    cls.__new__ = staticmethod(__new__)
    return cls


Genre = enum('Genre', ['scifi', 'comic', 'science'])


for item in Genre:
    print item, item.value, item.id
    assert(item is Genre(item.value))
    assert(item is item.instance(item.value))

Genre('romance')
</snippet></ROW><ROW><id>3589505</id><snippet>Genre.comic = Genre('comic')</snippet></ROW><ROW><id>3589505</id><snippet>class Genre(GenreBase):
    genres = ['comic', 'scifi', ... ]
    def __getattr__(self, attr):
        if attr in type(self).genres:
            self.__dict__[attr] = type(self)(attr)
        return self.__dict__[attr]
</snippet></ROW><ROW><id>3589505</id><snippet>self.__dict__[attr] == type(self)(attr) 
</snippet></ROW><ROW><id>3589505</id><snippet>type(self).__dict__[attr] = type(self)(attr)
</snippet></ROW><ROW><id>3589505</id><snippet>Genre</snippet></ROW><ROW><id>3589505</id><snippet>type(self)(attr)</snippet></ROW><ROW><id>3589505</id><snippet>Genre(attr)</snippet></ROW><ROW><id>3589636</id><snippet>pickle</snippet></ROW><ROW><id>3589636</id><snippet>cPickle</snippet></ROW><ROW><id>3589636</id><snippet># data_miner.py
import pickle

animals = ['Chicken', 'Sheep', 'Cattle', 'Horse']
population = [150, 200, 50, 30]

with open('data_miner.pik', 'wb') as f:
  pickle.dump([animals, population], f, -1)
</snippet></ROW><ROW><id>3589636</id><snippet># plotter.py
import pickle

with open('data_miner.pik', 'rb') as f:
    animals, population = pickle.load(f)

print animals, population
</snippet></ROW><ROW><id>3589636</id><snippet>data_miner.py</snippet></ROW><ROW><id>3589636</id><snippet>globals()</snippet></ROW><ROW><id>3589636</id><snippet>globals()</snippet></ROW><ROW><id>3589636</id><snippet>_</snippet></ROW><ROW><id>3589636</id><snippet>import pickle as _pickle</snippet></ROW><ROW><id>3589636</id><snippet>with open ... as _f</snippet></ROW><ROW><id>3589636</id><snippet>globals()</snippet></ROW><ROW><id>3589636</id><snippet>pickle.load</snippet></ROW><ROW><id>3589636</id><snippet>dict</snippet></ROW><ROW><id>3589636</id><snippet>list</snippet></ROW><ROW><id>3589636</id><snippet>dict</snippet></ROW><ROW><id>3589675</id><snippet>&gt;&gt;&gt; S = set(['a', 'b', 'c'])
&gt;&gt;&gt; S
set(['a', 'c', 'b'])
&gt;&gt;&gt; 'b' in S
True
&gt;&gt;&gt; S.add('d')
&gt;&gt;&gt; S
set(['a', 'c', 'b', 'd'])
&gt;&gt;&gt; S.add('b')
&gt;&gt;&gt; S
set(['a', 'c', 'b', 'd'])
</snippet></ROW><ROW><id>3589766</id><snippet>&lt;div id="fb-root"&gt;&lt;/div&gt;
&lt;script&gt;
  window.fbAsyncInit = function() {
    //[here goes your code:]
    FB.init({appId:'137101656332358', status: true, cookie: true, xfbml: true});
    FB.Event.subscribe('auth.sessionChange', function(response) {
        if (response.session) {
        // A user has logged in, and a new cookie has been save
        } else {
        // The user has logged out, and the cookie has been cleared
        }
    });
  };
  (function() {
    var e = document.createElement('script'); e.async = true;
    e.src = document.location.protocol +
      '//connect.facebook.net/en_US/all.js';
    document.getElementById('fb-root').appendChild(e);
  }());
&lt;/script&gt; 
</snippet></ROW><ROW><id>3590168</id><snippet>str(...)</snippet></ROW><ROW><id>3590168</id><snippet>print ', '.join(str(x) for x in list_of_ints)
</snippet></ROW><ROW><id>3590227</id><snippet>for</snippet></ROW><ROW><id>3590227</id><snippet>month_iter = iter(month)
try:
  while True:
    week = next(month_iter)
    # here begins your code
    week = [day[0] for day in week]
    # here ends your code
except StopIteration:
  pass
</snippet></ROW><ROW><id>3590227</id><snippet>month</snippet></ROW><ROW><id>3590227</id><snippet>month = [[day[0] for day in week] for week in month]
</snippet></ROW><ROW><id>3590227</id><snippet>month</snippet></ROW><ROW><id>3590227</id><snippet>enumerate</snippet></ROW><ROW><id>3590340</id><snippet>extra()</snippet></ROW><ROW><id>3590340</id><snippet>Car.objects.all().extra(select = {'sales': 0})
</snippet></ROW><ROW><id>3590619</id><snippet>class Email(models.Model):
    email = models.EmailField()
    user = models.ForeignKey(User)

u = User.objects.get(pk=1)
u.email_set.all()
</snippet></ROW><ROW><id>3590652</id><snippet>from cStringIO import StringIO

source_code = StringIO()
source_code.write(final_pdf)
exec(source_code)
p = doIt(buffer)
</snippet></ROW><ROW><id>3590755</id><snippet>import gtk

labels = []

def changeLabel(widget):
    l = p.get_children()[1]
    p.remove(l)
    nl = labels[l is l1]
    p.add2(nl)

w = gtk.Window()
w.connect('destroy', lambda w: gtk.main_quit())
p = gtk.HPaned()
w.add(p)
b = gtk.Button('change label')
b.connect('clicked', changeLabel)
p.add1(b)
l1 = gtk.Label('hello world')
l1.show()
p.add2(l1)
l2 = gtk.Label('ciao mondo')
l2.show()
labels = [l1, l2]
which = 0
w.show_all()
gtk.main()
</snippet></ROW><ROW><id>3591501</id><snippet>def get(self):
    #See if logged in
    self.Session = Session()
    if not 'userkey' in self.Session:
        doRender(
            self,
            'base/index.html',
            {'error' : 'Please login to vote'})
        return

    #Get current vote total
    key = self.request.get('url_id')
    vurl = models.URL.get_by_id(int(key))
    vurl.votes += 1 #pull current site vote total &amp; add 1
    vurl.put();

    logging.info('Adding a vote')

    #Create a new Vote object
    newvote = models.Vote(user=self.Session['userkey'], url=vurl)
    newvote.put();

    self.redirect('/', { })
</snippet></ROW><ROW><id>3591690</id><snippet>ethrema()</snippet></ROW><ROW><id>3591690</id><snippet>str</snippet></ROW><ROW><id>3591690</id><snippet>eth1 = [ethrema(w) for w in text]
#AND
eth2 = [ethremb(w) for w in text]
</snippet></ROW><ROW><id>3591690</id><snippet>ethremb(ethrema(word))</snippet></ROW><ROW><id>3591690</id><snippet>def ethrema(word):
    if word.endswith('th'):
        return word[:-2] + 's'
    else
        return word

def ethremb(word):
    if word.endswith('es'):
        return word[:-2] + 's'
    else
        return word

#OR

def ethrema(word):
    if word.endswith('th'):
        return word[:-2] + 's'
    elif word.endswith('es'):
        return word[:-2] + 's'
    else
        return word
</snippet></ROW><ROW><id>3591734</id><snippet>set</snippet></ROW><ROW><id>3591734</id><snippet>list</snippet></ROW><ROW><id>3591734</id><snippet>hashable</snippet></ROW><ROW><id>3591835</id><snippet>input("prompt: ")</snippet></ROW><ROW><id>3591835</id><snippet>raw_input("promt: ")</snippet></ROW><ROW><id>3591835</id><snippet>python mine.py</snippet></ROW><ROW><id>3592644</id><snippet>from_date=datetime.datetime(2002,3,17,0,0,0)
to_date=from_date+datetime.timedelta(days=1)
idx=(A[:,0]&gt;from_date) &amp; (A[:,0]&lt;=to_date)
print(A[idx])
# array([[2002-03-17 16:31:33, 237],
#        [2002-03-17 16:47:18, 238],
#        [2002-03-17 18:29:31, 239],
#        [2002-03-17 20:10:11, 240]], dtype=object)
</snippet></ROW><ROW><id>3592644</id><snippet>A[:,0]</snippet></ROW><ROW><id>3592644</id><snippet>A</snippet></ROW><ROW><id>3592644</id><snippet>A[:,0]</snippet></ROW><ROW><id>3592644</id><snippet>datetime.date</snippet></ROW><ROW><id>3592644</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3592644</id><snippet>In [63]: A[:,0]&gt;datetime.datetime(2002,3,17,0,0,0)
Out[63]: array([False,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>3592644</id><snippet>datetime.datetime(2002,3,17,0,0,0)&lt;A[:,0]&lt;=datetime.datetime(2002,3,18,0,0,0)
</snippet></ROW><ROW><id>3592644</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3592644</id><snippet>__lt__</snippet></ROW><ROW><id>3592644</id><snippet>__lt__</snippet></ROW><ROW><id>3592644</id><snippet>In [69]: (A[:,0]&gt;datetime.datetime(2002,3,17,0,0,0)) &amp; (A[:,0]&lt;=datetime.datetime(2002,3,18,0,0,0))
Out[69]: array([False,  True,  True,  True,  True, False, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>3592644</id><snippet>A</snippet></ROW><ROW><id>3592769</id><snippet>syncoutput,sync_error = p.communicate()
print(syncoutput)
</snippet></ROW><ROW><id>3592769</id><snippet>\n</snippet></ROW><ROW><id>3592769</id><snippet>syncoutput</snippet></ROW><ROW><id>3593025</id><snippet>threading</snippet></ROW><ROW><id>3593025</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>3593025</id><snippet>try</snippet></ROW><ROW><id>3593025</id><snippet>finally</snippet></ROW><ROW><id>3593025</id><snippet>with</snippet></ROW><ROW><id>3593025</id><snippet>with somelock:</snippet></ROW><ROW><id>3593025</id><snippet>somelock</snippet></ROW><ROW><id>3593025</id><snippet>threading.Lock</snippet></ROW><ROW><id>3593043</id><snippet>for x, y in zip(vsort, vsorta):
       print x, y
</snippet></ROW><ROW><id>3593043</id><snippet>zip</snippet></ROW><ROW><id>3593132</id><snippet>def get_gps():
gpspos = GPS.getActualPosition() #Read GPS position
</snippet></ROW><ROW><id>3593132</id><snippet>if</snippet></ROW><ROW><id>3593132</id><snippet>while</snippet></ROW><ROW><id>3593232</id><snippet>mycanvas.showPage()</snippet></ROW><ROW><id>3593300</id><snippet>import lxml.etree as le

with open('doc.xml','r') as f:
    doc=le.parse(f)
    for elem in doc.xpath('//*[attribute::lang]'):
        if elem.attrib['lang']=='en':
            elem.attrib.pop('lang')
        else:
            parent=elem.getparent()
            parent.remove(elem)
    print(le.tostring(doc))
</snippet></ROW><ROW><id>3593300</id><snippet>&lt;root&gt;
    &lt;elm&gt;Common content&lt;/elm&gt;

    &lt;elm&gt;
        &lt;elm&gt;Content EN&lt;/elm&gt;
        &lt;/elm&gt;

    &lt;elm&gt;Common content&lt;/elm&gt;

    &lt;elm&gt;Content EN&lt;/elm&gt;
    &lt;elm&gt;
        &lt;elm&gt;Content EN&lt;/elm&gt;
        &lt;elm&gt;Content EN&lt;/elm&gt;
    &lt;/elm&gt;

    &lt;/root&gt;
</snippet></ROW><ROW><id>3593451</id><snippet>d['name'] = line.find('div', {'class':'torrentname'}).find('a').text
</snippet></ROW><ROW><id>3593451</id><snippet>anchor = line.find('div', {'class':'torrentname'}).find('a')
d['name'] = ''.join(anchor.findAll(text=True))
</snippet></ROW><ROW><id>3593479</id><snippet>yield (key,) + tuple(subset_of_grp)</snippet></ROW><ROW><id>3593652</id><snippet>def config(name, description, default=None):
    ComponentMeta.config_items.append((name, description, default))

class ComponentMeta(type):
    config_items = []
    def __init__(cls, clsname, bases, clsdict):
        for options in ComponentMeta.config_items:
                cls.add_config(*options)
        ComponentMeta.config_items = []

class Component(object):
    __metaclass__ = ComponentMeta
    config_items = [] # this is only for testing. you don't need it
    @classmethod
    def add_config(cls, name, description, default=None):
        #also for testing
        cls.config_items.append((name, description, default))

class Model1(Component):
    config('n', 'number of burz to instigate')
    config('skip', 'skip any barz in the data', default=True)

print Model1.config_items
</snippet></ROW><ROW><id>3593652</id><snippet>ComponentMeta.config_instances</snippet></ROW><ROW><id>3593652</id><snippet>ComponentMeta</snippet></ROW><ROW><id>3593652</id><snippet>config_item</snippet></ROW><ROW><id>3593652</id><snippet>ComponentMeta</snippet></ROW><ROW><id>3593652</id><snippet>super</snippet></ROW><ROW><id>3593652</id><snippet>ComponentMeta.config_items</snippet></ROW><ROW><id>3593716</id><snippet>#!/usr/bin/python 
from matplotlib import cm
import matplotlib.pyplot as plt

#data
x=[1,2,4]
y=[11,12,8]

for i in range(0,len(x)):
  plt.bar(x[i],y[i],color=cm.jet(1.*i/len(x)))

plt.show()
</snippet></ROW><ROW><id>3593846</id><snippet>soup</snippet></ROW><ROW><id>3593846</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>3593846</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen("http://www.icc-ccs.org/prc/piracyreport.php")
soup = BeautifulSoup(page)
for incident in soup('td', width="90%"):
    where, linebreak, what = incident.contents[:3]
    print where.strip()
    print what.strip()
    print
</snippet></ROW><ROW><id>3594278</id><snippet>globals()</snippet></ROW><ROW><id>3594278</id><snippet>locals()</snippet></ROW><ROW><id>3594278</id><snippet>module</snippet></ROW><ROW><id>3594278</id><snippet>value</snippet></ROW><ROW><id>3594278</id><snippet>renderers = {'Blah': BlahRenderer, 'Foo': FooRenderer, ...}
</snippet></ROW><ROW><id>3594640</id><snippet>dict</snippet></ROW><ROW><id>3594640</id><snippet>Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; word_list = ['Jellicle', 'Cats', 'are', 'black', 'and', 'white,', 'Jellicle', 'Cats', 'are', 'rather', 'small;', 'Jellicle', 'Cats', 'are', 'merry', 'and', 'bright,', 'And', 'pleasant', 'to', 'hear', 'when', 'they', 'caterwaul.', 'Jellicle', 'Cats', 'have', 'cheerful', 'faces,', 'Jellicle', 'Cats', 'have', 'bright', 'black', 'eyes;', 'They', 'like', 'to', 'practise', 'their', 'airs', 'and', 'graces', 'And', 'wait', 'for', 'the', 'Jellicle', 'Moon', 'to', 'rise.', '']
&gt;&gt;&gt; word_counter = {}
&gt;&gt;&gt; for word in word_list:
...     if word in word_counter:
...         word_counter[word] += 1
...     else:
...         word_counter[word] = 1
... 
&gt;&gt;&gt; popular_words = sorted(word_counter, key = word_counter.get, reverse = True)
&gt;&gt;&gt; 
&gt;&gt;&gt; top_3 = popular_words[:3]
&gt;&gt;&gt; 
&gt;&gt;&gt; top_3
['Jellicle', 'Cats', 'and']
</snippet></ROW><ROW><id>3594685</id><snippet>.*</snippet></ROW><ROW><id>3594685</id><snippet>.*</snippet></ROW><ROW><id>3595220</id><snippet>cobject-&gt;f()</snippet></ROW><ROW><id>3595220</id><snippet>const</snippet></ROW><ROW><id>3595220</id><snippet>const</snippet></ROW><ROW><id>3595220</id><snippet>bool</snippet></ROW><ROW><id>3595220</id><snippet>bool</snippet></ROW><ROW><id>3595220</id><snippet>Selection</snippet></ROW><ROW><id>3595220</id><snippet>__init__</snippet></ROW><ROW><id>3595220</id><snippet>Selection</snippet></ROW><ROW><id>3595220</id><snippet>Selection</snippet></ROW><ROW><id>3595815</id><snippet>second_longest = sorted(sentence.split(), key=len)[-2]
</snippet></ROW><ROW><id>3595867</id><snippet>import subprocess
from multiprocessing import Process

Process(target=subprocess.call, args=(('ls', '-l', ), )).start()
</snippet></ROW><ROW><id>3595888</id><snippet>class myClass(object):

    def __init__(self):
        self.a = ''

    def A(self):
        self.a = 'A'
        print self.a

    def B(self):
        print self.a + ' in B'


def main():
    stuff = myClass()
    stuff.A()
    stuff.B()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3595896</id><snippet>reviews = [{'content': c, 'author': a} for c, a in zip(contentList, authorList)]
</snippet></ROW><ROW><id>3595934</id><snippet>TagData()
</snippet></ROW><ROW><id>3595934</id><snippet>def addVal(self,value):
    self.val.append(value)
</snippet></ROW><ROW><id>3595934</id><snippet>a=TagData()
a.addVal('value')
tagList.append(a)
</snippet></ROW><ROW><id>3595934</id><snippet>a=TagData()
a.val.append('text')
tagList.append(a)
</snippet></ROW><ROW><id>3596210</id><snippet>Question</snippet></ROW><ROW><id>3596210</id><snippet>Product</snippet></ROW><ROW><id>3596210</id><snippet>from django.contrib.auth.models import User

class Answer(models.Model):
    user = models.ForeignKey(User)
    question = models.ForeignKey(Question)
    answer = models.CharField(choices=ANSWER_CHOICES, max_length=1)
</snippet></ROW><ROW><id>3596210</id><snippet>request.session</snippet></ROW><ROW><id>3596210</id><snippet>class QuestionForm(forms.Form):

    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
             initial=None, error_class=ErrorList, label_suffix=':',
             empty_permitted=False):
        super(QuestionForm, self).__init__(data, files, auto_id, prefix,
             initial, error_class, label_suffix, empty_permitted)
        self.questions = Question.objects.all()
        if self.questions:
            for question in self.question:
                self.fields['question_%s' % question.pk] =\
                    forms.ChoiceField(label=question.question_text,
                        choices=[(q.pk, q.answer) for q in question.answer_set.all()])
</snippet></ROW><ROW><id>3596516</id><snippet>import string
keyset = set(open('keywords.txt').read().splitlines())
for lineno,line in  enumerate(open('textfile.txt')):
    result = [kw
              for kw in keyset
              for w in line.split()
              if kw in w and w.strip(string.punctuation) == kw]
    if result:
        print "%5s (%s): %s" % (lineno,', '.join(result), line),
</snippet></ROW><ROW><id>3596666</id><snippet>del ret["_%s__%s" % (MyClasss.__name__, "prv")]
</snippet></ROW><ROW><id>3596670</id><snippet>class Bar(object):

    @classmethod
    def bar(cls):
        # code
        print cls.__name__

class Foo(Bar):
    # code
    pass

&gt;&gt;&gt; Bar.bar()
Bar

&gt;&gt;&gt; Foo.bar()
Foo
</snippet></ROW><ROW><id>3596865</id><snippet>set_cookie</snippet></ROW><ROW><id>3596865</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br=mechanize.Browser()

&gt;&gt;&gt; br.set_cookie?

Definition: br.set_cookie(self, cookie_string)
Docstring:
    Request to set a cookie.

    Note that it is NOT necessary to call this method under ordinary
    circumstances: cookie handling is normally entirely automatic.  The
    intended use case is rather to simulate the setting of a cookie by
    client script in a web page (e.g. JavaScript).  In that case, use of
    this method is necessary because mechanize currently does not support
    JavaScript, VBScript, etc.

    The cookie is added in the same way as if it had arrived with the
    current response, as a result of the current request.  This means that,
    for example, if it is not appropriate to set the cookie based on the
    current request, no cookie will be set.

    The cookie will be returned automatically with subsequent responses
    made by the Browser instance whenever that's appropriate.

    cookie_string should be a valid value of the Set-Cookie header.

    For example:

    browser.set_cookie(
        "sid=abcdef; expires=Wednesday, 09-Nov-06 23:12:40 GMT")

    Currently, this method does not allow for adding RFC 2986 cookies.
    This limitation will be lifted if anybody requests it.
</snippet></ROW><ROW><id>3597002</id><snippet>## Callback function invoked when header data is ready
def header(buf):
    import sys
    sys.stdout.write(buf)
    # Returning None implies that all bytes were written

c = pycurl.Curl()
c.setopt(pycurl.URL, "http://www.siteA.com/")
c.setopt(pycurl.HEADERFUNCTION, header)
c.perform()
</snippet></ROW><ROW><id>3597160</id><snippet>def user_ok(self):
    key_name = 'info@example.com'
    new_user = Profile(key_name=key_name)
    new_user.put()

    os.environ['USER_EMAIL'] = key_name
    os.environ['USER_ID'] = key_name
    os.environ['USER_IS_ADMIN'] = ''
    response = self.get( '/appindex' )
    self.assertOK(response)

    # Now let's reset it to check that the user will be redirected.
    new_user.delete()
    response = self.get( '/appindex' )
    self.assertEqual(response.headers['Location'], 'http://localhost/newuser')
</snippet></ROW><ROW><id>3597342</id><snippet>dealer = list(dealers.select().order_by(asc(dealers.c.id)).execute())
</snippet></ROW><ROW><id>3597419</id><snippet>function do_ajax () {
    $.getJSON ('{% url path.to.my_ajax_view %}', function (data) {
        $("#status").html (data.status);
    });
}
</snippet></ROW><ROW><id>3597419</id><snippet>def my_view(request):
    if request.is_ajax():
        # generate response for your ajax script
    else:
        # generate the response for normal request
        # (render template of your page)
</snippet></ROW><ROW><id>3597537</id><snippet>&lt;br clear="all"&gt;</snippet></ROW><ROW><id>3597537</id><snippet>text = """[image @alt:alien; @title:reddit alien;]http://www.reddit.com/alien1.png[/image]

But I should have no problem matching:

[image @title:reddit alien; @alt:alien;]http://www.reddit.com/alien2.png[/image]
"""

from pyparsing import Suppress, Group, Word, alphas, SkipTo, Dict, ZeroOrMore

LBRACK,RBRACK,COLON,SEMI,AT = map(Suppress,"[]:;@")
tagAttribute = Group(AT + Word(alphas) + COLON + SkipTo(SEMI) + SEMI)
imageTag = LBRACK + "image" + Dict(ZeroOrMore(tagAttribute)) + RBRACK
imageLink = imageTag + SkipTo("[/image]")("text")

for taginfo in imageLink.searchString(text):
    print taginfo.alt
    print taginfo.title
    print taginfo.text
    print
</snippet></ROW><ROW><id>3597537</id><snippet>alien
reddit alien
http://www.reddit.com/alien1.png

alien
reddit alien
http://www.reddit.com/alien2.png
</snippet></ROW><ROW><id>3597712</id><snippet>def dec2hex(d):
    """return a two character hexadecimal string representation of integer d"""
    r = "%X" % d
    return r if len(r) &gt; 1 else r+r
</snippet></ROW><ROW><id>3597712</id><snippet>def dec2hex(d):
    """return a two character hexadecimal string representation of integer d"""
    return "%02X" % d
</snippet></ROW><ROW><id>3597996</id><snippet>django.db.models.base.ModelBase</snippet></ROW><ROW><id>3597996</id><snippet>user</snippet></ROW><ROW><id>3597996</id><snippet>contribute_to_class</snippet></ROW><ROW><id>3597996</id><snippet>contribute_to_class</snippet></ROW><ROW><id>3597996</id><snippet>setattr</snippet></ROW><ROW><id>3597996</id><snippet>ForeignKey</snippet></ROW><ROW><id>3597996</id><snippet>contribute_to_class</snippet></ROW><ROW><id>3597996</id><snippet>ModelBase</snippet></ROW><ROW><id>3597996</id><snippet>ForeignKey.contribute_to_class</snippet></ROW><ROW><id>3597996</id><snippet>ModelClass.user</snippet></ROW><ROW><id>3597996</id><snippet>django.db.models.fields.related.ReverseSingleRelatedObjectDescriptor</snippet></ROW><ROW><id>3597996</id><snippet>ReverseSingleRelatedObjectDescriptor</snippet></ROW><ROW><id>3597996</id><snippet># make a user and an instance of our model
&gt;&gt;&gt; user = User(username="example")
&gt;&gt;&gt; my_instance = MyModel(user=user)

# user is a ReverseSingleRelatedObjectDescriptor
&gt;&gt;&gt; MyModel.user
&lt;django.db.models.fields.related.ReverseSingleRelatedObjectDescriptor object&gt;

# user hasn't been loaded, yet
&gt;&gt;&gt; my_instance._user_cache
AttributeError: 'MyModel' object has no attribute '_user_cache'

# ReverseSingleRelatedObjectDescriptor.__get__ loads the user
&gt;&gt;&gt; my_instance.user
&lt;User: example&gt;

# now the user is cached and won't be looked up again
&gt;&gt;&gt; my_instance._user_cache
&lt;User: example&gt;
</snippet></ROW><ROW><id>3597996</id><snippet>ReverseSingleRelatedObjectDescriptor.__get__</snippet></ROW><ROW><id>3597996</id><snippet>user</snippet></ROW><ROW><id>3598029</id><snippet>byAxB= [item for sublist in response for item in sublist]</snippet></ROW><ROW><id>3598029</id><snippet>for sublist in response
</snippet></ROW><ROW><id>3598029</id><snippet>for</snippet></ROW><ROW><id>3598029</id><snippet>sublist</snippet></ROW><ROW><id>3598029</id><snippet>response</snippet></ROW><ROW><id>3598029</id><snippet>response</snippet></ROW><ROW><id>3598029</id><snippet>sublist</snippet></ROW><ROW><id>3598029</id><snippet>response</snippet></ROW><ROW><id>3598029</id><snippet>for item in sublist
</snippet></ROW><ROW><id>3598029</id><snippet>for</snippet></ROW><ROW><id>3598029</id><snippet>sublist</snippet></ROW><ROW><id>3598029</id><snippet>item</snippet></ROW><ROW><id>3598029</id><snippet>for sublist in response:
    for item in sublist:
</snippet></ROW><ROW><id>3598029</id><snippet>[</snippet></ROW><ROW><id>3598029</id><snippet>item</snippet></ROW><ROW><id>3598029</id><snippet>]</snippet></ROW><ROW><id>3598029</id><snippet>for</snippet></ROW><ROW><id>3598029</id><snippet>result = []

for sublist in response:
    for item in sublist:
        result.append(item)
</snippet></ROW><ROW><id>3598029</id><snippet>[
    item 
    for sublist in response
    for item in sublist
]
</snippet></ROW><ROW><id>3598029</id><snippet>map</snippet></ROW><ROW><id>3598029</id><snippet>filter</snippet></ROW><ROW><id>3598029</id><snippet>map</snippet></ROW><ROW><id>3598029</id><snippet>filter</snippet></ROW><ROW><id>3598047</id><snippet>{% render_as_template about_view.content %}</snippet></ROW><ROW><id>3598410</id><snippet>thestate = window.state()
window.state('normal')
window.iconify()
window.deiconify()
</snippet></ROW><ROW><id>3598627</id><snippet>gtk.gdk.screen_width()</snippet></ROW><ROW><id>3598627</id><snippet>gtk.gdk.screen_height()</snippet></ROW><ROW><id>3600385</id><snippet>import x,y,z from a
</snippet></ROW><ROW><id>3600385</id><snippet>x</snippet></ROW><ROW><id>3600385</id><snippet>y</snippet></ROW><ROW><id>3600385</id><snippet>z</snippet></ROW><ROW><id>3600385</id><snippet>from a import x,y,z
</snippet></ROW><ROW><id>3600385</id><snippet>a</snippet></ROW><ROW><id>3600385</id><snippet>$x = $y if $y &gt; 40;
</snippet></ROW><ROW><id>3600699</id><snippet>self.Scroll(self.GetClientSize()[0], -1)
</snippet></ROW><ROW><id>3600855</id><snippet>words = ['string_1', 'string_2', ...]

if any(word in var_string for word in words):
    do_something()
</snippet></ROW><ROW><id>3600855</id><snippet>any()</snippet></ROW><ROW><id>3600855</id><snippet>all()</snippet></ROW><ROW><id>3600855</id><snippet>any()</snippet></ROW><ROW><id>3600855</id><snippet>any</snippet></ROW><ROW><id>3600855</id><snippet>true</snippet></ROW><ROW><id>3600913</id><snippet>__init__.py</snippet></ROW><ROW><id>3600913</id><snippet>__init__.py</snippet></ROW><ROW><id>3601157</id><snippet>p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</snippet></ROW><ROW><id>3601157</id><snippet>out_file = open(out_filename, "wb")
gzip_proc = subprocess.Popen("gzip", stdout=out_file)
gzip_proc.communicate()
</snippet></ROW><ROW><id>3601157</id><snippet>import gzip
import subprocess

...
#out_filename = path to gzip file

cmdL1 = ["mysqldump", "--user=" + db_user, "--password=" + db_pass, domaindb]
p1 = subprocess.Popen(cmdL1, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
dump_output = p1.communicate()[0]

f = gzip.open(out_filename, "wb")
f.write(dump_output)
f.close()
</snippet></ROW><ROW><id>3601360</id><snippet>import urllib2
f = urllib2.urlopen("http://your-url")
size= f.headers["Content-Length"]
print size
</snippet></ROW><ROW><id>3601781</id><snippet>'*'</snippet></ROW><ROW><id>3601781</id><snippet>myiter['*']</snippet></ROW><ROW><id>3601781</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>3601781</id><snippet>__len__</snippet></ROW><ROW><id>3601781</id><snippet>__iter__</snippet></ROW><ROW><id>3601781</id><snippet>__getitem__</snippet></ROW><ROW><id>3601781</id><snippet>__setitem__</snippet></ROW><ROW><id>3601781</id><snippet>__delitem__</snippet></ROW><ROW><id>3601781</id><snippet>__contains__</snippet></ROW><ROW><id>3601781</id><snippet>dict</snippet></ROW><ROW><id>3601781</id><snippet>dict</snippet></ROW><ROW><id>3601781</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>3601781</id><snippet>dict</snippet></ROW><ROW><id>3601781</id><snippet>Globbable</snippet></ROW><ROW><id>3601781</id><snippet>yourthing[somekey]</snippet></ROW><ROW><id>3601781</id><snippet>yourthing</snippet></ROW><ROW><id>3601781</id><snippet>Globbable</snippet></ROW><ROW><id>3601781</id><snippet>somekey</snippet></ROW><ROW><id>3601781</id><snippet>Globbable</snippet></ROW><ROW><id>3601781</id><snippet>yourthing[somekey] = 'bah'</snippet></ROW><ROW><id>3601781</id><snippet>somekey</snippet></ROW><ROW><id>3601781</id><snippet>yourthing</snippet></ROW><ROW><id>3601781</id><snippet>yourthing</snippet></ROW><ROW><id>3601781</id><snippet>&gt;&gt;&gt; import this
    ...
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
</snippet></ROW><ROW><id>3601781</id><snippet>dict(...)</snippet></ROW><ROW><id>3601781</id><snippet>def match(s, pat):
    try: return fnmatch.fnmatch(s, pat)
    except TypeError: return False

def sel(ds, pat):
    return [d[k] for d in ds for k in d if match(k, pat)]

def set(ds, k, v):
    for d in ds: d[k] = v
</snippet></ROW><ROW><id>3601781</id><snippet>set(sel(sel([myiter], '*')), '*.txt'), 'name', 'Woot')
</snippet></ROW><ROW><id>3601781</id><snippet>'*'</snippet></ROW><ROW><id>3601781</id><snippet>myiter['*']['*.txt']['name'] = 'Woot'
</snippet></ROW><ROW><id>3601781</id><snippet>def match(k, v, pat):
    try:
      if fnmatch.fnmatch(k, pat):
        return isinstance(v, dict)
    except TypeError:
        return False

for k, v in myiter.items():
  if match(k, v, '*'):
    for sk, sv in v.items():
      if match(sk, sv, '*.txt'):
        sv['name'] = 'Woot'
</snippet></ROW><ROW><id>3601894</id><snippet>getroot</snippet></ROW><ROW><id>3601894</id><snippet>lxml.html.HtmlElement</snippet></ROW><ROW><id>3601894</id><snippet>parse</snippet></ROW><ROW><id>3601894</id><snippet>result</snippet></ROW><ROW><id>3602005</id><snippet>import itertools as it

pp = [('a',1),('b',1),('c',1),('d',2),('e',2)]

# with normal zip and slicing
for a,b in zip(pp,pp[1:]):
    if a[1] != b[1]:
        x=(a[0],b[0])
        print x
        break
# with generators and izip
iterfirst = (b for a,b in pp)
itersecond = (b for a,b in pp[1:])
iterfirstsymbol = (a for a,b in pp)
itersecondsymbol = (a for a,b in pp[1:])
iteranswer = it.izip(iterfirstsymbol, itersecondsymbol, iterfirst, itersecond)

print next((symbol1, symbol2)
           for symbol1,symbol2, first, second in iteranswer
           if first != second)
</snippet></ROW><ROW><id>3602338</id><snippet>*</snippet></ROW><ROW><id>3602338</id><snippet>(</snippet></ROW><ROW><id>3602338</id><snippet>)</snippet></ROW><ROW><id>3602338</id><snippet>.</snippet></ROW><ROW><id>3602338</id><snippet>]</snippet></ROW><ROW><id>3602338</id><snippet>[][]+</snippet></ROW><ROW><id>3602338</id><snippet>r'...'</snippet></ROW><ROW><id>3602338</id><snippet>r'\\'</snippet></ROW><ROW><id>3602338</id><snippet>\\</snippet></ROW><ROW><id>3602338</id><snippet>m = re.search(r"%s.*[([](\d+\.\d+\.\d+\.\d+)" % site, r)
</snippet></ROW><ROW><id>3602338</id><snippet>\d</snippet></ROW><ROW><id>3602338</id><snippet>\r</snippet></ROW><ROW><id>3602338</id><snippet>\\</snippet></ROW><ROW><id>3602436</id><snippet># read text from web page
import urllib
page = urllib.urlopen("https://sites.google.com/site/iminside1/paste")
html = page.read()
page.close()

start = html.index("&lt;pre&gt;")+len("&lt;pre&gt;")+3 #skip over 3-byte header
end = html.index("&lt;/pre&gt;")
text = html[start:end]
print text

# parse dict-like syntax    
from pyparsing import (Suppress, Regex, quotedString, Word, alphas, 
alphanums, oneOf, Forward, Optional, dictOf, delimitedList, Group, removeQuotes)

LBRACK,RBRACK,LBRACE,RBRACE,COLON,COMMA = map(Suppress,"[]{}:,")
integer = Regex(r"[+-]?\d+").setParseAction(lambda t:int(t[0]))
real = Regex(r"[+-]?\d+\.\d*").setParseAction(lambda t:float(t[0]))
string_ = Word(alphas,alphanums+"_") | quotedString.setParseAction(removeQuotes)
bool_ = oneOf("true false").setParseAction(lambda t: t[0]=="true")
item = Forward()

key = string_
dict_ = LBRACE - Optional(dictOf(key+COLON, item+Optional(COMMA))) + RBRACE
list_ = LBRACK - Optional(delimitedList(item)) + RBRACK
item &lt;&lt; (real | integer | string_ | bool_ | Group(list_ | dict_ ))

result = item.parseString(text,parseAll=True)[0]
print result.data[0].dump()
print result.data[0].segments[0].dump(indent="  ")
print result.data[0].segments[0].flights[0].dump(indent="  -  ")
print result.data[0].segments[0].flights[0].flightLegs[0].dump(indent="  -  -  ")
for seg in result.data[6].segments:
    for flt in seg.flights:
        fltleg = flt.flightLegs[0]
        print "%(airline)s %(airlineCode)s %(flightNo)s" % fltleg,
        print "%s -&gt; %s" % (fltleg["from"].code, fltleg["to"].code)
</snippet></ROW><ROW><id>3602436</id><snippet>[['index', 0], ['serviceClass', '??????'], ['prices', [3504, ...
- eTicketing: true
- index: 0
- prices: [3504, 114.15000000000001, 89.769999999999996]
- segments: [[['indexSegment', 0], ['stopsCount', 0], ['flights', ... 
- serviceClass: ??????
  [['indexSegment', 0], ['stopsCount', 0], ['flights', [[['index', 0], ...
  - flights: [[['index', 0], ['time', 'PT2H45M'], ['minAvailSeats', 9], ...
  - indexSegment: 0
  - stopsCount: 0
  -  [['index', 0], ['time', 'PT2H45M'], ['minAvailSeats', 9], ['flight...
  -  - flightLegs: [[['flightNo', '309'], ['eTicketing', 'true'], ['air... 
  -  - index: 0
  -  - minAvailSeats: 9
  -  - stops: []
  -  - time: PT2H45M
  -  -  [['flightNo', '309'], ['eTicketing', 'true'], ['airplane', 'Boe... 
  -  -  - airline: ?????????
  -  -  - airlineCode: UN
  -  -  - airplane: Boeing 737-500
  -  -  - availSeats: 9
  -  -  - classCode: I
  -  -  - eTicketing: true
  -  -  - fareBasis: IPROW
  -  -  - flightClass: ECONOMY
  -  -  - flightNo: 309
  -  -  - from:   -  -  [['code', 'DME'], ['airport', '??????????'], ... 
  -  -    - airport: ??????????
  -  -    - city: ??????
  -  -    - code: DME
  -  -    - country: ??????
  -  -    - terminal: 
  -  -  - fromDate: 2010-10-15
  -  -  - fromTime: 10:40:00
  -  -  - time: 
  -  -  - to:   -  -  [['code', 'TXL'], ['airport', 'Berlin-Tegel'], ... 
  -  -    - airport: Berlin-Tegel
  -  -    - city: ??????
  -  -    - code: TXL
  -  -    - country: ????????
  -  -    - terminal: 
  -  -  - toDate: 2010-10-15
  -  -  - toTime: 11:25:00
airBaltic BT 425 SVO -&gt; RIX
airBaltic BT 425 SVO -&gt; RIX
airBaltic BT 423 SVO -&gt; RIX
airBaltic BT 423 SVO -&gt; RIX
</snippet></ROW><ROW><id>3602670</id><snippet>return kids(x)</snippet></ROW><ROW><id>3602670</id><snippet>kids(self)</snippet></ROW><ROW><id>3602816</id><snippet>import wx
from PIL import Image

SIZE = (640, 480)

def get_image():
    # Put your code here to return a PIL image from the camera.
    return Image.new('L', SIZE)

def pil_to_wx(image):
    width, height = image.size
    buffer = image.convert('RGB').tostring()
    bitmap = wx.BitmapFromBuffer(width, height, buffer)
    return bitmap

class Panel(wx.Panel):
    def __init__(self, parent):
        super(Panel, self).__init__(parent, -1)
        self.SetSize(SIZE)
        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
        self.Bind(wx.EVT_PAINT, self.on_paint)
        self.update()
    def update(self):
        self.Refresh()
        self.Update()
        wx.CallLater(15, self.update)
    def create_bitmap(self):
        image = get_image()
        bitmap = pil_to_wx(image)
        return bitmap
    def on_paint(self, event):
        bitmap = self.create_bitmap()
        dc = wx.AutoBufferedPaintDC(self)
        dc.DrawBitmap(bitmap, 0, 0)

class Frame(wx.Frame):
    def __init__(self):
        style = wx.DEFAULT_FRAME_STYLE &amp; ~wx.RESIZE_BORDER &amp; ~wx.MAXIMIZE_BOX
        super(Frame, self).__init__(None, -1, 'Camera Viewer', style=style)
        panel = Panel(self)
        self.Fit()

def main():
    app = wx.PySimpleApp()
    frame = Frame()
    frame.Center()
    frame.Show()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3602957</id><snippet>*</snippet></ROW><ROW><id>3602957</id><snippet>def Run(*args):
  return _Run(True, *args)
</snippet></ROW><ROW><id>3602957</id><snippet>**</snippet></ROW><ROW><id>3602957</id><snippet>def Run(*args, **kwargs):
  return _Run(True, *args, **kwargs)
</snippet></ROW><ROW><id>3602957</id><snippet>def run(cmd, other_stuff, silent=False):
   ...
</snippet></ROW><ROW><id>3602957</id><snippet>run("foo", etc)               # Run
run("foo", etc, silent=True)  # RunSilent
</snippet></ROW><ROW><id>3603160</id><snippet>TestText = "Test - āĀēĒčČ..šŠūŪžŽ" # this NOT utf-8...it is a Unicode string in Python 3.X.
TestText2 = TestText.encode('utf8') # THIS is "just bytes" in UTF-8.
</snippet></ROW><ROW><id>3603160</id><snippet>import sys
sys.stdout.buffer.write(TestText2)
</snippet></ROW><ROW><id>3603621</id><snippet>pickle</snippet></ROW><ROW><id>3603688</id><snippet>callbackmethod=ctypes.CFUNCTYPE(None, Event, ctypes.c_void_p)</snippet></ROW><ROW><id>3603688</id><snippet>@callbackmethod
def SongFinished(self, data):
    print data
</snippet></ROW><ROW><id>3603688</id><snippet>.event_attach(vlc.EventType.MediaPlayerEndReached, SongFinished, 1)</snippet></ROW><ROW><id>3603824</id><snippet>__dict__</snippet></ROW><ROW><id>3603824</id><snippet>class FrozenClass(object):
    __isfrozen = False
    def __setattr__(self, key, value):
        if self.__isfrozen and not hasattr(self, key):
            raise TypeError( "%r is a frozen class" % self )
        object.__setattr__(self, key, value)

    def _freeze(self):
        self.__isfrozen = True

class Test(FrozenClass):
    def __init__(self):
        self.x = 42#
        self.y = 2**3

        self._freeze() # no new attributes after this point.

a,b = Test(), Test()
a.x = 10
b.z = 10 # fails
</snippet></ROW><ROW><id>3604114</id><snippet>result = [w for w in vocab if len(w) &gt;= 8]
</snippet></ROW><ROW><id>3604114</id><snippet>rx = re.compile('^.{8,}$')
#                  ^^^^ {8,} means 8 or more.
result = [w for w in vocab if rx.match(w)]
</snippet></ROW><ROW><id>3604114</id><snippet>{a,b}</snippet></ROW><ROW><id>3604227</id><snippet>class Controller(object):
    def __init__(self):
        self._output = {}

    def output(self, s, caller):
        method_that_called_me = caller.__name__
        self._output[method_that_called_me] = s

class Public(Controller):
    def about_us(self):
        self.output('Damn good coffee!',self.about_us)

    def contact(self):
        self.output('contact me',self.contact)
</snippet></ROW><ROW><id>3604227</id><snippet>self.output</snippet></ROW><ROW><id>3604227</id><snippet>dict</snippet></ROW><ROW><id>3604227</id><snippet>method</snippet></ROW><ROW><id>3604227</id><snippet>self._output</snippet></ROW><ROW><id>3604227</id><snippet>dict</snippet></ROW><ROW><id>3604227</id><snippet>self.output</snippet></ROW><ROW><id>3604227</id><snippet>import traceback

class Controller(object):
    def output_method(self, s):
        (filename,line_number,function_name,text)=traceback.extract_stack()[-2]
        method_that_called_me = function_name
        self.output[method_that_called_me] = s
</snippet></ROW><ROW><id>3604250</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(lambda: None not in x)
  1           0 LOAD_CONST               0 (None)
              3 LOAD_GLOBAL              1 (x)
              6 COMPARE_OP               7 (not in)
              9 RETURN_VALUE
&gt;&gt;&gt; dis.dis(lambda: not None in x)
  1           0 LOAD_CONST               0 (None)
              3 LOAD_GLOBAL              1 (x)
              6 COMPARE_OP               7 (not in)
              9 RETURN_VALUE
</snippet></ROW><ROW><id>3604250</id><snippet>x not in s</snippet></ROW><ROW><id>3604250</id><snippet>x in s</snippet></ROW><ROW><id>3604250</id><snippet>None not in x</snippet></ROW><ROW><id>3604250</id><snippet>not y in x</snippet></ROW><ROW><id>3604250</id><snippet>not (y in x)</snippet></ROW><ROW><id>3604250</id><snippet>(not y) in x</snippet></ROW><ROW><id>3604250</id><snippet>not in</snippet></ROW><ROW><id>3604343</id><snippet>FeedbarConfig</snippet></ROW><ROW><id>3604343</id><snippet>class FeedbarConfig(object)
</snippet></ROW><ROW><id>3604343</id><snippet>Is there another way to bind config information from a file into a python class ?
</snippet></ROW><ROW><id>3604609</id><snippet>&gt;&gt;&gt; '%07.3f' % 5
'005.000'
</snippet></ROW><ROW><id>3604811</id><snippet>reload</snippet></ROW><ROW><id>3604811</id><snippet>&gt;&gt;&gt; import asd
&gt;&gt;&gt; asd.s
'old'
&gt;&gt;&gt; t = asd.s
&gt;&gt;&gt; reload(asd) # I edited asd.py before
&lt;module 'asd' from 'asd.py'&gt;
&gt;&gt;&gt; asd.s # new module content
'new'
&gt;&gt;&gt; t # but this is still old!
'old'
</snippet></ROW><ROW><id>3605031</id><snippet>self.maxTiles if self.maxTiles is not None else (2, 2)
</snippet></ROW><ROW><id>3605031</id><snippet>if not A: B else: C</snippet></ROW><ROW><id>3605031</id><snippet>if not .. else</snippet></ROW><ROW><id>3605031</id><snippet>not</snippet></ROW><ROW><id>3605031</id><snippet>if A: C else: B</snippet></ROW><ROW><id>3605031</id><snippet>(2, 2) if self.maxTiles is None else self.maxTiles
</snippet></ROW><ROW><id>3605031</id><snippet>a = b or c</snippet></ROW><ROW><id>3605031</id><snippet>c</snippet></ROW><ROW><id>3605031</id><snippet>b</snippet></ROW><ROW><id>3605031</id><snippet>b</snippet></ROW><ROW><id>3605031</id><snippet>None</snippet></ROW><ROW><id>3605031</id><snippet>b or c</snippet></ROW><ROW><id>3605031</id><snippet>b if b else c
</snippet></ROW><ROW><id>3605031</id><snippet>b is None</snippet></ROW><ROW><id>3605031</id><snippet>b</snippet></ROW><ROW><id>3605031</id><snippet>None</snippet></ROW><ROW><id>3605031</id><snippet>or</snippet></ROW><ROW><id>3605103</id><snippet>def foobar(d):
    temp = d.copy()
    # your logic goes here
    return temp
</snippet></ROW><ROW><id>3605103</id><snippet>copy</snippet></ROW><ROW><id>3605103</id><snippet>% python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:09:56) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; d = {'x': 17, 'y': 23}
&gt;&gt;&gt; t = d.copy()
&gt;&gt;&gt; t
{'y': 23, 'x': 17}
&gt;&gt;&gt; t['x'] = 93
&gt;&gt;&gt; t
{'y': 23, 'x': 93}
&gt;&gt;&gt; d
{'y': 23, 'x': 17}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3605736</id><snippet>@tools.decode(encoding='ISO-88510-1') 
def decodingFunction(self, data):
    return "%s" % (data, )
</snippet></ROW><ROW><id>3605760</id><snippet>$ sudo port install py26-pil
</snippet></ROW><ROW><id>3605821</id><snippet>self</snippet></ROW><ROW><id>3605821</id><snippet>class Test1(object):
    def __init__(self):
        d = {}
        d['a'] = 1
        d['b'] = 2
        d['c'] = 3
        self.d = d

class Test2(object):
    def __init__(self):
        self.d = {}
        self.d['a'] = 1
        self.d['b'] = 2
        self.d['c'] = 3

import dis
print "Test1.__init__"
dis.dis(Test1.__init__)

print "Test2.__init__"
dis.dis(Test2.__init__)
</snippet></ROW><ROW><id>3605821</id><snippet>Test1.__init__
  4           0 BUILD_MAP                0
              3 STORE_FAST               1 (d)

  5           6 LOAD_CONST               1 (1)
              9 LOAD_FAST                1 (d)
             12 LOAD_CONST               2 ('a')
             15 STORE_SUBSCR        

  6          16 LOAD_CONST               3 (2)
             19 LOAD_FAST                1 (d)
             22 LOAD_CONST               4 ('b')
             25 STORE_SUBSCR        

  7          26 LOAD_CONST               5 (3)
             29 LOAD_FAST                1 (d)
             32 LOAD_CONST               6 ('c')
             35 STORE_SUBSCR        

  8          36 LOAD_FAST                1 (d)
             39 LOAD_FAST                0 (self)
             42 STORE_ATTR               0 (d)
             45 LOAD_CONST               0 (None)
             48 RETURN_VALUE        
Test2.__init__
 12           0 BUILD_MAP                0
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               0 (d)

 13           9 LOAD_CONST               1 (1)
             12 LOAD_FAST                0 (self)
             15 LOAD_ATTR                0 (d)
             18 LOAD_CONST               2 ('a')
             21 STORE_SUBSCR        

 14          22 LOAD_CONST               3 (2)
             25 LOAD_FAST                0 (self)
             28 LOAD_ATTR                0 (d)
             31 LOAD_CONST               4 ('b')
             34 STORE_SUBSCR        

 15          35 LOAD_CONST               5 (3)
             38 LOAD_FAST                0 (self)
             41 LOAD_ATTR                0 (d)
             44 LOAD_CONST               6 ('c')
             47 STORE_SUBSCR        
             48 LOAD_CONST               0 (None)
             51 RETURN_VALUE
</snippet></ROW><ROW><id>3605821</id><snippet>STORE_ATTR</snippet></ROW><ROW><id>3605821</id><snippet>STORE_ATTR</snippet></ROW><ROW><id>3605821</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>3605821</id><snippet>foo = self.foo
factorial = math.factorial
for x in really_big_iterator:
    foo(factorial(x))
</snippet></ROW><ROW><id>3605821</id><snippet>def fast(iterators, sum=sum):
    for i in iterator:
        yield sum(i)
</snippet></ROW><ROW><id>3605831</id><snippet>import xml.etree.cElementTree as ET

root = ET.Element("root")

doc = ET.SubElement(root, "doc")

field1 = ET.SubElement(doc, "field1")
field1.set("name", "blah")
field1.text = "some value1"

field2 = ET.SubElement(doc, "field2")
field2.set("name", "asdfasd")
field2.text = "some vlaue2"

tree = ET.ElementTree(root)
tree.write("filename.xml")
</snippet></ROW><ROW><id>3605971</id><snippet>TimeProperty</snippet></ROW><ROW><id>3605971</id><snippet>DateTime</snippet></ROW><ROW><id>3605971</id><snippet>TimeProperty</snippet></ROW><ROW><id>3605971</id><snippet>DateTimeProperty</snippet></ROW><ROW><id>3605971</id><snippet>DateTimeProperty</snippet></ROW><ROW><id>3606097</id><snippet>class SharedTest(TestCase):
    def setUp(self):
        self.do_not_run = True

    def test_foo(self):
        if getattr(self, 'do_not_run', False):
            return
        # Rest of the test body.

class OneTestCase(SharedTest):
    def setUp(self):
        super(OneTestCase, self).setUp()
        self.do_not_run = False
</snippet></ROW><ROW><id>3606097</id><snippet>if getattr(self, 'do_not_run', False):</snippet></ROW><ROW><id>3606097</id><snippet>tests</snippet></ROW><ROW><id>3606097</id><snippet>tests.py</snippet></ROW><ROW><id>3606097</id><snippet>SharedTest</snippet></ROW><ROW><id>3606097</id><snippet>app.utils</snippet></ROW><ROW><id>3606097</id><snippet># module app.utils.test
class SharedTest(TestCase):
    def test_foo(self):
        # Rest of the test body.

# module app.tests
from app.utils import test
class OneTestCase(test.SharedTest):
    ...
</snippet></ROW><ROW><id>3606344</id><snippet>False</snippet></ROW><ROW><id>3606344</id><snippet>Python 3.1 (r31:73578, Jun 27 2009, 21:49:46) 
&gt;&gt;&gt; False = True
  File "&lt;stdin&gt;", line 1
SyntaxError: assignment to keyword
</snippet></ROW><ROW><id>3606344</id><snippet>int(False)</snippet></ROW><ROW><id>3606344</id><snippet>int(True)</snippet></ROW><ROW><id>3606580</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'en_US.utf8'
&gt;&gt;&gt; locale.currency(123.2342343234234234)
'$123.23'
&gt;&gt;&gt; locale.currency(123.2342343234234234, '')  # the second argument controls the symbol
'123.23'
</snippet></ROW><ROW><id>3606690</id><snippet>google_appengine/google/appengine/ext/webapp/__init__.py
</snippet></ROW><ROW><id>3606690</id><snippet>__HTTP_STATUS_MESSAGES = {
  100: 'Continue',
  101: 'Switching Protocols',
  200: 'OK',
  201: 'Created',
  202: 'Accepted',
  203: 'Non-Authoritative Information',
  204: 'No Content',
  205: 'Reset Content',
  206: 'Partial Content',
</snippet></ROW><ROW><id>3606690</id><snippet>  300: 'Multiple Choices',
  301: 'Moved Permanently',
  302: 'Moved Temporarily',
  303: 'See Other',
  304: 'Not Modified',
  305: 'Use Proxy',
  306: 'Unused',
  307: 'Temporary Redirect',
  400: 'Bad Request',
  401: 'Unauthorized',
  402: 'Payment Required',
  403: 'Forbidden',
  404: 'Not Found',
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Time-out',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Request Entity Too Large',
  414: 'Request-URI Too Large',
  415: 'Unsupported Media Type',
  416: 'Requested Range Not Satisfiable',
  417: 'Expectation Failed',
  500: 'Internal Server Error',
  501: 'Not Implemented',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Time-out',
  505: 'HTTP Version not supported'
}
</snippet></ROW><ROW><id>3606791</id><snippet>set path</snippet></ROW><ROW><id>3606791</id><snippet>c:\Python2.5.2\python setup.py install</snippet></ROW><ROW><id>3607253</id><snippet>h.add_certificate(keyfile, certfile, '')
</snippet></ROW><ROW><id>3607253</id><snippet>openssl pkcs12 -in file.p12 -out key.pem -nodes -nocerts
openssl pkcs12 -in file.p12 -out cert.pem -nodes -nokeys
</snippet></ROW><ROW><id>3607355</id><snippet>UNICODE</snippet></ROW><ROW><id>3607355</id><snippet>\w</snippet></ROW><ROW><id>3607355</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>3607355</id><snippet>ç</snippet></ROW><ROW><id>3607355</id><snippet>&gt;&gt;&gt; re.compile(r"^\w*$", re.U).match(u"Fran\xe7ais")
&lt;_sre.SRE_Match object at 0x101474168&gt;
</snippet></ROW><ROW><id>3607397</id><snippet>apply_async</snippet></ROW><ROW><id>3607397</id><snippet>AsyncResult</snippet></ROW><ROW><id>3607397</id><snippet>AbortableAsyncResult</snippet></ROW><ROW><id>3607397</id><snippet>task_id</snippet></ROW><ROW><id>3607397</id><snippet>AbortableAsyncResult</snippet></ROW><ROW><id>3607397</id><snippet>default_backend</snippet></ROW><ROW><id>3607397</id><snippet>abortable_async_result = AsyncBoot.apply_async(args=[name], name=name, connect_timeout=3)
myTaskId = abortable_async_result.task_id
</snippet></ROW><ROW><id>3607397</id><snippet>abortable_async_result = AbortableAsyncResult(myTaskId)
abortable_async_result.abort()
</snippet></ROW><ROW><id>3607451</id><snippet>$ cd /usr/local/lib/wxPython-unicode-2.8.11.0/lib/python2.7/site-packages/wx-2.8-mac-unicode/wx
$ file *.so
_animate.so:   Mach-O universal binary with 2 architectures
_animate.so (for architecture ppc): Mach-O bundle ppc
_animate.so (for architecture i386):    Mach-O bundle i386
_aui.so:       Mach-O universal binary with 2 architectures
_aui.so (for architecture ppc): Mach-O bundle ppc
_aui.so (for architecture i386):    Mach-O bundle i386
...
</snippet></ROW><ROW><id>3607451</id><snippet>platform.architecture()</snippet></ROW><ROW><id>3607451</id><snippet>platform.architecture()</snippet></ROW><ROW><id>3607451</id><snippet>$ cd /Library/Frameworks/Python.framework/Versions/2.7
$ file python2.7
python2.7: Mach-O universal binary with 3 architectures
python2.7 (for architecture i386):  Mach-O executable i386
python2.7 (for architecture ppc7400):   Mach-O executable ppc
python2.7 (for architecture x86_64):    Mach-O 64-bit executable x86_64
$ arch -x86_64 ./python2.7 -c 'import platform, sys; print "{0}, {1:x}".format(platform.architecture()[0], sys.maxint)'
64bit, 7fffffffffffffff
$ arch -i386 ./python2.7 -c 'import platform, sys; print "{0}, {1:x}".format(platform.architecture()[0], sys.maxint)'
64bit, 7fffffff
$ arch -ppc ./python2.7 -c 'import platform, sys; print "{0}, {1:x}".format(platform.architecture()[0], sys.maxint)'
64bit, 7fffffff
</snippet></ROW><ROW><id>3607451</id><snippet>sys.maxint</snippet></ROW><ROW><id>3607451</id><snippet>sys.maxsize</snippet></ROW><ROW><id>3607451</id><snippet>$ file $(python2.7 -c 'import sys;print(sys.executable)')
/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python: Mach-O universal binary with 3 architectures
/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python (for architecture i386):   Mach-O executable i386
/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python (for architecture ppc7400):    Mach-O executable ppc
/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python (for architecture x86_64): Mach-O 64-bit executable x86_64
</snippet></ROW><ROW><id>3607630</id><snippet>Markaby</snippet></ROW><ROW><id>3607630</id><snippet>Brevé</snippet></ROW><ROW><id>3607630</id><snippet>Perl</snippet></ROW><ROW><id>3607652</id><snippet>pre_save</snippet></ROW><ROW><id>3607652</id><snippet>created</snippet></ROW><ROW><id>3607652</id><snippet>Post_save</snippet></ROW><ROW><id>3607652</id><snippet>created</snippet></ROW><ROW><id>3607773</id><snippet>super</snippet></ROW><ROW><id>3608468</id><snippet>results += [each for each in os.listdir(folder) if each.endswith('.c')]
</snippet></ROW><ROW><id>3609600</id><snippet>import timeit

class TimedClass():
    def __init__(self):
        self.x = 13
        self.y = 15

    def square(self, _x, _y):
        print _x**_y

myTimedClass = TimedClass()
timeit.Timer(myTImedClass.square).timeit()
</snippet></ROW><ROW><id>3609600</id><snippet>timeit.Timer("[str(x) for x in range(100)]").timeit()
</snippet></ROW><ROW><id>3609600</id><snippet>def __init__(self, ..):
    def timewrapper():
        return self.multiply(self.x, self.y)

    timeit.Timer(timewrapper)
</snippet></ROW><ROW><id>3609669</id><snippet>print tuple(something)
</snippet></ROW><ROW><id>3609669</id><snippet>"" + ()
</snippet></ROW><ROW><id>3609669</id><snippet>print "foo" + str(tuple("bar"))
</snippet></ROW><ROW><id>3609718</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>3609718</id><snippet>try..except</snippet></ROW><ROW><id>3609718</id><snippet>try:
    # log stuff
except UnicodeDecodeError:
    # handle the exception and move on
</snippet></ROW><ROW><id>3609802</id><snippet>import re

def stripwhite(text):
    lst = text.split('"')
    for i, item in enumerate(lst):
        if not i % 2:
            lst[i] = re.sub("\s+", "", item)
    return '"'.join(lst)

print stripwhite('This is a string with some "text in quotes."')
</snippet></ROW><ROW><id>3609988</id><snippet>curl</snippet></ROW><ROW><id>3609988</id><snippet>pycurl</snippet></ROW><ROW><id>3609988</id><snippet>curl.Curl</snippet></ROW><ROW><id>3609988</id><snippet>/usr/share/pyshared/curl/__init__.py</snippet></ROW><ROW><id>3609988</id><snippet>/usr/share/doc/python-pycurl/examples</snippet></ROW><ROW><id>3609988</id><snippet>curl.Curl</snippet></ROW><ROW><id>3610148</id><snippet>figimage</snippet></ROW><ROW><id>3610148</id><snippet>import matplotlib.pyplot as plt
import Image
import numpy as np

im = Image.open('/home/jofer/logo.png')
height = im.size[1]

# We need a float array between 0-1, rather than
# a uint8 array between 0-255
im = np.array(im).astype(np.float) / 255

fig = plt.figure()

plt.plot(np.arange(10), 4 * np.arange(10))

# With newer (1.0) versions of matplotlib, you can 
# use the "zorder" kwarg to make the image overlay
# the plot, rather than hide behind it... (e.g. zorder=10)
fig.figimage(im, 0, fig.bbox.ymax - height)

# (Saving with the same dpi as the screen default to
#  avoid displacing the logo image)
fig.savefig('/home/jofer/temp.png', dpi=80)

plt.show()
</snippet></ROW><ROW><id>3610421</id><snippet>test_cols = data[['a1', 'a4']]
test_vals = np.array(('a1v1', 'a4v1'), test_cols.dtype)
data[test_cols == test_vals]
</snippet></ROW><ROW><id>3610421</id><snippet>data[['a1', 'a4']] 
</snippet></ROW><ROW><id>3610421</id><snippet>array([('a1v1', 'a4v1'), ('a1v1', 'a4v2'), ('a1v3', 'a4v1'),
       ('a1v2', 'a4v1'), ('a1v2', 'a4v1'), ('a1v2', 'a4v2'),
       ('a1v3', 'a4v2'), ('a1v1', 'a4v1'), ('a1v1', 'a4v1'),
       ('a1v2', 'a4v1'), ('a1v1', 'a4v2'), ('a1v3', 'a4v2'),
       ('a1v3', 'a4v1'), ('a1v2', 'a4v2')], 
      dtype=[('a1', '|S4'), ('a4', '|S4')])
</snippet></ROW><ROW><id>3610421</id><snippet>data[['a1', 'a4']] == ('a1v1', 'a4v1')</snippet></ROW><ROW><id>3610421</id><snippet>False</snippet></ROW><ROW><id>3610421</id><snippet>test_cols = data[['a1', 'a4']]
test_vals = np.array(('a1v1', 'a4v1'), test_cols.dtype)
</snippet></ROW><ROW><id>3610421</id><snippet>data[test_cols == test_vals]
</snippet></ROW><ROW><id>3610421</id><snippet>array([('a1v1', 'a2v1', 'a3v1', 'a4v1', 'a5v1'),
       ('a1v1', 'a2v2', 'a3v1', 'a4v1', 'a5v1'),
       ('a1v1', 'a2v3', 'a3v2', 'a4v1', 'a5v2')], 
      dtype=[('a1', '|S4'), ('a2', '|S4'), ('a3', '|S4'), ('a4', '|S4'), ('a5', '|S4')])
</snippet></ROW><ROW><id>3610840</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>3610840</id><snippet> def LongRunning(self):
     Counter = 1

     while True:
         time.sleep(2)
         print "Hello, ", Counter

         wx.CallAfter(self.updateMultiLine, "hello, " + str(Counter) + "\n")
         Counter = Counter + 1
         if self.stop:
             break

 def updateMultiLine(self, data):
     self.MultiLine.AppendText(data)
</snippet></ROW><ROW><id>3611134</id><snippet>def takes(*args):
    def _takes(fcn):
        fcn.params = args
        return fcn
    return _takes

@takes("time", "temp", "time")
def do_stuff(start_time, average_temp, stop_time):
    pass
</snippet></ROW><ROW><id>3611262</id><snippet>del a[:]
</snippet></ROW><ROW><id>3611262</id><snippet>a[:] = []
</snippet></ROW><ROW><id>3611403</id><snippet>import re
a = ("as-df-- as-df- as-df (as-df) 'as-df' asdf-asdf) (asd-f"
     "asdf' asd-f' -asdf- %asdf%s asdf&amp; $asdf$ +asdf+ asdf++ asdf''")
b = re.sub(r"((?&lt;=\s)|\A)(?P&lt;chr&gt;[-()+%&amp;'$])([^\s]*)(?P=chr)((?=\s)|\Z)",r"\3",a)
print b
</snippet></ROW><ROW><id>3611403</id><snippet>as-df-- as-df- as-df (as-df) as-df asdf-asdf) (asd-f
asdf' asd-f' asdf %asdf%s asdf&amp; asdf asdf asdf++ asdf''
</snippet></ROW><ROW><id>3611403</id><snippet>()</snippet></ROW><ROW><id>3611403</id><snippet>[]</snippet></ROW><ROW><id>3611403</id><snippet>{}</snippet></ROW><ROW><id>3611499</id><snippet>cls.__name__</snippet></ROW><ROW><id>3611499</id><snippet>def f(clsname):
    class XYZ:
        # ...
    XYZ.__name__ = XYZ
    # ...
    return XYZ
</snippet></ROW><ROW><id>3611499</id><snippet>c1 is not c2</snippet></ROW><ROW><id>3611499</id><snippet>__name__</snippet></ROW><ROW><id>3611499</id><snippet>C1</snippet></ROW><ROW><id>3611499</id><snippet>C2</snippet></ROW><ROW><id>3611499</id><snippet>def f(clsname):
    class XYZ(object):
        pass
    XYZ.__name__ = clsname
    globals()[clsname] = XYZ

f('C1')
f('C2')

print C1
print C2
</snippet></ROW><ROW><id>3611499</id><snippet>clsname</snippet></ROW><ROW><id>3611499</id><snippet>__name__</snippet></ROW><ROW><id>3611821</id><snippet>class PageMarker(db.Model):
    user = db.ReferenceProperty(AppUser)
    ....
    @classmethod
    def mark_page(cls, user, page_key):
        marker = cls.get_or_insert("%s_%s" % (user.facebook_id, 
                                             page_key, user=user)
</snippet></ROW><ROW><id>3611821</id><snippet>key_names = ["%s_%s" % (friend.facebook_id, page_key) for friend in friends]
markers = db.get(key_names)
# Use get_value_for_datastore to get the entity key without making a trip to the 
# datastore
friends_who_bookmarked_keys = [marker.__class__.user.get_value_for_datastore(marker)\
                          for marker in markers]
friends = db.get(friends_who_bookmarked_keys)
</snippet></ROW><ROW><id>3611886</id><snippet>get(key, namespace=None)

get_multi(keys, key_prefix='', namespace=None)
</snippet></ROW><ROW><id>3611903</id><snippet>getiterator</snippet></ROW><ROW><id>3611903</id><snippet>import xml.etree.ElementTree as xee

content='''
&lt;tr&gt;
  &lt;td&gt;&lt;a href="sdas3"&gt;something for link&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;tttttk&lt;/td&gt;
  &lt;td&gt;&lt;a href="tyty"&gt;tyt for link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
'''

def text_content(node):
    result=[]
    for elem in node.getiterator():
        text=elem.text
        if text and text.strip():
            result.append(text)
    return result

container_trs=xee.fromstring(content)
adict={}
for elem in container_trs:
    adict[elem]=text_content(elem)
print(adict)
# {&lt;Element td at b767e52c&gt;: ['tttttk'], &lt;Element td at b767e58c&gt;: ['tyt for link'], &lt;Element td at b767e36c&gt;: ['something for link']}
</snippet></ROW><ROW><id>3611903</id><snippet>for elem_main in container_trs:</snippet></ROW><ROW><id>3611903</id><snippet>cantainer_trs</snippet></ROW><ROW><id>3611903</id><snippet>for elem_main in container_trs.getiterator():</snippet></ROW><ROW><id>3611903</id><snippet>container_trs</snippet></ROW><ROW><id>3611987</id><snippet>global</snippet></ROW><ROW><id>3612008</id><snippet>&lt;base href="http://myoriginalwebsite.com/" /&gt;
</snippet></ROW><ROW><id>3612010</id><snippet>StringIO</snippet></ROW><ROW><id>3612010</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; StringIO.StringIO("hello").read()
'hello'
</snippet></ROW><ROW><id>3612010</id><snippet>join</snippet></ROW><ROW><id>3612010</id><snippet>&gt;&gt;&gt; list_of_strings = ["hello", "line two"]
&gt;&gt;&gt; handle = StringIO.StringIO('\n'.join(list_of_strings))
&gt;&gt;&gt; handle.read()
'hello\nline two'
</snippet></ROW><ROW><id>3612110</id><snippet>compact</snippet></ROW><ROW><id>3612194</id><snippet>subprocess</snippet></ROW><ROW><id>3612194</id><snippet>import subprocess

PIPE = subprocess.PIPE
pd = subprocess.Popen(['/usr/bin/zip', '-r', 'files', 'files'],
                      stdout=PIPE, stderr=PIPE)
stdout, stderr = pd.communicate()
</snippet></ROW><ROW><id>3612287</id><snippet>def get_model(uuid):
    o = MyModel.objects.get(uuid=uuid)
    return xmlrpclib.dumps((o, ), allow_none=True, methodresponse=1)
</snippet></ROW><ROW><id>3612287</id><snippet>got_model = rpc_srv.getmodel('f21e4e0b-493a-460b-982a-d2bb31c45864')
m, method = xmlrpclib.loads(got_model)
for item in m:
    print item
</snippet></ROW><ROW><id>3612407</id><snippet>for i in growthRates:  
    fund = fund * (1 + 0.01 * growthRates) + depositPerYear
</snippet></ROW><ROW><id>3612407</id><snippet>for i in growthRates:  
    fund = fund * (1 + 0.01 * i) + depositPerYear
</snippet></ROW><ROW><id>3612407</id><snippet>&gt;&gt;&gt; 2 * [1,2]
[1, 2, 1, 2]
</snippet></ROW><ROW><id>3612555</id><snippet>&gt;&gt;&gt; class Borg( object ):
...     __ss = {}
...     def __init__( self ):
...             self.__dict__ = self.__ss
...
&gt;&gt;&gt; foo = Borg()
&gt;&gt;&gt; foo.x = 1
&gt;&gt;&gt; bar = Borg()
&gt;&gt;&gt; bar.x
1
</snippet></ROW><ROW><id>3612791</id><snippet>?:</snippet></ROW><ROW><id>3612791</id><snippet>(\d{1,3}(?:[,\d{3}])*[.\d+]*)</snippet></ROW><ROW><id>3612791</id><snippet>([,\d{3}])</snippet></ROW><ROW><id>3613026</id><snippet>setup.py</snippet></ROW><ROW><id>3613026</id><snippet>rpmbuild</snippet></ROW><ROW><id>3613026</id><snippet>python setup.py bdist_rpm
</snippet></ROW><ROW><id>3613026</id><snippet>dist</snippet></ROW><ROW><id>3613026</id><snippet>dist/mypackage-1.01-1-noarch.rpm</snippet></ROW><ROW><id>3613098</id><snippet>done, rema, succ, fails, size, ... = [int(x) for x in starf]
</snippet></ROW><ROW><id>3613098</id><snippet>labels = ("done", "rema", "succ", "fails", "size")

data = dict(zip(labels, [int(x) for x in starf]))

print data['done']
</snippet></ROW><ROW><id>3613459</id><snippet>button</snippet></ROW><ROW><id>3613459</id><snippet>ULC</snippet></ROW><ROW><id>3613459</id><snippet>self.table</snippet></ROW><ROW><id>3613459</id><snippet>button = wx.Button(self, id=wx.ID_ANY, label="Download")
</snippet></ROW><ROW><id>3613459</id><snippet>button = wx.Button(self.table, id=wx.ID_ANY, label="Download")
</snippet></ROW><ROW><id>3613459</id><snippet>DeleteAllItems()</snippet></ROW><ROW><id>3613459</id><snippet>DeleteItem()</snippet></ROW><ROW><id>3613459</id><snippet>def emptyList(self)
    itemCount = self.list.GetItemCount()
    for item in xrange(itemCount):
        self.list.DeleteItem(0)
</snippet></ROW><ROW><id>3613878</id><snippet>from django.conf import settings

class CheckStatus(object):  

    def process_request(self, request):    
        if request.user.is_authenticated():                
           if not request.path.startswith(settings.MEDIA_URL):
                s = request.session.get('visible')
                if str(s) is not 'yes':
                    return HttpResponseRedirect(reverse("myapp.myview.views.test"))
</snippet></ROW><ROW><id>3613878</id><snippet>process_view</snippet></ROW><ROW><id>3614018</id><snippet>h = lambda x,y: (-f(x,y)[1], f(x,y)[0])
</snippet></ROW><ROW><id>3614018</id><snippet>h = (lambda x,y: -f(x,y)[1]), f(x,y)[0]
</snippet></ROW><ROW><id>3614018</id><snippet>h</snippet></ROW><ROW><id>3614262</id><snippet>try</snippet></ROW><ROW><id>3614262</id><snippet>except</snippet></ROW><ROW><id>3614279</id><snippet>cats = db.GqlQuery("SELECT * FROM Cats")
for cat in cats:
    ...
</snippet></ROW><ROW><id>3614279</id><snippet>cats = db.GqlQuery("SELECT * FROM Cats").fetch(50)
for cat in cats:
    ...
</snippet></ROW><ROW><id>3614328</id><snippet>rows = [x[0] for x in cursor.fetchall()]
</snippet></ROW><ROW><id>3614328</id><snippet>for row in rows:
  print 'SELECT ID FROM One.dbo.Two WHERE ID = %s' % row
</snippet></ROW><ROW><id>3614457</id><snippet>class Foo</snippet></ROW><ROW><id>3614457</id><snippet>Foo</snippet></ROW><ROW><id>3614457</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>3614457</id><snippet>Foo</snippet></ROW><ROW><id>3614457</id><snippet>Foo</snippet></ROW><ROW><id>3614457</id><snippet>class Foo</snippet></ROW><ROW><id>3614457</id><snippet>Foo</snippet></ROW><ROW><id>3614457</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>3614457</id><snippet>import cPickle
from foo import Foo

def pickleObject():
    obj = Foo()
    savefile = open('pickle.txt', 'w')
    cPickle.dump(obj, savefile, cPickle.HIGHEST_PROTOCOL)


pickleObject()
</snippet></ROW><ROW><id>3614457</id><snippet>import cPickle

savefile = open('pickle.txt', 'r')
obj = cPickle.load(savefile)
...
</snippet></ROW><ROW><id>3614485</id><snippet>from common.appenginepatch.aecmd import setup_env 
setup_env(manage_py_env=True)
</snippet></ROW><ROW><id>3614614</id><snippet>urlpatterns = patterns('',
    (r'^', include('preview_signup.urls')),
)
</snippet></ROW><ROW><id>3614830</id><snippet>ModelForm</snippet></ROW><ROW><id>3614830</id><snippet>clean()</snippet></ROW><ROW><id>3614877</id><snippet>MixinOldSchoolRemix</snippet></ROW><ROW><id>3614877</id><snippet>MixinClass</snippet></ROW><ROW><id>3614877</id><snippet>old_style_mix</snippet></ROW><ROW><id>3614877</id><snippet>__bases__</snippet></ROW><ROW><id>3614877</id><snippet>&gt;&gt;&gt; class Mixo(object):
...   def foo(self):
...     print 'Mixo.foo'
...     self.thesuper.foo(self)
... 
&gt;&gt;&gt; class Old:
...   def foo(self):
...     print 'Old.foo'
... 
&gt;&gt;&gt; class Mixed(Mixo, Old):
...   thesuper = Old
... 
&gt;&gt;&gt; m = Mixed()
&gt;&gt;&gt; m.foo()
Mixo.foo
Old.foo
</snippet></ROW><ROW><id>3614877</id><snippet>Mixed</snippet></ROW><ROW><id>3614877</id><snippet>Mixo</snippet></ROW><ROW><id>3614877</id><snippet>type</snippet></ROW><ROW><id>3614877</id><snippet>Mixed.__name__ = cls.__name__</snippet></ROW><ROW><id>3614877</id><snippet>cls</snippet></ROW><ROW><id>3614877</id><snippet>def oldstylemix(mixin):
    def makemix(cls):
        class Mixed(mixin, cls):
            thesuper = cls
        Mixed.__name__ = cls.__name__
        return Mixed
    return makemix
</snippet></ROW><ROW><id>3614909</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>3615206</id><snippet>from ... import *</snippet></ROW><ROW><id>3615206</id><snippet>import this</snippet></ROW><ROW><id>3615206</id><snippet>QtCore.whatever</snippet></ROW><ROW><id>3615206</id><snippet>from PyQt4 import QtCore as Cr</snippet></ROW><ROW><id>3615206</id><snippet>from PyQt4 import QtGi as Gu</snippet></ROW><ROW><id>3615206</id><snippet>Cr.blah</snippet></ROW><ROW><id>3615206</id><snippet>Gu.zorp</snippet></ROW><ROW><id>3615206</id><snippet>count_of_all_widgets_in_the_inventory</snippet></ROW><ROW><id>3615206</id><snippet>num_widgets</snippet></ROW><ROW><id>3615206</id><snippet>x</snippet></ROW><ROW><id>3615206</id><snippet>as</snippet></ROW><ROW><id>3615206</id><snippet>from</snippet></ROW><ROW><id>3615206</id><snippet>import</snippet></ROW><ROW><id>3615247</id><snippet>pyshell</snippet></ROW><ROW><id>3615308</id><snippet>&gt;&gt;&gt; class cls(object):
...   def __new__(cls):
...     return object.__new__(object)
...   def __init__(self):
...     print 'in __init__'
... 
&gt;&gt;&gt; x = cls()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3615308</id><snippet>cls.__init__</snippet></ROW><ROW><id>3615308</id><snippet>object.__new__</snippet></ROW><ROW><id>3615502</id><snippet>print("Found Link --&gt; {]".format(value)) 
</snippet></ROW><ROW><id>3615502</id><snippet>print("Found Link --&gt; {}".format(value))
</snippet></ROW><ROW><id>3615950</id><snippet>defaults write com.apple.versioner.python Version 2.5
</snippet></ROW><ROW><id>3615950</id><snippet>export VERSIONER_PYTHON_VERSION=2.5
</snippet></ROW><ROW><id>3615950</id><snippet>man python
</snippet></ROW><ROW><id>3615975</id><snippet>_x_singleton = None

def XFactory():
    global _x_singleton

    if _x_singleton is None:
        _x_singleton = X()
    return _x_singleton
</snippet></ROW><ROW><id>3615975</id><snippet>class X(object):
    instance = None
    def __init__(self):
        # ...
    @classmethod
    def create(cls):
        if cls.instance is None:
            cls.instance = cls()
        return cls.instance
</snippet></ROW><ROW><id>3615975</id><snippet>__init__</snippet></ROW><ROW><id>3616370</id><snippet>((\w+).?)+:\d+
</snippet></ROW><ROW><id>3616370</id><snippet>.</snippet></ROW><ROW><id>3616370</id><snippet>\.</snippet></ROW><ROW><id>3616370</id><snippet>:\d+</snippet></ROW><ROW><id>3616370</id><snippet>(?&gt;(?:\w+\.?)+):\d+
</snippet></ROW><ROW><id>3616370</id><snippet>\w+(?:\.\w+)*:\d+
</snippet></ROW><ROW><id>3616669</id><snippet>try:
    f.write(msg)
except TypeError:
    f.write(msg.encode("utf-8"))
</snippet></ROW><ROW><id>3616669</id><snippet>.mode</snippet></ROW><ROW><id>3616749</id><snippet>session.query(Question).filter(Question.answers == None).all()
</snippet></ROW><ROW><id>3616749</id><snippet>NULL</snippet></ROW><ROW><id>3616749</id><snippet>SELECT questions.id AS questions_id 
FROM questions 
WHERE NOT (EXISTS (SELECT 1 
FROM answers 
WHERE questions.id = answers.question_id))
</snippet></ROW><ROW><id>3616796</id><snippet>from zipfile import ZipFile
from StringIO import StringIO

inMemoryOutputFile = StringIO()

zipFile = ZipFile(inMemoryOutputFile, 'w') 
zipFile.writestr('OEBPS/content.xhtml', 'hello world')
zipFile.close()

inMemoryOutputFile.seek(0)
</snippet></ROW><ROW><id>3617206</id><snippet>reduce(set.intersection, (set(x) for x in [[1,2,3,4],[2,3,7,8],[2,3,6,9],[1,2,5,7]]))
</snippet></ROW><ROW><id>3617403</id><snippet>host = 'server.com'
</snippet></ROW><ROW><id>3617517</id><snippet>class MySuperForm(CombinedForm):
    includes = (ImageForm, EntryForm, )
</snippet></ROW><ROW><id>3617517</id><snippet>__metaclass__</snippet></ROW><ROW><id>3617517</id><snippet>class CombinedForm(BaseForm):
  __metaclass__ = DeclarativeFieldsMetaclassFromMultipleClasses
</snippet></ROW><ROW><id>3617517</id><snippet>class DeclarativeFieldsMetaclassFromMultipleClasses(type):
  def __new__(cls, name, bases, attrs):
    for clazz in attrs['includes']:
      attrs['base_fields'] += get_declared_fields(bases, clazz.attrs)
    new_class = super(DeclarativeFieldsMetaclassFromMultipleClasses,cls).__new__(cls, name, bases, attrs)
    if 'media' not in attrs:
      new_class.media = media_property(new_class)
    return new_class
</snippet></ROW><ROW><id>3617540</id><snippet>datetimes = [ ... ]

# subtracting datetimes gives timedeltas
timedeltas = [datetimes[i-1]-datetimes[i] for i in range(1, len(datetimes))]

# giving datetime.timedelta(0) as the start value makes sum work on tds 
average_timedelta = sum(timedeltas, datetime.timedelta(0)) / len(timedeltas)
</snippet></ROW><ROW><id>3617632</id><snippet>socket.gethostbyname</snippet></ROW><ROW><id>3617632</id><snippet>urllib2</snippet></ROW><ROW><id>3617632</id><snippet>your_request.get_host()</snippet></ROW><ROW><id>3617745</id><snippet>import os
print(os.listdir('.'))
</snippet></ROW><ROW><id>3617745</id><snippet>:'&lt;,'&gt;!python
</snippet></ROW><ROW><id>3618261</id><snippet>999-123-22-...-22</snippet></ROW><ROW><id>3618261</id><snippet>/^[\d-]+(&amp;Ns=\d+)?$/

/^999-123-222-\.\.\.-22(&amp;Ns=\d+)?$/
</snippet></ROW><ROW><id>3618261</id><snippet>(&amp;Ns=\d+)?$</snippet></ROW><ROW><id>3618261</id><snippet>&amp;Ns=&lt;digits&gt;</snippet></ROW><ROW><id>3618261</id><snippet>$</snippet></ROW><ROW><id>3618369</id><snippet>ed_user = User('ed', 'Ed Jones', 'edspassword') #user is the class you mapped the table to
session.add(ed_user)
session.commit() # basically auto saving here :)
</snippet></ROW><ROW><id>3618370</id><snippet>_registry</snippet></ROW><ROW><id>3618370</id><snippet>class IterRegistry(type):
    def __new__(cls, name, bases, attr):
        attr['_registry'] = {} # now every class has it's own _registry
        return type.__new__(cls, name, bases, attr)
</snippet></ROW><ROW><id>3618651</id><snippet>clear()</snippet></ROW><ROW><id>3618658</id><snippet>Objects.get.all().order_by('title')
</snippet></ROW><ROW><id>3618658</id><snippet># loop through all objects
{% for obj in objs %}
  #display the letter only when it changes
  {% ifchanged obj.title.0 %}&lt;h1&gt;{{obj.title.0}}&lt;/h1&gt;{% endifchanged%}
  # display the object
  &lt;h2&gt;obj.title&lt;/h2&gt;
{% endfor %}
</snippet></ROW><ROW><id>3618783</id><snippet>import_transform: lambda x: [x] if x else None
</snippet></ROW><ROW><id>3618796</id><snippet>Session.query(questions).filter(questions.c.user_id==123).one()</snippet></ROW><ROW><id>3618822</id><snippet>import datetime
import random
import dateutil.relativedelta as dr
import itertools

day_of_week = [1,3,5,6]
hour = [1,10,15,17,20]
minute = [4,34,51,58]

now=datetime.datetime.now()
deltas=[]

for min,hr,dow in itertools.product(minute,hour,day_of_week):
    # dateutil convention: Monday = 0, Sunday = 6.
    next_dt=now+dr.relativedelta(minute=min,hour=hr,weekday=dow)
    delta=next_dt-now
    deltas.append(delta)

deltas.sort()
</snippet></ROW><ROW><id>3618822</id><snippet>print(deltas[0])
# 4 days, 14:22:00
</snippet></ROW><ROW><id>3618822</id><snippet>print(now+deltas[0])
# 2010-09-02 01:04:23.258204
</snippet></ROW><ROW><id>3619050</id><snippet>ele</snippet></ROW><ROW><id>3619050</id><snippet>{{ ele.0 }} {{ ele.1 }}</snippet></ROW><ROW><id>3619050</id><snippet>{% for first_name, last_name in response_dictionary.tarr %}
</snippet></ROW><ROW><id>3619069</id><snippet>==</snippet></ROW><ROW><id>3619069</id><snippet>is</snippet></ROW><ROW><id>3619069</id><snippet>&gt;&gt;&gt; 'abcdefgh'[2:6] is 'cdef'
False
&gt;&gt;&gt; 'abcdefgh'[2:6] == 'cdef'
True
</snippet></ROW><ROW><id>3619401</id><snippet>old_pos = pos</snippet></ROW><ROW><id>3619401</id><snippet>pos</snippet></ROW><ROW><id>3619401</id><snippet>list(pos)</snippet></ROW><ROW><id>3619401</id><snippet>pos[:]</snippet></ROW><ROW><id>3619422</id><snippet>setenv()</snippet></ROW><ROW><id>3619422</id><snippet>setenv()</snippet></ROW><ROW><id>3619422</id><snippet>setenv()</snippet></ROW><ROW><id>3619422</id><snippet>PyRun_SimpleString()</snippet></ROW><ROW><id>3619422</id><snippet>snprintf(buff, "import sys\nsys.path.append("%s")\n", py_zip_filename)
PyRun_SimpleString(buff)
</snippet></ROW><ROW><id>3619491</id><snippet>libunbound</snippet></ROW><ROW><id>3619764</id><snippet>assert result.file == file, "%s != %s" % (result.file, file,)</snippet></ROW><ROW><id>3619764</id><snippet>self.assert&lt;Foo&gt;</snippet></ROW><ROW><id>3619764</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>3619764</id><snippet>self.assert&lt;Foo&gt;</snippet></ROW><ROW><id>3619764</id><snippet>assert a == b</snippet></ROW><ROW><id>3619773</id><snippet>appExit()</snippet></ROW><ROW><id>3619773</id><snippet>quit()</snippet></ROW><ROW><id>3619773</id><snippet>exit()</snippet></ROW><ROW><id>3619773</id><snippet>sys.exit(app.exec_())</snippet></ROW><ROW><id>3619773</id><snippet>qApp</snippet></ROW><ROW><id>3619773</id><snippet>qApp-&gt;quit()</snippet></ROW><ROW><id>3619773</id><snippet>QCoreApplication::instance()-&gt;quit()</snippet></ROW><ROW><id>3619773</id><snippet>quit()</snippet></ROW><ROW><id>3619773</id><snippet>exit(0)</snippet></ROW><ROW><id>3619773</id><snippet>exit()</snippet></ROW><ROW><id>3619773</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from PyQt4 import QtCore
from PyQt4 import QtGui    

class SystemTrayIcon(QtGui.QSystemTrayIcon):
    def __init__(self, parent=None):
        QtGui.QSystemTrayIcon.__init__(self, parent)

        self.setIcon(QtGui.QIcon("icon.png"))

        self.iconMenu = QtGui.QMenu(parent)
        appabout = self.iconMenu.addAction("About")
        appexit = self.iconMenu.addAction("Exit")
        self.setContextMenu(self.iconMenu)

        # Remove this next line, it isn't needed
        #self.aboutdialog = QtGui.QWidget(parent)

        self.connect(appabout,QtCore.SIGNAL('triggered()'),self.showAbout)
        self.connect(appexit,QtCore.SIGNAL('triggered()'),self.appExit)

        # Remove this next line, it isn't needed
        #self.show()


    def showAbout(self):
        # Before showing the message box, disable the tray icon menu
        self.iconMenu.setEnabled(false)
        # Replace self.aboutdialog with the Python equivalent of null (0?)
        QtGui.QMessageBox.information(0, self.tr("About Tunarium"), self.tr("Your text here."))
        # Re-enable the tray icon menu
        self.iconMenu.setEnabled(true)

    def appExit(self):
        # Replace the next line with something that calls the QApplication's
        #   exit() or quit() function.
        #sys.exit()
        app.quit()


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    # Tell the application not to exit when the last window is closed. This should 
    # prevent the application from exiting when the message box is closed.
    app.setQuitOnLastWindowClosed(false)

    trayIcon = SystemTrayIcon()
    trayIcon.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>3619773</id><snippet>#include &lt;QtGui/QApplication&gt;

#include "SystemTrayIcon.h"

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    app.setQuitOnLastWindowClosed(false);
    SystemTrayIcon trayIcon(&amp;app);
    trayIcon.show();

    return app.exec();
}
</snippet></ROW><ROW><id>3619773</id><snippet>#ifndef SYSTEMTRAYICON_H
#define SYSTEMTRAYICON_H

#include &lt;QtGui/QSystemTrayIcon&gt;
#include &lt;QtGui/QAction&gt;
#include &lt;QtGui/QMenu&gt;
#include &lt;QtGui/QWidget&gt;

class SystemTrayIcon : public QSystemTrayIcon
{
    Q_OBJECT

public:
    SystemTrayIcon(QObject * parent = 0);
    virtual ~SystemTrayIcon();

private:
    QAction * m_appabout;
    QAction * m_appexit;
    QMenu * m_iconMenu;
    QWidget * m_aboutdialog;

private slots:
    void slot_showAbout();
    void slot_exit();
};

#endif  /* SYSTEMTRAYICON_H */
</snippet></ROW><ROW><id>3619773</id><snippet>#include &lt;iostream&gt;
#include &lt;QtCore/QCoreApplication&gt;
#include &lt;QtGui/QIcon&gt;
#include &lt;QtGui/QAction&gt;
#include &lt;QtGui/QMessageBox&gt;

#include "SystemTrayIcon.h"

SystemTrayIcon::SystemTrayIcon(QObject * parent) :
    QSystemTrayIcon(parent),
    m_appabout(0),
    m_appexit(0),
    m_iconMenu(0),
    m_aboutdialog(0)
{
    setIcon(QIcon("icon.png"));

    m_iconMenu = new QMenu();
    m_appabout = m_iconMenu-&gt;addAction("About");
    m_appexit = m_iconMenu-&gt;addAction("Exit");
    setContextMenu(m_iconMenu);

    connect(m_appabout, SIGNAL(triggered()), this, SLOT(slot_showAbout()));
    connect(m_appexit, SIGNAL(triggered()), this, SLOT(slot_exit()));
}

SystemTrayIcon::~SystemTrayIcon()
{
}

void SystemTrayIcon::slot_showAbout()
{
    std::cout &lt;&lt; "slot show about." &lt;&lt; std::endl;
    m_iconMenu-&gt;setEnabled(false);
    QMessageBox::information(0, "About Tunarium", "Your text here.");
    m_iconMenu-&gt;setEnabled(true);
}

void SystemTrayIcon::slot_exit()
{
    std::cout &lt;&lt; "slot exit." &lt;&lt; std::endl;
    qApp-&gt;quit();
}
</snippet></ROW><ROW><id>3619778</id><snippet>&gt;&gt;&gt; import win32gui
&gt;&gt;&gt; win32gui.GetCursorInfo()
(1, 65555, (717, 412))
</snippet></ROW><ROW><id>3619928</id><snippet>os.system('open "%s"' % foldername)
</snippet></ROW><ROW><id>3619928</id><snippet>os.startfile(foldername)
</snippet></ROW><ROW><id>3619928</id><snippet>os.system('xdg-open "%s"' % foldername)
</snippet></ROW><ROW><id>3619928</id><snippet>import os

systems = {
    'nt': os.startfile,
    'posix': lambda foldername: os.system('xdg-open "%s"' % foldername)
    'os2': lambda foldername: os.system('open "%s"' % foldername)
     }

systems.get(os.name, os.startfile)(foldername)
</snippet></ROW><ROW><id>3620247</id><snippet>get_nowait()</snippet></ROW><ROW><id>3620247</id><snippet>get()</snippet></ROW><ROW><id>3620566</id><snippet>origin_key = db.Key.from_path('Origin', 123)
wines_query = db.Query(Wine).ancestor(origin_key)
</snippet></ROW><ROW><id>3620566</id><snippet>origin_key = db.Key.from_path('Origin', 123)
winery_key = db.Key.from_path('Winery', 456, parent=origin_key)
wines_query = db.Query(Wine).ancestor(winery_key)
</snippet></ROW><ROW><id>3620566</id><snippet>wines_query = Wine.all().filter('variety =', 'merlot')
</snippet></ROW><ROW><id>3620566</id><snippet>Origin -&gt; Winery -&gt; Wine
</snippet></ROW><ROW><id>3620566</id><snippet>/origin/{id}/winery/{id}/wine/{id}</snippet></ROW><ROW><id>3620566</id><snippet>/wine/{opaque and unfriendly datastore key as a string}</snippet></ROW><ROW><id>3620972</id><snippet>start_time = time.time()
# your code
elapsed_time = time.time() - start_time
</snippet></ROW><ROW><id>3620972</id><snippet>import time
from functools import wraps

PROF_DATA = {}

def profile(fn):
    @wraps(fn)
    def with_profiling(*args, **kwargs):
        start_time = time.time()

        ret = fn(*args, **kwargs)

        elapsed_time = time.time() - start_time

        if fn.__name__ not in PROF_DATA:
            PROF_DATA[fn.__name__] = [0, []]
        PROF_DATA[fn.__name__][0] += 1
        PROF_DATA[fn.__name__][1].append(elapsed_time)

        return ret

    return with_profiling

def print_prof_data():
    for fname, data in PROF_DATA.items():
        max_time = max(data[1])
        avg_time = sum(data[1]) / len(data[1])
        print "Function %s called %d times. " % (fname, data[0]),
        print 'Execution time max: %.3f, average: %.3f' % (max_time, avg_time)

def clear_prof_data():
    global PROF_DATA
    PROF_DATA = {}
</snippet></ROW><ROW><id>3620972</id><snippet>@profile
def your_function(...):
    ...
</snippet></ROW><ROW><id>3621046</id><snippet>row = [x.strip() for x in row]
</snippet></ROW><ROW><id>3621046</id><snippet>rstrip</snippet></ROW><ROW><id>3621130</id><snippet>threading</snippet></ROW><ROW><id>3621130</id><snippet>import threading

class WidgetThread(threading.Thread):
     def __init__(self):
         threading.Thread.__init__(self)
         self._stop = False

     def run(self):
        # ... do some time-intensive stuff that stops if self._stop ...
        #
        # Example:
        #  while not self._stop:
        #      do_somthing()

     def stop(self):
         self._stop = True



# Start the thread and make it run the function:

thread = WidgetThread()
thread.start()

# If you want to abort it:

thread.stop()
</snippet></ROW><ROW><id>3621320</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; somestring='in this/ string / i have many. interesting.occurrences of {different chars} that need     to .be removed  '
&gt;&gt;&gt; rx = re.compile('\W+')
&gt;&gt;&gt; res = rx.sub(' ', somestring).strip()
&gt;&gt;&gt; res
'in this string i have many interesting occurrences of different chars that need to be removed'
</snippet></ROW><ROW><id>3621353</id><snippet>if l.locked():
    l.release()
</snippet></ROW><ROW><id>3621745</id><snippet>float( 14 ) / 4 == 3.5</snippet></ROW><ROW><id>3621745</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>3621745</id><snippet>__future__</snippet></ROW><ROW><id>3621745</id><snippet>__future__</snippet></ROW><ROW><id>3621745</id><snippet>//</snippet></ROW><ROW><id>3621745</id><snippet>/</snippet></ROW><ROW><id>3621775</id><snippet>import csv, pyodbc

# set up some constants
MDB = 'c:/path/to/my.mdb'; DRV = '{Microsoft Access Driver (*.mdb)}'; PWD = 'pw'

# connect to db
con = pyodbc.connect('DRIVER={};DBQ={};PWD={}'.format(DRV,MDB,PWD))
cur = con.cursor()

# run a query and get the results 
SQL = 'SELECT * FROM mytable;' # your query goes here
rows = cur.execute(SQL).fetchall()
cur.close()
con.close()

# you could change the mode from 'w' to 'a' (append) for any subsequent queries
with open('mytable.csv', 'wb') as fou:
    csv_writer = csv.writer(fou) # default field-delimiter is ","
    csv_writer.writerows(rows)
</snippet></ROW><ROW><id>3621834</id><snippet>__lt__</snippet></ROW><ROW><id>3621834</id><snippet>class Instance():
    def __init__(self, number):
        self.number = number

    def __lt__(self, other):
        return self.number &lt; other.number
        # now min(iList) just works
</snippet></ROW><ROW><id>3621834</id><snippet>imin = min(iList, key=lambda x:x.number)</snippet></ROW><ROW><id>3621834</id><snippet>sort, min, max</snippet></ROW><ROW><id>3621834</id><snippet>key</snippet></ROW><ROW><id>3622057</id><snippet>for win32gui.GetCursorInfo()[1] == 65567:
</snippet></ROW><ROW><id>3622057</id><snippet>if</snippet></ROW><ROW><id>3622149</id><snippet>For an in-depth explanation, please see :download:`A Detailed Example &lt;some_extra_file.pdf&gt;`.
</snippet></ROW><ROW><id>3622150</id><snippet>]</snippet></ROW><ROW><id>3622150</id><snippet>foo[ : len( foo ) ] == foo
</snippet></ROW><ROW><id>3622150</id><snippet>wordlist</snippet></ROW><ROW><id>3622661</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "[u'foo']"
&gt;&gt;&gt; ast.literal_eval(s)
[u'foo']
</snippet></ROW><ROW><id>3622786</id><snippet>if 'wsgi.file_wrapper' in environ:
    return environ['wsgi.file_wrapper'](filelike, block_size)
else:
    return iter(lambda: filelike.read(block_size), '')
</snippet></ROW><ROW><id>3623022</id><snippet>proceed</snippet></ROW><ROW><id>3623022</id><snippet>False</snippet></ROW><ROW><id>3623022</id><snippet>while win32gui...</snippet></ROW><ROW><id>3623022</id><snippet>global proceed
proceed = True
while proceed and win32gui...
</snippet></ROW><ROW><id>3623025</id><snippet>from django.contrib import admin
from myapp.models import Contestant

def send_mail(modeladmin, request, queryset):
    for obj in queryset:
        obj.send_registration_email()

make_published.short_description = "Resend activation mails for selected users"

class ContestantAdmin(admin.ModelAdmin):
    list_display = [...]
    ordering = [...]
    actions = [send_mail]

admin.site.register(Contestant, ContestantAdmin)
</snippet></ROW><ROW><id>3623302</id><snippet>gethostbyname</snippet></ROW><ROW><id>3623302</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>3623302</id><snippet>&gt;&gt;&gt; socket.gethostbyname('car.spillville.com')
'209.20.76.192'
&gt;&gt;&gt; socket.gethostbyaddr('209.20.76.192')
('car.spillville.com', [], ['209.20.76.192'])
</snippet></ROW><ROW><id>3623321</id><snippet>writerow</snippet></ROW><ROW><id>3623321</id><snippet>writerow</snippet></ROW><ROW><id>3623321</id><snippet>[self.linkvalue, data]</snippet></ROW><ROW><id>3623378</id><snippet>someclass instance at 0xdeadbeef</snippet></ROW><ROW><id>3623378</id><snippet>__repr__</snippet></ROW><ROW><id>3623378</id><snippet>gedcom.Element</snippet></ROW><ROW><id>3623378</id><snippet>__str__</snippet></ROW><ROW><id>3623378</id><snippet>for x in g.element_list():
    print x
</snippet></ROW><ROW><id>3623378</id><snippet>__str__</snippet></ROW><ROW><id>3623378</id><snippet>__repr__</snippet></ROW><ROW><id>3623614</id><snippet>pylab.figure</snippet></ROW><ROW><id>3623614</id><snippet>In [313]: pylab.figure?
</snippet></ROW><ROW><id>3623614</id><snippet>pylab.close()     # closes the current figure
</snippet></ROW><ROW><id>3623997</id><snippet>class TagParser(HTMLParser):

    def __init__(self, url, tag):
        HTMLParser.__init__(self)
        self.tag = tag
        req = urllib2.urlopen(url)
        self.feed(req.read())

    def handle_starttag(self, tag, attrs):
        if tag != self.tag: return
        for name, value in attrs:
            print("Found Tag({2}) --&gt; [{0}]{1}".format(name, value, self.tag))
</snippet></ROW><ROW><id>3624010</id><snippet>extra_headers={'Cache-control': 'max-age=0'}</snippet></ROW><ROW><id>3624354</id><snippet>d = { "Report": 1,
      "Article": 2,
       "Book": 3 }
result = sorted(mylist, key=lambda x:d[x[0]])
</snippet></ROW><ROW><id>3624425</id><snippet>_c.so</snippet></ROW><ROW><id>3624425</id><snippet>__init__.py</snippet></ROW><ROW><id>3624425</id><snippet>from _c import *</snippet></ROW><ROW><id>3624425</id><snippet>package</snippet></ROW><ROW><id>3624425</id><snippet>_c.so</snippet></ROW><ROW><id>3624425</id><snippet>__init__.py</snippet></ROW><ROW><id>3624799</id><snippet>class Edge(EdgeBase):
    def __new__(cls, left, right):
        self = super(Edge, cls).__new__(cls, left, right)
        self._hash = hash(self.left) * hash(self.right)
        return self

    def __hash__(self):
        return self._hash
</snippet></ROW><ROW><id>3624799</id><snippet>__new__</snippet></ROW><ROW><id>3624799</id><snippet>__new__</snippet></ROW><ROW><id>3624799</id><snippet>__init__</snippet></ROW><ROW><id>3624799</id><snippet>cls</snippet></ROW><ROW><id>3624799</id><snippet>super</snippet></ROW><ROW><id>3624799</id><snippet>__new__</snippet></ROW><ROW><id>3624799</id><snippet>__new__</snippet></ROW><ROW><id>3624799</id><snippet>staticmethod</snippet></ROW><ROW><id>3625447</id><snippet>easy_install</snippet></ROW><ROW><id>3625447</id><snippet>easy_install</snippet></ROW><ROW><id>3625447</id><snippet>/usr/bin</snippet></ROW><ROW><id>3625447</id><snippet>which python</snippet></ROW><ROW><id>3625447</id><snippet>easy_install</snippet></ROW><ROW><id>3625447</id><snippet>easy_install</snippet></ROW><ROW><id>3625447</id><snippet>bin</snippet></ROW><ROW><id>3625447</id><snippet>/Library/Frameworks/Python.framework/Versions/2.5//bin</snippet></ROW><ROW><id>3625447</id><snippet>easy_install</snippet></ROW><ROW><id>3625447</id><snippet>lxml</snippet></ROW><ROW><id>3625447</id><snippet>/Library/Frameworks/Python.framework/Versions/2.5/lib</snippet></ROW><ROW><id>3625684</id><snippet>referer = urllib.quote(referer, '.:/?=;-%#')
</snippet></ROW><ROW><id>3626079</id><snippet>&gt;&gt;&gt; from xml.dom.minidom import parse
&gt;&gt;&gt; xmldoc = open("xmltestfile.xml", "rU")
&gt;&gt;&gt; x = FuncDoc(xmldoc)
</snippet></ROW><ROW><id>3626079</id><snippet>&gt;&gt;&gt; xmldoc.close()
&gt;&gt;&gt; xmldoc = open("xmltestfile.xml", "rU")
&gt;&gt;&gt; xml1 = parse(xmldoc)
&gt;&gt;&gt; xml2 = parse(xmldoc)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/xml/dom/minidom.py", line 1918, in parse
    return expatbuilder.parse(file)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/xml/dom/expatbuilder.py", line 928, in parse
    result = builder.parseFile(file)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/xml/dom/expatbuilder.py", line 211, in parseFile
    parser.Parse("", True)
xml.parsers.expat.ExpatError: no element found: line 1, column 0
</snippet></ROW><ROW><id>3626079</id><snippet>xmldoc.seek(0)</snippet></ROW><ROW><id>3626343</id><snippet>dig</snippet></ROW><ROW><id>3626343</id><snippet>$ dig -x 2404:6800:8004::68

; &lt;&lt;&gt;&gt; DiG 9.4.3-P5 &lt;&lt;&gt;&gt; -x 2404:6800:8004::68
;; global options:  printcmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 35573
;; flags: qr aa rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;8.6.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.4.0.0.8.0.0.8.6.4.0.4.2.ip6.arpa. IN PTR

;; Query time: 364 msec
;; SERVER: 12.165.58.2#53(12.165.58.2)
;; WHEN: Thu Sep  2 03:45:50 2010
;; MSG SIZE  rcvd: 90
</snippet></ROW><ROW><id>3626343</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; socket.has_ipv6
True
&gt;&gt;&gt; socket.getfqdn('2001:838:2:1::30:67')
'gatey.sixxs.net'
</snippet></ROW><ROW><id>3626343</id><snippet>$ dig -x 2001:838:2:1::30:67

; &lt;&lt;&gt;&gt; DiG 9.4.3-P5 &lt;&lt;&gt;&gt; -x 2001:838:2:1::30:67
;; global options:  printcmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 934
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 13, ADDITIONAL: 1

;; QUESTION SECTION:
;7.6.0.0.0.3.0.0.0.0.0.0.0.0.0.0.1.0.0.0.2.0.0.0.8.3.8.0.1.0.0.2.ip6.arpa. IN PTR

;; ANSWER SECTION:
7.6.0.0.0.3.0.0.0.0.0.0.0.0.0.0.1.0.0.0.2.0.0.0.8.3.8.0.1.0.0.2.ip6.arpa. 43200 IN PTR gatey.sixxs.net.

;; AUTHORITY SECTION:
.                       517204  IN      NS      e.root-servers.net.
.                       517204  IN      NS      m.root-servers.net.
.                       517204  IN      NS      a.root-servers.net.
.                       517204  IN      NS      l.root-servers.net.
.                       517204  IN      NS      c.root-servers.net.
.                       517204  IN      NS      h.root-servers.net.
.                       517204  IN      NS      j.root-servers.net.
.                       517204  IN      NS      g.root-servers.net.
.                       517204  IN      NS      f.root-servers.net.
.                       517204  IN      NS      i.root-servers.net.
.                       517204  IN      NS      d.root-servers.net.
.                       517204  IN      NS      b.root-servers.net.
.                       517204  IN      NS      k.root-servers.net.

;; ADDITIONAL SECTION:
a.root-servers.net.     604222  IN      A       198.41.0.4

;; Query time: 383 msec
;; SERVER: 12.165.58.2#53(12.165.58.2)
;; WHEN: Thu Sep  2 03:55:03 2010
;; MSG SIZE  rcvd: 343
</snippet></ROW><ROW><id>3626395</id><snippet>rsz=8</snippet></ROW><ROW><id>3626395</id><snippet>start=...</snippet></ROW><ROW><id>3626395</id><snippet>import urllib
import json
import sys
import itertools

def hits(astr):
    for start in itertools.count():
        query = urllib.urlencode({'q':astr, 'rsz': 8, 'start': start*8})
        url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&amp;%s'%(query)
        search_results = urllib.urlopen(url)
        results = json.loads(search_results.read())
        data = results['responseData']
        if data:
            hits = data['results']
            for h in hits:
                yield h['url']
        else:
            raise StopIteration


def showmore(astr,num):
    for i,h in enumerate(itertools.islice(hits(astr),num)):
        print('{i}: {h}'.format(i=i,h=h))

if __name__=='__main__':
    showmore(sys.argv[1],50)
</snippet></ROW><ROW><id>3626810</id><snippet>IterRegistry</snippet></ROW><ROW><id>3626810</id><snippet>DeclarativeMeta</snippet></ROW><ROW><id>3626810</id><snippet>IterRegistry</snippet></ROW><ROW><id>3626810</id><snippet>__new__</snippet></ROW><ROW><id>3626810</id><snippet>__iter__</snippet></ROW><ROW><id>3626810</id><snippet>DeclarativeMeta</snippet></ROW><ROW><id>3626810</id><snippet>__init__</snippet></ROW><ROW><id>3626810</id><snippet>__setattr__</snippet></ROW><ROW><id>3626810</id><snippet>super</snippet></ROW><ROW><id>3626810</id><snippet>Meta</snippet></ROW><ROW><id>3626810</id><snippet>Meta</snippet></ROW><ROW><id>3626810</id><snippet>Meta</snippet></ROW><ROW><id>3626810</id><snippet>super(Meta,cls).__init__(classname, bases, dict_)</snippet></ROW><ROW><id>3626810</id><snippet>class DeclarativeMeta(type):
    def __init__(cls, classname, bases, dict_):
        print('DeclarativeMeta')
        # if '_decl_class_registry' in cls.__dict__:
        #     return type.__init__(cls, classname, bases, dict_)       
        # _as_declarative(cls, classname, dict_)
        return type.__init__(cls, classname, bases, dict_)

class Meta(type):
    def __init__(cls, classname, bases, dict_):
        print('Meta')
        return type.__init__(cls, classname, bases, dict_)

class NewMeta(Meta,DeclarativeMeta): pass

class MyBase(object):
    __metaclass__ = NewMeta
    pass
</snippet></ROW><ROW><id>3626810</id><snippet>'Meta'</snippet></ROW><ROW><id>3626810</id><snippet>Meta.__init__</snippet></ROW><ROW><id>3626810</id><snippet>DeclarativeMeta.__init__</snippet></ROW><ROW><id>3626810</id><snippet>class Meta(type):
    def __init__(cls, classname, bases, dict_):
        print('Meta')
        return super(Meta,cls).__init__(classname, bases, dict_)
</snippet></ROW><ROW><id>3626810</id><snippet>Meta.__init__</snippet></ROW><ROW><id>3626810</id><snippet>DeclarativeMeta.__init__</snippet></ROW><ROW><id>3627316</id><snippet>&gt;&gt;&gt; tmp = "a,b,cde"
&gt;&gt;&gt; tmp2 = tmp.split(',')
&gt;&gt;&gt; tmp2.reverse()
&gt;&gt;&gt; "".join(tmp2)
'cdeba'
</snippet></ROW><ROW><id>3627316</id><snippet>&gt;&gt;&gt; tmp = "a,b,cde"
&gt;&gt;&gt; ''.join(tmp.split(',')[::-1])
'cdeba'
</snippet></ROW><ROW><id>3627316</id><snippet>reverse()</snippet></ROW><ROW><id>3627316</id><snippet>[::-1]</snippet></ROW><ROW><id>3627323</id><snippet>Workstation</snippet></ROW><ROW><id>3627822</id><snippet>win32com</snippet></ROW><ROW><id>3627822</id><snippet>import win32com.client
import os

def main():
    db_path = r'C:\temp.mdb'
    if os.path.exists(db_path):
        os.remove(db_path)

    db_eng = win32com.client.gencache.EnsureDispatch("DAO.DBEngine.36")
    db = db_eng.CreateDatabase(db_path, win32com.client.constants.dbLangGeneral)

    db.Execute("CREATE TABLE test (ID Text, numapples Integer)")
    db.Execute("INSERT INTO test VALUES ('ABC', 3)")

    db.Close()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3627835</id><snippet>__repr__</snippet></ROW><ROW><id>3627835</id><snippet>__str__</snippet></ROW><ROW><id>3627835</id><snippet>__repr__</snippet></ROW><ROW><id>3627835</id><snippet>__str__</snippet></ROW><ROW><id>3627835</id><snippet>class Foo(object):
    def __repr__(self):
        return u'\N{WHITE SMILING FACE}' 

class Bar(object):
    def __repr__(self):
        return u'\N{WHITE SMILING FACE}'.encode('utf8')

repr(Bar())
# ☺
repr(Foo())
# UnicodeEncodeError: 'ascii' codec can't encode character u'\u263a' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>3627835</id><snippet>__repr__</snippet></ROW><ROW><id>3627835</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>3627835</id><snippet>'&lt;{}&gt;'.format(repr(x).decode('utf-8'))).encode('utf-8')
</snippet></ROW><ROW><id>3627835</id><snippet>str('&lt;{}&gt;').format(repr(x))
</snippet></ROW><ROW><id>3627835</id><snippet>str</snippet></ROW><ROW><id>3627835</id><snippet>utf-8</snippet></ROW><ROW><id>3627835</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>3627835</id><snippet>'&lt;{}&gt;'.format(repr(x))
</snippet></ROW><ROW><id>3628158</id><snippet>&gt;&gt;&gt; words = { "apple" }
&gt;&gt;&gt; def isOK( fragment, letter ):
...     word = fragment + letter
...     if len( word ) &lt;= 3: return True
...     return word not in words and any( w.startswith( word ) for w in words )
...
&gt;&gt;&gt; isOK( "a", "p" )
True
&gt;&gt;&gt; isOK( "ap", "p" )
True
&gt;&gt;&gt; isOK( "app", "l" )
True
&gt;&gt;&gt; isOK( "appl", "l" )
False
&gt;&gt;&gt; isOK( "appl", "e" )
False
</snippet></ROW><ROW><id>3628158</id><snippet>return len( word ) &lt;= 3 or word not in words and any( w.startswith( word ) for w in words )
</snippet></ROW><ROW><id>3628158</id><snippet>words</snippet></ROW><ROW><id>3628158</id><snippet>def isOK( word ):
    condition_one = len( word ) &gt; 3 and word in words
    condition_two = not any( w.startswith( word ) for word in words )

    return not( condition_one or condition_two )
</snippet></ROW><ROW><id>3628497</id><snippet>&lt;meta http-equiv="refresh"&gt;</snippet></ROW><ROW><id>3628730</id><snippet>i</snippet></ROW><ROW><id>3628730</id><snippet>import numpy as np

i = np.array([0,0,1,2,2])
d = np.array([0,1,2,3,4])

i_max = i.max()
c = np.empty(i_max+1)
for j in range(i_max+1):
    c[j] = d[i==j].sum()

print c
[1. 2. 7.]
</snippet></ROW><ROW><id>3628981</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>3628981</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>3628981</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>3628981</id><snippet>#!/usr/bin/env python2.7</snippet></ROW><ROW><id>3628981</id><snippet>manage.py</snippet></ROW><ROW><id>3629249</id><snippet>+--------------------------+
|task1 | wait period | comp|
+--------------------------+
       +--------------------------+
       |task2 | wait period | comp|
       +--------------------------+
</snippet></ROW><ROW><id>3629498</id><snippet>while x &gt; 0:
    if num%x == 0:
        if ifprime(x):
                print "I've found a prime! "
                print x
                prime[len(prime):] = [x]
    x -= 1
</snippet></ROW><ROW><id>3629597</id><snippet>if key == "name" and item:</snippet></ROW><ROW><id>3629597</id><snippet>if (key == "name") and (item evaluates to True)</snippet></ROW><ROW><id>3629597</id><snippet>(item evaluates to True)</snippet></ROW><ROW><id>3629597</id><snippet>if (key == "name") and []</snippet></ROW><ROW><id>3629597</id><snippet>False</snippet></ROW><ROW><id>3630248</id><snippet>declarative_base()</snippet></ROW><ROW><id>3630248</id><snippet>from sqlalchemy import Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base

class IdNameMixin(object):
    id = Column(Integer, primary_key=True)
    name = Column(String)

class C1(declarative_base(), IdNameMixin):
    __tablename__ = 'C1'

class C2(declarative_base(), IdNameMixin):
    __tablename__ = 'C2'

print C1.__dict__['id'] is C2.__dict__['id']
print C1.__dict__['name'] is C2.__dict__['name']
</snippet></ROW><ROW><id>3630248</id><snippet>C1</snippet></ROW><ROW><id>3630248</id><snippet>C2</snippet></ROW><ROW><id>3630248</id><snippet>Column</snippet></ROW><ROW><id>3630422</id><snippet>wordDict</snippet></ROW><ROW><id>3630422</id><snippet>None</snippet></ROW><ROW><id>3630422</id><snippet>play_best_hand</snippet></ROW><ROW><id>3630422</id><snippet>return</snippet></ROW><ROW><id>3630422</id><snippet>None</snippet></ROW><ROW><id>3630441</id><snippet>#include raw "prod.env"
</snippet></ROW><ROW><id>3630441</id><snippet>#set global $HTTP_PORT="34120"
</snippet></ROW><ROW><id>3630800</id><snippet>logger.handlers</snippet></ROW><ROW><id>3630811</id><snippet>numpy/lib/function_base.py</snippet></ROW><ROW><id>3630811</id><snippet>numpy.asanyarray</snippet></ROW><ROW><id>3630811</id><snippet>numpy.asarray</snippet></ROW><ROW><id>3630992</id><snippet>ABC</snippet></ROW><ROW><id>3630992</id><snippet>(ABC){5}
</snippet></ROW><ROW><id>3630992</id><snippet>(ABC)*
</snippet></ROW><ROW><id>3630992</id><snippet>(ABC)+
</snippet></ROW><ROW><id>3630992</id><snippet>&gt;&gt;&gt; re.search('[0-9]* (ABC(...))', '123 ABCDEF 456').group(0)
'123 ABCDEF'
&gt;&gt;&gt; re.search('[0-9]* (ABC(...))', '123 ABCDEF 456').group(1)
'ABCDEF'
&gt;&gt;&gt; re.search('[0-9]* (ABC(...))', '123 ABCDEF 456').group(2)
'DEF'
</snippet></ROW><ROW><id>3630992</id><snippet>(?:</snippet></ROW><ROW><id>3630992</id><snippet>&gt;&gt;&gt; re.search('[0-9]* (?:ABC(...))', '123 ABCDEF 456').group(1)
'DEF'
</snippet></ROW><ROW><id>3630992</id><snippet>&gt;&gt;&gt; re.search('((?:ABC){5})(DEF)', 'ABCABCABCABCABCDEF').group(1)
'ABCABCABCABCABC'
&gt;&gt;&gt; re.search('((?:ABC){5})(DEF)', 'ABCABCABCABCABCDEF').group(2)
'DEF'
</snippet></ROW><ROW><id>3631104</id><snippet>import struct

RESULT_FORMAT = 'd' # Double-precision float.
RESULT_SIZE = struct.calcsize(RESULT_FORMAT)
RESULT_FILE = '/tmp/results'

def worker(position, input_filename1, input_filename2):
    val = MyScript(input_filename1, input_filename2)
    with open(RESULT_FILE, 'rb+') as f:
        f.seek(RESULT_SIZE * position)
        f.write(struct.pack(RESULT_FORMAT, val))
</snippet></ROW><ROW><id>3631234</id><snippet>bzrlib</snippet></ROW><ROW><id>3631234</id><snippet>&gt;&gt;&gt; from bzrlib.branch import BzrBranch
&gt;&gt;&gt; branch =  BzrBranch.open('.')
&gt;&gt;&gt; branch.last_revision_info()
</snippet></ROW><ROW><id>3631248</id><snippet>import Tkinter as tk

class App:
    def __init__(self):
        root = tk.Tk()
        root.bind_all("&lt;1&gt;", self.woot)
        label1 = tk.Label(text="Label 1", name="label1")
        label2 = tk.Label(text="Label 2", name="label2")
        entry1 = tk.Entry(name="entry1")
        entry2 = tk.Entry(name="entry2")
        label1.pack()
        label2.pack()
        entry1.pack()
        entry2.pack()
        root.mainloop()

    def woot(self, event):
        print "woot!", event.widget

app=App()
</snippet></ROW><ROW><id>3631506</id><snippet>db_get_data = Model.objects.all()
for cur in db_get_data:
    for field in cur._meta.fields: # field is a django field
        if field.name == 'id':
             print 'found primary key'
</snippet></ROW><ROW><id>3631529</id><snippet>from datetime import datetime, timedelta

tfmt = "%d-%b-%Y %H"
tfmtlen = 14

def changestamp(line, **kwargs):
    linetime = datetime.strptime(line[:tfmtlen],tfmt)
    linetime += timedelta(**kwargs)

    return linetime.strftime(tfmt) + line[tfmtlen:]    
</snippet></ROW><ROW><id>3631529</id><snippet>&gt;&gt;&gt; line = "04-Aug-2010 07:32:31.416 client 10.0.0.1#00000: query: google.c...
&gt;&gt;&gt; changestamp(line, hours=8)
'04-Aug-2010 15:32:31.416 client 10.0.0.1#00000: query: google.com IN A + (...
&gt;&gt;&gt; changestamp(line, hours=-8)
'03-Aug-2010 23:32:31.416 client 10.0.0.1#00000: query: google.com IN A + (...
&gt;&gt;&gt; changestamp(line, weeks=52, days=-365+1/3, hours=24)
'04-Aug-2010 07:32:31.416 client 10.0.0.1#00000: query: google.com IN A + (...
</snippet></ROW><ROW><id>3631857</id><snippet>python3</snippet></ROW><ROW><id>3631857</id><snippet>python</snippet></ROW><ROW><id>3631857</id><snippet>python</snippet></ROW><ROW><id>3631857</id><snippet>python3</snippet></ROW><ROW><id>3631870</id><snippet>thelist</snippet></ROW><ROW><id>3631870</id><snippet>list</snippet></ROW><ROW><id>3631870</id><snippet>import operator

thelist = sorted((my + tuple(v) for my, v in dictionary.iteritems()),
                 key = operator.itemgetter(1, 0))
</snippet></ROW><ROW><id>3631927</id><snippet>undoable</snippet></ROW><ROW><id>3631927</id><snippet>@decorator</snippet></ROW><ROW><id>3631927</id><snippet>from youforgottotelluswhence import decorator</snippet></ROW><ROW><id>3631927</id><snippet>from</snippet></ROW><ROW><id>3631927</id><snippet>import functools

def undoable(f):
    @functools.wraps(f)
    def wrapper(self, *a, **k):
        tok = k.get('undo_token')
        if tok is None:
            tok = k['undo_token'] = self.get_undo_token()
        return f(self, *a, **k), tok
    return wrapper
</snippet></ROW><ROW><id>3631927</id><snippet>self</snippet></ROW><ROW><id>3631927</id><snippet>args[0]</snippet></ROW><ROW><id>3632068</id><snippet>def node_depth(node, depth=0, colored_nodes=None):
    ...
    if colored_nodes is None: colored_nodes = set()
</snippet></ROW><ROW><id>3632086</id><snippet>c:/what/ever/itis.zip</snippet></ROW><ROW><id>3632086</id><snippet>sys.path</snippet></ROW><ROW><id>3632086</id><snippet>import themodule</snippet></ROW><ROW><id>3632162</id><snippet>&gt;&gt;&gt; a=[1,2,3,4,5]
&gt;&gt;&gt; a[:-1]
[1, 2, 3, 4]
</snippet></ROW><ROW><id>3632162</id><snippet>[x for x in titles if x.findChildren()]
</snippet></ROW><ROW><id>3632240</id><snippet>from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor
from twisted.internet.task import LoopingCall
import sys, time

class HeartbeatSender(DatagramProtocol):
    def __init__(self, name, host, port):
        self.name = name
        self.loopObj = None
        self.host = host
        self.port = port

    def startProtocol(self):
        # Called when transport is connected
        # I am ready to send heart beats
        self.loopObj = LoopingCall(self.sendHeartBeat)
        self.loopObj.start(2, now=False)

    def stopProtocol(self):
        "Called after all transport is teared down"
        pass

    def datagramReceived(self, data, (host, port)):
        print "received %r from %s:%d" % (data, host, port)


    def sendHeartBeat(self):
        self.transport.write(self.name, (self.host, self.port))



class HeartbeatReciever(DatagramProtocol):
    def __init__(self):
        pass

    def startProtocol(self):
        "Called when transport is connected"
        pass

    def stopProtocol(self):
        "Called after all transport is teared down"


    def datagramReceived(self, data, (host, port)):
        now = time.localtime(time.time())  
        timeStr = str(time.strftime("%y/%m/%d %H:%M:%S",now)) 
        print "received %r from %s:%d at %s" % (data, host, port, timeStr)



heartBeatSenderObj = HeartbeatSender("sender", "127.0.0.1", 8005)

reactor.listenMulticast(8005, HeartbeatReciever(), listenMultiple=True)
reactor.listenMulticast(8005, heartBeatSenderObj, listenMultiple=True)
reactor.run()
</snippet></ROW><ROW><id>3632240</id><snippet>from twisted.internet.protocol import DatagramProtocol
from twisted.internet import reactor
from twisted.internet.task import LoopingCall
import sys, time

class HeartbeatSender(DatagramProtocol):
    def __init__(self, name, host, port):
        self.name = name
        self.loopObj = None
        self.host = host
        self.port = port

    def startProtocol(self):
        # Called when transport is connected
        # I am ready to send heart beats
        self.transport.joinGroup('224.0.0.1')
        self.loopObj = LoopingCall(self.sendHeartBeat)
        self.loopObj.start(2, now=False)

    def stopProtocol(self):
        "Called after all transport is teared down"
        pass

    def datagramReceived(self, data, (host, port)):
        print "received %r from %s:%d" % (data, host, port)


    def sendHeartBeat(self):
        self.transport.write(self.name, (self.host, self.port))



class HeartbeatReciever(DatagramProtocol):
    def __init__(self, name):
        self.name = name

    def startProtocol(self):
        "Called when transport is connected"
        self.transport.joinGroup('224.0.0.1')
        pass

    def stopProtocol(self):
        "Called after all transport is teared down"


    def datagramReceived(self, data, (host, port)):
        now = time.localtime(time.time())  
        timeStr = str(time.strftime("%y/%m/%d %H:%M:%S",now)) 
        print "%s received %r from %s:%d at %s" % (self.name, data, host, port, timeStr)



heartBeatSenderObj = HeartbeatSender("sender", "224.0.0.1", 8005)

reactor.listenMulticast(8005, HeartbeatReciever("listner1"), listenMultiple=True)
reactor.listenMulticast(8005, HeartbeatReciever("listner2"), listenMultiple=True)
reactor.listenMulticast(8005, heartBeatSenderObj, listenMultiple=True)
reactor.run()
</snippet></ROW><ROW><id>3632247</id><snippet>from django.db import models
from django.core.files.storage import FileSystemStorage

fs = FileSystemStorage(location='/media/photos')

class Car(models.Model):
    ...
    photo = models.ImageField(storage=fs)
</snippet></ROW><ROW><id>3632889</id><snippet>import shelve

shelf = shelve.open(filename)
shelf['key1'] = value1
shelf['key2'] = value2

shelf.close()
 # next run
shelf.open(filename)

value1 = shelf['key1']
#etc
</snippet></ROW><ROW><id>3632917</id><snippet>WSGIScriptAlias / /home/steve/www/nov2010/app
Alias /static /home/steve/www/nov2010/public

&lt;Directory /home/steve/www/nov2010/app&gt;
    SetHandler wsgi-script
    Options ExecCGI
&lt;/Directory&gt;

AddType text/html .py

&lt;Location /&gt;
    RewriteEngine on
    RewriteBase /
    RewriteCond %{REQUEST_URI} !^/static
    RewriteCond %{REQUEST_URI} !^(/.*)+code.py/
    RewriteRule ^(.*)$ code.py/$1 [PT]
&lt;/Location&gt;
</snippet></ROW><ROW><id>3632917</id><snippet>Alias /static /home/steve/www/nov2010/public

WSGIScriptAlias / /home/steve/www/nov2010/app/code.py

&lt;Directory /home/steve/www/nov2010/app&gt;
Order allow,deny
Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>3633145</id><snippet>lst = [j + k for j in s1 for k in s2]
</snippet></ROW><ROW><id>3633145</id><snippet>lst = [(j, k) for j in s1 for k in s2]
</snippet></ROW><ROW><id>3633283</id><snippet>% ./youtube-dl -a batch.txt -c
</snippet></ROW><ROW><id>3633283</id><snippet>% echo "http://www.youtube.com/watch?v=j9SgDoypXcI" &gt;&gt;batch.txt
</snippet></ROW><ROW><id>3633283</id><snippet>2278,2286d2277
&lt;       while True:
&lt;           batchurls = batchfd.readlines()
&lt;           if not batchurls:
&lt;               time.sleep(1)
&lt;               continue
&lt;           batchurls = [x.strip() for x in batchurls]
&lt;           batchurls = [x for x in batchurls if len(x) &gt; 0]
&lt;           for bb in batchurls:
&lt;               retcode = fd.download([bb])
</snippet></ROW><ROW><id>3633311</id><snippet>[x for x in correct_order if x in messed_order] + [x for x in messed_order if x not in correct_order]
</snippet></ROW><ROW><id>3633649</id><snippet>while True:
    record = result.fetch_row()
    if not record: break
    print record
</snippet></ROW><ROW><id>3633649</id><snippet>_mysql</snippet></ROW><ROW><id>3633649</id><snippet>import MySQLdb</snippet></ROW><ROW><id>3634331</id><snippet>test.py
HI FROM PYTHON
Enter user name
</snippet></ROW><ROW><id>3634331</id><snippet>line = sys.stdin.readline()
sys.stdout.write("hello," + line)
</snippet></ROW><ROW><id>3634331</id><snippet>a = 1+4 
</snippet></ROW><ROW><id>3634483</id><snippet>for item in file_data.iter('{http://www.w3.org/1999/xhtml}SHOPITEM'):
</snippet></ROW><ROW><id>3634483</id><snippet>xhtml_ns = '{http://www.w3.org/1999/xhtml}'
...
for item in file_data.iter(xhtml_ns + 'SHOPITEM'):
</snippet></ROW><ROW><id>3634606</id><snippet>highlight SpellBad term=reverse ctermbg=1
</snippet></ROW><ROW><id>3634606</id><snippet>if has("gui_running")
    highlight SpellBad term=underline gui=undercurl guisp=Orange
endif
</snippet></ROW><ROW><id>3635116</id><snippet>from django.shortcuts import render_to_response

def my_view(request):
    mylist = ['item 1', 'item 2', 'item 3']

    return render_to_response('template.html', {'mylist':mylist})
</snippet></ROW><ROW><id>3635116</id><snippet>list</snippet></ROW><ROW><id>3635116</id><snippet>{% for i in mylist %}
   {{ i }}, 
{% endfor %}
</snippet></ROW><ROW><id>3635163</id><snippet>paramiko.SFTPClient</snippet></ROW><ROW><id>3635163</id><snippet>import paramiko
paramiko.util.log_to_file('/tmp/paramiko.log')

# Open a transport

host = "example.com"
port = 22
transport = paramiko.Transport((host, port))

# Auth

password = "foo"
username = "bar"
transport.connect(username = username, password = password)

# Go!

sftp = paramiko.SFTPClient.from_transport(transport)

# Download

filepath = '/etc/passwd'
localpath = '/home/remotepasswd'
sftp.get(filepath, localpath)

# Upload

filepath = '/home/foo.jpg'
localpath = '/home/pony.jpg'
sftp.put(filepath, localpath)

# Close

sftp.close()
transport.close()
</snippet></ROW><ROW><id>3635658</id><snippet>auto_now_add</snippet></ROW><ROW><id>3635658</id><snippet>default=datetime.datetime.now</snippet></ROW><ROW><id>3636024</id><snippet>__version__</snippet></ROW><ROW><id>3636040</id><snippet>ignore_discard=True</snippet></ROW><ROW><id>3636054</id><snippet>class ProductAdminForm(ModelForm):
   email_users = forms.ModelMultipleChoiceField(queryset=User.objects.order_by('username'))

   class Meta:
      model = Product

class ProductAdmin(admin.ModelAdmin):
   list_display = ('name','platform')
   form = ProductAdminForm

admin.site.register(Product, ProductAdmin)
</snippet></ROW><ROW><id>3636132</id><snippet>python31</snippet></ROW><ROW><id>3636378</id><snippet>numpy.reshape</snippet></ROW><ROW><id>3636378</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data = np.array( [0, 2, 7, 6, 3, 1, 4, 5] )
&gt;&gt;&gt; shape = ( 2, 4 )
&gt;&gt;&gt; data.reshape( shape )
array([[0, 2, 7, 6],
       [3, 1, 4, 5]])
</snippet></ROW><ROW><id>3636378</id><snippet>shape</snippet></ROW><ROW><id>3636378</id><snippet>data</snippet></ROW><ROW><id>3636378</id><snippet>&gt;&gt;&gt; data.shape = shape
</snippet></ROW><ROW><id>3636382</id><snippet>('^$', views.default )
</snippet></ROW><ROW><id>3636382</id><snippet>import sys
sys.path.append(path_to_site)
</snippet></ROW><ROW><id>3636538</id><snippet>import trac.admin.console
import trac.config
import os

def _get_project_options(envdir):
    confpath = os.path.join(envdir, 'conf/trac.ini')
    config = trac.config.Configuration(confpath)
    return dict([x for x in config.options(u'project')])

def _get_project_name(envdir):
    admin = trac.admin.console.TracAdmin(envdir)
    if admin.env_check():
        options = _get_project_options(envdir)
        return options[u'name']
    else:
        return None

def iter_trac_projects_from_dir(dirname):
    for which in os.listdir(dirname):
        if not which in ('.', '..') and os.path.isdir(dirname):
            envdirname = os.path.join(dirname, which)
            project_name = _get_project_name(envdirname)
            if project_name:
                yield (project_name, envdirname)

def get_trac_projects_from_dir(dirname):
    return [pr for pr in iter_trac_projects_from_dir(dirname)]
</snippet></ROW><ROW><id>3636538</id><snippet>iter_trac_projects_from_dir</snippet></ROW><ROW><id>3636538</id><snippet>get_trac_projects_from_dir</snippet></ROW><ROW><id>3636538</id><snippet>get_enviroments</snippet></ROW><ROW><id>3636538</id><snippet>trac.web.main</snippet></ROW><ROW><id>3636538</id><snippet>os.listdir</snippet></ROW><ROW><id>3636538</id><snippet>&gt;&gt;&gt; import trac.web.main
&gt;&gt;&gt; env = {'trac.env_parent_dir': 
...        '/home/manu/tmp'}
&gt;&gt;&gt; trac.web.main.get_environments(env)
{'test': '/home/manu/tmp/test', 'no-a-real-trac-project': '/home/manu/tmp/no-a-real-trac-project', 'test2': '/home/manu/tmp/test2'}
</snippet></ROW><ROW><id>3636884</id><snippet>python fibo.py 222</snippet></ROW><ROW><id>3636884</id><snippet>[138] % python
Python 2.6.1 (r261:67515, Apr  9 2009, 17:53:24)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-44)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; python fibo.py 222
  File "&lt;stdin&gt;", line 1
    python fibo.py 222
              ^
SyntaxError: invalid syntax
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3637103</id><snippet>class DefaultHelpParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)
</snippet></ROW><ROW><id>3637207</id><snippet>'</snippet></ROW><ROW><id>3637207</id><snippet>$ python -c'for x in range(3):
&gt;   if x!=1:
&gt;     print x'
0
2
$
</snippet></ROW><ROW><id>3637207</id><snippet>&gt;</snippet></ROW><ROW><id>3637207</id><snippet>PS2</snippet></ROW><ROW><id>3637207</id><snippet>$</snippet></ROW><ROW><id>3637207</id><snippet>PS1</snippet></ROW><ROW><id>3637207</id><snippet>if</snippet></ROW><ROW><id>3637325</id><snippet>sendRequest</snippet></ROW><ROW><id>3637325</id><snippet>sendRequest</snippet></ROW><ROW><id>3637325</id><snippet>sendRequest</snippet></ROW><ROW><id>3637325</id><snippet>Deferred</snippet></ROW><ROW><id>3637325</id><snippet>sendRequest</snippet></ROW><ROW><id>3637325</id><snippet>class Foo(FooMessageProtocol):
    def __init__(self, *args, **kwargs):
        self._deferreds = {}
        super(Foo, self).__init__(*args, **kwargs)    

    def sendRequest(self, data):
        self.sendMessage(id, data)
        d = self._deferreds[id] = defer.Deferred()
        return d

    def receiveAnswers(self, msg):
        response = parse(msg)
        id = response['id']
        if id in self._deferreds:
            self._deferreds.pop(id).callback(response)
</snippet></ROW><ROW><id>3637392</id><snippet>sine_list_y</snippet></ROW><ROW><id>3637392</id><snippet>nchannels=2</snippet></ROW><ROW><id>3637392</id><snippet>for s, t in zip(sine_list_x, sine_list_y):</snippet></ROW><ROW><id>3637392</id><snippet>writeframes</snippet></ROW><ROW><id>3637392</id><snippet>s</snippet></ROW><ROW><id>3637392</id><snippet>t</snippet></ROW><ROW><id>3637468</id><snippet>from multiprocessing import Pool

def main():
    po = Pool()
    for file in glob.glob('*.csv'):
        filepath = os.path.join(DATA_DIR, file)
        po.apply_async(mine_page, (filepath,), callback=save_data)
    po.close()
    po.join()
    file_ptr.close()

def mine_page(filepath):
    #do whatever it is that you want to do in a separate process.
    return data

def save_data(data):
    #data is a object. Store it in a file, mysql or...
    return
</snippet></ROW><ROW><id>3637602</id><snippet>return</snippet></ROW><ROW><id>3637602</id><snippet>data</snippet></ROW><ROW><id>3637602</id><snippet>fetch_quote</snippet></ROW><ROW><id>3637602</id><snippet>def fetch_quote(symbols):
    url = URL % '+'.join(symbols)
    fp = urllib.urlopen(url)
    try:
        data = fp.read()
    finally:
        fp.close()
    return data # &lt;======== Return
</snippet></ROW><ROW><id>3637602</id><snippet>None</snippet></ROW><ROW><id>3637905</id><snippet>partial</snippet></ROW><ROW><id>3638091</id><snippet>from django.db import connections

class DBRouter(object):
    """A router to control all database operations on models in
    the contrib.auth application"""

    def db_for_read(self, model, **hints):
        m = model.__module__.split('.')
        try:
            d = m[-1]
            if d in connections:
                return d
        except IndexError:
            pass
        return None

    def db_for_write(self, model, **hints):
        m = model.__module__.split('.')
        try:
            d = m[-1]
            if d in connections:
                return d
        except IndexError:
            pass
        return None

    def allow_syncdb(self, db, model):
        "Make sure syncdb doesn't run on anything but default"
        if model._meta.app_label == 'myapp':
            return False
        elif db == 'default':
            return True
        return None
</snippet></ROW><ROW><id>3638091</id><snippet>models</snippet></ROW><ROW><id>3638091</id><snippet>asterisk.py</snippet></ROW><ROW><id>3638091</id><snippet>models.py</snippet></ROW><ROW><id>3638091</id><snippet>from asterisk import *
</snippet></ROW><ROW><id>3638091</id><snippet>records = MyModel.object.all()</snippet></ROW><ROW><id>3638091</id><snippet>MyModel</snippet></ROW><ROW><id>3638091</id><snippet>myapp.asterisk</snippet></ROW><ROW><id>3638091</id><snippet>from django.db import connections

class DBRouter(object):
    """A router to control all database operations on models in
    the contrib.auth application"""

    def db_for_read(self, model, **hints):
        if hasattr(model,'connection_name'):
            return model.connection_name
        return None

    def db_for_write(self, model, **hints):
        if hasattr(model,'connection_name'):
            return model.connection_name
        return None

    def allow_syncdb(self, db, model):
        if hasattr(model,'connection_name'):
            return model.connection_name
        return None
</snippet></ROW><ROW><id>3638091</id><snippet>class MyModel(models.Model):
    connection_name="asterisk"
    #etc...
</snippet></ROW><ROW><id>3638178</id><snippet>idata</snippet></ROW><ROW><id>3638178</id><snippet>stocks = {}
for line in idata.split("\r\n"):
    if line == '':
        continue

    stock, price, volume, stime = line.split(',')
    stock = stock[1:-1]
    price = float(price)
    volume = int(volume)
    stime = stime[1:-1]

    stocks[stock] = (price, volume, stime)
</snippet></ROW><ROW><id>3638178</id><snippet>csv</snippet></ROW><ROW><id>3638178</id><snippet>import csv</snippet></ROW><ROW><id>3638178</id><snippet>reader = csv.reader(idata.split("\r\n"))

stocks = {}
for line in reader:
    if line == '':
        continue

    stock, price, volume, stime = line
    price = float(price)
    volume = int(volume)

    stocks[stock] = (price, volume, stime)
</snippet></ROW><ROW><id>3638178</id><snippet>reader = csv.reader(idata.split("\r\n"))

stocks = []
for line in reader:
    if line == '':
        continue

    stock, price, volume, stime = line
    price = float(price)
    volume = int(volume)

    stocks.append((stock, price, volume, stime))

csr.executemany('INSERT INTO test.prices VALUES (?,?,?,?)', stocks)
</snippet></ROW><ROW><id>3638349</id><snippet>In [1]: class A:
   ...:     def __getattr__(self, name):
   ...:         def function():
   ...:             print("You tried to call a method named: %s" % name)
   ...:         return function
   ...:     
   ...:     

In [2]: a = A()

In [3]: a.test()
You tried to call a method named: test
</snippet></ROW><ROW><id>3638426</id><snippet>with cat("/etc/passwd") as lines:
    for line in lines:
        if "mail" in line:
            print line.strip()
            break
</snippet></ROW><ROW><id>3638426</id><snippet>/etc/passwd</snippet></ROW><ROW><id>3638426</id><snippet>audio</snippet></ROW><ROW><id>3638426</id><snippet>from __future__ import with_statement


class cat(object):

    def __init__(self, fname):
        self.fname = fname

    def __enter__(self):
        print "[Opening file %s]" % (self.fname,)
        self.file_obj = open(self.fname, "rt")
        return self

    def __exit__(self, *exc_info):
        print "[Closing file %s]" % (self.fname,)
        self.file_obj.close()

    def __iter__(self):
        return self

    def next(self):
        line = self.file_obj.next().strip()
        print "[Read: %s]" % (line,)
        return line


def main():
    with cat("/etc/passwd") as lines:
        for line in lines:
            if "mail" in line:
                print line.strip()
                break


if __name__ == "__main__":
    import sys
    sys.exit(main())
</snippet></ROW><ROW><id>3638426</id><snippet>with open("/etc/passwd", "rt") as f:
    for line in f:
        if "mail" in line:
            break
</snippet></ROW><ROW><id>3638511</id><snippet>Base</snippet></ROW><ROW><id>3638511</id><snippet>get_by_id</snippet></ROW><ROW><id>3638511</id><snippet>Base</snippet></ROW><ROW><id>3638511</id><snippet>def get_by_id(cls, id, session=session):
    return session.query(cls).filter_by(id=id).one()

Base.get_by_id = classmethod(get_by_id)
</snippet></ROW><ROW><id>3638511</id><snippet>session</snippet></ROW><ROW><id>3638556</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3638556</id><snippet>subprocess.call()</snippet></ROW><ROW><id>3638597</id><snippet>import time
now = time.time()
...
later = time.time()
difference = int(later - now)
</snippet></ROW><ROW><id>3638714</id><snippet>except Exc as e: raise e</snippet></ROW><ROW><id>3638714</id><snippet>raise</snippet></ROW><ROW><id>3638714</id><snippet>sys.exit</snippet></ROW><ROW><id>3638714</id><snippet>tuple</snippet></ROW><ROW><id>3638714</id><snippet>&gt;&gt;&gt; print IOError(13, 'Permission denied')
[Errno 13] Permission denied
&gt;&gt;&gt; print IOError((13, 'Permission denied'))
(13, 'Permission denied')
</snippet></ROW><ROW><id>3639525</id><snippet>set_value(value, name=None, type=None, kind=None,
          id=None, nr=None,by_label=False,
          # by_label is deprecated 
          label=None)
</snippet></ROW><ROW><id>3639525</id><snippet>type</snippet></ROW><ROW><id>3639532</id><snippet>map</snippet></ROW><ROW><id>3639532</id><snippet>mapping</snippet></ROW><ROW><id>3639655</id><snippet>onKeyboardEvent</snippet></ROW><ROW><id>3639655</id><snippet>enterActive</snippet></ROW><ROW><id>3639655</id><snippet>global enterActive
</snippet></ROW><ROW><id>3639655</id><snippet>enterActive</snippet></ROW><ROW><id>3640376</id><snippet>filter(r.match, list)
</snippet></ROW><ROW><id>3640403</id><snippet>123</snippet></ROW><ROW><id>3640403</id><snippet>123</snippet></ROW><ROW><id>3640403</id><snippet>123</snippet></ROW><ROW><id>3640403</id><snippet>                | Ruby             | Bash    
-----------------------------------------
number          | 123              | 123
string          | '123'            | 123
regexp          | /123/            | 123
file            | File.open('123') | 123
file descriptor | IO.open('123')   | 123
URI             | URI.parse('123') | 123
command         | `123`            | 123
</snippet></ROW><ROW><id>3640403</id><snippet>COMMAND.COM</snippet></ROW><ROW><id>3640403</id><snippet>COMMAND.COM</snippet></ROW><ROW><id>3640403</id><snippet>CMD.EXE</snippet></ROW><ROW><id>3640403</id><snippet>123</snippet></ROW><ROW><id>3640403</id><snippet>bash-completion</snippet></ROW><ROW><id>3640403</id><snippet>Action-Object</snippet></ROW><ROW><id>3640403</id><snippet>Get-Foo</snippet></ROW><ROW><id>3640403</id><snippet>Bar-ChildItem</snippet></ROW><ROW><id>3640403</id><snippet>ls</snippet></ROW><ROW><id>3640403</id><snippet>Get-ChildItem</snippet></ROW><ROW><id>3640403</id><snippet>ls</snippet></ROW><ROW><id>3640403</id><snippet>dir</snippet></ROW><ROW><id>3640403</id><snippet>CMD.EXE</snippet></ROW><ROW><id>3640403</id><snippet>gci</snippet></ROW><ROW><id>3640593</id><snippet>lambda</snippet></ROW><ROW><id>3640617</id><snippet>mmap</snippet></ROW><ROW><id>3640617</id><snippet>ctypes</snippet></ROW><ROW><id>3640617</id><snippet>mmap</snippet></ROW><ROW><id>3640617</id><snippet>ctypes</snippet></ROW><ROW><id>3640617</id><snippet>mmap</snippet></ROW><ROW><id>3640617</id><snippet>ctypes</snippet></ROW><ROW><id>3640645</id><snippet>m_move(*loginScreenPos[0])</snippet></ROW><ROW><id>3640645</id><snippet>win32gui.GetCursorInfo()[2]</snippet></ROW><ROW><id>3640645</id><snippet>print</snippet></ROW><ROW><id>3640645</id><snippet>print</snippet></ROW><ROW><id>3640679</id><snippet>from appname.views import robots
(r'^robots\.txt$', robots), 
</snippet></ROW><ROW><id>3640679</id><snippet>(r'^robots\.txt$', 'projectname.appname.views.robots'),
</snippet></ROW><ROW><id>3640679</id><snippet>'robots'</snippet></ROW><ROW><id>3640911</id><snippet>global</snippet></ROW><ROW><id>3640911</id><snippet>global</snippet></ROW><ROW><id>3640911</id><snippet>global</snippet></ROW><ROW><id>3640911</id><snippet>foo.py</snippet></ROW><ROW><id>3640911</id><snippet>class _Settings(object):
    @property
    def one(self): return self._one
    @property
    def two(self): return self._two
    def __init__(self, one, two):
       self._one, self._two = one, two
settings = _Settings(23, 45)
</snippet></ROW><ROW><id>3640911</id><snippet>import foo</snippet></ROW><ROW><id>3640911</id><snippet>foo.settings.one</snippet></ROW><ROW><id>3640911</id><snippet>foo.settings.two</snippet></ROW><ROW><id>3640911</id><snippet>settings</snippet></ROW><ROW><id>3640934</id><snippet>id</snippet></ROW><ROW><id>3640934</id><snippet>DB_BASED_ID</snippet></ROW><ROW><id>3640934</id><snippet>self.request.arguments['activity']</snippet></ROW><ROW><id>3640934</id><snippet>'activity'</snippet></ROW><ROW><id>3640965</id><snippet>import fractions

def gcd(L):
    return reduce(fractions.gcd, L)

print gcd([4,8,12,24])
</snippet></ROW><ROW><id>3641019</id><snippet>import json
</snippet></ROW><ROW><id>3641019</id><snippet>return</snippet></ROW><ROW><id>3641019</id><snippet>return json.dumps(message)
</snippet></ROW><ROW><id>3641378</id><snippet>from . import cow</snippet></ROW><ROW><id>3641378</id><snippet>__init__.py</snippet></ROW><ROW><id>3641378</id><snippet>import cowfactory</snippet></ROW><ROW><id>3641378</id><snippet>import os</snippet></ROW><ROW><id>3641378</id><snippet>set PYTHONPATH=%PYTHONPATH%:externals
yourprogram.py
</snippet></ROW><ROW><id>3641378</id><snippet>import cowfactory</snippet></ROW><ROW><id>3641378</id><snippet>from external import cowfactory</snippet></ROW><ROW><id>3641471</id><snippet>common_words = frozenset(("if", "but", "and", "the", "when", "use", "to", "for"))
title = "When to use Python for web applications"
title_words = set(title.lower().split())
keywords = title_words.difference(common_words)
print(keywords)
</snippet></ROW><ROW><id>3641584</id><snippet>User</snippet></ROW><ROW><id>3641584</id><snippet>UserProfile</snippet></ROW><ROW><id>3641584</id><snippet>User</snippet></ROW><ROW><id>3641584</id><snippet>User</snippet></ROW><ROW><id>3641584</id><snippet>UserProfile</snippet></ROW><ROW><id>3641584</id><snippet>UUIDField</snippet></ROW><ROW><id>3641584</id><snippet>UUIDField</snippet></ROW><ROW><id>3641584</id><snippet>id</snippet></ROW><ROW><id>3641584</id><snippet>UserProfile</snippet></ROW><ROW><id>3641584</id><snippet>User</snippet></ROW><ROW><id>3641670</id><snippet>svn/trunk/manage.py
svn/trunk/build.py
svn/trunk/vendor/
</snippet></ROW><ROW><id>3641991</id><snippet>telnet</snippet></ROW><ROW><id>3641991</id><snippet>220 your.server.name ESMTP Postfix
</snippet></ROW><ROW><id>3641991</id><snippet>postconf smtpd_banner</snippet></ROW><ROW><id>3641991</id><snippet>send_mail</snippet></ROW><ROW><id>3641991</id><snippet>/var/log/mail.*</snippet></ROW><ROW><id>3642584</id><snippet>file.tell()
</snippet></ROW><ROW><id>3642584</id><snippet>class file_with_pos(object):
    def __init__(self, fp):
        self.fp = fp
        self.pos = 0
    def read(self, *args):
        data = self.fp.read(*args)
        self.pos += len(data)
        return data
    def tell(self):
        return self.pos
</snippet></ROW><ROW><id>3642584</id><snippet>fp = file_with_pos(sys.stdin)
</snippet></ROW><ROW><id>3642794</id><snippet>&lt;span style="display:-moz-inline-stack" class="unl"&gt;
  &lt;label for="userid"&gt;User ID  &lt;/label&gt;&lt;/span&gt;
&lt;span&gt;&lt;input size="27" maxlength="64" class="txtBxF"
       value="" name="userid" id="userid"&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;span style="display:-moz-inline-stack" class="unl"&gt;
  &lt;label for="pass"&gt;Password  &lt;/label&gt;&lt;/span&gt;
&lt;span&gt;&lt;input size="27" maxlength="64" class="txtBxF"
       value="" name="pass" id="pass" type="password"&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>3642794</id><snippet>username</snippet></ROW><ROW><id>3642794</id><snippet>j_password</snippet></ROW><ROW><id>3642794</id><snippet>userid</snippet></ROW><ROW><id>3642794</id><snippet>pass</snippet></ROW><ROW><id>3642794</id><snippet>&lt;input type="checkbox" name="keepMeSignInOption" value="1" id="signed_in"&gt;&lt;/b&gt;
&lt;span class="pcsm"&gt;&lt;label for="signed_in"&gt;&lt;b&gt;Keep me signed in for today.&lt;/b&gt;
</snippet></ROW><ROW><id>3642819</id><snippet>int</snippet></ROW><ROW><id>3642819</id><snippet>long</snippet></ROW><ROW><id>3642819</id><snippet>gmpy.mpz</snippet></ROW><ROW><id>3642819</id><snippet>str</snippet></ROW><ROW><id>3642819</id><snippet>unicode</snippet></ROW><ROW><id>3643071</id><snippet>''.join(c for c in S if c.isdigit())
</snippet></ROW><ROW><id>3643124</id><snippet>s3cmd</snippet></ROW><ROW><id>3643124</id><snippet>s3cmd</snippet></ROW><ROW><id>3643124</id><snippet>## S3.py ##
...
# S3 from time to time doesn't send ETag back in a response :-(
# Force re-upload here.
if not response['headers'].has_key('etag'):
    response['headers']['etag'] = ''
...
debug("MD5 sums: computed=%s, received=%s" % (md5_computed, response["headers"]["etag"]))
...
</snippet></ROW><ROW><id>3643124</id><snippet>s3cmd</snippet></ROW><ROW><id>3643124</id><snippet>s3cmd</snippet></ROW><ROW><id>3643124</id><snippet>S3.py</snippet></ROW><ROW><id>3643124</id><snippet>tcpdump</snippet></ROW><ROW><id>3643758</id><snippet>primefactors</snippet></ROW><ROW><id>3643758</id><snippet>len(primefactors) - 1</snippet></ROW><ROW><id>3643758</id><snippet>range(1, len(primefactors) + 1)</snippet></ROW><ROW><id>3643758</id><snippet>range(2, len(primefactors))</snippet></ROW><ROW><id>3643758</id><snippet>6</snippet></ROW><ROW><id>3643758</id><snippet>12</snippet></ROW><ROW><id>3643758</id><snippet>primefactors</snippet></ROW><ROW><id>3643758</id><snippet>[2, 2, 3]</snippet></ROW><ROW><id>3643758</id><snippet>sorted(set(results))</snippet></ROW><ROW><id>3643758</id><snippet>primefactors</snippet></ROW><ROW><id>3643758</id><snippet>listOfAllPrimes</snippet></ROW><ROW><id>3643758</id><snippet>def getprimefactors(n):
    primefactors = []
    primeind = 0
    p = listOfAllPrimes[primeind]
    while p &lt;= n:
        if n % p == 0:
            primefactors.append(p)
            n //= p
        else:
            primeind += 1
            p = listOfAllPrimes[primeind]
    return primefactors
</snippet></ROW><ROW><id>3643783</id><snippet>request.META</snippet></ROW><ROW><id>3643820</id><snippet>
self.grid(padx=20, pady=20)
</snippet></ROW><ROW><id>3643832</id><snippet>import this</snippet></ROW><ROW><id>3643832</id><snippet>value</snippet></ROW><ROW><id>3643832</id><snippet>l_LegJointConnectors</snippet></ROW><ROW><id>3643832</id><snippet>locNameConnector</snippet></ROW><ROW><id>3644101</id><snippet>PRAGMA foreign_keys=ON</snippet></ROW><ROW><id>3644104</id><snippet>r'^person/(?P&lt;slug&gt;[-\w]+)/$'</snippet></ROW><ROW><id>3644104</id><snippet>r'^person/person/(?P&lt;slug&gt;[-\w]+)/$'</snippet></ROW><ROW><id>3644104</id><snippet>^person/</snippet></ROW><ROW><id>3644199</id><snippet>from lxml.html import HtmlComment # or similar
no_comments=[element for element in element_list if not isinstance(element, HtmlComment)]
</snippet></ROW><ROW><id>3644431</id><snippet>&gt;&gt;&gt; alist = [1, 2, 3]
&gt;&gt;&gt; one, two, three = alist
&gt;&gt;&gt; one
1
&gt;&gt;&gt; two
2
&gt;&gt;&gt; three
3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3644431</id><snippet>for key, value in names.items():
    posX, posY, posZ = value
</snippet></ROW><ROW><id>3644431</id><snippet>for key,(posX,posY,posZ) in names.items():</snippet></ROW><ROW><id>3644431</id><snippet>pos.x</snippet></ROW><ROW><id>3644431</id><snippet>pos.y</snippet></ROW><ROW><id>3644431</id><snippet>for name, pos in names.items():
    doSomethingWith(pos.x)
    doSomethingElseWith(pos.x, pos.y, pos.z)
</snippet></ROW><ROW><id>3644459</id><snippet>format</snippet></ROW><ROW><id>3644459</id><snippet>datetime.date</snippet></ROW><ROW><id>3644459</id><snippet>datetime.datetime</snippet></ROW><ROW><id>3644459</id><snippet>datetime</snippet></ROW><ROW><id>3644459</id><snippet>S</snippet></ROW><ROW><id>3644468</id><snippet>python.org</snippet></ROW><ROW><id>3644468</id><snippet>gcc</snippet></ROW><ROW><id>3644609</id><snippet>%autocall  0</snippet></ROW><ROW><id>3644618</id><snippet>finally</snippet></ROW><ROW><id>3644618</id><snippet>f</snippet></ROW><ROW><id>3644618</id><snippet>try:
    f = open("file", "r")
    try:
        line = f.readline()
    finally:
        f.close()
except IOError:
    &lt;whatever&gt;
</snippet></ROW><ROW><id>3644618</id><snippet>with</snippet></ROW><ROW><id>3644618</id><snippet>with</snippet></ROW><ROW><id>3644618</id><snippet>with open("input", "r") as inp, open("output", "w") as out:
    out.write(inp.read())
</snippet></ROW><ROW><id>3644618</id><snippet>with</snippet></ROW><ROW><id>3644618</id><snippet>try...finally</snippet></ROW><ROW><id>3644631</id><snippet>std::string</snippet></ROW><ROW><id>3644631</id><snippet>const std::string</snippet></ROW><ROW><id>3644910</id><snippet>is_authenticated</snippet></ROW><ROW><id>3644910</id><snippet>if request.user.is_authenticated():
    # do something if the user is authenticated
</snippet></ROW><ROW><id>3644910</id><snippet>{% if user.is_authenticated %}
</snippet></ROW><ROW><id>3644910</id><snippet>User</snippet></ROW><ROW><id>3645030</id><snippet>/usr/bin</snippet></ROW><ROW><id>3645030</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>3645030</id><snippet>/opt/local/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>/Library/Python/2.6/site-packages</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>easy_install</snippet></ROW><ROW><id>3645030</id><snippet>/usr/bin</snippet></ROW><ROW><id>3645030</id><snippet>$ /usr/bin/python2.6 -c 'import setuptools;print(setuptools.__file__,setuptools.__version__)'
('/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/setuptools/__init__.pyc', '0.6c9')
</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>Distribute</snippet></ROW><ROW><id>3645030</id><snippet>which python</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>setup.py</snippet></ROW><ROW><id>3645030</id><snippet>==</snippet></ROW><ROW><id>3645030</id><snippet>&gt;=</snippet></ROW><ROW><id>3645030</id><snippet>setuptools</snippet></ROW><ROW><id>3645030</id><snippet>$ sudo /usr/bin/easy_install-2.6 setuptools==0.6c7
$ /usr/bin/python2.6 -c 'import setuptools;print(setuptools.__file__,setuptools.__version__)'
('/Library/Python/2.6/site-packages/setuptools-0.6c7-py2.6.egg/setuptools/__init__.pyc', '0.6c7')
</snippet></ROW><ROW><id>3645030</id><snippet>easy_install</snippet></ROW><ROW><id>3645030</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3645208</id><snippet>from copy import deepcopy
for iteration in range(times):
    i = 0
    particles_snapshot = deepcopy(particles)
    for particle in particles:
        results[iteration][i] = particle.move(particles_snapshot)
        i += 1
</snippet></ROW><ROW><id>3645219</id><snippet>mypack</snippet></ROW><ROW><id>3645723</id><snippet># urlconf
from django.conf.urls.defaults import patterns, url
urlpatterns = patterns('',
    url(r'^tickets$', 'myapp.views.tickets', name='tickets'),
    url(r'^ticket/(?P&lt;id&gt;\d+)$', 'myapp.views.tickets', name='ticket'),
    url(r'^ticket$', 'myapp.views.tickets', name='ticket'),
)

# views
def tickets(request):
    tickets = Ticket.objects.all()
    return render_to_response('tickets.html', {'tickets':tickets})

def ticket(request, id=None):
    if id is not None:
        ticket = get_object_or_404(Ticket, id=id)
    if request.method == 'POST':
        # create or update ticket here
    else:
        # just render the ticket (GET)
    ...
</snippet></ROW><ROW><id>3645821</id><snippet>plt.subplot(211, axisbg = 'w')</snippet></ROW><ROW><id>3645821</id><snippet>ax1 = plt.subplot(211, axisbg = 'w')
</snippet></ROW><ROW><id>3645821</id><snippet>sharex = ax1</snippet></ROW><ROW><id>3645821</id><snippet>sharey = ax1</snippet></ROW><ROW><id>3645821</id><snippet>plt.subplot(212, sharex = ax1, sharey = ax1)
</snippet></ROW><ROW><id>3645848</id><snippet>user</snippet></ROW><ROW><id>3645848</id><snippet>user in session.dirty</snippet></ROW><ROW><id>3645848</id><snippet>session.rollback()
</snippet></ROW><ROW><id>3645848</id><snippet>session.commit()</snippet></ROW><ROW><id>3645848</id><snippet>sqlalchemy.orm.attributes.get_history</snippet></ROW><ROW><id>3645848</id><snippet>old_value = sqlalchemy.orm.attributes.get_history(user, 'attribute')[2]
</snippet></ROW><ROW><id>3645946</id><snippet>s = 'bla. bla? bla.bla! bla...'
import re
s = re.sub('([.,!?()])', r' \1 ', s)
s = re.sub('\s{2,}', ' ', s)
print s
</snippet></ROW><ROW><id>3646183</id><snippet>names</snippet></ROW><ROW><id>3646183</id><snippet>maxValuations</snippet></ROW><ROW><id>3646183</id><snippet>endowments</snippet></ROW><ROW><id>3646183</id><snippet>names=['buyer{i:0&gt;3d}'.format(i=i) for i in range(1,6)]
maxValuations=range(100,75,-5)
endowments=range(500,250,-50)
for name, maxValuation, endowment in zip(names,maxValuations,endowments):
    mgr.register_actor(
        Buyer(name=name, maxValuation=maxValuation, endowment=endowment),name)
</snippet></ROW><ROW><id>3646183</id><snippet>'{i:0&gt;3d}'</snippet></ROW><ROW><id>3646183</id><snippet>http://docs.python.org/library/string.html#format-string-syntax
replacement_field ::= "{" field_name ["!" conversion] [":" format_spec] "}"
field_name        ::= (identifier|integer)("."attribute_name|"["element_index"]")* 
attribute_name    ::= identifier
element_index     ::= integer
conversion        ::= "r" | "s"
format_spec       ::= [[fill]align][sign][#][0][width][.precision][type]
fill              ::= &lt;a character other than '}'&gt;
align             ::= "&lt;" | "&gt;" | "=" | "^"
                      "=" forces the padding to be placed after the sign (if any)
                          but before the digits. (for numeric types)
sign              ::= "+" | "-" | " "
                      " " places a leading space for positive numbers
width             ::= integer
precision         ::= integer
type              ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" |
                      "o" | "x" | "X" | "%"
</snippet></ROW><ROW><id>3646183</id><snippet>   field_name 
  /
{i:0&gt;3d}
    \\\\
     \\\`-type ("d" means integer)
      \\`-width 
       \`-alignment ("&gt;" means right adjust)
        `-fill character
</snippet></ROW><ROW><id>3646244</id><snippet>[...]
t = loader.get_template('sometemplate.html')
c = Context({
    'my_data': my_data, # or whatever
})
return t.render(c) # this gets inserted into the invoking template
</snippet></ROW><ROW><id>3646244</id><snippet>from django import template
template.add_to_builtins('myapp.templatetags.myapptags')
</snippet></ROW><ROW><id>3646252</id><snippet>.pyc</snippet></ROW><ROW><id>3646370</id><snippet>src</snippet></ROW><ROW><id>3646370</id><snippet>sys.path</snippet></ROW><ROW><id>3646370</id><snippet>src</snippet></ROW><ROW><id>3646370</id><snippet>src</snippet></ROW><ROW><id>3646370</id><snippet>test</snippet></ROW><ROW><id>3646370</id><snippet>test</snippet></ROW><ROW><id>3646370</id><snippet>sys.path</snippet></ROW><ROW><id>3646370</id><snippet>src</snippet></ROW><ROW><id>3646370</id><snippet>sys.path</snippet></ROW><ROW><id>3646370</id><snippet>sys.path</snippet></ROW><ROW><id>3646370</id><snippet>from src import Matrix
</snippet></ROW><ROW><id>3646370</id><snippet>Matrix</snippet></ROW><ROW><id>3646370</id><snippet>Matrix.Matrix</snippet></ROW><ROW><id>3646816</id><snippet>#!/usr/bin/python2.6
import re
import urllib
import urllib2

def validate(URL):
    validatorURL = "http://validator.w3.org/check?uri=" + \
        urllib.quote_plus(URL)
    opener = urllib2.urlopen(validatorURL)
    output = opener.read()
    opener.close()
    if re.search("This document was successfully checked as".replace(
            " ", r"\s+"), output):
        print "    VALID: ", URL
    else:
        print "INVALID: ", URL
</snippet></ROW><ROW><id>3647257</id><snippet>flipcase input.txt &gt; output.txt
othercommand | flipcase &gt; output.txt
flipcase | othercommand &gt; ouput.txt
flipcase input1.txt  input2.txt &gt; output.txt
</snippet></ROW><ROW><id>3647257</id><snippet># Modify input files directly.
flipcase -i input.txt

# Create backup copies before modifying originals.
flipcase -i --backup-suffix '_BAK' input.txt
flipcase -i --backup-prefix 'BAK_' input.txt

# Regex for power users.
flipcase -i --backup-regex 's/foo/bar/' input.txt
</snippet></ROW><ROW><id>3647257</id><snippet>flipcase -v         input.txt &gt; output.txt
flipcase -v log.txt input.txt &gt; output.txt
</snippet></ROW><ROW><id>3647257</id><snippet>flipcase -r -i --backup-suffix '_BAK' --filter-glob '*.txt' dir1 dir2
flipcase -r -i --backup-suffix '_BAK' --filter-glob '*.txt' --filter-glob 'log*.dat' dir
flipcase -r -i --backup-suffix '_BAK' --filter-regex 'log\w+\.(txt|log)$' dir1 dir2

# Don't do in-place editing. Instead create new files within the structure.
flipcase -r --newname-suffix '_NEW'              --filter-glob '*.txt' dir1 dir2
flipcase -r --newname-regex 's/\.txt$/_new.txt/' --filter-glob '*.txt' dir1 dir2

# Create the backups or the new files in a parallel directory
# structure rather than within the original structure.
flipcase -r -i --backup-tree 'backup_dir'   --filter-glob '*.txt' dir1 dir2
flipcase -r -i --new-tree    'newfiles_dir' --filter-glob '*.txt' dir1 dir2
</snippet></ROW><ROW><id>3647286</id><snippet>import socks,socket,urllib2
socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 8080)
temp = socket.socket
socket.socket = socks.socksocket  
print urllib2.urlopen('http://www.google.com').read() // Proxy
socket.socket=temp
print urllib2.urlopen('http://www.google.com').read() // No proxy
</snippet></ROW><ROW><id>3647374</id><snippet>import</snippet></ROW><ROW><id>3647410</id><snippet>su
git clone git://github.com/jjlee/mechanize.git
cd mechanize
python setup.py install
</snippet></ROW><ROW><id>3647560</id><snippet>is</snippet></ROW><ROW><id>3647560</id><snippet>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; y = [1, 2, 3]
&gt;&gt;&gt; x == y
True
&gt;&gt;&gt; x is y
False
</snippet></ROW><ROW><id>3647710</id><snippet>from ctypes import windll, byref
from ctypes.wintypes import SMALL_RECT

STDOUT = -12

hdl = windll.kernel32.GetStdHandle(STDOUT)
rect = wintypes.SMALL_RECT(0, 50, 50, 80) # (left, top, right, bottom)
windll.kernel32.SetConsoleWindowInfo(hdl, True, byref(rect))
</snippet></ROW><ROW><id>3647710</id><snippet>rect</snippet></ROW><ROW><id>3647710</id><snippet>left, top, right, bottom</snippet></ROW><ROW><id>3647710</id><snippet>width = right - left + 1
height = bottom - top + 1
</snippet></ROW><ROW><id>3647710</id><snippet>bufsize = wintypes._COORD(100, 80) # rows, columns
windll.kernel32.SetConsoleScreenBufferSize(h, bufsize)
</snippet></ROW><ROW><id>3647774</id><snippet>^(CVS|SCCS|vssver.?\.scc|#.*#|%.*%|_svn|.*\.pyc)$|~$|^\.(?!htaccess$).*$
</snippet></ROW><ROW><id>3647774</id><snippet>.*\.pyc</snippet></ROW><ROW><id>3647780</id><snippet>==</snippet></ROW><ROW><id>3647780</id><snippet>__eq__</snippet></ROW><ROW><id>3647780</id><snippet>__ne__</snippet></ROW><ROW><id>3647780</id><snippet>!=</snippet></ROW><ROW><id>3647780</id><snippet>__hash__</snippet></ROW><ROW><id>3647780</id><snippet>__eq__</snippet></ROW><ROW><id>3647780</id><snippet>equals</snippet></ROW><ROW><id>3647780</id><snippet>null</snippet></ROW><ROW><id>3647780</id><snippet>None</snippet></ROW><ROW><id>3648126</id><snippet>from foo import bar
</snippet></ROW><ROW><id>3648126</id><snippet>try:
    from . import bar
except ValueError:
    import bar

if __name__ == "__main__":
    pass
</snippet></ROW><ROW><id>3648126</id><snippet>if __name__ == "__main__":
    pass
</snippet></ROW><ROW><id>3648126</id><snippet>python -mfoo.bar
</snippet></ROW><ROW><id>3648273</id><snippet>db.define_table('message',Field('body'),Field('author',db.auth_user))
@auth.requires_login()
def index():
    db.message.author.default=auth.user.id
    db.message.author.writable=False
    return dict(form=crud.create(db.message),
                messages=db(db.message.id&gt;0).select())
</snippet></ROW><ROW><id>3648283</id><snippet>class logger:
    print('Hi')
</snippet></ROW><ROW><id>3648283</id><snippet>Hi</snippet></ROW><ROW><id>3648283</id><snippet>def GET(self):
    # loggedout()
    session = web.ctx.session #this line
    form = self.createform()
    return render.create(form)
</snippet></ROW><ROW><id>3648283</id><snippet>GET</snippet></ROW><ROW><id>3648283</id><snippet>GET</snippet></ROW><ROW><id>3648488</id><snippet>def func(container):
    container[0] = True


container = [False]
func(container)
print container[0]
</snippet></ROW><ROW><id>3648589</id><snippet>class stru:
    def __init__(self):
        self.a = 0
        self.b = 0

s = stru()
s.a = 10

func_a(s)
</snippet></ROW><ROW><id>3648648</id><snippet>r+</snippet></ROW><ROW><id>3648648</id><snippet>open</snippet></ROW><ROW><id>3648648</id><snippet>with</snippet></ROW><ROW><id>3648648</id><snippet>w</snippet></ROW><ROW><id>3648648</id><snippet>fileinput</snippet></ROW><ROW><id>3648897</id><snippet>s</snippet></ROW><ROW><id>3648897</id><snippet>x</snippet></ROW><ROW><id>3648897</id><snippet>s</snippet></ROW><ROW><id>3648897</id><snippet>x</snippet></ROW><ROW><id>3648897</id><snippet>s.x()</snippet></ROW><ROW><id>3648897</id><snippet>x</snippet></ROW><ROW><id>3648897</id><snippet>x</snippet></ROW><ROW><id>3648897</id><snippet>x</snippet></ROW><ROW><id>3648897</id><snippet>TypeError</snippet></ROW><ROW><id>3648939</id><snippet>db.commit()</snippet></ROW><ROW><id>3648939</id><snippet>db.close()</snippet></ROW><ROW><id>3649033</id><snippet>headers = {'to':'asc',
         'date':'asc',
         'type':'asc',}

def table_view(request):
    sort = request.GET.get('sort')
    records = Record.objects.all()

    if sort is not None:
        records = records.order_by(sort)

        if headers[sort] == "des":
            records = records.reverse()
            headers[sort] = "asc"
        else:
            headers[sort] = "des"

    return render_to_response(...)
</snippet></ROW><ROW><id>3650677</id><snippet>default: compile
    compile: $(UI_FILES) $(RESOURCE_FILES)
</snippet></ROW><ROW><id>3650677</id><snippet>default: compile

compile: $(UI_FILES) $(RESOURCE_FILES)
</snippet></ROW><ROW><id>3650677</id><snippet>compile:...</snippet></ROW><ROW><id>3650677</id><snippet>compile</snippet></ROW><ROW><id>3650677</id><snippet>PHONY: default compile
</snippet></ROW><ROW><id>3650836</id><snippet>myfilter</snippet></ROW><ROW><id>3650836</id><snippet>mylist</snippet></ROW><ROW><id>3650836</id><snippet>import itertools as it
left,right = it.tee((myfilter(x), x) for x in mylist)
filter_true = (x for p,x in left if p)
filter_false = (x for p,x in right if not p)
</snippet></ROW><ROW><id>3651032</id><snippet>if not func: break  
</snippet></ROW><ROW><id>3651032</id><snippet>pool.add_task(None, None, None)  
</snippet></ROW><ROW><id>3651058</id><snippet>lebigot@weinberg ~ % python -m timeit 'abs(3.15)' 
10000000 loops, best of 3: 0.146 usec per loop

lebigot@weinberg ~ % python -m timeit -s 'from numpy import abs as nabs' 'nabs(3.15)'
100000 loops, best of 3: 3.92 usec per loop
</snippet></ROW><ROW><id>3651058</id><snippet>numpy.abs()</snippet></ROW><ROW><id>3651058</id><snippet>abs()</snippet></ROW><ROW><id>3651058</id><snippet>lebigot@weinberg ~ % python -m timeit -s 'a = [3.15]*1000' '[abs(x) for x in a]'
10000 loops, best of 3: 186 usec per loop

lebigot@weinberg ~ % python -m timeit -s 'import numpy; a = numpy.empty(1000); a.fill(3.15)' 'numpy.abs(a)'
100000 loops, best of 3: 6.47 usec per loop
</snippet></ROW><ROW><id>3651058</id><snippet>numpy.abs()</snippet></ROW><ROW><id>3651182</id><snippet>n(i, j) = l(i, i) + l(j, j) - 2 * l(i, j)
</snippet></ROW><ROW><id>3651182</id><snippet>import numpy as np

l=np.arange(9).reshape(3,3)
print(l)
# [[0 1 2]
#  [3 4 5]
#  [6 7 8]]
</snippet></ROW><ROW><id>3651182</id><snippet>np.ogrid</snippet></ROW><ROW><id>3651182</id><snippet>grid=np.ogrid[0:3,0:3]
print(grid)
# [array([[0],
#        [1],
#        [2]]), array([[0, 1, 2]])]
</snippet></ROW><ROW><id>3651182</id><snippet>grid[0]</snippet></ROW><ROW><id>3651182</id><snippet>i</snippet></ROW><ROW><id>3651182</id><snippet>grid[1]</snippet></ROW><ROW><id>3651182</id><snippet>j</snippet></ROW><ROW><id>3651182</id><snippet>l(i, i) + l(j, j) - 2 * l(i, j)</snippet></ROW><ROW><id>3651182</id><snippet>i</snippet></ROW><ROW><id>3651182</id><snippet>grid[0]</snippet></ROW><ROW><id>3651182</id><snippet>j</snippet></ROW><ROW><id>3651182</id><snippet>grid[1]</snippet></ROW><ROW><id>3651182</id><snippet>n=l[grid[0],grid[0]] + l[grid[1],grid[1]] + 2*l
print(n)
# [[ 0  6 12]
#  [10 16 22]
#  [20 26 32]]
</snippet></ROW><ROW><id>3651182</id><snippet>l(i,i)</snippet></ROW><ROW><id>3651182</id><snippet>l(j,j)</snippet></ROW><ROW><id>3651182</id><snippet>l</snippet></ROW><ROW><id>3651182</id><snippet>d=np.diag(l)
print(d)
# [0 4 8]
</snippet></ROW><ROW><id>3651182</id><snippet>d[np.newaxis,:]</snippet></ROW><ROW><id>3651182</id><snippet>d</snippet></ROW><ROW><id>3651182</id><snippet>d[:,np.newaxis]</snippet></ROW><ROW><id>3651182</id><snippet>d</snippet></ROW><ROW><id>3651182</id><snippet>d[np.newaxis,:]</snippet></ROW><ROW><id>3651182</id><snippet>d[:,np.newaxis]</snippet></ROW><ROW><id>3651182</id><snippet>n=d[np.newaxis,:] + d[:,np.newaxis] + 2*l
print(n)
# [[ 0  6 12]
#  [10 16 22]
#  [20 26 32]]
</snippet></ROW><ROW><id>3651182</id><snippet>B</snippet></ROW><ROW><id>3651182</id><snippet>C</snippet></ROW><ROW><id>3651182</id><snippet>A</snippet></ROW><ROW><id>3651182</id><snippet>B</snippet></ROW><ROW><id>3651182</id><snippet>C</snippet></ROW><ROW><id>3651182</id><snippet>B</snippet></ROW><ROW><id>3651182</id><snippet>C</snippet></ROW><ROW><id>3651182</id><snippet>A</snippet></ROW><ROW><id>3651182</id><snippet>In [11]: B=A.repeat(3).reshape(3,3)

In [12]: B
Out[12]: 
array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]])

In [13]: C=B.T

In [14]: C
Out[14]: 
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>3651182</id><snippet>In [25]: C=np.tile(A,(3,1))

In [26]: C
Out[26]: 
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])

In [27]: B=C.T

In [28]: B
Out[28]: 
array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]])
</snippet></ROW><ROW><id>3651182</id><snippet>In [57]: np.lib.stride_tricks.as_strided(A,shape=(3,3),strides=(4,0))
Out[57]: 
array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]])

In [58]: np.lib.stride_tricks.as_strided(A,shape=(3,3),strides=(0,4))
Out[58]: 
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>3651182</id><snippet>A</snippet></ROW><ROW><id>3651182</id><snippet>B</snippet></ROW><ROW><id>3651182</id><snippet>A</snippet></ROW><ROW><id>3651182</id><snippet>In [59]: B=np.lib.stride_tricks.as_strided(A,shape=(3,3),strides=(4,0))

In [60]: B[0,0]=100

In [61]: A
Out[61]: array([100,   2,   3])
</snippet></ROW><ROW><id>3651531</id><snippet>p.communicate(content)</snippet></ROW><ROW><id>3651531</id><snippet>sourcefile</snippet></ROW><ROW><id>3651531</id><snippet>p.stdin</snippet></ROW><ROW><id>3651531</id><snippet>sourcefile</snippet></ROW><ROW><id>3651531</id><snippet>p.stdin</snippet></ROW><ROW><id>3651531</id><snippet>sourcefile = open(filein, "r")
targetfile = open(pathout, "w")

p = Popen([SCRIPT], stdout=targetfile, stdin=PIPE)
while True:
    data = sourcefile.read(1024)
    if len(data) == 0:
        break
    p.stdin.write(data)
sourcefile.close()
p.stdin.close()

p.wait()
targetfile.close()
</snippet></ROW><ROW><id>3652120</id><snippet>j</snippet></ROW><ROW><id>3652120</id><snippet>B.__init__</snippet></ROW><ROW><id>3652120</id><snippet>class C(A, B):
    def __init__(self):
        B.__init__(self,4)
</snippet></ROW><ROW><id>3652120</id><snippet>A</snippet></ROW><ROW><id>3652120</id><snippet>B</snippet></ROW><ROW><id>3652120</id><snippet>__init__</snippet></ROW><ROW><id>3652120</id><snippet>class C(A, B):
    def __init__(self):
        A.__init__(self,4)
        B.__init__(self,4)
</snippet></ROW><ROW><id>3652120</id><snippet>super</snippet></ROW><ROW><id>3652120</id><snippet>super</snippet></ROW><ROW><id>3652120</id><snippet>class D(object):
    def __init__(self, i):
        pass
class A(D):
    def __init__(self, i):
        super(A,self).__init__(i)
        self.i = i
class B(D):
    def __init__(self, j):
        super(B,self).__init__(j)        
        self.j = j

class C(A, B):
    def __init__(self):
        super(C, self).__init__(4)
c = C()
print(c.i,c.j)
# (4, 4)
</snippet></ROW><ROW><id>3652313</id><snippet>User</snippet></ROW><ROW><id>3652313</id><snippet>ModelAdmin</snippet></ROW><ROW><id>3652313</id><snippet>from django.contrib.auth.models import User

class UserAdmin(admin.ModelAdmin):
    actions = ['some_action']

    def some_action(self, request, queryset):
        #do something ...
    some_action.short_description = "blabla"

admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>3652370</id><snippet>readline()</snippet></ROW><ROW><id>3652370</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>3652370</id><snippet>read()</snippet></ROW><ROW><id>3652370</id><snippet>struct.error</snippet></ROW><ROW><id>3652370</id><snippet>readline</snippet></ROW><ROW><id>3652370</id><snippet>import urllib2
import StringIO
import gzip
import struct

url = "http://www.v-gn.de/wbb/"
request = urllib2.Request(url)
request.add_header('Accept-encoding', 'gzip')
response = urllib2.urlopen(request)
content = response.read()
response.close()
fh=StringIO.StringIO(content)
html = gzip.GzipFile(fileobj=StringIO.StringIO(content))
try:
    for line in html:
        line=line.rstrip()
        print(line)
except struct.error:
    pass
</snippet></ROW><ROW><id>3652674</id><snippet>HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Python\PythonCore\2.6\InstallPath</snippet></ROW><ROW><id>3652674</id><snippet>HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\2.6\InstallPath</snippet></ROW><ROW><id>3652957</id><snippet>cur_named</snippet></ROW><ROW><id>3652957</id><snippet>SOME_CONFIG = {
    'some_key': ((..., ...), {...}),
    ...
}

environ['wsgiorg.routing_args'] = SOME_CONFIG['some_key']
</snippet></ROW><ROW><id>3652957</id><snippet>new_named</snippet></ROW><ROW><id>3652957</id><snippet>SOME_CONFIG</snippet></ROW><ROW><id>3653049</id><snippet>autoassign</snippet></ROW><ROW><id>3653049</id><snippet>class Foo(object):
    @autoassign
    def __init__(self,a,b,c=False,*args):
        pass
a=Foo('IBM','/tmp',True, 100, 101)
print(a.args)
# AttributeError: 'Foo' object has no attribute 'args'
</snippet></ROW><ROW><id>3653049</id><snippet>autoassign</snippet></ROW><ROW><id>3653049</id><snippet>autoassign(*argnames)</snippet></ROW><ROW><id>3653049</id><snippet>autoassign</snippet></ROW><ROW><id>3653049</id><snippet>sieve</snippet></ROW><ROW><id>3653049</id><snippet>if kwargs:
    exclude, f = set(kwargs['exclude']), None
    sieve = lambda l:itertools.ifilter(lambda nv: nv[0] not in exclude, l)
elif len(names) == 1 and inspect.isfunction(names[0]):
    f = names[0]
    sieve = lambda l:l
else:
    names, f = set(names), None
    sieve = lambda l: itertools.ifilter(lambda nv: nv[0] in names, l)
</snippet></ROW><ROW><id>3653049</id><snippet>for _ in
itertools.starmap(assigned.setdefault,
defaults): pass</snippet></ROW><ROW><id>3653049</id><snippet>map</snippet></ROW><ROW><id>3653049</id><snippet>starmap</snippet></ROW><ROW><id>3653049</id><snippet>for key,value in defaults.iteritems():
    assigned.setdefault(key,value)
</snippet></ROW><ROW><id>3653049</id><snippet>import inspect
import functools
def autoargs(*include,**kwargs):   
    def _autoargs(func):
        attrs,varargs,varkw,defaults=inspect.getargspec(func)
        def sieve(attr):
            if kwargs and attr in kwargs['exclude']: return False
            if not include or attr in include: return True
            else: return False            
        @functools.wraps(func)
        def wrapper(self,*args,**kwargs):
            # handle default values
            for attr,val in zip(reversed(attrs),reversed(defaults)):
                if sieve(attr): setattr(self, attr, val)
            # handle positional arguments
            positional_attrs=attrs[1:]            
            for attr,val in zip(positional_attrs,args):
                if sieve(attr): setattr(self, attr, val)
            # handle varargs
            if varargs:
                remaining_args=args[len(positional_attrs):]
                if sieve(varargs): setattr(self, varargs, remaining_args)                
            # handle varkw
            if kwargs:
                for attr,val in kwargs.iteritems():
                    if sieve(attr): setattr(self,attr,val)            
            return func(self,*args,**kwargs)
        return wrapper
    return _autoargs
</snippet></ROW><ROW><id>3653049</id><snippet>import unittest
import utils_method as um

class Test(unittest.TestCase):
    def test_autoargs(self):
        class A(object):
            @um.autoargs()
            def __init__(self,foo,path,debug=False):
                pass
        a=A('rhubarb','pie',debug=True)
        self.assertTrue(a.foo=='rhubarb')
        self.assertTrue(a.path=='pie')
        self.assertTrue(a.debug==True)

        class B(object):
            @um.autoargs()
            def __init__(self,foo,path,debug=False,*args):
                pass
        a=B('rhubarb','pie',True, 100, 101)
        self.assertTrue(a.foo=='rhubarb')
        self.assertTrue(a.path=='pie')
        self.assertTrue(a.debug==True)
        self.assertTrue(a.args==(100,101))        

        class C(object):
            @um.autoargs()
            def __init__(self,foo,path,debug=False,*args,**kw):
                pass
        a=C('rhubarb','pie',True, 100, 101,verbose=True)
        self.assertTrue(a.foo=='rhubarb')
        self.assertTrue(a.path=='pie')
        self.assertTrue(a.debug==True)
        self.assertTrue(a.verbose==True)        
        self.assertTrue(a.args==(100,101))        

    def test_autoargs_names(self):
        class C(object):
            @um.autoargs('bar','baz','verbose')
            def __init__(self,foo,bar,baz,verbose=False):
                pass
        a=C('rhubarb','pie',1)
        self.assertTrue(a.bar=='pie')
        self.assertTrue(a.baz==1)
        self.assertTrue(a.verbose==False)
        self.assertRaises(AttributeError,getattr,a,'foo')

    def test_autoargs_exclude(self):
        class C(object):
            @um.autoargs(exclude=('bar','baz','verbose'))
            def __init__(self,foo,bar,baz,verbose=False):
                pass
        a=C('rhubarb','pie',1)
        self.assertTrue(a.foo=='rhubarb')
        self.assertRaises(AttributeError,getattr,a,'bar')


if __name__ == '__main__':
    unittest.main(argv = unittest.sys.argv + ['--verbose'])
</snippet></ROW><ROW><id>3653049</id><snippet>autoassign</snippet></ROW><ROW><id>3653049</id><snippet>autoargs</snippet></ROW><ROW><id>3653339</id><snippet>.extend</snippet></ROW><ROW><id>3653339</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>3653469</id><snippet>for index, item in enumerate(z):
    if index != len(z)-1:
        print index
</snippet></ROW><ROW><id>3653620</id><snippet>clean_</snippet></ROW><ROW><id>3653620</id><snippet># models.py
class UrlModel(models.Model):
    link = models.URLField(verify_exists = False, max_length = 225)

    def __unicode__(self):
        return self.link

# forms.py 
class UrlForm(ModelForm):
    class Meta:
        model = UrlModel

    def clean_link(self):
        link  = self.cleaned_data['link']
        return link.strip()

# shell
In [1]: from test_app.forms import UrlForm

In [2]: f = UrlForm(data = dict(link = '  http://google.com  '))

In [3]: f.is_valid()
Out[3]: True

In [4]: f.save()
Out[4]: &lt;UrlModel: http://google.com&gt;
</snippet></ROW><ROW><id>3653620</id><snippet>title</snippet></ROW><ROW><id>3653620</id><snippet>link</snippet></ROW><ROW><id>3653620</id><snippet>class StoryForm(forms.ModelForm):
    class Meta:
        model = Story
        fields = ('title', 'link')

    def clean_link(self):
        link = self.cleaned_data['link']
        return link.strip()
</snippet></ROW><ROW><id>3653620</id><snippet>In [1]: from test_app.forms import StoryForm

In [2]: data = dict(title="Google story", link  = "   http://google.com ")

In [3]: f = StoryForm(data)

In [4]: f.is_valid()
Out[4]: True

In [5]: f.save()
Out[5]: &lt;Story: Google story http://google.com&gt;
</snippet></ROW><ROW><id>3653659</id><snippet>UPDATE</snippet></ROW><ROW><id>3653659</id><snippet>WHERE</snippet></ROW><ROW><id>3653659</id><snippet>WHERE</snippet></ROW><ROW><id>3653707</id><snippet>&gt;&gt;&gt; bytes([97])
b'a'
</snippet></ROW><ROW><id>3653750</id><snippet>-e</snippet></ROW><ROW><id>3653750</id><snippet>try:
    import simplejson as json
except ImportError:
    import json
</snippet></ROW><ROW><id>3653750</id><snippet>import myfunkymodule
</snippet></ROW><ROW><id>3653750</id><snippet>myfunkymodule</snippet></ROW><ROW><id>3653750</id><snippet>mock_modules/myfunkymodule.py</snippet></ROW><ROW><id>3653750</id><snippet>nose</snippet></ROW><ROW><id>3653750</id><snippet>$ PYTHONPATH=path_to/mock_modules nosetests --with-doctest
</snippet></ROW><ROW><id>3653989</id><snippet>is_all_wait</snippet></ROW><ROW><id>3653989</id><snippet>queue.join()</snippet></ROW><ROW><id>3653989</id><snippet>is_all_wait</snippet></ROW><ROW><id>3653989</id><snippet>state</snippet></ROW><ROW><id>3653989</id><snippet>queue.join</snippet></ROW><ROW><id>3653989</id><snippet>queue.join()</snippet></ROW><ROW><id>3654356</id><snippet>screen.nodelay(1)</snippet></ROW><ROW><id>3654356</id><snippet>screen.nodelay(1)
while True:
    char = screen.getch()
    if char == 113: break  # q
    elif char == curses.KEY_RIGHT: snake.update(RIGHT)
    elif char == curses.KEY_LEFT: snake.update(LEFT)
    elif char == curses.KEY_UP: snake.update(UP)
    elif char == curses.KEY_DOWN: snake.update(DOWN)
    else: snake.update()
    time.sleep(0.1)
</snippet></ROW><ROW><id>3654517</id><snippet>sudo</snippet></ROW><ROW><id>3654517</id><snippet>sudo setup.py build
sudo setup.py install
</snippet></ROW><ROW><id>3654627</id><snippet>&gt;&gt;&gt; import babel.dates
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; print babel.dates.format_date(now, 'd MMMM yyyy', locale='pl_PL')
6 września 2010
</snippet></ROW><ROW><id>3654640</id><snippet>from pylab import *

# some random values
xdata = arange(0.0, 2.0, 0.01)
ydata1 = sin(2*pi*xdata)
ydata2 = 5*cos(2*pi*xdata) + randn(len(xdata))

# number of ticks on the y-axis
numSteps = 9;

# plot
figure()

subplot(121)
plot(xdata, ydata1, 'b')
yticks( linspace(ylim()[0],ylim()[1],numSteps) )
grid()

subplot(122)
plot(xdata, ydata2, 'g')
yticks( linspace(ylim()[0],ylim()[1],numSteps) )
grid()

show()
</snippet></ROW><ROW><id>3654686</id><snippet>__dict__</snippet></ROW><ROW><id>3654686</id><snippet>object</snippet></ROW><ROW><id>3654686</id><snippet>__slots__</snippet></ROW><ROW><id>3654686</id><snippet>&gt;&gt;&gt; class Foo(object): pass
...
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; hasattr(foo, "__dict__")
True
&gt;&gt;&gt; foo.bar = "baz"
&gt;&gt;&gt;
&gt;&gt;&gt; class Spam(object):
...     __slots__ = tuple()
...
&gt;&gt;&gt; spam = Spam()
&gt;&gt;&gt; hasattr(spam, "__dict__")
False
&gt;&gt;&gt; spam.ham = "eggs"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Spam' object has no attribute 'ham'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3654782</id><snippet>dict</snippet></ROW><ROW><id>3654782</id><snippet>for k in sorted(d.keys())</snippet></ROW><ROW><id>3654782</id><snippet>dict</snippet></ROW><ROW><id>3654782</id><snippet>map</snippet></ROW><ROW><id>3654782</id><snippet>map</snippet></ROW><ROW><id>3654782</id><snippet>dict</snippet></ROW><ROW><id>3654936</id><snippet>for(int i = 0; i &lt; 10; ++i)</snippet></ROW><ROW><id>3654936</id><snippet>for i in range(0, 10)</snippet></ROW><ROW><id>3654936</id><snippet>+=</snippet></ROW><ROW><id>3654936</id><snippet>+=</snippet></ROW><ROW><id>3654936</id><snippet>-=</snippet></ROW><ROW><id>3654936</id><snippet>+=</snippet></ROW><ROW><id>3654936</id><snippet>-=</snippet></ROW><ROW><id>3654953</id><snippet>def change(amount):

    # this can be removed if you pass the amount in pennies
    # rather than dollars
    amount = int(round(amount*100))

    values = [2000, 1000, 500, 100, 25, 10, 5, 1]
    denom = ['twenties', 'tens', 'fives', 'ones', 'quarters', 'dimes', 'nickels', 'pennies']

    for i in range(len(values)):
        num = amount / values[i]
        amount -= num * values[i]
        print str(num) + " " + denom[i]
</snippet></ROW><ROW><id>3654953</id><snippet>change(58.79)</snippet></ROW><ROW><id>3654953</id><snippet>2 twenties
1 tens
1 fives
3 ones
3 quarters
0 dimes
0 nickels
4 pennies
</snippet></ROW><ROW><id>3655026</id><snippet># english.py
def greet(): return 'Hello!'

# italian.py
def greet(): return 'Ciao!'

# french.py
def greet(): return 'Salut!'

# config.py
langname = 'italian'

# startit.py
import config
import sys
lang = __import__(config.langname)
sys.modules['lang'] = lang
</snippet></ROW><ROW><id>3655026</id><snippet>import lang</snippet></ROW><ROW><id>3655026</id><snippet>italian</snippet></ROW><ROW><id>3655026</id><snippet>lang.greet()</snippet></ROW><ROW><id>3655026</id><snippet>'Ciao!'</snippet></ROW><ROW><id>3655026</id><snippet>foo.bar</snippet></ROW><ROW><id>3655026</id><snippet>foo</snippet></ROW><ROW><id>3655026</id><snippet>__import__</snippet></ROW><ROW><id>3655026</id><snippet>import sys
def importanyasname(actualname, fakename):
    __import__(actualname)
    sys.modules[fakename] = sys.modules[actualname]
</snippet></ROW><ROW><id>3655026</id><snippet>__import__</snippet></ROW><ROW><id>3655026</id><snippet>sys.modules</snippet></ROW><ROW><id>3655026</id><snippet>sys.modules</snippet></ROW><ROW><id>3655057</id><snippet>request.POST.items()</snippet></ROW><ROW><id>3655057</id><snippet>request.POST.iteritems()</snippet></ROW><ROW><id>3655057</id><snippet>(name, value)</snippet></ROW><ROW><id>3655057</id><snippet>request.POST.iterlists()</snippet></ROW><ROW><id>3655057</id><snippet>value</snippet></ROW><ROW><id>3655057</id><snippet>for name, value in request.POST.iteritems():
    ModelName(**dict( [ (name, value) ] )).save()
</snippet></ROW><ROW><id>3655274</id><snippet>y = 2.408 * len(var_text)</snippet></ROW><ROW><id>3655274</id><snippet>n_perms = 256**len(passkey)
</snippet></ROW><ROW><id>3655274</id><snippet>&gt;&gt;&gt; from math import log10
&gt;&gt;&gt; log10(1000)
3.0
&gt;&gt;&gt; log10(9999)
3.9999565683801923
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3655274</id><snippet>length = floor(log10(n_perms)) + 1</snippet></ROW><ROW><id>3655274</id><snippet>int</snippet></ROW><ROW><id>3655274</id><snippet>n_perms = 256**len(var_text)
length = int(log10(n_perms)) + 1
</snippet></ROW><ROW><id>3655274</id><snippet>length = log256(256**len(var_text)
length = len(var_text) # the log and exp cancel!
</snippet></ROW><ROW><id>3655274</id><snippet>if x = len(var_text), we want y such that
y = log10(256**x)
10**y = 256**x
10**y = (10**log10(256))**x
10**y = (10**(log10(256)x))
y = log10(256) * x
</snippet></ROW><ROW><id>3655274</id><snippet>length = log10(256) * len(var_text)     # or about (2.408 * x)
</snippet></ROW><ROW><id>3655363</id><snippet>egg</snippet></ROW><ROW><id>3655363</id><snippet>open</snippet></ROW><ROW><id>3655711</id><snippet>cls</snippet></ROW><ROW><id>3655711</id><snippet>themap = {C3: C3.parse}
for C in (str, C1, C2):
    themap[C] = C

def f(cls, value):
    wot = themap.get(cls)
    if wot is None:
        raise UnknownClass(repr(cls))
    return wot(value)
</snippet></ROW><ROW><id>3655711</id><snippet>str</snippet></ROW><ROW><id>3655726</id><snippet>b = Twitter(**{name: value})
</snippet></ROW><ROW><id>3655726</id><snippet>Twitter(account_username='vvvvvv')</snippet></ROW><ROW><id>3655726</id><snippet>Twitter(**{testdict['name'], testdict['value']})
</snippet></ROW><ROW><id>3655726</id><snippet>Twitter()</snippet></ROW><ROW><id>3655726</id><snippet>test_twits = [{'name':'account_username','value':'vvvvvv'},
              {'name':'account_username','value':'wwwwww'},
              ]
for twit in test_twits:
    name = twit['name']
    value = twit['value']
    if name != '' and name != 'top_select':
         b = Twitter(**{name: value})
         b.save()
</snippet></ROW><ROW><id>3655734</id><snippet>print</snippet></ROW><ROW><id>3655734</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>3655734</id><snippet>ascii</snippet></ROW><ROW><id>3655734</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>3655734</id><snippet>&gt;&gt;&gt; data = '\xc2\xbd' # UTF-8 encoded 1/2 symbol.
&gt;&gt;&gt; data.encode('cp437')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\dev\python\lib\encodings\cp437.py", line 12, in encode
    return codecs.charmap_encode(input,errors,encoding_map)
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>3655734</id><snippet>encode</snippet></ROW><ROW><id>3655734</id><snippet>encode</snippet></ROW><ROW><id>3655734</id><snippet>ascii</snippet></ROW><ROW><id>3655734</id><snippet>cp437</snippet></ROW><ROW><id>3655734</id><snippet>print</snippet></ROW><ROW><id>3655734</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp437'
&gt;&gt;&gt; print data.decode('utf8') # implicit encode to sys.stdout.encoding
½
&gt;&gt;&gt; print data.decode('utf8').encode('cp437') # explicit encode.
½
</snippet></ROW><ROW><id>3655824</id><snippet>#!/usr/bin/python

import sys
import string

class StreamFilter(object):

    def __init__(self, filter, stream):
        self.stream = stream
        self.filter = filter

    def write(self,data):
        data = data.replace(self.filter, '[[TOP SECRET]]')
        self.stream.write(data)
        self.stream.flush()

if __name__ == '__main__':

    sys.stdout = StreamFilter("myPassWord", sys.stdout)

    print 'Hello there'
    print 'My password is myPassWord'
</snippet></ROW><ROW><id>3655824</id><snippet>Hello there
My password is [[TOP SECRET]]
</snippet></ROW><ROW><id>3655857</id><snippet>def isalambda(v):
  return isinstance(v, type(lambda: None)) and v.__name__ == '&lt;lambda&gt;'
</snippet></ROW><ROW><id>3655907</id><snippet>module_</snippet></ROW><ROW><id>3655907</id><snippet>module.py</snippet></ROW><ROW><id>3655907</id><snippet>import dl
from module_ import *
dl.open(library, dl.RTLD_NOW, dl.RTLD_GLOBAL)
</snippet></ROW><ROW><id>3656039</id><snippet>    10
  5    11
3   8    12
          14
</snippet></ROW><ROW><id>3656135</id><snippet>models.py</snippet></ROW><ROW><id>3656135</id><snippet># encoding: utf-8
</snippet></ROW><ROW><id>3656135</id><snippet>models.py</snippet></ROW><ROW><id>3656135</id><snippet>models.py</snippet></ROW><ROW><id>3656748</id><snippet>#!/usr/bin/env python

import os

homedir = os.path.expanduser('~')
bash_history = open(homedir+"/.bash_history", 'r')
</snippet></ROW><ROW><id>3656748</id><snippet>bash_history_text = bash_history.read()
print bash_history_text
</snippet></ROW><ROW><id>3656748</id><snippet>import re
splitter = re.compile(r'\n')

bash_history_array = splitter.split(bash_history_text)
</snippet></ROW><ROW><id>3657183</id><snippet>instancemodelname = ContentType.objects.get(app_label="myappname", model="mymodelname")
b = instancemodelname.model_class()(account_username='testtestest')
b.save()
</snippet></ROW><ROW><id>3657319</id><snippet>GLOB_VAR = "Some string"

def some_fun():
    print GLOB_VAR
</snippet></ROW><ROW><id>3657319</id><snippet>Some string</snippet></ROW><ROW><id>3657319</id><snippet>SOME_VARIABLE</snippet></ROW><ROW><id>3657319</id><snippet>some_fun</snippet></ROW><ROW><id>3657319</id><snippet>SOME_VARIABLE</snippet></ROW><ROW><id>3657319</id><snippet>global</snippet></ROW><ROW><id>3657319</id><snippet>GLOB_VAR = "Some string"

def some_fun():
    global GLOB_VAR
    GLOB_VAR = "Some other string"

some_fun()
print GLOB_VAR
</snippet></ROW><ROW><id>3657319</id><snippet>Some other string</snippet></ROW><ROW><id>3657319</id><snippet>GLOB_VAR = False

def some_fun():
    if GLOB_VAR:
        GLOB_VAR = False

some_fun()
</snippet></ROW><ROW><id>3657319</id><snippet>Traceback (most recent call last):
  File "t.py", line 7, in &lt;module&gt;
    some_fun()
  File "t.py", line 4, in some_fun
    if GLOB_VAR:
UnboundLocalError: local variable 'GLOB_VAR' referenced before assignment
</snippet></ROW><ROW><id>3657319</id><snippet>GLOB_VAR</snippet></ROW><ROW><id>3657554</id><snippet>x/ln(x)</snippet></ROW><ROW><id>3657554</id><snippet>t(x)</snippet></ROW><ROW><id>3657554</id><snippet>a</snippet></ROW><ROW><id>3657554</id><snippet>b</snippet></ROW><ROW><id>3657826</id><snippet>"string"</snippet></ROW><ROW><id>3657826</id><snippet>'string'</snippet></ROW><ROW><id>3657826</id><snippet>&gt;&gt;&gt; 'string' == "string"
True
</snippet></ROW><ROW><id>3657826</id><snippet>&gt;&gt;&gt; mystring = """Hello
... World!"""
&gt;&gt;&gt; mystring
'Hello\nWorld!'
</snippet></ROW><ROW><id>3657826</id><snippet>&gt;&gt;&gt; mystring = "Hello" 'World!'
&gt;&gt;&gt; mystring
'HelloWorld!'
</snippet></ROW><ROW><id>3658463</id><snippet>import Tkinter as tk
import tkFont

class App:
    def __init__(self):
        self.root = tk.Tk()
        self.count = 0
        l = tk.Label(text="Hello, world")
        l.pack()
        # clone the font, set the underline attribute,
        # and assign it to our widget
        f = tkFont.Font(l, l.cget("font"))
        f.configure(underline = True)
        l.configure(font=f)
        self.root.mainloop()


if __name__ == "__main__":
    app=App()
</snippet></ROW><ROW><id>3659511</id><snippet>os.system</snippet></ROW><ROW><id>3659511</id><snippet>subprocess</snippet></ROW><ROW><id>3659511</id><snippet># The following line spawns the psftp process and binds its standard input
# to p.stdin and its standard output to p.stdout
p = subprocess.Popen('psftp -l testuser -pw testpass'.split(), 
                     stdin=subprocess.PIPE, stdout=subprocess.PIPE)
# Send the 'cd some_directory' command to the process as if a user were 
# typing it at the command line
p.stdin.write('cd some_directory\n')
</snippet></ROW><ROW><id>3659619</id><snippet>import numpy as np
from numpy import newaxis

def explicit(a):
    n = a.shape[0]
    m = np.zeros_like(a)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                m[k,i] += a[i,j] - a[i,k] - a[k,j] + a[k,k]
    return m

def implicit(a):
    n = a.shape[0]
    m = np.zeros_like(a)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                m[k,i] += a[i,j] - a[i,k] - a[k,j] + a[k,k]
    return m

a = np.random.randn(10,10)
assert np.allclose(explicit(a), implicit(a), atol=1e-10, rtol=0.)
</snippet></ROW><ROW><id>3659619</id><snippet>implicit</snippet></ROW><ROW><id>3659619</id><snippet>def implicit(a):
    n = a.shape[0]
    m = np.zeros_like(a)
    for k in range(n):
        for i in range(n):
            m[k,i] = (a[i,:] - a[k,:]).sum() - n*a[i,k] + n*a[k,k]
    return m
</snippet></ROW><ROW><id>3659619</id><snippet>def implicit(a):
    n = a.shape[0]
    m = np.zeros_like(a)
    m = - n*a.T + n*np.diag(a)[:,newaxis]
    for k in range(n):
        for i in range(n):
            m[k,i] += (a[i,:] - a[k,:]).sum()
    return m
</snippet></ROW><ROW><id>3659619</id><snippet>def implicit(a):
    n = a.shape[0]
    m = np.zeros_like(a)
    m = - n*a.T + n*np.diag(a)[:,newaxis]
    m += (a.T[newaxis,...] - a[...,newaxis]).sum(1)
    return m
</snippet></ROW><ROW><id>3659619</id><snippet>explicit</snippet></ROW><ROW><id>3659619</id><snippet>j</snippet></ROW><ROW><id>3659723</id><snippet>time.time()</snippet></ROW><ROW><id>3659723</id><snippet>import time
import urllib2

URL = 'http://twitter.com'

def request_time():
    start_time = time.time()
    urllib2.urlopen(URL).read()
    end_time = time.time()
    return end_time - start_time

def throttling_test(n):
    """Test if processing more than n requests is throttled."""
    experiment_start = time.time()
    for i in range(n):
        t = request_time()
        print 'Request #%d took %.5f ms' % (i+1, t * 1000.0)
    print '--- Throttling limit crossed ---'

    t = request_time()
    print 'Request #%d took %.5f ms' % (n+1, t * 1000.0)


throttling_test(3)
</snippet></ROW><ROW><id>3660006</id><snippet>import time
urllib2.urlopen("http:\example.com?time=%s" % int(time.time()))
</snippet></ROW><ROW><id>3660006</id><snippet>http:\example.com?time=1283872559</snippet></ROW><ROW><id>3660229</id><snippet>class MyLongRunningTask(AbortableTask)
</snippet></ROW><ROW><id>3660229</id><snippet>def MyLongRunningTask(AbortableTask)
</snippet></ROW><ROW><id>3660235</id><snippet>datetime</snippet></ROW><ROW><id>3660235</id><snippet>timedelta</snippet></ROW><ROW><id>3660235</id><snippet>import datetime

mydatetime = datetime.now() # or whatever value you want
twelvelater = mydatetime + datetime.timedelta(hours=12)
twelveearlier = mydatetime - datetime.timedelta(hours=12)

difference = abs(some_datetime_A - some_datetime_B)
# difference is now a timedelta object

# there are a couple of ways to do this comparision:
if difference &gt; timedelta(minutes=1):
    print "Timestamps were more than a minute apart"

# or: 
if difference.total_seconds() &gt; 60:
    print "Timestamps were more than a minute apart"
</snippet></ROW><ROW><id>3660466</id><snippet>def isRecordValid(stock,price,volume,stime):
    #do input validation here, return True if record is fine, False if not.  Optionally raise an Error here and catch it in your loop
    return True

reader = csv.reader(idata.split("\r\n"))

stocks = []
for line in reader:
    if line == '':
        continue

    stock, price, volume, stime = line
    try:
        if isRecordValid(stock,price,volume,stime):
            price = float(price)
            volume = int(volume)
            stocks.append((stock, price, volume, stime))
        except Exception as e:
            print "either print or log and error here, using 'except' means you can continue execution without the exception terminating your current stack frame and being thrown further up"
</snippet></ROW><ROW><id>3660692</id><snippet>tests.py</snippet></ROW><ROW><id>3660692</id><snippet>python manage.py shell</snippet></ROW><ROW><id>3660692</id><snippet>from MyProj.forum.tests import SimpleTest
</snippet></ROW><ROW><id>3660929</id><snippet># top level menu
menu1 = wx.Menu()
menu1.Append(11,"11")
menu1.Append(12, "12")        

# sub menu 1
menu2 = wx.Menu()
menu2.Append(131, "131")
menu2.Append(132, "132")
menu1.AppendMenu(13,"13",menu2)

# sub menu 2
menu3 = wx.Menu()
menu3.Append(1321,"1321")
menu3.Append(1322,"1322")
menu3.Append(1323,"1323")
menu2.AppendMenu(132, "132", menu3)

# add top to menubar
menubar.Append(menu1, "&amp;Top")
</snippet></ROW><ROW><id>3660929</id><snippet>def MenuClick(self, event):        
    def _menuItemSearch(menu,subMenuTree ,id):
        if not menu.FindItemById(id): return False
        # it is in this menu
        for menuItem in menu.MenuItems:               
            if menuItem.GetId() == id:
                subMenuTree.append(menuItem.GetLabel())
                return True
            if menuItem.GetSubMenu():
                if _menuItemSearch(menuItem.GetSubMenu(),subMenuTree,id):
                    subMenuTree.append(menuItem.GetLabel())
                    return True
                return False
    subMenuTree = []
    for menu,name in self.GetMenuBar().GetMenus():
        _menuItemSearch(menu,subMenuTree,event.Id)
    print subMenuTree

[u'1321', u'132', u'13']
</snippet></ROW><ROW><id>3661555</id><snippet>examples</snippet></ROW><ROW><id>3661555</id><snippet>package_data = {
        'module_1': [files],
        'module_2': [files],
        'example': [files],
}
</snippet></ROW><ROW><id>3661604</id><snippet>%typemap(in) double[ANY] (double temp[$1_dim0]) {
  int i;
  if (!PySequence_Check($input)) {
    PyErr_SetString(PyExc_ValueError,"Expected a sequence");
    return NULL;
  }
  if (PySequence_Length($input) != $1_dim0) {
    PyErr_SetString(PyExc_ValueError,"Size mismatch. Expected $1_dim0 elements");
    return NULL;
  }
  for (i = 0; i &lt; $1_dim0; i++) {
    PyObject *o = PySequence_GetItem($input,i);
    if (PyNumber_Check(o)) {
      temp[i] = (double) PyFloat_AsDouble(o);
    } else {
      PyErr_SetString(PyExc_ValueError,"Sequence elements must be numbers");      
      return NULL;
    }
  }
  $1 = temp;
}
</snippet></ROW><ROW><id>3661604</id><snippet>%typemap(argout) double PointB[3]{
    PyObject *o = PyList_New(3);
    int i;
    for(i=0; i&lt;3; i++)
    {
        PyList_SetItem(o, i, PyFloat_FromDouble($1[i]));
    }
    $result = o;
}
</snippet></ROW><ROW><id>3661604</id><snippet>point_b = convertAtoB(s, point_a, dummy)
</snippet></ROW><ROW><id>3661795</id><snippet>enter a number</snippet></ROW><ROW><id>3661795</id><snippet>34
1998
1
</snippet></ROW><ROW><id>3661795</id><snippet>enter a number
enter two numbers
34
enter two numbers
1998
enter two numbers
1
</snippet></ROW><ROW><id>3662251</id><snippet>A</snippet></ROW><ROW><id>3662251</id><snippet>r</snippet></ROW><ROW><id>3662251</id><snippet>s</snippet></ROW><ROW><id>3662251</id><snippet>sort</snippet></ROW><ROW><id>3662251</id><snippet>r</snippet></ROW><ROW><id>3662251</id><snippet>s</snippet></ROW><ROW><id>3662251</id><snippet>sort(A)</snippet></ROW><ROW><id>3662251</id><snippet>abs(r) &lt; abs(s)</snippet></ROW><ROW><id>3662251</id><snippet>abs(r) = abs(s)</snippet></ROW><ROW><id>3662251</id><snippet>angle(r) &lt; angle(s)</snippet></ROW><ROW><id>3662251</id><snippet>&gt;&gt; r = roots(q);  %# Compute your roots
&gt;&gt; [junk,index] = sortrows([real(r) imag(r)],[1 2]);  %# Sort based on real,
                                                      %#   then imaginary parts
&gt;&gt; r = r(index)  %# Apply the sort index to r

r =

   0.2694 - 0.3547i
   0.2694 + 0.3547i
   0.3369 - 0.1564i
   0.3369 + 0.1564i
   0.3528          
   1.3579 - 1.7879i
   1.3579 + 1.7879i
   2.4419 - 1.1332i
   2.4419 + 1.1332i
   2.8344          
</snippet></ROW><ROW><id>3662277</id><snippet>re.sub('&lt;[^&gt;]*&gt;', '', mystring)
</snippet></ROW><ROW><id>3662277</id><snippet>a = &lt;</snippet></ROW><ROW><id>3662277</id><snippet>b = &gt;</snippet></ROW><ROW><id>3662277</id><snippet>c = [^&gt;&lt;]+</snippet></ROW><ROW><id>3662277</id><snippet>acb</snippet></ROW><ROW><id>3662402</id><snippet>for k in dict1.keys(): 
    if k in dict2: 
        if dict1[k] != dict2[k]: 
            return False 
return True 
</snippet></ROW><ROW><id>3662537</id><snippet>np.roll</snippet></ROW><ROW><id>3662537</id><snippet>a</snippet></ROW><ROW><id>3662537</id><snippet>import numpy as np
import numpy.ma as ma

a = np.arange(100).reshape(10,10)
fill_value=-99
a[2:4,3:8] = fill_value
a[8,8] = fill_value
a = ma.masked_array(a,a==fill_value)
print(a)

# [[0 1 2 3 4 5 6 7 8 9]
#  [10 11 12 13 14 15 16 17 18 19]
#  [20 21 22 -- -- -- -- -- 28 29]
#  [30 31 32 -- -- -- -- -- 38 39]
#  [40 41 42 43 44 45 46 47 48 49]
#  [50 51 52 53 54 55 56 57 58 59]
#  [60 61 62 63 64 65 66 67 68 69]
#  [70 71 72 73 74 75 76 77 78 79]
#  [80 81 82 83 84 85 86 87 -- 89]
#  [90 91 92 93 94 95 96 97 98 99]]

for shift in (-1,1):
    for axis in (0,1):        
        a_shifted=np.roll(a,shift=shift,axis=axis)
        idx=~a_shifted.mask * a.mask
        a[idx]=a_shifted[idx]

print(a)

# [[0 1 2 3 4 5 6 7 8 9]
#  [10 11 12 13 14 15 16 17 18 19]
#  [20 21 22 13 14 15 16 28 28 29]
#  [30 31 32 43 44 45 46 47 38 39]
#  [40 41 42 43 44 45 46 47 48 49]
#  [50 51 52 53 54 55 56 57 58 59]
#  [60 61 62 63 64 65 66 67 68 69]
#  [70 71 72 73 74 75 76 77 78 79]
#  [80 81 82 83 84 85 86 87 98 89]
#  [90 91 92 93 94 95 96 97 98 99]]
</snippet></ROW><ROW><id>3662537</id><snippet>neighbors=((0,1),(0,-1),(1,0),(-1,0),(1,1),(-1,1),(1,-1),(-1,-1),
           (0,2),(0,-2),(2,0),(-2,0))
</snippet></ROW><ROW><id>3662537</id><snippet>neighbors</snippet></ROW><ROW><id>3662537</id><snippet>a_copy=a.copy()
for hor_shift,vert_shift in neighbors:
    if not np.any(a.mask): break
    a_shifted=np.roll(a_copy,shift=hor_shift,axis=1)
    a_shifted=np.roll(a_shifted,shift=vert_shift,axis=0)
    idx=~a_shifted.mask*a.mask
    a[idx]=a_shifted[idx]
</snippet></ROW><ROW><id>3662537</id><snippet>np.roll</snippet></ROW><ROW><id>3662537</id><snippet>if</snippet></ROW><ROW><id>3662621</id><snippet>import urllib, urllib2, cookielib

cookie_jar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
urllib2.install_opener(opener)

# acquire cookie
url_1 = 'http://www.bkstr.com/webapp/wcs/stores/servlet/BuybackMaterialsView?langId=-1&amp;catalogId=10001&amp;storeId=10051&amp;schoolStoreId=15828'
req = urllib2.Request(url_1)
rsp = urllib2.urlopen(req)

# do POST
url_2 = 'http://www.bkstr.com/webapp/wcs/stores/servlet/BuybackSearch'
values = dict(isbn='9780131185838', schoolStoreId='15828', catalogId='10001')
data = urllib.urlencode(values)
req = urllib2.Request(url_2, data)
rsp = urllib2.urlopen(req)
content = rsp.read()

# print result
import re
pat = re.compile('Title:.*')
print pat.search(content).group()

# OUTPUT: Title:  Statics &amp; Strength of Materials for Arch (w/CD)&lt;br /&gt;
</snippet></ROW><ROW><id>3662928</id><snippet>primaryKeyWordsBox
</snippet></ROW><ROW><id>3662928</id><snippet>Application</snippet></ROW><ROW><id>3662928</id><snippet>makeCombinations(..)</snippet></ROW><ROW><id>3662928</id><snippet>makeCombinations(..)</snippet></ROW><ROW><id>3662928</id><snippet>Application</snippet></ROW><ROW><id>3662928</id><snippet>self</snippet></ROW><ROW><id>3662928</id><snippet> def makeCombinations(self):
</snippet></ROW><ROW><id>3662928</id><snippet>makeCombinations(..)</snippet></ROW><ROW><id>3662928</id><snippet>...,command = self.makeCombinations)
</snippet></ROW><ROW><id>3662928</id><snippet>self.</snippet></ROW><ROW><id>3662928</id><snippet> primaryraw = self.primaryKeyWordsBox.get(1.0,END)
 ...
 secondaryraw = self.secondaryKeyWordsBox.get(1.0,END)
 ...
 tertiaryraw = self.tertiaryKeyWordsBox.get(1.0,END)
</snippet></ROW><ROW><id>3662928</id><snippet>get</snippet></ROW><ROW><id>3662928</id><snippet> FILE = open(filename, "w")
</snippet></ROW><ROW><id>3662928</id><snippet> FILE = open(filename, w)
</snippet></ROW><ROW><id>3663300</id><snippet>arr = eval(`[[0]*5]*10`)
</snippet></ROW><ROW><id>3663300</id><snippet>arr = eval(("[[0]*5]+"*10)[:-1])
</snippet></ROW><ROW><id>3663354</id><snippet>ui = MainWindow()
ui.show()
ui.raise_()
</snippet></ROW><ROW><id>3663505</id><snippet>def rchop(thestring, ending):
  if thestring.endswith(ending):
    return thestring[:-len(ending)]
  return thestring

somestring = rchop(somestring, ' rec')
</snippet></ROW><ROW><id>3663590</id><snippet>GoogleMaps.geocode(query, sensor='false', oe='utf8', ll='', spn='', gl='')
</snippet></ROW><ROW><id>3663590</id><snippet>&gt;&gt;&gt; gmaps = GoogleMaps(api_key)
&gt;&gt;&gt; address = '350 Fifth Avenue New York, NY'
&gt;&gt;&gt; result = gmaps.geocode(address)
&gt;&gt;&gt; placemark = result['Placemark'][0]
&gt;&gt;&gt; lng, lat = placemark['Point']['coordinates'][0:2]
# Note these are backwards from usual
&gt;&gt;&gt; print lat, lng
40.6721118 -73.9838823
&gt;&gt;&gt; details = placemark['AddressDetails']['Country']['AdministrativeArea']
&gt;&gt;&gt; street = details['Locality']['Thoroughfare']['ThoroughfareName']
&gt;&gt;&gt; city = details['Locality']['LocalityName']
&gt;&gt;&gt; state = details['AdministrativeAreaName']
&gt;&gt;&gt; zipcode = details['Locality']['PostalCode']['PostalCodeNumber']
&gt;&gt;&gt; print ', '.join((street, city, state, zipcode))
350 5th Ave, Brooklyn, NY, 11215
</snippet></ROW><ROW><id>3663777</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>3663785</id><snippet>self.log = []
</snippet></ROW><ROW><id>3663785</id><snippet>list = obj.getLog()
</snippet></ROW><ROW><id>3663785</id><snippet>list</snippet></ROW><ROW><id>3663785</id><snippet>def getLog(self):
    return list(self.log)
</snippet></ROW><ROW><id>3663785</id><snippet>def getLog(self):
    return tuple(self.log)
</snippet></ROW><ROW><id>3664117</id><snippet>re.DOTALL</snippet></ROW><ROW><id>3664117</id><snippet>a = re.search('&lt;div.+?&lt;\/html&gt;', text, re.DOTALL)
</snippet></ROW><ROW><id>3664384</id><snippet>void foo(const char *firstArg, ...) {
    va_list argList;
    va_start(argList, firstArg);

    vprintf(firstArg, argList);

    va_end(argList);
}
</snippet></ROW><ROW><id>3664396</id><snippet>fabric_class_to_function_magic</snippet></ROW><ROW><id>3664396</id><snippet>    tc = TestClass()
    func = getattr(tc, method_name)

    # add the new function to the current module
    setattr(module_obj, method_name, func)
</snippet></ROW><ROW><id>3664410</id><snippet>url = '%s%s/?api_key=%s&amp;method=%s&amp;%s'% \
      (HOST, API, API_KEY, method, _get_auth_url_suffix(method, auth, params))
payload = '%s' % (urlencode(params))
</snippet></ROW><ROW><id>3664550</id><snippet>import sys
from PyQt4 import QtGui
import sip

class SomeScene(QtGui.QGraphicsScene):
    def __init__(self, parent = None):
        QtGui.QGraphicsScene.__init__(self, parent)

        pixmap = QtGui.QPixmap('someImage')
        item = QtGui.QGraphicsPixmapItem(pixmap)
        self.addItem(item)


class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent = None):
        QtGui.QMainWindow.__init__(self, parent)

        # This scene will be destroyed because it is local.
        tmpScene = SomeScene()
        tmpScene.destroyed.connect(self.onSceneDestroyed)

        self.scene = SomeScene()
        view = QtGui.QGraphicsView(self.scene)

        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(view)

        mainWidget = QtGui.QWidget()
        mainWidget.setLayout(hbox)

        self.setCentralWidget(mainWidget)

    def onSceneDestroyed(self, obj):
        print 'tmpScene destroyed'

app = QtGui.QApplication(sys.argv)
mainWindow = MainWindow()
mainWindow.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>3664555</id><snippet>&lt;page_id&gt;/feed</snippet></ROW><ROW><id>3664685</id><snippet>optional-requirements.txt</snippet></ROW><ROW><id>3664685</id><snippet>requirements.txt</snippet></ROW><ROW><id>3664685</id><snippet>pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>3664685</id><snippet>pip install -U -r requirements.txt
</snippet></ROW><ROW><id>3664685</id><snippet>-U</snippet></ROW><ROW><id>3664685</id><snippet>pip</snippet></ROW><ROW><id>3664685</id><snippet>-r</snippet></ROW><ROW><id>3664788</id><snippet>FieldStorage</snippet></ROW><ROW><id>3664788</id><snippet>CGI</snippet></ROW><ROW><id>3664788</id><snippet>WSGI</snippet></ROW><ROW><id>3664788</id><snippet>wsgi_input</snippet></ROW><ROW><id>3664788</id><snippet>wsgi.input</snippet></ROW><ROW><id>3665324</id><snippet>from google.appengine.ext.webapp.util import run_wsgi_app
import web
...
app = web.application(urls, globals())

def main():

    application = app.wsgifunc()
    run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3665449</id><snippet>from operator import itemgetter

names = set(d['name'] for d in result)
uniq = []
for name in names:
    scores = [res for res in result if res['name'] == name]
    uniq.append(max(scores, key=itemgetter('score')))
</snippet></ROW><ROW><id>3665604</id><snippet>print(playerguess)
print(states[guess])
</snippet></ROW><ROW><id>3665604</id><snippet>for line in statefile:
    (state, capitol) = line.strip().split(",")
    states[state] = capitol
statefile.close()
</snippet></ROW><ROW><id>3666278</id><snippet>items()</snippet></ROW><ROW><id>3666278</id><snippet>keys()</snippet></ROW><ROW><id>3666278</id><snippet>values()</snippet></ROW><ROW><id>3666278</id><snippet>iteritems()</snippet></ROW><ROW><id>3666278</id><snippet>iterkeys()</snippet></ROW><ROW><id>3666278</id><snippet>itervalues()</snippet></ROW><ROW><id>3666278</id><snippet>dict</snippet></ROW><ROW><id>3667443</id><snippet>any('cow' in v for v in animals.values())
</snippet></ROW><ROW><id>3667443</id><snippet>def in_values(s, d):
    """Does `s` appear in any of the values in `d`?"""
    for v in d.values():
        if s in v:
            return True
    return False

in_values('cow', animals)
</snippet></ROW><ROW><id>3667711</id><snippet>&gt;&gt;&gt; lst = [(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13, 14), (15, 16), (17, 18)]
&gt;&gt;&gt; [lst[i:i+4] for i in xrange(0, len(lst), 4)]
[[(1, 2), (3, 4), (5, 6), (7, 8)], [(9, 10), (11, 12), (13, 14), (15, 16)], [(17, 18)]]
</snippet></ROW></DATA>