<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>4147427</id><snippet>[int(x[0]) for x in cursor.fetchall()]
</snippet></ROW><ROW><id>4147752</id><snippet>def dict_gen(curs):
    ''' From Python Essential Reference by David Beazley
    '''
    import itertools
    field_names = [d[0].lower() for d in curs.description]
    while True:
        rows = curs.fetchmany()
        if not rows: return
        for row in rows:
            yield dict(itertools.izip(field_names, row))
</snippet></ROW><ROW><id>4147752</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect(':memory:')
&gt;&gt;&gt; c = conn.cursor()
&gt;&gt;&gt; c.execute('create table test (col1,col2)')
&lt;sqlite3.Cursor object at 0x011A96A0&gt;
&gt;&gt;&gt; c.execute("insert into test values (1,'foo')")
&lt;sqlite3.Cursor object at 0x011A96A0&gt;
&gt;&gt;&gt; c.execute("insert into test values (2,'bar')")
&lt;sqlite3.Cursor object at 0x011A96A0&gt;
# `dict_gen` function code here
&gt;&gt;&gt; [r for r in dict_gen(c.execute('select * from test'))]
[{'col2': u'foo', 'col1': 1}, {'col2': u'bar', 'col1': 2}]
</snippet></ROW><ROW><id>4147974</id><snippet>subprocess</snippet></ROW><ROW><id>4147994</id><snippet>email_lines = []
for row in result:
    line = do_something_with(row)
    email_lines.append(line)
email_body = '\n'.join*(email_lines)
</snippet></ROW><ROW><id>4148061</id><snippet>re.sub(r'\[\[[^:\]]+:', '[[', string)
</snippet></ROW><ROW><id>4148061</id><snippet>[^:\]]</snippet></ROW><ROW><id>4148061</id><snippet>.</snippet></ROW><ROW><id>4148281</id><snippet>CASE WHEN FIELD_NAME IS NULL THEN 0 ELSE FIELD_NAME END,
</snippet></ROW><ROW><id>4148281</id><snippet>COALESCE(FIELD_NAME, 0)
</snippet></ROW><ROW><id>4148281</id><snippet>IFNULL(FIELD_NAME, 0)
</snippet></ROW><ROW><id>4148281</id><snippet>ydata[i] = [(int(x[0]) if x[0] != NULL else 0) for x in cursor.fetchall()]
</snippet></ROW><ROW><id>4148281</id><snippet>def field_to_int(val):
    if val == NULL:
        return 0
    else:
        return int(val)

for i in Selection: 
    cursor.execute(Query)
    ydata[i] = [field_to_int(x[0]) for x in cursor.fetchall()]
</snippet></ROW><ROW><id>4148440</id><snippet>import numpy as np

A=np.arange(16).reshape((4,4))

def neighbors(arr,x,y,n=3):
    ''' Given a 2D-array, returns an nxn array whose "center" element is arr[x,y]'''
    arr=np.roll(np.roll(arr,shift=-x+1,axis=0),shift=-y+1,axis=1)
    return arr[:n,:n]

print(A)
# [[ 0  1  2  3]
#  [ 4  5  6  7]
#  [ 8  9 10 11]
#  [12 13 14 15]]

print(neighbors(A,0,0))
# [[15 12 13]
#  [ 3  0  1]
#  [ 7  4  5]]

print(neighbors(A,1,0))
# [[ 3  0  1]
#  [ 7  4  5]
#  [11  8  9]]
</snippet></ROW><ROW><id>4148523</id><snippet>map</snippet></ROW><ROW><id>4148523</id><snippet>filter</snippet></ROW><ROW><id>4148523</id><snippet>for</snippet></ROW><ROW><id>4148523</id><snippet>for x in {}</snippet></ROW><ROW><id>4148523</id><snippet>itertools</snippet></ROW><ROW><id>4148523</id><snippet>list</snippet></ROW><ROW><id>4148523</id><snippet>dict</snippet></ROW><ROW><id>4148661</id><snippet>convert()</snippet></ROW><ROW><id>4148661</id><snippet>md.convert(file)</snippet></ROW><ROW><id>4148661</id><snippet>md.convert(open(file).read())</snippet></ROW><ROW><id>4148661</id><snippet>import markdown as m

print "Markdown version: ", m.version
file = "file.md"
md = m.Markdown(extensions=['meta']) # doesn't complain

print "Registered extensions: ", md.registeredExtensions
print "Preprocessors:", md.preprocessors.keys()
text = open(file).read()
try:
    print md.convert(text)
except AttributeError as a:
    print "Error: ", a
print "Meta: ", md.Meta
</snippet></ROW><ROW><id>4148661</id><snippet>Markdown version:  2.1.0
Registered extensions:  []
Preprocessors: ['meta', 'html_block', 'reference']
&lt;p&gt;Simple md test
&lt;img alt="Chaleur" src="../content/chaleur.jpg" /&gt;&lt;/p&gt;
Meta:  {u'date': [u'2010-07-11'], u'author': [u'Gui13'], u'title': [u'Chaleur']}
</snippet></ROW><ROW><id>4148890</id><snippet>&gt;&gt;&gt; from bitstring import BitArray
&gt;&gt;&gt; a = BitArray(24)          # 24 zero bits
&gt;&gt;&gt; a.uint = 2**24/11         # set the unsigned integer propery
&gt;&gt;&gt; a.bin                     # get the binary propery
'0b000101110100010111010001'
</snippet></ROW><ROW><id>4148890</id><snippet>&gt;&gt;&gt; a.uint /= 2
&gt;&gt;&gt; a.bin
'0b000010111010001011101000'
&gt;&gt;&gt; list(a.findall('0b1011'))
[4, 14]
&gt;&gt;&gt; a *= 2     # concatenation
&gt;&gt;&gt; a.bin
'0b000010111010001011101000000010111010001011101000'
&gt;&gt;&gt; a.replace('0b00001', '0xe')
2              # 2 replacements made
&gt;&gt;&gt; a.bin
'0b1110011101000101110100011100111010001011101000'
</snippet></ROW><ROW><id>4148985</id><snippet>import csv

bottle_list = []

# Read all data from the csv file.
with open('a.csv', 'rb') as b:
    bottles = csv.reader(b)
    bottle_list.extend(bottles)

# data to override in the format {line_num_to_override:data_to_write}. 
line_to_override = {1:['e', 'c', 'd'] }

# Write data to the csv file and replace the lines in the line_to_override dict.
with open('a.csv', 'wb') as b:
    writer = csv.writer(b)
    for line, row in enumerate(bottle_list):
         data = line_to_override.get(line, row)
         writer.writerow(data)
</snippet></ROW><ROW><id>4149008</id><snippet>if strg.startswith("0b1"):
   strg = strg[3:]
</snippet></ROW><ROW><id>4149231</id><snippet>log.debug("Some message: a=%s b=%s", a, b)
</snippet></ROW><ROW><id>4149231</id><snippet>log.debug("Some message: a=%s b=%s" % (a, b))
</snippet></ROW><ROW><id>4149231</id><snippet>class lazyjoin:
    def __init__(self, s, items):
        self.s = s
        self.items = items
    def __str__(self):
        return self.s.join(self.items)
</snippet></ROW><ROW><id>4149231</id><snippet>logger.info('Stupid log message %s', lazyjoin(' ', (str(i) for i in range(20))))
</snippet></ROW><ROW><id>4149231</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; logging.basicConfig(level=logging.INFO)
&gt;&gt;&gt; logger = logging.getLogger("log")
&gt;&gt;&gt; class DoNotStr:
...     def __str__(self):
...         raise AssertionError("the code should not have called this")
... 
&gt;&gt;&gt; logger.info('Message %s', DoNotStr())
Traceback (most recent call last):
...
AssertionError: the code should not have called this
&gt;&gt;&gt; logger.debug('Message %s', DoNotStr())
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4149444</id><snippet>wget http://www.python.org/ftp/python/2.7/Python-2.7.tgz</snippet></ROW><ROW><id>4149444</id><snippet>wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz # Download
tar xvfz Python-2.7.3.tgz # unzip
cd Python-2.7.3 # go into directory
./configure
make # build
su # or 'sudo su' if there is no root user
make altinstall
</snippet></ROW><ROW><id>4149539</id><snippet>'\n'.join(('\t'.join([field.strip().center(20) for
    field in [str(tup).center(20) for
        tup in rowTuple]])) for rowTuple in listOfRows)
</snippet></ROW><ROW><id>4149571</id><snippet>&lt;ref&gt;...&lt;/ref&gt;</snippet></ROW><ROW><id>4149571</id><snippet>re.sub(r'&lt;ref&gt;.+&lt;/ref&gt;', '', '...and so on&lt;ref&gt;&lt;/ref&gt;.')
</snippet></ROW><ROW><id>4149571</id><snippet>'.' (Dot.) In the default mode, this matches any character except a newline.
    If the DOTALL flag has been specified, this matches any character including
    a newline.
'*' Causes the resulting RE to match 0 or more repetitions of the preceding
    RE, as many repetitions as are possible. ab* will match ‘a’, ‘ab’, or ‘a’
    followed by any number of ‘b’s.
'+' Causes the resulting RE to match 1 or more repetitions of the preceding
    RE. ab+ will match ‘a’ followed by any non-zero number of ‘b’s; it will
    not match just ‘a’.
'?' Causes the resulting RE to match 0 or 1 repetitions of the preceding RE.
    ab? will match either ‘a’ or ‘ab’.
</snippet></ROW><ROW><id>4149804</id><snippet>map(lambda x: callable(getattr(object, x)), dir(object))
</snippet></ROW><ROW><id>4150246</id><snippet>import asyncore, socket

class Client(asyncore.dispatcher_with_send):
    def __init__(self, host, port, message):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect((host, port))
        self.out_buffer = message

    def handle_close(self):
        self.close()

    def handle_read(self):
        print 'Received', self.recv(1024)
        self.close()

c = Client('', 5007, 'Hello, world')
asyncore.loop()
</snippet></ROW><ROW><id>4150322</id><snippet>logging</snippet></ROW><ROW><id>4150322</id><snippet>getLogger()</snippet></ROW><ROW><id>4150322</id><snippet>logging.getLogger('debug0.x')</snippet></ROW><ROW><id>4150322</id><snippet>x</snippet></ROW><ROW><id>4150322</id><snippet>debug0</snippet></ROW><ROW><id>4150322</id><snippet>basicConfig()</snippet></ROW><ROW><id>4150483</id><snippet>itertools.product</snippet></ROW><ROW><id>4150483</id><snippet>for li, lj, lk in itertools.product(cntr1, cntr2, cntr3):
    print li, lj, lk
</snippet></ROW><ROW><id>4150557</id><snippet>argmax()</snippet></ROW><ROW><id>4150557</id><snippet>print a.argmax(axis=1)
array([2, 0, 1])
</snippet></ROW><ROW><id>4150582</id><snippet>for</snippet></ROW><ROW><id>4150582</id><snippet>rem</snippet></ROW><ROW><id>4150582</id><snippet>num = input()
for x in xrange(1, num):
    if (num % x) == 0:
        print fact
</snippet></ROW><ROW><id>4150582</id><snippet>xrange(x, y)</snippet></ROW><ROW><id>4150693</id><snippet>source bin/activate
</snippet></ROW><ROW><id>4150693</id><snippet>#! /bin/bash    
cd my/virtual/env/root/dir
source bin/activate

# virtualenv is now active, which means your PATH has been modified.  Don't try to run python from /usr/bin/python, just run "python" and let the PATH figure out which version to run (based on what your virtualenv has configured)

python myScript.py
</snippet></ROW><ROW><id>4150847</id><snippet>SITE_ID</snippet></ROW><ROW><id>4150857</id><snippet>s = re.sub(r"\d+", "", s)
s = re.sub(r"(\s)\s*", "\1", s)
</snippet></ROW><ROW><id>4150857</id><snippet>s = re.sub(r"\d+", "", s)
s = re.sub(r"\s+", " ", s)
</snippet></ROW><ROW><id>4150951</id><snippet>items.sort(lambda x, y: locale.strcoll(x['name'], y['name']))
</snippet></ROW><ROW><id>4150951</id><snippet>items.sort(lambda x, y: cmp(x['transper'], y['transper']))
</snippet></ROW><ROW><id>4150951</id><snippet>cmp</snippet></ROW><ROW><id>4150951</id><snippet>transper</snippet></ROW><ROW><id>4150951</id><snippet>int</snippet></ROW><ROW><id>4150951</id><snippet>nice_percentage</snippet></ROW><ROW><id>4150951</id><snippet>add_percentages</snippet></ROW><ROW><id>4150951</id><snippet>x</snippet></ROW><ROW><id>4150951</id><snippet>y</snippet></ROW><ROW><id>4150951</id><snippet>dictsort</snippet></ROW><ROW><id>4150951</id><snippet>{% for item in languages|dictsort:"transper" %}
</snippet></ROW><ROW><id>4150951</id><snippet>dictsortreversed</snippet></ROW><ROW><id>4150981</id><snippet>fetchall</snippet></ROW><ROW><id>4150981</id><snippet>cursor.fetchall() 

        Fetch all (remaining) rows of a query result, returning
        them as a sequence of sequences (e.g. a list of tuples).
        Note that the cursor's arraysize attribute can affect the
        performance of this operation.

cursor.fetchone() 

        Fetch the next row of a query result set, returning a
        single sequence, or None when no more data is
        available. [6]
</snippet></ROW><ROW><id>4151183</id><snippet> d = {'abc': {(0,0,0): 1.2, (0,0,1): 1.3}}
</snippet></ROW><ROW><id>4151183</id><snippet>&gt;&gt;&gt; d['abc'][0,0,1]
1.3
</snippet></ROW><ROW><id>4151183</id><snippet>d = {} #start with empty dictionary
d['abc'] = {} #insert a new string key into outer dict
d['abc'][0,3,3] = 1.3 #insert new value into inner dict
d['abc'][5,3,3] = 2.4 #insert another value into inner dict
d['def'] = {} #insert another string key into outer dict
d['def'][1,1,1] = 4.4
#...
&gt;&gt;&gt; d
{'abc': {(0, 3, 3): 1.3, (5, 3, 3): 2.4}, 'def': {(1, 1, 1): 4.4}}
</snippet></ROW><ROW><id>4151183</id><snippet>import collections
d = collections.defaultdict(dict)   #The first parameter is the constructor of values for keys that don't exist
d['abc'][0,3,3] = 1.3
d['abc'][5,3,3] = 2.4
d['def'][1,1,1] = 4.4
#...
&gt;&gt;&gt; d
defaultdict(&lt;type 'dict'&gt;, {'abc': {(0, 3, 3): 1.3, (5, 3, 3): 2.4}, 'def': {(1, 1, 1): 4.4}})
</snippet></ROW><ROW><id>4151251</id><snippet>import numpy as np

a=np.mat('4 3; 2 1')
b=np.mat('1 2; 3 4')
print(a)
# [[4 3]
#  [2 1]]
print(b)
# [[1 2]
#  [3 4]]
print(a*b)
# [[13 20]
#  [ 5  8]]
</snippet></ROW><ROW><id>4151251</id><snippet>.T</snippet></ROW><ROW><id>4151251</id><snippet>.H</snippet></ROW><ROW><id>4151251</id><snippet>.I</snippet></ROW><ROW><id>4151251</id><snippet>c=np.array([[4, 3], [2, 1]])
d=np.array([[1, 2], [3, 4]])
print(c*d)
# [[4 6]
#  [6 4]]
</snippet></ROW><ROW><id>4151251</id><snippet>print(np.dot(c,d))
# [[13 20]
#  [ 5  8]]
</snippet></ROW><ROW><id>4151251</id><snippet>**</snippet></ROW><ROW><id>4151251</id><snippet>print(a**2)
# [[22 15]
#  [10  7]]
print(c**2)
# [[16  9]
#  [ 4  1]]
</snippet></ROW><ROW><id>4151251</id><snippet>a</snippet></ROW><ROW><id>4151251</id><snippet>a**2</snippet></ROW><ROW><id>4151251</id><snippet>a*a</snippet></ROW><ROW><id>4151251</id><snippet>c</snippet></ROW><ROW><id>4151251</id><snippet>c**2</snippet></ROW><ROW><id>4151251</id><snippet>np.asmatrix</snippet></ROW><ROW><id>4151251</id><snippet>np.asarray</snippet></ROW><ROW><id>4151280</id><snippet>import pygame, sys
from pygame.locals import *

#assign display window dimensions
winwidth = 400
winheight = 700

#number of rows, number of colums
numrows = 10
numcols = 10

#Keeping brick size proportionate to the window size
brickwidth = winwidth / numcols 
brickheight = winheight / numcols 

#initialize pygame
pygame.init()
#Set display window width, height
windowSurface = pygame.display.set_mode((winwidth, winheight), 0, 0)

#Colours
blue = [0, 0, 255]  
green = [0, 255, 0]  
yellow = [255, 255, 0]
red = [255, 0, 0]  
white = [255, 255, 255]

colours = [white, white, red, red, green, green, yellow, yellow, blue, blue]

class Setup():
    def __init__(self):
        #Setup nest for loop to generate 2d array of blocks.
        for y in range(0, numrows):
            for x in range(0, numcols):
                #Using modulo to get the different colours for rows, we use y as the changing key
                col_index = y % len(colours)
                pygame.draw.rect(windowSurface, colours[col_index], (x*brickwidth, y*brickheight, brickwidth, brickheight))

class Main():
    Setup()
    pygame.display.update()
</snippet></ROW><ROW><id>4151324</id><snippet>search_fields</snippet></ROW><ROW><id>4151324</id><snippet>search_fields = ['foreign_key__related_fieldname']
</snippet></ROW><ROW><id>4151324</id><snippet>search_fields = ['user__email']
</snippet></ROW><ROW><id>4151324</id><snippet>search_fields = ['person__name']
</snippet></ROW><ROW><id>4151368</id><snippet>collections.deque</snippet></ROW><ROW><id>4151368</id><snippet>maxlen</snippet></ROW><ROW><id>4151368</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.deque(maxlen=10)
&gt;&gt;&gt; d
deque([], maxlen=10)
&gt;&gt;&gt; for i in xrange(20):
...     d.append(i)
... 
&gt;&gt;&gt; d
deque([10, 11, 12, 13, 14, 15, 16, 17, 18, 19], maxlen=10)
</snippet></ROW><ROW><id>4151368</id><snippet>deque</snippet></ROW><ROW><id>4151682</id><snippet>defaultdict</snippet></ROW><ROW><id>4151682</id><snippet>list_as_dict_key['abc', 7, 8]</snippet></ROW><ROW><id>4151811</id><snippet>
jcomeau@intrepid:/usr/src/unternet$ python
Python 2.6.6 (r266:84292, Oct  9 2010, 11:40:09) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import django
&gt;&gt;&gt; django.get_version()
'1.2.3'
</snippet></ROW><ROW><id>4152016</id><snippet>gaussian_kde</snippet></ROW><ROW><id>4152016</id><snippet>gaussian_kde</snippet></ROW><ROW><id>4152016</id><snippet>covariance_factor</snippet></ROW><ROW><id>4152016</id><snippet>gaussian_kde</snippet></ROW><ROW><id>4152016</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import gaussian_kde
data = [1.5]*7 + [2.5]*2 + [3.5]*8 + [4.5]*3 + [5.5]*1 + [6.5]*8
density = gaussian_kde(data)
xs = np.linspace(0,8,200)
density.covariance_factor = lambda : .25
density._compute_covariance()
plt.plot(xs,density(xs))
plt.show()
</snippet></ROW><ROW><id>4152016</id><snippet>gaussian_kde</snippet></ROW><ROW><id>4152016</id><snippet>covariance_factor</snippet></ROW><ROW><id>4152016</id><snippet>_compute_covariance</snippet></ROW><ROW><id>4152200</id><snippet>app.yaml</snippet></ROW><ROW><id>4152200</id><snippet>main.py</snippet></ROW><ROW><id>4152200</id><snippet>google_appengine</snippet></ROW><ROW><id>4152200</id><snippet>.bashrc</snippet></ROW><ROW><id>4152200</id><snippet>python2.5</snippet></ROW><ROW><id>4152244</id><snippet>configuration</snippet></ROW><ROW><id>4152244</id><snippet>class container(object):
    def __init__(self):
        self.name = 'container'

        self.configuration = {'var1': 'var1',
                             'var2': 'var2'}
</snippet></ROW><ROW><id>4152244</id><snippet>configuration</snippet></ROW><ROW><id>4152244</id><snippet>containter.__dict__</snippet></ROW><ROW><id>4152244</id><snippet>c.configuration</snippet></ROW><ROW><id>4152244</id><snippet>container.__dict__['configuration']</snippet></ROW><ROW><id>4152244</id><snippet>c</snippet></ROW><ROW><id>4152244</id><snippet>c.foo = x</snippet></ROW><ROW><id>4152244</id><snippet>foo</snippet></ROW><ROW><id>4152244</id><snippet>c.__dict__</snippet></ROW><ROW><id>4152244</id><snippet>container.__dict__</snippet></ROW><ROW><id>4152244</id><snippet>c = container()
c.configuration = x
</snippet></ROW><ROW><id>4152244</id><snippet>c.configuration</snippet></ROW><ROW><id>4152244</id><snippet>x</snippet></ROW><ROW><id>4152244</id><snippet>name</snippet></ROW><ROW><id>4152244</id><snippet>=</snippet></ROW><ROW><id>4152244</id><snippet>setattr</snippet></ROW><ROW><id>4152244</id><snippet>__dict__</snippet></ROW><ROW><id>4152389</id><snippet>list(itertools.islice(it, 0, n, 1))
</snippet></ROW><ROW><id>4152986</id><snippet>__file__</snippet></ROW><ROW><id>4152986</id><snippet>os.path.basename(__file__)</snippet></ROW><ROW><id>4153314</id><snippet>import threading
import time

class TimerClass(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.event = threading.Event()

    def run(self):
        while not self.event.is_set():
            print "do something"
            self.event.wait( 1 )

    def stop(self):
        self.event.set()

tmr = TimerClass()
tmr.start()

time.sleep( 10 )

tmr.stop()
</snippet></ROW><ROW><id>4153344</id><snippet>if not (u0 &lt;= u &lt;= u0+step):
    u0 = u0+ step # change the condition until it is satisfied
else:
    do sth. # condition is satisfied
</snippet></ROW><ROW><id>4153344</id><snippet>while not (u0 &lt;= u &lt;= u0+step):
   u0 = u0+ step # change the condition until it is satisfied
do sth. # condition is satisfied
</snippet></ROW><ROW><id>4153901</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getloadavg()
(1.1200000000000001, 1.0600000000000001, 0.79000000000000004)
</snippet></ROW><ROW><id>4154298</id><snippet>from datetime import datetime,timedelta

# Convert the timestamps to datetime objects
usetimes = sorted(datetime.strptime(d, '%Y-%m-%d %H:%M:%S') for d in timestamp)

# Set the idle time to compare with later
idletime = timedelta(minutes = 30)

# Start the running total with a timedelta of 0
usage = timedelta()
last = usetimes[0]

for d in usetimes[1:]:
    delta = d - last
    if delta &lt; idletime:
        usage += delta
    last = d

print "total usage:",usage
</snippet></ROW><ROW><id>4154298</id><snippet>sum()</snippet></ROW><ROW><id>4154298</id><snippet>zip()</snippet></ROW><ROW><id>4154298</id><snippet>from datetime import datetime,timedelta
usetimes = sorted(datetime.strptime(d, '%Y-%m-%d %H:%M:%S') for d in timestamp)
idletime = timedelta(minutes = 30)
usage = sum((x - y for x,y in zip(usetimes[1:],usetimes[:-1]) if x - y &lt; idletime),timedelta())
print "total usage:", usage
</snippet></ROW><ROW><id>4154298</id><snippet>izip</snippet></ROW><ROW><id>4154298</id><snippet>itertools</snippet></ROW><ROW><id>4154298</id><snippet>zip</snippet></ROW><ROW><id>4154391</id><snippet>\n</snippet></ROW><ROW><id>4154391</id><snippet>\r\n</snippet></ROW><ROW><id>4154391</id><snippet>'wb'</snippet></ROW><ROW><id>4154734</id><snippet>sorted()</snippet></ROW><ROW><id>4154734</id><snippet>newlist = PySequence_List(seq);
</snippet></ROW><ROW><id>4154734</id><snippet>newlist</snippet></ROW><ROW><id>4154988</id><snippet>y = ((x / 99.0) * 2) - 1
</snippet></ROW><ROW><id>4155145</id><snippet>csv</snippet></ROW><ROW><id>4155145</id><snippet>zip()</snippet></ROW><ROW><id>4155145</id><snippet>&gt;&gt;&gt; l = [('Result_1', 'Result_2', 'Result_3', 'Result_4'), (1, 2, 3, 4), (5, 6, 7, 8)]
&gt;&gt;&gt; zip(*l)
[('Result_1', 1, 5), ('Result_2', 2, 6), ('Result_3', 3, 7), ('Result_4', 4, 8)]
</snippet></ROW><ROW><id>4155232</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *


class AppForm(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)
        self.create_main_frame()       

    def create_main_frame(self):        
        page = QWidget()        

        self.button = QPushButton('joy', page)
        self.edit1 = QLineEdit()
        self.edit2 = QLineEdit()

        vbox1 = QVBoxLayout()
        vbox1.addWidget(self.edit1)
        vbox1.addWidget(self.edit2)
        vbox1.addWidget(self.button)
        page.setLayout(vbox1)
        self.setCentralWidget(page)

        self.connect(self.button, SIGNAL("clicked()"), self.clicked)

    def clicked(self):
        QMessageBox.about(self, "My message box", "Text1 = %s, Text2 = %s" % (
            self.edit1.text(), self.edit2.text()))



if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    form = AppForm()
    form.show()
    app.exec_()
</snippet></ROW><ROW><id>4155280</id><snippet>&gt;&gt;&gt; def found_string(str1, str2):
    return ' ' + str1 + ' ' in ' ' + str2 + ' '

&gt;&gt;&gt; found_string("ADVANCE", "ADVANCED BUSINESS EQUIPMENT LTD")
False
&gt;&gt;&gt; found_string("ADVANCED", "ADVANCED BUSINESS EQUIPMENT LTD")
True
&gt;&gt;&gt; found_string("ADDLESHAW GODDARD", "ADDLESHAW GODDARD LLP")
True
&gt;&gt;&gt; found_string('Foo Bar', 'Bar Foo')
False
&gt;&gt;&gt; found_string('yard yard foo', 'backyard yard foo')
False
&gt;&gt;&gt; found_string('yard yard foo', 'yard backyard yard foo')
False
&gt;&gt;&gt; found_string('yard\tfoo', 'yard foo bar')
False
&gt;&gt;&gt; found_string('bar foo', 'foo bar x')
False
</snippet></ROW><ROW><id>4155663</id><snippet>__init__</snippet></ROW><ROW><id>4155663</id><snippet>txtLastName</snippet></ROW><ROW><id>4155663</id><snippet>__init__</snippet></ROW><ROW><id>4155663</id><snippet>self.</snippet></ROW><ROW><id>4155663</id><snippet>    self.txtFirstName = QtGui.QLineEdit('', self)
    self.txtFirstName.setGeometry(35, 35, 150, 20)

    self.txtLastName = QtGui.QLineEdit('', self)
    self.txtLastName.setGeometry(35, 60, 150, 20)
</snippet></ROW><ROW><id>4155868</id><snippet>re.findall(r'AB.+?(?=AD)', text, re.DOTALL)
</snippet></ROW><ROW><id>4155868</id><snippet>re.DOTALL</snippet></ROW><ROW><id>4155868</id><snippet>(?=AD)</snippet></ROW><ROW><id>4155868</id><snippet>AD</snippet></ROW><ROW><id>4155868</id><snippet>AD</snippet></ROW><ROW><id>4155868</id><snippet>rstrip()</snippet></ROW><ROW><id>4155943</id><snippet>&gt;&gt;&gt; a1 = np.array([[1,1,1],[1,1,1],[1,1,1]])
&gt;&gt;&gt; a2 = np.array([[2,2,2],[2,2,2],[2,2,2]])
&gt;&gt;&gt; a3 = np.array([[3,3,3],[3,3,3],[3,3,3]])
&gt;&gt;&gt; import scipy.linalg
&gt;&gt;&gt; scipy.linalg.block_diag(a1, a2, a3)
array([[1, 1, 1, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 0, 0, 0],
       [0, 0, 0, 2, 2, 2, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 3, 3, 3],
       [0, 0, 0, 0, 0, 0, 3, 3, 3],
       [0, 0, 0, 0, 0, 0, 3, 3, 3]])
&gt;&gt;&gt; r = np.array([[1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0],[1,1,1,0,0,0,0,0,0], [0,0,0,2,2,2,0,0,0],[0,0,0,2,2,2,0,0,0],[0,0,0,2,2,2,0,0,0],[0,0,0,0,0,0,3,3,3],[0,0,0,0,0,0,3,3,3],[0,0,0,0,0,0,3,3,3]])
&gt;&gt;&gt; (scipy.linalg.block_diag(a1, a2, a3)  == r).all()
True
</snippet></ROW><ROW><id>4157080</id><snippet>MyProject/
    setup.py
    my_package.py
</snippet></ROW><ROW><id>4157080</id><snippet>from setuptools.import setup
setup(name='MyProject',
      version='0.1',
      author='Your Name',
      author_email='your@email',
      license='MIT',
      description='Example package that says hello',
      py_modules=['my_package'])
</snippet></ROW><ROW><id>4157080</id><snippet>MyProject/
    MANIFEST.in
    README.txt
    setup.py
    my_package.py
</snippet></ROW><ROW><id>4157080</id><snippet>include *.txt
</snippet></ROW><ROW><id>4157080</id><snippet>from setuptools.import setup
readme = open('README.txt').read()
setup(name='MyProject',
      ...
      description='Example package that says hello',
      long_description=readme,
      ...)
</snippet></ROW><ROW><id>4157080</id><snippet>python setup.py --long-description | rst2html
</snippet></ROW><ROW><id>4157080</id><snippet>__init__ py</snippet></ROW><ROW><id>4157080</id><snippet>MyProject/
    MANIFEST.in
    README.txt
    setup.py
    my_package/
        __init__.py
        some_module.py
</snippet></ROW><ROW><id>4157080</id><snippet>from setuptools.import setup, find_packages
readme = open('README.txt').read()
setup(name='MyProject',
      version='0.2',
      author='Your Name',
      author_email='your@email',
      license='MIT',
      description='Example package that says hello',
      long_description=readme,
      packages=find_packages())
</snippet></ROW><ROW><id>4157080</id><snippet>python setup.py sdist register upload
</snippet></ROW><ROW><id>4157080</id><snippet>pip install MyProject
</snippet></ROW><ROW><id>4157080</id><snippet>name</snippet></ROW><ROW><id>4157109</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>4157109</id><snippet>from collections import defaultdict
characterDict = defaultdict(int)

def putEncounteredCharactersInDictionary(lineStr):
    for character in lineStr:
        characterDict[character] += 1
</snippet></ROW><ROW><id>4157109</id><snippet>def sortCharacterDictionary(characterDict):
    return sorted(characterDict.iteritems(), key=itemgetter(1))
</snippet></ROW><ROW><id>4157109</id><snippet>def inverseSortedCharacterDictionary(sortedCharDict):
    return dict((v, k) for k, v in sortedCharDict.iteritems())
</snippet></ROW><ROW><id>4157109</id><snippet>inverseSortedCharacterDictionary</snippet></ROW><ROW><id>4157109</id><snippet>invertedDict</snippet></ROW><ROW><id>4157109</id><snippet>characters = defaultdict(int)

def countCharacters(string):
    for ch in string:
        characters[ch] += 1

def sortedCharacters(characters):
    return sorted(characters.iteritems(), key=itemgetter(1))

def invertedDict(d):
    return dict((v, k) for k, v in d.iteritems())
</snippet></ROW><ROW><id>4157109</id><snippet>f = open('funkymess.txt', 'r')

for line in f:
    countCharacters(line.rstrip('\n'))

f.close()

print sortedCharacters(characters)[0]
</snippet></ROW><ROW><id>4157109</id><snippet>#!/usr/bin/env python

from operator import itemgetter
from collections import defaultdict

characters = defaultdict(int)

f = open('funkymess.txt','r')

for line in f:
    for ch in line.rstrip('\n'):
        characters[ch] += 1

f.close()

print sorted(characters.iteritems(), key=itemgetter(1))[0]
</snippet></ROW><ROW><id>4157244</id><snippet>words = ((c_char * 1024) * 8)()
</snippet></ROW><ROW><id>4157321</id><snippet>slice</snippet></ROW><ROW><id>4157479</id><snippet>.iteritems()</snippet></ROW><ROW><id>4157479</id><snippet>def partial_dict_index(dicts, dict_part):
    for i, current_dict in enumerate(dicts):
        # if this dict has all keys required and the values match
        if all(key in current_dict and current_dict[key] == val 
                for key, val in dict_part.items()):
            return i
    raise ValueError("...")
</snippet></ROW><ROW><id>4157721</id><snippet>#!/usr/bin/python

from datetime import datetime
import time

your_time = 1.28946608161e+12

print time.strftime("%a, %d %b %Y %H:%M:%S +0000",
                    datetime.fromtimestamp(your_time/1000).timetuple()
                    )
</snippet></ROW><ROW><id>4158033</id><snippet>&gt;&gt;&gt; import win32file
&gt;&gt;&gt; win32file.GetVolumeNameForVolumeMountPoint("C:\\")
'\\\\?\\Volume{50c800a9-c62e-11df-b5bb-806e6f6e6963}\\'
&gt;&gt;&gt; win32file.GetVolumeNameForVolumeMountPoint("K:\\")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
pywintypes.error: (87, 'GetVolumeNameForVolumeMountPoint', 
                       'The parameter is incorrect.')
</snippet></ROW><ROW><id>4158086</id><snippet>xdim, ydim = 10, 10
xblocksize, yblocksize = 5, 5
for xblock in range(0, xdim, xblocksize):
   for yblock in range(0, ydim, yblocksize):
      for x in range(xblock, xblock+xblocksize):
         for y in range(yblock, yblock+yblocksize):
            # the common code.
</snippet></ROW><ROW><id>4158086</id><snippet>def blocked(xdim, ydim, xblocksize, yblocksize):
  for xblock in range(0, xdim, xblocksize):
     for yblock in range(0, ydim, yblocksize):
        for x in range(xblock, xblock+xblocksize):
           for y in range(yblock, yblock+yblocksize):
              yield (x, y)
</snippet></ROW><ROW><id>4158086</id><snippet>color = [(0,0,0),(255,255,255)]
for colorcode, pixelloc in zip(outputAfterLearning, blocked(10, 10, 5, 5)):
   if 0 &lt;= colorcode &lt; len(color):
   # ^ omit this if outputAfterLearning[i] is always valid
     image.putpixel(pixelloc, color[colorcode])
</snippet></ROW><ROW><id>4158104</id><snippet>import datetime
queryset = MyModel.objects.filter(\
     time_created__lt=(datetime.now()-datetime.timedelta(minutes=3)))
</snippet></ROW><ROW><id>4158119</id><snippet>print rpy2.__version__
</snippet></ROW><ROW><id>4158119</id><snippet>In [1]: import rpy2.robjects as robjects

In [2]: R = robjects.r  

In [3]: from rpy2.robjects.packages import importr

In [4]: importr("utils")
Out[4]: &lt;rpy2.robjects.packages.SignatureTranslatedPackage object at 0x1e96310&gt;
</snippet></ROW><ROW><id>4158170</id><snippet>email.header.decode_header</snippet></ROW><ROW><id>4158170</id><snippet>(decoded_string, charset)</snippet></ROW><ROW><id>4158170</id><snippet>charset</snippet></ROW><ROW><id>4158170</id><snippet>email.utils.getaddresses</snippet></ROW><ROW><id>4158170</id><snippet>def decode_rfc2047_header(h):
    return ' '.join(s.decode(charset or 'ascii')
                   for s, charset in email.header.decode_header(h))
</snippet></ROW><ROW><id>4158170</id><snippet>def decode_safely(s, charset='ascii'):
    """Return s decoded according to charset, but do so safely."""
    try:
        return s.decode(charset or 'ascii', 'replace')
    except LookupError: # bogus charset
        return s.decode('ascii', 'replace')

def decode_rfc2047_header(h):
    return ' '.join(decode_safely(s, charset)
                   for s, charset in email.header.decode_header(h))
</snippet></ROW><ROW><id>4158402</id><snippet>def tokens(filename):
    with open(filename) as infile:
        for line in infile:
            for item in line.split():
                yield int(item)

def ballots(tokens):
    ballot = []
    for t in tokens:
        if t:
            ballot.append(t)
        else:
            yield ballot
            ballot = []

t = tokens("datafile.txt")

for b in ballots(t):
    print b
</snippet></ROW><ROW><id>4158402</id><snippet>ballots()</snippet></ROW><ROW><id>4158402</id><snippet>next()</snippet></ROW><ROW><id>4158402</id><snippet>StopIteration</snippet></ROW><ROW><id>4158402</id><snippet>None</snippet></ROW><ROW><id>4158402</id><snippet>class Parser(object):

    def __init__(self, filename):

        def tokens(filename):
            with open(filename) as infile:
                for line in infile:
                    for item in line.split():
                        yield int(item)

        self.tokens = tokens(filename)

    def ballots(self):
        ballot = []
        for t in self.tokens:
            if t:
                ballot.append(t)
            else:
                yield ballot
                ballot = []

p = Parser("datafile.txt")

for b in p.ballots():
    print b
</snippet></ROW><ROW><id>4158418</id><snippet>eval</snippet></ROW><ROW><id>4158418</id><snippet>try</snippet></ROW><ROW><id>4158418</id><snippet>parsed_string=eval('''%s''' % cfg_read_item)</snippet></ROW><ROW><id>4158418</id><snippet>try</snippet></ROW><ROW><id>4158418</id><snippet>eval</snippet></ROW><ROW><id>4158478</id><snippet>pmatch</snippet></ROW><ROW><id>4158478</id><snippet>pmatch</snippet></ROW><ROW><id>4158478</id><snippet>regexec</snippet></ROW><ROW><id>4158478</id><snippet>[1]</snippet></ROW><ROW><id>4158501</id><snippet>if k not in d: d[k] = v</snippet></ROW><ROW><id>4158501</id><snippet>d.setdefault(k, v)</snippet></ROW><ROW><id>4158501</id><snippet>d[k] = v</snippet></ROW><ROW><id>4158501</id><snippet>if k not in d.keys(): d[k] = v</snippet></ROW><ROW><id>4158501</id><snippet>import timeit

setup = """
import random
random.seed(0)
item_count = 100000
# divide key range by 5 to ensure lots of duplicates 
items = [(random.randint(0, item_count/5), 0) for i in xrange(item_count)]
"""
in_dict = """
d = {}
for k, v in items:
    if k not in d:
        d[k] = v
"""
set_default = """
d = {}
for k, v in items:
    d.setdefault(k, v)
"""
straight_add = """
d = {}
for k, v in items:
    d[k] = v
"""
print 'in_dict      ', timeit.Timer(in_dict, setup).timeit(1000)
print 'set_default  ', timeit.Timer(set_default, setup).timeit(1000)
print 'straight_add ', timeit.Timer(straight_add, setup).timeit(1000)
</snippet></ROW><ROW><id>4158501</id><snippet>in_dict       13.090878085
set_default   21.1309413091
straight_add  11.4781760635
</snippet></ROW><ROW><id>4158642</id><snippet>import sys
from distutils.core import setup
import py2exe

entry_point = sys.argv[1]
sys.argv.pop()
sys.argv.append('py2exe')
sys.argv.append('-q')

opts = {
    'py2exe': {
        'compressed': 1,
        'optimize': 2,
        'bundle_files': 1
    }
}

setup(console=[entry_point], options=opts, zipfile=None)
</snippet></ROW><ROW><id>4158642</id><snippet>&gt;python compile.py myscript.py
</snippet></ROW><ROW><id>4158938</id><snippet>grid</snippet></ROW><ROW><id>4158938</id><snippet>from tkinter import ttk
from tkinter import *
from tkinter.ttk import *


class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()      
        self.createWidgets()

    def createWidgets(self):
        self.can = Canvas(self.master, width=500, height=250)
        self.can.grid(row=2, column=1)
        self.can.create_line(0,0,500,200)

root = Tk()
app = Application(master=root)
app.mainloop()
root.destroy()
</snippet></ROW><ROW><id>4158938</id><snippet>pack</snippet></ROW><ROW><id>4158938</id><snippet>from tkinter import ttk
from tkinter import *
from tkinter.ttk import *


class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()
        self.createWidgets()

    def createWidgets(self):
        self.can = Canvas(self.master, width=500, height=250)
        self.can.pack()
        self.can.create_line(0,0,500,200)

root = Tk()
app = Application(master=root)
app.mainloop()
root.destroy()
</snippet></ROW><ROW><id>4158985</id><snippet>&gt;&gt;&gt; x
array([[1, 2],
       [4, 5]])
&gt;&gt;&gt; y
array([3, 6])

&gt;&gt;&gt; np.column_stack((x,y))
array([[1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>4159010</id><snippet>entries_expanded[:] = [{'id':entry['id'], 'supplier':myfunction(entry['supplier'])} for entry in entries_expanded]
</snippet></ROW><ROW><id>4159129</id><snippet>  double [] numbers = new numbers[200];
  numbers[0] = 123;
  numbers[1] = 456; 

  //
  // and so on.
  //

  var n0 = numbers;
  var n1 = numbers.Skip(1);
  var n2 = numbers.Skip(2);
  var n3 = numbers.Skip(3);

  var x = from a in n0
          from b in n1
          from c in n2
          from d in n3
          where a + b + c + d == 2341.42
          select new { a1 = a, b1 = b, c1 = c, d1 = d };

  foreach (var aa in x)
  {
    Console.WriteLine("{0}, {1}, {2}, {3}", aa.a1, aa.b1, aa.c1, aa.d1 );
  }
</snippet></ROW><ROW><id>4159297</id><snippet>for line in file:</snippet></ROW><ROW><id>4159297</id><snippet>line = line.decode('encoding-of-the-file')</snippet></ROW><ROW><id>4159297</id><snippet>utf-8</snippet></ROW><ROW><id>4159297</id><snippet>iso-8859-1</snippet></ROW><ROW><id>4159297</id><snippet>line.decode('uft-8', 'ignore')</snippet></ROW><ROW><id>4159297</id><snippet>'replace'</snippet></ROW><ROW><id>4159297</id><snippet>unicode</snippet></ROW><ROW><id>4159297</id><snippet>u'this is unicode'</snippet></ROW><ROW><id>4159297</id><snippet>file</snippet></ROW><ROW><id>4159367</id><snippet>openSet   = set()
closedSet = set()
</snippet></ROW><ROW><id>4159367</id><snippet>in</snippet></ROW><ROW><id>4159367</id><snippet>not in</snippet></ROW><ROW><id>4159382</id><snippet>with</snippet></ROW><ROW><id>4159382</id><snippet>threading</snippet></ROW><ROW><id>4159388</id><snippet>from x import *</snippet></ROW><ROW><id>4159388</id><snippet>import a, b</snippet></ROW><ROW><id>4159388</id><snippet>import a
import b
</snippet></ROW><ROW><id>4159388</id><snippet>import a</snippet></ROW><ROW><id>4159388</id><snippet>from x import y, z</snippet></ROW><ROW><id>4159629</id><snippet>import numpy as np


a = np.fromfile('A.csv', dtype=np.int)   
b = np.fromfile('B.csv', dtype=np.int)   
c = np.fromfile('C.csv', dtype=np.int)   

d = (a + b + c) / 3.0

d.tofile('D.csv')
</snippet></ROW><ROW><id>4159760</id><snippet>[SomeDB]
    host = 192.168.1.102
    port = 1219
    tds version = 7.0
</snippet></ROW><ROW><id>4159760</id><snippet>tsql -S SomeDB -U www
</snippet></ROW><ROW><id>4159760</id><snippet>db = pymssql.connect(host='SomeDB',user='www',password='cylon',database='TestDB')
</snippet></ROW><ROW><id>4159868</id><snippet>def create_ref(obj, hashfn='sha256'):
    """
    Returns a tuple of hexdigest and the method used to generate
    the digest.

    &gt;&gt;&gt; create_ref({}, 'sha1')
    ('bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f', 'sha1')
    &gt;&gt;&gt; create_ref({}, 'md5')
    ('99914b932bd37a50b983c5e7c90ae93b', 'md5')
    """
    allowed = hashlib.algorithms
    if hashfn in allowed:
        return (getattr(hashlib,hashfn)(unicode(obj)).hexdigest(), hashfn)
    else:
        raise NameError('Not a valid algorithm')
</snippet></ROW><ROW><id>4160029</id><snippet>timeit</snippet></ROW><ROW><id>4160320</id><snippet>EasyDialogs</snippet></ROW><ROW><id>4160320</id><snippet>Carbon</snippet></ROW><ROW><id>4160320</id><snippet>EasyDialogs</snippet></ROW><ROW><id>4160320</id><snippet>Tkinter</snippet></ROW><ROW><id>4160320</id><snippet>User Interaction</snippet></ROW><ROW><id>4160320</id><snippet>Standard Additions</snippet></ROW><ROW><id>4160368</id><snippet>R["Sweave"]("/var/www/tmp/pywps/central.Rnw")
R('Sweave("/var/www/tmp/pywps/central.Rnw")')
</snippet></ROW><ROW><id>4160461</id><snippet>target.write(line2+"\n")
target.write(line3)
target.close() #&lt;------- You need to close the file when you're done writing.
#file read
txt = open(filename)
</snippet></ROW><ROW><id>4160502</id><snippet>&lt;option value='/viewpage/{{bookpage.key}}'&gt;{{ bookpage.page }} &lt;/option&gt;
</snippet></ROW><ROW><id>4160733</id><snippet>#!/usr/bin/python

# open a microphone in pyAudio and listen for taps

import pyaudio
import struct
import math

INITIAL_TAP_THRESHOLD = 0.010
FORMAT = pyaudio.paInt16 
SHORT_NORMALIZE = (1.0/32768.0)
CHANNELS = 2
RATE = 44100  
INPUT_BLOCK_TIME = 0.05
INPUT_FRAMES_PER_BLOCK = int(RATE*INPUT_BLOCK_TIME)
# if we get this many noisy blocks in a row, increase the threshold
OVERSENSITIVE = 15.0/INPUT_BLOCK_TIME                    
# if we get this many quiet blocks in a row, decrease the threshold
UNDERSENSITIVE = 120.0/INPUT_BLOCK_TIME 
# if the noise was longer than this many blocks, it's not a 'tap'
MAX_TAP_BLOCKS = 0.15/INPUT_BLOCK_TIME

def get_rms( block ):
    # RMS amplitude is defined as the square root of the 
    # mean over time of the square of the amplitude.
    # so we need to convert this string of bytes into 
    # a string of 16-bit samples...

    # we will get one short out for each 
    # two chars in the string.
    count = len(block)/2
    format = "%dh"%(count)
    shorts = struct.unpack( format, block )

    # iterate over the block.
    sum_squares = 0.0
    for sample in shorts:
        # sample is a signed short in +/- 32768. 
        # normalize it to 1.0
        n = sample * SHORT_NORMALIZE
        sum_squares += n*n

    return math.sqrt( sum_squares / count )

class TapTester(object):
    def __init__(self):
        self.pa = pyaudio.PyAudio()
        self.stream = self.open_mic_stream()
        self.tap_threshold = INITIAL_TAP_THRESHOLD
        self.noisycount = MAX_TAP_BLOCKS+1 
        self.quietcount = 0 
        self.errorcount = 0

    def stop(self):
        self.stream.close()

    def find_input_device(self):
        device_index = None            
        for i in range( self.pa.get_device_count() ):     
            devinfo = self.pa.get_device_info_by_index(i)   
            print( "Device %d: %s"%(i,devinfo["name"]) )

            for keyword in ["mic","input"]:
                if keyword in devinfo["name"].lower():
                    print( "Found an input: device %d - %s"%(i,devinfo["name"]) )
                    device_index = i
                    return device_index

        if device_index == None:
            print( "No preferred input found; using default input device." )

        return device_index

    def open_mic_stream( self ):
        device_index = self.find_input_device()

        stream = self.pa.open(   format = FORMAT,
                                 channels = CHANNELS,
                                 rate = RATE,
                                 input = True,
                                 input_device_index = device_index,
                                 frames_per_buffer = INPUT_FRAMES_PER_BLOCK)

        return stream

    def tapDetected(self):
        print "Tap!"

    def listen(self):
        try:
            block = self.stream.read(INPUT_FRAMES_PER_BLOCK)
        except IOError, e:
            # dammit. 
            self.errorcount += 1
            print( "(%d) Error recording: %s"%(self.errorcount,e) )
            self.noisycount = 1
            return

        amplitude = get_rms( block )
        if amplitude &gt; self.tap_threshold:
            # noisy block
            self.quietcount = 0
            self.noisycount += 1
            if self.noisycount &gt; OVERSENSITIVE:
                # turn down the sensitivity
                self.tap_threshold *= 1.1
        else:            
            # quiet block.

            if 1 &lt;= self.noisycount &lt;= MAX_TAP_BLOCKS:
                self.tapDetected()
            self.noisycount = 0
            self.quietcount += 1
            if self.quietcount &gt; UNDERSENSITIVE:
                # turn up the sensitivity
                self.tap_threshold *= 0.9

if __name__ == "__main__":
    tt = TapTester()

    for i in range(1000):
        tt.listen()
</snippet></ROW><ROW><id>4160771</id><snippet>widget.k</snippet></ROW><ROW><id>4160771</id><snippet>k</snippet></ROW><ROW><id>4160771</id><snippet>widget</snippet></ROW><ROW><id>4160771</id><snippet>setattr</snippet></ROW><ROW><id>4160771</id><snippet>setattr(widget, k, v)
</snippet></ROW><ROW><id>4160838</id><snippet>compile()</snippet></ROW><ROW><id>4160838</id><snippet>PyCF_DONT_IMPLY_DEDENT</snippet></ROW><ROW><id>4160892</id><snippet>__eq__</snippet></ROW><ROW><id>4161057</id><snippet>Set</snippet></ROW><ROW><id>4161057</id><snippet>List</snippet></ROW><ROW><id>4161057</id><snippet>HashSet</snippet></ROW><ROW><id>4161057</id><snippet>ArrayList</snippet></ROW><ROW><id>4161057</id><snippet>iterator()</snippet></ROW><ROW><id>4161057</id><snippet>remove</snippet></ROW><ROW><id>4161057</id><snippet>O(N)</snippet></ROW><ROW><id>4161057</id><snippet>get(int)</snippet></ROW><ROW><id>4161057</id><snippet>O(N)</snippet></ROW><ROW><id>4161057</id><snippet>Set</snippet></ROW><ROW><id>4161057</id><snippet>List</snippet></ROW><ROW><id>4161057</id><snippet>E set(int, E)</snippet></ROW><ROW><id>4161057</id><snippet>Set</snippet></ROW><ROW><id>4161057</id><snippet>List</snippet></ROW><ROW><id>4161057</id><snippet>set</snippet></ROW><ROW><id>4161057</id><snippet>null</snippet></ROW><ROW><id>4161313</id><snippet>email.__getitem__()</snippet></ROW><ROW><id>4161352</id><snippet>var myJson = {"Lac":"7824","CntryISO":"us","NetTyp":"GSM","NetOp":"310260","Cid":"11983"};

delete myJson.Lac;
delete myJson.cId;
</snippet></ROW><ROW><id>4161352</id><snippet>json</snippet></ROW><ROW><id>4161362</id><snippet>(x for x in count(3) if not x%3 or not x%5)</snippet></ROW><ROW><id>4161362</id><snippet>import itertools

def union(it1, it2):
    return (item for pair in itertools.izip(it1, it2) for item in pair)
</snippet></ROW><ROW><id>4161362</id><snippet>import itertools

def union(it1, it2):
    it1, it2 = iter(it1), iter(it2)
    for item in (item for pair in itertools.izip(it1, it2) for item in pair):
        yield item
    for it in (it1, it2):
        for item in it:
            yield item
</snippet></ROW><ROW><id>4161411</id><snippet> html_file = open('namehere.html','w')
 a = ['f','d','s','a']
 x = -1
 scope = vars()
 data = ''
 for i in a: #TIP: use a generator
     scope['x']+=1
     data += a[x]
     data += '\n'
 html_file.write(data)
 html_file.close()
</snippet></ROW><ROW><id>4161471</id><snippet>mytemplate.render(myvar1="var1", mydict=dict())
</snippet></ROW><ROW><id>4161471</id><snippet>${myvar1}
% for val in mydict:
    ${val}
% endfor
</snippet></ROW><ROW><id>4161484</id><snippet>[ a*a for a in xrange(1, n + 1) ]
</snippet></ROW><ROW><id>4161580</id><snippet>from twisted.internet import reactor

class MessageReverser(object):
    """
    Accept messages, reverse them, and send them onwards.
    """
    def __init__(self, server):
        self.server = server

    def messageReceived(self, message):
        """
        Callback invoked whenever a message is received.  This implementation
        will reverse and re-send the message.
        """
        self.server.sendMessage(message[::-1])
        doSomeOtherLogic()

def main():
    twistedServer = ...
    twistedServer.start(MessageReverser(twistedServer))
    reactor.run()

main()
</snippet></ROW><ROW><id>4161580</id><snippet>twistedServer</snippet></ROW><ROW><id>4161580</id><snippet>messageReceived</snippet></ROW><ROW><id>4161580</id><snippet>start</snippet></ROW><ROW><id>4161580</id><snippet>messageReceived</snippet></ROW><ROW><id>4161580</id><snippet>reactor.run</snippet></ROW><ROW><id>4161580</id><snippet>twistd</snippet></ROW><ROW><id>4161580</id><snippet>reactor.run</snippet></ROW><ROW><id>4161580</id><snippet>reactor.stop</snippet></ROW><ROW><id>4161580</id><snippet>doSomeOtherLogic</snippet></ROW><ROW><id>4161580</id><snippet>reactor.run</snippet></ROW><ROW><id>4161580</id><snippet>from Queue import Queue
from threading import Thread

class MessageQueuer(object):
    def __init__(self, queue):
        self.queue = queue

    def messageReceived(self, message):
        self.queue.put(message)

def main():
    queue = Queue()
    twistedServer = ...
    twistedServer.start(MessageQueuer(queue))
    Thread(target=reactor.run, args=(False,)).start()

    while True:
        message = queue.get()
        response = handleMessage(message)
        reactor.callFromThread(twistedServer.sendResponse, response)

main()
</snippet></ROW><ROW><id>4161580</id><snippet>twistedServer</snippet></ROW><ROW><id>4161580</id><snippet>while True:</snippet></ROW><ROW><id>4161580</id><snippet>reactor.run(False)</snippet></ROW><ROW><id>4161580</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>4161580</id><snippet>MessageQueuer</snippet></ROW><ROW><id>4161580</id><snippet>MessageReverser</snippet></ROW><ROW><id>4161580</id><snippet>messageReceived</snippet></ROW><ROW><id>4161580</id><snippet>while True:</snippet></ROW><ROW><id>4161580</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>4161580</id><snippet>twistedServer.sendResponse</snippet></ROW><ROW><id>4161580</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>4161580</id><snippet>reactor.stop</snippet></ROW><ROW><id>4161580</id><snippet>while True</snippet></ROW><ROW><id>4161596</id><snippet>// sleep for 5 seconds
boost::this_thread::sleep(boost::posix_time::seconds(5)); 
</snippet></ROW><ROW><id>4161643</id><snippet>fibs=[1,1]
while fibs[-1] &lt;= 10000000:
   fibs.append(fibs[-1] + fibs[-2])
</snippet></ROW><ROW><id>4161679</id><snippet>[it for it in item_list if date_from_db &gt; it.date]
</snippet></ROW><ROW><id>4161679</id><snippet>filter</snippet></ROW><ROW><id>4161679</id><snippet>filter(lambda it: it if date_from_db &gt; it.date, item_list)
</snippet></ROW><ROW><id>4162284</id><snippet>easy_install</snippet></ROW><ROW><id>4162284</id><snippet>$ sudo easy_install virtualenv
</snippet></ROW><ROW><id>4162293</id><snippet>function       usec per loop:
               Python  Cython
array_ctypes   1370    1220
array_struct    384     249
array_numpy     336     339
</snippet></ROW><ROW><id>4162293</id><snippet>def array_struct_flat(points):
    n = len(points)
    return pack(
        "f"*n,
        *[
            coord
            for coord in points
        ]
    )

points = [random() for _ in xrange(1000 * 2)]
</snippet></ROW><ROW><id>4162293</id><snippet>function            usec per loop:
                    Python  Cython
array_struct_flat           157
</snippet></ROW><ROW><id>4162299</id><snippet>I hope the output is like this:

folder1
folder2
folder3
folder4
</snippet></ROW><ROW><id>4162299</id><snippet>for i in os.listdir(mypath):
    print i
</snippet></ROW><ROW><id>4162299</id><snippet>return</snippet></ROW><ROW><id>4162299</id><snippet>i</snippet></ROW><ROW><id>4162299</id><snippet>HttpResponse</snippet></ROW><ROW><id>4162299</id><snippet>returnString = ""
for i in os.listdir(mypath):
    returnString = returnString + i + "\n"

return returnString
</snippet></ROW><ROW><id>4162306</id><snippet>import urllib

print urllib.unquote("cmd%5Blogin_user%5D%5Busername%5D=dfdsfdsf&amp;cmd%5Blogin_user%5D%5Bpassword%5D=dsfsdf")
</snippet></ROW><ROW><id>4162513</id><snippet>var d = {} 
d['login_user'] = { 'username': 'foo', 'password': 'bar' }
</snippet></ROW><ROW><id>4162513</id><snippet>data = json.loads(POST['data'])
data['login_user']
</snippet></ROW><ROW><id>4162611</id><snippet>import sys, os
sys.path.append(os.path.dirname(__file__))

import utils
</snippet></ROW><ROW><id>4162611</id><snippet>sys.path.append([enter path here])
</snippet></ROW><ROW><id>4162611</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>4162694</id><snippet>&gt;&gt;&gt; from unidecode import unidecode
&gt;&gt;&gt; unidecode(u'ıöüç')
'iouc'
</snippet></ROW><ROW><id>4162731</id><snippet>[]</snippet></ROW><ROW><id>4162731</id><snippet>QueryDict</snippet></ROW><ROW><id>4162731</id><snippet># HTTP POST variables
request.POST['section'] # =&gt; [39]
request.POST['MAINS'] # =&gt; [137]

# HTTP GET variables
request.GET['section'] # =&gt; [39]
request.GET['MAINS'] # =&gt; [137]

# HTTP POST and HTTP GET variables
request.REQUEST['section'] # =&gt; [39]
request.REQUEST['MAINS'] # =&gt; [137]
</snippet></ROW><ROW><id>4162755</id><snippet>class</snippet></ROW><ROW><id>4162755</id><snippet>type</snippet></ROW><ROW><id>4162830</id><snippet>In [20]: a,b = raw_input().split()
12 12.2

In [21]: a = int(a)
Out[21]: 12

In [22]: b = float(b)
Out[22]: 12.2
</snippet></ROW><ROW><id>4163042</id><snippet>subs</snippet></ROW><ROW><id>4163042</id><snippet>class Base:
  @classmethod
  def registersub(cls, subcls):
    """ Decorator to register subclass types. """
    # replace occurrence(s) of subclass name in 'subs' with the subclass itself
    while subcls.__name__ in cls.subs:
        cls.subs[cls.subs.index(subcls.__name__)] = subcls
    return cls

  subs = ['Sub3','Sub1']  # some subclass names in some special order

@Base.registersub
class Sub1(Base): pass
@Base.registersub
class Sub2(Base): pass
@Base.registersub
class Sub3(Base): pass

print Base.subs
# [&lt;class __main__.Sub3&gt;, &lt;class __main__.Sub1&gt;]
</snippet></ROW><ROW><id>4163042</id><snippet>@Base.registersub</snippet></ROW><ROW><id>4163042</id><snippet>Base</snippet></ROW><ROW><id>4163042</id><snippet>subs</snippet></ROW><ROW><id>4163042</id><snippet>Base</snippet></ROW><ROW><id>4163042</id><snippet>__init__()</snippet></ROW><ROW><id>4163042</id><snippet>subs</snippet></ROW><ROW><id>4163042</id><snippet>subs</snippet></ROW><ROW><id>4163042</id><snippet>class BaseMeta(type):
    def __init__(cls, name, bases, classdict):
        if classdict.get('__metaclass__') is not BaseMeta:  # subclass?
            # replace any occurrences of this subclass name
            # in Base class 'subs' list with the subclass itself
            while name in cls.subs:
                cls.subs[cls.subs.index(name)] = cls
        type.__init__(cls, name, bases, classdict)

class Base:
    __metaclass__ = BaseMeta
    subs = ['Sub3','Sub1']  # some subclass names in some special order

class Sub1(Base): pass
class Sub2(Base): pass
class Sub3(Base): pass

print Base.subs
# [&lt;class '__main__.Sub3'&gt;, &lt;class '__main__.Sub1'&gt;]
</snippet></ROW><ROW><id>4163055</id><snippet>/* Pass two arguments, a string and an int. */
PyObject *argList = Py_BuildValue("si", "hello", 42);

/* Call the class object. */
PyObject *obj = PyObject_CallObject((PyObject *) &amp;pyfoo_T, argList);

/* Release the argument list. */
Py_DECREF(argList);
</snippet></ROW><ROW><id>4163192</id><snippet>strlen</snippet></ROW><ROW><id>4163192</id><snippet>echo</snippet></ROW><ROW><id>4163192</id><snippet>fib is 7540113804746346429
i is 92
</snippet></ROW><ROW><id>4163192</id><snippet>fib is 7.54011380475E+18
i is 92
</snippet></ROW><ROW><id>4163192</id><snippet>bcadd</snippet></ROW><ROW><id>4164088</id><snippet>Debugging a running python process by interrupting and providing an interactive prompt (Python)</snippet></ROW><ROW><id>4164088</id><snippet>from rfoo.utils import rconsole
rconsole.spawn_server()
</snippet></ROW><ROW><id>4164088</id><snippet>$ rconsole
</snippet></ROW><ROW><id>4164110</id><snippet>sudo</snippet></ROW><ROW><id>4164110</id><snippet>subprocess.Popen(commandtosend, shell=True,preexec_fn=os
                 ^^
                 Here don't put sudo
</snippet></ROW><ROW><id>4164110</id><snippet>os.kill(subp.pid, signal.SIGKILL)</snippet></ROW><ROW><id>4164110</id><snippet>sudo</snippet></ROW><ROW><id>4164110</id><snippet>os.system("sudo kill %s" % (subp.pid, ))
</snippet></ROW><ROW><id>4164195</id><snippet>import win32com.client

def get_contact(signin_uri, communicator):
   c = communicator.GetContact(signin_uri, communicator.MyServiceId)
   return c

comm = win32com.client.Dispatch('Communicator.UIAutomation')
contact = get_contact("jaya@contoso.com", comm)
</snippet></ROW><ROW><id>4164288</id><snippet>*[dir=ltr] div.row div.label, *[dir=rtl] div.row div.formw {
 float: left;
 text-align: right;
}
*[dir=rtl] div.row div.label, *[dir=ltr] div.row div.formw {
 float: right;
 text-align: left;
}
</snippet></ROW><ROW><id>4164401</id><snippet>import csv

reader = csv.reader(open('data.csv', 'rb'))
header = reader.next()
data = {}

for row in reader:
    key = tuple([int(v) for v in row[:-1]])
    val = row[-1]
    data[key] = float(val)

# Retrieve a value
print data[1, 1961, 3]
</snippet></ROW><ROW><id>4164677</id><snippet>import datetime as dt
import time

now=dt.datetime.now()
</snippet></ROW><ROW><id>4164677</id><snippet>now</snippet></ROW><ROW><id>4164677</id><snippet>print(time.mktime(now.timetuple()))
# 1289565310.0
</snippet></ROW><ROW><id>4164677</id><snippet>now2=dt.datetime(2010,11,12,12,0,0)

def timestamp(date):
    return time.mktime(date.timetuple())

print(timestamp(now2)-timestamp(now))
# 15890.0
</snippet></ROW><ROW><id>4165076</id><snippet>root</snippet></ROW><ROW><id>4165076</id><snippet>cat secret-password
</snippet></ROW><ROW><id>4165076</id><snippet>password = decrypt-password(data)
</snippet></ROW><ROW><id>4165076</id><snippet>print "The user's password is",password
</snippet></ROW><ROW><id>4165076</id><snippet>os.fchown()</snippet></ROW><ROW><id>4165076</id><snippet>base64</snippet></ROW><ROW><id>4165234</id><snippet>Y=X[0,:]+X[1,:]
D = ((1&lt;Y) &amp; (Y&lt;2)).astype(int)
</snippet></ROW><ROW><id>4165586</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4165586</id><snippet>import subprocess
import os
import sys
import time
import random
import gc  # This is just to test the hypothesis that garbage collection of p=Popen() causing the problem.

# This spawns many (3) children in quick succession
# and then reports as each child finishes.
if __name__=='__main__':
    N=3
    if len(sys.argv)&gt;1:
        x=random.randint(1,10)
        print('{p} sleeping for {x} sec'.format(p=os.getpid(),x=x))
        time.sleep(x)
    else:
        for script in xrange(N): 
            args=['test.py','sleep'] 
            p = subprocess.Popen(args)
        gc.collect()
        for i in range(N):
            pid,retval=os.wait()
            print('{p} finished'.format(p=pid))
</snippet></ROW><ROW><id>4165586</id><snippet>% x_fork_many.py 
15562 sleeping for 10 sec
15563 sleeping for 5 sec
15564 sleeping for 6 sec
15563 finished
15564 finished
15562 finished
</snippet></ROW><ROW><id>4165586</id><snippet>.wait()</snippet></ROW><ROW><id>4165586</id><snippet>subprocess.Popen(...)</snippet></ROW><ROW><id>4165646</id><snippet>"tab-added"</snippet></ROW><ROW><id>4165646</id><snippet>"tab-removed"</snippet></ROW><ROW><id>4165675</id><snippet>for rake in points_list:
  for point in rake:
    print point[0], point[1], point[2]
</snippet></ROW><ROW><id>4165675</id><snippet>for npoint in xrange(len(points_list))
  for nrake in xrange(len(points_list[npoint]))
    print points_list[npoint][nrake][0], points_list[npoint][nrake][1], points_list[npoint][nrake][2]
</snippet></ROW><ROW><id>4165692</id><snippet>zipfile</snippet></ROW><ROW><id>4165692</id><snippet>StringIO</snippet></ROW><ROW><id>4165753</id><snippet>a == b</snippet></ROW><ROW><id>4165753</id><snippet>a is b</snippet></ROW><ROW><id>4165978</id><snippet>def rps():
    # Code to determine if player wins
    if player_wins:
        return True

    return False
</snippet></ROW><ROW><id>4165978</id><snippet>player_wins = rps()
</snippet></ROW><ROW><id>4165978</id><snippet> def rps(): 
     # Code to determine if player wins, assigning a boolean value (True or False)
     # to the variable player_wins.

     return player_wins

 pw = rps()
</snippet></ROW><ROW><id>4165978</id><snippet>player_wins</snippet></ROW><ROW><id>4165978</id><snippet>pw</snippet></ROW><ROW><id>4166049</id><snippet>def convert(self, saType):
    type = "Unknown"
    if isinstance(saType,sqlalchemy.types.INTEGER):
        type = "Integer"
    elif isinstance(saType,sqlalchemy.types.VARCHAR):
        type = "String"
    elif isinstance(saType,sqlalchemy.types.DATE):
        type = "Date"
    elif isinstance(saType,sqlalchemy.dialects.mysql.base._FloatType):
        type = "Double"
    return type
</snippet></ROW><ROW><id>4166240</id><snippet>    mplFigure.set_size_inches(sizeInInches)
    l,b,w,h = mplFigure.bbox.bounds
    w = int(math.ceil(w))
    h = int(math.ceil(h))
    mplCanvas.SetInitialSize(size=wx.Size(w, h))
    size = panel.Size
    panel.SetSize(wx.Size(size.x, size.y-1))
    panel.SetSize(wx.Size(size.x, size.y))
</snippet></ROW><ROW><id>4166505</id><snippet>ZipFile</snippet></ROW><ROW><id>4166505</id><snippet>zipfile.ZIP_STORED</snippet></ROW><ROW><id>4166505</id><snippet>zipfile.ZIP_DEFLATED</snippet></ROW><ROW><id>4166505</id><snippet>zlib</snippet></ROW><ROW><id>4166505</id><snippet>import zipfile

def main(archive_list=[],zfilename='default.zip'):
    print zfilename
    zout = zipfile.ZipFile(zfilename, "w", zipfile.ZIP_DEFLATED) # &lt;--- this is the change you need to make
    for fname in archive_list:
        print "writing: ", fname
        zout.write(fname)
    zout.close()

if __name__ == '__main__':
    main()  
</snippet></ROW><ROW><id>4166623</id><snippet>lxml</snippet></ROW><ROW><id>4166623</id><snippet>xpath</snippet></ROW><ROW><id>4166623</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; doc = etree.XML("""&lt;projects&gt;
...   &lt;project&gt;
...     &lt;id&gt;1&lt;/id&gt;
...     &lt;name&gt;
...       &lt;![CDATA[First Project]]&gt;
...     &lt;/name&gt;
...     &lt;overview&gt;
...       &lt;![CDATA[&lt;p&gt;This is overview of the first project&lt;/p&gt;]]&gt;
...     &lt;/overview&gt;
...     &lt;status&gt;
...       &lt;![CDATA[active]]&gt;
...     &lt;/status&gt;
...     &lt;type&gt;...&lt;/type&gt;
...     &lt;permalink&gt;...&lt;/permalink&gt;
...     &lt;leader_id&gt;...&lt;/leader_id&gt;
...     &lt;company_id&gt;...&lt;/company_id&gt;
...     &lt;group_id&gt;...&lt;/group_id&gt;
...   &lt;/project&gt;
... &lt;/projects&gt;""")
&gt;&gt;&gt; data = {}
&gt;&gt;&gt; for a in doc.xpath('/projects/project/*'):
...   data[a.tag] = str(a.text).strip()
...
&gt;&gt;&gt; data
{'company_id': '...',
 'group_id': '...',
 'id': '1',
 'leader_id': '...',
 'name': 'First Project',
 'overview': '&lt;p&gt;This is overview of the first project&lt;/p&gt;',
 'permalink': '...',
 'status': 'active',
 'type': '...'}
</snippet></ROW><ROW><id>4166623</id><snippet>from lxml import etree</snippet></ROW><ROW><id>4166623</id><snippet>addProject</snippet></ROW><ROW><id>4166623</id><snippet>req = urllib2.Request("web_url/public/api.php?path_info=/projects/add&amp;token=####################", params)
resp = urllib2.urlopen(req)
resp_data = f.read()
if not resp.code == 200 and resp.headers.get('content-type') == 'text/xml':
  # Do your error handling.
  raise Exception('Unexpected response',req,resp)
data = etree.XML(resp_data)
api_id = int(data.xpath('/project/id/text()')[0])
project.API_id = api_id
project.save()
</snippet></ROW><ROW><id>4166656</id><snippet>&gt;&gt;&gt; theListOfChars = ['a', 'b', 'x', 'd', 's']
&gt;&gt;&gt; ''.join(theListOfChars)
'abxds'
</snippet></ROW><ROW><id>4166656</id><snippet>list</snippet></ROW><ROW><id>4166656</id><snippet>str</snippet></ROW><ROW><id>4166656</id><snippet>char</snippet></ROW><ROW><id>4166656</id><snippet>''.join</snippet></ROW><ROW><id>4166702</id><snippet>&gt;&gt;&gt; user = 'username'
&gt;&gt;&gt; host = 'host'
&gt;&gt;&gt; '%s@%s' % (user, host)
'username@host'
</snippet></ROW><ROW><id>4166702</id><snippet>&gt;&gt;&gt; '{0}@{1}'.format(user, host)
'username@host'
</snippet></ROW><ROW><id>4166702</id><snippet>+</snippet></ROW><ROW><id>4166702</id><snippet>str.join()</snippet></ROW><ROW><id>4166702</id><snippet>str.join()</snippet></ROW><ROW><id>4167100</id><snippet>import itertools
[key for key,seq in itertools.groupby([1,1,1,2,2,3,4,4])]
</snippet></ROW><ROW><id>4167100</id><snippet>def remove_adjacent(items):
    # iterate the items
    it = iter(items)
    # get the first one
    last = next(it)
    # yield it in any case
    yield last
    for current in it:
        # if the next item is different yield it
        if current != last:
            yield current
            last = current
        # else: its a duplicate, do nothing with it

print list(remove_adjacent([1,1,1,2,2,3,4,4]))
</snippet></ROW><ROW><id>4167267</id><snippet>def even_only(lst):
    evens = []
    for number in lst:
        if is_even(number):
            evens.append(number)
    return evens
</snippet></ROW><ROW><id>4167267</id><snippet>def even_only(iter):
    return [x for x in iter if is_even(x)]
</snippet></ROW><ROW><id>4167267</id><snippet>is_even</snippet></ROW><ROW><id>4167773</id><snippet>&lt;&lt;Selection&gt;&gt;</snippet></ROW><ROW><id>4167773</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>4168126</id><snippet>session.query(Posting).\
    .filter(Posting.id==self.id)\
    .update({'score':self.score+1})
</snippet></ROW><ROW><id>4168126</id><snippet>    j = join(entity_table_1, entity_table_2)
    mapper(Entity, j, properties={
        'id': column_property(entity_table_1.c.id, entity_table_2.c.user_id)
        &lt;... some other properties ...&gt;
    })
</snippet></ROW><ROW><id>4168235</id><snippet>getpeername</snippet></ROW><ROW><id>4168235</id><snippet>accept</snippet></ROW><ROW><id>4168628</id><snippet>validator</snippet></ROW><ROW><id>4168628</id><snippet>Text</snippet></ROW><ROW><id>4168628</id><snippet>validator</snippet></ROW><ROW><id>4168628</id><snippet>test_..</snippet></ROW><ROW><id>4168628</id><snippet>Text()</snippet></ROW><ROW><id>4168628</id><snippet>.validate</snippet></ROW><ROW><id>4168628</id><snippet>def test_text_validator_raises_exception(self):
    validator = Mock()
    validator.validate.side_effect = ValidationError()
    text = Text(validators=[Mock(return_value=validator)])
    self.assertRaises(ValidationError, text.__set__, text, '')
</snippet></ROW><ROW><id>4168757</id><snippet>newstring = re.sub(r'\[\d+\]', replacement, yourstring)
</snippet></ROW><ROW><id>4168757</id><snippet>myre = re.compile(r'\[\d+\]')
newstring = myre.sub(replacement, yourstring)
</snippet></ROW><ROW><id>4168757</id><snippet>newstring = re.sub(r'\[(\d+)\]',r'[mytext, \1]', yourstring)
</snippet></ROW><ROW><id>4169332</id><snippet>DataReceived</snippet></ROW><ROW><id>4169332</id><snippet>BytesToRead</snippet></ROW><ROW><id>4169658</id><snippet>bytes.replace()</snippet></ROW><ROW><id>4169658</id><snippet>crOut.strip().replace(b"&gt;&lt;", b"&gt;\n&lt;").replace(b"\" ", b"\"\n")
</snippet></ROW><ROW><id>4169946</id><snippet>'button-press-event'</snippet></ROW><ROW><id>4169946</id><snippet>'activate'</snippet></ROW><ROW><id>4169946</id><snippet>def on_file_activate(self, widget, event):
    if event.button != 1:
        return False  #only intercept left mouse button
    md = gtk.MessageDialog(self, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE, "herp derp, I only needed one click")
    md.run()
    md.destroy()
    return True
</snippet></ROW><ROW><id>4170007</id><snippet>main()</snippet></ROW><ROW><id>4170007</id><snippet>import psyco
psyco.full()
</snippet></ROW><ROW><id>4170041</id><snippet>lat = forms.FloatField(widget=forms.HiddenInput())
</snippet></ROW><ROW><id>4170121</id><snippet>def method2(size):
    ret = set()
    while len(ret) &lt; size:
        ret.add((random.randint(0, 99), random.randint(0, 99)))
    return ret
</snippet></ROW><ROW><id>4170121</id><snippet>import random
import itertools

def method2(size, min_, max_):
    range_ = range(min_, max_)
    points = itertools.product(range_, range_)
    return random.sample(list(points), size)
</snippet></ROW><ROW><id>4170121</id><snippet>def method3(size, min_, max_):
    range_ = range(min_, max_)
    points = list(itertools.product(range_, range_))

    N = (max_ - min_)**2
    L =  N - size
    i = 1
    while i &lt;= L:
        del points[random.randint(0, N - i)]
        i += 1
    return points
</snippet></ROW><ROW><id>4170144</id><snippet>OpenSSL</snippet></ROW><ROW><id>4170144</id><snippet>OpenSSL</snippet></ROW><ROW><id>4170144</id><snippet>ROT13</snippet></ROW><ROW><id>4170144</id><snippet>str_rot13</snippet></ROW><ROW><id>4170166</id><snippet>#!/usr/bin/env python 
import sys
def handle_ref(old, new, ref):
    with open('/tmp/out','w') as f:
        f.write(old,new,ref)
if __name__ == '__main__':
    with open('/tmp/out','w') as f:
        f.write('post-commit running')
    for line in sys.stdin:
        handle_ref(*line.split())
        with open('/tmp/out','w') as f:
            f.write('Got here')
</snippet></ROW><ROW><id>4170166</id><snippet>post-commit running
</snippet></ROW><ROW><id>4170166</id><snippet>for line in sys.stdin:</snippet></ROW><ROW><id>4170166</id><snippet>handle_ref</snippet></ROW><ROW><id>4170257</id><snippet>short_card = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2']
long_card = ['ace', 'king', 'queen', 'jack', 'ten', 'nine', 'eight', 'seven', 'six', 'five', 'four', 'three', 'deuce']
</snippet></ROW><ROW><id>4170257</id><snippet>short_suit = ['c', 'd', 'h', 's']
long_suit = ['clubs', 'diamonds', 'hearts', 'spades'] 
</snippet></ROW><ROW><id>4170371</id><snippet>import site
site.addsitedir('/usr/local/pythonenv/PYLONS-1/lib/python2.5/site-packages')
</snippet></ROW><ROW><id>4170371</id><snippet>site.addsitedir</snippet></ROW><ROW><id>4170371</id><snippet>sys.path</snippet></ROW><ROW><id>4170454</id><snippet>python-magic</snippet></ROW><ROW><id>4170456</id><snippet>import itertools

def grouper(n, iterable, fillvalue=None):
  "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
  args = [iter(iterable)] * n
  return itertools.izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>4170456</id><snippet>&gt;&gt;&gt; tuple(grouper(3, (1,2,3,4,5)))
((1, 2, 3), (4, 5, None))
</snippet></ROW><ROW><id>4170456</id><snippet>None</snippet></ROW><ROW><id>4170456</id><snippet>&gt;&gt;&gt; tuple(tuple(n for n in t if n) for t in grouper(3, (1,2,3,4,5)))
((1, 2, 3), (4, 5))
</snippet></ROW><ROW><id>4170456</id><snippet>def my_grouper(n, iterable):
  "my_grouper(3, 'ABCDEFG') --&gt; ABC DEF G"
  args = [iter(iterable)] * n
  return tuple(tuple(n for n in t if n)
       for t in itertools.izip_longest(*args))
</snippet></ROW><ROW><id>4170456</id><snippet>&gt;&gt;&gt; tuple(my_grouper(3, (1,2,3,4,5)))
((1, 2, 3), (4, 5))
</snippet></ROW><ROW><id>4170458</id><snippet>sqlite</snippet></ROW><ROW><id>4170541</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        self.model = QtGui.QStandardItemModel()

        for k in range(0, 4):
            parentItem = self.model.invisibleRootItem()
            for i in range(0, 4):
                item = QtGui.QStandardItem(QtCore.QString("item %0 %1").arg(k).arg(i))
                parentItem.appendRow(item)
                parentItem = item

        self.view = QtGui.QTreeView()
        self.view.setModel(self.model)
        self.view.setDragDropMode(QtGui.QAbstractItemView.InternalMove)

        self.setCentralWidget(self.view)

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4170541</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class TreeModel(QtCore.QAbstractItemModel):
    def __init__(self):
        QtCore.QAbstractItemModel.__init__(self)
        self.nodes = ['node0', 'node1', 'node2']

    def index(self, row, column, parent):
        return self.createIndex(row, column, self.nodes[row])

    def parent(self, index):
        return QtCore.QModelIndex()

    def rowCount(self, index):
        if index.internalPointer() in self.nodes:
            return 0
        return len(self.nodes)

    def columnCount(self, index):
        return 1

    def data(self, index, role):
        if role == 0: 
            return index.internalPointer()
        else:
            return None

    def supportedDropActions(self): 
        return QtCore.Qt.CopyAction | QtCore.Qt.MoveAction         

    def flags(self, index):
        if not index.isValid():
            return QtCore.Qt.ItemIsEnabled
        return QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsSelectable | \
               QtCore.Qt.ItemIsDragEnabled | QtCore.Qt.ItemIsDropEnabled        

    def mimeTypes(self):
        return ['text/xml']

    def mimeData(self, indexes):
        mimedata = QtCore.QMimeData()
        mimedata.setData('text/xml', 'mimeData')
        return mimedata

    def dropMimeData(self, data, action, row, column, parent):
        print 'dropMimeData %s %s %s %s' % (data.data('text/xml'), action, row, parent) 
        return True


class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        self.treeModel = TreeModel()

        self.view = QtGui.QTreeView()
        self.view.setModel(self.treeModel)
        self.view.setDragDropMode(QtGui.QAbstractItemView.InternalMove)

        self.setCentralWidget(self.view)

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4170665</id><snippet>mylist += [heights[iso+YEAR] for iso in set(BAR_Items) if iso+YEAR in heights] 
</snippet></ROW><ROW><id>4170691</id><snippet>from datetime import datetime
datetime.strptime("2010-11-13 10:33:54.227806", "%Y-%m-%d %H:%M:%S.%f")
</snippet></ROW><ROW><id>4170876</id><snippet>def OnClick():
     if not set_els: return

     # swap this with the line above if viz.pick has side effects that should occur 
     A = viz.pick(0, viz.WORLD, all=False) 
     if touch != A: return


     keys = (key for key in BAR_Items
             if BAR_Items[key] == A or SHAPES[key+"_SHP"] == A)

     for key in keys:
         if key in Selection:
             Selection.remove(key)
             BAR_Items[key].clearActions()
             VFrame.SetStatusText(frame, key + " has been deselected")
             viz.director(do_chart)
         else:
             Selection.append(key)
</snippet></ROW><ROW><id>4170876</id><snippet>global</snippet></ROW><ROW><id>4170876</id><snippet>global</snippet></ROW><ROW><id>4170991</id><snippet>home.html</snippet></ROW><ROW><id>4170991</id><snippet>&lt;%extends base.html%&gt;
&lt;%include _user_details.html%&gt;
... &lt;% footer and other stuff%&gt;
</snippet></ROW><ROW><id>4170991</id><snippet>_user_details.html</snippet></ROW><ROW><id>4170991</id><snippet>_user_details.html</snippet></ROW><ROW><id>4171389</id><snippet>mylist = [1,2,3]
for item in mylist:
    print item

mydict  = {1:'one', 2:'two', 3:'three'}
for key in mydict:
    print key, mydict[key]
</snippet></ROW><ROW><id>4171389</id><snippet>i</snippet></ROW><ROW><id>4171389</id><snippet>for i, item in enumerate(mylist):
    mylist[i] = item**2
</snippet></ROW><ROW><id>4172186</id><snippet>import numpy.random as nprnd

t1 = timeit.Timer('[random.randint(0,1000) for r in xrange(10000)]','import random') # v1
### change v2 so that it picks numbers in (0,10000) and thus runs...
t2 = timeit.Timer('random.sample(range(10000), 10000)','import random') # v2
t3 = timeit.Timer('nprnd.randint(1000, size=10000)','import numpy.random as nprnd') # v3

print t1.timeit(1000)/1000
print t2.timeit(1000)/1000
print t3.timeit(1000)/1000
</snippet></ROW><ROW><id>4172186</id><snippet>0.0233682730198
0.00781716918945
0.000147947072983
</snippet></ROW><ROW><id>4172245</id><snippet>from subprocess import Popen, PIPE

prog = Popen("scriptA.exe", shell=True, stdin=PIPE, stdout=PIPE)

prog.stdin.write("This will go to script A\n")
print prog.stdout.read()

prog.wait() # Wait for scriptA to finish
</snippet></ROW><ROW><id>4172465</id><snippet>a = some_function(
    '1' + '2' + '3' + '4')
</snippet></ROW><ROW><id>4172465</id><snippet>a = '1' + '2' + \
    '3' + '4'
</snippet></ROW><ROW><id>4172548</id><snippet>del L[:]</snippet></ROW><ROW><id>4172710</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>4172987</id><snippet>os.sep</snippet></ROW><ROW><id>4172987</id><snippet>&gt;&gt;&gt; s = "../first/bit/of/the/path.html"
&gt;&gt;&gt; s.split(os.sep, 2)[-1]
'bit/of/the/path.html'
</snippet></ROW><ROW><id>4172987</id><snippet>&gt;&gt;&gt; s.split(os.sep, 2)[2]
</snippet></ROW><ROW><id>4173294</id><snippet>import time
mWEIGHT = mCOUNT / time.mktime(mDATE0.utctimetuple())
</snippet></ROW><ROW><id>4173294</id><snippet>mktime</snippet></ROW><ROW><id>4173294</id><snippet>mCOUNT / mDATE0.date</snippet></ROW><ROW><id>4173294</id><snippet>int</snippet></ROW><ROW><id>4173294</id><snippet>date</snippet></ROW><ROW><id>4173294</id><snippet>toordinal</snippet></ROW><ROW><id>4173307</id><snippet>set(list_of_objects)</snippet></ROW><ROW><id>4173307</id><snippet>__hash__</snippet></ROW><ROW><id>4173307</id><snippet>__eq__</snippet></ROW><ROW><id>4173307</id><snippet>__eq__</snippet></ROW><ROW><id>4173307</id><snippet>__eq__</snippet></ROW><ROW><id>4173307</id><snippet>def __eq__(self, other):
    return self.author_name==other.author_name\
           and self.title==other.title
</snippet></ROW><ROW><id>4173307</id><snippet>__hash__</snippet></ROW><ROW><id>4173307</id><snippet>def __hash__(self):
    return hash(('title', self.title,
                 'author_name', self.author_name))
</snippet></ROW><ROW><id>4173307</id><snippet>is</snippet></ROW><ROW><id>4173307</id><snippet>==</snippet></ROW><ROW><id>4173307</id><snippet>set()</snippet></ROW><ROW><id>4173315</id><snippet>def mergeSortedLists(a, b):
    l = []
    while a and b:
        if a[0] &lt; b[0]:
            l.append(a.pop(0))
        else:
            l.append(b.pop(0))
    return l + a + b
</snippet></ROW><ROW><id>4173669</id><snippet>os.system</snippet></ROW><ROW><id>4173669</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen(['xterm'])
</snippet></ROW><ROW><id>4173669</id><snippet>subprocess</snippet></ROW><ROW><id>4173669</id><snippet>xterm</snippet></ROW><ROW><id>4173669</id><snippet>&gt;&gt;&gt; process = subprocess.Popen(['lsusb'], shell=False, stdout=subprocess.PIPE)
&gt;&gt;&gt; process.communicate()[0]
</snippet></ROW><ROW><id>4173669</id><snippet>shell=False</snippet></ROW><ROW><id>4173669</id><snippet>lsusb</snippet></ROW><ROW><id>4173669</id><snippet>subprocess</snippet></ROW><ROW><id>4173732</id><snippet>sudo easy_install</snippet></ROW><ROW><id>4173732</id><snippet>sudo python</snippet></ROW><ROW><id>4173810</id><snippet>import re

print(re.findall('\\blocal\\b', "Hello, locally local test local."))
// ['local', 'local']
</snippet></ROW><ROW><id>4173810</id><snippet>print(re.sub('\\blocal\\b', '*****', "Hello, LOCAL locally local test local.", flags=re.IGNORECASE))
// Hello, ***** locally ***** test *****.
</snippet></ROW><ROW><id>4173910</id><snippet>setuptools</snippet></ROW><ROW><id>4173910</id><snippet>easy_install</snippet></ROW><ROW><id>4173910</id><snippet>Installing easy_install script to /usr/local/bin
</snippet></ROW><ROW><id>4173910</id><snippet>sudo /usr/local/bin/easy_install bbfreeze
</snippet></ROW><ROW><id>4173937</id><snippet>CategoryData.cat1</snippet></ROW><ROW><id>4173937</id><snippet>CategoryData</snippet></ROW><ROW><id>4173937</id><snippet>class Object(object):
    a = 1
    b = Object.a
</snippet></ROW><ROW><id>4173937</id><snippet>Object</snippet></ROW><ROW><id>4173937</id><snippet>class _unnamed_class(object):
    a = 1
    b = Object.a
Object = _unnamed_class
</snippet></ROW><ROW><id>4173937</id><snippet>a</snippet></ROW><ROW><id>4173937</id><snippet>b</snippet></ROW><ROW><id>4173937</id><snippet>parent</snippet></ROW><ROW><id>4173937</id><snippet>class CategoryData(DataSet):
    class cat1:
        name = 'Category 1'
    class cat2:
        name = 'Category 2'
CategoryData.cat2.parent = CategoryData.cat1
</snippet></ROW><ROW><id>4174084</id><snippet>import re

words = ('apple', 'plepe', 'leoran', 'lemon')
s = 'bananaappleorangestrawberryapplepear'

x = set()

for w in words:
    for m in re.finditer(w, s):
        i = m.start()
        for j in range(i, i+len(w)):
            x.add(j)

result = ''.join(('x' if i in x else s[i]) for i in range(len(s)))
print result
</snippet></ROW><ROW><id>4174084</id><snippet>bananaxxxxxxxxxgestrawberryxxxxxxxar
</snippet></ROW><ROW><id>4174657</id><snippet>M-x ansi-term</snippet></ROW><ROW><id>4174657</id><snippet>M-x shell</snippet></ROW><ROW><id>4174657</id><snippet>M-x ansi-term</snippet></ROW><ROW><id>4174955</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; L=[[0, 1, 'f'], [4, 2, 't'], [9, 4, 'afsd']]
&gt;&gt;&gt; sorted(L, key=itemgetter(2))
[[9, 4, 'afsd'], [0, 1, 'f'], [4, 2, 't']]
</snippet></ROW><ROW><id>4175198</id><snippet>if condition:
    self.insert(self.toolbutton, self.insert(self.toolbutton, self._n)
    self._n += 1
</snippet></ROW><ROW><id>4175219</id><snippet> from django.contrib import admin
 admin.autodiscover()
</snippet></ROW><ROW><id>4175284</id><snippet>&gt;&gt;&gt; def pi(n):
...    tot = 0.0
...    for i in xrange(1, n * 4, 4):
...       tot += 4.0 / i - 4.0 / (i + 2)
...    return tot
...
&gt;&gt;&gt; pi(1000)
3.1410926536210386
&gt;&gt;&gt; pi(10000)
3.1415426535898203
&gt;&gt;&gt; pi(100000)
3.141587653589818
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4175598</id><snippet>&gt;&gt;&gt; def fun1(b):
...     b = b + 1
...     return b
... 
&gt;&gt;&gt; def fun2(a):
...     b = 1
...     return b
... 
&gt;&gt;&gt; fun1(5)
6
&gt;&gt;&gt; fun2(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'b' is not defined
</snippet></ROW><ROW><id>4175598</id><snippet>&gt;&gt;&gt; main()
[3, 2, 1]
[3, 2, 1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in main
NameError: global name 'b' is not defined
&gt;&gt;&gt; b = 'whatever'
&gt;&gt;&gt; main()
[3, 2, 1]
[3, 2, 1]
[3, 2, 1]
whatever
</snippet></ROW><ROW><id>4175606</id><snippet>src/
    main.py
    mod/
        __init__.py
        components/
            __init__.py
            expander.py
            language_id.py
        utilities/
            __init__.py
            functions.py
</snippet></ROW><ROW><id>4175606</id><snippet>from mod.components.expander import *
from mod.utilities.functions import *
</snippet></ROW><ROW><id>4175606</id><snippet>from ..utilities.functions import *
</snippet></ROW><ROW><id>4175680</id><snippet># settings.py
SORTS = {SORT_BY_PRICE: 'price'}
DEFAULT_SORT = 'last_visited'

# whatever.py
sort_field = settings.SORTS.get(sort_by, settings.DEFAULT_SORT)

stops = Stops.approved_objects.filter(**query_attributes).order_by(sort_field)
</snippet></ROW><ROW><id>4175698</id><snippet>del</snippet></ROW><ROW><id>4175698</id><snippet>&gt;&gt;&gt; d={}
&gt;&gt;&gt; d['asdf']=3
&gt;&gt;&gt; d['ele']=90
&gt;&gt;&gt; d
{'asdf': 3, 'ele': 90}
&gt;&gt;&gt; d['ele']=None
&gt;&gt;&gt; d
{'asdf': 3, 'ele': None}
&gt;&gt;&gt; del d['ele']
&gt;&gt;&gt; d
{'asdf': 3}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4175785</id><snippet>QuerySet.extra()</snippet></ROW><ROW><id>4175785</id><snippet>CASE ... END</snippet></ROW><ROW><id>4175785</id><snippet>Stops.objects.extra(select={'cost': 'CASE WHEN price=0 THEN 0 '
  'WHEN type=:EXPRESS_STOP THEN price/2 WHEN type=:LOCAL_STOP THEN price*2'},
  order_by=['cost'])
</snippet></ROW><ROW><id>4175785</id><snippet>QuerySet</snippet></ROW><ROW><id>4175785</id><snippet>L.sort(key=operator.attrgetter('cost'))</snippet></ROW><ROW><id>4176012</id><snippet>exception</snippet></ROW><ROW><id>4176012</id><snippet>try...except...finally</snippet></ROW><ROW><id>4176012</id><snippet>logging</snippet></ROW><ROW><id>4176012</id><snippet>#!/usr/bin/env python

import logging
logging.basicConfig(filename='warning.log', level=logging.WARNING)

try:
    1/0
except ZeroDivisionError, e:
    logging.warning('The following error occurred, yet I shall carry on regardless: %s', e)
</snippet></ROW><ROW><id>4176012</id><snippet>% cat warning.log
WARNING:root:The following error occurred, yet I shall carry on regardless: integer division or modulo by zero
</snippet></ROW><ROW><id>4176067</id><snippet>def starttoend(it):
  for line in it:
    if 'START' in line:
      yield line
      break
  for line in it:
    yield line
    if 'END' in line:
      break

l = ['asd', 'zxc', 'START123', '456789', 'qwertyEND', 'fgh', 'cvb']

i = iter(l)
for line in starttoend(i):
  print line
</snippet></ROW><ROW><id>4176072</id><snippet>u'\xa0'</snippet></ROW><ROW><id>4176072</id><snippet>u'''def foo():
\xa0\xa0return 42'''
</snippet></ROW><ROW><id>4176083</id><snippet>import sys
import os
from PyQt4 import QtGui, QtCore

class TestListView(QtGui.QListWidget):
    def __init__(self, type, parent=None):
        super(TestListView, self).__init__(parent)
        self.setAcceptDrops(True)
        self.setIconSize(QtCore.QSize(72, 72))

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(QtCore.Qt.CopyAction)
            event.accept()
            links = []
            for url in event.mimeData().urls():
                links.append(str(url.toLocalFile()))
            self.emit(QtCore.SIGNAL("dropped"), links)
        else:
            event.ignore()

class MainForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainForm, self).__init__(parent)

        self.view = TestListView(self)
        self.connect(self.view, QtCore.SIGNAL("dropped"), self.pictureDropped)
        self.setCentralWidget(self.view)

    def pictureDropped(self, l):
        for url in l:
            if os.path.exists(url):
                print(url)                
                icon = QtGui.QIcon(url)
                pixmap = icon.pixmap(72, 72)                
                icon = QtGui.QIcon(pixmap)
                item = QtGui.QListWidgetItem(url, self.view)
                item.setIcon(icon)        
                item.setStatusTip(url)        

def main():
    app = QtGui.QApplication(sys.argv)
    form = MainForm()
    form.show()
    app.exec_()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4176104</id><snippet>self.proceed(CheckVar1.get(),CheckVar2.get())</snippet></ROW><ROW><id>4176104</id><snippet>Button</snippet></ROW><ROW><id>4176104</id><snippet>command</snippet></ROW><ROW><id>4176104</id><snippet>self.proceed(CheckVar1.get(),CheckVar2.get())</snippet></ROW><ROW><id>4176104</id><snippet>def callback():
    return self.proceed(CheckVar1.get(), CheckVar2.get())
self.proceed1 = Button(root, text="\n Proceed", command=callback).grid(row=6)
</snippet></ROW><ROW><id>4176104</id><snippet>command</snippet></ROW><ROW><id>4176104</id><snippet>command</snippet></ROW><ROW><id>4176104</id><snippet>self.proceed</snippet></ROW><ROW><id>4176104</id><snippet>self.proceed</snippet></ROW><ROW><id>4176104</id><snippet>command</snippet></ROW><ROW><id>4176104</id><snippet>self.proceed</snippet></ROW><ROW><id>4176266</id><snippet>manage.py createinitialrevisions
</snippet></ROW><ROW><id>4176590</id><snippet>reactor.iterate()</snippet></ROW><ROW><id>4176590</id><snippet>reactor.stop()</snippet></ROW><ROW><id>4176705</id><snippet>imgfile = open("%s.png" % imageid, "rb")
print imgfile.read()
</snippet></ROW><ROW><id>4176705</id><snippet>stdout</snippet></ROW><ROW><id>4176705</id><snippet>import sys
if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
</snippet></ROW><ROW><id>4176705</id><snippet>imgFile = open(fileName, "rb")
sys.stdout.write("Content-type: image/jpeg\r\n")
sys.stdout.write("\r\n")
sys.stdout.write(imgFile.read())
imgFile.close()
</snippet></ROW><ROW><id>4177026</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; m = [4,5,6]
&gt;&gt;&gt; def f1(l, m):
...     l.extend(m)
...
&gt;&gt;&gt; def f2(l,m):
...     l += m
...
&gt;&gt;&gt; dis.dis(f1)
  2           0 LOAD_FAST                0 (l)
              3 LOAD_ATTR                0 (extend)
              6 LOAD_FAST                1 (m)
              9 CALL_FUNCTION            1
             12 POP_TOP
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f2)
  2           0 LOAD_FAST                0 (l)
              3 LOAD_FAST                1 (m)
              6 INPLACE_ADD
              7 STORE_FAST               0 (l)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE
</snippet></ROW><ROW><id>4177026</id><snippet>extend</snippet></ROW><ROW><id>4177026</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>4177026</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>4177643</id><snippet>lambda x: operator.itemgetter(0, 2, 4)(x.split())
</snippet></ROW><ROW><id>4177655</id><snippet>MAIL FROM:</snippet></ROW><ROW><id>4177780</id><snippet>def render_with_jinja2(self, values, template_name):
    import jinja2
    env = jinja2.Environment(...)
</snippet></ROW><ROW><id>4177780</id><snippet>jinja2</snippet></ROW><ROW><id>4177795</id><snippet>eval</snippet></ROW><ROW><id>4177795</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>4177795</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; a = ast.literal_eval('(1, 2, 3)')
&gt;&gt;&gt; a
(1, 2, 3)
&gt;&gt;&gt; b = ast.literal_eval('__import__("evil")')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/ast.py", line 68, in literal_eval
    return _convert(node_or_string)
  File "/usr/lib/python2.6/ast.py", line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</snippet></ROW><ROW><id>4178084</id><snippet>padx</snippet></ROW><ROW><id>4178084</id><snippet>ipadx</snippet></ROW><ROW><id>4178084</id><snippet>import Tkinter as tk
class MyApp():
    def __init__(self):
        self.root = tk.Tk()
        l1 = tk.Label(text="Hello")
        l2 = tk.Label(text="World")
        l1.grid(row=0, column=0, padx=(100,10))
        l2.grid(row=1, column=0, padx=(10,100))    
app=MyApp()
app.root.mainloop()
</snippet></ROW><ROW><id>4178192</id><snippet>client = gdata.contacts.client.ContactsClient()
client.client_login(usr, passwd, "myscript")
qry = gdata.contacts.client.ContactsQuery(max_results=3000)
feed = client.get_contacts(query=qry)

for entry in feed.entry:
    # do something with entry
</snippet></ROW><ROW><id>4178216</id><snippet>from guppy import hpy
h = hpy()
print h.heap()
</snippet></ROW><ROW><id>4178216</id><snippet>Partition of a set of 132527 objects. Total size = 8301532 bytes.
Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
0  35144  27  2140412  26   2140412  26 str
1  38397  29  1309020  16   3449432  42 tuple
2    530   0   739856   9   4189288  50 dict (no owner)
</snippet></ROW><ROW><id>4178216</id><snippet>python -m cProfile script.py
</snippet></ROW><ROW><id>4178216</id><snippet>         5 function calls in 0.000 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 myscript.py:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {execfile}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {range}
</snippet></ROW><ROW><id>4178312</id><snippet>ssh -aNL 7777:localhost:8888 B
</snippet></ROW><ROW><id>4178355</id><snippet>defaultdict</snippet></ROW><ROW><id>4178355</id><snippet>class InfiniteDict(defaultdict):
   def __init__(self):
      defaultdict.__init__(self, self.__class__)

class Counters(InfiniteDict):
   def __init__(self):
      InfiniteDict.__init__(self)                                               
      self.count = 0
      self.total = 0

   def show(self):
      print "%i out of %i" % (self.count, self.total)
</snippet></ROW><ROW><id>4178355</id><snippet>&gt;&gt;&gt; d = Counters()
&gt;&gt;&gt; d[1][2][3].total = 5
&gt;&gt;&gt; d[1][2][3].show()
0 out of 5
&gt;&gt;&gt; d[5].show()
0 out of 0
</snippet></ROW><ROW><id>4178518</id><snippet>from datetime import datetime
# build up some datetime objects.
z = datetime.strptime('2010-11-14 14:55:04.293000','%Y-%m-%d %H:%M:%S.%f')
b = datetime.strptime('2010-11-14 14:53:34.824000','%Y-%m-%d %H:%M:%S.%f')
a = datetime.strptime('2010-11-14 14:50:14.155000','%Y-%m-%d %H:%M:%S.%f')
# display them
print 'z =',z
print 'b =',b
print 'a =',a
# print the minute
print 'z min =',z.utctimetuple().tm_min
print 'b min =',b.utctimetuple().tm_min
print 'a min =',a.utctimetuple().tm_min
# print the minute an easier way
print 'z min =',z.minute
print 'b min =',b.minute
print 'a min =',a.minute
</snippet></ROW><ROW><id>4178518</id><snippet>z = 2010-11-14 14:55:04.293000
b = 2010-11-14 14:53:34.824000
a = 2010-11-14 14:50:14.155000
z min = 55
b min = 53
a min = 50
z min = 55
b min = 53
a min = 50
</snippet></ROW><ROW><id>4178672</id><snippet>/dev/null</snippet></ROW><ROW><id>4178672</id><snippet>os.dup()</snippet></ROW><ROW><id>4178672</id><snippet>os.dup2()</snippet></ROW><ROW><id>4178672</id><snippet>/dev/null</snippet></ROW><ROW><id>4178672</id><snippet>os.dup2()</snippet></ROW><ROW><id>4178672</id><snippet>devnull = open('/dev/null', 'w')
oldstdout_fno = os.dup(sys.stdout.fileno())
os.dup2(devnull.fileno(), 1)
makesomenoise()
os.dup2(oldstdout_fno, 1)
</snippet></ROW><ROW><id>4178752</id><snippet>calculateVertexIntensity</snippet></ROW><ROW><id>4178752</id><snippet>glColor</snippet></ROW><ROW><id>4178752</id><snippet>glLight*</snippet></ROW><ROW><id>4178752</id><snippet>glMaterial*</snippet></ROW><ROW><id>4178752</id><snippet>lightVector</snippet></ROW><ROW><id>4178752</id><snippet>vertex arrays</snippet></ROW><ROW><id>4178752</id><snippet>VBO</snippet></ROW><ROW><id>4178752</id><snippet>shaders</snippet></ROW><ROW><id>4178853</id><snippet>cursor.execute()</snippet></ROW><ROW><id>4178853</id><snippet>fetchall</snippet></ROW><ROW><id>4179072</id><snippet>__init__</snippet></ROW><ROW><id>4179072</id><snippet>__PListe</snippet></ROW><ROW><id>4179072</id><snippet>addProdukt</snippet></ROW><ROW><id>4179072</id><snippet>__Pliste</snippet></ROW><ROW><id>4179181</id><snippet>print(chr(ord('a')+1))
# b
</snippet></ROW><ROW><id>4179187</id><snippet>func(**{'as': 'foo', 'from': 'bar'})
</snippet></ROW><ROW><id>4179342</id><snippet>&gt;&gt;&gt; class Me:
...     pass
... 
&gt;&gt;&gt; me = Me()
&gt;&gt;&gt; print me
&lt;__main__.Me instance at 0xf98368&gt;
</snippet></ROW><ROW><id>4179342</id><snippet>__str__</snippet></ROW><ROW><id>4179342</id><snippet>&gt;&gt;&gt; class Me:
...     def __str__(self):
...             return "It's Me!"
... 
&gt;&gt;&gt; me = Me()
&gt;&gt;&gt; print me
It's Me!
</snippet></ROW><ROW><id>4179654</id><snippet>DataTable</snippet></ROW><ROW><id>4179654</id><snippet>import os
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext.webapp import template
from google.appengine.api import urlfetch

class GetTweetsHandler(webapp.RequestHandler):
    def get(self):
        user = self.request.get('user', 'someuser')
        fetched = urlfetch.fetch("http://api.twitter.com/1/statuses/user_timeline.json"
                                 "?screen_name=" + user + "&amp;count=200")
        tweets = json.loads(fetched.content)

        data = {'cols': [{'type': 'string', 'label': 'Tweets'}],
                'rows': [{'c': [{'v': tweet["text"]}]} for tweet in tweets]}

        template_values = {'tweet_data': json.dumps(data),
                           'user': user}
        path = os.path.join(os.path.dirname(__file__), 'index.html')
        self.response.out.write(template.render(path, template_values))


 def main():
   application = webapp.WSGIApplication([('/gettweets', GetTweetsHandler)],
                                        debug=True)
   run_wsgi_app(application)

 if __name__ == '__main__':
   main()
</snippet></ROW><ROW><id>4179654</id><snippet>&lt;html&gt;
&lt;head&gt;
    &lt;link rel="stylesheet" type="text/css" href="http://visapi-gadgets.googlecode.com/svn/trunk/wordcloud/wc.css"/&gt;
    &lt;script type="text/javascript" src="http://visapi-gadgets.googlecode.com/svn/trunk/wordcloud/wc.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="http://www.google.com/jsapi"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;
      google.load("visualization", "1");
      google.setOnLoadCallback(draw);
      function draw() {
        var tweet_data = {{tweet_data}};
        var data = new google.visualization.DataTable(tweet_data);
        var outputDiv = document.getElementById('wcdiv');
        var wc = new WordCloud(outputDiv);
        wc.draw(data, null);
      }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="wcdiv"&gt;&lt;/div&gt;
    &lt;form method='get'&gt;
       &lt;input type='text' name='user' value="{{user}}"&gt;&lt;/input&gt;
       &lt;input type='submit'&gt;&lt;/input&gt;
    &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>4179654</id><snippet>http://localhost:8080/gettweets/someuser</snippet></ROW><ROW><id>4179849</id><snippet>TypeError</snippet></ROW><ROW><id>4180322</id><snippet>ForeignKey</snippet></ROW><ROW><id>4180322</id><snippet>ModelB</snippet></ROW><ROW><id>4180322</id><snippet>mb = ModelB.objects.get(pk=prim_id)</snippet></ROW><ROW><id>4180322</id><snippet>modela</snippet></ROW><ROW><id>4180322</id><snippet>mb.modela</snippet></ROW><ROW><id>4180405</id><snippet>ssh user@remote.host nohup python scriptname.py &amp;
</snippet></ROW><ROW><id>4180405</id><snippet>nohup</snippet></ROW><ROW><id>4180438</id><snippet>mouse = "a"
</snippet></ROW><ROW><id>4180438</id><snippet>mouse</snippet></ROW><ROW><id>4180438</id><snippet>background = "b"
</snippet></ROW><ROW><id>4180438</id><snippet>background</snippet></ROW><ROW><id>4180438</id><snippet>list_ab = [mouse, background]
</snippet></ROW><ROW><id>4180438</id><snippet>mouse</snippet></ROW><ROW><id>4180438</id><snippet>background</snippet></ROW><ROW><id>4180438</id><snippet>list_ab</snippet></ROW><ROW><id>4180438</id><snippet>list_ab = ["a", "b"]
</snippet></ROW><ROW><id>4180438</id><snippet>for item in list_ab:
</snippet></ROW><ROW><id>4180438</id><snippet>item</snippet></ROW><ROW><id>4180438</id><snippet>item = "a"</snippet></ROW><ROW><id>4180438</id><snippet>    global item # I want to modify the GLOBAL item, which is mouse ad background
</snippet></ROW><ROW><id>4180438</id><snippet>item</snippet></ROW><ROW><id>4180438</id><snippet>    item = "modified"
</snippet></ROW><ROW><id>4180438</id><snippet>item</snippet></ROW><ROW><id>4180438</id><snippet>list_ab</snippet></ROW><ROW><id>4180438</id><snippet>mouse</snippet></ROW><ROW><id>4180438</id><snippet>background</snippet></ROW><ROW><id>4180438</id><snippet>item</snippet></ROW><ROW><id>4180438</id><snippet>list_ab</snippet></ROW><ROW><id>4180438</id><snippet>list_ab[0] = "modified"
list_ab[1] = "modified"
</snippet></ROW><ROW><id>4180438</id><snippet>mouse = "a"

def func():
    global mouse   # tell Python that you want to work with global variable
    mouse = "modified"

func()
print mouse # now mouse is "modified"
</snippet></ROW><ROW><id>4180438</id><snippet>background = g_base("bg.jpg") # g_base class instance
mouse = g_base("mouse.png",alpha=1) # g_base class instance

imgs_to_load = [mouse, background]

def Image_loader (img):
    # ..... code to load the image and convert it into pygame surface...
    return img_load

def main ():
    for image in img_to_load:
        global image
        image = Image_loader (img)
        print image # if I print image, it is a pygame surface

    print background # But here, outside the loop, image is still a g_base instance ?!?!
    print mouse # " "   

main()
</snippet></ROW><ROW><id>4180438</id><snippet>imgs_to_load = [g_base("bg.jpg"), g_base("mouse.png",alpha=1)] # list with a g_base class instances

def Image_loader(img):
    # ..... code to load the image and convert it into pygame surface...
    return img_load

def main ():
    imgs_in_pygame_format = [] # create an empty list
    for image in imgs_to_load:
        loaded_image = Image_loader(image) 
        imgs_in_pygame_format.append(loaded_image) # add to the list 

    for image in imgs_in_pygame_format:
        print image # every image in the list is a pygame surface

    # or
    print image[0]
    print image[1]

main()
</snippet></ROW><ROW><id>4180438</id><snippet>imgs_to_load = {} 
imgs_to_load["bg"] = g_base("bg.jpg")
imgs_to_load["mouse"] = g_base("mouse.png",alpha=1)

imgs_in_pygame_format = {} # create a global dictionary for loaded images

def main ():
    global imgs_in_pygame_format # import that global name into the local scope for write access
    for name, data in imgs_to_load.items():
        imgs_in_pygame_format[name] = Image_loader(data) # add to the dictionary

    for image in imgs_in_pygame_format:
        print image # every image in the dictionary is a pygame surface

    # or    
    print imgs_in_pygame_format["bg"]
    print imgs_in_pygame_format["mouse"]

main()
</snippet></ROW><ROW><id>4180438</id><snippet>def Image_loader(img):
    # ..... code to load the image and convert it into pygame surface...
    return img_load

class Image:
    def __init__(self, image):
        self.data = Image_loader(image)

def main ():
    bg = Image(g_base("bg.jpg"))
    mouse = Image(g_base("mouse.png",alpha=1))

    print bg.data
    print mouse.data

main()
</snippet></ROW><ROW><id>4180567</id><snippet>FileHandler</snippet></ROW><ROW><id>4180567</id><snippet>ch_file = logging.FileHandler("test_logger.conf",delay=True)
</snippet></ROW><ROW><id>4180600</id><snippet>mWEIGHT</snippet></ROW><ROW><id>4180600</id><snippet>for result in RESULTS:
        self.response.out.write("mUNIQUE: &lt;b&gt;%s&lt;/b&gt; | "
                                "mWEIGHT: %f | "  
                                "mCOUNT: %s | &lt;br /&gt;"  
                             % (result.mUNIQUE, 
                                result.mWEIGHT,  
                                result.mCOUNT,
                                )) 
</snippet></ROW><ROW><id>4180600</id><snippet>for result in RESULTS:
        self.response.out.write("mUNIQUE: &lt;b&gt;%s&lt;/b&gt; | "
                                "mWEIGHT: %f | "  
                                "mCOUNT: %s | &lt;br /&gt;"  
                             % (result.mUNIQUE, 
                                result.mWEIGHT if result.mWEIGHT is not None else 0.0,  
                                result.mCOUNT,
                                )) 
</snippet></ROW><ROW><id>4180741</id><snippet>urllib.urlencode()</snippet></ROW><ROW><id>4180741</id><snippet>&gt;&gt;&gt; urlencode([("var", "value"), ("var", "value2")])
'var=value&amp;var=value2'
</snippet></ROW><ROW><id>4180741</id><snippet>&gt;&gt;&gt; p = {"var": ["value", "value2"], "var2": ["yetanothervalue"]}
&gt;&gt;&gt; urlencode([(k, v) for k, vs in p.items() for v in vs])
'var=value&amp;var=value2&amp;var2=yetanothervalue'
</snippet></ROW><ROW><id>4180741</id><snippet>&gt;&gt;&gt; p = {"var": ["value", "value2"], "var2": "yetanothervalue"}
&gt;&gt;&gt; urlencode([(k, v) for k, vs in p.items()
...     for v in isinstance(vs, list) and vs or [vs]])
'var=value&amp;var=value2&amp;var2=yetanothervalue'
</snippet></ROW><ROW><id>4180745</id><snippet>set_sensitive</snippet></ROW><ROW><id>4180745</id><snippet>True</snippet></ROW><ROW><id>4180745</id><snippet>False</snippet></ROW><ROW><id>4180745</id><snippet>button.set_sensitive(True)    # enables the button
button.set_sensitive(False)   # disables the button</snippet></ROW><ROW><id>4180745</id><snippet>set_sensitive</snippet></ROW><ROW><id>4180745</id><snippet>gtk.Action</snippet></ROW><ROW><id>4180745</id><snippet>gtk.Widget</snippet></ROW><ROW><id>4180745</id><snippet>gtk.ActionGroup</snippet></ROW><ROW><id>4181129</id><snippet>def __init__...
     u = numpy.linspace(0, 2 * numpy.pi, 100)
     v = numpy.linspace(0, numpy.pi, 100)
     self.x = A * numpy.outer(numpy.cos(u), numpy.sin(v))
     self.y = A * numpy.outer(numpy.sin(u), numpy.sin(v))
     self.z = A * numpy.outer(numpy.ones(numpy.size(u)), numpy.cos(v))
     self.ax = Axes3D(self.fig)

def draw_fig(self):

        t = self.ax.plot_surface(self.x, self.y, self.z,  rstride=4, cstride=4,color='lightblue',linewidth=0)
</snippet></ROW><ROW><id>4181158</id><snippet>import lxml.html

doc = lxml.html.document_fromstring("""&lt;html&gt;
 &lt;body&gt;
   &lt;span class="text"&gt;One&lt;/span&gt;some text1&lt;/br&gt;
   &lt;span class="cyrillic"&gt;Мир&lt;/span&gt;some text2&lt;/br&gt;
 &lt;/body&gt;
&lt;/html&gt;
""")

txt1 = doc.xpath('/html/body/span[@class="text"]/following-sibling::text()[1]')
txt2 = doc.xpath('/html/body/span[@class="cyrillic"]/following-sibling::text()[1]')
</snippet></ROW><ROW><id>4181222</id><snippet>tree = html.fromstring(source.decode('utf-8'))</snippet></ROW><ROW><id>4181222</id><snippet># -*- coding:cp1251 -*-
import lxml
from lxml import html

filename = "t.html"
fread = open(filename, 'r')
source = fread.read()

tree = html.fromstring(source.decode('utf-8'))
fread.close()


tags = tree.xpath('//span[@class="one" and text()="Text"]') #This OK
print "name: ",tags[0].text
print "value: ",tags[0].tail

tags = tree.xpath('//span[@class="two" and text()="Привет"]') #This is now OK too

print "name: ",tags[0].text
print "value: ",tags[0].tail
</snippet></ROW><ROW><id>4181222</id><snippet>unicode</snippet></ROW><ROW><id>4181222</id><snippet>unicode</snippet></ROW><ROW><id>4181222</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; filename = '/tmp/cyrillic'
&gt;&gt;&gt; fread = open(filename, 'r')
&gt;&gt;&gt; source = fread.read()
&gt;&gt;&gt; source  # Scary
'&lt;html&gt;\n&lt;body&gt;\n&lt;span class="one"&gt;Text&lt;/span&gt;some text&lt;/br&gt;\n&lt;span class="two"&gt;\xcf\xf0\xe8\xe2\xe5\xf2&lt;/span&gt;\xd2\xe5\xea\xf1\xf2 \xed\xe0 \xf0\xf3\xf1\xf1\xea\xee\xec&lt;/br&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'
&gt;&gt;&gt; source = source.decode('cp1251')  # Let's try getting this right.
u'&lt;html&gt;\n&lt;body&gt;\n&lt;span class="one"&gt;Text&lt;/span&gt;some text&lt;/br&gt;\n&lt;span class="two"&gt;\u041f\u0440\u0438\u0432\u0435\u0442&lt;/span&gt;\u0422\u0435\u043a\u0441\u0442 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c&lt;/br&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'
&gt;&gt;&gt; soup = BeautifulSoup(source)
&gt;&gt;&gt; soup  # OK, that's looking right now. Note the &lt;/br&gt; was dropped as that's bad HTML with no meaning.
&lt;html&gt;
&lt;body&gt;
&lt;span class="one"&gt;Text&lt;/span&gt;some text
&lt;span class="two"&gt;Привет&lt;/span&gt;Текст на русском
&lt;/body&gt;
&lt;/html&gt;

&gt;&gt;&gt; soup.find('span', 'one').findNextSibling(text=True)
u'some text'
&gt;&gt;&gt; soup.find('span', 'two').findNextSibling(text=True)  # This looks a bit daunting ...
u'\u0422\u0435\u043a\u0441\u0442 \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c'
&gt;&gt;&gt; print _  # ... but it's not, really. Just Unicode chars.
Текст на русском
&gt;&gt;&gt; # Then you may also wish to get things by text:
&gt;&gt;&gt; print soup.find(text=u'Привет').findParent().findNextSibling(text=True)
Текст на русском
&gt;&gt;&gt; # You can't get things by attributes and the contained NavigableString at the same time, though. That may be a limitation.
</snippet></ROW><ROW><id>4181222</id><snippet>source.decode('cp1251')</snippet></ROW><ROW><id>4181222</id><snippet>source.decode('utf-8')</snippet></ROW><ROW><id>4181408</id><snippet>[v for k,v in mydict.items() if k &gt;= 6]</snippet></ROW><ROW><id>4181439</id><snippet>is_dst</snippet></ROW><ROW><id>4181439</id><snippet>time.mktime</snippet></ROW><ROW><id>4181439</id><snippet>is_dst</snippet></ROW><ROW><id>4181439</id><snippet>struct</snippet></ROW><ROW><id>4181439</id><snippet>dt.timetuple</snippet></ROW><ROW><id>4181439</id><snippet>is_dst</snippet></ROW><ROW><id>4181439</id><snippet>In [1]: import datetime as dt
In [2]: import time
In [3]: import calendar

In [17]: time_tuple=(1970, 1, 1, 0, 0, 0, 3, 1, 1)

In [18]: timestamp=calendar.timegm(time_tuple)
In [19]: timestamp
Out[19]: 0

In [20]: date=dt.datetime.utcfromtimestamp(timestamp)
In [21]: date
Out[21]: datetime.datetime(1970, 1, 1, 0, 0)

In [22]: tuple(date.timetuple())
Out[22]: (1970, 1, 1, 0, 0, 0, 3, 1, -1)
</snippet></ROW><ROW><id>4181439</id><snippet>In [11]: time_tuple=(1970, 1, 1, 0, 0, 0, 3, 1, 1)

In [12]: timestamp=time.mktime(time_tuple)
In [13]: timestamp
Out[13]: 14400.0

In [14]: date=dt.datetime.fromtimestamp(timestamp)
In [15]: date
Out[15]: datetime.datetime(1969, 12, 31, 23, 0)

In [16]: tuple(date.timetuple())
Out[16]: (1969, 12, 31, 23, 0, 0, 2, 365, -1)
</snippet></ROW><ROW><id>4181773</id><snippet>jester</snippet></ROW><ROW><id>4181773</id><snippet>Juggler</snippet></ROW><ROW><id>4181773</id><snippet>juggle</snippet></ROW><ROW><id>4181773</id><snippet>DroppedBall</snippet></ROW><ROW><id>4181773</id><snippet>DroppedBall</snippet></ROW><ROW><id>4181773</id><snippet>jester</snippet></ROW><ROW><id>4181773</id><snippet>crowd.Person</snippet></ROW><ROW><id>4181773</id><snippet>try</snippet></ROW><ROW><id>4181773</id><snippet>except jester.DroppedBall</snippet></ROW><ROW><id>4181773</id><snippet>food</snippet></ROW><ROW><id>4181773</id><snippet>fruit</snippet></ROW><ROW><id>4181773</id><snippet>vegetable</snippet></ROW><ROW><id>4181773</id><snippet>eat</snippet></ROW><ROW><id>4181773</id><snippet>food.Foodstuff</snippet></ROW><ROW><id>4181773</id><snippet>RottenException</snippet></ROW><ROW><id>4181773</id><snippet>food</snippet></ROW><ROW><id>4181773</id><snippet>__init__.py</snippet></ROW><ROW><id>4182219</id><snippet>plot_surface</snippet></ROW><ROW><id>4182219</id><snippet>colors = [color * (0.5 + norm(v) * 0.5) for v in shade]
</snippet></ROW><ROW><id>4182219</id><snippet>colors = np.outer(0.5+norm(shade)*0.5,color)
</snippet></ROW><ROW><id>4182219</id><snippet>plot_surface</snippet></ROW><ROW><id>4182219</id><snippet>norm</snippet></ROW><ROW><id>4182219</id><snippet>for rs in np.arange(0, rows-1, rstride):
    for cs in np.arange(0, cols-1, cstride):
</snippet></ROW><ROW><id>4182219</id><snippet>for rs in xrange(0,rows-1,rstride):
    for cs in xrange(0,cols-1,cstride):
</snippet></ROW><ROW><id>4182219</id><snippet>plot_surface</snippet></ROW><ROW><id>4182400</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('abdk3&lt;h1&gt;The content we need&lt;/h1&gt;aaaaabbb&lt;h2&gt;The content we need2&lt;/h2&gt;')
&gt;&gt;&gt; soup.h1
&lt;h1&gt;The content we need&lt;/h1&gt;
&gt;&gt;&gt; soup.h1.text
u'The content we need'
&gt;&gt;&gt; soup.h2
&lt;h2&gt;The content we need2&lt;/h2&gt;
&gt;&gt;&gt; soup.h2.text
u'The content we need2'
</snippet></ROW><ROW><id>4182587</id><snippet>raise NotImplementedError()</snippet></ROW><ROW><id>4182587</id><snippet>return NotImplemented</snippet></ROW><ROW><id>4182635</id><snippet>&gt;&gt;&gt; plain_string = "Hi!"
&gt;&gt;&gt; unicode_string = u"Hi!"
&gt;&gt;&gt; type(plain_string), type(unicode_string)
(&lt;type 'str'&gt;, &lt;type 'unicode'&gt;)
</snippet></ROW><ROW><id>4182635</id><snippet>&gt;&gt;&gt; s = "Hello!"
&gt;&gt;&gt; u = unicode(s, "utf-8")
</snippet></ROW><ROW><id>4183512</id><snippet>property</snippet></ROW><ROW><id>4183512</id><snippet>property</snippet></ROW><ROW><id>4183512</id><snippet>@x.setter
def x(self, value):
    'setting'
    self._x = value
</snippet></ROW><ROW><id>4183540</id><snippet>timestamp.sort(key=lambda x: time.strptime(x, '%Y-%m-%d %H:%M:%S')[0:6],
    reverse=True)
</snippet></ROW><ROW><id>4183696</id><snippet>str(msg.get_json())</snippet></ROW><ROW><id>4183696</id><snippet>str</snippet></ROW><ROW><id>4183696</id><snippet>str</snippet></ROW><ROW><id>4183696</id><snippet>json.dumps(msg.get_json())</snippet></ROW><ROW><id>4183696</id><snippet>str(msg.get_json().decode('utf-8'))</snippet></ROW><ROW><id>4183836</id><snippet>from datetime import datetime
format = '%Y-%m-%d %H:%M:%S'
print datetime.strptime(time2, format) - 
        datetime.strptime(time1, format)
# 1 day, 0:00:00
</snippet></ROW><ROW><id>4183836</id><snippet>import time
format = '%Y-%m-%d %H:%M:%S'
print time.mktime(time.strptime(time2, format)) - 
        time.mktime(time.strptime(time1, format))
# 86400.0
</snippet></ROW><ROW><id>4183914</id><snippet>easy_install zope.interface-3.6.1-py2.5-win32.egg</snippet></ROW><ROW><id>4184066</id><snippet>saying = Saying(content, category, added_date, added_user)
</snippet></ROW><ROW><id>4184066</id><snippet>id</snippet></ROW><ROW><id>4184066</id><snippet>saying.__dict__</snippet></ROW><ROW><id>4184066</id><snippet>id</snippet></ROW><ROW><id>4184066</id><snippet>content</snippet></ROW><ROW><id>4184066</id><snippet>saying = Saying(content=content, 
                category=category, 
                added_date=added_date, 
                added_user=added_user)
</snippet></ROW><ROW><id>4184219</id><snippet>$.parseJSON</snippet></ROW><ROW><id>4184219</id><snippet>dataType: 'json'</snippet></ROW><ROW><id>4184219</id><snippet>$.ajax</snippet></ROW><ROW><id>4184219</id><snippet>$.post</snippet></ROW><ROW><id>4184219</id><snippet>$.getJSON</snippet></ROW><ROW><id>4184289</id><snippet>\uXXXX</snippet></ROW><ROW><id>4184289</id><snippet>json</snippet></ROW><ROW><id>4184289</id><snippet>中</snippet></ROW><ROW><id>4184289</id><snippet>\u4e2d</snippet></ROW><ROW><id>4184356</id><snippet>sys.path</snippet></ROW><ROW><id>4184356</id><snippet>site</snippet></ROW><ROW><id>4184812</id><snippet>buffer.append(String.format("%02x", 0xFF &amp; digest[i]));
</snippet></ROW><ROW><id>4184870</id><snippet>while</snippet></ROW><ROW><id>4184870</id><snippet>if</snippet></ROW><ROW><id>4184870</id><snippet>while</snippet></ROW><ROW><id>4184870</id><snippet>if</snippet></ROW><ROW><id>4185488</id><snippet>while count &lt; 10:
    nameList.append(raw_input("Enter a name: "))
    count += 1
</snippet></ROW><ROW><id>4186080</id><snippet>sqlite-devel</snippet></ROW><ROW><id>4186126</id><snippet>object_list = [aa, ab, ... ]
for n, k in enumerate( object_list, start=1):
     ...
</snippet></ROW><ROW><id>4186144</id><snippet>typ, data = connection1.uid('FETCH', uid, 'RFC822')
connection2.append('Inbox', '', '', data[0][1])
</snippet></ROW><ROW><id>4186144</id><snippet>from email.parser import Parser
parser = Parser()
msg = parser.parsestr(data[0][1])
</snippet></ROW><ROW><id>4186144</id><snippet>typ, uid = connection2.uid('SEARCH', None, 'Header', 'Message-Id', msg['message-ID'])
</snippet></ROW><ROW><id>4186667</id><snippet>import socket

addr_range = "192.168.1.%d"

ip_address_up = []

# Use UDP. 
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

s.settimeout(2.0)

for i in range(1, 254):
    try:
        ip = addr_range % i
        socket.gethostbyaddr(ip)
        ip_address_up.append(ip)
    except socket.herror as ex:
        pass

print ip_address_up
</snippet></ROW><ROW><id>4186667</id><snippet>import socket
import ping

ip_address_up = []

addr_range = "192.168.1.%d"

for i in range(1, 254):       
   try:
       ip = addr_range % i
       delay = ping.do_one(ip, timeout=2)
       ip_address_up.append(ip)
   except (socket.herror, socket.timeout) as ex:
       pass

print ip_address_up
</snippet></ROW><ROW><id>4186674</id><snippet>result.groups()</snippet></ROW><ROW><id>4186674</id><snippet>result.group(1)</snippet></ROW><ROW><id>4186674</id><snippet>re.search</snippet></ROW><ROW><id>4186674</id><snippet>re.findall</snippet></ROW><ROW><id>4186674</id><snippet>re.finditer</snippet></ROW><ROW><id>4186674</id><snippet>findall</snippet></ROW><ROW><id>4186674</id><snippet>finditer</snippet></ROW><ROW><id>4186674</id><snippet>import urllib
import re    

pat = re.compile('[a-z][A-Z]{3}([a-z])[A-Z]{3}[a-z]')
print ''.join(pat.findall(urllib.urlopen(
    "http://www.pythonchallenge.com/pc/def/equality.html").read())) 
</snippet></ROW><ROW><id>4186674</id><snippet>re.findall</snippet></ROW><ROW><id>4186674</id><snippet>re.finditer</snippet></ROW><ROW><id>4186674</id><snippet>re.findall</snippet></ROW><ROW><id>4186674</id><snippet>'aBBBcDDDeFFFg'</snippet></ROW><ROW><id>4186674</id><snippet>'c'</snippet></ROW><ROW><id>4186674</id><snippet>'e'</snippet></ROW><ROW><id>4186715</id><snippet>f(*sys.argv[2:])</snippet></ROW><ROW><id>4187220</id><snippet>isinstance(x, (int, long, float, complex))</snippet></ROW><ROW><id>4187345</id><snippet>package_directory = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>4187345</id><snippet>package_directory</snippet></ROW><ROW><id>4187345</id><snippet>font_file = os.path.join(package_directory, 'fonts', 'myfont.ttf')
</snippet></ROW><ROW><id>4187345</id><snippet>os.chdir()</snippet></ROW><ROW><id>4187383</id><snippet>./manage.py dbshell</snippet></ROW><ROW><id>4187383</id><snippet>UPDATE sometable SET somefield=LOWER(somefield);
</snippet></ROW><ROW><id>4187497</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>4187497</id><snippet>python pymod.py
</snippet></ROW><ROW><id>4187712</id><snippet>b</snippet></ROW><ROW><id>4187712</id><snippet>b</snippet></ROW><ROW><id>4187712</id><snippet>ipdb&gt; help</snippet></ROW><ROW><id>4187712</id><snippet>x</snippet></ROW><ROW><id>4187712</id><snippet>y</snippet></ROW><ROW><id>4187712</id><snippet>ipdb&gt; y = variable
</snippet></ROW><ROW><id>4187712</id><snippet>ipdb&gt; exec 'b = variable'
</snippet></ROW><ROW><id>4187841</id><snippet>for line in iter(sys.stdin.readline, ""):
    print line
</snippet></ROW><ROW><id>4188480</id><snippet>_format_changes = (
    ('MMMM', '%B'),
    ('MMM',  '%b'), # note: the order in this list is critical
    ('MM',   '%m'),
    ('M',    '%m'), # note: no exact equivalent
    # etc etc
    )

def conv_format(s):
    for c, p in _format_changes:
        # s.replace(c, p) #### typo/braino
        s = s.replace(c, p)
    return s
</snippet></ROW><ROW><id>4188480</id><snippet>\</snippet></ROW><ROW><id>4188480</id><snippet>ctypes</snippet></ROW><ROW><id>4188480</id><snippet>C#</snippet></ROW><ROW><id>4188480</id><snippet>%</snippet></ROW><ROW><id>4188480</id><snippet>_format_changes = (
    ('yyyy', '%Y'), ('yyy', '%Y'), ('yy', '%y'),('y', '%y'),
    ('MMMM', '%B'), ('MMM', '%b'), ('MM', '%m'),('M', '%m'),
    ('dddd', '%A'), ('ddd', '%a'), ('dd', '%d'),('d', '%d'),
    ('HH', '%H'), ('H', '%H'), ('hh', '%I'), ('h', '%I'),
    ('mm', '%M'), ('m', '%M'),
    ('ss', '%S'), ('s', '%S'),
    ('tt', '%p'), ('t', '%p'),
    ('zzz', '%z'), ('zz', '%z'), ('z', '%z'),
    )

def cnv_csharp_date_fmt(in_fmt):
    ofmt = ""
    fmt = in_fmt
    while fmt:
        if fmt[0] == "'":
            # literal text enclosed in ''
            apos = fmt.find("'", 1)
            if apos == -1:
                # Input format is broken.
                apos = len(fmt)
            ofmt += fmt[1:apos].replace("%", "%%")
            fmt = fmt[apos+1:]
        elif fmt[0] == "\\":
            # One escaped literal character.
            # Note graceful behaviour when \ is the last character.
            ofmt += fmt[1:2].replace("%", "%%")
            fmt = fmt[2:]
        else:
            # This loop could be done with a regex "(yyyy)|(yyy)|etc".
            for intok, outtok in _format_changes:
                if fmt.startswith(intok):
                    ofmt += outtok
                    fmt = fmt[len(intok):]
                    break
            else:
                # Hmmmm, what does C# do here?
                # What do *you* want to do here?
                # I'll just emit one character as literal text
                # and carry on. Alternative: raise an exception.
                ofmt += fmt[0].replace("%", "%%")
                fmt = fmt[1:]
    return ofmt
</snippet></ROW><ROW><id>4188480</id><snippet>&gt;&gt;&gt; from cnv_csharp_date_fmt import cnv_csharp_date_fmt as cv
&gt;&gt;&gt; cv("yyyy-MM-dd hh:mm:ss")
'%Y-%m-%d %I:%M:%S'
&gt;&gt;&gt; cv("3pcts %%% yyyy-MM-dd hh:mm:ss")
'3pc%p%S %%%%%% %Y-%m-%d %I:%M:%S'
&gt;&gt;&gt; cv("'3pcts' %%% yyyy-MM-dd hh:mm:ss")
'3pcts %%%%%% %Y-%m-%d %I:%M:%S'
&gt;&gt;&gt; cv(r"3pc\t\s %%% yyyy-MM-dd hh:mm:ss")
'3pcts %%%%%% %Y-%m-%d %I:%M:%S'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4188500</id><snippet>sys.argv</snippet></ROW><ROW><id>4188500</id><snippet>argparse</snippet></ROW><ROW><id>4188500</id><snippet>required=True</snippet></ROW><ROW><id>4188500</id><snippet>add_argument</snippet></ROW><ROW><id>4188500</id><snippet>import argparse
parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument("foo", ..., required=True)
parser.parse_args()
</snippet></ROW><ROW><id>4188574</id><snippet>matplotlib</snippet></ROW><ROW><id>4188574</id><snippet>import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

def randrange(n, vmin, vmax):
    return (vmax-vmin)*np.random.rand(n) + vmin

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
n = 100
for c, m, zl, zh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:
    xs = randrange(n, 23, 32)
    ys = randrange(n, 0, 100)
    zs = randrange(n, zl, zh)
    ax.scatter(xs, ys, zs, c=c, marker=m)

ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()
</snippet></ROW><ROW><id>4188738</id><snippet>__file__</snippet></ROW><ROW><id>4188738</id><snippet>__file__</snippet></ROW><ROW><id>4188795</id><snippet>nc -l 80
</snippet></ROW><ROW><id>4188795</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>4188795</id><snippet>socket.setdefaulttimeout()</snippet></ROW><ROW><id>4188882</id><snippet>import sqlite3

class MyTable(object):
    def __init__(self):
        self.conn=sqlite3.connect(':memory:')
        self.cursor=self.conn.cursor()
        sql='''\
            CREATE TABLE foo ...
        '''
        self.execute(sql)
    def execute(self,sql,args):
        self.cursor.execute(sql,args)
    def delete(self,id,reason):
        sql='UPDATE table SET softdelete = 1, reason = %s where tableid = %s'
        self.cursor.execute(sql,(reason,id,))
    def verify(self):
        # Check that certain conditions are true
        # Report (or raise exception?) if violated
    def build_index(self):
        self.verify()
        ... 
</snippet></ROW><ROW><id>4188882</id><snippet>softdelete</snippet></ROW><ROW><id>4188882</id><snippet>softdelete</snippet></ROW><ROW><id>4188882</id><snippet>WHERE softdelete != 1</snippet></ROW><ROW><id>4188882</id><snippet>verify</snippet></ROW><ROW><id>4188882</id><snippet>build_index</snippet></ROW><ROW><id>4188939</id><snippet>Plasma.TabBar</snippet></ROW><ROW><id>4188939</id><snippet>clicked</snippet></ROW><ROW><id>4188939</id><snippet>self.connect(self.refresh, SIGNAL('clicked()'), self.view_tickets_ui)
</snippet></ROW><ROW><id>4188939</id><snippet>self.refresh.clicked.connect(self.view_tickets_ui).
</snippet></ROW><ROW><id>4189355</id><snippet>ChangeList</snippet></ROW><ROW><id>4189355</id><snippet>get_query_set</snippet></ROW><ROW><id>4189499</id><snippet>foo = [1,2,3,4,5]
</snippet></ROW><ROW><id>4189499</id><snippet>foo[1:4]
</snippet></ROW><ROW><id>4189499</id><snippet>foo[1:] == [2,3,4,5]
foo[:4] == [1,2,3,4]
</snippet></ROW><ROW><id>4189499</id><snippet>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b.append(5)
&gt;&gt;&gt; a
[1, 2, 3, 4, 5]
&gt;&gt;&gt;
&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b.append(5)
&gt;&gt;&gt; a
[1, 2, 3, 4]
</snippet></ROW><ROW><id>4189499</id><snippet>b = a</snippet></ROW><ROW><id>4189499</id><snippet>b</snippet></ROW><ROW><id>4189499</id><snippet>a</snippet></ROW><ROW><id>4189499</id><snippet>b</snippet></ROW><ROW><id>4189499</id><snippet>a</snippet></ROW><ROW><id>4189499</id><snippet>a</snippet></ROW><ROW><id>4189499</id><snippet>a</snippet></ROW><ROW><id>4189499</id><snippet>b</snippet></ROW><ROW><id>4189499</id><snippet>a</snippet></ROW><ROW><id>4189752</id><snippet>/proc/&lt;pid&gt;/cmdline</snippet></ROW><ROW><id>4189872</id><snippet>numpy.arange</snippet></ROW><ROW><id>4189872</id><snippet>numpy.linspace</snippet></ROW><ROW><id>4190009</id><snippet>os.exec*</snippet></ROW><ROW><id>4190009</id><snippet>chroot</snippet></ROW><ROW><id>4190009</id><snippet>exec*</snippet></ROW><ROW><id>4190009</id><snippet># ... do setup work
os.execl('/bin/chroot', '/bin/chroot', directory_name, shell_path)
</snippet></ROW><ROW><id>4190137</id><snippet>mmap</snippet></ROW><ROW><id>4190505</id><snippet>&gt;&gt;&gt; c.execute('''insert into stocks 
                 (date, trans, symbol, qty, price)values(?,?,?,?,?)''', 
                 ('08-26-1984', 'SELL', 'GOGL', 3, 400.00))
</snippet></ROW><ROW><id>4190604</id><snippet>models.py</snippet></ROW><ROW><id>4190604</id><snippet>from django.db import models
from widgets import ApproveStopWidget

class ApproveStopModelField(models.DateTimeField):
    pass

class Stop(models.model):
    # Other fields
    approve_ts = ApproveStopModelField('Approve place', null=True, blank=True)
</snippet></ROW><ROW><id>4190604</id><snippet>admin.py</snippet></ROW><ROW><id>4190604</id><snippet>from widgets import ApproveStopWidget
from models import ApproveStopModelField

class StopAdmin(admin.ModelAdmin):
    formfield_overrides = {
        ApproveStopModelField: {'widget': ApproveStopWidget }
    }
</snippet></ROW><ROW><id>4190729</id><snippet>or</snippet></ROW><ROW><id>4190729</id><snippet>if the value of "good" is True or "fine" is in talk</snippet></ROW><ROW><id>4190875</id><snippet>bad = set(['bad','terrible', 'dumb'])
good = set(['good','happy','awesome'])
talk = raw_input("type:")
if bad &amp; set(talk.lower().split()):
     print "I'm sorry to hear that :("
elif good &amp; set(talk.lower().split()):
     print "That's good!"
</snippet></ROW><ROW><id>4190933</id><snippet>np.seterr(invalid='raise')</snippet></ROW><ROW><id>4190933</id><snippet>log</snippet></ROW><ROW><id>4191327</id><snippet>infile = codecs.open(infilename,'r', encoding='utf-16-le')
outfile = codecs.open(outfilename, 'w', encoding='utf-16-le')
for line in infile:
    fixed_line = line.replace(originalText,replacementText)
    # no need to save up all the output lines in a list
    outfile.write(fixed_line)
infile.close()
outfile.close()
</snippet></ROW><ROW><id>4191719</id><snippet>import sys
import itertools

def getFirstDup(c, toTest):

    # Original idea using list slicing =&gt; 5.014 s
    if toTest == '1':
        for i in xrange(0, len(c)):
            if c[i] in c[:i]:
                return c[i]

    # Using two sets =&gt; 4.305 s
    elif toTest == '2':
        s = set()
        for i in c:
            s2 = s.copy()
            s.add(i)
            if len(s) == len(s2):
                return i

    # Using dictionary LUT =&gt; 0.763 s
    elif toTest == '3':
        d = {}
        for i in c:
            if i in d:
                return i
            else:
                d[i] = 1

    # Using set operations =&gt; 0.772 s
    elif toTest == '4':
        s = set()
        for i in c:
            if i in s:
                return i
            else:
                s.add(i)

    # Sorting then walking =&gt; 5.130 s
    elif toTest == '5':
        c = sorted(c)
        for i in xrange(1, len(c)):
            if c[i] == c[i - 1]:
                return c[i]

    # Sorting then groupby-ing =&gt; 5.086 s
    else:
        c = sorted(c)
        for k, g in itertools.groupby(c):
            if len(list(g)) &gt; 1:
                return k

    return None


c = list(xrange(0, 10000000))
c[5000] = 0

for i in xrange(0, 10):
    print getFirstDup(c, sys.argv[1])
</snippet></ROW><ROW><id>4191719</id><snippet>time</snippet></ROW><ROW><id>4191719</id><snippet>time python ./test.py 1
</snippet></ROW><ROW><id>4191719</id><snippet>1</snippet></ROW><ROW><id>4191719</id><snippet>in</snippet></ROW><ROW><id>4192437</id><snippet>from xml.etree.ElementTree import ElementTree
</snippet></ROW><ROW><id>4192453</id><snippet>@register.tag
def my_tag(parser, token):
    # This version uses a regular expression to parse tag contents.
    try:
        # Splitting by None == splitting by spaces.
        tag_name, var_name = token.contents.split(None, 1)
    except ValueError:
        raise template.TemplateSyntaxError, "%r tag requires arguments" % token.contents.split()[0]
    #this will "bind" the variable in the template to the actual_var object
    actual_var = template.Variable(var_name)
    return MyNode(template_variable)


class MyNode(template.Node):
    def __init__(self, actual_vare):
        self.actual_var = actual_var

    def render(self, context):
        actual_var_value = self.actual_var.resolve(context)
        #do something with it
        return result
</snippet></ROW><ROW><id>4192453</id><snippet>from django.template import RequestContext
def my_view(request):
    #request stuff
    return render_to_response("mytemplate.html", {'extra context': None,}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>4192453</id><snippet>@register.tag
def simple_request_aware_tag(parser, token):
    return SimpleRequestAwareNode()

class SimpleRequestAwareNode(template.Node):
    def render(self, context):
        request = template.Variable('request').resolve(context)
        #we want to return the current username for example
        return request.user.get_full_name()
</snippet></ROW><ROW><id>4192500</id><snippet>auth.User</snippet></ROW><ROW><id>4192500</id><snippet>class UserForm(ModelForm):                                                    
    bio = forms.CharField(widget=forms.Textarea(attrs={'cols': 80, 'rows': 20}))
    class Meta:                                                               
        model = User                                                          
        fields = ('first_name', 'last_name', 'email', 'bio')                  
</snippet></ROW><ROW><id>4192780</id><snippet>id</snippet></ROW><ROW><id>4192780</id><snippet>super</snippet></ROW><ROW><id>4192780</id><snippet>super</snippet></ROW><ROW><id>4193093</id><snippet>cairo.FILL_RULE_EVEN_ODD</snippet></ROW><ROW><id>4193093</id><snippet>fill()</snippet></ROW><ROW><id>4193797</id><snippet>dev_appserver.py --use_sqlite 
</snippet></ROW><ROW><id>4193797</id><snippet>dev_appserver</snippet></ROW><ROW><id>4193950</id><snippet>print "%s%s%s" % (varone,vartwo,varthree)
</snippet></ROW><ROW><id>4193950</id><snippet>%s</snippet></ROW><ROW><id>4193950</id><snippet>varone</snippet></ROW><ROW><id>4193950</id><snippet>%s</snippet></ROW><ROW><id>4193950</id><snippet>vartwo</snippet></ROW><ROW><id>4193950</id><snippet>print "{0}{1}{2}".format(varone,vartwo,varthree)
</snippet></ROW><ROW><id>4193986</id><snippet>with open("mydata.txt") as fp:
    for line in iter(fp.readline, ''):
        print line
</snippet></ROW><ROW><id>4194135</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>4194146</id><snippet>static struct hd_driveid hd;
int fd;

if ((fd = open("/dev/hda", O_RDONLY | O_NONBLOCK)) &lt; 0) {
    printf("ERROR opening /dev/hda\n");
    exit(1);
}

if (!ioctl(fd, HDIO_GET_IDENTITY, &amp;hd)) {
    printf("%.20s\n", hd.serial_no);
} else if (errno == -ENOMSG) {
    printf("No serial number available\n");
} else {
    perror("ERROR: HDIO_GET_IDENTITY");
    exit(1);
}
</snippet></ROW><ROW><id>4194146</id><snippet>import sys, os, fcntl, struct

if os.geteuid() &gt;  0:
    print("ERROR: Must be root to use")
    sys.exit(1)

with open(sys.argv[1], "rb") as fd:
    # tediously derived from the monster struct defined in &lt;hdreg.h&gt;
    # see comment at end of file to verify
    hd_driveid_format_str = "@ 10H 20s 3H 8s 40s 2B H 2B H 4B 6H 2B I 36H I Q 152H"
    # Also from &lt;hdreg.h&gt;
    HDIO_GET_IDENTITY = 0x030d
    # How big a buffer do we need?
    sizeof_hd_driveid = struct.calcsize(hd_driveid_format_str)

    # ensure our format string is the correct size
    # 512 is extracted using sizeof(struct hd_id) in the c code
    assert sizeof_hd_driveid == 512 

    # Call native function
    buf = fcntl.ioctl(fd, HDIO_GET_IDENTITY, " " * sizeof_hd_driveid)
    fields = struct.unpack(hd_driveid_format_str, buf)
    serial_no = fields[10].strip()
    model = fields[15].strip()
    print("Hard Disk Model: %s" % model)
    print("  Serial Number: %s" % serial_no)


## For documentation purposes, this is the struct copied from &lt;hdreg.h&gt;
# struct hd_driveid {
#   unsigned short  config;     /* lots of obsolete bit flags */
#   unsigned short  cyls;       /* Obsolete, "physical" cyls */
#   unsigned short  reserved2;  /* reserved (word 2) */
#   unsigned short  heads;      /* Obsolete, "physical" heads */
#   unsigned short  track_bytes;    /* unformatted bytes per track */
#   unsigned short  sector_bytes;   /* unformatted bytes per sector */
#   unsigned short  sectors;    /* Obsolete, "physical" sectors per track */
#   unsigned short  vendor0;    /* vendor unique */
#   unsigned short  vendor1;    /* vendor unique */
#   unsigned short  vendor2;    /* Retired vendor unique */
#   unsigned char   serial_no[20];  /* 0 = not_specified */
#   unsigned short  buf_type;   /* Retired */
#   unsigned short  buf_size;   /* Retired, 512 byte increments
#                    * 0 = not_specified
#                    */
#   unsigned short  ecc_bytes;  /* for r/w long cmds; 0 = not_specified */
#   unsigned char   fw_rev[8];  /* 0 = not_specified */
#   unsigned char   model[40];  /* 0 = not_specified */
#   unsigned char   max_multsect;   /* 0=not_implemented */
#   unsigned char   vendor3;    /* vendor unique */
#   unsigned short  dword_io;   /* 0=not_implemented; 1=implemented */
#   unsigned char   vendor4;    /* vendor unique */
#   unsigned char   capability; /* (upper byte of word 49)
#                    *  3:  IORDYsup
#                    *  2:  IORDYsw
#                    *  1:  LBA
#                    *  0:  DMA
#                    */
#   unsigned short  reserved50; /* reserved (word 50) */
#   unsigned char   vendor5;    /* Obsolete, vendor unique */
#   unsigned char   tPIO;       /* Obsolete, 0=slow, 1=medium, 2=fast */
#   unsigned char   vendor6;    /* Obsolete, vendor unique */
#   unsigned char   tDMA;       /* Obsolete, 0=slow, 1=medium, 2=fast */
#   unsigned short  field_valid;    /* (word 53)
#                    *  2:  ultra_ok    word  88
#                    *  1:  eide_ok     words 64-70
#                    *  0:  cur_ok      words 54-58
#                    */
#   unsigned short  cur_cyls;   /* Obsolete, logical cylinders */
#   unsigned short  cur_heads;  /* Obsolete, l heads */
#   unsigned short  cur_sectors;    /* Obsolete, l sectors per track */
#   unsigned short  cur_capacity0;  /* Obsolete, l total sectors on drive */
#   unsigned short  cur_capacity1;  /* Obsolete, (2 words, misaligned int)     */
#   unsigned char   multsect;   /* current multiple sector count */
#   unsigned char   multsect_valid; /* when (bit0==1) multsect is ok */
#   unsigned int    lba_capacity;   /* Obsolete, total number of sectors */
#   unsigned short  dma_1word;  /* Obsolete, single-word dma info */
#   unsigned short  dma_mword;  /* multiple-word dma info */
#   unsigned short  eide_pio_modes; /* bits 0:mode3 1:mode4 */
#   unsigned short  eide_dma_min;   /* min mword dma cycle time (ns) */
#   unsigned short  eide_dma_time;  /* recommended mword dma cycle time (ns) */
#   unsigned short  eide_pio;       /* min cycle time (ns), no IORDY  */
#   unsigned short  eide_pio_iordy; /* min cycle time (ns), with IORDY */
#   unsigned short  words69_70[2];  /* reserved words 69-70
#                    * future command overlap and queuing
#                    */
#   unsigned short  words71_74[4];  /* reserved words 71-74
#                    * for IDENTIFY PACKET DEVICE command
#                    */
#   unsigned short  queue_depth;    /* (word 75)
#                    * 15:5 reserved
#                    *  4:0 Maximum queue depth -1
#                    */
#   unsigned short  words76_79[4];  /* reserved words 76-79 */
#   unsigned short  major_rev_num;  /* (word 80) */
#   unsigned short  minor_rev_num;  /* (word 81) */
#   unsigned short  command_set_1;  /* (word 82) supported
#                    * 15:  Obsolete
#                    * 14:  NOP command
#                    * 13:  READ_BUFFER
#                    * 12:  WRITE_BUFFER
#                    * 11:  Obsolete
#                    * 10:  Host Protected Area
#                    *  9:  DEVICE Reset
#                    *  8:  SERVICE Interrupt
#                    *  7:  Release Interrupt
#                    *  6:  look-ahead
#                    *  5:  write cache
#                    *  4:  PACKET Command
#                    *  3:  Power Management Feature Set
#                    *  2:  Removable Feature Set
#                    *  1:  Security Feature Set
#                    *  0:  SMART Feature Set
#                    */
#   unsigned short  command_set_2;  /* (word 83)
#                    * 15:  Shall be ZERO
#                    * 14:  Shall be ONE
#                    * 13:  FLUSH CACHE EXT
#                    * 12:  FLUSH CACHE
#                    * 11:  Device Configuration Overlay
#                    * 10:  48-bit Address Feature Set
#                    *  9:  Automatic Acoustic Management
#                    *  8:  SET MAX security
#                    *  7:  reserved 1407DT PARTIES
#                    *  6:  SetF sub-command Power-Up
#                    *  5:  Power-Up in Standby Feature Set
#                    *  4:  Removable Media Notification
#                    *  3:  APM Feature Set
#                    *  2:  CFA Feature Set
#                    *  1:  READ/WRITE DMA QUEUED
#                    *  0:  Download MicroCode
#                    */
#   unsigned short  cfsse;      /* (word 84)
#                    * cmd set-feature supported extensions
#                    * 15:  Shall be ZERO
#                    * 14:  Shall be ONE
#                    * 13:6 reserved
#                    *  5:  General Purpose Logging
#                    *  4:  Streaming Feature Set
#                    *  3:  Media Card Pass Through
#                    *  2:  Media Serial Number Valid
#                    *  1:  SMART selt-test supported
#                    *  0:  SMART error logging
#                    */
#   unsigned short  cfs_enable_1;   /* (word 85)
#                    * command set-feature enabled
#                    * 15:  Obsolete
#                    * 14:  NOP command
#                    * 13:  READ_BUFFER
#                    * 12:  WRITE_BUFFER
#                    * 11:  Obsolete
#                    * 10:  Host Protected Area
#                    *  9:  DEVICE Reset
#                    *  8:  SERVICE Interrupt
#                    *  7:  Release Interrupt
#                    *  6:  look-ahead
#                    *  5:  write cache
#                    *  4:  PACKET Command
#                    *  3:  Power Management Feature Set
#                    *  2:  Removable Feature Set
#                    *  1:  Security Feature Set
#                    *  0:  SMART Feature Set
#                    */
#   unsigned short  cfs_enable_2;   /* (word 86)
#                    * command set-feature enabled
#                    * 15:  Shall be ZERO
#                    * 14:  Shall be ONE
#                    * 13:  FLUSH CACHE EXT
#                    * 12:  FLUSH CACHE
#                    * 11:  Device Configuration Overlay
#                    * 10:  48-bit Address Feature Set
#                    *  9:  Automatic Acoustic Management
#                    *  8:  SET MAX security
#                    *  7:  reserved 1407DT PARTIES
#                    *  6:  SetF sub-command Power-Up
#                    *  5:  Power-Up in Standby Feature Set
#                    *  4:  Removable Media Notification
#                    *  3:  APM Feature Set
#                    *  2:  CFA Feature Set
#                    *  1:  READ/WRITE DMA QUEUED
#                    *  0:  Download MicroCode
#                    */
#   unsigned short  csf_default;    /* (word 87)
#                    * command set-feature default
#                    * 15:  Shall be ZERO
#                    * 14:  Shall be ONE
#                    * 13:6 reserved
#                    *  5:  General Purpose Logging enabled
#                    *  4:  Valid CONFIGURE STREAM executed
#                    *  3:  Media Card Pass Through enabled
#                    *  2:  Media Serial Number Valid
#                    *  1:  SMART selt-test supported
#                    *  0:  SMART error logging
#                    */
#   unsigned short  dma_ultra;  /* (word 88) */
#   unsigned short  trseuc;     /* time required for security erase */
#   unsigned short  trsEuc;     /* time required for enhanced erase */
#   unsigned short  CurAPMvalues;   /* current APM values */
#   unsigned short  mprc;       /* master password revision code */
#   unsigned short  hw_config;  /* hardware config (word 93)
#                    * 15:  Shall be ZERO
#                    * 14:  Shall be ONE
#                    * 13:
#                    * 12:
#                    * 11:
#                    * 10:
#                    *  9:
#                    *  8:
#                    *  7:
#                    *  6:
#                    *  5:
#                    *  4:
#                    *  3:
#                    *  2:
#                    *  1:
#                    *  0:  Shall be ONE
#                    */
#   unsigned short  acoustic;   /* (word 94)
#                    * 15:8 Vendor's recommended value
#                    *  7:0 current value
#                    */
#   unsigned short  msrqs;      /* min stream request size */
#   unsigned short  sxfert;     /* stream transfer time */
#   unsigned short  sal;        /* stream access latency */
#   unsigned int    spg;        /* stream performance granularity */
#   unsigned long long lba_capacity_2;/* 48-bit total number of sectors */
#   unsigned short  words104_125[22];/* reserved words 104-125 */
#   unsigned short  last_lun;   /* (word 126) */
#   unsigned short  word127;    /* (word 127) Feature Set
#                    * Removable Media Notification
#                    * 15:2 reserved
#                    *  1:0 00 = not supported
#                    *  01 = supported
#                    *  10 = reserved
#                    *  11 = reserved
#                    */
#   unsigned short  dlf;        /* (word 128)
#                    * device lock function
#                    * 15:9 reserved
#                    *  8   security level 1:max 0:high
#                    *  7:6 reserved
#                    *  5   enhanced erase
#                    *  4   expire
#                    *  3   frozen
#                    *  2   locked
#                    *  1   en/disabled
#                    *  0   capability
#                    */
#   unsigned short  csfo;       /*  (word 129)
#                    * current set features options
#                    * 15:4 reserved
#                    *  3:  auto reassign
#                    *  2:  reverting
#                    *  1:  read-look-ahead
#                    *  0:  write cache
#                    */
#   unsigned short  words130_155[26];/* reserved vendor words 130-155 */
#   unsigned short  word156;    /* reserved vendor word 156 */
#   unsigned short  words157_159[3];/* reserved vendor words 157-159 */
#   unsigned short  cfa_power;  /* (word 160) CFA Power Mode
#                    * 15 word 160 supported
#                    * 14 reserved
#                    * 13
#                    * 12
#                    * 11:0
#                    */
#   unsigned short  words161_175[15];/* Reserved for CFA */
#   unsigned short  words176_205[30];/* Current Media Serial Number */
#   unsigned short  words206_254[49];/* reserved words 206-254 */
#   unsigned short  integrity_word; /* (word 255)
#                    * 15:8 Checksum
#                    *  7:0 Signature
#                    */
# };
</snippet></ROW><ROW><id>4194146</id><snippet>fcntl</snippet></ROW><ROW><id>4194146</id><snippet>struct</snippet></ROW><ROW><id>4194146</id><snippet>fmark@fmark-laptop:~/Desktop/hdserial$ sudo python hd.py "/dev/sda"
Hard Disk Model: FUJITSU MHV2080BH PL
  Serial Number: NW--------
</snippet></ROW><ROW><id>4194146</id><snippet>#include &lt;linux/hdreg.h&gt;</snippet></ROW><ROW><id>4194146</id><snippet>HDIO_GET_IDENTITY</snippet></ROW><ROW><id>4194146</id><snippet>struct hd_driveid</snippet></ROW><ROW><id>4194146</id><snippet>HDIO_GET_IDENTITY</snippet></ROW><ROW><id>4194146</id><snippet>/usr/include/linux/hdreg.h</snippet></ROW><ROW><id>4194146</id><snippet> #define HDIO_GET_IDENTITY       0x030d  /* get IDE identification info */
</snippet></ROW><ROW><id>4194146</id><snippet>HDIO_GET_IDENTITY</snippet></ROW><ROW><id>4194146</id><snippet>0x030d</snippet></ROW><ROW><id>4194146</id><snippet>import wmi
c = wmi.WMI()
for item in c.Win32_PhysicalMedia():
    print item
</snippet></ROW><ROW><id>4194282</id><snippet>import os
import sys

sys.path.insert(0,os.sep.join(os.path.abspath(__file__).split(os.sep)[:-2]))


os.environ['DJANGO_SETTINGS_MODULE'] = 'yourprojectname.settings'

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
</snippet></ROW><ROW><id>4194282</id><snippet>NameVirtualHost *:80
&lt;VirtualHost *:80&gt;
    ServerAdmin webmaster@localhost
    ServerName www.yourprojectname.com
    Alias /media/ /home/diegueus9/workspace/yourprojectname/media/

    &lt;Directory /home/diegueus9/workspace/yourprojectname/media/&gt;
        Order deny,allow
        Allow from all
    &lt;/Directory&gt;

    WSGIScriptReloading On
    WSGIDaemonProcess yourprojectname 
    WSGIProcessGroup yourprojectname
    WSGIApplicationGroup yourprojectname
    WSGIPassAuthorization On

    WSGIScriptAlias / /home/diegueus9/workspace/yourprojectname/yourfile.wsgi
    ErrorLog /var/log/apache2/yourprojectname-error.log

    # Possible values include: debug, info, notice, warn, error, crit,
    # alert, emerg.
    LogLevel debug

    CustomLog /var/log/apache2/yourprojectname-access.log combined

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>4194402</id><snippet>get_range</snippet></ROW><ROW><id>4194402</id><snippet>dict</snippet></ROW><ROW><id>4194402</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>4194402</id><snippet>itertools.islice</snippet></ROW><ROW><id>4194402</id><snippet>import itertools
def get_range(dictionary, begin, end):
  return dict(itertools.islice(dictionary.iteritems(), begin, end+1)) 
</snippet></ROW><ROW><id>4194402</id><snippet>def get_range(dictionary, begin, end):
  return dict((k, v) for k, v in dictionary.iteritems() if begin &lt;= k &lt;= end)
</snippet></ROW><ROW><id>4194402</id><snippet>dict</snippet></ROW><ROW><id>4194402</id><snippet>dict</snippet></ROW><ROW><id>4194402</id><snippet>def get_range(dictionary, begin, end):
  return {k: v for k, v in dictionary.items() if begin &lt;= k &lt;= end}
</snippet></ROW><ROW><id>4194608</id><snippet>for line in input:
    key, val = line.split(':')
    if key == 'particular':
       val = '111222333'
</snippet></ROW><ROW><id>4194608</id><snippet>for line in input:
    re.sub('^particular : .*', 'particular : 111222333')
</snippet></ROW><ROW><id>4195037</id><snippet>project_name
  |
  | --- manage.py
  |
  | --- settings.py
  |
  | --- template
          |
          | -- index.html
          |
          | -- base.html
          |
          | -- 404.html
          | 
          | -- conection_app
          |         | 
                    | -- login.html
  |
  |
  | --- connection_app
          |
          | -- login
                 |
                 | -- view.py
  |
  |
  | --- finance_app 
  |        
</snippet></ROW><ROW><id>4195302</id><snippet>import argparse

def required_length(nmin,nmax):
    class RequiredLength(argparse.Action):
        def __call__(self, parser, args, values, option_string=None):
            if not nmin&lt;=len(values)&lt;=nmax:
                msg='argument "{f}" requires between {nmin} and {nmax} arguments'.format(
                    f=self.dest,nmin=nmin,nmax=nmax)
                raise argparse.ArgumentTypeError(msg)
            setattr(args, self.dest, values)
    return RequiredLength

parser=argparse.ArgumentParser(prog='PROG')
parser.add_argument('-f', nargs='+', action=required_length(2,3))

args=parser.parse_args('-f 1 2 3'.split())
print(args.f)
# ['1', '2', '3']

try:
    args=parser.parse_args('-f 1 2 3 4'.split())
    print(args)
except argparse.ArgumentTypeError as err:
    print(err)
# argument "f" requires between 2 and 3 arguments
</snippet></ROW><ROW><id>4195361</id><snippet>from Tkinter import *
from ttk import *
</snippet></ROW><ROW><id>4195412</id><snippet>urllib2</snippet></ROW><ROW><id>4195412</id><snippet>POST</snippet></ROW><ROW><id>4195412</id><snippet>def call_api(method, **kwargs):
    url = API_URL + method
    req = urllib2.Request(url)

    if kwargs:
        req.add_data(urllib.urlencode(kwargs))

    auth = 'Basic ' + base64.urlsafe_b64encode("%s:%s" % (USER, PASS))
    req.add_header('Authorization', auth)

    # req.get_method() -&gt; 'POST'

    return urllib2.urlopen(req)
</snippet></ROW><ROW><id>4196320</id><snippet>apt-get install python-lxml
</snippet></ROW><ROW><id>4197138</id><snippet>np.argwhere((Ax == Bx.min()) &amp; (Ay == By.min())) 
</snippet></ROW><ROW><id>4197138</id><snippet>dx</snippet></ROW><ROW><id>4197138</id><snippet>dy</snippet></ROW><ROW><id>4197138</id><snippet>ix = (Bxmin - Axmin) / dx</snippet></ROW><ROW><id>4197138</id><snippet>import numpy as np

# Generate grids of coordinates from a min, max, and spacing
dx, dy = 0.5, 0.5

# For the larger grid...
Axmin, Axmax = -180, 180
Aymin, Aymax = -90, 90

# For the smaller grid...
Bxmin, Bxmax = -5, 10
Bymin, Bymax = 30, 40

# Generate the indicies on a 2D grid
Ax = np.arange(Axmin, Axmax+dx, dx)
Ay = np.arange(Aymin, Aymax+dy, dy)
Ax, Ay = np.meshgrid(Ax, Ay)

Bx = np.arange(Bxmin, Bxmax+dx, dx)
By = np.arange(Bymin, Bymax+dy, dy)
Bx, By = np.meshgrid(Bx, By)

# Find the corner of where the two grids overlap...
ix, iy = np.argwhere((Ax == Bxmin) &amp; (Ay == Bymin))[0]

# Assert that the coordinates are identical.
assert np.all(Ax[ix:ix+Bx.shape[0], iy:iy+Bx.shape[1]] == Bx) 
assert np.all(Ay[ix:ix+Bx.shape[0], iy:iy+Bx.shape[1]] == By) 
</snippet></ROW><ROW><id>4197492</id><snippet>&lt;app_label&gt;/&lt;model_name&gt;_form.html</snippet></ROW><ROW><id>4197492</id><snippet>{{ form.name.label_tag }} {{ form.name }}
</snippet></ROW><ROW><id>4197634</id><snippet>a = {'home': {'name': 'Team1', 'score': 0}, 'away': {'name': 'Team2', 'score': 0}}
b = {'home': {'name': 'Team1', 'score': 2}, 'away': {'name': 'Team2', 'score': 0}}

def valchange(d1, d2, parent=''):
    changes=[]
    for k in d1.keys():
        if type(d1[k])==type({}):
            changes.extend(valchange(d1[k], d2[k], k))
        else:
            if d1[k]&lt;&gt;d2[k]:
                if parent=='':
                    changes.append(k + ' has changed ')
                else:
                    changes.append(parent + '.' + k + ' has changed')
    return changes

print valchange(a,b)

&gt;&gt;&gt;
['home.score has changed']    
</snippet></ROW><ROW><id>4197743</id><snippet>python</snippet></ROW><ROW><id>4197743</id><snippet>D:\&gt; echo "test" | python tee.py
</snippet></ROW><ROW><id>4197743</id><snippet>sys.stdin</snippet></ROW><ROW><id>4197743</id><snippet>raw_input()</snippet></ROW><ROW><id>4197743</id><snippet>fileinput.input()</snippet></ROW><ROW><id>4197783</id><snippet>&lt;projects&gt;
    &lt;projects&gt;
        &lt;id&gt;
            ...
        &lt;/id&gt;
    &lt;/project&gt;
&lt;/projects&gt;
</snippet></ROW><ROW><id>4197783</id><snippet>/project/id/text()</snippet></ROW><ROW><id>4197783</id><snippet>IndexError</snippet></ROW><ROW><id>4197783</id><snippet>/project</snippet></ROW><ROW><id>4197783</id><snippet>/projects/project</snippet></ROW><ROW><id>4197783</id><snippet>//project</snippet></ROW><ROW><id>4197783</id><snippet>//project/id/text()</snippet></ROW><ROW><id>4197869</id><snippet>from itertools import tee, islice, izip_longest
def get_next(some_iterable, window=1):
    items, nexts = tee(some_iterable, 2)
    nexts = islice(nexts, window, None)
    return izip_longest(items, nexts)
</snippet></ROW><ROW><id>4197869</id><snippet>for line, next_line in get_next(myfile):
    if next_line and next_line.startswith("0"):
        ... do stuff
</snippet></ROW><ROW><id>4197869</id><snippet>window</snippet></ROW><ROW><id>4198199</id><snippet>robjects.r('name &lt;- read.csv(filename.csv)')
</snippet></ROW><ROW><id>4198199</id><snippet>array_ex = np.array([[4,3],[3,2], [1,5]])
rmatrix = robjects.r('matrix')
rdf = robjects.r('data.frame')
rlm = robjects.r('lm')

mat_ex = rmatrix(array_ex, ncol = 2)
df_ex = rdf(mat_ex) 
fit_ex = rlm('X1 ~ X2', data = df_ex)
</snippet></ROW><ROW><id>4198244</id><snippet>authenticate</snippet></ROW><ROW><id>4198244</id><snippet>class MyBackend:
    def authenticate(self, username=None, password=None):
        # Check the username/password and return a User.
</snippet></ROW><ROW><id>4198244</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>4198244</id><snippet>settings.py</snippet></ROW><ROW><id>4198273</id><snippet>&gt;&gt;&gt; from BitVector import BitVector
&gt;&gt;&gt; bv = BitVector(intVal = 0x13A5, size = 32)
&gt;&gt;&gt; print bv
00000000000000000001001110100101
&gt;&gt;&gt; bv &lt;&lt; 6                            #does a cyclic left shift
&gt;&gt;&gt; print bv
00000000000001001110100101000000
&gt;&gt;&gt; bv[0] = 1
&gt;&gt;&gt; print bv
10000000000001001110100101000000
&gt;&gt;&gt; bv &lt;&lt; 3                            #cyclic shift again, should be more apparent
&gt;&gt;&gt; print bv
00000000001001110100101000000100
</snippet></ROW><ROW><id>4198383</id><snippet>import os
import shutil

def maven_to_eclipse(maven_dir, eclipse_dir):
    # assumes mode of maven_dir will be the same as eclipse_dir
    new_mode = os.stat(maven_dir).st_mode
    if os.path.exists(eclipse_dir):
        # if new_dir doesn't exist
        # create it with same permissions as old_dir
        os.mkdirs(eclipse_dir, new_mode)

    # create directories under new_dir: src, ebscontent, ebscontent/META-INF
    # use os.path.join to work on multiple os 
    os.mkdir(os.path.join(eclipse_dir, 'src'), new_mode)
    os.mkdir(os.path.join(eclipse_dir, 'ebscontent'), new_mode)
    os.mkdir(os.path.join(eclipse_dir, 'ebscontent', 'META-INF'), new_mode)

    # cp old/deployment.xml new/ebsconent/META-INF/deployment.xml
    shutil.copy2(os.path.join(maven_dir, 'deployment.xml'),
        os.path.join(eclipse_dir, 'ebscontent', 'META-INF', 'deployment.xml'))

    # cp old/jboss-esb-unfiltered.xml new/ebsconent/META-INF/jboss-esb-unfiltered.xml
    shutil.copy2(os.path.join(maven_dir, 'jboss-esb-unfiltered.xml'),
        os.path.join(eclipse_dir, 'ebscontent', 'META-INF', 'jboss-esb-unfiltered.xml'))

    # cp old/log4j.xml new/ebsconent/log4j.xml
    shutil.copy2(os.path.join(maven_dir, 'log4j.xml'),
        os.path.join(eclipse_dir, 'ebscontent', 'log4j.xml'))

    # cp old/readme.txt new/readme.txt
    shutil.copy2(os.path.join(maven_dir, 'readme.txt'),
        os.path.join(eclipse_dir, 'readme.txt'))

if __name__ == '__main__':
    base_path = 'C:\\Path\\To\\Maven Dirs'
    maven_dirs = ('my_example', 'another_example', 'third_example')
    for maven_dir in maven_dirs:
        maven_to_eclipse(os.path.join(base_path, maven_dir), 
            os.path.join(base_bath, maven_dir + '_eclipse'))
</snippet></ROW><ROW><id>4198383</id><snippet>base_path</snippet></ROW><ROW><id>4198383</id><snippet>maven_dirs</snippet></ROW><ROW><id>4198712</id><snippet>$.get('url', {
    xhr: 'yes' // add this extra parameter here
}, function(){

});
</snippet></ROW><ROW><id>4199355</id><snippet>x = 'before'
a = [x for x in 1, 2, 3]
print x # this prints '3', not 'before'
</snippet></ROW><ROW><id>4199420</id><snippet>inst = form.save()

if not inst.title:
    inst.title = "Post # %s" % inst.pk
    inst.save()
</snippet></ROW><ROW><id>4199541</id><snippet>&gt;&gt;&gt; from PIL import Image
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; i = Image.open(r'C:\Pictures\pics\test.png')
&gt;&gt;&gt; a = np.array(i.convert('L'))
&gt;&gt;&gt; a.shape
(2000, 2000)
&gt;&gt;&gt; b = a.sum(0) # or 1 depending on the axis you want to sum across
&gt;&gt;&gt; b.shape
(2000,)
</snippet></ROW><ROW><id>4199699</id><snippet>%%</snippet></ROW><ROW><id>4199699</id><snippet>'([0-9]{1,3}[%%])([%s]?)' % (config.SERIES)
</snippet></ROW><ROW><id>4199699</id><snippet>'([0-9]{{1,3}}[%])([{0}]?)'.format(config.SERIES)
</snippet></ROW><ROW><id>4199726</id><snippet>stride</snippet></ROW><ROW><id>4199726</id><snippet>stride = 2*bmpinfo['bmWidth']</snippet></ROW><ROW><id>4199726</id><snippet>stride = (stride + 3) / 4) * 4</snippet></ROW><ROW><id>4199772</id><snippet>def application(environ, start_response):
    start_response('200 OK', [('content-type', 'text/html')])
    return ['Hello world!']
</snippet></ROW><ROW><id>4199772</id><snippet>&lt;VirtualHost *&gt;
    ServerName example.com
    WSGIScriptAlias /server/location/address /path/to/helloworld.py
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>4199881</id><snippet>myobj = 10
names = ['att1', 'att2', 'att3', 'real']
results = dict((name, getattr(myobj, name, None)) for name in names)
#{'real': 10, 'att3': None, 'att2': None, 'att1': None}
</snippet></ROW><ROW><id>4200349</id><snippet>openssl-dev</snippet></ROW><ROW><id>4200369</id><snippet>site-packages</snippet></ROW><ROW><id>4200369</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>4200369</id><snippet>easy_install</snippet></ROW><ROW><id>4200369</id><snippet>easy_install</snippet></ROW><ROW><id>4200369</id><snippet>/usr/bin</snippet></ROW><ROW><id>4200375</id><snippet>Point</snippet></ROW><ROW><id>4200375</id><snippet>tuple</snippet></ROW><ROW><id>4200375</id><snippet>namedtuple('Point', 'x y z')</snippet></ROW><ROW><id>4200375</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; class Point(namedtuple('Point', 'x y z')):
...     def __add__(self, other):
...             return Point((i + j for i, j in zip(self, other)))
...
...     def __mul__(self, other):
...             return sum(i * j for i, j in zip(self, other))
...
...     def __sub__(self, other):
...             return Point((i - j for i, j in zip(self, other)))
...
...     @property
...     def mod(self):
...             from math import sqrt
...             return sqrt(sum(i*i for i in self))
...
</snippet></ROW><ROW><id>4200375</id><snippet>&gt;&gt;&gt; Point(1, 2, 3)
Point(x=1, y=2, z=3)
&gt;&gt;&gt; Point(x=1, y=2, z=3).mod
3.7416573867739413
&gt;&gt;&gt; Point(x=1, y=2, z=3) * Point(0, 0, 1)
3
&gt;&gt;&gt; Point._make((1, 2, 3))
Point(x=1, y=2, z=3)
</snippet></ROW><ROW><id>4200492</id><snippet>object</snippet></ROW><ROW><id>4200492</id><snippet>__del__</snippet></ROW><ROW><id>4200492</id><snippet>&gt;&gt;&gt; object().__del__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute '__del__'
</snippet></ROW><ROW><id>4200731</id><snippet>pix = mapImage.get_region(x,y,1,1).get_image_data().get_data("RGBA", 4)

print 'r = ' + str(ord(pix[0]))
print 'g = ' + str(ord(pix[1]))
print 'b = ' + str(ord(pix[2]))
print 'a = ' + str(ord(pix[3]))
</snippet></ROW><ROW><id>4200765</id><snippet>·•–é°®’èö—</snippet></ROW><ROW><id>4200862</id><snippet>class Bar:
    def __init__(self, name):
        self.name = name
    def __lt__(self, other):
        print('__lt__', self.name, other.name)
        return True

a,b,c = Bar('a'), Bar('b'), Bar('c')

a &lt; b &lt; c
</snippet></ROW><ROW><id>4200862</id><snippet>('__lt__', 'a', 'b')
('__lt__', 'b', 'c')
True
</snippet></ROW><ROW><id>4201180</id><snippet>Location</snippet></ROW><ROW><id>4201180</id><snippet># This is for Py2k.  For Py3k, use http.client and urllib.parse instead, and
# use // instead of / for the division
import httplib
import urlparse

def unshorten_url(url):
    parsed = urlparse.urlparse(url)
    h = httplib.HTTPConnection(parsed.netloc)
    h.request('HEAD', parsed.path)
    response = h.getresponse()
    if response.status/100 == 3 and response.getheader('Location'):
        return response.getheader('Location')
    else:
        return url
</snippet></ROW><ROW><id>4201622</id><snippet>isinstance()</snippet></ROW><ROW><id>4201718</id><snippet>&lt;ADDRESS&gt;
 &lt;STREET&gt;One Main Street&lt;/STREET&gt;
 &lt;CITY&gt;Gotham City&lt;/CITY&gt;
 &lt;ZIP&gt;99999 0123&lt;/ZIP&gt;
 &lt;PHONE&gt;555-123-5467&lt;/PHONE&gt;
 &lt;/ADDRESS&gt;
</snippet></ROW><ROW><id>4201718</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; f = etree.parse('foo.xml')  # path to XML file
&gt;&gt;&gt; root = f.getroot() # get the root element
&gt;&gt;&gt; for tags in root.iter(): # iter through the root element
...     print tags.tag       # print all the tags
... 
ADDRESS
STREET
CITY
ZIP
PHONE
</snippet></ROW><ROW><id>4201718</id><snippet>&lt;ADDRESS&gt;
         &lt;STREET&gt;One Main Street&lt;/STREET&gt;
         &lt;STREET1&gt;One Second Street&lt;/STREET1&gt;
        &lt;CITY&gt;Gotham City&lt;/CITY&gt;
         &lt;ZIP&gt;99999 0123&lt;/ZIP&gt;
         &lt;PHONE&gt;555-123-5467&lt;/PHONE&gt;         
         &lt;COUNTRY&gt;USA&lt;/COUNTRY&gt;    
&lt;/ADDRESS&gt;
</snippet></ROW><ROW><id>4201718</id><snippet>ADDRESS
STREET
STREET1
CITY
ZIP
PHONE
COUNTRY
</snippet></ROW><ROW><id>4201718</id><snippet>&gt;&gt;&gt; for tags in root.iter():
...     print tags.text
... 

One Main Street
One Second Street
Gotham City
99999 0123
555-123-5467
USA
</snippet></ROW><ROW><id>4201868</id><snippet># models.py
class Book(models.Model):
    name = models.CharField(max_length=30)
    image = FileBrowseField("Image", max_length=200, blank=True, null=True)

...

    def __init__(self, *args, **kargs):                                                
        super(Property, self).__init__(*args, **kargs)                             
        self._meta.get_field_by_name("image")[0].directory = self.name
</snippet></ROW><ROW><id>4202016</id><snippet>session.add()</snippet></ROW><ROW><id>4202016</id><snippet>session.flush()</snippet></ROW><ROW><id>4202016</id><snippet>session.flush()</snippet></ROW><ROW><id>4202016</id><snippet>session.commit()</snippet></ROW><ROW><id>4202016</id><snippet>flush()</snippet></ROW><ROW><id>4202016</id><snippet>commit()</snippet></ROW><ROW><id>4202016</id><snippet>autoflush</snippet></ROW><ROW><id>4202016</id><snippet>#---
s = Session()

s.add(Foo('A')) # The Foo('A') object has been added to the session.
                # It has not been committed to the database yet,
                #   but is returned as part of a query.
print 1, s.query(Foo).all()
s.commit()

#---
s2 = Session()
s2.autoflush = False

s2.add(Foo('B'))
print 2, s2.query(Foo).all() # The Foo('B') object is *not* returned
                             #   as part of this query because it hasn't
                             #   been flushed yet.
s2.flush()                   # Now, Foo('B') is in the same state as
                             #   Foo('A') was above.
print 3, s2.query(Foo).all() 
s2.rollback()                # Foo('B') has not been committed, and rolling
                             #   back the session's transaction removes it
                             #   from the session.
print 4, s2.query(Foo).all()

#---
Output:
1 [&lt;Foo('A')&gt;]
2 [&lt;Foo('A')&gt;]
3 [&lt;Foo('A')&gt;, &lt;Foo('B')&gt;]
4 [&lt;Foo('A')&gt;]
</snippet></ROW><ROW><id>4202559</id><snippet>re.escape(string)
&gt;&gt;&gt; re.escape('\ a.*$')
'\\\\\\ a\\.\\*\\$'
&gt;&gt;&gt; re.escape('www.stackoverflow.com')
'www\\.stackoverflow\\.com'
</snippet></ROW><ROW><id>4202642</id><snippet>callable(fn)
</snippet></ROW><ROW><id>4202642</id><snippet>isinstance(fn, collections.Callable)
</snippet></ROW><ROW><id>4202642</id><snippet>hasattr(fn, '__call__')
</snippet></ROW><ROW><id>4202874</id><snippet>myimports.py</snippet></ROW><ROW><id>4202874</id><snippet>import cgi
import os

from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext import db
from google.appengine.api import memcache
from google.appengine.api import urlfetch
from google.appengine.datastore import entity_pb
</snippet></ROW><ROW><id>4202874</id><snippet>from myimports import *
</snippet></ROW><ROW><id>4202929</id><snippet>language="c++"</snippet></ROW><ROW><id>4202929</id><snippet>Extension("MyModule", ["myfunc.cpp"], language="c++")
</snippet></ROW><ROW><id>4203206</id><snippet>Zipper.py</snippet></ROW><ROW><id>4203206</id><snippet>Zipper.__file__</snippet></ROW><ROW><id>4203206</id><snippet>sys.path</snippet></ROW><ROW><id>4203255</id><snippet>import functools

def edit_distance(str1, str2): 
    #implement it here

f = functools.operator(edit_distance, target_string)
return min(f(s) for s in slices(string_))   # use slices from below
</snippet></ROW><ROW><id>4203255</id><snippet>import functools

def diff(str1, str2):
    # However you test the distance gets defined here. e.g. Hamming distance, 
    # Levenshtein distance, etc.


def slices(string_, L):
    for i in xrange(len(string_) - L + 1)):
        yield string_[i:i+L]

best_match = min(slices(string_), key=functools.partial(diff, target_string))
</snippet></ROW><ROW><id>4203496</id><snippet>POST</snippet></ROW><ROW><id>4203496</id><snippet>GET</snippet></ROW><ROW><id>4203898</id><snippet>CHOICES = (
    ('x', 'choice x'),
    ('y', 'choice y'),
)
</snippet></ROW><ROW><id>4203898</id><snippet>choices</snippet></ROW><ROW><id>4203898</id><snippet>attrs</snippet></ROW><ROW><id>4203898</id><snippet>form.fields['size_option'].choices = product.get_options()
</snippet></ROW><ROW><id>4203898</id><snippet>queryset</snippet></ROW><ROW><id>4203898</id><snippet>Class.method(instance)</snippet></ROW><ROW><id>4203898</id><snippet>instance.method()</snippet></ROW><ROW><id>4203898</id><snippet>product.get_options()</snippet></ROW><ROW><id>4204155</id><snippet>a.__dict__ = dict(b.__dict__)
</snippet></ROW><ROW><id>4204690</id><snippet>import gzip, json, StringIO, urllib

url = urllib.urlopen('http://api.stackoverflow.com/1.0/badges/name')
url_f = StringIO.StringIO(url.read())
g = gzip.GzipFile(fileobj=url_f)
j = json.load(g)
</snippet></ROW><ROW><id>4205386</id><snippet>import signal
import sys
def signal_handler(signal, frame):
    print 'You pressed Ctrl+C!'
    sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
print 'Press Ctrl+C'
while True:
    continue
</snippet></ROW><ROW><id>4205469</id><snippet>while logger:
</snippet></ROW><ROW><id>4205469</id><snippet>IndexError</snippet></ROW><ROW><id>4205469</id><snippet>.pyc</snippet></ROW><ROW><id>4205469</id><snippet>.pyo</snippet></ROW><ROW><id>4205469</id><snippet>IndexError</snippet></ROW><ROW><id>4205904</id><snippet>numpy.set_string_function</snippet></ROW><ROW><id>4205904</id><snippet>numpy.set_print_options</snippet></ROW><ROW><id>4205904</id><snippet>set_print_options</snippet></ROW><ROW><id>4205904</id><snippet>&gt;&gt;&gt; np.set_printoptions(precision=4)
&gt;&gt;&gt; print np.array([1.123456789])
[ 1.1235]
</snippet></ROW><ROW><id>4205906</id><snippet>django.contrib.sitemaps.Sitemap.get_urls</snippet></ROW><ROW><id>4205906</id><snippet>url_info</snippet></ROW><ROW><id>4205906</id><snippet>get_urls</snippet></ROW><ROW><id>4205906</id><snippet>def get_urls(self, page=1, site=None):
    if site is None:
        if Site._meta.installed:
            try:
                site = Site.objects.get_current()
            except Site.DoesNotExist:
                pass
        if site is None:
            raise ImproperlyConfigured("In order to use Sitemaps you must either use the sites framework or pass in a Site or RequestSite object in your view code.")

    urls = []
    for item in self.paginator.page(page).object_list:
        loc = "http://%s%s" % (site.domain, self.__get('location', item))
        priority = self.__get('priority', item, None)
        url_info = {
            'location':   loc,
            'lastmod':    self.__get('lastmod', item, None),
            'changefreq': self.__get('changefreq', item, None),
            'priority':   str(priority is not None and priority or '')
        }
        urls.append(url_info)
    return urls
</snippet></ROW><ROW><id>4205906</id><snippet>django/contrib/sitemaps/templates/sitemap.xml</snippet></ROW><ROW><id>4205918</id><snippet>import os
replacement = """some
multi-line string"""
for dname, dirs, files in os.walk("some_dir"):
    for fname in files:
        fpath = os.path.join(dname, fname)
        with open(fpath) as f:
            s = f.read()
        s = s.replace("{$replace}", replacement)
        with open(fpath, "w") as f:
            f.write(s)
</snippet></ROW><ROW><id>4206605</id><snippet>- List item 1 
  ::

      code sample...
      code sample...

- List item 2 
  ::

      code sample...
      code sample...
</snippet></ROW><ROW><id>4206863</id><snippet>def do_pie(fic,data):
    import pylab    
    # make a square figure and axes
    pylab.figure(1, figsize=(6,6))
    ax = pylab.axes([0.1, 0.1, 0.8, 0.8])
    pylab.pie(data,labels=data)
    pylab.title(fic, bbox={'facecolor':'0.8', 'pad':5})
    pylab.savefig('%s.png' % fic,dpi=100)
    pylab.close()
</snippet></ROW><ROW><id>4206943</id><snippet>dt = yaml.load("""dt: !!python/object/apply:apply
    - !!python/object/apply:getattr
        - !!python/name:datetime.datetime
        - now
    - []
""")
</snippet></ROW><ROW><id>4206943</id><snippet>!!python/object</snippet></ROW><ROW><id>4206943</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>4206943</id><snippet>dt = yaml.load("dt: !!python/object/apply:time.gmtime []")
dt = yaml.load("dt: !!python/object/apply:time.time []")
</snippet></ROW><ROW><id>4206943</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>4206943</id><snippet>!!python/object/apply</snippet></ROW><ROW><id>4206943</id><snippet>dt = yaml.load("""dt: !!timestamp '2010-11-17 13:12:11'""")
</snippet></ROW><ROW><id>4207076</id><snippet>[0]</snippet></ROW><ROW><id>4207076</id><snippet>[-1]</snippet></ROW><ROW><id>4207076</id><snippet>api_id = int(data.xpath('//project/id/text()')[-1])
</snippet></ROW><ROW><id>4207076</id><snippet>id</snippet></ROW><ROW><id>4207076</id><snippet>id</snippet></ROW><ROW><id>4207076</id><snippet>api_id = max(map(int,data.xpath('//project/id/text()')))
</snippet></ROW><ROW><id>4207260</id><snippet>y = np.zeros(5)
for i in range(len(y)):
    y[i] = 2*rand()-1
</snippet></ROW><ROW><id>4207260</id><snippet>y=2*np.random.rand(5)-1
</snippet></ROW><ROW><id>4207260</id><snippet>for x in y:</snippet></ROW><ROW><id>4207260</id><snippet>y</snippet></ROW><ROW><id>4207260</id><snippet>x</snippet></ROW><ROW><id>4207260</id><snippet>y</snippet></ROW><ROW><id>4207260</id><snippet>str</snippet></ROW><ROW><id>4207260</id><snippet>int</snippet></ROW><ROW><id>4207260</id><snippet>float</snippet></ROW><ROW><id>4207260</id><snippet>x</snippet></ROW><ROW><id>4207260</id><snippet>y</snippet></ROW><ROW><id>4207260</id><snippet>list</snippet></ROW><ROW><id>4207260</id><snippet>list</snippet></ROW><ROW><id>4207260</id><snippet>y</snippet></ROW><ROW><id>4207260</id><snippet>x</snippet></ROW><ROW><id>4207260</id><snippet>y---&gt; [o----o----o----o]
            ^
            |
            x
</snippet></ROW><ROW><id>4207260</id><snippet>x += 1
</snippet></ROW><ROW><id>4207260</id><snippet>x</snippet></ROW><ROW><id>4207260</id><snippet>y---&gt; [o----o----o----o]

x---&gt; o
</snippet></ROW><ROW><id>4207260</id><snippet>x.append(1)</snippet></ROW><ROW><id>4207260</id><snippet>x</snippet></ROW><ROW><id>4207287</id><snippet>nltk</snippet></ROW><ROW><id>4207287</id><snippet>FreqDist</snippet></ROW><ROW><id>4207287</id><snippet>dict</snippet></ROW><ROW><id>4207287</id><snippet>v = fd.values()
v.sort()
count = sum(v[-10:])
</snippet></ROW><ROW><id>4207291</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4207291</id><snippet>sys.path</snippet></ROW><ROW><id>4207291</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4207291</id><snippet>set PYTHONPATH=%PYTHONPATH%;C:\PythonScripts\SharedPython
</snippet></ROW><ROW><id>4207291</id><snippet>%</snippet></ROW><ROW><id>4207291</id><snippet>C:\</snippet></ROW><ROW><id>4207803</id><snippet>KeyError
</snippet></ROW><ROW><id>4207803</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; a['invalid']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'invalid'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4207850</id><snippet>def maxdrop(p):
    bestdrop = 0
    wheredrop = -1,-1
    i = 0
    while i &lt; len(p) - 1:
        if p[i+1] &lt; p[i]:
            bestlocal = p[i+1]
            wherelocal = i+1
            j = i + 1
            while j &lt; len(p) - 1 and p[j + 1] &lt; p[i]:
                j += 1
                if p[j] &lt; bestlocal:
                    bestlocal = p[j]
                    wherelocal = j
            if p[i] - bestlocal &gt; bestdrop:
                bestdrop = p[i] - bestlocal
                wheredrop = i, wherelocal
            i = j+1
        else:
            i += 1
    return bestdrop,wheredrop
</snippet></ROW><ROW><id>4207925</id><snippet>query = 'select * from table where key in (%s)' % ','.join('?' * len(serials))
c.execute(query, serials)
</snippet></ROW><ROW><id>4207993</id><snippet>import socket
socket.gethostbyname(socket.gethostname())
</snippet></ROW><ROW><id>4207993</id><snippet>settings/__init__.py
settings/qa.py 
settings/production.py
</snippet></ROW><ROW><id>4207993</id><snippet>__init__.py</snippet></ROW><ROW><id>4207993</id><snippet>qa.py</snippet></ROW><ROW><id>4207993</id><snippet>from settings import *
</snippet></ROW><ROW><id>4208140</id><snippet>fp</snippet></ROW><ROW><id>4208140</id><snippet>msg</snippet></ROW><ROW><id>4208140</id><snippet>msg = MIMEImage(fp.read(), _subtype=subtype)
</snippet></ROW><ROW><id>4208140</id><snippet>msg.add_header('Content-Disposition', 'attachment', filename=filename)
outer.attach(msg)
</snippet></ROW><ROW><id>4208140</id><snippet>Content-Disposition</snippet></ROW><ROW><id>4208140</id><snippet>inline</snippet></ROW><ROW><id>4208140</id><snippet>attachment</snippet></ROW><ROW><id>4208140</id><snippet>multipart/related</snippet></ROW><ROW><id>4208183</id><snippet>Model</snippet></ROW><ROW><id>4208183</id><snippet>required</snippet></ROW><ROW><id>4208221</id><snippet>dict</snippet></ROW><ROW><id>4208221</id><snippet>import collections
result=collections.defaultdict(list)
for n,e in zip(N,E):
    result[n].append(e)
</snippet></ROW><ROW><id>4208355</id><snippet>if m.hexdigest() == row[0]:
</snippet></ROW><ROW><id>4208355</id><snippet>row</snippet></ROW><ROW><id>4208355</id><snippet>hashkey</snippet></ROW><ROW><id>4208355</id><snippet>hashkey</snippet></ROW><ROW><id>4208355</id><snippet>m.execute('select exists(select * from mail where hashkey=?)', m.hexdigest())
</snippet></ROW><ROW><id>4208355</id><snippet>True</snippet></ROW><ROW><id>4208355</id><snippet>False</snippet></ROW><ROW><id>4208355</id><snippet>1</snippet></ROW><ROW><id>4208355</id><snippet>0</snippet></ROW><ROW><id>4208497</id><snippet>Company</snippet></ROW><ROW><id>4208497</id><snippet>Company</snippet></ROW><ROW><id>4208497</id><snippet>Company</snippet></ROW><ROW><id>4208528</id><snippet>logging</snippet></ROW><ROW><id>4208674</id><snippet>another_func</snippet></ROW><ROW><id>4208674</id><snippet>itertools.chain(x,'a')</snippet></ROW><ROW><id>4209062</id><snippet>getPrices.php</snippet></ROW><ROW><id>4209062</id><snippet> My necklace: &lt;div id='1'&gt; $123.50 &lt;/div&gt;&lt;br&gt;
 My bracelet: &lt;div id='1'&gt; $13.50 &lt;/div&gt;&lt;br&gt;
 ...

 &lt;script&gt;
 $(document).ready(function() {
   $.ajax({ url: "getPrices.php", context: document.body, success: function(data){
      for (var price in data)
      {
          $(price.id).html(price.price);
      }
    }}));
 &lt;/script&gt;
</snippet></ROW><ROW><id>4209299</id><snippet>child = pexpect.spawn(launchcmd)
while True:
    try:
        child.expect('\n')
        print(child.before)
    except pexpect.EOF:
        break
</snippet></ROW><ROW><id>4209369</id><snippet>Meta.unique_together</snippet></ROW><ROW><id>4209369</id><snippet>user</snippet></ROW><ROW><id>4209369</id><snippet>number</snippet></ROW><ROW><id>4209369</id><snippet>Extension</snippet></ROW><ROW><id>4209369</id><snippet>class Extension(...):
   ...
  class Meta:
    unique_together = (('user', 'number'),)
</snippet></ROW><ROW><id>4209389</id><snippet>class MyGoneMiddleware(object):
    def process_exception(self, request, exception):
        if isinstance(exception, Http410):
            return HttpResponseGone("Gone!")
        return None
</snippet></ROW><ROW><id>4209548</id><snippet>plt.setp(ax.get_xticklabels(), visible=False)</snippet></ROW><ROW><id>4209548</id><snippet>[label.set_visible(False) for label in ax.get_xticklabels()]</snippet></ROW><ROW><id>4209548</id><snippet>setp</snippet></ROW><ROW><id>4209548</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax1 = fig.add_subplot(2,1,1)
ax1.plot(range(10), 'b-')

ax2 = fig.add_subplot(2,1,2, sharex=ax1)
ax2.plot(range(10), 'r-')

plt.setp(ax1.get_xticklabels(), visible=False)

plt.show()
</snippet></ROW><ROW><id>4209614</id><snippet>cursor.execute</snippet></ROW><ROW><id>4209614</id><snippet>cursor = connection.cursor()
result = cursor.execute("SELECT id,myapp.LatLonDistance(%s, %s, %s, %s) AS distance FROM myapp.users_userprofile", (lat1, lon1, lat2, lon2))
cursor.close()
</snippet></ROW><ROW><id>4209663</id><snippet>    ttk.Style().map("TEntry",
                    foreground=[('disabled', 'black')],
                    fieldbackground=[('disabled','white')]
                    )
    widget['state'] = 'disabled'
</snippet></ROW><ROW><id>4209771</id><snippet>import A.A
import A.B.B
</snippet></ROW><ROW><id>4210609</id><snippet>create = """
oldlist = range(5000)
newlist = range(5000, 10000)
index = 500
"""
tests = [
    "newlist.extend(oldlist[index:])",
    "newlist.extend(oldlist[i] for i in xrange(index, len(oldlist)))",
    "newlist.extend(islice(oldlist, index, None))",
    """\
while index &lt; len(oldlist):
   newlist.append(oldlist[index])
   index+=1""",
]

import timeit
for test in tests:
    t = timeit.Timer(create + test, setup='from itertools import islice')
    print test, min(t.repeat(number=100000))
</snippet></ROW><ROW><id>4210609</id><snippet>newlist.extend(oldlist[index:]) 17.2596559525
newlist.extend(oldlist[i] for i in xrange(index, len(oldlist))) 53.5918159485
newlist.extend(islice(oldlist, index, None)) 19.6523411274
while index &lt; len(oldlist):
   newlist.append(oldlist[index])
   index+=1 123.556715012
</snippet></ROW><ROW><id>4210882</id><snippet>root.nsmap</snippet></ROW><ROW><id>4210882</id><snippet>table</snippet></ROW><ROW><id>4210882</id><snippet>root.xpath('.//table:table', namespaces=root.nsmap)
</snippet></ROW><ROW><id>4210882</id><snippet>findall(path)</snippet></ROW><ROW><id>4210882</id><snippet>{namespace}name</snippet></ROW><ROW><id>4210882</id><snippet>namespace:name</snippet></ROW><ROW><id>4210882</id><snippet>path</snippet></ROW><ROW><id>4210882</id><snippet>{namespace}name</snippet></ROW><ROW><id>4210882</id><snippet>findall()</snippet></ROW><ROW><id>4210910</id><snippet>import networkx as NX
import string
import random

G = NX.Graph()    # initialize the graph

# just generate some synthetic data for the nodes and edges:
my_nodes = [ ch for ch in string.ascii_uppercase ]
my_nodes2 = list(my_nodes)
random.shuffle(my_nodes2)
my_edges = [ t for t in zip(my_nodes, my_nodes2) if not t[0]==t[1] ]

# now add the edges and nodes to the networkx graph object:
G.add_nodes_from(my_nodes)
G.add_edges_from(my_edges)

# look at the graph's properties:
In [87]: len(G.nodes())
Out[87]: 26

In [88]: len(G.edges())
Out[88]: 25

In [89]: G.edges()[:5]
Out[89]: [('A', 'O'), ('A', 'W'), ('C', 'U'), ('C', 'F'), ('B', 'L')]

# likewise, shortest path calculation is straightforward
In [86]: NX.shortest_path(G, source='A', target='D', weighted=False)
Out[86]: ['A', 'W', 'R', 'D']
</snippet></ROW><ROW><id>4211199</id><snippet>condition</snippet></ROW><ROW><id>4211472</id><snippet>def uniques(l, f = lambda x: x):
    return [x for i, x in enumerate(l) if f(x) not in [f(y) for y in l[:i]]]
</snippet></ROW><ROW><id>4211472</id><snippet>lastTwo = lambda x: x[-2:]
</snippet></ROW><ROW><id>4211472</id><snippet>&gt;&gt;&gt; list1
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]
&gt;&gt;&gt; list2
[('b', 'b', 'c'), ('d', 'e', 'a'), ('k', 'h', 'i')]
&gt;&gt;&gt; uniques(list1+list2, lastTwo)
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('d', 'e', 'a')]
</snippet></ROW><ROW><id>4211472</id><snippet>def hervesMerge(l1, l2):
    return uniques(l1+l2, lambda x: x[-2:])
</snippet></ROW><ROW><id>4211472</id><snippet>&gt;&gt;&gt; list1
[(1, 2, 3, 4), (2, 5), (6, 2, 2), (3, 4), (8, 3), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)]
&gt;&gt;&gt; uniques(list1, sum)
[(1, 2, 3, 4), (2, 5), (8, 3)]
&gt;&gt;&gt; uniques(list1, lambda x: reduce(operator.mul, x))  #product
[(1, 2, 3, 4), (2, 5), (3, 4), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)]
&gt;&gt;&gt; uniques([1,2,3,4,1,2]) #defaults to identity
[1, 2, 3, 4]
</snippet></ROW><ROW><id>4211472</id><snippet>&gt;&gt;&gt; s = frozenset(i[-2:] for i in list1)
&gt;&gt;&gt; ans = list(list1) #copy list1
&gt;&gt;&gt; for i in list2:
        if i[-2:] not in s: ans.append(i)
&gt;&gt;&gt; ans
[('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('d', 'e', 'a')]
</snippet></ROW><ROW><id>4211472</id><snippet>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; for i in list2 + list1:
        d[i[-2:]] = i
&gt;&gt;&gt; d.values()
[('d', 'e', 'f'), ('a', 'b', 'c'), ('g', 'h', 'i'), ('d', 'e', 'a')]   
</snippet></ROW><ROW><id>4211472</id><snippet>for k in temp:
  u=0
  for j in result:
      if k[1:3] == j[1:3]:
          u=1
          break
  if u==0:
  #if index is None:
      result.append([k[0],k[1],k[2]])   // k
</snippet></ROW><ROW><id>4211652</id><snippet>grep "^\s*def.*=(\[\]|\{\}|set\(\))"
</snippet></ROW><ROW><id>4211963</id><snippet>    req = urllib.urlopen("http://weblock.zbrowntechnology.info/ProgFiles/stats.php?%s" % params, proxies=proxies)
    resp = req.read()
    req.close()
</snippet></ROW><ROW><id>4211973</id><snippet>s[s&lt;s[0]] += p[s&lt;s[0]]</snippet></ROW><ROW><id>4211981</id><snippet>request.is_ajax()</snippet></ROW><ROW><id>4211981</id><snippet>def view_something(request):
    if request.is_ajax():
       # ajax
    else
       # not
</snippet></ROW><ROW><id>4211981</id><snippet>def reroute_ajaxy(ajax_handler):
    def wrap(f):
        def decorate(*args, **kwargs):
            if args[0].is_ajax():
                return ajax_handler(args)
            else:
                return f(*args, **kwargs)
        return decorate
    return wrap

def score_ajax_handler(request):
    print "score ajax handler"


@reroute_ajaxy(score_ajax_handler)
def score_handler(request):
    print "score handler"
</snippet></ROW><ROW><id>4211981</id><snippet>class ReqMock:
    def __init__(self, ajax=False):
        self.ajax = ajax
    def is_ajax(self):
        return self.ajax


score_handler(ReqMock(True))
score_handler(ReqMock(False))
</snippet></ROW><ROW><id>4211981</id><snippet>score ajax handler
score handler
</snippet></ROW><ROW><id>4212047</id><snippet>topScore</snippet></ROW><ROW><id>4212047</id><snippet>seq</snippet></ROW><ROW><id>4212047</id><snippet>memoize</snippet></ROW><ROW><id>4212410</id><snippet>WSGIPythonEggs</snippet></ROW><ROW><id>4213118</id><snippet>sys.stdin</snippet></ROW><ROW><id>4213118</id><snippet>import sys, os
if os.isatty(sys.stdin.fileno()):
    # Debug mode.
    pass
else:
    # Cron mode.
    pass
</snippet></ROW><ROW><id>4213256</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>4213256</id><snippet>inspect.gemembers</snippet></ROW><ROW><id>4213256</id><snippet>instance.__dict__</snippet></ROW><ROW><id>4213256</id><snippet>&gt;&gt;&gt; class A(object):
...    a = 'a'
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.a
'a'
&gt;&gt;&gt; a.__dict__
{}
&gt;&gt;&gt; a.b = 'b'
&gt;&gt;&gt; a.__dict__
{'b': 'b'}
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmembers(a)
[('__class__', &lt;class '__main__.A'&gt;), 
 ('__delattr__', &lt;method-wrapper '__delattr__' of A object at 0xb774da8c&gt;),
 ('__dict__', {'b': 'b'}), ('__doc__', None), 
 ('__format__', &lt;built-in method __format__ of A object at 0xb774da8c&gt;),
 # Snipped for brevity
 # ....
 ('__subclasshook__', &lt;built-in method __subclasshook__ of type object at 0x87b172c&gt;), 
 ('__weakref__', None), ('a', 'a'), ('b', 'b')]

&gt;&gt;&gt; list(a.__dict__.iteritems())
[('b', 'b')]
</snippet></ROW><ROW><id>4213256</id><snippet>iteritems</snippet></ROW><ROW><id>4213576</id><snippet>&gt;&gt;&gt; d = {"answer": 42}
&gt;&gt;&gt; "the answer is %(answer)d" % d
'the answer is 42'
</snippet></ROW><ROW><id>4213719</id><snippet>class A:
   class_property = 10

   def __init__(self):
      self.object_property = 20
</snippet></ROW><ROW><id>4213719</id><snippet>print A.class_property
</snippet></ROW><ROW><id>4213719</id><snippet>a = A()
print a.object_property
</snippet></ROW><ROW><id>4213890</id><snippet>self.response.geturl()
</snippet></ROW><ROW><id>4213924</id><snippet>&lt;</snippet></ROW><ROW><id>4213924</id><snippet>&gt;</snippet></ROW><ROW><id>4213924</id><snippet>from django.utils.html import escape
print escape('&lt;div class="q"&gt;Q &amp; A&lt;/div&gt;')
</snippet></ROW><ROW><id>4213924</id><snippet>from django.utils.html import strip_tags
strip_tags(string_value)
</snippet></ROW><ROW><id>4213924</id><snippet>{{ value|striptags }}
</snippet></ROW><ROW><id>4214089</id><snippet>import re

line = " A= 4 | B='567' |c=4|D='aaa' "
re.search( '(?P&lt;field1&gt;.*)=(?P&lt;value1&gt;.*)\|(?P&lt;field2&gt;.*)=(?P&lt;value2&gt;.*)\|(?P&lt;field3&gt;.*)=(?P&lt;value3&gt;.*)\|(?P&lt;field4&gt;.*)=(?P&lt;value4&gt;.*)', line ).groups()
</snippet></ROW><ROW><id>4214089</id><snippet>(' A', ' 4 ', ' B', "'567' ", 'c', '4', 'D', "'aaa' ")
</snippet></ROW><ROW><id>4214089</id><snippet>re.search( '(?P&lt;field1&gt;\S*)\s*=\s*(?P&lt;value1&gt;\S*)\s*\|\s*(?P&lt;field2&gt;\S*)\s*=\s*(?P&lt;value2&gt;\S*)\s*\|\s*(?P&lt;field3&gt;\S*)\s*=\s*(?P&lt;value3&gt;\S*)\s*\|\s*(?P&lt;field4&gt;\S*)\s*=\s*(?P&lt;value4&gt;\S*)', line ).groupdict()
</snippet></ROW><ROW><id>4214089</id><snippet>{'field1': 'A',
 'field2': 'B',
 'field3': 'c',
 'field4': 'D',
 'value1': '4',
 'value2': "'567'",
 'value3': '4',
 'value4': "'aaa'"
}
</snippet></ROW><ROW><id>4214089</id><snippet>[ re.search( '\s*([^=]+?)\s*=\s*(\S+)', group ).groups( ) for group in re.findall( '([^=|]*\s*=\s*[^|]*)', line ) ]
</snippet></ROW><ROW><id>4214089</id><snippet>[('A', '4'), ('B', "'567'"), ('c', '4'), ('D', "'aaa'")]
</snippet></ROW><ROW><id>4214458</id><snippet>putdata</snippet></ROW><ROW><id>4214458</id><snippet>img = PIL.Image.new("RGB", (12, 12))
img.show() # see a black image
pixels = [(255,0,0)]*(12*12)
img.putdata(pixels)
img.show() # see a red image
</snippet></ROW><ROW><id>4214493</id><snippet>-data</snippet></ROW><ROW><id>4214493</id><snippet>import Tkinter as tk
root = tk.Tk()
data = '''R0lGODlhIAAgALMAAAAAAAAAgHCAkC6LV76+vvXeswD/ANzc3DLNMubm+v/6zS9P
          T6Ai8P8A/////////yH5BAEAAAkALAAAAAAgACAAAAS00MlJq7046803AF3ofAYY
          fh8GIEvpoUZcmtOKAO5rLMva0rYVKqX5IEq3XDAZo1GGiOhw5rtJc09cVGo7orYw
          YtYo3d4+DBxJWuSCAQ30+vNTGcxnOIARj3eTYhJDQ3woDGl7foNiKBV7aYeEkHEi
          gnKFkk4ciYaImJqbkZ+PjZUjaJOElKanqJyRrJyZgSKkokOsNYa2q7mcirC5I5Fo
          fsK6hcHHgsSgx4a9yzXK0rrV19gRADs=
       '''
img = tk.PhotoImage(data=data)
label = tk.Label(image=img)
label.pack()
root.mainloop()
</snippet></ROW><ROW><id>4214951</id><snippet>def func1(): pass
def func2(): pass
def func3(): pass
#     ...
def func62(): pass
def func63(): pass

if 0 &lt; a &lt; 64:
    globals()['func'+str(a)]()
else:
    print 'a is out of range'
</snippet></ROW><ROW><id>4215056</id><snippet>
&gt;&gt; from libsvm import *
&gt;&gt; prob = svm_problem([1,-1],[[1,0,1],[-1,0,-1]])
&gt;&gt; param = svm_parameter(kernel_type = LINEAR, C = 10)
  ## training  the model
&gt;&gt; m = svm_model(prob, param)
#testing the model
&gt;&gt; m.predict([1, 1, 1])
</snippet></ROW><ROW><id>4215155</id><snippet>self</snippet></ROW><ROW><id>4215155</id><snippet>post_save</snippet></ROW><ROW><id>4215155</id><snippet>def comment_handler(sender, comment, request, **kwargs):
    profile = request.user.get_profile()
    profile.points += 2
    profile.save()

from django.contrib.comments.signals import comment_was_posted
comment_was_posted.connect(comment_handler, sender=Comment)
</snippet></ROW><ROW><id>4215435</id><snippet>data.frame</snippet></ROW><ROW><id>4215435</id><snippet>xmlToDataFrame()</snippet></ROW><ROW><id>4215435</id><snippet>data.frame</snippet></ROW><ROW><id>4215435</id><snippet>dbWriteTable()</snippet></ROW><ROW><id>4215555</id><snippet>int()</snippet></ROW><ROW><id>4215555</id><snippet>float()</snippet></ROW><ROW><id>4215561</id><snippet>pgrep</snippet></ROW><ROW><id>4215561</id><snippet>import subprocess
import signal
import os
from datetime import datetime as dt


process_name = sys.argv[1]
log_file_name = sys.argv[2]


proc = subprocess.Popen(["pgrep", process_name], stdout=subprocess.PIPE) 

# Kill process.
for pid in proc.stdout:
    os.kill(int(pid), signal.SIGTERM)
    # Check if the process that we killed is alive.
    try: 
       os.kill(int(pid), 0)
       raise Exception("""wasn't able to kill the process 
                          HINT:use signal.SIGKILL or signal.SIGABORT""")
    except OSError as ex:
       continue

# Save old logging file and create a new one.
os.system("cp {0} '{0}-dup-{1}'".format(log_file_name, dt.now()))

# Empty the logging file.
with open(log_file_name, "w") as f:
    pass

# Run the process again.
os.sytsem("&lt;command to run the process&gt;") 
# you can use os.exec* if you want to replace this process with the new one which i think is much better in this case.

# the os.system() or os.exec* call will failed if something go wrong like this you can check if the process is runninh again.
</snippet></ROW><ROW><id>4215688</id><snippet>def do_py_validate(field, value):
    exec field.py_validation.replace('\r', '')
</snippet></ROW><ROW><id>4215734</id><snippet>Articles</snippet></ROW><ROW><id>4215734</id><snippet>class Articles(webapp.RequestHandler)</snippet></ROW><ROW><id>4215734</id><snippet>class Articles(db.Model)</snippet></ROW><ROW><id>4215734</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>4215734</id><snippet>all()</snippet></ROW><ROW><id>4215734</id><snippet>Articles</snippet></ROW><ROW><id>4215776</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>4215776</id><snippet>&gt;&gt;&gt; import heapq, random
&gt;&gt;&gt; heapq.nlargest(3, (random.gauss(0, 1) for _ in xrange(100)))
[1.9730767232998481, 1.9326532289091407, 1.7762926716966254]
</snippet></ROW><ROW><id>4215917</id><snippet>&gt;&gt;&gt; x = [tuple(line.strip().split("', '")) for line in open('file')]
&gt;&gt;&gt; x
[('32.42.4.120', '32.42.4.127'), ('32.42.5.128', '32.42.5.255'), ('32.42.15.136', '32.42.15.143'), ('32.58.129.0', '32.58.129.7'), ('32.58.131.0', '32.58.131.63'), ('46.7.0.0', '46.7.255.255')]
</snippet></ROW><ROW><id>4216280</id><snippet>dicts</snippet></ROW><ROW><id>4216280</id><snippet>iter*</snippet></ROW><ROW><id>4216280</id><snippet>iter</snippet></ROW><ROW><id>4216280</id><snippet>for node in doc.iter():
</snippet></ROW><ROW><id>4216280</id><snippet>sometypes_iter</snippet></ROW><ROW><id>4216280</id><snippet>for item in sometypes_iter():
</snippet></ROW><ROW><id>4216280</id><snippet>sorted</snippet></ROW><ROW><id>4216280</id><snippet>sometypes_reduced
sometypes_mapped
sometypes_filtered
</snippet></ROW><ROW><id>4216280</id><snippet>SomeTypes</snippet></ROW><ROW><id>4216280</id><snippet>reduce</snippet></ROW><ROW><id>4216280</id><snippet>map</snippet></ROW><ROW><id>4216280</id><snippet>filter</snippet></ROW><ROW><id>4216280</id><snippet>sometype</snippet></ROW><ROW><id>4216280</id><snippet>sometype</snippet></ROW><ROW><id>4216725</id><snippet>chapter4/nn.py</snippet></ROW><ROW><id>4216725</id><snippet>wordids</snippet></ROW><ROW><id>4216725</id><snippet>urls</snippet></ROW><ROW><id>4216725</id><snippet>wordids</snippet></ROW><ROW><id>4216725</id><snippet>SELECT EXISTS(...)</snippet></ROW><ROW><id>4216725</id><snippet>createkey</snippet></ROW><ROW><id>4216725</id><snippet>0.1</snippet></ROW><ROW><id>4216725</id><snippet>len(urls)</snippet></ROW><ROW><id>4216725</id><snippet>trainquery</snippet></ROW><ROW><id>4216725</id><snippet>(wordids, urlids, selectedurl)</snippet></ROW><ROW><id>4216725</id><snippet>wordids</snippet></ROW><ROW><id>4216725</id><snippet>urlids</snippet></ROW><ROW><id>4216725</id><snippet>selectedurl</snippet></ROW><ROW><id>4217032</id><snippet>webbrowser.open(url[, new=0[, autoraise=True]])
</snippet></ROW><ROW><id>4218253</id><snippet>os.system("echo '/usr/bin/python /(somewhere)/scripts/backup/testbackup.py' | at now")
</snippet></ROW><ROW><id>4218409</id><snippet>__stdcall</snippet></ROW><ROW><id>4218409</id><snippet>windll</snippet></ROW><ROW><id>4218409</id><snippet>__cdecl</snippet></ROW><ROW><id>4218409</id><snippet>cdll</snippet></ROW><ROW><id>4218409</id><snippet>windll</snippet></ROW><ROW><id>4218409</id><snippet>#include &lt;stdlib.h&gt;

__declspec(dllexport) void __stdcall Foo(unsigned char** ppMem, int* pSize)
{
    char i;
    *pSize = 4;
    *ppMem = malloc(*pSize);
    for(i = 0; i &lt; *pSize; i++)
        (*ppMem)[i] = i;
}
</snippet></ROW><ROW><id>4218409</id><snippet>from ctypes import *
Foo = windll.mydll.Foo
Foo.argtypes = [POINTER(POINTER(c_ubyte)),POINTER(c_int)]
mem = POINTER(c_ubyte)()
size = c_int(0)
Foo(byref(mem),byref(size))
print size.value,mem[0],mem[1],mem[2],mem[3]
</snippet></ROW><ROW><id>4218409</id><snippet>4 0 1 2 3
</snippet></ROW><ROW><id>4218449</id><snippet>*** copy extensions ***
*** copy dlls ***
copying C:\Program Files\Python_2.6.5\w9xpopen.exe -&gt; c:\wxpython\test\dist
copying C:\Program Files\Python_2.6.5\lib\site-packages\py2exe\run.exe -&gt; c:\wxpython\test\dist\testactivex.exe
Adding python26.dll as resource to c:\wxpython\test\dist\testactivex.exe
The following modules appear to be missing
['comtypes.gen']
</snippet></ROW><ROW><id>4218449</id><snippet>c:\wxpython\test\dist&gt;testactivex.exe
10:13:16: Debug: src/helpers.cpp(140): 'CreateActCtx' failed with error 0x0000007b (the filename, directory name, or volume label syntax is incorrect.).
Traceback (most recent call last):
  File "testactivex.py", line 24, in &lt;module&gt;
ImportError: cannot import name myole4ax
</snippet></ROW><ROW><id>4218449</id><snippet>ImportError: cannot import name myole4ax 
</snippet></ROW><ROW><id>4218559</id><snippet>+</snippet></ROW><ROW><id>4218559</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '5 55+6+ 5/'
&gt;&gt;&gt; re.findall(r'\d+|[^\d\s]+', s)
['5', '55', '+', '6', '+', '5', '/']
</snippet></ROW><ROW><id>4218782</id><snippet>FILE = open(filename,"rb")
FILE.read(numBytes)
</snippet></ROW><ROW><id>4218896</id><snippet>serv.setServiceParent(service.IService(application))</snippet></ROW><ROW><id>4218896</id><snippet>dht.ready</snippet></ROW><ROW><id>4218896</id><snippet>dht</snippet></ROW><ROW><id>4218896</id><snippet>IService</snippet></ROW><ROW><id>4218896</id><snippet>from_config</snippet></ROW><ROW><id>4218896</id><snippet>from_config</snippet></ROW><ROW><id>4218896</id><snippet>dht.ready</snippet></ROW><ROW><id>4218896</id><snippet>startService</snippet></ROW><ROW><id>4218924</id><snippet>urllib.FancyURLOpener</snippet></ROW><ROW><id>4218924</id><snippet>opener = urllib.FancyURLopener({})
f = opener.open("http://london.mycompany/mydir/")
f.read()
</snippet></ROW><ROW><id>4219169</id><snippet>import django.utils.termcolors as termcolors
red_hello = termcolors.colorize("Hello", fg='red') # '\x1b[31mHello\x1b[0m'
print red_hello
</snippet></ROW><ROW><id>4219169</id><snippet>color_names = ('black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white')
foreground = dict([(color_names[x], '3%s' % x) for x in range(8)])
background = dict([(color_names[x], '4%s' % x) for x in range(8)])
RESET = '0'

def colorize( ... ):
    ...
print colorize("Hello", fg='red') # '\x1b[31mHello\x1b[0m'
</snippet></ROW><ROW><id>4219169</id><snippet>&gt;&gt;&gt; from django.utils.termcolors import colorize
&gt;&gt;&gt; red_hello = colorize("Hello", fg="red")
&gt;&gt;&gt; red_hello # by not printing; it will not appear red; special characters are escaped
'\x1b[31mHello\x1b[0m'
&gt;&gt;&gt; print red_hello # by print it will appear red; special characters are not escaped
Hello
</snippet></ROW><ROW><id>4219188</id><snippet>import mimetypes
mimetypes.add_type('video/webm','.webm')

...

    mimetypes.guess_type(filename)
</snippet></ROW><ROW><id>4219188</id><snippet>import cgi
form = cgi.FieldStorage()
files_types = {};
if form.type == 'multipart/form-data':
    for part in form.keys():
        files_types[form[part].filename] = form[part].type
else:
    files_types[form.filename] = form.type
</snippet></ROW><ROW><id>4219802</id><snippet>import program1
app = program1.Class(None)
app.mainloop()
</snippet></ROW><ROW><id>4219802</id><snippet># program1.py
...
def main():
  app = class(None)
  app.mainloop()

if __name__ == "__main__":
  main()
</snippet></ROW><ROW><id>4219802</id><snippet># program2.py
import program1
program1.main()
</snippet></ROW><ROW><id>4219971</id><snippet>x[1::2, :] = x[1::2, ::-1]</snippet></ROW><ROW><id>4219971</id><snippet>x</snippet></ROW><ROW><id>4219971</id><snippet>import numpy as np
x = np.array([[1,2,3],[3,2,1],[1,2,3],[3,2,1],[1,2,3]])
x_rev = x.copy()
x_rev[1::2, :] = x[1::2, ::-1]
</snippet></ROW><ROW><id>4219971</id><snippet>x</snippet></ROW><ROW><id>4219971</id><snippet>array([[1, 2, 3],
       [3, 2, 1],
       [1, 2, 3],
       [3, 2, 1],
       [1, 2, 3]])
</snippet></ROW><ROW><id>4219971</id><snippet>x_rev</snippet></ROW><ROW><id>4219971</id><snippet>array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])
</snippet></ROW><ROW><id>4219971</id><snippet>x[1::2]</snippet></ROW><ROW><id>4219971</id><snippet>x</snippet></ROW><ROW><id>4219971</id><snippet>1</snippet></ROW><ROW><id>4219971</id><snippet>2</snippet></ROW><ROW><id>4219971</id><snippet>x[::-1]</snippet></ROW><ROW><id>4219971</id><snippet>-1</snippet></ROW><ROW><id>4220800</id><snippet>django.forms.forms.DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>4220800</id><snippet>django.forms.forms.get_declared_fields</snippet></ROW><ROW><id>4220800</id><snippet>creation_counter</snippet></ROW><ROW><id>4220800</id><snippet>django.forms.fields.Field</snippet></ROW><ROW><id>4220839</id><snippet>&lt;&lt;MenuSelect&gt;&gt;</snippet></ROW><ROW><id>4221002</id><snippet>winfo_width</snippet></ROW><ROW><id>4221002</id><snippet>winfo_reqwidth</snippet></ROW><ROW><id>4221079</id><snippet>from Tkinter import *
root = Tk()
topframe=Frame(root)
bottomframe=Frame(root)
bottomframe.pack(side=BOTTOM,fill=X)
topframe.pack(side=TOP,fill=BOTH)
scrollbar = Scrollbar(topframe)
scrollbar.pack(side=RIGHT,fill=Y)
text = Text(topframe,yscrollcommand=scrollbar.set)
text.pack(side=LEFT,fill=BOTH)
scrollbar.config(command=text.yview)
text.config(state=DISABLED)
v = StringVar()
e = Entry(bottomframe,textvariable=v)
def submit():
    command = v.get()
    v.set('')
    #your input handling code goes here.
    wprint(command)
    #end your input handling
e.bind('&lt;Return&gt;',submit)
button=Button(bottomframe,text='RUN',command=submit)
button.pack(side=RIGHT)
e.pack(expand=True,side=LEFT,fill=X)
def wprint(obj):
    text.config(state=NORMAL)
    text.insert(END,str(obj)+'\n')
    text.config(state=DISABLED)
root.mainloop()
</snippet></ROW><ROW><id>4221079</id><snippet>import threading
wlock=threading.Lock()
printqueue=[]
rinput=False
def winput(text):
    with wlock:
        global printqueue,rinput
        rinput=True
        text = raw_input(text)
        rinput=False
        for text in printqueue:
            print(text)
        printqueue=[]
        return text
def wprint(obj):
    global printqueue
    if not(rinput):
        print(str(obj))
    else:
        printqueue.append(str(obj))
</snippet></ROW><ROW><id>4221171</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4221171</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4221171</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4221566</id><snippet>re.search(r'(\(C.*\)),/,(\(D.*\))+', s).group()</snippet></ROW><ROW><id>4221566</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = '(A /something_1)(B /something_2)(C /something_3),/,(D /something_4)(D /something_5)'
&gt;&gt;&gt; re.search(r'(\(C.*\)),/,(\(D.*\))+', s).group()
'(C /something_3),/,(D /something_4)(D /something_5)'
</snippet></ROW><ROW><id>4221594</id><snippet>\s*</snippet></ROW><ROW><id>4221594</id><snippet>\s*?</snippet></ROW><ROW><id>4221594</id><snippet>&gt;&gt;&gt; re.compile(r'(((iphone|games|mac)\s*?)+)', re.I).sub(r'&lt;em&gt;\1&lt;/em&gt;', sentence)
'I love downloading &lt;em&gt;iPhone&lt;/em&gt; &lt;em&gt;games&lt;/em&gt; from my &lt;em&gt;mac&lt;/em&gt;.'
</snippet></ROW><ROW><id>4221594</id><snippet>\s*</snippet></ROW><ROW><id>4221594</id><snippet>&gt;&gt;&gt; re.compile(r'(((iPhone|games|mac)\s*)+)').sub(r'&lt;em&gt;\1&lt;/em&gt;', sentence)
'I love downloading &lt;em&gt;iPhone games &lt;/em&gt;from my &lt;em&gt;mac&lt;/em&gt;.'
</snippet></ROW><ROW><id>4221594</id><snippet>&gt;&gt;&gt; regex = re.compile(r'((iphone|games|mac)(\s*(iphone|games|mac))*)', re.I)
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', sentence)
'I love downloading &lt;em&gt;iPhone games&lt;/em&gt; from my &lt;em&gt;mac&lt;/em&gt;.'
</snippet></ROW><ROW><id>4221594</id><snippet>\b</snippet></ROW><ROW><id>4221594</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(\b(iphone|games|mac)\b(\s*(iphone|games|mac)\b)*)', re.I)
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading iPhone games from my mac')
'I love downloading &lt;em&gt;iPhone games&lt;/em&gt; from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading iPhone gameses from my mac')
'I love downloading &lt;em&gt;iPhone&lt;/em&gt; gameses from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading iPhoney games from my mac')
'I love downloading iPhoney &lt;em&gt;games&lt;/em&gt; from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading iPhoney gameses from my mac')
'I love downloading iPhoney gameses from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading miPhone gameses from my mac')
'I love downloading miPhone gameses from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading miPhone games from my mac')
'I love downloading miPhone &lt;em&gt;games&lt;/em&gt; from my &lt;em&gt;mac&lt;/em&gt;'
&gt;&gt;&gt; regex.sub(r'&lt;em&gt;\1&lt;/em&gt;', 'I love downloading iPhone igames from my mac')
'I love downloading &lt;em&gt;iPhone&lt;/em&gt; igames from my &lt;em&gt;mac&lt;/em&gt;'
</snippet></ROW><ROW><id>4221970</id><snippet>SELECT * FROM people WHERE fname IN ('Elvis', 'Richard');
SELECT * FROM people WHERE fname = 'Elvis' OR fname = 'Richard';
</snippet></ROW><ROW><id>4221970</id><snippet>or 'Richard'</snippet></ROW><ROW><id>4221970</id><snippet>or 1=1</snippet></ROW><ROW><id>4221970</id><snippet>fname = 'Elvis' or 'Richard'</snippet></ROW><ROW><id>4222013</id><snippet>&gt;&gt;&gt; None == False
False
&gt;&gt;&gt; None == True
False
&gt;&gt;&gt; None == None
True
&gt;&gt;&gt; not None
True
</snippet></ROW><ROW><id>4222013</id><snippet>&gt;&gt;&gt; a = set()
&gt;&gt;&gt; a.add(1)
&gt;&gt;&gt; a
{1}
&gt;&gt;&gt; a.add(1)
&gt;&gt;&gt; a
{1}
</snippet></ROW><ROW><id>4222013</id><snippet>if 1 in s</snippet></ROW><ROW><id>4223078</id><snippet>localhost</snippet></ROW><ROW><id>4223871</id><snippet>&gt;&gt;&gt; d = {"your": "DATA", "FROM": "above"}
&gt;&gt;&gt; dict((k.lower(), v) for k, v in d.iteritems())
{'from': 'above', 'your': 'DATA'}
&gt;&gt;&gt; def lower_keys(x):
...   if isinstance(x, list):
...     return [lower_keys(v) for v in x]
...   if isinstance(x, dict):
...     return dict((k.lower(), lower_keys(v)) for k, v in x.iteritems())
...   return x
...
&gt;&gt;&gt; lower_keys({"NESTED": {"ANSWER": 42}})
{'nested': {'answer': 42}}
</snippet></ROW><ROW><id>4223895</id><snippet>HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings
</snippet></ROW><ROW><id>4224347</id><snippet>--export-dynamic</snippet></ROW><ROW><id>4224347</id><snippet>-Wl,--export-dynamic</snippet></ROW><ROW><id>4224347</id><snippet>-Xlinker --export-dynamic</snippet></ROW><ROW><id>4224347</id><snippet>RTLD_GLOBAL</snippet></ROW><ROW><id>4224347</id><snippet>dlopen()</snippet></ROW><ROW><id>4224580</id><snippet>get_item</snippet></ROW><ROW><id>4224580</id><snippet>get_inventory_item</snippet></ROW><ROW><id>4224580</id><snippet>class ITEM(ctypes.Structure):
    _fields_ = [("id", c_ushort),
                ("i", c_uchar),
                ("c", c_uint),
                ("f", c_uint),
                ("p", c_uint),
                ("e", c_ushort)]
</snippet></ROW><ROW><id>4224580</id><snippet>myDLL.get_item.restype = ITEM
</snippet></ROW><ROW><id>4224596</id><snippet>Blocked, Wall, Floor = range(3)
</snippet></ROW><ROW><id>4224637</id><snippet>__repr__()</snippet></ROW><ROW><id>4224637</id><snippet>&gt;&gt;&gt; s = "\\1abc"
&gt;&gt;&gt; s
'\\1abc' # &lt;-- How it's represented in Python code
&gt;&gt;&gt; print s
\1abc # &lt;-- The actual string
</snippet></ROW><ROW><id>4224637</id><snippet>thereplacement</snippet></ROW><ROW><id>4224637</id><snippet>re.sub(pattern, repl, string, count=0)
</snippet></ROW><ROW><id>4224637</id><snippet>&gt;&gt;&gt; s_in  = yourDbMagic() # Which returns \1abc
&gt;&gt;&gt; s_out = re.sub("[0-9]", "2", s_in)
&gt;&gt;&gt; print s_in, s_out
\1abc \2abc
</snippet></ROW><ROW><id>4224833</id><snippet>class Table:
    def __init__(self, *columns, pkey = None):
        self.pkey = pkey
        self.__columns = columns
        self.__data = {}

    def __contains__(self, key):
        return key in self.__data

    def __iter__(self):
        for key in self.__order:
            yield key

    def __len__(self):
        return len(self.__data)

    def items(self):
        for key in self.__order:
            yield key, self.__data[key]

    def insert(self, *unnamed, **named):
        if len(unnamed) &gt; 0:
            row_dict = {}
            for column_id, column in enumerate(self.__columns):
                row_dict[column] = unnamed[column_id]
        else:
            row_dict = named
        key = row_dict[self.pkey]
        self.__data[key] = row_dict

class Subtable(Table):
    def __init__(self, table, row_filter):
        self.__order = []
        self.__data = {}
        for key, row in table.items():
            if row_filter(row):
                self.__data[key] = row
</snippet></ROW><ROW><id>4224903</id><snippet>/etc/udev/rules.d/</snippet></ROW><ROW><id>4224903</id><snippet>/lib/udev/rules.d/</snippet></ROW><ROW><id>4224972</id><snippet>d[n1] = 'Node 1'
</snippet></ROW><ROW><id>4224972</id><snippet>d[n1] = ('Node 1', n1)
</snippet></ROW><ROW><id>4224977</id><snippet>br.open("http://www.bing.com/search?count=50&amp;q=cheese")
response = br.response()
headers = response.info()
print headers
content = response.read()
</snippet></ROW><ROW><id>4224977</id><snippet>count=100</snippet></ROW><ROW><id>4224977</id><snippet>count=100</snippet></ROW><ROW><id>4225423</id><snippet>l = [[1,2,3,4],
     [5,6,7,8],
     [9,10,11,12]]
</snippet></ROW><ROW><id>4225423</id><snippet>l.append(13)</snippet></ROW><ROW><id>4225423</id><snippet>l = [[1,2,3,4],
     [5,6,7,8],
     [9,10,11,12],
     13]
</snippet></ROW><ROW><id>4225423</id><snippet>l[0].append(13)</snippet></ROW><ROW><id>4225423</id><snippet>[[1,2,3,4,13],
 [5,6,7,8],
 [9,10,11,12]]
</snippet></ROW><ROW><id>4225423</id><snippet>for row in l:
    row.append(13)
</snippet></ROW><ROW><id>4225423</id><snippet>[[1, 2, 3, 4, 13], 
 [5, 6, 7, 8, 13], 
 [9, 10, 11, 12, 13]]
</snippet></ROW><ROW><id>4225423</id><snippet>13</snippet></ROW><ROW><id>4225433</id><snippet>import datetime
import collections
import threading

class ExpireCounter:
    """Tracks how many events were added in the preceding time period
    """

    def __init__(self, timeout=1):
        self.lock=threading.Lock()        
        self.timeout = timeout
        self.events = collections.deque()

    def add(self,item):
        """Add event time
        """
        with self.lock:
            self.events.append(item)
            threading.Timer(self.timeout,self.expire).start()

    def __len__(self):
        """Return number of active events
        """
        with self.lock:
            return len(self.events)

    def expire(self):
        """Remove any expired events
        """
        with self.lock:
            self.events.popleft()

    def __str__(self):
        with self.lock:
            return str(self.events)
</snippet></ROW><ROW><id>4225433</id><snippet>import time
c = ExpireCounter()
assert(len(c) == 0)
print(c)
# deque([])

c.add(datetime.datetime.now())
time.sleep(0.75)
c.add(datetime.datetime.now())    
assert(len(c) == 2)
print(c)
# deque([datetime.datetime(2010, 11, 19, 8, 50, 0, 91426), datetime.datetime(2010, 11, 19, 8, 50, 0, 842715)])

time.sleep(0.75)
assert(len(c) == 1)
print(c)
# deque([datetime.datetime(2010, 11, 19, 8, 50, 0, 842715)])
</snippet></ROW><ROW><id>4225569</id><snippet>telnet
set ?
set crlf
open &lt;host&gt; &lt;port&gt;
</snippet></ROW><ROW><id>4225856</id><snippet>42</snippet></ROW><ROW><id>4225856</id><snippet>"fourty-two"</snippet></ROW><ROW><id>4226065</id><snippet>HTTPStreamer</snippet></ROW><ROW><id>4226065</id><snippet>class FTPStreamer(object):
    implements(IReadFile)

    def __init__(self, url):
        self.url = url

    def send(self, consumer):
        fetch(url, consumer.write)
        # You also need a Deferred to return here, so the 
        # FTP implementation knows when you're done.
        return someDeferred
</snippet></ROW><ROW><id>4226478</id><snippet>    f = mongoengine.fields.GridFSProxy()
    to_read = open('/home/.../marmot.jpg', 'r')   
    f.put(to_read, filename=os.path.basename(to_read.name))
    to_read.close()
</snippet></ROW><ROW><id>4226559</id><snippet>import pyPdf
if pyPdf.PdfFileReader(open("file_name.pdf", 'rb')).isEncrypted:
    print "Rut ro, it's encrypted."
    # skip file? Write to a log?
else:
    print "We're clear."
    # Do stuff with the file.
</snippet></ROW><ROW><id>4226726</id><snippet>shelve</snippet></ROW><ROW><id>4226726</id><snippet>sqlite</snippet></ROW><ROW><id>4226726</id><snippet>sqlite</snippet></ROW><ROW><id>4227156</id><snippet># based on : www.daniweb.com/code/snippet263775.html
import math
import wave
import struct

def make_sine(freq=440, datasize=10000, fname="test.wav", framerate=44100.00):
    amp=8000.0 # amplitude
    sine_list=[]
    for x in range(datasize):
        sine_list.append(math.sin(2*math.pi * freq * ( x/frate)))
    # Open up a wav file
    wav_file=wave.open(fname,"w")
    # wav params
    nchannels = 1
    sampwidth = 2
    framerate = int(frate)
    nframes=datasize
    comptype= "NONE"
    compname= "not compressed"
    wav_file.setparams((nchannels, sampwidth, framerate, nframes, comptype, compname))
    #write on file
    for s in sine_list:
        wav_file.writeframes(struct.pack('h', int(s*amp/2)))
    wav_file.close()

frate = 44100.00 #that's the framerate
freq=987.0 #that's the frequency, in hertz
seconds = 3 #seconds of file
data_length = frate*seconds #number of frames
fname = "WaveTest2.wav" #name of file
make_sine(freq, data_length, fname) 
</snippet></ROW><ROW><id>4227280</id><snippet>np.repeat</snippet></ROW><ROW><id>4227280</id><snippet>&gt;&gt;&gt; a = np.array([[1, 5, 9],
              [2, 7, 3],
              [8, 4, 6]])

&gt;&gt;&gt; np.repeat(a,2, axis=1)
array([[1, 1, 5, 5, 9, 9],
       [2, 2, 7, 7, 3, 3],
       [8, 8, 4, 4, 6, 6]])
</snippet></ROW><ROW><id>4227280</id><snippet>np.repeat</snippet></ROW><ROW><id>4227280</id><snippet>&gt;&gt;&gt; np.repeat(np.repeat(a,2, axis=0), 2, axis=1)
array([[1, 1, 5, 5, 9, 9],
       [1, 1, 5, 5, 9, 9],
       [2, 2, 7, 7, 3, 3],
       [2, 2, 7, 7, 3, 3],
       [8, 8, 4, 4, 6, 6],
       [8, 8, 4, 4, 6, 6]])
</snippet></ROW><ROW><id>4227280</id><snippet>&gt;&gt;&gt; np.repeat(a, [2,2,1], axis=0)
array([[1, 5, 9],
       [1, 5, 9],
       [2, 7, 3],
       [2, 7, 3],
       [8, 4, 6]])
</snippet></ROW><ROW><id>4227280</id><snippet>list</snippet></ROW><ROW><id>4227280</id><snippet>axis=0</snippet></ROW><ROW><id>4227562</id><snippet>class RootClass(object):
    pass

class ChildClass(RootClass):
    pass
</snippet></ROW><ROW><id>4227562</id><snippet>import sys

from my_module import RootClass

# Loop over all subclasses of RootClass.
for class_ in RootClass.__subclasses__():
    # from module import subclass.
    __import__(class_.__module__, globals(), locals(), [class_.__name__,])

    # Update the global namespace with the new class
    globals().update({class_.__name__:
                      getattr(sys.modules[class_.__module__], 
                              class_.__name__)})

print ChildClass
# OutPut : &lt;class 'my_module.ChildClass'&gt;
</snippet></ROW><ROW><id>4227645</id><snippet>&lt;html&gt;
&lt;p&gt;
    &lt;strong&gt;Date:&lt;/strong&gt; 19/11/2010&lt;br/&gt;
    &lt;strong&gt;Ref:&lt;/strong&gt; AAAAAA/01&lt;br/&gt;
    &lt;b&gt;Type:&lt;/b&gt; Normal&lt;br/&gt;
    &lt;b&gt;Country:&lt;/b&gt; United Kingdom&lt;br/&gt;
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
    &lt;br/&gt;
    &lt;b&gt;1. Title:&lt;/b&gt; The Title&lt;br/&gt;
    &lt;b&gt;2. Description: &lt;/b&gt; This description may contains &lt;bold&gt;html&lt;/bold&gt; but i still need all of it!&lt;br/&gt;
    &lt;b&gt;3. Date:&lt;/b&gt; 25th October&lt;br/&gt;
&lt;/p&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>4227645</id><snippet>/html/p/strong[.='Date:']/following-sibling::text()[1]
</snippet></ROW><ROW><id>4227645</id><snippet> 19/11/2010
</snippet></ROW><ROW><id>4227645</id><snippet>/html/p/*[self::strong[.='Date:' or .='Ref:']|
          self::b[.='Type:' or .='Country:']]
         /following-sibling::text()[1]
</snippet></ROW><ROW><id>4227645</id><snippet>/html/p/node()[preceding-sibling::b[1][.='2. Description: ']]
              [following-sibling::b[1][.='3. Date:']]
              [not(self::br)]
</snippet></ROW><ROW><id>4228018</id><snippet>class ThatsEnoughOfThat(Exception):
    pass

def custom_odeint(func, y0, t): # + whatever parameters you need
    for timestep in t:
        try:
            # Do stuff. Call odeint/other scipy functions?
        except ThatsEnoughOfThat:
            break
    return completedstuff

def sm2(x, t):
    if x[0] &lt; 0:
       raise ThatsEnoughOfThat
    return np.array([x[1], eta*Ez0(x[0])])
</snippet></ROW><ROW><id>4228267</id><snippet>import MySQLdb
</snippet></ROW><ROW><id>4228725</id><snippet>import ExifTags
import Image

img = Image.open(filename)
print(img._getexif().items())
exif=dict((ExifTags.TAGS[k], v) for k, v in img._getexif().items() if k in ExifTags.TAGS)
if not exif['Orientation']:
    img=img.rotate(90, expand=True)
img.thumbnail((1000,1000), Image.ANTIALIAS)
img.save(output_fname, "JPEG")
</snippet></ROW><ROW><id>4228766</id><snippet>from lxml import html
page = html.fromstring(open("um.htm", "r").read())
matches = page.xpath("//a[contains(@title, 'pm.') or contains(@title, 'ol')]/span")
print [elem.text for elem in matches]
</snippet></ROW><ROW><id>4228776</id><snippet>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                   help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                   const=sum, default=max,
                   help='sum the integers (default: find the max)')

args = parser.parse_args()
print(args.accumulate(args.integers))
</snippet></ROW><ROW><id>4228845</id><snippet>&gt;&gt;&gt; x = 'abcd'
&gt;&gt;&gt; x[::-1]
'dcba'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4228845</id><snippet>&gt;&gt;&gt; strList = [1, 2, 3, 4, 5]
&gt;&gt;&gt; reverseCharList = []
&gt;&gt;&gt; for someChar in strList:
...     print strList
...     reverseCharList.append(strList.pop())
...     print strList
... 
[1, 2, 3, 4, 5]   &lt;-- Iteration 1
[1, 2, 3, 4]
[1, 2, 3, 4]      &lt;-- Iteration 2
[1, 2, 3]
[1, 2, 3]         &lt;-- Iteration 3
[1, 2]
</snippet></ROW><ROW><id>4228845</id><snippet>&gt;&gt;&gt; strList = [1, 2, 3, 4, 5]
&gt;&gt;&gt; k = strList.__iter__()
&gt;&gt;&gt; k.next()
1
&gt;&gt;&gt; k.__length_hint__()   &lt;--- Still 4 to go
4
&gt;&gt;&gt; strList.pop()         &lt;---- You pop an element
5
&gt;&gt;&gt; k.__length_hint__()   &lt;----- Now only 3 to go
3
&gt;&gt;&gt; 
&gt;&gt;&gt; k.next()
2
&gt;&gt;&gt; k.__length_hint__()
2
</snippet></ROW><ROW><id>4228854</id><snippet>N = lcm*sum(b_1/d_1+...+b_k/d_k)
</snippet></ROW><ROW><id>4228854</id><snippet>stream_index = []
for sample_num in range(lcm):
    stream_index += [i for i, ch in enumerate(all_channels)
                     if ch.samples_for(sample_num)]
repeat_count = [b[i] for i in stream_index]
stream_index = numpy.array(stream_index).repeat(repeat_count)
</snippet></ROW><ROW><id>4228854</id><snippet>d</snippet></ROW><ROW><id>4228854</id><snippet>b</snippet></ROW><ROW><id>4228854</id><snippet>data = numpy.fromfile(my_file, dtype=numpy.uint8).reshape(-1, N)
streams = [data[:,stream_index == i].ravel() for i in range(k)]
</snippet></ROW><ROW><id>4228854</id><snippet>reshape()</snippet></ROW><ROW><id>4228854</id><snippet>dtype</snippet></ROW><ROW><id>4228854</id><snippet>streams[0].dtype = "&gt;i"
</snippet></ROW><ROW><id>4229480</id><snippet># columns in table x
for row in cursor.columns(table='x'):
    print row.column_name
</snippet></ROW><ROW><id>4229797</id><snippet>print '%gx³ + %gx² + %gx + %g = 0' %(a,b,c,d)
</snippet></ROW><ROW><id>4229875</id><snippet>self.canvas.draw()</snippet></ROW><ROW><id>4229875</id><snippet>self.canvas.draw_artist(ellipsePlot)</snippet></ROW><ROW><id>4229875</id><snippet>self.canvas.draw()</snippet></ROW><ROW><id>4229875</id><snippet># Animates 3 ellipses overlain on a scatterplot
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
import numpy as np

num = 10
x = np.random.random(num)
y = np.random.random(num)

plt.ion()
fig = plt.figure()
ax = fig.add_subplot(111)
line = ax.plot(x, y, 'bo')

fig.canvas.draw()
bg = fig.canvas.copy_from_bbox(ax.bbox)

# Pseudo-main loop
for i in range(100):
    fig.canvas.restore_region(bg)

    # Make a new ellipse each time... (inefficient!)
    for i in range(3):
        width, height, angle = np.random.random(3)
        angle *= 180
        ellip = Ellipse(xy=(0.5, 0.5), width=width, height=height, 
                facecolor='red', angle=angle, alpha=0.5)
        ax.add_patch(ellip)
        ax.draw_artist(ellip)

    fig.canvas.blit(ax.bbox)
</snippet></ROW><ROW><id>4229875</id><snippet>ax.remove(ellipsePlot)</snippet></ROW><ROW><id>4229875</id><snippet># Animates 3 ellipses overlain on a scatterplot
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse
import numpy as np

num = 10
x = np.random.random(num)
y = np.random.random(num)

plt.ion()
fig = plt.figure()
ax = fig.add_subplot(111)
line = ax.plot(x, y, 'bo')

fig.canvas.draw()
bg = fig.canvas.copy_from_bbox(ax.bbox)

# Make and add the ellipses the first time (won't ever be drawn)
ellipses = []
for i in range(3):
    ellip = Ellipse(xy=(0.5, 0.5), width=1, height=1, 
            facecolor='red', alpha=0.5)
    ax.add_patch(ellip)
    ellipses.append(ellip)

# Pseudo-main loop
for i in range(100):
    fig.canvas.restore_region(bg)

    # Update the ellipse artists...
    for ellip in ellipses:
        ellip.width, ellip.height, ellip.angle = np.random.random(3)
        ellip.angle *= 180
        ax.draw_artist(ellip)

    fig.canvas.blit(ax.bbox)
</snippet></ROW><ROW><id>4230008</id><snippet>x = [[None for _ in range(5)] for _ in range(6)]
</snippet></ROW><ROW><id>4230131</id><snippet>set</snippet></ROW><ROW><id>4230131</id><snippet>values = mygenerator()
unique_values = set(values)
</snippet></ROW><ROW><id>4230131</id><snippet>set</snippet></ROW><ROW><id>4230131</id><snippet>def nub(it):
    seen = set()
    for x in it:
        if x not in seen:
            yield x
            seen.add(x)
</snippet></ROW><ROW><id>4230131</id><snippet>nub</snippet></ROW><ROW><id>4230690</id><snippet>from Tkinter import *
import ttk

root = Tk()

def calculate(*args) :
    value = float(feet.get())
    meters.set((0.305 * value * 10000. + .5)/10000.)

def callback_function(*args) :
    meters.set('blue')

mf = ttk.Frame(root, padding="3 3 12 12")
mf.grid(column=0, row=0, sticky=(N, W, E, S))
mf.columnconfigure(0, weight=1)
mf.rowconfigure(0, weight=1)

feet = StringVar()
meters = StringVar()

feet_entry = ttk.Entry(mf, width=7, textvariable=feet)
feet_entry.grid(column=2, row=1, sticky=(W, E))

ttk.Label(mf, textvariable=meters, background='#E9D66B').grid(column=2,
          row=2, sticky=(W, E))

ttk.Button(mf, text="Calculate", command=calculate).grid(column=2,row=3,
          sticky=W)

ttk.Label(mf, text="feet").grid(column=3, row=1, sticky=W)
ttk.Label(mf, text="is equivalent to").grid(column=1, row=2, sticky=E)
ttk.Label(mf, text="meters").grid(column=3, row=2, sticky=W)

for child in mf.winfo_children():
   child.grid_configure(padx=5, pady=5)

feet_entry.focus()
root.bind('&lt;Return&gt;', calculate)

# this is the key line
root.bind('red', callback_function)

root.mainloop()
</snippet></ROW><ROW><id>4230733</id><snippet>[x[1] for x in my_func(i) if x[0] == 0]
</snippet></ROW><ROW><id>4230752</id><snippet>import stuff1
import stuff2 
import sys

def main(arg1, arg2):
    # do whatever and return 0 for success and an 
    # integer x, 1 &lt;= x &lt;= 256 for failure

if __name__=='__main__':
    sys.exit(main(sys.argv[1], sys.argv[2]))
</snippet></ROW><ROW><id>4230752</id><snippet>import getCamera

getCamera.main(arg1, arg2)
</snippet></ROW><ROW><id>4230765</id><snippet>PSD</snippet></ROW><ROW><id>4230765</id><snippet>logPSD = numpy.log(PSD)
logW_F = scipy.interpolate.interp1d(logPSD[:,0], logPSD[:,1])
W_F = numpy.exp(logW_F(numpy.log(f)))
</snippet></ROW><ROW><id>4230765</id><snippet>bounds_error=False</snippet></ROW><ROW><id>4230765</id><snippet>interp1d()</snippet></ROW><ROW><id>4230765</id><snippet>interp1d()</snippet></ROW><ROW><id>4230797</id><snippet>def countOdd(l):
    if l == list(): return 0       //base case, empty list means we're done
    return l[0] % 2 + countOdd(l[1:]) //add 1 (or don't) depending on odd/even of element 0.  recurse on the rest
</snippet></ROW><ROW><id>4230797</id><snippet>   thisElement = l[0]
   restOfList = l[1:]
   if thisElement % 2 == 0: currentElementOdd = 0
   else: currentElementOdd = 1
   return currentElementOdd + countOdd(restOfList)
</snippet></ROW><ROW><id>4230797</id><snippet>&gt;&gt;&gt; def countOdd(l):
...     return fold(lambda x,y: x+(y&amp;1),l,0)
... 
&gt;&gt;&gt; def fold(f,l,a):
...     if l == list(): return a
...     return fold(f,l[1:],f(a,l[0]))
</snippet></ROW><ROW><id>4230866</id><snippet>sys.stdout</snippet></ROW><ROW><id>4230866</id><snippet>print</snippet></ROW><ROW><id>4230866</id><snippet>logging</snippet></ROW><ROW><id>4230866</id><snippet>import sys
sys.stdout = open('stdout.txt', 'w')
sys.stderr = open('stderr.txt', 'w')
</snippet></ROW><ROW><id>4230866</id><snippet>import sys
sys.stdout = sys.stderr = open('output.txt', 'w')
</snippet></ROW><ROW><id>4230866</id><snippet>import sys
class NullWriter(object):
    def write(self, value): pass

sys.stdout = sys.stderr = NullWriter()
</snippet></ROW><ROW><id>4230995</id><snippet>paths += find_all_paths(graph, node, end, path)
</snippet></ROW><ROW><id>4230995</id><snippet> newpaths = find_all_paths(graph, node, end, path)
 for newpath in newpaths:
     paths.append(newpath)
</snippet></ROW><ROW><id>4231083</id><snippet>    self.output_list.InsertStringItem(0,self.input_area.GetValue())
</snippet></ROW><ROW><id>4231134</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext import db

class Log(db.Model):
    access_time = db.DateTimeProperty(auto_now_add=True)
    ip_address = db.StringProperty()

class MainPage(webapp.RequestHandler):
    def get(self):

        # obtain ip address
        ip = self.request.remote_addr

        # create a new Log record
        log = Log()

        # assign ip address to the ip_address field
        log.ip_address = ip

        # no need to set access_time because 
        # of the auto_now_add=True setting defined in the Log model

        # save to the datastore
        log.put()

        # output 
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Logged your visit from ip address %s' % ip)

class LogPage(webapp.RequestHandler):
    def get(self):
        logs = Log.all()

        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Ip addresses: ')
        for log in logs:
            self.response.out.write(log.ip_address + ',')

application = webapp.WSGIApplication([('/', MainPage), ('/logs', LogPage)],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>4231265</id><snippet>RequestHandler</snippet></ROW><ROW><id>4231265</id><snippet>redirect()</snippet></ROW><ROW><id>4231265</id><snippet>class MainPage(webapp.RequestHandler):
    def get(self):

        ip = self.request.remote_addr
        log = Log()
        log.ip_address = ip
        log.put()
        self.redirect("http://www.appurl.com") # replaced this -&gt; print "Location:http://www.appurl.com"
</snippet></ROW><ROW><id>4231344</id><snippet>Popen</snippet></ROW><ROW><id>4231344</id><snippet>call</snippet></ROW><ROW><id>4231344</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; return_value = subprocess.call(['pdflatex', 'textfile'], shell=False) # shell should be set to False
</snippet></ROW><ROW><id>4231344</id><snippet>return_value</snippet></ROW><ROW><id>4231344</id><snippet>Popen</snippet></ROW><ROW><id>4231344</id><snippet>uname</snippet></ROW><ROW><id>4231344</id><snippet>&gt;&gt;&gt; process = subprocess.Popen(['uname', '-r'], shell=False, stdout=subprocess.PIPE)
&gt;&gt;&gt; output = process.communicate()[0]
&gt;&gt;&gt; output
'2.6.35-22-generic\n'
</snippet></ROW><ROW><id>4231344</id><snippet>shell=True</snippet></ROW><ROW><id>4231350</id><snippet>[x(y) for x, y in zip(functions, values)]
</snippet></ROW><ROW><id>4231370</id><snippet>&gt;&gt;&gt; '#&lt;i&gt;&lt;b&gt;when&lt;/b&gt;&lt;/i&gt;'[4:-4]
'&lt;b&gt;when&lt;/b&gt;'
</snippet></ROW><ROW><id>4231558</id><snippet>Group</snippet></ROW><ROW><id>4231558</id><snippet>series</snippet></ROW><ROW><id>4231558</id><snippet>series = hand + Optional(greater | through + hand)
</snippet></ROW><ROW><id>4231558</id><snippet>series = Group(hand + Optional(greater | through + hand))
</snippet></ROW><ROW><id>4231558</id><snippet>series</snippet></ROW><ROW><id>4231558</id><snippet>delimitedList</snippet></ROW><ROW><id>4231558</id><snippet>hand_range = delimitedList(series)
</snippet></ROW><ROW><id>4231558</id><snippet>delimitedList</snippet></ROW><ROW><id>4231558</id><snippet>delim</snippet></ROW><ROW><id>4231558</id><snippet>delimitedList</snippet></ROW><ROW><id>4231558</id><snippet>[['2', '2', '+'], ['A', 'K', 'o', '-', 'A', 'T', 'o'], ['K', 'Q', 'z']]
</snippet></ROW><ROW><id>4231558</id><snippet>Group</snippet></ROW><ROW><id>4231558</id><snippet>hand</snippet></ROW><ROW><id>4231558</id><snippet>Group</snippet></ROW><ROW><id>4231583</id><snippet>None</snippet></ROW><ROW><id>4231583</id><snippet>execute()</snippet></ROW><ROW><id>4231583</id><snippet>mycursor.execute("""INSERT INTO products 
                    (city_id, product_id, quantity, price) 
                    VALUES (%s, %s, %s, %s)""", 
                 (city_id, product_id, quantity, price))
</snippet></ROW><ROW><id>4231583</id><snippet>user_id = None
mycursor.execute("""INSERT INTO products 
                    (user_id, city_id, product_id, quantity, price) 
                    VALUES (%s, %s, %s, %s, %s)""", 
                 (user_id, city_id, product_id, quantity, price))
</snippet></ROW><ROW><id>4232401</id><snippet>import types

def attach_on_sample_slider(obj, base):
    def on_sample_slider(self, value):
        self.samples = base**value
        self.sample_label.setText('%d' % self.samples)

    # This next line creates a method from the function
    # The first arg is the function and the second arg is the object
    # upon which you want it to be a method.
    obj.on_sample_slider = types.MethodType(on_sample_slider, obj)
</snippet></ROW><ROW><id>4232401</id><snippet>def some_method(self, foo):
    attach_on_sample_slider(self, 4)
</snippet></ROW><ROW><id>4232401</id><snippet>def make_method(name):
    def method(self, whatever, args, go, here):
        #whatever code goes here
    method.__name__ = name
    return method


class A(object):
    method1 = make_method('method1')
    method2 = make_method('method2') 
</snippet></ROW><ROW><id>4232401</id><snippet>__name__</snippet></ROW><ROW><id>4232401</id><snippet>class A(object):
    def method1(self, arg1, arg2):
        #code goes here

    method2 = method1
    method3 = method1 
</snippet></ROW><ROW><id>4232401</id><snippet>make_method</snippet></ROW><ROW><id>4232401</id><snippet>def make_opener(filename):
    def opener():
        return open(filename)
    return opener

open_config = make_opener('config.cfg')
open_log = make_opener('log.log')
</snippet></ROW><ROW><id>4232401</id><snippet>filename</snippet></ROW><ROW><id>4232402</id><snippet>obj is None</snippet></ROW><ROW><id>4232402</id><snippet>isinstance(obj, str)</snippet></ROW><ROW><id>4232402</id><snippet>isinstance(obj, basestring)</snippet></ROW><ROW><id>4232402</id><snippet>2to3</snippet></ROW><ROW><id>4232402</id><snippet>try:
    return isinstance(obj, basestring)
except NameError:
    return isinstance(obj, str)
</snippet></ROW><ROW><id>4232414</id><snippet>from PIL import Image, ImageFile, PngImagePlugin

def patched_chunk_tRNS(self, pos, len):
    i16 = PngImagePlugin.i16
    s = ImageFile._safe_read(self.fp, len)
    if self.im_mode == "P":
        self.im_info["transparency"] = map(ord, s)
    elif self.im_mode == "L":
        self.im_info["transparency"] = i16(s)
    elif self.im_mode == "RGB":
        self.im_info["transparency"] = i16(s), i16(s[2:]), i16(s[4:])
    return s
PngImagePlugin.PngStream.chunk_tRNS = patched_chunk_tRNS

def patched_load(self):
    if self.im and self.palette and self.palette.dirty:
        apply(self.im.putpalette, self.palette.getdata())
        self.palette.dirty = 0
        self.palette.rawmode = None
        try:
            trans = self.info["transparency"]
        except KeyError:
            self.palette.mode = "RGB"
        else:
            try:
                for i, a in enumerate(trans):
                    self.im.putpalettealpha(i, a)
            except TypeError:
                self.im.putpalettealpha(trans, 0)
            self.palette.mode = "RGBA"
    if self.im:
        return self.im.pixel_access(self.readonly)
Image.Image.load = patched_load

Image.open('kHrY6.png').convert('RGBA').save('kHrY6-out.png')
</snippet></ROW><ROW><id>4232453</id><snippet>mylists = {}

x = 'abhishek'
mylists[x] = []
</snippet></ROW><ROW><id>4232453</id><snippet>mylists</snippet></ROW><ROW><id>4232453</id><snippet>mylists[x]</snippet></ROW><ROW><id>4232453</id><snippet>x</snippet></ROW><ROW><id>4232486</id><snippet>frozenset</snippet></ROW><ROW><id>4232565</id><snippet>HTMLParser</snippet></ROW><ROW><id>4232565</id><snippet>src</snippet></ROW><ROW><id>4232565</id><snippet>img</snippet></ROW><ROW><id>4232565</id><snippet>&lt;img src="this is what you want" width=640 height=480/&gt;</snippet></ROW><ROW><id>4232565</id><snippet>wget</snippet></ROW><ROW><id>4232565</id><snippet>grep</snippet></ROW><ROW><id>4232565</id><snippet>bash</snippet></ROW><ROW><id>4232889</id><snippet>import Crypto.Hash.MD5 as MD5
import Crypto.PublicKey.RSA as RSA
import Crypto.PublicKey.DSA as DSA
import Crypto.PublicKey.ElGamal as ElGamal
import Crypto.Util.number as CUN
import os

plaintext='The rain in Spain falls mainly on the Plain'

# Here is a hash of the message
hash=MD5.new(plaintext).digest()
print(repr(hash))
# '\xb1./J\xa883\x974\xa4\xac\x1e\x1b!\xc8\x11'

for alg in (RSA,DSA,ElGamal):
    # Generates a fresh public/private key pair
    key=alg.generate(384,os.urandom)

    if alg == DSA:
        K=CUN.getRandomNumber(128,os.urandom)
    elif alg == ElGamal:
        K=CUN.getPrime(128,os.urandom)
        while CUN.GCD(K,key.p-1)!=1:
            print('K not relatively prime with {n}'.format(n=key.p-1))
            K=CUN.getPrime(128,os.urandom)
        # print('GCD({K},{n})=1'.format(K=K,n=key.p-1))
    else:
        K=''

    # You sign the hash
    signature=key.sign(hash,K)
    print(len(signature),alg.__name__)
    # (1, 'Crypto.PublicKey.RSA')
    # (2, 'Crypto.PublicKey.DSA')
    # (2, 'Crypto.PublicKey.ElGamal')

    # You share pubkey with Friend
    pubkey=key.publickey()

    # You send message (plaintext) and signature to Friend.
    # Friend knows how to compute hash.
    # Friend verifies the message came from you this way:
    assert pubkey.verify(hash,signature)

    # A different hash should not pass the test.
    assert not pubkey.verify(hash[:-1],signature)
</snippet></ROW><ROW><id>4232896</id><snippet>from Tkinter import *
master = Tk()
listbox = Listbox(master, selectbackground="red")
</snippet></ROW><ROW><id>4233328</id><snippet>&amp;CRB</snippet></ROW><ROW><id>4233328</id><snippet>&amp;END</snippet></ROW><ROW><id>4233328</id><snippet>import re

# the regular expression treats newlines as a regular character, so the
# multiline entries are okay. It's non-greedy, so it gets individual entries.
pat = re.compile(r'&amp;CRB(.+?)&amp;END',  re.DOTALL)

s = ''' &amp;CRB  A='test1'   B=123,345, 678   &amp;END
Misc text potentially between entries ...
&amp;CRB  A='test2'   
             B=788, 345, 3424   &amp;END
&amp;CRB  A='test3'   
             B=788, 345, 3424   &amp;END
&amp;CRB  A='test4' B=788, 345, 3424   &amp;END'''

for entry in pat.findall(s):
   # do something with each entry
   print entry
</snippet></ROW><ROW><id>4233328</id><snippet> A='test1'   B=123,345, 678   
  A='test2'   
             B=788, 345, 3424   
  A='test3'   
             B=788, 345, 3424   
  A='test4' B=788, 345, 3424  
</snippet></ROW><ROW><id>4233330</id><snippet>caldav</snippet></ROW><ROW><id>4233330</id><snippet>test.py</snippet></ROW><ROW><id>4233330</id><snippet>import</snippet></ROW><ROW><id>4233330</id><snippet>test.py</snippet></ROW><ROW><id>4233330</id><snippet>caldav</snippet></ROW><ROW><id>4233330</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4233330</id><snippet>sys.path</snippet></ROW><ROW><id>4233330</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('/ufs/guido/lib/python')
</snippet></ROW><ROW><id>4233430</id><snippet>-gthread</snippet></ROW><ROW><id>4233430</id><snippet>-pylab</snippet></ROW><ROW><id>4233430</id><snippet>cd</snippet></ROW><ROW><id>4233430</id><snippet>%bg</snippet></ROW><ROW><id>4233452</id><snippet>def do_POST(self):
    ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
    if ctype == 'multipart/form-data':
        postvars = cgi.parse_multipart(self.rfile, pdict)
    elif ctype == 'application/x-www-form-urlencoded':
        length = int(self.headers.getheader('content-length'))
        postvars = cgi.parse_qs(self.rfile.read(length), keep_blank_values=1)
    else:
        postvars = {}
    ...
</snippet></ROW><ROW><id>4233482</id><snippet>s = sorted(s, key = lambda x: (x[1], x[2]))
</snippet></ROW><ROW><id>4233482</id><snippet>itemgetter</snippet></ROW><ROW><id>4233482</id><snippet>import operator
s = sorted(s, key = operator.itemgetter(1, 2))
</snippet></ROW><ROW><id>4233482</id><snippet>sort</snippet></ROW><ROW><id>4233482</id><snippet>sorted</snippet></ROW><ROW><id>4233482</id><snippet>s.sort(key = operator.itemgetter(1, 2))
</snippet></ROW><ROW><id>4233558</id><snippet>import urllib2
import lxml.html
import re
re_dollars = '\$?\s*(\d+\.\d{2})'

def urlExtractData(url, defs):
    """
    Get html from url, parse according to defs, return as dictionary

    defs is a list of tuples ("name", "xpath", "regex", fn )
      name becomes the key in the returned dictionary
      xpath is used to extract a string from the page
      regex further processes the string (skipped if None)
      fn casts the string to the desired type (skipped if None)
    """

    page = urllib2.urlopen(url) # can modify this to include your cookies
    tree = lxml.html.parse(page)

    res = {}
    for name,path,reg,fn in defs:
        txt = tree.xpath(path)[0]

        if reg != None:
            match = re.search(reg,txt)
            txt = match.group(1)

        if fn != None:
            txt = fn(txt)

        res[name] = txt

    return res

def getStockData(code):
    url = 'https://www.schwab.wallst.com/public/research/stocks/summary.asp?user_id=schwabpublic&amp;symbol=' + code
    defs = [
        ("stock_name", '//span[@class="header1"]/text()', None, str),
        ("stock_symbol", '//span[@class="header2"]/text()', None, str),
        ("last_price", '//span[@class="neu"]/text()', re_dollars, float)
        # etc
    ]
    return urlExtractData(url, defs)
</snippet></ROW><ROW><id>4233558</id><snippet>print repr(getStockData('MSFT'))
</snippet></ROW><ROW><id>4233558</id><snippet>{'stock_name': 'Microsoft Corp', 'last_price': 25.690000000000001, 'stock_symbol': 'MSFT:NASDAQ'}
</snippet></ROW><ROW><id>4233655</id><snippet>codecs</snippet></ROW><ROW><id>4233655</id><snippet># coding: utf-8
from __future__ import print_function
import sys
import codecs

symbols = (u'♠',u'♥',u'♦',u'♣')

print(u' '.join(symbols))
print(*symbols)
with codecs.open('test.txt','w','utf-8') as testfile:
    print(*symbols, file=testfile)
</snippet></ROW><ROW><id>4233655</id><snippet># coding: utf-8
from __future__ import print_function
from __future__ import unicode_literals
import sys
import codecs

symbols = ('♠','♥','♦','♣')

print(' '.join(symbols))
print(*symbols)
with codecs.open('test.txt','w','utf-8') as testfile:
    print(*symbols, file=testfile)
</snippet></ROW><ROW><id>4233655</id><snippet>print</snippet></ROW><ROW><id>4233765</id><snippet>itertools.product(*l)</snippet></ROW><ROW><id>4233800</id><snippet>__mul__</snippet></ROW><ROW><id>4233800</id><snippet>MyFloatExt</snippet></ROW><ROW><id>4233800</id><snippet>isinstance(other,(int,long,float))
</snippet></ROW><ROW><id>4233800</id><snippet>isinstance(other,Number) #from numbers import Number
</snippet></ROW><ROW><id>4233800</id><snippet>__mul__</snippet></ROW><ROW><id>4233800</id><snippet>MyFloat</snippet></ROW><ROW><id>4233800</id><snippet>class MyFloat(object):
#...
  def __mul__(self, other):
    return type(self)(self.a * other.a)
#...
</snippet></ROW><ROW><id>4233800</id><snippet>super</snippet></ROW><ROW><id>4233800</id><snippet>MyFloat.__mul__</snippet></ROW><ROW><id>4233800</id><snippet>from numbers import Number
class MyFloat(object):
  def __init__(self, a):
    self.a = a

  def __mul__(self, other):
    return type(self)(self.a * other.a)

  def __repr__(self):
    return str(self.a)


class MyFloatExt(MyFloat):
  def __init__(self, a):
    super(MyFloatExt,self).__init__(a)

  def __add__(self, other):
    return type(self)(self.a + other.a)

  def __mul__(self, other):
    if isinstance(other,Number):
      return type(self)(self.a * other)
    else:
      return super(MyFloatExt,self).__mul__(other)


a = MyFloatExt(0.5)
b = MyFloatExt(1.5)

c = a + b
print c

d = a * b
print d


e = d * c
print e

print isinstance(e, MyFloat)

f = e * 0.5
print f

print map(type,[a,b,c,d,e,f]) == [MyFloatExt]*6
</snippet></ROW><ROW><id>4233840</id><snippet>readNames()
print readNames()
</snippet></ROW><ROW><id>4233840</id><snippet>def readNames():
    nameList = []
    while True: #infinite loop
        addList = raw_input("Please enter a name: ")
        if addList == 'finish':
            return nameList
        nameList.append(addList)

# store the result, then print it
names = readNames()
print names
</snippet></ROW><ROW><id>4234282</id><snippet>import shelve
myshelf = shelve.open("filename") # Might turn into filename.db
myshelf["A"] = "First letter of alphabet"
print myshelf["A"]
# ...
myshelf.close()   # You should do this explicitly when you're finished
</snippet></ROW><ROW><id>4234310</id><snippet>strings = ['a', 'b']
strings = [s + 'c' for s in strings]
</snippet></ROW><ROW><id>4234718</id><snippet>_file = os.path.abspath(sys.argv[0])
path = os.path.dirname(_file)
</snippet></ROW><ROW><id>4234976</id><snippet>sudo apt-get install mysql-server</snippet></ROW><ROW><id>4234976</id><snippet>settings.DATABASES</snippet></ROW><ROW><id>4234976</id><snippet>HOST</snippet></ROW><ROW><id>4234976</id><snippet>"/opt/lampp/var/mysql/mysql.sock"</snippet></ROW><ROW><id>4235050</id><snippet>def NotFoundPage(BasePage):
</snippet></ROW><ROW><id>4235050</id><snippet>class NotFoundPage(BasePage):
</snippet></ROW><ROW><id>4235084</id><snippet>B.__init__</snippet></ROW><ROW><id>4235084</id><snippet>self.__class__</snippet></ROW><ROW><id>4235084</id><snippet>super(B, self)</snippet></ROW><ROW><id>4235084</id><snippet>super(self.__class__, self)</snippet></ROW><ROW><id>4235084</id><snippet>super(C, self)</snippet></ROW><ROW><id>4235517</id><snippet>#Keyboard events
events = pygame.event.get()
for event in events:
    if event.type == pygame.QUIT:
        running = 0

#Mouse events
#todo

#Grid update  &lt;------- here you update the grid and the cells are being drawn
cb.draw()

#Graphical output    &lt;------------ here you're filling the WHOLE screen with white
screen.fill(THECOLORS["white"])    

pygame.display.flip()
</snippet></ROW><ROW><id>4235517</id><snippet>screen.fill</snippet></ROW><ROW><id>4235517</id><snippet>cb.draw</snippet></ROW><ROW><id>4235517</id><snippet>cell.py</snippet></ROW><ROW><id>4235517</id><snippet>pygame.draw.rect(self.surface, (100, 10, 10), (self.pos[0], self.pos[1], self.size, self.size))
</snippet></ROW><ROW><id>4235691</id><snippet>from sqlalchemy import create_engine
from sqlalchemy import Column, Integer, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

engine = create_engine('sqlite://', echo=True)
Base = declarative_base(bind=engine)
Session = sessionmaker(bind=engine)


class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)

class Child(Base):
    __tablename__ = 'child'
    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('parent.id'))
    parent = relationship(Parent, backref='children')

Base.metadata.create_all()
</snippet></ROW><ROW><id>4236228</id><snippet>lambda</snippet></ROW><ROW><id>4236228</id><snippet>i</snippet></ROW><ROW><id>4236228</id><snippet>for</snippet></ROW><ROW><id>4236228</id><snippet>import Tkinter as tk

for i in range(boardWidth):
    newButton = tk.Button(root, text=str(i+1),
        command=lambda j=i+1: Board.playColumn(j, Board.getCurrentPlayer()))
    Board.boardButtons.append(newButton)
</snippet></ROW><ROW><id>4236228</id><snippet>lambda</snippet></ROW><ROW><id>4236228</id><snippet>i</snippet></ROW><ROW><id>4236228</id><snippet>i</snippet></ROW><ROW><id>4236235</id><snippet>cc_list = message.cc.split(',')
</snippet></ROW><ROW><id>4236278</id><snippet>replace</snippet></ROW><ROW><id>4236278</id><snippet>&gt;&gt;&gt; s = 'This is an [[example]] sentence. It is [[awesome]].'
&gt;&gt;&gt; s.replace('[[', '&lt;b&gt;').replace(']]', '&lt;/b&gt;')

'This is an &lt;b&gt;example&lt;/b&gt; sentence. It is &lt;b&gt;awesome&lt;/b&gt;.'
</snippet></ROW><ROW><id>4236278</id><snippet>$ python -mtimeit -s'import re' "re.sub(r'\[\[(.*?)\]\]', r'&lt;b&gt;\1&lt;/b&gt;', 'This is an [[example]] sentence. It is [[awesome]]')"''
100000 loops, best of 3: 19.7 usec per loop

$ python -mtimeit '"This is an [[example]] sentence. It is [[awesome]]".replace("[[", "&lt;b&gt;").replace("]]", "&lt;/b&gt;")'
100000 loops, best of 3: 1.94 usec per loop
</snippet></ROW><ROW><id>4236278</id><snippet>$ python -mtimeit -s"import re; r = re.compile(r'\[\[(.*?)\]\]')" "r.sub( r'&lt;b&gt;\1&lt;/b&gt;', 'This is an [[example]] sentence. It is [[awesome]]')"
100000 loops, best of 3: 16.9 usec per loop
</snippet></ROW><ROW><id>4236328</id><snippet>import ast
import datetime

def parse_datetime_dict(astr,debug=False):
    try: tree=ast.parse(astr)
    except SyntaxError: raise ValueError(astr)
    for node in ast.walk(tree):
        if isinstance(node,(ast.Module,ast.Expr,ast.Dict,ast.Str,
                            ast.Attribute,ast.Num,ast.Name,ast.Load)): continue
        if (isinstance(node,ast.Call)
                and isinstance(node.func, ast.Attribute)
                and node.func.attr == 'datetime'): continue
        if debug:
            attrs=[attr for attr in dir(node) if not attr.startswith('__')]
            print(node)
            for attrname in attrs:
                print('    {k} ==&gt; {v}'.format(k=attrname,v=getattr(node,attrname)))
        raise ValueError(astr)
    return eval(astr)

good_strings=["{'the_datetime': datetime.datetime(2010, 11, 21, 0, 56, 58)}"]
bad_strings=["__import__('os'); os.unlink",
             "import os; os.unlink",
             "import(os)", # SyntaxError
             ]

for astr in good_strings:
    result=parse_datetime_dict(astr)    
    print('{s} ... [PASSED]'.format(s=astr))

for astr in bad_strings:
    try:
        result=parse_datetime_dict(astr)
    except ValueError:
        print('{s} ... [REJECTED]'.format(s=astr))
    else:
        sys.exit('ERROR: failed to catch {s!r}'.format(s=astr))
</snippet></ROW><ROW><id>4236328</id><snippet>{'the_datetime': datetime.datetime(2010, 11, 21, 0, 56, 58)} ... [PASSED]
__import__('os'); os.unlink ... [REJECTED]
import os; os.unlink ... [REJECTED]
import(os) ... [REJECTED]
</snippet></ROW><ROW><id>4236348</id><snippet>import program1

# this will show program1's "x" variable
print program1.x

# this will set program1's "x" variable
program1.x = "hello again"

# this will run your program1's "run" function, which 
# should create the Tkinter window for you
program1.run()

# if you REALLY want to call "Main" yourself, which will
# probably just break Tkinter since your init function
# already calls Main() once, you can do...
myclass = program1.Class(None)
myclass.Main()
</snippet></ROW><ROW><id>4236503</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>4236797</id><snippet>(\w+\([^)]*\))(\s+|$)
</snippet></ROW><ROW><id>4236852</id><snippet>class ReceiveEmail(InboundMailHandler):
    def receive(self, message):
        logging.info("Received email from %s" % message.sender)

        # Get a list of CC addresses.  This is basically a for loop.
        cc_addresses = [address.strip() for address in message.cc.split(",")]
        # The CC list goes with the message, not the bodies.
        logging.info("CC email is %s" % (cc_addresses))

        # Get and iterate over all of the *plain-text* bodies in the email.
        plaintext = message.bodies(content_type='text/plain')
        for text in plaintext:
            txtmsg = ""
            txtmsg = text[1].decode()
            logging.info("Body is %s" % txtmsg)

        # Setup a query object.
        query = User.all()
        # Filter the user objects to get only the emails in the CC list.
        query.filter("userEmail IN",  cc_addresses)
        # But, only get at most 10 users.
        users = query.fetch(10)

        logging.info('Got %d user entities from the datastore.' % len(users))

        # Iterate over each of the users increasing their score by one.
        for user in users:
            user.userScore += 1

        # Now, write the users back to the datastore.
        db.put(users)
        logging.info('Wrote %d user entities.' % len(users))
</snippet></ROW><ROW><id>4236929</id><snippet>variable</snippet></ROW><ROW><id>4236929</id><snippet>IntVar</snippet></ROW><ROW><id>4236929</id><snippet>Tkinter</snippet></ROW><ROW><id>4236929</id><snippet>var</snippet></ROW><ROW><id>4236929</id><snippet>var.get()</snippet></ROW><ROW><id>4236929</id><snippet>var.get()</snippet></ROW><ROW><id>4236929</id><snippet>not var.get()</snippet></ROW><ROW><id>4236929</id><snippet>&gt;&gt;&gt; root = Tkinter.Tk()
&gt;&gt;&gt; var = Tkinter.IntVar()
&gt;&gt;&gt; chk = Tkinter.Checkbutton(root, text='foo', variable=var)
&gt;&gt;&gt; chk.pack(side=Tkinter.LEFT)
&gt;&gt;&gt; var.get()  #unchecked
0
&gt;&gt;&gt; var.get()  #checked
1
</snippet></ROW><ROW><id>4237308</id><snippet>in_bulk</snippet></ROW><ROW><id>4237308</id><snippet>id_list = [film['id'] for film in film_hc]
objects = Film.objects.only('name').in_bulk(id_list)
for film in film_hc:
    film['name'] = objects[film['id']].name
</snippet></ROW><ROW><id>4237463</id><snippet>def pg_dump(*tables, **kwargs):
  file = kwargs['file']
  port = kwargs['port']
  name = kwargs['name']
  ...

pg_dump('stack', 'overflow', file='/tmp/dump.sql', port=5434, name='europe')
</snippet></ROW><ROW><id>4237587</id><snippet>result</snippet></ROW><ROW><id>4237587</id><snippet>results</snippet></ROW><ROW><id>4237587</id><snippet>result = results[0] if results else None
</snippet></ROW><ROW><id>4237784</id><snippet>import types
import sys

def ROTD(infile, outfile):
    # do something

if __name__ == '__main__':
    symbol = globals().get(sys.argv[1])
    if hasattr(symbol, '__call__'):
        symbol(*sys.argv[2:])
</snippet></ROW><ROW><id>4237869</id><snippet>cell</snippet></ROW><ROW><id>4237869</id><snippet>cell_list = cell_list + [{'num':1, 'state':0}]
</snippet></ROW><ROW><id>4237869</id><snippet>cell_list.append({'num':1, 'state':0})
</snippet></ROW><ROW><id>4237869</id><snippet>cell_list = [{'num':1, 'state':0} for j in range(2)]
</snippet></ROW><ROW><id>4237972</id><snippet>r'^(?P&lt;template&gt;\w+)/$'
</snippet></ROW><ROW><id>4237972</id><snippet>&lt;</snippet></ROW><ROW><id>4237972</id><snippet>&gt;</snippet></ROW><ROW><id>4237993</id><snippet>In [19]: 1&gt;float('nan')
Out[19]: False

In [20]: float('nan')&gt;1
Out[20]: False
</snippet></ROW><ROW><id>4237993</id><snippet>nan</snippet></ROW><ROW><id>4237993</id><snippet>1</snippet></ROW><ROW><id>4237993</id><snippet>max</snippet></ROW><ROW><id>4237993</id><snippet>In [31]: max(1,float('nan'))
Out[31]: 1
</snippet></ROW><ROW><id>4237993</id><snippet>nan</snippet></ROW><ROW><id>4237993</id><snippet>In [32]: max(float('nan'),1)
Out[32]: nan
</snippet></ROW><ROW><id>4237993</id><snippet>nan</snippet></ROW><ROW><id>4237993</id><snippet>nan</snippet></ROW><ROW><id>4237993</id><snippet>np.max</snippet></ROW><ROW><id>4237993</id><snippet>float('nan')</snippet></ROW><ROW><id>4237993</id><snippet>In [36]: import numpy as np
In [91]: np.max([1,float('nan')])
Out[91]: nan

In [92]: np.max([float('nan'),1])
Out[92]: nan
</snippet></ROW><ROW><id>4237993</id><snippet>np.nan</snippet></ROW><ROW><id>4237993</id><snippet>np.nanmax</snippet></ROW><ROW><id>4237993</id><snippet>In [93]: np.nanmax([1,float('nan')])
Out[93]: 1.0

In [94]: np.nanmax([float('nan'),1])
Out[94]: 1.0
</snippet></ROW><ROW><id>4238212</id><snippet>mimetypes</snippet></ROW><ROW><id>4238212</id><snippet>рєфшю/AMR</snippet></ROW><ROW><id>4238212</id><snippet>ctype</snippet></ROW><ROW><id>4238212</id><snippet>_winreg.EnumKey</snippet></ROW><ROW><id>4238212</id><snippet>mimetypes</snippet></ROW><ROW><id>4238212</id><snippet>_winreg.QueryValueEx</snippet></ROW><ROW><id>4238212</id><snippet>EnumKey</snippet></ROW><ROW><id>4238212</id><snippet>_winreg</snippet></ROW><ROW><id>4238212</id><snippet>.encode</snippet></ROW><ROW><id>4238212</id><snippet>try:
    ctype = ctype.encode(default_encoding) # omit in 3.x!
except UnicodeEncodeError:
    pass
</snippet></ROW><ROW><id>4238212</id><snippet>mimetypes</snippet></ROW><ROW><id>4238224</id><snippet>def __unicode__(self):
    return self
</snippet></ROW><ROW><id>4238265</id><snippet>sudo apt-get install python-devel
sudo apt-get install libnvidia-xorg1-devel
</snippet></ROW><ROW><id>4238265</id><snippet>apt</snippet></ROW><ROW><id>4238265</id><snippet>sudo apt-get install python-dev
sudo apt-get install libgl1-mesa-dev
sudo apt-get install libglu1-mesa-dev
sudo apt-get install libglew1.5-dev
</snippet></ROW><ROW><id>4239329</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; original = "abc\0"
&gt;&gt;&gt; finish_correct = "cba\0"
&gt;&gt;&gt; original
'abc\x00'
&gt;&gt;&gt; finish_correct
'cba\x00'
&gt;&gt;&gt; 
&gt;&gt;&gt; answer = original[:-1]  # remove final null
&gt;&gt;&gt; answer = answer[::-1]  # reverse string
&gt;&gt;&gt; # Extended slice syntax:  [begin:end:step]
&gt;&gt;&gt; # So, [::-1] means take whole string, but in reverse.
&gt;&gt;&gt; answer
'cba'
&gt;&gt;&gt; answer = answer + "\0"
&gt;&gt;&gt; answer
'cba\x00'
&gt;&gt;&gt; answer == finish_correct
True
</snippet></ROW><ROW><id>4239374</id><snippet>^dd$</snippet></ROW><ROW><id>4239374</id><snippet>^(dd|dddd)$</snippet></ROW><ROW><id>4239374</id><snippet>[^d](dd|dddd)[^d]</snippet></ROW><ROW><id>4239387</id><snippet>&gt;&gt;&gt; for letter in prefixes:
        if letter in ('O', 'Q'):  # if the letter is O or Q
            print letter + 'u' + suffix
        else:
            print letter + suffix


Jack
Kack
Lack
Mack
Nack
Ouack
Pack
Quack
</snippet></ROW><ROW><id>4239554</id><snippet>M_inverse = M.inv()
</snippet></ROW><ROW><id>4239554</id><snippet>M = Matrix(2,3, [1,2,3,4,5,6])
</snippet></ROW><ROW><id>4239600</id><snippet>__init__</snippet></ROW><ROW><id>4239600</id><snippet>var</snippet></ROW><ROW><id>4239600</id><snippet>__call__</snippet></ROW><ROW><id>4239600</id><snippet>cdef class SquareErrorDistance:
    cdef double _norm

    def __init__(self, dataSample):
        variance = round(sum(dataSample)/len(dataSample))
        if variance == 0:
            self._norm = 1.0
        else:
            self._norm = 1.0 / (2 * variance)

    def __call__(self, double u, double v): # u and v are floats
        return (u - v) ** 2 * self._norm
</snippet></ROW><ROW><id>4239600</id><snippet>timeit</snippet></ROW><ROW><id>4239600</id><snippet>cdef</snippet></ROW><ROW><id>4239600</id><snippet>_norm</snippet></ROW><ROW><id>4239600</id><snippet>__call__</snippet></ROW><ROW><id>4239782</id><snippet>myMember = Member.get_by_key_name('lipis')
</snippet></ROW><ROW><id>4239782</id><snippet>keyName = myMember.key().name()
</snippet></ROW><ROW><id>4239903</id><snippet>def b():
  m = __import__("math")
  return m.abs(-1)
</snippet></ROW><ROW><id>4239903</id><snippet>def a():
  if not globals().has_key('math'):
    globals()['math'] = __import__('math')

def b():
  """returns the absolute value of -1, a() must be called before to load necessary modules"""
  return math.abs(-1)
</snippet></ROW><ROW><id>4240286</id><snippet>self.x</snippet></ROW><ROW><id>4240286</id><snippet>Class</snippet></ROW><ROW><id>4240286</id><snippet>c = Class(parent)
print(c.x)
</snippet></ROW><ROW><id>4240999</id><snippet>&gt;&gt;&gt; chars = u'\u4132'.encode('utf-16be')
&gt;&gt;&gt; chars
'A2'
&gt;&gt;&gt; ord(chars[0])
65
&gt;&gt;&gt; '%x' % ord(chars[0])
'41'
&gt;&gt;&gt; hex(ord(chars[0]))
'0x41'
&gt;&gt;&gt; ['%x' % ord(c) for c in chars]
['41', '32']
&gt;&gt;&gt; [hex(ord(c)) for c in chars]
['0x41', '0x32']
</snippet></ROW><ROW><id>4240999</id><snippet>&gt;&gt;&gt; chars = '\u4132'.encode('utf-16be')
&gt;&gt;&gt; chars
b'A2'
&gt;&gt;&gt; chars = bytes('\u4132', 'utf-16be')
&gt;&gt;&gt; chars  # Just the same.
b'A2'
&gt;&gt;&gt; chars[0]
65
&gt;&gt;&gt; '%x' % chars[0]
'41'
&gt;&gt;&gt; hex(chars[0])
'0x41'
&gt;&gt;&gt; ['%x' % c for c in chars]
['41', '32']
&gt;&gt;&gt; [hex(c) for c in chars]
['0x41', '0x32']
</snippet></ROW><ROW><id>4241079</id><snippet>$ ./benchmark.py 
benchmark with revcount: 1000 timeitcount: 1000
last, first, yield: 0.902059793472
last, first,  cond: 0.897155046463
last,   all, yield: 0.818709135056
last,   all,  cond: 0.818334102631
 all,   all, yield: 1.26602506638
 all,   all,  cond: 1.17208003998
benchmark with revcount: 2000 timeitcount: 1000
last, first, yield: 1.80768609047
last, first,  cond: 1.84234118462
last,   all, yield: 1.64661192894
last,   all,  cond: 1.67588806152
 all,   all, yield: 2.55621600151
 all,   all,  cond: 2.37582707405
benchmark with revcount: 10000 timeitcount: 1000
last, first, yield: 9.34304785728
last, first,  cond: 9.33725094795
last,   all, yield: 8.4673140049
last,   all,  cond: 8.49153590202
 all,   all, yield: 12.9636368752
 all,   all,  cond: 11.780673027
</snippet></ROW><ROW><id>4241079</id><snippet>#!/usr/bin/python

import functools
import timeit

class Revision:
  # a revision is something like a textfile.
  # the search() method will search the textfile
  # and return the lines which match the given pattern.
  # for demonstration purposes this class is simplified
  # to return predefined results
  def __init__(self, results):
    self.results = results
  def search(self, pattern):
    return self.results

class AbstractSearcher:
  def __init__(self, revisions):
    self.revisions = revisions
  def search_for_first_occurence(self, pattern):
    keys = sorted(self.revisions.iterkeys())
    return self.collect_one_occurence(keys, pattern)
  def search_for_last_occurence(self, pattern):
    keys = sorted(self.revisions.iterkeys(), reverse = True)
    return self.collect_one_occurence(keys, pattern)
  def search_for_any_occurence(self, pattern):
    keys = self.revisions.iterkeys()
    return self.collect_one_occurence(keys, pattern)
  def search_for_all_occurences(self, pattern):
    keys = self.revisions.iterkeys()
    return self.collect_all_occurences(keys, pattern)

class SearcherYield(AbstractSearcher):

  def search_revisions(self, keys, pattern):
    # create generator which yields the results one by one
    for key in keys:
      rev = self.revisions[key]
      result = rev.search(pattern)
      if result:
        yield result

  def collect_one_occurence(self, keys, pattern):
    # take the first result and then abandon the generator
    for result in self.search_revisions(keys, pattern):
      return result
    return []

  def collect_all_occurences(self, keys, pattern):
    # collect all results from generator
    results = []
    for result in self.search_revisions(keys, pattern):
      results.extend(result)
    return results

class SearcherCondition(AbstractSearcher):

  def search_revisions(self, keys, pattern, just_one):
    # collect either all results from all revisions
    # or break the loop after first result found
    results = []
    for key in keys:
      rev = self.revisions[key]
      result = rev.search(pattern)
      if result:
        results.extend(result)
        if just_one:
          break
    return results

  def collect_one_occurence(self, keys, pattern):
    return self.search_revisions(keys, pattern, just_one = True)

  def collect_all_occurences(self, keys, pattern):
    return self.search_revisions(keys, pattern, just_one = False)

def benchmark(revcount, timeitcount):

  lastrev = {}
  for i in range(revcount):
    lastrev[i] = Revision([])
  lastrev[revcount] = Revision([1])

  allrevs = {}
  for i in range(revcount):
    allrevs[i] = Revision([1])

  last_yield = SearcherYield(lastrev)
  last_cond = SearcherCondition(lastrev)
  all_yield = SearcherYield(allrevs)
  all_cond = SearcherCondition(allrevs)

  lfy = functools.partial(last_yield.search_for_first_occurence, 'foo')
  lfc = functools.partial(last_cond.search_for_first_occurence, 'foo')
  lay = functools.partial(last_yield.search_for_all_occurences, 'foo')
  lac = functools.partial(last_cond.search_for_all_occurences, 'foo')
  aay = functools.partial(all_yield.search_for_all_occurences, 'foo')
  aac = functools.partial(all_cond.search_for_all_occurences, 'foo')

  print 'benchmark with revcount: %d timeitcount: %d' % (revcount, timeitcount)
  print 'last, first, yield:', timeit.timeit(lfy, number = timeitcount)
  print 'last, first,  cond:', timeit.timeit(lfc, number = timeitcount)
  print 'last,   all, yield:', timeit.timeit(lay, number = timeitcount)
  print 'last,   all,  cond:', timeit.timeit(lac, number = timeitcount)
  print ' all,   all, yield:', timeit.timeit(aay, number = timeitcount)
  print ' all,   all,  cond:', timeit.timeit(aac, number = timeitcount)

def main():
  timeitcount = 1000
  benchmark(1000, timeitcount)
  benchmark(2000, timeitcount)
  benchmark(10000, timeitcount)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>4241079</id><snippet>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 10.04.1 LTS
Release:    10.04
Codename:   lucid
$ uname -a
Linux lesmana-laptop 2.6.32-26-generic #46-Ubuntu SMP Tue Oct 26 16:46:46 UTC 2010 i686 GNU/Linux
$ python --version
Python 2.6.5
$ cat /proc/cpuinfo | grep name
model name  : Intel(R) Pentium(R) M processor 1.60GHz
</snippet></ROW><ROW><id>4241165</id><snippet>Cookie</snippet></ROW><ROW><id>4241165</id><snippet>headers_in</snippet></ROW><ROW><id>4241225</id><snippet>import inspect

def get_user_attributes(cls):
    boring = dir(type('dummy', (object,), {}))
    return [item
            for item in inspect.getmembers(cls)
            if item[0] not in boring]
</snippet></ROW><ROW><id>4241225</id><snippet>def get_user_attributes(cls):
    boring = dir(type('dummy', (object,), {}))
    attrs = {}
    bases = reversed(inspect.getmro(cls))   
    for base in bases:
        if hasattr(base, '__dict__'):
            attrs.update(base.__dict__)
        elif hasattr(base, '__slots__'):
            if hasattr(base, base.__slots__[0]): 
                # We're dealing with a non-string sequence or one char string
                for item in base.__slots__:
                    attrs[item] = getattr(base, item)
            else: 
                # We're dealing with a single identifier as a string
                attrs[base.__slots__] = getattr(base, base.__slots__)
    for key in boring:
        del attrs['key']  # we can be sure it will be present so no need to guard this
    return attrs
</snippet></ROW><ROW><id>4241225</id><snippet>object</snippet></ROW><ROW><id>4241225</id><snippet>inspect.getmembers</snippet></ROW><ROW><id>4241225</id><snippet>attrs.items()</snippet></ROW><ROW><id>4241225</id><snippet>list(attrs.items())</snippet></ROW><ROW><id>4241225</id><snippet>def get_user_attributes(cls):
    boring = dir(type('dummy', (object,), {}))
    if hasattr(cls, '__dict__'):
        attrs = cls.__dict__.copy()
    elif hasattr(cls, '__slots__'):
        if hasattr(base, base.__slots__[0]): 
            # We're dealing with a non-string sequence or one char string
            for item in base.__slots__:
                attrs[item] = getattr(base, item)
            else: 
                # We're dealing with a single identifier as a string
                attrs[base.__slots__] = getattr(base, base.__slots__)
    for key in boring:
        del attrs['key']  # we can be sure it will be present so no need to guard this
    return attrs
</snippet></ROW><ROW><id>4241506</id><snippet>mail()</snippet></ROW><ROW><id>4241506</id><snippet>sendmail</snippet></ROW><ROW><id>4241506</id><snippet>subprocess</snippet></ROW><ROW><id>4241536</id><snippet>print</snippet></ROW><ROW><id>4241536</id><snippet>print()</snippet></ROW><ROW><id>4241568</id><snippet>lsof</snippet></ROW><ROW><id>4241568</id><snippet>from string import *
from os import getpid
from subprocess import check_output, STDOUT

pid = getpid()

lsof = (check_output(['/usr/sbin/lsof', '-p', str(pid)], stderr=STDOUT)).split("\n")
for line in lsof[1:]:
    print line
</snippet></ROW><ROW><id>4241568</id><snippet>'REG'</snippet></ROW><ROW><id>4241568</id><snippet>[4]</snippet></ROW><ROW><id>4241568</id><snippet>pid = getpid()

f = open('./trashme.txt', 'w')
f.write('This is a test\n')

lsof = (check_output(['/usr/sbin/lsof', '-p', str(pid)], stderr=STDOUT)).split("\n")
print lsof[0]
for line in lsof[1:]:
    if (re.search('trashme', line)): print line 

f.close
</snippet></ROW><ROW><id>4241568</id><snippet>COMMAND  PID USER   FD   TYPE     DEVICE  SIZE/OFF    NODE NAME
python  6995 greg    3w   REG       14,2         0 2273252 /Users/greg/Desktop/trashme.txt
</snippet></ROW><ROW><id>4241662</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4241662</id><snippet>sys.path</snippet></ROW><ROW><id>4241662</id><snippet>sys.path</snippet></ROW><ROW><id>4241662</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4241727</id><snippet>entry = """{%block price%}$259{%endblock%}  
{%block buy%}http://www.highbeam.co.nz/store/index.php?route=product/product&amp;path=6&amp;product_id=116{%endblock%}  
{%block info%}http://www.inov-8.co.nz/oroc280.html{%endblock%}   """

parsedentry = dict([(j[0].split(' ')[-1], j[-1]) for j in [i.partition("%}") for i in entry.split("{%endblock%}")] if j[0].split(' ')[-1]])

print parsedentry['price']
</snippet></ROW><ROW><id>4241761</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; foo = lambda :[]
&gt;&gt;&gt; bar = lambda :list()
&gt;&gt;&gt; dis.dis(foo)
  1           0 BUILD_LIST               0
              3 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(bar)
  1           0 LOAD_GLOBAL              0 (list)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE        
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4241775</id><snippet>' '.join(s.split())
</snippet></ROW><ROW><id>4241927</id><snippet>&gt;&gt;&gt; from sys import maxint
&gt;&gt;&gt; type(-maxint)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(-maxint-1)
&lt;type 'int'&gt;
&gt;&gt;&gt; type(-maxint-2)
&lt;type 'long'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4241927</id><snippet>-2147483648</snippet></ROW><ROW><id>4242569</id><snippet>\w+\(\)\w+</snippet></ROW><ROW><id>4242889</id><snippet>name</snippet></ROW><ROW><id>4242889</id><snippet>menuclick</snippet></ROW><ROW><id>4242889</id><snippet>def menuclick(e):
    print(menu.FindItemById(e.Id).Label)
</snippet></ROW><ROW><id>4242936</id><snippet>for i in range(0, someNumber):
    if keepGoing:
        # Code
</snippet></ROW><ROW><id>4242936</id><snippet>break</snippet></ROW><ROW><id>4242936</id><snippet>for i in range(0, someNumber):
    if not keepGoing:
        break
    else:
        # Code
</snippet></ROW><ROW><id>4242936</id><snippet>for i in range(0, someNumber):
    if not keepGoing:
        break
    # Code
</snippet></ROW><ROW><id>4243643</id><snippet>__init__</snippet></ROW><ROW><id>4243643</id><snippet>_download</snippet></ROW><ROW><id>4243643</id><snippet>_store</snippet></ROW><ROW><id>4243643</id><snippet>run</snippet></ROW><ROW><id>4243643</id><snippet>class Scraper(object):
    def __init__(self, parser, page_generator):
        self._parser = parser
        self._pages = pages

    def _download(self, page):
        # do whatever you're already doing to download it
        return html

    def _store(self, data):
        # Do whatever you're already doing to store the data

    def run(self):
        for page in pages:
            html = self._download(page)
            data = self._parser.parse(html)
            self._store(data)
</snippet></ROW><ROW><id>4243643</id><snippet>parser.py</snippet></ROW><ROW><id>4243643</id><snippet>class Parser(object):
    def parse(html):
        # All of your rules go here

def pages(some, args, if_, you, need, them): # but they should be the same for all files
    return a_list_of_pages_or_generator
</snippet></ROW><ROW><id>4243643</id><snippet>python.py</snippet></ROW><ROW><id>4243643</id><snippet>def get_scraper(name):
    mod = __import__(name)

    parser = mod.Parser()
    pages = mod.pages() # Pass whatever args you need to figure out the urls

    return Scraper(parser, pages)
</snippet></ROW><ROW><id>4243643</id><snippet>scraper = get_scraper('google')
scraper.run()
</snippet></ROW><ROW><id>4243643</id><snippet>Scraper</snippet></ROW><ROW><id>4243643</id><snippet>Downloader</snippet></ROW><ROW><id>4243643</id><snippet>Parser</snippet></ROW><ROW><id>4243666</id><snippet>def poison(spam):
    tmp = spam.update
    def newUpdate():
        print 'this spam has been poisoned!'
        tmp()
    spam.update = newUpdate
</snippet></ROW><ROW><id>4243666</id><snippet>class Spam:
    def update(self):
        print('updating spam!')

class SpamLite(Spam):
    def update(self):
        print('this spam is lite!')
        Spam.update(self)

def poison(spam):
    tmp = spam.update # it is a bound method that doesn't take any arguments
    def newUpdate():
        print 'this spam has been poisoned!'
        tmp()
    spam.update = newUpdate


from operator import methodcaller    
L = [Spam(), SpamLite()]
map(methodcaller('update'), L)
map(poison, L)
print "*"*79
map(methodcaller('update'), L)
</snippet></ROW><ROW><id>4244541</id><snippet>from lxml import etree

def process(filename):
    f = file(filename,"r")
    parser = etree.XMLParser()
    for l in f:
        parser.feed(l)
        if l=="&lt;/Package&gt;\n":
            break
    return parser.close()
</snippet></ROW><ROW><id>4244541</id><snippet>r=process("junk.xml")
&lt;Element Package at 9f14eb4&gt;
</snippet></ROW><ROW><id>4244541</id><snippet>&gt;&gt;&gt; r[1][0].text
'2961181'
</snippet></ROW><ROW><id>4244583</id><snippet>XX.objects.filter(y__disp_name__istartswith='string')
</snippet></ROW><ROW><id>4244583</id><snippet>filter</snippet></ROW><ROW><id>4244667</id><snippet>workcycle.ui.tray.WorkcycleTray.start</snippet></ROW><ROW><id>4244667</id><snippet>gtk.main</snippet></ROW><ROW><id>4244667</id><snippet>workcycler</snippet></ROW><ROW><id>4244667</id><snippet>workcycle.py</snippet></ROW><ROW><id>4245347</id><snippet> &gt;&gt;&gt; p = Poll.objects.get(pk=1)
 &gt;&gt;&gt; p.pub_date
 datetime.datetime(2007, 7, 15, 12, 00, 53)
</snippet></ROW><ROW><id>4245608</id><snippet>if object.profitHistory:</snippet></ROW><ROW><id>4245715</id><snippet>try:
   int(myres)
except:
   print "Only numbers are valid"
</snippet></ROW><ROW><id>4245739</id><snippet>\</snippet></ROW><ROW><id>4245739</id><snippet>b</snippet></ROW><ROW><id>4245739</id><snippet>b</snippet></ROW><ROW><id>4245739</id><snippet>with open(fileout,'w',encoding='utf-8') as fout:
    fout.write("\\begin{enumerate}[1.]\n")
</snippet></ROW><ROW><id>4245739</id><snippet>\begin{enumerate}[1.]&lt;newline&gt;
</snippet></ROW><ROW><id>4245739</id><snippet>\n</snippet></ROW><ROW><id>4245739</id><snippet>\\n</snippet></ROW><ROW><id>4245762</id><snippet>shelve</snippet></ROW><ROW><id>4245779</id><snippet>    self.a_button = tk.Widget(master, 'ttk::button',
                              dict(text="Multiple\nLines\nOf Text"))
</snippet></ROW><ROW><id>4245952</id><snippet>import Tkinter as tk

root=tk.Tk()
f1 = tk.Frame(width=200, height=200, background="red")
f2 = tk.Frame(width=100, height=100, background="blue")

f1.pack(fill="both", expand=True, padx=20, pady=20)
f2.place(in_=f1, anchor="c", relx=.5, rely=.5)

root.mainloop()
</snippet></ROW><ROW><id>4246108</id><snippet>#!/usr/bin/env python
# coding: koi8-r
import dbf
text = 'текст в koi8-r'
table = dbf.Table(':memory:', ['test M'], 128, False, False, True, False, 'dbf', 'koi8-r')
record = table.append()
record.test = text
</snippet></ROW><ROW><id>4246261</id><snippet>controller = Controller(app)
</snippet></ROW><ROW><id>4246502</id><snippet>globals, vars</snippet></ROW><ROW><id>4246502</id><snippet>import sys
...
getattr(sys.modules[__name__], "clean_%s" % fieldname)()
</snippet></ROW><ROW><id>4246537</id><snippet>__import__('shutil').copy(__import__('sys').argv[1], __import__('sys').argv[2])
</snippet></ROW><ROW><id>4246537</id><snippet>open(__import__('sys').argv[2], "w").write(open(__import__('sys').argv[1]).read())
</snippet></ROW><ROW><id>4246537</id><snippet>from sys import argv
open(argv[1],'w').write(open(argv[2]).read())
</snippet></ROW><ROW><id>4246537</id><snippet>import sys
with open(sys.argv[1]) as src, open(sys.argv[2]) as dest:
    for line in src:
        dest.write(line)
</snippet></ROW><ROW><id>4246537</id><snippet>argparse</snippet></ROW><ROW><id>4246563</id><snippet>droid.readPhoneState()</snippet></ROW><ROW><id>4246563</id><snippet>outerDict = droid.readPhoneState()
innerDict = outerDict['result']
number = innerDict['incomingNumber']
</snippet></ROW><ROW><id>4246569</id><snippet>import Tkinter as tk

root=tk.Tk()
text=tk.Text(width = 40, height=4, font=("Helvetica",32))
text.pack()

text.insert(1.0, "Hello, world")
text.config(state="disabled")

root.mainloop()
</snippet></ROW><ROW><id>4247017</id><snippet>any()</snippet></ROW><ROW><id>4247456</id><snippet>body = doc.cssselect("div.body")[0]
for para in body.xpath("*//p"):
    para.text = "\n%s\n" % para.text
content = body.text_content()
print content
</snippet></ROW><ROW><id>4247648</id><snippet>for each in some_array:
    print each
</snippet></ROW><ROW><id>4247761</id><snippet>class Movie(Entity):
    title = Field(Unicode(30))
    year = Field(Integer)
    description = Field(UnicodeText)
</snippet></ROW><ROW><id>4247761</id><snippet>&gt;&gt;&gt; Movie(title=u"Blade Runner", year=1982)
&lt;Movie "Blade Runner" (1982)&gt;
&gt;&gt;&gt; session.commit()
</snippet></ROW><ROW><id>4247761</id><snippet>&gt;&gt;&gt; Movie.query.all()
[&lt;Movie "Blade Runner" (1982)&gt;]
</snippet></ROW><ROW><id>4248062</id><snippet>from random import choice

a = [[0,1,0],[0,1,1],[1,0,1]]
mylist = []

[[mylist.append((i,j)) for j, x in enumerate(v) if x == 1] for i, v in enumerate(a)]
print(choice(mylist))
</snippet></ROW><ROW><id>4248075</id><snippet># usage join(open('f1.txt'), open('f2.txt'))

def join(fd_a, fd_b) :
    result = []
    la = fd_a.readline()
    lb = fd_b.readline()
    while la and lb :
        start_a, rest_a = la.split(' ', 1)
        start_b, rest_b = lb.split(' ', 1)
        if cmp(start_a, start_b) == 0 :
            result.append([start_a, [rest_a, rest_b]])
            la = fd_a.readline()
            lb = fd_b.readline()
        elif cmp(start_a, start_b) &lt; 0 :
            la = fd_a.readline()
        else :
            lb = fd_b.readline()
    return result
</snippet></ROW><ROW><id>4248509</id><snippet>&lt;div id='mytool'&gt;
  This is my tooltip
&lt;/div&gt;
</snippet></ROW><ROW><id>4248509</id><snippet>&lt;script&gt;
  jQuery("#mytool").click(function(){});
&lt;/script&gt;
</snippet></ROW><ROW><id>4248509</id><snippet>class</snippet></ROW><ROW><id>4248509</id><snippet>class</snippet></ROW><ROW><id>4248509</id><snippet>&lt;div id="mytool" class="tooltip"&gt;
  This is my tooltip
&lt;/div&gt;
</snippet></ROW><ROW><id>4248509</id><snippet>&lt;script&gt;
  // This will add the onclick handler to any element
  // with a class of "tooltip"
  jQuery(".tooltip").click(function(){});
&lt;/script&gt;
</snippet></ROW><ROW><id>4248689</id><snippet>def parse_range(astr):
    result=set()
    for part in astr.split(','):
        x=part.split('-')
        result.update(range(int(x[0]),int(x[-1])+1))
    return sorted(result)

print(parse_range('1-10, 3, 4, 23-47'))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]
</snippet></ROW><ROW><id>4248836</id><snippet>import re

target="""
&amp;START   A=23  ... more data ...
                  B=24    &amp;END
#   &amp;START   A=C34  ... more data ...
                  B=C24    &amp;END
&amp;START   .... block 3 of data across multiple lines ....  &amp;END
&amp;START   .... block 4 of data across multiple lines ....  &amp;END
"""

regex = re.compile("^(?!#)&amp;START (.*?)&amp;END",re.MULTILINE|re.DOTALL)

for s in regex.findall(target):
   print s
</snippet></ROW><ROW><id>4248836</id><snippet>  A=23  ... more data ...
                  B=24    
  .... block 3 of data across multiple lines ....  
  .... block 4 of data across multiple lines ....  
</snippet></ROW><ROW><id>4249347</id><snippet>locals()</snippet></ROW><ROW><id>4249347</id><snippet>locals()</snippet></ROW><ROW><id>4249347</id><snippet>pdb</snippet></ROW><ROW><id>4249347</id><snippet>inspect</snippet></ROW><ROW><id>4249347</id><snippet>locals()</snippet></ROW><ROW><id>4249347</id><snippet>bdb.py</snippet></ROW><ROW><id>4249347</id><snippet>set_trace()</snippet></ROW><ROW><id>4249347</id><snippet>set_trace()</snippet></ROW><ROW><id>4249347</id><snippet>inspect</snippet></ROW><ROW><id>4249407</id><snippet>def test_creating_stop(self):
    c = self.client

    # Check that name is pre-filled
    response = c.get('%s?name=abcd' % reverse('add_new_stop'))
    self.assertEqual(response.context['form'].initial['name'], 'abcd')
</snippet></ROW><ROW><id>4249970</id><snippet>raise;</snippet></ROW><ROW><id>4249970</id><snippet>raise;</snippet></ROW><ROW><id>4249970</id><snippet>catch</snippet></ROW><ROW><id>4249980</id><snippet>RTLD_LOCAL</snippet></ROW><ROW><id>4249980</id><snippet>dlopen</snippet></ROW><ROW><id>4249980</id><snippet>dlsym</snippet></ROW><ROW><id>4249980</id><snippet>dlopen</snippet></ROW><ROW><id>4249980</id><snippet>RTLD_GLOBAL</snippet></ROW><ROW><id>4249980</id><snippet>RTLD_GLOBAL</snippet></ROW><ROW><id>4250021</id><snippet>\r\n</snippet></ROW><ROW><id>4250021</id><snippet>\n</snippet></ROW><ROW><id>4250021</id><snippet>\r\n</snippet></ROW><ROW><id>4250021</id><snippet>\r\r\n</snippet></ROW><ROW><id>4250021</id><snippet>C:\</snippet></ROW><ROW><id>4250021</id><snippet>r"c:\test.csv"</snippet></ROW><ROW><id>4250021</id><snippet>"c:\test.csv"</snippet></ROW><ROW><id>4250021</id><snippet>\r</snippet></ROW><ROW><id>4250021</id><snippet>\n</snippet></ROW><ROW><id>4250021</id><snippet>w = csv.writer(open('foo.csv', 'wb'))
</snippet></ROW><ROW><id>4250021</id><snippet>f = open('foo.csv', 'wb')
w = csv.writer(f)
</snippet></ROW><ROW><id>4250021</id><snippet>f</snippet></ROW><ROW><id>4250021</id><snippet>f.close()</snippet></ROW><ROW><id>4250021</id><snippet>with</snippet></ROW><ROW><id>4250183</id><snippet>def next_permutation(seq, pred=cmp):
    """Like C++ std::next_permutation() but implemented as
    generator. Yields copies of seq."""
    def reverse(seq, start, end):
        # seq = seq[:start] + reversed(seq[start:end]) + \
        #       seq[end:]
        end -= 1
        if end &lt;= start:
            return
        while True:
            seq[start], seq[end] = seq[end], seq[start]
            if start == end or start+1 == end:
                return
            start += 1
            end -= 1
    if not seq:
        raise StopIteration
    try:
        seq[0]
    except TypeError:
        raise TypeError("seq must allow random access.")
    first = 0
    last = len(seq)
    seq = seq[:]
    # Yield input sequence as the STL version is often
    # used inside do {} while.
    yield seq
    if last == 1:
        raise StopIteration
    while True:
        next = last - 1
        while True:
            # Step 1.
            next1 = next
            next -= 1
            if pred(seq[next], seq[next1]) &lt; 0:
                # Step 2.
                mid = last - 1
                while not (pred(seq[next], seq[mid]) &lt; 0):
                    mid -= 1
                seq[next], seq[mid] = seq[mid], seq[next]
                # Step 3.
                reverse(seq, next1, last)
                # Change to yield references to get rid of
                # (at worst) |seq|! copy operations.
                yield seq[:]
                break
            if next == first:
                raise StopIteration
    raise StopIteration

&gt;&gt;&gt; for p in next_permutation([int(c) for c in "111222"]):
...     print p
... 
[1, 1, 1, 2, 2, 2]
[1, 1, 2, 1, 2, 2]
[1, 1, 2, 2, 1, 2]
[1, 1, 2, 2, 2, 1]
[1, 2, 1, 1, 2, 2]
[1, 2, 1, 2, 1, 2]
[1, 2, 1, 2, 2, 1]
[1, 2, 2, 1, 1, 2]
[1, 2, 2, 1, 2, 1]
[1, 2, 2, 2, 1, 1]
[2, 1, 1, 1, 2, 2]
[2, 1, 1, 2, 1, 2]
[2, 1, 1, 2, 2, 1]
[2, 1, 2, 1, 1, 2]
[2, 1, 2, 1, 2, 1]
[2, 1, 2, 2, 1, 1]
[2, 2, 1, 1, 1, 2]
[2, 2, 1, 1, 2, 1]
[2, 2, 1, 2, 1, 1]
[2, 2, 2, 1, 1, 1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4250524</id><snippet> neighbors = {0: [8], 
             1: [2,4], 
             2: [1,4,3], 
             3: [2,6], 
             4: [1,5,7], 
             5: [2,4,6,8], 
             6: [3,5,9], 
             7: [4,8], 
             8: [7,5,9,0], 
             9: [6,8]}


def get_sequences(n):
    if not n:
        return
    stack = [(i,) for i in  range(10)]
    while stack:
        cur = stack.pop()
        if len(cur) == n:
            yield cur
        else:
            stack.extend(cur + (d, ) for d in neighbors[cur[-1]]) 

print list(get_sequences(3))
</snippet></ROW><ROW><id>4250524</id><snippet>(0, 8, 9, 8)</snippet></ROW><ROW><id>4250524</id><snippet> stack.extend(cur + (d, ) 
              for d in neighbors[cur[-1]]
              if d not in cur)
</snippet></ROW><ROW><id>4250524</id><snippet>0</snippet></ROW><ROW><id>4250946</id><snippet>cycle</snippet></ROW><ROW><id>4250946</id><snippet>logging</snippet></ROW><ROW><id>4250946</id><snippet>logging.getLogger</snippet></ROW><ROW><id>4250946</id><snippet>LOGGING</snippet></ROW><ROW><id>4250946</id><snippet>LOGGING_CONFIG</snippet></ROW><ROW><id>4250946</id><snippet>settings.py</snippet></ROW><ROW><id>4251471</id><snippet>add_green_fur()</snippet></ROW><ROW><id>4251471</id><snippet>Failed: MyWidget.tests.test_green_fur()</snippet></ROW><ROW><id>4251471</id><snippet>flush</snippet></ROW><ROW><id>4251590</id><snippet>'d7'</snippet></ROW><ROW><id>4251590</id><snippet>'0xd7'</snippet></ROW><ROW><id>4251590</id><snippet>0xd7</snippet></ROW><ROW><id>4251590</id><snippet>hex()</snippet></ROW><ROW><id>4251590</id><snippet>'%x'</snippet></ROW><ROW><id>4251590</id><snippet>&gt;&gt;&gt; ord('\xd7')
215
&gt;&gt;&gt; ord('\xd7') == 215 == 0xd7
True
&gt;&gt;&gt; hex(ord('\xd7'))
'0xd7'
&gt;&gt;&gt; '%x' % ord('\xd7')
'd7'
</snippet></ROW><ROW><id>4251740</id><snippet>&gt;&gt; cubed = @(x)x^3;
&gt;&gt; cubed(2)
ans =
     8
</snippet></ROW><ROW><id>4251740</id><snippet>eval</snippet></ROW><ROW><id>4251740</id><snippet>&gt;&gt; fact = @(val,branchFcns) val*branchFcns{(val &lt;= 1)+1}(val-1,branchFcns);
&gt;&gt; returnOne = @(val,branchFcns) 1;
&gt;&gt; branchFcns = {fact returnOne};
&gt;&gt; fact(4,branchFcns)
ans =
    24
&gt;&gt; fact(5,branchFcns)
ans =
   120
</snippet></ROW><ROW><id>4251881</id><snippet>import lxml.etree as le
import io

content='''\
&lt;foo&gt;&lt;X&gt;&lt;Y&gt;skip this&lt;/Y&gt;&lt;Y&gt;&lt;Z name="apple"&gt;&lt;W&gt;not here&lt;/W&gt;&lt;/Z&gt;
&lt;Z name="bacon"&gt;&lt;W&gt;&lt;A&gt;42&lt;/A&gt;&lt;B&gt;b&lt;/B&gt;&lt;C&gt;c&lt;/C&gt;&lt;/W&gt;&lt;W&gt;&lt;A&gt;256&lt;/A&gt;&lt;B&gt;b&lt;/B&gt;&lt;C&gt;c&lt;/C&gt;&lt;/W&gt;&lt;/Z&gt;
&lt;Z name="bacon"&gt;&lt;W&gt;&lt;A&gt;42&lt;/A&gt;&lt;B&gt;b&lt;/B&gt;&lt;C&gt;c&lt;/C&gt;&lt;/W&gt;&lt;W&gt;&lt;A&gt;256&lt;/A&gt;&lt;B&gt;b&lt;/B&gt;&lt;C&gt;c&lt;/C&gt;&lt;/W&gt;&lt;/Z&gt;
&lt;/Y&gt;&lt;/X&gt;&lt;/foo&gt;
'''
doc=le.parse(io.BytesIO(content))
# print(le.tostring(doc, pretty_print=True))
result=[]
Zs=doc.xpath('//X/Y[2]/Z[@name="bacon"]')
for Z in Zs:
    Ws=Z.xpath('W')
    record=[]
    assert(len(Ws)==2)  #&lt;--- Change to 9        
    abc=Ws[0].xpath('descendant::text()')
    # print(abc)
    # ['42', 'b', 'c']
    assert(abc[0] == '42')
    record.append(' '.join(abc))
    abc=Ws[1].xpath('descendant::text()')    
    assert(abc[0] == '256')
    result.append(record)
print(result)
# [['42 b c'], ['42 b c']]
</snippet></ROW><ROW><id>4251881</id><snippet>for Z in Zs:
    Ws=Z.xpath('W')
    assert(len(Ws)==2)  #&lt;--- Change to 9
    a_vals=('42','256')
    for W,a_val in zip(Ws,a_vals):
        abc=W.xpath('descendant::text()')
        assert(abc[0] == a_val)
        result.append([' '.join(abc)])
print(result)
# [['42 b c'], ['256 b c'], ['42 b c'], ['256 b c']]
</snippet></ROW><ROW><id>4252317</id><snippet>processR</snippet></ROW><ROW><id>4252453</id><snippet>curl -d</snippet></ROW><ROW><id>4252453</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; params = [('name1','value1'), ('name2','value2 with spaces &amp; stuff')]
&gt;&gt;&gt; pairs = urllib.urlencode(params)
&gt;&gt;&gt; fullurl = 'http://status.dummy.com/status.json' + '?' + pairs
&gt;&gt;&gt; print fullurl
http://status.dummy.com/status.json?name1=value1&amp;name2=value2+with+spaces+%26+stuff
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4252453</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>4252481</id><snippet>D = dict((title, rank) for rank, title in enumerate(albums_yesterday))
for rank, title in enumerate(albums_today):
    D[title] = D[title] - rank
</snippet></ROW><ROW><id>4252510</id><snippet>a</snippet></ROW><ROW><id>4252510</id><snippet>b</snippet></ROW><ROW><id>4252510</id><snippet>b</snippet></ROW><ROW><id>4252510</id><snippet>a+1</snippet></ROW><ROW><id>4252510</id><snippet>b-1</snippet></ROW><ROW><id>4252510</id><snippet>def addtwo (a, b):
    if b == 0:
        return a
    return addtwo (a+1, b-1)
</snippet></ROW><ROW><id>4252510</id><snippet>def search (list, key):
    if list is empty:
        return false
    if key == first item in list:
        return true
    return search (list with first element removed, key)
</snippet></ROW><ROW><id>4253232</id><snippet>iter.backward_chars</snippet></ROW><ROW><id>4253232</id><snippet>TextBuffer.text_inserted</snippet></ROW><ROW><id>4253232</id><snippet>import gtk
import pango

class TextBuffer(gtk.TextBuffer):
    def __init__(self):
        gtk.TextBuffer.__init__(self)
        self.connect_after('insert-text', self.text_inserted)
        # A list to hold our active tags
        self.tags_on = []
        # Our Bold tag.
        self.tag_bold = self.create_tag("bold", weight=pango.WEIGHT_BOLD)  

    def get_iter_position(self):
        return self.get_iter_at_mark(self.get_insert())

    def make_bold(self):
        ''' add "bold" to our active tags list '''
        if 'bold' in self.tags_on:
            del self.tags_on[self.tags_on.index('bold')]
        else:
            self.tags_on.append('bold')

    def text_inserted(self, buffer, iter, text, length):
        # A text was inserted in the buffer. If there are ny tags in self.tags_on,   apply them
        if self.tags_on:
            # This sets the iter back N characters
            iter.backward_chars(length)
            # And this applies tag from iter to end of buffer
            self.apply_tag_by_name('bold', self.get_iter_position(), iter)



def main():
    window = gtk.Window()
    window.connect('destroy', lambda _: gtk.main_quit())
    window.resize(300, 300)
    tb = TextBuffer()
    tv = gtk.TextView(buffer=tb)

    accel = gtk.AccelGroup()
    accel.connect_group(gtk.keysyms.b,
                        gtk.gdk.CONTROL_MASK,gtk.ACCEL_LOCKED,
                        lambda a,b,c,d: tb.make_bold())
    window.add_accel_group(accel)
    window.add(tv)
    window.show_all()
    gtk.main()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4253329</id><snippet>['python','-u','path/to/python/script.py']
</snippet></ROW><ROW><id>4253873</id><snippet>keys.sort(key=lambda k:(k[0], int(k[1:])) )
</snippet></ROW><ROW><id>4254170</id><snippet>- (void)printName:(NSString *)name andDescription:(NSString *)description
{
    if (name == nil) name = @"abc";
    if (description == nil) description = @"123";
    NSLog(@"%@%@", name, description);
}
</snippet></ROW><ROW><id>4254343</id><snippet>votedCat</snippet></ROW><ROW><id>4254343</id><snippet>votedCat</snippet></ROW><ROW><id>4254343</id><snippet>request.POST.getlist('votedCat')</snippet></ROW><ROW><id>4254343</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>4254343</id><snippet>&lt;/form&gt;</snippet></ROW><ROW><id>4254343</id><snippet>votedCat</snippet></ROW><ROW><id>4254343</id><snippet>&lt;input type="submit" name="votedCat" value="Vote for {{category}}" id={{forloop.counter}}&gt;
</snippet></ROW><ROW><id>4255133</id><snippet>numbers</snippet></ROW><ROW><id>4255133</id><snippet>keywords</snippet></ROW><ROW><id>4255133</id><snippet>vegetables</snippet></ROW><ROW><id>4255133</id><snippet>fruits</snippet></ROW><ROW><id>4255133</id><snippet>def foo(x, y, foo=None, *args): print [x, y, foo, args]

foo(1, 2, 3, 4)            --&gt; [1, 2, 3, (4, )]  # foo == 4
foo(1, 2, 3, 4, foo=True)  --&gt; TypeError
</snippet></ROW><ROW><id>4255133</id><snippet>def foo(x, y, *args, foo=None): print([x, y, foo, args])

foo(1, 2, 3, 4)           --&gt; [1, 2, None, (3, 4)]  # foo is None
foo(1, 2, 3, 4, foo=True) --&gt; [1, 2, True, (3, 4)]

def combo(x=None, *args, y=None): ...  # 2.x and 3.x styles in one function
</snippet></ROW><ROW><id>4255133</id><snippet>foo=</snippet></ROW><ROW><id>4255525</id><snippet>blog post</snippet></ROW><ROW><id>4255525</id><snippet>Using WMI to monitor process creation, deletion and modification in .NET</snippet></ROW><ROW><id>4255712</id><snippet>DIR_PATH = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))
# ...

EXTRA_PATHS = [
  DIR_PATH,
  os.path.join(DIR_PATH, 'lib', 'antlr3'),
  os.path.join(DIR_PATH, 'lib', 'django'),
  os.path.join(DIR_PATH, 'lib', 'fancy_urllib'),
  os.path.join(DIR_PATH, 'lib', 'ipaddr'),
  os.path.join(DIR_PATH, 'lib', 'webob'),
  os.path.join(DIR_PATH, 'lib', 'yaml', 'lib'),
]
# ...
sys.path = EXTRA_PATHS + sys.path
</snippet></ROW><ROW><id>4255911</id><snippet>saxutils.prepare_input_source</snippet></ROW><ROW><id>4255911</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>4255911</id><snippet>UrlOpener</snippet></ROW><ROW><id>4255911</id><snippet>urllib2</snippet></ROW><ROW><id>4255911</id><snippet>EntityResolver</snippet></ROW><ROW><id>4255911</id><snippet>saxutils.prepare_input_source</snippet></ROW><ROW><id>4255911</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>4255911</id><snippet>urllib</snippet></ROW><ROW><id>4255911</id><snippet>def make_caching_prepare_input_source(old_prepare_input_source, proxy):
    def caching_prepare_input_source(source, base = None):
        if isinstance(source, xmlreader.InputSource):
            return source

        full_uri = urlparse.urljoin(base or "", source)

        if not full_uri.startswith('http:'):
            args = (source,) if base == None else (source, base)
            return old_prepare_input_source(*args)

        r = urllib2.Request(full_uri)
        r.set_proxy(proxy, 'http')
        f = urllib2.urlopen(r)

        i = xmlreader.InputSource()
        i.setSystemId(source)
        i.setByteStream(f)

        return i

    return caching_prepare_input_source

def enable_http_proxy(server):
    saxutils.prepare_input_source = make_caching_prepare_input_source(
        saxutils.prepare_input_source,
        server,
    )
</snippet></ROW><ROW><id>4256126</id><snippet>import io
import lxml.etree as ET

content='''\
&lt;Envelope xmlns="http://www.xxx.com/zzz/yyy"&gt;
  &lt;Header&gt;
    &lt;Version&gt;1&lt;/Version&gt;
  &lt;/Header&gt;
  &lt;Body&gt;
    some stuff
  &lt;/Body&gt;
&lt;/Envelope&gt;
'''    
dom = ET.parse(io.BytesIO(content))
</snippet></ROW><ROW><id>4256126</id><snippet>xpath</snippet></ROW><ROW><id>4256126</id><snippet>body=dom.xpath('//ns:Body',namespaces={'ns':'http://www.xxx.com/zzz/yyy'})
print(body)
# [&lt;Element {http://www.xxx.com/zzz/yyy}Body at 90b2d4c&gt;]
</snippet></ROW><ROW><id>4256126</id><snippet># http://wiki.tei-c.org/index.php/Remove-Namespaces.xsl
xslt='''&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="xml" indent="no"/&gt;

&lt;xsl:template match="/|comment()|processing-instruction()"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="*"&gt;
    &lt;xsl:element name="{local-name()}"&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:element&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="@*"&gt;
    &lt;xsl:attribute name="{local-name()}"&gt;
      &lt;xsl:value-of select="."/&gt;
    &lt;/xsl:attribute&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
'''

xslt_doc=ET.parse(io.BytesIO(xslt))
transform=ET.XSLT(xslt_doc)
dom=transform(dom)
</snippet></ROW><ROW><id>4256126</id><snippet>print(ET.tostring(dom))
# &lt;Envelope&gt;
#   &lt;Header&gt;
#     &lt;Version&gt;1&lt;/Version&gt;
#   &lt;/Header&gt;
#   &lt;Body&gt;
#     some stuff
#   &lt;/Body&gt;
# &lt;/Envelope&gt;
</snippet></ROW><ROW><id>4256126</id><snippet>print(dom.find("Body"))
# &lt;Element Body at 8506cd4&gt;
</snippet></ROW><ROW><id>4256388</id><snippet>author_name</snippet></ROW><ROW><id>4256388</id><snippet>select_related</snippet></ROW><ROW><id>4256388</id><snippet>  for role in self.role_set.all().select_related(depth=1):
        person_name = role.person.full_name
        if role.name:
            person_name += ' (%s)' % (role.name,)
        names.append(person_name)
    return ', '.join(names)
</snippet></ROW><ROW><id>4256388</id><snippet>&gt;&gt;&gt; books = Book.objects.filter(**your_kwargs)
&gt;&gt;&gt; roles = Role.objects.filter(book_in=books).select_related(depth=1)
&gt;&gt;&gt; roles_by_book = defaultdict(list)
&gt;&gt;&gt; for role in roles:
...    roles_by_book[role.book].append(books)    
</snippet></ROW><ROW><id>4256388</id><snippet>roles_by_dict</snippet></ROW><ROW><id>4256388</id><snippet>&gt;&gt;&gt; for book in books:
...    book_roles = roles_by_book[book]
</snippet></ROW><ROW><id>4256388</id><snippet>author_name</snippet></ROW><ROW><id>4256388</id><snippet>class Role(models.Model):
    ...
    @property
    def name_and_role(self):
        out = self.person.full_name
        if self.name:
            out += ' (%s)' % role.name
        return out
</snippet></ROW><ROW><id>4256388</id><snippet>author_names</snippet></ROW><ROW><id>4256388</id><snippet>@property
def authors_names(self):
   return ', '.join([role.name_and_role for role in self.role_set.all() ])
</snippet></ROW><ROW><id>4256405</id><snippet>__iter__</snippet></ROW><ROW><id>4256639</id><snippet>AM_CONDITIONAL([CONDITION_NAME], [test x"${SOMEVAR}" != x])
</snippet></ROW><ROW><id>4256639</id><snippet>if CONDITION_NAME
&lt;conditional code&gt;
else
&lt;else :)&gt;
endif
</snippet></ROW><ROW><id>4256639</id><snippet>python setup.py --root=$(DESTDIR) --prefix=$(DESTDIR)$(prefix)
</snippet></ROW><ROW><id>4256639</id><snippet>DESTDIR</snippet></ROW><ROW><id>4256639</id><snippet>python setup.py --root=${DESTDIR}/// --prefix=${DESTDIR}///$(prefix)</snippet></ROW><ROW><id>4256639</id><snippet>DESTDIR=${DESTDIR:-///} &amp;&amp; python setup.py --root=${DESTDIR} --prefix=${DESTDIR}$(prefix)</snippet></ROW><ROW><id>4256639</id><snippet>configure</snippet></ROW><ROW><id>4256639</id><snippet>prefix</snippet></ROW><ROW><id>4256639</id><snippet>/usr/local</snippet></ROW><ROW><id>4257122</id><snippet>cat</snippet></ROW><ROW><id>4257122</id><snippet>python b.py tempfile.txt
var=`cat tempfile.txt`
rm tempfile.txt
</snippet></ROW><ROW><id>4257122</id><snippet>head</snippet></ROW><ROW><id>4257122</id><snippet>tail</snippet></ROW><ROW><id>4257317</id><snippet>throughput</snippet></ROW><ROW><id>4257317</id><snippet>roundtrip</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>x[i,j]</snippet></ROW><ROW><id>4257708</id><snippet>i*x.shape[1]+j</snippet></ROW><ROW><id>4257708</id><snippet>y = x[0:2,0:2]</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>y[i,j]</snippet></ROW><ROW><id>4257708</id><snippet>i*y.shape[1]+j</snippet></ROW><ROW><id>4257708</id><snippet>y</snippet></ROW><ROW><id>4257708</id><snippet>x[i,j]</snippet></ROW><ROW><id>4257708</id><snippet>i*x.strides[0]+j*x.strides[1]</snippet></ROW><ROW><id>4257708</id><snippet>x.strides
(16, 4)
</snippet></ROW><ROW><id>4257708</id><snippet>y</snippet></ROW><ROW><id>4257708</id><snippet>y</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>x</snippet></ROW><ROW><id>4257708</id><snippet>y.shape
(2,2)
y.strides
(16, 4)
</snippet></ROW><ROW><id>4257708</id><snippet>y[i,j]</snippet></ROW><ROW><id>4257708</id><snippet>z=x[[1,3]]</snippet></ROW><ROW><id>4257708</id><snippet>z</snippet></ROW><ROW><id>4257708</id><snippet>x[[[1],[3]],[1,3]]
</snippet></ROW><ROW><id>4257708</id><snippet>x[1::2, 1::2]
</snippet></ROW><ROW><id>4258205</id><snippet>autoload</snippet></ROW><ROW><id>4258205</id><snippet>True</snippet></ROW><ROW><id>4258289</id><snippet>application = webapp.WSGIApplication(...)</snippet></ROW><ROW><id>4258289</id><snippet>handlers:
  - url: /city.*
    script: cityhandler.py
</snippet></ROW><ROW><id>4258289</id><snippet>application = webapp.WSGIApplication([('/city', ShowCityPage)],
                                     debug=True)
</snippet></ROW><ROW><id>4258337</id><snippet>atexit</snippet></ROW><ROW><id>4258549</id><snippet>try:
    shutil.move(srcFile, dstFile)
except WindowsError:
    pass
</snippet></ROW><ROW><id>4258808</id><snippet>sorted(itertools.chain(list1.itervalues(), list2.itervalues(),
    list3.itervalues()), key=operator.itemgetter('timestamp'))
</snippet></ROW><ROW><id>4258875</id><snippet>import feedparser
import lxml.html as lh
import urllib2

#Import Feed for Parsing
d = feedparser.parse("http://feeds.boston.com/boston/bigpicture/index")

# Print feed name
print d['feed']['title']

# Determine number of posts and set range maximum
posts = len(d['entries'])

# Collect Post URLs
for post in d['entries']:
    link=post['link']
    print('Parsing {0}'.format(link))
    doc=lh.parse(urllib2.urlopen(link))
    imgs=doc.xpath('//img[@class="bpImage"]')
    for img in imgs:
        print(img.attrib['src'])
</snippet></ROW><ROW><id>4259042</id><snippet>imap</snippet></ROW><ROW><id>4259042</id><snippet>starmap</snippet></ROW><ROW><id>4259042</id><snippet>izip</snippet></ROW><ROW><id>4259042</id><snippet>imap</snippet></ROW><ROW><id>4259042</id><snippet>import itertools as it
def vecAdd(v1, v2): return tuple(it.imap(add, v1, v2))
def vecMul(v1, f): return tuple(it.imap(mul, v1, it.repeat(f)))
</snippet></ROW><ROW><id>4259190</id><snippet>import EventTimer
</snippet></ROW><ROW><id>4259190</id><snippet>EventTimer</snippet></ROW><ROW><id>4259190</id><snippet>Timer</snippet></ROW><ROW><id>4259190</id><snippet>timer = EventTimer.Timer()
</snippet></ROW><ROW><id>4259874</id><snippet>row = [unicode(x.strip()) for x in row if x]
</snippet></ROW><ROW><id>4260249</id><snippet>df</snippet></ROW><ROW><id>4260249</id><snippet>df filename</snippet></ROW><ROW><id>4260249</id><snippet>import subprocess
df = subprocess.Popen(["df", "filename"], stdout=subprocess.PIPE)
output = df.communicate()[0]
device, size, used, available, percent, mountpoint = \
    output.split("\n")[1].split()
</snippet></ROW><ROW><id>4260259</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4260304</id><snippet>[ unicode(x.strip()) if x is not None else '' for x in row ]
</snippet></ROW><ROW><id>4260311</id><snippet>print br.form.get_value('q')
</snippet></ROW><ROW><id>4260456</id><snippet>&gt;&gt;&gt; class Partial( object ):
...     def __init__( self ):
...         self.a= 1
...         raise Exception
...         self.b= 2
... 
&gt;&gt;&gt; p= Partial()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in __init__
Exception
&gt;&gt;&gt; p
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'p' is not defined
</snippet></ROW><ROW><id>4260530</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4260530</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>4260530</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>4260761</id><snippet>mimetypes</snippet></ROW><ROW><id>4260761</id><snippet>magic</snippet></ROW><ROW><id>4261502</id><snippet>[obj.id for obj in myObjects]
</snippet></ROW><ROW><id>4261543</id><snippet>SysLogHandler</snippet></ROW><ROW><id>4261543</id><snippet>SysLogHandler</snippet></ROW><ROW><id>4261971</id><snippet>call_user_func_array('f', array(1, 2, 3));
</snippet></ROW><ROW><id>4261971</id><snippet>array($instance, 'f')</snippet></ROW><ROW><id>4261971</id><snippet>'f'</snippet></ROW><ROW><id>4261971</id><snippet>array('ClassName', 'f')</snippet></ROW><ROW><id>4261971</id><snippet>'ClassName::f'</snippet></ROW><ROW><id>4261986</id><snippet>def countify2(ar):
    ar2 = np.ravel(ar)
    ar3 = np.empty(ar2.shape, dtype=np.int32)
    uniques = np.unique(ar2)
    myarange = np.arange(ar2.shape[0])
    for u in uniques:
        ar3[ar2 == u] = myarange
    return ar3
</snippet></ROW><ROW><id>4262002</id><snippet>delta = x - m[n-1]
m[n] = m[n-1] +  1/n * delta
S[n] = S[n-1] + (x[n] - m[n])*delta
mean = m[n]
std dev = sqrt(S[n]/n)
</snippet></ROW><ROW><id>4262116</id><snippet>def _bootstrap(self):
    from . import util
    global _current_process

    try:
        self._children = set()
        self._counter = itertools.count(1)
        try:
            sys.stdin.close()
            sys.stdin = open(os.devnull)
        except (OSError, ValueError):
            pass
        _current_process = self
        util._finalizer_registry.clear()
        util._run_after_forkers()
        util.info('child process calling self.run()')
        try:
            self.run()
            exitcode = 0
        finally:
            util._exit_function()
    except SystemExit, e:
        if not e.args:
            exitcode = 1
        elif type(e.args[0]) is int:
            exitcode = e.args[0]
        else:
            sys.stderr.write(e.args[0] + '\n')
            sys.stderr.flush()
            exitcode = 1
    except:
        exitcode = 1
        import traceback
        sys.stderr.write('Process %s:\n' % self.name)
        sys.stderr.flush()
        traceback.print_exc()

    util.info('process exiting with exitcode %d' % exitcode)
    return exitcode
</snippet></ROW><ROW><id>4262176</id><snippet>CoreGraphics</snippet></ROW><ROW><id>4262646</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>4262646</id><snippet>!=</snippet></ROW><ROW><id>4262646</id><snippet>!=</snippet></ROW><ROW><id>4262646</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>4262663</id><snippet>tiles</snippet></ROW><ROW><id>4262663</id><snippet>tiles</snippet></ROW><ROW><id>4262663</id><snippet>tiles</snippet></ROW><ROW><id>4262663</id><snippet>tiles</snippet></ROW><ROW><id>4262663</id><snippet>tiles</snippet></ROW><ROW><id>4262663</id><snippet>global</snippet></ROW><ROW><id>4262663</id><snippet>...
def foobar(in_file, out_file, expression):
    global tiles
    ...
</snippet></ROW><ROW><id>4262663</id><snippet>try</snippet></ROW><ROW><id>4262663</id><snippet>except</snippet></ROW><ROW><id>4262663</id><snippet>except</snippet></ROW><ROW><id>4262663</id><snippet>try:
    ...
except Exception, e:
    print 'Oh noes!', e
</snippet></ROW><ROW><id>4262805</id><snippet> &gt;&gt;&gt; gdal.VersionInfo('') 
 'GDAL 1.6.0, released 2008/12/04'
</snippet></ROW><ROW><id>4262805</id><snippet>cust_field</snippet></ROW><ROW><id>4262805</id><snippet>from osgeo import ogr, osr

shpfile = 'Census_County_TIGER00_IN.shp'

ds = ogr.Open(shpfile, 1)
lyr = ds.GetLayerByIndex(0)
fieldDefn = ogr.FieldDefn("Test", ogr.OFTInteger)
fieldDefn.SetWidth(14)
fieldDefn.SetPrecision(6)

lyr.CreateField(fieldDefn)
</snippet></ROW><ROW><id>4262943</id><snippet>arg_cache</snippet></ROW><ROW><id>4262943</id><snippet>def arg_cache(cthis, cthat, cthisandthat):
   def f(obj):
       obj.cache_this = cthis
       obj.cache_that = cthat
       obj.thisandthat = cthisandthat
       return obj
   return f

@arg_cache(cache_this, cache_that, cache_this_and_that)
...
</snippet></ROW><ROW><id>4262956</id><snippet>json</snippet></ROW><ROW><id>4262956</id><snippet>pickle</snippet></ROW><ROW><id>4262956</id><snippet>import os, platform
backup_filename = "output.back.json"
filename = "output.json"

serialised_str = json.dumps(...)
with open(backup_filename, 'wb') as f:
     f.write(serialised_str)
if platform.system() == 'Windows':
     os.unlink(filename)
os.rename(backup_filename, filename)
</snippet></ROW><ROW><id>4262956</id><snippet>os.rename</snippet></ROW><ROW><id>4262956</id><snippet>os.unlink</snippet></ROW><ROW><id>4262956</id><snippet>os.rename</snippet></ROW><ROW><id>4262956</id><snippet>backup_filename</snippet></ROW><ROW><id>4262956</id><snippet>filename</snippet></ROW><ROW><id>4262956</id><snippet>filename</snippet></ROW><ROW><id>4263040</id><snippet>sys.path</snippet></ROW><ROW><id>4263040</id><snippet>mysite.settings</snippet></ROW><ROW><id>4263040</id><snippet>'settings'</snippet></ROW><ROW><id>4263469</id><snippet>limit_choices_to</snippet></ROW><ROW><id>4263495</id><snippet>if</snippet></ROW><ROW><id>4263673</id><snippet>prepare</snippet></ROW><ROW><id>4263673</id><snippet>prepare</snippet></ROW><ROW><id>4263673</id><snippet>cursor.executemany()</snippet></ROW><ROW><id>4263673</id><snippet>cursor.execute()</snippet></ROW><ROW><id>4263994</id><snippet>import win32gui, win32api, win32con, ctypes

class Mouse:
    """It simulates the mouse"""
    MOUSEEVENTF_MOVE = 0x0001 # mouse move 
    MOUSEEVENTF_LEFTDOWN = 0x0002 # left button down 
    MOUSEEVENTF_LEFTUP = 0x0004 # left button up 
    MOUSEEVENTF_RIGHTDOWN = 0x0008 # right button down 
    MOUSEEVENTF_RIGHTUP = 0x0010 # right button up 
    MOUSEEVENTF_MIDDLEDOWN = 0x0020 # middle button down 
    MOUSEEVENTF_MIDDLEUP = 0x0040 # middle button up 
    MOUSEEVENTF_WHEEL = 0x0800 # wheel button rolled 
    MOUSEEVENTF_ABSOLUTE = 0x8000 # absolute move 
    SM_CXSCREEN = 0
    SM_CYSCREEN = 1

    def _do_event(self, flags, x_pos, y_pos, data, extra_info):
        """generate a mouse event"""
        x_calc = 65536L * x_pos / ctypes.windll.user32.GetSystemMetrics(self.SM_CXSCREEN) + 1
        y_calc = 65536L * y_pos / ctypes.windll.user32.GetSystemMetrics(self.SM_CYSCREEN) + 1
        return ctypes.windll.user32.mouse_event(flags, x_calc, y_calc, data, extra_info)

    def _get_button_value(self, button_name, button_up=False):
        """convert the name of the button into the corresponding value"""
        buttons = 0
        if button_name.find("right") &gt;= 0:
            buttons = self.MOUSEEVENTF_RIGHTDOWN
        if button_name.find("left") &gt;= 0:
            buttons = buttons + self.MOUSEEVENTF_LEFTDOWN
        if button_name.find("middle") &gt;= 0:
            buttons = buttons + self.MOUSEEVENTF_MIDDLEDOWN
        if button_up:
            buttons = buttons &lt;&lt; 1
        return buttons

    def move_mouse(self, pos):
        """move the mouse to the specified coordinates"""
        (x, y) = pos
        old_pos = self.get_position()
        x =  x if (x != -1) else old_pos[0]
        y =  y if (y != -1) else old_pos[1]    
        self._do_event(self.MOUSEEVENTF_MOVE + self.MOUSEEVENTF_ABSOLUTE, x, y, 0, 0)

    def press_button(self, pos=(-1, -1), button_name="left", button_up=False):
        """push a button of the mouse"""
        self.move_mouse(pos)
        self._do_event(self.get_button_value(button_name, button_up), 0, 0, 0, 0)

    def click(self, pos=(-1, -1), button_name= "left"):
        """Click at the specified placed"""
        self.move_mouse(pos)
        self._do_event(self._get_button_value(button_name, False)+self._get_button_value(button_name, True), 0, 0, 0, 0)

    def double_click (self, pos=(-1, -1), button_name="left"):
        """Double click at the specifed placed"""
        for i in xrange(2): 
            self.click(pos, button_name)

    def get_position(self):
        """get mouse position"""
        return win32api.GetCursorPos()
</snippet></ROW><ROW><id>4263994</id><snippet>import time
mouse = Mouse()
mouse.click((20, 10), "left")
time.sleep(2.0)

mouse.click((100, 100), "right")
</snippet></ROW><ROW><id>4264655</id><snippet>for _ in range(50):
    print "Some thing"
</snippet></ROW><ROW><id>4264655</id><snippet>i</snippet></ROW><ROW><id>4264655</id><snippet>xrange</snippet></ROW><ROW><id>4264673</id><snippet>import sqlite3
import csv, codecs, cStringIO

class UnicodeWriter:
    """
    A CSV writer which will write rows to CSV file "f", 
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.writer(self.queue, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, row):
        self.writer.writerow([unicode(s).encode("utf-8") for s in row])
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode("utf-8")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for row in rows:
            self.writerow(row)

conn = sqlite3.connect('yourdb.sqlite')

c = conn.cursor()
c.execute('select * from yourtable')

writer = UnicodeWriter(open("export.csv", "wb"))

writer.writerows(c)
</snippet></ROW><ROW><id>4264673</id><snippet># Select whichever rows you want in whatever order you like
c.execute('select id, forename, surname, email from contacts')

writer = UnicodeWriter(open("export.csv", "wb"))

# Make sure the list of column headers you pass in are in the same order as your SELECT
writer.writerow(["ID", "Forename", "Surname", "Email"])
writer.writerows(c)
</snippet></ROW><ROW><id>4264673</id><snippet>csv.register_dialect('pipeseparated', delimiter = '|')

writer = UnicodeWriter(open("export.csv", "wb"), dialect='pipeseparated')
</snippet></ROW><ROW><id>4264866</id><snippet>set</snippet></ROW><ROW><id>4265081</id><snippet>isatty</snippet></ROW><ROW><id>4265081</id><snippet>if sys.stdin.isatty():
</snippet></ROW><ROW><id>4265081</id><snippet>True</snippet></ROW><ROW><id>4265409</id><snippet>print "Content-Type: text/plain"
print "Content-Disposition: attachment; filename=some-file-name.txt"
print
</snippet></ROW><ROW><id>4265409</id><snippet>text/plain</snippet></ROW><ROW><id>4265409</id><snippet>text/text</snippet></ROW><ROW><id>4265592</id><snippet>def round_to(n, precission):
    correction = 0.5 if n &gt;= 0 else -0.5
    return int(n/precission+correction)*precission

def round_to_05(n):
    return round_to(n, 0.05)
</snippet></ROW><ROW><id>4265616</id><snippet>&gt; tt &lt;- 100
&gt; longtext &lt;- paste(rep("dqsdgfmqslkfdjiehsmlsdfkjqsefr",1000),collapse="")
&gt; test &lt;- data.frame(
+     X1=rep(letters,tt),
+     X2=rep(1:26,tt),
+     X3=rep(longtext,26*tt)
+ )

&gt; SSD &lt;- "C:/Temp" # My ssd disk with my 2 operating systems on it.
&gt; normal &lt;- "F:/Temp" # My normal disk, I use for data

&gt; # Write text 
&gt; system.time(write.table(test,file=paste(SSD,"test.txt",sep="/")))
   user  system elapsed 
   5.66    0.50    6.24 

&gt; system.time(write.table(test,file=paste(normal,"test.txt",sep="/")))
   user  system elapsed 
   5.68    0.39    6.08 

&gt; # Write binary
&gt; system.time(save(test,file=paste(SSD,"test.RData",sep="/")))
   user  system elapsed 
      0       0       0 

&gt; system.time(save(test,file=paste(normal,"test.RData",sep="/")))
   user  system elapsed 
      0       0       0 

&gt; # Read text 
&gt; system.time(read.table(file=paste(SSD,"test.txt",sep="/"),header=T))
   user  system elapsed 
   8.57    0.05    8.61 

&gt; system.time(read.table(file=paste(normal,"test.txt",sep="/"),header=T))
   user  system elapsed 
   8.53    0.09    8.63 

&gt; # Read binary
&gt; system.time(load(file=paste(SSD,"test.RData",sep="/")))
   user  system elapsed 
      0       0       0 

&gt; system.time(load(file=paste(normal,"test.RData",sep="/")))
   user  system elapsed 
      0       0       0 
</snippet></ROW><ROW><id>4265625</id><snippet>sys.path</snippet></ROW><ROW><id>4265625</id><snippet>exec python ~/programming/ass1/seattle/seattle_repy/repy.py</snippet></ROW><ROW><id>4265764</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>4265852</id><snippet>easy_install</snippet></ROW><ROW><id>4265852</id><snippet>&gt;&gt;&gt; import babel
&gt;&gt;&gt; locale = babel.Locale('en', 'US')
&gt;&gt;&gt; locale.first_week_day
6
&gt;&gt;&gt; locale.days['format']['wide'][locale.first_week_day]
u'Sunday'
</snippet></ROW><ROW><id>4265852</id><snippet>calendar.LocalTextCalendar</snippet></ROW><ROW><id>4265852</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; c = calendar.LocaleTextCalendar(locale='de_DE') # locale=('en_US', 'UTF8') fails too.
&gt;&gt;&gt; c.firstweekday
0
</snippet></ROW><ROW><id>4265852</id><snippet>iterweekdays</snippet></ROW><ROW><id>4265852</id><snippet>&gt;&gt;&gt; list(c.iterweekdays())
[0, 1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>4266291</id><snippet>editable</snippet></ROW><ROW><id>4266291</id><snippet>from django.contrib import admin

admin.site.register(Person, exclude=['name'])
</snippet></ROW><ROW><id>4266457</id><snippet>http://google.com/search?q=query</snippet></ROW><ROW><id>4266499</id><snippet>def cn(n):
   c = y*np.exp(-1j*2*n*np.pi*time/period)
   return c.sum()/c.size

def f(x, Nh):
   f = np.array([2*cn(i)*np.exp(1j*2*i*np.pi*x/period) for i in range(1,Nh+1)])
   return f.sum()

y2 = np.array([f(t,50).real for t in time])

plot(time, y)
plot(time, y2)
</snippet></ROW><ROW><id>4266645</id><snippet>scipy.stats.rv_discrete</snippet></ROW><ROW><id>4266645</id><snippet>values</snippet></ROW><ROW><id>4266645</id><snippet>rvs()</snippet></ROW><ROW><id>4266782</id><snippet>suds.transport</snippet></ROW><ROW><id>4266782</id><snippet>import logging
logging.basicConfig(level=logging.INFO)
logging.getLogger('suds.client').setLevel(logging.DEBUG)
logging.getLogger('suds.transport').setLevel(logging.DEBUG)
logging.getLogger('suds.xsd.schema').setLevel(logging.DEBUG)
logging.getLogger('suds.wsdl').setLevel(logging.DEBUG)

from suds.client import Client
s = Client('http://someservice?wsdl')
</snippet></ROW><ROW><id>4266844</id><snippet>as_integer_ratio</snippet></ROW><ROW><id>4266844</id><snippet>&gt;&gt;&gt; a = 6.75
&gt;&gt;&gt; a.as_integer_ratio()
(27, 4)
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.pi.as_integer_ratio()
(884279719003555, 281474976710656)
</snippet></ROW><ROW><id>4266959</id><snippet>&gt;&gt;&gt; float() == long() == int() &lt; dict() &lt; list() &lt; str() &lt; tuple()
True
</snippet></ROW><ROW><id>4266959</id><snippet>int</snippet></ROW><ROW><id>4266959</id><snippet>str</snippet></ROW><ROW><id>4266959</id><snippet>s</snippet></ROW><ROW><id>4266959</id><snippet>int</snippet></ROW><ROW><id>4266959</id><snippet>str</snippet></ROW><ROW><id>4266959</id><snippet>long &lt; int</snippet></ROW><ROW><id>4266959</id><snippet>&gt;&gt;&gt; int &lt; long
True
</snippet></ROW><ROW><id>4266959</id><snippet>dict</snippet></ROW><ROW><id>4267264</id><snippet>foo = [1,2,3,4]
bar = ['a','b','c','d']

foo.zip(bar) #=&gt; [[1, "a"], [2, "b"], [3, "c"], [4, "d"]]
</snippet></ROW><ROW><id>4267315</id><snippet>ret.decode()</snippet></ROW><ROW><id>4267315</id><snippet>ret</snippet></ROW><ROW><id>4267315</id><snippet>&gt;&gt;&gt; u'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')
u'X\xfcY\xdf'
</snippet></ROW><ROW><id>4267377</id><snippet>import client_module
</snippet></ROW><ROW><id>4267377</id><snippet>import model

...

model.client_module = MyMockModule()
</snippet></ROW><ROW><id>4267377</id><snippet>MyMockModule</snippet></ROW><ROW><id>4267377</id><snippet>client_module</snippet></ROW><ROW><id>4267377</id><snippet>model</snippet></ROW><ROW><id>4267377</id><snippet>client_module</snippet></ROW><ROW><id>4267377</id><snippet>sys.modules['client_module']</snippet></ROW><ROW><id>4267377</id><snippet>model</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; class Person(object):
...     def bound(self):
...             print "Hi, I'm bound."
... 
&gt;&gt;&gt; def unbound(self):
...     print "Hi, I'm unbound."
... 
</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; type(Person.bound)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(Person().bound)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; type(unbound)
&lt;type 'function'&gt;
&gt;&gt;&gt; Person.unbound = unbound
</snippet></ROW><ROW><id>4267590</id><snippet>Person</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; Person().bound()
Hi, I'm bound.
&gt;&gt;&gt; Person().unbound()
Hi, I'm unbound.
</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; me = Person()
&gt;&gt;&gt; me.rebound = unbound
&gt;&gt;&gt; type(me.rebound)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(me.unbound)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; me.rebound
&lt;function unbound at 0x7fa05efac9b0&gt;
&gt;&gt;&gt; me.rebound()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound() takes exactly 1 argument (0 given)
</snippet></ROW><ROW><id>4267590</id><snippet>types</snippet></ROW><ROW><id>4267590</id><snippet>MethodType</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; me.rebound = types.MethodType(unbound, me, Person)
</snippet></ROW><ROW><id>4267590</id><snippet>&gt;&gt;&gt; type(me.rebound)
&lt;type 'instancemethod'&gt;
&gt;&gt;&gt; me.rebound()
Hi, I'm unbound.
&gt;&gt;&gt; # Not true any more!
</snippet></ROW><ROW><id>4267982</id><snippet>isinstance(obj, collections.Sequence)</snippet></ROW><ROW><id>4268349</id><snippet>a, b = map(int, s.split('x'))
res = a * b
</snippet></ROW><ROW><id>4268349</id><snippet>res = eval(s.replace('x', '*'))
</snippet></ROW><ROW><id>4268349</id><snippet>res = (lambda x, y: x * y)(*map(int, s.split('x')))
</snippet></ROW><ROW><id>4268349</id><snippet>import operator

res = operator.mul(*map(int, s.split('x')))
</snippet></ROW><ROW><id>4269457</id><snippet>itertools.groupby</snippet></ROW><ROW><id>4269457</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import operator
&gt;&gt;&gt; foo = [("a", 1), ("a", 2), ("b", 1), ("c", 1), ("c", 2)]
&gt;&gt;&gt; for group in itertools.groupby(foo, operator.itemgetter(0)):
...     print group[0], list(map(operator.itemgetter(1), group[1]))
...
a [1, 2]
b [1]
c [1, 2]
</snippet></ROW><ROW><id>4269457</id><snippet>groupby</snippet></ROW><ROW><id>4269457</id><snippet>keyfunc</snippet></ROW><ROW><id>4269457</id><snippet>keyfunc</snippet></ROW><ROW><id>4269457</id><snippet>groupby</snippet></ROW><ROW><id>4269457</id><snippet>operator.itemgetter(0)</snippet></ROW><ROW><id>4269457</id><snippet>x</snippet></ROW><ROW><id>4269457</id><snippet>x[0]</snippet></ROW><ROW><id>4269457</id><snippet>sys.stdin</snippet></ROW><ROW><id>4269457</id><snippet>yield</snippet></ROW><ROW><id>4269633</id><snippet>install</snippet></ROW><ROW><id>4269633</id><snippet>from distutils.command.install import install

class Install(install):
    def run(self):
        if not check_dependencies():
             # Tkinter was not installed, handle this here
        install.run(self) # proceed with the installation

def check_dependencies():
    try:
        return __import__('Tkinter')
    except ImportError:
        return None
</snippet></ROW><ROW><id>4269828</id><snippet>class Model(model.Model):
    _image=models.ImageField(upload_to='folder')
    thumb=models.ImageField(upload_to='folder')
    description=models.CharField()

    def set_image(self, val):
        self._image = val
        self._image_changed = True

        # Or put whole logic in here
        small = rescale_image(self.image,width=100,height=100)
        self.image_small=SimpleUploadedFile(name,small_pic)

    def get_image(self):
        return self._image

    image = property(get_image, set_image)

    # this is not needed if small_image is created at set_image
    def save(self, *args, **kwargs):
        if getattr(self, '_image_changed', True):
            small=rescale_image(self.image,width=100,height=100)
            self.image_small=SimpleUploadedFile(name,small_pic)
        super(Model, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>4270046</id><snippet>hist()</snippet></ROW><ROW><id>4270046</id><snippet>x</snippet></ROW><ROW><id>4270046</id><snippet>from pylab import *

x = [[5,2],[10,5],[3,2],[5,99],[10,22],[3,15],[4,30]]
a,b = zip(*x) #Unzip x into a &amp; b as per your example

#Make a dictionary where the key is the item from a and the value
#is the sum of all the corresponding entries in b
sums = {}
for i in range(0,len(a)):
    sums[a[i]] = b[i] if not a[i] in sums else sums[a[i]] + b[i]

#Plot it
ylabel('Bins')
xlabel('Total Times')
barh(sums.keys(),sums.values(),align='center')
show()
</snippet></ROW><ROW><id>4270268</id><snippet>while</snippet></ROW><ROW><id>4270268</id><snippet>def gcd(m, n):
    "Return the greatest common divisor of m and n."
    while n != 0:
        m, n = n, m % n
    return m
</snippet></ROW><ROW><id>4270268</id><snippet>def gcd(m, n):
    "Return the greatest common divisor of m and n."
    while True:
        if n == 0:
            return m
        m, n = n, m % n
</snippet></ROW><ROW><id>4270308</id><snippet>str</snippet></ROW><ROW><id>4270308</id><snippet>unicode</snippet></ROW><ROW><id>4270308</id><snippet>unicode</snippet></ROW><ROW><id>4270308</id><snippet>str</snippet></ROW><ROW><id>4270437</id><snippet>Axes</snippet></ROW><ROW><id>4270437</id><snippet>import matplotlib.pyplot as plt

x = range(100)
y = range(100,200)
fig = plt.figure()
ax1 = fig.add_subplot(111)

ax1.scatter(x[:4], y[:4], s=10, c='b', marker="s")
ax1.scatter(y[4:], x[4:], s=10, c='r', marker="o")
plt.show()
</snippet></ROW><ROW><id>4270750</id><snippet>article_votes = sorted(article.votes, key=lambda a: a.votes())
</snippet></ROW><ROW><id>4270750</id><snippet>sorted</snippet></ROW><ROW><id>4270750</id><snippet>lambda a: a.votes()</snippet></ROW><ROW><id>4270874</id><snippet>django.contrib.sessions.middleware.SessionMiddleware</snippet></ROW><ROW><id>4270898</id><snippet>&gt;&gt;&gt; html = """    &lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;
...                     Zazzafooky but one two three!
...                 &lt;/span&gt;&lt;/li&gt;
... &lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;
...                     Zazzafooky2
...                 &lt;/span&gt;&lt;/li&gt;
... &lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;
...                     Zazzafooky3
...                 &lt;/span&gt;&lt;/li&gt;
... """
&gt;&gt;&gt; html = "".join(line.strip() for line in html.split("\n"))
&gt;&gt;&gt; html
'&lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;Zazzafooky but one two three!&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;Zazzafooky2&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="plaincharacterwrap break"&gt;Zazzafooky3&lt;/span&gt;&lt;/li&gt;'
</snippet></ROW><ROW><id>4271113</id><snippet>tree = """Root
  Branch1
    LeafA
    LeafB
  Branch2
    LeafC
      LeafZ
    LeafD"""

aDict = {}
iDict = {}
for line in tree.split("\n"):
    key = line.lstrip(" ")
    indent = (len(line) - len(key)) / 2
    if indent == 0:
        aDict[key] = None
    else:
        aDict[key] = iDict[indent - 1]
    iDict[indent] = key

print aDict
# {'LeafD': 'Branch2', 'LeafA': 'Branch1', 'Branch2': 'Root', 'LeafC': 'Branch2', 'LeafB': 'Branch1', 'Branch1': 'Root', 'Root': None, 'LeafZ': 'LeafC'}
</snippet></ROW><ROW><id>4271307</id><snippet>soup_object.findAll('a', {'href': re.compile('.*_ss\.jpg')})</snippet></ROW><ROW><id>4271619</id><snippet>site.py</snippet></ROW><ROW><id>4271619</id><snippet>-S</snippet></ROW><ROW><id>4271619</id><snippet>-S</snippet></ROW><ROW><id>4271619</id><snippet>sys.path</snippet></ROW><ROW><id>4271619</id><snippet>site</snippet></ROW><ROW><id>4271619</id><snippet>python -m site</snippet></ROW><ROW><id>4271669</id><snippet>AdminSite</snippet></ROW><ROW><id>4271669</id><snippet>ModelAdmin</snippet></ROW><ROW><id>4271669</id><snippet>form</snippet></ROW><ROW><id>4271669</id><snippet>GET</snippet></ROW><ROW><id>4271669</id><snippet>POST</snippet></ROW><ROW><id>4271708</id><snippet>&gt;&gt;&gt; u'bob\xf0\xa4\xad\xa2'.encode('latin-1')
'bob\xf0\xa4\xad\xa2'
</snippet></ROW><ROW><id>4271755</id><snippet>socket</snippet></ROW><ROW><id>4271755</id><snippet>gethostname()</snippet></ROW><ROW><id>4271755</id><snippet>hostname</snippet></ROW><ROW><id>4271755</id><snippet>import socket
print(socket.gethostname())
</snippet></ROW><ROW><id>4272111</id><snippet>reply_to</snippet></ROW><ROW><id>4272111</id><snippet>/_ah/mail/</snippet></ROW><ROW><id>4272111</id><snippet>sender</snippet></ROW><ROW><id>4272204</id><snippet>[download] Destination: XXX</snippet></ROW><ROW><id>4272204</id><snippet>--no-progress --output=XXX</snippet></ROW><ROW><id>4272204</id><snippet>%(title)s.%(ext)s-latest-download</snippet></ROW><ROW><id>4272290</id><snippet>import re
txt = '#TR=[ dfgg ] a kuku #TR=[ala ma kota]'
</snippet></ROW><ROW><id>4272290</id><snippet>matches = re.search('#TR=\[([^\]]*)\]', txt)
if matches:
    print(repr(matches.group(1)))
' dfgg dfg '
</snippet></ROW><ROW><id>4272290</id><snippet>matches = re.findall('#TR=\[([^\]]*)\]', txt)
if matches:
    print(matches)
[' dfgg ', 'ala ma kota']
</snippet></ROW><ROW><id>4272290</id><snippet>[</snippet></ROW><ROW><id>4272290</id><snippet>]</snippet></ROW><ROW><id>4272290</id><snippet>\[</snippet></ROW><ROW><id>4272290</id><snippet>.*</snippet></ROW><ROW><id>4272290</id><snippet>[^\]]*</snippet></ROW><ROW><id>4272290</id><snippet>]</snippet></ROW><ROW><id>4272290</id><snippet>matches = re.findall('#TR=\[(.*)\]', txt)
if matches:
    print(matches)
[' dfgg ] a kuku #TR=[ala ma kota']
</snippet></ROW><ROW><id>4272290</id><snippet>?</snippet></ROW><ROW><id>4272290</id><snippet>*</snippet></ROW><ROW><id>4272290</id><snippet>+</snippet></ROW><ROW><id>4272290</id><snippet>*?</snippet></ROW><ROW><id>4272290</id><snippet>+?</snippet></ROW><ROW><id>4272290</id><snippet>'#TR=\[(.*?)\]'
</snippet></ROW><ROW><id>4272290</id><snippet>'#TR=\[([^\]]*)\]'
</snippet></ROW><ROW><id>4272614</id><snippet>&lt;seq/&gt;</snippet></ROW><ROW><id>4272614</id><snippet>&lt;b&gt; &lt;/b&gt;</snippet></ROW><ROW><id>4272614</id><snippet>&lt;seq/&gt;</snippet></ROW><ROW><id>4272614</id><snippet>from reportlab.platypus import Paragraph

formatted_text = 
    "Some example text. &lt;seq/&gt;First. &lt;seq/&gt;Second. &lt;seq/&gt;Third"
formatted_para = Paragraph(your_formatted_text, your_paragraph_style_instance)
</snippet></ROW><ROW><id>4272888</id><snippet>numpy</snippet></ROW><ROW><id>4272888</id><snippet>numpy</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image.fromarray</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image.open</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image.open</snippet></ROW><ROW><id>4272888</id><snippet>import re
import numpy

def pbm2numpy(filename):
    """
    Read a PBM into a numpy array.  Only supports ASCII PBM for now.
    """
    fin = None
    debug = True

    try:
        fin = open(filename, 'r')

        while True:
            header = fin.readline().strip()
            if header.startswith('#'):
                continue
            elif header == 'P1':
                break
            elif header == 'P4':
                assert False, 'Raw PBM reading not implemented yet'
            else:
                #
                # Unexpected header.
                #
                if debug:
                    print 'Bad mode:', header
                return None

        rows, cols = 0, 0
        while True:
            header = fin.readline().strip()
            if header.startswith('#'):
                continue

            match = re.match('^(\d+) (\d+)$', header)
            if match == None:
                if debug:
                    print 'Bad size:', repr(header)
                return None

            cols, rows = match.groups()
            break

        rows = int(rows)
        cols = int(cols)

        assert (rows, cols) != (0, 0)

        if debug:
            print 'Rows: %d, cols: %d' % (rows, cols)

        #
        # Initialise a 2D numpy array 
        #
        result = numpy.zeros((rows, cols), numpy.int8)

        pxs = []

        # 
        # Read to EOF.
        # 
        while True:
            line = fin.readline().strip()
            if line == '':
                break

            for c in line:
                if c == ' ':
                    continue

                pxs.append(int(c))

        if len(pxs) != rows*cols:
            if debug:
                print 'Insufficient image data:', len(pxs)
            return None

        for r in range(rows):
            for c in range(cols):
                #
                # Index into the numpy array and set the pixel value.
                #
                result[r, c] = pxs[r*cols + c]

        return result

    finally:
        if fin != None:
            fin.close()
        fin = None

    return None
</snippet></ROW><ROW><id>4272888</id><snippet>def pgm2pil(fname):
    #
    # This method returns a PIL.Image.  Use pbm2numpy function above as a
    # guide.  If it can't load the image, it returns None.
    #
    pass

def wrapper(fname):
    pgm = pgm2pil(fname)

    if pgm is not None:
        return pgm
    return PIL.Image.open(fname)

#
# This is the line that "adds" the wrapper
#
PIL.Image.open = wrapper
</snippet></ROW><ROW><id>4272888</id><snippet>pgm2pil</snippet></ROW><ROW><id>4272888</id><snippet>pgm2numpy</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image</snippet></ROW><ROW><id>4272888</id><snippet>numpy</snippet></ROW><ROW><id>4272888</id><snippet>PIL.Image.open</snippet></ROW><ROW><id>4272993</id><snippet>or</snippet></ROW><ROW><id>4272993</id><snippet>val = x or y
</snippet></ROW><ROW><id>4272993</id><snippet>&gt;&gt;&gt; None or 'OK'
'OK'
</snippet></ROW><ROW><id>4273249</id><snippet>detect_types=sqlite3.PARSE_DECLTYPES</snippet></ROW><ROW><id>4273249</id><snippet>sqlite3.connect</snippet></ROW><ROW><id>4273249</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>4273249</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>4273249</id><snippet>detect_types</snippet></ROW><ROW><id>4273249</id><snippet>conn=sqlite3.connect(':memory:',detect_types=sqlite3.PARSE_DECLTYPES) 
cur=conn.cursor()
cur.execute('CREATE TABLE foo(bar DATE)')
# Unfortunately, this is still accepted by sqlite
cur.execute("INSERT INTO foo(bar) VALUES (?)",('25/06/2003',))

# But you won't be able to draw the data out later because parsing will fail
try:
    cur.execute("SELECT * FROM foo")
except ValueError as err:
    print(err)
    # invalid literal for int() with base 10: '25/06/2003'
    conn.rollback()
</snippet></ROW><ROW><id>4273249</id><snippet>cur.execute("INSERT INTO foo(bar) VALUES (?)",(datetime.date(2003,6,25),))
cur.execute("SELECT ALL * FROM foo")
data=cur.fetchall()
data=zip(*data)[0]
print(data)
# (datetime.date(2003, 6, 25),)
</snippet></ROW><ROW><id>4273249</id><snippet>datetime.date</snippet></ROW><ROW><id>4273249</id><snippet>cur.execute("INSERT INTO foo(bar) VALUES (?)",('2003-06-25',))
cur.execute("SELECT ALL * FROM foo")
data=cur.fetchall()
data=zip(*data)[0]
print(data)
# (datetime.date(2003, 6, 25), datetime.date(2003, 6, 25))
</snippet></ROW><ROW><id>4273249</id><snippet>datetime.date</snippet></ROW><ROW><id>4273249</id><snippet>DATE</snippet></ROW><ROW><id>4273249</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4273457</id><snippet>import sys
for i, path in enumerate(sys.path):
    if path.endswith('bin'):
        del sys.path[i]
</snippet></ROW><ROW><id>4273549</id><snippet>{{variable}}</snippet></ROW><ROW><id>4273549</id><snippet>{% tag %}</snippet></ROW><ROW><id>4273577</id><snippet>python something.py source.zip | python part2.py | python part3.py | python part4.py &gt;result
</snippet></ROW><ROW><id>4273842</id><snippet>__hash__</snippet></ROW><ROW><id>4273842</id><snippet>__eq__</snippet></ROW><ROW><id>4273842</id><snippet>__hash__</snippet></ROW><ROW><id>4273842</id><snippet>__eq__</snippet></ROW><ROW><id>4273842</id><snippet>&gt;&gt;&gt; class Same(object):
...     def __init__(self, value):
...         self.value = value
...     def __hash__(self):
...         return 42
...     def __eq__(self, other):
...         return True
...     def __repr__(self):
...         return 'Same(%r)' % self.value
&gt;&gt;&gt; set([Same(2), Same(1)])
set([Same(2)])
&gt;&gt;&gt; set([Same(1), Same(2)])
set([Same(1)])
</snippet></ROW><ROW><id>4273842</id><snippet>dict</snippet></ROW><ROW><id>4273842</id><snippet>&gt;&gt;&gt; {Same(1): 1, Same(2): 2}
{Same(1): 2}
&gt;&gt;&gt; {Same(1): 2, Same(2): 1}
{Same(1): 1}
&gt;&gt;&gt; {Same(2): 1, Same(2): 2}
{Same(2): 2}
&gt;&gt;&gt; {Same(2): 2, Same(2): 1}
{Same(2): 1}
&gt;&gt;&gt; {Same(2): 2, Same(2): 1}
{Same(2): 1}
</snippet></ROW><ROW><id>4273842</id><snippet>&gt;&gt;&gt; {Same(1): Same(2), Same(3): Same(4)}
{Same(1): Same(4)}
</snippet></ROW><ROW><id>4274147</id><snippet>&lt;br</snippet></ROW><ROW><id>4274147</id><snippet>.*?</snippet></ROW><ROW><id>4274147</id><snippet>&gt;</snippet></ROW><ROW><id>4274147</id><snippet>\w</snippet></ROW><ROW><id>4274147</id><snippet>.*?</snippet></ROW><ROW><id>4274147</id><snippet>.</snippet></ROW><ROW><id>4274147</id><snippet>&gt;</snippet></ROW><ROW><id>4274147</id><snippet>&gt;\w</snippet></ROW><ROW><id>4274147</id><snippet>$</snippet></ROW><ROW><id>4274147</id><snippet>.*</snippet></ROW><ROW><id>4274147</id><snippet>&lt;br&gt;&lt;br /&gt;A&lt;br /&gt;B</snippet></ROW><ROW><id>4274147</id><snippet>&lt;br[^&gt;]*&gt;\w$</snippet></ROW><ROW><id>4274147</id><snippet>&gt;</snippet></ROW><ROW><id>4274204</id><snippet>def register(dict_, *names):
    def dec(f):
        m_name = f.__name__
        for name in names:
            dict_[name] = m_name
        return f
    return dec

class Test(object):

    commands = {}

    @register(commands, 'foo', 'fu', 'fOo')
    def _handle_foo(self):
        print 'foo'

    @register(commands, 'bar', 'BaR', 'bAR')
    def _do_bar(self):
        print 'bar'

    def dispatch(self, cmd):
        try:
            return getattr(self, self.commands[cmd])()
        except (KeyError, AttributeError):
            # Command doesn't exist. Handle it somehow if you want to
            # The AttributeError should actually never occur unless a method gets 
            # deleted from the class
</snippet></ROW><ROW><id>4274204</id><snippet>dict</snippet></ROW><ROW><id>4274204</id><snippet>t = Test()

if 'foo' in t.commands:
    t.dispatch('foo')

for cmd in t.commands:
    # Obviously this will call each method with multiple commands dispatched to it once
    # for each command
    t.dispatch(cmd)
</snippet></ROW><ROW><id>4274280</id><snippet>&gt;&gt; s = "banana 4 apple 2 orange 4"
&gt;&gt; lst = s.split()
&gt;&gt; dict(zip(lst[::2], lst[1::2]))
</snippet></ROW><ROW><id>4274450</id><snippet>RegisterDeviceNotification</snippet></ROW><ROW><id>4274450</id><snippet>ctypes</snippet></ROW><ROW><id>4274450</id><snippet>ctypes</snippet></ROW><ROW><id>4274450</id><snippet>pywin32</snippet></ROW><ROW><id>4274450</id><snippet>import win32serviceutil
import win32service
import win32event
import servicemanager

import win32gui
import win32gui_struct
struct = win32gui_struct.struct
pywintypes = win32gui_struct.pywintypes
import win32con

GUID_DEVINTERFACE_USB_DEVICE = "{A5DCBF10-6530-11D2-901F-00C04FB951ED}"
DBT_DEVICEARRIVAL = 0x8000
DBT_DEVICEREMOVECOMPLETE = 0x8004

import ctypes

#
# Cut-down clone of UnpackDEV_BROADCAST from win32gui_struct, to be
# used for monkey-patching said module with correct handling
# of the "name" param of DBT_DEVTYPE_DEVICEINTERFACE
#
def _UnpackDEV_BROADCAST (lparam):
  if lparam == 0: return None
  hdr_format = "iii"
  hdr_size = struct.calcsize (hdr_format)
  hdr_buf = win32gui.PyGetMemory (lparam, hdr_size)
  size, devtype, reserved = struct.unpack ("iii", hdr_buf)
  # Due to x64 alignment issues, we need to use the full format string over
  # the entire buffer.  ie, on x64:
  # calcsize('iiiP') != calcsize('iii')+calcsize('P')
  buf = win32gui.PyGetMemory (lparam, size)

  extra = {}
  if devtype == win32con.DBT_DEVTYP_DEVICEINTERFACE:
    fmt = hdr_format + "16s"
    _, _, _, guid_bytes = struct.unpack (fmt, buf[:struct.calcsize(fmt)])
    extra['classguid'] = pywintypes.IID (guid_bytes, True)
    extra['name'] = ctypes.wstring_at (lparam + struct.calcsize(fmt))
  else:
    raise NotImplementedError("unknown device type %d" % (devtype,))
  return win32gui_struct.DEV_BROADCAST_INFO(devtype, **extra)
win32gui_struct.UnpackDEV_BROADCAST = _UnpackDEV_BROADCAST

class DeviceEventService (win32serviceutil.ServiceFramework):

  _svc_name_ = "DevEventHandler"
  _svc_display_name_ = "Device Event Handler"
  _svc_description_ = "Handle device notification events"

  def __init__(self, args):
    win32serviceutil.ServiceFramework.__init__ (self, args)
    self.hWaitStop = win32event.CreateEvent (None, 0, 0, None)
    #
    # Specify that we're interested in device interface
    # events for USB devices
    #
    filter = win32gui_struct.PackDEV_BROADCAST_DEVICEINTERFACE (
      GUID_DEVINTERFACE_USB_DEVICE
    )
    self.hDevNotify = win32gui.RegisterDeviceNotification (
      self.ssh, # copy of the service status handle
      filter,
      win32con.DEVICE_NOTIFY_SERVICE_HANDLE
    )

  #
  # Add to the list of controls already handled by the underlying
  # ServiceFramework class. We're only interested in device events
  #
  def GetAcceptedControls(self):
    rc = win32serviceutil.ServiceFramework.GetAcceptedControls (self)
    rc |= win32service.SERVICE_CONTROL_DEVICEEVENT
    return rc

  #
  # Handle non-standard service events (including our device broadcasts)
  # by logging to the Application event log
  #
  def SvcOtherEx(self, control, event_type, data):
    if control == win32service.SERVICE_CONTROL_DEVICEEVENT:
      info = win32gui_struct.UnpackDEV_BROADCAST(data)
      #
      # This is the key bit here where you'll presumably
      # do something other than log the event. Perhaps pulse
      # a named event or write to a secure pipe etc. etc.
      #
      if event_type == DBT_DEVICEARRIVAL:
        servicemanager.LogMsg (
          servicemanager.EVENTLOG_INFORMATION_TYPE,
          0xF000,
          ("Device %s arrived" % info.name, '')
        )
      elif event_type == DBT_DEVICEREMOVECOMPLETE:
        servicemanager.LogMsg (
          servicemanager.EVENTLOG_INFORMATION_TYPE,
          0xF000,
          ("Device %s removed" % info.name, '')
        )

  #
  # Standard stuff for stopping and running service; nothing
  # specific to device notifications
  #
  def SvcStop(self):
    self.ReportServiceStatus (win32service.SERVICE_STOP_PENDING)
    win32event.SetEvent (self.hWaitStop)

  def SvcDoRun(self):
    win32event.WaitForSingleObject (self.hWaitStop, win32event.INFINITE)
    servicemanager.LogMsg (
      servicemanager.EVENTLOG_INFORMATION_TYPE,
      servicemanager.PYS_SERVICE_STOPPED,
      (self._svc_name_, '')
    )

if __name__=='__main__':
  win32serviceutil.HandleCommandLine (DeviceEventService)
</snippet></ROW><ROW><id>4274469</id><snippet>mylist</snippet></ROW><ROW><id>4274469</id><snippet>zip</snippet></ROW><ROW><id>4274469</id><snippet> {% for x,y in zipped_list %} 
</snippet></ROW><ROW><id>4275009</id><snippet>st = os.stat(…)
du = st.st_blocks * st.st_blksize
</snippet></ROW><ROW><id>4275146</id><snippet>content</snippet></ROW><ROW><id>4275146</id><snippet>def getContent(file)

    content = {}

    for line in file:
</snippet></ROW><ROW><id>4275454</id><snippet>S</snippet></ROW><ROW><id>4275454</id><snippet>B</snippet></ROW><ROW><id>4275454</id><snippet>L</snippet></ROW><ROW><id>4275454</id><snippet>K = min(B, L div 5)</snippet></ROW><ROW><id>4275454</id><snippet>L - 5K</snippet></ROW><ROW><id>4275454</id><snippet>div</snippet></ROW><ROW><id>4275454</id><snippet>L-K</snippet></ROW><ROW><id>4275454</id><snippet>L-5K</snippet></ROW><ROW><id>4276130</id><snippet>/^(\d+[ \-]+\d+)$/</snippet></ROW><ROW><id>4276130</id><snippet>/^(\d+)[ \-]+(\d+)$/</snippet></ROW><ROW><id>4276273</id><snippet>from mechanize import Browser
b = Browser()
b.open("http://forum.ubuntu-it.org/index.php")
b.select_form(nr=0)
b["user"] = "johnconnor"
b["passwrd"] = "hellohello"
b.submit()

response = b.response().read()
if "Salve &lt;b&gt;johnconnor&lt;/b&gt;" in response:
    print "Logged in!"
</snippet></ROW><ROW><id>4276301</id><snippet>for root, subFolders, files in os.walk(rootdir):
    if '.svn' in subFolders:
      subFolders.remove('.svn')
</snippet></ROW><ROW><id>4277097</id><snippet>real = c_float
</snippet></ROW><ROW><id>4277188</id><snippet>movies = {}

a = 'BrokenCristals'

movies[a] = movieClass.shot()
movies[a].set_name(a)
# etc
</snippet></ROW><ROW><id>4277265</id><snippet>selected item, updated distribution</snippet></ROW><ROW><id>4277265</id><snippet>def random_distr(l):
    assert l # don't accept empty lists
    r = random.uniform(0, 1)
    s = 0
    for i in xrange(len(l)):
        item, prob = l[i]
        s += prob
        if s &gt;= r:
            l.pop(i) # remove the item from the distribution
            break
    else: # Might occur because of floating point inaccuracies
        l.pop()
    # update probabilities based on new domain
    d = 1 - prob 
    for i in xrange(len(l)):
        l[i][1] /= d
    return item, l

dist = [[1, 0.5], [2, 0.25], [3, 0.05], [4, 0.01], [5, 0.09], [6, 0.1]]
while dist:
    val, dist = random_distr(dist)
    print val
</snippet></ROW><ROW><id>4277686</id><snippet>;</snippet></ROW><ROW><id>4277686</id><snippet>{}</snippet></ROW><ROW><id>4277686</id><snippet>45%</snippet></ROW><ROW><id>4278385</id><snippet>import re

def ReplaceThreeOrMore(s):
    # pattern to look for three or more repetitions of any character, including
    # newlines.
    pattern = re.compile(r"(.)\1{2,}", re.DOTALL) 
    return pattern.sub(r"\1\1", s)
</snippet></ROW><ROW><id>4278385</id><snippet>import re

# look for a character followed by at least one repetition of itself.
pattern = re.compile(r"(\w)\1+")

# a function to perform the substitution we need:
def repl(matchObj):
   char = matchObj.group(1)
   return "%s%s" % (char, char)

&gt;&gt;&gt; pattern.sub(repl, "Foooooooooootball")
'Football'
</snippet></ROW><ROW><id>4278658</id><snippet>OSError: libvix.so: cannot open shared object file: No such file or directory
</snippet></ROW><ROW><id>4278773</id><snippet>py&gt; e=ldap.INVALID_SYNTAX("{'info': 'feeClass: value #0 invalid per syntax', 'desc': 'Invalid syntax'}")
py&gt; print e
{'info': 'feeClass: value #0 invalid per syntax', 'desc': 'Invalid syntax'}
py&gt; e.args
("{'info': 'feeClass: value #0 invalid per syntax', 'desc': 'Invalid syntax'}",)
</snippet></ROW><ROW><id>4279606</id><snippet>PyDict_MINSIZE</snippet></ROW><ROW><id>4279755</id><snippet>pyglet.gl.glTranslatef(width/2, height/2, 0)
</snippet></ROW><ROW><id>4279940</id><snippet>python manage.py shell
</snippet></ROW><ROW><id>4279940</id><snippet>&gt;&gt;&gt; import trial
</snippet></ROW><ROW><id>4279940</id><snippet>trial.myfunc()
</snippet></ROW><ROW><id>4279940</id><snippet>reload(trial)
</snippet></ROW><ROW><id>4280224</id><snippet>0</snippet></ROW><ROW><id>4280224</id><snippet>1</snippet></ROW><ROW><id>4280224</id><snippet>1</snippet></ROW><ROW><id>4280224</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>4280573</id><snippet>key</snippet></ROW><ROW><id>4280573</id><snippet>min()</snippet></ROW><ROW><id>4280573</id><snippet>Point</snippet></ROW><ROW><id>4280573</id><snippet>class Point(object):
    def get_closest_point(self, points):
        return min(points, key=self.compute_distance_to)
</snippet></ROW><ROW><id>4280573</id><snippet>loc</snippet></ROW><ROW><id>4280573</id><snippet>min(items, key= lambda item: p1.compute_distance_to(item.loc))
</snippet></ROW><ROW><id>4280702</id><snippet>reversed(formation)</snippet></ROW><ROW><id>4280702</id><snippet>formation</snippet></ROW><ROW><id>4280702</id><snippet>formation.reverse()</snippet></ROW><ROW><id>4280702</id><snippet>def solution(formation):
    return len([k for k in formation[formation.index(bCamel)+1:] if k == fCamel]) == 0
</snippet></ROW><ROW><id>4280702</id><snippet>bCamel</snippet></ROW><ROW><id>4280702</id><snippet>fCamel</snippet></ROW><ROW><id>4280702</id><snippet>&gt;&gt;&gt; k = ['F','F','B','B','F']
&gt;&gt;&gt; solution(k)
False
&gt;&gt;&gt; k = ['F','F','B','B','B']
&gt;&gt;&gt; solution(k)
True
&gt;&gt;&gt; k = ['F','F','B','F','F','B','B']
&gt;&gt;&gt; solution(k)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4280912</id><snippet>&gt;&gt;&gt; help(raw_input)
Help on built-in function raw_input in module __builtin__:

raw_input(...)
    raw_input([prompt]) -&gt; string

    Read a string from standard input.  The trailing newline is stripped.
    If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
    On Unix, GNU readline is used if enabled.  The prompt string, if given,
    is printed without a trailing newline before reading.
</snippet></ROW><ROW><id>4281577</id><snippet>&lt;ul&gt;
  &lt;li tal:repeat="customer customers"&gt;
    &lt;a href=""
       tal:attributes="href customer.url"
       tal:content="customer.name&gt;
      Sample customer name
    &lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>4281577</id><snippet>&lt;ul&gt;
{% for customer in customers %}
  &lt;li&gt;
    &lt;a href="{{ customer.url }}"&gt;
      {{ customer.name }}
    &lt;/a&gt;
  &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>4281709</id><snippet>first = [(1, text, text, 1, 2, 3), 
         (1, text, text, 1, 0, 3), ... (1054, text, text, 2, 2, 3)]
second = (1, 2, 3, 4, 5 ... 5412)
second_set = set(second)
data = [x for x in first if x[0] in second_set]
</snippet></ROW><ROW><id>4281802</id><snippet>str</snippet></ROW><ROW><id>4281802</id><snippet>bytes</snippet></ROW><ROW><id>4281802</id><snippet>ascii</snippet></ROW><ROW><id>4281802</id><snippet>latin-1</snippet></ROW><ROW><id>4281802</id><snippet>bytes</snippet></ROW><ROW><id>4281802</id><snippet>s = pickle.load(f, encoding='latin1')
b = s.encode('latin1')
print(zlib.decompress(b))
</snippet></ROW><ROW><id>4281869</id><snippet>00 * * * * myname env DISPLAY=:0 python ~/scripts/script.py
</snippet></ROW><ROW><id>4281891</id><snippet>False or True</snippet></ROW><ROW><id>4281891</id><snippet>and</snippet></ROW><ROW><id>4281891</id><snippet>or</snippet></ROW><ROW><id>4281891</id><snippet>def rm_hf2(x): return x != 'footer' and x != 'header'
</snippet></ROW><ROW><id>4281891</id><snippet>in</snippet></ROW><ROW><id>4281891</id><snippet>def rm_hf2(x): return x not in ('footer', 'header')
</snippet></ROW><ROW><id>4282016</id><snippet>numbers.Integral</snippet></ROW><ROW><id>4282016</id><snippet>int</snippet></ROW><ROW><id>4282016</id><snippet>isinstance( obj, numbers.Integral)</snippet></ROW><ROW><id>4282016</id><snippet>obj</snippet></ROW><ROW><id>4282016</id><snippet>&gt;&gt;&gt; isinstance(3, numbers.Integral)
True
&gt;&gt;&gt; isinstance(3.0, numbers.Integral)
False
&gt;&gt;&gt; isinstance(3+0j, numbers.Integral)
False
</snippet></ROW><ROW><id>4282016</id><snippet>numbers.Integral</snippet></ROW><ROW><id>4282389</id><snippet>extra_context ="EC_list": EmergencyContact.objects.all()</snippet></ROW><ROW><id>4282389</id><snippet>employee = ForeignKey(Employee, related_name='emergency_contacts')</snippet></ROW><ROW><id>4282389</id><snippet>def employee_detail(request, employee_id):
    return object_detail(
        request,
        queryset= Employee.objects.all(),
        extra_context ={"EC_list": EmergencyContact.objects.filter(employee__pk=employee_id)},
        object_id=employee_id)
</snippet></ROW><ROW><id>4282389</id><snippet>{% block title %} Employee details {% endblock %}
{% block heading1%}&lt;h1&gt; Employee's Details &lt;/h1&gt;{% endblock %}
{% block right_menu %}
   {% if object %}
      &lt;ul&gt;
        &lt;li&gt; Name:{{ object.full_name }}&lt;/li&gt;
        &lt;li&gt; Contact No.: {{ object.phone_number }}&lt;/li&gt;
        &lt;li&gt; Blood Group: {{ object.blood_type }}&lt;/li&gt;
        &lt;li&gt; Martial Status: {{ object.martial_status }}&lt;/li&gt;
        &lt;li&gt; Nationality: {{ object.about }}&lt;/li&gt;
        &lt;li&gt; Course: {{ object.course }}&lt;/li&gt;
        &lt;li&gt; Emergency Contacts: 
          &lt;ul&gt; 
            {% for EC in EC_list %} 
            &lt;li&gt; Name: {{ EC.name }} &lt;/li&gt;
            &lt;li&gt; Contact No.: {{ EC.contact }}&lt;/li&gt;
            &lt;li&gt; Relationship: {{ EC.relationship }}&lt;/li&gt;
            {% endfor %}
          &lt;/ul&gt;
        &lt;/li&gt;
     &lt;/ul&gt;
     {% else %}
         No Registered user present.
     {% endif %}
 {% endblock %}
</snippet></ROW><ROW><id>4282389</id><snippet>        &lt;li&gt; Emergency Contacts: 
          &lt;ul&gt; 
            {% for EC in object.emergency_contacts %} 
            &lt;li&gt; Name: {{ EC.name }} &lt;/li&gt;
            &lt;li&gt; Contact No.: {{ EC.contact }}&lt;/li&gt;
            &lt;li&gt; Relationship: {{ EC.relationship }}&lt;/li&gt;
            {% endfor %}
          &lt;/ul&gt;
        &lt;/li&gt;
</snippet></ROW><ROW><id>4282389</id><snippet>employee = ForeignKey(Employee, related_name='emergency_contacts')</snippet></ROW><ROW><id>4282389</id><snippet>def employee_detail(request, employee_id):
    return object_detail(request, queryset= Employee.objects.all(),
                  object_id=employee_id, template_object_name='employee')

------------------------------------------------------------------------------------------

        &lt;li&gt; Name: {{ employee.full_name }}&lt;/li&gt;
        &lt;li&gt; Emergency Contacts: 
          &lt;ul&gt; 
            {% for EC in employee.emergency_contacts %} 
            &lt;li&gt; Name: {{ EC.name }} &lt;/li&gt;
            &lt;li&gt; Contact No.: {{ EC.contact }}&lt;/li&gt;
            &lt;li&gt; Relationship: {{ EC.relationship }}&lt;/li&gt;
            {% endfor %}
          &lt;/ul&gt;
        &lt;/li&gt;
</snippet></ROW><ROW><id>4282853</id><snippet>post_save</snippet></ROW><ROW><id>4282853</id><snippet>Group</snippet></ROW><ROW><id>4283795</id><snippet>#! /bin/env python
import hashlib
def filemd5(filename, block_size=2**20):
    f = open(filename)
    md5 = hashlib.md5()
    while True:
        data = f.read(block_size)
        if not data:
            break
        md5.update(data)
    f.close()
    return md5.digest()

if __name__ == "__main__":
    a = filemd5('/home/neo/todo')
    b = filemd5('/home/neo/todo2')
    print(a == b)
</snippet></ROW><ROW><id>4283795</id><snippet>&gt;&gt;&gt; import filecmp
&gt;&gt;&gt; filecmp.cmp('undoc.rst', 'undoc.rst')
True
&gt;&gt;&gt; filecmp.cmp('undoc.rst', 'index.rst')
False
</snippet></ROW><ROW><id>4283887</id><snippet>from module1 import A
</snippet></ROW><ROW><id>4283887</id><snippet>from datetime import timedelta
</snippet></ROW><ROW><id>4283887</id><snippet>if __name__ == "__main__":
  # Put code that should only run when the module
  # is used as a stand-alone program, here.
  # It will not run when the module is imported.
</snippet></ROW><ROW><id>4284697</id><snippet>list</snippet></ROW><ROW><id>4284697</id><snippet>tuple</snippet></ROW><ROW><id>4284697</id><snippet>tuple</snippet></ROW><ROW><id>4284697</id><snippet>' '.join(['%d@%d' % (t[0],t[1]) for t in l])
</snippet></ROW><ROW><id>4284697</id><snippet>' '.join(['%d@%d' % t for t in l])
</snippet></ROW><ROW><id>4284697</id><snippet>' '.join(map(lambda t: '%d@%d' % t, l))
</snippet></ROW><ROW><id>4284697</id><snippet>l</snippet></ROW><ROW><id>4284697</id><snippet>list</snippet></ROW><ROW><id>4284697</id><snippet>' '</snippet></ROW><ROW><id>4284697</id><snippet>join</snippet></ROW><ROW><id>4284764</id><snippet>product()</snippet></ROW><ROW><id>4284764</id><snippet>itertools</snippet></ROW><ROW><id>4284788</id><snippet>startime = datetime.now()
res = opener.open(url, timeout=timeout)
contents = ''
for item in res:
  contents += item
  if (datetime.now() - starttime).seconds &gt; timeout:
    raise IOError('timeout')
</snippet></ROW><ROW><id>4284867</id><snippet>def find_gaps(ids):
    """Generate the gaps in the list of ids."""
    j = 1
    for id_i in sorted(ids):
        while True:
            id_j = '%07d' % j
            j += 1
            if id_j &gt;= id_i:
                break
            yield id_j

&gt;&gt;&gt; list(find_gaps(["0000001", "0000003", "0000006"]))
['0000002', '0000004', '0000005']
</snippet></ROW><ROW><id>4284867</id><snippet>sorted</snippet></ROW><ROW><id>4285211</id><snippet>&gt;&gt;&gt; ParseNestedParen('(a)(b)(c)', 0)
['a)(b)(c']
&gt;&gt;&gt; nested_paren.ParseNestedParen('(a)(b)(c)', 1)
['b']
&gt;&gt;&gt; nested_paren.ParseNestedParen('(a)(b)(c)', 2)
['']
</snippet></ROW><ROW><id>4285211</id><snippet>fail</snippet></ROW><ROW><id>4285211</id><snippet>re.findall</snippet></ROW><ROW><id>4285211</id><snippet>&gt;&gt;&gt; ParseNestedParen(')' * 1000, 1)
RuntimeError: maximum recursion depth exceeded while calling a Python object
</snippet></ROW><ROW><id>4285211</id><snippet>def parenthetic_contents(string):
    """Generate parenthesized contents in string as pairs (level, contents)."""
    stack = []
    for i, c in enumerate(string):
        if c == '(':
            stack.append(i)
        elif c == ')' and stack:
            start = stack.pop()
            yield (len(stack), string[start + 1: i])

&gt;&gt;&gt; list(parenthetic_contents('(a(b(c)(d)e)(f)g)'))
[(2, 'c'), (2, 'd'), (1, 'b(c)(d)e'), (1, 'f'), (0, 'a(b(c)(d)e)(f)g')]
</snippet></ROW><ROW><id>4285219</id><snippet>interests</snippet></ROW><ROW><id>4285219</id><snippet>type(ResultDict)</snippet></ROW><ROW><id>4285846</id><snippet>send_mail_to_admins()</snippet></ROW><ROW><id>4286104</id><snippet>file = str(QFileDialog.getExistingDirectory(self, "Select Directory"))
</snippet></ROW><ROW><id>4286486</id><snippet>{% with %}</snippet></ROW><ROW><id>4286486</id><snippet>{% with v.docs|first as first_doc %}{{ first_doc.id }}{% endwith %}
</snippet></ROW><ROW><id>4286868</id><snippet>print</snippet></ROW><ROW><id>4286868</id><snippet>my_out_file = open("/home/mytrace.txt", "w")
</snippet></ROW><ROW><id>4286868</id><snippet>print "%s(%d): %s" % (bname, lineno,
                      linecache.getline(filename, lineno)),
</snippet></ROW><ROW><id>4286868</id><snippet>print &gt;&gt;my_out_file, "%s(%d): %s" % (bname, lineno,
                      linecache.getline(filename, lineno)),
</snippet></ROW><ROW><id>4286907</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib as mpl
fig = plt.figure()
ax = fig.add_subplot(111)

rect = patches.Rectangle((0.0120,0),0.1,1000)

t_start = ax.transData
t = mpl.transforms.Affine2D().rotate_deg(-45)
t_end = t_start + t

rect.set_transform(t_end)

print repr(t_start)
print repr(t_end)
ax.add_patch(rect)

plt.show()
</snippet></ROW><ROW><id>4286937</id><snippet>self.__setattr__</snippet></ROW><ROW><id>4286937</id><snippet>__setattr__</snippet></ROW><ROW><id>4286937</id><snippet>class settingsFile(object):

    def __init__(self):
        ...
        # Return all the "config" section as a list and convert to a dictionary
        object.__setattr__(self, 'configuration', dict(configuration.items("config")))
</snippet></ROW><ROW><id>4287020</id><snippet>from leaf import *
</snippet></ROW><ROW><id>4287020</id><snippet>$ cat level1/level2/__init__.py
from .leaf import Leaf
$ cat level1/level2/leaf.py
class Leaf:
    def __init__(self):
        print("hello")
$ cat test.py
from level1.level2 import *
x = Leaf()
$ python test.py
hello
</snippet></ROW><ROW><id>4287140</id><snippet>xrange()</snippet></ROW><ROW><id>4287140</id><snippet>__getitem__()</snippet></ROW><ROW><id>4287140</id><snippet>__len__()</snippet></ROW><ROW><id>4287140</id><snippet>population</snippet></ROW><ROW><id>4287140</id><snippet>random.sample()</snippet></ROW><ROW><id>4287140</id><snippet>random.sample()</snippet></ROW><ROW><id>4287140</id><snippet>len()</snippet></ROW><ROW><id>4287140</id><snippet>k</snippet></ROW><ROW><id>4287140</id><snippet>set</snippet></ROW><ROW><id>4287140</id><snippet>n</snippet></ROW><ROW><id>4287140</id><snippet>k</snippet></ROW><ROW><id>4287140</id><snippet>selected = []
for i in xrange(n):
    perm = nextPermutation()
    if random.random() &lt; float(k-len(selected))/(n-i):
        selected.append(perm)
</snippet></ROW><ROW><id>4287140</id><snippet>k</snippet></ROW><ROW><id>4287222</id><snippet>tmp = self.field.toPlainText()
print 'field.toPlainText: ', tmp

codec0 = QtCore.QTextCodec.codecForName("UTF-16");
codec1 = QtCore.QTextCodec.codecForName("ISO 8859-2");  

print 'UTF-16: ', unicode(codec0.fromUnicode(tmp), 'UTF-16')
print 'ISO 8859-2: ', unicode(codec1.fromUnicode(tmp), 'ISO 8859-2')
</snippet></ROW><ROW><id>4287233</id><snippet>sorted(the_list, key = lambda x: int(x.split("_")[1]))
</snippet></ROW><ROW><id>4287249</id><snippet>sum</snippet></ROW><ROW><id>4287249</id><snippet>sum</snippet></ROW><ROW><id>4287249</id><snippet>sum_foo</snippet></ROW><ROW><id>4287249</id><snippet>_sum</snippet></ROW><ROW><id>4287249</id><snippet>def f():
        y()
f()  
def y():
        print 'Y called'
</snippet></ROW><ROW><id>4287249</id><snippet>NameError: global name 'y' is not defined
</snippet></ROW><ROW><id>4287249</id><snippet>y</snippet></ROW><ROW><id>4287249</id><snippet>y</snippet></ROW><ROW><id>4287249</id><snippet>f()</snippet></ROW><ROW><id>4287249</id><snippet>def f():
        y()    
def y():
        print 'Y called'            
f() 
</snippet></ROW><ROW><id>4287249</id><snippet>func_name()</snippet></ROW><ROW><id>4287249</id><snippet>return func</snippet></ROW><ROW><id>4287249</id><snippet>sum</snippet></ROW><ROW><id>4287249</id><snippet>subtraction</snippet></ROW><ROW><id>4287249</id><snippet>def sum():
    return 8 + 4
</snippet></ROW><ROW><id>4287249</id><snippet>def sum():
    print 8 + 4
</snippet></ROW><ROW><id>4287610</id><snippet>&lt;Key&gt;</snippet></ROW><ROW><id>4287610</id><snippet>&lt;KeyRelease&gt;</snippet></ROW><ROW><id>4287658</id><snippet>np.searchsorted</snippet></ROW><ROW><id>4287658</id><snippet>np.searchsorted</snippet></ROW><ROW><id>4287658</id><snippet>import numpy as np
quarters = np.array([200712, 200803, 200806, 200809, 200812, 200903])
months = np.arange(200801, 200813)
loc = np.searchsorted(months, quarters)
</snippet></ROW><ROW><id>4287658</id><snippet>np.searchsorted</snippet></ROW><ROW><id>4287658</id><snippet>valid = (quarters &lt;= months.max()) &amp; (quarters &gt;= months.min())
loc = loc[valid]
</snippet></ROW><ROW><id>4287979</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; email_string = "az &lt;az@example.com&gt;"
&gt;&gt;&gt; re.findall(r'&lt;([^&gt;]+)&gt;', email_string)
['az@example.com']
</snippet></ROW><ROW><id>4287979</id><snippet>&gt;&gt;&gt; email_string2 = "az &lt;az@example.com&gt;, bz &lt;bz@example.com&gt;"
&gt;&gt;&gt; re.findall(r'&lt;([^&gt;]+)&gt;', email_string2)
['az@example.com', 'bz@example.com']
</snippet></ROW><ROW><id>4287979</id><snippet>&gt;&gt;&gt; re.findall(r'&lt;(.*)&gt;', email_string2)
['az@example.com&gt;, bz &lt;bz@example.com'] # matches too much
</snippet></ROW><ROW><id>4287979</id><snippet>&gt;&gt;&gt; email_string[email_string.find('&lt;')+1:-1]
'az@example.com'
</snippet></ROW><ROW><id>4287979</id><snippet>&gt;&gt;&gt; email_strings = email_string2.split(',')
&gt;&gt;&gt; for s in email_strings:
...   s[s.find('&lt;')+1:-1]
...
'az@example.com'
'bz@example.com'
</snippet></ROW><ROW><id>4288008</id><snippet># settings.py
AUTH_PROFILE_MODULE = 'myapp.UserProfile'

# myapp/models.py
class UserProfile(models.Model):
    CLASS_CHOICES = (
        (0, 'Yellow User'),
        (1, 'Green User'),
    )
    user_class = models.IntegerField(choices=CLASS_CHOICES)
    user = models.OneToOneField(User)

class Interaction(models.Model):
    u1 = models.ForeignKey(User, related_name='u1s')
    u2 = models.ForeignKey(User, related_name='u2s')
    date = models.DateField()
</snippet></ROW><ROW><id>4288521</id><snippet>&gt;&gt;&gt; rows, cols, centerx, centery = 6, 6, 2.5, 2.5
&gt;&gt;&gt; [p[1:] for p in sorted((((x - centerx) ** 2 + (y - centery) ** 2, x, y)
...                         for x in xrange(rows) for y in xrange(cols)))]
[(2, 2), (2, 3), (3, 2), (3, 3), (1, 2), (1, 3), 
 (2, 1), (2, 4), (3, 1), (3, 4), (4, 2), (4, 3), 
 (1, 1), (1, 4), (4, 1), (4, 4), (0, 2), (0, 3),
 (2, 0), (2, 5), (3, 0), (3, 5), (5, 2), (5, 3), 
 (0, 1), (0, 4), (1, 0), (1, 5), (4, 0), (4, 5),
 (5, 1), (5, 4), (0, 0), (0, 5), (5, 0), (5, 5)]
</snippet></ROW><ROW><id>4288761</id><snippet>getChild()</snippet></ROW><ROW><id>4288761</id><snippet>isLeaf=True</snippet></ROW><ROW><id>4288797</id><snippet>echo=True</snippet></ROW><ROW><id>4288797</id><snippet>sessionmaker</snippet></ROW><ROW><id>4288797</id><snippet>logging</snippet></ROW><ROW><id>4288809</id><snippet>os.path.join(*parts)
</snippet></ROW><ROW><id>4288817</id><snippet>mystring = "a1234f"
data = list(mystring)
</snippet></ROW><ROW><id>4288835</id><snippet>readfile = open('file_being_read.dat').read()
</snippet></ROW><ROW><id>4288835</id><snippet>readfile = open('file_being_read.dat')
</snippet></ROW><ROW><id>4288835</id><snippet>str.split</snippet></ROW><ROW><id>4288835</id><snippet>&gt;&gt;&gt; line
'249 LEU 89.81637573242188\n'
&gt;&gt;&gt; line.split()
['249', 'LEU', '89.81637573242188']
</snippet></ROW><ROW><id>4288835</id><snippet>int</snippet></ROW><ROW><id>4288835</id><snippet>float</snippet></ROW><ROW><id>4288835</id><snippet>&gt;&gt;&gt; vals[0]
'249'
&gt;&gt;&gt; int(vals[0])
249
&gt;&gt;&gt; vals[2]
'89.81637573242188'
&gt;&gt;&gt; float(vals[2])
89.816375732421875
</snippet></ROW><ROW><id>4288835</id><snippet>converted</snippet></ROW><ROW><id>4288835</id><snippet>datum = int(vals[0]), vals[1], float(vals[2])
&gt;&gt;&gt; datum
(249, 'LEU', 89.816375732421875)
</snippet></ROW><ROW><id>4288835</id><snippet>def parsa_lista(file_to_read):
    converted = []
    for line in file_to_read:
        vals = line.split()
        datum = int(vals[0]), vals[1], float(vals[2])
        converted.append(datum)
    return converted
</snippet></ROW><ROW><id>4288978</id><snippet>import sys

sys.modules[__name__].__file__
</snippet></ROW><ROW><id>4289086</id><snippet>import os
import sys

biggest = ("", -1)
directory = sys.argv[1]

print "Searching", directory

def search(dir):
    global biggest
    for item in os.listdir(dir):
        item = dir + "/" + item
        if os.path.isdir(item):
            search(item)
        else:
            itemsize = os.path.getsize(item)
            if itemsize &gt; biggest[1]:
                    biggest = (item, itemsize)

search(directory)
if biggest[1] != -1:
    print "Found: ", biggest
    # Do something with biggest
</snippet></ROW><ROW><id>4289231</id><snippet>glLoadIdentity()</snippet></ROW><ROW><id>4289231</id><snippet>glLoadIdentity()</snippet></ROW><ROW><id>4289458</id><snippet>ClothingTop</snippet></ROW><ROW><id>4289458</id><snippet>ModelForm</snippet></ROW><ROW><id>4289458</id><snippet>buttons_clean()</snippet></ROW><ROW><id>4289458</id><snippet>ClothingTop</snippet></ROW><ROW><id>4289458</id><snippet>ModelAdmin</snippet></ROW><ROW><id>4289458</id><snippet>buttons</snippet></ROW><ROW><id>4289458</id><snippet>ButtonsField(models.PositiveSmallIntegerField):

    def validate(self, value, model_instance):
        # here we get the buttons field value and can get the type value
        # exactly what we need!

        type = getattr(model_instance, 'type')

        if type == SHIRT and not value:
            raise ValidationError('Type set to shirt, but buttons value is empty')

        super(self, ButtonsField).validate(value, model_instance)
</snippet></ROW><ROW><id>4289458</id><snippet>ClothingTop</snippet></ROW><ROW><id>4289489</id><snippet>MemoryError</snippet></ROW><ROW><id>4289489</id><snippet>input_file_names = ["A1_B1_100000.txt", "A2_B2_100000.txt",
                    "A1_B2_100000.txt", "A2_B1_100000.txt"]

GROUP_SIZE = 4
file_write = open("average_generations.txt", 'w')
mutation_average = open("mutation_average", 'w')

for file_name in input_file_names:
    with open(file_name, 'r') as input_file:
        print "processing file", file_name
        count = 0
        totals = None
        for line in input_file:
            fields = line.split('\t')
            try:
                fields.remove('\n') # remove empty field (why)?
            except ValueError:
                pass
            if not totals: # first line?
                totals = map(float, fields)
            else:
                for i in xrange(len(fields)):
                    totals[i] += float(fields[i])
            count += 1

        averages = [total/count for total in totals]

        print_counter = 0
        for average in averages:
            print average
            if print_counter % GROUP_SIZE == 0:
                file_write.write(str(average)+'\n')
            print_counter += 1

file_write.write('\n')
file_write.close()

mutation_average.close() # ????
</snippet></ROW><ROW><id>4289557</id><snippet>&gt;&gt;&gt; str = "h3110 23 cat 444.4 rabbit 11 2 dog"
&gt;&gt;&gt; [int(s) for s in str.split() if s.isdigit()]
[23, 11, 2]
</snippet></ROW><ROW><id>4289557</id><snippet>python -m timeit -s "str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000" "[s for s in str.split() if s.isdigit()]"
100 loops, best of 3: 2.84 msec per loop

python -m timeit -s "import re" "str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000" "re.findall('\\b\\d+\\b', str)"
100 loops, best of 3: 5.66 msec per loop
</snippet></ROW><ROW><id>4289604</id><snippet>__file__</snippet></ROW><ROW><id>4289604</id><snippet>os.path.dirname(api.__file__)
</snippet></ROW><ROW><id>4289604</id><snippet>os.getcwd()</snippet></ROW><ROW><id>4289681</id><snippet>y = ['a', 'b', 'c', 'd']
x = [1,2,3]

return sum([[x, a] for a in y],[])
</snippet></ROW><ROW><id>4289681</id><snippet>__add__</snippet></ROW><ROW><id>4289681</id><snippet>sum()</snippet></ROW><ROW><id>4289681</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>4289681</id><snippet>from itertools import *

return chain.from_iterable((x,a) for a in y)
</snippet></ROW><ROW><id>4289681</id><snippet>return itertools.chain.from_iterable(itertools.izip(itertools.repeat(x),y))
</snippet></ROW><ROW><id>4289681</id><snippet>return reduce(list.__add__,([x, a] for a in y))
</snippet></ROW><ROW><id>4289681</id><snippet>map</snippet></ROW><ROW><id>4289681</id><snippet>list.extend</snippet></ROW><ROW><id>4289681</id><snippet>l = []
map(l.extend,[[x, a] for a in y])
return l
</snippet></ROW><ROW><id>4289681</id><snippet>return [ y[i/2] if i%2 else x for i in range(len(y)*2)]
</snippet></ROW><ROW><id>4289945</id><snippet># python startup file 
import readline 
import rlcompleter 
import atexit 
import os 
# tab completion 
readline.parse_and_bind('tab: complete') 
# history file 
histfile = os.path.join(os.environ['HOME'], '.pythonhistory') 
try: 
    readline.read_history_file(histfile) 
except IOError: 
    pass 
atexit.register(readline.write_history_file, histfile) 
del os, histfile, readline, rlcompleter
</snippet></ROW><ROW><id>4290057</id><snippet>bind</snippet></ROW><ROW><id>4290057</id><snippet>Elixir</snippet></ROW><ROW><id>4290057</id><snippet>from elixir import metadata
metadata.bind = 'sqlite:///your_database_file.sqlite'
metadata.bind.echo = True
</snippet></ROW><ROW><id>4290101</id><snippet>Project [Menu] -&gt; Properties -&gt; Languages -&gt; Python -&gt; Additional Python Import Directories</snippet></ROW><ROW><id>4290214</id><snippet>x = rnorm( n = 100, mean = 0, sd = 1 )
</snippet></ROW><ROW><id>4290214</id><snippet>library(MASS)
params = fitdistr( x, "normal" )
print( params )
</snippet></ROW><ROW><id>4290214</id><snippet>      mean           sd     
  -0.17922360    1.01636446 
 ( 0.10163645) ( 0.07186782)
</snippet></ROW><ROW><id>4290214</id><snippet>print( params$loglik )
[1] -139.5772
</snippet></ROW><ROW><id>4290214</id><snippet>x = x[ x &gt;= 0 ]

distributions = c("normal","exponential")

for ( dist in distributions ) {
    print( paste( "fitting parameters for ", dist ) )
    params = fitdistr( x, dist )
    print( params )
    print( summary( params ) )
    print( params$loglik )
}
</snippet></ROW><ROW><id>4290214</id><snippet>[1] "fitting parameters for  normal"
      mean          sd    
  0.72021836   0.54079027 
 (0.07647929) (0.05407903)
         Length Class  Mode   
estimate 2      -none- numeric
sd       2      -none- numeric
n        1      -none- numeric
loglik   1      -none- numeric
[1] -40.21074
[1] "fitting parameters for  exponential"
     rate  
  1.388468 
 (0.196359)
         Length Class  Mode   
estimate 1      -none- numeric
sd       1      -none- numeric
n        1      -none- numeric
loglik   1      -none- numeric
[1] -33.58996
</snippet></ROW><ROW><id>4290305</id><snippet>MySQLdb</snippet></ROW><ROW><id>4290305</id><snippet>setup_posix.py</snippet></ROW><ROW><id>4290305</id><snippet>mysql_build</snippet></ROW><ROW><id>4290305</id><snippet>MySQLdb</snippet></ROW><ROW><id>4290305</id><snippet>-arch i386</snippet></ROW><ROW><id>4290305</id><snippet>MacPorts</snippet></ROW><ROW><id>4290393</id><snippet># create some data
x = np.linspace(-np.pi,np.pi,100)
y = np.cos(2.5*x)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,y, mfc='orange', mec='orange', marker='.')

# using 'spines', new in Matplotlib 1.0
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')
ax.spines['left'].set_smart_bounds(True)
ax.spines['bottom'].set_smart_bounds(True)
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

ax.axhline(linewidth=2, color='blue')
ax.axvline(linewidth=2, color='blue')
show()
</snippet></ROW><ROW><id>4290428</id><snippet>i = 0
while i &lt; 10:
   if i == 3:
       i = 7
   print(i)
   i += 1
</snippet></ROW><ROW><id>4290428</id><snippet>for i in range(10):
   if 2 &lt; i &lt; 7:
       continue
   print(i)
</snippet></ROW><ROW><id>4290730</id><snippet>sys.stdout.buffer.write(bytes_)
</snippet></ROW><ROW><id>4290730</id><snippet>detach</snippet></ROW><ROW><id>4290730</id><snippet>tempfile.TemporaryFile().write(bytes_)
</snippet></ROW><ROW><id>4290730</id><snippet>open('filename', 'wb').write(bytes_)
</snippet></ROW><ROW><id>4290730</id><snippet>from io import BytesIO
BytesIO().write(bytes_)
</snippet></ROW><ROW><id>4290730</id><snippet>BytesIO</snippet></ROW><ROW><id>4290730</id><snippet>StringIO</snippet></ROW><ROW><id>4290730</id><snippet>write</snippet></ROW><ROW><id>4290803</id><snippet>sudo tasksel --section server
</snippet></ROW><ROW><id>4290803</id><snippet>sudo apt-get install python-django python-django-doc
</snippet></ROW><ROW><id>4291222</id><snippet>bytearray</snippet></ROW><ROW><id>4291222</id><snippet>bytearray</snippet></ROW><ROW><id>4291222</id><snippet>x = bytearray(len(secret)*8)   # creates an array of zero bytes
i = 0
for secByte in secret:
    for j in range(8):
        x[i] = setBit(plain[i], 0, getBit(secByte, j))
        i += 1
</snippet></ROW><ROW><id>4291260</id><snippet>cached_attr</snippet></ROW><ROW><id>4291260</id><snippet>my_first_egg = Egg.objects.get(pk=1)
my_related_object = RelatedObject.objects.get(egg__pk=1)
my_second_egg = my_related_object.egg
</snippet></ROW><ROW><id>4291260</id><snippet>my_first_egg</snippet></ROW><ROW><id>4291260</id><snippet>my_second_egg</snippet></ROW><ROW><id>4291260</id><snippet>&gt;&gt;&gt; my_first_egg.pk == my_second_egg.pk
True
&gt;&gt;&gt; my_first_egg is my_second_egg
False
</snippet></ROW><ROW><id>4291260</id><snippet>my_first_egg</snippet></ROW><ROW><id>4291260</id><snippet>my_second_egg</snippet></ROW><ROW><id>4291761</id><snippet>outputdata = {}
for id, stuff in jsonData.iteritems():
    outputdata[id.encode("ascii")] = stuff[u"name"]
</snippet></ROW><ROW><id>4291831</id><snippet>QThread</snippet></ROW><ROW><id>4291831</id><snippet>run()</snippet></ROW><ROW><id>4291831</id><snippet>exec_()</snippet></ROW><ROW><id>4292123</id><snippet>rstrip</snippet></ROW><ROW><id>4292123</id><snippet>s = s.rstrip()
</snippet></ROW><ROW><id>4292127</id><snippet>mimetypes.init()
</snippet></ROW><ROW><id>4292167</id><snippet>class Formation(object):
    """A formation of camels."""
    def __init__(self, camels, parent):
        self.camels = camels
        self.current_distance = 0
        self.parent = parent

    @property
    def total_distance(self):
        """The total distance."""
        return self.current_distance + self.heuristic
</snippet></ROW><ROW><id>4292167</id><snippet>@property</snippet></ROW><ROW><id>4292167</id><snippet>GetDistance()</snippet></ROW><ROW><id>4292167</id><snippet>SetDistance</snippet></ROW><ROW><id>4292167</id><snippet>theFormation.total_distance</snippet></ROW><ROW><id>4292167</id><snippet>()</snippet></ROW><ROW><id>4292167</id><snippet>def solution(formation):
    return len([i for i in formation[formation.index(fCamel) + 1:] if i == bCamel]) == 0
</snippet></ROW><ROW><id>4292167</id><snippet>Formation</snippet></ROW><ROW><id>4292167</id><snippet>    @property
    def solution(self):
        for camel in self.camels[self.camels.index(fCamel) + 1:]:
            if camel == bCamel:
                return False
        return True
</snippet></ROW><ROW><id>4292167</id><snippet>len()</snippet></ROW><ROW><id>4292167</id><snippet>heuristic</snippet></ROW><ROW><id>4292167</id><snippet>else: pass</snippet></ROW><ROW><id>4292167</id><snippet>    @property
    def heuristic(self):
        fCamels = 0
        score = 0
        for camel in self.camels:
            if camel == fCamel:
                fCamels += 1
            elif camel == bCamel:
                score += fCamels
        return score
</snippet></ROW><ROW><id>4292167</id><snippet>getneighbors</snippet></ROW><ROW><id>4292167</id><snippet>genn</snippet></ROW><ROW><id>4292167</id><snippet>list(...)</snippet></ROW><ROW><id>4292167</id><snippet>from copy import copy</snippet></ROW><ROW><id>4292167</id><snippet>copy</snippet></ROW><ROW><id>4292167</id><snippet>deep_copy</snippet></ROW><ROW><id>4292167</id><snippet>copy</snippet></ROW><ROW><id>4292167</id><snippet>    def copy_swapping_camels(self, i, j):
        newCamels = copy(self.camels)
        newCamels[i], newCamels[j] = newCamels[j], newCamels[i]
        return Formation(newCamels, self)

    def get_neighbors(self):
        igap = self.camels.index(gap)
        result = [[]]

        if igap &gt; 0:
            result.append(self.copy_swapping_camels(igap, igap - 1))
        if igap &gt; 1:
            result.append(self.copy_swapping_camels(igap, igap - 2))
        if igap &lt; len(self.camels) - 1:
            result.append(self.copy_swapping_camels(igap, igap + 1))
        if igap &lt; len(self.camels) - 2:
            result.append(self.copy_swapping_camels(igap, igap + 2))

        return result
</snippet></ROW><ROW><id>4292342</id><snippet>bar</snippet></ROW><ROW><id>4292342</id><snippet>x</snippet></ROW><ROW><id>4292342</id><snippet>foo</snippet></ROW><ROW><id>4292342</id><snippet>x</snippet></ROW><ROW><id>4292417</id><snippet>class MyTest(unittest.TestCase):
    def __init__(self, *args, **kwargs):
         super(MyTest, self).__init__(*args, **kwargs)
         settings.TESTING = True
</snippet></ROW><ROW><id>4292705</id><snippet>re</snippet></ROW><ROW><id>4292705</id><snippet>re</snippet></ROW><ROW><id>4292705</id><snippet>re</snippet></ROW><ROW><id>4293126</id><snippet>import sys
</snippet></ROW><ROW><id>4293126</id><snippet>while True:
    print(wipe+time.asctime(), end='')
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>4293226</id><snippet>userEmail</snippet></ROW><ROW><id>4293226</id><snippet>for</snippet></ROW><ROW><id>4293226</id><snippet>for v in scott.venues:
    self.response.out.write(scott.userEmail)
    self.response.out.write(v.venue)
</snippet></ROW><ROW><id>4293226</id><snippet>query = User.all()
query.filter("userEmail =", "scott@example.com")
results=query.fetch(1)
scott=results[0]
</snippet></ROW><ROW><id>4293226</id><snippet>scott.venues</snippet></ROW><ROW><id>4293226</id><snippet>db.ReferenceProperty</snippet></ROW><ROW><id>4293226</id><snippet>someuser.venues</snippet></ROW><ROW><id>4293226</id><snippet>somevenue.user</snippet></ROW><ROW><id>4293245</id><snippet>DEBUG=False</snippet></ROW><ROW><id>4293245</id><snippet>django.db.connection.queries</snippet></ROW><ROW><id>4293245</id><snippet>DEBUG=True</snippet></ROW><ROW><id>4293245</id><snippet>$ ./manage.py shell
&gt; from django.conf import settings
&gt; settings.DEBUG
True
&gt; settings.DEBUG=False
&gt; # django.db.connection.queries will now remain empty / []
</snippet></ROW><ROW><id>4293245</id><snippet>from multiprocessing import Process

for filename in files_to_process:
    p = Process(target=process_file, args=(filename,))
    p.start()
    p.join()
</snippet></ROW><ROW><id>4293382</id><snippet>if pie == 1 or pie == 2
...
if pie in (1, 2)
...
</snippet></ROW><ROW><id>4293388</id><snippet>class CategoryManager(Manager):
    def create_category(category, title):
        t = Title.objects.get_or_create(title=title)
        return self.create(title=t)

class Category(models.Model):
    title = models.ForeignKey(Title, verbose_name="Title")
    objects = CategoryManager()
</snippet></ROW><ROW><id>4293463</id><snippet>&gt;&gt;&gt; x=256
&gt;&gt;&gt; x is 256
True
&gt;&gt;&gt; x=1024
&gt;&gt;&gt; x is 1024
False

[NOTE: 'is' tests for object identity (same ID)]
</snippet></ROW><ROW><id>4293463</id><snippet>==</snippet></ROW><ROW><id>4293503</id><snippet>urlsplit()</snippet></ROW><ROW><id>4293503</id><snippet>parse_qsl()</snippet></ROW><ROW><id>4293503</id><snippet>parse_qs()</snippet></ROW><ROW><id>4293503</id><snippet>urlencode()</snippet></ROW><ROW><id>4293503</id><snippet>urlunsplit()</snippet></ROW><ROW><id>4294050</id><snippet>ForeignKey</snippet></ROW><ROW><id>4294050</id><snippet>myClass</snippet></ROW><ROW><id>4294103</id><snippet>for n in range(6,0,-1):
    print n
# prints [6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>4294162</id><snippet>tkinter</snippet></ROW><ROW><id>4294162</id><snippet>createWidgets</snippet></ROW><ROW><id>4294162</id><snippet>self.foo</snippet></ROW><ROW><id>4294162</id><snippet>&gt;&gt;&gt; class Foo:
...     def __init__(self):
...             bar = "baz"
...
&gt;&gt;&gt; class Bar:
...     def __init__(self):
...             self.bar = "baz"
...
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: Foo instance has no attribute 'bar'
&gt;&gt;&gt; bar = Bar()
&gt;&gt;&gt; bar.bar
'baz'
</snippet></ROW><ROW><id>4294162</id><snippet>Canvas</snippet></ROW><ROW><id>4294162</id><snippet>myCan</snippet></ROW><ROW><id>4294162</id><snippet>myCan</snippet></ROW><ROW><id>4294162</id><snippet>self.myCan</snippet></ROW><ROW><id>4294162</id><snippet>AttributeError</snippet></ROW><ROW><id>4294310</id><snippet>class foo(functions.foo):
    # All of the methods that you want to add go here.
</snippet></ROW><ROW><id>4294310</id><snippet># main.py
import functions

# All of the old stuff that was in main.foo is now in this class
class fooBase(asd.fgh):
    def qwerty(self):
        print 'qwerty'

# Now create a class that has methods and attributes of both classes
class foo(FooBase, functions.foo): # Methods from FooBase take precedence
    pass
</snippet></ROW><ROW><id>4294310</id><snippet>class foo(functions.foo, FooBase): # Methods from functions.foo take precedence      
    pass
</snippet></ROW><ROW><id>4294490</id><snippet>sum(1 for i in x if i)
</snippet></ROW><ROW><id>4294490</id><snippet>sum(sum(1 for i in row if i) for row in rows)
</snippet></ROW><ROW><id>4294490</id><snippet>sum(1 for row in rows
      for i in row if i)
</snippet></ROW><ROW><id>4294518</id><snippet>&gt;&gt;&gt; ' '.join(' '.join(nltk.tag.tuple2str(item) for item in sent) for sent in tpl)
'This/V is/V one/NUM sentence/NN ./. And/CNJ This/V is/V another/DET one/NUM'
</snippet></ROW><ROW><id>4294518</id><snippet>&gt;&gt;&gt; [' '.join([nltk.tag.tuple2str(item) for item in sent]) for sent in tpl]
['This/V is/V one/NUM sentence/NN ./.', 'And/CNJ This/V is/V another/DET one/NUM']
</snippet></ROW><ROW><id>4294518</id><snippet>&gt;&gt;&gt; [[nltk.tag.str2tuple(re.sub('/NUM', '/N', w)) for w in s.split()] for s in t0]
[[('This', 'V'), ('is', 'V'), ('one', 'N'), ('sentence', 'NN'), ('.', '.')],
  [('And', 'CNJ'), ('This', 'V'), ('is', 'V'), ('another', 'DET'), ('one', 'N')]]
</snippet></ROW><ROW><id>4294518</id><snippet>def translate(tpl):
    result = []
    t0 = [' '.join([nltk.tag.tuple2str(item) for item in sent]) for sent in tpl]
    for t in t0:
        t = re.sub(r'/NUM', '/N', t)
        t = [nltk.tag.str2tuple(item) for item in t.split()]
        result.append(t)
    return result
</snippet></ROW><ROW><id>4294641</id><snippet>q = User.all() # prepare User table for querying
q.filter("userEmail =", "az@example.com")  # apply filter, email lookup 
                                              - this is a simple where clause
results = q.fetch(1) # execute the query, apply limit 1
the_user = results[0] # the results is a list of objects, grab the first one
</snippet></ROW><ROW><id>4294641</id><snippet>the_user</snippet></ROW><ROW><id>4294641</id><snippet>"az@example.com"</snippet></ROW><ROW><id>4294641</id><snippet>the_user.comments</snippet></ROW><ROW><id>4294641</id><snippet>the_user.venues</snippet></ROW><ROW><id>4294641</id><snippet>some_venue = the_user.venues[0] # the first from the list
some_venue.venue = 'At DC. square'
db.put(some_venue) # the entry will be updated
</snippet></ROW><ROW><id>4294641</id><snippet>new_venue = Venue(venue='Jeferson memorial', user=the_user) # careful with the quoting
db.put(new_venue)
</snippet></ROW><ROW><id>4294645</id><snippet>SetDict(3)</snippet></ROW><ROW><id>4294645</id><snippet>SetDict.__call__</snippet></ROW><ROW><id>4294645</id><snippet>SetDict.__new__(SetDict)</snippet></ROW><ROW><id>4294645</id><snippet>__init__(3)</snippet></ROW><ROW><id>4294645</id><snippet>__new__</snippet></ROW><ROW><id>4294645</id><snippet>SetDict</snippet></ROW><ROW><id>4294645</id><snippet>SetDict</snippet></ROW><ROW><id>4294645</id><snippet>import collections
import copy

class SetDict(object):
    def __init__(self, size):
        self.d = collections.defaultdict(set)
        # Do some initialization; if size is large, this is expensive
        for i in range(size):
            self.d[i].add(1)

    def __copy__(self):
        other = SetDict.__new__(SetDict) 
        other.d = self.d.copy()
        return other
</snippet></ROW><ROW><id>4294645</id><snippet>__new__</snippet></ROW><ROW><id>4294645</id><snippet>__new__</snippet></ROW><ROW><id>4294645</id><snippet>t = SetDict(3)
print t.d  # defaultdict(&lt;type 'set'&gt;, {0: set([1]), 1: set([1]), 2: set([1])})

s = copy.copy(t)
print s.d # defaultdict(&lt;type 'set'&gt;, {0: set([1]), 1: set([1]), 2: set([1])})

t.d[3].add(1)
print t.d # defaultdict(&lt;type 'set'&gt;, {0: set([1]), 1: set([1]), 2: set([1]), 3: set([1])})
print s.d # defaultdict(&lt;type 'set'&gt;, {0: set([1]), 1: set([1]), 2: set([1])})

s.d[0].add(2)
print t.d[0] # set([1, 2])
print s.d[0] # set([1, 2])
</snippet></ROW><ROW><id>4294778</id><snippet>msg['reply-to'] = 'smith@acme.com'
</snippet></ROW><ROW><id>4294796</id><snippet>thumb</snippet></ROW><ROW><id>4294796</id><snippet>temp.flush()
</snippet></ROW><ROW><id>4294796</id><snippet>flush</snippet></ROW><ROW><id>4294898</id><snippet>render()</snippet></ROW><ROW><id>4294898</id><snippet>generate()</snippet></ROW><ROW><id>4294898</id><snippet>render()</snippet></ROW><ROW><id>4295111</id><snippet>/&lt;!-- bodytext --&gt;.*?(&lt;p&gt;.*?&lt;\/p&gt;\s*)+/
</snippet></ROW><ROW><id>4295154</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup
page = BeautifulSoup(urllib2.urlopen("http://www.url.com"))
page.findAll('img')
</snippet></ROW><ROW><id>4295442</id><snippet>a</snippet></ROW><ROW><id>4295442</id><snippet>a</snippet></ROW><ROW><id>4295442</id><snippet>b</snippet></ROW><ROW><id>4295442</id><snippet>a</snippet></ROW><ROW><id>4295442</id><snippet>try</snippet></ROW><ROW><id>4295442</id><snippet>property</snippet></ROW><ROW><id>4295513</id><snippet>&gt;&gt;&gt; x = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; t = []
&gt;&gt;&gt; lenList = len(x)
&gt;&gt;&gt; for l in range(0, lenList):
...     t.extend([x[l]] * (lenList - l))
... 

&gt;&gt;&gt; t
['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4295599</id><snippet>readlines</snippet></ROW><ROW><id>4295599</id><snippet>str</snippet></ROW><ROW><id>4295599</id><snippet>f = urllib2.open('http://www.google.com')
website = Website()
website.content = db.Text(f.read(), encoding = 'utf-8-sig')    # 'sig' deals with BOM if present
</snippet></ROW><ROW><id>4295599</id><snippet>&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
</snippet></ROW><ROW><id>4295599</id><snippet>f = urllib2.open('http://www.google.com')
website = Website()
content = unicode(f.read(), errors = 'ignore')    # Ignore characters that cause errors
website.content = db.Text(content)    # Don't need to specify an encoding since content is already a unicode string
</snippet></ROW><ROW><id>4295621</id><snippet>\b</snippet></ROW><ROW><id>4295621</id><snippet>\b</snippet></ROW><ROW><id>4295621</id><snippet>&gt;&gt;&gt; re.sub(r'(?&lt;!\w)(z)(?!\w)', r'_\1', test)
' az _z bz _z _z stuff _z  _z '
</snippet></ROW><ROW><id>4295621</id><snippet>(?&lt;!\w)</snippet></ROW><ROW><id>4295621</id><snippet>\w</snippet></ROW><ROW><id>4295621</id><snippet>(?!\w)</snippet></ROW><ROW><id>4295621</id><snippet>\w</snippet></ROW><ROW><id>4295621</id><snippet>(?...)</snippet></ROW><ROW><id>4295621</id><snippet>(z)</snippet></ROW><ROW><id>4295621</id><snippet>\1</snippet></ROW><ROW><id>4295621</id><snippet>' az _z bz z z stuff z  z '
          ^^^
</snippet></ROW><ROW><id>4295621</id><snippet>' az _z bz _z z stuff z  z '
              ^^^ &lt;- It starts matching here.
             ^ &lt;- Not this character, it's been consumed by the last match
</snippet></ROW><ROW><id>4295743</id><snippet>instance.attribute</snippet></ROW><ROW><id>4295743</id><snippet>instance.attribute</snippet></ROW><ROW><id>4295743</id><snippet>getattr(instance, attribute_name)</snippet></ROW><ROW><id>4295743</id><snippet>__getattr__</snippet></ROW><ROW><id>4295743</id><snippet>__getattr__</snippet></ROW><ROW><id>4295743</id><snippet>class A(dict):
    def __getattr__(self, name):
       return self[name]
a = A()
# Now a.somekey will give a['somekey']
</snippet></ROW><ROW><id>4295743</id><snippet>__getattribute__</snippet></ROW><ROW><id>4295743</id><snippet>regardless whether it exists or not</snippet></ROW><ROW><id>4295743</id><snippet>__getattribute__</snippet></ROW><ROW><id>4295743</id><snippet>__getattr__</snippet></ROW><ROW><id>4295743</id><snippet>__getattr__</snippet></ROW><ROW><id>4295743</id><snippet>__getattribute__</snippet></ROW><ROW><id>4295849</id><snippet>[x for x in somelist].sort()</snippet></ROW><ROW><id>4295849</id><snippet>sort</snippet></ROW><ROW><id>4295849</id><snippet>None</snippet></ROW><ROW><id>4295849</id><snippet>None</snippet></ROW><ROW><id>4295849</id><snippet>successorSorted</snippet></ROW><ROW><id>4295849</id><snippet>a</snippet></ROW><ROW><id>4295849</id><snippet>functools.partial</snippet></ROW><ROW><id>4295849</id><snippet>smallest = next(sorted_iterator)
</snippet></ROW><ROW><id>4295849</id><snippet>for item in iterable: pass
largest = item
</snippet></ROW><ROW><id>4296045</id><snippet>\xNN</snippet></ROW><ROW><id>4296045</id><snippet>\uNNNN</snippet></ROW><ROW><id>4296045</id><snippet>NNNN</snippet></ROW><ROW><id>4296045</id><snippet>\x</snippet></ROW><ROW><id>4296097</id><snippet>if neighbor in closedlist</snippet></ROW><ROW><id>4296097</id><snippet>in</snippet></ROW><ROW><id>4296097</id><snippet>set</snippet></ROW><ROW><id>4296097</id><snippet>in</snippet></ROW><ROW><id>4296097</id><snippet>closedlist</snippet></ROW><ROW><id>4296097</id><snippet>in</snippet></ROW><ROW><id>4296369</id><snippet>(r'^posts/tagged/(?P&lt;tag&gt;[-\w]+)/$', 'blog.view.posts_by_tag')
</snippet></ROW><ROW><id>4296369</id><snippet>posts_by_tag</snippet></ROW><ROW><id>4296369</id><snippet>tag</snippet></ROW><ROW><id>4296405</id><snippet>self.player.get_state(timeout=3*gst.SECOND)</snippet></ROW><ROW><id>4296405</id><snippet>gst.STATE_PAUSED</snippet></ROW><ROW><id>4296405</id><snippet>get_state</snippet></ROW><ROW><id>4296727</id><snippet>_NUMERALS = '0123456789abcdefABCDEF'
_HEXDEC = {v: int(v, 16) for v in (x+y for x in _NUMERALS for y in _NUMERALS)}
LOWERCASE, UPPERCASE = 'x', 'X'

def rgb(triplet):
    return (_HEXDEC[triplet[0:2]], _HEXDEC[triplet[2:4]], _HEXDEC[triplet[4:6]])

def triplet(rgb, lettercase=LOWERCASE):
    return format((rgb[0]&lt;&lt;16 | rgb[1]&lt;&lt;8 | rgb[2]), '06'+lettercase)

if __name__ == '__main__':
    print [rgb('aabbcc'), rgb('AABBCC')]
    # [(170, 187, 204), (170, 187, 204)]
    print [triplet((170, 187, 204)), triplet((170, 187, 204), UPPERCASE)]
    # ['aabbcc', 'AABBCC']
    print [rgb('aa0200'), rgb('AA0200')]
    # [(170, 2, 0), (170, 2, 0)]
    print [triplet((170, 2, 0)), triplet((170, 2, 0), UPPERCASE)]
    # ['aa0200', 'AA0200']
</snippet></ROW><ROW><id>4296729</id><snippet>x = x</snippet></ROW><ROW><id>4296729</id><snippet>mymethod = mymethod</snippet></ROW><ROW><id>4296729</id><snippet>MyClass</snippet></ROW><ROW><id>4296729</id><snippet>mymethod</snippet></ROW><ROW><id>4296729</id><snippet>my_defining_func()</snippet></ROW><ROW><id>4296729</id><snippet>mymethod</snippet></ROW><ROW><id>4296729</id><snippet>&gt;&gt;&gt; def myfunc():
...     x = 3
...     class MyClass(object):
...         x = x
...     return MyClass
... 
&gt;&gt;&gt; myfunc().x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in myfunc
  File "&lt;stdin&gt;", line 4, in MyClass
NameError: name 'x' is not defined
</snippet></ROW><ROW><id>4296729</id><snippet>&gt;&gt;&gt; def myfunc():
...     x = 3
...     class MyClass(object):
...         y = x
...     return MyClass
... 
&gt;&gt;&gt; myfunc().y
3
</snippet></ROW><ROW><id>4296777</id><snippet>import numpy as NP
from scipy import polyval, polyfit
from matplotlib import pyplot as PLT

n=10   # 10 data points
# make up some data
x = NP.linspace(0, 1, n)
y = 7*x**2 - 5*x + 3
# add some noise 
noise = NP.random.normal(.5, .3, 10)
y += noise

# the shape of the data suggests a 2d polynomial, so begin there
# a, b, c are the polynomial coefficients: ax^2 + bx + c
a, b, c = polyfit(x, y, 2)
y_pred = polyval([a, b, c], x)    # y_pred refers to predicted values of y

# how good is the fit?
# calculate MSE:
MSE = NP.sqrt( NP.sum((y_pred-y)**2)/10 )
# MSE = .2

# now use the model polynomial to generate y values based on x values outside 
# the range of the original data:
x_out = NP.linspace(0, 2, 20)   # choose 20 points, 10 in, 10 outside original range
y_pred = polyval([a, b, c], x_out)

# now plot the original data points and the polynomial fit through them
fig = PLT.figure()
ax1 = fig.add_subplot(111)

ax1.plot(x, y, 'g.', x_out, y_pred, 'b-' )

PLT.show()
</snippet></ROW><ROW><id>4296966</id><snippet>    int boostOutputStr = extract&lt;int&gt;(result);
</snippet></ROW><ROW><id>4296966</id><snippet>    std::string boostOutputStr = extract&lt;std::string&gt;(str(result));
</snippet></ROW><ROW><id>4296986</id><snippet>import random

def insert_spaces(s):
    s = list(s)
    for i in xrange(len(s)-1):
        while random.randrange(2):
            s[i] = s[i] + ' '
    return ''.join(s)
</snippet></ROW><ROW><id>4297463</id><snippet>&gt;&gt;&gt; var=r'C:\dummy_folder\a.txt'
&gt;&gt;&gt; var.replace('\\', '/')
'C:/dummy_folder/a.txt'
</snippet></ROW><ROW><id>4297989</id><snippet>__init__</snippet></ROW><ROW><id>4297989</id><snippet>photo</snippet></ROW><ROW><id>4297989</id><snippet>self.photo</snippet></ROW><ROW><id>4297999</id><snippet>permission_required</snippet></ROW><ROW><id>4298234</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; import ConfigParser
&gt;&gt;&gt; f = StringIO.StringIO("[sec1]\npwd=foo;\n")
&gt;&gt;&gt; p = ConfigParser.ConfigParser()
&gt;&gt;&gt; p.readfp(f)
&gt;&gt;&gt; p.items('sec1')
[('pwd', 'foo;')]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4298289</id><snippet>__add__</snippet></ROW><ROW><id>4298449</id><snippet>for tag in tags.split(",") if tag.strip()
</snippet></ROW><ROW><id>4298569</id><snippet>#!/usr/bin/env python
import sys
from cStringIO import StringIO
from code import InteractiveConsole
from contextlib import contextmanager
from multiprocessing import Process, Pipe

@contextmanager
def std_redirector(stdin=sys.stdin, stdout=sys.stdin, stderr=sys.stderr):
    tmp_fds = stdin, stdout, stderr
    orig_fds = sys.stdin, sys.stdout, sys.stderr
    sys.stdin, sys.stdout, sys.stderr = tmp_fds
    yield
    sys.stdin, sys.stdout, sys.stderr = orig_fds

class Interpreter(InteractiveConsole):
    def __init__(self, locals=None):
        InteractiveConsole.__init__(self, locals=locals)
        self.output = StringIO()
        self.output = StringIO()

    def push(self, command):
        self.output.reset()
        self.output.truncate()
        with std_redirector(stdout=self.output, stderr=self.output):
            try:
                more = InteractiveConsole.push(self, command)
                result = self.output.getvalue()
            except (SyntaxError, OverflowError):
                pass
            return more, result

def myfunc(conn, commands):
    output = StringIO()
    py = Interpreter()
    results = ""

    for line in commands.split('\n'):
        if line and len(line) &gt; 0:
            more, result = py.push(line + '\n')
            if result and len(result) &gt; 0:
                results += result

    conn.send(results)
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()

    commands = """
print "[42, None, 'hello']"

def greet(name, count):
    for i in range(count):
        print "Hello, " + name + "!"

greet("Beth Cooper", 5)
fugazi
print "Still going..."
"""
    p = Process(target=myfunc, args=(child_conn, commands))
    p.start()
    print parent_conn.recv()
    p.join()
</snippet></ROW><ROW><id>4298569</id><snippet>def dosomething():
    print "Doing something..."

def myfunc(conn, command):
    output = StringIO()
    result = ""
    with std_redirector(stdout=output, stderr=output):
        try:
            eval(command)
            result = output.getvalue()
        except Exception, err:
            result = repr(err)

    conn.send(result)
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    command = "dosomething()"
    p = Process(target=myfunc, args=(child_conn, command))
    p.start()
    print parent_conn.recv()
    p.join()
</snippet></ROW><ROW><id>4299242</id><snippet>sys._getframe</snippet></ROW><ROW><id>4299242</id><snippet>inspect.currentframe</snippet></ROW><ROW><id>4299242</id><snippet>f.f_back</snippet></ROW><ROW><id>4299242</id><snippet>f.f_lasti</snippet></ROW><ROW><id>4299242</id><snippet>f.f_code.co_code</snippet></ROW><ROW><id>4299242</id><snippet>SETUP_EXCEPT</snippet></ROW><ROW><id>4299242</id><snippet>COMPARE_OP</snippet></ROW><ROW><id>4299242</id><snippet>POP_JUMP_IF_FALSE</snippet></ROW><ROW><id>4299242</id><snippet>except</snippet></ROW><ROW><id>4299242</id><snippet>finally</snippet></ROW><ROW><id>4299242</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>4299242</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>4299242</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>4299242</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>4299242</id><snippet>BUILD_TUPLE</snippet></ROW><ROW><id>4299242</id><snippet>BUILD_LIST</snippet></ROW><ROW><id>4299242</id><snippet>LOAD_X</snippet></ROW><ROW><id>4299242</id><snippet>f.f_code</snippet></ROW><ROW><id>4299242</id><snippet>co_filename</snippet></ROW><ROW><id>4299242</id><snippet>sys.modules</snippet></ROW><ROW><id>4299242</id><snippet>__name__</snippet></ROW><ROW><id>4299242</id><snippet>__name__.endswith(co_filename)</snippet></ROW><ROW><id>4299242</id><snippet>f.func_code.co_firstlineno</snippet></ROW><ROW><id>4299242</id><snippet>f.f_lineno</snippet></ROW><ROW><id>4299310</id><snippet># Strip any hashes on the left.
string.lstrip('#')

# Remove hashes anywhere in the string, not necessarily just from the front.
string.replace('#', '')

# Remove only the first hash in the string.
string.replace('#', '', 1)

# Unconditionally remove the first character, no matter what it is.
string[1:]

# If the first character is a hash, remove it. Otherwise do nothing.
import re
re.sub('^#', '', string)
</snippet></ROW><ROW><id>4299310</id><snippet>lstrip('#')</snippet></ROW><ROW><id>4299447</id><snippet>max(nested_list, key=lambda x: x[1])
</snippet></ROW><ROW><id>4299447</id><snippet>import operator

max(nested_list, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>4299447</id><snippet>'a'</snippet></ROW><ROW><id>4299447</id><snippet>max(nested_list)
</snippet></ROW><ROW><id>4299447</id><snippet>import numbers

max(nested_list, key=lambda x: max(i for i in x 
                                   if isinstance(i, numbers.Integral)))
</snippet></ROW><ROW><id>4299447</id><snippet>nested_list</snippet></ROW><ROW><id>4299447</id><snippet>import collections

max((s for s in nested_list 
     if isinstance(s, collections.Sequence)), 
    key=some_key_function)
</snippet></ROW><ROW><id>4299447</id><snippet>lambda x: x[1]</snippet></ROW><ROW><id>4299447</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>4299447</id><snippet>itemgetter</snippet></ROW><ROW><id>4299447</id><snippet>operator</snippet></ROW><ROW><id>4299447</id><snippet>operator</snippet></ROW><ROW><id>4299447</id><snippet>itemgetter</snippet></ROW><ROW><id>4299447</id><snippet>import</snippet></ROW><ROW><id>4299498</id><snippet>cmp</snippet></ROW><ROW><id>4299498</id><snippet>lambda</snippet></ROW><ROW><id>4299498</id><snippet>sorted(d.iteritems(), key=operator.itemgetter(1, 0))
</snippet></ROW><ROW><id>4299517</id><snippet>serial.read()</snippet></ROW><ROW><id>4299517</id><snippet>while ser.isOpen() &amp;&amp; thisthread_should_keep_doing_this:
    response = ser.read(ser.inWaiting())
    if len(response):
        write_log(response)
        print response
</snippet></ROW><ROW><id>4299517</id><snippet>thisthread_should_keep_doing_this=False</snippet></ROW><ROW><id>4299601</id><snippet># start with the OP's hex dump:
hexbytes = """
c6 92 66 c6 92 42 c6 92  58 c6 92 76 c6 92 c5 92
c6 92 43 c6 92 e2 80 9a  c2 81 5b c6 92 68 e2 80
9a c2 aa c2 90 c3 9d e2  80 99 c3 a8 e2 80 9a c3
85 e2 80 9a c2 ab e2 80  9a c3 9c e2 80 9a c2 b9
e2 80 9a c3 b1 2e 0a
"""
strg = ''.join(
    chr(int(hexbyte, 16))
    for hexbyte in hexbytes.split()
    )
uc = strg.decode('utf8') # decodes OK but result is gibberish
uc_hex = ' '.join("%04X" % ord(x) for x in uc)
print uc_hex
# but it's stuffed ... U+0192??? oh yeah, 0x83
badenc = 'cp1252' # sort of, things like 0x81 have to be allowed for
fix_bad = {}
for i in xrange(256):
    b = chr(i)
    try:
        fix_bad[ord(b.decode(badenc))] = i
    except UnicodeDecodeError:
        fix_bad[i] = i

recoded = uc.translate(fix_bad).encode('latin1')
better_uc = recoded.decode('cp932')
# It's on Windows; cp932 what would have been used
# but 'sjis' gives the same answer
better_uc_hex = ' '.join("%04X" % ord(x) for x in better_uc)
print better_uc_hex
print repr(better_uc)
print better_uc
</snippet></ROW><ROW><id>4299601</id><snippet>0192 0066 0192 0042 0192 0058 0192 0076 0192 0152 0192 0043 0192 201A 0081 005B 0192 0068 201A 00AA 0090 00DD 2019 00E8 201A 00C5 201A 00AB 201A 00DC 201A 00B9 201A 00F1 002E 000A

30C7 30A3 30B9 30D7 30EC 30A4 30E2 30FC 30C9 304C 8A2D 5B9A 3067 304D 307E 305B 3093 002E 000A

u'\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30e2\u30fc\u30c9\u304c\u8a2d\u5b9a\u3067\u304d\u307e\u305b\u3093.\n'

ディスプレイモードが設定できません.
</snippet></ROW><ROW><id>4299601</id><snippet>\x81</snippet></ROW><ROW><id>4299610</id><snippet>process.terminate()</snippet></ROW><ROW><id>4299686</id><snippet>data="UTF-8 DATA"
udata=data.decode("utf-8")
asciidata=udata.encode("ascii","ignore")
</snippet></ROW><ROW><id>4299744</id><snippet>from Tkinter import *
master = Tk()
e = Entry(master)
e.pack()
e.focus()
b = Button(master, text="get", width=10, command=callback)
b.pack()
mainloop()

def callback():
    print master.focus()
</snippet></ROW><ROW><id>4299758</id><snippet>&gt;&gt;&gt; list=[1,2,3,4,5]
&gt;&gt;&gt; k = [str(x) for x in list]
&gt;&gt;&gt; k
['1', '2', '3', '4', '5']
&gt;&gt;&gt; "".join(k)
'12345'
&gt;&gt;&gt; ["".join(k)]
['12345']
&gt;&gt;&gt; 
&gt;&gt;&gt; [int("".join(k))]
[12345]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4299776</id><snippet>    gtk.rc_parse_string("""
        style "globalmenu_event_box_style"
        {
            GtkWidget::focus-line-width=0
            GtkWidget::focus-padding=0
        }
        style "globalmenu_menu_bar_style"
        {
            ythickness = 0
            GtkMenuBar::shadow-type = none
            GtkMenuBar::internal-padding = 0
        }
        class "GtkEventBox" style "globalmenu_event_box_style"
        class "GtkMenuBar" style:highest "globalmenu_menu_bar_style"
        class "GnomenuMenuBar" style:highest "globalmenu_menu_bar_style"
    """);
</snippet></ROW><ROW><id>4299809</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>4299809</id><snippet>.encode('latin-1')</snippet></ROW><ROW><id>4299945</id><snippet>[dict(zip(('lblA', 'lblB', 'lblC'), term)) for term in
  itertools.product((False, True) , (False, True), (0, 1, 2))]
</snippet></ROW><ROW><id>4299945</id><snippet>src = {'lblA': (False, True), 'lblB': (False, True), 'lblC': (0, 1, 2)}

labels, terms = zip(*src.items())

print [dict(zip(labels, term)) for term in itertools.product(*terms)]
</snippet></ROW><ROW><id>4300035</id><snippet>;; python 3
(setq python-python-command "python3")
</snippet></ROW><ROW><id>4300495</id><snippet>Jinja style {{ user.is_authenticated() }}
Django style {{ user.is_authenticated }} 
</snippet></ROW><ROW><id>4300495</id><snippet>user</snippet></ROW><ROW><id>4300963</id><snippet>Manager.filter()</snippet></ROW><ROW><id>4300963</id><snippet>QuerySet</snippet></ROW><ROW><id>4300963</id><snippet>Model</snippet></ROW><ROW><id>4300963</id><snippet>QuerySet.delete()</snippet></ROW><ROW><id>4300963</id><snippet>Model.delete()</snippet></ROW><ROW><id>4301013</id><snippet>SubsetOutput</snippet></ROW><ROW><id>4301013</id><snippet>if</snippet></ROW><ROW><id>4301013</id><snippet>None</snippet></ROW><ROW><id>4301013</id><snippet>[]</snippet></ROW><ROW><id>4301013</id><snippet># Pass None to use full subset.
def Export(source, target, *args, sep=','):
    for item in source:
        SubsetOutput(WriteFlatFile(target), args or None).send(item[0])

# Pass an empty list [] to use full subset. Even simpler.
def Export(source, target, *args, sep=','):
    for item in source:
        SubsetOutput(WriteFlatFile(target), args).send(item[0])
</snippet></ROW><ROW><id>4301013</id><snippet>def Export(source, target, *args, sep=','):
    if args:
        for item in source:
            SubsetOutput(WriteFlatFile(target), args).send(item[0])
    else:
        for item in source:
            FullOutput(WriteFlatFile(target)).send(item[0])
</snippet></ROW><ROW><id>4301164</id><snippet>import matplotlib as mpl    
mpl.rc('figure.subplot', left=.2, right=.8, bottom=.2, top=.8)
</snippet></ROW><ROW><id>4301739</id><snippet>/bin/</snippet></ROW><ROW><id>4301941</id><snippet>&gt;&gt;&gt; [f() for f in [foo]*3]
foo
foo
foo
[1, 1, 1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4301941</id><snippet>&gt;&gt;&gt; any ([1, 1, 1])
True
</snippet></ROW><ROW><id>4301941</id><snippet>&gt;&gt;&gt; if any([1, 1, 1]):
...     print 'bar'
... 
bar
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4301941</id><snippet>&gt;&gt;&gt; (f() for f in [foo]*3)
&lt;generator object &lt;genexpr&gt; at 0x10041a9b0&gt;
</snippet></ROW><ROW><id>4302041</id><snippet>import webbrowser

webbrowser.open('http://eample.com')
</snippet></ROW><ROW><id>4302182</id><snippet>print '%*s : %*s' % (20, "Python", 20, "Very Good")
</snippet></ROW><ROW><id>4302182</id><snippet>width = 20
args = ("Python", "Very Good")
padded_args = zip([width] * len(args), args)
# Flatten the padded argument list.
print "%*s : %*s" % tuple([item for list in padded_args for item in list])
</snippet></ROW><ROW><id>4302228</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>4302228</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = iter([ xrange(0,5), xrange(5,10)])
&gt;&gt;&gt; a = itertools.chain.from_iterable(x)
&gt;&gt;&gt; list(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>4302228</id><snippet>&gt;&gt;&gt; x = iter([ xrange(0,5), xrange(5,10)])
&gt;&gt;&gt; a = (i for subiter in x for i in subiter)
&gt;&gt;&gt; list(a)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>4302522</id><snippet>&gt;&gt;&gt; pnt = Point(5, 23)
&gt;&gt;&gt; [coord for coord in pnt]
[5.0, 23.0]
&gt;&gt;&gt; pnt.coords
(5.0, 23.0)
</snippet></ROW><ROW><id>4302553</id><snippet>forms.py</snippet></ROW><ROW><id>4302553</id><snippet>class EditForm(forms.Form):                              
    title     = forms.CharField(label='Username', max_length=30)
    phone_num1= forms.CharField(label='Phone Number1',widget=forms.TextInput())
    phone_num2= forms.CharField(label='Phone Number2',widget=forms.TextInput())  
</snippet></ROW><ROW><id>4302553</id><snippet>views.py</snippet></ROW><ROW><id>4302553</id><snippet>views.py</snippet></ROW><ROW><id>4302553</id><snippet>if request.GET.has_key('edit'): # already there - EDIT
    nameid = request.GET['edit']
    try:
        person   = Person.objects.get(id=nameid)
        phonenum = PhoneNumber.objects.get(user=request.user, person=person)
        pnums    = ' '.join(n.phone_number for n in person.phonenum_set.all())
    except (PhoneNumber.DoesNotExist, Person.DoesNotExist):
        raise
    form = EditForm({'title:person.title, 'phonunumbers': phonenums})
</snippet></ROW><ROW><id>4302866</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>4303227</id><snippet>friend.users.filter(pk=user.pk).delete()
</snippet></ROW><ROW><id>4303400</id><snippet>.encode</snippet></ROW><ROW><id>4303400</id><snippet>dict((k.encode('ascii'), v) for (k, v) in original.items())
</snippet></ROW><ROW><id>4303400</id><snippet>response = simplejson.load(urllib.urlopen(REST_SERVER, data))
# We create the list of modified dictionaries, and re-assign 'response' to it:
response = [
     dict((k.encode('ascii'), v) for (k, v) in original.items()) # the modified version
     for original in response # of each original dictionary.
]
return response
</snippet></ROW><ROW><id>4304728</id><snippet>book</snippet></ROW><ROW><id>4304728</id><snippet>    if form.is_valid():
        book = form.save(commit=False)
        book.owner = request.user
        book.save()
</snippet></ROW><ROW><id>4304728</id><snippet>form.save(commit=False)</snippet></ROW><ROW><id>4304728</id><snippet>book</snippet></ROW><ROW><id>4305077</id><snippet>ISTARTSWITH</snippet></ROW><ROW><id>4305077</id><snippet>#views.py
def search(req):
    if req.GET:
        search_term = req.GET['term']
        results = ModelToSearch.objects.filter(field_istartswith=search_term)
        return render_to_response('search.html', {'results': results})
    return render_to_response('search.html', {})

#search.html
&lt;html&gt;
&lt;body&gt;
&lt;form&gt;
     &lt;input name='S'&gt;
&lt;/form&gt;
{% if results %}
Found the following items:
&lt;ol&gt;
{% for result in results %}
    &lt;li&gt;{{result}}&lt;/li&gt;
{% endfor %}
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>4305396</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>4305396</id><snippet>'authors'</snippet></ROW><ROW><id>4305396</id><snippet>class BookForm(forms.ModelForm):
    authors = CharField()
    class Meta:
        model = Book
        fields = ["title"]
</snippet></ROW><ROW><id>4305396</id><snippet>form.authors</snippet></ROW><ROW><id>4305396</id><snippet>form.cleaned_data['authors']</snippet></ROW><ROW><id>4305396</id><snippet>if request.user is None:
    return redirect("/users/login/")
</snippet></ROW><ROW><id>4305396</id><snippet>login_required</snippet></ROW><ROW><id>4305603</id><snippet>def setup_django_env(path):
    import imp, os
    from django.core.management import setup_environ

    f, filename, desc = imp.find_module('settings', [path])
    project = imp.load_module('settings', f, filename, desc)       

    setup_environ(project)

setup_django_env('/path/to/django/project/')
</snippet></ROW><ROW><id>4306139</id><snippet>/google/appengine/ext/appstats/recording.py</snippet></ROW><ROW><id>4306485</id><snippet>try:
    stdin, stdout, stderr = ssh.exec_command("pwd")
except SSHException:
    ssh.close()
</snippet></ROW><ROW><id>4306485</id><snippet>pwd</snippet></ROW><ROW><id>4306602</id><snippet>*args</snippet></ROW><ROW><id>4306602</id><snippet>**keywordargs</snippet></ROW><ROW><id>4306602</id><snippet>def printlist(*args):
    for x in args:
        print x
</snippet></ROW><ROW><id>4306602</id><snippet>printlist(1, 2, 3, 4, 5) # or as many more arguments as I'd like
</snippet></ROW><ROW><id>4306602</id><snippet>def printdict(**kwargs):
    print repr(kwargs)

printdict(john=10, jill=12, david=15)
</snippet></ROW><ROW><id>4306602</id><snippet>*args</snippet></ROW><ROW><id>4306602</id><snippet>**keywordargs</snippet></ROW><ROW><id>4306696</id><snippet>class Business(db.Model):
  bus_contact_info_ = db.ReferenceProperty()
</snippet></ROW><ROW><id>4306696</id><snippet>business = Business().put()
business_info = BusinessInfo(key_name='i', parent=business).put()

# Get business_info from business:
business_info = db.get(db.Key.from_path('BusinessInfo', 'i', parent=business))

# Get business from business_info:
business = db.get(business_info.parent())
</snippet></ROW><ROW><id>4306777</id><snippet>if first_word_passed</snippet></ROW><ROW><id>4306777</id><snippet>_</snippet></ROW><ROW><id>4306777</id><snippet>def underscore_to_camelcase(value):
    def camelcase(): 
        yield str.lower
        while True:
            yield str.capitalize

    c = camelcase()
    return "".join(c.next()(x) if x else '_' for x in value.split("_"))
</snippet></ROW><ROW><id>4306828</id><snippet>class ImmutableList(object):
    def __init__(self, *args):
        self.__values = args; # internally we store the values in a list

    # make imuList[0] = 2 raise an error, just like a tuple would
    def __setitem__(self, index, value):
        raise TypeError('ImmutableList does not support item assignment')

    # del imuList[0] should also raise
    def __delitem__(self, index, value):
        raise TypeError('ImmutableList does not support item deletion')**

    # make our imuList indexable, also catch the normal index error and raise one
    # that tells that this is an immutable list, will make it easier to debug :)
    def __getitem__(self, index):
        try:
            return self.__values[index]

        except IndexError:
            raise IndexError('ImmutableList index out of range')

    # the usual stuff
    def __repr__(self):
        return repr(self.__values)

    def __str__(self):
        return str(self.__values)

# create a new imulist
e = ImmutableList(1, 2, 3, 4)

# works!
print e[0]

# raises an error
e[0] = 5

# raises another error
print e[9]
</snippet></ROW><ROW><id>4306828</id><snippet>self._values</snippet></ROW><ROW><id>4306828</id><snippet>self._values</snippet></ROW><ROW><id>4306828</id><snippet>__values</snippet></ROW><ROW><id>4306828</id><snippet>list.__setitem__(imListInstance, 0, 5)</snippet></ROW><ROW><id>4306878</id><snippet>warnings</snippet></ROW><ROW><id>4306878</id><snippet>connect_signals</snippet></ROW><ROW><id>4306878</id><snippet>connect_signals</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>setuptools</snippet></ROW><ROW><id>4306995</id><snippet>Distribute</snippet></ROW><ROW><id>4306995</id><snippet>easy-install.pth</snippet></ROW><ROW><id>4306995</id><snippet>site-packages</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>easy-install.pth</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>easy-install.pth</snippet></ROW><ROW><id>4306995</id><snippet>import sys; sys.__plen = len(sys.path)
./appscript-0.21.1-py2.6-macosx-10.5-ppc.egg
./yolk-0.4.1-py2.6.egg
./Elixir-0.7.1-py2.6.egg
./Fabric-0.9.0-py2.6.egg
import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginse
rt',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</snippet></ROW><ROW><id>4306995</id><snippet>setuptools</snippet></ROW><ROW><id>4306995</id><snippet>site.py</snippet></ROW><ROW><id>4306995</id><snippet>-m</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>easy-install.pth</snippet></ROW><ROW><id>4306995</id><snippet>easy_install</snippet></ROW><ROW><id>4306995</id><snippet>-m</snippet></ROW><ROW><id>4307214</id><snippet>xpathEval</snippet></ROW><ROW><id>4307214</id><snippet>&gt;&gt;&gt; import libxml2
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; data = urlopen('http://pastie.org/pastes/1333021/download').read()
&gt;&gt;&gt;
&gt;&gt;&gt; doc = libxml2.parseMemory(data,len(data))
&gt;&gt;&gt;
&gt;&gt;&gt; context = doc.xpathNewContext()
&gt;&gt;&gt; context.xpathRegisterNs("db", "http://examplenamespace.com")
0
&gt;&gt;&gt;
&gt;&gt;&gt; for res in context.xpathEval("//db:food"):
...     context.setContextNode(res)
...     print "Got Food Node:"
...     desc = context.xpathEval('./db:description')[0]
...     print desc
...
Got Food Node:
&lt;description&gt;two of our famous Belgian Waffles with plenty of real maple syrup&lt;/description&gt;
Got Food Node:
&lt;description&gt;light Belgian waffles covered with strawberries and whipped cream&lt;/description&gt;
Got Food Node:
&lt;description&gt;light Belgian waffles covered with an assortment of fresh berries and whipped cream&lt;/description&gt;
Got Food Node:
&lt;description&gt;thick slices made from our homemade sourdough bread&lt;/description&gt;
Got Food Node:
&lt;description&gt;two eggs, bacon or sausage, toast, and our ever-popular hash browns&lt;/description&gt;
</snippet></ROW><ROW><id>4307295</id><snippet>django.core.serializers</snippet></ROW><ROW><id>4307463</id><snippet>@decorated
class Foo(object): pass
</snippet></ROW><ROW><id>4307463</id><snippet>class Foo(object): pass
Foo = decorated(Foo)
</snippet></ROW><ROW><id>4307494</id><snippet>message</snippet></ROW><ROW><id>4307494</id><snippet>msg</snippet></ROW><ROW><id>4307667</id><snippet>def getChildForRequest(resource, request):
    """
    Traverse resource tree to find who will handle the request.
    """
    while request.postpath and not resource.isLeaf:
        pathElement = request.postpath.pop(0)
        request.prepath.append(pathElement)
        resource = resource.getChildWithDefault(pathElement, request)
    return resource
</snippet></ROW><ROW><id>4307667</id><snippet>root_resource
|
|------------ resource r1 (path = 'help')
|----resource r2 (path = 'login')  |
|                                  |----- resource r3 (path = 'registeration')
|                                  |----- resource r4 (path = 'deregistration')
</snippet></ROW><ROW><id>4307667</id><snippet>def render(self, request):
    request.setResponseCode(...)
    return ""
</snippet></ROW><ROW><id>4307737</id><snippet>#include &lt;Python.h&gt;
#include &lt;string&gt;

int main(int argc, char** argv)
{
    std::string stdOutErr =
"import sys\n\
class CatchOutErr:\n\
    def __init__(self):\n\
        self.value = ''\n\
    def write(self, txt):\n\
        self.value += txt\n\
catchOutErr = CatchOutErr()\n\
sys.stdout = catchOutErr\n\
sys.stderr = catchOutErr\n\
"; //this is python code to redirect stdouts/stderr

    Py_Initialize();
    PyObject *pModule = PyImport_AddModule("__main__"); //create main module
    PyRun_SimpleString(stdOutErr.c_str()); //invoke code to redirect
    PyRun_SimpleString("print(1+1)"); //this is ok stdout
    PyRun_SimpleString("1+a"); //this creates an error
    PyObject *catcher = PyObject_GetAttrString(pModule,"catchOutErr"); //get our catchOutErr created above
    PyErr_Print(); //make python print any errors

    PyObject *output = PyObject_GetAttrString(catcher,"value"); //get the stdout and stderr from our catchOutErr object

    printf("Here's the output:\n %s", PyString_AsString(output)); //it's not in our C++ portion

    Py_Finalize();


    return 0;

}
</snippet></ROW><ROW><id>4307919</id><snippet>import datetime
def main():
    print "Welcome To the Date Converter"
    print "Please Enjoy Your Stay"
    print
    date_string = raw_input("Please enter a date in MM/DD/YYYY format:  ")
    d=datetime.datetime.strptime(date_string,'%m/%d/%Y')
    print(d.strftime('%B %d, %Y'))

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>4307919</id><snippet>date_string</snippet></ROW><ROW><id>4307919</id><snippet>date_string.split('/')</snippet></ROW><ROW><id>4307919</id><snippet>ints</snippet></ROW><ROW><id>4307919</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>4307919</id><snippet>if __name__=='__main__'</snippet></ROW><ROW><id>4308202</id><snippet>str</snippet></ROW><ROW><id>4308202</id><snippet>try:
    some_method()
except Exception as e:
    s = str(e)
</snippet></ROW><ROW><id>4308202</id><snippet>args</snippet></ROW><ROW><id>4308202</id><snippet>args[0]</snippet></ROW><ROW><id>4308202</id><snippet>str</snippet></ROW><ROW><id>4308202</id><snippet>repr</snippet></ROW><ROW><id>4308211</id><snippet>name = db.StringProperty</snippet></ROW><ROW><id>4308211</id><snippet>get_or_insert</snippet></ROW><ROW><id>4308211</id><snippet>person = Person.get_or_insert('Peter')
# other interesting &amp; useful code here...
# later, maybe we need to retrieve that key name from the object:
name = person.key().name()
assert(name == "Peter")
</snippet></ROW><ROW><id>4308731</id><snippet>is_valid()</snippet></ROW><ROW><id>4308731</id><snippet>cleaned_data</snippet></ROW><ROW><id>4308731</id><snippet>is_valid()</snippet></ROW><ROW><id>4308731</id><snippet>form = SearchForm(request.POST)</snippet></ROW><ROW><id>4308763</id><snippet>"create table %s (%s text,%s text)" % ("my_table","first","second")
</snippet></ROW><ROW><id>4308806</id><snippet>&gt;&gt;&gt; data
[0, 0, 1, 8, 8, 8, 4, 4, 1, 0]
&gt;&gt;&gt; def fromDataToSplitRLE(dat,n):
    RLE=[(k,len(tuple(g))) for k,g in itertools.groupby(dat)]
    tmp=tuple(zip(*RLE))
    return [list(g) for k,g in itertools.groupby((zip((sum(tmp[1][:i]) for i in range(len(tmp[1]))) ,(zip(*tmp)))),lambda x:x[1][0]!=n) if k]

&gt;&gt;&gt; fromDataToSplitRLE(data,1)
[[(0, (0, 2))], [(3, (8, 3)), (6, (4, 2))], [(9, (0, 1))]]
</snippet></ROW><ROW><id>4309001</id><snippet>from hashlib import md5

class Stop(models.Model):
    line = models.CharField(max_length=12)
    street = models.CharField(max_length=32, choices=STREET_CHOICES)
    order = models.PositiveIntegerField(blank=True, null=True)
    location_hash = models.CharField(max_length=32, null=True)

    def save(self):
        location_hash = md5('%s@%s' % (self.line, self.street))
        if self.location_hash != location_hash:
            self.order = calculate_order(line=self.line, street=self.street)
            self.location_hash = location_hash
        super(Stop, self).save()
</snippet></ROW><ROW><id>4309270</id><snippet>list</snippet></ROW><ROW><id>4309270</id><snippet>dict = {}
list = []
for a in A.objects.all():
    dict[a] = a.things.all().order_by("-score")[0].text
for k, v in sorted(dict.items(), key=lambda x: x[1]):
    list.append(k)
</snippet></ROW><ROW><id>4309388</id><snippet>#.  **Defining the Model Class**

    All models must inherit from |LrbBaseModel| either directly or
    indirectly and have the |LrbModelInit| decorator above their
    constructor (a.k.a. ``__init__``)::

        class foo(LrbBaseModel):
            @LrbModelInit()
            def __init__(self):
                ...
</snippet></ROW><ROW><id>4309388</id><snippet>#.  ::
        def fooDeFaFa():
            pass
</snippet></ROW><ROW><id>4309388</id><snippet>::</snippet></ROW><ROW><id>4309388</id><snippet>::</snippet></ROW><ROW><id>4309388</id><snippet>#.
    ::
        def fooDeFaFa():
            pass
</snippet></ROW><ROW><id>4309403</id><snippet>apt-get purge no-longer-needed</snippet></ROW><ROW><id>4309403</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>4309403</id><snippet>echo export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client/lib &gt;&gt; ~/.bashrc
source ~/.bashrc
</snippet></ROW><ROW><id>4309403</id><snippet>/usr/lib/oracle/xe/app/oracle/product/10.2.0/client/lib</snippet></ROW><ROW><id>4309689</id><snippet>&gt;&gt;&gt; ' 1234    Q-24 2010-11-29         563   abc  a6G47er15'.split()
['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']
</snippet></ROW><ROW><id>4309689</id><snippet>&gt;&gt;&gt; class MagicString(str):
...     magicSplit = str.split
... 
&gt;&gt;&gt; s = MagicString(' 1234    Q-24 2010-11-29         563   abc  a6G47er15')
&gt;&gt;&gt; s.magicSplit()
['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']
</snippet></ROW><ROW><id>4309726</id><snippet>parse()</snippet></ROW><ROW><id>4309726</id><snippet>parse()</snippet></ROW><ROW><id>4309726</id><snippet>class YExtension(Extension):
    tags = set(['y'])

    def preprocess(self, source, name, filename=None):
        # insert some code here that replaces '{% xyz %}foo bar{% endxyz %}'
        # with something like: '{% xyz %}foo bar{% raw %}foo bar{% endraw %}{% endxyz %}'
        return source
</snippet></ROW><ROW><id>4309726</id><snippet>value</snippet></ROW><ROW><id>4309726</id><snippet>{% raw %}</snippet></ROW><ROW><id>4309837</id><snippet>id='place'</snippet></ROW><ROW><id>4309837</id><snippet>&lt;script type="text/javascript"&gt;
$(document).ready(function(){
mylocation=$("#address").val();
$("#address").change(function(){
    mylocation=this.val();
});

$(function() {
  $("#address").suggest({type:'/location/citytown'});
});

  $("#place").suggest({
    "type":'/dining/restaurant',
     "name":null,
     "/location/location/near":{
            "location":mylocation,
            "unit":"miles",
            "distance":null
       },
    "limit":50,
    "sort":"/location/location/near.distance"
    });
});
&lt;/script&gt;
</snippet></ROW><ROW><id>4309844</id><snippet>result = ' ' * 8
width = house.get_width() - 4 # subtract 4 to allow for 'CAT '
for i in range(house.get_cat_count()): # or xrange
    result += 'CAT %-*c' % (width, ord('A') + i)
</snippet></ROW><ROW><id>4309844</id><snippet>*</snippet></ROW><ROW><id>4309844</id><snippet>%c</snippet></ROW><ROW><id>4309844</id><snippet>chr()</snippet></ROW><ROW><id>4309876</id><snippet>&lt;html&gt;
   &lt;head&gt;
      {% block head %}

      &lt;title&gt;{% block title %}This is the main template{% endblock %}&lt;/title&gt;

      &lt;script type="text/javascript"&gt;
      {% block head_js %}
      $(function () {
        $("#abc").css("color", "red");
      });
      {% endblock %}
      &lt;/script&gt;

      {% endblock head_js %}
   &lt;/head&gt;
   &lt;body&gt;
      {% block body %}
      &lt;h1&gt;{% block body_title %}This is the main template{% endblock body_title %}&lt;/h1&gt;

      {% endblock body %}
   &lt;/body&gt;
 &lt;/html&gt;
</snippet></ROW><ROW><id>4309876</id><snippet>{% block title %}This is some page{% endblock title %}

{% block head_js %}
{{ super() }}
try { {{ caller() }} } catch (e) {
   my.log.error(e.name + ": " + e.message);
}        // jquery parlance:
{% endblock head_js %}
</snippet></ROW><ROW><id>4310111</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.escape('escape this. /')
'escape\\ this\\.\\ \\/'
&gt;&gt;&gt; 
&gt;&gt;&gt; re.escape('www.stackoverflow.com')
'www\\.stackoverflow\\.com'
</snippet></ROW><ROW><id>4310155</id><snippet>referrer</snippet></ROW><ROW><id>4310155</id><snippet>userip</snippet></ROW><ROW><id>4310155</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-
import json
import urllib, urllib2
from pprint import pprint

api_key, userip = None, None
query = {'q' : 'матрёшка'}
referrer = "http://stackoverflow.com/q/4309599/4279"

if userip:
    query.update(userip=userip)
if api_key:
    query.update(key=api_key)

url = 'http://ajax.googleapis.com/ajax/services/language/detect?v=1.0&amp;%s' %(
    urllib.urlencode(query))

request = urllib2.Request(url, headers=dict(Referer=referrer))
json_data = json.load(urllib2.urlopen(request))

pprint(json_data['responseData'])
</snippet></ROW><ROW><id>4310155</id><snippet>{u'confidence': 0.070496580000000003, u'isReliable': False, u'language': u'ru'}
</snippet></ROW><ROW><id>4310155</id><snippet>seedterm</snippet></ROW><ROW><id>4310155</id><snippet>if isinstance(seedterm, unicode):
   value = seedterm
else: # bytes
   value = seedterm.decode(put_encoding_here)
url = 'http://...q=%s' % urllib.quote_plus(value.encode('utf-8'))
</snippet></ROW><ROW><id>4310181</id><snippet>def repl(m):
  if m.group(0) == ' ':
    return '%20'
  else:
    return ','

re.sub(',? +', repl, "single, single, double word, single  word, also      single")
</snippet></ROW><ROW><id>4310181</id><snippet>urllib.quote</snippet></ROW><ROW><id>4310304</id><snippet>print my_dict['a']['c']    # Outputs: 2
</snippet></ROW><ROW><id>4310304</id><snippet>{{ my_dict.a.c }}    {# Outputs: 2 #}
</snippet></ROW><ROW><id>4310364</id><snippet>QuerySet</snippet></ROW><ROW><id>4310364</id><snippet>str()</snippet></ROW><ROW><id>4310364</id><snippet>unicode()</snippet></ROW><ROW><id>4310364</id><snippet>tickets = Ticket.objects.filter(site=site.id)</snippet></ROW><ROW><id>4310364</id><snippet>QuerySet</snippet></ROW><ROW><id>4310364</id><snippet>Model.objects.filter(foo).filter(bar).order_by(baz)...</snippet></ROW><ROW><id>4310435</id><snippet>self.icon = wx.Icon(fn, wx.BITMAP_TYPE_ICO)
self.SetIcon(self.icon)
</snippet></ROW><ROW><id>4310435</id><snippet>    wx.Frame.SetIcon(self,favicon)
</snippet></ROW><ROW><id>4310435</id><snippet>    self.SetIcon(favicon)
</snippet></ROW><ROW><id>4310511</id><snippet>xrange(len(strval))
</snippet></ROW><ROW><id>4310753</id><snippet>def unanimous(it):
  it1, it2 = itertools.tee(it)
  return all(it1) or not any(it2)
</snippet></ROW><ROW><id>4310998</id><snippet>10$myuser:</snippet></ROW><ROW><id>4310998</id><snippet>for x in range(1,11):
  print x
print
</snippet></ROW><ROW><id>4311134</id><snippet>
w = Canvas(master, width=150, height=40, bd=0, relief='ridge')
w.pack()
</snippet></ROW><ROW><id>4311134</id><snippet>
w = Canvas(master, width=150, height=40, bd=0, highlightthickness=0, relief='ridge')
w.pack()
</snippet></ROW><ROW><id>4311134</id><snippet>
x0 = 2
y0 = 2
x1 = 151
y1 = 2
</snippet></ROW><ROW><id>4311134</id><snippet>
x0 = 0
y0 = 0
x1 = 150
y1 = 0
</snippet></ROW><ROW><id>4311356</id><snippet>cat</snippet></ROW><ROW><id>4311356</id><snippet>shell = True</snippet></ROW><ROW><id>4311356</id><snippet>cat /path/to/file</snippet></ROW><ROW><id>4311356</id><snippet>&gt;&gt;&gt; subprocess.Popen(['ls', '-l'])
&lt;subprocess.Popen object at 0x10048bdd0&gt;
&gt;&gt;&gt; total 8
-rw-------  1 root     wheel  652 Nov 29 09:07 000d94cfc78b4
srwxr-xr-x  1 nbastin  wheel    0 Nov 29 09:06 ics179
srwxr-xr-x  1 nbastin  wheel    0 Nov 29 09:06 icssuis501
drwx------  3 nbastin  wheel  102 Nov 29 09:06 launch-3ZniHd
drwx------  3 nbastin  wheel  102 Nov 29 09:06 launch-8QRgz2
drwx------  3 nbastin  wheel  102 Nov 29 09:06 launch-M5ppWp
drwx------  3 nbastin  wheel  102 Nov 29 09:06 launchd-137.ztQAmI
drwx------  2 nbastin  wheel   68 Nov 29 09:57 ssh-LreGlOZPAR
</snippet></ROW><ROW><id>4311356</id><snippet>shell = True</snippet></ROW><ROW><id>4311356</id><snippet>&gt;&gt;&gt; subprocess.Popen(['ls', '-l'], shell = True)
&lt;subprocess.Popen object at 0x10048bd90&gt;
&gt;&gt;&gt; 000d94cfc78b4       ics179          icssuis501      launch-3ZniHd       launch-8QRgz2       launch-M5ppWp       launchd-137.ztQAmI  ssh-LreGlOZPAR
</snippet></ROW><ROW><id>4311356</id><snippet>shell = True</snippet></ROW><ROW><id>4311356</id><snippet>args</snippet></ROW><ROW><id>4311362</id><snippet>compileall</snippet></ROW><ROW><id>4311362</id><snippet>python -m compileall path/to/project
</snippet></ROW><ROW><id>4311610</id><snippet>def simple_app(environ, start_response):
    status = '200 OK'
    response_headers = [('Content-type', 'text/plain')]
    start_response(status, response_headers)
    return ['Hello world!\n']

application = simple_app
</snippet></ROW><ROW><id>4311610</id><snippet>application</snippet></ROW><ROW><id>4311610</id><snippet>application</snippet></ROW><ROW><id>4311727</id><snippet>urllib</snippet></ROW><ROW><id>4311727</id><snippet>Content-Type</snippet></ROW><ROW><id>4311727</id><snippet>Content-Disposition</snippet></ROW><ROW><id>4312192</id><snippet>class PicklablePacket:
    """A container for scapy packets that can be pickled (in contrast
    to scapy packets themselves)."""
    def __init__(self, pkt):
        self.contents = str(pkt)
        self.time = pkt.time

    def __call__(self):
        """Get the original scapy packet."""
        pkt = scapy.Ether(self.contents)
        pkt.time = self.time
        return pkt
</snippet></ROW><ROW><id>4312192</id><snippet>scapy</snippet></ROW><ROW><id>4312192</id><snippet>Packet</snippet></ROW><ROW><id>4312192</id><snippet>Queue</snippet></ROW><ROW><id>4312192</id><snippet>PicklablePacket</snippet></ROW><ROW><id>4312192</id><snippet>__call__</snippet></ROW><ROW><id>4312192</id><snippet>Ethernet</snippet></ROW><ROW><id>4312405</id><snippet>json.loads</snippet></ROW><ROW><id>4312405</id><snippet>&gt;&gt;&gt; json.loads('"http:\\/\\/en.wikipedia.org\\/wiki\\/The_Truman_Show"')
'http://en.wikipedia.org/wiki/The_Truman_Show'
</snippet></ROW><ROW><id>4312515</id><snippet>izip()</snippet></ROW><ROW><id>4312515</id><snippet>for label, frame in izip(labels, data.T):
    dostuff()
</snippet></ROW><ROW><id>4312515</id><snippet>dostuff()</snippet></ROW><ROW><id>4312535</id><snippet>from sha import sha
print 'cRDtpNCeBiql5KOQsKVyrA0sAiA='.decode('base64').encode('hex')
print sha('1234').hexdigest()
</snippet></ROW><ROW><id>4312535</id><snippet>from hashlib import sha1
print 'cRDtpNCeBiql5KOQsKVyrA0sAiA='.decode('base64').encode('hex')
print sha1('1234').hexdigest()
</snippet></ROW><ROW><id>4312535</id><snippet>27*3/4</snippet></ROW><ROW><id>4312535</id><snippet>crypt</snippet></ROW><ROW><id>4312535</id><snippet>7110eda4d09e062aa5e4a390b0a572ac0d2c0220</snippet></ROW><ROW><id>4312535</id><snippet>1234</snippet></ROW><ROW><id>4312967</id><snippet>str(value1)</snippet></ROW><ROW><id>4313198</id><snippet>def reorder(seq, extractor, iterable_or_mapping):
    if hasattr(iterable_or_mapping, 'get'): # dict?
        rank = iterable_or_mapping
    else:
        rank = dict((v,i) for i,v in enumerate(iterable_or_mapping))
    return sorted(seq, key=lambda v: rank.get(extractor(v),-1))

# Sample application
filenames = '''
    cld_for_April_EISopt_1000.png     cld_for_August_EISopt_1000.png
    cld_for_December_EISopt_1000.png  cld_for_February_EISopt_1000.png
    cld_for_January_EISopt_1000.png   cld_for_July_EISopt_1000.png
    cld_for_June_EISopt_1000.png      cld_for_March_EISopt_1000.png
    cld_for_May_EISopt_1000.png       cld_for_November_EISopt_1000.png
    cld_for_October_EISopt_1000.png   cld_for_September_EISopt_1000.png
'''.split()

months = ['January', 'February', 'March', 'April', 'May', 'June',
          'July', 'August', 'September', 'October', 'November', 'December']

def get_month(filename):
    return filename.split('_')[2]

for file in reorder(filenames, get_month, months):
    print file

# cld_for_January_EISopt_1000.png
# cld_for_February_EISopt_1000.png
# cld_for_March_EISopt_1000.png
# ...
</snippet></ROW><ROW><id>4313282</id><snippet>from awesome_module import spam, ham, eggs, baked_beans
# awesome_module defines lots of other names, but they aren't pulled in.
</snippet></ROW><ROW><id>4313282</id><snippet>name</snippet></ROW><ROW><id>4313282</id><snippet>name</snippet></ROW><ROW><id>4313282</id><snippet>name</snippet></ROW><ROW><id>4313282</id><snippet>__import__</snippet></ROW><ROW><id>4313979</id><snippet>url()</snippet></ROW><ROW><id>4313979</id><snippet>url(r'([a-zA-Z0-9]+)/login/$', login, name='login'),
</snippet></ROW><ROW><id>4313979</id><snippet>{% url %}</snippet></ROW><ROW><id>4313979</id><snippet>{% url login slug %}
</snippet></ROW><ROW><id>4314205</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
&gt;&gt;&gt; b = np.array([5, 7, 12])
&gt;&gt;&gt; np.in1d( a, b)
array([False, False, False, False,  True, False,  True, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>4314701</id><snippet>class socket(object):
    oclass = otherclass()                

    @classmethod
    def ping(cls):
        return cls.oclass.send('PING')

socket.ping()
</snippet></ROW><ROW><id>4314701</id><snippet>socket().ping()
</snippet></ROW><ROW><id>4314726</id><snippet>$('#form').submit(function(){
    //Get form data
    //Transform into my custom set of vars
    //Redirect to form's ACTION with my querystring appended.
});
</snippet></ROW><ROW><id>4314821</id><snippet>
class Validation(unittest.TestCase):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __init__(self, methodName='runTest'):
    super(Validation, self).__init__(methodName)
    self.test_do_folders_equal = self.do_folders_equal
</snippet></ROW><ROW><id>4314821</id><snippet>
class Validation(unittest.TestCase):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def __init__(self, methodName='runTest'):
    super(Validation, self).__init__(methodName)
    setattr(self, 'test_do_folders_equal', getattr(self, 'do_folders_equal'))
</snippet></ROW><ROW><id>4315094</id><snippet>re.sub</snippet></ROW><ROW><id>4315094</id><snippet>match</snippet></ROW><ROW><id>4315158</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4315367</id><snippet>import binascii
import struct

text='8192323E'
print(struct.unpack('&lt;f',binascii.unhexlify(text))[0])
# 0.17438699305057526
</snippet></ROW><ROW><id>4315780</id><snippet>./configure --prefix=/opt/Python27</snippet></ROW><ROW><id>4315780</id><snippet>./configure --help</snippet></ROW><ROW><id>4315914</id><snippet>numpy.loadtxt(open("test.csv","rb"),delimiter=",",skiprows=1)
</snippet></ROW><ROW><id>4315914</id><snippet>import csv
import numpy
reader=csv.reader(open("test.csv","rb"),delimiter=',')
x=list(reader)
result=numpy.array(x).astype('float')
</snippet></ROW><ROW><id>4315936</id><snippet>array</snippet></ROW><ROW><id>4315936</id><snippet>data[0]</snippet></ROW><ROW><id>4315936</id><snippet>data.Price</snippet></ROW><ROW><id>4315936</id><snippet>   import json
   print "Content-type: application/json"
   print 
   response={'Price':54,'Cost':'99'}
   print(json.JSONEncoder().encode(response))
</snippet></ROW><ROW><id>4316386</id><snippet>venues</snippet></ROW><ROW><id>4316386</id><snippet>self.response.out.write(result.venues)</snippet></ROW><ROW><id>4316386</id><snippet>query = User.all()
users = query.fetch(10)
self.response.out.write("&lt;html&gt;&lt;body&gt;&lt;ol&gt;")
for user in users:
    self.response.out.write("&lt;li&gt;")
    self.response.out.write(user.userEmail)
    self.response.out.write("&lt;ul&gt;")
    # Iterate over the venues
    for venue in user.venues:
        self.response.out.write("&lt;li&gt;%s&lt;/li&gt;" % venue.venue)
    self.response.out.write("&lt;/ul&gt;&lt;/li&gt;")
self.response.out.write("&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;")
</snippet></ROW><ROW><id>4316389</id><snippet>#!/usr/bin/env python
# encoding: utf-8
"""
logClient2.py    
Created by Allister on 2010-11-30.
"""

import wx
import sqlite3

WINDOW_SIZE = (900,400)

class logClient(wx.Frame):
    def __init__(self, parent, id, title):

        wx.Frame.__init__(self, parent, id, title, size=WINDOW_SIZE)        

        self.toolbar = self.CreateToolBar()
        self.startLiveUpdate(None)

        self.Show(True)

    def startLiveUpdate(self, event):
        self.createToolbarItem("Refresh", "refresh.jpg", self.stopLiveUpdate)

    def stopLiveUpdate(self, event):
        self.createToolbarItem("Stop", "refresh2.jpg", self.startLiveUpdate)


    def createToolbarItem(self, label, imageName, method):
        self.toolbar.RemoveTool(1)
        self.toolbar.AddLabelTool(1, label, wx.Bitmap(imageName))
        self.toolbar.Realize()
        self.Bind(wx.EVT_TOOL, method, id=1)


if __name__ == '__main__':
    app = wx.App(False)
    logClient(None, -1, "Log Event Viewer")
    app.MainLoop()
</snippet></ROW><ROW><id>4316515</id><snippet>class PartitionerInvariantsFixture(object):
    def setUp(self):
        self.testDataSet = range(100) # create test-data-set
        super(PartitionInvariantsFixture, self).setUp()

    def test_partitioner(self):
        TestCase.assertEqual(self.testDataSet, 
                     chain.from_iterable(self.partitioner(self.testDataSet))

class MyClassTests(TestCase, PartitionerInvariantsFixture):
    partitioner = Partitioner
</snippet></ROW><ROW><id>4316907</id><snippet>x, fs, nbits = audiolab.wavread('schubert.wav')
audiolab.play(x, fs)
N = 4*fs    # four seconds of audio
X = scipy.fft(x[:N])
Xdb = 20*scipy.log10(scipy.absolute(X))
f = scipy.linspace(0, fs, N, endpoint=False)
pylab.plot(f, Xdb)
pylab.xlim(0, 5000)   # view up to 5 kHz

Y = X*H
y = scipy.real(scipy.ifft(Y))
</snippet></ROW><ROW><id>4316913</id><snippet>C:\Python&lt;version&gt;\</snippet></ROW><ROW><id>4317145</id><snippet>pixbuf_new_from_file</snippet></ROW><ROW><id>4317145</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>4317145</id><snippet>os.chdir</snippet></ROW><ROW><id>4317145</id><snippet>os.path.join</snippet></ROW><ROW><id>4317145</id><snippet>image.png</snippet></ROW><ROW><id>4317162</id><snippet>from itertools import chain
print tuple(chain(['a', 'b', 'c'], 'd', 'e'))
</snippet></ROW><ROW><id>4317162</id><snippet>('a', 'b', 'c', 'd','e')
</snippet></ROW><ROW><id>4317339</id><snippet>cur_dev</snippet></ROW><ROW><id>4317339</id><snippet>plink</snippet></ROW><ROW><id>4317339</id><snippet>0</snippet></ROW><ROW><id>4317339</id><snippet>read_dev</snippet></ROW><ROW><id>4317339</id><snippet>print(read_dev())</snippet></ROW><ROW><id>4317339</id><snippet>read_dev()</snippet></ROW><ROW><id>4317339</id><snippet>print(read_dev())</snippet></ROW><ROW><id>4317365</id><snippet>sudo tcpdump -c5 -vvv -w "file_name" host wiki or host wiki2
</snippet></ROW><ROW><id>4317365</id><snippet>&gt;&gt;&gt; subprocess.call(your_command.split())
</snippet></ROW><ROW><id>4317446</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urljoin('http://www.example.com/foo/bar/../../baz/bux/', '.')
'http://www.example.com/baz/bux/'
</snippet></ROW><ROW><id>4317446</id><snippet>doctest</snippet></ROW><ROW><id>4317446</id><snippet>import urlparse
import posixpath

def resolveComponents(url):
    """
    &gt;&gt;&gt; resolveComponents('http://www.example.com/foo/bar/../../baz/bux/')
    'http://www.example.com/baz/bux/'
    &gt;&gt;&gt; resolveComponents('http://www.example.com/some/path/../file.ext')
    'http://www.example.com/some/file.ext'
    """

    parsed = urlparse.urlparse(url)
    new_path = posixpath.normpath(parsed.path)
    if parsed.path.endswith('/'):
        # Compensate for issue1707768
        new_path += '/'
    cleaned = parsed._replace(path=new_path)
    return cleaned.geturl()
</snippet></ROW><ROW><id>4317820</id><snippet>raw_input</snippet></ROW><ROW><id>4317820</id><snippet>addEntry</snippet></ROW><ROW><id>4317820</id><snippet>addEntry</snippet></ROW><ROW><id>4317820</id><snippet>def addEntry():
    date=raw_input('date')
    amount=raw_input('amount')
    desc=raw_input('desc')
    account=raw_input('account')
    transact=open("transactions.txt", "w")
    print &gt;&gt;transact, date, amount, desc, account
    transact.close()
</snippet></ROW><ROW><id>4317820</id><snippet>addEntry</snippet></ROW><ROW><id>4317820</id><snippet>if userClickedAddEntryButton: # &lt;-- I made this up
    date=raw_input('date')
    amount=raw_input('amount')
    desc=raw_input('desc')
    account=raw_input('account')
    addEntry(date, amount, desc, account)        
</snippet></ROW><ROW><id>4318024</id><snippet>key_name = '%s|%s' % ('facebook', facebook_uid)
</snippet></ROW><ROW><id>4318024</id><snippet>key_name = '%s|%s' % ('myapp', email)
</snippet></ROW><ROW><id>4318024</id><snippet>class User(db.Model):
    accounts = StringListProperty() # ['facebook|1234', 'google|4321']
    email = StringProperty()
    password = StringProperty()
</snippet></ROW><ROW><id>4318182</id><snippet>import re
key_pat = re.compile( r"^(\D+)(\d+)$" )
def key( item ):
    m= key_pat.match( item )
    return m.group(1), int(m.group(2))
</snippet></ROW><ROW><id>4318182</id><snippet>key</snippet></ROW><ROW><id>4318182</id><snippet>r"^(.*)(\d{3,4})$"</snippet></ROW><ROW><id>4318182</id><snippet>&gt;&gt;&gt; data= ['asdf123', 'asdf1234', 'asdf111', 'asdf124']
&gt;&gt;&gt; data.sort( key=key )
&gt;&gt;&gt; data
['asdf111', 'asdf123', 'asdf124', 'asdf1234']
</snippet></ROW><ROW><id>4318562</id><snippet>/</snippet></ROW><ROW><id>4318562</id><snippet>Andrew_Smith_(author</snippet></ROW><ROW><id>4318562</id><snippet>education_professional)_0</snippet></ROW><ROW><id>4318562</id><snippet>bash-3.2# mkdir "Andrew_Smith_(author"
bash-3.2# python
&gt;&gt;&gt; a=open("Andrew_Smith_(author/education_professional)_0", 'w')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4318595</id><snippet>def isGoodFn(f):
    testData = [1,2,3,8,38,73,159]   # random test input
    goodEnough = 0.8 * len(testData)  # need 80% pass rate

    try:
        good = 0
        for i in testData:
            if type(f(i)) is int:
                good += 1
        return good &gt;= goodEnough
    except:
        return False
</snippet></ROW><ROW><id>4318851</id><snippet>ImageMenuItem</snippet></ROW><ROW><id>4318851</id><snippet>MenuItem</snippet></ROW><ROW><id>4318942</id><snippet>(&lt;div&gt;[^&lt;]*&lt;)(div&gt;)
</snippet></ROW><ROW><id>4318942</id><snippet>$1/$2
</snippet></ROW><ROW><id>4319037</id><snippet>img = gtk.Image()
img.set_from_file(filename)
new = gtk.ImageMenuItem(gtk.STOCK_NEW, 'New')
new.set_image(img)
</snippet></ROW><ROW><id>4319087</id><snippet>itertools.izip</snippet></ROW><ROW><id>4319087</id><snippet>using_tocoo_izip</snippet></ROW><ROW><id>4319087</id><snippet>import scipy.sparse
import random
import itertools

def using_nonzero(x):
    rows,cols = x.nonzero()
    for row,col in zip(rows,cols):
        ((row,col), x[row,col])

def using_coo(x):
    cx = scipy.sparse.coo_matrix(x)    
    for i,j,v in zip(cx.row, cx.col, cx.data):
        (i,j,v)

def using_tocoo(x):
    cx = x.tocoo()    
    for i,j,v in zip(cx.row, cx.col, cx.data):
        (i,j,v)

def using_tocoo_izip(x):
    cx = x.tocoo()    
    for i,j,v in itertools.izip(cx.row, cx.col, cx.data):
        (i,j,v)

N=200
x = scipy.sparse.lil_matrix( (N,N) )
for _ in xrange(N):
    x[random.randint(0,N-1),random.randint(0,N-1)]=random.randint(1,100)
</snippet></ROW><ROW><id>4319087</id><snippet>timeit</snippet></ROW><ROW><id>4319087</id><snippet>% python -mtimeit -s'import test' 'test.using_tocoo_izip(test.x)'
1000 loops, best of 3: 670 usec per loop
% python -mtimeit -s'import test' 'test.using_tocoo(test.x)'
1000 loops, best of 3: 706 usec per loop
% python -mtimeit -s'import test' 'test.using_coo(test.x)'
1000 loops, best of 3: 802 usec per loop
% python -mtimeit -s'import test' 'test.using_nonzero(test.x)'
100 loops, best of 3: 5.25 msec per loop
</snippet></ROW><ROW><id>4319256</id><snippet>import py_compile
py_compile.compile(r'/path/to/your/file.py')
</snippet></ROW><ROW><id>4319271</id><snippet>str.strip()</snippet></ROW><ROW><id>4319271</id><snippet>.lstrip</snippet></ROW><ROW><id>4319271</id><snippet>.rstrip</snippet></ROW><ROW><id>4319271</id><snippet>grades.append(lists[i].rstrip('\n').split(','))
</snippet></ROW><ROW><id>4319312</id><snippet>p *= alpha
u += p
</snippet></ROW><ROW><id>4319312</id><snippet>p = p*alpha</snippet></ROW><ROW><id>4319312</id><snippet>p*alpha</snippet></ROW><ROW><id>4319312</id><snippet>p</snippet></ROW><ROW><id>4319312</id><snippet>p*= alpha</snippet></ROW><ROW><id>4319312</id><snippet>op=</snippet></ROW><ROW><id>4319319</id><snippet>@contextmanager 
def scope(action): 
  yield action != 'bypass'

with scope('action_name') as s: 
  if s: 
    do_something() 
    ... 
do_some_other_stuff() 
</snippet></ROW><ROW><id>4319319</id><snippet>scope</snippet></ROW><ROW><id>4319319</id><snippet>__enter__</snippet></ROW><ROW><id>4319319</id><snippet>None</snippet></ROW><ROW><id>4319355</id><snippet>value</snippet></ROW><ROW><id>4319355</id><snippet>arduino.write(chr(0xFF))</snippet></ROW><ROW><id>4319385</id><snippet>hg push</snippet></ROW><ROW><id>4319407</id><snippet>&gt;&gt;&gt; c = 'f'
&gt;&gt;&gt; ord(c) - ord('a') + 1
6
</snippet></ROW><ROW><id>4319407</id><snippet>&gt;&gt;&gt; c = 'F'
&gt;&gt;&gt; ord(lower(c)) - ord('a') + 1
6
</snippet></ROW><ROW><id>4319407</id><snippet>&gt;&gt;&gt; c = 'f'
&gt;&gt;&gt; chr(ord(c) + 1)
'g'
</snippet></ROW><ROW><id>4319870</id><snippet>try:
    myFunc()
except ExceptionType:
    self.fail("myFunc() raised ExceptionType unexpectedly!")
</snippet></ROW><ROW><id>4320016</id><snippet>n_emails= [[1,'CAFEBABE010'],[2,'bfeafe3df1ds'],[3,'deadbeef101'],[5,'CAFEBABE010']]

d = {}
for id, hash in n_emails:
    if hash not in d:
        d[hash] = [id]
    else:
        d[hash].append(id)

for hash, ids in d:
    if len(ids) &gt; 1:
       print hash, ids
</snippet></ROW><ROW><id>4320016</id><snippet>for hash, count in select hash, count(id) as num from emails group by num having num &gt; 1:
    first = None
    for index, id in enumerate(select id from emails where hash=hash sort by desc id):
        if index == 0:
            first = id
            continue
        update emails set duplicate=first where id=id
</snippet></ROW><ROW><id>4320016</id><snippet>create table emails (id, hash, duplicate default null)
</snippet></ROW><ROW><id>4320265</id><snippet>nameList = [parseaddr(cc)[0] for cc in ccList]
</snippet></ROW><ROW><id>4320265</id><snippet>&gt;&gt;&gt; ccNames = [parseaddr(cc)[0] for cc in ccList]
&gt;&gt;&gt; "sender attached %s ccs which are %s, and %s" % (len(ccNames), ', '.join(ccNames[:-1]), ccNames[-1])
'sender attached 3 ccs which are az, cc777, and user11'
</snippet></ROW><ROW><id>4320313</id><snippet>soup.body.insert(len(soup.body.contents), yourelement)
</snippet></ROW><ROW><id>4320331</id><snippet>import urllib2
import cookielib

# load cookies from file
saved_cookies = cookielib.MozillaCookieJar('cookie_file_name')
saved_cookies.load()

opener = urllib2.build_opener() # your opener director

# do something...
opener.add_handler(urllib2.HTTPCookieProcessor(saved_cookies))
</snippet></ROW><ROW><id>4320540</id><snippet>MacPorts</snippet></ROW><ROW><id>4320540</id><snippet>MacPorts</snippet></ROW><ROW><id>4320540</id><snippet>$ sudo port selfupdate
$ sudo port outdated   # lists outdated ports
$ sudo port -u upgrade outdated  # upgrade outdated ports and remove old versions
</snippet></ROW><ROW><id>4320540</id><snippet>$ ls -l /opt/local/lib/mysql5/mysql
total 93824
-rw-r--r--  2 root  admin      1824 Nov 22 16:10 libdbug.a
-rw-r--r--  2 root  admin    161176 Nov 22 16:10 libheap.a
-rw-r--r--  2 root  admin    900552 Nov 22 16:10 libmyisam.a
-rw-r--r--  2 root  admin    136472 Nov 22 16:10 libmyisammrg.a
-rwxr-xr-x  2 root  admin   2871400 Nov 22 16:10 libmysqlclient.16.dylib*
-rw-r--r--  2 root  admin   3224032 Nov 22 16:10 libmysqlclient.a
lrwxr-xr-x  1 root  admin        23 Nov 22 16:10 libmysqlclient.dylib@ -&gt; libmysqlclient.16.dylib
-rwxr-xr-x  2 root  admin      1028 Nov 22 16:10 libmysqlclient.la*
-rwxr-xr-x  2 root  admin   2891208 Nov 22 16:10 libmysqlclient_r.16.dylib*
-rw-r--r--  2 root  admin   3248504 Nov 22 16:10 libmysqlclient_r.a
lrwxr-xr-x  1 root  admin        25 Nov 22 16:10 libmysqlclient_r.dylib@ -&gt; libmysqlclient_r.16.dylib
-rwxr-xr-x  2 root  admin      1040 Nov 22 16:10 libmysqlclient_r.la*
-rw-r--r--  2 root  admin  25939344 Nov 22 16:10 libmysqld.a
-rw-r--r--  2 root  admin   2643984 Nov 22 16:10 libmystrings.a
-rw-r--r--  2 root  admin    667720 Nov 22 16:10 libmysys.a
-rwxr-xr-x  2 root  admin   2039856 Nov 22 16:10 libndbclient.3.dylib*
-rw-r--r--  2 root  admin   3221192 Nov 22 16:10 libndbclient.a
lrwxr-xr-x  1 root  admin        20 Nov 22 16:10 libndbclient.dylib@ -&gt; libndbclient.3.dylib
-rwxr-xr-x  2 root  admin       976 Nov 22 16:10 libndbclient.la*
-rw-r--r--  2 root  admin     29568 Nov 22 16:10 libvio.a
drwxr-xr-x  2 root  admin       612 Nov 22 16:10 plugin/
</snippet></ROW><ROW><id>4320540</id><snippet>$ cd /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/
$ file _mysql.so
_mysql.so: Mach-O universal binary with 2 architectures
_mysql.so (for architecture x86_64):    Mach-O 64-bit bundle x86_64
_mysql.so (for architecture i386):  Mach-O bundle i386
$ otool -L _mysql.so  # this shows which MySQL client lib the Python DB adapter is dynamically linked to
_mysql.so:
    /opt/local/lib/mysql5/mysql/libmysqlclient_r.16.dylib (compatibility version 17.0.0, current version 17.0.0)
    /opt/local/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)
    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)
    /opt/local/lib/libssl.0.9.8.dylib (compatibility version 0.9.8, current version 0.9.8)
    /opt/local/lib/libcrypto.0.9.8.dylib (compatibility version 0.9.8, current version 0.9.8)
$ cd /opt/local/lib/mysql5/mysql/
$ file libmysqlclient_r.16.dylib 
libmysqlclient_r.16.dylib: Mach-O universal binary with 2 architectures
libmysqlclient_r.16.dylib (for architecture i386):  Mach-O dynamically linked shared library i386
libmysqlclient_r.16.dylib (for architecture x86_64):    Mach-O 64-bit dynamically linked shared library x86_64
</snippet></ROW><ROW><id>4320540</id><snippet>MacPorts</snippet></ROW><ROW><id>4320540</id><snippet>$ /opt/local/bin/python2.6 -V
Python 2.6.6
$ /opt/local/bin/python2.6 -c 'import MySQLdb; print(MySQLdb._mysql.__file__)'
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py:34: DeprecationWarning: the sets module is deprecated
  from sets import ImmutableSet
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/_mysql.so
</snippet></ROW><ROW><id>4320706</id><snippet>def cslfilter(c_np.ndarray b, c_np.ndarray a, c_np.ndarray x):
    """Fast version of slfilter for a set of frames and filter coefficients.
    More precisely, given rank 2 arrays for coefficients and input, this
    computes:

    for i in range(x.shape[0]):
        y[i] = lfilter(b[i], a[i], x[i])

    This is mostly useful for processing on a set of windows with variable
    filters, e.g. to compute LPC residual from a signal chopped into a set of
    windows.

    Parameters
    ----------
        b: array
            recursive coefficients
        a: array
            non-recursive coefficients
        x: array
            signal to filter

    Note
    ----

    This is a specialized function, and does not handle other types than
    double, nor initial conditions."""

    cdef int na, nb, nfr, i, nx
    cdef double *raw_x, *raw_a, *raw_b, *raw_y
    cdef c_np.ndarray[double, ndim=2] tb
    cdef c_np.ndarray[double, ndim=2] ta
    cdef c_np.ndarray[double, ndim=2] tx
    cdef c_np.ndarray[double, ndim=2] ty

    dt = np.common_type(a, b, x)

    if not dt == np.float64:
        raise ValueError("Only float64 supported for now")

    if not x.ndim == 2:
        raise ValueError("Only input of rank 2 support")

    if not b.ndim == 2:
        raise ValueError("Only b of rank 2 support")

    if not a.ndim == 2:
        raise ValueError("Only a of rank 2 support")

    nfr = a.shape[0]
    if not nfr == b.shape[0]:
        raise ValueError("Number of filters should be the same")

    if not nfr == x.shape[0]:
        raise ValueError, \
              "Number of filters and number of frames should be the same"

    tx = np.ascontiguousarray(x, dtype=dt)
    ty = np.ones((x.shape[0], x.shape[1]), dt)

    na = a.shape[1]
    nb = b.shape[1]
    nx = x.shape[1]

    ta = np.ascontiguousarray(np.copy(a), dtype=dt)
    tb = np.ascontiguousarray(np.copy(b), dtype=dt)

    raw_x = &lt;double*&gt;tx.data
    raw_b = &lt;double*&gt;tb.data
    raw_a = &lt;double*&gt;ta.data
    raw_y = &lt;double*&gt;ty.data

    for i in range(nfr):
        filter_double(raw_b, nb, raw_a, na, raw_x, nx, raw_y)
        raw_b += nb
        raw_a += na
        raw_x += nx
        raw_y += nx

    return ty
</snippet></ROW><ROW><id>4320739</id><snippet>@check_login</snippet></ROW><ROW><id>4320739</id><snippet>check_login()</snippet></ROW><ROW><id>4320739</id><snippet>home = check_login()(home)</snippet></ROW><ROW><id>4320739</id><snippet>def check_login(method):
    @functools.wraps(method)
    def wrapper(request, *args, **kwargs):
        if request.META['username'] == "blah"
            login(request, user) # where does user come from?!
        return method(request, *args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>4320888</id><snippet>'-blog__name'</snippet></ROW><ROW><id>4321045</id><snippet>logging.setLevel()</snippet></ROW><ROW><id>4321045</id><snippet>WARN</snippet></ROW><ROW><id>4321046</id><snippet>Image</snippet></ROW><ROW><id>4321046</id><snippet>StringIO</snippet></ROW><ROW><id>4321046</id><snippet>image.paste(Image.open(StringIO(f)), (0,0, 50, 50))</snippet></ROW><ROW><id>4321115</id><snippet>widget.config(highlightbackground=COLOR)</snippet></ROW><ROW><id>4321157</id><snippet>print 3.
  1415926

print 'Hello, world'
  .lower()
</snippet></ROW><ROW><id>4321196</id><snippet>max(len(k.split()) for k in d.keys())
</snippet></ROW><ROW><id>4321326</id><snippet>resize</snippet></ROW><ROW><id>4321326</id><snippet>thumbnail</snippet></ROW><ROW><id>4321326</id><snippet>thumbnail</snippet></ROW><ROW><id>4321326</id><snippet>resize</snippet></ROW><ROW><id>4321326</id><snippet>thumbnail</snippet></ROW><ROW><id>4321326</id><snippet>old_aspect = float(imagex)/float(imagey)
new_aspect = float(width)/float(height)
if old_aspect &lt; new_aspect:
  height = int(width / old_aspect)
else:
  width = int(height * old_aspect)
</snippet></ROW><ROW><id>4321509</id><snippet>class delegate(object):

    def __init__(self, func):
        self.callbacks = []
        self.basefunc = func

    def __iadd__(self, func):
        if callable(func):
            self.__isub__(func)
            self.callbacks.append(func)
        return self

    def callback(self, func):
        if callable(func):
            self.__isub__(func)
            self.callbacks.append(func)
        return func

    def __isub__(self, func):
        try:
            self.callbacks.remove(func)
        except ValueError:
            pass
        return self

    def __call__(self, *args, **kwargs):
        result = self.basefunc(*args, **kwargs)
        for func in self.callbacks:
            newresult = func(result)
            result = result if newresult is None else newresult
        return result
</snippet></ROW><ROW><id>4321509</id><snippet>@delegate</snippet></ROW><ROW><id>4321509</id><snippet>@delegate
def intfactory(num):
    return int(num)
</snippet></ROW><ROW><id>4321509</id><snippet>+=</snippet></ROW><ROW><id>4321509</id><snippet>-=</snippet></ROW><ROW><id>4321509</id><snippet>funcname.callback</snippet></ROW><ROW><id>4321509</id><snippet>@intfactory.callback
def notify(num):
    print "notify:", num

def increment(num):
    return num+1

intfactory += increment
intfactory += lambda num: num * 2

print intfactory(3)   # outputs 8
</snippet></ROW><ROW><id>4321873</id><snippet>import time
while True:
    print "fetching"
    time.sleep(10)
</snippet></ROW><ROW><id>4321873</id><snippet>time.sleep</snippet></ROW><ROW><id>4321964</id><snippet>Model.get_or_insert</snippet></ROW><ROW><id>4322780</id><snippet>&gt;&gt;&gt; def isplit(iterable,spliters):
    return [list(g) for k,g in itertools.groupby(iterable,lambda x:x in splitters) if not k]

&gt;&gt;&gt; isplit(L,(None,))
[[1, 4], [6, 9], [3, 9, 4]]
&gt;&gt;&gt; isplit(L,(None,9))
[[1, 4], [6], [3], [4]]
</snippet></ROW><ROW><id>4322780</id><snippet>import timeit    

kabie=("isplit_kabie",
"""
import itertools
def isplit_kabie(iterable,splitters):
    return [list(g) for k,g in itertools.groupby(iterable,lambda x:x in splitters) if not k]
""" )

ssplit=("ssplit",
"""
def ssplit(seq,splitters):
    seq=list(seq)
    if splitters and seq:
        result=[]
        begin=0
        for end in range(len(seq)):
            if seq[end] in splitters:
                if end &gt; begin:
                    result.append(seq[begin:end])
                begin=end+1
        if begin&lt;len(seq):
            result.append(seq[begin:])
        return result
    return [seq]
""" )

ssplit2=("ssplit2",
"""
def ssplit2(seq,splitters):
    seq=list(seq)
    if splitters and seq:
        splitters=set(splitters).intersection(seq)
        if splitters:
            result=[]
            begin=0
            for end in range(len(seq)):
                if seq[end] in splitters:
                    if end &gt; begin:
                        result.append(seq[begin:end])
                    begin=end+1
            if begin&lt;len(seq):
                result.append(seq[begin:])
            return result
    return [seq]
""" )

emile=("magicsplit",
"""
def _itersplit(l, *splitters):
    current = []
    for item in l:
        if item in splitters:
            yield current
            current = []
        else:
            current.append(item)
    yield current

def magicsplit(l, splitters):
    return [subl for subl in _itersplit(l, *splitters) if subl]
""" )

emile_improved=("magicsplit2",
"""
def _itersplit(l, *splitters):
    current = []
    for item in l:
        if item in splitters:
            if current:
                yield current
                current = []
        else:
            current.append(item)
    if current:
        yield current

def magicsplit2(l, splitters):
    if splitters and l:
        return [i for i in _itersplit(l, *splitters)]
    return [list(l)]
""" )

karl=("ssplit_karl",
"""
def ssplit_karl(original,splitters):
    indices = [i for (i, x) in enumerate(original) if x in splitters]
    ends = indices + [len(original)]
    begins = [0] + [x + 1 for x in indices]
    return [original[begin:end] for (begin, end) in zip(begins, ends)]
""" )

ryan=("split_on",
"""
from functools import reduce
def split_on (seq, delims, remove_empty=True):
    '''Split seq into lists using delims as a delimiting elements.

    For example, split_on(delims=2, list=xrange(0,5)) yields [ [0,1], [3,4] ].

    delims can be either a single delimiting element or a list or
    tuple of multiple delimiting elements. If you wish to use a list
    or tuple as a delimiter, you must enclose it in another list or
    tuple.

    If remove_empty is False, then consecutive delimiter elements or delimiter elements at the beginning or end of the longlist'''
    delims=set(delims)
    def reduce_fun(lists, elem):
        if elem in delims:
            if remove_empty and lists[-1] == []:
                # Avoid adding multiple empty lists
                pass
            else:
                lists.append([])
        else:
            lists[-1].append(elem)
        return lists
    result_list = reduce(reduce_fun, seq, [ [], ])
    # Maybe remove trailing empty list
    if remove_empty and result_list[-1] == []:
        result_list.pop()
    return result_list
""" )

cases=(kabie, emile, emile_improved, ssplit ,ssplit2 ,ryan)

data=(
    ([1, 4, None, 6, 9, None, 3, 9, 4 ],(None,)),
    ([1, 4, None, 6, 9, None, 3, 9, 4 ]*5,{None,9,7}),
    ((),()),
    (range(1000),()),
    ("Split me",('','')),
    ("split me "*100,' '),
    ("split me,"*100,' ,'*20),
    ("split me, please!"*100,' ,!'),
    (range(100),range(100)),
    (range(100),range(101,1000)),
    (range(100),range(50,150)),
    (list(range(100))*30,(99,)),
    )

params="seq,splitters"

def benchmark(func,code,data,params='',times=10000,rounds=3,debug=''):
    assert(func.isidentifier())
    tester = timeit.Timer(stmt='{func}({params})'.format(
                                func=func,params=params),
                          setup="{code}\n".format(code=code)+
            (params and "{params}={data}\n".format(params=params,data=data)) +
            (debug and """ret=repr({func}({params}))
print({func}.__name__.rjust(16),":",ret[:30]+"..."+ret[-15:] if len(ret)&gt;50 else ret)
                       """.format(func=func,params=params)))
    results = [tester.timeit(times) for i in range(rounds)]
    if not debug:
        print("{:&gt;16s} takes:{:6.4f},avg:{:.2e},best:{:.4f},worst:{:.4f}".format(
            func,sum(results),sum(results)/times/rounds,min(results),max(results)))

def testAll(cases,data,params='',times=10000,rounds=3,debug=''):
    if debug:
        times,rounds = 1,1
    for dat in data:
        sdat = tuple(map(repr,dat))
        print("{}x{} times:".format(times,rounds),
              ','.join("{}".format(d[:8]+"..."+d[-5:] if len(d)&gt;16 else d)for d in map(repr,dat)))
        for func,code in cases:
            benchmark(func,code,dat,params,times,rounds,debug)

if __name__=='__main__':
    testAll(cases,data,params,500,10)#,debug=True)
</snippet></ROW><ROW><id>4322780</id><snippet>500x10 times: [1, 4, N...9, 4],(None,)
    isplit_kabie takes:0.0605,avg:1.21e-05,best:0.0032,worst:0.0074
      magicsplit takes:0.0287,avg:5.74e-06,best:0.0016,worst:0.0036
     magicsplit2 takes:0.0174,avg:3.49e-06,best:0.0017,worst:0.0018
          ssplit takes:0.0149,avg:2.99e-06,best:0.0015,worst:0.0016
         ssplit2 takes:0.0198,avg:3.96e-06,best:0.0019,worst:0.0021
        split_on takes:0.0229,avg:4.59e-06,best:0.0023,worst:0.0024
500x10 times: [1, 4, N...9, 4],{9, None, 7}
    isplit_kabie takes:0.1448,avg:2.90e-05,best:0.0144,worst:0.0146
      magicsplit takes:0.0636,avg:1.27e-05,best:0.0063,worst:0.0065
     magicsplit2 takes:0.0891,avg:1.78e-05,best:0.0064,worst:0.0162
          ssplit takes:0.0593,avg:1.19e-05,best:0.0058,worst:0.0061
         ssplit2 takes:0.1004,avg:2.01e-05,best:0.0069,worst:0.0142
        split_on takes:0.0929,avg:1.86e-05,best:0.0090,worst:0.0096
500x10 times: (),()
    isplit_kabie takes:0.0041,avg:8.14e-07,best:0.0004,worst:0.0004
      magicsplit takes:0.0040,avg:8.04e-07,best:0.0004,worst:0.0004
     magicsplit2 takes:0.0022,avg:4.35e-07,best:0.0002,worst:0.0002
          ssplit takes:0.0023,avg:4.59e-07,best:0.0002,worst:0.0003
         ssplit2 takes:0.0023,avg:4.53e-07,best:0.0002,worst:0.0002
        split_on takes:0.0072,avg:1.45e-06,best:0.0007,worst:0.0009
500x10 times: range(0, 1000),()
    isplit_kabie takes:0.8892,avg:1.78e-04,best:0.0881,worst:0.0895
      magicsplit takes:0.6614,avg:1.32e-04,best:0.0654,worst:0.0673
     magicsplit2 takes:0.0958,avg:1.92e-05,best:0.0094,worst:0.0099
          ssplit takes:0.0943,avg:1.89e-05,best:0.0093,worst:0.0095
         ssplit2 takes:0.0943,avg:1.89e-05,best:0.0093,worst:0.0096
        split_on takes:1.3348,avg:2.67e-04,best:0.1328,worst:0.1340
500x10 times: 'Split me',('', '')
    isplit_kabie takes:0.0234,avg:4.68e-06,best:0.0023,worst:0.0024
      magicsplit takes:0.0126,avg:2.52e-06,best:0.0012,worst:0.0013
     magicsplit2 takes:0.0138,avg:2.76e-06,best:0.0013,worst:0.0015
          ssplit takes:0.0119,avg:2.39e-06,best:0.0012,worst:0.0012
         ssplit2 takes:0.0075,avg:1.50e-06,best:0.0007,worst:0.0008
        split_on takes:0.0191,avg:3.83e-06,best:0.0018,worst:0.0023
500x10 times: 'split m... me ',' '
    isplit_kabie takes:2.0803,avg:4.16e-04,best:0.2060,worst:0.2098
      magicsplit takes:0.9219,avg:1.84e-04,best:0.0920,worst:0.0925
     magicsplit2 takes:1.0221,avg:2.04e-04,best:0.1018,worst:0.1034
          ssplit takes:0.8294,avg:1.66e-04,best:0.0818,worst:0.0834
         ssplit2 takes:0.9911,avg:1.98e-04,best:0.0983,worst:0.1014
        split_on takes:1.5672,avg:3.13e-04,best:0.1543,worst:0.1694
500x10 times: 'split m... me,',' , , , ... , ,'
    isplit_kabie takes:2.1847,avg:4.37e-04,best:0.2164,worst:0.2275
      magicsplit takes:3.7135,avg:7.43e-04,best:0.3693,worst:0.3783
     magicsplit2 takes:3.8104,avg:7.62e-04,best:0.3795,worst:0.3884
          ssplit takes:0.9522,avg:1.90e-04,best:0.0939,worst:0.0956
         ssplit2 takes:1.0140,avg:2.03e-04,best:0.1009,worst:0.1023
        split_on takes:1.5747,avg:3.15e-04,best:0.1563,worst:0.1615
500x10 times: 'split m...ase!',' ,!'
    isplit_kabie takes:3.3443,avg:6.69e-04,best:0.3324,worst:0.3380
      magicsplit takes:2.0594,avg:4.12e-04,best:0.2054,worst:0.2076
     magicsplit2 takes:2.1850,avg:4.37e-04,best:0.2180,worst:0.2191
          ssplit takes:1.4881,avg:2.98e-04,best:0.1484,worst:0.1493
         ssplit2 takes:1.8779,avg:3.76e-04,best:0.1868,worst:0.1920
        split_on takes:2.9596,avg:5.92e-04,best:0.2946,worst:0.2980
500x10 times: range(0, 100),range(0, 100)
    isplit_kabie takes:0.9445,avg:1.89e-04,best:0.0933,worst:0.1023
      magicsplit takes:0.5878,avg:1.18e-04,best:0.0583,worst:0.0593
     magicsplit2 takes:0.5597,avg:1.12e-04,best:0.0554,worst:0.0588
          ssplit takes:0.8568,avg:1.71e-04,best:0.0852,worst:0.0874
         ssplit2 takes:0.1399,avg:2.80e-05,best:0.0121,worst:0.0242
        split_on takes:0.1462,avg:2.92e-05,best:0.0145,worst:0.0148
500x10 times: range(0, 100),range(101, 1000)
    isplit_kabie takes:19.9749,avg:3.99e-03,best:1.9789,worst:2.0330
      magicsplit takes:9.4997,avg:1.90e-03,best:0.9369,worst:0.9640
     magicsplit2 takes:9.4394,avg:1.89e-03,best:0.9267,worst:0.9665
          ssplit takes:19.2363,avg:3.85e-03,best:1.8936,worst:1.9516
         ssplit2 takes:0.2032,avg:4.06e-05,best:0.0201,worst:0.0205
        split_on takes:0.3329,avg:6.66e-05,best:0.0323,worst:0.0344
500x10 times: range(0, 100),range(50, 150)
    isplit_kabie takes:1.1394,avg:2.28e-04,best:0.1130,worst:0.1153
      magicsplit takes:0.7288,avg:1.46e-04,best:0.0721,worst:0.0760
     magicsplit2 takes:0.7220,avg:1.44e-04,best:0.0705,worst:0.0774
          ssplit takes:1.0835,avg:2.17e-04,best:0.1059,worst:0.1116
         ssplit2 takes:0.1092,avg:2.18e-05,best:0.0105,worst:0.0116
        split_on takes:0.1639,avg:3.28e-05,best:0.0162,worst:0.0168
500x10 times: [0, 1, 2..., 99],(99,)
    isplit_kabie takes:3.2579,avg:6.52e-04,best:0.3225,worst:0.3360
      magicsplit takes:2.2937,avg:4.59e-04,best:0.2274,worst:0.2344
     magicsplit2 takes:2.6054,avg:5.21e-04,best:0.2587,worst:0.2642
          ssplit takes:1.5251,avg:3.05e-04,best:0.1495,worst:0.1729
         ssplit2 takes:1.7298,avg:3.46e-04,best:0.1696,worst:0.1858
        split_on takes:4.1041,avg:8.21e-04,best:0.4033,worst:0.4291
</snippet></ROW><ROW><id>4322935</id><snippet>equal</snippet></ROW><ROW><id>4322935</id><snippet>greater</snippet></ROW><ROW><id>4322935</id><snippet>sort()</snippet></ROW><ROW><id>4322935</id><snippet>sorted()</snippet></ROW><ROW><id>4323478</id><snippet>{% for p in posts %}
    &lt;div style="width:{% myrandomtag 0 100 %}px;"&gt;
    blah
    &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>4323757</id><snippet>sudo</snippet></ROW><ROW><id>4323992</id><snippet>range</snippet></ROW><ROW><id>4323992</id><snippet>break</snippet></ROW><ROW><id>4323992</id><snippet>xrange</snippet></ROW><ROW><id>4323992</id><snippet>range</snippet></ROW><ROW><id>4323992</id><snippet>some_condition</snippet></ROW><ROW><id>4323992</id><snippet>some_condition</snippet></ROW><ROW><id>4323992</id><snippet>if some_condition:
  for i in xrange(10):
    do_something()
</snippet></ROW><ROW><id>4324173</id><snippet>testPackage\</snippet></ROW><ROW><id>4324529</id><snippet>datetime.now()</snippet></ROW><ROW><id>4324718</id><snippet>mystr = mystr[:5] + mystr[6:]
</snippet></ROW><ROW><id>4324823</id><snippet>str.translate</snippet></ROW><ROW><id>4324823</id><snippet>&gt;&gt;&gt; mpa = dict.fromkeys(range(32))
&gt;&gt;&gt; 'abc\02de'.translate(mpa)
'abcde'
</snippet></ROW><ROW><id>4324974</id><snippet>webbrowser.get()</snippet></ROW><ROW><id>4325431</id><snippet>import getpass
print getpass.getuser()
</snippet></ROW><ROW><id>4325545</id><snippet>distance</snippet></ROW><ROW><id>4326286</id><snippet>p.join()</snippet></ROW><ROW><id>4326286</id><snippet>p.join</snippet></ROW><ROW><id>4326286</id><snippet>doFirstMP</snippet></ROW><ROW><id>4326286</id><snippet>import time, random
from multiprocessing import Process, Manager

class MP_Stuff():
    def __init__(self, parent, id):
        time.sleep(1 + random.random()*5) # simulate data processing
        print id , "done"
        parent.killMP(id)

class ParamHandler():    
    def doFirstMP(self, IDs):
        self.mps_in_process = []
        self.ID_List = Manager().list(IDs)
        id = self.ID_List.pop(0)
        p = Process(target=MP_Stuff, args=(self, id))
        self.mps_in_process.append(id)
        p.start()
        p.join()
        print "joined"

    def doMP(self):
        for tmp in range(3): # nr of concurrent processes
            print self.ID_List
            if len(self.ID_List) &gt; 0:
                id = self.ID_List.pop(0)
                p = Process(target=MP_Stuff, args=(self, id))
                self.mps_in_process.append(id)
                p.start()

    def killMP(self, kill_id):
        print "kill", kill_id
        self.mps_in_process.remove(kill_id)
        self.doMP()

if __name__ == '__main__':
    ID_List = [1,2,3,4,5,6]
    paramSet = ParamHandler()
    paramSet.doFirstMP(ID_List)
</snippet></ROW><ROW><id>4326491</id><snippet>import scipy.optimize as so

def func(x):
    return -x**3+1

# This finds the value of x such that func(x) = x, that is, where
# -x**3 + 1 = x
print(so.fixed_point(func,0))
# 0.682327803828
</snippet></ROW><ROW><id>4326491</id><snippet>fixed_point</snippet></ROW><ROW><id>4326491</id><snippet>scipy</snippet></ROW><ROW><id>4326491</id><snippet>In [63]: import scipy.optimize

In [64]: scipy.optimize
Out[64]: &lt;module 'scipy.optimize' from '/usr/lib/python2.6/dist-packages/scipy/optimize/__init__.pyc'&gt;
</snippet></ROW><ROW><id>4326491</id><snippet>def fixed_point(func, x0, args=(), xtol=1e-8, maxiter=500):
    """Find the point where func(x) == x

    Given a function of one or more variables and a starting point, find a
    fixed-point of the function: i.e. where func(x)=x.

    Uses Steffensen's Method using Aitken's Del^2 convergence acceleration.
    See Burden, Faires, "Numerical Analysis", 5th edition, pg. 80

    Example
    -------
    &gt;&gt;&gt; from numpy import sqrt, array
    &gt;&gt;&gt; from scipy.optimize import fixed_point
    &gt;&gt;&gt; def func(x, c1, c2):
            return sqrt(c1/(x+c2))
    &gt;&gt;&gt; c1 = array([10,12.])
    &gt;&gt;&gt; c2 = array([3, 5.])
    &gt;&gt;&gt; fixed_point(func, [1.2, 1.3], args=(c1,c2))
    array([ 1.4920333 ,  1.37228132])

    See also:

      fmin, fmin_powell, fmin_cg,
             fmin_bfgs, fmin_ncg -- multivariate local optimizers
      leastsq -- nonlinear least squares minimizer

      fmin_l_bfgs_b, fmin_tnc,
             fmin_cobyla -- constrained multivariate optimizers

      anneal, brute -- global optimizers

      fminbound, brent, golden, bracket -- local scalar minimizers

      fsolve -- n-dimenstional root-finding

      brentq, brenth, ridder, bisect, newton -- one-dimensional root-finding

    """
    if not isscalar(x0):
        x0 = asarray(x0)
        p0 = x0
        for iter in range(maxiter):
            p1 = func(p0, *args)
            p2 = func(p1, *args)
            d = p2 - 2.0 * p1 + p0
            p = where(d == 0, p2, p0 - (p1 - p0)*(p1-p0) / d)
            relerr = where(p0 == 0, p, (p-p0)/p0)
            if all(relerr &lt; xtol):
                return p
            p0 = p
    else:
        p0 = x0
        for iter in range(maxiter):
            p1 = func(p0, *args)
            p2 = func(p1, *args)
            d = p2 - 2.0 * p1 + p0
            if d == 0.0:
                return p2
            else:
                p = p0 - (p1 - p0)*(p1-p0) / d
            if p0 == 0:
                relerr = p
            else:
                relerr = (p-p0)/p0
            if relerr &lt; xtol:
                return p
            p0 = p
    raise RuntimeError, "Failed to converge after %d iterations, value is %s" % (maxiter,p)
</snippet></ROW><ROW><id>4326606</id><snippet>zip</snippet></ROW><ROW><id>4326606</id><snippet>dtg1 = mdtimes[:]</snippet></ROW><ROW><id>4326656</id><snippet>with open('vlgaChcWaves.txt', 'r+') as vlgaStream:
  for line in vlgaStream:
    dosomethingwith(line)
</snippet></ROW><ROW><id>4326729</id><snippet>d.keys()[i]</snippet></ROW><ROW><id>4326729</id><snippet>d.values()[i]</snippet></ROW><ROW><id>4326729</id><snippet>d.items()[i]</snippet></ROW><ROW><id>4326729</id><snippet>collections.orderdDict</snippet></ROW><ROW><id>4326729</id><snippet>l = [("blue", "5"), ("red", "6"), ("yellow", "8")]
</snippet></ROW><ROW><id>4326752</id><snippet>import scipy.optimize as optimize
import numpy as np

def func(x):
    return np.cos(x)**2 + 6 - x

# 0&lt;=cos(x)**2&lt;=1, so the root has to be near x=7
print(optimize.bisect(func,6,8))
# 6.77609231632
</snippet></ROW><ROW><id>4326752</id><snippet>optimize.bisect</snippet></ROW><ROW><id>4326752</id><snippet>_zeros._bisect</snippet></ROW><ROW><id>4326783</id><snippet>db.collection.find({$where: "var d = new Date(this.dateProperty); return d.getUTCHours() == 15 &amp;&amp; d.getUTCMinutes() == 0 &amp;&amp; d.getUTCSeconds() == 0"})
</snippet></ROW><ROW><id>4326783</id><snippet>db.collection.find({dateProperty: /.*15:00.*/})
</snippet></ROW><ROW><id>4326783</id><snippet>date</snippet></ROW><ROW><id>4326783</id><snippet>{y:2010,m:9,d:21,h:14,i:16,s:17}</snippet></ROW><ROW><id>4326783</id><snippet>{h:14}</snippet></ROW><ROW><id>4326946</id><snippet>class LogSenderHandler(InboundMailHandler):
    def receive(self, mail_message):
        logging.info("Received a message from: " + mail_message.sender)
        sender_address = "sender@email.com"
        subject = "Processing message"
        user_address = 'my@email.com
        body = mail_message.original
        mail.send_mail(sender_address, user_address, subject, body)
</snippet></ROW><ROW><id>4327098</id><snippet>delta = datetime.datetime(2011, 05, 05) - datetime.datetime.now()
</snippet></ROW><ROW><id>4327098</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>4327098</id><snippet>delta.days</snippet></ROW><ROW><id>4327098</id><snippet>delta.seconds/3600.</snippet></ROW><ROW><id>4327098</id><snippet>delta.seconds//3600</snippet></ROW><ROW><id>4327148</id><snippet>win32ui</snippet></ROW><ROW><id>4327190</id><snippet>class Hello: 
    ## \brief Short description.
    # Longer description. 
    # \param self
    # \param name
    def __init__(self, name):         
        dosomething(12)

    def dosomething(x):         
        dosomethingelse
</snippet></ROW><ROW><id>4328056</id><snippet>str</snippet></ROW><ROW><id>4328056</id><snippet>bytes</snippet></ROW><ROW><id>4328056</id><snippet>True</snippet></ROW><ROW><id>4328056</id><snippet>False</snippet></ROW><ROW><id>4328056</id><snippet>pot = [2**x for x in range(8)]  # Powers of 2 (bytes with one 1 and seven 0s)
bitvalues = {}
for x in range(256):
    bitvalues[chr(x)] = [(x &amp; y) != 0 for y in pot]
</snippet></ROW><ROW><id>4328056</id><snippet>bitvalues[tuple((x &amp; y) != 0 for y in pot)] = chr(x)
</snippet></ROW><ROW><id>4328056</id><snippet>"".join("1" if (x&amp;y) else "0" for y in pot)
</snippet></ROW><ROW><id>4328158</id><snippet>set_hint_string('append', '')</snippet></ROW><ROW><id>4328183</id><snippet>&gt;&gt;&gt; alldiv = soup.findAll('div', { "class" : "content_page" })
&gt;&gt;&gt; for div in alldiv: print div.a
... 
&lt;a href="/earth" class="nametessera"&gt;earth&lt;/a&gt;
&lt;a href="/world" class="nametessera"&gt;world&lt;/a&gt;
&lt;a href="/planet" class="nametessera"&gt;planet&lt;/a&gt;
&gt;&gt;&gt; for div in alldiv: print div.a['href']
... 
/earth
/world
/plan
</snippet></ROW><ROW><id>4328183</id><snippet>allHref = soup.findAll('a', { "class" : "nametessera" })
</snippet></ROW><ROW><id>4328295</id><snippet>&lt;form&gt;

    &lt;input type="text" name="page"&gt;
    &lt;input type="submit"&gt;

&lt;/form&gt;
</snippet></ROW><ROW><id>4328332</id><snippet>&gt;&gt;&gt; line=[['10', '13\n'], ['3', '4\n'], ['5', '3\n'], ['1', '13']]
&gt;&gt;&gt; map(lambda X:([int(X[0])+1, int(X[1]) +1]),line)
[[11, 14], [4, 5], [6, 4], [2, 14]]
</snippet></ROW><ROW><id>4328338</id><snippet>import cookielib
import urllib
import urllib2

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
resp = opener.open('http://www.biocidecity.com')

theurl = 'http://www.biocidecity.com/index.php'
body={'username':'someusername','password':'somepassword', 'login' : '1'}
txdata = urllib.urlencode(body) txheaders =  {'Referer': 'http://www.biocidecity.com/index.php'}


try:
    req = urllib2.Request(theurl, txdata, txheaders)
    handle = opener.open(req) 
    HTMLSource = handle.read()
    f = file('test.html', 'w')
    f.write(HTMLSource)
    f.close()

except IOError, e:
    print 'We failed to open "%s".' % theurl
    if hasattr(e, 'code'):
        print 'We failed with error code - %s.' % e.code
    elif hasattr(e, 'reason'):
        print "The error object has the following 'reason' attribute :", e.reason
        print "This usually means the server doesn't exist, is down, or we don't have an internet connection."
        sys.exit()

else:
    print 'Here are the headers of the page :'
    print handle.info() 
</snippet></ROW><ROW><id>4328402</id><snippet>from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):

    def handle_starttag(self, tag, attrs):
        attr = dict(attrs)
        if attrs["class"] == "pagelink":
            add_to_result(attrs["onclick"])
</snippet></ROW><ROW><id>4328402</id><snippet>add_to_result</snippet></ROW><ROW><id>4328402</id><snippet>window.open</snippet></ROW><ROW><id>4328499</id><snippet>in_signature='sas'</snippet></ROW><ROW><id>4328504</id><snippet>pipelines</snippet></ROW><ROW><id>4328504</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>4328608</id><snippet>savefig</snippet></ROW><ROW><id>4328608</id><snippet>bbox_inches</snippet></ROW><ROW><id>4328608</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# Make an example plot with two subplots...
fig = plt.figure()
ax1 = fig.add_subplot(2,1,1)
ax1.plot(range(10), 'b-')

ax2 = fig.add_subplot(2,1,2)
ax2.plot(range(20), 'r^')

# Save the full figure...
fig.savefig('full_figure.png')

# Save just the portion _inside_ the second axis's boundaries
extent = ax2.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
fig.savefig('ax2_figure.png', bbox_inches=extent)

# Pad the saved area by 10% in the x-direction and 20% in the y-direction
fig.savefig('ax2_figure_expanded.png', bbox_inches=extent.expanded(1.1, 1.2))
</snippet></ROW><ROW><id>4328832</id><snippet># these are the modules you want to profile
import foo
import huh

# This is a profiling function
# yours would do something smarter
def profile(f):
    def gotcha(*args, **kwds):
        print "before"
        result = f(*args, **kwds)
        print "after"
        return result
    return gotcha

# these are the functions in those modules that you
# want to profile.  Each one is patched here instead
# of decorated there.
foo.bar = profile(foo.bar)
huh.baz = profile(huh.baz)
huh.hmm = profile(huh.hmm)
</snippet></ROW><ROW><id>4329059</id><snippet>', '.join(item['title'] for item in list)
</snippet></ROW><ROW><id>4329059</id><snippet>','.join('&lt;a href="/u/%(title_url)s"&gt;%(title)s&lt;/a&gt;' % item for item in list)
</snippet></ROW><ROW><id>4329371</id><snippet>import random 
import networkx as nx
z=[int(random.gammavariate(alpha=9.0,beta=2.0)) for i in range(100)]
G=nx.configuration_model(z)
</snippet></ROW><ROW><id>4329371</id><snippet>Notes
-----
As described by Newman [1]_.

A non-graphical degree sequence (not realizable by some simple
graph) is allowed since this function returns graphs with self
loops and parallel edges.  An exception is raised if the degree
sequence does not have an even sum.

This configuration model construction process can lead to
duplicate edges and loops.  You can remove the self-loops and
parallel edges (see below) which will likely result in a graph
that doesn't have the exact degree sequence specified.  This
"finite-size effect" decreases as the size of the graph increases.

References
----------
.. [1] M.E.J. Newman, "The structure and function
       of complex networks", SIAM REVIEW 45-2, pp 167-256, 2003.

Examples
--------
&gt;&gt;&gt; from networkx.utils import powerlaw_sequence
&gt;&gt;&gt; z=nx.create_degree_sequence(100,powerlaw_sequence)
&gt;&gt;&gt; G=nx.configuration_model(z)

To remove parallel edges:

&gt;&gt;&gt; G=nx.Graph(G)

To remove self loops:

&gt;&gt;&gt; G.remove_edges_from(G.selfloop_edges())
</snippet></ROW><ROW><id>4329371</id><snippet>#!/usr/bin/env python
import random
import matplotlib.pyplot as plt
import networkx as nx

def seq(n):
    return [random.gammavariate(alpha=2.0,beta=1.0) for i in range(100)]    
z=nx.create_degree_sequence(100,seq)
nx.is_valid_degree_sequence(z)
G=nx.configuration_model(z)  # configuration model

degree_sequence=sorted(nx.degree(G).values(),reverse=True) # degree sequence
print "Degree sequence", degree_sequence
dmax=max(degree_sequence)

plt.hist(degree_sequence,bins=dmax)
plt.title("Degree histogram")
plt.ylabel("count")
plt.xlabel("degree")

# draw graph in inset 
plt.axes([0.45,0.45,0.45,0.45])
Gcc=nx.connected_component_subgraphs(G)[0]
pos=nx.spring_layout(Gcc)
plt.axis('off')
nx.draw_networkx_nodes(Gcc,pos,node_size=20)
nx.draw_networkx_edges(Gcc,pos,alpha=0.4)

plt.savefig("degree_histogram.png")
plt.show()
</snippet></ROW><ROW><id>4329477</id><snippet>a[contains(@href,'.jpg')]
</snippet></ROW><ROW><id>4329477</id><snippet>a[substring(@href, string-length(@href)-3)='.jpg']
</snippet></ROW><ROW><id>4329477</id><snippet>a[ends-with(@hreg, '.jpg')]
</snippet></ROW><ROW><id>4329513</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>4329513</id><snippet>isinstance</snippet></ROW><ROW><id>4329513</id><snippet>try:
    stuff()
except Exception as e:
    if _debug and isinstance(e, KeyboardInterrupt):
        sys.exit()
    logger.exception("Normal handling")
</snippet></ROW><ROW><id>4329834</id><snippet>i = bisect_right(times, time)
# times[j] &lt;= time for j&lt;i
# times[j] &gt; time for j&gt;=i
if times[i-1] == time:
      # exact match
      value = values[i-1]
else:
      # interpolate
      value = (values[i-1]+values[i])/2
</snippet></ROW><ROW><id>4330156</id><snippet>exit</snippet></ROW><ROW><id>4330156</id><snippet>SystemExit</snippet></ROW><ROW><id>4330444</id><snippet>import string

sans_S = [c for c in string.ascii_uppercase if c is not 'S']
user_choice = 3
alphabet = sans_S[0:user_choice] + ['S'] + sans_S[user_choice:]

print alphabet
# ['A', 'B', 'C', 'S', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
#  'O', 'P', 'Q', 'R', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

# now create dictionary using modified list
alphadict = dict((x, i) for i, x in enumerate(alphabet))

# print out alphadict sorted by item values (not a necessary part of answer)
revdict = dict( (v,k) for k,v in alphadict.iteritems() )
print '{',
for v in sorted(alphadict.itervalues()):
    print "%r:%2d," % (revdict[v], v),
print '}'

# { 'A': 0, 'B': 1, 'C': 2, 'S': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8,
#   'I': 9, 'J':10, 'K':11, 'L':12, 'M':13, 'N':14, 'O':15, 'P':16, 'Q':17,
#   'R':18, 'T':19, 'U':20, 'V':21, 'W':22, 'X':23, 'Y':24, 'Z':25, }
</snippet></ROW><ROW><id>4330589</id><snippet>&gt;&gt;&gt; 'ABCDE'.decode('ascii').encode('utf-16be')
'\x00A\x00B\x00C\x00D\x00E'
</snippet></ROW><ROW><id>4330664</id><snippet>import subprocess
process=subprocess.Popen((os.getcwd() + "/3rd_party_binary","--subprocess")) 
process.poll() # is running?
</snippet></ROW><ROW><id>4330664</id><snippet>#!/usr/bin/env python
import os, sys

pid = os.fork()
if pid:
    # we are the parent
    background_process.start()
    os.waitpid(pid, 0) # make sure the child process gets cleaned up
else:
    # we are the child
    gui_app.start()
    sys.exit(0)

print "parent: got it; text =", txt
</snippet></ROW><ROW><id>4330803</id><snippet>_namemapper.so</snippet></ROW><ROW><id>4330803</id><snippet>sys.path</snippet></ROW><ROW><id>4330803</id><snippet>import sys
sys.path
</snippet></ROW><ROW><id>4330803</id><snippet>try:
    from _namemapper import NotFound, valueForKey, valueForName, \
         valueFromSearchList, valueFromFrameOrSearchList, valueFromFrame
    C_VERSION = True
except:
    C_VERSION = False
</snippet></ROW><ROW><id>4330803</id><snippet>C_VERSION</snippet></ROW><ROW><id>4330803</id><snippet>_namemapper</snippet></ROW><ROW><id>4330803</id><snippet>_namemapper.so</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; dir(StringIO)
['__doc__', '__init__', '__iter__', '__module__', 'close', 'flush', 'getvalue', 'isatty', 'next', 'read', 'readline', 'readlines', 'seek', 'tell', 'truncate', 'write', 'writelines']
&gt;&gt;&gt; help(StringIO.truncate)
Help on method truncate in module StringIO:

truncate(self, size=None) unbound StringIO.StringIO method
    Truncate the file's size.

    If the optional size argument is present, the file is truncated to
    (at most) that size. The size defaults to the current position.
    The current file position is not changed unless the position
    is beyond the new file size.

    If the specified size exceeds the file's current size, the
    file remains unchanged.
</snippet></ROW><ROW><id>4330829</id><snippet>.truncate(0)</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; dir(StringIO)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '_checkClosed', '_checkReadable', '_checkSeekable', '_checkWritable', 'close', 'closed', 'detach', 'encoding', 'errors', 'fileno', 'flush', 'getvalue', 'isatty', 'line_buffering', 'newlines', 'read', 'readable', 'readline', 'readlines', 'seek', 'seekable', 'tell', 'truncate', 'writable', 'write', 'writelines']
&gt;&gt;&gt; help(StringIO.truncate)
Help on method_descriptor:

truncate(...)
    Truncate size to pos.

    The pos argument defaults to the current file position, as
    returned by tell().  The current file position is unchanged.
    Returns the new absolute position.
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; s = StringIO()
&gt;&gt;&gt; s.write('foo')
&gt;&gt;&gt; s.getvalue()
'foo'
&gt;&gt;&gt; s.truncate(0)
&gt;&gt;&gt; s.getvalue()
''
&gt;&gt;&gt; s.write('bar')
&gt;&gt;&gt; s.getvalue()
'bar'
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; s = StringIO()
&gt;&gt;&gt; s.write('foo')
3
&gt;&gt;&gt; s.getvalue()
'foo'
&gt;&gt;&gt; s.truncate(0)
0
&gt;&gt;&gt; s.getvalue()
''
&gt;&gt;&gt; s.write('bar')
3
&gt;&gt;&gt; s.getvalue()
'\x00\x00\x00bar'
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; s = StringIO()
&gt;&gt;&gt; s.write('foo')
3
&gt;&gt;&gt; s.getvalue()
'foo'
&gt;&gt;&gt; s.truncate(0)
0
&gt;&gt;&gt; s.seek(0)
0
&gt;&gt;&gt; s.getvalue()
''
&gt;&gt;&gt; s.write('bar')
3
&gt;&gt;&gt; s.getvalue()
'bar'
</snippet></ROW><ROW><id>4330829</id><snippet>truncate</snippet></ROW><ROW><id>4330829</id><snippet>seek(0)</snippet></ROW><ROW><id>4330829</id><snippet>StringIO</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; def truncate(sio):
...     sio.truncate(0)
...     return sio
... 
&gt;&gt;&gt; def new(sio):
...     return StringIO()
... 
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; timeit(lambda: truncate(StringIO()))
3.5194039344787598
&gt;&gt;&gt; timeit(lambda: new(StringIO()))
3.6533868312835693
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; timeit(lambda: truncate(StringIO('abc' * 1000)))
4.3437709808349609
&gt;&gt;&gt; timeit(lambda: new(StringIO('abc' * 1000)))
4.7179079055786133
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; timeit(lambda: truncate(StringIO()))
0.55461597442626953
&gt;&gt;&gt; timeit(lambda: new(StringIO()))
0.51241087913513184
&gt;&gt;&gt; timeit(lambda: truncate(StringIO('abc' * 1000)))
1.0958449840545654
&gt;&gt;&gt; timeit(lambda: new(StringIO('abc' * 1000)))
0.98760509490966797
</snippet></ROW><ROW><id>4330829</id><snippet>del oldstringio</snippet></ROW><ROW><id>4330829</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>4330829</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>4330829</id><snippet>cStringIO</snippet></ROW><ROW><id>4330829</id><snippet>seek(0)</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; def truncate(sio):
...     sio.truncate(0)
...     sio.seek(0)
...     return sio
... 
&gt;&gt;&gt; def new(sio):
...     return StringIO()
...
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; timeit(lambda: truncate(StringIO()))
0.9706327870007954
&gt;&gt;&gt; timeit(lambda: new(StringIO()))
0.8734330690022034
</snippet></ROW><ROW><id>4330829</id><snippet>&gt;&gt;&gt; timeit(lambda: truncate(StringIO('abc' * 1000)))
3.5271066290006274
&gt;&gt;&gt; timeit(lambda: new(StringIO('abc' * 1000)))
3.3496507499985455
</snippet></ROW><ROW><id>4330829</id><snippet>StringIO</snippet></ROW><ROW><id>4330904</id><snippet>class Reference(object):
    def __init__(self):
        self.references = {}

    def __setattr__(self, key, value):
        if hasattr(self, 'references'):
            if isinstance(value, Reference):
                if not key in value.references:
                    value.references[key] = []
                value.references[key].append(self)

            elif value is None and hasattr(self, key):
                old = getattr(self, key).references
                if key in old and self in old[key]:
                    old[key].remove(self)

        super(Reference, self).__setattr__(key, value)
</snippet></ROW><ROW><id>4330904</id><snippet>class A(Reference):
    def __init__(self):
        super(A, self).__init__()
        self.att = None

class B(Reference):
    def __init__(self):
        super(B, self).__init__()
        self.att = None
</snippet></ROW><ROW><id>4330904</id><snippet>a = A()
b = B()

print 'A references', a.references
print 'B references', b.references
# A references {}
# B references {}

a.att = b

print 'A references', a.references
print 'B references', b.references
# A references {}
# B references {'att': [&lt;__main__.A object at 0x7f731c8fc910&gt;]}
</snippet></ROW><ROW><id>4331045</id><snippet>def recursivemethod(obj_to_act_on, persistent_obj=None):

    if persistent_obj == None:
        persistent_obj = set()

    # Act on your object

    return recursivemethod(newobj, persistent_obj)
</snippet></ROW><ROW><id>4331052</id><snippet>def newtons_method(n):
    n = float(n)  #Force float arithmetic
    nPlusOne = n - (pow(n,3) + n - 1)/(3*pow(n,2) +1)
    while 1:
        yield nPlusOne
        n = nPlusOne
        nPlusOne = n - (pow(n,3) + n - 1)/(3*pow(n,2) +1)

approxAnswer = newtons_method(1.0)   #1.0 can be any initial guess...
</snippet></ROW><ROW><id>4331052</id><snippet>approxAnswer.next()
</snippet></ROW><ROW><id>4331052</id><snippet>approx1 = approxAnswer.next()
approx2 = approxAnswer.next()
</snippet></ROW><ROW><id>4331441</id><snippet>nextgen</snippet></ROW><ROW><id>4331441</id><snippet>nextgen.append(...)</snippet></ROW><ROW><id>4331441</id><snippet>+=</snippet></ROW><ROW><id>4331441</id><snippet>+=</snippet></ROW><ROW><id>4331478</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>4331536</id><snippet>getattr</snippet></ROW><ROW><id>4331536</id><snippet>def update_probabilities(self, attribute_name, decision):
    i = 0
    attr_value = getattr(self, attribute_name)
    for action, current_probability in attr_value:
        #SOME CODE HERE
        attr_value[i] = (action, new_probability)
        i = i + 1
    setattr(self, attribute_name, attr_value)
</snippet></ROW><ROW><id>4331584</id><snippet>def get_pixel_colour(i_x, i_y):
    import win32gui
    i_desktop_window_id = win32gui.GetDesktopWindow()
    i_desktop_window_dc = win32gui.GetWindowDC(i_desktop_window_id)
    long_colour = win32gui.GetPixel(i_desktop_window_dc, i_x, i_y)
    i_colour = int(long_colour)
    return (i_colour &amp; 0xff), ((i_colour &gt;&gt; 8) &amp; 0xff), ((i_colour &gt;&gt; 16) &amp; 0xff)

print get_pixel_colour(0, 0)
</snippet></ROW><ROW><id>4331631</id><snippet>table.findAll('td', attrs = {"class":re.compile(r'(^|\s)(a|unavailable-available)($|\s)')})
</snippet></ROW><ROW><id>4331631</id><snippet>class="a"
class="a ui-xxx"
class="ui-xxx a"
class="ui-xxx a ui-yyy"
class="unavailable-available"
class="unavailable-available foo"
</snippet></ROW><ROW><id>4331824</id><snippet>q</snippet></ROW><ROW><id>4331824</id><snippet>Queue</snippet></ROW><ROW><id>4331932</id><snippet>dict</snippet></ROW><ROW><id>4331932</id><snippet>dict</snippet></ROW><ROW><id>4331932</id><snippet>In [9]: d
Out[9]: {'a': {'b': 'whatever', 'k': 1}, 'b': {'b': 'sort by k', 'k': 2}}

In [15]: sorted(d.items(),key=lambda x: x[1]['k'],reverse=True)
Out[15]: [('b', {'b': 'sort by k', 'k': 2}), ('a', {'b': 'whatever', 'k': 1})]
</snippet></ROW><ROW><id>4331932</id><snippet>key</snippet></ROW><ROW><id>4332670</id><snippet>&gt;&gt;&gt; t = "x1,y1,z1,x2,y2,z2,x3,y3,z3"
</snippet></ROW><ROW><id>4332670</id><snippet>&gt;&gt;&gt; t1 = t.split(',')
&gt;&gt;&gt; t1
['x1', 'y1', 'z1', 'x2', 'y2', 'z2', 'x3', 'y3', 'z3']
</snippet></ROW><ROW><id>4332670</id><snippet>&gt;&gt;&gt; t2 = []
&gt;&gt;&gt; for x in range(len(t1)/3): t2.append(t1[x*3 : x*3+3])
... 
&gt;&gt;&gt; t2
[['x1', 'y1', 'z1'], ['x2', 'y2', 'z2'], ['x3', 'y3', 'z3']]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4332749</id><snippet>urlparse.parse_qs()</snippet></ROW><ROW><id>4332999</id><snippet>def findNodesInSpheres(sList,nList,nx,ny,nz):
    print "Running findNodesInSpheres"
    filteredList = []
    for a in sList:
            rad = a.radius
            minx = (a.x) - (rad) if (a.x - rad &gt; 0) else 0
            maxx = (a.x) + (rad) if (a.x + rad &lt; nx ) else nx
            miny = (a.y) - (rad) if (a.y - rad &gt; 0) else 0
            maxy = (a.y) + (rad) if (a.y + rad &lt; ny ) else ny
            minz = (a.z) - (rad) if (a.z - rad &gt; 0) else 0
            maxz = (a.z) + (rad) if (a.z + rad &lt; nz ) else nz
            boundingBox = set([ (i + j * (nx + 1) + k * (nx + 1) * (ny + 1)) for i in range (int(minx),int(maxx)+1)
                            for j in range (int(miny),int(maxy)+1) for k in range(int(minz),int(maxz)+1) ])

            for b in sorted(boundingBox):
                    if findRadius(a,nList[b]) &lt;= rad:
                            filteredList.append(nList[b].num)
    return filteredList
</snippet></ROW><ROW><id>4333405</id><snippet>l = [["blaa", "0.3", "bli"], ["bla", "0.1", "blub"], ["bla", "-0.2", "blub"]]

l.sort(key=lambda x: float(x[1]))

&gt;&gt;&gt; [['bla', '-0.2', 'blub'], ['bla', '0.1', 'blub'], ['blaa', '0.3', 'bli']]
</snippet></ROW><ROW><id>4333604</id><snippet>QuerySet.iterator()</snippet></ROW><ROW><id>4333674</id><snippet>&gt; library(hash)
&gt; dx = hash(k1=453, k2=67, k3=913)
&gt; dx$k1
  [1] 453
&gt; dx = hash(keys=letters[1:5], values=1:5)
&gt; dx
  &lt;hash&gt; containing 5 key-value pair(s).
   a : 1
   b : 2
   c : 3
   d : 4
   e : 5

&gt; dx[a]
  &lt;hash&gt; containing 1 key-value pair(s).
  a : 1

&gt; library(stringr)
&gt; astring = 'onetwothree456seveneight'
&gt; ptn = '[0-9]{3,}'
&gt; a = str_extract_all(astring, ptn)
&gt; a
  [[1]]
  [2] "456"
</snippet></ROW><ROW><id>4333674</id><snippet>&gt; library(ElemStatLearn)
&gt; data(spam)
&gt; format(object.size(spam), big.mark=',')
  [1] "2,344,384" # a 2.34 MB data file
&gt; save(spam, file='test.RData')
</snippet></ROW><ROW><id>4334137</id><snippet>child.expect(pexpect.EOF)
</snippet></ROW><ROW><id>4334633</id><snippet>sgr0</snippet></ROW><ROW><id>4334633</id><snippet>sgr0</snippet></ROW><ROW><id>4334633</id><snippet>Esc[m</snippet></ROW><ROW><id>4334633</id><snippet>op</snippet></ROW><ROW><id>4334633</id><snippet>Esc[39;49m</snippet></ROW><ROW><id>4334695</id><snippet>connect(username='tom', password='passwd12', timeout=3)
</snippet></ROW><ROW><id>4334972</id><snippet>gp.RasterToPolygon_conversion</snippet></ROW><ROW><id>4334972</id><snippet>InRaster = filename_zero + ".png"
</snippet></ROW><ROW><id>4334972</id><snippet>InRaster = os.path.join(root, filename_zero + ".png")
</snippet></ROW><ROW><id>4335034</id><snippet>f = open('test.csv', 'w', encoding='utf-8', newline='')
</snippet></ROW><ROW><id>4335903</id><snippet>stdout</snippet></ROW><ROW><id>4335903</id><snippet>stderr</snippet></ROW><ROW><id>4336001</id><snippet>.params</snippet></ROW><ROW><id>4336001</id><snippet>.derivs</snippet></ROW><ROW><id>4336001</id><snippet>Module</snippet></ROW><ROW><id>4336001</id><snippet>Connection</snippet></ROW><ROW><id>4336001</id><snippet>.params</snippet></ROW><ROW><id>4336001</id><snippet>net2.sorted = False
net2.sortModules()
</snippet></ROW><ROW><id>4336038</id><snippet>class Title(models.Model):
    title = models.CharField("Title", max_length=200, unique=True)

    def __unicode__(self):
        return self.title</snippet></ROW><ROW><id>4336038</id><snippet>class Category(models.Model):
    title = models.ForeignKey(Title, verbose_name="Title", to_field='title')

    class Meta:
        ordering = ['title']

    def __unicode__(self):
        return self.title.title</snippet></ROW><ROW><id>4337141</id><snippet>copy1</snippet></ROW><ROW><id>4337141</id><snippet>copy2</snippet></ROW><ROW><id>4337141</id><snippet>copy3</snippet></ROW><ROW><id>4337141</id><snippet>sieve</snippet></ROW><ROW><id>4337141</id><snippet>copy1 = sieve[:]
</snippet></ROW><ROW><id>4337141</id><snippet>sieve</snippet></ROW><ROW><id>4337141</id><snippet>copy1</snippet></ROW><ROW><id>4337552</id><snippet>bp::object pycb; //global variable. could also store it in a map, etc
void register_callback(bp::object cb)
{
      pycb = cb;
}
</snippet></ROW><ROW><id>4337552</id><snippet>bp::object pycb = bp::scope("namespace").attr("callback");
</snippet></ROW><ROW><id>4337552</id><snippet>ret = pycb()
</snippet></ROW><ROW><id>4337618</id><snippet>itertools.chain.from_iterable(s.messages for s in self.services)</snippet></ROW><ROW><id>4337745</id><snippet>boost::python::implicitly_convertible&lt;SourceType,DestType&gt;();
</snippet></ROW><ROW><id>4337755</id><snippet>help(vargoeshere)</snippet></ROW><ROW><id>4338224</id><snippet>\b(?:[^aeiou]*e){3}[^aeiou]*\b</snippet></ROW><ROW><id>4338791</id><snippet>re.sub("(this)(.*)(string)",
       r'&lt;markup&gt;\1&lt;/markup&gt;\2&lt;markup&gt;\3&lt;/markup&gt;',
       text)
</snippet></ROW><ROW><id>4338791</id><snippet>pattern = "(this)(.*)(string)"
re.sub(pattern,
       lambda m: ''.join('&lt;markup&gt;%s&lt;/markup&gt;' % s if n % 2 == 0
                         else s for n, s in enumerate(m.groups())),
       text)
</snippet></ROW><ROW><id>4338791</id><snippet>pattern = "()(this)(.*)(string)"
re.sub(pattern,
       lambda m: ''.join('&lt;markup&gt;%s&lt;/markup&gt;' % s if n % 2 == 1
                         else s for n, s in enumerate(m.groups())),
       text)
</snippet></ROW><ROW><id>4338791</id><snippet>pattern = "(this).*(string)"
def replacement(m):
    s = m.group()
    n_groups = len(m.groups())
    # assume groups do not overlap and are listed left-to-right
    for i in range(n_groups, 0, -1):
        lo, hi = m.span(i)
        s = s[:lo] + '&lt;markup&gt;' + s[lo:hi] + '&lt;/markup&gt;' + s[hi:]
    return s
re.sub(pattern, replacement, text)
</snippet></ROW><ROW><id>4339202</id><snippet>def pluralize(f):
    def on_seq(seq):
        return [f(x) for x in seq]
    def on_dict(d):
         return dict((k, f(v)) for k, v in d.iteritems())
    f.on_dict = on_dict
    f.on_seq = on_seq
    return f
</snippet></ROW><ROW><id>4339202</id><snippet>@pluralize
def unixtime(dt):
    return int(dt.strftime('%s'))


unixtime.on_seq([datetime.now(), datetime(2010, 12, 3)])
unixtime.on_dict({'start': datetime.now(), 'end': datetime(2010, 12, 3)})
</snippet></ROW><ROW><id>4339202</id><snippet>dict</snippet></ROW><ROW><id>4339268</id><snippet>&gt;&gt;&gt; l = [{"pk": d["pk"], "url": d["fields"]["url"], "image": d["fields"]["image"], "name": d["fields"]["name"]} for d in l]
&gt;&gt;&gt; new_data = dict((d["pk"], d) for d in l)
&gt;&gt;&gt; new_data 
{1: {'url': 'http://www.rte.ie/tv/programmes/bad_fellas.html', 'pk': 1, 'image': 'http://img.rasset.ie/0003db75-150.jpg', 'name': 'Bad Fellas'}, 2: {'url': 'http://www.rte.ie/tv/crimecall/', 'pk': 2, 'image': 'http://img.rasset.ie/0002c8d0-250.jpg', 'name': 'Crimecall'}}
</snippet></ROW><ROW><id>4339268</id><snippet>def shows_json(request):
    objects = Show.objects.all()
    l = [{"pk": d["pk"], "url": d["fields"]["url"], "image": d["fields"]["image"], "name": d["fields"]["name"]} for d in objects]
    tmp = dict(str((d["pk"]), d) for d in l)
    json = toJSON(tmp)
    result = render_to_string('jsonlist.html', RequestContext(request, {
                'json': json,
            }))
    return HttpResponse(result)
</snippet></ROW><ROW><id>4339327</id><snippet>import numpy as np
deltas=np.diff(data)
deltas[deltas&lt;0]=0
deltas[deltas&gt;100]=0
</snippet></ROW><ROW><id>4339327</id><snippet>deltas[(deltas&lt;0) | (deltas&gt;100)]=0
</snippet></ROW><ROW><id>4339504</id><snippet>IOError</snippet></ROW><ROW><id>4339504</id><snippet>try:
    urllib.urlopen(url)
except IOError:
    # exception handling goes here if you want it
    pass
else:
    DoSomethingUseful()
</snippet></ROW><ROW><id>4339504</id><snippet>urllib2</snippet></ROW><ROW><id>4339719</id><snippet>u</snippet></ROW><ROW><id>4339741</id><snippet>hasattr()</snippet></ROW><ROW><id>4339875</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; import base64

&gt;&gt;&gt; p = hashlib.sha1('password')
&gt;&gt;&gt; base64.b64encode(p.digest())
'W6ph5Mm5Pz8GgiULbPgzG37mj9g='
</snippet></ROW><ROW><id>4339875</id><snippet>$ echo -n 'password' | openssl sha1 -binary | base64     
W6ph5Mm5Pz8GgiULbPgzG37mj9g=
</snippet></ROW><ROW><id>4339911</id><snippet>scapy.all import *</snippet></ROW><ROW><id>4340355</id><snippet>round(20*v)/20
</snippet></ROW><ROW><id>4340355</id><snippet>&gt;&gt;&gt; round(20*1.368161685161)/20
1.3500000000000001
</snippet></ROW><ROW><id>4340355</id><snippet>1.35</snippet></ROW><ROW><id>4340420</id><snippet>callback = request.GET.get('callback', '')
objects = Event.objects.all()
i = 0
dict = {}
small_dict = {}
for o in objects:
    small_dict = {'id': o.id, 'url': o.url, 'name': o.name, 'image': o.image}
    dict[str(i+1)] = small_dict
    small_dict = {}

response = simplejson.dumps(dict)
response = callback + '(' + response + ')';

return HttpResponse(response,
    mimetype ='application/json; charset=utf8')
</snippet></ROW><ROW><id>4340673</id><snippet>class UploadFile(models.Model):
    title = models.CharField(max_length = 50)
    theFile = models.FileField(upload_to="files/")

    def __unicode__(self):
        return str(title)
</snippet></ROW><ROW><id>4340827</id><snippet>a</snippet></ROW><ROW><id>4340827</id><snippet>-2147483648</snippet></ROW><ROW><id>4340827</id><snippet>a[a &lt;= 0] = &lt;somevalue&gt;
</snippet></ROW><ROW><id>4341208</id><snippet>py&gt; import sys,os
py&gt; sys.modules["os"].info["class"]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'info'
</snippet></ROW><ROW><id>4341476</id><snippet>result=[]
with open(csvfile,'r') as f:
    for line in f:
        row=[]
        for text in line.split('\t'):
            match=re.search('([0-9]/[0-9])',text)
            if match:
                row.append(match.group(1))
            else:
                row.append("NA")
        result.append(row)
print(result)
</snippet></ROW><ROW><id>4341476</id><snippet># [['0/0', '0/1', '0/0'], ['NA', '0/1', '0/0']]
</snippet></ROW><ROW><id>4341476</id><snippet>0/0:23:-1.03,-7.94,-83.75:69.15 0/1:34:-1.01,-11.24,-127.51:99.00   0/0:74:-1.02,-23.28,-301.81:99.00
---:23:-1.03,-7.94,-83.75:69.15 0/1:34:-1.01,-11.24,-127.51:99.00   0/0:74:-1.02,-23.28,-301.81:99.00
</snippet></ROW><ROW><id>4341701</id><snippet>getinfo</snippet></ROW><ROW><id>4341701</id><snippet>import zipfile
z = zipfile.ZipFile(some_source)
entry_info = z.getinfo(entry_name)
i = z.open(entry_name)
o = open(target_name, 'w')
offset = 0
while True:
    b = i.read(block_size)
    offset += len(b)
    set_percentage(float(offset)/float(entry_info.file_size) * 100.)
    if b == '':
        break
    o.write(b)
i.close()
o.close()
set_attributes_from(entry_info)
</snippet></ROW><ROW><id>4341701</id><snippet>entry_name</snippet></ROW><ROW><id>4341701</id><snippet>target_name</snippet></ROW><ROW><id>4341701</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>4341701</id><snippet>ZipFile.extract</snippet></ROW><ROW><id>4341701</id><snippet>_extract_member</snippet></ROW><ROW><id>4341701</id><snippet>source = self.open(member, pwd=pwd)
target = file(targetpath, "wb")
shutil.copyfileobj(source, target)
source.close()
target.close()
</snippet></ROW><ROW><id>4341701</id><snippet>getinfo(member)</snippet></ROW><ROW><id>4341833</id><snippet>pylint --generate-rcfile</snippet></ROW><ROW><id>4341833</id><snippet>[MESSAGES CONTROL]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once).
#disable=
</snippet></ROW><ROW><id>4341833</id><snippet>~/.pylintrc</snippet></ROW><ROW><id>4341833</id><snippet>disable=</snippet></ROW><ROW><id>4341833</id><snippet>[MESSAGES CONTROL]</snippet></ROW><ROW><id>4341941</id><snippet>searchindexnodes = {}
searchindexnodes[1036592] = 'Apparel'
searchindexnodes[672123011] = 'Apparel'
searchindexnodes[165796011] = 'Baby'
</snippet></ROW><ROW><id>4341982</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = a
&gt;&gt;&gt; c = b
&gt;&gt;&gt; locals()
{'a': 1, 'c': 1, 'b': 1, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}
&gt;&gt;&gt; [key for key, value in locals().items() if value == 1]
['a', 'c', 'b']
&gt;&gt;&gt; globals()
{'a': 1, 'c': 1, 'b': 1, '__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__package__': None, '__name__': '__main__', '__doc__': None}
&gt;&gt;&gt; [key for key, value in globals().items() if value == 1]
['a', 'c', 'b']
</snippet></ROW><ROW><id>4342025</id><snippet>import traceback  
traceback.print_exc()  
</snippet></ROW><ROW><id>4342034</id><snippet>from django.template import Library

register = Library()

@register.filter('titleofwidth')
def titleofwidth(post, width):
    """
    Get the title of a given width of a post.

    Sample usage: {{ post|titleofwidth:200 }}
    """

    for i in post['sizes']:
        if i['w'] == width:
            return i['title']
    return None
</snippet></ROW><ROW><id>4342034</id><snippet>templatetags</snippet></ROW><ROW><id>4342034</id><snippet>postfilters.py</snippet></ROW><ROW><id>4342034</id><snippet>{% load postfilters %}</snippet></ROW><ROW><id>4342034</id><snippet>sizes</snippet></ROW><ROW><id>4342034</id><snippet>{% with post|detailsofwidth:200 as postdetails %}{{ postdetails.something }}, {{ postdetails.title }}{% endwith %}</snippet></ROW><ROW><id>4342201</id><snippet>hasattr</snippet></ROW><ROW><id>4342201</id><snippet>def get_deep_attr(obj, attrs):
    for attr in attrs.split("."):
        obj = getattr(obj, attr)
    return obj

def has_deep_attr(obj, attrs):
    try:
        get_deep_attr(obj, attrs)
        return True
    except AttributeError:
        return False
</snippet></ROW><ROW><id>4342219</id><snippet>pickle</snippet></ROW><ROW><id>4342219</id><snippet>cPickle</snippet></ROW><ROW><id>4342219</id><snippet>&gt;&gt;&gt; import cPickle
&gt;&gt;&gt; cPickle.dumps({'foo': 'bar'})
"(dp1\nS'foo'\np2\nS'bar'\np3\ns."
&gt;&gt;&gt; cPickle.loads(_)
{'foo': 'bar'}
</snippet></ROW><ROW><id>4342219</id><snippet>json</snippet></ROW><ROW><id>4342219</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({'foo': 'bar'})
'{"foo": "bar"}'
&gt;&gt;&gt; json.loads(_)
{u'foo': u'bar'}
</snippet></ROW><ROW><id>4342219</id><snippet>simplejson</snippet></ROW><ROW><id>4342219</id><snippet>&gt;&gt;&gt; import simplejson
&gt;&gt;&gt; simplejson.dumps({'foo': 'bar'})
'{"foo": "bar"}'
&gt;&gt;&gt; simplejson.loads(_)
{'foo': 'bar'}
</snippet></ROW><ROW><id>4342219</id><snippet>json</snippet></ROW><ROW><id>4342219</id><snippet>simplejson</snippet></ROW><ROW><id>4342219</id><snippet>cPickle</snippet></ROW><ROW><id>4342219</id><snippet>__getstate__</snippet></ROW><ROW><id>4342219</id><snippet>&gt;&gt;&gt; cPickle.dumps(object())
'ccopy_reg\n_reconstructor\np1\n(c__builtin__\nobject\np2\ng2\nNtRp3\n.'
&gt;&gt;&gt; json.dumps(object())
Traceback (most recent call last):
  ...
TypeError: &lt;object object at 0x7fa0348230c0&gt; is not JSON serializable
&gt;&gt;&gt; simplejson.dumps(object())
Traceback (most recent call last):
  ...
TypeError: &lt;object object at 0x7fa034823090&gt; is not JSON serializable
</snippet></ROW><ROW><id>4342595</id><snippet>int</snippet></ROW><ROW><id>4342595</id><snippet>None</snippet></ROW><ROW><id>4342595</id><snippet>spam</snippet></ROW><ROW><id>4342595</id><snippet>spam += 6</snippet></ROW><ROW><id>4342595</id><snippet>spam = spam + 6</snippet></ROW><ROW><id>4342595</id><snippet>spam</snippet></ROW><ROW><id>4342595</id><snippet>spam</snippet></ROW><ROW><id>4342595</id><snippet>resumeInt</snippet></ROW><ROW><id>4342595</id><snippet>def fry(spam):
  spam += 1

eggs = 3
fry(eggs)
eggs # still 3!
</snippet></ROW><ROW><id>4342595</id><snippet>spam</snippet></ROW><ROW><id>4342595</id><snippet>eggs</snippet></ROW><ROW><id>4342617</id><snippet>   p.name = 'file[]'
</snippet></ROW><ROW><id>4342802</id><snippet>json.dumps()</snippet></ROW><ROW><id>4343198</id><snippet>__init__.py</snippet></ROW><ROW><id>4343198</id><snippet>import *</snippet></ROW><ROW><id>4343198</id><snippet>__all__</snippet></ROW><ROW><id>4343534</id><snippet>ListMutator</snippet></ROW><ROW><id>4343534</id><snippet>class ListMutator(object):

    def __init__(self, seq):
        self.data = seq

    def foo1(self, arg1, arg2):
        self.data = [x + arg1 for x in self.data]
        # This allows chaining:
        return self

    def foo2(self, arg1, arg2):
        self.data = [x*arg1 for x in self.data]
        return self

if __name__ == "__main__":
    lm = ListMutator([1,2,3,4])
    lm.foo1(2, 0).foo2(10, 0)
    print lm.data

    # Or, if you really must:
    print ListMutator([1,2,3,4]).foo1(2, 0).foo2(10, 0).data
</snippet></ROW><ROW><id>4343534</id><snippet>ListMutator</snippet></ROW><ROW><id>4343534</id><snippet>list</snippet></ROW><ROW><id>4343534</id><snippet>list</snippet></ROW><ROW><id>4343615</id><snippet>import zookeeper as zk
parent_path = "/"
stat, acl = zk.get_acl(zoohandle, parent_path)
ret = zk.create(zoohandle, node_path, "", acl, 0)
</snippet></ROW><ROW><id>4343915</id><snippet>from scapy.all import *
a=Ether(import_hexcap())
&lt;some dumped hex&gt;
sendp(a)
</snippet></ROW><ROW><id>4344029</id><snippet>list1+list2</snippet></ROW><ROW><id>4344029</id><snippet>list1</snippet></ROW><ROW><id>4344029</id><snippet>list2</snippet></ROW><ROW><id>4344334</id><snippet>Content-Disposition</snippet></ROW><ROW><id>4344409</id><snippet>ObjectID</snippet></ROW><ROW><id>4344409</id><snippet>insert</snippet></ROW><ROW><id>4344409</id><snippet>ObjectID</snippet></ROW><ROW><id>4345539</id><snippet>class Name(object):
    def __init__(self, *params):
        self.__dict__.update(DEFAULT_PARAMS)
        self.__dict__.update(params)

b = Name(position=[1,2])
print b.position
</snippet></ROW><ROW><id>4345854</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

class MyWebView(QWebView):
    def __init__(self):
        QWebView.__init__(self)
        QObject.connect(self,SIGNAL('loadFinished(bool)'),self.showelements)

    def showelements(self):
        html=self.page().currentFrame().documentElement()
        for link in html.findAll('a'):
            print(link.toInnerXml(),str(link.geometry())[18:])


if __name__=='__main__':
    app = QApplication(sys.argv)

    web = MyWebView()
    web.load(QUrl("http://www.google.com"))
    web.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>4346814</id><snippet>~/.${PROJECT}rc</snippet></ROW><ROW><id>4346814</id><snippet>~/.${PROJECT}</snippet></ROW><ROW><id>4346973</id><snippet>&lt;span py:if="c.page.item_count"&gt;
  ${c.page.item_count} ${['entries','entry'][c.page.item_count==1]}.
&lt;/span&gt;
</snippet></ROW><ROW><id>4346973</id><snippet>&lt;span py:if="c.page.item_count"&gt;
  ${c.page.item_count} ${'entry' if c.page.item_count==1 else 'entries'}.
&lt;/span&gt;
</snippet></ROW><ROW><id>4347040</id><snippet>&gt;&gt;&gt; test = "This is my sample test blah blah http://t.co/pE6JSwG, hello all"

&gt;&gt;&gt; re.sub('http://[^ ,]*', lambda t: "&lt;a href='%s'&gt;%s&lt;/a&gt;" % (t.group(0), t.group(0)), test)

&gt;&gt;&gt; This is my sample test blah blah &lt;a href='http://t.co/pE6JSwG'&gt;http://t.co/pE6JSwG&lt;/a&gt;, hello all
</snippet></ROW><ROW><id>4347676</id><snippet>import dns.resolver
domain = 'bbc.co.uk'
results = []
for x in dns.resolver.query(domain,'MX',):
    results.append(x.to_text().split(' ')[1])
print results

&gt;&gt;&gt; ['cluster1.eu.messagelabs.com.', 'cluster1a.eu.messagelabs.com.']
</snippet></ROW><ROW><id>4348356</id><snippet>self</snippet></ROW><ROW><id>4348356</id><snippet>self</snippet></ROW><ROW><id>4348356</id><snippet>self</snippet></ROW><ROW><id>4348356</id><snippet>class a_class(object):
    def a_method(self, txt):
        print txt

instance = a_class()
instance.a_method('hello world!')
</snippet></ROW><ROW><id>4348356</id><snippet>object</snippet></ROW><ROW><id>4348396</id><snippet>dict</snippet></ROW><ROW><id>4348396</id><snippet>funclist = [foo, bar, baz, quux]

results    = {}
badfuncs   = {}
errorcount = {}

for f in funclist:
    try:
        results[f] = f()
    except Exception as e:
        badfuncs[f]   = e
        errorcount[type(e)] = errorcount[type(e)] + 1 if type(e) in errorcount else 1
</snippet></ROW><ROW><id>4348396</id><snippet>if foo in badfuncs</snippet></ROW><ROW><id>4348396</id><snippet>if foo in results</snippet></ROW><ROW><id>4348396</id><snippet>if ValueError in errorcount</snippet></ROW><ROW><id>4348396</id><snippet>ValueError</snippet></ROW><ROW><id>4348446</id><snippet>import urllib2

class MyHttpHandler(urllib2.HTTPHandler):
    def http_response(self, request, response):
        for l in response:
            print l
        return response

u = urllib2.build_opener(MyHttpHandler())
for i in range(1, 5):
    u.open('http://stackoverflow.com')
</snippet></ROW><ROW><id>4348612</id><snippet>shell=True</snippet></ROW><ROW><id>4348612</id><snippet>False</snippet></ROW><ROW><id>4348612</id><snippet>&gt;&gt;&gt; s1 = 'Hello'
&gt;&gt;&gt; s2 = 'Hi'
&gt;&gt;&gt; s1 + s2
'HelloHi'
</snippet></ROW><ROW><id>4348612</id><snippet>Hello</snippet></ROW><ROW><id>4348612</id><snippet>Hi</snippet></ROW><ROW><id>4348612</id><snippet>&gt;&gt;&gt; raw = raw_input('Filename: ')
Filename: test
&gt;&gt;&gt; ip = raw_input('Host: ')
Host: 192.168.1.1 
&gt;&gt;&gt; command = 'tcpdump -c5 -vvv -w {0} {1}'.format(raw, ip)   # the command goes here
&gt;&gt;&gt; subprocess.call(command.split(), shell=False)   # call subprocess and pass the command as a list using split
</snippet></ROW><ROW><id>4348653</id><snippet>hg clone &lt;a href="http://bitbucket.org/jek/flatland" rel="nofollow"&gt;http://bitbucket.org/jek/flatland&lt;/a&gt;</snippet></ROW><ROW><id>4348653</id><snippet>Form</snippet></ROW><ROW><id>4348653</id><snippet>Dict</snippet></ROW><ROW><id>4348653</id><snippet>Container</snippet></ROW><ROW><id>4348653</id><snippet>Element</snippet></ROW><ROW><id>4348653</id><snippet>descent_validators</snippet></ROW><ROW><id>4348653</id><snippet>Container</snippet></ROW><ROW><id>4348653</id><snippet>validators</snippet></ROW><ROW><id>4348653</id><snippet>Element</snippet></ROW><ROW><id>4348653</id><snippet>validators</snippet></ROW><ROW><id>4348653</id><snippet>class CheckCredentials(Validator):
  '''Checks credentials and creates an account object'''

  def validate(self, element, state):
    username = element['username']
    password = element['password']
    if not (username.all_valid and password.all_valid):
      return false

    self.account = Account(username.u, password.u)
    return self.account.valid()


class doSomethingForm(Form):
  '''Do an action with account credentials'''
  username = String.using(default='',
    validators=[Present(), UsernameFormat()])
  password = String.using(default='',
    validators=[Present(), PasswordFormat()])
  action = String.using(default='',
    validators=[Present(), ActionFormat()])

  validators = (CheckCredentials(),)

@expose('/do_something')
def doSomething(request):
  form = doSomethingForm.from_defaults()
  form.set_flat(request.form)

  result_html = ''
  method = request.method
  if method == 'POST' and not form.validate():
    method = 'GET'
    errors = []
    if form.errors: errors.extend(form.errors)
    for el in form.all_children:
      if el.errors: errors.extend(el.errors)
    result_html = errorsToHtml(errors)

  if method == 'POST':
    result_html = form.account.action(form['action'].u)

  return render_template('do_something.html',
    result=result_html, **form.value)
</snippet></ROW><ROW><id>4348687</id><snippet>all()</snippet></ROW><ROW><id>4348687</id><snippet>True</snippet></ROW><ROW><id>4348687</id><snippet>True</snippet></ROW><ROW><id>4348687</id><snippet>if all((3, True, "abc")):
    print "Yes!"
</snippet></ROW><ROW><id>4348687</id><snippet>if all(x &gt; 3 for x in lst):
    do_stuff()
</snippet></ROW><ROW><id>4348754</id><snippet>import sqlite3
conn = sqlite3.connect('/path/to/my.db')
curs = conn.cursor()
curs.execute("SELECT a_column FROM my_table;").fetchone()
curs.close()
conn.close()
</snippet></ROW><ROW><id>4348754</id><snippet>commit</snippet></ROW><ROW><id>4348754</id><snippet>curs.execute("CREATE TABLE my_table (a_column text);")
conn.commit()
</snippet></ROW><ROW><id>4348765</id><snippet>nextpos = {
    (0,0): [(1,0), (1,1), (0,1)],
    (0,1): [(0,0), (1,0), (1,1), (1,2), (0,2)],
    (0,2): [(0,1), (1,1), (1,2), (1,3), (0,3)],
    (0,3): [(0,2), (1,2), (1,3)],
    # etc
}
allpos = nextpos.keys()
</snippet></ROW><ROW><id>4348765</id><snippet>def nextpos(p,w=4,h=4):
    """
    @param p     Current position tuple (x,y)
    @param w     Width of matrix
    @param h     Height of matrix

    Generate all matrix cells adjacent to the current one
    """
    rel = ((-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1))

    x,y = p
    for dx,dy in rel:
        nx,ny = x+dx, y+dy
        if 0&lt;=nx&lt;w and 0&lt;=ny&lt;h:
            yield (nx,ny)
</snippet></ROW><ROW><id>4348765</id><snippet>def matrix_path(pathLen, startFrom=None):
    """
    @param pathLen    Length of path to return
    @param startFrom  Initial location

    Generate all adjacency paths through the matrix
    """

    # bad path length - quit gracefully
    if pathLen&lt;1:
        yield []
        return

    # no starting point specified - start at any point
    if startFrom is None:
        for pos in allpos:
            for res in matrix_path(pathLen, pos):
                yield res
        return

    # end of path
    if pathLen==1:
        yield [startFrom]
        return

    # from current point, recurse to find rest of path
    for pos in nextpos[startFrom]:
        for morePath in matrix_path(pathLen-1, pos):
            yield [startFrom]+morePath
</snippet></ROW><ROW><id>4348765</id><snippet>import cProfile

def test():
    sols = [i for i in matrix_path(5)]
    print len(sols), "paths found"

cProfile.run("test()")
</snippet></ROW><ROW><id>4348765</id><snippet>def path_vals(mx, path):
    """
    @param mx    Matrix data
    @param path  List of cell positions

    Return list of values from list of cell positions
    """

    return tuple([mx[x][y] for x,y in path])
</snippet></ROW><ROW><id>4348765</id><snippet>mx = [
    [1,9,2,3],
    [5,0,0,6],
    [8,4,4,8],
    [2,3,7,8]
]

def test():
    sols = [path_vals(mx, i) for i in matrix_path(5)]
</snippet></ROW><ROW><id>4348765</id><snippet>def test():
    usol = list(set([path_vals(mx, i) for i in matrix_path(5)]))
    print len(usol),"unique results"

cProfile.run("test()")
</snippet></ROW><ROW><id>4349045</id><snippet>id</snippet></ROW><ROW><id>4349045</id><snippet>idNum = 6
# handy function the datastore API provides...
user = Users.get_by_id(idNum)
self.response.out.write(user.username)
</snippet></ROW><ROW><id>4349183</id><snippet>os</snippet></ROW><ROW><id>4349183</id><snippet>mainfile.os</snippet></ROW><ROW><id>4349183</id><snippet>os</snippet></ROW><ROW><id>4349183</id><snippet>sys.modules["os"]</snippet></ROW><ROW><id>4349222</id><snippet>http = httplib2.Http()
# get cookie_value here
headers = {'Cookie':cookie_value}
response, content = http.request("http://www.theURL.com", 'GET', headers=headers)
</snippet></ROW><ROW><id>4349355</id><snippet>map()</snippet></ROW><ROW><id>4349355</id><snippet>filter()</snippet></ROW><ROW><id>4349355</id><snippet>reduce()</snippet></ROW><ROW><id>4349355</id><snippet>ListTransform</snippet></ROW><ROW><id>4349355</id><snippet>def compose(f, g):
    return lambda lst: f(g(lst))
</snippet></ROW><ROW><id>4349355</id><snippet>from functools import partial
map_transform = partial(map, lambda x: x + (x/10))
pick_transform = lambda lst: [lst[i] for i in (5,6,7)]
transform = compose(pick_transform, map_transform)
print transform([0,10,20,30,40,50,60,70,80,90])
# [55, 66, 77]
</snippet></ROW><ROW><id>4349816</id><snippet>ie.open_new_tab(url1)
ie.open_new_tab(url2)
ie.open_new_tab(url3)
</snippet></ROW><ROW><id>4349830</id><snippet>hasattr</snippet></ROW><ROW><id>4349830</id><snippet>dict</snippet></ROW><ROW><id>4349830</id><snippet>in</snippet></ROW><ROW><id>4349830</id><snippet>hasattr</snippet></ROW><ROW><id>4349830</id><snippet>if 'username' in self.request.cookies and 'password' in self.request.cookies:
    # check against the datastore
</snippet></ROW><ROW><id>4349830</id><snippet>username = ''</snippet></ROW><ROW><id>4349830</id><snippet># will be None if the cookie is missing
username = self.request.cookies.get('username') 
password = self.request.cookies.get('password')

# This makes sure that a username and password were both retrieved
# from the cookies, and that they're both NOT the empty string (because
# the empty string evaluates to False in this context)
if username and password:
    # check against the datastore
else:
    self.redirect("/wrong2")
</snippet></ROW><ROW><id>4350029</id><snippet>RSS</snippet></ROW><ROW><id>4350029</id><snippet>if cant_get_lock:
    exit
else:
for i in (1,2,3,4):
    get RSS
    sleep 15 seconds
</snippet></ROW><ROW><id>4350232</id><snippet>csc</snippet></ROW><ROW><id>4350232</id><snippet>clr.AddReference</snippet></ROW><ROW><id>4350232</id><snippet>import clr
clr.AddReference('System.Speech')
from System.Speech.Synthesis import SpeechSynthesizer

spk = SpeechSynthesizer()
spk.Speak('Hello world!')
</snippet></ROW><ROW><id>4350243</id><snippet>"img_id"</snippet></ROW><ROW><id>4350243</id><snippet>greeting.avatar</snippet></ROW><ROW><id>4350243</id><snippet>img_id</snippet></ROW><ROW><id>4350243</id><snippet>img_id.avatar</snippet></ROW><ROW><id>4350243</id><snippet>&lt;img src="some_link" /&gt;</snippet></ROW><ROW><id>4350243</id><snippet>"some_link"</snippet></ROW><ROW><id>4350243</id><snippet>avatar</snippet></ROW><ROW><id>4350243</id><snippet>result.key()</snippet></ROW><ROW><id>4350243</id><snippet>img_id</snippet></ROW><ROW><id>4350243</id><snippet>.key()</snippet></ROW><ROW><id>4350243</id><snippet>1024582485008</snippet></ROW><ROW><id>4350281</id><snippet>gtk.gdk.threads_init</snippet></ROW><ROW><id>4350281</id><snippet>gtk.TextBuffer</snippet></ROW><ROW><id>4350281</id><snippet>gtk.TextView</snippet></ROW><ROW><id>4350281</id><snippet>import gtk
import subprocess
import threading

gtk.gdk.threads_init()

class FollowProcess(threading.Thread):
    def __init__(self, cmd, text_buffer):
        self.tb = text_buffer
        self.child = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
        super(FollowProcess, self).__init__()

    def run(self):
        while not self.child.poll():
            out = self.child.stdout.read(1)
            if out != '':
                gtk.gdk.threads_enter()
                self.tb.insert_at_cursor(out)
                gtk.gdk.threads_leave()

def destroy(w, cmd):
    cmd.child.terminate()
    gtk.main_quit()

i = 0
def click_count(btn):
    global i
    message.set_text('Calling button %d' %i)
    i += 1

other_command = 'python extranger.py'

w = gtk.Window()
w.resize(400, 400)

message = gtk.Label('Nothing')
tb = gtk.TextBuffer()
tv = gtk.TextView(tb)
scroll = gtk.ScrolledWindow()
scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
scroll.add(tv)

box = gtk.VBox()
button = gtk.Button('Active button')

cmd = FollowProcess('python extranger.py', tb)

button.connect('clicked', click_count )

w.connect('destroy', destroy, cmd)
box.pack_start(button, False)
box.pack_start(message, False)
box.pack_start(scroll)


w.add(box)
w.show_all()
cmd.start()
gtk.main()
</snippet></ROW><ROW><id>4350281</id><snippet>extranger.py</snippet></ROW><ROW><id>4350281</id><snippet>import time
import sys

i = 0
while True:
    print 'some output %d' % i
    sys.stdout.flush() # you need this to see the output
    time.sleep(.5)
    i += 1
</snippet></ROW><ROW><id>4350337</id><snippet>class A(object):
    def fun(self, arg):
        return None
    fun = memoized(fun)
</snippet></ROW><ROW><id>4350456</id><snippet>update</snippet></ROW><ROW><id>4350456</id><snippet>import pynotify
import time   

pynotify.init('app name')
n=pynotify.Notification("title","Something is happening")
n.show()
time.sleep(2)
n.update("new title","2 things are happening")
n.show()
</snippet></ROW><ROW><id>4350500</id><snippet>item = gtk.MenuItem()
</snippet></ROW><ROW><id>4350500</id><snippet>gtk.Widget</snippet></ROW><ROW><id>4350500</id><snippet>item</snippet></ROW><ROW><id>4350626</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4350626</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>4350626</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>4350626</id><snippet>~/bin</snippet></ROW><ROW><id>4350626</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>4350626</id><snippet>"""Library for dealing with lengths and locations."""
</snippet></ROW><ROW><id>4350626</id><snippet>__doc__</snippet></ROW><ROW><id>4350626</id><snippet>import Dims</snippet></ROW><ROW><id>4350626</id><snippet>Dims.__doc__</snippet></ROW><ROW><id>4350626</id><snippet># Units
MM_BASIC = 1500000
MILS_BASIC = 38100
IN_BASIC = MILS_BASIC * 1000
</snippet></ROW><ROW><id>4350626</id><snippet>_SCALING = 1
_SCALES = {
    mm_basic: MM_BASIC,
    "mm": MM_BASIC,
    mils_basic: MILS_BASIC,
    "mil": MILS_BASIC,
    "mils": MILS_BASIC,
    "basic": 1,
    1: 1
}
</snippet></ROW><ROW><id>4350626</id><snippet>import Dims</snippet></ROW><ROW><id>4350626</id><snippet>Dims._SCALING</snippet></ROW><ROW><id>4350626</id><snippet>import Dims._SCALING as scaling</snippet></ROW><ROW><id>4350626</id><snippet>def UnitsToScale(units=None):
    """Scales the given units to the current scaling."""
    if units is None:
        return _SCALING
    elif units not in _SCALES:
        raise ValueError("unrecognized units: '%s'." % units)
    return _SCALES[units]
</snippet></ROW><ROW><id>4350626</id><snippet>UnitsToScale</snippet></ROW><ROW><id>4350626</id><snippet>=</snippet></ROW><ROW><id>4350626</id><snippet>class Length(object):
    """A length.  Makes unit conversions easier.

    The basic, mm, and mils properties can be used to get or set the length 
    in the desired units.
    &gt;&gt;&gt; x = Length(mils=1000)
    &gt;&gt;&gt; x.mils
    1000.0
    &gt;&gt;&gt; x.mm
    25.399999999999999
    &gt;&gt;&gt; x.basic
    38100000L
    &gt;&gt;&gt; x.mils = 100
    &gt;&gt;&gt; x.mm
    2.54
    """
</snippet></ROW><ROW><id>4350626</id><snippet>    def __init__(self, unscaled=0, basic=None, mm=None, mils=None, units=None):
        """Constructs a Length.

        Default contructor creates a length of 0.
        &gt;&gt;&gt; Length()
        Length(basic=0)

        Length(&lt;float&gt;) or Length(&lt;string&gt;) creates a length with the given 
        value at the current scale factor.
        &gt;&gt;&gt; Length(1500)
        Length(basic=1500)
        &gt;&gt;&gt; Length("1500")
        Length(basic=1500)
        """

        # Straight copy
        if isinstance(unscaled, Length):
            self._x = unscaled._x
            return

        # rest omitted
</snippet></ROW><ROW><id>4350626</id><snippet>    def _GetBasic(self): return self._x
    def _SetBasic(self, x): self._x = x
    basic = property(_GetBasic, _SetBasic, doc="""
        This returns the length in basic units.""")
</snippet></ROW><ROW><id>4350626</id><snippet>myLength.basic = 10</snippet></ROW><ROW><id>4350626</id><snippet>myLength._SetBasic(10)</snippet></ROW><ROW><id>4350626</id><snippet>property</snippet></ROW><ROW><id>4350626</id><snippet>    @property
    def basic(self):
        """This returns the length in basic units."""
        return self._x
</snippet></ROW><ROW><id>4350626</id><snippet>    def __mul__(self, other):
        """Multiplies a Length by a scalar.

        &gt;&gt;&gt; Length(10)*10
        Length(basic=100)
        &gt;&gt;&gt; 10*Length(10)
        Length(basic=100)
        """
        if type(other) not in _NumericTypes:
            return NotImplemented
        return Length(basic=self._x * other)
</snippet></ROW><ROW><id>4350626</id><snippet>*</snippet></ROW><ROW><id>4350626</id><snippet>NotImplemented</snippet></ROW><ROW><id>4350626</id><snippet>    __rmul__ = __mul__
</snippet></ROW><ROW><id>4350626</id><snippet>something * Length</snippet></ROW><ROW><id>4350626</id><snippet>Length * something</snippet></ROW><ROW><id>4350626</id><snippet>if __name__ == "__main__":
</snippet></ROW><ROW><id>4350626</id><snippet>if</snippet></ROW><ROW><id>4350626</id><snippet>    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>4351248</id><snippet>unexpand</snippet></ROW><ROW><id>4351248</id><snippet>python-examples</snippet></ROW><ROW><id>4351248</id><snippet>/usr/share/doc/python2.6/examples/Tools/scripts/reindent.py</snippet></ROW><ROW><id>4351419</id><snippet>class AvatarSave(webapp.RequestHandler):
    def post(self):
        avatar = images.resize(self.request.get("img"), 32, 32)
        greeting.avatar = db.Blob(avatar)
</snippet></ROW><ROW><id>4351419</id><snippet>    qTable = q.fetch(1)
    if qTable:
        for row in qTable:
        avatar = images.resize(self.request.get("img"), 32, 32)
        row.avatar = db.Blob(avatar)
        db.put(qTable)
</snippet></ROW><ROW><id>4351419</id><snippet>    qTable = q.fetch(1)
    if qTable:
        for row in qTable:
            avatar = images.resize(self.request.get("img"), 32, 32)
            row.avatar = db.Blob(avatar)
        db.put(qTable)
</snippet></ROW><ROW><id>4351419</id><snippet>    currentUser = q.get()
    if currentUser is not None:
        avatar = images.resize(self.request.get("img"), 32, 32)
        currentUser.avatar = db.Blob(avatar)
        currentUser.put()
</snippet></ROW><ROW><id>4351445</id><snippet>import logging
import os
import time

class SomeClass:
    def __init__(self):
        self.log_dir = os.getcwd()
        formatter = logging.Formatter('%(asctime)s %(message)s')
        self.my_logger = logging.getLogger('my_logger')
        self.my_logger.setLevel(logging.INFO)

        if self.log_dir != None:
            self.log_filename = os.path.join(self.log_dir, 'run.log')

        ch_file = logging.FileHandler(self.log_filename, 'w')
        ch_file.setLevel(logging.ERROR)
        ch_file.setFormatter(formatter)
        self.my_logger.addHandler(ch_file)

        ch_stream = logging.StreamHandler()
        ch_stream.setLevel(logging.INFO)

        # add formatter to ch
        ch_stream.setFormatter(formatter)

        # add ch to logger
        self.my_logger.addHandler(ch_stream)
        self.my_logger.info("Ready.")

        self.my_logger.error("My error")


def main():
    SomeClass()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4351445</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>4351445</id><snippet>__name__</snippet></ROW><ROW><id>4351445</id><snippet>'%s.detail' % __name__</snippet></ROW><ROW><id>4351612</id><snippet>def baseN(base,alphabet='0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    class _baseN(numbers.Number):
        digits=alphabet[:base]
        def __init__(self,value):
            if isinstance(value,int):
                self.value=value
                if self.value==0:
                    self.string='0'
                else:
                    tmp=[abs(value)]
                    while tmp[0]!=0:
                        tmp[:1]=divmod(tmp[0],base)
                    tmp=[alphabet[i] for i in tmp]
                    tmp[0]='-' if self.value&lt;0 else ''
                    self.string=''.join(tmp)
            elif isinstance(value,str):
                assert(value.isalnum())
                self.string=str(value)
                self.value=0
                for d in value:
                    self.value=self.value*base+self.digits.index(d)
            else:
                self.value=0
                self.string='0'
        def __int__(self):
            return self.value
        def __str__(self):
            return self.string
        def __repr__(self):
            return self.string
        def __add__(self,another):
            return self.__class__(self.value+int(another))
    return None if base&gt;len(alphabet) else _baseN
</snippet></ROW><ROW><id>4351679</id><snippet>with open('input.txt', 'rU') as fp:
  for line in fp:
    print line
</snippet></ROW><ROW><id>4352080</id><snippet>[line.split(',')[0] for line in entireResult.split('\n')]
</snippet></ROW><ROW><id>4352080</id><snippet>print '\n'.join(line.split(',')[0] for line in entireResult.split('\n'))
</snippet></ROW><ROW><id>4352272</id><snippet>__ne__</snippet></ROW><ROW><id>4352272</id><snippet>__eq__</snippet></ROW><ROW><id>4352272</id><snippet>x==y</snippet></ROW><ROW><id>4352272</id><snippet>x!=y</snippet></ROW><ROW><id>4352272</id><snippet>__eq__()</snippet></ROW><ROW><id>4352272</id><snippet>__ne__()</snippet></ROW><ROW><id>4352272</id><snippet>__eq__</snippet></ROW><ROW><id>4352318</id><snippet>base62</snippet></ROW><ROW><id>4352318</id><snippet>&gt;&gt;&gt; import base62
&gt;&gt;&gt; b = base62.base62(3)
</snippet></ROW><ROW><id>4352516</id><snippet>def LoginCheck(self):
    username = self.request.cookies.get('username') 
    password = self.request.cookies.get('password')
    if username and password:
        checkq = db.GqlQuery("SELECT * FROM Users WHERE username = :1 AND password = :2", username, password)
        checkresult = checkq.get()
        if checkresult is None:
            self.redirect("/wrong")
    else:
        self.redirect("/wrong2")
</snippet></ROW><ROW><id>4352704</id><snippet>Content-Type</snippet></ROW><ROW><id>4352704</id><snippet>self.response.out.write</snippet></ROW><ROW><id>4352704</id><snippet>self.response.headers['Content-Type'] = 'application/json'  
self.response.out.write(data)
</snippet></ROW><ROW><id>4352838</id><snippet>cx_Oracle.connect(u'hr/XXXXX@local_xe')
</snippet></ROW><ROW><id>4353012</id><snippet>if 'x' in locals()</snippet></ROW><ROW><id>4353012</id><snippet>if 'x' in globals()</snippet></ROW><ROW><id>4353033</id><snippet> db(db.tablename.fieldname &lt;= value).select() # web2py
 Tablename.objects.filter(fieldname__lt=value) # Django
</snippet></ROW><ROW><id>4353064</id><snippet>from PIL import Image
im = Image.open("C:\Users\Public\Pictures\Sample Pictures\Jellyfish.jpg")
im.save("C:\Users\Public\Pictures\Sample Pictures\Jellyfish_compressed.jpg", quality=10)
</snippet></ROW><ROW><id>4353168</id><snippet>from django.core.exceptions import ObjectDoesNotExist

try:
    thepost = Content.objects.get(name="test")
except ObjectDoesNotExist:
    thepost = None
</snippet></ROW><ROW><id>4353259</id><snippet>#include &lt;stdio.h&gt;

#define SMBUS_API __declspec(dllexport)
#define SMB_MAX_DATA_SIZE 5

typedef void* SMBUS_HANDLE;

typedef struct _SMB_REQUEST
{
    unsigned char Address;
    unsigned char Command;
    unsigned char BlockLength;
    unsigned char Data[SMB_MAX_DATA_SIZE];
} SMB_REQUEST;

SMBUS_API int SmBusReadByte(SMBUS_HANDLE handle,SMB_REQUEST *request)
{
    unsigned char i;
    for(i = 0; i &lt; request-&gt;BlockLength; i++)
        request-&gt;Data[i] = i;
    return request-&gt;BlockLength;
}

SMBUS_API SMBUS_HANDLE OpenSmbus(void)
{
    return (void*)0x12345678;
}
</snippet></ROW><ROW><id>4353259</id><snippet>from ctypes import *
SMB_MAX_DATA_SIZE = 5
ARRAY5 = c_ubyte * SMB_MAX_DATA_SIZE

class SMB_REQUEST(Structure):
    _fields_ = [
        ("Address", c_ubyte),
        ("Command", c_ubyte),
        ("BlockLength", c_ubyte),
        ("Data", ARRAY5)]

smbus_read_byte = CDLL('x').SmBusReadByte
smbus_read_byte.argtypes = [c_void_p,POINTER(SMB_REQUEST)]
smbus_read_byte.restype = c_int
open_smbus = CDLL('x').OpenSmbus
open_smbus.argtypes = []
open_smbus.restype = c_void_p

handle = open_smbus()
print 'handle = %08Xh' % handle

smb_request = SMB_REQUEST(1,2,5)

print 'returned =',smbus_read_byte(handle,byref(smb_request))
print 'Address =',smb_request.Address
print 'Command =',smb_request.Command
print 'BlockLength =',smb_request.BlockLength
for i,b in enumerate(smb_request.Data):
    print 'Data[%d] = %02Xh' % (i,b)
</snippet></ROW><ROW><id>4353259</id><snippet>handle = 12345678h
returned = 5
Address = 1
Command = 2
BlockLength = 5
Data[0] = 00h
Data[1] = 01h
Data[2] = 02h
Data[3] = 03h
Data[4] = 04h
</snippet></ROW><ROW><id>4354285</id><snippet>self.response.out.write("""
          &lt;form action="/avatar-save" enctype="multipart/form-data" method="post"&gt;                
            &lt;div&gt;&lt;label&gt;Avatar:&lt;/label&gt;&lt;/div&gt;
            &lt;div&gt;&lt;input type="file" name="img"/&gt;&lt;/div&gt;
            &lt;input type="submit"/&gt;
          &lt;/form&gt;...
</snippet></ROW><ROW><id>4354285</id><snippet>User</snippet></ROW><ROW><id>4354285</id><snippet>class User(db.Model):
    userEmail = db.EmailProperty()
    userScore = db.IntegerProperty()
    avatar = db.BlobProperty()
</snippet></ROW><ROW><id>4354285</id><snippet>from main import User
User(userEmail='az@example.com', userScore=1).put()
</snippet></ROW><ROW><id>4354381</id><snippet>lambda</snippet></ROW><ROW><id>4354381</id><snippet>foo()</snippet></ROW><ROW><id>4354381</id><snippet>bar()</snippet></ROW><ROW><id>4354381</id><snippet>resultList = map(lambda x: foo(x) if x &gt; 0 else bar(x), listOfNumbers)
</snippet></ROW><ROW><id>4354381</id><snippet>lambda</snippet></ROW><ROW><id>4354381</id><snippet>resultList = [foo(x) if x &gt; 0 else bar(x) for x in listOfNumbers)
</snippet></ROW><ROW><id>4354553</id><snippet>In [72]: n = pynotify.Notification('title', 'content', 'icon')

In [73]: n.props.summary
Out[74]: 'title'

In [75]: n.props.body
Out[75]: 'content'

In [76]: n.props.icon_name
Out[77]: 'icon'
</snippet></ROW><ROW><id>4354935</id><snippet>easy_install</snippet></ROW><ROW><id>4354935</id><snippet>ffmpeg</snippet></ROW><ROW><id>4355054</id><snippet>appcfg.py</snippet></ROW><ROW><id>4355191</id><snippet>numpy.digitize()</snippet></ROW><ROW><id>4355191</id><snippet>i</snippet></ROW><ROW><id>4355191</id><snippet>bins[i-1] &lt;= x &lt; bins[i]</snippet></ROW><ROW><id>4355191</id><snippet>bins</snippet></ROW><ROW><id>4355191</id><snippet>bins[i-1] &gt; x &gt;= bins[i]</snippet></ROW><ROW><id>4355191</id><snippet>bins</snippet></ROW><ROW><id>4355191</id><snippet>x</snippet></ROW><ROW><id>4355191</id><snippet>bins</snippet></ROW><ROW><id>4355191</id><snippet>0</snippet></ROW><ROW><id>4355191</id><snippet>len(bins)</snippet></ROW><ROW><id>4355191</id><snippet>0</snippet></ROW><ROW><id>4355191</id><snippet>17</snippet></ROW><ROW><id>4355191</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>4355191</id><snippet>17</snippet></ROW><ROW><id>4355191</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>4355191</id><snippet>array.min()</snippet></ROW><ROW><id>4355191</id><snippet>array.max()</snippet></ROW><ROW><id>4355191</id><snippet>array.min()</snippet></ROW><ROW><id>4355191</id><snippet>array.max()</snippet></ROW><ROW><id>4355191</id><snippet>0</snippet></ROW><ROW><id>4355207</id><snippet>print "".join(e[0] for e in x.split())
</snippet></ROW><ROW><id>4355207</id><snippet>x</snippet></ROW><ROW><id>4355207</id><snippet>x.split()</snippet></ROW><ROW><id>4355281</id><snippet>cjpeg</snippet></ROW><ROW><id>4355281</id><snippet>from subprocess import Popen, PIPE
from PIL import Image, ImageFilter

proc = Popen('%s -sample 1x1 -optimize -progressive -qtables %s -outfile %s' % ('path/to/cjpeg', '/path/ta/qtable', 'out.jpg'), shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
P = '6'
if im.mode == 'L':
    P = '5'
stdout, stderr = proc.communicate('P%s\n%s %s\n255\n%s' % (P, im.size[0], im.size[1], im.tostring()))
</snippet></ROW><ROW><id>4355281</id><snippet>djpeg</snippet></ROW><ROW><id>4355281</id><snippet>djpeg -verbose -verbose image.jpg &gt; /dev/null
</snippet></ROW><ROW><id>4355281</id><snippet>test_subsampling</snippet></ROW><ROW><id>4355281</id><snippet>quality='keep'</snippet></ROW><ROW><id>4355281</id><snippet>pip install Pillow
</snippet></ROW><ROW><id>4355534</id><snippet>ftp.login()</snippet></ROW><ROW><id>4355534</id><snippet>ftp.login(user='foo', passwd='bar')
</snippet></ROW><ROW><id>4355534</id><snippet>#!/usr/bin/env python

from ftplib import FTP

HOST   = "localhost"
UNAME  = "foo"
PASSWD = "bar"
DIR    = "pub"
FILE   = "test.test"

def download_cb(block):
    file.write(block)

ftp = FTP(HOST)
ftp.login(user=UNAME, passwd=PASSWD)
ftp.cwd(DIR)

file = open(FILE, "wb")
ftp.retrbinary("RETR " + FILE, download_cb)
file.close()
ftp.close()
</snippet></ROW><ROW><id>4355534</id><snippet>retrbinary</snippet></ROW><ROW><id>4355534</id><snippet>ftp.sendcmd("TYPE I")</snippet></ROW><ROW><id>4355578</id><snippet>get_absolute_url</snippet></ROW><ROW><id>4355578</id><snippet>save</snippet></ROW><ROW><id>4355701</id><snippet>int_asbuffer()</snippet></ROW><ROW><id>4355701</id><snippet>buffer = numpy.core.multiarray.int_asbuffer(
    ctypes.addressof(y.contents), 8*array_length)
</snippet></ROW><ROW><id>4355701</id><snippet>8</snippet></ROW><ROW><id>4355701</id><snippet>np.dtype(float).itemsize</snippet></ROW><ROW><id>4355701</id><snippet>PyBuffer_FromMemory()</snippet></ROW><ROW><id>4355701</id><snippet>buffer_from_memory = ctypes.pythonapi.PyBuffer_FromMemory
buffer_from_memory.restype = ctypes.py_object
buffer = buffer_from_memory(y, 8*array_length)
</snippet></ROW><ROW><id>4355701</id><snippet>buffer</snippet></ROW><ROW><id>4355701</id><snippet>a = numpy.frombuffer(buffer, float)
</snippet></ROW><ROW><id>4355701</id><snippet>.astype()</snippet></ROW><ROW><id>4355701</id><snippet>frombuffer</snippet></ROW><ROW><id>4355701</id><snippet>np.int</snippet></ROW><ROW><id>4355701</id><snippet>double</snippet></ROW><ROW><id>4355834</id><snippet>import sys
sys.argv = raw_input('Enter command line arguments: ').split()

#Rest of the program here
</snippet></ROW><ROW><id>4355834</id><snippet>input</snippet></ROW><ROW><id>4355834</id><snippet>raw_input</snippet></ROW><ROW><id>4355934</id><snippet>x = [p[0] for p in points]
y = [p[1] for p in points]
centroid = (sum(x) / len(points), sum(y) / len(points))
</snippet></ROW><ROW><id>4356069</id><snippet>b</snippet></ROW><ROW><id>4356345</id><snippet>fork</snippet></ROW><ROW><id>4356345</id><snippet>stdout</snippet></ROW><ROW><id>4356415</id><snippet>izip</snippet></ROW><ROW><id>4356415</id><snippet>itertools</snippet></ROW><ROW><id>4356415</id><snippet>dict</snippet></ROW><ROW><id>4356415</id><snippet>pairwise()</snippet></ROW><ROW><id>4356415</id><snippet>itertools</snippet></ROW><ROW><id>4356415</id><snippet>zip()</snippet></ROW><ROW><id>4356415</id><snippet>izip()</snippet></ROW><ROW><id>4356415</id><snippet>itertools</snippet></ROW><ROW><id>4356415</id><snippet>try:
    from itertools import izip
except ImportError:  # Python 3
    izip = zip

def pairwise(iterable):
    "s -&gt; (s0,s1), (s2,s3), (s4, s5), ..."
    a = iter(iterable)
    return izip(a, a)
</snippet></ROW><ROW><id>4356415</id><snippet>for</snippet></ROW><ROW><id>4356415</id><snippet>from sys import argv

records = {}
for line in open(argv[1]):
    fields = (field.strip() for field in line.split(','))  # generator expression obj
    record = dict(pairwise(fields))
    records[record['TSN']] = record

print 'Found %d records in the file.' % len(records)
</snippet></ROW><ROW><id>4356415</id><snippet>grouper()</snippet></ROW><ROW><id>4356415</id><snippet>itertools</snippet></ROW><ROW><id>4356415</id><snippet>pairwise()</snippet></ROW><ROW><id>4356415</id><snippet>def grouper(n, iterable):
    "s -&gt; (s0,s1,...sn-1), (sn,sn+1,...s2n-1), (s2n,s2n+1,...s3n-1), ..."
    return izip( *([iter(iterable)]*n) )  # extra pair of parentheses for readability
</snippet></ROW><ROW><id>4356415</id><snippet>for</snippet></ROW><ROW><id>4356415</id><snippet>    record = dict(grouper(2, fields))
</snippet></ROW><ROW><id>4356415</id><snippet>functools.partial()</snippet></ROW><ROW><id>4356415</id><snippet>pairwise()</snippet></ROW><ROW><id>4356415</id><snippet>import functools
pairwise = functools.partial(grouper, 2)
</snippet></ROW><ROW><id>4356532</id><snippet>value = raw_input('Please enter a value between 10 and' + str(max) + 'for percentage')
</snippet></ROW><ROW><id>4356563</id><snippet>import urlparse
url_data = urlparse.urlparse("http://www.youtube.com/watch?v=z_AbfPXTKms&amp;NR=1")
query = urlparse.parse_qs(url_data.query)
video = query["v"][0]
</snippet></ROW><ROW><id>4356744</id><snippet>defaultdict</snippet></ROW><ROW><id>4356744</id><snippet>import collections
import operator

frequencies = collections.defaultdict(int)
with open(filename) as f_in:
    for line in f_in:
        for char in line:
            frequencies[char] += 1


frequencies = [(count, char) for char, count in frequencies.iteritems()]
frequencies.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>4357088</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>4357088</id><snippet>sys.stdin.read(n)</snippet></ROW><ROW><id>4357088</id><snippet>sys.stdin.read</snippet></ROW><ROW><id>4357385</id><snippet>render_to_response</snippet></ROW><ROW><id>4357514</id><snippet>for key in data:
  exec("{0} = '{1}'".format(key,data[key]))
</snippet></ROW><ROW><id>4357687</id><snippet>global storage_i
storage_i = i 
</snippet></ROW><ROW><id>4357687</id><snippet>birdofprey.storage_i = i
</snippet></ROW><ROW><id>4357687</id><snippet>storage_ii = stroage_i + storage_ii
</snippet></ROW><ROW><id>4357687</id><snippet>stroage_i</snippet></ROW><ROW><id>4357687</id><snippet>storage_i</snippet></ROW><ROW><id>4357687</id><snippet>storage_ii =  birdofprey.storage_i + storage_ii
</snippet></ROW><ROW><id>4357687</id><snippet>Thread.join</snippet></ROW><ROW><id>4357687</id><snippet>self.storage_i</snippet></ROW><ROW><id>4357687</id><snippet>for</snippet></ROW><ROW><id>4357687</id><snippet>urlv.storage_i</snippet></ROW><ROW><id>4357687</id><snippet>join</snippet></ROW><ROW><id>4357797</id><snippet>django.forms.util</snippet></ROW><ROW><id>4357797</id><snippet>clean()</snippet></ROW><ROW><id>4357797</id><snippet>cleaned_data</snippet></ROW><ROW><id>4357797</id><snippet>your_form._errors[ "your_field" ] = ErrorList( [ "Your error message" ] )
</snippet></ROW><ROW><id>4357842</id><snippet>&gt;&gt;&gt; x = ['Jack', 18, 'IM-101', 99.9]
&gt;&gt;&gt; [e for e in x if isinstance(e, int)]
[18]
</snippet></ROW><ROW><id>4357894</id><snippet>   {% for f in docform %}
        {{ f.errors }}
    {% endfor %}
    {{ docform.non_field_errors }}
</snippet></ROW><ROW><id>4358561</id><snippet>PyArray_DATA</snippet></ROW><ROW><id>4358561</id><snippet>PyArray_DATA</snippet></ROW><ROW><id>4358561</id><snippet>#define PyArray_DATA(obj) ((void *)(((PyArrayObject *)(obj))-&gt;data))
</snippet></ROW><ROW><id>4358561</id><snippet>char *data;
</snippet></ROW><ROW><id>4358561</id><snippet>data</snippet></ROW><ROW><id>4358561</id><snippet>NULL</snippet></ROW><ROW><id>4358561</id><snippet>PyArray_NewFromDescr</snippet></ROW><ROW><id>4358561</id><snippet>PyArray_NewFromDescr</snippet></ROW><ROW><id>4358561</id><snippet>PyDataMem_NEW</snippet></ROW><ROW><id>4358561</id><snippet>data</snippet></ROW><ROW><id>4358561</id><snippet>#define PyDataMem_NEW(size) ((char *)malloc(size))
</snippet></ROW><ROW><id>4358561</id><snippet>PyArray_DATA</snippet></ROW><ROW><id>4358631</id><snippet>def showForm(request):
    if request.method == "POST":
        form = MyForm(request.POST)
        if form.is_valid():
            # do stuff on success, like redirection
    else:
        form = MyForm()

    return render_to_response(...,
                              {"form" : form})
    # then in the template, use {{ form.as_table }}, for example
</snippet></ROW><ROW><id>4358725</id><snippet>&gt;&gt;&gt; re.sub(r'.{20}(.mkv)', r'\1', 'unique12345678901234567890.mkv')
'unique.mkv'
</snippet></ROW><ROW><id>4358725</id><snippet>&gt;&gt;&gt; 'unique12345678901234567890.mkv'[:-24] + '.mkv'
'unique.mkv'
</snippet></ROW><ROW><id>4358725</id><snippet>os.rename(old, new)</snippet></ROW><ROW><id>4358725</id><snippet>glob.glob('*.mkv')</snippet></ROW><ROW><id>4358725</id><snippet>for filename in glob.glob('*.mkv'):
    if len(filename) &gt; 24:
        os.rename(filename, filename[:-24] + '.mkv'
</snippet></ROW><ROW><id>4358911</id><snippet>pr_nm_del</snippet></ROW><ROW><id>4358911</id><snippet>del</snippet></ROW><ROW><id>4358911</id><snippet>project_name</snippet></ROW><ROW><id>4358911</id><snippet>delete_project</snippet></ROW><ROW><id>4358911</id><snippet>project_name</snippet></ROW><ROW><id>4358911</id><snippet>name</snippet></ROW><ROW><id>4358911</id><snippet>_to_be_deleted</snippet></ROW><ROW><id>4358967</id><snippet>$ easy_install -m PackageName

$ rm EggFile
</snippet></ROW><ROW><id>4358967</id><snippet>-m</snippet></ROW><ROW><id>4358967</id><snippet>import</snippet></ROW><ROW><id>4358981</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4358981</id><snippet>args</snippet></ROW><ROW><id>4358981</id><snippet>executable</snippet></ROW><ROW><id>4359094</id><snippet>itertools.product()</snippet></ROW><ROW><id>4359300</id><snippet>request.POST.getlist('recommendations')
</snippet></ROW><ROW><id>4359487</id><snippet>   bodies = message.bodies(content_type='text/html')
    allBodies = u"";
    for body in bodies:
      allBodies = allBodies + u"\n" + unicode(goodDecode(body[1]), errors="ignore")
    if not allBodies:
      bodies = message.bodies(content_type='text/plain')
      for body in bodies:
        allBodies = allBodies + u"\n" + unicode(goodDecode(body[1]), errors="ignore")

    msg = EmailMessageModel()
...fill in various stuff...
    msg.sender = message.sender
    msg.date = datetime.datetime.now()
    msg.message = allBodies
    # Calling put() before dealing with attachments because it seems like that could throw various exceptions
    msg.put()
    event.email = True
    event.put()
    event.project.email = True
    event.project.put()
    # attachments is a list of element pairs containing file names and contents.

    try:
      if hasattr(message, 'attachments'):
        for a in message.attachments:
          msg.attachmentNames.append(a[0])
          msg.attachmentContents.append(db.Blob(goodDecode(a[1])))
        msg.put()
    except:
      logging.exception("Exception decoding attachments in email from %s" % message.sender)
</snippet></ROW><ROW><id>4359487</id><snippet>def goodDecode(encodedPayload):
  if not hasattr(encodedPayload, 'encoding'):
    return encodedPayload
  encoding = encodedPayload.encoding
  payload = encodedPayload.payload
  if encoding and encoding.lower() != '7bit':
    payload = payload.decode(encoding)
  return payload
</snippet></ROW><ROW><id>4359487</id><snippet>class EmailMessageModel(db.Model):
....various stuff...
  sender = db.StringProperty()
  date = db.DateTimeProperty()
  message = db.TextProperty()
  attachmentNames = db.StringListProperty()
  attachmentContents = db.ListProperty(db.Blob)
</snippet></ROW><ROW><id>4359487</id><snippet>&lt;h2&gt;{{ e.sender }} {{ e.date|date:"M j, Y f A " }} GMT&lt;/h2&gt;
&lt;p&gt;From: {{ e.sender }}&lt;br/&gt;Date: {{ e.date|date:"M j, Y f A" }} GMT ({{ e.date|timesince }} ago)&lt;br/&gt;Subject: {{ e.subject }}&lt;/p&gt;
{% if e.attachmentNames %}
&lt;p&gt;Attachments: 
  {% for a in e.attachmentNames %}
&lt;a href="/admin/attachment?email={{ e.key }}&amp;index={{ forloop.counter0 }}" target="_blank"&gt;{{ a }}&lt;/a&gt;
  {% endfor %}
&lt;/p&gt;
{% endif %}
&lt;div style='background-color: white'&gt;{{ e.message }}&lt;/div&gt;
</snippet></ROW><ROW><id>4359487</id><snippet>class AttachmentHandler(webapp.RequestHandler):
  def get(self):
    email = EmailMessageModel.get(self.request.get('email'))
    index = self.request.get('index')
    if index:
      index = int(index)
      filename = email.attachmentNames[index]
      self.response.headers['Content-Type'] = str(mimetypes.guess_type(filename)[0]) or 'application/octet-stream'
      self.response.out.write(email.attachmentContents[index])
</snippet></ROW><ROW><id>4359522</id><snippet>StringIO</snippet></ROW><ROW><id>4359522</id><snippet>urllib.urlopen()</snippet></ROW><ROW><id>4359895</id><snippet>builder = gtk.Builder()
builder.add_from_file("GUI.xml")
builder.connect_signals(self)
self.window1 = builder.get_object("window1")
self.window1.show()
</snippet></ROW><ROW><id>4359895</id><snippet>builder.add_from_string("""
&lt;interface&gt;
  &lt;object class="GtkWindow" id="window1"&gt;
    &lt;child&gt;
      &lt;object class="GtkComboBox" id="combobox1"&gt;
        &lt;property name="model"&gt;liststore1&lt;/property&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;""")

self.window1 = builder.get_object("window1")
</snippet></ROW><ROW><id>4359966</id><snippet>result = [y for x in text for y in x]
</snippet></ROW><ROW><id>4359966</id><snippet>itertools.chain</snippet></ROW><ROW><id>4359966</id><snippet>from itertools import chain
result = list(chain(*text))
</snippet></ROW><ROW><id>4360045</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>4360045</id><snippet>sudo</snippet></ROW><ROW><id>4360045</id><snippet>sudo</snippet></ROW><ROW><id>4360045</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>4360045</id><snippet>sudo</snippet></ROW><ROW><id>4360045</id><snippet>sudo</snippet></ROW><ROW><id>4360045</id><snippet>sudo /bin/bash</snippet></ROW><ROW><id>4360062</id><snippet>{4FBE7FE9-4AD1-4D70-BB77-66963016FD09}</snippet></ROW><ROW><id>4360062</id><snippet>HNetCfg.FwMgr</snippet></ROW><ROW><id>4360062</id><snippet>regsvr32 %windir%\system32\hnetcfg.dll
</snippet></ROW><ROW><id>4360083</id><snippet>head</snippet></ROW><ROW><id>4360083</id><snippet>add()</snippet></ROW><ROW><id>4360083</id><snippet>CircleList</snippet></ROW><ROW><id>4360083</id><snippet>def add(self, element):
    head = self.head
    print(head)
    size = self.size
    if head is None:
        self.head = head = Node(element, None)  # Also set the instance member.
        head.next = head
</snippet></ROW><ROW><id>4360121</id><snippet>b</snippet></ROW><ROW><id>4360121</id><snippet>a/b</snippet></ROW><ROW><id>4360121</id><snippet>exp(log(a) - log(b))</snippet></ROW><ROW><id>4360121</id><snippet>numpy.seterr</snippet></ROW><ROW><id>4360128</id><snippet>elif sys.platform == "darwin":
    from osx import *
</snippet></ROW><ROW><id>4360128</id><snippet>from btcommon import *

raise NotImplementedError
</snippet></ROW><ROW><id>4360499</id><snippet>def characters(c):
  print ' '.join(map(chr, range(ord(c), ord('a'), -1) + range(ord('a'), ord(c)+1)))

&gt;&gt;&gt; characters('d')
d c b a b c d
</snippet></ROW><ROW><id>4360499</id><snippet>def characters(c):
  for n in xrange(ord(c), ord('a'), -1):
    print chr(n),
  for n in xrange(ord('a'), ord(c)+1):
   print chr(n),
  print
</snippet></ROW><ROW><id>4360529</id><snippet>self.response.out.write(template.render(path, {''admin':users.is_current_user_admin()..
</snippet></ROW><ROW><id>4360529</id><snippet>{% if admin %} ... admin stuff
</snippet></ROW><ROW><id>4360668</id><snippet>birdofprey</snippet></ROW><ROW><id>4360668</id><snippet>birdofprey</snippet></ROW><ROW><id>4360668</id><snippet>birdofprey</snippet></ROW><ROW><id>4360668</id><snippet>run</snippet></ROW><ROW><id>4360668</id><snippet>storage_i</snippet></ROW><ROW><id>4360668</id><snippet>for</snippet></ROW><ROW><id>4360668</id><snippet>join</snippet></ROW><ROW><id>4361009</id><snippet>r'/wiki/(\w+)'
</snippet></ROW><ROW><id>4361009</id><snippet>r'/wiki/([A-Za-z_]+)'
</snippet></ROW><ROW><id>4361009</id><snippet>wikipage</snippet></ROW><ROW><id>4361009</id><snippet>get()</snippet></ROW><ROW><id>4361032</id><snippet>' '.join("%s=%s" % (y, x) for x,y in input)</snippet></ROW><ROW><id>4361032</id><snippet>f.write</snippet></ROW><ROW><id>4361032</id><snippet>f = open('text.txt', 'w')
f.write(' '.join("%s=%s" % (y, x) for x,y in input))
f.close()
</snippet></ROW><ROW><id>4361401</id><snippet>np.flatnonzero</snippet></ROW><ROW><id>4361401</id><snippet>import numpy as np

TIME = np.array([0.,   10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90.])
FLOW = np.array([100., 75.,  60.,  20.0, 60.0, 50.0, 20.0, 30.0, 20.0, 10.0])
TEMP = np.array([300., 310., 305., 300., 310., 305., 310., 305., 300., 295.0])

last_high_flow_index = np.flatnonzero(FLOW &gt; 50)[-1]
low_flow_indices = np.flatnonzero(FLOW &lt; 30)
acceptable_low_flow_indices = low_flow_indices[low_flow_indices &gt; last_high_flow_index]
apply_after_index = acceptable_low_flow_indices[0]
</snippet></ROW><ROW><id>4361401</id><snippet>time_delta = TIME[apply_after_index:] - TIME[apply_after_index]
TEMP[apply_after_index:] = TEMP[apply_after_index:] * np.exp(-0.05 * time_delta)
</snippet></ROW><ROW><id>4361401</id><snippet>TEMP</snippet></ROW><ROW><id>4361401</id><snippet>print TEMP</snippet></ROW><ROW><id>4361401</id><snippet>[ 300.          310.          305.          300.          310.          305.
  310.          184.99185121  110.36383235   65.82339724]
</snippet></ROW><ROW><id>4361401</id><snippet>def myfunc(x):
    ''' a normal python function that acts on individual numbers'''
    return x + 3

myfunc_v = np.vectorize(myfunc)
</snippet></ROW><ROW><id>4361401</id><snippet>TEMP[apply_after:] = myfunc_v(TEMP[apply_after:])
</snippet></ROW><ROW><id>4361569</id><snippet>import StringIO
temp = StringIO.StringIO()  
write xxx to temp file here  
...  
write 'input' data to output file here  
temp.seek(0) # sets current position in file to it's beginning  
for line in temp:  
    output.write(line)
temp.close()  
output.close()
</snippet></ROW><ROW><id>4362007</id><snippet>class myClass():
    def __init__(self, member1 = 5):
        self.member1 = member1

def myFunction(x):
    var1 = myClass().member1
    print x, var1


myFunction(2)
</snippet></ROW><ROW><id>4362045</id><snippet>import ctypes
class SYSTEMTIME(ctypes.Structure):
    _fields_ = [
        ('wYear', ctypes.c_int16),
        ('wMonth', ctypes.c_int16),
        ('wDayOfWeek', ctypes.c_int16),
        ('wDay', ctypes.c_int16),
        ('wHour', ctypes.c_int16),
        ('wMinute', ctypes.c_int16),
        ('wSecond', ctypes.c_int16),
        ('wMilliseconds', ctypes.c_int16)]

SystemTime = SYSTEMTIME()
lpSystemTime = ctypes.pointer(SystemTime)
ctypes.windll.kernel32.GetLocalTime(lpSystemTime)
print SystemTime.wHour, SystemTime.wMinute 
</snippet></ROW><ROW><id>4362093</id><snippet>python -i scriptname.py</snippet></ROW><ROW><id>4362100</id><snippet>File.query.values(Table.column)
</snippet></ROW><ROW><id>4362100</id><snippet>&gt;&gt;&gt; User.query.values('display_name')
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in ?
[snip traceback]
UnboundExecutionError: Could not locate a bind [ ... ] or this Session
&gt;&gt;&gt; User.query.values(User.display_name).next()
(u'Vinay Sajip',)
</snippet></ROW><ROW><id>4362770</id><snippet>Content-Length</snippet></ROW><ROW><id>4362770</id><snippet>Http.request(method="HEAD")</snippet></ROW><ROW><id>4362770</id><snippet>Content-Length</snippet></ROW><ROW><id>4362770</id><snippet>GET</snippet></ROW><ROW><id>4362770</id><snippet>POST</snippet></ROW><ROW><id>4363101</id><snippet>@register.filter
def lookup(d, key):
    if key not in d:
        return None
    return d[key]
</snippet></ROW><ROW><id>4363101</id><snippet>{% for dictkey in dict1.keys %}
    &lt;p&gt; {{ dict2|lookup:dictkey }} &lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>4363104</id><snippet>&gt;&gt;&gt; x = '00:03:12,200 --&gt; 00:03:14,316'
&gt;&gt;&gt; x1 = x.split('--&gt;')
&gt;&gt;&gt; x1
['00:03:12,200 ', ' 00:03:14,316']
&gt;&gt;&gt; t1 = datetime.datetime.strptime(x1[0], '%H:%M:%S,%f ')
&gt;&gt;&gt; t1
datetime.datetime(1900, 1, 1, 0, 3, 12, 200000)
</snippet></ROW><ROW><id>4363104</id><snippet>&gt;&gt;&gt; t = datetime.timedelta(seconds=1)
&gt;&gt;&gt; t
datetime.timedelta(0, 1)
&gt;&gt;&gt; 
&gt;&gt;&gt; t1 + t
datetime.datetime(1900, 1, 1, 0, 3, 13, 200000)
&gt;&gt;&gt; k = t1 + t
</snippet></ROW><ROW><id>4363104</id><snippet>&gt;&gt;&gt; k.strftime('%H:%M:%S,%f ')
'00:03:13,200000 '
</snippet></ROW><ROW><id>4363338</id><snippet>.findAll()</snippet></ROW><ROW><id>4363338</id><snippet>li</snippet></ROW><ROW><id>4363338</id><snippet>for ul in uls:
    for li in ul.findAll('li'):
        print(li)
</snippet></ROW><ROW><id>4363338</id><snippet>&lt;li&gt;List items&lt;/li&gt;
&lt;li&gt;Etc...&lt;/li&gt;
&lt;li&gt;List items&lt;/li&gt;
&lt;li&gt;Nested list items&lt;/li&gt;
&lt;li&gt;Nested list items&lt;/li&gt;
&lt;li&gt;List items&lt;/li&gt;
</snippet></ROW><ROW><id>4363380</id><snippet>from django.contrib.messages import get_messages, constants as message_level

def last_message(messages, level = None):
    """Returns the last Message object in the messages with the
    specified level, or just the last message if no level is
    specified
    """

    if level is None:
        return None if not messages else messages[-1]

    level = int(level)    # Not strictly necessary, but Message object does this in its __init__()
    for message in reversed(messages):
        if message.level == level:
            return message
    return None
</snippet></ROW><ROW><id>4363380</id><snippet>messages = get_messages(request)
the_last_message = last_message(messages)
the_last_success_message = last_message(messages, message_level.SUCCESS)
</snippet></ROW><ROW><id>4363680</id><snippet>def edit_contact(request):
     c={}
     profile = request.user.get_profile()
     EmployeeFormSet = generic_inlineformset_factory(PhoneNumber,extra=0,can_delete=False)
     EmployeeFormSet1=generic_inlineformset_factory(EmailAddress,extra=0,can_delete=False)
     EmployeeFormSet2 = generic_inlineformset_factory(Address, extra = 0, can_delete=False)
     if request.method == "POST":
        p_formset = EmployeeFormSet(data=request.POST, instance = profile),
        e_formset = EmployeeFormSet1(data=request.POST, instance = profile),
        a_formset = EmployeeFormSet2(data=request.POST, instance = profile),
        for e in p_formset:
           if e.is_valid():
             e.save()
         for e in e_formset:
           if e.is_valid():
              e.save()
         for e in a_formset:
           if e.is_valid():
              e.save()
         return HttpResponseRedirect('/forms/sucess-edit/')
      else:
          p_formset = EmployeeFormSet(instance = profile),
          e_formset = EmployeeFormSet1(instance = profile),
          a_formset = EmployeeFormSet2(instance = profile),
      c.update({'p_formset': p_formset, 'e_formset': e_formset,'a_formset': a_formset})
      return  render_to_response('forms/edit_contact.html',c,
                                    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>4363731</id><snippet>@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ss', out_signature='v')
def Get(self, interface, prop):
    ...
@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='ssv')
def Set(self, interface, prop, value):
    ...
@dbus.service.method(dbus.PROPERTIES_IFACE, in_signature='s', out_signature='a{sv}')
def GetAll(self, interface):
    ...
</snippet></ROW><ROW><id>4363882</id><snippet>from xgoogle.search import GoogleSearch
gs = GoogleSearch("quick and dirty")
gs.results_per_page = 50
results = gs.get_results()
</snippet></ROW><ROW><id>4364149</id><snippet>cursor.fetchone()</snippet></ROW><ROW><id>4364149</id><snippet>cursor.execute(query)
numrows = int(cursor.rowcount)
for x in range(0,numrows):
    row = cursor.fetchone()
</snippet></ROW><ROW><id>4364149</id><snippet>cursor.execute("SELECT * from sometable LIMIT 0, 100")
</snippet></ROW><ROW><id>4364413</id><snippet>sticky</snippet></ROW><ROW><id>4364413</id><snippet>grid</snippet></ROW><ROW><id>4364413</id><snippet>Tkinter.N + Tkinter.S + Tkinter.E + Tkinter.W</snippet></ROW><ROW><id>4364413</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>4364413</id><snippet>functools.partial</snippet></ROW><ROW><id>4364472</id><snippet>busy</snippet></ROW><ROW><id>4365089</id><snippet>import urllib
import httplib

params = urllib.urlencode({'method' : 'artist.getsimilar',
               'artist' : 'band',
               'limit' : '5',
               'api_key' : '#API key goes here'})

header = {"user-agent" : "myapp/1.0",
          "Content-type": "application/x-www-form-urlencoded"}

lastfm = httplib.HTTPConnection("ws.audioscrobbler.com")

lastfm.request("POST","/2.0/?",params,header)

response = lastfm.getresponse()
print response.read()
</snippet></ROW><ROW><id>4365141</id><snippet>subprocess</snippet></ROW><ROW><id>4365141</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; command = ['ffmpeg']
&gt;&gt;&gt; subprocess.call(command)
</snippet></ROW><ROW><id>4365141</id><snippet>ffmpeg</snippet></ROW><ROW><id>4365141</id><snippet>command</snippet></ROW><ROW><id>4365524</id><snippet>GtkVBox</snippet></ROW><ROW><id>4365524</id><snippet>GtkAssistant</snippet></ROW><ROW><id>4365556</id><snippet>str</snippet></ROW><ROW><id>4365556</id><snippet>print</snippet></ROW><ROW><id>4365608</id><snippet>connn.setopt(pycurl.WRITEFUNCTION, lambda data: real_impl(data, param1, param2))
</snippet></ROW><ROW><id>4366219</id><snippet>pysmnp</snippet></ROW><ROW><id>4366219</id><snippet>pysnmp</snippet></ROW><ROW><id>4366219</id><snippet>msession</snippet></ROW><ROW><id>4366219</id><snippet>pyasn1</snippet></ROW><ROW><id>4366219</id><snippet>apt-get install python-pysnmp</snippet></ROW><ROW><id>4366379</id><snippet>fromfile()</snippet></ROW><ROW><id>4366379</id><snippet>a = numpy.fromfile("filename", dtype=numpy.float32)
</snippet></ROW><ROW><id>4366379</id><snippet>n x m</snippet></ROW><ROW><id>4366379</id><snippet>a = a.reshape((n, m), order="FORTRAN")
</snippet></ROW><ROW><id>4366379</id><snippet>reshape()</snippet></ROW><ROW><id>4366379</id><snippet>a = a.reshape((m, n)).T
</snippet></ROW><ROW><id>4366397</id><snippet>class SavedForm(Model):
    user = ForeignKey(User)
    postdata = TextField()
</snippet></ROW><ROW><id>4366397</id><snippet>import pickle
class MyWizard(FormWizard):
    def done(self, request, form_list):
        SavedForm.objects.get(user=request.user).delete() # clear state!!
        return render_to_response('done.html',)

formwizard = MyWizard([Form1, Form2]) &lt;- class name, not instance name

def formwizard_proxy(request, step):
    if not request.POST: #if first visit, get stored data
        try:
            prev_data = SavedForm.objects.get(user=request.user)
            request.POST = pickle.loads(prev_data.postdata)
        except:
            pass

    else: # otherwise save statet:
        try:
            data = SavedForm.objects.get(user=request.user)
        except:
            data = SavedForm(user=request.user)
        data.postdata=pickle.dumps(request.POST)
        data.save()

    return formwizard(request)
</snippet></ROW><ROW><id>4366569</id><snippet>class PairEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Pair):
            return {"created": str(obj.created), "updated:": str(obj.updated), "find": obj.find, "replace": obj.replace, "tags": obj.tags, "rule": obj.rule}
        return json.JSONEncoder.default(self, obj)
</snippet></ROW><ROW><id>4366727</id><snippet>def rank_teams():
    rank = []
    # iterate through teams and create a tuple with most important to least important 
    # sort params. team bust be the last object
    for team in Team.objects.all():
        points = 0
        best_goal_gap = 0
        best_goals = 0
        best_away_goals = 0
        all_victories = 0
        for game in TeamGame.objects.filter(team_name=team):
            points += {'w':3, 'd':1, 'l':0}[game.result]
            best_goal_gap = max(best_goal_gap, game.goals_hit-game.goals_get)
            best_goals = max(best_goals, game.goals_get)
            if game.field == 'o':
                best_away_goals = max(best_away_goals, game.goals_get)
            if game.result == 'w':
                all_victories +=1
        rank.append((points, best_goal_gap, best_goals, best_away_goals, all_victories, team))
    #sort the teams
    rank.sort()
    team_rank = [team for p,g,b,a,v,team in rank]
    return team_rank
</snippet></ROW><ROW><id>4367063</id><snippet>#Define your centre node: you need to pull this out of the graph. Call it b.
# The number changes each time: look for a Clade(branch_length=0.03297)
# Its neighbors have branch lengths .00177, .01972, .00774.
b = G.nodes()[112]

# Recursively paint edges below a certain point, ignoring ones we've already seen
def paintedges(graph, startnode, colour):
    for node in graph.neighbors(startnode):
        if node not in alreadyseen: # alreadyseen is in global scope
            graph[startnode][node]["colour"] = colour
            alreadyseen.add(node)
            paintedges(graph, node, colour)

alreadyseen = set([b])
G[b][G.neighbors(b)[0]]["colour"] = "red"
paintedges(G, G.neighbors(b)[0], "red")
G[b][G.neighbors(b)[1]]["colour"] = "blue"
paintedges(G, G.neighbors(b)[1], "blue")
G[b][G.neighbors(b)[2]]["colour"] = "green"
paintedges(G, G.neighbors(b)[2], "green")

# Now make a list of all the colours, in the order networkx keeps the edges
edgecolours = [G[f][t]["colour"] for f,t in G.edges()]
kwargs["edge_color"] = edgecolours
</snippet></ROW><ROW><id>4367094</id><snippet>SETTINGS = autosettings.autoSettings()
CONTROLLERS = {}
</snippet></ROW><ROW><id>4367094</id><snippet>from settings import SETTINGS, CONTROLLERS
class aerialController(object):

    def __init__(self):
        self.motor_number = str(SETTINGS.aerial_motor_number)
        CONTROLLERS[self.motor_number] = self
</snippet></ROW><ROW><id>4367094</id><snippet>from settings import SETTINGS</snippet></ROW><ROW><id>4367094</id><snippet>SETTINGS = ...</snippet></ROW><ROW><id>4367094</id><snippet>settings.SETTINGS</snippet></ROW><ROW><id>4367094</id><snippet>from &lt;name&gt; import *</snippet></ROW><ROW><id>4367126</id><snippet>mylist = [(A,8), (A,3), (A,3), (A,3)]
def indices( mylist, value):
    return [i for i,x in enumerate(mylist) if x==value]

print indices(mylist, (A,3))
# [1, 2, 3]
</snippet></ROW><ROW><id>4367589</id><snippet>&lt;system.webServer&gt;
&lt;handlers accessPolicy="Read, Execute, Script"&gt;
&lt;add name="Mercurial-Isapi" path="*" verb="*" modules="IsapiModule" scriptProcessor="C:\inetpub\hgweb\_hgwebdir_wsgi.dll" resourceType="Unspecified" /&gt;
&lt;/handlers&gt;
&lt;/system.webServer&gt;
</snippet></ROW><ROW><id>4367746</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; e = "(9+2-(3*(4+2)))"
&gt;&gt;&gt; while '(' in e:
...     inner = re.search('(\([^\(\)]+\))', e).group(1)
...     e = re.sub(re.escape(inner), eval('str'+inner), e)
...     print inner,
... 
(4+2) (3*6) (9+2-18)
</snippet></ROW><ROW><id>4367847</id><snippet>def path(req):
    request_data = req.form.getfirst('request')
</snippet></ROW><ROW><id>4367886</id><snippet>class MyThing():
    def do_something_to_everyone_but_me(self, list_of_things)
        for one_thing in list_of_things:
            if one_thing is self:
                continue
            do_something_with(one_thing)
</snippet></ROW><ROW><id>4368350</id><snippet># import only cv, no opencv
# this also brings in sub modules such as highgui
import cv
# no "cv" prepended before all method names
src_mat = cv.LoadImageM('yourfilename.png', cv.CV_LOAD_IMAGE_GRAYSCALE)
# let's show the image in a window
cv.NamedWindow('your name', 1)
cv.ShowImage('your name', src_mat)
cv.WaitKey
</snippet></ROW><ROW><id>4368353</id><snippet>u</snippet></ROW><ROW><id>4368353</id><snippet>&gt;&gt;&gt; s=u"关于我们"
&gt;&gt;&gt; print s
关于我们
</snippet></ROW><ROW><id>4368353</id><snippet>&gt;&gt;&gt; s=unicode('אדם מתן', 'utf8')
&gt;&gt;&gt; print s
אדם מתן 
</snippet></ROW><ROW><id>4368762</id><snippet>def hex2(n):
  x = '%x' % (n,)
  return ('0' * (len(x) % 2)) + x
</snippet></ROW><ROW><id>4368827</id><snippet> print data[1]
</snippet></ROW><ROW><id>4368827</id><snippet>data.index(value)</snippet></ROW><ROW><id>4368827</id><snippet>value</snippet></ROW><ROW><id>4368827</id><snippet>&gt;&gt;&gt; data = ["a","b","c"]
&gt;&gt;&gt; data[1]          # Which is the second element of data?
b
&gt;&gt;&gt; data.index("a")  # Which is the position of the element "a"?
0
&gt;&gt;&gt; data.index("d")  # Which is the position of the element "d"? --&gt; not in list!
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: list.index(x): x not in list
</snippet></ROW><ROW><id>4368868</id><snippet>from subprocess import Popen, PIPE
p1 = Popen(["tar", "-cvf", "-", "path_to_archive"], stdout=PIPE)
p2 = Popen(["split", "-b", "20m", "-d", "-a", "5", "-", "'archive.tar.split'"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</snippet></ROW><ROW><id>4368868</id><snippet>glob</snippet></ROW><ROW><id>4368878</id><snippet>python -i</snippet></ROW><ROW><id>4369199</id><snippet>mytext = "&lt;br /&gt;".join(mytext.split("\n"))
</snippet></ROW><ROW><id>4369199</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>4369617</id><snippet>fout.close()</snippet></ROW><ROW><id>4369617</id><snippet>with</snippet></ROW><ROW><id>4369617</id><snippet>with open('markov_output.txt', 'w') as fout:
    # Your code to write to the file here
</snippet></ROW><ROW><id>4370034</id><snippet>import re
text = '''&lt;select name="sel"&gt;
   &lt;option value="a"&gt;a&lt;/option&gt;
   &lt;option value="b"&gt;b&lt;/option&gt;
   &lt;option value="c"&gt;c&lt;/option&gt;
   &lt;option value="d"&gt;d&lt;/option&gt;
&lt;/select&gt;'''
pattern = re.compile(r'&lt;option value="(?P&lt;val&gt;.*?)"&gt;(?P=val)&lt;/option&gt;')
handy_list = pattern.findall(text)
print handy_list
</snippet></ROW><ROW><id>4370034</id><snippet>['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>4370272</id><snippet>command = lambda: bot_analysis_frame(eventConditionL,eventBreakL)
</snippet></ROW><ROW><id>4370344</id><snippet>$user_info = $twitteroauth-&gt;get('account/verify_credentials');
</snippet></ROW><ROW><id>4370344</id><snippet>echo $user_info-&gt;screen_name;</snippet></ROW><ROW><id>4370398</id><snippet>import pyodbc

MDB = 'c:/path/to/my.mdb'
DRV = '{Microsoft Access Driver (*.mdb)}'
PWD = 'my_password'

conn = pyodbc.connect('DRIVER=%s;DBQ=%s;PWD=%s' % (DRV,MDB,PWD))
c = conn.cursor()
c.execute("ALTER TABLE my_table ADD COLUMN my_column INTEGER;")
conn.commit()
c.close()
conn.close()
</snippet></ROW><ROW><id>4370398</id><snippet>win32com.client</snippet></ROW><ROW><id>4370398</id><snippet>import win32com.client
conn = win32com.client.Dispatch(r'ADODB.Connection')
DSN = 'PROVIDER=Microsoft.Jet.OLEDB.4.0;DATA SOURCE=c:/path/to/my.mdb;'
conn.Open(DSN)
conn.Execute("ALTER TABLE my_table ADD COLUMN my_column INTEGER;")
conn.Close()
</snippet></ROW><ROW><id>4370500</id><snippet>Point</snippet></ROW><ROW><id>4370500</id><snippet>static</snippet></ROW><ROW><id>4370500</id><snippet>def class_with_static(name, bases, body):
    static_block = body.pop("__static__", None)
    klass = type(name, bases, body)
    if static_block:
        static_block(klass)
    return klass

class Point(object):
    __metaclass__ = class_with_static

    def __static__(cls):
        cls.ORIGIN = cls()

    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

assert isinstance(Point.ORIGIN, Point)
assert Point.ORIGIN.x == Point.ORIGIN.y == 0
assert not hasattr(Point, "__static__")
</snippet></ROW><ROW><id>4370500</id><snippet>Point</snippet></ROW><ROW><id>4370500</id><snippet>ORIGIN</snippet></ROW><ROW><id>4370659</id><snippet>&gt;&gt;&gt; l = [[1, 2, 3], [5, 6, 7]]
&gt;&gt;&gt; [[e*e for e in m] for m in l]
     |-nested list-|
    |----   complete list    ---|
[[1, 4, 9], [25, 36, 49]]
</snippet></ROW><ROW><id>4370885</id><snippet>try/except</snippet></ROW><ROW><id>4370885</id><snippet>except</snippet></ROW><ROW><id>4370936</id><snippet>parser_X.set_defaults(action=action_func)
args.action(args)
</snippet></ROW><ROW><id>4371013</id><snippet>python_header.py</snippet></ROW><ROW><id>4371013</id><snippet>#!/bin/env/python
# -*- coding: ascii -*-
import os
import sys
import imp
import tarfile
import tempfile


RUN_MODULE = "__run__"
SENTINEL = 'RzlBTXhya3ljIzl6PFFkQiRKLntEdHF+c2hvWid0IX5NVlxWd' \
           'FxcJ0NWQ2xKVUI0TVEuNl0rWUtnKiRr'.decode('base64')


class FileOffset(object):
    def __init__(self, fileobj, offset=0):
        self._fileobj = fileobj
        self._offset = offset
        self._fileobj.seek(offset)

    def tell(self):
        return self._fileobj.tell() - self._offset

    def seek(self, position, whence=os.SEEK_SET):
        if whence == os.SEEK_SET:
            if position &lt; 0: raise IOErrror("Negative seek")
            self._fileobj.seek(position + self._offset)
        else:
            oldposition = self._fileobj.tell()
            self._fileobj.seek(position, whence)
            if self._fileobj.tell() &lt; self._offset:
                self._fileobj.seek(oldposition, os.SEEK_SET)
                raise IOError("Negative seek")

    def __getattr__(self, attrname):
        return getattr(self._fileobj, attrname)

    def __enter__(self, *args):
        return self._fileobj.__enter__(*args)

    def __exit__(self, *args):
        return self._fileobj.__exit__(*args)


class TarImport(object):
    def __init__(self, tarobj, tarname=None):
        if tarname is None:
            tarname = '&lt;tarfile&gt;'
        self._tarname = tarname
        self._tarobj = tarobj

    def find_module(self, name, path=None):
        module_path = os.path.join(*name.split('.'))
        package_path = os.path.join(module_path, '__init__')

        for path in [module_path, package_path]:
            for suffix, mode, module_type in imp.get_suffixes():
                if module_type != imp.PY_SOURCE:
                    continue
                member = os.path.join(path) + suffix
                try:
                    modulefileobj = self._tarobj.extractfile(member)
                except KeyError:
                    pass
                else:
                    return Loader(name, modulefileobj,
                                  "%s/%s" % (self._tarname, member),
                                  (suffix, mode, module_type))


class Loader(object):
    def __init__(self, name, fileobj, filename, description):
        self._name = name
        self._fileobj = fileobj
        self._filename = filename
        self._description = description

    def load_module(self, name):
        imp.acquire_lock()
        try:
            module = sys.modules.get(name)
            if module is None:
                module = imp.new_module(name)

            module_script = self._fileobj.read()
            module.__file__ = self._filename
            module.__path__ = []
            sys.modules[name] = module
            exec(module_script, module.__dict__, module.__dict__)
        finally:
            imp.release_lock()

        return module


def find_offset(fileobj, sentinel):
    read_bytes = 0
    for line in fileobj:
        try:
            offset = line.index(sentinel)
        except ValueError:
            read_bytes += len(line)
        else:
            return read_bytes + offset + len(sentinel)
    raise ValueError("sentinel not found in %r" % (fileobj, ))


if __name__ == "__main__":
    sys.argv[:] = sys.argv[1:]
    archive_path = os.path.abspath(sys.argv[0])
    archive_offset = find_offset(open(archive_path), SENTINEL)

    archive = FileOffset(open(archive_path), archive_offset)

    tarobj = tarfile.TarFile(fileobj=archive)
    importer = TarImport(tarobj, archive_path)

    sys.meta_path.insert(0, importer)

    importer.find_module(RUN_MODULE).load_module(RUN_MODULE)
</snippet></ROW><ROW><id>4371013</id><snippet>sh_header.sh</snippet></ROW><ROW><id>4371013</id><snippet>#!/bin/sh

head -n @@TO@@ "$0" | tail -n +@@FROM@@ | python - "$0"

exit $?
</snippet></ROW><ROW><id>4371013</id><snippet>create_tarred_program.py</snippet></ROW><ROW><id>4371013</id><snippet>#!/usr/bin/env python
# -*- coding: latin-1 -*-

import sys
import imp
import shutil

sh_filename, runner_filename, tar_archive, dst_filename = sys.argv[1:]

runner = imp.load_module("tarfile_runner",
                        open(runner_filename, 'U'),
                        runner_filename,
                        ('.py', 'U', imp.PY_SOURCE))



sh_lines = open(sh_filename, 'r').readlines()
runner_lines = open(runner_filename, 'r').readlines()

sh_block = ''.join(sh_lines)
runner_block = ''.join(runner_lines)

if runner.SENTINEL in runner_block or runner.SENTINEL in sh_block:
    raise ValueError("Can't have the sentinel inside the runner module")
if not runner_block.endswith('\n') or not sh_block.endswith('\n'):
    raise ValueError("Trailing newline required in both headers")

to_pos = len(sh_lines) + len(runner_lines)
from_pos = len(sh_lines) + 1

sh_block = sh_block.replace("@@TO@@", str(to_pos))
sh_block = sh_block.replace("@@FROM@@", str(from_pos))


dst = open(dst_filename, 'wb')

dst.write(sh_block)
dst.write(runner_block)
dst.write(runner.SENTINEL)

shutil.copyfileobj(open(tar_archive, 'rb'), dst)

dst.flush()
dst.close()    
</snippet></ROW><ROW><id>4371013</id><snippet>packages.tar</snippet></ROW><ROW><id>4371013</id><snippet>__run__.py</snippet></ROW><ROW><id>4371013</id><snippet>__main__</snippet></ROW><ROW><id>4371013</id><snippet>create_tarred_program.py sh_header.sh python_header.py packages.tar program.sh
</snippet></ROW><ROW><id>4371013</id><snippet>program.sh</snippet></ROW><ROW><id>4371013</id><snippet>/bin/sh</snippet></ROW><ROW><id>4371049</id><snippet>y = x[:k, :]</snippet></ROW><ROW><id>4371049</id><snippet>y</snippet></ROW><ROW><id>4371049</id><snippet>x</snippet></ROW><ROW><id>4371049</id><snippet>+=</snippet></ROW><ROW><id>4371049</id><snippet>-=</snippet></ROW><ROW><id>4371049</id><snippet>*=</snippet></ROW><ROW><id>4371049</id><snippet>x += 10</snippet></ROW><ROW><id>4371049</id><snippet>x = x + 10</snippet></ROW><ROW><id>4371049</id><snippet>x = x + 10</snippet></ROW><ROW><id>4371049</id><snippet>x = x + 10.0</snippet></ROW><ROW><id>4371049</id><snippet>x</snippet></ROW><ROW><id>4371049</id><snippet>x += 10.0</snippet></ROW><ROW><id>4371049</id><snippet>x</snippet></ROW><ROW><id>4371049</id><snippet>10.0</snippet></ROW><ROW><id>4371049</id><snippet>out</snippet></ROW><ROW><id>4371049</id><snippet>np.abs(x, x)</snippet></ROW><ROW><id>4371049</id><snippet>x</snippet></ROW><ROW><id>4371049</id><snippet>y = x[:]</snippet></ROW><ROW><id>4371049</id><snippet>y = x.copy()</snippet></ROW><ROW><id>4371049</id><snippet>y = x[[0, 1, 2], :]</snippet></ROW><ROW><id>4371049</id><snippet>y = x[:3,:]</snippet></ROW><ROW><id>4371049</id><snippet>x[4:100:5, :-10:-1, None]</snippet></ROW><ROW><id>4371049</id><snippet>x.astype(&lt;dtype&gt;)</snippet></ROW><ROW><id>4371049</id><snippet>x.view(&lt;dtype&gt;)</snippet></ROW><ROW><id>4371049</id><snippet>1.0</snippet></ROW><ROW><id>4371049</id><snippet>4607182418800017408</snippet></ROW><ROW><id>4371049</id><snippet>[  0,   0,   0,   0,   0,   0, 240,  63]</snippet></ROW><ROW><id>4371088</id><snippet>import urllib2
from StringIO import StringIO
from lxml import etree

ufile = urllib2.urlopen("http://www.afi.com/100years/movies10.aspx")

root = etree.parse(ufile, etree.HTMLParser())

print etree.tostring(root)
</snippet></ROW><ROW><id>4371158</id><snippet>np.hypot(*(points - single_point).T)</snippet></ROW><ROW><id>4371158</id><snippet>.T</snippet></ROW><ROW><id>4371158</id><snippet>import numpy as np
single_point = [3, 4]
points = np.arange(20).reshape((10,2))

dist = (points - single_point)**2
dist = np.sum(dist, axis=1)
dist = np.sqrt(dist)
</snippet></ROW><ROW><id>4371244</id><snippet>'a'</snippet></ROW><ROW><id>4371244</id><snippet>with open(...) as f: ...</snippet></ROW><ROW><id>4371263</id><snippet>&gt;&gt;&gt; x = [''.join(c for c in s if c not in string.punctuation) for s in x]
&gt;&gt;&gt; print(x)
['hello', '', 'h3a', 'ds4']
</snippet></ROW><ROW><id>4371263</id><snippet>&gt;&gt;&gt; x = [s for s in x if s]
&gt;&gt;&gt; print(x)
['hello', 'h3a', 'ds4']
</snippet></ROW><ROW><id>4371391</id><snippet>&lt;table&gt;&lt;tr&gt;
{% for field in form %}
   &lt;td&gt;{{ field }}&lt;/td&gt;
   {% if forloop.last %}
     &lt;/tr&gt;
   {% else %}
     {% if forloop.counter|divisibleby:"3" %}
       &lt;/tr&gt;&lt;tr&gt;
     {% endif %}
   {% endif %}
{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>4371391</id><snippet>table_print</snippet></ROW><ROW><id>4371391</id><snippet>mark_safe</snippet></ROW><ROW><id>4371865</id><snippet>def print_reverse(ch):
    print ch,
    if ch &gt; 'a':
        print_reverse(chr(ord(ch)-1))
    else:
        print   # New line

print_reverse('h')
</snippet></ROW><ROW><id>4371865</id><snippet>ord</snippet></ROW><ROW><id>4371865</id><snippet>chr</snippet></ROW><ROW><id>4371865</id><snippet>help(ord)</snippet></ROW><ROW><id>4371865</id><snippet>help(chr)</snippet></ROW><ROW><id>4372018</id><snippet>&lt;input type="file"&gt;</snippet></ROW><ROW><id>4372110</id><snippet>def dfs(nodes):
    if nodes is not None:
        for node in nodes:
            yield node
            for child in dfs(node['children']):
                yield child

for node in dfs(tree):
    if node['id'] in selected:
        node['selected'] = true
</snippet></ROW><ROW><id>4372110</id><snippet>node['id'] in selected</snippet></ROW><ROW><id>4372110</id><snippet>selected = dict(zip(selected, selected))
</snippet></ROW><ROW><id>4372128</id><snippet>PNGCanvas.dump</snippet></ROW><ROW><id>4372128</id><snippet># 8-bit image represented as RGB tuples
# simple transparency, alpha is pure white
</snippet></ROW><ROW><id>4372136</id><snippet>target_file = open("barcode2.xml")   
barc_file_text = target_file.read()         
sock.sendall(barc_file_text)  
sock.close()
</snippet></ROW><ROW><id>4372136</id><snippet>with open...</snippet></ROW><ROW><id>4372136</id><snippet>with open...</snippet></ROW><ROW><id>4372136</id><snippet>with open("barcode2.xml", "r") as to_send:
    sock.sendall(to_send.read())
sock.close()
</snippet></ROW><ROW><id>4372167</id><snippet>import sys # Used to add the BeautifulSoup folder the import path
import urllib2 # Used to read the html document

if __name__ == "__main__":
    ### Import Beautiful Soup
    ### Here, I have the BeautifulSoup folder in the level of this Python script
    ### So I need to tell Python where to look.
    sys.path.append("./BeautifulSoup")
    from BeautifulSoup import BeautifulSoup

    ### Create opener with Google-friendly user agent
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', 'Mozilla/5.0')]

    ### Open page &amp; generate soup
    ### the "start" variable will be used to iterate through 10 pages.
    for start in range(0,10):
        url = "http://www.google.com/search?q=site:stackoverflow.com&amp;start=" + str(start*10)
        page = opener.open(url)
        soup = BeautifulSoup(page)

        ### Parse and find
        ### Looks like google contains URLs in &lt;cite&gt; tags.
        ### So for each cite tag on each page (10), print its contents (url)
        for cite in soup.findAll('cite'):
            print cite.text
</snippet></ROW><ROW><id>4372167</id><snippet>stackoverflow.com/
stackoverflow.com/questions
stackoverflow.com/unanswered
stackoverflow.com/users
meta.stackoverflow.com/
blog.stackoverflow.com/
chat.meta.stackoverflow.com/
...
</snippet></ROW><ROW><id>4372282</id><snippet>pip -E /var/www/env/example.com install --upgrade django</snippet></ROW><ROW><id>4372334</id><snippet>SymDict</snippet></ROW><ROW><id>4372334</id><snippet>dict</snippet></ROW><ROW><id>4372334</id><snippet>[][]</snippet></ROW><ROW><id>4372334</id><snippet>class SymDict(object):
    def __init__(self, *args, **kwrds):
        self._mapping = _SubSymDict(*args, **kwrds)
    def __getitem__(self, key1):
        self._mapping.set_key1(key1)
        return self._mapping
    def __setitem__(self, key1, value):
        raise NotImplementedError
    def __str__(self):
        return '_mapping: ' + self._mapping.__str__()
    def __getattr__(self, name):
        return getattr(self._mapping, name)

class _SubSymDict(dict):
    def __init__(self, *args, **kwrds):
        dict.__init__(self, *args, **kwrds)
    def set_key1(self, key1):
        self.key1 = key1
    def __getitem__(self, key2):
        return dict.__getitem__(self, frozenset((self.key1, key2)))
    def __setitem__(self, key2, value):
        dict.__setitem__(self, frozenset((self.key1, key2)), value)

symdict = SymDict()
symdict[2][4] = 24
symdict[4][2] = 42

print 'symdict[2][4]:', symdict[2][4]
# symdict[2][4]: 42
print 'symdict[4][2]:', symdict[4][2]
# symdict[4][2]: 42
print 'symdict:', symdict
# symdict: _mapping: {frozenset([2, 4]): 42}

print symdict.keys()
# [frozenset([2, 4])]
</snippet></ROW><ROW><id>4372355</id><snippet>cmdgen.CommunityData('test-agent-1', 'public'), 
</snippet></ROW><ROW><id>4372355</id><snippet>cmdgen.CommunityData('test-agent', 'public'),
</snippet></ROW><ROW><id>4372357</id><snippet>from haystack.management.commands import update_index
update_index.Command().handle()
</snippet></ROW><ROW><id>4372370</id><snippet>f(5, 'a', 'b', 'c', kw=['abc'], kw2='def')</snippet></ROW><ROW><id>4372395</id><snippet>for node in tree</snippet></ROW><ROW><id>4372463</id><snippet>def hideEvent(self, event):
    self.hide()
    if ph.is_windows():
        self.hidden = True
        self.setWindowFlags(Qt.ToolTip)
def showEvent(self, event):
    if ph.is_windows() and self.hidden:
        self.setWindowFlags(Qt.Window)
        self.hidden = False
    self.show()
</snippet></ROW><ROW><id>4372930</id><snippet>def printInfo(self):
    print self.arg1, self.arg2
</snippet></ROW><ROW><id>4372930</id><snippet>class MyClass(object):

    def __init__(self, arg1, arg2 = 0):
        self.arg1 = arg1
        self.arg2 = arg2

    @staticmethod
    def printInfo(obj):
        print obj.arg1, obj.arg2


obj1 = MyClass(12)
MyClass.printInfo(obj1)
</snippet></ROW><ROW><id>4372934</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; from sys import maxint
&gt;&gt;&gt; getcontext()
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999, capitals=1,
flags=[], traps=[DivisionByZero, Overflow, InvalidOperation])

&gt;&gt;&gt; d=Decimal(maxint)
&gt;&gt;&gt; d
Decimal('9223372036854775807')
&gt;&gt;&gt; e=Decimal(maxint)
&gt;&gt;&gt; f=d**e
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/decimal.py", line 2225, in __pow__
    ans = ans._fix(context)
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/decimal.py", line 1589, in _fix
    return context._raise_error(Overflow, 'above Emax', self._sign)
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/decimal.py", line 3680, in _raise_error
    raise error(explanation)
decimal.Overflow: above Emax
</snippet></ROW><ROW><id>4373034</id><snippet>[url for url in urlstring.split(',') if 2 &lt;= len(url.split('.')[-2]) &lt;= 4]
</snippet></ROW><ROW><id>4373107</id><snippet>a + b</snippet></ROW><ROW><id>4373107</id><snippet>(+ a b)</snippet></ROW><ROW><id>4373107</id><snippet>(+ a b) + c</snippet></ROW><ROW><id>4373107</id><snippet>(+ a b c)</snippet></ROW><ROW><id>4373296</id><snippet>def f(event):
    caller = event.widget
</snippet></ROW><ROW><id>4373381</id><snippet>&gt;&gt;&gt; sorted(setlist.items(),key=lambda x:x[1]['title'])
[('335350258120342034', {'title': 'Atonement'}), ('235350258120342034', {'title': 'The Godfather'}), ('135350258120342034', {'title': 'The Matrix'})]
</snippet></ROW><ROW><id>4373454</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>4373454</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>4373454</id><snippet>/bin/python</snippet></ROW><ROW><id>4373454</id><snippet>#!/usr/local/bin/python</snippet></ROW><ROW><id>4373454</id><snippet>env</snippet></ROW><ROW><id>4373454</id><snippet>$PATH</snippet></ROW><ROW><id>4373454</id><snippet>env</snippet></ROW><ROW><id>4373454</id><snippet>/usr/bin/</snippet></ROW><ROW><id>4373454</id><snippet>env</snippet></ROW><ROW><id>4373454</id><snippet>/usr/bin</snippet></ROW><ROW><id>4373782</id><snippet>import numpy as np
data = np.arange(1, 7)
groups = np.array([0,0,1,2,2,1])

unique_groups = np.unique(groups)
sums = []
for group in unique_groups:
    sums.append(data[groups == group].sum())
</snippet></ROW><ROW><id>4373782</id><snippet>import numpy as np
data = np.arange(1, 7)
groups = np.array([0,0,1,2,2,1])

unique_groups = np.unique(groups)

# Forgive the bad naming here...
# I can't think of more descriptive variable names at the moment...
x, y = np.meshgrid(groups, unique_groups)
data_stack = np.tile(data, (unique_groups.size, 1))

data_in_group = np.zeros_like(data_stack)
data_in_group[x==y] = data_stack[x==y]

sums = data_in_group.sum(axis=1)
</snippet></ROW><ROW><id>4374075</id><snippet>copy</snippet></ROW><ROW><id>4374075</id><snippet>b = dict(a)</snippet></ROW><ROW><id>4374075</id><snippet>str</snippet></ROW><ROW><id>4374075</id><snippet>int</snippet></ROW><ROW><id>4374075</id><snippet>long</snippet></ROW><ROW><id>4374075</id><snippet>bool</snippet></ROW><ROW><id>4374075</id><snippet>float</snippet></ROW><ROW><id>4374075</id><snippet>tuple</snippet></ROW><ROW><id>4374288</id><snippet>mycollection.update({'_id':mongo_id}, {"$set": post}, upsert=False)</snippet></ROW><ROW><id>4374339</id><snippet>from PyQt4 import QtCore,QtGui
import time

class Listener(QtCore.QThread):
    def __init__(self):
        super(Listener,self).__init__()

    def run(self):
        print('listener: started')
        while True:
            time.sleep(2)

    def connect_slots(self, sender):
        self.connect(sender, QtCore.SIGNAL('testsignal'), self.say_hello)

    def say_hello(self):
        print('listener: received signal')

class Sender(QtCore.QThread):
    def __init__(self):
        super(Sender,self).__init__()

    def run(self):
        for i in range(5):
            print('sender: sending signal')
            self.emit(QtCore.SIGNAL('testsignal'))
            time.sleep(2)
        print('sender: finished')

if __name__ == '__main__':
    o_qapplication = QtGui.QApplication([])
    my_listener = Listener()
    my_sender = Sender()
    my_listener.connect_slots(my_sender)
    my_listener.start()
    my_sender.start()
    i_out = o_qapplication.exec_()
</snippet></ROW><ROW><id>4374446</id><snippet>print 'hi there'</snippet></ROW><ROW><id>4374446</id><snippet>tt</snippet></ROW><ROW><id>4374446</id><snippet>tt</snippet></ROW><ROW><id>4374446</id><snippet>unichr(0x8)</snippet></ROW><ROW><id>4374446</id><snippet>HTTP/1.0 200 OK
Server: BaseHTTP/0.3 Python/2.6.5
Date: Tue, 07 Dec 2010 07:33:09 GMT
Content-type: text/xml
Content-length: 350

&lt;?xml version='1.0'?&gt;
&lt;methodResponse&gt;
&lt;fault&gt;
&lt;value&gt;&lt;struct&gt;
&lt;member&gt;
&lt;name&gt;faultCode&lt;/name&gt;
&lt;value&gt;&lt;int&gt;1&lt;/int&gt;&lt;/value&gt;
&lt;/member&gt;
&lt;member&gt;
&lt;name&gt;faultString&lt;/name&gt;
&lt;value&gt;&lt;string&gt;&lt;class 'xml.parsers.expat.ExpatError'&gt;:not well-formed (invalid token): line 6, column 15&lt;/string&gt;&lt;/value&gt;
&lt;/member&gt;
&lt;/struct&gt;&lt;/value&gt;
&lt;/fault&gt;
&lt;/methodResponse&gt;
</snippet></ROW><ROW><id>4374446</id><snippet>data = "&lt;?xml version='1.0'?&gt;\n&lt;methodCall&gt;\n&lt;methodName&gt;tt&lt;/methodName&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;\x08&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodCall&gt;"
p = xml.parsers.expat.ParserCreate()
p.Parse(data, True)
</snippet></ROW><ROW><id>4374519</id><snippet>def check(given):
   hash = {}
   for li in given:
      for val in li:
         if val in hash:
            return False
         hash[val] = 1
   return True
</snippet></ROW><ROW><id>4374519</id><snippet>False</snippet></ROW><ROW><id>4374712</id><snippet>reactor.listenTCP(PORT, factory)
reactor.listenUDP(PORT, BaseThreadedUDPServer())
reactor.run()
</snippet></ROW><ROW><id>4374712</id><snippet>reactor.run()</snippet></ROW><ROW><id>4374720</id><snippet>from inspect import ismethod

def call_all(obj, *args, **kwargs):
    for name in dir(obj):
        attribute = getattr(obj, name)
        if ismethod(attribute):
            attribute(*args, **kwargs)

class Test():
    def a(self, input):
        print "a: " + input
    def b(self, input):
        print "b: " + input
    def c(self, input):
        print "c: " + input

call_all(Test(), 'my input')
</snippet></ROW><ROW><id>4374720</id><snippet>a: my input
b: my input
c: my input
</snippet></ROW><ROW><id>4375412</id><snippet>from argparse import RawTextHelpFormatter
parser = ArgumentParser(description='test', formatter_class=RawTextHelpFormatter)
</snippet></ROW><ROW><id>4375986</id><snippet>def add_baz(klass):
    def adder():
        instance = klass()

        class Baz:
            bazvar='This is an attribute of Baz'

        instance.Baz = Baz

        return instance
    return adder

@add_baz
class Foo():
    def __init__(self):
        pass

&gt;&gt;&gt; myfoo = Foo()
&gt;&gt;&gt; myfoo.Baz
&lt;class __main__.Baz at 0x9f213ec&gt;
&gt;&gt;&gt; myfoo.Baz.bazvar
'This is an attribute of Baz'
</snippet></ROW><ROW><id>4376218</id><snippet>fileHandler = logging.handlers.RotatingFileHandler('file.log', mode='a', maxBytes=10000, backupCount=5)
logger = logging.getLogger('netmap')

if LOG_TO_FILE:
    logger.addHandler(fileHandler)
</snippet></ROW><ROW><id>4376218</id><snippet>import ConfigParser
configParser = ConfigParser.ConfigParser()
config.read('config.ini')

format = config.get('formatter_simple', 'format')
fileHandler.setFormatter(format)
</snippet></ROW><ROW><id>4376292</id><snippet>from django.core.files.uploadedfile import SimpleUploadedFile

def document_ajax_upload(request):
  file = SimpleUploadedFile(request.META['HTTP_X_FILE_NAME'], 
                              request.raw_post_data)
  print file # or whatever else you wish to do with the file
  return HttpResponse('{"success":true}')
</snippet></ROW><ROW><id>4376378</id><snippet>python setup.py install
</snippet></ROW><ROW><id>4376378</id><snippet>import BeautifulSoup</snippet></ROW><ROW><id>4376421</id><snippet>spa.c</snippet></ROW><ROW><id>4376421</id><snippet>spa.h</snippet></ROW><ROW><id>4376421</id><snippet>$ gcc -Wall spa.c -o spa
</snippet></ROW><ROW><id>4376421</id><snippet>spa</snippet></ROW><ROW><id>4376421</id><snippet>spa</snippet></ROW><ROW><id>4376421</id><snippet>from subprocess import call
call(["./spa", "args", "to", "spa"])
</snippet></ROW><ROW><id>4376669</id><snippet>signal.signal(signal.SIGALRM, your_signal_handler_function)</snippet></ROW><ROW><id>4376669</id><snippet>signal.alarm(300)</snippet></ROW><ROW><id>4376697</id><snippet>$ THEANO_FLAGS=device=gpu0 python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import theano
Using gpu device 0: GeForce GTX 480
&gt;&gt;&gt; from theano import tensor as T
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; x = numpy.ones((200000, 1000), dtype=numpy.float32)
&gt;&gt;&gt; m = T.matrix() 
&gt;&gt;&gt; mTm = T.dot(m.T, m)
&gt;&gt;&gt; f = theano.function([m], mTm)
&gt;&gt;&gt; f(x)
array([[ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.],
       [ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.],
       [ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.],
       ..., 
       [ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.],
       [ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.],
       [ 200000.,  200000.,  200000., ...,  200000.,  200000.,  200000.]], dtype=float32)
&gt;&gt;&gt; r = f(x)
&gt;&gt;&gt; r.shape
(1000, 1000)
</snippet></ROW><ROW><id>4376697</id><snippet>&gt;&gt;&gt; numpy.dot(x.T, x)</snippet></ROW><ROW><id>4377093</id><snippet>sid</snippet></ROW><ROW><id>4377147</id><snippet>python path/to/the/script.py
</snippet></ROW><ROW><id>4377147</id><snippet>#!/bin/sh
python python_script.py
</snippet></ROW><ROW><id>4377147</id><snippet>chmod u+x job.sh</snippet></ROW><ROW><id>4377147</id><snippet>./job.sh</snippet></ROW><ROW><id>4377562</id><snippet>print response.header</snippet></ROW><ROW><id>4377562</id><snippet>Content-Type: text/javascript; charset=Shift_JIS
</snippet></ROW><ROW><id>4377562</id><snippet>json.load</snippet></ROW><ROW><id>4377562</id><snippet>result = json.load(response, encoding='shift_jis')
</snippet></ROW><ROW><id>4377681</id><snippet>def foo(vals):
    def f(p,x):
        result=0
        for i,(av,ap) in enumerate(zip(vals,p)):
            result+=av*ap*(x**i)
        return result
    return f

print(foo([50])([2],3))
# f(p,x)=50*2
# 100
print(foo([50,60])([2,3],4))
# f(p,x)=50*2+60*3*x
# 820
</snippet></ROW><ROW><id>4378178</id><snippet>p = subprocess.Popen(["./spa", "args", "to", "spa"], stdout=subprocess.PIPE)
(stdout, stderr) = p.communicate()
data = parse_output(stdout.read())
</snippet></ROW><ROW><id>4378178</id><snippet>printf("%.6f, %.6e, %.6e, %.6f, %.6f, %.6e, %.6e, %.6f, %.6f, %.6f, %.6f\n",
       spa.jd, spa.l, spa.b, spa.r, spa.h, spa.del_psi, spa.del_epsilon, spa.epsilon,
       spa.zenith, spa.azimuth, spa.incidenc)
</snippet></ROW><ROW><id>4378178</id><snippet>parse_output</snippet></ROW><ROW><id>4378178</id><snippet>def parse_output(datastr):
    return [ float(value.strip()) for value in datastr.split(",")
</snippet></ROW><ROW><id>4378178</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>4378178</id><snippet>./spa</snippet></ROW><ROW><id>4378319</id><snippet>lst = collections.defaultdict(list)</snippet></ROW><ROW><id>4378576</id><snippet>f</snippet></ROW><ROW><id>4378629</id><snippet>def smallest_contiguous(s, N):
    lst = list(s)
    lst.sort()
    Nm = N-1
    for i in xrange(len(lst) - Nm):
        if lst[i] + Nm == lst[i + Nm]:
            return range(lst[i], lst[i]+N)
    return []
</snippet></ROW><ROW><id>4378647</id><snippet>(key, value)</snippet></ROW><ROW><id>4378647</id><snippet>a={'1.12e+3':1,'1.10e+3':5,'1.19e+3':7,...}
print sorted(a.iteritems(), key=lambda (x,y):float(x))
# [('1.10e+3', 5), ('1.12e+3', 1), ('1.19e+3', 7)]
</snippet></ROW><ROW><id>4378647</id><snippet>print sorted((float(x),y) for x,y in a.iteritems())
# [(1100.0, 5), (1120.0, 1), (1190.0, 7)]
</snippet></ROW><ROW><id>4378690</id><snippet>python yourscript.py
</snippet></ROW><ROW><id>4378690</id><snippet>/usr/bin/python yourscript.py
</snippet></ROW><ROW><id>4378690</id><snippet>$ which python
</snippet></ROW><ROW><id>4378835</id><snippet>import struct, md5
...
spaces1 = key1.count(" ")
spaces2 = key2.count(" ")
num1 = int("".join([c for c in key1 if c.isdigit()])) / spaces1
num2 = int("".join([c for c in key2 if c.isdigit()])) / spaces2

return md5(struct.pack('&gt;II8s', num1, num2, key3)).digest()
</snippet></ROW><ROW><id>4378986</id><snippet>data = {
     'form-TOTAL_FORMS': u'2',
     'form-INITIAL_FORMS': u'0',
     'form-MAX_NUM_FORMS': u'',
     'form-0-updated_by': u'user',
     'form-1-updated_by': u'user',
}

formset = LineItemsInlineFormSet(data)
</snippet></ROW><ROW><id>4379227</id><snippet>seek()</snippet></ROW><ROW><id>4379227</id><snippet>write()</snippet></ROW><ROW><id>4379629</id><snippet>In [6]: s = "abaccea"
In [9]: [s[:key] + s[key+1:] for key,val in enumerate(s) if val == "a"]
Out[10]: ['baccea', 'abccea', 'abacce']
</snippet></ROW><ROW><id>4379663</id><snippet>'__name__'</snippet></ROW><ROW><id>4379663</id><snippet>'__name__'</snippet></ROW><ROW><id>4379663</id><snippet>.__module__</snippet></ROW><ROW><id>4379984</id><snippet>i_use_models.py</snippet></ROW><ROW><id>4379984</id><snippet>from dbmodels import Cities, Listings</snippet></ROW><ROW><id>4379984</id><snippet>Cities</snippet></ROW><ROW><id>4379984</id><snippet>Listings</snippet></ROW><ROW><id>4379999</id><snippet>easy_install -U pip</snippet></ROW><ROW><id>4380041</id><snippet>class COUNTRIES:  # pseudo-enum
    NEW_ZEALAND = 1
    UNITED_STATES = 2
</snippet></ROW><ROW><id>4380041</id><snippet>Countries.NEW_ZEALAND</snippet></ROW><ROW><id>4380041</id><snippet>class Countries:  # pseudo-enum
    NEW_ZEALAND = 1
    UNITED_STATES = 2
</snippet></ROW><ROW><id>4380176</id><snippet>#!/bin/sh
gnuplot &lt;&lt; EOF
</snippet></ROW><ROW><id>4380176</id><snippet>EOF
</snippet></ROW><ROW><id>4380176</id><snippet>$</snippet></ROW><ROW><id>4380176</id><snippet>\$</snippet></ROW><ROW><id>4380176</id><snippet>$1</snippet></ROW><ROW><id>4380602</id><snippet>import Image
import ImageDraw
im = Image.open("image.png")
transparent_area = (50,80,100,200)

mask=Image.new('L', im.size, color=255)
draw=ImageDraw.Draw(mask) 
draw.rectangle(transparent_area, fill=0)
im.putalpha(mask)
im.save('/tmp/output.png')
</snippet></ROW><ROW><id>4380847</id><snippet>print</snippet></ROW><ROW><id>4380847</id><snippet>print</snippet></ROW><ROW><id>4380954</id><snippet>listed = "a.b.c.d.e".split('.')
subtrees = ['.'.join(listed[idx:]) for idx in xrange(len(listed))]
</snippet></ROW><ROW><id>4380954</id><snippet>['a.b.c.d.e', 'b.c.d.e', 'c.d.e', 'd.e', 'e']</snippet></ROW><ROW><id>4381013</id><snippet>import re

def find_start_of(needle, haystack):
    """
    @param needle    Search on first char of string
    @param haystack  Longer string to search in

    Look for first char of needle in haystack; return offset
    """

    if needle=='':
        return 0

    offs = haystack.find(needle[0])
    if offs==-1:
        return len(haystack)
    else:
        return offs

def find_end_of(lst, letterset):
    """
    @param lst       Chars to search for
    @param letterset String to search through

    lst contains some chars of letterset in order;
    Return offset in letterset of last char of lst
    """

    offs = 0
    for ch in lst:
        t = letterset.find(ch, offs)

        if t==-1:
            raise ValueError('letterset (%s) is not an ordered superset of lst (%s)' % (letterset, lst))
        else:
            offs = t+1

    return offs-1

def alignSeq(s1, s2):
    """
    @param s1 A string consisting of letters and hyphens
    @param s2 A string containing only letters

    The letters in s1 are an in-sequence subset of s2

    Returns s1 with the missing letters from s2 inserted
    in-sequence and greedily preceding hyphens.
    """

    # break s1 into letter-chunks and hyphen-chunks
    r = '([^-]*)([-]*)'        # string of letters followed by string of hyphens
    seq = re.findall(r, s1) # break string into list of tuples
    seq = seq[:-1]          # discard final empty pair
    # eg: "MAT--LA-B" becomes [('MAT', '--'), ('LA', '-'), ('B', '')]

    # find start of corresponding letter-chunks in s2
    offs = 0
    chunkstart = []
    for letters,hyphens in seq:
        offs += find_start_of(letters, s2[offs:])
        chunkstart.append(offs)
        offs += find_end_of(letters, s2[offs:]) + 1

    # get end+1 for each letter-chunk
    chunkend = chunkstart[1:] + [len(s2)]
    # get replacement letter-chunks
    chunks = [s2[st:en] for st,en in zip(chunkstart,chunkend)]

    # do replacement for each chunk
    outp = [c+s[1] for c,s in zip(chunks, seq)]

    return ''.join(outp)
</snippet></ROW><ROW><id>4381013</id><snippet>alignSeq('MAT--LA-B','MATATLAB')
</snippet></ROW><ROW><id>4381013</id><snippet>'MATAT--LA-B'
</snippet></ROW><ROW><id>4381252</id><snippet>def save(self, *args, **kwargs):
    if not self.subject_init:
        self.subject_init = self.subject_initials()
    super(Subject, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>4381439</id><snippet>author_id = line[5]
try: 
    author = Author.objects.get(internal_id=author_id)
except Author.DoesNotExist: #blank excepts are bad and hide errors.
    author_id = author_mapper[line[5]]
    author = Author.objects.get(internal_id=author_id) 
</snippet></ROW><ROW><id>4381439</id><snippet>except</snippet></ROW><ROW><id>4381439</id><snippet>internal_id=line[5]</snippet></ROW><ROW><id>4381439</id><snippet>Author.MultipleItemsReturned</snippet></ROW><ROW><id>4381439</id><snippet>except</snippet></ROW><ROW><id>4381575</id><snippet>Interpreter: Python 2.6.6
Program type: gcd using function call
Total CPU time: 29.336 seconds

Interpreter: Python 2.6.6
Program type: gcd using inline code
Total CPU time: 13.194 seconds

Interpreter: Python 2.6.6
Program type: gcd using inline code, with dummy function call
Total CPU  time: 30.672 seconds
</snippet></ROW><ROW><id>4381575</id><snippet>Interpreter: Python 3.1.3rc1
Program type: gcd using function call
Total CPU time: 30.920 seconds

Interpreter: Python 3.1.3rc1
Program type: gcd using inline code
Total CPU time: 15.185 seconds

Interpreter: Python 3.1.3rc1
Program type: gcd using inline code, with dummy function call
Total CPU time: 33.739 seconds
</snippet></ROW><ROW><id>4381575</id><snippet>Interpreter: ruby 1.9.2p0 (2010-08-18 revision 29036) [i486-linux]
Program type: gcd using function call
Total CPU time: 21.66 seconds

Interpreter: ruby 1.9.2p0 (2010-08-18 revision 29036) [i486-linux]
Program type: gcd using inline code
Total CPU time: 21.31 seconds

Interpreter: ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]
Program type: gcd using function call
Total CPU time: 27.00 seconds

Interpreter: ruby 1.8.7 (2010-08-16 patchlevel 302) [i486-linux]
Program type: gcd using inline code
Total CPU time: 24.83 seconds
</snippet></ROW><ROW><id>4381575</id><snippet># iter_gcd -- Python 2.x version, with gcd function call
#             Python 3.x version uses range instead of xrange
from sys import argv,stderr

def gcd(m, n):
    if n &gt; m:
        m, n = n, m
    while n != 0:
        rem = m % n
        m = n
        n = rem
    return m

def main(a1, a2):
    comp = 0
    for j in xrange(a1, 1, -1):
        for i in xrange(1, a2):
            comp += gcd(i,j)
    print(comp)

if __name__ == '__main__':
    if len(argv) != 3:
        stderr.write('usage: {0:s} num1 num2\n'.format(argv[0]))
        exit(1)
    else:
        main(int(argv[1]), int(argv[2]))
</snippet></ROW><ROW><id>4381575</id><snippet># iter_gcd -- Python 2.x version, inline calculation
#             Python 3.x version uses range instead of xrange
from sys import argv,stderr

def main(a1, a2):
    comp = 0
    for j in xrange(a1, 1, -1):
        for i in xrange(1, a2):
            if i &lt; j:
                m, n = j, i
            else:
                m, n = i, j
            while n != 0:
                rem = m % n
                m = n
                n = rem
            comp += m
    print(comp)

if __name__ == '__main__':
    if len(argv) != 3:
        stderr.write('usage: {0:s} num1 num2\n'.format(argv[0]))
        exit(1)
    else:
        main(int(argv[1]), int(argv[2]))
</snippet></ROW><ROW><id>4381575</id><snippet># iter_gcd -- Python 2.x version, inline calculation, dummy function call
#             Python 3.x version uses range instead of xrange
from sys import argv,stderr

def dummyfunc(n, m):
    a = n + m

def main(a1, a2):
    comp = 0
    for j in xrange(a1, 1, -1):
        for i in xrange(1, a2):
            if i &lt; j:
                m, n = j, i
            else:
                m, n = i, j
            while n != 0:
                rem = m % n
                m = n
                n = rem
            comp += m
            dummyfunc(i, j)
    print(comp)

if __name__ == '__main__':
    if len(argv) != 3:
        stderr.write('usage: {0:s} num1 num2\n'.format(argv[0]))
        exit(1)
    else:
        main(int(argv[1]), int(argv[2]))
</snippet></ROW><ROW><id>4381575</id><snippet># iter_gcd -- Ruby version, with gcd function call

def gcd(m, n)
    if n &gt; m
        m, n = n, m
    end
    while n != 0
        rem = m % n
        m = n
        n = rem
    end
    return m
end

def main(a1, a2)
    comp = 0
    a1.downto 2 do
        |j|
        1.upto a2-1 do
            |i|
            comp += gcd(i,j)
        end
    end
    puts comp
end

 if __FILE__ == $0
    if ARGV.length != 2
        $stderr.puts('usage: %s num1 num2' % $0)
        exit(1)
    else
        main(ARGV[0].to_i, ARGV[1].to_i)
    end
end
</snippet></ROW><ROW><id>4381575</id><snippet># iter_gcd -- Ruby version, with inline gcd

def main(a1, a2)
    comp = 0
    a1.downto 2 do |j|
        1.upto a2-1 do |i|
            m, n = i, j
            if n &gt; m
                m, n = n, m
            end
            while n != 0
                rem = m % n
                m = n
                n = rem
            end
            comp += m
        end
    end
    puts comp
end

 if __FILE__ == $0
    if ARGV.length != 2
        $stderr.puts('usage: %s num1 num2' % $0)
        exit(1)
    else
        main(ARGV[0].to_i, ARGV[1].to_i)
    end
end
</snippet></ROW><ROW><id>4381575</id><snippet>pythonX.X -m cProfile iter_gcdX.py 2000 2000</snippet></ROW><ROW><id>4381575</id><snippet>rubyX.X -rprofile iter_gcdX.rb 200 200</snippet></ROW><ROW><id>4381638</id><snippet>open</snippet></ROW><ROW><id>4381638</id><snippet>import os.path
import sys

basepath = os.path.dirname(__file__)
filepath = os.path.abspath(os.path.join(basepath, "..", "..", "fileIwantToOpen.txt"))
f = open(filepath, "r")
</snippet></ROW><ROW><id>4381638</id><snippet>os.path</snippet></ROW><ROW><id>4381725</id><snippet>i=0
for n in range(len(eventBreakL)):
    if n &lt; len(eventBreakL)-1:
        i+=1
        eventL = c_eventConditionL[eventBreakL[n]:eventBreakL[n+1]-1]
        tL,isubL,vgsL,vdsL = [],[],[],[]
        for m in eventL:
            tL.append(m[1])
            isubL.append(m[-1])
            vdsL.append(m[2])
            vgsL.append(m[3])
        c_isub_plot.plot(tL,isubL,label=str(i))
        c_isub_plot.legend()
        vgvd_plot.plot(tL,vgsL,label=str(i))
        vgvd_plot.plot(tL,vdsL,label=str(i))
        vgvd_plot.legend()
</snippet></ROW><ROW><id>4381819</id><snippet>from subprocess import *
readBody = Popen(["/bin/echo", varWithBody], stdout=PIPE)
mail = Popen(["/bin/mail", "-s", subjVariable, recipVariable], stdin=readBody.stdout, stdout=PIPE)
output = mail.communicate()[0]
</snippet></ROW><ROW><id>4381844</id><snippet>&gt;&gt;&gt; class Complex:
...     def __init__(self, realpart, imagpart):
...         self.r = realpart
...         self.i = imagpart
...
&gt;&gt;&gt; x = Complex(3.0, -4.5)
&gt;&gt;&gt; x.r, x.i
(3.0, -4.5)
</snippet></ROW><ROW><id>4382190</id><snippet>__name__</snippet></ROW><ROW><id>4382190</id><snippet>model_module</snippet></ROW><ROW><id>4382190</id><snippet>project.appname.models</snippet></ROW><ROW><id>4382190</id><snippet>project\appname\models.py</snippet></ROW><ROW><id>4382190</id><snippet>appname</snippet></ROW><ROW><id>4382190</id><snippet>__name__</snippet></ROW><ROW><id>4382190</id><snippet>'__main__'</snippet></ROW><ROW><id>4382190</id><snippet>app_label</snippet></ROW><ROW><id>4382190</id><snippet>Meta</snippet></ROW><ROW><id>4382190</id><snippet>&gt;&gt;&gt; from django.db import models
&gt;&gt;&gt; class Poll(models.Model):
...     question = models.CharField(max_length=200)
...     pub_date = models.DateTimeField('date published')
...     class Meta:
...         app_label = 'test'
</snippet></ROW><ROW><id>4382190</id><snippet>D:\Python25\lib\site-packages\django\db\models\base.py</snippet></ROW><ROW><id>4382190</id><snippet>    if getattr(meta, 'app_label', None) is None:
        # Figure out the app_label by looking one level up.
        # For 'django.contrib.sites.models', this would be 'sites'.
        model_module = sys.modules[new_class.__module__]
        kwargs = {"app_label": model_module.__name__.split('.')[-2]}
    else:
        kwargs = {}
</snippet></ROW><ROW><id>4382190</id><snippet>meta</snippet></ROW><ROW><id>4382190</id><snippet>Meta</snippet></ROW><ROW><id>4382286</id><snippet>quadsect()</snippet></ROW><ROW><id>4382286</id><snippet>PIL</snippet></ROW><ROW><id>4382286</id><snippet>import random
from random import randint
random.seed()

NUM_RECTS = 20
REGION = Rect(0, 0, 640, 480)

class Point(object):
    def __init__(self, x, y):
        self.x, self.y = x, y

    @staticmethod
    def from_point(other):
        return Point(other.x, other.y)

class Rect(object):
    def __init__(self, x1, y1, x2, y2):
        minx, maxx = (x1,x2) if x1 &lt; x2 else (x2,x1)
        miny, maxy = (y1,y2) if y1 &lt; y2 else (y2,y1)
        self.min, self.max = Point(minx, miny), Point(maxx, maxy)

    @staticmethod
    def from_points(p1, p2):
        return Rect(p1.x, p1.y, p2.x, p2.y)

    width  = property(lambda self: self.max.x - self.min.x)
    height = property(lambda self: self.max.y - self.min.y)

plus_or_minus = lambda v: v * [-1, 1][(randint(0, 100) % 2)]  # equal chance +/-1

def quadsect(rect, factor):
    """ Subdivide given rectangle into four non-overlapping rectangles.
        'factor' is an integer representing the proportion of the width or
        height the deviatation from the center of the rectangle allowed.
    """
    # pick a point in the interior of given rectangle
    w, h = rect.width, rect.height  # cache properties
    center = Point(rect.min.x + (w // 2), rect.min.y + (h // 2))
    delta_x = plus_or_minus(randint(0, w // factor))
    delta_y = plus_or_minus(randint(0, h // factor))
    interior = Point(center.x + delta_x, center.y + delta_y)

    # create rectangles from the interior point and the corners of the outer one
    return [Rect(interior.x, interior.y, rect.min.x, rect.min.y),
            Rect(interior.x, interior.y, rect.max.x, rect.min.y),
            Rect(interior.x, interior.y, rect.max.x, rect.max.y),
            Rect(interior.x, interior.y, rect.min.x, rect.max.y)]

def square_subregion(rect):
    """ Return a square rectangle centered within the given rectangle """
    w, h = rect.width, rect.height  # cache properties
    if w &lt; h:
        offset = (h - w) // 2
        return Rect(rect.min.x, rect.min.y+offset,
                    rect.max.x, rect.min.y+offset+w)
    else:
        offset = (w - h) // 2
        return Rect(rect.min.x+offset, rect.min.y,
                    rect.min.x+offset+h, rect.max.y)

# call quadsect() until at least the number of rects wanted has been generated
rects = [REGION]   # seed output list
while len(rects) &lt;= NUM_RECTS:
    rects = [subrect for rect in rects
                        for subrect in quadsect(rect, 3)]

random.shuffle(rects)  # mix them up
sample = random.sample(rects, NUM_RECTS)  # select the desired number
print '%d out of the %d rectangles selected' % (NUM_RECTS, len(rects))

#################################################
# extra credit - create an image file showing results

from PIL import Image, ImageDraw

def gray(v): return tuple(int(v*255) for _ in range(3))

BLACK, DARK_GRAY, GRAY = gray(0), gray(.25), gray(.5)
LIGHT_GRAY, WHITE = gray(.75), gray(1)
RED, GREEN, BLUE = (255, 0, 0), (0, 255, 0), (0, 0, 255)
CYAN, MAGENTA, YELLOW = (0, 255, 255), (255, 0, 255), (255, 255, 0)
BACKGR, SQUARE_COLOR, RECT_COLOR = (245, 245, 87), (255, 73, 73), (37, 182, 249)

imgx, imgy = REGION.max.x + 1, REGION.max.y + 1
image = Image.new("RGB", (imgx, imgy), BACKGR)  # create color image
draw = ImageDraw.Draw(image)

def draw_rect(rect, fill=None, outline=WHITE):
    draw.rectangle([(rect.min.x, rect.min.y), (rect.max.x, rect.max.y)],
                   fill=fill, outline=outline)

# first draw outlines of all the non-overlapping rectanges generated
for rect in rects:
    draw_rect(rect, outline=LIGHT_GRAY)

# then draw the random sample of them selected
for rect in sample:
    draw_rect(rect, fill=RECT_COLOR, outline=WHITE)

# and lastly convert those into squares and re-draw them in another color
for rect in sample:
    draw_rect(square_subregion(rect), fill=SQUARE_COLOR, outline=WHITE)

filename = 'square_quadsections.png'
image.save(filename, "PNG")
print repr(filename), 'output image saved'
</snippet></ROW><ROW><id>4382528</id><snippet>cp1252</snippet></ROW><ROW><id>4382528</id><snippet>ISO-8859-1</snippet></ROW><ROW><id>4382528</id><snippet>UTF-8</snippet></ROW><ROW><id>4382528</id><snippet>cp1252</snippet></ROW><ROW><id>4382528</id><snippet>print repr(the_suspect_data)</snippet></ROW><ROW><id>4382593</id><snippet>+</snippet></ROW><ROW><id>4382593</id><snippet>__add__</snippet></ROW><ROW><id>4382593</id><snippet>+</snippet></ROW><ROW><id>4382593</id><snippet>a + b</snippet></ROW><ROW><id>4382593</id><snippet>__add__</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>b</snippet></ROW><ROW><id>4382593</id><snippet>__radd__</snippet></ROW><ROW><id>4382593</id><snippet>a + b</snippet></ROW><ROW><id>4382593</id><snippet>__radd__</snippet></ROW><ROW><id>4382593</id><snippet>b</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>__iadd__</snippet></ROW><ROW><id>4382593</id><snippet>a += b</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>a += b</snippet></ROW><ROW><id>4382593</id><snippet>a.extend(b)</snippet></ROW><ROW><id>4382593</id><snippet>c = a + b</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>a</snippet></ROW><ROW><id>4382593</id><snippet>__iadd__</snippet></ROW><ROW><id>4382593</id><snippet>__add__</snippet></ROW><ROW><id>4382593</id><snippet>a += b</snippet></ROW><ROW><id>4382593</id><snippet>a = a + b</snippet></ROW><ROW><id>4382885</id><snippet>urllib.unquote()</snippet></ROW><ROW><id>4382885</id><snippet>&gt;&gt;&gt; urllib.unquote('/favorites/Fran%C3%A7ois/Paris%20%26%20Orl%C3%A9ans')
'/favorites/Fran\xc3\xa7ois/Paris &amp; Orl\xc3\xa9ans'
</snippet></ROW><ROW><id>4382951</id><snippet>urllib2</snippet></ROW><ROW><id>4382951</id><snippet>mechanize</snippet></ROW><ROW><id>4382951</id><snippet>import mechanize

br = mechanize.Browser()
br.open("http://www.example.com/")
br.select_form()
br['username'] = 'user'
br['password'] = 'pass'
br.submit()

etc.
</snippet></ROW><ROW><id>4382964</id><snippet>import abc

class Shape(object):
    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def method_to_implement(self, input):
        """Method documentation"""
        return
</snippet></ROW><ROW><id>4383096</id><snippet>"hello world sample text".split()
</snippet></ROW><ROW><id>4383096</id><snippet>"hello world sample text".split(" ")
</snippet></ROW><ROW><id>4383096</id><snippet>re.split(" +", "hello world sample text")
</snippet></ROW><ROW><id>4383200</id><snippet>&gt;&gt;&gt; def f():
...     pass
... 
&gt;&gt;&gt; g = f()     &lt;---- g is the return value of running f
&gt;&gt;&gt; print g
None
</snippet></ROW><ROW><id>4383200</id><snippet>&gt;&gt;&gt; f = F()
&gt;&gt;&gt; print f    &lt;----- f is an instance of class F and 
               &lt;----- print f tries to provide a suitable string representation
               &lt;----- by calling f.__str__
</snippet></ROW><ROW><id>4383200</id><snippet>&gt;&gt;&gt; def f():
...     " some doc"
...     pass
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; f.__doc__
' some doc'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4383200</id><snippet>__str__</snippet></ROW><ROW><id>4383200</id><snippet>&gt;&gt;&gt; def f():
...     "some documentation .."
...     pass
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; f.__str__
&lt;method-wrapper '__str__' of function object at 0x100430140&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4383785</id><snippet>class BookingService(object):

    def subscribe(dest):
        """Decorator for subscribing function to destination

        """
        def callee(func):
            if not hasattr(func, 'subscriptions'):
                func.subscriptions = []
            func.subscriptions.append((dest, func))
            return func
        return callee

    def subscribe_all(self):
        for classmember in dir(self):
            for dest, func in getattr(getattr(self, classmember), 'subscriptions', []):
                self.msg_bus.subscribe(dest, func)

    @subscribe('/broadcast/aliveResponse')
    def handleEvent(self, dest, data):
        print dest, data

    def start(self):
        self.subscribe_all()
</snippet></ROW><ROW><id>4383785</id><snippet>self.subscribe()</snippet></ROW><ROW><id>4383785</id><snippet>self.subscribe()</snippet></ROW><ROW><id>4383907</id><snippet>subroutine test ( varint1, varflt2 )  bind ( C, name="MyTest" )

   use iso_c_binding

   integer (kind=c_int32_t), intent (in) :: varint1
   real (kind=c_float), intent (out) :: varflt2
</snippet></ROW><ROW><id>4384011</id><snippet>int(numpyint)
</snippet></ROW><ROW><id>4384082</id><snippet>import math
import os

def avg_dev(arr):
    """
    Calculate mean and standard deviation on an array of values

    @param arr Array of values
    """
    if len(arr)==0:
        return 0.0, 0.0
    else:
        avg = float(sum(arr)) / len(arr)
        dev = math.sqrt(sum([(i-avg)**2 for i in arr]))
        return avg,dev

class Flight:
    """
    Class wraps data about a single flight
    """
    def __init__(self, txt):
        """
        Initialize flight information

        @param txt  List of strings containing per-flight data
                    First row is header, beginning with 'ACM';
                    remainder are space-delimited columnar data
        """

        self.flightName = txt[0][3:].strip()
        self.numLines = len(txt)-1

        height = []
        wind = []
        temp = []
        for ln in txt[1:]:
            data = ln.split()
            height.append(float(data[4]))
            wind.append(float(data[3]))
            temp.append(float(data[8]))

        self.avg_height,     self.std_dev_height  = avg_dev(height)
        self.avg_wind_speed, self.std_dev_speed   = avg_dev(wind)
        self.avg_temp,       self.std_dev_temp    = avg_dev(temp)

    def __str__(self):
        return """Results for %s:
Speed: avg %f, stddev %f
Temp: avg %f, stddev %f
Height: avg %f, stddev %f

""" % (
            self.flightName,
            self.avg_wind_speed, self.std_dev_speed,
            self.avg_temp, self.std_dev_temp,
            self.avg_height, self.std_dev_height)


class Flights:
    """
    Container class for multiple flights expressed in a single log file
    """
    def __init__(self, fname):
        """
        Read a flight log file

        @param fname  Name of the log file
        """
        self.filename = fname
        self.flight = []

        inf = file(fname, 'r')        
        txt = []    # per-flight data buffer
        for ln in inf.readlines():
            if ln[:3]=='ACM':   # found start of new record
                if len(txt)&gt;0:  # flush buffer
                    self.flight.append(Flight(txt))
                txt = []
            txt.append(ln)
        if len(txt)&gt;0:          # clear buffer
            self.flight.append(Flight(txt))
        inf.close()

    def __iter__(self):
        return self.flight.__iter__()

def main():
    fname = raw_input("Enter the filename: ")

    try:
        # read flight data
        flight = Flights(fname)
    except IOError:
        print "File doesn't exist"
        sys.exit(1)

    logname = os.path.splitext(fname)[0] + ".log"
    logf = file(logname, 'w')
    for f in flight:
        logf.write(str(f))
    logf.close()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>4384082</id><snippet>ACM The first flight record
1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0
1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1 11.1 12.1 13.1 14.1
ACM The second flight
1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0
1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1 11.1 12.1 13.1 14.1
1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0
1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1 11.1 12.1 13.1 14.1
ACM Third flight
1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0
1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1 11.1 12.1 13.1 14.1
1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0
</snippet></ROW><ROW><id>4384131</id><snippet>Field.null</snippet></ROW><ROW><id>4384131</id><snippet>True</snippet></ROW><ROW><id>4384131</id><snippet>NULL</snippet></ROW><ROW><id>4384131</id><snippet>False</snippet></ROW><ROW><id>4384131</id><snippet>NULL</snippet></ROW><ROW><id>4384131</id><snippet>null=True</snippet></ROW><ROW><id>4384131</id><snippet>blank=True</snippet></ROW><ROW><id>4384131</id><snippet>null</snippet></ROW><ROW><id>4384131</id><snippet>blank</snippet></ROW><ROW><id>4384131</id><snippet>null</snippet></ROW><ROW><id>4384131</id><snippet>CharField</snippet></ROW><ROW><id>4384131</id><snippet>TextField</snippet></ROW><ROW><id>4384131</id><snippet>null=True</snippet></ROW><ROW><id>4384131</id><snippet>NULL</snippet></ROW><ROW><id>4384131</id><snippet>Field.blank</snippet></ROW><ROW><id>4384131</id><snippet>True</snippet></ROW><ROW><id>4384131</id><snippet>False</snippet></ROW><ROW><id>4384131</id><snippet>null</snippet></ROW><ROW><id>4384131</id><snippet>null</snippet></ROW><ROW><id>4384131</id><snippet>blank</snippet></ROW><ROW><id>4384131</id><snippet>blank=True</snippet></ROW><ROW><id>4384131</id><snippet>blank=False</snippet></ROW><ROW><id>4384131</id><snippet>Field.default</snippet></ROW><ROW><id>4384920</id><snippet>README.md</snippet></ROW><ROW><id>4384920</id><snippet>README</snippet></ROW><ROW><id>4384920</id><snippet>README</snippet></ROW><ROW><id>4384920</id><snippet>README.md</snippet></ROW><ROW><id>4384920</id><snippet>README</snippet></ROW><ROW><id>4384920</id><snippet>README.rst</snippet></ROW><ROW><id>4384920</id><snippet>README.rst</snippet></ROW><ROW><id>4384920</id><snippet>README</snippet></ROW><ROW><id>4384920</id><snippet>README</snippet></ROW><ROW><id>4384920</id><snippet>README.rst</snippet></ROW><ROW><id>4385347</id><snippet>ref</snippet></ROW><ROW><id>4385347</id><snippet>:ref:`label-name`
</snippet></ROW><ROW><id>4385347</id><snippet>.. _label-name:
</snippet></ROW><ROW><id>4385680</id><snippet>columns</snippet></ROW><ROW><id>4385680</id><snippet>combinations</snippet></ROW><ROW><id>4385680</id><snippet>columns</snippet></ROW><ROW><id>4385680</id><snippet>def calculateProportions(strategies,proportions):
    import copy
    import itertools
    combinations = []
    columns = list(itertools.product(strategies, repeat=3))
    for i in range(0, len(columns)):
        columns[i] = list(columns[i])
    for n in range(0, len(strategies)):
        combinations.append(copy.deepcopy(columns))
</snippet></ROW><ROW><id>4385680</id><snippet>def calculateProportions(strategies,proportions):
    import itertools
    combinations = []
    columns = list(itertools.product(strategies, repeat=3))
    for i in range(0, len(columns)):
        columns[i] = list(columns[i])
    for n in range(0, len(strategies)):
        combinations.append([item[:] for item in columns])
</snippet></ROW><ROW><id>4385780</id><snippet>&gt;&gt;&gt; bigstr = 'What are you saying?'
&gt;&gt;&gt; smallstr = 'you'
&gt;&gt;&gt; bigstr.split(smallstr)
['What are ', ' saying?']
&gt;&gt;&gt; words = bigstr.split(smallstr)
&gt;&gt;&gt; len(words[0])
9
&gt;&gt;&gt; len(words[1])
8
</snippet></ROW><ROW><id>4385780</id><snippet>&gt;&gt;&gt; bigstr.index(smallstr)
9
&gt;&gt;&gt; len(bigstr) - bigstr.index(smallstr) -len(smallstr)
8
</snippet></ROW><ROW><id>4385780</id><snippet>distance</snippet></ROW><ROW><id>4385780</id><snippet>'What are '</snippet></ROW><ROW><id>4385780</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern = re.compile(smallstr)
&gt;&gt;&gt; match = pattern.search(bigstr)       
&gt;&gt;&gt; match.span()
(9, 12)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4385926</id><snippet>from foo import bar</snippet></ROW><ROW><id>4385926</id><snippet>bar</snippet></ROW><ROW><id>4385926</id><snippet>reload</snippet></ROW><ROW><id>4386502</id><snippet>f</snippet></ROW><ROW><id>4386502</id><snippet>subprocess</snippet></ROW></DATA>