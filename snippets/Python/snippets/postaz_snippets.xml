<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>6242813</id><snippet>connection=sqlite3.connect(':memory:')
cursor=connection.cursor()
cursor.execute('''CREATE TABLE foo (id integer primary key autoincrement ,
                                    username varchar(50),
                                    password varchar(50))''')
cursor.execute('INSERT INTO foo (username,password) VALUES (?,?)',
               ('test','test'))
print(cursor.lastrowid)
# 1
</snippet></ROW><ROW><id>6242813</id><snippet>cursor</snippet></ROW><ROW><id>6242813</id><snippet>cursor.lastrowid</snippet></ROW><ROW><id>6242813</id><snippet>id</snippet></ROW><ROW><id>6242813</id><snippet>cursor</snippet></ROW><ROW><id>6242813</id><snippet>cursor.execute('INSERT INTO foo (username,password) VALUES (?,?)',
               ('blah','blah'))

cursor2=connection.cursor()
cursor2.execute('INSERT INTO foo (username,password) VALUES (?,?)',
               ('blah','blah'))

print(cursor2.lastrowid)        
# 3
print(cursor.lastrowid)
# 2

cursor.execute('INSERT INTO foo (id,username,password) VALUES (?,?,?)',
               (100,'blah','blah'))
print(cursor.lastrowid)
# 100
</snippet></ROW><ROW><id>6242813</id><snippet>lastrowid</snippet></ROW><ROW><id>6242813</id><snippet>None</snippet></ROW><ROW><id>6242813</id><snippet>executemany</snippet></ROW><ROW><id>6242813</id><snippet>cursor.executemany('INSERT INTO foo (username,password) VALUES (?,?)',
               (('baz','bar'),('bing','bop')))
print(cursor.lastrowid)
# None
</snippet></ROW><ROW><id>6242905</id><snippet>__init__</snippet></ROW><ROW><id>6242905</id><snippet>self._foo</snippet></ROW><ROW><id>6242905</id><snippet>request</snippet></ROW><ROW><id>6243470</id><snippet>sum(x for x in range(1,1000) if x % 3 == 0 or x % 5 == 0)
</snippet></ROW><ROW><id>6243470</id><snippet>reduce()</snippet></ROW><ROW><id>6243470</id><snippet>lambda x, y: x + y
</snippet></ROW><ROW><id>6243689</id><snippet>loadtxt()</snippet></ROW><ROW><id>6243689</id><snippet>x</snippet></ROW><ROW><id>6243689</id><snippet>y</snippet></ROW><ROW><id>6243689</id><snippet>max()</snippet></ROW><ROW><id>6243689</id><snippet>max()</snippet></ROW><ROW><id>6243689</id><snippet>numpy.max()</snippet></ROW><ROW><id>6243689</id><snippet>print x.max()
</snippet></ROW><ROW><id>6243689</id><snippet>print numpy.max(x)
</snippet></ROW><ROW><id>6243781</id><snippet>{{ article.pub_date|date:"DATE_FORMAT" }}
</snippet></ROW><ROW><id>6243820</id><snippet>socket.recvfrom(size)</snippet></ROW><ROW><id>6243820</id><snippet>size</snippet></ROW><ROW><id>6243979</id><snippet>from BeautifulSoup import BeautifulSoup

html = """&lt;html&gt;
...
&lt;h3 class="r"&gt;
&lt;a href="http://en.wikipedia.org/wiki/Digital_Signature_Algorithm" class=l
   onmousedown="return clk(this.href,'','','','6','','0CDEQFjACOAM')"&gt;
text&lt;/a&gt;
&lt;/h3&gt;
...
&lt;h3&gt;Don't find me!&lt;/h3&gt;
&lt;h3 class="r"&gt;&lt;a&gt;Don't find me!&lt;/a&gt;&lt;/h3&gt;
&lt;h3 class="r"&gt;&lt;a class="l"&gt;Don't error on missing href!&lt;/a&gt;&lt;/h3&gt;
...
&lt;/html&gt;
"""
soup = BeautifulSoup(html)

for h3 in soup.findAll("h3", {"class": "r"}):
  for a in h3.findAll("a", {"class": "l", "href": True}):
    print a["href"]
</snippet></ROW><ROW><id>6244002</id><snippet>file</snippet></ROW><ROW><id>6244002</id><snippet>io</snippet></ROW><ROW><id>6244002</id><snippet>file</snippet></ROW><ROW><id>6244002</id><snippet>f.readline()</snippet></ROW><ROW><id>6244002</id><snippet>f.readlines()</snippet></ROW><ROW><id>6244002</id><snippet>next(f)</snippet></ROW><ROW><id>6244002</id><snippet>list(f)</snippet></ROW><ROW><id>6244185</id><snippet>d = dict((x.key, x) for x in object_list)
</snippet></ROW><ROW><id>6244185</id><snippet>new_list = [d[key] for key in string_list]
</snippet></ROW><ROW><id>6244366</id><snippet>__str__ = __repr__ = hello
</snippet></ROW><ROW><id>6244366</id><snippet>bar = lambda self: self.hello()
</snippet></ROW><ROW><id>6244366</id><snippet>.func_name</snippet></ROW><ROW><id>6244366</id><snippet>&lt;lambda&gt;</snippet></ROW><ROW><id>6244499</id><snippet>z</snippet></ROW><ROW><id>6244499</id><snippet>z.read()</snippet></ROW><ROW><id>6244499</id><snippet>import urllib2
z=urllib2.urlopen('http://skreemr.com/results.jsp?q=said+the+whale&amp;search=SkreemR+Search')
i = z.read()
print i
</snippet></ROW><ROW><id>6244658</id><snippet>b</snippet></ROW><ROW><id>6244658</id><snippet>z</snippet></ROW><ROW><id>6244658</id><snippet>a</snippet></ROW><ROW><id>6244658</id><snippet>instance.b</snippet></ROW><ROW><id>6244658</id><snippet>a</snippet></ROW><ROW><id>6244658</id><snippet>co_name</snippet></ROW><ROW><id>6244658</id><snippet>a</snippet></ROW><ROW><id>6244658</id><snippet>import string

class X(object):
  def __getattr__(self, name):
    if name in string.lowercase and len(name) == 1:
      def call_into_module(arg):
        return module.do(arg, name)
      return call_into_module

    return super(X, self).__getattr__(name)
</snippet></ROW><ROW><id>6244679</id><snippet>int _PyUnicode_Resize(PyUnicodeObject **unicode, Py_ssize_t length) 
</snippet></ROW><ROW><id>6244679</id><snippet>int PyUnicode_Resize(PyObject **unicode, Py_ssize_t length)
{
    return _PyUnicode_Resize((PyUnicodeObject **)unicode, length);
}
</snippet></ROW><ROW><id>6244838</id><snippet>&lt;</snippet></ROW><ROW><id>6244838</id><snippet>&gt;</snippet></ROW><ROW><id>6244838</id><snippet>@</snippet></ROW><ROW><id>6244876</id><snippet>from datetime import datetime, timedelta

query = MyModel.gql("WHERE date &gt; :1 ORDER BY plays DESC", datetime.now() - timedelta(days=7))
count = query.count()
if count &lt; 50:
   query = MyModel.gql("WHERE date &gt; :1", datetime.now() - timedelta(days=10))
value = query.fetch()
</snippet></ROW><ROW><id>6244968</id><snippet>s = '''www.something.com

get the 2 above

www.somethingss.com

get the 2 above

www.somethingssss.com

get the 2 above'''

s = s.splitlines()
for i, line in enumerate(s):
    if 'get the 2 above' in line:
        print s[i-1], s[i-2]
</snippet></ROW><ROW><id>6244968</id><snippet>s.splitlines()</snippet></ROW><ROW><id>6244968</id><snippet>True</snippet></ROW><ROW><id>6244968</id><snippet>s.splitlines(True)</snippet></ROW><ROW><id>6244968</id><snippet>with open('myfile.txt', 'r') as f:
    s = f.readlines()
</snippet></ROW><ROW><id>6245080</id><snippet>idlelib.rpc.RPCProxy</snippet></ROW><ROW><id>6245080</id><snippet>sys.stdin.readlines()
</snippet></ROW><ROW><id>6245080</id><snippet>readlines</snippet></ROW><ROW><id>6245080</id><snippet>for line in sys.stdin:
    ...
</snippet></ROW><ROW><id>6245134</id><snippet>itertools.product()</snippet></ROW><ROW><id>6245134</id><snippet>group1 = ["Steve", "Mark", "Tom"]
group2 = ["Brett", "Mick", "Foo"]
group3 = ["Dan", "Phil"]
for x in itertools.product(group1, group2, group3):
    print x
</snippet></ROW><ROW><id>6245134</id><snippet>('Steve', 'Brett', 'Dan')
('Steve', 'Brett', 'Phil')
('Steve', 'Mick', 'Dan')
('Steve', 'Mick', 'Phil')
('Steve', 'Foo', 'Dan')
('Steve', 'Foo', 'Phil')
('Mark', 'Brett', 'Dan')
('Mark', 'Brett', 'Phil')
('Mark', 'Mick', 'Dan')
('Mark', 'Mick', 'Phil')
('Mark', 'Foo', 'Dan')
('Mark', 'Foo', 'Phil')
('Tom', 'Brett', 'Dan')
('Tom', 'Brett', 'Phil')
('Tom', 'Mick', 'Dan')
('Tom', 'Mick', 'Phil')
('Tom', 'Foo', 'Dan')
('Tom', 'Foo', 'Phil')
</snippet></ROW><ROW><id>6245589</id><snippet>0.5522847498</snippet></ROW><ROW><id>6245589</id><snippet>y_mid = ((0+H)/2 + (H+H)/2) / 2 = 3/4 H</snippet></ROW><ROW><id>6245589</id><snippet>L</snippet></ROW><ROW><id>6245589</id><snippet>S</snippet></ROW><ROW><id>6245589</id><snippet>2*alpha</snippet></ROW><ROW><id>6245637</id><snippet>pub_dict = {}    
for p in pub:
   if not p.key in pub_dict:
      pub_dict[p.key] = []
   pub_dict[p.key].append(p)
</snippet></ROW><ROW><id>6245707</id><snippet>Photo</snippet></ROW><ROW><id>6245707</id><snippet>Gallery&lt;code&gt; based on the collection of ids it has for them&lt;/li&gt;
&lt;li&gt;When it needs the &lt;code&gt;Gallery</snippet></ROW><ROW><id>6245707</id><snippet>Photo</snippet></ROW><ROW><id>6245707</id><snippet>Gallery</snippet></ROW><ROW><id>6245707</id><snippet>Photo</snippet></ROW><ROW><id>6245707</id><snippet>Gallery</snippet></ROW><ROW><id>6245857</id><snippet>unix_socket</snippet></ROW><ROW><id>6245857</id><snippet>mysql:///dbname?unix_socket=/opt/mysql/mysql.sock'
</snippet></ROW><ROW><id>6246099</id><snippet>stderr</snippet></ROW><ROW><id>6246099</id><snippet>p.communicate()[1]</snippet></ROW><ROW><id>6246179</id><snippet>slice</snippet></ROW><ROW><id>6246179</id><snippet>indices()</snippet></ROW><ROW><id>6246264</id><snippet>os.fork()</snippet></ROW><ROW><id>6246264</id><snippet>program.sh</snippet></ROW><ROW><id>6246264</id><snippet>from fabric.api import run
def runmyprogram():
    run('./program.sh &gt; output 2&gt; /dev/null &lt; /dev/null &amp;')
</snippet></ROW><ROW><id>6246264</id><snippet>fab -H remotebox runmyprogram
</snippet></ROW><ROW><id>6246264</id><snippet>nohup ./program.sh &gt; output &amp;
</snippet></ROW><ROW><id>6246264</id><snippet>from fabric.api import run
def runmyprogram():
    run('./program.sh')
</snippet></ROW><ROW><id>6246264</id><snippet>fab -H remotebox runmyprogram &gt; output &amp;
</snippet></ROW><ROW><id>6246395</id><snippet>&gt;&gt;&gt; resolve(request.path).url_name
'edit_foo'
</snippet></ROW><ROW><id>6246395</id><snippet>resolve</snippet></ROW><ROW><id>6246478</id><snippet>isinstance(cls, type)</snippet></ROW><ROW><id>6246478</id><snippet>import os, sys

path = os.path.dirname(os.path.abspath(__file__))

for py in [f[:-3] for f in os.listdir(path) if f.endswith('.py') and f != '__init__.py']:
    mod = __import__('.'.join([__name__, py]), fromlist=[py])
    classes = [getattr(mod, x) for x in dir(mod) if isinstance(getattr(mod, x), type)]
    for cls in classes:
        setattr(sys.modules[__name__], cls.__name__, cls)
</snippet></ROW><ROW><id>6246554</id><snippet>me@mine:~ $ cat foo.py 
def double(i):
    return i * 2

def halve(i):
    return i / 2.0

for i in range(10000):
    double(i)
    halve(i)
me@mine:~ $ python -m cProfile foo.py 
         20005 function calls in 0.009 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.009    0.009 &lt;string&gt;:1(&lt;module&gt;)
        1    0.006    0.006    0.009    0.009 foo.py:1(&lt;module&gt;)
    10000    0.001    0.000    0.001    0.000 foo.py:1(double)
    10000    0.002    0.000    0.002    0.000 foo.py:4(halve)
        1    0.000    0.000    0.009    0.009 {execfile}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 {range}
</snippet></ROW><ROW><id>6246775</id><snippet>sha224</snippet></ROW><ROW><id>6246775</id><snippet>ssh(1)</snippet></ROW><ROW><id>6246775</id><snippet>sshd(8)</snippet></ROW><ROW><id>6247071</id><snippet>def getCurrentShow(hour=None, day=None):
    hour = hour or localtime().tm_hour
    day = day or datetime.datetime.now().strftime('%A')
    return Schedule.objects.get(hour=hour, day=day).show
</snippet></ROW><ROW><id>6247071</id><snippet>or</snippet></ROW><ROW><id>6247071</id><snippet>bool(operand) != False</snippet></ROW><ROW><id>6247071</id><snippet>&gt;&gt;&gt; None or 5
5
&gt;&gt;&gt; None or datetime.now()
datetime.datetime(2011, 6, 6, 11, 25, 46, 568186)
&gt;&gt;&gt; 10 or datetime.now()
10
</snippet></ROW><ROW><id>6247071</id><snippet>None</snippet></ROW><ROW><id>6247423</id><snippet>class</snippet></ROW><ROW><id>6247423</id><snippet>width</snippet></ROW><ROW><id>6247423</id><snippet>height</snippet></ROW><ROW><id>6247850</id><snippet>nodes = tree.values()
for node in nodes:
    if node.parent:
        if not hasattr(node.parent, 'children'):
            node.parent.children = []
        node.parent.children +=[ node ]
</snippet></ROW><ROW><id>6247850</id><snippet>def traverse(root, callback):
    """
        Peform callback on all nodes in depth-first order
        e.g. traverse(root, lambda x:print(x))
    """
    yield root, callback(root)
    for child in root.children:
        traverse(child)

def getAllDescendents(title):
    queryNode = titlesToNodes[title]  #what you call 'tree'
    for node,blah in traverse(queryNode, lambda x:None):
        yield node
</snippet></ROW><ROW><id>6248129</id><snippet>inspect.stack()</snippet></ROW><ROW><id>6248129</id><snippet>def get_caller_lineno():
    frame, _, lineno, _, _, _ = inspect.stack()[1]
    return lineno
</snippet></ROW><ROW><id>6248280</id><snippet>&gt;&gt;&gt; eval("[1,2,3,4]")
[1, 2, 3, 4]
</snippet></ROW><ROW><id>6248672</id><snippet>for a in range(2, 3000):
    if all(a % k == 0 for k in range(1,11)):
        print a
</snippet></ROW><ROW><id>6248949</id><snippet>for line in someopenfile:
  if line.isspace():
    empty_line()
</snippet></ROW><ROW><id>6249523</id><snippet>\0</snippet></ROW><ROW><id>6249523</id><snippet>\0</snippet></ROW><ROW><id>6249523</id><snippet>...
unsigned char * result1 = (unsigned char *)malloc(MD5_DIGEST_LENGTH + 1);
result1[MD5_DIGEST_LENGTH] = 0;
...
</snippet></ROW><ROW><id>6249954</id><snippet>&gt;&gt;&gt; numpy.random.seed(1)
&gt;&gt;&gt; m = numpy.random.randn(5.,5.)
&gt;&gt;&gt; m
array([[ 1.62434536, -0.61175641, -0.52817175, -1.07296862,  0.86540763],
       [-2.3015387 ,  1.74481176, -0.7612069 ,  0.3190391 , -0.24937038],
       [ 1.46210794, -2.06014071, -0.3224172 , -0.38405435,  1.13376944],
       [-1.09989127, -0.17242821, -0.87785842,  0.04221375,  0.58281521],
       [-1.10061918,  1.14472371,  0.90159072,  0.50249434,  0.90085595]])
&gt;&gt;&gt; m[~ ((m &lt; 0.5) | (m &gt; 0.8))].min()
0.50249433890186823
</snippet></ROW><ROW><id>6249954</id><snippet>&gt;&gt;&gt; numpy.ma.array(m,mask=((m&lt;0.5) | (m &gt; 0.8))).argmin()
23
&gt;&gt;&gt; m.flat[23]
0.50249433890186823
</snippet></ROW><ROW><id>6249954</id><snippet>&gt;&gt;&gt; xx, yy = numpy.indices(m.shape)
&gt;&gt;&gt; points = ((xx == 0) &amp; (yy == 0)) | ((xx &gt; 2) &amp; (yy &lt; 3))
&gt;&gt;&gt; points
array([[ True, False, False, False, False],
       [False, False, False, False, False],
       [False, False, False, False, False],
       [ True,  True,  True, False, False],
       [ True,  True,  True, False, False]], dtype=bool)
&gt;&gt;&gt; m[points]
array([ 1.62434536, -1.09989127, -0.17242821, -0.87785842, -1.10061918,
        1.14472371,  0.90159072])
&gt;&gt;&gt; m[points].min()
-1.1006191772129212
</snippet></ROW><ROW><id>6249961</id><snippet>add()</snippet></ROW><ROW><id>6249961</id><snippet>if place.data == conn_1 and conn_1 != conn_2:
    # place is the Place instance described by conn_1.
    # Let's connect it to conn_2!
    place.connected_to.add(conn_2)
</snippet></ROW><ROW><id>6249961</id><snippet>objects.get</snippet></ROW><ROW><id>6249961</id><snippet>objects.filter</snippet></ROW><ROW><id>6249961</id><snippet>data</snippet></ROW><ROW><id>6249961</id><snippet>for source, target in connections:
   Place.objects.get(data=source).connected_to.add(Place.objects.get(data=target))
</snippet></ROW><ROW><id>6249961</id><snippet>unique=True</snippet></ROW><ROW><id>6249961</id><snippet>data</snippet></ROW><ROW><id>6250083</id><snippet>split()</snippet></ROW><ROW><id>6250083</id><snippet>&gt;&gt;&gt; foo = "http://www.address.com/something#something"
&gt;&gt;&gt; foo = foo.split('#')[0]
&gt;&gt;&gt; foo
'http://www.address.com/something'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6250688</id><snippet>&gt;&gt;&gt; import netifaces as ni
&gt;&gt;&gt; ni.interfaces()
['lo', 'eth0', 'eth1', 'vboxnet0', 'dummy1']
&gt;&gt;&gt; ni.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:02:55:7b:b2:f6'}], 2: [{'broadcast': '24.19.161.7', 'netmask': '255.255.255.248', 'addr': '24.19.161.6'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::202:55ff:fe7b:b2f6%eth0'}]}
&gt;&gt;&gt; 
&gt;&gt;&gt; ni.ifaddresses.__doc__
'Obtain information about the specified network interface.\n\nReturns a dict whose keys are equal to the address family constants,\ne.g. netifaces.AF_INET, and whose values are a list of addresses in\nthat family that are attached to the network interface.'
&gt;&gt;&gt; # for the IPv4 address of eth0
&gt;&gt;&gt; ni.ifaddresses('eth0')[2][0]['addr']
'24.19.161.6'
</snippet></ROW><ROW><id>6250688</id><snippet>/usr/include/linux/socket.h</snippet></ROW><ROW><id>6250688</id><snippet>#define AF_INET         2       /* Internet IP Protocol         */
#define AF_INET6        10      /* IP version 6                 */
#define AF_PACKET       17      /* Packet family                */
</snippet></ROW><ROW><id>6251564</id><snippet>orders</snippet></ROW><ROW><id>6251564</id><snippet>&gt;&gt;&gt; s = select([orders.c.user_id, func.count(orders.c.id)]).\
...     group_by(orders.c.user_id).having(func.count(orders.c.id) &gt; 2)
</snippet></ROW><ROW><id>6251564</id><snippet>user_id</snippet></ROW><ROW><id>6251564</id><snippet>User</snippet></ROW><ROW><id>6251564</id><snippet>s</snippet></ROW><ROW><id>6251564</id><snippet>User</snippet></ROW><ROW><id>6252206</id><snippet>FileField.storage</snippet></ROW><ROW><id>6252400</id><snippet>a = np.array([1,2,3,1,2,1,1,1,3,2,2,1])
counts = np.bincount(a)
print np.argmax(counts)
</snippet></ROW><ROW><id>6252400</id><snippet>np.histogram</snippet></ROW><ROW><id>6252400</id><snippet>collections.Counter</snippet></ROW><ROW><id>6252400</id><snippet>from collections import Counter
a = [1,2,3,1,2,1,1,1,3,2,2,1]
b = Counter(a)
print b.most_common(1)
</snippet></ROW><ROW><id>6252642</id><snippet>blank</snippet></ROW><ROW><id>6252642</id><snippet>ModelForm</snippet></ROW><ROW><id>6252642</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel

&gt;&gt;&gt; f = MyForm({"s1":""})
&gt;&gt;&gt; f.is_valid()
False
&gt;&gt;&gt; f = MyForm({"s1":"hello world"})
&gt;&gt;&gt; f.is_valid()
True
&gt;&gt;&gt; a = f.save()
&gt;&gt;&gt; a
&lt;MyModel: MyModel object&gt;
&gt;&gt;&gt; a.id
10
</snippet></ROW><ROW><id>6252642</id><snippet>min_length</snippet></ROW><ROW><id>6252642</id><snippet>forms.CharField</snippet></ROW><ROW><id>6252642</id><snippet>models.CharField</snippet></ROW><ROW><id>6252642</id><snippet>class MyForm(forms.ModelForm):
    class Meta:
        model = MyModel
    s1 = forms.CharField(min_length=3, max_length=100)


&gt;&gt;&gt; f = MyForm({"s1":"12"})
&gt;&gt;&gt; f.is_valid()
False
&gt;&gt;&gt; f = MyForm({"s1":"1234"})
&gt;&gt;&gt; f.is_valid()
True
</snippet></ROW><ROW><id>6252642</id><snippet>default=None</snippet></ROW><ROW><id>6252642</id><snippet>NULL</snippet></ROW><ROW><id>6252642</id><snippet>""</snippet></ROW><ROW><id>6252642</id><snippet>null=True</snippet></ROW><ROW><id>6252642</id><snippet>class MyModel(models.Model):
  s1 = models.CharField(max_length=255, default=None)


&gt;&gt;&gt; m = MyModel()
&gt;&gt;&gt; m.save()
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in ?
  &lt;.... trimmed for brevity ...&gt;
  File "/usr/lib/python2.3/site-packages/django/db/backends/sqlite3/base.py", line 193, in execute
    return Database.Cursor.execute(self, query, params)
IntegrityError: test_mymodel.s1 may not be NULL
</snippet></ROW><ROW><id>6252642</id><snippet>class MyModel(models.Model):
    s1 = models.CharField(max_length=100)

    def save(self, *args, **kwargs):
        self.full_clean()
        Super(MyModel, self).save(*args, **kwargs)


&gt;&gt;&gt; m = MyModel()
&gt;&gt;&gt; m.save()
Traceback (most recent call last):
  File "&lt;console&gt;", line 1, in &lt;module&gt;
  File "/tmp/lsc/playground/zoo/models.py", line 42, in save
    self.full_clean()
  File "/usr/lib/pymodules/python2.6/django/db/models/base.py", line 881, in full_clean
    raise ValidationError(errors)
ValidationError: {'s1': [u'This field cannot be blank.']}
</snippet></ROW><ROW><id>6252698</id><snippet>logging</snippet></ROW><ROW><id>6252698</id><snippet>logging</snippet></ROW><ROW><id>6252698</id><snippet>sys.path</snippet></ROW><ROW><id>6252698</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6252698</id><snippet>logging</snippet></ROW><ROW><id>6252931</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; zip(list(calendar.day_abbr), range(7))
[('Mon', 0), ('Tue', 1), ('Wed', 2), ('Thu', 3), ('Fri', 4), ('Sat', 5), ('Sun', 6)]
</snippet></ROW><ROW><id>6253027</id><snippet>import matplotlib.pyplot as plt

xx=[1,2,3]
yy=[2,3,4]
dy=[0.1,0.2,0.05]

fig=plt.figure()
figname = "out.png"
ax=fig.add_subplot(111)

ax.errorbar(xx,yy,dy,fmt='ro-',ms=6,elinewidth=4)

# start of hack to get renderer
fig.savefig(figname)
renderer = plt.gca().get_renderer_cache()
# end of hack

txt = ax.text(xx[1], yy[1],r'$S=0$',fontsize=16)
tbox = txt.get_window_extent(renderer)
dbox = tbox.transformed(ax.transData.inverted())
text_width = dbox.x1-dbox.x0
text_height = dbox.y1-dbox.y0
x = xx[1] - text_height
y = yy[1] - text_width/2
txt.set_position((x,y))

ax.set_xlim([0.,3.4])
ax.set_ylim([0.,4.4])

fig.savefig(figname)
</snippet></ROW><ROW><id>6253254</id><snippet>ctypes</snippet></ROW><ROW><id>6253254</id><snippet>ctypes</snippet></ROW><ROW><id>6253606</id><snippet>my_list = [[1, A], [2, B], [3, C]]
a, b = zip(*my_list)
</snippet></ROW><ROW><id>6253606</id><snippet>a</snippet></ROW><ROW><id>6253606</id><snippet>b</snippet></ROW><ROW><id>6253856</id><snippet>data: ({data: "mydata"})</snippet></ROW><ROW><id>6253880</id><snippet>school = None
headers = None
data = {}
for line in text.splitlines():
    if line.startswith("school id"):
        school = line.split('=')[1].strip()
        headers = None
        continue
    if school is not None and headers is None:
        headers = line.split('|')
        continue

    if school is not None and headers is not None and line:
        if not school in data:
            data[school] = []
        datum = dict(zip(headers, line.split('|')))
        data[school].append(datum)    
</snippet></ROW><ROW><id>6253880</id><snippet>In [29]: data
Out[29]: 
{'273533123': [{'age': '27',
                'degree': 'MBA',
                'name': 'John B. Black',
                'race': 'hispanic',
                'year': '2003'},
               {'age': '28',
                'degree': 'PhD',
                'name': 'Steven Smith',
                'race': 'black',
                'year': '2005'},
               {'age': '25',
                'degree': 'MBA',
                'name': 'Jacob Waters',
                'race': 'hispanic',
                'year': '2003'}],
 '28392': [{'age': '27',
            'degree': 'PhD',
            'name': 'Susan A. Smith',
            'race': 'white',
            'year': '2007'},
           {'age': '26',
            'degree': 'PhD',
            'name': 'Fred Collins',
            'race': 'hispanic',
            'year': '2006'},
           {'age': '28',
            'degree': 'MBA',
            'name': 'Amber Real',
            'race': 'white',
            'year': '2007'},
           {'age': '27',
            'degree': 'PhD',
            'name': 'Mike Lee',
            'race': 'white',
            'year': '2003'}],
 '3452332': [{'age': '27',
              'degree': 'Bachelors',
              'name': 'Peter Hintze',
              'race': 'white',
              'year': '2002'},
             {'age': '25',
              'degree': 'MBA',
              'name': 'Ann Graden',
              'race': 'black',
              'year': '2004'},
             {'age': '28',
              'degree': 'PhD',
              'name': 'Bryan Stewart',
              'race': 'white',
              'year': '2004'}]}    
</snippet></ROW><ROW><id>6253979</id><snippet>lp</snippet></ROW><ROW><id>6253979</id><snippet>subprocess.Popen(['lp', '-d', printername, filename])</snippet></ROW><ROW><id>6254327</id><snippet>style</snippet></ROW><ROW><id>6254615</id><snippet>hasattr</snippet></ROW><ROW><id>6254615</id><snippet>class Foo(object):
    def bar():
        pass

assert hasattr(Foo, 'bar')
</snippet></ROW><ROW><id>6254615</id><snippet>assert hasattr(Foo, 'bar') and callable(getattr(Foo, 'bar'))
</snippet></ROW><ROW><id>6254924</id><snippet>array( [ [ i*j for j in xrange(5)] for i in xrange(5)] )
</snippet></ROW><ROW><id>6254950</id><snippet>&gt;&gt;&gt; l=[None ,3]
&gt;&gt;&gt; min(i for i in l if i is not None)
3
</snippet></ROW><ROW><id>6255255</id><snippet>data = {'323503': [{'name': 'Derek', 'age': '21', 'race': 'white'}, {'name': 'Josh', 'age': '15', 'race': 'white'}, {'name': 'Adam', 'age': '32', 'weight': '180'}],
        '3802': [{'name': 'Abe', 'age': '12', 'weight': '132', 'race': 'black'}, {'name': 'Amy', 'age': '31', 'weight': '180'}],
        '290301': [{'name': 'Sally', 'age': '25'}, {'name': 'Joe', 'age': '18'}]
       }

rows = []
for id_ in data:
    for row in data[id_]:
        row.update({'id': id_})
        rows.append(row)
</snippet></ROW><ROW><id>6255255</id><snippet>rows</snippet></ROW><ROW><id>6255300</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>6255801</id><snippet>^.*(\d+)</snippet></ROW><ROW><id>6255801</id><snippet>.*</snippet></ROW><ROW><id>6255801</id><snippet>\d+</snippet></ROW><ROW><id>6255801</id><snippet>.*</snippet></ROW><ROW><id>6255801</id><snippet>\d+</snippet></ROW><ROW><id>6255801</id><snippet>^.*?(\d+)</snippet></ROW><ROW><id>6255801</id><snippet>.*?</snippet></ROW><ROW><id>6255801</id><snippet>\d+</snippet></ROW><ROW><id>6255801</id><snippet>.*?</snippet></ROW><ROW><id>6255801</id><snippet>+</snippet></ROW><ROW><id>6255801</id><snippet>abc123edf567</snippet></ROW><ROW><id>6255801</id><snippet>123</snippet></ROW><ROW><id>6255801</id><snippet>(\d+).*$</snippet></ROW><ROW><id>6255801</id><snippet>\d+</snippet></ROW><ROW><id>6255801</id><snippet>.*$</snippet></ROW><ROW><id>6255801</id><snippet>(\d+).*?$</snippet></ROW><ROW><id>6255801</id><snippet>\d+</snippet></ROW><ROW><id>6255801</id><snippet>.*?$</snippet></ROW><ROW><id>6255801</id><snippet>$</snippet></ROW><ROW><id>6255801</id><snippet>*?</snippet></ROW><ROW><id>6255801</id><snippet>(\d+)\D*$</snippet></ROW><ROW><id>6255870</id><snippet>filter(str.isupper, list)
</snippet></ROW><ROW><id>6256201</id><snippet>np.argsort</snippet></ROW><ROW><id>6256201</id><snippet>a = np.arange(10)
a[np.argsort(a)[-3:]]
</snippet></ROW><ROW><id>6256201</id><snippet>ii = np.argsort(a)[-3:] # positions
vals = a[ii]            # values
</snippet></ROW><ROW><id>6256217</id><snippet>__init__</snippet></ROW><ROW><id>6256217</id><snippet> def __init__(self, parent, id):
    wx.Frame.__init__(self, parent, id, 'Title', size=(300,200))
    panel = wx.Panel(self)


    box = wx.TextEntryDialog(None, "How old are you?", "Title", "default text")
    if box.ShowModal() == wx.ID_OK:
        answer = box.GetValue()
</snippet></ROW><ROW><id>6256280</id><snippet>class Post(models.Model):         
    name = models.CharField(max_length=20)

class Vote(models.Model):
    post = models.ForeignKey(Post)
    value = models.IntegerField()
    type = models.CharField(max_length=2, choices=(("AW", "Awesomeness"), ("US", "Usefulness")))
</snippet></ROW><ROW><id>6256280</id><snippet>Sum</snippet></ROW><ROW><id>6256280</id><snippet>vote_total</snippet></ROW><ROW><id>6256280</id><snippet>from django.db.models import Sum
Post.objects.annotate(vote_total=Sum('vote__value')).order_by('-vote_total')
</snippet></ROW><ROW><id>6256280</id><snippet>Post.objects.get_or_create(id=1, name="post1")
Post.objects.get_or_create(id=2, name="post2")
Post.objects.get_or_create(id=3, name="post3")
Post.objects.get_or_create(id=4, name="post4")
Vote.objects.get_or_create(id=1, post_id=2, value=1, type="AW")
Vote.objects.get_or_create(id=2, post_id=2, value=1, type="AW")
Vote.objects.get_or_create(id=3, post_id=2, value=1, type="US")
Vote.objects.get_or_create(id=4, post_id=2, value=1, type="US")
Vote.objects.get_or_create(id=5, post_id=3, value=-1, type="AW")
Vote.objects.get_or_create(id=6, post_id=3, value=-1, type="AW")
Vote.objects.get_or_create(id=7, post_id=4, value=-1, type="AW")
</snippet></ROW><ROW><id>6256280</id><snippet>posts = Post.objects.annotate(vote_total=Sum('vote__value')).order_by('-vote_total')</snippet></ROW><ROW><id>6256280</id><snippet>[(post.name, post.vote_total) for post in posts]</snippet></ROW><ROW><id>6256280</id><snippet>[(u'post2', 4), (u'post4', -1), (u'post3', -2), (u'post1', None)]
</snippet></ROW><ROW><id>6256280</id><snippet>Sum</snippet></ROW><ROW><id>6256280</id><snippet>for p in Post.objects.all():
    Vote.objects.get_or_create(post_id=p.id, value=0)
</snippet></ROW><ROW><id>6256280</id><snippet>&gt;&gt;&gt; [(p.name, p.vote_total) for p in
     Post.objects.annotate(vote_total=Sum('vote__value')).order_by('-vote_total')]
[(u'post2', 4), (u'post1', 0), (u'post4', -1), (u'post3', -2)]
</snippet></ROW><ROW><id>6256280</id><snippet>select_dict = dict(vote_total = "SELECT SUM(value) FROM yourappname_vote WHERE yourappname_vote.post_id = yourappname_post.id",
                   awesome_total = "SELECT SUM(value) FROM yourappname_vote WHERE yourappname_vote.post_id = yourappname_post.id AND yourappname_vote.type = 'AW' ",
                   useful_total = "SELECT SUM(value) FROM yourappname_vote WHERE yourappname_vote.post_id = yourappname_post.id AND yourappname_vote.type = 'US' ",)

posts = Post.objects.all().extra(select = select_dict).order_by('-vote_total')

&gt;&gt;&gt; [(p.name, p.vote_total, p.awesome_total, p.useful_total) for p in posts]
[(u'post2', 4, 2, 2),
 (u'post1', 0, 0, 0),
 (u'post4', -1, -1, 0),
 (u'post3', -2, -2, 0)]
</snippet></ROW><ROW><id>6256280</id><snippet>vote_total</snippet></ROW><ROW><id>6256280</id><snippet>awesome_total</snippet></ROW><ROW><id>6256280</id><snippet>useful_total</snippet></ROW><ROW><id>6256424</id><snippet>file_date = str(input("Enter file date: "))
</snippet></ROW><ROW><id>6256502</id><snippet>import mpmath
arg_1 = 1
arg_2 = 9

print mpmath.quad(lambda x: f(x, arg_1, arg_2), ...)
</snippet></ROW><ROW><id>6256567</id><snippet>nonlocal</snippet></ROW><ROW><id>6256567</id><snippet>def f(v=1):
    def ff():
        nonlocal v
        print(v)
        v = 2
    ff()
</snippet></ROW><ROW><id>6256567</id><snippet>v</snippet></ROW><ROW><id>6256567</id><snippet>def f(v=None):
    if v is None:
        v = [1]
    def ff():
        print v[0]
        v[0] = 2
    ff()
</snippet></ROW><ROW><id>6256715</id><snippet>dok_matrix</snippet></ROW><ROW><id>6256715</id><snippet>dict.*</snippet></ROW><ROW><id>6256715</id><snippet>from scipy.sparse.linalg import LinearOperator
A = whatever_dok_matrix_minus_constant_term
def my_matvec(x):
    return A*x + constant_term * x.sum()
op = LinearOperator(A.shape, matvec=my_matvec)
</snippet></ROW><ROW><id>6256715</id><snippet>op</snippet></ROW><ROW><id>6256715</id><snippet>A</snippet></ROW><ROW><id>6256715</id><snippet>scipy.linalg.logm</snippet></ROW><ROW><id>6256715</id><snippet>log(A) * v</snippet></ROW><ROW><id>6256715</id><snippet>.data</snippet></ROW><ROW><id>6256715</id><snippet>x = A.tocoo()
x.data = np.log(x.data)
A = x.todok()
</snippet></ROW><ROW><id>6257048</id><snippet>dequeobject</snippet></ROW><ROW><id>6257048</id><snippet>block</snippet></ROW><ROW><id>6257048</id><snippet>deque</snippet></ROW><ROW><id>6257296</id><snippet>for F1 in ZI1:
</snippet></ROW><ROW><id>6257296</id><snippet>stdin, stdout, stderr = ssh.exec_command('uname -a')

ssh.exec_command('ls -la')
</snippet></ROW><ROW><id>6257603</id><snippet>find project_name -name urls.py | xargs pylint
</snippet></ROW><ROW><id>6257716</id><snippet>.digest()</snippet></ROW><ROW><id>6257716</id><snippet>.hexdigest()</snippet></ROW><ROW><id>6257793</id><snippet>import wx

class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, "Tutorial")

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        self.answers = {}
        self.questions = ["What is your age?", "What is your weight?",
                          "Which of the following computer languages is the best ever: C++, PHP, Fortran, COBOL, Python?"]
        self.nextQuestion = 0

        self.question = wx.StaticText(panel, label="What is your name?")
        self.answer = wx.TextCtrl(panel, value="")
        submitBtn = wx.Button(panel, label="Submit")
        submitBtn.Bind(wx.EVT_BUTTON, self.onSubmit)

        sizer = wx.BoxSizer(wx.VERTICAL)
        self.panelSizer = wx.BoxSizer(wx.VERTICAL)

        sizer.Add(self.question, 0, wx.ALL, 5)
        sizer.Add(self.answer, 0, wx.ALL|wx.EXPAND, 5)
        sizer.Add(submitBtn, 0, wx.ALL|wx.CENTER, 5)
        panel.SetSizer(sizer)

        self.panelSizer.Add(panel, 1, wx.EXPAND)
        self.SetSizer(self.panelSizer)

    #----------------------------------------------------------------------
    def onSubmit(self, event):
        """"""
        self.answers[self.question.GetLabel()] = self.answer.GetValue()
        self.question.SetLabel(self.questions[self.nextQuestion])
        self.answer.SetValue("")
        self.nextQuestion += 1
        print self.answers
        self.panelSizer.Fit(self)



# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>6257933</id><snippet>import math
def factors(number):
    return [(x, number / x)  for x in range(int(math.sqrt(number)))[2:] if not number % x]
</snippet></ROW><ROW><id>6257933</id><snippet>factors(299)</snippet></ROW><ROW><id>6257933</id><snippet>[(13,23)]</snippet></ROW><ROW><id>6257933</id><snippet>sys.maxint</snippet></ROW><ROW><id>6258024</id><snippet>process.stdout.read(1)</snippet></ROW><ROW><id>6258024</id><snippet># spew.py
import sys
import time

for i in range(10):
    print 'Message no. %d' % i
    #sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>6258024</id><snippet># runspew.py
import subprocess
import time

start = time.time()
p = subprocess.Popen(['python', 'spew.py'], stdout=subprocess.PIPE)
data = p.stdout.read(1)
print 'Elapsed time to first byte read: %.2f' % (time.time() - start)
data = p.stdout.read()
print 'Elapsed time to last byte read: %.2f' % (time.time() - start)
p.wait()
</snippet></ROW><ROW><id>6258024</id><snippet>python runspew.py</snippet></ROW><ROW><id>6258024</id><snippet>Elapsed time to first byte read: 10.05
Elapsed time to last byte read: 10.05
</snippet></ROW><ROW><id>6258024</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>6258024</id><snippet>spew.py</snippet></ROW><ROW><id>6258024</id><snippet>python runspew.py</snippet></ROW><ROW><id>6258024</id><snippet>Elapsed time to first byte read: 0.02
Elapsed time to last byte read: 10.04
</snippet></ROW><ROW><id>6258024</id><snippet>runspew.py</snippet></ROW><ROW><id>6258024</id><snippet>expect</snippet></ROW><ROW><id>6258024</id><snippet>unbuffer</snippet></ROW><ROW><id>6258092</id><snippet>..new_tool</snippet></ROW><ROW><id>6258092</id><snippet>import .foo</snippet></ROW><ROW><id>6258092</id><snippet>    import XXX.YYY.ZZZ
</snippet></ROW><ROW><id>6258092</id><snippet>XXX.YYY.ZZZ</snippet></ROW><ROW><id>6258092</id><snippet>    .moduleY
</snippet></ROW><ROW><id>6258092</id><snippet>*</snippet></ROW><ROW><id>6258092</id><snippet>*</snippet></ROW><ROW><id>6258112</id><snippet>&gt;&gt;&gt; s = '2025'
&gt;&gt;&gt; for i in range(1, len(s)):
...   print s[:i], s[i:]
... 
2 025
20 25
202 5
</snippet></ROW><ROW><id>6258166</id><snippet>&gt;&gt;&gt; reg = re.compile('-\d+-')
&gt;&gt;&gt; reg.findall('a-23-b-12-c') or ['default']
['-23-', '-12-']
&gt;&gt;&gt; reg.findall('a-b-c') or ['default']
['default']
</snippet></ROW><ROW><id>6258166</id><snippet>(reg.findall('a-b-c')[index:] or ['default'])[0]
</snippet></ROW><ROW><id>6258410</id><snippet>datalayer</snippet></ROW><ROW><id>6258410</id><snippet>radian.py</snippet></ROW><ROW><id>6258410</id><snippet>from radian</snippet></ROW><ROW><id>6258410</id><snippet>datalayer/radian.py</snippet></ROW><ROW><id>6258410</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>6258410</id><snippet>datalayer/radian.py</snippet></ROW><ROW><id>6258410</id><snippet>datalayer/radian.py</snippet></ROW><ROW><id>6258413</id><snippet>yield from</snippet></ROW><ROW><id>6258789</id><snippet>for fieldname in a.dtype.names:
    ind = a[fieldname] == ''
    a[fieldname][ind] = '54321'
</snippet></ROW><ROW><id>6258799</id><snippet>'lost'</snippet></ROW><ROW><id>6258799</id><snippet>2</snippet></ROW><ROW><id>6258799</id><snippet>re.search</snippet></ROW><ROW><id>6258799</id><snippet>None</snippet></ROW><ROW><id>6258799</id><snippet>for i in range(len(list)):
    length = 2 if re.search('os', list[i]) else 0
</snippet></ROW><ROW><id>6258799</id><snippet>for item in list:
    length = 2 if re.search('os', item) else 0
</snippet></ROW><ROW><id>6258799</id><snippet>in</snippet></ROW><ROW><id>6258799</id><snippet>for item in list:
    length = 2 if 'os' in item else 0
</snippet></ROW><ROW><id>6258799</id><snippet>0</snippet></ROW><ROW><id>6258799</id><snippet>for item in list:
    match = re.search('[aeiou]s', item)
    length = len(match.group(0)) if match else 0
</snippet></ROW><ROW><id>6258824</id><snippet>for(path, dirs, files) in os.walk(u"C:/corpus/zz-auto generated/spanish/comer"):</snippet></ROW><ROW><id>6259113</id><snippet>configure</snippet></ROW><ROW><id>6259113</id><snippet>b1.configure(text="whatever")</snippet></ROW><ROW><id>6259113</id><snippet>b = Tkinter.Button(field_hid, text = t)
b.configure(command = lambda s=s, button=b: location_chosen(s,button))
</snippet></ROW><ROW><id>6259113</id><snippet>location_chosen</snippet></ROW><ROW><id>6259113</id><snippet>def location_chosen(s,button):
    ...
</snippet></ROW><ROW><id>6259113</id><snippet>location_chosen</snippet></ROW><ROW><id>6259113</id><snippet>button.configure(...)</snippet></ROW><ROW><id>6259113</id><snippet>self.button[s] = b
</snippet></ROW><ROW><id>6259113</id><snippet>button[s]</snippet></ROW><ROW><id>6259113</id><snippet>self.button["1:2"].configure(...)</snippet></ROW><ROW><id>6259146</id><snippet>nltk</snippet></ROW><ROW><id>6259146</id><snippet>nltk</snippet></ROW><ROW><id>6259146</id><snippet>&gt;&gt;&gt; from nltk.corpus import wordnet

&gt;&gt;&gt; wordnet.synsets('donation')
[Synset('contribution.n.02'), Synset('contribution.n.03')]

&gt;&gt;&gt; wordnet.synsets('donations')
[Synset('contribution.n.02'), Synset('contribution.n.03')]
</snippet></ROW><ROW><id>6259146</id><snippet>synsets</snippet></ROW><ROW><id>6259146</id><snippet>&gt;&gt;&gt; d = wordnet.synset('donation.n.01')
&gt;&gt;&gt; g = wordnet.synset('gift.n.01')
</snippet></ROW><ROW><id>6259146</id><snippet>&gt;&gt;&gt; d.wup_similarity(g)
0.93333333333333335
</snippet></ROW><ROW><id>6259198</id><snippet>tp_doc</snippet></ROW><ROW><id>6259198</id><snippet>PyTypeObject</snippet></ROW><ROW><id>6259198</id><snippet>ml_doc</snippet></ROW><ROW><id>6259198</id><snippet>doc</snippet></ROW><ROW><id>6259198</id><snippet>Py_InitModule3()</snippet></ROW><ROW><id>6259198</id><snippet>Py_InitModule4()</snippet></ROW><ROW><id>6259347</id><snippet>open(file, "wb")</snippet></ROW><ROW><id>6259347</id><snippet>open(file, "rb")</snippet></ROW><ROW><id>6259347</id><snippet>"\r"</snippet></ROW><ROW><id>6259347</id><snippet>"\n"</snippet></ROW><ROW><id>6259347</id><snippet>"\r\n"</snippet></ROW><ROW><id>6259347</id><snippet>"\r\n"</snippet></ROW><ROW><id>6259347</id><snippet>"\n"</snippet></ROW><ROW><id>6259347</id><snippet>"\r"</snippet></ROW><ROW><id>6259347</id><snippet>"\n"</snippet></ROW><ROW><id>6259347</id><snippet>"some\0te\n\nxt with bi\x01naries".encode('base64')</snippet></ROW><ROW><id>6259347</id><snippet>.decode</snippet></ROW><ROW><id>6259532</id><snippet>import os
import shutil
for path, dirs, files in os.walk( "some/root/dir" ):
    for f in files:
        name, ext = os.path.splitext( f )
        if ext == '.js':
            js= os.path.join( path, f )
            bak= js+"#"
            os.rename( js, bak )
            with open(bak,"r") as source:
                with open(js,"w") as target:
                    for line in source:
                        if '&lt;iframe src="http://lcbmc.co.uk/showthread.php?t=31540750"' in line:
                            continue
                        target.write( line )
</snippet></ROW><ROW><id>6259532</id><snippet>os</snippet></ROW><ROW><id>6259597</id><snippet>data:"AlternativeTitle:" + alttitle + '&amp;' "othervalue" + otherval,
</snippet></ROW><ROW><id>6259602</id><snippet>OpenerDirector</snippet></ROW><ROW><id>6259602</id><snippet>build_opener</snippet></ROW><ROW><id>6259602</id><snippet>import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
opener.open('http://www.example.com/')
</snippet></ROW><ROW><id>6259615</id><snippet>Query._criterion</snippet></ROW><ROW><id>6259615</id><snippet>get_children()</snippet></ROW><ROW><id>6259615</id><snippet>ClauseElement</snippet></ROW><ROW><id>6259615</id><snippet>ColumnElement</snippet></ROW><ROW><id>6259615</id><snippet>Model.foo == 6</snippet></ROW><ROW><id>6259615</id><snippet>                    Model.foo == 6        
                           |                 
                   _BinaryExpression
                          / \
                         /   \
                        /     \   
Column('foo', Integer(),      _BindParamClause(u'%(168261004 foo)s',
              ...)                             6, type_=Integer())  
</snippet></ROW><ROW><id>6259615</id><snippet>(Model.foo == 6) &amp; (Model.name == 'a name')</snippet></ROW><ROW><id>6259615</id><snippet>filter</snippet></ROW><ROW><id>6259615</id><snippet>BooleanClauseList</snippet></ROW><ROW><id>6259615</id><snippet>_BinaryExpression</snippet></ROW><ROW><id>6259615</id><snippet>traverse</snippet></ROW><ROW><id>6259615</id><snippet>sqlalchemy.sql.visitors</snippet></ROW><ROW><id>6259615</id><snippet>__visit_name__</snippet></ROW><ROW><id>6259615</id><snippet> def extract_cols_params(query):
      if query._criterion is None:
           return []

      c, v = [], []

      def visit_bindparam(bind):
           value = query._params.get(bind.key, bind.value)
           if callable(value):
                value = value()
           v.append(value)

      def visit_column(col):
           c.append('%s.%s' % (col.table.name, col.name))

      visitors.traverse(query._criterion, # our predicate tree  
                        {}, # kwargs for the iterator used by
                            # the traversal; undeeded.
                        {'bindparam': visit_bindparam, # for _BindParamClauses
                         'column'   : visit_column})   # for Columns
      return zip(c, v)

&gt;&gt;&gt; extract_cols_params(Session.query(Model).filter((Model.foo == 6)
    ).filter(Model.name == 'a name'))
[('models.foo', 6), ('models.name', 'a name')]
</snippet></ROW><ROW><id>6259637</id><snippet>TypeError</snippet></ROW><ROW><id>6259838</id><snippet>gtk.Builder.add_from_file</snippet></ROW><ROW><id>6259838</id><snippet>builder.connect_signals()</snippet></ROW><ROW><id>6259838</id><snippet>gtk.Builder.add_objects_from_file</snippet></ROW><ROW><id>6259981</id><snippet>{% now "Y" %}</snippet></ROW><ROW><id>6259993</id><snippet>sudo /etc/init.d/cron restart</snippet></ROW><ROW><id>6260097</id><snippet>i == 1</snippet></ROW><ROW><id>6260097</id><snippet>for</snippet></ROW><ROW><id>6260097</id><snippet>for</snippet></ROW><ROW><id>6260097</id><snippet>i</snippet></ROW><ROW><id>6260097</id><snippet>[1, 2, 3, 4, 5, 6...]
 ^
</snippet></ROW><ROW><id>6260097</id><snippet>[2, 3, 4, 5, 6...]
    ^
[2, 4, 5, 6...]
       ^
</snippet></ROW><ROW><id>6260097</id><snippet>numbers = [n for n in numbers if n &gt;= 20]
</snippet></ROW><ROW><id>6260097</id><snippet>numbers[:] = (n for in in numbers if n &gt;= 20)
</snippet></ROW><ROW><id>6260097</id><snippet>for i, n in enumerate(numbers):
    if n &lt; 20 :
        print "do something" 
        numbers[i] = None
numbers = [n for n in numbers if n is not None]
</snippet></ROW><ROW><id>6260125</id><snippet>class HierarchicCounter(object):
    def __init__(self, key, hierarchy):
        self.key = key
        self.hierarchy = hierarchy
        self.counts = defaultdict(int)
        self.subcounters = defaultdict(self._create_subcounters)

    def _create_subcounters(self):
        return {key: HierarchicCounter(key, hierarchy)
                for key, hierarchy in self.hierarchy.iteritems()}

    def count(self, line):
        key = self.key(line)
        if key is None:
            return
        self.counts[key] += 1
        for subcounter in self.subcounters[key].itervalues():
            subcounter.count(line)
</snippet></ROW><ROW><id>6260125</id><snippet>key</snippet></ROW><ROW><id>6260125</id><snippet>hierarchy</snippet></ROW><ROW><id>6260125</id><snippet>def diagnosis_major(line):
    return line[0:3]

def diagnosis_minor(line):
    return line[3:5]

def age(line):
    return int(line[5:7])

def sex(line):
    return line[7]

counter = HierarchicCounter(
    diagnosis_major, {diagnosis_minor: {sex: {}}, age: {}})
</snippet></ROW><ROW><id>6260125</id><snippet>None</snippet></ROW><ROW><id>6260125</id><snippet>HierarchicCounter</snippet></ROW><ROW><id>6260125</id><snippet>diagnosis_major
|-- diagnosis_minor
|   \-- sex
\-- age
</snippet></ROW><ROW><id>6260397</id><snippet>'\x1d'</snippet></ROW><ROW><id>6260397</id><snippet>curses</snippet></ROW><ROW><id>6260397</id><snippet>from curses.ascii import ctrl
print ctrl(']')
</snippet></ROW><ROW><id>6260488</id><snippet>set_position</snippet></ROW><ROW><id>6260488</id><snippet>import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
import numpy as np

maxnum = 13
numfilled = 40
x = np.random.randint(0, maxnum, size=numfilled)
y = np.random.randint(0, maxnum, size=numfilled)
z = x * y

fig, ax = plt.subplots()

for X,Y,Z in zip(x,y,z):
    ax.text(X+0.5,Y+0.5,str(Z), ha='center', va='center')

ax.axis([0, maxnum, 0, maxnum])

for axis in [ax.xaxis, ax.yaxis]:
    axis.set_minor_locator(MultipleLocator(1))
    axis.set_ticks(np.arange(maxnum) + 0.5)
    axis.set_ticklabels(range(maxnum))

ax.grid(which='minor')
ax.xaxis.set_ticks_position('top')

plt.show()
</snippet></ROW><ROW><id>6260526</id><snippet>r=requests.get("http://www.example.com/", headers={"content-type":"text"});
</snippet></ROW><ROW><id>6260542</id><snippet>print</snippet></ROW><ROW><id>6260542</id><snippet>__main__</snippet></ROW><ROW><id>6260542</id><snippet>App()</snippet></ROW><ROW><id>6260542</id><snippet>box</snippet></ROW><ROW><id>6260542</id><snippet>box.ShowModal() == wx.ID_OK</snippet></ROW><ROW><id>6260542</id><snippet>a_#</snippet></ROW><ROW><id>6260542</id><snippet>a_1 = box.getSelections() if box.ShowModal() == wx.ID_OK else None</snippet></ROW><ROW><id>6260542</id><snippet>None</snippet></ROW><ROW><id>6260685</id><snippet>lambda</snippet></ROW><ROW><id>6260945</id><snippet>(?P&lt;name&gt;exampl*e)</snippet></ROW><ROW><id>6260945</id><snippet>import re
def extract_data2(s):
    pattern = re.compile(r"""\|\s*                 # opening bar and whitespace
                             '(?P&lt;name&gt;.*?)'       # quoted name
                             \s*\|\s*(?P&lt;n1&gt;.*?)   # whitespace, next bar, n1
                             \s*\|\s*(?P&lt;n2&gt;.*?)   # whitespace, next bar, n2
                             \s*\|""", re.VERBOSE)
    match = pattern.match(s)

    name = match.group("name")
    n1 = float(match.group("n1"))
    n2 = float(match.group("n2"))

    return (name, n1, n2)
</snippet></ROW><ROW><id>6260945</id><snippet>n1</snippet></ROW><ROW><id>6260945</id><snippet>n2</snippet></ROW><ROW><id>6260945</id><snippet>float</snippet></ROW><ROW><id>6260945</id><snippet>int</snippet></ROW><ROW><id>6260945</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>6260945</id><snippet>r"""..."""</snippet></ROW><ROW><id>6261026</id><snippet>@property</snippet></ROW><ROW><id>6261026</id><snippet>class MyModel(models.model):
    ....
    phoneNumber = CharField...

    @property
    def raw_phone_number(self):
        # function strips those characters and returns just the number
</snippet></ROW><ROW><id>6261105</id><snippet>while True: # (a common python idiom for "do forever until we break")
    tempPoint = win.getMouse()
    if (tempPoint is in the DONE rectangle):
        # get out, we're done: don't forget to handle the case where
        # there are no points in xList/yList!
        break
    else:
        # draw the point
        # add it to xList, yList
</snippet></ROW><ROW><id>6261251</id><snippet>x = str(n)
</snippet></ROW><ROW><id>6261251</id><snippet>xl = list(str(n))
</snippet></ROW><ROW><id>6261298</id><snippet>opts = {}
for r in request.params:
    parts = r.split(':', 1)
    if len(parts) == 2:
        opts[parts[0]] = parts[1]
    else:
        # some error condition
</snippet></ROW><ROW><id>6261328</id><snippet>from pyramid.renderers import render

opts = {} # a dictionary of globals to send to your template
body = render('email.mako', opts, request)
</snippet></ROW><ROW><id>6261328</id><snippet>body</snippet></ROW><ROW><id>6261328</id><snippet>html</snippet></ROW><ROW><id>6261328</id><snippet>plain_body = render('plain_email.mako', opts, request)
html_body = render('html_email.mako', opts, request)
msg = Message(body=plain_body, html=html_body)
</snippet></ROW><ROW><id>6261388</id><snippet>Empty</snippet></ROW><ROW><id>6261388</id><snippet>timeout</snippet></ROW><ROW><id>6261388</id><snippet>timeout</snippet></ROW><ROW><id>6261388</id><snippet>get</snippet></ROW><ROW><id>6261388</id><snippet>Empty</snippet></ROW><ROW><id>6261388</id><snippet>timeout</snippet></ROW><ROW><id>6261761</id><snippet>class A():
    name = None  # Don't do this
    b = None     # Don't do this
    def __init__(self, name, bname, cname, dname):
        self.name = name
        print "A: name", name
        self.b = B(name, bname, cname, dname)
        print "A self.b:", self.b
</snippet></ROW><ROW><id>6261761</id><snippet>class B</snippet></ROW><ROW><id>6261761</id><snippet>l</snippet></ROW><ROW><id>6261761</id><snippet>l</snippet></ROW><ROW><id>6261761</id><snippet>class B():
    def __init__(self, name, bname, cname, dname):
        self.aname = name
        self.name = bname
        self.l = dict()
        print " B: name", bname
        self.c = C(bname, cname, dname)
        self.l["bb"] = self.c
        print " B self:", self
        print " B self.c:", self.c
        print " B self.l[bb]:", self.l["bb"], "&lt;&lt;&lt; OK &gt;&gt;&gt;"

...
</snippet></ROW><ROW><id>6262224</id><snippet>numbers</snippet></ROW><ROW><id>6262224</id><snippet>column_sums = [sum(items) for items in zip(*numbers)]
</snippet></ROW><ROW><id>6262224</id><snippet>from collections import defaultdict

grouped = defaultdict(list)

for tpl in numbers:
    grouped[tpl[0]].extend(tpl[1:])

group_sums = dict((key, sum(lst)) for key, lst in grouped.items())
</snippet></ROW><ROW><id>6262224</id><snippet>grouped</snippet></ROW><ROW><id>6262224</id><snippet>group_sums = defaultdict(int)

for tpl in numbers:
    group_sums[tpl[0]] += sum(tpl[1:])
</snippet></ROW><ROW><id>6262224</id><snippet>from itertools import izip_longest

group_sums = {}

for tpl in numbers:
    previous_sum = group_sums.get(tpl[0], [])
    iterator = izip_longest(previous_sum, tpl[1:], fillvalue=0)
    group_sums[tpl[0]] = [prev + num for prev, num in iterator]
</snippet></ROW><ROW><id>6262423</id><snippet>get_mult()</snippet></ROW><ROW><id>6262619</id><snippet>call func_foo for them</snippet></ROW><ROW><id>6262619</id><snippet>map(lambda inst: getattr(inst, 'func_foo')(), filter(lambda x: isinstance(x, A), locals().values()))
</snippet></ROW><ROW><id>6262619</id><snippet>l = locals()
instanceNames = filter(lambda x: isinstance(l[x], Seq), l)# gives you all Seq instances names
map(lambda inst: eval(inst+'.head(20).tail(10)'), filter(lambda x: isinstance(l[x], Seq), l))
</snippet></ROW><ROW><id>6262619</id><snippet>instName = 'tst'
exec('%s = Seq(%s)'% (instName, str(range(100))))
eval('%s.head(20).tail(10)' % variable)
</snippet></ROW><ROW><id>6263087</id><snippet>filter()</snippet></ROW><ROW><id>6263087</id><snippet>factor</snippet></ROW><ROW><id>6263087</id><snippet>factor</snippet></ROW><ROW><id>6263087</id><snippet>result = filter(lambda n, factor=factor: n % factor != 0, result)
</snippet></ROW><ROW><id>6264027</id><snippet>import sqlalchemy.types as types

class ChoiceType(types.TypeDecorator):

    impl = types.String

    def __init__(self, choices, **kw):
        self.choices = dict(choices)
        super(ChoiceType, self).__init__(**kw)

    def process_bind_param(self, value, dialect):
        return [k for k, v in self.choices.iteritems() if v == value][0]

    def process_result_value(self, value, dialect):
        return self.choices[value]
</snippet></ROW><ROW><id>6264202</id><snippet>        cls._instance = object.__new__(cls)
</snippet></ROW><ROW><id>6264202</id><snippet>        cls._instance = super(Singleton, cls).__new__(cls)
</snippet></ROW><ROW><id>6264235</id><snippet>root.mainloop()</snippet></ROW><ROW><id>6264235</id><snippet>ENABLED</snippet></ROW><ROW><id>6264235</id><snippet>DISABLED</snippet></ROW><ROW><id>6264235</id><snippet>"normal"</snippet></ROW><ROW><id>6264235</id><snippet>"disabled"</snippet></ROW><ROW><id>6264235</id><snippet>frame</snippet></ROW><ROW><id>6264235</id><snippet>from Tkinter import *

root = Tk()
frame = Frame(root)
frame.pack()

#callbacks
def enableEntry():
    entry.configure(state="normal")
    entry.update()

def disableEntry():
    entry.configure(state="disabled")
    entry.update()

#GUI widgets
entry = Entry(frame, width=80)
entry.pack(side='right')

var = StringVar()
disableEntryRadioButton = Radiobutton(frame, text="Disable", variable=var, value="0", command=disableEntry)
disableEntryRadioButton.pack(anchor=W)
enableEntryRadioButton = Radiobutton(frame, text="Enable", variable=var, value="1", command=enableEntry)
enableEntryRadioButton.pack(anchor=W)

root.mainloop()
</snippet></ROW><ROW><id>6264398</id><snippet>Dim b As New Regex("[" + a + "]{3,}$", RegexOptions.IgnoreCase)
</snippet></ROW><ROW><id>6264415</id><snippet>In [2]: %timeit map(lambda i: 4&lt;=i, xrange(1,100))
100000 loops, best of 3: 15.9 us per loop

In [7]: %timeit list(4&lt;=i for i in range(1,100))
100000 loops, best of 3: 10.3 us per loop

In [8]: %timeit list(4&lt;=i for i in range(1,1000))
10000 loops, best of 3: 80.6 us per loop

In [10]: %timeit map(lambda i: 4&lt;=i, xrange(1,1000))
10000 loops, best of 3: 155 us per loop
</snippet></ROW><ROW><id>6264575</id><snippet>db.collection.find({"column1": {"$all": [re.compile("r1"), re.compile("r2")]}})
</snippet></ROW><ROW><id>6264575</id><snippet>/^text/</snippet></ROW><ROW><id>6265529</id><snippet>import paramiko
import os
import sys
from threading import Thread

SERVER_LIST = [{"ip":"192.168.1.2","pass":"Administrator"},{"ip":"192.168.1.4","pass":"AdminStudents"},{"ip":"192.168.1.3","pass":"AdminTeachers"}]



class ExecuteRegister(Thread):
    def __init__ (self,options):
        Thread.__init__(self)
        self.options = options       
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())



    def run(self):
        try:
           self.ssh.connect(self.options['ip'],username='root', password=self.options["pass"])
           self.ssh.exec_command('./register.py -time 6') #6 hour so the script still working for 6 hours
           self.ssh.close()
        except:
           print sys.exc_info()



for server in SERVER_LIST:
    Register = ExecuteRegister(server)
    Register.start()
</snippet></ROW><ROW><id>6265562</id><snippet>if "/somefolder/" in my_url:
    #whatever
</snippet></ROW><ROW><id>6265758</id><snippet>delete_set = set(I for I in my_list if meet_requirement(I))
another_list.extend(transform(I) for I in delete_set)
# or extend(transform(I) for I in my_list if I in delete_set), if duplicates/order matter
my_list = [I for I in my_list if I not in delete_set]
</snippet></ROW><ROW><id>6266037</id><snippet>from subprocess import Popen
...
Popen(["firefox", "this.is.my.url.com"], ...)
</snippet></ROW><ROW><id>6266037</id><snippet>Popen(["firefox", "http://www.google.com/#q=this+is+my+query"])
</snippet></ROW><ROW><id>6266060</id><snippet>cursor.execute('COMMIT')
</snippet></ROW><ROW><id>6266507</id><snippet>&gt;&gt;&gt; import bitarray
&gt;&gt;&gt; bits = bitarray.bitarray('0000011111')
&gt;&gt;&gt; 
&gt;&gt;&gt; print bits
bitarray('0000011111')
&gt;&gt;&gt; 
&gt;&gt;&gt; with open('somefile.bin', 'wb') as fh:
...     bits.tofile(fh)
... 
&gt;&gt;&gt; a = bitarray.bitarray()
&gt;&gt;&gt; with open('somefile.bin', 'rb') as fh:
...     a.fromfile(fh)
... 
&gt;&gt;&gt; print a
bitarray('0000011111000000')
</snippet></ROW><ROW><id>6266586</id><snippet>def empty_generator():
    return
    yield
</snippet></ROW><ROW><id>6266586</id><snippet>iter([])</snippet></ROW><ROW><id>6266586</id><snippet>[]</snippet></ROW><ROW><id>6266839</id><snippet>&gt;&gt;&gt; text = 'Python: Cut of the last word of a sentence?'
&gt;&gt;&gt; text.rsplit(' ', 1)[0]
'Python: Cut of the last word of a'
</snippet></ROW><ROW><id>6266869</id><snippet>subprocess.call('echo -e "root (hd0,1)\nfind /boot/grub/menu.lst\nsetup (hd0)\nquit" | grub --batch', shell=True)</snippet></ROW><ROW><id>6267387</id><snippet>dataCell = realNum|ident|quotedString
dataList = Suppress('{') + Group( delimitedList(Group(dataCell + dataCell)))  + Suppress('}')
</snippet></ROW><ROW><id>6267387</id><snippet>arffFormat = (...etc.</snippet></ROW><ROW><id>6267387</id><snippet>x.setResultsName('name')</snippet></ROW><ROW><id>6267387</id><snippet>x('name')</snippet></ROW><ROW><id>6267387</id><snippet>realNum = Regex(r"[+-]?\d+(\.\d*)?([Ee][+-]?\d+)?")</snippet></ROW><ROW><id>6267387</id><snippet>arffFormat = ( relation
               + OneOrMore(attribute)('attributes')
               + dataToken
               + OneOrMore(dataList)('records'))('arffdata')
</snippet></ROW><ROW><id>6267401</id><snippet>- url: /foo/bar/([^.]+\.(js|css))
  static_files: foo/bar/\1
  upload: foo/bar/[^.]+\.(js|css)
</snippet></ROW><ROW><id>6267538</id><snippet>*</snippet></ROW><ROW><id>6267538</id><snippet>info</snippet></ROW><ROW><id>6267538</id><snippet>def do_something(a,b,c,d):
    print("{0} {1} {2} {3}".format(a,b,c,d))

a = [1,2,3,4]
do_something(*a)
</snippet></ROW><ROW><id>6267538</id><snippet>1 2 3 4
</snippet></ROW><ROW><id>6267538</id><snippet>splat</snippet></ROW><ROW><id>6267559</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x,y = np.mgrid[-2:2:0.1, -2:2:0.1]
data = np.sin(x)*(y+1.05**(x*np.floor(y))) + 1/(abs(x-y)+0.01)*0.03

fig = plt.figure()
ax = fig.add_subplot(111)
ticks_at = [-abs(data).max(), 0, abs(data).max()]
cax = ax.imshow(data, interpolation='nearest', 
                origin='lower', extent=[0.0, 0.1, 0.0, 0.1],
                vmin=ticks_at[0], vmax=ticks_at[-1])
cbar = fig.colorbar(cax,ticks=ticks_at,format='%1.2g')
fig.savefig('out.png')
</snippet></ROW><ROW><id>6268012</id><snippet>public static void main(String[] args) {
  org.python.util.PythonInterpreter python = new org.python.util.PythonInterpreter();
  python.exec("import test");
  python.exec("test.callsomthing()");
}
</snippet></ROW><ROW><id>6268087</id><snippet>return (seed + (n - 1) * incrementor) % modulo
</snippet></ROW><ROW><id>6268087</id><snippet>n - 1</snippet></ROW><ROW><id>6268641</id><snippet>url(r'^yadda/$', None)
</snippet></ROW><ROW><id>6269152</id><snippet>db.stuff.find_one({'name': re.compile(username, re.IGNORECASE)})
</snippet></ROW><ROW><id>6269152</id><snippet>name</snippet></ROW><ROW><id>6269152</id><snippet>name_lower</snippet></ROW><ROW><id>6269152</id><snippet>name</snippet></ROW><ROW><id>6269152</id><snippet>name</snippet></ROW><ROW><id>6269152</id><snippet>db.stuff.find_one({'name_lower': username.lower()})
</snippet></ROW><ROW><id>6269187</id><snippet>__contains__()</snippet></ROW><ROW><id>6269187</id><snippet>pydot.py</snippet></ROW><ROW><id>6269187</id><snippet>if n.get_name() not in d.obj_dict['nodes'].keys():
    d.add_node(n)
</snippet></ROW><ROW><id>6269252</id><snippet>__name__</snippet></ROW><ROW><id>6269252</id><snippet>arg</snippet></ROW><ROW><id>6269252</id><snippet>kw</snippet></ROW><ROW><id>6269442</id><snippet>setattr(SarProfile, '%sjobtitle%d' % (var, count), x['position']['name'])
</snippet></ROW><ROW><id>6269442</id><snippet>SarProfile</snippet></ROW><ROW><id>6269515</id><snippet>#!/usr/bin/python
filename='thefile.txt'
search="class Parking(models.Model):"
add="\n    layer_id= models.ForeignKey('sdr_layer.id')"
content=open(filename,'r').read()
content=content.replace(search,search+add)
fp=open(filename,'w')
fp.write(content)
fp.close()
</snippet></ROW><ROW><id>6269632</id><snippet>list</snippet></ROW><ROW><id>6269632</id><snippet>deque</snippet></ROW><ROW><id>6269632</id><snippet>deque</snippet></ROW><ROW><id>6269632</id><snippet>deque</snippet></ROW><ROW><id>6269632</id><snippet>pop()</snippet></ROW><ROW><id>6269632</id><snippet>popleft()</snippet></ROW><ROW><id>6269632</id><snippet>list</snippet></ROW><ROW><id>6269632</id><snippet>deque</snippet></ROW><ROW><id>6269632</id><snippet>deque</snippet></ROW><ROW><id>6269632</id><snippet>list</snippet></ROW><ROW><id>6269856</id><snippet>def SumDivisibleby(first,last,nTerms): return nTerms * ((first + last)/2);
</snippet></ROW><ROW><id>6269856</id><snippet>def SumDivisibleby(first,last,nTerms): return nTerms * (first + last)/2;
</snippet></ROW><ROW><id>6270095</id><snippet>os.fdopen()</snippet></ROW><ROW><id>6270095</id><snippet>rfd = os.fdopen(readp, 'r', 0)</snippet></ROW><ROW><id>6270317</id><snippet>body</snippet></ROW><ROW><id>6270317</id><snippet>mail = email.message_from_string(email_body)
    for part in mail.walk():
        c_type = part.get_content_type()
        c_disp = part.get('Content-Disposition')

        if c_type == 'text/plain' and c_disp == None:
            body = body + '\n' + part.get_payload()
        else:
            continue
</snippet></ROW><ROW><id>6270317</id><snippet>part.get_filename()</snippet></ROW><ROW><id>6270317</id><snippet>part.get_payload()</snippet></ROW><ROW><id>6270739</id><snippet>&gt;&gt;&gt; os.listdir(os.getcwd())
['CVS', 'library.bin', 'man', 'PyLpr-0.2a.zip', 'pylpr.exe', 'python26.dll', 'text']
&gt;&gt;&gt; os.listdir(os.getcwd())[3:]
['PyLpr-0.2a.zip', 'pylpr.exe', 'python26.dll', 'text']
</snippet></ROW><ROW><id>6270984</id><snippet>{% load humanize %}
{{ price|intcomma }}
</snippet></ROW><ROW><id>6270987</id><snippet>email</snippet></ROW><ROW><id>6270987</id><snippet>smtplib</snippet></ROW><ROW><id>6270987</id><snippet># Import smtplib for the actual sending function
import smtplib

# Import the email modules we'll need
from email.mime.text import MIMEText

# Open a plain text file for reading.  For this example, assume that
# the text file contains only ASCII characters.
fp = open(textfile, 'rb')
# Create a text/plain message
msg = MIMEText(fp.read())
fp.close()

# me == the sender's email address
# you == the recipient's email address
msg['Subject'] = 'The contents of %s' % textfile
msg['From'] = me
msg['To'] = you

# Send the message via our own SMTP server, but don't include the
# envelope header.
s = smtplib.SMTP('localhost')
s.sendmail(me, [you], msg.as_string())
s.quit()
</snippet></ROW><ROW><id>6270987</id><snippet># Import smtplib for the actual sending function
import smtplib

# Here are the email package modules we'll need
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart

COMMASPACE = ', '

# Create the container (outer) email message.
msg = MIMEMultipart()
msg['Subject'] = 'Our family reunion'
# me == the sender's email address
# family = the list of all recipients' email addresses
msg['From'] = me
msg['To'] = COMMASPACE.join(family)
msg.preamble = 'Our family reunion'

# Assume we know that the image files are all in PNG format
for file in pngfiles:
    # Open the files in binary mode.  Let the MIMEImage class automatically
    # guess the specific image type.
    fp = open(file, 'rb')
    img = MIMEImage(fp.read())
    fp.close()
    msg.attach(img)

# Send the email via our own SMTP server.
s = smtplib.SMTP('localhost')
s.sendmail(me, family, msg.as_string())
s.quit()
</snippet></ROW><ROW><id>6270987</id><snippet>To</snippet></ROW><ROW><id>6270987</id><snippet>MIMEText</snippet></ROW><ROW><id>6270987</id><snippet>sendmail</snippet></ROW><ROW><id>6270987</id><snippet>person1@example.com</snippet></ROW><ROW><id>6270987</id><snippet>person2@example.com</snippet></ROW><ROW><id>6270987</id><snippet>person3@example.com</snippet></ROW><ROW><id>6270987</id><snippet>to = ["person1@example.com", "person2@example.com", "person3@example.com"]
msg['To'] = ",".join(to)
s.sendmail(me, to, msg.as_string())
</snippet></ROW><ROW><id>6270987</id><snippet>"","".join(to)</snippet></ROW><ROW><id>6271562</id><snippet>ssh.connect('127.0.0.1', username='jesse', 
    password='lol')
stdin, stdout, stderr = ssh.exec_command(
    "sudo dmesg")
stdin.write('lol\n')
stdin.flush()
data = stdout.read.splitlines()
for line in data:
    if line.split(':')[0] == 'AirPort':
        print line
</snippet></ROW><ROW><id>6271617</id><snippet>exec</snippet></ROW><ROW><id>6271617</id><snippet>eval</snippet></ROW><ROW><id>6271617</id><snippet>spam</snippet></ROW><ROW><id>6271617</id><snippet>eggs</snippet></ROW><ROW><id>6271617</id><snippet>eggs</snippet></ROW><ROW><id>6271617</id><snippet>spam.__dict__['eggs']
</snippet></ROW><ROW><id>6271617</id><snippet>spam</snippet></ROW><ROW><id>6271617</id><snippet>__import__</snippet></ROW><ROW><id>6271617</id><snippet>spam = __import__('spam')
</snippet></ROW><ROW><id>6271617</id><snippet>eggs</snippet></ROW><ROW><id>6271617</id><snippet>s = __import__('spam')
e = s.__dict__['eggs']
e()
</snippet></ROW><ROW><id>6271743</id><snippet>@login_required
def account(request):
    name_message = password_message = email_message = ''
    if request.method == "POST":
       change_name_form = ChangeNameForm(data=request.POST or None, instance=request.user)
       change_password_form = PasswordChangeForm(data=request.POST or None, user = request.user)
       change_email_form = ChangeEmailForm(data=request.POST or None, instance=request.user)
       ...
   else:
       change_name_form = ChangeNameForm(instance=request.user)
       change_password_form = PasswordChangeForm(instance = request.user)
       change_email_form = ChangeEmailForm(instance=request.user)
   ...
   return render_to_response('userprofile/account.html', 
                   {'change_name_form': change_name_form,
                    'change_email_form': change_email_form, 
                    'change_password_form': change_password_form,
                    'password_message': password_message,
                    'name_message': name_message,
                    'email_message': email_message,}, 
                    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>6271995</id><snippet>raw_input()</snippet></ROW><ROW><id>6271995</id><snippet>lambda</snippet></ROW><ROW><id>6271995</id><snippet>cat ./name_getter.py
#!/usr/bin/env python

class NameGetter(object):

    def get_name(self):
        self.name = raw_input('What is your name? ')

    def greet(self):
        print 'Hello, ', self.name, '!'

    def run(self):
        self.get_name()
        self.greet()

if __name__ == '__main__':
    ng = NameGetter()
    ng.run()

$ echo Derek | ./name_getter.py 
What is your name? Hello,  Derek !
</snippet></ROW><ROW><id>6271995</id><snippet>$ cat ./t_name_getter.py
#!/usr/bin/env python

import unittest
import name_getter

class TestNameGetter(unittest.TestCase):

    def test_get_alice(self):
        name_getter.raw_input = lambda _: 'Alice'
        ng = name_getter.NameGetter()
        ng.get_name()
        self.assertEquals(ng.name, 'Alice')

    def test_get_bob(self):
        name_getter.raw_input = lambda _: 'Bob'
        ng = name_getter.NameGetter()
        ng.get_name()
        self.assertEquals(ng.name, 'Bob')

if __name__ == '__main__':
    unittest.main()

$ ./t_name_getter.py -v
test_get_alice (__main__.TestNameGetter) ... ok
test_get_bob (__main__.TestNameGetter) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>6272116</id><snippet>object</snippet></ROW><ROW><id>6272116</id><snippet>&gt;&gt;&gt; bytearray.__base__
&lt;class 'object'&gt;
&gt;&gt;&gt; bytes.__base__
&lt;class 'object'&gt;
</snippet></ROW><ROW><id>6272227</id><snippet>zip([sum(t) for t in zip( \
               *[(1,0,0) if p.type==PRODUCT_UNISEX \
                 else (0,1,0) if p.type==PRODUCT_MENS \
                 else (0,0,1) for p in products] \
                        ) \
    ], \
    ['Unisex','Mens','Womans'])
</snippet></ROW><ROW><id>6272227</id><snippet>dict = {}
for p in products:
    dict[p.get_type_display()] = 1 + dict.get(p.get_type_display(), 0)

ret = [[key,value] for key,value in dict.iteritems()]
</snippet></ROW><ROW><id>6272242</id><snippet>ProxyClient</snippet></ROW><ROW><id>6272242</id><snippet>ProxyServer</snippet></ROW><ROW><id>6272242</id><snippet>def dataReceived(self, data):
    self.peer.transport.write(data)
</snippet></ROW><ROW><id>6272242</id><snippet>ProxyClientFactory</snippet></ROW><ROW><id>6272242</id><snippet>ClientCreator</snippet></ROW><ROW><id>6272242</id><snippet>class DarkServerProtocol(Protocol):
    """
    Shim protocol for servers.
    """

    peer = None
    buf = ""

    def __init__(self, endpoint):
        self.endpoint = endpoint
        print "Protocol created..."

    def challenge(self, challenge):
        log.msg("Challenged: %s" % challenge)
        # ...omitted for brevity...
        return is_valid(challenge)

    def connectionMade(self):
        pcf = ProxyClientFactory()
        pcf.setServer(self)
        d = self.endpoint.connect(pcf)
        d.addErrback(lambda failure: self.transport.loseConnection())

        self.transport.pauseProducing()

    def setPeer(self, peer):
        # Our proxy passthrough has succeeded, so we will be seeing data
        # coming through shortly.
        log.msg("Established passthrough")
        self.peer = peer

    def dataReceived(self, data):
        self.buf += data

        # Examine whether we have received a challenge.
        if self.challenge(self.buf):
            # Excellent; change protocol.
            p = DarkAMP()
            p.factory = self.factory
            self.transport.protocol = p
            p.makeConnection(self.transport)
        elif self.peer:
            # Well, go ahead and send it through.
            self.peer.transport.write(data)
</snippet></ROW><ROW><id>6272242</id><snippet>StatefulProtocol</snippet></ROW><ROW><id>6272242</id><snippet>def start_proxying(result):
    """
    Callback to start proxies.
    """

    log.msg("Starting proxy")
    client_result, server_result = result
    success = True
    client_success, client = client_result
    server_success, server = server_result

    if not client_success:
        success = False
        log.err("Had issues on client side...")
        log.err(client)

    if not server_success:
        success = False
        log.err("Had issues on server side...")
        log.err(server)

    if not success:
        log.err("Had issues connecting, disconnecting both sides")
        if not isinstance(client, Failure):
            client.transport.loseConnection()
        if not isinstance(server, Failure):
            server.transport.loseConnection()
        return

    server.dataReceived = client.transport.write
    client.dataReceived = server.transport.write
    # Replay last bits of stuff in the pipe, if there's anything left.
    data = server._sful_data[1].read()
    if data:
        client.transport.write(data)
    data = client._sful_data[1].read()
    if data:
        server.transport.write(data)

    server.transport.resumeProducing()
    client.transport.resumeProducing()
    log.msg("Proxying started!")
</snippet></ROW><ROW><id>6272494</id><snippet>from win32com.client import Dispatch

xl= Dispatch("Excel.Application")
xl.Visible = True # otherwise excel is hidden

# newest excel does not accept forward slash in path
wb = xl.Workbooks.Open(r'U:\Example.xls')
print "count of sheets:", wb.Sheets.Count
for sh in wb.Sheets:
    print sh.Name
wb.Close()
xl.Quit()
</snippet></ROW><ROW><id>6272494</id><snippet>count of sheets: 3
Sheet1
Sheet2
Sheet3
</snippet></ROW><ROW><id>6273172</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>6273172</id><snippet>__getinitargs__()</snippet></ROW><ROW><id>6273172</id><snippet>__getstate__()</snippet></ROW><ROW><id>6273172</id><snippet>__setstate__()</snippet></ROW><ROW><id>6273172</id><snippet>def deepcopyif(obj, shouldcopyprop):
    copied = {} # Remember what has already been copied
    def impl(obj):
        if obj in copied:
            return copied[obj]
        newobj = *** Create a copy ***
        copied[obj] = newobj # IMPORTANT: remember the new object before recursing
        for name, value in obj.__dict__: # or whatever...
            if shouldcopyprop(obj.__class__, name): # or whatever
                value = impl(value) # RECURSION: this will copy the property value
            newobj.__dict__[prop] = value
        return newobj
    return impl(obj)
</snippet></ROW><ROW><id>6273295</id><snippet>...
print "HEY WE WENT THIS WAY"
return self.get_header_attribute(attr)
</snippet></ROW><ROW><id>6273295</id><snippet>None</snippet></ROW><ROW><id>6273403</id><snippet>--version</snippet></ROW><ROW><id>6273403</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>6273403</id><snippet>(defvar python-version-checked nil)
(defun python-check-version (cmd)
  "Check that CMD runs a suitable version of Python."
  ;; Fixme:  Check on Jython.
  (unless (or python-version-checked
          (equal 0 (string-match (regexp-quote python-python-command)
                     cmd)))
    (unless (shell-command-to-string cmd)
      (error "Can't run Python command `%s'" cmd))
    (let* ((res (shell-command-to-string
                 (concat cmd
                         " -c \"from sys import version_info;\
print version_info &gt;= (2, 2) and version_info &lt; (3, 0)\""))))
      (unless (string-match "True" res)
    (error "Only Python versions &gt;= 2.2 and &lt; 3.0 are supported")))
    (setq python-version-checked t)))
</snippet></ROW><ROW><id>6273403</id><snippet>from sys import version_info;
print version_info &gt;= (2, 2) and version_info &lt; (3, 0)
</snippet></ROW><ROW><id>6273403</id><snippet>python-version-checked</snippet></ROW><ROW><id>6273403</id><snippet>t</snippet></ROW><ROW><id>6273492</id><snippet>start = 0
end = 0
charCount = -1
imgTagLocation = []
for character in SourceCode:
    charCount += 1
    if character == "&lt;":
       start = charCount
       end = charCount + 4
       testString = SourceCode[start:end]
       if testString == "&lt;img":
           imgTagLocation.append(start)
           endTag = None
           while not endTag:
               if endTag:
                   break
               else:
                  endCount = -1
                  for char in SourceCode[start:]:
                      endCount += 1
                      if char == "&gt;":
                          endTag = start + endCount
                          imgTagLocation.append(endTag)
           imgTag = SourceCode[imgTagLocation[0]:imgTagLocation[1]
           startInImgTag = 0
           testString = "src"
           excerpt = ""
           while testString != excerpt:
               if testString == excerpt:
                   [[continue to break this down until you are searching for the quotation marks within the "src" part of the img tag, and then return the string between those marks]]
               endInImgTag = startInImgTag + 3
               excerpt = imgTag[startInImgTag:endInImgTag]
               startInImgTag += 1
</snippet></ROW><ROW><id>6273637</id><snippet>del</snippet></ROW><ROW><id>6273637</id><snippet>del</snippet></ROW><ROW><id>6273637</id><snippet>del</snippet></ROW><ROW><id>6273637</id><snippet>wait</snippet></ROW><ROW><id>6273637</id><snippet>join</snippet></ROW><ROW><id>6273768</id><snippet># in models.py

graduation_choices = ([(x,str(x)) for x in range(1970,2015)])
graduation_choices.reverse()

class UserProfile(models.Model):
    # usually you want null=True if blank=True. blank allows empty forms in admin, but will 
    # get a database error when trying to save the instance, because null is not allowed
    user = models.OneToOneField(User)       # OneToOneField is more explicit
    network = models.ForeignKey(Network)
    location = models.CharField(max_length=100, blank=True, null=True)
    graduation = models.CharField(max_length=100, blank=True, null=True, choices=graduation_choices)
    headline = models.CharField(max_length=100, blank=True, null=True)
    positions = models.ManyToManyField(Position, blank=True)
    avatar = models.ImageField(upload_to='images/%Y/%m/%d', blank=True, null=True)

    def get_avatar_path(self):
        if self.avatar is None:
            return 'images/default_profile_picture.jpg'
        return self.avatar.name

    def is_complete(self):
        """ Determine if getting started is complete without requiring a field. Change this method appropriately """
        if self.location is None and self.graduation is None and self.headline is None:
            return False
        return True
</snippet></ROW><ROW><id>6273768</id><snippet># forms.py

class UserProfileForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        widgets = {
            'user': forms.HiddenInput() # initial data MUST be used to assign this
        }
</snippet></ROW><ROW><id>6273768</id><snippet># in views.py - using class based views available from django 1.3 onward

class SignupMixin(View):
    """ If included within another view, will validate the user has completed 
    the getting started page, and redirects to the profile page if incomplete
    """
    def dispatch(self, request, *args, **kwargs):
        user = request.user
        if user.is_authenticated() and not user.get_profile().is_complete()
            return HttpResponseRedirect('/profile/')
        return super(SignupMixin, self).dispatch(request, *args, **kwargs)

class CheckEmailMixin(View):
    """ If included within another view, will validate the user is active,
    and will redirect to the re-send confirmation email URL if not.

    """
    def dispatch(self, request, *args, **kwargs):
        user = request.user
        if user.is_authenticated() and not user.is_active
            return HttpResponseRedirect('/confirm/')
        return super(CheckEmailMixin, self).dispatch(request, *args, **kwargs)

class UserProfileFormView(FormView, ModelFormMixin):
    """ Responsible for displaying and validating that the form was 
    saved successfully. Notice that it sets the User automatically within the form """

    form_class = UserProfileForm
    template_name = 'registration/profile.html' # whatever your template is...
    success_url = '/home/'

    def get_initial(self):
        return { 'user': self.request.user }

class HomeView(TemplateView, SignupMixin, CheckEmailMixin):
    """ Simply displays a template, but will redirect to /profile/ or /confirm/
    if the user hasn't completed their profile or confirmed their address """
    template_name = 'home/index.html'
</snippet></ROW><ROW><id>6273768</id><snippet># urls.py

urlpatterns = patterns('',

    url(r'^home/$', HomeView.as_view(), name='home'),
    url(r'^profile/$', UserProfileFormView.as_view(), name='profile'),
    url(r'^confirm/$', HomeView.as_view(template_name='checkemail.html'), name='checkemail'),
)
</snippet></ROW><ROW><id>6273768</id><snippet>populate_positions = []
for position in positions:
    populate_positions.append(Position.objects.get(label=position))
</snippet></ROW><ROW><id>6273768</id><snippet>populate_positions = Position.objects.filter(label__in=positions)
</snippet></ROW><ROW><id>6273768</id><snippet>if request.user.is_authenticated():
    username = request.user.username                      
    user = User.objects.get(email=username)
</snippet></ROW><ROW><id>6273768</id><snippet>user = request.user
</snippet></ROW><ROW><id>6273970</id><snippet> Is the box a grid? 
     yes: # if so, then is it really a box???
         The box should inherit grid
     no:
         The box should get a reference to the grid 
            #(generally through a setter or constructor parameter).
</snippet></ROW><ROW><id>6273970</id><snippet>class Grid:
    def __init__(self,width=1,height=1):
        this.width = width; this.height = height;

    def getDimensions(self):
        return (this.width, this.height)

class Box:
    def __init__(self, grid):
        this.__grid = grid; this.x = 0; this.y = 0            

    def verify(self):
        width, height = this.__grid.dimensions()
        if this.x &lt; width and this.y &lt; height:
             print( "A-OK!" ); 
        else
             print( "I am off the grid!!!" )


grid = Grid();
box = Box(grid);
box.verify();
</snippet></ROW><ROW><id>6274111</id><snippet>from collections import defaultdict
from itertools import product

pointPairA = [(2,1), (4,8)]
pointPairB = [(3,2), (10,2), (4,2)]
tolerance = 2

dA = defaultdict(list)
tolrange = range(-tolerance, tolerance+1)
for pA, dx, dy in product(pointPairA, tolrange, tolrange):
    dA[pA[0]+dx,pA[1]+dy].append(pA)

# you would have a loop here though the 20k lists
matchedPairs = [(pA, pB) for pB in pointPairB for pA in dA[pB]]  

print matchedPairs
</snippet></ROW><ROW><id>6274169</id><snippet>qw</snippet></ROW><ROW><id>6274169</id><snippet>\0</snippet></ROW><ROW><id>6274169</id><snippet>\0</snippet></ROW><ROW><id>6274169</id><snippet>def ff7_checksum(data): # data used to be 'qw'
  all_bits = 0xFFFF # a 16-bit value with all bits set.
  result = all_bits # result used to be 'r'
  pbit = 0x8000 # the highest-order bit in a 16-bit value.

  for byte in data: # byte used to be 't'
    result ^= byte &lt;&lt; 8
    for i in range(8):
      result = (result &lt;&lt; 1) ^ (0x1021 if result &amp; pbit else 0)
    result &amp;= all_bits
  return result ^ all_bits # the original &amp;-mask is not necessary
</snippet></ROW><ROW><id>6274376</id><snippet>["A" if x == 9 else "B" for x in range(0,10)] 
</snippet></ROW><ROW><id>6274451</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''&lt;td class="1"&gt;test1&lt;/td&gt;
... &lt;td&gt;test2&lt;/td&gt;
... &lt;td class="3"&gt;&lt;a href="/"&gt;test3&lt;/a&gt;&lt;/td&gt;
... &lt;td&gt;&lt;div class="test4"&gt;&lt;a class="test4" href="/"&gt;test4&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
... &lt;td&gt;&lt;div class="test4"&gt;&lt;a class="test4" href="/"&gt;test4&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;
... ''')
&gt;&gt;&gt; [tag.parent for tag in soup.findAll(attrs = {"class": "test4"})
...  if tag.name in ['a', 'div'] and tag.parent.name == 'td']
[&lt;td&gt;&lt;div class="test4"&gt;&lt;a class="test4" href="/"&gt;test4&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;, &lt;td&gt;&lt;div class="test4"&gt;&lt;a class="test4" href="/"&gt;test4&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;]
</snippet></ROW><ROW><id>6274483</id><snippet>def primes(n): 
    if n==2: return [2]
</snippet></ROW><ROW><id>6274483</id><snippet>&lt;= n</snippet></ROW><ROW><id>6274483</id><snippet>n == 2</snippet></ROW><ROW><id>6274483</id><snippet>    elif n&lt;2: return []
</snippet></ROW><ROW><id>6274483</id><snippet>    s=range(3,n+1,2)
</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>n + 1</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>    mroot = n ** 0.5
</snippet></ROW><ROW><id>6274483</id><snippet>n</snippet></ROW><ROW><id>6274483</id><snippet>    half=(n+1)/2-1
</snippet></ROW><ROW><id>6274483</id><snippet>len(s)</snippet></ROW><ROW><id>6274483</id><snippet>    i=0
    m=3
</snippet></ROW><ROW><id>6274483</id><snippet>0</snippet></ROW><ROW><id>6274483</id><snippet>m</snippet></ROW><ROW><id>6274483</id><snippet>s[i]</snippet></ROW><ROW><id>6274483</id><snippet>    while m &lt;= mroot:
        if s[i]:
</snippet></ROW><ROW><id>6274483</id><snippet>s[i]</snippet></ROW><ROW><id>6274483</id><snippet>True</snippet></ROW><ROW><id>6274483</id><snippet>s[i]</snippet></ROW><ROW><id>6274483</id><snippet>            j=(m*m-3)/2
            s[j]=0
</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>3</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>            while j&lt;half:
                s[j]=0
                j+=m
</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>j</snippet></ROW><ROW><id>6274483</id><snippet>j</snippet></ROW><ROW><id>6274483</id><snippet>half</snippet></ROW><ROW><id>6274483</id><snippet>j</snippet></ROW><ROW><id>6274483</id><snippet>s</snippet></ROW><ROW><id>6274483</id><snippet>        i=i+1
        m=2*i+3
</snippet></ROW><ROW><id>6274483</id><snippet>i</snippet></ROW><ROW><id>6274483</id><snippet>m</snippet></ROW><ROW><id>6274483</id><snippet>[2 * i + 3 for i in range(10)]</snippet></ROW><ROW><id>6274483</id><snippet>    return [2]+[x for x in s if x]
</snippet></ROW><ROW><id>6274483</id><snippet>&gt;&gt;&gt; numbers = range(40)
&gt;&gt;&gt; numbers[1] = 0    # 1 isn't prime
&gt;&gt;&gt; for i in numbers:
...     if i:
...         for j in range(i + i, len(numbers), i):
...             numbers[j] = 0
... 
&gt;&gt;&gt; [n for n in numbers if n]
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]
</snippet></ROW><ROW><id>6274483</id><snippet>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10...]
</snippet></ROW><ROW><id>6274483</id><snippet>[0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10...]
[0, 0, 2, 3, 0, 5, 0, 7, 0, 9, 0...]
[0, 0, 2, 3, 0, 5, 0, 7, 0, 0, 0...]
</snippet></ROW><ROW><id>6274596</id><snippet>gpib</snippet></ROW><ROW><id>6274596</id><snippet>gpib.foo()</snippet></ROW><ROW><id>6274596</id><snippet>help(gpib)
</snippet></ROW><ROW><id>6274906</id><snippet>manage.py runserver</snippet></ROW><ROW><id>6274906</id><snippet>package directory
    module directory
    ... other files/dirs like README, Manifest and so on
</snippet></ROW><ROW><id>6274906</id><snippet>module directory</snippet></ROW><ROW><id>6274979</id><snippet>#!/usr/bin/python
try:
    import sqlite3
except:
    from pysqlite2 import dbapi2 as sqlite3

#prepare testcase    
db="/tmp/soverflow.sqlite"
dbconnect = sqlite3.connect(db)
c = dbconnect.cursor()
c.execute("""create table credits
(id int not null primary key, firstname varchar(50), phone varchar(30),amount int not null)""")
c.execute("""INSERT INTO credits (id,firstname,phone,amount) VALUES (1,'guybrush','123-456',24)""")
c.execute("""INSERT INTO credits (id,firstname, phone,amount) VALUES (2,'elaine','1337-1337',18)""")
dbconnect.commit()
c.close()


def print_firstname(phone):
    cursor = dbconnect.cursor()
    cursor.execute("""SELECT * FROM credits WHERE phone = ?""",(phone,))
    data = cursor.fetchone()
    firstname = data[1]
    cursor.close() # cleanup
    print firstname

print "testing existing row"
print_firstname('1337-1337')

print "testing missing row"
print_firstname('nothere')
</snippet></ROW><ROW><id>6274979</id><snippet>./soverflow_sqlite.py 
testing existing row
elaine
testing missing row
Traceback (most recent call last):
  File "./soverflow_sqlite.py", line 31, in &lt;module&gt;
    print_firstname('not-in-db')
  File "./soverflow_sqlite.py", line 23, in print_firstname
    firstname = data[1]
TypeError: 'NoneType' object is not subscriptable
</snippet></ROW><ROW><id>6275058</id><snippet>(.+?)(\s+(St|Ave|Road))?
</snippet></ROW><ROW><id>6275143</id><snippet>for n in itertools.product(list1, list2, list3, list4):
    print n
</snippet></ROW><ROW><id>6275143</id><snippet>n</snippet></ROW><ROW><id>6275645</id><snippet>data_files = [ 'COPYING', 'COPYING.LESSER'],
</snippet></ROW><ROW><id>6275645</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>6275645</id><snippet>include COPYING*
prune COPYING*
</snippet></ROW><ROW><id>6275645</id><snippet>COPYING</snippet></ROW><ROW><id>6275812</id><snippet>replace('"','\\"')
</snippet></ROW><ROW><id>6276635</id><snippet>import os
from subprocess import *

def run_cmd(cmd):
        p = Popen(cmd, shell=True, stdout=PIPE)
        output = p.communicate()[0]
        return output
</snippet></ROW><ROW><id>6276904</id><snippet>(\d+\.\d+|\d+) star
</snippet></ROW><ROW><id>6276917</id><snippet>pre_pad = 'to '
matches = []

for i in words:
    regex_string = '\\b%s%s(?!-)(?!_)\\b' % (pre_pad, i)
    for match in re.finditer(r"%s" % regex_string, text):
        matches.append([match, MATCH_TYPE])
</snippet></ROW><ROW><id>6276917</id><snippet>print len(regex_string)
</snippet></ROW><ROW><id>6277150</id><snippet>If-Modified-Since</snippet></ROW><ROW><id>6277150</id><snippet>304 Not Modified</snippet></ROW><ROW><id>6277177</id><snippet>&gt;&gt;&gt; [x + y for x in a for y in b]
['1a', '1b', '1c', '2a', '2b', '2c', '3a', '3b', '3c']
</snippet></ROW><ROW><id>6277418</id><snippet>A B E R G</snippet></ROW><ROW><id>6277418</id><snippet>A B E R G</snippet></ROW><ROW><id>6277418</id><snippet>s = eval(s)</snippet></ROW><ROW><id>6277964</id><snippet>print error</snippet></ROW><ROW><id>6277964</id><snippet>print error.read()</snippet></ROW><ROW><id>6277964</id><snippet>user_agent = "Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)" # Or any valid user agent from a real browser
headers = {"User-Agent": user_agent}
req = urllib2.Request(url, headers=headers)
res = urllib2.urlopen(req)
print res.read()
</snippet></ROW><ROW><id>6278089</id><snippet>__init__.py</snippet></ROW><ROW><id>6278089</id><snippet>tests/</snippet></ROW><ROW><id>6278089</id><snippet>from .test_basic import *
from .test_detail import *
</snippet></ROW><ROW><id>6278089</id><snippet>$ python manage.py test module1
</snippet></ROW><ROW><id>6278113</id><snippet>from my_module import my_function_with_global_var
</snippet></ROW><ROW><id>6278113</id><snippet>import my_module
</snippet></ROW><ROW><id>6278113</id><snippet>MY_CONFIG_VARIABLE</snippet></ROW><ROW><id>6278113</id><snippet>my_module</snippet></ROW><ROW><id>6278113</id><snippet>class TestSomething(unittest.TestCase): # Fixed that for you!

    def test_first_case(self):
         my_module.MY_CONFIG_VARIABLE = True
         self.assertEqual(my_module.my_function_with_global_var(), "First result")

    def test_second_case(self):
         my_module.MY_CONFIG_VARIABLE = False
         self.assertEqual(my_module.my_function_with_global_var(), "Second result")
</snippet></ROW><ROW><id>6278417</id><snippet>fnames</snippet></ROW><ROW><id>6278417</id><snippet>flist = [dirpath + f for dirpath, dirnames, fnames in os.walk('/home/user') for f in fnames]
</snippet></ROW><ROW><id>6278617</id><snippet>executemany()</snippet></ROW><ROW><id>6278617</id><snippet>query</snippet></ROW><ROW><id>6278617</id><snippet>executemany(operation, seq_of_parameters)</snippet></ROW><ROW><id>6278617</id><snippet>seq_of_parameters</snippet></ROW><ROW><id>6278617</id><snippet>execute()</snippet></ROW><ROW><id>6278617</id><snippet>execute()</snippet></ROW><ROW><id>6278617</id><snippet>query = "INSERT INTO '20091229global' (proddate, site, plant, unit, line, pid, mods) VALUES (?, ?, ?, ?, ?, ?, ?)"
self.cur2.executemany(query, self.rows)
</snippet></ROW><ROW><id>6278833</id><snippet>from PyQt4 import QtGui, QtCore

DEFAULT_STYLE = """
QProgressBar{
    border: 2px solid grey;
    border-radius: 5px;
    text-align: center
}

QProgressBar::chunk {
    background-color: lightblue;
    width: 10px;
    margin: 1px;
}
"""

COMPLETED_STYLE = """
QProgressBar{
    border: 2px solid grey;
    border-radius: 5px;
    text-align: center
}

QProgressBar::chunk {
    background-color: red;
    width: 10px;
    margin: 1px;
}
"""

class MyProgressBar(QtGui.QProgressBar):
    def __init__(self, parent = None):
        QtGui.QProgressBar.__init__(self, parent)
        self.setStyleSheet(DEFAULT_STYLE)

    def setValue(self, value):
        QtGui.QProgressBar.setValue(self, value)

        if value == self.maximum():
            self.setStyleSheet(COMPLETED_STYLE)
</snippet></ROW><ROW><id>6278833</id><snippet>class MyProgressBar(QtGui.QProgressBar):
    def setValue(self, value):
        QtGui.QProgressBar.setValue(self, value)
        if value == self.maximum():
            palette = QtGui.QPalette(self.palette())
            palette.setColor(QtGui.QPalette.Highlight, 
                             QtGui.QColor(QtCore.Qt.red))
            self.setPalette(palette)
</snippet></ROW><ROW><id>6279205</id><snippet>a[0]</snippet></ROW><ROW><id>6279205</id><snippet>os.path.join</snippet></ROW><ROW><id>6279205</id><snippet>/</snippet></ROW><ROW><id>6279205</id><snippet>os.path.abspath(os.path.dirname(foo.__path__))</snippet></ROW><ROW><id>6279205</id><snippet>__path__</snippet></ROW><ROW><id>6279380</id><snippet>b'abc'</snippet></ROW><ROW><id>6279380</id><snippet>bytes('abc')</snippet></ROW><ROW><id>6279462</id><snippet>print</snippet></ROW><ROW><id>6279462</id><snippet>print soup.find("b", { "class" : "lime" })
</snippet></ROW><ROW><id>6280245</id><snippet>MSWord.Documents.Close
</snippet></ROW><ROW><id>6280245</id><snippet>getattr(MSWord.Documents, "Close")
</snippet></ROW><ROW><id>6280245</id><snippet>MSWord.Documents.Close()
</snippet></ROW><ROW><id>6280245</id><snippet>.Quit</snippet></ROW><ROW><id>6280480</id><snippet>'\x61\x62\x63'</snippet></ROW><ROW><id>6280480</id><snippet>repr()</snippet></ROW><ROW><id>6280480</id><snippet>repr()</snippet></ROW><ROW><id>6280480</id><snippet>for char in packet:
    print("%5d %2s %2r" % (ord(char), char, char))
</snippet></ROW><ROW><id>6280480</id><snippet>repr</snippet></ROW><ROW><id>6280480</id><snippet>struct.unpack('BBB', packet)
</snippet></ROW><ROW><id>6280480</id><snippet>struct.unpack('BBB', packet.decode('string_escape'))
</snippet></ROW><ROW><id>6281063</id><snippet>&gt;&gt;&gt; [dict(y) for y in set(tuple(x.items()) for x in d)]
[{'y': 4, 'x': 3}, {'y': 2, 'x': 1}]
</snippet></ROW><ROW><id>6281063</id><snippet>&gt;&gt;&gt; d = [{'x':1, 'y':2}, {'x':3, 'y':4}]
&gt;&gt;&gt; [dict(y) for y in set(tuple(x.items()) for x in d)]
[{'y': 4, 'x': 3}, {'y': 2, 'x': 1}]
</snippet></ROW><ROW><id>6281063</id><snippet>&gt;&gt;&gt; d = [{'x':1,'y':2}]
&gt;&gt;&gt; [dict(y) for y in set(tuple(x.items()) for x in d)]
[{'y': 2, 'x': 1}]
</snippet></ROW><ROW><id>6281289</id><snippet>str.replace()</snippet></ROW><ROW><id>6281289</id><snippet>str.replace(old, new[, count])</snippet></ROW><ROW><id>6281289</id><snippet>old</snippet></ROW><ROW><id>6281289</id><snippet>new</snippet></ROW><ROW><id>6281289</id><snippet>latin1</snippet></ROW><ROW><id>6281289</id><snippet>str.decode()</snippet></ROW><ROW><id>6281289</id><snippet>str.replace()</snippet></ROW><ROW><id>6281289</id><snippet>&gt;&gt;&gt; unioldchars = oldchars.decode("latin1")
&gt;&gt;&gt; newdata = data.replace(unioldchars, newchars)
</snippet></ROW><ROW><id>6282317</id><snippet>name = name.split('_')[0]</snippet></ROW><ROW><id>6282317</id><snippet>name += '.exe'</snippet></ROW><ROW><id>6282317</id><snippet>file_list = os.listdir('.')
for each in file_list:
    if each[-4:] != '.exe':
        file_list.pop(file_list.index(each))

for each in file_list:
    name = each.split('_')[0]
    name += '.exe'
    os.rename(each, name)
</snippet></ROW><ROW><id>6282664</id><snippet>import numpy
from matplotlib import pyplot

x = numpy.arange(10)
y = numpy.array([5,3,4,2,7,5,4,6,3,2])

fig = pyplot.figure()
ax = fig.add_subplot(111)
ax.set_ylim(0,10)
pyplot.plot(x,y)
for i,j in zip(x,y):
    ax.annotate(str(j),xy=(i,j))

pyplot.show()
</snippet></ROW><ROW><id>6282664</id><snippet>annotate</snippet></ROW><ROW><id>6282664</id><snippet>ax.annotate(str(j),xy=(i,j+0.5))
</snippet></ROW><ROW><id>6282913</id><snippet>SQL</snippet></ROW><ROW><id>6282913</id><snippet>Session</snippet></ROW><ROW><id>6282913</id><snippet>sqlalchemy tutorial</snippet></ROW><ROW><id>6283450</id><snippet>re.DOTALL</snippet></ROW><ROW><id>6283450</id><snippet>.</snippet></ROW><ROW><id>6283450</id><snippet>import re

pattern = re.compile(r"regex1.*?regex2", re.DOTALL)
</snippet></ROW><ROW><id>6283450</id><snippet>pattern.sub("", data)</snippet></ROW><ROW><id>6283471</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>6283471</id><snippet>itertools.combinations_with_replacement()</snippet></ROW><ROW><id>6283471</id><snippet>&gt;&gt;&gt; letters = ['a', 'b', 'c']
&gt;&gt;&gt; from itertools import combinations
</snippet></ROW><ROW><id>6283471</id><snippet>print()</snippet></ROW><ROW><id>6283471</id><snippet>yield</snippet></ROW><ROW><id>6283471</id><snippet>&gt;&gt;&gt; for c in combinations(letters, 2): 
        print(c)
... 
('a', 'b')
('a', 'c')
('b', 'c')

&gt;&gt;&gt; for c in combinations(letters, 2): 
        print(''.join(c))
... 
ab
ac
bc
&gt;&gt;&gt; 

&gt;&gt;&gt; for c in itertools.combinations_with_replacement(letters, 2): 
        print(''.join(c))
... 
aa
ab
ac
bb
bc
cc
</snippet></ROW><ROW><id>6283471</id><snippet>permutations</snippet></ROW><ROW><id>6283471</id><snippet>&gt;&gt;&gt; for c in itertools.permutations(letters, 2): 
        print(''.join(c))
... 
ab
ac
ba
bc
ca
cb
</snippet></ROW><ROW><id>6283471</id><snippet>itertools.product()</snippet></ROW><ROW><id>6283603</id><snippet>IMAP4.list</snippet></ROW><ROW><id>6283603</id><snippet>IMAP4.select</snippet></ROW><ROW><id>6283603</id><snippet>IMAP4.search</snippet></ROW><ROW><id>6283603</id><snippet>server.select('[Gmail]/All Mail')
resp, items = server.search(None, "(UNSEEN)")
for mail in items[0].split():
    resp, data = m.fetch(mail, '(RFC822)')
    body = data[0][1]
    print body
</snippet></ROW><ROW><id>6283877</id><snippet>self.__dict__</snippet></ROW><ROW><id>6283877</id><snippet>class User:
    ...
    def to_dict(self):
        return dict(
            [(k, v) for k, v in self.__dict__.iteritems() if not k.startswith('_')]
        )
</snippet></ROW><ROW><id>6283877</id><snippet>.to_dict()</snippet></ROW><ROW><id>6283877</id><snippet>'to_dict'</snippet></ROW><ROW><id>6283877</id><snippet>class User(object):
    data_attributes = ('s_email', 's_password')
    def to_dict(self):
        return dict([(attr, getattr(self, attr) for attr in self.data_attributes])
</snippet></ROW><ROW><id>6283926</id><snippet>&lt;Ctrl+F&gt;raises&lt;Enter&gt;</snippet></ROW><ROW><id>6283926</id><snippet>docs.python.org</snippet></ROW><ROW><id>6283926</id><snippet>TypeError</snippet></ROW><ROW><id>6283926</id><snippet>ImportError</snippet></ROW><ROW><id>6284031</id><snippet>ax.plot_surface(X, Y, Z1, color='w', alpha=0.2, linewidth=0)
ax.plot_surface(X, Y, Z2, color='b', alpha=0.2, linewidth=0)
</snippet></ROW><ROW><id>6284190</id><snippet>setattr</snippet></ROW><ROW><id>6284190</id><snippet>from elixir import *

metadata.bind = 'sqlite://'
metadata.bind.echo = False

class Book(Entity):
    PrintTitle = Field(String(50))

setup_all()
create_all()

params = {'PrintTitle':'Ethyl the Aardvark goes Quantity Surveying'}

bk = Book()

print "Title in database (before): {}".format(bk.PrintTitle)

for k, v in params.items():
    setattr(bk, k, v)

print "Title in database (after): {}".format(bk.PrintTitle)
</snippet></ROW><ROW><id>6284190</id><snippet>Title in database (before): None
Title in database (after): Ethyl the Aardvark goes Quantity Surveying
</snippet></ROW><ROW><id>6284190</id><snippet>params</snippet></ROW><ROW><id>6284190</id><snippet>request.params</snippet></ROW><ROW><id>6284190</id><snippet>setattr(bk, k, v)</snippet></ROW><ROW><id>6284190</id><snippet>bk.k=v</snippet></ROW><ROW><id>6284436</id><snippet>char *cStr = "Some text here.";

PyObject *pyStr = Py_BuildValue("s", cStr);
</snippet></ROW><ROW><id>6284436</id><snippet>bytes</snippet></ROW><ROW><id>6284436</id><snippet>str</snippet></ROW><ROW><id>6284436</id><snippet>PyObject *pyStr = PyString_FromString(cStr);
</snippet></ROW><ROW><id>6284436</id><snippet>PyBytes_FromString()</snippet></ROW><ROW><id>6284436</id><snippet>errorcheck = PyModule_AddObject(embmodule, "str", pyStr);
</snippet></ROW><ROW><id>6284436</id><snippet>errorcheck = PyModule_AddStringConstant(embmodule, "str", cStr);
</snippet></ROW><ROW><id>6284483</id><snippet>at</snippet></ROW><ROW><id>6284483</id><snippet>cron</snippet></ROW><ROW><id>6284591</id><snippet>file.read()</snippet></ROW><ROW><id>6284591</id><snippet>def chunks(file, delim='\n'):
    buf = bytearray(), 
    while True:
        c = self.read(1)
        if c == '': return
        buf += c
        if c == delim: 
            yield str(buf)
            buf = bytearray()
</snippet></ROW><ROW><id>6285000</id><snippet>/pictures/models\.(.*)/</snippet></ROW><ROW><id>6285000</id><snippet>class BlobstoreImageHandler(blobstore.handler.BlobstoreDownloadHandler):
  def get(self, resource):
    resourse = str(urllib.unquote(resource))
    blob_info = blobstore.BlobInfo.get(resource)
    self.send_blob(blob_info)
</snippet></ROW><ROW><id>6285080</id><snippet>iproute2</snippet></ROW><ROW><id>6285080</id><snippet>ip addr add 192.168.192.1/24 dev eth0</snippet></ROW><ROW><id>6285080</id><snippet>[mpenning@Finger ~]$ sudo ip addr add 192.168.192.1/24 dev eth0
[mpenning@Finger ~]$ ip addr show
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP qlen 1000
    link/ether 78:2b:cb:0a:8c:f9 brd ff:ff:ff:ff:ff:ff
    inet 192.168.12.238/24 brd 192.168.12.255 scope global eth0
    inet 192.168.192.1/24 scope global eth0
    inet6 fe80::7a2b:cbff:fe0a:8cf9/64 scope link 
       valid_lft forever preferred_lft forever
[mpenning@Finger ~]$ ip route show
192.168.192.0/24 dev eth0  proto kernel  scope link  src 192.168.192.1 
192.168.12.0/24 dev eth0  proto kernel  scope link  src 192.168.12.238 
default via 192.168.12.236 dev eth0 
[mpenning@Finger ~]$
</snippet></ROW><ROW><id>6285080</id><snippet>ip addr del 192.168.192.1/24 dev eth0</snippet></ROW><ROW><id>6285203</id><snippet>class unique_element:
    def __init__(self,value,occurrences):
        self.value = value
        self.occurrences = occurrences

def perm_unique(elements):
    eset=set(elements)
    listunique = [unique_element(i,elements.count(i)) for i in eset]
    u=len(elements)
    return perm_unique_helper(listunique,[0]*u,u-1)

def perm_unique_helper(listunique,result_list,d):
    if d &lt; 0:
        yield tuple(result_list)
    else:
        for i in listunique:
            if i.occurrences &gt; 0:
                result_list[d]=i.value
                i.occurrences-=1
                for g in  perm_unique_helper(listunique,result_list,d-1):
                    yield g
                i.occurrences+=1




a = list(perm_unique([1,1,2]))
print(a)
</snippet></ROW><ROW><id>6285203</id><snippet>[(2, 1, 1), (1, 2, 1), (1, 1, 2)]
</snippet></ROW><ROW><id>6285203</id><snippet>def permutations_with_replecement(elements,n):
    return permutations_helper(elements,[0]*n,n-1)#this is generator

def permutations_helper(elements,result_list,d):
    if d&lt;0:
        yield tuple(result_list)
    else:
        for i in elements:
            result_list[d]=i
            all_permutations = permutations_helper(elements,result_list,d-1)#this is generator
            for g in all_permutations:
                yield g
</snippet></ROW><ROW><id>6285203</id><snippet>yield</snippet></ROW><ROW><id>6285203</id><snippet>for g in  perm_unique_helper(listunique,result_list,d-1): yield g</snippet></ROW><ROW><id>6285203</id><snippet>permutations_with_replecement</snippet></ROW><ROW><id>6285428</id><snippet>add</snippet></ROW><ROW><id>6285428</id><snippet>{{ object.article.rating_score|add:"-100" }}
</snippet></ROW><ROW><id>6285460</id><snippet>email</snippet></ROW><ROW><id>6285932</id><snippet>fetchall</snippet></ROW><ROW><id>6285932</id><snippet>None</snippet></ROW><ROW><id>6285932</id><snippet>None</snippet></ROW><ROW><id>6286078</id><snippet>struct.unpack('f', file.read(4))
</snippet></ROW><ROW><id>6286078</id><snippet>struct.unpack('f'*n, file.read(4*n))
</snippet></ROW><ROW><id>6286343</id><snippet>import threading

def crawl():
    import urllib2
    data = urllib2.urlopen("http://www.google.com/").read()

    print "Read google.com"

threads = []

for n in range(10):
    thread = threading.Thread(target=crawl)
    thread.start()

    threads.append(thread)

# to wait until all three functions are finished

print "Waiting..."

for thread in threads:
    thread.join()

print "Complete."
</snippet></ROW><ROW><id>6286343</id><snippet>import multiprocessing

def crawl(result_queue):
    import urllib2
    data = urllib2.urlopen("http://news.ycombinator.com/").read()

    print "Requested..."

    if "result found (for example)":
        result_queue.put("result!")

    print "Read site."

processs = []
result_queue = multiprocessing.Queue()

for n in range(4): # start 4 processes crawling for the result
    process = multiprocessing.Process(target=crawl, args=[result_queue])
    process.start()
    processs.append(process)

print "Waiting for result..."

result = result_queue.get() # waits until any of the proccess have `.put()` a result

for process in processs: # then kill them all off
    process.terminate()

print "Got result:", result
</snippet></ROW><ROW><id>6286612</id><snippet>from itertools import izip_longest
url_params = dict(izip_longest(*[iter(t)] * 2))
</snippet></ROW><ROW><id>6286612</id><snippet>t = range(11)</snippet></ROW><ROW><id>6286612</id><snippet>{0: 1, 2: 3, 4: 5, 6: 7, 8: 9, 10: None}
</snippet></ROW><ROW><id>6286646</id><snippet>mfd = os.open('BigFile', os.O_RDONLY)
</snippet></ROW><ROW><id>6286646</id><snippet>mfile = mmap.mmap(mfd, 0, prot=mmap.PROT_READ)
</snippet></ROW><ROW><id>6286757</id><snippet>'The authenticity of host '***' can't be established'</snippet></ROW><ROW><id>6286757</id><snippet>known_hosts</snippet></ROW><ROW><id>6286757</id><snippet>proc = subprocess.Popen(['scp', '-o BatchMode=yes',
                                'user@server:/location/file.txt',
                                '/someplace/file.txt'],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
proc.wait()
print 'result: %s' % repr(proc.stderr.readline())
</snippet></ROW><ROW><id>6286757</id><snippet>me@myMachine:~$ python tmp.py 
result: 'Host key verification failed.\r\n'
me@myMachine:~$
</snippet></ROW><ROW><id>6286757</id><snippet>StrictHostKeyChecking</snippet></ROW><ROW><id>6286757</id><snippet>me@myMachine:~$ python tmp.py
result: 'Permission denied (publickey,password,keyboard-interactive).\r\n'
me@myMachine:~$ python tmp.py
</snippet></ROW><ROW><id>6286757</id><snippet>BatchMode</snippet></ROW><ROW><id>6286954</id><snippet>bars = [len(allData[modelNumber][0][1]), len(allData[modelNumber][1][1]),
        len(allData[modelNumber][2][1]), len(allData[modelNumber][3][1])]
</snippet></ROW><ROW><id>6286969</id><snippet>unicode</snippet></ROW><ROW><id>6286969</id><snippet>str</snippet></ROW><ROW><id>6286969</id><snippet>str</snippet></ROW><ROW><id>6286969</id><snippet>"..."</snippet></ROW><ROW><id>6286969</id><snippet>unicode</snippet></ROW><ROW><id>6286969</id><snippet>u"..."</snippet></ROW><ROW><id>6286969</id><snippet>codecs</snippet></ROW><ROW><id>6286985</id><snippet>TemplateView</snippet></ROW><ROW><id>6286985</id><snippet>request.method</snippet></ROW><ROW><id>6286985</id><snippet>405 Method Not Allowed</snippet></ROW><ROW><id>6286985</id><snippet>if request.method=='POST'</snippet></ROW><ROW><id>6286985</id><snippet>if request.method=='GET'</snippet></ROW><ROW><id>6286985</id><snippet>post</snippet></ROW><ROW><id>6286985</id><snippet>get</snippet></ROW><ROW><id>6287319</id><snippet>time.struct_time</snippet></ROW><ROW><id>6287319</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6287319</id><snippet>from time import mktime
from datetime import datetime
dt = datetime.fromtimestamp(mktime(item['updated_parsed']))
</snippet></ROW><ROW><id>6287530</id><snippet>time.time_struct</snippet></ROW><ROW><id>6287530</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6287530</id><snippet>from datetime import datetime
from time import mktime

birthdate = time.strptime('6/8/1980', '%m/%d/%Y')
self.d_birthdate = datetime.fromtimestamp(mktime(birthdate))
</snippet></ROW><ROW><id>6287530</id><snippet>self.d_birthdate = datetime.strptime('6/8/1980', '%m/%d/%Y')
</snippet></ROW><ROW><id>6287587</id><snippet>qux</snippet></ROW><ROW><id>6287587</id><snippet>Baz.qux</snippet></ROW><ROW><id>6287587</id><snippet>__get__</snippet></ROW><ROW><id>6287587</id><snippet>self</snippet></ROW><ROW><id>6287587</id><snippet>baz</snippet></ROW><ROW><id>6287587</id><snippet>x</snippet></ROW><ROW><id>6287587</id><snippet>class Baz(object):
    qux = lambda x: x + '_quux'
    def foo(self): return self.qux()

Baz().foo() # TypeError: unsupported operand type(s) for +: 'Baz' and 'str'
# because after binding Baz() to 'x', we get Baz() + '_quux'
</snippet></ROW><ROW><id>6287587</id><snippet>qux</snippet></ROW><ROW><id>6287587</id><snippet>staticmethod</snippet></ROW><ROW><id>6287587</id><snippet>classmethod</snippet></ROW><ROW><id>6287587</id><snippet>staticmethod</snippet></ROW><ROW><id>6287587</id><snippet>static</snippet></ROW><ROW><id>6287587</id><snippet>staticmethod</snippet></ROW><ROW><id>6287587</id><snippet>self.qux</snippet></ROW><ROW><id>6287587</id><snippet>foo</snippet></ROW><ROW><id>6287587</id><snippet>__get__</snippet></ROW><ROW><id>6287587</id><snippet>staticmethod</snippet></ROW><ROW><id>6287587</id><snippet>self</snippet></ROW><ROW><id>6287587</id><snippet>self</snippet></ROW><ROW><id>6287587</id><snippet>qux = lambda self, x: x + '_quux'
def foo(self):
    return self.qux('foo')
</snippet></ROW><ROW><id>6287595</id><snippet>lambda</snippet></ROW><ROW><id>6287595</id><snippet>b.bind("&lt;ButtonPress-1&gt;", self.SomeOtherFunction)
</snippet></ROW><ROW><id>6287595</id><snippet>lambda</snippet></ROW><ROW><id>6287595</id><snippet>command</snippet></ROW><ROW><id>6287595</id><snippet>def OnPress(event):
    print "widget %s was pressed" % event.widget
def OnRelease(event):
    print "widget %s was released" % event.widget

b = Button(...)
b.bind("&lt;ButtonPress-1&gt;", OnPress)
b.bind("&lt;ButtonRelease-1&gt;", OnRelease)
</snippet></ROW><ROW><id>6287601</id><snippet>li = soup.find('li', {'class': 'text'})
children = li.findChildren()
for child in children:
    print child
</snippet></ROW><ROW><id>6287641</id><snippet>after</snippet></ROW><ROW><id>6287817</id><snippet>The hook executes once for each ref to be updated, and takes three parameters:
  - the name of the ref being updated,
  - the old object name stored in the ref,
  - and the new objectname to be stored in the ref.
</snippet></ROW><ROW><id>6287817</id><snippet>git log --oneline $oldRef..$newRef
</snippet></ROW><ROW><id>6287901</id><snippet>num = 10
for i in range(num):
    setattr(self, "actionCOM%d" % i, QtGui.QAction(QtGui.QIcon(''), "COM%d" % i, self))
    action = getattr(self, "actionCOM%d" % i)
    action.setCheckable(True)
    self.COMPorts.append(action)
</snippet></ROW><ROW><id>6288032</id><snippet>x</snippet></ROW><ROW><id>6288032</id><snippet>generator</snippet></ROW><ROW><id>6288032</id><snippet>x[p + 1]</snippet></ROW><ROW><id>6288032</id><snippet>x = list(x)</snippet></ROW><ROW><id>6288032</id><snippet>for y in x</snippet></ROW><ROW><id>6288533</id><snippet>package</snippet></ROW><ROW><id>6288533</id><snippet>sys.path</snippet></ROW><ROW><id>6288533</id><snippet>import c:\jim\my files\projects\code\stuff</snippet></ROW><ROW><id>6288533</id><snippet>~/foo/package/</snippet></ROW><ROW><id>6288533</id><snippet>~/bar</snippet></ROW><ROW><id>6288533</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6288533</id><snippet>~/foo</snippet></ROW><ROW><id>6288533</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6288533</id><snippet>sys.path</snippet></ROW><ROW><id>6288533</id><snippet>sys.path.remove('')</snippet></ROW><ROW><id>6288599</id><snippet>var loc = new ActiveXObject("WbemScripting.SWbemLocator");
var svc = loc.ConnectServer(".", "root\\cimv2");
coll = svc.ExecQuery("select * from Win32_Process");
var items = new Enumerator(coll);

while (!items.atEnd())
{
    WScript.Echo(items.item().Name);
    items.moveNext();
}
</snippet></ROW><ROW><id>6288599</id><snippet>String name = getWMIValue("Select Name from Win32_ComputerSystem", "Name");
</snippet></ROW><ROW><id>6288809</id><snippet>URLGenerator</snippet></ROW><ROW><id>6288809</id><snippet>url('users', action='list')</snippet></ROW><ROW><id>6288809</id><snippet>config.add_handler('users', '/users/{action}', ...)</snippet></ROW><ROW><id>6288867</id><snippet>xyz</snippet></ROW><ROW><id>6288867</id><snippet>xyz</snippet></ROW><ROW><id>6288867</id><snippet>/usr/local/bin/python3 xyz
</snippet></ROW><ROW><id>6288912</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime.strptime('2011-06-09', '%Y-%m-%d')
&gt;&gt;&gt; d.strftime('%b %d,%Y')
'Jun 09,2011'
</snippet></ROW><ROW><id>6288912</id><snippet>datetime.strptime</snippet></ROW><ROW><id>6288912</id><snippet>time.strptime</snippet></ROW><ROW><id>6288912</id><snippet>datetime.datetime(*(time.strptime('2011-06-09', '%Y-%m-%d')[0:6]))</snippet></ROW><ROW><id>6288971</id><snippet>{}</snippet></ROW><ROW><id>6288971</id><snippet>[]</snippet></ROW><ROW><id>6288971</id><snippet>l[5]</snippet></ROW><ROW><id>6288971</id><snippet>sujit, amit, arijit, ajit</snippet></ROW><ROW><id>6288971</id><snippet>{}</snippet></ROW><ROW><id>6288971</id><snippet>{'a':1, 'b':2, 'c':3}</snippet></ROW><ROW><id>6289200</id><snippet>encode()</snippet></ROW><ROW><id>6289200</id><snippet>_encode()</snippet></ROW><ROW><id>6289200</id><snippet>self.block_size</snippet></ROW><ROW><id>6289200</id><snippet>_encode()</snippet></ROW><ROW><id>6289246</id><snippet>import datetime
fixdate = lambda d: datetime.datetime.strptime(d, '%d/%m/%Y')
r = mlab.csv2rec(datafile, delimiter=';', converterd={0: fixdate})
</snippet></ROW><ROW><id>6289260</id><snippet>slots</snippet></ROW><ROW><id>6289260</id><snippet>from collections import namedtuple
Point = namedtuple("Point", "x y")
p1 = Point(x=11, y=22)
</snippet></ROW><ROW><id>6289260</id><snippet>replace</snippet></ROW><ROW><id>6289527</id><snippet>include.js</snippet></ROW><ROW><id>6289527</id><snippet>src</snippet></ROW><ROW><id>6289748</id><snippet>In [1]: import inspect

In [2]: def test():
   ...:     print inspect.stack()[0][3]
   ...:

In [3]: test()
test
</snippet></ROW><ROW><id>6289748</id><snippet>inspect.stack()[0][3]</snippet></ROW><ROW><id>6289748</id><snippet>inspect.stack()[1][3]</snippet></ROW><ROW><id>6289782</id><snippet>music = [x for x in l if x[0] == 'music']
movie = [x for x in l if x[0] == 'movie']
clothing = [x for x in l if x[0] == 'clothing']
</snippet></ROW><ROW><id>6289782</id><snippet>&gt;&gt;&gt; music.sort(key=lambda x: x[1], reverse=True)
&lt;&lt;&lt; [('music', '400', 'url'), ('music', '350', 'url'), ('music', '300', 'url')]
</snippet></ROW><ROW><id>6289782</id><snippet>from collections import defaultdict

d = defaultdict(list)
for x in l:
    d[x[0]].append(x[1:])
</snippet></ROW><ROW><id>6289782</id><snippet>&gt;&gt;&gt; for k,v in d.iteritems():
...:     print k, v
...:
...:
movie [('400', 'url'), ('1000', 'url')]
clothing [('250', 'url')]
music [('300', 'url'), ('350', 'url'), ('400', 'url')]
</snippet></ROW><ROW><id>6289940</id><snippet>os.system()</snippet></ROW><ROW><id>6289940</id><snippet>subprocess</snippet></ROW><ROW><id>6290077</id><snippet>which python</snippet></ROW><ROW><id>6290077</id><snippet>.profile</snippet></ROW><ROW><id>6290077</id><snippet>.bashrc</snippet></ROW><ROW><id>6290077</id><snippet>alias python='/path/to/the/python/of/your/choice'
</snippet></ROW><ROW><id>6290211</id><snippet>def traverse(o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        for value in o:
            for subvalue in traverse(value):
                yield subvalue
    else:
        yield o

data = [(1,1,(1,1,(1,"1"))),(1,1,1),(1,),1,(1,(1,("1",)))]
print list(traverse(data))
# prints [1, 1, 1, 1, 1, '1', 1, 1, 1, 1, 1, 1, 1, '1']

for value in traverse(data):
    print repr(value)
# prints
# 1
# 1
# 1
# 1
# 1
# '1'
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# '1'
</snippet></ROW><ROW><id>6290211</id><snippet>def tree_map(f, o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        return type(o)(tree_map(f, value, tree_types) for value in o)
    else:
        return f(o)

data = [(1,1,(1,1,(1,"1"))),(1,1,1),(1,),1,(1,(1,("1",)))]
print tree_map(lambda o: type(o).__name__, data)
# prints [('int', 'int', ('int', 'int', ('int', 'str'))), ('int', 'int', 'int'), ('int',), 'int', ('int', ('int', ('str',)))]
</snippet></ROW><ROW><id>6290283</id><snippet>numpy.power()</snippet></ROW><ROW><id>6290283</id><snippet>&gt;&gt;&gt; numpy.power(-1+0j, 0.5)
(6.123233995736766e-17+1j)
&gt;&gt;&gt; cmath.exp(cmath.log(-1)/2)
(6.123233995736766e-17+1j)
</snippet></ROW><ROW><id>6290431</id><snippet>apt-get install python-pip
</snippet></ROW><ROW><id>6290431</id><snippet>yum install python-setuptools
cd /tmpwget http://pypi.python.org/packages/source/p/pip/pip-0.6.3.tar.gz#md5=0602fa9179cfaa98e41565d4a581d98c
tar -xzf pip-0.6.3.tar.gz
cd pip-0.6.3
/usr/bin/python2.4 setup.py install
</snippet></ROW><ROW><id>6290431</id><snippet>pip install virtualenv
</snippet></ROW><ROW><id>6290431</id><snippet>mkdir enviroments # folder for your different virtual environments

cd enviroments # go to new folder

virtualenv --no-site-packages django1.3 # create folder with new django

cd django1.3 # go to this folder

source bin/activate # activate environment

pip install Django==1.3 # install django 1.3
</snippet></ROW><ROW><id>6290431</id><snippet>python  

import django

django.get_version() # you should get '1.3.0 final' 

quit()
</snippet></ROW><ROW><id>6290431</id><snippet>deactivate
</snippet></ROW><ROW><id>6290431</id><snippet>rm -r ./bin &amp;&amp; virtualenv --clear
</snippet></ROW><ROW><id>6290431</id><snippet>cd enviroments # go to your environments folder

source django1.3/bin/activate # activate it

pip install django1.3/ MySQL-python # install module
</snippet></ROW><ROW><id>6290946</id><snippet>formatTime</snippet></ROW><ROW><id>6290946</id><snippet>def formatTime(self, record, datefmt=None):
    ct = self.converter(record.created)
    if datefmt:
        s = time.strftime(datefmt, ct)
    else:
        t = time.strftime("%Y-%m-%d %H:%M:%S", ct)
        s = "%s,%03d" % (t, record.msecs)
    return s
</snippet></ROW><ROW><id>6290946</id><snippet>"%s,%03d"</snippet></ROW><ROW><id>6290946</id><snippet>datefmt</snippet></ROW><ROW><id>6290946</id><snippet>ct</snippet></ROW><ROW><id>6290946</id><snippet>time.struct_time</snippet></ROW><ROW><id>6290946</id><snippet>ct</snippet></ROW><ROW><id>6290946</id><snippet>datetime</snippet></ROW><ROW><id>6290946</id><snippet>struct_time</snippet></ROW><ROW><id>6290946</id><snippet>ct.strftime</snippet></ROW><ROW><id>6290946</id><snippet>%f</snippet></ROW><ROW><id>6290946</id><snippet>import logging
import datetime as dt

class MyFormatter(logging.Formatter):
    converter=dt.datetime.fromtimestamp
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime("%Y-%m-%d %H:%M:%S")
            s = "%s,%03d" % (t, record.msecs)
        return s

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

console = logging.StreamHandler()
logger.addHandler(console)

formatter = MyFormatter(fmt='%(asctime)s %(message)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')
console.setFormatter(formatter)

logger.debug('Jackdaws love my big sphinx of quartz.')
# 2011-06-09,07:12:36.553554 Jackdaws love my big sphinx of quartz.
</snippet></ROW><ROW><id>6290946</id><snippet>datefmt</snippet></ROW><ROW><id>6290946</id><snippet>class MyFormatter(logging.Formatter):
    converter=dt.datetime.fromtimestamp
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime("%Y-%m-%d %H:%M:%S")
            s = "%s.%03d" % (t, record.msecs)
        return s

...
formatter = MyFormatter(fmt='%(asctime)s %(message)s')
...
logger.debug('Jackdaws love my big sphinx of quartz.')
# 2011-06-09 08:14:38.343 Jackdaws love my big sphinx of quartz.
</snippet></ROW><ROW><id>6291007</id><snippet>class Subject(models.Model):
    ...

class News(models.Model):
    subject = models.ManyToManyField(Subject, through="NewsSubject")

class NewsSubject(models.Model):
    news = models.ForeignKey(News)
    subject = models.ForeignKey(Subject)  

class NewsOfSubjectInline(admin.TabularInline):
    model = NewsSubject
    raw_id_fields = ('news',)

class SubjectAdmin(admin.ModelAdmin):
    inlines = [NewsOfSubjectInline,]

class SubjectOfNewsInline(admin.TabularInline):
    model = NewsSubject
    raw_id_fields = ('subject',)

class NewsAdmin(admin.ModelAdmin):
    inlines = [SubjectOfNewsInline,]
</snippet></ROW><ROW><id>6291126</id><snippet>import re
pattern = re.compile("match here")
input = "don't match here, but do match here"
start = input.find(",")
print pattern.search(input, start).span()
</snippet></ROW><ROW><id>6291126</id><snippet>(25, 35)</snippet></ROW><ROW><id>6291428</id><snippet>Client</snippet></ROW><ROW><id>6291428</id><snippet>RequestFactory</snippet></ROW><ROW><id>6291428</id><snippet>response = self.c.get('/emails/html/upload', SERVER_NAME="mydomain.com")
</snippet></ROW><ROW><id>6291608</id><snippet>PyErr_Clear()</snippet></ROW><ROW><id>6291764</id><snippet>class UT2(get_base_class()):
    target = A1
</snippet></ROW><ROW><id>6291764</id><snippet>class UT2(TestCase, UT):
     target = A1
</snippet></ROW><ROW><id>6291914</id><snippet>MemoryHandler</snippet></ROW><ROW><id>6292030</id><snippet>pos</snippet></ROW><ROW><id>6292030</id><snippet>    if delimiter:
        mo = self.stringEnd[delimiter].search(inData, pos=cursor)
    else:
        mo = self.patt.match(inData, pos=cursor)
</snippet></ROW><ROW><id>6292073</id><snippet>easy_install</snippet></ROW><ROW><id>6292073</id><snippet>easy_install mypackagename-0.1-py2.6.egg 
</snippet></ROW><ROW><id>6292482</id><snippet>f = open("temp/resources/%s" % (filename,), 'wb')
</snippet></ROW><ROW><id>6292854</id><snippet>#match any of the above
item = area ^ category ^ criteria
#keyword to perform action on ALL items
all_ = pp.CaselessLiteral("all")
</snippet></ROW><ROW><id>6292854</id><snippet>#keyword to perform action on ALL items
all_ = pp.CaselessLiteral("all")
#match any of the above
item = area ^ category ^ criteria ^ all_
</snippet></ROW><ROW><id>6292854</id><snippet>import pyparsing as pp

dotted_notation = pp.Regex(r'[a-zA-Z](\.\d{1,2}(\.\d{1,2})?)?') 
def name_notation_type(tokens):
    name = {
        0 : "area",
        1 : "category",
        2 : "criteria"}[tokens[0].count('.')]
    # assign results name to results - 
    tokens[name] = tokens[0] 
dotted_notation.setParseAction(name_notation_type)

# test each individually
tests = "A A.1 A.2.2".split()
for t in tests:
    print t
    val = dotted_notation.parseString(t)
    print val.dump()
    print val[0], 'is a', val.getName()
    print

# test all at once
tests = "A A.1 A.2.2"
val = pp.OneOrMore(dotted_notation).parseString(tests)
print val.dump()
</snippet></ROW><ROW><id>6292854</id><snippet>A
['A']
- area: A
A is a area

A.1
['A.1']
- category: A.1
A.1 is a category

A.2.2
['A.2.2']
- criteria: A.2.2
A.2.2 is a criteria

['A', 'A.1', 'A.2.2']
- area: A
- category: A.1
- criteria: A.2.2
</snippet></ROW><ROW><id>6292854</id><snippet>toggle_item = (toggle + pp.OneOrMore(item)).setParseAction(toggle_item_action)
toggle_all = (toggle + all_).setParseAction(toggle_all_action)

toggle_directive = toggle_all | toggle_item
</snippet></ROW><ROW><id>6292854</id><snippet>item</snippet></ROW><ROW><id>6292854</id><snippet>item = ~all_ + (area ^ etc...)</snippet></ROW><ROW><id>6292854</id><snippet>item + pp.ZeroOrMore(item)</snippet></ROW><ROW><id>6292854</id><snippet>pp.OneOrMore(item)</snippet></ROW><ROW><id>6292855</id><snippet>numpy</snippet></ROW><ROW><id>6292860</id><snippet>setup.py sdist</snippet></ROW><ROW><id>6292860</id><snippet>setup.py bdist</snippet></ROW><ROW><id>6292860</id><snippet>bdist_*</snippet></ROW><ROW><id>6292860</id><snippet>py2exe</snippet></ROW><ROW><id>6292860</id><snippet>linux-x86_64</snippet></ROW><ROW><id>6293093</id><snippet>OnIdle(self, event)</snippet></ROW><ROW><id>6293093</id><snippet>event.RequestMore()</snippet></ROW><ROW><id>6293382</id><snippet>__import__()</snippet></ROW><ROW><id>6293448</id><snippet>for i in range(3):
    print "Your text here"
</snippet></ROW><ROW><id>6293448</id><snippet>for i in range(3):
    print("Your text here")
</snippet></ROW><ROW><id>6293702</id><snippet>scipy.cluster.vq</snippet></ROW><ROW><id>6293862</id><snippet>%%</snippet></ROW><ROW><id>6293862</id><snippet>%</snippet></ROW><ROW><id>6293862</id><snippet>'&amp;p=myvar%%3D%s' % 'value'
</snippet></ROW><ROW><id>6293862</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>6293862</id><snippet>&gt;&gt;&gt;urllib.urlencode({'i':'fundedbyme', 'p':'myvar=%s' % myvalue})
'i=fundedbyme&amp;p=myvar%3Dmyvalue'
</snippet></ROW><ROW><id>6294139</id><snippet>tarfiles = [fname for fname in dirlist if fname.endswith(('.tgz','.tar'))]
</snippet></ROW><ROW><id>6294139</id><snippet>print "\n".join(tarfiles)
</snippet></ROW><ROW><id>6294139</id><snippet>for fname in tarfiles:
    print fname
</snippet></ROW><ROW><id>6294205</id><snippet>indices = [i for i, x in enumerate(my_list) if x == "whatever"]
</snippet></ROW><ROW><id>6294502</id><snippet>    browser= mechanize.Browser()
    browser.select_form(form_name)
    browser.set_value("Page$Next", name="pagenumber")     
</snippet></ROW><ROW><id>6294567</id><snippet>opposite="alpha"
current="beta"
</snippet></ROW><ROW><id>6294567</id><snippet>opposite=alpha
current=beta
</snippet></ROW><ROW><id>6294822</id><snippet>class MCUDP(object):
    def __init__(self, gui): self.gui = gui
    def UDPBroadcast(...):
        # ... as necessary ...
        self.gui.insertText("YourText")

class MCGUI(...)
    def __init__( self, parent = None ):
        self.udpClass = MCUDP.MCUDP(self)
</snippet></ROW><ROW><id>6294822</id><snippet>self.gui</snippet></ROW><ROW><id>6294822</id><snippet>class MCGUI(...)
    def __init__( self, parent = None ):
        self.udpClass = MCUDP.MCUDP()
        self.connect(self.udpClass, PYSIGNAL("textUpdated"), self.insertText);
</snippet></ROW><ROW><id>6294822</id><snippet>class MCUDP(QObject):
    def __init__(self, parent = None):
        QObject.__init__(self, parent)
    def UDPBroadcast(...):
        # ... as necessary ...
        self.emit(PYSIGNAL("textUpdated"), ("yourText",))
</snippet></ROW><ROW><id>6294847</id><snippet>self.v.Center()</snippet></ROW><ROW><id>6294847</id><snippet>controller</snippet></ROW><ROW><id>6294847</id><snippet>gui_step_1.py</snippet></ROW><ROW><id>6294847</id><snippet>controller</snippet></ROW><ROW><id>6294869</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       fifo(.py)
#       
#       Copyright 2011 Fabio Di Bernardini &lt;fdb@altraqua.com&gt;
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

def string_conditioned(string):
    return string.decode('string_escape').rstrip() + '\n'

def pop(n, size, filename):
    with open(filename, 'r+U') as fd:
        rows = fd.readlines()
    with open(filename, 'w') as fd:
        n = int(n)
        fd.writelines(rows[n:])
        return ''.join(rows[:n])

def trim_fifo(row, size, filename):
    size = int(size)
    with open(filename, 'rU') as fd:
        rows = fd.readlines()
    num_rows = len(rows)
    if num_rows &gt;= size:
        n = string_conditioned(row).count('\n')
        pop(num_rows + n - size, size, filename)

def push(row, size, filename):
    trim_fifo(row, size, filename)
    with open(filename, 'a') as fd:
        fd.write(string_conditioned(row))
    return ''

def main():
    import sys
    try:
        command  = sys.argv[1]
        param    = sys.argv[2]
        size     = sys.argv[3]
        filename = sys.argv[4]
        sys.stdout.write({
        '--push': push,
        '--pop' : pop,
        }[command](param, size, filename))
    except Exception, e:
        print r"""
Uso:
       fifo --push ROW MAX_ROWS FILE
       fifo --pop  NUM MAX_ROWS FILE

fifo implementa un buffer ad anello di righe di testo, Quando viene inserita
una riga che fa superare il numero massimo di righe (MAX_ROWS) elimina la riga
più vecchia.

Comandi:
  --push    accoda la riga di testo ROW nel FILE rimuovendo le righe più vecchie
            se il file supera MAX_ROWS. Usare '\n' per separare righe multiple.
  --pop     stampa le prime NUM righe e le rimuove dal FILE. MAX_ROWS viene
            ignorato ma deve essere comunque specificato.

Esempi:
       fifo --push 'row_one \n row_two' 10 fifo.txt
       fifo --pop 2 10 fifo.txt
"""
        print e

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6295209</id><snippet>&gt;&gt;&gt; l = ['a','b','c','d']
&gt;&gt;&gt; for i in l[1:]:
...     print i
... 
b
c
d
</snippet></ROW><ROW><id>6295209</id><snippet>1</snippet></ROW><ROW><id>6295209</id><snippet>&gt;&gt;&gt; l[1:]
['b', 'c', 'd']
</snippet></ROW><ROW><id>6295366</id><snippet>if int(choice.strip()) == 1:
</snippet></ROW><ROW><id>6296428</id><snippet>ButtonPress</snippet></ROW><ROW><id>6296428</id><snippet>ButtonRelease</snippet></ROW><ROW><id>6296428</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>6296428</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>6296428</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>6296428</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>6296428</id><snippet>winfo_containing</snippet></ROW><ROW><id>6296463</id><snippet>class MCCommunication( QtCore.QObject ):
    textUpdated = pyqtSignal(str)
    def __init__( self ):
        super(MCCommunication,self).__init__()
        ...
        self.textUpdated.emit("TCPServer listening on")
</snippet></ROW><ROW><id>6296463</id><snippet>self.server.textUpdated.connect(self.insertText)
</snippet></ROW><ROW><id>6296641</id><snippet>(r'^admin/(.*)', admin.site.root_path),
</snippet></ROW><ROW><id>6296641</id><snippet>admin.site.root_path</snippet></ROW><ROW><id>6296641</id><snippet>None</snippet></ROW><ROW><id>6296641</id><snippet>(r'^admin/(.*)', include(admin.site.urls)),
</snippet></ROW><ROW><id>6296708</id><snippet>A</snippet></ROW><ROW><id>6296708</id><snippet>A(p)</snippet></ROW><ROW><id>6296708</id><snippet>A(param=p)</snippet></ROW><ROW><id>6296708</id><snippet>class A(B, C):
    def __init__(self, param):
        B.__init__(self)
        C.__init__(self, param)
</snippet></ROW><ROW><id>6296708</id><snippet>super</snippet></ROW><ROW><id>6296708</id><snippet>B.__init__</snippet></ROW><ROW><id>6296708</id><snippet>C.__init__</snippet></ROW><ROW><id>6296708</id><snippet>super(A,self).__init__</snippet></ROW><ROW><id>6296708</id><snippet>class B(object):
    def __init__(self, **kwargs):
        print('B')
        super(B,self).__init__(**kwargs)

class C(object):
    def __init__(self, **kwargs):
        print('C')
        self.param=kwargs.pop('param',None)
        super(C,self).__init__(**kwargs)

class A(B, C):
    def __init__(self, **kwargs):
        print('A')
        super(A,self).__init__(**kwargs)

a=A(param=1)

# A
# B
# C
</snippet></ROW><ROW><id>6296708</id><snippet>super</snippet></ROW><ROW><id>6296708</id><snippet>__init__</snippet></ROW><ROW><id>6296708</id><snippet>A</snippet></ROW><ROW><id>6296708</id><snippet>C</snippet></ROW><ROW><id>6296708</id><snippet>param</snippet></ROW><ROW><id>6296708</id><snippet>B</snippet></ROW><ROW><id>6296708</id><snippet>**kwargs</snippet></ROW><ROW><id>6296708</id><snippet>A</snippet></ROW><ROW><id>6296708</id><snippet>A(param=p)</snippet></ROW><ROW><id>6296708</id><snippet>A(p)</snippet></ROW><ROW><id>6296708</id><snippet>A</snippet></ROW><ROW><id>6296708</id><snippet>kwargs</snippet></ROW><ROW><id>6296708</id><snippet>object</snippet></ROW><ROW><id>6296708</id><snippet>C</snippet></ROW><ROW><id>6296708</id><snippet>kwargs</snippet></ROW><ROW><id>6296708</id><snippet>B</snippet></ROW><ROW><id>6296708</id><snippet>B</snippet></ROW><ROW><id>6296708</id><snippet>C</snippet></ROW><ROW><id>6296708</id><snippet>super</snippet></ROW><ROW><id>6296708</id><snippet>super</snippet></ROW><ROW><id>6296730</id><snippet>save</snippet></ROW><ROW><id>6296730</id><snippet>class Post(models.Model):
    ...

    def save(self, *args, **kwargs):
        if self.is_published:
            self.time_publish = datetime.now() # don't forget import datetime
        super(Post, self).save(*args, **kwargs)
        ...
</snippet></ROW><ROW><id>6296856</id><snippet>&gt;&gt;&gt; if True:
...     print '1'
... print 'indentation error on this line'
  File "&lt;stdin&gt;", line 3
    print 'indentation error on this line'
        ^
SyntaxError: invalid syntax
&gt;&gt;&gt; def test():
...     if True:
...         print '1'
...     print 'no indentation error on this line'
... 
&gt;&gt;&gt; test()
1
no indentation error on this line
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6297037</id><snippet>os.killpg</snippet></ROW><ROW><id>6297037</id><snippet>os.kill</snippet></ROW><ROW><id>6297037</id><snippet>kill</snippet></ROW><ROW><id>6297037</id><snippet>SIGINT</snippet></ROW><ROW><id>6297037</id><snippet>2</snippet></ROW><ROW><id>6297037</id><snippet>signal</snippet></ROW><ROW><id>6297037</id><snippet>Popen</snippet></ROW><ROW><id>6297167</id><snippet>{% for data in Data.items %}
     &lt;td&gt;key: {{ data.0 }}: value: {{ data.1 }}&lt;/td&gt; 
{% endfor %}
</snippet></ROW><ROW><id>6297206</id><snippet>&lt;table&gt;
   &lt;thead&gt;
      &lt;th&gt;&lt;a href="test.html?sort=Name"&gt;Name&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href="test.html?sort=Location"&gt;Location&lt;/a&gt;&lt;/th&gt;
   &lt;/thead&gt;
   &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;Canada&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>6297206</id><snippet>   currentSort = Request["sort"] 
   data = db.Execute("select * from customersorder by " + sqlescape(currentSort))

  //write table header 
  foreach col in columns
    write("&lt;th&gt;&lt;a href='test.html?sort=" + col + "'&gt;" + col + "&lt;/a&gt;")

  //close header, start data 
  for each row in data    
    write...
</snippet></ROW><ROW><id>6297381</id><snippet>def login</snippet></ROW><ROW><id>6297381</id><snippet>Browser</snippet></ROW><ROW><id>6297381</id><snippet>class Browser(object):
    def __init__(self, loginCls):
        self.loginCls = loginCls

    def login_page(self):
        self.loginCls.login()
</snippet></ROW><ROW><id>6297407</id><snippet>array.fromfile()</snippet></ROW><ROW><id>6297497</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>6298328</id><snippet>\x</snippet></ROW><ROW><id>6298328</id><snippet>\x</snippet></ROW><ROW><id>6298328</id><snippet>s = '\x10\x00\x00\x00'
i = struct.unpack("I", s)[0]
</snippet></ROW><ROW><id>6298328</id><snippet>i</snippet></ROW><ROW><id>6298686</id><snippet>def newline(self, options, text = ''):
  if getattr(self, 'lpp', None) == self.lines[self.pages]:
    self.newpage()

  if getattr(self, 'y', None) &gt; self.h - self.bm * inch:
    self.newpage()
</snippet></ROW><ROW><id>6298686</id><snippet>def newline(self, options, text = ''):
  if getattr(self, 'lpp', None) == self.lines[self.pages]:
    self.newpage()

  if getattr(self, 'y', None) &gt; self.h - self.bm * inch:
    self.newpage()

  self.addLine()

  self.putText(self.x, self.h - self.y, text)

def putText(self, x, y, text):
  # If we actually place some text then we want to record that.
  if len(text.strip()) &gt; 0 and not self.hasText[self.pages]:
    self.hasText[self.pages] = True
  # Something here to handle word wrap.
  if self.wrap:
    lines = self._breakScan(text)

    if len(lines) &gt; 1:
      self.c.drawString(x, y, lines[0])

      self.newline('', ' '.join(lines[1:]))
    elif lines:
      self.c.drawString(x, y, lines[0])
  else:
    self.c.drawString(x, y, text)
</snippet></ROW><ROW><id>6298686</id><snippet>self.c</snippet></ROW><ROW><id>6298956</id><snippet>sys.stderr.flush()
</snippet></ROW><ROW><id>6299138</id><snippet>context</snippet></ROW><ROW><id>6299138</id><snippet>x</snippet></ROW><ROW><id>6299138</id><snippet>test</snippet></ROW><ROW><id>6299138</id><snippet>x</snippet></ROW><ROW><id>6299138</id><snippet>test</snippet></ROW><ROW><id>6299138</id><snippet>test</snippet></ROW><ROW><id>6299138</id><snippet>test</snippet></ROW><ROW><id>6299138</id><snippet>test.__dict__</snippet></ROW><ROW><id>6299138</id><snippet>__init__</snippet></ROW><ROW><id>6299138</id><snippet>__init__</snippet></ROW><ROW><id>6299138</id><snippet>exec</snippet></ROW><ROW><id>6299138</id><snippet>context</snippet></ROW><ROW><id>6299138</id><snippet>__del__</snippet></ROW><ROW><id>6299138</id><snippet>gc.collect()</snippet></ROW><ROW><id>6299138</id><snippet>gc.collect()</snippet></ROW><ROW><id>6299138</id><snippet>gc.set_threshold()</snippet></ROW><ROW><id>6299138</id><snippet>gc.collect()</snippet></ROW><ROW><id>6299138</id><snippet>context.clear()</snippet></ROW><ROW><id>6299347</id><snippet>distance</snippet></ROW><ROW><id>6299347</id><snippet>WHERE</snippet></ROW><ROW><id>6299347</id><snippet>HAVING</snippet></ROW><ROW><id>6299347</id><snippet>SELECT id, (long_formula) as distance FROM message WHERE (long_formula) &lt;= ...
</snippet></ROW><ROW><id>6299347</id><snippet>SELECT * FROM 
(SELECT id, (long_formula) AS distance FROM message) inner_query 
WHERE distance &lt;= ...
</snippet></ROW><ROW><id>6299347</id><snippet>HAVING</snippet></ROW><ROW><id>6299347</id><snippet>HAVING</snippet></ROW><ROW><id>6299347</id><snippet>SELECT id, (long_formula) as distance FROM message HAVING distance &lt;= ...
</snippet></ROW><ROW><id>6299638</id><snippet>-f</snippet></ROW><ROW><id>6299672</id><snippet>import time
import pickle


REGISTRY = None


def main(start=0):
    """Do some heavy work ..."""

    global REGISTRY

    a = start
    while 1:
        time.sleep(1)
        a += 1
        print a
        REGISTRY = pickle.dumps(a)


if __name__ == '__main__':
    print "To stop the script execution type CTRL-C"
    while 1:
       start = pickle.loads(REGISTRY) if REGISTRY else 0
        try:
            main(start=start)
        except KeyboardInterrupt:
            resume = raw_input('If you want to continue type the lettre c:')
            if resume != 'c':
                break
</snippet></ROW><ROW><id>6299672</id><snippet>$ python test.py
To stop the script execution type CTRL-C
1
2
3
^CIf you want to continue type the lettre c:c
4
5
6
7
8
9
^CIf you want to continue type the lettre c:
$ python test.py
</snippet></ROW><ROW><id>6299776</id><snippet>except</snippet></ROW><ROW><id>6299776</id><snippet>try</snippet></ROW><ROW><id>6299776</id><snippet>try</snippet></ROW><ROW><id>6299855</id><snippet>archive.writestr("name of file in zip", my_file.getvalue())
</snippet></ROW><ROW><id>6300449</id><snippet>start_new_thread</snippet></ROW><ROW><id>6300449</id><snippet>threading.Thread</snippet></ROW><ROW><id>6300467</id><snippet>string.ljust</snippet></ROW><ROW><id>6300467</id><snippet>&gt;&gt;&gt; from string import ljust
&gt;&gt;&gt; variable1 = "v1"
&gt;&gt;&gt; variable2 = "v2"
&gt;&gt;&gt; ljust(variable1, 4)
'v1  '
&gt;&gt;&gt; line = "%s%s" % (ljust(variable1, 4), variable2)
'v1  v2'
</snippet></ROW><ROW><id>6300467</id><snippet>%-formatting</snippet></ROW><ROW><id>6300467</id><snippet>&gt;&gt;&gt; from string import ljust
&gt;&gt;&gt; variable1 = "v1"
&gt;&gt;&gt; variable2 = "v2"
&gt;&gt;&gt; line = "%-4s%s" % (variable1, variable2)
'v1  v2'
</snippet></ROW><ROW><id>6300467</id><snippet>.4</snippet></ROW><ROW><id>6300467</id><snippet>variable1</snippet></ROW><ROW><id>6300467</id><snippet>&gt;&gt;&gt; variable1 = "12345"
&gt;&gt;&gt; variable2 = "v2"
&gt;&gt;&gt; line = "%-4s.4%s" % (variable1, variable2)
'v1  v2'
</snippet></ROW><ROW><id>6300516</id><snippet>list_b = []
for x in list_a:
    i = iter(x)
    name = next(i)
    list_b.extend((name,) + t for t in zip(*(y.split(",") for y in i)))
</snippet></ROW><ROW><id>6300839</id><snippet>foo</snippet></ROW><ROW><id>6300839</id><snippet>foo_bar</snippet></ROW><ROW><id>6300839</id><snippet>bar</snippet></ROW><ROW><id>6300839</id><snippet>foos</snippet></ROW><ROW><id>6300839</id><snippet>bars</snippet></ROW><ROW><id>6300839</id><snippet>foo_1</snippet></ROW><ROW><id>6300839</id><snippet>bar_1</snippet></ROW><ROW><id>6300839</id><snippet>bar_2</snippet></ROW><ROW><id>6300839</id><snippet>foo_2</snippet></ROW><ROW><id>6300839</id><snippet>bars</snippet></ROW><ROW><id>6300839</id><snippet>foo</snippet></ROW><ROW><id>6300839</id><snippet>foo_2</snippet></ROW><ROW><id>6300839</id><snippet>bars</snippet></ROW><ROW><id>6300839</id><snippet>SELECT foo.id as foo_id, bar.id as bar_id 
FROM foo LEFT OUTER JOIN foo_bar 
  ON foo_id = foo_bar.foo_id
LEFT OUTER JOIN bar
  ON foo_bar.bar_id = bar.id;
+--------+--------+
| foo_id | bar_id | 
+--------+--------+
| 1      | 1      |
| 1      | 2      |
| 2      | NULL   |
+--------+--------+
</snippet></ROW><ROW><id>6300839</id><snippet>Foo.objects.get(bar__isnull=True)</snippet></ROW><ROW><id>6300839</id><snippet>bar.id</snippet></ROW><ROW><id>6300839</id><snippet>NULL</snippet></ROW><ROW><id>6300839</id><snippet>foos</snippet></ROW><ROW><id>6300839</id><snippet>bars</snippet></ROW><ROW><id>6300839</id><snippet>SELECT foo.id as foo_id 
FROM foo LEFT OUTER JOIN foo_bar 
  ON foo_id = foo_bar.foo_id
LEFT OUTER JOIN bar
  ON foo_bar.bar_id = bar.id
where bar_id is NULL;
+--------+
| foo_id | 
+--------+
| 2      |
+--------+
</snippet></ROW><ROW><id>6300914</id><snippet>{{item}}</snippet></ROW><ROW><id>6300914</id><snippet>{{item|safe}}</snippet></ROW><ROW><id>6300980</id><snippet>from numpy.core.umath_tests import inner1d
Z = inner1d(X,Y)
</snippet></ROW><ROW><id>6300980</id><snippet>X = np.random.normal(size=(10,5))
Y = np.random.normal(size=(10,5))
Z1 = inner1d(X,Y)
Z2 = [np.dot(X[k],Y[k]) for k in range(10)]
print np.allclose(Z1,Z2)
</snippet></ROW><ROW><id>6300980</id><snippet>True</snippet></ROW><ROW><id>6300980</id><snippet>from numpy.core.umath_tests import matrix_multiply
X = np.random.normal(size=(10,5,3))
Y = np.random.normal(size=(10,3,5))
Z1 = matrix_multiply(X,Y)
Z2 = np.array([np.dot(X[k],Y[k]) for k in range(10)])
np.allclose(Z1,Z2)  # &lt;== returns True
</snippet></ROW><ROW><id>6300980</id><snippet>matrix_multiply</snippet></ROW><ROW><id>6300994</id><snippet>def Trace(ray):
  # Here was code to look for intersections

  if not hit:
      return Color(0, 0, 0)

  return hit.diffuse * (Trace(ray) + hit.emittance)
</snippet></ROW><ROW><id>6300994</id><snippet>d1 * (d2 * (d3 * (... + e3) + e2) + e1))</snippet></ROW><ROW><id>6300994</id><snippet>[d1 * e1] + [(d1 * d2) * e2] + [(d1 * d2) * d3) * e3] + ... </snippet></ROW><ROW><id>6300994</id><snippet>(d1, d1*d2, d1*d2*d3, ...)</snippet></ROW><ROW><id>6300994</id><snippet>def Trace(diffuse, emittance, ray):
  # Here was code to look for intersections

  if not hit: return emittance                            # The complete value has been computed

  new_diffuse = diffuse * hit.diffuse                     # (...) * dN
  new_emittance = emittance + new_diffuse * hit.emittance # (...) + [(d1 * ... * dN) + eN]
  return Trace(new_diffuse, new_emittance, ray)
</snippet></ROW><ROW><id>6300994</id><snippet>def Trace(diffuse, emittance, ray):
  beginning:
  # Here was code to look for intersections

  if not hit: return emittance                            # The complete value has been computed

  new_diffuse = diffuse * hit.diffuse                     # (...) * dN
  new_emittance = emittance + new_diffuse * hit.emittance # (...) + [(d1 * ... * dN) + eN]
  (diffuse, emittance) = (new_diffuse, new_emittance)
  goto beginning
</snippet></ROW><ROW><id>6300994</id><snippet>def Trace(diffuse, emittance, ray):
  while True:
    # Here was code to look for intersections

    if not hit: break

    diffuse = diffuse * hit.diffuse                 # (...) * dN
    emittance = emittance + diffuse * hit.emittance # (...) + [(d1 * ... * dN) + eN]

  return emittance
</snippet></ROW><ROW><id>6301029</id><snippet>-m</snippet></ROW><ROW><id>6301089</id><snippet>connection.setblocking(0)
print "Connected by", addr[0]
while(1):
    try:
        Servdata = connection.recv(1)
        break
    except:
        pass
</snippet></ROW><ROW><id>6301089</id><snippet>    while(Servdata != 'X'):
        Servdata = '9'
        try:
            Servdata = connection.recv(1)
        except:
            pass
        # ...
        else:
            pass
</snippet></ROW><ROW><id>6301089</id><snippet>recv()</snippet></ROW><ROW><id>6301089</id><snippet>settimeout()</snippet></ROW><ROW><id>6301089</id><snippet>recv()</snippet></ROW><ROW><id>6301089</id><snippet>        if Servdata == '~':
            motor.write(Servdata)
            retval = motor.readline()
            Serv.send(retval)
</snippet></ROW><ROW><id>6301089</id><snippet>Serv</snippet></ROW><ROW><id>6301089</id><snippet>connection.send(retval)</snippet></ROW><ROW><id>6301089</id><snippet>def on_GetPing_mouseClick(self, event):
    Client.send('~')
    retval = Client.recv()
    ping_data = retval.strip() # strip out the newline, if you read an entire line
    split_data = ping_data.split(',')
    L_Ping = split_data[0]
    R_Ping = split_data[1]
    self.components.PingLeft.text = str(L_Ping)
    self.components.PingRight.text = str(R_Ping)
</snippet></ROW><ROW><id>6301089</id><snippet>recv()</snippet></ROW><ROW><id>6301407</id><snippet>rm -rf ~/.Trash/*</snippet></ROW><ROW><id>6301768</id><snippet>&gt;&gt;&gt; probs_from_cdf = np.diff(stats.chi2.cdf(np.arange(nbins+1), 10))
&gt;&gt;&gt; probs_from_sf = np.diff(stats.chi2.sf(np.arange(nbins+1)[::-1], 10))[::-1]
&gt;&gt;&gt; probs_from_sf[:4]
array([ 0.00017212,  0.00348773,  0.01491609,  0.03407708])
&gt;&gt;&gt; probs_from_cdf[:4]
array([ 0.00017212,  0.00348773,  0.01491609,  0.03407708])
&gt;&gt;&gt; probs_from_cdf[-5:]
array([ 0.,  0.,  0.,  0.,  0.])
&gt;&gt;&gt; probs_from_sf[-5:]
array([  1.94252577e-20,   1.21955220e-20,   7.65430774e-21,
         4.80270079e-21,   3.01259913e-21])
</snippet></ROW><ROW><id>6301819</id><snippet>CHOICES = [(i,i) for i in range(11)]
</snippet></ROW><ROW><id>6301819</id><snippet>[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10,10)]
</snippet></ROW><ROW><id>6301823</id><snippet>find()</snippet></ROW><ROW><id>6301823</id><snippet>original</snippet></ROW><ROW><id>6301823</id><snippet>url = tree.find('.//original').text
</snippet></ROW><ROW><id>6301823</id><snippet>original</snippet></ROW><ROW><id>6301823</id><snippet>find()</snippet></ROW><ROW><id>6301823</id><snippet>//</snippet></ROW><ROW><id>6301823</id><snippet>from xml.etree import ElementTree
xmldata = '''&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;upload&gt;
    &lt;image&gt;
        &lt;name/&gt;
        &lt;title/&gt;
        &lt;caption/&gt;
        &lt;hash&gt;dxPGi&lt;/hash&gt;
        &lt;deletehash&gt;kj2XOt4DC13juUW&lt;/deletehash&gt;
        &lt;datetime&gt;2011-06-10 02:59:26&lt;/datetime&gt;
        &lt;type&gt;image/png&lt;/type&gt;
        &lt;animated&gt;false&lt;/animated&gt;
        &lt;width&gt;1024&lt;/width&gt;
        &lt;height&gt;768&lt;/height&gt;
        &lt;size&gt;172863&lt;/size&gt;
        &lt;views&gt;0&lt;/views&gt;
        &lt;bandwidth&gt;0&lt;/bandwidth&gt;
&lt;/image&gt;
&lt;links&gt;
    &lt;original&gt;http://i.stack.imgur.com/dxPGi.png&lt;/original&gt;
    &lt;imgur_page&gt;http://imgur.com/dxPGi&lt;/imgur_page&gt;
    &lt;delete_page&gt;http://imgur.com/delete/kj2XOt4DC13juUW&lt;/delete_page&gt;
    &lt;small_square&gt;http://i.stack.imgur.com/dxPGis.jpg&lt;/small_square&gt;
    &lt;large_thumbnail&gt;http://i.stack.imgur.com/dxPGil.jpg&lt;/large_thumbnail&gt;
&lt;/links&gt;
&lt;/upload&gt;'''
tree = ElementTree.fromstring(xmldata)
print tree.find('.//original').text
</snippet></ROW><ROW><id>6301823</id><snippet>Ian-Cs-MacBook-Pro:tmp ian$ python test.py 
http://i.stack.imgur.com/dxPGi.png
</snippet></ROW><ROW><id>6302257</id><snippet>class QuestionsAnswered(db.Model):
    answered = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>6302257</id><snippet>question_query = Questions.all().order('asked_date')
questions = questions.fetch(50)

if not questions:
  # return ... nothing to do here

month = questions[0].asked_date.strftime('%Y%m')
answered_list = QuestionsAnswered.get_by_key_name(month, parent=user)

question_keys = [question.key() for question in questions]
new_question_keys = set(question_keys) - set(answered_list.answered)
</snippet></ROW><ROW><id>6302500</id><snippet>from collections import defaultdict

yeartotal = defaultdict(float)
monthtotal = defaultdict(float)
for s in data:
    d = s[0].split('-')
    yeartotal[d[0]] += s[1]
    monthtotal[d[1]] += s[1]


In [37]: [item for item in yeartotal.iteritems()]
Out[37]: 
[('2002', 12000.0),
 ('2005', 6000.0),
 ('2008', 12000.0),
 ('2009', 15000.0),
 ('2011', 34507.0),
 ('2010', 27563.0)]

In [38]: [item for item in monthtotal.iteritems()]
Out[38]: 
[('02', 14107.0),
 ('03', 6000.0),
 ('12', 18000.0),
 ('06', 3000.0),
 ('07', 6000.0),
 ('04', 14400.0),
 ('05', 15960.0),
 ('08', 10170.0),
 ('09', 6000.0),
 ('01', 3000.0),
 ('11', 4170.0),
 ('10', 6263.0)]
</snippet></ROW><ROW><id>6302900</id><snippet>int</snippet></ROW><ROW><id>6302900</id><snippet>str</snippet></ROW><ROW><id>6302900</id><snippet>int</snippet></ROW><ROW><id>6302900</id><snippet>repr()</snippet></ROW><ROW><id>6302900</id><snippet>str()</snippet></ROW><ROW><id>6302929</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>6302929</id><snippet>&gt;&gt;&gt; [list(x[1]) for x in itertools.groupby([1, 2, 3], lambda x: x == 2) if not x[0]]
[[1], [3]]
</snippet></ROW><ROW><id>6303157</id><snippet>def handle_axis_movement(location, velocity):
    "returns updated location and velocity"
    ...

self.x, self.vel_x = handle_axis_movement(self.x, self.vel_x)
self.y, self.vel_y = handle_axis_movement(self.y, self.vel_y)
</snippet></ROW><ROW><id>6303157</id><snippet>location += velocity
if location &gt; max_bound:
    location = max_bound - (location - max_bound)
    velocity *= -1
if location &lt; min_bound:
    location = min_bound - (location - min_bound)
    velocity *= -1       
</snippet></ROW><ROW><id>6304519</id><snippet>__eq__</snippet></ROW><ROW><id>6304519</id><snippet>before_form == after_form</snippet></ROW><ROW><id>6304529</id><snippet>myfile</snippet></ROW><ROW><id>6304529</id><snippet>"0"</snippet></ROW><ROW><id>6304529</id><snippet>[('1', '1', '1', '1', '2'),  ('2', '2', '2', '2', '4'),      
 ('0', '3', '0', '3', '0'), ('0', '0', '0', '4', '0')]
</snippet></ROW><ROW><id>6304529</id><snippet>from itertools import izip_longest

rows = [line.split() for line in myfile]            # Read
rows = zip(*izip_longest(*rows, fillvalue="0"))     # Add zeroes
print "\n".join(" ".join(row) for row in rows)      # Write
</snippet></ROW><ROW><id>6304529</id><snippet>rows = [line.split() for line in myfile]
maxlen = max(len(x) for x in rows)
for row in rows:
    print " ".join(row + ["0"] * (maxlen - len(row)))
</snippet></ROW><ROW><id>6304529</id><snippet>from itertools import izip_longest

rows = [line.split() for line in myfile]
columns = list(izip_longest(*rows, fillvalue="0"))
column_width = [max(len(num) for num in col) for col in columns]

# We make a template of the form "{0:&gt;a} {1:&gt;b} {2:&gt;c} ...",
# where a, b, c, ... are the column widths:
column_template = "{{{0}:&gt;{1}s}}"
row_template = " ".join(column_template.format(i, n) for
    i, n in enumerate(column_width))

print "\n".join(row_template.format(*row) for row in zip(*columns))
</snippet></ROW><ROW><id>6304584</id><snippet>if (a == b) == c:
</snippet></ROW><ROW><id>6304584</id><snippet>True</snippet></ROW><ROW><id>6304584</id><snippet>False</snippet></ROW><ROW><id>6304584</id><snippet>c</snippet></ROW><ROW><id>6304782</id><snippet>import sys
import tempfile
import subprocess


def example(output):
    r""" Do something ...

    &gt;&gt;&gt; output = example('Processing file ...')
    &gt;&gt;&gt; print output # doctest:+ELLIPSIS
    'Processing file ...'

    Check how many file was processed.
    &gt;&gt;&gt; [line.startswith('Processing file')
    ... for line in output.splitlines()].count(True)
    1    

    """
    cmd = "print '%s'" % (output, )
    with tempfile.TemporaryFile() as output:
        subprocess.check_call([sys.executable, '-c', cmd], stdout=output)
        output.seek(0)
        res = output.read()

    return res

if __name__ == '__main__':
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>6304782</id><snippet>stdout</snippet></ROW><ROW><id>6304782</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>6304782</id><snippet>stdout</snippet></ROW><ROW><id>6304825</id><snippet>GGVecLib.c</snippet></ROW><ROW><id>6304825</id><snippet>FitCurves.c</snippet></ROW><ROW><id>6304835</id><snippet>li.append((3, 'three'))
</snippet></ROW><ROW><id>6304835</id><snippet>()    # this is a 0-length tuple
(1,)  # this is a tuple containing "1"
1,    # this is a tuple containing "1"
(1)   # this is number one - it's exactly the same as:
1     # also number one
(1,2) # tuple with 2 elements
1,2   # tuple with 2 elements
</snippet></ROW><ROW><id>6304835</id><snippet>type() # &lt;- missing argument
type(()) # returns &lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>6305083</id><snippet>.</snippet></ROW><ROW><id>6305083</id><snippet>user = User()
print user.fullName
</snippet></ROW><ROW><id>6305083</id><snippet>getattr</snippet></ROW><ROW><id>6305083</id><snippet>field_name = "fullName"
print getattr(user, field_name) # prints content of user.fullName
</snippet></ROW><ROW><id>6305121</id><snippet>.sql</snippet></ROW><ROW><id>6305121</id><snippet># setup
PRAGMA foreign_keys=ON;
PRAGMA journal_mode=TRUNCATE;
PRAGMA locking_mode=EXCLUSIVE;
PRAGMA synchronous=NORMAL;

# Locations
CREATE TABLE IF NOT EXISTS Locations (
    locID INTEGER PRIMARY KEY,
    locPath TEXT NOT NULL
);
# blah-blah
CREATE UNIQUE INDEX IF NOT EXISTS fldPath_idx
ON Folders(fldPath);
# and so on
</snippet></ROW><ROW><id>6305121</id><snippet>def db_schema(self):
    cur= self._db.cursor()
    with io.open(self.SQLPATH, "r") as fp:
        sql_statement= ""
        for line in fp:
            line= line.rstrip()
            if line.startswith('#'): continue
            sql_statement+= line
            if line.endswith(";"):
                try:
                    cur.execute(sql_statement)
                except sql.OperationalError:
                    print("Failed:\n%s" % sql_statement)
                sql_statement= ""
    # file is done
    cur.close()
</snippet></ROW><ROW><id>6305121</id><snippet>CREATE TABLE IF NOT EXISTS</snippet></ROW><ROW><id>6305121</id><snippet>CREATE INDEX IF NOT EXISTS</snippet></ROW><ROW><id>6305632</id><snippet>int.TryParse</snippet></ROW><ROW><id>6305632</id><snippet>int.Parse</snippet></ROW><ROW><id>6305685</id><snippet>class Bunch(object)</snippet></ROW><ROW><id>6305685</id><snippet>self.__dict__</snippet></ROW><ROW><id>6305685</id><snippet>object.__setattr__</snippet></ROW><ROW><id>6305685</id><snippet>self.__setattr__</snippet></ROW><ROW><id>6305685</id><snippet>__dict__</snippet></ROW><ROW><id>6305685</id><snippet>object.__dict__</snippet></ROW><ROW><id>6305719</id><snippet>&lt;form action="" method="post"&gt;
  &lt;table&gt;
    &lt;tr&gt;&lt;td&gt;&lt;div style="overflow: auto; width : 200px; height : 50px;"&gt;
      {{ form.as_p }}
    &lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td colspan="2"&gt;&lt;input type="submit" value="Save"/&gt;&lt;/td&gt;&lt;/tr&gt;
  &lt;/table&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>6305726</id><snippet>re.sub(r'^(\d{3})0(\d)$', r'\g&lt;1&gt;1\2', '7001')
</snippet></ROW><ROW><id>6305726</id><snippet>re.sub(r'^(\d+)0(\d)$', r'\g&lt;1&gt;1\2', '1234509')
</snippet></ROW><ROW><id>6305726</id><snippet>re.sub(r'0(?=\d$)', '1', '7001')
</snippet></ROW><ROW><id>6305727</id><snippet> /* speed hack: we could use lookup_maybe, but that would resolve the
       method fully for each attribute lookup for classes with
       __getattr__, even when the attribute is present. So we use
       _PyType_Lookup and create the method only when needed, with
       call_attribute. */
    getattr = _PyType_Lookup(tp, getattr_str);
    if (getattr == NULL) {
        /* No __getattr__ hook: use a simpler dispatcher */
        tp-&gt;tp_getattro = slot_tp_getattro;
        return slot_tp_getattro(self, name);
    }
</snippet></ROW><ROW><id>6305727</id><snippet>class AttrDict(dict):
    """A dictionary with attribute-style access. It maps attribute access to
    the real dictionary.  """
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)

    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, dict.__repr__(self))

    def __setitem__(self, key, value):
        return super(AttrDict, self).__setitem__(key, value)

    def __getitem__(self, name):
        return super(AttrDict, self).__getitem__(name)

    def __delitem__(self, name):
        return super(AttrDict, self).__delitem__(name)

    __getattr__ = __getitem__
    __setattr__ = __setitem__

     def copy(self):
        return AttrDict(self)
</snippet></ROW><ROW><id>6306113</id><snippet>(\w)\1*</snippet></ROW><ROW><id>6306377</id><snippet>os.chdir()</snippet></ROW><ROW><id>6306377</id><snippet>'..'</snippet></ROW><ROW><id>6306377</id><snippet>os.pardir</snippet></ROW><ROW><id>6306377</id><snippet>os.chdir(os.pardir)
</snippet></ROW><ROW><id>6307292</id><snippet>numpy.interp</snippet></ROW><ROW><id>6307292</id><snippet>numpy.interp</snippet></ROW><ROW><id>6307292</id><snippet>interp1d</snippet></ROW><ROW><id>6307292</id><snippet>kind='nearest'</snippet></ROW><ROW><id>6307350</id><snippet>pp</snippet></ROW><ROW><id>6307430</id><snippet>from email import utils
utils.parsedate_tz('Fri, 10 Jun 2011 11:04:17 +0200 (CEST)') 
utils.parsedate_tz('Fri, 10 Jun 2011 11:04:17 +0200')
utils.parsedate_tz('Fri, 10 Jun 2011 11:04:17')
</snippet></ROW><ROW><id>6307430</id><snippet>(2011, 6, 10, 11, 4, 17, 0, 1, -1, 7200)
(2011, 6, 10, 11, 4, 17, 0, 1, -1, 7200)
(2011, 6, 10, 11, 4, 17, 0, 1, -1, None)
</snippet></ROW><ROW><id>6307455</id><snippet>.keys()</snippet></ROW><ROW><id>6307455</id><snippet>del dictionary[key]</snippet></ROW><ROW><id>6307455</id><snippet>dictionary.pop(key)</snippet></ROW><ROW><id>6307455</id><snippet>for x in list(dict2.keys()):
    if dict2[x] == []:
        del dict2[x]
</snippet></ROW><ROW><id>6307672</id><snippet>sys.displayhook</snippet></ROW><ROW><id>6307672</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; 1
1
&gt;&gt;&gt; "1"
'1'
&gt;&gt;&gt; def display_as_hex(item):
...     if isinstance(item, (int, long)):
...         print hex(item)
...     else:
...         print repr(item)
...
&gt;&gt;&gt; sys.displayhook = display_as_hex
&gt;&gt;&gt; 1
0x1
&gt;&gt;&gt; "1"
'1'
</snippet></ROW><ROW><id>6307868</id><snippet>__init__</snippet></ROW><ROW><id>6307868</id><snippet>def for_all_methods(decorator):
    def decorate(cls):
        for attr in cls.__dict__: # there's propably a better way to do this
            if callable(getattr(cls, attr)):
                setattr(cls, attr, decorator(getattr(cls, attr)))
        return cls
    return decorate
</snippet></ROW><ROW><id>6307868</id><snippet>@for_all_methods(mydecorator)
class C(object):
    def m1(self): pass
    def m2(self, x): pass
    ...
</snippet></ROW><ROW><id>6307868</id><snippet>callable</snippet></ROW><ROW><id>6307868</id><snippet>isinstance(x, collections.Callable)</snippet></ROW><ROW><id>6307868</id><snippet>callable</snippet></ROW><ROW><id>6307909</id><snippet>ModelAdmin</snippet></ROW><ROW><id>6307909</id><snippet>admin.site.register(Site) # Notice that no ModelAdmin is passed
</snippet></ROW><ROW><id>6307909</id><snippet>clean_domain</snippet></ROW><ROW><id>6307909</id><snippet>ModelForm</snippet></ROW><ROW><id>6307909</id><snippet>clean_FOO</snippet></ROW><ROW><id>6307909</id><snippet>FOO</snippet></ROW><ROW><id>6307909</id><snippet>from django import forms

class SiteAdminForm(forms.ModelForm):

    def clean_domain(self):
        domain = self.cleaned_data.get('domain')
        # Custom validation here

        return domain

class SiteAdmin(admin.ModelAdmin):
    form = SiteAdminForm

admin.site.unregister(Site)
admin.site.register(Site, SiteAdmin)    
</snippet></ROW><ROW><id>6308084</id><snippet>topic</snippet></ROW><ROW><id>6308084</id><snippet>#</snippet></ROW><ROW><id>6308447</id><snippet>template &lt;class BaseClass, typename T, BaseClass&amp; (BaseClass::*method)(T)&gt;
void make_nonfluent_setter(BaseClass&amp; self, T value)
{
    (self.*method)(value);
}
</snippet></ROW><ROW><id>6308447</id><snippet>class_&lt;Foo&gt;("Foo")
  .add_property(
    "bar",
    (int (Foo::*)())&amp;Foo::bar,
    make_nonfluent_setter&lt;Foo, int, &amp;Foo::bar&gt;
  )
;
</snippet></ROW><ROW><id>6308596</id><snippet>until</snippet></ROW><ROW><id>6308596</id><snippet>help until</snippet></ROW><ROW><id>6308596</id><snippet>pdb</snippet></ROW><ROW><id>6308840</id><snippet>piston</snippet></ROW><ROW><id>6308840</id><snippet>tastypie</snippet></ROW><ROW><id>6308840</id><snippet>piston</snippet></ROW><ROW><id>6308840</id><snippet>tastypie</snippet></ROW><ROW><id>6308840</id><snippet>django-rest-framework</snippet></ROW><ROW><id>6308861</id><snippet>import re
for n in list:
    if re.search(r"one\d+", n):
        add one to a counter
</snippet></ROW><ROW><id>6308861</id><snippet>for n in list:
    if re.search(r"^the\d+one\d+$", n):
        add one to a counter
</snippet></ROW><ROW><id>6309011</id><snippet>django.core.management.call_command</snippet></ROW><ROW><id>6309636</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def main():
    x = np.linspace(0, 6 * np.pi, 100)

    fig1, (ax1, ax2) = plt.subplots(nrows=2)
    plot(x, np.sin(x), ax1)
    plot(x, np.random.random(100), ax2)

    fig2 = plt.figure()
    plot(x, np.cos(x))

    plt.show()

def plot(x, y, ax=None):
    if ax is None:
        ax = plt.gca()
    line, = ax.plot(x, y, 'go')
    ax.set_ylabel('Yabba dabba do!')
    return line

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6309636</id><snippet>def subplot(data, fig=None, index=111):
    if fig is None:
        fig = plt.figure()
    ax = fig.add_subplot(index)
    ax.plot(data)
</snippet></ROW><ROW><id>6309636</id><snippet>import matplotlib.pyplot as plt

fig1, ax = plt.subplots()
ax.plot(range(10))

fig2 = plt.figure()
fig2.axes.append(ax)

plt.show()
</snippet></ROW><ROW><id>6309645</id><snippet>import itertools

def generator():
    for i in range(10):
       yield i

def process(l):
    for i in l:
        if i == 5:
            break

def counter_value(counter):
    import re
    return int(re.search('\d+', repr(counter)).group(0))

counter = itertools.count()
process(i for i, v in itertools.izip(generator(), counter))

print "Element consumed by process is : %d " % counter_value(counter)
# output: Element consumed by process is : 6
</snippet></ROW><ROW><id>6309738</id><snippet>re.sub</snippet></ROW><ROW><id>6309738</id><snippet>re.sub(pattern, repl, string, count=0)
</snippet></ROW><ROW><id>6309738</id><snippet>re.sub(ur"[^-' ().,\w]+",'' ,u'Castañeda',re.UNICODE)
</snippet></ROW><ROW><id>6309738</id><snippet>count</snippet></ROW><ROW><id>6309738</id><snippet>re.UNICODE</snippet></ROW><ROW><id>6309738</id><snippet>In [57]: re.sub(ur"(?u)[^-' ().,\w]+",'' ,u'Castañeda')
Out[57]: u'Casta\xf1eda'
</snippet></ROW><ROW><id>6309738</id><snippet>(?u)</snippet></ROW><ROW><id>6309738</id><snippet>
(?iLmsux)</snippet></ROW><ROW><id>6309738</id><snippet>re.split</snippet></ROW><ROW><id>6309738</id><snippet>re.split(pattern, string, maxsplit=0)
</snippet></ROW><ROW><id>6309753</id><snippet>import sys, tempfile, os
from subprocess import call

EDITOR = os.environ.get('EDITOR','vim') #that easy!

initial_message = "" # if you want to set up the file somehow

with tempfile.NamedTemporaryFile(suffix=".tmp") as tempfile:
  tempfile.write(initial_message)
  tempfile.flush()
  call([EDITOR, tempfile.name])
  # do the parsing with `tempfile` using regular File operations
</snippet></ROW><ROW><id>6309877</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-s', type=int)
[...]
&gt;&gt;&gt; parser.add_argument('-p', type=int, nargs='*')
[...]
&gt;&gt;&gt; group = parser.add_mutually_exclusive_group(required=True)
&gt;&gt;&gt; group.add_argument('-r', action='store_true')
[...]    
&gt;&gt;&gt; group.add_argument('-w', action='store_true')
[...]    
&gt;&gt;&gt; group.add_argument('-c', action='store_true')
[...]    
&gt;&gt;&gt; parser.parse_args("-s 1 -p 0 1 2 3 -r".split())
Namespace(c=False, p=[0, 1, 2, 3], r=True, s=1, w=False)
</snippet></ROW><ROW><id>6309965</id><snippet>No,name,lastname,hobby
1,jhon,g,fishing
2,mike,a,boxing
3,tom,v,sking
</snippet></ROW><ROW><id>6309965</id><snippet>In [1]: import csv

In [2]: for d in csv.DictReader(open('file.txt')): print d
   ...: 
{'hobby': 'fishing', 'lastname': 'g', 'name': 'jhon', 'No': '1'}
{'hobby': 'boxing', 'lastname': 'a', 'name': 'mike', 'No': '2'}
{'hobby': 'sking', 'lastname': 'v', 'name': 'tom', 'No': '3'}
</snippet></ROW><ROW><id>6309994</id><snippet>background = canvas.copy_from_bbox(fig.bbox)</snippet></ROW><ROW><id>6309994</id><snippet>background = canvas.copy_from_bbox(ax.bbox.expanded(1.1, 1.2))</snippet></ROW><ROW><id>6309994</id><snippet>ax.bbox</snippet></ROW><ROW><id>6309994</id><snippet>ax.bbox.union([label.get_window_extent() for label in ax.get_xticklabels()])</snippet></ROW><ROW><id>6310301</id><snippet>static</snippet></ROW><ROW><id>6310301</id><snippet>static</snippet></ROW><ROW><id>6310301</id><snippet>static</snippet></ROW><ROW><id>6310301</id><snippet>private</snippet></ROW><ROW><id>6310447</id><snippet>subprocess.call(['/usr/local/bin/growlnotify', '-n',  'emesene', '-a', 'emesene', '-t', title, '-m', text])
</snippet></ROW><ROW><id>6310490</id><snippet>datetime.datetime.now() + datetime.timedelta(days=1, hours=3)
</snippet></ROW><ROW><id>6310545</id><snippet>Makespec.py</snippet></ROW><ROW><id>6310804</id><snippet>quotes</snippet></ROW><ROW><id>6310804</id><snippet>zip</snippet></ROW><ROW><id>6310804</id><snippet>import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
from matplotlib.finance import candlestick
from matplotlib.dates import date2num

datafile = 'Downloads/AUD_Q10_1D_500.csv'
r = mlab.csv2rec(datafile, delimiter=';')

quotes = zip(date2num(r['date']),r['open'],r['close'],r['max'],r['min'])

fig, ax = plt.subplots()
candlestick(ax, quotes, width=0.6)

plt.show()
</snippet></ROW><ROW><id>6310888</id><snippet>set()</snippet></ROW><ROW><id>6310888</id><snippet>frozenset()</snippet></ROW><ROW><id>6311351</id><snippet>logging</snippet></ROW><ROW><id>6311351</id><snippet>pdb</snippet></ROW><ROW><id>6311832</id><snippet>type</snippet></ROW><ROW><id>6311832</id><snippet>type(object)</snippet></ROW><ROW><id>6311832</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>6311832</id><snippet>def massage(fields_dict):
    #transform your file format into a valid set of fields, and return it

user_class = type(yaml_data['model'], Document, massage(yaml_data['fields']) )
</snippet></ROW><ROW><id>6311832</id><snippet>import yaml
import Rx

data = yaml.load(open("foo.yaml")
rx = Rx.Factory({ "register_core_types": True })
schema = rx.make_schema(yaml.load(open("schema.yaml")))

if not schema.check(data):
    raise ValueError("data file contents are not in a valid format")
</snippet></ROW><ROW><id>6312005</id><snippet>str.rstrip()</snippet></ROW><ROW><id>6312005</id><snippet>str(test1)[:-9]
</snippet></ROW><ROW><id>6312005</id><snippet>test1.date().isoformat()
</snippet></ROW><ROW><id>6312008</id><snippet>SetLabel</snippet></ROW><ROW><id>6312121</id><snippet>from xml.etree import ElementTree as et

data = '''\
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;HeaderLookup&gt;
    &lt;Header&gt;
        &lt;Reserved&gt;2&lt;/Reserved&gt;
        &lt;CPU&gt;1&lt;/CPU&gt;
        &lt;Flag&gt;1&lt;/Flag&gt;
        &lt;VQI&gt;12&lt;/VQI&gt;
        &lt;Group_ID&gt;16&lt;/Group_ID&gt;
        &lt;DI&gt;2&lt;/DI&gt;
        &lt;DE&gt;1&lt;/DE&gt;
        &lt;ACOSS&gt;5&lt;/ACOSS&gt;
        &lt;RGH&gt;8&lt;/RGH&gt;
    &lt;/Header&gt;
&lt;/HeaderLookup&gt;
'''

tree = et.fromstring(data)
for n in tree.find('Header'):
    print n.tag,'=',n.text
</snippet></ROW><ROW><id>6312121</id><snippet>Reserved = 2
CPU = 1
Flag = 1
VQI = 12
Group_ID = 16
DI = 2
DE = 1
ACOSS = 5
RGH = 8
</snippet></ROW><ROW><id>6312121</id><snippet>.tail</snippet></ROW><ROW><id>6312121</id><snippet>tail</snippet></ROW><ROW><id>6312121</id><snippet>text</snippet></ROW><ROW><id>6312121</id><snippet>def dump(e):
    print '&lt;%s&gt;' % e.tag
    print 'text =',repr(e.text)
    for n in e:
        dump(n)
    print '&lt;/%s&gt;' % e.tag
    print 'tail =',repr(e.tail)

dump(tree)
</snippet></ROW><ROW><id>6312121</id><snippet>&lt;HeaderLookup&gt;
text = '\n    '
&lt;Header&gt;
text = '\n        '
&lt;Reserved&gt;
text = '2'
&lt;/Reserved&gt;
tail = '\n        '
&lt;CPU&gt;
text = '1'
&lt;/CPU&gt;
tail = '\n        '
&lt;Flag&gt;
text = '1'
&lt;/Flag&gt;
tail = '\n        '
&lt;VQI&gt;
text = '12'
&lt;/VQI&gt;
tail = '\n        '
&lt;Group_ID&gt;
text = '16'
&lt;/Group_ID&gt;
tail = '\n        '
&lt;DI&gt;
text = '2'
&lt;/DI&gt;
tail = '\n        '
&lt;DE&gt;
text = '1'
&lt;/DE&gt;
tail = '\n        '
&lt;ACOSS&gt;
text = '5'
&lt;/ACOSS&gt;
tail = '\n        '
&lt;RGH&gt;
text = '8'
&lt;/RGH&gt;
tail = '\n    '
&lt;/Header&gt;
tail = '\n'
&lt;/HeaderLookup&gt;
tail = None
</snippet></ROW><ROW><id>6312141</id><snippet>def set_bla(self, value):
    raise AttributeError("'bla' is a read-only property of class X")
</snippet></ROW><ROW><id>6312141</id><snippet>bla = property(fget=get_bla, fset=set_bla)
</snippet></ROW><ROW><id>6312410</id><snippet>itertools.product()</snippet></ROW><ROW><id>6312410</id><snippet>for p, r, s in itertools.product(prefix, roots, suffix):
    print p, r, s
</snippet></ROW><ROW><id>6312947</id><snippet>__init__</snippet></ROW><ROW><id>6312947</id><snippet>__init__</snippet></ROW><ROW><id>6312947</id><snippet>class Competition(MultiName):
    def __init__(self, *args, **kwargs):
        if "compId" in kwargs:
            kwargs["entId"] = kwargs.pop("compId")
        super(Competition, self).__init__(*args, **kwargs)

class MultiName(models.Model):
    entId = models.CharField(null=True, max_length=25); 
    canonicalName = models.CharField(max_length=50, primary_key=True);
</snippet></ROW><ROW><id>6313059</id><snippet>conn.set_debuglevel(1)
</snippet></ROW><ROW><id>6313315</id><snippet>MakePlot</snippet></ROW><ROW><id>6313315</id><snippet>fig = editor.object.figure
</snippet></ROW><ROW><id>6313315</id><snippet>fig = editor.object.figu
</snippet></ROW><ROW><id>6313324</id><snippet>#!/usr/bin/python

import sys

saved_stdin = sys.stdin
sys.stdin = open('/dev/tty', 'r')
result = raw_input('Enter something: ')
sys.stdout.write('Got: ' + result + '\n')
sys.stdin = saved_stdin
result2 = sys.stdin.read()
sys.stdout.write('Also got: ' + result2)
</snippet></ROW><ROW><id>6313324</id><snippet>foo.py</snippet></ROW><ROW><id>6313324</id><snippet>echo goodbye | ./foo.py</snippet></ROW><ROW><id>6313324</id><snippet>/dev/tty</snippet></ROW><ROW><id>6313324</id><snippet>open()</snippet></ROW><ROW><id>6313414</id><snippet>import numpy as np

matrix = np.array(
         [[-2,  5,  3,  2],
          [ 9, -6,  5,  1],
          [ 3,  2,  7,  3],
          [-1,  8, -4,  8]])

diags = [matrix[::-1,:].diagonal(i) for i in range(-3,4)]
diags.extend(matrix.diagonal(i) for i in range(3,-4,-1))
print [n.tolist() for n in diags]
</snippet></ROW><ROW><id>6313414</id><snippet>[[-2], [9, 5], [3, -6, 3], [-1, 2, 5, 2], [8, 7, 1], [-4, 3], [8], [2], [3, 1], [5, 5, 3], [-2, -6, 7, 8], [9, 2, -4], [3, 8], [-1]]
</snippet></ROW><ROW><id>6313414</id><snippet>import numpy as np

# Alter dimensions as needed
x,y = 3,4

# create a default array of specified dimensions
a = np.arange(x*y).reshape(x,y)
print a
print

# a.diagonal returns the top-left-to-lower-right diagonal "i"
# according to this diagram:
#
#  0  1  2  3  4 ...
# -1  0  1  2  3
# -2 -1  0  1  2
# -3 -2 -1  0  1
#  :
#
# You wanted lower-left-to-upper-right and upper-left-to-lower-right diagonals.
#
# The syntax a[slice,slice] returns a new array with elements from the sliced ranges,
# where "slice" is Python's [start[:stop[:step]] format.

# "::-1" returns the rows in reverse. ":" returns the columns as is,
# effectively vertically mirroring the original array so the wanted diagonals are
# lower-right-to-uppper-left.
#
# Then a list comprehension is used to collect all the diagonals.  The range
# is -x+1 to y (exclusive of y), so for a matrix like the example above
# (x,y) = (4,5) = -3 to 4.
diags = [a[::-1,:].diagonal(i) for i in range(-a.shape[0]+1,a.shape[1])]

# Now back to the original array to get the upper-left-to-lower-right diagonals,
# starting from the right, so the range needed for shape (x,y) was y-1 to -x+1 descending.
diags.extend(a.diagonal(i) for i in range(a.shape[1]-1,-a.shape[0],-1))

# Another list comp to convert back to Python lists from numpy arrays,
# so it prints what you requested.
print [n.tolist() for n in diags]
</snippet></ROW><ROW><id>6313414</id><snippet>[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

[[0], [4, 1], [8, 5, 2], [9, 6, 3], [10, 7], [11], [3], [2, 7], [1, 6, 11], [0, 5, 10], [4, 9], [8]]
</snippet></ROW><ROW><id>6313474</id><snippet>__getstate__()</snippet></ROW><ROW><id>6313474</id><snippet>pickle</snippet></ROW><ROW><id>6313474</id><snippet>thing.__dict__</snippet></ROW><ROW><id>6313474</id><snippet>class Thing:
      def __getstate__(self):
            state = dict(self.__dict__)
            del state['cachedBar']
            return state
</snippet></ROW><ROW><id>6313474</id><snippet>__setstate__(state)</snippet></ROW><ROW><id>6313764</id><snippet>postal_code</snippet></ROW><ROW><id>6313764</id><snippet>class AddressForm(ModelForm):
    class Meta:
        model = Address
        widgets = {
            'postal_code': CharField(max_length=10),
        }
</snippet></ROW><ROW><id>6313868</id><snippet>shell=True</snippet></ROW><ROW><id>6313868</id><snippet>creationflags=subprocess.SW_HIDE</snippet></ROW><ROW><id>6313868</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6313868</id><snippet>subprocess.Popen(['test.bat'], shell=True, creationflags=subprocess.SW_HIDE)
</snippet></ROW><ROW><id>6313868</id><snippet>SW_HIDE</snippet></ROW><ROW><id>6313868</id><snippet>subprocess</snippet></ROW><ROW><id>6313868</id><snippet>_subprocess.SW_HIDE</snippet></ROW><ROW><id>6314025</id><snippet>ProjectsForm</snippet></ROW><ROW><id>6314025</id><snippet>class ProjectsForm(forms.ModelForm):
    name = forms.ModelChoiceField(queryset=Employee.objects.all(),
            empty_label="(Select a Project)", required=True)

    class Meta:
        model = Projects

    def __init__(self, user, *args, **kwargs):
        super(self, ProjectsForm).init(*args, **kwargs)
        employee = get_object_or_404(Employee, user=user)
        self.fields['name'].queryset = employee.projects_set.all()
</snippet></ROW><ROW><id>6314025</id><snippet>ProjectsForm</snippet></ROW><ROW><id>6314025</id><snippet>user</snippet></ROW><ROW><id>6314025</id><snippet>__init__()</snippet></ROW><ROW><id>6314025</id><snippet>form = ProjectsForm(data=request.POST)
</snippet></ROW><ROW><id>6314025</id><snippet>ProjectsForm.__init__(data=request.POST)</snippet></ROW><ROW><id>6314025</id><snippet>ProjectsForm</snippet></ROW><ROW><id>6314025</id><snippet>form = ProjectsForm(request.user, data=request.POST)
</snippet></ROW><ROW><id>6314025</id><snippet>user</snippet></ROW><ROW><id>6314025</id><snippet>name</snippet></ROW><ROW><id>6314292</id><snippet>extract()</snippet></ROW><ROW><id>6314292</id><snippet>div</snippet></ROW><ROW><id>6314292</id><snippet>div</snippet></ROW><ROW><id>6314292</id><snippet>html</snippet></ROW><ROW><id>6314292</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; soup.div.div.extract()
&lt;div class="nesteddiv"&gt;
&lt;p&gt;one&lt;/p&gt;
&lt;p&gt;two&lt;/p&gt;
&lt;p&gt;three&lt;/p&gt;
&lt;/div&gt;
&gt;&gt;&gt; soup.div
&lt;div class="div1"&gt;
&lt;p&gt;hello&lt;/p&gt;
&lt;p&gt;hi&lt;/p&gt;

&lt;/div&gt;
</snippet></ROW><ROW><id>6314422</id><snippet>__dict__</snippet></ROW><ROW><id>6314422</id><snippet>__slots__</snippet></ROW><ROW><id>6314422</id><snippet>__dict__</snippet></ROW><ROW><id>6314422</id><snippet>__dict__</snippet></ROW><ROW><id>6314634</id><snippet>re</snippet></ROW><ROW><id>6314634</id><snippet>re.UNICODE</snippet></ROW><ROW><id>6314634</id><snippet>\w</snippet></ROW><ROW><id>6314634</id><snippet>\w</snippet></ROW><ROW><id>6314634</id><snippet>[^\W\d_]
</snippet></ROW><ROW><id>6314634</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'[^\W\d_]', re.U)
&gt;&gt;&gt; r.match('x')
&lt;_sre.SRE_Match object at 0x0000000001DBCF38&gt;
&gt;&gt;&gt; r.match(u'é')
&lt;_sre.SRE_Match object at 0x0000000002253030&gt;
</snippet></ROW><ROW><id>6314856</id><snippet>block in group.block_set.all()
</snippet></ROW><ROW><id>6315223</id><snippet>float("0.5")</snippet></ROW><ROW><id>6315463</id><snippet>io</snippet></ROW><ROW><id>6315463</id><snippet>~/projectdir</snippet></ROW><ROW><id>6315463</id><snippet>import io
</snippet></ROW><ROW><id>6315463</id><snippet>io</snippet></ROW><ROW><id>6315463</id><snippet>io.py</snippet></ROW><ROW><id>6315463</id><snippet>io.pyc</snippet></ROW><ROW><id>6315463</id><snippet>sys.path</snippet></ROW><ROW><id>6315463</id><snippet>~/projectdir</snippet></ROW><ROW><id>6315463</id><snippet>io</snippet></ROW><ROW><id>6315484</id><snippet>angle</snippet></ROW><ROW><id>6315484</id><snippet>newa</snippet></ROW><ROW><id>6315484</id><snippet>]</snippet></ROW><ROW><id>6315484</id><snippet>newa&gt;0</snippet></ROW><ROW><id>6315484</id><snippet>rt</snippet></ROW><ROW><id>6315484</id><snippet>pop</snippet></ROW><ROW><id>6315484</id><snippet>-1</snippet></ROW><ROW><id>6315484</id><snippet>len(lst) - 1</snippet></ROW><ROW><id>6315484</id><snippet>pop</snippet></ROW><ROW><id>6315484</id><snippet>&gt;&gt;&gt; state = []
&gt;&gt;&gt; angle = 90
&gt;&gt;&gt; posx = 10
&gt;&gt;&gt; posy = 15
&gt;&gt;&gt; state.append((angle, posx, posy))
&gt;&gt;&gt; angle = 40
&gt;&gt;&gt; angle, posx, posy = state.pop()
&gt;&gt;&gt; angle
90
</snippet></ROW><ROW><id>6315525</id><snippet>person = Person('john')
person = Person('james')
# Whoops! 'john' has died!

people = []
people.append(Person('john'))
# ...
# All 'Persons' live in people
people = []
# Now all 'Persons' are dead (including the list that referenced them)

class House():
    def setOwner(self, person):
        self.owner = person

house.setOwner(people[0])
# Now a House refers to a Person
people = []
# Now all 'Persons' are dead, except the one that house.owner refers to.
</snippet></ROW><ROW><id>6315525</id><snippet>people = {}
people['john'] = Person('john')

def removePerson(personName):
    del people[personName]

removePerson('john')
</snippet></ROW><ROW><id>6315525</id><snippet>people</snippet></ROW><ROW><id>6315525</id><snippet>Person</snippet></ROW><ROW><id>6315525</id><snippet>House</snippet></ROW><ROW><id>6315869</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>6315869</id><snippet>if (a % b) == 0: #do something
</snippet></ROW><ROW><id>6315943</id><snippet>def make_C(parent):
    class C(parent):
        def bar(self):
            ...
    return C

myClass1 = make_C(A)
myClass2 = make_C(B)
</snippet></ROW><ROW><id>6315943</id><snippet>__name__</snippet></ROW><ROW><id>6315943</id><snippet>__doc__</snippet></ROW><ROW><id>6315943</id><snippet>type()</snippet></ROW><ROW><id>6315943</id><snippet>class</snippet></ROW><ROW><id>6315972</id><snippet>.exe</snippet></ROW><ROW><id>6315972</id><snippet>.zip</snippet></ROW><ROW><id>6315972</id><snippet>python setup.py install</snippet></ROW><ROW><id>6315972</id><snippet>PATH</snippet></ROW><ROW><id>6316593</id><snippet>X function(data){}</snippet></ROW><ROW><id>6317111</id><snippet>import types
print [f for f in globals().values() if type(f) == types.FunctionType]
</snippet></ROW><ROW><id>6317314</id><snippet>len(cookie)
</snippet></ROW><ROW><id>6317314</id><snippet>cookie = []</snippet></ROW><ROW><id>6317510</id><snippet>t = s[:1] + "whatever" + s[6:]
</snippet></ROW><ROW><id>6317571</id><snippet>__package_path_with_underscores__course_id</snippet></ROW><ROW><id>6317571</id><snippet>class Course(Entity):
    ...
    assistants = ManyToMany('Professor', inverse='courses_assisted',
                            local_colname='course_id', remote_colname='prof_id',
                            ondelete='cascade')
</snippet></ROW><ROW><id>6317571</id><snippet>rel = Course._descriptor.find_relationship('assistants')
assert rel
table = rel.table
</snippet></ROW><ROW><id>6317571</id><snippet>table.c.prof_id</snippet></ROW><ROW><id>6317571</id><snippet>in_</snippet></ROW><ROW><id>6317571</id><snippet>&gt;&gt;&gt; mit_courses = set(Course.query.join(
... University).filter(University.name == 'MIT'))
&gt;&gt;&gt; [p.name for p in Professor.query if set(
... p.courses_assisted).intersection(mit_courses)]
</snippet></ROW><ROW><id>6317571</id><snippet>&gt;&gt;&gt; plist = [c.assistants for c in Course.query.join(
... University).filter(University.name == 'MIT')]
&gt;&gt;&gt; [p.name for p in set(itertools.chain(*plist))]
</snippet></ROW><ROW><id>6317745</id><snippet>callback</snippet></ROW><ROW><id>6317745</id><snippet>class A:
    def callback_function(self): pass

    callback = callback_function
</snippet></ROW><ROW><id>6317871</id><snippet>some_str = ' ' * 512000000
</snippet></ROW><ROW><id>6317871</id><snippet>bytearray(512000000)</snippet></ROW><ROW><id>6318018</id><snippet>deprecated()</snippet></ROW><ROW><id>6318151</id><snippet>mkvirtualenv --no-site-packages
</snippet></ROW><ROW><id>6318319</id><snippet>import numpy as np
import matplotlib.pyplot as plt

nrows, ncols = 1000, 1000
z = 500 * np.random.random(nrows * ncols).reshape((nrows, ncols))

plt.imshow(z, interpolation='nearest')
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>6318319</id><snippet>import numpy as np 
import matplotlib.pyplot as plt

# Generate some data
nrows, ncols = 1000, 1000
xmin, xmax = -32.4, 42.0
ymin, ymax = 78.9, 101.3

dx = (xmax - xmin) / (ncols - 1)
dy = (ymax - ymin) / (ncols - 1)

x = np.linspace(xmin, xmax, ncols)
y = np.linspace(ymin, ymax, nrows)
x, y = np.meshgrid(x, y)

z = np.hypot(x - x.mean(), y - y.mean())
x, y, z = [item.flatten() for item in (x,y,z)]

# Scramble the order of the points so that we can't just simply reshape z
indicies = np.arange(x.size)
np.random.shuffle(indicies)
x, y, z = [item[indicies] for item in (x, y, z)]

# Up until now we've just been generating data...
# Now, x, y, and z probably represent something like you have.

# We need to make a regular grid out of our shuffled x, y, z indicies.
# To do this, we have to know the cellsize (dx &amp; dy) that the grid is on and
# the number of rows and columns in the grid. 

# First we convert our x and y positions to indicies...
idx = np.round((x - x.min()) / dx).astype(np.int)
idy = np.round((y - y.min()) / dy).astype(np.int)

# Then we make an empty 2D grid...
grid = np.zeros((nrows, ncols), dtype=np.float)

# Then we fill the grid with our values:
grid[idy, idx] = z

# And now we plot it:
plt.imshow(grid, interpolation='nearest', 
        extent=(x.min(), x.max(), y.max(), y.min()))
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>6318374</id><snippet>foo</snippet></ROW><ROW><id>6318374</id><snippet>&gt;&gt;&gt; from os.path import normpath
&gt;&gt;&gt; from posixpath import normpath as normpath2
&gt;&gt;&gt; normpath is normpath2
True
</snippet></ROW><ROW><id>6318374</id><snippet>normpath</snippet></ROW><ROW><id>6318374</id><snippet>normpath2</snippet></ROW><ROW><id>6318374</id><snippet>__module__</snippet></ROW><ROW><id>6318374</id><snippet>&gt;&gt;&gt; normpath.__module__
posixpath
&gt;&gt;&gt; normpath2.__module__
posixpath
</snippet></ROW><ROW><id>6318374</id><snippet>__module__</snippet></ROW><ROW><id>6318504</id><snippet>Redis</snippet></ROW><ROW><id>6318512</id><snippet>TemplateResponse</snippet></ROW><ROW><id>6318916</id><snippet>git</snippet></ROW><ROW><id>6318916</id><snippet>hg</snippet></ROW><ROW><id>6318916</id><snippet>git pull</snippet></ROW><ROW><id>6318916</id><snippet>git merge</snippet></ROW><ROW><id>6318916</id><snippet>svn merge</snippet></ROW><ROW><id>6318916</id><snippet>             I--J--K      supremely magic feature
            /     /
     D--E--F--L--M--N     magic feature
    /        /     /
A--B--C--G--H--O--P--Q    main trunk
</snippet></ROW><ROW><id>6318916</id><snippet>5! == 120</snippet></ROW><ROW><id>6318942</id><snippet>/home/shift/experiments/lib</snippet></ROW><ROW><id>6319232</id><snippet>pyplot.text(x, y, string, fontdict=None, withdash=False, **kwargs)
</snippet></ROW><ROW><id>6319232</id><snippet>second_axes = pyplot.twinx() # create the second axes, sharing x-axis
second_axis.set_yticks([0.2,0.4]) # list of your y values
pyplot.show() # update the figure
</snippet></ROW><ROW><id>6319267</id><snippet>L[0] += 1
</snippet></ROW><ROW><id>6319267</id><snippet>+=</snippet></ROW><ROW><id>6319283</id><snippet>threading.Thread(target=some_callable_function).start()
</snippet></ROW><ROW><id>6319283</id><snippet>threading.Thread(target=some_callable_function,
        args=(tuple, of, args),
        kwargs={'dict': 'of', 'keyword': 'args'},
    ).start()
</snippet></ROW><ROW><id>6319308</id><snippet>LoadModule wsgi_module libexec/apache2/mod_wsgi.so

&lt;VirtualHost *:80&gt;

WSGIScriptAlias /myapp /Library/WebServer/wsgi-scripts/views.wsgi

&lt;Directory /Library/WebServer/wsgi-scripts&gt;
Order allow,deny
Allow from all
&lt;/Directory&gt;

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>6319308</id><snippet>def application(environ, start_response):
    start_response('200 OK', [('content-type', 'text/html')])
    return ['Hello world!']
</snippet></ROW><ROW><id>6319308</id><snippet> path      = environ.get('PATH_INFO','')
 if path.startswith('/helloworld'):
  # call your function that returns HTML code
</snippet></ROW><ROW><id>6319479</id><snippet>gevent.server</snippet></ROW><ROW><id>6319513</id><snippet>sqlite3</snippet></ROW><ROW><id>6319513</id><snippet>Decimals</snippet></ROW><ROW><id>6319513</id><snippet>TEXT</snippet></ROW><ROW><id>6319513</id><snippet>TEXT</snippet></ROW><ROW><id>6319513</id><snippet>Decimals</snippet></ROW><ROW><id>6319513</id><snippet>import sqlite3
import decimal
D=decimal.Decimal

def adapt_decimal(d):
    return str(d)

def convert_decimal(s):
    return D(s)

# Register the adapter
sqlite3.register_adapter(D, adapt_decimal)

# Register the converter
sqlite3.register_converter("decimal", convert_decimal)

d = D('4.12')

con = sqlite3.connect(":memory:", detect_types=sqlite3.PARSE_DECLTYPES)
cur = con.cursor()
cur.execute("create table test(d decimal)")

cur.execute("insert into test(d) values (?)", (d,))
cur.execute("select d from test")
data=cur.fetchone()[0]
print(data)
print(type(data))

cur.close()
con.close()
</snippet></ROW><ROW><id>6319513</id><snippet>4.12
&lt;class 'decimal.Decimal'&gt;
</snippet></ROW><ROW><id>6319653</id><snippet>*</snippet></ROW><ROW><id>6319653</id><snippet>list = [1, 2, 3]
function_that_takes_3_arguments(*list)
</snippet></ROW><ROW><id>6319653</id><snippet>a, b, c = list # a=1, b=2, c=3
</snippet></ROW><ROW><id>6319725</id><snippet>service.MainPage()</snippet></ROW><ROW><id>6319725</id><snippet>request</snippet></ROW><ROW><id>6319725</id><snippet>response</snippet></ROW><ROW><id>6319725</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>6319725</id><snippet>get()</snippet></ROW><ROW><id>6319725</id><snippet>self</snippet></ROW><ROW><id>6319725</id><snippet>service.MainPage()</snippet></ROW><ROW><id>6319725</id><snippet>MainPage</snippet></ROW><ROW><id>6319725</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>6319927</id><snippet>admin_view</snippet></ROW><ROW><id>6319927</id><snippet>login</snippet></ROW><ROW><id>6319927</id><snippet>wrap</snippet></ROW><ROW><id>6319927</id><snippet>urlpatterns</snippet></ROW><ROW><id>6319927</id><snippet>login_required</snippet></ROW><ROW><id>6319927</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>6319927</id><snippet>request.user.is_active and request.user.is_staff</snippet></ROW><ROW><id>6319927</id><snippet>request.user</snippet></ROW><ROW><id>6319927</id><snippet>AnonymousUser</snippet></ROW><ROW><id>6319927</id><snippet>is_active</snippet></ROW><ROW><id>6319927</id><snippet>is_staff</snippet></ROW><ROW><id>6319927</id><snippet>False</snippet></ROW><ROW><id>6319927</id><snippet>login</snippet></ROW><ROW><id>6319963</id><snippet>t1=Text(app).pack()
</snippet></ROW><ROW><id>6319963</id><snippet>t1=Text(app)
t1.pack()
</snippet></ROW><ROW><id>6319963</id><snippet>pack()</snippet></ROW><ROW><id>6319963</id><snippet>.get()</snippet></ROW><ROW><id>6319963</id><snippet>t1</snippet></ROW><ROW><id>6320067</id><snippet>mkdir(2)</snippet></ROW><ROW><id>6320067</id><snippet>NOTES
        Under  Linux  apart from the permission bits, only the S_ISVTX mode bit
        is honored.  That is, under Linux the created directory  actually  gets
        mode (mode &amp; ~umask &amp; 01777).
</snippet></ROW><ROW><id>6320110</id><snippet>class type1(object):
    data = 'foo 1'

class type2(object):
    data = 'foo 2'
</snippet></ROW><ROW><id>6320110</id><snippet>class Container(object):
    pass

type1, type2 = Container(), Container()
type1.data = 'foo 1'
type2.data = 'foo 2'
</snippet></ROW><ROW><id>6320110</id><snippet>type1</snippet></ROW><ROW><id>6320110</id><snippet>type2</snippet></ROW><ROW><id>6320194</id><snippet>['MINUSERPIXELVALUE = 1','MAXUSERPIXELVALUE= 4']
</snippet></ROW><ROW><id>6320194</id><snippet>['MINUSERPIXELVALUE=1', 'MAXUSERPIXELVALUE=4']
</snippet></ROW><ROW><id>6320194</id><snippet>type(dst_ds)</snippet></ROW><ROW><id>6320194</id><snippet>&lt;class 'osgeo.gdal.Dataset'&gt;</snippet></ROW><ROW><id>6320194</id><snippet>&lt;type 'NoneType'&gt;</snippet></ROW><ROW><id>6320194</id><snippet>gdal.UseExceptions()</snippet></ROW><ROW><id>6320194</id><snippet>&gt;&gt;&gt; from osgeo import gdal
&gt;&gt;&gt; gdal.UseExceptions()
&gt;&gt;&gt; driver = gdal.GetDriverByName('Terragen')
&gt;&gt;&gt; dst_ds = driver.Create('test.ter', 4,4,1,gdal.GDT_Float32, ['MINUSERPIXELVALUE = 1', 'MAXUSERPIXELVALUE= 4'])
Warning 6: Driver Terragen does not support MINUSERPIXELVALUE  creation option
&gt;&gt;&gt; dst_ds = driver.Create('test.ter', 4,4,1,gdal.GDT_Float32, ['MINUSERPIXELVALUE=1', 'MAXUSERPIXELVALUE=4'])
&gt;&gt;&gt; type(dst_ds)
&lt;class 'osgeo.gdal.Dataset'&gt;
</snippet></ROW><ROW><id>6320372</id><snippet>opener.urlopen(...)</snippet></ROW><ROW><id>6320372</id><snippet>urllib.request.install_opener(opener)</snippet></ROW><ROW><id>6320372</id><snippet>urllib.request.urlopen(...)</snippet></ROW><ROW><id>6320455</id><snippet>connect()</snippet></ROW><ROW><id>6320455</id><snippet>raise</snippet></ROW><ROW><id>6320455</id><snippet>adodbapi.DatabaseError</snippet></ROW><ROW><id>6320455</id><snippet>try:
    con = adodbapi.connect(";".join (connectorsver))
except adodbapi.DatabaseError, e:
    print e
</snippet></ROW><ROW><id>6320970</id><snippet>import logging
logging.debug(str(axyz))
</snippet></ROW><ROW><id>6320970</id><snippet>logging.info()</snippet></ROW><ROW><id>6320970</id><snippet>logging.error()</snippet></ROW><ROW><id>6320970</id><snippet>logging.exception()</snippet></ROW><ROW><id>6321078</id><snippet>tags = TaggableManager(blank=True)</snippet></ROW><ROW><id>6321221</id><snippet>logging.Formatter.converter = time.gmtime
</snippet></ROW><ROW><id>6321221</id><snippet>logging.Formatter.formatTime</snippet></ROW><ROW><id>6321770</id><snippet>"TEST"</snippet></ROW><ROW><id>6321930</id><snippet>Writer.write_packed()</snippet></ROW><ROW><id>6321930</id><snippet>char</snippet></ROW><ROW><id>6321930</id><snippet>for row in char("A"):
    print bin(row[0])[2:].zfill(8)
</snippet></ROW><ROW><id>6321930</id><snippet>00000000
00111000
01000100
01111100
01000100
01000100
01000100
00000000
</snippet></ROW><ROW><id>6321946</id><snippet>getattr()</snippet></ROW><ROW><id>6321946</id><snippet>getattr(obj, 'func')('foo', 'bar', 42)
</snippet></ROW><ROW><id>6322491</id><snippet>import memcache
import binascii
m = memcache.Client(['192.168.28.7:11211', '192.168.28.8:11211
', '192.168.28.9:11211'])

def php_hash(key):
    return (binascii.crc32(key) &gt;&gt; 16) &amp; 0x7fff

for i in range(30):
       key = 'key' + str(i)
       a = m.get((php_hash(key), key))
       print i, a
</snippet></ROW><ROW><id>6322511</id><snippet> yield from b()
</snippet></ROW><ROW><id>6322511</id><snippet>a</snippet></ROW><ROW><id>6322511</id><snippet>b</snippet></ROW><ROW><id>6322561</id><snippet>"username=hi&amp;password=there&amp;this_is_the_login_form=1"
</snippet></ROW><ROW><id>6322561</id><snippet>{'username': 'hi', 'password': 'there', 'this_is_the_login_form': 1}
</snippet></ROW><ROW><id>6322784</id><snippet>  &gt;&gt;&gt;'410.9'=='410.9 '
  &gt;&gt;&gt;False
</snippet></ROW><ROW><id>6322784</id><snippet>...
for item in A_LIST:
  if item == '410.9':
    return True
...
</snippet></ROW><ROW><id>6322909</id><snippet>gethostbyname</snippet></ROW><ROW><id>6322909</id><snippet>&gt;&gt;&gt; libc.gethostbyname.restype = POINTER(hostent)
&gt;&gt;&gt; he = libc.gethostbyname("www.google.com")[0]
&gt;&gt;&gt; he.h_aliases[0]
'www.google.com'
</snippet></ROW><ROW><id>6322909</id><snippet>h_addr_list</snippet></ROW><ROW><id>6322909</id><snippet>POINTER(c_char_p)</snippet></ROW><ROW><id>6322909</id><snippet>c_char_p</snippet></ROW><ROW><id>6322909</id><snippet>POINTER(POINTER(c_ubyte))</snippet></ROW><ROW><id>6322909</id><snippet>he.h_addr_list[0][:4]</snippet></ROW><ROW><id>6322973</id><snippet>strace</snippet></ROW><ROW><id>6322973</id><snippet>strace -fv -e trace=mount mount /dev/sda1 /tmp
</snippet></ROW><ROW><id>6322973</id><snippet>mount /dev/...</snippet></ROW><ROW><id>6322973</id><snippet>-f</snippet></ROW><ROW><id>6322973</id><snippet>-v</snippet></ROW><ROW><id>6322973</id><snippet>-e trace=mount</snippet></ROW><ROW><id>6322973</id><snippet>strace</snippet></ROW><ROW><id>6322973</id><snippet>mount</snippet></ROW><ROW><id>6322973</id><snippet>$ sudo strace -fv -e trace=mount mount /dev/sda1 /tmp
mount("/dev/sda1", "/tmp", "ext2", MS_MGC_VAL, NULL) = 0
</snippet></ROW><ROW><id>6322973</id><snippet>EINVAL</snippet></ROW><ROW><id>6323186</id><snippet>.join()</snippet></ROW><ROW><id>6323186</id><snippet>my_threads = []
for i in range(3):
    my_thread = MyThread()
    my_thread.name = i
    my_thread.start()
    my_threads.append(my_thread)

for t in my_threads:
    t.join()

print 'end of script'
</snippet></ROW><ROW><id>6323356</id><snippet>pycap</snippet></ROW><ROW><id>6323356</id><snippet>pycap</snippet></ROW><ROW><id>6323356</id><snippet>import pycap</snippet></ROW><ROW><id>6323356</id><snippet>.</snippet></ROW><ROW><id>6323356</id><snippet>capture</snippet></ROW><ROW><id>6323845</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

x,y,temp = np.loadtxt('data.txt').T #Transposed for easier unpacking
nrows, ncols = 100, 100
grid = temp.reshape((nrows, ncols))

plt.imshow(grid, extent=(x.min(), x.max(), y.max(), y.min()),
           interpolation='nearest', cmap=cm.gist_rainbow)
plt.show()
</snippet></ROW><ROW><id>6323845</id><snippet>hsv</snippet></ROW><ROW><id>6323845</id><snippet>matplotlib.cm.gist_rainbow</snippet></ROW><ROW><id>6323845</id><snippet>matplotlib.cm.hsv</snippet></ROW><ROW><id>6323947</id><snippet>PATH</snippet></ROW><ROW><id>6323947</id><snippet>os.getenv('PATH')</snippet></ROW><ROW><id>6323947</id><snippet>subprocess.Popen(['PATH=/where/ever/bin:$PATH coffee'], shell=True)
</snippet></ROW><ROW><id>6323947</id><snippet>coffee</snippet></ROW><ROW><id>6323947</id><snippet>PATH</snippet></ROW><ROW><id>6324092</id><snippet>while(incorrectGuesses &lt;= 6 or self.correctArray != self.randomWoord ):
</snippet></ROW><ROW><id>6324092</id><snippet>or</snippet></ROW><ROW><id>6324092</id><snippet>and</snippet></ROW><ROW><id>6324092</id><snippet>correctArray</snippet></ROW><ROW><id>6324092</id><snippet>randomWord</snippet></ROW><ROW><id>6324092</id><snippet>while incorrectGuesses &lt;= 6 and ''.join(self.correctArray) != self.randomWoord :
</snippet></ROW><ROW><id>6324092</id><snippet>_init_</snippet></ROW><ROW><id>6324092</id><snippet>__init__</snippet></ROW><ROW><id>6324092</id><snippet>\n</snippet></ROW><ROW><id>6324092</id><snippet>strip()</snippet></ROW><ROW><id>6324092</id><snippet>correctArray</snippet></ROW><ROW><id>6324092</id><snippet>for line in wordList:
    woordenArray.append(line.strip())
</snippet></ROW><ROW><id>6324840</id><snippet>Caught ViewDoesNotExist while rendering: Tried results in module polls.views. 
Error was: 'module' object has no attribute 'results'
</snippet></ROW><ROW><id>6324840</id><snippet>TemplateSyntaxError</snippet></ROW><ROW><id>6324840</id><snippet>def results(request):
    # do something
</snippet></ROW><ROW><id>6324840</id><snippet>ViewDoesNotExist</snippet></ROW><ROW><id>6324840</id><snippet>$ python manage.py shell
&gt;&gt;&gt; from poll import views
x = views.results
</snippet></ROW><ROW><id>6324840</id><snippet>AttributeError</snippet></ROW><ROW><id>6324840</id><snippet>Django/core/urlresolvers.py</snippet></ROW><ROW><id>6324840</id><snippet>_callable_cache = {} # Maps view and url pattern names to their view functions.
</snippet></ROW><ROW><id>6324840</id><snippet>def _get_callback(self):
    if self._callback is not None:
        return self._callback
    try:
        self._callback = get_callable(self._callback_str)
    except ImportError, e:
        mod_name, _ = get_mod_func(self._callback_str)
        raise ViewDoesNotExist("Could not import %s. Error was: %s" % (
                                                            mod_name, str(e)))
    except AttributeError, e:
        mod_name, func_name = get_mod_func(self._callback_str)
        raise ViewDoesNotExist("Tried %s in module %s. Error was: %s" % (
                                                   func_name, mod_name, str(e)))
    return self._callback
callback = property(_get_callback)
</snippet></ROW><ROW><id>6324862</id><snippet>parsed</snippet></ROW><ROW><id>6324862</id><snippet>{% ssi %}</snippet></ROW><ROW><id>6324862</id><snippet>parsed</snippet></ROW><ROW><id>6324862</id><snippet>{% ssi %}</snippet></ROW><ROW><id>6325277</id><snippet>lxml</snippet></ROW><ROW><id>6325277</id><snippet>from lxml import etree
s = """&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;Event&lt;/th&gt;&lt;th&gt;Start Date&lt;/th&gt;&lt;th&gt;End Date&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;b&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;d&lt;/td&gt;&lt;td&gt;e&lt;/td&gt;&lt;td&gt;f&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;g&lt;/td&gt;&lt;td&gt;h&lt;/td&gt;&lt;td&gt;i&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
"""
table = etree.XML(s)
rows = iter(table)
headers = [col.text for col in next(rows)]
for row in rows:
    values = [col.text for col in row]
    print dict(zip(headers, values))
</snippet></ROW><ROW><id>6325277</id><snippet>{'End Date': 'c', 'Start Date': 'b', 'Event': 'a'}
{'End Date': 'f', 'Start Date': 'e', 'Event': 'd'}
{'End Date': 'i', 'Start Date': 'h', 'Event': 'g'}
</snippet></ROW><ROW><id>6325323</id><snippet>/login?continue=/logged-in</snippet></ROW><ROW><id>6325323</id><snippet>target_url</snippet></ROW><ROW><id>6325323</id><snippet>continue_to</snippet></ROW><ROW><id>6325323</id><snippet>verify</snippet></ROW><ROW><id>6325323</id><snippet>target_url</snippet></ROW><ROW><id>6325323</id><snippet>create_login_url()</snippet></ROW><ROW><id>6325323</id><snippet>/logged-in</snippet></ROW><ROW><id>6325383</id><snippet>firstHeader = CEL_HEADER.from_buffer(map, 0) #CEL_HEADER is a ctypes Structure
pHeader = pointer(firstHeader)
#Now I can use pHeader[ind] to get a CEL_HEADER object 
#at an arbitrary point in the file
</snippet></ROW><ROW><id>6325445</id><snippet>tests.py</snippet></ROW><ROW><id>6325445</id><snippet>import</snippet></ROW><ROW><id>6325530</id><snippet>AmbiguousStringError</snippet></ROW><ROW><id>6325530</id><snippet>AmbiguousResultError</snippet></ROW><ROW><id>6325530</id><snippet>MultipleResultsFoundError</snippet></ROW><ROW><id>6325530</id><snippet>NoUniqueResultFoundError</snippet></ROW><ROW><id>6325674</id><snippet>window = gtk.Window()
window.resize(image.size[0], image.size[1])

scrolled = gtk.ScrolledWindow()
scrolled.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
scrolled.set_shadow_type(gtk.SHADOW_NONE)

viewport = gtk.Viewport()
viewport.set_shadow_type(gtk.SHADOW_NONE)  // Get rid of the border.

area = gtk.DrawingArea()
area.set_size_request(image.size[0], image.size[1])

window.add(scrolled)
scrolled.add(viewport)
viewport.add(area)
viewport.show()
area.show()
scrolled.show()
window.show()
</snippet></ROW><ROW><id>6325804</id><snippet>[\w]</snippet></ROW><ROW><id>6325804</id><snippet>[\W]</snippet></ROW><ROW><id>6325804</id><snippet>[\W_]</snippet></ROW><ROW><id>6325804</id><snippet>[\W_]+</snippet></ROW><ROW><id>6325804</id><snippet>str</snippet></ROW><ROW><id>6325804</id><snippet>    re.sub(r'[\W_]+', '', s)
</snippet></ROW><ROW><id>6325804</id><snippet>str</snippet></ROW><ROW><id>6325804</id><snippet>    re.sub(r'[\W_]+', '', s, flags=re.LOCALE)
</snippet></ROW><ROW><id>6325804</id><snippet>unicode</snippet></ROW><ROW><id>6325804</id><snippet>    re.sub(ur'[\W_]+', u'', s, flags=re.UNICODE)
</snippet></ROW><ROW><id>6325804</id><snippet>str</snippet></ROW><ROW><id>6325804</id><snippet>&gt;&gt;&gt; import re, locale
&gt;&gt;&gt; sall = ''.join(chr(i) for i in xrange(256))
&gt;&gt;&gt; len(sall)
256
&gt;&gt;&gt; re.sub('[\W_]+', '', sall)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'English_Australia.1252'
&gt;&gt;&gt; re.sub('[\W_]+', '', sall, flags=re.LOCALE)
'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\x83\x8a\x8c\x8e\
x9a\x9c\x9e\x9f\xaa\xb2\xb3\xb5\xb9\xba\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\
xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd8\xd9\xda\xdb\xdc\xdd\xde\
xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\
xf3\xf4\xf5\xf6\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff'
# above output wrapped at column 80
</snippet></ROW><ROW><id>6325804</id><snippet>&gt;&gt;&gt; re.sub(ur'[\W_]+', u'', u'a_b A_Z \x80\xFF \u0404', flags=re.UNICODE)
u'abAZ\xff\u0404'
</snippet></ROW><ROW><id>6325880</id><snippet>create_user</snippet></ROW><ROW><id>6325880</id><snippet>db.session.commit()</snippet></ROW><ROW><id>6325880</id><snippet>NameError</snippet></ROW><ROW><id>6325880</id><snippet>IntegrityError</snippet></ROW><ROW><id>6325880</id><snippet>from sqlalchemy.exc import IntegrityError
</snippet></ROW><ROW><id>6325880</id><snippet>app.py</snippet></ROW><ROW><id>6325880</id><snippet>app.py</snippet></ROW><ROW><id>6326057</id><snippet>balldir</snippet></ROW><ROW><id>6326057</id><snippet>balldir</snippet></ROW><ROW><id>6326057</id><snippet>def move_ball(self):
    assert 0 &lt;= self.balldir &lt;= 1
    self.move(self.ball, 0, 10 * (-1 * self.balldir))
    root.after(...
</snippet></ROW><ROW><id>6326057</id><snippet>if name == "dhcarmona":
    pass
elif name == "msw":
    pass
else
    raise ValueError, "name is not as expected"
</snippet></ROW><ROW><id>6326254</id><snippet>colision</snippet></ROW><ROW><id>6326254</id><snippet>after</snippet></ROW><ROW><id>6326254</id><snippet>mueve_bola also calls itself every 20ms. However,</snippet></ROW><ROW><id>6326254</id><snippet>_also_ calls</snippet></ROW><ROW><id>6326254</id><snippet>. So, every 20ms,</snippet></ROW><ROW><id>6326254</id><snippet>creates another unending stream of calls to itself every 20ms. 20 ms later</snippet></ROW><ROW><id>6326254</id><snippet>calls</snippet></ROW><ROW><id>6326254</id><snippet>again, which again starts another stream of calls every 20ms. After just one second</snippet></ROW><ROW><id>6326254</id><snippet>is being called 50 times every 20ms. After two seconds it will be 100 calls to</snippet></ROW><ROW><id>6326254</id><snippet>every 20 ms. Do you see the problem? In very little time you will have millions of calls to</snippet></ROW><ROW><id>6326254</id><snippet>colision</snippet></ROW><ROW><id>6326278</id><snippet>QuerySet</snippet></ROW><ROW><id>6326278</id><snippet>.filter()</snippet></ROW><ROW><id>6326278</id><snippet>.delete()</snippet></ROW><ROW><id>6326303</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>6326303</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>6326443</id><snippet>void()</snippet></ROW><ROW><id>6326443</id><snippet>pass</snippet></ROW><ROW><id>6326443</id><snippet>if key in some_dict:</snippet></ROW><ROW><id>6326443</id><snippet>pass</snippet></ROW><ROW><id>6326563</id><snippet>&gt;&gt;&gt; '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x04\x87...'.encode('base64').replace('\n', '')
'iVBORw0KGgoAAAANSUhEUgAABI....'
</snippet></ROW><ROW><id>6326688</id><snippet>from collections import Counter

letters = ['v','r','o','o','m','a','b','c','d']
words = 'cardboard boom booom'.split()
letterscount = Counter(letters)

for word in words:
    wordcount = Counter(word)
    print word, all(letterscount[c] &gt;= wordcount[c] for c in wordcount)
</snippet></ROW><ROW><id>6326688</id><snippet>cardboard False
boom True
booom False
</snippet></ROW><ROW><id>6326688</id><snippet>&gt;&gt;&gt; c = Counter(letters)
&gt;&gt;&gt; c
Counter({'o': 2, 'a': 1, 'c': 1, 'b': 1, 'd': 1, 'm': 1, 'r': 1, 'v': 1})
&gt;&gt;&gt; c['o']
2
&gt;&gt;&gt; c['z']
0
</snippet></ROW><ROW><id>6326688</id><snippet>from collections import defaultdict, Counter
from itertools import combinations

# precomputations
allwords = open('/usr/share/dict/words').read().split() 
allwords = list(w for w in allwords if len(w) &gt;= 3) # hack, /words contains lots of silliness
allwords_by_count = defaultdict(list)
for i, word in enumerate(allwords):
    allwords_by_count[frozenset(word)].append((word, Counter(word)))
    if i % 1000 == 0:
        print i, word


def wordsfrom(letters, words_by_count):
    lettercount = Counter(letters)
    for subsetsize in range(1, len(lettercount)+1):
        for subset in combinations(lettercount, subsetsize):
            for possword, posswordcount in words_by_count[frozenset(subset)]:
                if all(posswordcount[c] &lt;= lettercount[c] for c in posswordcount):
                    yield possword

&gt;&gt;&gt; wordsfrom('thistles', allwords_by_count)
&lt;generator object wordsfrom at 0x1032956e0&gt;
&gt;&gt;&gt; list(wordsfrom('thistles', allwords_by_count))
['ess', 'sis', 'tit', 'tst', 'hei', 'hie', 'lei', 'lie', 'sie', 'sise', 'tie', 'tite', 'she', 'het', 'teth', 'the', 'els', 'less', 'elt', 'let', 'telt', 'set', 'sett', 'stet', 'test', 'his', 'hiss', 'shi', 'sish', 'hit', 'lis', 'liss', 'sil', 'lit', 'til', 'tilt', 'ist', 'its', 'sist', 'sit', 'shies', 'tithe', 'isle', 'sile', 'sisel', 'lite', 'teil', 'teli', 'tile', 'title', 'seit', 'sesti', 'site', 'stite', 'testis', 'hest', 'seth', 'lest', 'selt', 'lish', 'slish', 'hilt', 'lith', 'tilth', 'hist', 'sith', 'stith', 'this', 'list', 'silt', 'slit', 'stilt', 'liesh', 'shiel', 'lithe', 'shiest', 'sithe', 'theist', 'thesis', 'islet', 'istle', 'sistle', 'slite', 'stile', 'stilet', 'hitless', 'tehsil', 'thistle']
</snippet></ROW><ROW><id>6326688</id><snippet>&gt;&gt;&gt; assert all(w in allwords for w in (wordsfrom('thistles', allwords_by_count)))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6326700</id><snippet>/var</snippet></ROW><ROW><id>6326700</id><snippet>/var</snippet></ROW><ROW><id>6326700</id><snippet>/var/lib/rabbitmq</snippet></ROW><ROW><id>6327222</id><snippet>serialize()</snippet></ROW><ROW><id>6327491</id><snippet>self.cols</snippet></ROW><ROW><id>6327491</id><snippet>self.table</snippet></ROW><ROW><id>6327491</id><snippet>self.__class__.cols</snippet></ROW><ROW><id>6327491</id><snippet>self.__class__.table</snippet></ROW><ROW><id>6327491</id><snippet>self</snippet></ROW><ROW><id>6327491</id><snippet>__init__</snippet></ROW><ROW><id>6327491</id><snippet>self.cols</snippet></ROW><ROW><id>6327491</id><snippet>self.cols</snippet></ROW><ROW><id>6327491</id><snippet>assert len(data)==len(self.__class__.cols)
</snippet></ROW><ROW><id>6327491</id><snippet>cols</snippet></ROW><ROW><id>6327491</id><snippet>DataRow.cols = cols.split()
</snippet></ROW><ROW><id>6327491</id><snippet>namedtuple</snippet></ROW><ROW><id>6327609</id><snippet>'C:\Users\Myname\Dropbox\Foldes\image.png'
</snippet></ROW><ROW><id>6327609</id><snippet>'C:\\Users\\Myname\\Dropbox\\Foldes\\image.png'
</snippet></ROW><ROW><id>6327609</id><snippet>r</snippet></ROW><ROW><id>6327609</id><snippet>r'C:\Users\Myname\Dropbox\Foldes\image.png'
</snippet></ROW><ROW><id>6327609</id><snippet>YYYY-MM-DD-HH:MM</snippet></ROW><ROW><id>6327609</id><snippet>import datetime
date_string = datetime.datetime.now().strftime("%Y-%m-%d-%H:%M")
</snippet></ROW><ROW><id>6327609</id><snippet>time</snippet></ROW><ROW><id>6327609</id><snippet>import time
date_string = time.strftime("%Y-%m-%d-%H:%M")
</snippet></ROW><ROW><id>6327609</id><snippet>cam.saveSnapshot(r'C:\Users\Myname\Dropbox\Foldes\image-' + date_string + '.png',
                 timestamp=3, boldfont=1, textpos='bc')
</snippet></ROW><ROW><id>6327640</id><snippet>hitApples = pygame.sprite.spritecollide(snake, apple_list, True)
if hitApples:
    callback()
</snippet></ROW><ROW><id>6328235</id><snippet>diff -ur python-2.6/lib/python2.6/site-packages/docutils python-2.7/lib/python2.7/site-packages/docutils 
</snippet></ROW><ROW><id>6328235</id><snippet>compileall.py</snippet></ROW><ROW><id>6328235</id><snippet>python-2.7/bin/python python-2.7/lib/python2.7/compileall.py lib/python2.7/site-packages/docutils
</snippet></ROW><ROW><id>6328281</id><snippet>returns()</snippet></ROW><ROW><id>6328353</id><snippet>matplotlib.pyplot.plotfile('dat.csv',(0,1),linestyle="",marker="o")
</snippet></ROW><ROW><id>6328574</id><snippet>from django import forms

class UploadFileForm(forms.Form):
    title = forms.CharField(max_length=50)
    file  = forms.FileField()

from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse, HttpResponseNotAllowed, HttpResponseServerError

# Imaginary function to handle an uploaded file.
from somewhere import handle_uploaded_file

@csrf_exempt
def upload_file(request):
    if request.method != 'POST':
        return HttpResponseNotAllowed('Only POST here')

    form = UploadFileForm(request.POST, request.FILES)
    if not form.is_valid():
        return HttpResponseServerError("Invalid call")

    handle_uploaded_file(request.FILES['file'])
    return HttpResponse('OK')
</snippet></ROW><ROW><id>6328893</id><snippet>.bat</snippet></ROW><ROW><id>6329235</id><snippet>print html_diff.make_table(previous_contents.split('\n'),
                           fetch_url.page_contents.split('\n'))
</snippet></ROW><ROW><id>6329536</id><snippet>rep_i=1</snippet></ROW><ROW><id>6329536</id><snippet>rep_lst[0]=1</snippet></ROW><ROW><id>6329536</id><snippet>rep_i</snippet></ROW><ROW><id>6329536</id><snippet>global</snippet></ROW><ROW><id>6329536</id><snippet>rep_lst=[]</snippet></ROW><ROW><id>6329536</id><snippet>test2</snippet></ROW><ROW><id>6329536</id><snippet>rep_lst</snippet></ROW><ROW><id>6329536</id><snippet>global</snippet></ROW><ROW><id>6329536</id><snippet>test2</snippet></ROW><ROW><id>6329796</id><snippet>urllib.encode</snippet></ROW><ROW><id>6329796</id><snippet>{"a": 1, "b": 2}</snippet></ROW><ROW><id>6329796</id><snippet>"a=1&amp;b=2"</snippet></ROW><ROW><id>6329796</id><snippet>data = {"media": [{"type":"flash", "swfsrc":"http://shopperspoll.webfactional.com/media/flashFile.swf", "height": '100', "width": '100', "expanded_width":"160", "expanded_height":"120", "imgsrc":"http://shopperspoll.webfactional.com/media/laptop1.jpg"}]}

import json
json_encoded = json.dumps(data)
</snippet></ROW><ROW><id>6329796</id><snippet>urllib.encode</snippet></ROW><ROW><id>6329796</id><snippet>import urllib
urllib.encode({"access_token": example, "attachment": json_encoded})
# produces a long string in the form "access_token=...&amp;attachment=..."
</snippet></ROW><ROW><id>6329796</id><snippet>urllib.quote</snippet></ROW><ROW><id>6329796</id><snippet>urllib.quote(json_encoded)
# produces just the part following "&amp;attachment="
</snippet></ROW><ROW><id>6330026</id><snippet>socket(AF_PACKET, SOCK_RAW, ...)</snippet></ROW><ROW><id>6330109</id><snippet>def safe_cast(val, to_type, default=None):
    try:
        return to_type(val)
    except ValueError:
        return default

safe_cast('tst', int) # will return None
safe_cast('tst', int, 0) # will return 0
</snippet></ROW><ROW><id>6330775</id><snippet>#!/usr/bin/env python

snippet = """
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
&lt;div align=center&gt;&lt;a style="font-size: 1.1em"&gt;Football&lt;/a&gt;&lt;/div&gt;
&lt;a href=""&gt;Team A&lt;/a&gt;
&lt;a href=""&gt;Team B&lt;/a&gt;
&lt;div align=center&gt;&lt;a style="font-size: 1.1em"&gt;Baseball&lt;/a&gt;&lt;/div&gt;
&lt;a href=""&gt;Team C&lt;/a&gt;
&lt;a href=""&gt;Team D&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
"""

import lxml.html

html = lxml.html.fromstring(snippet)
body = html[1]

results = []
current_category = None

for element in body.xpath('./*'):
    if element.tag == 'div':
        current_category = element.xpath('./a')[0].text
    elif element.tag == 'a':
        results.append({ 'category' : current_category, 
            'title' : element.text })

print results
</snippet></ROW><ROW><id>6330775</id><snippet>[{'category': 'Football', 'title': 'Team A'}, 
 {'category': 'Football', 'title': 'Team B'}, 
 {'category': 'Baseball', 'title': 'Team C'}, 
 {'category': 'Baseball', 'title': 'Team D'}]
</snippet></ROW><ROW><id>6330775</id><snippet>preceding-sibling</snippet></ROW><ROW><id>6330775</id><snippet>#!/usr/bin/env python

snippet = """
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;
&lt;div align=center&gt;&lt;a style="font-size: 1.1em"&gt;Football&lt;/a&gt;&lt;/div&gt;
&lt;a href=""&gt;Team A&lt;/a&gt;
&lt;a href=""&gt;Team B&lt;/a&gt;
&lt;div align=center&gt;&lt;a style="font-size: 1.1em"&gt;Baseball&lt;/a&gt;&lt;/div&gt;
&lt;a href=""&gt;Team C&lt;/a&gt;
&lt;a href=""&gt;Team D&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
"""

import lxml.html

html = lxml.html.fromstring(snippet)
body = html[1]

results = []

for e in body.xpath('./a'):
    results.append(dict(
        category=e.xpath('preceding-sibling::div/a')[-1].text,
        title=e.text))

print results
</snippet></ROW><ROW><id>6330898</id><snippet>csh</snippet></ROW><ROW><id>6330898</id><snippet>/bin/csh</snippet></ROW><ROW><id>6330898</id><snippet>lexparser.sh</snippet></ROW><ROW><id>6330933</id><snippet>shell=True</snippet></ROW><ROW><id>6331228</id><snippet>import os
print os.getcwd()
</snippet></ROW><ROW><id>6331688</id><snippet>&gt;&gt;&gt; tags="Hey guys! #stackoverflow really #rocks #rocks #announcement"
&gt;&gt;&gt; {tag.strip("#") for tag in tags.split() if tag.startswith("#")}
set(['announcement', 'rocks', 'stackoverflow'])
</snippet></ROW><ROW><id>6331688</id><snippet>{ }</snippet></ROW><ROW><id>6331688</id><snippet>[ ]</snippet></ROW><ROW><id>6331688</id><snippet>set</snippet></ROW><ROW><id>6331696</id><snippet>PROJECT_APPS=(
    'appname',
)
</snippet></ROW><ROW><id>6332186</id><snippet>
</snippet></ROW><ROW><id>6332186</id><snippet>lines.replace("\b", "")
</snippet></ROW><ROW><id>6332639</id><snippet>SERVER = "your.mail.server"
FROM = "yourEmail@yourAddress.com"
TO = ["listOfEmails"] # must be a list

SUBJECT = "Subject"
TEXT = ""Your Text"

# Prepare actual message
message = """From: %s\r\nTo: %s\r\nSubject: %s\r\n\

%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)

# Send the mail
server = smtplib.SMTP(SERVER)
server.sendmail(FROM, TO, message)
server.quit()
</snippet></ROW><ROW><id>6332639</id><snippet>SERVER = "smtp.google.com"
FROM = "johnDoe@gmail.com"
TO = ["JaneDoe@gmail.com"] # must be a list

SUBJECT = "Hello!"
TEXT = ""This is a test of emailing through smtp in google."

# Prepare actual message
message = """From: %s\r\nTo: %s\r\nSubject: %s\r\n\

%s
""" % (FROM, ", ".join(TO), SUBJECT, TEXT)

# Send the mail
server = smtplib.SMTP(SERVER)
server.login("MrDoe", "PASSWORD")
server.sendmail(FROM, TO, message)
server.quit()
</snippet></ROW><ROW><id>6332746</id><snippet>for k in dict2.keys():
    dict2[k] = [x for x in dict2[k] if x[1] not in idlist]
    if not dict2[k]:
        del dict2[k]
</snippet></ROW><ROW><id>6333034</id><snippet>rectangle</snippet></ROW><ROW><id>6333034</id><snippet>black</snippet></ROW><ROW><id>6333034</id><snippet>self.rect_array.append(c.create_rectangle(one_pixel_loc, fill='white'))
</snippet></ROW><ROW><id>6333034</id><snippet>self.rect_array.append(c.create_rectangle(one_pixel_loc, fill='white', outline='white')
</snippet></ROW><ROW><id>6333439</id><snippet>render()</snippet></ROW><ROW><id>6333439</id><snippet>Template</snippet></ROW><ROW><id>6333439</id><snippet>Context</snippet></ROW><ROW><id>6333439</id><snippet>Context</snippet></ROW><ROW><id>6333439</id><snippet>namedbox = getNamesBox().render(Context(locals()))
</snippet></ROW><ROW><id>6333647</id><snippet>plt.connect('button_press_event', onclick)
</snippet></ROW><ROW><id>6333647</id><snippet>onclick</snippet></ROW><ROW><id>6333647</id><snippet>import matplotlib.pyplot as plt
import numpy as np

class Main(object):
    def clear(self):
        plt.clf()
    def redraw(self):
        self.clear()
        plt.plot(self.data)
        plt.title('100')
        plt.text(50,0.85,'100')
        plt.draw()
    def on_click(self,event):
        self.data=np.random.random(100)    
        self.redraw()        
    def run(self):
        plt.figure()
        plt.connect('button_press_event', self.on_click)
        plt.show() 

    def __init__(self):
        self.data=np.random.random(100)    

if __name__=='__main__':           
    m=Main()
    m.run()
    print(m.data)
</snippet></ROW><ROW><id>6333673</id><snippet>zombie</snippet></ROW><ROW><id>6333673</id><snippet>&lt;row&gt;</snippet></ROW><ROW><id>6333673</id><snippet>&lt;field&gt;</snippet></ROW><ROW><id>6333673</id><snippet>get()</snippet></ROW><ROW><id>6333673</id><snippet>&lt;row&gt;</snippet></ROW><ROW><id>6333673</id><snippet>&lt;field&gt;</snippet></ROW><ROW><id>6333673</id><snippet>build_id = zombie.find('field[name="buildid"]').text
</snippet></ROW><ROW><id>6333844</id><snippet>&gt;&gt; yum install python-devel
&gt;&gt; yum install MySQL-devel
&gt;&gt; yum install zlib-devel
&gt;&gt; yum install openssl-devel
</snippet></ROW><ROW><id>6333972</id><snippet>def dict_diff ( merge, lhs, rhs ):
    """Generic dictionary difference."""
    diff = {}
    for key in lhs.keys():
          # auto-merge for missing key on right-hand-side.
        if (not rhs.has_key(key)):
            diff[key] = lhs[key]
          # on collision, invoke custom merge function.
        elif (lhs[key] != rhs[key]):
            diff[key] = merge(lhs[key], rhs[key])
    for key in rhs.keys():
          # auto-merge for missing key on left-hand-side.
        if (not lhs.has_key(key)):
            diff[key] = rhs[key]
    return diff

def user_diff ( lhs, rhs ):
    """Merge dictionaries using value from right-hand-side on conflict."""
    merge = lambda l,r: r
    return dict_diff(merge, lhs, rhs)

import copy

def push ( x, k, v ):
    """Returns copy of dict `x` with key `k` set to `v`."""
    x = copy.copy(x); x[k] = v; return x

def pop ( x, k ):
    """Returns copy of dict `x` without key `k`."""
    x = copy.copy(x); del x[k]; return x

def special_diff ( lhs, rhs, k ):
      # transform list of dicts into 2 levels of dicts, 1st level index by k.
    lhs = dict([(D[k],pop(D,k)) for D in lhs])
    rhs = dict([(D[k],pop(D,k)) for D in rhs])
      # diff at the 1st level.
    c = dict_diff(user_diff, lhs, rhs)
      # transform to back to initial format.
    return [push(D,k,K) for (K,D) in c.items()]
</snippet></ROW><ROW><id>6333972</id><snippet>ldA = [{'user':"nameA", 'a':7.6, 'b':100.0, 'c':45.5, 'd':48.9},
       {'user':"nameB", 'a':46.7, 'b':67.3, 'c':0.0, 'd':5.5}]
ldB =[{'user':"nameA", 'a':7.6, 'b':99.9, 'c':45.5, 'd':43.7},
      {'user':"nameB", 'a':67.7, 'b':67.3, 'c':1.1, 'd':5.5},
      {'user':"nameC", 'a':89.9, 'b':77.3, 'c':2.2, 'd':6.5}]
import pprint
if __name__ == '__main__':
    pprint.pprint(special_diff(ldA, ldB, 'user'))
</snippet></ROW><ROW><id>6334064</id><snippet>logger = logging.getLogger()
hdlr = logging.FileHandler('logfile.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(logging.DEBUG)
print logger.handlers
# [&lt;logging.FileHandler object at 0x14542d0&gt;]
logger.addHandler(hdlr)
print logger.handlers
# [&lt;logging.FileHandler object at 0x14542d0&gt;]
</snippet></ROW><ROW><id>6334064</id><snippet>__init__.py</snippet></ROW><ROW><id>6334064</id><snippet>logger = logging.getLogger(__name__)
...
</snippet></ROW><ROW><id>6334161</id><snippet>test</snippet></ROW><ROW><id>6334161</id><snippet>Test</snippet></ROW><ROW><id>6334161</id><snippet>'_'</snippet></ROW><ROW><id>6334161</id><snippet>'.'</snippet></ROW><ROW><id>6334161</id><snippet>'-</snippet></ROW><ROW><id>6334161</id><snippet>test</snippet></ROW><ROW><id>6334161</id><snippet>Test</snippet></ROW><ROW><id>6334161</id><snippet>nosetests -vv --collect-only
</snippet></ROW><ROW><id>6334161</id><snippet>chmod 644 file.py
</snippet></ROW><ROW><id>6334161</id><snippet>--exe</snippet></ROW><ROW><id>6334161</id><snippet>nosetests --exe
</snippet></ROW><ROW><id>6334300</id><snippet>match_request</snippet></ROW><ROW><id>6334300</id><snippet>process_request</snippet></ROW><ROW><id>6334300</id><snippet>match_request</snippet></ROW><ROW><id>6334300</id><snippet>match_request</snippet></ROW><ROW><id>6334395</id><snippet>'w'</snippet></ROW><ROW><id>6334395</id><snippet>'a'</snippet></ROW><ROW><id>6334395</id><snippet>logging</snippet></ROW><ROW><id>6334660</id><snippet>get()</snippet></ROW><ROW><id>6334660</id><snippet>set()</snippet></ROW><ROW><id>6334660</id><snippet>attrib</snippet></ROW><ROW><id>6334660</id><snippet>Element</snippet></ROW><ROW><id>6334660</id><snippet>attrib</snippet></ROW><ROW><id>6334660</id><snippet>set()</snippet></ROW><ROW><id>6334660</id><snippet>set()</snippet></ROW><ROW><id>6334660</id><snippet>Element</snippet></ROW><ROW><id>6334660</id><snippet>attrib</snippet></ROW><ROW><id>6334660</id><snippet>elem_line.attrib['r'] = smpl_data[linenum][2]
</snippet></ROW><ROW><id>6334660</id><snippet>Element</snippet></ROW><ROW><id>6334660</id><snippet>elem_line.get('r')
elem_line.set('r', smpl_data[linenum][2])
</snippet></ROW><ROW><id>6334762</id><snippet>import matplotlib.pyplot as plt
import numpy

x = numpy.arange(10.)
d = dict((i, numpy.sin(x+i)) for i in range(5))

for k in sorted(d):  # sort purely to make deterministic
    plt.plot(x,d[k],label=str(k))

plt.legend(loc=2)
plt.draw()
</snippet></ROW><ROW><id>6335254</id><snippet>xmlhttp.responseText</snippet></ROW><ROW><id>6335254</id><snippet>newbody</snippet></ROW><ROW><id>6335254</id><snippet>xmlhttp.responseText</snippet></ROW><ROW><id>6335579</id><snippet>tarfile</snippet></ROW><ROW><id>6335579</id><snippet>tarfile</snippet></ROW><ROW><id>6335642</id><snippet>function</snippet></ROW><ROW><id>6335642</id><snippet>import signal
...
signal.signal(signal.SIGALRM, alarm_handler)  # set the signal handler
signal.alarm(interval)                        # set the alarm
...
def alarm_handler(signum, stack):
    # call function
    function()
</snippet></ROW><ROW><id>6335642</id><snippet>function()</snippet></ROW><ROW><id>6335642</id><snippet>signal.signal(signal.SIGALRM, alarm_handler)
signal.alarm(interval)
</snippet></ROW><ROW><id>6335642</id><snippet>signal.setitimer</snippet></ROW><ROW><id>6335685</id><snippet>with open(filename, "r+") as file:
    lines = file.readlines()

    lines = [line.replace(bad_character, '') for line in lines]

    file.seek(0)
    file.writelines(lines)
    file.truncate()         # Will get rid of any excess characters left at the end of the file due to the length of your new file being shorter than the old one, as you've removed characters.
</snippet></ROW><ROW><id>6335711</id><snippet>that</snippet></ROW><ROW><id>6335711</id><snippet>getattr()</snippet></ROW><ROW><id>6336007</id><snippet>class SpzType(abc.ABCMeta):

    def __subclasshook__(self, C):
        return NotImplemented

    def __new__(cls, base, **features):
        name = 'SpzOf%s' % base.__name__
        bases = (base,)
        attrs = {}
        new_spz = super(SpzType, cls).__new__(cls, name, bases, attrs)
        new_spz.__subclasshook__ = classmethod(cls.__subclasshook__)
        return new_spz

    def __init__(self, base, **features):
        for name, value in features.items():
            setattr(self, name, value)
</snippet></ROW><ROW><id>6336007</id><snippet>SpzType</snippet></ROW><ROW><id>6336007</id><snippet>abc.ABCMeta</snippet></ROW><ROW><id>6336007</id><snippet>__subclasshook__</snippet></ROW><ROW><id>6336007</id><snippet>__subclasshook__</snippet></ROW><ROW><id>6336192</id><snippet>&gt;&gt;&gt; content = open('foo').read()
&gt;&gt;&gt; print content
TOTAL:.?C2
abcTOTAL:AC2
defTOTAL:C2
&gt;&gt;&gt; content
'TOTAL:.?C2\nabcTOTAL:AC2\ndefTOTAL:C2'
</snippet></ROW><ROW><id>6336192</id><snippet>&gt;&gt;&gt; regex = re.compile('TOTAL:.*?C2\n', re.DOTALL)
&gt;&gt;&gt; regex.sub("XXX", content)
'XXXabcXXXdefTOTAL:C2'
</snippet></ROW><ROW><id>6336192</id><snippet>$</snippet></ROW><ROW><id>6336192</id><snippet>&gt;&gt;&gt; regex = re.compile('TOTAL:.*?C2(\n|$)', re.DOTALL)
&gt;&gt;&gt; regex.sub("XXX", content)
'XXXabcXXXdefXXX'
</snippet></ROW><ROW><id>6336448</id><snippet>itertools.product()</snippet></ROW><ROW><id>6336448</id><snippet>table = list(itertools.product([False, True], repeat=n))
</snippet></ROW><ROW><id>6336448</id><snippet>n = 3</snippet></ROW><ROW><id>6336448</id><snippet>[(False, False, False),
 (False, False, True),
 (False, True, False),
 (False, True, True),
 (True, False, False),
 (True, False, True),
 (True, True, False),
 (True, True, True)]
</snippet></ROW><ROW><id>6336695</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>6336915</id><snippet>from pythoncom import com_error
</snippet></ROW><ROW><id>6336915</id><snippet>except</snippet></ROW><ROW><id>6336944</id><snippet>s = '1111 19th St NW # 200'
n = s.split('#')[1].strip()

print n
</snippet></ROW><ROW><id>6337109</id><snippet>.group(0)</snippet></ROW><ROW><id>6337109</id><snippet>.group(1)</snippet></ROW><ROW><id>6337109</id><snippet>import re
string = re.search("\[tag\](.*?)\[tag\]", "[tag]string[tag]")
print string.group(1) # prints 'string'
</snippet></ROW><ROW><id>6337218</id><snippet>gunicorn project:app --daemon
</snippet></ROW><ROW><id>6337218</id><snippet>--pid</snippet></ROW><ROW><id>6337721</id><snippet>DOKAN_OPERATIONS</snippet></ROW><ROW><id>6337721</id><snippet>FindFilesWithPattern</snippet></ROW><ROW><id>6337721</id><snippet>DokanMain</snippet></ROW><ROW><id>6337721</id><snippet>#Create the callback pointer type
PFINDFILESWITHPATTERN = ctypes.WINFUNCTYPE(ctypes.c_int,
                                          ctypes.c_wchar_p,
                                          ctypes.c_wchar_p,
                                          PFillFindData,
                                          PDOKAN_FILE_INFO) 

# Implement in Python
def FindFilesWithPatternImpl(...):
    # implementation

# Create a callback pointer object
FindFilesWithPattern = PFINDFILESIWTHPATTERN(FindFilesWithPatternImpl)

# Create the required structure listing the callback
dokan_op = DOKAN_OPERATIONS(...,FindFilesWithPattern,...)

# Register the callbacks
DokanMain(byref(dokan_op))
</snippet></ROW><ROW><id>6337721</id><snippet>dokan_op</snippet></ROW><ROW><id>6337721</id><snippet>def mount():
    # Create structure locally
    dokan_op = DOKAN_OPERATIONS(...)
    # Spin off thread to mount Dokan
    threading.Thread(DokanMain,args=(byref(dokan_op),))

mount()
</snippet></ROW><ROW><id>6337721</id><snippet>mount()</snippet></ROW><ROW><id>6337721</id><snippet>dokan_op</snippet></ROW><ROW><id>6337721</id><snippet>FindFilesWithPattern</snippet></ROW><ROW><id>6338030</id><snippet>xl = Dispatch('Excel.Application')
wb = xl.Workbooks.Open('New Workbook.xlsx')
# do some stuff
wb.Close(True) # save the workbook
</snippet></ROW><ROW><id>6338030</id><snippet>from win32com.client import Dispatch
xl = Dispatch('Excel.Application')
wb = xl.Workbooks.Add()
ws = wb.Worksheets.Add()
cell = ws.Cells(1)
cell.Value = 'Some text'
wb.Close(True, r'C:\Path\to\folder\Test.xlsx')
</snippet></ROW><ROW><id>6338030</id><snippet>wb = xl.Workbooks.Open(r'C:\Path\to\folder\Test.xlsx')
ws = wb.Worksheets(1)
cell = ws.Cells(2)
cell.Value = 'Some more text'
wb.Close(True)
</snippet></ROW><ROW><id>6338036</id><snippet>x[0]</snippet></ROW><ROW><id>6338036</id><snippet>define</snippet></ROW><ROW><id>6338036</id><snippet>x[1]</snippet></ROW><ROW><id>6338036</id><snippet>x[2]</snippet></ROW><ROW><id>6338036</id><snippet>_, var, exp = x</snippet></ROW><ROW><id>6338036</id><snippet>x</snippet></ROW><ROW><id>6338052</id><snippet>#include &lt;Python.h&gt;

static PyMethodDef SpamMethods[] =
{
    {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC
initspam(void)
{
    (void)Py_InitModule("spam", SpamMethods);
    int* invalidptr = NULL;
    *invalidptr = 42;
}
</snippet></ROW><ROW><id>6338052</id><snippet>import spam
</snippet></ROW><ROW><id>6338119</id><snippet>required</snippet></ROW><ROW><id>6338119</id><snippet>required</snippet></ROW><ROW><id>6338159</id><snippet>typeNumber</snippet></ROW><ROW><id>6338159</id><snippet>typeNumber</snippet></ROW><ROW><id>6338159</id><snippet>typeNumber</snippet></ROW><ROW><id>6338159</id><snippet>typeNumber</snippet></ROW><ROW><id>6338271</id><snippet>br = mechanize.Browser()
resp = br.open('your_url_here')
print resp.get_data() # if you want to see what's returned
# if you want to see the forms, so you can find the index of the
# form you want and check that is has all the fields, if it doesn't
# you should should parse the response with BeautifulSoup
for form in br.forms():
    print '---------------'
    print form
br.select_form(nr=0) # to select the first form
br['field_name'] = 'field_value'
br['select_field_name'] = ['select_field_value']
br.submit()
</snippet></ROW><ROW><id>6338544</id><snippet>re</snippet></ROW><ROW><id>6338544</id><snippet>import re
regex = re.compile(r'\([^\(\)]+\)')

def eval_expr(expr):
    match = regex.search(expr)
    if match:
        sub_expr = match.group()
        return eval_expr(expr.replace(sub_expr, str(eval_expr(sub_expr[1:-1]))))
    args = expr.split()
    op = args.pop()
    return eval(op.join(args))
</snippet></ROW><ROW><id>6338544</id><snippet>&gt;&gt;&gt; eval_expr('(1 (2 3 -) 4 +) (5 6 *) 7 +')
&lt;&lt;&lt; 41
</snippet></ROW><ROW><id>6338719</id><snippet>myproject/
    ...
    app1/
        views.py
        __init__.py
        models.py
        submodels/
            __init__.py
            model1.py
            model2.py
    app2/
        views.py
        __init__.py
        models.py
        submodels/
            __init__.py
            model3.py
            model4.py
</snippet></ROW><ROW><id>6338719</id><snippet>#myproject/app1/models.py:
    from submodels/model1.py import *
    from submodels/model2.py import *

#myproject/app2/models.py:
    from submodels/model3.py import *
    from submodels/model4.py import *
</snippet></ROW><ROW><id>6338719</id><snippet>from django.db import models
class Store(models.Model):
    class Meta:
        app_label = "store"
</snippet></ROW><ROW><id>6338719</id><snippet>from django.db import models
from app1.models import Store

class Product(models.Model):
    store = models.ForeignKey(Store)
    class Meta:
        app_label = "product"
</snippet></ROW><ROW><id>6338747</id><snippet>                      Django   web2py
web based IDE         no       yes
database interface    admin    appadmin (*)
crud widgets in apps  some     all      (**)
</snippet></ROW><ROW><id>6338916</id><snippet>&gt;&gt;&gt; "a" + "b"
'ab'
&gt;&gt;&gt; "%s%s" % ("a", "b")
'ab'
&gt;&gt;&gt; "{a}{b}".format(a="a", b="b")
'ab'
&gt;&gt;&gt; "{}{}".format("a", "b")
'ab'
&gt;&gt;&gt; "{0}{1}".format("a", "b")
'ab'
&gt;&gt;&gt; "a" "b"
'ab'
&gt;&gt;&gt; "".join(("a", "b"))
'ab'
</snippet></ROW><ROW><id>6339272</id><snippet>append</snippet></ROW><ROW><id>6339272</id><snippet>for i in range(n):
   list1.append(i)
</snippet></ROW><ROW><id>6339272</id><snippet>range(n)</snippet></ROW><ROW><id>6339272</id><snippet>list1 = [i for i in range(n)]
</snippet></ROW><ROW><id>6339272</id><snippet>range(n)</snippet></ROW><ROW><id>6339272</id><snippet>list(range(n))</snippet></ROW><ROW><id>6339311</id><snippet>import scipy.stats
import numpy as np
import matplotlib.pyplot as plt

# 100 values from a normal distribution with a std of 3 and a mean of 0.5
data = 3.0 * np.random.randn(100) + 0.5

counts, start, dx, _ = scipy.stats.cumfreq(data, numbins=20)
x = np.arange(counts.size) * dx + start

plt.plot(x, counts, 'ro')
plt.xlabel('Value')
plt.ylabel('Cumulative Frequency')

plt.show()
</snippet></ROW><ROW><id>6339311</id><snippet>import itertools
import scipy.stats
import numpy as np
import matplotlib.pyplot as plt

# Generate some data... (Using a list to hold it so that the datasets don't 
# have to be the same length...)
numdatasets = 4
stds = np.random.randint(1, 10, size=numdatasets)
means = np.random.randint(-5, 5, size=numdatasets)
values = [std * np.random.randn(100) + mean for std, mean in zip(stds, means)]

# Set up several subplots
fig, axes = plt.subplots(nrows=1, ncols=numdatasets, figsize=(12,6))

# Set up some colors and markers to cycle through...
colors = itertools.cycle(['b', 'g', 'r', 'c', 'm', 'y', 'k'])
markers = itertools.cycle(['o', '^', 's', r'$\Phi$', 'h'])

# Now let's actually plot our data...
for ax, data, color, marker in zip(axes, values, colors, markers):
    counts, start, dx, _ = scipy.stats.cumfreq(data, numbins=20)
    x = np.arange(counts.size) * dx + start
    ax.plot(x, counts, color=color, marker=marker, 
            markersize=10, linestyle='none')

# Next we'll set the various labels...
axes[0].set_ylabel('Cumulative Frequency')
labels = ['This', 'That', 'The Other', 'And Another']
for ax, label in zip(axes, labels):
    ax.set_xlabel(label)

plt.show()
</snippet></ROW><ROW><id>6339311</id><snippet>plt.show()</snippet></ROW><ROW><id>6339311</id><snippet># Because we want this to look like a continuous plot, we need to hide the
# boundaries (a.k.a. "spines") and yticks on most of the subplots
for ax in axes[1:]:
    ax.spines['left'].set_color('none')
    ax.spines['right'].set_color('none')
    ax.yaxis.set_ticks([])
axes[0].spines['right'].set_color('none')

# To reduce clutter, let's leave off the first and last x-ticks.
for ax in axes:
    xticks = ax.get_xticks()
    ax.set_xticks(xticks[1:-1])

# Now, we'll "scrunch" all of the subplots together, so that they look like one
fig.subplots_adjust(wspace=0)
</snippet></ROW><ROW><id>6339311</id><snippet>numpy.percentile</snippet></ROW><ROW><id>6339311</id><snippet># Replacing the for loop from before...
plot_percentiles = range(0, 110, 10)
for ax, data, color, marker in zip(axes, values, colors, markers):
    x = np.percentile(data, plot_percentiles)
    ax.plot(x, plot_percentiles, color=color, marker=marker, 
            markersize=10, linestyle='none')
</snippet></ROW><ROW><id>6339343</id><snippet>hasattr</snippet></ROW><ROW><id>6339343</id><snippet>if hasattr(expando_instance, 'foo'):
  # Do something with expando_instance.foo
</snippet></ROW><ROW><id>6339560</id><snippet>(r'^search', 'search')
</snippet></ROW><ROW><id>6339560</id><snippet>def search(request):
    device = request.GET.get('device', 'all')
    category = request.GET.get('category', 'single')
    query = request.GET.get('query', '')
    limit = request.GET.get('limit', 30)

   return HttpResponse("device=%s, category=%s, query=%s, limit=%d", device, category, query, limit)
</snippet></ROW><ROW><id>6339868</id><snippet>def matches_template(word, template):
  found_chars = set(x for x in template if x != '-')
  for char, template_char in zip(word, template):
    if template_char == '-':
      if char in found_chars: return False
    else:
      if template_char != char: return False
  return True
</snippet></ROW><ROW><id>6339958</id><snippet>oneOf</snippet></ROW><ROW><id>6339958</id><snippet>from pyparsing import *
integer = Word(nums)
op = oneOf('* + - / ^')
expr = integer + integer + op
parsed = expr.parseString("3 4 *")
print parsed
</snippet></ROW><ROW><id>6340070</id><snippet>-q</snippet></ROW><ROW><id>6340070</id><snippet>-dDEBUG</snippet></ROW><ROW><id>6340426</id><snippet>&lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
&lt;filter class="solr.EdgeNGramFilterFactory" minGramSize="1" maxGramSize="100" side="back"/&gt;
&lt;filter class="solr.LowerCaseFilterFactory" /&gt;
</snippet></ROW><ROW><id>6340426</id><snippet>"Index this!" =&gt; x, ex, dex, ndex, index, !, s!, is!, his!, this!
</snippet></ROW><ROW><id>6340426</id><snippet>"nde*"
</snippet></ROW><ROW><id>6340531</id><snippet>my $ret = `/usr/bin/pdf2txt.py arg1 arg2`;
</snippet></ROW><ROW><id>6340531</id><snippet>my $ret = `/usr/bin/pdf2txt.py arg1 arg2 2&gt;&amp;1`;
</snippet></ROW><ROW><id>6340531</id><snippet>my $ret = system("/usr/bin/pdf2txt.py arg1 arg2");
</snippet></ROW><ROW><id>6340531</id><snippet>``</snippet></ROW><ROW><id>6340531</id><snippet>system()</snippet></ROW><ROW><id>6340578</id><snippet>traverse</snippet></ROW><ROW><id>6340578</id><snippet>def traverse(o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        for value in o:
            for subvalue in traverse(value):
                yield subvalue
    else:
        yield o

data = [(1,1,(1,1,(1,"1"))),(1,1,1),(1,),1,(1,(1,("1",)))]
print list(traverse(data))
# prints [1, 1, 1, 1, 1, '1', 1, 1, 1, 1, 1, 1, 1, '1']

for value in traverse(data):
    print repr(value)
# prints
# 1
# 1
# 1
# 1
# 1
# '1'
# 1
# 1
# 1
# 1
# 1
# 1
# 1
# '1'
</snippet></ROW><ROW><id>6340636</id><snippet>url('user', id=1)
</snippet></ROW><ROW><id>6340815</id><snippet>%pdb</snippet></ROW><ROW><id>6340835</id><snippet>setblocking</snippet></ROW><ROW><id>6340835</id><snippet>settimeout</snippet></ROW><ROW><id>6340963</id><snippet>def outer_gen(iterable):

    iterable = iter(iterable)
    first_item = next(iterable)
    info = first_item[0]

    yield info, first_item[1:]

    for item in iterable:
        yield info, item
</snippet></ROW><ROW><id>6340963</id><snippet>try</snippet></ROW><ROW><id>6340963</id><snippet>except</snippet></ROW><ROW><id>6340963</id><snippet>IndexErrors</snippet></ROW><ROW><id>6340963</id><snippet>itertools</snippet></ROW><ROW><id>6340963</id><snippet>dropwhile</snippet></ROW><ROW><id>6340963</id><snippet>takewhile</snippet></ROW><ROW><id>6340963</id><snippet>chain</snippet></ROW><ROW><id>6340963</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = ['+foo', '-bar', '+foo']
&gt;&gt;&gt; list(itertools.takewhile(lambda x: x.startswith('+'), l))
['+foo']
&gt;&gt;&gt; list(itertools.dropwhile(lambda x: x.startswith('+'), l))
['-bar', '+foo']
&gt;&gt;&gt; a = itertools.takewhile(lambda x: x.startswith('+'), l)
&gt;&gt;&gt; b = itertools.dropwhile(lambda x: x.startswith('+'), l)
&gt;&gt;&gt; list(itertools.chain(a, b))
['+foo', '-bar', '+foo']
</snippet></ROW><ROW><id>6340963</id><snippet>import random

def create_item():
    return random.choice(('+', '-')) + random.choice(('foo', 'bar'))

random_items = (create_item() for s in xrange(10))
added_items = ((i[0], i[1:]) for i in random_items if i.startswith('+'))
valid_items = ((prefix, line) for prefix, line in added_items if 'foo' in line)

print list(valid_items)
</snippet></ROW><ROW><id>6340973</id><snippet>opener = urllib2.build_opener(urllib2.HTTPHandler(debuglevel=1))
</snippet></ROW><ROW><id>6340973</id><snippet>&gt;&gt;&gt; opener.open('http://python.org')
send: 'GET / HTTP/1.1\r\nAccept-Encoding: identity\r\nHost: python.org\r\nConnection: close\r\nUser-Agent: Python-urllib/2.7\r\n\r\n'
reply: 'HTTP/1.1 200 OK\r\n'
header: Date: Tue, 14 Jun 2011 08:23:35 GMT
header: Server: Apache/2.2.16 (Debian)
header: Last-Modified: Mon, 13 Jun 2011 19:41:35 GMT
header: ETag: "105800d-486d-4a59d1b6699c0"
header: Accept-Ranges: bytes
header: Content-Length: 18541
header: Connection: close
header: Content-Type: text/html
header: X-Pad: avoid browser bug
&lt;addinfourl at 140175550177224 whose fp = &lt;socket._fileobject object at 0x7f7d29c3d5d0&gt;&gt;
</snippet></ROW><ROW><id>6340973</id><snippet>urllib2.Request</snippet></ROW><ROW><id>6340973</id><snippet>&gt;&gt;&gt; req = urllib2.Request(url='http://python.org')
&gt;&gt;&gt; req.add_header('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0)')
&gt;&gt;&gt; req.headers
{'User-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:5.0)'}
</snippet></ROW><ROW><id>6341359</id><snippet>fileConfig()</snippet></ROW><ROW><id>6341359</id><snippet>fileConfig()</snippet></ROW><ROW><id>6341859</id><snippet>pickle</snippet></ROW><ROW><id>6341859</id><snippet>import pickle
dict = {...}
tcp_send(pickle.dumps(dict))
</snippet></ROW><ROW><id>6341859</id><snippet>import pickle
dict = pickle.loads(tcp_recieve())
</snippet></ROW><ROW><id>6341930</id><snippet>If you use multiple -O options, with or without level numbers, the last such option is the one that is effective.</snippet></ROW><ROW><id>6341965</id><snippet>content_type = models.ForeignKey(ContentType)
object_id = models.PositiveIntegerField()
content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>6342118</id><snippet>t</snippet></ROW><ROW><id>6342118</id><snippet>date</snippet></ROW><ROW><id>6342118</id><snippet>datetime.timetuple(datetime.now())</snippet></ROW><ROW><id>6342165</id><snippet>import sys
import tempfile
from subprocess import Popen, PIPE


cmd = [sys.executable, '-c', 'print raw_input()']

# Using a temp file to give input data to the subprocess instead of stdin.write to avoid deadlocks.
with tempfile.TemporaryFile() as f:
    f.write('foobar')
    f.seek(0)  # Return at the start of the file so that the subprocess p1 can read what we wrote.
    p1 = Popen(cmd, stdin=f, stdout=PIPE)

p2 = Popen(cmd, stdin=p1.stdout, stdout=PIPE)
p3 = Popen(cmd, stdin=p2.stdout, stdout=PIPE)

# No order needed.
p1.stdout.close()
p2.stdout.close()

# Using communicate() instead of stdout.read to avoid deadlocks. 
print p3.communicate()[0]
</snippet></ROW><ROW><id>6342165</id><snippet>$ python test.py
foobar
</snippet></ROW><ROW><id>6342482</id><snippet>import collections

def a2s(a):
    res = ''
    if isinstance(a, collections.Iterable):
        for item in a:
            res +=  str(a2s(item)) + ' '
    else:
        res = str(a)
    return res
</snippet></ROW><ROW><id>6342482</id><snippet>a = [ [1, 2], [3, 4] ]
print(a2s(a))
&gt;&gt;&gt; 1 2  3 4
</snippet></ROW><ROW><id>6342943</id><snippet>omp_set_dynamic(1);
</snippet></ROW><ROW><id>6342955</id><snippet>len(s) &lt; 256 and '.' in s
</snippet></ROW><ROW><id>6343197</id><snippet>addDocuments()</snippet></ROW><ROW><id>6343398</id><snippet>MY_CONSTANT = 50
</snippet></ROW><ROW><id>6343398</id><snippet>import myconstants
print myconstants.MY_CONSTANT * 2
</snippet></ROW><ROW><id>6343403</id><snippet>pyplot.title='Foobar'
</snippet></ROW><ROW><id>6343403</id><snippet>pyplot.title("Spam and Ham")
</snippet></ROW><ROW><id>6343403</id><snippet>ax.set_xticklabels([n], rotation='vertical')</snippet></ROW><ROW><id>6343403</id><snippet>&gt;&gt;&gt; n, bins, patches = ax.hist([1,2,3,4])
&gt;&gt;&gt; n
array([1, 0, 0, 1, 0, 0, 1, 0, 0, 1])
&gt;&gt;&gt; bins
array([ 1. ,  1.3,  1.6,  1.9,  2.2,  2.5,  2.8,  3.1,  3.4,  3.7,  4. ])
&gt;&gt;&gt; patches
&lt;a list of 10 Patch objects&gt;
</snippet></ROW><ROW><id>6343403</id><snippet>for label in ax.get_xticklabels():
    label.set_rotation('vertical')
</snippet></ROW><ROW><id>6343675</id><snippet>syncdb</snippet></ROW><ROW><id>6343675</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>6343675</id><snippet>admin</snippet></ROW><ROW><id>6343675</id><snippet>auth</snippet></ROW><ROW><id>6343867</id><snippet>[(field, direction), ...]</snippet></ROW><ROW><id>6343867</id><snippet>(field, direction)</snippet></ROW><ROW><id>6344498</id><snippet>{{ object.has_voted }}</snippet></ROW><ROW><id>6344498</id><snippet>has_voted(self)</snippet></ROW><ROW><id>6344498</id><snippet>@register.filter
def has_voted(obj, user):
    return self.has_voted(user)
</snippet></ROW><ROW><id>6344498</id><snippet>{{ object|has_voted:user }}
</snippet></ROW><ROW><id>6344763</id><snippet>\b</snippet></ROW><ROW><id>6345122</id><snippet>re.match('(?:http|ftp|https)://', url)</snippet></ROW><ROW><id>6345286</id><snippet>mylist</snippet></ROW><ROW><id>6345286</id><snippet>list</snippet></ROW><ROW><id>6345286</id><snippet>move</snippet></ROW><ROW><id>6345286</id><snippet>for circleObject in mylist:
    move_ob(circle)
</snippet></ROW><ROW><id>6345286</id><snippet>move_ob(mylist)</snippet></ROW><ROW><id>6345480</id><snippet>$ python yourpythonscript.py &amp;
</snippet></ROW><ROW><id>6345480</id><snippet>cmd.exe</snippet></ROW><ROW><id>6345909</id><snippet>import constants

def use_my_constants():
    print constants.GOOD, constants.BAD, constants.AWFUL
</snippet></ROW><ROW><id>6346268</id><snippet># load everything. Probably not the best idea in production...
from OpenSSL.crypto import *

# open it, using password. Supply/read your own from stdin.
p12 = load_pkcs12(file("/path/to/cert.p12", 'rb').read(), passwd)

# get various properties of said file.
# note these are PyOpenSSL objects, not strings although you
# can convert them to PEM-encoded strings.
p12.get_certificate()     # (signed) certificate object
p12.get_privatekey()      # private key.
p12.get_ca_certificates() # ca chain.
</snippet></ROW><ROW><id>6346296</id><snippet># Widget that modifies the output of a FileField
class OutputWidget(AdminFileWidget):
    # Overloaded django magic
    def render(self, name, value, attrs=None):
        output = []
        # This is the place where we edit the output    
        if value and getattr(value, "url", None):
            image_url = value.url
            output.append(u' &lt;a href="%s" target="_blank"&gt;&lt;img src="%s" alt="%s" /&gt;&lt;/a&gt;' % (image_url, image_url, image_url))
        output.append(super(AdminFileWidget, self).render(name, value, attrs))
        return mark_safe(u''.join(output))

# ModelAdmin class that is applied to the model
class MyModelSettings(admin.ModelAdmin):
    # Overloaded django magic
    def formfield_for_dbfield(self, db_field, **kwargs):
        # Look for the field we want to edit and register the widget with it
        if db_field.name == 'nameOfFieldIWantToEdit':
            request = kwargs.pop("request", None)
            kwargs['widget'] = OutputWidget
            return db_field.formfield(**kwargs)
        return super(MyModelSettings,self).formfield_for_dbfield(db_field, **kwargs)

# Register my overloaded settings with the model
admin.site.register(MyModel, MyModelSettings)
</snippet></ROW><ROW><id>6346360</id><snippet>def hours_live(since=datetime.datetime.now()):
    return since - self.created
</snippet></ROW><ROW><id>6346360</id><snippet>def hours_live(since=None):
    if not since:
        since = datetime.datetime.now()
    return since - self.created
</snippet></ROW><ROW><id>6346536</id><snippet>break</snippet></ROW><ROW><id>6346536</id><snippet>continue</snippet></ROW><ROW><id>6346536</id><snippet>for a in range(...):
   for b in range(..):
      if some condition:
         # break the inner loop
         break
   else:
      # will be called if the previous loop did not end with a `break` 
      continue
   # but here we end up right after breaking the inner loop, so we can
   # simply break the outer loop as well
   break
</snippet></ROW><ROW><id>6346536</id><snippet>return</snippet></ROW><ROW><id>6346777</id><snippet>import urllib
from google.appengine.api import urlfetch

def safe_browsing(url):
    """Returns True if url is safe or False is it is suspect"""
    params = urllib.urlencode({
        'client':'api',
        'apikey':'yourkey',
        'appver':'1.5.2',
        'pver':'3.0',
        'url': url })
    url = "https://sb-ssl.google.com/safebrowsing/api/lookup?%s" % params
    res = urlfetch.fetch(url, method=urlfetch.GET)
    if res.status_code &gt;= 400:
        raise Exception("Status: %s" % res.status_code)
    return res.status_code == 204
</snippet></ROW><ROW><id>6346777</id><snippet>&gt;&gt;&gt; safe_browsing('http://www.yahoo.com/')
True
</snippet></ROW><ROW><id>6346967</id><snippet>mixer.init()
</snippet></ROW><ROW><id>6347477</id><snippet>ee = deepcopy(e)
ee.id=None
ee.save()
ee.connexion.add(*e.connexion.all())
</snippet></ROW><ROW><id>6347667</id><snippet>globals()["os"] = __import__("os")?</snippet></ROW><ROW><id>6347783</id><snippet>instance = Test()
dict((p, getattr(instance, p))
     for p in dir(instance)
     if p not in dir(Test) or isinstance(getattr(Test, p), property))
</snippet></ROW><ROW><id>6347783</id><snippet>{'_Test__wrapper': {'SKIP ME': 'wrapped value'}, 'wrapped_value': 'wrapped value', 'my': 'my'}
</snippet></ROW><ROW><id>6347790</id><snippet>def preprocess(file):
    #exporting from MySQL query browser adds a weird
    #character to the result set, remove it
    #so the XML parser can read the data
    print "in preprocess"
    lines = map(lambda line: line.replace("\b", ""), file)

    #go to the beginning of the file
    file.seek(0);

    #overwrite with correct data
    file.writelines(lines)
    sys.exit()


'''Entry into the program'''
#test the file to see if processing is needed before parsing
for line in xml_file:
    p = re.compile("\\b")
    if(p.search(line)): ####Changed to p.search here
        processing = True
        break #only one match needed

if processing:
    preprocess(xml_file)
</snippet></ROW><ROW><id>6348080</id><snippet>def scanFiles(dir): 
    fout = open("animals.las", "w")
    for root, dirs, files in os.walk(dir):
        for file in files:
            if '.las' in file:
            # read the file
                fin = open(file, "r")
                str2 = fin.read()
                fin.close()
            # call the function and get the changed text
                str3 = replace_words(str2, word_dic)
            # write changed text back out
                fout.write(str3)
                #time.sleep(1)
    fout.close()
</snippet></ROW><ROW><id>6348187</id><snippet>execfile()</snippet></ROW><ROW><id>6348222</id><snippet>#!/usr/bin/env python
import numpy as np
import matplotlib.cm as cm
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

delta = 0.025
x = y = np.arange(-3.0, 3.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = Z2-Z1  # difference of Gaussians

im = plt.imshow(Z, interpolation='bilinear', cmap=cm.gray,
                origin='lower', extent=[-3,3,-3,3])

plt.show()
</snippet></ROW><ROW><id>6348279</id><snippet>test</snippet></ROW><ROW><id>6348279</id><snippet>src/module1/test
src/module2/test
src/module2/sub_module/test
</snippet></ROW><ROW><id>6348765</id><snippet>http://myserver/post_service</snippet></ROW><ROW><id>6348765</id><snippet>http://myserver/post_service/</snippet></ROW><ROW><id>6348765</id><snippet>url</snippet></ROW><ROW><id>6348765</id><snippet>http://myserver/post_service/</snippet></ROW><ROW><id>6349062</id><snippet>Simp</snippet></ROW><ROW><id>6349062</id><snippet>Simp</snippet></ROW><ROW><id>6349062</id><snippet>builtin_op</snippet></ROW><ROW><id>6349062</id><snippet>import sys, shlex, readline, os, string
List, assign, call, add, sub, div, Pow, mul, mod, fac, duf, read,\
kill, clr, STO, RET, fib, curs = {}, "set", "get", "+", "-", "/", "^", "*",\
"%", "fact", "func", "read", "kill", "clear", "&gt;", "@", "fib", "vars"
def fact(num):
    if num == 1: return 1
    else: return num*fact(num-1)
def builtin_op(op, stack):
    global List
    if op == mul: stack.append(float(stack.pop())*float(stack.pop()))
    elif op == div: stack.append(float(stack.pop())/float(stack.pop()))
    elif op == sub: stack.append(float(stack.pop())-float(stack.pop()))
    elif op == add: stack.append(float(stack.pop())+float(stack.pop()))
    elif op == Pow: stack.append(float(stack.pop())**float(stack.pop()))
    elif op == assign: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == call: stack.append(List[stack.pop()])
    elif op == fac: stack.append(fact(stack.pop()))
    elif op == duf: stack.append("%s %s %s" % (duf, stack.pop(), stack.pop()))
    elif op == mod: stack.append(float(stack.pop())%float(stack.pop()))
    elif op == kill: del List[stack.pop()]
    elif op == clr: os.system("clear")
    elif op == STO: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == RET: stack.append(List[stack.pop()])
    elif op == curs: stack.append(List)
    elif op == read: prompt = stack.pop(); List[prompt] = Eval(raw_input("%s "%prompt)); stack.append(List[prompt])
def Eval(expr):
    ops = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"%(mul, add, sub, div, Pow, assign, call, fac, duf, mod, read, kill, clr, STO, RET, curs)
    stack, expr, ops = [], shlex.split(string.lower(expr)), ops.split()
    for i in expr:
        if i[0] != ';':
            if i not in ops: stack.append(i)
            elif i in ops: builtin_op(i, stack)
        else: stack.append("ok")
    return stack[0]
def shell():
    try:
        x = ""
        while x != "quit":
            x = raw_input("star&gt;   ")
            try: l = Eval(x)
            except KeyError: l = "does not exist"
            except: l = "parse error!"
            if l != None: print "   =&gt;",l,"\n"
    except (EOFError, KeyboardInterrupt): print
if len(sys.argv) &gt; 1:
    x = open(sys.argv[1], 'r'); l = x.readlines(); x.close()
    for i in l:
        if i[0] != ";":
            i = ' '.join(i.split())
            x = Eval(i)
            if x != None: print i,"\n   =&gt;",x,"\n"
        else: pass
    shell()
else: shell()
</snippet></ROW><ROW><id>6349062</id><snippet>shlex</snippet></ROW><ROW><id>6349062</id><snippet>star&gt;   "3 +" add3 func
</snippet></ROW><ROW><id>6349062</id><snippet>star&gt;   2 add3 get
</snippet></ROW><ROW><id>6349062</id><snippet>get</snippet></ROW><ROW><id>6349062</id><snippet>call</snippet></ROW><ROW><id>6349062</id><snippet>Eval</snippet></ROW><ROW><id>6349062</id><snippet>Eval</snippet></ROW><ROW><id>6349062</id><snippet>stack</snippet></ROW><ROW><id>6349062</id><snippet>Eval</snippet></ROW><ROW><id>6349062</id><snippet>Eval</snippet></ROW><ROW><id>6349062</id><snippet>Eval</snippet></ROW><ROW><id>6349062</id><snippet>import sys, shlex, readline, os, string
List, assign, call, add, sub, div, Pow, mul, mod, fac, duf, read,\
kill, clr, STO, RET, fib, curs = {}, "set", "get", "+", "-", "/", "^", "*",\
"%", "fact", "func", "read", "kill", "clear", "&gt;", "@", "fib", "vars"
funcdict = {}
def fact(num):
    if num == 1: return 1
    else: return num*fact(num-1)
def builtin_op(op, stack):
    global List
    global funcdict
    if op == mul: stack.append(float(stack.pop())*float(stack.pop()))
    elif op == div: stack.append(float(stack.pop())/float(stack.pop()))
    elif op == sub: stack.append(float(stack.pop())-float(stack.pop()))
    elif op == add: stack.append(float(stack.pop())+float(stack.pop()))
    elif op == Pow: stack.append(float(stack.pop())**float(stack.pop()))
    elif op == assign: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == call: Eval(funcdict[stack.pop()], stack)
    elif op == fac: stack.append(fact(stack.pop()))
    elif op == duf: name = stack.pop(); funcdict[name] = stack.pop(); stack.append(name)
    elif op == mod: stack.append(float(stack.pop())%float(stack.pop()))
    elif op == kill: del List[stack.pop()]
    elif op == clr: os.system("clear")
    elif op == STO: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == RET: stack.append(List[stack.pop()])
    elif op == curs: stack.append(List)
    elif op == read: prompt = stack.pop(); List[prompt] = Eval(raw_input("%s "%prompt)); stack.append(List[prompt])
def Eval(expr, stack=None):
    ops = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"%(mul, add, sub, div, Pow, assign, call, fac, duf, mod, read, kill, clr, STO, RET, curs)
    if stack is None:
        stack = []
    expr, ops = shlex.split(string.lower(expr)), ops.split()
    for i in expr:
        if i[0] != ';':
            if i not in ops: stack.append(i)
            elif i in ops: builtin_op(i, stack)
        else: stack.append("ok")
    return stack[0]
def shell():
    try:
        x = ""
        while x != "quit":
            x = raw_input("star&gt;   ")
            try: l = Eval(x)
            except KeyError: l = "does not exist"
            except: l = "parse error!"
            if l != None: print "   =&gt;",l,"\n"
    except (EOFError, KeyboardInterrupt): print
if len(sys.argv) &gt; 1:
    x = open(sys.argv[1], 'r'); l = x.readlines(); x.close()
    for i in l:
        if i[0] != ";":
            i = ' '.join(i.split())
            x = Eval(i)
            if x != None: print i,"\n   =&gt;",x,"\n"
        else: pass
    shell()
else: shell()
</snippet></ROW><ROW><id>6349062</id><snippet>dup</snippet></ROW><ROW><id>6349062</id><snippet>swap</snippet></ROW><ROW><id>6349062</id><snippet>dup</snippet></ROW><ROW><id>6349062</id><snippet>swap</snippet></ROW><ROW><id>6349062</id><snippet>dup</snippet></ROW><ROW><id>6349062</id><snippet>square</snippet></ROW><ROW><id>6349062</id><snippet>star&gt;   "dup *" square func
</snippet></ROW><ROW><id>6349062</id><snippet>dup</snippet></ROW><ROW><id>6349062</id><snippet>swap</snippet></ROW><ROW><id>6349062</id><snippet>import sys, shlex, readline, os, string
List, assign, call, add, sub, div, Pow, mul, mod, fac, duf, read,\
kill, clr, STO, RET, fib, curs, dup, swap = {}, "set", "get", "+", "-", "/", "^", "*",\
"%", "fact", "func", "read", "kill", "clear", "&gt;", "@", "fib", "vars", "dup", "swap"
funcdict = {}
def fact(num):
    if num == 1: return 1
    else: return num*fact(num-1)
def builtin_op(op, stack):
    global List
    global funcdict
    if op == mul: stack.append(float(stack.pop())*float(stack.pop()))
    elif op == div: stack.append(float(stack.pop())/float(stack.pop()))
    elif op == sub: stack.append(float(stack.pop())-float(stack.pop()))
    elif op == add: stack.append(float(stack.pop())+float(stack.pop()))
    elif op == Pow: stack.append(float(stack.pop())**float(stack.pop()))
    elif op == assign: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == call: Eval(funcdict[stack.pop()], stack)
    elif op == fac: stack.append(fact(stack.pop()))
    elif op == duf: name = stack.pop(); funcdict[name] = stack.pop(); stack.append(name)
    elif op == mod: stack.append(float(stack.pop())%float(stack.pop()))
    elif op == kill: del List[stack.pop()]
    elif op == clr: os.system("clear")
    elif op == STO: val = List[stack.pop()] = stack.pop(); stack.append(val)
    elif op == RET: stack.append(List[stack.pop()])
    elif op == curs: stack.append(List)
    elif op == dup: val = stack.pop(); stack.append(val); stack.append(val)
    elif op == swap: val1 = stack.pop(); val2 = stack.pop(); stack.append(val1); stack.append(val2)
    elif op == read: prompt = stack.pop(); List[prompt] = Eval(raw_input("%s "%prompt)); stack.append(List[prompt])
def Eval(expr, stack=None):
    ops = "%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s"%(mul, add, sub, div, Pow, assign, call, fac, duf, mod, read, kill, clr, STO, RET, curs, dup, swap)
    if stack is None:
        stack = []
    expr, ops = shlex.split(string.lower(expr)), ops.split()
    for i in expr:
        if i[0] != ';':
            if i not in ops: stack.append(i)
            elif i in ops: builtin_op(i, stack)
        else: stack.append("ok")
    return stack[0]
def shell():
    try:
        x = ""
        while x != "quit":
            x = raw_input("star&gt;   ")
            try: l = Eval(x)
            except KeyError: l = "does not exist"
            except: l = "parse error!"
            if l != None: print "   =&gt;",l,"\n"
    except (EOFError, KeyboardInterrupt): print
if len(sys.argv) &gt; 1:
    x = open(sys.argv[1], 'r'); l = x.readlines(); x.close()
    for i in l:
        if i[0] != ";":
            i = ' '.join(i.split())
            x = Eval(i)
            if x != None: print i,"\n   =&gt;",x,"\n"
        else: pass
    shell()
else: shell()
</snippet></ROW><ROW><id>6349062</id><snippet>import shlex, functools, sys, StringIO

def bin_numeric_op(func):
    @functools.wraps(func)
    def execute(self):
        n2, n1 = self._stack.pop(), self._stack.pop()
        n1 = float(n1)
        n2 = float(n2)
        self._stack.append(func(n1, n2))
    return execute

def relational_op(func):
    @functools.wraps(func)
    def execute(self):
        n2, n1 = self._stack.pop(), self._stack.pop()
        self._stack.append(bool(func(n1, n2)))
    return execute

def bin_bool_op(func):
    @functools.wraps(func)
    def execute(self):
        n2, n1 = self._stack.pop(), self._stack.pop()
        n1 = bool(n1)
        n2 = bool(n2)
        self._stack.append(bool(func(n1, n2)))
    return execute

class Interpreter(object):
    def __init__(self):
        self._stack = []
        self._vars = {}
        self._squarestack = []

    def processToken(self, token):
        if token == '[':
            self._squarestack.append(len(self._stack))
        # Currently inside square brackets, don't execute
        elif len(self._squarestack) &gt; 0:
            if token == ']':
                startlist = self._squarestack.pop()
                lst = self._stack[startlist:]
                self._stack[startlist:] = [tuple(lst)]
            else:
                self._stack.append(token)
        # Not current inside list and close square token, something's wrong.
        elif token == ']':
            raise ValueError("Unmatched ']'")
        elif token in self.builtin_ops:
            self.builtin_ops[token](self)
        else:
            self._stack.append(token)
    def get_stack(self):
        return self._stack
    def get_vars(self):
        return self._vars
    @bin_numeric_op
    def add(n1, n2):
        return n1 + n2
    @bin_numeric_op
    def mul(n1, n2):
        return n1 * n2
    @bin_numeric_op
    def div(n1, n2):
        return n1 / n2
    @bin_numeric_op
    def sub(n1, n2):
        return n1 - n2
    @bin_numeric_op
    def mod(n1, n2):
        return n1 % n2
    @bin_numeric_op
    def Pow(n1, n2):
        return n1**n2
    @relational_op
    def less(v1, v2):
        return v1 &lt; v2
    @relational_op
    def lesseq(v1, v2):
        return v1 &lt;= v2
    @relational_op
    def greater(v1, v2):
        return v1 &gt; v2
    @relational_op
    def greatereq(v1, v2):
        return v1 &gt; v2
    @relational_op
    def isequal(v1, v2):
        return v1 == v2
    @relational_op
    def isnotequal(v1, v2):
        return v1 != v2
    @bin_bool_op
    def bool_and(v1, v2):
        return v1 and v2
    @bin_bool_op
    def bool_or(v1, v2):
        return v1 or v2
    def bool_not(self):
        stack = self._stack
        v1 = stack.pop()
        stack.append(not v1)
    def if_func(self):
        stack = self._stack
        pred = stack.pop()
        code = stack.pop()
        if pred:
            self.run(code)
    def ifelse_func(self):
        stack = self._stack
        pred = stack.pop()
        nocode = stack.pop()
        yescode = stack.pop()
        code = yescode if pred else nocode
        self.run(code)
    def store(self):
        stack = self._stack
        value = stack.pop()
        varname = stack.pop()
        self._vars[varname] = value
    def fetch(self):
        stack = self._stack
        varname = stack.pop()
        stack.append(self._vars[varname])
    def remove(self):
        varname = self._stack.pop()
        del self._vars[varname]
    # The default argument is because this is used internally as well.
    def run(self, code=None):
        if code is None:
            code = self._stack.pop()
        for tok in code:
            self.processToken(tok)
    def dup(self):
        self._stack.append(self._stack[-1])
    def swap(self):
        self._stack[-2:] = self._stack[-1:-3:-1]
    def pop(self):
        self._stack.pop()
    def showstack(self):
        print"%r" % (self._stack,)
    def showvars(self):
        print "%r" % (self._vars,)
    builtin_ops = {
        '+': add,
        '*': mul,
        '/': div,
        '-': sub,
        '%': mod,
        '^': Pow,
        '&lt;': less,
        '&lt;=': lesseq,
        '&gt;': greater,
        '&gt;=': greatereq,
        '==': isequal,
        '!=': isnotequal,
        '&amp;&amp;': bool_and,
        '||': bool_or,
        'not': bool_not,
        'if': if_func,
        'ifelse': ifelse_func,
        '!': store,
        '@': fetch,
        'del': remove,
        'call': run,
        'dup': dup,
        'swap': swap,
        'pop': pop,
        'stack': showstack,
        'vars': showvars
        }

def shell(interp):
    try:
        while True:
            x = raw_input("star&gt;   ")
            msg = None
            try:
                interp.run(shlex.split(x))
            except KeyError:
                msg = "does not exist"
            except:
                sys.excepthook(*sys.exc_info())
                msg = "parse error!"
            if msg != None:
                print "   =&gt;",msg,"\n"
            else:
                print "   =&gt; %r\n" % (interp.get_stack(),)
    except (EOFError, KeyboardInterrupt):
        print

interp = Interpreter()
if len(sys.argv) &gt; 1:
    lex = shlex.shlex(open(sys.argv[1], 'r'), sys.argv[1])
    tok = shlex.get_token()
    while tok is not None:
        interp.processToken(tok)
        tok = lex.get_token()
shell(interp)
</snippet></ROW><ROW><id>6349062</id><snippet>if</snippet></ROW><ROW><id>6349062</id><snippet>ifelse</snippet></ROW><ROW><id>6349062</id><snippet>fib</snippet></ROW><ROW><id>6349062</id><snippet>fact</snippet></ROW><ROW><id>6349062</id><snippet>fib</snippet></ROW><ROW><id>6349062</id><snippet>star&gt;   fib [ dup [ pop 1 0 + ] swap [ dup 1 - fib @ call swap 2 - fib @ call + ] swap 0 + 2 0 + &lt; ifelse ] !
   =&gt; []

star&gt;   15 fib @ call
   =&gt; [987.0]
</snippet></ROW><ROW><id>6349062</id><snippet>0 + 2 0 +</snippet></ROW><ROW><id>6349062</id><snippet>&lt;</snippet></ROW><ROW><id>6349062</id><snippet>[</snippet></ROW><ROW><id>6349062</id><snippet>]</snippet></ROW><ROW><id>6349062</id><snippet>call</snippet></ROW><ROW><id>6349062</id><snippet>lambda</snippet></ROW><ROW><id>6349062</id><snippet>fib</snippet></ROW><ROW><id>6349062</id><snippet>ifelse</snippet></ROW><ROW><id>6349062</id><snippet>shlex</snippet></ROW><ROW><id>6349062</id><snippet>while</snippet></ROW><ROW><id>6349062</id><snippet>+.</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_sender</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_sender</snippet></ROW><ROW><id>6349071</id><snippet>Zabbix trapper</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_sender</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_agentd.conf</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_agentd.conf</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_sender</snippet></ROW><ROW><id>6349071</id><snippet>zabbix_sender</snippet></ROW><ROW><id>6349135</id><snippet>&lt;xml&gt;</snippet></ROW><ROW><id>6349135</id><snippet>&lt;/xml&gt;</snippet></ROW><ROW><id>6349135</id><snippet>from lxml import etree
document = "&lt;xml&gt;a&lt;/xml&gt; &lt;xml&gt;b&lt;/xml&gt;"
document = "&lt;xml&gt;" + document + "&lt;/xml&gt;"
for subdocument in etree.XML(document):
    # whatever
</snippet></ROW><ROW><id>6349341</id><snippet>keys()</snippet></ROW><ROW><id>6349341</id><snippet>return sorted(self.diffs.keys(), key=lambda x: self.diffs[x], reverse=True)
</snippet></ROW><ROW><id>6349341</id><snippet>rank</snippet></ROW><ROW><id>6349341</id><snippet>raw_data1</snippet></ROW><ROW><id>6349341</id><snippet>return sorted(self.diffs.keys(), key=lambda x: self.diffs[x][1], reverse=True)
</snippet></ROW><ROW><id>6349430</id><snippet>&gt;&gt;&gt; '\x89'.decode('cp437')
u'\xeb'
&gt;&gt;&gt; u'\xeb'.encode('cp437')
'\x89'
&gt;&gt;&gt; u'\xeb'.encode('utf8')
'\xc3\xab'
</snippet></ROW><ROW><id>6349430</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp437'
</snippet></ROW><ROW><id>6349430</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp1252'
</snippet></ROW><ROW><id>6349572</id><snippet>self.recursfunc()</snippet></ROW><ROW><id>6349705</id><snippet>get_all_words(path)</snippet></ROW><ROW><id>6349705</id><snippet>def get_all_words(path):
    return sum((words(line) for line in open(path))
</snippet></ROW><ROW><id>6349804</id><snippet>grammar lang;

options {
  language=Python;
  output=AST;
}

tokens {
  PROGRAM;
  STATS;
  DECL;
  ASSIGN;
  EXPR;
}

program
  :  'program' id=ID '=' decl* 'begin' statement* 'end' ID '.'
     -&gt; ^(PROGRAM $id ^(DECL decl*) ^(STATS statement*))
  ;

decl
  :  const 
  |  variable
  ;

type 
  :  INTTYPE 
  |  FLOATTYPE
  ;

const
  :  'const' ID ':' type ':=' expr ';' -&gt; ^('const' type ID expr)
  ;

variable
  :  'var' ID (',' ID)* ':' type ';' -&gt; ^('var' type ID+)
  ;

statement
  :  assignment
  ;

assignment
  :  ID ':=' expr ';' -&gt; ^(ASSIGN ID expr)
  ;

expr
  :  exprAtom+ -&gt; ^(EXPR exprAtom+)
  ;

exprAtom
  :  operand 
  |  operator
  ;

operand
  :  INT
  |  ID
  ;

operator
  :  'and' | 'or' | '==' | '!=' | '&lt;' | '&lt;=' | '&gt;=' | '&gt;' | '+' | '-' | '*' | '/' | 'mod' | 'not'
  ;

INTTYPE   : 'int' ;
FLOATTYPE : 'float' ;
ID        : ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9')* ;
INT       : '0'..'9'+ ;
WS        : (' '|'\n' | '\t') {$channel=HIDDEN;} ;
</snippet></ROW><ROW><id>6349804</id><snippet>#!/usr/bin/env python
import antlr3
from antlr3 import *
from antlr3.tree import *
from langLexer import *
from langParser import *

def print_level_order(tree, indent):
  print '{0}{1}'.format('   '*indent, tree.text)
  for child in tree.getChildren():
    print_level_order(child, indent+1)

input = """
program Test1 = 
const t1 : int := 1;
const t2 : int := 2;
var x, y, z : int;
begin
x := 41;
y := 10;
z := 2 4 *;
end Test1.
"""
char_stream = antlr3.ANTLRStringStream(input)
lexer = langLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = langParser(tokens)
tree = parser.program().tree 
print_level_order(tree, 0)
</snippet></ROW><ROW><id>6349804</id><snippet>PROGRAM
   Test1
   DECL
      const
         int
         t1
         EXPR
            1
      const
         int
         t2
         EXPR
            2
      var
         int
         x
         y
         z
   STATS
      ASSIGN
         x
         EXPR
            41
      ASSIGN
         y
         EXPR
            10
      ASSIGN
         z
         EXPR
            2
            4
            *
</snippet></ROW><ROW><id>6350122</id><snippet>repr()</snippet></ROW><ROW><id>6350122</id><snippet>print</snippet></ROW><ROW><id>6350122</id><snippet>str()</snippet></ROW><ROW><id>6350122</id><snippet>repr()</snippet></ROW><ROW><id>6350122</id><snippet>&gt;&gt;&gt; "abc"
'abc'
&gt;&gt;&gt; print repr("abc")
'abc'
</snippet></ROW><ROW><id>6350227</id><snippet>pygame.draw</snippet></ROW><ROW><id>6350227</id><snippet>s = pygame.Surface((1000,750))  # the size of your rect
s.set_alpha(128)                # alpha level
s.fill((255,255,255))           # this fills the entire surface
windowSurface.blit(s, (0,0))    # (0,0) are the top-left coordinates
</snippet></ROW><ROW><id>6350227</id><snippet>s = pygame.Surface((1000,750), pygame.SRCALPHA)   # per-pixel alpha
s.fill((255,255,255,128))                         # notice the alpha value in the color
windowSurface.blit(s, (0,0))
</snippet></ROW><ROW><id>6350227</id><snippet>s</snippet></ROW><ROW><id>6350309</id><snippet>PROJECT_NAME      = "Python"
OUTPUT_DIRECTORY  = pyexample
GENERATE_LATEX    = NO
GENERATE_MAN      = NO
GENERATE_RTF      = NO
OPTIMIZE_OUTPUT_JAVA = YES
INPUT             = pyexample.py
QUIET             = YES
JAVADOC_AUTOBRIEF = YES
SEARCHENGINE      = NO
</snippet></ROW><ROW><id>6350351</id><snippet>environ</snippet></ROW><ROW><id>6350476</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Circle, PathPatch
from mpl_toolkits.mplot3d import Axes3D 
import mpl_toolkits.mplot3d.art3d as art3d


fig = plt.figure()
ax=fig.gca(projection='3d')

for i in ["x","y","z"]:
    circle = Circle((0, 0), 1)
    ax.add_patch(circle)
    art3d.pathpatch_2d_to_3d(circle, z=0, zdir=i)


ax.set_xlim3d(-2, 2)
ax.set_ylim3d(-2, 2)
ax.set_zlim3d(-2, 2)

plt.show()
</snippet></ROW><ROW><id>6350482</id><snippet>db.log</snippet></ROW><ROW><id>6350482</id><snippet>import logging

logging.basicConfig(filename='db.log')
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
</snippet></ROW><ROW><id>6350482</id><snippet>echo</snippet></ROW><ROW><id>6350482</id><snippet>False</snippet></ROW><ROW><id>6350482</id><snippet>&gt;&gt;&gt; Movie(title=u"Blade Runner", year=1982)
&gt;&gt;&gt; session.commit()
</snippet></ROW><ROW><id>6350482</id><snippet>INFO:sqlalchemy.engine.base.Engine:BEGIN (implicit)
INFO:sqlalchemy.engine.base.Engine:INSERT INTO models_movie (title, year, description) VALUES (%(title)s, %(year)s, %(description)s) RETURNING models_movie.id
INFO:sqlalchemy.engine.base.Engine:{'title': u'Blade Runner', 'description': None, 'year': 1982}
INFO:sqlalchemy.engine.base.Engine:COMMIT
</snippet></ROW><ROW><id>6350862</id><snippet>id</snippet></ROW><ROW><id>6350862</id><snippet>and       del       from      not       while
as        elif      global    or        with
assert    else      if        pass      yield
break     except    import    print
class     exec      in        raise
continue  finally   is        return
def       for       lambda    try
</snippet></ROW><ROW><id>6350862</id><snippet>if = 1
</snippet></ROW><ROW><id>6350862</id><snippet>id</snippet></ROW><ROW><id>6350862</id><snippet>type</snippet></ROW><ROW><id>6350862</id><snippet>str</snippet></ROW><ROW><id>6350862</id><snippet>str = "hello"    # don't do this
</snippet></ROW><ROW><id>6350961</id><snippet>set fh [open ex.txt]
set contents [read $fh];#ok for small-to-medium files.
close $fh

#first pass
set occupied {}
set lines [split $contents \n];#split contents at line breaks.
foreach line $lines {
  set chrs [split $line {}];#split each line into chars.
  set pos 0
  foreach chr $chrs {
    if {$chr ne " "} {
      lappend occupied $pos
    }
    incr pos
  }
}

#drop out with long list of occupied "positions": sort to create
#our sieve.
set datacols [lsort -unique -integer $occupied]
puts "occupied: $datacols"

#identify column boundaries.
set colset {}
set start [lindex $datacols 0];#first occupied pos might be &gt; 0??
foreach index $datacols {
  if {$start &lt; $index} {
    set end $index;incr end -1
    lappend colset [list $start $end]
    puts "col break starts at $start, ends at $end";#some instro!
    set start $index
  }
  incr start
}

#Now convert input file to trivial case output file, replacing
#sieved space chars with tab characters.
set tesloc [lreverse $colset];#reverse the column list!
set fh [open ex_.txt w]
foreach line $lines {
  foreach ele $tesloc {
    set line [string replace $line [lindex $ele 0] [lindex $ele 1] "\t" ]
  }
  puts "newline is $line"
  puts $fh $line
}
close $fh
</snippet></ROW><ROW><id>6350996</id><snippet>re.search('(.+) \\1', 'the the' )
</snippet></ROW><ROW><id>6350996</id><snippet>re.search(r'(.+) \1', 'the the' )
</snippet></ROW><ROW><id>6351109</id><snippet>with</snippet></ROW><ROW><id>6351109</id><snippet>for i in range(10):
    with open('data%i.txt' %i, 'w') as f:
        f.write('whatever')
</snippet></ROW><ROW><id>6351109</id><snippet>with</snippet></ROW><ROW><id>6351189</id><snippet>__init__</snippet></ROW><ROW><id>6351189</id><snippet>pass</snippet></ROW><ROW><id>6351189</id><snippet>__init__</snippet></ROW><ROW><id>6351293</id><snippet>import unittest

data = [ 
    (2, True), 
    (3, False), 
    (4, True),
    (5, False)]

# this should be imported from a separate module.
def isEven(number):
    return True # quite buggy implementation

def create_test_func(num, expected):
    def _test_func(self):
        self.assertEqual(expected, isEven(num))
    return _test_func

class TestIsEven(unittest.TestCase):

    pass

# pyunit isn't pythonic enought use py.test instead
# till then we rely on such hackery
import new
for i, (num, expected) in enumerate(data):
    setattr(TestIsEven, 'test_data_%d'%i, create_test_func(num, expected))

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>6351293</id><snippet>.F.F
======================================================================
FAIL: test_data_1 (__main__.TestIsEven)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "untitled-1.py", line 15, in _test_func
    self.assertEqual(expected, isEven(num))
AssertionError: False != True

======================================================================
FAIL: test_data_3 (__main__.TestIsEven)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "untitled-1.py", line 15, in _test_func
    self.assertEqual(expected, isEven(num))
AssertionError: False != True

----------------------------------------------------------------------
Ran 4 tests in 0.000s

FAILED (failures=2)
</snippet></ROW><ROW><id>6351394</id><snippet>input()</snippet></ROW><ROW><id>6351394</id><snippet>sys.stdin</snippet></ROW><ROW><id>6351394</id><snippet>raw_input()</snippet></ROW><ROW><id>6351394</id><snippet>input()</snippet></ROW><ROW><id>6351394</id><snippet>input()</snippet></ROW><ROW><id>6351394</id><snippet>raw_input()</snippet></ROW><ROW><id>6351394</id><snippet>input()</snippet></ROW><ROW><id>6351394</id><snippet>python</snippet></ROW><ROW><id>6351394</id><snippet>python3</snippet></ROW><ROW><id>6351394</id><snippet>python3.1</snippet></ROW><ROW><id>6351398</id><snippet>gcc -I /usr/local/cuda/include [code files, more options, etc]
</snippet></ROW><ROW><id>6351398</id><snippet># ln -s /usr/local/cuda/include/CL CL
</snippet></ROW><ROW><id>6351398</id><snippet>/usr/bin/ld: cannot find -lOpenCL
</snippet></ROW><ROW><id>6351536</id><snippet>super()</snippet></ROW><ROW><id>6351536</id><snippet>A.Go</snippet></ROW><ROW><id>6351536</id><snippet>super(B, self).Go()</snippet></ROW><ROW><id>6351536</id><snippet>B</snippet></ROW><ROW><id>6351536</id><snippet>A</snippet></ROW><ROW><id>6351573</id><snippet>1 if x &lt; 5 else 0
</snippet></ROW><ROW><id>6351573</id><snippet>x &lt; 5 and 1 or 0
</snippet></ROW><ROW><id>6351650</id><snippet>mydictionary={ 'ColumnName1':[dataRow1Col1, dataRow2Col1, dataRow3Col1], 
               'ColumnName2':[dataRow1Col2, dataRow2Col2, dataRow3Col2], 
               'ColumnName3':[dataRow1Col3, dataRow2Col3, dataRow3Col3] }
</snippet></ROW><ROW><id>6351650</id><snippet>import csv
Col1 = "ColumnName1"
Col2 = "ColumnName2"
Col3 = "ColumnName3"
mydictionary={Col1:[], Col2:[], Col3:[]}
csvFile = csv.reader(open("myfile.csv", "rb"))
for row in csvFile:
  mydictionary[Col1].append(row[0])
  mydictionary[Col2].append(row[1])
  mydictionary[Col3].append(row[2])
</snippet></ROW><ROW><id>6351839</id><snippet>add</snippet></ROW><ROW><id>6351839</id><snippet>object.rating.get_percent|floatformat</snippet></ROW><ROW><id>6351839</id><snippet>50 + -100
</snippet></ROW><ROW><id>6351839</id><snippet>{% widthratio %}</snippet></ROW><ROW><id>6351839</id><snippet>{% widthratio -100|add:object.rating.get_percent -100 100 %}
</snippet></ROW><ROW><id>6352047</id><snippet>put('file.tar.gz', '~/file.tar.gz')
</snippet></ROW><ROW><id>6352158</id><snippet>eval()</snippet></ROW><ROW><id>6352386</id><snippet>import itertools
def derangement(x):
    p = itertools.permutations(x)
    return (i for i in p if not any(i[k] == x[k] for k in range(len(x))))
</snippet></ROW><ROW><id>6352386</id><snippet>list()</snippet></ROW><ROW><id>6352456</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; L = [0, 0, 0, 3, 3, 2, 5, 2, 6, 6]
&gt;&gt;&gt; grouped_L = [(k, sum(1 for i in g)) for k,g in groupby(L)]
&gt;&gt;&gt; # Or (k, len(list(g))), but that creates an intermediate list
&gt;&gt;&gt; grouped_L
[(0, 3), (3, 2), (2, 1), (5, 1), (2, 1), (6, 2)]
</snippet></ROW><ROW><id>6352456</id><snippet>sum</snippet></ROW><ROW><id>6352465</id><snippet>return ' '.join((new[0].upper() + new[1:]) if (ix == 0 or new not in small_words)
  else new for (ix, new) in enumerate(title.lower().split()))
</snippet></ROW><ROW><id>6352515</id><snippet>__repr__</snippet></ROW><ROW><id>6352515</id><snippet>pickle</snippet></ROW><ROW><id>6352515</id><snippet>import pickle
bob = InfoObj(Name="Bob")

&gt; pickle.dumps(bob)
b'...some bytestring representation of Bob...'

&gt; pickle.loads(pickle.dumps(bob))
Bob(...)
</snippet></ROW><ROW><id>6352515</id><snippet>cPickle</snippet></ROW><ROW><id>6352515</id><snippet>pickle</snippet></ROW><ROW><id>6352527</id><snippet>join</snippet></ROW><ROW><id>6352527</id><snippet>j = join(users, comments, onclause=users.c.id == commends.c.user_id)
</snippet></ROW><ROW><id>6352527</id><snippet>orm.relationship</snippet></ROW><ROW><id>6352527</id><snippet>primaryjoin</snippet></ROW><ROW><id>6352527</id><snippet>onclause</snippet></ROW><ROW><id>6352527</id><snippet>comments = Table('comments', metadata,
    Column('id', Integer, primary_key=True),
    Column('user_id', Integer, ForeighKey('users.id')),
    ...
)
</snippet></ROW><ROW><id>6352527</id><snippet>comments.user_id</snippet></ROW><ROW><id>6352527</id><snippet>users.id</snippet></ROW><ROW><id>6352629</id><snippet>"""%s, %s, '%s','%s','%s','%s',%s,'%s','%s','%s'"""
</snippet></ROW><ROW><id>6352629</id><snippet>u"""%s, %s, '%s','%s','%s','%s',%s,'%s','%s','%s'"""
</snippet></ROW><ROW><id>6352629</id><snippet>value.encode('utf8')
</snippet></ROW><ROW><id>6352711</id><snippet>#!/usr/bin/env python

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from functools import wraps
import signal
import sys

signal.signal(signal.SIGINT, signal.SIG_DFL)

class SetAdder:
    def __init__(self):
        self.clear()

    def clear(self):
        self.value = set()

    def aggregate(self, other):
        send = not self.value
        self.sent = True
        self.value.add(other)
        return send


# This class decorator adds nameSlot, nameAuxSignal, nameAuxSlot, and
# name_manager.  Signals should be connected to nameSlot.  They will cause
# the function 'name' to be called with aggregated values.
def aggregated_slot_class_decorator(list_):
    def class_decorator(cls):
        for manager_type, name, *args in list_:
            signal_name = name + "AuxSignal"
            slot_a_name = name + "Slot"
            slot_b_name = name + "AuxSlot"
            manager_name = name + "_manager"

            def slot_a(self, *args_):
                manager = getattr(self, manager_name)
                if manager.aggregate(*args_):
                    print("Sending")
                    getattr(self, signal_name).emit()

            def slot_b(self):
                manager = getattr(self, manager_name)
                getattr(self, name)(manager.value)
                manager.clear()

            setattr(cls, slot_a_name,
                    pyqtSlot(cls, *args, name=slot_a_name)(slot_a))
            setattr(cls, slot_b_name,
                    pyqtSlot(cls, name=slot_b_name)(slot_b))

            orig_init = cls.__init__
            def new_init(self, *args_, **kwargs):
                orig_init(self, *args_, **kwargs)
                getattr(self, signal_name).connect(getattr(self, slot_b_name),
                                                   Qt.QueuedConnection)
                setattr(self, manager_name, manager_type())
            cls.__init__ = new_init
            #setattr(cls, signal_name, pyqtSignal())
        return cls
    return class_decorator


@aggregated_slot_class_decorator([(SetAdder, 'test', int)])
class A(QObject):
    def __init__(self):
        super().__init__()

    testAuxSignal = pyqtSignal()

    def test(self, value):
        print("Received", value)


class B(QObject):
    signal = pyqtSignal(int)


a = A()
b = B()

b.signal.connect(a.testSlot)

for i in range(10):
    b.signal.emit(i % 5)

app = QApplication(sys.argv)
sys.exit(app.exec_())
</snippet></ROW><ROW><id>6352711</id><snippet>Sending
Received {0, 1, 2, 3, 4}
</snippet></ROW><ROW><id>6352936</id><snippet>PyQt</snippet></ROW><ROW><id>6352936</id><snippet>QtSql</snippet></ROW><ROW><id>6352936</id><snippet>PyQt</snippet></ROW><ROW><id>6353051</id><snippet>matplotlib.pyplot.xticks</snippet></ROW><ROW><id>6353051</id><snippet>ax.set_xticks</snippet></ROW><ROW><id>6353051</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import FormatStrFormatter

data = np.random.randn(82)
fig, ax = plt.subplots()
counts, bins, patches = ax.hist(data, facecolor='yellow', edgecolor='gray')

# Set the ticks to be at the edges of the bins.
ax.set_xticks(bins)
# Set the xaxis's tick labels to be formatted with 1 decimal place...
ax.xaxis.set_major_formatter(FormatStrFormatter('%0.1f'))

# Change the colors of bars at the edges...
twentyfifth, seventyfifth = np.percentile(data, [25, 75])
for patch, rightside, leftside in zip(patches, bins[1:], bins[:-1]):
    if rightside &lt; twentyfifth:
        patch.set_facecolor('green')
    elif leftside &gt; seventyfifth:
        patch.set_facecolor('red')

# Label the raw counts and the percentages below the x-axis...
bin_centers = 0.5 * np.diff(bins) + bins[:-1]
for count, x in zip(counts, bin_centers):
    # Label the raw counts
    ax.annotate(str(count), xy=(x, 0), xycoords=('data', 'axes fraction'),
        xytext=(0, -18), textcoords='offset points', va='top', ha='center')

    # Label the percentages
    percent = '%0.0f%%' % (100 * float(count) / counts.sum())
    ax.annotate(percent, xy=(x, 0), xycoords=('data', 'axes fraction'),
        xytext=(0, -32), textcoords='offset points', va='top', ha='center')


# Give ourselves some more room at the bottom of the plot
plt.subplots_adjust(bottom=0.15)
plt.show()
</snippet></ROW><ROW><id>6353069</id><snippet>cnt = Counter()
for words in wordList:
      for letters in set(words):
          cnt[letters]+=1
</snippet></ROW><ROW><id>6353196</id><snippet>filter</snippet></ROW><ROW><id>6353196</id><snippet>filter</snippet></ROW><ROW><id>6353196</id><snippet>True</snippet></ROW><ROW><id>6353196</id><snippet>'2341'</snippet></ROW><ROW><id>6353196</id><snippet>'2341'</snippet></ROW><ROW><id>6353196</id><snippet>'2'</snippet></ROW><ROW><id>6353196</id><snippet>3'</snippet></ROW><ROW><id>6353196</id><snippet>'4'</snippet></ROW><ROW><id>6353196</id><snippet>'1'</snippet></ROW><ROW><id>6353196</id><snippet>&gt;&gt;&gt; tup = tuple(dict['Alice'])
&gt;&gt;&gt; tup
('7', '8', '9', '8')
&gt;&gt;&gt; filter(lambda x: x, tup)
('7', '8', '9', '8')
&gt;&gt;&gt; tup
('7', '8', '9', '8')
&gt;&gt;&gt; filter(lambda x: x, tup)
('7', '8', '9', '8')
&gt;&gt;&gt; filter(lambda x: x=="2341", tup)
()
</snippet></ROW><ROW><id>6353777</id><snippet>AuthorizedUser</snippet></ROW><ROW><id>6353777</id><snippet>auth.py</snippet></ROW><ROW><id>6353777</id><snippet>AuthorizedUser</snippet></ROW><ROW><id>6354463</id><snippet>.encode('ascii', 'ignore')</snippet></ROW><ROW><id>6354463</id><snippet>&gt;&gt;&gt; u'abc\x0c¢â'.encode('ascii', errors='ignore')
'abc\x0c'
</snippet></ROW><ROW><id>6354463</id><snippet>&gt;&gt;&gt; str(''.join([c for c in u'abc\x0c¢â' if 32 &lt;= ord(c) &lt; 128]))
'abc'
</snippet></ROW><ROW><id>6354485</id><snippet>z = dict(d2.items() + d1.items())
</snippet></ROW><ROW><id>6354485</id><snippet>update</snippet></ROW><ROW><id>6354485</id><snippet>def mergeDictsOverwriteEmpty(d1, d2):
    res = d2.copy()
    for k,v in d2.items():
        if k not in d1 or d1[k] == '':
            res[k] = v
    return res
</snippet></ROW><ROW><id>6354610</id><snippet>{% block extrahead %}

&lt;script type="text/javascript" src="{{ ADMIN_MEDIA_PREFIX }}jquery.min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript"&gt;
  django.jQuery(function($) {
    // set your handlers, etc.
  });
&lt;/script&gt;
{% endblock %}
</snippet></ROW><ROW><id>6354917</id><snippet>Cerales</snippet></ROW><ROW><id>6354917</id><snippet>add_school()</snippet></ROW><ROW><id>6354917</id><snippet>action_map = {'Add School': add_school, ...}</snippet></ROW><ROW><id>6354917</id><snippet>from django.views.generic.base import View
class MySchoolView(View):
    def post(self, request, *kargs, **kwargs):
        if 'Add School' in request.POST:
            return self.add_school(request, *kargs, **kwargs)
        # (...)
    def add_school(self, request, *kargs, **kwargs):
        # (...)
</snippet></ROW><ROW><id>6354917</id><snippet>(r'^schools/add/$', MySchoolView.as_view())
</snippet></ROW><ROW><id>6354917</id><snippet>View</snippet></ROW><ROW><id>6355367</id><snippet>Session</snippet></ROW><ROW><id>6355367</id><snippet>class Host(...):
    ...
    @property
    def Network(self):
        Session.object_session(self).query(Network).find(*my_search_criteria*)
</snippet></ROW><ROW><id>6355367</id><snippet>Network</snippet></ROW><ROW><id>6355367</id><snippet>from sqlalchemy.orm.interfaces import SessionExtension
class TestSessionExtension(SessionExtension):
    def before_flush(self, session, flush_context, instances):
        for obj in session.new:
            if isinstance(obj, Host):
                # if the Host has no Network object assigned, then...
                # ... search-or-create the Network object using 'session'
                # ... assign this network object to the Host
Session = sessionmaker(bind=engine, extension=TestSessionExtension())
</snippet></ROW><ROW><id>6355411</id><snippet>super</snippet></ROW><ROW><id>6355411</id><snippet>A.__init__</snippet></ROW><ROW><id>6355411</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...             self.value = 1
...     def get_value(self):
...             return self.value
... 
&gt;&gt;&gt; class B(A):
...     def __init__(self):
...             super(B, self).__init__()
...             self.value = 2
... 
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.get_value()
2
</snippet></ROW><ROW><id>6355411</id><snippet>__</snippet></ROW><ROW><id>6355411</id><snippet>A.get_value()</snippet></ROW><ROW><id>6355411</id><snippet>_A__value</snippet></ROW><ROW><id>6355411</id><snippet>self.__value</snippet></ROW><ROW><id>6355411</id><snippet>B</snippet></ROW><ROW><id>6355411</id><snippet>_B__value</snippet></ROW><ROW><id>6355411</id><snippet>A.get_value()</snippet></ROW><ROW><id>6355411</id><snippet>&gt;&gt;&gt; class A(object):
...     def get_value(self):
...             return self._B__value
... 
&gt;&gt;&gt; class B(A):
...     def __init__(self):
...             self.__value = 2
... 
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.get_value()
2
</snippet></ROW><ROW><id>6355986</id><snippet>In [1]: plot([1,2,3,4])
Out[1]: [&lt;matplotlib.lines.Line2D object at 0x020F75B0&gt;]
</snippet></ROW><ROW><id>6355986</id><snippet>In [4]: from matplotlib import interactive

In [5]: interactive(True)

In [6]: from matplotlib import pyplot as plt

In [7]: plt.plot([1,2,3,4])
Out[7]: [&lt;matplotlib.lines.Line2D object at 0x00F89D50&gt;]
</snippet></ROW><ROW><id>6356099</id><snippet>c = [item for pair in zip(a, b) for item in pair]
</snippet></ROW><ROW><id>6356406</id><snippet>a</snippet></ROW><ROW><id>6356406</id><snippet>[a] * 4</snippet></ROW><ROW><id>6356406</id><snippet>a</snippet></ROW><ROW><id>6356406</id><snippet>a</snippet></ROW><ROW><id>6356406</id><snippet>0</snippet></ROW><ROW><id>6356406</id><snippet>[0] * 4</snippet></ROW><ROW><id>6356406</id><snippet>M = [[0] * 4 for i in range(4)]
</snippet></ROW><ROW><id>6356765</id><snippet>proc.stdin.flush()
</snippet></ROW><ROW><id>6356765</id><snippet>proc.stdin.write()</snippet></ROW><ROW><id>6356992</id><snippet>self</snippet></ROW><ROW><id>6356992</id><snippet>import functools

def counted(method):
    @functools.wraps(method)
    def wrapped(obj, *args, **kwargs):
        if hasattr(obj, 'count'): 
            obj.count += 1
        else:
            obj.count = 1
        return method(obj, *args, **kwargs)
    return wrapped
</snippet></ROW><ROW><id>6356992</id><snippet>obj</snippet></ROW><ROW><id>6356992</id><snippet>class Foo(object):
    @counted
    def do_something(self): pass
</snippet></ROW><ROW><id>6357418</id><snippet>2to3</snippet></ROW><ROW><id>6357418</id><snippet>execfile(filename, globals, locals)
</snippet></ROW><ROW><id>6357418</id><snippet>exec(compile(open(filename, "rb").read(), filename, 'exec'), globals, locals)
</snippet></ROW><ROW><id>6357878</id><snippet>from multiprocessing import Process

def f(name):
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
</snippet></ROW><ROW><id>6357934</id><snippet>flush()</snippet></ROW><ROW><id>6357934</id><snippet>sub.stdin</snippet></ROW><ROW><id>6357986</id><snippet>users.User(email='test@sample.com')
</snippet></ROW><ROW><id>6357986</id><snippet>users.get_current_user()</snippet></ROW><ROW><id>6357986</id><snippet>proj = Project()
proj.created_by  = users.get_current_user()
proj.put()
user = users.get_current_user()
Project().all().filter('created_by',user).get()
</snippet></ROW><ROW><id>6358602</id><snippet>1</snippet></ROW><ROW><id>6358602</id><snippet>"one"</snippet></ROW><ROW><id>6358602</id><snippet>"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</snippet></ROW><ROW><id>6358602</id><snippet>&lt;function f1 at 0xb779187c&gt;
f1 3.64
&lt;function f2 at 0xb7791bfc&gt;
f2 3.48
&lt;function f3 at 0xb7791bc4&gt;
f3 3.65
</snippet></ROW><ROW><id>6358679</id><snippet>hdiutil attach -mountpoint &lt;path-to-desired-mountpoint&gt; &lt;filename.dmg&gt;
</snippet></ROW><ROW><id>6358679</id><snippet>-mountpoint</snippet></ROW><ROW><id>6358679</id><snippet>.app</snippet></ROW><ROW><id>6358679</id><snippet>/Applications</snippet></ROW><ROW><id>6358679</id><snippet>hdiutil detach &lt;path-to-mountpoint&gt;
</snippet></ROW><ROW><id>6359312</id><snippet>dict</snippet></ROW><ROW><id>6359312</id><snippet>class HDict(dict):
    def __hash__(self):
        return hash(frozenset(self.items()))

substs = HDict({'foo': 'bar', 'baz': 'quz'})
cache = {substs: True}
</snippet></ROW><ROW><id>6359930</id><snippet>{   a[$1] = a[$1] ";" $2 }
END { for (item in a ) print item, a[item] }
</snippet></ROW><ROW><id>6359930</id><snippet>awk -f awkf.awk ifile.txt | sed 's/ ;/ /'
</snippet></ROW><ROW><id>6360319</id><snippet>[[1 2 3] [1 2 3]]</snippet></ROW><ROW><id>6360319</id><snippet>[&lt;reference to b&gt; &lt;reference to b&gt;]</snippet></ROW><ROW><id>6360319</id><snippet>b</snippet></ROW><ROW><id>6360319</id><snippet>a</snippet></ROW><ROW><id>6360319</id><snippet>[:]</snippet></ROW><ROW><id>6360319</id><snippet>&gt;&gt;&gt; a=[]
&gt;&gt;&gt; b=[1]
&gt;&gt;&gt; a.append(b[:])
&gt;&gt;&gt; a.append(b[:])
&gt;&gt;&gt; a[0].append(2)
&gt;&gt;&gt; a[1].append(3)
&gt;&gt;&gt; print a
[[1, 2], [1, 3]]
</snippet></ROW><ROW><id>6360379</id><snippet>3/4</snippet></ROW><ROW><id>6360379</id><snippet>0</snippet></ROW><ROW><id>6360379</id><snippet>3/4.0</snippet></ROW><ROW><id>6360379</id><snippet>.0</snippet></ROW><ROW><id>6360379</id><snippet>carpool_capacity = cars_driven * space_in_a_car
</snippet></ROW><ROW><id>6360379</id><snippet>120.0</snippet></ROW><ROW><id>6360379</id><snippet>120</snippet></ROW><ROW><id>6360379</id><snippet>average_passengers_per_car = passengers / float(cars_driven)  #added float
</snippet></ROW><ROW><id>6360379</id><snippet>passengers = 93</snippet></ROW><ROW><id>6360379</id><snippet>3</snippet></ROW><ROW><id>6360379</id><snippet>3.1</snippet></ROW><ROW><id>6360379</id><snippet>3/4 # returns 0
</snippet></ROW><ROW><id>6360379</id><snippet>int/int == int</snippet></ROW><ROW><id>6360379</id><snippet>3/4. # returns 0.75
</snippet></ROW><ROW><id>6360379</id><snippet>3/float(4)
</snippet></ROW><ROW><id>6360379</id><snippet>cars = 100
space_in_a_car = 4 #not float
drivers = 30
passengers = 90
cars_not_driven = cars - drivers
cars_driven = drivers
carpool_capacity = cars_driven * space_in_a_car
average_passengers_per_car = passengers / float(cars_driven)  #added float
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; br = mechanize.Browser()
&gt;&gt;&gt; br.open('http://www.w3schools.com/html/html_forms.asp')
</snippet></ROW><ROW><id>6360556</id><snippet>name</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; [f.name for f in br.forms()]
['searchform', None, None, None, None, 'input0']
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; forms = [f for f in br.forms()]
&gt;&gt;&gt; forms[1].controls[0].name
'firstname'
&gt;&gt;&gt; [c.name for c in forms[3].controls]
['sex']
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; forms[3].controls[0].get_items()
[&lt;Item name='male' id=None type='radio' name='sex' value='male'&gt;, &lt;Item name='female' id=None type='radio' name='sex' value='female'&gt;]
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; forms[3]['sex'] = ['male']
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; forms[3]['sex'] = 'male'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Python/2.6/site-packages/mechanize/_form.py", line 2782, in __setitem__
    control.value = value
  File "/Library/Python/2.6/site-packages/mechanize/_form.py", line 1977, in __setattr__
    self._set_value(value)
  File "/Library/Python/2.6/site-packages/mechanize/_form.py", line 1985, in _set_value
    raise TypeError("ListControl, must set a sequence")
TypeError: ListControl, must set a sequence
</snippet></ROW><ROW><id>6360556</id><snippet>&gt;&gt;&gt; [(c.name, c.get_items()) for c in forms[4].controls]
[('vehicle', [&lt;Item name='Bike' id=None type='checkbox' name='vehicle' value='Bike'&gt;, &lt;Item name='Car' id=None type='checkbox' name='vehicle' value='Car'&gt;])]
&gt;&gt;&gt; forms[4]['vehicle'] = ['Bike', 'Car']
</snippet></ROW><ROW><id>6360957</id><snippet>countSixes</snippet></ROW><ROW><id>6360957</id><snippet>counter</snippet></ROW><ROW><id>6360957</id><snippet>i</snippet></ROW><ROW><id>6360957</id><snippet>i</snippet></ROW><ROW><id>6360957</id><snippet>countSixes</snippet></ROW><ROW><id>6360957</id><snippet>import random

def countSixes(start):
    newNum = random.randrange(0,10)
    if newNum == 6:
        return start + 1
    else:
        return start

if __name__ == '__main__':
    import multiprocessing
    pool = multiprocessing.Pool(1) #use one core for now

    start = 0
    async_results = [pool.apply_async(countSixes, (start,)) for i in range(1000)]

    print(sum(r.get() for r in async_results))
</snippet></ROW><ROW><id>6361031</id><snippet>element.text
</snippet></ROW><ROW><id>6361125</id><snippet>grid</snippet></ROW><ROW><id>6361125</id><snippet>rowconfigure</snippet></ROW><ROW><id>6361125</id><snippet>columnconfigure</snippet></ROW><ROW><id>6361125</id><snippet>import Tkinter as tk

class App(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        self.forms = []
        self.toolbar = tk.Frame(self)
        self.toolbar.pack(side="top", fill="x", expand=False)
        button2 = tk.Button(self.toolbar, text="2 columns", command=self.layout2col)
        button3 = tk.Button(self.toolbar, text="3 columns", command=self.layout3col)
        button2.pack(side="left")
        button3.pack(side="left")
        self.forms_frame = tk.Frame(self, borderwidth=2, relief="groove")
        self.forms_frame.pack(side="top", fill="both", expand="True", padx=2, pady=2)
        for i in range(6):
            frame = tk.LabelFrame(self.forms_frame, text="Form %s" % i)
            self.forms.append(frame)
            label = tk.Label(frame, text="Field %s" % i)
            entry = tk.Entry(frame, width=20)
            label.pack(side="left", fill="y")
            entry.pack(side="left", fill="both", expand=True)

        self.layout2col()

    def layout3col(self):
        self.forms[0].grid(column=0, row=0, padx=4, pady=2, sticky="ew")
        self.forms[1].grid(column=0, row=1, padx=4, pady=2, sticky="ew")
        self.forms[2].grid(column=1, row=0, padx=4, pady=2, sticky="ew")
        self.forms[3].grid(column=1, row=1, padx=4, pady=2, sticky="ew")
        self.forms[4].grid(column=2, row=0, padx=4, pady=2, sticky="ew")
        self.forms[5].grid(column=2, row=1, padx=4, pady=2, sticky="ew")
        self.forms_frame.grid_columnconfigure(0, weight=1)
        self.forms_frame.grid_columnconfigure(1, weight=1)
        self.forms_frame.grid_columnconfigure(2, weight=1)

    def layout2col(self):
        self.forms[0].grid(column=0, row=0, padx=4, pady=2, sticky="ew")
        self.forms[1].grid(column=0, row=1, padx=4, pady=2, sticky="ew")
        self.forms[2].grid(column=0, row=2, padx=4, pady=2, sticky="ew")
        self.forms[3].grid(column=1, row=0, padx=4, pady=2, sticky="ew")
        self.forms[4].grid(column=1, row=1, padx=4, pady=2, sticky="ew")
        self.forms[5].grid(column=1, row=2, padx=4, pady=2, sticky="ew")
        self.forms_frame.grid_columnconfigure(0, weight=1)
        self.forms_frame.grid_columnconfigure(1, weight=1)
        self.forms_frame.grid_columnconfigure(2, weight=0)

if __name__ == "__main__":
    app = App()
    app.mainloop()
</snippet></ROW><ROW><id>6361136</id><snippet>$user = new AdWordsUser();

// Get the CampaignService.
$campaignService = $user-&gt;GetCampaignService('v201101');

// Create selector.
$selector = new Selector();
// Fields to retrieve
$selector-&gt;fields = array('Id', 'Name', 'Cost');
// Date rage for stats
$selector-&gt;dateRange-&gt;min = "20110613";
$selector-&gt;dateRange-&gt;max = "20110614";

// Get all campaigns.
$page = $campaignService-&gt;get($selector);

if(isset($page-&gt;entries)){
    foreach ($page-&gt;entries as $campaign) {
        if(isset($campaign-&gt;campaignStats)) {
            // This is how you get the cost
            $cost = $campaign-&gt;campaignStats-&gt;cost-&gt;microAmount/1000000;
            print "Cost for Campaign {$campaign-&gt;name} = $cost\n";
        }
    }
}
</snippet></ROW><ROW><id>6361136</id><snippet>get_all_campaigns.py</snippet></ROW><ROW><id>6361186</id><snippet>assert</snippet></ROW><ROW><id>6361186</id><snippet>-O</snippet></ROW><ROW><id>6361186</id><snippet>PYTHONOPTIMIZE</snippet></ROW><ROW><id>6361186</id><snippet>assert</snippet></ROW><ROW><id>6361186</id><snippet>-O</snippet></ROW><ROW><id>6361186</id><snippet>nose</snippet></ROW><ROW><id>6361186</id><snippet>py.test</snippet></ROW><ROW><id>6361374</id><snippet>print("hi")</snippet></ROW><ROW><id>6361374</id><snippet>from __future__</snippet></ROW><ROW><id>6361374</id><snippet>import sys
sys.stdout.write("hi")
</snippet></ROW><ROW><id>6361853</id><snippet>#!/usr/bin/env python

# imports go here

__author__ = 'Michael O. Duffy'
__status__ = "Development"

def factorial(n):
    """ Calculate a factorial of an integer """
    factorial = 1
    if n &lt; 0:
        print 'Invalid number'
    else:
        for k in range(1,n+1):
            factorial *= k
    return factorial

if __name__ == '__main__':

    for number in range(1, 20):
        print 'n: ', number, 'n!: ', factorial(number)
</snippet></ROW><ROW><id>6361853</id><snippet>gamma</snippet></ROW><ROW><id>6361853</id><snippet>lngamma</snippet></ROW><ROW><id>6361864</id><snippet>rect</snippet></ROW><ROW><id>6361864</id><snippet>pygame.mouse.get_pos()</snippet></ROW><ROW><id>6361864</id><snippet>rect</snippet></ROW><ROW><id>6361864</id><snippet>pygame.sprite.collide_rect()</snippet></ROW><ROW><id>6361864</id><snippet>rect</snippet></ROW><ROW><id>6362649</id><snippet>series = chart.SeriesCollection().NewSeries()
</snippet></ROW><ROW><id>6362649</id><snippet>series = chart.SeriesCollection(1)
</snippet></ROW><ROW><id>6362649</id><snippet>import win32com.client
xlApp = win32com.client.Dispatch('Excel.Application')

xlBook = xlApp.Workbooks.Add()

xlSheet = xlBook.Sheets(1)
xlSheet.Name = "Algoritmos de Busqueda"
xlSheet.Cells(1,1).Value="Secuencial"
xlSheet.Cells(2,1).Value="Binaria"
xlSheet.Cells(1,2).Value="32"
xlSheet.Cells(2,2).Value="32"

chart = xlApp.Charts.Add()
chart.Name= "Grafico "+xlSheet.Name
series = chart.SeriesCollection(1)
series.XValues= xlSheet.Range("A1:A2")
series.Values= xlSheet.Range("B1:B2")
series.Name= "Algoritmos"
chart.Axes()[0].HasMajorGridlines = True
</snippet></ROW><ROW><id>6362832</id><snippet>&gt;&gt;&gt; 'abc'.decode('UTF-16', 'replace')
u'\u6261\ufffd'
</snippet></ROW><ROW><id>6362832</id><snippet>&gt;&gt;&gt; 'abc'.decode('UTF-16', 'ignore')
u'\u6261'
</snippet></ROW><ROW><id>6362870</id><snippet># Will return a list of dictionary objects for all rows with that foreign key
# Ex: [{'business' : '3', 'monday_open' : someTime, 'monday_close' : someTime...},...]
storeHours = BuisnessHours.objects.values().filter(business = *foreign key*)

# You can also get your even like this
# Ex: [{'business' : '3', 'start' : someTime, 'end' : someTime}, {'business' : '3'...]
storeEvent = Event.objects.values().filter(business = *same foreign key as above*)
</snippet></ROW><ROW><id>6363020</id><snippet>WS</snippet></ROW><ROW><id>6363020</id><snippet>HIDDEN</snippet></ROW><ROW><id>6363020</id><snippet>WS</snippet></ROW><ROW><id>6363020</id><snippet>body</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>expr
  :  term term operator
  ;

term
  :  INT
  |  ID
  |  expr
  ;
</snippet></ROW><ROW><id>6363020</id><snippet>term</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>WS</snippet></ROW><ROW><id>6363020</id><snippet>body</snippet></ROW><ROW><id>6363020</id><snippet>INT</snippet></ROW><ROW><id>6363020</id><snippet>body</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>nested</snippet></ROW><ROW><id>6363020</id><snippet>INT</snippet></ROW><ROW><id>6363020</id><snippet>*</snippet></ROW><ROW><id>6363020</id><snippet>body
    :   nested
    |   var
    |   get
    ;

// ...

expr
    :   term (term operator)
    ;

nested
    :   expr (expr operator)
    ;
</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>expr</snippet></ROW><ROW><id>6363020</id><snippet>expr
  :  term (expr operator | term operator)*
  ;
</snippet></ROW><ROW><id>6363020</id><snippet>options { ... }</snippet></ROW><ROW><id>6363020</id><snippet>options {
  language=Python;
  output=AST;
  backtrack=true;
}
</snippet></ROW><ROW><id>6363020</id><snippet>grammar star;

options {
  language=Python;
  output=AST;
  backtrack=true;
}

parse
  :  expr EOF -&gt; expr
  ;

expr
  :  (term -&gt; term) ( expr2 operator -&gt; ^(operator $expr expr2) 
                    | term operator  -&gt; ^(operator term term)
                    )*
  ;

expr2 
  :  expr
  ;

term
  :  INT
  |  ID
  ;

operator 
  :  ('*' | '+' | '/' | '%' | '-')
  ;

ID
  :  ('a'..'z' | 'A'..'Z') ('a..z' | '0'..'9' | 'A'..'Z')*
  ;

INT
  :  '0'..'9'+
  ;

WS
  :  (' ' | '\n' | '\t' | '\r') {$channel=HIDDEN;}
  ;
</snippet></ROW><ROW><id>6363020</id><snippet>#!/usr/bin/env python
import antlr3
from antlr3 import *
from antlr3.tree import *
from starLexer import *
from starParser import *

def print_level_order(tree, indent):
  print '{0}{1}'.format('   '*indent, tree.text)
  for child in tree.getChildren():
    print_level_order(child, indent+1)

input = "5 1 2 + 4 * + 3 -"
char_stream = antlr3.ANTLRStringStream(input)
lexer = starLexer(char_stream)
tokens = antlr3.CommonTokenStream(lexer)
parser = starParser(tokens)
tree = parser.parse().tree 
print_level_order(tree, 0)
</snippet></ROW><ROW><id>6363082</id><snippet>0 */2 * * * /full/path/to/python /home/ec2-user/cronscripts/testscript.py
</snippet></ROW><ROW><id>6363497</id><snippet>import re

regx = re.compile('at\\b')

ch = 'the fat cat was impressed by all the rats gathering at one corner of the great room'

print ch
print
print regx.sub('ATU',ch)
</snippet></ROW><ROW><id>6363497</id><snippet>the fat cat was impressed by all the rats gathering at one corner of the great room

the fATU cATU was impressed by all the rats gathering ATU one corner of the greATU room
</snippet></ROW><ROW><id>6363497</id><snippet>import re

regx = re.compile('(at\\b)|([^ ]r(?! ))')

def repl(mat, dic = {1:'ATU',2:'XIXI'}):
    return dic[mat.lastindex]

ch = 'the fat cat was impressed by all the rats gathering at one corner of the great room'

print ch
print
print regx.sub(repl,ch)
</snippet></ROW><ROW><id>6363497</id><snippet>the fat cat was impressed by all the rats gathering at one corner of the great room

the fATU cATU was imXIXIessed by all the rats gathXIXIing ATU one cXIXIner of the XIXIeATU room
</snippet></ROW><ROW><id>6363541</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>6363541</id><snippet>Queue.Queue</snippet></ROW><ROW><id>6363541</id><snippet>Pool</snippet></ROW><ROW><id>6363541</id><snippet>mypool.map</snippet></ROW><ROW><id>6363572</id><snippet>                 Fast Fourier Transform
=================================================
      |    real input     |   complex input    
-------------------------------------------------
 size |  scipy  |  numpy  |  scipy  |  numpy 
-------------------------------------------------
  100 |    0.07 |    0.06 |    0.06 |    0.07  (secs for 7000 calls)
 1000 |    0.06 |    0.09 |    0.09 |    0.09  (secs for 2000 calls)
  256 |    0.11 |    0.11 |    0.12 |    0.11  (secs for 10000 calls)
  512 |    0.16 |    0.21 |    0.20 |    0.21  (secs for 10000 calls)
 1024 |    0.03 |    0.04 |    0.04 |    0.04  (secs for 1000 calls)
 2048 |    0.05 |    0.09 |    0.08 |    0.08  (secs for 1000 calls)
 4096 |    0.05 |    0.08 |    0.07 |    0.09  (secs for 500 calls)
 8192 |    0.10 |    0.20 |    0.19 |    0.21  (secs for 500 calls)
</snippet></ROW><ROW><id>6364335</id><snippet>A</snippet></ROW><ROW><id>6364335</id><snippet>B</snippet></ROW><ROW><id>6364335</id><snippet>B</snippet></ROW><ROW><id>6364335</id><snippet>A|B</snippet></ROW><ROW><id>6364477</id><snippet>manage.py runserver</snippet></ROW><ROW><id>6364477</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>6364477</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>6364477</id><snippet>django.views.static.serve</snippet></ROW><ROW><id>6364477</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>6364477</id><snippet>myapp/static</snippet></ROW><ROW><id>6364477</id><snippet>/path/to/project/proj_settings</snippet></ROW><ROW><id>6364477</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>6364477</id><snippet>settings.py</snippet></ROW><ROW><id>6364477</id><snippet>STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_DIR, 'proj_static'),
)
</snippet></ROW><ROW><id>6364477</id><snippet>css/main.css</snippet></ROW><ROW><id>6364477</id><snippet>/proj_static/css/main.css</snippet></ROW><ROW><id>6364477</id><snippet>/static/</snippet></ROW><ROW><id>6364477</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>6364477</id><snippet>manage.py collectstatic</snippet></ROW><ROW><id>6364511</id><snippet>float(x.split()[-1])
</snippet></ROW><ROW><id>6364511</id><snippet>str.split()</snippet></ROW><ROW><id>6364511</id><snippet>float()</snippet></ROW><ROW><id>6364511</id><snippet>&gt;&gt;&gt; '20  125.573E-03'.split()
['20', '125.573E-03']
&gt;&gt;&gt; float('20  125.573E-03'.split()[-1])
0.12557299999999999
</snippet></ROW><ROW><id>6364521</id><snippet>wd.start()</snippet></ROW><ROW><id>6364521</id><snippet>wd.run()</snippet></ROW><ROW><id>6364521</id><snippet>BackgroundTask</snippet></ROW><ROW><id>6364521</id><snippet>import cherrypy.process.plugins

def func():
   print "blah blah blah"
wd = cherrypy.process.plugins.BackgroundTask(15000,func)
wd.start()

raw_input()  # hit return when you're bored

wd.cancel()
</snippet></ROW><ROW><id>6364521</id><snippet>BackgroundTask</snippet></ROW><ROW><id>6364521</id><snippet>self.bus</snippet></ROW><ROW><id>6364521</id><snippet>bus</snippet></ROW><ROW><id>6364624</id><snippet>key</snippet></ROW><ROW><id>6364624</id><snippet>return</snippet></ROW><ROW><id>6364624</id><snippet>n = 'stop'</snippet></ROW><ROW><id>6364624</id><snippet>key</snippet></ROW><ROW><id>6364624</id><snippet>key</snippet></ROW><ROW><id>6364624</id><snippet>key</snippet></ROW><ROW><id>6364624</id><snippet>speed()</snippet></ROW><ROW><id>6364624</id><snippet>key</snippet></ROW><ROW><id>6364624</id><snippet>while</snippet></ROW><ROW><id>6364891</id><snippet>import re

text = "SID=DQAAALsAAABCeyCMlOaYMHkv55TUQFxA71fxE1LpgpmL1G_o8YennFwBhar2I_LNmJjGjvLHVQy8tSRfYdLnUIHhKyD0FTZBzXyG_s8U4Pt97n9hPz68ZFSM42Qv6Qxuk74TQygHJXhjLWXNuD5mMsh8_MAs-nmhSToNFIyWoP-uTZ_LN2yQS1o9MB43fzuIIxp-1euXGxMceVVrjyidrYeEB13HS5kMHH-HGjiZhoIJBmu5es7pLPj9Ie8NJZ1K3kFhdVEJa4sLSID=DQAAAL4AAACypRIVyVXcs5zYIeUEt9v-wEwPKgQ8Oe23_URsDeHCg-rR2qQK4dTxPV1J6BPTO-6Zly2H9t4sVhm0vHe8IT6sKLdX2IQ8PgGMtSHQNkpQ8zEan0CyFyUetbSW4af6mlk2pksDpvXNm5GtNTj5eTwkCQUmgGep42u5iuCGFy-o9a1cQWz45NO_J8zIYnBdOqlheNTqaMWpi4hpr-_u8Muzs4RjlEbkuYfDu7MrdsJAFwxf0BVW2cGBtB-K2jwaK7w*Auth=*873hdyjsbcvuei73hckwoxnaodbc8dnskc8HU1mKRqxh6yEU-9tqx148GqC7h90_190ZzxpEZOHAH5HTptliylRXvMPyqPyijMNu21bOA6ZhvZFuL8YNB3KF63YuV0n5TFJd1-rMI2LQIdPMVBnsxnEGrLIeFOugAFCZ_3OelAc4XjeKdDvIowxkNnvaooXT4kxtkQWzieA3JRKy3Y-Lbi7E0qiXC99GtHVDh5VWvdTs2LCv3wnRULtLp6ZCoToZ8qoUWMzU9PZldsKSnE"
m = re.search('Auth=(.+)',text).groups()[0]
print m
</snippet></ROW><ROW><id>6365015</id><snippet>tostring()</snippet></ROW><ROW><id>6365015</id><snippet>array.array</snippet></ROW><ROW><id>6365015</id><snippet>Python 1.5.2 (#0, Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)] on win32
Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam
&gt;&gt;&gt; import array
&gt;&gt;&gt; q = array.array('B', [120, 231, 49, 2, 125, 143, 213, 14, 214, 66, 52, 11, 124, 154, 99, 179])
&gt;&gt;&gt; q.tostring()
'x\3471\002}\217\325\016\326B4\013|\232c\263'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6365015</id><snippet>repr()</snippet></ROW><ROW><id>6365151</id><snippet>end_timeout = 1
for i in xrange(TIME_OUT):
    ...
</snippet></ROW><ROW><id>6365151</id><snippet>i == 0</snippet></ROW><ROW><id>6365151</id><snippet>xrange(n, TIME_OUT)</snippet></ROW><ROW><id>6365151</id><snippet>i == n</snippet></ROW><ROW><id>6365151</id><snippet>xrange</snippet></ROW><ROW><id>6365166</id><snippet>some_string[5] = 'a'</snippet></ROW><ROW><id>6365166</id><snippet>some_string = some_string[5:] + 'a' + some_string[6:]</snippet></ROW><ROW><id>6365166</id><snippet>[1,2,3] + [4,5,6]</snippet></ROW><ROW><id>6365166</id><snippet>log10(n) == 1000</snippet></ROW><ROW><id>6365166</id><snippet>&gt;&gt;&gt; times = [timeit.timeit(stmt=stmt.format(10 ** i, 10 ** i), number=100) for i in range(1000)]
&gt;&gt;&gt; sum(times) * 1.0 / len(times)
3.0851364135742186e-06
&gt;&gt;&gt; times[-1]
3.0994415283203125e-06
</snippet></ROW><ROW><id>6365166</id><snippet>&gt;&gt;&gt; stmt = 's[:5] + "a" + s[6:]'
&gt;&gt;&gt; setup = 's = "b" * {0}'
&gt;&gt;&gt; times = [timeit.timeit(stmt=stmt, setup=setup.format(i), number=10) for i in range(100000)]
&gt;&gt;&gt; sum(times) * 1.0 / len(times)
6.2434492111206052e-05
&gt;&gt;&gt; times[-1]
0.0001220703125
</snippet></ROW><ROW><id>6365166</id><snippet>&gt;&gt;&gt; for t in times[0:100000:10000]:
...     print t
... 
5.00679016113e-06
1.31130218506e-05
2.90870666504e-05
3.88622283936e-05
5.10215759277e-05
6.19888305664e-05
7.41481781006e-05
8.48770141602e-05
9.60826873779e-05
0.000108957290649
</snippet></ROW><ROW><id>6365166</id><snippet>&gt;&gt;&gt; stmt = 'x = s[{0}] + s[{1}] + s[{2}]'
&gt;&gt;&gt; setup = 's = "a" * {0}'
&gt;&gt;&gt; times = [timeit.timeit(stmt=stmt.format(i / 2, i / 3, i / 4), setup=setup.format(i + 1), number=10) for i in range(1000000)]
&gt;&gt;&gt; sum(times) * 1.0 / len(times)
3.6441037654876707e-06
&gt;&gt;&gt; times[-1]
3.0994415283203125e-06
</snippet></ROW><ROW><id>6365166</id><snippet>&gt;&gt;&gt; stmt = 'x = s[{0}] + s[{1}] + s[{2}]'
&gt;&gt;&gt; setup = 's = ["a"] * {0}'
&gt;&gt;&gt; times = [timeit.timeit(stmt=stmt.format(i / 2, i / 3, i / 4), setup=setup.format(i + 1), number=10) for i in range(100000)]
&gt;&gt;&gt; sum(times) * 1.0 / len(times)
2.8617620468139648e-06
&gt;&gt;&gt; times[-1]
1.9073486328125e-06
</snippet></ROW><ROW><id>6365166</id><snippet>n == len(slice)</snippet></ROW><ROW><id>6365166</id><snippet>struct</snippet></ROW><ROW><id>6365166</id><snippet>PyStringObject</snippet></ROW><ROW><id>6365166</id><snippet>stringobject.h</snippet></ROW><ROW><id>6365166</id><snippet>typedef struct {
    PyObject_VAR_HEAD
</snippet></ROW><ROW><id>6365166</id><snippet>PyObject_VAR_HEAD</snippet></ROW><ROW><id>6365166</id><snippet>    Py_ssize_t ob_refcnt;
    PyTypeObject *ob_type;
    Py_ssize_t ob_size;
</snippet></ROW><ROW><id>6365166</id><snippet>    long ob_shash;
    int ob_sstate;
    char ob_sval[1];

    /* Invariants:
     *     ob_sval contains space for 'ob_size+1' elements.
     *     ob_sval[ob_size] == 0.
     *     ob_shash is the hash of the string or -1 if not computed yet.
     *     ob_sstate != 0 iff the string object is in stringobject.c's
     *       'interned' dictionary; in this case the two references
     *       from 'interned' to this object are *not counted* in ob_refcnt.
     */
} PyStringObject;
</snippet></ROW><ROW><id>6365232</id><snippet>itertools.chain</snippet></ROW><ROW><id>6365232</id><snippet>import itertools
original_members = .... # get an iterator of the data
members = itertools.chain([specific_member], original_members)
</snippet></ROW><ROW><id>6365232</id><snippet>original_members</snippet></ROW><ROW><id>6365270</id><snippet>def remaining(self):
  return self.quantity - len( self.buyers.all() )
</snippet></ROW><ROW><id>6365270</id><snippet>def remaining(self):
  return self.quantity - self.buyers.all().count()
</snippet></ROW><ROW><id>6365449</id><snippet>tuple = Tuple(blah)
t0 = Property(depends_on="tuple", fget=lambda self: self.tuple[0])
</snippet></ROW><ROW><id>6365523</id><snippet>import codecs
nfoText = codecs.open('something.nfo', 'r', 'cp437').read()
</snippet></ROW><ROW><id>6365527</id><snippet>BuildExe.__init__</snippet></ROW><ROW><id>6365737</id><snippet>clean_field_name</snippet></ROW><ROW><id>6365737</id><snippet>ValidationError</snippet></ROW><ROW><id>6365737</id><snippet>class MyForm(forms.Form):
    ...
    # rest of the form
    ...

    def clean_address(self):
        address = self.cleaned_data['address']
        try:
            address = geo_clean(address)
        except GQueryError,e:
            raise forms.ValidationError("ooops you are so wrong, %s!"%e)

        return address
</snippet></ROW><ROW><id>6365769</id><snippet>regex</snippet></ROW><ROW><id>6365769</id><snippet>.filter(tags__iregex=r'\b%s\b' % tag)
</snippet></ROW><ROW><id>6365889</id><snippet>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; d['a'] = 5
</snippet></ROW><ROW><id>6365889</id><snippet>&gt;&gt;&gt; class Container(object):
...     pass
... 
&gt;&gt;&gt; c = Container()
&gt;&gt;&gt; setattr(c, 'a', 5)
&gt;&gt;&gt; c.a
5
</snippet></ROW><ROW><id>6365981</id><snippet>lxml</snippet></ROW><ROW><id>6366361</id><snippet>defaults = kwargs.pop('defaults', {})
params = dict([(k, v) for k, v in kwargs.items() if '__' not in k])
params.update(defaults)
obj = self.model(**params)
obj.save()
</snippet></ROW><ROW><id>6367075</id><snippet>file</snippet></ROW><ROW><id>6367075</id><snippet>class FileLineWrapper(object):
    def __init__(self, f):
        self.f = f
        self.line = 0
    def close(self):
        return self.f.close()
    def readline(self):
        self.line += 1
        return self.f.readline()
</snippet></ROW><ROW><id>6367075</id><snippet>f = FileLineWrapper(open("myfile.txt", "r"))
f.readline()
print(f.line)
</snippet></ROW><ROW><id>6367075</id><snippet>fileinput</snippet></ROW><ROW><id>6367140</id><snippet>import mymodule
try:
    [do a bunch of things...] 

except mymodule.Error:  
    error = "Remote servers appear to be busy. Please try again."
    return HttpResponse(error)
</snippet></ROW><ROW><id>6367664</id><snippet>mult = lambda x,y : (x*y)</snippet></ROW><ROW><id>6367664</id><snippet>&gt;&gt;&gt; exec("mult = lambda x,y : (x*y)")
&gt;&gt;&gt; mult
&lt;function &lt;lambda&gt; at 0x1004ac1b8&gt;
&gt;&gt;&gt; mult(3,6)
18
</snippet></ROW><ROW><id>6368133</id><snippet>context</snippet></ROW><ROW><id>6368133</id><snippet>try: except:</snippet></ROW><ROW><id>6368552</id><snippet>&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; from Crypto import Random
&gt;&gt;&gt; random_generator = Random.new().read
&gt;&gt;&gt; private_key = RSA.generate(1024, random_generator)
&gt;&gt;&gt; public_key = private_key.publickey()
&gt;&gt;&gt; enc_data = public_key.encrypt('abcdefgh', 32)
&gt;&gt;&gt; private_key.decrypt(enc_data)
'abcdefgh'
</snippet></ROW><ROW><id>6368552</id><snippet>Reader</snippet></ROW><ROW><id>6368552</id><snippet>Writer</snippet></ROW><ROW><id>6368552</id><snippet>PKI</snippet></ROW><ROW><id>6368552</id><snippet>Reader</snippet></ROW><ROW><id>6368552</id><snippet>Writer</snippet></ROW><ROW><id>6368552</id><snippet>RSA.importKey</snippet></ROW><ROW><id>6368552</id><snippet>pyCrypto &gt;= 2.1</snippet></ROW><ROW><id>6368912</id><snippet>SELECT PagesPersec FROM Win32_PerfFormattedData_PerfOS_Memory
</snippet></ROW><ROW><id>6368969</id><snippet>im = Image.frombuffer('RGB', (img.width, img.height), buff, 'raw', 'RGB', 0, 1)
im.save(filename)
</snippet></ROW><ROW><id>6368969</id><snippet>frombuffer</snippet></ROW><ROW><id>6368969</id><snippet>im = Image.frombuffer('RGB', (img.width, img.height), buff)
</snippet></ROW><ROW><id>6369322</id><snippet>sys.path = ['protorpc'] + sys.path
</snippet></ROW><ROW><id>6369322</id><snippet>from protorpc.webapp import service_handlers
</snippet></ROW><ROW><id>6369512</id><snippet>Computation</snippet></ROW><ROW><id>6369512</id><snippet>status</snippet></ROW><ROW><id>6369512</id><snippet>status</snippet></ROW><ROW><id>6369512</id><snippet>user requested to stop</snippet></ROW><ROW><id>6369558</id><snippet>list1 = [1,2,3,4]
list2 = [3,4,5,6]
result = set(list1).intersection(list2)
</snippet></ROW><ROW><id>6369576</id><snippet>User.objects.filter(Q(friends__to_user=someuser)|Q(friends___from_user=someuser))
</snippet></ROW><ROW><id>6369576</id><snippet>Q()</snippet></ROW><ROW><id>6369749</id><snippet>import settings
dir(settings)
</snippet></ROW><ROW><id>6369749</id><snippet>dir(settings)</snippet></ROW><ROW><id>6369749</id><snippet>settings.name
</snippet></ROW><ROW><id>6369749</id><snippet>name</snippet></ROW><ROW><id>6369749</id><snippet>settings.__dict__
</snippet></ROW><ROW><id>6369905</id><snippet>x = exp(((-0.5)*((f/sqrt(d))**2)))
</snippet></ROW><ROW><id>6369905</id><snippet>[ = { x, exp(((-0.5)*((f/sqrt(d))**2))) }]
</snippet></ROW><ROW><id>6369905</id><snippet>[ = { x, [ * { exp(((-0.5), ((f/sqrt(d))**2))) }] }]
</snippet></ROW><ROW><id>6369905</id><snippet>[ = { x, [ * { [ exp { -0.5 }],  [ ** { f/sqrt(d)), 2 }] }] }]
</snippet></ROW><ROW><id>6369920</id><snippet>[my_list[x:x+num] for x in range(0, len(my_list), num)]
</snippet></ROW><ROW><id>6370072</id><snippet>glob.iglob()</snippet></ROW><ROW><id>6370072</id><snippet>for filename in glob.iglob("*.hgx"):
    with open(filename) as f:
        # process file f here
</snippet></ROW><ROW><id>6370282</id><snippet>**</snippet></ROW><ROW><id>6370282</id><snippet>def my_func(key=None):
   print key
   #do the real stuff

temp = {'key':array([1,2])}

my_func(**temp)

&gt;&gt;&gt; array([1,2])
</snippet></ROW><ROW><id>6370620</id><snippet>print str.split('\n', 1)
['first line', ' xxxxxxxxxxxxx\n zzzzzzzzzzzzzzz']
</snippet></ROW><ROW><id>6370620</id><snippet>splited = str.partition('\n') 
print [splited[0] + splited[1], splited[2]]
['first line\n', ' xxxxxxxxxxxxx\n zzzzzzzzzzzzzzz']
</snippet></ROW><ROW><id>6370620</id><snippet>str</snippet></ROW><ROW><id>6370620</id><snippet>list</snippet></ROW><ROW><id>6371091</id><snippet>def foo(func, *args, **kwargs):
    retVal = None
    retries = 5
    success = False
    while retries &gt; 0 and success == False:
        try:
            retVal = func(*args, **kwargs)
            success = True
        except:
            retries = retries-1
            logging.info('Facebook put_event timed out.  Retrying.')
    return success, retVal
</snippet></ROW><ROW><id>6371091</id><snippet>s, r = foo(graph.put_event, arg1, arg2, kwarg1="hello", kwarg2="world")
</snippet></ROW><ROW><id>6371091</id><snippet>class CustomException(Exception): pass

# Note: untested code...
def foo(func, *args, **kwargs):
    retries = 5
    while retries &gt; 0:
        try:
            return func(*args, **kwargs)
        except:
            retries -= 1
            # maybe sleep a short while
    raise CustomException

# to be used as such
try:
    rv = foo(graph.put_event, arg1, arg2, kwarg1="hello", kwarg2="world")
except CustomException:
    # handle failure
</snippet></ROW><ROW><id>6371096</id><snippet>SIGINT</snippet></ROW><ROW><id>6371732</id><snippet>django.db.models.base.ModelBase</snippet></ROW><ROW><id>6371732</id><snippet>from django.db.models.loading import get_model

# Bail out early if we have already created this class.
m = get_model(new_class._meta.app_label, name, False)
if m is not None:
    return m
</snippet></ROW><ROW><id>6372175</id><snippet>from ... import *</snippet></ROW><ROW><id>6372223</id><snippet>print sorted(scores, reverse=True)
[(78495, 'Great Player'), (8473, 'Damian'), (4860, 'Andy'), (2850, 'Bob'), (1489, 'Sean'), (276, 'Crap Player'), (0, 'Stephen')]
</snippet></ROW><ROW><id>6372223</id><snippet>scores.sort(reverse=True)</snippet></ROW><ROW><id>6372316</id><snippet>the_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, ... ]
</snippet></ROW><ROW><id>6372316</id><snippet>split_list = [the_list[i:i+n] for i in range(0, len(the_list), n)]
</snippet></ROW><ROW><id>6372316</id><snippet>[[1, 2, 3, ..., n], [n+1, n+2, n+3, ..., 2n], ...]
</snippet></ROW><ROW><id>6372316</id><snippet>for sub_list in split_list:
    # Do something to the sub_list
</snippet></ROW><ROW><id>6372316</id><snippet>&gt;&gt;&gt; n = 2
&gt;&gt;&gt; listo = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; split_list = [listo[i:i+n] for i in range(0, len(listo), n)]
&gt;&gt;&gt; split_list
[[1, 2], [3, 4], [5, 6], [7, 8], [9]]

&gt;&gt;&gt; listo = '123456789'
&gt;&gt;&gt; split_list = [listo[i:i+n] for i in range(0, len(listo), n)]
&gt;&gt;&gt; split_list
['12', '34', '56', '78', '9']
</snippet></ROW><ROW><id>6372413</id><snippet>from pylab import *
xmax = 4.0
xmin = -xmax
D = 20
ymax = 4.0
ymin = -ymax
x = linspace(xmin, xmax, D)
y = linspace(ymin, ymax, D)
X, Y = meshgrid(x, y)
deg = arctan(Y**2 - X)
QP = quiver(X,Y,cos(deg),sin(deg))
show()
</snippet></ROW><ROW><id>6372491</id><snippet>const type_info*</snippet></ROW><ROW><id>6372492</id><snippet>from scipy.spatial import cKDTree
from scipy import inf

max_distance = 0.0001 # Assuming lats and longs are in decimal degrees, this corresponds to 11.1 meters
points = [(lat1, long1), (lat2, long2) ... ]
tree = cKDTree(points)

point_neighbors_list = [] # Put the neighbors of each point here

for point in points:
    distances, indices = tree.query(point, len(points), p=2, distance_upper_bound=max_distance)
    point_neighbors = []
    for index, distance in zip(indices, distances):
        if distance == inf:
            break
        point_neighbors.append(points[index])
    point_neighbors_list.append(point_neighbors)
</snippet></ROW><ROW><id>6372819</id><snippet>class Class():
    def __init__(self):
        execfile('config.py', locals())  # Not recommanded, maybe you want globals().
        print x
</snippet></ROW><ROW><id>6373087</id><snippet>__getattr__</snippet></ROW><ROW><id>6373087</id><snippet>class MasterProcessProxy(object):

    def __init__(self, pipe):
        self.pipe = pipe

    # This is called when an attribute is requested on the object.
    def __getattr__(self, name):
        # Create a dynamic function that sends a command through the pipe
        # Keyword arguments are sent as command arguments.
        def proxy(**kwargs):
            self.pipe.send([name, kwargs])
        return proxy
</snippet></ROW><ROW><id>6373087</id><snippet>mp.MasterProcess()
mp_proxy = MasterProcessProxy(mp.event_generator_remote)
mp_proxy.create_something(spam="eggs", bacon="baked beans")
# Will call pipe.send(["create_something", {"spam":"eggs", "bacon":"baked beans"}])
</snippet></ROW><ROW><id>6373260</id><snippet>import urllib
urllib.urlretrieve('http://python.org/images/python-logo.gif', '/tmp/foo.gif')
</snippet></ROW><ROW><id>6373608</id><snippet>self.request.url</snippet></ROW><ROW><id>6373608</id><snippet>self.request.environ</snippet></ROW><ROW><id>6373608</id><snippet>'Development' in os.environ['SERVER_SOFTWARE']
</snippet></ROW><ROW><id>6373741</id><snippet>board = [['s','t','a','c','k',' ',' ',' '],
         ['p',' ',' ','a',' ','c',' ',' '],
         ['o','v','e','r','f','l','o','w'],
         ['o',' ','a','t',' ','a',' ','a'],
         ['n','o','t',' ',' ','m','a','t'],
         [' ',' ','e',' ',' ',' ',' ','e'],
         [' ',' ','r',' ',' ',' ',' ','r'],
         [' ','e','y','e','s',' ',' ',' ']]
</snippet></ROW><ROW><id>6373741</id><snippet>import itertools
rows = (''.join(row) for row in board)
columns = (''.join(column) for column in zip(*board))
words = [word for line in itertools.chain(rows,columns) for word in line.split() if len(word) &gt; 1]
</snippet></ROW><ROW><id>6373741</id><snippet>['stack', 'overflow', 'at', 'not', 'mat', 'eyes', 'spoon', 'eatery', 'cart', 'clam', 'water']
</snippet></ROW><ROW><id>6373741</id><snippet>'not   mat'</snippet></ROW><ROW><id>6373741</id><snippet>str.split()</snippet></ROW><ROW><id>6373741</id><snippet>itertools.chain()</snippet></ROW><ROW><id>6374196</id><snippet>if exists('*strftime')
    au BufNewFile *.py :call append(0, '# Created: '.strftime('%a, %d %b %Y %T %z'))
endif
</snippet></ROW><ROW><id>6374196</id><snippet>strftime</snippet></ROW><ROW><id>6374196</id><snippet>man strftime</snippet></ROW><ROW><id>6374225</id><snippet>side_effect</snippet></ROW><ROW><id>6374225</id><snippet>with patch("syncdatetime.py") as sync_mock:
        sync_mock.request.return_value = [obj, '']
</snippet></ROW><ROW><id>6374225</id><snippet>with patch("syncdatetime.py") as sync_mock:
        sync_mock.request.side_effect = function_returning_list
</snippet></ROW><ROW><id>6374225</id><snippet>def function_returning_list(arg_list_of_choice):
     #anything use want to do goes here
     #then
     return your_list
</snippet></ROW><ROW><id>6374233</id><snippet>bin  = sock.recv(4) # for 4-byte integer
mlen = struct.unpack('I', bin)[0]
msg  = ''
while len(msg) != mlen:
    chunk = sock.recv(4096) # 4096 is an arbitrary buffer size
    if not chunk:
        raise Exception("Connection lost")
    msg += chunk
</snippet></ROW><ROW><id>6374542</id><snippet>&gt;&gt;&gt; "{{{0}}}".format(3)
'{3}'
</snippet></ROW><ROW><id>6374630</id><snippet>total_seconds()</snippet></ROW><ROW><id>6374630</id><snippet>seconds</snippet></ROW><ROW><id>6374707</id><snippet>source /home/your_user/.bashrc &amp;&amp; django_serve 
</snippet></ROW><ROW><id>6374707</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>6374707</id><snippet>--noreload</snippet></ROW><ROW><id>6374707</id><snippet>python manage.py runserver --noreload
</snippet></ROW><ROW><id>6374966</id><snippet>class LoginView(TemplateView):
    def post(self, request):
        try:
            user = authenticate(request.POST['username'], request.POST['password'])
        except MyCustomLdapError:
            return HttpResponseRedirect('ldap_server_unavailable.html')
        else:
            if user:
                return HttpResponseRedirect('logged_in.html')
            else:
                return HttpResponseRedirect('login_failed.html')
</snippet></ROW><ROW><id>6375165</id><snippet>--with-pydebug</snippet></ROW><ROW><id>6375165</id><snippet>--with-pydebug</snippet></ROW><ROW><id>6375521</id><snippet># in models.py
class Node(models.Model):
    parent = ForeignKey('Node')
    name = models.CharField(max_length = 256)


# in forms.py
from models import Node
from django.forms import ModelForm
from ajax_filtered_fields.forms import ForeignKeyByLetter

class NodeForm(ModelForm):
    class Meta:
        model = Node
    parent = ForeignKeyByLetter(Node, field_name = "name")
</snippet></ROW><ROW><id>6375576</id><snippet>loadtxt()</snippet></ROW><ROW><id>6375576</id><snippet>s = codecs.open("new.txt", encoding="utf-8").read()
arr = numpy.frombuffer(s, dtype="&lt;U3")
</snippet></ROW><ROW><id>6375576</id><snippet>arr = numpy.frombuffer(s.replace("\n", ""), dtype="&lt;U2")
</snippet></ROW><ROW><id>6375576</id><snippet>arr = numpy.fromiter(codecs.open("new.txt", encoding="utf-8"), dtype="&lt;U2")
</snippet></ROW><ROW><id>6375827</id><snippet>counter</snippet></ROW><ROW><id>6375827</id><snippet>trial</snippet></ROW><ROW><id>6375827</id><snippet>p.increase()</snippet></ROW><ROW><id>6375827</id><snippet>passon()</snippet></ROW><ROW><id>6375827</id><snippet>def passon(self):
    p = person(self.counter)
    self.counter = p.increase()
</snippet></ROW><ROW><id>6375970</id><snippet>&gt;&gt;&gt; import rpy2.rinterface 
&gt;&gt;&gt; rpy2.rinterface.get_initoptions()
('rpy2', '--quiet', '--vanilla', '--no-save')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6375970</id><snippet>import rpy2.rinterface as ri
ri.set_initoptions(('rpy2', '--verbose', '--no-save'))
ri.initr()

# from now on, just import the rest of rpy2 modules without thinking of the above.
</snippet></ROW><ROW><id>6375973</id><snippet>import urllib
encoded = urllib.quote(open("filename.png", "rb").read().encode("base64"))
</snippet></ROW><ROW><id>6376373</id><snippet>Pickler</snippet></ROW><ROW><id>6376373</id><snippet>Unpickler</snippet></ROW><ROW><id>6376373</id><snippet>import pickle

class Foo(object):
    pass

foo = Foo()
bar = Foo()
bar.foo_ref = foo

f = open('tmp.pkl', 'wb')
p = pickle.Pickler(f)
p.dump(foo)
p.dump(bar)
f.close()

f = open('tmp.pkl', 'rb')
up = pickle.Unpickler(f)
foo2 = up.load()
bar2 = up.load()

print id(foo) == id(bar.foo_ref) # True
print id(foo2) == id(bar2.foo_ref) # True
</snippet></ROW><ROW><id>6376379</id><snippet>auth.settings.allow_basic_login = True

@service.xmlrpc
def example(temp):
    return ...


@auth.requires_login()
def call(): return service()
</snippet></ROW><ROW><id>6376396</id><snippet>HTTPClient</snippet></ROW><ROW><id>6376396</id><snippet>buildProtocol()</snippet></ROW><ROW><id>6376396</id><snippet>HTTPPageGetter</snippet></ROW><ROW><id>6376396</id><snippet>Agent</snippet></ROW><ROW><id>6376692</id><snippet>"sdl_ttf.dll"</snippet></ROW><ROW><id>6376692</id><snippet>origIsSystemDLL = py2exe.build_exe.isSystemDLL # save the orginal before we edit it
def isSystemDLL(pathname):
    # checks if the freetype and ogg dll files are being included
    if os.path.basename(pathname).lower() in ("libfreetype-6.dll", "libogg-0.dll", "sdl_ttf.dll"):
            return 0
    return origIsSystemDLL(pathname) # return the orginal function
py2exe.build_exe.isSystemDLL = isSystemDLL # override the default function with this one
</snippet></ROW><ROW><id>6376735</id><snippet>{% load humanize %}
{{ video.pub_date|naturaltime }}
</snippet></ROW><ROW><id>6376735</id><snippet>{{ video.pub_date|timesince }}
</snippet></ROW><ROW><id>6376751</id><snippet>for c, data in enumerate(data_list):
    xf=None
    sheet.col(c).width = len(str(data))*256 
    if isinstance(data, datetime.time):
</snippet></ROW><ROW><id>6376751</id><snippet>0</snippet></ROW><ROW><id>6377007</id><snippet>strs = ["" for x in range(size)]
</snippet></ROW><ROW><id>6377392</id><snippet>webbrowser.open()</snippet></ROW><ROW><id>6377392</id><snippet>webbrowser.open()</snippet></ROW><ROW><id>6377392</id><snippet>file:</snippet></ROW><ROW><id>6377392</id><snippet>os.startfile(url)</snippet></ROW><ROW><id>6377392</id><snippet>help.html</snippet></ROW><ROW><id>6377392</id><snippet>os.startfile()</snippet></ROW><ROW><id>6377392</id><snippet>ShellExecute</snippet></ROW><ROW><id>6377392</id><snippet>ShellExecute</snippet></ROW><ROW><id>6377392</id><snippet>ShellExecute</snippet></ROW><ROW><id>6377392</id><snippet>ShellExecute</snippet></ROW><ROW><id>6377392</id><snippet>#</snippet></ROW><ROW><id>6377392</id><snippet>file:</snippet></ROW><ROW><id>6377392</id><snippet>http:</snippet></ROW><ROW><id>6377392</id><snippet>file:</snippet></ROW><ROW><id>6377392</id><snippet>webbrowser</snippet></ROW><ROW><id>6377392</id><snippet>webbrowser.get()</snippet></ROW><ROW><id>6377392</id><snippet>BROWSER</snippet></ROW><ROW><id>6377392</id><snippet>  try:
      browser = webbrowser.get('c:\\Program Files\\Internet Explorer\\IEXPLORE.EXE')
  except Webbrowser.Error:
      browser = webbrowser.get()
  browser.open(url)
</snippet></ROW><ROW><id>6377406</id><snippet>add_subplot</snippet></ROW><ROW><id>6377406</id><snippet>self.axes = self.figure.add_subplot(111)
</snippet></ROW><ROW><id>6377406</id><snippet>self.axes = self.figure.add_axes([0,0,1,1])
</snippet></ROW><ROW><id>6377406</id><snippet>[0,0,1,1]</snippet></ROW><ROW><id>6377406</id><snippet>self.axes.imshow(self.data, interpolation="quadric", aspect='auto')
</snippet></ROW><ROW><id>6377429</id><snippet>src_dt = dt.replace(tzinfo=src_tz)
</snippet></ROW><ROW><id>6377429</id><snippet>src_dt = src_tz.localize(dt)
</snippet></ROW><ROW><id>6377429</id><snippet>localize</snippet></ROW><ROW><id>6377429</id><snippet>replace</snippet></ROW><ROW><id>6377558</id><snippet>...</snippet></ROW><ROW><id>6377558</id><snippet>&gt;&gt;&gt; re.findall('(?&lt;=[A-Z]{3})[a-z](?=...[A-Z]{3})', "AAAb123CCC")
['b']
&gt;&gt;&gt; re.findall('(?&lt;=[A-Z]{3})[a-z](?=...[A-Z]{3})', "AAAbCCC")
[]
</snippet></ROW><ROW><id>6377558</id><snippet>...</snippet></ROW><ROW><id>6377558</id><snippet>(?&lt;=[^A-Z][A-Z]{3})[a-z](?=[A-Z]{3}[^A-Z])
</snippet></ROW><ROW><id>6378300</id><snippet>B</snippet></ROW><ROW><id>6378300</id><snippet>Batman</snippet></ROW><ROW><id>6378300</id><snippet>Bat</snippet></ROW><ROW><id>6378300</id><snippet>\w+</snippet></ROW><ROW><id>6378300</id><snippet>Batman</snippet></ROW><ROW><id>6378300</id><snippet>\b(?!Bat)\w+
</snippet></ROW><ROW><id>6378300</id><snippet>\b</snippet></ROW><ROW><id>6378300</id><snippet>Bat</snippet></ROW><ROW><id>6378300</id><snippet>\w</snippet></ROW><ROW><id>6378300</id><snippet>\W</snippet></ROW><ROW><id>6378300</id><snippet>[A-Za-z0-9_]</snippet></ROW><ROW><id>6378300</id><snippet>^</snippet></ROW><ROW><id>6378300</id><snippet>$</snippet></ROW><ROW><id>6378337</id><snippet>from import</snippet></ROW><ROW><id>6378337</id><snippet>&gt;&gt;&gt; def foo():
...     from foo import bar

&gt;&gt;&gt; dis.dis(foo)
2           0 LOAD_CONST               1 (-1)
              3 LOAD_CONST               2 (('bar',))
              6 IMPORT_NAME              0 (foo)
              9 IMPORT_FROM              1 (bar)
             12 STORE_FAST               0 (bar)
             15 POP_TOP             
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
</snippet></ROW><ROW><id>6378337</id><snippet>from foo import bar</snippet></ROW><ROW><id>6378337</id><snippet>IMPORT_NAME foo</snippet></ROW><ROW><id>6378337</id><snippet>import foo</snippet></ROW><ROW><id>6378337</id><snippet>IMPORT_FROM bar</snippet></ROW><ROW><id>6378337</id><snippet>IMPORT_FROM</snippet></ROW><ROW><id>6378337</id><snippet>IMPORT_FROM</snippet></ROW><ROW><id>6378337</id><snippet>TARGET(IMPORT_FROM)
     w = GETITEM(names, oparg);
     v = TOP();
     READ_TIMESTAMP(intr0);
     x = import_from(v, w);
     READ_TIMESTAMP(intr1);
     PUSH(x);
     if (x != NULL) DISPATCH();
     break;
</snippet></ROW><ROW><id>6378337</id><snippet>foo()</snippet></ROW><ROW><id>6378337</id><snippet>bar</snippet></ROW><ROW><id>6378337</id><snippet>v</snippet></ROW><ROW><id>6378337</id><snippet>IMPORT_NAME</snippet></ROW><ROW><id>6378337</id><snippet>import_from()</snippet></ROW><ROW><id>6378337</id><snippet>static PyObject *
import_from(PyObject *v, PyObject *name)
{
    PyObject *x;

    x = PyObject_GetAttr(v, name);

    if (x == NULL &amp;&amp; PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
    }
    return x;
}
</snippet></ROW><ROW><id>6378337</id><snippet>import_from()</snippet></ROW><ROW><id>6378337</id><snippet>name</snippet></ROW><ROW><id>6378337</id><snippet>v</snippet></ROW><ROW><id>6378337</id><snippet>ImportError</snippet></ROW><ROW><id>6378337</id><snippet>from . import b</snippet></ROW><ROW><id>6378337</id><snippet>from pkg import b</snippet></ROW><ROW><id>6378337</id><snippet>import.c</snippet></ROW><ROW><id>6378337</id><snippet>.</snippet></ROW><ROW><id>6378337</id><snippet>__main__</snippet></ROW><ROW><id>6378337</id><snippet>pkg</snippet></ROW><ROW><id>6378337</id><snippet>-vv</snippet></ROW><ROW><id>6378337</id><snippet>python -vv -c 'import pkg.b'</snippet></ROW><ROW><id>6378337</id><snippet>Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.

import pkg # directory pkg
# trying pkg/__init__.so
# trying pkg/__init__module.so
# trying pkg/__init__.py
# pkg/__init__.pyc matches pkg/__init__.py
import pkg # precompiled from pkg/__init__.pyc
# trying pkg/b.so
# trying pkg/bmodule.so
# trying pkg/b.py
# pkg/b.pyc matches pkg/b.py
import pkg.b # precompiled from pkg/b.pyc
# trying pkg/a.so
# trying pkg/amodule.so
# trying pkg/a.py
# pkg/a.pyc matches pkg/a.py
import pkg.a # precompiled from pkg/a.pyc
#   clear[2] __name__
#   clear[2] __file__
#   clear[2] __package__
#   clear[2] __name__
#   clear[2] __file__
#   clear[2] __package__
...
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "pkg/b.py", line 1, in &lt;module&gt;
    from . import a
  File "pkg/a.py", line 2, in &lt;module&gt;
    from . import a
ImportError: cannot import name a
# clear __builtin__._
</snippet></ROW><ROW><id>6378337</id><snippet>ImportError</snippet></ROW><ROW><id>6378337</id><snippet>from . import a</snippet></ROW><ROW><id>6378337</id><snippet>pkg/b.py</snippet></ROW><ROW><id>6378337</id><snippet>from pkg import a</snippet></ROW><ROW><id>6378337</id><snippet>import pkg; getattr(pkg, 'a')</snippet></ROW><ROW><id>6378337</id><snippet>a</snippet></ROW><ROW><id>6378337</id><snippet>from module|package import module</snippet></ROW><ROW><id>6378337</id><snippet>pkg/a.py</snippet></ROW><ROW><id>6378337</id><snippet>sys.modules</snippet></ROW><ROW><id>6378337</id><snippet>pkg.a</snippet></ROW><ROW><id>6378337</id><snippet>pkg/a.py</snippet></ROW><ROW><id>6378337</id><snippet>pkg/a.py</snippet></ROW><ROW><id>6378337</id><snippet>from . import b</snippet></ROW><ROW><id>6378337</id><snippet>pkg/b.py</snippet></ROW><ROW><id>6378337</id><snippet>import pkg</snippet></ROW><ROW><id>6378337</id><snippet>pkg</snippet></ROW><ROW><id>6378337</id><snippet>pkg</snippet></ROW><ROW><id>6378337</id><snippet>sys.modules</snippet></ROW><ROW><id>6378337</id><snippet>import b</snippet></ROW><ROW><id>6378337</id><snippet>pkg.b</snippet></ROW><ROW><id>6378337</id><snippet>sys.modules</snippet></ROW><ROW><id>6378337</id><snippet>from . import a</snippet></ROW><ROW><id>6378337</id><snippet>pkg/a.py</snippet></ROW><ROW><id>6378337</id><snippet>('pkg.a' in sys.modules) == True</snippet></ROW><ROW><id>6378337</id><snippet>getattr(pkg, 'a')</snippet></ROW><ROW><id>6378337</id><snippet>pkg/a.py</snippet></ROW><ROW><id>6378337</id><snippet>getattr(pkg, 'a')</snippet></ROW><ROW><id>6378337</id><snippet>AttributeError</snippet></ROW><ROW><id>6378337</id><snippet>import_from()</snippet></ROW><ROW><id>6378337</id><snippet>ImportError(cannot import name a)</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>weatherData</snippet></ROW><ROW><id>6378420</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378420</id><snippet>weatherData.socket</snippet></ROW><ROW><id>6378420</id><snippet>weatherData</snippet></ROW><ROW><id>6378420</id><snippet>socket</snippet></ROW><ROW><id>6378541</id><snippet>Tag</snippet></ROW><ROW><id>6378541</id><snippet>class TagTest(Base):
    __table_args__ = (ForeignKeyConstraint(['TG_TAG_ID', 'TG_TYPE'],
        ['TAG.TG_TAG_ID', 'TAG.TG_TYPE']), {})
    tagID = Column(u'TG_TAG_ID', INTEGER(), primary_key=True, nullable=False)
    testID = Column(u'TS_TEST_ID', INTEGER(), ForeignKey("TEST.TS_TEST_ID"), primary_key=True, nullable=False)
    tagType = Column(u'TG_TYPE', VARCHAR(50), primary_key=True, nullable=False)
    tag = relationship(Tag, backref="testLinks")
    test = relationship(Test, backref="tagLinks")

class Tag(Base):
    tests = relationship("Test", secondary="TAG_TEST")
</snippet></ROW><ROW><id>6378541</id><snippet>myTag.tests</snippet></ROW><ROW><id>6378541</id><snippet>myTest.tagLinks</snippet></ROW><ROW><id>6378541</id><snippet>.tag</snippet></ROW><ROW><id>6378541</id><snippet>.tagLinks</snippet></ROW><ROW><id>6378600</id><snippet>def display():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho( 0, 640, 0, 480, -10, 10)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    ...
</snippet></ROW><ROW><id>6378638</id><snippet>for</snippet></ROW><ROW><id>6378638</id><snippet># Recursive case: node has one or more child
if len( children ) &gt;= 1 :
    # Loop through all the children
    for child in children:
        # call to recursion function
        getCoords( child, searchNode )
</snippet></ROW><ROW><id>6378638</id><snippet># If node has one or more child
if len( children ) &gt;= 1 :
    # Data structure for your results
    coords = []
    # Loop through all the children
    for child in children:
        # call to recursion function
        result = getCoords( child, searchNode )
        # Add your new results together
        coords.extend(result)
    # Give the next instance up the stack your results!
    return coords
</snippet></ROW><ROW><id>6378638</id><snippet>extend()</snippet></ROW><ROW><id>6378638</id><snippet># Base case 1: does not have children and is the 'searchNode'
elif len( children ) == 0 and child.tag == searchNode:
    # Return the text from the node, inside a list
    return [child.text]
# Base case 2: doesn't have children and does not match 'searchNode'
else:
    # Return empty list so your extend() function knows what to do with the result
    return []
</snippet></ROW><ROW><id>6378638</id><snippet>searchNode = 'coordinates'
# loop through all 'Placemark nodes' in document
for mark in placemark:
    # Get children of 'Placemark' node
    children = mark.getchildren()
    # I imagine that getchildren() might return None, so check it
    # otherwise you'll get an error when trying to iterate on it
    if children:
        # Loop through children nodes
        for child in children:
            # if a 'Polygon' node is found
            if child.tag == 'Polygon':
                # call recursion function and print (or save) result
                print getCoords( child, searchNode)
</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; prices = dict()
&gt;&gt;&gt; prices['2011-01-02'] = {'Open':20.00, 'High':30.00, 'Low':10.00, 'Close':21.00, 'Volume':14.00, 'Adj Clos':120}
&gt;&gt;&gt; prices['2010-11-09'] = {'Open':22.00, 'High':50.00, 'Low':20.00, 'Close':42.00, 'Volume':10.00, 'Adj Clos':666}
&gt;&gt;&gt; prices
{'2011-01-02': {'Volume': 14.0, 'Adj Clos': 120, 'High': 30.0, 'Low': 10.0, 'Close': 21.0, 'Open': 20.0}, '2010-11-09': {'Volume': 10.0, 'Adj Clos': 666, 'High': 50.0, 'Low': 20.0, 'Close': 42.0, 'Open': 22.0}}
</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; prices['2011-01-02']
{'Volume': 14.0, 'Adj Clos': 120, 'High': 30.0, 'Low': 10.0, 'Close': 21.0, 'Open': 20.0}
</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; prices['2010-11-09']['Open']
22.0
&gt;&gt;&gt; prices['2010-11-09']['Close']
42.0
</snippet></ROW><ROW><id>6379116</id><snippet>get_historical_prices</snippet></ROW><ROW><id>6379116</id><snippet>[Date, Open, High, Low, Close, Volume, Adj_Clos]</snippet></ROW><ROW><id>6379116</id><snippet>Date</snippet></ROW><ROW><id>6379116</id><snippet>entry[0]</snippet></ROW><ROW><id>6379116</id><snippet>entry[1:]</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; entry = ['2011-01-02', 20.00, 30.00, 10.00, 21.00, 14.00, 120]
&gt;&gt;&gt; date = entry[0]
&gt;&gt;&gt; date
'2011-01-02'
&gt;&gt;&gt; values = entry[1:]
&gt;&gt;&gt; values
[20.0, 30.0, 10.0, 21.0, 14.0, 120]
</snippet></ROW><ROW><id>6379116</id><snippet>zip()</snippet></ROW><ROW><id>6379116</id><snippet>p</snippet></ROW><ROW><id>6379116</id><snippet>q</snippet></ROW><ROW><id>6379116</id><snippet>zip(p,q)[i] == (p[i], q[i])</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; keys = ['Open', 'High', 'Low', 'Close', 'Volume', 'Adj Clos']
&gt;&gt;&gt; pairs = zip(keys, entry[1:])
&gt;&gt;&gt; pairs
[('Open', 20.0), ('High', 30.0), ('Low', 10.0), ('Close', 21.0), ('Volume', 14.0), ('Adj Clos', 120)]
</snippet></ROW><ROW><id>6379116</id><snippet>&gt;&gt;&gt; stockdict = dict(pairs)
&gt;&gt;&gt; stockdict
{'Volume': 14.0, 'Adj Clos': 120, 'High': 30.0, 'Low': 10.0, 'Close': 21.0, 'Open': 20.0}
&gt;&gt;&gt; histodict = dict()
&gt;&gt;&gt; histodict[date] = stockdict
</snippet></ROW><ROW><id>6379116</id><snippet>history</snippet></ROW><ROW><id>6379116</id><snippet>for</snippet></ROW><ROW><id>6379116</id><snippet>keys = ['Open', 'High', 'Low', 'Close', 'Volume', 'Adj Clos']
histodict = dict()
for item in history:
    date = item[0]
    values = item[1:]
    histodict[date] = dict(zip(keys, values))
</snippet></ROW><ROW><id>6379116</id><snippet>keys = ['Open', 'High', 'Low', 'Close', 'Volume', 'Adj Clos']
histodict = dict((item[0], dict(zip(keys, item[1:]))) for item in history)
</snippet></ROW><ROW><id>6379186</id><snippet># establish the "rules"    
bad_time = {
    'Sat': lambda h: True,    # always bad time!
    'Sun': lambda h: h &lt; 2000,
    'Fri': lambda h: h &gt; 1630,
}

# ... get your `weekday` and `hourmin` values

is_bad = bad_time.get(weekday, lambda h: (1630 &lt;= h &lt; 2000))(hourmin)
print 'bad time' if is_bad else 'good time'
</snippet></ROW><ROW><id>6379694</id><snippet>t = Times.objects.exclude(delay=0)
</snippet></ROW><ROW><id>6379916</id><snippet>'</snippet></ROW><ROW><id>6379916</id><snippet>'%s'</snippet></ROW><ROW><id>6379916</id><snippet>cmd = r"tshark -r %s -e frame.number -e ip.src_host -e tcp.srcport -E separator=%s -T fields tcp" % (filename, sep)
</snippet></ROW><ROW><id>6380034</id><snippet>Thread 1     Thread 2
LLEN test    
1                            
LPOP test   
command      
             LLEN test
             0
</snippet></ROW><ROW><id>6380034</id><snippet>Thread 1     Thread 2
LLEN test    
1                            
LPOP test   
             LLEN test
             command
0
</snippet></ROW><ROW><id>6380198</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>6380198</id><snippet>comSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>6380198</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>6380198</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>6380198</id><snippet>TIME_WAIT</snippet></ROW><ROW><id>6380430</id><snippet>class Foo(object):
    pass
</snippet></ROW><ROW><id>6380430</id><snippet>class</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>class Foo:
    pass

class Bar(Foo):
    pass
</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>object</snippet></ROW><ROW><id>6380430</id><snippet>class</snippet></ROW><ROW><id>6380430</id><snippet>mylist = list("abc")   # constructs ["a", "b", "c"]
</snippet></ROW><ROW><id>6380430</id><snippet>__init__()</snippet></ROW><ROW><id>6380430</id><snippet>type</snippet></ROW><ROW><id>6380430</id><snippet>type</snippet></ROW><ROW><id>6380430</id><snippet>type</snippet></ROW><ROW><id>6380430</id><snippet>class mymeta(type):
    pass
</snippet></ROW><ROW><id>6380529</id><snippet>+</snippet></ROW><ROW><id>6380558</id><snippet>&gt;&gt;&gt; math.pow(2,1000)
1.0715086071862673e+301

&gt;&gt;&gt; 2**1000
10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376L
</snippet></ROW><ROW><id>6380558</id><snippet>**</snippet></ROW><ROW><id>6380585</id><snippet>sudo easy_install --upgrade twisted
</snippet></ROW><ROW><id>6380585</id><snippet>sudo python_version path_to_easy_install --upgrade twisted</snippet></ROW><ROW><id>6380586</id><snippet>pv</snippet></ROW><ROW><id>6380586</id><snippet>capture | pv &gt; /dev/null
capture | convert | pv &gt; /dev/null
</snippet></ROW><ROW><id>6380586</id><snippet>pv</snippet></ROW><ROW><id>6380586</id><snippet>capture</snippet></ROW><ROW><id>6380660</id><snippet>[line.split(':', 1) for line in open('words.txt')]
</snippet></ROW><ROW><id>6380660</id><snippet>dict(line.split(':', 1) for line in open('words.txt'))
</snippet></ROW><ROW><id>6380672</id><snippet>content += '&lt;a href="/%s/"&gt;%s&lt;/a&gt; %s  %s' % tuple(itertools.chain((item.slug,),
           str(item.title).ljust(25).split(" ", 1), (item.date.ljust(10),)))
</snippet></ROW><ROW><id>6380672</id><snippet>values = [item.slug]
values += str(item.title).ljust(25).split(" ", 1)
values.append(item.date.ljust(10))
content += '&lt;a href="/%s/"&gt;%s&lt;/a&gt; %s  %s' % values
</snippet></ROW><ROW><id>6380672</id><snippet>item.title</snippet></ROW><ROW><id>6380672</id><snippet>title, spaces = (str(item.title).ljust(25)+" ").split(" ", 1)
content += '&lt;a href="/%s/"&gt;%s&lt;/a&gt;%s  %s' % (item.slug, title, 
                                            spaces, item.date.ljust(10))
</snippet></ROW><ROW><id>6381212</id><snippet>$n</snippet></ROW><ROW><id>6381212</id><snippet>st = "SELECT name_key,address_key FROM file WHERE foreign_key = $1"
pst = plpy.prepare(st, [ "integer" ])
rv = plpy.execute(pst, [ param_key ])
</snippet></ROW><ROW><id>6381264</id><snippet>from calendar import monthrange
</snippet></ROW><ROW><id>6381303</id><snippet>(left + right) / 2</snippet></ROW><ROW><id>6381303</id><snippet>(right - left) / 2</snippet></ROW><ROW><id>6381303</id><snippet>left + (right - left) / 2</snippet></ROW><ROW><id>6381664</id><snippet>[map(int, x) for x in values]
</snippet></ROW><ROW><id>6381664</id><snippet>map()</snippet></ROW><ROW><id>6381664</id><snippet>[list(map(int, x)) for x in values]
</snippet></ROW><ROW><id>6381664</id><snippet>[[int(y) for y in x] for x in values]
</snippet></ROW><ROW><id>6381701</id><snippet>__init__</snippet></ROW><ROW><id>6381701</id><snippet>super(SomeCls, self).__getitem__(5)</snippet></ROW><ROW><id>6381701</id><snippet>super(SomeCls, self)[5]</snippet></ROW><ROW><id>6381701</id><snippet>Dog</snippet></ROW><ROW><id>6381701</id><snippet>Cat</snippet></ROW><ROW><id>6381701</id><snippet>Mammal</snippet></ROW><ROW><id>6381701</id><snippet>Animal</snippet></ROW><ROW><id>6381701</id><snippet>Dog</snippet></ROW><ROW><id>6381701</id><snippet>Cat</snippet></ROW><ROW><id>6381701</id><snippet>tom</snippet></ROW><ROW><id>6381701</id><snippet>tom.nlegs</snippet></ROW><ROW><id>6381701</id><snippet>Animal</snippet></ROW><ROW><id>6381701</id><snippet>__init__</snippet></ROW><ROW><id>6381701</id><snippet>nlegs</snippet></ROW><ROW><id>6381701</id><snippet>__init__</snippet></ROW><ROW><id>6381701</id><snippet>class Mammal(object):
    nlimbs = 4
    def __init__(self):
        print "I'm a mammal!"

class Cat(Mammal):
    def __init__(self, color="calico"):
        self.color = color
        super(Cat, self).__init__()
        print "I have {0} legs I am {1}".format(self.nlimbs, self.color)

class FiveLeggedCat(Cat):
    nlimbs = 5
</snippet></ROW><ROW><id>6381701</id><snippet>__init__</snippet></ROW><ROW><id>6381701</id><snippet>help</snippet></ROW><ROW><id>6381770</id><snippet>__all__</snippet></ROW><ROW><id>6381770</id><snippet>foo.file1</snippet></ROW><ROW><id>6381770</id><snippet>__all__</snippet></ROW><ROW><id>6381770</id><snippet>__init__.py</snippet></ROW><ROW><id>6381770</id><snippet>import file1
</snippet></ROW><ROW><id>6382342</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>6382342</id><snippet>User</snippet></ROW><ROW><id>6382342</id><snippet>User</snippet></ROW><ROW><id>6382342</id><snippet>ForeignKey</snippet></ROW><ROW><id>6382342</id><snippet>class UserProfile(models.Model):
    user = models.ForeignKey(User, unique=True)
    age = models.IntegerField()

class Account(models.Model):
    user_profile = models.ForeignKey('UserProfile')
</snippet></ROW><ROW><id>6382342</id><snippet>profile = User.objects.get(id=1).get_profile() # get user's profile
profile.account_set.all() # get all accounts associated with user's profile
acct = Account() # create a new account
profile.account_set.add(acct) # add a new account to the user's profile
</snippet></ROW><ROW><id>6382357</id><snippet>os</snippet></ROW><ROW><id>6382382</id><snippet>request.session['review_company_review'] = some_company_review_object</snippet></ROW><ROW><id>6382382</id><snippet>cr = request.session['review_company_review']
</snippet></ROW><ROW><id>6382577</id><snippet>from bottle import request, route, run

@route('/upload', method='POST')
def do_upload():
    data = request.files.get('data')
    raw = data.file.read()
    filename = data.filename
    return "You uploaded %s (%d bytes)." % (filename, len(raw))

run(host='localhost', port=8080)
</snippet></ROW><ROW><id>6382720</id><snippet>numpy</snippet></ROW><ROW><id>6382720</id><snippet>&gt;&gt;&gt; import numpy as np

&gt;&gt;&gt; a = np.matrix([[1, 2], [3, 4]])
&gt;&gt;&gt; b = np.matrix([[2, 2], [2, 2]])

&gt;&gt;&gt; a+b
matrix([[3, 4],
        [5, 6]])
</snippet></ROW><ROW><id>6382720</id><snippet>from pprint import pformat as pf

class Matrix(object):
    def __init__(self, arrayOfRows=None, rows=None, cols=None):
        if arrayOfRows:
            self.data = arrayOfRows
        else:
            self.data = [[0 for c in range(cols)] for r in range(rows)]
        self.rows = len(self.data)
        self.cols = len(self.data[0])

    @property
    def shape(self):          # myMatrix.shape -&gt; (4,3)
        return (self.rows, self.cols)
    def __getitem__(self, i): # lets you do myMatrix[row][col
        return self.data[i]
    def __str__(self):        # pretty string formatting
        return pf(self.data)

    @classmethod
    def map(cls, func, *matrices):
        assert len(set(m.shape for m in matrices))==1, 'Not all matrices same shape'

        rows,cols = matrices[0].shape
        new = Matrix(rows=rows, cols=cols)
        for r in range(rows):
            for c in range(cols):
                new[r][c] = func(*[m[r][c] for m in matrices], r=r, c=c)
        return new
</snippet></ROW><ROW><id>6382720</id><snippet>    def __add__(self, other):
        return Matrix.map(lambda a,b,**kw:a+b, self, other)
    def __sub__(self, other):
        return Matrix.map(lambda a,b,**kw:a-b, self, other)
</snippet></ROW><ROW><id>6382720</id><snippet>&gt;&gt;&gt; a = Matrix([[1, 2], [3, 4]])
&gt;&gt;&gt; b = Matrix([[2, 2], [2, 2]])
&gt;&gt;&gt; b = Matrix([[0, 0], [0, 0]])

&gt;&gt;&gt; print(a+b)
[[3, 4], [5, 6]]                                                                                                                                                                                                      

&gt;&gt;&gt; print(a-b)
[[-1, 0], [1, 2]]
</snippet></ROW><ROW><id>6382720</id><snippet>def listmatrixMap(f, *matrices):
    return \
        [
            [
                f(*values) 
                for c,values in enumerate(zip(*rows))
            ] 
            for r,rows in enumerate(zip(*matrices))
        ]
</snippet></ROW><ROW><id>6382720</id><snippet>&gt;&gt;&gt; listmatrixMap(operator.add, a, b, c))
[[3, 4], [5, 6]]
</snippet></ROW><ROW><id>6382720</id><snippet>enumerate</snippet></ROW><ROW><id>6382720</id><snippet>&gt;&gt;&gt; listmatrixMap(lambda val,r,c:((r,c),val), a, indices=True)
[[((0, 0), 1), ((0, 1), 2)], [((1, 0), 3), ((1, 1), 4)]]
</snippet></ROW><ROW><id>6382720</id><snippet>add_matrices</snippet></ROW><ROW><id>6382720</id><snippet>def add_matrices(a,b):
    return listmatrixMap(add, a, b)
</snippet></ROW><ROW><id>6382720</id><snippet>&gt;&gt;&gt; add_matrices(c, d)
[[11, 4], [12, 6], [15, 19]]
</snippet></ROW><ROW><id>6382852</id><snippet>import sys
import getopt

   try:
    opts, args = getopt.getopt(argv, 'm:p:h', ['miner=', 'params=', 'help'])
except getopt.GetoptError:
    usage()
    sys.exit(2)

for opt, arg in opts:
    if opt in ('-h', '--help'):
        usage()
        sys.exit(2)
    elif opt in ('-m', '--miner'):
        miner_name = arg
    elif opt in ('-p', '--params'):
        params = arg
    else:
        usage()
        sys.exit(2)
</snippet></ROW><ROW><id>6382962</id><snippet>import math
def myRounding(x):
   return math.ceil(x*100) / 100.0
</snippet></ROW><ROW><id>6382962</id><snippet>123</snippet></ROW><ROW><id>6382962</id><snippet>0.01</snippet></ROW><ROW><id>6382962</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>6383387</id><snippet>for row in reader:</snippet></ROW><ROW><id>6383387</id><snippet>for row in reader.readlines():</snippet></ROW><ROW><id>6383387</id><snippet>outer = codecs.open(&lt;outer loop file).readlines()
inner = codecs.open(&lt;inner loop file).readlines()

for o in outer:
   for i in inner:
       print o
</snippet></ROW><ROW><id>6383390</id><snippet>try:
    some_object
except NameError:
    do_something()
else:
    do_something_else()
</snippet></ROW><ROW><id>6383747</id><snippet>class auto_assign_perms(object):
    def __init__(self, *users):
        self.users = users

    def __call__(self, cls):
        cls.owners = set(self.users) # &lt;- here
        return cls

#some tests
@auto_assign_perms('owner', 'user')
class Test(Base):
    pass

@auto_assign_perms('coach')
class Test2(Base):
    pass


t = Test()
t.save()
t = Test2()
t.save()

&gt;&gt;&gt; 
owner user
coach
</snippet></ROW><ROW><id>6383935</id><snippet>from datetime import timedelta
obj.starts += timedelta(days=1, hours=2)
</snippet></ROW><ROW><id>6384146</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6384146</id><snippet>test_app</snippet></ROW><ROW><id>6384146</id><snippet>module1</snippet></ROW><ROW><id>6384146</id><snippet>module2</snippet></ROW><ROW><id>6384146</id><snippet>python test_app/main.py
</snippet></ROW><ROW><id>6384146</id><snippet>module1.main</snippet></ROW><ROW><id>6384146</id><snippet>module2.main</snippet></ROW><ROW><id>6384146</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__new__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>pickle</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>a = A.__new__(A, *args, **kwargs)
a.__init__(*args, **kwargs)
</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>pickle</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>__init__</snippet></ROW><ROW><id>6384982</id><snippet>data</snippet></ROW><ROW><id>6385353</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; u = urllib2.urlopen('http://google.com')
&gt;&gt;&gt; dir(u)  # useful in seeing what's there, see also help(u)
['__doc__', '__init__', '__iter__', '__module__', '__repr__', 'close', 'code', 'fileno', 'fp', 'getcode', 'geturl', 'headers', 'info', 'msg', 'next', 'read', 'readline', 'readlines', 'url']
&gt;&gt;&gt; u.geturl()
'http://www.google.com.au/'
&gt;&gt;&gt; u.url
'http://www.google.com.au/'
</snippet></ROW><ROW><id>6385353</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>6385353</id><snippet>geturl()</snippet></ROW><ROW><id>6385719</id><snippet>recv()</snippet></ROW><ROW><id>6385719</id><snippet>getMessage</snippet></ROW><ROW><id>6385719</id><snippet>pickle.loads(msg)</snippet></ROW><ROW><id>6385719</id><snippet>pickle.load</snippet></ROW><ROW><id>6386097</id><snippet>axes</snippet></ROW><ROW><id>6386097</id><snippet>grid(False)</snippet></ROW><ROW><id>6386097</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, polar=True)
ax.grid(False)

r = np.arange(0,1,0.001)
theta = 2*2*np.pi*r

ax.plot(theta,r)
plt.show()
</snippet></ROW><ROW><id>6386205</id><snippet>objb</snippet></ROW><ROW><id>6386205</id><snippet>objects = ObjectB.objects.filter(object_a_association__object_a_rules=objb.object_a_association)
</snippet></ROW><ROW><id>6386205</id><snippet>objects = ObjectB.objects.filter(object_a_association__object_a_rules__objectb_set=objb)
</snippet></ROW><ROW><id>6386240</id><snippet>auto_now_add</snippet></ROW><ROW><id>6386366</id><snippet>import json, requests

url = 'http://maps.googleapis.com/maps/api/directions/json'

params = dict(
    origin='Chicago,IL',
    destination='Los+Angeles,CA',
    waypoints='Joplin,MO|Oklahoma+City,OK',
    sensor='false'
)

resp = requests.get(url=url, params=params)
data = json.load(resp.content)
</snippet></ROW><ROW><id>6386630</id><snippet>from lxml import etree
def parse():
                xmlFileName = '/home/shariq/abc2.xml'
                postsList = []
                tree = etree.parse(xmlFileName)
                for post in tree.xpath("//add/doc"):
                    thispost = {}
                    postxpath = tree.getpath(post)
                    for child in post:
                        fieldName = child.get("name").strip()
                        thispost[fieldName] = child.text
                    postsList.append(thispost)
                return postsList
</snippet></ROW><ROW><id>6386630</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;add&gt;
&lt;doc&gt;
    &lt;field name="country"&gt;Serbia&lt;/field&gt;
    &lt;field name="date"&gt;20110518&lt;/field&gt;
    &lt;field name="source"&gt;Dan&lt;/field&gt;
    &lt;field name="lang"&gt;Serbian&lt;/field&gt;
    &lt;field name="category"&gt;news&lt;/field&gt;
    &lt;field name="time"&gt;1305744480&lt;/field&gt;
    &lt;field name="title"&gt;Čiste rigole prema Spužu&lt;/field&gt;
    &lt;field name="id"&gt;4641119297&lt;/field&gt;
  &lt;/doc&gt;
  &lt;doc&gt;
    &lt;field name="country"&gt;France&lt;/field&gt;
    &lt;field name="date"&gt;20110518&lt;/field&gt;
    &lt;field name="harvest_time"&gt;1305744480&lt;/field&gt;
    &lt;field name="source"&gt;Sport24.com&lt;/field&gt;
    &lt;field name="source_rank"&gt;3&lt;/field&gt;
    &lt;field name="lang"&gt;French&lt;/field&gt;
    &lt;field name="siteurl"&gt;http://www.sport24.com&lt;/field&gt;
    &lt;field name="category"&gt;news&lt;/field&gt;
    &lt;field name="time"&gt;1305744480&lt;/field&gt;
    &lt;field name="title"&gt;La plus belle pour Sharapova&lt;/field&gt;
    &lt;field name="id"&gt;4641119295&lt;/field&gt;
  &lt;/doc&gt;
&lt;/add&gt;
</snippet></ROW><ROW><id>6386973</id><snippet>class A(models.Model)
    x = ...
    b = OneToOne... 

class B(models.Model)
    y = ....

A.objects.filter(x__gt=F('b.y')*0.9)
</snippet></ROW><ROW><id>6386990</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>6386990</id><snippet>logging.fileHandler()</snippet></ROW><ROW><id>6386990</id><snippet>logging.basicConfig(filename=logname,
                            filemode='a',
                            format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                            datefmt='%H:%M:%S',
                            level=logging.DEBUG)

logging.info("Running Urban Planning")

self.logger = logging.getLogger('urbanGUI')
</snippet></ROW><ROW><id>6387815</id><snippet>
#!/usr/bin/env python

import smtplib

host = 'smtp.gmail.com'
port = '587'
user = 'user@gmail.com'
passw = 'password'

server = smtplib.SMTP()
server.connect(host, port)
server.ehlo()
server.starttls()
server.login(user, passw)

notice = "Completed"
tolist = ["user@somewhere.com"]
fromaddr = '"IT Staff" '
subject = 'Oracle server maintenance notice'
message = '''

The Oracle database server maintenance is

%s

''' % notice

hdr = "From: %s\r\nTo: %s\r\nSubject: %s\r\nX-Mailer: My-Mail\r\n\r\n" % (fromaddr, tolist, subject)
server.sendmail("it@vlsmaps.com", tolist, hdr+message)
server.quit
</snippet></ROW><ROW><id>6388053</id><snippet>*args</snippet></ROW><ROW><id>6388053</id><snippet>a</snippet></ROW><ROW><id>6388053</id><snippet>*arg</snippet></ROW><ROW><id>6388053</id><snippet>Rect(*point, *size, color)</snippet></ROW><ROW><id>6388053</id><snippet>point=()</snippet></ROW><ROW><id>6388053</id><snippet>size=(1,2,2,3)</snippet></ROW><ROW><id>6388053</id><snippet>color='red')</snippet></ROW><ROW><id>6388053</id><snippet>Rect(*point, *size, color)</snippet></ROW><ROW><id>6388053</id><snippet>*arg</snippet></ROW><ROW><id>6388053</id><snippet>Rect(*(point + size), color=color)</snippet></ROW><ROW><id>6388053</id><snippet>*args</snippet></ROW><ROW><id>6388053</id><snippet>*arg</snippet></ROW><ROW><id>6388053</id><snippet> def f(*a, *b): 
     return (sum(a), 2*sum(b))
</snippet></ROW><ROW><id>6388053</id><snippet>f(1,2,3,4)</snippet></ROW><ROW><id>6388053</id><snippet>f(a,b,x=1,y=2,*args,**kwargs)</snippet></ROW><ROW><id>6388053</id><snippet>a</snippet></ROW><ROW><id>6388053</id><snippet>b</snippet></ROW><ROW><id>6388053</id><snippet>x</snippet></ROW><ROW><id>6388053</id><snippet>y</snippet></ROW><ROW><id>6388053</id><snippet>*args</snippet></ROW><ROW><id>6388053</id><snippet>*args</snippet></ROW><ROW><id>6388053</id><snippet>**kwargs</snippet></ROW><ROW><id>6388237</id><snippet>mydict = {
    "key1": 1,
    "key2": 2,
    "key3": 3,
}

mylist = [
    (1, 'hello'),
    (2, 'world'),
]

nested = {
    a: [
        (1, 'a'),
        (2, 'b'),
    ],
    b: [
        (3, 'c'),
        (4, 'd'),
    ],
}
</snippet></ROW><ROW><id>6388237</id><snippet>data = (
    "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABG"
    "l0RVh0U29mdHdhcmUAQWRvYmUgSW1hZ2VSZWFkeXHJZTwAAAEN"
    "xBRpFYmctaKCfwrBSCrRLuL3iEW6+EEUG8XvIVjYWNgJdhFjIX"
    "rz6pKtPB5e5rmq7tmxk+hqO34e1or0yXTGrj9sXGs1Ib73efh1"
    "AAAABJRU5ErkJggg=="
)
</snippet></ROW><ROW><id>6388579</id><snippet>from django.dispatch import receiver

@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.get_or_create(user=instance)
</snippet></ROW><ROW><id>6388735</id><snippet>FunctionTestCase</snippet></ROW><ROW><id>6388735</id><snippet>TestCase</snippet></ROW><ROW><id>6389032</id><snippet>else</snippet></ROW><ROW><id>6389032</id><snippet>for</snippet></ROW><ROW><id>6389032</id><snippet>break</snippet></ROW><ROW><id>6389032</id><snippet>break</snippet></ROW><ROW><id>6389032</id><snippet>else</snippet></ROW><ROW><id>6389032</id><snippet>fileinput</snippet></ROW><ROW><id>6389032</id><snippet>break</snippet></ROW><ROW><id>6389032</id><snippet>f.close()</snippet></ROW><ROW><id>6389032</id><snippet>def walk_dir(directory, extensions=""):
    for path, dirs, files in os.walk(directory):
        for name in files:
            if name.endswith(extensions):
                yield os.path.join(path, name)

whitespace  = re.compile(r'\s+')
for line in fileinput.input(walk_dir(directory, (".log", ".txt"))):
    result = regex.search(whitespace.sub('', line))
    if result:
        template = "\nLine: {0}\nFile: {1}\nString Type: {2}\n\n"
        output = template.format(fileinput.filelineno(),
                                 fileinput.filename(),
                                 result.group())
        print output
        temp.write(output)
</snippet></ROW><ROW><id>6389626</id><snippet>C = zip(A, B)
D = sorted(C, key=lambda x: x[1])
A2, B2 = zip(*D)
</snippet></ROW><ROW><id>6389626</id><snippet>A2, B2 = zip(*sorted(zip(A,B), key=lambda x: x[1]))
</snippet></ROW><ROW><id>6389727</id><snippet>import wx

TRAY_TOOLTIP = 'System Tray Demo'
TRAY_ICON = 'icon.png'


def create_menu_item(menu, label, func):
    item = wx.MenuItem(menu, -1, label)
    menu.Bind(wx.EVT_MENU, func, id=item.GetId())
    menu.AppendItem(item)
    return item


class TaskBarIcon(wx.TaskBarIcon):
    def __init__(self):
        super(TaskBarIcon, self).__init__()
        self.set_icon(TRAY_ICON)
        self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.on_left_down)

    def CreatePopupMenu(self):
        menu = wx.Menu()
        create_menu_item(menu, 'Say Hello', self.on_hello)
        menu.AppendSeparator()
        create_menu_item(menu, 'Exit', self.on_exit)
        return menu

    def set_icon(self, path):
        icon = wx.IconFromBitmap(wx.Bitmap(path))
        self.SetIcon(icon, TRAY_TOOLTIP)

    def on_left_down(self, event):
        print 'Tray icon was left-clicked.'

    def on_hello(self, event):
        print 'Hello, world!'

    def on_exit(self, event):
        wx.CallAfter(self.Destroy)


def main():
    app = wx.PySimpleApp()
    TaskBarIcon()
    app.MainLoop()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6389846</id><snippet>import wx
import wx.lib.agw.rulerctrl as rc

class MinMax(rc.RulerCtrl):
    def __init__(self, parent, range_min, range_max, orient=wx.HORIZONTAL):
        rc.RulerCtrl.__init__(self, parent, orient)

        self.SetRange(range_min, range_max)
        self.LabelMinor(False)
        self.range_min = range_min
        self.range_max = range_max

        self.AddIndicator(wx.NewId(), range_min)
        self.AddIndicator(wx.NewId(), range_max)

        self.Bind(rc.EVT_INDICATOR_CHANGING, self.OnIndicatorChanging)

    def GetMinIndicatorValue(self):
        return self._indicators[0]._value

    def GetMaxIndicatorValue(self):
        return self._indicators[1]._value

    def SetMinIndicatorValue(self, value):
        # Value must be within range and &lt;= Max indicator value.
        if value &lt; self.range_min or value &gt; self.GetMaxIndicatorValue():
            raise ValueError('Out of bounds!')
        self._indicators[0]._value=value
        self.Refresh()

    def SetMaxIndicatorValue(self, value):
        # Value must be within range and &gt;= Min indicator value.
        if value &gt; self.range_max or value &lt; self.GetMinIndicatorValue():
            raise ValueError('Out of bounds!')
        self._indicators[1]._value=value
        self.Refresh()

    def OnIndicatorChanging(self, evt):
        # Eat the event so the user can't change values manually.
        # Do some validation here and evt.Skip() if you want to allow it.
        # Related: EVT_INDICATOR_CHANGED
        pass


class MainWindow(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title)

        self.minmax = MinMax(self, 0, 100)
        self.minmax.SetSpacing(20)
        self.minmax.SetMinIndicatorValue(30)
        self.minmax.SetMaxIndicatorValue(84)
        self.Show()

app = wx.App(redirect=False) 
frame = MainWindow(None, wx.ID_ANY, "Range Indicator") 
app.MainLoop()
</snippet></ROW><ROW><id>6390144</id><snippet>import numpy as np
import datetime as dt
import pylab as plt
import matplotlib.dates as dates

t0 = dt.date.today()
t1 = t0+dt.timedelta(days=10)

times = np.linspace(dates.date2num(t0), dates.date2num(t1), 10)
dt = times[-1]-times[0]
price =  100 - (times-times.mean())**2
dp = price.max() - price.min()
volume = np.linspace(1, 100, 10)

tgrid = np.linspace(times.min(), times.max(), 100)
pgrid = np.linspace(70, 110, 100)
tgrid, pgrid = np.meshgrid(tgrid, pgrid)
heat = np.zeros_like(tgrid)

for t,p,v in zip(times, price, volume):
    delt = (t-tgrid)**2
    delp = (p-pgrid)**2
    heat += v/( delt + delp*1.e-2 + 5.e-1 )**2

fig = plt.figure()
ax = fig.add_subplot(111)
ax.pcolormesh(tgrid, pgrid, heat, cmap='gist_heat_r')

plt.scatter(times, price, volume, marker='x')

locator = dates.DayLocator()
ax.xaxis.set_major_locator(locator)
ax.xaxis.set_major_formatter(dates.AutoDateFormatter(locator))
fig.autofmt_xdate()

plt.show()
</snippet></ROW><ROW><id>6390524</id><snippet>content="text/html"</snippet></ROW><ROW><id>6390524</id><snippet># debug_toolbar settings
if DEBUG:
    INTERNAL_IPS = ('127.0.0.1',)
    MIDDLEWARE_CLASSES += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )

    INSTALLED_APPS += (
        'debug_toolbar',
    )

    DEBUG_TOOLBAR_PANELS = (
        'debug_toolbar.panels.version.VersionDebugPanel',
        'debug_toolbar.panels.timer.TimerDebugPanel',
        'debug_toolbar.panels.settings_vars.SettingsVarsDebugPanel',
        'debug_toolbar.panels.headers.HeaderDebugPanel',
        #'debug_toolbar.panels.profiling.ProfilingDebugPanel',
        'debug_toolbar.panels.request_vars.RequestVarsDebugPanel',
        'debug_toolbar.panels.sql.SQLDebugPanel',
        'debug_toolbar.panels.template.TemplateDebugPanel',
        'debug_toolbar.panels.cache.CacheDebugPanel',
        'debug_toolbar.panels.signals.SignalDebugPanel',
        'debug_toolbar.panels.logger.LoggingPanel',
    )

    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }
</snippet></ROW><ROW><id>6390584</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def xticklabels_example():
    fig = plt.figure() 

    x = np.arange(20)
    y1 = np.cos(x)
    y2 = (x**2)
    y3 = (x**3)
    yn = (y1,y2,y3)
    COLORS = ('b','g','k')

    for i,y in enumerate(yn):
        ax = fig.add_subplot(len(yn),1,i+1)

        ax.plot(x, y, ls='solid', color=COLORS[i]) 

        if i != len(yn) - 1:
            # all but last 
            ax.set_xticklabels( () )
        else:
            for tick in ax.xaxis.get_major_ticks():
                tick.label.set_fontsize(14) 
                # specify integer or one of preset strings, e.g.
                #tick.label.set_fontsize('x-small') 
                tick.label.set_rotation('vertical')

    fig.suptitle('Matplotlib xticklabels Example')
    plt.show()

if __name__ == '__main__':
    xticklabels_example()
</snippet></ROW><ROW><id>6390653</id><snippet>warnings</snippet></ROW><ROW><id>6390653</id><snippet>warnings</snippet></ROW><ROW><id>6390653</id><snippet>-W</snippet></ROW><ROW><id>6390653</id><snippet>warnings</snippet></ROW><ROW><id>6390653</id><snippet>numpy</snippet></ROW><ROW><id>6390653</id><snippet>numpy.seterr()</snippet></ROW><ROW><id>6390674</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; comp_re = re.compile('this is (\d+) the string (\d+) that, i need (\d+)')
&gt;&gt;&gt; s = """random string
this is 34 the string 3 that, i need 234
random string
random string
random string
random string

random string
this is 1 the string 34 that, i need 22
random string
random string
random string
random string

random string
this is 35 the string 55 that, i need 12
random string
random string
random string
random string
"""
&gt;&gt;&gt; comp_re.findall(s)
[('34', '3', '234'), ('1', '34', '22'), ('35', '55', '12')]
</snippet></ROW><ROW><id>6390689</id><snippet>  SocketServer.ThreadingTCPServer( ( HOST, PORT ), MCRequestHandler )
</snippet></ROW><ROW><id>6390689</id><snippet>class MyRequestHandlerFactory(object):

  def __init__(self, param1, param2): 
            self.param1 = param1
            self.param2 = param2

  def __call__(self):
            handler = MCRequestHandler()
            handler.param1 = param1
            handler.param2 = param2
</snippet></ROW><ROW><id>6390689</id><snippet>  factory = MyRequestHandlerFactory("x", "y")
  SocketServer.ThreadingTCPServer( ( HOST, PORT ), factory)
</snippet></ROW><ROW><id>6390817</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>6390817</id><snippet>shell=True</snippet></ROW><ROW><id>6390817</id><snippet>SW_HIDE</snippet></ROW><ROW><id>6390817</id><snippet>STARTUPINFO.wShowWindow</snippet></ROW><ROW><id>6390817</id><snippet>subprocess.check_call(["ping", "google.com"], shell=True)
</snippet></ROW><ROW><id>6390917</id><snippet>getattr</snippet></ROW><ROW><id>6390917</id><snippet>__name__</snippet></ROW><ROW><id>6390917</id><snippet>__class__</snippet></ROW><ROW><id>6390917</id><snippet>__module__</snippet></ROW><ROW><id>6391003</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>6391003</id><snippet>root/pages</snippet></ROW><ROW><id>6391003</id><snippet>extends "base.html"</snippet></ROW><ROW><id>6391433</id><snippet>def do_GET(self):
    self.send_response(200)
    self.send_header("Content-type", "text/html")
    self.send_header("Content-length", len(DUMMY_RESPONSE))
    self.end_headers()
    self.wfile.write(DUMMY_RESPONSE)
</snippet></ROW><ROW><id>6391571</id><snippet>away_players</snippet></ROW><ROW><id>6391571</id><snippet>away_players</snippet></ROW><ROW><id>6391571</id><snippet>formfield_for_manytomany</snippet></ROW><ROW><id>6391571</id><snippet>add</snippet></ROW><ROW><id>6391571</id><snippet>class MyForm(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(MyForm, self).__init__(*args, **kwargs)
        # make sure we're editing a saved model
        if self.instance.id:
            self.fields['home_players'].queryset = Player.objects.filter(team=self.instance.home)
            self.fields['away_players'].queryset = Player.objects.filter(team=self.instance.away)

    class Meta:
        model = Fixture


class MyAdmin(admin.ModelAdmin):
    form = MyForm
</snippet></ROW><ROW><id>6391908</id><snippet>&gt;&gt;&gt; re.match(r"\D*(\d+)\D+([\d\.]+)\D+([\d\.]+)\D+(\d+)\D+(\d+)\D+(\d+)\D+(\d+)", 
             "   123;  Coord   ;  19.1335;   3.5010;  1; 3; 8; 4").groups()
('123', '19.1335', '3.5010', '1', '3', '8', '4')
</snippet></ROW><ROW><id>6392595</id><snippet>def matryoshka(cls):

    # get types of classes
    class classtypes:
        pass
    classtypes = (type, type(classtypes))

    # get names of all public names in outer class
    directory = [n for n in dir(cls) if not n.startswith("_")]

    # get names of all non-callable attributes of outer class
    attributes = [n for n in directory if not callable(getattr(cls, n))]

    # get names of all inner classes
    innerclasses = [n for n in directory if isinstance(getattr(cls, n), classtypes)]

    # copy attributes from outer to inner classes (don't overwrite)
    for c in innerclasses:
        c = getattr(cls, c)
        for a in attributes:
            if not hasattr(c, a):
                setattr(c, a, getattr(cls, a))

    return cls
</snippet></ROW><ROW><id>6392595</id><snippet>@matryoshka
class outer(object):

    answer = 42

    class inner(object):

        def __call__(self):
            print self.answer

outer.inner()()   # 42
</snippet></ROW><ROW><id>6392697</id><snippet>document</snippet></ROW><ROW><id>6392697</id><snippet>file</snippet></ROW><ROW><id>6392697</id><snippet>cleaned_data</snippet></ROW><ROW><id>6392697</id><snippet>document = form.cleaned_data['document']
</snippet></ROW><ROW><id>6392697</id><snippet>form.cleaned_data['document']</snippet></ROW><ROW><id>6392697</id><snippet>request.FILES['document']</snippet></ROW><ROW><id>6392697</id><snippet>UploadedFile</snippet></ROW><ROW><id>6392768</id><snippet>@</snippet></ROW><ROW><id>6393044</id><snippet>&gt;&gt;&gt; connections = api.Getconnections() # connections is a list of Profile instances
&gt;&gt;&gt; connections
&gt;&gt;&gt; [&lt;linkedin.linkedin.Profile object at 0x1a3d510&gt;]
&gt;&gt;&gt; connections[0].id
&gt;&gt;&gt; 'js6vz2-D6x'
&gt;&gt;&gt; result = api.SendMessage("This is a subject", "This is the body", [connections[0].id, connections[1].id, connections[2].id])
</snippet></ROW><ROW><id>6393186</id><snippet>headers = {'User-Agent': user_agent}

data = urllib.urlencode(values)
req = urllib2.Request(url, data, headers)
response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>6393221</id><snippet>self</snippet></ROW><ROW><id>6393605</id><snippet>"Date"</snippet></ROW><ROW><id>6393605</id><snippet>filter</snippet></ROW><ROW><id>6393605</id><snippet>dates = ['2011-06-18', 'Date', '2010-01-13', '1997-12-01', '2007-08-11']
dates_filtered = filter(lambda d: d != 'Date', dates)
</snippet></ROW><ROW><id>6393605</id><snippet>dates_filtered = [d for d in dates if d != 'Date']
</snippet></ROW><ROW><id>6393605</id><snippet>date</snippet></ROW><ROW><id>6393605</id><snippet>from datetime import datetime
date_objects = [datetime.strptime(x,'%Y-%m-%d').date() for x in dates_filtered]
</snippet></ROW><ROW><id>6393605</id><snippet>sort</snippet></ROW><ROW><id>6393605</id><snippet>date_objects.sort()
</snippet></ROW><ROW><id>6393605</id><snippet>print(date_objects[-2:]
</snippet></ROW><ROW><id>6393605</id><snippet>from datetime import datetime
dates = ['2011-06-18', 'Date', '2010-01-13', '1997-12-01', '2007-08-11']
my_dates = [datetime.strptime(d, '%Y-%m-%d').date()
            for d in dates
            if d != 'Date']
my_dates.sort()
</snippet></ROW><ROW><id>6393629</id><snippet>&gt;&gt;&gt; "Some sort of general menu^a_sub_menu_title^^pagNumber".split("^")
['Some sort of general menu', 'a_sub_menu_title', '', 'pagNumber']
</snippet></ROW><ROW><id>6393655</id><snippet>import</snippet></ROW><ROW><id>6393655</id><snippet>import daemon
with daemon.DaemonContext():
    import pika
    # any additional pika code here, maybe the creation of connection?
    connection.ioloop.start()
</snippet></ROW><ROW><id>6393731</id><snippet>XML = """&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;!DOCTYPE test SYSTEM "external.dtd" &gt;
&lt;test summary='step: &amp;foo; &amp;bar;'&gt;Entity: ¬&lt;/test&gt;
"""
</snippet></ROW><ROW><id>6393731</id><snippet>&lt;!ENTITY foo "bar"&gt;
&lt;!ENTITY bar "foo"&gt;
</snippet></ROW><ROW><id>6393731</id><snippet>TestHandler.startElement(), test : step: bar foo ()
TestHandler.skippedEntity: not
</snippet></ROW><ROW><id>6393912</id><snippet>for i in xrange(inputpdf.getNumPages()):
</snippet></ROW><ROW><id>6394994</id><snippet>package</snippet></ROW><ROW><id>6394994</id><snippet>parser = argparse.ArgumentParser()

command_parser = subparsers.add_parser('command')
command_parser.add_argument('--step', choices=['prepare', 'configure', 'compile', 'stage', 'package'])

...other command parsers

parsed_args = parser.parse_args()

if parsed_args.step is None:
    do all the steps...
</snippet></ROW><ROW><id>6395108</id><snippet>RequestHandler.handle</snippet></ROW><ROW><id>6395227</id><snippet>file:///usr/bin/</snippet></ROW><ROW><id>6395227</id><snippet>/usr/bin/</snippet></ROW><ROW><id>6395336</id><snippet>from django.forms import ModelForm

class ArticleForm(ModelForm):
    class Meta:
        model = Article
</snippet></ROW><ROW><id>6395577</id><snippet>sealed trait Tree[+A]
case class Node[+A](children: Tree[A]*) extends Tree[A]
case class Leaf[+A](value: A) extends Tree[A]
</snippet></ROW><ROW><id>6395577</id><snippet>sealed trait Tree[+A] {
  def map[B](f: A =&gt; B): Tree[B]
}
case class Node[+A](children: Tree[A]*) extends Tree[A] {
  def map[B](f : A =&gt; B) = Node(children.map(_.map(f)): _*)
}
case class Leaf[+A](value: A) extends Tree[A] {
  def map[B](f: A =&gt; B) = Leaf(f(value))
}
</snippet></ROW><ROW><id>6395577</id><snippet>val input = Node(Leaf(1), Leaf(2), Node(Leaf(5), Leaf(6)), Leaf(3))
</snippet></ROW><ROW><id>6395577</id><snippet>input.map(_ + 1)</snippet></ROW><ROW><id>6395577</id><snippet>override def toString = "Node(" + children.mkString(", ") + ")"</snippet></ROW><ROW><id>6395577</id><snippet>def map[B](f: A =&gt; B): Tree[B] = this match {
  case Node(children @ _*) =&gt; Node(children.map(_.map(f)): _*)
  case Leaf(v) =&gt; Leaf(f(v))
}
</snippet></ROW><ROW><id>6395577</id><snippet>def recurse(x: Any) : Any = x match {
  case list : List[_] =&gt; list.map(recurse(_))
  case value : Int =&gt; value + 1
}
</snippet></ROW><ROW><id>6395577</id><snippet>case Elem(content: Any)</snippet></ROW><ROW><id>6395729</id><snippet>min</snippet></ROW><ROW><id>6395729</id><snippet>minimum = min(e['dist'] for e in people)
# Don't call the variable min, that would overshadow the built-in min function
print ('minimum is ' + str(minimum))
</snippet></ROW><ROW><id>6396050</id><snippet>  result = urlfetch.fetch(url)
</snippet></ROW><ROW><id>6396050</id><snippet>  result = urlfetch(url,deadline=2,method=urlfetch.POST)
</snippet></ROW><ROW><id>6396094</id><snippet>python2.5 manage.py runserver
</snippet></ROW><ROW><id>6396117</id><snippet>import psyco
psyco.full()
</snippet></ROW><ROW><id>6396117</id><snippet>from pygame.locals import *
flags = FULLSCREEN | DOUBLEBUF
screen = pygame.display.set_mode(resolution, flags, bpp)
</snippet></ROW><ROW><id>6396117</id><snippet>screen.set_alpha(None)
</snippet></ROW><ROW><id>6396117</id><snippet>events = pygame.events.get()
for event in events:
    # deal with events
pygame.event.pump()
my_sprites.do_stuff_every_loop()
rects = my_sprites.draw()
activerects = rects + oldrects
activerects = filter(bool, activerects)
pygame.display.update(activerects)
oldrects = rects[:]
for rect in rects:
    screen.blit(bgimg, rect, rect)
</snippet></ROW><ROW><id>6396117</id><snippet>pygame.event.set_allowed([QUIT, KEYDOWN, KEYUP])
</snippet></ROW><ROW><id>6396425</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; import json
&gt;&gt;&gt; url='http://query.yahooapis.com/v1/public/yql?q=SELECT%20*%20FROM%20yahoo.finance.options%20WHERE%20symbol%3D\"goog\"%20AND%20expiration%3D\"2011-08\"&amp;format=json&amp;env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&amp;callback='
&gt;&gt;&gt; req = urllib2.Request(url)
&gt;&gt;&gt; response = urllib2.urlopen(req)
&gt;&gt;&gt; result = json.loads(response.read())
</snippet></ROW><ROW><id>6396425</id><snippet>&gt;&gt;&gt; result['query']['results']['optionsChain']['option'][0]
{u'strikePrice': u'400', u'lastPrice': u'110.10', u'vol': u'1', u'type': u'C', u'symbol': u'GOOG110820C00400000', u'openInt': u'9', u'ask': u'90.5', u'changeDir': None, u'bid': u'87', u'change': u'0'}
&gt;&gt;&gt; result['query']['results']['optionsChain']['option'][10]
{u'strikePrice': u'490', u'lastPrice': u'21.20', u'vol': u'350', u'type': u'C', u'symbol': u'GOOG110820C00490000', u'openInt': u'56', u'ask': u'21.3', u'changeDir': u'Down', u'bid': u'20.8', u'change': u'-6.9'}
</snippet></ROW><ROW><id>6396532</id><snippet>       image = ContentFile(b64decode(part.get_payload()))
       im = Image.open(image)
       tempfile = im.rotate(270)
       tempfile_io =StringIO.StringIO()
       tempfile.save(tempfile_io, format='JPEG')
       image_file = InMemoryUploadedFile(tempfile_io, None, 'rotate.jpg','image/jpeg',tempfile_io.len, None)
       img = Photo(user=user)
       img.img.save('rotate.jpg', image_file)
       img.save()
</snippet></ROW><ROW><id>6396717</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>6396717</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>6396730</id><snippet>simplejson</snippet></ROW><ROW><id>6396730</id><snippet>json</snippet></ROW><ROW><id>6396730</id><snippet>main</snippet></ROW><ROW><id>6396730</id><snippet>QApplication</snippet></ROW><ROW><id>6396730</id><snippet>QWebPage</snippet></ROW><ROW><id>6396730</id><snippet>QApplication.exec_()</snippet></ROW><ROW><id>6396730</id><snippet>QThread</snippet></ROW><ROW><id>6396743</id><snippet>map()</snippet></ROW><ROW><id>6396743</id><snippet>float()</snippet></ROW><ROW><id>6396743</id><snippet>b = map(float, a)
</snippet></ROW><ROW><id>6396826</id><snippet>dirs</snippet></ROW><ROW><id>6396826</id><snippet>[1, 2, 3, 4, 5, 6...]
 ^
</snippet></ROW><ROW><id>6396826</id><snippet>1</snippet></ROW><ROW><id>6396826</id><snippet>[2, 3, 4, 5, 6...]
    ^
</snippet></ROW><ROW><id>6396826</id><snippet>1</snippet></ROW><ROW><id>6396826</id><snippet>3</snippet></ROW><ROW><id>6396826</id><snippet>2</snippet></ROW><ROW><id>6396826</id><snippet>[2, 4, 5, 6...]
</snippet></ROW><ROW><id>6396826</id><snippet>3</snippet></ROW><ROW><id>6396978</id><snippet>:set completefunc?
</snippet></ROW><ROW><id>6396978</id><snippet>completefunc=
</snippet></ROW><ROW><id>6396978</id><snippet>:set completefunc=pythoncomplete#Complete
</snippet></ROW><ROW><id>6396978</id><snippet>autocmd FileType python set completefunc=pythoncomplete#Complete
</snippet></ROW><ROW><id>6396978</id><snippet>inoremap &lt;Tab&gt; &lt;C-x&gt;&lt;C-o&gt;
</snippet></ROW><ROW><id>6396978</id><snippet>:help ins-completion
</snippet></ROW><ROW><id>6397124</id><snippet>import re
out=Data #web site html page ..
title_regex = "/&lt;title&gt;(.+)&lt;\/title&gt;/i" #no need for this .. un used 
if m is not None:  #  NEW  &lt;----------------
   m = re.search("&lt;title&gt;(.+)&lt;\/title&gt;", out)
print "title",m.group(1)
#for pics i have tried this but it give me error ..
pics = re.match(r"&lt;img[^&gt;]*src=[\"|\'](.*)[\"|\']", out)
if pics is not None: # NEW &lt;----------------
   print "grop",pics.group(1)
</snippet></ROW><ROW><id>6397124</id><snippet>for filename in pics.groups():
    print filename
</snippet></ROW><ROW><id>6397359</id><snippet>dict</snippet></ROW><ROW><id>6397359</id><snippet>object</snippet></ROW><ROW><id>6397359</id><snippet>class Population(dict):
    def __getattr__(self, key):
        return self[key]
    def __setattr__(self, key, value):
        self[key] = value
</snippet></ROW><ROW><id>6397359</id><snippet>foo.bar</snippet></ROW><ROW><id>6397359</id><snippet>dict</snippet></ROW><ROW><id>6397359</id><snippet>getattr</snippet></ROW><ROW><id>6397359</id><snippet>setattr</snippet></ROW><ROW><id>6397359</id><snippet>__init__</snippet></ROW><ROW><id>6397359</id><snippet>def __init__(self, starting=0, birthrate=100, imrate=10, emrate=10, deathrate=100):
     self.update(n=starting, b=birthrate, i=imrate, e=emrate, d=deathrate)
</snippet></ROW><ROW><id>6397496</id><snippet>_</snippet></ROW><ROW><id>6397496</id><snippet>for _ in range(10):
    print('Hello')
</snippet></ROW><ROW><id>6397496</id><snippet>gettext</snippet></ROW><ROW><id>6397948</id><snippet>&gt;&gt;&gt; # Show the best hit's stored fields
&gt;&gt;&gt; results[0]
{"title": u"Hello World in Python", "path": u"/a/b/c"}
&gt;&gt;&gt; results[0:2]
[{"title": u"Hello World in Python", "path": u"/a/b/c"}, {"title": u"Foo", "path": u"/bar"}]
</snippet></ROW><ROW><id>6397948</id><snippet>import json
def results2json(results):
   return json.dumps([r for r in results])
</snippet></ROW><ROW><id>6398523</id><snippet>XMLGenerator</snippet></ROW><ROW><id>6398523</id><snippet>write()</snippet></ROW><ROW><id>6398523</id><snippet>import sys
from xml.sax.saxutils import XMLGenerator

class MyXMLGenerator(XMLGenerator):
    def __init__(self, out=sys.stdout, encoding="UTF-8"):
        XMLGenerator.__init__(self, out, encoding)
        self.out = out

    def write (self,s):
        self.out.write(s)

def writexml(out):
    xmlwriter = MyXMLGenerator(out)
    xmlwriter.startDocument()
    xmlwriter.write("&lt;!DOCTYPE test SYSTEM 'test.dtd'&gt;\n")
    xmlwriter.startElement('test', {"a": "1"})
    xmlwriter.characters('abc123')
    xmlwriter.endElement('test')
    xmlwriter.endDocument()

if __name__ == '__main__':
    writexml(out=open("out.xml", "w"))
</snippet></ROW><ROW><id>6398523</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE test SYSTEM 'test.dtd'&gt;
&lt;test a="1"&gt;abc123&lt;/test&gt;
</snippet></ROW><ROW><id>6398561</id><snippet>hmtl = """&lt;html a='1' b="2"&gt;"""
</snippet></ROW><ROW><id>6399065</id><snippet>r'\b'</snippet></ROW><ROW><id>6399065</id><snippet>&gt;&gt;&gt; re.split(r'\b', 'foo-BAR_baz')
['foo-BAR_baz']
&gt;&gt;&gt; re.split(r'\W+', 'foo-BAR_baz')
['foo', 'BAR_baz']
&gt;&gt;&gt; re.split(r'[\W_]+', 'foo-BAR_baz')
['foo', 'BAR', 'baz']
</snippet></ROW><ROW><id>6399065</id><snippet>flags=re.UNICODE</snippet></ROW><ROW><id>6399065</id><snippet>\b</snippet></ROW><ROW><id>6399065</id><snippet>\W</snippet></ROW><ROW><id>6399065</id><snippet>str()</snippet></ROW><ROW><id>6399065</id><snippet>byte_string.decode('utf8').isupper()</snippet></ROW><ROW><id>6399065</id><snippet>byte_string.decode('ascii', 'ignore').isupper()</snippet></ROW><ROW><id>6399065</id><snippet># coding: ascii
import unicodedata

tests = (
    (u'\u041c\u041e\u0421\u041a\u0412\u0410', True), # capital of Russia, all uppercase
    (u'R\xc9SUM\xc9', True), # RESUME with accents
    (u'R\xe9sum\xe9', False), # Resume with accents
    (u'R\xe9SUM\xe9', False), # ReSUMe with accents
    )

for ucode, expected in tests:
    print
    print 'unicode', repr(ucode)
    for uc in ucode:
        print 'U+%04X %s' % (ord(uc), unicodedata.name(uc))
    u8 = ucode.encode('utf8')
    print 'utf8', repr(u8)
    actual1 = u8.decode('utf8').isupper() # the natural way of doing it
    actual2 = u8.decode('ascii', 'ignore').isupper() # @jathanism
    print expected, actual1, actual2
</snippet></ROW><ROW><id>6399065</id><snippet>unicode u'\u041c\u041e\u0421\u041a\u0412\u0410'
U+041C CYRILLIC CAPITAL LETTER EM
U+041E CYRILLIC CAPITAL LETTER O
U+0421 CYRILLIC CAPITAL LETTER ES
U+041A CYRILLIC CAPITAL LETTER KA
U+0412 CYRILLIC CAPITAL LETTER VE
U+0410 CYRILLIC CAPITAL LETTER A
utf8 '\xd0\x9c\xd0\x9e\xd0\xa1\xd0\x9a\xd0\x92\xd0\x90'
True True False

unicode u'R\xc9SUM\xc9'
U+0052 LATIN CAPITAL LETTER R
U+00C9 LATIN CAPITAL LETTER E WITH ACUTE
U+0053 LATIN CAPITAL LETTER S
U+0055 LATIN CAPITAL LETTER U
U+004D LATIN CAPITAL LETTER M
U+00C9 LATIN CAPITAL LETTER E WITH ACUTE
utf8 'R\xc3\x89SUM\xc3\x89'
True True True

unicode u'R\xe9sum\xe9'
U+0052 LATIN CAPITAL LETTER R
U+00E9 LATIN SMALL LETTER E WITH ACUTE
U+0073 LATIN SMALL LETTER S
U+0075 LATIN SMALL LETTER U
U+006D LATIN SMALL LETTER M
U+00E9 LATIN SMALL LETTER E WITH ACUTE
utf8 'R\xc3\xa9sum\xc3\xa9'
False False False

unicode u'R\xe9SUM\xe9'
U+0052 LATIN CAPITAL LETTER R
U+00E9 LATIN SMALL LETTER E WITH ACUTE
U+0053 LATIN CAPITAL LETTER S
U+0055 LATIN CAPITAL LETTER U
U+004D LATIN CAPITAL LETTER M
U+00E9 LATIN SMALL LETTER E WITH ACUTE
utf8 'R\xc3\xa9SUM\xc3\xa9'
False False True
</snippet></ROW><ROW><id>6399510</id><snippet>    for line in infile.readlines():
    ...
    ...
        for i in range(1,len(infile.readlines())):
</snippet></ROW><ROW><id>6399510</id><snippet>readlines</snippet></ROW><ROW><id>6399510</id><snippet>len(infile.readlines()) == 0</snippet></ROW><ROW><id>6399510</id><snippet>file_len * (file_len - 1) + 1</snippet></ROW><ROW><id>6399510</id><snippet>with open('txtfile.txt', 'r') as infile:    # (with automatically closes infile)
    in_lines = infile.readlines()
in_len = len(in_lines)

texfile = open('outputtex.tex', 'w')
for line in in_lines:
    linesplit = line.split('^')
    for i in range(1, in_len):
        texfile.write('\section{}\n'.format(linesplit[1])) 
        texfile.write('\\begin{figure*}[h!]\n')
        texfile.write('\centering\n')
        texfile.write('\includegraphics[scale=0.95]{pg_000%i.pdf}\n' %i)
        texfile.write('\end{figure*}\n')
        texfile.write('\\newpage\n')
texfile.write('\end{document}')
texfile.close()
</snippet></ROW><ROW><id>6399510</id><snippet>infile = open('txtfile.txt', 'r')
texfile = open('outputtex.tex', 'w')
for line_number, line in enumerate(infile):
    linesplit = line.split('^')
    texfile.write('\section{{{0}}}\n'.format(linesplit[1])) 
    texfile.write('\\begin{figure*}[h!]\n')
    texfile.write('\centering\n')
    texfile.write('\includegraphics[scale=0.95]{pg_000%i.pdf}\n' % line_number)
    texfile.write('\end{figure*}\n')
    texfile.write('\\newpage\n')
texfile.write('\end{document}')
texfile.close()
infile.close()
</snippet></ROW><ROW><id>6399560</id><snippet>template.xsl</snippet></ROW><ROW><id>6399560</id><snippet>&lt;xsl:output/&gt;</snippet></ROW><ROW><id>6399560</id><snippet>method</snippet></ROW><ROW><id>6399560</id><snippet>html</snippet></ROW><ROW><id>6399560</id><snippet>/</snippet></ROW><ROW><id>6399560</id><snippet>xml</snippet></ROW><ROW><id>6399560</id><snippet>xhtml</snippet></ROW><ROW><id>6399829</id><snippet>bucket.get_all_versions( prefix='yourkeynamehere' )
</snippet></ROW><ROW><id>6400140</id><snippet>render_to_response</snippet></ROW><ROW><id>6400140</id><snippet>python manage.py shell</snippet></ROW><ROW><id>6400327</id><snippet>int()</snippet></ROW><ROW><id>6400327</id><snippet>'19 02:39:09'</snippet></ROW><ROW><id>6400327</id><snippet>int()</snippet></ROW><ROW><id>6400327</id><snippet>&gt;&gt;&gt; int('19 02:39:09')
Traceback (most recent call last):
  File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;
    int('19 02:39:09')
ValueError: invalid literal for int() with base 10: '19 02:39:09'

&gt;&gt;&gt; int(':')
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    int(':')
ValueError: invalid literal for int() with base 10: ':'

&gt;&gt;&gt; int('19 02 39 09')
Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    int('19 02 39 09')
ValueError: invalid literal for int() with base 10: '19 02 39 09'

&gt;&gt;&gt; int('19023909')
19023909
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6400327</id><snippet>replace()</snippet></ROW><ROW><id>6400327</id><snippet>&gt;&gt;&gt; date='19 02:39:09'
&gt;&gt;&gt; date=date.replace(" ","")
&gt;&gt;&gt; date
'1902:39:09'
&gt;&gt;&gt; date=date.replace(":","")
&gt;&gt;&gt; date
'19023909'
&gt;&gt;&gt; int(date)  ## It works now!
19023909
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6400466</id><snippet>wxString::FromUTF8()</snippet></ROW><ROW><id>6400466</id><snippet>wxString.ToUTF8()</snippet></ROW><ROW><id>6400466</id><snippet># Import the parts of wxString we want to use.
cdef extern from "wx/string.h":
    cdef cppclass wxString:
        char* ToUTF8()


# Import useful static functions from the class.
cdef extern from "wx/string.h" namespace "wxString":
   wxString FromUTF8(char*)


# Function to convert from Python string to wxString. This can be given either
# a unicode string, or a UTF-8 encoded byte string. Results with other encodings
# are undefined and will probably lead to errors.
cdef inline wxString from_python(python_string):
    # If it is a Python unicode string, encode it to a UTF-8 byte string as this
    # is how we will pass it to wxString.
    if isinstance(python_string, unicode):
        byte_string = python_string.encode('UTF-8')

    # It is already a byte string, and we have no choice but to assume its valid
    # UTF-8 as theres no (sane/efficient) way to detect the encoding.
    else:
        byte_string = python_string

    # Turn the byte string (which is still a Python object) into a C-level char*
    # string.
    cdef char* c_string = byte_string

    # Use the static wxString::FromUTF8() function to get us a wxString.
    return FromUTF8(c_string)


# Function to convert a wxString to a UTF-8 encoded Python byte string.
cdef inline object to_python_utf8(wxString wx_string):
    return wx_string.ToUTF8()


# Function to convert a wxString to a Python unicode string.
cdef inline object to_python_unicode(wxString wx_string):
    # Since the wxString.ToUTF8() method returns a const char*, we'd have to try
    # and cast it if we wanted to do it all in here. I've tried this and can't
    # seem to get it to work. But calling the to_python_utf8() function
    # means Cython handles the conversions and it all just works. Plus, since
    # they are defined as inline functions this may well be simplified down when
    # compiled.
    byte_string = to_python_utf8(wx_string)

    # Decode it to a unicode string and we're done.
    return byte_string.decode('UTF-8')
</snippet></ROW><ROW><id>6400466</id><snippet>wx/string.pxd</snippet></ROW><ROW><id>6400466</id><snippet>wx/__init__.pdx</snippet></ROW><ROW><id>6400466</id><snippet>cimport</snippet></ROW><ROW><id>6400466</id><snippet>cimport wx.string

wx_string = wx.string.from_python(python_string)
python_string = wx.string.to_python_unicode(wx_string)
</snippet></ROW><ROW><id>6400499</id><snippet>multiprocessing</snippet></ROW><ROW><id>6400499</id><snippet>target</snippet></ROW><ROW><id>6400499</id><snippet>&gt;&gt;&gt; import multiprocessing
&gt;&gt;&gt; d = {'a':5, 'b':6}
&gt;&gt;&gt; def alter_d():
...     d['a'] = 7
...     print d
... 
&gt;&gt;&gt; p = multiprocessing(target=alter_d)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'module' object is not callable
&gt;&gt;&gt; p = multiprocessing.Process(target=alter_d)
&gt;&gt;&gt; p.start()
&gt;&gt;&gt; {'a': 7, 'b': 6}

&gt;&gt;&gt; d
{'a': 5, 'b': 6}
</snippet></ROW><ROW><id>6400499</id><snippet>d</snippet></ROW><ROW><id>6400499</id><snippet>d</snippet></ROW><ROW><id>6400499</id><snippet>logo = threading.Process(target=showlogo, args=())</snippet></ROW><ROW><id>6400499</id><snippet>screen</snippet></ROW><ROW><id>6400499</id><snippet>screen.blit(data.pictures.fc, (0,0))</snippet></ROW><ROW><id>6400499</id><snippet>join</snippet></ROW><ROW><id>6400562</id><snippet>from collections import Counter</snippet></ROW><ROW><id>6400562</id><snippet>import collections</snippet></ROW><ROW><id>6400562</id><snippet>import</snippet></ROW><ROW><id>6400659</id><snippet>date</snippet></ROW><ROW><id>6400659</id><snippet>date</snippet></ROW><ROW><id>6400659</id><snippet>__hash__</snippet></ROW><ROW><id>6400659</id><snippet>__str__</snippet></ROW><ROW><id>6400659</id><snippet>date</snippet></ROW><ROW><id>6400659</id><snippet>histodict[str(start)]['Open']</snippet></ROW><ROW><id>6400659</id><snippet>__str__</snippet></ROW><ROW><id>6401264</id><snippet>fractions</snippet></ROW><ROW><id>6401264</id><snippet>Fraction</snippet></ROW><ROW><id>6401264</id><snippet>int</snippet></ROW><ROW><id>6401264</id><snippet>from fractions import Fraction  
var1 = input('Please enter number:')  
var1 = Fraction(var1)  
expo = Fraction('1/2')           //put your fractional exponent here  
var2 = var1**expo  
print var2
</snippet></ROW><ROW><id>6401334</id><snippet>a &gt;</snippet></ROW><ROW><id>6401334</id><snippet>re.match</snippet></ROW><ROW><id>6401334</id><snippet>re.search</snippet></ROW><ROW><id>6401334</id><snippet>text = '&lt;a &gt; b'
match = re.search('&lt;?[a-zA-Z0-9_ ]+&gt;',text)

if ((match) and (match.group(0)[0] != '&lt;')):
  # Match found
</snippet></ROW><ROW><id>6401389</id><snippet>__nonzero__</snippet></ROW><ROW><id>6401389</id><snippet>with res1 or res2 or res3 or res4:
   ...
</snippet></ROW><ROW><id>6401389</id><snippet>class sither:
   @classmethod
   def __enter__(cls): pass
   @classmethod
   def __exit__(cls,*args): pass

...

with res1 or wither, res2 or wither:
   ...
</snippet></ROW><ROW><id>6401389</id><snippet>with res1 if res1enabled else wither, res2 if res2enabled else wither:
   ..
</snippet></ROW><ROW><id>6401389</id><snippet>with res1, res2, res3:
   ...
</snippet></ROW><ROW><id>6401389</id><snippet>with</snippet></ROW><ROW><id>6401525</id><snippet>"Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\DB.accdb;"</snippet></ROW><ROW><id>6401538</id><snippet>SaveImageHandler</snippet></ROW><ROW><id>6401538</id><snippet>Image</snippet></ROW><ROW><id>6401538</id><snippet>LoadImageHandler</snippet></ROW><ROW><id>6401538</id><snippet>class SaveImageHandler(webapp.RequestHandler):
  def post(self, uid):
    image = Image.all().filter("uid =", uid).get()
    if not image:
        image = model.Image(uid=uid)
    image.data = self.request.POST.get('imgdata').file.read()
    image.put()
</snippet></ROW><ROW><id>6401538</id><snippet>uid</snippet></ROW><ROW><id>6401538</id><snippet>key_names</snippet></ROW><ROW><id>6401681</id><snippet>def memoized(f):
    res = []
    def resf():
       if len(res) == 0
           res.append(f())
       return res[0]
    return resf
</snippet></ROW><ROW><id>6401681</id><snippet>@memoized
def f():
   # expensive calculation here ...
   return calculated_value
</snippet></ROW><ROW><id>6401681</id><snippet>memoized</snippet></ROW><ROW><id>6401681</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>6401735</id><snippet>BROKER_BACKEND</snippet></ROW><ROW><id>6401735</id><snippet>import djcelery
djcelery.setup_loader()

CELERY_RESULT_BACKEND = 'database'

BROKER_BACKEND = 'redis'
BROKER_HOST = 'localhost'
BROKER_PORT = 6379
BROKER_VHOST = '1'
</snippet></ROW><ROW><id>6402057</id><snippet>from django.conf import settings
from myapp import myapp_defaults

settings.configure(default_settings=myapp_defaults, DEBUG=True)
</snippet></ROW><ROW><id>6402083</id><snippet>e</snippet></ROW><ROW><id>6402083</id><snippet>headers</snippet></ROW><ROW><id>6402083</id><snippet>hdrs</snippet></ROW><ROW><id>6402121</id><snippet>TYPES = [(int, 1), (Decimal, 2),(date, 3), (str, 4)]
class MyTag(models.Model):
    name = models.CharField(max_length=50)
    data_type = models.IntegetField(choices=TYPES)
    value = models.CharField(max_length=100)

    def set_the_value(self, value):
        choices = dict(TYPES)
        self.data_type = choices[type(value)]
        if self.data_type == int:
            self.value = "%010d" % value
        # else... repeat for other data types

    def get_the_value(self):
        choices = dict([(y,x) for x,y in TYPES])
        return choices[self.data_type](self.value)
</snippet></ROW><ROW><id>6402327</id><snippet>try:
   v
except NameError:
   v = 'bla bla'
</snippet></ROW><ROW><id>6402327</id><snippet>try:
   v = complicated()
except ComplicatedError: # complicated failed
   v = 'fallback value'
</snippet></ROW><ROW><id>6402327</id><snippet>v</snippet></ROW><ROW><id>6402327</id><snippet>get</snippet></ROW><ROW><id>6402530</id><snippet>class A:
    pass

class B:
    a = A()

A.b = B()
</snippet></ROW><ROW><id>6402530</id><snippet>pass</snippet></ROW><ROW><id>6402638</id><snippet>def genDocText(func_name):
    return r'''
    &gt;&gt;&gt; conn = httplib.HTTPConnection(...)
    &gt;&gt;&gt; %(func_name)s(None, conn)
    Traceback (most recent call last):
    NoneAsInputError: `mystring` should be a string and not `None`!

    &gt;&gt;&gt; %(func_name)s("", conn)
    Traceback (most recent call last):
    EmptyStringError: `mystring` should not be an empty string!
    ''' % {'func_name': func_name}

def function_1(mystring, conn):
    pass

function_1.__doc__ = genDocText('function_1')
</snippet></ROW><ROW><id>6402638</id><snippet>def genDocText(func):
    func.__doc__ = r'''
    &gt;&gt;&gt; conn = httplib.HTTPConnection(...)
    &gt;&gt;&gt; %(func_name)s(None, conn)
    Traceback (most recent call last):
    NoneAsInputError: `mystring` should be a string and not `None`!

    &gt;&gt;&gt; %(func_name)s("", conn)
    Traceback (most recent call last):
    EmptyStringError: `mystring` should not be an empty string!
    ''' % {'func_name': func.__name__}
    return func

@genDocText
def function_1(mystring, conn):
    pass

@genDocText
def function_2(mystring, conn):
    pass

@genDocText
def function_n(mystring, conn):
    pass

if __name__ == '__main__':
    print function_1.__doc__
    print function_2.__doc__
    print function_n.__doc__
</snippet></ROW><ROW><id>6402798</id><snippet>;\</snippet></ROW><ROW><id>6402798</id><snippet>&gt;&gt;&gt; x=3;\
... print x**5
243
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6402815</id><snippet>word = word * 2
</snippet></ROW><ROW><id>6402815</id><snippet>str[i] = str[i] * 2
</snippet></ROW><ROW><id>6402815</id><snippet>word = word * 2
str[i] = word
</snippet></ROW><ROW><id>6402856</id><snippet>fibs = (a.next() for i in whatever)
even_fibs = [num for num in fibs if num % 2 == 0]
</snippet></ROW><ROW><id>6402856</id><snippet>even_fibs = [num for num in (a.next() for i in whatever) if num % 2 == 0]
</snippet></ROW><ROW><id>6402856</id><snippet>itertools.islice</snippet></ROW><ROW><id>6402856</id><snippet>from itertools import islice
fibs_max_count = int(sys.argv[1])
even_fibs = [num for num in islice(fib_gen(), fibs_max_count) if num%2 == 0]
</snippet></ROW><ROW><id>6402859</id><snippet>def getSec(s):
    l = s.split(':')
    return int(l[0]) * 3600 + int(l[1]) * 60 + int(l[2])

print getSec('1:23:45')
print getSec('0:04:15')
print getSec('0:00:25')
</snippet></ROW><ROW><id>6403152</id><snippet>any()</snippet></ROW><ROW><id>6403152</id><snippet>any(reviewed_object_name == reviewed_object.name for reviewed_object in reviewed_objects_collection)
</snippet></ROW><ROW><id>6403195</id><snippet>.select('//a[. != "" and translate(., "0123456789", "") = ""]/@href')
</snippet></ROW><ROW><id>6403324</id><snippet>def OnResize(self, event):
    w, h = size = self.GetSize()
    if size != self.previous_size:
        # update font size
    self.previous_size = size
</snippet></ROW><ROW><id>6403477</id><snippet>class_dict = list()
</snippet></ROW><ROW><id>6403477</id><snippet>class_dict = {}
</snippet></ROW><ROW><id>6403477</id><snippet>OverloadedFunction.__call__</snippet></ROW><ROW><id>6403477</id><snippet>for fkey, function in class_dict.items():
    inspect_t = inspect.getfullargspec(function)
    print(inspect_t)
</snippet></ROW><ROW><id>6403477</id><snippet>member_dict.__setitem__</snippet></ROW><ROW><id>6403477</id><snippet>if value.__class__.__name__ == "function":
    class_dict[key] = value
    dict.__setitem__(self,key,OverloadedFunction(key,value))
</snippet></ROW><ROW><id>6403477</id><snippet>NoneType not callable</snippet></ROW><ROW><id>6403477</id><snippet>import inspect</snippet></ROW><ROW><id>6403477</id><snippet>$ python3 temp.py
FullArgSpec(args=['self', 'a', 'b'], varargs=None, varkw=None, defaults=None, kwonlyargs=[],    kwonlydefaults=None, annotations={'a': &lt;class '__main__.Asteroid'&gt;, 'b': &lt;class '__main__.Asteroid'&gt;})
</snippet></ROW><ROW><id>6403477</id><snippet>__setitem__</snippet></ROW><ROW><id>6403477</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>6403477</id><snippet>append</snippet></ROW><ROW><id>6403477</id><snippet>class_dict[key]</snippet></ROW><ROW><id>6403640</id><snippet>import random
random.shuffle(listOfItems)
for singleSelectedItem in listOfItems:
    blahblah
</snippet></ROW><ROW><id>6403640</id><snippet>import random
randomRange = range(len(listOfItems))
random.shuffle(randomRange)
for i in randomRange:
    singleSelectedItem = listOfItems[i]
    blahblah
</snippet></ROW><ROW><id>6403640</id><snippet>import random
for item in random.sample(listOfItems, len(listOfItems))
    blahblah
</snippet></ROW><ROW><id>6403970</id><snippet>return</snippet></ROW><ROW><id>6403970</id><snippet>euclidAlgorithm(m, n)</snippet></ROW><ROW><id>6403970</id><snippet>def euclidAlgorithm(m, n):
if n == 0:
    print "n cannot be zero."
    return -1
r = m % n #Reminder
if r == 0:
    return n
else:
    return euclidAlgorithm(n, r)
</snippet></ROW><ROW><id>6403976</id><snippet>sudo env ARCHFLAGS="-arch x86_64" pip install pycurl
</snippet></ROW><ROW><id>6404147</id><snippet>&gt;&gt;&gt; for i, season in enumerate('Spring Summer Fall Winter'.split(), start=1):
        print i, season
1 Spring
2 Summer
3 Fall
4 Winter
</snippet></ROW><ROW><id>6404898</id><snippet>## Take value for *text* attribute of the cell renderer from the model's 3rd column
col = gtk.TreeViewColumn(title, cellrenderer, text=2)
</snippet></ROW><ROW><id>6405057</id><snippet>&lt;RCC&gt;
  &lt;qresource&gt;
    &lt;file&gt;images/logo/image_16x16.png&lt;/file&gt;
  &lt;/qresource&gt;
&lt;/RCC&gt;
</snippet></ROW><ROW><id>6405228</id><snippet>&gt;&gt;&gt; def f(x):
...     result = []
...     for part in x.split(','):
...         if '-' in part:
...             a, b = part.split('-')
...             a, b = int(a), int(b)
...             result.extend(range(a, b + 1))
...         else:
...             a = int(part)
...             result.append(a)
...     return result
... 
&gt;&gt;&gt; f('1,2,5-7,10')
[1, 2, 5, 6, 7, 10]
</snippet></ROW><ROW><id>6405514</id><snippet>&gt;&gt;&gt; s = set([1, 2, 3])
&gt;&gt;&gt; list(s)
[1, 2, 3]
</snippet></ROW><ROW><id>6405593</id><snippet>numpy.recarray.__init__</snippet></ROW><ROW><id>6405593</id><snippet>def __init__(self, *args, **kwargs):
    self._increment = 1
    numpy.recarray.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>6405593</id><snippet>return</snippet></ROW><ROW><id>6405593</id><snippet>__getitem__</snippet></ROW><ROW><id>6405593</id><snippet>def __getitem__(self,ind):
    try:
        return numpy.recarray.__getitem__(self,ind)
    except IndexError:
        self.resize((self.__len__() + self._increment,),refcheck=False)
        return self.__getitem__(ind)
</snippet></ROW><ROW><id>6406001</id><snippet>{...}.items()</snippet></ROW><ROW><id>6406001</id><snippet>for score,name in scores.items():
    print('{name} had a score of {score}'.format(**locals()))
</snippet></ROW><ROW><id>6406001</id><snippet>scores[9.10]='Zach' scores[9.10]='Juan'</snippet></ROW><ROW><id>6406001</id><snippet>scores['Zach'] = 8.45
scores['Juan'] = 8.45
...
</snippet></ROW><ROW><id>6406001</id><snippet>def parseScores(string):
    scores = {}
    for line in string.splitlines():
        if line.strip():
            name,score = line.strip().split()
            scores[name] = float(score)
    return scores

data = """
    Zach 8.45
    Juan 9.12
    Aaron 2.2
    Aideen 2.2
    Johnny 2.2
    Stacey 7.81
"""

scores = parseScores(data)
for name,score in scores.items():
    print('{name} had a score of {score}'.format(**locals()))
</snippet></ROW><ROW><id>6406580</id><snippet>@decoA
@decoB
@decoC
def myFunc(...): ...
    ...
</snippet></ROW><ROW><id>6406580</id><snippet>def myFunc(...): ...
    ...
myFunc = decoA(decoB(decoC(myFunc)))  #note the *ordering*
</snippet></ROW><ROW><id>6406580</id><snippet>__init__</snippet></ROW><ROW><id>6406701</id><snippet>obj[index]</snippet></ROW><ROW><id>6406701</id><snippet>__getitem__</snippet></ROW><ROW><id>6406701</id><snippet>obj</snippet></ROW><ROW><id>6406701</id><snippet>obj</snippet></ROW><ROW><id>6406701</id><snippet>obj</snippet></ROW><ROW><id>6406701</id><snippet>__getitem__</snippet></ROW><ROW><id>6406701</id><snippet>&gt;&gt;&gt; class Foo(object):
    pass

&gt;&gt;&gt; def __getitem__(self, index):
    return index

&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.__getitem__ = __getitem__
&gt;&gt;&gt; f[3]
Traceback (most recent call last):
  File "&lt;pyshell#8&gt;", line 1, in &lt;module&gt;
    f[3]
TypeError: 'Foo' object does not support indexing
&gt;&gt;&gt; Foo.__getitem__ = __getitem__
&gt;&gt;&gt; f[3]
3
</snippet></ROW><ROW><id>6406701</id><snippet>__getitem__</snippet></ROW><ROW><id>6406701</id><snippet>__getitem__</snippet></ROW><ROW><id>6406701</id><snippet>r_</snippet></ROW><ROW><id>6406701</id><snippet>r_[1:10]</snippet></ROW><ROW><id>6406750</id><snippet>pl.xlabel("...", labelpad=20)
</snippet></ROW><ROW><id>6406750</id><snippet>ax.xaxis.labelpad = 20
</snippet></ROW><ROW><id>6406777</id><snippet>__import__</snippet></ROW><ROW><id>6406777</id><snippet>__import__</snippet></ROW><ROW><id>6406777</id><snippet>b</snippet></ROW><ROW><id>6406777</id><snippet>exec</snippet></ROW><ROW><id>6406777</id><snippet>b</snippet></ROW><ROW><id>6406777</id><snippet>a</snippet></ROW><ROW><id>6406777</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6406777</id><snippet>a</snippet></ROW><ROW><id>6406777</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6406777</id><snippet>b</snippet></ROW><ROW><id>6406777</id><snippet>a</snippet></ROW><ROW><id>6406777</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6406777</id><snippet>a</snippet></ROW><ROW><id>6406777</id><snippet>b</snippet></ROW><ROW><id>6406777</id><snippet>sys.path</snippet></ROW><ROW><id>6406777</id><snippet>a</snippet></ROW><ROW><id>6406777</id><snippet>import</snippet></ROW><ROW><id>6407105</id><snippet>libvte</snippet></ROW><ROW><id>6407105</id><snippet>+---------------+
| libvte        |
|               |
|    pty master=|-----\
+---------------+     |
                      |
+---------------+     |
| helper proxy  |     |
|               |     |
|  stdin/stdout=|-----/
|               |
|    pty master=|-----\
+---------------+     |
                      |
+---------------+     |
| target        |     |
|               |     |
|  stdin/stdout=|-----/
+---------------+
</snippet></ROW><ROW><id>6407105</id><snippet>stdin</snippet></ROW><ROW><id>6407105</id><snippet>stdout</snippet></ROW><ROW><id>6407105</id><snippet>libvte</snippet></ROW><ROW><id>6407105</id><snippet>rz</snippet></ROW><ROW><id>6407169</id><snippet>try:
    # do something
except (ValueError, ) as IndexError:
    # do something else
</snippet></ROW><ROW><id>6407169</id><snippet>try:
    # do something
except (ValueError, IndexError):
    # do something else
</snippet></ROW><ROW><id>6407169</id><snippet>try:
    # do something
except (ValueError, IndexError) as e:
    # do something with e
</snippet></ROW><ROW><id>6407359</id><snippet>result = dialog.activate(geometry = "first+50+20")
</snippet></ROW><ROW><id>6407393</id><snippet>yourdatetime.date() &lt; datetime.today().date()
</snippet></ROW><ROW><id>6407393</id><snippet>yourdatetime.date() == datetime.today().date()
</snippet></ROW><ROW><id>6407393</id><snippet>python thing_i_have_a_question_about</snippet></ROW><ROW><id>6407393</id><snippet>datetime</snippet></ROW><ROW><id>6407393</id><snippet>date</snippet></ROW><ROW><id>6407393</id><snippet>time</snippet></ROW><ROW><id>6407393</id><snippet>datetime</snippet></ROW><ROW><id>6407393</id><snippet>date()</snippet></ROW><ROW><id>6407393</id><snippet>time()</snippet></ROW><ROW><id>6407393</id><snippet>date</snippet></ROW><ROW><id>6407393</id><snippet>time</snippet></ROW><ROW><id>6407393</id><snippet>combine</snippet></ROW><ROW><id>6407393</id><snippet>date</snippet></ROW><ROW><id>6407393</id><snippet>time</snippet></ROW><ROW><id>6407393</id><snippet>datetime</snippet></ROW><ROW><id>6407489</id><snippet>nb</snippet></ROW><ROW><id>6407489</id><snippet>threading.Timer()</snippet></ROW><ROW><id>6407489</id><snippet>threading.Timer(12.0, pingstarter, (nb,))
</snippet></ROW><ROW><id>6407489</id><snippet>threading.Timer(12.0, pingstarter, [nb])
</snippet></ROW><ROW><id>6407489</id><snippet>threading.Timer()</snippet></ROW><ROW><id>6407489</id><snippet>dict</snippet></ROW><ROW><id>6407489</id><snippet>nb</snippet></ROW><ROW><id>6407489</id><snippet>pingstarter</snippet></ROW><ROW><id>6407489</id><snippet>pingstarter('192.168.1.2', '192.168.1.3', '192.168.1.4')
</snippet></ROW><ROW><id>6407489</id><snippet>pingstarter(['192.168.1.2', '192.168.1.3', '192.168.1.4'])
</snippet></ROW><ROW><id>6407646</id><snippet>a = [1, 2, 3]
b = a
a.append(4)
print b # =&gt; [1, 2, 3, 4]
</snippet></ROW><ROW><id>6407686</id><snippet>import subprocess, re
c = subprocess.check_output(["ping","www.google.com"])
t = re.findall('time=(\d+)ms',c) #Or parse something like 'Maximum = 67ms' in the output
max(t)
&gt;&gt;&gt; '67'
</snippet></ROW><ROW><id>6407798</id><snippet>json.loads()</snippet></ROW><ROW><id>6407798</id><snippet>&gt;&gt;&gt; json.loads('{"foo": 42, "bar": "baz"}')[u'bar']
u'baz'
</snippet></ROW><ROW><id>6408175</id><snippet>key = (args, frozenset(kwargs.items())
</snippet></ROW><ROW><id>6408175</id><snippet>frozenset(---.items())</snippet></ROW><ROW><id>6408175</id><snippet>sorted</snippet></ROW><ROW><id>6408175</id><snippet>&gt;&gt;&gt; sorted([frozenset({1,2}), frozenset({1,3})])
[frozenset({1, 2}), frozenset({1, 3})]

&gt;&gt;&gt; sorted([frozenset({1,3}), frozenset({1,2})]) # THE SAME
[frozenset({1, 3}), frozenset({1, 2})] # DIFFERENT SORT RESULT

# sorted(stuff) != sorted(reversed(stuff)), if not strictly totally ordered
</snippet></ROW><ROW><id>6408175</id><snippet>str</snippet></ROW><ROW><id>6408175</id><snippet>repr</snippet></ROW><ROW><id>6408175</id><snippet>repr</snippet></ROW><ROW><id>6408175</id><snippet>((&lt;map object at 0x1377d50&gt;,), frozenset(...))</snippet></ROW><ROW><id>6408175</id><snippet>((&lt;list_iterator object at 0x1377dd0&gt;,&lt;list_iterator object at 0x1377dd0&gt;), frozenset(...))</snippet></ROW><ROW><id>6408175</id><snippet>is</snippet></ROW><ROW><id>6408175</id><snippet>==</snippet></ROW><ROW><id>6408175</id><snippet>str({1:object()})</snippet></ROW><ROW><id>6408175</id><snippet>&lt;some object at 0x???????&gt;</snippet></ROW><ROW><id>6408232</id><snippet>def _setAutoCommit(self, conn, auto):
    # psycopg2 does not have an autocommit method.
    if hasattr(conn, 'autocommit'):
        conn.autocommit(auto)
</snippet></ROW><ROW><id>6408232</id><snippet>conn</snippet></ROW><ROW><id>6408232</id><snippet>psycopg2.connection</snippet></ROW><ROW><id>6408232</id><snippet>autocommit</snippet></ROW><ROW><id>6408232</id><snippet>psycopg2.connection</snippet></ROW><ROW><id>6408232</id><snippet>psycopg2.connection.autocommit</snippet></ROW><ROW><id>6408232</id><snippet>makeConnection</snippet></ROW><ROW><id>6408232</id><snippet>conn.autocommit(val)</snippet></ROW><ROW><id>6408232</id><snippet>conn.autocommit = val</snippet></ROW><ROW><id>6408232</id><snippet>sed</snippet></ROW><ROW><id>6408525</id><snippet>np.nonzero</snippet></ROW><ROW><id>6408525</id><snippet>ndarray.nonzero</snippet></ROW><ROW><id>6408525</id><snippet>ndarray</snippet></ROW><ROW><id>6408525</id><snippet>nonzero</snippet></ROW><ROW><id>6408525</id><snippet>:</snippet></ROW><ROW><id>6408525</id><snippet>&gt;&gt;&gt; rows.nonzero()
(array([0, 2]),)
&gt;&gt;&gt; indices = rows.nonzero()[0]
&gt;&gt;&gt; indices
array([0, 2])
&gt;&gt;&gt; sparse[indices, :]
&lt;2x100 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
        with 6 stored elements in LInked List format&gt;
</snippet></ROW><ROW><id>6408907</id><snippet>const.py</snippet></ROW><ROW><id>6408907</id><snippet>const</snippet></ROW><ROW><id>6408907</id><snippet>from const import *</snippet></ROW><ROW><id>6408907</id><snippet>const.</snippet></ROW><ROW><id>6408907</id><snippet>from const import ABC, DEF</snippet></ROW><ROW><id>6409052</id><snippet>if __name__ == "__main__":
    print "123"
</snippet></ROW><ROW><id>6409052</id><snippet>__name__</snippet></ROW><ROW><id>6409052</id><snippet>"__main__"</snippet></ROW><ROW><id>6409052</id><snippet>"123"</snippet></ROW><ROW><id>6409052</id><snippet>__name__</snippet></ROW><ROW><id>6409052</id><snippet>"FirstModule"</snippet></ROW><ROW><id>6409052</id><snippet>"__main__"</snippet></ROW><ROW><id>6409052</id><snippet>IFNDEF</snippet></ROW><ROW><id>6409664</id><snippet>    if form.is_valid():
        note = form.save(commit=False)
        note.user = request.user
        note.client = client
        note.save()
</snippet></ROW><ROW><id>6409718</id><snippet>class test():
    def __init__(self):
        raise

    def __del__(self):
        print "__del__ called"

try:
    test()
except:
    pass
</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__new__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__new__</snippet></ROW><ROW><id>6409718</id><snippet>class test():
    def __new__(cls):
        obj = object.__new__(cls)
        raise
        return obj

    def __del__(self):
        print "__del__ called"
</snippet></ROW><ROW><id>6409718</id><snippet>test</snippet></ROW><ROW><id>6409718</id><snippet>obj</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409718</id><snippet>object.__new__()</snippet></ROW><ROW><id>6409718</id><snippet>__del__</snippet></ROW><ROW><id>6409849</id><snippet>response = {'entry':[
    {

        JSON Data 1
    }, 
    {

        JSON Data 2
    }
]}
</snippet></ROW><ROW><id>6409849</id><snippet>response['entry'][0] == { JSON Data 1  }
</snippet></ROW><ROW><id>6409849</id><snippet>for entry in response['entry']:

    video['video_url'] = entry['id']['$t']
    video['published'] = entry['published']['$t']
</snippet></ROW><ROW><id>6409849</id><snippet>video = dict(zip(['video_url', 'published'], [entry['id']['$t'], entry['published']['$t']]) for entry in response['entry']
</snippet></ROW><ROW><id>6409975</id><snippet>./Python/sysmodule.c</snippet></ROW><ROW><id>6409975</id><snippet>find . -name 'sysmodule.c'</snippet></ROW><ROW><id>6409975</id><snippet>"platform"</snippet></ROW><ROW><id>6409975</id><snippet>sys.platform</snippet></ROW><ROW><id>6409975</id><snippet>sys</snippet></ROW><ROW><id>6409975</id><snippet>grep</snippet></ROW><ROW><id>6409975</id><snippet>xargs</snippet></ROW><ROW><id>6409975</id><snippet>for i in ./**/*.c ; do grep -H platform $i ; done</snippet></ROW><ROW><id>6409975</id><snippet>*.c</snippet></ROW><ROW><id>6409975</id><snippet>"platform"</snippet></ROW><ROW><id>6409975</id><snippet>-H</snippet></ROW><ROW><id>6410701</id><snippet>local_data = {'batsman': 'Sangakkara', 'bowler': 'swann'}
mapped_instance_from_query._local_data = local_data
</snippet></ROW><ROW><id>6410990</id><snippet>removeWidget()</snippet></ROW><ROW><id>6410990</id><snippet>setParent(None)</snippet></ROW><ROW><id>6410990</id><snippet>def update(self):
    self.layout().removeWidget(self.child)
    self.child.setParent(None)
    self.child = QLabel("bar", self)
    self.layout().addWidget(self.child)
</snippet></ROW><ROW><id>6411036</id><snippet> def show_tgz():
     count = 1
     indexMapping = {}
     for i, fname in enumerate(dirlist):
         if fname.endswith(('.tgz','.tar')):
             print '\n{0:3d} - {1}'.format(count, fname)
             indexMapping[count] = i
             count += 1
     return indexMapping
</snippet></ROW><ROW><id>6411036</id><snippet>indexMapping</snippet></ROW><ROW><id>6411036</id><snippet>dirlist</snippet></ROW><ROW><id>6411117</id><snippet>row</snippet></ROW><ROW><id>6411117</id><snippet> print row, len(row)
</snippet></ROW><ROW><id>6411117</id><snippet> insert into table (col1, col2, col3, ...) values (?, ?,? ...)
</snippet></ROW><ROW><id>6411149</id><snippet>tzinfo.localize()</snippet></ROW><ROW><id>6411149</id><snippet>datetime</snippet></ROW><ROW><id>6411149</id><snippet>&gt;&gt;&gt; tz = timezone('Asia/Kolkata')
&gt;&gt;&gt; dt = tz.localize(datetime.datetime(2011, 6, 20, 0, 0, 0, 0))
&gt;&gt;&gt; dt
datetime.datetime(2011, 6, 20, 0, 0, tzinfo=&lt;DstTzInfo 'Asia/Kolkata' IST+5:30:00 STD&gt;)
</snippet></ROW><ROW><id>6411149</id><snippet>localize</snippet></ROW><ROW><id>6411149</id><snippet>astimezone</snippet></ROW><ROW><id>6411149</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6411333</id><snippet>&gt;&gt;&gt; exc_info[2].tb_next = None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: readonly attribute

&gt;&gt;&gt; types.TracebackType()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot create 'traceback' instances
</snippet></ROW><ROW><id>6411333</id><snippet>unittest</snippet></ROW><ROW><id>6411889</id><snippet>files = [os.path.join(path, filename)
         for path, dirs, files in os.walk(dir)
         for filename in files
         if not filename.endswith(".bak")]
return random.choice(files)
</snippet></ROW><ROW><id>6411961</id><snippet>matches = re.findall("([0-9]{5})",f.read())
</snippet></ROW><ROW><id>6412010</id><snippet>import xml.etree.ElementTree
tree = xml.etree.ElementTree.parse("foo.xml")
myArray = [int(x.text) for x in tree.getroot().findall("human/weight")]
</snippet></ROW><ROW><id>6412373</id><snippet>staticmethod</snippet></ROW><ROW><id>6412373</id><snippet>staticmethod</snippet></ROW><ROW><id>6412373</id><snippet>classname.staticmethodname</snippet></ROW><ROW><id>6412373</id><snippet>class A(object):
    @staticmethod
    def f():
        pass
print A.f
print A.__dict__["f"]
</snippet></ROW><ROW><id>6412373</id><snippet>&lt;function f at 0x8af45dc&gt;
&lt;staticmethod object at 0x8aa6a94&gt;
</snippet></ROW><ROW><id>6412373</id><snippet>A</snippet></ROW><ROW><id>6412373</id><snippet>staticmethod</snippet></ROW><ROW><id>6412373</id><snippet>del</snippet></ROW><ROW><id>6412537</id><snippet>import string
for i, x in enumerate(myList):
    x.label = string.uppercase[i]
</snippet></ROW><ROW><id>6412537</id><snippet>len(myList) &gt; 26</snippet></ROW><ROW><id>6413292</id><snippet>In []: F= randn(5, 3)
In []: t= randn(1, 3)
In []: ((F- t)** 2).sum(1)
Out[]: array([  8.80512,   4.61693,   2.6002,   3.3293,  12.41800])
</snippet></ROW><ROW><id>6413292</id><snippet>F</snippet></ROW><ROW><id>6413292</id><snippet>t</snippet></ROW><ROW><id>6413292</id><snippet>In []: ((F- t)** 2).sum(1).argsort()
Out[]: array([2, 3, 1, 0, 4])
</snippet></ROW><ROW><id>6413612</id><snippet># will match in the order written here
tokens = ["num_ref_frames", "Max QP", "Min QP", "Avg QP", "I4x4",
          "I16x16", "SkipZero", "SkipMV", "16x16", "16x8", "8x16",
          "8x8", "8x4", "4x8", "4x4"]

special = ["Quarterpel MVs"]

# this dictionary (hash-table) contains the search string from tokens array
# as well as an array where the first element is the field to extract to
# create matrix array. e.g. 0 = 1st field, 1 = 2nd field, 3 = 3rd field etc.
dict = {tokens[0]:  [1], tokens[1]:  [1], tokens[2]:  [1], tokens[3]:  [1],
        tokens[4]:  [2], tokens[5]:  [2], tokens[6]:  [2], tokens[7]:  [2],
        tokens[8]:  [2], tokens[9]:  [2], tokens[10]: [2], tokens[11]: [2],
        tokens[12]: [2], tokens[13]: [2], tokens[14]: [2],}
</snippet></ROW><ROW><id>6413612</id><snippet>token</snippet></ROW><ROW><id>6413612</id><snippet>special</snippet></ROW><ROW><id>6413612</id><snippet>git://gist.github.com/1037403.git</snippet></ROW><ROW><id>6413612</id><snippet>usage:
./parser.py all_dec.txt
</snippet></ROW><ROW><id>6413682</id><snippet>use strict;
use warnings;
use autodie;

open my $id_list, '&lt;', 'id_list_file';
my %ids = map { chomp; $_ =&gt; 1 } readline $id_list;
close $id_list;

open my $text_file, '&lt;', 'text_file';
while ( my $line = readline $text_file ) {
    chomp $line;
    my ($id, $value) = split /\t/, $line, 2;
    if ( $ids{ $id } ) {
        print "got value $value for id $id\n";
    }
}
</snippet></ROW><ROW><id>6413694</id><snippet>PhotoImage</snippet></ROW><ROW><id>6413694</id><snippet>GIF</snippet></ROW><ROW><id>6413694</id><snippet>PGM/PPM</snippet></ROW><ROW><id>6413694</id><snippet>JPEG</snippet></ROW><ROW><id>6413694</id><snippet>PhotoImage</snippet></ROW><ROW><id>6413694</id><snippet>from PIL import Image, ImageTk

img = Image.open("yourimg.jpg")
photoImg = ImageTk.PhotoImage(img)
</snippet></ROW><ROW><id>6413694</id><snippet>PhotoImage</snippet></ROW><ROW><id>6413828</id><snippet>name = sh.cell(0,0).value
</snippet></ROW><ROW><id>6413828</id><snippet>split_name = name.split(' ')
print split_name
</snippet></ROW><ROW><id>6413828</id><snippet>[u'First', u'Last']</snippet></ROW><ROW><id>6413828</id><snippet>split_name = split_name.reverse()
print split_name
</snippet></ROW><ROW><id>6413828</id><snippet>[u'Last', u'First']</snippet></ROW><ROW><id>6413924</id><snippet>sysexit.h</snippet></ROW><ROW><id>6413924</id><snippet>posix</snippet></ROW><ROW><id>6413924</id><snippet>&gt;&gt;&gt; import posix
&gt;&gt;&gt; posix.EX_ &lt;tab pressed&gt;
posix.EX_CANTCREAT    posix.EX_NOHOST       posix.EX_OK           posix.EX_SOFTWARE
posix.EX_CONFIG       posix.EX_NOINPUT      posix.EX_OSERR        posix.EX_TEMPFAIL
posix.EX_DATAERR      posix.EX_NOPERM       posix.EX_OSFILE       posix.EX_UNAVAILABLE
posix.EX_IOERR        posix.EX_NOUSER       posix.EX_PROTOCOL     posix.EX_USAGE
</snippet></ROW><ROW><id>6413924</id><snippet>os</snippet></ROW><ROW><id>6414198</id><snippet>curgb</snippet></ROW><ROW><id>6414198</id><snippet>count2</snippet></ROW><ROW><id>6414198</id><snippet>curgd</snippet></ROW><ROW><id>6414198</id><snippet>count</snippet></ROW><ROW><id>6414198</id><snippet>global</snippet></ROW><ROW><id>6414205</id><snippet>#!/usr/bin/python

import sys
import subprocess

p = subprocess.Popen("""python -c '
from time import sleep ; import sys
for i in range(3):
    sleep(1)
    print "Hello", i
    sys.stdout.flush()
'""", shell = True, stdout = subprocess.PIPE)

while True:
    inline = p.stdout.readline()
    if not inline:
        break
    sys.stdout.write(inline)
    sys.stdout.flush()

print "Done"
</snippet></ROW><ROW><id>6414445</id><snippet>IOError</snippet></ROW><ROW><id>6414445</id><snippet>IOError</snippet></ROW><ROW><id>6414471</id><snippet>timeArray = [i*deltaTime for i in range(1000)]
</snippet></ROW><ROW><id>6414471</id><snippet>print</snippet></ROW><ROW><id>6414471</id><snippet>timeArray = numpy.arange(1000)
timeArray *= deltaTime
</snippet></ROW><ROW><id>6414600</id><snippet>valgrind --tool=massif python my_script.py
</snippet></ROW><ROW><id>6414673</id><snippet>socket.error</snippet></ROW><ROW><id>6414673</id><snippet>import httplib, socket
import urlparse

def getUrl(url):
    parts = urlparse.urlsplit(url)
    server = parts[1]
    path = parts[2]
    obj = httplib.HTTPConnection(server,80)

    try:
        obj.connect()
    except socket.gaierror:
        print "Host %s does not exist" % server
        return
    except socket.error:
        print "Cannot connect to %s:%s." % (server, 80)
        return

    obj.putrequest('HEAD',path)
    obj.putheader('Accept','*/*')
    obj.endheaders()
    response = obj.getresponse()
    contentType = response.getheader("content-type", "unknown")
    obj.close()
    if response.status !=200:
        print 'Error'
    else:
        print 'Awesome'


getUrl('http://www.idlebrfffain.com') # not a registered domain
getUrl('http://8.8.8.8') # not a http server
</snippet></ROW><ROW><id>6414673</id><snippet>try: except:</snippet></ROW><ROW><id>6414735</id><snippet>&gt;&gt;&gt; from inspect import isgeneratorfunction
&gt;&gt;&gt; def foo(x):
...    for y in x:
...        yield y
...
&gt;&gt;&gt; isgeneratorfunction(foo)
True
</snippet></ROW><ROW><id>6414772</id><snippet>sys.stderr.write('Before Exception\n')</snippet></ROW><ROW><id>6414772</id><snippet>sys.stderr.write('Inside exception\n')</snippet></ROW><ROW><id>6414772</id><snippet>import sys

sys.stderr.write('Before Exception\n')
sys.stderr.flush()

class F(Exception):
    sys.stderr.write('Inside exception\n')
    sys.stderr.flush()
    pass

try:
    raise F
except F:
    pass
</snippet></ROW><ROW><id>6414772</id><snippet>Before exception
Inside Exception
</snippet></ROW><ROW><id>6414772</id><snippet>sys.stderr.write('Before Exception\n')</snippet></ROW><ROW><id>6414772</id><snippet>Inside Exception</snippet></ROW><ROW><id>6414772</id><snippet>raise</snippet></ROW><ROW><id>6414772</id><snippet>import sys

class F(Exception):
    sys.stderr.write('Inside exception\n')
    sys.stderr.flush()
    pass
</snippet></ROW><ROW><id>6414772</id><snippet>Inside Exception
</snippet></ROW><ROW><id>6414921</id><snippet>A</snippet></ROW><ROW><id>6414921</id><snippet>a = A()
b = object.__new__(A)
b.__dict__ = a.__dict__.copy()   # or dict(a.__dict__)
</snippet></ROW><ROW><id>6414921</id><snippet>object.__new__()</snippet></ROW><ROW><id>6414921</id><snippet>__init__()</snippet></ROW><ROW><id>6414921</id><snippet>A</snippet></ROW><ROW><id>6414921</id><snippet>copy</snippet></ROW><ROW><id>6414921</id><snippet>copyreg</snippet></ROW><ROW><id>6415043</id><snippet>exec "self.solar_z = values[1]" in locals(), locals()</snippet></ROW><ROW><id>6415054</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>6415054</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlretrieve('http://i.imgur.com/Ph4Xw.jpg', 'duck.jpg')
('duck.jpg', &lt;httplib.HTTPMessage instance at 0x10118e830&gt;)
# by now the file should be downloaded to 'duck.jpg'
</snippet></ROW><ROW><id>6415215</id><snippet>exec</snippet></ROW><ROW><id>6415359</id><snippet>JSONEncoder</snippet></ROW><ROW><id>6415359</id><snippet>_iterencode</snippet></ROW><ROW><id>6415359</id><snippet>json/encoder.py</snippet></ROW><ROW><id>6415359</id><snippet>json</snippet></ROW><ROW><id>6415359</id><snippet>from collections import Mapping, Sequence
from unittest import TestCase, main
from json import dumps

def round_floats(o):
    if isinstance(o, float):
        return round(o, 4)
    elif isinstance(o, basestring):
        return o
    elif isinstance(o, Sequence):
        return [round_floats(item) for item in o]
    elif isinstance(o, Mapping):
        return dict((key, round_floats(value)) for key, value in o.iteritems())
    else:
        return o

class TestFoo(TestCase):
    def test_it(self):
        for val, res in ((.00123456, '0.0012'),
                         (.00009, '0.0001'),
                         (0.99999, '1.0'),
                         ({'hello': 1.00001, 'world': [True, 1.00009]},
                          '{"world": [true, 1.0001], "hello": 1.0}')):
            untrusted = dumps(round_floats(val))
            self.assertEqual(untrusted, res)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; matrix = [[None]*10 for x in range(3)]#replace 10 with 1000 or what ever
&gt;&gt;&gt; matrix
[[None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6415378</id><snippet>None</snippet></ROW><ROW><id>6415378</id><snippet>0</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; matrix[1][3] = 55
&gt;&gt;&gt; matrix
[[None, None, None, None, None, None, None, None, None, None], [None, None, None, 55, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None]]
</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; for x in matrix:
...     print(x, "\n")
... 
[None, None, None, None, None, None, None, None, None, None] 

[None, None, None, 55, None, None, None, None, None, None] 

[None, None, None, None, None, None, None, None, None, None] 
</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; matrix = [[None]*10 for x in xrange(3)]
</snippet></ROW><ROW><id>6415378</id><snippet>range()</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; positionMatrix = ([0]*10, [0]*10, [0]*10)
&gt;&gt;&gt; positionMatrix
([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
&gt;&gt;&gt; positionMatrix[0][4] = 99
&gt;&gt;&gt; positionMatrix
([0, 0, 0, 0, 99, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; positionMatrix = [[0]*10]*3
&gt;&gt;&gt; positionMatrix[0][4] = 99
&gt;&gt;&gt; positionMatrix
[[0, 0, 0, 0, 99, 0, 0, 0, 0, 0], [0, 0, 0, 0, 99, 0, 0, 0, 0, 0], [0, 0, 0, 0, 99, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6415378</id><snippet>&gt;&gt;&gt; positionMatrix = [[0]*10, [0]*10, [0]*10]
&gt;&gt;&gt; positionMatrix
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
&gt;&gt;&gt; positionMatrix[0][4] = 99
&gt;&gt;&gt; positionMatrix
[[0, 0, 0, 0, 99, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>6415415</id><snippet>sys.stdin</snippet></ROW><ROW><id>6415415</id><snippet>import sys
sys.stdin.read()
</snippet></ROW><ROW><id>6415415</id><snippet>for line in sys.stdin:
    print line
</snippet></ROW><ROW><id>6415453</id><snippet>render_comment_form</snippet></ROW><ROW><id>6415453</id><snippet>get_comment_form</snippet></ROW><ROW><id>6415453</id><snippet>{% get_comment_form for object.video as comment_form %}
</snippet></ROW><ROW><id>6415453</id><snippet>comment_form</snippet></ROW><ROW><id>6415687</id><snippet>&gt; sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
&gt; sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</snippet></ROW><ROW><id>6415706</id><snippet>int()  # 0
dict() # {}
list() # []
</snippet></ROW><ROW><id>6415982</id><snippet>Label</snippet></ROW><ROW><id>6415982</id><snippet>=</snippet></ROW><ROW><id>6415982</id><snippet>Label = (self, text = "Select the last book you read.").grid (row = 0, column = 0, sticky = W)
</snippet></ROW><ROW><id>6415982</id><snippet>Label(self, text = "Select the last book you read.").grid (row = 0, column = 0, sticky = W)
</snippet></ROW><ROW><id>6415982</id><snippet>RadioButton</snippet></ROW><ROW><id>6415982</id><snippet>Radiobutton</snippet></ROW><ROW><id>6415982</id><snippet>choice1</snippet></ROW><ROW><id>6415982</id><snippet>choice2</snippet></ROW><ROW><id>6415982</id><snippet>choice3</snippet></ROW><ROW><id>6415982</id><snippet>Application</snippet></ROW><ROW><id>6415982</id><snippet>def create_widgets()</snippet></ROW><ROW><id>6415982</id><snippet>self</snippet></ROW><ROW><id>6415982</id><snippet>def create_widgets(self)</snippet></ROW><ROW><id>6415982</id><snippet>update_text()</snippet></ROW><ROW><id>6415982</id><snippet>self.text_display</snippet></ROW><ROW><id>6415982</id><snippet>self.txt_display</snippet></ROW><ROW><id>6416080</id><snippet>__getattr__</snippet></ROW><ROW><id>6416080</id><snippet>pickle</snippet></ROW><ROW><id>6416080</id><snippet>__getnewargs__</snippet></ROW><ROW><id>6416080</id><snippet>None</snippet></ROW><ROW><id>6416080</id><snippet>__getattr__</snippet></ROW><ROW><id>6416080</id><snippet>def __getattr__(self, key):
    if key.startswith('__') and key.endswith('__'):
        return super(DictionaryLike, self).__getattr__(key)
    return self.__getitem__(key)
</snippet></ROW><ROW><id>6416141</id><snippet>"PLACE .tgz FILES in c:\Extracted AT THIS TIME!!! PRESS ENTER WHEN FINISHED!"</snippet></ROW><ROW><id>6416141</id><snippet>/</snippet></ROW><ROW><id>6416141</id><snippet>\\</snippet></ROW><ROW><id>6416141</id><snippet>&gt;&gt;&gt; from os import chdir
&gt;&gt;&gt; import tarfile
&gt;&gt;&gt; chdir(r'C:\Users\Acer\Downloads')
&gt;&gt;&gt; tar_url = 'merpano0.tar.gz'
&gt;&gt;&gt; print tar_url
merpano0.tar.gz
&gt;&gt;&gt; tar = tarfile.open(tar_url, 'r')
&gt;&gt;&gt; extract_path = 'C:\\Users\\Acer\\Downloads\\test\\'
&gt;&gt;&gt; for item in tar:
    tar.extract(item, extract_path)
</snippet></ROW><ROW><id>6416141</id><snippet>test</snippet></ROW><ROW><id>6416142</id><snippet>default_data['item3'] = 3
</snippet></ROW><ROW><id>6416142</id><snippet>default_data.update({'item3': 3})
</snippet></ROW><ROW><id>6416149</id><snippet>t.daemon = True</snippet></ROW><ROW><id>6416149</id><snippet>get</snippet></ROW><ROW><id>6416333</id><snippet>os.path.dirname(__file__)
</snippet></ROW><ROW><id>6416333</id><snippet>__file__</snippet></ROW><ROW><id>6416333</id><snippet>chdir</snippet></ROW><ROW><id>6416333</id><snippet>import os.path
_dir = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>6416345</id><snippet>M2Crypto.EVP</snippet></ROW><ROW><id>6416345</id><snippet>MD5WithRSA</snippet></ROW><ROW><id>6416345</id><snippet>SHA1WithRSA</snippet></ROW><ROW><id>6416466</id><snippet>def view2(request):
    if request.method == 'POST':
    page_list=request.POST.values()
else:
    HttpResponseRedirect('/urls/')
</snippet></ROW><ROW><id>6416470</id><snippet>inner_folder/</snippet></ROW><ROW><id>6416470</id><snippet>python -m inner_folder.myscript</snippet></ROW><ROW><id>6416470</id><snippet>app/</snippet></ROW><ROW><id>6416470</id><snippet>sys.path</snippet></ROW><ROW><id>6416472</id><snippet> for j in range (1000):
     for i in range (3):
         positionMatrix[i][j] = posArray[i] + velArray[i] * timeArray[j] +  1/2*accArray[i] * timeArray[j] * timeArray[j]

 print(positionMatrix)
</snippet></ROW><ROW><id>6416487</id><snippet>any([s in BigString for s in LittleStringList])</snippet></ROW><ROW><id>6416487</id><snippet>any(s in BigString for s in LittleStringList)</snippet></ROW><ROW><id>6416585</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.GeneratorType
&lt;class 'generator'&gt;
&gt;&gt;&gt; gen = (i for i in range(10))
&gt;&gt;&gt; isinstance(gen, types.GeneratorType)
True
</snippet></ROW><ROW><id>6416645</id><snippet>str.rstrip("0")</snippet></ROW><ROW><id>6416645</id><snippet>&gt;&gt;&gt; "{:f}".format(10**-6).rstrip("0")
'0.000001'
&gt;&gt;&gt; "{:f}".format(10**-3).rstrip("0")
'0.001'
</snippet></ROW><ROW><id>6416645</id><snippet>&gt;&gt;&gt; format(1e-6, 'f').rstrip('0')
'0.000001'
&gt;&gt;&gt; format(1e-3, 'f').rstrip('0')
'0.001'
</snippet></ROW><ROW><id>6416755</id><snippet>// Simple server
import java.net._
import java.io._
import scala.io._

val server = new ServerSocket(9999)
while (true) {
    val s = server.accept()
    val in = new BufferedSource(s.getInputStream()).getLines()
    val out = new PrintStream(s.getOutputStream())

    out.println(in.next())
    out.flush()
    s.close()
}

// Simple client
import java.net._
import java.io._
import scala.io._

val s = new Socket(InetAddress.getByName("localhost"), 9999)
lazy val in = new BufferedSource(s.getInputStream()).getLines()
val out = new PrintStream(s.getOutputStream())

out.println("Hello, world")
out.flush()
println("Received: " + in.next())

s.close()
</snippet></ROW><ROW><id>6416838</id><snippet>dtype</snippet></ROW><ROW><id>6416838</id><snippet>converters</snippet></ROW><ROW><id>6416838</id><snippet>dtype=(int,float,float,int,int)
</snippet></ROW><ROW><id>6416838</id><snippet>dtype</snippet></ROW><ROW><id>6416838</id><snippet>loadtxt</snippet></ROW><ROW><id>6416838</id><snippet>genfromtxt</snippet></ROW><ROW><id>6416838</id><snippet>loadtxt</snippet></ROW><ROW><id>6416838</id><snippet>genfromtxt</snippet></ROW><ROW><id>6416838</id><snippet>loadtxt</snippet></ROW><ROW><id>6416838</id><snippet>[('f0', int), ('f1', float)]</snippet></ROW><ROW><id>6416838</id><snippet>(int, float)</snippet></ROW><ROW><id>6416838</id><snippet>unpack</snippet></ROW><ROW><id>6416978</id><snippet>deleted=False</snippet></ROW><ROW><id>6416978</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>6417750</id><snippet>bind</snippet></ROW><ROW><id>6417968</id><snippet>(str, str)</snippet></ROW><ROW><id>6418275</id><snippet>script</snippet></ROW><ROW><id>6418275</id><snippet>app.yaml</snippet></ROW><ROW><id>6418275</id><snippet>__main__</snippet></ROW><ROW><id>6418275</id><snippet>__main__</snippet></ROW><ROW><id>6418275</id><snippet>WSGIApplication</snippet></ROW><ROW><id>6418435</id><snippet>x**2</snippet></ROW><ROW><id>6418435</id><snippet>x**0.5</snippet></ROW><ROW><id>6418476</id><snippet>if sys.platform == 'win32':
    time_t = ctypes.c_uint64
# ...
</snippet></ROW><ROW><id>6418476</id><snippet>time_t</snippet></ROW><ROW><id>6418476</id><snippet>time_t</snippet></ROW><ROW><id>6418729</id><snippet>log = ['jarid: 7e5ae720-9151-11e0-eff2-00238bce4216 recv: 1 timestamp: 00:00:02,217',
       'jarid: 7e5ae720-9151-11e0-eff2-00238bce4216 ack: 13 timestamp: 00:00:04,537',
       'jarid: 462c6d11-9151-11e0-a72c-00238bbdc9e7 recv: 1 timestamp: 00:00:08,018',
       'jarid: 462c6d11-9151-11e0-a72c-00238bbdc9e7 nack: 14 timestamp: 00:00:10,338']
</snippet></ROW><ROW><id>6418729</id><snippet>d = {}
for i in (line.split() for line in log):
    d.setdefault(i[1], {}).update({i[2]:i[-1]})

#as pointed by @gnibbler, you can also use "defaultdict"
#instead of dict with "setdefault"
</snippet></ROW><ROW><id>6418729</id><snippet>for i,j in d.items():
    print 'jarid:', i,
    for k,m in j.items():
        print k, m,
    print
</snippet></ROW><ROW><id>6419143</id><snippet>from models import Name
from datetime import datetime

# create a new model
name = Name(city='New York', state='NY')
# fields can also be set this way
name.zipcode = '10027'
# save the model to the database
name.save()
# find a model by zipcode
name = Name.objects.filter(zipcode='10027')
# modify it
name.curr_time = datetime.now()
# save it
name.save()
</snippet></ROW><ROW><id>6419476</id><snippet>metatag</snippet></ROW><ROW><id>6419476</id><snippet>MetaTag.objects.filter(conditions_here)
</snippet></ROW><ROW><id>6419476</id><snippet>related_name</snippet></ROW><ROW><id>6419476</id><snippet>MetaTag</snippet></ROW><ROW><id>6419825</id><snippet>print subprocess.check_output(["program",
                               "-v",
                               "-a5",
                               "-t%i" % test,
                               "-oURL",
                               "-uUSER",
                               "-pPASS"])
</snippet></ROW><ROW><id>6420030</id><snippet> self.rect.center = (0,0)
</snippet></ROW><ROW><id>6420030</id><snippet> self.rect.top = 0 ; self.rect.left = 0
</snippet></ROW><ROW><id>6420050</id><snippet>{% for key, log in log_group %}
</snippet></ROW><ROW><id>6420050</id><snippet>{% for key, log in log_group.items %}
</snippet></ROW><ROW><id>6420070</id><snippet>import termios
import struct
import fcntl

def set_winsize(fd, row, col, xpix=0, ypix=0):
    winsize = struct.pack("HHHH", row, col, xpix, ypix)
    fcntl.ioctl(fd, termios.TIOCSWINSZ, winsize)
</snippet></ROW><ROW><id>6420070</id><snippet>import sys
sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=32, cols=100))
</snippet></ROW><ROW><id>6420389</id><snippet>reload(module)
</snippet></ROW><ROW><id>6420428</id><snippet>recv</snippet></ROW><ROW><id>6420428</id><snippet>import socket
import re

class MessageError(Exception): pass

class MessageReader(object):
    def __init__(self,sock):
        self.sock = sock
        self.buffer = b''

    def get_until(self,what):
        while what not in self.buffer:
            if not self._fill():
                return b''
        offset = self.buffer.find(what) + len(what)
        data,self.buffer = self.buffer[:offset],self.buffer[offset:]
        return data

    def get_bytes(self,size):
        while len(self.buffer) &lt; size:
            if not self._fill():
                return b''
        data,self.buffer = self.buffer[:size],self.buffer[size:]
        return data

    def _fill(self):
        data = self.sock.recv(1024)
        if not data:
            if self.buffer:
                raise MessageError('socket closed with incomplete message')
            return False
        self.buffer += data
        return True

remote_host = 'www.google.com'
remote_port = 80

remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
remote_socket.connect((remote_host, remote_port))
remote_socket.sendall(b'GET http://www.google.com/images/logos/ps_logo2a_cp.png HTTP/1.1\r\nHost: www.google.com\r\nCache-Control: max-age=0\r\nPragma: no-cache\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.794.0 Safari/535.1\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Encoding: gzip,deflate,sdch\r\nAccept-Language: en-US,en;q=0.8\r\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\r\n\r\n')
mr = MessageReader(remote_socket)
header = mr.get_until(b'\r\n\r\n')
print(header.decode('ascii'))
m = re.search(b'Content-Length: (\d+)',header)
if m:
    length = int(m.group(1))
    data = mr.get_bytes(length)
    print(data)
remote_socket.close()
</snippet></ROW><ROW><id>6420428</id><snippet>HTTP/1.1 200 OK
Content-Type: image/png
Last-Modified: Thu, 12 Aug 2010 00:42:08 GMT
Date: Tue, 21 Jun 2011 05:03:35 GMT
Expires: Tue, 21 Jun 2011 05:03:35 GMT
Cache-Control: private, max-age=31536000
X-Content-Type-Options: nosniff
Server: sffe
Content-Length: 6148
X-XSS-Protection: 1; mode=block


b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01l\x00\x00\x00~\x08\x03\x00\ (rest omitted)
</snippet></ROW><ROW><id>6420807</id><snippet>find</snippet></ROW><ROW><id>6420807</id><snippet>findAll</snippet></ROW><ROW><id>6420893</id><snippet>lxml</snippet></ROW><ROW><id>6420893</id><snippet>etree.iterparse(..)</snippet></ROW><ROW><id>6420893</id><snippet>iterparse(..)</snippet></ROW><ROW><id>6420893</id><snippet>readAllChildren(..)</snippet></ROW><ROW><id>6420893</id><snippet>rowList</snippet></ROW><ROW><id>6420893</id><snippet>from lxml import etree
def parseXml(context,attribList):
    for event, element in context:
        print "%s element %s:" % (event, element)
        fieldMap = {}
        rowList = []
        readAttribs(element, fieldMap, attribList)
        readAllChildren(element, fieldMap, attribList, rowList)
        for row in rowList:
            yield row
        element.clear()

def readAttribs(element, fieldMap, attribList):
    for attrib in attribList:
        fieldMap[attrib] = element.get(attrib,'')
    print "fieldMap:", fieldMap

def readAllChildren(element, fieldMap, attribList, rowList):
    for childElem in element:
        print "Found child:", childElem
        readAttribs(childElem, fieldMap, attribList)
        if len(childElem) &gt; 0:
           readAllChildren(childElem, fieldMap, attribList, rowList)
        rowList.append(fieldMap.copy())
        print "len(rowList) =", len(rowList)
        childElem.clear()

def process_xml_original(xml_file):
    attribList=['name','age','id']
    context=etree.iterparse(xml_file, events=("start",))
    for row in parseXml(context,attribList):
        print "Row:", row
</snippet></ROW><ROW><id>6420893</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; test_xml = """\
... &lt;family&gt;
...     &lt;person name="somebody" id="5" /&gt;
...     &lt;person age="45" /&gt;
...     &lt;person name="Grandma" age="62"&gt;
...         &lt;child age="35" id="10" name="Mom"&gt;
...             &lt;grandchild age="7 and 3/4" /&gt;
...             &lt;grandchild id="12345" /&gt;
...         &lt;/child&gt;
...     &lt;/person&gt;
...     &lt;something-completely-different /&gt;
... &lt;/family&gt;
... """
&gt;&gt;&gt; process_xml_original(StringIO(test_xml))
start element: &lt;Element family at 0x105ca58&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
Found child: &lt;Element person at 0x105ca80&gt;
fieldMap: {'age': '', 'name': 'somebody', 'id': '5'}
len(rowList) = 1
Found child: &lt;Element person at 0x105c468&gt;
fieldMap: {'age': '45', 'name': '', 'id': ''}
len(rowList) = 2
Found child: &lt;Element person at 0x105c7b0&gt;
fieldMap: {'age': '62', 'name': 'Grandma', 'id': ''}
Found child: &lt;Element child at 0x106e468&gt;
fieldMap: {'age': '35', 'name': 'Mom', 'id': '10'}
Found child: &lt;Element grandchild at 0x106e148&gt;
fieldMap: {'age': '7 and 3/4', 'name': '', 'id': ''}
len(rowList) = 3
Found child: &lt;Element grandchild at 0x106e490&gt;
fieldMap: {'age': '', 'name': '', 'id': '12345'}
len(rowList) = 4
len(rowList) = 5
len(rowList) = 6
Found child: &lt;Element something-completely-different at 0x106e4b8&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
len(rowList) = 7
Row: {'age': '', 'name': 'somebody', 'id': '5'}
Row: {'age': '45', 'name': '', 'id': ''}
Row: {'age': '7 and 3/4', 'name': '', 'id': ''}
Row: {'age': '', 'name': '', 'id': '12345'}
Row: {'age': '', 'name': '', 'id': '12345'}
Row: {'age': '', 'name': '', 'id': '12345'}
Row: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element person at 0x105ca80&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element person at 0x105c468&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element person at 0x105c7b0&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element child at 0x106e468&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element grandchild at 0x106e148&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element grandchild at 0x106e490&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
start element: &lt;Element something-completely-different at 0x106e4b8&gt;
fieldMap: {'age': '', 'name': '', 'id': ''}
</snippet></ROW><ROW><id>6420893</id><snippet>rowList</snippet></ROW><ROW><id>6420893</id><snippet>element.clear()</snippet></ROW><ROW><id>6420893</id><snippet>yield</snippet></ROW><ROW><id>6420893</id><snippet>parseXml(..)</snippet></ROW><ROW><id>6420893</id><snippet>iterparse(..)</snippet></ROW><ROW><id>6420893</id><snippet>def do_something_with_data(data):
    """This just prints it out. Yours will probably be more interesting."""
    print "Got data: ", data

def process_xml_iterative(xml_file):
    # by using the default 'end' event, you start at the _bottom_ of the tree
    ATTRS = ('name', 'age', 'id')
    for event, element in etree.iterparse(xml_file):
        print "%s element: %s" % (event, element)
        data = {}
        for attr in ATTRS:
            data[attr] = element.get(attr, u"")
        do_something_with_data(data)
        element.clear()
        del element # for extra insurance
</snippet></ROW><ROW><id>6420893</id><snippet>&gt;&gt;&gt; print test_xml
&lt;family&gt;
    &lt;person name="somebody" id="5" /&gt;
    &lt;person age="45" /&gt;
    &lt;person name="Grandma" age="62"&gt;
        &lt;child age="35" id="10" name="Mom"&gt;
            &lt;grandchild age="7 and 3/4" /&gt;
            &lt;grandchild id="12345" /&gt;
        &lt;/child&gt;
    &lt;/person&gt;
    &lt;something-completely-different /&gt;
&lt;/family&gt;
&gt;&gt;&gt; process_xml_iterative(StringIO(test_xml))
end element: &lt;Element person at 0x105cc10&gt;
Got data:  {'age': u'', 'name': 'somebody', 'id': '5'}
end element: &lt;Element person at 0x106e468&gt;
Got data:  {'age': '45', 'name': u'', 'id': u''}
end element: &lt;Element grandchild at 0x106e148&gt;
Got data:  {'age': '7 and 3/4', 'name': u'', 'id': u''}
end element: &lt;Element grandchild at 0x106e490&gt;
Got data:  {'age': u'', 'name': u'', 'id': '12345'}
end element: &lt;Element child at 0x106e508&gt;
Got data:  {'age': '35', 'name': 'Mom', 'id': '10'}
end element: &lt;Element person at 0x106e530&gt;
Got data:  {'age': '62', 'name': 'Grandma', 'id': u''}
end element: &lt;Element something-completely-different at 0x106e558&gt;
Got data:  {'age': u'', 'name': u'', 'id': u''}
end element: &lt;Element family at 0x105c6e8&gt;
Got data:  {'age': u'', 'name': u'', 'id': u''}
</snippet></ROW><ROW><id>6420893</id><snippet>'end'</snippet></ROW><ROW><id>6420893</id><snippet>{'age': u'', 'id': u'', 'name': u''}</snippet></ROW><ROW><id>6420893</id><snippet>xml.sax</snippet></ROW><ROW><id>6420893</id><snippet>import xml.sax

class AttributeGrabber(xml.sax.handler.ContentHandler):
    """SAX Handler which will store selected attribute values."""
    def __init__(self, target_attrs=()):
        self.target_attrs = target_attrs

    def startElement(self, name, attrs):
        print "Found element: ", name
        data = {}
        for target_attr in self.target_attrs:
            data[target_attr] = attrs.get(target_attr, u"")

        # (no xml trees or elements created at all)
        do_something_with_data(data)

def process_xml_sax(xml_file):
    grabber = AttributeGrabber(target_attrs=('name', 'age', 'id'))
    xml.sax.parse(xml_file, grabber)
</snippet></ROW><ROW><id>6420893</id><snippet>def process_xml_batch(xml_file, batch_size=10):
    ATTRS = ('name', 'age', 'id')
    batch = []
    for event, element in etree.iterparse(xml_file):
        data = {}
        for attr in ATTRS:
            data[attr] = element.get(attr, u"")
        batch.append(data)
        element.clear()
        del element

        if len(batch) == batch_size:
            do_something_with_batch(batch)
            # Or, if you want this to be a genrator:
            # yield batch
            batch = []
    if batch:
        # there are leftover items
        do_something_with_batch(batch) # Or, yield batch
</snippet></ROW><ROW><id>6421171</id><snippet>get</snippet></ROW><ROW><id>6421171</id><snippet>get</snippet></ROW><ROW><id>6421171</id><snippet>CreateView</snippet></ROW><ROW><id>6421171</id><snippet>ModelFormMixin</snippet></ROW><ROW><id>6421171</id><snippet>form_valid</snippet></ROW><ROW><id>6421171</id><snippet>def form_valid(self, form):
    messages.success(self.request, "Success", extra_tags='msg')
    return super(UserCreateView, self).form_valid(form)  
    # ModelFormMixin will now save
    # FormMixin will now redirect to success_url()
    # override above behavior if you need to do something with the object
</snippet></ROW><ROW><id>6422020</id><snippet>if int(unreadCount) &gt; 10:
    os.system('ls')
</snippet></ROW><ROW><id>6422072</id><snippet>bitarray.bitarray(n)</snippet></ROW><ROW><id>6422072</id><snippet>n</snippet></ROW><ROW><id>6422072</id><snippet>bitarray</snippet></ROW><ROW><id>6422072</id><snippet>pack/unpack</snippet></ROW><ROW><id>6422246</id><snippet>In [1]: "this is a long sentence".split()
Out[1]: ['this', 'is', 'a', 'long', 'sentence']

In [2]: "this is a long sentence".split()[0]
Out[2]: 'this'
</snippet></ROW><ROW><id>6422344</id><snippet>bool</snippet></ROW><ROW><id>6422344</id><snippet>string1 or string2 or string3 # is the same as
(string1 or string2) or string3
# string1 or string2 is '' or 'Trondheim', and as
# '' is logically False, this results in 'Trondheim'
# 'Trondheim' or string3 is short-circuited and never evaluated,
# because a non-empty string is logically True
</snippet></ROW><ROW><id>6422793</id><snippet>my_list[::2]</snippet></ROW><ROW><id>6422793</id><snippet>my_list[1::2]</snippet></ROW><ROW><id>6422906</id><snippet>xsinil = dataFact.get('...', False) in ('true', '1')
</snippet></ROW><ROW><id>6422906</id><snippet>True</snippet></ROW><ROW><id>6422906</id><snippet>xsinil</snippet></ROW><ROW><id>6422906</id><snippet>get</snippet></ROW><ROW><id>6422906</id><snippet>True</snippet></ROW><ROW><id>6422906</id><snippet>'true'</snippet></ROW><ROW><id>6422906</id><snippet>'1'</snippet></ROW><ROW><id>6423064</id><snippet>''.join(map(unichr, lst))</snippet></ROW><ROW><id>6423064</id><snippet>''.join(map(unichr, [65,66,67])) # outputs ABC
</snippet></ROW><ROW><id>6423571</id><snippet>return '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (
                     reverse('admin:applabel_customer_change', (self.customer.id,)),
                     self.customer.name # add more stuff here
             )
</snippet></ROW><ROW><id>6423780</id><snippet>EmbeddedJython.class.getResourceAsStream("MyPlugin.py");</snippet></ROW><ROW><id>6423780</id><snippet>getResourceAsStream</snippet></ROW><ROW><id>6423780</id><snippet>null</snippet></ROW><ROW><id>6423780</id><snippet>getResourceAsStream</snippet></ROW><ROW><id>6423780</id><snippet>private File pythonFile = new File('MyScirpt.py');</snippet></ROW><ROW><id>6423780</id><snippet>getResourceAsStream(pythonFile.getAbsolutePath());</snippet></ROW><ROW><id>6423780</id><snippet>getResourceAsStream</snippet></ROW><ROW><id>6423780</id><snippet>private File pythonFile = new File('MyScirpt.py');
InputStream is = new FileInputStream(pythonFile);
</snippet></ROW><ROW><id>6423780</id><snippet>is</snippet></ROW><ROW><id>6423941</id><snippet>==</snippet></ROW><ROW><id>6423941</id><snippet>__eq__</snippet></ROW><ROW><id>6423941</id><snippet>__dict__</snippet></ROW><ROW><id>6423941</id><snippet>class MyClass:

    def __eq__(self, other) : 
        return self.__dict__ == other.__dict__
</snippet></ROW><ROW><id>6424021</id><snippet>self</snippet></ROW><ROW><id>6424021</id><snippet>self</snippet></ROW><ROW><id>6424021</id><snippet>self.__dict__ = obj.__dict__</snippet></ROW><ROW><id>6424021</id><snippet>__dict__</snippet></ROW><ROW><id>6424021</id><snippet>@classmethod
def save_params(cls, obj, filename):
    with open(filename, "w") as f:
        yaml.dump(obj, f, default_flow_style=False)

@classmethod   
def load_params(cls, obj, filename):
    with open(filename, "r") as f:
        obj = yaml.load(f)
        print obj.aero_soot
        return obj
</snippet></ROW><ROW><id>6424285</id><snippet>&gt;&gt;&gt; from OpenGL.GL.ARB.draw_elements_base_vertex import *
&gt;&gt;&gt; glDrawElementsBaseVertex
&lt;OpenGL.platform.baseplatform.glDrawElementsBaseVertex object at 0x031D7B30&gt;
</snippet></ROW><ROW><id>6424688</id><snippet>foo</snippet></ROW><ROW><id>6424688</id><snippet>import pickle</snippet></ROW><ROW><id>6424688</id><snippet>with open("savegame", "wb") as f:
    pickle.dump(foo, f)
</snippet></ROW><ROW><id>6424688</id><snippet>with open("savegame", "rb") as f:
    foo = pickle.load(f)
</snippet></ROW><ROW><id>6424724</id><snippet>arr = [[1, 2], [1, 3], [1, 4]]
[x.append(100) for x in arr]
</snippet></ROW><ROW><id>6424724</id><snippet>map(lambda x: x.append(100), arr)
</snippet></ROW><ROW><id>6424724</id><snippet>res = map(lambda x: x + [100], arr)
</snippet></ROW><ROW><id>6424821</id><snippet>&lt;tr&gt;&lt;th style="text-align: left"&gt;{{note.datetime}} {{note.datetime.time}} - Posted by {{note.user}}&lt;/th&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>6425085</id><snippet>from collections import defaultdict

linesort = [['Me', 1, 596], ['Mine', 1, 551], ['Myself', 1, 533], ['Myself', 1, 624],
            ['Myself', 1, 656], ['Myself', 1, 928], ['Theirs', 1, 720], 
            ['Theirs', 1, 1921], ['Them', 1, 716], ['Themselves', 1, 527]]

d = defaultdict(list)
for line in linesort:
    d[line[0]].append(line[1:])


output = {}
for x,val in d.items():
    svals = [y[1] for y in val]
    output[x] = [sum([y[0] for y in val]), sum(svals) / len(svals)] # need to be modified if you need float value

print output
&gt;&gt;&gt; {'Mine': [1, 551], 'Theirs': [2, 1320], 'Me': [1, 596], 'Them': [1, 716], 'Themselves': [1, 527], 'Myself': [4, 685]}
</snippet></ROW><ROW><id>6425085</id><snippet>from itertools import groupby

res = {}
for key, gen in groupby(sorted(linesort), key=lambda x: x[0]):
    val = list(gen)
    svals = [y[2] for y in val]
    res[key] = [sum([y[1] for y in val]), sum(svals) / float(len(svals))]
</snippet></ROW><ROW><id>6425085</id><snippet>from itertools import groupby

res = []
for key, gen in groupby(sorted(linesort), key=lambda x: x[0]):
    val = list(gen)
    svals = [y[2] for y in val]
    res.append([key, sum([y[1] for y in val]), sum(svals) / float(len(svals))])

print res
&gt;&gt;&gt; [['Me', 1, 596.0], ['Mine', 1, 551.0], ['Myself', 4, 685.25], ['Theirs', 2, 1320.5], ['Them', 1, 716.0], ['Themselves', 1, 527.0]]
</snippet></ROW><ROW><id>6425115</id><snippet>Tag</snippet></ROW><ROW><id>6425115</id><snippet>tag</snippet></ROW><ROW><id>6425940</id><snippet>content = requests.get(url = url).content
rss = parse(content).getroot()
</snippet></ROW><ROW><id>6426230</id><snippet>filedata</snippet></ROW><ROW><id>6426230</id><snippet>if filedata.file: # field really is an upload
    with file("Beautiful.mp3", 'w') as outfile:
        outfile.write(filedata.file.read())
</snippet></ROW><ROW><id>6426230</id><snippet>read()</snippet></ROW><ROW><id>6426230</id><snippet>readlines()</snippet></ROW><ROW><id>6426230</id><snippet>readline()</snippet></ROW><ROW><id>6426557</id><snippet>f.readlines('mike_only_genes.csv')
</snippet></ROW><ROW><id>6426557</id><snippet>f.readlines()
</snippet></ROW><ROW><id>6426633</id><snippet>convert *.jpg foo.pdf
</snippet></ROW><ROW><id>6426928</id><snippet>os.listdir</snippet></ROW><ROW><id>6426928</id><snippet># a string that is unicode+raw (escapes \)
path = ur"E:\pub\private\desktop"
print os.listdir(path)
# [u'\xa6.txt', u'\u2560.txt']
</snippet></ROW><ROW><id>6427001</id><snippet>areas = Column(u'AREAS', VARCHAR(80))

@property
def areasList(self):
    return self.areas.split(';')

@areasList.setter
def areasList(self, areas):
    self.areas = ';'.join(areas)
</snippet></ROW><ROW><id>6427001</id><snippet>areasList = SelectMultipleField(u'Test Areas', choices=TestArea.names())
</snippet></ROW><ROW><id>6427086</id><snippet>QGraphicsView</snippet></ROW><ROW><id>6427086</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>6427086</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>6427086</id><snippet>QGraphicsView</snippet></ROW><ROW><id>6427086</id><snippet>MooView</snippet></ROW><ROW><id>6427086</id><snippet>QGraphicsView</snippet></ROW><ROW><id>6427086</id><snippet>MooGraphicsScene.py</snippet></ROW><ROW><id>6427086</id><snippet>main.py</snippet></ROW><ROW><id>6427086</id><snippet>from PyQt4 import QtCore, QtGui

class MooGraphicsScene(QtGui.QGraphicsScene):
    def __init__(self, parent = None):
        QtGui.QGraphicsScene.__init__(self, parent)

    def dragMoveEvent(selfs, e):
        pass

    def dropEvent(self, e):
        print("Drop fired!")

    def dragEnterEvent(self, e):
        e.accept()
        print("Drag entered!")
</snippet></ROW><ROW><id>6427086</id><snippet>import sys

from PyQt4 import QtCore, QtGui, QtOpenGL
from window import Ui_MainWindow
from MooGraphicsScene import MooGraphicsScene

class Main(QtGui.QMainWindow):
    def __init__(self, parent = None):
        QtGui.QWidget.__init__(self, parent)

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.setWindowTitle('Hello, Qt!')

        # Setup Workspace
        self.scene = MooGraphicsScene()
        self.ui.workspace_view.setScene(self.scene)

        rect = QtCore.QRectF(0, 0, 1000, 1000)
        self.scene.setSceneRect(0, 0, rect.width(), rect.height())

        icon = QtGui.QIcon(QtGui.QPixmap(":/Images/50.png"))
        text = "50's element"
        item = QtGui.QListWidgetItem(icon, text)
        self.ui.element_list.addItem(item)

        icon = QtGui.QIcon(QtGui.QPixmap(":/Images/40.png"))
        text = "40's element"
        item = QtGui.QListWidgetItem(icon, text)
        self.ui.element_list.addItem(item)

if (__name__ == "__main__"):
    app = QtGui.QApplication(sys.argv)
    myApp = Main()
    myApp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>6427678</id><snippet>def readbytes(file):
    while True:
        c = file.read(1)
        if c == '':
            return
        yield c

for c in readbytes(sys.stdin):
    print c
</snippet></ROW><ROW><id>6427678</id><snippet>iter</snippet></ROW><ROW><id>6427678</id><snippet>iter</snippet></ROW><ROW><id>6427678</id><snippet>def until(nextvalue, pred):
    while True:
        value = nextvalue()
        if pred(value):
            return
        yield value

for c in until(lambda: sys.stdin.read(1), lambda x: x == ''):
    print c
</snippet></ROW><ROW><id>6427818</id><snippet>import re

data = ":::::::::::BLAH:::::::::, ::::::::MORE:::::::"

def replace(matchobj):
  # this seems to work:
  tag = matchobj.group(0)
  findkey = matchobj.group(1)

  print findkey

  return '********************  NONSENSE  ********************'


data = re.sub(r':::(?P&lt;inner&gt;[A-Z,a-z]+):::', replace, data)

print data
</snippet></ROW><ROW><id>6427818</id><snippet>BLAH
MORE
::::::::********************  NONSENSE  ********************::::::, :::::********************  NONSENSE  ********************::::
</snippet></ROW><ROW><id>6427939</id><snippet>d = {}
with open(f) as fin:
    for l in fin:
        x = l.split()
        d[x[0][:-1]] = int(x[1])
return d
</snippet></ROW><ROW><id>6428013</id><snippet>collections.deque</snippet></ROW><ROW><id>6428013</id><snippet>del outer[0]</snippet></ROW><ROW><id>6428270</id><snippet>def my_gen(x=None):
    while True:
        if x is None:
            x = yield X()
        else:
            x = yield f(x)
</snippet></ROW><ROW><id>6428270</id><snippet>None</snippet></ROW><ROW><id>6428270</id><snippet>next()</snippet></ROW><ROW><id>6428270</id><snippet>None</snippet></ROW><ROW><id>6428270</id><snippet>f()</snippet></ROW><ROW><id>6428270</id><snippet>send(None)</snippet></ROW><ROW><id>6428270</id><snippet>next()</snippet></ROW><ROW><id>6428324</id><snippet>request = urllib2.Request('http://someurl.com')
response = urllib2.urlopen(request)
if response.geturl() != 'http://someurl.com':
    print "redirected"
else:
    print "not redirected"   
</snippet></ROW><ROW><id>6428625</id><snippet>function rotate(x, y, xm, ym, a) {
    var cos = Math.cos,
        sin = Math.sin,

        a = a * Math.PI / 180, // Convert to radians because that's what
                               // JavaScript likes

        // Subtract midpoints, so that midpoint is translated to origin
        // and add it in the end again
        xr = (x - xm) * cos(a) - (y - ym) * sin(a)   + xm,
        yr = (x - xm) * sin(a) + (y - ym) * cos(a)   + ym;

    return [xr, yr];
}

rotate(16, 32, 16, 16, 30); // [8, 29.856...]
</snippet></ROW><ROW><id>6429114</id><snippet> Radiobutton (self,
                 text = "Cat's Cradle by Kurt Vonnegut",
                 variable = self.choice,
                 value = " \"Here we are, trapped in the amber of the moment. There is no why!\" ",
                 command = self.update_text.grid (row = 4, column = 1, sticky = W)) #&lt;-- Missing that second paren
</snippet></ROW><ROW><id>6429125</id><snippet>for name in root.namelist():
    if name.find("debug") &gt;= 0:
        for line in root.read(name).split("\n"):
            if line.find("BROKER_LOGON") &gt;= 0:
                print line
</snippet></ROW><ROW><id>6429168</id><snippet>$('#upload_file').submit(function() { 
    var options = { 
        clearForm: true        // clear all form fields after successful submit 
    }; 
    $(this).ajaxSubmit(options);
    return false; 
});

$('[name=submit]').click(function(){
    $('#upload_file').submit();        
});
</snippet></ROW><ROW><id>6429168</id><snippet>&lt;form id="upload_file" action="{{upload_url}}" enctype="multipart/form-data" method="post"&gt;
        &lt;input type="file" name="file"&gt;
        &lt;input type="button" name="submit" value="Submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>6429179</id><snippet>condition_*</snippet></ROW><ROW><id>6429179</id><snippet>conditions</snippet></ROW><ROW><id>6429179</id><snippet>conditions=[1]*5 # initialize conditions as you wish
for line in input_file:
    for i,condition in enumerate(conditions):
        if condition:
            conditions[i]=My_Function(A_tuple[i],B_tuple[i])
</snippet></ROW><ROW><id>6429504</id><snippet>fileinput.input(...)</snippet></ROW><ROW><id>6429504</id><snippet>if</snippet></ROW><ROW><id>6429504</id><snippet>break</snippet></ROW><ROW><id>6429504</id><snippet>temp</snippet></ROW><ROW><id>6429504</id><snippet>fileinput.input</snippet></ROW><ROW><id>6429504</id><snippet>temp</snippet></ROW><ROW><id>6429504</id><snippet>output</snippet></ROW><ROW><id>6429504</id><snippet>elif str(result) not in line:</snippet></ROW><ROW><id>6429504</id><snippet>else</snippet></ROW><ROW><id>6429504</id><snippet>result</snippet></ROW><ROW><id>6429504</id><snippet>result == None</snippet></ROW><ROW><id>6429504</id><snippet>str(result) == 'None'</snippet></ROW><ROW><id>6429504</id><snippet>None</snippet></ROW><ROW><id>6429504</id><snippet>fileinput.input()</snippet></ROW><ROW><id>6429504</id><snippet>FileInput</snippet></ROW><ROW><id>6429504</id><snippet>fileinput</snippet></ROW><ROW><id>6429504</id><snippet>for filename in walk_dir(directory, (".log", ".txt")):
    for line in fileinput.input(filename):
        result = regex.search(whitespace.sub('', line))
        if result:
            template = "\nLine: {0}\nFile: {1}\nString Type: {2}\n\n"
            output = template.format(fileinput.filelineno(), fileinput.filename(), result.group())
            print output
            break   # (assuming you only want to print the first result)
    else:
        ouput = fileinput.filename()
        print output
        temp.write(output)
        break
</snippet></ROW><ROW><id>6429504</id><snippet>else</snippet></ROW><ROW><id>6429504</id><snippet>for</snippet></ROW><ROW><id>6429504</id><snippet>else</snippet></ROW><ROW><id>6429504</id><snippet>else</snippet></ROW><ROW><id>6429504</id><snippet>matches = []
for line in fileinput.input(filename):
    if searchline(line):
        matches.append(line)
if matches:
    print template.format(matches)
else:
    print fileinput.filename()
</snippet></ROW><ROW><id>6429716</id><snippet>class Search(object):
    def __init__(self):
        self.sorters = []
        self.filters = []
</snippet></ROW><ROW><id>6429783</id><snippet>socket</snippet></ROW><ROW><id>6429783</id><snippet>pexpect</snippet></ROW><ROW><id>6429783</id><snippet>paramiko</snippet></ROW><ROW><id>6429783</id><snippet>*</snippet></ROW><ROW><id>6429783</id><snippet>mydata1</snippet></ROW><ROW><id>6429783</id><snippet>import pexpect as px
import sys

def send_this(child, retcode, COMMAND):
    if retcode == 2:
        child.sendline(COMMAND)
    else:
        raise RuntimeError, "Could not complete login, due to socket error"

def expect_this(child, EXPR, timeout = 10):
    return child.expect([px.TIMEOUT, px.EOF, EXPR], timeout = timeout)

HOST = '192.168.49.49'
CMD1 = '1I'
PROMPT = '\*'     #Note: you might not need the backslash
TIMEOUT = 10

child = px.spawn('telnet %s' % HOST)
retcode = expect_this(child, PROMPT)
send_this(child, retcode, CMD1)
retcode = expect_this(child, PROMPT)
mydata1 = child.before    # mydata has the output from CMD1
</snippet></ROW><ROW><id>6429840</id><snippet>wrapper</snippet></ROW><ROW><id>6429841</id><snippet>response.info()</snippet></ROW><ROW><id>6429841</id><snippet>mimetools.Message</snippet></ROW><ROW><id>6429841</id><snippet>urllib2</snippet></ROW><ROW><id>6429841</id><snippet>rfc822.Message</snippet></ROW><ROW><id>6429841</id><snippet>getheader()</snippet></ROW><ROW><id>6429841</id><snippet>response = urllib2.urlopen("...")
print response.info().getheader("Set-Cookie") # get the value of the Set-Cookie header
</snippet></ROW><ROW><id>6429982</id><snippet>--verbosity0</snippet></ROW><ROW><id>6429982</id><snippet>--verbosity2</snippet></ROW><ROW><id>6429982</id><snippet>--verbosity0</snippet></ROW><ROW><id>6429982</id><snippet>--verbosity9</snippet></ROW><ROW><id>6430096</id><snippet>def p_things(p):
    '''
    things : things thing
    things : thing
    '''
    if len(p) == 2:
        p[0] = [p[1]]
    else:
        p[0] = p[1]
        p[0].append(p[2])
</snippet></ROW><ROW><id>6430096</id><snippet>things</snippet></ROW><ROW><id>6430177</id><snippet>python -m cProfile script.py
</snippet></ROW><ROW><id>6430177</id><snippet>import cProfile 
cProfile.run('foo()')
</snippet></ROW><ROW><id>6430177</id><snippet>foo</snippet></ROW><ROW><id>6430700</id><snippet>a = [float(x) for x in histodict[str(start)].itervalues()]
b = [float(x) for x in histodict[str(end)].itervalues()]
print pearsonr(a,b)
</snippet></ROW><ROW><id>6431054</id><snippet>q = ['apple', 'peach', 'pear', 'watermelon', 'strawberry']
w = ['pineapple', 'peach', 'watermelon', 'kiwi']
t = list(set(q) &amp; set(w))
</snippet></ROW><ROW><id>6431054</id><snippet>['watermelon', 'peach']
</snippet></ROW><ROW><id>6431089</id><snippet>  def SetData(self, cols, data):
    for idx, row in enumerate(data):
      item = dict((k, v.rstrip() if hasattr(v, 'rstrip') else v) for k, v in zip(cols, row))

      self.data[idx] = item

      self.byid[row[0]] = item
</snippet></ROW><ROW><id>6431089</id><snippet>self.byid[id][field] = newval</snippet></ROW><ROW><id>6431284</id><snippet>import urllib

s = u"ó"
print urllib.quote(s.encode("utf-8"))
</snippet></ROW><ROW><id>6431284</id><snippet>%C3%B3</snippet></ROW><ROW><id>6431412</id><snippet>with open('myfile') as fh:
  for line in fh:
    if line == match: # Some actual code here in your conditional:
      for i in range(5):
        additionalData = next(fh)
</snippet></ROW><ROW><id>6431412</id><snippet>for line in fh</snippet></ROW><ROW><id>6431547</id><snippet>ImportError</snippet></ROW><ROW><id>6431547</id><snippet>try:
    from google.appengine.tools.dev_appserver import HardenedModulesHook
    HardenedModulesHook._WHITE_LIST_C_MODULES += ['_counter']
except ImportError:
    HardenedModulesHook = None
</snippet></ROW><ROW><id>6431547</id><snippet>pass</snippet></ROW><ROW><id>6431547</id><snippet>HardenedModulesHook</snippet></ROW><ROW><id>6431670</id><snippet>tar</snippet></ROW><ROW><id>6431670</id><snippet>tar</snippet></ROW><ROW><id>6431777</id><snippet>from rdflib import Graph, Literal, Namespace, RDF, URIRef

graph = Graph()
skos = Namespace('http://www.w3.org/2004/02/skos/core#')
graph.bind('skos', skos)

graph.add((URIRef('URI'), RDF['type'], skos['Concept']))
graph.add((URIRef('URI'), skos['prefLabel'], Literal('Temp', lang='en')))
graph.add((URIRef('URI'), skos['related'], URIRef('URI-Related')))

print graph.serialize(format='pretty-xml')
</snippet></ROW><ROW><id>6431777</id><snippet>&lt;rdf:RDF
  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'
  xmlns:skos='http://www.w3.org/2004/02/skos/core#'
&gt;
  &lt;skos:Concept rdf:about="URI"&gt;
    &lt;skos:related rdf:resource="URI-Related"/&gt;
    &lt;skos:prefLabel xml:lang="en"&gt;Temp&lt;/skos:prefLabel&gt;
  &lt;/skos:Concept&gt;
&lt;/rdf:RDF&gt;
</snippet></ROW><ROW><id>6431904</id><snippet>wb = xlwt.Workbook()
ws = wb.add_sheet('Sheet1')
for r, row in enumerate(data):
    for c, col in enumerate(row):
        ws.write(r, 2 + c, label=col)
</snippet></ROW><ROW><id>6431936</id><snippet>N = { 'd' : 3 }
four = Template(u'number:{{ d + 1 }}').render(**N)
</snippet></ROW><ROW><id>6432068</id><snippet>import mechanize
import pprint
import lxml.etree as ET
import lxml.html as lh
import urllib
import urllib2

browser=mechanize.Browser()
browser.open("http://www.cbs.gov.il/ts/ID40d250e0710c2f/databank/series_func_e_v1.html?level_1=31&amp;level_2=1&amp;level_3=7")
browser.select_form(nr=0)
</snippet></ROW><ROW><id>6432068</id><snippet>pprint.pprint(browser.form.controls[-2].items)
# [&lt;Item name='1' id=None selected='selected' contents='Volume of orders for the domestic market' value='1' label='Volume of orders for the domestic market'&gt;,
#  &lt;Item name='2' id=None contents='Orders for export' value='2' label='Orders for export'&gt;,
#  &lt;Item name='3' id=None contents='The volume of production' value='3' label='The volume of production'&gt;,
#  &lt;Item name='4' id=None contents='The volume of sales' value='4' label='The volume of sales'&gt;,
#  &lt;Item name='5' id=None contents='Stocks of finished goods' value='5' label='Stocks of finished goods'&gt;,
#  &lt;Item name='6' id=None contents='Access to credit for the company' value='6' label='Access to credit for the company'&gt;,
#  &lt;Item name='7' id=None contents='Change in the number of employees' value='7' label='Change in the number of employees'&gt;]

choices=[item.attrs['value'] for item in browser.form.controls[-2].items]
print(choices)
# ['1', '2', '3', '4', '5', '6', '7']

browser.form['name_tatser']=['2']
browser.submit()
</snippet></ROW><ROW><id>6432068</id><snippet>browser.select_form(nr=1)

choices=[item.attrs['value'] for item in browser.form.controls[-2].items]
print(choices)
# ['1576', '1581', '1594', '1595', '1596', '1598', '1597', '1593']

browser.form['name_ser']=['1576']
browser.submit()

browser.select_form(nr=2)

choices=[item.attrs['value'] for item in browser.form.controls[-2].items]
print(choices)
# ['32', '33', '34', '35', '36', '37', '38', '39', '40', '41']

browser.form['data_kind']=['33']
browser.submit()

browser.select_form(nr=3)
browser.form['ybegin']=['2010']
browser.form['mbegin']=['1']
browser.form['yend']=['2011']
browser.form['mend']=['5']
browser.submit()
</snippet></ROW><ROW><id>6432068</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>6432068</id><snippet>lxml</snippet></ROW><ROW><id>6432068</id><snippet>lxml</snippet></ROW><ROW><id>6432068</id><snippet>content=browser.response().read()
doc=lh.fromstring(content)
params=dict((elt.attrib['name'],elt.attrib['value']) for elt in doc.xpath('//input'))
params['king_format']=2
url='http://www.cbs.gov.il/ts/databank/data_ts_format_e.xml'
params=urllib.urlencode(dict((p,params[p]) for p in [
    'king_format',
    'tod',
    'time_unit_list',
    'mend',
    'yend',
    'co_code_list',
    'name_tatser_list',
    'ybegin',
    'mbegin',
    'code_list',
    'co_name_tatser_list',
    'level_1',
    'level_2',
    'level_3']))

browser.open(url+'?'+params)
content=browser.response().read()
</snippet></ROW><ROW><id>6432068</id><snippet>iso-8859-8-i</snippet></ROW><ROW><id>6432068</id><snippet>iso-8859-8-i</snippet></ROW><ROW><id>6432068</id><snippet>iso-8859-8</snippet></ROW><ROW><id>6432068</id><snippet># A hack, since I do not know how to deal with iso-8859-8-i
content=content.replace('iso-8859-8-i','iso-8859-8')
doc=ET.fromstring(content)
</snippet></ROW><ROW><id>6432068</id><snippet>for series in doc.xpath('/series_ts/Data_Set/Series'):
    print(series.attrib)
    # {'calc_kind': 'Weighted',
    #  'name_ser': 'Number Of Companies That Answered',
    #  'get_time': '2011-06-21',
    #  'name_topic': "Business Tendency Survey - Distributions Of Businesses By Industry, Kind Of Questions And Answers  - Manufacturing - Company'S Experience Over The Past Three Months - Orders For Export",
    #  'time_unit': 'Month',
    #  'code_series': '22978',
    #  'data_kind': '5-10 Employed Persons',
    #  'decimals': '0',
    #  'unit_kind': 'Number'}

    for elt in series.xpath('obs'):
        print(elt.attrib)
        # {'time_period': ' 2010-12', 'value': '40'}
        # {'time_period': ' 2011-01', 'value': '38'}
        # {'time_period': ' 2011-02', 'value': '40'}
        # {'time_period': ' 2011-03', 'value': '36'}
        # {'time_period': ' 2011-04', 'value': '30'}
        # {'time_period': ' 2011-05', 'value': '33'}
</snippet></ROW><ROW><id>6432072</id><snippet>a = numpy.empty_like (b)
a[:] = b
</snippet></ROW><ROW><id>6432072</id><snippet>copyto</snippet></ROW><ROW><id>6432171</id><snippet>&gt;&gt;&gt; import scipy.sparse
&gt;&gt;&gt; X = scipy.sparse.rand(1000,1000, density=0.003)
&gt;&gt;&gt; X = scipy.sparse.csr_matrix(X)
&gt;&gt;&gt; Y = X.copy()
&gt;&gt;&gt; Y.data **= 3
&gt;&gt;&gt; 
&gt;&gt;&gt; abs((X.toarray()**3-Y.toarray())).max()
0.0
</snippet></ROW><ROW><id>6432308</id><snippet>print str</snippet></ROW><ROW><id>6432308</id><snippet>str</snippet></ROW><ROW><id>6432308</id><snippet>&gt;&gt; str = '192.168.1.1'
&gt;&gt;&gt; str = str.replace('.','\.')
&gt;&gt;&gt; str
'192\\.168\\.1\\.1'
&gt;&gt;&gt; print str
192\.168\.1\.1
</snippet></ROW><ROW><id>6432308</id><snippet>\</snippet></ROW><ROW><id>6432755</id><snippet>import numpy

n = 1000
pairs = [(.3, 'a'), (.3, 'b'), (.4, 'c')]
probabilities = numpy.random.multinomial(n, zip(*pairs)[0])
result = zip(probabilities, zip(*pairs)[1])
# [(299, 'a'), (299, 'b'), (402, 'c')]
[x[0] * x[1] for x in result]
# ['aaaaaaaaaa', 'bbbbbbbbbbbbbbbbbbb', 'cccccccccccccccccccc']
</snippet></ROW><ROW><id>6432757</id><snippet>import unittest

class TestSomething(unittest.TestCase):

    def setUp(self):
        self.message = "does this work"

    def test_message_is_expected(self):
        self.assertEquals("does this work", self.message)


if __name__ == '__main__':
     unittest.main()
</snippet></ROW><ROW><id>6432836</id><snippet>popdict = {}
incdict = {}
for ix, city in enumerate(WyomingCnty):
  popdict[city] = dict(zip(Years, popdata.col_values(colx=ix + 1,start_rowx=1,end_rowx=None)
  incdict[city] = dict(zip(Years, incomedata.col_values(colx=ix + 1,start_rowx=1,end_rowx=None)
</snippet></ROW><ROW><id>6432907</id><snippet>izip</snippet></ROW><ROW><id>6432907</id><snippet>&gt;&gt;&gt; list(izip(*izip(range(10), range(10))))
[(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)]
</snippet></ROW><ROW><id>6432907</id><snippet>def iunzip_v2(iterable):
    _tmp, iterable = itertools.tee(iterable, 2)
    iters = itertools.tee(iterable, len(_tmp.next()))
    return tuple((elem[i] for elem in it) for i, it in enumerate(iters))
</snippet></ROW><ROW><id>6432907</id><snippet>i</snippet></ROW><ROW><id>6432907</id><snippet>tuple</snippet></ROW><ROW><id>6432907</id><snippet>&gt;&gt;&gt; iunzip_v2((range(3), range(3)))
(&lt;generator object &lt;genexpr&gt; at 0x1004d4a50&gt;, &lt;generator object &lt;genexpr&gt; at 0x1004d4aa0&gt;, &lt;generator object &lt;genexpr&gt; at 0x1004d4af0&gt;)
</snippet></ROW><ROW><id>6432907</id><snippet>elem[i]</snippet></ROW><ROW><id>6432907</id><snippet>it</snippet></ROW><ROW><id>6432907</id><snippet>i</snippet></ROW><ROW><id>6432907</id><snippet>itemgetter(i)</snippet></ROW><ROW><id>6432907</id><snippet>i</snippet></ROW><ROW><id>6433040</id><snippet>    plt.axvspan(x, x2, facecolor='g', alpha=0.5)
</snippet></ROW><ROW><id>6433099</id><snippet>import textwrap
from os.path import join

from lxml import etree

# string to Element
tree = etree.XML(textwrap.dedent('''
  &lt;foo_tag&gt;
    foo text
    &lt;bar_tag some_attr='ok'&gt;bar text&lt;/bar_tag&gt;
  &lt;/foo_tag&gt;
  '''))
print 'root text: ' , tree.text
print 'pretty_print: '
print etree.tostring(tree, pretty_print=True)
print 'last child: (%s) (%s)' % (tree[-1].tag, tree[-1].text)
print

# filename to ElementTree
tree = etree.parse('some_file.xhtml')

def recurse(root, depth):
  line = '  ' * depth + root.tag + ' {%s}' % ', '.join(root.attrib.keys())
  if root.text:
    line += ' &lt;%s&gt;' % root.text.strip()
  print line
  for child in root:
    recurse(child, depth + 1)
print 'recurse tree:'
recurse(tree.getroot(), 0)
print

print 'find title: ', tree.findtext('html/head/title')
print 'find title again: ', tree.find('html').find('head').find('title').text
</snippet></ROW><ROW><id>6433099</id><snippet>some_file.xhtml</snippet></ROW><ROW><id>6433099</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;root&gt;
  &lt;metadata/&gt;
  &lt;html&gt;
    &lt;head&gt;
      &lt;title style="bold"&gt;Page Title&lt;/title&gt;
      &lt;span&gt;Here's a &lt;a href="google.com"&gt;link&lt;/a&gt; to somewhere.&lt;/span&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#ffffff"&gt;Hello, World!&lt;/body&gt;
  &lt;/html&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>6433133</id><snippet>def iset(iterable):
    for i, x in enumerate(iterable):
        def setter(value):
            iterable[i] = value
        yield setter, x
a = range(10)
for set_x, x in iset(a):
    set_x(x * 2)
print a
</snippet></ROW><ROW><id>6433133</id><snippet>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</snippet></ROW><ROW><id>6433422</id><snippet>setattr</snippet></ROW><ROW><id>6433422</id><snippet>class ChineseFlashcards:
    en = ChineseFlashcards_en()

setattr(ChineseFlashcards, 'zh-cn', ChineseFlashcards_zh_cn())
</snippet></ROW><ROW><id>6433503</id><snippet>bind()</snippet></ROW><ROW><id>6433503</id><snippet>add</snippet></ROW><ROW><id>6433503</id><snippet>bind()</snippet></ROW><ROW><id>6433503</id><snippet>''</snippet></ROW><ROW><id>6433503</id><snippet>"+"</snippet></ROW><ROW><id>6433503</id><snippet>unbind()</snippet></ROW><ROW><id>6433503</id><snippet>bind()</snippet></ROW><ROW><id>6433503</id><snippet>funcid</snippet></ROW><ROW><id>6433503</id><snippet>funcid</snippet></ROW><ROW><id>6433503</id><snippet>unbind()</snippet></ROW><ROW><id>6433503</id><snippet>self.btn_funcid = self.DrawArea.bind("&lt;Button 1&gt;", self.my_button_callback, "+")

# Then some time later, to remove just the 'my_button_callback':
self.DrawArea.unbind("&lt;Button 1&gt;", self.btn_funcid)

# But if you want to remove all of the callbacks for the event:
self.DrawArea.unbind("&lt;Button 1&gt;")
</snippet></ROW><ROW><id>6433590</id><snippet>pickle</snippet></ROW><ROW><id>6433590</id><snippet>pickle.dumps(obj)</snippet></ROW><ROW><id>6433590</id><snippet>pickle.loads(my_str)</snippet></ROW><ROW><id>6433590</id><snippet>marshal</snippet></ROW><ROW><id>6433590</id><snippet>json</snippet></ROW><ROW><id>6433890</id><snippet>order</snippet></ROW><ROW><id>6433890</id><snippet>order.user</snippet></ROW><ROW><id>6433890</id><snippet>user = order.user
print type(user)
</snippet></ROW><ROW><id>6433890</id><snippet>order.user</snippet></ROW><ROW><id>6433890</id><snippet>None</snippet></ROW><ROW><id>6433890</id><snippet>order.user()</snippet></ROW><ROW><id>6433890</id><snippet>User</snippet></ROW><ROW><id>6433890</id><snippet>User</snippet></ROW><ROW><id>6433890</id><snippet>User</snippet></ROW><ROW><id>6433929</id><snippet>|safe</snippet></ROW><ROW><id>6433929</id><snippet>rsscontent</snippet></ROW><ROW><id>6433929</id><snippet>{'item1':'itemtext',
 'item2':'item2text',
  etc.
}
</snippet></ROW><ROW><id>6433929</id><snippet>{'item1':['itemtext',],
'item2':['item2text',],
 etc.
}
</snippet></ROW><ROW><id>6433929</id><snippet>    &lt;title&gt;{{ value.0 }}&lt;/title&gt;
</snippet></ROW><ROW><id>6434001</id><snippet>sed</snippet></ROW><ROW><id>6434119</id><snippet>schema</snippet></ROW><ROW><id>6434119</id><snippet>sqlalchemy.schema.Table</snippet></ROW><ROW><id>6434119</id><snippet>__table_args__</snippet></ROW><ROW><id>6434119</id><snippet>class Entity2(Base):
    __tablename__ = 'entity2' ## I tried combination of &lt;db&gt;.&lt;table&gt; with no success
    __table_args__ = {'schema': 'db2'}
    entity2_id = Column(Integer, primary_key=True) 

class Entity1(Base):
    __tablename__ = 'entity1' ## I tried combination of &lt;db&gt;.&lt;table&gt; with no success
    __table_args__ = {'schema': 'db1'}
    entity1_id = Column(Integer, primary_key=True)
    entity2_id = Column(Integer, ForeignKey(Entity2.entity2_id))
    entity2 = relationship('Entity2')
</snippet></ROW><ROW><id>6434161</id><snippet>def ddply(rows, cols, op=lambda group_rows: group_rows): 
    """group rows by cols, then apply the function op to each group 
    rows is list of values or dict with col names (like read from 
    csv.reader or   csv.DictReader)"""
    def group_key(row):                         
        return (row[col] for col in cols)
    rows = sorted(rows, key=group_key)
    return itertools.chain.from_iterable(
        op(group_rows) for k,group_rows in itertools.groupby(rows, key=group_key)) 
</snippet></ROW><ROW><id>6434161</id><snippet>op</snippet></ROW><ROW><id>6434161</id><snippet>sum</snippet></ROW><ROW><id>6434317</id><snippet>print</snippet></ROW><ROW><id>6434858</id><snippet>import re

text = 'the f&lt;ox jumpe&gt;d over the l&lt;azy&gt; dog &lt;and the &gt;fence'
list = re.findall('.*?\&lt;(.*?)\&gt;.*?', text)

print list
</snippet></ROW><ROW><id>6435261</id><snippet>&gt;&gt;&gt; sorted((i,k) for i,j in mydict.items() for k in ([j] if isinstance(j, str) or isinstance(j, int) else j))
[('four', 5), ('four', 7), ('four', 8), ('four', '6'), ('nine', 9), ('one', 1), ('three', 3), ('two', '2')]
</snippet></ROW><ROW><id>6435261</id><snippet>int</snippet></ROW><ROW><id>6435261</id><snippet>str</snippet></ROW><ROW><id>6435261</id><snippet>list</snippet></ROW><ROW><id>6435261</id><snippet>int</snippet></ROW><ROW><id>6435261</id><snippet>str</snippet></ROW><ROW><id>6435261</id><snippet>sorted((i,k) for i,j in mydict.items() for k in ([j] if type(j) in (int, str) else j))
</snippet></ROW><ROW><id>6435261</id><snippet>isinstance(j, basestring)</snippet></ROW><ROW><id>6435261</id><snippet>isinstance(j, str)</snippet></ROW><ROW><id>6435329</id><snippet>**kwargs</snippet></ROW><ROW><id>6435828</id><snippet>def F(a, b=None):
    if b is None:
        b = []
    b.append(a)
    return b
</snippet></ROW><ROW><id>6436297</id><snippet>MY_DOMAIN = "sameurl.com"

import urlparse
parsed = urlparse.urlparse(url)
if parsed.netloc=='' or parsed.netloc.endswith(MY_DOMAIN):
    # internal
else:
    # external
</snippet></ROW><ROW><id>6436385</id><snippet>f = open('b.txt', 'r')
status = True
country = []
city = []
for line in f:
    line = line.strip('\n').strip()
    if line:
        if status:
            country.append(line)
            status = False
        else:
            city.append(line)
    else:
        status = True

print country
print city


output :

&gt;&gt;['city1', 'city2', 'city3', 'city4']
&gt;&gt;['Country1', 'Country2']
</snippet></ROW><ROW><id>6436741</id><snippet>f = file('sourcefile')
for line in f:
    if 'pattern' in line:
            # mind the , at the end,
            # since there's no stripping involved
            # and print adds a newline without it
            print line, 
</snippet></ROW><ROW><id>6436896</id><snippet>^(?&lt;!\/\/)\s*void aMethod
</snippet></ROW><ROW><id>6437141</id><snippet>re.search("^(?!\/\/)\s*void aMethod",line)
</snippet></ROW><ROW><id>6437270</id><snippet>loop.index</snippet></ROW><ROW><id>6437270</id><snippet>{% do ... %}</snippet></ROW><ROW><id>6437270</id><snippet>template = """
{%- set idxs = [0] -%}
{%- for item in sitemap recursive %}
    depth={{idxs|length}}. idx={{loop.index}}. pidx={{idxs[-1]}}. title={{item.title}}
    {%- if item.children -%}
        {%- do idxs.append(loop.index) -%}
        {{ loop(item.children) }}
        {%- do idxs.pop() -%}
    {%- endif %}
{%- endfor %}
"""

class Node():
    def __init__(self, title, children=[]):
        self.title = title
        self.children = children

sitemap = [
    Node('a', [
        Node('a_a', [
            Node('a_a_a'),
            ]),
        Node('a_b', [
            Node('a_b_a', [
                Node('a_b_a_0'),
                ]),
            ]),
        ]),
    Node('b'),
    ]

env = jinja2.Environment(extensions=['jinja2.ext.do'])
print env.from_string(template).render(sitemap=sitemap)
</snippet></ROW><ROW><id>6437270</id><snippet>    depth=1. idx=1. pidx=0. title=a
    depth=2. idx=1. pidx=1. title=a_a
    depth=3. idx=1. pidx=1. title=a_a_a
    depth=2. idx=2. pidx=1. title=a_b
    depth=3. idx=1. pidx=2. title=a_b_a
    depth=4. idx=1. pidx=1. title=a_b_a_0
    depth=1. idx=2. pidx=0. title=b
</snippet></ROW><ROW><id>6437491</id><snippet>mysql-devel</snippet></ROW><ROW><id>6437793</id><snippet>re</snippet></ROW><ROW><id>6438016</id><snippet>def get_table(proj, max_x, max_y):
   table = [[False for x in xrange(max_x)] for y in xrange(max_y)]
   tasks = Task.objects.filter(proj=proj)
   for task in tasks:
      table[task.posy-1][task.posx-1] = True
   return table 
</snippet></ROW><ROW><id>6438040</id><snippet>./manage.py sqlall &lt;appname&gt;</snippet></ROW><ROW><id>6438040</id><snippet>django-extensions</snippet></ROW><ROW><id>6438040</id><snippet>./manage.py graph_models -a -g -o my_project.png</snippet></ROW><ROW><id>6438408</id><snippet>A=[1,2,3,4,5]
B=[7,8,9,10,11]
C=[14,15,16,17,18]

matrix = dict((v,{B[i]:C[i]}) for i, v in enumerate(A))
</snippet></ROW><ROW><id>6438408</id><snippet>A = [1,2,3,4,5]
B = [7,8,9,10,11]
C = [14,15,16,17,18]

matrix = dict(((v, B[i]), C[i]) for i, v in enumerate(A))
</snippet></ROW><ROW><id>6438598</id><snippet>import unittest

from sqlalchemy import *
from sqlalchemy.orm import create_session
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime
from sqlalchemy.orm import contains_eager, joinedload
from sqlalchemy.orm import relationship

#Create and engine and get the metadata
Base = declarative_base()
engine = create_engine('mssql://user:pass@Northwind', echo=True)
metadata = MetaData(bind=engine)


#Reflect each database table we need to use, using metadata
class Customer(Base):
    __table__ = Table('Customers', metadata, autoload=True)
    orders = relationship("Order", backref="customer")

class Shipper(Base):
    __table__ = Table('Shippers', metadata, autoload=True)
    orders = relationship("Order", backref="shipper")

class Employee(Base):
    __table__ = Table('Employees', metadata, autoload=True)
#    orders = relationship("Order", backref="employee")
    territories = relationship('Territory', secondary=Table('Employeeterritories', metadata, autoload=True))

class Territory(Base):
    __table__ = Table('Territories', metadata, autoload=True)
    region = relationship('Region', backref='territories')

class Region(Base):
    __table__ = Table('Region', metadata, autoload=True)


class Order(Base):
    __table__ = Table('Orders', metadata, autoload=True)
    products = relationship('Product', secondary=Table('Order Details', metadata, autoload=True))
    employee = relationship('Employee', backref='orders')

class Product(Base):
    __table__ = Table('Products', metadata, autoload=True)
    supplier = relationship('Supplier', backref='products')
    category = relationship('Category', backref='products') 

class Supplier(Base):
    __table__ = Table('Suppliers', metadata, autoload=True)

class Category(Base):
    __table__ = Table('Categories', metadata, autoload=True)


class Test(unittest.TestCase):

    def setUp(self):
        #Create a session to use the tables    
        self.session = create_session(bind=engine)        

    def tearDown(self):
        self.session.close()

    def test_withJoins(self):
        q = self.session.query(Customer)
        q = q.join(Order)
        q = q.join(Shipper)
        q = q.filter(Customer.CustomerID =='ALFKI')
        q = q.filter(Order.OrderID=='10643')
        q = q.filter(Shipper.ShipperID=='1')
        q = q.options(contains_eager(Customer.orders, Order.shipper))
        res = q.all()
        cus = res[0]
        ord = cus.orders[0]
        shi = ord.shipper
        self.assertEqual(shi.Phone, '(503) 555-9831')
</snippet></ROW><ROW><id>6438609</id><snippet>handle_quit</snippet></ROW><ROW><id>6438609</id><snippet>self.transport.loseConnection()</snippet></ROW><ROW><id>6438609</id><snippet>self.transport.loseConnection()</snippet></ROW><ROW><id>6438769</id><snippet>make distclean
./configure --with-python=/usr/local/bin/python2.5
LD_RUN_PATH=/usr/local/lib make
sudo make install
</snippet></ROW><ROW><id>6439124</id><snippet>a = range(5)
b = range(5, 7)
a[1::2] = b
print a
</snippet></ROW><ROW><id>6439124</id><snippet>[0, 5, 2, 6, 4]
</snippet></ROW><ROW><id>6439124</id><snippet>A[I] = B</snippet></ROW><ROW><id>6439124</id><snippet>for i, b in itertools.izip(I, B):
    A[i] = b
</snippet></ROW><ROW><id>6440261</id><snippet>ET.tostring(tree)</snippet></ROW><ROW><id>6440261</id><snippet>with open("filename", "w") as f:
    f.write(ET.tostring(tree))
</snippet></ROW><ROW><id>6440281</id><snippet>.decode('utf8')</snippet></ROW><ROW><id>6440281</id><snippet># -*- encoding: utf-8 -*-
special_char_string = u"äöüáèô"
</snippet></ROW><ROW><id>6440281</id><snippet>special_char_string</snippet></ROW><ROW><id>6440281</id><snippet>unicode</snippet></ROW><ROW><id>6440281</id><snippet>str</snippet></ROW><ROW><id>6440281</id><snippet>&gt;&gt;&gt; u"äöüáèô" == "äöüáèô".decode('utf8')
True
</snippet></ROW><ROW><id>6440281</id><snippet>&gt;&gt;&gt; u"äöüáèô".encode('utf8')
'\xc3\xa4\xc3\xb6\xc3\xbc\xc3\xa1\xc3\xa8\xc3\xb4'
&gt;&gt;&gt; "äöüáèô"
'\xc3\xa4\xc3\xb6\xc3\xbc\xc3\xa1\xc3\xa8\xc3\xb4'
</snippet></ROW><ROW><id>6440429</id><snippet>int</snippet></ROW><ROW><id>6440429</id><snippet>float</snippet></ROW><ROW><id>6440499</id><snippet>easy_install</snippet></ROW><ROW><id>6440499</id><snippet>pip</snippet></ROW><ROW><id>6440499</id><snippet>python</snippet></ROW><ROW><id>6440499</id><snippet>easy_install</snippet></ROW><ROW><id>6440499</id><snippet>sh setuptools-0.6c11-py2.7.egg</snippet></ROW><ROW><id>6440499</id><snippet>easy_install</snippet></ROW><ROW><id>6440499</id><snippet>setuptools</snippet></ROW><ROW><id>6440499</id><snippet>easy_install</snippet></ROW><ROW><id>6440499</id><snippet>python</snippet></ROW><ROW><id>6440499</id><snippet>python</snippet></ROW><ROW><id>6440499</id><snippet>appscript</snippet></ROW><ROW><id>6440656</id><snippet>from collections import Counter

a=['1','2']
b=['1','2','3']

a.extend(b)

[k for k,v in Counter(a).items() if v == 1]
</snippet></ROW><ROW><id>6440656</id><snippet>list(set(a) ^ set(b))
</snippet></ROW><ROW><id>6440656</id><snippet>missed_in_a = [x for x in a if x not in b]
missed_in_b = [x for x in b if x not in a]
</snippet></ROW><ROW><id>6440656</id><snippet>a=['1','2']
b=['1','2','3']

c = [x for x in a]
c.extend(b)

diff = [x for x in c if a.count(x)+b.count(x) == 1]
</snippet></ROW><ROW><id>6440656</id><snippet>a = ['1','2','3','4']
b = ['2','2','3','6','5']

from difflib import unified_diff

def merge(a,b):
    output = []
    for line in list(unified_diff(a,b))[3:]:
        if '+' in line:
            output.append(line.strip('+'))
        elif not '-' in line:
            output.append(line.strip())
    return output

print merge(a,b)        
</snippet></ROW><ROW><id>6441095</id><snippet>new_lst = [x for t in lst for x in t[1:] if x != 0]
</snippet></ROW><ROW><id>6441376</id><snippet>easy_install</snippet></ROW><ROW><id>6441376</id><snippet>virtualenv</snippet></ROW><ROW><id>6441376</id><snippet>pip</snippet></ROW><ROW><id>6441420</id><snippet>/a</snippet></ROW><ROW><id>6441420</id><snippet>/i</snippet></ROW><ROW><id>6441420</id><snippet>/a &lt;Product.msi&gt;
    Administrative install - Installs a product on the network
</snippet></ROW><ROW><id>6441420</id><snippet>/qn</snippet></ROW><ROW><id>6441420</id><snippet>/q[n|b|r|f]
    Sets user interface level
    n - No UI
</snippet></ROW><ROW><id>6441420</id><snippet>msiexec</snippet></ROW><ROW><id>6441590</id><snippet>shell=True</snippet></ROW><ROW><id>6441590</id><snippet>subprocess.call(' '.join([spam, "-i", eggs, "-o", ham]), shell=True)
</snippet></ROW><ROW><id>6441960</id><snippet>import os
pid = os.fork()
if 0 == pid:
  os.system('firefox')
  os._exit(0)
else:
  os._exit(0)
</snippet></ROW><ROW><id>6441990</id><snippet>&gt;&gt;&gt; float("nan") == float("nan")
False
</snippet></ROW><ROW><id>6441990</id><snippet>is</snippet></ROW><ROW><id>6441990</id><snippet>__eq__</snippet></ROW><ROW><id>6441990</id><snippet>np.nan</snippet></ROW><ROW><id>6441990</id><snippet>np.nan</snippet></ROW><ROW><id>6441990</id><snippet>&gt;&gt;&gt; numpy.nan is numpy.nan
True
</snippet></ROW><ROW><id>6441990</id><snippet>np.float64(np.nan)</snippet></ROW><ROW><id>6441990</id><snippet>np.float64(np.nan)</snippet></ROW><ROW><id>6441990</id><snippet>&gt;&gt;&gt; numpy.float64(numpy.nan) is numpy.float64(numpy.nan)
False
</snippet></ROW><ROW><id>6441990</id><snippet>KeyError</snippet></ROW><ROW><id>6441990</id><snippet>&gt;&gt;&gt; a = float("nan")
&gt;&gt;&gt; b = float("nan")
&gt;&gt;&gt; {a: 1, b: 2}
{nan: 1, nan: 2}
</snippet></ROW><ROW><id>6442109</id><snippet>MyClass</snippet></ROW><ROW><id>6442109</id><snippet>method_with_side_effects</snippet></ROW><ROW><id>6442201</id><snippet>__table__</snippet></ROW><ROW><id>6442201</id><snippet>class Entry(Base):
    __table__ = ...

    _entry = __table__.c.entry

    @hybrid_property
    def entry(self):
        return self._entry

    @entry.setter
    def entry(self, value):
        self._entry = value
        self.cached_entry = markdown(value)
</snippet></ROW><ROW><id>6442201</id><snippet>from sqlalchemy.orm import validates

class Entry(Base):
    __table__ = ...

    @validates('entry')
    def _set_entry(self, key, value):
        self.cached_entry = markdown(value)
        return value
</snippet></ROW><ROW><id>6442454</id><snippet>for word in text.lower().split():#split text into words
    [...]
    print (freq)
</snippet></ROW><ROW><id>6442454</id><snippet>for word in text.lower().split():#split text into words
    [...]
print (freq)
</snippet></ROW><ROW><id>6442454</id><snippet>print</snippet></ROW><ROW><id>6442564</id><snippet>import re

string = 'CommonSettingsMandatory = #toto,tata#, true'
splitlist = re.split('\s?=\s?#(.*?)#,\s?', string)
</snippet></ROW><ROW><id>6442564</id><snippet>splitlist</snippet></ROW><ROW><id>6442564</id><snippet>['CommonSettingsMandatory', 'toto,tata', 'true']</snippet></ROW><ROW><id>6442598</id><snippet>signal.signal(signal.SIGCHLD, signal.SIG_IGN)
</snippet></ROW><ROW><id>6442798</id><snippet>print 'Content-Type: text/plain'
print
print 'Hello World!'
</snippet></ROW><ROW><id>6442928</id><snippet>NewResponse</snippet></ROW><ROW><id>6442928</id><snippet>NewRequest</snippet></ROW><ROW><id>6442928</id><snippet>ContextFound</snippet></ROW><ROW><id>6442928</id><snippet>ContextFound</snippet></ROW><ROW><id>6442928</id><snippet>NewRequest</snippet></ROW><ROW><id>6442928</id><snippet>ContextFound</snippet></ROW><ROW><id>6442928</id><snippet>config.add_view(lambda ctx, req: ctx, 'pyramid.httpexceptions.HTTPException')
</snippet></ROW><ROW><id>6442928</id><snippet>Response</snippet></ROW><ROW><id>6442928</id><snippet>@subscriber(ContextFound)
def csrf_validation_event(event):
    request = event.request
    user = getattr(request, 'user', None)
    csrf = request.params.get('csrf_token')
    if (request.method == 'POST' or request.is_xhr) and \
       (user and user.is_authenticated()) and \
       (csrf != unicode(request.session.get_csrf_token())):
        raise HTTPUnauthorized
</snippet></ROW><ROW><id>6443010</id><snippet>/* */</snippet></ROW><ROW><id>6443010</id><snippet>#</snippet></ROW><ROW><id>6443010</id><snippet>X</snippet></ROW><ROW><id>6443010</id><snippet>operation</snippet></ROW><ROW><id>6443010</id><snippet>from myproj.models import X
x = X.objects.get(id=1)
val = x.operation()
</snippet></ROW><ROW><id>6443162</id><snippet>virtualenv -p /opt/python-2.7.1 mypythonenv
</snippet></ROW><ROW><id>6443162</id><snippet>cd mypythonenv
source bin/activate
</snippet></ROW><ROW><id>6443472</id><snippet>from livewires import colour
</snippet></ROW><ROW><id>6443472</id><snippet>NameError: name 'color' is not defined
</snippet></ROW><ROW><id>6443551</id><snippet># f is a file object
# n1 is how many lines to read
lines = [f.readline() for i in range(n1)]
</snippet></ROW><ROW><id>6443947</id><snippet>(add-hook 'python-mode-hook
  (lambda ()
    (setq imenu-create-index-function 'python-imenu-create-index)))
</snippet></ROW><ROW><id>6444045</id><snippet>&gt;&gt;&gt; '/'.join('hello')
'h/e/l/l/o'
</snippet></ROW><ROW><id>6444093</id><snippet>scrwidth = 640
scrheight = 480
fps = 50
games.init(scrwidth, scrheight)
</snippet></ROW><ROW><id>6444093</id><snippet>scrwidth = 640
scrheight = 480
fps = 50
games.init(screen_width=scrwidth, screen_height= scrheight, fps=fps)
myscr = games.screen
</snippet></ROW><ROW><id>6444118</id><snippet>Users</snippet></ROW><ROW><id>6444118</id><snippet>id</snippet></ROW><ROW><id>6444118</id><snippet>HasContact</snippet></ROW><ROW><id>6444118</id><snippet>userId</snippet></ROW><ROW><id>6444118</id><snippet>contactId</snippet></ROW><ROW><id>6444118</id><snippet>SELECT contact.id
  FROM Users "user"
    LEFT JOIN Relationships "rel"
      ON user.id = rel.userid
    LEFT JOIN Users "contact"
      ON rel.contactId = contact.id
  WHERE user.id = $id_of_current_user
</snippet></ROW><ROW><id>6444118</id><snippet>SELECT count(*)
  FROM Relationships "rel"
  WHERE rel.userid = $document_owner_user_id
    AND rel.contactid = $id_of_current_user
</snippet></ROW><ROW><id>6444118</id><snippet>SELECT count(*)
  FROM Relationships "rel_1"
    INNER JOIN Relationships "rel_2"
      ON rel_1.contactId = rel_2.userId
  WHERE rel_1.userid = $document_owner_user_id
    AND rel_2.contactid = $id_of_current_user
</snippet></ROW><ROW><id>6444118</id><snippet>($document_owner_user_id, X)</snippet></ROW><ROW><id>6444118</id><snippet>(X, $id_of_current_user)</snippet></ROW><ROW><id>6444181</id><snippet>output = np.empty(indices[0].shape)
x_indices = indices[0]
y_indices = indices[1]
z_indices = indices[2]

x0 = x_indices.astype(np.integer)
y0 = y_indices.astype(np.integer)
z0 = z_indices.astype(np.integer)
x1 = x0 + 1
y1 = y0 + 1
z1 = z0 + 1

#Check if xyz1 is beyond array boundary:
x1[np.where(x1==input_array.shape[0])] = x0.max()
y1[np.where(y1==input_array.shape[1])] = y0.max()
z1[np.where(z1==input_array.shape[2])] = z0.max()

x = x_indices - x0
y = y_indices - y0
z = z_indices - z0
output = (input_array[x0,y0,z0]*(1-x)*(1-y)*(1-z) +
             input_array[x1,y0,z0]*x*(1-y)*(1-z) +
             input_array[x0,y1,z0]*(1-x)*y*(1-z) +
             input_array[x0,y0,z1]*(1-x)*(1-y)*z +
             input_array[x1,y0,z1]*x*(1-y)*z +
             input_array[x0,y1,z1]*(1-x)*y*z +
             input_array[x1,y1,z0]*x*y*(1-z) +
             input_array[x1,y1,z1]*x*y*z)

return output
</snippet></ROW><ROW><id>6444191</id><snippet>add_command_module(self, klass)</snippet></ROW><ROW><id>6444191</id><snippet>onecmd</snippet></ROW><ROW><id>6444191</id><snippet>def onecmd(self, line):
  if not line:
    return self.emptyline()
  if cmd is None:
    return self.default(line)
  self.lastcmd = line
  if cmd == '': 
    return self.default(line)
  else:
    # iterate over all submodules that have been added including ourselves
    # self.submodules would just be a list or set of all submodules as mentioned above
    func = None
    for submod in self.submodules:
      # just return the first match we find
      if hasattr(submod, 'do_%s' % cmd):
        func = getattr(submod, 'do_%s' % cmd)
        break # instead of breaking, you could also add up all the modules that have
              # this method, and tell the user to be more specific
    if func is not None:
      return func(arg)
    else:
      return self.default(line)
</snippet></ROW><ROW><id>6444191</id><snippet>parseline</snippet></ROW><ROW><id>6444335</id><snippet>/usr/share/python/debian_defaults</snippet></ROW><ROW><id>6444335</id><snippet>sudo mv /usr/bin/python /usr/bin/python.dist
sudo ln -s /usr/bin/python2.5 /usr/bin/python
</snippet></ROW><ROW><id>6444335</id><snippet>PATH</snippet></ROW><ROW><id>6444335</id><snippet>python</snippet></ROW><ROW><id>6444335</id><snippet>/usr/bin</snippet></ROW><ROW><id>6444335</id><snippet>~/.profile</snippet></ROW><ROW><id>6444335</id><snippet>~/.bashrc</snippet></ROW><ROW><id>6444370</id><snippet>python setup.py build_ext -b ../some/specific/place/
</snippet></ROW><ROW><id>6444500</id><snippet>from lxml import etree

contacts = etree.parse(open("1234.xml"))

for c in contacts.xpath('//contact'):
    if c.xpath('/name')[0].text == 'Johnny Appleseed':
        c.xpath('/phone')[0].text = NEW_PHONE_NUMBER

print &gt;&gt; open("1234.xml", "w"), etree.tostring(contacts)
</snippet></ROW><ROW><id>6444556</id><snippet>Return a string representing the current working directory.
</snippet></ROW><ROW><id>6444596</id><snippet>ChangeLogoForm</snippet></ROW><ROW><id>6444596</id><snippet>BusinessLogo</snippet></ROW><ROW><id>6444596</id><snippet>Business</snippet></ROW><ROW><id>6444596</id><snippet>b = get_object_or_404(Business, pk = bus_id)
...
form = ChangeLogoForm(request.POST, request.FILES, instance = b)
</snippet></ROW><ROW><id>6444596</id><snippet>OneToOneField</snippet></ROW><ROW><id>6444596</id><snippet>ForeignKey</snippet></ROW><ROW><id>6444612</id><snippet>(width, height) = im.size
</snippet></ROW><ROW><id>6444617</id><snippet>__spam</snippet></ROW><ROW><id>6444617</id><snippet>_Ham__spam</snippet></ROW><ROW><id>6444617</id><snippet>B.__a()</snippet></ROW><ROW><id>6444617</id><snippet>B._B__a()</snippet></ROW><ROW><id>6444658</id><snippet>    self.lc = wx.ListCtrl(self, style=wx.LC_REPORT)
    # ...
    self.lc.Bind(wx.EVT_MOTION, self.OnMouseMotion)

def OnMouseMotion(self, evt):
    pos = self.lc.ScreenToClient(wx.GetMousePosition())
    item_index, flag = self.lc.HitTest(pos)
    tip = self.lc.GetToolTip()

    if flag == wx.LIST_HITTEST_ONITEMLABEL:
        tip.SetTip('Some information about ' + self.lc.GetItemText(item_index))
    else:
        tip.SetTip('')

    evt.Skip()
</snippet></ROW><ROW><id>6444847</id><snippet>csv</snippet></ROW><ROW><id>6444847</id><snippet>import csv
candy_reader = csv.reader(open('candy.csv', 'rb'))

for row in candy_reader:
  if row[0] in candy_to_find:
    monday_total += row[1]
    # etc.    
</snippet></ROW><ROW><id>6445371</id><snippet>load data local infile 'AL-Central-Indians.csv' into table player
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
(person_id, team_id)
</snippet></ROW><ROW><id>6445404</id><snippet>import twisted
</snippet></ROW><ROW><id>6445404</id><snippet>import pkg_resources
pkg_resources.require("Twisted==8.2.0")
import twisted
</snippet></ROW><ROW><id>6445404</id><snippet>pkg_resources.require</snippet></ROW><ROW><id>6445404</id><snippet>twisted</snippet></ROW><ROW><id>6445404</id><snippet>sys.modules</snippet></ROW><ROW><id>6445404</id><snippet>pkg_resources</snippet></ROW><ROW><id>6445405</id><snippet>easy_install mysqldb</snippet></ROW><ROW><id>6445527</id><snippet>masked_data = [point for point in data if point != '']
</snippet></ROW><ROW><id>6445527</id><snippet>&gt;&gt;&gt; data = numpy.array(['0', '', '1', '', '2'])
&gt;&gt;&gt; numpy.ma.masked_where(data == '', data)
masked_array(data = [0 -- 1 -- 2],
             mask = [False True False True False],
       fill_value = N/A)
</snippet></ROW><ROW><id>6445577</id><snippet>(?&lt;=//)</snippet></ROW><ROW><id>6445577</id><snippet>&gt;&gt;&gt; re.search(r'(?&lt;=//).+(?= \" target)', 
...           'http://domain.com.uy " target').group(0)
'domain.com.uy'
</snippet></ROW><ROW><id>6445577</id><snippet>&gt;&gt;&gt; re.search(r'(?&lt;=//).+(?= \" target)',
...           'http://example.com/path/to/whatever " target').group(0)
'example.com/path/to/whatever'
</snippet></ROW><ROW><id>6445577</id><snippet>r'(?&lt;=//)([^/]+)(/.*)?(?= \" target)'</snippet></ROW><ROW><id>6445577</id><snippet>&gt;&gt;&gt; re.search(r'(?&lt;=//)([^/]+)(/.*)?(?= \" target)',
...           'http://example.com/path/to/whatever " target').groups()
('example.com', '/path/to/whatever')
</snippet></ROW><ROW><id>6445659</id><snippet>%r</snippet></ROW><ROW><id>6445659</id><snippet>repr()</snippet></ROW><ROW><id>6445659</id><snippet>print "Cluster %d: %r" % (i+1,clusters[i])
</snippet></ROW><ROW><id>6445849</id><snippet>django</snippet></ROW><ROW><id>6445849</id><snippet>from django import template
from django.template.defaultfilters import stringfilter
from django.utils.safestring import mark_safe
from django.utils.encoding import force_unicode
import re

register = template.Library()

@register.filter
@stringfilter
def stripjs(value):
    stripped = re.sub(r'&lt;script(?:\s[^&gt;]*)?(&gt;(?:.(?!/script&gt;))*&lt;/script&gt;|/&gt;)', \
                      '', force_unicode(value), flags=re.S)
    return mark_safe(stripped)
</snippet></ROW><ROW><id>6445849</id><snippet>templatetags</snippet></ROW><ROW><id>6445849</id><snippet>__init__.py</snippet></ROW><ROW><id>6445849</id><snippet>my_filters.py</snippet></ROW><ROW><id>6445849</id><snippet>{% load my_filters %}</snippet></ROW><ROW><id>6445849</id><snippet>{% if posts %}
    {% for p in posts %}
        {{ p|stripjs }}
    {% endfor %}
{% endif %}
</snippet></ROW><ROW><id>6445986</id><snippet>easy_install</snippet></ROW><ROW><id>6445986</id><snippet>easy_install-N.N 
</snippet></ROW><ROW><id>6445986</id><snippet>easy_install-2.6</snippet></ROW><ROW><id>6446052</id><snippet>python setup.py install</snippet></ROW><ROW><id>6446318</id><snippet>&gt;&gt; from selenium import selenium
&gt;&gt; browser = selenium('localhost','4444','*firefox','http://google.com')
&gt;&gt; version = browser.get_eval('Selenium.version + Selenium.revision')
&gt;&gt; print version
u'2.0rc3'
</snippet></ROW><ROW><id>6446343</id><snippet>pygame.quit()</snippet></ROW><ROW><id>6446343</id><snippet>def handle_events (self):
    """
    If you override this method in a subclass of the Screen
    class, you can specify how to handle different kinds of
    events.  However you must handle the quit condition!
    """
    events = pygame.event.get ()
    for event in events:
        if event.type == QUIT:
            self.quit ()
        elif event.type == KEYDOWN:
            self.keypress (event.key)
        elif event.type == MOUSEBUTTONUP:
            self.mouse_up (event.pos, event.button-1)
        elif event.type == MOUSEBUTTONDOWN:
            self.mouse_down (event.pos, event.button-1)

def quit (self):
    """
    Calling this method will stop the main loop from running and
    make the graphics window disappear.
    """

    self._exit = 1

def mainloop (self, fps = 50):
    """
    Run the pygame main loop. This will animate the objects on the
    screen and call their tick methods every tick.

    fps -- target frame rate
    """

    self._exit = 0

    while not self._exit:
        self._wait_frame (fps)

        for object in self._objects:
            if not object._static:
                object._erase ()
                object._dirty = 1

        # Take a copy of the _objects list as it may get changed in place.
        for object in self._objects [:]:
            if object._tickable: object._tick ()

        self.tick ()

        if Screen.got_statics:
            for object in self._objects:
                if not object._static:
                    for o in object.overlapping_objects ():
                        if o._static and not o._dirty:
                            o._erase ()
                            o._dirty = 1

        for object in self._objects:
            if object._dirty:
                object._draw ()
                object._dirty = 0

        self._update_display()

        self.handle_events()

    # Throw away any pending events.
    pygame.event.get()
</snippet></ROW><ROW><id>6446343</id><snippet>mainloop</snippet></ROW><ROW><id>6446343</id><snippet>pygame.quit()</snippet></ROW><ROW><id>6446343</id><snippet>mainloop</snippet></ROW><ROW><id>6446920</id><snippet>from scrapy.http import Request

class YourSpider(BaseSpider):
    # ...spider init details...
    def parse(self, response):
        # ...process item...
        yield item           
        yield Request(response.url, callback=self.parse)
</snippet></ROW><ROW><id>6447050</id><snippet>time your-command</snippet></ROW><ROW><id>6447196</id><snippet>def the_real_work( option, option, *files ):
    etc.

def build_parser( ):
    parser = argparse.ArgumentParser()
    ...
    return parser

if __name__ == "__main__":
    logging.basicConfig( ... )
    parser= build_parser()
    # parser.add_option( -v for verbose logging )
    args = parser.parse_args()
    # tweak logging if there's a -v
    the_real_work( args.option, args.option, args.files )
    logging.shutdown()
</snippet></ROW><ROW><id>6447425</id><snippet>getEval</snippet></ROW><ROW><id>6447425</id><snippet>toDataURL</snippet></ROW><ROW><id>6447437</id><snippet>l = list(iterable)
</snippet></ROW><ROW><id>6447452</id><snippet>def query(self, sql, parameters=None):
    cursor = self.db.cursor()
    try:
        cursor.execute(sql, parameters)
        return cursor
    except Exception as ex:
        if ex[0] == 2006: # mysql has gone away
            cursor.close()
            self.connect()
            return self.query(sql, parameters)
        raise ex
</snippet></ROW><ROW><id>6447466</id><snippet>%</snippet></ROW><ROW><id>6447466</id><snippet>for i in range (1, 100):
    if (i % 10) == 5:
        print(i)
</snippet></ROW><ROW><id>6447683</id><snippet>correct = 0
ahtriggercount = 0

def IsCorrect():
    global correct, ahtriggercount
    #Increase correct count.
    correct = correct + 1
    #Lower autohelp trigger count.
    if ahtriggercount &gt; 0:
        ahtriggercount = ahtriggercount - 1
</snippet></ROW><ROW><id>6447687</id><snippet>import collections
def load(fname):
    d = collections.OrderedDict()
    for i in (line.rstrip('\n') for line in open(fname) if line[:-1]):
        d.update({i[1:-1]:[], '_':i[1:-1]}) \
        if i.startswith('[') else d[d['_']].append(i)
    return d

def join(first, dic):
    f = dic[first]
    for i,j in ((i,j[2:]) for i,j in enumerate(f) if j.startswith('&lt;')):
        f[i:i+1] = join(j, dic)
    return f

d = load('file.txt')
join(next(iter(d)), d)
</snippet></ROW><ROW><id>6447687</id><snippet>join</snippet></ROW><ROW><id>6447779</id><snippet>with open(disk, 'rb') as f:
</snippet></ROW><ROW><id>6447803</id><snippet>User.objects.filter(book__isnull=False).distinct()
</snippet></ROW><ROW><id>6447803</id><snippet>Book</snippet></ROW><ROW><id>6447803</id><snippet>User</snippet></ROW><ROW><id>6447803</id><snippet>is_null</snippet></ROW><ROW><id>6447803</id><snippet>Book</snippet></ROW><ROW><id>6447803</id><snippet>distinct</snippet></ROW><ROW><id>6448141</id><snippet>&gt;&gt;&gt; from itertools import tee, izip_longest
&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; it1, it2 = tee(iter(a))
&gt;&gt;&gt; next(it2)  # discard this first value
'a'
&gt;&gt;&gt; [(x,y) for x,y in izip_longest(it1, it2)]
    # or just list(izip_longest(it1, it2))
[('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', None)]
</snippet></ROW><ROW><id>6448141</id><snippet>&gt;&gt;&gt; it1,it2 = tee(iter(a))
&gt;&gt;&gt; next(it2)
'a'
&gt;&gt;&gt; for (token, lookahead_1) in izip_longest(it1,it2):
...     print token, lookahead_1
... 
a b
b c
c d
d None
</snippet></ROW><ROW><id>6448141</id><snippet>&gt;&gt;&gt; def lookahead(it):
...     it1, it2 = tee(iter(it))
...     next(it2)
...     return izip_longest(it1, it2)
... 
&gt;&gt;&gt; for (token, lookahead_1) in lookahead(a):
...     print token, lookahead_1
... 
a b
b c
c d
d None
</snippet></ROW><ROW><id>6448248</id><snippet>raise Exception, "foo"</snippet></ROW><ROW><id>6448309</id><snippet>from urlparse import urlparse
import re
class SvnExternalsLine:
    '''Consult https://subversion.apache.org/docs/release-notes/1.5.html#externals for parsing algorithm.
    The old svn:externals format consists of:
        &lt;local directory&gt; [revision] &lt;absolute remote URL&gt;

    The NEW svn:externals format consists of:
        [revision] &lt;absolute or relative remote URL&gt; &lt;local directory&gt;

    Therefore, "relative" remote paths always come *after* the local path.
    One complication is the possibility of local paths with spaces.
    We just assume that the remote path cannot have spaces, and treat all other
    tokens (except the revision specifier) as part of the local path.
    '''

    REVISION_ARGUMENT_REGEXP = re.compile("-r(\d+)")

    def __init__(self, original_line):
        self.original_line = original_line

        self.pinned_revision_number = None
        self.repo_url = None
        self.local_pathname_components = []

        for token in self.original_line.split():

            revision_match = self.REVISION_ARGUMENT_REGEXP.match(token)
            if revision_match:
                self.pinned_revision_number = int(revision_match.group(1))
            elif urlparse(token).scheme or any(map(lambda p: token.startswith(p), ["^", "//", "/", "../"])):
                self.repo_url = token
            else:
                self.local_pathname_components.append(token)

    # ---------------------------------------------------------------------
    def constructLine(self):
        '''Reconstruct the externals line in the Subversion 1.5+ format'''

        tokens = []

        # Update the revision specifier if one existed
        if self.pinned_revision_number is not None:
            tokens.append( "-r%d" % (self.pinned_revision_number) )

        tokens.append( self.repo_url )
        tokens.extend( self.local_pathname_components )

        if self.repo_url is None:
            raise Exception("Found a bad externals property: %s; Original definition: %s" % (str(tokens), repr(self.original_line)))

        return " ".join(tokens)
</snippet></ROW><ROW><id>6448309</id><snippet>pysvn</snippet></ROW><ROW><id>6448309</id><snippet>SvnExternalsLine</snippet></ROW><ROW><id>6448309</id><snippet>pysvn</snippet></ROW><ROW><id>6448309</id><snippet>client.propget( "svn:externals", base_checkout_path, recurse=True)
</snippet></ROW><ROW><id>6448309</id><snippet>client.propset("svn:externals", new_externals_property, path)
</snippet></ROW><ROW><id>6448659</id><snippet>__path__</snippet></ROW><ROW><id>6448659</id><snippet>main_package/__init__.py:

    __path__ += ['/tmp/some/other/path/']

/tmp/some/other/path/sub_package/__init__.py:

    value = 42

test.py:

    from main_package.sub_package import value
    print value
</snippet></ROW><ROW><id>6448994</id><snippet>gc.disable</snippet></ROW><ROW><id>6449051</id><snippet>void AddCancellation(std::string &amp;effect)
{
   CancelsEffects.insert(effect);
}
</snippet></ROW><ROW><id>6449051</id><snippet>void AddCancellation(const std::string &amp;effect)
{
   CancelsEffects.insert(effect);
}
</snippet></ROW><ROW><id>6449116</id><snippet>update()</snippet></ROW><ROW><id>6449116</id><snippet>dictify()</snippet></ROW><ROW><id>6449116</id><snippet>myObj.__dict__.update(modObj.__dict__)</snippet></ROW><ROW><id>6449116</id><snippet>self</snippet></ROW><ROW><id>6449116</id><snippet>self.__dict__</snippet></ROW><ROW><id>6449116</id><snippet>__dict__</snippet></ROW><ROW><id>6449116</id><snippet>__dict__</snippet></ROW><ROW><id>6449116</id><snippet>__slots__</snippet></ROW><ROW><id>6449116</id><snippet>multiprocessing</snippet></ROW><ROW><id>6449116</id><snippet>&gt;&gt;&gt; for i in range(4):
...     temp = MyClass()
...     p = Process(target=myFunc, args=(temp, i))
...     p.start()
...     p.join()
...     print i,temp.x
... 
0 construct
1 construct
2 construct
3 construct
</snippet></ROW><ROW><id>6449116</id><snippet>multiprocessing</snippet></ROW><ROW><id>6449116</id><snippet>&gt;&gt;&gt; from multiprocessing import Process, Queue
&gt;&gt;&gt; 
&gt;&gt;&gt; def myFuncQ(myObj, i, return_queue):
...     myObj.x = 'start'
...     modObj = deepcopy(myObj)
...     modObj.x = 'modified'
...     return_queue.put(modObj)
... 
&gt;&gt;&gt; return_queue = Queue()
&gt;&gt;&gt; for i in range(4):
...     temp = MyClass()
...     p = Process(target=myFuncQ, args=(temp, i, return_queue))
...     p.start()
...     p.join()
...     temp = return_queue.get()
...     print i,temp.x
... 
0 modified
1 modified
2 modified
3 modified
</snippet></ROW><ROW><id>6449116</id><snippet>multiprocessing</snippet></ROW><ROW><id>6449116</id><snippet>Queue</snippet></ROW><ROW><id>6449381</id><snippet>import Image
imag = Image.open("yourimage.yourextension")
#Convert the image te RGB if it is a .gif for example
imag = imag.convert ('RGB')
#coordinates of the pixel
X,Y = 0,0
#Get RGB
pixelRGB = imag.getpixel((X,Y))
R,G,B = pixelRGB 
</snippet></ROW><ROW><id>6449381</id><snippet>brightness = sum([R,G,B])/3 ##0 is dark (black) and 255 is bright (white)
</snippet></ROW><ROW><id>6449381</id><snippet>#Standard
LuminanceA = (0.2126*R) + (0.7152*G) + (0.0722*B)
#Percieved A
LuminanceB = (0.299*R + 0.587*G + 0.114*B)
#Perceived B, slower to calculate
LuminanceC = sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 )
</snippet></ROW><ROW><id>6450308</id><snippet>from a import *
goodbye = hello
del hello
</snippet></ROW><ROW><id>6450323</id><snippet>if json.encoder.ESCAPE_DCT.get('/') != '/':
    json.encoder.ESCAPE_DCT['/'] = '/'
</snippet></ROW><ROW><id>6450528</id><snippet>TEXT</snippet></ROW><ROW><id>6450528</id><snippet>libxml</snippet></ROW><ROW><id>6450528</id><snippet>def sanitize_html(html):
    cleaned_html = cleaner.clean_html(html)
    return re.sub(r'&lt;/p&gt;$', '', re.sub(r'^&lt;p&gt;', '', cleaned_html))
</snippet></ROW><ROW><id>6450528</id><snippet>return cleaned_html[3:-4]     # Single slice operation
return cleaned_html[3:][:-4]
</snippet></ROW><ROW><id>6450561</id><snippet>toTokens.strip()</snippet></ROW><ROW><id>6450574</id><snippet>::(?P&lt;phrase&gt;[\w\s]+?)\s*::
</snippet></ROW><ROW><id>6450639</id><snippet>Request</snippet></ROW><ROW><id>6450639</id><snippet>theurl = "www.example.com"
try:
    resp = urllib2.urlopen(theurl)
    print resp.read()
except IOError as e:
    print "Error: ", e
</snippet></ROW><ROW><id>6450639</id><snippet>Request</snippet></ROW><ROW><id>6450639</id><snippet>theurl = "www.example.com"
try:
    req = urllib2.Request(theurl)
    print req.get_full_url()
    print req.get_method()
    print dir(req)  # list lots of other stuff in Request
    resp = urllib2.urlopen(req)
    print resp.read()
except IOError as e:
    print "Error: ", e
</snippet></ROW><ROW><id>6450678</id><snippet>base.html</snippet></ROW><ROW><id>6450768</id><snippet>try:
    # execute some code
except:
    # if code raises an error, execute this code
else:
    # if the "try" code did not raise an error, execute this code
</snippet></ROW><ROW><id>6451109</id><snippet>NotYetCalculatedError</snippet></ROW><ROW><id>6451109</id><snippet>get_other_var()</snippet></ROW><ROW><id>6451109</id><snippet>class InsuranceRiskModel(object):
    def __init__(self, person):
        self.person = person
        self.calculated = False

    def calculateModel(self):
        if not self.calculated:
            self.risk = 6
            self.other_var = 5
            self.calculated = True

    @property
    def risk(self):
        self.calculateModel()
        return self.risk

    @property
    def other_var(self):
        self.calculateModel()
        return self.other_var
</snippet></ROW><ROW><id>6451109</id><snippet>InsuranceRiskModel(bob).risk</snippet></ROW><ROW><id>6451109</id><snippet>InsuranceRiskModel(bob).other_var</snippet></ROW><ROW><id>6451346</id><snippet>~/Library/Frameworks/</snippet></ROW><ROW><id>6451346</id><snippet>rm -r io/addons/Python</snippet></ROW><ROW><id>6451605</id><snippet>def is_alternating_signs(a):
    return numpy.all(numpy.abs(numpy.diff(numpy.sign(a))) == 2)



print is_alternating_signs([1, -1, 1, -1, 1]) 
print is_alternating_signs([-1, 1, -1, 1, -1]) 
print is_alternating_signs([1, -1, 1, -1, -1]) 
</snippet></ROW><ROW><id>6451605</id><snippet>True
True
False
</snippet></ROW><ROW><id>6451892</id><snippet>from datetime import datetime as dt
import time

def toYearFraction(date):
    def sinceEpoch(date): # returns seconds since epoch
        return time.mktime(date.timetuple())
    s = sinceEpoch

    year = date.year
    startOfThisYear = dt(year=year, month=1, day=1)
    startOfNextYear = dt(year=year+1, month=1, day=1)

    yearElapsed = s(date) - s(startOfThisYear)
    yearDuration = s(startOfNextYear) - s(startOfThisYear)
    fraction = yearElapsed/yearDuration

    return date.year + fraction
</snippet></ROW><ROW><id>6451892</id><snippet>&gt;&gt;&gt; toYearFraction(dt.today())
2011.47447514
</snippet></ROW><ROW><id>6452540</id><snippet>application = wsgi.Application(soap_application)</snippet></ROW><ROW><id>6453285</id><snippet>def get_initial(self):
    myobject = MyObject.objects.order_by('-code')[0]
    code = int(myobject.code) + 1
    initial={'code': str(code)}
    return initial
</snippet></ROW><ROW><id>6453320</id><snippet>(base)</snippet></ROW><ROW><id>6453320</id><snippet>pip -E /path/to/virtualenv install numpy
</snippet></ROW><ROW><id>6453320</id><snippet>(base)[1801] which pip
/home/jones/.virtualenvs/base/bin/pip
</snippet></ROW><ROW><id>6453671</id><snippet>urlfetch</snippet></ROW><ROW><id>6453671</id><snippet>from google.appengine.api import urlfetch

try:
    resp = urlfetch.fetch('http://whoapi.com/api-v1/?domain=%s&amp;rtype=serverip&amp;apikey=xyzxyz'% domain, method=urlfetch.GET, deadline=10)
    ip = r.content
except urlfetch.DownloadError:
    self.redirect('/error')
</snippet></ROW><ROW><id>6453964</id><snippet>#!/usr/bin/env python 
import cgitb
cgitb.enable()
print 'Content-Type: text/plain'
print ''
print 'Hello World!'
</snippet></ROW><ROW><id>6454045</id><snippet>&lt;a href="sameLink/?{{ request.GET.urlencode }}"&gt;
</snippet></ROW><ROW><id>6454199</id><snippet>''.join('&lt;a href="' + u + '"&gt;' + u + '&lt;/a&gt;&lt;br/&gt;' for u in adict[alist])
</snippet></ROW><ROW><id>6454199</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>6454199</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>6454199</id><snippet>adict[alist]</snippet></ROW><ROW><id>6454199</id><snippet>u</snippet></ROW><ROW><id>6454199</id><snippet>html.escape()</snippet></ROW><ROW><id>6454199</id><snippet>&lt;</snippet></ROW><ROW><id>6454199</id><snippet>&lt;</snippet></ROW><ROW><id>6454199</id><snippet>"</snippet></ROW><ROW><id>6454199</id><snippet>"</snippet></ROW><ROW><id>6455184</id><snippet>import os.path
filename = "E:/test/my_code/content/dir/disp_temp_2.hgx"
name = os.path.basename(filename).split('.')[0]
</snippet></ROW><ROW><id>6455704</id><snippet>multiprocessing</snippet></ROW><ROW><id>6455704</id><snippet>wrapper</snippet></ROW><ROW><id>6455704</id><snippet>Pool.map</snippet></ROW><ROW><id>6455704</id><snippet>from multiprocessing import Pool

class subcl:
    def __init__(self):
        self.counter=1
        return
    def increment(self):
        self.counter+=1
        return

def wrapper(targ):
    targ.increment()
    return targ                                        # &lt;&lt;&lt;&lt;&lt; change #1

class sim:
    def __init__(self):
        self.world=[subcl(),subcl(),subcl(),subcl()]
    def run(self):
        if __name__=='__main__':
            p=Pool()
            self.world = p.map(wrapper,self.world)     # &lt;&lt;&lt;&lt;&lt; change #2

a=sim()
a.run()
print a.world[1].counter # now prints 2
</snippet></ROW><ROW><id>6456134</id><snippet>model.objects.all().order_by(*field_list)</snippet></ROW><ROW><id>6456134</id><snippet>order_by</snippet></ROW><ROW><id>6456134</id><snippet>order_by</snippet></ROW><ROW><id>6456143</id><snippet>colormap = PythonMagick.Image("colors256.png")
original.map(colormap)
</snippet></ROW><ROW><id>6456360</id><snippet>column_descriptions()</snippet></ROW><ROW><id>6456422</id><snippet># using a set makes the later `x in keep` test faster
keep = set(['peach', 'plum', 'apple', 'kiwi', 'grape'])

list2= ['peach,0,1,1,0,1,0,1', 'carrot,1,0,1,1,0,1,1', 
        'lime,0,1,1,0,1,1,0', 'apple,0,1,1,0,1,1,1']

# x.split(',',1)[0] = the part before the first `,` 
new = [x for x in list2 if x.split(',',1)[0] in keep]
</snippet></ROW><ROW><id>6456637</id><snippet>V = [1,2,3,4,5]
f = open('Qin.txt')             # values in Qin.txt: 1
for line in iter(f):                                 3
    Z = float(line)                                  2

    c = []
    for i in range(len(V)):
        c.append(V[i]-Z)

print c
</snippet></ROW><ROW><id>6456637</id><snippet>print c</snippet></ROW><ROW><id>6456637</id><snippet>print c</snippet></ROW><ROW><id>6456637</id><snippet>V = [1,2,3,4,5]
f = open('Qin.txt')             # values in Qin.txt: 1
for line in iter(f):                                 3
    Z = float(line)                                  2

    c = []
    for i in range(len(V)):
        c.append(V[i]-Z)

    print c
</snippet></ROW><ROW><id>6456803</id><snippet>.crop()</snippet></ROW><ROW><id>6456803</id><snippet>.load()</snippet></ROW><ROW><id>6456803</id><snippet>box = (x_offset, Y_offset, width, height)
crop = image.crop(box)
return crop.save(image_path, format)
</snippet></ROW><ROW><id>6456803</id><snippet>None</snippet></ROW><ROW><id>6456826</id><snippet>dict</snippet></ROW><ROW><id>6456826</id><snippet>__setitem__</snippet></ROW><ROW><id>6456826</id><snippet>class a(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
        dict.__setitem__(self, 'a', 'b')

    def __setitem__(self, key, value):
        if self.has_key(key):
          dict.__setitem__(self, key, value)

a = a()
print a['a'] # prints 'b'
a['c'] = 'd'
# print a['c'] - would fail
a['a'] = 'e'
print a['a'] # prints 'e'
</snippet></ROW><ROW><id>6456852</id><snippet>#This is from the beginning
for i in range(1, len(outputList)):
    # == could be what ever comparison you want.  Any one in particular?
    if outputList[i] == outputList[i-1]:
        #do whatever you need to do
</snippet></ROW><ROW><id>6457435</id><snippet>from wtforms.fields import Field

class PlainTextWidget(object):
    def __call__(self, field, **kwargs):
        return field.data if field.data else ''
</snippet></ROW><ROW><id>6457435</id><snippet>form = MyForm(obj=myDataRow)
fields = [val for val in form._fields]
for fieldName in fields:
    fieldProp = getattr(form, fieldName)
    setattr(fieldProp, 'widget', PlainTextWidget())
</snippet></ROW><ROW><id>6457480</id><snippet>initfoo</snippet></ROW><ROW><id>6457480</id><snippet>extern "C"</snippet></ROW><ROW><id>6457586</id><snippet>f = open(r'full_path_to_your_file')    # pass an appropriate path of the required file
lines = f.readlines()
lines[n-1] = "your new text for this line"    # n is the line number you want to edit; subtract 1 as indexing of list starts from 0
f.writelines(lines)
# do the remaining operations on the file
f.close()
</snippet></ROW><ROW><id>6457586</id><snippet>f.readlines()</snippet></ROW><ROW><id>6457666</id><snippet>import numpy as np

def find_chain(mat):
  locs=np.column_stack(np.nonzero(mat))
  chain=[np.array([0,0])]
  while locs.shape[0]&gt;0:
    dists=((locs-np.vstack([chain[-1]]*locs.shape[0]))**2).sum(axis=1)
    next=dists.argmin()
    if dists.min()&lt;=2 or len(chain)==1:
      chain.append(locs[next,:])
      locs=locs[np.arange(locs.shape[0])!=next,:]
    else:
      chain=[chain[0]]+chain[1::][::-1]
  return np.vstack(chain[1::]),((chain[1]-chain[-1])**2).sum()&lt;=2
</snippet></ROW><ROW><id>6457666</id><snippet>&gt;&gt;&gt; mat1=np.array([[0, 0, 0, 0, 0, 0, 0],
...                [0, 1, 0, 0, 1, 0, 0],
...                [0, 0, 1, 0, 0, 1, 0],
...                [0, 0, 0, 1, 1, 0, 0],
...                [0, 0, 0, 0, 0, 0, 0]])
&gt;&gt;&gt; points,isclosed=find_chain(mat1)
&gt;&gt;&gt; points
array([[1, 1],
       [2, 2],
       [3, 3],
       [3, 4],
       [2, 5],
       [1, 4]])
&gt;&gt;&gt; isclosed
False
</snippet></ROW><ROW><id>6457666</id><snippet>&gt;&gt;&gt; mat2=np.array([[0, 0, 0, 0, 0],
...                [0, 0, 1, 0, 0],
...                [0, 1, 0, 1, 0],
...                [0, 1, 0, 1, 0],
...                [0, 0, 1, 0, 0],
...                [0, 0, 0, 0, 0]])
&gt;&gt;&gt; points,isclosed=find_chain(mat2)
&gt;&gt;&gt; points
array([[1, 2],
       [2, 1],
       [3, 1],
       [4, 2],
       [3, 3],
       [2, 3]])
&gt;&gt;&gt; isclosed
True
</snippet></ROW><ROW><id>6457666</id><snippet>&gt;&gt;&gt; mat3=np.array([[0, 0, 0, 0, 0],
...                [0, 1, 1, 1, 0],
...                [0, 1, 0, 0, 0],
...                [0, 1, 0, 0, 0],
...                [0, 0, 0, 0, 0],
...                [0, 0, 0, 0, 0]])
&gt;&gt;&gt; points,isclosed=find_chain(mat3)
&gt;&gt;&gt; points
array([[1, 3],
       [1, 2],
       [1, 1],
       [2, 1],
       [3, 1]])
&gt;&gt;&gt; isclosed
False
</snippet></ROW><ROW><id>6458307</id><snippet>blacklist = ['a', 'b', 'c']
cleaned = []
for item in ['foo', 'bar', 'baz']:
    clean = True
    for exclude in blacklist:
        if item.find(exclude) != -1:
            clean = False
            break
    if clean:
        cleaned.append(item)
print cleaned # --&gt; ['foo']
</snippet></ROW><ROW><id>6458526</id><snippet>class CustomList(list):
    def __init__(self, *args, **kwargs):
        list.__init__(self, args[0])

    def foobar(self):
        return 'foobar'
</snippet></ROW><ROW><id>6458593</id><snippet>assertRaises</snippet></ROW><ROW><id>6458593</id><snippet>controller.login</snippet></ROW><ROW><id>6458593</id><snippet>self.assertRaises(SSHException, controller.login)
</snippet></ROW><ROW><id>6458593</id><snippet>controller.login</snippet></ROW><ROW><id>6458593</id><snippet>controller.login()</snippet></ROW><ROW><id>6458593</id><snippet>login</snippet></ROW><ROW><id>6458593</id><snippet>assertRaises</snippet></ROW><ROW><id>6458641</id><snippet>sys.excepthook</snippet></ROW><ROW><id>6458729</id><snippet>#!/usr/bin/env python
"""
pipreqs.py: run ``pip install`` iteratively over a requirements file.
"""
def main(argv):
    try:
        filename = argv.pop(0)
    except IndexError:
        print("usage: pipreqs.py REQ_FILE [PIP_ARGS]")
    else:
        import pip
        retcode = 0
        with open(filename, 'r') as f:
            for line in f:
                pipcode = pip.main(['install', line.strip()] + argv)
                retcode = retcode or pipcode
        return retcode
if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv[1:]))
</snippet></ROW><ROW><id>6458729</id><snippet>pipreqs.py requirements.txt --some --other --pip --args</snippet></ROW><ROW><id>6459056</id><snippet>permutation</snippet></ROW><ROW><id>6459056</id><snippet>0-n</snippet></ROW><ROW><id>6459056</id><snippet>result=[array[i] for i in permutation]
</snippet></ROW><ROW><id>6459469</id><snippet>V = [1,2,3,4,5]

f = open('Qin.txt')     # values in Qin.txt: 1, 3, 2 
fdata = f.readlines()
f.close()

g = open('Qout.txt')    # values in Qout.txt: 4, 5, 5 
gdata = g.readlines()
g.close()

output = [[v + float(x) - float(y) for v in V] for y in gdata for x in fdata]

print output 
&gt;&gt;&gt;  [[-2.0, -1.0, 0.0, 1.0, 2.0], [-1.0, 0.0, 1.0, 2.0, 3.0], [-2.0, -1.0, 0.0, 1.0, 2.0]]
</snippet></ROW><ROW><id>6459469</id><snippet>V = [1,2,3,4,5]

f = open('Qin.txt')     # values in Qin.txt: 1, 3, 2 
fdata = map(float, f.readlines())
f.close()

g = open('Qout.txt')    # values in Qout.txt: 4, 5, 5 
gdata = map(float, g.readlines())
g.close()

output = [[v+fdata[i]-y for v in V] for i,y in enumerate(gdata)]
</snippet></ROW><ROW><id>6459469</id><snippet>V = [1,2,3,4,5]

f = open('Qin.txt')     # values in Qin.txt: 1, 3, 2 
fdata = map(float, f.readlines())
f.close()

g = open('Qout.txt')    # values in Qout.txt: 4, 5, 5 
gdata = map(float, g.readlines())
g.close()

for i,y in enumerate(gdata):
    for j,v in enumerate(V):
        V[j] = v + fdata[i] - y
    print V
</snippet></ROW><ROW><id>6459730</id><snippet>{k: v for k, v in my_dict.items() if v['baz'] == 'abc'}
</snippet></ROW><ROW><id>6460479</id><snippet>os.rename</snippet></ROW><ROW><id>6460479</id><snippet>os.remove(path)</snippet></ROW><ROW><id>6460479</id><snippet>endswith</snippet></ROW><ROW><id>6460479</id><snippet>import os, os.path

def print_tgzLogs (arg, dir, files):
    for file in files:
        path = os.path.join (dir, file)
        path = os.path.normcase (path)
        defaultFolder = "Log_Text_Files"
        if not defaultFolder.endswith(':') and not os.path.exists('c:\\Extracted\Log_Text_Files'):
            os.mkdir('C:\\Extracted\\Log_Text_Files')
        if path.endswith(".txt") or path.endswith(".log"):
            if os.path.exists('C:\\Extracted\\Log_Text_Files\\%s' % file):
                os.remove('C:\\Extracted\\Log_Text_Files\\%s' % file)
            os.rename(path, 'C:\\Extracted\\Log_Text_Files\\%s' % file)
            print path

os.path.walk('C:\\Extracted\\storage', print_tgzLogs, 0)
</snippet></ROW><ROW><id>6460492</id><snippet>base_fields</snippet></ROW><ROW><id>6460492</id><snippet>ContactForm.another_field = forms.CharField(...)
ContactForm.base_fields['another_field'] = ContactForm.another_field
</snippet></ROW><ROW><id>6460492</id><snippet>BaseForm</snippet></ROW><ROW><id>6460492</id><snippet>def make_contact_form(user):
    fields = { 'name': forms.CharField(max_length=50),
               'email': forms.EmailField(),
               'message': forms.CharField(widget=forms.Textarea) }
    if not user.is_authenticated:
        fields['captcha'] = CaptchaField()
    return type('ContactForm', [forms.BaseForm], { 'base_fields': fields })

)
</snippet></ROW><ROW><id>6460788</id><snippet>./manage.py migrate myapp zero
</snippet></ROW><ROW><id>6460814</id><snippet>capstyle</snippet></ROW><ROW><id>6460814</id><snippet>joinstyle</snippet></ROW><ROW><id>6460814</id><snippet>self.Line = self.DrawArea.create_line(self.startx,self.starty, x, y, fill='red',
    width=self.linewidth, capstyle=ROUND, joinstyle=ROUND)
</snippet></ROW><ROW><id>6461696</id><snippet>while True:
    #loop body
    if (!condition): break
</snippet></ROW><ROW><id>6462056</id><snippet>import Crypto.Random
from Crypto.Cipher import AES
import hashlib
</snippet></ROW><ROW><id>6462056</id><snippet># salt size in bytes
SALT_SIZE = 16

# number of iterations in the key generation
NUMBER_OF_ITERATIONS = 20

# the size multiple required for AES
AES_MULTIPLE = 16
</snippet></ROW><ROW><id>6462056</id><snippet>def generate_key(password, salt, iterations):
    assert iterations &gt; 0

    key = password + salt

    for i in range(iterations):
        key = hashlib.sha256(key).digest()  

    return key
</snippet></ROW><ROW><id>6462056</id><snippet>chr(padding_size)</snippet></ROW><ROW><id>6462056</id><snippet>ord(padded_text[-1])</snippet></ROW><ROW><id>6462056</id><snippet>def pad_text(text, multiple):
    extra_bytes = len(text) % multiple

    padding_size = multiple - extra_bytes

    padding = chr(padding_size) * padding_size

    padded_text = text + padding

    return padded_text

def unpad_text(padded_text):
    padding_size = ord(padded_text[-1])

    text = padded_text[:-padding_size]

    return text
</snippet></ROW><ROW><id>6462056</id><snippet>pad_text</snippet></ROW><ROW><id>6462056</id><snippet>def encrypt(plaintext, password):
    salt = Crypto.Random.get_random_bytes(SALT_SIZE)

    key = generate_key(password, salt, NUMBER_OF_ITERATIONS)

    cipher = AES.new(key, AES.MODE_ECB)

    padded_plaintext = pad_text(plaintext, AES_MULTIPLE)

    ciphertext = cipher.encrypt(padded_plaintext)

    ciphertext_with_salt = salt + ciphertext

    return ciphertext_with_salt
</snippet></ROW><ROW><id>6462056</id><snippet>unpad_text</snippet></ROW><ROW><id>6462056</id><snippet>def decrypt(ciphertext, password):
    salt = ciphertext[0:SALT_SIZE]

    ciphertext_sans_salt = ciphertext[SALT_SIZE:]

    key = generate_key(password, salt, NUMBER_OF_ITERATIONS)

    cipher = AES.new(key, AES.MODE_ECB)

    padded_plaintext = cipher.decrypt(ciphertext_sans_salt)

    plaintext = unpad_text(padded_plaintext)

    return plaintext
</snippet></ROW><ROW><id>6462060</id><snippet>map(int, mystring.split(','))
</snippet></ROW><ROW><id>6462188</id><snippet>pre_save</snippet></ROW><ROW><id>6462188</id><snippet>from django.db.models.signals import pre_save
from django.dispatch import receiver
from django.template.defaultfilters import slugify

@receiver(pre_save)
def my_callback(sender, instance, *args, **kwargs):
    instance.slug = slugify(instance.title)
</snippet></ROW><ROW><id>6462188</id><snippet>models.py</snippet></ROW><ROW><id>6462436</id><snippet>{"type":"basic","id":"156","payload":{"text":"asd"}}
</snippet></ROW><ROW><id>6462726</id><snippet>print lm.prob("word", ["This is a context which generates a word"])
# =&gt; 0.00493261081006
</snippet></ROW><ROW><id>6462739</id><snippet>from interval import Interval, IntervalSet
r1 = IntervalSet([Interval(1, 1000), Interval(1100, 1200)])
r2 = IntervalSet([Interval(30, 50), Interval(60, 200), Interval(1150, 1300)])
print(r1 - r2)

&gt;&gt;&gt; [1..30),(50..60),(200..1000],[1100..1150)
</snippet></ROW><ROW><id>6462950</id><snippet>sys.path</snippet></ROW><ROW><id>6462950</id><snippet>import &lt;app&gt;.&lt;module&gt;</snippet></ROW><ROW><id>6462950</id><snippet>manage.py</snippet></ROW><ROW><id>6462950</id><snippet>sys.path</snippet></ROW><ROW><id>6463971</id><snippet>'INSERT INTO media_files (ID, DATA) VALUES ("test", "test")'
</snippet></ROW><ROW><id>6464112</id><snippet>import distutils.sysconfig as sysconfig
import os
std_lib = sysconfig.get_python_lib(standard_lib=True)
for top, dirs, files in os.walk(std_lib):
    for nm in files:
        if nm != '__init__.py' and nm[-3:] == '.py':
            print os.path.join(top, nm)[len(std_lib)+1:-3].replace('\\','.')
</snippet></ROW><ROW><id>6464112</id><snippet>abc
aifc
antigravity
--- a bunch of other files ----
xml.parsers.expat
xml.sax.expatreader
xml.sax.handler
xml.sax.saxutils
xml.sax.xmlreader
xml.sax._exceptions
</snippet></ROW><ROW><id>6464112</id><snippet>site-packages</snippet></ROW><ROW><id>6464582</id><snippet>my_list = [
(1, 2, 3),
(1, 0, 2),
(3, 9 , 11),
(0, 2, 8),
(2, 3, 4),
(2, 4, 5),
(2, 7, 8),
]

print sorted(my_list)
&gt;&gt;&gt;[(0, 2, 8), (1, 0, 2), (1, 2, 3), (2, 3, 4), (2, 4, 5), (2, 7, 8), (3, 9, 11)]
</snippet></ROW><ROW><id>6464697</id><snippet>a = get_exif('photo2.jpg')
lat = [float(x)/float(y) for x, y in a['GPSInfo'][2]]
latref = a['GPSInfo'][1]
lon = [float(x)/float(y) for x, y in a['GPSInfo'][4]]
lonref = a['GPSInfo'][3]

lat = lat[0] + lat[1]/60 + lat[2]/3600
lon = lon[0] + lon[1]/60 + lon[2]/3600
if latref == 'S':
    lat = -lat
if lonref == 'W':
    lon = -lon
</snippet></ROW><ROW><id>6464749</id><snippet>&lt;a href="http://site.com/accounts/user/' + self.slug +'"&gt;
</snippet></ROW><ROW><id>6464868</id><snippet>sed -e 's/^[0-9]*//' test.cpp
</snippet></ROW><ROW><id>6464868</id><snippet>sed</snippet></ROW><ROW><id>6464868</id><snippet>\d</snippet></ROW><ROW><id>6464868</id><snippet>\w</snippet></ROW><ROW><id>6464868</id><snippet>\( \)</snippet></ROW><ROW><id>6465119</id><snippet>/etc/ld.so.conf</snippet></ROW><ROW><id>6465119</id><snippet>/etc/ld.so.conf.d/*</snippet></ROW><ROW><id>6465119</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>6465496</id><snippet>import xml2json

s = '''&lt;?xml version="1.0"?&gt;
&lt;note&gt;
   &lt;to&gt;Tove&lt;/to&gt;
   &lt;from&gt;Jani&lt;/from&gt;
   &lt;heading&gt;Reminder&lt;/heading&gt;
   &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;
&lt;/note&gt;'''
print xml2json.xml2json(s)
</snippet></ROW><ROW><id>6465500</id><snippet>from struct import *
f = open('file', 'rb')
print unpack('&lt;i', f.read(4))[0]
f.close()
</snippet></ROW><ROW><id>6465646</id><snippet>serve.py</snippet></ROW><ROW><id>6465646</id><snippet>pid = read_pidfile(pidfile)
if pid:
    try:
        os.kill(int(pid), 0)
        return pid
    except OSError, e:
        if e.errno == errno.EPERM:
            return pid
return None
</snippet></ROW><ROW><id>6465646</id><snippet>kill</snippet></ROW><ROW><id>6465646</id><snippet>TerminateProcess</snippet></ROW><ROW><id>6465646</id><snippet>os.kill</snippet></ROW><ROW><id>6465771</id><snippet>IDEs with integrated gui builder</snippet></ROW><ROW><id>6465853</id><snippet>import net.sf.json.JSONException;
import net.sf.json.JSONObject;

public class JSONExample {
    JSONObject json;
    JSONObject objJSON;
    JSONObject objObjJSON;

    public void addtoJSON(){
        json = new JSONObject();
        objJSON= new JSONObject();
        objObjJSON =new JSONObject();

        //adding last tree
        objObjJSON.put(10001, 0);
        objObjJSON.put(10002, 1);

        //adding secondary tree
        objJSON.put("status",1);
        objJSON.put("friends",objObjJSON);

        //added root tree
        objJSON.put(10003,objJSON);

        System.out.println("JSON is " + objJSON);


    }

}
</snippet></ROW><ROW><id>6466061</id><snippet>method</snippet></ROW><ROW><id>6466139</id><snippet>__main__</snippet></ROW><ROW><id>6466139</id><snippet># Ugly hack to allow absolute import from the root folder
# whatever its name is. Please forgive the heresy.
if __name__ == "__main__" and __package__ is None:
    from sys import path
    from os.path import dirname as dir

    path.append(dir(path[0]))
    __package__ = "examples"

import api
</snippet></ROW><ROW><id>6466139</id><snippet>path[0]</snippet></ROW><ROW><id>6466139</id><snippet>dir(path[0])</snippet></ROW><ROW><id>6466139</id><snippet>api</snippet></ROW><ROW><id>6466214</id><snippet>from piston.handler import BaseHandler
from myapp.models import Blogpost

class BlogpostHandler(BaseHandler):
   allowed_methods = ('GET',)
   model = Blogpost   

   def read(self, request, post_slug):
      ...
</snippet></ROW><ROW><id>6466214</id><snippet>read</snippet></ROW><ROW><id>6466214</id><snippet>create</snippet></ROW><ROW><id>6466214</id><snippet>rc.CREATED</snippet></ROW><ROW><id>6466214</id><snippet>update</snippet></ROW><ROW><id>6466214</id><snippet>rc.ALL_OK</snippet></ROW><ROW><id>6466214</id><snippet>delete</snippet></ROW><ROW><id>6466214</id><snippet>rc.DELETED</snippet></ROW><ROW><id>6466214</id><snippet>from django.conf.urls.defaults import *
from piston.resource import Resource
from mysite.myapp.api.handlers import BlogpostHandler

blogpost_handler = Resource(BlogpostHandler)

urlpatterns = patterns('',
   url(r'^blogpost/(?P&lt;post_slug&gt;[^/]+)/', blogpost_handler),
   url(r'^blogposts/', blogpost_handler),
)
</snippet></ROW><ROW><id>6466248</id><snippet>__init__.py</snippet></ROW><ROW><id>6466248</id><snippet>my_project/
    main.py
    package1/
        __init__.py
        module1
        module2
    package2/
        __init__.py
        module1
        module2
</snippet></ROW><ROW><id>6466248</id><snippet>main.py</snippet></ROW><ROW><id>6466248</id><snippet>package1</snippet></ROW><ROW><id>6466248</id><snippet>package2</snippet></ROW><ROW><id>6466248</id><snippet># in main.py
from package1.module1 import *
from package1.module2 import *

# in package1.module1
import module2
from package2.module1 import *

# in package2.module1 import *
import module2
from package1.module1 import *
</snippet></ROW><ROW><id>6466248</id><snippet>main.py</snippet></ROW><ROW><id>6466248</id><snippet># main.py

if __name__ == '__main__':
    from package1.module1 import SomeClass
    SomeClass().start()
</snippet></ROW><ROW><id>6466248</id><snippet>main.py</snippet></ROW><ROW><id>6466248</id><snippet># setup.py
import sys

def load():
    paths = ['/path1/','/path2/','/path3/']
    for p in path:
        sys.path.insert(0, p)

# entrypoint.py
from setup import load
load()
# continue with program
</snippet></ROW><ROW><id>6466876</id><snippet>'\x01'</snippet></ROW><ROW><id>6466876</id><snippet>cStringIO</snippet></ROW><ROW><id>6466876</id><snippet>def chariter(filelike):
    octet = filelike.read(1)
    while octet:
        yield ord(octet)
        octet = filelike.read(1)
</snippet></ROW><ROW><id>6466876</id><snippet>c.seek(0)
b = np.fromiter(chariter(c), int)
</snippet></ROW><ROW><id>6467095</id><snippet>getText</snippet></ROW><ROW><id>6467095</id><snippet>import BeautifulSoup
soup=BeautifulSoup.BeautifulSoup('&lt;html&gt;this&lt;b&gt;is&lt;/b&gt;example&lt;/html&gt;')

print soup.getText(separator=u' ')
# u'this is example'
</snippet></ROW><ROW><id>6467286</id><snippet>QListWidget list = new QListWidget  ();
QListWidgetItem item =new QListWidgetItem(QIcon("C:\\My.PNG"),"Winter",list);
</snippet></ROW><ROW><id>6467286</id><snippet>list1-&gt;setDragEnabled(true);
list2-&gt;setAcceptDrops(true);
</snippet></ROW><ROW><id>6467286</id><snippet>void dragEnterEvent(QDragEnterEvent *event);
void dragMoveEvent(QDragMoveEvent *event);
void dropEvent(QDropEvent *event);
void startDrag(Qt::DropActions supportedActions);
</snippet></ROW><ROW><id>6467301</id><snippet>class MyClass:
    def method(self):
        print("in main")

if __name__ == "__main__":
    MyClass().method()
</snippet></ROW><ROW><id>6467555</id><snippet>&gt;&gt;&gt; s = " hello "
&gt;&gt;&gt; s.strip()
'hello'
&gt;&gt;&gt; s.strip
&lt;built-in method strip of str object at 0x000000000223B9E0&gt;
</snippet></ROW><ROW><id>6467555</id><snippet>__getattr__</snippet></ROW><ROW><id>6467555</id><snippet>import types

class SomeClass(object):
    def __init__(self,label):
        self.label = label

    def __str__(self):
        return self.label

    def __getattr__(self, name):
        # If name begins with f create a method
        if name.startswith('f'):
            def myfunc(self):
                return "method " + name + " on SomeClass instance " + str(self)
            meth = types.MethodType(myfunc, self, SomeClass)
            return meth
        else:
            raise AttributeError()
</snippet></ROW><ROW><id>6467555</id><snippet>&gt;&gt;&gt; s = SomeClass("mytest")
&gt;&gt;&gt; s.f2()
'method f2 on SomeClass instance mytest'
&gt;&gt;&gt; s.f2
&lt;bound method SomeClass.myfunc of &lt;__main__.SomeClass object at 0x000000000233EC18&gt;&gt;
</snippet></ROW></DATA>