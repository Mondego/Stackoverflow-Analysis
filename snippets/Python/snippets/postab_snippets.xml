<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>336992</id><snippet>metavar</snippet></ROW><ROW><id>336992</id><snippet>add_option</snippet></ROW><ROW><id>336992</id><snippet>usage = "usage: %prog [options] arg1 arg2"
parser = OptionParser(usage=usage)
parser.add_option("-f", "--filename",
                  metavar="FILE", help="write output to FILE"),
</snippet></ROW><ROW><id>336992</id><snippet>usage: &lt;yourscript&gt; [options] arg1 arg2

options:
  -f FILE, --filename=FILE
</snippet></ROW><ROW><id>337285</id><snippet>from itertools import takewhile
usefullines = takewhile(lambda x: not re.search(stopterm, x), lines)

from itertools import takewhile
usefullines = takewhile(lambda x: stopterm not in x, lines)
</snippet></ROW><ROW><id>337285</id><snippet>def useful_lines(lines, stopterm):
    for line in lines:
        if stopterm in line:
            yield line
            break
        yield line

usefullines = useful_lines(lines, stopterm)
# or...
for line in useful_lines(lines, stopterm):
    # ... do stuff
    pass
</snippet></ROW><ROW><id>337706</id><snippet>cursorclass = MySQLdb.cursors.SSCursor</snippet></ROW><ROW><id>337706</id><snippet> MySQLdb.connect(user="user", 
                 passwd="password",
                 db="mydb",
                 cursorclass = MySQLdb.cursors.SSCursor
                )
</snippet></ROW><ROW><id>337706</id><snippet>fetchall</snippet></ROW><ROW><id>337706</id><snippet>SSCursor</snippet></ROW><ROW><id>337706</id><snippet>MySQLdb.cursors</snippet></ROW><ROW><id>337714</id><snippet>**kwargs</snippet></ROW><ROW><id>337714</id><snippet>def f(**kwargs):
    print kwargs.keys()


f(a=2, b="b")     # -&gt; ['a', 'b']
f(**{'d'+'e': 1}) # -&gt; ['de']
</snippet></ROW><ROW><id>337990</id><snippet>sys.stdin</snippet></ROW><ROW><id>337990</id><snippet>sys.stdout</snippet></ROW><ROW><id>337990</id><snippet>subprocess.call()</snippet></ROW><ROW><id>337990</id><snippet>os.devnull</snippet></ROW><ROW><id>338145</id><snippet>class Foo(WebService):
    @webmethod
    def bar(self, arg1, arg2):
         ...
</snippet></ROW><ROW><id>338145</id><snippet>def webmethod(func):
    func.is_webmethod = True
    return func
</snippet></ROW><ROW><id>338519</id><snippet>import threading
import webbrowser
import BaseHTTPServer
import SimpleHTTPServer

FILE = 'frontend.html'
PORT = 8080


class TestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    """The test example handler."""

    def do_POST(self):
        """Handle a post request by returning the square of the number."""
        length = int(self.headers.getheader('content-length'))        
        data_string = self.rfile.read(length)
        try:
            result = int(data_string) ** 2
        except:
            result = 'error'
        self.wfile.write(result)


def open_browser():
    """Start a browser after waiting for half a second."""
    def _open_browser():
        webbrowser.open('http://localhost:%s/%s' % (PORT, FILE))
    thread = threading.Timer(0.5, _open_browser)
    thread.start()

def start_server():
    """Start the server."""
    server_address = ("", PORT)
    server = BaseHTTPServer.HTTPServer(server_address, TestHandler)
    server.serve_forever()

if __name__ == "__main__":
    open_browser()
    start_server()
</snippet></ROW><ROW><id>338519</id><snippet>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;AJAX test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script type="text/javascript"&gt;

function xml_http_post(url, data, callback) {
    var req = false;
    try {
        // Firefox, Opera 8.0+, Safari
        req = new XMLHttpRequest();
    }
    catch (e) {
        // Internet Explorer
        try {
            req = new ActiveXObject("Msxml2.XMLHTTP");
        }
        catch (e) {
            try {
                req = new ActiveXObject("Microsoft.XMLHTTP");
            }
            catch (e) {
                alert("Your browser does not support AJAX!");
                return false;
            }
        }
    }
    req.open("POST", url, true);
    req.onreadystatechange = function() {
        if (req.readyState == 4) {
            callback(req);
        }
    }
    req.send(data);
}

function test_button() {
    var data = document.test_form.test_text.value;           
    xml_http_post("frontend.html", data, test_handle)
}

function test_handle(req) {
    var elem = document.getElementById('test_result')
    elem.innerHTML =  req.responseText
}

&lt;/script&gt;

&lt;form name=test_form&gt;
sqr(
&lt;input type="text" name="test_text" value="0" size="4"&gt;
) =
&lt;span id="test_result"&gt;0&lt;/span&gt;
&lt;input type=button onClick="test_button();" value="start" title="start"&gt;
&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>338519</id><snippet>import threading
import webbrowser
from wsgiref.simple_server import make_server

FILE = 'frontend.html'
PORT = 8080

def test_app(environ, start_response):
    if environ['REQUEST_METHOD'] == 'POST':
        try:
            request_body_size = int(environ['CONTENT_LENGTH'])
            request_body = environ['wsgi.input'].read(request_body_size)
        except (TypeError, ValueError):
            request_body = "0"
        try:
            response_body = str(int(request_body) ** 2)
        except:
            response_body = "error"
        status = '200 OK'
        headers = [('Content-type', 'text/plain')]
        start_response(status, headers)
        return [response_body]
    else:
        response_body = open(FILE).read()
        status = '200 OK'
        headers = [('Content-type', 'text/html'),
                   ('Content-Length', str(len(response_body)))]
        start_response(status, headers)
        return [response_body]

def open_browser():
    """Start a browser after waiting for half a second."""
    def _open_browser():
        webbrowser.open('http://localhost:%s/%s' % (PORT, FILE))
    thread = threading.Timer(0.5, _open_browser)
    thread.start()

def start_server():
    """Start the server."""
    httpd = make_server("", PORT, test_app)
    httpd.serve_forever()

if __name__ == "__main__":
    open_browser()
    start_server()
</snippet></ROW><ROW><id>338566</id><snippet>logging/handlers.py</snippet></ROW><ROW><id>338566</id><snippet>handler = logging.handlers.TimedRotatingFileHandler("C:\\isis_ops\\logs\\Rotate_Test",'midnight',1)
handler.suffix = "%Y-%m-%d" # or anything else that strftime will allow
root_logger.addHandler(handler)
</snippet></ROW><ROW><id>339013</id><snippet>&gt;&gt;&gt; n = '4'
&gt;&gt;&gt; print n.zfill(3)
&gt;&gt;&gt; '004'
</snippet></ROW><ROW><id>339013</id><snippet>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; print '%03d' % n
&gt;&gt;&gt; 004
&gt;&gt;&gt; print "{0:03d}".format(4)  # python &gt;= 2.6
&gt;&gt;&gt; 004
&gt;&gt;&gt; print("{0:03d}".format(4))  # python 3
&gt;&gt;&gt; 004
</snippet></ROW><ROW><id>339220</id><snippet>__init__.py</snippet></ROW><ROW><id>339220</id><snippet>__init__.py</snippet></ROW><ROW><id>339220</id><snippet>__init__.py.bin</snippet></ROW><ROW><id>339220</id><snippet>__init__.py</snippet></ROW><ROW><id>339506</id><snippet>import zipfile
import zlib
import os

src = open( doc, "rb" )
zf = zipfile.ZipFile( src )
for m in  zf.infolist():

    # Examine the header
    print m.filename, m.header_offset, m.compress_size, repr(m.extra), repr(m.comment)
    src.seek( m.header_offset )
    src.read( 30 ) # Good to use struct to unpack this.
    nm= src.read( len(m.filename) )
    if len(m.extra) &gt; 0: ex= src.read( len(m.extra) )
    if len(m.comment) &gt; 0: cm= src.read( len(m.comment) ) 

    # Build a decompression object
    decomp= zlib.decompressobj(-15)

    # This can be done with a loop reading blocks
    out= open( m.filename, "wb" )
    result= decomp.decompress( src.read( m.compress_size ) )
    out.write( result )
    result = decomp.flush()
    out.write( result )
    # end of the loop
    out.close()

zf.close()
src.close()
</snippet></ROW><ROW><id>339842</id><snippet>for line in open('myfile.txt'):  # opened in text-mode; all EOLs are converted to '\n'
    line = line.rstrip('\n')
    process(line)
</snippet></ROW><ROW><id>339884</id><snippet>time</snippet></ROW><ROW><id>339884</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; a="Some Random text of undetermined length Jan 28, 1986"
&gt;&gt;&gt; datetuple = a.rsplit(" ",3)[-3:]
&gt;&gt;&gt; datetuple
['Jan', '28,', '1986']
&gt;&gt;&gt; time.strptime(' '.join(datetuple),"%b %d, %Y")
time.struct_time(tm_year=1986, tm_mon=1, tm_mday=28, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=28, tm_isdst=-1)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>339884</id><snippet>datetime</snippet></ROW><ROW><id>339884</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime(" ".join(datetuple), "%b %d, %Y")
datetime.datetime(1986, 1, 28, 0, 0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>340896</id><snippet>logger = paramiko.util.logging.getLogger()
</snippet></ROW><ROW><id>340896</id><snippet>paramiko.util.log_to_file('filename.log')
</snippet></ROW><ROW><id>341389</id><snippet>@foo
def bar ():
    pass
</snippet></ROW><ROW><id>341389</id><snippet>def bar ():
    pass
bar = foo(bar)
</snippet></ROW><ROW><id>341621</id><snippet>cleaned_data['url']</snippet></ROW><ROW><id>341621</id><snippet>example.com</snippet></ROW><ROW><id>341621</id><snippet>http://example.com/</snippet></ROW><ROW><id>341621</id><snippet>clean_url()</snippet></ROW><ROW><id>341621</id><snippet>def clean_url(self):
        url = self.cleaned_data['url']        
        bits = urlparse(url)
        dom = bits[1]
        try:
            site=Site.objects.get(domain__iexact=dom)
        except Site.DoesNotExist:
            return dom
        raise forms.ValidationError(u'That domain is already taken.  Please choose another')
</snippet></ROW><ROW><id>342484</id><snippet>Template</snippet></ROW><ROW><id>342484</id><snippet>try: import elementtree.ElementTree as ET
except ImportError:
    try: import cElementTree as ET
    except ImportError:
        try: import lxml.etree as ET
        except ImportError:
            import xml.etree.ElementTree as ET # Python 2.5 and up
</snippet></ROW><ROW><id>343284</id><snippet>digester.update(self._options.get('code'))
</snippet></ROW><ROW><id>343284</id><snippet>digester.update(self._options.get('code').encode("utf-8"))
</snippet></ROW><ROW><id>345334</id><snippet>GET</snippet></ROW><ROW><id>345334</id><snippet>POST</snippet></ROW><ROW><id>345334</id><snippet>Context</snippet></ROW><ROW><id>345334</id><snippet>Context</snippet></ROW><ROW><id>345334</id><snippet>forms.Form</snippet></ROW><ROW><id>345334</id><snippet>/form/</snippet></ROW><ROW><id>345334</id><snippet>{'myform': forms.Form()}</snippet></ROW><ROW><id>345334</id><snippet>from django.test.client import Client
c = Client()

# request the web page:
response = c.get('/form/')

# get the Form object:
form = response.context['myform']

form_data = form.cleaned_data
my_form_data = {} # put your filled-out data in here...
form_data.update(my_form_data)

# submit the form back to the web page:
new_form = forms.Form(form_data)
if new_form.is_valid():
    c.post('/form/', new_form.cleaned_data)
</snippet></ROW><ROW><id>345334</id><snippet>Form</snippet></ROW><ROW><id>345529</id><snippet>site</snippet></ROW><ROW><id>345529</id><snippet>Photo</snippet></ROW><ROW><id>345529</id><snippet>ForeignKey</snippet></ROW><ROW><id>345529</id><snippet>Gallery</snippet></ROW><ROW><id>345529</id><snippet>limit_choices_to</snippet></ROW><ROW><id>345529</id><snippet>photos</snippet></ROW><ROW><id>345529</id><snippet>Gallery</snippet></ROW><ROW><id>345529</id><snippet>ForeignKey</snippet></ROW><ROW><id>345529</id><snippet>Site</snippet></ROW><ROW><id>345529</id><snippet>class Photo(models.Model):
    title = models.CharField(max_length=100)
    gallery = models.ForeignKey(Gallery, related_name='photos')
    file = models.ImageField(upload_to=get_site_profile_path) 

    def __unicode__(self):
        return self.title


class Gallery(models.Model):    
    name = models.CharField(max_length=40)
    site = models.ForeignKey(Site)

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>345529</id><snippet>site</snippet></ROW><ROW><id>345529</id><snippet>photo_instance.gallery.site</snippet></ROW><ROW><id>345529</id><snippet>@property
def site(self):
    return self.gallery.site
</snippet></ROW><ROW><id>345529</id><snippet>site</snippet></ROW><ROW><id>345669</id><snippet># file logconfig.py
if not hasattr(logging, "set_up_done"):
    logging.set_up_done=False

def set_up(myhome):
    if logging.set_up_done:
        return
    # set up your logging here
    # ...
    logging.set_up_done=True
</snippet></ROW><ROW><id>345773</id><snippet> return (a and [b] or [c])[0]
</snippet></ROW><ROW><id>345773</id><snippet> return (b,c)[not a]
</snippet></ROW><ROW><id>345773</id><snippet> return (c,b)[bool(a)]
</snippet></ROW><ROW><id>346195</id><snippet>select distinct date_trunc('month', (current_date - offs)) as date 
from generate_series(0,365,28) as offs;
          date
------------------------
 2007-12-01 00:00:00+01
 2008-01-01 00:00:00+01
 2008-02-01 00:00:00+01
 2008-03-01 00:00:00+01
 2008-04-01 00:00:00+02
 2008-05-01 00:00:00+02
 2008-06-01 00:00:00+02
 2008-07-01 00:00:00+02
 2008-08-01 00:00:00+02
 2008-09-01 00:00:00+02
 2008-10-01 00:00:00+02
 2008-11-01 00:00:00+01
 2008-12-01 00:00:00+01
</snippet></ROW><ROW><id>346237</id><snippet>f</snippet></ROW><ROW><id>346237</id><snippet>dir(f)</snippet></ROW><ROW><id>346237</id><snippet>read</snippet></ROW><ROW><id>346237</id><snippet>help(f.read)</snippet></ROW><ROW><id>346237</id><snippet>f.read()</snippet></ROW><ROW><id>346276</id><snippet>findall</snippet></ROW><ROW><id>346276</id><snippet>finditer</snippet></ROW><ROW><id>346276</id><snippet>match</snippet></ROW><ROW><id>346276</id><snippet>findall</snippet></ROW><ROW><id>346276</id><snippet>r"'(?P&lt;main&gt;\d+)\[(?P&lt;thumb&gt;\d+)\]',?"
</snippet></ROW><ROW><id>346501</id><snippet>import logging
logging.basicConfig()
</snippet></ROW><ROW><id>346753</id><snippet>re.findall()
</snippet></ROW><ROW><id>346877</id><snippet>direct_to_template</snippet></ROW><ROW><id>346877</id><snippet>r'^foo/(?P&lt;template_name&gt;.+)/$','direct_to_template', {'template': 'foo_index.html'}),
</snippet></ROW><ROW><id>346877</id><snippet>foo_index.html</snippet></ROW><ROW><id>346877</id><snippet>{% include template_name %}
</snippet></ROW><ROW><id>347175</id><snippet>import unittest

class UnderTest(object):

    def f1(self, i):
        return i + 1

    def f2(self, i):
        return i + 2

class TestMeta(type):

    def __new__(cls, name, bases, attrs):
        funcs = [t for t in dir(UnderTest) if t[0] == 'f']

        def doTest(t):
            def f(slf):
                ut=UnderTest()
                getattr(ut, t)(3)
            return f

        for f in funcs:
            attrs['test_gen_' + f] = doTest(f)
        return type.__new__(cls, name, bases, attrs)

class T(unittest.TestCase):

    __metaclass__ = TestMeta

    def testOne(self):
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>347271</id><snippet>delta = maximum - minimum
factor = 10**math.ceil(math.log(delta,10))  # smallest power of 10 greater than delta
normalised_delta = delta / factor           # 0.1 &lt;= normalised_delta &lt; 1
if normalised_delta/5 &gt;= 0.1:
  step_size = 0.1
elif normalised_delta/5 &gt;= 0.05:
  step_size = 0.05
elif normalised_delta/20 &lt;= 0.01:
  step_size = 0.01
step_size = step_size * factor
</snippet></ROW><ROW><id>347271</id><snippet>if normalised_delta/20 == 0.005:
  step_size = 0.005
elif normalised_delta/20 &lt;= 0.01:
  step_size = 0.01
elif normalised_delta/5 &gt;= 0.05:
  step_size = 0.05
</snippet></ROW><ROW><id>347549</id><snippet>import math

def next_multiple(x, y):
    return math.ceil(x/y)*y

def try_it(x, y):
    print x, y, next_multiple(x, y)

for x, y in [
    (1.002, 0.1),
    (0.348, 0.1),
    (0.50, 1),
    (0.32, 0.05)
    ]:
    try_it(x, y)
</snippet></ROW><ROW><id>347549</id><snippet>1.002 0.1 1.1
0.348 0.1 0.4
0.5 1 1.0
0.32 0.05 0.35
</snippet></ROW><ROW><id>347560</id><snippet>{% load humanize %}
{{ my_num|intcomma }}
</snippet></ROW><ROW><id>347733</id><snippet>def index(req, an_arg='default'):
    return some_html
</snippet></ROW><ROW><id>347733</id><snippet>def index(req, an_arg='default'):
    req.content_type = 'text/html'
    return some_html
</snippet></ROW><ROW><id>347749</id><snippet>4*t</snippet></ROW><ROW><id>347749</id><snippet>pi = (a+b)**2 / (4*t)
</snippet></ROW><ROW><id>347749</id><snippet>decimal</snippet></ROW><ROW><id>347749</id><snippet>#!/usr/bin/env python
from __future__ import with_statement
import decimal


def pi_gauss_legendre():
    D = decimal.Decimal
    with decimal.localcontext() as ctx:
        ctx.prec += 2                
        a, b, t, p = 1, 1/D(2).sqrt(), 1/D(4), 1                
        pi = None
        while 1:
            an    = (a + b) / 2
            b     = (a * b).sqrt()
            t    -= p * (a - an) * (a - an)
            a, p  = an, 2*p
            piold = pi
            pi    = (a + b) * (a + b) / (4 * t)
            if pi == piold:  # equal within given precision
                break
    return +pi


decimal.getcontext().prec = 100
print pi_gauss_legendre()
</snippet></ROW><ROW><id>347749</id><snippet>3.141592653589793238462643383279502884197169399375105820974944592307816406286208\
    998628034825342117068
</snippet></ROW><ROW><id>348546</id><snippet>&lt;!-- component_name {{host}} {{timestamp}} --&gt;
</snippet></ROW><ROW><id>348546</id><snippet>&lt;!-- {{page_object.class_id}} @ {{timestamp}} --&gt;
</snippet></ROW><ROW><id>348546</id><snippet>def class_id(self):
    "%s.%s.%s" % (self.__class__._meta.app_label,
                    self.__class__.__name__, self.id)
</snippet></ROW><ROW><id>348551</id><snippet>import smtplib

server = 'mail.server.com'
user = ''
password = ''

recipients = ['user@mail.com', 'other@mail.com']
sender = 'you@mail.com'
message = 'Hello World'

session = smtplib.SMTP(server)
# if your SMTP server doesn't need authentications,
# you don't need the following line:
session.login(user, password)
session.sendmail(sender, recipients, message)
</snippet></ROW><ROW><id>349020</id><snippet>knownfiles</snippet></ROW><ROW><id>349020</id><snippet>init()</snippet></ROW><ROW><id>349197</id><snippet>'function(%s)' % ', '.join(args)
</snippet></ROW><ROW><id>349197</id><snippet>'function(a, b, c, d)'
</snippet></ROW><ROW><id>349494</id><snippet>Base.object.all()</snippet></ROW><ROW><id>349494</id><snippet>from django.contrib.contenttypes.models import ContentType

class Base(models.Model):

    content_type = models.ForeignKey(ContentType,editable=False,null=True)

    def save(self):
        if(not self.content_type):
            self.content_type = ContentType.objects.get_for_model(self.__class__)
        self.save_base()

    def as_leaf_class(self):
        content_type = self.content_type
        model = content_type.model_class()
        if(model == Base):
            return self
        return model.objects.get(id=self.id)
</snippet></ROW><ROW><id>349494</id><snippet>if Base.content_type.model_class()</snippet></ROW><ROW><id>349697</id><snippet>p = subprocess.Popen('start /B MOZILL~1.LNK', shell=True)
p.wait()
</snippet></ROW><ROW><id>349697</id><snippet>p.pid</snippet></ROW><ROW><id>349697</id><snippet>os.waitpid()</snippet></ROW><ROW><id>350568</id><snippet>mins = items[:n]
mins.sort()
for i in items[n:]:
    if i &lt; mins[-1]: 
        mins.append(i)
        mins.sort()
        mins= mins[:n]
</snippet></ROW><ROW><id>350568</id><snippet>mins(items, n): 0.297000169754
sorted(items)[:n]: 0.109999895096
mins2(items)[:n]: 0.0309998989105
</snippet></ROW><ROW><id>350568</id><snippet>bisect.insort</snippet></ROW><ROW><id>350695</id><snippet>PyDict_New()</snippet></ROW><ROW><id>350695</id><snippet>PyDict</snippet></ROW><ROW><id>350695</id><snippet>pyTimeList</snippet></ROW><ROW><id>350695</id><snippet>Py_INCREF</snippet></ROW><ROW><id>350695</id><snippet>pyDB</snippet></ROW><ROW><id>350913</id><snippet>form.py</snippet></ROW><ROW><id>350913</id><snippet>__new__</snippet></ROW><ROW><id>350913</id><snippet>self.fields</snippet></ROW><ROW><id>350913</id><snippet>self.fields</snippet></ROW><ROW><id>350913</id><snippet>SortedDict</snippet></ROW><ROW><id>350913</id><snippet>datastructures.py</snippet></ROW><ROW><id>350913</id><snippet>class ContactForm(forms.Form):
    subject = forms.CharField(max_length=100)
    message = forms.CharField()
    def __init__(self,*args,**kwargs):
        forms.Form.__init__(self,*args,**kwargs)
        #first argument, index is the position of the field you want it to come before
        self.fields.insert(0,'sender',forms.EmailField(initial=str(time.time())))
</snippet></ROW><ROW><id>351287</id><snippet>__hash__()</snippet></ROW><ROW><id>351287</id><snippet>__eq__()</snippet></ROW><ROW><id>351287</id><snippet>__cmp__()</snippet></ROW><ROW><id>351475</id><snippet>import urllib
sock = urllib.urlopen("http://en.wikipedia.org/wiki/Python_(programming_language)")
htmlsource = sock.read()
sock.close()
print htmlsource
</snippet></ROW><ROW><id>351475</id><snippet>import urllib2
f = urllib2.urlopen('http://www.python.org/')
print f.read(100)
</snippet></ROW><ROW><id>351832</id><snippet>command=TL.destroy
</snippet></ROW><ROW><id>351832</id><snippet>command=lambda: TL.destroy()
</snippet></ROW><ROW><id>351934</id><snippet>&gt;&gt;&gt; imap.authenticate('bobdole@gmail.com', 'Bob Dole likes your style!')
</snippet></ROW><ROW><id>351934</id><snippet>&gt;&gt;&gt; imap.login('bobdole@gmail.com', 'Bob Dole likes your style!')
</snippet></ROW><ROW><id>352497</id><snippet>from cherrypy.lib.static import serve_file
</snippet></ROW><ROW><id>352497</id><snippet>import glob
import os.path

import cherrypy
from cherrypy.lib.static import serve_file


class Root:
    def index(self, directory="."):
        html = """&lt;html&gt;&lt;body&gt;&lt;h2&gt;Here are the files in the selected directory:&lt;/h2&gt;
        &lt;a href="index?directory=%s"&gt;Up&lt;/a&gt;&lt;br /&gt;
        """ % os.path.dirname(os.path.abspath(directory))

        for filename in glob.glob(directory + '/*'):
            absPath = os.path.abspath(filename)
            if os.path.isdir(absPath):
                html += '&lt;a href="/index?directory=' + absPath + '"&gt;' + os.path.basename(filename) + "&lt;/a&gt; &lt;br /&gt;"
            else:
                html += '&lt;a href="/download/?filepath=' + absPath + '"&gt;' + os.path.basename(filename) + "&lt;/a&gt; &lt;br /&gt;"

        html += """&lt;/body&gt;&lt;/html&gt;"""
        return html
    index.exposed = True

class Download:
        def index(self, filepath):
        return serve_file(filepath, "application/x-download", "attachment")
        index.exposed = True

if __name__ == '__main__':
    root = Root()
    root.download = Download()
    cherrypy.quickstart(root)
</snippet></ROW><ROW><id>352513</id><snippet>str = str[:1].upper() + str[1:]
</snippet></ROW><ROW><id>352546</id><snippet>&gt;&gt;&gt; class X(str):
...     def myMethod( self ):
...             return int(self)
...
&gt;&gt;&gt; s=X("Hi Mom")
&gt;&gt;&gt; s.lower()
'hi mom'
&gt;&gt;&gt; s.myMethod()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in myMethod
ValueError: invalid literal for int() with base 10: 'Hi Mom'

&gt;&gt;&gt; z=X("271828")
&gt;&gt;&gt; z.lower()
'271828'
&gt;&gt;&gt; z.myMethod()
271828
</snippet></ROW><ROW><id>352973</id><snippet>#!/usr/bin/env python
"""It is a `filename -&gt; filename.ext` filter. 

   `ext` is mime-based.

"""
import fileinput
import mimetypes
import os
import sys
from subprocess import Popen, PIPE

if len(sys.argv) &gt; 1 and sys.argv[1] == '--rename':
    do_rename = True
    del sys.argv[1]
else:
    do_rename = False    

for filename in (line.rstrip() for line in fileinput.input()):
    output, _ = Popen(['file', '-bi', filename], stdout=PIPE).communicate()
    mime = output.split(';', 1)[0].lower().strip()
    ext = mimetypes.guess_extension(mime, strict=False)
    if ext is None:
        ext = os.path.extsep + 'undefined'
    filename_ext = filename + ext
    print filename_ext
    if do_rename:
       os.rename(filename, filename_ext)
</snippet></ROW><ROW><id>352973</id><snippet>#!/usr/bin/env python
"""It is a `filename -&gt; filename.ext` filter. 

   `ext` is mime-based.
"""
# Mapping of mime-types to extensions is taken form here:
# http://as3corelib.googlecode.com/svn/trunk/src/com/adobe/net/MimeTypeMap.as
mime2exts_list = [
    ["application/andrew-inset","ez"],
    ["application/atom+xml","atom"],
    ["application/mac-binhex40","hqx"],
    ["application/mac-compactpro","cpt"],
    ["application/mathml+xml","mathml"],
    ["application/msword","doc"],
    ["application/octet-stream","bin","dms","lha","lzh","exe","class","so","dll","dmg"],
    ["application/oda","oda"],
    ["application/ogg","ogg"],
    ["application/pdf","pdf"],
    ["application/postscript","ai","eps","ps"],
    ["application/rdf+xml","rdf"],
    ["application/smil","smi","smil"],
    ["application/srgs","gram"],
    ["application/srgs+xml","grxml"],
    ["application/vnd.adobe.apollo-application-installer-package+zip","air"],
    ["application/vnd.mif","mif"],
    ["application/vnd.mozilla.xul+xml","xul"],
    ["application/vnd.ms-excel","xls"],
    ["application/vnd.ms-powerpoint","ppt"],
    ["application/vnd.rn-realmedia","rm"],
    ["application/vnd.wap.wbxml","wbxml"],
    ["application/vnd.wap.wmlc","wmlc"],
    ["application/vnd.wap.wmlscriptc","wmlsc"],
    ["application/voicexml+xml","vxml"],
    ["application/x-bcpio","bcpio"],
    ["application/x-cdlink","vcd"],
    ["application/x-chess-pgn","pgn"],
    ["application/x-cpio","cpio"],
    ["application/x-csh","csh"],
    ["application/x-director","dcr","dir","dxr"],
    ["application/x-dvi","dvi"],
    ["application/x-futuresplash","spl"],
    ["application/x-gtar","gtar"],
    ["application/x-hdf","hdf"],
    ["application/x-javascript","js"],
    ["application/x-koan","skp","skd","skt","skm"],
    ["application/x-latex","latex"],
    ["application/x-netcdf","nc","cdf"],
    ["application/x-sh","sh"],
    ["application/x-shar","shar"],
    ["application/x-shockwave-flash","swf"],
    ["application/x-stuffit","sit"],
    ["application/x-sv4cpio","sv4cpio"],
    ["application/x-sv4crc","sv4crc"],
    ["application/x-tar","tar"],
    ["application/x-tcl","tcl"],
    ["application/x-tex","tex"],
    ["application/x-texinfo","texinfo","texi"],
    ["application/x-troff","t","tr","roff"],
    ["application/x-troff-man","man"],
    ["application/x-troff-me","me"],
    ["application/x-troff-ms","ms"],
    ["application/x-ustar","ustar"],
    ["application/x-wais-source","src"],
    ["application/xhtml+xml","xhtml","xht"],
    ["application/xml","xml","xsl"],
    ["application/xml-dtd","dtd"],
    ["application/xslt+xml","xslt"],
    ["application/zip","zip"],
    ["audio/basic","au","snd"],
    ["audio/midi","mid","midi","kar"],
    ["audio/mpeg","mp3","mpga","mp2"],
    ["audio/x-aiff","aif","aiff","aifc"],
    ["audio/x-mpegurl","m3u"],
    ["audio/x-pn-realaudio","ram","ra"],
    ["audio/x-wav","wav"],
    ["chemical/x-pdb","pdb"],
    ["chemical/x-xyz","xyz"],
    ["image/bmp","bmp"],
    ["image/cgm","cgm"],
    ["image/gif","gif"],
    ["image/ief","ief"],
    ["image/jpeg","jpg","jpeg","jpe"],
    ["image/png","png"],
    ["image/svg+xml","svg"],
    ["image/tiff","tiff","tif"],
    ["image/vnd.djvu","djvu","djv"],
    ["image/vnd.wap.wbmp","wbmp"],
    ["image/x-cmu-raster","ras"],
    ["image/x-icon","ico"],
    ["image/x-portable-anymap","pnm"],
    ["image/x-portable-bitmap","pbm"],
    ["image/x-portable-graymap","pgm"],
    ["image/x-portable-pixmap","ppm"],
    ["image/x-rgb","rgb"],
    ["image/x-xbitmap","xbm"],
    ["image/x-xpixmap","xpm"],
    ["image/x-xwindowdump","xwd"],
    ["model/iges","igs","iges"],
    ["model/mesh","msh","mesh","silo"],
    ["model/vrml","wrl","vrml"],
    ["text/calendar","ics","ifb"],
    ["text/css","css"],
    ["text/html","html","htm"],
    ["text/plain","txt","asc"],
    ["text/richtext","rtx"],
    ["text/rtf","rtf"],
    ["text/sgml","sgml","sgm"],
    ["text/tab-separated-values","tsv"],
    ["text/vnd.wap.wml","wml"],
    ["text/vnd.wap.wmlscript","wmls"],
    ["text/x-setext","etx"],
    ["video/mpeg","mpg","mpeg","mpe"],
    ["video/quicktime","mov","qt"],
    ["video/vnd.mpegurl","m4u","mxu"],
    ["video/x-flv","flv"],
    ["video/x-msvideo","avi"],
    ["video/x-sgi-movie","movie"],
    ["x-conference/x-cooltalk","ice"]]

#NOTE: take only the first extension
mime2ext = dict(x[:2] for x in mime2exts_list)

if __name__ == '__main__':
    import fileinput, os.path
    from subprocess import Popen, PIPE

    for filename in (line.rstrip() for line in fileinput.input()):
        output, _ = Popen(['file', '-bi', filename], stdout=PIPE).communicate()
        mime = output.split(';', 1)[0].lower().strip()
        print filename + os.path.extsep + mime2ext.get(mime, 'undefined')
</snippet></ROW><ROW><id>352973</id><snippet>#NOTE: take only the first extension
mime2ext = {}
for x in mime2exts_list:
    mime2ext[x[0]] = x[1]

if __name__ == '__main__':
    import os
    import sys

    # this version supports only stdin (part of fileinput.input() functionality)
    lines = sys.stdin.read().split('\n')
    for line in lines:
        filename = line.rstrip()
        output = os.popen('file -bi ' + filename).read()        
        mime = output.split(';')[0].lower().strip()
        try: ext = mime2ext[mime]
        except KeyError:
             ext = 'undefined'
        print filename + '.' + ext
</snippet></ROW><ROW><id>353159</id><snippet>ln -s /usr/bin/python2.4 $HOME/bin/python
export PATH="$HOME/bin:$PATH"
</snippet></ROW><ROW><id>353389</id><snippet>AllocationSet(
    Alloc( name="some name", value=1.23 ),
    Alloc( name="another name", value=2.34 ),
    Alloc( name="yet another name", value=4.56 ),
)
</snippet></ROW><ROW><id>353667</id><snippet>django.contrib.contenttypes</snippet></ROW><ROW><id>353667</id><snippet>Favorite</snippet></ROW><ROW><id>353667</id><snippet>from django.db import models
from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Favorite(models.Model):
    user = models.ForeignKey(User)
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>353667</id><snippet>Favorite</snippet></ROW><ROW><id>353667</id><snippet>Favorite</snippet></ROW><ROW><id>353667</id><snippet>content_type</snippet></ROW><ROW><id>353667</id><snippet>object_id</snippet></ROW><ROW><id>354215</id><snippet>cars = CarModel.objects.all()
for op in self.cleaned_data['options']:
    cars = cars.filter((op, True))
</snippet></ROW><ROW><id>354422</id><snippet>set smartindent
</snippet></ROW><ROW><id>354422</id><snippet>set cindent
</snippet></ROW><ROW><id>354626</id><snippet>PyObject *
PyNumber_Power(PyObject *v, PyObject *w, PyObject *z)
{
    return ternary_op(v, w, z, NB_SLOT(nb_power), "** or pow()");
}
</snippet></ROW><ROW><id>354626</id><snippet>if (Py_SIZE(b) &lt;= FIVEARY_CUTOFF) {
	/* Left-to-right binary exponentiation (HAC Algorithm 14.79) */
	/* http://www.cacr.math.uwaterloo.ca/hac/about/chap14.pdf    */
	for (i = Py_SIZE(b) - 1; i &gt;= 0; --i) {
		digit bi = b-&gt;ob_digit[i];

		for (j = 1 &lt;&lt; (PyLong_SHIFT-1); j != 0; j &gt;&gt;= 1) {
			MULT(z, z, z)
			if (bi &amp; j)
				MULT(z, a, z)
		}
	}
}
else {
	/* Left-to-right 5-ary exponentiation (HAC Algorithm 14.82) */
	Py_INCREF(z);	/* still holds 1L */
	table[0] = z;
	for (i = 1; i &lt; 32; ++i)
		MULT(table[i-1], a, table[i])

	for (i = Py_SIZE(b) - 1; i &gt;= 0; --i) {
		const digit bi = b-&gt;ob_digit[i];

		for (j = PyLong_SHIFT - 5; j &gt;= 0; j -= 5) {
			const int index = (bi &gt;&gt; j) &amp; 0x1f;
			for (k = 0; k &lt; 5; ++k)
				MULT(z, z, z)
			if (index)
				MULT(z, table[index], z)
		}
	}
}
</snippet></ROW><ROW><id>354765</id><snippet>Comments.objects.filter(post=post).count()
</snippet></ROW><ROW><id>354765</id><snippet>post.comment_set.count()
</snippet></ROW><ROW><id>356227</id><snippet>val = getattr(obj, 'attr_to_check', default_value)
</snippet></ROW><ROW><id>356494</id><snippet>re.findall(r"Test([0-9.]*[0-9]+)", text)
</snippet></ROW><ROW><id>356494</id><snippet>re.findall(r"Test([\d.]*\d+)", text)
</snippet></ROW><ROW><id>356494</id><snippet>[\.0-9]  // matches: 0 1 2 3 4 5 6 7 8 9 . \
[.0-9]   // matches: 0 1 2 3 4 5 6 7 8 9 .
</snippet></ROW><ROW><id>357256</id><snippet>@classmethod</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>hi(x,y)</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>def hello(x,y):
    fordf150 = hi(y,x)
    "then do somethings,and use the variable 'fordf150'."
    return something

def hi( ix, iy ):
    "compute some value, good."
    return good
</snippet></ROW><ROW><id>357855</id><snippet>hello( 2, 3)</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>x</snippet></ROW><ROW><id>357855</id><snippet>2</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>y</snippet></ROW><ROW><id>357855</id><snippet>3</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>fordf150 = hi( y, x )</snippet></ROW><ROW><id>357855</id><snippet>y</snippet></ROW><ROW><id>357855</id><snippet>x</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>ix</snippet></ROW><ROW><id>357855</id><snippet>3</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>iy</snippet></ROW><ROW><id>357855</id><snippet>2</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>3.1415926</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>return</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>3.1415926</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>good</snippet></ROW><ROW><id>357855</id><snippet>ix</snippet></ROW><ROW><id>357855</id><snippet>iy</snippet></ROW><ROW><id>357855</id><snippet>3.1415926</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>fordf150 = hi( y, x )</snippet></ROW><ROW><id>357855</id><snippet>y</snippet></ROW><ROW><id>357855</id><snippet>x</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>3.1415926</snippet></ROW><ROW><id>357855</id><snippet>fordf150</snippet></ROW><ROW><id>357855</id><snippet>hi</snippet></ROW><ROW><id>357855</id><snippet>3.1415926</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>something</snippet></ROW><ROW><id>357855</id><snippet>2.718281828459045</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>return</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>something</snippet></ROW><ROW><id>357855</id><snippet>2.718281828459045 </snippet></ROW><ROW><id>357855</id><snippet>fordf150</snippet></ROW><ROW><id>357855</id><snippet>something</snippet></ROW><ROW><id>357855</id><snippet>x</snippet></ROW><ROW><id>357855</id><snippet>y</snippet></ROW><ROW><id>357855</id><snippet>2.718281828459045 </snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>357855</id><snippet>hello</snippet></ROW><ROW><id>358029</id><snippet>number_neighbours</snippet></ROW><ROW><id>358029</id><snippet>neighbours+=1</snippet></ROW><ROW><id>358029</id><snippet>UnboundLocalError: local variable 'neighbours' referenced before assignment</snippet></ROW><ROW><id>358029</id><snippet>+=</snippet></ROW><ROW><id>358029</id><snippet>neighbours</snippet></ROW><ROW><id>358029</id><snippet>neighbours</snippet></ROW><ROW><id>358029</id><snippet>neighbours = 0</snippet></ROW><ROW><id>358134</id><snippet>from timeit import Timer

def find_invpow(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
    """
    high = 1
    while high ** n &lt; x:
        high *= 2
    low = high/2
    while low &lt; high:
        mid = (low + high) // 2
        if low &lt; mid and mid**n &lt; x:
            low = mid
        elif high &gt; mid and mid**n &gt; x:
            high = mid
        else:
            return mid
    return mid + 1

def find_invpowAlt(x,n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n &lt;= x &lt; (y + 1) ** n.
    """
    low = 10 ** (len(str(x)) / n)
    high = low * 10

    while low &lt; high:
        mid = (low + high) // 2
        if low &lt; mid and mid**n &lt; x:
            low = mid
        elif high &gt; mid and mid**n &gt; x:
            high = mid
        else:
            return mid
    return mid + 1

x = 237734537465873465
n = 5
tests = 10000

print "Norm", Timer('find_invpow(x,n)', 'from __main__ import find_invpow, x,n').timeit(number=tests)
print "Alt", Timer('find_invpowAlt(x,n)', 'from __main__ import find_invpowAlt, x,n').timeit(number=tests)
</snippet></ROW><ROW><id>359241</id><snippet>a = pexpect.spawn('program', env = {"TERM": dumb})
</snippet></ROW><ROW><id>359241</id><snippet>import os
os.environ["TERM"] = "dumb"
</snippet></ROW><ROW><id>359506</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>359506</id><snippet>"command1; command2; command3"
</snippet></ROW><ROW><id>359506</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>359506</id><snippet>"""
command1
command2
command3
"""
</snippet></ROW><ROW><id>359506</id><snippet>class Command( object ):
    def __init__( self, text ):
        self.text = text
    def execute( self ):
        self.proc= subprocess.Popen( ... self.text ... )
        self.proc.wait()

class CommandSequence( Command ):
    def __init__( self, *steps ):
        self.steps = steps
    def execute( self ):
        for s in self.steps:
            s.execute()
</snippet></ROW><ROW><id>359570</id><snippet>mydll = ctypes.CDLL('...')
del mydll
mydll = ctypes.CDLL('...')
</snippet></ROW><ROW><id>359570</id><snippet>_handle</snippet></ROW><ROW><id>359570</id><snippet>mydll = ctypes.CDLL('./mylib.so')
handle = mydll._handle
del mydll
while isLoaded('./mylib.so'):
    dlclose(handle)
</snippet></ROW><ROW><id>359570</id><snippet>def isLoaded(lib):
   libp = os.path.abspath(lib)
   ret = os.system("lsof -p %d | grep %s &gt; /dev/null" % (os.getpid(), libp))
   return (ret == 0)

def dlclose(handle)
   libdl = ctypes.CDLL("libdl.so")
   libdl.dlclose(handle)
</snippet></ROW><ROW><id>359945</id><snippet>if a.count( "foo" ) != len(a)
</snippet></ROW><ROW><id>359945</id><snippet>if a.count( a[0] ) != len(a)
</snippet></ROW><ROW><id>360456</id><snippet>class Double:
        def run(self,x):
            return x*2

class Triple:
    def run(self,x):
        return x*3

def createMultiplier(n):
    class Multiply:
        def run(self,x):
            return x*n
    return Multiply

class Library:
    def __init__(self,c):
        self.c = c()
    def Op(self,val):
        return self.c.run(val)

op1 = Double
op2 = Triple
op3 = createMultiplier(5)

lib1 = Library(op1)
lib2 = Library(op2)
lib3 = Library(op3)

print lib1.Op(2)
print lib2.Op(2)
print lib3.Op(2)
</snippet></ROW><ROW><id>360634</id><snippet>nnoremap &lt;space&gt; za</snippet></ROW><ROW><id>360634</id><snippet>vnoremap &lt;space&gt; zf</snippet></ROW><ROW><id>360733</id><snippet>  missingParen=re.compile(r"^\(\d$")
</snippet></ROW><ROW><id>360989</id><snippet>py&gt; p=ipaddr.IPv6("2001:888:2000:d::a2")
py&gt; p.SetPrefix(64)
py&gt; p
IPv6('2001:888:2000:d::a2/64')
py&gt; p.network_ext
'2001:888:2000:d::'
</snippet></ROW><ROW><id>361512</id><snippet>(1,2,3,4</snippet></ROW><ROW><id>361512</id><snippet>(12,34,56</snippet></ROW><ROW><id>361512</id><snippet>(1234......5</snippet></ROW><ROW><id>361512</id><snippet>(1234,.5</snippet></ROW><ROW><id>361512</id><snippet>(123,456789,012</snippet></ROW><ROW><id>361512</id><snippet>(01234</snippet></ROW><ROW><id>361512</id><snippet>(123.4X</snippet></ROW><ROW><id>361512</id><snippet>[-+]?[$]?(0|[1-9]\d*|[1-9]\d{0,2}(,\d{3})*)(\.\d+)?</snippet></ROW><ROW><id>361512</id><snippet>|</snippet></ROW><ROW><id>361512</id><snippet>(?!...)</snippet></ROW><ROW><id>361512</id><snippet>(?!\([$\d.,]+\))</snippet></ROW><ROW><id>362433</id><snippet>  a--t
 / \ 
c   r
 \
  o--w
</snippet></ROW><ROW><id>363040</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array(range(9)).reshape((3,3))
&gt;&gt;&gt; b = numpy.zeros(tuple(s+2 for s in a.shape), a.dtype)
&gt;&gt;&gt; b[tuple(slice(1,-1) for s in a.shape)] = a
&gt;&gt;&gt; b
array([[0, 0, 0, 0, 0],
       [0, 0, 1, 2, 0],
       [0, 3, 4, 5, 0],
       [0, 6, 7, 8, 0],
       [0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>363264</id><snippet>^\s*(?P&lt;NAME&gt;\w\d{7}|R1_(?:\d{6}_){2})(01f\.foo|\.(?:bar|goo|moo|roo))$
</snippet></ROW><ROW><id>363264</id><snippet>"R1_"</snippet></ROW><ROW><id>363264</id><snippet>"_"</snippet></ROW><ROW><id>363264</id><snippet>"01f.foo"</snippet></ROW><ROW><id>363264</id><snippet>"."</snippet></ROW><ROW><id>363264</id><snippet>"bar"</snippet></ROW><ROW><id>363264</id><snippet>"goo"</snippet></ROW><ROW><id>363264</id><snippet>"moo"</snippet></ROW><ROW><id>363264</id><snippet>"roo"</snippet></ROW><ROW><id>363264</id><snippet>^\s*(?P&lt;NAME&gt;\w\d{7}01f|R1_(?:\d{6}_){2})\.(?:foo|bar|goo|moo|roo)$
</snippet></ROW><ROW><id>363264</id><snippet>"R1_"</snippet></ROW><ROW><id>363264</id><snippet>"_"</snippet></ROW><ROW><id>363264</id><snippet>"foo"</snippet></ROW><ROW><id>363264</id><snippet>"bar"</snippet></ROW><ROW><id>363264</id><snippet>"goo"</snippet></ROW><ROW><id>363264</id><snippet>"moo"</snippet></ROW><ROW><id>363264</id><snippet>"roo"</snippet></ROW><ROW><id>363918</id><snippet>style = wx.LB_EXTENDED</snippet></ROW><ROW><id>363918</id><snippet>ListBox</snippet></ROW><ROW><id>363918</id><snippet>GetSelections</snippet></ROW><ROW><id>364599</id><snippet>&gt;&gt;&gt; d = {"x":2, "h":15, "a":2222}
&gt;&gt;&gt; it = iter(sorted(d.iteritems()))
&gt;&gt;&gt; it.next()
('a', 2222)
&gt;&gt;&gt; it.next()
('h', 15)
&gt;&gt;&gt; it.next()
('x', 2)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>364769</id><snippet> [i for i,x in enumerate(testlist) if x == 1]
</snippet></ROW><ROW><id>364769</id><snippet>&gt;&gt;&gt; testlist
[1, 2, 3, 5, 3, 1, 2, 1, 6]
&gt;&gt;&gt; [i for i,x in enumerate(testlist) if x == 1]
[0, 5, 7]
</snippet></ROW><ROW><id>364769</id><snippet>&gt;&gt;&gt; for i in [i for i,x in enumerate(testlist) if x == 1]:
...     print i
... 
0
5
7
</snippet></ROW><ROW><id>364769</id><snippet>&gt;&gt;&gt; (i for i,x in enumerate(testlist) if x == 1)
&lt;generator object at 0x6b508&gt;
&gt;&gt;&gt; for i in (i for i,x in enumerate(testlist) if x == 1):
...     print i
... 
0
5
7
</snippet></ROW><ROW><id>364769</id><snippet>&gt;&gt;&gt; gen = (i for i,x in enumerate(testlist) if x == 1)
&gt;&gt;&gt; for i in gen: print i
... 
0
5
7
</snippet></ROW><ROW><id>364824</id><snippet>&gt;&gt;&gt; my_list = [1, 3, 5, 9, 2, 6]
&gt;&gt;&gt; filtered_list = [item for item in my_list if item &gt; 3]
&gt;&gt;&gt; print filtered_list
[5, 9, 6]
&gt;&gt;&gt; len(filtered_list)
3
&gt;&gt;&gt; # compare to generator expression
... 
&gt;&gt;&gt; filtered_gen = (item for item in my_list if item &gt; 3)
&gt;&gt;&gt; print filtered_gen  # notice it's a generator object
&lt;generator object at 0xb7d5e02c&gt;
&gt;&gt;&gt; len(filtered_gen) # So technically, it has no length
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object of type 'generator' has no len()
&gt;&gt;&gt; # We extract each item out individually. We'll do it manually first.
... 
&gt;&gt;&gt; filtered_gen.next()
5
&gt;&gt;&gt; filtered_gen.next()
9
&gt;&gt;&gt; filtered_gen.next()
6
&gt;&gt;&gt; filtered_gen.next() # Should be all out of items and give an error
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; # Yup, the generator is spent. No values for you!
... 
&gt;&gt;&gt; # Let's prove it gives the same results as our list comprehension
... 
&gt;&gt;&gt; filtered_gen = (item for item in my_list if item &gt; 3)
&gt;&gt;&gt; gen_to_list = list(filtered_gen)
&gt;&gt;&gt; print gen_to_list
[5, 9, 6]
&gt;&gt;&gt; filtered_list == gen_to_list
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>365232</id><snippet>win32ts</snippet></ROW><ROW><id>365232</id><snippet>WM_WTSSESSION_CHANGE</snippet></ROW><ROW><id>365232</id><snippet>RegisterServiceCtrlHandlerEx</snippet></ROW><ROW><id>365232</id><snippet>RegisterServiceCtrlHandler</snippet></ROW><ROW><id>365232</id><snippet>servicemanager</snippet></ROW><ROW><id>365232</id><snippet>SERVICE_CONTROL_SESSIONCHANGE</snippet></ROW><ROW><id>365232</id><snippet>WM_WTSSESSION_CHANGE</snippet></ROW><ROW><id>365399</id><snippet>a[1:-1, 1:-1]
</snippet></ROW><ROW><id>365404</id><snippet>def 1st_funtion(a_matrixA)
    #apply some rule on a_matrixA and return a new matrix(next state of the cell)
    return new_matrix

def 2nd_funtion(a_matrixB,repeat_times)

    for i in range(repeat_times):
        a_matrixB = 1st_funtion(a_matrixB)
    return a_matrixB
</snippet></ROW><ROW><id>365934</id><snippet>def get_first(iterable, default=None):
    if iterable:
        for item in iterable:
            return item
    return default
</snippet></ROW><ROW><id>365934</id><snippet>x = get_first(get_first_list())
if x:
    ...
y = get_first(get_second_list())
if y:
    ...
</snippet></ROW><ROW><id>365934</id><snippet>for x in get_first_list() or []:
    # process x
    break # process at most one item
for y in get_second_list() or []:
    # process y
    break
</snippet></ROW><ROW><id>365934</id><snippet>break</snippet></ROW><ROW><id>365934</id><snippet>for x in yield_first(get_first_list()):
    x # process x
for y in yield_first(get_second_list()):
    y # process y
</snippet></ROW><ROW><id>365934</id><snippet>def yield_first(iterable):
    for item in iterable or []:
        yield item
        return
</snippet></ROW><ROW><id>365938</id><snippet>iterations = 0;
tmp = origin_matrix;

do
    tmp = operation(tmp);
    iterations += 1;
while tmp != origin_matrix;

return iterations;
</snippet></ROW><ROW><id>365938</id><snippet>while True:
    tmp = operation(tmp)
    iterations += 1

    if tmp == origin_matrix:
        break  # Or you could return here.
</snippet></ROW><ROW><id>365938</id><snippet>matrix = origin_matrix

for i in range(N_times):
    matrix = operation(matrix)

return matrix
</snippet></ROW><ROW><id>366430</id><snippet>def myFunc(working_list=None):
    if working_list is None: 
        working_list = []
    working_list.append("a")
    print working_list
</snippet></ROW><ROW><id>366433</id><snippet>raise cherrypy.HTTPRedirect("http://www.yahoo.com")
</snippet></ROW><ROW><id>366763</id><snippet>import signal

def signal_handler(signum, frame):
    raise Exception("Timed out!")

signal.signal(signal.SIGALRM, signal_handler)
signal.alarm(10)   # Ten seconds
try:
    long_function_call()
except Exception, msg:
    print "Timed out!"
</snippet></ROW><ROW><id>367014</id><snippet>sed</snippet></ROW><ROW><id>367014</id><snippet>awk</snippet></ROW><ROW><id>367014</id><snippet>perl</snippet></ROW><ROW><id>367014</id><snippet>python</snippet></ROW><ROW><id>367014</id><snippet>sed</snippet></ROW><ROW><id>367014</id><snippet>ed</snippet></ROW><ROW><id>367014</id><snippet>awk</snippet></ROW><ROW><id>367014</id><snippet>sed</snippet></ROW><ROW><id>367014</id><snippet>awk</snippet></ROW><ROW><id>367014</id><snippet>a2p</snippet></ROW><ROW><id>367014</id><snippet>s2p</snippet></ROW><ROW><id>367014</id><snippet>awk</snippet></ROW><ROW><id>367014</id><snippet>sed</snippet></ROW><ROW><id>367014</id><snippet>awk</snippet></ROW><ROW><id>367014</id><snippet>sed</snippet></ROW><ROW><id>367065</id><snippet>import sys
print "foo"
sys.stdout.flush()
</snippet></ROW><ROW><id>367181</id><snippet>python -h</snippet></ROW><ROW><id>367181</id><snippet>$_</snippet></ROW><ROW><id>367292</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"[\w']+|[.,!?;]", "Hello, I'm a string!")
['Hello', ',', "I'm", 'a', 'string', '!']
</snippet></ROW><ROW><id>367569</id><snippet>def timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):
    import threading
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = None

        def run(self):
            try:
                self.result = func(*args, **kwargs)
            except:
                self.result = default

    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():
        return default
    else:
        return it.result
</snippet></ROW><ROW><id>367596</id><snippet>#!/usr/bin/python

import random
import string

digits = "".join( [random.choice(string.digits) for i in xrange(8)] )
chars = "".join( [random.choice(string.letters) for i in xrange(15)] )
print digits + chars
</snippet></ROW><ROW><id>367596</id><snippet>chars = "".join( [random.choice(string.letters[:26]) for i in xrange(15)] )
</snippet></ROW><ROW><id>367599</id><snippet>my_array = numpy.zeros(predict_length())
for i, el in enumerate(gimme()): my_array[i] = el
</snippet></ROW><ROW><id>367599</id><snippet>my_array = numpy.array(list(gimme()))
</snippet></ROW><ROW><id>367599</id><snippet>length = sum(1 for el in gimme())
my_array = numpy.zeros(length)
for i, el in enumerate(gimme()): my_array[i] = el
</snippet></ROW><ROW><id>367765</id><snippet>Answer</snippet></ROW><ROW><id>367765</id><snippet>Answer_Risk</snippet></ROW><ROW><id>367765</id><snippet>resident</snippet></ROW><ROW><id>367765</id><snippet>Answer_A</snippet></ROW><ROW><id>367765</id><snippet>resident == None</snippet></ROW><ROW><id>367765</id><snippet>Answer</snippet></ROW><ROW><id>368067</id><snippet>#!/usr/bin/python2.5
from email.utils import parsedate
import mailbox

def extract_date(email):
    date = email.get('Date')
    return parsedate(date)

the_mailbox = mailbox.mbox('/path/to/mbox')
sorted_mails = sorted(the_mailbox, key=extract_date)
the_mailbox.update(enumerate(sorted_mails))
the_mailbox.flush()
</snippet></ROW><ROW><id>368178</id><snippet>&gt;&gt;&gt; import sys,types,xml
&gt;&gt;&gt; xml.config = sys.modules['xml.config'] = types.ModuleType('xml.config')
&gt;&gt;&gt; import xml.config
&gt;&gt;&gt; from xml import config
&gt;&gt;&gt; from xml import config as x
&gt;&gt;&gt; x
&lt;module 'xml.config' (built-in)&gt;
</snippet></ROW><ROW><id>368550</id><snippet>def determine_period(universe_array):
    period=0
    tmp=universe_array
    while True:
        tmp=apply_rules(tmp)#aplly_rules is a another function
        period+=1
        if numpy.array_equal(tmp,universe_array) is True:
            return period
        if period&gt;12:  #i wrote this line to stop it..but seems its doesnt work....help..
            return 0
        else:   
            return period
</snippet></ROW><ROW><id>368550</id><snippet>break</snippet></ROW><ROW><id>368550</id><snippet>while True</snippet></ROW><ROW><id>368550</id><snippet>break</snippet></ROW><ROW><id>368550</id><snippet>return</snippet></ROW><ROW><id>368550</id><snippet>def determine_period(universe_array):
    period=0
    tmp=universe_array
    while True:
        tmp=apply_rules(tmp)#aplly_rules is a another function
        period+=1
        if numpy.array_equal(tmp,universe_array) is True:
            break
        if period&gt;12:  #i wrote this line to stop it..but seems its doesnt work....help..
            period = 0
            break

    return period
</snippet></ROW><ROW><id>369576</id><snippet>$SSH_ORIGINAL_COMMAND</snippet></ROW><ROW><id>369576</id><snippet>$ ssh username@host 'some command'
</snippet></ROW><ROW><id>369925</id><snippet>&gt;&gt;&gt; d = {"stuff": "things"}
&gt;&gt;&gt; d2 = d
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d2
{'stuff': 'things'}
&gt;&gt;&gt; d = {"stuff": "things"}
&gt;&gt;&gt; d2 = d
&gt;&gt;&gt; d.clear()
&gt;&gt;&gt; d2
{}
</snippet></ROW><ROW><id>369925</id><snippet>d = {}</snippet></ROW><ROW><id>369925</id><snippet>d</snippet></ROW><ROW><id>369925</id><snippet>d2</snippet></ROW><ROW><id>369925</id><snippet>d.clear()</snippet></ROW><ROW><id>369925</id><snippet>d</snippet></ROW><ROW><id>369925</id><snippet>d2</snippet></ROW><ROW><id>370062</id><snippet>python -c 'import setuptools; __file__="setup.py"; execfile(__file__)' \
    install \
    --single-version-externally-managed
</snippet></ROW><ROW><id>370062</id><snippet>--single-version-externally-managed</snippet></ROW><ROW><id>370062</id><snippet>python setup.py install</snippet></ROW><ROW><id>370062</id><snippet>setup.py</snippet></ROW><ROW><id>370062</id><snippet>install_requires</snippet></ROW><ROW><id>370062</id><snippet>setup.py</snippet></ROW><ROW><id>370062</id><snippet>python setup.py develop</snippet></ROW><ROW><id>370062</id><snippet>pip install -e svn+http://mysite/svn/Project/trunk#egg=Project</snippet></ROW><ROW><id>370062</id><snippet>src/project</snippet></ROW><ROW><id>370062</id><snippet>setup.py develop</snippet></ROW><ROW><id>370062</id><snippet>pip install -vv</snippet></ROW><ROW><id>370199</id><snippet>"add \x93Monitoring\x94 to list".decode("cp1252", "ignore")
</snippet></ROW><ROW><id>370199</id><snippet>.encode</snippet></ROW><ROW><id>370363</id><snippet>global c
</snippet></ROW><ROW><id>370363</id><snippet>nonlocal c
</snippet></ROW><ROW><id>370418</id><snippet>r._dtstart = list(r)[-1]</snippet></ROW><ROW><id>370418</id><snippet>&gt;&gt;&gt; from dateutil.rrule import *
&gt;&gt;&gt; import datetime

&gt;&gt;&gt; r = rrule(WEEKLY, byweekday=SA, count=10, dtstart=datetime.datetime(2008,10,01))
&gt;&gt;&gt; print list(r)
[datetime.datetime(2008, 10, 4, 0, 0), datetime.datetime(2008, 10, 11, 0, 0), datetime.datetime(2008, 10, 18, 0, 0), datetime.datetime(2008, 10, 25, 0, 0), datetime.datetime(2008, 11, 1, 0, 0), datetime.datetime(2008, 11, 8, 0, 0), datetime.datetime(2008, 11, 15, 0, 0), datetime.datetime(2008, 11, 22, 0, 0), datetime.datetime(2008, 11, 29, 0, 0), datetime.datetime(2008, 12, 6, 0, 0)]
&gt;&gt;&gt; r._dtstart = r[-1]
&gt;&gt;&gt; print list(r)
[datetime.datetime(2008, 12, 6, 0, 0), datetime.datetime(2008, 12, 13, 0, 0), datetime.datetime(2008, 12, 20, 0, 0), datetime.datetime(2008, 12, 27, 0, 0), datetime.datetime(2009, 1, 3, 0, 0), datetime.datetime(2009, 1, 10, 0, 0), datetime.datetime(2009, 1, 17, 0, 0), datetime.datetime(2009, 1, 24, 0, 0), datetime.datetime(2009, 1, 31, 0, 0), datetime.datetime(2009, 2, 7, 0, 0)]
</snippet></ROW><ROW><id>370418</id><snippet>&gt;&gt;&gt; r = rrule(WEEKLY, byweekday=SA, count=10, dtstart=datetime.datetime(2008,10,01))
&gt;&gt;&gt; r2 = rrule(WEEKLY, byweekday=SA, count=r.count(), dtstart=r[-1] + datetime.timedelta(days=1))
&gt;&gt;&gt; print list(r)
[datetime.datetime(2008, 10, 4, 0, 0), datetime.datetime(2008, 10, 11, 0, 0), datetime.datetime(2008, 10, 18, 0, 0), datetime.datetime(2008, 10, 25, 0, 0), datetime.datetime(2008, 11, 1, 0, 0), datetime.datetime(2008, 11, 8, 0, 0), datetime.datetime(2008, 11, 15, 0, 0), datetime.datetime(2008, 11, 22, 0, 0), datetime.datetime(2008, 11, 29, 0, 0), datetime.datetime(2008, 12, 6, 0, 0)]
&gt;&gt;&gt; print list(r2)
[datetime.datetime(2008, 12, 13, 0, 0), datetime.datetime(2008, 12, 20, 0, 0), datetime.datetime(2008, 12, 27, 0, 0), datetime.datetime(2009, 1, 3, 0, 0), datetime.datetime(2009, 1, 10, 0, 0), datetime.datetime(2009, 1, 17, 0, 0), datetime.datetime(2009, 1, 24, 0, 0), datetime.datetime(2009, 1, 31, 0, 0), datetime.datetime(2009, 2, 7, 0, 0), datetime.datetime(2009, 2, 14, 0, 0)]
</snippet></ROW><ROW><id>370418</id><snippet>_byweekday</snippet></ROW><ROW><id>370600</id><snippet>ColumnElement</snippet></ROW><ROW><id>370600</id><snippet>select([sql.expression.label('foo', table.c.x - table.c.y), ...])
</snippet></ROW><ROW><id>370640</id><snippet>order_by</snippet></ROW><ROW><id>370640</id><snippet>result_exp = sqlalchemy.sql.expression.label('result',
   ((test2_table.c.a * test2_table.c.b)
    - (test2_table.c.x + test2_table.c.y)
    / test2_table.c.z))
select([result_exp], from_obj=[test2_table], order_by="result")
</snippet></ROW><ROW><id>371200</id><snippet>type(yourvar)</snippet></ROW><ROW><id>371200</id><snippet>partition(sep)</snippet></ROW><ROW><id>371200</id><snippet>dir(yourvar)</snippet></ROW><ROW><id>371200</id><snippet>partition</snippet></ROW><ROW><id>371200</id><snippet>&gt;&gt;&gt; us=u"Привет, Unicode String!"
&gt;&gt;&gt; us.partition(' ')
(u'\u041f\u0440\u0438\u0432\u0435\u0442,', u' ', u'Unicode String!')
</snippet></ROW><ROW><id>371200</id><snippet>split</snippet></ROW><ROW><id>371200</id><snippet>partition</snippet></ROW><ROW><id>371200</id><snippet>&gt;&gt;&gt; from string import split
&gt;&gt;&gt; split(us,' ',1)
[u'\u041f\u0440\u0438\u0432\u0435\u0442,', u'Unicode String!']
</snippet></ROW><ROW><id>371833</id><snippet>__getattribute__</snippet></ROW><ROW><id>371833</id><snippet>object</snippet></ROW><ROW><id>371833</id><snippet>__getattribute__</snippet></ROW><ROW><id>371833</id><snippet>class D(object):
    def __init__(self):
        self.test=20
        self.test2=21
    def __getattribute__(self,name):
        if name=='test':
            return 0.
        else:
            return object.__getattribute__(self, name)
</snippet></ROW><ROW><id>371833</id><snippet>object</snippet></ROW><ROW><id>371833</id><snippet>__getattribute__</snippet></ROW><ROW><id>371833</id><snippet>In [1]: from foo import *

In [2]: d = D()

In [3]: d.test
Out[3]: 0.0

In [4]: d.test2
Out[4]: 21
</snippet></ROW><ROW><id>372121</id><snippet>class Abstract1( object ):
    """Some description that tells you it's abstract,
    often listing the methods you're expected to supply."""
    def aMethod( self ):
        raise NotImplementedError( "Should have implemented this" )
</snippet></ROW><ROW><id>372121</id><snippet>class SomeAbstraction( object ):
    pass # lots of stuff - but missing something

class Mixin1( object ):
    def something( self ):
        pass # one implementation

class Mixin2( object ):
    def something( self ):
        pass # another

class Concrete1( SomeAbstraction, Mixin1 ):
    pass

class Concrete2( SomeAbstraction, Mixin2 ):
    pass
</snippet></ROW><ROW><id>372193</id><snippet># encoding: utf-8
</snippet></ROW><ROW><id>372193</id><snippet># encoding: utf-8
import re
x = re.compile("–") 
print x.search("xxx–x").start()
</snippet></ROW><ROW><id>372985</id><snippet>{% for field in form.fields %}
    &lt;div class="form-field"&gt;{{ field }}&lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>373104</id><snippet>dir()</snippet></ROW><ROW><id>373104</id><snippet>globals()</snippet></ROW><ROW><id>373104</id><snippet>import types
listOfClasses = [cls for cls in globals().values() if type(cls) == types.ClassType]
</snippet></ROW><ROW><id>373150</id><snippet>test</snippet></ROW><ROW><id>373150</id><snippet>nosetest</snippet></ROW><ROW><id>373207</id><snippet>re.findall(r"([a-fA-F\d]{32})", data)
</snippet></ROW><ROW><id>373310</id><snippet>#!/usr/bin/python

from AppKit import NSWorkspace
activeAppName = NSWorkspace.sharedWorkspace().activeApplication()['NSApplicationName']
print activeAppName
</snippet></ROW><ROW><id>373474</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('[ .]', 'a b.c')
['a', 'b', 'c']
</snippet></ROW><ROW><id>373870</id><snippet>demo.py</snippet></ROW><ROW><id>373870</id><snippet>interactive.py</snippet></ROW><ROW><id>373870</id><snippet>ssh_stdin</snippet></ROW><ROW><id>373870</id><snippet>ssh_stdin.write</snippet></ROW><ROW><id>373870</id><snippet>stdin.write</snippet></ROW><ROW><id>373870</id><snippet>SSHClient.exec_command</snippet></ROW><ROW><id>374207</id><snippet>from datetime import datetime, timedelta
import time

# Some utility classes / functions first
class AllMatch(set):
    """Universal set - match everything"""
    def __contains__(self, item): return True

allMatch = AllMatch()

def conv_to_set(obj):  # Allow single integer to be provided
    if isinstance(obj, (int,long)):
        return set([obj])  # Single item
    if not isinstance(obj, set):
        obj = set(obj)
    return obj

# The actual Event class
class Event(object):
    def __init__(self, action, min=allMatch, hour=allMatch, 
                       day=allMatch, month=allMatch, dow=allMatch, 
                       args=(), kwargs={}):
        self.mins = conv_to_set(min)
        self.hours= conv_to_set(hour)
        self.days = conv_to_set(day)
        self.months = conv_to_set(month)
        self.dow = conv_to_set(dow)
        self.action = action
        self.args = args
        self.kwargs = kwargs

    def matchtime(self, t):
        """Return True if this event should trigger at the specified datetime"""
        return ((t.minute     in self.mins) and
                (t.hour       in self.hours) and
                (t.day        in self.days) and
                (t.month      in self.months) and
                (t.weekday()  in self.dow))

    def check(self, t):
        if self.matchtime(t):
            self.action(*self.args, **self.kwargs)
</snippet></ROW><ROW><id>374207</id><snippet>c = CronTab(
  Event(perform_backup, 0, 2, dow=6 ),
  Event(purge_temps, 0, range(9,18,2), dow=range(0,5))
)
</snippet></ROW><ROW><id>374207</id><snippet>class CronTab(object):
    def __init__(self, *events):
        self.events = events

    def run(self):
        t=datetime(*datetime.now().timetuple()[:5])
        while 1:
            for e in self.events:
                e.check(t)

            t += timedelta(minutes=1)
            while datetime.now() &lt; t:
                time.sleep((t - datetime.now()).seconds)
</snippet></ROW><ROW><id>374335</id><snippet>int()</snippet></ROW><ROW><id>374335</id><snippet>struct</snippet></ROW><ROW><id>374335</id><snippet>res = struct.pack("=B",i) ## uint8_t
res = struct.pack("=b",i) ## int8_t

res = struct.pack("=H",i) ## uint16_t
res = struct.pack("=h",i) ## int16_t

res = struct.pack("=I",i) ## uint32_t
res = struct.pack("=i",i) ## int32_t

res = struct.pack("=Q",i) ## uint64_t
res = struct.pack("=q",i) ## int64_t

res = struct.pack("=f",i) ## float
res = struct.pack("=d",i) ## double
</snippet></ROW><ROW><id>374335</id><snippet>struct</snippet></ROW><ROW><id>374335</id><snippet>int()</snippet></ROW><ROW><id>374548</id><snippet>&lt;stream/&gt;</snippet></ROW><ROW><id>374548</id><snippet>&lt;stream&gt;&lt;auth&gt;&lt;/auth&gt;&lt;/stream&gt;</snippet></ROW><ROW><id>374636</id><snippet>data = {}
for i in range(0, 10):
  data['a%d' % i] = i

&gt;&gt;&gt;data
{'a1': 1, 'a0': 0, 'a3': 3, 'a2': 2, 'a5': 5, 'a4': 4, 'a7': 7, 'a6': 6, 'a9': 9, 'a8': 8}
</snippet></ROW><ROW><id>374645</id><snippet>import itertools
def findsubsets(S,m):
    return set(itertools.combinations(S, m))
</snippet></ROW><ROW><id>374895</id><snippet>open</snippet></ROW><ROW><id>374895</id><snippet>IOError</snippet></ROW><ROW><id>374895</id><snippet>OSError</snippet></ROW><ROW><id>374895</id><snippet>read</snippet></ROW><ROW><id>374895</id><snippet>try:
 raise OSError("hi mom")
finally:
 print "Hmmm"
</snippet></ROW><ROW><id>375168</id><snippet>import os
filename = "/etc/fstab"
statbuf = os.stat(filename)
print "Modification time:",statbuf.st_mtime 
</snippet></ROW><ROW><id>375852</id><snippet>StringIO</snippet></ROW><ROW><id>375852</id><snippet>...
import StringIO

buf = open("test.jpg", "rb").read()
# buf = get_image_data()
sbuf = StringIO.StringIO(buf)

image = wx.ImageFromStream(sbuf)
...
</snippet></ROW><ROW><id>375852</id><snippet>buf</snippet></ROW><ROW><id>376508</id><snippet>&gt;&gt;&gt; import Timeit
&gt;&gt;&gt; def so_q_sub(n):
...  return "%s%s/%d" % (DOMAIN, QUESTIONS, n)
...
&gt;&gt;&gt; so_q_sub(1000)
'http://stackoverflow.com/questions/1000'
&gt;&gt;&gt; def so_q_cat(n):
...  return DOMAIN + QUESTIONS + '/' + str(n)
...
&gt;&gt;&gt; so_q_cat(1000)
'http://stackoverflow.com/questions/1000'
&gt;&gt;&gt; t1 = timeit.Timer('so_q_sub(1000)','from __main__ import so_q_sub')
&gt;&gt;&gt; t2 = timeit.Timer('so_q_cat(1000)','from __main__ import so_q_cat')
&gt;&gt;&gt; t1.timeit(number=10000000)
12.166618871951641
&gt;&gt;&gt; t2.timeit(number=10000000)
5.7813972166853773
&gt;&gt;&gt; t1.timeit(number=1)
1.103492206766532e-05
&gt;&gt;&gt; t2.timeit(number=1)
8.5206360154188587e-06

&gt;&gt;&gt; def so_q_tmp(n):
...  return "{d}{q}/{n}".format(d=DOMAIN,q=QUESTIONS,n=n)
...
&gt;&gt;&gt; so_q_tmp(1000)
'http://stackoverflow.com/questions/1000'
&gt;&gt;&gt; t3= timeit.Timer('so_q_tmp(1000)','from __main__ import so_q_tmp')
&gt;&gt;&gt; t3.timeit(number=10000000)
14.564135316080637

&gt;&gt;&gt; def so_q_join(n):
...  return ''.join([DOMAIN,QUESTIONS,'/',str(n)])
...
&gt;&gt;&gt; so_q_join(1000)
'http://stackoverflow.com/questions/1000'
&gt;&gt;&gt; t4= timeit.Timer('so_q_join(1000)','from __main__ import so_q_join')
&gt;&gt;&gt; t4.timeit(number=10000000)
9.4431309007150048
</snippet></ROW><ROW><id>377028</id><snippet>def which(program):
    import os
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None
</snippet></ROW><ROW><id>377079</id><snippet>E0=zbc
E1=2.3
</snippet></ROW><ROW><id>377079</id><snippet>a</snippet></ROW><ROW><id>377079</id><snippet>zbc</snippet></ROW><ROW><id>377079</id><snippet>E0</snippet></ROW><ROW><id>377079</id><snippet>zbc</snippet></ROW><ROW><id>377079</id><snippet>exec('E%d="%s"' %(i,a[i]))
</snippet></ROW><ROW><id>377079</id><snippet>E0="zbc"
E1="2.3"
</snippet></ROW><ROW><id>377079</id><snippet>a</snippet></ROW><ROW><id>377382</id><snippet>__init__</snippet></ROW><ROW><id>377463</id><snippet>Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from time import sleep
&gt;&gt;&gt; sleep(0.05)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>377577</id><snippet>import json</snippet></ROW><ROW><id>378228</id><snippet>import re

s="123 Some Road Name\nTown, City\nCounty\nPA23 6NH\n123 Some Road Name\nTown, City"\
    "County\nPA2 6NH\n123 Some Road Name\nTown, City\nCounty\nPA2Q 6NH"

#custom                                                                                                                                               
print re.findall(r'\b[A-Z]{1,2}[0-9][A-Z0-9]? [0-9][ABD-HJLNP-UW-Z]{2}\b', s)

#regex from #http://en.wikipedia.orgwikiUK_postcodes#Validation                                                                                            
print re.findall(r'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][A-Z]{2}', s)
</snippet></ROW><ROW><id>378228</id><snippet>['PA23 6NH', 'PA2 6NH', 'PA2Q 6NH']
['PA23 6NH', 'PA2 6NH', 'PA2Q 6NH']
</snippet></ROW><ROW><id>378514</id><snippet>BaseException.__init__(self, mess)
</snippet></ROW><ROW><id>378514</id><snippet>BaseClassName.methodname(self, arguments)</snippet></ROW><ROW><id>378514</id><snippet>Exception</snippet></ROW><ROW><id>378514</id><snippet>BaseException</snippet></ROW><ROW><id>379447</id><snippet>collections.Mapping</snippet></ROW><ROW><id>379447</id><snippet>dict</snippet></ROW><ROW><id>379447</id><snippet>def value_list(x):
    if isinstance(x, dict):
        return list(set(x.values()))
    elif isinstance(x, basestring):
        return [x]
    else:
        return None
</snippet></ROW><ROW><id>379910</id><snippet>&gt;&gt;&gt; a = "545.2222"
&gt;&gt;&gt; float(a)
545.22220000000004
&gt;&gt;&gt; int(float(a))
545
</snippet></ROW><ROW><id>380026</id><snippet>Graphics</snippet></ROW><ROW><id>380026</id><snippet>class Graphics:
SCREEN_SIZE = (640, 480)
def __init__(self, Fullscreen = False, Width = 640, Height = 480):
    print "Graphics Init"
    self.SCREEN_SIZE = (Width, Height)
    pygame.init()
    if Fullscreen:
        self.screen = pygame.display.set_mode(SCREEN_SIZE, FULLSCREEN, 32)
        print "Fullscreen Initialized"
    else:
        self.screen = pygame.display.set_mode(SCREEN_SIZE, 0, 32)
        print "Non-Fullscreen Initialized"
</snippet></ROW><ROW><id>380026</id><snippet>g= Graphics() # create an object
# access the object's instance variables
print "screen", g.screen
g.screen= pygame.display.set_mode(SCREEN_SIZE, FULLSCREEN, 32)
</snippet></ROW><ROW><id>380026</id><snippet>g</snippet></ROW><ROW><id>380026</id><snippet>Graphics</snippet></ROW><ROW><id>380026</id><snippet>Graphics()</snippet></ROW><ROW><id>380026</id><snippet>Graphics.this</snippet></ROW><ROW><id>380026</id><snippet>Graphics.that</snippet></ROW><ROW><id>380874</id><snippet>attrs</snippet></ROW><ROW><id>380874</id><snippet>def walkDict( aDict, visitor, path=() ):
    for  k in aDict:
        if k == 'attrs':
            visitor( path, aDict[k] )
        elif type(aDict[k]) != dict:
            pass
        else:
            walkDict( aDict[k], visitor, path+(k,) )

def printMe( path, element ):
    print path, element

def filterFor( path, element ):
    if element['id'] == '4130-2-2':
        print path, element
</snippet></ROW><ROW><id>380874</id><snippet>walkDict( myDict, filterFor )
</snippet></ROW><ROW><id>380874</id><snippet>yield path, aDict[k]</snippet></ROW><ROW><id>380874</id><snippet>for path, attrDict in walkDictIter( aDict ):
    # process attrDict...
</snippet></ROW><ROW><id>381614</id><snippet>def element_to_string(element):
    s = element.text or ""
    for sub_element in element:
        s += etree.tostring(sub_element)
    s += element.tail
    return s
</snippet></ROW><ROW><id>381788</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now(pytz.timezone("Australia/Melbourne")) \
            .replace(hour=0, minute=0, second=0, microsecond=0) \
            .astimezone(pytz.utc)
</snippet></ROW><ROW><id>381788</id><snippet>replace()</snippet></ROW><ROW><id>381788</id><snippet>&gt;&gt;&gt; now = datetime(2012, 4, 1, 5, 0, 0, 0, tzinfo=pytz.timezone("Australia/Melbourne"))
&gt;&gt;&gt; print now
2012-04-01 05:00:00+10:00
&gt;&gt;&gt; print now.replace(hour=0)
2012-04-01 00:00:00+10:00 # wrong! midnight was at 2012-04-01 00:00:00+11:00
&gt;&gt;&gt; print datetime(2012, 3, 1, 0, 0, 0, 0, tzinfo=tz)
2012-03-01 00:00:00+10:00 # wrong again!
</snippet></ROW><ROW><id>381788</id><snippet>tz.localize()</snippet></ROW><ROW><id>381788</id><snippet>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; from datetime import datetime, date, time

&gt;&gt;&gt; tz = pytz.timezone("Australia/Melbourne")
&gt;&gt;&gt; the_date = date(2012, 4, 1) # use date.today() here

&gt;&gt;&gt; midnight_without_tzinfo = datetime.combine(the_date, time())
&gt;&gt;&gt; print midnight_without_tzinfo
2012-04-01 00:00:00

&gt;&gt;&gt; midnight_with_tzinfo = tz.localize(midnight_without_tzinfo)
&gt;&gt;&gt; print midnight_with_tzinfo
2012-04-01 00:00:00+11:00

&gt;&gt;&gt; print midnight_with_tzinfo.astimezone(pytz.utc)
2012-03-31 13:00:00+00:00
</snippet></ROW><ROW><id>382666</id><snippet>@measured</snippet></ROW><ROW><id>382666</id><snippet>measured</snippet></ROW><ROW><id>382666</id><snippet>@</snippet></ROW><ROW><id>382666</id><snippet>measured</snippet></ROW><ROW><id>382666</id><snippet>import time

def measured(orig_function):
    # When you decorate a function, the decorator func is called
    # with the original function as the first argument.
    # You return a new, modified function. This returned function
    # is what the to-be-decorated function becomes.

    print "INFO: This from the decorator function"
    print "INFO: I am about to decorate %s" % (orig_function)

    # This is what some_func will become:
    def newfunc(*args, **kwargs):
        print "INFO: This is the decorated function being called"

        start = time.time()

        # Execute the old function, passing arguments
        orig_func_return = orig_function(*args, **kwargs)
        end = time.time()

        print "Function took %s seconds to execute" % (end - start)
        return orig_func_return # return the output of the original function

    # Return the modified function, which..
    return newfunc

@measured
def some_func(arg1):
    print "This is my original function! Argument was %s" % arg1

# We call the now decorated function..
some_func(123)

#.. and we should get (minus the INFO messages):
This is my original function! Argument was 123
# Function took 7.86781311035e-06 to execute
</snippet></ROW><ROW><id>382666</id><snippet>def some_func():
    print "This is my original function!"

some_func = measured(some_func)
</snippet></ROW><ROW><id>382666</id><snippet>staticmethod</snippet></ROW><ROW><id>382666</id><snippet>measured</snippet></ROW><ROW><id>382666</id><snippet>&gt;&gt;&gt; type(measured)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'measured' is not defined
</snippet></ROW><ROW><id>382666</id><snippet>import</snippet></ROW><ROW><id>382666</id><snippet>from blah import *</snippet></ROW><ROW><id>382666</id><snippet>import *</snippet></ROW><ROW><id>382666</id><snippet>grep -R def measured *</snippet></ROW><ROW><id>382707</id><snippet>matches = []
biglist1_indexed = {}

for item in biglist1:
	biglist1_indexed[(item["transaction"], item["date"])] = item

for item in biglist2:
	if (item["transaction"], item["date"]) in biglist1_indexed:
		matches.append(item)
</snippet></ROW><ROW><id>383074</id><snippet>const SANE_Device ***</snippet></ROW><ROW><id>383074</id><snippet>SANE_get_devices()</snippet></ROW><ROW><id>383074</id><snippet>const SANE_Device **</snippet></ROW><ROW><id>383074</id><snippet>const SANE_Device **device_list;
SANE_get_devices(&amp;device_list, local_only);  // check return value
// Now, device_list[0] points to the first device,
// device_list[1] points to the second device, etc.
// Once you hit a NULL pointer, that's the end of the list:
int num_devices = 0;
while(device_list[num_devices] != NULL)
    num_devices++;
// num_devices now stores the total number of devices
</snippet></ROW><ROW><id>383074</id><snippet>byref</snippet></ROW><ROW><id>383074</id><snippet>pointer</snippet></ROW><ROW><id>383074</id><snippet>POINTER</snippet></ROW><ROW><id>383074</id><snippet>// SANE_Device declared as you had it
devices = POINTER(POINTER(SANE_Device))()  // devices is a NULL pointer to a pointer to a SANE_Device
status = libsane.sane_get_devices(byref(devices), c_int(0))
if status != successful:   // replace this by whatever success is
    print error
else:
    num_devices = 0
    // Convert NULL-terminated C list into Python list
    device_list = []
    while devices[num_devices]:
        device_list.append(devices[num_devices].contents)  // use .contents here since each entry in the C list is itself a pointer
        num_devices += 1
    print device_list
</snippet></ROW><ROW><id>383074</id><snippet>SANE_get_devices</snippet></ROW><ROW><id>383199</id><snippet>function myfunc(){
  var myself = arguments.callee;
  myself.anotherfunc();
}

myfunc.avalue=5;

myfunc.anotherfunc=function(){
  alert(this.avalue);
}

myfunc(); //Alerts 5
myfunc.anotherfunc(); //Alerts 5
</snippet></ROW><ROW><id>383578</id><snippet>import itertools

def bicycle(iterable, repeat=1):
    for item in itertools.cycle(iterable):
        for _ in xrange(repeat):
            yield item

c = bicycle([1,2,3,4], 2)
print [c.next() for _ in xrange(10)]
</snippet></ROW><ROW><id>383642</id><snippet>any</snippet></ROW><ROW><id>383642</id><snippet>&gt;&gt;&gt; any([True, True, False])
True
&gt;&gt;&gt; any([False, False, False])
False
&gt;&gt;&gt; any([False, False, True])
True
</snippet></ROW><ROW><id>383642</id><snippet>any</snippet></ROW><ROW><id>383642</id><snippet>reduce</snippet></ROW><ROW><id>383642</id><snippet>&gt;&gt;&gt; def iam(result):
...  # Pretend this is expensive.
...  print "iam(%r)" % result
...  return result
... 
&gt;&gt;&gt; any((iam(x) for x in [False, True, False]))
iam(False)
iam(True)
True
&gt;&gt;&gt; reduce(lambda x,y: x or y, (iam(x) for x in [False, True, False]))
iam(False)
iam(True)
iam(False)
True
</snippet></ROW><ROW><id>383642</id><snippet>any()</snippet></ROW><ROW><id>383642</id><snippet>all()</snippet></ROW><ROW><id>383642</id><snippet>def any(S):
    for x in S:
        if x:
            return True
    return False

def all(S):
    for x in S:
        if not x:
            return False
    return True
</snippet></ROW><ROW><id>383953</id><snippet>import pprint

pprint.pprint(globals())
pprint.pprint(locals())
</snippet></ROW><ROW><id>383988</id><snippet>from reverend.thomas import Bayes
guesser = Bayes()
guesser.train('french', 'le la les du un une je il elle de en')
guesser.train('german', 'der die das ein eine')
guesser.train('spanish', 'el uno una las de la en')
guesser.train('english', 'the it she he they them are were to')
guesser.guess('they went to el cantina')
guesser.guess('they were flying planes')
guesser.train('english', 'the rain in spain falls mainly on the plain')
guesser.save('my_guesser.bay')
</snippet></ROW><ROW><id>384887</id><snippet>def collision(x1, y1, x2, y2):
    return x1 == x2 or y1 == y2 or abs(x1-x2) == abs(y1-y2)
</snippet></ROW><ROW><id>384926</id><snippet>putdata()</snippet></ROW><ROW><id>384926</id><snippet>&gt;&gt;&gt; pic.putdata(a)
Traceback (most recent call last):
  File "...blablabla.../PIL/Image.py", line 1185, in putdata
    self.im.putdata(data, scale, offset)
SystemError: new style getargs format but argument is not a tuple
</snippet></ROW><ROW><id>384926</id><snippet>putdata</snippet></ROW><ROW><id>384926</id><snippet>&gt;&gt;&gt; data = list(tuple(pixel) for pixel in pix)
&gt;&gt;&gt; pic.putdata(data)
</snippet></ROW><ROW><id>384926</id><snippet>&gt;&gt;&gt; pix = numpy.array(pic)
</snippet></ROW><ROW><id>384926</id><snippet>pic.putdata(pix)</snippet></ROW><ROW><id>384926</id><snippet>Image.fromarray(pix)</snippet></ROW><ROW><id>385397</id><snippet>patch</snippet></ROW><ROW><id>385397</id><snippet>mv something.py py2.6_something.py
2to3 py2.6_something.py | patch -o something.py
</snippet></ROW><ROW><id>385406</id><snippet>(str(i)[-2:] == '.0' and str(i)[:-2] or str(i) for i in ...)
</snippet></ROW><ROW><id>385411</id><snippet>Request</snippet></ROW><ROW><id>385411</id><snippet>Read()</snippet></ROW><ROW><id>385411</id><snippet>read()</snippet></ROW><ROW><id>385411</id><snippet>Request</snippet></ROW><ROW><id>385411</id><snippet>urlopen()</snippet></ROW><ROW><id>385411</id><snippet>import urllib2
request = urllib2.Request("http://www.google.com", headers={"Accept" : "text/html"})
contents = urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>385583</id><snippet>int</snippet></ROW><ROW><id>385583</id><snippet>str = "1234"
i = int(str)  // i is a 32-bit integer
</snippet></ROW><ROW><id>385583</id><snippet>ValueError</snippet></ROW><ROW><id>385583</id><snippet>long</snippet></ROW><ROW><id>385583</id><snippet>s8 = (i + 2**7) % 2**8 - 2**7      // convert to signed 8-bit
u8 = i % 2**8                      // convert to unsigned 8-bit
s16 = (i + 2**15) % 2**16 - 2**15  // convert to signed 16-bit
u16 = i % 2**16                    // convert to unsigned 16-bit
s32 = (i + 2**31) % 2**32 - 2**31  // convert to signed 32-bit
u32 = i % 2**32                    // convert to unsigned 32-bit
s64 = (i + 2**63) % 2**64 - 2**63  // convert to signed 64-bit
u64 = i % 2**64                    // convert to unsigned 64-bit
</snippet></ROW><ROW><id>385583</id><snippet>float</snippet></ROW><ROW><id>385583</id><snippet>f = float("3.14159")
</snippet></ROW><ROW><id>385583</id><snippet>double</snippet></ROW><ROW><id>386177</id><snippet>try:
    x = float( someString )
except ValueError, e:
    # someString was NOT floating-point, what now?
</snippet></ROW><ROW><id>386718</id><snippet>t = timeit.Timer('compare(p1, p2)', "from __main__ import compare; p1=%r; p2=%r" % (str1,str2))
</snippet></ROW><ROW><id>386718</id><snippet>%r</snippet></ROW><ROW><id>386763</id><snippet>import struct

response = (0, 0, 117, 143, 6)
struct.unpack("&gt;I", ''.join([chr(x) for x in response[:-1]]))
</snippet></ROW><ROW><id>386763</id><snippet>import struct
from array import array

response = (0, 0, 117, 143, 6)
bytes = array('B', response[:-1])
struct.unpack('&gt;I', bytes)
</snippet></ROW><ROW><id>386978</id><snippet>&gt;&gt;&gt; os.path.expandvars('$C/test/testing')
'/stackoverflow/test/testing'
</snippet></ROW><ROW><id>387101</id><snippet>import re

PHONE_RE = re.compile('([(]{0,1}[2-9]\d{2}[)]{0,1}[-_. ]{0,1}[2-9]\d{2}[-_.  ]{0,1}\d{4})')
NON_NUMERIC = re.compile('\D')

def numbers2links(s):

   def makelink(mo):
      raw_number = mo.group()
      number = NON_NUMERIC.sub("", raw_number)
      return '&lt;a href="tel:%s"&gt;%s&lt;/a&gt;' % (number, raw_number)

   return PHONE_RE.sub(makelink, s)


print numbers2links("Ghost Busters at (555) 423-2368! How about this one: 555 456 7890! 555-456-7893 is where its at.")
</snippet></ROW><ROW><id>387101</id><snippet>string.digits</snippet></ROW><ROW><id>387101</id><snippet>re.sub()</snippet></ROW><ROW><id>388009</id><snippet>for p in Person.objects.all():
    print "person", p
    for h in p.home_address_set.all():
         print " home", h
         for ph in h.phone_set.all():
             print "  phone", ph
</snippet></ROW><ROW><id>388009</id><snippet>{% for p on people %}
    {% for h in p.home_address_set.all %}
        {% fpr ph in h.phone_set.all %}
        {% endfor %}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>388083</id><snippet>import sys
major, minor, micro, releaselevel, serial = sys.version_info
if (major,minor) &lt;= (2,5):
    # provide advice on getting version 2.6 or higher.
    sys.exit(2)
import app
app.main()
</snippet></ROW><ROW><id>388083</id><snippet>__future__</snippet></ROW><ROW><id>388083</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>388083</id><snippet>import __future__, sys
if "print_function" in __future__: 
    # Could also check sys.version_info &gt;= __future__. print_function.optional
    import app
    app.main()
else:
    print "instructions for upgrading"
</snippet></ROW><ROW><id>388360</id><snippet>def module_exists(module_name):
    try:
        mod = __import__(module_name)
    except ImportError:
        return False
    else:
        return True

if module_exists('simplejson'):
    import simplejson as json
elif module_exists('json'):
    import json
elif module_exists('django.utils'):
    from django.utils import simplejson as json
else:
    raise ImportError('Requires either simplejson, Python 2.6 or django.utils')
</snippet></ROW><ROW><id>388858</id><snippet>def password_reset(request, is_admin_site=False, 
            template_name='registration/password_reset_form.html',
            email_template_name='registration/password_reset_email.html',
            password_reset_form=PasswordResetForm, 
            token_generator=default_token_generator,
            post_reset_redirect=None):
</snippet></ROW><ROW><id>388858</id><snippet>from django.conf.urls.defaults import *
from django.contrib.auth.views import password_reset

urlpatterns = patterns('',
     (r'^/accounts/password/reset/$', password_reset, {'template_name': 'my_templates/password_reset.html'}),
     ...
)
</snippet></ROW><ROW><id>390062</id><snippet>%config = (
    'color' =&gt; 'red',
    'numbers' =&gt; [5, 8],
    qr/^spam/ =&gt; 'eggs'
);
</snippet></ROW><ROW><id>390062</id><snippet>config = {
    'color' : 'red',
    'numbers' : [5, 8],
    re.compile( "^spam" ) : 'eggs'
}
</snippet></ROW><ROW><id>390062</id><snippet>%variable = (</snippet></ROW><ROW><id>390062</id><snippet>variable = {</snippet></ROW><ROW><id>390062</id><snippet>);</snippet></ROW><ROW><id>390062</id><snippet>}</snippet></ROW><ROW><id>390062</id><snippet>variable =&gt; value</snippet></ROW><ROW><id>390062</id><snippet>variable : value</snippet></ROW><ROW><id>390062</id><snippet>qr/.../ =&gt;</snippet></ROW><ROW><id>390062</id><snippet>re.compile( r"..." ) : value</snippet></ROW><ROW><id>390062</id><snippet>dict</snippet></ROW><ROW><id>390062</id><snippet>dict</snippet></ROW><ROW><id>390062</id><snippet>__getitem__</snippet></ROW><ROW><id>390062</id><snippet>class PerlLikeDict( dict ):
    pattern_type= type(re.compile(""))
    def __getitem__( self, key ):
        if key in self:
            return super( PerlLikeDict, self ).__getitem__( key )
        for k in self:
            if type(k) == self.pattern_type:
                if k.match(key):
                    return self[k]
        raise KeyError( "key %r not found" % ( key, ) )
</snippet></ROW><ROW><id>390062</id><snippet>&gt;&gt;&gt; pat= re.compile( "hi" )
&gt;&gt;&gt; a = { pat : 'eggs' } # native dict, no features.
&gt;&gt;&gt; x=PerlLikeDict( a )
&gt;&gt;&gt; x['b']= 'c'
&gt;&gt;&gt; x
{&lt;_sre.SRE_Pattern object at 0x75250&gt;: 'eggs', 'b': 'c'}
&gt;&gt;&gt; x['b']
'c'
&gt;&gt;&gt; x['ji']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 10, in __getitem__
KeyError: "key 'ji' not found"
&gt;&gt;&gt; x['hi']
'eggs'
</snippet></ROW><ROW><id>390177</id><snippet>__del__</snippet></ROW><ROW><id>390511</id><snippet>class CommonEqualityMixin(object):

    def __eq__(self, other):
        return (isinstance(other, self.__class__)
            and self.__dict__ == other.__dict__)

    def __ne__(self, other):
        return not self.__eq__(other)

class Foo(CommonEqualityMixin):

    def __init__(self, item):
        self.item = item
</snippet></ROW><ROW><id>390688</id><snippet>import email
import poplib
import random
from cStringIO import StringIO
from email.generator import Generator

pop = poplib.POP3(server)

mail_count = len(pop.list()[1])

for message_num in xrange(mail_count):
    message = "\r\n".join(pop.retr(message_num)[1])
    message = email.message_from_string(message)

    out_file = StringIO()
    message_gen = Generator(out_file, mangle_from_=False, maxheaderlen=60)
    message_gen.flatten(message)
    message_text = out_file.getvalue()

    filename = "%s.email" % random.randint(1,100)
    email_file = open(filename, "w")
    email_file.write(message_text)
    email_file.close()
</snippet></ROW><ROW><id>390885</id><snippet>def count_iterable(i):
    return sum(1 for e in i)
</snippet></ROW><ROW><id>390885</id><snippet>__len__</snippet></ROW><ROW><id>391076</id><snippet>import struct
try: import decimal
except ImportError:
    divisor= 10000.0
else:
    divisor= decimal.Decimal(10000)

def xl_money(i1, i2):
    byte8= struct.unpack("&gt;q", struct.pack("&gt;ii", i1, i2))[0]
    return byte8 / divisor

&gt;&gt;&gt; xl_money(1, 1194857614)
Decimal("548982.491")
</snippet></ROW><ROW><id>391076</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>391289</id><snippet>active = [r for r in self.updatePageRadio.get_group() if r.get_active()][0]
</snippet></ROW><ROW><id>391289</id><snippet>my_actions[active]()
</snippet></ROW><ROW><id>391289</id><snippet>r1 = gtk.RadioButton(None, label='Cat') # this has no group, it is the first
r2 = gtk.RadioButton(r1, label='Mouse') # use the first radio
                                        # button as the group argument
r3 = gtk.RadioButton(r1, label='Dog')   # again use r1
</snippet></ROW><ROW><id>391289</id><snippet>active_radios = [r for r in r1.get_group() if r.get_active()]
</snippet></ROW><ROW><id>391899</id><snippet>__init__.py</snippet></ROW><ROW><id>391899</id><snippet>from package import class
import package.class
</snippet></ROW><ROW><id>391899</id><snippet>__init__.py</snippet></ROW><ROW><id>391899</id><snippet>__all__</snippet></ROW><ROW><id>391899</id><snippet>from package import *</snippet></ROW><ROW><id>391899</id><snippet># name1 and name2 will be available in calling module's namespace 
# when using "from package import *" syntax
__all__ = ['name1', 'name2']
</snippet></ROW><ROW><id>392061</id><snippet>optarg.split(',')</snippet></ROW><ROW><id>392125</id><snippet>__init__</snippet></ROW><ROW><id>392125</id><snippet>def __init__(self, parent, id, title, gamePlayer ):
    ...etc...
</snippet></ROW><ROW><id>392366</id><snippet>foo()</snippet></ROW><ROW><id>392366</id><snippet>class foo:
        def __init__(self):
                self.var_a = 2
                self.var_b = 3

        def __call__(self, x):
                return self.var_a + self.var_b + x

localClosure = foo()

# Local closure is now "return 2 + 3 + x"
a = localClosure(1) # 2 + 3 + 1 == 6

# DO SOME MAGIC HERE TO TURN "var_a" of the closure into 0
# ...but what magic? Is this even possible?
localClosure.var_a = 0

# Local closure is now "return 0 + 3 + x"
b = localClosure(1) # 0 + 3 +1 == 4
</snippet></ROW><ROW><id>392366</id><snippet>localClosure</snippet></ROW><ROW><id>392732</id><snippet>"#%02X0000" % x
</snippet></ROW><ROW><id>392801</id><snippet>&lt;form action="/blog/" method="POST"&gt;
    {{ blog_form.as_p }}
    &lt;input type="hidden" name="form-type" value"blog-form" /&gt; &lt;!-- set type --&gt;
    &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;

... 

&lt;form action="/blog/" method="POST"&gt;
    {{ micro_form.as_p }}
    &lt;input type="hidden" name="form-type" value"micro-form" /&gt; &lt;!-- set type --&gt;
    &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>392801</id><snippet>def blog(request):
    if request.method == 'POST':
    	if request.POST['form-type'] == u"blog-form":	# test the form type
            form = BlogForm(request.POST) 
    		...
    	else:
    		form = MicroForm(request.POST)
    		...

    return render_to_response('blog.html', {
        'blog_form': BlogForm(),
    	'micro_form': MicroForm(),
    })
</snippet></ROW><ROW><id>393059</id><snippet>def fib():
    a, b = 0, 1
    while True:
        a, b = b, a + b
        yield a
</snippet></ROW><ROW><id>393059</id><snippet>next()</snippet></ROW><ROW><id>393256</id><snippet>import pygame
from pygame.locals import * #This lets you use pygame's constants directly.

for event in pygame.event.get():
    if event.type == MOUSEBUTTONDOWN:  #Better to seperate to a new if statement aswell, since there's more buttons that can be clicked and makes for cleaner code.
        if event.button == 1:
            for object in clickableObjectsList:
                object.clickCheck(event.pos)
</snippet></ROW><ROW><id>393256</id><snippet>pygame.mouse.get_pos() 
pygame.mouse.get_pressed().
</snippet></ROW><ROW><id>393356</id><snippet>import MySQLdb

user_input = raw_input("Please enter barcode and press Enter button: ")

db = MySQLdb.connect(passwd="moonpie",db="thangs")
mycursor = db.cursor()
mycursor.execute("""SELECT name, price FROM Product
                 WHERE barcode = %s""", (user_input,))

# calls fetchone until None is returned (no more rows)
for row in iter(mycursor.fetchone, None):
    print row
</snippet></ROW><ROW><id>393356</id><snippet>product = session.query(Product).filter(Product.barcode == user_input).scalar()
print product.name, product.price
</snippet></ROW><ROW><id>393368</id><snippet>class PlottingInteractive:
    add_slice = wrap_pylab_newplot(add_slice)
</snippet></ROW><ROW><id>393368</id><snippet>__init__</snippet></ROW><ROW><id>393368</id><snippet>class _Interactify(type):
    def __init__(cls, name, bases, d):
        super(_Interactify, cls).__init__(name, bases, d)
        for base in bases:
            for attrname in dir(base):
                if attrname in d: continue # If overridden, don't reset
                attr = getattr(cls, attrname)
                if type(attr) == types.MethodType:
                    if attrname.startswith("add_"):
                        setattr(cls, attrname, wrap_pylab_newplot(attr))
                    elif attrname.startswith("set_"):
                        setattr(cls, attrname, wrap_pylab_show(attr))
</snippet></ROW><ROW><id>393368</id><snippet>__new__</snippet></ROW><ROW><id>393368</id><snippet>__init__</snippet></ROW><ROW><id>393856</id><snippet>re.sub(ur'[\u064B-\u0652\u06D4\u0670\u0674\u06D5-\u06ED]+', '', ...)
</snippet></ROW><ROW><id>393897</id><snippet>__import__</snippet></ROW><ROW><id>393897</id><snippet>try..except</snippet></ROW><ROW><id>393897</id><snippet>__import__</snippet></ROW><ROW><id>393897</id><snippet>m = None
try:
    m = __import__("external_module")
except:
    # invalid module - show error
if m:
    try:
        m.user_defined_func()
    except:
        # some error - display it
</snippet></ROW><ROW><id>394307</id><snippet>threading.Lock</snippet></ROW><ROW><id>394307</id><snippet>&gt;&gt;&gt; import threading
&gt;&gt;&gt; threading.Lock
&lt;built-in function allocate_lock&gt;
&gt;&gt;&gt; type(threading.Lock)
&lt;type 'builtin_function_or_method'&gt;
&gt;&gt;&gt; x=threading.Lock()
&gt;&gt;&gt; type(x)
&lt;type 'thread.lock'&gt;
&gt;&gt;&gt; dir(x)
['__enter__', '__exit__', 'acquire', 'acquire_lock', 'locked', 'locked_lock', 'release', 'release_lock']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>394543</id><snippet>from pprint import pformat

def application(environ, start_response):
    # show the environment:
    output = ['&lt;pre&gt;']
    output.append(pformat(environ))
    output.append('&lt;/pre&gt;')

    #create a simple form:
    output.append('&lt;form method="post"&gt;')
    output.append('&lt;input type="text" name="test"&gt;')
    output.append('&lt;input type="submit"&gt;')
    output.append('&lt;/form&gt;')

    if environ['REQUEST_METHOD'] == 'POST':
        # show form data as received by POST:
        output.append('&lt;h1&gt;FORM DATA&lt;/h1&gt;')
        output.append(pformat(environ['wsgi.input'].read()))

    # send results
    output_len = sum(len(line) for line in output)
    start_response('200 OK', [('Content-type', 'text/html'),
                              ('Content-Length', str(output_len))])
    return output
</snippet></ROW><ROW><id>394549</id><snippet>shutil</snippet></ROW><ROW><id>394549</id><snippet>copyfileobj()</snippet></ROW><ROW><id>394549</id><snippet>import shutil
import subprocess

proc = subprocess.Popen([...], stdin=subprocess.PIPE)

my_input = get_filelike_object('from a place not given in the question')

shutil.copyfileobj(my_input, proc.stdin)
</snippet></ROW><ROW><id>394814</id><snippet>a if test else b
</snippet></ROW><ROW><id>394814</id><snippet>test</snippet></ROW><ROW><id>394814</id><snippet>a</snippet></ROW><ROW><id>394814</id><snippet>b</snippet></ROW><ROW><id>394814</id><snippet>test</snippet></ROW><ROW><id>394814</id><snippet>test</snippet></ROW><ROW><id>394814</id><snippet>a</snippet></ROW><ROW><id>394814</id><snippet>b</snippet></ROW><ROW><id>394814</id><snippet>&gt;&gt;&gt; 'true' if True else 'false'
'true'
&gt;&gt;&gt; 'true' if False else 'false'
'false'
</snippet></ROW><ROW><id>395006</id><snippet>boby</snippet></ROW><ROW><id>395006</id><snippet>print type(boby)</snippet></ROW><ROW><id>395006</id><snippet>class Dog:
    def bark(self):
        print "WOOF"

class BobyDog( Dog ):
    def bark( self ):
        print "WoOoOoF!!"

otherDog= Dog()
otherDog.bark() # WOOF

boby = BobyDog()
boby.bark() # WoOoOoF!!
</snippet></ROW><ROW><id>395347</id><snippet>class RecipeContent(models.Model):
  ...
  def __unicode__(self):
    # You can access ForeignKey properties through the field name!
    return self.recipe.name
</snippet></ROW><ROW><id>395481</id><snippet>import urllib.request
# Create an OpenerDirector with support for Basic HTTP Authentication...
auth_handler = urllib.request.HTTPBasicAuthHandler()
auth_handler.add_password(realm='PDQ Application',
                          uri='https://mahler:8092/site-updates.py',
                          user='klem',
                          passwd='kadidd!ehopper')
opener = urllib.request.build_opener(auth_handler)
# ...and install it globally so it can be used with urlopen.
urllib.request.install_opener(opener)
urllib.request.urlopen('http://www.example.com/login.html')
</snippet></ROW><ROW><id>395568</id><snippet>/usr/local/mysql/include</snippet></ROW><ROW><id>395568</id><snippet>$ tar xzf MySQL-python-1.2.2.tar.gz &amp;&amp; cd MySQL-python-1.2.2
</snippet></ROW><ROW><id>395568</id><snippet>_mysql.c</snippet></ROW><ROW><id>395568</id><snippet>37,39d36
&lt; #ifndef uint
&lt; #define uint unsigned int
&lt; #endif
484,485c481,482
&lt;         uint port = MYSQL_PORT;
&lt;         uint client_flag = 0;
---
&gt;         unsigned int port = MYSQL_PORT;
&gt;         unsigned int client_flag = 0;
</snippet></ROW><ROW><id>395568</id><snippet>$ sudo ln -s /usr/local/mysql/lib /usr/local/mysql/lib/mysql
</snippet></ROW><ROW><id>395568</id><snippet>$ sudo python setup.py build
</snippet></ROW><ROW><id>395568</id><snippet>$ sudo python setup.py install
</snippet></ROW><ROW><id>395568</id><snippet>sudo mysqld_safe
</snippet></ROW><ROW><id>395568</id><snippet>^Z</snippet></ROW><ROW><id>395568</id><snippet>bg</snippet></ROW><ROW><id>395782</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; class X(object):
...     pass
... 
&gt;&gt;&gt; inspect.isclass(X)
True
</snippet></ROW><ROW><id>396570</id><snippet>returnvalue = false
if len(a) == len(b)
   if len(a) &lt; threshold
      returnvalue = (sorted(a) == sorted(b))
   else
       returnvalue = naminsmethod(a, b)
return returnvalue
</snippet></ROW><ROW><id>396871</id><snippet>x = mystuff()
print x.average(9,18,27)
</snippet></ROW><ROW><id>396871</id><snippet>TypeError: average() takes exactly 3 arguments (4 given)
</snippet></ROW><ROW><id>396926</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.asctime(time.strptime('2008 50 1', '%Y %W %w'))
'Mon Dec 15 00:00:00 2008'
</snippet></ROW><ROW><id>396926</id><snippet>%U</snippet></ROW><ROW><id>396926</id><snippet>%W</snippet></ROW><ROW><id>396926</id><snippet>%W</snippet></ROW><ROW><id>398584</id><snippet>&gt;&gt;&gt; re.compile(r'(\W+)').split('hello, foo')
['hello', ', ', 'foo']
</snippet></ROW><ROW><id>399107</id><snippet>def getReversedList(aList, end, start, step):
    return aList[end:start if start!=-1 else None:step]
</snippet></ROW><ROW><id>399107</id><snippet>start==-1</snippet></ROW><ROW><id>399107</id><snippet>0</snippet></ROW><ROW><id>399413</id><snippet>def initializePumpThread():
    global pumpedThread
    global app
    if pumpedThread == None:
        app = QtGui.QApplication(sys.argv)
        pumpedThread = threading.Thread(target = pumpQt, args = ())
        pumpedThread.start()
</snippet></ROW><ROW><id>399413</id><snippet>def pumpQt():
    global app
    def processor():
        app.processEvents()
    while 1:
        time.sleep(0.01)
        utils.executeDeferred( processor )
</snippet></ROW><ROW><id>399413</id><snippet>def pumpWx():
    global app
    def processor():
        app.Yield(True)
    while 1:
        time.sleep(0.01)
        utils.executeDeferred( processor )

def initializePumpThread():
    global pumpedThread
    global app
    if pumpedThread == None:
        app = wx.App(False)
        pumpedThread = threading.Thread(target = pumpWx, args = ())
        pumpedThread.start()
</snippet></ROW><ROW><id>399413</id><snippet>def processor():
  while app.Pending(): app.Dispatch()
</snippet></ROW><ROW><id>400081</id><snippet>eval("1 + 1")
</snippet></ROW><ROW><id>400081</id><snippet>eval("__import__('sys').exit(1)")
</snippet></ROW><ROW><id>400081</id><snippet>x³ + y² + c
----------- = 0
     z
</snippet></ROW><ROW><id>400583</id><snippet>__init__</snippet></ROW><ROW><id>400583</id><snippet>__new__</snippet></ROW><ROW><id>400583</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; class D(datetime.date):
        def __new__(cls, year):
            return datetime.date.__new__(cls, year, 1, 1)


&gt;&gt;&gt; D(2008)
D(2008, 1, 1)
</snippet></ROW><ROW><id>400753</id><snippet>*identifier</snippet></ROW><ROW><id>400753</id><snippet>**identifier</snippet></ROW><ROW><id>400838</id><snippet>import jpeg
jpeg.setExif(jpeg.getExif('foo.jpg'), 'foo-resized.jpg')
</snippet></ROW><ROW><id>401256</id><snippet>parents = Category.objects.filter(parent_id=0)
</snippet></ROW><ROW><id>401823</id><snippet>from pylab import *
x = linspace(0, 10*pi, 2**10)
y = sin(x)
figure(figsize=(5, 10))
plot(x, y)
show()
</snippet></ROW><ROW><id>401823</id><snippet>figsize=(width, height)</snippet></ROW><ROW><id>401823</id><snippet>(8, 6)</snippet></ROW><ROW><id>401823</id><snippet>dpi</snippet></ROW><ROW><id>401823</id><snippet>matplotlibrc</snippet></ROW><ROW><id>401823</id><snippet>set_size_inches(width, height)</snippet></ROW><ROW><id>402444</id><snippet>install</snippet></ROW><ROW><id>402444</id><snippet>easy_install</snippet></ROW><ROW><id>402471</id><snippet>import logging
LOG = logging.getLogger(__name__)
</snippet></ROW><ROW><id>402471</id><snippet>LOG.info('Spam and eggs are tasty!')
</snippet></ROW><ROW><id>402471</id><snippet>self.log</snippet></ROW><ROW><id>402471</id><snippet>&gt;&gt;&gt; import logging
&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...             self.log.info('Meh')
... 
&gt;&gt;&gt; def logged_class(cls):
...     cls.log = logging.getLogger('{0}.{1}'.format(__name__, cls.__name__))
... 
&gt;&gt;&gt; logged_class(Foo)
&gt;&gt;&gt; logging.basicConfig(level=logging.DEBUG)
&gt;&gt;&gt; f = Foo()
INFO:__main__.Foo:Meh
</snippet></ROW><ROW><id>402492</id><snippet>class test_appletrailer(unittest.TestCase):

    all_trailers = None

    def setup(self):
        # Only initialize all_trailers once.
        if self.all_trailers is None:
            self.__class__.all_trailers = Trailers(res = "720", verbose = True)
</snippet></ROW><ROW><id>402492</id><snippet>self.all_trailers</snippet></ROW><ROW><id>402492</id><snippet>self.__class__.all_trailers</snippet></ROW><ROW><id>402526</id><snippet>class Dicty(models.Model):
    name      = models.CharField(max_length=50)

class KeyVal(models.Model):
    container = models.ForeignKey(Dicty, db_index=True)
    key       = models.CharField(max_length=240, db_index=True)
    value     = models.CharField(max_length=240, db_index=True)
</snippet></ROW><ROW><id>403426</id><snippet># To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)
</snippet></ROW><ROW><id>403821</id><snippet>timeit</snippet></ROW><ROW><id>403821</id><snippet>-s</snippet></ROW><ROW><id>403821</id><snippet>$ python -m timeit -s "jokes=range(1000000)" "domain=[(0,(len(jokes)*2)-i-1) for i in range(0, len(jokes)*2)]"
10 loops, best of 3: 1.08 sec per loop
$ python -m timeit -s "jokes=range(1000000)" "l=len(jokes);domain=[(0,(l*2)-i-1) for i in range(0, l*2)]"
10 loops, best of 3: 908 msec per loop
$ python -m timeit -s "jokes=range(1000000)" "l=len(jokes*2);domain=[(0,l-i-1) for i in range(0, l)]"
10 loops, best of 3: 813 msec per loop
</snippet></ROW><ROW><id>403821</id><snippet>profile / cProfile</snippet></ROW><ROW><id>403821</id><snippet>pstats</snippet></ROW><ROW><id>403821</id><snippet>len</snippet></ROW><ROW><id>404610</id><snippet>from pprint import pprint</snippet></ROW><ROW><id>404610</id><snippet>pprint</snippet></ROW><ROW><id>404610</id><snippet>main()</snippet></ROW><ROW><id>404610</id><snippet>pprint.pprint()</snippet></ROW><ROW><id>404610</id><snippet>from..import</snippet></ROW><ROW><id>404610</id><snippet>import</snippet></ROW><ROW><id>404750</id><snippet>import os
import sys

config_name = 'myapp.cfg'

# determine if application is a script file or frozen exe
if getattr(sys, 'frozen', False):
    application_path = os.path.dirname(sys.executable)
elif __file__:
    application_path = os.path.dirname(__file__)

config_path = os.path.join(application_path, config_name)
</snippet></ROW><ROW><id>404802</id><snippet>if (o != null)
    o.doSomething();
else
    // handle
</snippet></ROW><ROW><id>404802</id><snippet>try {
    o.doSomething()
}
catch (NullPointerException npe) { 
    // handle
}
</snippet></ROW><ROW><id>404802</id><snippet>if (a != null)
    if (b != null)
        if (c != null)
            a.getB().getC().doSomething();
        else
            // handle c null
    else
        // handle b null
else
    // handle a null
</snippet></ROW><ROW><id>404802</id><snippet>NullPointerException</snippet></ROW><ROW><id>405188</id><snippet>2.days.from_now</snippet></ROW><ROW><id>405356</id><snippet>import data
import someOtherModule

print data.formations['Arrowhead']
someOtherModule.function()
</snippet></ROW><ROW><id>405356</id><snippet>import data
def function():
    print data.formations['Tight']
</snippet></ROW><ROW><id>405356</id><snippet>import theLoggerThing
class Formation( object ):
    pass # details omitted.
def createFormations( logger ):
    pass # details omitted
formations= createFormations( theLoggerThing.logger )
</snippet></ROW><ROW><id>405356</id><snippet>import data</snippet></ROW><ROW><id>405356</id><snippet>data</snippet></ROW><ROW><id>405356</id><snippet>import theLoggerThing</snippet></ROW><ROW><id>405356</id><snippet>class Formation( object ):</snippet></ROW><ROW><id>405356</id><snippet>Formations</snippet></ROW><ROW><id>405356</id><snippet>def createFormations( logger ):</snippet></ROW><ROW><id>405356</id><snippet>createFormations</snippet></ROW><ROW><id>405356</id><snippet>formations =</snippet></ROW><ROW><id>405356</id><snippet>formations</snippet></ROW><ROW><id>405356</id><snippet>import someOtherModule</snippet></ROW><ROW><id>405356</id><snippet>someOtherModule</snippet></ROW><ROW><id>405356</id><snippet>import data</snippet></ROW><ROW><id>405356</id><snippet>data</snippet></ROW><ROW><id>405356</id><snippet>def function</snippet></ROW><ROW><id>405356</id><snippet>function</snippet></ROW><ROW><id>405356</id><snippet>print data.formations['Arrowhead']</snippet></ROW><ROW><id>405356</id><snippet>data.formations</snippet></ROW><ROW><id>405356</id><snippet>get('Arrowhead')</snippet></ROW><ROW><id>405356</id><snippet>Formation</snippet></ROW><ROW><id>405356</id><snippet>someOtherModule.function()</snippet></ROW><ROW><id>405356</id><snippet>print data.formations['Tight']</snippet></ROW><ROW><id>405356</id><snippet>data.formations</snippet></ROW><ROW><id>405356</id><snippet>get('Tight')</snippet></ROW><ROW><id>405356</id><snippet>Formation</snippet></ROW><ROW><id>405492</id><snippet>f.__dict__.update( b )
</snippet></ROW><ROW><id>405520</id><snippet>all( type(i) is int for i in lst )
</snippet></ROW><ROW><id>405520</id><snippet>In [1]: lst = range(10)
In [2]: all( type(i) is int for i in lst )
Out[2]: True
In [3]: lst.append('steve')
In [4]: all( type(i) is int for i in lst )
Out[4]: False
</snippet></ROW><ROW><id>405564</id><snippet>V=["Boulder", "Denver", "Colorado Springs", "Pueblo", "Limon"]
</snippet></ROW><ROW><id>405564</id><snippet>E=[["Boulder", "Denver"],
   ["Denver", "Colorado Springs"],
   ["Colorado Springs", "Pueblo"],
   ["Denver", "Limon"],
   ["Colorado Springs", "Limon"]]
</snippet></ROW><ROW><id>405662</id><snippet>from glob import glob
filelist = glob('*.csv') #You can pass the sys.argv argument
</snippet></ROW><ROW><id>405710</id><snippet>def do_things(verbose=False):
    """Do some things.
    :param verbose: Be verbose (give additional messages).
    """
    raise NotImplementedError
</snippet></ROW><ROW><id>405710</id><snippet>stdout</snippet></ROW><ROW><id>405710</id><snippet>logging</snippet></ROW><ROW><id>405710</id><snippet>set</snippet></ROW><ROW><id>405710</id><snippet>list</snippet></ROW><ROW><id>405710</id><snippet>:rtype:</snippet></ROW><ROW><id>405710</id><snippet>:type param:</snippet></ROW><ROW><id>406199</id><snippet>&gt;&gt;&gt; list_of_menuitems = [['image00', 'image01'], ['image10'], []]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; chain = itertools.chain(*list_of_menuitems)
&gt;&gt;&gt; print(list(chain))
['image00', 'image01', 'image10']
</snippet></ROW><ROW><id>406199</id><snippet>QuerySet</snippet></ROW><ROW><id>406199</id><snippet>chain</snippet></ROW><ROW><id>406199</id><snippet>list(chain)</snippet></ROW><ROW><id>406199</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>406199</id><snippet>*</snippet></ROW><ROW><id>407022</id><snippet>CTRL-A: getch() returns 1
CTRL-B: getch() returns 2
...
CTRL-Z: getch() returns 26
</snippet></ROW><ROW><id>408549</id><snippet>class HttpResponseSeeOther(HttpResponseRedirect):
    status_code = 303
</snippet></ROW><ROW><id>408889</id><snippet>&gt;&gt;&gt; d = {'age': 27,
...  'name': 'Joe',
...  'numbers': [1, 
...              2, 
...              3,
...              4,
...              5],
...  'subdict': {
...              'first': 1, 
...              'second': 2,
...               'third': 3
...              }
... }
&gt;&gt;&gt; 
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(d)
{'age': 27,
 'name': 'Joe',
 'numbers': [1, 2, 3, 4, 5],
 'subdict': {'first': 1, 'second': 2, 'third': 3}}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>409423</id><snippet>x = [
 ['4', '21', '1', '14', '2008-10-24 15:42:58'], 
 ['3', '22', '4', '2somename', '2008-10-24 15:22:03'], 
 ['5', '21', '3', '19', '2008-10-24 15:45:45'], 
 ['6', '21', '1', '1somename', '2008-10-24 15:45:49'], 
 ['7', '22', '3', '2somename', '2008-10-24 15:45:51']
]

from operator import itemgetter

x.sort(key=itemgetter(1))
</snippet></ROW><ROW><id>409423</id><snippet>from itertools import groupby
y = groupby(x, itemgetter(1))
</snippet></ROW><ROW><id>409423</id><snippet>for elt, items in groupby(x, itemgetter(1)):
    print elt, items
    for i in items:
        print i
</snippet></ROW><ROW><id>409423</id><snippet>21 &lt;itertools._grouper object at 0x511a0&gt;
['4', '21', '1', '14', '2008-10-24 15:42:58']
['5', '21', '3', '19', '2008-10-24 15:45:45']
['6', '21', '1', '1somename', '2008-10-24 15:45:49']
22 &lt;itertools._grouper object at 0x51170&gt;
['3', '22', '4', '2somename', '2008-10-24 15:22:03']
['7', '22', '3', '2somename', '2008-10-24 15:45:51']
</snippet></ROW><ROW><id>409423</id><snippet>from pprint import pprint as pp
pp([y for y in x if y[3] == '2somename'])
</snippet></ROW><ROW><id>409423</id><snippet>[['3', '22', '4', '2somename', '2008-10-24 15:22:03'],
 ['7', '22', '3', '2somename', '2008-10-24 15:45:51']]
</snippet></ROW><ROW><id>409486</id><snippet>\x9d</snippet></ROW><ROW><id>409486</id><snippet>\xe5</snippet></ROW><ROW><id>409486</id><snippet>iso-8859-1</snippet></ROW><ROW><id>409486</id><snippet>iso-8859-1</snippet></ROW><ROW><id>409486</id><snippet>cp1252</snippet></ROW><ROW><id>409486</id><snippet>\x9d</snippet></ROW><ROW><id>409486</id><snippet>In [290]: unicode(u'\x9d'.encode('iso-8859-1'), 'cp1252')
---------------------------------------------------------------------------
&lt;type 'exceptions.UnicodeDecodeError'&gt;    Traceback (most recent call last)

/home/jv/&lt;ipython console&gt; in &lt;module&gt;()

/usr/lib/python2.5/encodings/cp1252.py in decode(self, input, errors)
     13 
     14     def decode(self,input,errors='strict'):
---&gt; 15         return codecs.charmap_decode(input,errors,decoding_table)
     16 
     17 class IncrementalEncoder(codecs.IncrementalEncoder):

&lt;type 'exceptions.UnicodeDecodeError'&gt;: 'charmap' codec can't decode byte 0x9d in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>409486</id><snippet>\xe5</snippet></ROW><ROW><id>409486</id><snippet>ascii</snippet></ROW><ROW><id>409486</id><snippet>In [291]: unicode(u'\xe5'.encode('iso-8859-1'), 'cp1252').encode('ascii')
---------------------------------------------------------------------------
&lt;type 'exceptions.UnicodeEncodeError'&gt;    Traceback (most recent call last)

/home/jv/&lt;ipython console&gt; in &lt;module&gt;()

&lt;type 'exceptions.UnicodeEncodeError'&gt;: 'ascii' codec can't encode character u'\xe5' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>409486</id><snippet>In [75]: decd=open('jalf_decode_err','r').read()

In [76]: chardet.detect(decd)
Out[76]: {'confidence': 0.98999999999999999, 'encoding': 'utf-8'}
##this is what is tried at the back - my guess :)
In [77]: unicode(decd, 'cp1252') 
---------------------------------------------------------------------------
&lt;type 'exceptions.UnicodeDecodeError'&gt;    Traceback (most recent call last)

/home/jv/&lt;ipython console&gt; in &lt;module&gt;()

/usr/lib/python2.5/encodings/cp1252.py in decode(self, input, errors)
     13 
     14     def decode(self,input,errors='strict'):
---&gt; 15         return codecs.charmap_decode(input,errors,decoding_table)
     16 
     17 class IncrementalEncoder(codecs.IncrementalEncoder):

&lt;type 'exceptions.UnicodeDecodeError'&gt;: 'charmap' codec can't decode byte 0x9d in position 2812: character maps to &lt;undefined&gt;'

##this is a FIX- this way all your messages r accepted
In [78]: unicode(decd, chardet.detect(decd)['encoding']) 
Out[78]: u'Return-path: &lt;root@apps2.servage.net&gt;\nEnvelope-to: public@jalf.dk\nDelivery-date: Fri, 22 Aug 2008 16:49:53 -0400\nReceived: from [77.232.66.102] (helo=apps2.servage.net)\n\tby c1p.hostingzoom.com with esmtp (Exim 4.69)\n\t(envelope-from &lt;root@apps2.servage.net&gt;)\n\tid 1KWdZu-0003VX-HP\n\tfor public@jalf.dk; Fri, 22 Aug 2008 16:49:52 -0400\nReceived: from apps2.servage.net (apps2.servage.net [127.0.0.1])\n\tby apps2.servage.net (Postfix) with ESMTP id 4A87F980026\n\tfor &lt;public@jalf.dk&gt;; Fri, 22 Aug 2008 21:49:46 +0100 (BST)\nReceived: (from root@localhost)\n\tby apps2.servage.net (8.13.8/8.13.8/Submit) id m7MKnkrB006225;\n\tFri, 22 Aug 2008 21:49:46 +0100\nDate: Fri, 22 Aug 2008 21:49:46 +0100\nMessage-Id: &lt;200808222049.m7MKnkrB006225@apps2.servage.net&gt;\nTo: public@jalf.dk\nSubject: =?UTF-8?B?WW5ncmVzYWdlbnMgTnloZWRzYnJldiAyMi44LjA4?=\nFrom: Nyhedsbrev fra Yngresagen &lt;info@yngresagen.dk&gt;\nReply-To: info@yngresagen.dk\nContent-type: text/plain; charset=UTF-8\nX-Abuse: Servage.net Listid 16329\nMime-Version: 1.0\nX-mailer: Servage Maillist System\nX-Spam-Status: No, score=0.1\nX-Spam-Score: 1\nX-Spam-Bar: /\nX-Spam-Flag: NO\nX-ClamAntiVirus-Scanner: This mail is clean\n\n\nK\xe6re medlem\n\nH\xe5ber du har en god sommer og er klar p\xe5 at l\xe6se seneste nyt i Yngresagen. God forn\xf8jelse!\n\n\n::. KOM TIL YS-CAF\xc8 .::\nFlere og billigere ungdomsboliger, afskaf 24-\xe5rs-reglen eller hvad synes du? Yngresagen indbyder dig til en \xe5ben debat over kaffe og snacks. Yngresagens Kristian Lauta, Mette Marb\xe6k, og formand Steffen M\xf8ller fort\xe6ller om tidligere projekter og vil gerne diskutere, hvad Yngresagen skal bruge sin tid p\xe5 fremover.  \nVil du diskutere et emne, du br\xe6nder for, eller vil du bare v\xe6re med p\xe5 en lytter?\nS\xe5 kom torsdag d. 28/8 kl. 17-19, Kulturhuset 44, 2200 KBH N \n \n::. VIND GAVEKORT &amp; BLIV H\xd8RT .:: \nYngresagen har lavet et sp\xf8rgeskema, s\xe5 du har direkte mulighed for at sige din mening, og v\xe6re med til at forme Yngresagens arbejde. Brug 5 min. p\xe5 at dele dine holdninger om f.eks. uddannelse, arbejde og unges vilk\xe5r - og vind et gavekort til en musikbutik. Vi tr\xe6kker lod blandt alle svarene og finder tre heldige vindere. Sp\xf8rgeskemaet er her: www.yngresagen.dk\n\n::. YS SPARKER NORDJYLLAND I GANG .::\nNordjylland bliver Yngresagens sunde region. Her er regionsansvarlig Andreas M\xf8ller Stehr ved at starte tre projekter op: 1) L\xf8beklub, 2) F\xf8rstehj\xe6lpskursus, 3) Mad til unge-program.\nVi har brug for flere frivillige til at sparke projekterne i gang. Vi tilbyder gratis fede aktiviteter, gratis t-shirts og ture til K\xf8benhavn, hvor du kan m\xf8de andre unge i YS. Har det fanget din interesse, s\xe5 t\xf8v ikke med at kontakte os: nordjylland@yngresagen.dk tlf. 21935185. \n\n::. YNGRESAGEN I PRESSEN .::\nL\xe6s her et udsnit af sidste nyt om Yngresagen i medierne. L\xe6s og lyt mere p\xe5 hjemmesiden under \u201dYS i pressen\u201d.\n\n:: Radionyhederne: Unge skal informeres bedre om l\xe5n \nUnge ved for lidt om at l\xe5ne penge. Det udnytter banker og rejseselskaber til at give dem l\xe5n med t\xe5rnh\xf8je renter. S\xe5dan lyder det fra formand Steffen M\xf8ller fra landsforeningen Yngresagen. \n\n:: Danmarks Radio P1: Dansk Folkeparti - de \xe6ldres parti? \nHvorfor er det kun fattige \xe6ldre og ikke alle fattige, der kan s\xf8ge om at f\xe5 nedsat medielicens?\nDansk Folkepartis ungeordf\xf8rer, Karin N\xf8dgaard, og Yngresagens formand Steffen M\xf8ller debatterer medielicens, \xe6ldrecheck og indflydelse til unge \n\n:: Frederiksborg Amts Avis: Turen til Roskilde koster en holdning!\nFor at skabe et m\xf8de mellem politikere og unge fragter Yngresagen unge gratis til \xe5rets Roskilde Festival. Det sker med den s\xe5kaldte Yngrebussen, der kan l\xe6ses mere om p\xe5 www.yngrebussen.dk\n\n \n \nMed venlig hilsen \nYngresagen\n\nLandsforeningen Yngresagen\nKulturhuset Kapelvej 44\n2200 K\xf8benhavn N\n\ntlf. 29644960\ninfo@yngresagen.dk\nwww.yngresagen.dk\n\n\n-------------------------------------------------------\nUnsubscribe Link: \nhttp://apps.corecluster.net/apps/ml/r.php?l=16329&amp;e=public%40jalf.dk%0D%0A&amp;id=40830383\n-------------------------------------------------------\n\n'
</snippet></ROW><ROW><id>409486</id><snippet>In [129]: encd=open('jalf_encode_err','r').read()

In [130]: chardet.detect(encd)
Out[130]: {'confidence': 0.78187650822865284, 'encoding': 'ISO-8859-2'}

#even after the unicode conversion the encoding to ascii fails - because the criteris is strict by default
In [131]: unicode(encd, chardet.detect(encd)['encoding']).encode('ascii')
---------------------------------------------------------------------------
&lt;type 'exceptions.UnicodeEncodeError'&gt;    Traceback (most recent call last)

/home/jv/&lt;ipython console&gt; in &lt;module&gt;()

&lt;type 'exceptions.UnicodeEncodeError'&gt;: 'ascii' codec can't encode character u'\u0159' in position 557: ordinal not in range(128)'

##changing the criteria to ignore
In [132]: unicode(encd, chardet.detect(encd)['encoding']).encode('ascii', 'ignore')
Out[132]: 'Return-path: &lt;info@kollegierneskontor.dk&gt;\nEnvelope-to: alf@5elements.net\nDelivery-date: Tue, 21 Aug 2007 06:10:08 -0400\nReceived: from pfepc.post.tele.dk ([195.41.46.237]:52065)\n\tby c1p.hostingzoom.com with esmtp (Exim 4.66)\n\t(envelope-from &lt;info@kollegierneskontor.dk&gt;)\n\tid 1INQgX-0003fI-Un\n\tfor alf@5elements.net; Tue, 21 Aug 2007 06:10:08 -0400\nReceived: from local.com (ns2.datadan.dk [195.41.7.21])\n\tby pfepc.post.tele.dk (Postfix) with SMTP id ADF4C8A0086\n\tfor &lt;alf@5elements.net&gt;; Tue, 21 Aug 2007 12:10:04 +0200 (CEST)\nFrom: "Kollegiernes Kontor I Kbenhavn" &lt;info@kollegierneskontor.dk&gt;\nTo: "Jesper Alf Dam" &lt;alf@5elements.net&gt;\nSubject: Fornyelse af profil\nDate: Tue, 21 Aug 2007 12:10:03 +0200\nX-Mailer: Dundas Mailer Control 1.0\nMIME-Version: 1.0\nContent-Type: Multipart/Alternative;\n\tboundary="Gark=_20078211010346yhSD0hUCo"\nMessage-Id: &lt;20070821101004.ADF4C8A0086@pfepc.post.tele.dk&gt;\nX-Spam-Status: No, score=0.0\nX-Spam-Score: 0\nX-Spam-Bar: /\nX-Spam-Flag: NO\nX-ClamAntiVirus-Scanner: This mail is clean\n\n\n\n--Gark=_20078211010346yhSD0hUCo\nContent-Type: text/plain; charset=ISO-8859-1\nContent-Transfer-Encoding: Quoted-Printable\n\nHej Jesper Alf Dam=0D=0A=0D=0AHusk at forny din profil hos KKIK inden 28.=\n august 2007=0D=0ALog ind p=E5 din profil og benyt ikonet "forny".=0D=0A=0D=\n=0AVenlig hilsen=0D=0AKollegiernes Kontor i K=F8benhavn=0D=0A=0D=0Ahttp:/=\n/www.kollegierneskontor.dk/=0D=0A=0D=0A\n\n--Gark=_20078211010346yhSD0hUCo\nContent-Type: text/html; charset=ISO-8859-1\nContent-Transfer-Encoding: Quoted-Printable\n\n&lt;html&gt;=0D=0A&lt;head&gt;=0D=0A=0D=0A&lt;style&gt;=0D=0ABODY, TD {=0D=0Afont-family: v=\nerdana, arial, helvetica; font-size: 12px; color: #666666;=0D=0A}=0D=0A&lt;/=\nstyle&gt;=0D=0A=0D=0A&lt;title&gt;&lt;/title&gt;=0D=0A=0D=0A&lt;/head&gt;=0D=0A&lt;body bgcolor=3D=\n#FFFFFF&gt;=0D=0A&lt;hr size=3D1 noshade&gt;=0D=0A&lt;table cellpadding=3D0 cellspaci=\nng=3D0 border=3D0 width=3D100%&gt;=0D=0A&lt;tr&gt;&lt;td &gt;=0D=0AHej Jesper Alf Dam&lt;br=\n&gt;&lt;br&gt;Husk at forny din profil inden 28. august 2007&lt;br&gt;=0D=0ALog ind p=E5=\n din profil og benyt ikonet "forny".=0D=0A&lt;br&gt;&lt;br&gt;=0D=0A&lt;a href=3D"http:/=\n/www.kollegierneskontor.dk/"&gt;Klik her&lt;/a&gt; for at logge ind.&lt;br&gt;&lt;br&gt;Venlig=\n hilsen&lt;br&gt;Kollegiernes Kontor i K=F8benhavn=0D=0A&lt;/td&gt;&lt;/tr&gt;=0D=0A&lt;/table=\n&gt;=0D=0A&lt;hr size=3D1 noshade&gt;=0D=0A&lt;/body&gt;=0D=0A&lt;/html&gt;=0D=0A\n\n--Gark=_20078211010346yhSD0hUCo--\n\n'

In [133]: len(encd)
Out[133]: 2303

In [134]: len(unicode(encd, chardet.detect(encd)['encoding']).encode('ascii', 'ignore'))
Out[134]: 2302
</snippet></ROW><ROW><id>409486</id><snippet>import chardet

for msg in src:
    msg=unicode(msg, chardet.detect(msg)['encoding']).encode('ascii', 'ignore')
    dest.add(msg)
</snippet></ROW><ROW><id>409538</id><snippet>get</snippet></ROW><ROW><id>409538</id><snippet>filter</snippet></ROW><ROW><id>409538</id><snippet>filter</snippet></ROW><ROW><id>409564</id><snippet>def sanitized(func):
    def sfunc(*args, **kwds):
        return func(*[arg or '' for arg in args],
                    **dict((k, v or '') for k,v in kwds.iteritems()))
    sfunc.func_name = func.func_name
    sfunc.func_doc = func.func_doc
    return sfunc
</snippet></ROW><ROW><id>409564</id><snippet>@sanitized
def func(param1, param2, param3):
    print param1, param2, param3
</snippet></ROW><ROW><id>409564</id><snippet>&gt;&gt;&gt; func('foo', None, 'spam')
foo  spam
</snippet></ROW><ROW><id>409564</id><snippet>@decorator</snippet></ROW><ROW><id>409564</id><snippet>sanitized</snippet></ROW><ROW><id>409607</id><snippet>CREATE TABLE Tagged (
  object_id  INT NOT NULL,
  tag_id     INT NOT NULL,
  PRIMARY KEY (object_id, tag_id),
  FOREIGN KEY (object_id) REFERENCES Objects(object_id),
  FOREIGN KEY (tag_id) REFERENCES Tags(tag_id)
);
</snippet></ROW><ROW><id>409607</id><snippet>object_id</snippet></ROW><ROW><id>409607</id><snippet>SELECT DISTINCT object_id
FROM Tagged
WHERE tag_id IN (3, 4, 5);
</snippet></ROW><ROW><id>409607</id><snippet>SELECT DISTINCT t1.object_id
FROM Tagged t1 
 LEFT OUTER JOIN Tagged t2
 ON (t1.object_id = t2.object_id AND t2.tag_id NOT IN (3, 4, 5))
WHERE t1.tag_id IN (3, 4, 5)
 AND t2.object_id IS NULL;
</snippet></ROW><ROW><id>409844</id><snippet>import re
data = re.findall('&lt;body&gt;([^\&lt;]*)&lt;/body&gt;', result)[0]
</snippet></ROW><ROW><id>409844</id><snippet>start = 0
end = 5
while (end&lt;len(data)):
   print data[start:end]
   start = end+1
   end = end+5
print data[start:]
</snippet></ROW><ROW><id>409925</id><snippet>py2app</snippet></ROW><ROW><id>410067</id><snippet>bool_list[:] = [False] * len(bool_list)
</snippet></ROW><ROW><id>410067</id><snippet>bool_list[:] = [False for item in bool_list]
</snippet></ROW><ROW><id>410482</id><snippet>from datetime import timedelta
from babel.dates import format_timedelta
delta = timedelta(days=6)
format_timedelta(delta, locale='en_US')
u'1 week'
</snippet></ROW><ROW><id>411880</id><snippet>from django.db.models.loading import get_model
model = get_model('app_name', 'model_name')
</snippet></ROW><ROW><id>412097</id><snippet>class MyDialog(gtk.Dialog, gtk.Buildable):
    __gtype_name__ = "MyDialog"

    def do_parser_finished(self, builder):
        self.treeview = builder.get_object("treeview1")
        # Do any other associated post-initialization
</snippet></ROW><ROW><id>412149</id><snippet>class EligibilityForm(forms.Form):
    def __init__(self, *args, **kwargs):
        super(EligibilityForm, self).__init__(*args, **kwargs)
        # dynamic fields here ...
        self.fields['plan_id'] = CharField()
    # normal fields here ...
    date_requested = DateField()
</snippet></ROW><ROW><id>412371</id><snippet>public_html</snippet></ROW><ROW><id>412780</id><snippet>from mod_python import apache

def requesthandler(req):
    req.content_type = "text/plain"
    req.write("Hello World!")
    return apache.OK
</snippet></ROW><ROW><id>412979</id><snippet>def adjustAppend( v, n ):
    weight= -n/sum(v)
    return [ i+i*weight for i in v ] + [n]
</snippet></ROW><ROW><id>412979</id><snippet> sum(v) == sum( v + [n] )
</snippet></ROW><ROW><id>412979</id><snippet>sum(r(i)) == -n
</snippet></ROW><ROW><id>412979</id><snippet>sum( map( r, v ) ) == -n
</snippet></ROW><ROW><id>412979</id><snippet>-(n*i)/sum(v)</snippet></ROW><ROW><id>413600</id><snippet>UNIT_CHOICES = ( ('m', 'meters'), ('f', 'feet' ), ('i', 'inches'), ('pt', 'points') )

unit_conversions = {
    ('m','f'): 3.xyz,
    ('m','i'): 39.xyz,
    ('m','pt'): 29.xyz*72,
    ('f','m'): 1/3.xyz,
    ('f','i'): 12.0,
    ('f','pt'): 12.0*72,
    etc.
}
</snippet></ROW><ROW><id>413600</id><snippet>class WithUnit( Model ):
    ...
    def toUnit( self, someUnit ):
        if someUnit == self.unit: return self.value
        elif (someUnit,self.unit) in unit_conversions:
            return self.value * unit_conversions[(someUnit,self.unit)]
        else:
            raise Exception( "Can't convert" )
</snippet></ROW><ROW><id>414078</id><snippet>#!/usr/bin/env python
import sys
from scapy import *
conf.verb=0

if len(sys.argv) != 4:
    print "Usage: ./spoof.py &lt;target&gt; &lt;spoofed_ip&gt; &lt;port&gt;"
    sys.exit(1)

target = sys.argv[1]
spoofed_ip = sys.argv[2]
port = int(sys.argv[3])

p1=IP(dst=target,src=spoofed_ip)/TCP(dport=port,sport=5000,flags='S')
send(p1)
print "Okay, SYN sent. Enter the sniffed sequence number now: "

seq=sys.stdin.readline()
print "Okay, using sequence number " + seq

seq=int(seq[:-1])
p2=IP(dst=target,src=spoofed_ip)/TCP(dport=port,sport=5000,flags='A',
                                     ack=seq+1,seq=1)
send(p2)

print "Okay, final ACK sent. Check netstat on your target :-)"
</snippet></ROW><ROW><id>415417</id><snippet>netifaces</snippet></ROW><ROW><id>415417</id><snippet>&gt;&gt;&gt; import netifaces
&gt;&gt;&gt; netifaces.interfaces()
['lo', 'eth0']
&gt;&gt;&gt; netifaces.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:11:2f:32:63:45'}], 2: [{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]}
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   print netifaces.ifaddresses(interface)[netifaces.AF_INET]
...
[{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]
[{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}]
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:
...     print link['addr']
...
127.0.0.1
10.0.0.2
</snippet></ROW><ROW><id>415417</id><snippet>from netifaces import interfaces, ifaddresses, AF_INET

def ip4_addresses():
    ip_list = []
    for interface in interfaces():
        for link in ifaddresses(interface)[AF_INET]:
            ip_list.append(link['addr'])
    return ip_list
</snippet></ROW><ROW><id>415417</id><snippet>AF_INET6</snippet></ROW><ROW><id>415417</id><snippet>AF_INET</snippet></ROW><ROW><id>415417</id><snippet>netifaces</snippet></ROW><ROW><id>415519</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime(2009, 1, 6, 15, 8, 24, 78915)
</snippet></ROW><ROW><id>415519</id><snippet>&gt;&gt;&gt; datetime.datetime.time(datetime.datetime.now())
datetime.time(15, 8, 24, 78915)
</snippet></ROW><ROW><id>415519</id><snippet>&gt;&gt;&gt; datetime.datetime.now().time()
</snippet></ROW><ROW><id>415519</id><snippet>datetime</snippet></ROW><ROW><id>415519</id><snippet>datetime</snippet></ROW><ROW><id>415519</id><snippet>&gt;&gt;&gt; from datetime import datetime
</snippet></ROW><ROW><id>415519</id><snippet>datetime.</snippet></ROW><ROW><id>415770</id><snippet>{{ form.as_table_with_label_classes }}
</snippet></ROW><ROW><id>415770</id><snippet>encapsulating_selector label {
    some-attr: some-value;
}
</snippet></ROW><ROW><id>417438</id><snippet>'|'</snippet></ROW><ROW><id>417438</id><snippet>set</snippet></ROW><ROW><id>417438</id><snippet>'|'</snippet></ROW><ROW><id>417438</id><snippet>a = set([1,2,3])
b = set([2,3,4])
c = a|b  # = set([1,2,3,4])
</snippet></ROW><ROW><id>417438</id><snippet>something.property</snippet></ROW><ROW><id>417438</id><snippet>__or__()</snippet></ROW><ROW><id>418243</id><snippet>import os
def is_sticky(path):
    return os.stat(path).st_mode &amp; 01000 == 01000
</snippet></ROW><ROW><id>418533</id><snippet>import win32process
print win32process.GetProcessMemoryInfo(win32process.GetCurrentProcess())
</snippet></ROW><ROW><id>418946</id><snippet>for apple in tree:
    if (apple.weight + basket.weight) &gt; 10:
       send(basket)
       basket.clear()
    basket.add(apple)
</snippet></ROW><ROW><id>419038</id><snippet>distutils.version</snippet></ROW><ROW><id>419038</id><snippet>from distutils.version import StrictVersion

print StrictVersion('1.2.2') &gt; StrictVersion('1.2.1')
</snippet></ROW><ROW><id>419038</id><snippet>&gt;&gt;&gt; import distutils.version
&gt;&gt;&gt; help(distutils.version)
</snippet></ROW><ROW><id>419185</id><snippet>__name__</snippet></ROW><ROW><id>419185</id><snippet>"__main__"</snippet></ROW><ROW><id>419185</id><snippet>__name__</snippet></ROW><ROW><id>419185</id><snippet>python threading_example.py
</snippet></ROW><ROW><id>419185</id><snippet>import</snippet></ROW><ROW><id>419185</id><snippet>def</snippet></ROW><ROW><id>419185</id><snippet>myfunction</snippet></ROW><ROW><id>419185</id><snippet>if</snippet></ROW><ROW><id>419185</id><snippet>__name__</snippet></ROW><ROW><id>419185</id><snippet>"__main__"</snippet></ROW><ROW><id>419185</id><snippet>.py</snippet></ROW><ROW><id>419232</id><snippet>&gt;&gt;&gt; xml = """&lt;main&gt;
... &lt;object1 attr="name"&gt;content&lt;/object1&gt;
... &lt;object1 attr="foo"&gt;contenbar&lt;/object1&gt;
... &lt;test&gt;me&lt;/test&gt;
... &lt;/main&gt;"""

&gt;&gt;&gt; from lxml import objectify

&gt;&gt;&gt; main = objectify.fromstring(xml)

&gt;&gt;&gt; main.object1[0]
'content'

&gt;&gt;&gt; main.object1[1]
'contenbar'

&gt;&gt;&gt; main.object1[0].get("attr")
'name'

&gt;&gt;&gt; main.test
'me'
</snippet></ROW><ROW><id>419232</id><snippet>&gt;&gt;&gt; item = objectify.Element("item")

&gt;&gt;&gt; item.title = "Best of python"

&gt;&gt;&gt; item.price = 17.98

&gt;&gt;&gt; item.price.set("currency", "EUR")

&gt;&gt;&gt; order = objectify.Element("order")

&gt;&gt;&gt; order.append(item)

&gt;&gt;&gt; order.item.quantity = 3

&gt;&gt;&gt; order.price = sum(item.price * item.quantity
... for item in order.item)

&gt;&gt;&gt; import lxml.etree

&gt;&gt;&gt; print lxml.etree.tostring(order, pretty_print=True)
&lt;order&gt;
  &lt;item&gt;
    &lt;title&gt;Best of python&lt;/title&gt;
    &lt;price currency="EUR"&gt;17.98&lt;/price&gt;
    &lt;quantity&gt;3&lt;/quantity&gt;
  &lt;/item&gt;
  &lt;price&gt;53.94&lt;/price&gt;
&lt;/order&gt;
</snippet></ROW><ROW><id>419838</id><snippet>selected_classes = []
classes = sorted(classes, key=lambda c: c.score)
for clas in classes:
    if not clas.clashes_with(selected_classes):
        selected_classes.append(clas)
</snippet></ROW><ROW><id>420004</id><snippet>submit</snippet></ROW><ROW><id>420004</id><snippet>action</snippet></ROW><ROW><id>420004</id><snippet>onchange</snippet></ROW><ROW><id>420004</id><snippet>&lt;select name='myfield' onchange='this.form.submit()'&gt;
&lt;option .... &gt;
...
&lt;/select&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>421228</id><snippet>import subprocess
p=subprocess.Popen(args, stdout=subprocess.PIPE)
print p.communicate()[0]
</snippet></ROW><ROW><id>421335</id><snippet>class Torrent(ScrapedItem):
    pass

class MininovaSpider(CrawlSpider):
    domain_name = 'mininova.org'
    start_urls = ['http://www.mininova.org/today']
    rules = [Rule(RegexLinkExtractor(allow=['/tor/\d+']), 'parse_torrent')]

    def parse_torrent(self, response):
        x = HtmlXPathSelector(response)
        torrent = Torrent()

        torrent.url = response.url
        torrent.name = x.x("//h1/text()").extract()
        torrent.description = x.x("//div[@id='description']").extract()
        torrent.size = x.x("//div[@id='info-left']/p[2]/text()[2]").extract()
        return [torrent]
</snippet></ROW><ROW><id>421670</id><snippet>pwd.getpwall()</snippet></ROW><ROW><id>421670</id><snippet>grp.getgrgid(gid)</snippet></ROW><ROW><id>421670</id><snippet>import pwd, grp
for p in pwd.getpwall():
    print p[0], grp.getgrgid(p[3])[0]
</snippet></ROW><ROW><id>422121</id><snippet>name = raw_input('What is your name?')
</snippet></ROW><ROW><id>422121</id><snippet>print 'You said', name
</snippet></ROW><ROW><id>423479</id><snippet>long double</snippet></ROW><ROW><id>423479</id><snippet>float</snippet></ROW><ROW><id>423479</id><snippet>c_longdouble</snippet></ROW><ROW><id>423479</id><snippet>%eax</snippet></ROW><ROW><id>423596</id><snippet>global</snippet></ROW><ROW><id>423596</id><snippet>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print globvar     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</snippet></ROW><ROW><id>423596</id><snippet>global</snippet></ROW><ROW><id>423804</id><snippet>exclude = ('...',)</snippet></ROW><ROW><id>425825</id><snippet>&gt;&gt;&gt; for s in KnuthMorrisPratt([4,'a',3,5,6], [5,6]): print s
3
&gt;&gt;&gt; for s in KnuthMorrisPratt([4,'a',3,5,6], [5,7]): print s
(nothing)
</snippet></ROW><ROW><id>427344</id><snippet>
echo ESzjTnGMRFnfVOJwQfqtyXOI8yzAatioyufiSdE1dx02McNkZ2IvBg== | openssl enc -nopad -a -des-ecb -K 6162636465666768 -iv 0 -p -d
</snippet></ROW><ROW><id>427827</id><snippet>&lt;div py:if="variable"&gt; ... &lt;/div&gt;</snippet></ROW><ROW><id>428189</id><snippet>n</snippet></ROW><ROW><id>428189</id><snippet>n</snippet></ROW><ROW><id>428189</id><snippet>UPDATE item.order = item.order + 1 FROM item WHERE order &gt; 3
INSERT INTO item (order, ...) VALUES (3, ...)
</snippet></ROW><ROW><id>428357</id><snippet>_v</snippet></ROW><ROW><id>428357</id><snippet>_v</snippet></ROW><ROW><id>428357</id><snippet>SomeClass1</snippet></ROW><ROW><id>428357</id><snippet>SomeClass2</snippet></ROW><ROW><id>428357</id><snippet>_v</snippet></ROW><ROW><id>428357</id><snippet>SomeClass1</snippet></ROW><ROW><id>428357</id><snippet>x2</snippet></ROW><ROW><id>428357</id><snippet>_v</snippet></ROW><ROW><id>428357</id><snippet>class MyDescriptor(object):
  def __get__(self, obj, type=None):
    print "get", self, obj, type
    return obj._v
  def __set__(self, obj, value):
    obj._v = value
    print "set", self, obj, value
</snippet></ROW><ROW><id>429491</id><snippet>from collections import defaultdict
kvmap= defaultdict(int)
for k in a_list:
    kvmap[k] += 1
</snippet></ROW><ROW><id>430064</id><snippet>outfile = re.sub(r"(?&lt;!\.min)\.js$", ".min.js", infile)
</snippet></ROW><ROW><id>430102</id><snippet>re.match</snippet></ROW><ROW><id>430102</id><snippet>match = re.match(r"([a-z]+)([0-9]+)", 'foofo21', re.I)
if match:
    items = match.groups()
    # items is ("foo", "21")
</snippet></ROW><ROW><id>430781</id><snippet>import re
regexc = re.compile(r"(?:^|[^\\])'(([^\\']|\\'|\\\\)*)'")

def check(test, base, target):
    match = regexc.search(base)
    assert match is not None, test+": regex didn't match for "+base
    assert match.group(1) == target, test+": "+target+" not found in "+base
    print "test %s passed"%test

check("Empty","''","")
check("single escape1", r""" Example: 'Foo \' Bar'  End. """,r"Foo \' Bar")
check("single escape2", r"""'\''""",r"\'")
check("double escape",r""" Example2: 'Foo \\' End. """,r"Foo \\")
check("First quote escaped",r"not matched\''a'","a")
check("First quote escaped beginning",r"\''a'","a")
</snippet></ROW><ROW><id>430781</id><snippet>r"(?:^|[^\\])'(([^\\']|\\'|\\\\)*)'"</snippet></ROW><ROW><id>431279</id><snippet>sudo easy_install appscript</snippet></ROW><ROW><id>431279</id><snippet>from appscript import app, mactypes
app('Finder').desktop_picture.set(mactypes.File('/your/filename.jpg'))
</snippet></ROW><ROW><id>431279</id><snippet>tell application "Finder"
    set desktop picture to POSIX file "/your/filename.jpg"
end tell
</snippet></ROW><ROW><id>431279</id><snippet>osascript</snippet></ROW><ROW><id>431279</id><snippet>import subprocess

SCRIPT = """/usr/bin/osascript&lt;&lt;END
tell application "Finder"
set desktop picture to POSIX file "%s"
end tell
END"""

def set_desktop_background(filename):
    subprocess.Popen(SCRIPT%filename, shell=True)
</snippet></ROW><ROW><id>431387</id><snippet>def streamInYAML(stream):
	y = stream.readline()
	cont = 1
	while cont:
		l = stream.readline()
		if len(l) == 0:
			cont = 0
		else:
			if l.startswith(' '):
				y = y + l
			else:
				yield yaml.load(y)
				y = l
</snippet></ROW><ROW><id>431425</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

html = urllib2.urlopen("http://www.google.com").read()
soup = BeautifulSoup(html)
all_links = soup.findAll("a")
</snippet></ROW><ROW><id>431715</id><snippet>os.chdir(path)
</snippet></ROW><ROW><id>431771</id><snippet>&gt;&gt;&gt; f = open("csv.txt")
&gt;&gt;&gt; c = csv.reader(f)
&gt;&gt;&gt; for row in c: print row
['1', '2', '3']
['4', '5', '6']
&gt;&gt;&gt; f.seek(0)
&gt;&gt;&gt; for row in c: print row   # again
['1', '2', '3']
['4', '5', '6']
</snippet></ROW><ROW><id>431784</id><snippet>import savestate, pickle, __main__
pickle.dump(__main__, open('savestate.pickle', 'wb'), 2)
</snippet></ROW><ROW><id>431871</id><snippet>def f():
    return 1, 2, 3

_, _, x = f()
</snippet></ROW><ROW><id>431947</id><snippet>l = list(t)
</snippet></ROW><ROW><id>432289</id><snippet> itemindex=numpy.where(array==item)
</snippet></ROW><ROW><id>432790</id><snippet>setattr(test, attr_name, 10)
</snippet></ROW><ROW><id>432790</id><snippet>&gt;&gt;&gt; class a(object): pass
&gt;&gt;&gt; a.__dict__['wut'] = 4
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dictproxy' object does not support item assignment
&gt;&gt;&gt; setattr(a, 'wut', 7)
&gt;&gt;&gt; a.wut
7
</snippet></ROW><ROW><id>433161</id><snippet>bool(a) != bool(b)
</snippet></ROW><ROW><id>433255</id><snippet>settings.MEDIA_URL</snippet></ROW><ROW><id>433255</id><snippet>render_to_response</snippet></ROW><ROW><id>433255</id><snippet>from django.shortcuts import render_to_response
from django.template import RequestContext
from django.views.generic.simple import direct_to_template

def my_generic_view(request, template='my_template.html'):
    return direct_to_template(request, template)

def more_custom_view(request, template='my_template.html'):
    return render_to_response(template, {}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>433255</id><snippet>settings.MEDIA_URL</snippet></ROW><ROW><id>433255</id><snippet>{{ MEDIA_URL }}</snippet></ROW><ROW><id>433255</id><snippet>from django.conf import settings
from django.shortcuts import render_to_response

def my_view_function(request, template='my_template.html'):
    context = {'favorite_color': settings.FAVORITE_COLOR}
    return render_to_response(template, context)
</snippet></ROW><ROW><id>433255</id><snippet>settings.FAVORITE_COLOR</snippet></ROW><ROW><id>433255</id><snippet>{{ favorite_color }}</snippet></ROW><ROW><id>433418</id><snippet>(?P&lt;zip&gt;...)
</snippet></ROW><ROW><id>433418</id><snippet>Zip:\s*
</snippet></ROW><ROW><id>433418</id><snippet>\d
</snippet></ROW><ROW><id>433418</id><snippet>\w
</snippet></ROW><ROW><id>433418</id><snippet>y.groupdict('zip')
</snippet></ROW><ROW><id>433418</id><snippet>y.group(2)
</snippet></ROW><ROW><id>433519</id><snippet>from datetime import datetime
Entry.objects.filter(pub_date=datetime(2008, 10, 18))
</snippet></ROW><ROW><id>433803</id><snippet>myInteger += 1
myString += "more text"
</snippet></ROW><ROW><id>433826</id><snippet>import pyPdf
pdf = pyPdf.PdfFileReader(open("pdffile.pdf"))
list(pdf.pages) # Process all the objects.
print pdf.resolvedObjects
</snippet></ROW><ROW><id>434411</id><snippet>def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return izip_longest(*args, fillvalue=fillvalue)
</snippet></ROW><ROW><id>434411</id><snippet>grouper('ABCDEFG', 3, 'x') --&gt; 'ABC' 'DEF' 'Gxx'
</snippet></ROW><ROW><id>434411</id><snippet>izip_longest</snippet></ROW><ROW><id>434610</id><snippet>#!/usr/bin/python

from Tkinter import *
from tkFileDialog import askopenfilename

root = Tk()
root.withdraw()
print askopenfilename()
</snippet></ROW><ROW><id>434612</id><snippet>os.system("open "+filename)
</snippet></ROW><ROW><id>434612</id><snippet>os.system("start "+filename)
</snippet></ROW><ROW><id>434612</id><snippet>open</snippet></ROW><ROW><id>434612</id><snippet>start</snippet></ROW><ROW><id>434612</id><snippet>try:
    retcode = subprocess.call("open " + filename, shell=True)
    if retcode &lt; 0:
        print &gt;&gt;sys.stderr, "Child was terminated by signal", -retcode
    else:
        print &gt;&gt;sys.stderr, "Child returned", retcode
except OSError, e:
    print &gt;&gt;sys.stderr, "Execution failed:", e
</snippet></ROW><ROW><id>434612</id><snippet>'filename ; rm -rf /'</snippet></ROW><ROW><id>434612</id><snippet>subprocess.call</snippet></ROW><ROW><id>434612</id><snippet>retcode</snippet></ROW><ROW><id>434612</id><snippet>subprocess</snippet></ROW><ROW><id>434612</id><snippet>os.system()</snippet></ROW><ROW><id>434612</id><snippet>os.system()</snippet></ROW><ROW><id>434689</id><snippet>buffer = "path/filename.zip"  # zip filename to write (or file-like object)
name = "folder/data.txt"      # name of file inside zip 
bytes = "blah blah blah"      # contents of file inside zip

zip = zipfile.ZipFile(buffer, "w", zipfile.ZIP_DEFLATED)
info = zipfile.ZipInfo(name)
info.external_attr = 0777 &lt;&lt; 16L # give full access to included file
zip.writestr(info, bytes)
zip.close()
</snippet></ROW><ROW><id>435944</id><snippet>import numpy as np
import scipy.misc.pilutil as smp

# Create a 1024x1024x3 array of 8 bit unsigned integers
data = np.zeros( (1024,1024,3), dtype=np.uint8 )

data[512,512] = [254,0,0]       # Makes the middle pixel red
data[512,513] = [0,0,255]       # Makes the next pixel blue

img = smp.toimage( data )       # Create a PIL image
img.show()                      # View in default viewer
</snippet></ROW><ROW><id>436267</id><snippet>def xfile(afile, globalz=None, localz=None):
    with open(afile, "r") as fh:
        exec(fh.read(), globalz, localz)
</snippet></ROW><ROW><id>436795</id><snippet>django.test.TestCase</snippet></ROW><ROW><id>436795</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>437088</id><snippet>#!/usr/bin/env python2.6

from __future__ import print_function

import readline
import threading

PROMPT = '&gt; '

def interrupt():
    print() # Don't want to end up on the same line the user is typing on.
    print('Interrupting cow -- moo!')
    print(PROMPT, readline.get_line_buffer(), sep='', end='')

def cli():
    while True:
        cli = str(raw_input(PROMPT))

if __name__ == '__main__':
    threading.Thread(target=cli).start()
    threading.Timer(2, interrupt).start()
</snippet></ROW><ROW><id>437088</id><snippet>interrupt</snippet></ROW><ROW><id>437088</id><snippet>interrupt</snippet></ROW><ROW><id>437088</id><snippet>time.sleep</snippet></ROW><ROW><id>437088</id><snippet>readline.get_line_buffer</snippet></ROW><ROW><id>437354</id><snippet>value_from_datadict()</snippet></ROW><ROW><id>437354</id><snippet>render</snippet></ROW><ROW><id>437354</id><snippet>DATE_FORMAT = '%m/%d/%y'

class DatePickerWidget(widgets.Widget):
    def render(self, name, value, attrs=None):
        if value is None:
            vstr = ''
        elif hasattr(value, 'strftime'):
            vstr = datetime_safe.new_datetime(value).strftime(DATE_FORMAT)
        else:
            vstr = value
        id = "id_%s" % name
        args = [
            "&lt;input type=\"text\" value=\"%s\" name=\"%s\" id=\"%s\" /&gt;" % \
            (vstr, name, id),
            "&lt;script type=\"text/javascript\"&gt;$(\"#%s\").datepicker({dateFormat:'mm/dd/y'});&lt;/script&gt;" % id
            ]
        return mark_safe("\n".join(args))
</snippet></ROW><ROW><id>437542</id><snippet>#!/usr/bin/env python3
"""Emulate `cat -v` behaviour.

use ^ and M- notation, except for LFD and TAB

NOTE: python exits on ^Z in stdin on Windows
NOTE: newlines handling skewed towards interactive terminal. 
      Particularly, applying the conversion twice might *not* be a no-op
"""
import fileinput, sys

def escape(bytes):
    for b in bytes:
        assert 0 &lt;= b &lt; 0x100

        if  b in (0x09, 0x0a): # '\t\n' 
            yield b
            continue

        if  b &gt; 0x7f: # not ascii
            yield 0x4d # 'M'
            yield 0x2d # '-'
            b &amp;= 0x7f

        if  b &lt; 0x20: # control char
            yield 0x5e # '^'
            b |= 0x40
        elif  b == 0x7f:
            yield 0x5e # '^'
            yield 0x3f # '?'
            continue

        yield b

if __name__ == '__main__':
    write_bytes = sys.stdout.buffer.write 
    for bytes in fileinput.input(mode="rb"):
        write_bytes(escape(bytes))
</snippet></ROW><ROW><id>437591</id><snippet>import foo

while True:
    # Do some things.
    if is_changed(foo):
        foo = reload(foo)
</snippet></ROW><ROW><id>437591</id><snippet>Foo</snippet></ROW><ROW><id>437591</id><snippet>Foo</snippet></ROW><ROW><id>437591</id><snippet>foo</snippet></ROW><ROW><id>438571</id><snippet>--log-queries-not-using-indexes</snippet></ROW><ROW><id>438690</id><snippet>','.join([str(i) for i in list_of_ints])
</snippet></ROW><ROW><id>438693</id><snippet>public class ExposeAMethod {
    public static void main( String args[] ) {
         TheClassToExpose  x = new TheClassToExpose();
        x.theFunction();
    }
}
</snippet></ROW><ROW><id>438693</id><snippet>ExposeAMethod.jar</snippet></ROW><ROW><id>438693</id><snippet>import subprocess
p = subprocess.Popen("java -jar ExposeAMethod.jar", shell=True)
sts = os.waitpid(p.pid, 0)
</snippet></ROW><ROW><id>438854</id><snippet>d = {}

for row in rows:
  c = list_of_categories.index(row["id"])
  print c
  d[c] = row["name"]
</snippet></ROW><ROW><id>438854</id><snippet>d = dict((list_of_categories.index(row['id']), row['name']) for row in rows)
print d
</snippet></ROW><ROW><id>439282</id><snippet>decimal.Decimal(random.randrange(10000))/100
</snippet></ROW><ROW><id>439708</id><snippet>def get(self):
  return self._s
def set(self, value):
  self._s = value
</snippet></ROW><ROW><id>439708</id><snippet>def metaget(self, par):
  return par.s
def metaset(self, value, par):
  par.s = value
def add(self, par):
  self[par.name] = par
  setattr(Collection, par.name,
    property(
      fget=lambda x : Collection.metaget(x, par),
      fset=lambda x, y : Collection.metaset(x,y, par))
</snippet></ROW><ROW><id>440432</id><snippet>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; ts = Timer("s.decode('utf-8')", "s = 'ééé'")
&gt;&gt;&gt; ts.timeit()
8.9185450077056885
&gt;&gt;&gt; tu = Timer("unicode(s, 'utf-8')", "s = 'ééé'") 
&gt;&gt;&gt; tu.timeit()
2.7656929492950439
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>440432</id><snippet>unicode()</snippet></ROW><ROW><id>440562</id><snippet>def myKeyFunc( aString ):
    stuff, x, label = aString.partition(' x ')
    return label

aList.sort( key= myKeyFunc )
</snippet></ROW><ROW><id>440579</id><snippet>import win32com.client
from win32com.client import Dispatch

session = Dispatch('MAPI.session')
session.Logon ('Outlook') # this is profile name
inbox = session.Inbox
messages = session.Inbox.Messages 
message = inbox.Messages.GetFirst()

if(message):
    attachments = message.Attachments
    for i in range(attachments.Count):
        attachment = attachments.Item(i + 1) # yep, indexes are 1 based

        filename = "c:\\tmpfile" + str(i)
        attachment.WriteToFile(FileName=filename)
session.Logoff()
</snippet></ROW><ROW><id>440687</id><snippet>for evoNode in node.getElementsByTagName('evolution'):
  evoName      = getText(evoNode.getElementsByTagName("type")[0].childNodes)
  evoId      = getText(evoNode.getElementsByTagName("typeid")[0].childNodes)
  evoLevel   = getText(evoNode.getElementsByTagName("level")[0].childNodes)
  evoCost      = getText(evoNode.getElementsByTagName("costperlevel")[0].childNodes)

  temporaryEvo = Evolutions(evoName, evoId, evoLevel, evoCost)
  evolutionList.append(temporaryEvo)

  # Or you can go with the 1 liner
  evolutionList.append(Evolutions(evoName, evoId, evoLevel, evoCost))
</snippet></ROW><ROW><id>440970</id><snippet>make install</snippet></ROW><ROW><id>440970</id><snippet>* Note: not installed as 'python'.
* Use 'make fullinstall' to install as 'python'.
* However, 'make fullinstall' is discouraged,
* as it will clobber your Python 2.x installation.
</snippet></ROW><ROW><id>440970</id><snippet>configure --prefix=/usr/local/py3</snippet></ROW><ROW><id>441152</id><snippet>from datetime import date, timedelta

d=date.today()-timedelta(days=days_to_subtract)
</snippet></ROW><ROW><id>441195</id><snippet>CREATE TABLE orders (
  person_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL DEFAULT 1,
  PRIMARY KEY (person_id, product_id),
  FOREIGN KEY (person_id) REFERENCES persons(person_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);
</snippet></ROW><ROW><id>441195</id><snippet>products</snippet></ROW><ROW><id>441195</id><snippet>persons</snippet></ROW><ROW><id>441446</id><snippet>with</snippet></ROW><ROW><id>441446</id><snippet>with</snippet></ROW><ROW><id>441446</id><snippet>with open("myfile.csv") as f:
    for row in csv.reader(f):
        # process row
</snippet></ROW><ROW><id>441446</id><snippet>with</snippet></ROW><ROW><id>441446</id><snippet>import contextlib
</snippet></ROW><ROW><id>441446</id><snippet>contextmanager(func)
    @contextmanager decorator.
</snippet></ROW><ROW><id>441446</id><snippet>    @contextmanager
    def some_generator(&lt;arguments&gt;):
        &lt;setup&gt;
        try:
            yield &lt;value&gt;
        finally:
            &lt;cleanup&gt;
</snippet></ROW><ROW><id>441446</id><snippet>    with some_generator(&lt;arguments&gt;) as &lt;variable&gt;:
        &lt;body&gt;
</snippet></ROW><ROW><id>441446</id><snippet>    &lt;setup&gt;
    try:
        &lt;variable&gt; = &lt;value&gt;
        &lt;body&gt;
    finally:
        &lt;cleanup&gt;
</snippet></ROW><ROW><id>441704</id><snippet>virtualenv</snippet></ROW><ROW><id>441747</id><snippet>pdf.pages</snippet></ROW><ROW><id>441747</id><snippet>pdf.pages[0]['/MYOBJECT']</snippet></ROW><ROW><id>441747</id><snippet>help</snippet></ROW><ROW><id>441747</id><snippet>dir</snippet></ROW><ROW><id>441747</id><snippet>pdf.resolvedObjects[0][558]['/Resources']['/Properties']['/MC0']['/MYOBJECT']</snippet></ROW><ROW><id>441747</id><snippet>import types
import pyPdf
pdf = pyPdf.PdfFileReader(open('file.pdf'))
pages = list(pdf.pages)

def findInDict(needle,haystack):
    for key in haystack.keys():
        try:
            value = haystack[key]
        except:
            continue
        if key == needle:
            return value
        if type(value) == types.DictType or isinstance(value,pyPdf.generic.DictionaryObject):  
            x = findInDict(needle,value)
            if x is not None:
                return x

answer = findInDict('/MYOBJECT',pdf.resolvedObjects).getData()
</snippet></ROW><ROW><id>442358</id><snippet>try:
    something()
except Exception as e:
    send_somewhere(traceback.format_exception(*sys.exc_info()))
    raise # reraises the exception
</snippet></ROW><ROW><id>442358</id><snippet>as</snippet></ROW><ROW><id>442358</id><snippet>except Exception, e:
</snippet></ROW><ROW><id>442467</id><snippet>os.getenv("PWD")
</snippet></ROW><ROW><id>442467</id><snippet>PWD</snippet></ROW><ROW><id>442467</id><snippet>cd</snippet></ROW><ROW><id>442467</id><snippet>cd -P</snippet></ROW><ROW><id>442467</id><snippet>man cd</snippet></ROW><ROW><id>442467</id><snippet>os.chdir</snippet></ROW><ROW><id>442467</id><snippet>/tmp/foo/kiwi</snippet></ROW><ROW><id>442669</id><snippet>result = numpy.dot(matrix, base)
</snippet></ROW><ROW><id>442669</id><snippet>result = numpy.dot(matrix, base).reshape((5,1))
</snippet></ROW><ROW><id>443080</id><snippet>proc.stdin.flush()</snippet></ROW><ROW><id>443080</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>443331</id><snippet>columns = ['column1', 'column2', 'column3', 'column4', 'column5']
results = statement.executeQuery("select %s from %s where column_id = '%s'" % (",".join(columns), table, id))
</snippet></ROW><ROW><id>443845</id><snippet>evoNode.getElementsByTagName("count")</snippet></ROW><ROW><id>443845</id><snippet>counts = evoNode.getElementsByTagName("count")
if counts:
    unitCount = getText(counts[0].childNodes)
</snippet></ROW><ROW><id>443845</id><snippet>unitNode</snippet></ROW><ROW><id>443845</id><snippet>evoNode</snippet></ROW><ROW><id>443990</id><snippet>&gt;&gt;&gt; s='000000000000484240FA063DE5D0B744ADBED63A81FAEA390000C8428640A43D5005BD44'
&gt;&gt;&gt; s.decode('hex')
'\x00\x00\x00\x00\x00\x00HB@\xfa\x06=\xe5\xd0\xb7D\xad\xbe\xd6:\x81\xfa\xea9\x00\x00\xc8B\x86@\xa4=P\x05\xbdD'
</snippet></ROW><ROW><id>444073</id><snippet>print([obj.attr for obj in my_list_of_objs])
</snippet></ROW><ROW><id>444073</id><snippet>attr</snippet></ROW><ROW><id>444073</id><snippet>my_list_of_objs</snippet></ROW><ROW><id>444073</id><snippet>__str__()</snippet></ROW><ROW><id>444073</id><snippet>class evolutions:
    def __str__(self):
        # return string representation of self

print(my_list_of_objs)  # each object is now printed out according to its __str__() method
</snippet></ROW><ROW><id>444396</id><snippet>__file__</snippet></ROW><ROW><id>444396</id><snippet>print "I'm inside Python file %s" % __file__
</snippet></ROW><ROW><id>444610</id><snippet>struct</snippet></ROW><ROW><id>444610</id><snippet>&gt;&gt;&gt; struct.unpack("&lt;L", "y\xcc\xa6\xbb")[0]
3148270713L
</snippet></ROW><ROW><id>444624</id><snippet>import db # assume this is your db module

class Class(object):
    def __init__(self):
        self.id = None
        self.name = None

    def get_by_id(self, id):
        records = db.execute('select * from table where id=%s' % str(id))
        if records:
            self.id = records[0]['id']
            self.name = records[0]['name']

    def save(self):
        db.execute('update table set name=%s where id=%s' % (self.name, str(self.id)))
</snippet></ROW><ROW><id>445674</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

# Grab your html
html  = urllib2.urlopen("http://www.google.com").read()

# Create a soup object
soup  = BeautifulSoup(html)

# Find all the spans, even if they're malformed
spans = soup.findAll("span")

# Remove all the spans from the soup object
[span.extract() for span in spans]

# Dump your new HTML to stdout.
print soup
</snippet></ROW><ROW><id>445961</id><snippet>makepy.py</snippet></ROW><ROW><id>445961</id><snippet>&gt; from win32com.client import Dispatch
&gt; excel = Dispatch("Excel.Application")
&gt; wb = excel.Workbooks.Append()
&gt; range = wb.Sheets[0].Range("A1")
&gt; range.[Press Tab]
range.Activate                 range.Merge
range.AddComment               range.NavigateArrow
range.AdvancedFilter           range.NoteText
...
range.GetOffset                range.__repr__
range.GetResize                range.__setattr__
range.GetValue                 range.__str__
range.Get_Default              range.__unicode__
range.GoalSeek                 range._get_good_object_
range.Group                    range._get_good_single_object_
range.Insert                   range._oleobj_
range.InsertIndent             range._prop_map_get_
range.Item                     range._prop_map_put_
range.Justify                  range.coclass_clsid
range.ListNames                range.__class__
&gt; range.Value = 32
...
</snippet></ROW><ROW><id>446061</id><snippet>eval</snippet></ROW><ROW><id>446061</id><snippet>try:
  eval("1 if True else 2")
except SyntaxError:
  # doesn't have ternary
</snippet></ROW><ROW><id>446061</id><snippet>with</snippet></ROW><ROW><id>446061</id><snippet>from __future__ import with_statement </snippet></ROW><ROW><id>446061</id><snippet>.py</snippet></ROW><ROW><id>446061</id><snippet>__init__.py</snippet></ROW><ROW><id>446061</id><snippet># __init__.py

# Check compatibility
try:
  eval("1 if True else 2")
except SyntaxError:
  raise ImportError("requires ternary support")

# import from another module
from impl import *
</snippet></ROW><ROW><id>446210</id><snippet>darwin
</snippet></ROW><ROW><id>446210</id><snippet>linux2
</snippet></ROW><ROW><id>446210</id><snippet>win32
</snippet></ROW><ROW><id>446291</id><snippet>&gt;&gt;&gt; import unicodedata    
&gt;&gt;&gt; print unicodedata.normalize("NFC",u"c\u0327")
ç
</snippet></ROW><ROW><id>447869</id><snippet>import code

class EmbeddedConsole(code.InteractiveConsole):
    def start(self):
    	try:
    		self.interact("Debug console starting...")
    	except:
    		print("Debug console closing...")

def print_names():
    print(adam)
    print(bob)

adam = "I am Adam"
bob = "I am Bob"

print_names()
console = EmbeddedConsole(locals())
console.start()
print_names()
</snippet></ROW><ROW><id>447991</id><snippet>MEDIA_ROOT = 'C:/Server/Projects/project_name/static/'
MEDIA_URL = '/static/'
ADMIN_MEDIA_PREFIX = '/media/'
</snippet></ROW><ROW><id>447991</id><snippet>from django.conf import settings
...
if settings.DEBUG:
    urlpatterns += patterns('',
        (r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),
    )
</snippet></ROW><ROW><id>447991</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/static/css/style.css" /&gt;
</snippet></ROW><ROW><id>447991</id><snippet>"C:/Server/Projects/project_name/static/css/style.css"
</snippet></ROW><ROW><id>448026</id><snippet>if m = re.match('foo (\w+) bar (\d+)', line):
  # do stuff with m.group(1) and m.group(2)
elif m = re.match('baz whoo_(\d+)', line):
  # do stuff with m.group(1)
elif ...
</snippet></ROW><ROW><id>448026</id><snippet>m = None
def assign_m(x):
  m = x
  return x

if assign_m(re.match('foo (\w+) bar (\d+)', line)):
  # do stuff with m.group(1) and m.group(2)
elif assign_m(re.match('baz whoo_(\d+)', line)):
  # do stuff with m.group(1)
elif ...
</snippet></ROW><ROW><id>448026</id><snippet>m</snippet></ROW><ROW><id>448026</id><snippet># per Brian's suggestion, a wrapper that is stateful
class m_(object):
  def match(self, *args):
    self.inner_ = re.match(*args)
    return self.inner_
  def group(self, *args):
    return self.inner_.group(*args)
m = m_()

# now 'm' is a stateful regex
if m.match('foo (\w+) bar (\d+)', line):
  # do stuff with m.group(1) and m.group(2)
elif m.match('baz whoo_(\d+)', line):
  # do stuff with m.group(1)
elif ...
</snippet></ROW><ROW><id>448026</id><snippet>else</snippet></ROW><ROW><id>448026</id><snippet>def find_the_right_match():
  # now 'm' is a stateful regex
  m = re.match('foo (\w+) bar (\d+)', line)
  if m:
    # do stuff with m.group(1) and m.group(2)
    return # &lt;== exit nested function only
  m = re.match('baz whoo_(\d+)', line)
  if m:
    # do stuff with m.group(1)
    return

find_the_right_match()
</snippet></ROW><ROW><id>448026</id><snippet>def cond_with(*phrases):
  """for each 2-tuple, invokes first item.  the first pair where
  the first item returns logical true, result is passed to second
  function in pair.  Like an if-elif-elif.. chain"""
  for (cond_lambda, then_lambda) in phrases:
    c = cond_lambda()
    if c:
      return then_lambda(c) 
  return None


cond_with( 
  ((lambda: re.match('foo (\w+) bar (\d+)', line)), 
      (lambda m: 
          ... # do stuff with m.group(1) and m.group(2)
          )),
  ((lambda: re.match('baz whoo_(\d+)', line)),
      (lambda m:
          ... # do stuff with m.group(1)
          )),
  ...)
</snippet></ROW><ROW><id>448065</id><snippet>class Agent(Thread):
    mylock = Lock()
    def write_result(self):
        self.mylock.acquire()
        try:
            ...
        finally:
            self.mylock.release()
</snippet></ROW><ROW><id>448065</id><snippet>class Agent(Thread):
    mylock = Lock()
    def write_result(self):
        with self.mylock:
            ...
</snippet></ROW><ROW><id>448065</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>448279</id><snippet>__init__.py</snippet></ROW><ROW><id>448279</id><snippet>__init__.py</snippet></ROW><ROW><id>448279</id><snippet>__all__</snippet></ROW><ROW><id>448901</id><snippet>#!/usr/bin/python                   #on windows change to your path to the python exe

print "Content-Type: text/html"     # HTML is following
print                               # blank line, end of headers
print "&lt;TITLE&gt;CGI script output&lt;/TITLE&gt;"
print "&lt;H1&gt;This is my first CGI script&lt;/H1&gt;"
print "Hello, world!"
</snippet></ROW><ROW><id>449281</id><snippet>decode</snippet></ROW><ROW><id>449281</id><snippet>unicode().decode()</snippet></ROW><ROW><id>449281</id><snippet>s</snippet></ROW><ROW><id>449281</id><snippet>&gt;&gt;&gt; s = u'ö'
&gt;&gt;&gt; s.decode()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0:
ordinal not in range(128)

&gt;&gt;&gt; s.encode('ascii')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 0:
ordinal not in range(128)
</snippet></ROW><ROW><id>449281</id><snippet>str().encode()</snippet></ROW><ROW><id>449281</id><snippet>s</snippet></ROW><ROW><id>449281</id><snippet>&gt;&gt;&gt; s = 'ö'
&gt;&gt;&gt; s.decode('utf-8')
u'\xf6'
&gt;&gt;&gt; s.encode()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0:
ordinal not in range(128)
</snippet></ROW><ROW><id>449281</id><snippet>str().encode()</snippet></ROW><ROW><id>449281</id><snippet>&gt;&gt;&gt; s.encode('zip')
'x\x9c;\xbc\r\x00\x02&gt;\x01z'
</snippet></ROW><ROW><id>449281</id><snippet>byte</snippet></ROW><ROW><id>449281</id><snippet>string</snippet></ROW><ROW><id>449408</id><snippet>import pyPdf                                                                
pdf = pyPdf.PdfFileReader(open("file.pdf"))
pdf.decrypt("password")
</snippet></ROW><ROW><id>450097</id><snippet>mod_python</snippet></ROW><ROW><id>450097</id><snippet>mod_python</snippet></ROW><ROW><id>450097</id><snippet>mod_php</snippet></ROW><ROW><id>450097</id><snippet>mod_wsgi</snippet></ROW><ROW><id>450097</id><snippet>mod_wsgi</snippet></ROW><ROW><id>450097</id><snippet>import cherrypy

class HelloWorld(object):
    def index(self):
        return "Hello World!"
    index.exposed = True

application = HelloWorld()
if __name__ == '__main__':
    cherrypy.engine.start()
    cherrypy.engine.block()
</snippet></ROW><ROW><id>450097</id><snippet>mod_wsgi</snippet></ROW><ROW><id>450329</id><snippet>subprocess</snippet></ROW><ROW><id>450329</id><snippet>os.system</snippet></ROW><ROW><id>450702</id><snippet>toolbar.SetToolBitmapSize((24, 24))
</snippet></ROW><ROW><id>450702</id><snippet>wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, (24, 24))
</snippet></ROW><ROW><id>450702</id><snippet># Define the size of the icons and buttons
iconSize = (24, 24)

# Set the size of the buttons
toolbar.SetToolBitmapSize(iconSize)

# Add some button
saveIcon = wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR, iconSize)
toolBar.AddSimpleTool(1, saveIcon, "Save", "Save current file")
</snippet></ROW><ROW><id>450895</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>451700</id><snippet>domains = [matching['domain'] for matching in matchings if matching['id'] == the_id]
</snippet></ROW><ROW><id>451700</id><snippet>resulting_list = [item_to_return for item in items if condition]
</snippet></ROW><ROW><id>451700</id><snippet>domains = []
for matching in matchings:
    if matching['id'] == the_id:
        domains.append(matching['domain'])
</snippet></ROW><ROW><id>452028</id><snippet>B</snippet></ROW><ROW><id>452028</id><snippet>B</snippet></ROW><ROW><id>452028</id><snippet>method</snippet></ROW><ROW><id>452028</id><snippet>C</snippet></ROW><ROW><id>452143</id><snippet>re.match()</snippet></ROW><ROW><id>452143</id><snippet>dict</snippet></ROW><ROW><id>452143</id><snippet>def match(pattern, string, flags=0):
    return _compile(pattern, flags).match(string)

def _compile(*key):

    # Does cache check at top of function
    cachekey = (type(key[0]),) + key
    p = _cache.get(cachekey)
    if p is not None: return p

    # ...
    # Does actual compilation on cache miss
    # ...

    # Caches compiled regex
    if len(_cache) &gt;= _MAXCACHE:
        _cache.clear()
    _cache[cachekey] = p
    return p
</snippet></ROW><ROW><id>452302</id><snippet>cd</snippet></ROW><ROW><id>452302</id><snippet>python setup.py install</snippet></ROW><ROW><id>452302</id><snippet>easy_install</snippet></ROW><ROW><id>452302</id><snippet>easy_install BeautifulSoup4
# for older v3:
# easy_install BeautifulSoup
</snippet></ROW><ROW><id>452302</id><snippet>easy_install</snippet></ROW><ROW><id>452302</id><snippet>easy_install</snippet></ROW><ROW><id>452302</id><snippet>easy_install</snippet></ROW><ROW><id>452310</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt;
&gt;&gt;&gt; repr(date.today())        # calls date.today().__repr__()
'datetime.date(2009, 1, 16)'
&gt;&gt;&gt; eval(_)                   # _ is the output of the last command
datetime.date(2009, 1, 16)
</snippet></ROW><ROW><id>452310</id><snippet>&lt;...some useful description...&gt;</snippet></ROW><ROW><id>452438</id><snippet>$ python
&gt;&gt;&gt; import modulename
</snippet></ROW><ROW><id>452639</id><snippet>def square(x): return lambda : x*x
listOfLambdas = [square(i) for i in [1,2,3,4,5]]
for f in listOfLambdas: print f()
</snippet></ROW><ROW><id>452639</id><snippet>1
4
9
16
25
</snippet></ROW><ROW><id>452896</id><snippet>HTMLParser.HTMLParseError</snippet></ROW><ROW><id>452896</id><snippet>import HTMLParser,BeautifulSoup
try:
    soup = BeautifulSoup.BeautifulSoup(raw_html)
    for a in soup.findAll('a'):
        href = a.['href']
        ....
except HTMLParser.HTMLParseError:
    print "failed to parse",url
</snippet></ROW><ROW><id>452896</id><snippet>text/html</snippet></ROW><ROW><id>452896</id><snippet>application/xml+xhtml</snippet></ROW><ROW><id>452981</id><snippet>def get_class( kls ):
    parts = kls.split('.')
    module = ".".join(parts[:-1])
    m = __import__( module )
    for comp in parts[1:]:
        m = getattr(m, comp)            
    return m
</snippet></ROW><ROW><id>452981</id><snippet>&gt;&gt;&gt; D = get_class("datetime.datetime")
&gt;&gt;&gt; D
&lt;type 'datetime.datetime'&gt;
&gt;&gt;&gt; D.now()
datetime.datetime(2009, 1, 17, 2, 15, 58, 883000)
&gt;&gt;&gt; a = D( 2010, 4, 22 )
&gt;&gt;&gt; a
datetime.datetime(2010, 4, 22, 0, 0)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>452981</id><snippet>__import__</snippet></ROW><ROW><id>452981</id><snippet>m = __import__( module )
</snippet></ROW><ROW><id>452981</id><snippet>m</snippet></ROW><ROW><id>452981</id><snippet>foo.baz</snippet></ROW><ROW><id>452981</id><snippet>m</snippet></ROW><ROW><id>452981</id><snippet>foo</snippet></ROW><ROW><id>452981</id><snippet>foo.baz</snippet></ROW><ROW><id>452981</id><snippet>getattr( m, 'baz' )</snippet></ROW><ROW><id>452981</id><snippet>gettatr</snippet></ROW><ROW><id>452981</id><snippet>foo.baz.bar.Model</snippet></ROW><ROW><id>452981</id><snippet>m = __import__( "foo.baz.bar" ) #m is package foo
m = getattr( m, "baz" ) #m is package baz
m = getattr( m, "bar" ) #m is module bar
m = getattr( m, "Model" ) #m is class Model
</snippet></ROW><ROW><id>452981</id><snippet>for comp in parts[1:]:
    m = getattr(m, comp)    
</snippet></ROW><ROW><id>452981</id><snippet>m</snippet></ROW><ROW><id>452981</id><snippet>m</snippet></ROW><ROW><id>452981</id><snippet>a = m() #instantiate a new instance of the class    
b = m( arg1, arg2 ) # pass arguments to the constructor
</snippet></ROW><ROW><id>453785</id><snippet>import string
d = dict.fromkeys(string.ascii_lowercase, 0)
</snippet></ROW><ROW><id>453819</id><snippet>python</snippet></ROW><ROW><id>453837</id><snippet>$ screen -S ipython
$ ipython
</snippet></ROW><ROW><id>453837</id><snippet>autocmd FileType python map F5 :w&lt;CR&gt;:!screen -x ipython -X stuff $'\%run %:p:h\n'&lt;CR&gt;&lt;CR&gt;
</snippet></ROW><ROW><id>453837</id><snippet>autocmd FileType python map &lt;F5&gt; :w&lt;CR&gt;:!screen -x ipython -X stuff $'\%reset\ny\n\%cd %:p:h\n\%run %:t\n'&lt;CR&gt;&lt;CR&gt;
</snippet></ROW><ROW><id>454023</id><snippet>$ python
Python 2.5.3 (r253:67856, Dec 19 2008, 16:52:52) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>454380</id><snippet># The _artists method can be used from any other method
def _artists(self, action, artist_id):
    artists = session.query(model.Artist).all()
    return dict(artists=artists)

@expose("json")
#@identity.require(identity.non_anonymous())
# error handlers, etc.
def artists(self, action="view", artist_id=None):
    return self._artists(action=action, artist_id=artist_id)
</snippet></ROW><ROW><id>454578</id><snippet>for i in range(0,150,6):
     print i
</snippet></ROW><ROW><id>454589</id><snippet>import re, mmap

with open('/var/log/error.log', 'r+') as f:
  data = mmap.mmap(f.fileno(), 0)
  mo = re.search('error: (.*)', data)
  if mo:
    print "found error", mo.group(1)
</snippet></ROW><ROW><id>454809</id><snippet>\n</snippet></ROW><ROW><id>454809</id><snippet>os.linesep</snippet></ROW><ROW><id>455087</id><snippet>__dict__</snippet></ROW><ROW><id>455087</id><snippet>dict()</snippet></ROW><ROW><id>455087</id><snippet>&gt;&gt;&gt; class A(object) :
...     def __init__(self) :
...             self.__dict__['_odict'] = odict()
...     def __getattr__(self, value) :
...             return self.__dict__['_odict'][value]
...     def __setattr__(self, key, value) :
...             self.__dict__['_odict'][key] = value
... 
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a
&lt;__main__.A object at 0xb7bce34c&gt;
&gt;&gt;&gt; a.x = 1
&gt;&gt;&gt; a.x
1
&gt;&gt;&gt; a.y = 2
&gt;&gt;&gt; a.y
2
&gt;&gt;&gt; a.odict
odict.odict([('x', 1), ('y', 2)])
</snippet></ROW><ROW><id>455267</id><snippet>class MyFramework(object):
    """A bare MyFramework, I only hold a person's name
    """
    _addons= {}
    @staticmethod
    def addAddon(name, addon):
        MyFramework._addons[name]= addon

    def __init__(self, person):
        self.person= person
        for name, addon in MyFramework._addons.items():
            setattr(self, name, addon(self))
</snippet></ROW><ROW><id>455267</id><snippet>class Helloer(object):
    def __init__(self, owner):
        self.owner= owner
    def hello(self):
        print 'hello '+self.owner.person

import myframework
myframework.MyFramework.addAddon('helloer', Helloer)
</snippet></ROW><ROW><id>455556</id><snippet>try-except</snippet></ROW><ROW><id>455556</id><snippet>except</snippet></ROW><ROW><id>455576</id><snippet>self.assertRaises(SystemExit, sut.main)
</snippet></ROW><ROW><id>456089</id><snippet>A = '1, 2,,3,4  '
B = [int(x) for x in A.split(',') if x.strip()]
</snippet></ROW><ROW><id>456491</id><snippet>__init__.py</snippet></ROW><ROW><id>456491</id><snippet>from Models.user import User
</snippet></ROW><ROW><id>456491</id><snippet>__init__.py</snippet></ROW><ROW><id>456668</id><snippet>urlretrieve(url, filename=None, reporthook=None, data=None)</snippet></ROW><ROW><id>456668</id><snippet>urllib</snippet></ROW><ROW><id>456668</id><snippet>reporthook</snippet></ROW><ROW><id>456668</id><snippet>reporthook</snippet></ROW><ROW><id>456668</id><snippet>reporthook</snippet></ROW><ROW><id>456668</id><snippet>"""Rate limiters with shared token bucket."""

import os
import sys
import threading
import time
import urllib
import urlparse

class TokenBucket(object):
    """An implementation of the token bucket algorithm.
    source: http://code.activestate.com/recipes/511490/

    &gt;&gt;&gt; bucket = TokenBucket(80, 0.5)
    &gt;&gt;&gt; print bucket.consume(10)
    True
    &gt;&gt;&gt; print bucket.consume(90)
    False
    """
    def __init__(self, tokens, fill_rate):
        """tokens is the total tokens in the bucket. fill_rate is the
        rate in tokens/second that the bucket will be refilled."""
        self.capacity = float(tokens)
        self._tokens = float(tokens)
        self.fill_rate = float(fill_rate)
        self.timestamp = time.time()
        self.lock = threading.RLock()

    def consume(self, tokens):
        """Consume tokens from the bucket. Returns 0 if there were
        sufficient tokens, otherwise the expected time until enough
        tokens become available."""
        self.lock.acquire()
        tokens = max(tokens,self.tokens)
        expected_time = (tokens - self.tokens) / self.fill_rate
        if expected_time &lt;= 0:
            self._tokens -= tokens
        self.lock.release()
        return max(0,expected_time)

    @property
    def tokens(self):
        self.lock.acquire()
        if self._tokens &lt; self.capacity:
            now = time.time()
            delta = self.fill_rate * (now - self.timestamp)
            self._tokens = min(self.capacity, self._tokens + delta)
            self.timestamp = now
        value = self._tokens
        self.lock.release()
        return value

class RateLimit(object):
    """Rate limit a url fetch.
    source: http://mail.python.org/pipermail/python-list/2008-January/472859.html
    (but mostly rewritten)
    """
    def __init__(self, bucket, filename):
        self.bucket = bucket
        self.last_update = 0
        self.last_downloaded_kb = 0

        self.filename = filename
        self.avg_rate = None

    def __call__(self, block_count, block_size, total_size):
        total_kb = total_size / 1024.

        downloaded_kb = (block_count * block_size) / 1024.
        just_downloaded = downloaded_kb - self.last_downloaded_kb
        self.last_downloaded_kb = downloaded_kb

        predicted_size = block_size/1024.

        wait_time = self.bucket.consume(predicted_size)
        while wait_time &gt; 0:
            time.sleep(wait_time)
            wait_time = self.bucket.consume(predicted_size)

        now = time.time()
        delta = now - self.last_update
        if self.last_update != 0:
            if delta &gt; 0:
                rate = just_downloaded / delta
                if self.avg_rate is not None:
                    rate = 0.9 * self.avg_rate + 0.1 * rate
                self.avg_rate = rate
            else:
                rate = self.avg_rate or 0.
            print "%20s: %4.1f%%, %5.1f KiB/s, %.1f/%.1f KiB" % (
                    self.filename, 100. * downloaded_kb / total_kb,
                    rate, downloaded_kb, total_kb,
                )
        self.last_update = now


def main():
    """Fetch the contents of urls"""
    if len(sys.argv) &lt; 4:
        print 'Syntax: %s rate url1 url2 ...' % sys.argv[0]
        raise SystemExit(1)
    rate_limit  = float(sys.argv[1])
    urls = sys.argv[2:]
    bucket = TokenBucket(10*rate_limit, rate_limit)

    print "rate limit = %.1f" % (rate_limit,)

    threads = []
    for url in urls:
        path = urlparse.urlparse(url,'http')[2]
        filename = os.path.basename(path)
        print 'Downloading "%s" to "%s"...' % (url,filename)
        rate_limiter = RateLimit(bucket, filename)
        t = threading.Thread(
            target=urllib.urlretrieve,
            args=(url, filename, rate_limiter))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    print 'All downloads finished'

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>456681</id><snippet>def fun_name(*args):
  if len(args) != 2:
    raise TypeError('Two arguments required')
</snippet></ROW><ROW><id>457057</id><snippet>IN</snippet></ROW><ROW><id>457057</id><snippet>X=Y</snippet></ROW><ROW><id>457057</id><snippet>OR</snippet></ROW><ROW><id>457242</id><snippet>&gt;&gt;&gt; seq = '012345'
&gt;&gt;&gt; swapped_pairs = zip(seq[1::2], seq[::2])
&gt;&gt;&gt; ''.join(item for pair in swapped_pairs for item in pair)
'103254'
</snippet></ROW><ROW><id>458069</id><snippet># from: http://www.cs.princeton.edu/introcs/21function/ErrorFunction.java.html
# Implements the Gauss error function.
#   erf(z) = 2 / sqrt(pi) * integral(exp(-t*t), t = 0..z)
#
# fractional error in math formula less than 1.2 * 10 ^ -7.
# although subject to catastrophic cancellation when z in very close to 0
# from Chebyshev fitting formula for erf(z) from Numerical Recipes, 6.2
def erf(z):
	t = 1.0 / (1.0 + 0.5 * abs(z))
    	# use Horner's method
        ans = 1 - t * math.exp( -z*z -  1.26551223 +
        					t * ( 1.00002368 +
        					t * ( 0.37409196 + 
        					t * ( 0.09678418 + 
        					t * (-0.18628806 + 
        					t * ( 0.27886807 + 
        					t * (-1.13520398 + 
        					t * ( 1.48851587 + 
        					t * (-0.82215223 + 
        					t * ( 0.17087277))))))))))
        if z &gt;= 0.0:
        	return ans
        else:
        	return -ans
</snippet></ROW><ROW><id>458295</id><snippet>matplotlib</snippet></ROW><ROW><id>458295</id><snippet>draw()</snippet></ROW><ROW><id>458295</id><snippet>from matplotlib import plot, draw, show
plot([1,2,3])
draw()
print 'continue computation'

# at the end call show to ensure window won't close.
show()
</snippet></ROW><ROW><id>458295</id><snippet>from matplotlib import plot, ion, show
ion() # enables interactive mode
plot([1,2,3]) # result shows immediatelly (implicit draw())

print 'continue computation'

# at the end call show to ensure window won't close.
show()
</snippet></ROW><ROW><id>458339</id><snippet>#!python
"""Bootstrap setuptools installation




If you want to use setuptools in your package's setup.py, just include this
file in the same directory with it, and add this to the top of your setup.py::




    from ez_setup import use_setuptools
    use_setuptools()




If you want to require a specific version of setuptools, set a download
mirror, or use an alternate download directory, you can do so by supplying
the appropriate options to ``use_setuptools()``.




This file can also be run as a script to install or upgrade setuptools.
"""
import sys
DEFAULT_VERSION = "0.6c11"
DEFAULT_URL     = "http://pypi.python.org/packages/%s/s/setuptools/" % sys.version[:3]




md5_data = {
    'setuptools-0.6b1-py2.3.egg': '8822caf901250d848b996b7f25c6e6ca',
    'setuptools-0.6b1-py2.4.egg': 'b79a8a403e4502fbb85ee3f1941735cb',
    'setuptools-0.6b2-py2.3.egg': '5657759d8a6d8fc44070a9d07272d99b',
    'setuptools-0.6b2-py2.4.egg': '4996a8d169d2be661fa32a6e52e4f82a',
    'setuptools-0.6b3-py2.3.egg': 'bb31c0fc7399a63579975cad9f5a0618',
    'setuptools-0.6b3-py2.4.egg': '38a8c6b3d6ecd22247f179f7da669fac',
    'setuptools-0.6b4-py2.3.egg': '62045a24ed4e1ebc77fe039aa4e6f7e5',
    'setuptools-0.6b4-py2.4.egg': '4cb2a185d228dacffb2d17f103b3b1c4',
    'setuptools-0.6c1-py2.3.egg': 'b3f2b5539d65cb7f74ad79127f1a908c',
    'setuptools-0.6c1-py2.4.egg': 'b45adeda0667d2d2ffe14009364f2a4b',
    'setuptools-0.6c10-py2.3.egg': 'ce1e2ab5d3a0256456d9fc13800a7090',
    'setuptools-0.6c10-py2.4.egg': '57d6d9d6e9b80772c59a53a8433a5dd4',
    'setuptools-0.6c10-py2.5.egg': 'de46ac8b1c97c895572e5e8596aeb8c7',
    'setuptools-0.6c10-py2.6.egg': '58ea40aef06da02ce641495523a0b7f5',
    'setuptools-0.6c11-py2.3.egg': '2baeac6e13d414a9d28e7ba5b5a596de',
    'setuptools-0.6c11-py2.4.egg': 'bd639f9b0eac4c42497034dec2ec0c2b',
    'setuptools-0.6c11-py2.5.egg': '64c94f3bf7a72a13ec83e0b24f2749b2',
    'setuptools-0.6c11-py2.6.egg': 'bfa92100bd772d5a213eedd356d64086',
    'setuptools-0.6c2-py2.3.egg': 'f0064bf6aa2b7d0f3ba0b43f20817c27',
    'setuptools-0.6c2-py2.4.egg': '616192eec35f47e8ea16cd6a122b7277',
    'setuptools-0.6c3-py2.3.egg': 'f181fa125dfe85a259c9cd6f1d7b78fa',
    'setuptools-0.6c3-py2.4.egg': 'e0ed74682c998bfb73bf803a50e7b71e',
    'setuptools-0.6c3-py2.5.egg': 'abef16fdd61955514841c7c6bd98965e',
    'setuptools-0.6c4-py2.3.egg': 'b0b9131acab32022bfac7f44c5d7971f',
    'setuptools-0.6c4-py2.4.egg': '2a1f9656d4fbf3c97bf946c0a124e6e2',
    'setuptools-0.6c4-py2.5.egg': '8f5a052e32cdb9c72bcf4b5526f28afc',
    'setuptools-0.6c5-py2.3.egg': 'ee9fd80965da04f2f3e6b3576e9d8167',
    'setuptools-0.6c5-py2.4.egg': 'afe2adf1c01701ee841761f5bcd8aa64',
    'setuptools-0.6c5-py2.5.egg': 'a8d3f61494ccaa8714dfed37bccd3d5d',
    'setuptools-0.6c6-py2.3.egg': '35686b78116a668847237b69d549ec20',
    'setuptools-0.6c6-py2.4.egg': '3c56af57be3225019260a644430065ab',
    'setuptools-0.6c6-py2.5.egg': 'b2f8a7520709a5b34f80946de5f02f53',
    'setuptools-0.6c7-py2.3.egg': '209fdf9adc3a615e5115b725658e13e2',
    'setuptools-0.6c7-py2.4.egg': '5a8f954807d46a0fb67cf1f26c55a82e',
    'setuptools-0.6c7-py2.5.egg': '45d2ad28f9750e7434111fde831e8372',
    'setuptools-0.6c8-py2.3.egg': '50759d29b349db8cfd807ba8303f1902',
    'setuptools-0.6c8-py2.4.egg': 'cba38d74f7d483c06e9daa6070cce6de',
    'setuptools-0.6c8-py2.5.egg': '1721747ee329dc150590a58b3e1ac95b',
    'setuptools-0.6c9-py2.3.egg': 'a83c4020414807b496e4cfbe08507c03',
    'setuptools-0.6c9-py2.4.egg': '260a2be2e5388d66bdaee06abec6342a',
    'setuptools-0.6c9-py2.5.egg': 'fe67c3e5a17b12c0e7c541b7ea43a8e6',
    'setuptools-0.6c9-py2.6.egg': 'ca37b1ff16fa2ede6e19383e7b59245a',
}




import sys, os
try: from hashlib import md5
except ImportError: from md5 import md5




def _validate_md5(egg_name, data):
    if egg_name in md5_data:
        digest = md5(data).hexdigest()
        if digest != md5_data[egg_name]:
            print &gt;&gt;sys.stderr, (
                "md5 validation of %s failed!  (Possible download problem?)"
                % egg_name
            )
            sys.exit(2)
    return data




def use_setuptools(
    version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir,
    download_delay=15
):
    """Automatically find/download setuptools and make it available on sys.path




    `version` should be a valid setuptools version number that is available
    as an egg for download under the `download_base` URL (which should end with
    a '/').  `to_dir` is the directory where setuptools will be downloaded, if
    it is not already available.  If `download_delay` is specified, it should
    be the number of seconds that will be paused before initiating a download,
    should one be required.  If an older version of setuptools is installed,
    this routine will print a message to ``sys.stderr`` and raise SystemExit in
    an attempt to abort the calling script.
    """
    was_imported = 'pkg_resources' in sys.modules or 'setuptools' in sys.modules
    def do_download():
        egg = download_setuptools(version, download_base, to_dir, download_delay)
        sys.path.insert(0, egg)
        import setuptools; setuptools.bootstrap_install_from = egg
    try:
        import pkg_resources
    except ImportError:
        return do_download()       
    try:
        pkg_resources.require("setuptools&gt;="+version); return
    except pkg_resources.VersionConflict, e:
        if was_imported:
            print &gt;&gt;sys.stderr, (
            "The required version of setuptools (&gt;=%s) is not available, and\n"
            "can't be installed while this script is running. Please install\n"
            " a more recent version first, using 'easy_install -U setuptools'."
            "\n\n(Currently using %r)"
            ) % (version, e.args[0])
            sys.exit(2)
    except pkg_resources.DistributionNotFound:
        pass




    del pkg_resources, sys.modules['pkg_resources']    # reload ok
    return do_download()




def download_setuptools(
    version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir,
    delay = 15
):
    """Download setuptools from a specified location and return its filename




    `version` should be a valid setuptools version number that is available
    as an egg for download under the `download_base` URL (which should end
    with a '/'). `to_dir` is the directory where the egg will be downloaded.
    `delay` is the number of seconds to pause before an actual download attempt.
    """
    import urllib2, shutil
    egg_name = "setuptools-%s-py%s.egg" % (version,sys.version[:3])
    url = download_base + egg_name
    saveto = os.path.join(to_dir, egg_name)
    src = dst = None
    if not os.path.exists(saveto):  # Avoid repeated downloads
        try:
            from distutils import log
            if delay:
                log.warn("""
---------------------------------------------------------------------------
This script requires setuptools version %s to run (even to display
help).  I will attempt to download it for you (from
%s), but
you may need to enable firewall access for this script first.
I will start the download in %d seconds.




(Note: if this machine does not have network access, please obtain the file




   %s




and place it in this directory before rerunning this script.)
---------------------------------------------------------------------------""",
                    version, download_base, delay, url
                ); from time import sleep; sleep(delay)
            log.warn("Downloading %s", url)
            src = urllib2.urlopen(url)
            # Read/write all in one block, so we don't create a corrupt file
            # if the download is interrupted.
            data = _validate_md5(egg_name, src.read())
            dst = open(saveto,"wb"); dst.write(data)
        finally:
            if src: src.close()
            if dst: dst.close()
    return os.path.realpath(saveto)
















































































































































def main(argv, version=DEFAULT_VERSION):
    """Install or upgrade setuptools and EasyInstall"""
    try:
        import setuptools
    except ImportError:
        egg = None
        try:
            egg = download_setuptools(version, delay=0)
            sys.path.insert(0,egg)
            from setuptools.command.easy_install import main
            return main(list(argv)+[egg])   # we're done here
        finally:
            if egg and os.path.exists(egg):
                os.unlink(egg)
    else:
        if setuptools.__version__ == '0.0.1':
            print &gt;&gt;sys.stderr, (
            "You have an obsolete version of setuptools installed.  Please\n"
            "remove it from your system entirely before rerunning this script."
            )
            sys.exit(2)




    req = "setuptools&gt;="+version
    import pkg_resources
    try:
        pkg_resources.require(req)
    except pkg_resources.VersionConflict:
        try:
            from setuptools.command.easy_install import main
        except ImportError:
            from easy_install import main
        main(list(argv)+[download_setuptools(delay=0)])
        sys.exit(0) # try to force an exit
    else:
        if argv:
            from setuptools.command.easy_install import main
            main(argv)
        else:
            print "Setuptools version",version,"or greater has been installed."
            print '(Run "ez_setup.py -U setuptools" to reinstall or upgrade.)'




def update_md5(filenames):
    """Update our built-in md5 registry"""




    import re




    for name in filenames:
        base = os.path.basename(name)
        f = open(name,'rb')
        md5_data[base] = md5(f.read()).hexdigest()
        f.close()




    data = ["    %r: %r,\n" % it for it in md5_data.items()]
    data.sort()
    repl = "".join(data)




    import inspect
    srcfile = inspect.getsourcefile(sys.modules[__name__])
    f = open(srcfile, 'rb'); src = f.read(); f.close()




    match = re.search("\nmd5_data = {\n([^}]+)}", src)
    if not match:
        print &gt;&gt;sys.stderr, "Internal error!"
        sys.exit(2)

    src = src[:match.start(1)] + repl + src[match.end(1):]
    f = open(srcfile,'w')
    f.write(src)
    f.close()


if __name__=='__main__':
    if len(sys.argv)&gt;2 and sys.argv[1]=='--md5update':
        update_md5(sys.argv[2:])
    else:
        main(sys.argv[1:])
</snippet></ROW><ROW><id>459013</id><snippet>dummy_log=wx.LogNull()
</snippet></ROW><ROW><id>459013</id><snippet>dummy_log</snippet></ROW><ROW><id>459131</id><snippet>from Tkinter import *
root=Tk()
def task():
    print "hello"
    root.after(2000,task)  # reschedule event in 2 seconds

root.after(2000,task)
root.mainloop()
</snippet></ROW><ROW><id>459131</id><snippet>def after(self, ms, func=None, *args):
    """Call function once after given time.

    MS specifies the time in milliseconds. FUNC gives the
    function which shall be called. Additional parameters
    are given as parameters to the function call.  Return
    identifier to cancel scheduling with after_cancel."""
</snippet></ROW><ROW><id>459185</id><snippet>__version__</snippet></ROW><ROW><id>459185</id><snippet>version</snippet></ROW><ROW><id>459185</id><snippet>__version__</snippet></ROW><ROW><id>459185</id><snippet>__version__</snippet></ROW><ROW><id>459185</id><snippet>    __version__ = "$Revision: 63990 $"
    # $Source$
</snippet></ROW><ROW><id>459419</id><snippet>zipfile.write</snippet></ROW><ROW><id>459419</id><snippet>import zipfile
myZipFile = zipfile.ZipFile("zip.zip", "w" )
myZipFile.write("test.py", "dir\\test.py", zipfile.ZIP_DEFLATED )
</snippet></ROW><ROW><id>459419</id><snippet>test.py</snippet></ROW><ROW><id>459419</id><snippet>dir</snippet></ROW><ROW><id>459642</id><snippet>In [1]: import BeautifulSoup

In [2]: c = """&lt;HTML&gt;
   ...:     &lt;HEAD&gt;
   ...:         &lt;TITLE&gt;Title&lt;/TITLE&gt;
   ...:         &lt;HTTP-EQUIV="PRAGMA" CONTENT="NO-CACHE"&gt;
   ...:     &lt;/HEAD&gt;
   ...:     &lt;BODY&gt;
   ...:         ...
   ...:         ...
   ...:     &lt;/BODY&gt;
   ...: &lt;/HTML&gt;
   ...: """

In [3]: print BeautifulSoup.BeautifulSoup(c).prettify()
&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;
   Title
  &lt;/title&gt;
  &lt;http-equiv&gt;
  &lt;/http-equiv&gt;
 &lt;/head&gt;
 &lt;body&gt;
  ...
        ...
 &lt;/body&gt;
&lt;/html&gt;


In [4]:
</snippet></ROW><ROW><id>459692</id><snippet>use Data::Dumper;
local $Data::Dumper::Terse = 1;
my $str = Dumper({a =&gt; 1, b =&gt; 2, c =&gt; 3});
</snippet></ROW><ROW><id>459991</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup('&lt;p&gt;Blah blah blah &lt;a href="http://google.com"&gt;Google&lt;/a&gt;&lt;/p&gt;')
for a in soup.findAll('a')
  a['href'] = a['href'].replace("google", "mysite")

result = str(soup)
</snippet></ROW><ROW><id>460529</id><snippet>def spanningsets(items):
    if not items: return
    if len(items) == 1:
        yield [[items[-1]]]
    else:
        for cc in spanningsets(items[:-1]):
            yield cc + [[items[-1]]]
            for i in range(len(cc)):
                yield cc[:i] + [cc[i] + [items[-1]]] + cc[i+1:]

for sset in spanningsets([1, 2, 3, 4]):
    print ' '.join(map(str, sset))
</snippet></ROW><ROW><id>460529</id><snippet>[1] [2] [3] [4]
[1, 4] [2] [3]
[1] [2, 4] [3]
[1] [2] [3, 4]
[1, 3] [2] [4]
[1, 3, 4] [2]
[1, 3] [2, 4]
[1] [2, 3] [4]
[1, 4] [2, 3]
[1] [2, 3, 4]
[1, 2] [3] [4]
[1, 2, 4] [3]
[1, 2] [3, 4]
[1, 2, 3] [4]
[1, 2, 3, 4]
</snippet></ROW><ROW><id>460811</id><snippet>class CalcSomething( object ):
    def __init__( self ):
        self._cache= {}
    def __call__( self, a):
        if a not in self._cache: 
            self._cache[a] = self.reallyCalc(a)
        return self._cache[a]
    def reallyCalc( self, a ):
        return # a real answer
calcSomething= CalcSomething()
</snippet></ROW><ROW><id>462497</id><snippet>import dpkt, pcap
pc = pcap.pcap()
pc.setfilter('icmp')
for timestamp, packet in pc:
    print dpkt.ethernet.Ethernet(pkt)
</snippet></ROW><ROW><id>462497</id><snippet>Ethernet(src='\x00\x03G\xb2M\xe4', dst='\x00\x03G\x06h\x18', data=IP(src='\n\x00\x01\x1c',
dst='\n\x00\x01\x10', sum=39799, len=60, p=1, ttl=128, id=35102, data=ICMP(sum=24667,
type=8, data=Echo(id=512, seq=60160, data='abcdefghijklmnopqrstuvwabcdefghi'))))

Ethernet(src='\x00\x03G\x06h\x18', dst='\x00\x03G\xb2M\xe4', data=IP(src='\n\x00\x01\x10',
dst='\n\x00\x01\x1c', sum=43697, len=60, p=1, ttl=255, id=64227, data=ICMP(sum=26715,
data=Echo(id=512, seq=60160, data='abcdefghijklmnopqrstuvwabcdefghi'))))
</snippet></ROW><ROW><id>463081</id><snippet>sort()</snippet></ROW><ROW><id>463081</id><snippet>else</snippet></ROW><ROW><id>463081</id><snippet>if len(lst) &gt;= 4:             # Tuple w/ sort info first
    lines[n] = (lst[4], lines[n])
else:                         # Short lines to end
    lines[n] = (['\377'], lines[n])
</snippet></ROW><ROW><id>463081</id><snippet>['\377']</snippet></ROW><ROW><id>463081</id><snippet>sort_by_field(list_of_str, field_number, separator=' ', defaultvalue='\xFF')
    # decorates each value:
    for i, line in enumerate(list_of_str)):
        fields = line.split(separator)
        try:
             # places original line as second item:
            list_of_str[i] = (fields[field_number], line)
        except IndexError:
            list_of_str[i] = (defaultvalue, line)
    list_of_str.sort() # sorts list, in place
    # undecorates values:
    for i, group in enumerate(list_of_str))
        list_of_str[i] = group[1] # the second item is original line
</snippet></ROW><ROW><id>463382</id><snippet>soup.findAll()</snippet></ROW><ROW><id>463382</id><snippet>for t in  soup.findAll("table"):
    print t.encode('latin1')
</snippet></ROW><ROW><id>463382</id><snippet>t</snippet></ROW><ROW><id>463630</id><snippet>isinstance(n, int)
</snippet></ROW><ROW><id>463630</id><snippet>type(n) is int
</snippet></ROW><ROW><id>463630</id><snippet>return int(n) == n
</snippet></ROW><ROW><id>463630</id><snippet>int(3.0)==3.0</snippet></ROW><ROW><id>463852</id><snippet>CryptProtectData</snippet></ROW><ROW><id>463852</id><snippet>CryptUnprotectData</snippet></ROW><ROW><id>463904</id><snippet>main.py
setup.py
app/ -&gt;
    __init__.py
    package_a/ -&gt;
       __init__.py
       module_a.py
    package_b/ -&gt;
       __init__.py
       module_b.py
</snippet></ROW><ROW><id>463904</id><snippet>python main.py</snippet></ROW><ROW><id>463904</id><snippet>main.py</snippet></ROW><ROW><id>463904</id><snippet>import app.package_a.module_a</snippet></ROW><ROW><id>463904</id><snippet>module_a.py</snippet></ROW><ROW><id>463904</id><snippet>import app.package_b.module_b</snippet></ROW><ROW><id>463904</id><snippet>from app.package_a import module_a</snippet></ROW><ROW><id>463904</id><snippet>app</snippet></ROW><ROW><id>463904</id><snippet>main.py</snippet></ROW><ROW><id>463904</id><snippet>setup.py</snippet></ROW><ROW><id>463904</id><snippet>main.py</snippet></ROW><ROW><id>464038</id><snippet>all : usera userb userc....

usera:
       imapsync usera
userb:
       imapsync userb
....
</snippet></ROW><ROW><id>464538</id><snippet>&gt;&gt;&gt; l1 = [1, 3, 4, 7]
&gt;&gt;&gt; l2 = [0, 2, 5, 6, 8, 9]
&gt;&gt;&gt; l1.extend(l2)
&gt;&gt;&gt; sorted(l1)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>464538</id><snippet>l1</snippet></ROW><ROW><id>464538</id><snippet>&gt;&gt;&gt; sorted(l1 + l2)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>464538</id><snippet>datetime</snippet></ROW><ROW><id>464538</id><snippet>timeit.Timer().repeat()</snippet></ROW><ROW><id>464538</id><snippet>sorted(l1+l2)</snippet></ROW><ROW><id>464538</id><snippet>merge_sorted_lists</snippet></ROW><ROW><id>464538</id><snippet>[9.7439379692077637, 9.8844599723815918, 9.552299976348877]
</snippet></ROW><ROW><id>464538</id><snippet>sorted(l1+l2)</snippet></ROW><ROW><id>464538</id><snippet>[2.860386848449707, 2.7589840888977051, 2.7682540416717529]
</snippet></ROW><ROW><id>464882</id><snippet>itertools.combinations(iterable, r)
</snippet></ROW><ROW><id>464977</id><snippet>&lt;input type="text" name="username"&gt;
</snippet></ROW><ROW><id>464977</id><snippet>import cgi
form = cgi.FieldStorage()
print form["username"]
</snippet></ROW><ROW><id>464977</id><snippet>print request.GET['username'] # for GET form method
print request.POST['username'] # for POST form method
</snippet></ROW><ROW><id>464977</id><snippet>from cherrypy import request
print request.params['username']
</snippet></ROW><ROW><id>464977</id><snippet>form = web.input()
print form.username
</snippet></ROW><ROW><id>464977</id><snippet>print request.form['username']
</snippet></ROW><ROW><id>464977</id><snippet>def index(self, username):
    print username
</snippet></ROW><ROW><id>464977</id><snippet>class SomeHandler(webapp2.RequestHandler):
    def post(self):
        name = self.request.get('username') # this will get the value from the field named username
        self.response.write(name) # this will write on the document
</snippet></ROW><ROW><id>465113</id><snippet>def mysum(...): ...
def myotherstuff(...): ...

# create dispatch dict:
myfunctions = {'sum': mysum, 'stuff': myotherstuff}

# run your parser:
function_name, parameters = parse_result(line)

# run the function:
myfunctions[function_name](parameters)
</snippet></ROW><ROW><id>465113</id><snippet>class Commands(object):
    def do_sum(self, ...): ...
    def do_stuff(self, ...): ...
    def run(self, funcname, params):
        getattr(self, 'do_' + funcname)(params)

cmd = Commands()
function_name, parameters = parse_result(line)
cmd.run(function_name, parameters)
</snippet></ROW><ROW><id>465391</id><snippet>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE svg PUBLIC
      "-//W3C//DTD SVG 1.0//EN"
      "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd"&gt;
&lt;svg version="1.0" width="152px" height="50px"&gt;
  &lt;text style="font-size: 22px; font-weight:bold; font-family: Verdana-Bold;
               letter-spacing: -1.3%;"&gt;
    &lt;tspan x="10" y="39"&gt;TEXT HERE&lt;/tspan&gt;
  &lt;/text&gt;
&lt;/svg&gt;
</snippet></ROW><ROW><id>465391</id><snippet>convert</snippet></ROW><ROW><id>465391</id><snippet>$ convert -background none input.svg output.png
</snippet></ROW><ROW><id>465466</id><snippet>p = subprocess.Popen(['ruby', 'ruby_program.rb'], stdin=subprocess.PIPE, 
                                          stdout=subprocess.PIPE)
ruby_question = p.stdout.readline()
answer = calculate_answer(ruby_question)
p.stdin.write(answer)
print p.communicate()[0]  # prints further info ruby may show.
</snippet></ROW><ROW><id>465466</id><snippet>print p.communicate(answer)[0]
</snippet></ROW><ROW><id>465864</id><snippet>pyuic</snippet></ROW><ROW><id>465901</id><snippet>#!/usr/bin/python
#

from pyPdf import PdfFileWriter, PdfFileReader

input1 = PdfFileReader(file("in.pdf", "rb"))
output = PdfFileWriter()

numPages = input1.getNumPages()
print "document has %s pages." % numPages

for i in range(numPages):
    page = input1.getPage(i)
    print page.mediaBox.getUpperRight_x(), page.mediaBox.getUpperRight_y()
    page.trimBox.lowerLeft = (25, 25)
    page.trimBox.upperRight = (225, 225)
    page.cropBox.lowerLeft = (50, 50)
    page.cropBox.upperRight = (200, 200)
    output.addPage(page)

outputStream = file("out.pdf", "wb")
output.write(outputStream)
outputStream.close()
</snippet></ROW><ROW><id>466570</id><snippet>join()</snippet></ROW><ROW><id>466570</id><snippet>from threading import Thread
tlist = []
for i in range(3):
    t = Thread(target=some_function)
    t.start()
    tlist.append(t)

# wait until threads have finished executing
for t in tlist:
    t.join()

print 'complete!'
</snippet></ROW><ROW><id>466849</id><snippet>C:\&gt;C:\Python25\python.exe output.py | C:\Python25\python.exe input.py
Give me the greeting. The greeting is: hello
</snippet></ROW><ROW><id>466849</id><snippet>output.py | input.py
</snippet></ROW><ROW><id>467102</id><snippet>&gt;&gt;&gt; st = 'asdf'
&gt;&gt;&gt; [st[:n+1] for n in range(len(st))]
['a', 'as', 'asd', 'asdf']
</snippet></ROW><ROW><id>467159</id><snippet>def save(self):
    if(self.id):
        foo = Foo.objects.get(pk=self.id)
        if(foo.timestamp &gt; self.timestamp):
            raise Exception, "trying to save outdated Foo" 
    super(Foo, self).save()
</snippet></ROW><ROW><id>467291</id><snippet>import sys
if sys.platform == 'win32':
  import win32_sysinfo as sysinfo
elif sys.platform == 'darwin':
  import mac_sysinfo as sysinfo
elif 'linux' in sys.platform:
  import linux_sysinfo as sysinfo
#etc

print 'Memory available:', sysinfo.memory_available()
</snippet></ROW><ROW><id>467291</id><snippet>/proc</snippet></ROW><ROW><id>467820</id><snippet>/g</snippet></ROW><ROW><id>467820</id><snippet>perlop</snippet></ROW><ROW><id>467820</id><snippet>/g</snippet></ROW><ROW><id>467820</id><snippet>m//g</snippet></ROW><ROW><id>467820</id><snippet>pos()</snippet></ROW><ROW><id>467820</id><snippet>pos</snippet></ROW><ROW><id>467820</id><snippet>perlfunc</snippet></ROW><ROW><id>467820</id><snippet>/c</snippet></ROW><ROW><id>467820</id><snippet>m//gc</snippet></ROW><ROW><id>467928</id><snippet>(filter rules (build-permutations set))</snippet></ROW><ROW><id>467932</id><snippet>$ python -m cProfile myscript.py
</snippet></ROW><ROW><id>467945</id><snippet>lst</snippet></ROW><ROW><id>467945</id><snippet>lst.sort(key=operator.itemgetter(i))</snippet></ROW><ROW><id>467945</id><snippet>operator.add</snippet></ROW><ROW><id>467945</id><snippet>add = lambda x, y: x+y</snippet></ROW><ROW><id>467945</id><snippet>operator.add</snippet></ROW><ROW><id>468349</id><snippet>import os

def show_progress(file_name, chunk_size=1024):
    fh = open(file_name, "r")
    total_size = os.path.getsize(file_name)
    total_read = 0
    while True:
        chunk = fh.read(chunk_size)
        if not chunk: 
            fh.close()
            break
        total_read += len(chunk)
        print "Progress: %s percent" % (total_read/total_size)
        yield chunk

for chunk in show_progress("my_file.txt"):
    # Process the chunk
    pass
</snippet></ROW><ROW><id>468869</id><snippet>from_statement</snippet></ROW><ROW><id>468869</id><snippet>filter_by</snippet></ROW><ROW><id>468869</id><snippet>meta.Session.query(Location).from_statement(query).all()
</snippet></ROW><ROW><id>468889</id><snippet>from django.core.files.base import ContentFile

if request.FILES.has_key('image_1'):
    image_obj = Image()
    image_obj.file.save(request.FILES['image_1'].name,\
                        ContentFile(request.FILES['image_1'].read()))
    image_obj.save()
    room_obj.image_set.create(image_obj)
    room_obj.save()
</snippet></ROW><ROW><id>469992</id><snippet>__enter__</snippet></ROW><ROW><id>469992</id><snippet>as g</snippet></ROW><ROW><id>469992</id><snippet>__enter__()</snippet></ROW><ROW><id>469992</id><snippet>None</snippet></ROW><ROW><id>470156</id><snippet>1+(+(+2))
</snippet></ROW><ROW><id>470156</id><snippet>-</snippet></ROW><ROW><id>470156</id><snippet>+</snippet></ROW><ROW><id>470156</id><snippet>1-(-(2)) = 1-(-2)
         = 1+2
         = 3
</snippet></ROW><ROW><id>470156</id><snippet>1-(-(-2)) = 1-(2)
          = -1
</snippet></ROW><ROW><id>470156</id><snippet>++</snippet></ROW><ROW><id>470156</id><snippet>--</snippet></ROW><ROW><id>470156</id><snippet>i += 1
j -= 1
</snippet></ROW><ROW><id>471099</id><snippet>DeviceAdded</snippet></ROW><ROW><id>471099</id><snippet>DeviceRemoved</snippet></ROW><ROW><id>471099</id><snippet>import dbus
import gobject

class DeviceAddedListener:
    def __init__(self):
</snippet></ROW><ROW><id>471099</id><snippet>        self.bus = dbus.SystemBus()
        self.hal_manager_obj = self.bus.get_object(
                                              "org.freedesktop.Hal", 
                                              "/org/freedesktop/Hal/Manager")
        self.hal_manager = dbus.Interface(self.hal_manager_obj,
                                          "org.freedesktop.Hal.Manager")
</snippet></ROW><ROW><id>471099</id><snippet>DeviceAdded</snippet></ROW><ROW><id>471099</id><snippet>        self.hal_manager.connect_to_signal("DeviceAdded", self._filter)
</snippet></ROW><ROW><id>471099</id><snippet>volume</snippet></ROW><ROW><id>471099</id><snippet>do_something</snippet></ROW><ROW><id>471099</id><snippet>    def _filter(self, udi):
        device_obj = self.bus.get_object ("org.freedesktop.Hal", udi)
        device = dbus.Interface(device_obj, "org.freedesktop.Hal.Device")

        if device.QueryCapability("volume"):
            return self.do_something(device)
</snippet></ROW><ROW><id>471099</id><snippet>     def do_something(self, volume):
        device_file = volume.GetProperty("block.device")
        label = volume.GetProperty("volume.label")
        fstype = volume.GetProperty("volume.fstype")
        mounted = volume.GetProperty("volume.is_mounted")
        mount_point = volume.GetProperty("volume.mount_point")
        try:
            size = volume.GetProperty("volume.size")
        except:
            size = 0

        print "New storage device detectec:"
        print "  device_file: %s" % device_file
        print "  label: %s" % label
        print "  fstype: %s" % fstype
        if mounted:
            print "  mount_point: %s" % mount_point
        else:
            print "  not mounted"
        print "  size: %s (%.2fGB)" % (size, float(size) / 1024**3)

if __name__ == '__main__':
    from dbus.mainloop.glib import DBusGMainLoop
    DBusGMainLoop(set_as_default=True)
    loop = gobject.MainLoop()
    DeviceAddedListener()
    loop.run()
</snippet></ROW><ROW><id>471227</id><snippet>python main.py</snippet></ROW><ROW><id>471235</id><snippet># s is the string to parse
loadavg = [float(x) for x in s.rsplit('load average: ', 1)[1].split(', ')]
</snippet></ROW><ROW><id>471561</id><snippet>and</snippet></ROW><ROW><id>471561</id><snippet>or</snippet></ROW><ROW><id>471561</id><snippet>not</snippet></ROW><ROW><id>471661</id><snippet>from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User

class MyUserAdmin(UserAdmin):
    list_filter = UserAdmin.list_filter + ('is_active',)

admin.site.unregister(User)
admin.site.register(User, MyUserAdmin)
</snippet></ROW><ROW><id>471669</id><snippet>from myapp.models import SomeFact
from collections import defaultdict

facts = SomeFact.objects.filter( dimension1__attribute=this, dimension2__attribute=that )
myAggregates = defaultdict( int )
for row in facts:
    myAggregates[row.dimension3__attribute] += row.someMeasure
</snippet></ROW><ROW><id>471669</id><snippet>facts = SomeFact.objects.filter( dimension1__attribute=this, dimension2__attribute=that )
myAggregates = defaultdict( int )
for row in facts:
    key = ( row.dimension3__attribute, row.dimension4__attribute )
    myAggregates[key] += row.someMeasure
</snippet></ROW><ROW><id>471669</id><snippet>class MyAgg( object ):
    def __init__( self ):
        self.count = 0
        self.thisSum= 0
        self.thatSum= 0

myAggregates= defaultdict( MyAgg )
for row in facts:
    myAggregates[row.dimension3__attr].count += 1
    myAggregates[row.dimension3__attr].thisSum += row.this
    myAggregates[row.dimension3__attr].thatSum += row.that
</snippet></ROW><ROW><id>471985</id><snippet>Withdrawn</snippet></ROW><ROW><id>471985</id><snippet>*.py</snippet></ROW><ROW><id>471985</id><snippet>*.pyc</snippet></ROW><ROW><id>472024</id><snippet>__slots__</snippet></ROW><ROW><id>472024</id><snippet>__slots__</snippet></ROW><ROW><id>472243</id><snippet>#!/usr/bin/python

import pycurl
import sys

class Storage:
    def __init__(self):
        self.contents = ''
        self.line = 0

    def store(self, buf):
        self.line = self.line + 1
        self.contents = "%s%i: %s" % (self.contents, self.line, buf)

    def __str__(self):
        return self.contents

retrieved_body = Storage()
retrieved_headers = Storage()
c = pycurl.Curl()
c.setopt(c.URL, 'http://www.demaziere.fr/eve/')
c.setopt(c.WRITEFUNCTION, retrieved_body.store)
c.setopt(c.HEADERFUNCTION, retrieved_headers.store)
c.perform()
c.close()
print retrieved_headers
print retrieved_body
</snippet></ROW><ROW><id>472515</id><snippet>urls.py</snippet></ROW><ROW><id>472515</id><snippet>File "c:\projects\iFriends\..\iFriends\urls.py", line 17, in &lt;module&gt;
   (r'^admin/', include('django.contribute.admin.urls'))
</snippet></ROW><ROW><id>472515</id><snippet>16. (r'^/', 'some_stuff....')      # &lt;-- missed comma here
17. (r'^admin/', include('django.contribute.admin.urls'))
</snippet></ROW><ROW><id>472515</id><snippet>urls.py</snippet></ROW><ROW><id>472515</id><snippet>urls.py</snippet></ROW><ROW><id>472515</id><snippet>url.py</snippet></ROW><ROW><id>472515</id><snippet>urls.py</snippet></ROW><ROW><id>472688</id><snippet>class MyModel(models.Model):
    field1 = models.BlahField()
    field2 = models.FooField()
    field3 = models.BazField()

    class Meta:
        unique_together = ("field1", "field2")
</snippet></ROW><ROW><id>473057</id><snippet>"\xc0\x04\x00"
</snippet></ROW><ROW><id>473057</id><snippet>"\x00"</snippet></ROW><ROW><id>473057</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; array.array('B', [0xc0, 0x04, 0x00]).tostring()
'\xc0\x04\x00'
</snippet></ROW><ROW><id>473108</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>473108</id><snippet>from collections import defaultdict

my_dict = defaultdict(int)
my_dict[key] += 1
</snippet></ROW><ROW><id>473108</id><snippet>None</snippet></ROW><ROW><id>473108</id><snippet>KeyError</snippet></ROW><ROW><id>473108</id><snippet>dict</snippet></ROW><ROW><id>473108</id><snippet>if key in my_dict:
    my_dict[key] += 1
else:
    my_dict[key] = 1
</snippet></ROW><ROW><id>473337</id><snippet> &gt;&gt;&gt; name, = (name for name in ('bob','fred') if name=='bob')
 &gt;&gt;&gt; name
 'bob'
</snippet></ROW><ROW><id>473337</id><snippet>&gt;&gt;&gt; name, = (name for name in ('bob','bob') if name=='bob')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
</snippet></ROW><ROW><id>473337</id><snippet>&gt;&gt;&gt; name, = (name for name in ('fred','joe') if name=='bob')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 0 values to unpack
</snippet></ROW><ROW><id>473524</id><snippet>im = ... # get image into PIL image instance
dpi = im.info["dpi"] # retrive the DPI
print dpi # (x-res, y-res)
im.info["dpi"] = new dpi # (x-res, y-res)
im.save("PNG") # uses the new DPI
</snippet></ROW><ROW><id>473983</id><snippet>import random
random.shuffle(array)
</snippet></ROW><ROW><id>474278</id><snippet>def run_all(path):
    import glob, os
    print "Exploring %s" % path
    for filename in glob.glob(path + "/*.py"):
        # modulename = "bot_paperino"
        modulename = os.path.splitext(os.path.split(filename)[-1])[0]
        # classname = "Paperino"
        classname = modulename.split("bot_")[-1].capitalize()
        # package = "path.bot_paperino"
        package = filename.replace("\\", "/").replace("/", ".")[:-3]
        mod = __import__(package)
        if classname in mod.__dict__[modulename].__dict__.keys():
            obj = mod.__dict__[modulename].__dict__[classname]()
            if hasattr(obj, "go"):
                obj.go()

if __name__ == "__main__":
    import sys
    # Run on each directory passed on command line
    for path in sys.argv[1:]:
        run_all(sys.argv[1])
</snippet></ROW><ROW><id>474278</id><snippet>__init__.py</snippet></ROW><ROW><id>474352</id><snippet>def get_params(packagename):
    module = __import__('alpha.%s' % packagename)
    return module.__dict__['REQUIRED_PARAMS']
</snippet></ROW><ROW><id>474543</id><snippet>import sched, time
s = sched.scheduler(time.time, time.sleep)
def do_something(sc): 
    print "Doing stuff..."
    # do your stuff
    sc.enter(60, 1, do_something, (sc,))

s.enter(60, 1, do_something, (s,))
s.run()
</snippet></ROW><ROW><id>475873</id><snippet>A.x</snippet></ROW><ROW><id>475873</id><snippet>B</snippet></ROW><ROW><id>475873</id><snippet>self.x</snippet></ROW><ROW><id>475873</id><snippet>A</snippet></ROW><ROW><id>475873</id><snippet>x</snippet></ROW><ROW><id>475873</id><snippet>#!/usr/bin/env python

class A:
    x = []

    def add(self):
        self.x.append(1)


class B:
    def __init__(self):
        self.x = []

    def add(self):
        self.x.append(1)


x = A()
y = A()
x.add()
y.add()
print "A's x:",x.x

x = B()
y = B()
x.add()
y.add()
print "B's x:",x.x
</snippet></ROW><ROW><id>476033</id><snippet>annotate</snippet></ROW><ROW><id>476033</id><snippet>Contest.objects.get(pk=id).image_set.annotate(score=Sum('vote__value')).order_by( 'score' )
</snippet></ROW><ROW><id>476428</id><snippet>t = TemplateLookup(directories=['/tmp'], default_filters=['trim'])
</snippet></ROW><ROW><id>476521</id><snippet>&gt;&gt;&gt; from urlparse import urljoin
&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "anotherpage.html")
'http://www.asite.com/folder/anotherpage.html'
&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "folder2/anotherpage.html")
'http://www.asite.com/folder/folder2/anotherpage.html'
&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "/folder3/anotherpage.html")
'http://www.asite.com/folder3/anotherpage.html'
&gt;&gt;&gt; urljoin("http://www.asite.com/folder/currentpage.html", "../finalpage.html")
'http://www.asite.com/finalpage.html'
</snippet></ROW><ROW><id>476720</id><snippet>def update_object_wrapper(request, object_id, *args, **kwargs):
    redirect_to = reverse('your object edit url name', object_id)
    return update_object(request, object_id, post_save_redirect=redirect_to, *args, **kwargs)
</snippet></ROW><ROW><id>476787</id><snippet>s1='*'*100000
s2='+'*100000
</snippet></ROW><ROW><id>476967</id><snippet>&gt;&gt;&gt; Foo.objects.all().values('user__id')
[{'user__id': 1}, {'user__id' 2}, {'user__id': 3}]
</snippet></ROW><ROW><id>477248</id><snippet>random.random()</snippet></ROW><ROW><id>477248</id><snippet>p</snippet></ROW><ROW><id>477248</id><snippet>p</snippet></ROW><ROW><id>477248</id><snippet>def flip(p):
    return 'H' if random.random() &lt; p else 'T'
</snippet></ROW><ROW><id>477248</id><snippet>&gt;&gt;&gt; N = 100
&gt;&gt;&gt; flips = [flip(0.2) for i in xrange(N)]
&gt;&gt;&gt; float(flips.count('H'))/N
0.17999999999999999  # Approximately 20% of the coins are heads

&gt;&gt;&gt; N = 10000
&gt;&gt;&gt; flips = [flip(0.2) for i in xrange(N)]
&gt;&gt;&gt; float(flips.count('H'))/N
0.20549999999999999  # Better approximation
</snippet></ROW><ROW><id>477610</id><snippet>+</snippet></ROW><ROW><id>477610</id><snippet>&lt;</snippet></ROW><ROW><id>477610</id><snippet>&gt;&gt;&gt; def drange(start, stop, step):
...     r = start
...     while r &lt; stop:
...     	yield r
...     	r += step
...     	
&gt;&gt;&gt; i0=drange(0.0, 1.0, 0.1)
&gt;&gt;&gt; ["%g" % x for x in i0]
['0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>477813</id><snippet>simplejson</snippet></ROW><ROW><id>477813</id><snippet>simplejson.dump()</snippet></ROW><ROW><id>477839</id><snippet>itertools.groupby</snippet></ROW><ROW><id>477839</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>477839</id><snippet>from operator import itemgetter
from itertools import groupby

key = itemgetter('gender')
iter = groupby(sorted(people, key=key), key=key)

for gender, people in iter:
    print '===', gender, '==='
    for person in people:
        print person
</snippet></ROW><ROW><id>478406</id><snippet>relations = request.POST.getlist('relations')
</snippet></ROW><ROW><id>478763</id><snippet>class RandomResponder(object):
    choices = [A, B, C]

    @classmethod
    def which(cls):
        return random.choice(cls.choices)

    def __getattr__(self, attr):
        return getattr(self.which(), attr)
</snippet></ROW><ROW><id>478763</id><snippet>class RandomResponder(object):
    choices = [A, B, C]

    def __getattr__(self, attr):
        # we define a function that actually gets called
        # which takes up the first positional argument,
        # the rest are left to args and kwargs
        def doCall(which, *args, **kwargs):
            # get the attribute of the appropriate one, call with passed args
            return getattr(self.choices[which], attr)(*args, **kwargs)
        return doCall
</snippet></ROW><ROW><id>479082</id><snippet>import re

def _callback(match):
    """ This is a simple callback function for the regular expression which is 
        in charge of doing the actual capitalization. It is designed to only 
        capitalize words which aren't fully uppercased (like acronyms).
    """
    word = match.group(0)
    if word == word.upper():
        return word
    else:
        return word.capitalize()

def capwords(data):
    """ This function converts `data` into a capitalized version of itself. This 
        function accomidates acronyms.
    """
    return re.sub("[\w\'\-\_]+", _callback, data)
</snippet></ROW><ROW><id>479082</id><snippet>print capwords("This is an IRS test.")    # Produces: "This Is An IRS Test."
print capwords("This is an I.R.S. test.") # Produces: "This Is An I.R.S. Test."
</snippet></ROW><ROW><id>479238</id><snippet>mimetypes.guess_extension(part.get_content_type())
</snippet></ROW><ROW><id>479238</id><snippet>if not filename:
	ext = mimetypes.guess_extension(part.get_content_type())

if not ext:
    guess = part["Content-Type"].split(";")

    if guess[0] == "image/pjpeg":
        guess[0] = "image/jpeg"

    ext = mimetypes.guess_extension(guess[0])

if not ext:
    ext = ".bin"
</snippet></ROW><ROW><id>479299</id><snippet>1/6</snippet></ROW><ROW><id>479299</id><snippet>X</snippet></ROW><ROW><id>479299</id><snippet>X~U[1,6]</snippet></ROW><ROW><id>479299</id><snippet>X</snippet></ROW><ROW><id>479299</id><snippet>[0,1)</snippet></ROW><ROW><id>479299</id><snippet>[0,1/6)</snippet></ROW><ROW><id>479299</id><snippet>[1/6,2/6)</snippet></ROW><ROW><id>479299</id><snippet>[2/6,3/6)</snippet></ROW><ROW><id>479299</id><snippet>[3/6,4/6)</snippet></ROW><ROW><id>479299</id><snippet>[4/6,5/6)</snippet></ROW><ROW><id>479299</id><snippet>[5/6,1)</snippet></ROW><ROW><id>479299</id><snippet>[0,1)</snippet></ROW><ROW><id>479299</id><snippet>[0,0.2)</snippet></ROW><ROW><id>479299</id><snippet>[0.2,0.4)</snippet></ROW><ROW><id>479299</id><snippet>[0.4,0.55)</snippet></ROW><ROW><id>479299</id><snippet>0.55,0.7)</snippet></ROW><ROW><id>479299</id><snippet>[0.7,0.84)</snippet></ROW><ROW><id>479299</id><snippet>[0.84,1)</snippet></ROW><ROW><id>479299</id><snippet>import random
sampleMassDist = (0.2, 0.1, 0.15, 0.15, 0.25, 0.15)

# assume sum of bias is 1
def roll(massDist):
    randRoll = random.random() # in [0,1)
    sum = 0
    result = 1
    for mass in massDist:
        sum += mass
        if randRoll &lt; sum:
            return result
        result+=1

print roll(sampleMassDist)
</snippet></ROW><ROW><id>479766</id><snippet>import feedparser
d = feedparser.parse('http://www.digg.com/rss/index.xml')
title = d.channel.title
</snippet></ROW><ROW><id>479917</id><snippet>myList = sorted(set(myList))
</snippet></ROW><ROW><id>479917</id><snippet>set</snippet></ROW><ROW><id>479917</id><snippet>sorted</snippet></ROW><ROW><id>480227</id><snippet>def f7(seq):
    seen = set()
    seen_add = seen.add
    return [ x for x in seq if x not in seen and not seen_add(x)]
</snippet></ROW><ROW><id>480266</id><snippet>def f(...):
    ...
f = staticmethod(f)

@staticmethod
def f(...):
</snippet></ROW><ROW><id>481280</id><snippet>import re

def func1(s):
    print s, "is a nice string"

def func2(s):
    print s, "is a bad string"

funcs = {
    r".*pat1.*": func1,
    r".*pat2.*": func2
}
s = "Some string with both pat1 and pat2"

for pat in funcs:
    if re.search(pat, s):
        funcs[pat](s)
</snippet></ROW><ROW><id>481280</id><snippet>s</snippet></ROW><ROW><id>481549</id><snippet> newContents, num = cregex.subn(lambda m: replacements[m.string[m.start():m.end()]], contents)
</snippet></ROW><ROW><id>481755</id><snippet>fact = lambda x: 1 if x == 0 else x * fact(x-1)
</snippet></ROW><ROW><id>481755</id><snippet>fact = lambda x: x == 0 and 1 or x * fact(x-1)
</snippet></ROW><ROW><id>481755</id><snippet>&gt;&gt;&gt; map(lambda n: (lambda f, *a: f(f, *a))(lambda rec, n: 1 if n == 0 else n*rec(rec, n-1), n), range(10))
[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]
</snippet></ROW><ROW><id>481991</id><snippet>import re
import pprint
import sys

class Despacho(object):
    """
    Class to parse each line, applying the regexp and storing the results
    for future use
    """
    #used a dict with the keys instead of functions.
    regexp = {
        ('processo', 
         'data', 
         'despacho'): re.compile(r'No.([\d]{9})  ([\d]{2}/[\d]{2}/[\d]{4})  (.*)'),
        ('titular',): re.compile(r'Tit.(.*)'),
        ('procurador',): re.compile(r'Procurador: (.*)'),
        ('documento',): re.compile(r'C.N.P.J./C.I.C./N INPI :(.*)'),
        ('apresentacao',
         'natureza'): re.compile(r'Apres.: (.*) ; Nat.: (.*)'),
        ('marca',): re.compile(r'Marca: (.*)'),
        ('classe',): re.compile(r'Clas.Prod/Serv: (.*)'),
        ('complemento',): re.compile(r'\*(.*)'),
    }

    def __init__(self):
        """
        'complemento' is the only field that can be multiple in a single registry
        """
        self.complemento = []


    def read(self, line):
        for attrs, pattern in Despacho.regexp.iteritems():
            m = pattern.match(line)
            if m:
                for groupn, attr in enumerate(attrs):
                    # special case complemento:
                    if attr == 'complemento':
                        self.complemento.append(m.group(groupn + 1))
                    else:
                        # set the attribute on the object
                        setattr(self, attr, m.group(groupn + 1))

    def __repr__(self):
        # defines object printed representation
        d = {}
        for attrs in self.regexp:
            for attr in attrs:
                d[attr] = getattr(self, attr, None)
        return pprint.pformat(d)

def process(rpi):
    """
    read data and process each group
    """
    #Useless line, since you're doing a for anyway
    #rpi = (line for line in rpi)
    group = False

    for line in rpi:
        if line.startswith('No.'):
            group = True
            d = Despacho()        

        if not line.strip() and group: # empty line - end of block
            yield d
            group = False

        d.read(line)

def main():
    arquivo = open('rm1972.txt') # file to process
    for desp in process(arquivo):
        print desp # can print directly here.
        print('-' * 20)
    return 0

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>482005</id><snippet>LDAP_REFERRAL_LIMIT_EXCEEDED      0x61   The referral limit was exceeded.
</snippet></ROW><ROW><id>482005</id><snippet>ldap.set_option(ldap.OPT_REFERRALS, 0)
</snippet></ROW><ROW><id>482192</id><snippet>import string
import itertools

chars = string.digits + string.letters
MAX_CHARS = 4
for nletters in range(MAX_CHARS):
    for word in itertools.product(chars, repeat=nletters + 1):
        print (''.join(word))
</snippet></ROW><ROW><id>482192</id><snippet>15018570</snippet></ROW><ROW><id>482192</id><snippet>MAX_CHARS</snippet></ROW><ROW><id>482192</id><snippet>for</snippet></ROW><ROW><id>482244</id><snippet>__debug__</snippet></ROW><ROW><id>482244</id><snippet>if __debug__:
  print "If this prints, you're not running python -O."
else:
  print "If this prints, you are running python -O!"
</snippet></ROW><ROW><id>482244</id><snippet>__debug__</snippet></ROW><ROW><id>482244</id><snippet>if 0:</snippet></ROW><ROW><id>483165</id><snippet>public void init() {
        interp = new PythonInterpreter(null, new PySystemState());

        PySystemState sys = Py.getSystemState();
        sys.path.append(new PyString(rootPath));
        sys.path.append(new PyString(modulesDir));
    }
</snippet></ROW><ROW><id>483170</id><snippet>__init__</snippet></ROW><ROW><id>483170</id><snippet>self.</snippet></ROW><ROW><id>483170</id><snippet>class SomeClass( object ):
    classVariable = 0
    def __init__( self ):
        self.instanceVariable= 0
</snippet></ROW><ROW><id>483170</id><snippet>classVariable</snippet></ROW><ROW><id>483170</id><snippet>self.classVariable</snippet></ROW><ROW><id>483170</id><snippet>SomeClass.classVariable</snippet></ROW><ROW><id>483170</id><snippet>instanceVariable</snippet></ROW><ROW><id>483170</id><snippet>self.</snippet></ROW><ROW><id>483447</id><snippet>macro PrintMacro:
  syntax:
    "print", OneOrMore(Var(), name='vars')

  return Printnl(vars, None)
</snippet></ROW><ROW><id>483447</id><snippet>Var()</snippet></ROW><ROW><id>483447</id><snippet>Var</snippet></ROW><ROW><id>483447</id><snippet>class PrintMacro(Macro):
  syntax = 'print', OneOrMore(Var(), name='vars')
  ...
</snippet></ROW><ROW><id>483447</id><snippet>OneOrMore</snippet></ROW><ROW><id>483447</id><snippet>class MacroSyntaxElement(object):
  def __init__(self, *p, name=None):
    self.subelements = p
    self.name = name
</snippet></ROW><ROW><id>483447</id><snippet>class Macro():
   ...
   def parse(self, ...):
     syntaxtree = []
     nameditems = {}
     # parse, however this is done
     # store all elements that have a name as
     #   nameditems[name] = parsed_element
     self.handle(syntaxtree, **nameditems)
</snippet></ROW><ROW><id>483447</id><snippet>class PrintMacro(Macro):
  ...
  def handle(self, syntaxtree, vars):
    return Printnl(vars, None)
</snippet></ROW><ROW><id>483447</id><snippet>IfMacro</snippet></ROW><ROW><id>483447</id><snippet>macro IfMacro(MultiLine):
  syntax:
    Group("if", Var(), ":", Var(), name='if_')
    ZeroOrMore("elif", Var(), ":", Var(), name='elifs')
    Optional("else", Var(name='elseBody'))

  return If(
      [(cond, Stmt(body)) for keyword, cond, colon, body in [if_] + elifs],
      None if elseBody is None else Stmt(elseBody)
    )
</snippet></ROW><ROW><id>483447</id><snippet>class IfMacro(MultiLineMacro):
  syntax = (
      Group("if", Var(), ":", Var(), name='if_'),
      ZeroOrMore("elif", Var(), ":", Var(), name='elifs'),
      Optional("else", Var(name='elseBody'))
    )

  def handle(self, syntaxtree, if_=None, elifs=None, elseBody=None):
    # Default parameters in case there is no such named item.
    # In this case this can only happen for 'elseBody'.
    return If(
        [(cond, Stmt(body)) for keyword, cond, body in [if_] + elifs],
        None if elseNody is None else Stmt(elseBody)
      )
</snippet></ROW><ROW><id>483447</id><snippet>None</snippet></ROW><ROW><id>483447</id><snippet>Several("abc", min=3, max=5, name="a")</snippet></ROW><ROW><id>483447</id><snippet>Optional("step", Var(), name="step", default=1)</snippet></ROW><ROW><id>483447</id><snippet>$(Stmt(a, b, c))</snippet></ROW><ROW><id>483447</id><snippet># macro definition
macro ToMacro(Partial):
  syntax:
    Var(name='start'), "to", Var(name='end'), Optional("inclusive", name='inc'), Optional("step", Var(name='step'))

  if step == None:
    step = quote(1)
  if inclusive:
    return quote:
      xrange($(start), $(end)+1, $(step))
  else:
    return quote:
      xrange($(start), $(end), $(step))

# resulting macro class
class ToMacro(PartialMacro):
  syntax = Var(name='start'), "to", Var(name='end'), Optional("inclusive", name='inc'), Optional("step", Var(name='step'))

  def handle(syntaxtree, start=None, end=None, inc=None, step=None):
    if step is None:
      step = Number(1)
    if inclusive:
      return ['xrange', ['(', start, [end, '+', Number(1)], step, ')']]
    return ['xrange', ['(', start, end, step, ')']]
</snippet></ROW><ROW><id>483833</id><snippet>inv_map = {v:k for k, v in map.items()}
</snippet></ROW><ROW><id>484227</id><snippet>class X:                                         
   def __init__(self):
     self._value = 90  

   def _get(self):   
     return self._value

   def _set(self, value):
     self._value = value  

   value = property(_get, _set)
</snippet></ROW><ROW><id>484227</id><snippet>_value</snippet></ROW><ROW><id>484227</id><snippet>setattr(x, 'value', 99)
</snippet></ROW><ROW><id>484358</id><snippet>def test(request):
    return render_to_response("test.html", {
                                            "s1": u"dados",
                                            "s2": u"aprovação",
                                            }
                              )
</snippet></ROW><ROW><id>485233</id><snippet>scipy.stats</snippet></ROW><ROW><id>485233</id><snippet>&gt;&gt;&gt; from scipy.stats import poisson, lognorm
&gt;&gt;&gt; myShape = 5;myMu=10
&gt;&gt;&gt; ln = lognorm(myShape)
&gt;&gt;&gt; p = poisson(myMu)
&gt;&gt;&gt; ln.rvs((10,)) #generate 10 RVs from ln
array([  2.09164812e+00,   3.29062874e-01,   1.22453941e-03,
         3.80101527e+02,   7.67464002e-02,   2.53530952e+01,
         1.41850880e+03,   8.36347923e+03,   8.69209870e+03,
         1.64317413e-01])
&gt;&gt;&gt; p.rvs((10,)) #generate 10 RVs from p
array([ 8,  9,  7, 12,  6, 13, 11, 11, 10,  8])
&gt;&gt;&gt; ln.pdf(3) #lognorm PDF at x=3
array(0.02596183475208955)
</snippet></ROW><ROW><id>485233</id><snippet>scipy.stats</snippet></ROW><ROW><id>485550</id><snippet>inspect.classify_class_attrs(cls)</snippet></ROW><ROW><id>485550</id><snippet>('name', 'kind' e.g. 'method' or 'data', defining class, property)</snippet></ROW><ROW><id>485550</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; import calendar
&gt;&gt;&gt; 
&gt;&gt;&gt; hc = calendar.HTMLCalendar()
&gt;&gt;&gt; hc.__class__.pathos = None
&gt;&gt;&gt; calendar.Calendar.phobos = None
&gt;&gt;&gt; pprint.pprint(inspect.classify_class_attrs(hc.__class__))
[...
 ('__doc__',
  'data',
  &lt;class 'calendar.HTMLCalendar'&gt;,
  '\n    This calendar returns complete HTML pages.\n    '),
 ...
 ('__new__',
  'data',
  &lt;type 'object'&gt;,
  &lt;built-in method __new__ of type object at 0x814fac0&gt;),
 ...
 ('cssclasses',
  'data',
  &lt;class 'calendar.HTMLCalendar'&gt;,
  ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']),
 ('firstweekday',
  'property',
  &lt;class 'calendar.Calendar'&gt;,
  &lt;property object at 0x98b8c34&gt;),
 ('formatday',
  'method',
  &lt;class 'calendar.HTMLCalendar'&gt;,
  &lt;function formatday at 0x98b7bc4&gt;),
 ...
 ('pathos', 'data', &lt;class 'calendar.HTMLCalendar'&gt;, None),
 ('phobos', 'data', &lt;class 'calendar.Calendar'&gt;, None),
 ...
 ]
</snippet></ROW><ROW><id>485624</id><snippet>dir</snippet></ROW><ROW><id>485624</id><snippet>__dir__()</snippet></ROW><ROW><id>485624</id><snippet>__getattr__()</snippet></ROW><ROW><id>485624</id><snippet>__getattribute__()</snippet></ROW><ROW><id>485624</id><snippet>dir()</snippet></ROW><ROW><id>485624</id><snippet>__dir__()</snippet></ROW><ROW><id>485624</id><snippet>obj.__dict__</snippet></ROW><ROW><id>485624</id><snippet>type(obj).__dict__</snippet></ROW><ROW><id>485624</id><snippet>__getattr__</snippet></ROW><ROW><id>485624</id><snippet>AttributeError</snippet></ROW><ROW><id>485624</id><snippet>__dir__</snippet></ROW><ROW><id>485624</id><snippet>__methods__</snippet></ROW><ROW><id>485624</id><snippet>__members__</snippet></ROW><ROW><id>485808</id><snippet>raw_input</snippet></ROW><ROW><id>485808</id><snippet>"AB" * 3</snippet></ROW><ROW><id>485808</id><snippet>"ABABAB"</snippet></ROW><ROW><id>485808</id><snippet>"L" * 3.14</snippet></ROW><ROW><id>485808</id><snippet>"LLL|"</snippet></ROW><ROW><id>485808</id><snippet>salesAmount = float(raw_input("Insert sale amount here\n"))
</snippet></ROW><ROW><id>487110</id><snippet>MainWindow</snippet></ROW><ROW><id>487110</id><snippet>forms/frmmain.py</snippet></ROW><ROW><id>487110</id><snippet>_pulse()</snippet></ROW><ROW><id>487110</id><snippet>on_entry_activate()</snippet></ROW><ROW><id>487110</id><snippet>def on_entry_activate(self, entry):
    text = entry.get_text().strip()
    if text:
        store = entry.get_completion().get_model()
        if text not in [row[0] for row in store]:
            store.append((text, ))
        thread = threads.RecommendationsFetcher(text, self.queue)# &lt;- 1
        self.idle_timer = gobject.idle_add(self._pulse)# &lt;- 2
        tv_results = self.widgets.get_widget('tv_results')
        model = tv_results.get_model()
        model.clear()
        thread.setDaemon(True)# &lt;- 3
        progress_update = self.widgets.get_widget('progress_update')
        progress_update.show()
        thread.start()# &lt;- 4
</snippet></ROW><ROW><id>487203</id><snippet>def somefunc(param1: "string annotation", 
             param2: 151631,  
             param3: any_object): -&gt; "some information here":
</snippet></ROW><ROW><id>487203</id><snippet>print (somefunc.func_annotations)
{'param1': "string annotation", 
 'param2': 151631,  
 'param3': &lt;object any_object&gt;,
 'return': "some information here"}
</snippet></ROW><ROW><id>487203</id><snippet>def x_intercept(m, b):
    """
    Return the x intercept of the line M{y=m*x+b}.  The X{x intercept}
    of a line is the point at which it crosses the x axis (M{y=0}).

    This function can be used in conjuction with L{z_transform} to
    find an arbitrary function's zeros.

    @type  m: number
    @param m: The slope of the line.
    @type  b: number
    @param b: The y intercept of the line.  The X{y intercept} of a
              line is the point at which it crosses the y axis (M{x=0}).
    @rtype:   number
    @return:  the x intercept of the line M{y=m*x+b}.
    """
    return -b/m
</snippet></ROW><ROW><id>487261</id><snippet>mod_python</snippet></ROW><ROW><id>487261</id><snippet>mod_wsgi</snippet></ROW><ROW><id>487261</id><snippet>mod_wsgi</snippet></ROW><ROW><id>487261</id><snippet>mod_python</snippet></ROW><ROW><id>487261</id><snippet>spawning</snippet></ROW><ROW><id>487720</id><snippet>__init__</snippet></ROW><ROW><id>487720</id><snippet>self.operations = &lt;whatever&gt;</snippet></ROW><ROW><id>488074</id><snippet>zippedfile = open('%stemp/tempfile.zip' % settings.MEDIA_ROOT, 'wb+')
</snippet></ROW><ROW><id>488113</id><snippet>__init__</snippet></ROW><ROW><id>488113</id><snippet>Action_Form</snippet></ROW><ROW><id>488113</id><snippet>__init__</snippet></ROW><ROW><id>488113</id><snippet>ModelForm</snippet></ROW><ROW><id>488113</id><snippet>class Action_Form(forms.ModelForm):
    def __init__(self, *args, **kwargs):
        super(Action_Form, self).__init__(*args, **kwargs)
        self.fields['from_company'].queryset = Contact.object.filter(...
</snippet></ROW><ROW><id>488113</id><snippet>Action_Form</snippet></ROW><ROW><id>488113</id><snippet>myfilter = kwargs['myfilter']
del kwargs['myfilter']
</snippet></ROW><ROW><id>488113</id><snippet>myfilter = kwargs.pop('myfilter')
</snippet></ROW><ROW><id>488541</id><snippet>.postscript</snippet></ROW><ROW><id>488941</id><snippet>mov_average_expw()</snippet></ROW><ROW><id>488941</id><snippet>alpha</snippet></ROW><ROW><id>488941</id><snippet>(1 - alpha)</snippet></ROW><ROW><id>488941</id><snippet>&gt;&gt;&gt; alpha = 0.5
&gt;&gt;&gt; assert 0 &lt; alpha &lt;= 1.0
&gt;&gt;&gt; av = sum(alpha**n.days * iq 
...     for n, iq in map(lambda (day, iq), today=max(days): (today-day, iq), 
...         sorted(zip(days, IQ), key=lambda p: p[0], reverse=True)))
95.0
</snippet></ROW><ROW><id>488941</id><snippet>from collections import namedtuple
from operator    import itemgetter

def smooth(iq_data, alpha=1, today=None):
    """Perform exponential smoothing with factor `alpha`.

    Time period is a day.
    Each time period the value of `iq` drops `alpha` times.
    The most recent data is the most valuable one.
    """
    assert 0 &lt; alpha &lt;= 1

    if alpha == 1: # no smoothing
        return sum(map(itemgetter(1), iq_data))

    if today is None:
        today = max(map(itemgetter(0), iq_data))

    return sum(alpha**((today - date).days) * iq for date, iq in iq_data)

IQData = namedtuple("IQData", "date iq")

if __name__ == "__main__":
    from datetime import date

    days = [date(2008,1,1), date(2008,1,2), date(2008,1,7)]
    IQ = [110, 105, 90]
    iqdata = list(map(IQData, days, IQ))
    print("\n".join(map(str, iqdata)))

    print(smooth(iqdata, alpha=0.5))
</snippet></ROW><ROW><id>488941</id><snippet>$ python26 smooth.py
IQData(date=datetime.date(2008, 1, 1), iq=110)
IQData(date=datetime.date(2008, 1, 2), iq=105)
IQData(date=datetime.date(2008, 1, 7), iq=90)
95.0
</snippet></ROW><ROW><id>488996</id><snippet>any</snippet></ROW><ROW><id>488996</id><snippet>@accepts(any, any, any, int)</snippet></ROW><ROW><id>488996</id><snippet>any</snippet></ROW><ROW><id>488996</id><snippet>@accepts</snippet></ROW><ROW><id>489403</id><snippet>#!/usr/bin/env python

import os
from win32com.client import Dispatch

fh = open('foo.txt', 'w')
fh.write('hello ')
fh.close()

cwd = os.getcwd()

session = Dispatch('MAPI.session')
session.Logon('','',0,1,0,0,'exchange.foo.com\ncorey');
session.Logoff()

os.chdir(cwd)

fh = open('foo.txt', 'a')
fh.write('world')
fh.close()
</snippet></ROW><ROW><id>489503</id><snippet>import test.py
</snippet></ROW><ROW><id>489503</id><snippet>import test
</snippet></ROW><ROW><id>489649</id><snippet>import imp
import os
MODULE_EXTENSIONS = ('.py', '.pyc', '.pyo')

def package_contents(package_name):
    file, pathname, description = imp.find_module(package_name)
    if file:
        raise ImportError('Not a package: %r', package_name)
    # Use a set because some may be both source and compiled.
    return set([os.path.splitext(module)[0]
        for module in os.listdir(pathname)
        if module.endswith(MODULE_EXTENSIONS)])
</snippet></ROW><ROW><id>490020</id><snippet># Over-explaining a bit:
def magic(numList):         # [1,2,3]
    s = map(str, numList)   # ['1','2','3']
    s = ''.join(s)          # '123'
    s = int(s)              # 123
    return s


# How I'd probably write it:
def magic(numList):
    s = ''.join(map(str, numList))
    return int(s)


# As a one-liner  
num = int(''.join(map(str,numList)))


# Functionally:
s = reduce(lambda x,y: x+str(y), numList, '')
num = int(s)


# Using some oft-forgotten built-ins:
s = filter(str.isdigit, repr(numList))
num = int(s)
</snippet></ROW><ROW><id>490198</id><snippet>sc.SendScintilla(sc.SCI_SETHSCROLLBAR, 0)
</snippet></ROW><ROW><id>490347</id><snippet>import re

data = """
QUADNAME: rockport_colony_SD RESOLUTION: 10 ULLAT: 43.625
ULLON: -97.87527466 LRLAT: 43.5
LRLON: -97.75027466 HDATUM: 27
ZMIN: 361.58401489 ZMAX: 413.38400269 ZMEAN: 396.1293335 ZSIGMA: 12.36359215 PMETHOD: 5
QUADDATE: 20001001
"""

regex = re.compile(
    r"""ULLAT:\ (?P&lt;ullat&gt;-?[\d.]+).*?
    ULLON:\ (?P&lt;ullon&gt;-?[\d.]+).*?
    LRLAT:\ (?P&lt;lrlat&gt;-?[\d.]+)""", re.DOTALL|re.VERBOSE)

print regex.findall(data) # Yields: [('43.625', '-97.87527466', '43.5')]
</snippet></ROW><ROW><id>490410</id><snippet>import os, sys
import yum

yb = yum.YumBase()
yb.conf.cache = os.geteuid() != 1
pl = yb.doPackageLists(patterns=sys.argv[1:])
if pl.installed:
    print "Installed Packages"
    for pkg in sorted(pl.installed):
        print pkg
if pl.available:
    print "Available Packages"
    for pkg in sorted(pl.available):
        print pkg, pkg.repo
if pl.reinstall_available:
    print "Re-install Available Packages"
    for pkg in sorted(pl.reinstall_available):
        print pkg, pkg.repo
</snippet></ROW><ROW><id>490437</id><snippet>In [2]: class C(object):
   ...:     def method(self, a, b, c):
   ...:         print a, b, c
   ...:
   ...:

In [3]: def api_function(a_func):
   ...:     a_func("One Fish", "Two Fish", "Blue Fish")
   ...:
   ...:

In [4]: c = C()

In [5]: api_function(c.method)
One Fish Two Fish Blue Fish
</snippet></ROW><ROW><id>490609</id><snippet>(?=...)</snippet></ROW><ROW><id>490609</id><snippet>(?&lt;=...)</snippet></ROW><ROW><id>491967</id><snippet>u'Capit\xe1n\n'
</snippet></ROW><ROW><id>491967</id><snippet>Capit\xc3\xa1n
</snippet></ROW><ROW><id>491967</id><snippet>&gt;&gt;&gt; open('f2').read()
'Capit\\xc3\\xa1n\n'
</snippet></ROW><ROW><id>491967</id><snippet>string_escape</snippet></ROW><ROW><id>491967</id><snippet>In [15]: print 'Capit\\xc3\\xa1n\n'.decode('string_escape')
Capitán
</snippet></ROW><ROW><id>491967</id><snippet>\\xc3\\xa1</snippet></ROW><ROW><id>491967</id><snippet>s = u'Capit\xe1n\n'
sutf8 = s.encode('UTF-8')
open('utf-8.out', 'w').write(sutf8)
</snippet></ROW><ROW><id>491967</id><snippet>utf-8.out</snippet></ROW><ROW><id>492399</id><snippet>import sys

def Factorial(n): # return factorial
    result = 1
    for i in range (1,n):
        result = result * i
    print "factorial is ",result
    return result

print Factorial(10)
</snippet></ROW><ROW><id>492640</id><snippet>.value</snippet></ROW><ROW><id>492640</id><snippet>void *</snippet></ROW><ROW><id>492640</id><snippet>c_void_p</snippet></ROW><ROW><id>492640</id><snippet>void *</snippet></ROW><ROW><id>492640</id><snippet>from ctypes import *

liblibrary = cdll.LoadLibrary('liblibrary.so')

def py_library_hook(strings, n):
    return 0

# First argument to CFUNCTYPE is the return type:
LIBRARY_HOOK_FUNC = CFUNCTYPE(c_int, POINTER(c_char_p), c_int)
hook = LIBRARY_HOOK_FUNC(py_library_Hook)
ptr = c_void_p.in_dll(liblibrary, 'library_hook')
ptr.value = cast(hook, c_void_p).value
</snippet></ROW><ROW><id>492644</id><snippet>def timeout(func, args=(), kwargs={}, timeout_duration=10, default=None):
    """This function will spawn a thread and run the given function
    using the args, kwargs and return the given default value if the
    timeout_duration is exceeded.
    """ 
    import threading
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = default
        def run(self):
            self.result = func(*args, **kwargs)
    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():
        return it.result
    else:
        return it.result
</snippet></ROW><ROW><id>492644</id><snippet>result = timeout(remote_calculate, (myarg,), timeout_duration=5)
</snippet></ROW><ROW><id>492711</id><snippet># -*- coding: utf-8 -*-
print u"åäö".encode('utf-8')
</snippet></ROW><ROW><id>492711</id><snippet>import sys
for line in sys.stdin:
    # decode what you receive:
    line = line.decode('iso8859-1')

    # work with unicode internally:
    line = line.upper()

    # encode what you send:
    line = line.encode('utf-8')
    sys.stdout.write(line)
</snippet></ROW><ROW><id>492877</id><snippet>i=2
while i &lt; n:
    if something:
       do something
       i += 1
    else: 
       do something else  
       i = 2 #restart the loop
</snippet></ROW><ROW><id>493057</id><snippet>s[0:-1]</snippet></ROW><ROW><id>493057</id><snippet>s[:-1]</snippet></ROW><ROW><id>493057</id><snippet>myList = ['a', 'b', 'c', 'd', 'e']
print myList[-1] # prints 'e'
</snippet></ROW><ROW><id>493057</id><snippet>myList[2:4]</snippet></ROW><ROW><id>493057</id><snippet>['c', 'd']</snippet></ROW><ROW><id>493057</id><snippet>myList[:index]</snippet></ROW><ROW><id>493057</id><snippet>myList[0:index]</snippet></ROW><ROW><id>493057</id><snippet>myList[index:]</snippet></ROW><ROW><id>493057</id><snippet>myList[index:len(myList)]</snippet></ROW><ROW><id>493057</id><snippet>index</snippet></ROW><ROW><id>493057</id><snippet>print myList[2:]</snippet></ROW><ROW><id>493057</id><snippet>['c', 'd', 'e']</snippet></ROW><ROW><id>493057</id><snippet>print myList[:]</snippet></ROW><ROW><id>493057</id><snippet>myList[0:len(myList)]</snippet></ROW><ROW><id>493399</id><snippet>import sys
sys.stdout.write('.')
</snippet></ROW><ROW><id>493399</id><snippet>print('.'), # this will still print a space, but not a newline
</snippet></ROW><ROW><id>493399</id><snippet>print</snippet></ROW><ROW><id>493399</id><snippet>print('.', end="")
</snippet></ROW><ROW><id>493423</id><snippet>&gt;&gt;&gt; nums = [1,2,3,4,5]
&gt;&gt;&gt; [(x,y) for x in nums for y in nums]
[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5)]
&gt;&gt;&gt; min(_, key=lambda pair: pair[0]/pair[1])
(1, 5)
</snippet></ROW><ROW><id>493423</id><snippet>from __future__ import division</snippet></ROW><ROW><id>493454</id><snippet>dir(Team)</snippet></ROW><ROW><id>493454</id><snippet>teamplayer_set</snippet></ROW><ROW><id>493454</id><snippet>t = Team.objects.get(pk=168)
for x in t.teamplayer_set.all():
  if x.captain:
    print "%s (Captain)" % (x.player.name)
  else:
    print x.player.name
</snippet></ROW><ROW><id>493822</id><snippet>f = open('myfile.txt', 'w')
for x in range(255):
    ip = "10.1.1.%s\n" % str(x)
    f.write(ip)
f.close()
</snippet></ROW><ROW><id>493842</id><snippet>import urllib2
print '\n############\n'.join(urllib2.urlopen('http://data.stackexchange.com/users/7095'))
</snippet></ROW><ROW><id>494897</id><snippet>def addItem(item, name, offset):
          if isinstance(item, dict):
                lines.append(offset + u"&lt;%s&gt;" % name)
                addDict(item, offset + u" " * 4)
                lines.append(offset + u"&lt;/%s&gt;" % name)
          else:
                lines.append(offset + u"&lt;%s&gt;%s&lt;/%s&gt;" % (name, escape(unicodify(item)), name))

def addList(value,name, offset):
        for item in value:
            addItem(item, name, offset)

def addDict(node, offset):
        for name, value in node.iteritems():
            if isinstance(value, list):
                addList(value, name, offset)
            else:
                addItem(value, name, offset)
</snippet></ROW><ROW><id>494935</id><snippet>f = open('filename string');
lines = f.readlines()
</snippet></ROW><ROW><id>494935</id><snippet># remove empty lines
lines = [l for l in lines if len(l.strip()) &gt; 0]
header = lines[0]
line = lines[1].split(' ')
column1 = line[0]
column2 = line[1]
...
</snippet></ROW><ROW><id>494935</id><snippet>total_lines = len(lines)
total_columns = len(line)
</snippet></ROW><ROW><id>495215</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; data = numpy.array([(2, 4, 8), (3, 6, 5), (7, 5, 2)])
&gt;&gt;&gt; data
array([[2, 4, 8],
       [3, 6, 5],
       [7, 5, 2]])

&gt;&gt;&gt; data.sum()  # product of all elements
42
&gt;&gt;&gt; data.sum(axis=1)   # sum of elements in rows
array([14, 14, 14])
&gt;&gt;&gt; data.sum(axis=0)   # sum of elements in columns
array([12, 15, 15])
&gt;&gt;&gt; numpy.product(data, axis=1)   # product of elements in rows
array([64, 90, 70])
&gt;&gt;&gt; numpy.product(data, axis=0)   # product of elements in columns
array([ 42, 120,  80])
&gt;&gt;&gt; numpy.product(data)      # product of all elements
403200
</snippet></ROW><ROW><id>495215</id><snippet>&gt;&gt;&gt; x,y,z = map(numpy.array,[(2, 4, 8), (3, 6, 5), (7, 5, 2)])
&gt;&gt;&gt; x
array([2, 4, 8])
&gt;&gt;&gt; y
array([3, 6, 5])
&gt;&gt;&gt; z
array([7, 5, 2])

&gt;&gt;&gt; x*y
array([ 6, 24, 40])
&gt;&gt;&gt; x*y*z
array([ 42, 120,  80])
&gt;&gt;&gt; x+y+z
array([12, 15, 15])
</snippet></ROW><ROW><id>495215</id><snippet>&gt;&gt;&gt; numpy.log(data)
array([[ 0.69314718,  1.38629436,  2.07944154],
       [ 1.09861229,  1.79175947,  1.60943791],
       [ 1.94591015,  1.60943791,  0.69314718]])
&gt;&gt;&gt; numpy.exp(x)
array([    7.3890561 ,    54.59815003,  2980.95798704])
</snippet></ROW><ROW><id>495343</id><snippet>results = [(getattr(obj, field.attname), obj.pk) for obj in queryset or []]
</snippet></ROW><ROW><id>495570</id><snippet>my_function()</snippet></ROW><ROW><id>495570</id><snippet>debug</snippet></ROW><ROW><id>495570</id><snippet>two.py</snippet></ROW><ROW><id>495570</id><snippet>one.py -&gt; two.py -&gt; one.py</snippet></ROW><ROW><id>495570</id><snippet>NameError</snippet></ROW><ROW><id>495570</id><snippet>constants.py
------------
debug = True

one.py
------
from constants import debug
#...

two.py
------
from constants import debug
#...
</snippet></ROW><ROW><id>495610</id><snippet>import time
print int(time.time())
</snippet></ROW><ROW><id>496656</id><snippet>__init__</snippet></ROW><ROW><id>497096</id><snippet>__len__</snippet></ROW><ROW><id>497096</id><snippet>sys.maxsize</snippet></ROW><ROW><id>497096</id><snippet>len()</snippet></ROW><ROW><id>497096</id><snippet>__len__</snippet></ROW><ROW><id>497096</id><snippet>__len__</snippet></ROW><ROW><id>497096</id><snippet>len()</snippet></ROW><ROW><id>497119</id><snippet>&gt;&gt;&gt; "blah" * 5
'blahblahblahblahblah'
</snippet></ROW><ROW><id>497313</id><snippet>while work_left:
    ...do something...
    progressbar.set_fraction(...)
</snippet></ROW><ROW><id>497313</id><snippet>while work_left:
    ...do something...
    progressbar.set_fraction(...)
    while gtk.events_pending():
        gtk.main_iteration()
</snippet></ROW><ROW><id>497313</id><snippet>def my_task(data):
    ...some work...
    while heavy_work_needed:
        ...do heavy work here...
        progress_label.set_text(data) # here we update parts of UI
        # there's more work, return True
        yield True
    # no more work, return False
    yield False

def on_start_my_task_button_click(data):
    task = my_task(data)
    gobject.idle_add(task.next)
</snippet></ROW><ROW><id>497356</id><snippet>files = os.listdir(u'test_source')

for f in files:

    pf = os.path.join(u'test_source', f)
    print pf.encode('ascii', 'replace'), os.path.exists(pf)
</snippet></ROW><ROW><id>497356</id><snippet>test_source\ex True
test_source\joe True
test_source\mie.txt True
test_source\__()'''.txt True
test_source\????.txt True
</snippet></ROW><ROW><id>497356</id><snippet>os.listdir</snippet></ROW><ROW><id>497356</id><snippet>os.walk</snippet></ROW><ROW><id>497356</id><snippet>print</snippet></ROW><ROW><id>497439</id><snippet>indices = 0, 2
somelist = [i for j, i in enumerate(somelist) if j not in indices]
</snippet></ROW><ROW><id>497687</id><snippet>manage.py reset appname
</snippet></ROW><ROW><id>497773</id><snippet>', '.join([str(x) for x in list])  # list comprehension
', '.join(str(x) for x in list)    # generator expression
</snippet></ROW><ROW><id>497894</id><snippet>import operator
tuple(map(operator.add, a, b))
</snippet></ROW><ROW><id>497938</id><snippet>d = {}
</snippet></ROW><ROW><id>498038</id><snippet>import logging
logger = logging.getLogger()

for item in items:
    try:
        process(item)
    except Exception, exc:
        logger.warn("error while processing item: %s", exc)
</snippet></ROW><ROW><id>498038</id><snippet>class DomainException(Exception):
    """Life is not what I expected"""

def process(item):
    # There is no way that this item can be processed, so bail out quickly.
    # Here you are assuming that your caller will report this error but probably
    # it will be able to process the other items.
    if item.foo &gt; item.bar:
        raise DomainException("bad news")

    # Everybody knows that every item has more that 10 wickets, so
    # the following instruction is assumed always being successful.
    # But even if luck is not on our side, our caller will be able to
    # cope with this situation and keep on working
    item.wickets[10] *= 2
</snippet></ROW><ROW><id>498038</id><snippet>def main():
    try:
        do_all_the_processing()
        return 0
    except DomainException, exc:
        logger.error("I couldn't finish. The reason is: %s", exc)
        return 1
    except Exception, exc:
        logger.error("Unexpected error: %s - %s", exc.__class__.__name__, exc)
        # In this case you may want to forward a stacktrace to the developers via e-mail
        return 1
    except BaseException:
        logger.info("user stop") # this deals with a ctrl-c
        return 1

if __name__ == '__main__':
    sys.exit(main())
</snippet></ROW><ROW><id>498130</id><snippet>msbuild project.sln /Flags...
</snippet></ROW><ROW><id>498130</id><snippet>vcexpress project.sln /build /Flags...
</snippet></ROW><ROW><id>498130</id><snippet>os.system("msbuild project.sln /p:Configuration=Debug")
</snippet></ROW><ROW><id>498505</id><snippet>from filelock import FileLock

with FileLock("myfile.txt"):
    # work with the file as it is now locked
    print("Lock acquired.")
</snippet></ROW><ROW><id>499245</id><snippet>def F(n):
    if n == 0: return 0
    elif n == 1: return 1
    else: return F(n-1)+F(n-2)
</snippet></ROW><ROW><id>499245</id><snippet>def F(n):
    return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))
</snippet></ROW><ROW><id>499245</id><snippet>def F():
    a,b = 0,1
    yield a
    yield b
    while True:
        a, b = b, a + b
        yield b
</snippet></ROW><ROW><id>499245</id><snippet>def SubFib(startNumber, endNumber):
    n = 0
    cur = f(n)
    while cur &lt;= endNumber:
        if startNumber &lt;= cur:
            print cur
        n += 1
        cur = f(n)
</snippet></ROW><ROW><id>499245</id><snippet>def SubFib(startNumber, endNumber):
    for cur in F():
        if cur &gt; endNumber: return
        if cur &gt;= startNumber:
            yield cur

for i in SubFib(10, 200):
    print i
</snippet></ROW><ROW><id>499453</id><snippet>__getattr__</snippet></ROW><ROW><id>499453</id><snippet>class dispatcher(object): pass
   def __getattr__(self, name):
     # logic to determine if 'name' is a function, and what
     # function should be returned
     return the_func
server = SimpleXMLRPCServer(("localhost", 8000))
server.register_instance(dispatcher())
</snippet></ROW><ROW><id>499718</id><snippet>from IPython.Shell import IPShellEmbed
ipshell = IPShellEmbed()
ipshell() # this call anywhere in your program will start IPython
</snippet></ROW><ROW><id>499978</id><snippet>for image_name in image_fields:
    print "image name is: ", image_name
    setattr(new_form, 'clean_' + image_name, 
            lambda self, iname=image_name: self._clean_photo(iname))
</snippet></ROW><ROW><id>500512</id><snippet>import os
import subprocess
subprocess.call(["ls", "-l"], stdout=open(os.devnull, "w"), stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>500610</id><snippet>class GeneratorWrap(object):

      def __init__(self, generator):
          self.generator = generator

      def __iter__(self):
          return self

      def next(self):
          for o in self.generator:
              return o
          raise StopIteration # If you don't care about the iterator protocol, remove this line and the __iter__ method.
</snippet></ROW><ROW><id>500610</id><snippet>def example_generator():
    for i in [1,2,3,4,5]:
        yield i

gen = GeneratorWrap(example_generator())
print gen.next()  # prints 1
print gen.next()  # prints 2
</snippet></ROW><ROW><id>500870</id><snippet>re.search('test', 'TeSt', re.IGNORECASE)
re.match('test', 'TeSt', re.IGNORECASE)
</snippet></ROW><ROW><id>500870</id><snippet>result = re.sub(r'(?i)test', 'XXXX', 'TeSt')
</snippet></ROW><ROW><id>500908</id><snippet>def is_numeric(obj):
    attrs = ['__add__', '__sub__', '__mul__', '__div__', '__pow__']
    return all(hasattr(obj, attr) for attr in attrs)
</snippet></ROW><ROW><id>500908</id><snippet>numpy.array(['1'])</snippet></ROW><ROW><id>500908</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>500908</id><snippet> ... and not (isinstance(obj, ndarray) and obj.dtype.kind in 'OSU')
</snippet></ROW><ROW><id>500908</id><snippet>def is_numeric_paranoid(obj):
    try:
        obj+obj, obj-obj, obj*obj, obj**obj, obj/obj
    except ZeroDivisionError:
        return True
    except Exception:
        return False
    else:
        return True
</snippet></ROW><ROW><id>501037</id><snippet>YYYY-MM-DD HH:MM:SS</snippet></ROW><ROW><id>501037</id><snippet>SELECT * FROM tbl WHERE tbl.start = '2009-02-01 10:30:00'
</snippet></ROW><ROW><id>501037</id><snippet>SELECT * FROM tbl WHERE '2009-02-01 10:30:00' BETWEEN tbl.start AND tbl.end;
</snippet></ROW><ROW><id>501041</id><snippet>hands = {} # Create a new dictionary to hold the hands.
hands["flush"] = make_hand(deck) # Generate some hands using your function.
hands["straight"] = make_hand(deck) # Generate another hand with a different name.
print hands["flush"] # Access the hand later.
</snippet></ROW><ROW><id>501323</id><snippet>print "".join([e[1] * e[0] for e in elt])
</snippet></ROW><ROW><id>501323</id><snippet>x = []
for e in elt:
  x.append(e[1] * e[0])
print "".join(x)
</snippet></ROW><ROW><id>501323</id><snippet>for</snippet></ROW><ROW><id>501323</id><snippet>elt</snippet></ROW><ROW><id>501323</id><snippet>e</snippet></ROW><ROW><id>501698</id><snippet>for x in range(1,10):
    print '-&gt; %d' % x
</snippet></ROW><ROW><id>501698</id><snippet>:!python
</snippet></ROW><ROW><id>501698</id><snippet>:'&lt;,'&gt;!python
</snippet></ROW><ROW><id>501698</id><snippet>print</snippet></ROW><ROW><id>501698</id><snippet>:vnoremap &lt;f5&gt; :!python&lt;CR&gt;
</snippet></ROW><ROW><id>501882</id><snippet>ipython</snippet></ROW><ROW><id>501882</id><snippet>python</snippet></ROW><ROW><id>501882</id><snippet>ipython</snippet></ROW><ROW><id>501882</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>501882</id><snippet>PATH</snippet></ROW><ROW><id>501882</id><snippet>$ python yourprogram.py
</snippet></ROW><ROW><id>501882</id><snippet>$ python2.5 yourprogram.py
</snippet></ROW><ROW><id>502956</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>502956</id><snippet>sys.exit()</snippet></ROW><ROW><id>502956</id><snippet>os.abort()</snippet></ROW><ROW><id>503435</id><snippet>from django.core.management import call_command
from django.db.models import loading
loading.cache.loaded = False
call_command('syncdb', verbosity=0)
</snippet></ROW><ROW><id>505596</id><snippet>global get</snippet></ROW><ROW><id>505596</id><snippet>global</snippet></ROW><ROW><id>505596</id><snippet>get</snippet></ROW><ROW><id>505596</id><snippet>nonlocal</snippet></ROW><ROW><id>505596</id><snippet>global</snippet></ROW><ROW><id>505596</id><snippet>nonlocal get
...
</snippet></ROW><ROW><id>505596</id><snippet>global get</snippet></ROW><ROW><id>505596</id><snippet>oldget</snippet></ROW><ROW><id>506134</id><snippet> Left(Target, Len(Target)-1))
</snippet></ROW><ROW><id>506134</id><snippet> num_rows = Application.ActiveDocument.Tables(2).Rows.Count
 For n = 1 To num_rows
      Descr = Application.ActiveDocument.Tables(2).Cell(n, 2).Range.Text
</snippet></ROW><ROW><id>506134</id><snippet> For Each row in Application.ActiveDocument.Tables(2).Rows
      Descr = row.Cells(2).Range.Text
</snippet></ROW><ROW><id>507555</id><snippet>&gt;&gt;&gt; doc= pxdom.parseString('&lt;a&gt;&lt;b&gt;c&lt;/b&gt;&lt;/a&gt;')
&gt;&gt;&gt; doc.domConfig.setParameter('format-pretty-print', True)
&gt;&gt;&gt; print doc.pxdomContent
&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;a&gt;
  &lt;b&gt;c&lt;/b&gt;
&lt;/a&gt;
</snippet></ROW><ROW><id>507555</id><snippet>&gt;&gt;&gt; from xml.dom import minidom
&gt;&gt;&gt; def newwritexml(self, writer, indent= '', addindent= '', newl= ''):
...     if len(self.childNodes)==1 and self.firstChild.nodeType==3:
...         writer.write(indent)
...         self.oldwritexml(writer) # cancel extra whitespace
...         writer.write(newl)
...     else:
...         self.oldwritexml(writer, indent, addindent, newl)
... 
&gt;&gt;&gt; minidom.Element.oldwritexml= minidom.Element.writexml
&gt;&gt;&gt; minidom.Element.writexml= newwritexml
</snippet></ROW><ROW><id>508196</id><snippet> &gt;&gt;&gt; from urllib.parse import urlparse
 &gt;&gt;&gt; urlparse('http://www.cwi.nl:80/%7Eguido/Python.html').hostname
 'www.cwi.nl'
</snippet></ROW><ROW><id>508251</id><snippet>import gtk

# Even I am ashamed by this
# Set up a one-time signal handler to detect size changes
def _on_size_req(win, req):
    x, y, w, h = win.get_allocation()
    print x, y, w, h   # just to prove to you its working
    win.disconnect(win.connection_id)
    win.unmaximize()
    win.window.move_resize(x, y, w, h)

# Create the window, connect the signal, then maximise it
w = gtk.Window()
w.show_all()
w.connection_id = w.connect('size-request', _on_size_req)
# Maximizing will fire the signal handler just once,
# unmaximize, and then resize to the previously set size for maximization.
w.maximize()

# run this monstrosity
gtk.main()
</snippet></ROW><ROW><id>508664</id><snippet>CREATE TABLE t1(   a INTEGER PRIMARY</snippet></ROW><ROW><id>508664</id><snippet>KEY,   b INTEGER );</snippet></ROW><ROW><id>508664</id><snippet>INSERT INTO t1 VALUES(NULL,123);</snippet></ROW><ROW><id>508664</id><snippet>INSERT INTO t1 VALUES((SELECT max(a)
  FROM t1)+1,123);</snippet></ROW><ROW><id>508664</id><snippet>sqlite3_last_insert_rowid()</snippet></ROW><ROW><id>508677</id><snippet>matrix = [[a,b],[c,d],[e,f]]
</snippet></ROW><ROW><id>508677</id><snippet>class Matrix(object):
    def __init__(self, rows, columns, default=0):
        self.m = []
        for i in range(rows):
            self.m.append([default for j in range(columns)])

    def __getitem__(self, index):
        return self.m[index]
</snippet></ROW><ROW><id>508677</id><snippet>m = Matrix(10,5)
m[3][6] = 7
print m[3][6] // -&gt; 7
</snippet></ROW><ROW><id>508677</id><snippet>class Matrix(object):
    def __init__(self, *dims):
        self._shortcuts = [i for i in self._create_shortcuts(dims)]
        self._li = [None] * (self._shortcuts.pop())
        self._shortcuts.reverse()

    def _create_shortcuts(self, dims):
        dimList = list(dims)
        dimList.reverse()
        number = 1
        yield 1
        for i in dimList:
            number *= i
            yield number

    def _flat_index(self, index):
        if len(index) != len(self._shortcuts):
            raise TypeError()

        flatIndex = 0
        for i, num in enumerate(index):
            flatIndex += num * self._shortcuts[i]
        return flatIndex

    def __getitem__(self, index):
        return self._li[self._flat_index(index)]

    def __setitem__(self, index, value):
        self._li[self._flat_index(index)] = value
</snippet></ROW><ROW><id>508677</id><snippet>m = Matrix(4,5,2,6)
m[2,3,1,3] = 'x'
m[2,3,1,3] // -&gt; 'x'
</snippet></ROW><ROW><id>508742</id><snippet>datetime</snippet></ROW><ROW><id>508742</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>508742</id><snippet>from datetime import datetime

t1 = datetime.strptime("Mon, 17 Nov 2008 01:45:32 +0200","%a, %d %b %Y %H:%M:%S +0200")
t2 = datetime.now()

tdelta = t2 - t1 # actually a datetime.timedelta object
print tdelta.days
</snippet></ROW><ROW><id>508852</id><snippet>urls.py</snippet></ROW><ROW><id>508852</id><snippet>(r'^(?P&lt;page_name&gt;\S*)$', 'Blah.content.views.index'),
</snippet></ROW><ROW><id>508852</id><snippet>static.serve</snippet></ROW><ROW><id>508852</id><snippet>static.serve</snippet></ROW><ROW><id>509295</id><snippet>a[start:end] # items start through end-1
a[start:]    # items start through the rest of the array
a[:end]      # items from the beginning through end-1
a[:]         # a copy of the whole array
</snippet></ROW><ROW><id>509295</id><snippet>step</snippet></ROW><ROW><id>509295</id><snippet>a[start:end:step] # start through not past end, by step
</snippet></ROW><ROW><id>509295</id><snippet>:end</snippet></ROW><ROW><id>509295</id><snippet>end</snippet></ROW><ROW><id>509295</id><snippet>start</snippet></ROW><ROW><id>509295</id><snippet>step</snippet></ROW><ROW><id>509295</id><snippet>start</snippet></ROW><ROW><id>509295</id><snippet>end</snippet></ROW><ROW><id>509295</id><snippet>a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
</snippet></ROW><ROW><id>509295</id><snippet>a[:-2]</snippet></ROW><ROW><id>509295</id><snippet>a</snippet></ROW><ROW><id>509482</id><snippet>line.strip()</snippet></ROW><ROW><id>509482</id><snippet>line.rstrip('\r\n')</snippet></ROW><ROW><id>509482</id><snippet>print '"%s"' % line
</snippet></ROW><ROW><id>509482</id><snippet>print '"' + line + '"'
</snippet></ROW><ROW><id>509482</id><snippet>for line in f:
    print '"' + line.strip('\r\n') + '"'
</snippet></ROW><ROW><id>509633</id><snippet>&gt;&gt;&gt; from M2Crypto import DSA, BIO
&gt;&gt;&gt; dsa = DSA.gen_params(1024)
..+..etc
&gt;&gt;&gt; mem = BIO.MemoryBuffer()
&gt;&gt;&gt; dsa.gen_key()
&gt;&gt;&gt; dsa.save_key_bio(mem, cipher=None)
1
&gt;&gt;&gt; dsa.save_pub_key_bio(mem)
1
&gt;&gt;&gt; print mem.getvalue()
-----BEGIN DSA PRIVATE KEY-----
MIIBuwIBAAKBgQDowiLFDXGwaWIOkZybeeqSXYZ8KCLmXg5XfnAtDBlVOokB91Rj
etc.
-----END DSA PRIVATE KEY-----
-----BEGIN PUBLIC KEY-----
MIIBtzCCASsGByqGSM44BAEwggEeAoGBAOjCIsUNcbBpYg6RnJt56pJdhnwoIuZe
Dld+cC0MGVU6iQH3VGNEzKycBVQeVYke3itZwQALSlT2JfUsmOjeZYIkc9l2YYob
rixObXfQyc0AOBM/J53F0F6R8+xvEwN/Hmdd9SjjbdZi8gve+dr9UfnKHXi0KPUF
s2ougGhXeEjTAhUAiW5bMzG8nCVjXErgwaDEx+JEdtECgYACba2quw3xibhT3JNd
sDh0gIRpHPQgIgxgzGv6A09Vdb4VgtWf0MYAo6gAhxsZIWWKzQ94Oe1nf7OhC+B+
VjT+PW+ExSrbJVONTN5ycE64O7+2L+q/hZSjjkxXgfcApqeVtZp4wKqbS976Kpch
WgNl0zdkvV8JddRs0oKQ0Bl7dwOBhQACgYEAgkdF/+ncobVcYXfXHBUH3H5SLD3y
u2zUWGhXM4/MUTwPromDOQ8Zd0H7myYhmQvVUb+J9mJHMIn7Guf4JDH+8d6rBpzo
U5yEGqgsSqYqgtStzDvsKHfqw3mvjvsktm66N/vm36eai2I6J15QibdtP0lb1Um8
EeECDTxWUWT93rs=
-----END PUBLIC KEY-----

&gt;&gt;&gt;
</snippet></ROW><ROW><id>509754</id><snippet>os.chdir(os.path.dirname(__file__))
</snippet></ROW><ROW><id>509764</id><snippet>for i in range(2, 11):
    print 1.0*(1 % i) / i
</snippet></ROW><ROW><id>510182</id><snippet>sqlite3_last_insert_rowid()</snippet></ROW><ROW><id>510182</id><snippet>lastrowid</snippet></ROW><ROW><id>510182</id><snippet>cursor.execute( ... )</snippet></ROW><ROW><id>510182</id><snippet>lastid = cursor.lastrowid</snippet></ROW><ROW><id>510364</id><snippet>class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


getch = _Getch()
</snippet></ROW><ROW><id>510371</id><snippet>extra_context</snippet></ROW><ROW><id>510889</id><snippet>shell=True</snippet></ROW><ROW><id>510889</id><snippet>shell=True</snippet></ROW><ROW><id>510889</id><snippet>cmd = ['cvs', 
       '-d:pserver:anonymous@bayonne.cvs.sourceforge.net:/cvsroot/bayonne', 
       'login']
p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>510889</id><snippet>:pserver:&lt;user&gt;[:&lt;passwd&gt;]@&lt;server&gt;:/&lt;path&gt;
</snippet></ROW><ROW><id>510889</id><snippet>import subprocess

def login_to_sourceforge_cvs(project, username='anonymous', password=''):
    host = '%s.cvs.sourceforge.net' % project
    path = '/cvsroot/%s' % project
    cmd = ['cvs', 
           '-d:pserver:%s:%s@%s:%s' % (username, password, host, path), 
           'login']
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, 
                              stdout=subprocess.PIPE
                              stderr=subprocess.STDOUT) 
    return p
</snippet></ROW><ROW><id>510889</id><snippet>login_to_sourceforge_cvs('bayonne')
</snippet></ROW><ROW><id>511059</id><snippet>__name__</snippet></ROW><ROW><id>511059</id><snippet>x.__class__.__name__</snippet></ROW><ROW><id>511059</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = itertools.count(0)
&gt;&gt;&gt; x.__class__.__name__
'count'
</snippet></ROW><ROW><id>511103</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>511103</id><snippet>ldd</snippet></ROW><ROW><id>511103</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>511103</id><snippet>$ ldd $path_to/_mysql.so
...
libmysqlclient_r.so.14 =&gt; $path_to_lib/libmysqlclient_r.so.14
...
</snippet></ROW><ROW><id>511155</id><snippet>sigma</snippet></ROW><ROW><id>511155</id><snippet>mu</snippet></ROW><ROW><id>511155</id><snippet>x</snippet></ROW><ROW><id>511155</id><snippet>n</snippet></ROW><ROW><id>511155</id><snippet>int(n*f(x), x) = n*int(f(x), x)</snippet></ROW><ROW><id>511155</id><snippet>N(x | mu, sigma, n) := (n/(sigma*sqrt(2*pi))) * exp((-(x-mu)^2)/(2*sigma^2))</snippet></ROW><ROW><id>511155</id><snippet>x</snippet></ROW><ROW><id>511155</id><snippet>sigma</snippet></ROW><ROW><id>511155</id><snippet>mu</snippet></ROW><ROW><id>511155</id><snippet>n</snippet></ROW><ROW><id>511155</id><snippet>x</snippet></ROW><ROW><id>511155</id><snippet>N(x|0,1,1)</snippet></ROW><ROW><id>511155</id><snippet>N(x|0,1,1)</snippet></ROW><ROW><id>511155</id><snippet>erf</snippet></ROW><ROW><id>511155</id><snippet>erf</snippet></ROW><ROW><id>511155</id><snippet>Phi(z) = integral(N(x|0,1,1), -inf, z)</snippet></ROW><ROW><id>511155</id><snippet>Phi(z)</snippet></ROW><ROW><id>511155</id><snippet>z</snippet></ROW><ROW><id>511155</id><snippet>Phi(z) = 0.5 + 0.5 * erf(z / sqrt(2))</snippet></ROW><ROW><id>511155</id><snippet>Phi(z | mu, sigma, n) = integral( N(x|sigma, mu, n), -inf, z)</snippet></ROW><ROW><id>511155</id><snippet>Phi(z | mu, sigma, n)</snippet></ROW><ROW><id>511155</id><snippet>mu</snippet></ROW><ROW><id>511155</id><snippet>sigma</snippet></ROW><ROW><id>511155</id><snippet>n</snippet></ROW><ROW><id>511155</id><snippet>z</snippet></ROW><ROW><id>511155</id><snippet>Phi(z | mu, sigma, n) = (n/2) * (1 + erf((x - mu) / (sigma * sqrt(2))))</snippet></ROW><ROW><id>511155</id><snippet>t</snippet></ROW><ROW><id>511155</id><snippet>def make_gauss(N, sigma, mu):
    k = N / (sigma * math.sqrt(2*math.pi))
    s = -1.0 / (2 * sigma * sigma)
    def f(x):
        return k * math.exp(s * (x - mu)*(x - mu))
return f
</snippet></ROW><ROW><id>511155</id><snippet>k</snippet></ROW><ROW><id>511155</id><snippet>s</snippet></ROW><ROW><id>511155</id><snippet>**</snippet></ROW><ROW><id>511155</id><snippet>exp(x)</snippet></ROW><ROW><id>511155</id><snippet>exp(x)</snippet></ROW><ROW><id>511155</id><snippet>a**b</snippet></ROW><ROW><id>511155</id><snippet>quad()</snippet></ROW><ROW><id>511155</id><snippet>quad(gen_gauss, -inf, inf, (10,2,0))</snippet></ROW><ROW><id>511155</id><snippet>quad()</snippet></ROW><ROW><id>511155</id><snippet>quad()</snippet></ROW><ROW><id>511408</id><snippet>/project/
/project/apps/
/project/apps/app1/
/project/apps/app2
</snippet></ROW><ROW><id>511740</id><snippet>void SomeCFunction(void)
{
    /* ensure we hold the lock */
    PyGILState_STATE state = PyGILState_Ensure();
    /* Use the Python API */
    ...
    /* Restore the state of Python */
    PyGILState_Release(state);
}
</snippet></ROW><ROW><id>512273</id><snippet>distutils.dir_util.copy_tree</snippet></ROW><ROW><id>512723</id><snippet>import unittest

import os
import sys
import subprocess
import time

import dbus
import dbus.service
import dbus.glib
import gobject

class MyDBUSService(dbus.service.Object):

    def __init__(self):
    	bus_name = dbus.service.BusName('test.helloservice', bus = dbus.SessionBus())
    	dbus.service.Object.__init__(self, bus_name, '/test/helloservice')

    def listen(self):
    	loop = gobject.MainLoop()
    	loop.run()

    @dbus.service.method('test.helloservice')
    def hello(self):
    	return "Hello World!"


class BaseTestCase(unittest.TestCase):

    def setUp(self):
    	env = os.environ.copy()
    	self.p = subprocess.Popen(['python', './dbus_practice.py', 'server'], env=env)
    	# Wait for the service to become available
    	time.sleep(1)
    	assert self.p.stdout == None
    	assert self.p.stderr == None

    def testHelloService(self):
    	bus = dbus.SessionBus()
    	helloservice = bus.get_object('test.helloservice', '/test/helloservice')
    	hello = helloservice.get_dbus_method('hello', 'test.helloservice')
    	assert hello() == "Hello World!"

    def tearDown(self):
    	# terminate() not supported in Python 2.5
    	#self.p.terminate()
    	os.kill(self.p.pid, 15)

if __name__ == '__main__':

    arg = ""
    if len(sys.argv) &gt; 1:
    	arg = sys.argv[1]

    if arg == "server":
    	myservice = MyDBUSService()
    	myservice.listen()

    else:
    	unittest.main()
</snippet></ROW><ROW><id>512815</id><snippet>PyObject* PyRun_String(const char *str, int start, PyObject *globals, PyObject *locals);
</snippet></ROW><ROW><id>512815</id><snippet>*globals</snippet></ROW><ROW><id>512815</id><snippet>PyEval_GetBuiltins</snippet></ROW><ROW><id>512815</id><snippet>if (PyDict_GetItemString(globals, "__builtins__") == NULL) {
    if (PyDict_SetItemString(globals, "__builtins__",
                 PyEval_GetBuiltins()) != 0)
        return NULL;
}
</snippet></ROW><ROW><id>512815</id><snippet>PyRun_String("import __builtin__ as __builtins__", globals, locals)</snippet></ROW><ROW><id>512815</id><snippet>PyRun_String("True", ...)</snippet></ROW><ROW><id>512815</id><snippet>__main__</snippet></ROW><ROW><id>512815</id><snippet>__main__</snippet></ROW><ROW><id>512815</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>513031</id><snippet>$HOME</snippet></ROW><ROW><id>513031</id><snippet>from subprocess import Popen        

HOME = '/the/home/of/www-data' #PLEASE edit
proc = Popen(cmd, shell=False, stdin=PIPE,
             stdout=PIPE, stderr=PIPE, close_fds=True,
             cwd=HOME, env={"HOME":HOME)
</snippet></ROW><ROW><id>513339</id><snippet>&gt;&gt;&gt; range(13)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
&gt;&gt;&gt; [ '%02d' % i for i in range(13) ]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
</snippet></ROW><ROW><id>513339</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; current_dt = datetime.datetime.now()
&gt;&gt;&gt; current_dt
datetime.datetime(2009, 2, 4, 22, 2, 14, 390000)
&gt;&gt;&gt; ['AM','PM'][current_dt.hour&gt;=12]
'PM'
</snippet></ROW><ROW><id>513829</id><snippet>import gdata_api_key
print gdata_api_key.key_value
</snippet></ROW><ROW><id>514045</id><snippet>import re 
s = "name[id]"
re.find(r"\[(.*?)\]", s).group(1) # = 'id'
</snippet></ROW><ROW><id>514045</id><snippet>str.split()</snippet></ROW><ROW><id>514045</id><snippet>"i,split,on commas".split(',') # = ['i', 'split', 'on commas']
</snippet></ROW><ROW><id>514045</id><snippet>re</snippet></ROW><ROW><id>514045</id><snippet>import re
s = "name[id]"

# split by either a '[' or a ']'
re.split('\[|\]', s) # = ['name', 'id', '']
</snippet></ROW><ROW><id>514071</id><snippet>typedef boost::tuple&lt;double,double,double&gt; XYZ;

XYZ foo();

double x,y,z;
boost::tie(x,y,z) = foo();
</snippet></ROW><ROW><id>514071</id><snippet>MyMultimap::iterator lower,upper;
boost::tie(lower,upper) = some_map.equal_range(key);
</snippet></ROW><ROW><id>514101</id><snippet>&gt;&gt;&gt; class A(object):
&gt;&gt;&gt;     pass


&gt;&gt;&gt; def stuff(self):
&gt;&gt;&gt;     print self

&gt;&gt;&gt; A.test = stuff
&gt;&gt;&gt; A().test()
</snippet></ROW><ROW><id>514101</id><snippet>__dict__</snippet></ROW><ROW><id>514101</id><snippet>dictproxy</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>py</snippet></ROW><ROW><id>514395</id><snippet>rm *.pyc
</snippet></ROW><ROW><id>514395</id><snippet>find . -name '*.pyc' -delete
</snippet></ROW><ROW><id>514395</id><snippet>py</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>2.5.1(r251:54863)</snippet></ROW><ROW><id>514395</id><snippet>pyc</snippet></ROW><ROW><id>514395</id><snippet>62131</snippet></ROW><ROW><id>514395</id><snippet>2.6.1(r261:67517)</snippet></ROW><ROW><id>514395</id><snippet>62161</snippet></ROW><ROW><id>514395</id><snippet>Python/import.c</snippet></ROW><ROW><id>514395</id><snippet>1.5:   20121
1.5.1: 20121
1.5.2: 20121
1.6:   50428
2.0:   50823
2.0.1: 50823
2.1:   60202
2.1.1: 60202
2.1.2: 60202
2.2:   60717
2.3a0: 62011
2.3a0: 62021
2.3a0: 62011
2.4a0: 62041
2.4a3: 62051
2.4b1: 62061
2.5a0: 62071
2.5a0: 62081
2.5a0: 62091
2.5a0: 62092
2.5b3: 62101
2.5b3: 62111
2.5c1: 62121
2.5c2: 62131
2.6a0: 62151
2.6a1: 62161
2.7a0: 62171
</snippet></ROW><ROW><id>514629</id><snippet>select * from name_part
    where type_id=[something]
    order by used_count asc, rand()
    limit 1
</snippet></ROW><ROW><id>516129</id><snippet>for i, v in enumerate(my_list):
    my_list[i] = v or "Choice %s" % (i+1)

for j in range(len(my_list)+1, 10):
    my_list.append("Choice %s" % (j))

# maybe this is nicer for the extension?
while len(my_list) &lt; 10:
    my_list.append("Choice %s" % (len(my_list)+1))
</snippet></ROW><ROW><id>516129</id><snippet>try...except</snippet></ROW><ROW><id>516129</id><snippet>KeyboardInterrupts</snippet></ROW><ROW><id>516129</id><snippet>RuntimeErrors</snippet></ROW><ROW><id>516129</id><snippet>SyntaxErrors</snippet></ROW><ROW><id>516486</id><snippet>import re
text = "ThisFileName.txt"
print re.sub('([a-z])([A-Z])', r'\1 \2', text)
# Prints: "This File Name.txt"
</snippet></ROW><ROW><id>516486</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>516486</id><snippet>import os
filename = "ThisFileName.txt"
print os.path.splitext(filename)
# Prints: ('ThisFileName', '.txt')
</snippet></ROW><ROW><id>516531</id><snippet>t=Table(data) 
t.setStyle(TableStyle([('VALIGN',(-1,-1),(-1,-1),'MIDDLE')]))
</snippet></ROW><ROW><id>516827</id><snippet>mylib/
    src/
       java/
       python/
       perl/
       .../
    bin/
       java/
       python/
       perl/
    stage/
    dist/
</snippet></ROW><ROW><id>516827</id><snippet>src</snippet></ROW><ROW><id>516827</id><snippet>bin</snippet></ROW><ROW><id>516827</id><snippet>stage</snippet></ROW><ROW><id>516827</id><snippet>dist</snippet></ROW><ROW><id>517207</id><snippet>sys.stdout.write("Download progress: %d%%   \r" % (progress) )
sys.stdout.flush()
</snippet></ROW><ROW><id>517320</id><snippet>.png</snippet></ROW><ROW><id>517471</id><snippet>&gt;&gt;&gt; "[{0}, {1}, {2}]".format(1, 2, 3)
[1, 2, 3]
</snippet></ROW><ROW><id>517592</id><snippet>try:
    imp.find_module('django', sys.path)
except ImportError:
    print "Boo! no django for you!"
</snippet></ROW><ROW><id>517975</id><snippet>Excel.Application xlApp1 = new Excel.Application();
Excel.Application xlApp2 = new Excel.Application();
Excel.Application xlApp3 = new Excel.Application();
</snippet></ROW><ROW><id>517975</id><snippet>object objXL1 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));
object objXL2 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));
object objXL3 = Activator.CreateInstance(Type.GetTypeFromProgID("Excel.Application"));
</snippet></ROW><ROW><id>517975</id><snippet>Dim objXL1 As Object = CreateObject("Excel.Application")
Dim objXL2 As Object = CreateObject("Excel.Application")
Dim objXL3 As Object = CreateObject("Excel.Application")
</snippet></ROW><ROW><id>518007</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; clear = lambda: os.system('cls')
&gt;&gt;&gt; clear()
</snippet></ROW><ROW><id>518038</id><snippet>mylist = [1,2,3,4,5]
len(mylist)
</snippet></ROW><ROW><id>518038</id><snippet>mytuple = (1,2,3,4,5)
len(mytuple)
</snippet></ROW><ROW><id>518038</id><snippet>.length()</snippet></ROW><ROW><id>518038</id><snippet>len()</snippet></ROW><ROW><id>518038</id><snippet>__len__()</snippet></ROW><ROW><id>519483</id><snippet>from django.db import models
from django.forms import ModelForm

class Foo(models.Model):
    name = models.CharField(max_length = 30)

class Bar(models.Model):
      foos = models.ManyToManyField(Foo)

  def __unicode__(self):
      return " ".join([x.name for x in foos])
</snippet></ROW><ROW><id>519483</id><snippet>class BarForm(ModelForm):
    class Meta:
        model = Bar

def example():      
    f1 = Foo(name = 'sue')
    f1.save()
    f2 = foo(name = 'wendy')
    f2.save()
    bf = BarForm({'foos' : [f1.id, f2.id]})
    b = bf.save(commit = false)
    # unfortunately, unicode(b) doesn't work before it is saved properly,
    # so we need to do it this way: 
    if(not bf.is_valid()):
        print bf.errors
    else:
        for (key, value) in bf.cleaned_data.items():
            print key + " =&gt; " + str(value)
</snippet></ROW><ROW><id>519493</id><snippet>def sa_load_hook():
    web.ctx.sadb = Session()

def sa_unload_hook():
    web.ctx.sadb.close()

web.loadhooks['sasession'] = sa_load_hook
web.unloadhooks['sasession'] = sa_unload_hook
</snippet></ROW><ROW><id>519653</id><snippet>yield</snippet></ROW><ROW><id>519653</id><snippet>def read_in_chunks(file_object, chunk_size=1024):
    """Lazy function (generator) to read a file piece by piece.
    Default chunk size: 1k."""
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data


f = open('really_big_file.dat')
for piece in read_in_chunks(f):
    process_data(piece)
</snippet></ROW><ROW><id>519653</id><snippet>iter</snippet></ROW><ROW><id>519653</id><snippet>f = open('really_big_file.dat')
def read1k():
    return f.read(1024)

for piece in iter(read1k, ''):
    process_data(piece)
</snippet></ROW><ROW><id>519653</id><snippet>for line in open('really_big_file.dat'):
    process_data(line)
</snippet></ROW><ROW><id>521197</id><snippet>doublerInstance.add(1, 2)</snippet></ROW><ROW><id>521197</id><snippet>add</snippet></ROW><ROW><id>521197</id><snippet>def __getattr__(self, attrname) :
    fnc = getattr(self.source, attrname)
    def doubled(*args, **kwargs) :
        return 2 * fnc(*args, **kwargs)
    return doubled
</snippet></ROW><ROW><id>521361</id><snippet>import os.path
for dir, file in zip(directories, files):
    print(os.path.join(dir, file))                      # for directories, files
</snippet></ROW><ROW><id>521361</id><snippet>for i, (dir, file) in enumerate(zip(directories, files)):
    print(i, os.path.join(dir, file))
</snippet></ROW><ROW><id>521367</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; str = "Hello, *world*! Let's /go/."
&gt;&gt;&gt; str = re.sub(r"\*([^\*]*)\*", r"\textbf{\1}", str)
&gt;&gt;&gt; str = re.sub(r"/([^/]*)/",   r"\textit{\1}", str)
&gt;&gt;&gt; str
"Hello, \textbf{world}! Let's \textit{go}."
</snippet></ROW><ROW><id>521510</id><snippet> instance.__class__.__name__
</snippet></ROW><ROW><id>521510</id><snippet>&gt;&gt;&gt; class A():
    pass
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__class__.__name__
'A'
</snippet></ROW><ROW><id>521688</id><snippet>verts = [None]*1000
</snippet></ROW><ROW><id>521783</id><snippet>import os

def my_action(source, target, env):
    cmd = r'''echo its a small world after all \
        its a small world after all'''
    print cmd
    return os.system(cmd)

my_cmd_builder = Builder(
    action=my_action,  # &lt;-- CRUCIAL PIECE OF SOLUTION
    suffix = '.foo')

env = Environment()
env.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )

my_cmd = env.MyCmd('foo.foo',os.popen('which bash').read().strip())
</snippet></ROW><ROW><id>521783</id><snippet>scons: Reading SConscript files ...
scons: done reading SConscript files.
scons: Building targets ...
my_action(["foo.foo"], ["/bin/bash"])
echo its a small world after all \
        its a small world after all
its a small world after all its a small world after all
scons: done building targets.
</snippet></ROW><ROW><id>521783</id><snippet>import os

cmd = r'''echo its a small world after all \
        its a small world after all'''

def my_action(source, target, env):
    print cmd
    return os.system(cmd)

my_cmd_builder = Builder(
    action=my_action,
    suffix = '.foo')

env = Environment()
env['_MY_CMD'] = cmd  # &lt;-- CREATE IMPLICIT DEPENDENCY ON CMD STRING
env.Append( BUILDERS = {'MyCmd' : my_cmd_builder } )

my_cmd = env.MyCmd('foo.foo',os.popen('which bash').read().strip())
</snippet></ROW><ROW><id>522401</id><snippet>index(value)</snippet></ROW><ROW><id>522401</id><snippet>verts[::-1]</snippet></ROW><ROW><id>522442</id><snippet>for x in thousand[400:500]:
    pass
</snippet></ROW><ROW><id>522442</id><snippet>import itertools
for x in itertools.islice(thousand, 400, 500):
    pass
</snippet></ROW><ROW><id>522442</id><snippet>thousand[500]</snippet></ROW><ROW><id>522442</id><snippet>thousand[501]</snippet></ROW><ROW><id>522578</id><snippet>for idx, val in enumerate(ints):
    print idx, val
</snippet></ROW><ROW><id>523057</id><snippet>if vote.count(1) == 0:
    obj = VoteRecord()
    obj.user = user
    obj.option = option
    obj.put()
</snippet></ROW><ROW><id>523057</id><snippet>if vote.count(1) == 0:
    obj = VoteRecord()
    obj.user = user


if vote.count(1) == 0:
    obj = VoteRecord()
    obj.user = user
    obj.option = option
    obj.put()


    obj.option = option
    obj.put()
</snippet></ROW><ROW><id>523057</id><snippet>db.run_in_transaction()
</snippet></ROW><ROW><id>523057</id><snippet>def checkAndLockPage(pageKey):
  page = db.get(pageKey)
  if page.locked:
    return False
  else:
    page.locked = True
    page.put()
    return True
</snippet></ROW><ROW><id>523366</id><snippet>from django.http import HttpResponseRedirect

def myview(request):
    ...
    return HttpResponseRedirect("/path/")
</snippet></ROW><ROW><id>523366</id><snippet>generic views</snippet></ROW><ROW><id>523366</id><snippet>from django.views.generic.simple import redirect_to

urlpatterns = patterns('',   
    (r'^one/$', redirect_to, {'url': '/another/'}),

    #etc...
)
</snippet></ROW><ROW><id>523366</id><snippet>from django.views.generic import RedirectView

urlpatterns = patterns('',
    (r'^one/$', RedirectView.as_view(url='/another/')),
)
</snippet></ROW><ROW><id>523456</id><snippet>JButton("Push me", actionPerformed=self.nameOfMethodToCall)
</snippet></ROW><ROW><id>523456</id><snippet>from javax.swing import JButton, JFrame

class MyFrame(JFrame):
    def __init__(self):
        JFrame.__init__(self, "Hello Jython")
        button = JButton("Hello", actionPerformed=self.hello)
        self.add(button)

        self.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)
        self.setSize(300, 300)
        self.show()

    def hello(self, event):
        print "Hello, world!"

if __name__=="__main__":
    MyFrame()
</snippet></ROW><ROW><id>523485</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sat Feb 07 10:02:31 2009

import wx
import wx.grid

# begin wxGlade: extracode
# end wxGlade



class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.tree_ctrl_1 = wx.TreeCtrl(self, -1, style=wx.TR_HAS_BUTTONS|wx.TR_LINES_AT_ROOT|wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.text_ctrl_1 = wx.TextCtrl(self.window_1, -1, "This is the Edit", style=wx.TE_MULTILINE)
        self.grid_1 = wx.grid.Grid(self.window_1, -1, size=(1, 1))

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("dialog_1")
        self.grid_1.CreateGrid(10, 3)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        grid_sizer_1 = wx.FlexGridSizer(1, 2, 3, 3)
        grid_sizer_1.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        self.window_1.SplitHorizontally(self.text_ctrl_1, self.grid_1)
        grid_sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_1.AddGrowableCol(1)
        self.Layout()
        # end wxGlade

# end of class MyDialog


class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        mainDlg = MyDialog(None, -1, "")
        self.SetTopWindow(mainDlg)
        mainDlg.Show()
        return 1

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
</snippet></ROW><ROW><id>524312</id><snippet>box=((-2,1.25),(0.5,-1.25))
</snippet></ROW><ROW><id>524312</id><snippet>X_complex=X_complex_origin+(X_image/X_image_width)*X_complex_width
</snippet></ROW><ROW><id>524579</id><snippet>def splitstring(string):
    """
    &gt;&gt;&gt; string = 'apple orange "banana tree" green'
    &gt;&gt;&gt; splitstring(string)
    ['apple', 'orange', 'green', '"banana tree"']
    """
    import re
    p = re.compile(r'"[\w ]+"')
    quoted_item = p.search(string).group()
    newstring = p.sub('', string)
    return newstring.split() + [quoted_item]
</snippet></ROW><ROW><id>524624</id><snippet>pos</snippet></ROW><ROW><id>524624</id><snippet>for</snippet></ROW><ROW><id>524624</id><snippet>while</snippet></ROW><ROW><id>524624</id><snippet>openBr</snippet></ROW><ROW><id>524624</id><snippet>0</snippet></ROW><ROW><id>524624</id><snippet>pos</snippet></ROW><ROW><id>524624</id><snippet>openBr</snippet></ROW><ROW><id>524624</id><snippet>for (</snippet></ROW><ROW><id>524624</id><snippet>0</snippet></ROW><ROW><id>524624</id><snippet>for</snippet></ROW><ROW><id>524624</id><snippet>openBr</snippet></ROW><ROW><id>524624</id><snippet>0</snippet></ROW><ROW><id>524624</id><snippet>for(...)</snippet></ROW><ROW><id>524722</id><snippet>class B():
    def __init__(self):
        self.c = C()
</snippet></ROW><ROW><id>524736</id><snippet>isinstance(item, type)</snippet></ROW><ROW><id>524736</id><snippet>if isinstance(foo, int):
    pass # handle this case
</snippet></ROW><ROW><id>524842</id><snippet>class Something( object ):
    def __init__( self ):
        self.a= 2
        self.b= 3

x= Something()
getattr( x, 'a' )
getattr( x, 'b' )
</snippet></ROW><ROW><id>525000</id><snippet>'django.core.context_processors.request',
</snippet></ROW><ROW><id>525000</id><snippet>settings.TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>525091</id><snippet>__import__</snippet></ROW><ROW><id>525230</id><snippet>eAssignBad = 0
eAssignMismatch = 1
eAssignmentSignMix = 2

eAssignErrors = {
    eAssignBad: 'Bad assignment',
    eAssignMismatch: 'Mismatched thingy',
    eAssignmentSignMix: 'Bad sign mixing'
}
</snippet></ROW><ROW><id>525271</id><snippet>urllib.quote</snippet></ROW><ROW><id>525271</id><snippet>import urllib
print urllib.quote("some url")

some%20url
</snippet></ROW><ROW><id>525312</id><snippet>with open('myfile.txt', 'rw+') as file:
    for line in file:
        processLine(line)
    file.truncate(0)
</snippet></ROW><ROW><id>525312</id><snippet>lines = open('myfile.txt').readlines()

for i, line in enumerate(lines[:]):
    processLine(line)
    del lines[i]

open('myfile.txt', 'w').writelines(lines)
</snippet></ROW><ROW><id>525312</id><snippet>import fileinput

for line in fileinput.input(['myfile.txt'], inplace=1):
    try: processLine(line)
    except:
         sys.stdout.write(line) # it prints to 'myfile.txt'
</snippet></ROW><ROW><id>525481</id><snippet>else if (PyInt_Check(result)) {
    long obj_size = PyInt_AsLong(result);
    if (obj_size &lt; 0 || obj_size &gt; total_size) {
        PyErr_Format(ErrorObject, "invalid return value for write callback %ld %ld", (long)obj_size, (long)total_size);
        goto verbose_error;
    }
</snippet></ROW><ROW><id>525486</id><snippet>ICO</snippet></ROW><ROW><id>525486</id><snippet>400Kb</snippet></ROW><ROW><id>525486</id><snippet>PNG</snippet></ROW><ROW><id>525486</id><snippet>png2ico myicon.ico logo16x16.png logo32x32.png logo255x255.png
</snippet></ROW><ROW><id>525486</id><snippet>ICO</snippet></ROW><ROW><id>525486</id><snippet>PNG</snippet></ROW><ROW><id>525552</id><snippet>(mac &lt;-&gt; router &lt;-&gt; router &lt;-&gt; ISP)</snippet></ROW><ROW><id>525650</id><snippet>|</snippet></ROW><ROW><id>525650</id><snippet>&gt;&gt;&gt; re.sub(r'(^|\W)GBP([\W\d])', u'\g&lt;1&gt;£\g&lt;2&gt;', text)
u'\xa3 5 Off when you spend \xa375.00'
</snippet></ROW><ROW><id>526031</id><snippet>addition=(im1arr+im2arr)/2
</snippet></ROW><ROW><id>526031</id><snippet>&gt;&gt;&gt;array([255,10,100],dtype='uint8') +  array([1,10,160],dtype='uint8')
array([ 0, 20,  4], dtype=uint8)
</snippet></ROW><ROW><id>526031</id><snippet>im1arrF = im1arr.astype('float')
im2arrF = im2arr.astype('float')
additionF = (im1arrF+im2arrF)/2
addition = additionF.astype('uint8')
</snippet></ROW><ROW><id>526031</id><snippet>addition = im1arr/2 + im2arr/2
</snippet></ROW><ROW><id>526300</id><snippet>import random

def weighted_choice(items):
    """items is a list of tuples in the form (item, weight)"""
    weight_total = sum((item[1] for item in items))
    n = random.uniform(0, weight_total)
    for item, weight in items:
        if n &lt; weight:
            return item
        n = n - weight
    return item
</snippet></ROW><ROW><id>526300</id><snippet>def weighted_choice_bisect(items):
    added_weights = []
    last_sum = 0

    for item, weight in items:
        last_sum += weight
        added_weights.append(last_sum)

    return items[bisect.bisect(added_weights, random.random() * last_sum)][0]
</snippet></ROW><ROW><id>526300</id><snippet>def weighted_choice_compile(items):
    """returns a function that fetches a random item from items

    items is a list of tuples in the form (item, weight)"""
    weight_total = sum((item[1] for item in items))
    def choice(uniform = random.uniform):
        n = uniform(0, weight_total)
        for item, weight in items:
            if n &lt; weight:
                return item
            n = n - weight
        return item
    return choice
</snippet></ROW><ROW><id>526300</id><snippet>def weighted_choice_bisect_compile(items):
    """Returns a function that makes a weighted random choice from items."""
    added_weights = []
    last_sum = 0

    for item, weight in items:
        last_sum += weight
        added_weights.append(last_sum)

    def choice(rnd=random.random, bis=bisect.bisect):
        return items[bis(added_weights, rnd() * last_sum)][0]
    return choice
</snippet></ROW><ROW><id>526300</id><snippet>choices = [(random.choice("abcdefg"), random.uniform(0,50)) for i in xrange(2500)]
</snippet></ROW><ROW><id>526300</id><snippet>def profiler(f, n, *args, **kwargs):
    start = time.time()
    for i in xrange(n):
        f(*args, **kwargs)
    return time.time() - start
</snippet></ROW><ROW><id>526450</id><snippet>from datetime import timedelta,datetime
try:
    offset = int("Tue, 22 Jul 2008 08:17:41 +0300"[-5:])
except:
    print "Error"

delta = timedelta(hours = offset / 100)

fmt = "%a, %d %b %Y %H:%M:%S"
time = datetime.strptime("Tue, 22 Jul 2008 08:17:41 +0200"[:-6], fmt)
time -= delta
</snippet></ROW><ROW><id>526656</id><snippet>def article_update(request, id):
   article = get_objects_or_404(Article, pk=id)

   if request.method == 'POST':
      form = ArticleForm(request.POST, instance=article)

      if form.is_valid():
         form.save()

         return HttpResponseRedirect(to-some-suitable-url)

   else:
      form = ArticleForm(instance=article)

   return render_to_response('article_update.html', { 'form': form })
</snippet></ROW><ROW><id>526781</id><snippet>argv[0] = "C:\Program Files\ My Installer\Setup.exe"
argv[1] = /s /v "/qn /lv %TEMP%\log_silent.log"
</snippet></ROW><ROW><id>526781</id><snippet>argv[1] = "/s"
argv[2] = "/v"
argv[3] = "/qn"
argv[4] = "/lv %TEMP%\log_silent.log"
</snippet></ROW><ROW><id>526781</id><snippet>%TEMP%</snippet></ROW><ROW><id>526781</id><snippet>p = subprocess.Popen('C:\Program Files\ My Installer\Setup.exe /s /v "/qn /lv %TEMP%\log_silent.log"', shell=True)
output = p.communicate()[0]
</snippet></ROW><ROW><id>526781</id><snippet>s = ['C:\Program Files\ My Installer\Setup.exe', '/s /v "/qn /lv %TEMP%\log_silent.log"']
safes = [os.path.expandvars(p) for p in argument_string]
p = subprocess.Popen(safes[0], safes[1:])
output = p.communicate()[0]
</snippet></ROW><ROW><id>527014</id><snippet>import threading;

class foo(threading.Thread):
    def __init__(self):
        #initialize anything
    def run(self):
        while True:
            str = raw_input("input something");

class bar:
    def __init__(self)
        self.thread = foo(); #initialize the thread (foo) class and store
        self.thread.start(); #this command will start the loop in the new thread (the run method)
        if(quit):
            #quit
</snippet></ROW><ROW><id>527152</id><snippet>map</snippet></ROW><ROW><id>527152</id><snippet>reduce</snippet></ROW><ROW><id>527229</id><snippet>class FlushFile(object):
    """Write-only flushing wrapper for file-type objects."""
    def __init__(self, f):
        self.f = f
    def write(self, x):
        self.f.write(x)
        self.f.flush()

# Replace stdout with an automatically flushing version
sys.stdout = FlushFile(sys.__stdout__)
</snippet></ROW><ROW><id>527437</id><snippet>while not myThread.wantToQuit</snippet></ROW><ROW><id>527647</id><snippet>''.join('&lt;p&gt;%s&lt;/p&gt;' % line for line in text.split('\r\n\r\n'))
# Results:
u"&lt;p&gt;Finally Sri Lanka showed up, prevented their first 5-0
series whitewash, and stopped India at nine ODI wins in a row. &lt;/p&gt;
&lt;p&gt;For 62 balls Yuvraj Singh played a dream knock, keeping India in the 
game despite wickets falling around him. &lt;/p&gt;&lt;p&gt;Perhaps the toss played
a big part. This was only the second time Mahela Jayawardene beat Mahendra
Singh Dhoni with the coin in the last 11 occasions. &lt;/p&gt;
&lt;p&gt;It was Jayasuriya who provided Sri Lanka with the springboard. &lt;/p&gt;
&lt;p&gt;The pyrotechnics may have stopped upon Jayasuriya's dismissal, but 
the runs kept coming at a fair pace.&lt;/p&gt;"
</snippet></ROW><ROW><id>527903</id><snippet>model = models.Progress
</snippet></ROW><ROW><id>527964</id><snippet>import</snippet></ROW><ROW><id>529052</id><snippet>&gt;&gt;&gt; while True:
...     pass
...
</snippet></ROW><ROW><id>529052</id><snippet>&gt;&gt;&gt; import time 
&gt;&gt;&gt; while True:
...     time.sleep(1)
...
</snippet></ROW><ROW><id>529415</id><snippet>def report_progress(self, percent_str, data_len_str, speed_str, eta_str):
    """Report download progress."""
    print u'[download] %s of %s at %s ETA %s' % (percent_str, data_len_str, speed_str, eta_str)
</snippet></ROW><ROW><id>529427</id><snippet>reversed()</snippet></ROW><ROW><id>529427</id><snippet>&gt;&gt;&gt; a = ["foo", "bar", "baz"]
&gt;&gt;&gt; for i in reversed(a):
...     print i
... 
baz
bar
foo
</snippet></ROW><ROW><id>529427</id><snippet>&gt;&gt;&gt; for i, e in reversed(list(enumerate(a))):
...     print i, e
... 
2 baz
1 bar
0 foo
</snippet></ROW><ROW><id>530213</id><snippet>a = "%d bottles of %s on the wall" % (10, "beer")</snippet></ROW><ROW><id>530213</id><snippet>a = sprintf("%d bottles of %s on the wall", 10, "beer");</snippet></ROW><ROW><id>530213</id><snippet>a</snippet></ROW><ROW><id>530213</id><snippet>"10 bottles of beer on the wall"</snippet></ROW><ROW><id>530213</id><snippet>a = "{0} bottles of {1} on the wall".format(10, "beer")</snippet></ROW><ROW><id>530358</id><snippet>&gt;&gt; ("Kr",) + "foo"
</snippet></ROW><ROW><id>530358</id><snippet>TypeError: can only concatenate tuple (not "str") to tuple
</snippet></ROW><ROW><id>530358</id><snippet>if len(card) != 2:
    print type(card)
    raise ValueError(card + ' is not a known card.')
</snippet></ROW><ROW><id>530363</id><snippet>reverse</snippet></ROW><ROW><id>530363</id><snippet>{% url %}</snippet></ROW><ROW><id>530363</id><snippet>django-admin</snippet></ROW><ROW><id>530363</id><snippet>csv</snippet></ROW><ROW><id>531105</id><snippet>Err</snippet></ROW><ROW><id>531105</id><snippet>Err.Description</snippet></ROW><ROW><id>531105</id><snippet>Err.Number</snippet></ROW><ROW><id>531105</id><snippet>VbObjectError + someCustomErrorNumber</snippet></ROW><ROW><id>531220</id><snippet>from datetime import datetime

def str2datetime(s):
    parts = s.split('.')
    dt = datetime.strptime(parts[0], "%Y-%m-%d %H:%M:%S")
    return dt.replace(microsecond=int(parts[1]))
</snippet></ROW><ROW><id>531220</id><snippet>strptime</snippet></ROW><ROW><id>531387</id><snippet>dos2unix &lt;filename&gt;</snippet></ROW><ROW><id>532710</id><snippet>python -m SimpleHTTPServer [port]
</snippet></ROW><ROW><id>533045</id><snippet>dumps</snippet></ROW><ROW><id>533077</id><snippet>formatter = logging.Formatter('[%(asctime)s] p%(process)s {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s','%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>533315</id><snippet>class C:
    @classmethod
    def f(cls):
        print(cls.__name__, type(cls))

&gt;&gt;&gt; C.f()
C &lt;class 'type'&gt;
</snippet></ROW><ROW><id>533315</id><snippet>cls</snippet></ROW><ROW><id>533770</id><snippet>books = Book.objects.filter(authorbook__author_id=1)
</snippet></ROW><ROW><id>533917</id><snippet>import itertools
for element in itertools.product(*somelists):
    print element
</snippet></ROW><ROW><id>534049</id><snippet>os.system()</snippet></ROW><ROW><id>534049</id><snippet>system(3)</snippet></ROW><ROW><id>534049</id><snippet>system(3)</snippet></ROW><ROW><id>534049</id><snippet>/bin/sh</snippet></ROW><ROW><id>534049</id><snippet>/bin/sh</snippet></ROW><ROW><id>534049</id><snippet>tcsh</snippet></ROW><ROW><id>534049</id><snippet>/bin/bash</snippet></ROW><ROW><id>534049</id><snippet>chroot</snippet></ROW><ROW><id>534049</id><snippet>/bin/sh</snippet></ROW><ROW><id>534049</id><snippet>tcsh</snippet></ROW><ROW><id>534049</id><snippet>/bin/sh</snippet></ROW><ROW><id>534049</id><snippet>bash</snippet></ROW><ROW><id>534049</id><snippet>tcsh</snippet></ROW><ROW><id>534049</id><snippet>tcsh</snippet></ROW><ROW><id>534049</id><snippet>os.system('tcsh -c...')</snippet></ROW><ROW><id>534151</id><snippet>bg_pixmap[state] = "&lt;parent&gt;"
</snippet></ROW><ROW><id>534151</id><snippet>bg_pixmap[state] = "&lt;none&gt;"
</snippet></ROW><ROW><id>534597</id><snippet>

class Dynamo(object):
    pass

def add_dynamo(cls,i):
    def innerdynamo(self):
        print "in dynamo %d" % i
    innerdynamo.__doc__ = "docstring for dynamo%d" % i
    innerdynamo.__name__ = "dynamo%d" % i
    setattr(cls,innerdynamo.__name__,innerdynamo)

for i in range(2):
    add_dynamo(Dynamo, i)

d=Dynamo()
d.dynamo0()
d.dynamo1()

</snippet></ROW><ROW><id>534597</id><snippet>
in dynamo 0
in dynamo 1
</snippet></ROW><ROW><id>534615</id><snippet>names_dict = dict((name,index)
                  for index,lst in enumerate(names)
                  for name in lst)
</snippet></ROW><ROW><id>534615</id><snippet>&gt;&gt;&gt; names = [['Tom', 'Dick'], ['Harry', 'John', 'Mike'], ['Bob']]
&gt;&gt;&gt; names_dict = dict((name,index)
...                   for index,lst in enumerate(names)
...                   for name in lst)
&gt;&gt;&gt; names_dict
{'Tom': 0, 'Mike': 1, 'Dick': 0, 'Harry': 1, 'Bob': 2, 'John': 1}
</snippet></ROW><ROW><id>534866</id><snippet>[a - b for a, b in zip(a, b)]
</snippet></ROW><ROW><id>536087</id><snippet>from mako import exceptions

try:
    template = lookup.get_template(uri)
    print template.render()
except:
    print exceptions.html_error_template().render()
</snippet></ROW><ROW><id>536265</id><snippet>ifstream f("data.txt");
string str;
while (getline(f, str)) {
    Point p;
    sscanf(str.c_str(), "%f, %f, %f\n", &amp;p.x, &amp;p.y, &amp;p.z); 
    points.push_back(p);
}
</snippet></ROW><ROW><id>536265</id><snippet>#include &lt;iostream&gt;
#include &lt;fstream&gt;
</snippet></ROW><ROW><id>536685</id><snippet>sys.path.append('/path/to/flup/egg/flup-1.0.1-py2.5.egg')
</snippet></ROW><ROW><id>537192</id><snippet>array</snippet></ROW><ROW><id>537192</id><snippet>a = array.array('B', data)
&gt;&gt;&gt; a.tostring()
'\x00\x01\x02\x03\x04\x05'
</snippet></ROW><ROW><id>537192</id><snippet>'B'</snippet></ROW><ROW><id>537192</id><snippet>'i'</snippet></ROW><ROW><id>537405</id><snippet>python -mtimeit -s"N=10**6" "a = []; app = a.append;"\
    "for i in xrange(N):  app(i);"
10 loops, best of 3: 390 msec per loop

python -mtimeit -s"N=10**6" "a = [None]*N; app = a.append;"\
    "for i in xrange(N):  a[i] = i"
10 loops, best of 3: 245 msec per loop

python -mtimeit -s"from array import array; N=10**6" "a = array('i', [0]*N)"\
    "for i in xrange(N):" "  a[i] = i"
10 loops, best of 3: 541 msec per loop

python -mtimeit -s"from numpy import zeros; N=10**6" "a = zeros(N,dtype='i')"\
    "for i in xrange(N):" "  a[i] = i"
10 loops, best of 3: 353 msec per loop
</snippet></ROW><ROW><id>537405</id><snippet>[None]*N</snippet></ROW><ROW><id>537405</id><snippet>array.array</snippet></ROW><ROW><id>537480</id><snippet>import sys
import threading
import time
import select

def timeout_read(n_chars):
  r, _, _ = select.select([sys.stdin], [], [], 1)
  return r[0].read(n_chars) if r else ""

class MyThread (threading.Thread):
    def run (self):
        try:
            self.wantQuit = 0
            while not self.wantQuit:
                print "want input"
                button = timeout_read(1)
                if button == "q":
                    self.wantQuit=1
        except KeyboardInterrupt:
            self.wantQuit = 1
            print "abort with KeyboardInterrupt"
        print "done mythread"

myThread = MyThread ()
myThread.start()

a=5
while not myThread.wantQuit:
    print "hey"
    if (a == 0):
        break;
    a = a-1;
    time.sleep(1)
myThread.wantQuit=1
print "main thread done"
</snippet></ROW><ROW><id>537521</id><snippet>LoadModule wsgi_module /usr/local/lib/mod_wsgi.so
...

&lt;VirtualHost *:80&gt;
    ServerName                  www.example.com
    DocumentRoot                /www/example/htdocs
    WSGIScriptAliasMatch ^/$    /www/example/application.py
    WSGIScriptAlias      /wsgi  /www/example/application.py
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>537521</id><snippet>#!/usr/bin/env python
from mymodule import MyApplication

application= MyApplication()

if __name__=='main':
    import wsgiref.handlers
    wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>537916</id><snippet>@ʞɔıu</snippet></ROW><ROW><id>537916</id><snippet>@Jason S</snippet></ROW><ROW><id>537916</id><snippet>from __future__ import with_statement
from hashlib import md5, sha1

filename = 'hash_one-pass.py'

hashes = md5(), sha1()
chunksize = max(4096, max(h.block_size for h in hashes))
with open(filename, 'rb') as f:
    while True:
        chunk = f.read(chunksize)
        if not chunk:
            break
        for h in hashes:
            h.update(chunk)

for h in hashes:
    print h.name, h.hexdigest()
</snippet></ROW><ROW><id>538374</id><snippet>for c in "string":
    #do something with c
</snippet></ROW><ROW><id>538374</id><snippet>for loop</snippet></ROW><ROW><id>538374</id><snippet>open("file.txt")</snippet></ROW><ROW><id>538374</id><snippet>for line in open(filename):
    # do something with line
</snippet></ROW><ROW><id>538374</id><snippet>for</snippet></ROW><ROW><id>538374</id><snippet>next()</snippet></ROW><ROW><id>538374</id><snippet>__iter__</snippet></ROW><ROW><id>538374</id><snippet>__iter__</snippet></ROW><ROW><id>538374</id><snippet>next()</snippet></ROW><ROW><id>538583</id><snippet>long</snippet></ROW><ROW><id>538583</id><snippet>int</snippet></ROW><ROW><id>538583</id><snippet>int</snippet></ROW><ROW><id>538701</id><snippet>easy_install pip</snippet></ROW><ROW><id>538701</id><snippet>PIP_DOWNLOAD_CACHE</snippet></ROW><ROW><id>538701</id><snippet>pip install</snippet></ROW><ROW><id>538701</id><snippet>easy_install</snippet></ROW><ROW><id>538818</id><snippet>def hours(self):
    retval = ""
    if self.totalTime:
        hoursfloat = self.totalTime.seconds / 3600
        retval = round(hoursfloat)
    return retval

def minutes(self):
    retval = ""
    if self.totalTime:
        minutesfloat = self.totalTime.seconds / 60
        hoursAsMinutes = self.hours() * 60
        retval = round(minutesfloat - hoursAsMinutes)
    return retval
</snippet></ROW><ROW><id>538818</id><snippet>&lt;td&gt;{{ sum.0 }}&lt;/td&gt;    
&lt;td&gt;{{ sum.1.hours|stringformat:"d" }}:{{ sum.1.minutes|stringformat:"#02.0d" }}&lt;/td&gt;
</snippet></ROW><ROW><id>539106</id><snippet>print('Two pair, {0}s and {1}s'.format(*cards))
</snippet></ROW><ROW><id>539147</id><snippet>class GroupMember(db.Model):
    group = db.ReferenceProperty(Group, collection_name="groupMembers")
    user = db.ReferenceProperty(User, collection_name="groupMembers")
</snippet></ROW><ROW><id>539147</id><snippet># get the group entity somehow
group = Group.get(group_key)     
# do something with the members, such as list the nicknames
nicknames = [x.user.nickname for x in group.groupMembers]
</snippet></ROW><ROW><id>539159</id><snippet>os.listdir</snippet></ROW><ROW><id>539159</id><snippet>os.path.join</snippet></ROW><ROW><id>539427</id><snippet>from werkzeug import Local, LocalManager
local = Local()
local_manager = LocalManager([local])

from jinja2 import Environment, FileSystemLoader

# Create a global dict using the local's proxy to the request attribute
global_dict = {'request': local('request')}
jinja2_env = Environment(loader=FileSystemLoader('/'))
jinja2_env.globals.update(global_dict)

def application(environ, start_response):
    """A WSGI Application"""
    # later, bind the actual attribute to the local object
    local.request = request = Request(environ)

    # continue to view handling code
    # ...

application = local_manager.make_middleware(application)
</snippet></ROW><ROW><id>540375</id><snippet>class Scrolled(wx.ScrolledWindow):
    def __init__(self, parent):
        wx.ScrolledWindow.__init__(self, parent, size=(200,200))
        self.SetScrollRate(0, 10);
        sizerV = wx.BoxSizer(wx.VERTICAL)
        #create a bunch of stuff in the sizer which doesnt fit
        for i in range(0,50):
            text = "Line: " + str(i)
            sizerV.Add(wx.StaticText(self, label=text), 0)

        self.SetSizer(sizerV)

class Frame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, size=(200,200), Scrolled(self)
            title="Scroll Bars", style=wx.CAPTION)
</snippet></ROW><ROW><id>541003</id><snippet>smtplib</snippet></ROW><ROW><id>541003</id><snippet>From:</snippet></ROW><ROW><id>541003</id><snippet>message = 'From: me@example.com\nSubject: [PGS]: Results\n\nBlaBlaBla'
</snippet></ROW><ROW><id>541003</id><snippet>smtplib</snippet></ROW><ROW><id>541394</id><snippet>os.path.splitext</snippet></ROW><ROW><id>541394</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; fileName, fileExtension = os.path.splitext('/path/to/somefile.ext')
&gt;&gt;&gt; fileName
'/path/to/somefile'
&gt;&gt;&gt; fileExtension
'.ext'
</snippet></ROW><ROW><id>541566</id><snippet>void**</snippet></ROW><ROW><id>541566</id><snippet>void*</snippet></ROW><ROW><id>541566</id><snippet>%typemap (in,numinputs=0) void** (void *temp)
{
    $1 = &amp;temp;
}

%typemap (argout) void**
{
    PyObject *obj = PyCObject_FromVoidPtr(*$1);
    $result = PyTuple_Pack(2, $result, obj);
}
</snippet></ROW><ROW><id>541566</id><snippet>import test
success, p = test.Operation()
theAnswer = 0.0f
if success:
   theAnswer = test.GetFieldValue(p)
   test.Cleanup(p)
</snippet></ROW><ROW><id>541566</id><snippet>void*</snippet></ROW><ROW><id>541566</id><snippet>void*</snippet></ROW><ROW><id>541566</id><snippet>%typemap (in) void*
{
    $1 = PyCObject_AsVoidPtr($input);
}
</snippet></ROW><ROW><id>542080</id><snippet>b'a,b'.split(',')
</snippet></ROW><ROW><id>542096</id><snippet>opts = Variables()
opts.Add('fcgi',0)
env = Environment(variables=opts, ...)
</snippet></ROW><ROW><id>542096</id><snippet>if env['fcgi'] == 0:
    # do something
</snippet></ROW><ROW><id>542619</id><snippet>/directory.ext/file</snippet></ROW><ROW><id>542619</id><snippet>.split('.')</snippet></ROW><ROW><id>542942</id><snippet>foo = Portal("Foo")

bar = Agent("bar")

foo.Connect("ip", 1234)

foo.Add(bar)

bar.Ready = bar_Ready

def bar_Ready(sender, msg):

    print msg.body
</snippet></ROW><ROW><id>543029</id><snippet>a [op] b</snippet></ROW><ROW><id>543322</id><snippet>import sys
sys.exit("Error message")
</snippet></ROW><ROW><id>544564</id><snippet>from functools import partial

for name in iter(partial(raw_input, 'Name:'), ''):
    do_something_with(name)
</snippet></ROW><ROW><id>544564</id><snippet>&gt;&gt;&gt; names = list(iter(partial(raw_input, 'Name: '), ''))
Name: nosklo
Name: Andreas
Name: Aaron
Name: Phil
Name: 
&gt;&gt;&gt; names
['nosklo', 'Andreas', 'Aaron', 'Phil']
</snippet></ROW><ROW><id>544932</id><snippet>lines = open(filename).read().splitlines()
</snippet></ROW><ROW><id>545237</id><snippet>30819f300d06092a864886f70d010101050003818d0030818902818100df1b822e14eda1fcb74336
6a27c06370e6cad69d4116ce806b3d117534cf0baa938c0f8e4500fb59d4d98fb471a8d01012d54b
32244197c7434f27c1b0d73fa1b8bae55e70155f907879ce9c25f28a9a92ff97de1684fdaff05dce
196ae76845f598b328c5ed76e0f71f6a6b7448f08691e6a556f5f0d773cb20d13f629b6391020301
0001
</snippet></ROW><ROW><id>545237</id><snippet>   0 30  159: SEQUENCE {
   3 30   13:   SEQUENCE {
   5 06    9:     OBJECT IDENTIFIER rsaEncryption (1 2 840 113549 1 1 1)
  16 05    0:     NULL
            :     }
  18 03  141:   BIT STRING 0 unused bits, encapsulates {
  22 30  137:       SEQUENCE {
  25 02  129:         INTEGER
            :           00 DF 1B 82 2E 14 ED A1 FC B7 43 36 6A 27 C0 63
            :           70 E6 CA D6 9D 41 16 CE 80 6B 3D 11 75 34 CF 0B
            :           AA 93 8C 0F 8E 45 00 FB 59 D4 D9 8F B4 71 A8 D0
            :           10 12 D5 4B 32 24 41 97 C7 43 4F 27 C1 B0 D7 3F
            :           A1 B8 BA E5 5E 70 15 5F 90 78 79 CE 9C 25 F2 8A
            :           9A 92 FF 97 DE 16 84 FD AF F0 5D CE 19 6A E7 68
            :           45 F5 98 B3 28 C5 ED 76 E0 F7 1F 6A 6B 74 48 F0
            :           86 91 E6 A5 56 F5 F0 D7 73 CB 20 D1 3F 62 9B 63
            :           91
 157 02    3:         INTEGER 65537
            :         }
            :       }
            :   }
</snippet></ROW><ROW><id>545446</id><snippet>__init__</snippet></ROW><ROW><id>545517</id><snippet>', '.join()</snippet></ROW><ROW><id>545517</id><snippet>To:</snippet></ROW><ROW><id>545517</id><snippet>Cc:</snippet></ROW><ROW><id>545517</id><snippet>connection.sendmail(senderaddress, to.split(), mailtext)
</snippet></ROW><ROW><id>546024</id><snippet>p = subprocess.Popen([sys.executable, '/path/to/script.py'], 
                                    stdout=subprocess.PIPE, 
                                    stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>546128</id><snippet>&lt;/p&gt;

&lt;pre&gt;
def pbs_errno():
    return c_int.in_dll(libtorque, "pbs_errno")
&lt;/pre&gt;

&lt;p&gt;</snippet></ROW><ROW><id>546356</id><snippet>import datetime
print (datetime.date.today() + datetime.timedelta(6*365/12)).isoformat()
</snippet></ROW><ROW><id>546435</id><snippet>SELECT SUM(qty) GROUP BY order_number</snippet></ROW><ROW><id>546435</id><snippet>( list_of_details, appropriate summary )</snippet></ROW><ROW><id>546435</id><snippet>{% for order in orderList %}
    {% for line in order.0 %}
        {{ line }}
    {% endfor %}
    {{ order.1 }}
{% endfor %}
</snippet></ROW><ROW><id>546435</id><snippet>details = Line.objects.all()
ddict = defaultdict( list )
for d in details:
    ddict[d.order_number].append(d)

interleaved= []
subtotals = ... Django query to get subtotals ... 
for s in subtotals:
    interleaved.append( ( ddict[s.order], s.totals ) )
</snippet></ROW><ROW><id>546435</id><snippet>interleaved</snippet></ROW><ROW><id>547714</id><snippet>from werkzeug import BaseRequest

class Request(BaseRequest):
    pass
</snippet></ROW><ROW><id>547714</id><snippet>from werkzeug import BaseRequest, AcceptMixin

class Request(BaseRequest, AcceptMixin):
    pass
</snippet></ROW><ROW><id>547714</id><snippet>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin

class Request(BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthorizationMixin):
    pass
</snippet></ROW><ROW><id>547787</id><snippet>posts</snippet></ROW><ROW><id>547787</id><snippet>posts.extra()</snippet></ROW><ROW><id>547787</id><snippet>posts = posts.extra(select={'score': """
                    SELECT SUM(vote)
                    FROM %s
                    WHERE content_type_id = %s
                    AND object_id = %s.id
                    AND voted_at &gt; DATE(%s)
                    AND voted_at &lt; DATE(%s)
                """ % (qn(Vote._meta.db_table), ctype.id, qn(Post._meta.db_table), start, end)},
                        order_by=['-score'])
</snippet></ROW><ROW><id>547817</id><snippet>&gt;&gt;&gt; def dashrepl(matchobj):
...     if matchobj.group(0) == '-': return ' '
...     else: return '-'
&gt;&gt;&gt; re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
</snippet></ROW><ROW><id>547867</id><snippet>def my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
</snippet></ROW><ROW><id>547867</id><snippet>__import__</snippet></ROW><ROW><id>547867</id><snippet>__import__('foo.bar.baz.qux')
</snippet></ROW><ROW><id>547867</id><snippet>my_import('foo.bar.baz.qux')
</snippet></ROW><ROW><id>547867</id><snippet>klass = my_import('my_package.my_module.my_class')
some_object = klass()
</snippet></ROW><ROW><id>547867</id><snippet>from my_package.my_module import my_class
</snippet></ROW><ROW><id>547867</id><snippet>mod = __import__('my_package.my_module', fromlist=['my_class'])
klass = getattr(mod, 'my_class')
</snippet></ROW><ROW><id>548358</id><snippet>itertools.product</snippet></ROW><ROW><id>548358</id><snippet>import itertools
truth_values = itertools.product((True, False), repeat = 4)
people = (person_a, person_b, person_c, person_d)
all_people_and_states = [[person(truth) for person, truth in zip(people, combination)] for combination in truth_values]
</snippet></ROW><ROW><id>549362</id><snippet>SetTitleMatchMode 2
#IfWinActive python
tab::
Send, {SPACE}
Send, {SPACE}
Send, {SPACE}
Send, {SPACE}
</snippet></ROW><ROW><id>549543</id><snippet>&gt;&gt;&gt; q = set([9, 8, 7, 7, 8, 5, 4, 1])
&gt;&gt;&gt; q.pop()
1
&gt;&gt;&gt; q.pop()
4
&gt;&gt;&gt; q.pop()
5
&gt;&gt;&gt; q.add(3)
&gt;&gt;&gt; q.add(3)
&gt;&gt;&gt; q.add(3)
&gt;&gt;&gt; q.add(3)
&gt;&gt;&gt; q
set([3, 7, 8, 9]
</snippet></ROW><ROW><id>549643</id><snippet>encode_plain()</snippet></ROW><ROW><id>549643</id><snippet>def encode_plain(user, password):
    s = "\0%s\0%s" % (user, password)
    return encode_base64(s.encode('ascii'), eol='')
</snippet></ROW><ROW><id>549748</id><snippet>self</snippet></ROW><ROW><id>549748</id><snippet>None</snippet></ROW><ROW><id>549748</id><snippet>+</snippet></ROW><ROW><id>549748</id><snippet>[2]+[]</snippet></ROW><ROW><id>550044</id><snippet>[\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{1,4}
</snippet></ROW><ROW><id>550044</id><snippet>[\w\-]</snippet></ROW><ROW><id>550044</id><snippet>[\w\-\.]+</snippet></ROW><ROW><id>550044</id><snippet>@</snippet></ROW><ROW><id>550044</id><snippet>[\w\-]</snippet></ROW><ROW><id>550044</id><snippet>[\w\-\.]+</snippet></ROW><ROW><id>550044</id><snippet>[a-zA-Z]{1,4}</snippet></ROW><ROW><id>550044</id><snippet>From: [\w\s]+?&lt;([\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{1,4})&gt;
</snippet></ROW><ROW><id>550044</id><snippet>From: </snippet></ROW><ROW><id>550044</id><snippet>[\w\s]+?</snippet></ROW><ROW><id>550044</id><snippet>&lt;</snippet></ROW><ROW><id>550044</id><snippet>m.group(1)</snippet></ROW><ROW><id>550044</id><snippet>&gt;</snippet></ROW><ROW><id>550044</id><snippet>import re
foundemail = []

mailsrch = re.compile(r'From: [\w\s]+?&lt;([\w\-][\w\-\.]+@[\w\-][\w\-\.]+[a-zA-Z]{1,4})&gt;')

for line in open("text.txt"):
    foundemail.extend([m.group(1) for m in mailsrch.finditer(line)])

print foundemail
</snippet></ROW><ROW><id>550044</id><snippet>[m.group(1) for m in mailsrch.finditer(line)]</snippet></ROW><ROW><id>550157</id><snippet># env is the environment handed to you by the WSGI server.
# I am removing the query string from the env before passing it to the
# FieldStorage so we only have POST data in there.
post_env = env.copy()
post_env['QUERY_STRING'] = ''
post = cgi.FieldStorage(
    fp=env['wsgi.input'],
    environ=post_env,
    keep_blank_values=True
)
</snippet></ROW><ROW><id>550161</id><snippet>from X import *
</snippet></ROW><ROW><id>550161</id><snippet>from X import foo, bar, blah
</snippet></ROW><ROW><id>550161</id><snippet>import X.foo
</snippet></ROW><ROW><id>550161</id><snippet>X.foo.moo()
</snippet></ROW><ROW><id>550161</id><snippet>foo.moo()
</snippet></ROW><ROW><id>550161</id><snippet>from X import y</snippet></ROW><ROW><id>550161</id><snippet>import X.y</snippet></ROW><ROW><id>550308</id><snippet>resident = Resident.objects.filter(name='Johnny')
resident.ssa_set.all() # fail
resident = resident.get() # will fail if more than one returned by filter
resident.ssa_set.all() # works, since we're operating on an instance, not a queryset
</snippet></ROW><ROW><id>550488</id><snippet>print</snippet></ROW><ROW><id>550488</id><snippet>tee</snippet></ROW><ROW><id>550488</id><snippet>python yourscript.py | tee output.txt</snippet></ROW><ROW><id>550722</id><snippet>global</snippet></ROW><ROW><id>550722</id><snippet>sleepTime =</snippet></ROW><ROW><id>550722</id><snippet>sleepTime</snippet></ROW><ROW><id>550822</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; 
&gt;&gt;&gt; def my_global_exception_handler(type, value, traceback):
...     print traceback
...     sys.exit()
... 
&gt;&gt;&gt; sys.excepthook = my_global_exception_handler
&gt;&gt;&gt; raise
&lt;traceback object at 0xb7cfcaa4&gt;
</snippet></ROW><ROW><id>550915</id><snippet>[rectangle setX: 10 y: 10 width: 20 height: 20];
</snippet></ROW><ROW><id>550915</id><snippet>  objc_msgSend(rectangle, "setX:y:width:height:", 10, 10, 20, 20);
</snippet></ROW><ROW><id>551048</id><snippet>class _Internal:
    ...
</snippet></ROW><ROW><id>551533</id><snippet>Py_NoSiteFlag = 1;  // Disable importing site.py
Py_Initialize();    // Create a python interpreter
</snippet></ROW><ROW><id>551704</id><snippet>import win32print
PRINTER_DEFAULTS = {"DesiredAccess":win32print.PRINTER_ALL_ACCESS}
pHandle = win32print.OpenPrinter('RICOH-LOCAL', PRINTER_DEFAULTS)
properties = win32print.GetPrinter(pHandle, 2) #get the properties
pDevModeObj = properties["pDevMode"] #get the devmode
automaticTray = 7
tray_one = 1
tray_two = 3
tray_three = 2
printer_tray = []
pDevModeObj.DefaultSource = tray_three #set the tray
properties["pDevMode"]=pDevModeObj #write the devmode back to properties
win32print.SetPrinter(pHandle,2,properties,0) #save the properties to the printer
</snippet></ROW><ROW><id>551704</id><snippet>from win32com import client
    import time
    ie = client.Dispatch("InternetExplorer.Application")
    def printPDFDocument(filename):
        ie.Navigate(filename)
        if ie.Busy:
            time.sleep(1)
        ie.Document.printAll()
    ie.Quit()
</snippet></ROW><ROW><id>551804</id><snippet>t = timeit.Timer("foo()")
</snippet></ROW><ROW><id>551804</id><snippet>t = timeit.Timer("foo()", "from __main__ import foo")
</snippet></ROW><ROW><id>552229</id><snippet>&gt;&gt;&gt; import magicdate
&gt;&gt;&gt; magicdate.magicdate('today')
datetime.date(2009, 2, 15)
&gt;&gt;&gt; magicdate.magicdate('tomorrow')
datetime.date(2009, 2, 16)
&gt;&gt;&gt; magicdate.magicdate('yesterday')
datetime.date(2009, 2, 14)
</snippet></ROW><ROW><id>552229</id><snippet>&gt;&gt;&gt; import mx.DateTime

&gt;&gt;&gt; mx.DateTime.Parser.DateTimeFromString("Today 3:20 PM")
&lt;mx.DateTime.DateTime object for '2009-02-15 15:20:00.00' at 28faa28&gt;

&gt;&gt;&gt; mx.DateTime.Parser.DateTimeFromString("Tomorrow 5:50 PM")
&lt;mx.DateTime.DateTime object for '2009-02-15 17:50:00.00' at 2a86088&gt;
</snippet></ROW><ROW><id>552229</id><snippet>&gt;&gt;&gt; import parsedatetime.parsedatetime as pdt
&gt;&gt;&gt; import parsedatetime.parsedatetime_consts as pdc
&gt;&gt;&gt; c=pdc.Constants()
&gt;&gt;&gt; p=pdt.Calendar(c)
&gt;&gt;&gt; p.parse('Today 3:20 PM')
((2010, 3, 12, 15, 20, 0, 4, 71, -1), 3)
&gt;&gt;&gt; p.parse('Yesterday 11:06 AM')
((2010, 3, 11, 11, 6, 0, 3, 70, -1), 3)
</snippet></ROW><ROW><id>552229</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2010, 3, 12, 15, 23, 35, 951652)
</snippet></ROW><ROW><id>552363</id><snippet>self.DefaultDomainName
</snippet></ROW><ROW><id>552363</id><snippet>Manager.DefaultDomainName

# also referenced by
self.__class__.DefaultDomainName
</snippet></ROW><ROW><id>552363</id><snippet>print "1: %s" % id(self.DefaultDomainName)
print "2: %s" % id(Manager.DefaultDomainName)
</snippet></ROW><ROW><id>552363</id><snippet># Debug with pdb.  Follow every step of the process to ensure that you are 
# setting valeus as you thought, and that the code you thought would be 
# called is actually being called.  I've had many problems like this where 
# the error was in procedure, not in the actual code at hand.
import pdb; pdb.set_trace()

# check to see if id(Manager) is the same as id(self.__class__)

# in the set_domain() function:
# check to see what attributes you can see on Manager, 
# and if they match the attributes on Manager and self.__class__ in __init__
</snippet></ROW><ROW><id>552530</id><snippet>NoneType</snippet></ROW><ROW><id>552530</id><snippet>None</snippet></ROW><ROW><id>552530</id><snippet>if current_product.size: # This will evaluate as false if size is None or len(size) == 0.
  blah blah
</snippet></ROW><ROW><id>552810</id><snippet>&gt;&gt;&gt; from guppy import hpy; h=hpy()
&gt;&gt;&gt; h.heap()
Partition of a set of 48477 objects. Total size = 3265516 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  25773  53  1612820  49   1612820  49 str
     1  11699  24   483960  15   2096780  64 tuple
     2    174   0   241584   7   2338364  72 dict of module
     3   3478   7   222592   7   2560956  78 types.CodeType
     4   3296   7   184576   6   2745532  84 function
     5    401   1   175112   5   2920644  89 dict of class
     6    108   0    81888   3   3002532  92 dict (no owner)
     7    114   0    79632   2   3082164  94 dict of type
     8    117   0    51336   2   3133500  96 type
     9    667   1    24012   1   3157512  97 __builtin__.wrapper_descriptor
&lt;76 more rows. Type e.g. '_.more' to view.&gt;
&gt;&gt;&gt; h.iso(1,[],{})
Partition of a set of 3 objects. Total size = 176 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1  33      136  77       136  77 dict (no owner)
     1      1  33       28  16       164  93 list
     2      1  33       12   7       176 100 int
&gt;&gt;&gt; x=[]
&gt;&gt;&gt; h.iso(x).sp
 0: h.Root.i0_modules['__main__'].__dict__['x']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>553320</id><snippet>import random
import time

def strTimeProp(start, end, format, prop):
    """Get a time at a proportion of a range of two formatted times.

    start and end should be strings specifying times formated in the
    given format (strftime-style), giving an interval [start, end].
    prop specifies how a proportion of the interval to be taken after
    start.  The returned time will be in the specified format.
    """

    stime = time.mktime(time.strptime(start, format))
    etime = time.mktime(time.strptime(end, format))

    ptime = stime + prop * (etime - stime)

    return time.strftime(format, time.localtime(ptime))


def randomDate(start, end, prop):
    return strTimeProp(start, end, '%m/%d/%Y %I:%M %p', prop)

print randomDate("1/1/2008 1:30 PM", "1/1/2009 4:50 AM", random.random())
</snippet></ROW><ROW><id>553333</id><snippet>def timeout(func, args=(), kwargs={}, timeout_duration=1, default=None):
    '''This function will spwan a thread and run the given function using the args, kwargs and 
    return the given default value if the timeout_duration is exceeded 
    ''' 
    import threading
    class InterruptableThread(threading.Thread):
        def __init__(self):
            threading.Thread.__init__(self)
            self.result = default
        def run(self):
            try:
                self.result = func(*args, **kwargs)
            except:
                self.result = default
    it = InterruptableThread()
    it.start()
    it.join(timeout_duration)
    if it.isAlive():
        return it.result
    else:
        return it.result
</snippet></ROW><ROW><id>554028</id><snippet>itertools.groupby</snippet></ROW><ROW><id>554028</id><snippet>next_morris</snippet></ROW><ROW><id>554028</id><snippet>def next_morris(number):
    return ''.join('%s%s' % (len(list(group)), digit)
                   for digit, group in itertools.groupby(str(number)))
</snippet></ROW><ROW><id>554028</id><snippet>print next_morris(1)
11
print next_morris(111221)
312211
</snippet></ROW><ROW><id>554028</id><snippet>def morris_generator(maxlen, start=1):
    num = str(start)
    while len(num) &lt; maxlen:
        yield int(num)
        num = next_morris(num)
</snippet></ROW><ROW><id>554028</id><snippet>for n in morris_generator(10):
    print n
</snippet></ROW><ROW><id>554028</id><snippet>1
11
21
1211
111221
312211
13112221
</snippet></ROW><ROW><id>554580</id><snippet>import urllib2

#redirect_handler = urllib2.HTTPRedirectHandler()

class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        print "Cookie Manip Right Here"
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)

    http_error_301 = http_error_303 = http_error_307 = http_error_302

cookieprocessor = urllib2.HTTPCookieProcessor()

opener = urllib2.build_opener(MyHTTPRedirectHandler, cookieprocessor)
urllib2.install_opener(opener)

response =urllib2.urlopen("WHEREEVER")
print response.read()

print cookieprocessor.cookiejar
</snippet></ROW><ROW><id>554810</id><snippet>kitty</snippet></ROW><ROW><id>554810</id><snippet>class new_style_class: public Py::PythonClass&lt; new_style_class &gt;</snippet></ROW><ROW><id>554810</id><snippet>simple.cxx</snippet></ROW><ROW><id>554812</id><snippet>class idClasses:
    class ID12345:pass
    class ID01234:pass
# could also be: import idClasses

class ProcessDirector:
    def __init__(self):
        self.allClasses = []

    def construct(self, builderName):
        targetClass = getattr(idClasses, builderName)
        instance = targetClass()
        self.allClasses.append(instance)

IDS = ["ID12345", "ID01234"]

director = ProcessDirector()
for id in IDS:
    director.construct(id)

print director.allClasses
# [&lt;__main__.ID12345 instance at 0x7d850&gt;, &lt;__main__.ID01234 instance at 0x7d918&gt;]
</snippet></ROW><ROW><id>554881</id><snippet>subprocess.py</snippet></ROW><ROW><id>554881</id><snippet># This module should remain compatible with Python 2.2, see PEP 291.</snippet></ROW><ROW><id>554914</id><snippet>stackless_accept</snippet></ROW><ROW><id>554914</id><snippet>list</snippet></ROW><ROW><id>554914</id><snippet>Sock</snippet></ROW><ROW><id>554914</id><snippet>sockets</snippet></ROW><ROW><id>554914</id><snippet>remove</snippet></ROW><ROW><id>554989</id><snippet>d = {'bar': 'a', 'foo': 'b'}
regexp = '%(foo)s|%(bar)s' % d
</snippet></ROW><ROW><id>554989</id><snippet>vlist = ['a', 'b', 'c']
regexp = '|'.join([s for s in vlist])
</snippet></ROW><ROW><id>554989</id><snippet>filename = 'bob_20090216.txt'

regexps = {'bob': 'bob_[0-9]+.txt',
           'fred': 'fred_[0-9]+.txt',
           'paul': 'paul_[0-9]+.txt'}

for filetype, regexp in regexps.items():
    m = re.match(regexp, filename)
    if m != None:
        print '%s is of type %s' % (filename, filetype)
</snippet></ROW><ROW><id>555396</id><snippet>def makeKey2( row2 ):
    return ( row2[1], row2[2] ) # Whatever the lookup key is for source2

def makeKey1( row1 ):
    return ( row1[3], row1[0] ) # Whatever the lookup key is for source1

dayFile = [ open("day%d.pajek","w") for i in range(6) ]
combined = open("combined.dat","w")
source1 = open( schedules, "r" )
rdr1= csv.reader( source1 )
source2 = open( aboutSchedules, "r" )
rdr2= csv.reader( source2 )

# "Combine" usually means a relational join between source 1 and source 2.
# We'll assume that source2 is a small-ish dimension and the
# source1 is largish facts

aboutDim = dict( (makeKey2(row),row) for row in rdr2 )

for row in rdr1:
    connection, dayList = mine_and_combine( row, aboutDim[ makeKey1(row) ] )
    for d in dayList:
        dayFile[d].write( connection )
    flags = [ 1 if d is in dayList else 0 for d in range(6) ]
    combined.write( connection, flags )
</snippet></ROW><ROW><id>555404</id><snippet>paren_pattern = re.compile(r"\(([^()]*)\)(?=(?:\s*\([^()]*\))*\s*$)")

def getParens(s):
  return paren_pattern.findall(s)
</snippet></ROW><ROW><id>555404</id><snippet>getParens = re.compile(r"\(([^()]*)\)(?=(?:\s*\([^()]*\))*\s*$)").findall
</snippet></ROW><ROW><id>555404</id><snippet>\(                     # opening paren
([^()]*)               # content, captured into group 1
\)                     # closing paren
(?=                    # look ahead for...
  (?:\s*\([^()]*\))*   #   a series of parens, separated by whitespace
  \s*                  #   possibly more whitespace after
  $                    #   end of string
)                      # end of look ahead
</snippet></ROW><ROW><id>555724</id><snippet>string.translate</snippet></ROW><ROW><id>555724</id><snippet>import string
"abc".translate(string.maketrans("abc", "def")) # =&gt; "def"
</snippet></ROW><ROW><id>555724</id><snippet>tr</snippet></ROW><ROW><id>555724</id><snippet>re.sub</snippet></ROW><ROW><id>556295</id><snippet>file = open("test.txt", 'wb')
thing = {'a': 1, 'b':2}
cPickle.dump(thing, file)
</snippet></ROW><ROW><id>556574</id><snippet>import urllib2
# Create an OpenerDirector with support for Basic HTTP Authentication...
auth_handler = urllib2.HTTPBasicAuthHandler()
auth_handler.add_password(realm='PDQ Application',
                          uri='https://mahler:8092/site-updates.py',
                          user='klem',
                          passwd='kadidd!ehopper')
opener = urllib2.build_opener(auth_handler)
# ...and install it globally so it can be used with urlopen.
urllib2.install_opener(opener)
urllib2.urlopen('http://www.example.com/login.html')
</snippet></ROW><ROW><id>556946</id><snippet>from array import array
from datetime import datetime

def WriteInts(theArray,filename):
    f = file(filename,"wb")
    theArray.tofile(f)
    f.close()

def ReadInts(filename):
    d = datetime.utcnow()
    theArray = array('i')
    f = file(filename,"rb")
    try:
        theArray.fromfile(f,1000000000)
    except EOFError:
        pass
    print "Read %d ints in %s" % (len(theArray),datetime.utcnow() - d)
    return theArray

if __name__ == "__main__":
    a = array('i')
    a.extend(range(0,1000000))
    filename = "a_million_ints.dat"
    WriteInts(a,filename)
    r = ReadInts(filename)
    print "The 5th element is %d" % (r[4])
</snippet></ROW><ROW><id>557020</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>557932</id><snippet>fw</snippet></ROW><ROW><id>557932</id><snippet>:0</snippet></ROW><ROW><id>557932</id><snippet>:0 fw</snippet></ROW><ROW><id>557932</id><snippet>stdin</snippet></ROW><ROW><id>557932</id><snippet>stdout</snippet></ROW><ROW><id>557932</id><snippet>fw</snippet></ROW><ROW><id>557932</id><snippet>f</snippet></ROW><ROW><id>557932</id><snippet>w</snippet></ROW><ROW><id>558322</id><snippet>assert_approx_equal</snippet></ROW><ROW><id>558322</id><snippet>numpy.testing</snippet></ROW><ROW><id>558322</id><snippet>def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True):
    """
    Raise an assertion if two items are not equal up to significant digits.

    .. note:: It is recommended to use one of `assert_allclose`,
              `assert_array_almost_equal_nulp` or `assert_array_max_ulp`
              instead of this function for more consistent floating point
              comparisons.

    Given two numbers, check that they are approximately equal.
    Approximately equal is defined as the number of significant digits
    that agree.
</snippet></ROW><ROW><id>558392</id><snippet>import re
rx = re.compile("((?:@\w+ +)+)(.*)")
t='@abc   @def  @xyz Hello this part is text and my email is foo@ba.r'
a,s = rx.match(t).groups()
l = re.split('[@ ]+',a)[1:-1]
print l
print s
</snippet></ROW><ROW><id>558392</id><snippet>/@\w+ +/
</snippet></ROW><ROW><id>558392</id><snippet>/(@\w+ +)+/
</snippet></ROW><ROW><id>558392</id><snippet>/(?:@\w+ +)+/
</snippet></ROW><ROW><id>558392</id><snippet>/((?:@\w+ +)+)(.*)/
</snippet></ROW><ROW><id>558392</id><snippet>((?:@\w+ +)+)(.*)
 (?:@\w+ +)+
 (  @\w+ +)
    @\w+ +
</snippet></ROW><ROW><id>558552</id><snippet>def PrintProductsBelowNumber(number):
    number1 = 1
    while number1 &lt;= number:
        number2 = 1
        while number2 &lt;= number:
            print(number1, "*", number2, "=", number1 * number2)
            number2 += 1
        number1 += 1

PrintProductsBelowNumber(2)
</snippet></ROW><ROW><id>559006</id><snippet>root = get_nodes.mmnode_plus.factory('somenodes.xml')

tests = [
    (root, {'skip_traversal': False, 'skip_as_child': True, 'skip_as_parent': False, 'is_leaf': False}),
    (root[0], {'skip_traversal': False, 'skip_as_child': False, 'skip_as_parent': False, 'is_leaf': False}),
    (root[1], {'skip_traversal': True, 'skip_as_child': True, 'skip_as_parent': True}),
    (root[1][0], {'skip_traversal': True}),
    (root[0][0], {'is_leaf': False, 'skip_traversal': False, 'skip_as_child': False, 'skip_as_parent': False}),
    (root[0][0][0], {'is_leaf': True, 'skip_traversal': False, 'skip_as_child': False, 'skip_as_parent': True}),
    (root[0][4], {'skip_traversal': True, 'skip_as_child': True, 'skip_as_parent': True}),
    (root[0][7], {'skip_traversal': False, 'skip_as_child': False, 'skip_as_parent': True}),
]

i = 0
for (node, states) in tests:
    for test_state, exp_result in states.iteritems():

        input = node.__getattribute__(test_state)()
        errstr = "expected %s, not %s for state %s of node %s" % (input, exp_result, test_state, repr(node))

        locals()['foo' + str(i)] = type('foo' + str(i), (unittest.TestCase,),
            {'input': input, 'exp_result': exp_result, 'errstr': errstr, 'testme': lambda self: self.assertEqual(self.input, self.exp_result, self.errstr)})
        i += 1
</snippet></ROW><ROW><id>559238</id><snippet>(defadvice py-execute-buffer (after advice-delete-output-window activate)                                      
  (delete-windows-on "*Python Output*"))
</snippet></ROW><ROW><id>559442</id><snippet>from pyPdf import PdfFileReader
doc = PdfFileReader(file("upload.pdf", "rb"))
</snippet></ROW><ROW><id>559442</id><snippet>doc</snippet></ROW><ROW><id>559442</id><snippet>documentInfo()</snippet></ROW><ROW><id>559442</id><snippet>numPages()</snippet></ROW><ROW><id>559479</id><snippet>import DNS, smtplib

DNS.DiscoverNameServers()
mx_hosts = DNS.mxlookup(hostname)

# Just doing the mxlookup might be enough for you,
# but do something like this to test for SMTP server
for mx in mx_hosts:
    smtp = smtplib.SMTP()
    #.. if this doesn't raise an exception it is a valid MX host...
    try:
        smtp.connect(mx[1])
    except smtplib.SMTPConnectError:
        continue # try the next MX server in list
</snippet></ROW><ROW><id>559896</id><snippet>&gt;&gt;&gt; import wmi
&gt;&gt;&gt; c = wmi.WMI()
&gt;&gt;&gt; for x in c.Win32_ConnectionShare():
        print "%s: %s" % (x.Dependent.Username, x.Dependent.ComputerName)
</snippet></ROW><ROW><id>560044</id><snippet>if FLAG:
    def f():
        print "Flag is set"
else:
    def f():
        print "Flag is not set"
</snippet></ROW><ROW><id>560044</id><snippet>if hasattr(aModule, 'FLAG'):
    # do stuff if FLAG is defined in the current module.
</snippet></ROW><ROW><id>560505</id><snippet>x = [1,2,3]
y = [4,5,6]
</snippet></ROW><ROW><id>560505</id><snippet>zip(x,y) == [(1,4),(2,5),(3,6)]</snippet></ROW><ROW><id>560505</id><snippet>a = numpy.array(zip(x,y), dtype=dtype)
</snippet></ROW><ROW><id>560552</id><snippet>Pet.full_name</snippet></ROW><ROW><id>560552</id><snippet>select_related</snippet></ROW><ROW><id>560552</id><snippet>Pet.full_name</snippet></ROW><ROW><id>560552</id><snippet>class Client(models.Model):
    # ...
    def get_pets(self):
        for pet in self.pets.all():
            setattr(pet, '_client_cache', self)
            yield pet
</snippet></ROW><ROW><id>560552</id><snippet>'client'</snippet></ROW><ROW><id>560552</id><snippet>'_client_cache'</snippet></ROW><ROW><id>560552</id><snippet>SingleRelatedObjectDescriptor</snippet></ROW><ROW><id>560552</id><snippet>{% for pet in client.get_pets %}
...
{% endfor %}
</snippet></ROW><ROW><id>561072</id><snippet>import pyamf

class Book(object):    
def _get_number_of_odd_pages(self):
  return 52

numberOfOddPages = property(_get_number_of_odd_pages)

pyamf.register_class(Book, 'Book')

encoded = pyamf.encode(Book()).getvalue() 
print pyamf.decode(encoded).next().numberOfOddPages
</snippet></ROW><ROW><id>561085</id><snippet>import re

str = """&lt;p class="foo-body"&gt;
  &lt;font class="test-proof"&gt;Full name&lt;/font&gt; Foobar&lt;br /&gt;
  &lt;font class="test-proof"&gt;Born&lt;/font&gt; July 7, 1923, foo, bar&lt;br /&gt;
  &lt;font class="test-proof"&gt;Current age&lt;/font&gt; 27 years 226 days&lt;br /&gt;
  &lt;font class="test-proof"&gt;Major teams&lt;/font&gt; &lt;span style="white-space: nowrap"&gt;Japan,&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;Jakarta,&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;bazz,&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;foo,&lt;/span&gt; &lt;span style="white-space: nowrap"&gt;foobazz&lt;/span&gt;&lt;br /&gt;
  &lt;font class="test-proof"&gt;Also&lt;/font&gt; bar&lt;br /&gt;
  &lt;font class="test-proof"&gt;foo style&lt;/font&gt; hand &lt;br /&gt;
  &lt;font class="test-proof"&gt;bar style&lt;/font&gt; ball&lt;br /&gt;
  &lt;font class="test-proof"&gt;foo position&lt;/font&gt; bak&lt;br /&gt;
  &lt;br class="bar" /&gt;
&lt;/p&gt;"""

R_EXTRACT_DATA = re.compile("&lt;font\s[^&gt;]*&gt;[\s]*(.*?)[\s]*&lt;/font&gt;[\s]*(.*?)[\s]*&lt;br /&gt;", re.IGNORECASE)
R_STRIP_TAGS = re.compile("&lt;span\s[^&gt;]*&gt;|&lt;/span&gt;", re.IGNORECASE)

def strip_tags(str):
    """Strip un-necessary &lt;span&gt; tags
    """
    return R_STRIP_TAGS.sub("", str)

def get_info(str):
    """Extract useful info from the given string
    """
    data = R_EXTRACT_DATA.findall(str)
    data_dict = {}

    for x in [(x[0], strip_tags(x[1])) for x in data]:
        data_dict[x[0]] = x[1]

    return data_dict

print get_info(str)
</snippet></ROW><ROW><id>561704</id><snippet>import string
ALPHABET = string.ascii_uppercase + string.ascii_lowercase + \
           string.digits + '-_'
ALPHABET_REVERSE = dict((c, i) for (i, c) in enumerate(ALPHABET))
BASE = len(ALPHABET)
SIGN_CHARACTER = '$'

def num_encode(n):
    if n &lt; 0:
        return SIGN_CHARACTER + num_encode(-n)
    s = []
    while True:
        n, r = divmod(n, BASE)
        s.append(ALPHABET[r])
        if n == 0: break
    return ''.join(reversed(s))

def num_decode(s):
    if s[0] == SIGN_CHARACTER:
        return -num_decode(s[1:])
    n = 0
    for c in s:
        n = n * BASE + ALPHABET_REVERSE[c]
    return n
</snippet></ROW><ROW><id>561704</id><snippet>    &gt;&gt;&gt; num_encode(0)
    'A'
    &gt;&gt;&gt; num_encode(64)
    'BA'
    &gt;&gt;&gt; num_encode(-(64**5-1))
    '$_____'
</snippet></ROW><ROW><id>561860</id><snippet>import order
o = order.foo()
</snippet></ROW><ROW><id>561860</id><snippet>model
    __init__.py
    client.py
    staff.py
    order.py
</snippet></ROW><ROW><id>561860</id><snippet>import model.client
</snippet></ROW><ROW><id>561860</id><snippet>import model.client
o = model.client.clientclass()
</snippet></ROW><ROW><id>561860</id><snippet>from .client import clientclass as client
from .staff import staffclass as staff
from .order import orderclass as order
</snippet></ROW><ROW><id>561860</id><snippet>import model
c = model.client()
s = model.staff()
o = model.order()
</snippet></ROW><ROW><id>561860</id><snippet>import model.client
o = model.client.clientclass()
</snippet></ROW><ROW><id>562530</id><snippet>im.save(outfile, options...)

im.save(outfile, format, options...)
</snippet></ROW><ROW><id>562530</id><snippet>im.save('my_image.png')
</snippet></ROW><ROW><id>562530</id><snippet>save</snippet></ROW><ROW><id>562530</id><snippet>quality</snippet></ROW><ROW><id>562530</id><snippet>optimize</snippet></ROW><ROW><id>562530</id><snippet>progressive</snippet></ROW><ROW><id>562535</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>562535</id><snippet>cgi.FieldStorage</snippet></ROW><ROW><id>562535</id><snippet>make_file</snippet></ROW><ROW><id>562535</id><snippet>import os
import cgi

class MyFieldStorage(cgi.FieldStorage):
    def make_file(self, binary=None):
        return open(os.path.join('/tmp', self.filename), 'wb')
</snippet></ROW><ROW><id>562535</id><snippet>FieldStorage</snippet></ROW><ROW><id>562535</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>562535</id><snippet>cgi</snippet></ROW><ROW><id>562535</id><snippet>tempfile</snippet></ROW><ROW><id>562695</id><snippet>def gs(a,b):
    class SameEvent(Exception):
        pass
    def ry():
        if a==b:
            raise SameEvent(a)
    try:
        # Do stuff here, and call ry whenever you want to return if they are the same.
        ry()

        # It will now return 3.
        a = b = 3
        ry()

    except SameEvent as e:
        return e.args[0]
</snippet></ROW><ROW><id>563412</id><snippet>from eventlet import httpc
try:
    res = httpc.head(url)
except httpc.NotFound:
    # handle 404
</snippet></ROW><ROW><id>565698</id><snippet>&lt;asp:...</snippet></ROW><ROW><id>566172</id><snippet>class Pathology(models.Model):
    pathology = models.CharField(max_length=100)
    publications = models.ManyToManyField(Publication)

class Publication(models.Model):
    pubtitle = models.TextField()
</snippet></ROW><ROW><id>566172</id><snippet>def pathology(request):
    pathology_id = request.POST['pathology_id'] 
    p = get_object_or_404(Pathology, pk=pathology_id)
    publications = p.publications.all()
    return render_to_response('my_template.html',
                              {'publications':publications},
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>566260</id><snippet>mysql_cursor.execute( "call get_lastpoll();" )
results=mysql_cursor.fetchone()
print results[0]
</snippet></ROW><ROW><id>566260</id><snippet>2009-02-19 17:10:42
</snippet></ROW><ROW><id>566563</id><snippet>python -c "for x in range(1,10): print x"
</snippet></ROW><ROW><id>566563</id><snippet>python -c "for x in range(1,10): x==1 and __import__('calendar').prcal(2009); print x;"
</snippet></ROW><ROW><id>566703</id><snippet>import operator

ranges = {
    '4'  : 'a',
    '70' : 'b',
    '700': 'c',
    '701': 'd',
    '85' : 'e',
    '87' : 'a',
}

def id_for_value(value):
    possible = '*'
    for idvalue, id in sorted(ranges.iteritems()):
        if value.startswith(idvalue):
            possible = id
        elif idvalue &gt; value:
            break
    return possible
</snippet></ROW><ROW><id>566703</id><snippet>assert id_for_value('10') == '*'
assert id_for_value('499') == 'a'
assert id_for_value('703') == 'b'
assert id_for_value('7007') == 'c'
assert id_for_value('7017') == 'd'
assert id_for_value('76') == id_for_value('83') == '*'
assert id_for_value('857') == 'e'
assert id_for_value('8716') == 'a'
</snippet></ROW><ROW><id>566703</id><snippet>def firstlast(iterator):
    """ Returns the first and last value of an iterator"""
    first = last = iterator.next()
    for value in iterator:
        last = value
    return first, last

maxlen = max(len(x) for x in ranges) + 1
test_range = ('%0*d' % (maxlen, i) for i in xrange(10 ** maxlen))
result = dict((firstlast(gr), id) 
              for id, gr in itertools.groupby(test_range, key=id_for_value))
</snippet></ROW><ROW><id>566703</id><snippet>{('0000', '3999'): '*',
 ('4000', '4999'): 'a',
 ('5000', '6999'): '*',
 ('7000', '7009'): 'c',
 ('7010', '7019'): 'd',
 ('7020', '7099'): 'b',
 ('7100', '8499'): '*',
 ('8500', '8599'): 'e',
 ('8600', '8699'): '*',
 ('8700', '8799'): 'a',
 ('8800', '9999'): '*'}
</snippet></ROW><ROW><id>566752</id><snippet>import console
(width, height) = console.getTerminalSize()

print "Your terminal's width is: %d" % width
</snippet></ROW><ROW><id>566752</id><snippet>termcap</snippet></ROW><ROW><id>566752</id><snippet>ioctl</snippet></ROW><ROW><id>566752</id><snippet>def getTerminalSize():
    import os
    env = os.environ
    def ioctl_GWINSZ(fd):
        try:
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ,
        '1234'))
        except:
            return
        return cr
    cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_GWINSZ(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        cr = (env.get('LINES', 25), env.get('COLUMNS', 80))

        ### Use get(key[, default]) instead of a try/catch
        #try:
        #    cr = (env['LINES'], env['COLUMNS'])
        #except:
        #    cr = (25, 80)
    return int(cr[1]), int(cr[0])
</snippet></ROW><ROW><id>566803</id><snippet>#!/usr/bin/perl

use strict;
use warnings;

use XML::Twig;
use Digest::MD5 'md5_base64';

my @tags_to_anonymize= qw( name surname address email phone);

# the handler for each element ($_) sets its content with the md5 and then flushes
my %handlers= map { $_ =&gt; sub { $_-&gt;set_text( md5_base64( $_-&gt;text))-&gt;flush } } @tags_to_anonymize;

XML::Twig-&gt;new( twig_roots =&gt; \%handlers, twig_print_outside_roots =&gt; 1)
         -&gt;parsefile( "my_big_file.xml")
         -&gt;flush;
</snippet></ROW><ROW><id>566840</id><snippet>f.pack_propagate(0)
</snippet></ROW><ROW><id>566895</id><snippet>itertools</snippet></ROW><ROW><id>566895</id><snippet>import this</snippet></ROW><ROW><id>567336</id><snippet>len(data)</snippet></ROW><ROW><id>567336</id><snippet>data.__len__()</snippet></ROW><ROW><id>567336</id><snippet>len()</snippet></ROW><ROW><id>567336</id><snippet>__len__()</snippet></ROW><ROW><id>567336</id><snippet>dir()</snippet></ROW><ROW><id>567336</id><snippet>__builtins__</snippet></ROW><ROW><id>567336</id><snippet>__len__</snippet></ROW><ROW><id>567336</id><snippet>Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
</snippet></ROW><ROW><id>567645</id><snippet>conn = MySQLdb.connect(host, user, password, database)
cursor = conn.cursor()
attempts = 0

while attempts &lt; 3:
    try:
        cursor.execute(query)
        rows = cursor.fetchall()
        for row in rows:
            # do something with the data
        break
    except MySQLdb.Error, e:
        attempts += 1
        print "MySQL Error %d: %s" % (e.args[0], e.args[1])
</snippet></ROW><ROW><id>567923</id><snippet>import sys, re

first_re = re.compile(r'^\d{3}$')

if len(sys.argv) &gt; 1:

    if first_re.match(sys.argv[1]):
        print "Primary argument is : ", sys.argv[1]
    else:
        raise ValueError("First argument should be ...")

    args = sys.argv[2:]

else:

    args = ()

# ... anywhere in code ...

if 'debug' in args:
    print 'debug flag'

if 'xls' in args:
    print 'xls flag'
</snippet></ROW><ROW><id>567923</id><snippet>import sys, re, optparse

first_re = re.compile(r'^\d{3}$')

parser = optparse.OptionParser()
parser.set_defaults(debug=False,xls=False)
parser.add_option('--debug', action='store_true', dest='debug')
parser.add_option('--xls', action='store_true', dest='xls')
(options, args) = parser.parse_args()

if len(args) == 1:
    if first_re.match(args[0]):
        print "Primary argument is : ", args[0]
    else:
        raise ValueError("First argument should be ...")
elif len(args) &gt; 1:
    raise ValueError("Too many command line arguments")

if options.debug:
    print 'debug flag'

if options.xls:
    print 'xls flag'
</snippet></ROW><ROW><id>567923</id><snippet>python script.py --debug --xls 001
</snippet></ROW><ROW><id>568081</id><snippet>__str__.</snippet></ROW><ROW><id>568285</id><snippet>import os

def check_pid(pid):        
    """ Check For the existence of a unix pid. """
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True
</snippet></ROW><ROW><id>568618</id><snippet>continue</snippet></ROW><ROW><id>568618</id><snippet>break</snippet></ROW><ROW><id>568618</id><snippet>import math

def main():
    count = 3

    while True:
        isprime = True

        for x in range(2, int(math.sqrt(count) + 1)):
            if count % x == 0: 
                isprime = False
                break

        if isprime:
            print count

        count += 1
</snippet></ROW><ROW><id>568618</id><snippet># Sieve of Eratosthenes
# Code by David Eppstein, UC Irvine, 28 Feb 2002
# http://code.activestate.com/recipes/117119/

def gen_primes():
    """ Generate an infinite sequence of prime numbers.
    """
    # Maps composites to primes witnessing their compositeness.
    # This is memory efficient, as the sieve is not "run forward"
    # indefinitely, but only as long as required by the current
    # number being tested.
    #
    D = {}  

    # The running integer that's checked for primeness
    q = 2  

    while True:
        if q not in D:
            # q is a new prime.
            # Yield it and mark its first multiple that isn't
            # already marked in previous iterations
            # 
            yield q        
            D[q * q] = [q]
        else:
            # q is composite. D[q] is the list of primes that
            # divide it. Since we've reached q, we no longer
            # need it in the map, but we'll mark the next 
            # multiples of its witnesses to prepare for larger
            # numbers
            # 
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
            del D[q]

        q += 1
</snippet></ROW><ROW><id>569063</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.zeros(shape=(5,2))
&gt;&gt;&gt; a
array([[ 0.,  0.],
   [ 0.,  0.],
   [ 0.,  0.],
   [ 0.,  0.],
   [ 0.,  0.]])
&gt;&gt;&gt; a[0] = [1,2]
&gt;&gt;&gt; a[1] = [2,3]
&gt;&gt;&gt; a
array([[ 1.,  2.],
   [ 2.,  3.],
   [ 0.,  0.],
   [ 0.,  0.],
   [ 0.,  0.]])
</snippet></ROW><ROW><id>570561</id><snippet>ClientCreator</snippet></ROW><ROW><id>570561</id><snippet>Deferred</snippet></ROW><ROW><id>570561</id><snippet>ClientFactory</snippet></ROW><ROW><id>570561</id><snippet>*args</snippet></ROW><ROW><id>570561</id><snippet>Deferred</snippet></ROW><ROW><id>570704</id><snippet>import mymodule
import atexit

# call mymodule.unload('param1', 'param2') when the interpreter exits:
atexit.register(mymodule.unload, 'param1', 'param2')
</snippet></ROW><ROW><id>570704</id><snippet>register</snippet></ROW><ROW><id>570704</id><snippet>import atexit

@atexit.register
def goodbye():
    print "You are now leaving the Python sector."
</snippet></ROW><ROW><id>570896</id><snippet>PyString_Size</snippet></ROW><ROW><id>570896</id><snippet>PyString_AsString</snippet></ROW><ROW><id>570910</id><snippet>_reduce_ex()</snippet></ROW><ROW><id>570910</id><snippet>copy_reg.py</snippet></ROW><ROW><id>570910</id><snippet>if base is self.__class__:
    print self # new   
    raise TypeError, "can't pickle %s objects" % base.__name__
</snippet></ROW><ROW><id>570910</id><snippet>&lt;bound method ?.test_func of &lt;__main__.Test object at 0xb7f4230c&gt;&gt;
Traceback (most recent call last):
  File "nopickle.py", line 14, in ?
    pickle.dumps(test)
  File "/usr/lib/python2.4/copy_reg.py", line 69, in _reduce_ex
    raise TypeError, "can't pickle %s objects" % base.__name__
TypeError: can't pickle instancemethod objects
</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>settings.py</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>/static/</snippet></ROW><ROW><id>571047</id><snippet>/static/</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>C:/Documents/static/</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>/static/files/8.nzb</snippet></ROW><ROW><id>571047</id><snippet>/static/</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>571047</id><snippet>File.nzb</snippet></ROW><ROW><id>571047</id><snippet>%(1)sfiles/%(2)s.nzb' % {'1': settings.MEDIA_URL, '2': self.pk}</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>571047</id><snippet>delete()</snippet></ROW><ROW><id>571047</id><snippet>delete()</snippet></ROW><ROW><id>571047</id><snippet>File</snippet></ROW><ROW><id>571047</id><snippet>super(File, self).delete()</snippet></ROW><ROW><id>571047</id><snippet>File.nzb</snippet></ROW><ROW><id>571047</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>571238</id><snippet>def get_tags(s, open_delim  ='{{', 
                close_delim ='}}' ):

   while True:

      # Search for the next two delimiters in the source text
      start = s.find(open_delim)
      end   = s.find(close_delim)

      # We found a non-empty match
      if -1 &lt; start &lt; end:

         # Skip the length of the open delimiter
         start += len(open_delim)

         # Spit out the tag
         yield s[start:end].strip()

         # Truncate string to start from last match
         s = s[end+len(close_delim):]

      else:
         return
</snippet></ROW><ROW><id>571238</id><snippet># prints: today, runner_up, blabla, oooo
for tag in get_tags(html):
    print tag
</snippet></ROW><ROW><id>571334</id><snippet>class MyForm (forms.Form):
    def __init__ (self, title, desc, *args, **kwargs):
        self.title = title
        self.desc = desc
        super (MyForm, self).__init__ (*args, **kwargs) # call base class
</snippet></ROW><ROW><id>571334</id><snippet>form = MyForm ('Title A', 'Description A')
</snippet></ROW><ROW><id>571334</id><snippet>   &lt;h1&gt;{{ form.title }}&lt;/h1&gt;
   &lt;p&gt;{{ form.desc }}&lt;/p&gt;
</snippet></ROW><ROW><id>571573</id><snippet>import sys
import win32com.client 

shell = win32com.client.Dispatch("WScript.Shell")
shortcut = shell.CreateShortCut("t:\\test.lnk")
shortcut.Targetpath = "t:\\ftemp"
shortcut.save()
</snippet></ROW><ROW><id>571573</id><snippet>import sys
import win32com.client 

shell = win32com.client.Dispatch("WScript.Shell")
shortcut = shell.CreateShortCut("t:\\test.lnk")
print(shortcut.Targetpath)
</snippet></ROW><ROW><id>571757</id><snippet>try:
    x
except NameError:
    # x doesn't exist, do something
else:
    # x exists, do something else
</snippet></ROW><ROW><id>571757</id><snippet>assert(isinstance(variable, type))
</snippet></ROW><ROW><id>571757</id><snippet>var win:ThingPicker = PopUpManager.createPopUp(fEmotionsButton, 
       ThingPicker, false) as ThingPicker;
</snippet></ROW><ROW><id>571757</id><snippet>win = createPopup(parent, ThingPicker)
</snippet></ROW><ROW><id>571928</id><snippet>directories</snippet></ROW><ROW><id>571928</id><snippet>import os
import itertools

generators = [os.walk(d) for d in directories]
for root, dirs, files in itertools.chain(*generators):
    print root, dirs, files
</snippet></ROW><ROW><id>572052</id><snippet>def add_active_residents(self):
    ssa_res = SSA_Resident.objects.select_related(depth=1).filter(ssa=self.ssa, active=True)
    for r in ssa_res:
        self.residents.add(r.resident) # Fails Here
    self.save()
</snippet></ROW><ROW><id>572052</id><snippet>ssa_res</snippet></ROW><ROW><id>573021</id><snippet>PyListObject</snippet></ROW><ROW><id>573021</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>573021</id><snippet>PyObject_HEAD</snippet></ROW><ROW><id>573021</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>573021</id><snippet>PyObject_VAR_HEAD</snippet></ROW><ROW><id>573082</id><snippet>q = 'uri:http\://www.example.com'
</snippet></ROW><ROW><id>573426</id><snippet>import win32pdh
import os

def getPIDInfo():
    """ 
    Return a dictionary with keys the PID of all running processes.
    The values are dictionaries with the following key-value pairs:
        - name: &lt;Name of the process PID&gt;
        - parent_id: &lt;PID of this process parent&gt;
    """

    # get the names and occurences of all running process names
    items, instances = win32pdh.EnumObjectItems(None, None, 'Process', win32pdh.PERF_DETAIL_WIZARD)
    instance_dict = {}
    for instance in instances:
        instance_dict[instance] = instance_dict.get(instance, 0) + 1

    # define the info to obtain 
    counter_items =  ['ID Process', 'Creating Process ID']

    # output dict
    pid_dict = {}

    # loop over each program (multiple instances might be running)
    for instance, max_instances in instance_dict.items():
        for inum in xrange(max_instances):
            # define the counters for the query 
            hq = win32pdh.OpenQuery()
            hcs = {}
            for item in counter_items:
                path = win32pdh.MakeCounterPath((None,'Process',instance, None,inum,item))
                hcs[item] = win32pdh.AddCounter(hq,path)
            win32pdh.CollectQueryData(hq)

            # store the values in a temporary dict
            hc_dict = {}
            for item, hc in hcs.items():
                type,val=win32pdh.GetFormattedCounterValue(hc,win32pdh.PDH_FMT_LONG)
                hc_dict[item] = val
                win32pdh.RemoveCounter(hc)
            win32pdh.CloseQuery(hq)

            # obtain the pid and ppid of the current instance
            # and store it in the output dict
            pid, ppid = (hc_dict[item] for item in counter_items) 
            pid_dict[pid] = {'name': instance, 'parent_id': ppid}

    return pid_dict

def getParentInfo(pid):
    """
    Returns a PID, Name tuple of the parent process for the argument pid process.
    """
    pid_info = getPIDInfo()
    ppid = pid_info[pid]['parent_id']
    return ppid, pid_info[ppid]['name']

if __name__ == "__main__":
    """
    Print the current PID and information of the parent process.
    """
    pid = os.getpid()
    ppid, ppname = getParentInfo(pid)

    print "This PID: %s. Parent PID: %s, Parent process name: %s" % (pid, ppid, ppname)
    dummy = raw_input()
</snippet></ROW><ROW><id>573575</id><snippet>numpy.matrix</snippet></ROW><ROW><id>573659</id><snippet>python manage.py my_cool_command
</snippet></ROW><ROW><id>573659</id><snippet>cron</snippet></ROW><ROW><id>573659</id><snippet>at</snippet></ROW><ROW><id>574460</id><snippet>{% load pretty_forms %}
&lt;form action="." method="POST"&gt;
{{ form.as_p|pretty_checkbox }}
&lt;p&gt;&lt;input type="submit" value="Submit"&gt;&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>574460</id><snippet>from django import template
from django.template.defaultfilters import stringfilter
import logging

register=template.Library()

@register.filter(name='pretty_checkbox')
@stringfilter
def pretty_checkbox(value):
    # Iterate over the HTML fragment, extract &lt;label&gt; and &lt;input&gt; tags, and
    # switch the order of the pairs where the input type is "checkbox".
    scratch = value
    output = ''
    try:
        while True:
            ls = scratch.find('&lt;label')
            if ls &gt; -1:
                le = scratch.find('&lt;/label&gt;')
                ins = scratch.find('&lt;input')
                ine = scratch.find('/&gt;', ins)
                # Check whether we're dealing with a checkbox:
                if scratch[ins:ine+2].find(' type="checkbox" ')&gt;-1:
                    # Switch the tags
                    output += scratch[:ls]
                    output += scratch[ins:ine+2]
                    output += scratch[ls:le-1]+scratch[le:le+8]
                else:
                    output += scratch[:ine+2]
                scratch = scratch[ine+2:]
            else:
                output += scratch
                break
    except:
        logging.error("pretty_checkbox caught an exception")
    return output
</snippet></ROW><ROW><id>574734</id><snippet>except:
    pass
</snippet></ROW><ROW><id>574789</id><snippet>__call__</snippet></ROW><ROW><id>574789</id><snippet>pickle</snippet></ROW><ROW><id>574789</id><snippet>class foo(object):
    def __init__(self, bar, baz):
        self.baz = baz
    def __call__(self,waldo):
        return self.baz * waldo
</snippet></ROW><ROW><id>574789</id><snippet>pickle</snippet></ROW><ROW><id>574789</id><snippet>pickle</snippet></ROW><ROW><id>574974</id><snippet>egrep "^\w{6}$" /usr/share/dict/words | egrep "(.)(.)(.)\3\2\1"
</snippet></ROW><ROW><id>575320</id><snippet>file_dealloc</snippet></ROW><ROW><id>575320</id><snippet>Objects/fileobject.c</snippet></ROW><ROW><id>575320</id><snippet>__del__</snippet></ROW><ROW><id>575320</id><snippet>__del__</snippet></ROW><ROW><id>575337</id><snippet>def f(n, x): # these `n`, `x` have nothing to do with `n` and `x` from main()
    n = 2    # put `n` label on `2` balloon
    x.append(4) # call `append` method of whatever object `x` is referring to.
    print 'In f():', n, x
    x = []   # put `x` label on `[]` ballon
    # the above has no effect on the original list
</snippet></ROW><ROW><id>575781</id><snippet>import sys
import tty
tty.setcbreak(sys.stdin)
while True:
    print ord(sys.stdin.read(1))
</snippet></ROW><ROW><id>575781</id><snippet>ReadConsoleInput</snippet></ROW><ROW><id>575781</id><snippet>e.EventType==KEY_EVENT</snippet></ROW><ROW><id>575781</id><snippet>e.Event.KeyEvent.wVirtualKeyCode</snippet></ROW><ROW><id>575822</id><snippet>&gt;&gt;&gt; mydict = {'a':1,'b':3,'c':2}
&gt;&gt;&gt; sorted(mydict, key=lambda key: mydict[key])
['a', 'c', 'b']
</snippet></ROW><ROW><id>575944</id><snippet>&gt;&gt;&gt; def convert(s):
    try:
        return float(s)
    except ValueError:
        num, denom = s.split('/')
        return float(num) / float(denom)
...

&gt;&gt;&gt; convert("0.1234")
0.1234

&gt;&gt;&gt; convert("1/2")
0.5
</snippet></ROW><ROW><id>576183</id><snippet>super().__init__()</snippet></ROW><ROW><id>576183</id><snippet>super(ChildB, self).__init__()</snippet></ROW><ROW><id>576184</id><snippet>import signal, sys, time, pstats, cProfile

call = 0

def sigint_handler(signal, frame):
  global call
  if call &lt; 2:
    stats = pstats.Stats(profiler)
    stats.strip_dirs().sort_stats('cumulative').print_stats()
    profiler.enable()
    call += 1
  else:
    sys.exit()

def wait():
  time.sleep(1)

def main_io_loop():
  signal.signal(signal.SIGINT, sigint_handler)
  while 1:
    wait()

profiler = cProfile.Profile()
profiler.runctx("main_io_loop()", globals(), locals())
</snippet></ROW><ROW><id>576258</id><snippet>blocks = []
</snippet></ROW><ROW><id>576258</id><snippet>blocks.append
</snippet></ROW><ROW><id>576362</id><snippet>class Profile(models.Model):
    ...
    user = models.ForeignKey("django.contrib.auth.models.User", unique=True)
</snippet></ROW><ROW><id>576362</id><snippet>AUTH_PROFILE_MODULE = "appname.profile"
</snippet></ROW><ROW><id>576362</id><snippet>def my_view(request):
    profile = request.user.get_profile()
    etc...
</snippet></ROW><ROW><id>576405</id><snippet>for</snippet></ROW><ROW><id>576405</id><snippet>for</snippet></ROW><ROW><id>576405</id><snippet>x * x</snippet></ROW><ROW><id>576405</id><snippet>y * y</snippet></ROW><ROW><id>576405</id><snippet>for x in 1..N {
    for y in 1..N {
        for z in 1..N {
            if x * x + y * y == z * z then {
                // use x, y, z
            }
        }
    }
}
</snippet></ROW><ROW><id>576405</id><snippet>z &lt; y</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>x &lt; y &lt; z</snippet></ROW><ROW><id>576405</id><snippet>for x in 1..N {
    for y in x+1..N {
        for z in y+1..N {
            if x * x + y * y == z * z then {
                // use x, y, z
            }
        }
    }
}
</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>z * z &lt; x * x + y * y</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>for x in 1..N {
    for y in x+1..N {
        z = y + 1
        while z * z &lt; x * x + y * y {
            z = z + 1
        }
        if z * z == x * x + y * y and z &lt;= N then {
            // use x, y, z
        }
    }
}
</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>x</snippet></ROW><ROW><id>576405</id><snippet>y</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>y</snippet></ROW><ROW><id>576405</id><snippet>y</snippet></ROW><ROW><id>576405</id><snippet>for x in 1..N {
    y = x+1
    z = y+1
    while z &lt;= N {
        while z * z &lt; x * x + y * y {
            z = z + 1
        }
        if z * z == x * x + y * y and z &lt;= N then {
            // use x, y, z
        }
        y = y + 1
    }
}
</snippet></ROW><ROW><id>576405</id><snippet>y</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>x</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>while</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>z</snippet></ROW><ROW><id>576405</id><snippet>while</snippet></ROW><ROW><id>576405</id><snippet>while</snippet></ROW><ROW><id>576405</id><snippet>x</snippet></ROW><ROW><id>576405</id><snippet>y</snippet></ROW><ROW><id>576405</id><snippet>x</snippet></ROW><ROW><id>576405</id><snippet>N</snippet></ROW><ROW><id>576405</id><snippet>Version 4:           46 sec.
using square root:  134 sec.
array and map:      400 sec.
</snippet></ROW><ROW><id>576405</id><snippet>squares = array of i*i for i in 1 .. N
roots = map of i*i -&gt; i for i in 1 .. N
for x in 1 .. N
    for y in x+1 .. N
        z = roots[squares[x] + squares[y]]
        if z exists use x, y, z
</snippet></ROW><ROW><id>576405</id><snippet>for x in 1 .. N
    for y in x+1 .. N
        z = (int) sqrt(x * x + y * y)
        if z * z == x * x + y * y then use x, y, z
</snippet></ROW><ROW><id>576405</id><snippet>public Collection&lt;Triple&gt; byBetterWhileLoop() {
    Collection&lt;Triple&gt; result = new ArrayList&lt;Triple&gt;(limit);
    for (int x = 1; x &lt; limit; ++x) {
        int xx = x * x;
        int y = x + 1;
        int z = y + 1;
        while (z &lt;= limit) {
            int zz = xx + y * y;
            while (z * z &lt; zz) {++z;}
            if (z * z == zz &amp;&amp; z &lt;= limit) {
                result.add(new Triple(x, y, z));
            }
            ++y;
        }
    }
    return result;
}
</snippet></ROW><ROW><id>576405</id><snippet>x * x</snippet></ROW><ROW><id>576405</id><snippet>z * z</snippet></ROW><ROW><id>576801</id><snippet>:)</snippet></ROW><ROW><id>576954</id><snippet>cursor.execute("""SELECT foo, bar, baz, quux FROM table WHERE id = %s;""", 
                  (interesting_record_id,))

for foo, bar, baz, quux in cursor.fetchall():
    frobnicate(foo + bar, baz * quux)
</snippet></ROW><ROW><id>576954</id><snippet>SELECT * FROM table...</snippet></ROW><ROW><id>577172</id><snippet>try:
   from skynet import SkyNet
   inherit_from = SkyNet
except ImportError:
   inherit_from = object

class SelfAwareSkyeNet(inherit_from):
    pass
</snippet></ROW><ROW><id>577241</id><snippet>a.update(b)
</snippet></ROW><ROW><id>577432</id><snippet>from django.db.models.signals import post_save
from somewhere_in_my_app import my_post_save_handler

post_save.disconnect(my_post_save_handler)
instance.save()
post_save.connect(my_post_save_handler)
</snippet></ROW><ROW><id>577432</id><snippet>save()</snippet></ROW><ROW><id>577461</id><snippet>while gtk.events_pending():
  gtk.main_iteration()
</snippet></ROW><ROW><id>577461</id><snippet>def my_insert(self, widget, report, text):

  report.insert_at_cursor(text)
  while gtk.events_pending():
    gtk.main_iteration()
</snippet></ROW><ROW><id>577488</id><snippet>raw_input()</snippet></ROW><ROW><id>577731</id><snippet>def safe_divide_2(x, y):
    try:
        return x/y
    except ZeroDivisionError:  
        print "Divide-by-0 attempt detected"
        return None
</snippet></ROW><ROW><id>577731</id><snippet>def safe_divide_1(x, y):
    if y==0:
        print "Divide-by-0 attempt detected"
        return None
    else:
        return x/y
</snippet></ROW><ROW><id>577731</id><snippet>def double_list(items):
    return [item * 2 for item in items]
</snippet></ROW><ROW><id>577731</id><snippet>def double_list(items):
    doubled_items=[]
    for item in items:
        doubled_items.append(item*2)
    return doubled_items
</snippet></ROW><ROW><id>577731</id><snippet>def gen():
    for i in range(10):
        yield i

for number in gen():
    print i #prints 0-9
</snippet></ROW><ROW><id>577731</id><snippet>#list comprehension would be used here, but I did a for loop for clarity
def gen():
    numlist=[]
    for i in range(10):
        numlist.append(i)
    return numlist

for number in gen():
    print i #prints 0-9
</snippet></ROW><ROW><id>577830</id><snippet>os.walk</snippet></ROW><ROW><id>577830</id><snippet>for root, dirnames, filenames in os.walk(...):
  dirnames[:] = [
    dir for dir in dirnames
    if not os.path.ismount(os.path.join(root, dir))]
  ...
</snippet></ROW><ROW><id>577882</id><snippet>self.connect(lcdRange, QtCore.SIGNAL('valueChanged'), previousRange.setValue)
</snippet></ROW><ROW><id>577882</id><snippet>SIGNAL('valueChanged')</snippet></ROW><ROW><id>577882</id><snippet>previousRange.setValue</snippet></ROW><ROW><id>577961</id><snippet>def prime_factors(n):
  for i in range(2,n):
    if n % i == 0:
      return [i] + prime_factors(n / i)
  return [n]
</snippet></ROW><ROW><id>578337</id><snippet>sum()</snippet></ROW><ROW><id>578337</id><snippet>enumerate()</snippet></ROW><ROW><id>578337</id><snippet>datetime</snippet></ROW><ROW><id>578337</id><snippet>logging</snippet></ROW><ROW><id>578426</id><snippet>def fibo(a=-1,b=1,upto=4000000):
    while a+b&lt;upto:
        a,b = b,a+b
        yield b
</snippet></ROW><ROW><id>578426</id><snippet>print sum(i for i in fibo() if not i%2)
</snippet></ROW><ROW><id>578645</id><snippet>&gt;&gt;&gt; def change(obj):
...     obj.x = 10
...
&gt;&gt;&gt; class Point(object): x,y = 0,0
...
&gt;&gt;&gt; p = Point()
&gt;&gt;&gt; p.x
0
&gt;&gt;&gt; change(p)
&gt;&gt;&gt; p.x
10
</snippet></ROW><ROW><id>578869</id><snippet>apply_func_to</snippet></ROW><ROW><id>578869</id><snippet>f</snippet></ROW><ROW><id>578869</id><snippet>num</snippet></ROW><ROW><id>578869</id><snippet>return f(num)</snippet></ROW><ROW><id>578869</id><snippet>def my_func(x):
    return x*x

def apply_func_to(f, num):
    return f(num)

&gt;&gt;&gt;apply_func_to(my_func, 2)
4
</snippet></ROW><ROW><id>578869</id><snippet>&gt;&gt;&gt;apply_func_to(lambda x:x*x, 3)
9
</snippet></ROW><ROW><id>579117</id><snippet>warnings</snippet></ROW><ROW><id>579364</id><snippet>def set_canvas(cv):
    global photo # here!
    photo=PhotoImage(file=sys.argv[1])
    cv.create_image(0, 0, image=photo, anchor=NW)  # embed a photo
    print cv
    print photo
</snippet></ROW><ROW><id>579364</id><snippet>photo</snippet></ROW><ROW><id>579364</id><snippet>set_canvas</snippet></ROW><ROW><id>579376</id><snippet>def human_format(num):
    magnitude = 0
    while num &gt;= 1000:  # TODO: handle negative numbers?
        magnitude += 1
        num /= 1000.0
    # add more suffixes if you need them
    return '%.2f%s' % (num, ['', 'K', 'M', 'G', 'T', 'P'][magnitude])

print('the answer is %s' % human_format(7436313))  # prints 'the answer is 7.44M'
</snippet></ROW><ROW><id>579567</id><snippet>syncdb</snippet></ROW><ROW><id>579567</id><snippet>DATABASE_*</snippet></ROW><ROW><id>579567</id><snippet>INSTALLED_APPLICATIONS</snippet></ROW><ROW><id>579567</id><snippet>syncdb</snippet></ROW><ROW><id>579567</id><snippet>syncdb</snippet></ROW><ROW><id>579567</id><snippet>Model.objects.filter()</snippet></ROW><ROW><id>579567</id><snippet>QuerySet</snippet></ROW><ROW><id>579567</id><snippet>tag_query = Tag.objects.filter( name='stackoverflow' )
if( tag_query.count() &gt; 0 ):
    tag = tag_query[0]
    tag.name = 'stackoverflowed'
    tag.save()
</snippet></ROW><ROW><id>579567</id><snippet>from django.db import reset_queries, close_connection, _rollback_on_exception
reset_queries()
try:
    tag_query = Tag.objects.filter( name='stackoverflow' )
    if( tag_query.count() &gt; 0 ):
        tag = tag_query[0]
        tag.name = 'stackoverflowed'
        tag.save()
except:
    _rollback_on_exception()
finally:
    close_connection()
</snippet></ROW><ROW><id>579609</id><snippet>class Calculator(object):
    def add(self, a, b):
        return a + b
</snippet></ROW><ROW><id>579609</id><snippet>ScriptEngine engine = Python.CreateEngine();
ScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");
ScriptScope scope = engine.CreateScope();

ObjectOperations op = engine.Operations;

source.Execute(scope); // class object created
object klaz = scope.GetVariable("Calculator"); // get the class object
object instance = op.Call(klaz); // create the instance
object method = op.GetMember(instance, "add"); // get a method
int result = (int)op.Call(method, 4, 5); // call method and get result (9)
</snippet></ROW><ROW><id>579609</id><snippet>ScriptEngine engine = Python.CreateEngine();
ScriptSource source = engine.CreateScriptSourceFromFile("Calculator.py");
ScriptScope scope = engine.CreateScope();
source.Execute(scope);

dynamic Calculator = scope.GetVariable("Calculator");
dynamic calc = Calculator();
int result = calc.add(4, 5);
</snippet></ROW><ROW><id>579609</id><snippet>Install-Package IronPython
</snippet></ROW><ROW><id>579817</id><snippet>b.value = 12.0
change(b)
print b.value
</snippet></ROW><ROW><id>579862</id><snippet>dict(zip(keys,values))
</snippet></ROW><ROW><id>580006</id><snippet>wind = MyCustomWindow(self)
</snippet></ROW><ROW><id>580006</id><snippet>wind = MyCustomWindow(self.scrolling_window)
</snippet></ROW><ROW><id>580467</id><snippet>make_link</snippet></ROW><ROW><id>580467</id><snippet>link_output</snippet></ROW><ROW><id>580467</id><snippet>return</snippet></ROW><ROW><id>580467</id><snippet>def make_link(in_link):
  ...
  if title == '':
    link_output = ...
  else:
    link_output = ...
  return link_output
</snippet></ROW><ROW><id>580467</id><snippet>anchor_output</snippet></ROW><ROW><id>580467</id><snippet>anchor_output = make_link(anchor_text)
</snippet></ROW><ROW><id>580467</id><snippet>None</snippet></ROW><ROW><id>580467</id><snippet>None</snippet></ROW><ROW><id>580522</id><snippet>def new_panel(self, nm):
    pnl = wx.Panel(self)
    # just to debug, I added a string attribute to the panel
    # don't you love dynamic languages? :)
    pnl.identifierTag = nm   
    self.nb.AddPage(pnl, nm)
    self.sizer = wx.BoxSizer()
    self.sizer.Add(self.nb, 1, wx.EXPAND)
    self.SetSizer(self.sizer)

    pnl.Bind(wx.EVT_LEFT_DOWN, self.click)

def click(self, event):
    print 'Mouse click'
    # get the current selected page
    page = self.nb.GetPage(self.nb.GetSelection())
    # notice that it is the panel that you created in new_panel
    print page.identifierTag
</snippet></ROW><ROW><id>581250</id><snippet>quad</snippet></ROW><ROW><id>581250</id><snippet>quad</snippet></ROW><ROW><id>581250</id><snippet>sin</snippet></ROW><ROW><id>581250</id><snippet>quad</snippet></ROW><ROW><id>581250</id><snippet>quad</snippet></ROW><ROW><id>581263</id><snippet>isinstance</snippet></ROW><ROW><id>581263</id><snippet>isinstance</snippet></ROW><ROW><id>581263</id><snippet>isinstance</snippet></ROW><ROW><id>581263</id><snippet>hasattr</snippet></ROW><ROW><id>581263</id><snippet>new.instancemethod</snippet></ROW><ROW><id>581263</id><snippet>__base__</snippet></ROW><ROW><id>581263</id><snippet>LogFoo</snippet></ROW><ROW><id>581902</id><snippet>tempfile.mkdtemp</snippet></ROW><ROW><id>582206</id><snippet>inspect</snippet></ROW><ROW><id>582206</id><snippet>import inspect

def func(a, b, c):
    frame = inspect.currentframe()
    args, _, _, values = inspect.getargvalues(frame)
    print 'function name "%s"' % inspect.getframeinfo(frame)[2]
    for i in args:
        print "    %s = %s" % (i, values[i])
    return [(i, values[i]) for i in args]

&gt;&gt;&gt; func(1, 2, 3)
function name "func"
    a = 1
    b = 2
    c = 3
[('a', 1), ('b', 2), ('c', 3)]
</snippet></ROW><ROW><id>582337</id><snippet>import cProfile
cProfile.run('foo()')
</snippet></ROW><ROW><id>582337</id><snippet>python -m cProfile myscript.py
</snippet></ROW><ROW><id>582337</id><snippet>python -m cProfile %1
</snippet></ROW><ROW><id>582337</id><snippet>profile euler048.py
</snippet></ROW><ROW><id>582337</id><snippet>1007 function calls in 0.061 CPU seconds

Ordered by: standard name
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)
 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)
    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)
    1    0.000    0.000    0.061    0.061 {execfile}
    1    0.002    0.002    0.053    0.053 {map}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}
    1    0.000    0.000    0.000    0.000 {range}
    1    0.003    0.003    0.003    0.003 {sum}
</snippet></ROW><ROW><id>582520</id><snippet>setup(
  windows=[{"script" : "main.py"}],
  options={"py2exe" : {
    "includes": ["sip", "PyQt4.QtSql"],
    "packages": ["sqlalchemy.databases.sqlite"]
}})
</snippet></ROW><ROW><id>583065</id><snippet>lib/</snippet></ROW><ROW><id>583065</id><snippet>sys.path</snippet></ROW><ROW><id>583065</id><snippet>lib/__init__.py</snippet></ROW><ROW><id>583065</id><snippet>from . import settings # or just 'import settings' on old Python versions
class Helper(object):
      pass
</snippet></ROW><ROW><id>583065</id><snippet>from lib.settings import Values
from lib import Helper
</snippet></ROW><ROW><id>583065</id><snippet>__init__.py</snippet></ROW><ROW><id>583065</id><snippet>Helper</snippet></ROW><ROW><id>583065</id><snippet>settings.py</snippet></ROW><ROW><id>583065</id><snippet>Helper</snippet></ROW><ROW><id>583065</id><snippet>lib/helper.py</snippet></ROW><ROW><id>583065</id><snippet>$ python import_submodule.py
</snippet></ROW><ROW><id>583065</id><snippet>settings
helper
Helper in lib.settings
someobject
Helper in lib.foo.someobject

# ./import_submodule.py
import fnmatch, os
from lib.settings import Values
from lib import Helper

print
for root, dirs, files in os.walk('.'):
    for f in fnmatch.filter(files, '*.py'):
        print "# %s/%s" % (os.path.basename(root), f)
        print open(os.path.join(root, f)).read()
        print


# lib/helper.py
print 'helper'
class Helper(object):
    def __init__(self, module_name):
        print "Helper in", module_name


# lib/settings.py
print "settings"
import helper

class Values(object):
    pass

helper.Helper(__name__)


# lib/__init__.py
#from __future__ import absolute_import
import settings, foo.someobject, helper

Helper = helper.Helper


# foo/someobject.py
print "someobject"
from .. import helper

helper.Helper(__name__)


# foo/__init__.py
import someobject
</snippet></ROW><ROW><id>583126</id><snippet>logger.info( "unique thing %s %s %s",
   arg1, arg2, arg3 )
</snippet></ROW><ROW><id>583126</id><snippet>self.assertXXX()</snippet></ROW><ROW><id>583239</id><snippet>/etc/init.d/postfix</snippet></ROW><ROW><id>583239</id><snippet>&lt;username&gt;  ALL = NOPASSWD: /etc/init.d/postfix
</snippet></ROW><ROW><id>583757</id><snippet>csv</snippet></ROW><ROW><id>583757</id><snippet>import sys, csv
writer = csv.writer(sys.stdout, delimiter="\t")
writer.writerows(data)
</snippet></ROW><ROW><id>583819</id><snippet>from contextlib import closing
from zipfile import ZipFile, ZIP_DEFLATED

from google.appengine.ext import webapp
from google.appengine.api import urlfetch

def addResource(zfile, url, fname):
    # get the contents      
    contents = urlfetch.fetch(url).content
    # write the contents to the zip file
    zfile.writestr(fname, contents)

class OutZipfile(webapp.RequestHandler):
    def get(self):
        # Set up headers for browser to correctly recognize ZIP file
        self.response.headers['Content-Type'] ='application/zip'
        self.response.headers['Content-Disposition'] = \
            'attachment; filename="outfile.zip"'    

        # compress files and emit them directly to HTTP response stream
        with closing(ZipFile(self.response.out, "w", ZIP_DEFLATED)) as outfile:
            # repeat this for every URL that should be added to the zipfile
            addResource(outfile, 
                'https://www.google.com/intl/en/policies/privacy/', 
                'privacy.html')
            addResource(outfile, 
                'https://www.google.com/intl/en/policies/terms/', 
                'terms.html')
</snippet></ROW><ROW><id>584002</id><snippet>join</snippet></ROW><ROW><id>584002</id><snippet>split</snippet></ROW><ROW><id>584002</id><snippet>', '.join(&lt;list&gt;)</snippet></ROW><ROW><id>584002</id><snippet>list_output = ''.join('&lt;li&gt;' + item + '&lt;/li&gt;\n' for item in x)
</snippet></ROW><ROW><id>584002</id><snippet>list_output = '\n'.join('&lt;li&gt;' + item + '&lt;/li&gt;' for item in x)
</snippet></ROW><ROW><id>584002</id><snippet>list_output = '&lt;li&gt;' + '&lt;/li&gt;\n&lt;li&gt;'.join(item for item in x) + '&lt;/li&gt;\n'
</snippet></ROW><ROW><id>585232</id><snippet>from ftplib import FTP

ftp = FTP(host, user, passwd)
for r in ftp.dir():
    if r.upper().startswith('D'):
        print r[58:]  # Starting point
</snippet></ROW><ROW><id>585629</id><snippet>rsync</snippet></ROW><ROW><id>585629</id><snippet>10**6</snippet></ROW><ROW><id>585629</id><snippet>1%</snippet></ROW><ROW><id>585970</id><snippet>image.size</snippet></ROW><ROW><id>587620</id><snippet>re.compile(r"^(.+)\n((?:\n.+)+)", re.MULTILINE)
</snippet></ROW><ROW><id>587620</id><snippet>^</snippet></ROW><ROW><id>587620</id><snippet>$</snippet></ROW><ROW><id>587620</id><snippet>^</snippet></ROW><ROW><id>587620</id><snippet>$</snippet></ROW><ROW><id>587620</id><snippet>re.compile(r"^(.+)(?:\n|\r\n?)((?:(?:\n|\r\n?).+)+)", re.MULTILINE)
</snippet></ROW><ROW><id>587791</id><snippet>str(int(x) + 1).zfill(len(x))
</snippet></ROW><ROW><id>588904</id><snippet>start-stop-daemon</snippet></ROW><ROW><id>589416</id><snippet>list_of_ids</snippet></ROW><ROW><id>589416</id><snippet>format_strings = ','.join(['%s'] * len(list_of_ids))
cursor.execute("DELETE FROM foo.bar WHERE baz IN (%s)" % format_strings,
                tuple(list_of_ids))
</snippet></ROW><ROW><id>589416</id><snippet>list_of_ids</snippet></ROW><ROW><id>589440</id><snippet>T</snippet></ROW><ROW><id>589440</id><snippet>X</snippet></ROW><ROW><id>589440</id><snippet>X</snippet></ROW><ROW><id>589440</id><snippet>T</snippet></ROW><ROW><id>589440</id><snippet>stat</snippet></ROW><ROW><id>589440</id><snippet>now()</snippet></ROW><ROW><id>589440</id><snippet>D</snippet></ROW><ROW><id>589440</id><snippet>T</snippet></ROW><ROW><id>589440</id><snippet>D</snippet></ROW><ROW><id>589440</id><snippet>X</snippet></ROW><ROW><id>589440</id><snippet>T</snippet></ROW><ROW><id>589440</id><snippet>X</snippet></ROW><ROW><id>589440</id><snippet>/etc/ntpd.conf</snippet></ROW><ROW><id>589440</id><snippet>lsof</snippet></ROW><ROW><id>589440</id><snippet>lsof</snippet></ROW><ROW><id>589440</id><snippet>/proc/&lt;pid&gt;/fd/&lt;fdes&gt;</snippet></ROW><ROW><id>589440</id><snippet>lsof</snippet></ROW><ROW><id>589440</id><snippet>ProcessExplorer</snippet></ROW><ROW><id>589939</id><snippet>import re, urlparse

find_re = re.compile(r'\bhref\s*=\s*("[^"]*"|\'[^\']*\'|[^"\'&lt;&gt;=\s]+)')

def fix_urls(document, base_url):
    ret = []
    last_end = 0
    for match in find_re.finditer(document):
        url = match.group(1)
        if url[0] in "\"'":
            url = url.strip(url[0])
        parsed = urlparse.urlparse(url)
        if parsed.scheme == parsed.netloc == '': #relative to domain
            url = urlparse.urljoin(base_url, url)
            ret.append(document[last_end:match.start(1)])
            ret.append('"%s"' % (url,))
            last_end = match.end(1)
    ret.append(document[last_end:])
    return ''.join(ret)
</snippet></ROW><ROW><id>589939</id><snippet>&gt;&gt;&gt; document = '''&lt;tr class="build"&gt;&lt;th colspan="0"&gt;Build 110&lt;/th&gt;&lt;/tr&gt; &lt;tr class="arccase project flagday"&gt;&lt;td&gt;Feb-25&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="../pages/2009022501/"&gt;Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States&lt;/a&gt;&lt;br /&gt;cpupm keyword mode extensions - &lt;a href="/os/community/arc/caselog/2008/777/"&gt;PSARC/2008/777&lt;/a&gt;&lt;br /&gt; CPU Deep Idle Keyword - &lt;a href="/os/community/arc/caselog/2008/663/"&gt;PSARC/2008/663&lt;/a&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;'''
&gt;&gt;&gt; fix_urls(document,"http://www.opensolaris.org/os/community/on/flag-days/all/")
'&lt;tr class="build"&gt;&lt;th colspan="0"&gt;Build 110&lt;/th&gt;&lt;/tr&gt; &lt;tr class="arccase project flagday"&gt;&lt;td&gt;Feb-25&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;a href="http://www.opensolaris.org/os/community/on/flag-days/pages/2009022501/"&gt;Flag Day and Heads Up: Power Aware Dispatcher and Deep C-States&lt;/a&gt;&lt;br /&gt;cpupm keyword mode extensions - &lt;a href="http://www.opensolaris.org/os/community/arc/caselog/2008/777/"&gt;PSARC/2008/777&lt;/a&gt;&lt;br /&gt; CPU Deep Idle Keyword - &lt;a href="http://www.opensolaris.org/os/community/arc/caselog/2008/663/"&gt;PSARC/2008/663&lt;/a&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>590262</id><snippet>oldname.pyc</snippet></ROW><ROW><id>590262</id><snippet>oldname.pyo</snippet></ROW><ROW><id>590968</id><snippet>class Feature( models.Model ):
    feature_name = models.CharField( max_length=128 )
    feature_value = models.TextField()
    part_of = models.ForeignKey( Product )
</snippet></ROW><ROW><id>590968</id><snippet>p= Product( "iPhone", "Apple", 350 )
p.save()
f= Feature( "mp3 capacity", "16Gb", p )
f.save()
</snippet></ROW><ROW><id>591294</id><snippet>&lt; .5</snippet></ROW><ROW><id>591431</id><snippet>backgroundr</snippet></ROW><ROW><id>591431</id><snippet>backgroundr = int(random.random() * 255) + 1
</snippet></ROW><ROW><id>591821</id><snippet>global backgroundr;
global backgroundg;
global backgroundb;
backgroundr = int(random.random()*255)+1
backgroundg = int(random.random()*255)+1
backgroundb = int(random.random()*255)+1
</snippet></ROW><ROW><id>591821</id><snippet>def ColourCheck():
    global backgroundr;
    global backgroundg;
    global backgroundb;
    checknumber = int(random.random()*50)+1
    if checknumber == 50:
        backgroundr = int(random.random()*255)+1
        backgroundg = int(random.random()*255)+1
        backgroundb = int(random.random()*255)+1
</snippet></ROW><ROW><id>591971</id><snippet>import os
os.environ["PYTHONINSPECT"] = "1"
</snippet></ROW><ROW><id>592019</id><snippet>def adds_dynamic_z_decorator(f):
  def replacement(*arg,**karg):
    # create a new 'z' binding in globals, saving previous
    if 'z' in globals():
      oldZ = (globals()['z'],)
    else:
      oldZ = None
    try:
      globals()['z'] = None
      #invoke the original function
      res = f(*arg, **karg)
    finally:
      #restore any old bindings
      if oldZ:
        globals()['z'] = oldZ[0]
      else:
        del(globals()['z'])
    return res
  return replacement

@adds_dynamic_z_decorator
def func(x,y):
  print z

def other_recurse(x):
  global z
  print 'x=%s, z=%s' %(x,z)
  recurse(x+1)
  print 'x=%s, z=%s' %(x,z)

@adds_dynamic_z_decorator
def recurse(x=0):
  global z
  z = x
  if x &lt; 3:
    other_recurse(x)

print 'calling func(1,2)'
func(1,2)

print 'calling recurse()'
recurse()
</snippet></ROW><ROW><id>592439</id><snippet>def updateQListWidget(qlistwidget, values):
        """ Updates a QListWidget object with a list of values
        ARGS:
            qlistwidget  - QListWidget object
            values       - list of values to add to list widget
        """
        qlistwidget.clear()
        qlist = QtCore.QStringList()
        for v in values:
            s = QtCore.QString(v)
            qlist.append(s)
        qlistwidget.addItems(qlist)
</snippet></ROW><ROW><id>592788</id><snippet>GetExitCodeProcess</snippet></ROW><ROW><id>592788</id><snippet>OpenProcess</snippet></ROW><ROW><id>592849</id><snippet>import inspect, re

def varname(p):
  for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:
    m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line)
    if m:
      return m.group(1)

if __name__ == '__main__':
  spam = 42
  print varname(spam)
</snippet></ROW><ROW><id>592986</id><snippet>&lt;div id="pcraSpecs"&gt;
  &lt;script type="text/javascript"&gt;...&lt;/script&gt;
  &lt;TABLE cellpadding="0" cellspacing="0" class="specification"&gt;
    &lt;TR&gt;
      &lt;TD colspan="2" class="title"&gt;Model&lt;/TD&gt;
    &lt;/TR&gt;
    &lt;TR&gt;
      &lt;TD class="name"&gt;Brand&lt;/TD&gt;
      &lt;TD class="desc"&gt;&lt;script type="text/javascript"&gt;document.write(neg_specification_newline('Intel'));&lt;/script&gt;&lt;/TD&gt;
    &lt;/TR&gt;
    &lt;TR&gt;
      &lt;TD class="name"&gt;Processors Type&lt;/TD&gt;
      &lt;TD class="desc"&gt;&lt;script type="text/javascript"&gt;document.write(neg_specification_newline('Desktop'));&lt;/script&gt;&lt;/TD&gt;    
    &lt;/TR&gt;
    ...
  &lt;/TABLE&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>592986</id><snippet>soup.find(id="pcraSpecs").findAll("td")</snippet></ROW><ROW><id>593046</id><snippet>def foo(bar):
    static my_bar # doesn't work

    if not my_bar:
        my_bar = bar

    do_stuff(my_bar)

foo(bar)
foo()

# -- becomes -&gt;

class Foo(object):
    def __init__(self, bar):
        self.bar = bar

    def __call__(self):
        do_stuff(self.bar)

foo = Foo(bar)
foo()
foo()
</snippet></ROW><ROW><id>593046</id><snippet>def foo(bar):
    static my_bar # doesn't work

    if not my_bar:
        my_bar = bar

    my_bar = my_bar * 3 % 5

    return my_bar

foo(bar)
foo()

# -- becomes -&gt;

def foogen(bar):
    my_bar = bar

    while True:
        my_bar = my_bar * 3 % 5
        yield my_bar

foo = foogen(bar)
foo.next()
foo.next()
</snippet></ROW><ROW><id>593046</id><snippet>global</snippet></ROW><ROW><id>593046</id><snippet>def foo():
    global bar
    do_stuff(bar)

foo()
foo()
</snippet></ROW><ROW><id>594360</id><snippet>import compiler
eq= "sin(x)*x**2"
ast= compiler.parse( eq )
</snippet></ROW><ROW><id>594633</id><snippet>def get_first_text_part(msg):
    maintype = msg.get_content_maintype()
    if maintype == 'multipart':
        for part in msg.get_payload():
            if part.get_content_maintype() == 'text':
                return part.get_payload()
    elif maintype == 'text':
        return msg.get_payload()
</snippet></ROW><ROW><id>594892</id><snippet>class X(object):
    def get_i(self):
        return self._i
    def set_i(self, value):
        self._i= value
    i= property(get_i, set_i)
</snippet></ROW><ROW><id>595150</id><snippet>pk = open( 'public_key.pem', 'rb' ).read()
rsa = M2Crypto.RSA.load_pub_key(pk)
</snippet></ROW><ROW><id>595332</id><snippet>os.path.realpath(__file__)</snippet></ROW><ROW><id>595409</id><snippet>import operator
reduce(operator.mul, (3, 4, 5), 1)
</snippet></ROW><ROW><id>596340</id><snippet>class Toolbar():
  def __init__(self, frame_to_connect_to):
    frame_to_connect_to.toolbar = frame_to_connect_to.CreateToolBar(style=(wx.TB_HORZ_LAYOUT | wx.TB_TEXT))
    frame_to_connect_to.toolbar.SetToolBitmapSize((32,32))
    frame_to_connect_to.toolbar.AddLabelTool(3, '', wx.Bitmap('GUI/icons/fileopen.png'))
    frame_to_connect_to.toolbar.AddLabelTool(3, '', wx.Bitmap('GUI/icons/filesave.png'))
    frame_to_connect_to.toolbar.AddSeparator()
    frame_to_connect_to.toolbar.Realize()
</snippet></ROW><ROW><id>596340</id><snippet>class Window(wx.Frame)
  def __init__(self, parent, plot):
    wx.Frame.__init__(self, parent, wx.ID_ANY, "Name", size =(900, 600))
    self.Centre()
    self._init_toolbar()

  def _init_toolbar(self):
    self.toolbar = self.CreateToolBar(style=(wx.TB_HORZ_LAYOUT | wx.TB_TEXT))
    self.toolbar.SetToolBitmapSize((32,32))
    self.toolbar.AddLabelTool(3, '', wx.Bitmap('GUI/icons/fileopen.png'))
    self.toolbar.AddLabelTool(3, '', wx.Bitmap('GUI/icons/filesave.png'))
    self.toolbar.AddSeparator()
    self.toolbar.Realize()
</snippet></ROW><ROW><id>597107</id><snippet>p.getElementsByTagName('Category')[0].textContent
</snippet></ROW><ROW><id>597107</id><snippet>p.getElementsByTagName('Category')[0].firstChild.wholeText
</snippet></ROW><ROW><id>597178</id><snippet>enter search string
open file
if file has data
   start loop
     get next line of file
     search the line for your string and do something

   Exit loop if line was end of file
</snippet></ROW><ROW><id>597178</id><snippet>jargon = open("jargonFile.txt","r")
searchPhrase = raw_input("Enter the search phrase: ")
while searchPhrase != "":
    &lt;&lt;if file has data?&gt;&gt;
      &lt;&lt;while&gt;&gt;
        result = jargon.readline().find(searchPhrase)
        if result == -1:
            print "Cannot find this term."
        else:
            print result
      &lt;&lt;result is not end of file&gt;&gt;
   searchPhrase = raw_input("Enter the search phrase: ")
jargon.close()
</snippet></ROW><ROW><id>597178</id><snippet>with open("hello.txt") as f:
    for line in f:
        print line
</snippet></ROW><ROW><id>597178</id><snippet>searchPhrase = raw_input("Enter the search phrase: ")
while searchPhrase != "":
    with open("jargonFile.txt") as f:
        for line in f:
           result = line.find(searchPhrase)
           if result == -1:
              print "Cannot find this term."
           else:
              print result
    searchPhrase = raw_input("Enter the search phrase: ")
</snippet></ROW><ROW><id>597243</id><snippet>class A: # defined by the library
    def __init__(self, field):
        self.field = field

class B(A): # your fancy new class
    def __init__(self, field, field2):
        self.field = field
        self.field2 = field2 # B has some fancy extra stuff

def b_from_a(a_instance, field2):
    """Given an instance of A, return a new instance of B."""
    return B(a_instance.field, field2)


a = A("spam") # this could be your A instance from the library
b = b_from_a(a, "ham") # make a new B which has the data from a

print b.field, b.field2 # prints "spam ham"
</snippet></ROW><ROW><id>597243</id><snippet>class B2: # doesn't have to inherit from A
    def __init__(self, a, field2):
        self._a = a # using composition instead
        self.field2 = field2

    @property
    def field(self): # pass accesses to a
        return self._a.field
    # could provide setter, deleter, etc

a = A("spam")
b = B2(a, "ham")

print b.field, b.field2 # prints "spam ham"
</snippet></ROW><ROW><id>597401</id><snippet>import pygame, random

screen = pygame.display.set_mode((800,600))

draw_on = False
last_pos = (0, 0)
color = (255, 128, 0)
radius = 10

def roundline(srf, color, start, end, radius=1):
    dx = end[0]-start[0]
    dy = end[1]-start[1]
    distance = max(abs(dx), abs(dy))
    for i in range(distance):
        x = int( start[0]+float(i)/distance*dx)
        y = int( start[1]+float(i)/distance*dy)
        pygame.draw.circle(srf, color, (x, y), radius)

try:
    while True:
        e = pygame.event.wait()
        if e.type == pygame.QUIT:
            raise StopIteration
        if e.type == pygame.MOUSEBUTTONDOWN:
            color = (random.randrange(256), random.randrange(256), random.randrange(256))
            pygame.draw.circle(screen, color, e.pos, radius)
            draw_on = True
        if e.type == pygame.MOUSEBUTTONUP:
            draw_on = False
        if e.type == pygame.MOUSEMOTION:
            if draw_on:
                pygame.draw.circle(screen, color, e.pos, radius)
                roundline(screen, color, e.pos, last_pos,  radius)
            last_pos = e.pos
        pygame.display.flip()

except StopIteration:
    pass

pygame.quit()
</snippet></ROW><ROW><id>597557</id><snippet>import re

class Re(object):
  def __init__(self):
    self.last_match = None
  def match(self,pattern,text):
    self.last_match = re.match(pattern,text)
    return self.last_match
  def search(self,pattern,text):
    self.last_match = re.search(pattern,text)
    return self.last_match

gre = Re()
if gre.match(r'foo',text):
  # do something with gre.last_match
elif gre.match(r'bar',text):
  # do something with gre.last_match
else:
  # do something else
</snippet></ROW><ROW><id>597962</id><snippet>FindFirstChangeNotification</snippet></ROW><ROW><id>598092</id><snippet>object</snippet></ROW><ROW><id>598092</id><snippet>MyClass(object)</snippet></ROW><ROW><id>598092</id><snippet>class testDec(object):

    @property
    def x(self): 
        print 'called getter'
        return self._x

    @x.setter
    def x(self, value): 
        print 'called setter'
        self._x = value
</snippet></ROW><ROW><id>598092</id><snippet>&gt;&gt;&gt; k = testDec()
&gt;&gt;&gt; k.x
called getter
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/devel/class_test.py", line 6, in x
    return self._x
AttributeError: 'testDec' object has no attribute '_x'
&gt;&gt;&gt; k.x = 5
called setter
&gt;&gt;&gt; k.x
called getter
5
&gt;&gt;&gt;
</snippet></ROW><ROW><id>598407</id><snippet>[x for x in myList if x.n == 30]  # list of all elements with .n==30
</snippet></ROW><ROW><id>598407</id><snippet>def contains(list, filter):
    for x in list:
        if filter(x):
            return True
    return False

if contains(myList, lambda x: x.n == 3)  # True if any element has .n==3
    # do stuff
</snippet></ROW><ROW><id>598732</id><snippet>//title[text()='Text 1']/../content/text()
</snippet></ROW><ROW><id>598824</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'blah blah &lt;a href="blah"&gt;link&lt;/a&gt;'
&gt;&gt;&gt; re.sub('&lt;[^&gt;]*&gt;', '', s)
'blah blah link'
</snippet></ROW><ROW><id>599481</id><snippet>os.path.isdir</snippet></ROW><ROW><id>599481</id><snippet>dirs = filter(os.path.isdir, os.listdir('/path'))
for dir in dirs:
    # add your file
</snippet></ROW><ROW><id>599653</id><snippet>[u'ABC']</snippet></ROW><ROW><id>599653</id><snippet> soup[0].encode("ascii")
</snippet></ROW><ROW><id>599653</id><snippet> soup[0].encode("latin-1")


 soup[0].encode("utf-8")
</snippet></ROW><ROW><id>599653</id><snippet> soup[0].encode(soup.originalEncoding)
</snippet></ROW><ROW><id>599962</id><snippet>if line.startswith("Path="):
    return line[5:]
</snippet></ROW><ROW><id>599962</id><snippet>=</snippet></ROW><ROW><id>599962</id><snippet>if "=" in line:
    param, value = line.split("=",1)
</snippet></ROW><ROW><id>600199</id><snippet>from myapp.appstate import AppState
</snippet></ROW><ROW><id>600612</id><snippet>mkdir -p</snippet></ROW><ROW><id>600612</id><snippet>import os, errno

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python &gt;2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise
</snippet></ROW><ROW><id>600612</id><snippet>os.makedirs</snippet></ROW><ROW><id>600612</id><snippet>exist_ok</snippet></ROW><ROW><id>600612</id><snippet>mkdir -p</snippet></ROW><ROW><id>600612</id><snippet>mode</snippet></ROW><ROW><id>600612</id><snippet>OSError</snippet></ROW><ROW><id>601084</id><snippet>function myex()
   execute ':w'
   execute ':!!'
endfunction
</snippet></ROW><ROW><id>601084</id><snippet>:map &lt;F2&gt; &lt;Esc&gt;:w&lt;CR&gt;:!filename.py&lt;CR&gt;
</snippet></ROW><ROW><id>601084</id><snippet>:imap &lt;F2&gt; &lt;Esc&gt;:w&lt;CR&gt;:!filename.py&lt;CR&gt;a
</snippet></ROW><ROW><id>601582</id><snippet>import numpy
list_size_1 = []
list_size_2 = []
for row in data.itervalues():
    if len(row) == 1:
      list_size_1.append(row)
    elif len(row) == 2:
      list_size_2.append(row)
list_size_1 = numpy.array(list_size_1)
list_size_2 = numpy.array(list_size_2)
std_1 = numpy.std(list_size_1, axis = 1)
std_2 = numpy.std(list_size_2, axis = 1)
</snippet></ROW><ROW><id>602383</id><snippet>scriptname.py &lt;input_path&gt; &lt;output_path&gt;
</snippet></ROW><ROW><id>602383</id><snippet>import pygame, sys
from PIL import Image
pygame.init()

def displayImage( screen, px, topleft):
    screen.blit(px, px.get_rect())
    if topleft:
        pygame.draw.rect( screen, (128,128,128), pygame.Rect(topleft[0], topleft[1], pygame.mouse.get_pos()[0] - topleft[0], pygame.mouse.get_pos()[1] - topleft[1]))
    pygame.display.flip()

def setup(path):
    px = pygame.image.load(path)
    screen = pygame.display.set_mode( px.get_rect()[2:] )
    screen.blit(px, px.get_rect())
    pygame.display.flip()
    return screen, px

def mainLoop(screen, px):
    topleft = None
    bottomright = None
    runProgram = True
    while runProgram:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                runProgram = False
            elif event.type == pygame.MOUSEBUTTONUP:
                if not topleft:
                    topleft = event.pos
                else:
                    bottomright = event.pos
                    runProgram = False
        displayImage(screen, px, topleft)
    return ( topleft + bottomright )


if __name__ == "__main__":
    screen, px = setup(sys.argv[1])
    left, upper, right, lower = mainLoop(screen, px)
    im = Image.open(sys.argv[1])
    im = im.crop(( left, upper, right, lower))
    im.save(sys.argv[2])
</snippet></ROW><ROW><id>602453</id><snippet>rainbow.vim</snippet></ROW><ROW><id>602453</id><snippet>vimfiles/after/syntax/c/</snippet></ROW><ROW><id>602453</id><snippet>~/.vim/after/syntax/c/rainbow.vim</snippet></ROW><ROW><id>602453</id><snippet>c:\vim\vimfiles\after\syntax\c\rainbow.vim</snippet></ROW><ROW><id>602453</id><snippet>:help runtimepath</snippet></ROW><ROW><id>602453</id><snippet>rainbow.vim</snippet></ROW><ROW><id>602453</id><snippet>syn cluster pyParenGroup contains=pythonString,pythonRawString,pythonEscape,pythonNumber,pythonBuiltin,pythonException
syn match pyParenError display ')'
syn region  pyParen     transparent matchgroup=hlLevel0 start='(' end=')' contains=@pyParenGroup,pyParen1
syn region  pyParen1        transparent matchgroup=hlLevel1 start='(' end=')' contains=@pyParenGroup,pyParen2
syn region  pyParen2        transparent matchgroup=hlLevel2 start='(' end=')' contains=@pyParenGroup,pyParen3
syn region  pyParen3        transparent matchgroup=hlLevel3 start='(' end=')' contains=@pyParenGroup,pyParen4
syn region  pyParen4        transparent matchgroup=hlLevel4 start='(' end=')' contains=@pyParenGroup,pyParen5
syn region  pyParen5        transparent matchgroup=hlLevel5 start='(' end=')' contains=@pyParenGroup,pyParen6
syn region  pyParen6        transparent matchgroup=hlLevel6 start='(' end=')' contains=@pyParenGroup,pyParen7
syn region  pyParen7        transparent matchgroup=hlLevel7 start='(' end=')' contains=@pyParenGroup,pyParen8
syn region  pyParen8        transparent matchgroup=hlLevel8 start='(' end=')' contains=@pyParenGroup,pyParen9
syn region  pyParen9        transparent matchgroup=hlLevel9 start='(' end=')' contains=@pyParenGroup,pyParen
hi link pyParenError Error

if &amp;bg == "dark"
    hi default   hlLevel0 ctermfg=red         guifg=red1
    hi default   hlLevel1 ctermfg=yellow      guifg=orange1      
    hi default   hlLevel2 ctermfg=green       guifg=yellow1      
    hi default   hlLevel3 ctermfg=cyan        guifg=greenyellow  
    hi default   hlLevel4 ctermfg=magenta     guifg=green1       
    hi default   hlLevel5 ctermfg=red         guifg=springgreen1 
    hi default   hlLevel6 ctermfg=yellow      guifg=cyan1        
    hi default   hlLevel7 ctermfg=green       guifg=slateblue1   
    hi default   hlLevel8 ctermfg=cyan        guifg=magenta1     
    hi default   hlLevel9 ctermfg=magenta     guifg=purple1
else
    hi default   hlLevel0 ctermfg=red         guifg=red3
    hi default   hlLevel1 ctermfg=darkyellow  guifg=orangered3
    hi default   hlLevel2 ctermfg=darkgreen   guifg=orange2
    hi default   hlLevel3 ctermfg=blue        guifg=yellow3
    hi default   hlLevel4 ctermfg=darkmagenta guifg=olivedrab4
    hi default   hlLevel5 ctermfg=red         guifg=green4
    hi default   hlLevel6 ctermfg=darkyellow  guifg=paleturquoise3
    hi default   hlLevel7 ctermfg=darkgreen   guifg=deepskyblue4
    hi default   hlLevel8 ctermfg=blue        guifg=darkslateblue
    hi default   hlLevel9 ctermfg=darkmagenta guifg=darkviolet
endif
</snippet></ROW><ROW><id>602453</id><snippet>gvim.exe</snippet></ROW><ROW><id>602453</id><snippet>vim/vim70/gvim.exe</snippet></ROW><ROW><id>602453</id><snippet>pyprint.py</snippet></ROW><ROW><id>602453</id><snippet>:e pyprint.py</snippet></ROW><ROW><id>602453</id><snippet>:syntax on</snippet></ROW><ROW><id>602453</id><snippet>)</snippet></ROW><ROW><id>602453</id><snippet>:source code.vim</snippet></ROW><ROW><id>602453</id><snippet>)</snippet></ROW><ROW><id>602453</id><snippet>cd ~
mv .vimrc old_dot_vimrc
mv .gvimrc old_dot_gvimrc
mv .vim old_dot_vim
vim pyprint.py
:e pyprint.py
" Add extra bracket here!
:syntax on
:source code.vim
</snippet></ROW><ROW><id>602750</id><snippet>(Pdb) alias s step ;; l
(Pdb) s
&gt; /usr/lib/python2.5/distutils/core.py(14)&lt;module&gt;()
-&gt; from types import *
 9      # This module should be kept compatible with Python 2.1.
10      
11      __revision__ = "$Id: core.py 38672 2005-03-20 22:19:47Z fdrake $"
12      
13      import sys, os
14  -&gt;  from types import *
15      
16      from distutils.debug import DEBUG
17      from distutils.errors import *
18      from distutils.util import grok_environment_error
19
</snippet></ROW><ROW><id>602750</id><snippet>alias s step ;; l
</snippet></ROW><ROW><id>603233</id><snippet>fread = open('input.csv', 'rb').read()
mytext = fread.decode('utf-16')
</snippet></ROW><ROW><id>603235</id><snippet>[^&lt;&gt;]*
</snippet></ROW><ROW><id>603235</id><snippet>((?!&lt;/a).)*
</snippet></ROW><ROW><id>603235</id><snippet>&lt;/a</snippet></ROW><ROW><id>603460</id><snippet>logger= logging.getLogger( __name__ )
</snippet></ROW><ROW><id>603620</id><snippet>Permission</snippet></ROW><ROW><id>603620</id><snippet>django.contrib.auth.models</snippet></ROW><ROW><id>603620</id><snippet>Permission.objects.all()</snippet></ROW><ROW><id>603620</id><snippet>Permission</snippet></ROW><ROW><id>603620</id><snippet>Permission.objects.get(*args)</snippet></ROW><ROW><id>603620</id><snippet>User.user_permissions.add(permission)</snippet></ROW><ROW><id>603620</id><snippet>is_superuser</snippet></ROW><ROW><id>603620</id><snippet>True</snippet></ROW><ROW><id>603630</id><snippet>.find()</snippet></ROW><ROW><id>603630</id><snippet>.findall()</snippet></ROW><ROW><id>603630</id><snippet>xpath()</snippet></ROW><ROW><id>603630</id><snippet>cssselect()</snippet></ROW><ROW><id>603630</id><snippet>from lxml.html import fromstring
mySearchTree = fromstring(your_input_string)
</snippet></ROW><ROW><id>603630</id><snippet># Find all 'a' elements inside 'tr' table rows with css selector
for a in mySearchTree.cssselect('tr a'):
    print 'found "%s" link to href "%s"' % (a.text, a.get('href'))
</snippet></ROW><ROW><id>603630</id><snippet># Find all 'a' elements inside 'tr' table rows with xpath
for a in mySearchTree.xpath('.//tr/*/a'):
    print 'found "%s" link to href "%s"' % (a.text, a.get('href'))
</snippet></ROW><ROW><id>603651</id><snippet>def iterate(i):
    for value in i:
        yield value
    return
</snippet></ROW><ROW><id>603651</id><snippet>count = 0
for value in iterate(range([])):
    print value
    count += 1
else:
    if count == 0:
        print "list was empty"
</snippet></ROW><ROW><id>603701</id><snippet>[[x0, x1, x2, x3 ... xn],
.....
.....]
</snippet></ROW><ROW><id>603701</id><snippet>[(x1, y2),.....(xn, yn)]
</snippet></ROW><ROW><id>604657</id><snippet>def foo():
    foo.bar = foo.bar + 1

foo.bar = 0

foo()
foo()
foo()

print foo.bar # prints 3
</snippet></ROW><ROW><id>604777</id><snippet>from string import uppercase as up
import itertools

def to_base(q, alphabet):
    if q &lt; 0: raise ValueError( "must supply a positive integer" )
    l = len(alphabet)
    converted = []
    while q != 0:
        q, r = divmod(q, l)
        converted.insert(0, alphabet[r])
    return "".join(converted) or alphabet[0]

class TimestampUniqifier( object ):
    def __init__(self):
        self.last = ''
        self.counter = itertools.count()
    def __call__( self, str ):
        if str == self.last:
            suf = self.counter.next()
            return str + to_base( suf, up )
        else:
            self.last = str
            self.counter = itertools.count()
            return str            

timestamp_uniqify = TimestampUniqifier()
</snippet></ROW><ROW><id>604777</id><snippet>timestamp_uniqify('1')
'1'
timestamp_uniqify('1')
'1A'
timestamp_uniqify('1')
'1B'
timestamp_uniqify('1')
'1C'
timestamp_uniqify('2')
'2'
timestamp_uniqify('3')
'3'
timestamp_uniqify('3')
'3A'
timestamp_uniqify('3')
'3B'
</snippet></ROW><ROW><id>604777</id><snippet>for i in range(100): print timestamp_uniqify('4')

4
4A
4B
4C
4D
4E
4F
4G
4H
4I
4J
4K
4L
4M
4N
4O
4P
4Q
4R
4S
4T
4U
4V
4W
4X
4Y
4Z
4BA
4BB
4BC
4BD
4BE
4BF
4BG
4BH
4BI
4BJ
4BK
4BL
4BM
4BN
4BO
4BP
4BQ
4BR
4BS
4BT
4BU
4BV
4BW
4BX
4BY
4BZ
4CA
4CB
4CC
4CD
4CE
4CF
4CG
4CH
4CI
4CJ
4CK
4CL
4CM
4CN
4CO
4CP
4CQ
4CR
4CS
4CT
4CU
4CV
4CW
4CX
4CY
4CZ
4DA
4DB
4DC
4DD
4DE
4DF
4DG
4DH
4DI
4DJ
4DK
4DL
4DM
4DN
4DO
4DP
4DQ
4DR
4DS
4DT
4DU
</snippet></ROW><ROW><id>604813</id><snippet>def __eq__(self, other):
    return self.Value == other.Value
</snippet></ROW><ROW><id>604813</id><snippet>for index, item in enumerate(arr):
    if item &gt; 100:
        return index, item
</snippet></ROW><ROW><id>605427</id><snippet>
def initialize():
    global VAR
    print('Content-type: text/html\n\n')
    print(VAR)
    VAR = 'h'
    print(VAR)
</snippet></ROW><ROW><id>606133</id><snippet>
&gt;&gt;&gt; from mechanize import Browser
&gt;&gt;&gt; b = Browser()
&gt;&gt;&gt; b._ua_handlers['_cookies'].cookiejar
mechanize._clientcookie.CookieJar[]
&gt;&gt;&gt; b.open('http://google.com')
response_seek_wrapper at 0xb7a922ccL whose wrapped object = closeable_response at 0xb7aa070cL whose fp = socket._fileobject object at 0xb7a94224
&gt;&gt;&gt;
&gt;&gt;&gt; b._ua_handlers['_cookies'].cookiejar
mechanize._clientcookie.CookieJar[Cookie(version=0, name='PREF', value='ID=57d545c229b4cf3f:TM=1236081634:LM=1236081634:S=p001WJMOr-V8Rlvi', port=None, port_specified=False, domain='.google.com', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1299153634, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False), Cookie(version=0, name='PREF', value='ID=20534d80a5ccf2ea:TM=1236081635:LM=1236081635:S=jW3UotZ0dg8sv6mf', port=None, port_specified=False, domain='.google.com.ua', domain_specified=True, domain_initial_dot=True, path='/', path_specified=True, secure=False, expires=1299153635, discard=False, comment=None, comment_url=None, rest={}, rfc2109=False)]
&gt;&gt;&gt;                           
</snippet></ROW><ROW><id>606199</id><snippet>&gt;&gt;&gt; b"abcde"
b'abcde'
&gt;&gt;&gt; b"abcde".decode("utf-8")
'abcde'
</snippet></ROW><ROW><id>606237</id><snippet>
&gt;&gt;&gt; re.match("(get|post|put|head)\s+(\S+) ",'GET some-site.com HTTP/1.0 ...',re.IGNORECASE).groups()
('GET', 'some-site.com')
&gt;&gt;&gt;                                                                                           
</snippet></ROW><ROW><id>606269</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>606269</id><snippet>sys.path</snippet></ROW><ROW><id>606269</id><snippet>.bashrc</snippet></ROW><ROW><id>606269</id><snippet>.cshrc</snippet></ROW><ROW><id>606287</id><snippet>easy_install -U Sphinx
</snippet></ROW><ROW><id>606287</id><snippet>sudo</snippet></ROW><ROW><id>606287</id><snippet>sudo easy_install -U Sphinx
</snippet></ROW><ROW><id>606287</id><snippet>easy_install</snippet></ROW><ROW><id>606371</id><snippet>
&gt;&gt;&gt; p = re.compile('.*', re.DEBUG)
max_repeat 0 65535
  any None
&gt;&gt;&gt;                         
</snippet></ROW><ROW><id>606511</id><snippet>IPV6_JOIN_GROUP</snippet></ROW><ROW><id>606511</id><snippet>IPV6_JOIN_ANYCAST</snippet></ROW><ROW><id>606511</id><snippet>s.setsockopt()</snippet></ROW><ROW><id>606511</id><snippet>socket</snippet></ROW><ROW><id>606511</id><snippet>IPV6_JOIN_ANYCAST</snippet></ROW><ROW><id>606511</id><snippet>27</snippet></ROW><ROW><id>606511</id><snippet>IPV6_LEAVE_ANYCAST</snippet></ROW><ROW><id>606511</id><snippet>28</snippet></ROW><ROW><id>606998</id><snippet>import __main__
print __main__.__file__
</snippet></ROW><ROW><id>606999</id><snippet>save()</snippet></ROW><ROW><id>606999</id><snippet>clean()</snippet></ROW><ROW><id>606999</id><snippet>clean_somefield()</snippet></ROW><ROW><id>606999</id><snippet>clean_name</snippet></ROW><ROW><id>607051</id><snippet>class JournalForm(ModelForm):
    tank = forms.ModelChoiceField(label="",
                                  queryset=TankProfile.objects.all(),
                                  widget=forms.HiddenInput)
</snippet></ROW><ROW><id>607515</id><snippet>d = SomeObject()</snippet></ROW><ROW><id>607515</id><snippet>def fread():
    d = None
    for line in open('somefile.txt'):

        if d is None:
            d = SomeObject()

        if line.strip():
            # do some processing
        else:
            yield d
            d = None

    if d: yield d
</snippet></ROW><ROW><id>607741</id><snippet>import imaplib

sess = imaplib.IMAP4()
sess.login('superuser', 'password')
# Honor the mailbox syntax of your server!
sess.select('INBOX/Luke') # Or something similar. 
typ, data = sess.search(None, 'ALL') # All Messages.

subjectlines = []
for num in data[0].split():
    typ, msgdata = sess.fetch(num, '(RFC822.SIZE BODY[HEADER.FIELDS (SUBJECT)])')
    subject = msgdata[0][1].lstrip('Subject: ').strip()
    subjectlines.append(subject)
</snippet></ROW><ROW><id>607803</id><snippet>import re
pat = re.compile('([\w\s]+)\(([\w\s]+)(\d+/\d+)\)')
info = pat.match(s)
print info.groups()

('Michael Schenker Group ', 'House of Blues Dallas ', '3/26')
</snippet></ROW><ROW><id>607803</id><snippet>info</snippet></ROW><ROW><id>607803</id><snippet>print info.group(1) # or info.groups()[0]

print '"%s","%s","%s"' % (info.group(1), info.group(2), info.group(3))
"Michael Schenker Group","House of Blues Dallas","3/26"
</snippet></ROW><ROW><id>607803</id><snippet>([\w\s]+)</snippet></ROW><ROW><id>607803</id><snippet>\(</snippet></ROW><ROW><id>607803</id><snippet>([\w\s]+)</snippet></ROW><ROW><id>607803</id><snippet>(\d+/\d+)</snippet></ROW><ROW><id>607803</id><snippet>\)</snippet></ROW><ROW><id>608218</id><snippet>None</snippet></ROW><ROW><id>608218</id><snippet>django/core/mail.py</snippet></ROW><ROW><id>608218</id><snippet>mail_admins()</snippet></ROW><ROW><id>608218</id><snippet>django/core/mail.py</snippet></ROW><ROW><id>608218</id><snippet>django/core/mail.py</snippet></ROW><ROW><id>608218</id><snippet>send_mail()</snippet></ROW><ROW><id>608218</id><snippet>from_mail</snippet></ROW><ROW><id>608322</id><snippet>file.flush()</snippet></ROW><ROW><id>608589</id><snippet>bind</snippet></ROW><ROW><id>608589</id><snippet>s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>608589</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>608814</id><snippet>  import win32gui
  w=win32gui
  w.GetWindowText (w.GetForegroundWindow())
</snippet></ROW><ROW><id>608823</id><snippet>admin/base_site.html</snippet></ROW><ROW><id>608823</id><snippet>{% extends "admin/base.html" %}
{% block nav-global %}
  &lt;p&gt;&lt;a href="{% url your-named-url %}"&gt;Do Something&lt;/a&gt;&lt;/p&gt;
{% endblock %}
</snippet></ROW><ROW><id>608823</id><snippet>if not request.user.is_staff:
    return Http404
</snippet></ROW><ROW><id>608823</id><snippet>from subprocess import call
retcode = call(["/full/path/myscript.py", "arg1"])
</snippet></ROW><ROW><id>609059</id><snippet>def foo(x)
  (0..x).select { |i| bar(i) }
end
</snippet></ROW><ROW><id>609059</id><snippet>yield</snippet></ROW><ROW><id>609228</id><snippet>import urllib
q = ['with space1', 'with space2']
qescaped = map(urllib.quote, q)
</snippet></ROW><ROW><id>609675</id><snippet>In [1]: (import sys)
------------------------------------------------------------
File "&lt;ipython console&gt;", line 1
  (import sys)
       ^
&lt;type 'exceptions.SyntaxError'&gt;: invalid syntax
</snippet></ROW><ROW><id>610893</id><snippet>if hasattr(a, 'property'):
    a.property
</snippet></ROW><ROW><id>610893</id><snippet>hasattr</snippet></ROW><ROW><id>610893</id><snippet>hasattr</snippet></ROW><ROW><id>611145</id><snippet>class QuestionInline(admin.TabularInline):
    model = Question
    extra = 20

class AnswerInline(admin.TabularInline):
    model = Answer
    extra = 4

class QuestionAdmin(admin.ModelAdmin):
    inlines = [AnswerInline]

class AnswerAdmin(admin.ModelAdmin):
    pass

class QuizAdmin(admin.ModelAdmin):
    inlines = [QuestionInline]
</snippet></ROW><ROW><id>611725</id><snippet>save()</snippet></ROW><ROW><id>612668</id><snippet>built_in_list = ['__builtins__', '__doc__', '__file__', '__name__']

for i in built_in_list:
    if i in module.__dict__:
        del module.__dict__[i]
</snippet></ROW><ROW><id>612668</id><snippet>from mypackage import fooplugin, barplugin, bazplugin
plugins= [fooplugin.FooPlugin, barplugin.BarPlugin, bazplugin.BazPlugin]
</snippet></ROW><ROW><id>612898</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>612898</id><snippet>request.COOKIES</snippet></ROW><ROW><id>612898</id><snippet>process_request</snippet></ROW><ROW><id>612898</id><snippet>settings.SESSION_COOKIE_NAME</snippet></ROW><ROW><id>612898</id><snippet>request.POST</snippet></ROW><ROW><id>612898</id><snippet>request.COOKIES</snippet></ROW><ROW><id>612898</id><snippet>HttpResponseBadRequest</snippet></ROW><ROW><id>612898</id><snippet>request.FILES</snippet></ROW><ROW><id>613072</id><snippet>ls -al | python -c "import sys; print sys.stdin.readlines()"
</snippet></ROW><ROW><id>613218</id><snippet>import operator
x = {1: 2, 3: 4, 4:3, 2:1, 0:0}
sorted_x = sorted(x.iteritems(), key=operator.itemgetter(1))
</snippet></ROW><ROW><id>613218</id><snippet>sorted_x</snippet></ROW><ROW><id>613218</id><snippet>dict(sorted_x) == x</snippet></ROW><ROW><id>613271</id><snippet>$ **uname -a**
Darwin lizard-wifi 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
dpc@lizard-wifi:~$ **which python**
/usr/bin/python
</snippet></ROW><ROW><id>613271</id><snippet>dpc@lizard-wifi:~$ python
Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import hashlib, hmac
&gt;&gt;&gt; print hmac.new("\x0b"*20, "Hi There", hashlib.sha512).hexdigest()
9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
&gt;&gt;&gt;
</snippet></ROW><ROW><id>613271</id><snippet>python2.5</snippet></ROW><ROW><id>613271</id><snippet>$ /opt/local/bin/python2.5
Python 2.5.4 (r254:67916, Feb  3 2009, 21:40:31) 
[GCC 4.0.1 (Apple Inc. build 5488)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import hashlib, hmac
&gt;&gt;&gt; print hmac.new("\x0b"*20, "Hi There", hashlib.sha512).hexdigest()
87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
&gt;&gt;&gt;
</snippet></ROW><ROW><id>613482</id><snippet>/*
    Get my IP address
*/


import tango.net.http.HttpGet;
import tango.io.Stdout;

void main()
{
      try
      {
          auto page = new HttpGet ("http://automation.whatismyip.com/n09230945.asp");
          Stdout(cast(char[])page.read);
      }
      catch(Exception ex)
      {
          Stdout("An exception occurred");
      }
}
</snippet></ROW><ROW><id>613482</id><snippet>from urllib import urlopen
print urlopen('http://automation.whatismyip.com/n09230945.asp').read()
</snippet></ROW><ROW><id>613499</id><snippet>==</snippet></ROW><ROW><id>613499</id><snippet>is</snippet></ROW><ROW><id>613499</id><snippet>*x</snippet></ROW><ROW><id>613499</id><snippet>**x</snippet></ROW><ROW><id>613499</id><snippet>__set__</snippet></ROW><ROW><id>613591</id><snippet>python</snippet></ROW><ROW><id>613591</id><snippet>python 2.5.1</snippet></ROW><ROW><id>613591</id><snippet>select.poll()</snippet></ROW><ROW><id>613591</id><snippet>$ /usr/bin/python
Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import socket, select
&gt;&gt;&gt; select.poll()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'poll'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>613591</id><snippet>select.poll()</snippet></ROW><ROW><id>613591</id><snippet>$ /opt/local/bin/python2.5
Python 2.5.4 (r254:67916, Feb  3 2009, 21:40:31) 
[GCC 4.0.1 (Apple Inc. build 5488)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import socket, select
&gt;&gt;&gt; select.poll()
&lt;select.poll object at 0x11128&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>616423</id><snippet>import sys
import py_compile
import compileall

class ReportProblem:
    def __nonzero__(self):
        type, value, traceback = sys.exc_info()
        if type is not None and issubclass(type, py_compile.PyCompileError):
            print "Problem with", repr(value)
            raise type, value, traceback
        return 1
report_problem = ReportProblem()

compileall.compile_dir(".", quiet=report_problem)
</snippet></ROW><ROW><id>616501</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>616501</id><snippet>$ ls -l /usr/bin/python
lrwxr-xr-x  1 root  wheel  72 Aug 31  2008 /usr/bin/python -&gt; ../../System/Library/Frameworks/Python.framework/Versions/2.5/bin/python
</snippet></ROW><ROW><id>616501</id><snippet>/Versions</snippet></ROW><ROW><id>616501</id><snippet>$ ls -l /System/Library/Frameworks/Python.framework/Versions/
total 8
drwxr-xr-x   7 root  wheel  238 Aug 31  2008 2.3
drwxr-xr-x  13 root  wheel  442 Nov 22 20:40 2.5
lrwxr-xr-x   1 root  wheel    3 Aug 31  2008 Current -&gt; 2.5
</snippet></ROW><ROW><id>616501</id><snippet>ln</snippet></ROW><ROW><id>616501</id><snippet>python</snippet></ROW><ROW><id>616558</id><snippet>$ set FOO='bar'
$ echo $FOO
bar
$ python -c 'import os; print os.getenv("FOO")'
None

$ setenv BAR 'wiz'
$ echo $BAR
wiz
$ python -c 'import os; print os.getenv("BAR")'
wiz
</snippet></ROW><ROW><id>616666</id><snippet>def XinY_Stack(x, y):
    stack = [(x, 0, [0]*y)]
    while stack:
        x, index, slots = stack.pop()
        if (y - index) == 1:
            slots[index] = x
            print slots
            slots[index] = 0
        else:
            for i in range(x + 1):
                slots[index] = x-i
                stack.append((i, index + 1, slots[:]))
</snippet></ROW><ROW><id>616666</id><snippet>&gt;&gt;&gt; XinY_Stack(2, 3)
[0, 0, 2]
[0, 1, 1]
[0, 2, 0]
[1, 0, 1]
[1, 1, 0]
[2, 0, 0]
</snippet></ROW><ROW><id>616666</id><snippet>itertools.product</snippet></ROW><ROW><id>616666</id><snippet>def XinY_Product(nmarbles, nslots):
    return (slots
            for slots in product(xrange(nmarbles + 1), repeat=nslots)
            if sum(slots) == nmarbles)
</snippet></ROW><ROW><id>616666</id><snippet>def XinY_Iter(nmarbles, nslots):
    assert 0 &lt; nslots &lt; 22 # 22 -&gt; too many statically nested blocks
    if nslots == 1: return iter([nmarbles])
    # generate code for iter solution
    TAB = "  "
    loopvars   = []
    stmt       = ["def f(n):\n"]
    for i in range(nslots - 1):
        var = "m%d" % i
        stmt += [TAB * (i + 1), "for %s in xrange(n - (%s)):\n"
                 % (var, '+'.join(loopvars) or 0)]
        loopvars.append(var)

    stmt += [TAB * (i + 2), "yield ", ','.join(loopvars),
             ', n - 1 - (', '+'.join(loopvars), ')\n']
    print ''.join(stmt)
    # exec the code within empty namespace
    ns = {}
    exec(''.join(stmt), ns, ns)
    return ns['f'](nmarbles + 1)
</snippet></ROW><ROW><id>616666</id><snippet>&gt;&gt;&gt; list(XinY_Product(2, 3))
[(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]
&gt;&gt;&gt; list(XinY_Iter(2, 3))
def f(n):
  for m0 in xrange(n - (0)):
    for m1 in xrange(n - (m0)):
      yield m0,m1, n - 1 - (m0+m1)

[(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]
</snippet></ROW><ROW><id>617451</id><snippet>encoder = Popen(["uuencode", "dummy"], stdin=PIPE, stdout=PIPE)
compressor = Popen("gzip", stdin=PIPE, stdout=encoder.stdin)

compressor.communicate("UUencode me please")
encoded_text = encoder.communicate()[0]
print encoded_text

begin 644 dummy
F'XL(`%]^L$D``PL-3&lt;U+SD])5&lt;A-52C(24TL3@4`;2O+"!(`````
`
end
</snippet></ROW><ROW><id>617968</id><snippet>alias myip="python -c 'from urllib import urlopen; print urlopen(\"http://whatismyip.appjet.net\").read()[:-1]'"
</snippet></ROW><ROW><id>618626</id><snippet>request.POST.getlist('services')
</snippet></ROW><ROW><id>618939</id><snippet>b</snippet></ROW><ROW><id>618939</id><snippet>rrule(MONTHLY, dtstart = b).between(b, e, inc=True)
</snippet></ROW><ROW><id>618939</id><snippet>between</snippet></ROW><ROW><id>619899</id><snippet>mysql_cmd_line = "/Applications/MAMP/Library/bin/mysql --defaults-file=credentials.cnf"
</snippet></ROW><ROW><id>619899</id><snippet>[client]
host     = localhost
user     = root
password = password
socket   = /var/run/mysqld/mysqld.sock
</snippet></ROW><ROW><id>619919</id><snippet>otf2bdf -p 8 -r 72 -o fonts/slkscr.bdf fonts/slkscr.ttf
</snippet></ROW><ROW><id>620547</id><snippet>from inspect import getmro
[st for cls, st in MY_TYPES.items() if cls in getmro(ClassB)]

['This is ClassA or a subclass']
</snippet></ROW><ROW><id>620547</id><snippet>(st for cls, st in MY_TYPES.iteritems() if cls in getmro(ClassB))
</snippet></ROW><ROW><id>620878</id><snippet>def find_class(self, module, name):
    # Subclasses may override this
    __import__(module)
    mod = sys.modules[module]
    klass = getattr(mod, name)
    return klass
</snippet></ROW><ROW><id>620878</id><snippet>klass = getattr(mod, name)</snippet></ROW><ROW><id>621357</id><snippet>test[3:] = [3, 4, 5, 6, 7, 8, 9]
test[:3] = [0, 1, 2]
</snippet></ROW><ROW><id>621770</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; u = uuid.uuid4()
&gt;&gt;&gt; u
UUID('d94303e7-1be4-49ef-92f2-472bc4b4286d')
&gt;&gt;&gt; u.bytes
'\xd9C\x03\xe7\x1b\xe4I\xef\x92\xf2G+\xc4\xb4(m'
&gt;&gt;&gt; len(u.bytes)
16
&gt;&gt;&gt;
</snippet></ROW><ROW><id>621770</id><snippet>&gt;&gt;&gt; u.bytes.encode("base64")
'2UMD5xvkSe+S8kcrxLQobQ==\n'
&gt;&gt;&gt; len(u.bytes.encode("base64")) 
25
&gt;&gt;&gt; u.bytes.encode("base64")[:21]
'2UMD5xvkSe+S8kcrxLQob'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>621770</id><snippet>os.urandom(16).encode("base64")[:21]
</snippet></ROW><ROW><id>621798</id><snippet>def reprunicode(u):
    return repr(u).decode('raw_unicode_escape')

print u'[%s]' % u', '.join([u'(%s,)' % reprunicode(ti[0]) for ti in t])
</snippet></ROW><ROW><id>621917</id><snippet>__unicode__</snippet></ROW><ROW><id>621917</id><snippet>repr</snippet></ROW><ROW><id>621917</id><snippet>self.id</snippet></ROW><ROW><id>621917</id><snippet># models.py
class Profile(models.Model):
    name = models.CharField('profile name', max_length=10)

    def __unicode__(self):
        return u'%d' % self.id

class Plan(models.Model):
    name = models.CharField('plan name', max_length=10)
    profile = models.ForeignKey(Profile, related_name='profiles')

    def __unicode__(self):
        return self.name


# forms.py
class PlanForm(forms.ModelForm):
    profile = forms.ModelChoiceField(queryset=Profile.objects.all(),
            widget=forms.HiddenInput())

    class Meta:
        model = Plan

# views.py
def add_plan(request):

    if request.method == 'POST':
        return HttpResponse(request.POST['profile'])


    profile = Profile.objects.all()[0]
    form = PlanForm(initial={'profile':profile})
    return render_to_response('add_plan.html',
            {
                'form':form,
            },
            context_instance=RequestContext(request))
</snippet></ROW><ROW><id>621917</id><snippet>&lt;input type="hidden" name="profile" value="1" id="id_profile" /&gt;
</snippet></ROW><ROW><id>621928</id><snippet>test.cgi</snippet></ROW><ROW><id>621928</id><snippet>test.cgi</snippet></ROW><ROW><id>621928</id><snippet>python</snippet></ROW><ROW><id>621928</id><snippet>PATH</snippet></ROW><ROW><id>621928</id><snippet>PATH</snippet></ROW><ROW><id>621928</id><snippet>connect()</snippet></ROW><ROW><id>621928</id><snippet>SELECT</snippet></ROW><ROW><id>621928</id><snippet>python</snippet></ROW><ROW><id>621928</id><snippet>which python</snippet></ROW><ROW><id>621928</id><snippet>import cgitb
cgitb.enable()
</snippet></ROW><ROW><id>621928</id><snippet>&gt;&gt;&gt; import MySQLdb
</snippet></ROW><ROW><id>622173</id><snippet>foo.__class__</snippet></ROW><ROW><id>622173</id><snippet>foo</snippet></ROW><ROW><id>622173</id><snippet>def conv(foo, bar) :
    return foo.__class__(bar)
</snippet></ROW><ROW><id>622173</id><snippet>foo</snippet></ROW></DATA>