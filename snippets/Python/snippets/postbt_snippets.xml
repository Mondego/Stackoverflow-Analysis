<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>10597313</id><snippet>#!/usr/bin/env python
#

import codeWriter
import vmTranslator
import parser

# Add code here to parse arguments and call into the imported code.
</snippet></ROW><ROW><id>10597313</id><snippet>VMTranslator</snippet></ROW><ROW><id>10597313</id><snippet>chmod +x VMTranslator</snippet></ROW><ROW><id>10597735</id><snippet>foo.csv</snippet></ROW><ROW><id>10597735</id><snippet>4/29/12,22:44:32:865 EDT,0000004b,A,CHFW0019I,The Transport Channel Service has started chain chain_308.
4/29/12,22:44:32:865 EDT,0000004b,A,CHFW0019I,The Transport Channel Service has started chain chain_308.
4/29/12,22:44:32:865 EDT,0000004b,A,CHFW0019I,The Transport Channel Service has started chain chain_308.
4/29/12,22:44:32:865 EDT,0000004b,A,CHFW0019I,The Transport Channel Service has started chain chain_308.
4/29/12,22:44:32:865 EDT,0000004b,A,CHFW0019I,The Transport Channel Service has started chain chain_308.
</snippet></ROW><ROW><id>10597735</id><snippet>intl.cpl</snippet></ROW><ROW><id>10597735</id><snippet>intl.cpl</snippet></ROW><ROW><id>10598040</id><snippet>&gt;&gt;&gt; x = [{'sby_0': 'sb0'}, {'sby_1': 'sb1'}]
&gt;&gt;&gt; i = 1
&gt;&gt;&gt; x[1]["sby_%s" %i]
'sb1'
</snippet></ROW><ROW><id>10598040</id><snippet>%d</snippet></ROW><ROW><id>10598040</id><snippet>%s</snippet></ROW><ROW><id>10598040</id><snippet>i</snippet></ROW><ROW><id>10598040</id><snippet>"sby_%s", i</snippet></ROW><ROW><id>10598040</id><snippet>"sby_%s" % i</snippet></ROW><ROW><id>10598040</id><snippet>%</snippet></ROW><ROW><id>10598040</id><snippet>,</snippet></ROW><ROW><id>10598370</id><snippet>    import numpy as np
    &gt;&gt;&gt; x = np.arange(0,27)
    &gt;&gt;&gt; x
    array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26])
    &gt;&gt;&gt; x.reshape(3,3,3)
    array([[[ 0,  1,  2],
    [ 3,  4,  5],
    [ 6,  7,  8]],

    [[ 9, 10, 11],
     [12, 13, 14],
     [15, 16, 17]],

    [[18, 19, 20],
     [21, 22, 23],
     [24, 25, 26]]])

    &gt;&gt;&gt; x[0]
    array([[0, 1, 2],
    [3, 4, 5],
    [6, 7, 8]])
    &gt;&gt;&gt; x[:,1,:]
    array([[ 3,  4,  5],
    [12, 13, 14],
    [21, 22, 23]])
    &gt;&gt;&gt; x[:,1,1]
    array([ 4, 13, 22])
</snippet></ROW><ROW><id>10598573</id><snippet>def merge(a,b):
    for ax, (first, bx) in zip(a,b):
        if ax[0] != first:
            raise ValueError("Items don't match")
        yield ax + (bx,)

print list(merge(a,b))
print list(merge(merge(a,b),c))
</snippet></ROW><ROW><id>10598900</id><snippet>s.connect(adr)
</snippet></ROW><ROW><id>10598900</id><snippet>s.bind(adr)
</snippet></ROW><ROW><id>10599119</id><snippet>&lt;?xml version="1.0" ?&gt;
&lt;ones&gt;
&lt;one&gt;
 &lt;a&gt;sth&lt;/a&gt;
 &lt;b&gt;sth&lt;/b&gt;
 &lt;c&gt;sth&lt;/c&gt;
&lt;/one&gt;
&lt;one&gt;
 &lt;a&gt;x&lt;/a&gt;
 &lt;b&gt;y&lt;/b&gt;
 &lt;c&gt;z&lt;/c&gt;
&lt;/one&gt;
&lt;/ones&gt;
</snippet></ROW><ROW><id>10599119</id><snippet>from xml.dom import minidom

xmldoc = minidom.parse('filePath')
root = xmldoc.documentElement

ones = root.getElementsByTagName('one')

L = []
for one in ones:
    m = {}
    #print onn.getElementsByTagName('a')[0].childNodes[0].nodeValue
    #print n.getElementsByTagName('b')[0].childNodes[0].nodeValue
    #print n.getElementsByTagName('c')[0].childNodes[0].nodeValue
    for n in one.childNodes:
         if n.nodeType == n.ELEMENT_NODE:
                 m[n.nodeName] =n.firstChild.nodeValue
    L.append(m)
</snippet></ROW><ROW><id>10599305</id><snippet>migrate</snippet></ROW><ROW><id>10599359</id><snippet>None</snippet></ROW><ROW><id>10599359</id><snippet>is not None</snippet></ROW><ROW><id>10599359</id><snippet>None</snippet></ROW><ROW><id>10599359</id><snippet>__default = object()
def get_data(replace_nan=__default):
    if replace_nan is __default:
        ...
</snippet></ROW><ROW><id>10599367</id><snippet>In [3]: dis.dis(size)
  2           0 LOAD_FAST                0 (number)
              3 LOAD_CONST               1 (100)
              6 COMPARE_OP               0 (&lt;)
              9 POP_JUMP_IF_FALSE       19

  3          12 LOAD_GLOBAL              0 (Small)
             15 CALL_FUNCTION            0
             18 RETURN_VALUE        

  5     &gt;&gt;   19 LOAD_FAST                0 (number)
             22 LOAD_CONST               2 (1000)
             25 COMPARE_OP               0 (&lt;)
             28 POP_JUMP_IF_FALSE       38

  6          31 LOAD_GLOBAL              1 (Medium)
             34 CALL_FUNCTION            0
             37 RETURN_VALUE        

  8     &gt;&gt;   38 LOAD_GLOBAL              2 (Big)
             41 CALL_FUNCTION            0
             44 RETURN_VALUE        

In [4]: dis.dis(size1)
 11           0 LOAD_FAST                0 (number)
              3 LOAD_CONST               1 (100)
              6 COMPARE_OP               0 (&lt;)
              9 POP_JUMP_IF_FALSE       19

 12          12 LOAD_GLOBAL              0 (Small)
             15 CALL_FUNCTION            0
             18 RETURN_VALUE        

 13     &gt;&gt;   19 LOAD_FAST                0 (number)
             22 LOAD_CONST               2 (1000)
             25 COMPARE_OP               0 (&lt;)
             28 POP_JUMP_IF_FALSE       38

 14          31 LOAD_GLOBAL              1 (Medium)
             34 CALL_FUNCTION            0
             37 RETURN_VALUE        

 16     &gt;&gt;   38 LOAD_GLOBAL              2 (Big)
             41 CALL_FUNCTION            0
             44 RETURN_VALUE        
             45 LOAD_CONST               0 (None)
             48 RETURN_VALUE        
</snippet></ROW><ROW><id>10599367</id><snippet>return None</snippet></ROW><ROW><id>10599462</id><snippet>after</snippet></ROW><ROW><id>10599462</id><snippet>import Tkinter as tk

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.label = tk.Label(self, text="", width=10)
        self.label.pack()
        self.remaining = 0
        self.countdown(10)

    def countdown(self, remaining = None):
        if remaining is not None:
            self.remaining = remaining

        if self.remaining &lt;= 0:
            self.label.configure(text="time's up!")
        else:
            self.label.configure(text="%d" % self.remaining)
            self.remaining = self.remaining - 1
            self.after(1000, self.countdown)

if __name__ == "__main__":
    app = ExampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>10599944</id><snippet>display_next</snippet></ROW><ROW><id>10599944</id><snippet>IndexError</snippet></ROW><ROW><id>10599944</id><snippet>__init__</snippet></ROW><ROW><id>10599944</id><snippet>self.index=-1</snippet></ROW><ROW><id>10599944</id><snippet>__init__</snippet></ROW><ROW><id>10599944</id><snippet>self.Button = Tkinter.Button(self,text="Next",command=self.display_next)
</snippet></ROW><ROW><id>10599944</id><snippet>__init__</snippet></ROW><ROW><id>10599944</id><snippet>display_next</snippet></ROW><ROW><id>10599944</id><snippet>config</snippet></ROW><ROW><id>10599944</id><snippet>class SimpleAppTk(Tkinter.Frame):
    def __init__(self,*args,**kwargs):
        Tkinter.Frame.__init__(self,*args,**kwargs)

        self.filelist=[]  #get your files here
        #it probably would look like:
        #for d in os.listdir(parentDir):
        #    self.filelist.extend(glob.glob(os.path.join(parentDir,d,'*.jpg'))
        self.index=-1
        self.setup()
        self.display_next()

    def setup(self):
        self.Label=Tkinter.Label(self)
        self.Label.grid(row=0,column=0)
        self.Button=Tkinter.Button(self,text="Next",command=self.display_next)
        self.Button.grid(row=0,column=1)

    def display_next(self):
        self.index+=1
        try:
            f=self.filelist[self.index]
        except IndexError:
            self.index=-1  #go back to the beginning of the list.
            self.display_next()
            return

        #create PhotoImage here
        photoimage=...
        self.Label.config(image=photoimage)
        self.Label.image=photoimage

if __name__ == "__main__":
   root=Tkinter.Tk()
   my_app=SimpleAppTk(root)
   my_app.grid(row=0,column=0)
   root.mainloop()
</snippet></ROW><ROW><id>10599944</id><snippet>self.grid</snippet></ROW><ROW><id>10599944</id><snippet>Tkinter.Tk</snippet></ROW><ROW><id>10600261</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)                 

s.connect(("www.python.org" , 80))
s.sendall("GET /\r\n") # you're missing this line
print s.recv(4096)
s.close    
</snippet></ROW><ROW><id>10600914</id><snippet>def save_b(self, cr, uid, ids, field_name, arg, context):
    b_obj = self.pool.get('class.b') # Fixes (#2)
    for record in self.browse(cr, uid, ids, context=context):
        num = 22
        for i in range(record.nombre):
            num += 1
            new_id = b_obj.create(cr, uid, {
                'ql': num,
                'id_classb': record.id
            }, context=context) # Fixes (#1)
</snippet></ROW><ROW><id>10600914</id><snippet>def save_b(self, cr, uid, ids, field_name, arg, context):
    for record in self.browse(cr, uid, ids, context=context):
        sub_lines = []
        num = 22
        for i in range(record.nombre):
            num += 1
            sub_lines.append( (0,0,{'q1': num}) )
            # Notice how we don't pass id_classb value here,
            # it is implicit when we write one2many field
        record.write({'Inventaire': sub_lines}, context=context)
</snippet></ROW><ROW><id>10600966</id><snippet>seen = set()
with open(filename, 'r') as f:
    for line in f:
        if line not in seen:
            print line
            seen.add(line)
</snippet></ROW><ROW><id>10601271</id><snippet>def remove_user(self,user_or_username):
    try:
        #If user_or_username is a User object
        username = user_or_username.name
    except AttributeError:   #Oops -- didn't works.  ask forgiveness ;-)
        #If user_or_username is a string
        username = user_or_username
    remote.remove(username)
</snippet></ROW><ROW><id>10601271</id><snippet>AttributeError</snippet></ROW><ROW><id>10601271</id><snippet>remove()</snippet></ROW><ROW><id>10601360</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; data = {'105':[{'2005': 500}, {'2005': 13000}, {'2006': 100}, {'2006': 200}, {'2006': 900}], '256': [{'2005': 5000}, {'2005': 800}]}

&gt;&gt;&gt; sum(map(Counter, data['105']), Counter())['2006']
1200
</snippet></ROW><ROW><id>10601360</id><snippet>sumif</snippet></ROW><ROW><id>10601360</id><snippet>sumif = lambda x, y: sum(map(Counter, data[x]), Counter())[y]
</snippet></ROW><ROW><id>10601523</id><snippet>ContractForm</snippet></ROW><ROW><id>10601523</id><snippet>administrative/models.py</snippet></ROW><ROW><id>10601523</id><snippet>...
File "/media/truecrypt1/develope/Django-1.3.1/dbMobile/../dbMobile/main/models.py", line 5, in &lt;module&gt;
from administrative.models import Contract #, Crefcontr2num 
File "/media/truecrypt1/develope/Django-1.3.1/dbMobile/administrative/models.py", line 28, in &lt;module&gt; 
class ContractForm(ModelForm):
...
</snippet></ROW><ROW><id>10601523</id><snippet>from administrative.models import Contract
</snippet></ROW><ROW><id>10601523</id><snippet>administrative/models.py</snippet></ROW><ROW><id>10601523</id><snippet>Contract</snippet></ROW><ROW><id>10601523</id><snippet>ContractForm</snippet></ROW><ROW><id>10601709</id><snippet>defaultdict</snippet></ROW><ROW><id>10601709</id><snippet>from collections import defaultdict

customers = defaultdict(list)
</snippet></ROW><ROW><id>10601709</id><snippet>customers['customer1'].append(('milk', 3))
customers['customer1'].append(('bread', 5))
customers['customer2'].append(('cereal', 7))
</snippet></ROW><ROW><id>10601709</id><snippet>&gt;&gt;&gt; print dict(customers)
{'customer1': [('milk', 3), ('bread', 5)], 'customer2': [('cereal', 7)]}
</snippet></ROW><ROW><id>10601743</id><snippet>str</snippet></ROW><ROW><id>10601743</id><snippet>unicode</snippet></ROW><ROW><id>10601743</id><snippet>*set</snippet></ROW><ROW><id>10601743</id><snippet>*get</snippet></ROW><ROW><id>10601743</id><snippet>str</snippet></ROW><ROW><id>10601743</id><snippet>str</snippet></ROW><ROW><id>10601743</id><snippet>ascii</snippet></ROW><ROW><id>10601749</id><snippet>&lt;body&gt;&lt;iframe src="http://10.10.34.34?type=Invalid Site</snippet></ROW><ROW><id>10601807</id><snippet>class Test(object):
    __slots__ = ("prop",)

t = Test()
</snippet></ROW><ROW><id>10601807</id><snippet>t.prop
</snippet></ROW><ROW><id>10601807</id><snippet>Test.prop.__get__(t, Test)
</snippet></ROW><ROW><id>10601807</id><snippet>Test.prop</snippet></ROW><ROW><id>10601807</id><snippet>&lt;type 'member_descriptor'&gt;</snippet></ROW><ROW><id>10601807</id><snippet>prop</snippet></ROW><ROW><id>10601807</id><snippet>Test</snippet></ROW><ROW><id>10601807</id><snippet>member_descriptor</snippet></ROW><ROW><id>10601807</id><snippet>class Test(object):
    @property
    def prop(self):
        return self.__dict__['prop']

    @property
    def prop(self):
        return "property"
</snippet></ROW><ROW><id>10601807</id><snippet>prop</snippet></ROW><ROW><id>10601807</id><snippet>&gt;&gt;&gt; class Test1(object):
...     __slots__ = ["prop"]
...     prop = property(lambda self: "property")
... 
&gt;&gt;&gt; class Test2(object):
...     __slots__ = ["prop"]
... 
&gt;&gt;&gt; t = Test1()
&gt;&gt;&gt; t.prop
'property'
&gt;&gt;&gt; t.__class__ = Test2
&gt;&gt;&gt; t.prop = 5
&gt;&gt;&gt; t.prop
5
&gt;&gt;&gt; t.__class__ = Test1
&gt;&gt;&gt; t.prop
'property'
</snippet></ROW><ROW><id>10601807</id><snippet>__slots__</snippet></ROW><ROW><id>10602069</id><snippet>svg</snippet></ROW><ROW><id>10602069</id><snippet>svg</snippet></ROW><ROW><id>10602069</id><snippet>g("set terminal svg")</snippet></ROW><ROW><id>10602069</id><snippet>g("set output 'filename.svg'")</snippet></ROW><ROW><id>10602350</id><snippet> enum_match = re.compile('\s*(\w*)\s*(,\s*|=\s*(\d*)\s*,)$')
</snippet></ROW><ROW><id>10602450</id><snippet>def output(level):
   level = raw_input("Enter a number from 0-4 (Press &lt;Enter&gt; to quit): ")
   while level != "":
        check_mark(level)
        level = raw_input("\nEnter a number from 0-4 (Press &lt;Enter&gt; to quit): ")
</snippet></ROW><ROW><id>10602478</id><snippet>textwrap</snippet></ROW><ROW><id>10602478</id><snippet>s="""Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute 
irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla 
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia
deserunt mollit anim id est laborum."""

import textwrap

print textwrap.fill(s,37)
</snippet></ROW><ROW><id>10602648</id><snippet>u</snippet></ROW><ROW><id>10602648</id><snippet>prefixes=["J", "K", "L", "M", "N", "Ou", "P", "Qu"]
suffix="ack"

for letters in prefixes:
    print letters + suffix
</snippet></ROW><ROW><id>10602681</id><snippet>from datetime import date

with open("file_with_data.txt", "r") as fl:
    datadict = dict([ (file_name, date.fromtimestamp(float(timestamp))
      for line in fl.readlines() for file_name, timestamp in line.split()])
</snippet></ROW><ROW><id>10602856</id><snippet>proto</snippet></ROW><ROW><id>10602856</id><snippet>IPPROTO_TCP</snippet></ROW><ROW><id>10602856</id><snippet>IPPROTO_UDP</snippet></ROW><ROW><id>10602856</id><snippet>SOCK_STREAM</snippet></ROW><ROW><id>10602856</id><snippet>SOCK_DGRAM</snippet></ROW><ROW><id>10602856</id><snippet>SOCK_RAW</snippet></ROW><ROW><id>10602856</id><snippet>IPPROTO_ICMP</snippet></ROW><ROW><id>10602856</id><snippet>AF_*</snippet></ROW><ROW><id>10602856</id><snippet>socket</snippet></ROW><ROW><id>10603296</id><snippet>from django.db import models

from annoying.fields import AutoOneToOneField

class UserProfile(models.Model):
    user = AutoOneToOneField('auth.user')
    follows = models.ManyToManyField('UserProfile', related_name='followed_by')

    def __unicode__(self):
        return self.user.username
</snippet></ROW><ROW><id>10603296</id><snippet>In [1]: tim, c = User.objects.get_or_create(username='tim')

In [2]: chris, c = User.objects.get_or_create(username='chris')

In [3]: tim.userprofile.follows.add(chris.userprofile) # chris follows tim

In [4]: tim.userprofile.follows.all() # list of userprofiles of users that tim follows
Out[4]: [&lt;UserProfile: chris&gt;]

In [5]: chris.userprofile.followed_by.all() # list of userprofiles of users that follow chris
Out[5]: [&lt;UserProfile: tim&gt;]
</snippet></ROW><ROW><id>10603455</id><snippet>while char_y &lt; 200:
           char_go_y += char_fall
</snippet></ROW><ROW><id>10603969</id><snippet>tkinter</snippet></ROW><ROW><id>10603969</id><snippet>Canvas</snippet></ROW><ROW><id>10603969</id><snippet>from tkinter import *
from random import *

class Application(Canvas):

    X_OFFSET = 40
    Y_OFFSET = 40
    FILL = 'blue'
    LINE = 'black'

    @classmethod
    def main(cls):
        root = Tk()
        surface = cls(root)
        surface.grid()
        surface.after_idle(surface.draw_shape)
        root.mainloop()

    def draw_shape(self):
        x = randrange(int(self['width']) - self.X_OFFSET)
        y = randrange(int(self['height']) - self.Y_OFFSET)
        points = [(x + randrange(self.X_OFFSET), y + randrange(self.Y_OFFSET))
                  for point in range(randint(3, 10))]
        self.create_polygon(points, fill=self.FILL, outline=self.LINE)
        self.after(1000, self.draw_shape)

if __name__ == '__main__':
    Application.main()
</snippet></ROW><ROW><id>10604095</id><snippet>isdigit()</snippet></ROW><ROW><id>10604095</id><snippet>0</snippet></ROW><ROW><id>10604095</id><snippet>9</snippet></ROW><ROW><id>10604095</id><snippet>In [4]: s = u'abc 12434 \u2466 5 def'

In [5]: u''.join(c for c in s if '0' &lt;= c &lt;= '9')
Out[5]: u'124345'
</snippet></ROW><ROW><id>10604188</id><snippet>your_string.split(chr(254))</snippet></ROW><ROW><id>10604188</id><snippet>&gt;&gt;&gt; "foo\xFEbar\xFEbaz".split(chr(254))
['foo', 'bar', 'baz']
</snippet></ROW><ROW><id>10604639</id><snippet>#!/usr/bin/env python

import sys
from xml.sax import handler, make_parser

class TagHandler(handler.ContentHandler):
    def __init__(self):
        handler.ContentHandler.__init__(self)

        self.stack = []


    def startElement(self, name, attrs):
        self.stack.append(name)

    def endElement(self, name):
        # TODO: might want to just confirm that the element matches the top of the stack here
        self.stack.pop()


    def finish_document(self):
        return "\n".join(["&lt;/%s&gt;" % tag for tag in reversed(self.stack)])


parser = make_parser()
handler = TagHandler()
parser.setContentHandler(handler)

try:
    parser.parse(sys.argv[1])

except:
    # TODO: something more intelligent than just printing out the
    # constructed end of the document. Like appending it to the source
    # and repeating whatever you did to make this processing necessary.
    print handler.finish_document()
</snippet></ROW><ROW><id>10604778</id><snippet>import operator
end = 1000000
N = (1, 10, 100, 1000, 10000, 100000, 1000000)
concatenated_numbers_str = ''.join([str(x) for x in range(1, end + 1)])
print reduce(operator.mul, [int(concatenated_numbers_str[n-1]) for n in N], 1)
</snippet></ROW><ROW><id>10604955</id><snippet>BeautifulSoup(s, convertEntities=BeautifulSoup.HTML_ENTITIES)
</snippet></ROW><ROW><id>10604955</id><snippet>soup.html.replaceWith(u'&lt;html&gt;'+unicode(bookname)+u'&lt;/html&gt;')
</snippet></ROW><ROW><id>10605079</id><snippet>package control</snippet></ROW><ROW><id>10605079</id><snippet>Ctrl+Shift+P</snippet></ROW><ROW><id>10605079</id><snippet>ST</snippet></ROW><ROW><id>10605079</id><snippet>SublimeREPL</snippet></ROW><ROW><id>10605079</id><snippet>Tools&gt;sublimerepl&gt;python</snippet></ROW><ROW><id>10605216</id><snippet>from twisted.internet import reactor, defer
def simple_task():
    status = query_your_api()
    return status

def repeating_call(status):
    print(status)
    d = threads.deferToThread(simple_task)
    d.addCallback(repeating_call)

data_series = [data1, data2, data3]
for data in data_series:
    repeating_call('starting everything up')

reactor.run()
</snippet></ROW><ROW><id>10605298</id><snippet>repr(addr)</snippet></ROW><ROW><id>10605298</id><snippet>class EchoHandler(asyncore.dispatcher_with_send):
    def setAddr(self, addr):
        self.addr = addr

    def handle_read(self):
        data = self.recv(8192)
        print '%s from %s' % (data, self.addr)
        self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is None:
            pass
        else:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = EchoHandler(sock)
            handler.setAddr(addr) #Set the address of the sender in the EchoHandler
</snippet></ROW><ROW><id>10605516</id><snippet>supervisorctl</snippet></ROW><ROW><id>10605516</id><snippet>supervisor</snippet></ROW><ROW><id>10605558</id><snippet>scores = [read_score(f, normalize=True) for f in glob.glob(path)]
</snippet></ROW><ROW><id>10605630</id><snippet>import csv
import random

words = dict(csv.reader(open("file.csv")))
randWord = random.choice(words.keys())
correctAnswer = words[randWord]

if answer == correctAnswer:
    ...
</snippet></ROW><ROW><id>10605630</id><snippet>words.keys()</snippet></ROW><ROW><id>10605630</id><snippet>dict.keys()</snippet></ROW><ROW><id>10605934</id><snippet>import os, struct, socket

def main():
    # Take screenshot and load the data.
    os.system('scrot image.bmp')
    with open('image.bmp', 'rb') as file:
        data = file.read()
    # Construct message with data size.
    size = struct.pack('!I', len(data))
    message = size + data
    # Open up a server socket.
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('', 65000))
    server.listen(5)
    # Constantly server incoming clients.
    while True:
        client, address = server.accept()
        print('Sending data to:', address)
        # Send the data and shutdown properly.
        client.sendall(message)
        client.shutdown(socket.SHUT_RDWR)
        client.close()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10605934</id><snippet>import socket, struct

def main(host):
    # Connect to server and get image size.
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((host, 65000))
    packed = recvall(client, struct.calcsize('!I'))
    # Decode the size and get the image data.
    size = struct.unpack('!I', packed)[0]
    print('Receiving data from:', host)
    data = recvall(client, size)
    # Shutdown the socket and create the image file.
    client.shutdown(socket.SHUT_RDWR)
    client.close()
    with open('image.bmp', 'wb') as file:
        file.write(data)

def recvall(sock, size):
    message = bytearray()
    # Loop until all expected data is received.
    while len(message) &lt; size:
        buffer = sock.recv(size - len(message))
        if not buffer:
            # End of stream was found when unexpected.
            raise EOFError('Could not receive all expected data!')
        message.extend(buffer)
    return bytes(message)

if __name__ == '__main__':
    main('localhost')
</snippet></ROW><ROW><id>10605941</id><snippet>make_requests_from_url</snippet></ROW><ROW><id>10605941</id><snippet>meta</snippet></ROW><ROW><id>10605941</id><snippet>CrawlSpider</snippet></ROW><ROW><id>10605941</id><snippet>response.url</snippet></ROW><ROW><id>10605941</id><snippet>class MySpider(CrawlSpider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = ['http://www.example.com']

    rules = (
        # Extract links matching 'category.php' (but not matching 'subsection.php')
        # and follow links from them (since no callback means follow=True by default).
        Rule(SgmlLinkExtractor(allow=('category\.php', ), deny=('subsection\.php', ))),

        # Extract links matching 'item.php' and parse them with the spider's method parse_item
        Rule(SgmlLinkExtractor(allow=('item\.php', )), callback='parse_item'),
    )

    def parse(self, response): # When writing crawl spider rules, avoid using parse as callback, since the CrawlSpider uses the parse method itself to implement its logic. So if you override the parse method, the crawl spider will no longer work.
        for request_or_item in CrawlSpider.parse(self, response):
            if isinstance(request_or_item, Request):
                request_or_item = request_or_item.replace(meta = {'start_url': response.meta['start_url']})
            yield request_or_item

    def make_requests_from_url(self, url):
        """A method that receives a URL and returns a Request object (or a list of Request objects) to scrape. 
        This method is used to construct the initial requests in the start_requests() method, 
        and is typically used to convert urls to requests.
        """
        return Request(url, dont_filter=True, meta = {'start_url': url})

    def parse_item(self, response):
        self.log('Hi, this is an item page! %s' % response.url)

        hxs = HtmlXPathSelector(response)
        item = Item()
        item['id'] = hxs.select('//td[@id="item_id"]/text()').re(r'ID: (\d+)')
        item['name'] = hxs.select('//td[@id="item_name"]/text()').extract()
        item['description'] = hxs.select('//td[@id="item_description"]/text()').extract()
        item['start_url'] = response.meta['start_url']
        return item
</snippet></ROW><ROW><id>10605941</id><snippet>Request</snippet></ROW><ROW><id>10605941</id><snippet>make_requests_from_url</snippet></ROW><ROW><id>10606168</id><snippet>#!/usr/bin/python

import asyncmongo
import tornado.web    

class Handler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
        self.db = asyncmongo.Client(pool_id='mypool', host='localhost', 
                                          port=27107, dbname='mydb')

        self.db.first_names.find_one({'user_id': 1 }, 
                                     callback=self._on_response)


    def _on_response(self, response, error):
        first_name = response['first_name']
        data = {
              'first_name': first_name
        }

        # use processor
        self.first_name_html = self.generate_html("firstname.html").generate(**data)
        foo()

    def foo(self):
        self.db.last_names.find_one({'user_id': 1 }, 
                                 callback=self._on_response_two)

    def _on_response_two(self, response, error):
        last_name = response['last_name']
        data = {
              'last_name': last_name
        }

        # use processor
        last_name_html = self.generate_html("lastname.html").generate(**data)
        self.write(self.first_name_html + last_name_html)
        self.finish()
</snippet></ROW><ROW><id>10606260</id><snippet>"User-Agent"</snippet></ROW><ROW><id>10606260</id><snippet>User-Agent</snippet></ROW><ROW><id>10606260</id><snippet>headers = {
    'User-Agent': 'My User Agent 1.0',
    'From': 'youremail@domain.com'  # This is another valid field
}

response = requests.get(url, headers=headers)
</snippet></ROW><ROW><id>10606391</id><snippet>import pygame, sys, random
from pygame.locals import *

arr=[]
RED=(255,10,10)
BLU=(10,255,10)
GRN=(10,10,255)
arr.append(RED)
arr.append(BLU)
arr.append(GRN)
SCREEN_X=100
SCREEN_Y=100

screen = pygame.display.set_mode((SCREEN_X, SCREEN_Y))
square=pygame.Surface((1, 1))

for j in range (SCREEN_Y):
    for i in range (SCREEN_X):
        num=random.randint(0,2)
        square.fill(arr[num])
        draw_me=pygame.Rect((j+1), (i+1), 1, 1)
        screen.blit(square,draw_me)
pygame.display.flip()
</snippet></ROW><ROW><id>10606568</id><snippet>id</snippet></ROW><ROW><id>10606568</id><snippet>date</snippet></ROW><ROW><id>10606568</id><snippet>SELECT   y.report_date, SUM(x.value)
FROM     mytable AS x
  NATURAL JOIN (
    SELECT   a.id, b.date AS report_date, MAX(c.date) AS date
    FROM     (SELECT DISTINCT id   FROM mytable) a JOIN
             (SELECT DISTINCT date FROM mytable) b JOIN
             mytable AS c ON (c.id = a.id AND c.date &lt;= b.date)
    GROUP BY a.id, b.date
 ) AS y
GROUP BY y.report_date
</snippet></ROW><ROW><id>10606702</id><snippet>get_prefix</snippet></ROW><ROW><id>10606702</id><snippet>clean</snippet></ROW><ROW><id>10606702</id><snippet>def get_prefix(section, type):
    if section == 1:
        if type == 1:
            prefix = '@01_bullets:'
        elif type == 2:
            prefix = '@04_section_sub_subhead:'
        else:
            prefix = '@06_body_text:'

    else:
        if type == 2:
            prefix = '@14_notes_sub_sub_heading:'
        else:
            prefix = '@16_notes_text:'

        return prefix
</snippet></ROW><ROW><id>10606702</id><snippet>get_prefix</snippet></ROW><ROW><id>10606702</id><snippet>None</snippet></ROW><ROW><id>10606702</id><snippet>section</snippet></ROW><ROW><id>10606702</id><snippet>1</snippet></ROW><ROW><id>10606874</id><snippet>min</snippet></ROW><ROW><id>10606874</id><snippet>min</snippet></ROW><ROW><id>10606883</id><snippet>subprocess.call(["java","Autoingestion",self.username, self.password, self.vendor_number, "Sales","Daily","Details",self.date, cwd="sales")
</snippet></ROW><ROW><id>10606993</id><snippet>unable to execute gcc-4.0: No such file or directory
</snippet></ROW><ROW><id>10607273</id><snippet>Submit</snippet></ROW><ROW><id>10607273</id><snippet>&lt;form&gt;
...
&lt;input type="submit" name="list" value="List Objects" /&gt;
&lt;/form&gt;
&lt;form&gt;
...
&lt;input type="submit" name="do-something-else" value="Do Something Else" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>10607273</id><snippet>if 'list' in request.POST:
    # do some listing...
elif 'do-something-else' in request.POST:
    # do something else
</snippet></ROW><ROW><id>10607353</id><snippet>def add(self, (sub, pred, obj)):
    self._addToIndex(self._spo, sub, pred, obj)
    self._addToIndex(self._pos, pred, obj, sub)
    self._addToIndex(self._osp, obj, sub, pred)
</snippet></ROW><ROW><id>10607353</id><snippet>def add(self, sub_pred_obj):
    sub, pred, obj = sub_pred_obj
    self._addToIndex(self._spo, sub, pred, obj)
    self._addToIndex(self._pos, pred, obj, sub)
    self._addToIndex(self._osp, obj, sub, pred)
</snippet></ROW><ROW><id>10607487</id><snippet>./random</snippet></ROW><ROW><id>10607487</id><snippet>stdio</snippet></ROW><ROW><id>10607487</id><snippet>scanf</snippet></ROW><ROW><id>10607487</id><snippet>fflush</snippet></ROW><ROW><id>10607487</id><snippet>fflush</snippet></ROW><ROW><id>10607487</id><snippet>pexpect</snippet></ROW><ROW><id>10607487</id><snippet>sh</snippet></ROW><ROW><id>10607487</id><snippet>sh</snippet></ROW><ROW><id>10607487</id><snippet>fd = Popen(["./random"], stdin=PIPE, stdout=PIPE)
result = fd.communicate("write write write!!!\n")[0]
</snippet></ROW><ROW><id>10607605</id><snippet>tag_config</snippet></ROW><ROW><id>10607605</id><snippet>tag_bind</snippet></ROW><ROW><id>10607768</id><snippet>datetime</snippet></ROW><ROW><id>10607768</id><snippet>import time
timestr = time.strftime("%Y%m%d-%H%M%S")
print timestr
</snippet></ROW><ROW><id>10607768</id><snippet>20120515-155045
</snippet></ROW><ROW><id>10607946</id><snippet>SimpleHTTPServer.SimpleHTTPRequestHandler</snippet></ROW><ROW><id>10607946</id><snippet>do_GET</snippet></ROW><ROW><id>10607946</id><snippet>self.path</snippet></ROW><ROW><id>10607946</id><snippet>simplehttpwebpage_content.html</snippet></ROW><ROW><id>10607946</id><snippet>/</snippet></ROW><ROW><id>10607946</id><snippet>#!/usr/bin/env python
import SimpleHTTPServer
import SocketServer

class MyRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.path = '/simplehttpwebpage_content.html'
        return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

Handler = MyRequestHandler
server = SocketServer.TCPServer(('0.0.0.0', 8080), Handler)

server.serve_forever()
</snippet></ROW><ROW><id>10607946</id><snippet>path</snippet></ROW><ROW><id>10607946</id><snippet>do_GET()</snippet></ROW><ROW><id>10607946</id><snippet>http://localhost:8080/</snippet></ROW><ROW><id>10607946</id><snippet>susam@swift:~/so$ ls
simplehttpwebpage_content.html  simplehttpwebpage.py  simplehttpwebsite_style.css
susam@swift:~/so$ python simplehttpwebpage.py
swift - - [19/Apr/2012 09:10:23] "GET / HTTP/1.1" 200 -
swift - - [19/Apr/2012 09:10:26] "GET /simplehttpwebsite_style.css HTTP/1.1" 200 -
</snippet></ROW><ROW><id>10608176</id><snippet>votes</snippet></ROW><ROW><id>10608176</id><snippet>models.IntegerField(default=0) + 1</snippet></ROW><ROW><id>10608176</id><snippet>def add_vote(self,choice):
    attname = 'votes_{0}'.format(choice) # get the attribute name
    value = getattr(self, attname) # get the value
    setattr(self, attname, value+1) # set the value
</snippet></ROW><ROW><id>10608176</id><snippet>votes</snippet></ROW><ROW><id>10608176</id><snippet>Field.attname</snippet></ROW><ROW><id>10608176</id><snippet>def add_vote(self,choice):
    attname = self.votes[choice].attname
    value = getattr(self, attname) # get the value
    setattr(self, attname, value+1) # set the value
</snippet></ROW><ROW><id>10608213</id><snippet>    self.fields['pregunta_select'].widget.choices=
</snippet></ROW><ROW><id>10608213</id><snippet>    self.fields['pregunta_select'].choices=
</snippet></ROW><ROW><id>10608225</id><snippet>import sys
sys.path.append('/home/user/')
from test1.common.api import GenericAPI
</snippet></ROW><ROW><id>10608225</id><snippet>/home/user/test1/test1/common/api/</snippet></ROW><ROW><id>10608225</id><snippet>["a", "b", "c"]</snippet></ROW><ROW><id>10608225</id><snippet>import a.b.c</snippet></ROW><ROW><id>10608225</id><snippet>a/a/b/c</snippet></ROW><ROW><id>10608225</id><snippet>b/a/b/c</snippet></ROW><ROW><id>10608225</id><snippet>c/a/b/c</snippet></ROW><ROW><id>10608225</id><snippet>a/b/c</snippet></ROW><ROW><id>10608225</id><snippet>a</snippet></ROW><ROW><id>10608225</id><snippet>a</snippet></ROW><ROW><id>10608225</id><snippet>a</snippet></ROW><ROW><id>10608798</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>10608798</id><snippet>// this works
datetime(2007,01,01,12)
// this breaks
datetime(2007,01,09,12)
</snippet></ROW><ROW><id>10609007</id><snippet>__add__</snippet></ROW><ROW><id>10609007</id><snippet>TestClass.x</snippet></ROW><ROW><id>10609007</id><snippet>self.value + 100</snippet></ROW><ROW><id>10609007</id><snippet>self.value</snippet></ROW><ROW><id>10609007</id><snippet>import random
HATE_LAMBDAS = random.choice(True, False)
class TestClass(object):
    def __init__(self):
        self.value = 100
        if HATE_LAMBDAS:
            def x():
                self.value += 100
            self.x = x
        else:
            self.x = lambda: setattr(self, "value", self.value + 100)
        self.run()

    def run(self):        
        self.x()
        print self.value

t = TestClass()

#Output: 200
</snippet></ROW><ROW><id>10609083</id><snippet>def lbuild( start, inc, test ):
    rslt = [start]
    while not test(start,inc):
        start += inc
        rslt.append( start )
    return rslt

n = '22'
a = 4

nval = int(n)
print lbuild( nval, -10, lambda(x,y): (x&lt;10 and x&gt;=0) )
print lbuild( nval, 1, lambda(x,y): x%10 == a-1 )
</snippet></ROW><ROW><id>10609378</id><snippet>def wait_for_internet_connection():
    while True:
        try:
            response = urllib2.urlopen('http://74.125.113.99',timeout=1)
            return
        except urllib2.URLError:
            pass

def main():
    ...

wait_for_internet_connection()
main()
</snippet></ROW><ROW><id>10609433</id><snippet>In [4]: def main():
   ...:     dict1 = {'a1':{'b1':1,'c1':2},'a2':{'b2':1,'c2':2}}
   ...:     dict2 = {'cat':0,'dog':2}
   ...:     return dict1, dict2
   ...: 

In [5]: x, y = main()

In [6]: x
Out[6]: {'a1': {'b1': 1, 'c1': 2}, 'a2': {'b2': 1, 'c2': 2}}

In [7]: y
Out[7]: {'cat': 0, 'dog': 2}
</snippet></ROW><ROW><id>10609433</id><snippet>main()</snippet></ROW><ROW><id>10609433</id><snippet>return</snippet></ROW><ROW><id>10609987</id><snippet>onetrial</snippet></ROW><ROW><id>10609987</id><snippet>from random import uniform

vals = [11, 23, 39]
prob = [0.25, 0.30, 0.45]
cdf = [sum(prob[0:i+1]) for i in xrange(3)]

def onetrial(vals, cdf):
    u = uniform(0, 1)
    for i in range(3):
        if u &lt;= cdf[i]:
            return vals[i]
</snippet></ROW><ROW><id>10609990</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>10609990</id><snippet>with open(srcfile, 'r') as fsrc:
    with open(destfile, 'w+') as fdest:
        shutil.copyfileobj(fsrc, fdest)
        fdest.seek(-1, os.SEEK_END)
        fdest.truncate()
</snippet></ROW><ROW><id>10610086</id><snippet>name_choice</snippet></ROW><ROW><id>10610086</id><snippet>name</snippet></ROW><ROW><id>10610086</id><snippet>if name == "Sam":
    print ("Your name is Sam")
</snippet></ROW><ROW><id>10610086</id><snippet>name</snippet></ROW><ROW><id>10610086</id><snippet>if</snippet></ROW><ROW><id>10610086</id><snippet>print ("name ==", name)
if name == "Sam":
    print ("Your name is Sam")
</snippet></ROW><ROW><id>10610105</id><snippet>save</snippet></ROW><ROW><id>10610105</id><snippet>class MyModel(models.Model):
    # other fields
    my_file = models.FileField(upload_to='uploaddir')

    def save(self, *args, **kwargs):
        new_name = 'file_name-random-chars.ext'
        self.my_file.name = new_name
        super(MyModel, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>10610105</id><snippet>MyModel</snippet></ROW><ROW><id>10610145</id><snippet>1</snippet></ROW><ROW><id>10610145</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2012,2)
(2, 29)
</snippet></ROW><ROW><id>10610145</id><snippet>import calendar
import datetime

def mSandE(yy,mm):
    lastDay=calendar.monthrange(yy,mm)[1]
    dt1=datetime.date(yy, mm, 1)
    dt2=datetime.date(yy, mm, lastDay)
    return (dt1, dt2)

def prevmSandE(yy,mm):
    dt=mSandE(yy,mm)[0]
    dt=dt-datetime.timedelta(days=1)
    lastDay=calendar.monthrange(dt.year,dt.month)[1]
    return (dt.replace(day=1),datetime.date(dt.year,dt.month,lastDay))


print mSandE(2012,2)        
print prevmSandE(2012,2)
print prevmSandE(2012,1)
</snippet></ROW><ROW><id>10610145</id><snippet>(datetime.date(2012, 2, 1), datetime.date(2012, 2, 29))
(datetime.date(2012, 1, 1), datetime.date(2012, 1, 31))
(datetime.date(2011, 12, 1), datetime.date(2011, 12, 31))
</snippet></ROW><ROW><id>10610177</id><snippet>&gt;&gt;&gt; x = 'abc'
&gt;&gt;&gt; list(x)
['a', 'b', 'c']
</snippet></ROW><ROW><id>10610177</id><snippet>&gt;&gt;&gt; x = 'abc'
&gt;&gt;&gt; x[1]
'b'
</snippet></ROW><ROW><id>10610401</id><snippet>A.__xor__()</snippet></ROW><ROW><id>10610401</id><snippet>A.__rxor__()</snippet></ROW><ROW><id>10610451</id><snippet>from subprocess import Popen, PIPE

DEBUG = True
if DEBUG:
    def log(msg, data):
        print(msg)
        print(repr(data))
else:
    def log(msg, data):
        pass

def setFromFile(fname):
    with open(fname) as inf:
        return set(ln.strip() for ln in inf)

def setFromString(s):
    return set(ln.strip() for ln in s.split("\n"))

def main():
    # get list of installed packages
    p = Popen(['dpkg', '--get-selections'], stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    installed_packages = setFromString(stdout)

    # get list of expected packages
    known_packages = setFromFile('/home/john/packages.txt')

    # calculate the difference
    unknown_packages = installed_packages - known_packages
    unknown_packages_string = "\n".join(unknown_packages)

    log("Installed packages:", installed_packages)
    log("Known packages:", known_packages)
    log("Unknown packages:", unknown_packages)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10610569</id><snippet>uneven = [[1], [47, 17, 2, 3], [3], [12, 5, 75, 33]]

from itertools import repeat

print zip(*(repeat(*x) if len(x)==1 else x for x in uneven))
</snippet></ROW><ROW><id>10610758</id><snippet>test</snippet></ROW><ROW><id>10610758</id><snippet>light.py</snippet></ROW><ROW><id>10610758</id><snippet>import light
print light.test
</snippet></ROW><ROW><id>10610780</id><snippet>type</snippet></ROW><ROW><id>10610780</id><snippet>add_argument(...)</snippet></ROW><ROW><id>10610780</id><snippet>import os
import argparse

def intOrUnderscore(s):
    if s != '_':
        return int(s)
    cases = (n for n in os.listdir(".") if n.startswith("file."))
    return max(int(c[c.rindex(".")+1:]) for c in cases)

parser = argparse.ArgumentParser()
parser.add_argument('case', type=intOrUnderscore)

args = parser.parse_args()
print args.case
</snippet></ROW><ROW><id>10610780</id><snippet>$ ls
file.1  file.2  file.3  s.py
$ python s.py 2
2
$ python s.py _
3
</snippet></ROW><ROW><id>10610780</id><snippet>import os
import argparse

cases = [n[n.rindex(".")+1:] for n in os.listdir(".") if n.startswith("file.")]
cases.append("_")
parser = argparse.ArgumentParser()
parser.add_argument('case', choices = cases)

args = parser.parse_args()
print args.case
</snippet></ROW><ROW><id>10610954</id><snippet>class MatricesPanel(wx.Panel):        
    def __init__(self, parent):
        super(MatricesPanel, self).__init__(parent)

        sizer = wx.BoxSizer(wx.HORIZONTAL)

        self.outputsMatrix = self.addEmptyGrid(sizer)
        self.inputsMatrix = self.addEmptyGrid(sizer)

        addRowsButton = wx.Button(self, -1, " Add Rows")
        addRowsButton.Bind(wx.EVT_BUTTON, self.addRows)
        sizer.Add(addRowsButton)

        self.SetSizer(sizer)
        self.SetAutoLayout(True)
        self.Layout()

    def initResize(self, ev = None):
        self.inputsMatrix.SetSize((500, 500)) 
        self.outputsMatrix.SetSize((500, 500))
        self.Layout()

    def addEmptyGrid(self, sizer):   
        matrix_ = wx.grid.Grid(self)
        matrix_.SetRowLabelSize(0) 
        matrix_.SetColLabelSize(0) 
        matrix_.CreateGrid(1,1)
        sizer.Add(matrix_)
        return matrix_

    def addRows(self, ev=None):   
        self.inputsMatrix.AppendRows(1)
        self.outputsMatrix.AppendRows(1)
        self.Layout() #refresh the frame
</snippet></ROW><ROW><id>10610954</id><snippet>class TestFrame(wx.Frame):
    def __init__(self, parent):
        super(TestFrame, self).__init__(parent, title='test', size=(1280, 950))
        self.matricesPanel = MatricesPanel(self)

        sizer = wx.BoxSizer()
        sizer.Add(self.matricesPanel, flag=wx.EXPAND)
        self.SetSizer(sizer)

        self.Centre()
        self.Show()
        self.matricesPanel.initResize()

        wx.EVT_IDLE(wx.GetApp(),  wx.WakeUpIdle())
</snippet></ROW><ROW><id>10611188</id><snippet>from my_library import *</snippet></ROW><ROW><id>10611188</id><snippet>from graphics import GraphWin, Point, Line, Rectangle, Text

def draw_window()
    # create canvas
    win = GraphWin("Regression Line - Start Clicking!", 500, 500)
    win.setCoords(0., 0., 10., 10.)
    # exit button
    rect = Rectangle(Point(0.5, 0.1), Point(2.5, 2.1))
    rect.setFill("red")
    rect.draw(win)
    Text(rect.getCenter(), "Done").draw(win)
    # instructions
    Text(Point(5., 0.5), "Click in this screen").draw(win)
    return win

def get_points(win):
    points = []
    while True:
        p = win.getMouse()
        p.draw(win)
        # clicked the exit button?
        px, py = p.getX(), p.getY()
        if 0.5 &lt;= px &lt;= 2.5 and 0.1 &lt;= py &lt;= 2.1:
            break
        else:
            points.append((px,py))
    return points

def do_regression(points):
    num = len(points)
    x_sum, y_sum, xx_sum, xy_sum = 0., 0., 0., 0.
    for x,y in points:
        x_sum += x
        y_sum += y
        xx_sum += x*x
        xy_sum += x*y
    x_mean, y_mean = x_sum/num, y_sum/num
    m = (xy_sum - num*x_mean*y_mean) / (xx_sum - num*x_mean*x_mean)
    def lineFn(xval):
        return y_mean + m*(xval - x_mean)
    return lineFn

def main():
    # set up
    win = draw_window()
    points = get_points(win)
    # show regression line
    lineFn = do_regression(points)
    Line(
        Point(0.,  lineFn(0. )),
        Point(10., lineFn(10.))
    ).draw(win)
    # wait to close
    Text(Point(5., 5.), "Click to exit").draw(win)
    win.getMouse()
    win.close()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>10611251</id><snippet>str</snippet></ROW><ROW><id>10611251</id><snippet>int</snippet></ROW><ROW><id>10611251</id><snippet>float</snippet></ROW><ROW><id>10611251</id><snippet>complex</snippet></ROW><ROW><id>10611251</id><snippet>file</snippet></ROW><ROW><id>10611251</id><snippet>type</snippet></ROW><ROW><id>10611367</id><snippet>def output_memory():
    d = defaultdict(int) 
    for o in gc.get_objects():
        name = type(o).__name__  
        d[name] += 1

    items = d.items()
    items.sort(key=lambda x:x[1])
    for key, value in items:
        print key, value
</snippet></ROW><ROW><id>10611367</id><snippet>props[key].SetValue()</snippet></ROW><ROW><id>10611367</id><snippet>([x],[y],[z])</snippet></ROW><ROW><id>10611367</id><snippet>for name, prop in props.iteritems():
    value = prop.GetValue()
    value[0][0] = random()
    value[1][0] = random()
    value[2][0] = random()
pg.Refresh()
</snippet></ROW><ROW><id>10611367</id><snippet>import wx
import wx.propgrid as wxpg
from random import random
import gc

from collections import defaultdict

def output_memory():
    d = defaultdict(int) 
    for o in gc.get_objects():
        name = type(o).__name__  
        d[name] += 1

    items = d.items()
    items.sort(key=lambda x:x[1])
    for key, value in items:
        print key, value

class CoordProperty(wxpg.PyProperty):
    def __init__(self, label, name):
        wxpg.PyProperty.__init__(self, label, name)
        self.SetValue(([0],[0],[0]))

    def GetClassName(self):
        return "CoordProperty"

    def GetEditor(self):
        return "TextCtrl"

    def GetValueAsString(self, flags):
        x,y,z = self.GetValue()   
        return "%f,%f,%f"%(x[0],y[0],z[0])   

app = wx.App(False)
frame = wx.Frame(None, -1, "Test")
pg = wxpg.PropertyGridManager(frame)
props = {}

for i in range(1000):
    prop_name = "prop_%d"%i
    prop = CoordProperty("Coord", prop_name)
    pg.Append(prop)
    props[prop_name] = prop

def OnTimer(event):
    for name, prop in props.iteritems():
        value = prop.GetValue()
        value[0][0] = random()
        value[1][0] = random()
        value[2][0] = random()
    pg.Refresh()
    #output_memory()

timer = wx.Timer(frame, 1)
frame.Bind(wx.EVT_TIMER, OnTimer)
timer.Start(10) 

frame.Show()

app.MainLoop()
timer.Stop()
</snippet></ROW><ROW><id>10611373</id><snippet>Atlas</snippet></ROW><ROW><id>10611373</id><snippet>class Robot():
  def __init__(self, rbt, atlas):
    self.atlas = atlas
     ...
    self.atlas.add_robot(rbt)
</snippet></ROW><ROW><id>10611489</id><snippet>for control in self.controls():
  self.connect(control, SIGNAL('clicked()'), lambda control=control:
    self.button(control.objectName()))
</snippet></ROW><ROW><id>10611762</id><snippet>Group</snippet></ROW><ROW><id>10611762</id><snippet>GroupProfile</snippet></ROW><ROW><id>10611762</id><snippet>Group</snippet></ROW><ROW><id>10612166</id><snippet>%f</snippet></ROW><ROW><id>10612246</id><snippet>None</snippet></ROW><ROW><id>10612405</id><snippet>def sublists(seq):
    x=[]
    for i in range(0,len(seq),5):
        x.append(seq[i:i+5])
    return x
</snippet></ROW><ROW><id>10612405</id><snippet>def sublists(seq):
    return [seq[i:i+5] for i in range(0,len(seq),5)]
</snippet></ROW><ROW><id>10612405</id><snippet>l = [1,2,3,4,5,6,7,8,9,10]
</snippet></ROW><ROW><id>10612405</id><snippet>[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]
</snippet></ROW><ROW><id>10612674</id><snippet>for i in range(n):
    x = foo(x)
</snippet></ROW><ROW><id>10612674</id><snippet>baz = x
for i in range(n):
    baz = foo(baz)
</snippet></ROW><ROW><id>10612674</id><snippet>reduce(lambda x,y:foo(x),[x]*n)
</snippet></ROW><ROW><id>10612824</id><snippet>__builtin__</snippet></ROW><ROW><id>10613174</id><snippet>class C(object):
    pass

def circular():
    for x in range(10**4):
        for y in range(10**4):
            a = C()
            b = C()
            a.x = b
            b.x = a

circular()
</snippet></ROW><ROW><id>10613174</id><snippet>def setDelegate(self, delegate):
    self.delegate = delegate
</snippet></ROW><ROW><id>10613174</id><snippet>x.setDelegate(y)</snippet></ROW><ROW><id>10613174</id><snippet>x.delegate = y</snippet></ROW><ROW><id>10613232</id><snippet>get_or_create</snippet></ROW><ROW><id>10613232</id><snippet> user, created = User.objects.get_or_create(email=request.GET['user_email'][0])
</snippet></ROW><ROW><id>10613412</id><snippet>for donation_week in range(0,1): #range(0,1) == [0]
    for donation_day in range(0, 0*5): #during the first (and only) loop, donation_day is 0, so do no loops
</snippet></ROW><ROW><id>10613412</id><snippet>amount</snippet></ROW><ROW><id>10613412</id><snippet>in range(0, donation_week*5)</snippet></ROW><ROW><id>10613412</id><snippet>in range(5)</snippet></ROW><ROW><id>10613412</id><snippet>amount = input</snippet></ROW><ROW><id>10613412</id><snippet>amount += input</snippet></ROW><ROW><id>10614113</id><snippet>&gt;&gt;&gt; L = list(range(-10,10))
&gt;&gt;&gt; L
[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; filter(lambda x: x &gt;= 0, L)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10614113</id><snippet>&gt;&gt;&gt; [x for x in L if x &gt;= 0]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10614360</id><snippet>#!/usr/bin/env python
import SimpleHTTPServer
import SocketServer

Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
class MyTCPServer(SocketServer.TCPServer):
    allow_reuse_address = True
server = MyTCPServer(('0.0.0.0', 8080), Handler)

server.serve_forever()
</snippet></ROW><ROW><id>10614652</id><snippet>[]</snippet></ROW><ROW><id>10614652</id><snippet>'\[\[(?!file:)(^])*
</snippet></ROW><ROW><id>10614652</id><snippet>'\[\[(?!file:)([^\]]*)'
</snippet></ROW><ROW><id>10614652</id><snippet>re.sub(r'\[\[(?!file:)([^\]]*)', r"found:&lt;\1&gt;", s)
</snippet></ROW><ROW><id>10614679</id><snippet>self.button.configure(...)</snippet></ROW><ROW><id>10614679</id><snippet>def test(a):
    return a+4

callback_1 = test(2) # callback_1 will be (2+4) = 6, because you called the function. Notice the parens ()
callback_2 = test    # callback_2 will be the function test, you did not call it
# So, you can do:
callback_2(some_value) # will return (some_value + 4), here you called it
</snippet></ROW><ROW><id>10614679</id><snippet>__init__</snippet></ROW><ROW><id>10614679</id><snippet>callable</snippet></ROW><ROW><id>10614679</id><snippet>pomocommand</snippet></ROW><ROW><id>10614679</id><snippet>break</snippet></ROW><ROW><id>10614679</id><snippet>print pomocommand</snippet></ROW><ROW><id>10614679</id><snippet>def pomocommand(self):
    pomocommand = self.button.configure(text="Pomodoro", state=tk.NORMAL, command= lambda: self.pomodoro(pomo)) #Switch back to the pomodoro timer

# and in your __init__ method:
def __init__(self):
    # ...
    self.radio = tk.Radiobutton(self, text="Pomodoro", variable = self.radvar, value=1, indicatoron=0, command = self.pomocommand)
    # ...
</snippet></ROW><ROW><id>10614679</id><snippet>pomo</snippet></ROW><ROW><id>10614724</id><snippet>while True:
   try:
    i = int(raw_input("Enter value "))
    break
   except ValueError:
    print "Bad input"

print "Value is ",i
</snippet></ROW><ROW><id>10614724</id><snippet>iterationCap</snippet></ROW><ROW><id>10614778</id><snippet>defaultdict</snippet></ROW><ROW><id>10614778</id><snippet>setdefault()</snippet></ROW><ROW><id>10614778</id><snippet>&gt;&gt;&gt; list_of_tuples = [('a', 1),('b',2),('c',1),('a',2),('d',3)]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for item in list_of_tuples:
...     d.setdefault(item[1],[]).append(item[0])
...
&gt;&gt;&gt; d
{1: ['a', 'c'], 2: ['b', 'a'], 3: ['d']}
</snippet></ROW><ROW><id>10615141</id><snippet>class WebServer(BaseHTTPServer.HTTPServer):
    def __init__(self, *args, **kwargs):
        BaseHTTPServer.HTTPServer.__init__(self, *args, **kwargs)
        # Set FD_CLOEXEC flag
        flags = fcntl.fcntl(self.socket.fileno(), fcntl.F_GETFD)
        flags |= fcntl.FD_CLOEXEC
        fcntl.fcntl(self.socket.fileno(), fcntl.F_SETFD, flags)
</snippet></ROW><ROW><id>10615307</id><snippet>a = [u"[u'fa-AF'", u" u'ps'", u" u'uz-AF'", u" u'tk']"]
</snippet></ROW><ROW><id>10615307</id><snippet>import ast
codes = [ast.literal_eval(x.strip('[] ')).encode() for x in a]
</snippet></ROW><ROW><id>10615307</id><snippet>codes = [elem.encode() for elem in ast.literal_eval(','.join(a))]
</snippet></ROW><ROW><id>10615307</id><snippet>['fa-AF', 'ps', 'uz-AF', 'tk']
</snippet></ROW><ROW><id>10615307</id><snippet>lang = {'fa-AF': 'farsi-Afghanistan', ... }
</snippet></ROW><ROW><id>10615307</id><snippet>for code in codes:
    print lang[code]
</snippet></ROW><ROW><id>10615424</id><snippet>from BeautifulSoup import BeautifulSoup

s = urllib2.urlopen('http://stackoverflow.com/questions/10614974/how-to-get-post-and-get-parameters-from-web-page-in-python').read()
soup = BeautifulSoup(s)

forms = soup.findall('form')
for form in forms:
  print 'form action: %s (%s)' % (form['action'], form['method'])
  inputs = form.findAll('input')
  for input in inputs:
    print "  -&gt; %s" % (input.attrs) 
</snippet></ROW><ROW><id>10615424</id><snippet>form action: /search (get)
  -&gt; [(u'autocomplete', u'off'), (u'name', u'q'), (u'class', u'textbox'), (u'placeholder', u'search'), (u'tabindex', u'1'), (u'type', u'text'), (u'maxlength', u'140'), (u'size', u'28'), (u'value', u'')]
form action: /questions/10614974/answer/submit (post)
  -&gt; [(u'id', u'fkey'), (u'name', u'fkey'), (u'type', u'hidden'), (u'value', u'923d3d8b45bbca57cbf0b126b2eb9342')]
  -&gt; [(u'id', u'author'), (u'name', u'author'), (u'type', u'text')]
  -&gt; [(u'id', u'display-name'), (u'name', u'display-name'), (u'type', u'text'), (u'size', u'30'), (u'maxlength', u'30'), (u'value', u''), (u'tabindex', u'105')]
  -&gt; [(u'id', u'm-address'), (u'name', u'm-address'), (u'type', u'text'), (u'size', u'40'), (u'maxlength', u'100'), (u'value', u''), (u'tabindex', u'106')]
  -&gt; [(u'id', u'home-page'), (u'name', u'home-page'), (u'type', u'text'), (u'size', u'40'), (u'maxlength', u'200'), (u'value', u''), (u'tabindex', u'107')]
  -&gt; [(u'id', u'submit-button'), (u'type', u'submit'), (u'value', u'Post Your Answer'), (u'tabindex', u'110')]
</snippet></ROW><ROW><id>10615444</id><snippet>add_</snippet></ROW><ROW><id>10615444</id><snippet>adder</snippet></ROW><ROW><id>10615444</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """foo bar add_signed_123_548 foo bar
... Baddest add_unsigned_77_10 additional"""
&gt;&gt;&gt; print(re.sub(r"\badd_\w+", "adder", s))
foo bar adder foo bar
Baddest adder additional
</snippet></ROW><ROW><id>10615444</id><snippet>\b</snippet></ROW><ROW><id>10615444</id><snippet>add_</snippet></ROW><ROW><id>10615500</id><snippet>TypeError</snippet></ROW><ROW><id>10615500</id><snippet>&gt;&gt;&gt; def gimmepw(*args):
...     print 'args:', repr(args)
...     return 'test'
... 
&gt;&gt;&gt; M2Crypto.RSA.load_key('key.pem', gimmepw)
args: (0,)
&lt;M2Crypto.RSA.RSA instance at 0xb6e8050c&gt;
</snippet></ROW><ROW><id>10615500</id><snippet>def gimmepw(*args):
    return 'mysecret'
</snippet></ROW><ROW><id>10615577</id><snippet>QWhateverWidget</snippet></ROW><ROW><id>10615577</id><snippet>import sys
from PySide import QtGui, QtCore

class Test(QtGui.QWidget):

    def __init__(self, rows):
        super(Test, self).__init__()

        self.table = QtGui.QTableWidget()
        self.table.setColumnCount(3)
        # Optional, set the labels that show on top
        self.table.setHorizontalHeaderLabels(("First Name", "Last Name", "Address"))

        self.table.setRowCount(len(rows))
        for row, cols in enumerate(rows):
            for col, text in enumerate(cols):
                table_item = QtGui.QTableWidgetItem(text)
                # Optional, but very useful.
                table_item.setData(QtCore.Qt.UserRole+1, user)
                self.table.setItem(row, col, table_item)

        # Also optional. Will fit the cells to its contents.
        self.table.resizeColumnsToContents()

        # Just display the table here.
        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.table)
        self.setLayout(layout)

if __name__ == "__main__":
    # ...
    rows = []
    # Here I have to fill it in an array, because you need to know the number of rows before adding... There might be a better solution though.
    for user in session.query(User).all():
        for addr in user.addresses:
            # These are the columns on each row (firstname, lastname, address)
            rows.append((user.firstname, user.lastname, addr.address))

    app = QtGui.QApplication(sys.argv)
    test = Test(rows)
    test.show()
    app.exec_()
</snippet></ROW><ROW><id>10615577</id><snippet>query = session.query(User.firstname, User.lastname, Address.address).filter(Address.user_id == User.id)
    for row in query.all():
        # firstname, lastname, address = row
        rows.append(row)
</snippet></ROW><ROW><id>10615577</id><snippet>LIMIT</snippet></ROW><ROW><id>10615577</id><snippet>__init__</snippet></ROW><ROW><id>10615577</id><snippet># in the __init__ function
self.table.itemDoubleClicked.connect(self.onItemDoubleClick)

# in onItemDoubleClicked function
def onItemDoubleClicked(self, item):
    # Every data has a role, you can specify your own (it's an integer) as long as it's greater than UserRole. Others are used internally, like DisplayRole and some others you can find in the QtCore package.
    # You can use data with other widgets also, not just TableWidgets.
    user = item.data(QtCore.Qt.UserRole+1)
    # you get a session however you want, then delete the user. This object is the same as the one you passed earlier when creating the item, it can be whatever you like.
    session.delete(user)
    session.commit()
</snippet></ROW><ROW><id>10616436</id><snippet>axis.xaxis.get_majorticklocs()</snippet></ROW><ROW><id>10616436</id><snippet>axis.xaxis.set_ticks(&lt;your updated array&gt;)</snippet></ROW><ROW><id>10616436</id><snippet>axvline</snippet></ROW><ROW><id>10616648</id><snippet>call_command('syncdb', load_initial_data=False, interactive=False)
call_command('migrate', interactive=False)
</snippet></ROW><ROW><id>10616648</id><snippet># Stealth option -- 'load_initial_data' is used by the testing setup                                                               
# process to disable initial fixture loading.                                                                                      
load_initial_data = options.get('load_initial_data', True)
</snippet></ROW><ROW><id>10616683</id><snippet>scipy.weave</snippet></ROW><ROW><id>10616717</id><snippet>getpixel</snippet></ROW><ROW><id>10616717</id><snippet>100, 100, 100</snippet></ROW><ROW><id>10616717</id><snippet>from PIL import Image, ImageChops

def trim(im):
    bg = Image.new(im.mode, im.size, im.getpixel((0,0)))
    diff = ImageChops.difference(im, bg)
    diff = ImageChops.add(diff, diff, 2.0, -100)
    bbox = diff.getbbox()
    if bbox:
        return im.crop(bbox)

im = Image.open("bord3.jpg")
im = trim(im)
im.show()
</snippet></ROW><ROW><id>10616956</id><snippet>docs = [('0,1,12','doc1'),('0,2,30','doc1'),('0,1','doc2')]
keys = [('0','key1'),('0,1','key2'),('0,1,12','key3'),('0,2','key4'),('0,2,30','key5')]

keydict = dict(keys)
resultDict = {}

for doc in docs:
    (path, docname) = doc
    pathList = path.split(',')
    keyPath = []
    for i in range(0, len(pathList)):
        aPath = ','.join(pathList[:i+1])
        keyPath.append(keydict[aPath])

    if docname not in resultDict :
        resultDict[docname] = []
    resultDict[docname].append(tuple(keyPath))

print resultDict  
</snippet></ROW><ROW><id>10617221</id><snippet>[None for _ in range(10)]
</snippet></ROW><ROW><id>10617221</id><snippet>[None]*10</snippet></ROW><ROW><id>10617221</id><snippet>x = [[None]]*10
x[0] = 5

x = [None for _ in range(10)]
x[0] = 5
</snippet></ROW><ROW><id>10617445</id><snippet>paramFile = request.FILES['uploadFile'].read()
portfolio = csv.DictReader(paramFile)
</snippet></ROW><ROW><id>10617684</id><snippet>alter_sql = 'ALTER TABLE `%s` ADD COLUMN `%s` TEXT'
</snippet></ROW><ROW><id>10617684</id><snippet>table_name = MySQLdb.escape_string(table_name)
escaped_column_name = MySQLdb.escape_string(column_name)
column_name = '`%s`.`%s`' % (table_name, escaped_column_name)

alter_sql = 'ALTER TABLE %s ADD COLUMN %s TEXT' % (table_name, column_name)
</snippet></ROW><ROW><id>10617777</id><snippet>1</snippet></ROW><ROW><id>10617777</id><snippet>"1"</snippet></ROW><ROW><id>10618122</id><snippet>build</snippet></ROW><ROW><id>10618122</id><snippet>build</snippet></ROW><ROW><id>10618122</id><snippet>pip-delete-this-directory.txt</snippet></ROW><ROW><id>10618122</id><snippet>pip-delete-this-directory.txt</snippet></ROW><ROW><id>10618122</id><snippet>This file is placed here by pip to indicate the source was put
here by pip.

Once this package is successfully installed this source code will be
deleted (unless you remove this file).
</snippet></ROW><ROW><id>10618122</id><snippet>pip install -b customized_build_directory</snippet></ROW><ROW><id>10618122</id><snippet>build</snippet></ROW><ROW><id>10618122</id><snippet>/tmp</snippet></ROW><ROW><id>10618122</id><snippet>pip install --no-download package_name</snippet></ROW><ROW><id>10618288</id><snippet>0x30</snippet></ROW><ROW><id>10618288</id><snippet>0x31</snippet></ROW><ROW><id>10618288</id><snippet>0x01</snippet></ROW><ROW><id>10618288</id><snippet>connection.send('\x01')
</snippet></ROW><ROW><id>10618288</id><snippet>0x30</snippet></ROW><ROW><id>10618288</id><snippet>0x31</snippet></ROW><ROW><id>10618288</id><snippet>'0'</snippet></ROW><ROW><id>10618288</id><snippet>'1'</snippet></ROW><ROW><id>10618413</id><snippet>from BeautifulSoup import BeautifulSoup
from urllib import urlopen
url = ("https://en.wikipedia.org/w/api.php?action=query&amp;prop=extracts&amp;titles=Albert%20Einstein&amp;explaintext")

soup = BeautifulSoup(urlopen(url).read())
print soup.find('extract')  # returns None
</snippet></ROW><ROW><id>10618527</id><snippet>for root, dirs, files in os.walk(folder):
    for name in files:
        (base, ext) = os.path.splitext(name)
        if ext in "csv":
            print os.path.join(root, name)
</snippet></ROW><ROW><id>10618668</id><snippet>In [17]: data = "437c2123"

In [18]: ''.join(chr(int(data[i:i+2], 16)) for i in range(0, len(data), 2))
Out[18]: 'C|!#'
</snippet></ROW><ROW><id>10618668</id><snippet>for i in range(0, len(data), 2)</snippet></ROW><ROW><id>10618668</id><snippet>data</snippet></ROW><ROW><id>10618668</id><snippet>0</snippet></ROW><ROW><id>10618668</id><snippet>2</snippet></ROW><ROW><id>10618668</id><snippet>4</snippet></ROW><ROW><id>10618668</id><snippet>data[i:i+2]</snippet></ROW><ROW><id>10618668</id><snippet>'43'</snippet></ROW><ROW><id>10618668</id><snippet>'7c'</snippet></ROW><ROW><id>10618668</id><snippet>chr(int(..., 16))</snippet></ROW><ROW><id>10618668</id><snippet>''.join(...)</snippet></ROW><ROW><id>10619095</id><snippet>chunkshape</snippet></ROW><ROW><id>10619095</id><snippet>chunkshape=(1000, 1, 6)</snippet></ROW><ROW><id>10619182</id><snippet>In [13]: s = "{u'America': u'A'}"

In [14]: re.sub(r"(u'[\w]')", r"_(\1)", s)
Out[14]: "{u'America': _(u'A')}"
</snippet></ROW><ROW><id>10619182</id><snippet>(...)</snippet></ROW><ROW><id>10619182</id><snippet>\1</snippet></ROW><ROW><id>10619505</id><snippet>from Tkinter import *
import tkFileDialog

class View(Listbox):
    def __init__(self, master):
        Listbox.__init__(self, master)      #makes view class listbox


class Controller(object):
    def __init__(self, master):
        """ Main interface:
        master - the top level window
        """
        self._master = master

        frame1 = Frame(self._master)
        frame1.pack(side=TOP, fill=BOTH, padx=5,expand=True)

        self._Listbox=View(frame1)
        self._Listbox.pack(side = TOP,fill=BOTH, expand = True,pady=20)

        menubar = Menu(self._master)
        filemenu = Menu(menubar, tearoff=0)
        filemenu.add_command(label="Open", command = self.file_open)
        menubar.add_cascade(label='File',menu=filemenu)
        self._master.config(menu=menubar)

    def file_open(self):
        filename = tkFileDialog.askopenfilename()

        #insert each line in the file into the listbox
        with open(filename,'r') as f:
            for line in f:
                self._Listbox.insert(END,line)



if __name__ == "__main__":
    root=Tk()
    c=Controller(root)
    root.mainloop()
</snippet></ROW><ROW><id>10619505</id><snippet>menubar = Menu(self._master)</snippet></ROW><ROW><id>10619505</id><snippet>menubar.add_cascade(label='File',menu=filemenu)</snippet></ROW><ROW><id>10619505</id><snippet>Tk</snippet></ROW><ROW><id>10619505</id><snippet>self._master.config(menu=menubar)</snippet></ROW><ROW><id>10619658</id><snippet>exactMatch = re.compile(ur"([^\.]*\bтурција\b[^\.]*)\.", re.UNICODE)
print exactMatch.pattern
result= exactMatch.findall(u"турција е на врвот од индустријата. турција е на врвот од индустријата.")
</snippet></ROW><ROW><id>10619989</id><snippet>     text(outliers[,2], outliers[,3],labels=outliers[,1],cex=0.50, 
         col=c("blue", "green")[ 
                which(2^(data[,2]-data[,3]) &gt;= 4 ,  2^(data[,2]-data[,3]) &lt;=0.25)] )
</snippet></ROW><ROW><id>10619989</id><snippet>which()</snippet></ROW><ROW><id>10620948</id><snippet>subdirs[:] = [d for d in subdirs if '.' not in d]
</snippet></ROW><ROW><id>10620948</id><snippet>subdirs = ...</snippet></ROW><ROW><id>10620948</id><snippet>os.walk</snippet></ROW><ROW><id>10621214</id><snippet>&gt;&gt;&gt; lista = [1, 2, 3, 4]         
&gt;&gt;&gt; listb = lista
&gt;&gt;&gt; print lista
[1, 2, 3, 4]
&gt;&gt;&gt; print listb
[1, 2, 3, 4]
&gt;&gt;&gt; lista[0] = 3
&gt;&gt;&gt; print listb
[3, 2, 3, 4]
&gt;&gt;&gt; listc = lista[:]
&gt;&gt;&gt; print listc
[3, 2, 3, 4]
&gt;&gt;&gt; lista[0] = 1
&gt;&gt;&gt; print listc
[3, 2, 3, 4]
</snippet></ROW><ROW><id>10621214</id><snippet>listb = lista</snippet></ROW><ROW><id>10621214</id><snippet>lista[0] = 3</snippet></ROW><ROW><id>10621214</id><snippet>listc = lista[:]</snippet></ROW><ROW><id>10621214</id><snippet>lista[0] = 1</snippet></ROW><ROW><id>10621876</id><snippet>dic = {'Cohen'     : ['Calvino', 'Evertt', 'Borges'],
       'Larry'     : ['The Bible'],
       'Volanski'  : ['Phone Book']}

# Get max name size
mx_nm_len = len(max(dic,key=len))
mx_bk_len = max([len(max(books, key=len)) for books in dic.itervalues()])

# Store max name size + 1
mx = max([mx_nm_len, mx_bk_len]) + 1

# Store people
keys = dic.keys()

# Create generic format code to print neat list
fmat = ("%-"+str(mx)+"s")*len(keys)

# Print header line
print fmat % tuple(keys)

# similar to zip command but works for any number of lists
# Assumes all dic.values() are lists
# "zips" to longest list and uses None when any given list runs out of values
books = map(None, *dic.values())

# replaces None values in row outputs with empty strings and prints result using
# string format code (fmat)
for row in books:
    row = tuple([book if book!= None else "" for book in row])
    print fmat % row
</snippet></ROW><ROW><id>10621914</id><snippet>libraries:
- name: webapp2
  version: latest
</snippet></ROW><ROW><id>10621914</id><snippet> import sys
 from google.appengine.ext import ndb
 sys.modules['ndb'] = ndb
</snippet></ROW><ROW><id>10622044</id><snippet>lambda [argument]: [expression]
</snippet></ROW><ROW><id>10622044</id><snippet>[argument]</snippet></ROW><ROW><id>10622044</id><snippet>[expression]</snippet></ROW><ROW><id>10622044</id><snippet>def encoding(self):
    return self.file.encoding
</snippet></ROW><ROW><id>10622044</id><snippet>self</snippet></ROW><ROW><id>10622044</id><snippet>self.file.encoding</snippet></ROW><ROW><id>10622044</id><snippet>property</snippet></ROW><ROW><id>10622044</id><snippet>property</snippet></ROW><ROW><id>10622044</id><snippet>def get_foo(self):
    return self.bar

def set_foo(self, value):
    self.bar = value

foo = property(get_foo, set_foo)
</snippet></ROW><ROW><id>10622044</id><snippet>instance.foo</snippet></ROW><ROW><id>10622044</id><snippet>instance.foo = 'something'</snippet></ROW><ROW><id>10622044</id><snippet>foo</snippet></ROW><ROW><id>10622044</id><snippet>encoding</snippet></ROW><ROW><id>10622044</id><snippet>file.encoding</snippet></ROW><ROW><id>10622239</id><snippet>my_iterable = str
</snippet></ROW><ROW><id>10622239</id><snippet>Iterable</snippet></ROW><ROW><id>10622239</id><snippet>def __iter__(self):
    while False:
        yield None
</snippet></ROW><ROW><id>10622239</id><snippet>__iter__</snippet></ROW><ROW><id>10622239</id><snippet>next</snippet></ROW><ROW><id>10622239</id><snippet>__iter__</snippet></ROW><ROW><id>10622475</id><snippet>A</snippet></ROW><ROW><id>10622475</id><snippet>B</snippet></ROW><ROW><id>10622475</id><snippet>C</snippet></ROW><ROW><id>10622475</id><snippet>class C():
   def Bar(self):
       self.a.name()
   ...
</snippet></ROW><ROW><id>10622475</id><snippet>self.a</snippet></ROW><ROW><id>10622475</id><snippet>A</snippet></ROW><ROW><id>10622475</id><snippet>A.name()</snippet></ROW><ROW><id>10622475</id><snippet>class A(object):

    class C():
       def Bar(self):
           print "Goodbye"
           A.name()

    @staticmethod
    def name():
        print "FooBar"

A.C().Bar()
</snippet></ROW><ROW><id>10622559</id><snippet>order-with-respect-to</snippet></ROW><ROW><id>10622559</id><snippet>id</snippet></ROW><ROW><id>10622559</id><snippet>set_RELATED_order</snippet></ROW><ROW><id>10622559</id><snippet>order = IntegerField...</snippet></ROW><ROW><id>10622559</id><snippet>order = [id for (order, id) in sorted([(x.order, x.id) for x in Chapter.objects.all()], key=0)]
</snippet></ROW><ROW><id>10622583</id><snippet>python -m behave -c</snippet></ROW><ROW><id>10622583</id><snippet>-c</snippet></ROW><ROW><id>10622583</id><snippet>(('-c', '--no-color'), dict(action='store_false', dest='color',
     help="Disable the use of ANSI color escapes.")),
</snippet></ROW><ROW><id>10622583</id><snippet>\behave\formatter\ansi_escapes.py</snippet></ROW><ROW><id>10622626</id><snippet>OrderedDict</snippet></ROW><ROW><id>10622626</id><snippet>dict</snippet></ROW><ROW><id>10622626</id><snippet>for k, v in sorted(guests.items()):
  print k, v
</snippet></ROW><ROW><id>10622626</id><snippet>'90' &gt; '100'</snippet></ROW><ROW><id>10622689</id><snippet>deepcopy</snippet></ROW><ROW><id>10622689</id><snippet>copy</snippet></ROW><ROW><id>10622689</id><snippet>__new__</snippet></ROW><ROW><id>10622689</id><snippet>__init__</snippet></ROW><ROW><id>10622689</id><snippet>__init__</snippet></ROW><ROW><id>10622689</id><snippet>__new__</snippet></ROW><ROW><id>10622689</id><snippet>__copy__</snippet></ROW><ROW><id>10622689</id><snippet>__deepcopy__</snippet></ROW><ROW><id>10622689</id><snippet>def __copy__(self):
    return self

def __deepcopy(self, memo):
    return self
</snippet></ROW><ROW><id>10622742</id><snippet>python-config</snippet></ROW><ROW><id>10622742</id><snippet>gcc -c `python-config --cflags` somefile.c
</snippet></ROW><ROW><id>10622742</id><snippet>gcc -o libfoo.so -shared `python-config --ldflags`
</snippet></ROW><ROW><id>10622821</id><snippet>with open('yourfile.pdf', 'w') as f:
    f.write(xdata)
</snippet></ROW><ROW><id>10623110</id><snippet>open</snippet></ROW><ROW><id>10623110</id><snippet>open = ...
</snippet></ROW><ROW><id>10623352</id><snippet>b = a[0:2]
</snippet></ROW><ROW><id>10623352</id><snippet>a</snippet></ROW><ROW><id>10623352</id><snippet>b</snippet></ROW><ROW><id>10623352</id><snippet>a[0:2] = b
</snippet></ROW><ROW><id>10623352</id><snippet>a</snippet></ROW><ROW><id>10623352</id><snippet>b</snippet></ROW><ROW><id>10623675</id><snippet>csv.reader</snippet></ROW><ROW><id>10623675</id><snippet>with open('innovation.csv', 'r') as f:
    print f.read()
</snippet></ROW><ROW><id>10623675</id><snippet>'inovation.csv'</snippet></ROW><ROW><id>10623675</id><snippet>'inovation.csv'</snippet></ROW><ROW><id>10623813</id><snippet>np.array([[books[author][genre] for genre in sorted(books[author])] for author in sorted(books)])
</snippet></ROW><ROW><id>10623813</id><snippet>genres = ['humor', 'action', 'comedy']
</snippet></ROW><ROW><id>10623813</id><snippet>list_of_lists = []
for author_name, author in sorted(books.items()):
    titles = []
    for genre in genres:
        try:
            titles.append(author[genre])
        except KeyError:
            titles.append(0)
    list_of_lists.append(titles)

books_array = numpy.array(list_of_lists)
</snippet></ROW><ROW><id>10623813</id><snippet>genres</snippet></ROW><ROW><id>10623838</id><snippet>string</snippet></ROW><ROW><id>10623838</id><snippet>vars()</snippet></ROW><ROW><id>10623838</id><snippet>&gt;&gt;&gt; foo="bar"
&gt;&gt;&gt; vars()[foo] = 'qwertry'
&gt;&gt;&gt; print bar  # --&gt; 'qwertry'
</snippet></ROW><ROW><id>10623851</id><snippet>"Location: {0:20} Revision {1}".format(Location,Revision)
</snippet></ROW><ROW><id>10624039</id><snippet>mysql&gt; select encrypt('test');
+-----------------+
| encrypt('test') |
+-----------------+
| 92SErC2PadiaQ   |
+-----------------+

mysql&gt; select encrypt('test');
+-----------------+
| encrypt('test') |
+-----------------+
| A2jgxXgOJx7ls   |
+-----------------+
</snippet></ROW><ROW><id>10624039</id><snippet>mysql&gt; select encrypt('test', 'A2jgxXgOJx7ls');
+----------------------------------+
| encrypt('test', 'A2jgxXgOJx7ls') |
+----------------------------------+
| A2jgxXgOJx7ls                    |
+----------------------------------+
</snippet></ROW><ROW><id>10624039</id><snippet>mysql&gt; select encrypt('test', '$1$12345678$') as md5;
+------------------------------------+
| md5                                |
+------------------------------------+
| $1$12345678$oEitTZYQtRHfNGmsFvTBA/ |
+------------------------------------+

mysql&gt; select encrypt('test', '$5$0123456789abcdef$') sha256;
+-----------------------------------------------------------------+
| sha256                                                          |
+-----------------------------------------------------------------+
| $5$0123456789abcdef$Wm4jf6bGxEoelzY0H/fTvcw8Qcshq0hyLaRfZWtN8q. |
+-----------------------------------------------------------------+

mysql&gt; select encrypt('test', '$6$0123456789abcdef$') as sha512;
+------------------------------------------------------------------------------------------------------------+
| sha512                                                                                                     |
+------------------------------------------------------------------------------------------------------------+
| $6$0123456789abcdef$vNATSYYTivQfXwPTUT4q.sRFLs/sgxDXaPipzRlX3WOO4r1NcR.Og5OoU2Cd2agm1WA3pCJ30JU4EKMxpZaDy/ |
+------------------------------------------------------------------------------------------------------------+
</snippet></ROW><ROW><id>10624044</id><snippet>from twisted.web.server     import Site
from twisted.web.resource   import Resource
from twisted.internet       import reactor

class StatusPageResource(Resource):
    isLeaf           = True

    def __init__(self, param1):
        self.param1 = param1
        # Call the constructor of the super class
        Resource.__init__(self)

    def render_GET(self, request):
        return "&lt;html&gt;&lt;body&gt;%s&lt;/body&gt;&lt;/html&gt;" % self.param1


my_res = Resource()
my_res.putChild('GetStatusPage1', StatusPageResource(param1='abc'))
my_res.putChild('GetStatusPage2', StatusPageResource(param1='xyz'))

factory = Site(my_res)
reactor.listenTCP(8080, factory)
print 'Runnning on port 8080'
reactor.run()
</snippet></ROW><ROW><id>10624044</id><snippet>http://localhost:8080/GetStatusPage1</snippet></ROW><ROW><id>10624104</id><snippet>sigma</snippet></ROW><ROW><id>10624104</id><snippet>from numpy import sqrt, log

def sigma2Gamma(sigma):
    '''Function to convert standard deviation (sigma) to FWHM (Gamma)'''
    return sigma * sqrt(2 * log(2)) * 2 / sqrt(2)

Gamma = sigma2Gamma(10)
print Gamma
# prints 16.651092223153956, which is what you saw in your graph

def Gamma2sigma(Gamma):
    '''Function to convert FWHM (Gamma) to standard deviation (sigma)'''
    return Gamma * sqrt(2) / ( sqrt(2 * log(2)) * 2 )

sigma = Gamma2sigma(10)
print sigma
# prints 6.0056120439322491, which is the standard deviation that will
# give a FWHM of 10
</snippet></ROW><ROW><id>10624104</id><snippet>height * np.exp( - ((x-mean)/Gamma2sigma(width))**2 )
</snippet></ROW><ROW><id>10624208</id><snippet>which python
which python2.7
...
</snippet></ROW><ROW><id>10624208</id><snippet>$ echo $PATH</snippet></ROW><ROW><id>10624208</id><snippet>/usr/bin:/usr/local/bin:/home/aUser/bin</snippet></ROW><ROW><id>10624208</id><snippet>ln -s /path/to/executable /usr/bin/executable
</snippet></ROW><ROW><id>10624208</id><snippet>find /usr -type f -name 'python*' -perm -a+x
</snippet></ROW><ROW><id>10624389</id><snippet>&gt;&gt;&gt; dt = datetime.datetime(2012, 1, 1,0,0)
&gt;&gt;&gt; dt.year
2012
</snippet></ROW><ROW><id>10624389</id><snippet>datetime.datetime</snippet></ROW><ROW><id>10624506</id><snippet>widgetForm, baseClass= uic.loadUiType("addTilesWidget.ui")

class windowTest(baseClass, widgetForm):
    def __init__(self, parent = None):
        super(windowTest, self).__init__(parent)
        self.setupUi(self)
</snippet></ROW><ROW><id>10624961</id><snippet>for line in open("foo.txt"):
    print line
</snippet></ROW><ROW><id>10624961</id><snippet>line1

line2

line3
</snippet></ROW><ROW><id>10624961</id><snippet>foo.txt</snippet></ROW><ROW><id>10624961</id><snippet>line1
line2
line3
</snippet></ROW><ROW><id>10624961</id><snippet>line</snippet></ROW><ROW><id>10624961</id><snippet>file</snippet></ROW><ROW><id>10624968</id><snippet>t = datetime.datetime(2012, 2, 23, 0, 0)
t.strftime('%m/%d/%Y')
</snippet></ROW><ROW><id>10624968</id><snippet>'02/23/2012'
</snippet></ROW><ROW><id>10625149</id><snippet>a</snippet></ROW><ROW><id>10625149</id><snippet>In [11]: a[:,:2]
Out[11]: 
array([[-0.57098887, -0.4274751 ],
       [-0.22279713, -0.51723555],
       [ 0.67492385, -0.69294472],
       [ 0.41086611,  0.26374238]])
</snippet></ROW><ROW><id>10625231</id><snippet>*</snippet></ROW><ROW><id>10625231</id><snippet>mylist = [(a, b), (c, d), (e, f)]
for args in mylist:
    myfunc(*args)
</snippet></ROW><ROW><id>10625231</id><snippet>&gt;&gt;&gt; numbers = [(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; for args in numbers:
...     print(*args)
... 
1 2
3 4
5 6
</snippet></ROW><ROW><id>10625412</id><snippet>urlparse.urljoin()</snippet></ROW><ROW><id>10625412</id><snippet>base</snippet></ROW><ROW><id>10625412</id><snippet>url</snippet></ROW><ROW><id>10625987</id><snippet>PyArg_ParseTupleAndKeywords</snippet></ROW><ROW><id>10625987</id><snippet>PyArg_ParseTupleAndKeywords()</snippet></ROW><ROW><id>10625987</id><snippet>Python/getargs.c</snippet></ROW><ROW><id>10626093</id><snippet>eval()</snippet></ROW><ROW><id>10626093</id><snippet>&gt;&gt;&gt; b = {'x':4,'y':3}
&gt;&gt;&gt; eval("x + y", b)
7
</snippet></ROW><ROW><id>10626100</id><snippet>import random
class Randomizer():
    def __init__(self):
        # Generates a list of random values
        self.x = []
        self.rng = 10
        for i in range(1,self.rng+1):
            self.x.append(random.random())            

        # Need to call once to make sure all vars defined
        self.func_A()

    # pick a random value from a list
    def func_A(self):
        self.recent = self.x[random.randint(0,self.rng-1)]
        return self.recent

    # Do something with random value picked by A
    def func_B(self):
        return self.recent*self.recent
</snippet></ROW><ROW><id>10626100</id><snippet>&gt;&gt;&gt; r = Randomizer()
&gt;&gt;&gt; r.func_A()
0.91223345147715629
&gt;&gt;&gt; r.func_B()
0.83216986999392528
</snippet></ROW><ROW><id>10626114</id><snippet>v_1 &lt; v_2</snippet></ROW><ROW><id>10626114</id><snippet>(v_1, random.random()) &lt; (v_2, random.random())</snippet></ROW><ROW><id>10626114</id><snippet>v_1 == v_2</snippet></ROW><ROW><id>10626114</id><snippet>sorted(a, key=lambda v: (v, random.random()))
</snippet></ROW><ROW><id>10626199</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>10626199</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10626199</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>10626199</id><snippet>STATIC_URL</snippet></ROW><ROW><id>10626199</id><snippet>AliasMatch</snippet></ROW><ROW><id>10626199</id><snippet>Alias</snippet></ROW><ROW><id>10626199</id><snippet>python manage.py collectstatic</snippet></ROW><ROW><id>10626199</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>10626334</id><snippet>  a=[1,2,3]
    def indd(val):
     try:   
       ind=a.index(val)
       return ind,val
     except:
       return 'not found'  

    print(indd(1))  
    print(indd(5))   

    (0,1)
    not found
</snippet></ROW><ROW><id>10626334</id><snippet>def ind_3d(lis,val):
    ind=[(j,i,k) for j,x in enumerate(lis) for i,y in enumerate(x) for k,z in enumerate(y) if z==val]
    if len(ind)==0:
        return 'not found'
    else:
        return ind[0]

a=[[[1,2,3],[4,5,6],[7,8,9]],[[11,12,13],[14,15,16],[17,18,19]]]

print(ind_3d(a,11))
print(ind_3d(a,5))
print(ind_3d(a,25))
</snippet></ROW><ROW><id>10626334</id><snippet>(1, 0, 0)
(0, 1, 1)
not found
</snippet></ROW><ROW><id>10626803</id><snippet>    clientlist = dict([(k, [clientList[k], recordlist[k]]) for k in clientList])
</snippet></ROW><ROW><id>10626803</id><snippet>    &gt;&gt;&gt; a = {1:1,2:2,3:3}
    &gt;&gt;&gt; b = {1:11,2:12,3:13}
    &gt;&gt;&gt; c = dict([(k,[a[k],b[k]]) for k in a])
    &gt;&gt;&gt; c
    {1: [1, 11], 2: [2, 12], 3: [3, 13]}
</snippet></ROW><ROW><id>10627254</id><snippet>open(srcfile, "rb")</snippet></ROW><ROW><id>10627254</id><snippet>open(destfile, "wb+")</snippet></ROW><ROW><id>10627326</id><snippet>from selenium import webdriver

DRIVER = None

def getOrCreateWebdriver():
    global DRIVER
    DRIVER = DRIVER or webdriver.Firefox()
    return DRIVER
</snippet></ROW><ROW><id>10627326</id><snippet>import mypkg
...
class testcaseA(unittest.TestCase):

    def setUp(self):
        self.driver = mypkg.getOrCreateWebdriver()
</snippet></ROW><ROW><id>10627842</id><snippet>class Box(object):

    things = []


class BoxManager(object):

    def __set__(self, instance, value):
        if isinstance(value, Box):
            instance._box = value
            Box.things.append(instance)

    def __get__(self, instance, type_=None):
        return instance._box


class Thing(object):
    box = BoxManager()


thing = Thing()
box = Box()

# thing.box updates the box.things
thing.box = box
print 'Thing is in box.things', thing in box.things  # should be true

# box.things updates thing.box
box.things.append(thing)
thing.box == box  # should be true
print 'thing.box == box is', thing.box == box

import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>10628018</id><snippet>val='a'
try:
    int_val = int(val)
except ValueError:
    print("Failure w/ value " + val)
</snippet></ROW><ROW><id>10628061</id><snippet>if name or loca == None:
</snippet></ROW><ROW><id>10628061</id><snippet>"If either name or loca equal none:"
</snippet></ROW><ROW><id>10628061</id><snippet>"if (name) is true or (loca equals None) is true:"
</snippet></ROW><ROW><id>10628061</id><snippet>"if (name equals none) is true or (loca equals none) is true:"
</snippet></ROW><ROW><id>10628061</id><snippet>if name is None or loca is None:
</snippet></ROW><ROW><id>10628061</id><snippet>is</snippet></ROW><ROW><id>10628061</id><snippet>None</snippet></ROW><ROW><id>10628061</id><snippet>if not all((name, loca)):
</snippet></ROW><ROW><id>10628061</id><snippet>if not (name and loca):
</snippet></ROW><ROW><id>10628222</id><snippet>Date</snippet></ROW><ROW><id>10628222</id><snippet>Date</snippet></ROW><ROW><id>10628222</id><snippet>Date.parse('Thu, 1 July 2004 22:30:00');
</snippet></ROW><ROW><id>10628360</id><snippet>&lt;img src="files/image.png"&gt;</snippet></ROW><ROW><id>10628360</id><snippet>&lt;img src="files/subdir/image.png"&gt;</snippet></ROW><ROW><id>10628418</id><snippet>curs.execute(...)</snippet></ROW><ROW><id>10628418</id><snippet>fetchone(...)</snippet></ROW><ROW><id>10628418</id><snippet>fetchmany(...)</snippet></ROW><ROW><id>10628418</id><snippet>fetchall(...)</snippet></ROW><ROW><id>10628418</id><snippet>fetchone()</snippet></ROW><ROW><id>10628418</id><snippet>curs.execute('SELECT * from test.pic')

for row in curs:
    print(row)
</snippet></ROW><ROW><id>10628528</id><snippet>$</snippet></ROW><ROW><id>10628528</id><snippet>$</snippet></ROW><ROW><id>10628528</id><snippet>match_this = "abc12a" #expression you would like to match
dont_match_this = "abc12a9" #expression that returns partial matches from re.match
</snippet></ROW><ROW><id>10628528</id><snippet>match_this</snippet></ROW><ROW><id>10628528</id><snippet>dont_match_this</snippet></ROW><ROW><id>10628528</id><snippet>old_reg_expr = "[a-z]+\d[a-z]+"
</snippet></ROW><ROW><id>10628528</id><snippet>$</snippet></ROW><ROW><id>10628528</id><snippet>new_reg_expr = "[a-z]+\d[a-z]+$"
</snippet></ROW><ROW><id>10628528</id><snippet>&gt;&gt;&gt; m = re.match("[a-z]+\d[a-z]+", "abc12a9")
&gt;&gt;&gt; m.end() == m.endpos
False
</snippet></ROW><ROW><id>10628550</id><snippet>import Tkinter as tk

def cinterp(x1,x2,x,c1,c2):
    """
    interpolate two colors.  c1 and c2 are 3-tuples of rgb values -- 
    e.g. (0,0,255)

    x1,x2 and x are used to determine the interpolation constants.
    """
    s1=float(x-x1)/(x2-x1)
    s2=1.-s1
    return [int(s1*i+s2*j) for i,j in zip(c1,c2)]

root=tk.Tk()
cvs=tk.Canvas(root,width=100,height=50)
cvs.grid(row=0,column=0)
width=int(cvs['width']) 
height=int(cvs['height'])
for i in range(width):
   fill=cinterp(0,width,i,(255,0,0),(255,255,255))
   fs="#%02x%02x%02x"%(fill[0],fill[1],fill[2])
   cvs.create_rectangle(i,1,i+1,height,fill=fs,width=0)

root.mainloop()
</snippet></ROW><ROW><id>10628550</id><snippet>import Tkinter as tk

def cinterp(x1,x2,x,c1,c2):
    s1=float(x-x1)/(x2-x1)
    s2=1.-s1
    return [int(s1*i+s2*j) for i,j in zip(c1,c2)]

root=tk.Tk()
cvs=tk.Label(root,text="Hello")
c2=(255,0,0)
c1=(255,255,255)
def updateCVS(dt,timeleft,deltat):
    timeleft=timeleft-dt
    fill=cinterp(0,deltat,deltat-timeleft,c1,c2)
    fs="#%02x%02x%02x"%(fill[0],fill[1],fill[2])
    cvs.configure(bg=fs)
    if(timeleft&gt;0):
        timeleft=timeleft-dt
        cvs.after(int(dt*1000),updateCVS,dt,timeleft,deltat)

cvs.grid(row=0,column=0)
b=tk.Button(root,text="push me",command=lambda : updateCVS(.2,5,5))
b.grid(row=1,column=0)

root.mainloop()
</snippet></ROW><ROW><id>10628638</id><snippet>from array import array
buf = array("d", range(101))
addr, count = buf.buffer_info()
print lib.sum(cast(addr, POINTER(c_double)), count)
</snippet></ROW><ROW><id>10628681</id><snippet>TEAMS = (
    ("r","red"),
    ("b","black"),
)

class Story(models.Model):
    team = models.CharField(max_length=1, choices=TEAMS)
    title = models.CharField()
    prologue = models.TextField()
</snippet></ROW><ROW><id>10628681</id><snippet>Story.objects.filter(team="r")</snippet></ROW><ROW><id>10628681</id><snippet>get_field</snippet></ROW><ROW><id>10628872</id><snippet>def triangle(n):
    if n == 0:
        return []
    elif n == 1:
        return [[1]]
    else:
        new_row = [1]
        result = triangle(n-1)
        last_row = result[-1]
        for i in range(len(last_row)-1):
            new_row.append(last_row[i] + last_row[i+1])
        new_row += [1]
        result.append(new_row)
    return result
</snippet></ROW><ROW><id>10628892</id><snippet>Python 2.7.2 (default, Aug 19 2011, 20:41:43) [GCC] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"('[^']*'|\d)", "", "'Hello'+yes+'Whats hello'6")
'+yes+'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10628892</id><snippet>(...|...)</snippet></ROW><ROW><id>10628892</id><snippet>'[^']*'</snippet></ROW><ROW><id>10628892</id><snippet>\d</snippet></ROW><ROW><id>10628892</id><snippet>re.sub(pattern, replacement, string)</snippet></ROW><ROW><id>10628892</id><snippet>'</snippet></ROW><ROW><id>10628892</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"('[^']*'|(?&lt;![a-zA-Z])\d(?![a-zA-Z]))", "", "'Hello'+yes+'Whats hello'6")
'+yes+'
&gt;&gt;&gt; re.sub(r"('[^']*'|(?&lt;![a-zA-Z])\d(?![a-zA-Z]))", "", "+ye5s")
'+ye5s'
</snippet></ROW><ROW><id>10628947</id><snippet>color="k"
</snippet></ROW><ROW><id>10628947</id><snippet>color="0.x"
</snippet></ROW><ROW><id>10628947</id><snippet>x</snippet></ROW><ROW><id>10628947</id><snippet>z</snippet></ROW><ROW><id>10628947</id><snippet>scatter(x,y,c=z, cmap=cm.Greys)
</snippet></ROW><ROW><id>10628947</id><snippet>from pylab import *
from random import random
r = range(10)
x = [3 + i + random() for i in r]
y = [50*i + random() for i in r]
x2 = [5 + i + random() for i in r]
y2 = [5*i + random() for i in r]
z2 = [i + random() for i in r]
scatter(x,y,   c="0.1", marker = 'o', hold = True, label = 'collected underwear')
scatter(x2,y2, c=z2,marker = 's',  hold = True, label = 'Profit!',cmap=cm.Greys)
legend(loc='upper left')
show()
</snippet></ROW><ROW><id>10629337</id><snippet>lineNo = []
css = open("/path/to/stylesheet.css")  
for i,line in enumerate(css.readlines(), start=1):
        if "width" in line:
            print (i, line)
            lineNo.append(i)


print (lineNo)
</snippet></ROW><ROW><id>10629396</id><snippet>__del__</snippet></ROW><ROW><id>10629396</id><snippet>__del__()</snippet></ROW><ROW><id>10629396</id><snippet>__del__</snippet></ROW><ROW><id>10630170</id><snippet>python manage.py shell</snippet></ROW><ROW><id>10630170</id><snippet>settings.py</snippet></ROW><ROW><id>10630170</id><snippet>.</snippet></ROW><ROW><id>10630170</id><snippet>settings.py</snippet></ROW><ROW><id>10630170</id><snippet>sys.path</snippet></ROW><ROW><id>10630170</id><snippet>import settings
from django.core.management import setup_environ

setup_environ(settings)  # Setting up the env settings
</snippet></ROW><ROW><id>10630170</id><snippet>settings.py</snippet></ROW><ROW><id>10630170</id><snippet>sys.path</snippet></ROW><ROW><id>10630212</id><snippet>import re
pat = re.compile('w=[0-9]+')  # or you can use \d+
s = pat.sub('', s)
</snippet></ROW><ROW><id>10630212</id><snippet>import urlparse
import urllib

s = 'w=123&amp;q=456&amp;tw=123&amp;w=123abc&amp;foo=bar&amp;w=12'

# s here must be key=value&amp;key=value only
parsed = urlparse.parse_qsl(s, keep_blank_values=True)
filtered = [ i for i in parsed if not (i[0] == 'w' and i[1].isdigit()) ]
s = urllib.urlencode(filtered)
</snippet></ROW><ROW><id>10630297</id><snippet>itertools.product()</snippet></ROW><ROW><id>10630297</id><snippet>&gt;&gt;&gt; import itertools, pprint
&gt;&gt;&gt; mylist = ["Eat","Sleep","Drink"]
&gt;&gt;&gt; my_combination = list(itertools.product(mylist, repeat = 2))
&gt;&gt;&gt; pprint.pprint (my_combination)
[('Eat', 'Eat'),
 ('Eat', 'Sleep'),
 ('Eat', 'Drink'),
 ('Sleep', 'Eat'),
 ('Sleep', 'Sleep'),
 ('Sleep', 'Drink'),
 ('Drink', 'Eat'),
 ('Drink', 'Sleep'),
 ('Drink', 'Drink')]
</snippet></ROW><ROW><id>10630297</id><snippet>repeat</snippet></ROW><ROW><id>10630297</id><snippet>N</snippet></ROW><ROW><id>10630297</id><snippet># Don't do this - will crash Python with out-of-memory error
list(itertools.product(my_list, repeat = 100000))

# Iterate over the list instead
for one_combination in itertools.product(my_list, repeat = 100000):
    print (one_combination)
</snippet></ROW><ROW><id>10630499</id><snippet>mylist.append(value)</snippet></ROW><ROW><id>10631101</id><snippet>max(3,price)</snippet></ROW><ROW><id>10631272</id><snippet>&gt;&gt;&gt; x=u'Курс карбованца к доллару не изменился на Украинской Межбанковской Валютной Бирже (УМВБ) - 176.100.'
&gt;&gt;&gt; print x.encode('utf8').decode('latin1')
ÐÑÑÑ ÐºÐ°ÑÐ±Ð¾Ð²Ð°Ð½ÑÐ° Ðº Ð´Ð¾Ð»Ð»Ð°ÑÑ Ð½Ðµ Ð¸Ð·Ð¼ÐµÐ½Ð¸Ð»ÑÑ Ð½Ð° Ð£ÐºÑÐ°Ð¸Ð½ÑÐºÐ¾Ð¹ ÐÐµÐ¶Ð±Ð°Ð½ÐºÐ¾Ð²ÑÐºÐ¾Ð¹ ÐÐ°Ð»ÑÑÐ½Ð¾Ð¹ ÐÐ¸ÑÐ¶Ðµ (Ð£ÐÐÐ) - 176.100.
</snippet></ROW><ROW><id>10631272</id><snippet>&lt;text&gt;Курс карбованца к доллару не изменился на Украинской Межбанковской Валютной Бирже (УМВБ) - 176.100.&lt;/text&gt;
</snippet></ROW><ROW><id>10631272</id><snippet>from xml.etree import ElementTree
import zipfile

def parse(fp):
    # open/decompress zip file
    with zipfile.ZipFile(fp, 'r') as f:
        # get all files in zip
        comp_files = f.namelist()
        for comp_file in comp_files:
            cfp = f.open(comp_file, 'r')
            # parse xml
            tree = ElementTree.parse(cfp)
            print tree.getroot().text
            print type(tree.getroot().text)

parse(open('file.zip'))
</snippet></ROW><ROW><id>10631272</id><snippet>Курс карбованца к доллару не изменился на Украинской Межбанковской Валютной Бирже (УМВБ) - 176.100.
&lt;type 'unicode'&gt;
</snippet></ROW><ROW><id>10631478</id><snippet>for i in str:
    srr += i
</snippet></ROW><ROW><id>10631478</id><snippet>for i in str:
    srr = srr + i
</snippet></ROW><ROW><id>10631478</id><snippet>srr</snippet></ROW><ROW><id>10631846</id><snippet>save()</snippet></ROW><ROW><id>10631846</id><snippet>save()</snippet></ROW><ROW><id>10631846</id><snippet>sys.getcheckinterval()</snippet></ROW><ROW><id>10631846</id><snippet>COMMIT</snippet></ROW><ROW><id>10631846</id><snippet>save()</snippet></ROW><ROW><id>10631846</id><snippet>UPDATE/INSERT</snippet></ROW><ROW><id>10631846</id><snippet>COMMIT</snippet></ROW><ROW><id>10631846</id><snippet>save()</snippet></ROW><ROW><id>10631846</id><snippet>sqlite</snippet></ROW><ROW><id>10631846</id><snippet>psycopg</snippet></ROW><ROW><id>10631878</id><snippet>isVisible</snippet></ROW><ROW><id>10631878</id><snippet>hide</snippet></ROW><ROW><id>10631878</id><snippet>visibleRegion</snippet></ROW><ROW><id>10631878</id><snippet>def wheelEvent(self, event):
    print "Wheel Event:"
    for child in self.children()[1:]:
        print child.text(), 'is visible?', not child.visibleRegion().isEmpty()
    event.ignore()
</snippet></ROW><ROW><id>10632307</id><snippet>l = [35,53,[525,6743],64,63,[743,754,757]]

def flatten(xs):
    result = []
    if isinstance(xs, (list, tuple)):
        for x in xs:
            result.extend(flatten(x))
    else:
        result.append(xs)
    return result

print flatten(l)
</snippet></ROW><ROW><id>10632532</id><snippet>lst = [[item.strip()[1:-1] for item in element[3:-3].split(',')] for element in lst]
</snippet></ROW><ROW><id>10632532</id><snippet>eval</snippet></ROW><ROW><id>10632532</id><snippet>lst[:] = eval(lst[0]), eval(lst[1])
</snippet></ROW><ROW><id>10632532</id><snippet>json</snippet></ROW><ROW><id>10632532</id><snippet>import json
lst = [json.loads(i) for i in lst]
</snippet></ROW><ROW><id>10632532</id><snippet>eval</snippet></ROW><ROW><id>10632532</id><snippet>eval</snippet></ROW><ROW><id>10632532</id><snippet>eval</snippet></ROW><ROW><id>10632532</id><snippet>import re
lst = [re.findall("['\"](\w+)['\"]", item) for item in lst]
</snippet></ROW><ROW><id>10632586</id><snippet>pyramid_jinja2</snippet></ROW><ROW><id>10632586</id><snippet>pyramid_jinja2.get_jinja2_environment()</snippet></ROW><ROW><id>10632586</id><snippet>configurator</snippet></ROW><ROW><id>10632586</id><snippet>[app:yourapp]
    # ... other stuff ...
    jinja2.filters =
        # ...
        getbitvalue = your_package.your_subpackage:GetBitValue
</snippet></ROW><ROW><id>10632598</id><snippet>import hmac
import hashlib
import base64
hash = hmac.new('Secret', "Message", hashlib.sha256).hexdigest()
</snippet></ROW><ROW><id>10632746</id><snippet>data = set( [i.strip() for i in open( filename, 'r' ).readlines()] )

for server in cmo.getServers() :
    data.add( server.getListenAddress() )

open( filename, 'w' ).write('\n'.join(data))
</snippet></ROW><ROW><id>10633309</id><snippet>get_form</snippet></ROW><ROW><id>10633309</id><snippet>def get_form(self, request, obj=None, **kwargs)</snippet></ROW><ROW><id>10633309</id><snippet>obj</snippet></ROW><ROW><id>10633309</id><snippet>def get_form(self, request, obj, **kwargs)</snippet></ROW><ROW><id>10633309</id><snippet>obj</snippet></ROW><ROW><id>10633309</id><snippet>form = super(FilerVariant,self).get_form(self,request, obj,**kwargs)
</snippet></ROW><ROW><id>10633309</id><snippet>self</snippet></ROW><ROW><id>10633322</id><snippet>import inspect

def clips_callable(func):
    from functools import wraps
    @wraps(func)
    def wrapper(*__args,**__kw):
        return func(*__args,**__kw)
    setattr(wrapper, "clips_callable", True)
    return wrapper

class CLIPS(object):
    def __init__(self, data):
        members = inspect.getmembers(self, inspect.ismethod)
        for name, method in members:
            try:
                if method.clips_callable:
                    clips.RegisterPythonFunction(method, name)
            except:
                pass
...
    @clips_callable
    def pyprint(self, value):
        print self.data, "".join(map(str, value))
</snippet></ROW><ROW><id>10633322</id><snippet>(defrule MAIN::start-me-up
    =&gt;
    (python-call pyprint "Hello world")
)
</snippet></ROW><ROW><id>10633366</id><snippet>lineGraph.set_xlabel</snippet></ROW><ROW><id>10633366</id><snippet>lineGraph.set_ylabel</snippet></ROW><ROW><id>10633366</id><snippet>plt.xlabel</snippet></ROW><ROW><id>10633366</id><snippet>plot.ylabel</snippet></ROW><ROW><id>10633366</id><snippet># Line graph subplot
lineGraph = lineGraph.plot(xs,ys,'-')
lineGraph.set_xlabel('x')
lineGraph.set_ylabel('y')

# Bar graph subplot
barChart = barChart.bar(xs,ys,width=1.0,facecolor='g')
barChart.set_xlabel('x')
barChart.set_ylabel('y')
</snippet></ROW><ROW><id>10633366</id><snippet>plt.title</snippet></ROW><ROW><id>10633366</id><snippet>plt.gca</snippet></ROW><ROW><id>10633366</id><snippet>lineGraph.set_title</snippet></ROW><ROW><id>10633366</id><snippet>barChart.set_title</snippet></ROW><ROW><id>10633854</id><snippet>chr(255)
</snippet></ROW><ROW><id>10633854</id><snippet>?</snippet></ROW><ROW><id>10633854</id><snippet>decode</snippet></ROW><ROW><id>10633854</id><snippet>chr(255).decode('latin1')
</snippet></ROW><ROW><id>10633854</id><snippet>chr(255)</snippet></ROW><ROW><id>10633854</id><snippet>'LATIN SMALL LETTER Y WITH DIAERESIS'</snippet></ROW><ROW><id>10633854</id><snippet>unichr(255)
</snippet></ROW><ROW><id>10633951</id><snippet>buffer1[:] = buffer2
</snippet></ROW><ROW><id>10633951</id><snippet>buffer2</snippet></ROW><ROW><id>10633951</id><snippet>buffer1</snippet></ROW><ROW><id>10633951</id><snippet>buffer1</snippet></ROW><ROW><id>10633951</id><snippet>buffer1[pos:pos+len(buffer2)] = buffer2
</snippet></ROW><ROW><id>10633951</id><snippet>buffer2</snippet></ROW><ROW><id>10634006</id><snippet>INSERT</snippet></ROW><ROW><id>10634006</id><snippet>VALUES</snippet></ROW><ROW><id>10634006</id><snippet>query = """INSERT INTO "users" ("userID", "email", "forename", "surname") 
           VALUES
           (?, ?, ?, ?)
        """
user_list = ((1, 'user1@example.com', 'Test', 'User'), (2, 'user2@example.com', 'Test', 'User'))
cursor.executemany("INSERT INTO myTable(data) values (?) ", user_list)
</snippet></ROW><ROW><id>10634006</id><snippet>INSERT</snippet></ROW><ROW><id>10634238</id><snippet>array([3,-2]) #decreasing value
array([-2,-4,-7]) #decreasing value
</snippet></ROW><ROW><id>10634238</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; data = [0,1,2,3,4,3,2,3,-2,-4,-7,2,2]
&gt;&gt;&gt; def slope(a,b): #Returns 1 for inc, 0 for equal and -1 for dec
        return (a &gt; b) - (a &lt; b) 

&gt;&gt;&gt; def groups(nums):
        for k,v in groupby(zip(nums,nums[1:]), lambda (x,y): slope(x,y)):
            yield next(v) + tuple(y for x,y in v) #Using itertools.chain this can be written as tuple(chain(next(v),(y for x,y in v)))


&gt;&gt;&gt; list(groups(data))
[(0, 1, 2, 3, 4), (4, 3, 2), (2, 3), (3, -2, -4, -7), (-7, 2), (2, 2)]
</snippet></ROW><ROW><id>10634359</id><snippet>{
       "\x85": u'...',
       "\x91": u"'"
}
</snippet></ROW><ROW><id>10634359</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>10634359</id><snippet>In [10]: ast.literal_eval(open('lookup.txt').read())
Out[10]: {'\x85': u'...', '\x91': u"'"}
</snippet></ROW><ROW><id>10634359</id><snippet>85</snippet></ROW><ROW><id>10634359</id><snippet>91</snippet></ROW><ROW><id>10634359</id><snippet>In [17]: chr(int('91', 16))
Out[17]: '\x91'
</snippet></ROW><ROW><id>10634363</id><snippet>props = {}</snippet></ROW><ROW><id>10634363</id><snippet>self.props = {}</snippet></ROW><ROW><id>10634363</id><snippet>__init__</snippet></ROW><ROW><id>10635034</id><snippet>for line in lines:
    print line
    line = line.strip()
    ping = subprocess.Popen(
                ["ping", "-c", "1", "-s", "1", "-l", "1",line],
                stdout = subprocess.PIPE,
                stderr = subprocess.PIPE
          )
    out, error = ping.communicate()
    print out
</snippet></ROW><ROW><id>10635142</id><snippet>0</snippet></ROW><ROW><id>10635142</id><snippet>-1</snippet></ROW><ROW><id>10635142</id><snippet>0</snippet></ROW><ROW><id>10635142</id><snippet>1</snippet></ROW><ROW><id>10635142</id><snippet>&lt;</snippet></ROW><ROW><id>10635142</id><snippet>&gt;</snippet></ROW><ROW><id>10635142</id><snippet>cmp</snippet></ROW><ROW><id>10635287</id><snippet>defaultdict</snippet></ROW><ROW><id>10635287</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dict1 = {1:'a',2:'b',3:'c'}
&gt;&gt;&gt; dict2 = {1:'hello', 4:'four', 5:'five'}
&gt;&gt;&gt; my_dict = defaultdict(list)
&gt;&gt;&gt; for k in dict1:
...    my_dict[k].append(dict1[k])
...
&gt;&gt;&gt; for k in dict2:
...    my_dict[k].append(dict2[k])
...
&gt;&gt;&gt; my_dict[1]
['a', 'hello']
</snippet></ROW><ROW><id>10635404</id><snippet>0x2588</snippet></ROW><ROW><id>10635404</id><snippet>print unichr(0x2588)        # or:
print u"\u2588"
</snippet></ROW><ROW><id>10635404</id><snippet>encode</snippet></ROW><ROW><id>10635779</id><snippet>return '%.2f' %a
</snippet></ROW><ROW><id>10635797</id><snippet>session.count += 1</snippet></ROW><ROW><id>10635797</id><snippet>session.count = session.count + 1</snippet></ROW><ROW><id>10635797</id><snippet>session.count</snippet></ROW><ROW><id>10635797</id><snippet>if 'count' not in session:
    session.count = 0
session.count += 1
</snippet></ROW><ROW><id>10635797</id><snippet>try:
    s.click += 1
except AttributeError:
    s.click = 1
</snippet></ROW><ROW><id>10636641</id><snippet>context</snippet></ROW><ROW><id>10636641</id><snippet>request</snippet></ROW><ROW><id>10636641</id><snippet>context</snippet></ROW><ROW><id>10636641</id><snippet>@register.simple_tag(takes_context=True)
def foo(context):
    request = context['request']
    request.META
    ...
</snippet></ROW><ROW><id>10636641</id><snippet>request</snippet></ROW><ROW><id>10636641</id><snippet>context</snippet></ROW><ROW><id>10636641</id><snippet>request</snippet></ROW><ROW><id>10636641</id><snippet>Context()</snippet></ROW><ROW><id>10636641</id><snippet>'django.core.context_processors.request'</snippet></ROW><ROW><id>10636641</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10636641</id><snippet>RequestContext</snippet></ROW><ROW><id>10636641</id><snippet>request.META</snippet></ROW><ROW><id>10636641</id><snippet>Context()</snippet></ROW><ROW><id>10636720</id><snippet>elem</snippet></ROW><ROW><id>10636720</id><snippet>from xml.etree.ElementTree as etree

xml_string = """&lt;elem&gt;
    &lt;variable id="getthis" /&gt;
    &lt;if&gt;
        &lt;variable id="alsoGetThis" /&gt;
    &lt;/if&gt;
    &lt;/elem&gt;"""

e = etree.fromstring(xml_string)

for node in e:
    print node
</snippet></ROW><ROW><id>10636720</id><snippet>&lt;Element variable at 7f53fbdf1cb0&gt;
&lt;Element if at 7f53fbdf1cf8&gt;
</snippet></ROW><ROW><id>10636720</id><snippet>variable</snippet></ROW><ROW><id>10636720</id><snippet>if</snippet></ROW><ROW><id>10636720</id><snippet>collect_vars</snippet></ROW><ROW><id>10636720</id><snippet>id</snippet></ROW><ROW><id>10636720</id><snippet>id</snippet></ROW><ROW><id>10636720</id><snippet>id</snippet></ROW><ROW><id>10636720</id><snippet>def get_attrs(element, tag, attr):
    """Return attribute `attr` of `tag` child elements of `element`."""

    # If an element has any cildren (nested elements) loop through them:
    if len(element):
         for node in element:
            # Recursively call this function, yielding each result:
            for attribute in get_attrs(node, tag, attr):
                yield attribute

    # Otherwise, check if element is of type `tag` with attribute `attr`, if so
    # yield the value of that attribute.
    if element.tag == 'variable':
        if attr in element.attrib:
            yield element.attrib[attr]

ids = [id for id in get_attrs(e, 'variable', 'id')]

print ids
</snippet></ROW><ROW><id>10636720</id><snippet> ['getthis', 'alsoGetThis']
</snippet></ROW><ROW><id>10636900</id><snippet>ignore_result=True</snippet></ROW><ROW><id>10637021</id><snippet>import matplotlib.pyplot as plt
from matplotlib.backends.backend_gtk import FigureCanvasGTK as FigureCanvas
import gtk
import numpy as np

class W(gtk.Window):

    def __init__(self):

        gtk.Window.__init__(self)

        img = np.random.uniform(0,1,(200,200))

        fig = plt.Figure()
        fig.gca().imshow(img)
        self.image_canvas = FigureCanvas(fig)
        self.image_canvas.connect('button_press_event', self.do_clip)

        self.add(self.image_canvas)
        self.show_all()

    def do_clip(self, widget=None, event=None):

        snap = self.image_canvas.get_snapshot()
        pixbuf = gtk.gdk.pixbuf_get_from_drawable(None, snap,
            snap.get_colormap(),0,0,0,0,
            snap.get_size()[0], snap.get_size()[1])
        clip = gtk.Clipboard()
        clip.set_image(pixbuf)


w=W()
gtk.main()
</snippet></ROW><ROW><id>10637141</id><snippet>numpy.arange</snippet></ROW><ROW><id>10637141</id><snippet>mytimes = numpy.arange(0, maxtime, 0.05)
</snippet></ROW><ROW><id>10637141</id><snippet>def calcTimes(maxtime):
  dt = 0.05
  t = 0
  while t &lt; maxtime:
   yield t
   t += dt
</snippet></ROW><ROW><id>10637316</id><snippet>[x for x in (int(input()) for _ in range(int(input()))) if x &gt; 0]
</snippet></ROW><ROW><id>10637681</id><snippet>sys.path.append('..')</snippet></ROW><ROW><id>10637681</id><snippet>sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
</snippet></ROW><ROW><id>10637992</id><snippet>egg</snippet></ROW><ROW><id>10637992</id><snippet>lxml-2.3.4</snippet></ROW><ROW><id>10637992</id><snippet>egg</snippet></ROW><ROW><id>10637992</id><snippet>easy_install</snippet></ROW><ROW><id>10637992</id><snippet>easy_install /path/to/eggfile
</snippet></ROW><ROW><id>10638371</id><snippet>=</snippet></ROW><ROW><id>10638371</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; class MyClass:
...     def __init__(self):
...         self.a = [2]
...         __builtin__.a = self.a
...
&gt;&gt;&gt; myclass = MyClass()
&gt;&gt;&gt; myclass.a[0] = 4
&gt;&gt;&gt; a[0] = 2
&gt;&gt;&gt; print a
[2]
&gt;&gt;&gt; print myclass.a
[2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10638371</id><snippet>__builtins__</snippet></ROW><ROW><id>10638415</id><snippet>import logging

logger = logging.getLogger('testlog')
handler = logging.FileHandler('\\path\\to\\testlog.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)

logger.error("some error occurred")
logger.info('some info msg')
logging.disable(logging.ERROR)
logger.info('another info msg')
logging.disable(logging.NOTSET)
logger.info('last info msg')
</snippet></ROW><ROW><id>10638415</id><snippet>2012-05-17 11:09:24,441 ERROR some error occurred
2012-05-17 11:09:24,443 INFO some info msg
2012-05-17 11:09:24,443 INFO last info msg
</snippet></ROW><ROW><id>10638480</id><snippet>time.sleep(0.01)</snippet></ROW><ROW><id>10638480</id><snippet>def addToQueue(self):
        starttime = time.time()
        count=0
        print "Adding stuff to queue..."
        while time.time()-starttime  &lt; 4:
            self.queue.put("string")
            count += 1
            time.sleep(0.01)
        print "Added %d objects!" % count
</snippet></ROW><ROW><id>10638578</id><snippet>Vote</snippet></ROW><ROW><id>10638578</id><snippet>Vote</snippet></ROW><ROW><id>10638578</id><snippet>Article</snippet></ROW><ROW><id>10638578</id><snippet>Article.objects.filter(tags=tag).annotate(vote_count=Count('vote')).order_by('-vote_count')
</snippet></ROW><ROW><id>10638578</id><snippet>Article</snippet></ROW><ROW><id>10638578</id><snippet>user</snippet></ROW><ROW><id>10638578</id><snippet>vote</snippet></ROW><ROW><id>10638578</id><snippet>Article.objects.filter(tags=tag).annotate(favorite_count=Count('user')).order_by('-favorite_count')
</snippet></ROW><ROW><id>10638736</id><snippet> V(B) = 1   if X has won in this position
 V(B) = -1  if O has won in this position
 V(B) = 0   if neither player has won and no more moves are possible (draw)
</snippet></ROW><ROW><id>10638736</id><snippet> V(B) = max(V(B1), ..., V(Bn)) where board positions B1..Bn are
        the positions available for X, and it is X's move
 V(B) = min(V(B1), ..., V(Bn)) where board positions B1..Bn are
        the positions available for O, and it is O's move
</snippet></ROW><ROW><id>10638818</id><snippet># python PyBBIO/examples/analog_test_simple.py
-----
AIN0 [P9.39] - 3955
AIN1 [P9.40] - 4015
AIN2 [P9.37] - 4012
AIN3 [P9.38] - 3950
AIN4 [P9.33] - 3998
AIN5 [P9.36] - 4007
AIN6 [P9.35] - 3984
-----
AIN0 [P9.39] - 4007
AIN1 [P9.40] - 3953
AIN2 [P9.37] - 4005
AIN3 [P9.38] - 3941
AIN4 [P9.33] - 3956
AIN5 [P9.36] - 3934
AIN6 [P9.35] - 3946
...
</snippet></ROW><ROW><id>10638818</id><snippet># python PyBBIO/examples/analog_test_simple.py
-----
AIN0 [P9.39] - 2888
AIN1 [P9.40] - 2894
AIN2 [P9.37] - 2899
AIN3 [P9.38] - 2907
AIN4 [P9.33] - 2914
AIN5 [P9.36] - 2912
AIN6 [P9.35] - 2914
-----
AIN0 [P9.39] - 2912
AIN1 [P9.40] - 2905
AIN2 [P9.37] - 2901
AIN3 [P9.38] - 2891
AIN4 [P9.33] - 2896
AIN5 [P9.36] - 2890
AIN6 [P9.35] - 2896
...
</snippet></ROW><ROW><id>10638818</id><snippet>os</snippet></ROW><ROW><id>10638818</id><snippet>os.system('cat ...')</snippet></ROW><ROW><id>10638818</id><snippet>import os,time
i = 1

while(True):
    os.system("cat /sys/bus/platform/devices/tsc/ain" + str(i))
    print " - AIN" + str(i-1)
    if i==7: 
        i=1
        time.sleep(.5)
        print "------"
    else:
        i+=1    
    time.sleep(.1)
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
3943 - AIN0
3819 - AIN1
3955 - AIN2
2018 - AIN3
2093 - AIN4
3583 - AIN5
3658 - AIN6
------
3947 - AIN0
3746 - AIN1
3959 - AIN2
2034 - AIN3
2123 - AIN4
3547 - AIN5
3644 - AIN6
...
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
2915 - AIN0
3347 - AIN1
3556 - AIN2
1478 - AIN3
1602 - AIN4
2393 - AIN5
2402 - AIN6
------
2913 - AIN0
3337 - AIN1
3560 - AIN2
1487 - AIN3
1606 - AIN4
2350 - AIN5
2489 - AIN6
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
3939 - AIN0
3792 - AIN1
2881 - AIN2
1986 - AIN3
2089 - AIN4
3462 - AIN5
3543 - AIN6
------
3923 - AIN0
3791 - AIN1
2866 - AIN2
1960 - AIN3
2055 - AIN4
3528 - AIN5
3615 - AIN6
...
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
3951 - AIN0
3764 - AIN1
3933 - AIN2
2899 - AIN3
2134 - AIN4
3606 - AIN5
3737 - AIN6
------
3960 - AIN0
3823 - AIN1
3957 - AIN2
2910 - AIN3
2118 - AIN4
3635 - AIN5
3645 - AIN6
...
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
2866 - AIN0
3340 - AIN1
3540 - AIN2
885 - AIN3
1591 - AIN4
2348 - AIN5
2389 - AIN6
------
2872 - AIN0
3339 - AIN1
3551 - AIN2
884 - AIN3
1560 - AIN4
2383 - AIN5
2434 - AIN6
...
</snippet></ROW><ROW><id>10638818</id><snippet># python analog-test-all-pins.py
------
2897 - AIN0
3338 - AIN1
3557 - AIN2
1464 - AIN3
1578 - AIN4
888 - AIN5
2459 - AIN6
------
2901 - AIN0
3344 - AIN1
3561 - AIN2
1460 - AIN3
1579 - AIN4
889 - AIN5
2395 - AIN6
...
</snippet></ROW><ROW><id>10638818</id><snippet>Segmentation fault</snippet></ROW><ROW><id>10638818</id><snippet># cat /sys/bus/platform/devices/tsc/ain1
3953
# cat /sys/bus/platform/devices/tsc/ain2
3818
</snippet></ROW><ROW><id>10638818</id><snippet>os</snippet></ROW><ROW><id>10638818</id><snippet>cat</snippet></ROW><ROW><id>10638818</id><snippet># cat /sys/bus/platform/devices/tsc/ain1
Segmentation fault
# cat /sys/bus/platform/devices/tsc/ain2
Segmentation fault
</snippet></ROW><ROW><id>10638818</id><snippet>cat</snippet></ROW><ROW><id>10638818</id><snippet># cat /sys/bus/platform/devices/tsc/ain1
2890
# cat /sys/bus/platform/devices/tsc/ain2
3366
</snippet></ROW><ROW><id>10638818</id><snippet>from mrbbio import *

def setup():
    #pinMode("P9.36", INPUT)
    pass

def loop():

    print "-----"

    for key, value in analogPinDef.items():
        # There is currently an error in mrBBIO, as the analogPinDef dict points to:
        # ain[0-6] in /sys/devices/platform/tsc/ while it should point at: ain[1-7]
        if key=="P9.39": 
            print analogRead(key) + " - " + value
            delay(100)

    delay(1000)

run (setup,loop)
</snippet></ROW><ROW><id>10638818</id><snippet># python mrbbio/analog-test-all-pins.py
-----
2005 - ain4
3636 - ain6
3812 - ain2
2114 - ain5
3872 - ain3
3950 - ain1
-----
2002 - ain4
3530 - ain6
3787 - ain2
2059 - ain5
3895 - ain3
3952 - ain1
...
Cleaning up. Unexporting the following pins:
</snippet></ROW><ROW><id>10638818</id><snippet>cat</snippet></ROW><ROW><id>10638818</id><snippet># cat /sys/bus/platform/devices/tsc/ain1
3960
# cat /sys/bus/platform/devices/tsc/ain2
3830
</snippet></ROW><ROW><id>10638863</id><snippet>User</snippet></ROW><ROW><id>10638863</id><snippet>UserData</snippet></ROW><ROW><id>10638863</id><snippet>email</snippet></ROW><ROW><id>10638863</id><snippet>user_id</snippet></ROW><ROW><id>10638863</id><snippet>User</snippet></ROW><ROW><id>10638863</id><snippet>class UserData(db.Model) :
    user = db.UserProperty()
    name = db.StringProperty()
    flag = db.IntegerProperty()
</snippet></ROW><ROW><id>10639072</id><snippet>step</snippet></ROW><ROW><id>10639072</id><snippet>stride</snippet></ROW><ROW><id>10639072</id><snippet>&gt;&gt;&gt; 'hello'[::] # here the value of stride is 1, means take a step of one between two indexes
'hello'   

&gt;&gt;&gt; 'hello'[::2] #take a step of 2 so starting from h --&gt;l --&gt; o 
'hlo'

&gt;&gt;&gt; 'abcdef'[::-1] #negative step actually means 'abcdef'[-1:-len('abcdef')-1:-1]
'fedcba'
</snippet></ROW><ROW><id>10639125</id><snippet>LOAD DATA LOCAL</snippet></ROW><ROW><id>10639125</id><snippet>LOAD DATA LOCAL</snippet></ROW><ROW><id>10639125</id><snippet>LOAD DATA LOCAL</snippet></ROW><ROW><id>10639219</id><snippet>filters</snippet></ROW><ROW><id>10639219</id><snippet>filters = {}
</snippet></ROW><ROW><id>10639219</id><snippet>fdim_y</snippet></ROW><ROW><id>10639219</id><snippet>idim</snippet></ROW><ROW><id>10639283</id><snippet>3</snippet></ROW><ROW><id>10639283</id><snippet>x is y</snippet></ROW><ROW><id>10639283</id><snippet>"__main__"</snippet></ROW><ROW><id>10639283</id><snippet>&gt;&gt;&gt; __name__
'__main__'
&gt;&gt;&gt; x = __name__
&gt;&gt;&gt; id(__name__)
3078339808L
&gt;&gt;&gt; id(x)
3078339808L
&gt;&gt;&gt; __name__ is x
True
</snippet></ROW><ROW><id>10639363</id><snippet>persons_by_id = {p.id: p for p in persons}
</snippet></ROW><ROW><id>10639363</id><snippet>persons_by_id = dict((p.id, p) for p in persons)
</snippet></ROW><ROW><id>10639363</id><snippet>persons_by_id[id]
</snippet></ROW><ROW><id>10639363</id><snippet>networkx</snippet></ROW><ROW><id>10639363</id><snippet>import networkx as nx 
G=nx.Graph() 
for person in persons: 
  if person.father_id != -1:
    G.add_edge(person, persons_by_id[person.father_id]) 
</snippet></ROW><ROW><id>10639500</id><snippet>connect</snippet></ROW><ROW><id>10639500</id><snippet>/etc/ssl/certs</snippet></ROW><ROW><id>10639506</id><snippet>Word table                              tuple table

primary_key   word                      primary_key     tuple     foreign_key
1             example1                  1               (1,2)     1
2             example2                  2               (3,9)     1
                                        3               (4,1)     2
                                        4               (4,2)     2
</snippet></ROW><ROW><id>10639506</id><snippet>myDict = {'example1' = [(1,2), (3,9)], 'example2' = [(4,1), (4,2)]}
</snippet></ROW><ROW><id>10639833</id><snippet>int</snippet></ROW><ROW><id>10639954</id><snippet>calendar.timegm(tuple)</snippet></ROW><ROW><id>10640037</id><snippet>reduce( (lambda r,x: r-set(range(x**2,N,x)) if (x in r) else r), 
        range(2,N), set(range(2,N)))
</snippet></ROW><ROW><id>10640037</id><snippet>&gt;&gt;&gt; primesUpTo(N): lambda N: reduce(...)
&gt;&gt;&gt; primesUpTo(30)
{2, 3, 5, 7, 11, 13, 17, 19}
</snippet></ROW><ROW><id>10640037</id><snippet>&gt;&gt;&gt; N = 100
&gt;&gt;&gt; table = list(range(N))
&gt;&gt;&gt; for i in range(2,int(N**0.5)+1):
...     if table[i]:
...         for mult in range(i**2,N,i):
...             table[mult] = False
... 
&gt;&gt;&gt; primes = [p for p in table if p][1:]
&gt;&gt;&gt; primes
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
</snippet></ROW><ROW><id>10640037</id><snippet>[...].__setitem__</snippet></ROW><ROW><id>10640037</id><snippet>... and foo</snippet></ROW><ROW><id>10640037</id><snippet>...</snippet></ROW><ROW><id>10640037</id><snippet>foo</snippet></ROW><ROW><id>10640037</id><snippet>&gt;&gt;&gt; primesUpTo = lambda N: (lambda table: [[table.__setitem__(mult,False) for mult in range(i**2,N,i)] for i in range(2,int(N**0.5)+1) if table[i]] and [p for p in table if p][1:])(list(range(N)))
&gt;&gt;&gt; primesUpTo(30)
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
</snippet></ROW><ROW><id>10640037</id><snippet>lambda N:
    (lambda table: 
        [[table.__setitem__(mult,False) for mult in range(i**2,N,i)] 
            for i in range(2,int(N**0.5)+1) if table[i]] 
        and [p for p in table if p][1:]
    )(list(range(N)))
</snippet></ROW><ROW><id>10640037</id><snippet>reduce</snippet></ROW><ROW><id>10640037</id><snippet>reduce( (lambda r,x: (r.difference_update(range(x**2,N,x)) or r)
                     if (x in r) else r), 
        range(2,N), set(range(2,N)))
</snippet></ROW><ROW><id>10640037</id><snippet>difference_update</snippet></ROW><ROW><id>10640037</id><snippet>reduce( (lambda r,x: (r.difference_update(range(x*x,N,2*x)) or r)
                     if (x in r) else r), 
        range(3, int((N+1)**0.5+1), 2),
        set([2] + range(3,N,2)))
</snippet></ROW><ROW><id>10640168</id><snippet>import Image

background = Image.open("bg.png")
overlay = Image.open("ol.jpg")

background = background.convert("RGBA")
overlay = overlay.convert("RGBA")

new_img = Image.blend(background, overlay, 0.5)
new_img.save("new.png","PNG")
</snippet></ROW><ROW><id>10640489</id><snippet>dict = {};

dict[key] = value;
</snippet></ROW><ROW><id>10640512</id><snippet>file = open('file.txt', 'wb')
file.write('input1\n')
file.write('input2\n')
file.write('input3\n')
</snippet></ROW><ROW><id>10640512</id><snippet>'\n'</snippet></ROW><ROW><id>10640512</id><snippet>with</snippet></ROW><ROW><id>10640512</id><snippet>with open('file.txt', 'wb') as file:
   file.write('input1\n')
   file.write('input2\n')
   file.write('input3\n')
</snippet></ROW><ROW><id>10640512</id><snippet>file</snippet></ROW><ROW><id>10640628</id><snippet>Model.save</snippet></ROW><ROW><id>10640628</id><snippet>class DependentIntegerField(models.IntegerField):

    def pre_save(self, model_instance, add):
        if not add: # set the default only while adding model
            return super(self, DependentIntegerField).pre_save(model_instance, add)

        return model_instance.number*50
</snippet></ROW><ROW><id>10640628</id><snippet>DependentIntegerField</snippet></ROW><ROW><id>10640628</id><snippet>from django.db import models

class_map = {}

def depends_field_pre_save(self, model_instance, add):
    """
    if default is not callable or it is not a model add, lets skip our hook
    """
    if not add or not callable(self.default):
        super(self.__class__, self).__init__(self,*args, **kwargs)
    value = self.default(model_instance)
    setattr(model_instance, self.attname, value)
    return value

def FieldDepends(field_class):
    """
    return a dervied class from field_class which supports dependent default
    """
    if field_class in class_map:
        # we already created this class so return that
        return class_map[field_class]

    new_class = type('Depends'+field_class.__name__, (field_class,), {'pre_save':depends_field_pre_save })

    class_map[field_class] = new_class

    return new_class
</snippet></ROW><ROW><id>10640628</id><snippet>class DependentModel(models.Model):

    def threshold_default(model_instance=None):
        if model_instance is None:
            return 10
        return model_instance.number*10

    number = models.IntegerField(null=True, blank=True, default=10)
    threshold = FieldDepends(models.IntegerField)(null=True, blank=True, default=threshold_default,editable=False)
</snippet></ROW><ROW><id>10640664</id><snippet>ca_certs</snippet></ROW><ROW><id>10640823</id><snippet>'a'</snippet></ROW><ROW><id>10640823</id><snippet>'r+'</snippet></ROW><ROW><id>10640886</id><snippet>import copy

class Foo(object):
    def __init__(self):
        self.x = None
        self.y = None
        self.z = None
    def copy(self):
        return copy.deepcopy(self)

a = Foo()
a.x = 1
a.y = 2
a.z = 3

b = a.copy()
print b.x
print b.y
print b.z
</snippet></ROW><ROW><id>10640886</id><snippet>dict.copy</snippet></ROW><ROW><id>10640967</id><snippet>form3</snippet></ROW><ROW><id>10641023</id><snippet>r"^\D+"
</snippet></ROW><ROW><id>10641023</id><snippet>import re

s = "EEEE1234"
print re.match(r"^\D+",s).group(0)
</snippet></ROW><ROW><id>10641023</id><snippet>re</snippet></ROW><ROW><id>10641185</id><snippet>wrap_socket</snippet></ROW><ROW><id>10641185</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>10641240</id><snippet>'h'</snippet></ROW><ROW><id>10641240</id><snippet>'i'</snippet></ROW><ROW><id>10641240</id><snippet>  _ h
_ 0 1
i 1 1
</snippet></ROW><ROW><id>10641240</id><snippet>(1, 1)</snippet></ROW><ROW><id>10641240</id><snippet>0</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0)</snippet></ROW><ROW><id>10641240</id><snippet>(1, 1)</snippet></ROW><ROW><id>10641240</id><snippet>1</snippet></ROW><ROW><id>10641240</id><snippet>'i'</snippet></ROW><ROW><id>10641240</id><snippet>'h'</snippet></ROW><ROW><id>10641240</id><snippet>  _ h i
_ 0 1 2
i 1 1 1
s 2 2 2
</snippet></ROW><ROW><id>10641240</id><snippet>(1, 2)</snippet></ROW><ROW><id>10641240</id><snippet>i</snippet></ROW><ROW><id>10641240</id><snippet>(0, 1)</snippet></ROW><ROW><id>10641240</id><snippet>1</snippet></ROW><ROW><id>10641240</id><snippet>  _ h i n t
_ 0 1 2 3 4
i 1 1 1 2 3
s 2 2 2 2 3
n 3 3 3 2 3
t 4 4 4 3 2
</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0)</snippet></ROW><ROW><id>10641240</id><snippet>(0, 1)</snippet></ROW><ROW><id>10641240</id><snippet>_ -&gt; _</snippet></ROW><ROW><id>10641240</id><snippet>_ -&gt; h</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0)</snippet></ROW><ROW><id>10641240</id><snippet>(1, 0)</snippet></ROW><ROW><id>10641240</id><snippet>_ -&gt; _</snippet></ROW><ROW><id>10641240</id><snippet>i -&gt; _</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0)</snippet></ROW><ROW><id>10641240</id><snippet>(1, 1)</snippet></ROW><ROW><id>10641240</id><snippet>_ -&gt; _</snippet></ROW><ROW><id>10641240</id><snippet>h -&gt; i</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0)</snippet></ROW><ROW><id>10641240</id><snippet>(4, 4) -&gt; (3, 3) -&gt; (2, 2) -&gt; (1, 2) -&gt; (0, 1) -&gt; (0, 0)
</snippet></ROW><ROW><id>10641240</id><snippet>(4, 4) -&gt; (3, 3) -&gt; (2, 2) -&gt; (1, 1) -&gt; (0, 0)
</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0) -&gt; (0, 1) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 3) -&gt; (4, 4)
</snippet></ROW><ROW><id>10641240</id><snippet>(0, 0) -&gt; (1, 1) -&gt; (2, 2) -&gt; (3, 3) -&gt; (4, 4)
</snippet></ROW><ROW><id>10641240</id><snippet>h</snippet></ROW><ROW><id>10641240</id><snippet>isnt</snippet></ROW><ROW><id>10641240</id><snippet>hint</snippet></ROW><ROW><id>10641240</id><snippet>Insert, h</snippet></ROW><ROW><id>10641240</id><snippet>Equal, i, i</snippet></ROW><ROW><id>10641240</id><snippet>s</snippet></ROW><ROW><id>10641240</id><snippet>isnt</snippet></ROW><ROW><id>10641240</id><snippet>hint</snippet></ROW><ROW><id>10641240</id><snippet>Delete, s</snippet></ROW><ROW><id>10641240</id><snippet>Equal, n, n</snippet></ROW><ROW><id>10641240</id><snippet>Equal, t, t</snippet></ROW><ROW><id>10641240</id><snippet>Insert, h
Equal, i, i
Delete, s
Equal, n, n
Equal, t, t
</snippet></ROW><ROW><id>10641240</id><snippet>isnt</snippet></ROW><ROW><id>10641240</id><snippet>isnt
hisnt
hisnt
hint
hint
hint
</snippet></ROW><ROW><id>10641240</id><snippet>(2, ('ins', 'eq', 'del', 'eq', 'eq'))</snippet></ROW><ROW><id>10641305</id><snippet>Client</snippet></ROW><ROW><id>10641305</id><snippet>Applicant</snippet></ROW><ROW><id>10641305</id><snippet>client = Client(applicant_ptr=applicant)
client.save_base(raw=True)
</snippet></ROW><ROW><id>10641388</id><snippet>for c in (Class1,Class2):
    c.me = classmethod(_AnyClass_me)

&gt;&gt;&gt; Class1.me()
__main__.Class1 () {}
&gt;&gt;&gt; Class2().me()
__main__.Class2 () {}
&gt;&gt;&gt; Class1.me(123)
__main__.Class1 (123,) {}
&gt;&gt;&gt; Class2().me(123)
__main__.Class2 (123,) {}
</snippet></ROW><ROW><id>10641540</id><snippet>http://example.com:8002</snippet></ROW><ROW><id>10641540</id><snippet>http://YOUR-IP:8002</snippet></ROW><ROW><id>10641805</id><snippet>from pymongo import Connection
connection = Connection()

# Get your DB
db = connection.my_database

# Get your collection
cars = db.cars

# Create some objects
import datetime
car = {"brand": "Ford",
       "model": "Mustang",
       "date": datetime.datetime.utcnow()}

# Insert it
cars.insert(car)
</snippet></ROW><ROW><id>10641973</id><snippet>__</snippet></ROW><ROW><id>10641973</id><snippet>_</snippet></ROW><ROW><id>10642069</id><snippet>time</snippet></ROW><ROW><id>10642099</id><snippet>./configure</snippet></ROW><ROW><id>10642099</id><snippet>--with-python</snippet></ROW><ROW><id>10642099</id><snippet>make</snippet></ROW><ROW><id>10642099</id><snippet>./builddir/gdb</snippet></ROW><ROW><id>10642100</id><snippet>hist</snippet></ROW><ROW><id>10642100</id><snippet>bin_edges</snippet></ROW><ROW><id>10642100</id><snippet>numpy.histogram</snippet></ROW><ROW><id>10642100</id><snippet>numpy.cumsum</snippet></ROW><ROW><id>10642100</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; hist, bin_edges = np.histogram(np.random.randint(0,10,100), normed=True)
&gt;&gt;&gt; bin_edges
array([ 0. ,  0.9,  1.8,  2.7,  3.6,  4.5,  5.4,  6.3,  7.2,  8.1,  9. ])
&gt;&gt;&gt; hist
array([ 0.14444444,  0.11111111,  0.11111111,  0.1       ,  0.1       ,
        0.14444444,  0.14444444,  0.08888889,  0.03333333,  0.13333333])
&gt;&gt;&gt; np.cumsum(hist)
array([ 0.14444444,  0.25555556,  0.36666667,  0.46666667,  0.56666667,
        0.71111111,  0.85555556,  0.94444444,  0.97777778,  1.11111111])
</snippet></ROW><ROW><id>10642122</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>10642122</id><snippet>manage.py shell</snippet></ROW><ROW><id>10642262</id><snippet>with open(outputpath) as f_outputfile:
    outputfile = csv.writer(f_outputfile)

OTHER CODE HERE
</snippet></ROW><ROW><id>10642262</id><snippet>f_outputfile = open(outputpath)
outputfile = csv.writer(f_outputfile)
f_outputfile.close() 

OTHER CODE HERE
</snippet></ROW><ROW><id>10642262</id><snippet>OTHER CODE HERE</snippet></ROW><ROW><id>10642271</id><snippet>&gt;&gt;&gt; string = '$20 - $40'  #'$20' will also work
&gt;&gt;&gt; x = re.findall(r'\$(\d+)', string)
&gt;&gt;&gt; 1. * sum(map(int, x)) / len(x)
30.0 #convert to int if you want
</snippet></ROW><ROW><id>10642423</id><snippet>pic_input</snippet></ROW><ROW><id>10642423</id><snippet>Blob</snippet></ROW><ROW><id>10642423</id><snippet>Text</snippet></ROW><ROW><id>10642423</id><snippet>String</snippet></ROW><ROW><id>10642423</id><snippet>&lt;form method = "post" enctype="multipart/form-data" &gt;
</snippet></ROW><ROW><id>10642487</id><snippet>&gt;&gt;&gt;import re

&gt;&gt;&gt;expression = re.compile("(?!(\"|'))Hello(?!(\"|'))")
&gt;&gt;&gt;expression.sub("Hi",'This string says "Hello" and Hello')

This string says "Hello" and Hi
</snippet></ROW><ROW><id>10642545</id><snippet>sys.pydebug</snippet></ROW><ROW><id>10642865</id><snippet>def view(request): 
  obj = Model.objects.get(pk = objectpk)
  form = MyModelForm(instance = obj)

  return render (request, "template", {'form' = form})
</snippet></ROW><ROW><id>10642865</id><snippet>form.fields['fieldname'].initial = somevalue
</snippet></ROW><ROW><id>10642873</id><snippet>dir(parameters)</snippet></ROW><ROW><id>10642873</id><snippet>vars(parameters).iteritems()</snippet></ROW><ROW><id>10642873</id><snippet>&gt;&gt;&gt; dir(settings)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'bad', 'good', 'ok']
</snippet></ROW><ROW><id>10642873</id><snippet>good</snippet></ROW><ROW><id>10642873</id><snippet>bad</snippet></ROW><ROW><id>10642873</id><snippet>ok</snippet></ROW><ROW><id>10642873</id><snippet>dict</snippet></ROW><ROW><id>10642873</id><snippet>parameters</snippet></ROW><ROW><id>10642873</id><snippet># parameters.py

HAM = {  # or whatever this represents
    good: '100',
    bad: '110',
    ok: '120',
}
</snippet></ROW><ROW><id>10643023</id><snippet>x = [(0, 1, 2, 3, 4), (4, 3, 2), (2, 3), (3, -2, -4, -7), (-7, 2), (2, 2)]
y = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

s = map(len, x)
s = [0] + [sum(s[:i])-i for i in range(1, len(s))] + [len(y)]
y = [tuple(y[a:b+1]) for a, b in zip(s, s[1:])]
</snippet></ROW><ROW><id>10643023</id><snippet>&gt;&gt;&gt; y
[(0, 1, 2, 3, 4), (4, 5, 6), (6, 7), (7, 8, 9, 10), (10, 11), (11, 12)]
</snippet></ROW><ROW><id>10643023</id><snippet>y</snippet></ROW><ROW><id>10643023</id><snippet>x</snippet></ROW><ROW><id>10643023</id><snippet>&gt;&gt;&gt; zip(s, s[1:])
[(0, 4), (4, 6), (6, 7), (7, 10), (10, 11), (11, 13)]
</snippet></ROW><ROW><id>10643023</id><snippet>y</snippet></ROW><ROW><id>10643023</id><snippet>[(0, 4), (4,  6), (6,  7), (7, 10), (10, 11), (11, 13)]
   \ |     \   \    \_  \
   | |      \  |      \  |
[y[0:4+1], y[4:6+1], y[6:7+1], ...]
</snippet></ROW><ROW><id>10643490</id><snippet>LoopingCall</snippet></ROW><ROW><id>10643490</id><snippet>deferred</snippet></ROW><ROW><id>10643577</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>10643601</id><snippet>import re
s = re.sub('{{.*?}}', '', s)
</snippet></ROW><ROW><id>10643601</id><snippet>{</snippet></ROW><ROW><id>10643601</id><snippet>}</snippet></ROW><ROW><id>10643613</id><snippet>$ heroku login
Enter your Heroku credentials.
Email: adam@example.com
Password: 
Could not find an existing public key.
Would you like to generate one? [Yn] 
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
</snippet></ROW><ROW><id>10643721</id><snippet>the</snippet></ROW><ROW><id>10643721</id><snippet>same</snippet></ROW><ROW><id>10643721</id><snippet>the[^a-z]*same
</snippet></ROW><ROW><id>10643721</id><snippet>foothe ... samebar</snippet></ROW><ROW><id>10643721</id><snippet>\bthe\b[^a-z]*\bsame\b
</snippet></ROW><ROW><id>10643784</id><snippet>import re

keys = ['first_condition', 'extra_condition', 'testing', 'other'] 
d = dict(re.findall(r'^(.*)\((.*)\)$', text, re.M))
result = [d.get(key, '') for key in keys]
</snippet></ROW><ROW><id>10644020</id><snippet>and</snippet></ROW><ROW><id>10644020</id><snippet>or</snippet></ROW><ROW><id>10644020</id><snippet>and</snippet></ROW><ROW><id>10644020</id><snippet>or</snippet></ROW><ROW><id>10644020</id><snippet>or</snippet></ROW><ROW><id>10644020</id><snippet>if (len(content_tags) &gt;= 1 or tags_irrelevant == 'yes')\
   and lengthproblem == 0\
   and guess_language.guessLanguage(testlanguage) == 'en'\
   and len(sentences) &gt;= 3:
</snippet></ROW><ROW><id>10644020</id><snippet>&gt;&gt;&gt; def test(bool):
...    print(bool)
...    return bool
... 
&gt;&gt;&gt; if test(1) or test(2) and test(3) and test(4) and test(False):
...    print("Success")
... 
1
Success
&gt;&gt;&gt; if (test(1) or test(2)) and test(3) and test(4) and test(False):
...     print("Success")
... 
1
3
4
False
</snippet></ROW><ROW><id>10644020</id><snippet>and</snippet></ROW><ROW><id>10644020</id><snippet>and</snippet></ROW><ROW><id>10644020</id><snippet>or</snippet></ROW><ROW><id>10644020</id><snippet>True</snippet></ROW><ROW><id>10644020</id><snippet>True</snippet></ROW><ROW><id>10644020</id><snippet>and</snippet></ROW><ROW><id>10644020</id><snippet>True</snippet></ROW><ROW><id>10644020</id><snippet>True</snippet></ROW><ROW><id>10644251</id><snippet>filenames = []

for i in range(0, sm):
    row = [] 
    for j in range(0, sn):
        row.append('') # I assume you want to do something more here
    filenames.append(row)
</snippet></ROW><ROW><id>10644400</id><snippet>import os
if os.name != "posix":
    from win32com.shell import shellcon, shell
    homedir = "{}\\".format(shell.SHGetFolderPath(0, shellcon.CSIDL_APPDATA, 0, 0))
else:
    homedir = "{}/".format(os.path.expanduser("~"))
</snippet></ROW><ROW><id>10644400</id><snippet>if not os.path.isdir("{0}.{1}".format(homedir,projectname)):
    os.mkdir("{0}.{1}".format(homedir,projectname))
</snippet></ROW><ROW><id>10644559</id><snippet>Root
   here_using_my_module.py
   my_module
       __init__.py  --&gt; leave it empty
       a.py
       b.py
       c.py
</snippet></ROW><ROW><id>10644559</id><snippet>//here_using_your_module.py
import os, sys

abspath = lambda *p: os.path.abspath(os.path.join(*p))

PROJECT_ROOT = abspath(os.path.dirname(__file__))

sys.path.insert(0,PROJECT_ROOT)

import a from my_module

a.do_something()
</snippet></ROW><ROW><id>10644728</id><snippet>find</snippet></ROW><ROW><id>10644728</id><snippet>re.findall</snippet></ROW><ROW><id>10644728</id><snippet>% python -mtimeit "'&lt;tags&gt; &lt;person1&gt;dave jones&lt;/person1&gt; &lt;person2&gt;ron matthews&lt;/person2&gt; &lt;person3&gt;sally van heerden&lt;/person3&gt; &lt;place&gt;tygervalley&lt;/place&gt; &lt;ocassion&gt;shopping&lt;/ocassion&gt; &lt;/tags&gt;'.find('tygervalley')"
1000000 loops, best of 3: 0.279 usec per loop

% python -mtimeit "import re; re.findall('tygervalley', '&lt;tags&gt; &lt;person1&gt;dave jones&lt;/person1&gt; &lt;person2&gt;ron matthews&lt;/person2&gt; &lt;person3&gt;sally van heerden&lt;/person3&gt; &lt;place&gt;tygervalley&lt;/place&gt; &lt;ocassion&gt;shopping&lt;/ocassion&gt; &lt;/tags&gt;')"
100000 loops, best of 3: 2.65 usec per loop
</snippet></ROW><ROW><id>10644744</id><snippet>   - Increment loop depth.
   - Reset the ev_break status.
   - Before the first iteration, call any pending watchers.
   LOOP:
   - If EVFLAG_FORKCHECK was used, check for a fork.
   - If a fork was detected (by any means), queue and call all fork watchers.
   - Queue and call all prepare watchers.
   - If ev_break was called, goto FINISH.
   - If we have been forked, detach and recreate the kernel state
     as to not disturb the other process.
   - Update the kernel state with all outstanding changes.
   - Update the "event loop time" (ev_now ()).
   - Calculate for how long to sleep or block, if at all
     (active idle watchers, EVRUN_NOWAIT or not having
     any active watchers at all will result in not sleeping).
   - Sleep if the I/O and timer collect interval say so.
   - Increment loop iteration counter.
   - Block the process, waiting for any events.
   - Queue all outstanding I/O (fd) events.
   - Update the "event loop time" (ev_now ()), and do time jump adjustments.
   - Queue all expired timers.
   - Queue all expired periodics.
   - Queue all idle watchers with priority higher than that of pending events.
   - Queue all check watchers.
   - Call all queued watchers in reverse order (i.e. check watchers first).
     Signals and child watchers are implemented as I/O watchers, and will
     be handled here by queueing them when their watcher gets executed.
   - If ev_break has been called, or EVRUN_ONCE or EVRUN_NOWAIT
     were used, or there are no active watchers, goto FINISH, otherwise
     continue with step LOOP.
   FINISH:
   - Reset the ev_break status iff it was EVBREAK_ONE.
   - Decrement the loop depth.
   - Return.
</snippet></ROW><ROW><id>10644814</id><snippet>8.e-58</snippet></ROW><ROW><id>10644814</id><snippet>&gt;&gt;&gt; x = 8.54768039530728989343156856E-58
&gt;&gt;&gt; print "{0:.1e}".format(x)
8.5e-58
</snippet></ROW><ROW><id>10644814</id><snippet>&gt;&gt;&gt; print "{0:.0e}".format(x)
9e-58
</snippet></ROW><ROW><id>10644814</id><snippet>"{:.1e}".format(x)</snippet></ROW><ROW><id>10645044</id><snippet>a = [1, 2, 3, 4]
b = [5, 6, 7, 8, 9]
c = [x.pop(0) for x in random.sample([a]*len(a) + [b]*len(b), len(a)+len(b))]
</snippet></ROW><ROW><id>10645044</id><snippet>c = map(next, random.sample([iter(a)]*len(a) + [iter(b)]*len(b), len(a)+len(b)))
</snippet></ROW><ROW><id>10645044</id><snippet>list(map(...))</snippet></ROW><ROW><id>10645044</id><snippet>map</snippet></ROW><ROW><id>10645044</id><snippet>a = [1, 2, 3, 4]
b = [5, 6, 7, 8, 9]

c = []
tmp = [a]*len(a) + [b]*len(b)
while a and b:
    c.append(random.choice(tmp).pop(0))

c += a + b
</snippet></ROW><ROW><id>10645044</id><snippet>0</snippet></ROW><ROW><id>10645044</id><snippet>''</snippet></ROW><ROW><id>10645044</id><snippet>None</snippet></ROW><ROW><id>10645044</id><snippet>False</snippet></ROW><ROW><id>10645044</id><snippet>a = [1, 2, 3, 4]
b = [5, 6, 7, 8, 9]

ratio = float(len(a)) / float(len(a) + len(b))
c = [(not a and b.pop(0)) or (not b and a.pop(0)) or
     (random.random() &lt; ratio and b.pop(0)) or a.pop(0)
     for _ in range(len(a) + len(b))]
</snippet></ROW><ROW><id>10645087</id><snippet>usage: strings [-a] [-f offset] [-b bytes] [-n length] [-o] [-q] [-s] [-u] &lt;file or directory&gt;

Strings takes wild-card expressions for file names, and additional command line parameters are defined as follows:

-a  Ascii-only search (Unicode and Ascii is default)
-b  Bytes of file to scan
-f  File offset at which to start scanning.
-o  Print offset in file string was located
-n  Minimum string length (default is 3)
-q  Quiet (no banner)
-s  Recurse subdirectories
-u  Unicode-only search (Unicode and Ascii is default)  

To search one or more files for the presence of a particular string using strings use a command like this:

strings * | findstr /i TextToSearchFor
</snippet></ROW><ROW><id>10645087</id><snippet>strings</snippet></ROW><ROW><id>10645087</id><snippet>import re
data = open('c:/users/metolone/util/windiff.exe','rb').read()

# Search for printable ASCII characters encoded as UTF-16LE.
pat = re.compile(ur'(?:[\x20-\x7E][\x00]){3,}')
words = [w.decode('utf-16le') for w in pat.findall(data)]
for w in words:
    print w
</snippet></ROW><ROW><id>10645166</id><snippet>SpecialDict</snippet></ROW><ROW><id>10645166</id><snippet>mySpecialDict['hello'] = 54</snippet></ROW><ROW><id>10645166</id><snippet>mySpecialDict.__setitem__('hello', 54)</snippet></ROW><ROW><id>10645166</id><snippet>__getitem__</snippet></ROW><ROW><id>10645166</id><snippet>mySpecialDict</snippet></ROW><ROW><id>10645166</id><snippet>dict</snippet></ROW><ROW><id>10645166</id><snippet>super(SpecialDict, self).__setitem__(key, value)</snippet></ROW><ROW><id>10645166</id><snippet>dict.__setitem__(self, key, value)</snippet></ROW><ROW><id>10645166</id><snippet>__setitem__</snippet></ROW><ROW><id>10645166</id><snippet>__getitem__</snippet></ROW><ROW><id>10645166</id><snippet>collections.Mapping</snippet></ROW><ROW><id>10645166</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>10645390</id><snippet>regexp = re.compile(r"(?P&lt;FandH&gt;[FH]+) | (('F')[*](?P&lt;F&gt;[0-9]+)\s*[+]\s*('H')[*](?P&lt;H&gt;[0-9]+))")
</snippet></ROW><ROW><id>10645390</id><snippet>regexp = re.compile(r"(?P&lt;FandH&gt;[FH]+)|(('F')[*](?P&lt;F&gt;[0-9]+)\s*[+]\s*('H')[*](?P&lt;H&gt;[0-9]+))")
</snippet></ROW><ROW><id>10645489</id><snippet>self.date</snippet></ROW><ROW><id>10645489</id><snippet>"'; DROP TABLE exchange_rates --"</snippet></ROW><ROW><id>10645489</id><snippet>SELECT currency FROM exchange_rates WHERE date=''; DROP TABLE exchange_rates -- '</snippet></ROW><ROW><id>10645489</id><snippet>'</snippet></ROW><ROW><id>10645489</id><snippet>self.date</snippet></ROW><ROW><id>10645564</id><snippet> maps.Maps.add_animal("Fred") # gives error

 mymap = maps.Map()

 mymap.add_animal("Fred") # should work
</snippet></ROW><ROW><id>10645735</id><snippet>from Atlas import Atlas
</snippet></ROW><ROW><id>10645855</id><snippet>print_exc</snippet></ROW><ROW><id>10645855</id><snippet>logging.exception("Exception") #or 
logging.error("exception ",exc_info=1) #or
logging.info("Exception has occured" ,exc_info=1)
</snippet></ROW><ROW><id>10645945</id><snippet>def rotate(self):
    self.image=pygame.transform.rotate(self.saved_image, self.angle)
    self.rect = self.image.get_rect(center=self.rect.center)
    self.angle+=10
</snippet></ROW><ROW><id>10645945</id><snippet>self.image.get_rect(center=self.rect.center)
</snippet></ROW><ROW><id>10646263</id><snippet>alphabet = "zyxwvutsrqpomnlkjihgfedcba"

new_list = sorted(inputList, key=lambda word: [alphabet.index(c) for c in word[0]])
</snippet></ROW><ROW><id>10646263</id><snippet>alphabet_dict = dict([(x, alphabet.index(x)) for x in alphabet)
new_list = sorted(inputList, key=lambda word: [alphabet_dict[c] for c in word[0]])
</snippet></ROW><ROW><id>10646515</id><snippet>QtGui.QCoreApplication()</snippet></ROW><ROW><id>10646515</id><snippet>from PyQt4 import QtCore

class Hello(QtCore.QObject):

    def __init__(self, msg):
        super(Hello, self).__init__()
        self.msg = msg
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.say)
        self.timer.start(500)
        self.i = 0

    def say(self):
        print self.msg
        self.i += 1
        if self.i &gt; 5:
            QtCore.QCoreApplication.instance().quit()

if __name__ == "__main__":
    import sys
    app = QtCore.QCoreApplication(sys.argv)
    hello = Hello("Hello World!")
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>10646548</id><snippet>class OrderDetailForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ('work_type', 'vendor', 'note') 
        widgets = {
            'note': forms.Textarea(),
        }
</snippet></ROW><ROW><id>10646548</id><snippet>def edit(request, order_id):
    order = Order.objects.get(pk=order_id)
    can_edit_work_type = bool(request.REQUEST.get('can_edit_work_type', False))
    can_edit_vender = bool(request.REQUEST.get('can_edit_vender', False))
    can_edit_note = bool(request.REQUEST.get('can_edit_note', False))

    exclude_fields = []

    if not can_edit_work_type:
        exclude_fields.append('work_type')

    if not can_edit_vender:
        exclude_fields.append('vender')

    if not can_edit_note:
        exclude_fields.append('note')

    class CustomizedOrderForm(OrderDetailForm):
        class Meta:
            model = Order
            exclude = tuple(exclude_fields)

    if request.method == 'POST':
        form = CustomizedOrderForm(instance=order, data=request.POST)
        if form.is_valid():
            form.save()
    else:
        form = CustomizedOrderForm(instance=order)
    return render(request, 'order_form.html', {'form': form})
</snippet></ROW><ROW><id>10646739</id><snippet>{z: {y: {x: [] for x in data_types} for y in t} for z in experiments}
</snippet></ROW><ROW><id>10646815</id><snippet>isinstance</snippet></ROW><ROW><id>10646815</id><snippet>[float('nan'), float('inf')]
</snippet></ROW><ROW><id>10646815</id><snippet>float</snippet></ROW><ROW><id>10646815</id><snippet>import numpy as np

def check(x):
    if isinstance(x,list):
        if len(x) == 2:
            if all(isinstance(ele, (int, float)) and np.isinf(ele) == False and np.isnan(ele) == False for ele in x):
                return True
    return False
</snippet></ROW><ROW><id>10646815</id><snippet>&gt;&gt;&gt; check([2,3])
True
&gt;&gt;&gt; check([4, float('inf')])
False
</snippet></ROW><ROW><id>10646815</id><snippet>isfinite</snippet></ROW><ROW><id>10646815</id><snippet>isinstance</snippet></ROW><ROW><id>10646815</id><snippet>def check(x):
    if isinstance(x,list):
        if len(x) == 2:
            if all(np.isfinite(ele) for ele in x):
                return True
    return False
</snippet></ROW><ROW><id>10646993</id><snippet>Greg</snippet></ROW><ROW><id>10646993</id><snippet>RFC1459</snippet></ROW><ROW><id>10646993</id><snippet>PING</snippet></ROW><ROW><id>10647033</id><snippet>final = (1 - alpha) * background + alpha * foreground
</snippet></ROW><ROW><id>10647033</id><snippet>alpha = 0.5</snippet></ROW><ROW><id>10647033</id><snippet>final = rgb(0.5, 0.5, 0.5) + foreground / 2
</snippet></ROW><ROW><id>10647090</id><snippet>d[r] = d[r].append(i)
</snippet></ROW><ROW><id>10647090</id><snippet>.append</snippet></ROW><ROW><id>10647090</id><snippet>None</snippet></ROW><ROW><id>10647090</id><snippet>None</snippet></ROW><ROW><id>10647090</id><snippet>d[r]</snippet></ROW><ROW><id>10647090</id><snippet>.setdefault</snippet></ROW><ROW><id>10647090</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>10647090</id><snippet>from collections import defaultdict

d = defaultdict(list)
for i in range(100):
    r = i % 10
    d[r].append(i)
</snippet></ROW><ROW><id>10647090</id><snippet>range(100)</snippet></ROW><ROW><id>10647090</id><snippet>from itertools import groupby

def last_digit(i): return i % 10
d = {k: list(v) for k, v in groupby(sorted(range(100), key=last_digit), last_digit)}
</snippet></ROW><ROW><id>10647090</id><snippet>range</snippet></ROW><ROW><id>10647090</id><snippet>d = {i: range(i, 100, 10) for i in range(10)}
</snippet></ROW><ROW><id>10647124</id><snippet>data = [
    ['A','a','1'],
    ['B','b','2'],
    ['C','c','3'],
    ['D','d','4']
]

# Desired output:
#
#   A B C D
# a 1
# b   2
# c     3
# d       4

# Check data consists of colname, rowname, value triples
assert all([3 == len(row) for row in data])
# Convert all data to strings
data = [ [str(c) for c in r] for r in data]
# Check all data is one character wide
assert all([1 == len(s) for s in r for r in data])

#============================================================================
# Verbose version
#============================================================================
col_names, row_names, values = zip(*data) # Transpose

header_line = '  ' + ' '.join(col_names)
row_lines = []
for idx, (row_name, value) in enumerate(zip(row_names,values)):
    # Use '  '*n to get 2n consecutive spaces.
    row_line = row_name + ' ' + '  '*idx + value
    row_lines.append(row_line)

print header_line
for r in row_lines:
    print (r)
</snippet></ROW><ROW><id>10647124</id><snippet>cs, rs, vs = zip(*data)
print ('\n'.join(['  '+' '.join(cs)] + [r+' '+'  '*i+v for i,(r,v) in enumerate(zip(rs,vs))]))
</snippet></ROW><ROW><id>10647124</id><snippet>  A B C D
a 1
b   2
c     3
d       4
</snippet></ROW><ROW><id>10647124</id><snippet>&gt;&gt;&gt; print('\n'.join([ ''.join([str(i+j+2).rjust(3)
    for i in range(10)]) for j in range(10) ]))

  2  3  4  5  6  7  8  9 10 11
  3  4  5  6  7  8  9 10 11 12
  4  5  6  7  8  9 10 11 12 13
  5  6  7  8  9 10 11 12 13 14
  6  7  8  9 10 11 12 13 14 15
  7  8  9 10 11 12 13 14 15 16
  8  9 10 11 12 13 14 15 16 17
  9 10 11 12 13 14 15 16 17 18
 10 11 12 13 14 15 16 17 18 19
 11 12 13 14 15 16 17 18 19 20
</snippet></ROW><ROW><id>10647124</id><snippet>i</snippet></ROW><ROW><id>10647124</id><snippet>j</snippet></ROW><ROW><id>10647124</id><snippet>i+j</snippet></ROW><ROW><id>10647124</id><snippet>str.rjust()</snippet></ROW><ROW><id>10647124</id><snippet>str.join()</snippet></ROW><ROW><id>10647539</id><snippet>functions = {100:do_something,101:do_sth_different}
user_input = 100
try:
    functions[user_input]()
except KeyError:
    do_correct()
</snippet></ROW><ROW><id>10647539</id><snippet>if user_input &gt; 100</snippet></ROW><ROW><id>10647539</id><snippet>default</snippet></ROW><ROW><id>10647539</id><snippet>functions.get(user_input,do_correct)()
</snippet></ROW><ROW><id>10647578</id><snippet>chdir</snippet></ROW><ROW><id>10647578</id><snippet>cd /foo/bar/zoo</snippet></ROW><ROW><id>10647578</id><snippet>git</snippet></ROW><ROW><id>10647578</id><snippet>cd /foo/bar/zoo &amp;&amp; /usr/bin/git log --since</snippet></ROW><ROW><id>10647669</id><snippet>ajax.post</snippet></ROW><ROW><id>10647669</id><snippet>postgis</snippet></ROW><ROW><id>10648065</id><snippet>mod2.py</snippet></ROW><ROW><id>10648065</id><snippet>some_app</snippet></ROW><ROW><id>10648065</id><snippet>import mod1</snippet></ROW><ROW><id>10648065</id><snippet>some_app/__init__.py</snippet></ROW><ROW><id>10648065</id><snippet>from . import *</snippet></ROW><ROW><id>10648439</id><snippet>import random

def interleave(*args):
  iters = map(iter, args)
  while iters:
    it = random.choice(iters)
    try:
      yield next(it)
    except StopIteration:
      iters.remove(it)

print list(interleave(xrange(1, 5), xrange(5, 10), xrange(10, 15)))
</snippet></ROW><ROW><id>10648554</id><snippet>&gt;&gt;&gt;mystring = "Description: Mary had a little lamb Description: "
&gt;&gt;&gt;print mystring.replace("Description: ","",1)

"Mary had a little lamb Description: "
</snippet></ROW><ROW><id>10648554</id><snippet>"Description: "
</snippet></ROW><ROW><id>10648554</id><snippet>&gt;&gt;&gt;import re
&gt;&gt;&gt;re.sub("Description: ","",mystring,count=1)
'Mary had a little lamb Description: '
</snippet></ROW><ROW><id>10648697</id><snippet>for i, j in zip(val, reversed(val)):
    if i != j:
        print 'no'
        break
else:
    print 'yes'
</snippet></ROW><ROW><id>10648697</id><snippet>else</snippet></ROW><ROW><id>10648697</id><snippet>for</snippet></ROW><ROW><id>10648697</id><snippet>print 'yes' if list(val) == list(reversed(val)) else 'no'
</snippet></ROW><ROW><id>10648909</id><snippet>include</snippet></ROW><ROW><id>10648909</id><snippet>template.txt</snippet></ROW><ROW><id>10648909</id><snippet>path/to/docutils/writers/html4css1/</snippet></ROW><ROW><id>10648909</id><snippet>rst_prolog</snippet></ROW><ROW><id>10648909</id><snippet>rst_prolog</snippet></ROW><ROW><id>10648972</id><snippet>class UserProfile(models.Model): 
        user = models.OneToOneField(User)   
        team_name = models.ForeignKey(Team_Profile, default=0) 
</snippet></ROW><ROW><id>10649129</id><snippet>import json
css = json.loads(request.POST['q'])
</snippet></ROW><ROW><id>10649225</id><snippet>__future__</snippet></ROW><ROW><id>10649225</id><snippet>from __future__ import division</snippet></ROW><ROW><id>10649225</id><snippet>__future__</snippet></ROW><ROW><id>10649225</id><snippet>__future__</snippet></ROW><ROW><id>10649733</id><snippet># Read the whole "second file" into a set X.
with open('foo') as fp:
    names = set(fp)

# Read the "first" file line by line.
with open('bar') as fp:
    for line in fp:

        # For each line, extract the part before the comma.
        name = line.split(',')[0]

        # If this part is in the set X, print whatever is desired.
        if name in names:
             print line
</snippet></ROW><ROW><id>10650093</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>10650093</id><snippet>SocketServer.ThreadingMixIn</snippet></ROW><ROW><id>10650093</id><snippet>do_GET</snippet></ROW><ROW><id>10650093</id><snippet>do_CONNECT</snippet></ROW><ROW><id>10650093</id><snippet>do_POST</snippet></ROW><ROW><id>10650093</id><snippet>do_HEAD</snippet></ROW><ROW><id>10650093</id><snippet>self.path</snippet></ROW><ROW><id>10650093</id><snippet>requests</snippet></ROW><ROW><id>10650134</id><snippet>EggAdmin</snippet></ROW><ROW><id>10650134</id><snippet>queryset</snippet></ROW><ROW><id>10650134</id><snippet>class EggAdmin(admin.ModelAdmin):
    ...
    def queryset(self, request):
        kitchen = request.user.superprofile_set.get().my_kitchen #get related users kitchen
        qs = super(EggAdmin, self).queryset(request) #call original queryset method that you are overriding
        return qs.filter(kitchens=kitchen) #apply your filter
</snippet></ROW><ROW><id>10650134</id><snippet>eggs_unlocked</snippet></ROW><ROW><id>10650134</id><snippet>import re
# grab the superprofile id from the url
sup_pro_rgx=re.compile(r'(\d+)')
sup_pro = sup_pro_rgx.findall(request.META['REQUEST_URI'])[0]
# I know this is really the ugliest way to do this, but there is no other way (at least as far as i know) to do this


class SuperProfileAdmin(admin.ModelAdmin):
...
def formfield_for_manytomany(self, db_field, request, **kwargs):
    if db_field.name == "eggs_unlocked":
        my_kitchen = self.get_object(request, object_id=sup_pro).my_kitchen
        kwargs["queryset"] = Egg.objects.filter(kitchen=my_kitchen)
    return super(SuperProfileAdmin, self).formfield_for_manytomany(db_field, request, **kwargs)
</snippet></ROW><ROW><id>10650313</id><snippet>python yourpackage/setup.py extract_messages</snippet></ROW><ROW><id>10650313</id><snippet>lingua</snippet></ROW><ROW><id>10650313</id><snippet>message_extractors</snippet></ROW><ROW><id>10650313</id><snippet>... 
from babel.messages import frontend as babel
...


setup(...
    setup_requires=['lingua'],
    cmdclass = dict(
        compile_catalog=babel.compile_catalog,
        extract_messages=babel.extract_messages,
        init_catalog=babel.init_catalog,
        update_catalog=babel.update_catalog,
    ),
    message_extractors = {
        'path/in/package': [
            ('**.py',                'lingua_python', None),
            ('**/templates/**.pt',   'lingua_xml', None),
        ],
    },
    ...
)
</snippet></ROW><ROW><id>10650313</id><snippet>--mapping-file</snippet></ROW><ROW><id>10650313</id><snippet>message_extractors</snippet></ROW><ROW><id>10650313</id><snippet>[method fileglob]</snippet></ROW><ROW><id>10650313</id><snippet>[lingua_python **.py]

[lingua_xml **/templates/**.pt]
</snippet></ROW><ROW><id>10650313</id><snippet>option = value</snippet></ROW><ROW><id>10650313</id><snippet>packages</snippet></ROW><ROW><id>10650469</id><snippet>u</snippet></ROW><ROW><id>10650469</id><snippet>a = u'ÀÁÂÃÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜ'</snippet></ROW><ROW><id>10650469</id><snippet>u</snippet></ROW><ROW><id>10650469</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>10650469</id><snippet>utf-8</snippet></ROW><ROW><id>10650469</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>10650469</id><snippet>ascii</snippet></ROW><ROW><id>10650469</id><snippet>'ÀÁÂÃ'</snippet></ROW><ROW><id>10650469</id><snippet>'\xc0\xc1\xc2\xc3'</snippet></ROW><ROW><id>10650469</id><snippet>__future__</snippet></ROW><ROW><id>10650469</id><snippet>from __future__ import unicode_literals

from itertools import chain
a = "ÀÁÂÃÈÉÊËÌÍÎÏÒÓÔÕÖÙÚÛÜ"
b = "àáâãäèéçêëìíîïòóôõöùúûüÿ"

print ''.join(chain(*zip(a,b)))

&gt;&gt;&gt; ÀàÁáÂâÃãÈäÉèÊéËçÌêÍëÎìÏíÒîÓïÔòÕóÖôÙõÚöÛùÜú
</snippet></ROW><ROW><id>10650835</id><snippet>def enumdict():
    a = defaultdict(lambda : len(a))
    return a

b = defaultdict(enumdict)
</snippet></ROW><ROW><id>10650995</id><snippet>import os
import sys
import jinja2   
# path to lib direcotory
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'lib'))
</snippet></ROW><ROW><id>10650995</id><snippet>import fix_path # has to be first.
import wtforms
</snippet></ROW><ROW><id>10651243</id><snippet>    from scrapy.contrib.spiders import CrawlSpider, Rule
    from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
    from scrapy.selector import HtmlXPathSelector
    from scrapy.http import Request

    from selenium import selenium

    class SeleniumSpider(CrawlSpider):
name = "SeleniumSpider"
start_urls = ["http://www.domain.com"]

rules = (
    Rule(SgmlLinkExtractor(allow=('\.html', )),
    callback='parse_page',follow=True),
)

def __init__(self):
    CrawlSpider.__init__(self)
    self.verificationErrors = []
    self.selenium = selenium("localhost", 4444, "*chrome", "http://www.domain.com")
    self.selenium.start()

def __del__(self):
    self.selenium.stop()
    print self.verificationErrors
    CrawlSpider.__del__(self)

def parse_page(self, response):
    item = Item()

    hxs = HtmlXPathSelector(response)
    #Do some XPath selection with Scrapy
    hxs.select('//div').extract()

    sel = self.selenium
    sel.open(response.url)

    #Wait for javscript to load in Selenium
    time.sleep(2.5)

    #Do some crawling of javascript created content with Selenium
    sel.get_text("//div")
    yield item

# Snippet imported from snippets.scrapy.org (which no longer works)
</snippet></ROW><ROW><id>10651257</id><snippet>SimpleHTTPServer.SimpleHTTPRequestHandler</snippet></ROW><ROW><id>10651257</id><snippet>log_message</snippet></ROW><ROW><id>10651257</id><snippet>def log_message(self, format, *args):
    sys.stderr.write("%s - - [%s] %s\n" %
                     (self.address_string(),
                      self.log_date_time_string(),
                      format%args))
</snippet></ROW><ROW><id>10651257</id><snippet>pass</snippet></ROW><ROW><id>10651257</id><snippet>log_request</snippet></ROW><ROW><id>10651257</id><snippet>log_error</snippet></ROW><ROW><id>10651257</id><snippet>def log_request(self, code='-', size='-'):
    self.log_message('"%s" %s %s',
                     self.requestline, str(code), str(size))

def log_error(self, format, *args):
    self.log_message(format, *args)
</snippet></ROW><ROW><id>10651524</id><snippet>import networkx
import itertools

def complete_graph_from_list(L, create_using=None):
    G=networkx.empty_graph(len(L),create_using)
    if n&gt;1:
        if G.is_directed():
            edges=itertools.permutations(L,2)
        else:
            edges=itertools.combinations(L,2)
        G.add_edges_from(edges)
    return G

S = complete_graph_from_list(["a", "b", "c", "d"])
print S.edges()
</snippet></ROW><ROW><id>10651593</id><snippet>from itertools import groupby

def family_key(person):
    return person.HH_ID

persons.sort(key=family_key)
for hh_id, family in groupby(persons, key=family_key):
    for person in family:
        # do your thing
</snippet></ROW><ROW><id>10651593</id><snippet>groupby</snippet></ROW><ROW><id>10651593</id><snippet>(key, group_iter)</snippet></ROW><ROW><id>10651593</id><snippet>group_iter</snippet></ROW><ROW><id>10651894</id><snippet>hand = ["3D", "4D", "4C", "5D", "JS", "JC"]

from itertools import groupby 

def generate_plays(hand):
    plays = []
    for rank,suit in groupby(hand, lambda f: f[0]):
        plays.append(list(suit))
    for card in hand:
        if [card] not in plays:       #redundant due to list nesting
            plays.append([card])       #problematic code in question
    return plays

print generate_plays(hand)
</snippet></ROW><ROW><id>10652246</id><snippet>response</snippet></ROW><ROW><id>10652246</id><snippet>flask.make_response</snippet></ROW><ROW><id>10652246</id><snippet>from flask import Flask
app = Flask(__name__)
import sys
import time
import flask

@app.route('/')
def generated_response_example():
    n = 20
    def response_generator():
        for i in range(n):
            print &gt;&gt;sys.stderr, i
            yield "%03d\n" % i
            time.sleep(.2)

    print &gt;&gt;sys.stderr, "returning generator..."
    gen = response_generator()

    # the call to flask.make_response is not really needed as it happens imlicitly 
    # if you return a tuple.
    return flask.make_response(gen ,"200 OK", {'Content-length': 4*n})

if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>10652246</id><snippet>wget -qO - localhost:5000</snippet></ROW><ROW><id>10652583</id><snippet>class Person(db.Model):
    name = db.StringProperty()
    age = db.IntegerProperty(indexed=True)
</snippet></ROW><ROW><id>10652608</id><snippet>searchdir</snippet></ROW><ROW><id>10652608</id><snippet>import os

searchdir = r'C:\blabla'
searchstring = 'import sys'

def found_in_file(fname, searchstring):
    with open(fname) as infp:
        for line in infp:
            if searchstring in line:
                return True
        return False

with open('found.txt', 'w') as outfp:
    count = 0
    search_count = 0
    for root, dirs, files in os.walk(searchdir):
        for name in files:
            (base, ext) = os.path.splitext(name)
            if ext in ('.txt', '.py'):
                count += 1

            full_name = os.path.join(root, name)
            if found_in_file(full_name, searchstring):
               outfp.write(full_name + '\n')
               search_count += 1

print 'total number of files found %d' % count
print 'number of files with search string %d' % search_count
</snippet></ROW><ROW><id>10652608</id><snippet>with</snippet></ROW><ROW><id>10652636</id><snippet>lv_temp2 = LV.objects.all().order_by('id')
lv_temp4 = []
for lv_temp3 in lv_temp2:
    lv_temp4.append(lv_temp3.id)
</snippet></ROW><ROW><id>10652636</id><snippet>lv_temp4 = [i.id for i in LV.objects.all().order_by('id')]
</snippet></ROW><ROW><id>10652636</id><snippet>lv_printed_ver = lv_temp4.index(lv_temp.id)
</snippet></ROW><ROW><id>10652680</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>10652680</id><snippet>import unittest
import datetime
from mock import patch

class SomeTestCase(unittest.TestCase):
    def setUp(self):
        self.time = datetime.datetime(2012, 5, 18)
        class fakedatetime(datetime.datetime):
            @classmethod
            def now(cls):
                return self.time
        patcher = patch('datetime.datetime', fakedatetime)
        self.addCleanup(patcher.stop)
        patcher.start()

    def test_something(self):
        self.assertEqual(datetime.datetime.now(), datetime.datetime(2012, 5, 18))
        self.time = datetime.datetime(2012, 5, 20)
        self.assertEqual(datetime.datetime.now(), datetime.datetime(2012, 5, 20))
</snippet></ROW><ROW><id>10652680</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>10652818</id><snippet>author = 'Мирослав Николић'
print author.decode('utf8') # Мирослав Николић
</snippet></ROW><ROW><id>10652818</id><snippet>&lt;meta charset="utf-8"&gt;. 
</snippet></ROW><ROW><id>10652913</id><snippet>f</snippet></ROW><ROW><id>10652913</id><snippet>f</snippet></ROW><ROW><id>10652913</id><snippet>t</snippet></ROW><ROW><id>10652913</id><snippet>import math
from scipy.optimize import fsolve

class Fred(object):
    M0 = 5.0
    n = 5

    def f(self, x, t):
        return (x - math.sin(x) -self.M0 - self.n*t)

    def test(self, t):
        return fsolve(self.f, 1, args=(t))
</snippet></ROW><ROW><id>10652913</id><snippet>M0</snippet></ROW><ROW><id>10652913</id><snippet>n</snippet></ROW><ROW><id>10652913</id><snippet>&gt;&gt;&gt; fred = Fred()
&gt;&gt;&gt; fred.test(10)
array([ 54.25204733])
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; [fred.f(x, 10) for x in numpy.linspace(54, 55, 10)]
[-0.44121095114838482, -0.24158955381855662, -0.049951288133726734,
 0.13271070588400136, 0.30551399241764443, 0.46769772292130796, 
 0.61863201965219616, 0.75782574394219182, 0.88493255340251409, 
 0.99975517335862207]
</snippet></ROW><ROW><id>10653314</id><snippet>copy</snippet></ROW><ROW><id>10653314</id><snippet>set.copy()</snippet></ROW><ROW><id>10653430</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; match_dict = {'hello(here)': 'here',
...                 'Hello   (Hi)': 'Hi',
...                 "'dfsfds Hello (Hi) fdfd' Hello (Yes)": 'Yes',
...                 "Hello ('hi)xx')": "hi)xx",
...                 "Hello  ('Hi')": 'Hi'}
&gt;&gt;&gt; for s, goal in match_dict.iteritems():
...     print "INPUT: %s" % s
...     print "GOAL: %s" % goal
...     m = re.sub(r"(?&lt;!\()'[^']+'", '', s, flags=re.I|re.M)
...     paren_quotes = re.findall(r"hello\s*\('([^']+)'\)", m, flags=re.I|re.M)
...     output = paren_quotes if paren_quotes else []
...     m = re.sub(r"hello\s*\('[^']+'\)", '', m, flags=re.I|re.M)
...     paren_matches = re.findall(r"hello\s*\(([^)]+)\)", m, flags=re.I|re.M)
...     if paren_matches:
...         output.extend(paren_matches)
...     print 'OUTPUT: %s\n' % output
... 
INPUT: 'dfsfds Hello (Hi) fdfd' Hello (Yes)
GOAL: Yes
OUTPUT: ['Yes']

INPUT: Hello  ('Hi')
GOAL: Hi
OUTPUT: ['Hi']

INPUT: hello(here)
GOAL: here
OUTPUT: ['here']

INPUT: Hello   (Hi)
GOAL: Hi
OUTPUT: ['Hi']

INPUT: Hello ('hi)xx')
GOAL: hi)xx
OUTPUT: ['hi)xx']
</snippet></ROW><ROW><id>10653472</id><snippet>sys.exit()</snippet></ROW><ROW><id>10653472</id><snippet>SystemExit</snippet></ROW><ROW><id>10653472</id><snippet>sys.exit()</snippet></ROW><ROW><id>10653472</id><snippet>os._exit()</snippet></ROW><ROW><id>10653474</id><snippet>ffffffff # big endian
ffffffff # little endian
</snippet></ROW><ROW><id>10653474</id><snippet>0x01020304</snippet></ROW><ROW><id>10653474</id><snippet>0x0d0aff00</snippet></ROW><ROW><id>10653474</id><snippet>0d0a</snippet></ROW><ROW><id>10653474</id><snippet>ff</snippet></ROW><ROW><id>10653474</id><snippet>00</snippet></ROW><ROW><id>10653574</id><snippet>/proc/[pid]/</snippet></ROW><ROW><id>10653574</id><snippet>/proc/[pid]/stat</snippet></ROW><ROW><id>10653574</id><snippet>/proc/[pid]/task/[tid]</snippet></ROW><ROW><id>10653574</id><snippet>open()</snippet></ROW><ROW><id>10653574</id><snippet>.read()</snippet></ROW><ROW><id>10653574</id><snippet>/proc</snippet></ROW><ROW><id>10653995</id><snippet>getValue</snippet></ROW><ROW><id>10653995</id><snippet>valueChanged(int)</snippet></ROW><ROW><id>10653995</id><snippet>getValue</snippet></ROW><ROW><id>10653995</id><snippet>getValue</snippet></ROW><ROW><id>10653995</id><snippet>self.connect(self.dial, SIGNAL("valueChanged(int)"), self.dial_value_changed)
self.connect(self.spinbox, SIGNAL("valueChanged(int)"),self.spinbox_value_changed)

def dial_value_changed(self, value):
    self.spinbox.setValue(value)
    self.getValue_dial(value)

def spinbox_value_changed(self, value):
    self.dial.setValue(value)
    self.getValue_spinbox(value)

def getValue_dial(self, value):
        print value

def getValue_spinbox(self, value):
        print value
</snippet></ROW><ROW><id>10653995</id><snippet>self.connect(self.dial, SIGNAL("valueChanged(int)"), self.dial_value_changed)
self.connect(self.spinbox, SIGNAL("valueChanged(int)"),self.spinbox_value_changed)
</snippet></ROW><ROW><id>10653995</id><snippet>self.dial.valueChanged.connect(self.dial_value_changed)
self.spinbox.valueChanged.connect(self.spinbox_value_changed)
</snippet></ROW><ROW><id>10654285</id><snippet>ast</snippet></ROW><ROW><id>10654285</id><snippet>ast.NodeVisitor</snippet></ROW><ROW><id>10654285</id><snippet>NodeVisitor</snippet></ROW><ROW><id>10654285</id><snippet>import ast

allowed_functions = set([
    #math library
    'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh',
    'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf',
    'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod',
    'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp',
    'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians',
    'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc',
    #builtins
    'abs', 'max', 'min', 'range', 'xrange'
    ])

allowed_node_types = set([
    #Meta
    'Module', 'Assign', 'Expr',
    #Control
    'For', 'If', 'Else',
    #Data
    'Store', 'Load', 'AugAssign', 'Subscript',
    #Datatypes
    'Num', 'Tuple', 'List',
    #Operations
    'BinOp', 'Add', 'Sub', 'Mult', 'Div', 'Mod', 'Compare'
    ])

safe_names = set([
    'True', 'False', 'None'
    ])


class SyntaxChecker(ast.NodeVisitor):

    def check(self, syntax):
        tree = ast.parse(syntax)
        self.passed=True
        self.visit(tree)

    def visit_Call(self, node):
        if node.func.id not in allowed_functions:
            raise SyntaxError("%s is not an allowed function!"%node.func.id)
        else:
            ast.NodeVisitor.generic_visit(self, node)

    def visit_Name(self, node):
        try:
            eval(node.id)
        except NameError:
            ast.NodeVisitor.generic_visit(self, node)
        else:
            if node.id not in safe_names and node.id not in allowed_functions:
                raise SyntaxError("%s is a reserved name!"%node.id)
            else:
                ast.NodeVisitor.generic_visit(self, node)

    def generic_visit(self, node):
        if type(node).__name__ not in allowed_node_types:
            raise SyntaxError("%s is not allowed!"%type(node).__name__)
        else:
            ast.NodeVisitor.generic_visit(self, node)

if __name__ == '__main__':
    x = SyntaxChecker()
    while True:
        try:
            x.check(raw_input())
        except Exception as e:
            print e
</snippet></ROW><ROW><id>10654465</id><snippet>if isinstance(x[i], basestring) and x[i] == 'forward'
</snippet></ROW><ROW><id>10654465</id><snippet>if str(x[i]) == 'forward'
</snippet></ROW><ROW><id>10654465</id><snippet>for .. in</snippet></ROW><ROW><id>10654465</id><snippet>for elem in x:
    if isinstance(elem, basestring) and elem == 'forward':
        print 'Check'
</snippet></ROW><ROW><id>10654465</id><snippet>i</snippet></ROW><ROW><id>10654465</id><snippet>for i, elem in enumerate(x):
</snippet></ROW><ROW><id>10654624</id><snippet>def add_to_db(name_or_names):
    import types
    if isinstance(name_or_names, types.StringTypes):
        name_or_names = [name_or_names]
    try:
        for name in name_or_names:
            add_name(name)
        commit_to_db()
    except TypeError:
            # we didn't get a string OR a list &gt;:(
</snippet></ROW><ROW><id>10654737</id><snippet>&gt;&gt;&gt; print Revision[0:Revision.rfind('\\')] + "\1Config.ini"
</snippet></ROW><ROW><id>10654737</id><snippet>os.path.join</snippet></ROW><ROW><id>10654737</id><snippet>import os
filename = os.path.join(Revision[0:Revision.rfind('\\')], "Config.ini")
config.read(filename)
</snippet></ROW><ROW><id>10654737</id><snippet>Type</snippet></ROW><ROW><id>10654737</id><snippet>type</snippet></ROW><ROW><id>10654737</id><snippet>Type = config.get("myvars", "Type")
</snippet></ROW><ROW><id>10654737</id><snippet>&gt;&gt;&gt; a = ConfigParser.ConfigParser()
&gt;&gt;&gt; a.read("E:/Documents/2012/config.test") # where config.test is the example from the documentation
['E:/Documents/2012/config.test']
&gt;&gt;&gt; a.sections()
['My Section']
&gt;&gt;&gt; a.items(a.sections()[0])
[('foodir', 'frob/whatever'),
 ('dir', 'frob'),
 ('long', 'this value continues\nin the next line')]
</snippet></ROW><ROW><id>10655356</id><snippet>from django import forms
from registration.forms import RegistrationForm
from django.utils.translation import ugettext_lazy as _
from registration.models import RegistrationProfile

attrs_dict = { 'class': 'required' }

class RegistrationFormEx(RegistrationForm):
  cell_phone = forms.CharField(widget=forms.TextInput(attrs=attrs_dict))
</snippet></ROW><ROW><id>10655356</id><snippet>import hashlib
import hmac
from django.db import models
from django.contrib.auth.models import User
from registration.signals import user_registered
from userInfo.forms import RegistrationFormEx


class ExProfile(models.Model):
   user = models.ForeignKey(User, unique=True)
   cell_phone = models.CharField(max_length=200, blank=True)
   api_key=      models.CharField(max_length=200, blank=True)

   def user_created(sender, user, request, **kwargs):
      form = RegistrationFormEx(data=request.POST)
      digest = hmac.new(str(request.POST['password1']), str(request.POST['username']), hashlib.sha256).hexdigest()
      new_user = User.objects.get(username=request.POST['username'])
      //here I have added api_key hash algo, you can change it
      new_profile = ExProfile(user=new_user,cell_phone=request.POST['cell_phone'],api_key=digest)
     new_profile.save()
     return new_user

  user_registered.connect(user_created)
</snippet></ROW><ROW><id>10655356</id><snippet>from django.conf.urls import patterns, include, url
import registration.backends.default.urls as regUrls
from registration.views import register
from userInfo.forms import  RegistrationFormEx


urlpatterns = patterns('',
url(r'^accounts/register/$', register, {'backend': 'registration.backends.default.DefaultBackend','form_class': RegistrationFormEx}, name='registration_register'),
(r'^accounts/', include('registration.backends.default.urls'))

) 
</snippet></ROW><ROW><id>10655459</id><snippet>ndindex</snippet></ROW><ROW><id>10655459</id><snippet>&gt;&gt;&gt; list(numpy.broadcast(*numpy.ix_(x, y, z)))
[(0.0, 0.0, 0.0),
 (0.0, 0.0, 1.0),
 (0.0, 0.5, 0.0),
 (0.0, 0.5, 1.0),
 (0.0, 1.0, 0.0),
 (0.0, 1.0, 1.0),
 (1.0, 0.0, 0.0),
 (1.0, 0.0, 1.0),
 (1.0, 0.5, 0.0),
 (1.0, 0.5, 1.0),
 (1.0, 1.0, 0.0),
 (1.0, 1.0, 1.0)]
</snippet></ROW><ROW><id>10655459</id><snippet>3</snippet></ROW><ROW><id>10655459</id><snippet>&gt;&gt;&gt; numpy.array(list(numpy.broadcast(*numpy.ix_(x, y, z)))).reshape((2, 3, 2, 3))
array([[[[ 0. ,  0. ,  0. ],
         [ 0. ,  0. ,  1. ]],

        [[ 0. ,  0.5,  0. ],
         [ 0. ,  0.5,  1. ]],

        [[ 0. ,  1. ,  0. ],
         [ 0. ,  1. ,  1. ]]],


       [[[ 1. ,  0. ,  0. ],
         [ 1. ,  0. ,  1. ]],

        [[ 1. ,  0.5,  0. ],
         [ 1. ,  0.5,  1. ]],

        [[ 1. ,  1. ,  0. ],
         [ 1. ,  1. ,  1. ]]]])
</snippet></ROW><ROW><id>10655532</id><snippet>little_pie</snippet></ROW><ROW><id>10655532</id><snippet>from pylab import *
import math
import numpy as np

def little_pie(breakdown,location,size):
    breakdown = [0] + list(np.cumsum(breakdown)* 1.0 / sum(breakdown))
    for i in xrange(len(breakdown)-1):
        x = [0] + np.cos(np.linspace(2 * math.pi * breakdown[i], 2 * math.pi *    
                          breakdown[i+1], 20)).tolist()
        y = [0] + np.sin(np.linspace(2 * math.pi * breakdown[i], 2 * math.pi * 
                          breakdown[i+1], 20)).tolist()
        xy = zip(x,y)
        scatter( location[0], location[1], marker=(xy,0), s=size, facecolor=
               ['gold','yellow', 'orange', 'red','purple','indigo','violet'][i%7])

figure(1, figsize=(6,6))

little_pie([10,3,7],(1,1),600)
little_pie([10,27,4,8,4,5,6,17,33],(-1,1),800)

fracs = [10, 8, 7, 10]
explode=(0, 0, 0.1, 0)
pie(fracs, explode=explode, autopct='%1.1f%%')
show()
</snippet></ROW><ROW><id>10655608</id><snippet>defaultdict</snippet></ROW><ROW><id>10655608</id><snippet>from collections import defaultdict
my_list = defaultdict(list)
for i in investments:
   my_list[i.financial_institution].append({ ... })
</snippet></ROW><ROW><id>10655608</id><snippet>{% for i in my_list.iteritems %}
   Institution : {{ i.0 }}
   {% for z in i|slice:"1:" %}
     Total Items for {{ i.0 }} : {{ z|length }}
     {% for d in z }}
        {{ d.fi_address1 }}
        ....
     {% endfor %}
   {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>10655608</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['hello'].append({1:'One', 2:'Two'})
&gt;&gt;&gt; for i in d.iteritems():
...    print i[0]
...    for z in i[1:]:
...     print z
... 
hello
[{1: 'One', 2: 'Two'}]
</snippet></ROW><ROW><id>10655820</id><snippet>'^web_app/$'</snippet></ROW><ROW><id>10655820</id><snippet>APPEND_SLASH=True</snippet></ROW><ROW><id>10655820</id><snippet>"http://127.0.0.1:8000/web_app/"</snippet></ROW><ROW><id>10655820</id><snippet>/web_app</snippet></ROW><ROW><id>10655820</id><snippet>/web_app/</snippet></ROW><ROW><id>10655820</id><snippet>POST</snippet></ROW><ROW><id>10655820</id><snippet>'Content-Type':'application/json'</snippet></ROW><ROW><id>10655820</id><snippet>request.body</snippet></ROW><ROW><id>10655820</id><snippet>request.POST</snippet></ROW><ROW><id>10655820</id><snippet>application/json</snippet></ROW><ROW><id>10655820</id><snippet>Content-Type</snippet></ROW><ROW><id>10655874</id><snippet>re.split</snippet></ROW><ROW><id>10655874</id><snippet>&gt;&gt;&gt; def multisplit(s, delims):
...     pos = 0
...     for i, c in enumerate(s):
...         if c in delims:
...             yield s[pos:i]
...             pos = i + 1
...     yield s[pos:]
...
&gt;&gt;&gt; list(multisplit('hello there[my]friend', ' []'))
['hello', 'there', 'my', 'friend']
</snippet></ROW><ROW><id>10656031</id><snippet>import multiprocessing

class MyProcess(multiprocessing.Process):

    def run(self):
        # new process context
</snippet></ROW><ROW><id>10656686</id><snippet>import codecs

def strip_it_good(file):
    with codecs.open(file, "r", "utf-8-sig") as f:
        for line in f:
            yield line.strip()
</snippet></ROW><ROW><id>10656760</id><snippet>dictionary</snippet></ROW><ROW><id>10656760</id><snippet>lis=[('MSFT', '$39.458', '1,000'), ('AAPL', '$638.416', '200'), ('FOSL', '$52.033', '1,000'), ('OCZ', '$5.26', '34,480'), ('OCZ', '$5.1571', '5,300')]

dic={}
for x in lis:
    if x[0] not in dic:
     price=float(x[1].strip('$'))
     nos=int("".join(x[2].split(',')))
     #print(nos)
     dic[x[0]]=[price,nos]
    else:
     price=float(x[1].strip('$'))
     nos=int("".join(x[2].split(',')))
     dic[x[0]][1]+=nos
     dic[x[0]][0]=(dic[x[0]][0]+price)/2
print(dic)    
</snippet></ROW><ROW><id>10656760</id><snippet>{'AAPL': [638.416, 200], 'OCZ': [5.20855, 39780], 'FOSL': [52.033, 1000], 'MSFT': [39.458, 1000]}
</snippet></ROW><ROW><id>10656788</id><snippet>subunit2junitxml</snippet></ROW><ROW><id>10656788</id><snippet>trial --reporter=subunit | subunit2junitxml --forward --output-to=junitxml-result.xml
</snippet></ROW><ROW><id>10657000</id><snippet>"{0}{1}".format(SOURCE,"qlmtconvertf qlmt") == '/home/myusername/lapw/Sourceqlmtconvertf qlmt'</snippet></ROW><ROW><id>10657000</id><snippet>"{0}/{1}".format(SOURCE,"qlmtconvertf qlmt") == '/home/myusername/lapw/Source/qlmtconvertf qlmt'</snippet></ROW><ROW><id>10657000</id><snippet>os.path.join</snippet></ROW><ROW><id>10657000</id><snippet>import os.path

executable = os.path.join(SOURCE, 'qlmtconvertf')
args = ['qlmt']

subprocess.Popen(executable+args, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>10657011</id><snippet>neighbors</snippet></ROW><ROW><id>10657011</id><snippet>import numpy as np
from scipy.spatial import Delaunay

points = np.random.rand(30, 2)
tri = Delaunay(points)

p = tri.points[tri.vertices]

# Triangle vertices
A = p[:,0,:].T
B = p[:,1,:].T
C = p[:,2,:].T

# See http://en.wikipedia.org/wiki/Circumscribed_circle#Circumscribed_circles_of_triangles
# The following is just a direct transcription of the formula there
a = A - C
b = B - C

def dot2(u, v):
    return u[0]*v[0] + u[1]*v[1]

def cross2(u, v, w):
    """u x (v x w)"""
    return dot2(u, w)*v - dot2(u, v)*w

def ncross2(u, v):
    """|| u x v ||^2"""
    return sq2(u)*sq2(v) - dot2(u, v)**2

def sq2(u):
    return dot2(u, u)

cc = cross2(sq2(a) * b - sq2(b) * a, a, b) / (2*ncross2(a, b)) + C

# Grab the Voronoi edges
vc = cc[:,tri.neighbors]
vc[:,tri.neighbors == -1] = np.nan # edges at infinity, plotting those would need more work...

lines = []
lines.extend(zip(cc.T, vc[:,:,0].T))
lines.extend(zip(cc.T, vc[:,:,1].T))
lines.extend(zip(cc.T, vc[:,:,2].T))

# Plot it
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

lines = LineCollection(lines, edgecolor='k')

plt.hold(1)
plt.plot(points[:,0], points[:,1], '.')
plt.plot(cc[0], cc[1], '*')
plt.gca().add_collection(lines)
plt.axis('equal')
plt.xlim(-0.1, 1.1)
plt.ylim(-0.1, 1.1)
plt.show()
</snippet></ROW><ROW><id>10657107</id><snippet>Two</snippet></ROW><ROW><id>10657107</id><snippet>name()</snippet></ROW><ROW><id>10657107</id><snippet>Two.name</snippet></ROW><ROW><id>10657107</id><snippet>Polly = Two()
Two.name(Polly)
</snippet></ROW><ROW><id>10657107</id><snippet>__init__()</snippet></ROW><ROW><id>10657107</id><snippet>name</snippet></ROW><ROW><id>10657107</id><snippet>Two</snippet></ROW><ROW><id>10657107</id><snippet>name</snippet></ROW><ROW><id>10657107</id><snippet>Polly = Two()      # Polly.name is now the string 'Polly'
Polly.name()       # this is equivalent to 'Polly'()
</snippet></ROW><ROW><id>10657300</id><snippet>local_logger.propagate = False
</snippet></ROW><ROW><id>10657392</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "num1 1 num2 5"
&gt;&gt;&gt; re.sub(r"num1 (.*?) num2 (.*?)", r"1 \1 2 \2", s)
'1 1 2 5'
</snippet></ROW><ROW><id>10657392</id><snippet>&gt;&gt;&gt; re.sub("num1 (.*?) num2 (.*?)", "1 \\1 2 \\2", s)
'1 1 2 5'
</snippet></ROW><ROW><id>10657449</id><snippet>Image.open</snippet></ROW><ROW><id>10657449</id><snippet>size</snippet></ROW><ROW><id>10657449</id><snippet>Image.new</snippet></ROW><ROW><id>10657449</id><snippet>paste</snippet></ROW><ROW><id>10657854</id><snippet>s.sort()</snippet></ROW><ROW><id>10657854</id><snippet>None</snippet></ROW><ROW><id>10657854</id><snippet>sorted(s)</snippet></ROW><ROW><id>10657854</id><snippet>&gt;&gt;&gt; s = [1,3,2]
&gt;&gt;&gt; repr(s.sort())
'None'
&gt;&gt;&gt; repr(s)
'[1, 2, 3]'
&gt;&gt;&gt; repr(sorted(s))
'[1, 2, 3]'
</snippet></ROW><ROW><id>10658041</id><snippet>strptime</snippet></ROW><ROW><id>10658041</id><snippet>split</snippet></ROW><ROW><id>10658041</id><snippet>try/catch</snippet></ROW><ROW><id>10658044</id><snippet>csv</snippet></ROW><ROW><id>10658044</id><snippet>'Day,Event,Value'</snippet></ROW><ROW><id>10658044</id><snippet>generator expression</snippet></ROW><ROW><id>10658044</id><snippet>sum()</snippet></ROW><ROW><id>10658044</id><snippet>&gt;&gt;&gt; cr = csv.reader(open("file.csv","rb"))
&gt;&gt;&gt; cr.next()
&gt;&gt;&gt; print sum(int(x[2]) for x in cr)
1500
</snippet></ROW><ROW><id>10658395</id><snippet>charset</snippet></ROW><ROW><id>10658395</id><snippet>.connect()</snippet></ROW><ROW><id>10658395</id><snippet>SET NAMES utf8</snippet></ROW><ROW><id>10658482</id><snippet>userIn</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>setup</snippet></ROW><ROW><id>10658482</id><snippet>startSetup</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>command=self.startSetup</snippet></ROW><ROW><id>10658482</id><snippet>setupbtn</snippet></ROW><ROW><id>10658482</id><snippet>startSetup</snippet></ROW><ROW><id>10658482</id><snippet>self</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>self.userIn.get()</snippet></ROW><ROW><id>10658482</id><snippet>self.passIn.get()</snippet></ROW><ROW><id>10658482</id><snippet>setup</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>class setup(object):
    def __init__(self, username, userpass):
        self.userName = username
        self.userPass = userpass

    def startSetup(self):
        # as before
</snippet></ROW><ROW><id>10658482</id><snippet>setupGui</snippet></ROW><ROW><id>10658482</id><snippet>def dosetup(self):
    setup(self.userIn.get(), self.passIn.get()).startSetup()
</snippet></ROW><ROW><id>10658482</id><snippet>Button</snippet></ROW><ROW><id>10658482</id><snippet>command=self.dosetup</snippet></ROW><ROW><id>10658482</id><snippet>setup</snippet></ROW><ROW><id>10658482</id><snippet>startSetup</snippet></ROW><ROW><id>10658542</id><snippet>result = ''
for line in text.split('\n'):
    result += re.sub(r'([^,;.]{20,}.*)', r'\t\1', line) + '\n'
</snippet></ROW><ROW><id>10658542</id><snippet>authors = []
for line in text.split('\n'):
    names = re.split(r'\d+: |[^,;.]{20,}', line)[1]
    authors.append(re.findall(r'\w+,? [\w.]+', names))
</snippet></ROW><ROW><id>10658542</id><snippet>&gt;&gt;&gt; pprint.pprint(authors, width=200)
[['Aghasadeghi MR', 'Salmani AS', 'Sadat SM', 'Javadi F', 'Memarnejadian A', 'Vahabpour R', 'Zabihollahi R', 'Moshiri A', 'Siadat SD.'],
 ['Ramezani A', 'Banifazl M', 'Mohraz M', 'Rasoolinejad M', 'Aghakhani A'],
 ['Roohvand, F.', 'Kossari, N.'],
 ['Chinikar, S.', 'Javadi, A.', 'Ataei, B.', 'Shakeri, H.', 'Moradi, M.', 'Mostafavi, E.', 'Ghiasi, S.M.']]
</snippet></ROW><ROW><id>10658554</id><snippet>&gt;&gt;&gt; doc.xpath('//tr/td[contains(text(),"Street :")]/span/text()')
[' High St. ']
</snippet></ROW><ROW><id>10658830</id><snippet>pupil.txt</snippet></ROW><ROW><id>10658830</id><snippet>filename = open('pupil.txt', 'r')
contents = filename.read()
filename.close()

pupil = [name for name in contents.split('\n') if name]
</snippet></ROW><ROW><id>10658830</id><snippet>pupil.txt</snippet></ROW><ROW><id>10658830</id><snippet>try..except</snippet></ROW><ROW><id>10658830</id><snippet>pickle</snippet></ROW><ROW><id>10658993</id><snippet>pydoc.apropos</snippet></ROW><ROW><id>10658993</id><snippet>import pydoc
pydoc.apropos('Zip')
# output: zipimport - zipimport provides support for importing Python modules from Zip archives.
</snippet></ROW><ROW><id>10659028</id><snippet>/Developer/</snippet></ROW><ROW><id>10659028</id><snippet>sudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer</snippet></ROW><ROW><id>10659028</id><snippet>/Applications/Xcode.app/Contents/Developer/...</snippet></ROW><ROW><id>10659028</id><snippet>/Developer/...</snippet></ROW><ROW><id>10659028</id><snippet>$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append("/usr/local/lib/python2.7/site-packages")
&gt;&gt;&gt; from PIL import Image
</snippet></ROW><ROW><id>10659028</id><snippet>mkdir -p -v /Developer/SDKs
ln -s /Applications/Xcode.app/Contents/Developer/MacOSX10.6.sdk  /Developer/SDKs/MacOSX10.6.sdk
</snippet></ROW><ROW><id>10659028</id><snippet>brew remove pil
export SDKROOT=/Applications/Xcode.app/Contents/Developer/MacOSX10.6.sdk
brew install pil
</snippet></ROW><ROW><id>10659066</id><snippet>/Developer/usr/bin/../lib/gcc/powerpc-apple-darwin10</snippet></ROW><ROW><id>10659066</id><snippet>export ARCHFLAGS="-arch i386 -arch x86_64"</snippet></ROW><ROW><id>10659066</id><snippet>ppc</snippet></ROW><ROW><id>10659066</id><snippet>brew tap homebrew/dupes</snippet></ROW><ROW><id>10659066</id><snippet>brew install homebrew/dupes/apple-gcc42</snippet></ROW><ROW><id>10659066</id><snippet>brew install --use-llvm libxml2</snippet></ROW><ROW><id>10659073</id><snippet>%g</snippet></ROW><ROW><id>10659073</id><snippet>%g</snippet></ROW><ROW><id>10659073</id><snippet>1.00000
0.100000
0.0100000
0.00100000
0.000100000
1.00000e-5
1.00000e-6
...
</snippet></ROW><ROW><id>10659073</id><snippet>println</snippet></ROW><ROW><id>10659073</id><snippet>double</snippet></ROW><ROW><id>10659073</id><snippet>Double.toString()</snippet></ROW><ROW><id>10659073</id><snippet>Integer.toString(int)</snippet></ROW><ROW><id>10659073</id><snippet>1.0
0.01
0.0010
1.0E-4
9.999999999999999E-6
1.0E-6
...
</snippet></ROW><ROW><id>10659073</id><snippet>BigDecimal</snippet></ROW><ROW><id>10659073</id><snippet>stripTrailingZeros()</snippet></ROW><ROW><id>10659073</id><snippet>System.out.println(BigDecimal.TEN.pow( -4 ,MathContext.DECIMAL64).stripTrailingZeros());
</snippet></ROW><ROW><id>10659073</id><snippet>0.0001
</snippet></ROW><ROW><id>10659073</id><snippet>System.out.println(new BigDecimal(Math.pow(10,-4)).stripTrailingZeros());
</snippet></ROW><ROW><id>10659073</id><snippet>0.000100000000000000004792173602385929598312941379845142364501953125
</snippet></ROW><ROW><id>10659073</id><snippet>double</snippet></ROW><ROW><id>10659073</id><snippet>BigDecimal</snippet></ROW><ROW><id>10659073</id><snippet>%g</snippet></ROW><ROW><id>10659073</id><snippet>BigDecimal</snippet></ROW><ROW><id>10659073</id><snippet>System.out.println(new BigDecimal( String.format("%g", Math.pow(10,-4) ) ).stripTrailingZeros());
</snippet></ROW><ROW><id>10659291</id><snippet>thelist = [[1, 2, 3, 4, 5], 5, 6, 7, 8, 10, [9, 0, 1, 8]]
# Remove the 5 from the first inner list because it was found outside.
# Remove the 8 from the other inner list, because it was found outside.
expected_output =[[1, 2, 3, 4], 5, 6, 7, 8, 10, [9, 0, 1]]
</snippet></ROW><ROW><id>10659291</id><snippet>thelist = [[1, 2, 3, 4, 5], 5, 6, 7, 8, [9, 0, 1, 8]]

expected_output =[[1, 2, 3, 4], 5, 6, 7, 8, [9, 0, 1]]

removal_items = []

for item in thelist:
    if not isinstance(item, list):
        removal_items.append(item)

for item in thelist:
    if isinstance(item, list):
        for remove in removal_items:
            if remove in item:
                item.remove(remove)

print thelist

assert thelist == expected_output
</snippet></ROW><ROW><id>10659551</id><snippet>i.minutes</snippet></ROW><ROW><id>10659551</id><snippet>int</snippet></ROW><ROW><id>10659551</id><snippet>&gt;&gt;&gt; '-1' &gt; 0
True
</snippet></ROW><ROW><id>10659551</id><snippet>int(i.munites)</snippet></ROW><ROW><id>10659551</id><snippet>self.myForm = web.form.Form(
    web.form.Textbox('minutes',
        web.form.Validator("Minutes not correct", lambda x: int(x) &gt; 0)),
)
</snippet></ROW><ROW><id>10659553</id><snippet>import math
import operator

def dirichlet_pdf(x, alpha):
  return (math.gamma(sum(alpha)) / 
          reduce(operator.mul, [math.gamma(a) for a in alpha]) *
          reduce(operator.mul, [x[i]**(alpha[i]-1.0) for i in range(len(alpha))]))
</snippet></ROW><ROW><id>10659687</id><snippet>commit()</snippet></ROW><ROW><id>10659696</id><snippet>import subprocess

p = subprocess.Popen(['a.out'], stdin=subprocess.PIPE)
p.communicate('1 \n 3 \n 2 \n 5 \n 2...\n')
</snippet></ROW><ROW><id>10659696</id><snippet>import subprocess
subprocess.call(['a.out'], stdin=file('a.inp'))
</snippet></ROW><ROW><id>10659900</id><snippet>__getattr__</snippet></ROW><ROW><id>10659900</id><snippet>__setattr__</snippet></ROW><ROW><id>10659900</id><snippet>Dynamic</snippet></ROW><ROW><id>10659900</id><snippet>__*__</snippet></ROW><ROW><id>10659900</id><snippet>__call__</snippet></ROW><ROW><id>10659900</id><snippet>apply()</snippet></ROW><ROW><id>10659900</id><snippet>__metaclass__</snippet></ROW><ROW><id>10659900</id><snippet>class</snippet></ROW><ROW><id>10659900</id><snippet>trait</snippet></ROW><ROW><id>10659900</id><snippet>super()</snippet></ROW><ROW><id>10659900</id><snippet>super()</snippet></ROW><ROW><id>10659900</id><snippet>__repr__</snippet></ROW><ROW><id>10659900</id><snippet>__str__</snippet></ROW><ROW><id>10659900</id><snippet>toString()</snippet></ROW><ROW><id>10659900</id><snippet>__eq__</snippet></ROW><ROW><id>10659900</id><snippet>equals()</snippet></ROW><ROW><id>10659900</id><snippet>__init__</snippet></ROW><ROW><id>10659900</id><snippet>__new__</snippet></ROW><ROW><id>10659900</id><snippet>__del__</snippet></ROW><ROW><id>10659900</id><snippet>__nonzero__</snippet></ROW><ROW><id>10659900</id><snippet>implicit def toBool[MyType](a: MyType): Boolean = ...</snippet></ROW><ROW><id>10659900</id><snippet>__len__</snippet></ROW><ROW><id>10659900</id><snippet>length</snippet></ROW><ROW><id>10659900</id><snippet>size</snippet></ROW><ROW><id>10659900</id><snippet>__getitem__</snippet></ROW><ROW><id>10659900</id><snippet>apply(i: IndexType)</snippet></ROW><ROW><id>10659900</id><snippet>__setitem__</snippet></ROW><ROW><id>10659900</id><snippet>update(i: IndexType, v: ValueType)</snippet></ROW><ROW><id>10659900</id><snippet>__delitem__</snippet></ROW><ROW><id>10659900</id><snippet>__iter__</snippet></ROW><ROW><id>10659900</id><snippet>foreach(block: ValueType =&gt; Unit)</snippet></ROW><ROW><id>10659900</id><snippet>map</snippet></ROW><ROW><id>10659900</id><snippet>flatMap</snippet></ROW><ROW><id>10659900</id><snippet>apply</snippet></ROW><ROW><id>10659900</id><snippet>update</snippet></ROW><ROW><id>10659900</id><snippet>val x = collection(elem) // val x = collection.apply(elem)
collection(elem) = y // collection.update(elem, y)
</snippet></ROW><ROW><id>10659900</id><snippet>__iter__</snippet></ROW><ROW><id>10659900</id><snippet>(el for el in container)</snippet></ROW><ROW><id>10659900</id><snippet>foreach</snippet></ROW><ROW><id>10659900</id><snippet>map</snippet></ROW><ROW><id>10659900</id><snippet>for (el &lt;- container) yield el</snippet></ROW><ROW><id>10659900</id><snippet>__add__</snippet></ROW><ROW><id>10659900</id><snippet>__sub__</snippet></ROW><ROW><id>10659900</id><snippet>def + (arg: T)</snippet></ROW><ROW><id>10659900</id><snippet>def - (arg: T)</snippet></ROW><ROW><id>10659900</id><snippet>__lt__</snippet></ROW><ROW><id>10659900</id><snippet>__ge__</snippet></ROW><ROW><id>10659900</id><snippet>def &lt;(other: T)</snippet></ROW><ROW><id>10659900</id><snippet>def &lt;=(other: T)</snippet></ROW><ROW><id>10659900</id><snippet>__radd__</snippet></ROW><ROW><id>10659900</id><snippet>__rsub__</snippet></ROW><ROW><id>10659900</id><snippet>def +: (arg: T)</snippet></ROW><ROW><id>10659900</id><snippet>def -: (arg: T)</snippet></ROW><ROW><id>10659900</id><snippet>:</snippet></ROW><ROW><id>10659900</id><snippet>__iadd__</snippet></ROW><ROW><id>10659900</id><snippet>__isub__</snippet></ROW><ROW><id>10659900</id><snippet>def += (arg: T)</snippet></ROW><ROW><id>10659900</id><snippet>__enter__</snippet></ROW><ROW><id>10659900</id><snippet>__exit__</snippet></ROW><ROW><id>10659907</id><snippet>&amp;</snippet></ROW><ROW><id>10659907</id><snippet>|</snippet></ROW><ROW><id>10659907</id><snippet>In [1]: import numpy as np

In [2]: size = int(1E7)

In [3]: ar = np.arange(size)

In [4]: ar2 = np.random.randint(100, size=size)

In [5]: %timeit ar[(ar2 &gt; 50) &amp; (ar2 &lt; 70) | (ar2 == 42)]
10 loops, best of 3: 249 ms per loop
</snippet></ROW><ROW><id>10659907</id><snippet>conditions = [(10, 20), (20, 50)] # min, max as tuples in a list
results = {}
for condition in conditions:
    selection = ar[(ar2 &gt; condition[0]) &amp; (ar2 &lt; condition[1])]
    # do something with the selection ?
    results[condition] = selection
print results
</snippet></ROW><ROW><id>10659907</id><snippet>{(20, 50): array([      2,       6,       7, ..., 9999993, 9999997, 9999998]),
 (10, 20): array([      1,       3,      66, ..., 9999961, 9999980, 9999999])}
</snippet></ROW><ROW><id>10659939</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import event

Base= declarative_base()

class A(Base):
    __tablename__ = "a"


    id = Column(Integer, primary_key=True)
    data = Column(String)
    otherdata = Column(String)

@event.listens_for(A, "before_insert")
def gen_default(mapper, connection, instance):
    instance.data = "Some default %s" % instance.otherdata

e = create_engine("sqlite://")
Base.metadata.create_all(e)

a = A(otherdata="some other data")
s = Session(e)
s.add(a)
s.commit()

assert a.data == "Some default some other data"
</snippet></ROW><ROW><id>10660045</id><snippet>from BeautifulSoup import BeautifulSoup
from pprint import pprint

html = '''&lt;body&gt;&lt;table class="credits"&gt;
    &lt;tr class="header"&gt;
        &lt;th colspan="3"&gt;&lt;h1&gt;HEADER 1&lt;/h1&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA11&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA12&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA12&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA21&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA22&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA23&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA31&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA32&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA33&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class="header"&gt;
        &lt;th colspan="3"&gt;&lt;h1&gt;HEADER 2&lt;/h1&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA11&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA12&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA13&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA21&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA22&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA23&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td class="data_point_1"&gt;&lt;p&gt;DATA31&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_2"&gt;&lt;p&gt;DATA32&lt;/p&gt;&lt;/td&gt;
        &lt;td class="data_point_3"&gt;&lt;p&gt;DATA33&lt;/p&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;'''

soup = BeautifulSoup(html)
rows = soup.findAll('tr')

section = ''
dataset = {}
for row in rows:
    if row.attrs:
        section = row.text
        dataset[section] = {}
    else:
        cells = row.findAll('td')
        for cell in cells:
            if cell['class'] in dataset[section]:
                dataset[section][ cell['class'] ].append( cell.text )
            else:
                dataset[section][ cell['class'] ] = [ cell.text ]

pprint(dataset)
</snippet></ROW><ROW><id>10660045</id><snippet>{u'HEADER 1': {u'data_point_1': [u'DATA11', u'DATA21', u'DATA31'],
               u'data_point_2': [u'DATA12', u'DATA22', u'DATA32'],
               u'data_point_3': [u'DATA12', u'DATA23', u'DATA33']},
 u'HEADER 2': {u'data_point_1': [u'DATA11', u'DATA21', u'DATA31'],
               u'data_point_2': [u'DATA12', u'DATA22', u'DATA32'],
               u'data_point_3': [u'DATA13', u'DATA23', u'DATA33']}}
</snippet></ROW><ROW><id>10660045</id><snippet>contents</snippet></ROW><ROW><id>10660045</id><snippet>text</snippet></ROW><ROW><id>10660045</id><snippet>findAll</snippet></ROW><ROW><id>10660045</id><snippet>soup = BeautifulSoup(html)
credits = soup.find('table')

section = ''
DATA_SET = {}

for i in credits.findAll('tr'):
    if i.get('class', '') == 'header':
        section = i.text
        DATA_SET[section] = {}
    else:
        DATA_SET[section]['data_point_1'] = i.find('td', {'class' : 'data_point_1'}).find('p').contents
        DATA_SET[section]['data_point_2'] = i.find('td', {'class' : 'data_point_2'}).find('p').contents
        DATA_SET[section]['data_point_3'] = i.find('td', {'class' : 'data_point_3'}).find('p').contents

print DATA_SET
</snippet></ROW><ROW><id>10660045</id><snippet>data_point</snippet></ROW><ROW><id>10660045</id><snippet>{u'HEADER 2': {'data_point_2': [u'DATA32'],
               'data_point_3': [u'DATA33'],
               'data_point_1': [u'DATA31']},
 u'HEADER 1': {'data_point_2': [u'DATA32'],
               'data_point_3': [u'DATA33'],
               'data_point_1': [u'DATA31']}}
</snippet></ROW><ROW><id>10660115</id><snippet>matplotlib</snippet></ROW><ROW><id>10660115</id><snippet>from matplotlib.mlab import csv2rec
import matplotlib.pyplot as plt 

data = csv2rec('pps_counter.log', names=['packets', 'time'])

plt.plot_date(data['time'], data['packets'])
plt.xlabel("Time(minutes)")
plt.ylabel("Number of Packets")
plt.title("Packets Per Minute")

plt.show()
</snippet></ROW><ROW><id>10660263</id><snippet>from esky import bdist_esky
from distutils.core import setup

setup(name="appname",
      version="1.2.3",
      scripts=["appname/script1.py","appname/gui/script2.pyw"],
      options={"bdist_esky":{"includes":["mylib"]}},
     )
</snippet></ROW><ROW><id>10660263</id><snippet>python Makespec.py  [options] script.py
</snippet></ROW><ROW><id>10660263</id><snippet>python Build.py  script.spec
</snippet></ROW><ROW><id>10660443</id><snippet>s = """ this is a very
        long string if I had the
        energy to type more and more ..."""
</snippet></ROW><ROW><id>10660443</id><snippet>s</snippet></ROW><ROW><id>10660443</id><snippet>' this is a very\n        long string if I had the\n        energy to type more and more ...'
</snippet></ROW><ROW><id>10660443</id><snippet> s = ("this is a very"
      "long string too"
      "for sure ..."
     )
</snippet></ROW><ROW><id>10660443</id><snippet>'this is a verylong string toofor sure ...'
</snippet></ROW><ROW><id>10660725</id><snippet>nan</snippet></ROW><ROW><id>10660725</id><snippet>from pylab import isnan
boolind = ~isnan(y).any(1)
</snippet></ROW><ROW><id>10660725</id><snippet>plot(x[boolind], y[boolind])
</snippet></ROW><ROW><id>10660725</id><snippet>nan</snippet></ROW><ROW><id>10660725</id><snippet>nan</snippet></ROW><ROW><id>10660725</id><snippet>nan</snippet></ROW><ROW><id>10660725</id><snippet>y = rand((10, 50))</snippet></ROW><ROW><id>10660725</id><snippet>y = rand(10, 50)</snippet></ROW><ROW><id>10660725</id><snippet>y</snippet></ROW><ROW><id>10660725</id><snippet>from pylab import *
x = linspace(0,1,10)
y = rand(10,2)
y[5:8,1] = nan
boolind = ~isnan(y)
plot(x[boolind[:,0]],y[boolind[:,0], 0],'.-')
plot(x[boolind[:,1]],y[boolind[:,1], 1],'.-')
show()
</snippet></ROW><ROW><id>10661116</id><snippet>multiprocessing Pool</snippet></ROW><ROW><id>10661116</id><snippet>def get_page_data(page_number):
    # Fetch page data
    ...
    # Parse page data
    ...
    for linked_page in parsed_links:
        # Fetch page source and save to file
        ...
</snippet></ROW><ROW><id>10661116</id><snippet>Pool</snippet></ROW><ROW><id>10661116</id><snippet>from multiprocessing import Pool

if __name__ == '__main__':
    pool = Pool(processes=4)
    pool.map(get_page_data, range(1,101))
</snippet></ROW><ROW><id>10661254</id><snippet>import matplotlib.dates as mdates
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.plot_date(data['time'], data['packets']) 
hours = mdates.HourLocator() 
fmt = mdates.DateFormatter('%H:%M')
ax.xaxis.set_major_locator(hours)
ax.xaxis.set_major_formatter(fmt)
</snippet></ROW><ROW><id>10661380</id><snippet>int</snippet></ROW><ROW><id>10661380</id><snippet>result &amp;= 0xFFFFFFFF</snippet></ROW><ROW><id>10661380</id><snippet>def key_hash(data):
    # hash should be a 32-bit unsigned integer
    hashed = 0
    for char in data:
        # hashed += ((hashed &lt;&lt; 19) + ord(char)) &amp; 0xFFFFFFFF
        # the above is wrong; it's not masking the final addition.
        hashed = (hashed + (hashed &lt;&lt; 19) + ord(char)) &amp; 0xFFFFFFFF
    return hashed
</snippet></ROW><ROW><id>10661380</id><snippet>hashed</snippet></ROW><ROW><id>10661380</id><snippet>rot</snippet></ROW><ROW><id>10661380</id><snippet>rotl</snippet></ROW><ROW><id>10661380</id><snippet># hashed += ((hashed &lt;&lt; 19) + (hashed &gt;&gt; 13) + ord(char)) &amp; 0xFFFFFFFF
# the above is wrong; it's not masking the final addition.
hashed = (hashed + (hashed &lt;&lt; 19) + (hashed &gt;&gt; 13) + ord(char)) &amp; 0xFFFFFFFF
</snippet></ROW><ROW><id>10661380</id><snippet>def rotate_left(x, n, maxbit=32):
    # assumes 32 bit
    x = x &amp; (2 ** maxbit - 1)
    return ((x &lt;&lt; n) | (x &gt;&gt; (maxbit - n)))

def key_hash(data):
    # hash should be a 32-bit unsigned integer
    hashed = 0
    for char in data:
        hashed = (hashed + rotate_left(hashed, 19) + ord(char))
    return hashed

def khash(data):
    h = 0
    for c in data:
        assert 0 &lt;= h &lt;= 0xFFFFFFFF
        h = (h + (h &lt;&lt; 19) + (h &gt;&gt; 13) + ord(c)) &amp; 0xFFFFFFFF
    assert 0 &lt;= h &lt;= 0xFFFFFFFF
    return h

guff = "twas brillig and the slithy toves did whatever"
print "yours: %08X" % key_hash(guff)
print "mine : %08X" % khash(guff)
</snippet></ROW><ROW><id>10661380</id><snippet>yours: A20352DB4214FD
mine : DB4214FD
</snippet></ROW><ROW><id>10661407</id><snippet>from ... import ...</snippet></ROW><ROW><id>10661407</id><snippet>import</snippet></ROW><ROW><id>10661407</id><snippet>import alpha

alpha.set_bravo()

from alpha import bravo

print "Value of bravo is: %s" % bravo
print "Value of alpha.bravo is: %s" % alpha.bravo
</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;A&gt;</snippet></ROW><ROW><id>10661486</id><snippet>b</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;B&gt;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;B&gt;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;A&gt;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;B&gt;&amp;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;A&gt;&amp;</snippet></ROW><ROW><id>10661486</id><snippet>foo</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;A&gt;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;A&gt; const &amp;</snippet></ROW><ROW><id>10661486</id><snippet>shared_ptr&lt;B&gt;&amp;</snippet></ROW><ROW><id>10661488</id><snippet>shell=True</snippet></ROW><ROW><id>10661488</id><snippet>p1 = Popen(['echo','hello'], stdout=PIPE, shell=True)
</snippet></ROW><ROW><id>10661488</id><snippet>execve("/bin/sh", ["/bin/sh", "-c", "echo", "hello"], ...)
</snippet></ROW><ROW><id>10661488</id><snippet>sh -c "echo"</snippet></ROW><ROW><id>10661488</id><snippet>hello</snippet></ROW><ROW><id>10661488</id><snippet>echo</snippet></ROW><ROW><id>10661488</id><snippet>\n</snippet></ROW><ROW><id>10661488</id><snippet>shell=True</snippet></ROW><ROW><id>10661488</id><snippet>  p1 = Popen('echo hello', stdout=PIPE, shell=True)
</snippet></ROW><ROW><id>10661517</id><snippet>Counter.all().get()</snippet></ROW><ROW><id>10661517</id><snippet>@db.transactional
def incrementUsers(counterKey):
    counter = Counter.get(counterKey)
    counter.totalRegistrations = counter.totalRegistrations + 1
    counter.put()
    return counter.totalRegistrations

counterKey = Counter.all(keys_only=True).get()

print incrementUsers(counterKey)
</snippet></ROW><ROW><id>10661626</id><snippet>arg_list = [{'key':self.key, 'foo':False}, {'key':self.key}, ... ]
handlers = [KeyReleaseEvent, KeyToggleEvent, ...]
for handler, args in zip(arg_list, handlers):
    g_events, r_events = handler(*args)
    self.GameEvents.extend(g_events)
    self.RealEvents.extend(r_events)
self.GameEvents.sort()
self.RealEvents.sort()
</snippet></ROW><ROW><id>10661626</id><snippet>gevents_revents = [handler(*args) for handler, args in zip(arg_list, handlers)]
all_gevents, all_revents = zip(*gevents_revents)
self.GameEvents.extend(e for sublist in all_gevents for e in sublist)
self.RealEvents.extend(e for sublist in all_revents for e in sublist)
</snippet></ROW><ROW><id>10661626</id><snippet>heapq</snippet></ROW><ROW><id>10661626</id><snippet>heapq.heapify</snippet></ROW><ROW><id>10661626</id><snippet>sort</snippet></ROW><ROW><id>10661626</id><snippet>arg_list = [{'key':self.key, 'foo':False}, {'key':self.key}, ... ]
handlers = [KeyReleaseEvent, KeyToggleEvent, ...]
for handler, args in zip(arg_list, handlers):
    g_events, r_events = handler(*args)
    self.GameEvents.extend(g_events)
    self.RealEvents.extend(r_events)
heapq.heapify(self.GameEvents)
heapq.heapify(self.RealEvents)
</snippet></ROW><ROW><id>10661626</id><snippet>next_game_event = heapq.heappop(self.GameEvents)
</snippet></ROW><ROW><id>10661694</id><snippet>matches = re.search(r'^Hello\s*\((.*?)\)', text)
</snippet></ROW><ROW><id>10661832</id><snippet>[...]
author = Author.objects.filter(slug=slug)
is_fav = author.users_with_stars.filter(pk=user_id).exists()
return render_to_response('app/author_detail.html',
                          { 'author': author,
                            'is_fav': is_fav },
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>10661832</id><snippet>{% if is_fav %}
    &lt;p&gt;This is one of your favorite authors&lt;/p&gt;
{% endif %}
</snippet></ROW><ROW><id>10661850</id><snippet>class ChatComment(models.Model):
    owner = models.ForeignKey(User)
    when = models.DateTimeField(auto_now_add=True)
    message = models.CharField(...)
    ...
    chatroom = models.ForeignKey(ChatRoom)

class PublicDocument(models.Model):
    owner = models.ForeignKey(User)
    created = models.DateTimeField(auto_now_add=True)
    title = models.CharField(...)
    payload = models.FileField(...)

class DocumentReview(models.Model):
    author = models.ForeignKey(User)
    document = models.ForeignKey(PublicDocument)
    when = models.DateTimeField(auto_now_add=True)
    text = models.CharField(...)
</snippet></ROW><ROW><id>10661890</id><snippet>import sys

INPUT = sys.stdin

def do_something_with_data(line):
    # Do your magic here
    ...
    return result

def main():
    for line in INPUT:
        print 'Result:', do_something_with_data(line)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10661890</id><snippet>In[0]: from test.py import *
In[1]: INPUT = subprocess.Popen(['grep', 'ABC', 'input.txt'], \
                               stdout=subprocess.PIPE).stdout
In[2]: main()
</snippet></ROW><ROW><id>10661890</id><snippet>In[0]: ! grep "ABC" input.txt &gt; output.txt
In[1]: INPUT = open('output.txt')
In[2]: main()
</snippet></ROW><ROW><id>10661973</id><snippet>def columnize(mylists, maxcolumns):
    for i in mylists:
        while len(i) &lt; maxcolumns:
            i.insert(-1,None)

mylists = [["author1","author2","author3","this is the title of the article"],
           ["author1","author2","this is the title of the article"],
           ["author1","author2","author3","author4","this is the title of the article"]]

columnize(mylists,5)
print mylists

[['author1', 'author2', 'author3', None, 'this is the title of the article'], ['author1', 'author2', None, None, 'this is the title of the article'], ['author1', 'author2', 'author3', 'author4', 'this is the title of the article']]
</snippet></ROW><ROW><id>10661973</id><snippet>def columnize(mylists, maxcolumns):
    return [j[:-1]+([None]*(maxcolumns-len(j)))+j[-1:] for j in mylists]

print columnize(mylists,5)

[['author1', 'author2', 'author3', None, 'this is the title of the article'], ['author1', 'author2', None, None, 'this is the title of the article'], ['author1', 'author2', 'author3', 'author4', 'this is the title of the article']]
</snippet></ROW><ROW><id>10662166</id><snippet>Meta</snippet></ROW><ROW><id>10662184</id><snippet>self.fields</snippet></ROW><ROW><id>10662198</id><snippet>p</snippet></ROW><ROW><id>10662198</id><snippet>x</snippet></ROW><ROW><id>10662198</id><snippet>p[x]</snippet></ROW><ROW><id>10662198</id><snippet>p</snippet></ROW><ROW><id>10662198</id><snippet>x</snippet></ROW><ROW><id>10662358</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; print Manager(10, 'Bob', 'Quux', '123', datetime.datetime(2009, 1, 1),
... ['Michael', 'Bob', 'Hello'])
10, Bob Quux, 123, 0001-01-01 00:00:00, 2009-01-01 00:00:00, Michael, Bob, Hello
&gt;&gt;&gt; print Manager(2000, 'Bob', 'Lol', '1234', datetime.datetime(2009, 1, 1),     
... ['Michael', 'Bob', 'Hello'])
2000, Bob Lol, 1234, 0001-01-01 00:00:00, 2009-01-01 00:00:00
</snippet></ROW><ROW><id>10662358</id><snippet>... </snippet></ROW><ROW><id>10662358</id><snippet>Manager</snippet></ROW><ROW><id>10662358</id><snippet>SyntaxError</snippet></ROW><ROW><id>10662358</id><snippet>startDate=...</snippet></ROW><ROW><id>10662358</id><snippet>EmpSalaried</snippet></ROW><ROW><id>10662358</id><snippet>Employee</snippet></ROW><ROW><id>10662358</id><snippet>manage</snippet></ROW><ROW><id>10662358</id><snippet>Manager</snippet></ROW><ROW><id>10662444</id><snippet>import pygame
import math
from pygame.locals import *
background_colour = (122, 100, 155)
(width, height) = (500, 500)

pygame.init()

#ship = pygame.image.load('lolol.jpeg')\
rship = pygame.image.load('js.jpg')
mis = pygame.image.load('lot.jpg')
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('A.N.T.O.N.I.A.')
screen.fill(background_colour)
pygame.display.flip()
running = True

MAX_MISSILES = 5

ls = 250  # Horizontal ship location

LEFT = False
RIGHT = False

def move(ls, RIGHT, LEFT):
    '''Moves the ship 3 pixels to the left or right.

    Only moves if just one direction key is down, and not both.
    Also, will not move if the ship is at either horizontal screen edge.

    ls is the ship location.

    '''
    if LEFT and not RIGHT:
        if ls &gt;= 10:
            ls -= 3
    elif RIGHT and not LEFT:
        if ls &lt;= 440:
            ls += 3
    return ls

def fire_missile(ls, missiles):
    '''Fire a missile, as long as we are not at the maximum number.

    We use a list to hold our missile locations.

    '''
    if len(missiles) &gt;= MAX_MISSILES:
        return
    else:
        missiles.append((ls, 460))

def draw_missiles(missiles):
    '''Draw all the missiles.'''
    if missiles:
        for missile in missiles:
            screen.blit(mis, (missile))

def move_missiles(missiles):
    '''If there are any missiles, move them up 1 pixel, and append
    them to the newlist.  The new list will replace the old list.

    '''
    if missiles:
        newmissiles = []
        for missile in missiles:
            # Do not append the missile to the new list if it is going
            # off the screen
            if missile[1] &gt; 0:
                newmissiles.append((missile[0], missile[1] - 1))
        return newmissiles
    else:
        return missiles

missiles = []

while running:
    screen.blit(rship, (ls, 450))
    pygame.display.flip()
    screen.fill(background_colour)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            running = False
        if event.type == pygame.KEYDOWN and event.key == K_ESCAPE:
            # You can now quit with the escape key.
            pygame.quit()
            running = False
        if event.type == pygame.KEYDOWN and event.key == K_LEFT:
            LEFT = True
        # LEFT is True untli you let up in the LEFT key
        if event.type == pygame.KEYUP and event.key == K_LEFT:
            LEFT = False
        if event.type == pygame.KEYDOWN and event.key == K_RIGHT:
            RIGHT = True
        if event.type == pygame.KEYUP and event.key == K_RIGHT:
            RIGHT = False
        if event.type == pygame.KEYDOWN and event.key == K_SPACE:
            fire_missile(ls, missiles)
    ls = move(ls, RIGHT, LEFT)
    draw_missiles(missiles)
    missiles = move_missiles(missiles)
</snippet></ROW><ROW><id>10662473</id><snippet>def sortqns(qnlist):
    return sorted(qnlist, key = lambda x: (len(x), x))
</snippet></ROW><ROW><id>10662544</id><snippet>public static bool IsSubsetOf&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; lhs, IEnumerable&lt;TSource&gt; rhs)
{
    // O(m+n)
    var contents = rhs.ToList();
    foreach (var item in lhs)
    {
        if (!contents.Remove(item))
            return false;
    }
    return true;
}
</snippet></ROW><ROW><id>10662544</id><snippet>"aab".IsSubsetOf("abb");      // false
"foo".IsSubsetOf("food");     // true
"foo".IsSubsetOf("goof");     // true
"bar".IsSubsetOf("barf");     // true
"abcd".IsSubsetOf("dbace");   // true
"abcdd".IsSubsetOf("abbcdd"); // true
</snippet></ROW><ROW><id>10662544</id><snippet>public static bool IsTrueSubsetOf&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; lhs, IEnumerable&lt;TSource&gt; rhs)
{
    return new HashSet&lt;TSource&gt;(lhs).IsSubsetOf(rhs);
}
</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; from itertools import islice, chain
&gt;&gt;&gt; L = ["2H", "AH", "KH", "QH", "JH", "0H", "9H"]
&gt;&gt;&gt; list(chain.from_iterable(
        zip(*[islice(reversed(L),i,None) for i in range(j)])
        for j in range(3,6)))
[('9H', '0H', 'JH'), ('0H', 'JH', 'QH'), ('JH', 'QH', 'KH'), ('QH', 'KH', 'AH'), 
 ('KH', 'AH', '2H'), ('9H', '0H', 'JH', 'QH'), ('0H', 'JH', 'QH', 'KH'), 
 ('JH', 'QH', 'KH', 'AH'), ('QH', 'KH', 'AH', '2H'), ('9H', '0H', 'JH', 'QH', 'KH'),
 ('0H', 'JH', 'QH', 'KH', 'AH'), ('JH', 'QH', 'KH', 'AH', '2H')]
</snippet></ROW><ROW><id>10662674</id><snippet>zip</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; zip(L,L)
[('2H', '2H'), ('AH', 'AH'), ('KH', 'KH'), ('QH', 'QH'), ('JH', 'JH'), ('0H', '0H'), ('9H', '9H')]
</snippet></ROW><ROW><id>10662674</id><snippet>zip</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; zip(L,L[1:])
[('2H', 'AH'), ('AH', 'KH'), ('KH', 'QH'), ('QH', 'JH'), ('JH', '0H'), ('0H', '9H')]
</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; zip(L,L[1:],L[2:])
[('2H', 'AH', 'KH'), ('AH', 'KH', 'QH'), ('KH', 'QH', 'JH'), ('QH', 'JH', '0H'), ('JH', '0H', '9H')]
</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; zip(*[L[i:] for i in range(3)])
[('2H', 'AH', 'KH'), ('AH', 'KH', 'QH'), ('KH', 'QH', 'JH'), ('QH', 'JH', '0H'), ('JH', '0H', '9H')]
</snippet></ROW><ROW><id>10662674</id><snippet>*</snippet></ROW><ROW><id>10662674</id><snippet>zip</snippet></ROW><ROW><id>10662674</id><snippet>reversed</snippet></ROW><ROW><id>10662674</id><snippet>islice</snippet></ROW><ROW><id>10662674</id><snippet>islice</snippet></ROW><ROW><id>10662674</id><snippet>None</snippet></ROW><ROW><id>10662674</id><snippet>&gt;&gt;&gt; zip(*[islice(reversed(L),i,None) for i in range(3)])
[('9H', '0H', 'JH'), ('0H', 'JH', 'QH'), ('JH', 'QH', 'KH'), ('QH', 'KH', 'AH'), ('KH', 'AH', '2H')]
</snippet></ROW><ROW><id>10662674</id><snippet>range(3)</snippet></ROW><ROW><id>10662674</id><snippet>range(4)</snippet></ROW><ROW><id>10662674</id><snippet>range(5)</snippet></ROW><ROW><id>10662674</id><snippet>(zip(*[islice(reversed(L),i,None) for i in range(j)]) for j in range(3,6))
</snippet></ROW><ROW><id>10662674</id><snippet>3</snippet></ROW><ROW><id>10662674</id><snippet>4</snippet></ROW><ROW><id>10662674</id><snippet>5</snippet></ROW><ROW><id>10662674</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>10662674</id><snippet>list</snippet></ROW><ROW><id>10662969</id><snippet>if not more:
    visited.add(n)
    curr_depth -= 1
    Q = Q[1:]
</snippet></ROW><ROW><id>10662969</id><snippet>def max_depth_dfs(tree):

    max_depth, curr_depth, Q = 0, 0, [0]
    visited = set()

    while Q != []:
        n = Q[0]

        max_depth = max(max_depth, curr_depth)

        if n in visited:
            curr_depth -= 1
            Q = Q[1:]
            continue

        #print n, curr_depth     #show the node and its depth in the tree

        visited.add(n)
        more = [v for v in tree[n]]
        if not more:
            Q = Q[1:]
        else:
            curr_depth += 1
            Q = more + Q

    return max_depth
</snippet></ROW><ROW><id>10663659</id><snippet>common_funny</snippet></ROW><ROW><id>10663659</id><snippet>funny_files</snippet></ROW><ROW><id>10663659</id><snippet>dircmp</snippet></ROW><ROW><id>10663659</id><snippet>filecmp.cmp</snippet></ROW><ROW><id>10663755</id><snippet>import re

line = "createNode transform -n \"water\" -p \"FG\";" 

m = search(r'(FG|BG|MG)',line)
if m:
    result = m.groups()[0]

    # What do you want to concat it to? 
    known_string = "known_string" + result
</snippet></ROW><ROW><id>10663755</id><snippet>re.compile()</snippet></ROW><ROW><id>10663851</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; x = time.strptime('00:01:00,000'.split(',')[0],'%H:%M:%S')
&gt;&gt;&gt; datetime.timedelta(hours=x.tm_hour,minutes=x.tm_min,seconds=x.tm_sec).total_seconds()
60.0
</snippet></ROW><ROW><id>10664287</id><snippet># Python 3.
return any("\u0590" &lt;= c &lt;= "\u05EA" for c in s)
# Python 2.
return any(u"\u0590" &lt;= c &lt;= u"\u05EA" for c in s)
</snippet></ROW><ROW><id>10664412</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>10664412</id><snippet>production_settings.py</snippet></ROW><ROW><id>10664412</id><snippet>test_settings.py</snippet></ROW><ROW><id>10664412</id><snippet>bin/activate</snippet></ROW><ROW><id>10664412</id><snippet>DJANGO_SETTINGS_MODULE="production_settings"
export DJANGO_SETTINGS_MODULE
</snippet></ROW><ROW><id>10664412</id><snippet>DJANGO_SETTINGS_MODULE="test_settings"
export DJANGO_SETTINGS_MODULE
</snippet></ROW><ROW><id>10664412</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10664412</id><snippet>/etc/</snippet></ROW><ROW><id>10664523</id><snippet>datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')</snippet></ROW><ROW><id>10664523</id><snippet>time.ctime()</snippet></ROW><ROW><id>10664523</id><snippet>&gt;&gt;&gt; time.ctime()
'Sat May 19 13:46:09 2012'
</snippet></ROW><ROW><id>10664533</id><snippet>idle.py [-c command] [-d] [-e] [-s] [-t title] [arg] ...

-c command  run this command
-d          enable debugger
-e          edit mode; arguments are files to be edited
-s          run $IDLESTARTUP or $PYTHONSTARTUP first
-t title    set title of shell window
</snippet></ROW><ROW><id>10664825</id><snippet>isHttps</snippet></ROW><ROW><id>10664825</id><snippet>HttpURLConnection</snippet></ROW><ROW><id>10664825</id><snippet>URLConnection</snippet></ROW><ROW><id>10664825</id><snippet>HttpURLConnection urlConnection = (HttpURLConnection)new URL(url).openConnection();
urlConnection.setDoOutput(true);
urlConnection.setDoInput(true);
urlConnection.setRequestMethod("POST");
urlConnection.setConnectTimeout(5000);
urlConnection.setReadTimeout(60000);
urlConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
</snippet></ROW><ROW><id>10665021</id><snippet>A</snippet></ROW><ROW><id>10665021</id><snippet>'A'</snippet></ROW><ROW><id>10665021</id><snippet>globals()['A']</snippet></ROW><ROW><id>10665021</id><snippet>getattr(sys.modules[__name__], 'A')</snippet></ROW><ROW><id>10665021</id><snippet>globals()</snippet></ROW><ROW><id>10665021</id><snippet>&gt;&gt;&gt; dis.dis(lambda: getattr(sys.modules[__name__], 'Foo'))
  1           0 LOAD_GLOBAL              0 (getattr)
              3 LOAD_GLOBAL              1 (sys)
              6 LOAD_ATTR                2 (modules)
              9 LOAD_GLOBAL              3 (__name__)
             12 BINARY_SUBSCR
             13 LOAD_CONST               1 ('Foo')
             16 CALL_FUNCTION            2
             19 RETURN_VALUE

&gt;&gt;&gt; dis.dis(lambda: globals()['Foo'])
  1           0 LOAD_GLOBAL              0 (globals)
              3 CALL_FUNCTION            0
              6 LOAD_CONST               1 ('Foo')
              9 BINARY_SUBSCR
             10 RETURN_VALUE

&gt;&gt;&gt; dis.dis(lambda: Foo)
  1           0 LOAD_GLOBAL              0 (Foo)
              3 RETURN_VALUE
</snippet></ROW><ROW><id>10665021</id><snippet>Foo</snippet></ROW><ROW><id>10665021</id><snippet>globals()</snippet></ROW><ROW><id>10665021</id><snippet>sys.modules</snippet></ROW><ROW><id>10665425</id><snippet>logging to a single file from multiple processes is not supported, because there is no standard way to serialize access to a single file across multiple processes in Python.</snippet></ROW><ROW><id>10665602</id><snippet>for</snippet></ROW><ROW><id>10665602</id><snippet>for item in a:
  print item
a[:] = []
</snippet></ROW><ROW><id>10665602</id><snippet>while</snippet></ROW><ROW><id>10665602</id><snippet>while a:
  print a.pop(0)
</snippet></ROW><ROW><id>10665602</id><snippet>result = []
for item in a:
  if condition:
    result.append(item)
a = result
</snippet></ROW><ROW><id>10665602</id><snippet>filter</snippet></ROW><ROW><id>10665602</id><snippet>a</snippet></ROW><ROW><id>10665602</id><snippet>a = filter(lambda item:... , a)
</snippet></ROW><ROW><id>10665602</id><snippet>a = [item for item in a if ...]
</snippet></ROW><ROW><id>10665602</id><snippet>...</snippet></ROW><ROW><id>10665732</id><snippet>def merge(lst, ngroups):
    return [' '.join(lst[start::ngroups]) for start in xrange(ngroups)]
</snippet></ROW><ROW><id>10665732</id><snippet>&gt;&gt;&gt; lst = ['a','b','c','d','e','f']
&gt;&gt;&gt; merge(lst, 2)
['a c e', 'b d f']

&gt;&gt;&gt; merge(lst, 3)
['a d', 'b e', 'c f']
</snippet></ROW><ROW><id>10665743</id><snippet>def reencode(file):
    for line in file:
        yield line.decode('windows-1250').encode('utf-8')

csv_reader = csv.reader(reencode(open(filepath)), delimiter=";",quotechar='"')
</snippet></ROW><ROW><id>10665775</id><snippet>  # Create runner
  self.runner = QProcess(self)
  # Make sure newInfo gets all output
  self.runner.readyReadStandardError.connect(self.newErrInfo)
  # Run the command
  self.runner.start(command)
  # Once it's started set message to Converting
  self.parentWidget().statusBar().showMessage("Converting.")
</snippet></ROW><ROW><id>10665775</id><snippet>def newErrInfo(self):
  newString = str(self.runner.readAllStandardError())
  print(newString, end=" ")
</snippet></ROW><ROW><id>10665788</id><snippet>import numpy as np, numpy.random,scipy.optimize
def residuals(p, dRA, dDE, RA, DEC):
    ex,ey,ez = p
    f1 = dRA-(ex*np.sin(DEC)*np.cos(RA)+ey*np.sin(DEC)*np.sin(RA)-ez*np.cos(DEC))
    f2 = dDE-(-ex*np.sin(RA)+ey*np.cos(RA))
    err = np.concatenate((f1,f2))
    return err    
ex, ey, ez = 0.2, 0.3, 0.4
N = 100
err = 1e-3
ra, dec = np.random.uniform(0,1,N), np.random.uniform(0,.5,N)
dra = (ex*np.sin(dec)*np.cos(ra)+ey*np.sin(dec)*np.sin(ra)-ez*np.cos(dec))+np.random.normal(size=N)*err
ddec = (-ex*np.sin(ra)+ey*np.cos(ra))+np.random.normal(size=N)*err
print scipy.optimize.leastsq(residuals, p0, args=(dra, ddec, ra, dec))
</snippet></ROW><ROW><id>10665812</id><snippet>strip_debug()</snippet></ROW><ROW><id>10665812</id><snippet>__init__.py</snippet></ROW><ROW><id>10665812</id><snippet>--purge</snippet></ROW><ROW><id>10665812</id><snippet>python __init__.py --purge
</snippet></ROW><ROW><id>10665812</id><snippet>#!/usr/bin/env python3.2

# BEGIN DEBUG
def _strip_debug():
    """
    Generates an optimized version of its own code stripping off all debugging
    code.

    """
    import os
    import re
    import shutil
    import sys
    import tempfile
    begin_debug = re.compile("^\s*#+\s*BEGIN\s+DEBUG\s*$")
    end_debug = re.compile("^\s*#+\s*END\s+DEBUG\s*$")
    tmp = None
    debug = False
    try:
        tmp = tempfile.NamedTemporaryFile(mode="w", suffix=".py", delete=False)
        with open(sys.argv[0]) as my_code:
            for line in my_code:
                if begin_debug.match(line):
                    debug = True
                    continue
                elif end_debug.match(line):
                    debug = False
                    continue
                else:
                    if not debug:
                        tmp.write(line)
        tmp.close()
        shutil.copy(tmp.name, sys.argv[0])
    finally:
        os.unlink(tmp.name)
# END DEBUG    

def foo(bar, baz):
    """
    Do something weired with bar and baz.

    """
    # BEGIN DEBUG
    if DEBUG:
        print("bar = {}".format(bar))
        print("baz = {}".format(baz))
    # END DEBUG
    return bar + baz


# BEGIN DEBUG
if __name__ == "__main__":
    _strip_debug()
# END DEBUG
</snippet></ROW><ROW><id>10665812</id><snippet>foo()</snippet></ROW><ROW><id>10665812</id><snippet># BEGIN DEBUG
</snippet></ROW><ROW><id>10665812</id><snippet># END DEBUG
</snippet></ROW><ROW><id>10665812</id><snippet>if DEBUG:
    # stuff
</snippet></ROW><ROW><id>10665845</id><snippet>#front
GL.glVertex3d(0.0, 0.0, 0.0)
GL.glVertex3d(0.2, 0.0, 0.0)
GL.glVertex3d(0.2, 0.2, 0.0)
GL.glVertex3d(0.0, 0.2, 0.0)
# back
GL.glVertex3d(0.0, 0.0, -0.2)
GL.glVertex3d(0.2, 0.0, -0.2)
GL.glVertex3d(0.2, 0.2, -0.2)
GL.glVertex3d(0.0, 0.2, -0.2)
</snippet></ROW><ROW><id>10665873</id><snippet>\r\n</snippet></ROW><ROW><id>10665873</id><snippet>\n</snippet></ROW><ROW><id>10665873</id><snippet>\r\n</snippet></ROW><ROW><id>10665873</id><snippet>\n</snippet></ROW><ROW><id>10665964</id><snippet>    list.append(smart_str(cell.value))
</snippet></ROW><ROW><id>10665964</id><snippet>    if smart_str(cell.value) not in list:
</snippet></ROW><ROW><id>10665964</id><snippet>False</snippet></ROW><ROW><id>10665964</id><snippet>lst</snippet></ROW><ROW><id>10665964</id><snippet>list</snippet></ROW><ROW><id>10665993</id><snippet>[&lt;UserProfile: MyUser&gt;]</snippet></ROW><ROW><id>10666041</id><snippet>repr()</snippet></ROW><ROW><id>10666041</id><snippet>&gt;&gt;&gt; s = "\x7D\x1E\x40\xEE"
&gt;&gt;&gt; s
'}\x1e@\xee'
&gt;&gt;&gt; repr(s)
"'}\\x1e@\\xee'"
</snippet></ROW><ROW><id>10666041</id><snippet>replace</snippet></ROW><ROW><id>10666041</id><snippet>\</snippet></ROW><ROW><id>10666041</id><snippet>sig_bytes.replace("\\\\x","\\x")
</snippet></ROW><ROW><id>10666041</id><snippet>s = "\\x7D\\x1E\\x40\\xEE"
</snippet></ROW><ROW><id>10666041</id><snippet>ast</snippet></ROW><ROW><id>10666041</id><snippet>literal_eval</snippet></ROW><ROW><id>10666041</id><snippet>import ast
s = "\\x7D\\x1E\\x40\\xEE"
s = '"'+s+'"'
s = ast.literal_eval(s)
&gt;&gt;&gt; s
'}\x1e@\xee'
</snippet></ROW><ROW><id>10666121</id><snippet>def merge(key=None, *iterables):
    # based on code posted by Scott David Daniels in c.l.p.
    # http://groups.google.com/group/comp.lang.python/msg/484f01f1ea3c832d

    if key is None:
        for element in heapq.merge(*iterables):
            yield element
    else:
        keyed_iterables = [(Keyed(key(obj), obj) for obj in iterable)
                        for iterable in iterables]
        for element in heapq.merge(*keyed_iterables):
            yield element.obj
</snippet></ROW><ROW><id>10666181</id><snippet>25</snippet></ROW><ROW><id>10666256</id><snippet>self.queryservice=QueryService.QueryService()
</snippet></ROW><ROW><id>10666291</id><snippet>django_assets.finders.AssetsFinder</snippet></ROW><ROW><id>10666291</id><snippet>STATICFILES_FINDERS</snippet></ROW><ROW><id>10666320</id><snippet>all()</snippet></ROW><ROW><id>10666320</id><snippet>&gt;&gt;&gt; items = [[1, 2, 0], [1, 2, 0], [1, 2, 0]]
&gt;&gt;&gt; all(item[2] == 0 for item in items)
True
&gt;&gt;&gt; items = [[1, 2, 0], [1, 2, 1], [1, 2, 0]]
&gt;&gt;&gt; all(item[2] == 0 for item in items)
False
</snippet></ROW><ROW><id>10666320</id><snippet>&gt;&gt;&gt; [x for x in items if x[2] == 0]
[[1, 2, 0], [1, 2, 0]]
</snippet></ROW><ROW><id>10666320</id><snippet>any()</snippet></ROW><ROW><id>10666320</id><snippet>&gt;&gt;&gt; any(item[2] == 0 for item in items)
True
</snippet></ROW><ROW><id>10666356</id><snippet>quotechar</snippet></ROW><ROW><id>10666356</id><snippet>"</snippet></ROW><ROW><id>10666356</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; first=StringIO('hi, welcome')
&gt;&gt;&gt; second=StringIO("'hi,hi',hi")
&gt;&gt;&gt; third=StringIO("'hi, hello,yes','hello, yes','eat,hello'")
&gt;&gt;&gt; fourth=StringIO("'hiello, 332',9")
&gt;&gt;&gt; rfirst=csv.reader(first,quotechar="'")
&gt;&gt;&gt; rfirst.next()
['hi', ' welcome']
&gt;&gt;&gt; rsecond=csv.reader(second,quotechar="'")
&gt;&gt;&gt; rsecond.next()
['hi,hi', 'hi']
&gt;&gt;&gt; rthird=csv.reader(third,quotechar="'")
&gt;&gt;&gt; rthird.next()
['hi, hello,yes', 'hello, yes', 'eat,hello']
&gt;&gt;&gt; rfourth=csv.reader(fourth,quotechar="'")
&gt;&gt;&gt; rfourth.next()
['hiello, 332', '9']

&gt;&gt;&gt; second=StringIO('"hi,hi",hi') # This will be more straightforward to interpret.
&gt;&gt;&gt; r=csv.reader(second)
&gt;&gt;&gt; r.next()
['hi,hi', 'hi']
&gt;&gt;&gt; third=StringIO('"hi, hello,yes","hello, yes","eat,hello"')
&gt;&gt;&gt; r=csv.reader(third)
&gt;&gt;&gt; r.next()
['hi, hello,yes', 'hello, yes', 'eat,hello']
</snippet></ROW><ROW><id>10666424</id><snippet>itertools.combinations</snippet></ROW><ROW><id>10666424</id><snippet>&gt;&gt;&gt; for c in itertools.combinations(stuff, 7):
...     print(c)
...     
(1, 2, 3, 4, 5, 6, 7)
(1, 2, 3, 4, 5, 6, 8)
(1, 2, 3, 4, 5, 7, 8)
(1, 2, 3, 4, 6, 7, 8)
(1, 2, 3, 5, 6, 7, 8)
(1, 2, 4, 5, 6, 7, 8)
(1, 3, 4, 5, 6, 7, 8)
(2, 3, 4, 5, 6, 7, 8)
</snippet></ROW><ROW><id>10666424</id><snippet>combinations</snippet></ROW><ROW><id>10666539</id><snippet>&gt;&gt;&gt; from heapq import merge
&gt;&gt;&gt; merge(*iterables)
</snippet></ROW><ROW><id>10666541</id><snippet>input_formats</snippet></ROW><ROW><id>10666541</id><snippet>USE_L10N = True</snippet></ROW><ROW><id>10666541</id><snippet>DATETIME_FORMAT</snippet></ROW><ROW><id>10666597</id><snippet>$ sudo port install python27 py27-lxml
</snippet></ROW><ROW><id>10666597</id><snippet>pip</snippet></ROW><ROW><id>10666597</id><snippet>lxml</snippet></ROW><ROW><id>10666597</id><snippet>/usr/bin/llvm-gcc-4.2</snippet></ROW><ROW><id>10666731</id><snippet>import random
numbers = range(a,b) + range(c,d)
r = random.choice(numbers)
</snippet></ROW><ROW><id>10666891</id><snippet>foo.rows</snippet></ROW><ROW><id>10666891</id><snippet>__getiten__</snippet></ROW><ROW><id>10666891</id><snippet>class grid(object):

    def __init__(self, width=0, height=0):
        self._data = [None] * width * height;
        self.width = width
        self.height = height

    def __getitem__(self, pos):
        if type(pos) != tuple or len(pos) != 2:
            raise IndexError('Index must be a tuple of length 2')
        x, y = pos
        if 0 &lt;= x &lt; self.width and 0 &lt;= y &lt; self.height:
            return self._data[x + self.width * y]
        else:
            raise IndexError('Grid index out of range')

    def __setitem__(self, pos, value):
        if type(pos) != tuple or len(pos) != 2:
            raise IndexError('Index must be a tuple of length 2')
        x, y = pos
        if 0 &lt;= x &lt; self.width and 0 &lt;= y &lt; self.height:
            self._data[x + self.width * y] = value
        else:
            raise IndexError('Grid index out of range')

    @property
    def columns(self):
        return [
            [self[x, y] for x in xrange(self.width)]
            for y in xrange(self.height)
        ]

    @property
    def rows(self):
        return [
            [self[x, y] for y in xrange(self.height)]
            for x in xrange(self.width)
        ]
</snippet></ROW><ROW><id>10666891</id><snippet>foo[0, 0] = 3
</snippet></ROW><ROW><id>10667084</id><snippet>for image, title, caption in zip(images, titles, captions):
</snippet></ROW><ROW><id>10667123</id><snippet>where</snippet></ROW><ROW><id>10667123</id><snippet>fill_between(x, myzero, y1, where=y2&gt;=y1, facecolor='blue', interpolate=True)
</snippet></ROW><ROW><id>10667123</id><snippet>mymin = np.minimum(y1,y2,y3)
fill_between(x, myzero, mymin)
</snippet></ROW><ROW><id>10667123</id><snippet>def OverallMinimum(*ys):
    mymin = y[0].copy()
    for y in ys:
        min = np.minimum(mymin,y)
    return mymin
</snippet></ROW><ROW><id>10667123</id><snippet>fill_between</snippet></ROW><ROW><id>10667257</id><snippet>print '%.20f' % p
</snippet></ROW><ROW><id>10667257</id><snippet>2.00000000000000000000
2.82842712474619029095
2.97126692250060076006
2.99520732546189538681
2.99920111454065274614
2.99986684946859805123
2.99997780816268644344
2.99999630135816763854
2.99999938355963147174
2.99999989725993687628
2.99999998287665592400
2.99999999714610909862
2.99999999952435159045
2.99999999992072519106
2.99999999998678745783
2.99999999999779776161
2.99999999999963273822
2.99999999999993871569
2.99999999999998978595
2.99999999999999822364
2.99999999999999955591
</snippet></ROW><ROW><id>10667620</id><snippet>%</snippet></ROW><ROW><id>10667620</id><snippet>title = "i'm %s with %s" % ('programming', 'python')
</snippet></ROW><ROW><id>10667620</id><snippet>"i'm programming with python"
</snippet></ROW><ROW><id>10667620</id><snippet>%s</snippet></ROW><ROW><id>10667620</id><snippet>not enough arguments for format string</snippet></ROW><ROW><id>10667620</id><snippet>title = "i'm %s with %s"
title % ('programming', 'python')
</snippet></ROW><ROW><id>10667620</id><snippet>"i'm %s with %s" % ('programming', 'python')
</snippet></ROW><ROW><id>10667806</id><snippet>result = []
for x in a:
   if isinstance(x, list) and len(x) == 1: # check item type and length
       result.append(x[0])
   else:
       result.append(x)
</snippet></ROW><ROW><id>10667806</id><snippet>&gt;&gt;&gt; [x[0] if isinstance(x, list) and len(x) == 1 else x for x in a]
[3, 4, 1, 8, 9, [3, 4, 5]]
</snippet></ROW><ROW><id>10667918</id><snippet>import datetime
from pytz import UTC

dt = datetime.datetime.now()  # just some date
tz_aware_dt = dt.replace(tzinfo=UTC)
</snippet></ROW><ROW><id>10667918</id><snippet>&gt;&gt;&gt; from django.utils.dateparse import parse_datetime
&gt;&gt;&gt; naive = parse_datetime("2012-02-21 10:28:45")
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; pytz.timezone("Europe/Helsinki").localize(naive)
datetime.datetime(2012, 2, 21, 10, 28, 45, tzinfo=&lt;DstTzInfo 'Europe/Helsinki' EET+2:00:00 STD&gt;)
</snippet></ROW><ROW><id>10667930</id><snippet>range(5)</snippet></ROW><ROW><id>10667930</id><snippet>break</snippet></ROW><ROW><id>10667930</id><snippet>sales</snippet></ROW><ROW><id>10667930</id><snippet>def sales(infile, infilelist):
    #set initial
    t_sales=0

    n_sales=int(input("Number of sales"))

    while t_sales&lt;n_sales:

        #increasement
        t_sales+=1


        #for loop
        for s in range(1,n_sales+1):
            totalsale_each=0 #set the acc for total sales by each sales person

            # EDIT: this seems useless, so remove it
            #sales_no=s*1
            sales_person=input("sales person name:")
            print("sales for sales no."+str(s)+"by"+sales_person+":")
            infilelist.append(sales_person)               

            for count in range (5): #assuming one sales person can sell only 5item per cust
                sales=float(input('sales#' +str(count)+ ':'))

                if sales&lt;=300:
                    t_sales=t_sales+sales
                    totalsale_each=totalsale_each+sales

                if sales&gt;300: #if sales&gt;300, need to change the sales person
                    t_sales=t_sales+sales
                    # write the last sales_person's total, and ask for another one
                    infilelist.append(str(totalsale_each))
                    sales_person=input("another sales pesron")
                    # add it to the list, after that, everything counts for him
                    infilelist.append(sales_person)
                    totalsale_each=sales
            # EDIT: decrease indentation so that the total is written once, after the loop
            infilelist.append(str(totalsale_each)) #to write total sales for each person 
    return totalsale_each,sales_person
</snippet></ROW><ROW><id>10667930</id><snippet>break</snippet></ROW><ROW><id>10667930</id><snippet>infilelist.append(sales_person)</snippet></ROW><ROW><id>10667930</id><snippet>totalsales_each</snippet></ROW><ROW><id>10667930</id><snippet>if sales&gt;300:
    t_sales=t_sales+sales
    totalsale_each += sales # the last sale counts for the last person
    infilelist.append(str(totalsale_each))

    sales_person=input("another sales pesron")
    infilelist.append(sales_person)
    totalsale_each = 0 # reset the sales for the next person
</snippet></ROW><ROW><id>10668286</id><snippet>check_token</snippet></ROW><ROW><id>10668286</id><snippet>def check_token(self, user, token):
    """
    Check that a password reset token is correct for a given user.
    """
    # Parse the token
    try:
        ts_b36, hash = token.split("-")
    except ValueError:
        return False

    try:
        ts = base36_to_int(ts_b36)
    except ValueError:
        return False

    # Check that the timestamp/uid has not been tampered with
    if not constant_time_compare(self._make_token_with_timestamp(user, ts), token):
        return False

    # Check the timestamp is within limit
    if (self._num_days(self._today()) - ts) &gt; settings.PASSWORD_RESET_TIMEOUT_DAYS:
        return False

    return True
</snippet></ROW><ROW><id>10668286</id><snippet>hashlib</snippet></ROW><ROW><id>10668319</id><snippet>any_in = lambda a, b: any(i in b for i in a)
</snippet></ROW><ROW><id>10668319</id><snippet>any_in = lambda a, b: bool(set(a).intersection(b))
</snippet></ROW><ROW><id>10668319</id><snippet>a</snippet></ROW><ROW><id>10668319</id><snippet>a</snippet></ROW><ROW><id>10668319</id><snippet>b</snippet></ROW><ROW><id>10668319</id><snippet>isdisjoint</snippet></ROW><ROW><id>10668319</id><snippet>intersection</snippet></ROW><ROW><id>10668448</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; distance = [[[0 for k in xrange(n)] for j in xrange(n)] for i in xrange(n)]
&gt;&gt;&gt; pprint.pprint(distance)
[[[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]
&gt;&gt;&gt; distance[0][1]
[0, 0, 0]
&gt;&gt;&gt; distance[0][1][2]
0
</snippet></ROW><ROW><id>10668448</id><snippet>&gt;&gt;&gt; distance=[[[0]*n]*n]*n
&gt;&gt;&gt; pprint.pprint(distance)
[[[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]
&gt;&gt;&gt; distance[0][0][0] = 1
&gt;&gt;&gt; pprint.pprint(distance)
[[[1, 0, 0], [1, 0, 0], [1, 0, 0]],
 [[1, 0, 0], [1, 0, 0], [1, 0, 0]],
 [[1, 0, 0], [1, 0, 0], [1, 0, 0]]]
</snippet></ROW><ROW><id>10668484</id><snippet>if mylist[0] == 1 or (len(mylist) &gt; 12 and mylist[12] == 2):
</snippet></ROW><ROW><id>10668484</id><snippet>and</snippet></ROW><ROW><id>10668484</id><snippet>mylist[12]</snippet></ROW><ROW><id>10668593</id><snippet>&gt;&gt;&gt; from django.db.models import Max
&gt;&gt;&gt; AuthorizedEmail.objects.all().aggregate(Max('added'))
</snippet></ROW><ROW><id>10668593</id><snippet>{{ item.added__max }}
</snippet></ROW><ROW><id>10668688</id><snippet>$</snippet></ROW><ROW><id>10668688</id><snippet>&gt;&gt;&gt; re.match("Hello\((.*)\)$", "Hello(Hi())").group(1)
'Hi()'
&gt;&gt;&gt; re.match("Hello\((.*)\)$", "Hello(Hi(Bye()))").group(1)
'Hi(Bye())'
</snippet></ROW><ROW><id>10668795</id><snippet>result = []

with open("myfile","r") as f:
    for each_line in f:
        current_line = each_line.strip()
        if current_line.startswith('&lt;parameter '):
            split_line = current_line.split(' ')     # Breaks if there are spaces in name or value.
            name = split_line[1].split('=')[1]       # Yuck.
            value = split_line[2].split('=')[1][:-2] # Yuck.
            result.append('param().name({0}).value({1})'.format(name, value)

print '(' + ',\n'.join(result) + ');\n\n'
</snippet></ROW><ROW><id>10668926</id><snippet>def full_type(obj):
    return "%r of " % type(obj) + ','.join('%r' % t for t in set([type(o) for o in obj]))
</snippet></ROW><ROW><id>10669200</id><snippet>matchlist.current = matchlist.first()
for each word in input
    if word = matchlist.current
        matchlist.current = matchlist.next() // assuming next returns null if at end of list
    else if not allowedlist.contains(word)
        return 'No'
if matchlist.current = null // we hit the end of the list
    return 'Yes'
return 'Maybe'
</snippet></ROW><ROW><id>10669201</id><snippet>get_payload([i[, decode]]) 
    Return the current payload, which will be a list of Message objects when 
    is_multipart() is True, or a string when is_multipart() is False.

    With optional argument i, get_payload() will return the i-th element of 
    the payload, counting from zero, if is_multipart() is True.
</snippet></ROW><ROW><id>10669332</id><snippet>?</snippet></ROW><ROW><id>10669332</id><snippet>%s</snippet></ROW><ROW><id>10669898</id><snippet>str.partition</snippet></ROW><ROW><id>10669898</id><snippet>p = s.partition(' !')
print p[0]+' &amp;'+p[1]+p[2]
</snippet></ROW><ROW><id>10670060</id><snippet>pickle.dumps</snippet></ROW><ROW><id>10670060</id><snippet>product(my_A_subset, *other_sets)</snippet></ROW><ROW><id>10670067</id><snippet>Wand.__init__</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell.wandtype</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>my_wand</snippet></ROW><ROW><id>10670067</id><snippet>cast_spell</snippet></ROW><ROW><id>10670067</id><snippet>length</snippet></ROW><ROW><id>10670067</id><snippet>wandtype</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell.__init__</snippet></ROW><ROW><id>10670067</id><snippet>class CastSpell(Wand):
    def __init__(self, spell, thing, length, wandtype):
        self.spell = spell 
        self.thing = thing
        self.length = length
        self.wandtype = wandtype
</snippet></ROW><ROW><id>10670067</id><snippet>__init__()</snippet></ROW><ROW><id>10670067</id><snippet>class CastSpell(Wand):
    def __init__(self, spell, thing, length, wandtype):
        self.spell = spell 
        self.thing = thing
        super(CastSpell, self).__init__(length, wandtype)
</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>Wand</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>Wand</snippet></ROW><ROW><id>10670067</id><snippet>Wand</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>CastSpell</snippet></ROW><ROW><id>10670067</id><snippet>Wand</snippet></ROW><ROW><id>10670067</id><snippet>Wand</snippet></ROW><ROW><id>10670067</id><snippet>Spell</snippet></ROW><ROW><id>10670067</id><snippet>class Wand(object):
    def __init__(self, wandtype, length):
        self.length = length
        self.wandtype = wandtype
        self.spells = {} # Our container for spells. 
        # You can add directly too: my_wand.spells['accio'] = Spell("aguamenti", "fire")

    def fulldesc(self):
        print "This is a %s wand and it is a %s long" % (self.wandtype, self.length)

    def addspell(self, spell):
        self.spells[spell.name] = spell

    def cast(self, spellname):
        """Check if requested spell exists, then call its "cast" method if it does."""
        if spellname in self.spells: # Check existence by name
            spell = self.spells[spellname] # Retrieve spell that was added before, name it "spell"
            spell.cast(self.wandtype) # Call that spell's cast method, passing wandtype as argument
        else:
            print "This wand doesn't have the %s spell." % spellname
            print "Available spells:"
            print "\n".join(sorted(self.spells.keys()))


class Spell(object):
    def __init__(self, name, target):
        self.name = name
        self.target = target

    def cast(self, wandtype=""):
        print "You cast the spell %s with your %s wand at %s." % (
               self.name, wandtype, self.target)
        if self.name == "lumus":
            print "The room lights up."
        elif self.name == "wingardium leviosa":
            print "You cast the levitation spell.",
            print "The %s starts to float!" % self.target

    def __repr__(self):
        return self.name

my_wand = Wand('Phoenix-feather', '12 inches')
lumus = Spell('lumus', 'door')
wingardium = Spell("wingardium leviosa", "enemy")

my_wand.fulldesc()
lumus.cast() # Not from a Wand! I.e., we're calling Spell.cast directly
print "\n\n"

my_wand.addspell(lumus) # Same as my_wand.spells["lumus"] = lumus
my_wand.addspell(wingardium)
print "\n\n"

my_wand.cast("lumus") # Same as my_wand.spells["lumus"].cast(my_wand.wandtype)
print "\n\n"
my_wand.cast("wingardium leviosa")
print "\n\n"
my_wand.cast("avada kadavra") # The check in Wand.cast fails, print spell list instead
print "\n\n"
</snippet></ROW><ROW><id>10670155</id><snippet>@view_config(route_name='hello')
def hello(request):
    return Response("Hello, world!")
</snippet></ROW><ROW><id>10670227</id><snippet>/app/.heroku/venv/lib/python2.7/site-packages</snippet></ROW><ROW><id>10670227</id><snippet>django-crowdsourcing</snippet></ROW><ROW><id>10670364</id><snippet>import test
</snippet></ROW><ROW><id>10670364</id><snippet>test.py</snippet></ROW><ROW><id>10670364</id><snippet>x = test.test(10, "A type")
</snippet></ROW><ROW><id>10670364</id><snippet>from test import test
</snippet></ROW><ROW><id>10670364</id><snippet>x = test(10, "A type") 
</snippet></ROW><ROW><id>10670778</id><snippet>if not buffer: break
</snippet></ROW><ROW><id>10670778</id><snippet>try:
    while True:
        ...
except Exception, e:
    # log e
    raise
</snippet></ROW><ROW><id>10670917</id><snippet>lab03/</snippet></ROW><ROW><id>10670917</id><snippet>export PYTHONPATH=$PYTHONPATH:/path/to/lab03</snippet></ROW><ROW><id>10670917</id><snippet>import sys
sys.path.append("/path/to/lab03")
from lab import TT 
</snippet></ROW><ROW><id>10671298</id><snippet>missing_host_key</snippet></ROW><ROW><id>10671298</id><snippet>import paraminko

paramiko.util.log_to_file('ssh.log') # sets up logging

client = paramiko.SSHClient()
client.load_system_host_keys()
client.connect('127.0.0.1', username=username, password=password)
stdin, stdout, stderr = client.exec_command('ls -l')
</snippet></ROW><ROW><id>10671871</id><snippet>subprocess</snippet></ROW><ROW><id>10671871</id><snippet>envoy</snippet></ROW><ROW><id>10671871</id><snippet>GNU/Linux</snippet></ROW><ROW><id>10671871</id><snippet>fabric</snippet></ROW><ROW><id>10671871</id><snippet>virtualenv</snippet></ROW><ROW><id>10671871</id><snippet>port no</snippet></ROW><ROW><id>10671871</id><snippet>subdomain</snippet></ROW><ROW><id>10671871</id><snippet>References</snippet></ROW><ROW><id>10671914</id><snippet>super</snippet></ROW><ROW><id>10671914</id><snippet>super</snippet></ROW><ROW><id>10671914</id><snippet>methodA</snippet></ROW><ROW><id>10671914</id><snippet>methodB</snippet></ROW><ROW><id>10671914</id><snippet>self</snippet></ROW><ROW><id>10671914</id><snippet>if whatever:
   self.methodA()
else:
   self.methodB()
</snippet></ROW><ROW><id>10671914</id><snippet>class C(A, B):
    def methodA(self):
        if whatever:
            A.methodA(self)
        else:
            B.methodA(self)
</snippet></ROW><ROW><id>10672168</id><snippet>    import numpy as np
    A = np.array([[ 12.,   0.],[  0.,   4.]])
    B = np.array([[ 13.,   5.],[  -1.,   -5.]])
    C = np.where(A&gt;B,A,B)
    &gt;&gt;&gt; C
    array([[ 13.,   5.],
    [  0.,   4.]])
</snippet></ROW><ROW><id>10672311</id><snippet>import pickle

class TasksError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

class Task(object):
    def __init__(self, task = () ):
        if task ==():
            raise TasksError('Empty task.')
        self.name = task[0]
        self.date = task[1]
        self.priority = task[2]

    def __str__(self):
        output = '''Name: %s
Date: %s
Priority: %s
''' % ( self.name,
        self.date,
        self.priority )
        return output

class Tasks(object):
    def __init__(self, container = []):
        self.container = [ Task(todo) for todo in container ]

    def find_by_priority(self, priority = 'high'):
        # example method to seek and print high priority tasks
        # using this example, you will be able to conduct many
        # types of searches
        results = [ task
                   for task in self.container
                   if task.priority == priority ]
        return results

    def sort_by_date(self):
        # example method of how to sort, again, many other
        # ways of sorting can be implemented, this is just
        # to demonstrate the principle
        # for more info on sorting,
        # visit:  http://wiki.python.org/moin/HowTo/Sorting
        self.container = sorted(self.container,
                                key=lambda task: task.date)

    def add(self, task):
        if task == '':
            raise TasksError('Empty task')
        self.container.append( Task(task) )

    def save(self):
        try:
            output = open('tasks.pkl', 'wb')
            pickle.dump(self.container, output)
            output.close()
        except:
            raise TasksError('Failed to save.')

    def load(self):
        try:
            pkl_file = open('tasks.pkl', 'rb')
            self.container = pickle.load(pkl_file)
            pkl_file.close()
        except:
            raise TasksError('Failed to load')

    def __str__(self):
        output = '\n'.join( [ str(todo) for todo in self.container ] )
        return output

if __name__== "__main__":
    divider = '-' * 30 + '\n'

    tasks = Tasks( [("birthday","20121111","high"),
                    ("christmas","20121225","medium"),
                    ("easter","20120405","low")] )
    print 'Three original tasks:\n'
    print tasks # prints out three tasks
    print divider

    tasks.add( ("new-task","20120320","high") )
    print 'Three original plus one new task:\n'
    print tasks # prints out four tasks
    print divider

    tasks.save() # pickles the task list and saves to disk

    tasks = Tasks( container = [] ) # creates a new, empty task list
    print 'Empty task list:\n'
    print tasks # prints out empty list
    print divider

    tasks.load() # loads the pickled list
    print 'The four pickled tasks, reloaded:\n'
    print tasks # prints out four tasks
    print divider

    while True:
        print divider, '''Make your selection:
1. Add new task
2. Print all tasks
3. Save tasks
4. Load tasks from disk
5. Find high priority tasks
6. Sort by date
&lt;ENTER&gt; to quit
'''
        try:
            menu_choice = int(input("Select a number from the menu: "))
        except:
            print 'Goodbye!'
            break

        if menu_choice == 1:
            # note: no error checking here
            # even an empty input is accepted
            task = raw_input ("&gt;&gt;&gt; Task: ")
            date = raw_input ("&gt;&gt;&gt; Date as string YYYYMMDD: ")
            priority = raw_input ("&gt;&gt;&gt; Priority: ")
            todo = (task, date, priority)
            # note that here you should add a task
            # your method created a NEW task list
            # and replaced the old one
            tasks.add( todo )
            print tasks
        elif menu_choice == 2:
            print divider, 'Printing all tasks'
            print tasks
        elif menu_choice == 3:
            print divider, 'Saving all tasks'
            tasks.save()
        elif menu_choice == 4:
            print divider, 'Loading tasks from disk'
            tasks.load()
        elif menu_choice == 5:
            print divider, 'Finding tasks by priority'
            results = tasks.find_by_priority(priority='high')
            for result in results: print result
        elif menu_choice == 6:
            print divider, 'Sorting by date'
            tasks.sort_by_date()
            print tasks
</snippet></ROW><ROW><id>10672361</id><snippet>RandMAC</snippet></ROW><ROW><id>10672361</id><snippet>RandMAC()</snippet></ROW><ROW><id>10672361</id><snippet>scapy</snippet></ROW><ROW><id>10672361</id><snippet>RandXXXXX</snippet></ROW><ROW><id>10672361</id><snippet>RandMac</snippet></ROW><ROW><id>10672361</id><snippet>RandByte</snippet></ROW><ROW><id>10672361</id><snippet>RandByte</snippet></ROW><ROW><id>10672361</id><snippet>volatile.py</snippet></ROW><ROW><id>10672361</id><snippet>VolatileValue</snippet></ROW><ROW><id>10672361</id><snippet>__getattr__</snippet></ROW><ROW><id>10672361</id><snippet>__str__</snippet></ROW><ROW><id>10672361</id><snippet>str()</snippet></ROW><ROW><id>10672361</id><snippet>print</snippet></ROW><ROW><id>10672361</id><snippet>_fix</snippet></ROW><ROW><id>10672361</id><snippet>X = RandMAC()._fix()</snippet></ROW><ROW><id>10672361</id><snippet>str</snippet></ROW><ROW><id>10672361</id><snippet>RandMAC</snippet></ROW><ROW><id>10672361</id><snippet>_fix</snippet></ROW><ROW><id>10672361</id><snippet>str</snippet></ROW><ROW><id>10672361</id><snippet>volatile.py</snippet></ROW><ROW><id>10672376</id><snippet>*</snippet></ROW><ROW><id>10672376</id><snippet>invoke(module, 'foo', *(1, 2))
</snippet></ROW><ROW><id>10672505</id><snippet>a = np.arange(16).reshape((4,4))
a_view = a[::2, ::3]  # basic slicing
a_copy = a[[0, 2], :]  # advanced
</snippet></ROW><ROW><id>10672679</id><snippet>%d</snippet></ROW><ROW><id>10672679</id><snippet>ffmpeg -i n.wmv -ss 00:00:20 -t 00:00:1 -s 320×240 -r 1 -f singlejpeg myframe.jpg
</snippet></ROW><ROW><id>10672679</id><snippet>ffmpeg -i test.avi -vcodec png -ss 10 -vframes 1 -an -f rawvideo test.png
</snippet></ROW><ROW><id>10672750</id><snippet>os.getuid()</snippet></ROW><ROW><id>10672750</id><snippet>/etc/passwd</snippet></ROW><ROW><id>10672750</id><snippet>/etc/passwd</snippet></ROW><ROW><id>10672750</id><snippet>HOME</snippet></ROW><ROW><id>10672750</id><snippet>expanduser</snippet></ROW><ROW><id>10672750</id><snippet>    if 'HOME' not in os.environ:
        import pwd
        userhome = pwd.getpwuid(os.getuid()).pw_dir
    else:
        userhome = os.environ['HOME']
</snippet></ROW><ROW><id>10672883</id><snippet>webob</snippet></ROW><ROW><id>10672949</id><snippet>items = [
       PyRSS2Gen.RSSItem(
         title = "Vocab of the Day - Date",
         link = "http://www.JapLearn.com",
         description = "   Japanese: "+jp+
                       "Translation: "+en,
         pubDate = datetime.datetime()
    )]
</snippet></ROW><ROW><id>10672949</id><snippet>(</snippet></ROW><ROW><id>10672949</id><snippet>[</snippet></ROW><ROW><id>10672949</id><snippet>editor</snippet></ROW><ROW><id>10672949</id><snippet>pudate = datetime.datetime()</snippet></ROW><ROW><id>10672949</id><snippet>  File "rss.py", line 22, in &lt;module&gt;
    pubDate = datetime.datetime(),
TypeError: Required argument 'year' (pos 1) not found
</snippet></ROW><ROW><id>10673019</id><snippet>x = to_binary(int(x, 2) + 1)
</snippet></ROW><ROW><id>10673019</id><snippet>bin</snippet></ROW><ROW><id>10673019</id><snippet>to_binary</snippet></ROW><ROW><id>10673019</id><snippet>'0000'</snippet></ROW><ROW><id>10673019</id><snippet>'0001'</snippet></ROW><ROW><id>10673019</id><snippet>'0010'</snippet></ROW><ROW><id>10673019</id><snippet>itertools.product</snippet></ROW><ROW><id>10673019</id><snippet>import itertools
for x in map(''.join, itertools.product('01', repeat=4)):
    print x

0000
0001
0010
...
</snippet></ROW><ROW><id>10673201</id><snippet>a</snippet></ROW><ROW><id>10673201</id><snippet>indexes_list</snippet></ROW><ROW><id>10673201</id><snippet>indexes_list = [(3, 2), (2, 2), (1, 2)]
b = [['0', '0', '0'], ['0', '0', '0'], ['0', '0', '0'], ['0', '0', '0']]

for item in indexes_list:
    b[item[0]][item[1]] = '1'

print b
</snippet></ROW><ROW><id>10673201</id><snippet>[['0', '0', '0'], ['0', '0', '1'], ['0', '0', '1'], ['0', '0', '1']]
</snippet></ROW><ROW><id>10673201</id><snippet>b</snippet></ROW><ROW><id>10673201</id><snippet>bb = ['0', '0', '0']
b = [bb, bb, bb, bb]          # Wrong!!!
</snippet></ROW><ROW><id>10673201</id><snippet>b = [['0', '0', '0']] * 4     # Wrong!!!
</snippet></ROW><ROW><id>10673224</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10673224</id><snippet>communicate</snippet></ROW><ROW><id>10673224</id><snippet>process=subprocess.Popen(['command','--option','foo'],
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
inputdata="This is the string I will send to the process"
stdoutdata,stderrdata=process.communicate(input=inputdata)
</snippet></ROW><ROW><id>10673307</id><snippet>from twisted.internet import task
from twisted.internet import reactor

def runEverySecond():
    print "a second has passed"

l = task.LoopingCall(runEverySecond)
l.start(1.0) # call every second

reactor.run()
</snippet></ROW><ROW><id>10673456</id><snippet>&gt;&gt;&gt; L = [int("%d%d%d" % (x,y,x)) for x in range(1,10) for y in range(10)]
&gt;&gt;&gt; L
[101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252,
 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414,
 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575,
 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737,
 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898,
 909, 919, 929, 939, 949, 959, 969, 979, 989, 999]
</snippet></ROW><ROW><id>10673456</id><snippet>x+y*10+x*100</snippet></ROW><ROW><id>10673456</id><snippet>k</snippet></ROW><ROW><id>10673456</id><snippet>[int(''.join(map(str, (([x]+list(ys)+[z]+list(ys)[::-1]+[x]) if k%2
                  else ([x]+list(ys)+list(ys)[::-1]+[x])))))
            for x in range(1,10)
            for ys in itertools.permutations(range(10), k/2-1)
            for z in (range(10) if k%2 else (None,))]
</snippet></ROW><ROW><id>10673456</id><snippet>[sum([n*(10**i) for i,n in enumerate(([x]+list(ys)+[z]+list(ys)[::-1]+[x]) if k%2
                                else ([x]+list(ys)+list(ys)[::-1]+[x]))])
            for x in range(1,10)
            for ys in itertools.permutations(range(10), k/2-1)
            for z in (range(10) if k%2 else (None,))]
</snippet></ROW><ROW><id>10673456</id><snippet>0</snippet></ROW><ROW><id>10673456</id><snippet>k%2 == 1</snippet></ROW><ROW><id>10673569</id><snippet>non_blank_count = 0

with open('data.txt') as infp:
    for line in infp:
       if line.strip():
          non_blank_count += 1

print 'number of non-blank lines found %d' % non_blank_count
</snippet></ROW><ROW><id>10673865</id><snippet>a*i1+b*i2+c*i3</snippet></ROW><ROW><id>10673865</id><snippet>def dot_product(a, b):
    return sum(x * y for x, y in zip(a, b))
</snippet></ROW><ROW><id>10673865</id><snippet>for i1 in _1to9 for i2 in _1to9 for i3 in _1to9</snippet></ROW><ROW><id>10673865</id><snippet>[_1to9] * 3</snippet></ROW><ROW><id>10673865</id><snippet>itertools.product</snippet></ROW><ROW><id>10673865</id><snippet>[dot_product([a, b, c], x) for x in itertools.product(_1to9, repeat=3)]
</snippet></ROW><ROW><id>10673865</id><snippet>l</snippet></ROW><ROW><id>10673865</id><snippet>[dot_product(l, x) for x in itertools.product(_1to9, repeat=len(l))]
</snippet></ROW><ROW><id>10674040</id><snippet>django-microblogging-0.1.2</snippet></ROW><ROW><id>10674040</id><snippet>heroku config:add BUILDPACK_URL=git@github.com:heroku/heroku-buildpack-python.git#purge</snippet></ROW><ROW><id>10674040</id><snippet>django-microblogging-0.2.dev1.tar.gz
# or
path_to/django-microblogging-0.2.dev1.tar.gz
</snippet></ROW><ROW><id>10674040</id><snippet>requirements.txt</snippet></ROW><ROW><id>10674040</id><snippet>django-microblogging==0.2.dev1
</snippet></ROW><ROW><id>10674134</id><snippet>list_of_names = ['a', 'b', 'c', 'd']
for name in list_of_names:
    globals()[name] = your_object()
</snippet></ROW><ROW><id>10674608</id><snippet>In [75]: from numpy import random, array

In [76]: from numpy.linalg import norm

In [77]: 

In [77]: A = random.rand(1000,3)

In [78]: timeit normedA_0 = array([norm(v) for v in A])
100 loops, best of 3: 16.5 ms per loop

In [79]: timeit normedA_1 = array(map(norm, A))
100 loops, best of 3: 16.9 ms per loop

In [80]: timeit normedA_2 = map(norm, A)
100 loops, best of 3: 16.7 ms per loop

In [81]: timeit normedA_4 = (A*A).sum(axis=1)**0.5
10000 loops, best of 3: 46.2 us per loop
</snippet></ROW><ROW><id>10674608</id><snippet>math.sqrt</snippet></ROW><ROW><id>10674608</id><snippet>**0.5</snippet></ROW><ROW><id>10674608</id><snippet>In [114]: timeit normedA_4 = (A*A).sum(axis=1)**0.5
10000 loops, best of 3: 46.2 us per loop

In [115]: from numpy import sqrt

In [116]: timeit normedA_4 = sqrt((A*A).sum(axis=1))
10000 loops, best of 3: 45.8 us per loop
</snippet></ROW><ROW><id>10674651</id><snippet>&gt;&gt;&gt;line = ''
&gt;&gt;&gt;fields = line.split(":")
&gt;&gt;&gt;print fields[0]
''
&gt;&gt;&gt;print fields[-1]
''
&gt;&gt;&gt;print fields[0:6]
''
&gt;&gt;&gt;print fields[1]
IndexError: list index out of range
</snippet></ROW><ROW><id>10674651</id><snippet>for line in lines:        
    line = line.rstrip()
    fields = line.split(':')
    if len(fields) == 1:
        continue
    print fields[0]
</snippet></ROW><ROW><id>10674764</id><snippet>#!/usr/bin/env python

from scrape import s
import sys, re

if len(sys.argv) &lt; 2:
    print "Usage: words.py url"
    sys.exit(0)

s.go(sys.argv[1]) # fetch content
text = s.doc.text # extract readable text
text = re.sub("\W+", " ", text) # remove all non-word characters and repeating whitespace
print text
</snippet></ROW><ROW><id>10674764</id><snippet>./words.py http://whatever.com</snippet></ROW><ROW><id>10674885</id><snippet>pos_tag</snippet></ROW><ROW><id>10674885</id><snippet>tagged = [('the', 'DT'), ('dog', 'NN'), ('sees', 'VB'), ('the', 'DT'), ('cat', 'NN')] 
</snippet></ROW><ROW><id>10674885</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter(tag for word,tag in tagged)
&gt;&gt;&gt; counts
Counter({'DT': 2, 'NN': 2, 'VB': 1})
</snippet></ROW><ROW><id>10674885</id><snippet>&gt;&gt;&gt; total = sum(counts.values())
&gt;&gt;&gt; dict((word, float(count)/total) for word,count in counts.items())
{'DT': 0.4, 'VB': 0.2, 'NN': 0.4}
</snippet></ROW><ROW><id>10674885</id><snippet>Counter</snippet></ROW><ROW><id>10674885</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; counts = defaultdict(int)
&gt;&gt;&gt; for word, tag in tagged:
...  counts[tag] += 1

&gt;&gt;&gt; counts
defaultdict(&lt;type 'int'&gt;, {'DT': 2, 'VB': 1, 'NN': 2})
</snippet></ROW><ROW><id>10674950</id><snippet>MyButton = Tkinter.Button(
    self.frame, 
    text = "Foobar", 
    command = self.foobar, 
    relief=Tkinter.SUNKEN
)
</snippet></ROW><ROW><id>10674950</id><snippet>import Tkinter

class main:
        def __init__(self,root):
                # make a label with some space around the text
                self.lbl1 = Tkinter.Label(root,
                                          width = 16, height = 4,
                                          text = "Foobar")                
                self.lbl1.pack()

                # Call a function when lbl1 is clicked
                # &lt;Button-1&gt; means a left mouse button click
                self.lbl1.bind("&lt;Button-1&gt;", self.yadda)
                self.lbl1.bind("&lt;Enter&gt;", self.green)
                self.lbl1.bind("&lt;Leave&gt;", self.red)

        def yadda(self, event):
                self.lbl1.config(text="Clicked!")

        def green(self, event):
                self.lbl1.config(bg="green")

        def red(self,event):
                self.lbl1.config(bg="red")

if __name__ == "__main__":
    root = Tkinter.Tk()
    main(root)
    root.mainloop() 
</snippet></ROW><ROW><id>10674965</id><snippet>mydb</snippet></ROW><ROW><id>10675081</id><snippet>importlib.import_module('.c', 'a.b')
</snippet></ROW><ROW><id>10675081</id><snippet>importlib.import_module('a.b.c')
</snippet></ROW><ROW><id>10675179</id><snippet>A</snippet></ROW><ROW><id>10675179</id><snippet>object</snippet></ROW><ROW><id>10675179</id><snippet>object</snippet></ROW><ROW><id>10675355</id><snippet>testFeed.feed.updated</snippet></ROW><ROW><id>10675355</id><snippet>datetime.datetime</snippet></ROW><ROW><id>10675355</id><snippet>lastUpdatedTime</snippet></ROW><ROW><id>10675355</id><snippet>cursor.execute("Select LastUpdatedTime from Timing")
# Note that I'm not converting this to a string.
lastUpdatedTime=datetime.strptime(list(cursor.fetchone())[0],'%Y-%m-%dT%H:%M:%SZ')
</snippet></ROW><ROW><id>10675355</id><snippet>testFeed.feed.updated</snippet></ROW><ROW><id>10675355</id><snippet>feedUpdatedTime=datetime.strptime(testFeed.feed.updated,'%Y-%m-%dT%H:%M:%SZ')
</snippet></ROW><ROW><id>10675355</id><snippet>print feedUpdatedTime == lastUpdatedTime
</snippet></ROW><ROW><id>10675429</id><snippet>@decorated(argument) def foo(...)</snippet></ROW><ROW><id>10675429</id><snippet>def foo(...); foo = decorated(argument)(foo)</snippet></ROW><ROW><id>10675429</id><snippet>decorated</snippet></ROW><ROW><id>10675429</id><snippet>decorated(argument)</snippet></ROW><ROW><id>10675429</id><snippet>foo</snippet></ROW><ROW><id>10675429</id><snippet>decorated</snippet></ROW><ROW><id>10675429</id><snippet>__call__</snippet></ROW><ROW><id>10675429</id><snippet>decorated(argument)</snippet></ROW><ROW><id>10675429</id><snippet>argument</snippet></ROW><ROW><id>10675429</id><snippet>class decorator(object):
    def __init__(argument):
        self.argument = argument

    def __call__(self, wrapped):
        def wrapper(args_for_wrapped):
            do_something_with(self.argument)
            wrapped(args_for_wrapped)
            whatever_else_this_needs_to_do()
        return wrapper
</snippet></ROW><ROW><id>10675429</id><snippet>functools.partial</snippet></ROW><ROW><id>10675886</id><snippet>def to_dict(self):
    return dict((p, unicode(getattr(self, p))) for p in self.properties()
                if getattr(self, p) is not None)
</snippet></ROW><ROW><id>10675886</id><snippet>[]</snippet></ROW><ROW><id>10675886</id><snippet># Define 'simple' types
SIMPLE_TYPES = (int, long, float, bool, dict, basestring, list)

def to_dict(model):
    output = {}

    for key, prop in model.properties().iteritems():
        value = getattr(model, key)

        if isinstance(value, SIMPLE_TYPES) and value is not None:
            output[key] = value
        elif isinstance(value, datetime.date):
            # Convert date/datetime to ms-since-epoch ("new Date()").
            ms = time.mktime(value.utctimetuple())
            ms += getattr(value, 'microseconds', 0) / 1000
            output[key] = int(ms)
        elif isinstance(value, db.GeoPt):
            output[key] = {'lat': value.lat, 'lon': value.lon}
        elif isinstance(value, db.Model):
            # Recurse
            output[key] = to_dict(value)
        else:
            raise ValueError('cannot encode ' + repr(prop))

    return output
</snippet></ROW><ROW><id>10675886</id><snippet>elif</snippet></ROW><ROW><id>10675944</id><snippet>datetime.py</snippet></ROW><ROW><id>10675944</id><snippet>try:
    from _datetime import *
except ImportError:
    pass
</snippet></ROW><ROW><id>10676072</id><snippet>python</snippet></ROW><ROW><id>10676330</id><snippet>linecache</snippet></ROW><ROW><id>10676330</id><snippet>import linecache

filename = 'observations1.txt'

# Start at 44th line
curline = 44
lines = []

# Keep looping until no return string is found
# getline() never throws errors, but returns an empty string ''
# if the line wasn't found (if the line was actually empty, it would have
# returned the newline character '\n')
while linecache.getline(filename, curline):
    for i in xrange(75):
        lines.append(linecache.getline(filename, curline).rstrip())
        curline += 1

    # Perform work with the set of observation lines
    add_to_observation_log(lines)

    # Skip the unnecessary section and reset the lines list
    curline += 4
    lines = []
</snippet></ROW><ROW><id>10676359</id><snippet>at</snippet></ROW><ROW><id>10676359</id><snippet>command = 'echo python foo.py %s %s | at %s' % (arg1, arg2, starttime)
</snippet></ROW><ROW><id>10676359</id><snippet>sched_cmd = ['at', starttime]
command = 'python foo.py %s %s' % (arg1, arg2)
p = subprocess.Popen(sched_cmd, stdin=subprocess.PIPE)
p.communicate(command)
</snippet></ROW><ROW><id>10676503</id><snippet>from threading import currentThread

caches = {}

class RequestCache(object):
    def set(self, key, value):
        cache_id = hash(currentThread())
        if caches.get(cache_id):
            caches[cache_id][key] = value
        else:
            caches[cache_id] = {key: value}

    def get(self, key):
        cache_id = hash(currentThread())
        cache = caches.get(cache_id)
        if cache:
            return cache.get(key)
        return None

class RequestCacheMiddleware(object):
    def process_response(self, request, response):
        cache_id = hash(currentThread())
        if caches.get(cache_id):
            del(caches[cache_id])
        return response
</snippet></ROW><ROW><id>10676503</id><snippet>caches</snippet></ROW><ROW><id>10676503</id><snippet>get</snippet></ROW><ROW><id>10676503</id><snippet>set</snippet></ROW><ROW><id>10676503</id><snippet>process_response</snippet></ROW><ROW><id>10676503</id><snippet>from request_cache import RequestCache
cache = RequestCache()
cache.get(key)
cache.set(key, value)
</snippet></ROW><ROW><id>10676514</id><snippet>$ python -c 'd = {}; print d["a"]'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
KeyError: 'a'
$ perl -e '$d = {};  print $d-&gt;{a}'
$ 
</snippet></ROW><ROW><id>10676514</id><snippet>$ python -c 'd = dict(); d["a"]["b"]["c"]=1'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
KeyError: 'a'
$ perl -e '$d = {};  $d-&gt;{a}{b}{c}=1'
$
</snippet></ROW><ROW><id>10676514</id><snippet>perl</snippet></ROW><ROW><id>10676514</id><snippet>python</snippet></ROW><ROW><id>10677032</id><snippet>a_list</snippet></ROW><ROW><id>10677032</id><snippet>&gt;&gt;&gt; def f(x=[]): return x
...
&gt;&gt;&gt; f.func_defaults
([],)
&gt;&gt;&gt; f.func_defaults[0] is f()
</snippet></ROW><ROW><id>10677032</id><snippet>func_defaults</snippet></ROW><ROW><id>10677032</id><snippet>f()</snippet></ROW><ROW><id>10677032</id><snippet>x = f.func_defaults[0]</snippet></ROW><ROW><id>10677032</id><snippet>[]</snippet></ROW><ROW><id>10677032</id><snippet>[]</snippet></ROW><ROW><id>10677032</id><snippet>[]</snippet></ROW><ROW><id>10677032</id><snippet>[]</snippet></ROW><ROW><id>10677060</id><snippet>import re
from collections import Counter

&gt;&gt;&gt; text = ['this', 'is', 'a', 'sentence', '.']
&gt;&gt;&gt; nonPunct = re.compile('.*[A-Za-z0-9].*')  # must contain a letter or digit
&gt;&gt;&gt; filtered = [w for w in text if nonPunct.match(w)]
&gt;&gt;&gt; counts = Counter(filtered)
&gt;&gt;&gt; counts
Counter({'this': 1, 'a': 1, 'is': 1, 'sentence': 1})
</snippet></ROW><ROW><id>10677060</id><snippet>&gt;&gt;&gt; float(sum(map(len, filtered))) / len(filtered)
3.75
</snippet></ROW><ROW><id>10677060</id><snippet>&gt;&gt;&gt; float(sum(len(w)*c for w,c in counts.iteritems())) / len(filtered)
3.75
</snippet></ROW><ROW><id>10677386</id><snippet>locale.format()</snippet></ROW><ROW><id>10677386</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US.utf8')
'en_US.utf8'
&gt;&gt;&gt; locale.format("%.2f", 100028282.23, grouping=True)
'100,028,282.23'
</snippet></ROW><ROW><id>10677386</id><snippet>%.2f</snippet></ROW><ROW><id>10677386</id><snippet>locale.currency()</snippet></ROW><ROW><id>10677386</id><snippet>LC_MONETARY</snippet></ROW><ROW><id>10677386</id><snippet>&gt;&gt;&gt; locale.currency(100028282.23)
'$100028282.23'
</snippet></ROW><ROW><id>10677566</id><snippet>showEvent</snippet></ROW><ROW><id>10677566</id><snippet>QTimer.singleShot</snippet></ROW><ROW><id>10677566</id><snippet>class MyWindow(QtGui.QMainWindow):
  def __init__(self, parent=None):

    QtGui.QWidget.__init__(self, parent)

    ... init stuff here...

    QtCore.QTimer.singleShot(500, self.OnLoad)

  def OnLoad(self):
    ... my stuff here...
</snippet></ROW><ROW><id>10677708</id><snippet>{{Infobox(?:(?!}}|{{).)*(?:{{(?:(?!}}|{{).)*}}(?:(?!}}|{{).)*)*.*?}}
</snippet></ROW><ROW><id>10677708</id><snippet>while ($subject =~ m/\{\{Infobox(?:(?!\}\}|\{\{).)*(?:\{\{(?:(?!\}\}|\{\{).)*\}\}(?:(?!\}\}|\{\{).)*)*.*?\}\}/sg) {
    # matched text = $&amp;
}
</snippet></ROW><ROW><id>10677748</id><snippet>This tutorial is using OpenCV 3.x version</snippet></ROW><ROW><id>10677748</id><snippet>cv2</snippet></ROW><ROW><id>10677748</id><snippet>cv</snippet></ROW><ROW><id>10677805</id><snippet>a[..., numpy.newaxis] * b[numpy.newaxis, ...]
</snippet></ROW><ROW><id>10677805</id><snippet>In : a = numpy.random.randn(5,2,3)

In : b = numpy.random.randn(2,3,8)

In : c = a[..., numpy.newaxis]*b[numpy.newaxis, ...]

In : c.shape
Out: (5, 2, 3, 8)
</snippet></ROW><ROW><id>10677896</id><snippet>&gt;&gt;&gt; df = DataFrame(np.random.rand(4,5), columns = list('abcde'))
&gt;&gt;&gt; df.ix[:,'b':]
      b         c         d         e
0  0.418762  0.042369  0.869203  0.972314
1  0.991058  0.510228  0.594784  0.534366
2  0.407472  0.259811  0.396664  0.894202
3  0.726168  0.139531  0.324932  0.906575
</snippet></ROW><ROW><id>10678037</id><snippet>cshift</snippet></ROW><ROW><id>10678037</id><snippet>for file_index, file_name in enumerate(files):
    rbook = xlrd.open_workbook(file_name)
    rsheet = rbook.sheet_by_index(0)
    cbc(rsheet, wsheet, chi = 2, cshift = file_index * 2)
</snippet></ROW><ROW><id>10678037</id><snippet>if chi is None: chi = 2</snippet></ROW><ROW><id>10678037</id><snippet>if chi is None: chi = rsheet.ncols</snippet></ROW><ROW><id>10678037</id><snippet>chi=2</snippet></ROW><ROW><id>10678167</id><snippet>BigIntegerField</snippet></ROW><ROW><id>10678167</id><snippet>BigIntegerField</snippet></ROW><ROW><id>10678167</id><snippet>class BigIntegerField(IntegerField):
    empty_strings_allowed = False
    description = _("Big (8 byte) integer")
    MAX_BIGINT = 9223372036854775807

    def get_internal_type(self):
        return "BigIntegerField"

    def formfield(self, **kwargs):
        defaults = {'min_value': -BigIntegerField.MAX_BIGINT - 1,
                    'max_value': BigIntegerField.MAX_BIGINT}
        defaults.update(kwargs)
        return super(BigIntegerField, self).formfield(**defaults)
</snippet></ROW><ROW><id>10678167</id><snippet>PositiveBigIntegerField</snippet></ROW><ROW><id>10678167</id><snippet>class PositiveBigIntegerField(BigIntegerField):
    empty_strings_allowed = False
    description = _("Big (8 byte) positive integer")

    def db_type(self, connection):
        """
        Returns MySQL-specific column data type. Make additional checks
        to support other backends.
        """
        return 'bigint UNSIGNED'

    def formfield(self, **kwargs):
        defaults = {'min_value': 0,
                    'max_value': BigIntegerField.MAX_BIGINT * 2 - 1}
        defaults.update(kwargs)
        return super(PositiveBigIntegerField, self).formfield(**defaults)
</snippet></ROW><ROW><id>10678167</id><snippet>get_internal_type()</snippet></ROW><ROW><id>10678167</id><snippet>db_type()</snippet></ROW><ROW><id>10678167</id><snippet>db_type()</snippet></ROW><ROW><id>10678167</id><snippet>connection</snippet></ROW><ROW><id>10678240</id><snippet>&gt;&gt;&gt; test = "have it break."
&gt;&gt;&gt; selectiveEscape = "Print percent %% in sentence and not %s" % test
&gt;&gt;&gt; print selectiveEscape
Print percent % in sentence and not have it break.
</snippet></ROW><ROW><id>10678425</id><snippet>/student/edit/</snippet></ROW><ROW><id>10678425</id><snippet>/student/new/</snippet></ROW><ROW><id>10678425</id><snippet>/student/edit/</snippet></ROW><ROW><id>10678448</id><snippet>mylist  = [True , True, False]

[not i for i in mylist]
</snippet></ROW><ROW><id>10678448</id><snippet>[False, False, True]
</snippet></ROW><ROW><id>10678767</id><snippet>markdown.extensions.Extension</snippet></ROW><ROW><id>10678767</id><snippet>class CustomHeaderParser( BlockParser )
    def run( params )
        # implementation

class CustomExtension( Extension )
    def extendMarkdown( self, md, md_globals )
        md.parser.blockprocessor.add( 'custom_header_parser', CustomHeaderParser(md.parser), '&lt;hashheader' )
        md.registerExtension( self )


markdown_parser = markdown.Markdown( extensions=[ CaretHeaderExtension() ] )
markdown_parser.convert( markdown_text )
</snippet></ROW><ROW><id>10678962</id><snippet>(.*?)</snippet></ROW><ROW><id>10678962</id><snippet>(.)*?</snippet></ROW><ROW><id>10678962</id><snippet>(.)</snippet></ROW><ROW><id>10678962</id><snippet>(.*?)</snippet></ROW><ROW><id>10679064</id><snippet>"""</snippet></ROW><ROW><id>10679064</id><snippet>'''</snippet></ROW><ROW><id>10679064</id><snippet>"</snippet></ROW><ROW><id>10679121</id><snippet>toplevel
  requirements.txt
  myapp
    manage.py
    all other django stuff
</snippet></ROW><ROW><id>10679225</id><snippet>mydocumentwidget</snippet></ROW><ROW><id>10679225</id><snippet>doc_child = getChildOfDocument() # pseudo
rect = doc_child.geometry()

mappedPoint = doc_child.mapToParent(rect.topleft())
# alternative #
# mappedPoint = doc_child.mapTo(mydocumentwidget, rect.topleft()) 

mappedRect = QtCore.QRect(mappedPoint, rect.size())
intersection = rubberband.geometry().intersected(mappedRect)
</snippet></ROW><ROW><id>10679289</id><snippet>from visa import *
my_instrument_name = "GPIB::14"
if my_instrument_name in visa.get_instruments_list():
    print('Instrument exists connecting to it')
    my_instrument = instrument(my_instrument_name)
else:
    print('Instrument not found, not connecting')
</snippet></ROW><ROW><id>10679289</id><snippet>from visa import *
my_instrument_name = "GPIB::14"
try:
    my_instrument = instrument(my_instrument_name)
    print('Instrument connected')
except(visa.VisaIOError):
    print('Instrument not connected (timeout error)')
</snippet></ROW><ROW><id>10679331</id><snippet>def moveEvent(self, event):
    self.checkVisibility()
    event.ignore()

def resizeEvent(self, event):
    self.checkVisibility()
    event.ignore()

def checkVisibility(self):
    print "Checking visibility"
    for page in self.getPages():
        if not page.visibleRegion().isEmpty():
            if page.was_visible:
                pass
            else:
                print page.page_number, "became visible"
                page.was_visible = True
                self.applyImageToPage(page)
        else:
            if page.was_visible:
                print page.page_number, "became invisible"
                page.was_visible = False
            else:
                pass
def applyImageToPage(self, page):
    print "applying image to page", page.page_number
    source = self.getSourcePage(self.getPageNumber(page))
    scale = self.display.scale
        # this is where the error occurs
    image = source.renderToImage(72 * scale, 72 * scale)
    pixmap = QtGui.QPixmap.fromImage(image)
    page.setPixmap(pixmap)
</snippet></ROW><ROW><id>10679361</id><snippet>POINTER(POINTER(myStruct))</snippet></ROW><ROW><id>10679361</id><snippet>library.func.argtypes = [c_void_p]
</snippet></ROW><ROW><id>10679361</id><snippet>myStruct</snippet></ROW><ROW><id>10679361</id><snippet>func</snippet></ROW><ROW><id>10679361</id><snippet>myStruct</snippet></ROW><ROW><id>10679361</id><snippet>Foo = ctypes.POINTER(myStruct)()
</snippet></ROW><ROW><id>10679361</id><snippet>myStruct*</snippet></ROW><ROW><id>10679361</id><snippet>func</snippet></ROW><ROW><id>10679361</id><snippet>byref</snippet></ROW><ROW><id>10679361</id><snippet>Bar = library.func(byref(Foo))
</snippet></ROW><ROW><id>10679361</id><snippet>Foo[i]</snippet></ROW><ROW><id>10679361</id><snippet>for i in range(Bar):
    print("id = %u, name = %s" % (Foo[i].id, Foo[i].name))
</snippet></ROW><ROW><id>10679429</id><snippet>brentq</snippet></ROW><ROW><id>10679429</id><snippet>brentq</snippet></ROW><ROW><id>10679429</id><snippet>xa</snippet></ROW><ROW><id>10679429</id><snippet>xb</snippet></ROW><ROW><id>10679429</id><snippet>xa</snippet></ROW><ROW><id>10679429</id><snippet>xb</snippet></ROW><ROW><id>10679429</id><snippet>def getDistribution(data):
    kernel = stats.gaussian_kde(data)
    class rv(stats.rv_continuous):
        def _cdf(self, x):
            return kernel.integrate_box_1d(-numpy.Inf, x)
    return rv(name='kdedist', xa=-200, xb=200)
</snippet></ROW><ROW><id>10679429</id><snippet>xa</snippet></ROW><ROW><id>10679429</id><snippet>xb</snippet></ROW><ROW><id>10679429</id><snippet>f(a) and f(b) must have different signs</snippet></ROW><ROW><id>10679429</id><snippet>_pdf</snippet></ROW><ROW><id>10679533</id><snippet>__getitem__</snippet></ROW><ROW><id>10679533</id><snippet>__getslice__</snippet></ROW><ROW><id>10679533</id><snippet>__getitem__</snippet></ROW><ROW><id>10679533</id><snippet>slice</snippet></ROW><ROW><id>10679533</id><snippet>import datetime
class DatedList(list):

    def __init__(self, values, dates):
        list.__init__(self, values)
        self.dates = dates
        self._dt_to_idx = {k:v for v,k in enumerate(dates)}

    def __getitem__(self, arg):
        if isinstance(arg, slice):
            start = self._dt_to_idx[arg.start]
            stop = self._dt_to_idx[arg.stop]
            return list.__getitem__(self, slice(start, stop, arg.step))
        else:
            return list.__getitem__(self, self._dt_to_idx[arg])    


dates = [datetime.date(2012,1,x) for x in range(2,6)]
dl = DatedList([1,2,3,4], dates)
print dl[dates[2]]
print dl[dates[1]:dates[3]]
</snippet></ROW><ROW><id>10679533</id><snippet>self._dt_to_idx[...]</snippet></ROW><ROW><id>10679848</id><snippet>&gt;&gt;&gt; a = np.array([[0,1,2],[2,2,3]])
&gt;&gt;&gt; a
array([[0, 1, 2],
       [2, 2, 3]])
&gt;&gt;&gt; weights = np.array([16,4,2])
&gt;&gt;&gt; np.dot(a,weights)
array([ 8, 46])
</snippet></ROW><ROW><id>10679954</id><snippet>nr</snippet></ROW><ROW><id>10679954</id><snippet>nr.pal</snippet></ROW><ROW><id>10679954</id><snippet>nr</snippet></ROW><ROW><id>10679954</id><snippet>.pal</snippet></ROW><ROW><id>10679954</id><snippet>pal</snippet></ROW><ROW><id>10679954</id><snippet>.ncbirc</snippet></ROW><ROW><id>10679954</id><snippet>[BLAST]
BLASTDB=/directory/path/to/blast/databases
</snippet></ROW><ROW><id>10679954</id><snippet>nr</snippet></ROW><ROW><id>10679954</id><snippet>nr</snippet></ROW><ROW><id>10679954</id><snippet>NcbiblastxCommandline</snippet></ROW><ROW><id>10679954</id><snippet>print blastx_cline</snippet></ROW><ROW><id>10680090</id><snippet>import matplotlib.pyplot as plt

# define data

Oxygen = [ 0.1 , 0.5, 1, 10, 15, 20, 15, 10, 1, 0.5, 0.5]
Depth  = [ 0,     1,  2,  4,  8, 10, 12, 14, 16, 20, 40 ]

fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(Oxygen, Depth, 'go--')
ax.xaxis.tick_top()

ax.set_ylabel('depth')
ax.set_ylim(50, 0)
ax.set_xlim(0, 25)
ax.set_xlabel('Oxygen level [ppm]')

plt.show()
</snippet></ROW><ROW><id>10680262</id><snippet>syncdb</snippet></ROW><ROW><id>10680262</id><snippet>syncdb</snippet></ROW><ROW><id>10680652</id><snippet>str</snippet></ROW><ROW><id>10680652</id><snippet>str</snippet></ROW><ROW><id>10680652</id><snippet>&gt;&gt;&gt; str(2)
'2'
&gt;&gt;&gt; def str(x): return x + 1
... 
&gt;&gt;&gt; str(2)
3
&gt;&gt;&gt; str = 1
&gt;&gt;&gt; str(2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
</snippet></ROW><ROW><id>10680652</id><snippet>TypeError</snippet></ROW><ROW><id>10680652</id><snippet>str</snippet></ROW><ROW><id>10680821</id><snippet>setfacl</snippet></ROW><ROW><id>10680821</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>10680821</id><snippet>addCleanup</snippet></ROW><ROW><id>10680821</id><snippet>local_path = tempfile.mkdtemp().decode("utf-8")
self.addCleanup(shutil.rmtree, local_path)
acl = "d:u:{0}:rwX".format(os.geteuid())
subprocess.check_call(["setfacl", "-m", acl, local_path])
</snippet></ROW><ROW><id>10681328</id><snippet>request</snippet></ROW><ROW><id>10681328</id><snippet>request.POST</snippet></ROW><ROW><id>10681328</id><snippet>reqest.GET</snippet></ROW><ROW><id>10681328</id><snippet>request.REQUEST</snippet></ROW><ROW><id>10681328</id><snippet>def contact(request):
    if request.method == 'POST': # If the form has been submitted...
        form = ContactForm(request.POST) # A form bound to the POST data
        if form.is_valid(): # All validation rules pass
            # Process the data in form.cleaned_data
            # ...
            return HttpResponseRedirect('/thanks/') # Redirect after POST
    else:
        form = ContactForm() # An unbound form

    return render_to_response('contact.html', {
        'form': form,
    })
</snippet></ROW><ROW><id>10681533</id><snippet>height, width = size_as_tuple[0], size_as_tuple[1]
image.thumbnail((height, width), Image.ANTIALIAS)
</snippet></ROW><ROW><id>10681533</id><snippet>image.thumbnail(size_as_tuple, Image.ANTIALIAS)
</snippet></ROW><ROW><id>10681533</id><snippet>width</snippet></ROW><ROW><id>10681533</id><snippet>height</snippet></ROW><ROW><id>10681533</id><snippet>width, height = size_as_tuple</snippet></ROW><ROW><id>10681533</id><snippet>open()</snippet></ROW><ROW><id>10681533</id><snippet>image.save(os.path.join('/tmp', filename))</snippet></ROW><ROW><id>10681700</id><snippet>class MyAPI(object):
    def __init__(self):
       pass

    def upload(self):
       # IMPROVEMENT making this function abstract
       # This is how I do it, but you can find other ways searching on google
       raise NotImplementedError, "upload function not implemented"

    def download(self):
       # IMPROVEMENT making this function abstract
       # This is how I do it, but you can find other ways searching on google
       raise NotImplementedError, "download function not implemented"

# IMPROVEMENT Notice that I changed object to MyAPI to inherit from it
class MyAPIEx(MyAPI):
   def upload(self):
      #specific implementation

# IMPROVEMENT Notice that I changed object to MyAPI to inherit from it
class MyAPIEx2(MyAPI): 
   def upload(self)
      #specific implementation


# IMPROVEMENT changed use_api() to get_api(), which is a factory,
# call it to get the MyAPI implementation
def get_api(configDict):
     if 'MyAPIEx' in configDict:
         return MyAPIEx()
     elif 'MyAPIEx2' in configDict:
         return MyAPIEx2()
     else
         # some sort of an error

# Actual usage ... 
# IMPROVEMENT, create a config dictionary to be used in the factory
configDict = dict()
# fill in the config accordingly
obj = get_api(configDict)
obj.upload()
</snippet></ROW><ROW><id>10682404</id><snippet>pip install python-dateutil</snippet></ROW><ROW><id>10682404</id><snippet>In [1]: from datetime import datetime

In [2]: from dateutil import rrule

In [3]: list(rrule.rrule(rrule.MONTHLY, dtstart=datetime(2010,01,01,00,01), count=12))  
Out[3]: 
[datetime.datetime(2010, 1, 1, 0, 1),
 datetime.datetime(2010, 2, 1, 0, 1),
 datetime.datetime(2010, 3, 1, 0, 1),
 datetime.datetime(2010, 4, 1, 0, 1),
 datetime.datetime(2010, 5, 1, 0, 1),
 datetime.datetime(2010, 6, 1, 0, 1),
 datetime.datetime(2010, 7, 1, 0, 1),
 datetime.datetime(2010, 8, 1, 0, 1),
 datetime.datetime(2010, 9, 1, 0, 1),
 datetime.datetime(2010, 10, 1, 0, 1),
 datetime.datetime(2010, 11, 1, 0, 1),
 datetime.datetime(2010, 12, 1, 0, 1)]
</snippet></ROW><ROW><id>10682404</id><snippet>In [1]: from dateutil import rrule

In [2]: from datetime import datetime

In [3]: months = list(rrule.rrule(rrule.MONTHLY, dtstart=datetime(2010,01,01,00,01), count=13))

In [4]: i = 0

In [5]: while i &lt; len(months) - 1:
   ...:         print "start_date", months[i], "end_date", months[i+1]
   ...:         i += 1
   ...:     
start_date 2010-01-01 00:01:00 end_date 2010-02-01 00:01:00
start_date 2010-02-01 00:01:00 end_date 2010-03-01 00:01:00
start_date 2010-03-01 00:01:00 end_date 2010-04-01 00:01:00
start_date 2010-04-01 00:01:00 end_date 2010-05-01 00:01:00
start_date 2010-05-01 00:01:00 end_date 2010-06-01 00:01:00
start_date 2010-06-01 00:01:00 end_date 2010-07-01 00:01:00
start_date 2010-07-01 00:01:00 end_date 2010-08-01 00:01:00
start_date 2010-08-01 00:01:00 end_date 2010-09-01 00:01:00
start_date 2010-09-01 00:01:00 end_date 2010-10-01 00:01:00
start_date 2010-10-01 00:01:00 end_date 2010-11-01 00:01:00
start_date 2010-11-01 00:01:00 end_date 2010-12-01 00:01:00
start_date 2010-12-01 00:01:00 end_date 2011-01-01 00:01:00
</snippet></ROW><ROW><id>10682599</id><snippet>"""…"""</snippet></ROW><ROW><id>10682629</id><snippet>zeo://localhost:9100</snippet></ROW><ROW><id>10682629</id><snippet>repoze.zodbconn</snippet></ROW><ROW><id>10682704</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>10682704</id><snippet>pickle</snippet></ROW><ROW><id>10682704</id><snippet>import pickle
from collections import defaultdict

word_array = defaultdict(list)
word_array['first'].append(1)
word_array['first'].append(2)

s = pickle.dumps(word_array)
other = pickle.loads(s)

print other
</snippet></ROW><ROW><id>10682704</id><snippet>defaultdict(&lt;type 'list'&gt;, {'first': [1, 2]})
</snippet></ROW><ROW><id>10683023</id><snippet>itertools.permutations</snippet></ROW><ROW><id>10683023</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; l = [1,2,3],[4,5,6],[7,8,9]
&gt;&gt;&gt; list(itertools.permutations(l, len(l)))
[([1, 2, 3], [4, 5, 6], [7, 8, 9]), 
  ([1, 2, 3], [7, 8, 9], [4, 5, 6]),
  ([4, 5, 6], [1, 2, 3], [7, 8, 9]), 
  ([4, 5, 6], [7, 8, 9], [1, 2, 3]),
  ([7, 8, 9], [1, 2, 3], [4, 5, 6]),
  ([7, 8, 9], [4, 5, 6], [1, 2, 3])]
</snippet></ROW><ROW><id>10683023</id><snippet>&gt;&gt;&gt; [list(itertools.chain(*x)) for x in itertools.permutations(l, len(l))]

[[1, 2, 3, 4, 5, 6, 7, 8, 9], 
[1, 2, 3, 7, 8, 9, 4, 5, 6], 
[4, 5, 6, 1, 2, 3, 7, 8, 9], 
[4, 5, 6, 7, 8, 9, 1, 2, 3], 
[7, 8, 9, 1, 2, 3, 4, 5, 6],
[7, 8, 9, 4, 5, 6, 1, 2, 3]]
</snippet></ROW><ROW><id>10683038</id><snippet>2040     bltinmod = PyImport_ImportModule("builtins");   
2041     if (bltinmod == NULL)
2042         Py_FatalError("exceptions bootstrapping error.");
</snippet></ROW><ROW><id>10683043</id><snippet>lipo -info /usr/local/lib/python2.6/site-packages/cv2.so
arch -i386 /usr/bin/python
</snippet></ROW><ROW><id>10683043</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>10683299</id><snippet>ir.actions.act_window</snippet></ROW><ROW><id>10683323</id><snippet>sp = subprocess.Popen([executable, arg1, arg2], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = sp.communicate()
if out:
    print "standard output of subprocess":
    print out
if err:
    print "standard error of subprocess":
    print err
print "returncode of subprocess:"
print sp.returncode
</snippet></ROW><ROW><id>10683323</id><snippet>    if script.endswith('.*~') or script == 'README':
         continue
</snippet></ROW><ROW><id>10683323</id><snippet>if not filename.endswith(".sh"):
    continue
</snippet></ROW><ROW><id>10683323</id><snippet>script</snippet></ROW><ROW><id>10683323</id><snippet>filename</snippet></ROW><ROW><id>10683323</id><snippet>listdir</snippet></ROW><ROW><id>10683323</id><snippet>try/except</snippet></ROW><ROW><id>10683323</id><snippet>abspath</snippet></ROW><ROW><id>10683323</id><snippet>initdir</snippet></ROW><ROW><id>10683323</id><snippet>filename</snippet></ROW><ROW><id>10683323</id><snippet>os.listdir()</snippet></ROW><ROW><id>10683323</id><snippet>shell=True</snippet></ROW><ROW><id>10683323</id><snippet>Popen</snippet></ROW><ROW><id>10683323</id><snippet>for filename in sorted(os.listdir(initdir), reverse=reverse):
    if os.path.isdir(filename) or not filename.endswith(".sh"):
         continue
    if os.access(script, os.X_OK):
        exepath = os.path.join(initdir, filename)
        sp = subprocess.Popen(
            (exepath, 'stop' if reverse else 'start'),
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE)
        out, err = sp.communicate()
        print out, err, sp.returncode
</snippet></ROW><ROW><id>10683699</id><snippet>a-b</snippet></ROW><ROW><id>10683699</id><snippet>_</snippet></ROW><ROW><id>10683746</id><snippet># -*- coding: utf-8 -*-
from pyvirtualdisplay import Display
display = Display(visible=False, size=(1024, 768), color_depth=24)
display.start()

from PyQt4.QtGui import QApplication
app = QApplication([])
import qt4reactor
qt4reactor.install()

from twisted.web import server
from twisted.web.xmlrpc import XMLRPC
from twisted.internet import defer
from PyQt4.QtWebKit import QWebSettings, QWebView, QWebPage
from PyQt4.QtNetwork import QNetworkAccessManager, QNetworkRequest
from PyQt4.QtCore import QUrl, Qt


class CustomQNetworkAccessManager(QNetworkAccessManager):

    def __init__(self, *args, **kwargs):
        super(CustomQNetworkAccessManager, self).__init__(*args, **kwargs)
        self.sslErrors.connect(self._ssl_errors)
        self.finished.connect(self._finished)

    def _ssl_errors(self, reply, errors):
        reply.ignoreSslErrors()
        for error in errors:
            print 'Ignored SSL Error: {0} - {1}'.format(error.error(), error.errorString())

    def _finished(self, reply):
        reply.deleteLater()


class CustomQWebPage(QWebPage):

    def __init__(self, *args, **kwargs):
        super(CustomQWebPage, self).__init__(*args, **kwargs)

    def userAgentForUrl(self, url):
        return 'Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0'


class WebkitWrapper(object):

    def __init__(self, *args, **kwargs):
        super(WebkitWrapper, self).__init__(*args, **kwargs)
        self.web_view = QWebView()
        self.network_manager = CustomQNetworkAccessManager()
        self.web_page = CustomQWebPage()
        self.web_page.setNetworkAccessManager(self.network_manager)
        self.web_view.setPage(self.web_page)
        self.web_view.setAttribute(Qt.WA_DeleteOnClose, True)
        settings = self.web_view.settings()
        settings.setAttribute(QWebSettings.AutoLoadImages, False)
        settings.setAttribute(QWebSettings.JavaEnabled, False)
        settings.setAttribute(QWebSettings.JavascriptEnabled, False)
        settings.setAttribute(QWebSettings.JavascriptCanOpenWindows, False)
        settings.setAttribute(QWebSettings.PluginsEnabled, False)
        self.web_view.loadFinished.connect(self._load_finished)

    def perform(self, request_data, timeout=15):
        self._deferred_request = defer.Deferred()
        url = request_data.get('url', '')
        request = QNetworkRequest() 
        request.setUrl(QUrl(url)) 
        self.web_view.load(request)
        print 'getting: {0}'.format(url)
        return self._deferred_request

    def shutdown(self):
        print 'webview shutdown'
        self.web_view.close()
        self.network_manager.deleteLater()
        self.web_page.deleteLater()
        self.web_view.deleteLater()
        print 'deletelater scheduled'

    def _load_finished(self, ok):
        print 'load finished: {0}'.format(ok)
        frame = self.web_view.page().mainFrame()
        result = unicode(frame.toHtml()).encode('utf-8')
        self._deferred_request.callback(result)


class HeadlessBrowser(object):

    def __init__(self, instance_id):
        self.webkit_wrapper = WebkitWrapper()
        self.instance_id = instance_id

    def _return_intance_id(self, result):
        return self.instance_id, result 

    def _request_failed(self, failure):
        failure.trap(Exception)
        err_msg = failure.getErrorMessage()
        print err_msg
        failure.printDetailedTraceback()
        return err_msg

    def shutdown(self):
        self.webkit_wrapper.shutdown()

    def _run_perform(self, _r, request_data):
        return self.webkit_wrapper.perform(request_data)

    def get_request(self, request_data):
        deferred_request = self.webkit_wrapper.perform(request_data)
        deferred_request.addErrback(self._request_failed)
        deferred_request.addBoth(self._return_intance_id)
        return deferred_request


class TestXMLRPCServer(XMLRPC):

    def __init__(self):
        XMLRPC.__init__(self, allowNone=True)
        self.browser_instances = dict()
        self.instance_counter = 0

    def _request_completed(self, result):
        instance_id, dest_result = result
        print 'instances: ', self.browser_instances
        print 'killing instance: {0}'.format(instance_id)
        browser_instance = self.browser_instances.pop(instance_id, None)
        browser_instance.shutdown()
        print 'instances: ', self.browser_instances
        return dest_result

    def xmlrpc_open(self, request_data):
        print 'requested: {0}'.format(request_data)
        self.instance_counter += 1
        instance_id = str(self.instance_counter)
        browser = HeadlessBrowser(instance_id)
        def_request = browser.get_request(request_data)
        def_request.addCallback(self._request_completed)
        self.browser_instances[instance_id] = browser
        return def_request


def start_server(port=8297):
    from twisted.internet import reactor
    r = TestXMLRPCServer()
    reactor.listenTCP(port, server.Site(r))
    reactor.run()


if __name__ == '__main__':
    start_server()
</snippet></ROW><ROW><id>10683746</id><snippet>self.web_page.deleteLater()
</snippet></ROW><ROW><id>10683904</id><snippet>def test_only_with_mapfields(self):

    class BlogPost(Document):
        content = StringField()
        author = MapField(field=StringField())

    BlogPost.drop_collection()

    post = BlogPost(content='Had a good coffee today...', 
                    author={'name': "Ross", "age": "20"}).save()

    obj = BlogPost.objects.only('author__name',).get()

    self.assertEquals(obj.author['name'], "Ross")
    self.assertEquals(obj.author.get("age", None), None)
</snippet></ROW><ROW><id>10683911</id><snippet>from sympy.utilities.lambdify import lambdify
func = lambdify(x, big_expression_containing_x) # returns a numpy-ready function
numpy_array_of_results = func(numpy_array_of_arguments)
</snippet></ROW><ROW><id>10683981</id><snippet>itertools</snippet></ROW><ROW><id>10683981</id><snippet>import itertools
def arrangements(arr):
    p = itertools.permutations(arr)
    return set(item for item in p if all(x!=y for x,y in zip(item,arr)))
</snippet></ROW><ROW><id>10683981</id><snippet>&gt;&gt;&gt; arrangements([0,0,0,1,1,1])
{(1, 1, 1, 0, 0, 0)}
&gt;&gt;&gt; arrangements([0,0,0,1,1,1,1])
set()
&gt;&gt;&gt; arrangements([1,2,2,14])
{(2, 14, 1, 2), (2, 1, 14, 2)}
&gt;&gt;&gt; arrangements([1,1,2,2,14])
{(2, 14, 1, 1, 2), (2, 2, 1, 14, 1), (14, 2, 1, 1, 2), (2, 2, 14, 1, 1)}
</snippet></ROW><ROW><id>10683991</id><snippet>Usuario</snippet></ROW><ROW><id>10683991</id><snippet>join</snippet></ROW><ROW><id>10683991</id><snippet>contains_eager</snippet></ROW><ROW><id>10683991</id><snippet>qry = session.query(Usuario).filter(Usuario.id==1)

# join using the aliased. Use *outerjoin* in order to still get the result for those without a parent
res = aliased(Usuario)
qry = qry.outerjoin((res, Usuario.reseller))

# specify which table/alias represents the *contained* relationship
qry = qry.options(contains_eager(Usuario.reseller, alias=res))
</snippet></ROW><ROW><id>10684099</id><snippet>g = PyDict_New();
if (!g)
    return NULL;

PyDict_SetItemString(g, "__builtins__", PyEval_GetBuiltins());
</snippet></ROW><ROW><id>10684099</id><snippet>g</snippet></ROW><ROW><id>10684099</id><snippet>globals</snippet></ROW><ROW><id>10684233</id><snippet>os.waitXXX()</snippet></ROW><ROW><id>10684233</id><snippet>os.waitpid()</snippet></ROW><ROW><id>10684606</id><snippet>QSettings settings("Moose Soft", "Facturo-Pro");
</snippet></ROW><ROW><id>10684606</id><snippet>QCoreApplication::setOrganizationName("Moose Soft");
QCoreApplication::setApplicationName("Facturo-Pro");
QSettings settings;
</snippet></ROW><ROW><id>10684606</id><snippet>from PySide import QtCore
QtCore.QSettings.setDefaultFormat(QtCore.QSettings.IniFormat)

settings = QtCore.QSettings("Moose Soft", "Facturo-Pro")
print settings.format()

QtCore.QCoreApplication.setOrganizationName("MooseSoft")
QtCore.QCoreApplication.setApplicationName("Facturo-Pro")
settings = QtCore.QSettings()
print settings.format()
</snippet></ROW><ROW><id>10684606</id><snippet>QSettings settings("Moose Tech", "Facturo-Pro");
</snippet></ROW><ROW><id>10685245</id><snippet>Tk</snippet></ROW><ROW><id>10685304</id><snippet>os.listdir()</snippet></ROW><ROW><id>10685304</id><snippet>os.walk()</snippet></ROW><ROW><id>10685304</id><snippet>import os

def listdirs(suffix):
    for dirname, dirnames, filenames in os.walk('.'):
        for subdirname in dirnames:
            subdirpath = os.path.join(dirname, subdirname)
            if subdirpath.endswith(suffix):
                yield subdirpath


if __name__ == "__main__":
    for d in listdirs('inputs'):
        print d
</snippet></ROW><ROW><id>10685304</id><snippet>$ python test.py 
./Test1/inputs
./Test2/inputs
</snippet></ROW><ROW><id>10685693</id><snippet>import md5

contest = "some data"
m = md5.new(contents)
m.digest()
</snippet></ROW><ROW><id>10685869</id><snippet>a.reshape(2,2,2,2).sum(axis=1).sum(axis=2)
</snippet></ROW><ROW><id>10685869</id><snippet>array([[14, 22],
       [46, 54]])
</snippet></ROW><ROW><id>10685869</id><snippet>def shrink(data, rows, cols):
    return data.reshape(rows, data.shape[0]/rows, cols, data.shape[1]/cols).sum(axis=1).sum(axis=2)
</snippet></ROW><ROW><id>10685869</id><snippet>In [19]: shrink(a, 2,2)
Out[19]: 
array([[14, 22],
       [46, 54]])

In [20]: shrink(a, 2,1)
Out[20]: 
array([[ 36],
       [100]])
</snippet></ROW><ROW><id>10686050</id><snippet>Review.objects.values(company, website__website_type).annotate(review_count=Count('id'), average=Avg('rating')).order_by('company')
</snippet></ROW><ROW><id>10686134</id><snippet>user_key = user_id.key()</snippet></ROW><ROW><id>10686457</id><snippet>os.walk</snippet></ROW><ROW><id>10686457</id><snippet>with open(...) as f:</snippet></ROW><ROW><id>10686457</id><snippet>with open(..., 'w') as f:</snippet></ROW><ROW><id>10686462</id><snippet>values()</snippet></ROW><ROW><id>10686462</id><snippet>with_entities()</snippet></ROW><ROW><id>10686462</id><snippet>values()</snippet></ROW><ROW><id>10686462</id><snippet>q = q.with_entities(User.id)
</snippet></ROW><ROW><id>10686550</id><snippet>login.html</snippet></ROW><ROW><id>10686550</id><snippet>show_entries</snippet></ROW><ROW><id>10686609</id><snippet>__del__</snippet></ROW><ROW><id>10686609</id><snippet>__del__</snippet></ROW><ROW><id>10686609</id><snippet>with</snippet></ROW><ROW><id>10686777</id><snippet>&gt;&gt;&gt; from numpy import genfromtxt
&gt;&gt;&gt; genfromtxt("missing1.dat", delimiter=",")
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,  nan,  nan,   7.,   8.],
       [ nan,  nan,   9.,  10.,  11.]])
</snippet></ROW><ROW><id>10686777</id><snippet>&gt;&gt;&gt; genfromtxt("missing1.dat", delimiter=",", filling_values=99)
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,  99.,  99.,   7.,   8.],
       [ 99.,  99.,   9.,  10.,  11.]])
</snippet></ROW><ROW><id>10686975</id><snippet>$ pg_config --includedir-server
/usr/include/postgresql/9.1/server
</snippet></ROW><ROW><id>10686975</id><snippet>'/usr/include/pgsql/server'</snippet></ROW><ROW><id>10686984</id><snippet>biggrasstile = pygame.transform.scale(grasstile, (16, 16))
</snippet></ROW><ROW><id>10687232</id><snippet>Person</snippet></ROW><ROW><id>10687232</id><snippet>in</snippet></ROW><ROW><id>10687232</id><snippet>out</snippet></ROW><ROW><id>10687232</id><snippet>Person</snippet></ROW><ROW><id>10687232</id><snippet>Person</snippet></ROW><ROW><id>10687232</id><snippet>persons</snippet></ROW><ROW><id>10687232</id><snippet>in</snippet></ROW><ROW><id>10687232</id><snippet>persons_sorted = sorted(persons, key=lambda p: p.in)</snippet></ROW><ROW><id>10687232</id><snippet>max_in_person = persons_sorted[-1]</snippet></ROW><ROW><id>10687246</id><snippet>dict((k, str(v)) for k, v in d.iteritems())
</snippet></ROW><ROW><id>10687246</id><snippet>{k: str(v) for k, v in d.items()}
</snippet></ROW><ROW><id>10687246</id><snippet>dict((k, tuple(str(x) for x in v)) for k, v in d.iteritems())

{k: tuple(str(x) for x in v) for k, v in d.items()}
</snippet></ROW><ROW><id>10687565</id><snippet>'&lt;Return&gt;'</snippet></ROW><ROW><id>10687565</id><snippet>root</snippet></ROW><ROW><id>10687565</id><snippet>invoke()</snippet></ROW><ROW><id>10687565</id><snippet>root.bind('&lt;Return&gt;', (lambda e, b=b: b.invoke())) # b is your button
</snippet></ROW><ROW><id>10687772</id><snippet>parse</snippet></ROW><ROW><id>10687772</id><snippet>start_urls</snippet></ROW><ROW><id>10687772</id><snippet>parse</snippet></ROW><ROW><id>10687772</id><snippet>parse</snippet></ROW><ROW><id>10687772</id><snippet>HtmlXPathSelector</snippet></ROW><ROW><id>10687772</id><snippet>Item</snippet></ROW><ROW><id>10687772</id><snippet>yield</snippet></ROW><ROW><id>10687772</id><snippet>yield</snippet></ROW><ROW><id>10687772</id><snippet>Request</snippet></ROW><ROW><id>10687772</id><snippet>FormReques</snippet></ROW><ROW><id>10687772</id><snippet>Request</snippet></ROW><ROW><id>10687772</id><snippet>FormRequest</snippet></ROW><ROW><id>10687772</id><snippet>Item</snippet></ROW><ROW><id>10688060</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>10688060</id><snippet>from datetime import date, datetime, timedelta

def perdelta(start, end, delta):
    curr = start
    while curr &lt; end:
        yield curr
        curr += delta

&gt;&gt;&gt; for result in perdelta(date(2011, 10, 10), date(2011, 12, 12), timedelta(days=4)):
...     print result
...
2011-10-10
2011-10-14
2011-10-18
2011-10-22
2011-10-26
2011-10-30
2011-11-03
2011-11-07
2011-11-11
2011-11-15
2011-11-19
2011-11-23
2011-11-27
2011-12-01
2011-12-05
2011-12-09
</snippet></ROW><ROW><id>10688060</id><snippet>&gt;&gt;&gt; for result in perdelta(datetime.now(),
...         datetime.now().replace(hour=19) + timedelta(days=1),
...         timedelta(hours=8)):
...     print result
... 
2012-05-21 17:25:47.668022
2012-05-22 01:25:47.668022
2012-05-22 09:25:47.668022
2012-05-22 17:25:47.668022
</snippet></ROW><ROW><id>10688235</id><snippet>import lxml.html as lh

desiredvars = ['Street 1','Street 2','City', 'State', 'Zip']

doc=open('test.htm', 'r')
outhtml=lh.parse(doc)
doc.close()

myresultset = ((var, outhtml.xpath('//tr/td[contains(text(), "%s")]/span[@class="boldred"]/text()'%(var))[0]) for var in desiredvars)

for each in myresultset:
    print each
</snippet></ROW><ROW><id>10688235</id><snippet>$ python lxml_tempsofsol.py
('Street 1', '2100 5th Ave')
('Street 2', 'Ste 202')
('City', 'NYC')
('State', 'NY')
('Zip', '10022')
</snippet></ROW><ROW><id>10688303</id><snippet>class Rated(object): 
  def __init__(self, rating, freq_dist): 
    self.rating = rating
    self.freq_dist = freq_dist

a = Rated(5, nltk.FreqDist('the boy sees the dog'.split()))
b = Rated(8, nltk.FreqDist('the cat sees the mouse'.split()))
c = Rated(-3, nltk.FreqDist('some boy likes nothing'.split()))

trainingTexts = [a,b,c]
</snippet></ROW><ROW><id>10688303</id><snippet>from collections import defaultdict
from operator import itemgetter

# dictionaries for keeping track of the counts
pos_dict = defaultdict(int)
neg_dict = defaultdict(int)

for r in trainingTexts:
  rating = r.rating
  freq = r.freq_dist

  # choose the appropriate counts dict
  if rating &gt; 0:
    partition = pos_dict
  elif rating &lt; 0: 
    partition = neg_dict
  else:
    continue

  # add the information to the correct counts dict
  for word,count in freq.iteritems():
    partition[word] += count

# Turn the counts dictionaries into lists of descending-frequency words
def only_list(counts, filtered):
  return sorted(filter(lambda (w,c): w not in filtered, counts.items()), \
                key=itemgetter(1), \
                reverse=True)

only_positive_words = only_list(pos_dict, neg_dict)
only_negative_words = only_list(neg_dict, pos_dict)
</snippet></ROW><ROW><id>10688303</id><snippet>&gt;&gt;&gt; only_positive_words
[('the', 4), ('sees', 2), ('dog', 1), ('cat', 1), ('mouse', 1)]
&gt;&gt;&gt; only_negative_words
[('nothing', 1), ('some', 1), ('likes', 1)]
</snippet></ROW><ROW><id>10688497</id><snippet>sys.stdout.writelines(line for line in sys.stdin if not line.startswith('-'))
</snippet></ROW><ROW><id>10688497</id><snippet>filtered = (line for line in sys.stdin if not line.startswith('-'))
for line in filtered:
    # ...
</snippet></ROW><ROW><id>10688798</id><snippet>result = si.query()

if search_terms['province']:
    result = result.query(province=search_terms['province'])
if search_terms['town']:
    result = result.query(town=search_terms['town'])
</snippet></ROW><ROW><id>10688949</id><snippet>app = bottle.Bottle()
</snippet></ROW><ROW><id>10688949</id><snippet>app.wsgi</snippet></ROW><ROW><id>10688949</id><snippet>application = bottle.default_app()</snippet></ROW><ROW><id>10688949</id><snippet>from factura import app as application
</snippet></ROW><ROW><id>10688949</id><snippet>import bottle</snippet></ROW><ROW><id>10688949</id><snippet>from lib import bottle</snippet></ROW><ROW><id>10688949</id><snippet>lib</snippet></ROW><ROW><id>10688949</id><snippet>404 Not Found</snippet></ROW><ROW><id>10688949</id><snippet>app</snippet></ROW><ROW><id>10688949</id><snippet>default_app</snippet></ROW><ROW><id>10688949</id><snippet>app</snippet></ROW><ROW><id>10688984</id><snippet>processes</snippet></ROW><ROW><id>10688984</id><snippet>int</snippet></ROW><ROW><id>10688984</id><snippet>Python 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import multiprocessing.dummy as multiprocessing
&gt;&gt;&gt; pool = multiprocessing.Pool(5)
&gt;&gt;&gt; pool
&lt;multiprocessing.pool.ThreadPool object at 0x00C7DF90&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10688984</id><snippet>import multiprocessing.dummy
import weakref
import threading

class Worker(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        poll = multiprocessing.dummy.Pool(5)
        print str(poll)

w = Worker()
w._children = weakref.WeakKeyDictionary()
w.start()
</snippet></ROW><ROW><id>10689067</id><snippet>linkURL</snippet></ROW><ROW><id>10689067</id><snippet>c.linkURL('http://google.com', (inch, inch, 1*inch, 1*inch), relative=1)
</snippet></ROW><ROW><id>10689229</id><snippet>select_for_update()</snippet></ROW><ROW><id>10689549</id><snippet>for</snippet></ROW><ROW><id>10689549</id><snippet>del</snippet></ROW><ROW><id>10689549</id><snippet>index = 0
while index &lt; len(self.container):
    delete = raw_input("what number task would you like to delete")
    if delete == "y":
        del self.container[index]
    else:
        index += 1
</snippet></ROW><ROW><id>10689590</id><snippet>img = Image.open(filename)
if img.mode == "RGBA" or "transparency" in img.info:
    # image uses transparency
</snippet></ROW><ROW><id>10689590</id><snippet>def uses_transparency(filename):
    img = Image.open(filename)
    trans = img.info.get("transparency", None)
    if trans is not None:
        trans *= 3  # convert color number to palette table index
        palette = img.getpalette()
        imgs = []
        for bg in [0, 255]:   # map transparent color first to black, then white
            palette[trans:trans+3] = [bg] * 3
            img.putpalette(palette)
            imgs.append(img.convert("L"))
        return bool(ImageChops.difference(*imgs).getbbox())
</snippet></ROW><ROW><id>10689714</id><snippet>chain</snippet></ROW><ROW><id>10689714</id><snippet>from itertools import chain

combined = chain(qs1, qs2, ...)
for item in combined:
    # foo
</snippet></ROW><ROW><id>10689714</id><snippet>Q</snippet></ROW><ROW><id>10689714</id><snippet>Poll.objects.get(
    Q(question__startswith='Who'),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
)
</snippet></ROW><ROW><id>10689751</id><snippet>&gt;&gt;&gt; a = (1,2)
&gt;&gt;&gt; b = (3,4)
&gt;&gt;&gt; c = map(sum, zip(a,b))
&gt;&gt;&gt; c
[4, 6]
</snippet></ROW><ROW><id>10689798</id><snippet>b = x.read(1)
firstfivebits = b &gt;&gt; 3
</snippet></ROW><ROW><id>10689798</id><snippet>b = x.read(1)
lastfivebits = b &amp; 0b11111
</snippet></ROW><ROW><id>10689878</id><snippet>animal.val</snippet></ROW><ROW><id>10689878</id><snippet>val</snippet></ROW><ROW><id>10689878</id><snippet>animal</snippet></ROW><ROW><id>10689878</id><snippet>animal</snippet></ROW><ROW><id>10689878</id><snippet>your_animal = animal()
</snippet></ROW><ROW><id>10690046</id><snippet>GtkTreeSelection</snippet></ROW><ROW><id>10690046</id><snippet>GtkTreeView.get_selection</snippet></ROW><ROW><id>10690696</id><snippet>n</snippet></ROW><ROW><id>10690696</id><snippet>d</snippet></ROW><ROW><id>10690696</id><snippet>pyrcypto</snippet></ROW><ROW><id>10690696</id><snippet>from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long, long_to_bytes

full = RSA.generate(2048)

# construct key using only n and d
try:
    # pycrypto &gt;=2.5, only tested with _slowmath
    impl = RSA.RSAImplementation(use_fast_math=False)
    partial = impl.construct((full.n, 0L))
    partial.key.d = full.d
except TypeError:
    # pycrypto &lt;=2.4.1
    partial = RSA.construct((full.n, 0L, full.d))   



pub = full.publickey()

# create message with padding
# http://en.wikipedia.org/wiki/RSA_%28algorithm%29#Padding_schemes
cleartext = ...

signature = partial.sign(cleartext, None)

print "validating message: ", pub.verify(cleartext, signature)


message = pub.encrypt(cleartext, None)

# bypassing the blinding step on decrypt
enc_msg=map(bytes_to_long, message)
dec_msg = map(partial.key._decrypt, enc_msg)

print "decrypting: "
for m in dec_msg:
    print long_to_bytes(m)
</snippet></ROW><ROW><id>10690719</id><snippet>regexes = (regex1, regex2, regex3)
for regex in regexes:
    match = re.search(regex, s)
    if match:
        #do stuff
        break
</snippet></ROW><ROW><id>10690719</id><snippet>def process1(match_obj):
    #handle match 1

def process2(match_obj):
    #handle match 2

def process3(match_obj):
    #handle match 3
.
.
.
handler_map = ((regex1, process1), (regex2, process2), (regex3, process3))
for regex, handler in handler_map:
    match = re.search(regex, s)
    if match:
        result = handler(match)
        break
else:
    #else condition if no regex matches
</snippet></ROW><ROW><id>10690790</id><snippet>in1d</snippet></ROW><ROW><id>10690790</id><snippet>&gt;&gt;&gt; test = np.array([0, 1, 2, 5, 0])
&gt;&gt;&gt; states = [0, 2]
&gt;&gt;&gt; np.in1d(test, states)
array([ True, False,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>10690790</id><snippet>&gt;&gt;&gt; test[np.in1d(test, states)] = 1
&gt;&gt;&gt; test
array([1, 1, 1, 5, 1])
</snippet></ROW><ROW><id>10690790</id><snippet>if</snippet></ROW><ROW><id>10690790</id><snippet>&gt;&gt;&gt; numpy_array = numpy.arange(9).reshape((3, 3))
&gt;&gt;&gt; confused_array = numpy.arange(9).reshape((3, 3)) % 2
&gt;&gt;&gt; mask = numpy.in1d(numpy_array, repeat_set).reshape(numpy_array.shape)
&gt;&gt;&gt; mask
array([[False, False, False],
       [ True, False,  True],
       [ True, False,  True]], dtype=bool)
&gt;&gt;&gt; ~mask
array([[ True,  True,  True],
       [False,  True, False],
       [False,  True, False]], dtype=bool)
&gt;&gt;&gt; numpy_array == 0
array([[ True, False, False],
       [False, False, False],
       [False, False, False]], dtype=bool)
&gt;&gt;&gt; numpy_array != 0
array([[False,  True,  True],
       [ True,  True,  True],
       [ True,  True,  True]], dtype=bool)
&gt;&gt;&gt; confused_array[mask] = 1
&gt;&gt;&gt; confused_array[~mask &amp; (numpy_array == 0)] = 0
&gt;&gt;&gt; confused_array[~mask &amp; (numpy_array != 0)] = 2
&gt;&gt;&gt; confused_array
array([[0, 2, 2],
       [1, 2, 1],
       [1, 2, 1]])
</snippet></ROW><ROW><id>10690790</id><snippet>numpy.where</snippet></ROW><ROW><id>10690790</id><snippet>mask</snippet></ROW><ROW><id>10690790</id><snippet>mask</snippet></ROW><ROW><id>10690790</id><snippet>mask</snippet></ROW><ROW><id>10690790</id><snippet>&gt;&gt;&gt; numpy.where(mask, 1, numpy.where(numpy_array == 0, 0, 2))
array([[0, 2, 2],
       [1, 2, 1],
       [1, 2, 1]])
</snippet></ROW><ROW><id>10690796</id><snippet>self.Connect()</snippet></ROW><ROW><id>10690796</id><snippet>DoSomething()</snippet></ROW><ROW><id>10690796</id><snippet>Connect()</snippet></ROW><ROW><id>10690796</id><snippet>yield</snippet></ROW><ROW><id>10690796</id><snippet>DoSomething()</snippet></ROW><ROW><id>10690796</id><snippet>c</snippet></ROW><ROW><id>10690796</id><snippet>DoSomething()</snippet></ROW><ROW><id>10690796</id><snippet>addCallback()</snippet></ROW><ROW><id>10690796</id><snippet>def DoSomething(self):
    c = self.Connect()
    c.addCallback(self.handle_getting_amqp_channel)
    c.addErrback(self.this_gets_called_if_something_went_wrong)
    return c
</snippet></ROW><ROW><id>10690879</id><snippet>a = a.astype(numpy.int16)
</snippet></ROW><ROW><id>10691086</id><snippet>isFile = lambda e: e[0][0] != 'd'
for e in ftp.dir('.'):
  if isFile(e):
    foo(e)
  else:
    bar(e)
</snippet></ROW><ROW><id>10691175</id><snippet>re.sub('(\d+)(?=\.html)', r'.\1', s)
</snippet></ROW><ROW><id>10691185</id><snippet>def view(request, x or y)</snippet></ROW><ROW><id>10691185</id><snippet>def view(request, var_from_one_url="some_default", var_from_another="some_default"):
    pass
</snippet></ROW><ROW><id>10691255</id><snippet>data = [["date_a", "1a", "2a", "3a"], 
        ["date_b", "1b", "2b", "3b"]]

print zip(*(zip(itertools.repeat(ls[0]), ls[1:]) for ls in data))
</snippet></ROW><ROW><id>10691255</id><snippet>[(('date_a', '1a'), ('date_b', '1b')),
 (('date_a', '2a'), ('date_b', '2b')),
 (('date_a', '3a'), ('date_b', '3b'))]
</snippet></ROW><ROW><id>10691290</id><snippet>/tmp/sdaemon.log</snippet></ROW><ROW><id>10691376</id><snippet>import lib.exif as exif
</snippet></ROW><ROW><id>10691376</id><snippet>import facemovie.lib.exif as exif
# or
from facemovie.lib import exif
</snippet></ROW><ROW><id>10691433</id><snippet>bulk_create</snippet></ROW><ROW><id>10691433</id><snippet>create()</snippet></ROW><ROW><id>10691433</id><snippet>aList = [
    Entry(headline="Django 1.0 Released"),
    Entry(headline="Django 1.1 Announced"),
    Entry(headline="Breaking: Django is awesome")
]
Entry.objects.bulk_create(aList)
</snippet></ROW><ROW><id>10691433</id><snippet>aList</snippet></ROW><ROW><id>10691433</id><snippet>values = ['abc', 'def', 'ghi']
# a list of unsaved Entry model instances
aList = [Entry(headline=val) for val in values]
</snippet></ROW><ROW><id>10691433</id><snippet>values = [{headline="abc"}, {headline="def"}, {headline="ghi"}]
aList = [Entry(**vals) for vals in values]
</snippet></ROW><ROW><id>10691739</id><snippet>tree.selection_set('"Sunset Grill"')
</snippet></ROW><ROW><id>10691739</id><snippet>self.tk.call(self._w, "selection", selop, items)</snippet></ROW><ROW><id>10692596</id><snippet>map</snippet></ROW><ROW><id>10692596</id><snippet>list</snippet></ROW><ROW><id>10692596</id><snippet>for</snippet></ROW><ROW><id>10692596</id><snippet>map</snippet></ROW><ROW><id>10692596</id><snippet>map</snippet></ROW><ROW><id>10692596</id><snippet>print</snippet></ROW><ROW><id>10692596</id><snippet>set.update</snippet></ROW><ROW><id>10692596</id><snippet>map</snippet></ROW><ROW><id>10692596</id><snippet>counters</snippet></ROW><ROW><id>10692596</id><snippet>s = set(key for counter in counters.values() for key in counter)
</snippet></ROW><ROW><id>10692596</id><snippet>s = {key for counter in counters.values() for key in counter}
</snippet></ROW><ROW><id>10692596</id><snippet>s = set()
for counter in counters.values():
    for key in counter:
        s.add(key)
</snippet></ROW><ROW><id>10692726</id><snippet>xgettext</snippet></ROW><ROW><id>10692726</id><snippet>domainname.po</snippet></ROW><ROW><id>10692726</id><snippet>domainname.pot</snippet></ROW><ROW><id>10692855</id><snippet>-1</snippet></ROW><ROW><id>10692855</id><snippet>-1</snippet></ROW><ROW><id>10692855</id><snippet>isinstance(value, int)</snippet></ROW><ROW><id>10692855</id><snippet>bool</snippet></ROW><ROW><id>10692855</id><snippet>int</snippet></ROW><ROW><id>10692855</id><snippet>isinstance(True, int)</snippet></ROW><ROW><id>10692855</id><snippet>True</snippet></ROW><ROW><id>10692960</id><snippet>functools.partial()</snippet></ROW><ROW><id>10692960</id><snippet>&gt;&gt;&gt; import functools
&gt;&gt;&gt; print_with_hello = functools.partial(print, "Hello")
&gt;&gt;&gt; print_with_hello("World")
Hello World
&gt;&gt;&gt; print_with_hello()
Hello
</snippet></ROW><ROW><id>10692960</id><snippet>partial()</snippet></ROW><ROW><id>10692960</id><snippet>import functools

...

self.option1 = Button(frame, text="1842", command=functools.partial(self.checkAnswer, question=3, answer=2))
</snippet></ROW><ROW><id>10693068</id><snippet>def writeTo(self, hessianFile):
    try:
        with open(hessianFile, "w") as f:
            do_stuff(f)
    except TypeError:
        do_stuff(hessianFile)
</snippet></ROW><ROW><id>10693068</id><snippet>def writeTo(self, hessianFile):
    try:
        do_stuff(f)
    except AttributeError:
        with open(hessianFile, "w") as f:
            do_stuff(f)
</snippet></ROW><ROW><id>10693068</id><snippet>with</snippet></ROW><ROW><id>10693068</id><snippet>file</snippet></ROW><ROW><id>10693068</id><snippet>open()</snippet></ROW><ROW><id>10693068</id><snippet>io.FileIO</snippet></ROW><ROW><id>10693471</id><snippet>mongo_conn.Tags.insert({
    "key": 12345,
    "tags": ["foo","bar","foobar"]
})
</snippet></ROW><ROW><id>10693668</id><snippet>active = True if request.POST.get('active') == 'true' else False
</snippet></ROW><ROW><id>10693668</id><snippet>active = request.POST.get('active') == 'true'
</snippet></ROW><ROW><id>10693668</id><snippet>get()</snippet></ROW><ROW><id>10693758</id><snippet>addsitedir</snippet></ROW><ROW><id>10693758</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>10693758</id><snippet>usercustomize.py</snippet></ROW><ROW><id>10693758</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>10693758</id><snippet>sys.path</snippet></ROW><ROW><id>10693758</id><snippet>import site
site.addsitedir('/usr/local/lib/python2.7')
</snippet></ROW><ROW><id>10693758</id><snippet>sitecustomize</snippet></ROW><ROW><id>10693758</id><snippet>usercustomize</snippet></ROW><ROW><id>10693758</id><snippet>sitecustomize</snippet></ROW><ROW><id>10693758</id><snippet>ImportError</snippet></ROW><ROW><id>10693758</id><snippet>usercustomize</snippet></ROW><ROW><id>10693758</id><snippet>ENABLE_USER_SITE</snippet></ROW><ROW><id>10693758</id><snippet>sys.path</snippet></ROW><ROW><id>10693758</id><snippet>-s</snippet></ROW><ROW><id>10693758</id><snippet>ImportError</snippet></ROW><ROW><id>10693947</id><snippet>class ScoredList():
    def __init__(self, dct=None):
        self.dct = dct if dct is not None else {}
</snippet></ROW><ROW><id>10694083</id><snippet>log_connections</snippet></ROW><ROW><id>10694083</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>10694083</id><snippet>pg_ctl</snippet></ROW><ROW><id>10694083</id><snippet>pg_ctlcluser</snippet></ROW><ROW><id>10694254</id><snippet>run_A</snippet></ROW><ROW><id>10694254</id><snippet>run_B</snippet></ROW><ROW><id>10694254</id><snippet>App</snippet></ROW><ROW><id>10694254</id><snippet>run</snippet></ROW><ROW><id>10694254</id><snippet>def run(self):
    threads = [
         threading.Thread(target=run_A),
         threading.Thread(target=run_B)
    ]

    for thread in threads:
         thread.start()
    for thread in threads:
         thread.join()
</snippet></ROW><ROW><id>10694254</id><snippet>multiprocessing</snippet></ROW><ROW><id>10694254</id><snippet>sleep</snippet></ROW><ROW><id>10694430</id><snippet>import curses
stdscr = curses.initscr()
curses.cbreak()
stdscr.keypad(1)

stdscr.addstr(0,10,"Hit 'q' to quit")
stdscr.refresh()

key = ''
while key != ord('q'):
    key = stdscr.getch()
    stdscr.addch(20,25,key)
    stdscr.refresh()
    if key == curses.KEY_UP: 
        stdscr.addstr(2, 20, "Up")
    elif key == curses.KEY_DOWN: 
        stdscr.addstr(3, 20, "Down")

curses.endwin()
</snippet></ROW><ROW><id>10694484</id><snippet>str</snippet></ROW><ROW><id>10694484</id><snippet>unicode</snippet></ROW><ROW><id>10694484</id><snippet>filename</snippet></ROW><ROW><id>10694484</id><snippet>unicode</snippet></ROW><ROW><id>10694484</id><snippet>"tmp/%s/%s"</snippet></ROW><ROW><id>10694484</id><snippet>unicode</snippet></ROW><ROW><id>10694484</id><snippet>str</snippet></ROW><ROW><id>10694484</id><snippet>ascii</snippet></ROW><ROW><id>10694484</id><snippet>return</snippet></ROW><ROW><id>10694484</id><snippet>temp2</snippet></ROW><ROW><id>10694484</id><snippet>filename</snippet></ROW><ROW><id>10694484</id><snippet>decode</snippet></ROW><ROW><id>10694484</id><snippet>encode</snippet></ROW><ROW><id>10694484</id><snippet>u""</snippet></ROW><ROW><id>10694484</id><snippet>""</snippet></ROW><ROW><id>10694484</id><snippet>tempN</snippet></ROW><ROW><id>10694498</id><snippet>file_path = "test.py"
</snippet></ROW><ROW><id>10694498</id><snippet>file_path = r"c:\users\...\test.py"
</snippet></ROW><ROW><id>10694799</id><snippet>baz = 2
</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>int</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>foo(baz)</snippet></ROW><ROW><id>10694799</id><snippet>foo()</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>foo()</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>x = x + 1</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>3</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>3</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>3</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>2</snippet></ROW><ROW><id>10694799</id><snippet>baz = [1, 2, 3]

def foo(x):
   x[0] = x[0] + 1

foo(baz)
print baz
&gt;&gt;&gt; [2, 2, 3]
</snippet></ROW><ROW><id>10694799</id><snippet>foo()</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>int</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>x[0]</snippet></ROW><ROW><id>10694799</id><snippet>x</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>x[0]</snippet></ROW><ROW><id>10694799</id><snippet>x.__setitem__()</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>x = x + 1</snippet></ROW><ROW><id>10694799</id><snippet>baz</snippet></ROW><ROW><id>10694799</id><snippet>baz = (1, 2, 3)</snippet></ROW><ROW><id>10694799</id><snippet>foo()</snippet></ROW><ROW><id>10694799</id><snippet>Pair</snippet></ROW><ROW><id>10694862</id><snippet>iframe</snippet></ROW><ROW><id>10694862</id><snippet>urls.py</snippet></ROW><ROW><id>10694862</id><snippet>url(r'^test/getFile', 'getFile')
</snippet></ROW><ROW><id>10694862</id><snippet>views.py</snippet></ROW><ROW><id>10694862</id><snippet>def getFile(request):
    fileContent = "Your name is %s" % request.GET['name']
    res = HttpResponse(fileContent)
    res['Content-Disposition'] = 'attachment; filename=yourname.txt'
    return res
</snippet></ROW><ROW><id>10694862</id><snippet>&lt;script type="text/javascript"&gt;
    var data = {name: 'Jon'};
    $(function(){
        $("body").append('&lt;iframe src="/test/getFile?'+ $.param(data) + '" style="display: none;" &gt;&lt;/iframe&gt;');
    });
&lt;/script&gt;
</snippet></ROW><ROW><id>10694980</id><snippet>from flask.ext.testing import TestCase


class MyViewTestCase(TestCase):
    def create_app(self):
        # This method is required by flask.ext.testing.TestCase. It is called
        # before setUp().
        return create_app()

    def test_get_success(self):
        response = self.client.get('/pgt/myview')
        self.assertEqual(self.get_context_variable('var1'), 'value 1')
</snippet></ROW><ROW><id>10695115</id><snippet>frames</snippet></ROW><ROW><id>10695115</id><snippet>&gt;&gt;&gt; frames = range(20)
&gt;&gt;&gt; threads = 16
&gt;&gt;&gt; [frames[x::threads] for x in range(threads)]
[[0, 16], [1, 17], [2, 18], [3, 19], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]
</snippet></ROW><ROW><id>10695115</id><snippet>Queue</snippet></ROW><ROW><id>10695161</id><snippet>key</snippet></ROW><ROW><id>10695161</id><snippet>sorted()</snippet></ROW><ROW><id>10695161</id><snippet>sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)],key=lambda x: x[1])
</snippet></ROW><ROW><id>10695161</id><snippet>key</snippet></ROW><ROW><id>10695161</id><snippet>[1]</snippet></ROW><ROW><id>10695161</id><snippet>itemgetter(1)</snippet></ROW><ROW><id>10695161</id><snippet>lambda x: return x[1]</snippet></ROW><ROW><id>10695312</id><snippet>self.trigger.connect(Output().main())
</snippet></ROW><ROW><id>10695312</id><snippet>MainWindow</snippet></ROW><ROW><id>10695312</id><snippet>import sys
from PyQt4 import QtGui, QtCore
import time
import random


class MyThread(QtCore.QThread):
    trigger = QtCore.pyqtSignal(int)

    def __init__(self, parent=None):
        super(MyThread, self).__init__(parent)

    def setup(self, thread_no):
        self.thread_no = thread_no

    def run(self):
        time.sleep(random.random()*5)  # random sleep to imitate working
        self.trigger.emit(self.thread_no)


class Main(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(Main, self).__init__(parent)
        self.text_area = QtGui.QTextBrowser()
        self.thread_button = QtGui.QPushButton('Start threads')
        self.thread_button.clicked.connect(self.start_threads)

        central_widget = QtGui.QWidget()
        central_layout = QtGui.QHBoxLayout()
        central_layout.addWidget(self.text_area)
        central_layout.addWidget(self.thread_button)
        central_widget.setLayout(central_layout)
        self.setCentralWidget(central_widget)

    def start_threads(self):
        self.threads = []              # this will keep a reference to threads
        for i in range(10):
            thread = MyThread(self)    # create a thread
            thread.trigger.connect(self.update_text)  # connect to it's signal
            thread.setup(i)            # just setting up a parameter
            thread.start()             # start the thread
            self.threads.append(thread) # keep a reference

    def update_text(self, thread_no):
        self.text_area.append('thread # %d finished' % thread_no)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    mainwindow = Main()
    mainwindow.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>10695490</id><snippet>send</snippet></ROW><ROW><id>10695490</id><snippet>x</snippet></ROW><ROW><id>10695490</id><snippet>None</snippet></ROW><ROW><id>10695490</id><snippet>x</snippet></ROW><ROW><id>10695490</id><snippet>&gt;&gt;&gt; def whizbang():
        for i in range(10):
            x = yield i
            print x


&gt;&gt;&gt; i = whizbang()
&gt;&gt;&gt; next(i)
0
&gt;&gt;&gt; next(i)
None
1
&gt;&gt;&gt; i.send("hi")
hi
2
</snippet></ROW><ROW><id>10695959</id><snippet>ftplib.all_errors</snippet></ROW><ROW><id>10695959</id><snippet>ftp = ... # Create connection

# Change directories - create if it doesn't exist
def chdir(dir): 
    if directory_exists(dir) is False: # (or negate, whatever you prefer for readability)
        ftp.mkd(dir)
    ftp.cwd(dir)

# Check if directory exists (in current location)
def directory_exists(dir):
    filelist = []
    ftp.retrlines('LIST',filelist.append)
    for f in filelist:
        if f.split()[-1] == dir and f.upper().startswith('D'):
            return True
    return False
</snippet></ROW><ROW><id>10695959</id><snippet>directory_exists</snippet></ROW><ROW><id>10695959</id><snippet># Check if directory exists (in current location)
def directory_exists(dir):
    filelist = []
    ftp.retrlines('LIST',filelist.append)
    return any(f.split()[-1] == dir and f.upper().startswith('D') for f in filelist)
</snippet></ROW><ROW><id>10696246</id><snippet>try: 
    abc = ABC.objects.get(fullid=id) 
except ABC.DoesNotExist: 
    ABC.objects.create(params)
else:
    abc.field = value
    abc.save()
</snippet></ROW><ROW><id>10696246</id><snippet>try: ... except: ...</snippet></ROW><ROW><id>10696426</id><snippet>itertools.groupby</snippet></ROW><ROW><id>10696426</id><snippet>for x,y in temp:
    second_to_last = the_last_one
    the_last_one = y
</snippet></ROW><ROW><id>10696426</id><snippet>for x,y in temp:
    second_to_last = the_last_one
    the_last_one = list(y)
</snippet></ROW><ROW><id>10696456</id><snippet>regroup</snippet></ROW><ROW><id>10696610</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>10696610</id><snippet>python ./facedetect.py</snippet></ROW><ROW><id>10696691</id><snippet>LofL=[['CAA46951&amp;Homeobox domain&amp;192:248&amp;F&amp;#CDC1C5&amp;NULL&amp;PFAM&amp;Y&amp;433&amp;'], 
      ['CAA46951&amp;Homeodomain-like&amp;165:252&amp;S&amp;#CD5B45&amp;NULL&amp;SCOP&amp;Y&amp;433&amp;'], 
      ['5330400P12&amp;WD domain, G-beta repeat&amp;131:168&amp;F&amp;#FF8C69&amp;NULL&amp;PFAM&amp;Y&amp;296&amp;'], 
      ['5330400P12&amp;WD domain, G-beta repeat&amp;173:210&amp;F&amp;#FF8C69&amp;NULL&amp;PFAM&amp;Y&amp;296&amp;'], 
      ['5330400P12&amp;WD40-repeat&amp;1:296&amp;S&amp;#00FF7F&amp;NULL&amp;SCOP&amp;Y&amp;296&amp;'], 
      ['AAH62206&amp;Cell division protein&amp;38:311&amp;S&amp;#00CED1&amp;NULL&amp;PFAM&amp;Y&amp;425&amp;'], 
      ['AAH62206&amp;P-loop containing nucleoside triphosphate hydrolases&amp;36:279&amp;S&amp;#00FFFF&amp;NULL&amp;SCOP&amp;Y&amp;425&amp;']]

newL=[]      
for L in LofL:
    newSubL=[]
    for e in L:
        for s in e.split('&amp;'):
            if s:
                newSubL.append(s)
    newL.append(newSubL)
</snippet></ROW><ROW><id>10696691</id><snippet>[['CAA46951', 'Homeobox domain', '192:248', 'F', '#CDC1C5', 'NULL', 'PFAM', 'Y', '433'], ['CAA46951', 'Homeodomain-like', '165:252', 'S', '#CD5B45', 'NULL', 'SCOP', 'Y', '433'], ['5330400P12', 'WD domain, G-beta repeat', '131:168', 'F', '#FF8C69', 'NULL', 'PFAM', 'Y', '296'], ['5330400P12', 'WD domain, G-beta repeat', '173:210', 'F', '#FF8C69', 'NULL', 'PFAM', 'Y', '296'], ['5330400P12', 'WD40-repeat', '1:296', 'S', '#00FF7F', 'NULL', 'SCOP', 'Y', '296'], ['AAH62206', 'Cell division protein', '38:311', 'S', '#00CED1', 'NULL', 'PFAM', 'Y', '425'], ['AAH62206', 'P-loop containing nucleoside triphosphate hydrolases', '36:279', 'S', '#00FFFF', 'NULL', 'SCOP', 'Y', '425']]
</snippet></ROW><ROW><id>10696691</id><snippet>newL=[filter(len, e.split('&amp;')) for l in LofL for e in l] 
</snippet></ROW><ROW><id>10697291</id><snippet>bg = sorted(a, key=lambda n: n["name"]["value"].lower())
</snippet></ROW><ROW><id>10697396</id><snippet>/path/to/root/snapshotView
   vob
      your folder structure
</snippet></ROW><ROW><id>10697396</id><snippet>your folder structure</snippet></ROW><ROW><id>10697418</id><snippet>list = ['abc', 'def', 'ghi']
management.call_command('commandname', *list)
</snippet></ROW><ROW><id>10697418</id><snippet>management.call_command('commandname', 'abc', 'def', 'ghi')
</snippet></ROW><ROW><id>10697439</id><snippet>y</snippet></ROW><ROW><id>10697439</id><snippet>x</snippet></ROW><ROW><id>10697801</id><snippet>s.split(' ', 4)
</snippet></ROW><ROW><id>10698721</id><snippet>CREATE TABLE x (
    i serial primary key,
    value integer not null,
    date timestamp,
    category text);
</snippet></ROW><ROW><id>10698721</id><snippet>SELECT
    first_value(i) over w,
    first_value(value) over w,
    first_value(date) over w
    category,
FROM x
WINDOW w AS (PARTITION BY category ORDER BY date DESC);
</snippet></ROW><ROW><id>10698721</id><snippet>raw</snippet></ROW><ROW><id>10698721</id><snippet>ModelX.objects.raw("""SELECT DISTINCT ....... FROM x WINDOW w .....""")
</snippet></ROW><ROW><id>10698721</id><snippet>SELECT i, value, date, category
FROM (SELECT
        i, value, date, category,
        row_number() over w
    FROM x
    WINDOW w AS (PARTITION BY category ORDER BY date DESC)) AS subquery
WHERE subquery.row_number &lt;= 30;
</snippet></ROW><ROW><id>10698721</id><snippet>CREATE VIEW x_with_reverse_date_index AS
    (SELECT
        i, value, date, category,
        row_number() over w
    FROM x
    WINDOW w AS (PARTITION BY category ORDER BY date DESC));
</snippet></ROW><ROW><id>10698721</id><snippet>class ModelX(models.Model):
    ...
    ...
    row_number = models.IntegerField("Row number when ordering by date desc")

    class Meta:
        db_table = 'x_with_reverse_date_index'
</snippet></ROW><ROW><id>10698721</id><snippet>ModelX.objects.filter(category__in = ('catA','catB'), row_number__lte = 30)
ModelX.objects.filter(row_number = 29)
...
</snippet></ROW><ROW><id>10699186</id><snippet>x = np.array([[1,2], [4,5], [4,6], [5,4], [4,5]])
(x == [4,5]).all(1)

#out: array([False,  True, False, False,  True], dtype=bool)
</snippet></ROW><ROW><id>10699214</id><snippet>&gt; "['Carbon', 'Carbon.Files', '_curses', '_scproxy', 'django.utils',
&gt; 'dummy.Process', 'pkg_resources', 'pysqlite2', 'simplejson',
&gt; 'sqlalchemy.cprocessors', 'sqlalchemy.cresultproxy', 'tornado.epoll']"
</snippet></ROW><ROW><id>10699214</id><snippet>import glob, os, sys

curr_dir = os.path.abspath('.')
pare_dir = os.path.abspath('..')

sys.path = [os.path.join(pare_dir, 'py2exe-0.6.9', 'py2exe'),
           os.path.join(curr_dir, 'src'),
           os.path.join(curr_dir, 'libs', 'tornado'),
           os.path.join(curr_dir, 'libs', 'sqlalchemy'),
           os.path.join(curr_dir, 'libs')] + sys.path


from distutils.core import setup
import py2exe

data_files = [('', ['config.json']),
              ('db', ['db/prs.db']),
              ('templates',      glob.glob('templates/*.*')),
              ('static',         glob.glob('static/*.*  ')),
              ('static/css',     glob.glob('static/css/*.*')),
              ('static/js',      glob.glob('static/js/*.*')),
              ('static/js/libs', glob.glob('static/js/libs/*.*')),
              ('static/img',     glob.glob('static/img/*.*')),
              ]

setup(console=['prs.py'], options={
    'py2exe' : {
        'includes' : ['demjson'],
        'packages' : ['sqlalchemy.dialects.sqlite'],
        }},
    data_files=data_files,
    )
</snippet></ROW><ROW><id>10699276</id><snippet>boto.sqs.queue.Queue</snippet></ROW><ROW><id>10699276</id><snippet>message_class</snippet></ROW><ROW><id>10699276</id><snippet>RawMessage</snippet></ROW><ROW><id>10699380</id><snippet>dv = ['', 0]
result_array = {k: [
        db_array.get(k, result_array.get(k))[0],
        db_array.get(k, dv)[1] + result_array.get(k, dv)[1]
    ] for k in set(db_array) | set(result_array)}
</snippet></ROW><ROW><id>10699380</id><snippet>['', 0]</snippet></ROW><ROW><id>10699380</id><snippet>result_array</snippet></ROW><ROW><id>10699380</id><snippet>0</snippet></ROW><ROW><id>10699380</id><snippet>&gt;&gt;&gt; result_array.get('foobar', 0)[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not subscriptable
</snippet></ROW><ROW><id>10699527</id><snippet>argparse</snippet></ROW><ROW><id>10699527</id><snippet>sys.argv</snippet></ROW><ROW><id>10699527</id><snippet>if not len(sys.argv) &gt; 1</snippet></ROW><ROW><id>10699811</id><snippet>from ctypes import windll, c_int, c_wchar_p
DefineDosDevice = windll.kernel32.DefineDosDeviceW
DefineDosDevice.argtypes = [ c_int, c_wchar_p, c_wchar_p ]

# Create a subst. Check the return for non-zero to mean success
if DefineDosDevice(0, "T:", "C:\\Temp") == 0:
    raise RuntimeError("Subst failed")

# Delete the subst.
if DefineDosDevice(2, "T:", "C:\\Temp") == 0:
    raise RuntimeError("Couldn't remove subst")
</snippet></ROW><ROW><id>10699831</id><snippet>import tornado.options
tornado.options.parse_config_file("/etc/server.conf")
tornado.options.parse_command_line()
</snippet></ROW><ROW><id>10700155</id><snippet>shift</snippet></ROW><ROW><id>10700155</id><snippet>In : residues
Out: array([ 1,  1, 38, 38, 38, 39, 39, 39])

In : atom
Out: 
array(['CA', 'HA', 'CA', 'HA', 'CB', 'CA', 'HA', 'CB'], 
      dtype='|S2')

In : shift
Out: array([7624, 7494, 3395, 3217, 3061, 1115, 1018,  976])

# rows with name 'CB'
In : cb = atom=='CB'

# rows with name 'CA' _and_ residues same as 'CB'
In : ca = numpy.logical_and(numpy.in1d(residues, residues[cb]), atom=='CA')
# or if in1d is not available
# ca = numpy.logical_and([(residue in residues[cb]) for residue in residues], atom=='CA')

In : shift[ca]
Out: array([3395, 1115])

In : shift[cb]
Out: array([3061,  976])
</snippet></ROW><ROW><id>10700739</id><snippet>even,odd = [],[]
for x in range(51): x%2 and even.append(x) or odd.append(x)
</snippet></ROW><ROW><id>10701193</id><snippet>tree = etree.parse(open('./test.xml'))
reviews = tree.findall(".//Review")
</snippet></ROW><ROW><id>10701922</id><snippet>bookmark, created = Bookmark.objects.get_or_create(user=request.user, link=link)
</snippet></ROW><ROW><id>10701922</id><snippet>__unicode__</snippet></ROW><ROW><id>10702108</id><snippet>import re
s = 'Lorem ipsum dolor [mytag]something[/mytag]sit amet, ipsum [mytag]something else[/mytag]a laoreet ultricies'
print re.sub(r'\[mytag\](.+?)\[/mytag\]', r'&lt;img src="\1"&gt;', s)
</snippet></ROW><ROW><id>10702119</id><snippet>PyEval_InitThreads();
</snippet></ROW><ROW><id>10702119</id><snippet>PyEval_SaveThread();
</snippet></ROW><ROW><id>10702265</id><snippet>^[-./\:?AMP \d]*$
</snippet></ROW><ROW><id>10702494</id><snippet>get_list</snippet></ROW><ROW><id>10702494</id><snippet>get_list</snippet></ROW><ROW><id>10702494</id><snippet>Resource</snippet></ROW><ROW><id>10702494</id><snippet>obj_get_list</snippet></ROW><ROW><id>10702494</id><snippet>alter_list_data_to_serialize(request, to_be_serialized)</snippet></ROW><ROW><id>10702494</id><snippet>class SomeResource(Resource):
    class Meta(...):
         ...
         field_list_to_remove = [ 'field1', 'field2' ]
         ...

    def alter_list_data_to_serialize(request, to_be_serialized):
        for obj in to_be_serialized['objects']:
            for field_name in self._meta.field_list_to_remove:
                del obj[field_name]
        return to_be_serialized
</snippet></ROW><ROW><id>10702653</id><snippet>#time_slots.py
from datetime import datetime, timedelta

appointments = [(datetime(2012, 5, 22, 10), datetime(2012, 5, 22, 10, 30)),
                (datetime(2012, 5, 22, 12), datetime(2012, 5, 22, 13)),
                (datetime(2012, 5, 22, 15, 30), datetime(2012, 5, 22, 17, 10))]

hours = (datetime(2012, 5, 22, 9), datetime(2012, 5, 22, 18))

def get_slots(hours, appointments, duration=timedelta(hours=1)):
    slots = sorted([(hours[0], hours[0])] + appointments + [(hours[1], hours[1])])
    for start, end in ((slots[i][1], slots[i+1][0]) for i in range(len(slots)-1)):
        assert start &lt;= end, "Cannot attend all appointments"
        while start + duration &lt;= end:
            print "{:%H:%M} - {:%H:%M}".format(start, start + duration)
            start += duration

if __name__ == "__main__":
    get_slots(hours, appointments)


% python time_slots.py 
09:00 - 10:00
10:30 - 11:30
13:00 - 14:00
14:00 - 15:00
</snippet></ROW><ROW><id>10702710</id><snippet>None</snippet></ROW><ROW><id>10702710</id><snippet>reactor=qt4reactor.install()
</snippet></ROW><ROW><id>10702710</id><snippet>reactor</snippet></ROW><ROW><id>10702710</id><snippet>reactor</snippet></ROW><ROW><id>10702710</id><snippet>None</snippet></ROW><ROW><id>10702710</id><snippet>qt4reactor.install(app)
from twisted.internet import reactor
</snippet></ROW><ROW><id>10702859</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; Lmain=['arc123', 'arc234', 'xyz111', 'xyz222','ppp999','ppp888']
&gt;&gt;&gt; Pattern=['arc','xyz']
&gt;&gt;&gt; [x for x in Lmain if not any(re.search(y, x) for y in Pattern)]
['ppp999', 'ppp888']
</snippet></ROW><ROW><id>10703214</id><snippet>str(1)</snippet></ROW><ROW><id>10703214</id><snippet>1</snippet></ROW><ROW><id>10703214</id><snippet>01</snippet></ROW><ROW><id>10703214</id><snippet>"%02d" % month</snippet></ROW><ROW><id>10703214</id><snippet>os.path.join</snippet></ROW><ROW><id>10703372</id><snippet>GenericRelation</snippet></ROW><ROW><id>10703372</id><snippet>ManyToManyField</snippet></ROW><ROW><id>10703372</id><snippet>Service._meta.many_to_many</snippet></ROW><ROW><id>10703372</id><snippet>filter(lambda f:isinstance(f, generic.GenericRelation), Service._meta.many_to_many)
</snippet></ROW><ROW><id>10703589</id><snippet>iterparse</snippet></ROW><ROW><id>10703589</id><snippet>libxml</snippet></ROW><ROW><id>10703589</id><snippet>tree = etree.parse("./test.xml")
num_elems = tree.xpath("count(//Product)")    # note: returns a float
</snippet></ROW><ROW><id>10703746</id><snippet>ClassName</snippet></ROW><ROW><id>10703746</id><snippet>self</snippet></ROW><ROW><id>10703746</id><snippet>self</snippet></ROW><ROW><id>10703746</id><snippet>class_variable_dict</snippet></ROW><ROW><id>10703746</id><snippet>self</snippet></ROW><ROW><id>10703746</id><snippet>self</snippet></ROW><ROW><id>10703746</id><snippet>ClassName</snippet></ROW><ROW><id>10703746</id><snippet>ClassName</snippet></ROW><ROW><id>10703746</id><snippet>timeit</snippet></ROW><ROW><id>10703746</id><snippet>import timeit

setup='''
class A:
    var = {}
    def f1(self):
        x = A.var
    def f2(self):
        x = self.var

a = A()
'''
print 'access via class var: %.3f' % timeit.timeit('a.f1()', setup=setup, number=100000000)
print 'access via inst var: %.3f' % timeit.timeit('a.f2()', setup=setup, number=100000000)
</snippet></ROW><ROW><id>10703920</id><snippet>mapM_ (\i -&gt; putStrLn (concat ["http://www.theoi.com/Text/HomerOdyssey", show i, ".html"])) [0..24]
</snippet></ROW><ROW><id>10703920</id><snippet>putStrLn</snippet></ROW><ROW><id>10703920</id><snippet>print</snippet></ROW><ROW><id>10703920</id><snippet>mapM_</snippet></ROW><ROW><id>10703920</id><snippet>mapM_</snippet></ROW><ROW><id>10703945</id><snippet>n</snippet></ROW><ROW><id>10703945</id><snippet>N</snippet></ROW><ROW><id>10703945</id><snippet>p_1 = 2, p_2 = 3, ...</snippet></ROW><ROW><id>10703945</id><snippet>k</snippet></ROW><ROW><id>10703945</id><snippet>[p_i, ..., p_j]</snippet></ROW><ROW><id>10703945</id><snippet>(i,j)</snippet></ROW><ROW><id>10703945</id><snippet>i &lt; j &lt; k</snippet></ROW><ROW><id>10703945</id><snippet>(k-1)*(k-2)/2</snippet></ROW><ROW><id>10703945</id><snippet>k</snippet></ROW><ROW><id>10703945</id><snippet>n</snippet></ROW><ROW><id>10703945</id><snippet>n³/6</snippet></ROW><ROW><id>10703945</id><snippet>w(i.j)</snippet></ROW><ROW><id>10703945</id><snippet>n-j</snippet></ROW><ROW><id>10703945</id><snippet>N = 1000</snippet></ROW><ROW><id>10703945</id><snippet>n = 168</snippet></ROW><ROW><id>10703945</id><snippet>N = 10**6</snippet></ROW><ROW><id>10703945</id><snippet>n = 78498</snippet></ROW><ROW><id>10703945</id><snippet>8.3*10**13</snippet></ROW><ROW><id>10703945</id><snippet>j-i+1</snippet></ROW><ROW><id>10703945</id><snippet>j-i+1</snippet></ROW><ROW><id>10703945</id><snippet>w(i,j)</snippet></ROW><ROW><id>10703945</id><snippet>p_k</snippet></ROW><ROW><id>10703945</id><snippet>k³/6</snippet></ROW><ROW><id>10703945</id><snippet>k**4/24</snippet></ROW><ROW><id>10703945</id><snippet>N = 1000</snippet></ROW><ROW><id>10703945</id><snippet>1.6*10**18</snippet></ROW><ROW><id>10703945</id><snippet>N = 1000000</snippet></ROW><ROW><id>10703945</id><snippet>3.1*10**7</snippet></ROW><ROW><id>10703945</id><snippet>n³/6</snippet></ROW><ROW><id>10703945</id><snippet>n³/6</snippet></ROW><ROW><id>10703945</id><snippet>8.3*10**13</snippet></ROW><ROW><id>10703945</id><snippet>8.3*10**13</snippet></ROW><ROW><id>10704003</id><snippet>import collections # requires Python 2.7 -- see note below if you're using an earlier version
def merge_dict(d1, d2):
    """
    Modifies d1 in-place to contain values from d2.  If any value
    in d1 is a dictionary (or dict-like), *and* the corresponding
    value in d2 is also a dictionary, then merge them in-place.
    """
    for k,v2 in d2.items():
        v1 = d1.get(k) # returns None if v1 has no value for this key
        if ( isinstance(v1, collections.Mapping) and 
             isinstance(v2, collections.Mapping) ):
            merge_dict(v1, v2)
        else:
            d1[k] = v2
</snippet></ROW><ROW><id>10704003</id><snippet>isinstance(v, collections.Mapping)</snippet></ROW><ROW><id>10704003</id><snippet>isinstance(v, dict)</snippet></ROW><ROW><id>10704003</id><snippet>hasattr(v, "items")</snippet></ROW><ROW><id>10704003</id><snippet>update</snippet></ROW><ROW><id>10704435</id><snippet>def search():
    form = FORM(INPUT(_type='text', _name='keywords'),
        INPUT(_type='submit', _value='Search'),
        INPUT(_type='submit', _value="I'm feeling lucky", _name='lucky'),
        _method='get')
    if request.vars.keywords:
        if request.vars.lucky:
            [code to return "I'm feeling lucky" results]
        else:
            [code to return regular results]
    return dict(form=form)
</snippet></ROW><ROW><id>10704435</id><snippet>FORM()</snippet></ROW><ROW><id>10704435</id><snippet>FORM()</snippet></ROW><ROW><id>10704622</id><snippet>__getattr__</snippet></ROW><ROW><id>10704622</id><snippet>class Anaconda:

    def __init__(self, python):
        self.python = python

    def wriggle(self):
        self.python.wriggle()


    def devourCrocodile(self, croc):
        ...

    def __getattr__(self, name):
        return getattr(self.python, name)
</snippet></ROW><ROW><id>10704622</id><snippet>__getattr__</snippet></ROW><ROW><id>10705451</id><snippet>[person for person in people if person.MAR_STATUS == 'MARRIED']
</snippet></ROW><ROW><id>10705695</id><snippet>boot</snippet></ROW><ROW><id>10705695</id><snippet>controllers</snippet></ROW><ROW><id>10705695</id><snippet>home</snippet></ROW><ROW><id>10705695</id><snippet>home</snippet></ROW><ROW><id>10705695</id><snippet>boot</snippet></ROW><ROW><id>10705819</id><snippet>{% for key, value in confirmlist.items %}
</snippet></ROW><ROW><id>10705819</id><snippet>confirmlist['items']</snippet></ROW><ROW><id>10705819</id><snippet>defaultdict</snippet></ROW><ROW><id>10705819</id><snippet>context['confirmlist'] = dict(confirm_list)
</snippet></ROW><ROW><id>10705819</id><snippet>default_factory</snippet></ROW><ROW><id>10705819</id><snippet>None</snippet></ROW><ROW><id>10705819</id><snippet>confirm_list.default_factory = None
context['confirmlist'] = confirm_list
</snippet></ROW><ROW><id>10705871</id><snippet>hello</snippet></ROW><ROW><id>10705871</id><snippet>from fib import *</snippet></ROW><ROW><id>10705871</id><snippet>hello</snippet></ROW><ROW><id>10705871</id><snippet>from fib import *
hello.hello()
</snippet></ROW><ROW><id>10705871</id><snippet>from fib.hello import *
hello()
</snippet></ROW><ROW><id>10705903</id><snippet>read()</snippet></ROW><ROW><id>10705903</id><snippet>*</snippet></ROW><ROW><id>10705903</id><snippet>import re
with open(filename, 'r') as f:
    inBetween = re.search(r"Marker 2(.*)Marker 3", f.read(), re.S | re.I).group()
</snippet></ROW><ROW><id>10705903</id><snippet>with open(filename, 'r') as f:
    lines = f.readlines
    for i in range(len(lines)):
        if "marker 2" in lines[i].lower():
            start = i
            break
    else:
        start = None

    for i in range(len(lines), -1, -1):
        if "marker 3" in lines[i].lower():
            end = i
            break
    else:
        end = None

    if None not in (start, end):
        inBetween = lines[start + 1:end]
    else:
        #one of the markers is missing, handle here.
</snippet></ROW><ROW><id>10706171</id><snippet>coeff_temp = coeff
</snippet></ROW><ROW><id>10706171</id><snippet>coeff</snippet></ROW><ROW><id>10706171</id><snippet>coeff_temp[k] = data
</snippet></ROW><ROW><id>10706171</id><snippet>coeff_temp = list(coeff)
</snippet></ROW><ROW><id>10706171</id><snippet>coeff_temp = coeff[:]
</snippet></ROW><ROW><id>10706171</id><snippet>import itertools
data = {
    "dog": xrange(1, 5),
    "cat": xrange(1, 5)
    #add more here...
}
combinations = (dict(zip(data.keys(), c)) for c in itertools.product(*data.values()))

for c in combinations:
    print c
</snippet></ROW><ROW><id>10706328</id><snippet>__new__</snippet></ROW><ROW><id>10706328</id><snippet>class _MyClass(object):
    pass

def MyClass(*args, **kw):
    if not "my_class_object" in all_objects:
         all_objects["my_class_object"] = _MyClass(*args, **kw)
    return all_objects["my_class_object"]
</snippet></ROW><ROW><id>10706603</id><snippet>mysocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>10706603</id><snippet>server_bind</snippet></ROW><ROW><id>10706603</id><snippet>def server_bind(self):
    HTTPServer.server_bind(self)
    self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>10706603</id><snippet>accept()</snippet></ROW><ROW><id>10706603</id><snippet>self.run</snippet></ROW><ROW><id>10706603</id><snippet>select()</snippet></ROW><ROW><id>10706603</id><snippet>poll()</snippet></ROW><ROW><id>10706603</id><snippet>accept()</snippet></ROW><ROW><id>10706603</id><snippet>self.run</snippet></ROW><ROW><id>10706804</id><snippet>&gt;&gt;&gt; from datetime import datetime as dt
&gt;&gt;&gt; date_as_string = '1/12/07 00:07 AM'
&gt;&gt;&gt; format_12 = '%d/%m/%y %I:%M %p'
&gt;&gt;&gt; format_24 = '%d/%m/%y %H:%M %p'
&gt;&gt;&gt; date_string, time_string = date_as_string.split(' ', 1)
&gt;&gt;&gt; try:
...     dt.strptime(date_string + ' ' + time_string, format_12)
... except ValueError:
...     dt.strptime(date_string + ' ' + time_string, format_24)
... 
datetime.datetime(2007, 12, 1, 0, 7)
</snippet></ROW><ROW><id>10706886</id><snippet>import multiprocessing
...
def wrapper(currentfile):
    #create your commandline -- for the sake of simplicity, I assume that
    #the only thing that changes is the filename you are passing to
    #HandBrakeCLI (and that the filename is the last argument to pass)
    cmd='HandBrakeCLI -i ... -o ... '+currentfile 
    proc = subprocess.Popen(cmd)
    proc.wait()
    return 'foo'

files=os.listdir(path)  #Any way that you build up your list of files is fine
output = multiprocessing.Pool(4).map(wrapper,files) #output is ['foo', 'foo', ..., 'foo']
</snippet></ROW><ROW><id>10706886</id><snippet>map</snippet></ROW><ROW><id>10706993</id><snippet>GraffitiApp()</snippet></ROW><ROW><id>10706993</id><snippet>Flask()</snippet></ROW><ROW><id>10706993</id><snippet>app</snippet></ROW><ROW><id>10707293</id><snippet>property</snippet></ROW><ROW><id>10707293</id><snippet>class Foo(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self,y):
        self._x = y
</snippet></ROW><ROW><id>10707293</id><snippet>class Foo(object):
     def __init__(self):
         self.x = None
</snippet></ROW><ROW><id>10707293</id><snippet>__setattr__</snippet></ROW><ROW><id>10707293</id><snippet>__getattr__</snippet></ROW><ROW><id>10707293</id><snippet>class Foo(object):
    def __init__(self):
        self._x = None
    def __setattr__(self,attr,obj):
        if(attr == 'x'):
            object.__setattr__(self,'_x',obj)
        else:
            object.__setattr__(self,attr,obj)

     def __getattr__(self,attr):
         if(attr == 'x'):
             return object.__getattr__(self,'_x')
         else:
             return object.__getattr__(self,attr)
</snippet></ROW><ROW><id>10707293</id><snippet>__setattr__</snippet></ROW><ROW><id>10707293</id><snippet>__getattr__</snippet></ROW><ROW><id>10707293</id><snippet>__setattr__</snippet></ROW><ROW><id>10707293</id><snippet>__getattr__</snippet></ROW><ROW><id>10707293</id><snippet>myclassinstance = MyClass()
myclassinstance.x = 'foo'  #translates to MyClass.__setattr__(myclassinstance,'x','foo')
bar = myclassinstance.x    #translates to bar=MyClass.__getattr__(myclassinstance,'x')
</snippet></ROW><ROW><id>10707293</id><snippet>__get__</snippet></ROW><ROW><id>10707293</id><snippet>__set__</snippet></ROW><ROW><id>10707295</id><snippet>flips = [random.randint(1, 2) for i in range(100)]
</snippet></ROW><ROW><id>10707295</id><snippet>heads = flips.count(1)
tails = flips.count(2)
</snippet></ROW><ROW><id>10707295</id><snippet>num_flips = 100
flips = [random.randint(0, 1) for _ in xrange(num_flips)]
heads = sum(flips)
tails = num_flips - heads
</snippet></ROW><ROW><id>10707383</id><snippet>from sleekxmpp import Iq
from sleekxmpp.xmlstream import ElementBase, register_stanza_plugin

class AA(ElementBase):
    name = 'aa'
    namespace = 'http://myweb.com'
    plugin_attrib = 'aa'
    interfaces = set(['name', 'lang', 'mail'])
    sub_interfaces = interfaces

register_stanza_plugin(Iq, AA)
</snippet></ROW><ROW><id>10707383</id><snippet>name</snippet></ROW><ROW><id>10707383</id><snippet>namespace</snippet></ROW><ROW><id>10707383</id><snippet>plugin_attrib</snippet></ROW><ROW><id>10707383</id><snippet>iq['type']</snippet></ROW><ROW><id>10707383</id><snippet>iq['from']</snippet></ROW><ROW><id>10707383</id><snippet>plugin_attrib</snippet></ROW><ROW><id>10707383</id><snippet>"aa"</snippet></ROW><ROW><id>10707383</id><snippet>iq['aa']</snippet></ROW><ROW><id>10707383</id><snippet>interfaces</snippet></ROW><ROW><id>10707383</id><snippet>aa = AA()
aa['name'] = 'foo'
print aa
"&lt;aa xmlns='http://myweb.com' name='foo' /&gt;"
</snippet></ROW><ROW><id>10707383</id><snippet>sub_interfaces</snippet></ROW><ROW><id>10707383</id><snippet>sub_interfaces = interfaces</snippet></ROW><ROW><id>10707383</id><snippet>aa = AA()
aa['name'] = 'foo'
print aa
"&lt;aa xmlns='http://myweb.com'&gt;&lt;name&gt;foo&lt;/name&gt;&lt;/aa&gt;"
</snippet></ROW><ROW><id>10707383</id><snippet>iq = Iq()
# ... set iq parameters
iq.enable('aa')  # Add an initial, empty aa element.
try:
    resp = iq.send()
    print(resp['aa']['name'])
    # ..., etc
except XMPPError:
    print('There was an error')
</snippet></ROW><ROW><id>10707967</id><snippet>import matplotlib.pyplot as plt

x = [124.46, 8.20, 52.55, 4.33]
y = [124.46, 50.2, 78.3, 778.8]
xerr = [54.2, 0.1, 2.41, 1.78]
yerr = [22.55, 0.37, 3.77, 0.14]

descrip = ['Atom 1', 'Atom 2', 'Atom 3', 'Atom 4']


plt.errorbar(x, y, xerr, yerr, capsize=0, ls='none', color='black', 
            elinewidth=2)

for xpos, ypos, name in zip(x, y, descrip):
    plt.annotate(name, (xpos, ypos), xytext=(8, 8), va='bottom',
                textcoords='offset points')

plt.show()
</snippet></ROW><ROW><id>10707967</id><snippet>errorbar</snippet></ROW><ROW><id>10707967</id><snippet>plot</snippet></ROW><ROW><id>10707967</id><snippet>linestyle='none'</snippet></ROW><ROW><id>10707967</id><snippet>ls='none'</snippet></ROW><ROW><id>10707967</id><snippet>capsize=0</snippet></ROW><ROW><id>10707967</id><snippet>elinewidth=2</snippet></ROW><ROW><id>10707967</id><snippet>marker='o'</snippet></ROW><ROW><id>10707967</id><snippet>errorbar</snippet></ROW><ROW><id>10707967</id><snippet>annotate</snippet></ROW><ROW><id>10708177</id><snippet>'0.5x0.5'
np.arange(-89.75,90.25,0.5)      #[-89.75,-89.25,...,89.25,89.75],  latitudes 
np.arange(0.25,360.25,0.5)       #[0.25,0.75,...,359.25,359.75],    longitudes
</snippet></ROW><ROW><id>10708177</id><snippet>'1x1'
np.arange(-90.0,91.0,1.0)         #[-90.0,-89.0,...,89.0,90.0],     latitudes 
np.arange(-180.0,180.0,1.0)       #[-180.0,-179.0,...178.0,179.0],  longitudes
</snippet></ROW><ROW><id>10708177</id><snippet>'73x96 (or N48)'
np.arange(-90.0,92.5,2.5)         #[-90.0,-87.5,...,87.5,90.0]      latitudes 
np.arange(0.0,360.00,3.75)        #[0.0,3.75,...,352.5,356.25]      longitudes
</snippet></ROW><ROW><id>10708177</id><snippet>'1.25x1.875 (or N96)'
np.array(-90.0,91.25,1.25)        #[-90.0,-88.75,...,90.00]         latitudes 
np.array(0.0,360.00,1.875)        #[0.0,1.875,...,358.125]          longitudes
</snippet></ROW><ROW><id>10708177</id><snippet>upsample</snippet></ROW><ROW><id>10708177</id><snippet>1*1</snippet></ROW><ROW><id>10708177</id><snippet>0.5*0.5</snippet></ROW><ROW><id>10708177</id><snippet>data_up = np.repeat(data, 2, axis=0)
data_up = np.repeat(data_up, 2, axis=1)
</snippet></ROW><ROW><id>10708177</id><snippet>downsample</snippet></ROW><ROW><id>10708177</id><snippet>downsampling</snippet></ROW><ROW><id>10708177</id><snippet>upsample</snippet></ROW><ROW><id>10708177</id><snippet>latitude = 90 or -90</snippet></ROW><ROW><id>10708177</id><snippet>pole</snippet></ROW><ROW><id>10708261</id><snippet>plot</snippet></ROW><ROW><id>10708261</id><snippet>plt.figure()</snippet></ROW><ROW><id>10708261</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>10708460</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d["word1"] = 1
&gt;&gt;&gt; d["word2"] = 2
&gt;&gt;&gt; d
{'word1': 1, 'word2': 2}
&gt;&gt;&gt; d["word2"] = 3
&gt;&gt;&gt; d
{'word1': 1, 'word2': 3}
</snippet></ROW><ROW><id>10708460</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d["word1"].append(1)
&gt;&gt;&gt; d["word2"].append(2)
&gt;&gt;&gt; d["word2"].append(3)
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'word1': [1], 'word2': [2, 3]})
</snippet></ROW><ROW><id>10708597</id><snippet>import csv
def csvWriter(filename, records): 
  header = []
  for i in records:
    if len(i) &lt; 1:
      records.remove(i)
  for i in records:
    for v in i:
      if v not in header:
        header.append(v)
  for i in records:
    if len(i) == 0:
      return '0 records processed.'
  test=open(filename,'w') 
  dict_wr = csv.DictWriter(test,header,lineterminator='\n')
  dict_wr.writerow(dict(zip(header,header)))
  for i in records:     
  # Adding in the **sorted** built-in fixed it
    dict_wr.writerow(dict(zip(header,sorted(i.values()))))  
  test.close()
  return '%d records processed.' % len(records)
</snippet></ROW><ROW><id>10708669</id><snippet>attrs</snippet></ROW><ROW><id>10708669</id><snippet>from django import forms

class MyForm(forms.Form):    
    my_file = forms.FileField()

    def __init__(self, *args, **kwargs):
        super(MyForm, self).__init__(*args, **kwargs)
        self.fields['my_file'].widget.attrs.update({'accept': 'image/*'})
</snippet></ROW><ROW><id>10708924</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(10)
Fraction(10, 1)
&gt;&gt;&gt; Fraction(10)**50
Fraction(100000000000000000000000000000000000000000000000000, 1)
&gt;&gt;&gt; Fraction(10)**50-1
Fraction(99999999999999999999999999999999999999999999999999, 1)
&gt;&gt;&gt; (Fraction(10)**50-1)/23
Fraction(99999999999999999999999999999999999999999999999999, 23)
&gt;&gt;&gt; ((Fraction(10)**50-1)/23) % 1
Fraction(5, 23)
&gt;&gt;&gt; float(((Fraction(10)**50-1)/23) % 1)
0.21739130434782608
</snippet></ROW><ROW><id>10708924</id><snippet>((10^n-1) % 23)/23</snippet></ROW><ROW><id>10708924</id><snippet>&gt;&gt;&gt; pow(10, 50, 23)
6
&gt;&gt;&gt; pow(10, 50, 23) - 1
5
&gt;&gt;&gt; (pow(10, 50, 23) - 1) % 23 # handle possible wraparound
5
&gt;&gt;&gt; ((pow(10, 50, 23) - 1) % 23) / 23.0
0.21739130434782608
</snippet></ROW><ROW><id>10708938</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>10708938</id><snippet>urlpatterns = patterns('',
    # Other urls are here
    url(r'^login/$', 'django.contrib.auth.views.login'),
)
</snippet></ROW><ROW><id>10708938</id><snippet>urlpatterns = patterns('django.contrib',
    # Other urls are here
    url(r'^login/$', 'auth.views.login'),
    url(r'^logout/$', 'auth.views.logout'),
)
</snippet></ROW><ROW><id>10708964</id><snippet>spritex = 100

def movementsprite():
    global spritex  #I added this line
    keys = pygame.key.get_pressed()
    for event in pygame.event.get():
         if event.type == pygame.QUIT:
             running = False

    if keys[pygame.K_RIGHT]:
              spritex += 10
              print spritex

    elif keys[pygame.K_LEFT]:              
              spritex -= 10
</snippet></ROW><ROW><id>10708964</id><snippet>def movementsprite():</snippet></ROW><ROW><id>10708964</id><snippet>from other_file import movement_func</snippet></ROW><ROW><id>10708964</id><snippet>from other_file import *</snippet></ROW><ROW><id>10708964</id><snippet>return spritex</snippet></ROW><ROW><id>10708964</id><snippet>spritex=movementfunction()</snippet></ROW><ROW><id>10709129</id><snippet>&gt;&gt;&gt; data = [(+1,0), (-1, 1), (+1,3), (+1, 3), (-1, 5), (+1, 9)]
&gt;&gt;&gt; [(sum(x[0] for x in data[:i+1]), data[i][1]) for i in range(len(data))]
[(1, 0), (0, 1), (1, 3), (2, 3), (1, 5), (2, 9)]
</snippet></ROW><ROW><id>10709129</id><snippet>sum()</snippet></ROW><ROW><id>10709129</id><snippet>result = [data[0]]
for change, t in data[1:]:
    result.append((result[-1][0]+change, t))
</snippet></ROW><ROW><id>10709129</id><snippet>x[0]</snippet></ROW><ROW><id>10709129</id><snippet>sum(x[0] for x in data[:i+1])</snippet></ROW><ROW><id>10709129</id><snippet>x.change</snippet></ROW><ROW><id>10709201</id><snippet>check_names = ["Snagit", "Camtasia", "GotoMeeting"]
variables = []
for name in check_names:
    variables.append(IntVar())
    Checkbutton(text=name, variable=variables[-1]).pack()

app.mainloop()
checks = [variable.get() for variable in variables]
</snippet></ROW><ROW><id>10709387</id><snippet>ModelChoiceField</snippet></ROW><ROW><id>10709387</id><snippet>label_from_instance</snippet></ROW><ROW><id>10709387</id><snippet>__unicode__</snippet></ROW><ROW><id>10709508</id><snippet>ROOT_URLCONF = 'try.urls'
</snippet></ROW><ROW><id>10709508</id><snippet>ROOT_URLCONF = 'qlimp.urls'
</snippet></ROW><ROW><id>10709601</id><snippet>C</snippet></ROW><ROW><id>10709601</id><snippet>range</snippet></ROW><ROW><id>10709601</id><snippet>np.arange</snippet></ROW><ROW><id>10709601</id><snippet>import numpy as np
import sys

sys.version
# out: '2.7.3rc2 (default, Mar 22 2012, 04:35:15) \n[GCC 4.6.3]'
np.version.version
# out: '1.6.2'

size = int(1E6)

%timeit for x in range(size): x ** 2
# out: 10 loops, best of 3: 136 ms per loop

%timeit for x in xrange(size): x ** 2
# out: 10 loops, best of 3: 88.9 ms per loop

# avoid this
%timeit for x in np.arange(size): x ** 2
#out: 1 loops, best of 3: 1.16 s per loop

# use this
%timeit np.arange(size) ** 2
#out: 100 loops, best of 3: 19.5 ms per loop
</snippet></ROW><ROW><id>10709601</id><snippet>xrange</snippet></ROW><ROW><id>10710021</id><snippet>def HaversineDistance(location1, location2):
  """Method to calculate Distance between two sets of Lat/Lon."""
  lat1, lon1 = location1
  lat2, lon2 = location2
  earth = 6371 #Earth's Radius in Kms.

 #Calculate Distance based in Haversine Formula
 dlat = math.radians(lat2-lat1)
 dlon = math.radians(lon2-lon1)
 a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)
 c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
 d = earth * c
 return d
</snippet></ROW><ROW><id>10710021</id><snippet>def get_closest_cities(self, kms):
  cities = []
  #Find surrounding Cities of a given city within a given radius
  allcities = self.country.city_set
  for city in allcities:
    distance = HaversineDistance((self.location.lat, self.location.lon),(city.location.lat, city.location.lon))
    if not distance &gt;= kms:
      cities.append((city.name, int(distance)))
  cities.remove(cities[0])
  return cities
</snippet></ROW><ROW><id>10710069</id><snippet>from ctypes import *

class Foo(Structure):
    _fields_ = [("a", c_uint),
                ("b", c_uint),
                ("c", c_ushort),
                ("d", c_ushort)]

    def __repr__(self):
        return "&lt;Foo: a:%d b:%d c:%d e:%d&gt;" % (self.a, self.b, self.c, self.d)

f = Foo(1,2,3,4)
print repr(f)

# &lt;Foo: a:1 b:2 c:3 e:4&gt;
</snippet></ROW><ROW><id>10710069</id><snippet>print repr(Foo)
</snippet></ROW><ROW><id>10710069</id><snippet>&lt;class '__main__.Foo'&gt;
</snippet></ROW><ROW><id>10710069</id><snippet>repr</snippet></ROW><ROW><id>10710343</id><snippet>import wx

########################################################################
class ClipboardPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        lbl = wx.StaticText(self, label="Enter text to copy to clipboard:")
        self.text = wx.TextCtrl(self, style=wx.TE_MULTILINE)
        copyBtn = wx.Button(self, label="Copy")
        copyBtn.Bind(wx.EVT_BUTTON, self.onCopy)
        copyFlushBtn = wx.Button(self, label="Copy and Flush")
        copyFlushBtn.Bind(wx.EVT_BUTTON, self.onCopyAndFlush)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(lbl, 0, wx.ALL, 5)
        sizer.Add(self.text, 1, wx.EXPAND)
        sizer.Add(copyBtn, 0, wx.ALL|wx.CENTER, 5)
        sizer.Add(copyFlushBtn, 0, wx.ALL|wx.CENTER, 5)
        self.SetSizer(sizer)

    #----------------------------------------------------------------------
    def onCopy(self, event):
        """"""
        self.dataObj = wx.TextDataObject()
        self.dataObj.SetText(self.text.GetValue())
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(self.dataObj)
            wx.TheClipboard.Close()
        else:
            wx.MessageBox("Unable to open the clipboard", "Error")

    #----------------------------------------------------------------------
    def onCopyAndFlush(self, event):
        """"""
        self.dataObj = wx.TextDataObject()
        self.dataObj.SetText(self.text.GetValue())
        if wx.TheClipboard.Open():
            wx.TheClipboard.SetData(self.dataObj)
            wx.TheClipboard.Flush()
        else:
            wx.MessageBox("Unable to open the clipboard", "Error")

        self.GetParent().Close()

########################################################################
class ClipboardFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Clipboard Tutorial")
        panel = ClipboardPanel(self)
        self.Show()


if __name__ == "__main__":
    app = wx.App(False)
    frame = ClipboardFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>10710414</id><snippet>re</snippet></ROW><ROW><id>10710414</id><snippet>str.isspace()</snippet></ROW><ROW><id>10710414</id><snippet>&gt;&gt;&gt; 'hello'.isspace()
False
&gt;&gt;&gt; '  \n\t  '.isspace()
True
</snippet></ROW><ROW><id>10710438</id><snippet>surf_detector = cv2.FeatureDetector_create("SURF")
surf_descriptor = cv2.DescriptorExtractor_create("SURF")
</snippet></ROW><ROW><id>10710438</id><snippet>cv2.SURF()</snippet></ROW><ROW><id>10710613</id><snippet>numpy.testing.assert_equal</snippet></ROW><ROW><id>10710613</id><snippet>numpy.testing.assert_array_equal</snippet></ROW><ROW><id>10710613</id><snippet>try/except</snippet></ROW><ROW><id>10710613</id><snippet>In : import numpy as np

In : def nan_equal(a,b):
...:     try:
...:         np.testing.assert_equal(a,b)
...:     except AssertionError:
...:         return False
...:     return True

In : a=np.array([1, 2, np.NaN])

In : b=np.array([1, 2, np.NaN])

In : nan_equal(a,b)
Out: True

In : a=np.array([1, 2, np.NaN])

In : b=np.array([3, 2, np.NaN])

In : nan_equal(a,b)
Out: False
</snippet></ROW><ROW><id>10710613</id><snippet>assert</snippet></ROW><ROW><id>10710613</id><snippet>True/False</snippet></ROW><ROW><id>10710711</id><snippet>class WebText:
    def __init__(self, text):
        self.freq_dist_weighted = {} #### RESET the dictionary HERE ####
         ...
</snippet></ROW><ROW><id>10710786</id><snippet>output = subprocess.check_output('gams "indus89.gms"\r\n', shell=True)
</snippet></ROW><ROW><id>10710839</id><snippet>clipboard = '&amp;'.join(args)</snippet></ROW><ROW><id>10711151</id><snippet>lastiterline = None
with open(filename) as f:
    for line in f:
        line = line.strip()
        if line.startswith("iter"):
           lastiterline = line
        elif line.startswith("FLAG"):
           if lastiterline:
               print line
               print lastiterline
           lastiterline = None
</snippet></ROW><ROW><id>10711237</id><snippet>f = open('your_utf8_encoded_file.csv', 'rb')
reader = csv.reader(f)
for utf8_row in reader:
    unicode_row = [x.decode('utf8') for x in utf8_row]
    print unicode_row
</snippet></ROW><ROW><id>10711340</id><snippet>endDayUtilities</snippet></ROW><ROW><id>10711340</id><snippet>float()</snippet></ROW><ROW><id>10711343</id><snippet>data</snippet></ROW><ROW><id>10711471</id><snippet>basicConfig()</snippet></ROW><ROW><id>10711471</id><snippet>root_logger= logging.getLogger()
root_logger.setLevel(logging.DEBUG) # or whatever
handler = logging.FileHandler('test.log', 'w', 'utf-8') # or whatever
handler.setFormatter = logging.Formatter('%(name)s %(message)s') # or whatever
root_logger.addHandler(handler)
</snippet></ROW><ROW><id>10711471</id><snippet>basicConfig()</snippet></ROW><ROW><id>10711593</id><snippet>r+</snippet></ROW><ROW><id>10711593</id><snippet>with open('C:/Users/th/Dropbox/com/MS1Ctt-P-temp.INP', 'r+') as f:
    lines = f.readlines()
    #... Perform whatever replacement you'd like on lines
    f.seek(0)
    f.writelines(lines)
</snippet></ROW><ROW><id>10711684</id><snippet>def split_to_chunks(wholeFileList):
    s = ssdeep()
    calculated_chunks = []
    for someFileId in wholeFileList:
        for chunk in calculated_chunks:
            if s.compare(chunk[0], someFileId) &gt; threshold:
                chunk.append(someFileId)
                break
        else: # important: this else is on 'for ' level
            # so if there was no 'break' so someFileId is a base for new chunk:
            calculated_chunks.append( [someFileId] )
    return calculated_chunks
</snippet></ROW><ROW><id>10711684</id><snippet>set_lst = set_lst.difference(check_file)
</snippet></ROW><ROW><id>10711684</id><snippet>if tup1 in check_file:
</snippet></ROW><ROW><id>10712044</id><snippet>lst[i] = something</snippet></ROW><ROW><id>10712044</id><snippet>lst.append(i)</snippet></ROW><ROW><id>10712044</id><snippet>&gt;&gt;&gt; l = [None] * 10
&gt;&gt;&gt; l
[None, None, None, None, None, None, None, None, None, None]
</snippet></ROW><ROW><id>10712044</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>10712044</id><snippet>&gt;&gt;&gt; def display():
...     s1 = []
...     for i in range(9): # This is just to tell you how to create a list.
...         s1.append(i)
...     return s1
... 
&gt;&gt;&gt; print display()
[0, 1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>10712044</id><snippet>&gt;&gt;&gt; def display():
...     return [x**2 for x in range(9)]
... 
&gt;&gt;&gt; print display()
[0, 1, 4, 9, 16, 25, 36, 49, 64]
</snippet></ROW><ROW><id>10712090</id><snippet>&gt;&gt;&gt; datetime.datetime.now().utcoffset() is None
True
</snippet></ROW><ROW><id>10712090</id><snippet>now</snippet></ROW><ROW><id>10712090</id><snippet>utcnow</snippet></ROW><ROW><id>10712121</id><snippet>In [5]: from ctypes import *
In [6]: f = c_float(12.3)
In [8]: tmp = cast(pointer(f), POINTER(c_int)) 
In [9]: tmp.contents
Out[9]: c_long(1095027917)
In [10]: tmp.contents.value
Out[10]: 1095027917
In [11]: hex(tmp.contents.value)
Out[11]: '0x4144cccd'

In [13]: import struct
In [16]: struct.unpack("f",struct.pack("I", 1095027917))
Out[16]: (12.300000190734863,)
</snippet></ROW><ROW><id>10712166</id><snippet>sizer.Add(description, (i*3, 0), (1, 3))
sizer.Add(question, (i*3+1, 0), flag=wx.EXPAND)
sizer.AddStretchSpacer((i*3+1,1))
sizer.Add(yes, (i*3+1, 2), flag=wx.ALIGN_RIGHT)
sizer.Add(no, (i*3+1, 3))
</snippet></ROW><ROW><id>10712166</id><snippet>class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwargs):
        wx.Dialog.__init__(self, *args, **kwargs)

        sizer = wx.BoxSizer(wx.VERTICAL)

        for i in range(5):
            description = wx.StaticText(self, -1, "This is a long description \
that may span several lines. Filler filler filler filler filler. More filler \
filler filler filler filler.")
            description.Wrap(500)

            questionSizer = wx.BoxSizer(wx.HORIZONTAL)
            question = wx.StaticText(self, -1, "Are you sure?")
            yes = wx.RadioButton(self, -1, "Yes", style = wx.RB_GROUP)
            no = wx.RadioButton(self, -1, "No")

            sizer.Add(description)
            questionSizer.Add(question)
            questionSizer.AddStretchSpacer()
            questionSizer.Add(yes)
            questionSizer.Add(no)
            sizer.Add(questionSizer, flag=wx.EXPAND)

        self.SetSizerAndFit(sizer)
        self.Show()
</snippet></ROW><ROW><id>10712166</id><snippet>[...]
width = 500 #the desired minimum width
sizer = wx.BoxSizer(wx.VERTICAL)
sizer.SetMinSize((width,1)) #ensures sizer will be minimum width
"""NOTE: the minimum size gets recalculated when new items are added.
i.e. if height exceeds 1 pixel or if width exceeds wdith, the sizer
will recalculate the minimum size"""


for i in range(5):
    description = wx.StaticText(self, -1, "Short Description") #description is less than 500 pixels, Wrap() will have no effect.
    description.Wrap(width)
[...]
</snippet></ROW><ROW><id>10712272</id><snippet>EncodedPayload.decode()</snippet></ROW><ROW><id>10712272</id><snippet>if filecontents.encoding and filecontents.encoding.lower() != '7bit':
  try:
    payload = filecontents.payload.decode(filecontents.encoding)
  except LookupError:
    raise UnknownEncodingError('Unknown decoding %s.' % filecontents.encoding)
  except (Exception, Error), e:
    raise PayloadEncodingError('Could not decode payload: %s' % e)
else:
  payload = filecontents.payload
</snippet></ROW><ROW><id>10712329</id><snippet>visited</snippet></ROW><ROW><id>10712329</id><snippet>f</snippet></ROW><ROW><id>10712329</id><snippet>current_label</snippet></ROW><ROW><id>10712329</id><snippet>1.    def ts_r(n):
2.        for nn in [v for v in g[n] if not visited[v]]:
3.            visited[nn] = 1
4.            ts_r(nn)
5.        f[n] = current_label
6.        current_label -= 1
</snippet></ROW><ROW><id>10712329</id><snippet>5</snippet></ROW><ROW><id>10712329</id><snippet>f[n]</snippet></ROW><ROW><id>10712329</id><snippet>6</snippet></ROW><ROW><id>10712329</id><snippet>def ts_r(n):
    current_label = len(g)  # initialize local variable
    for nn in [v for v in g[n] if not visited[v]]:
        visited[nn] = 1
        ts_r(nn)
    f[n] = current_label
    current_label -= 1
</snippet></ROW><ROW><id>10712329</id><snippet>def ts_r(n):
    global current_label  # current_label is now global
    for nn in [v for v in g[n] if not visited[v]]:
        visited[nn] = 1
        ts_r(nn)
    f[n] = current_label
    current_label -= 1
</snippet></ROW><ROW><id>10712329</id><snippet>global</snippet></ROW><ROW><id>10712329</id><snippet>nonlocal</snippet></ROW><ROW><id>10712329</id><snippet>def topological_sort(g):

    visited = zeros((len(g)), dtype='int32')
    f = zeros((len(g)), dtype='int32')
    topological_sort.current_label = len(g) # [] so it is seen inside ts_r

    def ts_r(n):
        for nn in [v for v in g[n] if not visited[v]]:
            visited[nn] = 1
            ts_r(nn)
        f[n] = topological_sort.current_label
        topological_sort.current_label -= 1

    for i in range(len(g)):
        if not visited[i]: 
            ts_r(i)

    return f
</snippet></ROW><ROW><id>10712421</id><snippet>PyObject_GenericSetAttr</snippet></ROW><ROW><id>10712421</id><snippet>bpy::str attr_str(attr);
if (PyObject_GenericSetAttr(obj.ptr(), attr_str.ptr(), val.ptr()) != 0)
    bpy::throw_error_already_set();
</snippet></ROW><ROW><id>10712421</id><snippet>object.__setattr__(self, attr, val)</snippet></ROW><ROW><id>10712421</id><snippet>__setattr__</snippet></ROW><ROW><id>10712421</id><snippet>__setattr__</snippet></ROW><ROW><id>10712421</id><snippet>bpy::object cls(bpy::handle&lt;&gt;(PyObject_Type(obj.ptr())));
bpy::object base_cls = cls.attr("__bases__")[0];
base_cls.attr("__setattr__")(obj, attr, val);
</snippet></ROW><ROW><id>10712609</id><snippet>l2</snippet></ROW><ROW><id>10712609</id><snippet>l2 = ['3','9','4','1','0','6','8','2','5','7']  # when you do "l2 = list(s2)"
for i in [0,1,2,3,4,5,6,7,8,9]:  # when you do "for i in raange(10)"
</snippet></ROW><ROW><id>10712609</id><snippet>def display(s1,s2):
    l1 = list(s1)
    l2 = list(s2)
    l3 = [None]*10
    for i in range(10):
        for j in range(10):
            if str(i) == l2[j]:  # &lt;-- change is here
                l3[j] = l1[i]
    return l3

print display('3941068257', '1234567890')
</snippet></ROW><ROW><id>10712650</id><snippet>repl_open</snippet></ROW><ROW><id>10712650</id><snippet>cmd</snippet></ROW><ROW><id>10712650</id><snippet>/home/stav/.config/sublime-text-2/Packages/SublimeREPL/config/Python/Main.sublime-menu</snippet></ROW><ROW><id>10712650</id><snippet>{"command": "repl_open",
"caption": "Python",
"id": "repl_python",
"mnemonic": "p",
"args": {
  "type": "subprocess",
  "encoding": "utf8",
  "cmd": ["/usr/local/bin/python", "-i", "-u"],
  "cwd": "$file_path",
  "syntax": "Packages/Python/Python.tmLanguage",
  "external_id": "python"
  }
},
</snippet></ROW><ROW><id>10712893</id><snippet>(?P&lt;L&gt;[a-c])(?P=L)+
</snippet></ROW><ROW><id>10712893</id><snippet>L</snippet></ROW><ROW><id>10712893</id><snippet>re.findall()</snippet></ROW><ROW><id>10712985</id><snippet>POST</snippet></ROW><ROW><id>10712985</id><snippet>&lt;form action="/clubs/{{ club.id }}/vote/" method="post"&gt;
</snippet></ROW><ROW><id>10712985</id><snippet>GET</snippet></ROW><ROW><id>10712985</id><snippet>GET</snippet></ROW><ROW><id>10712985</id><snippet>request.GET
</snippet></ROW><ROW><id>10712985</id><snippet>method="get"</snippet></ROW><ROW><id>10712985</id><snippet>GET</snippet></ROW><ROW><id>10712985</id><snippet>POST</snippet></ROW><ROW><id>10713016</id><snippet>numrows = len(input)    # 3 rows in your example
numcols = len(input[0]) # 2 columns in your example
</snippet></ROW><ROW><id>10713117</id><snippet>tempstring=['DateTime']
while i&lt;=numsensors:
 tempstring.append("%02d"%i +'.Cooked')
 i=i+1
 print tempstring
 writer.writerow(tempstring)
</snippet></ROW><ROW><id>10713157</id><snippet>for row in range (len(input)-1):
    for col in range(len(input[0])-1):
</snippet></ROW><ROW><id>10713157</id><snippet>for row in range (len(input)):
    for col in range(len(input[0])):
</snippet></ROW><ROW><id>10713157</id><snippet>Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
</snippet></ROW><ROW><id>10713187</id><snippet>f</snippet></ROW><ROW><id>10713187</id><snippet>f'</snippet></ROW><ROW><id>10713187</id><snippet>fmin_bfgs</snippet></ROW><ROW><id>10713187</id><snippet>def func_wrapper(f, cache_size=10):
    evals = {}
    last_points = collections.deque()

    def get(pt, which):
        s = pt.tostring() # get binary string of numpy array, to make it hashable
        if s not in evals:
            evals[s] = f(pt)
            last_points.append(s)
            if len(last_points) &gt;= cache_size:
                del evals[last_points.popleft()]
        return evals[s][which]

    return functools.partial(get, which=0), functools.partial(get, which=1)
</snippet></ROW><ROW><id>10713187</id><snippet>&gt;&gt;&gt; def f(x):
...    print "evaluating", x
...    return (x-3)**2, 2*(x-3)

&gt;&gt;&gt; f_, fprime = func_wrapper(f)

&gt;&gt;&gt; optimize.fmin_bfgs(f_, 1000, fprime)
evaluating [ 994.93480441]
evaluating [ 974.67402207]
evaluating [ 893.63089268]
evaluating [ 665.93446894]
evaluating [ 126.99931561]
evaluating [ 3.]
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 4
         Function evaluations: 7
         Gradient evaluations: 7
array([ 3.])
</snippet></ROW><ROW><id>10713281</id><snippet>distutils</snippet></ROW><ROW><id>10713281</id><snippet>setuptools</snippet></ROW><ROW><id>10713281</id><snippet>setuptools</snippet></ROW><ROW><id>10713281</id><snippet>install_requires</snippet></ROW><ROW><id>10713317</id><snippet>import random as rn

x = range(3)*2 #generate a list where each number appears twice

rn.shuffle(x) #shuffle it
x.pop()       #remove one number
</snippet></ROW><ROW><id>10713317</id><snippet>&gt;&gt;&gt; x
[2, 0, 2, 1, 0] #the result is a list where every number appears twice, except for
                #one number which was removed at random, also the numbers are 
                #randomly arranged
</snippet></ROW><ROW><id>10713317</id><snippet>drop = rn.range(0,n) #choose a random integer to drop

with open('my_file.txt','w') as f:
    for ind,ele in enumerate(xrange(n)):  
        if ind == drop: #do not write the element to txt file
            pass
        else:
            f.write(str(ele) + '\n') #write every except for one element to txt file

with open('my_file.txt','a') as f:
    for ele in xrange(n):
        f.write(str(ele) + '\n') # write every element to txt file
</snippet></ROW><ROW><id>10713317</id><snippet>0
2
3
4
0
1
2
3
4
</snippet></ROW><ROW><id>10713387</id><snippet>def index():
    if request.vars.random:
        request.vars.itemId = generate_random_id()
    form = FORM(DIV(INPUT(_name='itemId', _type='text',
        _value=request.vars.itemId if request.vars else '',
        requires=[IS_NOT_EMPTY(), IS_LENGTH(maxsize=12)]),
        INPUT(_type='submit', _value='search', _name='search'),
        INPUT(_type='submit', _value="random_search", _name='random')))
    return dict(message=form.process())
</snippet></ROW><ROW><id>10713421</id><snippet>def getModel(type, yyyymm):
    if type == 'duration':
        newModelClass = type(
            'newModelName', #It could be the table name you are going to search in. It must be different for every different db table you want to use. For example: 'orderTable' + yyyymm
            (baseModel, ), #Base class for your new model
            {
                'medianduration' : models.IntegerField(), #New model's attribute
                'avgduration' : models.IntegerField(), #New model's attribute
                '__module__':__name__, #This is required. If not given, type raises a KeyError
                'Meta': type(
                                'Meta',
                                (object,),
                                {
                                    'db_table':'orderTable' + yyyymm, #Here you put the table name you want to use
                                    '__module__':__name__,
                                }
                        )
            }
       )
       return newModelClass
</snippet></ROW><ROW><id>10713700</id><snippet>import sys
import os
import os.path
import re
import itertools

#generator function to merge sound and word files
def takeuntil(iterable, stop):
    for x in iterable:
        yield x
        if x[1] == stop:
            break

def process_words_and_sounds(word_file, sound_file):
    #open word and sound files
    total_words = 0
    with open(word_file) as unsplit_words, open(sound_file) as unsplit_sounds:
        sounds = (line.split() for line in unsplit_sounds)
        words = (line.split() for line in unsplit_words)
        output = [
            (word, " ".join(sound for _, _, sound in
                            takeuntil(sounds, stop)))
            for start, stop, word in words
            ]
        for x in output:
            total_words += 1
    return total_words, output

for root, dir, files in os.walk(sys.argv[1]):
    words = [ os.path.join( root, f ) for f in files if f.endswith('.WRD')]
    phones = [ os.path.join( root, f ) for f in files if f.endswith('.PHN')]
    phones.sort()
    words.sort()
    files = zip(words, phones)
    # print files

output = []
total_words = 0
for word_sounds in files:
    word_file, sound_file = word_sounds
    word_count, output_subset = process_words_and_sounds(word_file, sound_file)
    total_words += word_count
    output.extend( output_subset )

#open a dictionary file and create subset of words
class_defintion = re.compile('([1-2] [lnr] t en|[1-2] t en)')
with open('TIMITDIC.TXT') as w_list:
    entries = (line.split(' ', 1) for line in w_list)
    comp_set = [ x[0] for x in entries if class_defintion.search(x[1]) ]

#extract words from above into list of words in dictionary set
glottal_environments = [ x for x in output if x[0] in comp_set ]
</snippet></ROW><ROW><id>10714294</id><snippet>if v is int:
</snippet></ROW><ROW><id>10714294</id><snippet>if isinstance(v, int):
</snippet></ROW><ROW><id>10714294</id><snippet>int</snippet></ROW><ROW><id>10714294</id><snippet>int</snippet></ROW><ROW><id>10714294</id><snippet>&gt;&gt;&gt; v = 17
&gt;&gt;&gt; type(v)
&lt;type 'int'&gt;
&gt;&gt;&gt; v is int
False
&gt;&gt;&gt; isinstance(v, int)
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10714294</id><snippet>&gt;&gt;&gt; v = int
&gt;&gt;&gt; type(v)
&lt;type 'type'&gt;
&gt;&gt;&gt; v is int
True
&gt;&gt;&gt; isinstance(v, int)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10714537</id><snippet>except ShortInputException, x:
</snippet></ROW><ROW><id>10714537</id><snippet>except ShortInputException as x
</snippet></ROW><ROW><id>10714537</id><snippet>Exception.__init__(self)
</snippet></ROW><ROW><id>10714742</id><snippet>'FEDCBA'[score]
</snippet></ROW><ROW><id>10714742</id><snippet>score</snippet></ROW><ROW><id>10714742</id><snippet>'FEDCBA'</snippet></ROW><ROW><id>10714742</id><snippet>F</snippet></ROW><ROW><id>10714742</id><snippet>0</snippet></ROW><ROW><id>10714742</id><snippet>E</snippet></ROW><ROW><id>10714742</id><snippet>1</snippet></ROW><ROW><id>10714742</id><snippet>In [1]: 'FEDCBA'[0]
Out[1]: 'F'

In [2]: 'FEDCBA'[5]
Out[2]: 'A'
</snippet></ROW><ROW><id>10714851</id><snippet>def add_points_cont(contractor=None , action_name):</snippet></ROW><ROW><id>10715294</id><snippet>Opening</snippet></ROW><ROW><id>10715294</id><snippet>opening_id</snippet></ROW><ROW><id>10715294</id><snippet>Opening</snippet></ROW><ROW><id>10715294</id><snippet>username = request.POST['username']
opening = get_object_or_404(Opening, id=request.POST['opening_id'])
opening.reservation = username
opening.save()
</snippet></ROW><ROW><id>10715875</id><snippet>javascript_files</snippet></ROW><ROW><id>10715875</id><snippet>css_files</snippet></ROW><ROW><id>10715875</id><snippet>static_url</snippet></ROW><ROW><id>10716007</id><snippet>pandas.concat()</snippet></ROW><ROW><id>10716007</id><snippet>DataFrame.append()</snippet></ROW><ROW><id>10716329</id><snippet>update(...)</snippet></ROW><ROW><id>10716329</id><snippet>request.GET = request.GET.copy().update(ud_dict)</snippet></ROW><ROW><id>10716329</id><snippet>request.GET = request.GET.copy()
request.GET.update(ud_dict)
</snippet></ROW><ROW><id>10716688</id><snippet>&gt;&gt;&gt; from nose.tools import assert_raises
&gt;&gt;&gt; assert_raises
&lt;bound method Dummy.assertRaises of &lt;nose.tools.Dummy testMethod=nop&gt;&gt;
&gt;&gt;&gt; import nose
&gt;&gt;&gt; nose.__version__
'1.1.2'
</snippet></ROW><ROW><id>10716736</id><snippet>&gt;&gt;&gt; a = rdpcap("test.pcap")
&gt;&gt;&gt; b = a.reverse()
&gt;&gt;&gt; c = a[::-1]
</snippet></ROW><ROW><id>10716923</id><snippet>struct</snippet></ROW><ROW><id>10716923</id><snippet>&gt;&gt;&gt; s = 'YZ'
&gt;&gt;&gt; struct.unpack('&gt;Q', '\x00' * (8 - len(s)) + s)
(22874,)
</snippet></ROW><ROW><id>10716923</id><snippet>&gt;&gt;&gt; int(s.encode('hex'), 16)
22874
</snippet></ROW><ROW><id>10716961</id><snippet>cities['_find'] = find_city
</snippet></ROW><ROW><id>10716961</id><snippet>find_city</snippet></ROW><ROW><id>10716961</id><snippet>cities</snippet></ROW><ROW><id>10716961</id><snippet>_find</snippet></ROW><ROW><id>10716961</id><snippet>city_found = cities['_find'](cities, state)
</snippet></ROW><ROW><id>10716961</id><snippet>find_city</snippet></ROW><ROW><id>10716961</id><snippet>_find</snippet></ROW><ROW><id>10716961</id><snippet>city_found = find_city(cities, state)
</snippet></ROW><ROW><id>10716961</id><snippet>find</snippet></ROW><ROW><id>10717015</id><snippet>print row[0], row[1], "$"+str(row[2])</snippet></ROW><ROW><id>10717180</id><snippet>pyplot.suptitle</snippet></ROW><ROW><id>10717535</id><snippet>execute_from_command_line(sys.argv)
</snippet></ROW><ROW><id>10717535</id><snippet># Import the project module. We add the parent directory to PYTHONPATH to
# avoid some of the path errors new users can have.
sys.path.append(os.path.join(project_directory, os.pardir))
import_module(project_name)
sys.path.pop()
</snippet></ROW><ROW><id>10717643</id><snippet>(?&lt;!\\)(?:\\\\)*_((?:[^_\\]|\\.)+)_
</snippet></ROW><ROW><id>10717643</id><snippet>(?&lt;!\\)(?:\\\\)*</snippet></ROW><ROW><id>10717643</id><snippet>_</snippet></ROW><ROW><id>10717643</id><snippet>((?:[^_\\]|\\.)+)</snippet></ROW><ROW><id>10717643</id><snippet>[^_\\]</snippet></ROW><ROW><id>10717643</id><snippet>\\.</snippet></ROW><ROW><id>10717643</id><snippet>\_</snippet></ROW><ROW><id>10717643</id><snippet>\\</snippet></ROW><ROW><id>10717643</id><snippet>_</snippet></ROW><ROW><id>10717810</id><snippet>target</snippet></ROW><ROW><id>10717810</id><snippet>def test(target='&lt;default-value&gt;', *args, **kwargs):
    print target
</snippet></ROW><ROW><id>10717810</id><snippet>def test(*args, **kwargs):
    target = kwargs.get('target', '&lt;default-value&gt;')
    print target
</snippet></ROW><ROW><id>10717810</id><snippet>def test(*args, **kwargs):
    for i in kwargs:
        exec('%s = %s' % (i, repr(kwargs[i])))
    print target
</snippet></ROW><ROW><id>10718007</id><snippet>from cStringIO import StringIO
import pandas

s = StringIO()
with open('file.csv') as f:
    for line in f:
        if not line.startswith('TEST'):
            s.write(line)
s.seek(0) # "rewind" to the beginning of the StringIO object

pandas.read_csv(s) # with further parameters…
</snippet></ROW><ROW><id>10718041</id><snippet>def updateTooltip(self, win, lbl):
    lbl.set_text(str(time.time()))
    x, y, mods = win.get_screen().get_root_window().get_pointer()   #this gets absolute mouse possition on screen
    win.move(x+15, y+10)
</snippet></ROW><ROW><id>10718305</id><snippet>tt</snippet></ROW><ROW><id>10718305</id><snippet>.replace('p', 'pm').replace('a', 'am')</snippet></ROW><ROW><id>10718548</id><snippet>class ChildDialog(tk.Toplevel):
    def __init__(self, parent, app, ...)
        self.app = app
        ...
        self.ok_button = tk.Button(parent, ..., command=self.on_ok)
        ...
    def on_ok(self):
        # send the data to the parent
        self.app.new_data(... data from this dialog ...)

class MainApplication(tk.Tk):
    ...

    def on_show_dialog(self):
        dialog = ChildDialog(self)
        dialog.show()

    def new_data(self, data):
        ... process data that was passed in from a dialog ...
</snippet></ROW><ROW><id>10718722</id><snippet>import uno

def setMargin():
    doc = XSCRIPTCONTEXT.getDocument()
    oStyle = doc.StyleFamilies.getByName("PageStyles").getByName("Default")
    oStyle.TopMargin = 5000  #Not sure what the units are
</snippet></ROW><ROW><id>10718871</id><snippet>dataType</snippet></ROW><ROW><id>10718871</id><snippet>contentType</snippet></ROW><ROW><id>10718871</id><snippet>dataType</snippet></ROW><ROW><id>10718871</id><snippet>"json"</snippet></ROW><ROW><id>10718871</id><snippet>$.ajax({
    url: "saveList.py",
    type: "post",
    data: JSON.stringify({'param':{"hello":"world"}}),
    dataType: "json",
    success: function(response) {
        alert(response);
    }
});
</snippet></ROW><ROW><id>10718871</id><snippet>#!/usr/bin/python

import sys, json

result = {'success':'true','message':'The Command Completed Successfully'};

myjson = json.load(sys.stdin)
# Do something with 'myjson' object

print 'Content-Type: application/json\n\n'
print json.dumps(result)    # or "json.dump(result, sys.stdout)"
</snippet></ROW><ROW><id>10718871</id><snippet>success</snippet></ROW><ROW><id>10718871</id><snippet>success</snippet></ROW><ROW><id>10718871</id><snippet>message</snippet></ROW><ROW><id>10718943</id><snippet># ... get your message ...
# msg = [b'Return-Path: &lt;"tever"&gt;'
#        b'Delivered-To: reportc@mailserver.com', ... ]

import email

# decode simple non-multipart message
message = email.message_from_bytes(b'\n'.join(msg))
payload = message.get_payload(decode=True)
payload = payload.decode(message.get_content_charset())
print(payload)
</snippet></ROW><ROW><id>10718967</id><snippet>HoughCircles</snippet></ROW><ROW><id>10718967</id><snippet>param2</snippet></ROW><ROW><id>10718967</id><snippet>accumulator threshold</snippet></ROW><ROW><id>10718967</id><snippet>param2</snippet></ROW><ROW><id>10718967</id><snippet>import cv
import numpy as np

def draw_circles(storage, output):
    circles = np.asarray(storage)
    for circle in circles:
        Radius, x, y = int(circle[0][3]), int(circle[0][0]), int(circle[0][4])
        cv.Circle(output, (x, y), 1, cv.CV_RGB(0, 255, 0), -1, 8, 0)
        cv.Circle(output, (x, y), Radius, cv.CV_RGB(255, 0, 0), 3, 8, 0)    

orig = cv.LoadImage('eyez.png')
processed = cv.LoadImage('eyez.png',cv.CV_LOAD_IMAGE_GRAYSCALE)
storage = cv.CreateMat(orig.width, 1, cv.CV_32FC3)
#use canny, as HoughCircles seems to prefer ring like circles to filled ones.
cv.Canny(processed, processed, 5, 70, 3)
#smooth to reduce noise a bit more
cv.Smooth(processed, processed, cv.CV_GAUSSIAN, 7, 7)

cv.HoughCircles(processed, storage, cv.CV_HOUGH_GRADIENT, 2, 32.0, 30, 550)
draw_circles(storage, orig)

cv.ShowImage("original with circles", orig)
cv.WaitKey(0)
</snippet></ROW><ROW><id>10718967</id><snippet>HoughCircles</snippet></ROW><ROW><id>10718967</id><snippet>param2</snippet></ROW><ROW><id>10718967</id><snippet>cv.HoughCircles(processed, storage, cv.CV_HOUGH_GRADIENT, 2, 100.0, 30, 150,100,140)
</snippet></ROW><ROW><id>10719504</id><snippet>xlim()</snippet></ROW><ROW><id>10719504</id><snippet>ylim()</snippet></ROW><ROW><id>10719504</id><snippet>import numpy as np
import pylab as pl

y, x = np.ogrid[-1:1:100j, -1:1:100j]
z = np.sin(4*(x**2+y**2))

pl.imshow(z, origin="lower", extent=(-1,1,-1,1))
pl.xlim(-0.5, 0)
pl.ylim(0.5, 1.0)
pl.show()
</snippet></ROW><ROW><id>10719912</id><snippet>-</snippet></ROW><ROW><id>10719912</id><snippet>xdg-open</snippet></ROW><ROW><id>10719912</id><snippet>xdg_open</snippet></ROW><ROW><id>10719912</id><snippet>xdg_open</snippet></ROW><ROW><id>10719912</id><snippet>xdg-open</snippet></ROW><ROW><id>10719912</id><snippet>-</snippet></ROW><ROW><id>10719912</id><snippet>_2d</snippet></ROW><ROW><id>10719912</id><snippet>_</snippet></ROW><ROW><id>10719912</id><snippet>_5f</snippet></ROW><ROW><id>10719912</id><snippet>%20</snippet></ROW><ROW><id>10720296</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10720296</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>10720296</id><snippet>"pinax.apps.account.context_processors.account"</snippet></ROW><ROW><id>10720402</id><snippet>itertools.product()</snippet></ROW><ROW><id>10720402</id><snippet>// product_new() in itertoolsmodule.c
for (i=0; i &lt; nargs ; ++i) {
    PyObject *item = PyTuple_GET_ITEM(args, i);
    PyObject *pool = PySequence_Tuple(item); //&lt;==== Call tuple(arg)
    if (pool == NULL)
        goto error;
    PyTuple_SET_ITEM(pools, i, pool);
    indices[i] = 0;
}
</snippet></ROW><ROW><id>10720402</id><snippet>itertools.product()</snippet></ROW><ROW><id>10720442</id><snippet>.vimrc</snippet></ROW><ROW><id>10720442</id><snippet>autocmd BufRead,BufNewFile *.waf set filetype=python
</snippet></ROW><ROW><id>10720442</id><snippet>wscript</snippet></ROW><ROW><id>10720442</id><snippet>autocmd BufRead,BufNewFile wscript set filetype=python
</snippet></ROW><ROW><id>10720442</id><snippet># vim: set filetype=python :
</snippet></ROW><ROW><id>10720442</id><snippet>:help modeline</snippet></ROW><ROW><id>10721129</id><snippet>sorted(yourdict,key=lambda x:(yourdict[x]['score'],x))
</snippet></ROW><ROW><id>10721129</id><snippet>yourdict</snippet></ROW><ROW><id>10721393</id><snippet>list</snippet></ROW><ROW><id>10721393</id><snippet>set</snippet></ROW><ROW><id>10721550</id><snippet>django.contrib.auth.views.login</snippet></ROW><ROW><id>10721550</id><snippet>urlconf</snippet></ROW><ROW><id>10721550</id><snippet>from django.contrib.auth.views import login

urlpatterns = ('',
    #snip
    url(r'^login/$', login)
)
</snippet></ROW><ROW><id>10721550</id><snippet>registration/login.html</snippet></ROW><ROW><id>10721564</id><snippet>json</snippet></ROW><ROW><id>10721564</id><snippet>json.JSONEncoder</snippet></ROW><ROW><id>10721564</id><snippet>default</snippet></ROW><ROW><id>10721564</id><snippet>import json
import datetime
from time import mktime

class MyEncoder(json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj, datetime.datetime):
            return int(mktime(obj.timetuple()))

        return json.JSONEncoder.default(self, obj)

print json.dumps(obj, cls = MyEncoder)
</snippet></ROW><ROW><id>10721711</id><snippet>matplotlib</snippet></ROW><ROW><id>10721711</id><snippet>imshow</snippet></ROW><ROW><id>10721711</id><snippet>interpolation="nearest"</snippet></ROW><ROW><id>10721711</id><snippet>imshow</snippet></ROW><ROW><id>10721711</id><snippet>cmap=cm.jet</snippet></ROW><ROW><id>10721711</id><snippet>imshow</snippet></ROW><ROW><id>10721711</id><snippet>vmax</snippet></ROW><ROW><id>10721711</id><snippet>vmin</snippet></ROW><ROW><id>10721711</id><snippet>import numpy as np
import pylab as plt

# Create random matrix, save it to a text file
N = 90
A = np.random.random((N,N))
np.fill_diagonal(A,.95)
np.savetxt("z.txt",A)

# Load the data
A = np.loadtxt("z.txt")

# Apply a mask so values below .9 don't show
A[A&lt;.9] = None

# Scale the values from .9 to 1.0 using vmin,vmax
plt.imshow(A, interpolation='nearest', vmin=.9,vmax=1.0,cmap=plt.cm.jet)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>10722346</id><snippet>checks</snippet></ROW><ROW><id>10722346</id><snippet>installFunc</snippet></ROW><ROW><id>10722346</id><snippet>def installFunc(checks):
    ...

checks = [variable.get() for variable in variables]
b = Button(text="OK", command=lambda : installFunc(checks))
</snippet></ROW><ROW><id>10722346</id><snippet>self.b=Button(..., command=self.installFunc)
</snippet></ROW><ROW><id>10722399</id><snippet>status, msg_data = server.fetch(some_id, '(UID BODY[TEXT])')
</snippet></ROW><ROW><id>10722790</id><snippet>log_file = open(log_file_path, 'a+')
</snippet></ROW><ROW><id>10722790</id><snippet>import os

log_file = open(log_file_path, 'r+')
log_file.seek(0, os.SEEK_END)
</snippet></ROW><ROW><id>10722946</id><snippet>__add__</snippet></ROW><ROW><id>10722946</id><snippet>+</snippet></ROW><ROW><id>10722946</id><snippet>&gt;&gt;&gt; x = point(0, 0)

&gt;&gt;&gt; x + point(1, 1)
point(1, 1)

&gt;&gt;&gt; x
point(1, 1)
</snippet></ROW><ROW><id>10722946</id><snippet>__add__</snippet></ROW><ROW><id>10722946</id><snippet>def __add__(self, oth):
    return point(self.x + oth.x, self.y + oth.y)
</snippet></ROW><ROW><id>10723314</id><snippet>s_now = frozenset(tuple(row) for row in csv.reader(open('now.csv', 'r'), delimiter=';'))
s_past = frozenset(tuple(row) for row in csv.reader(open('past.csv', 'r'), delimiter=';'))
</snippet></ROW><ROW><id>10723314</id><snippet>added = [";".join(row) for row in s_now - s_past]  # in "now" but not in "past"
# Or, simply "added = list(s_now - s_past)" to keep them as tuples.
</snippet></ROW><ROW><id>10723314</id><snippet>removed = [";".join(row) for row in s_past - s_now]  # in "past" but not in "now"
</snippet></ROW><ROW><id>10723314</id><snippet>TypeError: unhashable type: 'list'</snippet></ROW><ROW><id>10723314</id><snippet>list</snippet></ROW><ROW><id>10723314</id><snippet>lists</snippet></ROW><ROW><id>10723314</id><snippet>set</snippet></ROW><ROW><id>10723314</id><snippet>list</snippet></ROW><ROW><id>10723314</id><snippet>tuple</snippet></ROW><ROW><id>10723314</id><snippet>"</snippet></ROW><ROW><id>10723314</id><snippet>&gt;&gt;&gt; [e for e in csv.reader(['hello;wo;"rld'], delimiter=";")]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
_csv.Error: newline inside string
</snippet></ROW><ROW><id>10723314</id><snippet>&gt;&gt;&gt; [e for e in csv.reader(['hello;wo;"rld'], delimiter=";", quoting=csv.QUOTE_NONE)]
[['hello', 'wo', '"rld']]
</snippet></ROW><ROW><id>10723358</id><snippet>"""table_per_association.py

The HasAddresses mixin will provide a new "address_association" table for
each parent class.   The "address" table will be shared
for all parents.

This configuration has the advantage that all Address
rows are in one table, so that the definition of "Address"
can be maintained in one place.   The association table 
contains the foreign key to Address so that Address
has no dependency on the system.


"""
from sqlalchemy.ext.declarative import declarative_base, declared_attr
from sqlalchemy import create_engine, Integer, Column, \
                    String, ForeignKey, Table
from sqlalchemy.orm import Session, relationship
import itertools

class Base(object):
    """Base class which provides automated table name
    and surrogate primary key column.

    """
    @declared_attr
    def __tablename__(cls):
        return cls.__name__.lower()
    id = Column(Integer, primary_key=True)
Base = declarative_base(cls=Base)

class Address(Base):
    """The Address class.   

    This represents all address records in a 
    single table.

    """
    street = Column(String)
    city = Column(String)
    zip = Column(String)

    @property
    def all_owners(self):
        return list(
            itertools.chain(
            *[
                getattr(self, attr)
                for attr in [a for a in dir(self) if a.endswith("_parents")]
            ]
        ))

    def __repr__(self):
        return "%s(street=%r, city=%r, zip=%r)" % \
            (self.__class__.__name__, self.street, 
            self.city, self.zip)

class HasAddresses(object):
    """HasAddresses mixin, creates a new address_association
    table for each parent.

    """
    @declared_attr
    def addresses(cls):
        address_association = Table(
            "%s_addresses" % cls.__tablename__,
            cls.metadata,
            Column("address_id", ForeignKey("address.id"), 
                                primary_key=True),
            Column("%s_id" % cls.__tablename__, 
                                ForeignKey("%s.id" % cls.__tablename__), 
                                primary_key=True),
        )
        return relationship(Address, secondary=address_association, 
                    backref="%s_parents" % cls.__name__.lower())

class Customer(HasAddresses, Base):
    name = Column(String)

class Supplier(HasAddresses, Base):
    company_name = Column(String)

engine = create_engine('sqlite://', echo=True)
Base.metadata.create_all(engine)

session = Session(engine)

a1 = Address(
            street='123 anywhere street',
            city="New York",
            zip="10110")
a2 = Address(
            street='40 main street',
            city="San Francisco",
            zip="95732")

session.add_all([
    Customer(
        name='customer 1', 
        addresses=[a1, a2]
    ),
    Supplier(
        company_name="Ace Hammers",
        addresses=[a1]
    ),
])

session.commit()

for customer in session.query(Customer):
    for address in customer.addresses:
        print address.all_owners
</snippet></ROW><ROW><id>10723613</id><snippet>import couchdb.design
import inflection

DESIGN_NAME="version"

class CurrentVersion(couchdb.design.ViewDefinition):
    def __init__(self):

        map_fun = self.__class__.map

        if hasattr(self.__class__, "reduce"):
            reduce_fun = self.__class__.reduce
        else:
            reduce_fun = None

        super_args = (DESIGN_NAME,
                      inflection.underscore(self.__class__.__name__),
                      map_fun,
                      reduce_fun,
                      'python')

        super(CurrentVersion, self).__init__(*super_args)

    @staticmethod
    def map(doc):
        if 'version_key' in doc and 'created_ts' in doc:
            yield (doc['version_key'], [doc['_id'], doc['created_ts']])

    @staticmethod
    def reduce(keys, values, rereduce):
        max_index = 0

        for index, value in enumerate(values):
            if value[1] &gt; values[max_index][1]:
                max_index = index

        return values[max_index]
</snippet></ROW><ROW><id>10723613</id><snippet>import couchdb.design
from couchview.version import CurrentVersion

db = get_couch_db() # omitted for brevity
couchdb.design.ViewDefinition.sync_many(db, [CurrentVersion()], remove_missing=True)
</snippet></ROW><ROW><id>10723613</id><snippet>current_version_view = couchview.version.CurrentVersion()
result = current_version_view(self.db, key=version_key)
</snippet></ROW><ROW><id>10723630</id><snippet>class make_all_meta(type):
   def __init__(cls, name, bases, dic):
       type.__init__(cls, name, bases, dic)
       cls._all = set()

class A(object):
    __metaclass__ = make_all_meta
</snippet></ROW><ROW><id>10723630</id><snippet>A</snippet></ROW><ROW><id>10723630</id><snippet>class A(metaclass=make_all_meta):
    pass
</snippet></ROW><ROW><id>10723690</id><snippet>functools.py</snippet></ROW><ROW><id>10723690</id><snippet>from collections import OrderedDict, namedtuple
</snippet></ROW><ROW><id>10723703</id><snippet>zip</snippet></ROW><ROW><id>10723703</id><snippet>&gt;&gt;&gt; list1 = [1,2,3,4,5]
&gt;&gt;&gt; list2 = [1,1,1,4,1]
&gt;&gt;&gt; list3 = [1,22,3,1,5]
&gt;&gt;&gt; list4 = [1,2,5,4,5]
&gt;&gt;&gt; [sum(x) for x in zip(list1, list2, list3, list4)]
[4, 27, 12, 13, 16]
</snippet></ROW><ROW><id>10723703</id><snippet>&gt;&gt;&gt; data = [[1,2,3,4,5], [1,1,1,4,1], [1,22,3,1,5], [1,2,5,4,5]]
&gt;&gt;&gt; [sum(x) for x in zip(*data)]
[4, 27, 12, 13, 16]
</snippet></ROW><ROW><id>10723703</id><snippet>dict</snippet></ROW><ROW><id>10723703</id><snippet>dict.itervalues()</snippet></ROW><ROW><id>10723703</id><snippet>dict.values()</snippet></ROW><ROW><id>10723703</id><snippet>&gt;&gt;&gt; data = {"a":[1,2,3], "b":[3,4,4]}
&gt;&gt;&gt; [sum(x) for x in zip(*data.itervalues())]
[4, 6, 7]
</snippet></ROW><ROW><id>10723703</id><snippet>zip</snippet></ROW><ROW><id>10723703</id><snippet>&gt;&gt;&gt; data = [[1,2,3,4,5], [1,1], [1,22], [1,2,5]]
&gt;&gt;&gt; [sum(x) for x in zip(*data)]
[4, 27]
</snippet></ROW><ROW><id>10723703</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>10723703</id><snippet>fillvalue</snippet></ROW><ROW><id>10723703</id><snippet>&gt;&gt;&gt; data = [[1,2,3,4,5], [1,1], [1,22], [1,2,5]]
&gt;&gt;&gt; [sum(x) for x in izip_longest(*data, fillvalue=0)]
[4, 27, 8, 4, 5]
</snippet></ROW><ROW><id>10723980</id><snippet>x_pos = text.xview()[0]
y_pos = text.yview()[0] 
</snippet></ROW><ROW><id>10723980</id><snippet>text.xview(Tkinter.MOVETO, x_pos)
text.yview(Tkinter.MOVETO, y_pos)
</snippet></ROW><ROW><id>10724039</id><snippet>split()</snippet></ROW><ROW><id>10724039</id><snippet>            raw.append(line.split('##'))
</snippet></ROW><ROW><id>10724039</id><snippet>In [5]: s = "Some Title##DD-MM-JJJJ##Some Text goes here##img1.jpg##img2.jpg"

In [6]: s.split("##")
Out[6]: ['Some Title', 'DD-MM-JJJJ', 'Some Text goes here', 'img1.jpg', 'img2.jpg']
</snippet></ROW><ROW><id>10724257</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base= declarative_base()

class CommonObject(Base):
    __tablename__ = "objects"
    id = Column("objid", Integer, primary_key=True)
    objname = Column(String(32))

class Container(CommonObject):
    __tablename__ = 'containers'
    id = Column("objid", Integer, ForeignKey("objects.objid"),  primary_key=True)

class GoodsPlacement(Container):
    __tablename__ = "goods_placements"
    id = Column("objid", Integer, ForeignKey("containers.objid"), primary_key=True)


class Departure(CommonObject):
    __tablename__ = "departures"
    id = Column(Integer, ForeignKey("objects.objid"),  primary_key=True)
    content_id = Column(Integer, ForeignKey("goods_placements.objid"))
    status_id = Column(Integer)
    content = relationship("GoodsPlacement",
        primaryjoin=lambda:Departure.__table__.c.content_id==GoodsPlacement.__table__.c.objid,
        backref="departures"
        )

session = Session()
print session.query(GoodsPlacement).filter(~GoodsPlacement.departures.any(Departure.status_id &lt; 2))
</snippet></ROW><ROW><id>10724257</id><snippet>SELECT objects.objid AS objects_objid, containers.objid AS containers_objid, goods_placements.objid AS goods_placements_objid, objects.objname AS objects_objname 
FROM objects JOIN containers ON objects.objid = containers.objid JOIN goods_placements ON containers.objid = goods_placements.objid 
WHERE NOT (EXISTS (SELECT 1 
FROM (SELECT objects.objid AS objects_objid, objects.objname AS objects_objname, departures.id AS departures_id, departures.content_id AS departures_content_id, departures.status_id AS departures_status_id 
FROM objects JOIN departures ON objects.objid = departures.id) AS anon_1 
WHERE anon_1.departures_content_id = goods_placements.objid AND anon_1.departures_status_id &lt; :status_id_1))
</snippet></ROW><ROW><id>10724297</id><snippet>In [19]: s = 'B-F'

In [20]: list(map(chr, range(ord(s[0]), ord(s[-1]) + 1)))
Out[20]: ['B', 'C', 'D', 'E', 'F']
</snippet></ROW><ROW><id>10724297</id><snippet>range()</snippet></ROW><ROW><id>10724297</id><snippet>list(map(...))</snippet></ROW><ROW><id>10724332</id><snippet>fork()</snippet></ROW><ROW><id>10724332</id><snippet>numpy</snippet></ROW><ROW><id>10724332</id><snippet>array</snippet></ROW><ROW><id>10724332</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>10724332</id><snippet>multiprocessing</snippet></ROW><ROW><id>10724332</id><snippet>Manager</snippet></ROW><ROW><id>10724332</id><snippet>Manager</snippet></ROW><ROW><id>10724332</id><snippet>multiprocessing</snippet></ROW><ROW><id>10724717</id><snippet>class Employee(Base):
    __tablename__ = "employee"
    # Columns
    id = Column(Integer, primary_key=True, autoincrement=True)
    representative_id = Column(Integer, ForeignKey('employee.id'))
    parent_id = Column(Integer, ForeignKey('employee.id'))
    affiliate_id = Column(Integer, ForeignKey('employee.id'))

    # Relatonships
    representative = relationship("Employee", 
                         primaryjoin="Employee.representative_id==Employee.id", 
                         remote_side=[id])
    parent = relationship("Employee",
                         primaryjoin="Employee.parent_id==Employee.id", 
                         remote_side=[id])
    affiliate = relationship("Employee",
                         primaryjoin="Employee.affiliate_id==Employee.id", 
                         remote_side=[id])
</snippet></ROW><ROW><id>10724816</id><snippet>IFoo

IPublishable
</snippet></ROW><ROW><id>10724834</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;

        &lt;title&gt;test&lt;/title&gt;
        &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;
        &lt;script&gt;

            $(function()
            {
                $('#clickme').click(function(){
                    alert('Im going to start processing');

                    $.ajax({
                        url: "/scripts/ajaxpost.py",
                        type: "post",
                        datatype:"json",
                        data: {'key':'value','key2':'value2'},
                        success: function(response){
                            alert(response.message);
                            alert(response.keys);
                        }
                    });
                });
            });

        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;button id="clickme"&gt; click me &lt;/button&gt;
    &lt;/body&gt;

&lt;/html&gt;
</snippet></ROW><ROW><id>10724834</id><snippet>#!/usr/bin/env python

import sys
import json
import cgi

fs = cgi.FieldStorage()

sys.stdout.write("Content-Type: application/json")

sys.stdout.write("\n")
sys.stdout.write("\n")


result = {}
result['success'] = True
result['message'] = "The command Completed Successfully"
result['keys'] = ",".join(fs.keys())

d = {}
for k in fs.keys():
    d[k] = fs.getvalue(k)

result['data'] = d

sys.stdout.write(json.dumps(result,indent=1))
sys.stdout.write("\n")

sys.stdout.close()
</snippet></ROW><ROW><id>10724834</id><snippet>{
 "keys": "key2,key", 
 "message": "The command Completed Successfully", 
 "data": {
  "key2": "value2", 
  "key": "value"
 }, 
 "success": true
}
</snippet></ROW><ROW><id>10724850</id><snippet>hasattr</snippet></ROW><ROW><id>10724850</id><snippet>in</snippet></ROW><ROW><id>10724850</id><snippet>.has_key</snippet></ROW><ROW><id>10724850</id><snippet>&gt;&gt;&gt; example = dict(foo='bar')
&gt;&gt;&gt; 'foo' in example
True
&gt;&gt;&gt; example.has_key('foo')
True
&gt;&gt;&gt; 'baz' in example
False
</snippet></ROW><ROW><id>10724850</id><snippet>&gt;&gt;&gt; class example(object):
...     foo = dict()
...
&gt;&gt;&gt; A = example()
&gt;&gt;&gt; B = example()
&gt;&gt;&gt; A.foo['bar'] = 'baz'
&gt;&gt;&gt; B.foo
{'bar': 'baz'}
</snippet></ROW><ROW><id>10724850</id><snippet>__init__</snippet></ROW><ROW><id>10724850</id><snippet>class State(object):
    info = None

    def __init__(self):
        self.info = {}
</snippet></ROW><ROW><id>10724860</id><snippet>def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.get_or_create(user=instance)

signals.post_save.connect(create_user_profile, sender=User)
</snippet></ROW><ROW><id>10724860</id><snippet>UserProfile</snippet></ROW><ROW><id>10724860</id><snippet>post_save</snippet></ROW><ROW><id>10724898</id><snippet>class conditional_decorator(object):
    def __init__(self, dec, condition):
        self.decorator = dec
        self.condition = condition

   def __call__(self, func):
       if not self.condition:
           # Return the function unchanged, not decorated.
           return func
       return self.decorator(func)
</snippet></ROW><ROW><id>10724898</id><snippet>@conditional_decorator(timeit, doing_performance_analysis)
def foo():
    time.sleep(2)  
</snippet></ROW><ROW><id>10725170</id><snippet>re.sub(r'\b[\dx]+\b', '', "big $price chair, 5x10")
</snippet></ROW><ROW><id>10725278</id><snippet>r = 0.2
s = 0.02
steps = int(math.ceil(r/s))
lst = [(a*s, 1-(a+b)*s, b*s) for b in range(steps) for a in range(steps)]
</snippet></ROW><ROW><id>10725278</id><snippet>&gt;&gt;&gt; lst[0:4]
[(0.0, 1.0, 0.0), (0.02, 0.98, 0.0), (0.04, 0.96, 0.0), (0.06, 0.94, 0.0)]
&gt;&gt;&gt; lst[90:94]
[(0.0, 0.8200000000000001, 0.18), (0.02, 0.8, 0.18), (0.04, 0.78, 0.18), (0.06, 0.76, 0.18)]
</snippet></ROW><ROW><id>10725311</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; names = defaultdict(list)
&gt;&gt;&gt; with open('f.txt') as f:
...    lines = [l.split() for l in f.readlines() if l.strip()]
...    for l in lines:
...      names[l[0]].append([l[1],l[2]])
&gt;&gt;&gt; for i in names.iteritems():
...    print i
... 
('steve', [['134', '0.000010'], ['135', '0.000024'], ['133', '0.000078'], ['134', 
'0.000085'], ['135', '0.000087']])
('joanne', [['134', '0.000022'], ['133', '0.000045'], ['133', '0.000079'], ['133', '0.000081'], ['136', '0.000083']])
('Harry', [['133', '0.000012']])
</snippet></ROW><ROW><id>10725610</id><snippet>sqrt</snippet></ROW><ROW><id>10725610</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 100
&gt;&gt;&gt; Decimal(2).sqrt()
Decimal('1.414213562373095048801688724209698078569671875376948073176679737990732478462107038850387534327641573')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10725719</id><snippet>obj1.child1 = Child(...)</snippet></ROW><ROW><id>10725851</id><snippet>def byteswap(x):
    return ((x &amp; 0x00ff00ff) &lt;&lt; 8) | ((x &amp; 0xff00ff00) &gt;&gt; 8)


def tms320_float(raw):
    s = (raw &gt;&gt; 23) &amp; 1
    mantissa = (raw &amp; 0x007fffff)
    exponent = raw &gt;&gt; 24
    if exponent &gt;= 128:
        exponent -= 256
    if exponent == -128:
        return 0.0
    return (((-2) ** s) + float(mantissa) / float(1 &lt;&lt; 23)) * (2.0 ** exponent)

&gt;&gt;&gt; tms320_float(byteswap(0x00800000))
0.0
&gt;&gt;&gt; tms320_float(byteswap(0x7AFBDD35))
0.06108652427792549
&gt;&gt;&gt; tms320_float(byteswap(0x9BF7783C))
-0.003490658476948738
&gt;&gt;&gt; tms320_float(byteswap(0x00FBFCAD))
0.031415924429893494
</snippet></ROW><ROW><id>10725932</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>10725932</id><snippet>xmlparser</snippet></ROW><ROW><id>10725932</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>10725993</id><snippet>WriteBlock() not supported for this dataset.</snippet></ROW><ROW><id>10725993</id><snippet>gdal_translate</snippet></ROW><ROW><id>10725993</id><snippet>gdal_translate -of GTiff DGM_10_R.asc DGM_10_R.tif
</snippet></ROW><ROW><id>10726415</id><snippet>if re.match(r'\S{7}\d$', text):
    print 'all conditions match'
</snippet></ROW><ROW><id>10726467</id><snippet>didson_data</snippet></ROW><ROW><id>10726467</id><snippet>didson_file</snippet></ROW><ROW><id>10726467</id><snippet>didson_data</snippet></ROW><ROW><id>10726467</id><snippet>.tell()</snippet></ROW><ROW><id>10726702</id><snippet># url handler
handlers = [(r"/entry/([^/]+)", EntryHandler),]

class EntryHandler(BaseHandler):
    def get(self, slug):
        entry = self.db.get("SELECT * FROM entries WHERE slug = %s", slug)
        if not entry: raise tornado.web.HTTPError(404)
        self.render("entry.html", entry=entry)
</snippet></ROW><ROW><id>10726702</id><snippet>(r"/entry/([^/]*)", EntryHandler),

class EntryHandler(BaseHandler):
    def get(self, slug=None):
        pass
</snippet></ROW><ROW><id>10726702</id><snippet>handlers = [
     (r'/(\d{4})/(\d{2})/(\d{2})/([a-zA-Z\-0-9\.:,_]+)/?', DetailHandler)
]

class DetailHandler(BaseHandler):
    def get(self, year, month, day, slug):
        pass
</snippet></ROW><ROW><id>10727026</id><snippet>Qt</snippet></ROW><ROW><id>10727026</id><snippet>Okular</snippet></ROW><ROW><id>10727026</id><snippet>ctypes</snippet></ROW><ROW><id>10727026</id><snippet>sip</snippet></ROW><ROW><id>10727026</id><snippet>shiboken</snippet></ROW><ROW><id>10727026</id><snippet>cython</snippet></ROW><ROW><id>10727053</id><snippet>pass</snippet></ROW><ROW><id>10727053</id><snippet>try:
    # Something that throws exception
catch:

# continue other stuff
</snippet></ROW><ROW><id>10727053</id><snippet>catch</snippet></ROW><ROW><id>10727053</id><snippet>try {
    // Something that throws exception
}
catch (e) {}
</snippet></ROW><ROW><id>10727476</id><snippet>ValueError</snippet></ROW><ROW><id>10727476</id><snippet>ValueError()</snippet></ROW><ROW><id>10727482</id><snippet>jsonify()</snippet></ROW><ROW><id>10727482</id><snippet>flask</snippet></ROW><ROW><id>10727482</id><snippet>from flask import jsonify # &lt;- `jsonify` instead of `json`
</snippet></ROW><ROW><id>10727519</id><snippet>|</snippet></ROW><ROW><id>10727519</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.VERBOSE
64
&gt;&gt;&gt; re.IGNORECASE
2
&gt;&gt;&gt; re.VERBOSE | re.IGNORECASE
66
</snippet></ROW><ROW><id>10727519</id><snippet>re</snippet></ROW><ROW><id>10727519</id><snippet>IGNORECASE</snippet></ROW><ROW><id>10727519</id><snippet>VERBOSE</snippet></ROW><ROW><id>10727519</id><snippet>or</snippet></ROW><ROW><id>10727519</id><snippet>&gt;&gt;&gt; 66 &amp; 2
2
&gt;&gt;&gt; 66 &amp; 64
64
&gt;&gt;&gt; 66 &amp; 8
0
</snippet></ROW><ROW><id>10727528</id><snippet>port select --list python
</snippet></ROW><ROW><id>10727528</id><snippet>port select python python26
</snippet></ROW><ROW><id>10727605</id><snippet>sudo apt-get install python-mysqldb
</snippet></ROW><ROW><id>10727605</id><snippet>pip install MySQL-python</snippet></ROW><ROW><id>10727605</id><snippet>pip install MySQL-python</snippet></ROW><ROW><id>10727605</id><snippet>sudo apt-get install libmysqlclient-dev
</snippet></ROW><ROW><id>10727607</id><snippet>fnmatch</snippet></ROW><ROW><id>10727607</id><snippet>re</snippet></ROW><ROW><id>10727607</id><snippet>import re
files = ["C:\\MyDir\\some_file.txt",
     "C:\\MyDir\\another_file.txt",
     "C:\\MyDir\\some_file.old"]

patern = re.compile(r"\\some[^\\]*\.txt$", re.I)
filtered_files = [f for f in files if pattern.search(f)]
</snippet></ROW><ROW><id>10727680</id><snippet>#!/usr/bin/env python 

import re

if __name__ == '__main__':
    s = "{u'xlink:href': u'http://ip/goform/XmlApi?op=ip&amp;port=0&amp;target=1', u'id': u'1'}"
    m = re.search(r"u'(http://.*?)',", s)
    print m.group(1)
</snippet></ROW><ROW><id>10727730</id><snippet>\underline</snippet></ROW><ROW><id>10727730</id><snippet>rc</snippet></ROW><ROW><id>10727730</id><snippet>agg</snippet></ROW><ROW><id>10727730</id><snippet>ps</snippet></ROW><ROW><id>10727730</id><snippet>import matplotlib.pyplot as plt
from matplotlib import rc

rc('text', usetex=True)

plt.sunplot(111)

plt.text(0.05, 0.90, r'\underline{Parameters}: ', fontsize=12)
</snippet></ROW><ROW><id>10727806</id><snippet>done=False</snippet></ROW><ROW><id>10727806</id><snippet>done</snippet></ROW><ROW><id>10727806</id><snippet>True</snippet></ROW><ROW><id>10727806</id><snippet>from gevent import spawn
from gevent.event import AsyncResult
is_done = AsyncResult()
oserve = OSC.OSCServer(('localhost', iportarg))
gl = gevent.spawn(oserve.oserve_forever)
oserve.addMsgHandler("/logout", logout_handle)

def logout_handle():
  global is_done
  is_done.set(True)

terminate_prog = False
while not terminate_prog:
    if is_done.ready():
        terminate_prog = True


st.kill()
sys.exit()
</snippet></ROW><ROW><id>10727806</id><snippet>logout_handle</snippet></ROW><ROW><id>10727853</id><snippet>total = 0
for i in range(10):
    total += int(input("\nEnter price here: "))
grand_total = 18 * total / 100 + total
print("\nThe total amount will equal to", grand_total, "(with 18% V.A.T)")
</snippet></ROW><ROW><id>10727927</id><snippet>from threading import Thread
import time
import sys    

def myfn(test, callback):

    while not test():  # check if the first function passed in evaluates to True
        time.sleep(.001)  # we need to wait to give the other thread time to run.
    callback() # test() is True, so call callback.

nums = []

t = Thread(target=myfn, args=(lambda: len(nums) &gt; 5, 
           lambda: sys.stdout.write('condition met')))
t.start() # start the thread to monitor for nums length changing

for n in range(10):
    nums.append(n)
    print nums  # just to show you the progress
    time.sleep(1) 
</snippet></ROW><ROW><id>10728075</id><snippet>[", ".join(map(repr, ln.split())) for ln in open("test.txt")
                                  if "important" in ln]
</snippet></ROW><ROW><id>10728075</id><snippet>["'important1a', 'important1b'", "'important2a', 'important2b'"]
</snippet></ROW><ROW><id>10728200</id><snippet>if answer == ("Hypotenuse") or ("Hypotenuse.") ...
</snippet></ROW><ROW><id>10728200</id><snippet>if answer in ("Hypotenuse", "Hypotenuse.", ...):
</snippet></ROW><ROW><id>10728200</id><snippet>answer == ("Foo") or ("Bar")
</snippet></ROW><ROW><id>10728200</id><snippet>(answer == ("Foo")) or (("Bar"))
</snippet></ROW><ROW><id>10728200</id><snippet>"Bar"</snippet></ROW><ROW><id>10728200</id><snippet>True</snippet></ROW><ROW><id>10728200</id><snippet>"HYPOTENUSE" in answer.upper()</snippet></ROW><ROW><id>10728270</id><snippet>from ctypes import *

class ArrayProxy(object):
    def __init__(self, array, struct):
        self.array = array
        self.struct = struct

    def __setitem__(self, i, val):
        self.array[i] = val
        self.struct.attributes_updated = True

    def __getitem__(self, i):
        item = self.array[i]
        if issubclass(type(item), Array):
            # handle multidimensional arrays
            return ArrayProxy(item, self.struct)
        return item

class Comm(Structure):
    def __init__(self):
        self.attributes_updated = False

    def __setattr__(self, name, value):
        super(Comm, self).__setattr__('attributes_updated', True)
        super(Comm, self).__setattr__(name, value)

    def __getattribute__(self, name):
        attr = super(Comm, self).__getattribute__(name)
        if issubclass(type(attr), Array):
            return ArrayProxy(attr, self)
        return attr


class MyCStruct(Comm):
    _fields_ = [('number', c_int),
                ('array', c_int*5),
                ('multiarray', c_int*2*1),]

    def __init__(self):
        Comm.__init__(self)

s = MyCStruct()
print s.array
# &lt;__main__.ArrayProxy object at 0x1b1f3d0&gt; 
print s.attributes_updated
# False
s.array[0] = 1
print s.attributes_updated
# True

s2 = MyCStruct()
s2.multiarray[0][0] = 1
print s2.attributes_updated
# True
</snippet></ROW><ROW><id>10728315</id><snippet>self.response.out.write("""
&lt;html&gt;
&lt;script&gt;
var blobKey = "%s";
&lt;/script&gt;
&lt;body&gt;
...
&lt;/body&gt;
&lt;/html&gt;""" % (blob_info.key(),)
</snippet></ROW><ROW><id>10728370</id><snippet>for line in nlines:
    line = line.strip()
    if line == '': 
        continue # skip empty lines

    line = line.replace('\t',' ')
    x, y, z = line.split()

    if x &gt; somevalue: 
        continue # skip line if x &gt; somevalue

    X.append(x)
    Y.append(y)
    Z.append(z)
</snippet></ROW><ROW><id>10728372</id><snippet>__import__</snippet></ROW><ROW><id>10728372</id><snippet>__init__.py</snippet></ROW><ROW><id>10728372</id><snippet>getattr</snippet></ROW><ROW><id>10728372</id><snippet>__import__</snippet></ROW><ROW><id>10728372</id><snippet>for module_name in ['b1', 'b2', 'b3', 'b4']:
    function_using_module(module_name)

def function_using_module(module_name):
    module = __import__(...)
    ...
</snippet></ROW><ROW><id>10728372</id><snippet>from folder_b import b1, b2, b3, b4

for module in [b1, b2, b3, b4]:
    function_using_module(module)

def function_using_module(module):
    ...
</snippet></ROW><ROW><id>10728579</id><snippet>def prefix_match(sentence, taglist):
    taglist = tuple(taglist)
    for word in sentence.split():
        if word.startswith(taglist):
            return word
</snippet></ROW><ROW><id>10728579</id><snippet>str.startswith()</snippet></ROW><ROW><id>10728579</id><snippet>string</snippet></ROW><ROW><id>10728579</id><snippet>sentence</snippet></ROW><ROW><id>10728611</id><snippet>def dangerbaby(a, b, *c):
    hug(a)
    kill(b) 

&gt;&gt;&gt; dangerbaby('puppy', 'bug')
killed bug
&gt;&gt;&gt; cuddles = ['puppy']
&gt;&gt;&gt; dangerbaby(*cuddles, 'bug')
killed bug
&gt;&gt;&gt; cuddles.append('kitten')
&gt;&gt;&gt; dangerbaby(*cuddles, 'bug')
killed kitten
</snippet></ROW><ROW><id>10728611</id><snippet>dangerbaby</snippet></ROW><ROW><id>10728611</id><snippet>bug</snippet></ROW><ROW><id>10728696</id><snippet>B</snippet></ROW><ROW><id>10728696</id><snippet>A</snippet></ROW><ROW><id>10728696</id><snippet>__init__()</snippet></ROW><ROW><id>10728696</id><snippet>__init__()</snippet></ROW><ROW><id>10728696</id><snippet>B</snippet></ROW><ROW><id>10728696</id><snippet>__init__()</snippet></ROW><ROW><id>10728696</id><snippet>B</snippet></ROW><ROW><id>10728696</id><snippet>B</snippet></ROW><ROW><id>10728696</id><snippet>A</snippet></ROW><ROW><id>10728696</id><snippet>A.__init__()</snippet></ROW><ROW><id>10728696</id><snippet>B</snippet></ROW><ROW><id>10728696</id><snippet>__init__()</snippet></ROW><ROW><id>10728696</id><snippet>A</snippet></ROW><ROW><id>10728739</id><snippet>global</snippet></ROW><ROW><id>10728739</id><snippet>global</snippet></ROW><ROW><id>10728739</id><snippet>main</snippet></ROW><ROW><id>10728739</id><snippet>attack</snippet></ROW><ROW><id>10728739</id><snippet>RED=1

def main():
    global RED
    RED += 1
    print RED
    f()

def f():
    #global RED
    RED += 1
    print RED

main()
</snippet></ROW><ROW><id>10728739</id><snippet>UnboundLocalError: local variable 'RED' referenced before assignment</snippet></ROW><ROW><id>10728739</id><snippet>global</snippet></ROW><ROW><id>10728761</id><snippet># DB VIEW
CREATE VIEW my_view AS -- @todo: your select statements here

# SA
my_view = Table('my_view', metadata, autoload=True)
# define view object
class ViewObject(object):
    def __repr__(self):
        return "ViewObject %s" % str((self.id_number, self.semester,))
# map the view to the object
view_mapper = mapper(ViewObject, my_view)

# query the view
q = session.query(ViewObject)
for _ in q:
    print _
</snippet></ROW><ROW><id>10728761</id><snippet>VIEW</snippet></ROW><ROW><id>10728761</id><snippet>ViewObject</snippet></ROW><ROW><id>10728761</id><snippet>student_tmp = Table('student_tmp', metadata, autoload=True)
choice_tmp = Table('choice_tmp', metadata, autoload=True)
# your SELECT part with the columns you need
qry = select([student_tmp.c.id_number, student_tmp.c.semester, student_tmp.stateid, choice_tmp.school])
# your INNER JOIN condition
qry = qry.where(student_tmp.c.id_number == choice_tmp.c.id_number).where(student_tmp.c.semester == choice_tmp.c.semester)
# other WHERE clauses
qry = qry.where(student_tmp.c.condition == 'A')
</snippet></ROW><ROW><id>10728761</id><snippet>view_mapper = mapper(ViewObject, my_combined_qry)
</snippet></ROW><ROW><id>10728761</id><snippet>override</snippet></ROW><ROW><id>10728761</id><snippet>qry = (session.query(StudentYear, ChoiceYear).
        select_from(StudentYear).
        join(ChoiceYear).
        filter(StudentYear.condition == 'A').
        filter(ChoiceYear.choice_id == '4')
        )
</snippet></ROW><ROW><id>10728761</id><snippet>(Student, Choice)</snippet></ROW><ROW><id>10728761</id><snippet>student_tmp = StudentTmp.__table__
choice_tmp = ChoiceTmp.__table__
.... (see sample code above)
</snippet></ROW><ROW><id>10728843</id><snippet>finding.string in finding.parent.attrs.values()
</snippet></ROW><ROW><id>10728843</id><snippet>True</snippet></ROW><ROW><id>10728843</id><snippet>finding</snippet></ROW><ROW><id>10728843</id><snippet>finding</snippet></ROW><ROW><id>10728843</id><snippet>values()</snippet></ROW><ROW><id>10728843</id><snippet>keys()</snippet></ROW><ROW><id>10728868</id><snippet>import numpy

x_count = 10000
y_count = 20000

x_indices = numpy.arange(x_count)
y_indices = numpy.arange(y_count)

large_table = numpy.arange(y_count * x_count).reshape(y_count, x_count)
print large_table

def get_random_item(sample_size):
    from random import sample
    for i in sample(xrange(y_count * x_count), sample_size):
        y,x = divmod(i, y_count)
        yield (x,y)

for x,y in get_random_item(10):
    print '%12i   x: %5i y: %5i' % (large_table[x][y],  x,y)
</snippet></ROW><ROW><id>10728868</id><snippet>[[        0         1         2 ...,      9997      9998      9999]
 [    10000     10001     10002 ...,     19997     19998     19999]
 [    20000     20001     20002 ...,     29997     29998     29999]
 ..., 
 [199970000 199970001 199970002 ..., 199979997 199979998 199979999]
 [199980000 199980001 199980002 ..., 199989997 199989998 199989999]
 [199990000 199990001 199990002 ..., 199999997 199999998 199999999]]
</snippet></ROW><ROW><id>10728868</id><snippet>   154080675   x: 15408 y:   675
   186978188   x: 18697 y:  8188
   157506087   x: 15750 y:  6087
   168859259   x: 16885 y:  9259
    29775768   x:  2977 y:  5768
    94167866   x:  9416 y:  7866
    15978144   x:  1597 y:  8144
    91964007   x:  9196 y:  4007
   163462830   x: 16346 y:  2830
    62613129   x:  6261 y:  3129
</snippet></ROW><ROW><id>10729033</id><snippet>x.isspace()</snippet></ROW><ROW><id>10729033</id><snippet>tags = [x.strip() for x in input.split(',') if x and not x.isspace()]
</snippet></ROW><ROW><id>10729103</id><snippet># pre-allocate zeros list
zeros = np.zeros(nbr_subfields_per_field)
</snippet></ROW><ROW><id>10729103</id><snippet>for empty_array_index in range(nbr_fields_per_array):
    empty_array.append(zeros)
</snippet></ROW><ROW><id>10729310</id><snippet>{'url': 'http://stackoverflow.com/', 
 'users': [{'user': 'billy', 'value': 12},
           {'user': 'tommy', 'value': 2}}
</snippet></ROW><ROW><id>10729310</id><snippet>$push</snippet></ROW><ROW><id>10729310</id><snippet>$pull</snippet></ROW><ROW><id>10729310</id><snippet>$addToSet</snippet></ROW><ROW><id>10729310</id><snippet>foo.update({'url': d.get('url')}, {'$addToSet': {'users': {'user': 'john', 'value': 0}}})
</snippet></ROW><ROW><id>10729310</id><snippet>foo.update({'url': d.get('url'), 'users.user': 'tommy'}, {'$inc': {'users.$.value': 1}})
</snippet></ROW><ROW><id>10729428</id><snippet>request.FILES[u'script'].name</snippet></ROW><ROW><id>10729503</id><snippet>action=""</snippet></ROW><ROW><id>10729651</id><snippet>^</snippet></ROW><ROW><id>10729651</id><snippet>^(?=A)(?=B)(?=C)
</snippet></ROW><ROW><id>10729651</id><snippet>^(?=[A-Za-z])(?=.{6,})(?=\D*\d) 
</snippet></ROW><ROW><id>10729651</id><snippet>$</snippet></ROW><ROW><id>10729651</id><snippet>^(?=[A-Za-z])(?=.{6,})(?=\D*\d)$ 
</snippet></ROW><ROW><id>10729651</id><snippet>$</snippet></ROW><ROW><id>10729651</id><snippet>^$</snippet></ROW><ROW><id>10729666</id><snippet>__new__()</snippet></ROW><ROW><id>10729666</id><snippet>&gt;&gt;&gt; class MyInt(int): pass
&gt;&gt;&gt; MyInt.__new__ == int.__new__
True
&gt;&gt;&gt; MyInt.__new__(MyInt, '123456789101234567890')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: Python int too large to convert to C long
&gt;&gt;&gt; MyInt.__new__(int, '123456789101234567890')
123456789101234567890L
</snippet></ROW><ROW><id>10729666</id><snippet>__init__(self, *args)</snippet></ROW><ROW><id>10729666</id><snippet>__new__(cls, *args)</snippet></ROW><ROW><id>10729666</id><snippet>__new__</snippet></ROW><ROW><id>10729666</id><snippet>int</snippet></ROW><ROW><id>10729666</id><snippet>MyInt</snippet></ROW><ROW><id>10729666</id><snippet>long</snippet></ROW><ROW><id>10729666</id><snippet>int</snippet></ROW><ROW><id>10729666</id><snippet>MyInt</snippet></ROW><ROW><id>10729666</id><snippet>long</snippet></ROW><ROW><id>10729666</id><snippet>long</snippet></ROW><ROW><id>10729666</id><snippet>int</snippet></ROW><ROW><id>10729832</id><snippet>sum(L['amt'] for L in list_of_dicts)
</snippet></ROW><ROW><id>10729907</id><snippet>2.7+</snippet></ROW><ROW><id>10729907</id><snippet>3.0+</snippet></ROW><ROW><id>10729907</id><snippet>D = {'a':1,'b':2,'c':3}
inverse = {v: k for k, v in D.items()}
print(inverse)
# {1: 'a', 2: 'b', 3: 'c'}
</snippet></ROW><ROW><id>10729939</id><snippet>str.strip</snippet></ROW><ROW><id>10729939</id><snippet>re.findall(r"(?i)TOKEN (\S*)", s.strip())
</snippet></ROW><ROW><id>10729939</id><snippet>re.findall(r"(?i)TOKEN (\S*)", s)
</snippet></ROW><ROW><id>10729939</id><snippet>s = r'TOKEN a$dmin\r\n'
</snippet></ROW><ROW><id>10729939</id><snippet>re.findall(r"(?i)TOKEN (.*?)\\", s)
</snippet></ROW><ROW><id>10730085</id><snippet>""</snippet></ROW><ROW><id>10730085</id><snippet>'</snippet></ROW><ROW><id>10730085</id><snippet>'</snippet></ROW><ROW><id>10730085</id><snippet>''</snippet></ROW><ROW><id>10730085</id><snippet>"</snippet></ROW><ROW><id>10730085</id><snippet>""</snippet></ROW><ROW><id>10730085</id><snippet>x = '\''
y = "\""
</snippet></ROW><ROW><id>10730085</id><snippet>v = "\\'"
w = '\\\''
x = r'\''
y = r"\'"

print v, w, x, y
&gt; \' \' \' \'
</snippet></ROW><ROW><id>10730209</id><snippet>button.clicked.connect(lambda: self.commander(command))
</snippet></ROW><ROW><id>10730209</id><snippet>self.commander(command)</snippet></ROW><ROW><id>10730436</id><snippet>request.route_url('home')</snippet></ROW><ROW><id>10730436</id><snippet>{{ request.route_url('home') }}</snippet></ROW><ROW><id>10730436</id><snippet>${ request.route_url('home') }</snippet></ROW><ROW><id>10730436</id><snippet>config.add_route('sometestpage', '/test/{pagename}')</snippet></ROW><ROW><id>10730436</id><snippet>request.route_url('sometestpage', pagename='myfavoritepage')</snippet></ROW><ROW><id>10730462</id><snippet>In [34]: def f(cards):
   ....:     return [cards[i:j]
   ....:             for i in range(len(cards))
   ....:             for j in range(i+3, len(cards)+1)
   ....:             if cards[i:j] == range(cards[i], cards[i]+j-i)]
   ....: 

In [35]: f([1, 2, 3, 4, 6, 7, 8, 10, 11, 12])
Out[35]: [[1, 2, 3], [1, 2, 3, 4], [2, 3, 4], [6, 7, 8], [10, 11, 12]]

In [36]: f([2, 3, 4, 5, 6, 8, 9, 10])
Out[36]: 
[[2, 3, 4],
 [2, 3, 4, 5],
 [2, 3, 4, 5, 6],
 [3, 4, 5],
 [3, 4, 5, 6],
 [4, 5, 6],
 [8, 9, 10]]
</snippet></ROW><ROW><id>10730462</id><snippet>cards[i]</snippet></ROW><ROW><id>10730462</id><snippet>cards[j-1]</snippet></ROW><ROW><id>10730462</id><snippet>range</snippet></ROW><ROW><id>10730462</id><snippet>j-i</snippet></ROW><ROW><id>10730469</id><snippet>pdb.gimp_selection_none(i)</snippet></ROW><ROW><id>10730469</id><snippet>floating_sel = pdb.gimp_edit_paste(layer, True)</snippet></ROW><ROW><id>10730469</id><snippet>def explode_layer( i, l, dx, dy ):
    T=[]
    for ix,ox in enumerate(range(l.offsets[0], l.offsets[0]+l.width, dx )):
        for iy,oy in enumerate(range(l.offsets[1], l.offsets[1]+l.height, dy)):
            pdb.gimp_rect_select(i, ox, oy, dx, dy, 2, False, 0)
            if not pdb.gimp_edit_copy(l):
                continue
            layer = pdb.gimp_layer_new(i, dx, dy, 1, 
                                       l.name+" %d,%d"%(ix,iy), 100, 0)
            i.add_layer(layer)
            pdb.gimp_selection_none(i)
            floating_sel = pdb.gimp_edit_paste(layer, True)
            pdb.gimp_layer_set_offsets(floating_sel, *layer.offsets)
            pdb.gimp_floating_sel_anchor(floating_sel)
            T.append(layer)
    return T
</snippet></ROW><ROW><id>10730469</id><snippet>i.new_layer(&lt;name&gt;, &lt;width&gt;, &lt;height&gt;)</snippet></ROW><ROW><id>10730469</id><snippet>new_layer = pdb.gimp_floating_sel_to_layer(&lt;floating_sel&gt;)</snippet></ROW><ROW><id>10730555</id><snippet>from itertools import product
for i,j in product(range(len(a)), repeat=2):
    ...
</snippet></ROW><ROW><id>10730850</id><snippet>dict(zip(["key1","key2","key3"], ["val1","val2","val3"]))
</snippet></ROW><ROW><id>10730856</id><snippet>re.findall("[A-Z][a-z]*(?:(?:\\S*&amp;quot\\S*|\\s)+[A-Z][a-z]*){0,3}", "Bonds met Susann ("Sun") Margreth Branco, the mother of his first two children, in {{city-state|Montreal|Quebec}} in August 1987. They eloped in {{city-state|Las Vegas|Nevada}} Barry Bonds")
</snippet></ROW><ROW><id>10730856</id><snippet>['Bonds', 'Susann ("Sun") Margreth Branco', 'Montreal', 'Quebec', 'August', 'They', 'Las Vegas', 'Nevada', 'Barry Bonds']
</snippet></ROW><ROW><id>10731141</id><snippet>def function2(type):
  print type

def function1(abc, *args):
  print "something"
  function2(type=abc)

&gt;&gt;&gt; function1("blah", 1, 2, 3)
something
blah
</snippet></ROW><ROW><id>10731141</id><snippet>def function2(type, *args):
  print type, args

def function1(abc, *args):
  print "something"
  function2(abc, *args)

&gt;&gt;&gt; function1("blah", 1, 2, 3)
something
blah (1, 2, 3)
</snippet></ROW><ROW><id>10731413</id><snippet>{% load voting_tags %} 
</snippet></ROW><ROW><id>10731413</id><snippet>{% load voting_tags.py %}</snippet></ROW><ROW><id>10731534</id><snippet>text-overflow:ellipsis</snippet></ROW><ROW><id>10731590</id><snippet>from django.contrib import admin
from your_app.models import Publisher, Author, Book

admin.site.register(Author)
admin.site.register(Publisher)
admin.site.register(Book)
</snippet></ROW><ROW><id>10731590</id><snippet>from django.conf.urls import patterns, url, include
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
    # your urls goes here
)
</snippet></ROW><ROW><id>10731590</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.messages.context_processors.messages',
    #other context processors
)

MIDDLEWARE_CLASSES = (
    'django.contrib.messages.middleware.MessageMiddleware',
    # other middleware
)

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.sessions',
    # other apps
)
</snippet></ROW><ROW><id>10731637</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x=np.arange(-10.0,10.0,0.1)
y=np.arctan(x)

fig = plt.figure()
ax  = fig.add_subplot(111)

ax.plot(x,y,'b.')

y_pi   = y/np.pi
unit   = 0.25
y_tick = np.arange(-0.5, 0.5+unit, unit)

y_label = [r"$-\frac{\pi}{2}$", r"$-\frac{\pi}{4}$", r"$0$", r"$+\frac{\pi}{4}$",   r"$+\frac{\pi}{2}$"]
ax.set_yticks(y_tick*np.pi)
ax.set_yticklabels(y_label, fontsize=20)

y_label2 = [r"$" + format(r, ".2g")+ r"\pi$" for r in y_tick]
ax2 = ax.twinx()
ax2.set_yticks(y_tick*np.pi)
ax2.set_yticklabels(y_label2, fontsize=20)

plt.show()
</snippet></ROW><ROW><id>10731852</id><snippet>$where</snippet></ROW><ROW><id>10731852</id><snippet>&gt; db.newColl.find()

{ "_id" : ObjectId("4fbdcdd6e79d66d9e681b185"), "time1" : 123, "time2" : 22 }
{ "_id" : ObjectId("4fbdcddee79d66d9e681b186"), "time1" : 11, "time2" : 220 }
{ "_id" : ObjectId("4fbdcde6e79d66d9e681b187"), "time1" : 331, "time2" : 2120 }
{ "_id" : ObjectId("4fbdcdece79d66d9e681b188"), "time1" : 1, "time2" : 20 }

&gt; db.newColl.find({'$where' : 'this.time1 &gt; this.time2' });

{ "_id" : ObjectId("4fbdcdd6e79d66d9e681b185"), "time1" : 123, "time2" : 22 }


&gt; db.newColl.find({'$where' : 'this.time1 &lt; this.time2' });

{ "_id" : ObjectId("4fbdcddee79d66d9e681b186"), "time1" : 11, "time2" : 220 }
{ "_id" : ObjectId("4fbdcde6e79d66d9e681b187"), "time1" : 331, "time2" : 2120 }
{ "_id" : ObjectId("4fbdcdece79d66d9e681b188"), "time1" : 1, "time2" : 20 }
</snippet></ROW><ROW><id>10732464</id><snippet>&gt;&gt;&gt; d = {'data': [{'L': 'Leinster'}, {'RN': 'Roscommon'}, {'G': 'Galway'}, {'LS': 'Laois'}, {'LD': 'Longford'}, {'OY': 'Offaly'}, {'KK': 'Kilkenny'}, {'SO': 'Sligo'}, {'C': 'Connaught'}, {'CO': 'Cork'}, {'M': 'Munster'}, {'WD': 'Waterford'}, {'CE': 'Clare'}]}
&gt;&gt;&gt; dict((k,sorted(v,key=dict.values)) for k,v in d.iteritems())
{'data': [{'CE': 'Clare'}, {'C': 'Connaught'}, {'CO': 'Cork'}, {'G': 'Galway'}, {'KK': 'Kilkenny'}, {'LS': 'Laois'}, {'L': 'Leinster'}, {'LD': 'Longford'}, {'M': 'Munster'}, {'OY': 'Offaly'}, {'RN': 'Roscommon'}, {'SO': 'Sligo'}, {'WD': 'Waterford'}]}
</snippet></ROW><ROW><id>10732464</id><snippet>&gt;&gt;&gt; {k:sorted(v,key=lambda x: tuple(x.values())) for k,v in d.items()}
{'data': [{'CE': 'Clare'}, {'C': 'Connaught'}, {'CO': 'Cork'}, {'G': 'Galway'}, {'KK': 'Kilkenny'}, {'LS': 'Laois'}, {'L': 'Leinster'}, {'LD': 'Longford'}, {'M': 'Munster'}, {'OY': 'Offaly'}, {'RN': 'Roscommon'}, {'SO': 'Sligo'}, {'WD': 'Waterford'}]}
</snippet></ROW><ROW><id>10732672</id><snippet>    app2 = wx.App()
    frame2 = Output(self,u'result')
    frame2.Show()
    app2.MainLoop()
</snippet></ROW><ROW><id>10732672</id><snippet>    frame2 = Output(self,u'result')
    frame2.Show()
</snippet></ROW><ROW><id>10732672</id><snippet>    if dlg.ShowModal() == wx.ID_YES:
        dlg.Destroy()
        self.Destroy()
</snippet></ROW><ROW><id>10732672</id><snippet>self</snippet></ROW><ROW><id>10732672</id><snippet>     dlg = wx.MessageDialog(self, msg, "Wait ...", wx.YES_NO|wx.ICON_EXCLAMATION)
</snippet></ROW><ROW><id>10732975</id><snippet>JobPost.objects.filter(production=p).values('position__position')</snippet></ROW><ROW><id>10733904</id><snippet>__next__()</snippet></ROW><ROW><id>10733904</id><snippet>S[i:j+1]</snippet></ROW><ROW><id>10733904</id><snippet>S</snippet></ROW><ROW><id>10733904</id><snippet>ss</snippet></ROW><ROW><id>10733904</id><snippet>subgen</snippet></ROW><ROW><id>10733904</id><snippet>import itertools

def subgen(ss):
    l=len(ss)
    for i in xrange(l):
        for j in xrange(i,l):
            yield ss[i:j+1]

subs=[]
for i in xrange(int(raw_input())):
    S=raw_input()
    subs.append(subgen(S))
</snippet></ROW><ROW><id>10734043</id><snippet>Socket Error #111: Connection refused</snippet></ROW><ROW><id>10734043</id><snippet>X-FACEBOOK-PLATFORM</snippet></ROW><ROW><id>10734043</id><snippet>chatbot.credentials['api_key'] = '...API_KEY...'
chatbot.credentials['access_token'] = '...TOKEN...'
</snippet></ROW><ROW><id>10734524</id><snippet>['__class__', '__copy__', '__deepcopy__', '__delattr__', '__doc__', '__format__'
, '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__'
, '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__','end', 'endpos'
, 'expand', 'group', 'groupdict', 'groups', 'lastgroup', 'lastindex', 'pos', 're'
, 'regs', 'span', 'start', 'string']
</snippet></ROW><ROW><id>10734524</id><snippet>.span()</snippet></ROW><ROW><id>10735413</id><snippet>&gt;&gt;&gt; r=(1,'one'),(2,'two'),(3,'three')
&gt;&gt;&gt; zip(*r)
[(1, 2, 3), ('one', 'two', 'three')]
</snippet></ROW><ROW><id>10735788</id><snippet>cdef np.ndarray[np.uint32_t, ndim=3, mode = 'c'] np_buff = np.ascontiguousarray(im, dtype = np.uint32)
cdef unsigned int* im_buff = &lt;unsigned int*&gt; np_buff.data
</snippet></ROW><ROW><id>10736841</id><snippet>BacktestingDatabaseHelper</snippet></ROW><ROW><id>10736841</id><snippet>with</snippet></ROW><ROW><id>10736841</id><snippet>testingResource</snippet></ROW><ROW><id>10736841</id><snippet>BacktestingDatabaseHelper</snippet></ROW><ROW><id>10736841</id><snippet>common.databaseHelper</snippet></ROW><ROW><id>10737713</id><snippet>mi = MyItem()
DBSession.add(mi)
DBSession.flush()
print mi.id
</snippet></ROW><ROW><id>10737795</id><snippet>Category.objects.filter(translations__language='en').order_by("translations__text")
</snippet></ROW><ROW><id>10737833</id><snippet>def get_node(node_id):   
    request = urllib2.Request(ROOT_URL + node_id)
    response = json.loads(urllib2.urlopen(request).read())
    temp_obj = {}
    temp_obj['id'] = response['id']
    temp_obj['name'] = response['name']
    temp_obj['children'] = [get_node(child['id']) for child in response['childNode']]
    return temp_obj

hierarchy = get_node(ROOT_NODE)
</snippet></ROW><ROW><id>10738030</id><snippet>len(functions) * len(values)</snippet></ROW><ROW><id>10738030</id><snippet>any(f(v) for v in values for f in functions)
</snippet></ROW><ROW><id>10738030</id><snippet>any()</snippet></ROW><ROW><id>10738030</id><snippet>all(any(f(v) for f in functions) for v in values)
</snippet></ROW><ROW><id>10738108</id><snippet>cime</snippet></ROW><ROW><id>10738108</id><snippet>os.path</snippet></ROW><ROW><id>10738108</id><snippet># __init__.py
import .submodule
</snippet></ROW><ROW><id>10738808</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import QUrl
from PyQt4.QtNetwork import QNetworkAccessManager, QNetworkRequest

app = QApplication([])
url = "http://www.google.com/favicon.ico"
lbl = QLabel("loading...")
nam = QNetworkAccessManager()

def finishRequest(reply):
    img = QImage()
    img.loadFromData(reply.readAll())
    lbl.setPixmap(QPixmap(img))

nam.finished.connect(finishRequest)
nam.get(QNetworkRequest(QUrl(url)))
lbl.show()
app.exec_()
</snippet></ROW><ROW><id>10739054</id><snippet>class LinkedKeyProperty(ndb.KeyProperty):
    def _fix_up(self, cls, code_name):
        super(LinkedKeyProperty, self)._fix_up(cls, code_name)
        modelclass = ndb.Model._kind_map[self._kind]
        collection_name = '%s_ref_%s_to_%s' % (cls.__name__,
                                               code_name,
                                               modelclass.__name__)
        setattr(modelclass, collection_name, (cls, self))
</snippet></ROW><ROW><id>10739054</id><snippet>Contact.PhoneNumber_ref_contact_to_Contact == (PhoneNumber, PhoneNumber.contact)
</snippet></ROW><ROW><id>10739764</id><snippet>pactl</snippet></ROW><ROW><id>10739764</id><snippet>pacmd</snippet></ROW><ROW><id>10739764</id><snippet>pactl set-sink-volume 0 20%
</snippet></ROW><ROW><id>10739764</id><snippet>man pactl</snippet></ROW><ROW><id>10739764</id><snippet>pacmd help</snippet></ROW><ROW><id>10739764</id><snippet>-xx</snippet></ROW><ROW><id>10739764</id><snippet>--</snippet></ROW><ROW><id>10739764</id><snippet>pactl set-sink-volume 0 -- -20%    # or:
pactl -- set-sink-volume 0 -20%    # doesn't matter where the `--` goes
</snippet></ROW><ROW><id>10739792</id><snippet>numpy</snippet></ROW><ROW><id>10739792</id><snippet>numbers</snippet></ROW><ROW><id>10739792</id><snippet>nan</snippet></ROW><ROW><id>10739792</id><snippet>[numpy.mean([x for x in sublist if isinstance(x, numbers.Number)]) for sublist in mainlist]
</snippet></ROW><ROW><id>10739838</id><snippet>.pth</snippet></ROW><ROW><id>10739838</id><snippet>lib\python2.7\site-packages</snippet></ROW><ROW><id>10740003</id><snippet>+=</snippet></ROW><ROW><id>10740003</id><snippet>+=</snippet></ROW><ROW><id>10740003</id><snippet>a=a+b</snippet></ROW><ROW><id>10740003</id><snippet>a</snippet></ROW><ROW><id>10740003</id><snippet>A {op}= B</snippet></ROW><ROW><id>10740003</id><snippet>A = A {op} B</snippet></ROW><ROW><id>10740003</id><snippet>a = ones((3,3))</snippet></ROW><ROW><id>10740003</id><snippet>a += 3j</snippet></ROW><ROW><id>10740003</id><snippet>a = a + 3j</snippet></ROW><ROW><id>10740003</id><snippet>a += 3</snippet></ROW><ROW><id>10740003</id><snippet>a</snippet></ROW><ROW><id>10740003</id><snippet>a = a + 3j</snippet></ROW><ROW><id>10740003</id><snippet>a</snippet></ROW><ROW><id>10740003</id><snippet>a</snippet></ROW><ROW><id>10740003</id><snippet>In [3]: np.arange(5).dtype
Out[3]: dtype('int64')

In [4]: np.arange(5.0).dtype
Out[4]: dtype('float64')
</snippet></ROW><ROW><id>10740010</id><snippet># A Foolish Consistency is the Hobgoblin of Little Minds [1]
# [1]: http://www.python.org/dev/peps/pep-0008/#a-foolish-consistency-is-the-hobgoblin-of-little-minds
</snippet></ROW><ROW><id>10740692</id><snippet>x</snippet></ROW><ROW><id>10740692</id><snippet>2</snippet></ROW><ROW><id>10740692</id><snippet>x = np.array([2, 4, 6, 8, 10])
x /= 2
</snippet></ROW><ROW><id>10740692</id><snippet>x</snippet></ROW><ROW><id>10740692</id><snippet>array([1, 2, 3, 4, 5])</snippet></ROW><ROW><id>10740692</id><snippet>x</snippet></ROW><ROW><id>10740692</id><snippet>x = np.array([2, 4, 6, 8, 10], dtype='float64')
</snippet></ROW><ROW><id>10740692</id><snippet>x = x / 2.0
</snippet></ROW><ROW><id>10740802</id><snippet># write to disk temporarily to be able to bcp the results to the db temp table
with open('tempscratch.csv','wb') as temp_bcp_file:
    csvw = csv.writer(temp_bcp_file, delimiter = '\t')
    for r in result:
        csvw.writerow(r)
    temp_bcp_file.flush()
</snippet></ROW><ROW><id>10741115</id><snippet>mmap.mmap</snippet></ROW><ROW><id>10741115</id><snippet>request.add_data</snippet></ROW><ROW><id>10741295</id><snippet>queryset = Item.objects.published()</snippet></ROW><ROW><id>10741295</id><snippet>ItemArchive</snippet></ROW><ROW><id>10741307</id><snippet>request.args</snippet></ROW><ROW><id>10741307</id><snippet>MultiDict</snippet></ROW><ROW><id>10741307</id><snippet>request.args['token']</snippet></ROW><ROW><id>10741307</id><snippet>abort(403)</snippet></ROW><ROW><id>10741307</id><snippet>## If a 2nd optional argument is provided to dict.get then
## it does not raise if key is not found. Instead returns
## the 2nd argument passed as default.

token = request.args.get('token', None)
    if not token:
        ## Error handling
</snippet></ROW><ROW><id>10741307</id><snippet>if 'token' not in request.args or not request.args['token']
    ## Error handling
</snippet></ROW><ROW><id>10741558</id><snippet>newRobot = Robot('rbt1')</snippet></ROW><ROW><id>10741558</id><snippet>atlas.add_robot(newRobot)</snippet></ROW><ROW><id>10741558</id><snippet>yourAtlas.robotsToZones(...)</snippet></ROW><ROW><id>10741558</id><snippet>nonlocal</snippet></ROW><ROW><id>10741558</id><snippet>from collections import *

class Atlas(object):
    def __init__(self):
        self.zones = defaultdict(set)

    def add_robot(self, robot, zone='forest')
        self.robots[zone].add(robot)
</snippet></ROW><ROW><id>10741558</id><snippet>class Atlas(object):
    def __init__(self):
        self.robotsToZones = {}

    def add_robot(self, robot, zone='forest')
        self.robotsToZones[robot.name] = zone

    def robotsInWorlds(self):
        return self.robotsToZones.keys()  # .keys() not necessary, but hides representation
</snippet></ROW><ROW><id>10741558</id><snippet>class Robot(object):
    def __init__(self, name):
        self.name = name
</snippet></ROW><ROW><id>10741558</id><snippet>myAtlas.whereIs(myRobot)</snippet></ROW><ROW><id>10741558</id><snippet>return self.robotsToZones[robot.name]</snippet></ROW><ROW><id>10741558</id><snippet>step()</snippet></ROW><ROW><id>10741690</id><snippet>m = os.stat('fooBar.txt').st_mode
otherExec  = bool(m &amp; 0001)
otherWrite = bool(m &amp; 0002)
otherRead  = bool(m &amp; 0004)
groupExec  = bool(m &amp; 0010)
groupWrite = bool(m &amp; 0020)
groupRead  = bool(m &amp; 0040)
...
</snippet></ROW><ROW><id>10741692</id><snippet>np.bincount</snippet></ROW><ROW><id>10741692</id><snippet>import numpy as np
x = np.array([1,1,1,2,2,2,5,25,1,1])
y = np.bincount(x)
ii = np.nonzero(y)[0]
</snippet></ROW><ROW><id>10741692</id><snippet>zip(ii,y[ii]) 
# [(1, 5), (2, 3), (5, 1), (25, 1)]
</snippet></ROW><ROW><id>10741692</id><snippet>np.vstack((ii,y[ii])).T
# array([[ 1,  5],
         [ 2,  3],
         [ 5,  1],
         [25,  1]])
</snippet></ROW><ROW><id>10741727</id><snippet>httplib</snippet></ROW><ROW><id>10741727</id><snippet>Content-Type</snippet></ROW><ROW><id>10741727</id><snippet>urllib2</snippet></ROW><ROW><id>10741727</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>10741727</id><snippet>Content-Type</snippet></ROW><ROW><id>10741727</id><snippet>\n</snippet></ROW><ROW><id>10741727</id><snippet>base64.encodestring</snippet></ROW><ROW><id>10741727</id><snippet>base64.urlsafe_b64encode</snippet></ROW><ROW><id>10741760</id><snippet>from numpy import arange, sin, pi
import matplotlib
matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

import wx

class CanvasPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        self.SetSizer(self.sizer)
        self.Fit()

    def draw(self):
        t = arange(0.0, 3.0, 0.01)
        s = sin(2 * pi * t)
        self.axes.plot(t, s)


if __name__ == "__main__":
    app = wx.PySimpleApp()
    fr = wx.Frame(None, title='test')
    panel = CanvasPanel(fr)
    panel.draw()
    fr.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>10741955</id><snippet>$HOME/Python/lib/python/</snippet></ROW><ROW><id>10741955</id><snippet>python</snippet></ROW><ROW><id>10741955</id><snippet>~/Python</snippet></ROW><ROW><id>10741957</id><snippet>date_string = '{0} {1}'.format(fl['journey']['Day'][row] - 1,
                               fl['journey']['BeginTime'][row])

dateobj = datetime.datetime.strptime(date_string, '%w %H:%M:%S')
</snippet></ROW><ROW><id>10741976</id><snippet>expr if cond else expr</snippet></ROW><ROW><id>10741976</id><snippet>if cond:
    expr
else:
    expr
</snippet></ROW><ROW><id>10741976</id><snippet>expr and cond or expr</snippet></ROW><ROW><id>10742254</id><snippet>cars_by_age</snippet></ROW><ROW><id>10742254</id><snippet>Car</snippet></ROW><ROW><id>10742254</id><snippet>def cars_by_age(self):
    return sorted(self.cars, key=lambda car: car.year)
</snippet></ROW><ROW><id>10742254</id><snippet>sorted</snippet></ROW><ROW><id>10742254</id><snippet>lambda</snippet></ROW><ROW><id>10742254</id><snippet>year</snippet></ROW><ROW><id>10742527</id><snippet>def hms_to_seconds(t):
    h, m, s = [int(i) for i in t.split(':')]
    return 3600*h + 60*m + s
</snippet></ROW><ROW><id>10742586</id><snippet>with open('inp') as inp: inp_words = set(line.strip() for line in inp)

with open('example') as example, open('result', 'w') as result:
    for line in example:
        if line.split()[0] in inp_words:
            result.write(line)
</snippet></ROW><ROW><id>10742689</id><snippet>@patch('provider.Provider', autospec=True)
def test_init(self, mock_provider):
    pass
</snippet></ROW><ROW><id>10742814</id><snippet>#</snippet></ROW><ROW><id>10742895</id><snippet>class ExampleSpider(BaseSpider):
    name = "test_code"
    allowed_domains = ["www.example.com"]

    def start_requests(self):
        for i in xrange(1000):
            yield self.make_requests_from_url("http://www.example.com/bookstore/new/%d?filter=bookstore" % i)

    ...
</snippet></ROW><ROW><id>10742997</id><snippet>n = len(str_list)
values = unpack("d" * n, "".join(str_list))

a = data[file_idx]

# Just to shorten this code sample
q = NBR_DATA_POINTS_PER_BUFFER_INT

for i in xrange(n):
    a[i / q][i % q] = values[i]
</snippet></ROW><ROW><id>10742997</id><snippet>n = len(str_list)
values = unpack("d" * n, "".join(str_list))

# Just to shorten this code sample
q = NBR_DATA_POINTS_PER_BUFFER_INT

data[file_idx] = [values[i:i+q] for i in xrange(0, n, q)]
</snippet></ROW><ROW><id>10743034</id><snippet>stdout</snippet></ROW><ROW><id>10743034</id><snippet>import sys
import inspect

class PrintSnooper:
    def __init__(self, stdout):
        self.stdout = stdout
    def caller(self):
        return inspect.stack()[2][3]
    def write(self, s):
        self.stdout.write("printed by %s: " % self.caller())
        self.stdout.write(s)
        self.stdout.write("\n")

def test():
    print 'hello from test'

def main():
    # redirect stdout to a helper class.
    sys.stdout = PrintSnooper(sys.stdout)
    print 'hello from main'
    test()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>10743034</id><snippet>printed by main: hello from main
printed by main: 

printed by test: hello from test
printed by test: 
</snippet></ROW><ROW><id>10743034</id><snippet>inspect.stack()</snippet></ROW><ROW><id>10743060</id><snippet>variable.get()</snippet></ROW><ROW><id>10743060</id><snippet>IntVar</snippet></ROW><ROW><id>10743060</id><snippet>def installCommand(variables):
    checks = [variable.get() for variable in variables]
    return installFunc(checks)

b = Button(text="Install", command= lambda v=variables: installCommand(v))
b.pack()
</snippet></ROW><ROW><id>10743060</id><snippet>variables</snippet></ROW><ROW><id>10743197</id><snippet>.items()</snippet></ROW><ROW><id>10743197</id><snippet>iteritems</snippet></ROW><ROW><id>10743197</id><snippet>.values()</snippet></ROW><ROW><id>10743197</id><snippet>(key, value)</snippet></ROW><ROW><id>10743197</id><snippet>items = sorted(dct.iteritems(), key=lambda x: x[1].total, reverse=True)
</snippet></ROW><ROW><id>10743235</id><snippet>import string
from google.appengine.api.search import Query
Query('"%s"' % string.printable.replace('"', '').replace('\\', ''))
</snippet></ROW><ROW><id>10743235</id><snippet>Query('"%s"' % ''.join(chr(i) for i in xrange(128)).replace('"','').replace('\\', ''))
</snippet></ROW><ROW><id>10743355</id><snippet>fill</snippet></ROW><ROW><id>10743355</id><snippet>expand</snippet></ROW><ROW><id>10743355</id><snippet>GtkTable</snippet></ROW><ROW><id>10743693</id><snippet>&gt;&gt;&gt; s = "&lt;test&gt;0&lt;/test&gt;"
&gt;&gt;&gt; print re.search(r"&lt;(.*?)&gt;", s).group(1)
test
&gt;&gt;&gt; print re.search(r"&gt;(.*?)&lt;", s).group(1)
0
</snippet></ROW><ROW><id>10743693</id><snippet>str</snippet></ROW><ROW><id>10743693</id><snippet>&gt;&gt;&gt; print re.search(r"(?&lt;=&lt;).*?(?=&gt;)", s).group()
test
&gt;&gt;&gt; print re.search(r"(?&lt;=&gt;).*?(?=&lt;)", s).group()
0
</snippet></ROW><ROW><id>10743693</id><snippet>r"..."</snippet></ROW><ROW><id>10743770</id><snippet>try:
  conn.simple_bind_s('user@domain.com', 'WrongPassword')
except ldap.INVALID_CREDENTIALS:
  user_error_msg('wrong password provided')
</snippet></ROW><ROW><id>10743770</id><snippet>&gt;&gt;&gt; conn.simple_bind_s('', 'CorrectPassword')
(97, [])
&gt;&gt;&gt; conn.simple_bind_s('', '')
(97, [])
</snippet></ROW><ROW><id>10743770</id><snippet>simple_bind_s()</snippet></ROW><ROW><id>10743770</id><snippet>try:</snippet></ROW><ROW><id>10743770</id><snippet>try:
  conn.simple_bind_s('user@domain.com', 'SubmittedPassword')
  conn.search_st('DC=domain,DC=com', ldap.SCOPE_SUBTREE, '(objectClass=container)', 'name', 0, 30)
except ldap.INVALID_CREDENTIALS:
  user_error_msg('wrong password provided')
</snippet></ROW><ROW><id>10744347</id><snippet>import redis
import json
r = redis.Redis()
r.rpush(json.dumps(("jack", "dorsey", "twitter"), image)
</snippet></ROW><ROW><id>10744347</id><snippet>json.dumps</snippet></ROW><ROW><id>10744771</id><snippet>object_session</snippet></ROW><ROW><id>10744771</id><snippet>Session</snippet></ROW><ROW><id>10744771</id><snippet>def foo(self, bar):
    session = Session.object_session(self)
    #....
</snippet></ROW><ROW><id>10744878</id><snippet>st = '''
&lt;!-- info mp3 here --&gt;
                            192 kbps&lt;br /&gt;2:41&lt;br /&gt;3.71 mb  &lt;/div&gt;
&lt;!-- info mp3 here --&gt;
                            3.49 mb  &lt;/div&gt;
&lt;!-- info mp3 here --&gt;
                            128 kbps&lt;br /&gt;3:31&lt;br /&gt;3.3 mb   &lt;/div&gt;
'''

p = re.findall(r'&lt;!-- info mp3 here --&gt;\s+(.*?)\s+&lt;/div&gt;',st)
p2 = [row.split('&lt;br /&gt;') for row in p]
p3 = [[None]*(3 - len(row)) + row for row in p2]

&gt;&gt;&gt; p3
[['192 kbps', '2:41', '3.71 mb'], [None, None, '3.49 mb'], ['128 kbps', '3:31', '3.3 mb']]
</snippet></ROW><ROW><id>10744974</id><snippet>&gt;&gt;&gt; testTrak = {(0,1): '+', (0,2): '-', (1,1): '34.0', (1,2): 'test'}
&gt;&gt;&gt; dict([(key, value) for key, value in testTrak.items() if key[0] == 1])
{(1, 2): 'test', (1, 1): '34.0'}
</snippet></ROW><ROW><id>10744974</id><snippet>&gt;&gt;&gt; testTrak = {(0,1): '+', (0,2): '-', (1,1): '34.0', (1,2): 'test'}
&gt;&gt;&gt; {key:value for key, value in testTrak.items() if key[0] == 1}
{(1, 2): 'test', (1, 1): '34.0'}
</snippet></ROW><ROW><id>10744974</id><snippet>&gt;&gt;&gt; testTrak = {(0,1): '+', (0,2): '-', (1,1): '34.0', (1,2): 'test'}
&gt;&gt;&gt; {key:value for key, value in testTrak.items() if key[0] != 1}
{(0, 1): '+', (0, 2): '-'}
</snippet></ROW><ROW><id>10744992</id><snippet> #!/bin/sh

 do_it() {
     # need error checking there. We should also restrict which device gets
     # deactivated, by checking other properties.
     keyboard_ids="$(xinput list | sed -rn 's/.*id=([0-9]+).*slave\s+keyboard.*/\1/p')"

     for keyboard_id in $keyboard_ids; do
         # 121 is "Device Active".
         # use xinput watch-props $device_id to see some properties.
         xinput set-int-prop $keyboard_id 121 8 $1;
     done;
 }
 # you maybe don't want to exit in case of failure there.
 do_it 0 ; sleep 5; do_it 1
</snippet></ROW><ROW><id>10745120</id><snippet>execute()</snippet></ROW><ROW><id>10745120</id><snippet>cursor.execute("INSERT INTO tableName (Length) VALUES (%s);", (length2,))
</snippet></ROW><ROW><id>10745399</id><snippet>&gt;</snippet></ROW><ROW><id>10745399</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>10745399</id><snippet>$ cmd &gt; filename.txt</snippet></ROW><ROW><id>10745399</id><snippet>2&gt;error.txt</snippet></ROW><ROW><id>10745399</id><snippet>Edit -&gt; profile preference -&gt; Scrolling -&gt; check on unlimited
</snippet></ROW><ROW><id>10745515</id><snippet>class B(object):
    def __getattr__(self, attr):
        if hasattr(self.a, attr):
            return getattr(self.a, attr)
        else:
            return object.__getattribute__(self, attr)
</snippet></ROW><ROW><id>10745515</id><snippet>B</snippet></ROW><ROW><id>10745515</id><snippet>a</snippet></ROW><ROW><id>10745515</id><snippet>B</snippet></ROW><ROW><id>10745633</id><snippet>object</snippet></ROW><ROW><id>10745633</id><snippet>class ProxyClass(object):
</snippet></ROW><ROW><id>10745633</id><snippet>object</snippet></ROW><ROW><id>10745633</id><snippet>object</snippet></ROW><ROW><id>10745633</id><snippet>repr(str)</snippet></ROW><ROW><id>10745712</id><snippet>def reverse(sentence):
sentence = 'This is a string to try'
    answer = ''
    temp = ''
    for char in sentence:
        if char != ' ':
            temp += char
        else:
            answer = temp + ' ' + answer
            temp = ''
    answer = temp + ' ' + answer
    return answer
</snippet></ROW><ROW><id>10746214</id><snippet>append</snippet></ROW><ROW><id>10746214</id><snippet>def __init__( self, datastore ) : # datastore is of type store
    self.store = datastore
    self.num_added = 0

def __enter__( self ) :
    pass

def __exit__( self, type, value, traceback ) :
    l = len(self.store.contents)
    del self.store.contents[l - self.num_added : l]

def append( self, elem ) :
    self.store.contents.append(elem)
    self.num_added += 1
</snippet></ROW><ROW><id>10746214</id><snippet>append</snippet></ROW><ROW><id>10746214</id><snippet>extend</snippet></ROW><ROW><id>10746214</id><snippet>insert</snippet></ROW><ROW><id>10746214</id><snippet>remove</snippet></ROW><ROW><id>10746214</id><snippet>set</snippet></ROW><ROW><id>10746214</id><snippet>add</snippet></ROW><ROW><id>10746214</id><snippet>remove</snippet></ROW><ROW><id>10746214</id><snippet>update</snippet></ROW><ROW><id>10746214</id><snippet>intersection_update</snippet></ROW><ROW><id>10746214</id><snippet>DataContext</snippet></ROW><ROW><id>10746289</id><snippet>/var/log/cloud-init.log</snippet></ROW><ROW><id>10746289</id><snippet>/var/lib/cloud/instance</snippet></ROW><ROW><id>10746289</id><snippet>root@vanilla-562c:/var/lib/cloud/instance# python
Python 2.7.3 (default, Apr 20 2012, 22:44:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import boto
&gt;&gt;&gt; boto.__version__
'2.2.2'
</snippet></ROW><ROW><id>10746908</id><snippet>import contextlib

with contextlib.nested(open('example2'), open('outputrt','w')) as (inpf, outf):  
    for l in inpf:
        outf.write(l) 
</snippet></ROW><ROW><id>10746908</id><snippet>with open('example2') as inpf:
    with open('outputrt','w') as outf:  
        for l in inpf:
            outf.write(l)  
</snippet></ROW><ROW><id>10746986</id><snippet>class ConfigGroup(object):
    def __init__(self, config):
        self.config = config

    def __getattribute__(self, name):
        v = object.__getattribute__(self, name)
        if hasattr(v, '__get__'):
            return v.__get__(self, ConfigGroup)
        return v

class Config(object):
    def __init__(self):
        self.a = 10
        self.group = ConfigGroup(self)
        self.group.a = property(lambda group: group.config.a*2)
</snippet></ROW><ROW><id>10746986</id><snippet>property</snippet></ROW><ROW><id>10746986</id><snippet>__getattribute__</snippet></ROW><ROW><id>10746986</id><snippet>def config_meta(classname, parents, attrs):
    defaults = {}
    groups = {}
    newattrs = {'defaults':defaults, 'groups':groups}
    for name, value in attrs.items():
        if name.startswith('__'):
            newattrs[name] = value
        elif isinstance(value, type):
            groups[name] = value
        else:
            defaults[name] = value
    def init(self):
        for name, value in defaults.items():
            self.__dict__[name] = value
        for name, value in groups.items():
            group = value()
            group.config = self
            self.__dict__[name] = group
    newattrs['__init__'] = init
    return type(classname, parents, newattrs)

class Config2(object):
    __metaclass__ = config_meta
    a = 10
    b = 2
    class group(object):
        c = 5
        @property
        def d(self):
            return self.c * self.config.a
</snippet></ROW><ROW><id>10746986</id><snippet>&gt;&gt;&gt; c2.a
10
&gt;&gt;&gt; c2.group.d
50
&gt;&gt;&gt; c2.a = 6
&gt;&gt;&gt; c2.group.d
30
</snippet></ROW><ROW><id>10746986</id><snippet>self.config</snippet></ROW><ROW><id>10746986</id><snippet>class group_property(property):
    def __get__(self, obj, objtype=None):
        return super(group_property, self).__get__(obj.config, objtype)

    def __set__(self, obj, value):
        super(group_property, self).__set__(obj.config, value)

    def __delete__(self, obj):
        return super(group_property, self).__del__(obj.config)

class Config2(object):
    ...
    class group(object):
        ...
        @group_property
        def e(config):
            return config.group.c * config.a
</snippet></ROW><ROW><id>10746986</id><snippet>e</snippet></ROW><ROW><id>10746986</id><snippet>d</snippet></ROW><ROW><id>10747070</id><snippet>@cython.boundscheck(False)</snippet></ROW><ROW><id>10747070</id><snippet>@cython.wraparound(False)</snippet></ROW><ROW><id>10747070</id><snippet>setup.py</snippet></ROW><ROW><id>10747070</id><snippet>ext_modules = [Extension("accumulate", ["accumulate.pyx"], extra_compile_args=["-O3",])]</snippet></ROW><ROW><id>10747070</id><snippet>cython -a accumulate.pyx</snippet></ROW><ROW><id>10747070</id><snippet>return</snippet></ROW><ROW><id>10747070</id><snippet>i_el += 1</snippet></ROW><ROW><id>10747070</id><snippet>cdef unsigned int</snippet></ROW><ROW><id>10747070</id><snippet>int</snippet></ROW><ROW><id>10747070</id><snippet>section_lengths</snippet></ROW><ROW><id>10747070</id><snippet>sum</snippet></ROW><ROW><id>10747098</id><snippet>get(key[, default])

Return the value for key if key is in the dictionary, else default. 
If default is not given, it defaults to None, so that this method 
never raises a KeyError.
</snippet></ROW><ROW><id>10747358</id><snippet>def activeHostsQuery():
    args = ['curl', '-s', '-k', '-H', 'X-Requested-With: curl demoapp', '-u','username:password', 'https://qualysapi.qualys.com/api/2.0/fo/scan/?action=fetch&amp;scan_ref=scan/1111111.22222&amp;mode=brief&amp;output_format=csv', '|', 'cut', '-d', '-f1', '|', 'sort', '|', 'uniq', '|', 'grep', '-E', '"\"[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\""', '|', 'wc', '-l']

    activeHostsNumber = subprocess.Popen(" ".join("'%s'" % a for a in args), shell=True, stdout=subprocess.PIPE).communicate()[0]
    return activeHostsNumber
</snippet></ROW><ROW><id>10747358</id><snippet>def activeHostsQuery():
    cmd = 'curl -s -k -H \'X-Requested-With: curl demoapp\' -u username:password \'https://qualysapi.qualys.com/api/2.0/fo/scan/?action=fetch&amp;scan_ref=scan/1111111.22222&amp;mode=brief&amp;output_format=csv\' | cut -d, -f1 | sort | uniq | grep -E \'"[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}\\.[[:digit:]]{1,3}"\' | wc -l'

    ctiveHostsNumber = subprocess.Popen(cmd, shell = True, stdout = subprocess.PIPE).communicate()[0]
    return activeHostsNumber
</snippet></ROW><ROW><id>10747574</id><snippet>libgeoIP</snippet></ROW><ROW><id>10747574</id><snippet>libgeoIP</snippet></ROW><ROW><id>10747574</id><snippet>-arch x86_64</snippet></ROW><ROW><id>10747574</id><snippet>-arch i386</snippet></ROW><ROW><id>10747574</id><snippet>universal</snippet></ROW><ROW><id>10747574</id><snippet>file</snippet></ROW><ROW><id>10747574</id><snippet>$ file /usr/local/lib/libGeoIP.dylib
$ file $(python2.7 -c 'import sys;print(sys.executable)')
</snippet></ROW><ROW><id>10747794</id><snippet>D = {'x': [15, 20],
     'y': [11, 12, 14, 16, 19],
     'z': [7, 9, 17, 18]}

order = ['x', 'y', 'z']
pairs = zip(order[:-1], order[1:])

counts = dict()
for pair in pairs:
    counts[pair[0]] = dict()
    for num in D[pair[0]]:
        counts[pair[0]][num] = len([el for el in D[pair[1]] if el &gt;= num])
</snippet></ROW><ROW><id>10747794</id><snippet>n</snippet></ROW><ROW><id>10747794</id><snippet>n</snippet></ROW><ROW><id>10747794</id><snippet>M1</snippet></ROW><ROW><id>10747794</id><snippet>M2</snippet></ROW><ROW><id>10747794</id><snippet>M3</snippet></ROW><ROW><id>10747794</id><snippet>M3[key][number]</snippet></ROW><ROW><id>10747794</id><snippet>number</snippet></ROW><ROW><id>10747794</id><snippet>M2[key][number]</snippet></ROW><ROW><id>10747794</id><snippet>number</snippet></ROW><ROW><id>10747794</id><snippet>M3</snippet></ROW><ROW><id>10747794</id><snippet>M1[key][number]</snippet></ROW><ROW><id>10747794</id><snippet>number</snippet></ROW><ROW><id>10747794</id><snippet>M1</snippet></ROW><ROW><id>10747794</id><snippet>M2</snippet></ROW><ROW><id>10747794</id><snippet>M1</snippet></ROW><ROW><id>10747794</id><snippet>M1</snippet></ROW><ROW><id>10747794</id><snippet>M2</snippet></ROW><ROW><id>10747794</id><snippet>M3</snippet></ROW><ROW><id>10747794</id><snippet>M1[key][number]</snippet></ROW><ROW><id>10747794</id><snippet>downkeys</snippet></ROW><ROW><id>10747794</id><snippet>key</snippet></ROW><ROW><id>10747794</id><snippet>downkey</snippet></ROW><ROW><id>10747794</id><snippet>M2[downkey]</snippet></ROW><ROW><id>10747794</id><snippet>M2[downkey][num2]</snippet></ROW><ROW><id>10747794</id><snippet>num2</snippet></ROW><ROW><id>10747794</id><snippet>number</snippet></ROW><ROW><id>10747794</id><snippet>downkey</snippet></ROW><ROW><id>10747794</id><snippet>M1[key][number]</snippet></ROW><ROW><id>10747794</id><snippet>M1</snippet></ROW><ROW><id>10747794</id><snippet>M2</snippet></ROW><ROW><id>10747794</id><snippet>n</snippet></ROW><ROW><id>10747816</id><snippet>meaning_of_life = dict_.get('meaning') or calc()
</snippet></ROW><ROW><id>10747899</id><snippet>compile()</snippet></ROW><ROW><id>10747899</id><snippet>compile()</snippet></ROW><ROW><id>10747899</id><snippet>eval()</snippet></ROW><ROW><id>10747899</id><snippet>&gt;&gt;&gt; src = '[i**2 for i in range(10)]'
&gt;&gt;&gt; b = ast.parse(src, mode='eval')
&gt;&gt;&gt; eval(compile(b, '', 'eval'))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
</snippet></ROW><ROW><id>10747989</id><snippet>\a</snippet></ROW><ROW><id>10747989</id><snippet>\0</snippet></ROW><ROW><id>10747989</id><snippet>r''</snippet></ROW><ROW><id>10747989</id><snippet>R''</snippet></ROW><ROW><id>10747989</id><snippet>window.loadPvmFile(r"f:\games@DD.ATC3.Root\common\models\a300\amu\dummy.pvm")</snippet></ROW><ROW><id>10747990</id><snippet>draw_main_menu_ng</snippet></ROW><ROW><id>10747990</id><snippet>draw_main_menu</snippet></ROW><ROW><id>10747990</id><snippet>draw_main_menu_ng</snippet></ROW><ROW><id>10747990</id><snippet>return</snippet></ROW><ROW><id>10747990</id><snippet>if new_game_x_pos == True and new_game_y_pos == True:
    draw_main_menu_ng()
    return
</snippet></ROW><ROW><id>10747990</id><snippet>return</snippet></ROW><ROW><id>10748024</id><snippet>def time_in_range(start, end, x):
    """Return true if x is in the range [start, end]"""
    if start &lt;= end:
        return start &lt;= x &lt;= end
    else:
        return start &lt;= x or x &lt;= end
</snippet></ROW><ROW><id>10748024</id><snippet>datetime.time</snippet></ROW><ROW><id>10748024</id><snippet>start</snippet></ROW><ROW><id>10748024</id><snippet>end</snippet></ROW><ROW><id>10748024</id><snippet>x</snippet></ROW><ROW><id>10748024</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; start = datetime.time(23, 0, 0)
&gt;&gt;&gt; end = datetime.time(1, 0, 0)
&gt;&gt;&gt; time_in_range(start, end, datetime.time(23, 30, 0))
True
&gt;&gt;&gt; time_in_range(start, end, datetime.time(12, 30, 0))
False
</snippet></ROW><ROW><id>10748025</id><snippet>In [5]: import scipy

In [6]: X = scipy.randn(3,3)

In [7]: X
Out[7]: 
array([[-1.16525755,  0.04875437, -0.91006082],
       [ 0.00703527,  0.21585977,  0.75102583],
       [ 1.12739755,  1.12907917, -2.02611163]])

In [8]: X&gt;0
Out[8]: 
array([[False,  True, False],
       [ True,  True,  True],
       [ True,  True, False]], dtype=bool)

In [9]: scipy.where(X&gt;0)
Out[9]: (array([0, 1, 1, 1, 2, 2]), array([1, 0, 1, 2, 0, 1]))

In [10]: X[X&gt;0] = 99

In [11]: X
Out[11]: 
array([[ -1.16525755,  99.        ,  -0.91006082],
       [ 99.        ,  99.        ,  99.        ],
       [ 99.        ,  99.        ,  -2.02611163]])

In [12]: Y = scipy.randn(3,2)

In [13]: scipy.dot(X, Y)
Out[13]: 
array([[-124.41803568,  118.42995937],
       [-368.08354405,  199.67131528],
       [-190.13730231,  161.54715769]])
</snippet></ROW><ROW><id>10748074</id><snippet>import fix_path
import bs4
import pygments
from bs4 import BeautifulSoup
from pygments import highlight
from pygments import lexers
from pygments import formatters


    def formatter(p):
        soup = BeautifulSoup(p.otext)
        preblocks = soup.findAll('pre')
        for pre in preblocks:
            if pre.has_key('class'):
                code = ''.join([unicode(item) for item in pre.contents])
                lexer = lexers.get_lexer_by_name("python")
                formatter = formatters.HtmlFormatter()
                code_hl = highlight(code, lexer, formatter)
                pre.replaceWith(BeautifulSoup(code_hl))
                return unicode(soup)
            else:
                return null
</snippet></ROW><ROW><id>10748074</id><snippet>lexer = lexers.get_lexer_by_name(pre['class'])
</snippet></ROW><ROW><id>10748074</id><snippet>ClassNotFound: no lexer for alias [u'python'] found
</snippet></ROW><ROW><id>10748074</id><snippet>lexer = lexers.get_lexer_by_name("python")
</snippet></ROW><ROW><id>10748115</id><snippet># settings.py

import os

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')
</snippet></ROW><ROW><id>10748191</id><snippet>mylist = mylist + [6]</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>mylist.append(6)</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>list2</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>proc()</snippet></ROW><ROW><id>10748191</id><snippet>list1 = [1, 2, 3, 4, 5]</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748191</id><snippet>proc()</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>mylist + [6]</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>[6]</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>proc()</snippet></ROW><ROW><id>10748191</id><snippet>proc()</snippet></ROW><ROW><id>10748191</id><snippet>mylist</snippet></ROW><ROW><id>10748191</id><snippet>mylist + [6]</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748191</id><snippet>proc2()</snippet></ROW><ROW><id>10748191</id><snippet>proc2()</snippet></ROW><ROW><id>10748191</id><snippet>+</snippet></ROW><ROW><id>10748191</id><snippet>append()</snippet></ROW><ROW><id>10748191</id><snippet>append()</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748191</id><snippet>list1</snippet></ROW><ROW><id>10748197</id><snippet>name[0].name
</snippet></ROW><ROW><id>10748197</id><snippet>[0]</snippet></ROW><ROW><id>10748197</id><snippet>.name</snippet></ROW><ROW><id>10748197</id><snippet>name</snippet></ROW><ROW><id>10748197</id><snippet>db.query</snippet></ROW><ROW><id>10748197</id><snippet>db.select</snippet></ROW><ROW><id>10748197</id><snippet>names = db.select('todo', what='name')
</snippet></ROW><ROW><id>10748226</id><snippet>SMTP.connect()</snippet></ROW><ROW><id>10748226</id><snippet>self.sock.connect()</snippet></ROW><ROW><id>10748232</id><snippet>__pos__()</snippet></ROW><ROW><id>10748232</id><snippet>Decimal</snippet></ROW><ROW><id>10748232</id><snippet>plus()</snippet></ROW><ROW><id>10748232</id><snippet>setcontext()</snippet></ROW><ROW><id>10748232</id><snippet>localcontext()</snippet></ROW><ROW><id>10748232</id><snippet>decimal</snippet></ROW><ROW><id>10748314</id><snippet>geturl</snippet></ROW><ROW><id>10748314</id><snippet>urlopen</snippet></ROW><ROW><id>10748314</id><snippet>&gt;&gt;&gt; f = urllib2.urlopen('http://www.example.com')
&gt;&gt;&gt; f.geturl()
'http://www.iana.org/domains/example/'
</snippet></ROW><ROW><id>10748431</id><snippet>def cleave_by_change(stream):
    def generator():
        head = stream[0]
        while stream and stream[0] == head:
            yield stream.pop(0)
    while stream:
        yield generator()

for g in cleave_by_change([1,1,1,2,2,3,2,2,2,2]):
    print list(g)
</snippet></ROW><ROW><id>10748431</id><snippet>[1, 1, 1]
[2, 2]
[3]
[2, 2, 2, 2]
</snippet></ROW><ROW><id>10748431</id><snippet>nonlocal</snippet></ROW><ROW><id>10748431</id><snippet>stream</snippet></ROW><ROW><id>10748431</id><snippet>generator()</snippet></ROW><ROW><id>10748431</id><snippet>stream</snippet></ROW><ROW><id>10748431</id><snippet>generator()</snippet></ROW><ROW><id>10748915</id><snippet>div</snippet></ROW><ROW><id>10748915</id><snippet>align="center"</snippet></ROW><ROW><id>10748915</id><snippet>align="center"</snippet></ROW><ROW><id>10748915</id><snippet>&lt;div class="header_right"&gt;</snippet></ROW><ROW><id>10749037</id><snippet>datetime</snippet></ROW><ROW><id>10749037</id><snippet>import datetime
import time

msdate = time.mktime(datetime.date(2012, 5, 25).timetuple()) * 1000
</snippet></ROW><ROW><id>10749037</id><snippet>import datetime
import calendar

calendar.timegm(datetime.date(2012, 5, 25).timetuple()) * 1000
</snippet></ROW><ROW><id>10749109</id><snippet>es</snippet></ROW><ROW><id>10749109</id><snippet>fr</snippet></ROW><ROW><id>10749704</id><snippet>var formatedResult = "";
for(var i = 0; i &lt; data.length; i++) {
    var item = data[i];
    formatedResult += item[1] + " --- " + item[0];
}
// Set html for you &lt;div id="resultOutput"&gt;&lt;/div&gt;:
jQuery("div#resultOutput").html(formatedResult);
</snippet></ROW><ROW><id>10749813</id><snippet>class Data(object):
    def __init__(self, data):
        self.data = data
        self.valid = False
        #Analyze and validate data
        self._preprocess_data()
        self.validate_data()
    def _preprocess_data(self):
        if self.preprocess_data.im_func != Data.preprocess_data.im_func:
            self.data = self.data.copy()
        return self.preprocess_data()
</snippet></ROW><ROW><id>10749813</id><snippet>self.preprocess_data</snippet></ROW><ROW><id>10749813</id><snippet>Data.preprocess_data</snippet></ROW><ROW><id>10749813</id><snippet>_preprocess_data</snippet></ROW><ROW><id>10749847</id><snippet>__metaclass</snippet></ROW><ROW><id>10749847</id><snippet>__metaclass__</snippet></ROW><ROW><id>10749847</id><snippet>&gt;&gt;&gt; ConcretePlugin(123)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class ConcretePlugin with abstract methods idle
</snippet></ROW><ROW><id>10749937</id><snippet>decode</snippet></ROW><ROW><id>10749937</id><snippet>"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/django/contrib/auth/management/init.py", line 85, in get_system_username return getpass.getuser().decode(locale.getdefaultlocale()[1]) TypeError: decode() argument 1 must be string, not None Finished
</snippet></ROW><ROW><id>10749937</id><snippet>locale.getdefaultlocale()</snippet></ROW><ROW><id>10749937</id><snippet>LANG</snippet></ROW><ROW><id>10749937</id><snippet>echo $LANG</snippet></ROW><ROW><id>10749937</id><snippet>en_US.UTF-8</snippet></ROW><ROW><id>10749937</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getdefaultlocale()
('en_US', 'UTF-8')
</snippet></ROW><ROW><id>10749937</id><snippet>(None, None)</snippet></ROW><ROW><id>10750079</id><snippet>SCAN_AND_FILTER_ROWS</snippet></ROW><ROW><id>10750079</id><snippet>| '(' [row_key relop] ROW relop row_key
      (OR [row_key relop] ROW relop row_key)* ')'
</snippet></ROW><ROW><id>10750079</id><snippet>ROW=x OR ROW=y OR...</snippet></ROW><ROW><id>10750257</id><snippet>from __future__ import division</snippet></ROW><ROW><id>10750257</id><snippet>&gt;&gt;&gt; 1/5
0
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1/5
0.2
&gt;&gt;&gt; math.ceil(1/5)
1.0
</snippet></ROW><ROW><id>10750257</id><snippet>int(math.ceil(1/5))
</snippet></ROW><ROW><id>10750628</id><snippet>unicode_escape</snippet></ROW><ROW><id>10750628</id><snippet>&gt;&gt;&gt; print "H\u00eatres et \u00e9tang".decode("unicode_escape")
Hêtres et étang
</snippet></ROW><ROW><id>10750628</id><snippet>&gt;&gt;&gt; s = "H\u00eatres et \u00e9tang".decode("unicode_escape")
&gt;&gt;&gt; s.encode("latin1")
'H\xeatres et \xe9tang'
</snippet></ROW><ROW><id>10750628</id><snippet>for s in l: 
    if not isinstance(s, unicode): 
        print s.decode('unicode_escape')
</snippet></ROW><ROW><id>10750646</id><snippet>.+</snippet></ROW><ROW><id>10750646</id><snippet>.*</snippet></ROW><ROW><id>10750646</id><snippet>+</snippet></ROW><ROW><id>10750646</id><snippet>*</snippet></ROW><ROW><id>10750774</id><snippet>genfromtxt()</snippet></ROW><ROW><id>10750774</id><snippet>names</snippet></ROW><ROW><id>10750774</id><snippet>data.view(dtype=[(n, 'float64') for n in csv_names]).reshape(len(data))
</snippet></ROW><ROW><id>10750774</id><snippet>astype()</snippet></ROW><ROW><id>10750774</id><snippet>view()</snippet></ROW><ROW><id>10750953</id><snippet>csv</snippet></ROW><ROW><id>10750953</id><snippet>import csv
maxDict = {'test1': ('alpha', 2), 'test2': ('gamma', 2)} 
keys = sorted(maxDict.keys())
csvw = csv.writer(open('output.csv', 'wb'))
csvw.writerow(keys)
data = [maxDict[k] for k in keys]
for row in zip(*data):
  csvw.writerow(row)
</snippet></ROW><ROW><id>10751242</id><snippet>0</snippet></ROW><ROW><id>10751242</id><snippet>print [max(a[(a&gt;=(i))&amp;(a&lt;i+1)]) if a[(a&gt;=(i))&amp;(a&lt;i+1)].size else 0 for i in bins]
[0, 1.0, 0, 3.5, 4.0, 5.0, 6.0, 7.7999999999999998, 8.0, 9.0, 10.0]
</snippet></ROW><ROW><id>10751242</id><snippet>+1</snippet></ROW><ROW><id>10751356</id><snippet>def _get_option_tuples(self, option_string):
    ...
    if option_string.startswith(option_prefix):
    ...
</snippet></ROW><ROW><id>10751356</id><snippet>startswith</snippet></ROW><ROW><id>10751356</id><snippet>==</snippet></ROW><ROW><id>10751356</id><snippet>argparse.ArgumentParser</snippet></ROW><ROW><id>10751356</id><snippet>_get_option_tuples(self, option_string)</snippet></ROW><ROW><id>10751356</id><snippet>option_string.startswith(option_prefix)</snippet></ROW><ROW><id>10751356</id><snippet>option_string == option_prefix</snippet></ROW><ROW><id>10751356</id><snippet>&gt;&gt;&gt; parser = my_argparse.MyArgparse
&gt;&gt;&gt; parser = my_argparse.MyArgparse()
&gt;&gt;&gt; parser.add_argument('--send', action='store_true')
_StoreTrueAction(option_strings=['--send'], dest='send', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args(['--se'])
usage: [-h] [--send]
: error: unrecognized arguments: --se
</snippet></ROW><ROW><id>10751356</id><snippet>_get_option_tuples</snippet></ROW><ROW><id>10751356</id><snippet>_</snippet></ROW><ROW><id>10751369</id><snippet>easy_install gevent-0.13.7.win32-py2.7.exe</snippet></ROW><ROW><id>10751369</id><snippet>Microsoft Windows XP [Wersja 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

Z:\&gt;virtualenv z:\venv\gevent-install
New python executable in z:\venv\gevent-install\Scripts\python.exe
Installing distribute..................................................................................................
............................................................................................done.
Installing pip.................done.

Z:\&gt;venv\gevent-install\Scripts\activate
(gevent-install) Z:\&gt;easy_install c:\python\packages\gevent-0.13.7.win32-py2.7.exe
Processing gevent-0.13.7.win32-py2.7.exe
creating 'c:\docume~1\pdobro~1\ustawi~1\temp\easy_install-b5nj3i\gevent-0.13.7-py2.7-win32.egg' and adding 'c:\docume~1
pdobro~1\ustawi~1\temp\easy_install-b5nj3i\gevent-0.13.7-py2.7-win32.egg.tmp' to it
creating z:\venv\gevent-install\lib\site-packages\gevent-0.13.7-py2.7-win32.egg
Extracting gevent-0.13.7-py2.7-win32.egg to z:\venv\gevent-install\lib\site-packages
Adding gevent 0.13.7 to easy-install.pth file

Installed z:\venv\gevent-install\lib\site-packages\gevent-0.13.7-py2.7-win32.egg
Processing dependencies for gevent==0.13.7
Searching for greenlet
Reading http://pypi.python.org/simple/greenlet/
Reading http://bitbucket.org/ambroff/greenlet
Reading https://github.com/python-greenlet/greenlet
Best match: greenlet 0.3.4
Downloading http://pypi.python.org/packages/2.7/g/greenlet/greenlet-0.3.4-py2.7-win32.egg#md5=9941aa246358c586bb274812e
130629
Processing greenlet-0.3.4-py2.7-win32.egg
creating z:\venv\gevent-install\lib\site-packages\greenlet-0.3.4-py2.7-win32.egg
Extracting greenlet-0.3.4-py2.7-win32.egg to z:\venv\gevent-install\lib\site-packages
Adding greenlet 0.3.4 to easy-install.pth file

Installed z:\venv\gevent-install\lib\site-packages\greenlet-0.3.4-py2.7-win32.egg
Finished processing dependencies for gevent==0.13.7

(gevent-install) Z:\&gt;
</snippet></ROW><ROW><id>10751561</id><snippet> 1 def options(opt):                                                               
 2     opt.load("compiler_cxx")                                                    
 3                                                                                 
 4 def configure(conf):                                                            
 5     conf.check_cfg(package='gstreamer-0.10', args='--cflags --libs',            
 6             uselib_store='GSTREAMER')                                           
 7                                                                                 
 8     print (conf.env.LIB_GSTREAMER);                                                                   
 9                                                                                 
10 def build(bld):                                                                 
11     subdirs = []       
</snippet></ROW><ROW><id>10751818</id><snippet>import mock
import unittest

class ClassToPatch():
   def __init__(self, *args):
       pass

   def some_func(self):
       return id(self)

class UUT():
    def __init__(self, *args):
        resource_1 = ClassToPatch()
        resource_2 = ClassToPatch()
        self.test_property = (resource_1.some_func(), resource_2.some_func())

class TestCase1(unittest.TestCase):
    @mock.patch('__main__.ClassToPatch', autospec = True)
    def test_1(self, mock1):
        ctpMocks = [mock.Mock(), mock.Mock()]
        ctpMocks[0].some_func.return_value = "funky"
        ctpMocks[1].some_func.return_value = "monkey"
        mock1.side_effect = ctpMocks

        u = UUT()
        self.assertEqual(u.test_property, ("funky", "monkey"))

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>10751818</id><snippet>test_property</snippet></ROW><ROW><id>10751818</id><snippet>test_property</snippet></ROW><ROW><id>10751818</id><snippet>ClassToPatch</snippet></ROW><ROW><id>10751818</id><snippet>("funky", "monkey")</snippet></ROW><ROW><id>10751818</id><snippet>side_effect</snippet></ROW><ROW><id>10751818</id><snippet>ClassToPatch</snippet></ROW><ROW><id>10751818</id><snippet>UUT</snippet></ROW><ROW><id>10751818</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.004s

OK
</snippet></ROW><ROW><id>10751972</id><snippet>import sys

a = int(sys.argv[1])  b = int(sys.argv[2])

print a, b

print a+b
</snippet></ROW><ROW><id>10751972</id><snippet>python mySum.py 100 200</snippet></ROW><ROW><id>10751972</id><snippet>100 200
300
</snippet></ROW><ROW><id>10751988</id><snippet>.curselection()</snippet></ROW><ROW><id>10751988</id><snippet>Jane</snippet></ROW><ROW><id>10751988</id><snippet>.curselection()</snippet></ROW><ROW><id>10751988</id><snippet>1</snippet></ROW><ROW><id>10751988</id><snippet>rowids</snippet></ROW><ROW><id>10751988</id><snippet>rowids[1]</snippet></ROW><ROW><id>10751988</id><snippet>5</snippet></ROW><ROW><id>10751988</id><snippet>&gt;&gt;&gt; rowids = [2, 5, 15]
&gt;&gt;&gt; rowids[listbox.curselection()]
5
</snippet></ROW><ROW><id>10752228</id><snippet>j</snippet></ROW><ROW><id>10752309</id><snippet>&gt;&gt;&gt; def remove_unwanted(s):
...     '''• ½ cup flour -&gt; ½ cup flour'''
...     allowed = '[\w½¾]+'
...     return ' '.join(re.findall(allowed, s))
... 
&gt;&gt;&gt; print remove_unwanted('• ½ cup flour -&gt;')
½ cup flour
</snippet></ROW><ROW><id>10752420</id><snippet>from selenium import webdriver

p = webdriver.FirefoxProfile()   
p.set_preference("webdriver.log.file", "/tmp/firefox_console")
driver = webdriver.Firefox(p)
</snippet></ROW><ROW><id>10752532</id><snippet>set</snippet></ROW><ROW><id>10752532</id><snippet>range</snippet></ROW><ROW><id>10752532</id><snippet>xrange</snippet></ROW><ROW><id>10752532</id><snippet>range</snippet></ROW><ROW><id>10752605</id><snippet>numpy.may_share_memory()</snippet></ROW><ROW><id>10753334</id><snippet>import lxml.etree
// First we parse the xml
doc = lxml.etree.fromstring('&lt;p o ="2"&gt;  And This is a number 12.90! &lt;/p&gt;')
// Then we use xpath to extract the element we need
doc.xpath('/p/text()')
</snippet></ROW><ROW><id>10753683</id><snippet>host</snippet></ROW><ROW><id>10754244</id><snippet>from lxml import etree

xml = etree.XML("&lt;root&gt;&lt;a name='1'&gt;&lt;b name='1-1'&gt;ABC&lt;/b&gt;&lt;/a&gt;&lt;a&gt;Does not exist&lt;/a&gt;&lt;a name='2'&gt;DEF&lt;/a&gt;&lt;a&gt;&lt;b name='3-1'&gt;GHI&lt;/b&gt;&lt;/a&gt;&lt;/root&gt;")

print 'Before:'
print etree.tostring(xml)

xp = etree.XPath("/*/*[not(@name)]") # or "//*[not(@name)]" to include the root tag
all_nodes = xp(xml)
for x in all_nodes:
    parent = x.getparent()
    #if parent is None: continue # if the root tag is included, the parent is None
    parent.remove(x)

print 'After:'
print etree.tostring(xml)
</snippet></ROW><ROW><id>10754421</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>10754421</id><snippet>strings = [u"Índia, Tailândia &amp; Cingapura ", u"Lines through the days 1 (Arabic) سطور عبر الأيام 1 | شمس الدين خ "]</snippet></ROW><ROW><id>10754421</id><snippet>u</snippet></ROW><ROW><id>10754421</id><snippet>unicode</snippet></ROW><ROW><id>10754421</id><snippet>string</snippet></ROW><ROW><id>10754421</id><snippet>with open('filename', 'w') as f:
    s = '\n'.join(strings)
    f.write(s.encode('utf-8'))
</snippet></ROW><ROW><id>10754421</id><snippet>with open('filename') as f:
    strings = [l.decode('utf-8') for line in f]
</snippet></ROW><ROW><id>10754512</id><snippet>s</snippet></ROW><ROW><id>10754512</id><snippet>word</snippet></ROW><ROW><id>10754512</id><snippet>s</snippet></ROW><ROW><id>10754512</id><snippet>rstrip</snippet></ROW><ROW><id>10754512</id><snippet>s</snippet></ROW><ROW><id>10754512</id><snippet>u</snippet></ROW><ROW><id>10754512</id><snippet>suffixes = [u'ি']
</snippet></ROW><ROW><id>10754512</id><snippet>u</snippet></ROW><ROW><id>10755154</id><snippet>VerboseMetaclass</snippet></ROW><ROW><id>10755154</id><snippet>VerboseFunction</snippet></ROW><ROW><id>10755154</id><snippet>VerboseMetaclass.wrap</snippet></ROW><ROW><id>10755154</id><snippet>wrap_function</snippet></ROW><ROW><id>10755154</id><snippet>@classmethod
def wrap(cls, key, value):
    sign('VerboseMetaclass')
    if isinstance(value, types.FunctionType):
        return cls.wrap_function(key, value)
    return value

def wrap_function(name, func):
    sign('VerboseMetaclass')
    @functools.wraps(func)
    def verbose_function(*args, **kwargs):
        args_str = tuple(repr(item) for item in args)
        kwargs_str = tuple('{!s}={!r}'.format(*pair)
                           for pair in sorted(kwargs.items()))
        signature = '{}({})'.format(name, ', '.join(args_str + kwargs_str))
        print('[ -&gt; ] {}\n'.format(signature))
        try:
            value = func(*args, **kwargs)
            print('[ &lt;- ] {!s} [return {!r}]\n'.format(signature, value))
            return value
        except:
            value = sys.exc_info()[1]
            print('[ &lt;- ] {!s} [raise {!r}]\n'.format(signature, value))
            raise
    return verbose_function
</snippet></ROW><ROW><id>10755154</id><snippet>VerboseMetaclass</snippet></ROW><ROW><id>10755154</id><snippet>Metaclass</snippet></ROW><ROW><id>10755154</id><snippet>Test</snippet></ROW><ROW><id>10755154</id><snippet>import types, functools, sys

class VerboseMetaclass(type):

    def __new__(cls, name, bases, classdict):
        for key in sorted(filter(
            lambda name: isinstance(name, str), classdict)):
            classdict[key] = cls.wrap('{}.{}'.format(name, key), classdict[key])
        return super().__new__(cls, name, bases, classdict)

    @classmethod
    def wrap(cls, name, value):
        if isinstance(value, types.FunctionType):
            return cls.wrap_function(name, value)
        if isinstance(value, classmethod):
            return classmethod(cls.wrap_function(name, value.__func__))
        if isinstance(value, staticmethod):
            return staticmethod(cls.wrap_function(name, value.__func__))
        try:
            return VerboseData(name, value)
        except NameError:
            return value

    def wrap_function(name, func):
        @functools.wraps(func)
        def verbose_function(*args, **kwargs):
            args_str = tuple((object.__repr__(item)
                              if isinstance(item, VerboseData)
                              else repr(item)) for item in args)
            kwargs_str = tuple('{!s}={!r}'.format(*pair)
                               for pair in sorted(kwargs.items()))
            signature = '{}({})'.format(name, ', '.join(args_str + kwargs_str))
            print('[ -&gt; ] {}\n'.format(signature))
            try:
                value = func(*args, **kwargs)
                print('[ &lt;- ] {!s} [return {!r}]\n'.format(signature, value))
                return value
            except:
                value = sys.exc_info()[1]
                print('[ &lt;- ] {!s} [raise {!r}]\n'.format(signature, value))
                raise
        return verbose_function

class VerboseData(metaclass=VerboseMetaclass):

    def __init__(self, name, value):
        vars(self).update(locals())

    def __repr__(self):
        return repr(self.value)

    def __get__(self, instance, owner):
        value = self.value
        if isinstance(value, (property, VerboseData)):
            value = value.__get__(instance, owner)
        print('[ get ] {!s} = {!r}\n'.format(self.name, value))
        return value

    def __set__(self, instance, value):
        print('[ set ] {!s} = {!r}\n'.format(self.name, value))
        if isinstance(self.value, (property, VerboseData)):
            self.value.__set__(instance, value)
        else:
            self.value = value

    def __delete__(self, instance):
        print('[ XX ] {}\n'.format(self.name))
        if isinstance(self.value, (property, VerboseData)):
            self.value.__delete__(instance)
        else:
            del self.value

    def __iter__(self):
        return iter(self.value)

class Metaclass(VerboseMetaclass, metaclass=VerboseMetaclass):

    @classmethod
    def __prepare__(metacls, name, bases):
        return super().__prepare__(name, bases)

    def __new__(cls, name, bases, classdict):
        for key, value in {'__new__': cls.new, '__init__': cls.init}.items():
            if key in classdict:
                classdict[key.encode()] = classdict[key]
                classdict[key] = value
        return super().__new__(cls, name, bases, classdict)

    def __init__(self, name, bases, classdict):
        return super().__init__(name, bases, classdict)

    def __call__(self, *args, **kwargs):
        return super().__call__(*args, **kwargs)

    def new(cls, *args, **kwargs):
        for base in cls.__mro__:
            try:
                return vars(base)[b'__new__'](cls, *args, **kwargs)
            except KeyError:
                pass
        return object.__new__(cls, *args, **kwargs)

    def init(self, *args, **kwargs):
        for base in self.__class__.__mro__:
            try:
                return vars(base)[b'__init__'](self, *args, **kwargs)
            except KeyError:
                pass
        return object.__init__(self)

if __name__ == '__main__':
    class Test(metaclass=Metaclass):

        def __new__(cls):
            return super().__new__(cls)

        def __init__(self):
            return super().__init__()

        def run(self):
            pass

    Test().run()
</snippet></ROW><ROW><id>10755206</id><snippet>&gt;&gt;&gt; re.findall(r"(?&lt;!\d)\d\d(?!\d)", "abc123#d$45^abrt&amp;89*")
['45', '89']
</snippet></ROW><ROW><id>10755341</id><snippet>bitsums = list()
with open('test.txt') as fobj:
    for line in fobj:
        bitsums.append(sum(int(c) for c in line.strip()[1::7]))
</snippet></ROW><ROW><id>10755460</id><snippet>import quopri

print quopri.decodestring(msg).decode('utf8')
</snippet></ROW><ROW><id>10755460</id><snippet>import base64  

body = base64.b64decode(msg) 
</snippet></ROW><ROW><id>10755701</id><snippet>import numpy
import mayavi.mlab as mlab

# Create some random data
N = 20
x, y, z = numpy.mgrid[-5:5:20j, -5:5:20j, -5:5:20j]
val = numpy.random.random(z.shape)

# Plot and show in mayavi2
pts = mlab.points3d(x, y, z, val, scale_factor=.5,transparent=True)
mlab.show()
</snippet></ROW><ROW><id>10755771</id><snippet>drivefs</snippet></ROW><ROW><id>10755771</id><snippet>pycloudfuse</snippet></ROW><ROW><id>10755866</id><snippet>csv.reader(open(emoticons, 'rb'))
</snippet></ROW><ROW><id>10755866</id><snippet>row</snippet></ROW><ROW><id>10755866</id><snippet>c.execute("INSERT INTO Emoticons (Emotions) VALUES (%s)", row)
</snippet></ROW><ROW><id>10755866</id><snippet>row</snippet></ROW><ROW><id>10755866</id><snippet>%s</snippet></ROW><ROW><id>10755866</id><snippet>csv</snippet></ROW><ROW><id>10755866</id><snippet>emoticons = 'C:/Users/user/Desktop/emoticons.txt'
with open(emoticons, 'r') as f:
    for row in f:
        c.execute("INSERT INTO Emoticons (Emotions) VALUES (%s)", (row,))
db.close()
</snippet></ROW><ROW><id>10756261</id><snippet>MetaClass.__new__</snippet></ROW><ROW><id>10756261</id><snippet>def meta_class_synthesize(name, bases, attrmap):
    seen = set()
    seen_add = seen.add
    metas = [type(base) for base in bases]
    metas = tuple([
        meta for meta in metas
        if meta is not type and meta not in seen and not seen_add(meta)])
    if not metas:
        return type(name, bases, attrmap)
    elif len(metas) == 1:
        return metas[0](name, bases, attrmap)
    newmeta_name = "__".join(meta.__name__ for meta in metas)
    newmeta = type(newmeta_name, metas, {})
    return newmeta(name, bases, attrmap)

class M_A(type):
    pass

class M_B(type):
    pass

class A:
    __metaclass__ = M_A

class B:
    __metaclass__ = M_B

class C(A, B):
    __metaclass__ = meta_class_synthesize


print type(C)  # prints "&lt;class '__main__.M_A__M_B'&gt;"
</snippet></ROW><ROW><id>10756547</id><snippet>def myprint(d):
  for k, v in d.iteritems():
    if isinstance(v, dict):
      myprint(v)
    else:
      print "{0} : {1}".format(k, v)
</snippet></ROW><ROW><id>10756855</id><snippet>mask1 &amp;= ~mask2
</snippet></ROW><ROW><id>10757314</id><snippet>&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; t = html.fromstring("""&lt;html&gt;&lt;body&gt;Hello! &lt;p&gt; Goodbye.&lt;/body&gt;&lt;/html""")
&gt;&gt;&gt; html.tostring(t.xpath("//body")[0])
'&lt;body&gt;Hello! &lt;p&gt; Goodbye.&lt;/p&gt;&lt;/body&gt;'
</snippet></ROW><ROW><id>10757751</id><snippet>from pylab import *

z = rand(10, 25)

c = pcolor(z)
set_cmap('hot')
colorbar()
c = pcolor(z, edgecolors='w', linewidths=1)
axis([0,25,0,10])
savefig('plt.png')
show()
</snippet></ROW><ROW><id>10757779</id><snippet>f.seek(N)</snippet></ROW><ROW><id>10757779</id><snippet>f.read(LINESIZE)</snippet></ROW><ROW><id>10757779</id><snippet>with open('textfile','r') as f:
    lines=[L[:-1] for L in f.readlines()]  
</snippet></ROW><ROW><id>10757779</id><snippet>with open('textfile','w') as f:
    f.write('\n'.join(lines))
</snippet></ROW><ROW><id>10757779</id><snippet>this line has n characters
this line also has n characters
</snippet></ROW><ROW><id>10757779</id><snippet>#First, I get the length of the first line -- if you already know it, skip this block
f=open('test.dat','r')
l=f.readline()
linelen=len(l)-1
f.close()

#apparently mode='a+' doesn't work on all systems :( so I use 'r+' instead
f=open('test.dat','r+')
f.seek(0)
f.write('a'*linelen+'\n') #'a'*linelen = 'aaaaaaaaa...' 
f.close()
</snippet></ROW><ROW><id>10757788</id><snippet>def update(dictionary, key, newvalue, func=max):
    dictionary[key] = func(dictionary[key], newvalue)
</snippet></ROW><ROW><id>10757789</id><snippet>safe_str_cmp(client_hash, mac.digest())</snippet></ROW><ROW><id>10757789</id><snippet>data = request.cookies.get("session")
cookie = werkzeug.contrib.securecookie.SecureCookie.unserialize(data, secret_key)
</snippet></ROW><ROW><id>10757789</id><snippet>data</snippet></ROW><ROW><id>10757789</id><snippet>cookie</snippet></ROW><ROW><id>10757789</id><snippet>safe_str_cmp()</snippet></ROW><ROW><id>10757789</id><snippet>unserialize()</snippet></ROW><ROW><id>10757887</id><snippet>register_namespace()</snippet></ROW><ROW><id>10757887</id><snippet>ElementTree</snippet></ROW><ROW><id>10757887</id><snippet>#!/usr/bin/python
import xml.etree.ElementTree as ET # import entire module; use alias for clarity
import sys, os

# note that this is the *module*'s `register_namespace()` function
ET.register_namespace("android", "http://schemas.android.com/apk/res/android")

tree = ET.ElementTree() # instantiate an object of *class* `ElementTree`
tree.parse("AndroidManifest.xml")
root = tree.getroot()
root.attrib["{http://schemas.android.com/apk/res/android}versionCode"] = "3"

ET.dump(tree) # we use the *module*'s `dump()` function
</snippet></ROW><ROW><id>10758041</id><snippet>point</snippet></ROW><ROW><id>10758041</id><snippet>someFunc</snippet></ROW><ROW><id>10758041</id><snippet>point</snippet></ROW><ROW><id>10758041</id><snippet>someFunc</snippet></ROW><ROW><id>10758041</id><snippet>def someFunc(a_point): # note new parameter name

    loc_point = point(a_point.x, a_point.y)  # new local point

    if loc_point.x &gt; 14: loc_point.x = 14
    elif loc_point.x &lt; 0: loc_point.x = 0

    if loc_point.y &gt; 14: loc_point.y = 14
    elif loc_point.y &lt; 0: loc_point.y = 0

    return loc_point
</snippet></ROW><ROW><id>10758041</id><snippet>point</snippet></ROW><ROW><id>10758257</id><snippet>x = input("Continue? ").strip()
</snippet></ROW><ROW><id>10758567</id><snippet>import paramiko
import sys

nbytes = 4096
hostname = 'hostname'
port = 22
username = 'username' 
password = 'password'
command = 'ls'

client = paramiko.Transport((hostname, port))
client.connect(username=username, password=password)

stdout_data = []
stderr_data = []
session = client.open_channel(kind='session')
session.exec_command(command)
while True:
    if session.recv_ready():
        stdout_data.append(session.recv(nbytes))
    if session.recv_stderr_ready():
        stderr_data.append(session.recv_stderr(nbytes))
    if session.exit_status_ready():
        break

print 'exit status: ', session.recv_exit_status()
print ''.join(stdout_data)
print ''.join(stderr_data)

session.close()
client.close()
</snippet></ROW><ROW><id>10758788</id><snippet>def process_line(line, first_value, outf):
    parts = line.strip().split(' ')
    parts[0] = '%.3f' % (float(parts[0]) - first_value)
    print &gt;&gt;outf, ' '.join(parts)

with open('in.txt') as inf, open('out.txt', 'w') as outf:
    first_line = inf.readline().strip()
    first_value = float(first_line.split(' ', 1)[0])
    process_line(first_line, first_value, outf)
    for line in inf:
        process_line(line, first_value, outf)
</snippet></ROW><ROW><id>10758850</id><snippet>directory = '/path/to/dir'
base = 'mystring'

for i, f in enumerate(os.listdir(directory), 1):
    ext = f.rsplit('.', 1)[-1]
    absolutify = lambda s: os.path.join(directory, s)
    os.rename(absolutify(f), absolutify('%s_%d.%s' % (base, i, ext)))
</snippet></ROW><ROW><id>10759061</id><snippet>import select
...
scan_process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
poll_obj = select.poll()
poll_obj.register(scan_process.stdout, select.POLLIN)   
while(some_criterium and not time_limit):
    poll_result = poll_obj.poll(0)
    if poll_result:
        line = scan_process.stdout.readline()
        some_criterium = do_something(line)
    update(time_limit)
</snippet></ROW><ROW><id>10759100</id><snippet>from collections import Counter
a_dict = Counter(lst)
</snippet></ROW><ROW><id>10759100</id><snippet>a_dict = dict((x, lst.count(x)) for x in set(lst))
</snippet></ROW><ROW><id>10759100</id><snippet>set</snippet></ROW><ROW><id>10759112</id><snippet>class KeyRememberer(type):

    def __new__(meta, classname, bases, classDict):
        cls = type.__new__(meta, classname, bases, classDict)

        # Define init that creates the set of remembered keys
        def __init__(self, *args, **kwargs):
            self.memory = set()
            return super(cls, self).__init__(*args, **kwargs)
        cls.__init__ = __init__

        # Decorator that stores a requested key in the cache
        def remember(f):
            def _(self, key, *args, **kwargs):
                self.memory.add(key)
                return f(self, key, *args, **kwargs)
            return _

        # Apply the decorator to each of the default implementations
        for method_name in [  '__getitem__', '__contains__', 'get' ]:
            m = getattr(cls, method_name)
            setattr(cls, method_name, remember(m))

        return cls


class DictWithMemory(dict):

    # A metaclass that ensures the object
    # has a set called 'memory' as an attribute,
    # which is updated on each call to __getitem__,
    # __contains__, or get.
    __metaclass__ = KeyRememberer

    def unused_keys(self):
        """
        Returns the list of unused keys.
        """
        print "Used", self.memory
        return list(set(super(DictWithMemory,
                              self).keys()).difference(self.memory))
</snippet></ROW><ROW><id>10759132</id><snippet>import Image

im = Image.open('Foto.jpg')
im.save('Foto.png')
</snippet></ROW><ROW><id>10759228</id><snippet>QGraphicsView</snippet></ROW><ROW><id>10759228</id><snippet>QGraphicsView.scale(float, float)</snippet></ROW><ROW><id>10759228</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>10759228</id><snippet>QGraphicsLinearLayout</snippet></ROW><ROW><id>10759228</id><snippet>#!/usr/bin/env python

import sys
from PyQt4 import QtGui, QtCore
from popplerqt4 import Poppler

class Application(QtGui.QApplication):

    def __init__(self):
        QtGui.QApplication.__init__(self, sys.argv)

        scene = QtGui.QGraphicsScene()
        scene.setBackgroundBrush(QtGui.QColor('darkGray'))
        layout = QtGui.QGraphicsLinearLayout(QtCore.Qt.Vertical)
        document = Poppler.Document.load('/home/test.pdf')
        document.setRenderHint(Poppler.Document.Antialiasing)
        document.setRenderHint(Poppler.Document.TextAntialiasing)
        for number in range(document.numPages()):
            page = document.page(number)
            image = page.renderToImage(100, 100)
            pixmap = QtGui.QPixmap.fromImage(image)
            container = QtGui.QLabel()
            container.setFixedSize(page.pageSize())
            container.setStyleSheet("Page { background-color : white}")
            container.setContentsMargins(0, 0, 0, 0)
            container.setScaledContents(True)
            container.setPixmap(pixmap)
            label = scene.addWidget(container)
            layout.addItem(label)

        graphicsWidget = QtGui.QGraphicsWidget()
        graphicsWidget.setLayout(layout)
        scene.addItem(graphicsWidget)
        self.view = View(scene)
        self.view.show()


class View(QtGui.QGraphicsView):

    def __init__(self, parent = None):
        QtGui.QGraphicsView.__init__(self, parent)

    def wheelEvent(self, event):

        if event.delta() &gt; 0:
            self.scale(1.1, 1.1)
        else:
            self.scale(0.9, 0.9)

if __name__ == "__main__":
        application = Application()
        sys.exit(application.exec_())
</snippet></ROW><ROW><id>10759569</id><snippet>data = "D\x08DA\x08AT\x08TA\x08A\n" #  DATA bigsection header from pydoc
pydoc.render_doc(module).replace(data, '')
</snippet></ROW><ROW><id>10759846</id><snippet>java -jar compiler.jar --js=in1.js --js=in2.js ... --js_output_file=out.js
</snippet></ROW><ROW><id>10759846</id><snippet>bash</snippet></ROW><ROW><id>10759846</id><snippet>python</snippet></ROW><ROW><id>10759846</id><snippet>wrapper.sh in1.js out1.js in2.js out2.js ...
</snippet></ROW><ROW><id>10759846</id><snippet>wrapper.sh</snippet></ROW><ROW><id>10759846</id><snippet>java -jar --js=xxx --js_output_file=yyy</snippet></ROW><ROW><id>10759846</id><snippet>main</snippet></ROW><ROW><id>10759846</id><snippet>CommandLineRunner</snippet></ROW><ROW><id>10759846</id><snippet>import com.google.javascript.jscomp.CommandLineRunner;
import java.security.Permission;
public class MyRunner {
    public static void main(String [] args) {
        // Necessary since the closure compiler calls System.exit(...).
        System.setSecurityManager(new NoExitSecurityManager());
        for (int i=0; i&lt;args.length; i+=2) {
            System.out.println("Compiling " + args[i] + " into " + args[i+1] + "...");
            try {
                CommandLineRunner.main(new String[] {
                    "--js=" + args[i],
                    "--js_output_file=" + args[i+1]
                });
            }
            catch (ExitException ee) {
                System.out.println("Finished with status: " + ee.getStatus());
            }
        }
    }

    private static class ExitException extends SecurityException {
        private int status;
        public ExitException(int status) { this.status = status; }
        public int getStatus() { return status; }
    }
    private static class NoExitSecurityManager extends SecurityManager {
        public void checkPermission(Permission p) { }
        public void checkPermission(Permission p, Object context) { }
        public void checkExit(int status) { throw new ExitException(status); }
    }
}
</snippet></ROW><ROW><id>10759846</id><snippet>javac -classpath compiler.jar MyRunner.java
</snippet></ROW><ROW><id>10759846</id><snippet>java -classpath .:compiler.jar MyRunner in1.js out1.js in2.js out2.js ...
</snippet></ROW><ROW><id>10759846</id><snippet>Compiling in1.js into out1.js...
Finished with status: 0
Compiling in2.js into out2.js...
Finished with status: 0
</snippet></ROW><ROW><id>10760049</id><snippet>for label, vals in zip(list1, list2):
    print label
    print '---'.join(vals)
</snippet></ROW><ROW><id>10760119</id><snippet>filetype plugin indent on
syntax on
au BufNewFile,BufRead *.py set tabstop=4 softtabstop=4 shiftwidth=4 expandtab smarttab autoindent
</snippet></ROW><ROW><id>10760229</id><snippet>sys.exit(-1)</snippet></ROW><ROW><id>10760229</id><snippet>An exception has occurred, use %tb to see the full traceback.

SystemExit: -1
</snippet></ROW><ROW><id>10760332</id><snippet>__new__</snippet></ROW><ROW><id>10760332</id><snippet>__init__</snippet></ROW><ROW><id>10760332</id><snippet>setUpClass</snippet></ROW><ROW><id>10760332</id><snippet>import unittest
import blognodes


class meta_Test_base62(type):
  testset = { 0: '0', 10: 'a', 61: 'Z', 62: '10', 3844: '100'}

  @classmethod
  def __prepare__(mcls, name, bases):
    d = dict()
    d['testme'] = 5
    for b10, b62 in mcls.testset.items():
      fname = "test_base62_value_{}".format(b10)
      d[fname] = mcls.build_test_base62_values(b10, b62)
      fname = "test_int_value_{}".format(b10)
      d[fname] = mcls.build_test_int_values(b10, b62)
    return d

  @classmethod
  def build_test_base62_values(cls, b10, b62):
    def f(self):
      target = blognodes.base62(b10)
      self.assertEqual(target.str(), b62)
    return f

  @classmethod
  def build_test_int_values(cls, b10, b62):
    def f(self): 
      target = blognodes.base62(b10)
      self.assertEqual(target.int(), b10)
    return f




class Test_base62(unittest.TestCase, metaclass=meta_Test_base62):

  def test_nothing(self):
    self.assertEqual(5, self.testme)
</snippet></ROW><ROW><id>10760530</id><snippet>b.main</snippet></ROW><ROW><id>10760530</id><snippet>argv</snippet></ROW><ROW><id>10760530</id><snippet>argv</snippet></ROW><ROW><id>10760530</id><snippet>parse_args</snippet></ROW><ROW><id>10760530</id><snippet>a</snippet></ROW><ROW><id>10760530</id><snippet>b.main(["-r"])
</snippet></ROW><ROW><id>10760793</id><snippet>setuptools-git</snippet></ROW><ROW><id>10760793</id><snippet>.gitignore</snippet></ROW><ROW><id>10760793</id><snippet>setup.py</snippet></ROW><ROW><id>10760793</id><snippet>setup_requires</snippet></ROW><ROW><id>10760793</id><snippet>setup(...
    setup_requires=['setuptools-git'],
    ...
)
</snippet></ROW><ROW><id>10760899</id><snippet>d.setdefault</snippet></ROW><ROW><id>10760899</id><snippet>&gt;&gt;&gt; d = UTF8Dict()
&gt;&gt;&gt; d.setdefault(u'x', u'y')
</snippet></ROW><ROW><id>10760899</id><snippet>d.update</snippet></ROW><ROW><id>10760899</id><snippet>&gt;&gt;&gt; d = UTF8Dict()
&gt;&gt;&gt; d.update({u'x': u'y'})
</snippet></ROW><ROW><id>10760899</id><snippet>&gt;&gt;&gt; d = UTF8Dict(x=[])
&gt;&gt;&gt; d['x'].append(u'x')
</snippet></ROW><ROW><id>10761002</id><snippet>int(line[clolumn1], 16) == 0x04413053
</snippet></ROW><ROW><id>10761077</id><snippet>property()</snippet></ROW><ROW><id>10761077</id><snippet>class A(object):
    ...
</snippet></ROW><ROW><id>10761540</id><snippet>cat</snippet></ROW><ROW><id>10761540</id><snippet>%alias</snippet></ROW><ROW><id>10761545</id><snippet>import matplotlib.pyplot as plt
from matplotlib  import cm
import numpy as np

fig = plt.figure(figsize=(6,6))
ax = fig.add_subplot(111)
ax.set_title("X vs Y AVG",fontsize=14)
ax.set_xlabel("XAVG",fontsize=12)
ax.set_ylabel("YAVG",fontsize=12)
ax.grid(True,linestyle='-',color='0.75')
x = np.random.random(30)
y = np.random.random(30)
z = np.random.random(30)

# scatter with colormap mapping to z value
ax.scatter(x,y,s=20,c=z, marker = 'o', cmap = cm.jet );

plt.show()
</snippet></ROW><ROW><id>10761619</id><snippet>imaplib</snippet></ROW><ROW><id>10761619</id><snippet>import getpass, imaplib

M = imaplib.IMAP4()
M.login(getpass.getuser(), getpass.getpass())
M.select()
typ, data = M.search(None, 'ALL')
for num in data[0].split():
    typ, data = M.fetch(num, '(RFC822)')
    print 'Message %s\n%s\n' % (num, data[0][1])
M.close()
M.logout()
</snippet></ROW><ROW><id>10761619</id><snippet>'ALL'</snippet></ROW><ROW><id>10761619</id><snippet>(since "24-May-2012")</snippet></ROW><ROW><id>10761770</id><snippet>timeit</snippet></ROW><ROW><id>10761770</id><snippet>python -m timeit -s "functions = [lambda x: x+y for y in range(1000)]" -s "values = list(range(1000))" "[f(x) for f,x in zip(functions, values)]"
1000 loops, best of 3: 207 usec per loop

python -m timeit -s "functions = [lambda x: x+y for y in range(1000)]" -s "values = list(range(1000))" "list(map(lambda f,x: f(x), functions, values))"
1000 loops, best of 3: 315 usec per loop
</snippet></ROW><ROW><id>10761770</id><snippet>python -m timeit -s "functions = [lambda x: x+y for y in range(1000)]" -s "values = list(range(1000))" "list(f(x) for f,x in zip(functions, values))"
1000 loops, best of 3: 250 usec per loop
</snippet></ROW><ROW><id>10761770</id><snippet>python2 -m timeit -s "functions = [lambda x: x+y for y in range(1000)]" -s "values = list(range(1000))" "map(lambda f,x: f(x), functions, values)"  
1000 loops, best of 3: 234 usec per loop
</snippet></ROW><ROW><id>10761899</id><snippet>myDict = {'value': 1}
</snippet></ROW><ROW><id>10761899</id><snippet>myDict['value']
</snippet></ROW><ROW><id>10761899</id><snippet>1</snippet></ROW><ROW><id>10761899</id><snippet>myDict.value</snippet></ROW><ROW><id>10761899</id><snippet>class DictAsMember(dict):
    def __getattr__(self, name):
        value = self[name]
        if isinstance(value, dict):
            value = DictAsMember(value)
        return value

my_dict = DictAsMember()
my_dict['property'] = {'sub_property': 1}

print(my_dict.property.sub_property) # 1 will be printed
</snippet></ROW><ROW><id>10762022</id><snippet>class A(object):
    def blah(self):
        print("Hello World!")

    def blah(self):
        print("I give up!")
</snippet></ROW><ROW><id>10762022</id><snippet>E: 5:A.blah: method already defined line 2 
</snippet></ROW><ROW><id>10762062</id><snippet>import glob, os
import Image

basedir = "C:\Users\User\Desktop\\fimg\images\\"
prefix  = "picture"

def convert_png(base):
    njpg = Image.open(basedir + '%s.jpg' % base)
    njpg.save(basedir + '%s.png' % base)
    print "CONVERTED: " + base + '.png'

for i, f in enumerate(os.listdir(basedir), 1):
    base, ext = os.path.splitext(f)
    if ext == '.jpg': # found jpg file
        convert_png(base)
</snippet></ROW><ROW><id>10762062</id><snippet>for</snippet></ROW><ROW><id>10762062</id><snippet>convert_png</snippet></ROW><ROW><id>10762062</id><snippet>convert_png</snippet></ROW><ROW><id>10762062</id><snippet>.jpg</snippet></ROW><ROW><id>10762062</id><snippet>splitext</snippet></ROW><ROW><id>10762129</id><snippet>'|'</snippet></ROW><ROW><id>10762129</id><snippet>quotechar</snippet></ROW><ROW><id>10762129</id><snippet>ValueError</snippet></ROW><ROW><id>10762129</id><snippet>float("6.18")</snippet></ROW><ROW><id>10762129</id><snippet>float('"6.18"')</snippet></ROW><ROW><id>10762263</id><snippet>str.count()</snippet></ROW><ROW><id>10762263</id><snippet>str.find()</snippet></ROW><ROW><id>10762263</id><snippet>-1</snippet></ROW><ROW><id>10762263</id><snippet>&gt;&gt;&gt; 'assesses'.find('sses', 0)    # first look at the start of the string
1
&gt;&gt;&gt; 'assesses'.find('sses', 2)    # now look at previous index + 1
4
&gt;&gt;&gt; 'assesses'.find('sses', 5)    # now look at previous index + 1
-1
</snippet></ROW><ROW><id>10762263</id><snippet>-1</snippet></ROW><ROW><id>10762263</id><snippet>'sses'</snippet></ROW><ROW><id>10762263</id><snippet>'assesses'</snippet></ROW><ROW><id>10762263</id><snippet>split()</snippet></ROW><ROW><id>10762263</id><snippet>'+'</snippet></ROW><ROW><id>10762263</id><snippet>int()</snippet></ROW><ROW><id>10762281</id><snippet>self.is_same()</snippet></ROW><ROW><id>10762281</id><snippet>this.method()</snippet></ROW><ROW><id>10762558</id><snippet>lat, lon = g.lat_lon(ip_address)
</snippet></ROW><ROW><id>10762558</id><snippet>lat</snippet></ROW><ROW><id>10762558</id><snippet>lon</snippet></ROW><ROW><id>10762558</id><snippet>(32.0434235, 43.532522)</snippet></ROW><ROW><id>10762558</id><snippet>g.lat_lon()</snippet></ROW><ROW><id>10762558</id><snippet>new_story = story_form.save(ip_address=request.META['REMOTE_ADDR'])
</snippet></ROW><ROW><id>10762558</id><snippet>request.META['REMOTE_ADDR']</snippet></ROW><ROW><id>10762558</id><snippet>"127.0.0.1"</snippet></ROW><ROW><id>10762558</id><snippet>g.lat_lon()</snippet></ROW><ROW><id>10762558</id><snippet>from django.conf import settings

def submit_story(request):
    remote_addr = request.META['REMOTE_ADDR']
    if settings.DEBUG:
        # We are in debug mode, so we set it to a dummy value.
        remote_addr = 'google.com'

    if request.method =="POST":
        story_form = StoryForm(request.POST, request.FILES)
        if story_form.is_valid():
            new_story = story_form.save(ip_address=remote_addr)
</snippet></ROW><ROW><id>10762648</id><snippet>from StringIO import StringIO
buff = StringIO()
plt.savefig(buff)
buff.seek(0)
from kivy.core.image.img_pygame import ImageLoaderPygame
imgdata = ImageLoaderPygame(buff)._data
</snippet></ROW><ROW><id>10762735</id><snippet>createDictionary()</snippet></ROW><ROW><id>10762735</id><snippet>#!/usr/bin/python

import time

def createDictionary():
    startTime = time.clock()
    dict = {'Dog': 'der Hund', 'Cat': 'die Katze', 'Bird': 'der Vogel'}
    dict[ 'Spider' ] = 'die Spinne'
    key = 'blabla'
    if key in dict:
        print dict[key]
    else:
        print "not vaild"
    endTime = time.clock()
    print "Time taken for programe (in seconds): ", endTime - startTime

createDictionary()
</snippet></ROW><ROW><id>10762735</id><snippet>not vaild
Time taken for programe (in seconds):  6.6e-05
</snippet></ROW><ROW><id>10762912</id><snippet>from ctypes import *
x = windll.LoadLibrary("x.dll")
iProgSize = c_int(0)
szProgSize = create_string_buffer(50)
pszProgSize = c_char_p(addressof(szProgSize))
getAdmSize = x.GetAdmSize
getAdmSize.argtypes = [POINTER(c_int), POINTER(c_char_p), c_int]
status = getAdmSize(byref(iProgSize), byref(pszProgSize), 49)
</snippet></ROW><ROW><id>10762912</id><snippet>typedef int X_ERROR;
typedef int INT;
typedef char CHAR;

#include &lt;string.h&gt;

__declspec(dllexport) X_ERROR __stdcall GetAdmSize(INT* piAdmSize, CHAR** chBuf, INT iBufSize)
{
    *piAdmSize = 5;
    strcpy_s(*chBuf,iBufSize,"abcd");
    return 1;
}
</snippet></ROW><ROW><id>10762912</id><snippet>&gt;&gt;&gt; x.iProgSize
c_long(5)
&gt;&gt;&gt; x.pszProgSize
c_char_p('abcd')
&gt;&gt;&gt; x.szProgSize.value
'abcd'
</snippet></ROW><ROW><id>10762928</id><snippet>conn = MySQLdb.connect(host='localhost')
r = conn.cursor()
r.execute('INSERT INTO users (hash) VALUES (%s)', m.digest())
conn.commit()
</snippet></ROW><ROW><id>10762928</id><snippet>m.digest()</snippet></ROW><ROW><id>10762928</id><snippet>str</snippet></ROW><ROW><id>10763087</id><snippet>int</snippet></ROW><ROW><id>10763087</id><snippet>int</snippet></ROW><ROW><id>10763087</id><snippet>class Communicate(QObject):
    speak = Signal(object)
</snippet></ROW><ROW><id>10763087</id><snippet>int</snippet></ROW><ROW><id>10763087</id><snippet>QtGui.QSpinBox.setMaximum</snippet></ROW><ROW><id>10763161</id><snippet>using System.Speech
using System.Speech.Recognition
using System.Speech.AudioFormat

SpeechRecognitionEngine sre = new SpeechRecognitionEngine();

string[] words = {"L H C", "CERN"};
Choices choices = new Choices(words);
GrammarBuilder gb = new GrammarBuilder(choices);
Grammar grammar = new Grammar(gb);
sre.LoadGrammar(grammar);
</snippet></ROW><ROW><id>10763260</id><snippet>.group(0)</snippet></ROW><ROW><id>10763260</id><snippet>.group(1)</snippet></ROW><ROW><id>10763260</id><snippet>email = re.search("Reason: 550 (.*?)... No such user", demo_text).group(1)
</snippet></ROW><ROW><id>10763270</id><snippet>class Foo(object):
    __metaclass__ = FooMeta
    FOO = 123
    def a(self):
        pass
</snippet></ROW><ROW><id>10763270</id><snippet>d = {}
d['__metaclass__'] = FooMeta
d['FOO'] = 123
def a(self):
    pass
d['a'] = a
Foo = d.get('__metaclass__', type)('Foo', (object,), d)
</snippet></ROW><ROW><id>10763270</id><snippet>__setattr__</snippet></ROW><ROW><id>10763270</id><snippet>dict</snippet></ROW><ROW><id>10763270</id><snippet>__prepare__</snippet></ROW><ROW><id>10763270</id><snippet>__prepare__</snippet></ROW><ROW><id>10763270</id><snippet>from collections import MutableMapping


class SingleAssignDict(MutableMapping):
    def __init__(self, *args, **kwargs):
        self._d = dict(*args, **kwargs)

    def __getitem__(self, key):
        return self._d[key]

    def __setitem__(self, key, value):
        if key in self._d:
            raise ValueError(
                'Key {!r} already exists in SingleAssignDict'.format(key)
            )
        else:
            self._d[key] = value

    def __delitem__(self, key):
        del self._d[key]

    def __iter__(self):
        return iter(self._d)

    def __len__(self):
        return len(self._d)

    def __contains__(self, key):
        return key in self._d

    def __repr__(self):
        return '{}({!r})'.format(type(self).__name__, self._d)


class RedefBlocker(type):
    @classmethod
    def __prepare__(metacls, name, bases, **kwargs):
        return SingleAssignDict()

    def __new__(metacls, name, bases, sad):
        return super().__new__(metacls, name, bases, dict(sad))


class Okay(metaclass=RedefBlocker):
    a = 1
    b = 2


class Boom(metaclass=RedefBlocker):
    a = 1
    b = 2
    a = 3
</snippet></ROW><ROW><id>10763270</id><snippet>Traceback (most recent call last):
  File "/tmp/redef.py", line 50, in &lt;module&gt;
    class Boom(metaclass=RedefBlocker):
  File "/tmp/redef.py", line 53, in Boom
    a = 3
  File "/tmp/redef.py", line 15, in __setitem__
    'Key {!r} already exists in SingleAssignDict'.format(key)
ValueError: Key 'a' already exists in SingleAssignDict
</snippet></ROW><ROW><id>10763270</id><snippet>__prepare__</snippet></ROW><ROW><id>10763270</id><snippet>classmethod</snippet></ROW><ROW><id>10763270</id><snippet>staticmethod</snippet></ROW><ROW><id>10763270</id><snippet>type</snippet></ROW><ROW><id>10763270</id><snippet>dict</snippet></ROW><ROW><id>10763270</id><snippet>__new__</snippet></ROW><ROW><id>10763270</id><snippet>SingleAssignDict</snippet></ROW><ROW><id>10763270</id><snippet>dict</snippet></ROW><ROW><id>10763270</id><snippet>update</snippet></ROW><ROW><id>10763270</id><snippet>__setitem__</snippet></ROW><ROW><id>10763270</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>10763270</id><snippet>Okay.__dict__</snippet></ROW><ROW><id>10763270</id><snippet>type</snippet></ROW><ROW><id>10763270</id><snippet>type</snippet></ROW><ROW><id>10763270</id><snippet>__dict__</snippet></ROW><ROW><id>10763270</id><snippet>__new__</snippet></ROW><ROW><id>10763270</id><snippet>__prepare__</snippet></ROW><ROW><id>10763270</id><snippet>__metaclass__</snippet></ROW><ROW><id>10763270</id><snippet>class Foo(object):
    __metaclass__ = FooMeta
    FOO = 123
    def a(self):
        pass
</snippet></ROW><ROW><id>10763270</id><snippet>d = {}
d['__metaclass__'] = FooMeta
d['FOO'] = 123
def a(self):
    pass
d['a'] = a
Foo = d.get('__metaclass__', type)('Foo', (object,), d)
</snippet></ROW><ROW><id>10763270</id><snippet>class Foo(metaclass=FooMeta):
    FOO = 123
    def a(self):
        pass
</snippet></ROW><ROW><id>10763270</id><snippet>d = FooMeta.__prepare__('Foo', ())
d['Foo'] = 123
def a(self):
    pass
d['a'] = a
Foo = FooMeta('Foo', (), d)
</snippet></ROW><ROW><id>10763328</id><snippet>serve_forever</snippet></ROW><ROW><id>10763328</id><snippet>SocketServer.py</snippet></ROW><ROW><id>10763461</id><snippet>virtualenv</snippet></ROW><ROW><id>10763461</id><snippet>virtualenv -p /usr/bin/python3 py3env
source py3env/bin/activate
pip install package-name
</snippet></ROW><ROW><id>10763546</id><snippet>next_int</snippet></ROW><ROW><id>10763546</id><snippet>next_float</snippet></ROW><ROW><id>10763546</id><snippet>bytearray</snippet></ROW><ROW><id>10763546</id><snippet>struct</snippet></ROW><ROW><id>10763546</id><snippet>unpack_from</snippet></ROW><ROW><id>10763546</id><snippet>bytearray</snippet></ROW><ROW><id>10763546</id><snippet>def next_int(self):
    self.recv_buf_i += 4
    return struct.unpack_from("i", self.recv_buf, self.recv_buf_i-4)[0]
</snippet></ROW><ROW><id>10763546</id><snippet>struct</snippet></ROW><ROW><id>10763546</id><snippet>def next_chunk(self, fmt): # fmt can be a group such as "iifff" 
    sz = struct.calcsize(fmt) 
    self.recv_buf_i += sz
    return struct.unpack_from(fmt, self.recv_buf, self.recv_buf_i-sz)
</snippet></ROW><ROW><id>10763546</id><snippet>fmt</snippet></ROW><ROW><id>10763546</id><snippet>struct.calcsize(fmt)</snippet></ROW><ROW><id>10763546</id><snippet>4 * len(fmt)</snippet></ROW><ROW><id>10763546</id><snippet>def next_chunk(self, fmt): 
    sz = struct.calcsize(fmt) 
    chunk = struct.unpack_from(fmt, self.recv_buf, self.recv_buf_i)
    self.recv_buf_i += sz
    return chunk
</snippet></ROW><ROW><id>10763857</id><snippet>==</snippet></ROW><ROW><id>10763857</id><snippet>=</snippet></ROW><ROW><id>10763857</id><snippet>==</snippet></ROW><ROW><id>10763857</id><snippet>=</snippet></ROW><ROW><id>10763857</id><snippet>for letter in message:
      if letter == pattern[0]: 
        letter = pattern[1] ## &lt;-- change
      elif letter == pattern[1]:
        letter = pattern[0] ## &lt;-- change
      elif letter == pattern[2]:  
        letter = pattern[3] ## &lt;-- change
      else:
        continue
</snippet></ROW><ROW><id>10763857</id><snippet>letter</snippet></ROW><ROW><id>10763857</id><snippet>message</snippet></ROW><ROW><id>10764020</id><snippet>and</snippet></ROW><ROW><id>10764020</id><snippet>&amp;</snippet></ROW><ROW><id>10764020</id><snippet>while (v % d != 0) and (u % d != 0): 
</snippet></ROW><ROW><id>10764020</id><snippet>while (v % d) and (u % d): 
</snippet></ROW><ROW><id>10764020</id><snippet>&amp;</snippet></ROW><ROW><id>10764020</id><snippet>and</snippet></ROW><ROW><id>10764020</id><snippet>or</snippet></ROW><ROW><id>10764020</id><snippet>and</snippet></ROW><ROW><id>10764041</id><snippet>QApplication::processEvents()</snippet></ROW><ROW><id>10764041</id><snippet>QApplication::processEvents()</snippet></ROW><ROW><id>10764041</id><snippet>QThread</snippet></ROW><ROW><id>10764439</id><snippet>sudo apt-get install python-sqlalchemy # or python3-sqlalchemy
</snippet></ROW><ROW><id>10764439</id><snippet>sudo easy_install</snippet></ROW><ROW><id>10764439</id><snippet>/usr/local/lib/pythonX.X/</snippet></ROW><ROW><id>10764439</id><snippet>easy_install</snippet></ROW><ROW><id>10764439</id><snippet>pip</snippet></ROW><ROW><id>10764439</id><snippet>--user</snippet></ROW><ROW><id>10764439</id><snippet>~/.local/lib/pythonX.X</snippet></ROW><ROW><id>10764517</id><snippet>u'blah'</snippet></ROW><ROW><id>10764517</id><snippet>unicode</snippet></ROW><ROW><id>10764517</id><snippet>str</snippet></ROW><ROW><id>10764517</id><snippet>u</snippet></ROW><ROW><id>10764517</id><snippet>ś</snippet></ROW><ROW><id>10764720</id><snippet>python -m jcc.__main__ --find-jvm-dll</snippet></ROW><ROW><id>10764997</id><snippet>#!/usr/bin/env python
from __future__ import division
import numpy as np
from matplotlib import pyplot as plt

# Sample data with two peaks: small one at t=0.4, large one at t=0.8
ts = np.arange(0, 1, 0.01)
xs = np.exp(-((ts-0.4)/0.1)**2) + 2*np.exp(-((ts-0.8)/0.1)**2)

# Say we have an approximate starting point of 0.35
start_point = 0.35

# Nearest index in "ts" to this starting point is...
start_index = np.argmin(np.abs(ts - start_point))

# Find the local maxima in our data by looking for a sign change in
# the first difference
# From http://stackoverflow.com/a/9667121/188535
maxes = (np.diff(np.sign(np.diff(xs))) &lt; 0).nonzero()[0] + 1

# Find which of these peaks is closest to our starting point
index_of_peak = maxes[np.argmin(np.abs(maxes - start_index))]

print "Peak centre at: %.3f" % ts[index_of_peak]

# Quick plot showing the results: blue line is data, green dot is
# starting point, red dot is peak location
plt.plot(ts, xs, '-b')
plt.plot(ts[start_index], xs[start_index], 'og')
plt.plot(ts[index_of_peak], xs[index_of_peak], 'or')
plt.show()
</snippet></ROW><ROW><id>10764997</id><snippet># FWHM...
half_max = xs[index_of_peak]/2

# This finds where in the data we cross over the halfway point to our peak. Note
# that this is global, so we need an extra step to refine these results to find
# the closest crossovers to our peak.

# Same sign-change-in-first-diff technique as above
hm_left_indices = (np.diff(np.sign(np.diff(np.abs(xs[:index_of_peak] - half_max)))) &gt; 0).nonzero()[0] + 1
# Add "index_of_peak" to result because we cut off the left side of the data!
hm_right_indices = (np.diff(np.sign(np.diff(np.abs(xs[index_of_peak:] - half_max)))) &gt; 0).nonzero()[0] + 1 + index_of_peak

# Find closest half-max index to peak
hm_left_index = hm_left_indices[np.argmin(np.abs(hm_left_indices - index_of_peak))]
hm_right_index = hm_right_indices[np.argmin(np.abs(hm_right_indices - index_of_peak))]

# And the width is...    
fwhm = ts[hm_right_index] - ts[hm_left_index]

print "Width: %.3f" % fwhm

# Plot to illustrate FWHM: blue line is data, red circle is peak, red line
# shows FWHM
plt.plot(ts, xs, '-b')
plt.plot(ts[index_of_peak], xs[index_of_peak], 'or')
plt.plot(
    [ts[hm_left_index], ts[hm_right_index]],
    [xs[hm_left_index], xs[hm_right_index]], '-r')
plt.show()
</snippet></ROW><ROW><id>10765063</id><snippet>elif lines[row][col] == "0":</snippet></ROW><ROW><id>10765063</id><snippet>print outputs</snippet></ROW><ROW><id>10765387</id><snippet>def any(name, alternates):
    "Return a named group pattern matching list of alternates."
    return "(?P&lt;%s&gt;" % name + "|".join(alternates) + ")"

def make_pat():
    kw = r"\b" + any("KEYWORD", keyword.kwlist) + r"\b"
    builtinlist = [str(name) for name in dir(__builtin__)
                                        if not name.startswith('_')]
    # self.file = file("file") :
    # 1st 'file' colorized normal, 2nd as builtin, 3rd as string
    builtin = r"([^.'\"\\#]\b|^)" + any("BUILTIN", builtinlist) + r"\b"
    comment = any("COMMENT", [r"#[^\n]*"])
    sqstring = r"(\b[rRuU])?'[^'\\\n]*(\\.[^'\\\n]*)*'?"
    dqstring = r'(\b[rRuU])?"[^"\\\n]*(\\.[^"\\\n]*)*"?'
    sq3string = r"(\b[rRuU])?'''[^'\\]*((\\.|'(?!''))[^'\\]*)*(''')?"
    dq3string = r'(\b[rRuU])?"""[^"\\]*((\\.|"(?!""))[^"\\]*)*(""")?'
    string = any("STRING", [sq3string, dq3string, sqstring, dqstring])
    return kw + "|" + builtin + "|" + comment + "|" + string +\
           "|" + any("SYNC", [r"\n"])
</snippet></ROW><ROW><id>10765387</id><snippet>kw</snippet></ROW><ROW><id>10765387</id><snippet>builtin</snippet></ROW><ROW><id>10765387</id><snippet>__builtin__</snippet></ROW><ROW><id>10765387</id><snippet>print</snippet></ROW><ROW><id>10765387</id><snippet>print</snippet></ROW><ROW><id>10765387</id><snippet>kw</snippet></ROW><ROW><id>10765387</id><snippet>builtin</snippet></ROW><ROW><id>10765387</id><snippet>print</snippet></ROW><ROW><id>10765387</id><snippet>builtin</snippet></ROW><ROW><id>10765461</id><snippet>libreadline-dev</snippet></ROW><ROW><id>10765497</id><snippet>#include "fib.h"

namespace test
{
    int fib1(int n)
    {
        if (n &lt;= 0) {
            return 0;
        } else if (n &lt;= 2) {
            return 1;
        } else {
            return fib1(n-1) + fib1(n-2);
        }
    }
}
</snippet></ROW><ROW><id>10765497</id><snippet>namespace test
{
    int fib1(int n);
}
</snippet></ROW><ROW><id>10765497</id><snippet>%Module fib

namespace test {
    %TypeHeaderCode
    #include "fib.h"
    %End

    int fib1(int n);
};
</snippet></ROW><ROW><id>10765729</id><snippet>&gt;&gt;&gt; import numpy as NP

&gt;&gt;&gt; v = NP.r_[.2, 1:10, 60.8]

&gt;&gt;&gt; print(v)
     [  0.2   1.    2.    3.    4.    5.    6.    7.    8.    9.   60.8]
</snippet></ROW><ROW><id>10765729</id><snippet>&gt;&gt;&gt; NP.c_[.2, 1:10, 60.8]
</snippet></ROW><ROW><id>10765729</id><snippet>&gt;&gt;&gt; v = NP.r_[.2, 1:25:7, 60.8]

&gt;&gt;&gt; v
  array([  0.2,   1. ,   8. ,  15. ,  22. ,  60.8])
</snippet></ROW><ROW><id>10765729</id><snippet>&gt;&gt;&gt; v = NP.r_[.2, 1:25:7j, 60.8]

&gt;&gt;&gt; v
  array([  0.2,   1. ,   5. ,   9. ,  13. ,  17. ,  21. ,  25. ,  60.8])
</snippet></ROW><ROW><id>10765729</id><snippet>&gt;&gt;&gt; v = NP.r_[.2, 1:25:7, 60.8]

&gt;&gt;&gt; v
  array([  0.2,   1. ,   8. ,  15. ,  22. ,  60.8])
</snippet></ROW><ROW><id>10765733</id><snippet>+</snippet></ROW><ROW><id>10765733</id><snippet>collections</snippet></ROW><ROW><id>10765733</id><snippet>from urllib import urlencode, quote
from collections import OrderedDict

initial_url = "http://www.stackoverflow.com"
search = "Generate+value"
query_string = urlencode(OrderedDict(data=initial_url,search=search))
</snippet></ROW><ROW><id>10765733</id><snippet>collections</snippet></ROW><ROW><id>10765733</id><snippet>encoded = "&amp;".join( "%s=%s" % (key, quote(parameters[key], safe="+")) 
    for key in ordered(parameters.keys()))
</snippet></ROW><ROW><id>10765733</id><snippet>safe</snippet></ROW><ROW><id>10765733</id><snippet>quote</snippet></ROW><ROW><id>10765733</id><snippet>+</snippet></ROW><ROW><id>10765733</id><snippet>Generate+value</snippet></ROW><ROW><id>10765733</id><snippet>Generate value</snippet></ROW><ROW><id>10765733</id><snippet>+</snippet></ROW><ROW><id>10765733</id><snippet>%2B</snippet></ROW><ROW><id>10765733</id><snippet>%</snippet></ROW><ROW><id>10765935</id><snippet>ModelForm</snippet></ROW><ROW><id>10765935</id><snippet>self.fields['foo'] = forms.CharField()</snippet></ROW><ROW><id>10765935</id><snippet>model_to_dict</snippet></ROW><ROW><id>10765935</id><snippet>from django.forms.models import model_to_dict

order = Order.objects.get(pk=1)
dictionary = model_to_dict(order)
form = OrderEditForm(dictionary)
</snippet></ROW><ROW><id>10765960</id><snippet>#init pymongo dor dbfer quering as uwsgi fails miserably
connection = Connection()
db = connection.mobuy_test
company_collection = db.company
campaign_collection = db.campaign
for obj in Campaign.objects.all(): #the mongoengine queryset loop
    theId = campaign_collection.find_one({'_id':obj.id})['company'].id
    companyName = company_collection.find_one({'_id':theId})['name']
    dict_model = {
                  'campaign_name': obj.name,
                  'campaign_company':companyName
                   ...
                  }
</snippet></ROW><ROW><id>10766053</id><snippet>super(type(self), self)</snippet></ROW><ROW><id>10766497</id><snippet>original = original * 1
</snippet></ROW><ROW><id>10766526</id><snippet>os.path.join()</snippet></ROW><ROW><id>10766546</id><snippet>db.commit()
</snippet></ROW><ROW><id>10766547</id><snippet>set</snippet></ROW><ROW><id>10766547</id><snippet>unique_words</snippet></ROW><ROW><id>10766547</id><snippet>if</snippet></ROW><ROW><id>10766712</id><snippet>import sys

a = ["abcdef", "ghijklmnop"]
sys.getsizeof(a)    # =&gt; 44 (size of list a in bytes)
</snippet></ROW><ROW><id>10766712</id><snippet>import sys
import datetime

def show_mem(data, indent="    ", depth=0):
    "Recursively show the memory usage of a data structure"
    mysize = sys.getsizeof(data)
    if isinstance(data, (list,tuple,dict)):
        childsize = 0
        print("{}{} bytes: [".format(indent*depth, mysize))
        for d in data:
            childsize += show_mem(d, indent, depth+1)
        print("{}]  (total: {} bytes)".format(indent*depth, mysize+childsize))
        return mysize+childsize
    else:
        print("{}{} bytes: {}".format(indent*depth, mysize, repr(data)))
        return mysize

show_mem([1223456, 1245361536363, 'infooooooooo123', datetime.date(1975,7,21), "http://www.somesite.org/the/path/page.htm"])
</snippet></ROW><ROW><id>10766712</id><snippet>56 bytes: [
    12 bytes: 1223456
    18 bytes: 1245361536363L
    36 bytes: 'infooooooooo123'
    20 bytes: datetime.date(1975, 7, 21)
    62 bytes: 'http://www.somesite.org/the/path/page.htm'
]  (total: 204 bytes)
</snippet></ROW><ROW><id>10766712</id><snippet>diff -b saved_one_record.html saved_two_records.html
</snippet></ROW><ROW><id>10766712</id><snippet>61a66
&gt;&lt;tr class="rowA"&gt;
    &lt;td class="_1"&gt;&lt;a href="#row=1223456" alt="Show details"&gt;1223456&lt;/a&gt;&lt;/td&gt;
    &lt;td class="_2"&gt;&lt;span style=""&gt;1245361536363&lt;/span&gt;&lt;/td&gt;
    &lt;td class="_3"&gt;&lt;a href="http://www.somesite.org/the/path/page.htm"&gt;&lt;b&gt;infooooooooo123&lt;/b&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;td class="_4"&gt;July 21 1975&lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>10766965</id><snippet>&lt;span class="on"&gt;)(\d+)&lt;/span&gt;</snippet></ROW><ROW><id>10766965</id><snippet>&lt;span class="on"&gt;(.*?)&lt;/span&gt;
</snippet></ROW><ROW><id>10767035</id><snippet>class</snippet></ROW><ROW><id>10767035</id><snippet>'__builtin__'</snippet></ROW><ROW><id>10767035</id><snippet>class foo:
    baz = 51
    def __init__(self):
        self.bar = 42
</snippet></ROW><ROW><id>10767035</id><snippet>&gt;&gt;&gt; vars(foo)
{'__doc__': None,
 '__init__': &lt;function __init__ at 0x02A35B70&gt;,
 '__module__': '__main__',
 'baz': 51}
&gt;&gt;&gt; {k:v for k,v in vars(foo).items() if k[:2]!="__" and k[-2:]!="__"}
{'baz': 51}
&gt;&gt;&gt; obj = foo()
&gt;&gt;&gt; vars(obj)
{'bar': 42}
</snippet></ROW><ROW><id>10767108</id><snippet>sort()</snippet></ROW><ROW><id>10767108</id><snippet># Read all except the first (header) lines
lines = file('1.txt').readlines()[1:]
lines += file('2.txt').readlines()[1:]

lines.sort(key=lambda x: int(x.split()[0]))

print ''.join(lines)
</snippet></ROW><ROW><id>10767108</id><snippet>def key(x):
    return int(x.split()[0])
</snippet></ROW><ROW><id>10767222</id><snippet>surf = cv2.SURF(1000)
kp1, desc1 = surf.detect(img1, None, False)
kp2, desc2 = surf.detect(img2, None, False)
desc1.shape = (-1, surf.descriptorSize())
desc2.shape = (-1, surf.descriptorSize())
</snippet></ROW><ROW><id>10767222</id><snippet>surf_det = cv2.FeatureDetector_create("SURF")
surf_ext = cv2.DescriptorExtractor_create("SURF")
kp1 = surf_det.detect(img1)
kp2 = surf_det.detect(img2)
kp1, desc1 = surf_ext.compute(img1, kp1)
kp2, desc2 = surf_ext.compute(img2, kp2)
</snippet></ROW><ROW><id>10767270</id><snippet>html = # your HTML source goes here
soup = BeautifulSoup(html)
x = soup.find('span', {'class' : 'on'})
print x.text
print x.string
print x.contents[0]
</snippet></ROW><ROW><id>10767457</id><snippet>from config import config</snippet></ROW><ROW><id>10767457</id><snippet>config</snippet></ROW><ROW><id>10767457</id><snippet>ConfigParser</snippet></ROW><ROW><id>10767961</id><snippet>re.match</snippet></ROW><ROW><id>10767961</id><snippet>^</snippet></ROW><ROW><id>10767961</id><snippet>text = """\
Mares eat oats
and does eat oats
"""

print re.findall('^(\w+)', text, re.MULTILINE) 
</snippet></ROW><ROW><id>10767961</id><snippet>['Mares', 'and']
</snippet></ROW><ROW><id>10767961</id><snippet>re.findall()</snippet></ROW><ROW><id>10767961</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>10767961</id><snippet>text = """\
Mares eat oats
and does eat oats
"""

pattern = r"""
(?P&lt;firstword&gt;^\w+)
|(?P&lt;lastword&gt;\w+$)
|(?P&lt;word&gt;\w+)
|(?P&lt;whitespace&gt;\s+)
|(?P&lt;other&gt;.)
"""

rx = re.compile(pattern, re.MULTILINE | re.VERBOSE)

def scan(text):
    pos = 0
    m = rx.match(text, pos)
    while m:
        toktype = m.lastgroup
        tokvalue = m.group(toktype)
        pos = m.end()
        yield toktype, tokvalue
        m = rx.match(text, pos)

for tok in scan(text):
    print tok
</snippet></ROW><ROW><id>10767961</id><snippet>('firstword', 'Mares')
('whitespace', ' ')
('word', 'eat')
('whitespace', ' ')
('lastword', 'oats')
('whitespace', '\n')
('firstword', 'and')
('whitespace', ' ')
('word', 'does')
('whitespace', ' ')
('word', 'eat')
('whitespace', ' ')
('lastword', 'oats')
('whitespace', '\n')
</snippet></ROW><ROW><id>10767972</id><snippet>__del__</snippet></ROW><ROW><id>10767972</id><snippet>with closing(...) as ...:</snippet></ROW><ROW><id>10767972</id><snippet>with</snippet></ROW><ROW><id>10768011</id><snippet>def rstring(s):
    i = len(s)-1
    t = ''
    while(i &gt; -1):
    t += s[i]
    i -= 1
    return t
</snippet></ROW><ROW><id>10768011</id><snippet>#include &lt;Python.h&gt;
int main()
{
    PyObject *strret, *mymod, *strfunc, *strargs;
    char *cstrret;
    Py_Initialize();
    PySys_SetPath("."); 
    mymod = PyImport_ImportModule("reverse");
    strfunc = PyObject_GetAttrString(mymod, "rstring");
    strargs = Py_BuildValue("(s)", "Hello World");
    strret = PyEval_CallObject(strfunc, strargs);
    PyArg_Parse(strret, "s", &amp;cstrret);
    printf("Reversed string: %s\n", cstrret);
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>10768105</id><snippet>np.fill_diagonal</snippet></ROW><ROW><id>10768105</id><snippet>&gt;&gt;&gt; np.fill_diagonal(matrix[:-1, 1:], upper)
&gt;&gt;&gt; np.fill_diagonal(matrix[1:, :-1], lower)
&gt;&gt;&gt; matrix
array([[ 2.,  1.,  0.,  0.],
       [ 7.,  2.,  1.,  0.],
       [ 0.,  7.,  2.,  1.],
       [ 0.,  0.,  7.,  2.]])
</snippet></ROW><ROW><id>10768248</id><snippet>soup = BeautifulSoup(""" &lt;div class="item"&gt; &lt;b&gt; name &lt;/b&gt;  &lt;br/&gt;  stuff here &lt;/div&gt;""")
soup.find("div", "item").find('br').nextSibling
</snippet></ROW><ROW><id>10768418</id><snippet>manage.py runserver</snippet></ROW><ROW><id>10768418</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>10768418</id><snippet>rpdb</snippet></ROW><ROW><id>10768418</id><snippet>rpdb</snippet></ROW><ROW><id>10768418</id><snippet>rpdb.set_trace()</snippet></ROW><ROW><id>10768418</id><snippet>pdb</snippet></ROW><ROW><id>10768418</id><snippet>stdin</snippet></ROW><ROW><id>10768418</id><snippet>stdout</snippet></ROW><ROW><id>10768682</id><snippet>$ python &lt;&lt; EOF
&gt; import sys
&gt; print sys.version
&gt; EOF
2.7.3 (default, Apr 13 2012, 20:16:59) 
[GCC 4.6.3 20120306 (Red Hat 4.6.3-2)]
</snippet></ROW><ROW><id>10768694</id><snippet>re.match</snippet></ROW><ROW><id>10768694</id><snippet>re.search</snippet></ROW><ROW><id>10768694</id><snippet>repr</snippet></ROW><ROW><id>10768694</id><snippet>obj.__class__.__name__</snippet></ROW><ROW><id>10768737</id><snippet>25/100</snippet></ROW><ROW><id>10768737</id><snippet>1</snippet></ROW><ROW><id>10768737</id><snippet>from __future__ import division</snippet></ROW><ROW><id>10768737</id><snippet>/</snippet></ROW><ROW><id>10768737</id><snippet>//</snippet></ROW><ROW><id>10768737</id><snippet>25.0/100</snippet></ROW><ROW><id>10768994</id><snippet>Project_name
&gt; src
  app.yaml
  &gt; package_folder1
    __init__.py
    package1_file.py
  &gt; package_folder2
    __init__.py
</snippet></ROW><ROW><id>10768994</id><snippet>script: package_folder1/package1_file1.py
</snippet></ROW><ROW><id>10769017</id><snippet>def assign_match(regex, string):
    match = re.match(regex, string)
    if match is None:
        raise StopIteration
    else:
        yield match.groups()

for a in assign_match('(abc)(def)', 'abcdef'):
    print(a)
</snippet></ROW><ROW><id>10769017</id><snippet>for string in lots_of_strings:
    for a in assign_match('(abc)(def)', string):
        do_my_work()
        continue # breaks out of this for loop instead of the parent
    other_work() # behavior i want to skip if the match is successful
</snippet></ROW><ROW><id>10769017</id><snippet>from contextlib import contextmanager
import re

@contextmanager
def assign_match(regex, string):
    match = re.match(regex, string)
    if match:
        yield match.groups()

for i in range(3):
    with assign_match('(abc)(def)', 'abcdef') as a:
#    for a in assign_match('(abc)(def)', 'abcdef'):
        print(a)
        continue
    print(i)
</snippet></ROW><ROW><id>10769059</id><snippet>raven==1.8.4
sentry==4.4.5
</snippet></ROW><ROW><id>10769059</id><snippet>raven==1.9.1
</snippet></ROW><ROW><id>10769059</id><snippet>pip uninstall raven
pip install raven==1.8.4
</snippet></ROW><ROW><id>10769134</id><snippet>for</snippet></ROW><ROW><id>10769134</id><snippet>for</snippet></ROW><ROW><id>10769134</id><snippet>print [data2['C'][i][0] for i in range(len(data2['C']))]
</snippet></ROW><ROW><id>10769134</id><snippet>[]</snippet></ROW><ROW><id>10769134</id><snippet>{}</snippet></ROW><ROW><id>10769134</id><snippet>()</snippet></ROW><ROW><id>10769134</id><snippet>for</snippet></ROW><ROW><id>10769134</id><snippet>print '\n'.join([str(data2['C'][i][0]) for i in range(len(data2['C']))])
</snippet></ROW><ROW><id>10769134</id><snippet>print '\n'.join(str(data2['C'][i][0]) for i in range(len(data2['C'])))
</snippet></ROW><ROW><id>10769168</id><snippet>virtualenv</snippet></ROW><ROW><id>10769168</id><snippet>virtualenv</snippet></ROW><ROW><id>10769168</id><snippet>fabric</snippet></ROW><ROW><id>10769208</id><snippet>http</snippet></ROW><ROW><id>10769264</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; resp = urllib.urlopen("http://docs.python.org/library/urllib.html")
&gt;&gt;&gt; if resp.getcode() == 200:
...     print "do my stuff"
...
do my stuff
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10769264</id><snippet>wikimedia</snippet></ROW><ROW><id>10769264</id><snippet>403</snippet></ROW><ROW><id>10769264</id><snippet>browser</snippet></ROW><ROW><id>10769264</id><snippet>User-Agent</snippet></ROW><ROW><id>10769264</id><snippet>User-Agent</snippet></ROW><ROW><id>10769264</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request('http://upload.wikimedia.org/wikipedia/en/4/44/Zindagi1976.jpg')
&gt;&gt;&gt; useragent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; it; rv:1.8.1.11) Gecko/20071127 Firefox/2.0.0.11'
&gt;&gt;&gt; req.add_header('User-Agent',useragent)
&gt;&gt;&gt; resp = urllib2.urlopen(req)
&gt;&gt;&gt; resp.getcode()
200
&gt;&gt;&gt; data  = resp.read()
&gt;&gt;&gt; with open("image.jpg","wb") as f:
...     f.write(data)
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>10769325</id><snippet>lst = [2, 1, 1, 1]
</snippet></ROW><ROW><id>10769325</id><snippet>sum(i**2 for i in lst)
</snippet></ROW><ROW><id>10769325</id><snippet>7
</snippet></ROW><ROW><id>10769325</id><snippet>sum([i**2 for i in lst])
</snippet></ROW><ROW><id>10769463</id><snippet>172X2</snippet></ROW><ROW><id>10769463</id><snippet>1\d2\D2</snippet></ROW><ROW><id>10769463</id><snippet>^a\w+z$</snippet></ROW><ROW><id>10769463</id><snippet>a4Q1z</snippet></ROW><ROW><id>10769463</id><snippet>^a\w+z$</snippet></ROW><ROW><id>10769463</id><snippet>a4z</snippet></ROW><ROW><id>10769463</id><snippet>*</snippet></ROW><ROW><id>10769463</id><snippet>+</snippet></ROW><ROW><id>10769463</id><snippet>+</snippet></ROW><ROW><id>10769463</id><snippet>*</snippet></ROW><ROW><id>10769463</id><snippet>[abc]</snippet></ROW><ROW><id>10769463</id><snippet>a</snippet></ROW><ROW><id>10769463</id><snippet>b</snippet></ROW><ROW><id>10769463</id><snippet>c</snippet></ROW><ROW><id>10769463</id><snippet>x{2,3}</snippet></ROW><ROW><id>10769463</id><snippet>x</snippet></ROW><ROW><id>10769463</id><snippet>+</snippet></ROW><ROW><id>10769463</id><snippet>xx</snippet></ROW><ROW><id>10769463</id><snippet>xxx</snippet></ROW><ROW><id>10769463</id><snippet>\1</snippet></ROW><ROW><id>10769463</id><snippet>(\d+)\1</snippet></ROW><ROW><id>10769463</id><snippet>2323</snippet></ROW><ROW><id>10769463</id><snippet>23</snippet></ROW><ROW><id>10769463</id><snippet>(\d+)</snippet></ROW><ROW><id>10769534</id><snippet>&gt;&gt;&gt; import webbrowser
&gt;&gt;&gt; url = 'http://www.python.org/'
&gt;&gt;&gt; webbrowser.open_new(url)
</snippet></ROW><ROW><id>10769559</id><snippet>from controller.FooController import *
</snippet></ROW><ROW><id>10769592</id><snippet>file</snippet></ROW><ROW><id>10769592</id><snippet>file.content</snippet></ROW><ROW><id>10769592</id><snippet>content</snippet></ROW><ROW><id>10769592</id><snippet>file.read()</snippet></ROW><ROW><id>10769592</id><snippet>file</snippet></ROW><ROW><id>10769592</id><snippet>file</snippet></ROW><ROW><id>10769623</id><snippet>(?&lt;=(?&lt;!\d)\d{3})[^\d]+(?=\d{3}(?!\d))
</snippet></ROW><ROW><id>10769646</id><snippet>data = {
    "string1": [1,2],
    "string2": [5,6]
}

print data["string1"]    # =&gt; [1,2]
</snippet></ROW><ROW><id>10769646</id><snippet>data = dict([("string1",[1,2]), ("string2", [5,6])])
</snippet></ROW><ROW><id>10769646</id><snippet>data = dict(zip(strings, numbers))
</snippet></ROW><ROW><id>10770119</id><snippet>import csv

with open("file.csv", "rb") as ins:
    for row in csv.reader(ins):
        print sum(map(int, row))
</snippet></ROW><ROW><id>10770119</id><snippet>import csv

ins = open("file.csv", "rb")
for row in csv.reader(ins):
    print sum(map(int, row))
ins.close()
</snippet></ROW><ROW><id>10770119</id><snippet>import csv

with open("test.csv", "r") as ins:
    for row in csv.reader(ins):
        print(sum(map(int, row)))
</snippet></ROW><ROW><id>10770276</id><snippet>__func__</snippet></ROW><ROW><id>10770276</id><snippet>save</snippet></ROW><ROW><id>10770276</id><snippet>class Gallery(object):
    def save(self, *args, **kwargs):
        return self, args, kwargs

class MyGallery(object):
    def save(self, *args, **kwargs):
        return Gallery.save.__func__(self, *args, **kwargs)
    # or 
    # save = Gallery.save.__func__

mg = MyGallery()
print mg.save('arg', kwarg='kwarg')
# (&lt;__main__.MyGallery object at 0x04DAD070&gt;, ('arg',), {'kwarg': 'kwarg'})
</snippet></ROW><ROW><id>10770276</id><snippet>class SaveMixin(object):
    def save(self, *args, **kwargs):
        return self, args, kwargs

class Gallery(SaveMixin, object):
    pass

class MyGallery(SaveMixin, object):
    pass
</snippet></ROW><ROW><id>10770276</id><snippet>def gallery_save(self, *args, **kwargs):
    return self, args, kwargs

class Gallery(object):
    save = gallery_save

class MyGallery(object):
    save = gallery_save
</snippet></ROW><ROW><id>10770830</id><snippet>search</snippet></ROW><ROW><id>10770830</id><snippet>match</snippet></ROW><ROW><id>10770830</id><snippet>match</snippet></ROW><ROW><id>10770830</id><snippet>for item in matches:
    if re.search(item, message):
        return True
return False
</snippet></ROW><ROW><id>10770830</id><snippet>in</snippet></ROW><ROW><id>10770830</id><snippet>for item in matches:
    if item in message:
        return True
return False
</snippet></ROW><ROW><id>10770967</id><snippet>dl</snippet></ROW><ROW><id>10770967</id><snippet>dt</snippet></ROW><ROW><id>10770967</id><snippet>following-sibling</snippet></ROW><ROW><id>10770967</id><snippet>dd</snippet></ROW><ROW><id>10770967</id><snippet>dt</snippet></ROW><ROW><id>10770967</id><snippet>dt</snippet></ROW><ROW><id>10770967</id><snippet>dd</snippet></ROW><ROW><id>10770967</id><snippet>dt</snippet></ROW><ROW><id>10771012</id><snippet>y = a + bx + c*exp(-d*x)
</snippet></ROW><ROW><id>10771069</id><snippet>args</snippet></ROW><ROW><id>10771069</id><snippet># call job_function with arguments 'hello' and 'world'
sched.add_cron_job(job_function, args=('hello', 'world'), month='1', day='1st fri', hour='0') 
</snippet></ROW><ROW><id>10771069</id><snippet>add_cron_job</snippet></ROW><ROW><id>10771138</id><snippet>strcat()</snippet></ROW><ROW><id>10771138</id><snippet>char str[20] = "AAAA";
int val = 0;
int nval = htole32(val);
memcpy(str + 4, (char*)&amp;nval, 4);
</snippet></ROW><ROW><id>10771180</id><snippet>regex:
- "[A-Za-z0-9]"
</snippet></ROW><ROW><id>10771180</id><snippet>regex</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>type</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>ComplexWrapper</snippet></ROW><ROW><id>10771293</id><snippet>&gt;&gt;&gt; type(ComplexWrapper(1.0,1.0) + ComplexWrapper(2.0,3.0))
&lt;type 'complex'&gt;
</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>class ReturnTypeWrapper(type):
    def __new__(mcs, name, bases, dct):
        cls = type.__new__(mcs, name, bases, dct)
        for attr, obj in cls.wrapped_base.__dict__.items():
            # skip 'member descriptor's and overridden methods
            if type(obj) == type(complex.real) or attr in dct:
                continue
            if getattr(obj, '__objclass__', None) is cls.wrapped_base:
                setattr(cls, attr, cls.return_wrapper(obj))
        return cls

    def return_wrapper(cls, obj):
        def convert(value):
            return cls(value) if type(value) is cls.wrapped_base else value
        def wrapper(*args, **kwargs):
            return convert(obj(*args, **kwargs))
        wrapper.__name__ = obj.__name__
        return wrapper

class Complex(complex):
    __metaclass__ = ReturnTypeWrapper
    wrapped_base = complex
    def __str__(self):
        return '({0}, {1})'.format(self.real, self.imag)
    def __repr__(self):
        return '{0}({1!r}, {2!r})'.format(self.__class__.__name__, 
                                          self.real, self.imag)


a = Complex(1+1j)
b = Complex(2+2j)

print type(a + b)
</snippet></ROW><ROW><id>10771293</id><snippet>__coerce__</snippet></ROW><ROW><id>10771293</id><snippet>tuple</snippet></ROW><ROW><id>10771293</id><snippet>complex</snippet></ROW><ROW><id>10771293</id><snippet>__objclass__</snippet></ROW><ROW><id>10771412</id><snippet>sorted</snippet></ROW><ROW><id>10771412</id><snippet>&gt;&gt;&gt; d = {'a': [1, 4, 7], 'b': [2, 3, 9], 'c': [3, 2, 8]}
&gt;&gt;&gt; for key in sorted(d, key=lambda x: d[x][2]):
...    print key, d[key]
a [1, 4, 7]
c [3, 2, 8]
b [2, 3, 9]
</snippet></ROW><ROW><id>10771412</id><snippet>reverse=True</snippet></ROW><ROW><id>10771412</id><snippet>[:N]</snippet></ROW><ROW><id>10771412</id><snippet>sorted(d, key=lambda x: d[x][2], reverse=True)[:2]

# b [2, 3, 9]
# c [3, 2, 8]
</snippet></ROW><ROW><id>10771412</id><snippet>sorted</snippet></ROW><ROW><id>10771517</id><snippet>class BaseService(object):

    def __init__(self):
        self._engine = create_engine('mysql://root@localhost/my_db', pool_recycle = 3600)
        self._Session = sessionmaker(bind = self._engine)
        self._session = Session()
</snippet></ROW><ROW><id>10771517</id><snippet>class BaseService(object):
    engine = create_engine('mysql://root@localhost/my_db', pool_recycle = 3600)
    Session = sessionmaker(bind = engine)
    session = Session()
</snippet></ROW><ROW><id>10771517</id><snippet>class UserService(BaseService):

    def create(self, data):
        BaseService.session.query(UserDo).first()
</snippet></ROW><ROW><id>10771593</id><snippet>stdout</snippet></ROW><ROW><id>10771593</id><snippet>import sys
class LoggedStdout():
    def __init__(self, filename = None):
        self.filename = filename
    def write(self, text):
        sys.__stdout__.write(text)
        if not self.filename is None:
            self.log(text)
    def log(self, line):
        with open(self.filename, "a") as f:
            f.write('\n' + line)

sys.stdout = LoggedStdout('file.txt')

print 'Hello world!'
</snippet></ROW><ROW><id>10771593</id><snippet>print</snippet></ROW><ROW><id>10771593</id><snippet>stdout</snippet></ROW><ROW><id>10771593</id><snippet>logging</snippet></ROW><ROW><id>10771890</id><snippet>exactly_one</snippet></ROW><ROW><id>10771890</id><snippet>g.geocode</snippet></ROW><ROW><id>10771890</id><snippet> &gt;&gt;&gt; g.geocode('6943, Australia', exactly_one=False)
 [(u'Australia 6943, Villafontana, Tijuana Municipality, Baja California, Mexico',
  (32.4988788, -116.8620506)),
 (u'Australia 6943, Castelar, Buenos Aires Province, Argentina',
  (-34.7036339, -58.6423071)),
 (u'Australia 6943, Rosario, Santa Fe Province, Argentina',
  (-32.9913482, -60.6398934)),
 (u'Australia, Lebanon', (33.8879118, 35.4749439)),
 (u'Australia, Juliaca, Peru', (-15.4897806, -70.146677)),
 (u'Australia, Lima District 15007, Peru', (-12.0397296, -76.9944836)),
 (u'Australia, Manila, Philippines', (14.48538, 121.0394822)),
 (u'Australia, Conchal\xed, Santiago Metropolitan Region, Chile',
  (-33.3929606, -70.6780826)),
 (u'Australia, Chiguayante, Biob\xedo Region, Chile',
  (-36.9556346, -73.0145556)),
 (u'Australia, Copiap\xf3, Atacama Region, Chile', (-27.3978776, -70.2934656))]
</snippet></ROW><ROW><id>10771890</id><snippet>place, (lat, lng)</snippet></ROW><ROW><id>10771890</id><snippet>too many values</snippet></ROW><ROW><id>10771890</id><snippet>to unpack</snippet></ROW><ROW><id>10771890</id><snippet>place</snippet></ROW><ROW><id>10771890</id><snippet>(lat, lng)</snippet></ROW><ROW><id>10771890</id><snippet>for place, (lat, lng) in g.geocode(a, exactly_one=False):
     print place, lat, lng
</snippet></ROW><ROW><id>10771991</id><snippet>filter</snippet></ROW><ROW><id>10771991</id><snippet>filter(*criterion)</snippet></ROW><ROW><id>10771991</id><snippet>session.query(MyClass).filter(MyClass.name == 'some name')</snippet></ROW><ROW><id>10771991</id><snippet>session.query(MyClass).filter(MyClass.name == 'some name', MyClass.id &gt; 5)</snippet></ROW><ROW><id>10771991</id><snippet>filter</snippet></ROW><ROW><id>10771991</id><snippet>filter</snippet></ROW><ROW><id>10771991</id><snippet>instance = session.query(formats_table).\
filter(formats_table.c.formatid==FormatID).\
filter(formats_table.c.puid==PUID).\
filter(formats_table.c.formatversion==FormatVersion).\
filter(formats_table.c.formatmimetype==FormatMIMEType)
</snippet></ROW><ROW><id>10771991</id><snippet>filter</snippet></ROW><ROW><id>10771991</id><snippet>self</snippet></ROW><ROW><id>10772036</id><snippet>def getCluster(self, i=0, j=0, moveD=None):
    #(left, right, up, down)
    #moveD short for moveDirections, 1 means that it tries to move it to that side, 0 so it doesn't try
    if moveD == None: moveD = [1, 1, 1, 1]
    self.numOfSteps=self.numOfSteps+1
    if self.grid[i, j]==1:
        self.cluster[(i, j)]=True
    else:
        print "the starting coordinate is not in any cluster"
        return
    if moveD[0]==1:
        try: #if it comes to same point from different directions we'd get an infinite recursion, checking if it already been on that point prevents that
            self.cluster[(i, j-1)]
        except:
            if self.moveLeft(i, j)==True: #check if 0 or 1 is left to (i, j)
               self.getCluster(i, j-1, [1, 0, 1, 1]) #right is 0, because we came from left
    if moveD[1]==1:
        try:
            self.cluster[(i, j+1)]
        except:
            if self.moveRight(i, j)==True:
                self.getCluster(i, j+1, [0, 1, 1, 1])
    if moveD[2]==1:
        try:
            self.cluster[(i-1, j)]
        except:
            if self.moveUp(i, j)==True:
                self.getCluster(i-1, j, [1, 1, 1, 0])
    if moveD[3]==1:
        try:
            self.cluster[(i+1, j)]
        except:
            if self.moveDown(i, j)==True:
                self.getCluster(i+1, j, [1, 1, 0, 1])
</snippet></ROW><ROW><id>10772178</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>10772178</id><snippet>DecimalTuple</snippet></ROW><ROW><id>10772178</id><snippet>namedtuple</snippet></ROW><ROW><id>10772178</id><snippet>import decimal</snippet></ROW><ROW><id>10772178</id><snippet>collections.py</snippet></ROW><ROW><id>10772178</id><snippet># Execute the template string in a temporary namespace and
# support tracing utilities by setting a value for frame.f_globals['__name__']
</snippet></ROW><ROW><id>10772178</id><snippet>exec</snippet></ROW><ROW><id>10772178</id><snippet>&lt;string&gt;</snippet></ROW><ROW><id>10772178</id><snippet>&lt;string&gt;</snippet></ROW><ROW><id>10772325</id><snippet>math.fabs()</snippet></ROW><ROW><id>10772325</id><snippet>abs()</snippet></ROW><ROW><id>10772325</id><snippet>In [7]: type(abs(-2))
Out[7]: int

In [8]: type(abs(-2.0))
Out[8]: float

In [9]: type(abs(3+4j))
Out[9]: float

In [10]: type(math.fabs(-2))
Out[10]: float

In [11]: type(math.fabs(-2.0))
Out[11]: float

In [12]: type(math.fabs(3+4j))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/home/alexei/&lt;ipython-input-12-8368761369da&gt; in &lt;module&gt;()
----&gt; 1 type(math.fabs(3+4j))

TypeError: can't convert complex to float
</snippet></ROW><ROW><id>10772366</id><snippet>else</snippet></ROW><ROW><id>10772366</id><snippet>min(filter(lambda p: p.num_ships &lt; 35, gameinfo.not_my_planets.values()))
</snippet></ROW><ROW><id>10772366</id><snippet>filer(...)</snippet></ROW><ROW><id>10772366</id><snippet>num_ships &lt; 35</snippet></ROW><ROW><id>10772366</id><snippet>planet</snippet></ROW><ROW><id>10772366</id><snippet>planet.size</snippet></ROW><ROW><id>10772366</id><snippet>min(filter(lambda p: p.num_ships &lt; 35, gameinfo.not_my_planets.values()), key=lambda p:p.size)
</snippet></ROW><ROW><id>10772366</id><snippet>min( p for p in gameinfo.not_my_planets.values() if p.num_ships &lt; 35)
</snippet></ROW><ROW><id>10772373</id><snippet> place, (lat, lng) = g.geocode(a)
</snippet></ROW><ROW><id>10772373</id><snippet> try:
     place, (lat, lng) = g.geocode(a)
 except ValueError:
     continue
</snippet></ROW><ROW><id>10772373</id><snippet>continue</snippet></ROW><ROW><id>10772373</id><snippet> try:
     place, (lat, lng) = g.geocode(a)
 except ValueError as error_message:
     print("Error: geocode failed on input %s with message %s"%(a, error_message))
     continue
</snippet></ROW><ROW><id>10772887</id><snippet>$ NO_SETUPTOOLS=1 python3.2 setup.py install --no-compile
$ easy_install-3.2 logilab-common
$ easy_install-3.2 logilab-astng
# You can probably use pip instead of easy_install...
</snippet></ROW><ROW><id>10772923</id><snippet>&gt;&gt;&gt; import wikipedia
&gt;&gt;&gt; print wikipedia.__file__
</snippet></ROW><ROW><id>10772923</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.executable
</snippet></ROW><ROW><id>10772923</id><snippet>wikipedia</snippet></ROW><ROW><id>10772923</id><snippet>sys.path</snippet></ROW><ROW><id>10772923</id><snippet>&gt;&gt;&gt; print '\n'.join( sys.path )
</snippet></ROW><ROW><id>10772923</id><snippet>sys.path.append("d:/irectory/folder/is/in")</snippet></ROW><ROW><id>10772923</id><snippet>sys.path</snippet></ROW><ROW><id>10772923</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print '\n'.join( os.environ['PATH'].split(os.pathsep) )
</snippet></ROW><ROW><id>10772958</id><snippet>fin</snippet></ROW><ROW><id>10772958</id><snippet>read()</snippet></ROW><ROW><id>10772958</id><snippet>EOF</snippet></ROW><ROW><id>10772958</id><snippet>def lst():
  fin.seek(0)
  return fin.readlines()
</snippet></ROW><ROW><id>10773232</id><snippet>class MC(type):
  def __rshift__(self, other):
    return something(self, other)

class C(object):
  __metaclass__ = MC

print C &gt;&gt; None
</snippet></ROW><ROW><id>10773360</id><snippet>np.sum</snippet></ROW><ROW><id>10773360</id><snippet>np.sum</snippet></ROW><ROW><id>10773360</id><snippet>np.sin</snippet></ROW><ROW><id>10773360</id><snippet>aplfa</snippet></ROW><ROW><id>10773360</id><snippet>beta</snippet></ROW><ROW><id>10773360</id><snippet>append</snippet></ROW><ROW><id>10773360</id><snippet>cdef</snippet></ROW><ROW><id>10773360</id><snippet>cdef</snippet></ROW><ROW><id>10773360</id><snippet>sin</snippet></ROW><ROW><id>10773360</id><snippet>cos</snippet></ROW><ROW><id>10773360</id><snippet>from __future__ import division
cimport numpy as np
import numpy as np
cimport cython
from math import pi

cdef extern from "math.h":
    double cos(double theta)
    double sin(double theta)

@cython.boundscheck(False)
@cython.cdivision(True)
def power_spectrum(np.ndarray[double, ndim=1] time, np.ndarray[double, ndim=1] data, double f_min, double f_max, double df, double w=1 ):

    cdef double com,f
    cdef double s,c,sc,cc,ss,t,d
    cdef double twopi = 6.283185307179586
    cdef np.ndarray[double, ndim=1] power
    cdef np.ndarray[double, ndim=1] freq = np.arange( f_min,f_max,df )
    cdef int n = len(freq)
    cdef np.ndarray[double, ndim=1] alfa = np.zeros(n)
    cdef np.ndarray[double, ndim=1] beta = np.zeros(n)
    cdef int ndata = len(data)
    cdef int i, j

    m = np.mean(data)
    data -= m       

    for i in range(ndata):
        f = freq[i]

        s = 0.0
        c = 0.0
        ss = 0.0
        cc = 0.0
        sc = 0.0
        for j in range(n):
            t = time[j]
            d = data[j]
            sf = sin(twopi*f*t)
            cf = cos(twopi*f*t)
            s += w*d*sf
            c += w*d*cf
            ss += w*sf**2
            cc += w*cf**2
            sc += w*sf*cf

        alfa[i] = ( s*cc-c*sc )/( ss*cc-sc**2 )
        beta[i] = ( c*ss-s*sc )/( ss*cc-sc**2 )

    power = np.array(alfa)**2 + np.array(beta)**2
    return freq,power,alfa,beta
</snippet></ROW><ROW><id>10773625</id><snippet>django.core.serializers</snippet></ROW><ROW><id>10773625</id><snippet>simplejson.dumps</snippet></ROW><ROW><id>10773625</id><snippet>def to_json(self):
    return dict(
        author=[self.author.natural_key(), self.author.first_name, self.author.last_name],
        text=self.text,
    )
</snippet></ROW><ROW><id>10773625</id><snippet>simplejson.dumps(comment.to_json())</snippet></ROW><ROW><id>10773699</id><snippet>importlib</snippet></ROW><ROW><id>10773699</id><snippet>getattr()</snippet></ROW><ROW><id>10773699</id><snippet>somemodule.py</snippet></ROW><ROW><id>10773699</id><snippet>Test</snippet></ROW><ROW><id>10773699</id><snippet>import importlib

cls = "somemodule.Test"
module_name, class_name = cls.split(".")

somemodule = importlib.import_module(module_name)

print(getattr(somemodule, class_name))
</snippet></ROW><ROW><id>10773699</id><snippet>&lt;class 'somemodule.Test'&gt;
</snippet></ROW><ROW><id>10773699</id><snippet>cls = "test.somemodule.Test"
module_name, class_name = cls.rsplit(".", 1)

somemodule = importlib.import_module(module_name)
</snippet></ROW><ROW><id>10773699</id><snippet>import importlib

TWO_FACTOR_BACKENDS = (
    'id.backends.AllowToBeDisabled', # Disable this to enforce Two Factor Authentication
    'id.backends.TOTPBackend',
    'id.backends.HOTPBackend',
    #'id.backends.YubikeyBackend',
    #'id.backends.OneTimePadBackend',
    #'id.backends.EmailBackend',
)

backends = [getattr(importlib.import_module(mod), cls) for (mod, cls) in (backend.rsplit(".", 1) for backend in TWO_FACTOR_BACKENDS)]
</snippet></ROW><ROW><id>10774166</id><snippet>from PIL import Image
im = Image.open("barcode.png")
im.resize((480,320)).save("barcode_resized.png")
</snippet></ROW><ROW><id>10774242</id><snippet>pattern = "\*(\w+(?:\s+\w+)*)\*"
re.findall(pattern, "this is *some text*.") // return 'some text'
re.findall(pattern, "this is \*another \*text") // return nothing
</snippet></ROW><ROW><id>10774242</id><snippet>subpattern = "(\*(\w+(?:\s+\w+)*)\*)"
re.sub(subpattern, r"$\2$", "this is *some text*.") // return 'this is $some text$.'
</snippet></ROW><ROW><id>10774257</id><snippet>Console</snippet></ROW><ROW><id>10774257</id><snippet>import Console

c = Console.getconsole()
c.text(0, -1, 'And this is the string at the bottom of the console')
</snippet></ROW><ROW><id>10774257</id><snippet>-1</snippet></ROW><ROW><id>10774257</id><snippet>wcurses</snippet></ROW><ROW><id>10774257</id><snippet>curses</snippet></ROW><ROW><id>10774257</id><snippet>curses</snippet></ROW><ROW><id>10774373</id><snippet>enter-notify-event</snippet></ROW><ROW><id>10774373</id><snippet>leave-notify-event</snippet></ROW><ROW><id>10774373</id><snippet>EventBox</snippet></ROW><ROW><id>10774555</id><snippet>DummyRequest</snippet></ROW><ROW><id>10774555</id><snippet>WebTest</snippet></ROW><ROW><id>10774555</id><snippet>follow</snippet></ROW><ROW><id>10774555</id><snippet>redirect_response = self.testapp.post('/signup', params=post_params, 
                                   status=302)
full_response = redirect_response.follow()
</snippet></ROW><ROW><id>10774593</id><snippet>&gt;&gt;&gt; str.count('/home/usr/music', '/')
3
</snippet></ROW><ROW><id>10774593</id><snippet>l1 = [] # This makes an empty list
l2 = raw_input("&gt; ") # Do this statement in a loop if you like
l1.append(l2) # This appends l2 to the list
</snippet></ROW><ROW><id>10774593</id><snippet>while l2!='//':
  append l2 to the list
  prompt the user for more input
</snippet></ROW><ROW><id>10774593</id><snippet>print "Please add paths, enter // to stop" # It is a good idea to tell the user how to stop the input process

l1 = [] # Create empty list
l2 = raw_input('&gt; ') # Ideally, you should verify that the user entered a valid path (eg: are '/' allowed at the end of a path?)

while l2 != '//':
    l1.append(l2)
    l2 = raw_input('&gt; ')

print "Your paths are: "
for path in l1:
    print path

# I am not sure what you are trying to achieve with "print l1[1].count("/")" so leaving it out

# I would suggest to print the options outside the loop, it's a matter of taste, 
# but do you really want to keep printing them out?
print "Choose an option: \n\
       1. Number of subfolders of path\n\
       2. Number of folders at a specific path\n\
       3. Max depth between all folders\n\
       4. Quit\n"

choice = raw_input('Enter choice: ')

while choice!='4':
    if choice == '1':
        path = raw_input('Which path are you looking for?')
            # Calculate and print the output here

    # This is the question you asked, so I am answering how to process this step    
    if choice == '2':
        level = raw_input('Which level? ') # Ideally, you should verify that the user indeed enters an int here

        # Since your python does not seem to be very advanced, let's use a simple for loop:
        num=0
        for path in l1:
            if str.count(path, '/')==int(level):
                num = num+1

        print 'Number of such paths is: ', num

    if choice == '3':
        print 'this is not yet implemented'
        # Do something

    choice = raw_input('Enter choice: ')
</snippet></ROW><ROW><id>10774651</id><snippet>sudo apt-get install libjpeg62 libjpeg62-dev zlib1g-dev</snippet></ROW><ROW><id>10774651</id><snippet>404 NOT FOUND</snippet></ROW><ROW><id>10774695</id><snippet>install_name_tool -change \
    /System/Library/Frameworks/Python.framework/Versions/2.7/Python \
    /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Python \
    openni.so 

install_name_tool -change \
    /System/Library/Frameworks/Python.framework/Versions/2.7/Python \
    /usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Python \
    /usr/local/Cellar/boost/1.49.0/lib/libboost_python-mt.dylib
</snippet></ROW><ROW><id>10774695</id><snippet>export CPPFLAGS="-arch x86_64"</snippet></ROW><ROW><id>10775012</id><snippet>for method in m:
    print(getattr(li, method))
</snippet></ROW><ROW><id>10775012</id><snippet>for method in (method for method in dir(li) if callable(getattr(li, method))):
    print(getattr(li, method))
</snippet></ROW><ROW><id>10775012</id><snippet>inspect</snippet></ROW><ROW><id>10775310</id><snippet>from difflib import Differ

def appendBoldChanges(s1, s2):
    "Adds &lt;b&gt;&lt;/b&gt; tags to words that are changed"
    l1 = s1.split(' ')
    l2 = s2.split(' ')
    dif = list(Differ().compare(l1, l2))
    return " ".join(['&lt;b&gt;'+i[2:]+'&lt;/b&gt;' if i[:1] == '+' else i[2:] for i in dif 
                                                           if not i[:1] in '-?'])

print appendBoldChanges("britney spirs", "britney sprears")
print appendBoldChanges("sora iro days", "sorairo days")
#Output:
britney &lt;b&gt;sprears&lt;/b&gt;
&lt;b&gt;sorairo&lt;/b&gt; days
</snippet></ROW><ROW><id>10775442</id><snippet>node.js</snippet></ROW><ROW><id>10775442</id><snippet>python server</snippet></ROW><ROW><id>10775442</id><snippet>Unix sockets</snippet></ROW><ROW><id>10775442</id><snippet>TCP/IP sockets</snippet></ROW><ROW><id>10775442</id><snippet>json</snippet></ROW><ROW><id>10775442</id><snippet>node.js</snippet></ROW><ROW><id>10775449</id><snippet>MySQLdb.connect()</snippet></ROW><ROW><id>10775449</id><snippet>db = MySQLdb.connect(host="-----", port=3306, user="-----",
    passwd="------", db="----", charset='utf8')
</snippet></ROW><ROW><id>10775584</id><snippet>date</snippet></ROW><ROW><id>10775584</id><snippet>from datetime import date
</snippet></ROW><ROW><id>10775584</id><snippet>date</snippet></ROW><ROW><id>10775584</id><snippet>        [user_id,date] = i.split(' ');
</snippet></ROW><ROW><id>10775584</id><snippet>TypeError</snippet></ROW><ROW><id>10775584</id><snippet>date</snippet></ROW><ROW><id>10775584</id><snippet>mylist.append([date(int(yy),int(mm),int(dd)),user_id]); 
</snippet></ROW><ROW><id>10775584</id><snippet>import datetime as dt
mylist.append([dt.date(int(yy),int(mm),int(dd)),user_id])
</snippet></ROW><ROW><id>10775584</id><snippet>mylist.append([dt.date(*date.split('-')), user_id])
</snippet></ROW><ROW><id>10775668</id><snippet>import subprocess
import sys
new_process = subprocess.Popen([sys.executable]+sys.argv)
</snippet></ROW><ROW><id>10775668</id><snippet>import wx
import subprocess
import sys

def re_run(e):
    new_process = subprocess.Popen([sys.executable]+sys.argv)

app = wx.App(False)  # Create a new app, don't redirect stdout/stderr to a window.
frame = wx.Frame(None, wx.ID_ANY, "Hello World") # A Frame is a top-level window.
s=wx.Button(frame,-1,"New")
s.Bind(wx.EVT_BUTTON, re_run)
frame.Show(True)     # Show the frame.
app.MainLoop()
</snippet></ROW><ROW><id>10775711</id><snippet>hxs.select('//div[@id = "CategoryBreadcrumb"]/ul/li/text()')
</snippet></ROW><ROW><id>10775711</id><snippet>import lxml.html as LH

text = '''
&lt;div id='CategoryBreadcrumb'&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=#&gt;I dont need&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=#&gt;I dont need&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=#&gt;I dont need&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Text that i need&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
'''

doc = LH.fromstring(text)
print(doc.xpath('//div[@id = "CategoryBreadcrumb"]/ul/li/text()'))

# ['Text that i need']
</snippet></ROW><ROW><id>10775824</id><snippet>(add-to-list 'load-path "PATH TO w3m")
</snippet></ROW><ROW><id>10775837</id><snippet>import matplotlib.pyplot as plt
import math

my_lists = [[i*math.exp(-x/10.) for x in range(10) ] for i in range(1,7)]
legend_names = ["line 1", "line 2", "line 3", "line 4", "line 5", "line 6"]
for ydata, name in zip(my_lists, legend_names):
    plt.plot(ydata, label = name)
plt.legend(loc = 'best')
plt.show()
</snippet></ROW><ROW><id>10775850</id><snippet>classes</snippet></ROW><ROW><id>10775850</id><snippet>import matplotlib.pyplot as plt

class DataSet(object):
    def __init__(self, name, x_data, y_data, size, color):
        self.name = name
        self.x_data = x_data
        self.y_data = y_data
        self.size = size
        self.color = color

wood = DataSet('wood', [1,2,3,4], [5,7,4,1], 300, 'red')
glass = DataSet('glass', [0,2,0,4], [2,7,4,1], 100, 'blue')
paper = DataSet('paper', [1,7,3,6], [9,9,1,9], 500, '#a5a5a5')
plastic = DataSet('plastic', [3,2,5,5], [1,5,1,8], 700, 'yellow')

categories = [wood, glass, paper, plastic]
#Here we plot all the data:
for cat in categories:
    plt.scatter(cat.x_data, cat.y_data, s=cat.size , color=cat.color, label=cat.name)

plt.legend(loc='lower right', scatterpoints=1)
plt.show()
</snippet></ROW><ROW><id>10775909</id><snippet>&gt;&gt;&gt; fruits = "['apple', 'orange', 'banana']"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; fruits = ast.literal_eval(fruits)
&gt;&gt;&gt; fruits
['apple', 'orange', 'banana']
&gt;&gt;&gt; fruits[1]
'orange'
</snippet></ROW><ROW><id>10776076</id><snippet>files = []
for file in input:
    files.append({
        "path": get_path(file),
        "name": get_name(file),
        "size": get_size(file),
        ...
    })
</snippet></ROW><ROW><id>10776076</id><snippet>class SomeFile:
    def __init__(self, path, name, size, ...):
        self.path = path
        ...

    def do_something_with_file(self):
        ...

files = []
for file in input:
    files.append(SomeFile(get_path(file), get_name(file), get_size(file), ...))
</snippet></ROW><ROW><id>10776076</id><snippet>[{"path": get_path(file), "name": get_name(file), ...} for file in input]
</snippet></ROW><ROW><id>10776076</id><snippet>file</snippet></ROW><ROW><id>10776076</id><snippet>input</snippet></ROW><ROW><id>10776076</id><snippet>file()</snippet></ROW><ROW><id>10776076</id><snippet>input()</snippet></ROW><ROW><id>10776268</id><snippet>xrange</snippet></ROW><ROW><id>10776268</id><snippet>xrange()</snippet></ROW><ROW><id>10776268</id><snippet>__iter__</snippet></ROW><ROW><id>10776268</id><snippet>rangeiterator</snippet></ROW><ROW><id>10776268</id><snippet>&gt;&gt;&gt; x = xrange(3)
&gt;&gt;&gt; type(x)
&lt;type 'xrange'&gt;
&gt;&gt;&gt; i = x.__iter__()
&gt;&gt;&gt; type(i)
&lt;type 'rangeiterator'&gt;
</snippet></ROW><ROW><id>10776360</id><snippet>yn = ""
while True:
    yn = input( "---&gt; " )
    if yn.lower() != "y":
      break


pu@pumbair:~$ python3.2 test.py 
---&gt; y
---&gt; y
---&gt; Y
---&gt; Y
---&gt; 
pu@pumbair:~$ python3.2 test.py 
---&gt; n
pu@pumbair:~$ 
</snippet></ROW><ROW><id>10776462</id><snippet>import csv

with open('data.csv', 'rb') as inf:
    cf = csv.reader(inf)

    header = cf.next()
    if header != ['Age', 'Sex', 'City']:
        print "No header found"
    else:
        for row in cf:
            print row[2]
</snippet></ROW><ROW><id>10776944</id><snippet>'/Users/me/Desktop/file.jpeg '</snippet></ROW><ROW><id>10776944</id><snippet>open</snippet></ROW><ROW><id>10776944</id><snippet>&gt;&gt;&gt; f = open('foo.txt', 'w')
&gt;&gt;&gt; f.write('a')
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('foo.txt ', 'r')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: 'foo.txt '
</snippet></ROW><ROW><id>10776978</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>10776978</id><snippet>cwd</snippet></ROW><ROW><id>10776978</id><snippet>import subprocess
proc = subprocess.Popen(['file.jar'], cwd = '/path/to/file')
</snippet></ROW><ROW><id>10777135</id><snippet>DateTimeField</snippet></ROW><ROW><id>10777135</id><snippet>BaseTemporalField</snippet></ROW><ROW><id>10777135</id><snippet>BaseTemporalField</snippet></ROW><ROW><id>10777135</id><snippet>strptime</snippet></ROW><ROW><id>10777135</id><snippet>input_formats</snippet></ROW><ROW><id>10777135</id><snippet>DateTimeField</snippet></ROW><ROW><id>10777135</id><snippet>DateField</snippet></ROW><ROW><id>10777135</id><snippet>ModelForm</snippet></ROW><ROW><id>10777135</id><snippet>if</snippet></ROW><ROW><id>10777135</id><snippet>class SAOrderDetailForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ('sa_date',)
    sa_date = CustomDateTimeField()

class FASAOrderDetailForm(SAOrderDetailForm): #Inheritance matters!
    class Meta:
        model = Order
        fields = ('sa_date','fa_date')
    fa_date = CustomDateTimeField()

if foo:
    FormClass = FASAOrderDetailForm
else:
    FormClass = SAOrderDetailForm
</snippet></ROW><ROW><id>10777270</id><snippet>ValueError</snippet></ROW><ROW><id>10777270</id><snippet>GQueryError</snippet></ROW><ROW><id>10777270</id><snippet>except ValueError:</snippet></ROW><ROW><id>10777270</id><snippet>except (ValueError, GQueryError):
</snippet></ROW><ROW><id>10777270</id><snippet>except (ValueError, geocoders.google.GQueryError):
</snippet></ROW><ROW><id>10777270</id><snippet>check_status_code</snippet></ROW><ROW><id>10777270</id><snippet>except (ValueError, GQueryError, GeocoderResultError, 
        GBadKeyError, GTooManyQueriesError):
</snippet></ROW><ROW><id>10777270</id><snippet>geocoders.google.</snippet></ROW><ROW><id>10777270</id><snippet>except:
</snippet></ROW><ROW><id>10777270</id><snippet>place, (lat, lng) = g.geocode(a)</snippet></ROW><ROW><id>10777287</id><snippet>[(i, j) for i, j in enumerate(mylist)]
</snippet></ROW><ROW><id>10777287</id><snippet>i,j</snippet></ROW><ROW><id>10777287</id><snippet>enumerate()</snippet></ROW><ROW><id>10777287</id><snippet>[pair for pair in enumerate(mylist)]
</snippet></ROW><ROW><id>10777287</id><snippet>&gt; [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]
</snippet></ROW><ROW><id>10777360</id><snippet>filteredDayContainers = [tag for tag in soup.find_all('div', 
    attrs = {'class': 'dayContainer'}) 
    if "disabled" not in tag.parent['class']]
</snippet></ROW><ROW><id>10777383</id><snippet>&gt;&gt;&gt; '{:.2f}'.format(12.1)
'12.10'
</snippet></ROW><ROW><id>10777383</id><snippet>enumerate</snippet></ROW><ROW><id>10777383</id><snippet>csv</snippet></ROW><ROW><id>10777383</id><snippet>csvin = csv.reader(inf)
outf.writerow(csvin.next())  # header line 1
for line in csvin:  # iterator goes on from line 2
    price = line[4]
    #...
</snippet></ROW><ROW><id>10777564</id><snippet>{% for p in products %}
    &lt;input type="number" name="name-{{forloop.counter}}-arg1" value="{{p.arg1}}" size="12"/&gt;
    &lt;input type="number" name="name-{{forloop.counter}}-arg2" value="{{p.arg2}}" size="12"/&gt;
{% endfor %}
</snippet></ROW><ROW><id>10777564</id><snippet>forloop.counter</snippet></ROW><ROW><id>10777564</id><snippet>forloop.counter0</snippet></ROW><ROW><id>10777841</id><snippet>const char *string = "\x11\x11\x11\x11";
puts(string);
</snippet></ROW><ROW><id>10777923</id><snippet>mod_wsgi</snippet></ROW><ROW><id>10778715</id><snippet>  settings = webkit.WebSettings()
  settings.set_property('user-agent', 'iPad')
  webview.set_settings(settings)
</snippet></ROW><ROW><id>10778727</id><snippet>while True:
  colour = input("black or white? ")
  if colour in ("black", "white"):
    print("Thank you")
    break
  else:
    print("Please choose one or the other")
</snippet></ROW><ROW><id>10778727</id><snippet>tuple</snippet></ROW><ROW><id>10778727</id><snippet>list</snippet></ROW><ROW><id>10778727</id><snippet>in ("black", "white")</snippet></ROW><ROW><id>10778930</id><snippet>os.system("cp -Rl dir1 dir2")</snippet></ROW><ROW><id>10778930</id><snippet>shutil</snippet></ROW><ROW><id>10778930</id><snippet>shutil.copytree(src, dst, copy_function=os.link)
</snippet></ROW><ROW><id>10778967</id><snippet>annotate</snippet></ROW><ROW><id>10778967</id><snippet>import matplotlib.pyplot as plt

x = range(10)
y = range(10)

fig, ax = plt.subplots()

# Plot the line connecting the points
ax.plot(x, y)

# At each point, plot the y-value with a white box behind it
for xpoint, ypoint in zip(x, y):
    ax.annotate('{:.2f}'.format(ypoint), (xpoint,ypoint), ha='center', 
                va='center', bbox=dict(fc='white', ec='none'))

# Manually tweak the limits so that our labels are inside the axes...
ax.axis([min(x) - 1, max(x) + 1, min(y) - 1, max(y) + 1])
plt.show()
</snippet></ROW><ROW><id>10779164</id><snippet>#!/usr/bin/env python
import urllib2
from bs4 import BeautifulSoup
soup = BeautifulSoup(urllib2.urlopen('http://www.timeanddate.com/weather/usa/los-angeles').read())

for tr in soup.table.find_all('tr'):
    if tr('th'):
        if tr.th.string == "Current conditions":
            tds = tr('td')
            for td in tds:
                print td.string
</snippet></ROW><ROW><id>10779164</id><snippet>None
Location:
Los Angeles / USC Campus Downtown
Temperature:
63 °F
Comfort Level:
63 °F
Dew point:
51 °F
Pressure:
29.94 "Hg
Humidity:
65%
Visibility:
10 mi
Wind:
No wind
Last update:
Sun 7:47 PM PDT
</snippet></ROW><ROW><id>10779212</id><snippet>price_loyal</snippet></ROW><ROW><id>10779212</id><snippet>find</snippet></ROW><ROW><id>10779212</id><snippet>float(price_loyal)</snippet></ROW><ROW><id>10779212</id><snippet>&gt;&gt;&gt; price_loyal = '555.5'
&gt;&gt;&gt; price_loyal  &gt; 5000.0
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    price_loyal &gt; 5000.0
TypeError: unorderable types: str() &gt; float()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10779212</id><snippet>&gt;&gt;&gt; float(price_loyal) &gt; 5000.0
False
</snippet></ROW><ROW><id>10779212</id><snippet>string</snippet></ROW><ROW><id>10779212</id><snippet>float</snippet></ROW><ROW><id>10779212</id><snippet>price_loyal
'555.5'
</snippet></ROW><ROW><id>10779212</id><snippet>True</snippet></ROW><ROW><id>10779212</id><snippet>price_loyal &gt; 5000.0
True
</snippet></ROW><ROW><id>10779212</id><snippet>False</snippet></ROW><ROW><id>10779212</id><snippet>float(price_loyal) &gt; 5000.0
False
</snippet></ROW><ROW><id>10779217</id><snippet>def content_file_name(instance, filename):
    print instance
    print filename
    file = os.path.exists("media/file/"+str(filename))
    print file
    if file:
        os.remove("media/file/"+str(filename))
    return "file/"+str(filename)
</snippet></ROW><ROW><id>10780009</id><snippet>sudo add-apt-repository ppa:fkrull/deadsnakes
</snippet></ROW><ROW><id>10780009</id><snippet>sudo apt-get update
</snippet></ROW><ROW><id>10780009</id><snippet>sudo apt-get install python2.6 python2.6-dev
</snippet></ROW><ROW><id>10780293</id><snippet>python setup.py install</snippet></ROW><ROW><id>10780293</id><snippet>/path/to/python26 setup.py install</snippet></ROW><ROW><id>10780346</id><snippet>&lt;connection number =5name=Airtelllldesc=Largets TRelecome &gt;&lt;/connection number =5name=Airteldesc=Largets TRelecome &gt;
</snippet></ROW><ROW><id>10780346</id><snippet>&lt;connection number="5" name="Airtellll" desc="Largets TRelecome" &gt;&lt;/connection&gt;
</snippet></ROW><ROW><id>10780346</id><snippet>from lxml import etree
xml = '''&lt;ispinfo&gt;&lt;connection number="5" name="Airtellll" desc="Largets TRelecome" &gt;&lt;ip_address&gt;192.168.1.23&lt;/ip_address&gt;&lt;subnet&gt;192.168.1.23&lt;/subnet&gt;&lt;gateway&gt;192.168.1.23&lt;/gateway&gt;&lt;probe_server1&gt;192.168.99.1&lt;/probe_server1&gt;&lt;probe_server2 /&gt;&lt;interface&gt;eth0&lt;/interface&gt;&lt;weight&gt;160&lt;/weight&gt;&lt;/connection&gt;&lt;/ispinfo&gt;'''
xml = etree.XML(xml)
print etree.tostring(xml, pretty_print = True)
</snippet></ROW><ROW><id>10780346</id><snippet>from lxml import etree

# Some dummy text
conn_id = 5
conn_name = "Airtelll"
conn_desc = "Largets TRelecome"
ip = "192.168.1.23"

# Building the XML tree
# Note how attributes and text are added, using the Element methods
# and not by concatenating strings as in your question
root = etree.Element("ispinfo")
child = etree.SubElement(root, 'connection',
                 number = str(conn_id),
                 name = conn_name,
                 desc = conn_desc)
subchild_ip = etree.SubElement(child, 'ip_address')
subchild_ip.text = ip

# and pretty-printing it
print etree.tostring(root, pretty_print=True)
</snippet></ROW><ROW><id>10780346</id><snippet>&lt;ispinfo&gt;
  &lt;connection desc="Largets TRelecome" number="5" name="Airtelll"&gt;
    &lt;ip_address&gt;192.168.1.23&lt;/ip_address&gt;
  &lt;/connection&gt;
&lt;/ispinfo&gt;
</snippet></ROW><ROW><id>10780447</id><snippet>&gt;&gt;&gt; [x for x in my_str.split(';') if x]
</snippet></ROW><ROW><id>10780447</id><snippet>&gt;&gt;&gt; filter(bool, my_str.split(';'))
</snippet></ROW><ROW><id>10780447</id><snippet>rstrip</snippet></ROW><ROW><id>10780447</id><snippet>&gt;&gt;&gt; my_str.rstrip(';').split(';')
</snippet></ROW><ROW><id>10780843</id><snippet>print m</snippet></ROW><ROW><id>10780843</id><snippet>m.__str__()</snippet></ROW><ROW><id>10781127</id><snippet>A.ix[A.index - B.index]
</snippet></ROW><ROW><id>10781127</id><snippet>A.index - B.index</snippet></ROW><ROW><id>10781127</id><snippet>set</snippet></ROW><ROW><id>10781127</id><snippet>    In [30]: A.index
    Out[30]: Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], dtype=int64)

    In [31]: B.index
    Out[31]: Int64Index([  0,   1,   2,   3, 999], dtype=int64)

    In [32]: A.index - B.index
    Out[32]: Int64Index([ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], dtype=int64)

    In [33]: B.index - A.index
    Out[33]: Int64Index([999], dtype=int64)
</snippet></ROW><ROW><id>10781270</id><snippet>plt.minorticks_off()
</snippet></ROW><ROW><id>10781270</id><snippet>subsx</snippet></ROW><ROW><id>10781270</id><snippet>plt.xscale('log', subsx=[2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>10781340</id><snippet>gcc -shared example.o example_wrap.o -o _example.so -lusb
</snippet></ROW><ROW><id>10781340</id><snippet>-lusb</snippet></ROW><ROW><id>10781510</id><snippet>urllib3 docs</snippet></ROW><ROW><id>10781510</id><snippet>get_url(url, fields=None, **urlopen_kw)
Deprecated since version 1.0.

Use request() instead.
</snippet></ROW><ROW><id>10781558</id><snippet>F13 is pressed
Start timer
While True:
    Listen for hotkey and capslock up
    if capslock up:
        if timer &lt; 1: 
            return &lt;Esc&gt; and exit
        else: just exit
    elif hotkey:
        Execute hotkey function and exit
</snippet></ROW><ROW><id>10781723</id><snippet>&gt;&gt;&gt; from django.db import connection
&gt;&gt;&gt; connection.queries
[{'sql': 'SELECT polls_polls.id,polls_polls.question,polls_polls.pub_date FROM         polls_polls',
'time': '0.002'}]
</snippet></ROW><ROW><id>10781758</id><snippet>im = image.convert("RGB").resize((600, 950), Image.ANTIALIAS)
</snippet></ROW><ROW><id>10781758</id><snippet>BICUBIC</snippet></ROW><ROW><id>10781758</id><snippet>ANTIALIAS</snippet></ROW><ROW><id>10782270</id><snippet>publish_parts</snippet></ROW><ROW><id>10782270</id><snippet>publish_doctree</snippet></ROW><ROW><id>10782270</id><snippet>field</snippet></ROW><ROW><id>10782270</id><snippet>field_name</snippet></ROW><ROW><id>10782270</id><snippet>field_body</snippet></ROW><ROW><id>10782270</id><snippet>field</snippet></ROW><ROW><id>10782270</id><snippet>from docutils.core import publish_doctree

source = """Some text ...

:foo: bar

Some text ...
"""

# Parse reStructuredText input, returning the Docutils doctree as
# an `xml.dom.minidom.Document` instance.
doctree = publish_doctree(source).asdom()

# Get all field lists in the document.
fields = doctree.getElementsByTagName('field')

d = {}

for field in fields:
    # I am assuming that `getElementsByTagName` only returns one element.
    field_name = field.getElementsByTagName('field_name')[0]
    field_body = field.getElementsByTagName('field_body')[0]

    d[field_name.firstChild.nodeValue] = \
        " ".join(c.firstChild.nodeValue for c in field_body.childNodes)

print d # Prints {u'foo': u'bar'}
</snippet></ROW><ROW><id>10782270</id><snippet>.firstChild.nodeValue</snippet></ROW><ROW><id>10782270</id><snippet>.nodeValue</snippet></ROW><ROW><id>10782270</id><snippet>field</snippet></ROW><ROW><id>10782270</id><snippet>field_name</snippet></ROW><ROW><id>10782270</id><snippet>field_body</snippet></ROW><ROW><id>10782446</id><snippet>def emailform(emailmodel):
    class EmailPreferences(forms.ModelForm):
         ...

        class Meta:
            model = emailmodel

         ...

    return EmailPreferences

 ...

form = emailform(teacher_email_preferences)()
</snippet></ROW><ROW><id>10782669</id><snippet>import networkx as nx
from matplotlib import pyplot as plt
import math

G = nx.Graph()

row = '643715.202,2499149.0506 643752.61523545,2499089.86084203 ' +\
    '643773.6038,2499056.6558 643773.73878609,2499056.44011079 ' +\
    '643793.20162482,2499025.34111554 643813.55943268,2498992.81212045 ' +\
    '643826.6563,2498971.8852'

a=row.split(" ")
# Saving the previous node to be able to calculate the distance
prev_point = None
# Save the positions in a dictionary to be able to draw 
# the nodes at the correct positions
pos = {}
for i in a:
    cur_point = tuple([float(x) for x in i.split(',')])
    assert len(cur_point) == 2
    if prev_point is not None:
        # Calculate the distance between the nodes with the Pythagorean
        # theorem
        b = cur_point[1] - prev_point[1]
        c = cur_point[0] - prev_point[0]
        a = math.sqrt(b ** 2 + c ** 2)
        G.add_edge(cur_point, prev_point, weight=a)
    G.add_node(cur_point)
    pos[cur_point] = cur_point
    prev_point = cur_point
nx.draw(G, pos=pos)
plt.savefig('roads.png')
</snippet></ROW><ROW><id>10782698</id><snippet>source lib/bin/activate</snippet></ROW><ROW><id>10782698</id><snippet>lib</snippet></ROW><ROW><id>10782698</id><snippet>virtualenv</snippet></ROW><ROW><id>10782698</id><snippet>virtualenv --no-site-packages --distribute lib
source lib/bin/activate
pip install flask
</snippet></ROW><ROW><id>10782698</id><snippet>virtualenv</snippet></ROW><ROW><id>10782698</id><snippet>--no-site-packages</snippet></ROW><ROW><id>10782698</id><snippet>--distribute</snippet></ROW><ROW><id>10782698</id><snippet>pip</snippet></ROW><ROW><id>10782740</id><snippet>client.status()</snippet></ROW><ROW><id>10782740</id><snippet>text_status</snippet></ROW><ROW><id>10782740</id><snippet>&gt;&gt;&gt; import pysvn
&gt;&gt;&gt; c = pysvn.Client()
&gt;&gt;&gt; out = c.status("versioned.cpp")[0]  # .status() returns a list
&gt;&gt;&gt; out.text_status
&lt;wc_status_kind.normal&gt;
</snippet></ROW><ROW><id>10782740</id><snippet>&gt;&gt;&gt; c.status("added.cpp")[0].text_status  # added file
&lt;wc_status_kind.added&gt;
&gt;&gt;&gt; c.status("unversioned.cpp")[0].text_status  # unversioned file
&lt;wc_status_kind.unversioned&gt;
</snippet></ROW><ROW><id>10782740</id><snippet>dir (pysvn.wc_status_kind)</snippet></ROW><ROW><id>10782740</id><snippet>def under_version_control(filename):
    "returns true if file is unversioned"
    c = pysvn.Client()
    s = c.status(filename)[0].text_status
    return s not in (
        pysvn.wc_status_kind.added, 
        pysvn.wc_status_kind.unversioned,
        pysvn.wc_status_kind.ignored)
</snippet></ROW><ROW><id>10782740</id><snippet>ClientError</snippet></ROW><ROW><id>10782740</id><snippet>def under_version_control(filename):
    "returns true if file is unversioned"
    c = pysvn.Client()
    try:
        s = c.status(filename)[0].text_status
    catch pysvn.ClientError:
        return False
    else:
        return s not in (
            pysvn.wc_status_kind.added, 
            pysvn.wc_status_kind.unversioned,
            pysvn.wc_status_kind.ignored)
</snippet></ROW><ROW><id>10782805</id><snippet>import requests
import json

url = 'https://www.mywbsite.fr/Services/GetFromDataBaseVersionned'
payload = { "Host": "www.mywbsite.fr","Connection": "keep-alive","Content-Length": 129,"Origin": "https://www.mywbsite.fr","X-Requested-With": "XMLHttpRequest","User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.52 Safari/536.5","Content-Type": "application/json","Accept": "*/*","Referer": "https://www.mywbsite.fr/data/mult.aspx","Accept-Encoding": "gzip,deflate,sdch","Accept-Language": "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4","Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.3", Cookie": "ASP.NET_SessionId=j1r1b2a2v2w245; GSFV=FirstVisit=;     GSRef=https://www.google.fr/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CHgQFjAA&amp;url=https://www.mywbsite.fr/&amp;ei=FZq_T4abNcak0QWZ0vnWCg&amp;usg=AFQjCNHq90dwj5RiEfr1Pw; HelpRotatorCookie=HelpLayerWasSeen=0; NSC_GSPOUGS!TTM=ffffffff09f4f58455e445a4a423660; GS=Site=frfr; __utma=1.219229010.1337956889.1337956889.1337958824.2; __utmb=1.1.10.1337958824; __utmc=1; __utmz=1.1337956889.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)"}
headers = {'Content-Type':'application/json','Accept':'*/*','X-Requested-With':'XMLHttpRequest'}
r = requests.post(url, data=json.dumps(payload), headers=headers)
print(r.content)
</snippet></ROW><ROW><id>10782956</id><snippet>user_to_count_map = {}
for username in list_of_usernames:
    x = user_to_count_map.setdefault(username, [0])
    x[0] += 1
for username, counter in sorted(user_to_count_map.items()):
    print username, counter[0]
</snippet></ROW><ROW><id>10782956</id><snippet>Counter</snippet></ROW><ROW><id>10782956</id><snippet>from collections import Counter
user_to_count_map = Counter()
for username in list_of_usernames:
    user_to_count_map[username] += 1
for username, counter in sorted(user_to_count_map.items()):
    print username, counter[0]        
</snippet></ROW><ROW><id>10782956</id><snippet>Counter</snippet></ROW><ROW><id>10782956</id><snippet>defaultdict</snippet></ROW><ROW><id>10782956</id><snippet>Counter</snippet></ROW><ROW><id>10782956</id><snippet>defaultdict</snippet></ROW><ROW><id>10782956</id><snippet>from collections import defaultdict
user_to_count_map = defaultdict(lambda: 0)
for username in list_of_usernames:
    user_to_count_map[username] += 1
</snippet></ROW><ROW><id>10782956</id><snippet>user_to_count_map = {}
for username in list_of_usernames:
    x = user_to_count_map.get(username, 0)
    x += 1
    user_to_count_map[x] = x
for username, counter in sorted(user_to_count_map.items()):
    print username, counter[0]
</snippet></ROW><ROW><id>10783146</id><snippet>a = "This is a string".encode("rot13")
b = a.decode("rot13")
print b
</snippet></ROW><ROW><id>10783146</id><snippet>def translate_non_alphanumerics(to_translate, translate_to=u'_'):
    not_letters_or_digits = u'!"#%\'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~'
    translate_table = dict((ord(char), translate_to) for char in not_letters_or_digits)
    return to_translate.translate(translate_table)

&gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!') u'_foo__'
</snippet></ROW><ROW><id>10783146</id><snippet>&gt;&gt;&gt; translate_non_alphanumerics(u'&lt;foo&gt;!', u'bad') u'badfoobadbad'
</snippet></ROW><ROW><id>10784024</id><snippet>ls</snippet></ROW><ROW><id>10784024</id><snippet>&lt;a href="http://docs.python.org/library/os.html#os.isatty" rel="nofollow"&gt;os.isatty()&lt;/a&gt;</snippet></ROW><ROW><id>10784024</id><snippet>&lt;a href="http://linux.die.net/man/1/tty" rel="nofollow"&gt;tty(1)&lt;/a&gt;</snippet></ROW><ROW><id>10784024</id><snippet>tty -s &lt;&amp;1</snippet></ROW><ROW><id>10784024</id><snippet>tty</snippet></ROW><ROW><id>10784024</id><snippet>&lt;&amp;1</snippet></ROW><ROW><id>10784202</id><snippet>cache.set('foo', 'bar')</snippet></ROW><ROW><id>10784202</id><snippet>get</snippet></ROW><ROW><id>10784202</id><snippet>set</snippet></ROW><ROW><id>10784202</id><snippet>foobar</snippet></ROW><ROW><id>10784296</id><snippet>import csv

newrow = []
csvFileRead = open('c:/temp/csvfile.csv', 'rb')
csvFileNew = open('c:/temp/csvfilenew.csv', 'wb')

# Open the CSV
csvReader = csv.reader(csvFileRead, delimiter = ',')

# Append the rows to variable newrow
for row in csvReader:
    newrow.append(row)

# Add quotes around the third list item
for row in newrow:
    row[2] = "'"+str(row[2])+"'"

csvFileRead.close()

# Create a new CSV file
csvWriter = csv.writer(csvFileNew, delimiter = ',')

# Append the csv with rows from newrow variable
for row in newrow:
    csvWriter.writerow(row)

csvFileNew.close()
</snippet></ROW><ROW><id>10784438</id><snippet>import re
re.sub(r'number="([0-9]+)"',r"number='\1'", etree.tostring(root, pretty_print=True))
</snippet></ROW><ROW><id>10784602</id><snippet>python setup.py build
</snippet></ROW><ROW><id>10784778</id><snippet>def age_over_18(go_enjoy_yourself):
    def are_you_over_18():
        if age &gt; 18:
            return go_enjoy_yourself()
        else:
            return 'So you should go home and rethink your life.'

    return are_you_over_18
</snippet></ROW><ROW><id>10784922</id><snippet>dpi=</snippet></ROW><ROW><id>10785156</id><snippet>urlpatterns += patterns('', 
    url(r'^profile/(?P\d+)/$', ' ...', name='profile'),
)
</snippet></ROW><ROW><id>10785156</id><snippet>django.core.urlresolvers.reverse</snippet></ROW><ROW><id>10785156</id><snippet>redirect_url = reverse('profile', args=[user.id])
return HttpResponseRedirect(redirect_url)
</snippet></ROW><ROW><id>10785225</id><snippet>open()</snippet></ROW><ROW><id>10785225</id><snippet>open</snippet></ROW><ROW><id>10785286</id><snippet>itertools</snippet></ROW><ROW><id>10785286</id><snippet>from itertools import takewhile, count

# ...
def myfunc():
    return takewhile(lambda x: x is not None, (lookup(i) for i in count(1)))
</snippet></ROW><ROW><id>10785286</id><snippet>takewhile</snippet></ROW><ROW><id>10785286</id><snippet>for i in count(1):
     res = lookup(i)
     if res is None: break
     yield res
</snippet></ROW><ROW><id>10785422</id><snippet>translate</snippet></ROW><ROW><id>10785422</id><snippet>s</snippet></ROW><ROW><id>10785422</id><snippet>s.translate({ord(u"\u2019"):ord(u"'")})
</snippet></ROW><ROW><id>10785422</id><snippet>translate</snippet></ROW><ROW><id>10785422</id><snippet>char_mappings = [(u"\u2019", u"'"),
                 (u"`", u"'")]
translate_mapping = {ord(k):ord(v) for k,v in char_mappings}
</snippet></ROW><ROW><id>10786150</id><snippet>regex = re.compile(r"(\d+(?:\s+\d+)*)")
</snippet></ROW><ROW><id>10786150</id><snippet>(?:)</snippet></ROW><ROW><id>10786150</id><snippet>\s+</snippet></ROW><ROW><id>10786150</id><snippet>\d+</snippet></ROW><ROW><id>10786150</id><snippet>*</snippet></ROW><ROW><id>10786150</id><snippet>r""</snippet></ROW><ROW><id>10786150</id><snippet>r''</snippet></ROW><ROW><id>10786150</id><snippet>regex = re.compile(r"(\d+(?:\s+\d{3})*)")
</snippet></ROW><ROW><id>10786202</id><snippet>in</snippet></ROW><ROW><id>10786202</id><snippet>==</snippet></ROW><ROW><id>10786202</id><snippet>if word == "conf":
   print word
</snippet></ROW><ROW><id>10786452</id><snippet>import subprocess
pro = subprocess.Popen("cmd", stdout=subprocess.PIPE, stdin=subprocess.PIPE)
pro.stdin.write("mybat.bat\n")
pro.stdin.write("myother.bat\n")
pro.stdin.write("start mysillyprogram\n")
pro.stdin.flush()
pro.terminate() # kill the parent 
</snippet></ROW><ROW><id>10786816</id><snippet>Panel</snippet></ROW><ROW><id>10786816</id><snippet>BoxSizer</snippet></ROW><ROW><id>10786816</id><snippet>Panel</snippet></ROW><ROW><id>10786816</id><snippet>Panel</snippet></ROW><ROW><id>10786816</id><snippet>BoxSizer</snippet></ROW><ROW><id>10786816</id><snippet>posPnl</snippet></ROW><ROW><id>10786816</id><snippet>posPnl.SetSizer(posPnlSzr)
</snippet></ROW><ROW><id>10786816</id><snippet>posPnlSzr</snippet></ROW><ROW><id>10786816</id><snippet>posSnlSzr</snippet></ROW><ROW><id>10786816</id><snippet>mainSzr</snippet></ROW><ROW><id>10786816</id><snippet>Panel</snippet></ROW><ROW><id>10786816</id><snippet>posPnl</snippet></ROW><ROW><id>10786816</id><snippet>mainSzr</snippet></ROW><ROW><id>10786816</id><snippet>mainSzr.Add(posPnl)
</snippet></ROW><ROW><id>10786816</id><snippet>posPnl</snippet></ROW><ROW><id>10786816</id><snippet>mainSzr</snippet></ROW><ROW><id>10786816</id><snippet>mainSzr.Add(posPnl, 1, wx.GROW)
</snippet></ROW><ROW><id>10786816</id><snippet>#!/usr/bin/env python

import wx
class MainWindow(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent)

        #add position panel
        posPnl = wx.Panel(self)
        lbl1 = wx.StaticText(posPnl, label="Position")
        lbl2 = wx.StaticText(posPnl, label="Size")
        sizeCtrl = wx.TextCtrl(posPnl)

        posPnlSzr = wx.BoxSizer(wx.HORIZONTAL)
        posPnlSzr.Add(lbl1, 1, wx.GROW)
        posPnlSzr.Add(sizeCtrl, 1, wx.GROW)
        posPnlSzr.Add(lbl2, 1, wx.GROW)

        posPnl.SetSizer(posPnlSzr)

        #create a top leverl sizer to add to the frame itself
        mainSzr = wx.BoxSizer(wx.VERTICAL)
        mainSzr.Add(posPnl, 1, wx.GROW)

        self.SetSizerAndFit(mainSzr)
        self.Show()


app = wx.App(False)
frame = MainWindow(None, "Trading Client")
app.MainLoop()
</snippet></ROW><ROW><id>10787222</id><snippet>template.render(jsonobj=JSONObj)
</snippet></ROW><ROW><id>10787222</id><snippet>{{jsonobj.some_key_inside_json_object}}
</snippet></ROW><ROW><id>10787222</id><snippet>jsonobj</snippet></ROW><ROW><id>10787251</id><snippet>where</snippet></ROW><ROW><id>10787251</id><snippet>cursor.execute("""\
SELECT PJI.*, PJO.*, 
        CST.ABCGS 
FROM  dbo.Traverse AS TRE 
              LEFT OUTER JOIN dbo.TraversePreEntry AS TPE 
                    ON TRE.JobNum = dbo.GetJobNumberFromGroupId(TPE.GroupId)
              LEFT OUTER JOIN AutoCADProjectInformation AS PJI
                    ON TRE.JobNum = PJI.JobNumber
              LEFT OUTER JOIN CalculationStorageReplacement AS CST
                    ON CST.ProjectNumber = dbo.GetJobNumberFromGroupId(TPE.GroupId)
              LEFT OUTER JOIN dbo.TraverseElevations AS TEV
                  ON TRE.TraverseId = TEV.TraverseId
              LEFT OUTER JOIN VGSDB.dbo.ProjectOffice PJO
                    ON PJI.PjbId = PJO.PjbId
where jobnum = 1205992""")
</snippet></ROW><ROW><id>10787251</id><snippet>&gt;&gt;&gt; "one\
... two"
"onetwo"
&gt;&gt;&gt; """one
... two"""
"one\ntwo"
</snippet></ROW><ROW><id>10788095</id><snippet>strip()</snippet></ROW><ROW><id>10788095</id><snippet>In [18]: s="['LOCATION', 'NAME', 'JOB', 'AREA')]"

In [19]: print '\n'.join(tok.strip("[]()' ") for tok in s.split(','))
LOCATION
NAME
JOB
AREA
</snippet></ROW><ROW><id>10788095</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>10788095</id><snippet>In [22]: print '\n'.join(ast.literal_eval(s))
LOCATION
NAME
JOB
AREA
</snippet></ROW><ROW><id>10788123</id><snippet>@foo.before</snippet></ROW><ROW><id>10788123</id><snippet>self._before</snippet></ROW><ROW><id>10788123</id><snippet>self._before</snippet></ROW><ROW><id>10788123</id><snippet>None</snippet></ROW><ROW><id>10788123</id><snippet>self._before</snippet></ROW><ROW><id>10788123</id><snippet>self._before</snippet></ROW><ROW><id>10788123</id><snippet>class Dec(object):
  def __init__(self, fn):
    self._fn = fn
    def setbefore(b):
        self._before = b
    self._before = self.default_before = setbefore
</snippet></ROW><ROW><id>10788123</id><snippet>Dec</snippet></ROW><ROW><id>10788123</id><snippet>__call__</snippet></ROW><ROW><id>10788123</id><snippet>  def __call__(self, *args, **kwargs):
      if self._before != self.default_before:
         self._before(*args, **kwargs)
      self._fn(*args, **kwargs)
</snippet></ROW><ROW><id>10788182</id><snippet>class x:
    dat = 1
    datlist = {i:dat for i in range(10)}
</snippet></ROW><ROW><id>10788182</id><snippet>&gt;&gt;&gt; NameError: global name 'dat' is not defined
</snippet></ROW><ROW><id>10788412</id><snippet>s = "I can do waaaaaaaaaaaaay better :DDDD!!!! I am sooooooooo exicted about it :))) Good !!"
re.sub(r'(.)(\1{2,})',r'\1/LNG',s)
&gt;&gt; 'I can do wa/LNGy better :D/LNG!/LNG I am so/LNG exicted about it :)/LNG Good !!'
</snippet></ROW><ROW><id>10788420</id><snippet>    finally:
        run("rm -f %s" % tar_file)
finally:
    local("rm -rf %s" % tmp_folder)
</snippet></ROW><ROW><id>10788425</id><snippet>l[::-1]</snippet></ROW><ROW><id>10788425</id><snippet>l[slice(None,None,-1)]</snippet></ROW><ROW><id>10788425</id><snippet>slice([start], stop[, step])</snippet></ROW><ROW><id>10788425</id><snippet>&gt;&gt;&gt; slice(None,None,-1).indices(5)
(4, -1, -1)
&gt;&gt;&gt; slice(None,None,1).indices(5)
(0, 5, 1)
</snippet></ROW><ROW><id>10788425</id><snippet>l[start:stop:step]</snippet></ROW><ROW><id>10788425</id><snippet>&gt;&gt;&gt; l[::-1]
[5, 4, 3, 2, 1]
&gt;&gt;&gt; l[slice(None,None,-1)]
[5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>10788425</id><snippet>step</snippet></ROW><ROW><id>10788425</id><snippet>Objects/sliceobject.c</snippet></ROW><ROW><id>10788425</id><snippet>if (r-&gt;start == Py_None) {
    *start = *step &lt; 0 ? length-1 : 0;
} else {
    /* .... */
}

if (r-&gt;stop == Py_None) {
    *stop = *step &lt; 0 ? -1 : length;
} else {
    /* .... */
}
</snippet></ROW><ROW><id>10788464</id><snippet>defaultdict</snippet></ROW><ROW><id>10788464</id><snippet>int</snippet></ROW><ROW><id>10788464</id><snippet>0</snippet></ROW><ROW><id>10788464</id><snippet>lambda: 0</snippet></ROW><ROW><id>10788464</id><snippet>0</snippet></ROW><ROW><id>10788464</id><snippet># alternating between `0` and `[]`
from itertools import count
factory = lambda c=count(): 0 if next(c) % 2 else []
superdict = defaultdict(factory)
</snippet></ROW><ROW><id>10788573</id><snippet>$ source mysite-env/bin/activate</snippet></ROW><ROW><id>10788573</id><snippet>mysite-env</snippet></ROW><ROW><id>10788775</id><snippet>level = {0, 0, 0,
         0, 1, 0,
         0, 0, 0}
</snippet></ROW><ROW><id>10788775</id><snippet>{}</snippet></ROW><ROW><id>10788775</id><snippet>set</snippet></ROW><ROW><id>10788775</id><snippet>list</snippet></ROW><ROW><id>10788775</id><snippet>level = [0, 0, 0,
         0, 1, 0,
         0, 0, 0]
</snippet></ROW><ROW><id>10788775</id><snippet>&gt;&gt;&gt; level = {0, 0, 0,
         0, 1, 0,
         0, 0, 0}
&gt;&gt;&gt; level
{0, 1}  # because set only contains unique elements

&gt;&gt;&gt; level = [0, 0, 0,
         0, 1, 0,
         0, 0, 0]
&gt;&gt;&gt; level
[0, 0, 0, 0, 1, 0, 0, 0, 0]
</snippet></ROW><ROW><id>10789018</id><snippet>import sys

def outer(value=0):
    count = [value]
    print "started at:", count[0]
    def inner(x=1):
        print "current val:", count[0]
        count[0] += x
        if count[0] &gt; 10:
            print "stopped at:", count[0]
            sys.exit(0)
    return inner

f = outer(5)
while True:
    f(1)
</snippet></ROW><ROW><id>10789226</id><snippet>d[key][subkey] = value</snippet></ROW><ROW><id>10789226</id><snippet>d[key] is None</snippet></ROW><ROW><id>10789226</id><snippet>d[key][subkey] = value</snippet></ROW><ROW><id>10789226</id><snippet>None[subkey] = value</snippet></ROW><ROW><id>10789226</id><snippet>class NestedDict(dict):
    def __init__(self, parent=None, parentkey=None):
        self.parent = parent
        self.parentkey = parentkey

    def __missing__(self, key):
        return NestedDict(self, key)

    def __setitem__(self, key, value):
        if self.parent is not None:
            self.parent[self.parentkey] = self
            self.parent = None
        super(NestedDict, self).__setitem__(key, value)

&gt;&gt;&gt; d = NestedDict()
&gt;&gt;&gt; d[1][2][3] = 4
&gt;&gt;&gt; d[2]
{}
&gt;&gt;&gt; d.keys()
[1]
&gt;&gt;&gt; d[1][2][3] 
4
</snippet></ROW><ROW><id>10789226</id><snippet>__getitem__</snippet></ROW><ROW><id>10789226</id><snippet>__setitem__</snippet></ROW><ROW><id>10789226</id><snippet>__getitem__</snippet></ROW><ROW><id>10789226</id><snippet>class NestedDict(dict):
    def __getitem__(self, key):
        if isinstance(key, tuple):
            try:
                x = self
                for k in key:
                    x = x[k]
                return x
            except (KeyError, TypeError):
                raise KeyError(key)
        else:
            return super(NestedDict, self).__getitem__(key)

    def __setitem__(self, key, value):
        if isinstance(key, tuple):
            d = self
            for k in key[:-1]:
                d = d.setdefault(k, NestedDict())
            d[key[-1]] = value
        else:
            super(NestedDict, self).__setitem__(key, value)

&gt;&gt;&gt; d = NestedDict()
&gt;&gt;&gt; d[1,2,3] = 4
&gt;&gt;&gt; d[1,2,3]
4
&gt;&gt;&gt; d[1,2,4]
KeyError: (1, 2, 4)
&gt;&gt;&gt; d
{1: {2: {3: 4}}}
</snippet></ROW><ROW><id>10789313</id><snippet>list1 = [dict(RL = 'rl1', shaders = [dict(shader = "shader1", geom = ['a','b']),
                                     dict(shader = "shader3", geom = ['q','p'])])]
list2 = [dict(RL = 'rl1', shaders = [dict(shader = "shader1", geom = ['c','d']),
                                     dict(shader = "shader3", geom = ['x','y'])])]
list3 = [dict(RL = 'rl1', shaders = [dict(shader = "shader2", geom = ['e','f'])])]
list4 = [dict(RL = 'rl2', shaders = [dict(shader = "shader2", geom = ['g','h'])])]
list5 = [dict(RL = 'rl2', shaders = [dict(shader = "shader2", geom = ['i','j'])]),
         dict(RL = 'rl3', shaders = [dict(shader = "shader4", geom = ['ab','cd'])])]

list_o_lists = [list1, list2, list3, list4, list5]

big_list_o_dicts = []
for x in list_o_lists:
    big_list_o_dicts.extend(x)

big_list_o_dicts.sort(key=lambda x: x['RL'])

new_list_o_lists = []

last_item = None
for item in big_list_o_dicts:
    if last_item and item['RL'] == last_item['RL']:
        for this_shader in item['shaders']:
            for last_shader in last_item['shaders']:
                if last_shader['shader'] == this_shader['shader']:
                    last_shader['geom'].extend(this_shader['geom'])
                    break
    else:
        last_item = item
        new_list_o_lists.append(last_item)
</snippet></ROW><ROW><id>10789313</id><snippet>rl_shader_map = {
    'rl1': {
        'shader1': ['a', 'b', 'c', 'd'],
        'shader2': ['e', 'f'],
    },
    'rl2': {
        'shader2': ['g', 'h', 'i', 'j']
    }
}
</snippet></ROW><ROW><id>10789313</id><snippet>"geom"</snippet></ROW><ROW><id>10789313</id><snippet>rl_shader_map = {
    'rl1': {
        'shader1': {
            'geom': ['a', 'b', 'c', 'd'],
        }
        'shader2': {
            'geom': ['e', 'f'],
        }
    },
    'rl2': {
        'shader2': {
            'geom': ['g', 'h', 'i', 'j'],
        }
    }
}
</snippet></ROW><ROW><id>10789313</id><snippet>dict([('RL', 'rl1'), ('shader', 'shader1')])</snippet></ROW><ROW><id>10789313</id><snippet>{}</snippet></ROW><ROW><id>10789315</id><snippet>__new__</snippet></ROW><ROW><id>10789315</id><snippet>__new__</snippet></ROW><ROW><id>10789315</id><snippet>class Parent(object):
    def __new__(cls, value, *args, **kwargs):
        print 'my value is', value
        return object.__new__(cls, *args, **kwargs)
</snippet></ROW><ROW><id>10789315</id><snippet>class Child(Parent):
    def __init__(self, for_parent, my_stuff):
        self.my_stuff = my_stuff
</snippet></ROW><ROW><id>10789315</id><snippet>&gt;&gt;&gt; c = Child(2, "Child name is Juju")
my value is 2
&gt;&gt;&gt; c.my_stuff
'Child name is Juju'
</snippet></ROW><ROW><id>10789315</id><snippet>class Parent(object):
    def __new__(cls, value):
        print 'my value is', value
        return object.__new__(cls)
</snippet></ROW><ROW><id>10789315</id><snippet>__new__</snippet></ROW><ROW><id>10789315</id><snippet>__new__</snippet></ROW><ROW><id>10789315</id><snippet>class Child(Parent):
    def __new__(cls, value, *args, **kwargs):
        return Parent.__new__(cls, value)
    def __init__(self, for_parent, my_stuff):
        self.my_stuff = my_stuff
</snippet></ROW><ROW><id>10789330</id><snippet>  File "&lt;path&gt;\&lt;filename&gt;.py", line 393, in &lt;function&gt;
</snippet></ROW><ROW><id>10789330</id><snippet>    self.target.health -= self.attack_damage
</snippet></ROW><ROW><id>10789330</id><snippet>AttributeError: 'NoneType' object has no attribute 'health'
</snippet></ROW><ROW><id>10789330</id><snippet>AttributeError</snippet></ROW><ROW><id>10789330</id><snippet>'NoneType' object</snippet></ROW><ROW><id>10789330</id><snippet>NoneType</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>'health'</snippet></ROW><ROW><id>10789330</id><snippet>health</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>self.target.health</snippet></ROW><ROW><id>10789330</id><snippet>health</snippet></ROW><ROW><id>10789330</id><snippet>self.target</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>self.target</snippet></ROW><ROW><id>10789330</id><snippet>None</snippet></ROW><ROW><id>10789330</id><snippet>if self.target.health &lt;= 0:
    REDGOLD += self.target.reward
    BLUECOMMAND += self.target.cmdback
    self.target = None  # set to None
if not self.cooldown_ready(): return
self.target.health -= self.attack_damage  # self.target is None, .health failed
</snippet></ROW><ROW><id>10789458</id><snippet>import os

def sinFunc(offset, n):
  result = []
  for i in xrange(n):
    result.append(math.sin(offset + i * i))
  os.system("echo 'could be a database query' &gt;&gt; /dev/null; sleep .1")
  return result
</snippet></ROW><ROW><id>10789803</id><snippet>options = [
    ("Minced Meat Soup", {'minced meat', 'potatoes', 'frozen vegetable'}),
    ("Sunday Soup", {'chicken with bones', 'noodles', 'soup vegetable'}),
    ("Gulas", {'pork meat', 'food cream', 'potatoes', 'onion', 'frozen peas'}),
]
</snippet></ROW><ROW><id>10789803</id><snippet>print "What would you like to cook on weekend?"
print "Here are the options:"
for option, (name, values) in enumerate(options, 1):
    print str(option)+". "+name
</snippet></ROW><ROW><id>10789803</id><snippet>enumerate()</snippet></ROW><ROW><id>10789803</id><snippet>if</snippet></ROW><ROW><id>10789803</id><snippet>elif</snippet></ROW><ROW><id>10789803</id><snippet>_, values = options[int(choose)-1]
</snippet></ROW><ROW><id>10789803</id><snippet>try:
    _, values = options[int(choose)-1]
    print "Buy", ", ".join(values) + "."
except (IndexError, ValueError):
    print "Hmmm. No such food on the list."
</snippet></ROW><ROW><id>10789803</id><snippet>for choice in choose.split(","):
    choice = choice.strip()

    try:
        _, values = options[int(choice)-1]
        print "Buy", ", ".join(values) + "."
    except (IndexError, ValueError):
        print "Hmmm. No such food on the list."
</snippet></ROW><ROW><id>10789803</id><snippet>shopping_list = []
for choice in choose.split(","):
    choice = choice.strip()
    try:
        _, values = options[int(choice)-1]
        shopping_list.append(values)
    except (IndexError, ValueError):
        print "Hmmm. No such food on the list."
</snippet></ROW><ROW><id>10789803</id><snippet>try:
    shopping_list = [options[int(choice.strip())-1][3] for choice in choose.split(",")]
except (IndexError, ValueError):
    print "Hmmm. No such food on the list."
</snippet></ROW><ROW><id>10789803</id><snippet>", ".join()</snippet></ROW><ROW><id>10789803</id><snippet>print "Buy " + ", ".join(", ".join(values) for values in shopping_list) + "."
</snippet></ROW><ROW><id>10789803</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>10789803</id><snippet>print "Buy " + ", ".join(itertools.chain.from_iterable(shopping_list)) + "."
</snippet></ROW><ROW><id>10789803</id><snippet>import itertools

options = [
    ("Minced Meat Soup", {'minced meat', 'potatoes', 'frozen vegetable'}),
    ("Sunday Soup", {'chicken with bones', 'noodles', 'soup vegetable'}),
    ("Gulas", {'pork meat', 'food cream', 'potatoes', 'onion', 'frozen peas'}),
]

print "What would you like to cook on weekend?"
print "Here are the options:"
for option, (name, values) in enumerate(options, 1):
    print str(option)+". "+name

choose = raw_input("&gt; ")

try:
    shopping_list = [options[int(choice.strip())-1][1] for choice in choose.split(",")]
    print "Buy " + ", ".join(itertools.chain.from_iterable(shopping_list)) + "."
except (IndexError, ValueError):
    print "Hmmm. No such food on the list."
</snippet></ROW><ROW><id>10789803</id><snippet>What would you like to cook on weekend?
Here are the options:
1. Minced Meat Soup
2. Sunday Soup
3. Gulas
&gt; 1, 2
Buy potatoes, frozen vegetable, minced meat, chicken with bones, noodles, soup vegetable.
</snippet></ROW><ROW><id>10789803</id><snippet>collections.Counter</snippet></ROW><ROW><id>10789860</id><snippet>(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03)
</snippet></ROW><ROW><id>10789999</id><snippet>str.format()</snippet></ROW><ROW><id>10789999</id><snippet>%</snippet></ROW><ROW><id>10789999</id><snippet>&gt;&gt;&gt; hour = 1
&gt;&gt;&gt; am_pm = "am"
&gt;&gt;&gt; print('{:02d}:00 {}'.format(hour, am_pm))
01:00 am
</snippet></ROW><ROW><id>10790247</id><snippet>mwclient</snippet></ROW><ROW><id>10790247</id><snippet>httplib</snippet></ROW><ROW><id>10790247</id><snippet>python-wikitools</snippet></ROW><ROW><id>10790247</id><snippet>urllib2</snippet></ROW><ROW><id>10790305</id><snippet>from visual import *

scene.title = "Faces example"
scene.width = 600
scene.height = 400

f = frame()
tri = faces(
    pos = [
        [0.,0.,0.], [1.,0.,0.], [0.,1.,0.],   # first tri - vertices
        [0.,0.,0.], [-1.,0.,0.], [0.,-1.,0.]  # second tri - vertices
    ],
    color = [
        [1.,0.,0.], [0.5,0.5,0.], [0.,1.,0.], # first tri - colors
        [0.,0.,1.], [0.,0.5,0.5], [0.,1.,0.]  # second tri - colors
    ],
    frame = f
)

tri.make_normals()
tri.make_twosided()

while True:
    rate(100)
    f.rotate(angle=0.01)
</snippet></ROW><ROW><id>10790310</id><snippet>cv2.circle(img, (x1, y1), 3, (0, 255, 0), -1)
</snippet></ROW><ROW><id>10790419</id><snippet>commit</snippet></ROW><ROW><id>10790469</id><snippet>D:\python\gis\new.py</snippet></ROW><ROW><id>10790469</id><snippet>new</snippet></ROW><ROW><id>10790520</id><snippet>Heavy_Support1(row = 3, column = 6)
Heavy_Support2(row = 2, column = 6)
Heavy_Support3(row = 3, column = 6)
</snippet></ROW><ROW><id>10790520</id><snippet>.grid</snippet></ROW><ROW><id>10790520</id><snippet>Heavy_Support1.grid(row = 3, column = 6)
Heavy_Support2.grid(row = 2, column = 6)
Heavy_Support3.grid(row = 3, column = 6)
</snippet></ROW><ROW><id>10790620</id><snippet>a.dtype.char == 'S'
</snippet></ROW><ROW><id>10790620</id><snippet>a.dtype.type is np.string_
</snippet></ROW><ROW><id>10790644</id><snippet>set()</snippet></ROW><ROW><id>10790644</id><snippet>&gt;&gt;&gt; list1=[1,2,3,4,5,6]
&gt;&gt;&gt; list2=[4,5,6,7,8,9]
&gt;&gt;&gt; sett=set(list1).union(set(list2))
&gt;&gt;&gt; print(sett)
{1, 2, 3, 4, 5, 6, 7, 8, 9}
</snippet></ROW><ROW><id>10790714</id><snippet>myCmpItem</snippet></ROW><ROW><id>10790714</id><snippet>myCmpItem = map(int, myCmpItem)
</snippet></ROW><ROW><id>10790714</id><snippet>myCmpItem</snippet></ROW><ROW><id>10790714</id><snippet>def dist(item):
    item = map(int, item)
    return sum(abs(item[i] - myCmpItem[i]) for i in xrange(len(item)))
</snippet></ROW><ROW><id>10790714</id><snippet>key</snippet></ROW><ROW><id>10790714</id><snippet>sorted(myList, key=dist)
</snippet></ROW><ROW><id>10790756</id><snippet>input</snippet></ROW><ROW><id>10790756</id><snippet>input</snippet></ROW><ROW><id>10790756</id><snippet>eval(raw_input())</snippet></ROW><ROW><id>10790756</id><snippet>eval</snippet></ROW><ROW><id>10790886</id><snippet>gawk -v RS="Song" 'NF{ print RS$0 &gt; "Song_"++n".txt" }' Song.txt
</snippet></ROW><ROW><id>10790886</id><snippet>[jaypal:~/Temp] cat Song.txt 
Song one
bla bla bla bla 
bla bla bla bla bla
Song two
yaya ya yaa 
blaaa bla bla blaaaaa
Song three
bla bla bla

[jaypal:~/Temp] gawk -v RS="Song" 'NF{ print RS$0 &gt; "Song_"++n".txt" }' Song.txt

[jaypal:~/Temp] ls -l S*
-rw-r--r--  1 jaypalsingh  staff  113 28 May 17:55 Song.txt
-rw-r--r--  1 jaypalsingh  staff   47 28 May 18:06 Song_1.txt
-rw-r--r--  1 jaypalsingh  staff   45 28 May 18:06 Song_2.txt
-rw-r--r--  1 jaypalsingh  staff   24 28 May 18:06 Song_3.txt

[jaypal:~/Temp] cat Song_1.txt 
Song one
bla bla bla bla 
bla bla bla bla bla

[jaypal:~/Temp] cat Song_2.txt 
Song two
yaya ya yaa 
blaaa bla bla blaaaaa

[jaypal:~/Temp] 
</snippet></ROW><ROW><id>10790907</id><snippet>print</snippet></ROW><ROW><id>10790907</id><snippet>for row in data: %&gt;
&lt;br&gt;&lt;%= row[1] =%&gt;
&lt;%
cur.close()
</snippet></ROW><ROW><id>10791051</id><snippet>recipients</snippet></ROW><ROW><id>10791051</id><snippet>success</snippet></ROW><ROW><id>10791051</id><snippet>compose</snippet></ROW><ROW><id>10791268</id><snippet>subprocess</snippet></ROW><ROW><id>10791268</id><snippet># I have no idea about convert's command line usage,
# so here's an example using echo.
subprocess.call(["echo", str(1 + 1), "bla"])
</snippet></ROW><ROW><id>10791324</id><snippet>ipython_dir</snippet></ROW><ROW><id>10791324</id><snippet>ipython_dir</snippet></ROW><ROW><id>10791324</id><snippet>c:\python32\pyton.exe setup.py install
</snippet></ROW><ROW><id>10791324</id><snippet>ipython3.exe</snippet></ROW><ROW><id>10791324</id><snippet>c:\python32\Scripts</snippet></ROW><ROW><id>10791324</id><snippet>ipython_dir</snippet></ROW><ROW><id>10791324</id><snippet>c:\python27\python.exe  ipython.py
</snippet></ROW><ROW><id>10791324</id><snippet>c:\python27\python.exe "C:\Program Files..\ipython_dir\ipython.py"
</snippet></ROW><ROW><id>10791324</id><snippet>c:\python32\Scripts\python3.exe
</snippet></ROW><ROW><id>10791574</id><snippet>NameError</snippet></ROW><ROW><id>10791574</id><snippet>self.assert_foo('doo')
</snippet></ROW><ROW><id>10791574</id><snippet>assert</snippet></ROW><ROW><id>10791574</id><snippet>self</snippet></ROW><ROW><id>10791574</id><snippet>.foo_doo</snippet></ROW><ROW><id>10791574</id><snippet>None</snippet></ROW><ROW><id>10791574</id><snippet>if self.foo_doo is not None:
</snippet></ROW><ROW><id>10791574</id><snippet>def has_foo(self, name):
    return hasattr(self, 'foo_'+name)

def foobar(self):
    if has_foo('doo'):
</snippet></ROW><ROW><id>10791574</id><snippet>None</snippet></ROW><ROW><id>10791574</id><snippet>has_foo</snippet></ROW><ROW><id>10791574</id><snippet>return getattr(self, 'foo_'+name, None) is not None 
</snippet></ROW><ROW><id>10791574</id><snippet>assert</snippet></ROW><ROW><id>10791574</id><snippet>__init__</snippet></ROW><ROW><id>10791574</id><snippet>self.foo_doo</snippet></ROW><ROW><id>10791574</id><snippet>TestCase.assertXxx</snippet></ROW><ROW><id>10791574</id><snippet>unittest</snippet></ROW><ROW><id>10791574</id><snippet>assert</snippet></ROW><ROW><id>10791615</id><snippet>'rw+'</snippet></ROW><ROW><id>10791615</id><snippet>'r+'</snippet></ROW><ROW><id>10791615</id><snippet>'w+'</snippet></ROW><ROW><id>10791615</id><snippet>try:
    f = open(self.working_file_path, "r+")
    buff = self._get_buffer()
    f.seek(0)
    f.truncate()
    f.write(self._get_text())
    #update modified flag
    buff.set_modified(False)
    f.close()

except IOError as e:
    print "File Doesnt Exist so bring up Save As..."
    ......
</snippet></ROW><ROW><id>10791730</id><snippet>sqrt</snippet></ROW><ROW><id>10791730</id><snippet>prange</snippet></ROW><ROW><id>10791777</id><snippet>__missing__</snippet></ROW><ROW><id>10791777</id><snippet>dict</snippet></ROW><ROW><id>10791777</id><snippet>&gt;&gt;&gt; class MyDefaultDict(dict):
...     def __missing__(self, key):
...         self[key] = key
...         return key
...
&gt;&gt;&gt; d = MyDefaultDict()
&gt;&gt;&gt; d['joe']
'joe'
&gt;&gt;&gt; d
{'joe': 'joe'}
</snippet></ROW><ROW><id>10791843</id><snippet>string = '0b011'
i = int(string, 2) # value of i is 3
</snippet></ROW><ROW><id>10791901</id><snippet>import numpy as np
import pylab as pl
from matplotlib.colors import hsv_to_rgb

V, H = np.mgrid[0:1:100j, 0:1:300j]
S = np.ones_like(V)
HSV = np.dstack((H,S,V))
RGB = hsv_to_rgb(HSV)
pl.imshow(RGB, origin="lower", extent=[0, 360, 0, 1], aspect=150)
pl.xlabel("H")
pl.ylabel("V")
pl.title("$S_{HSV}=1$")
pl.show()
</snippet></ROW><ROW><id>10792079</id><snippet>def mention_notifier(self):
    print self.stat_old

class Namespace(object): 
    pass

if __name__ == "__main__":
    import sys
    self=Namespace()
    self.stat_old = Set([])
    l = task.LoopingCall(mention_notifier,self).start(timeout)
</snippet></ROW><ROW><id>10792079</id><snippet>self</snippet></ROW><ROW><id>10792079</id><snippet>self</snippet></ROW><ROW><id>10792079</id><snippet>LoopingCall</snippet></ROW><ROW><id>10792079</id><snippet>self</snippet></ROW><ROW><id>10792079</id><snippet>self=...</snippet></ROW><ROW><id>10792079</id><snippet>self.attribute=...</snippet></ROW><ROW><id>10792206</id><snippet>&gt;&gt;&gt; col_fam.get_indexed_slices(clause)
&lt;generator object get_indexed_slices at 0x1fdcf00&gt;
</snippet></ROW><ROW><id>10792270</id><snippet>Orange</snippet></ROW><ROW><id>10792270</id><snippet>orange</snippet></ROW><ROW><id>10792270</id><snippet>orngXxxx</snippet></ROW><ROW><id>10792466</id><snippet>s='aáàAâÂbBcCçÇdDeéEfFgGğĞhHiİîÎíīıIjJkKlLmMnNóoOöÖpPqQrRsSşŞtTuUûúÛüÜvVwWxXyYzZ'
s2='aaaaaabbccccddeeeffgggghhiiiiiiiijjkkllmmnnoooooppqqrrssssttuuuuuuuvvwwxxyyzz'
trans = str.maketrans(s, s2)

def unikey(seq):
    return seq[0].translate(trans)
</snippet></ROW><ROW><id>10792466</id><snippet>key</snippet></ROW><ROW><id>10792466</id><snippet>sorted</snippet></ROW><ROW><id>10792562</id><snippet>Keithley = visa.instrument("TCPIP::192.168.0.2::INSTR")
</snippet></ROW><ROW><id>10792562</id><snippet>Keithley = visa.instrument("TCPIP1::192.168.0.2::INSTR")
</snippet></ROW><ROW><id>10792562</id><snippet>SOCKET</snippet></ROW><ROW><id>10792562</id><snippet>INSTR</snippet></ROW><ROW><id>10792630</id><snippet>def exception(self)
    try:
        Something.objects.all()
    except Exception, err:
        print err.message #(if you want)
        #raise err
        raise # The 'raise' statement with no arguments inside an error
              # handler tells Python to re-raise the exception with the 
              # original traceback intact
</snippet></ROW><ROW><id>10792997</id><snippet>c = (1, 2, 3)
a, b = c[0], c[1:]
</snippet></ROW><ROW><id>10792997</id><snippet>c</snippet></ROW><ROW><id>10792997</id><snippet>c</snippet></ROW><ROW><id>10792997</id><snippet>c[1:]</snippet></ROW><ROW><id>10792997</id><snippet>[]</snippet></ROW><ROW><id>10792997</id><snippet>c</snippet></ROW><ROW><id>10792997</id><snippet>c[0]</snippet></ROW><ROW><id>10792997</id><snippet>try:
    c = tuple(c)
    a, b = c[0], c[1:]
except TypeError, IndexError:
    # c is not iterable, or c is iterable, but it doesn't have any stuff in it.
    # do something else
    pass
</snippet></ROW><ROW><id>10793167</id><snippet>a.combine_first(b)
</snippet></ROW><ROW><id>10793200</id><snippet>form.csrf_token</snippet></ROW><ROW><id>10793200</id><snippet>print form.errors</snippet></ROW><ROW><id>10793200</id><snippet>form.validate()</snippet></ROW><ROW><id>10793200</id><snippet>form.validate_on_submit()</snippet></ROW><ROW><id>10793200</id><snippet>{}</snippet></ROW><ROW><id>10793200</id><snippet>print form.errors</snippet></ROW><ROW><id>10793200</id><snippet>@book.route('/book/new_no_csrf', methods=['GET', 'POST'])
def customers_new_no_csrf():
    form = BookNewForm()
    print form.errors
    if form.is_submitted():
        print "submitted"
    if form.validate():
        print "valid"
    print form.errors
    if form.validate_on_submit():
        flash("Successfully created a new book")
        return redirect(url_for('.books_show'))
    return render_template('books_new.html', form=form)
</snippet></ROW><ROW><id>10793200</id><snippet>{}
submitted
{'csrf_token': [u'CSRF token missing']}
127.0.0.1 - - [29/May/2012 02:01:08] "POST /book/new_no_csrf HTTP/1.1" 200 -
127.0.0.1 - - [29/May/2012 02:01:08] "GET /favicon.ico HTTP/1.1" 404 -
</snippet></ROW><ROW><id>10793260</id><snippet>zipfile.write</snippet></ROW><ROW><id>10793260</id><snippet>zf.write('foo/bar', 'bar') # save foo/bar as bar
</snippet></ROW><ROW><id>10793260</id><snippet>os.path.relpath</snippet></ROW><ROW><id>10793260</id><snippet>os.walk</snippet></ROW><ROW><id>10793260</id><snippet>import os.path
import zipfile

def zipbetter(target, source, env):
    # Open the zip file with appending, so multiple calls will add more files
    zf = zipfile.ZipFile(str(target[0]), 'a', zipfile.ZIP_DEFLATED)
    for s in source:
        # Find the path of the base file
        basedir = os.path.dirname(str(s))
        if s.isdir():
            # If the source is a directory, walk through its files
            for dirpath, dirnames, filenames in os.walk(str(s)):
                for fname in filenames:
                    path = os.path.join(dirpath, fname)
                    if os.path.isfile(path):
                        # If this is a file, write it with its relative path
                        zf.write(path, os.path.relpath(path, basedir))
        else:
            # Otherwise, just write it to the file
            flatname = os.path.basename(str(s))
            zf.write(str(s), flatname)
    zf.close()

# Make a builder using the zipbetter function, that takes SCons files
zipbetter_bld = Builder(action = zipbetter,
                        target_factory = SCons.Node.FS.default_fs.Entry,
                        source_factory = SCons.Node.FS.default_fs.Entry)

# Add the builder to the environment
env.Append(BUILDERS = {'ZipBetter' : zipbetter_bld})
</snippet></ROW><ROW><id>10793260</id><snippet>Zip</snippet></ROW><ROW><id>10793260</id><snippet>env.ZipBetter('foo.zip', 'foo/')
</snippet></ROW><ROW><id>10793451</id><snippet>lteDebugger.py</snippet></ROW><ROW><id>10793451</id><snippet>anomalyCheck</snippet></ROW><ROW><id>10793451</id><snippet>lteDebugger.py</snippet></ROW><ROW><id>10793451</id><snippet>lteDebugger.py</snippet></ROW><ROW><id>10793451</id><snippet>Source/
    debugger/
        anomalyCheck/
            __init__.py
            DLthput.py
            ULPowerStats.py
            ULThput.py
        config/
            __init__.py
            configure.py
        parserTools/
            __init__.py
            logParser.py
        utilities/
            __init__.py
            plotLogResults.py
        __init__.py
    lteDebugger.py
</snippet></ROW><ROW><id>10793451</id><snippet>lteDebugger.py</snippet></ROW><ROW><id>10793451</id><snippet>import debugger.anomalyCheck.DLthput.py</snippet></ROW><ROW><id>10793525</id><snippet>(?:...)</snippet></ROW><ROW><id>10793525</id><snippet>(...)</snippet></ROW><ROW><id>10793525</id><snippet>re</snippet></ROW><ROW><id>10793525</id><snippet>([\dA-Fa-f]{2}(?:[:-][\dA-Fa-f]{2}){5})
</snippet></ROW><ROW><id>10793525</id><snippet>[\dA-Fa-f]{2}</snippet></ROW><ROW><id>10793525</id><snippet>\d</snippet></ROW><ROW><id>10793525</id><snippet>A-Fa-f]</snippet></ROW><ROW><id>10793525</id><snippet>{2}</snippet></ROW><ROW><id>10793525</id><snippet>:</snippet></ROW><ROW><id>10793525</id><snippet>-</snippet></ROW><ROW><id>10793525</id><snippet>p = re.compile(([\dA-Fa-f]{2}(?:[:-][\dA-Fa-f]{2}){5}))
m = p.match("00:07:32:12:ac:de:ef")
if m:
    m.group(1)
</snippet></ROW><ROW><id>10793525</id><snippet>m.group(0)</snippet></ROW><ROW><id>10793525</id><snippet>p = re.compile(^([\dA-Fa-f]{2}(?:[:-][\dA-Fa-f]{2}){5})$)
</snippet></ROW><ROW><id>10793525</id><snippet>^</snippet></ROW><ROW><id>10793525</id><snippet>$</snippet></ROW><ROW><id>10793709</id><snippet>public static T MinBy&lt;T, C&gt;(this IEnumerable&lt;T&gt; items, Func&lt;T, C&gt; projection) where C : IComparable&lt;C&gt; {
    return items.Aggregate((acc, e) =&gt; projection(acc).CompareTo(projection(e)) &lt;= 0 ? acc : e);
}
</snippet></ROW><ROW><id>10793709</id><snippet>var pairs = new[] {Tuple.Create(2,"dog"), Tuple.Create(1, "cat"), Tuple.Create(3, "dragon"), Tuple.Create(1, "tiger")};
var min_pair = pairs.MinBy(e =&gt; e.Item1);
</snippet></ROW><ROW><id>10793946</id><snippet>tree = {}

for d in objects:
    ids = d['id'].split('.')
    w = d['w']
    # walk into the tree, creating nodes as necessary
    subtree = [0,tree]
    for n in ids:
        if n not in subtree[1]:
            subtree[1][n] = [0,{}] # w, list of nodes
        subtree = subtree[1][n] # recurse
    # subtree is now the relevant node, set w
    subtree[0] = w

## now we have a tree:
## &gt;&gt;&gt; pprint.pprint(tree, width=10)
## {'1': [0.2,
##       {'1': [0.8,
##              {'1': [0.6,
##                     {}],
##               '2': [0.7,
##                     {}],
##               '3': [0.4,
##                     {}]}],
##        '2': [0.2,
##              {'1': [0.3,
##                     {}]}],
##        '3': [0.3,
##              {}]}]}

# now walk the tree and extract the nodes:
result = []
def walk_subtree(subtree, path=[]):
    keyweights = [(subtree[key][0], key) for key in subtree]
    # walk through nodes at this level, outputting.
    for weight, key in sorted(keyweights, reverse=True):
        result.append(('.'.join(path + [key]), weight))
        walk_subtree(subtree[key][1], path=path+[key])

walk_subtree(tree)

##&gt;&gt;&gt; pprint.pprint(result)
##[('1', 0.2),
## ('1.1', 0.8),
## ('1.1.2', 0.7),
## ('1.1.1', 0.6),
## ('1.1.3', 0.4),
## ('1.3', 0.3),
## ('1.2', 0.2),
## ('1.2.1', 0.3)]
</snippet></ROW><ROW><id>10794138</id><snippet>@route('/static/:path#.+#', name='static')
def static(path):
    return static_file(path, root='static')
</snippet></ROW><ROW><id>10794138</id><snippet>   from bottle import TEMPLATE_PATH                                               

   import os                                                                      
   views_path = os.environ['APPDIR'] + '/repo/wsgi/views'                         
   TEMPLATE_PATH.insert(0,views_path)                                             
   app = default_app()  
</snippet></ROW><ROW><id>10794138</id><snippet>&lt;head&gt;                                                                         
&lt;script type="text/javascript" src="{{ get_url('static', path='js/main.js') }}" charset="utf-8"&gt;&lt;/script&gt;                                                
&lt;/head&gt;                                                                        
&lt;body&gt;                                                                         
&lt;p&gt;it's works&lt;/p&gt;                                                              
&lt;/body&gt;                                                                        
&lt;/html&gt;  
</snippet></ROW><ROW><id>10794220</id><snippet>len(ant)</snippet></ROW><ROW><id>10794220</id><snippet>for index, x in enumerate(ant):
</snippet></ROW><ROW><id>10794220</id><snippet>for current in range(len(ant)):</snippet></ROW><ROW><id>10794220</id><snippet>ant +='!'</snippet></ROW><ROW><id>10794220</id><snippet>ant.append('!')</snippet></ROW><ROW><id>10794299</id><snippet>strip()</snippet></ROW><ROW><id>10794299</id><snippet>with open("transfer-out/" + file, "r") as f:
    for line in f:
        cleanedLine = line.strip()
        if cleanedLine: # is not empty
            print(cleanedLine)
</snippet></ROW><ROW><id>10794299</id><snippet>python clean_number.py &gt; file.txt</snippet></ROW><ROW><id>10795138</id><snippet>q = taskqueue.Queue('slowQueue') 
task = taskqueue.Task(url='/worker/slow', params={'name': name})
q.add(task)
</snippet></ROW><ROW><id>10795379</id><snippet>    In [58]: df
    Out[58]:
           a    b  c
    0    one  0.2  0
    1    two  0.4  1
    2    two  0.9  0
    3  three  0.1  2
    4    one  0.0  4
    5    two  0.2  5

    In [41]: (df.a.values[:,numpy.newaxis] == df.a.unique()).astype(int)
    Out[41]:
    array([[1, 0, 0],
           [0, 1, 0],
           [0, 1, 0],
           [0, 0, 1],
           [1, 0, 0],
           [0, 1, 0]])

    In [54]: ((0 &lt;= df.b.values[:,numpy.newaxis]) &amp; (df.b.values[:,numpy.newaxis] &lt; 0.2)).astype(int)
    Out[54]:
    array([[0],
           [0],
           [0],
           [1],
           [1],
           [0]])

    In [59]: (df.c.values[:,numpy.newaxis] == df.c.unique()).astype(int)
    Out[59]:
    array([[1, 0, 0, 0, 0],
           [0, 1, 0, 0, 0],
           [1, 0, 0, 0, 0],
           [0, 0, 1, 0, 0],
           [0, 0, 0, 1, 0],
           [0, 0, 0, 0, 1]])
</snippet></ROW><ROW><id>10795379</id><snippet>pandas.concat</snippet></ROW><ROW><id>10795715</id><snippet>id()</snippet></ROW><ROW><id>10795715</id><snippet>id()</snippet></ROW><ROW><id>10795951</id><snippet>import operator
lst = [(0, 2), (1, 2), (0, 4), (2,6), (23, 2), (22, 6), (26, 2), (26, 2), (26, 2)]
lst.sort(key=operator.itemgetter(1))
for i in reversed(xrange(len(lst)-1)):
    start, length = lst[i]
    for j in xrange(i+1, len(lst)):
        lstart, llength = lst[j]
        if start &gt;= lstart and start + length &lt;= lstart + llength:
            del lst[i]
            break
print lst
#[(0, 4), (2, 6), (22, 6)]
</snippet></ROW><ROW><id>10796005</id><snippet>[/]
tools.staticdir.root = "/Users/phil/Dropbox/Projects/AppName"

[/images]
tools.staticdir.on = True
tools.staticdir.dir = "images"
</snippet></ROW><ROW><id>10796005</id><snippet>cherrypy.quickstart(AppName(), '/', 'AppName.config')
</snippet></ROW><ROW><id>10796005</id><snippet>def index(self):
    return "&lt;img src='/images/logo.jpeg'&gt;"
index.exposed = True
</snippet></ROW><ROW><id>10796073</id><snippet>"seller_account"</snippet></ROW><ROW><id>10796073</id><snippet>my_dict={'account_0':123445,'seller_account':454545,'seller_account_0':454676, 'seller_account_number':3433343}

for key, value in my_dict.iteritems():   # iter on both keys and values
        if key.startswith('seller_account'):
                print key, value
</snippet></ROW><ROW><id>10796073</id><snippet>result = [(key, value) for key, value in my_dict.iteritems() if key.startswith("seller_account")]
</snippet></ROW><ROW><id>10796725</id><snippet>zadd doc1 4.0 989
zadd doc1 4.0 991

zadd doc2 4.0 21
zadd doc2 4.0 991

zinterstore result 2 doc1 doc2
zrange result 0 -1 withscores
1) "991"
2) "8"
</snippet></ROW><ROW><id>10796725</id><snippet>doc1</snippet></ROW><ROW><id>10796725</id><snippet>doc2</snippet></ROW><ROW><id>10796725</id><snippet>zdiff</snippet></ROW><ROW><id>10796725</id><snippet>zunionstore only_in_doc1 2 doc1 doc2 weights 1 -1
zremrangebyscore only_in_doc1 -inf 0
zrange only_in_doc1 0 -1 withscores
1) "989"
2) "4"
</snippet></ROW><ROW><id>10796924</id><snippet>sys.exit</snippet></ROW><ROW><id>10796924</id><snippet>SystemExit</snippet></ROW><ROW><id>10796924</id><snippet>sys.exit</snippet></ROW><ROW><id>10796924</id><snippet>SystemExit</snippet></ROW><ROW><id>10796924</id><snippet>sys.exit</snippet></ROW><ROW><id>10796924</id><snippet>sys.exit</snippet></ROW><ROW><id>10797224</id><snippet>setUp</snippet></ROW><ROW><id>10797224</id><snippet>tearDown</snippet></ROW><ROW><id>10797224</id><snippet>setUp</snippet></ROW><ROW><id>10797224</id><snippet>tearDown</snippet></ROW><ROW><id>10797224</id><snippet>setUp</snippet></ROW><ROW><id>10797224</id><snippet>tearDown</snippet></ROW><ROW><id>10797224</id><snippet>class MyTestCase:
    def _setup_for_foo_tests():
        # blah blah blah
    def _setup_for_bar_tests():
        # blah blah blah
    def test_foo_1():
        self._setup_for_foo_tests()
        # test code
    def test_foo_2():
        self._setup_for_foo_tests()
        # test code
    def test_bar_1():
        self._setup_for_bar_tests()
        # test code
    # etc etc etc
</snippet></ROW><ROW><id>10797992</id><snippet>sleep()</snippet></ROW><ROW><id>10797992</id><snippet>exception_wrapper</snippet></ROW><ROW><id>10797992</id><snippet>sys.exc_info</snippet></ROW><ROW><id>10797992</id><snippet>tb = sys.exc_info()[2]
print tb.tb_next.tb_frame.f_locals['f']
</snippet></ROW><ROW><id>10798031</id><snippet>Queue</snippet></ROW><ROW><id>10798065</id><snippet>show</snippet></ROW><ROW><id>10798065</id><snippet>import sys
from PyQt4 import QtCore, QtGui

class StartQT4(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(StartQT4, self).__init__(parent)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.b = QtGui.QPushButton("exit", self, clicked=self.close)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = StartQT4()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>10798159</id><snippet>atexit</snippet></ROW><ROW><id>10798159</id><snippet>signal</snippet></ROW><ROW><id>10798432</id><snippet>%PYTHON_PATH%</snippet></ROW><ROW><id>10798671</id><snippet>edges_iter</snippet></ROW><ROW><id>10798671</id><snippet>import networkx as nx

g = Graph()
g.add_edges_from([(1, 2), (2, 3), (4,5), (1, 5), (2, 4)])
# Nodes are automatically added

for edge in g.edges_iter():
    print edge
    print 'Node 1:', edge[0]
    print 'Node 2:', edge[1]
</snippet></ROW><ROW><id>10798671</id><snippet>edge[0]</snippet></ROW><ROW><id>10798671</id><snippet>edge[1]</snippet></ROW><ROW><id>10798671</id><snippet>random.choice</snippet></ROW><ROW><id>10798671</id><snippet>from random import choice

... # Initialize graph

random_edge = choice(g.edges())
</snippet></ROW><ROW><id>10798671</id><snippet>random.sample</snippet></ROW><ROW><id>10798671</id><snippet>from random import sample

... # Initialize graph

# Get 2 random edges
random_edges = sample(g.edges(), 2)
</snippet></ROW><ROW><id>10798805</id><snippet>MyModel.objects.create(**{key: value for key, value in data_dict.iteritems() if key in MyModel._meta.get_all_field_names()})</snippet></ROW><ROW><id>10798807</id><snippet>&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; data = [("foo", 10), ("bar", None), ("baz", "some_string")]
&gt;&gt;&gt; urlencode(data)
'foo=10&amp;bar=None&amp;baz=some_string'
&gt;&gt;&gt; urlencode([x for x in data if x[1] is not None]) # no None's
'foo=10&amp;baz=some_string'
</snippet></ROW><ROW><id>10798853</id><snippet>urlparse.urljoin('http://www.domain.com/', i[1:])</snippet></ROW><ROW><id>10798853</id><snippet>urlparse.urljoin(response.url, i[1:])</snippet></ROW><ROW><id>10799465</id><snippet>\U00010000</snippet></ROW><ROW><id>10799465</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; highpoints = re.compile(u'[\U00010000-\U0010ffff]')
&gt;&gt;&gt; example = u'Some example text with a sleepy face: \U0001f62a'
&gt;&gt;&gt; highpoints.sub(u'', example)
u'Some example text with a sleepy face: '
</snippet></ROW><ROW><id>10799465</id><snippet>.translate()</snippet></ROW><ROW><id>10799465</id><snippet>None</snippet></ROW><ROW><id>10799465</id><snippet>&gt;&gt;&gt; nohigh = { i: None for i in xrange(0x10000, 0x110000) }
&gt;&gt;&gt; example.translate(nohigh)
u'Some example text with a sleepy face: '
</snippet></ROW><ROW><id>10799465</id><snippet>'\U0000ffff'</snippet></ROW><ROW><id>10799877</id><snippet>{{ form.hidden_tag() }}
{% for field in form if field.widget.input_type != 'hidden' %}
  {{ field.label }}
  {{ field }}
{% endfor %}
</snippet></ROW><ROW><id>10799877</id><snippet>form.hidden_tag()</snippet></ROW><ROW><id>10799895</id><snippet>AutoAddPolicy()</snippet></ROW><ROW><id>10799920</id><snippet>__eq__</snippet></ROW><ROW><id>10799920</id><snippet>&gt;&gt;&gt; def f():
...   pass
...
&gt;&gt;&gt; class A(object):
...   pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a == f
False
&gt;&gt;&gt; setattr(A, '__eq__', lambda x,y: True)
&gt;&gt;&gt; a == f
True
&gt;&gt;&gt; setattr(f.__class__, '__eq__', lambda x,y: True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'function'
</snippet></ROW><ROW><id>10800062</id><snippet>{http://www.openarchives.org/OAI/2.0/}record</snippet></ROW><ROW><id>10800062</id><snippet>tree</snippet></ROW><ROW><id>10800062</id><snippet>nsmap = {'oa':'http://www.openarchives.org/OAI/2.0/', 
         'dc':'http://purl.org/dc/elements/1.1/'}
tree.xpath('//oa:record[descendant::dc:publisher[contains(., "Alamos")]]',
            namespaces=nsmap)
</snippet></ROW><ROW><id>10800062</id><snippet>{http://www.openarchives.org/OAI/2.0/}record</snippet></ROW><ROW><id>10800062</id><snippet>{http://purl.org/dc/elements/1.1/}dc</snippet></ROW><ROW><id>10800347</id><snippet>Queue</snippet></ROW><ROW><id>10800347</id><snippet>Queue</snippet></ROW><ROW><id>10800347</id><snippet>from queue import Queue

class MyQueue(Queue):

    def put(self, item, block=True, timeout=None):
        ...

    def get(self, block=True, timeout=None):
        ...
</snippet></ROW><ROW><id>10800579</id><snippet>imshow</snippet></ROW><ROW><id>10800579</id><snippet>None</snippet></ROW><ROW><id>10800579</id><snippet>import numpy as np
import pylab as plt

# Your example data
A1 = np.zeros((3,3))
A2 = np.zeros((3,3))
A1[1,1] = 1
A2[2,2] = 1

# Apply a mask to filter out unused values
A1[A1==0] = None
A2[A2==0] = None

# Use different colormaps for each layer
pwargs = {'interpolation':'nearest'}
plt.imshow(A1,cmap=plt.cm.jet,**pwargs)
plt.imshow(A2,cmap=plt.cm.hsv,**pwargs)
plt.show()
</snippet></ROW><ROW><id>10800763</id><snippet>queries</snippet></ROW><ROW><id>10800763</id><snippet>import urllib
import urllib2
import json

url = 'https://www.googleapis.com/rpc'
requests = [{
  'method': 'freebase.text.get', 
  'apiVersion': 'v1', 
  'params': {
   'id': ['en','bob_dylan']
  }
},{
  'method': 'freebase.text.get', 
  'apiVersion': 'v1', 
  'params': {
    'id': ['en','blade_runner']
  }
}]
headers = { 'Content-Type': 'application/json' }
req = urllib2.Request(url, json.dumps(requests), headers)
response = urllib2.urlopen(req)
print response.read()
</snippet></ROW><ROW><id>10800804</id><snippet>&gt;&gt;&gt; execfile("ex.py")
</snippet></ROW><ROW><id>10800804</id><snippet>execfile</snippet></ROW><ROW><id>10800804</id><snippet>execfile</snippet></ROW><ROW><id>10800804</id><snippet>exec</snippet></ROW><ROW><id>10800804</id><snippet>eval</snippet></ROW><ROW><id>10800804</id><snippet>execfile</snippet></ROW><ROW><id>10800994</id><snippet>    elif isinstance(v, dict):
        getValue(v, key)
</snippet></ROW><ROW><id>10800994</id><snippet>return getValue(key)</snippet></ROW><ROW><id>10801195</id><snippet>1.) yum install nltk*
2.) easy_install pyyaml
3.) python
4.) &gt;&gt;&gt; import nltk
5.) &gt;&gt;&gt; nltk.download()
6.) got the error 
</snippet></ROW><ROW><id>10801195</id><snippet>1.) yum install libyaml libyaml-devel
2.) easy_install pyyaml
3.) easy_install nltk
4.) python
5.) import nltk
6.) nltk.download()
7.) download corpus'
</snippet></ROW><ROW><id>10801380</id><snippet>        position = random.randrange(high,low)
</snippet></ROW><ROW><id>10801380</id><snippet>        position = random.randrange(low,high)
</snippet></ROW><ROW><id>10801380</id><snippet>wordchoice</snippet></ROW><ROW><id>10801380</id><snippet>getword</snippet></ROW><ROW><id>10801380</id><snippet>-len(wordchoice)</snippet></ROW><ROW><id>10801380</id><snippet>len(wordchoice)-1</snippet></ROW><ROW><id>10801380</id><snippet>0</snippet></ROW><ROW><id>10801380</id><snippet>len(wordchoice)-1</snippet></ROW><ROW><id>10801380</id><snippet>random.choice(wordchoice)</snippet></ROW><ROW><id>10801380</id><snippet>the</snippet></ROW><ROW><id>10801380</id><snippet>h
t
t
e
h 
e
t
e
t
e
</snippet></ROW><ROW><id>10801380</id><snippet>wordjumble</snippet></ROW><ROW><id>10801543</id><snippet>"$@"</snippet></ROW><ROW><id>10801543</id><snippet>#!/bin/sh
python "$@"
</snippet></ROW><ROW><id>10801543</id><snippet>$ /tmp/test.sh /tmp/test.py firstParam "file with spaces.txt"
['/tmp/test.py', 'firstParam', 'file with spaces.txt']
</snippet></ROW><ROW><id>10801543</id><snippet>/tmp/test.py</snippet></ROW><ROW><id>10801543</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>10801624</id><snippet>self.url = self.queue.get()</snippet></ROW><ROW><id>10801624</id><snippet>self.page = getPage(self.url)</snippet></ROW><ROW><id>10801624</id><snippet>self.page = getPage(self.queue.get())</snippet></ROW><ROW><id>10801624</id><snippet>task_done()</snippet></ROW><ROW><id>10801624</id><snippet>get()</snippet></ROW><ROW><id>10801624</id><snippet>task_done()</snippet></ROW><ROW><id>10801624</id><snippet>join()</snippet></ROW><ROW><id>10801624</id><snippet>get()</snippet></ROW><ROW><id>10801624</id><snippet>def run(self):
    while 1:
        print self.getName()+" started"
        url = self.queue.get() # &lt;-- note that we're blocking here to wait for a url from the queue
        self.page = getPage(url)
        self.parsedPage = getParsedPage(self.page, fix=True)
        self.urls = getLinksFromParsedPage(self.parsedPage)

        for url in self.urls:

            self.fp = hashlib.sha1(url).hexdigest()

            #url-seen check
            Crawler.varLock.acquire() #lock for global variable g_URLs
            if self.fp in g_URLsDict:
                Crawler.varLock.release() #releasing lock
            else:
                #print url+" does not exist"
                Crawler.count +=1
                print "total links: %d"%len(g_URLsDict)
                print self.fp
                g_URLsDict[self.fp] = url
                Crawler.varLock.release() #releasing lock
                self.queue.put(url)

                print self.getName()+ " %d"%self.queue.qsize()

        self.queue.task_done() # &lt;-- We've processed the url this thread pulled off the queue so indicate we're done with it.
</snippet></ROW><ROW><id>10801903</id><snippet>When using Django's formatting system, dates and numbers on templates 
will be displayed using the format specified for the current locale. 
...Django will also use localized formats when parsing data in forms. 
</snippet></ROW><ROW><id>10801903</id><snippet>USE_L10N = True</snippet></ROW><ROW><id>10801903</id><snippet>FR</snippet></ROW><ROW><id>10801903</id><snippet>10,45</snippet></ROW><ROW><id>10801903</id><snippet>10.45</snippet></ROW><ROW><id>10801903</id><snippet>{{ value|date:"SHORT_DATE_FORMAT" }}</snippet></ROW><ROW><id>10801903</id><snippet>strftime('%c')</snippet></ROW><ROW><id>10801903</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('2012-05-30 15:30', '%Y-%m-%d %H:%M').strftime('%c')
'Wed May 30 15:30:00 2012'
&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.getlocale()
(None, None)
&gt;&gt;&gt; locale.getdefaultlocale()
('en_US', 'UTF-8')
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, "fr_FR.UTF-8")
'fr_FR.UTF-8'
&gt;&gt;&gt; datetime.datetime.strptime('2012-05-30 15:30', '%Y-%m-%d %H:%M').strftime('%c')
'Mer 30 mai 15:30:00 2012'
</snippet></ROW><ROW><id>10801903</id><snippet>$LANG</snippet></ROW><ROW><id>10802051</id><snippet>table = []
for each_line in homefile:
##doesn't include first line
        arr1 = each_line.strip("\n").split('\t')
        table.append(arr1)
##created a list of lists(matrix); each row as one entry in table(list)
cols = zip(*table)
##this switches rows and columns
</snippet></ROW><ROW><id>10802460</id><snippet>__eq__</snippet></ROW><ROW><id>10802460</id><snippet>__hash__</snippet></ROW><ROW><id>10802460</id><snippet>__hash__</snippet></ROW><ROW><id>10802460</id><snippet>__eq__</snippet></ROW><ROW><id>10802460</id><snippet>__hash__</snippet></ROW><ROW><id>10802460</id><snippet>__eq__</snippet></ROW><ROW><id>10802460</id><snippet>__eq__</snippet></ROW><ROW><id>10802460</id><snippet>__eq__</snippet></ROW><ROW><id>10802571</id><snippet>from collections import defaultdict
import datetime

class ElectricVehicle(object):
    ev_by_id = {}
    ev_by_battery = defaultdict(list)

    @classmethod
    def find(cls, id=None, battery=None):
        if id is not None:
            return [cls.ev_by_id[id]]
        elif battery is not None:
            return cls.ev_by_battery[battery]
        else:
            return []

    def __init__(self, id, battery, states):
        self.id = id
        ElectricVehicle.ev_by_id[id] = self

        self.battery = battery
        ElectricVehicle.ev_by_battery[battery].append(self)

        self.states = list(states)

    def state_at(self, time):
        return self.states[(time.hour*60 + time.minute)/5]

ElectricVehicle(12345, 24, [0.99, 0.99, 0.99])
ElectricVehicle(12346, 30, [0.90, 0.90, 0.89])

evs = ElectricVehicle.find(battery=24)
for ev in evs:
    time = datetime.time(0,3,0)    # 00:03:00
    print("{}: {}".format(ev.id, ev.state_at(time)))

# will print "12345: 0.99"
</snippet></ROW><ROW><id>10802574</id><snippet>location = '/Users/spyros/Desktop/3NY8MODELSHUMAN/HomologyModels' 
for filename in os.listdir(location):
    filename = os.path.join(location, filename)
</snippet></ROW><ROW><id>10802648</id><snippet>Content-Type</snippet></ROW><ROW><id>10802648</id><snippet>request.add_header(contenttype, 'application/octet-stream')
</snippet></ROW><ROW><id>10802648</id><snippet>request.add_header('Content-Type', contenttype)
</snippet></ROW><ROW><id>10803060</id><snippet>.split()</snippet></ROW><ROW><id>10803060</id><snippet>&gt;&gt;&gt; ex = ' 8000.5   16745     0.1257'
&gt;&gt;&gt; ex.split()
['8000.5', '16745', '0.1257']
</snippet></ROW><ROW><id>10803060</id><snippet>float()</snippet></ROW><ROW><id>10803060</id><snippet>map</snippet></ROW><ROW><id>10803060</id><snippet>&gt;&gt;&gt; ex = ' 8000.5   16745     0.1257'
&gt;&gt;&gt; map(float, ex.split())
[8000.5, 16745.0, 0.1257]
</snippet></ROW><ROW><id>10803229</id><snippet>import xlrd
import csv

with xlrd.open_workbook('a_file.xls') as wb:
    sh = wb.sheet_by_index(0)  # or wb.sheet_by_name('name_of_the_sheet_here')
    with open('a_file.csv', 'wb') as f:
        c = csv.writer(f)
        for r in range(sh.nrows):
            c.writerow(sh.row_values(r))
</snippet></ROW><ROW><id>10803229</id><snippet>import openpyxl
import csv

wb = openpyxl.load_workbook('test.xlsx')
sh = wb.get_active_sheet()
with open('test.csv', 'wb') as f:
    c = csv.writer(f)
    for r in sh.rows:
        c.writerow([cell.value for cell in r])
</snippet></ROW><ROW><id>10803241</id><snippet>autocommit</snippet></ROW><ROW><id>10803241</id><snippet>commit</snippet></ROW><ROW><id>10803241</id><snippet>InnoDB</snippet></ROW><ROW><id>10803241</id><snippet>MyISAM</snippet></ROW><ROW><id>10803350</id><snippet>When /^I send a GET request for "([^\"]*)"$/ do |path|
  get path
end

When /^I send a POST request to "([^\"]*)" with the following:$/ do |path, body|
  post path, body
end

When /^I send a PUT request to "([^\"]*)" with the following:$/ do |path, body|
  put path, body
end

When /^I send a DELETE request to "([^\"]*)"$/ do |path|
  delete path
end

Then /^the response should be "([^\"]*)"$/ do |status|
  last_response.status.should == status.to_i
end

Then /^the response JSON should be:$/ do |body|
  JSON.parse(last_response.body).should == JSON.parse(body)
end
</snippet></ROW><ROW><id>10803350</id><snippet>Feature: The users endpoints

  Scenario: Creating a user
    When I send a POST request to "/users" with the following:
      """
      { "name": "Swift", "status": "awesome" }
      """
    Then the response should be "200"

  Scenario: Listing users
    Given I send a POST request to "/users" with the following:
      """
      { "name": "Swift", "status": "awesome" }
      """
    When I send a GET request for "/users"
    Then the response should be "200"
    And the response JSON should be:
      """
      [{ "name": "Swift", "status": "awesome" }]
      """

   ... etc ...
</snippet></ROW><ROW><id>10803532</id><snippet>pip install mypackage</snippet></ROW><ROW><id>10804032</id><snippet>from collections import defaultdict
names=defaultdict(lambda :defaultdict(list))

with open('f.txt') as f:
   lines = [l.split() for l in f.readlines() if l.strip()]
   for l in lines:
       names[l[0]][l[1]].append(float(l[2]))
</snippet></ROW><ROW><id>10804032</id><snippet>for k,v in names.items():
    for kk,vv in v.items():
        print k,kk,len(vv),max(vv)-min(vv)
</snippet></ROW><ROW><id>10804032</id><snippet>00:12:34:23:45:67 136 1 0.0
00:12:34:23:45:67 134 3 432.104
45:34:23:45:44:23 133 1 0.0
3f:32:dr:45:34:r5 133 1 0.0
</snippet></ROW><ROW><id>10804059</id><snippet>im2 = cv2.imread(imgPath)
im = cv2.cvtColor(im2, cv2.COLOR_BGR2GRAY)
surfDetector = cv2.FeatureDetector_create("SURF")
surfDescriptorExtractor = cv2.DescriptorExtractor_create("SURF")
keypoints = surfDetector.detect(im)
(keypoints, descriptors) = surfDescriptorExtractor.compute(im,keypoints)
</snippet></ROW><ROW><id>10804245</id><snippet>local_utc</snippet></ROW><ROW><id>10804245</id><snippet>user_utc</snippet></ROW><ROW><id>10804245</id><snippet>local_utc-user_utc</snippet></ROW><ROW><id>10804245</id><snippet>datetime</snippet></ROW><ROW><id>10804245</id><snippet>time</snippet></ROW><ROW><id>10804245</id><snippet>pytz</snippet></ROW><ROW><id>10804245</id><snippet>import pytz
import datetime as dt
import time

eastern = pytz.timezone('US/Eastern')
kolkata = pytz.timezone('Asia/Kolkata')

naive_timetuple = time.localtime(0)
print(naive_timetuple)
# time.struct_time(tm_year=1969, tm_mon=12, tm_mday=31, tm_hour=19, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=365, tm_isdst=0)
</snippet></ROW><ROW><id>10804245</id><snippet>naive_datetime = dt.datetime(*naive_timetuple[:6])
print(naive_datetime)
# 1969-12-31 19:00:00

localized_datetime = eastern.localize(naive_datetime)
print(localized_datetime)
# 1969-12-31 19:00:00-05:00
</snippet></ROW><ROW><id>10804245</id><snippet>astimezone</snippet></ROW><ROW><id>10804245</id><snippet>kolkata_datetime = localized_datetime.astimezone(kolkata)
print(kolkata_datetime)
# 1970-01-01 05:30:00+05:30
</snippet></ROW><ROW><id>10804245</id><snippet>kolkata_timetuple = kolkata_datetime.timetuple()
print(kolkata_timetuple)
# time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=5, tm_min=30, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
</snippet></ROW><ROW><id>10804324</id><snippet>from scrapy.command import ScrapyCommand
import urllib
import urllib2
from scrapy import log

class AllCrawlCommand(ScrapyCommand):

requires_project = True
default_settings = {'LOG_ENABLED': False}

def short_desc(self):
    return "Schedule a run for all available spiders"

def run(self, args, opts):
    url = 'http://localhost:6800/schedule.json'
    for s in self.crawler.spiders.list():
        values = {'project' : 'YOUR_PROJECT_NAME', 'spider' : s}
        data = urllib.urlencode(values)
        req = urllib2.Request(url, data)
        response = urllib2.urlopen(req)
        log.msg(response)
</snippet></ROW><ROW><id>10804324</id><snippet>COMMANDS_MODULE = 'YOURPROJECTNAME.commands'
</snippet></ROW><ROW><id>10804324</id><snippet>scrapy allcrawl
</snippet></ROW><ROW><id>10804350</id><snippet># Create soup from the html. (Here I am assuming that you have already read the file into
# the variable "html" as a string).
soup = BeautifulSoup(html) 
# Find all divs with class="address"
address_class = soup.find_all('div', {"class": "address"})
# Loop over the results
for row in address_class:
  # Each result has one &lt;a&gt; tag, and we need to get the href property from it.
  print row.find('a').get('href')
</snippet></ROW><ROW><id>10804423</id><snippet>prepare</snippet></ROW><ROW><id>10804423</id><snippet>SearchField</snippet></ROW><ROW><id>10804423</id><snippet>prepare_template</snippet></ROW><ROW><id>10804423</id><snippet>use_template</snippet></ROW><ROW><id>10804423</id><snippet>def prepare_myfield(self, obj):
    return self.cleaned_data['field1'] + '\n' + self.cleaned_data['field2']
</snippet></ROW><ROW><id>10804617</id><snippet>++</snippet></ROW><ROW><id>10804617</id><snippet>+=</snippet></ROW><ROW><id>10804617</id><snippet>x += 1
</snippet></ROW><ROW><id>10804677</id><snippet>def splitWord(word, numOfChar): 
    if len(word) &gt; 0:
        return [word[:numOfChar]] + splitWord(word[numOfChar:], numOfChar)
    else:
        return []
</snippet></ROW><ROW><id>10804991</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([0.5,  0.75,  1.5])
&gt;&gt;&gt; np.diff(a)
array([ 0.25,  0.75])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>10805177</id><snippet>subprocess</snippet></ROW><ROW><id>10805177</id><snippet>git</snippet></ROW><ROW><id>10805177</id><snippet>PATH</snippet></ROW><ROW><id>10805177</id><snippet>GitPython</snippet></ROW><ROW><id>10805177</id><snippet>git</snippet></ROW><ROW><id>10805219</id><snippet>\D</snippet></ROW><ROW><id>10805431</id><snippet>from bittorrent import Tracker
tracker = Tracker()
tracker.run()
</snippet></ROW><ROW><id>10805633</id><snippet>%Y-%m-%dT%H:%M:%S.%fZ
</snippet></ROW><ROW><id>10805633</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')
datetime.datetime(2012, 5, 29, 19, 30, 3, 283000)
</snippet></ROW><ROW><id>10805633</id><snippet>Z</snippet></ROW><ROW><id>10805690</id><snippet>from datetime import datetime, timedelta

# This does not check for crossing from Sunday to Monday
def convert_dt(start_dt, journey):
    begin_weekday, begin_hour, begin_minute = journey[0]
    end_weekday, end_hour, end_minute = journey[1]

    begin_dt = start_dt + timedelta(days=begin_weekday)
    begin_dt += timedelta(hours=begin_hour, minutes=begin_minute)

    end_dt = start_dt + timedelta(days=end_weekday)
    end_dt += timedelta(hours=end_hour,minutes=end_minute)
    return (begin_dt, end_dt)

def get_slot_journeys(start_dt, journeys):           
    next_dt = start_dt
    slot_count =  60/5 * 24 * 7
    slot_dict = {}

    journey_dts = []
    #convert journey begin and end to datetimes
    for index in range(len(journeys['begin_weekday'])):
        next_journey = [(journeys['begin_weekday'][index],
                         journeys['begin_hour'][index],
                         journeys['begin_minute'][index],),
                        (journeys['end_weekday'][index],
                         journeys['end_hour'][index],
                         journeys['end_minute'][index],)
                       ]
        journey_dts.append(convert_dt(start_dt, next_journey))

    for slot in range(slot_count):
        slot_dict[next_dt] = 0
        for journey_start, journey_end in journey_dts:
            if next_dt &gt;= journey_start and next_dt &lt;= journey_end:
                slot_dict[next_dt] = slot_dict[next_dt] + 1                    

        next_dt += timedelta(minutes=(5))

    return slot_dict

if __name__ == "__main__":
    start_dt = datetime(2012, 1, 2, 0, 0)    

    journeys = {'begin_weekday': [0, 0],
                'begin_hour': [14, 18],
                'begin_minute': [20, 30],
                'end_weekday': [0, 1],
                'end_hour': [19, 12],
                'end_minute': [15, 55],
               }
    slot_dict = get_slot_journeys(start_dt, journeys)       
    slot_keys = slot_dict.keys()
    slot_keys.sort()

    for key in slot_keys:
        if slot_dict[key]:    
            print key, slot_dict[key]
</snippet></ROW><ROW><id>10805766</id><snippet>n = 0.000002
print('{:f}'.format(n))
0.000002
</snippet></ROW><ROW><id>10805766</id><snippet>print('%f' % n)
</snippet></ROW><ROW><id>10806032</id><snippet>In [1]: u'string' == 'string'
Out[1]: True
</snippet></ROW><ROW><id>10806131</id><snippet>import textwrap

print("\n".join(textwrap.wrap("This is my sooo long title", 10)))
</snippet></ROW><ROW><id>10806131</id><snippet>This is my
sooo long
title
</snippet></ROW><ROW><id>10806164</id><snippet>HEAD = 0</snippet></ROW><ROW><id>10806164</id><snippet>SHRINKSNAKE = pygame.USEREVENT+0
</snippet></ROW><ROW><id>10806164</id><snippet>runGame</snippet></ROW><ROW><id>10806164</id><snippet>direction = RIGHT</snippet></ROW><ROW><id>10806164</id><snippet>pygame.time.set_timer(SHRINKSNAKE, 4*1000)
</snippet></ROW><ROW><id>10806164</id><snippet>runGame</snippet></ROW><ROW><id>10806164</id><snippet>elif event.type == KEYDOWN:</snippet></ROW><ROW><id>10806164</id><snippet>elif</snippet></ROW><ROW><id>10806164</id><snippet>elif event.type == SHRINKSNAKE:
  if len(wormCoords) &gt; 2:
    del wormCoords[-1]
</snippet></ROW><ROW><id>10806164</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>10806258</id><snippet>os.spawnl</snippet></ROW><ROW><id>10806258</id><snippet>os.P_NOWAIT</snippet></ROW><ROW><id>10806258</id><snippet>/q</snippet></ROW><ROW><id>10806258</id><snippet>-q</snippet></ROW><ROW><id>10806308</id><snippet>gcd(5,0)</snippet></ROW><ROW><id>10806308</id><snippet>gcd(5,6)</snippet></ROW><ROW><id>10806308</id><snippet>gcd</snippet></ROW><ROW><id>10806308</id><snippet>5</snippet></ROW><ROW><id>10806308</id><snippet>0</snippet></ROW><ROW><id>10806308</id><snippet>if m%n==r:</snippet></ROW><ROW><id>10806308</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>10806308</id><snippet>r=int()</snippet></ROW><ROW><id>10806308</id><snippet>r</snippet></ROW><ROW><id>10806308</id><snippet>return gcd(m,n)==gcd(n,r)</snippet></ROW><ROW><id>10806308</id><snippet>gcd</snippet></ROW><ROW><id>10806505</id><snippet>class SubWindow:

    def change(self):
        self.s1Var.set("new1")

    def createWidgets(self, root):
        self.s1Var = StringVar(); self.s1Var.set("string1")

        self.s1Label = Label(root,textvariable=self.s1Var)
        self.s1Label.grid(row=0, column=5)

        self.changeButton = Button(root, text="Change", command=self.change)
        self.changeButton.grid(row=9, column=7)
</snippet></ROW><ROW><id>10806534</id><snippet>https://www.reaxys.com/reaxys/secured/customset.do?performed=true&amp;action=get_preparations&amp;searchParam=1287039&amp;workflowId=1338317532514&amp;workflowStep=1
</snippet></ROW><ROW><id>10806554</id><snippet>from genshi.core import Markup 
description = Markup(description)
</snippet></ROW><ROW><id>10806555</id><snippet>get</snippet></ROW><ROW><id>10806555</id><snippet>Entry</snippet></ROW><ROW><id>10806555</id><snippet>from Tkinter import *
root = Tk()

e1 = Entry(root)
e2 = Entry(root)
l = Label(root)
def callback():
    total = sum(int(e.get()) for e in (e1, e2))
    l.config(text="answer = %s" % total)
b = Button(root, text="add them", command=callback)
for widget in (e1, e2, l, b):
    widget.pack()
b.mainloop()
</snippet></ROW><ROW><id>10806575</id><snippet>addopts = --ignore=setup.py
</snippet></ROW></DATA>