<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>14859642</id><snippet>io.BytesIO</snippet></ROW><ROW><id>14859642</id><snippet>&gt;&gt;&gt; import io
&gt;&gt;&gt; file = io.BytesIO(b'this is a byte string')
&gt;&gt;&gt; file.read(2)
b'th'
&gt;&gt;&gt; file.read(2)
b'is'
</snippet></ROW><ROW><id>14859842</id><snippet>.executemany()</snippet></ROW><ROW><id>14859942</id><snippet>MyText1, MyText2 = MyText[:max_char], MyText[max_char:]
</snippet></ROW><ROW><id>14859942</id><snippet>max_char</snippet></ROW><ROW><id>14859942</id><snippet>max_char</snippet></ROW><ROW><id>14859969</id><snippet>self.F</snippet></ROW><ROW><id>14859969</id><snippet>First.__init__</snippet></ROW><ROW><id>14859969</id><snippet>Second.__init__</snippet></ROW><ROW><id>14859969</id><snippet>First.__init__</snippet></ROW><ROW><id>14859969</id><snippet>obj.vF</snippet></ROW><ROW><id>14859969</id><snippet>First.__init__</snippet></ROW><ROW><id>14859969</id><snippet>obj</snippet></ROW><ROW><id>14859969</id><snippet>self.F</snippet></ROW><ROW><id>14859969</id><snippet>RuntimeError</snippet></ROW><ROW><id>14859969</id><snippet>Second.F</snippet></ROW><ROW><id>14859969</id><snippet>vF</snippet></ROW><ROW><id>14860159</id><snippet>.tell()</snippet></ROW><ROW><id>14860159</id><snippet>import os

fileobj.seek(0, os.SEEK_END)
size = fileobj.tell()
fileobj.seek(0, os.SEEK_SET)
</snippet></ROW><ROW><id>14860159</id><snippet>os.SEEK_*</snippet></ROW><ROW><id>14860159</id><snippet>.seek()</snippet></ROW><ROW><id>14860159</id><snippet>os.fstat()</snippet></ROW><ROW><id>14860159</id><snippet>import os

size = os.fstat(fileobj.fileno()).st_size
</snippet></ROW><ROW><id>14860506</id><snippet>import os
filename = '/home/path/filename'
f = open(os.path.join(os.path.dirname(__file__), filename),"w")
f.close()

# IOError: [Errno 2] No such file or directory: '/home/path/filename'
</snippet></ROW><ROW><id>14860506</id><snippet>filename</snippet></ROW><ROW><id>14860506</id><snippet>os.path.join</snippet></ROW><ROW><id>14860506</id><snippet>filename</snippet></ROW><ROW><id>14860506</id><snippet>In [20]: filename = '/home/path/filename'

In [21]: os.path.join(os.path.dirname(__file__), filename)
Out[21]: '/home/path/filename'
</snippet></ROW><ROW><id>14860506</id><snippet>open</snippet></ROW><ROW><id>14860557</id><snippet>extend</snippet></ROW><ROW><id>14860557</id><snippet>vol.extend((volumeA, volumeB, volumeC))
</snippet></ROW><ROW><id>14860557</id><snippet>vol.extend(value for name, value in locals().items() if name.startswith('volume'))
</snippet></ROW><ROW><id>14860557</id><snippet>vol.extend(value for name, value in sorted(locals().items(), key=lambda item: item[0]) if name.startswith('volume'))
</snippet></ROW><ROW><id>14860757</id><snippet>import numpy as np 
import random
e1=np.random.random((15,)).reshape(-1,1)
e2=e1+0.05*np.random.standard_normal(15).reshape(-1,1)
e1[random.sample(range(e1.shape[0]), 5),:] = np.nan
e2[random.sample(range(e2.shape[0]), 5),:] = np.nan
np.concatenate((e1,e2),axis=1)
</snippet></ROW><ROW><id>14861036</id><snippet>test = [w[0] for w in dictSentCheck(sentCheck)]
</snippet></ROW><ROW><id>14861036</id><snippet>lt</snippet></ROW><ROW><id>14861036</id><snippet>gt</snippet></ROW><ROW><id>14861036</id><snippet>lt</snippet></ROW><ROW><id>14861036</id><snippet>gt</snippet></ROW><ROW><id>14861036</id><snippet>def split_on_angle_brackets(words):
    para = []
    bracket_stack = 0
    for word in words:
        if bracket_stack:
            if word == 'gt':
                bracket_stack -= 1
            elif word == 'lt':
                bracket_stack += 1
        else:
            if word == 'lt':
                if len(para) &gt;= 7:
                    yield ' '.join(para)
                para = []
                bracket_stack = 1
            else:
                para.append(word)
    if para:
        yield ' '.join(para)
</snippet></ROW><ROW><id>14861036</id><snippet>print('\n'.join(split_on_angle_brackets(test)))
</snippet></ROW><ROW><id>14861036</id><snippet>English cricket cuts ties with Zimbabwe Wednesday June text
print EMAIL THIS ARTICLE your name your email address recipient's name recipient's email address
add another recipient your comment Send Mail
The England and Wales Cricket Board ECB announced it was suspending all ties with Zimbabwe and was cancelling Zimbabwe's tour of England next year
</snippet></ROW><ROW><id>14861134</id><snippet>**</snippet></ROW><ROW><id>14861134</id><snippet>3**3**3</snippet></ROW><ROW><id>14861134</id><snippet>3**27</snippet></ROW><ROW><id>14861134</id><snippet>4**4**4</snippet></ROW><ROW><id>14861134</id><snippet>4**256</snippet></ROW><ROW><id>14861216</id><snippet>s = "abcca"
length = len(s)
i = 0

while i &lt; length / 2 + 1:
    if s[i] != s[-i - 1]:
        print "Not Palindrome"
        break
    i += 1
else:
    print "Palidrome"
</snippet></ROW><ROW><id>14861216</id><snippet>else</snippet></ROW><ROW><id>14861216</id><snippet>while</snippet></ROW><ROW><id>14861216</id><snippet>break</snippet></ROW><ROW><id>14861216</id><snippet>while</snippet></ROW><ROW><id>14861216</id><snippet>single</snippet></ROW><ROW><id>14861216</id><snippet>Python</snippet></ROW><ROW><id>14861216</id><snippet>if s == s[::-1]: 
    print "Palindrome"
</snippet></ROW><ROW><id>14861322</id><snippet>some_list.append(item)                  // O(1)
some_list.sort()                        // ??
</snippet></ROW><ROW><id>14861322</id><snippet>bisect.insort_left(some_list, item)
</snippet></ROW><ROW><id>14861480</id><snippet>fetchall()</snippet></ROW><ROW><id>14861480</id><snippet># Use fetchall():
((points,),) = cursor.fetchall()  # points = 56L

# Or, if you use fetchone():
(points,) = cursor.fetchone()     # points = 56L
</snippet></ROW><ROW><id>14861628</id><snippet>enumerate</snippet></ROW><ROW><id>14861628</id><snippet>def enumerate(sequence, start=0):
    n = start
    for elem in sequence:
        yield n, elem
        n += 1
</snippet></ROW><ROW><id>14861628</id><snippet>__iter__</snippet></ROW><ROW><id>14861628</id><snippet>__next__</snippet></ROW><ROW><id>14861628</id><snippet>enumerate</snippet></ROW><ROW><id>14861628</id><snippet>reversed</snippet></ROW><ROW><id>14861628</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>14861628</id><snippet>isinstance</snippet></ROW><ROW><id>14861628</id><snippet>isinstance(iterable, itertools.repeat)</snippet></ROW><ROW><id>14861628</id><snippet>Objects/genobject.c</snippet></ROW><ROW><id>14861628</id><snippet>PyGen_Type</snippet></ROW><ROW><id>14861628</id><snippet>PyGen_New</snippet></ROW><ROW><id>14861628</id><snippet>PyObject *
PyGen_New(PyFrameObject *f)
</snippet></ROW><ROW><id>14861628</id><snippet>Objects/frameobject.c</snippet></ROW><ROW><id>14861628</id><snippet>PyFrameObject</snippet></ROW><ROW><id>14861628</id><snippet>PyFrame_New</snippet></ROW><ROW><id>14861628</id><snippet>PyFrameObject *
PyFrame_New(PyThreadState *tstate, PyCodeObject *code, PyObject *globals,
            PyObject *locals)
</snippet></ROW><ROW><id>14861628</id><snippet>PyCodeObject</snippet></ROW><ROW><id>14861628</id><snippet>PyCodeObject</snippet></ROW><ROW><id>14861628</id><snippet>PyCodeObject</snippet></ROW><ROW><id>14861628</id><snippet>PyGen_Type</snippet></ROW><ROW><id>14861628</id><snippet>PyCodeObject</snippet></ROW><ROW><id>14861628</id><snippet>PyCode_New</snippet></ROW><ROW><id>14861628</id><snippet>PyCodeObject *
PyCode_New(int argcount, int kwonlyargcount,
           int nlocals, int stacksize, int flags,
           PyObject *code, PyObject *consts, PyObject *names,
           PyObject *varnames, PyObject *freevars, PyObject *cellvars,
           PyObject *filename, PyObject *name, int firstlineno,
           PyObject *lnotab)
</snippet></ROW><ROW><id>14861628</id><snippet>firstlineno</snippet></ROW><ROW><id>14861628</id><snippet>filename</snippet></ROW><ROW><id>14861709</id><snippet>MultiSet</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861709</id><snippet>.size</snippet></ROW><ROW><id>14861709</id><snippet>MultiSet</snippet></ROW><ROW><id>14861709</id><snippet>MultiSet</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861709</id><snippet>class MultiSet(SkipList)</snippet></ROW><ROW><id>14861709</id><snippet>MultiSet.__len__</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861709</id><snippet>MultiSet</snippet></ROW><ROW><id>14861709</id><snippet>SkipList</snippet></ROW><ROW><id>14861758</id><snippet>link_string = '&lt;a href="/search/?q=%%23%s"&gt; %s &lt;/a&gt;'
</snippet></ROW><ROW><id>14862025</id><snippet>URLopener.open()</snippet></ROW><ROW><id>14862025</id><snippet>read()</snippet></ROW><ROW><id>14862025</id><snippet>URLopener</snippet></ROW><ROW><id>14862025</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>14862279</id><snippet>python -c print(\"hello\")
</snippet></ROW><ROW><id>14862279</id><snippet>python -c print('hello')
</snippet></ROW><ROW><id>14862279</id><snippet>python -c "print('hello')"
</snippet></ROW><ROW><id>14862317</id><snippet>FOO = 42
BAR = 777
HOSTNAME=socket.gethostname()
try:
    _imp = __import__('Constants_'+HOSTNAME)
    _locals = locals()
    for _name in dir(_imp):
        if not _name.startswith('_'):
            _locals[_name] = getattr(_imp, _name)
    del _imp, _locals, _name
except ImportError:
    pass
</snippet></ROW><ROW><id>14862514</id><snippet>n-1</snippet></ROW><ROW><id>14862514</id><snippet>range(n)</snippet></ROW><ROW><id>14862514</id><snippet>import itertools as it

# add_doublet accomplishes step 2
def add_doublet(t):
    for i in range(len(t)):
        for j in range(i+1, len(t)+1):
            yield t[:j] + (t[i],) + t[j:]


def all_doublet_tuples(n):
    for unique_tuple in it.permutations(range(n), n-1):
        for doublet_tuple in add_doublet(unique_tuple):
            yield doublet_tuple



from pprint import pprint

n = 3
pprint(list(all_doublet_tuples(n)))
</snippet></ROW><ROW><id>14862619</id><snippet>help</snippet></ROW><ROW><id>14862619</id><snippet>help(list)</snippet></ROW><ROW><id>14862619</id><snippet>list</snippet></ROW><ROW><id>14862619</id><snippet>help</snippet></ROW><ROW><id>14862619</id><snippet>help(+)</snippet></ROW><ROW><id>14862619</id><snippet>help('+')</snippet></ROW><ROW><id>14862619</id><snippet>+</snippet></ROW><ROW><id>14862731</id><snippet>%edit?</snippet></ROW><ROW><id>14862731</id><snippet>%edit runs IPython's editor hook. The default version of this hook is
set to call the editor specified by your $EDITOR environment variable.
If this isn't found, it will default to vi under Linux/Unix and to
notepad under Windows. See the end of this docstring for how to change
the editor hook.

You can also set the value of this editor via the
``TerminalInteractiveShell.editor`` option in your configuration file.
This is useful if you wish to use a different editor from your typical
default with IPython (and for Windows users who typically don't set
environment variables).

....
</snippet></ROW><ROW><id>14862744</id><snippet>brew uninstall blah</snippet></ROW><ROW><id>14862764</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>14862764</id><snippet>setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
</snippet></ROW><ROW><id>14862764</id><snippet>accept</snippet></ROW><ROW><id>14862867</id><snippet>&lt;input type="hidden" value=""&gt;
</snippet></ROW><ROW><id>14862867</id><snippet>submit()</snippet></ROW><ROW><id>14863006</id><snippet>import re
re.findall('gb\|([^\|]*)\|', 'gb|AB1234|')
</snippet></ROW><ROW><id>14863040</id><snippet>src.dims &lt;= 2 &amp;&amp; src.channels() == 1 &amp;&amp; func != 0</snippet></ROW><ROW><id>14863040</id><snippet>x = cv2.cvtColor(x, cv2.COLOR_BGR2GRAY)</snippet></ROW><ROW><id>14863239</id><snippet>"{0:.6E}".format(9.0387681E-8).replace("E-0", "E-")
</snippet></ROW><ROW><id>14863239</id><snippet>format(9.0387681E-8, '.6E').replace("E-0", "E-")
</snippet></ROW><ROW><id>14863239</id><snippet>E+0</snippet></ROW><ROW><id>14863321</id><snippet>open()</snippet></ROW><ROW><id>14863321</id><snippet>fopen()</snippet></ROW><ROW><id>14863321</id><snippet>wfopen()</snippet></ROW><ROW><id>14863321</id><snippet>iterparse</snippet></ROW><ROW><id>14863321</id><snippet>buffering</snippet></ROW><ROW><id>14863321</id><snippet>open('foo.xml', buffering=(2&lt;&lt;16) + 8)  # buffer enough for 8 full parser reads
</snippet></ROW><ROW><id>14863321</id><snippet>io.open()</snippet></ROW><ROW><id>14863321</id><snippet>io.open('foo.xml', 'rb', buffering=2&lt;&lt;16)</snippet></ROW><ROW><id>14863321</id><snippet>rb</snippet></ROW><ROW><id>14863321</id><snippet>io.BufferedReader</snippet></ROW><ROW><id>14863321</id><snippet>io.TextIOWrapper</snippet></ROW><ROW><id>14863321</id><snippet>r</snippet></ROW><ROW><id>14863321</id><snippet>io.open()</snippet></ROW><ROW><id>14863321</id><snippet>open()</snippet></ROW><ROW><id>14863321</id><snippet>fopen()</snippet></ROW><ROW><id>14863321</id><snippet>io.BufferedIOBase</snippet></ROW><ROW><id>14863575</id><snippet>for key in sorted(D.iterkeys()):
    .. code ..
</snippet></ROW><ROW><id>14863575</id><snippet>D.keys()</snippet></ROW><ROW><id>14863575</id><snippet>D.iterkeys()</snippet></ROW><ROW><id>14863587</id><snippet>for next_row in reader:
                search_term = next_row["CITY_DECODED"]
                for item in words:
                    if search_term in words:
                        next_row["EXISTS"] = 1
</snippet></ROW><ROW><id>14863587</id><snippet>for</snippet></ROW><ROW><id>14863587</id><snippet>for</snippet></ROW><ROW><id>14863587</id><snippet>if search_term in words</snippet></ROW><ROW><id>14863587</id><snippet>words</snippet></ROW><ROW><id>14863587</id><snippet>words = list(set(words))</snippet></ROW><ROW><id>14863587</id><snippet>for item in words</snippet></ROW><ROW><id>14863587</id><snippet>items</snippet></ROW><ROW><id>14863587</id><snippet>for next_row in reader:
    search_term = next_row["CITY_DECODED"]
    if search_term in words:
        next_row["EXISTS"] = 1
    writer.writerow(next_row)
</snippet></ROW><ROW><id>14863587</id><snippet>for next_row in reader2: words.append(next_row["City"])</snippet></ROW><ROW><id>14863587</id><snippet>for next_row in reader:</snippet></ROW><ROW><id>14863630</id><snippet>lambda</snippet></ROW><ROW><id>14863630</id><snippet>reduce</snippet></ROW><ROW><id>14863630</id><snippet>reduce(lambda x, y: x + len(y), s, 0)
</snippet></ROW><ROW><id>14863630</id><snippet>reduce</snippet></ROW><ROW><id>14863630</id><snippet>sum</snippet></ROW><ROW><id>14863630</id><snippet>lambda y: len(y)</snippet></ROW><ROW><id>14863630</id><snippet>len</snippet></ROW><ROW><id>14863758</id><snippet>nearest(event.y)</snippet></ROW><ROW><id>14863758</id><snippet>import Tkinter

def context_menu(event, menu):
    widget = event.widget
    index = widget.nearest(event.y)
    _, yoffset, _, height = widget.bbox(index)
    if event.y &gt; height + yoffset + 5: # XXX 5 is a niceness factor :)
        # Outside of widget.
        return
    item = widget.get(index)
    print "Do something with", index, item
    menu.post(event.x_root, event.y_root)

root = Tkinter.Tk()
aqua = root.tk.call('tk', 'windowingsystem') == 'aqua'

menu = Tkinter.Menu()
menu.add_command(label=u'hi')

listbox = Tkinter.Listbox()
listbox.insert(0, *range(1, 10, 2))
listbox.bind('&lt;2&gt;' if aqua else '&lt;3&gt;', lambda e: context_menu(e, menu))
listbox.pack()
root.mainloop()
</snippet></ROW><ROW><id>14863777</id><snippet>Popen</snippet></ROW><ROW><id>14863777</id><snippet>stdin=PIPE</snippet></ROW><ROW><id>14863777</id><snippet>Popen</snippet></ROW><ROW><id>14863777</id><snippet>.stdin</snippet></ROW><ROW><id>14863777</id><snippet>stdout</snippet></ROW><ROW><id>14863777</id><snippet>Popen</snippet></ROW><ROW><id>14863777</id><snippet>close_fds=True</snippet></ROW><ROW><id>14863777</id><snippet>pobj2 = subprocess.Popen(shlex.split(cmd2),
                         stdin=pipe_out,
                         stdout=file_out,
                         close_fds=True)
</snippet></ROW><ROW><id>14863856</id><snippet>obs = np.reshape(im, (-1, im.shape[-1]))
</snippet></ROW><ROW><id>14863868</id><snippet>`sqlalchemy.exc.ArgumentError: Error creating backref 'category' on relationship 'Category.products': property of that name exists on mapper 'Mapper|Product|product'`
</snippet></ROW><ROW><id>14863868</id><snippet>Category</snippet></ROW><ROW><id>14863868</id><snippet>Product</snippet></ROW><ROW><id>14863868</id><snippet>category.products</snippet></ROW><ROW><id>14863868</id><snippet>product.category</snippet></ROW><ROW><id>14863868</id><snippet>category</snippet></ROW><ROW><id>14863868</id><snippet>Product</snippet></ROW><ROW><id>14863868</id><snippet>Product</snippet></ROW><ROW><id>14863868</id><snippet>class Product(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    category_id = db.Column(db.String(64), db.ForeignKey('category.id'))
    courseName = db.Column(db.String(120), unique = True)
    ip = db.Column(db.SmallInteger, default = WR_IP_YES)
    duration = db.Column(db.Integer)
    productRev = db.Column(db.String(64))
    #use when database is updated?
    releaseDate = db.Column(db.DateTime)

    def __repr__(self):
        return '&lt;Category&gt; %r&gt;' % (self.courseName)
</snippet></ROW><ROW><id>14863868</id><snippet>category</snippet></ROW><ROW><id>14863868</id><snippet>category_id</snippet></ROW><ROW><id>14863880</id><snippet>import itertools as IT

first = {
    ('monkey',1): 130.0,
    ('dog',2): 123.0,
    ('cat', 3): 130.0,
    ('cat', 4): 130.0,
    ('mouse', 6): 100.0
    }

counter = 0
ordered = sorted(first, key = lambda k: (first[k], k[1], k[0]))

second = {}
for key, group in IT.groupby(ordered, first.__getitem__):
    # group = list(group)
    # print(key, group)
    # (100.0, [('mouse', 6)])
    # (123.0, [('dog', 2)])
    # (130.0, [('monkey', 1), ('cat', 3), ('cat', 4)])
    previous = None
    for name, num in group:
        if name != previous:
            counter += 1
        second[num] = counter
        previous = name

print(second)
</snippet></ROW><ROW><id>14863880</id><snippet>{1: 3, 2: 2, 3: 4, 4: 4, 6: 1}
</snippet></ROW><ROW><id>14863880</id><snippet>(name, num)</snippet></ROW><ROW><id>14863880</id><snippet>first</snippet></ROW><ROW><id>14863880</id><snippet>num</snippet></ROW><ROW><id>14863880</id><snippet>name</snippet></ROW><ROW><id>14863880</id><snippet>In [96]: ordered = sorted(first, key = lambda k: (first[k], k[1], k[0]))

In [97]: ordered
Out[97]: [('mouse', 6), ('dog', 2), ('monkey', 1), ('cat', 3), ('cat', 4)]
</snippet></ROW><ROW><id>14863880</id><snippet>ordered</snippet></ROW><ROW><id>14863880</id><snippet>first[k]</snippet></ROW><ROW><id>14863880</id><snippet>In [99]: for key, group in IT.groupby(ordered, first.__getitem__):
   ....:     print(key, list(group))
   ....:     
   ....:     
(100.0, [('mouse', 6)])
(123.0, [('dog', 2)])
(130.0, [('monkey', 1), ('cat', 3), ('cat', 4)])
</snippet></ROW><ROW><id>14863880</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14863880</id><snippet>ordered</snippet></ROW><ROW><id>14863880</id><snippet>first.__getitem__(item)</snippet></ROW><ROW><id>14863880</id><snippet>In [100]: first.__getitem__(('monkey', 1))
Out[100]: 130.0

In [101]: first.__getitem__(('cat', 3))
Out[101]: 130.0
</snippet></ROW><ROW><id>14863880</id><snippet>first.__getitem__(item)</snippet></ROW><ROW><id>14863880</id><snippet>first[item]</snippet></ROW><ROW><id>14863880</id><snippet>first.__getitem__</snippet></ROW><ROW><id>14863880</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14863880</id><snippet>first.__getitem__</snippet></ROW><ROW><id>14863880</id><snippet>for name, num in group:
    counter += 1
    second[num] = counter
</snippet></ROW><ROW><id>14863880</id><snippet>previous = None
for name, num in group:
    if name != previous:
        counter += 1
    ...
    previous = name   
</snippet></ROW><ROW><id>14863880</id><snippet>first = {
    ('monkey',1): 130.0,
    ('dog',2): 123.0,
    ('cat', 3): 129.0,
    ('cat', 4): 130.0,
    ('mouse', 6): 100.0
    }
</snippet></ROW><ROW><id>14863880</id><snippet>{1: 4, 2: 2, 3: 5, 4: 3, 6: 1}
</snippet></ROW><ROW><id>14863880</id><snippet>{1: 4, 2: 2, 3: 3, 4: 5, 6: 1}
</snippet></ROW><ROW><id>14864374</id><snippet>&gt;&gt;&gt; print re.search("[A-Z]", "aaatttgggatgaATG").start()
13
</snippet></ROW><ROW><id>14864374</id><snippet>re.search()</snippet></ROW><ROW><id>14864374</id><snippet>MatchObject</snippet></ROW><ROW><id>14864374</id><snippet>start()</snippet></ROW><ROW><id>14864374</id><snippet>re.search()</snippet></ROW><ROW><id>14864374</id><snippet>None</snippet></ROW><ROW><id>14864419</id><snippet>list1 = [1,2,4,6,8,9,2]

dict1 = {}

for ele in list1:
    # you iterate through the list once
    if ele in dict1:
        # if a key is already in the dictionary
        # you increase the corresponding value by one
        dict1[ele] += 1 
    else:
        # if a key is not yet in the dictionary
        # you set its corresponding value to one
        dict1[ele] = 1
</snippet></ROW><ROW><id>14864419</id><snippet>&gt;&gt;&gt; dict1
{1: 1, 2: 2, 4: 1, 6: 1, 8: 1, 9: 1}
</snippet></ROW><ROW><id>14864439</id><snippet>[x[1] for x in myList]
# [None, None, None, None]
</snippet></ROW><ROW><id>14864439</id><snippet>[x[-1] for x in myList]
# [None, None, None, None]
</snippet></ROW><ROW><id>14864439</id><snippet>myList =[ [(' whether', None), (' mated', None), (' rooster', None), ('', None)] ,
          [(' produced', None), (' without', None), (' rooster', None), (' infertile', None), ('', None)] ]


print [[x[1] for x in el] for el in myList]
# [[None, None, None, None], [None, None, None, None, None]]
</snippet></ROW><ROW><id>14864439</id><snippet>myList =[ [(None, None), (' mated', None), (' rooster', None), ('', None)] ,
              [(' produced', None), (' without', None), (' rooster', None), (' infertile', None), ('', None)] ]

# If there are multiple none values (if the tuple isn't always just two values)
print [ [ [ x for x in z if x == None] for z in el ] for el in myList ]
# [[[None, None], [None], [None], [None]], [[None], [None], [None], [None], [None]]]

# If it's always the last value in the tuple
print [[x[-1] for x in el] for el in myList]
# [[None, None, None, None], [None, None, None, None, None]]
</snippet></ROW><ROW><id>14864693</id><snippet>def dijkstra(self, graph, start, end):
        D = {} # Final distances dict
        P = {} # Predecessor dict

        for node in graph.keys():
            D[node] = -1 # Vertices are unreachable
            P[node] = ""
        D[start] = 0 # The start vertex needs no move
        unseen_nodes = graph.keys() # All nodes are unseen

        while len(unseen_nodes) &gt; 0:
            shortest = None
            node = ''
            for temp_node in unseen_nodes:
                if shortest == None:
                    shortest = D[temp_node]
                    node = temp_node
                elif (D[temp_node] &lt; shortest):
                    shortest = D[temp_node]
                    node = temp_node
            unseen_nodes.remove(node)
            for child_node, child_value in graph[node].items():
                if D[child_node] &lt; D[node] + child_value['weight']:  # I changed the code here
                    D[child_node] = D[node] + child_value['weight']   # I changed the code here
                    P[child_node] = node
        path = []
        node = end
        while not (node == start):
            if path.count(node) == 0:
                path.insert(0, node) # Insert the predecessor of the current node
                node = P[node] # The current node becomes its predecessor
            else:
                break
        path.insert(0, start) # Finally, insert the start vertex
        return path
</snippet></ROW><ROW><id>14864927</id><snippet>html = """&lt;DOC&gt;
&lt;DOCNO&gt; XXX-2222 &lt;/DOCNO&gt;
&lt;FILEID&gt;AP-NR-02-12-88 2344EST&lt;/FILEID&gt;
&lt;HEAD&gt;Reports Former Saigon Officials Released from Re-education Camp&lt;/HEAD&gt;
&lt;TEXT&gt;
Lots of text here
&lt;/TEXT&gt;
&lt;/DOC&gt;
"""

import bs4

d = {}

soup = bs4.BeautifulSoup(html, features="xml")
docs = soup.findAll("DOC")
for doc in docs:
    d[doc.DOCNO.getText()] = (doc.HEAD.getText(), doc.TEXT.getText())

print d
#{u' XXX-2222 ': 
#   (u'Reports Former Saigon Officials Released from Re-education Camp', 
#    u'\nLots of text here\n')}
</snippet></ROW><ROW><id>14864927</id><snippet>features="xml"</snippet></ROW><ROW><id>14864927</id><snippet>.strip()</snippet></ROW><ROW><id>14864927</id><snippet>features="xml"</snippet></ROW><ROW><id>14864927</id><snippet>&lt;XMLROOT&gt;
    &lt;!-- Existing XML (e.g. list of DOC elements) --&gt;
&lt;/XMLROOT&gt;
</snippet></ROW><ROW><id>14864927</id><snippet>root_element_name = "XMLROOT"  # this can be anything
rooted_html = "&lt;{0}&gt;\n{1}\n&lt;/{0}&gt;".format(root_element_name, html)
soup = bs4.BeautifulSoup(rooted_html, features="xml")
</snippet></ROW><ROW><id>14864937</id><snippet>list2 = [x for ind, x in enumerate(list1) if 4 &gt; ind &gt; 0]
</snippet></ROW><ROW><id>14865152</id><snippet>#!/usr/bin/python

import MySQLdb

# Open database connection
db = MySQLdb.connect("localhost","testuser","test123","TESTDB" )

# prepare a cursor object using cursor() method
cursor = db.cursor()

# Select qSQL with id=4.
cursor.execute("SELECT qSQL FROM TBLTEST WHERE id = 4")

# Fetch a single row using fetchone() method.
results = cursor.fetchone()

qSQL = results[0]

cursor.execute(qSQL)

# Fetch all the rows in a list of lists.
qSQLresults = cursor.fetchall()
for row in qSQLresults:
    id = row[0]
    city = row[1]

    #SQL query to INSERT a record into the table FACTRESTTBL.
    cursor.execute('''INSERT into FACTRESTTBL (id, city)
                  values (%s, %s)''',
                  (id, city))

    # Commit your changes in the database
    db.commit()

# disconnect from server
db.close()
</snippet></ROW><ROW><id>14865193</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>14865193</id><snippet>__main__</snippet></ROW><ROW><id>14865286</id><snippet>html = t.render(Context({'html_map':html_map}))
return HttpResponse(html)
</snippet></ROW><ROW><id>14865286</id><snippet>{{ htm_map|safe }}
</snippet></ROW><ROW><id>14865411</id><snippet>table = [(2,3),(5,6),(12,20),(21,25),(28,28),(35,48),(53,55)]

def gaps_between(intervals):
    prec = intervals[0][1] + 1
    for L,H in intervals:
        print '\nprec = %d   (L,H) = (%d,%d)' % (prec,L,H)
        print 'prec = %d &lt;= L-1 = %d : %s' % (prec,L-1,prec&lt;=L)
        if prec&lt;=L-1:
            yield (prec,L-1)
        prec = H + 1
        print 'next prec = %d' % prec

holes = list(gaps_between(table))

print
print 'table =',table
print 'holes =',holes 
</snippet></ROW><ROW><id>14865411</id><snippet>first prec = first H = intervals[0][1]</snippet></ROW><ROW><id>14865411</id><snippet>H&gt;=L</snippet></ROW><ROW><id>14865411</id><snippet>first H &gt; first L - 1</snippet></ROW><ROW><id>14865411</id><snippet>first prec &gt; first L - 1</snippet></ROW><ROW><id>14865411</id><snippet>prec = 3   (L,H) = (2,3)
prec = 3 &lt;= L-1 = 1 : False
next prec = 4

prec = 4   (L,H) = (5,6)
prec = 4 &lt;= L-1 = 4 : True
next prec = 7

prec = 7   (L,H) = (12,20)
prec = 7 &lt;= L-1 = 11 : True
next prec = 21

prec = 21   (L,H) = (21,25)
prec = 21 &lt;= L-1 = 20 : True
next prec = 26

prec = 26   (L,H) = (28,28)
prec = 26 &lt;= L-1 = 27 : True
next prec = 29

prec = 29   (L,H) = (35,48)
prec = 29 &lt;= L-1 = 34 : True
next prec = 49

prec = 49   (L,H) = (53,55)
prec = 49 &lt;= L-1 = 52 : True
next prec = 56

table = [(2, 3), (5, 6), (12, 20), (21, 25), (28, 28), (35, 48), (53, 55)]
holes = [(4, 4), (7, 11), (26, 27), (29, 34), (49, 52)]
</snippet></ROW><ROW><id>14865411</id><snippet>if prec&lt;=L-1</snippet></ROW><ROW><id>14865411</id><snippet>....., (7, 11), (21, 20), (26, 27), .......</snippet></ROW><ROW><id>14865411</id><snippet>[[ 8,  9],[14, 18],[18, 32]]</snippet></ROW><ROW><id>14865411</id><snippet>[[8, 9], [14, 18], [19, 20], [16, 21], [23, 32]]</snippet></ROW><ROW><id>14865411</id><snippet>yield (prec,L-1)</snippet></ROW><ROW><id>14865411</id><snippet>yield range(prec,L)</snippet></ROW><ROW><id>14865411</id><snippet>yield (prec,L-1)</snippet></ROW><ROW><id>14865411</id><snippet>holes.append((prec,L-1))</snippet></ROW><ROW><id>14865476</id><snippet>axes</snippet></ROW><ROW><id>14865476</id><snippet>Artist</snippet></ROW><ROW><id>14865476</id><snippet>remove</snippet></ROW><ROW><id>14865476</id><snippet>artist</snippet></ROW><ROW><id>14865476</id><snippet>artists</snippet></ROW><ROW><id>14865476</id><snippet>ln, = ax.plot(...) # adds a line
img = ax.imshow( ) # adds an image
ln.remove()        # removes the line
img.remove()       # removes the image
</snippet></ROW><ROW><id>14865476</id><snippet>plt.draw()</snippet></ROW><ROW><id>14865476</id><snippet>ax.figure.canvas.draw()</snippet></ROW><ROW><id>14865476</id><snippet>axes</snippet></ROW><ROW><id>14865476</id><snippet>artist_list = ax.get_children()
</snippet></ROW><ROW><id>14865527</id><snippet>lines1</snippet></ROW><ROW><id>14865527</id><snippet>lines2</snippet></ROW><ROW><id>14865527</id><snippet>.split('\n')</snippet></ROW><ROW><id>14865527</id><snippet>lines = ['{:&lt;40}{:&lt;40}'.format(s1, s2) for s1, s2 in zip(lines1, lines2)]
</snippet></ROW><ROW><id>14865527</id><snippet>a = '''            hund                    
barked      4.51141770734e-07
bit         0.0673737226603
dog         0.932625826198'''.split('\n')
b = '''            hyi                     
biid        6.12323423324e-07
bok         0.0643253
dyfs        0.514586321'''.split('\n')
lines = ['{0:&lt;40}{1:&lt;40}'.format(s1, s2) for s1, s2 in zip(a,b)]
print '\n'.join(lines)
</snippet></ROW><ROW><id>14865527</id><snippet>            hund                                    hyi                         
barked      4.51141770734e-07           biid        6.12323423324e-07           
bit         0.0673737226603             bok         0.0643253                   
dog         0.932625826198              dyfs        0.514586321                 
</snippet></ROW><ROW><id>14865585</id><snippet>def get_edge(self, v1, v2):
    try:
        e = self[v1][v2] # order shouldn't matter
        print("edge exists")
        return e
    except KeyError:
        print("edge does not exist")
        return None
</snippet></ROW><ROW><id>14865585</id><snippet>dict</snippet></ROW><ROW><id>14865585</id><snippet>__getitem__</snippet></ROW><ROW><id>14865585</id><snippet>KeyError</snippet></ROW><ROW><id>14865585</id><snippet>print</snippet></ROW><ROW><id>14865585</id><snippet>e</snippet></ROW><ROW><id>14866002</id><snippet>itemgetter</snippet></ROW><ROW><id>14866002</id><snippet>&gt;&gt;&gt; L = [(1.23, 'Smith'), (2.34, 'Jones'), (3.45, 'de la Smith')]
&gt;&gt;&gt; sorted(L, key=lambda x:x[1].lower())
[(3.45, 'de la Smith'), (2.34, 'Jones'), (1.23, 'Smith')]
</snippet></ROW><ROW><id>14866002</id><snippet>def item_to_sort_key(item):
    n, name = item
    return name.lower()

sorted(L, key=item_to_sort_key)
</snippet></ROW><ROW><id>14866002</id><snippet>str.casefold</snippet></ROW><ROW><id>14866002</id><snippet>str.lower</snippet></ROW><ROW><id>14866038</id><snippet> DATABASES = { 'default': {dj_database_url.config()}}
</snippet></ROW><ROW><id>14866038</id><snippet> DATABASES = { 'default': dj_database_url.config()}
</snippet></ROW><ROW><id>14866214</id><snippet>jR</snippet></ROW><ROW><id>14866214</id><snippet>not None</snippet></ROW><ROW><id>14866214</id><snippet>__dict__</snippet></ROW><ROW><id>14866214</id><snippet>'jR'</snippet></ROW><ROW><id>14866214</id><snippet>vars()['jR'] = vars()['jR'][0]
</snippet></ROW><ROW><id>14866214</id><snippet>namespace.__dict__</snippet></ROW><ROW><id>14866214</id><snippet>vars()</snippet></ROW><ROW><id>14866214</id><snippet>['xx','015']</snippet></ROW><ROW><id>14866214</id><snippet>jR</snippet></ROW><ROW><id>14866214</id><snippet>vars()</snippet></ROW><ROW><id>14866214</id><snippet>__dict__</snippet></ROW><ROW><id>14866214</id><snippet>for k in namespace.__dict__:
    if namespace.__dict__[k] is not None:
        &lt;&lt;do something&gt;&gt;
</snippet></ROW><ROW><id>14866266</id><snippet>dot</snippet></ROW><ROW><id>14866266</id><snippet>dot = x.T.dot(y)[0, 0]
</snippet></ROW><ROW><id>14866457</id><snippet>__init__</snippet></ROW><ROW><id>14866457</id><snippet>class Patterns</snippet></ROW><ROW><id>14866457</id><snippet>import re

class Patterns:
    """A simple struct to hold our regex """
    def __init__(self, pat, bodynumArg=2):
        self.pat = pat
        self.bodynum = bodynumArg
        self.reg = re.compile(self.pat, re.M+re.S)

patstring = r'&lt;((us-)?references-cited)&gt;(.*?)&lt;/\1&gt;'
cit_ref = Patterns( patstring, 3)
</snippet></ROW><ROW><id>14866620</id><snippet>hiscore.replace</snippet></ROW><ROW><id>14866620</id><snippet>hiscore</snippet></ROW><ROW><id>14866620</id><snippet>int</snippet></ROW><ROW><id>14866620</id><snippet>replace</snippet></ROW><ROW><id>14866620</id><snippet>hiscore = score</snippet></ROW><ROW><id>14866620</id><snippet>hisc = open("Hscore.txt", "r+")
hiscore = hisc.read(3) # 3 because the max score would never reach 1000
highscore = int(hiscore)
if score &gt; highscore:
    hiscore = score
    hisc.write(hiscore)
</snippet></ROW><ROW><id>14866620</id><snippet>int</snippet></ROW><ROW><id>14866620</id><snippet>int</snippet></ROW><ROW><id>14866620</id><snippet>    hisc.write('{:3}'.format(hiscore))
</snippet></ROW><ROW><id>14866620</id><snippet>"r+"</snippet></ROW><ROW><id>14866620</id><snippet>seek(0, 0)</snippet></ROW><ROW><id>14866620</id><snippet>read</snippet></ROW><ROW><id>14866620</id><snippet>close</snippet></ROW><ROW><id>14866620</id><snippet>seek</snippet></ROW><ROW><id>14866620</id><snippet>with</snippet></ROW><ROW><id>14866620</id><snippet>with open("Hscore.txt", "r") as hisc:
    hiscore = hisc.read(3) # 3 because the max score would never reach 1000
highscore = int(hiscore)
if score &gt; highscore:
    with open("Hscore.txt", "w") as hisc:
        hisc.write('{:3}'.format(score))
</snippet></ROW><ROW><id>14866620</id><snippet>try:
    with open("Hscore.txt", "r") as hisc:
        hiscore = hisc.read(3) # 3 because the max score would never reach 1000
    highscore = int(hiscore)
except IOError as e:
    print('Warning: couldn't open "Hscore.txt": {}'.format(e))
    highscore = 0
except ValueError as e:
    print('Warning: couldn't convert "{}" from "Hscore.txt" to an integer: {}'.format(hiscore, e))
    highscore = 0
</snippet></ROW><ROW><id>14866620</id><snippet>open</snippet></ROW><ROW><id>14866620</id><snippet>io</snippet></ROW><ROW><id>14866745</id><snippet>db.create_all()</snippet></ROW><ROW><id>14866749</id><snippet>def ordered_combinations(pop, n):
    pop = sorted(pop)

    for s in range(sum(pop[:n]), sum(pop[-n:])+1):
        yield from get_sums(pop, s, n)

def get_sums(pop, s, n):
    if n == 1:
        if s in pop:
            yield [s]
        return

    for i, v in enumerate(pop):
        if sum(pop[i:i+n]) &gt; s:
            return
        for rest in get_sums(pop[i+1:], s-v, n-1):
            rest.append(v)
            yield rest
</snippet></ROW><ROW><id>14866749</id><snippet>&gt;&gt;&gt; for c in ordered_combinations(range(1, 8), 4):
    print(c, sum(c))


[4, 3, 2, 1] 10
[5, 3, 2, 1] 11
[6, 3, 2, 1] 12
[5, 4, 2, 1] 12
[7, 3, 2, 1] 13
[6, 4, 2, 1] 13
[5, 4, 3, 1] 13
[7, 4, 2, 1] 14
[6, 5, 2, 1] 14
[6, 4, 3, 1] 14
[5, 4, 3, 2] 14
[7, 5, 2, 1] 15
[7, 4, 3, 1] 15
[6, 5, 3, 1] 15
[6, 4, 3, 2] 15
[7, 6, 2, 1] 16
[7, 5, 3, 1] 16
[6, 5, 4, 1] 16
[7, 4, 3, 2] 16
[6, 5, 3, 2] 16
[7, 6, 3, 1] 17
[7, 5, 4, 1] 17
[7, 5, 3, 2] 17
[6, 5, 4, 2] 17
[7, 6, 4, 1] 18
[7, 6, 3, 2] 18
[7, 5, 4, 2] 18
[6, 5, 4, 3] 18
[7, 6, 5, 1] 19
[7, 6, 4, 2] 19
[7, 5, 4, 3] 19
[7, 6, 5, 2] 20
[7, 6, 4, 3] 20
[7, 6, 5, 3] 21
[7, 6, 5, 4] 22
</snippet></ROW><ROW><id>14866749</id><snippet>rest.append(v); yield rest</snippet></ROW><ROW><id>14866749</id><snippet>yield [v]+rest</snippet></ROW><ROW><id>14866749</id><snippet>yield from</snippet></ROW><ROW><id>14866749</id><snippet>for v in get_sums(pop, s, n):
    yield v
</snippet></ROW><ROW><id>14866749</id><snippet>&gt;&gt;&gt; for i, v in enumerate(ordered_combinations(range(1, 800), 400)):
    if i &gt;= 20:
        break
    print(v[:10], sum(v))


[400, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80200
[401, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80201
[402, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80202
[401, 400, 398, 397, 396, 395, 394, 393, 392, 391] 80202
[403, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80203
[402, 400, 398, 397, 396, 395, 394, 393, 392, 391] 80203
[401, 400, 399, 397, 396, 395, 394, 393, 392, 391] 80203
[404, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80204
[403, 400, 398, 397, 396, 395, 394, 393, 392, 391] 80204
[402, 401, 398, 397, 396, 395, 394, 393, 392, 391] 80204
[402, 400, 399, 397, 396, 395, 394, 393, 392, 391] 80204
[401, 400, 399, 398, 396, 395, 394, 393, 392, 391] 80204
[405, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80205
[404, 400, 398, 397, 396, 395, 394, 393, 392, 391] 80205
[403, 401, 398, 397, 396, 395, 394, 393, 392, 391] 80205
[403, 400, 399, 397, 396, 395, 394, 393, 392, 391] 80205
[402, 401, 399, 397, 396, 395, 394, 393, 392, 391] 80205
[402, 400, 399, 398, 396, 395, 394, 393, 392, 391] 80205
[401, 400, 399, 398, 397, 395, 394, 393, 392, 391] 80205
[406, 399, 398, 397, 396, 395, 394, 393, 392, 391] 80206
</snippet></ROW><ROW><id>14866749</id><snippet>sys.setrecursionlimit</snippet></ROW><ROW><id>14866749</id><snippet>get_sums</snippet></ROW><ROW><id>14866749</id><snippet>range</snippet></ROW><ROW><id>14866749</id><snippet>pop = sorted(pop)</snippet></ROW><ROW><id>14866749</id><snippet>ordered_combinations</snippet></ROW><ROW><id>14866749</id><snippet>range</snippet></ROW><ROW><id>14866749</id><snippet>range(1,100)[10:]</snippet></ROW><ROW><id>14866749</id><snippet>range(11,100)</snippet></ROW><ROW><id>14866844</id><snippet>BlobReferenceProperty</snippet></ROW><ROW><id>14866844</id><snippet>Image.get_serving_url()</snippet></ROW><ROW><id>14866852</id><snippet>itertools</snippet></ROW><ROW><id>14866852</id><snippet>itertools</snippet></ROW><ROW><id>14866852</id><snippet>import itertools

class Selector(object):
    def __init__(self, iterable, **kwargs):
        if not kwargs:
            self.iterator = iterable
        elif len(kwargs) &gt; 1:
            raise ValueError('only one selector type keyword allowed')
        else:
            selector, target = kwargs.items()[0]

            if selector == 'by_attr':
                self.iterator = itertools.imap(lambda obj: getattr(obj, target), iterable)
            elif selector == 'by_type':
                self.iterator = itertools.ifilter(lambda obj: isinstance(obj, target), 
                                                  iterable)
            elif selector == 'by_func':
                self.iterator = itertools.ifilter(target, iterable)
            else:
                raise ValueError('unknown selector type keyword')

    def __iter__(self):
        return self.iterator


if __name__ == '__main__':
    from selector import Selector

    class A(object):
        def __init__(self, a, b):
            self.a, self.b = a, b

    class Flower(object):
        def __init__(self, name):
            self.name = name

    sel = [A(3, 4), A(0, 9), A('test', 3), A(4,22), A(3, 9)]
    print list(Selector(sel, by_attr='a'))

    sel = [42, Flower('Buttercup'), [1,2,3,5,8], A(20, 13), Flower('Rose')]
    print list(Selector(sel, by_type=Flower))

    sel = [4, 9, 3, 22, 9]
    print list(Selector(sel, by_func=lambda i: i%2 == 0))
</snippet></ROW><ROW><id>14867135</id><snippet>contextlib.closing</snippet></ROW><ROW><id>14867135</id><snippet>with closing(resource1) as f1, closing(resource2) as f2:
    f1.something()
    f2.something()
</snippet></ROW><ROW><id>14867135</id><snippet>closing</snippet></ROW><ROW><id>14867135</id><snippet>close</snippet></ROW><ROW><id>14867135</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>14867198</id><snippet>cmd  = ["cd ..", "dir" ]</snippet></ROW><ROW><id>14867198</id><snippet>cmd  = ['cmd.exe /c "cd C:\ &amp;&amp; dir"' ]</snippet></ROW><ROW><id>14867310</id><snippet>setup.py</snippet></ROW><ROW><id>14867439</id><snippet>Auto*</snippet></ROW><ROW><id>14867439</id><snippet>dates</snippet></ROW><ROW><id>14867439</id><snippet>def my_x_axis_format(ax, dt):
    if dt&gt;timedelta(days=6):
      intr=int(dt.days/6)
    else:
        intr=2
    #ax.xaxis.set_minor_locator(dates.WeekdayLocator(byweekday=(1),interval=intr))
    ax.xaxis.set_minor_locator(dates.DayLocator(interval=intr))
    ax.xaxis.set_minor_formatter(dates.DateFormatter('%b%d'))
    years= matplotlib.dates.YearLocator() # every year
    yearsFmt = matplotlib.dates.DateFormatter('')
    ax.xaxis.set_major_locator(years)
    ax.xaxis.set_major_formatter(yearsFmt) 
</snippet></ROW><ROW><id>14867439</id><snippet>TimeDelta=FF.index[-1]-FF.index[0]          
ax = fig.add_subplot(111)
my_x_axis_format(ax, TimeDelta)
</snippet></ROW><ROW><id>14867488</id><snippet>&gt;&gt;&gt; dictdict = { 'key1': {'subkey1': 4, 'subkey2': 7}, 'key2': {'subkey1': 6, 'subkey2': 8} }
&gt;&gt;&gt; dictdict["key1"]["subkey1"]
4
&gt;&gt;&gt; for v1 in dictdict.values():
...     v1.update((k,[v]) for k,v in v1.iteritems())
... 
&gt;&gt;&gt; dictdict["key1"]["subkey1"] += ['a1', 'a2']
&gt;&gt;&gt; dictdict["key1"]["subkey1"]
[4, 'a1', 'a2']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14867580</id><snippet>defaultdict</snippet></ROW><ROW><id>14867580</id><snippet>def tree():
    return collections.defaultdict(tree)

d = tree()
d['js']['title'] = 'Script1'
</snippet></ROW><ROW><id>14867580</id><snippet>d = collections.defaultdict(list)
d['js'].append({'foo': 'bar'})
d['js'].append({'other': 'thing'})
</snippet></ROW><ROW><id>14867580</id><snippet>d = {}
d['js'] = [{'foo': 'bar'}, {'other': 'thing'}]
</snippet></ROW><ROW><id>14867850</id><snippet>os.system</snippet></ROW><ROW><id>14867850</id><snippet>system</snippet></ROW><ROW><id>14867850</id><snippet>$ sh -c "echo -n hello"
-n hello
$ bash -c "echo -n hello"
hello
</snippet></ROW><ROW><id>14868184</id><snippet>malloc</snippet></ROW><ROW><id>14868184</id><snippet>free</snippet></ROW><ROW><id>14868551</id><snippet>import urllib2
from google.appengine.api import urlfetch
from google.appengine.ext import webapp2

import datetime

class MainPage(webapp2.RequestHandler):
    def curlTry(self):
        url = "http://www.google.com/"
        result = urlfetch.fetch(url)
        if result.status_code == 200:
           self.response.write(result.content)

app = webapp2.WSGIApplication([('/', MainPage)],debug=True)
</snippet></ROW><ROW><id>14868551</id><snippet>compare-hatke.app</snippet></ROW><ROW><id>14868551</id><snippet>compare-hatke.py</snippet></ROW><ROW><id>14868551</id><snippet>app</snippet></ROW><ROW><id>14868790</id><snippet>join</snippet></ROW><ROW><id>14868790</id><snippet>str</snippet></ROW><ROW><id>14868790</id><snippet>str</snippet></ROW><ROW><id>14868790</id><snippet>In [31]: str.join??
Type:       method_descriptor
String Form:&lt;method 'join' of 'str' objects&gt;
Namespace:  Python builtin
Docstring:
S.join(iterable) -&gt; string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
</snippet></ROW><ROW><id>14868790</id><snippet>In [32]: ''.join(('string', 'seed' ,'Aviesta'))
Out[32]: 'stringseedAviesta'

In [33]: '_'.join(('string', 'seed' ,'Aviesta'))
Out[33]: 'string_seed_Aviesta'
</snippet></ROW><ROW><id>14869132</id><snippet>Show</snippet></ROW><ROW><id>14869132</id><snippet>Read</snippet></ROW><ROW><id>14869132</id><snippet>fmap read (readFile path)</snippet></ROW><ROW><id>14869132</id><snippet>git clone https://github.com/fosskers/aura.git
cd aura
</snippet></ROW><ROW><id>14869132</id><snippet>PkgState</snippet></ROW><ROW><id>14869132</id><snippet>grep 'writeFile' * -R
</snippet></ROW><ROW><id>14869132</id><snippet>show</snippet></ROW><ROW><id>14869132</id><snippet>+{-# LANGUAGE OverloadedStrings #-}
+import qualified Data.ByteString.Lazy.Char8 as BL
+ import Data.Aeson
...
- liftIO $ writeFile filename (show state)
+ liftIO $ BL.writeFile filename (encode state)
</snippet></ROW><ROW><id>14869132</id><snippet>ToJSON</snippet></ROW><ROW><id>14869132</id><snippet>encode</snippet></ROW><ROW><id>14869132</id><snippet>+{-# LANGUAGE OverloadedStrings #-}
+ import Data.Aeson
+ instance ToJSON PkgState of
+     toJSON (PkgState t p) = object [ "timeOf" .= t, "pkgsOf" .= p ]
</snippet></ROW><ROW><id>14869132</id><snippet>Aura/Time.hs</snippet></ROW><ROW><id>14869132</id><snippet>+ {-# LANGUAGE OverloadedStrings #-} 
...    
+ import Data.Aeson
...
+ instance ToJSON SimpleTime of
+      toJSON (SimpleTime y m d h n) = object [ "yearOf"   .= y
+                                            , "monthOf"  .= fromEnum m
+                                            , "dayOf"    .= d
+                                            , "hourOf"   .= h
+                                            , "minuteOf" .= n
+                                            ]
</snippet></ROW><ROW><id>14869132</id><snippet>build-deps</snippet></ROW><ROW><id>14869132</id><snippet>aura.cabal</snippet></ROW><ROW><id>14869132</id><snippet>-import Data.Maybe      (mapMaybe)
+import Data.Maybe      (mapMaybe, fromMaybe)
+import Control.Applicative
+import Control.Monad

...

+instance ToJSON PkgState where
+    toJSON (PkgState t p) = object [ "timeOf" .= t, "pkgsOf" .= p ]
+
+instance FromJSON PkgState where
+    parseJSON (Object v) = PkgState &lt;$&gt; v .: "timeOf" &lt;*&gt; v .: "pkgsOf"
+    parseJSON _ = mzero
+

...

-readState name = liftIO (read `liftM` readFile (stateCache &lt;/&gt; name))
-
+readState name = liftIO ((fromMaybe err . decode) `liftM` BL.readFile (stateCache &lt;/&gt; name))
+  where err = error "Package State unrecognized"
</snippet></ROW><ROW><id>14869132</id><snippet>Aura/Time.hs</snippet></ROW><ROW><id>14869132</id><snippet>+
+instance FromJSON SimpleTime where
+    parseJSON (Object v) = SimpleTime &lt;$&gt; v .: "yearOf"
+                                      &lt;*&gt; (toEnum `fmap` (v .: "monthOf"))
+                                      &lt;*&gt; v .: "dayOf"
+                                      &lt;*&gt; v .: "hourOf"
+                                      &lt;*&gt; v .: "minuteOf"
+
</snippet></ROW><ROW><id>14869499</id><snippet>frequncy_str = ('Lateral', 'Daily', 'Weekly', 'Monthly')
re_str = '(?i)&lt;h5&gt;(' + '|'.join(frequency_str) + ')&lt;/h5&gt;'
</snippet></ROW><ROW><id>14869499</id><snippet>  re_pat = re.compile(re_str)
</snippet></ROW><ROW><id>14869805</id><snippet>total</snippet></ROW><ROW><id>14869805</id><snippet>sum</snippet></ROW><ROW><id>14869805</id><snippet>0</snippet></ROW><ROW><id>14869805</id><snippet>number</snippet></ROW><ROW><id>14869805</id><snippet>numbersEntered</snippet></ROW><ROW><id>14869805</id><snippet>average</snippet></ROW><ROW><id>14869805</id><snippet>total</snippet></ROW><ROW><id>14869810</id><snippet>C.children[-1].nextToken == None</snippet></ROW><ROW><id>14869810</id><snippet>F.nextToken</snippet></ROW><ROW><id>14869810</id><snippet>prevToken = None
def depthFirstTraverseTokenLinking(tree):
    depthFirstTraverseTokenLinkingPhase1(tree)
    depthFirstTraverseTokenLinkingPhase2(tree)

def depthFirstTraverseTokenLinkingPhase1(tree):
    global prevToken
    if len(tree.children) == 0:
        tree.prevToken = prevToken
        if prevToken != None :
            prevToken.nextToken = tree # Is something wrong with this line?
        prevToken = tree
        return

    for c in tree.children:
        depthFirstTraverseTokenLinkingPhase1(c)

def depthFirstTraverseTokenLinkingPhase2(tree):
    if len(tree.children) == 0:
        return

    for c in tree.children:
        depthFirstTraverseTokenLinkingPhase2(c)

    if tree.children[0].prevToken is not None:
        tree.prevToken = tree.children[0].prevToken
    else:
        tree.prevToken = tree.children[0]

    if tree.children[-1].nextToken is not None:
        tree.nextToken = tree.children[-1].nextToken
    else:
        tree.nextToken = tree.children[-1]
</snippet></ROW><ROW><id>14869810</id><snippet>prevToken</snippet></ROW><ROW><id>14869810</id><snippet>nextToken</snippet></ROW><ROW><id>14869856</id><snippet>title</snippet></ROW><ROW><id>14869856</id><snippet>error_message</snippet></ROW><ROW><id>14869856</id><snippet>_</snippet></ROW><ROW><id>14869856</id><snippet>class LoginHandler(BaseHandler):
    def __init__(self):
        # Call the BaseHandler's __init__ function to initialize parent's members
        BaseHandler.__init__()
        self._title = "Log in to your account"

    def get(self):
        self.render("login.html", error_message=None, title=self._title)

    def post(self):
        self.render("login.html", error_message=self.authenticate_user(), title=self._title)
</snippet></ROW><ROW><id>14869856</id><snippet>title</snippet></ROW><ROW><id>14869856</id><snippet>get</snippet></ROW><ROW><id>14869856</id><snippet>post</snippet></ROW><ROW><id>14869856</id><snippet>error_message</snippet></ROW><ROW><id>14869856</id><snippet>self.render()</snippet></ROW><ROW><id>14869972</id><snippet>virtualenv</snippet></ROW><ROW><id>14869972</id><snippet>pythonbrew</snippet></ROW><ROW><id>14870446</id><snippet>and</snippet></ROW><ROW><id>14870446</id><snippet>or</snippet></ROW><ROW><id>14870446</id><snippet>and</snippet></ROW><ROW><id>14870446</id><snippet>False</snippet></ROW><ROW><id>14870446</id><snippet>or</snippet></ROW><ROW><id>14870446</id><snippet>True</snippet></ROW><ROW><id>14870446</id><snippet>and</snippet></ROW><ROW><id>14870446</id><snippet>or</snippet></ROW><ROW><id>14870446</id><snippet>False</snippet></ROW><ROW><id>14870446</id><snippet>True</snippet></ROW><ROW><id>14870446</id><snippet>s</snippet></ROW><ROW><id>14870446</id><snippet>s or 'foo'</snippet></ROW><ROW><id>14870609</id><snippet>logs</snippet></ROW><ROW><id>14870609</id><snippet>orm.Model</snippet></ROW><ROW><id>14870609</id><snippet>osv.osv</snippet></ROW><ROW><id>14870609</id><snippet>create</snippet></ROW><ROW><id>14870609</id><snippet>from openerp.osv import orm, fields
class logs(orm.Model):
    _name = 'logs'
    _columns = {'name': fields.char('Name', ...),
                'message': fields.char('Message', ...),
               }
    # ...

class student(orm.Model):
    _name = 'student'
    _columns = {...}
    def some_method(self, cr, uid, ids, context=None):
        # get the logs model
        logs_obj = self.pool.get('logs')
        # prepare the value dict for new entry
        values = {'name': val_of_the_name_col,
                  'message':  val_of_the_message_col,
                  }
        # call create
        log_id = logs_obj.create(cr, uid, value, context=context)
</snippet></ROW><ROW><id>14870755</id><snippet>def get_filenames():
    filelist = []
    prompts = [
        "Please input the full name (e.g. text_file.txt) or path of a text file:",
        "Please input any additional text files or simply press enter to continue:"
    ]
    while True:
        filename = raw_input(prompts[len(filelist) &gt; 0]).strip()
        if not filename:
            break
        filelist.append(filename)
    return filelist

def get_filelines(filelist):
    files = {}
    for filename in filelist:
        with open(filename, 'rb') as fp:
            files[filename] = fp.readlines()
    return files

if __name__=='__main__':
    print get_filelines(get_filenames())
</snippet></ROW><ROW><id>14870924</id><snippet>&lt;function read_blankline_block at 0x5b731b8&gt;
</snippet></ROW><ROW><id>14870924</id><snippet>&gt;&gt;&gt; def my_function(): pass
... 
&gt;&gt;&gt; my_function
&lt;function my_function at 0x12c05f0&gt;
</snippet></ROW><ROW><id>14870924</id><snippet>TaggedCorpusReader</snippet></ROW><ROW><id>14870924</id><snippet>TaggedCorpusReader('.' ,  filelist, '/', 
        WhitespaceTokenizer(ur'\s+', True, True, 56), 
        RegexpTokenizer('n', True, True, 56), 
        encoding='utf8')
</snippet></ROW><ROW><id>14870924</id><snippet>TaggedCorpusReader('.' ,  filelist, '/', 
        WhitespaceTokenizer(u'\s+', True, True, 56), 
        RegexpTokenizer('n', True, True, 56), 
        some_function_name, 
        'utf8', None)
</snippet></ROW><ROW><id>14871298</id><snippet>exc_tb</snippet></ROW><ROW><id>14871298</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>14871298</id><snippet>exctype, value = sys.exc_info()[:2]</snippet></ROW><ROW><id>14871298</id><snippet>try</snippet></ROW><ROW><id>14871298</id><snippet>finally</snippet></ROW><ROW><id>14871298</id><snippet>exc_info()</snippet></ROW><ROW><id>14871852</id><snippet>begin = pd.datetime(2013,1,5,5,53)
end = pd.datetime(2013,1,7,7,16)

rng = pd.DatetimeIndex(start=begin, end=end, freq=pd.datetools.Minute(15))
df = pd.DataFrame(np.random.randn(rng.size), index=rng)

fig, axs = plt.subplots(2,1, figsize=(15,6))
fig.subplots_adjust(hspace=.5)

df.plot(ax=axs[0])
axs[0].set_title('Original')

df.index = [idx - df.index[0] for idx in df.index]
df.plot(ax=axs[1])
axs[1].set_title('Normalized')
</snippet></ROW><ROW><id>14872113</id><snippet>In [1]: list_a = [(1, 2), (2, 3), (4, 5)]

In [2]: next(x for x in list_a if x[1] == 3)
Out[2]: (2, 3)
</snippet></ROW><ROW><id>14872171</id><snippet>self.response.out.write(self.response.out)
</snippet></ROW><ROW><id>14872171</id><snippet>myworkbook.save(self.response.out)</snippet></ROW><ROW><id>14872171</id><snippet>self.response.out.write</snippet></ROW><ROW><id>14872171</id><snippet>self.response.out</snippet></ROW><ROW><id>14872171</id><snippet>self.response.out</snippet></ROW><ROW><id>14872402</id><snippet>limit_value</snippet></ROW><ROW><id>14872402</id><snippet>cursor.execute("some select query limit %s", (int(limit_value),))
</snippet></ROW><ROW><id>14872423</id><snippet>movies = row[1]</snippet></ROW><ROW><id>14872423</id><snippet>movies</snippet></ROW><ROW><id>14872423</id><snippet>movies</snippet></ROW><ROW><id>14872423</id><snippet>movies = []</snippet></ROW><ROW><id>14872423</id><snippet>for row in result:
    movies.append(row[1])

print(movies)
</snippet></ROW><ROW><id>14872610</id><snippet>In [38]: l = ((1L,),(2L,),(3L,))

In [39]: [x[0] for x in l]
Out[39]: [1L, 2L, 3L]
</snippet></ROW><ROW><id>14872610</id><snippet>return [x[0] for x in selectedIds]</snippet></ROW><ROW><id>14872846</id><snippet>[x['course_id'] for x in data]
</snippet></ROW><ROW><id>14872846</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>14872846</id><snippet>map(itemgetter('course_id'), data)
</snippet></ROW><ROW><id>14872955</id><snippet>mask = int(pattern.replace('0', '1').replace('?', '0'), 2)
test = int(pattern.replace('?', '0'), 2)

def is_match(n):
    return (n&amp;mask)==test
</snippet></ROW><ROW><id>14872955</id><snippet>def int_sqrt(x):
    if x &lt; 0:
        raise ValueError('square root not defined for negative numbers')
    n = int(x)
    if n == 0:
        return 0
    a, b = divmod(n.bit_length(), 2)
    x = 2**(a+b)
    while True:
        y = (x + n//x)//2
        if y &gt;= x:
            return x
        x = y

def find_match(pattern):
    lowest = int(pattern.replace('?', '0'), 2)
    highest = int(pattern.replace('?', '1'), 2)
    mask = int(pattern.replace('0', '1').replace('?', '0'), 2)
    lowsqrt = int_sqrt(lowest)
    if lowsqrt*lowsqrt != lowest:
            lowsqrt += 1
    highsqrt = int_sqrt(highest)
    for n in range(lowsqrt, highsqrt+1):
        if (n*n &amp; mask)==lowest:
            return n*n

print(find_match('1??1??1'))
print(find_match('1??0??1'))
print(find_match('1??????????????????????????????????????????????????????????????????????1??0??1'))
</snippet></ROW><ROW><id>14872955</id><snippet>121
81
151115727461209345152081
</snippet></ROW><ROW><id>14872955</id><snippet>range</snippet></ROW><ROW><id>14873171</id><snippet>class myProxyHack(object):

    def __init__(self, app):
        self.app = app

    def __call__(self, environ, start_response):
        environ['REMOTE_ADDR'] = environ.get('REMOTE_ADDR', '127.0.0.1')
        return self.app(environ, start_response)

app.wsgi_app = myProxyHack(app.wsgi_app)

app.test_client().post(...)
</snippet></ROW><ROW><id>14873300</id><snippet>takes_context=True</snippet></ROW><ROW><id>14873300</id><snippet>@register.simple_tag(takes_context=True)
def current_time(context, format_string):
    timezone = context['timezone']
    return your_get_current_time_method(timezone, format_string)
</snippet></ROW><ROW><id>14873300</id><snippet>foo = template.Variable('some_var').resolve(context)
</snippet></ROW><ROW><id>14873300</id><snippet>class FormatTimeNode(template.Node):
    def __init__(self, date_to_be_formatted, format_string):
        self.date_to_be_formatted = template.Variable(date_to_be_formatted)
        self.format_string = format_string

    def render(self, context):
        try:
            actual_date = self.date_to_be_formatted.resolve(context)
            return actual_date.strftime(self.format_string)
        except template.VariableDoesNotExist:
            return ''
</snippet></ROW><ROW><id>14873768</id><snippet>for n in range(0, len(plustwos)):
bbgun = plustwos[n] + len(plustwos[0:n])
pl.append(bbgun)
MinorTrendType.insert(pl[n], 22)
MinorTrend.insert(pl[n], MinorTrend[pl[n]])
</snippet></ROW><ROW><id>14873768</id><snippet>for n in range(0, len(plustwos)):
bbgun = plustwos[n] + len(plustwos[0:n])
pl.append(bbgun)
MinorTrendType.insert(pl[n], [22])
MinorTrend.insert(pl[n], MinorTrend[pl[n]])
</snippet></ROW><ROW><id>14873873</id><snippet>parent</snippet></ROW><ROW><id>14873873</id><snippet>parent</snippet></ROW><ROW><id>14873873</id><snippet>windowFlags</snippet></ROW><ROW><id>14873873</id><snippet>QtCore.Qt.Window</snippet></ROW><ROW><id>14873873</id><snippet>QtCore.Qt.Widget</snippet></ROW><ROW><id>14873873</id><snippet>#!/usr/bin/env python
# -.- coding: utf-8 -.-
import sys
from PySide import QtGui, QtCore


class Tab(QtGui.QWidget):
    popOut = QtCore.Signal(QtGui.QWidget)
    popIn = QtCore.Signal(QtGui.QWidget)

    def __init__(self, parent=None):
        super(Tab, self).__init__(parent)

        popOutButton = QtGui.QPushButton('Pop Out')
        popOutButton.clicked.connect(lambda: self.popOut.emit(self))
        popInButton = QtGui.QPushButton('Pop In')
        popInButton.clicked.connect(lambda: self.popIn.emit(self))

        layout = QtGui.QHBoxLayout(self)
        layout.addWidget(popOutButton)
        layout.addWidget(popInButton)


class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__()

        self.button = QtGui.QPushButton('Add Tab')
        self.button.clicked.connect(self.createTab)
        self._count = 0
        self.tab = QtGui.QTabWidget()
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.button)
        layout.addWidget(self.tab)

    def createTab(self):
        tab = Tab()
        tab.setWindowTitle('%d' % self._count)
        tab.popIn.connect(self.addTab)
        tab.popOut.connect(self.removeTab)
        self.tab.addTab(tab, '%d' % self._count)
        self._count += 1

    def addTab(self, widget):
        if self.tab.indexOf(widget) == -1:
            widget.setWindowFlags(QtCore.Qt.Widget)
            self.tab.addTab(widget, widget.windowTitle())

    def removeTab(self, widget):
        index = self.tab.indexOf(widget)
        if index != -1:
            self.tab.removeTab(index)
            widget.setWindowFlags(QtCore.Qt.Window)
            widget.show()


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    w = Window()
    w.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14873877</id><snippet>blob_info = upload_files[0]
blob_key = blob_info.key()
</snippet></ROW><ROW><id>14873877</id><snippet>blob_info.key()</snippet></ROW><ROW><id>14873896</id><snippet>requests</snippet></ROW><ROW><id>14873896</id><snippet>requests/sessions.py</snippet></ROW><ROW><id>14873896</id><snippet>resp.cookies.update(cookiejar)
</snippet></ROW><ROW><id>14874061</id><snippet>LEFT</snippet></ROW><ROW><id>14874061</id><snippet>LEFT = 1
</snippet></ROW><ROW><id>14874061</id><snippet>pygame</snippet></ROW><ROW><id>14874185</id><snippet>svn log</snippet></ROW><ROW><id>14874185</id><snippet>cat</snippet></ROW><ROW><id>14874185</id><snippet>use strict;

my $revno = shift @ARGV;

die "Usage: $0: svn-revision\n" unless $revno;

my $cmd = "svn log -v -r$revno 'http://svn-remote.com/path'";

open(SVN,"$cmd |") or die "Command '$cmd' Failed : $!\n";

while(&lt;SVN&gt;) {
    chomp;
    if ( /^\s+\S\s\/([^\/]+\/[^\/]+).*[^\/]$/ ) {
        (my $tag = $1) =~ s!/!.!g;
        s!.*/src/main/java/!!;
        my @a =  split(/\//);
        my $file = pop @a;
        print $tag, " ",  join(".", @a), " ",  $file, "\n";
    }
}
</snippet></ROW><ROW><id>14874185</id><snippet>PROJECT.CYCLE com.companyname.cycle.agent Main.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleGroupTask.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleProcessTaskBll.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleSequenceProcessTaskBll.java
PROJECT.CYCLE com.companyname.cycle.test.bll MockCycleBll.java
PROJECT.CYCLE com.companyname.pas.cycle.bll DasCycleBll.java
PROJECT.CYCLE com.companyname.pas.cycle.dal DasCycleDal.java
</snippet></ROW><ROW><id>14874185</id><snippet>src/test/java</snippet></ROW><ROW><id>14874185</id><snippet>my $cmd = "sh fake.sh";</snippet></ROW><ROW><id>14874185</id><snippet>PROJECT.CYCLE com.companyname.cycle.agent Main.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleGroupTask.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleProcessTaskBll.java
PROJECT.CYCLE com.companyname.cycle.agent.bll.tasks CycleSequenceProcessTaskBll.java
PROJECT.CYCLE com.companyname.cycle.test.bll MockCycleBll.java
PROJECT.CYCLE com.companyname.pas.cycle.bll DasCycleBll.java
PROJECT.CYCLE com.companyname.pas.cycle.dal DasCycleDal.java
PROJECT.SHARED com.companyname.extensibility NamedExtensionPoint.java
PROJECT.SHARED com.companyname.extensibility PrePostExtensionPoint.java
PROJECT.SHARED com.companyname.extensibility.helper ExtensionConfigurationHelper.java
PROJECT.SRE com.companyname.ext DocumentGeneratorExt.java
PROJECT.SRE com.companyname.ext NamedExtensionPoint.java
PROJECT.SRE com.companyname.ext SystemDateBll.java
MODULE.CYCLE com.companyname.extensibility FileCycle1.java
MODULE.CYCLE com.companyname.extensibility FileCycle2.java
</snippet></ROW><ROW><id>14874185</id><snippet>$revno</snippet></ROW><ROW><id>14874185</id><snippet>foreach my $revno (@ARGV)   {
        print $revno, "\n";
}
</snippet></ROW><ROW><id>14874185</id><snippet>my %info;
while(&lt;SVN&gt;) {
    chomp;
    if ( /^\s+\S\s\/([^\/]+\/[^\/]+).*[^\/]$/ ) {
        (my $tag = $1) =~ s!/!.!g;
        s!.*/src/main/java/!!;
        my @a =  split(/\//);
        my $file = pop @a;
        print $tag, " ",  join(".", @a), " ",  $file, "\n";
        push @{$info{$tag}}, join(" ", join(".", @a), $file);
        #push @{$info{$tag}}, $file;
    }
}

while ( my ($key, $value) = each %info )
{
    print "$key\n";
    for my $line ( @{$info{$key}} ) {
        print "\t", $line, "\n";
    }
}
</snippet></ROW><ROW><id>14874185</id><snippet>PROJECT.SHARED
    com.companyname.extensibility NamedExtensionPoint.java
    com.companyname.extensibility PrePostExtensionPoint.java
    com.companyname.extensibility.helper ExtensionConfigurationHelper.java
PROJECT.CYCLE
    com.companyname.cycle.agent Main.java
    com.companyname.cycle.agent.bll.tasks CycleGroupTask.java
    com.companyname.cycle.agent.bll.tasks CycleProcessTaskBll.java
    com.companyname.cycle.agent.bll.tasks CycleSequenceProcessTaskBll.java
    com.companyname.cycle.test.bll MockCycleBll.java
    com.companyname.pas.cycle.bll DasCycleBll.java
    com.companyname.pas.cycle.dal DasCycleDal.java
MODULE.CYCLE
    com.companyname.extensibility FileCycle1.java
    com.companyname.extensibility FileCycle2.java
PROJECT.SRE
    com.companyname.ext DocumentGeneratorExt.java
    com.companyname.ext NamedExtensionPoint.java
    com.companyname.ext SystemDateBll.java
</snippet></ROW><ROW><id>14874520</id><snippet>python3 setup.py install
</snippet></ROW><ROW><id>14875144</id><snippet>&gt;&gt;&gt; sentence = "this is a wo!rd right !and| other| hello |other"

&gt;&gt;&gt; import re

&gt;&gt;&gt; re.findall("\S*[^\w\s]\S*", sentence)
['wo!rd', '!and|', 'other|', '|other']
</snippet></ROW><ROW><id>14875144</id><snippet>1 non-word, non-space</snippet></ROW><ROW><id>14875144</id><snippet>\S</snippet></ROW><ROW><id>14875144</id><snippet>[^\s]</snippet></ROW><ROW><id>14875144</id><snippet>\S*      # Match 0 or more non-space character
[^\w\s]  # Match 1 non-space non-word character
\S*      # Match 0 or more non-space character
</snippet></ROW><ROW><id>14875366</id><snippet>brr[:] = brr[::-1]
</snippet></ROW><ROW><id>14875366</id><snippet>&gt;&gt;&gt; arr = np.random.random((1000,1500))
&gt;&gt;&gt; brr = np.reshape(arr, arr.shape[0]*arr.shape[1])
&gt;&gt;&gt; brr.sort()
&gt;&gt;&gt; brr = brr[::-1]
&gt;&gt;&gt; brr
array([  9.99999960e-01,   9.99998167e-01,   9.99998114e-01, ...,
     3.79672182e-07,   3.23871190e-07,   8.34517810e-08])
</snippet></ROW><ROW><id>14875366</id><snippet>&gt;&gt;&gt; arr = np.random.random((1000,1500))
&gt;&gt;&gt; brr = np.reshape(arr, arr.shape[0]*arr.shape[1])
&gt;&gt;&gt; sort_indices = np.argsort(brr)[::-1]
&gt;&gt;&gt; brr[:] = brr[sort_indices]
&gt;&gt;&gt; brr
array([  9.99999849e-01,   9.99998950e-01,   9.99998762e-01, ...,
         1.16993050e-06,   1.68760770e-07,   6.58422260e-08])
</snippet></ROW><ROW><id>14875408</id><snippet>eval(repr(object)) == object
</snippet></ROW><ROW><id>14875408</id><snippet>var_export</snippet></ROW><ROW><id>14875408</id><snippet>print_r</snippet></ROW><ROW><id>14875408</id><snippet>var_dump</snippet></ROW><ROW><id>14875408</id><snippet>var_export(['foo', 'bar', 1,2,3]);
</snippet></ROW><ROW><id>14875408</id><snippet>array (
  0 =&gt; 'foo',
  1 =&gt; 'bar',
  2 =&gt; 1,
  3 =&gt; 2,
  4 =&gt; 3,
)
</snippet></ROW><ROW><id>14875408</id><snippet>$data = ['foo', 'bar', 1, 2, 3];
$repr = var_export($data, true);

// have to use it with return though to eval it back into a var
$evald = eval("return $repr;");

var_dump($evald == $data); // true
</snippet></ROW><ROW><id>14875408</id><snippet>serialize</snippet></ROW><ROW><id>14875408</id><snippet>$data = ['foo', 'bar', 1, 2, 3];
$repr = serialize($data); 
// -&gt; a:5:{i:0;s:3:"foo";i:1;s:3:"bar";i:2;i:1;i:3;i:2;i:4;i:3;}
var_dump( unserialize($repr) == $data ); // true
</snippet></ROW><ROW><id>14875408</id><snippet>var_export</snippet></ROW><ROW><id>14875408</id><snippet>json_encode</snippet></ROW><ROW><id>14875507</id><snippet>import re
scanner = re.Scanner([
    (r"[\\]", r'\\textbackslash{}'),
    (r"[{]", r'\\{{}'),
    (r"[}]", r'\\}{}'), 
    (r".", lambda s, t: t)
])

tokens, remainder = scanner.scan("\\foo\\{bar}")
print(''.join(tokens))
</snippet></ROW><ROW><id>14875507</id><snippet>\\textbackslash{}foo\\textbackslash{}\\{{}bar\\}{}
</snippet></ROW><ROW><id>14875507</id><snippet>re.Scanner</snippet></ROW><ROW><id>14875507</id><snippet>lexicon</snippet></ROW><ROW><id>14875507</id><snippet>None</snippet></ROW><ROW><id>14875507</id><snippet>tokens</snippet></ROW><ROW><id>14875690</id><snippet>pattern</snippet></ROW><ROW><id>14875690</id><snippet>re</snippet></ROW><ROW><id>14875690</id><snippet>re</snippet></ROW><ROW><id>14875690</id><snippet>[i for i, elem in enumerate(mylist) if re.match(pattern, elem['rep_main'])]
</snippet></ROW><ROW><id>14875690</id><snippet>re.search</snippet></ROW><ROW><id>14875690</id><snippet>re.match</snippet></ROW><ROW><id>14875690</id><snippet>enumerate</snippet></ROW><ROW><id>14875690</id><snippet>for i in range(len(mylist))</snippet></ROW><ROW><id>14875690</id><snippet>.index()</snippet></ROW><ROW><id>14875690</id><snippet>next(i for i, elem in enumerate(mylist) if re.match(pattern, elem['rep_main']))
</snippet></ROW><ROW><id>14875727</id><snippet>sched.add_interval_job(test_scheduler, seconds=5, start_date='2013-02-13 00:00')
</snippet></ROW><ROW><id>14876042</id><snippet>import itertools as IT

groups = IT.groupby([(1,2,3),(1,2),(1,2),(3,4,5),(3,4)], key=len)
groups = (list(group) for key, group in groups)

def grouped(iterable, n):
    return IT.izip(*[iterable]*n)

for p1, p2  in grouped(groups, 2):
    print p1, p2
</snippet></ROW><ROW><id>14876042</id><snippet>[(1, 2, 3)] [(1, 2), (1, 2)]
[(3, 4, 5)] [(3, 4)]
</snippet></ROW><ROW><id>14876042</id><snippet>groups = (group for key, group in groups)
</snippet></ROW><ROW><id>14876042</id><snippet>groupby</snippet></ROW><ROW><id>14876042</id><snippet>[(1,2,3),(1,2),(1,2),(3,4,5),(3,4)]
</snippet></ROW><ROW><id>14876042</id><snippet>csv.reader</snippet></ROW><ROW><id>14876042</id><snippet>groups</snippet></ROW><ROW><id>14876042</id><snippet>groups</snippet></ROW><ROW><id>14876042</id><snippet>list(g[1])</snippet></ROW><ROW><id>14876042</id><snippet>groups</snippet></ROW><ROW><id>14876042</id><snippet>groups = (list(group) for key, group in groups)
</snippet></ROW><ROW><id>14876042</id><snippet>itertools.izip</snippet></ROW><ROW><id>14876042</id><snippet>groups</snippet></ROW><ROW><id>14876042</id><snippet>group</snippet></ROW><ROW><id>14876234</id><snippet>context</snippet></ROW><ROW><id>14876234</id><snippet>context</snippet></ROW><ROW><id>14876234</id><snippet>def context_implements(*types):
    """
    A custom predicate to implement matching views to resources which
    implement more than one interface - in this situation Pyramid has
    trouble matching views to the second registered interface. See
    https://github.com/Pylons/pyramid/issues/409#issuecomment-3578518

    Accepts a list of interfaces - if ANY of them are implemented the function
    returns True
    """
    def inner(context, request):
        for typ in types:
            if typ.providedBy(context):
                return True
        return False
    return inner


@view_config(context=ICollection,
    custom_predicates=(context_implements(INewsCollection),)
    )
def news_collection_view(context, request):
    ....
</snippet></ROW><ROW><id>14876452</id><snippet>svn</snippet></ROW><ROW><id>14876452</id><snippet>import subprocess as sp

svn_url = "svn://repo-path.com/project"
revisions = [12345, 12346]
revision_clargs = ["-r%i" % revision for revision in revisions]
popen = sp.Popen(["svn", "log", "-v"] + revision_clargs + [svn_url],stdout=sp.PIPE,stderr=sp.PIPE)
out,err = popen.communicate()
</snippet></ROW><ROW><id>14876452</id><snippet>input_ = """
------------------------------------------------------------------------
r12345 | debajyoti.das@email.com | 2013-02-06 01:40:23 -0800 (Wed, 06 Feb 2013) | 1 line
Changed paths:
   M /PROJECT/SHARED/branches/DEV_Branch/extensibility/src/main/java/com/companyname/extensibility/NamedExtensionPoint.java
   M /PROJECT/SHARED/branches/DEV_Branch/extensibility/src/main/java/com/companyname/extensibility/PrePostExtensionPoint.java
   M /PROJECT/SHARED/branches/DEV_Branch/extensibility/src/main/java/com/companyname/extensibility/helper/ExtensionConfigurationHelper.java
   M /PROJECT/SRE/branches/DEV_Branch/ext/src/main/java/com/companyname/ext/DocumentGeneratorExt.java
   M /PROJECT/SRE/branches/DEV_Branch/ext/src/main/java/com/companyname/ext/NamedExtensionPoint.java
   M /PROJECT/SRE/branches/DEV_Branch/ext/src/main/java/com/companyname/ext/SystemDateBll.java

BUG 12345678 - BLAH IMPLEMENTATION
------------------------------------------------------------------------
r12346 | debajyoti.das@email.com | 2013-02-06 01:40:23 -0800 (Wed, 06 Feb 2013) | 1 line
Changed paths:
   M /MODULE/CYCLE/branches/DEV_Branch/extensibility/src/main/java/com/companyname/extensibility/FileCycle1.java
   M /MODULE/CYCLE/branches/DEV_Branch/extensibility/src/main/java/com/companyname/extensibility/FileCycle2.java

BUG 12345679 - BLAH IMPLEMENTATION 
------------------------------------------------------------------------
"""

modified_prefix = "   M "

projects = set(map(lambda x: ".".join(x.split("/")[1:3]),
               filter(lambda x: x.startswith(modified_prefix),
                      (input_.split("\n")))))
</snippet></ROW><ROW><id>14876497</id><snippet>if cookie and not cookie.isspace():
    # the string is non-empty
else:
    # the string is empty
</snippet></ROW><ROW><id>14876497</id><snippet>None</snippet></ROW><ROW><id>14876822</id><snippet>&lt;form action="polls/{{poll.id}}/vote" method="post"&gt;
</snippet></ROW><ROW><id>14876822</id><snippet>url(r'^polls/', include('myapp.urls')),
</snippet></ROW><ROW><id>14876822</id><snippet>url(r'^(?P&lt;poll_id&gt;\d+)/vote/$', 'vote'),
</snippet></ROW><ROW><id>14876822</id><snippet>include</snippet></ROW><ROW><id>14876822</id><snippet>^polls/(?P&lt;poll_id&gt;\d+)/vote/$</snippet></ROW><ROW><id>14876822</id><snippet>{% url 'polls:vote' poll.id %}</snippet></ROW><ROW><id>14877059</id><snippet>im._rgba_cache
</snippet></ROW><ROW><id>14877059</id><snippet>numpy</snippet></ROW><ROW><id>14877059</id><snippet>imshow</snippet></ROW><ROW><id>14877059</id><snippet>my_cm = maplotlib.cm.get_cmap('jet')
normed_data = (data - np.min(data)) / (np.max(data) - np.min(data))
mapped_data = my_cm(normed_data)
</snippet></ROW><ROW><id>14877059</id><snippet>0</snippet></ROW><ROW><id>14877059</id><snippet>1</snippet></ROW><ROW><id>14877059</id><snippet>mapped_datau8 = (255 * my_cm(normed_data)).astype('uint8')
</snippet></ROW><ROW><id>14877059</id><snippet>mapped_data = my_cm(normed_data, bytes=True)
</snippet></ROW><ROW><id>14877059</id><snippet>matplotlib</snippet></ROW><ROW><id>14877059</id><snippet>get_cmap</snippet></ROW><ROW><id>14877246</id><snippet>plt.hold(False)</snippet></ROW><ROW><id>14877246</id><snippet>hold</snippet></ROW><ROW><id>14877246</id><snippet># two lines 
plt.figure()
plt.hold(True)
plt.plot(range(5))
plt.plot(range(5)[::-1])

#one line
plt.figure()
plt.hold(False)
plt.plot(range(5))
plt.plot(range(5)[::-1])
</snippet></ROW><ROW><id>14877246</id><snippet>plt.hold</snippet></ROW><ROW><id>14877246</id><snippet>axes</snippet></ROW><ROW><id>14877246</id><snippet>ax = gca()
ax.hold(True)
</snippet></ROW><ROW><id>14877368</id><snippet>matplotlib/lib/matplotlib/backends</snippet></ROW><ROW><id>14877368</id><snippet>NavigationToolbar2</snippet></ROW><ROW><id>14877409</id><snippet>for</snippet></ROW><ROW><id>14877409</id><snippet>for x, y, z, safe, mod, descr_node, name, start, end, descr_path, _ in reader:
</snippet></ROW><ROW><id>14877409</id><snippet>_</snippet></ROW><ROW><id>14877409</id><snippet>;</snippet></ROW><ROW><id>14877409</id><snippet>cols = (nodesTable_ID_x, nodesTable_ID_y, nodesTable_ID_z,
        nodesTable_ID_SafeArea, nodesTable_ID_Module,
        nodesTable_ID_Description, pathsTable_ID_Name,
        pathsTable_ID_StartNode, pathsTable_ID_EndNode,
        pathsTable_ID_Description)

for rec in reader:
    for col, val in zip(cols, rec):
        nodesTable.SetStringItem(counter, col, val)
</snippet></ROW><ROW><id>14877923</id><snippet>storbinary</snippet></ROW><ROW><id>14877923</id><snippet>('STOR filename', &lt;file_object&gt;)</snippet></ROW><ROW><id>14877923</id><snippet>STOR</snippet></ROW><ROW><id>14877923</id><snippet>command</snippet></ROW><ROW><id>14877923</id><snippet>file</snippet></ROW><ROW><id>14877923</id><snippet>ftp.storbinary("STOR %s.txt" % (name), open("%s.txt" % name, 'rb'))
</snippet></ROW><ROW><id>14877923</id><snippet>raw_input</snippet></ROW><ROW><id>14877923</id><snippet>my_file = "%s.txt" % name
with open(my_file, "rb") as f:
    ftp.storbinary("STOR %s" % (my_file), f)
</snippet></ROW><ROW><id>14878086</id><snippet>lst = [(1360710000.0, 69.06, 69.67, 68.53, 69.53, 550000.0, 69.53),
       (1360623600.0, 68.98, 69.05, 68.39, 68.94, 604200.0, 68.94)]
np.array(lst, dtype=[('time', '&lt;i4'), ('open', '&lt;f4'), ('high', '&lt;f4'), ('low', '&lt;f4'), ('close', '&lt;f4'), ('volume', '&lt;f4'), ('amount', '&lt;f4')])
</snippet></ROW><ROW><id>14878086</id><snippet>array([ (1360710000, 69.05999755859375, 69.66999816894531, 68.52999877929688, 69.52999877929688, 550000.0, 69.52999877929688),
       (1360623600, 68.9800033569336, 69.05000305175781, 68.38999938964844, 68.94000244140625, 604200.0, 68.94000244140625)], 
      dtype=[('time', '&lt;i4'), ('open', '&lt;f4'), ('high', '&lt;f4'), ('low', '&lt;f4'), ('close', '&lt;f4'), ('volume', '&lt;f4'), ('amount', '&lt;f4')])
</snippet></ROW><ROW><id>14878229</id><snippet>self</snippet></ROW><ROW><id>14878229</id><snippet>def __init__(self):
    ...
    self.ciEditLine = QtGui.QLineEdit()        #variable 1
    ...
</snippet></ROW><ROW><id>14878229</id><snippet>def create_srv(self):
    try:
            response = client.service.createConfigurationItem(self.ciEditLine.text(), self.monitorEditLine.text(), self.bolEditLine.text(), self.ipEditLine.text())
</snippet></ROW><ROW><id>14878229</id><snippet>self</snippet></ROW><ROW><id>14878621</id><snippet>&gt;&gt;&gt; l = ['a', 'c', 'e', 'b']
&gt;&gt;&gt; [x for pair in zip(l,l) for x in pair]
['a', 'a', 'c', 'c', 'e', 'e', 'b', 'b']
</snippet></ROW><ROW><id>14878621</id><snippet>&gt;&gt;&gt; from itertools import repeat
&gt;&gt;&gt; [x for item in l for x in repeat(item, 2)]
['a', 'a', 'c', 'c', 'e', 'e', 'b', 'b']
</snippet></ROW><ROW><id>14878701</id><snippet>&gt;&gt;&gt; -1.0**(1/3)
-1.0
&gt;&gt;&gt; (-1.0)**(1/3)
1.0
</snippet></ROW><ROW><id>14878701</id><snippet>(1/3)</snippet></ROW><ROW><id>14878701</id><snippet>division</snippet></ROW><ROW><id>14878701</id><snippet>__future__</snippet></ROW><ROW><id>14878701</id><snippet>ValueError</snippet></ROW><ROW><id>14878701</id><snippet>1/3.</snippet></ROW><ROW><id>14879048</id><snippet>&lt;&lt; r_err &gt;&gt;
</snippet></ROW><ROW><id>14879048</id><snippet>&lt;&lt; '%.2f' % r_err|float &gt;&gt;
</snippet></ROW><ROW><id>14879048</id><snippet>r_err = "%.2f" % r_err
</snippet></ROW><ROW><id>14879066</id><snippet>subprocess.call</snippet></ROW><ROW><id>14879066</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14879066</id><snippet>arg.py</snippet></ROW><ROW><id>14879066</id><snippet>execfile</snippet></ROW><ROW><id>14879066</id><snippet>#include</snippet></ROW><ROW><id>14879066</id><snippet>execfile</snippet></ROW><ROW><id>14879066</id><snippet>#completely untested.
import sys
def run_script(script_name,*args):
    _argv = sys.argv[:]
    sys.argv = list(args)
    execfile(script_name)
    sys.argv = _argv
</snippet></ROW><ROW><id>14879271</id><snippet>(.*\n)*?</snippet></ROW><ROW><id>14879288</id><snippet>bound_value</snippet></ROW><ROW><id>14879288</id><snippet>get_value</snippet></ROW><ROW><id>14879288</id><snippet>set_value</snippet></ROW><ROW><id>14879288</id><snippet>bound_value</snippet></ROW><ROW><id>14879288</id><snippet>Slave</snippet></ROW><ROW><id>14879288</id><snippet>class Slave(object):
    def __init__(self,getfunc,setfunc):
        self.getfunc = getfunc
        self.setfunc = setfunc
    @property
    def bound_value(self):
        return self.getfunc()

    @bound_value.setter
    def bound_value(self, value):
        self.setfunc(value)
</snippet></ROW><ROW><id>14879288</id><snippet>slave.bound_value</snippet></ROW><ROW><id>14879304</id><snippet>curl</snippet></ROW><ROW><id>14879304</id><snippet>raw_body.splitlines()</snippet></ROW><ROW><id>14879304</id><snippet>[raw_body]</snippet></ROW><ROW><id>14879304</id><snippet>--data-binary</snippet></ROW><ROW><id>14879304</id><snippet>-d</snippet></ROW><ROW><id>14879304</id><snippet>-d,  --data</snippet></ROW><ROW><id>14879304</id><snippet>--data-ascii</snippet></ROW><ROW><id>14879304</id><snippet>--data-binary</snippet></ROW><ROW><id>14879370</id><snippet>from xml.etree import ElementTree as et

class XMLCombiner(object):
    def __init__(self, filenames):
        assert len(filenames) &gt; 0, 'No filenames!'
        # save all the roots, in order, to be processed later
        self.roots = [et.parse(f).getroot() for f in filenames]

    def combine(self):
        for r in self.roots[1:]:
            # combine each element with the first one, and update that
            self.combine_element(self.roots[0], r)
        # return the string representation
        return et.tostring(self.roots[0])

    def combine_element(self, one, other):
        """
        This function recursively updates either the text or the children
        of an element if another element is found in `one`, or adds it
        from `other` if not found.
        """
        # Create a mapping from tag name to element, as that's what we are fltering with
        mapping = {el.tag: el for el in one}
        for el in other:
            if len(el) == 0:
                # Not nested
                try:
                    # Update the text
                    mapping[el.tag].text = el.text
                except KeyError:
                    # An element with this name is not in the mapping
                    mapping[el.tag] = el
                    # Add it
                    one.append(el)
            else:
                try:
                    # Recursively process the element, and update it in the same way
                    self.combine_element(mapping[el.tag], el)
                except KeyError:
                    # Not in the mapping
                    mapping[el.tag] = el
                    # Just add it
                    one.append(el)

if __name__ == '__main__':
    r = XMLCombiner(('sample1.xml', 'sample2.xml')).combine()
    print '-'*20
    print r
</snippet></ROW><ROW><id>14879577</id><snippet>csv</snippet></ROW><ROW><id>14879577</id><snippet>with open(FILE_PERSON, 'rb') as csvfile:
    linecount = sum(1 for _ in csvfile)
    csvfile.seek(0)
    spamreader = csv.reader(csvfile)
    for line, row in enumerate(spamreader):
        print '{} of {}'.format(line, linecount)
</snippet></ROW><ROW><id>14879910</id><snippet>sublime.active_window().views()</snippet></ROW><ROW><id>14879910</id><snippet>[x*x for x in range(1,11)]
</snippet></ROW><ROW><id>14880001</id><snippet>matplotlib</snippet></ROW><ROW><id>14880001</id><snippet>numpy</snippet></ROW><ROW><id>14880001</id><snippet>from matplotlib import pyplot as mp
import numpy as np

def gaussian(x, mu, sig):
    return np.exp(-np.power(x - mu, 2.) / 2 * np.power(sig, 2.))

for mu, sig in [(−1, 1), (0, 2), (2, 3)]:
    mp.plot(gaussian(np.linspace(-3, 3, 120), mu, sig))

mp.show()
</snippet></ROW><ROW><id>14880063</id><snippet>__init__</snippet></ROW><ROW><id>14880063</id><snippet>Base</snippet></ROW><ROW><id>14880063</id><snippet>__init__</snippet></ROW><ROW><id>14880063</id><snippet>class Database(object):
    ...
    Base = declarative_base() # This returns a metaclass.
    class Element(Base):
        ...
</snippet></ROW><ROW><id>14880063</id><snippet>Base</snippet></ROW><ROW><id>14880063</id><snippet>__metaclass__ = Base</snippet></ROW><ROW><id>14880063</id><snippet>(metaclass=Base)</snippet></ROW><ROW><id>14880126</id><snippet>groupby</snippet></ROW><ROW><id>14880126</id><snippet>print 'Disabled seats available : ', ', '.join([r[0] for r in cur])
</snippet></ROW><ROW><id>14880237</id><snippet>range()</snippet></ROW><ROW><id>14880237</id><snippet>range(5)</snippet></ROW><ROW><id>14880237</id><snippet>readline()</snippet></ROW><ROW><id>14880237</id><snippet>with open("wordpop.txt","r") as infile:
    rows = [infile.readline() for _ in range(5)]
print(rows)
</snippet></ROW><ROW><id>14880267</id><snippet>for i, (a, b) in enumerate(tuple_list):
    new_b = some_process(b)
    tuple_list[i] = (a, new_b)
</snippet></ROW><ROW><id>14880267</id><snippet>b</snippet></ROW><ROW><id>14880267</id><snippet>tuple_list = [(a, some_process(b)) for (a, b) in tuple_list]
</snippet></ROW><ROW><id>14880286</id><snippet>__getattribute__</snippet></ROW><ROW><id>14880286</id><snippet>class Foo(object):
    def __getattribute__(self, attr):
        if attr != 'write':
            return super(Foo, self).__getattribute__(attr)
        meth = super(Foo, self).__getattribute__(attr)
        if meth.im_func is Foo.write.im_func:
            # subclass does not override the method
            return meth

        def assure_calls_base_class(*args, **kwargs):
            meth(*args, **kwargs)
            Foo.write(self, *args, **kwargs)
        return assure_calls_base_class

    def write(self, s=""):
        print "-From Foo"



class Bar(Foo):
    def write(self, s=""):
        print s
</snippet></ROW><ROW><id>14880286</id><snippet>&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.write('Hello, World!')
Hello, World!
-From Foo
</snippet></ROW><ROW><id>14880286</id><snippet>write</snippet></ROW><ROW><id>14880286</id><snippet>&gt;&gt;&gt; Bar.write(b, 'Hello, World!')  #should be equivalent to b.write('Hello, World!')
Hello, World!
</snippet></ROW><ROW><id>14880344</id><snippet>*</snippet></ROW><ROW><id>14880344</id><snippet>regex=re.compile(r'\*\d+')
for line in f:
    if regexp.match(line)
    print &gt;&gt; a, line
</snippet></ROW><ROW><id>14880344</id><snippet>regex=re.compile(r'\*(?:\d+\s+){3}\d+')
for line in f:
    if regexp.match(line)
    print &gt;&gt; a, line
</snippet></ROW><ROW><id>14880344</id><snippet>re.match</snippet></ROW><ROW><id>14880344</id><snippet>^</snippet></ROW><ROW><id>14880344</id><snippet>re.search</snippet></ROW><ROW><id>14880529</id><snippet>c</snippet></ROW><ROW><id>14880529</id><snippet>__enter__</snippet></ROW><ROW><id>14880529</id><snippet>line 245 of connections.py</snippet></ROW><ROW><id>14880529</id><snippet>def __enter__(self): return self.cursor()
</snippet></ROW><ROW><id>14880529</id><snippet>DictCursor</snippet></ROW><ROW><id>14880738</id><snippet>open(os.path.join(p5, "usage.txt"), "w")
</snippet></ROW><ROW><id>14880738</id><snippet>p5</snippet></ROW><ROW><id>14880738</id><snippet>usage.txt</snippet></ROW><ROW><id>14880745</id><snippet>def optional_inherit(cls):
    if use_option:
        from package.my_module import OptClass
        class ExampleClassWithOptClass(cls, OptClass):
            pass
        return ExampleClassWithOptClass
    else:
        return cls

...

@optional_inherit
class ExampleClass(base_module.BaseHandler):
    ...
</snippet></ROW><ROW><id>14880745</id><snippet>optional_inherit</snippet></ROW><ROW><id>14880745</id><snippet>@optional_inherit(use_option, 'package.mymodule.OptClass')</snippet></ROW><ROW><id>14880901</id><snippet>sort_map = {d['sortkey']: d['value'] for d in secondlist}

sorted(firstlist, key=lambda d: sort_map[d['sortkey']])
</snippet></ROW><ROW><id>14880901</id><snippet>sortkey</snippet></ROW><ROW><id>14880901</id><snippet>firstlist</snippet></ROW><ROW><id>14880901</id><snippet>sortkey</snippet></ROW><ROW><id>14880901</id><snippet>&gt;&gt;&gt; firstlist = [{'fld':'a1', 'sortkey':'k2'}, {'fld':'b1', 'sortkey':'k3'}, {'fld':'c1', 'sortkey':'k1'},{'fld':'d1', 'sortkey':'k3'}]
&gt;&gt;&gt; secondlist = [{'sortkey':'k1', 'value':9}, {'sortkey':'k2', 'value':10}, {'sortkey':'k3', 'value':7}]
&gt;&gt;&gt; sort_map = {d['sortkey']: d['value'] for d in secondlist}
&gt;&gt;&gt; sorted(firstlist, key=lambda d: sort_map[d['sortkey']])
[{'fld': 'b1', 'sortkey': 'k3'}, {'fld': 'd1', 'sortkey': 'k3'}, {'fld': 'c1', 'sortkey': 'k1'}, {'fld': 'a1', 'sortkey': 'k2'}]
</snippet></ROW><ROW><id>14880947</id><snippet>my_cm.__call__</snippet></ROW><ROW><id>14880947</id><snippet>*X* is either a scalar or an array (of any dimension).
If scalar, a tuple of rgba values is returned, otherwise
an array with the new shape = oldshape+(4,). If the X-values
are integers, then they are used as indices into the array.
If they are floating point, then they must be in the
interval (0.0, 1.0).
Alpha must be a scalar between 0 and 1, or None.
If bytes is False, the rgba values will be floats on a
0-1 scale; if True, they will be uint8, 0-255.
</snippet></ROW><ROW><id>14880953</id><snippet>updateddict = {k.lstrip('&gt;'): v for k, v in yourdict.iteritems()}
</snippet></ROW><ROW><id>14880953</id><snippet>yourdict.items()</snippet></ROW><ROW><id>14880953</id><snippet>updateddict = dict((k.lstrip('&gt;'), v) for k, v in yourdict.iteritems())
</snippet></ROW><ROW><id>14880953</id><snippet>str.lstrip()</snippet></ROW><ROW><id>14880953</id><snippet>&gt;</snippet></ROW><ROW><id>14881088</id><snippet>time</snippet></ROW><ROW><id>14881088</id><snippet>time</snippet></ROW><ROW><id>14881088</id><snippet>tm = time.strptime(datetime, "%H:%M:%S")
</snippet></ROW><ROW><id>14881239</id><snippet>max_val, max_obj = max([(val, obj) for obj, val in tuple_list])
return max_obj, max_val
</snippet></ROW><ROW><id>14881322</id><snippet>get_year</snippet></ROW><ROW><id>14881322</id><snippet># Invocation
my_input = [2013, 'a', 'b', 'c'] # sequence does NOT have to be a tuple!
my_year = get_year(my_input) # returns 2013
</snippet></ROW><ROW><id>14881322</id><snippet>get_year</snippet></ROW><ROW><id>14881322</id><snippet>def get_year(input_sequence):
    year, prefix, index, suffix = input_sequence
    return year
</snippet></ROW><ROW><id>14881322</id><snippet>def get_year(input_sequence):
    return input_sequence[0]
</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>0</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>and</snippet></ROW><ROW><id>14881581</id><snippet>False</snippet></ROW><ROW><id>14881581</id><snippet>length or len(string)</snippet></ROW><ROW><id>14881581</id><snippet>len(string)</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>length and length</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>length or len(string)</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>length</snippet></ROW><ROW><id>14881581</id><snippet>or</snippet></ROW><ROW><id>14881581</id><snippet>True</snippet></ROW><ROW><id>14881581</id><snippet>len(string)</snippet></ROW><ROW><id>14881581</id><snippet>length = length or len(string)</snippet></ROW><ROW><id>14881581</id><snippet>length and length</snippet></ROW><ROW><id>14881756</id><snippet>def ccid_year_1(seq):
  year, prefix, index, suffix = seq
  return year

def ccid_year_2(seq):
  return seq[0]

arg = {1:'a', 2:'b', 0:'c', 3:'d'}
print ccid_year_1(arg)
print ccid_year_2(arg)
</snippet></ROW><ROW><id>14881756</id><snippet>0</snippet></ROW><ROW><id>14881756</id><snippet>c</snippet></ROW><ROW><id>14882013</id><snippet>your_list = [
    'Australia/AU/36/8177/22919',
    'Austria/AT/40/6936/8429',
    'Azerbaijan/AZ/31/2896/9421'
    'Bahamas/BS/44/79/351'
]

for element in your_list:
    print element
</snippet></ROW><ROW><id>14882013</id><snippet>'/'</snippet></ROW><ROW><id>14882013</id><snippet>your_list = []
with open('your_file.txt') as fobj:
    for line in fobj:
        your_list.append(line.strip().split('/'))

for sublist in your_list:
    print sublist 
</snippet></ROW><ROW><id>14882185</id><snippet>In [16]: hstackm = lambda args: reduce(lambda x,y:hstack((x,y)), args)

In [17]: hstackm([M,M])
Out[17]: 
array([[ 1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  1.]])
</snippet></ROW><ROW><id>14882187</id><snippet>{% for item in list %}
    {% if forloop.revcounter &gt; 2 %}
        {{ item }},
    {% else %}
         {% if forloop.revcounter == 2 %}
              {{ item }} and
         {% else %}
              {{ item }}
         {% endif %}
    {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>14882187</id><snippet>forloop.revcounter</snippet></ROW><ROW><id>14882266</id><snippet>grep</snippet></ROW><ROW><id>14882266</id><snippet>grep</snippet></ROW><ROW><id>14882266</id><snippet>--line-buffered</snippet></ROW><ROW><id>14882266</id><snippet>channel.exec_command('tail -f log.log | grep --line-buffered "filter" ')
</snippet></ROW><ROW><id>14882334</id><snippet>and ... or</snippet></ROW><ROW><id>14882334</id><snippet>year &gt;= 2000 and year - 2000 or year - 1900</snippet></ROW><ROW><id>14882334</id><snippet>year = 2000</snippet></ROW><ROW><id>14882334</id><snippet>100</snippet></ROW><ROW><id>14882688</id><snippet>import json   
json_txt = """
{
"ROLE_NAME": {
    "FOO": {
        "download_url": "http: //something.staging/12345/buzz.zip"
    },
    "BAR": {
        "download_url": "http: //something.staging/12345/fizz.zip"
    },
    "download_url": "http: //something.staging/12345/fizzbuzz.zip",
    "db_name": "somedb",
    "db_server": "dbserver.staging.dmz",
    "plugin": {
        "server_url": "http: //lab.staging.corp/server/"
    }
}
}
"""
data = json.loads(json_txt)

def fixup(adict, k, v):
    for key in adict.keys():
        if key == k:
            adict[key] = v
        elif type(adict[key]) is dict:
            fixup(adict[key], k, v)

import pprint
pprint.pprint( data )

fixup(data, 'download_url', 'XXX')

pprint.pprint( data )
</snippet></ROW><ROW><id>14882688</id><snippet>{u'ROLE_NAME': {u'BAR': {u'download_url': u'http: //something.staging/12345/fizz.zip'},
                u'FOO': {u'download_url': u'http: //something.staging/12345/buzz.zip'},
                u'db_name': u'somedb',
                u'db_server': u'dbserver.staging.dmz',
                u'download_url': u'http: //something.staging/12345/fizzbuzz.zip',
                u'plugin': {u'server_url': u'http: //lab.staging.corp/server/'}}}
{u'ROLE_NAME': {u'BAR': {u'download_url': 'XXX'},
                u'FOO': {u'download_url': 'XXX'},
                u'db_name': u'somedb',
                u'db_server': u'dbserver.staging.dmz',
                u'download_url': 'XXX',
                u'plugin': {u'server_url': u'http: //lab.staging.corp/server/'}}}
</snippet></ROW><ROW><id>14883369</id><snippet>'ATGxzyxyzyyxyATGxzxzyxyzxxzzxzyzyxyzTGA'</snippet></ROW><ROW><id>14883369</id><snippet>'xzyxyzyyxyATGxzxzyxyzxxzzxzyzyxyzTGA'</snippet></ROW><ROW><id>14883369</id><snippet>'ATG'</snippet></ROW><ROW><id>14883369</id><snippet>'xzyxyzyyxyATGxzxzyxyzxxzzxzyzyxyzTGA'</snippet></ROW><ROW><id>14883369</id><snippet>'ATG'</snippet></ROW><ROW><id>14883369</id><snippet>True</snippet></ROW><ROW><id>14883369</id><snippet>messages</snippet></ROW><ROW><id>14883369</id><snippet>find_ORF_seq()</snippet></ROW><ROW><id>14883369</id><snippet>messages</snippet></ROW><ROW><id>14883369</id><snippet>None</snippet></ROW><ROW><id>14883369</id><snippet>'(atg).+?(?:TAA|TGA|TAG)'</snippet></ROW><ROW><id>14883369</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>14883369</id><snippet>(?:TAA|TGA|TAG)</snippet></ROW><ROW><id>14883369</id><snippet>findall()</snippet></ROW><ROW><id>14883369</id><snippet>finditer()</snippet></ROW><ROW><id>14883369</id><snippet>ma.start()</snippet></ROW><ROW><id>14883369</id><snippet>ma</snippet></ROW><ROW><id>14883369</id><snippet>s</snippet></ROW><ROW><id>14883369</id><snippet>s = s + p + 1</snippet></ROW><ROW><id>14883369</id><snippet>start_positions</snippet></ROW><ROW><id>14883369</id><snippet>ma.group(1)</snippet></ROW><ROW><id>14883369</id><snippet>'ATG'</snippet></ROW><ROW><id>14883369</id><snippet>'atg'</snippet></ROW><ROW><id>14883369</id><snippet>'ATG'</snippet></ROW><ROW><id>14883369</id><snippet>s = s + p + 1</snippet></ROW><ROW><id>14883369</id><snippet>s = s + p + 3</snippet></ROW><ROW><id>14883369</id><snippet>import re

sequence_list = ['atgttttgatgATGTTTTGATTT',
                 'atggggtagatggggATGGGGTGA',
                 'atgaaataatggggATGAAATAA',
                 'aaggtacttctcggctaACTTTTTCCAAGT']

pat = '(atg).+?(?:TAA|TGA|TAG)'
reg = re.compile(pat,re.IGNORECASE)

def find_ORF_seq(fdna,messages=None,s=0,reg=reg):
    ORF_sequences = []
    if messages:
        print 's before == ',s
    while True:
        if messages:
            print ('---------------------------\n'
                   's == %d\n'
                   'fdna[%d:] == %r' % (s,s,fdna[s:]))
        ma = reg.search(fdna[s:])
        if messages:
            print 'reg.search(fdna[%d:]) == %r' % (s,ma)
        if ma:
            if messages:
                print ('ma.group() == %r\n'
                       'ma.group(1) == %r'
                       % (ma.group(),ma.group(1)))
            if ma.group(1)=='ATG':
                if messages:
                    print "ma.group(1) is uppercased 'ATG' then I break"
                break
            else:
                ORF_sequences.append(ma.group().upper())
                p = ma.start()
                if messages:
                    print (' The match is at position p == %d in fdna[%d:]\n'
                           ' and at position s + p == %d + %d == %d in fdna\n'
                           ' then I put s = s + p + 1 == %d'
                           % (p,s, s,p,s+p, s+p+1))
                s = s + p + 1
        else:
            break
    if messages:
        print '\n==== RESULT ======\n'
    return ORF_sequences

for fdna in sequence_list:
    print ('\n============================================')
    print ('fdna == %s\n'
           'ORF_sequences == %r'
           % (fdna, find_ORF_seq(fdna,True)))

###############################

print '\n\n\n######################\n\ninput sample'
fdna = 'atgttttgatggATGTTTGATTTATTTTAG'
print '  fdna == %s' % fdna
print '  **atgttttga**tggATGTTTGATTTATTTTAG'
print '  atgttttg**atggATGTTTGA**TTTATTTTAG'
print 'output sample'
print "  ORF_sequences = ['ATGTTTTGA','ATGGATGTTTGA']"

print '\nfind_ORF_seq(fdna) ==',find_ORF_seq(fdna)
</snippet></ROW><ROW><id>14883369</id><snippet>print</snippet></ROW><ROW><id>14883369</id><snippet>import re

pat = '(atg).+?(?:TAA|TGA|TAG)'
reg = re.compile(pat,re.IGNORECASE)

def find_ORF_seq(fdna,messages=None,s =0,reg=reg):
    ORF_sequences = []
    while True:
        ma = reg.search(fdna[s:])
        if ma:
            if ma.group(1)=='ATG':
                break
            else:
                ORF_sequences.append(ma.group().upper())
                s = s + ma.start() + 1
        else:
            break
    return ORF_sequences
</snippet></ROW><ROW><id>14883369</id><snippet>from find_ORF_sequences import find_ORF_seq
from ATOz_get_sequences import getSequences

fdna = 'atgggatggtagatggatgggATGGGGTGA'

print 'fdna == %s' % fdna
print 'find_ORF_seq(fdna)\n',find_ORF_seq(fdna)
print 'getSequences(fdna)\n',getSequences(fdna)
</snippet></ROW><ROW><id>14883369</id><snippet>fdna == atgggatggtagatggatgggATGGGGTGA
find_ORF_seq(fdna)
['ATGGGATGGTAG', 'ATGGTAG', 'ATGGATGGGATGGGGTGA', 'ATGGGATGGGGTGA']
getSequences(fdna)
['ATGGGATGGTAG', 'ATGGATGGGATGGGGTGA']
</snippet></ROW><ROW><id>14883369</id><snippet>'ATGGGATGGGGTGA'</snippet></ROW><ROW><id>14883369</id><snippet>'ATGGATGGGATGGGGTGA'</snippet></ROW><ROW><id>14883436</id><snippet>In [54]: array = ["a\nb", "c", "d"]
In [56]: max(e.count("\n") for e in array)+1
Out[56]: 2
</snippet></ROW><ROW><id>14883436</id><snippet>In [60]: max((e.count("\n")+1, e) for e in array)
Out[60]: (2, 'a\nb')
</snippet></ROW><ROW><id>14883502</id><snippet>sqlite3</snippet></ROW><ROW><id>14883502</id><snippet>pysqlite</snippet></ROW><ROW><id>14883502</id><snippet>pip</snippet></ROW><ROW><id>14883502</id><snippet>easy_install</snippet></ROW><ROW><id>14883502</id><snippet>setuptools</snippet></ROW><ROW><id>14883502</id><snippet>distribute</snippet></ROW><ROW><id>14883502</id><snippet>&gt;= 2.6.0</snippet></ROW><ROW><id>14883502</id><snippet>pip install mypackage</snippet></ROW><ROW><id>14883502</id><snippet>sqlite3</snippet></ROW><ROW><id>14883502</id><snippet>pysqlite</snippet></ROW><ROW><id>14883502</id><snippet>sqlite3</snippet></ROW><ROW><id>14883502</id><snippet>pysqlite</snippet></ROW><ROW><id>14883502</id><snippet>version</snippet></ROW><ROW><id>14883502</id><snippet>version_info</snippet></ROW><ROW><id>14883502</id><snippet>sys</snippet></ROW><ROW><id>14883502</id><snippet>version_info &gt;= (2, 6)</snippet></ROW><ROW><id>14883502</id><snippet>sqlite_version</snippet></ROW><ROW><id>14883502</id><snippet>sqlite_version_info</snippet></ROW><ROW><id>14883632</id><snippet>ax</snippet></ROW><ROW><id>14883632</id><snippet>ax2</snippet></ROW><ROW><id>14883632</id><snippet>y</snippet></ROW><ROW><id>14883632</id><snippet>ax.yaxis.set_ticks_position("right")
ax2.yaxis.set_ticks_position("left")
</snippet></ROW><ROW><id>14883632</id><snippet>import numpy as np
import matplotlib.pyplot as plt

a = range(1,10)
b = range(4,13)
ind = np.arange(len(a))
width = 0.65

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(ind+width+0.35, b, 0.45, color='#deb0b0')

ax2 = ax.twinx()
ax2.bar(ind+width, a, width, color='#b0c4de')

ax.set_xticks(ind+width+(width/2))
ax.set_xticklabels(a)

ax.yaxis.set_ticks_position("right")
ax2.yaxis.set_ticks_position("left")

plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>14883632</id><snippet>align='center'</snippet></ROW><ROW><id>14883632</id><snippet>import numpy as np
import matplotlib.pyplot as plt

a = range(1,10)
b = range(4,13)
ind = np.arange(len(a))

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(ind+0.25, b, 0.45, color='#deb0b0', align='center')

ax2 = ax.twinx()
ax2.bar(ind, a, 0.65, color='#b0c4de', align='center')

plt.xticks(ind, a)
ax.yaxis.set_ticks_position("right")
ax2.yaxis.set_ticks_position("left")

plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>14883673</id><snippet>from django.contrib.auth.models import User, Group
from django.db.models.signals import post_save


def default_group(sender, instance, created, **kwargs):
    if created:
        instance.groups.add(Group.objects.get(name='your default group name'))
post_save.connect(default_group, sender=User)
</snippet></ROW><ROW><id>14883852</id><snippet>[1:]</snippet></ROW><ROW><id>14883852</id><snippet>filelist = [line.strip('\n').split('\t') for line in F][1:]
</snippet></ROW><ROW><id>14883852</id><snippet>fileList</snippet></ROW><ROW><id>14883852</id><snippet>next(F, None)</snippet></ROW><ROW><id>14883852</id><snippet>with open('file1.tsv') as F:
    next(F, None)
    filelist = [line.strip('\n').split('\t') for line in F]
</snippet></ROW><ROW><id>14883852</id><snippet>defaultdict</snippet></ROW><ROW><id>14883852</id><snippet>from collections import defaultdict
color_dict = defaultdict(int)
</snippet></ROW><ROW><id>14883852</id><snippet>key</snippet></ROW><ROW><id>14883852</id><snippet>color_dict[item[0]] += int(item[1])
</snippet></ROW><ROW><id>14883929</id><snippet>char* hello(char* name)
{ 
    char hello[] = "Hello ";
    char excla[] = "!\n";
    char *greeting = malloc ( sizeof(char) * ( strlen(name) + strlen(hello) + strlen(excla) + 1 ) );
    if( greeting == NULL) exit(1);
    strcpy( greeting , hello);
    strcat(greeting, name);
    strcat(greeting, excla);
    return greeting;
}
</snippet></ROW><ROW><id>14883982</id><snippet>roles</snippet></ROW><ROW><id>14883982</id><snippet>staff</snippet></ROW><ROW><id>14883982</id><snippet>roles</snippet></ROW><ROW><id>14883982</id><snippet>{% for member, form in roles.items %}
    {{ member }} : {{ form }}
{% endfor %}
</snippet></ROW><ROW><id>14884052</id><snippet>datetime.strptime</snippet></ROW><ROW><id>14884052</id><snippet>&gt;&gt;&gt; t = datetime.datetime.strptime('26-12-2012 18:32:51','%d-%m-%Y %H:%M:%S')
&gt;&gt;&gt; t
datetime.datetime(2012, 12, 26, 18, 32, 51)
</snippet></ROW><ROW><id>14884052</id><snippet>&gt;&gt;&gt; t2 = t.replace(hour=0,minute=0,second=0)
</snippet></ROW><ROW><id>14884052</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>14884052</id><snippet>timedelta</snippet></ROW><ROW><id>14884052</id><snippet>&gt;&gt;&gt; t - t2
datetime.timedelta(0, 66771)
&gt;&gt;&gt; dt = t - t2
&gt;&gt;&gt; dt1 = datetime.timedelta(0, 28800) #08:00 hrs
&gt;&gt;&gt; dt2 = datetime.timedelta(0, 68400) #08:00 hrs
&gt;&gt;&gt; dt &gt; dt1
True
&gt;&gt;&gt; dt2 &gt; dt &gt; dt1
True
</snippet></ROW><ROW><id>14884062</id><snippet>itertools</snippet></ROW><ROW><id>14884062</id><snippet>from itertools import islice

def window(seq, n=2):
    "Returns a sliding window (of width n) over data from the iterable"
    "   s -&gt; (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   "
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result    
    for elem in it:
        result = result[1:] + (elem,)
        yield result
</snippet></ROW><ROW><id>14884062</id><snippet>from __future__ import division  # For Python 2

def moving_averages(values, size):
    for selection in window(values, size):
        yield sum(selection) / size
</snippet></ROW><ROW><id>14884062</id><snippet>&gt;&gt;&gt; y= ['1', '2', '3', '4','5','6','7','8','9','10']
&gt;&gt;&gt; for avg in moving_averages(map(int, y), 5):
...     print(avg)
... 
3.0
4.0
5.0
6.0
7.0
8.0
</snippet></ROW><ROW><id>14884062</id><snippet>None</snippet></ROW><ROW><id>14884062</id><snippet>n - 1</snippet></ROW><ROW><id>14884062</id><snippet>moving_averages</snippet></ROW><ROW><id>14884062</id><snippet>def moving_averages(values, size):
    for _ in range(size - 1):
        yield None
    for selection in window(values, size):
        yield sum(selection) / size
</snippet></ROW><ROW><id>14884277</id><snippet>loadtxt</snippet></ROW><ROW><id>14884277</id><snippet>reshape</snippet></ROW><ROW><id>14884277</id><snippet>ravel</snippet></ROW><ROW><id>14884336</id><snippet>&gt;&gt;&gt; li = [(1,2,5), (2,8,7),(3,6,9)]
&gt;&gt;&gt; max(l[2] for l in li)
9
</snippet></ROW><ROW><id>14884336</id><snippet>&gt;&gt;&gt; li = [('1','2','5'), ('2','8','7'),('3','6','9')]
&gt;&gt;&gt; max(int(l[2]) for l in li)
9
</snippet></ROW><ROW><id>14884336</id><snippet>&gt;&gt;&gt; gli=(e for e in li)
&gt;&gt;&gt; max(int(l[2]) for l in gli)
9
&gt;&gt;&gt; max(int(l[2]) for l in zip(*li))
9
</snippet></ROW><ROW><id>14884421</id><snippet>maximum = max(data[0] for data in dic.values())
</snippet></ROW><ROW><id>14884421</id><snippet>keys</snippet></ROW><ROW><id>14884421</id><snippet>dict.values()</snippet></ROW><ROW><id>14884476</id><snippet>stdin</snippet></ROW><ROW><id>14884476</id><snippet>stdin.py</snippet></ROW><ROW><id>14884712</id><snippet>sin(1/x)</snippet></ROW><ROW><id>14884712</id><snippet>x_1</snippet></ROW><ROW><id>14884712</id><snippet>x_2</snippet></ROW><ROW><id>14884712</id><snippet>[x_1+epsilon, x_2-epsilon]</snippet></ROW><ROW><id>14884712</id><snippet>x</snippet></ROW><ROW><id>14884712</id><snippet>f(x)</snippet></ROW><ROW><id>14884712</id><snippet>|f(x-epsilon/2)| &gt; |f(x-epsilon)|</snippet></ROW><ROW><id>14884712</id><snippet>epsilon</snippet></ROW><ROW><id>14884712</id><snippet>x_e</snippet></ROW><ROW><id>14884712</id><snippet>f(x_e)</snippet></ROW><ROW><id>14884782</id><snippet>tree_min</snippet></ROW><ROW><id>14884782</id><snippet>node.right</snippet></ROW><ROW><id>14884782</id><snippet>node.left</snippet></ROW><ROW><id>14884782</id><snippet>tree.min</snippet></ROW><ROW><id>14884782</id><snippet>verify</snippet></ROW><ROW><id>14884782</id><snippet>tree_min</snippet></ROW><ROW><id>14884782</id><snippet>tree_max</snippet></ROW><ROW><id>14884782</id><snippet>None</snippet></ROW><ROW><id>14884782</id><snippet>None</snippet></ROW><ROW><id>14884782</id><snippet>min</snippet></ROW><ROW><id>14884782</id><snippet>max</snippet></ROW><ROW><id>14884782</id><snippet>node.value</snippet></ROW><ROW><id>14884782</id><snippet>node.key</snippet></ROW><ROW><id>14884782</id><snippet>float("-inf")</snippet></ROW><ROW><id>14884782</id><snippet>"ten"</snippet></ROW><ROW><id>14884782</id><snippet>False</snippet></ROW><ROW><id>14884782</id><snippet>if</snippet></ROW><ROW><id>14884782</id><snippet>verify</snippet></ROW><ROW><id>14884782</id><snippet>tree_max(node.left) &lt;= node.key &lt;= tree_min(node.right)</snippet></ROW><ROW><id>14884782</id><snippet>and</snippet></ROW><ROW><id>14884782</id><snippet>if</snippet></ROW><ROW><id>14884782</id><snippet>class Node:
    def __init__(self, k, val):
        self.key = k
        self.value = val
        self.left = None
        self.right = None

def tree_max(node):
    if not node:
        return float("-inf")
    maxleft  = tree_max(node.left)
    maxright = tree_max(node.right)
    return max(node.key, maxleft, maxright)

def tree_min(node):
    if not node:
        return float("inf")
    minleft  = tree_min(node.left)
    minright = tree_min(node.right)
    return min(node.key, minleft, minright)

def verify(node):
    if not node:
        return True
    if (tree_max(node.left) &lt;= node.key &lt;= tree_min(node.right) and
        verify(node.left) and verify(node.right)):
        return True
    else:
        return False

root= Node(10, "Hello")
root.left = Node(5, "Five")
root.right= Node(30, "Thirty")

print(verify(root)) # prints True, since this tree is valid

root = Node(10, "Ten")
root.right = Node(20, "Twenty")
root.left = Node(5, "Five")
root.left.right = Node(15, "Fifteen")

print(verify(root)) # prints False, since 15 is to the left of 10
</snippet></ROW><ROW><id>14884915</id><snippet>CHARACTER SET utf8</snippet></ROW><ROW><id>14884915</id><snippet>..., IN `title` VARCHAR(255) CHARSET utf8,...
</snippet></ROW><ROW><id>14884997</id><snippet>for lst in my_list:
    if 1 in lst:
       count_element_has_1 += 1
    elif lst.count(0) == len(lst):
       count_all_0 += 1
</snippet></ROW><ROW><id>14884997</id><snippet>elif all(x==0 for x in lst):
    count_all_0 += 1
</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885001</id><snippet>dict2 = dict(map(func, dict1.iteritems()))
</snippet></ROW><ROW><id>14885001</id><snippet>func</snippet></ROW><ROW><id>14885001</id><snippet>(key, old_value)</snippet></ROW><ROW><id>14885001</id><snippet>(key, new_value)</snippet></ROW><ROW><id>14885001</id><snippet>new_value</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885001</id><snippet>dict</snippet></ROW><ROW><id>14885001</id><snippet>dict2 = {key: func(value) for key, value in dict1.itervalues()}
</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885001</id><snippet>def func_wrapped(d, key):
    d[key] = func(d[key])
map(partial(func_wrapped, d), dict1)
</snippet></ROW><ROW><id>14885001</id><snippet>partial</snippet></ROW><ROW><id>14885001</id><snippet>d.__setitem__</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885001</id><snippet>for</snippet></ROW><ROW><id>14885001</id><snippet>map</snippet></ROW><ROW><id>14885009</id><snippet>t1</snippet></ROW><ROW><id>14885009</id><snippet>FSTEST</snippet></ROW><ROW><id>14885009</id><snippet>FSTEST</snippet></ROW><ROW><id>14885009</id><snippet>os.setegid(1000)
os.seteuid(1010)
fp = open("06.dd")
</snippet></ROW><ROW><id>14885031</id><snippet>def pythag_thm(a, b=None):
    if b is None:
        b = a

    return (a ** 2 + b ** 2) ** .5
</snippet></ROW><ROW><id>14885077</id><snippet>articles/1234?slide=5
</snippet></ROW><ROW><id>14885100</id><snippet>try:
    import _winreg
except ImportError:
    import cygwinreg as _winreg
</snippet></ROW><ROW><id>14885100</id><snippet>import sys

if sys.platform == 'win32':
     import _winreg
elif sys.platform == 'cygwin':
     import cygwinreg as _winreg
else:
     # non-windows support
</snippet></ROW><ROW><id>14885449</id><snippet>intervals = [[100,200],[150,250],[300,400]]
intervalsSorted = sorted(intervals, key=lambda x: x[0]) # sort by start time
for x in range(1,len(intervalsSorted)):
    if intervalsSorted[x-1][1] &gt; intervalsSorted[x][0]:
        print "{0} overlaps with {1}".format( intervals[x-1], intervals[x] )

# result: [100, 200] overlaps with [150, 250]
</snippet></ROW><ROW><id>14885449</id><snippet>intervals = [[100,200],[150,250],[300,400],[250,500]]

overlapping = [ [x,y] for x in intervals for y in intervals if x is not y and x[1]&gt;y[0] and x[0]&lt;y[0] ]
for x in overlapping:
    print '{0} overlaps with {1}'.format(x[0],x[1])

# results:
# [100, 200] overlaps with [150, 250]
# [250, 500] overlaps with [300, 400]
</snippet></ROW><ROW><id>14885449</id><snippet>intervals = [[100,200],[150,250],[300,400],[250,500],[10,900],[1000,12300],[-151,32131],["a","c"],["b","d"],["foo","kung"]]

overlapping = [ [x,y] for x in intervals for y in intervals if x is not y and x[1]&gt;y[0] and x[0]&lt;y[0] ]
for x in overlapping:
    print '{0} overlaps with {1}'.format(x[0],x[1])

# results:
# [100, 200] overlaps with [150, 250]
# [250, 500] overlaps with [300, 400]
# [10, 900] overlaps with [100, 200]
# [10, 900] overlaps with [150, 250]
# [10, 900] overlaps with [300, 400]
# [10, 900] overlaps with [250, 500]
# [-151, 32131] overlaps with [100, 200]
# [-151, 32131] overlaps with [150, 250]
# [-151, 32131] overlaps with [300, 400]
# [-151, 32131] overlaps with [250, 500]
# [-151, 32131] overlaps with [10, 900]
# [-151, 32131] overlaps with [1000, 12300]
# ['a', 'c'] overlaps with ['b', 'd']
</snippet></ROW><ROW><id>14885741</id><snippet>Start notepad++ ex1.py
</snippet></ROW><ROW><id>14885741</id><snippet>start notepad++ c:\users\you\desktop\files\ex1.py
</snippet></ROW><ROW><id>14885743</id><snippet>loadtxt</snippet></ROW><ROW><id>14885743</id><snippet>In [80]: import numpy as np

In [81]: x = np.loadtxt('test.dat', dtype = np.float64)

In [82]: print(x)
-37.9
</snippet></ROW><ROW><id>14885743</id><snippet>In [83]: x
Out[83]: array(-37.9000000000005)
</snippet></ROW><ROW><id>14885743</id><snippet>In [2]: x = np.loadtxt('test.dat', dtype = np.float64)
</snippet></ROW><ROW><id>14885743</id><snippet>repr</snippet></ROW><ROW><id>14885743</id><snippet>x</snippet></ROW><ROW><id>14885743</id><snippet>In [3]: x
Out[3]: array([-37.9, -37.9])
</snippet></ROW><ROW><id>14885743</id><snippet>np.set_printoptions</snippet></ROW><ROW><id>14885743</id><snippet>In [4]: np.get_printoptions()
Out[4]: 
{'edgeitems': 3,
 'infstr': 'inf',
 'linewidth': 75,
 'nanstr': 'nan',
 'precision': 8,
 'suppress': False,
 'threshold': 1000}

In [5]: np.set_printoptions(precision = 17)

In [6]: x
Out[6]: array([-37.90000000000050306, -37.90000000000050306])
</snippet></ROW><ROW><id>14885822</id><snippet>import urllib2
import bs4 as bs
url = 'http://mattilintulahti.net/mediablogi/2013/02/11/19-asiaa-joita-et-tieda-mediayhtiosta-nimeltaan-red-bull/'
html = urllib2.urlopen(url).read()
doc = bs.BeautifulSoup(html, 'lxml')
for meta in doc.html.head.findAll('meta', attrs={'property': 'og:title'}):
    print(meta.attrs['content'])
</snippet></ROW><ROW><id>14885822</id><snippet>19 asiaa joita et tiedä mediayhtiöstä nimeltään Red Bull
</snippet></ROW><ROW><id>14885882</id><snippet> if x == "Diameter" or "diameter":
</snippet></ROW><ROW><id>14885882</id><snippet> if (x == "Diameter") or "diameter":
</snippet></ROW><ROW><id>14885882</id><snippet>x != "Diameter"</snippet></ROW><ROW><id>14885882</id><snippet>if "diameter":
</snippet></ROW><ROW><id>14885882</id><snippet>False, None, "", [], {}, ...</snippet></ROW><ROW><id>14885882</id><snippet>False</snippet></ROW><ROW><id>14885882</id><snippet>if</snippet></ROW><ROW><id>14885882</id><snippet>bool</snippet></ROW><ROW><id>14885882</id><snippet>True</snippet></ROW><ROW><id>14885882</id><snippet>or</snippet></ROW><ROW><id>14885882</id><snippet>if x == "Diameter" or x == "diameter":  # most direct translation
if x in {"Diameter", "diameter"}:  # very slightly faster, a little less typing
if x.lower() == "diameter":  # also allows DIAmeter, etc
</snippet></ROW><ROW><id>14885882</id><snippet>if x == ("Diameter" or "diameter"):
</snippet></ROW><ROW><id>14885882</id><snippet>if x == "Diameter":
</snippet></ROW><ROW><id>14885882</id><snippet>"Diameter" or "diameter"</snippet></ROW><ROW><id>14885882</id><snippet>"Diameter"</snippet></ROW><ROW><id>14885882</id><snippet>True</snippet></ROW><ROW><id>14886107</id><snippet>from bs4 import BeautifulSoup
import requests

content = requests.get("TOPShop_URL").content
soup = BeautifulSoup(content)
product_names = soup.findAll("h1")
print product_names
</snippet></ROW><ROW><id>14886190</id><snippet>d = {}

for x in A.attributes
    d[x] = [];
</snippet></ROW><ROW><id>14886199</id><snippet>A</snippet></ROW><ROW><id>14886199</id><snippet>B</snippet></ROW><ROW><id>14886199</id><snippet>__init__.py</snippet></ROW><ROW><id>14886199</id><snippet>Driver.py</snippet></ROW><ROW><id>14886349</id><snippet>scatter</snippet></ROW><ROW><id>14886349</id><snippet>PathCollection</snippet></ROW><ROW><id>14886349</id><snippet>Collection</snippet></ROW><ROW><id>14886349</id><snippet>self.display_points, = ax.plot(x, y, marker='o', linestyle='none')
</snippet></ROW><ROW><id>14886349</id><snippet>Line2D</snippet></ROW><ROW><id>14886349</id><snippet>Line2D</snippet></ROW><ROW><id>14886349</id><snippet>set_marker</snippet></ROW><ROW><id>14886349</id><snippet>set_markersize</snippet></ROW><ROW><id>14886437</id><snippet>&gt;&gt;&gt; objlist = range(10)
&gt;&gt;&gt; for j in range(1,3):
...   print objlist[1+ j*3:4+ j*3]
... 
[4, 5, 6]
[7, 8, 9]
</snippet></ROW><ROW><id>14886437</id><snippet>j</snippet></ROW><ROW><id>14886437</id><snippet>1</snippet></ROW><ROW><id>14886437</id><snippet>objlist1</snippet></ROW><ROW><id>14886437</id><snippet>j</snippet></ROW><ROW><id>14886437</id><snippet>2</snippet></ROW><ROW><id>14886437</id><snippet>objlist2</snippet></ROW><ROW><id>14886437</id><snippet>globals()</snippet></ROW><ROW><id>14886792</id><snippet>page = BeautifulSoup(urllib2.urlopen(url).read())
</snippet></ROW><ROW><id>14886792</id><snippet>url</snippet></ROW><ROW><id>14886792</id><snippet>page = BeautifulSoup(url.read())
</snippet></ROW><ROW><id>14886795</id><snippet>'.cache/www.example.com'</snippet></ROW><ROW><id>14886795</id><snippet>httplib2</snippet></ROW><ROW><id>14886795</id><snippet>.cache</snippet></ROW><ROW><id>14886795</id><snippet>FileCache</snippet></ROW><ROW><id>14886795</id><snippet>dir_name</snippet></ROW><ROW><id>14886795</id><snippet>safe</snippet></ROW><ROW><id>14886795</id><snippet>FileCache</snippet></ROW><ROW><id>14886795</id><snippet>Http</snippet></ROW><ROW><id>14886795</id><snippet>tempfile</snippet></ROW><ROW><id>14886795</id><snippet>anydbm</snippet></ROW><ROW><id>14886795</id><snippet>sqlite3</snippet></ROW><ROW><id>14886825</id><snippet>import os
os.chdir(os.path.dirname(os.path.abspath(__file__)))
</snippet></ROW><ROW><id>14886825</id><snippet>scriptdir = os.path.dirname(os.path.abspath(__file__))

mypath = os.path.join(scriptdir, 'data', 'mfile.dat')

... etc ...
</snippet></ROW><ROW><id>14886894</id><snippet>input()</snippet></ROW><ROW><id>14886894</id><snippet>int()</snippet></ROW><ROW><id>14886894</id><snippet>int(input(...))
</snippet></ROW><ROW><id>14886894</id><snippet>float()</snippet></ROW><ROW><id>14886894</id><snippet>decimal.Decimal()</snippet></ROW><ROW><id>14886894</id><snippet>while</snippet></ROW><ROW><id>14886894</id><snippet>range()</snippet></ROW><ROW><id>14886894</id><snippet>def main():
    print("Let me Retire Financial Calculator")
    deposit = float(input("Please input annual deposit in dollars: $"))
    rate = int(input ("Please input annual rate in percentage: %")) / 100
    time = int(input("How many years until retirement?"))
    value = 0
    for x in range(1, time+1):
        value = (value * rate) + deposit
        print("The value of your account after" + str(x) + "years will be $" + str(value))
</snippet></ROW><ROW><id>14887014</id><snippet>ord(...)</snippet></ROW><ROW><id>14887014</id><snippet>data = np.random.randint(256, size=(1000000,)).astype('uint8')
data[-1] = 0 # to avoid errors with last element
</snippet></ROW><ROW><id>14887014</id><snippet>def np_unpack(data) :
    # find where condition is met
    mask = (data &amp; 0x01).astype(bool)
    # Keep only 1st, 3rd, 5th... consecutive occurrences of True in mask
    new_mask = mask[:]
    mult = -1
    while new_mask.sum() :
        new_mask = np.logical_and(new_mask,
                                  np.concatenate(([False], new_mask[:-1])))
        mask +=  new_mask * mult
        mult *= -1
    del new_mask
    cond = np.nonzero(mask)[0]
    result = np.empty(data.shape, dtype='int16')
    result[:] = data.astype('int8') &gt;&gt; 1
    result[cond] &lt;&lt;= 8
    result[cond] += data[cond + 1]
    mask = np.ones(data.shape, dtype=bool)
    mask[cond + 1] = False
    return result[mask]
</snippet></ROW><ROW><id>14887014</id><snippet>In [4]: np.all(unpack(data) == np_unpack(data))
Out[4]: True

In [5]: %timeit unpack(data)
1 loops, best of 3: 7.11 s per loop

In [6]: %timeit np_unpack(data)
1 loops, best of 3: 294 ms per loop
</snippet></ROW><ROW><id>14887033</id><snippet>&gt;= lookup_value</snippet></ROW><ROW><id>14887033</id><snippet>&gt;= lookup_value</snippet></ROW><ROW><id>14887033</id><snippet>bintrees</snippet></ROW><ROW><id>14887033</id><snippet>blist</snippet></ROW><ROW><id>14887033</id><snippet>bintrees</snippet></ROW><ROW><id>14887033</id><snippet>dict_subset = lookup_dict[lookup_value:]
</snippet></ROW><ROW><id>14887033</id><snippet>O(log N)</snippet></ROW><ROW><id>14887033</id><snippet>list</snippet></ROW><ROW><id>14887033</id><snippet>dict</snippet></ROW><ROW><id>14887033</id><snippet>list</snippet></ROW><ROW><id>14887033</id><snippet>bisect</snippet></ROW><ROW><id>14887033</id><snippet>bisect</snippet></ROW><ROW><id>14887033</id><snippet>dict</snippet></ROW><ROW><id>14887033</id><snippet>bintrees</snippet></ROW><ROW><id>14887206</id><snippet>fnmatch</snippet></ROW><ROW><id>14887333</id><snippet>fb = type('fb',(object,),{'__init__':initer,
                              'link':linker,
                              'CLASSIES':0})
</snippet></ROW><ROW><id>14887333</id><snippet>print 'id(fb) == %d' % id(fb)</snippet></ROW><ROW><id>14887333</id><snippet>import sched,time

test = 0  
s = sched.scheduler(time.time, time.sleep)

Y = 2000

def initer(self):
    global test,Y
    if self.__class__.CLASSIES == 0:
        Y += 1
        self.__class__.CLASSIES += 1

def linker(self):
    global test,Y
    test = test + 1
    self.X = self.X + 1
    print 'Y == %d' % Y
    print 'test == %d     self.X == %d' % (test,self.X)


def loop1(sc):
    fb = type('fb',(object,),{'__init__':initer,
                              'link':linker,
                              'CLASSIES':0})
    print '--------'
    print 'id(fb) == %d' % id(fb)
    m1 = fb()
    m1.X = 0
    m1.link()
    print 
    m2 =fb()
    m2.X = 1
    m2.link()
    print 
    m3 =fb()
    m3.X = 2
    m3.link()
    print '--------'

    # Update loop every 10 second
    sc.enter(10, 10, loop1, (sc,))


# end loop
s.enter(1, 1, loop1, (s,))
s.run()
</snippet></ROW><ROW><id>14887333</id><snippet>--------
id(fb) == 18976648
Y == 2001
test == 1     self.X == 1

Y == 2001
test == 2     self.X == 2

Y == 2001
test == 3     self.X == 3
--------
--------
id(fb) == 13818640
Y == 2002
test == 4     self.X == 1

Y == 2002
test == 5     self.X == 2

Y == 2002
test == 6     self.X == 3
--------
--------
id(fb) == 18970384
Y == 2003
test == 7     self.X == 1

Y == 2003
test == 8     self.X == 2

Y == 2003
test == 9     self.X == 3
--------
--------
id(fb) == 18970864
Y == 2004
test == 10     self.X == 1

Y == 2004
test == 11     self.X == 2

Y == 2004
test == 12     self.X == 3
--------
--------
id(fb) == 18971736
Y == 2005
test == 13     self.X == 1

Y == 2005
test == 14     self.X == 2

Y == 2005
test == 15     self.X == 3
--------
--------
id(fb) == 18957224
Y == 2006
test == 16     self.X == 1

Y == 2006
test == 17     self.X == 2

Y == 2006
test == 18     self.X == 3
--------
.
.
.
etc
</snippet></ROW><ROW><id>14887333</id><snippet>fb</snippet></ROW><ROW><id>14887333</id><snippet>Y</snippet></ROW><ROW><id>14887333</id><snippet>id(fb)</snippet></ROW><ROW><id>14887333</id><snippet>`` an</snippet></ROW><ROW><id>14887333</id><snippet>import sched,time

test = 0  
s = sched.scheduler(time.time, time.sleep)

Y = 2000

def loop1(sc):
    class fb:
        def link(self):
            global test,Y
            test = test + 1
            self.X = self.X + 1
            print 'Y == %d' % Y
            print 'test == %d     self.X == %d' % (test,self.X)
    print 'id(fb) == %d' % id(fb)
    print '--------'
    m1 = fb()
    m1.X = 0
    m1.link()
    print 
    m2 =fb()
    m2.X = 1
    m2.link()
    print 
    m3 =fb()
    m3.X = 0
    m3.link()
    print '--------'
    del fb

    # Update loop every 10 second
    sc.enter(10, 10, loop1, (sc,))


# end loop
s.enter(1, 1, loop1, (s,))
s.run()
</snippet></ROW><ROW><id>14887474</id><snippet>str</snippet></ROW><ROW><id>14887474</id><snippet># Decode the byte strings into Unicode objects using
# the encoding you know that your database is using.
companies = [company.decode("utf-8") for company in companies]
return render_template("companies.html", companies=companies)
</snippet></ROW><ROW><id>14887474</id><snippet>import psycopg2
import psycopg2.extensions
psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)
psycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)
</snippet></ROW><ROW><id>14887537</id><snippet>from flask import Flask, render_template
from yourMySqlLibrary import connect_to_mysql

conn = connect_to_mysql()
# This is only executed when you start the script
data = conn.execute("SELECT * FROM MySemiRegularlyUpdatedTable")

app = Flask(__name__)

@app.route("/")
def view_data():
    return render_template("view_data.html", data=data)

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>14887537</id><snippet>@app.route("/")
def view_data():
    # Removed from above and placed here
    # The connection is made to the database for each request
    conn = connect_to_mysql()
    # This is only executed on every request
    data = conn.execute("SELECT * FROM MySemiRegularlyUpdatedTable")
    return render_template("view_data.html", data=data)
</snippet></ROW><ROW><id>14887649</id><snippet>function.cpp</snippet></ROW><ROW><id>14887649</id><snippet>wrapper.py</snippet></ROW><ROW><id>14887649</id><snippet>ArrayType</snippet></ROW><ROW><id>14887649</id><snippet>ctypes.c_int * 10</snippet></ROW><ROW><id>14887649</id><snippet>np.ctypeslib</snippet></ROW><ROW><id>14887649</id><snippet>frombuffer</snippet></ROW><ROW><id>14887649</id><snippet>import ctypes
from numpy.ctypeslib import ndpointer

lib = ctypes.CDLL('./library.so')
lib.function.restype = ndpointer(dtype=ctypes.c_int, shape=(10,))

res = lib.function()
</snippet></ROW><ROW><id>14887811</id><snippet>if d[key] &gt; maxi</snippet></ROW><ROW><id>14887811</id><snippet>if d[key] &gt; d[maxi]</snippet></ROW><ROW><id>14888033</id><snippet>fh = open("index.html", 'r')
rawString = fh.read()   # read entire file to string
fh.close()

temp =  re.findall("&lt;a  href=\".*?\"", rawString) 
if temp:
    for i in range(len(temp)): # process each match
        temp[i] = re.search("\".*?\"", temp[i]).group(0) # remove 'href='
    print temp    
else:
    print "Not found"
</snippet></ROW><ROW><id>14888178</id><snippet>pip install PIL
</snippet></ROW><ROW><id>14888353</id><snippet>shell=True</snippet></ROW><ROW><id>14888353</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14888353</id><snippet>list</snippet></ROW><ROW><id>14888480</id><snippet>if</snippet></ROW><ROW><id>14888480</id><snippet>itertools.ifilter()</snippet></ROW><ROW><id>14888480</id><snippet>fnmatch.fnmatch()</snippet></ROW><ROW><id>14888480</id><snippet>from itertools import ifilter
from fnmatch import fnmatch

ext = '.mp3'
fnPattern = '*'+ext

for dirName, subdirList, fileList in os.walk(source_dir):
    if not any(ifilter(lambda fname: fnmatch(fname, fnPattern), fileList)):
        print '  skipping "{}"'.format(dirName)
        continue
    ...
</snippet></ROW><ROW><id>14888480</id><snippet>os.mkdir(dest)</snippet></ROW><ROW><id>14888480</id><snippet>os.makedirs(dest)</snippet></ROW><ROW><id>14888480</id><snippet>from itertools import ifilter
from fnmatch import fnmatch

ext = '.mp3'
fnPattern = '*'+ext

for dirName, subdirList, fileList in os.walk(source_dir):

    # generate list of files in directory with desired extension
    matches = ifilter(lambda fname: fnmatch(fname, fnPattern), fileList)

    # skip subdirectory if it does not contain any files of interest
    if not matches:
        continue
    ...
    ... create destination directory with os.makedirs()
    ...
    #  copy each file to destination directory
    for fname in matches:
      ... copy file
</snippet></ROW><ROW><id>14888547</id><snippet>patFinderDivision = re.compile('&lt;span class="label"&gt;Division:&lt;/span&gt;\s*  \s*&lt;/td&gt;&lt;td&gt;(.*)&lt;/td&gt;')
</snippet></ROW><ROW><id>14888887</id><snippet>out = template[first+second]
assert[out.startswith('{{')]
</snippet></ROW><ROW><id>14888887</id><snippet>out = template[first:second]
assert out.startswith('{{')
</snippet></ROW><ROW><id>14888887</id><snippet>    else:
        print "Invalid Data Passed it"
</snippet></ROW><ROW><id>14888887</id><snippet>    else:
        raise ValueError('Invalid data')
</snippet></ROW><ROW><id>14888887</id><snippet>from string import Template
t = Template('$name is in $course')

vars = {
    'name': 'Jane',
    'course': 'CS 1410',
    'adjective': 'shimmering'
}

print(t.substitute(vars))
</snippet></ROW><ROW><id>14888887</id><snippet>Jane is in CS 1410
</snippet></ROW><ROW><id>14889015</id><snippet>class LogTemplateView(TemplateView):
    template_name = "mylog.html"
    apache_log_file = "apache.error.log"
    django_log_file = "django.log"

    def get_context_data(self, **kwargs):
        """
        This has been overriden to give the template access to the log files.
        i.e. {{ apache_log_file }} and {{ django_log_file }}
        """
        context = super(LogTemplateView, self).get_context_data(**kwargs)
        context["apache_log_file"] = self.tail(open(self.apache_log_file, "r"), 20)
        context["django_log_file"] = self.tail(open(self.django_log_file, "r"), 20)
        return context

    # Credit: Armin Ronacher - http://stackoverflow.com/a/692616/1428653
    def tail(f, n, offset=None):
        """Reads a n lines from f with an offset of offset lines.  The return
        value is a tuple in the form ``(lines, has_more)`` where `has_more` is
        an indicator that is `True` if there are more lines in the file.
        """
        avg_line_length = 74
        to_read = n + (offset or 0)

        while 1:
            try:
                f.seek(-(avg_line_length * to_read), 2)
            except IOError:
                # woops.  apparently file is smaller than what we want
                # to step back, go to the beginning instead
                f.seek(0)
            pos = f.tell()
            lines = f.read().splitlines()
            if len(lines) &gt;= to_read or pos == 0:
                return lines[-to_read:offset and -offset or None], \
                       len(lines) &gt; to_read or pos &gt; 0
            avg_line_length *= 1.3
</snippet></ROW><ROW><id>14889072</id><snippet>number</snippet></ROW><ROW><id>14889072</id><snippet>def test():
    if regex.match("hello"):
        number = number + 1
</snippet></ROW><ROW><id>14889072</id><snippet>number =</snippet></ROW><ROW><id>14889072</id><snippet>number</snippet></ROW><ROW><id>14889072</id><snippet>number</snippet></ROW><ROW><id>14889072</id><snippet>number + 1</snippet></ROW><ROW><id>14889072</id><snippet>number</snippet></ROW><ROW><id>14889072</id><snippet>global number</snippet></ROW><ROW><id>14889072</id><snippet>number</snippet></ROW><ROW><id>14889356</id><snippet>cp437</snippet></ROW><ROW><id>14889356</id><snippet>import sys,io
from bs4 import BeautifulSoup
sys.stdout = io.TextIOWrapper(sys.stdout.buffer,'cp437','backslashreplace')
soup = BeautifulSoup (open("my.html"))
print(soup.prettify())
</snippet></ROW><ROW><id>14889356</id><snippet># On Windows, utf-8-sig will allow the file to be read by Notepad.
with open('out.txt','w',encoding='utf-8-sig') as f:
   f.write(soup.prettify())
</snippet></ROW><ROW><id>14889491</id><snippet>pip install pika</snippet></ROW><ROW><id>14889491</id><snippet>pip uninstall  pika</snippet></ROW><ROW><id>14889491</id><snippet>pip install git+https://github.com/pika/pika.git</snippet></ROW><ROW><id>14889584</id><snippet>import operator as op
print max(reduce(op.mul, num[i:i+5]) for i in range(1000))
for k in range(5):
    print max(reduce(op.mul, num[i:i+5]) for i in range(k, 1000, 5))
</snippet></ROW><ROW><id>14889584</id><snippet>num</snippet></ROW><ROW><id>14889584</id><snippet>del num[0]</snippet></ROW><ROW><id>14889584</id><snippet>threadX.l</snippet></ROW><ROW><id>14889584</id><snippet>for p in chunk_product(num):
</snippet></ROW><ROW><id>14889584</id><snippet>for p in chunk_product(l):
</snippet></ROW><ROW><id>14889584</id><snippet>greatest_product(l)</snippet></ROW><ROW><id>14889584</id><snippet>num</snippet></ROW><ROW><id>14889584</id><snippet>[0, 1, 2, 3]</snippet></ROW><ROW><id>14889584</id><snippet>tmp[0:i]</snippet></ROW><ROW><id>14889584</id><snippet>tmp[0:i+1]</snippet></ROW><ROW><id>14889584</id><snippet>threads = []
for i in range(5):
    tmp = num[:]
    del tmp[0:i]
    thread = pThread(tmp)
    thread.start()
    threads.append(thread)

for i in range(5):
    threads[i].join()

print len(threads), map(lambda th: th.p, threads)
print max(map(lambda th: th.p, threads))
</snippet></ROW><ROW><id>14890231</id><snippet> request.user.get_profile().field_name
</snippet></ROW><ROW><id>14890231</id><snippet> {{user.userprofile.field_name}}
</snippet></ROW><ROW><id>14890570</id><snippet>True</snippet></ROW><ROW><id>14890570</id><snippet>1</snippet></ROW><ROW><id>14890570</id><snippet>False</snippet></ROW><ROW><id>14890570</id><snippet>-1</snippet></ROW><ROW><id>14890570</id><snippet>b</snippet></ROW><ROW><id>14890570</id><snippet>def search(a, b) :
    return np.where(np.round(fftconvolve(a * 2 - 1, (b * 2 - 1)[::-1],
                                         mode='valid') - len(b)) == 0)[0]
</snippet></ROW><ROW><id>14890570</id><snippet>as_strided</snippet></ROW><ROW><id>14890570</id><snippet>In [8]: np.where(np.convolve(may_a, may_b.astype(int),
   ...:                      mode='valid') == may_b.sum())[0]
Out[8]: array([2, 7])
</snippet></ROW><ROW><id>14890570</id><snippet>scipy.signal.fftconvolve</snippet></ROW><ROW><id>14890570</id><snippet>In [13]: np.where(scipy.signal.fftconvolve(may_a, may_b,
   ....:                                   mode='valid') == may_b.sum())[0]
Out[13]: array([2, 7])
</snippet></ROW><ROW><id>14890570</id><snippet>In [14]: scipy.signal.fftconvolve(may_a, may_b, mode='valid')
Out[14]: array([ 1.,  1.,  2.,  1.,  1.,  1.,  1.,  2.])
</snippet></ROW><ROW><id>14890570</id><snippet>In [15]: np.where(np.round(scipy.signal.fftconvolve(may_a, may_b, mode='valid') -
   ....:                   may_b.sum()) == 0)[0]
Out[15]: array([2, 7])
</snippet></ROW><ROW><id>14890599</id><snippet>brew install cmu-pocketsphinx</snippet></ROW><ROW><id>14890611</id><snippet>time.strftime('%H:%M:%S')
</snippet></ROW><ROW><id>14890667</id><snippet>UserDict</snippet></ROW><ROW><id>14890667</id><snippet>kwargs</snippet></ROW><ROW><id>14890667</id><snippet>kwargs</snippet></ROW><ROW><id>14890667</id><snippet>int()</snippet></ROW><ROW><id>14890667</id><snippet>dict</snippet></ROW><ROW><id>14890667</id><snippet>dict.getInt = getAsInt</snippet></ROW><ROW><id>14890667</id><snippet>getAsInt</snippet></ROW><ROW><id>14890667</id><snippet>int(kwargs['par1']) if par1 in kwargs else None</snippet></ROW><ROW><id>14890667</id><snippet>def asInt(v): return None if v is None else int(v)

value1 = asInt(kwargs['par1'])
</snippet></ROW><ROW><id>14890682</id><snippet>'\n'</snippet></ROW><ROW><id>14890682</id><snippet>'error'</snippet></ROW><ROW><id>14890682</id><snippet>def segregate(lines, word):
    for line in lines:
        if word in line:
            yield '\n'+line+'\n'
        else:
            yield line
</snippet></ROW><ROW><id>14890682</id><snippet>tail</snippet></ROW><ROW><id>14890682</id><snippet>def tail(f, window=20):
    ...
    return '\n'.join(segregate(''.join(data).splitlines()[-window:], 'error'))
</snippet></ROW><ROW><id>14890682</id><snippet>'\n'</snippet></ROW><ROW><id>14890682</id><snippet>'error'</snippet></ROW><ROW><id>14890682</id><snippet>re.sub</snippet></ROW><ROW><id>14890682</id><snippet>import re
def tail(f, window=20):
    ...
    return '\n'.join(re.sub(r'error', '\nerror\n', ''.join(data)).splitlines()[-window:])
</snippet></ROW><ROW><id>14890951</id><snippet>SERIALIZATION_MODULES</snippet></ROW><ROW><id>14890951</id><snippet>wadofstuff.django.serializers.json</snippet></ROW><ROW><id>14890951</id><snippet>pip install wadofstuff-django-serializers
</snippet></ROW><ROW><id>14890951</id><snippet>python-xml</snippet></ROW><ROW><id>14890951</id><snippet>python-base</snippet></ROW><ROW><id>14890951</id><snippet>xml.sax.saxutils</snippet></ROW><ROW><id>14890951</id><snippet>python-xml</snippet></ROW><ROW><id>14890951</id><snippet>sudo zypper in python-xml
</snippet></ROW><ROW><id>14890951</id><snippet>pdb</snippet></ROW><ROW><id>14890951</id><snippet>&gt; python -m pdb manage.py syncdb
&gt; manage.py(2)&lt;module&gt;() -&gt; from django.core.management import execute_manager
(Pdb) b /usr/local/lib/python2.7/site-packages/django/core/management/commands/loaddata.py:110
Breakpoint 1 at /usr/local/lib/python2.7/site-packages/django/core/management/commands/loaddata.py:110
(Pdb) c
Creating tables ...
Installing custom SQL ...
Installing indexes ...
&gt; /usr/local/lib/python2.7/site-packages/django/core/management/commands/loaddata.py(110)handle()
-&gt; for fixture_label in fixture_labels:
(Pdb) n
&gt; /usr/local/lib/python2.7/site-packages/django/core/management/commands/loaddata.py(111)handle()
-&gt; parts = fixture_label.split('.')
</snippet></ROW><ROW><id>14890951</id><snippet>ImportError: 'No module named xml.sax.saxutils'
</snippet></ROW><ROW><id>14891450</id><snippet>{{ lines|linebreaks }}
</snippet></ROW><ROW><id>14891450</id><snippet>{{ lines|linebreaksbr }}
</snippet></ROW><ROW><id>14891487</id><snippet>main.py</snippet></ROW><ROW><id>14891487</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; from flask import Flask, request, session, g, redirect, url_for, abort, render_template, flash
&gt;&gt;&gt; from flask.ext.sqlalchemy import SQLAlchemy

&gt;&gt;&gt; # create the application
&gt;&gt;&gt; app = Flask(__name__)
&gt;&gt;&gt; app.config.from_object(__name__)
&gt;&gt;&gt; app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'some-url.com')
&gt;&gt;&gt; db = SQLAlchemy(app)
</snippet></ROW><ROW><id>14891487</id><snippet>db</snippet></ROW><ROW><id>14891487</id><snippet>from app import db</snippet></ROW><ROW><id>14891487</id><snippet>from app import db</snippet></ROW><ROW><id>14891487</id><snippet>from my_filename_without_the_extenssion import db</snippet></ROW><ROW><id>14891487</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('path/to/my/file')
&gt;&gt;&gt; from my_filename_without_the_extenssion import db
&gt;&gt;&gt; # to test if everythings ok
&gt;&gt;&gt; db
</snippet></ROW><ROW><id>14891602</id><snippet>%</snippet></ROW><ROW><id>14891602</id><snippet>.append()</snippet></ROW><ROW><id>14891602</id><snippet>def last_digit(number):
    return number % 10

def one_digit_of_each_list_number(number_list):
    return [last_digit(number) for number in number_list]
</snippet></ROW><ROW><id>14891602</id><snippet>def ones_digit_histogram(number_list):
    histogram = [0] * 10
    for digit in one_digit_of_each_list_number(number_list):
        histogram[digit] += 1
    return [float(x)/len(number_list) for x in histogram]
</snippet></ROW><ROW><id>14891602</id><snippet>&gt;&gt;&gt; print ones_digit_histogram([123, 32, 234, 34, 22])
[0.0, 0.0, 0.4, 0.2, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0]
</snippet></ROW><ROW><id>14891634</id><snippet>str</snippet></ROW><ROW><id>14891634</id><snippet>&gt;&gt;&gt; print printPattern(3)
</snippet></ROW><ROW><id>14891634</id><snippet>print(printPattern(3))</snippet></ROW><ROW><id>14892360</id><snippet>BroadcastServerFactory</snippet></ROW><ROW><id>14892360</id><snippet>process</snippet></ROW><ROW><id>14892360</id><snippet>class process(threading.Thread):
    def __init__(self, buffer3m, broadcast_server_factory):
        threading.Thread.__init__(self)
        self.setDaemon(True)
        self.buffer3 = buffer3

        self.factory = broadcast_server_factory

    def run(self):
        self.factory.broadcast("I don't know what I'm doing!")
</snippet></ROW><ROW><id>14892360</id><snippet>self.factory</snippet></ROW><ROW><id>14892360</id><snippet>run</snippet></ROW><ROW><id>14892360</id><snippet>process</snippet></ROW><ROW><id>14892360</id><snippet>__main__</snippet></ROW><ROW><id>14892360</id><snippet> p = process(buffer, factory)
</snippet></ROW><ROW><id>14892360</id><snippet>process -&gt; Process</snippet></ROW><ROW><id>14892402</id><snippet>os.system()</snippet></ROW><ROW><id>14892402</id><snippet>subprocess</snippet></ROW><ROW><id>14892402</id><snippet>args.fileread</snippet></ROW><ROW><id>14892402</id><snippet>os.system("rtl2gds -rtl={args.fileread} -rtl_top={args.module_name} -syn".format(args=args)
</snippet></ROW><ROW><id>14892402</id><snippet>FileType</snippet></ROW><ROW><id>14892402</id><snippet>parser.add_argument('fileread', help='Enter the file path')
</snippet></ROW><ROW><id>14892402</id><snippet>subprocess.call()</snippet></ROW><ROW><id>14892402</id><snippet>os.system()</snippet></ROW><ROW><id>14892402</id><snippet>import subprocess

subprocess.call(['rtl2gds', '-rtl=' + args.fileread, '-rtl_top=' + args.module_name, '-syn'])
</snippet></ROW><ROW><id>14892402</id><snippet>rtl2gds</snippet></ROW><ROW><id>14892402</id><snippet>=</snippet></ROW><ROW><id>14892402</id><snippet>subprocess.call(['rtl2gds', '-rtl', args.fileread, '-rtl_top', args.module_name, '-syn'])
</snippet></ROW><ROW><id>14892493</id><snippet>0x20</snippet></ROW><ROW><id>14892493</id><snippet>0x00</snippet></ROW><ROW><id>14892607</id><snippet>Smoke</snippet></ROW><ROW><id>14892607</id><snippet>Particle</snippet></ROW><ROW><id>14892607</id><snippet>class Particle():
    def __init__(self, col, size, *strategies):
        self.x, self.y = 0, 0
        self.col = col
        self.alive = 0
        self.strategies = strategies
        self.size = size

    def kill(self):
        self.alive = -1 # alive -1 means dead

    def move(self):
        for s in self.strategies:
            s(self)   
</snippet></ROW><ROW><id>14892607</id><snippet>__init__</snippet></ROW><ROW><id>14892607</id><snippet>move</snippet></ROW><ROW><id>14892607</id><snippet>def ascending(speed):
    def _ascending(particle):
        particle.y -= speed
    return _ascending
</snippet></ROW><ROW><id>14892607</id><snippet>def kill_at(max_x, max_y):
    def _kill_at(particle):
        if particle.x &lt; -max_x or particle.x &gt; max_x or particle.y &lt; -max_y or particle.y &gt; max_y:
            particle.kill()
    return _kill_at
</snippet></ROW><ROW><id>14892607</id><snippet>def age(amount):
    def _age(particle):
        particle.alive += amount
    return _age
</snippet></ROW><ROW><id>14892607</id><snippet>def fan_out(modifier):
    def _fan_out(particle):
        d = particle.alive / modifier
        d += 1
        particle.x += random.randint(-d, d)
    return _fan_out
</snippet></ROW><ROW><id>14892607</id><snippet>def wind(direction, strength):
    def _wind(particle):
        if random.randint(0,100) &lt; strength:
            particle.x += direction
    return _wind
</snippet></ROW><ROW><id>14892607</id><snippet>def smoke_machine():
    colors = {0: grey,
              1: dark_grey,
              2: light_grey}
    def create():
        for _ in xrange(random.choice([0,0,0,0,0,0,0,1,2,3])):
            behaviour = age(1), ascending(1), fan_out(400), wind(1, 15), kill_at(1000, 1000)
            p = Particle(colors[random.randint(0, 2)], random.randint(10, 15), *behaviour)
            yield p

    while True:
        yield create()
</snippet></ROW><ROW><id>14892607</id><snippet>create</snippet></ROW><ROW><id>14892607</id><snippet>random.choice</snippet></ROW><ROW><id>14892607</id><snippet>&gt;&gt;&gt; s=smoke_machine()
&gt;&gt;&gt; list(next(s))
[]
&gt;&gt;&gt; list(next(s))
[&lt;particle.Particle instance at 0x02AD94B8&gt;, &lt;particle.Particle instance at 0x02
AD9030&gt;]
&gt;&gt;&gt; list(next(s))
[]
&gt;&gt;&gt; list(next(s))
[]
&gt;&gt;&gt; list(next(s))
[&lt;particle.Particle instance at 0x02AD9030&gt;]
&gt;&gt;&gt; list(next(s))
[&lt;particle.Particle instance at 0x02AD9418&gt;, &lt;particle.Particle instance at 0x02
AD93C8&gt;]
&gt;&gt;&gt; list(next(s))
[&lt;particle.Particle instance at 0x02AD9030&gt;]
</snippet></ROW><ROW><id>14892607</id><snippet>class Emitter(object):
    def __init__(self, pos=(0, 0)):
        self.particles = []
        self.pos = pos
        self.factories = []

    def add_factory(self, factory, pre_fill=300):
        self.factories.append(factory)
        tmp = []
        for _ in xrange(pre_fill):
            n = next(factory)
            tmp.extend(n)
            for p in tmp:
                p.move()
        self.particles.extend(tmp)

    def update(self):
        for f in self.factories:
            self.particles.extend(next(f))

        for p in self.particles[:]:
            p.move()
            if p.alive == -1:
                self.particles.remove(p)

    def draw(self, screen, position_translater_func):
        for p in self.particles:
            target_pos = position_translater_func(map(sum, zip((p.x, p.y), self.pos)))
            pygame.draw.circle(screen, p.col, target_pos, int(p.size))
</snippet></ROW><ROW><id>14892607</id><snippet>smoke_machine</snippet></ROW><ROW><id>14892607</id><snippet>self.particles</snippet></ROW><ROW><id>14892607</id><snippet>add_factory</snippet></ROW><ROW><id>14892607</id><snippet>factory</snippet></ROW><ROW><id>14892607</id><snippet>pre_fill</snippet></ROW><ROW><id>14892607</id><snippet>Emitter</snippet></ROW><ROW><id>14892607</id><snippet>Emitter</snippet></ROW><ROW><id>14892607</id><snippet>GameScene</snippet></ROW><ROW><id>14892607</id><snippet>self.emitter</snippet></ROW><ROW><id>14892607</id><snippet>Emitter</snippet></ROW><ROW><id>14892607</id><snippet>smoke_machine</snippet></ROW><ROW><id>14892607</id><snippet>render</snippet></ROW><ROW><id>14892607</id><snippet>for e in self.emitter:
    e.draw(screen, self.camera.apply)
</snippet></ROW><ROW><id>14892607</id><snippet>update</snippet></ROW><ROW><id>14892607</id><snippet>for e in self.emitter:
   e.update()
</snippet></ROW><ROW><id>14892607</id><snippet>import pygame
from pygame import *
from particle import Emitter, smoke_machine
WIN_WIDTH = 1120 - 320
WIN_HEIGHT = 960 - 320
HALF_WIDTH = int(WIN_WIDTH / 2)
HALF_HEIGHT = int(WIN_HEIGHT / 2)

DISPLAY = (WIN_WIDTH, WIN_HEIGHT)
DEPTH = 0
FLAGS = 0
CAMERA_SLACK = 30

levels = {0: {'level': [
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                         E  ",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "               PPPPP        PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPP           P",
                    "                            PPPP           P",
                    "                            PPPP     PPPPPPP",
                    "                      PPPPPPPPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "       PPPP                 PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "PPPPP                       PPPP     PPPPPPP",
                    "PPP                         PPPP     PPPPPPP",
                    "PPP                         PPPP     PPPPPPP",
                    "PPP                         PPPP     PPPPPPP",
                    "PPP         PPPPP           PPPP     PPPPPPP",
                    "PPP                                     PPPP",
                    "PPP                                     PPPP",
                    "PPP                                     PPPP",
                    "PPP                       PPPPPPPPPPPPPPPPPP",
                    "PPP                       PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP    S      PPPPPPPPPPPPPPPPPP",],
             'enemies': [(9, 38)]},
             1: {'level': [
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                            ",
                    "                                         E  ",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "               PPPPP        PPPPPPPPPPPPPPPP",
                    "                            PPPPPPPPPPPPPPPP",
                    "                            PPPP           P",
                    "                            PPPP           P",
                    "                            PPPP     PPPPPPP",
                    "                      PPPPPPPPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "       PPPP                 PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "                            PPPP     PPPPPPP",
                    "PPPPP                       PPPP     PPPPPPP",
                    "PPP                  PPPPPPPPPPP     PPPPPPP",
                    "PPP                         PPPP     PPPPPPP",
                    "PPP                         PPPP     PPPPPPP",
                    "PPP             PPPPPPPP    PPPP     PPPPPPP",
                    "PPP                                     PPPP",
                    "PPP                                     PPPP",
                    "PPP          PPPPP                      PPPP",
                    "PPP          P            PPPPPPPPPPPPPPPPPP",
                    "PPP          P    PPPPPPPPPPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",
                    "PPPPPPPPPPPPPPP           PPPPPPPPPPPPPPPPPP",],
             'enemies': [(9, 38), (18, 38), (15, 15)]}}

...

class GameScene(Scene):
    def __init__(self, levelno):
        super(GameScene, self).__init__()
        self.bg = Surface((32,32))
        self.bg.convert()
        self.bg.fill(Color("#0094FF"))
        up = left = right = False
        self.entities = pygame.sprite.Group()
        self.player = Player(5, 40)
        self.player.scene = self
        self.platforms = []

        self.levelno = levelno

        levelinfo = levels[levelno]
        self.enemies = [Enemy(*pos) for pos in levelinfo['enemies']]

        level = levelinfo['level']
        total_level_width = len(level[0]) * 32
        total_level_height = len(level) * 32

        self.emitter = []

        # build the level
        x = 0
        y = 0
        for row in level:
            for col in row:
                if col == "P":
                    p = Platform(x, y)
                    self.platforms.append(p)
                    self.entities.add(p)
                if col == "E":
                    e = ExitBlock(x, y)
                    self.platforms.append(e)
                    self.entities.add(e)
                if col == "S":
                    e = Emitter((x, total_level_height))
                    e.add_factory(smoke_machine())
                    self.emitter.append(e)
                x += 32
            y += 32
            x = 0

        self.camera = Camera(complex_camera, total_level_width, total_level_height)
        self.entities.add(self.player)
        for e in self.enemies:
            self.entities.add(e)

    def render(self, screen):
        for y in range(20):
            for x in range(25):
                screen.blit(self.bg, (x * 32, y * 32))

        for e in self.emitter:
            e.draw(screen, self.camera.apply)

        for e in self.entities:
            screen.blit(e.image, self.camera.apply(e))

    def update(self):
        for e in self.emitter:
            e.update()

        pressed = pygame.key.get_pressed()
        up, left, right = [pressed[key] for key in (K_UP, K_LEFT, K_RIGHT)]
        self.player.update(up, left, right, self.platforms)

        for e in self.enemies:
            e.update(self.platforms)

        self.camera.update(self.player)

    def exit(self):
        if self.levelno+1 in levels:
            self.manager.go_to(GameScene(self.levelno+1))
        else:
            self.manager.go_to(CustomScene("You win!"))

    def die(self):
        self.manager.go_to(CustomScene("You lose!"))

    def handle_events(self, events):
        for e in events:
            if e.type == KEYDOWN and e.key == K_ESCAPE:
                self.manager.go_to(TitleScene())

...

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14892607</id><snippet>import pygame,random

def ascending(speed):
    def _ascending(particle):
        particle.y -= speed
    return _ascending

def kill_at(max_x, max_y):
    def _kill_at(particle):
        if particle.x &lt; -max_x or particle.x &gt; max_x or particle.y &lt; -max_y or particle.y &gt; max_y:
            particle.kill()
    return _kill_at

def age(amount):
    def _age(particle):
        particle.alive += amount
    return _age

def fan_out(modifier):
    def _fan_out(particle):
        d = particle.alive / modifier
        d += 1
        particle.x += random.randint(-d, d)
    return _fan_out

def wind(direction, strength):
    def _wind(particle):
        if random.randint(0,100) &lt; strength:
            particle.x += direction
    return _wind

class Particle():
    def __init__(self, col, size, *strategies):
        self.x, self.y = 0, 0
        self.col = col
        self.alive = 0
        self.strategies = strategies
        self.size = size

    def kill(self):
        self.alive = -1 # alive -1 means dead

    def move(self):
        for s in self.strategies:
            s(self)        

black = (0,0,0)
grey = (145,145,145)
light_grey = (192,192,192)
dark_grey = (183, 183, 183)

def smoke_machine():
    colors = {0: grey,
              1: dark_grey,
              2: light_grey}
    def create():
        for _ in xrange(random.choice([0,0,0,0,0,0,0,1,2,3])):
            behaviour = ascending(1), kill_at(1000, 1000), fan_out(400), wind(1, 15), age(1)
            p = Particle(colors[random.randint(0, 2)], random.randint(10, 15), *behaviour)
            yield p

    while True:
        yield create()

class Emitter(object):
    def __init__(self, pos=(0, 0)):
        self.particles = []
        self.pos = pos
        self.factories = []

    def add_factory(self, factory, pre_fill=300):
        self.factories.append(factory)
        tmp = []
        for _ in xrange(pre_fill):
            n = next(factory)
            tmp.extend(n)
            for p in tmp:
                p.move()
        self.particles.extend(tmp)

    def update(self):
        for f in self.factories:
            self.particles.extend(next(f))

        for p in self.particles[:]:
            p.move()
            if p.alive == -1:
                self.particles.remove(p)

    def draw(self, screen, position_translater_func):
        for p in self.particles:
            target_pos = position_translater_func(map(sum, zip((p.x, p.y), self.pos)))
            pygame.draw.circle(screen, p.col, target_pos, int(p.size))
</snippet></ROW><ROW><id>14892607</id><snippet>def grow(amount):
    def _grow(particle):
        if random.randint(0,100) &lt; particle.alive / 20:
            particle.size += amount
    return _grow
</snippet></ROW><ROW><id>14892607</id><snippet>grow(0.5)</snippet></ROW><ROW><id>14892607</id><snippet>smoke_machine</snippet></ROW><ROW><id>14892607</id><snippet>numpy</snippet></ROW><ROW><id>14892607</id><snippet>itertools</snippet></ROW><ROW><id>14892607</id><snippet>psyco</snippet></ROW><ROW><id>14892607</id><snippet>pygame.surfarray</snippet></ROW><ROW><id>14892607</id><snippet>random</snippet></ROW><ROW><id>14892877</id><snippet>os.path</snippet></ROW><ROW><id>14892877</id><snippet>import os

src = '/Users/storm/server/svr_user'
dst = '/svr_user2'

a = '/Users/storm/server/svr_user/x/y/z'
os.path.join(dst, os.path.relpath(a, src))
</snippet></ROW><ROW><id>14892877</id><snippet>'/svr_user2/x/y/z'
</snippet></ROW><ROW><id>14892878</id><snippet>arrowstyle</snippet></ROW><ROW><id>14892878</id><snippet>ax.annotate(..., arrowprops=dict(arrowstyle='&lt;-&gt;'))
</snippet></ROW><ROW><id>14892878</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def annotate_dim(ax,xyfrom,xyto,text=None):

    if text is None:
        text = str(np.sqrt( (xyfrom[0]-xyto[0])**2 + (xyfrom[1]-xyto[1])**2 ))

    ax.annotate("",xyfrom,xyto,arrowprops=dict(arrowstyle='&lt;-&gt;'))
    ax.text((xyto[0]+xyfrom[0])/2,(xyto[1]+xyfrom[1])/2,text,fontsize=16)

x = np.linspace(0,2*np.pi,100)
plt.plot(x,np.sin(x))
annotate_dim(plt.gca(),[0,0],[np.pi,0],'$\pi$')

plt.show()
</snippet></ROW><ROW><id>14893057</id><snippet>set -u</snippet></ROW><ROW><id>14893057</id><snippet>set -u</snippet></ROW><ROW><id>14893057</id><snippet>myscript.sh: line 11: COMMMAND: unbound variable
</snippet></ROW><ROW><id>14893057</id><snippet>bash -u myscript.sh arg1 arg2</snippet></ROW><ROW><id>14893057</id><snippet>-x</snippet></ROW><ROW><id>14893295</id><snippet>test_conf_file_w</snippet></ROW><ROW><id>14893295</id><snippet>with</snippet></ROW><ROW><id>14893387</id><snippet>df = df1.join(df2, how='outer')
df['state'].fillna(method='ffill',inplace=True)
df.dropna()
</snippet></ROW><ROW><id>14893387</id><snippet>join</snippet></ROW><ROW><id>14893387</id><snippet>&gt;&gt;&gt; df
                                          state  utime
time                                                  
2013-02-14 12:29:37.101000          SystemReset    NaN
2013-02-14 12:29:38.697038                  NaN      0
2013-02-14 12:29:38.710432                  NaN      1
2013-02-14 12:29:39.103000             WaitFace    NaN
2013-02-14 12:29:39.103000      NormalExecution    NaN
2013-02-14 12:29:39.106475                  NaN      2
2013-02-14 12:29:39.166000        GreetVisitors    NaN
2013-02-14 12:29:39.200701                  NaN      3
2013-02-14 12:29:40.197014                  NaN      0
2013-02-14 12:29:42.217976                  NaN      5
2013-02-14 12:29:46.879000  AskForParticipation    NaN
2013-02-14 12:29:56.807000  IntroduceVernissage    NaN
2013-02-14 12:29:57.460601                  NaN      7
2013-02-14 12:30:07.275000      PictureQuestion    NaN
</snippet></ROW><ROW><id>14893387</id><snippet>&gt;&gt;&gt; df['state'].fillna(method='ffill',inplace=True)
time
2013-02-14 12:29:37.101000            SystemReset
2013-02-14 12:29:38.697038            SystemReset
2013-02-14 12:29:38.710432            SystemReset
2013-02-14 12:29:39.103000               WaitFace
2013-02-14 12:29:39.103000        NormalExecution
2013-02-14 12:29:39.106475        NormalExecution
2013-02-14 12:29:39.166000          GreetVisitors
2013-02-14 12:29:39.200701          GreetVisitors
2013-02-14 12:29:40.197014          GreetVisitors
2013-02-14 12:29:42.217976          GreetVisitors
2013-02-14 12:29:46.879000    AskForParticipation
2013-02-14 12:29:56.807000    IntroduceVernissage
2013-02-14 12:29:57.460601    IntroduceVernissage
2013-02-14 12:30:07.275000        PictureQuestion
Name: state
</snippet></ROW><ROW><id>14893387</id><snippet>&gt;&gt;&gt; df.dropna()
                                          state  utime
time                                                  
2013-02-14 12:29:38.697038          SystemReset      0
2013-02-14 12:29:38.710432          SystemReset      1
2013-02-14 12:29:39.106475      NormalExecution      2
2013-02-14 12:29:39.200701        GreetVisitors      3
2013-02-14 12:29:40.197014        GreetVisitors      0
2013-02-14 12:29:42.217976        GreetVisitors      5
2013-02-14 12:29:57.460601  IntroduceVernissage      7
</snippet></ROW><ROW><id>14893387</id><snippet>drop_duplicates</snippet></ROW><ROW><id>14893387</id><snippet>take_last=True</snippet></ROW><ROW><id>14893387</id><snippet>&lt;</snippet></ROW><ROW><id>14893387</id><snippet>&lt;=</snippet></ROW><ROW><id>14894099</id><snippet>cls</snippet></ROW><ROW><id>14894099</id><snippet>super</snippet></ROW><ROW><id>14894099</id><snippet>class C(B):
    def __init__(self):
        print "C init"

    @classmethod
    def _method(cls):
        print "calling super(C)'s classmethod"
        return super(C, cls)._method()
</snippet></ROW><ROW><id>14894550</id><snippet>class MyMainWindow(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)
        loadUi('mainwindow.ui', self)
</snippet></ROW><ROW><id>14894918</id><snippet>from threading import Thread

class Foo(Thread):
     def __init__(self):
         Thread.__init__(self)
         self.keepRunning = True
     def run(self):
         while self.keepRunning:
            print "running in thread", self

import time
if __name__ == "__main__":
     mythread1 = Foo()
     mythread2 = Foo()
     mythread1.start()
     mythread2.start()
     time.sleep(10) # and let the 2 threads to their work
     mythread1.keepRunning = False
     mythread2.keepRunning = False
</snippet></ROW><ROW><id>14895178</id><snippet>application/json</snippet></ROW><ROW><id>14895178</id><snippet>request.json</snippet></ROW><ROW><id>14895178</id><snippet>@route ('/tagTweets', method='POST')
def tagTweets():
     response.content_type = 'application/json'
     sender = request.json['sender']
     receiver = request.json['receiver']
     message = request.json['message']
</snippet></ROW><ROW><id>14895322</id><snippet>t = list(t)
</snippet></ROW><ROW><id>14895322</id><snippet>list(t)</snippet></ROW><ROW><id>14895322</id><snippet>t</snippet></ROW><ROW><id>14895322</id><snippet>t2 = list(t)
</snippet></ROW><ROW><id>14895351</id><snippet>system = models.AutoField(primary_key=True, db_column="system_id")
</snippet></ROW><ROW><id>14895361</id><snippet>setup.py</snippet></ROW><ROW><id>14895361</id><snippet>pip</snippet></ROW><ROW><id>14895361</id><snippet>easy_install</snippet></ROW><ROW><id>14895361</id><snippet>zc.buildout</snippet></ROW><ROW><id>14895361</id><snippet>json</snippet></ROW><ROW><id>14895361</id><snippet>simplejson</snippet></ROW><ROW><id>14895361</id><snippet>cx_Oracle</snippet></ROW><ROW><id>14895361</id><snippet>setup.py</snippet></ROW><ROW><id>14895361</id><snippet>python setup.py test</snippet></ROW><ROW><id>14895600</id><snippet>b = a[:2] + [3] + a[2:]</snippet></ROW><ROW><id>14895600</id><snippet>&gt;&gt;&gt; 
&gt;&gt;&gt; a = [1, 2, 4]
&gt;&gt;&gt; print a
[1, 2, 4]
&gt;&gt;&gt; b = a[:2] + [3] + a[2:]
&gt;&gt;&gt; print a
[1, 2, 4]
&gt;&gt;&gt; print b
[1, 2, 3, 4]
</snippet></ROW><ROW><id>14895656</id><snippet>&gt;&gt;&gt; s = "sdc4-251504-7f5-f59c349f0e516894fc89d2686a0d57f5-1360922654.97671.data"
&gt;&gt;&gt; s.rsplit('.', 1)[0].split('-')[-1]
'1360922654.97671'
</snippet></ROW><ROW><id>14895656</id><snippet>&gt;&gt;&gt; s.rsplit('.', 1)
['sdc4-251504-7f5-f59c349f0e516894fc89d2686a0d57f5-1360922654.97671', 'data']

&gt;&gt;&gt; s.rsplit('.', 1)[0]
'sdc4-251504-7f5-f59c349f0e516894fc89d2686a0d57f5-1360922654.97671'

&gt;&gt;&gt; s.rsplit('.', 1)[0].split('-')
['sdc4', '251504', '7f5', 'f59c349f0e516894fc89d2686a0d57f5', '1360922654.97671']

&gt;&gt;&gt; s.rsplit('.', 1)[0].split('-')[-1]
'1360922654.97671'
</snippet></ROW><ROW><id>14895656</id><snippet>anything-WHATYOUWANT.stringwithoutdots
</snippet></ROW><ROW><id>14895891</id><snippet>pyplot.colorbar</snippet></ROW><ROW><id>14896038</id><snippet>definitions_list = [definition.encode("utf8") for definition in definitions.objects.values_list('title', flat=True)]
</snippet></ROW><ROW><id>14896154</id><snippet>try:
    os.remove(a)
except OSError as e: # name the Exception `e`
    print "Failed with:", e.strerror # look what it says
    print "Error code:", e.code 
</snippet></ROW><ROW><id>14896259</id><snippet>\xab</snippet></ROW><ROW><id>14896259</id><snippet>\x34</snippet></ROW><ROW><id>14896259</id><snippet>4</snippet></ROW><ROW><id>14896259</id><snippet>&gt;&gt;&gt; print(b'\x34')
b'4'
</snippet></ROW><ROW><id>14896259</id><snippet>\x56</snippet></ROW><ROW><id>14896259</id><snippet>V</snippet></ROW><ROW><id>14896259</id><snippet>\x78</snippet></ROW><ROW><id>14896259</id><snippet>x</snippet></ROW><ROW><id>14896259</id><snippet>&gt;&gt;&gt; b'\x34' == b'4'
True
</snippet></ROW><ROW><id>14896448</id><snippet>from lxml import etree
print(etree.tostring(root, pretty_print=True))
</snippet></ROW><ROW><id>14896702</id><snippet>import urllib2
import json
txt = urllib2.urlopen('http://pastebin.com/raw.php?i=uu6qK6Rg').read()
j  = json.loads(txt)

print j['current_observation']['temp_c']
</snippet></ROW><ROW><id>14896702</id><snippet>19.1
</snippet></ROW><ROW><id>14896702</id><snippet>print json.dumps(j['current_observation'], sort_keys=True,  indent=4)
</snippet></ROW><ROW><id>14896718</id><snippet>s = 1</snippet></ROW><ROW><id>14896718</id><snippet>ax.scatter</snippet></ROW><ROW><id>14896718</id><snippet>self.ax.scatter(data[:,1],data[:,0],color='black', marker = 's', s = 1)
</snippet></ROW><ROW><id>14896936</id><snippet>./goodscript.sh MyName</snippet></ROW><ROW><id>14896936</id><snippet>MyName</snippet></ROW><ROW><id>14896936</id><snippet>$1</snippet></ROW><ROW><id>14896936</id><snippet>$2</snippet></ROW><ROW><id>14896936</id><snippet>$3</snippet></ROW><ROW><id>14896936</id><snippet>./goodscript.sh -name MyName -age 30</snippet></ROW><ROW><id>14896936</id><snippet>goodscript.sh</snippet></ROW><ROW><id>14896936</id><snippet>echo MyName | ./interactivescript.sh</snippet></ROW><ROW><id>14896936</id><snippet>MyName</snippet></ROW><ROW><id>14896936</id><snippet>interactivescript.sh</snippet></ROW><ROW><id>14896936</id><snippet>%PARAM_NAME%</snippet></ROW><ROW><id>14896936</id><snippet>$PARAM_NAME</snippet></ROW><ROW><id>14897033</id><snippet>&gt;&gt;&gt; from itertools import takewhile
&gt;&gt;&gt; list(takewhile(lambda e:e&gt;=26, [30.1, 29.7, 28.5, 27.1, 20, 17, 16]))
[30.1, 29.7, 28.5, 27.1]
</snippet></ROW><ROW><id>14897033</id><snippet>None</snippet></ROW><ROW><id>14897033</id><snippet>&gt;&gt;&gt; list(takewhile(lambda e:e&gt;=26, [25, 30.1, 29.7, 28.5, 27.1, 20, 17, 28, 27]))
[]
</snippet></ROW><ROW><id>14897062</id><snippet>%</snippet></ROW><ROW><id>14897062</id><snippet>mac = api.execute_script(query="tag:%s", script_id="script_id:%s", username="user:%s" %(output, script, user))
</snippet></ROW><ROW><id>14897062</id><snippet>mac = api.execute_script(query="tag:%s" %tag, script_id="script_id:%s" %script, username="user:%s" %user
</snippet></ROW><ROW><id>14897146</id><snippet>def load_hook():
    web.ctx.pipe = input_p

app = web.application(urls, globals())
    app.add_processor(web.loadhook(load_hook))
    app.run()
</snippet></ROW><ROW><id>14897484</id><snippet>len(dom.getElementsByTagName('out'))</snippet></ROW><ROW><id>14897484</id><snippet>from xml.dom.minidom import parseString
file = open('test.xml','r')
data = file.read()
file.close()
dom = parseString(data)
print len(dom.getElementsByTagName('out'))
</snippet></ROW><ROW><id>14897484</id><snippet>3
</snippet></ROW><ROW><id>14897524</id><snippet>\w</snippet></ROW><ROW><id>14897524</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>14897898</id><snippet>map&lt;text,text&gt; 
</snippet></ROW><ROW><id>14897898</id><snippet>if current['meta'] is None:
    current['meta'] = dict()
</snippet></ROW><ROW><id>14898026</id><snippet>with open('my_file.html', 'w') as fo:
    fo.write(tsod.to_html())
</snippet></ROW><ROW><id>14898026</id><snippet>tsod.to_html(open('my_file.html', 'w'))
</snippet></ROW><ROW><id>14898162</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>14898162</id><snippet>os.system</snippet></ROW><ROW><id>14898162</id><snippet>from subprocess import check_output
check_output("dir C:", shell=True)
</snippet></ROW><ROW><id>14898162</id><snippet>check_output</snippet></ROW><ROW><id>14898162</id><snippet>subprocess.call</snippet></ROW><ROW><id>14898164</id><snippet>sys.path</snippet></ROW><ROW><id>14898164</id><snippet>/usr/lib/pymodules/python2.7/google/appengine</snippet></ROW><ROW><id>14898164</id><snippet>ext.gql</snippet></ROW><ROW><id>14898239</id><snippet>def _Foo__method(self):
</snippet></ROW><ROW><id>14898239</id><snippet>_Foo</snippet></ROW><ROW><id>14898239</id><snippet>def _method(self):</snippet></ROW><ROW><id>14898772</id><snippet>import copy

class Ex(object):
    clvar='foo'
    def __init__(self,i):
        self.i=i

    def __repr__(self):
        return 'clvar={}, self.i={}'.format(self.clvar,self.i)


ex1=Ex(1)
ex2=Ex(2)

excopy1=copy.deepcopy(ex1) 
excopy2=copy.deepcopy(ex2)     

print ex1,ex2   

print excopy1,excopy2

excopy1.i=22
excopy1.clvar='bar'

print ex1,excopy1

class Ex2(Ex):
    pass

ex2_2=Ex2(222)

print ex2_2    
</snippet></ROW><ROW><id>14898772</id><snippet>clvar=foo, self.i=1 clvar=foo, self.i=2
clvar=foo, self.i=1 clvar=foo, self.i=2
clvar=foo, self.i=1 clvar=bar, self.i=22
clvar=foo, self.i=222
</snippet></ROW><ROW><id>14898932</id><snippet>inspect</snippet></ROW><ROW><id>14898932</id><snippet>import inspect

def staticmethods(cls):
    for name, method in inspect.getmembers(cls, inspect.ismethod):
        setattr(cls, name, staticmethod(method.__func__))
    return cls

@staticmethods
class Test:
    def test():
        print("Test")

Test.test()
</snippet></ROW><ROW><id>14898932</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>14898932</id><snippet>staticmethod()</snippet></ROW><ROW><id>14898932</id><snippet>@staticmethod</snippet></ROW><ROW><id>14899014</id><snippet>this = self.ax.scatter(data[:,1], data[:,0],color= 'black', marker = 's', s=3)

self.fig.colorbar(this, ticks=[-1, 0, 1],orientation='horizontal')
</snippet></ROW><ROW><id>14899014</id><snippet>colorbar</snippet></ROW><ROW><id>14899014</id><snippet>this = self.ax.scatter(data[:,1], data[:,0],color=color_data, marker = 's', s=3)

self.fig.colorbar(this, ticks=[-1, 0, 1],orientation='horizontal')
</snippet></ROW><ROW><id>14899014</id><snippet>len(color_data) == len(data[:,0]</snippet></ROW><ROW><id>14899045</id><snippet># inital settings
size = 50 # size of the maxtrix = size*size
n = 20 # number of points in the matrix
vmin=0 # min value for the colorcoding
vmax=3 # max value for the colorcoding

#generate the data and colormap
data = np.vstack((np.random.randint(0,size,n),np.random.randint(0,size,n))).T
param = np.random.randint(vmin,vmax+1,n)
# 0-red, 1-blue, 2-green and 3-yellow
cmap = mpl.colors.ListedColormap([[1,0,0], [0,0,1], [0,1,0], [1,1,0]])

# create the n*x matrix and x/y 'colorbars'
mtrx = np.zeros((size,size))-1
xcolors = np.zeros(size)-1
ycolors = np.zeros(size)-1

# map the data to the n*n matrix and x/y 'colorbars'
for n, item in enumerate(data):
    x, y = item

    xcolors[x] = param[n]
    ycolors[y] = param[n]
    mtrx[x,y] = 1 # relace 1 with param [n] to color the matrix points as well

# mask all 'empty' matrix entries
mtrx = np.ma.masked_values(mtrx,-1)
xcolors = np.ma.masked_values(xcolors.reshape((xcolors.size,1)),-1)
ycolors = np.ma.masked_values(ycolors.reshape((1,xcolors.size)),-1)

fig = plt.figure(figsize=(6,6))
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
x_ax = fig.add_axes([0.05, 0.1, 0.05, 0.8])
y_ax = fig.add_axes([0.1, 0.05, 0.8, 0.05])

ax.imshow(mtrx, cmap=plt.cm.Greys_r, interpolation='none')
ax.set_title('My matrix')

x_ax.imshow(xcolors, cmap=cmap, interpolation='none',vmin=vmin, vmax=vmax)
y_ax.imshow(ycolors, cmap=cmap, interpolation='none',vmin=vmin, vmax=vmax)

for tmpax in [ax, y_ax, x_ax]:
    tmpax.set_yticks([])
    tmpax.set_xticks([])
    tmpax.set_yticklabels([])
    tmpax.set_xticklabels([])

ax.set_xticks(np.arange(-0.5,size + .5,1))
ax.set_yticks(np.arange(-0.5,size + .5,1))
ax.grid(True, color='w', linestyle='-')

plt.setp(y_ax, frame_on=False)
plt.setp(x_ax, frame_on=False)
</snippet></ROW><ROW><id>14899195</id><snippet>.apk</snippet></ROW><ROW><id>14899239</id><snippet>info = sorted((self.Y[x]-self.background_model[x],x) for x in peaks_index_list)
</snippet></ROW><ROW><id>14899239</id><snippet>info[-1][1]
</snippet></ROW><ROW><id>14899239</id><snippet>highest_peak_value,highest_peak_index = info[-1]
</snippet></ROW><ROW><id>14899239</id><snippet>reverse=True</snippet></ROW><ROW><id>14899239</id><snippet>info[-2][1]
</snippet></ROW><ROW><id>14899396</id><snippet>@cherrypy.expose
def echo(self, *args, **kwargs):
    return kwargs['param_1']
</snippet></ROW><ROW><id>14899438</id><snippet>db.session.commit()</snippet></ROW><ROW><id>14899438</id><snippet>foos = Foo.query.all()</snippet></ROW><ROW><id>14899438</id><snippet>db.session.commit()</snippet></ROW><ROW><id>14899438</id><snippet>session.refresh(object)</snippet></ROW><ROW><id>14899438</id><snippet>Foo</snippet></ROW><ROW><id>14899438</id><snippet>Bars</snippet></ROW><ROW><id>14899438</id><snippet>from flask.ext.sqlalchemy import Session

@app.route('/example/')
def home():
    session_two = Session(bind=db.engine.connect())
    foos = session_two.query(Foo).all()

    for foo in foos:
        db.session.add(Bar(foo))
    db.session.commit()

    return render_template_string('''
        {% for foo in foos %}
            {{ foo.name }}
        {% endfor %}
    ''', foos=foos)
</snippet></ROW><ROW><id>14899438</id><snippet>expire_on_commit=False</snippet></ROW><ROW><id>14899438</id><snippet>@app.route('/')
def home():
    foos = Foo.query.all()
    for foo in foos:
        db.session.add(Bar(foo))
        db.session.expunge(foo)
    db.session.commit()

    return render_template_string('''
        {% for foo in foos %}
            {{ foo.name }}
        {% endfor %}
    ''', foos=foos)
</snippet></ROW><ROW><id>14899448</id><snippet>no encoding declared
</snippet></ROW><ROW><id>14899448</id><snippet>send-tweet.py</snippet></ROW><ROW><id>14899448</id><snippet># coding=utf-8
</snippet></ROW><ROW><id>14899448</id><snippet>#!/usr/local/bin/python
</snippet></ROW><ROW><id>14899448</id><snippet>#!/usr/local/bin/python
# coding=utf-8
</snippet></ROW><ROW><id>14899448</id><snippet>s.encode("utf-8")
</snippet></ROW><ROW><id>14899817</id><snippet>open</snippet></ROW><ROW><id>14899817</id><snippet>filehandle = None

def child_init(filename):
    global filehandle
    filehandle = open(filename,...)
    ../..

def child_target(args):
    ../..

if __name__ == '__main__':
    # some code which defines filename
    proc = multiprocessing.Pool(processes=1,initializer=child_init,initargs=[filename])
    proc.apply(child_target,args)
</snippet></ROW><ROW><id>14899978</id><snippet>to_html</snippet></ROW><ROW><id>14899978</id><snippet>float_format : one-parameter function, optional
    formatter function to apply to columns' elements if they are floats
    default None
</snippet></ROW><ROW><id>14899978</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({"A": [1.0/3]})
&gt;&gt;&gt; df
          A
0  0.333333

&gt;&gt;&gt; print df.to_html()
&lt;table border="1" class="dataframe"&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt; 0.333333&lt;/td&gt;
    &lt;/tr&gt;
[...]
</snippet></ROW><ROW><id>14899978</id><snippet>&gt;&gt;&gt; print df.to_html(float_format=lambda x: '%10.2f' % x)
&lt;table border="1" class="dataframe"&gt;
[...]
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;      0.33&lt;/td&gt;
    &lt;/tr&gt;
[...]
</snippet></ROW><ROW><id>14900325</id><snippet>m = zeros(8)
</snippet></ROW><ROW><id>14900325</id><snippet>imax</snippet></ROW><ROW><id>14900325</id><snippet>jmax</snippet></ROW><ROW><id>14900325</id><snippet>kmax</snippet></ROW><ROW><id>14900325</id><snippet>imax = 8;
jmax = 8;
kmax = 5;
x = zeros(imax,jmax,kmax);
</snippet></ROW><ROW><id>14900325</id><snippet>x</snippet></ROW><ROW><id>14900325</id><snippet>m(3,4) = 4; %Assign a value
myvalue = m(3,4) %read the value
m(:,1) = 1:8 *Assign the values 1 through 8 to the first column

x(2,4,5) = 12; %Assign a single value to the three dimensional matrix
x(:,:,2) = m+1; Assign the entire matrix plus one to one of the planes in x.
</snippet></ROW><ROW><id>14900562</id><snippet>numpy</snippet></ROW><ROW><id>14900562</id><snippet>im_new = im_old[:,:,np.newaxis]
</snippet></ROW><ROW><id>14900562</id><snippet>im_new[i,j,k]</snippet></ROW><ROW><id>14900562</id><snippet>im_old[i,j]</snippet></ROW><ROW><id>14900562</id><snippet>k</snippet></ROW><ROW><id>14900562</id><snippet>np.newaxis</snippet></ROW><ROW><id>14900562</id><snippet>None</snippet></ROW><ROW><id>14900694</id><snippet>|</snippet></ROW><ROW><id>14900694</id><snippet>?</snippet></ROW><ROW><id>14900694</id><snippet>def fix(s):
    has_qmark = [part for part in s.split("|") if '?' in part]
    return has_qmark[0] if len(has_qmark) == 1 else s
</snippet></ROW><ROW><id>14900694</id><snippet>&gt;&gt;&gt; fix('(PREDIR )?NAME|PREDIR NAME')
'(PREDIR )?NAME'
&gt;&gt;&gt; fix('(PREDIR )?PRETYP NAME|PREDIR (PRETYP )?NAME')
'(PREDIR )?PRETYP NAME|PREDIR (PRETYP )?NAME'
&gt;&gt;&gt; fix('NAME SUFTYP|NAME( SUFTYP)?')
'NAME( SUFTYP)?'
</snippet></ROW><ROW><id>14900701</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>14900701</id><snippet>if DEBUG:
    STATICFILES_DIRS = (
        # Put strings here, like "/home/html/static" or "C:/www/django/static".
        # Always use forward slashes, even on Windows.
        # Don't forget to use absolute paths, not relative paths.
        '/home/projects/Klanestro/static',
        )
else:
    STATICFILES_DIRS = ('/root/Klanestro/static',)
</snippet></ROW><ROW><id>14900746</id><snippet>python app/manage.py help
</snippet></ROW><ROW><id>14900878</id><snippet>delete</snippet></ROW><ROW><id>14900878</id><snippet>for msg in results:
    body = msg.get_body()
    body = json.loads(body)
    message_body = json.loads(body['Message'])
    ...
    msg.delete()
</snippet></ROW><ROW><id>14901131</id><snippet>import pandas as pd
d1 = pd.DataFrame({'i1': [1, 2, 2], 'i2': [1, 1, 2], 'a': [10, 20, 30]}
                  ).set_index(['i1', 'i2'])
d2 = pd.DataFrame(
    {'i1': [3, 3], 'i2': [1, 2], 'b': [40, 50]}).set_index(['i1', 'i2'])
try:
    d1.join(d2, how='inner')
except Exception as err:
    # Change this to however you wish to handle this case.
    print(err)
</snippet></ROW><ROW><id>14901153</id><snippet># starting three balls
balls = [Ball(),Ball(),Ball()]

while True:
    amount = 0

    event = pygame.event.poll()
    keys = pygame.key.get_pressed()

    if event.type == QUIT:
        pygame.quit()
        sys.exit()

    if keys[K_q]:
        pygame.quit()
        sys.exit()

    #############################################################

    if keys[K_SPACE]:
        balls.append(Ball())

    #############################################################

    screen.fill(WHITE)

    for ball_in_play in balls:
        ball_in_play.move()
        ball_in_play.blitball()


    pygame.time.wait(int(1000/fps))

    pygame.display.update()
</snippet></ROW><ROW><id>14901315</id><snippet>b = [a[0][:2] + a[1][:2],
     a[0][2:] + a[1][2:],
     a[2][:2] + a[3][:2],
     a[2][2:] + a[3][2:]]
</snippet></ROW><ROW><id>14901315</id><snippet>b = [a[i][s] + a[i+1][s] for i in (0,2) for s in (slice(None,2), slice(2,None))]
</snippet></ROW><ROW><id>14901319</id><snippet>x</snippet></ROW><ROW><id>14901319</id><snippet>x - 1</snippet></ROW><ROW><id>14901319</id><snippet>-1</snippet></ROW><ROW><id>14901319</id><snippet>13</snippet></ROW><ROW><id>14901319</id><snippet>x - 1</snippet></ROW><ROW><id>14901319</id><snippet>x</snippet></ROW><ROW><id>14901319</id><snippet>if x == 0 or nums[x-1] != 13:
</snippet></ROW><ROW><id>14901319</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,5]
&gt;&gt;&gt; x[-1]
5
&gt;&gt;&gt; x[-2]
4
</snippet></ROW><ROW><id>14901336</id><snippet>:</snippet></ROW><ROW><id>14901336</id><snippet>for i in xlist:
</snippet></ROW><ROW><id>14901336</id><snippet>import sys</snippet></ROW><ROW><id>14901336</id><snippet>&lt;ALL_TIERS&gt;</snippet></ROW><ROW><id>14901336</id><snippet>&lt;ALL TIERS&gt;</snippet></ROW><ROW><id>14901361</id><snippet>np.vstack([dydx, dydx[-1]])
</snippet></ROW><ROW><id>14901361</id><snippet>dydx</snippet></ROW><ROW><id>14901361</id><snippet>dydx[-1]</snippet></ROW><ROW><id>14901361</id><snippet>np.hstack([dydx, dydx[-1]])
</snippet></ROW><ROW><id>14901361</id><snippet>In [38]: np.hstack([dydx, dydx[-1]])
Out[38]: array([-1,  4,  1, -3, -3])
</snippet></ROW><ROW><id>14901512</id><snippet>n</snippet></ROW><ROW><id>14901512</id><snippet>(2n-3)!!</snippet></ROW><ROW><id>14901512</id><snippet>!!</snippet></ROW><ROW><id>14901512</id><snippet># A very simple representation for Nodes. Leaves are anything which is not a Node.
class Node(object):
  def __init__(self, left, right):
    self.left = left
    self.right = right

  def __repr__(self):
    return '(%s %s)' % (self.left, self.right)

# Given a tree and a label, yields every possible augmentation of the tree by
# adding a new node with the label as a child "above" some existing Node or Leaf.
def add_leaf(tree, label):
  yield Node(label, tree)
  if isinstance(tree, Node):
    for left in add_leaf(tree.left, label):
      yield Node(left, tree.right)
    for right in add_leaf(tree.right, label):
      yield Node(tree.left, right)

# Given a list of labels, yield each rooted, unordered full binary tree with
# the specified labels.
def enum_unordered(labels):
  if len(labels) == 1:
    yield labels[0]
  else:
    for tree in enum_unordered(labels[1:]):
      for new_tree in add_leaf(tree, labels[0]):
        yield new_tree
</snippet></ROW><ROW><id>14901512</id><snippet>n == 4</snippet></ROW><ROW><id>14901512</id><snippet>(2*4 - 3)!! == 5!! == 1 * 3 * 5 == 15</snippet></ROW><ROW><id>14901512</id><snippet>&gt;&gt;&gt; for tree in enum_unordered(("a","b","c","d")): print tree
... 
(a (b (c d)))
((a b) (c d))
(b (a (c d)))
(b ((a c) d))
(b (c (a d)))
(a ((b c) d))
((a (b c)) d)
(((a b) c) d)
((b (a c)) d)
((b c) (a d))
(a (c (b d)))
((a c) (b d))
(c (a (b d)))
(c ((a b) d))
(c (b (a d)))
</snippet></ROW><ROW><id>14901512</id><snippet>C&lt;sub&gt;n-1&lt;/sub&gt;</snippet></ROW><ROW><id>14901512</id><snippet>def enum_ordered(labels):
  if len(labels) == 1:
    yield labels[0]
  else:
    for i in range(1, len(labels)):
      for left in enum_ordered(labels[:i]):
        for right in enum_ordered(labels[i:]):
          yield Node(left, right)
</snippet></ROW><ROW><id>14901512</id><snippet>C&lt;sub&gt;5-1&lt;/sub&gt; == 14</snippet></ROW><ROW><id>14901512</id><snippet>&gt;&gt;&gt; for tree in enum_ordered(("a","b","c","d", "e")): print tree
... 
(a (b (c (d e))))
(a (b ((c d) e)))
(a ((b c) (d e)))
(a ((b (c d)) e))
(a (((b c) d) e))
((a b) (c (d e)))
((a b) ((c d) e))
((a (b c)) (d e))
(((a b) c) (d e))
((a (b (c d))) e)
((a ((b c) d)) e)
(((a b) (c d)) e)
(((a (b c)) d) e)
((((a b) c) d) e)
</snippet></ROW><ROW><id>14901653</id><snippet>child_orders = my_order.order_set.all()
</snippet></ROW><ROW><id>14901653</id><snippet>source</snippet></ROW><ROW><id>14901653</id><snippet>related_name</snippet></ROW><ROW><id>14901653</id><snippet>order_set</snippet></ROW><ROW><id>14901655</id><snippet>import matplotlib.pyplot as plt
import numpy as np

y, x = np.ogrid[-1:2:100j, -1:1:100j]
plt.contour(x.ravel(), y.ravel(), x**2 + (y-((x**2)**(1.0/3)))**2, [1])
plt.axis('equal')
plt.show()
</snippet></ROW><ROW><id>14901655</id><snippet>fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
y, x = np.ogrid[-1.5:2:1000j, -2:2:1000j]
plt.contour(x.ravel(), y.ravel(), x**2 + (y-((x**2)**(1.0/3)))**2, [1])
ax.set_aspect(0.75) 
plt.show()
</snippet></ROW><ROW><id>14901756</id><snippet>try:
    import cPickle as pickle
except:
    import pickle
import timeit

def lines():
    with open('lotsalines.txt') as f:
         return f.readlines()

def pickles():
    with open('lotsalines.pickle', 'rb') as f:
        return pickle.load(f)

ds = lines()
with open('lotsalines.pickle', 'wb') as f:
    t = timeit.timeit(lambda: pickle.dump(ds, file=f, protocol=-1), number=1)
print('pickle.dump: {}'.format(t))

print('readlines:   {}'.format(timeit.timeit(lines, number=10))
print('pickle.load: {}'.format(timeit.timeit(pickles, number=10))
</snippet></ROW><ROW><id>14901756</id><snippet>readlines:   0.640027999878
pickle.load: 2.67698192596
</snippet></ROW><ROW><id>14901756</id><snippet>readlines:   1.5357899703085423
pickle.load: 1.5975534357130527
</snippet></ROW><ROW><id>14901756</id><snippet>pickle</snippet></ROW><ROW><id>14901756</id><snippet>readlines</snippet></ROW><ROW><id>14901756</id><snippet>readlines</snippet></ROW><ROW><id>14901756</id><snippet>list</snippet></ROW><ROW><id>14901756</id><snippet>list</snippet></ROW><ROW><id>14901756</id><snippet>readlines</snippet></ROW><ROW><id>14901756</id><snippet>list(range(655360))</snippet></ROW><ROW><id>14901756</id><snippet>list(xrange(655360))</snippet></ROW><ROW><id>14901756</id><snippet>list</snippet></ROW><ROW><id>14901782</id><snippet>&lt;brilliant code&gt;
port = 3306
&lt;brilliant code&gt;
</snippet></ROW><ROW><id>14901865</id><snippet>from xml.dom.minidom import parseString, getDOMImplementation

test_xml = '''&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;AppName&gt;
    &lt;out&gt;This is a sample output with &lt;test&gt;default&lt;/test&gt; text &lt;/out&gt;
&lt;/AppName&gt;'''

replacements = {'test':'example'}
dom = parseString(test_xml)
if (len(dom.getElementsByTagName('out'))!=0):
    xmlTag = dom.getElementsByTagName('out')[0]
    children =  xmlTag.childNodes
    text = ""
    for c in children:
        if c.nodeType == c.TEXT_NODE:
            text += c.data
        else:
            if c.nodeName in replacements.keys():
                text += replacements[c.nodeName]
            else: # not text, nor a listed tag
                text += c.toxml()
    print text
</snippet></ROW><ROW><id>14901865</id><snippet>replacements</snippet></ROW><ROW><id>14901865</id><snippet>list</snippet></ROW><ROW><id>14901980</id><snippet>&lt;button onclick="window.location = 'timer2.html?time=' + sec"&gt;Click Here&lt;/button&gt;
</snippet></ROW><ROW><id>14901980</id><snippet>timer2.html?time=252</snippet></ROW><ROW><id>14902195</id><snippet>firefox.WebDriver</snippet></ROW><ROW><id>14902195</id><snippet>remote.WebDriver</snippet></ROW><ROW><id>14902246</id><snippet>In [1]: import networkx as nx

In [2]: from networkx import bipartite

In [3]: G = nx.path_graph(5) # two parts, [0,2,4],[1,3]

In [4]: bipartite.projected_graph(G,[0,2,4]).nodes()
Out[4]: [0, 2, 4] # OK

In [5]: bipartite.projected_graph(G,[0,2,3]).nodes()
Out[5]: [0, 1, 2, 3, 4] # maybe not expected or correct
</snippet></ROW><ROW><id>14902256</id><snippet>$profile</snippet></ROW><ROW><id>14902256</id><snippet>Set-Location C:\Python\MyProject
</snippet></ROW><ROW><id>14902274</id><snippet>import numpy as np
import matplotlib.pyplot as plt

axes_lst = []    
#Prepares the data
x = np.arange(5)
y = np.exp(x)


#plot fig1
fig1 = plt.figure()
ax1 = fig1.add_subplot(111)
axes_lst.append(ax1)

#plot fig2
fig2 = plt.figure()
ax2 = fig2.add_subplot(111)
axes_lst.append(ax2)

for ax in axes_lst:
    ax.plot(x, y)

plt.show()
</snippet></ROW><ROW><id>14902274</id><snippet>figures=[manager.canvas.figure
         for manager in matplotlib._pylab_helpers.Gcf.get_all_fig_managers()]
for figure in figures:
    figure.gca().plot(x,y)
</snippet></ROW><ROW><id>14902350</id><snippet>pygame.draw.polygon()</snippet></ROW><ROW><id>14902350</id><snippet>pygame.draw.polygon(window, (0, 0, 0), ((0, 100), (0, 200), (200, 200), (200, 300), (300, 150), (200, 0), (200, 100)))
</snippet></ROW><ROW><id>14902350</id><snippet>pygame.transform.scale</snippet></ROW><ROW><id>14902492</id><snippet>/home/spatel/cx</snippet></ROW><ROW><id>14902492</id><snippet>[spatel@us04 ~]$ rpm -ivh --root /home/spatel/cx cx_Oracle-5.1-11g-py32-1.i386.rpm --relocate /usr=/home/spatel/cx
Preparing...                ########################################### [100%]
   1:cx_Oracle              ########################################### [100%]
</snippet></ROW><ROW><id>14902492</id><snippet>[spatel@us04 ~]$ ls -l ~/cx/lib/python3.2/site-packages/
total 276
-rw-r--r-- 1 spatel spatel    896 Mar 19  2011 cx_Oracle-5.1-py3.2.egg-info
-rwxr-xr-x 1 spatel spatel 273264 Mar 19  2011 cx_Oracle.cpython-32mu.so
</snippet></ROW><ROW><id>14902492</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append("/home/spatel/cx/lib/python3.2/site-packages")
&gt;&gt;&gt; print (sys.path)
['', '/usr/lib64/python24.zip', '/usr/lib64/python2.4', '/usr/lib64/python2.4/plat-linux2', '/usr/lib64/python2.4/lib-tk', '/usr/lib64/python2.4/lib-dynload', '/usr/lib64/python2.4/site-packages', '/usr/lib64/python2.4/site-packages/gtk-2.0', '/usr/lib/python2.4/site-packages', '/home/spatel/cx/lib/python3.2/site-packages']
</snippet></ROW><ROW><id>14902564</id><snippet>application/json</snippet></ROW><ROW><id>14902564</id><snippet>import json

def dict_raise_on_duplicates(ordered_pairs):
    """Reject duplicate keys."""
    d = {}
    for k, v in ordered_pairs:
        if k in d:
           raise ValueError("duplicate key: %r" % (k,))
        else:
           d[k] = v
    return d

json.loads(raw_post_data, object_pairs_hook=dict_raise_on_duplicates)
# -&gt; ValueError: duplicate key: u'1'
</snippet></ROW><ROW><id>14902625</id><snippet>i</snippet></ROW><ROW><id>14902625</id><snippet>print GInfo[i].DualVariables, "\n", GInfo[i].Components
for j in GInfo[i].Components:
  ...
</snippet></ROW><ROW><id>14902743</id><snippet>zip(input, input[1:])[::2]
</snippet></ROW><ROW><id>14902939</id><snippet>string.ascii_lowercase</snippet></ROW><ROW><id>14902939</id><snippet>dict comprehension</snippet></ROW><ROW><id>14902939</id><snippet>In [4]: from string import ascii_lowercase as al
</snippet></ROW><ROW><id>14902939</id><snippet>In [5]: dic={x:i for i,x in enumerate(al,1)}
</snippet></ROW><ROW><id>14902939</id><snippet>In [7]: dic=dict((y,x) for x,y in enumerate(al,1))
</snippet></ROW><ROW><id>14903003</id><snippet>in</snippet></ROW><ROW><id>14903003</id><snippet>&gt;&gt;&gt; 2 in (2, 3, 4)
True
</snippet></ROW><ROW><id>14903003</id><snippet>in</snippet></ROW><ROW><id>14903003</id><snippet>tuple</snippet></ROW><ROW><id>14903169</id><snippet>something = 3</snippet></ROW><ROW><id>14903169</id><snippet>dict</snippet></ROW><ROW><id>14903169</id><snippet>defaultdict</snippet></ROW><ROW><id>14903169</id><snippet>&gt;&gt;&gt; data= [('a ', 1), ('b ', 3), ('a ', 4), ('b', 2),]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in data:
...     d[k.strip()].append(v)
...     
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'a': [1, 4], 'b': [3, 2]})
</snippet></ROW><ROW><id>14903169</id><snippet>&gt;&gt;&gt; d['a']
[1, 4]
&gt;&gt;&gt; d['b']
[3, 2]
</snippet></ROW><ROW><id>14903330</id><snippet>x</snippet></ROW><ROW><id>14903330</id><snippet>x = L[j]
</snippet></ROW><ROW><id>14903330</id><snippet>==</snippet></ROW><ROW><id>14903330</id><snippet>==</snippet></ROW><ROW><id>14903330</id><snippet>=</snippet></ROW><ROW><id>14903330</id><snippet>if i &lt;= j:
    L[j], L[i] = L[i], L[j]
</snippet></ROW><ROW><id>14903399</id><snippet>def create_app(logger_instance):
    app = Flask(__name__)
    app.config['LOGGER'] = logger_instance
    return app
</snippet></ROW><ROW><id>14903399</id><snippet>from yourapp import create_app
if __name__ == '__main__':
    logger = MyProcess()
    app = create_app(logger)
    app.run()
</snippet></ROW><ROW><id>14903399</id><snippet>app.config['LOGGER']</snippet></ROW><ROW><id>14903432</id><snippet>os.walk</snippet></ROW><ROW><id>14903432</id><snippet># from http://docs.python.org/2/library/os.html
import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print root, "consumes",
    print sum(getsize(join(root, name)) for name in files),
    print "bytes in", len(files), "non-directory files"
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
</snippet></ROW><ROW><id>14903432</id><snippet>import os
from os.path import join, getsize
size = 0
count = 0
for root, dirs, files in os.walk('.'):
    size += sum(getsize(join(root, name)) for name in files)
    count += len(files)
print count, size
</snippet></ROW><ROW><id>14903666</id><snippet>digit2</snippet></ROW><ROW><id>14903666</id><snippet>if</snippet></ROW><ROW><id>14903666</id><snippet>pin</snippet></ROW><ROW><id>14903767</id><snippet>&gt;&gt;&gt; emails = """"John Smith" &lt;jsmith@domain.com&gt;
Tony &lt;tony@domain2.com&gt;
brendang@domain.net"""
&gt;&gt;&gt; lines = emails.splitlines()
&gt;&gt;&gt; from email.utils import parseaddr
&gt;&gt;&gt; [parseaddr(email)[1] for email in lines]
['jsmith@domain.com', 'tony@domain2.com', 'brendang@domain.net']
</snippet></ROW><ROW><id>14903767</id><snippet>for message in mbox:
    print parseaddr(message['from'])
</snippet></ROW><ROW><id>14903767</id><snippet>set</snippet></ROW><ROW><id>14903767</id><snippet>mbox</snippet></ROW><ROW><id>14903767</id><snippet>mbox = mailbox.MailDir('/some/path')
uniq_emails = set(parseaddr(email['from'])[1] for email in mbox)
</snippet></ROW><ROW><id>14903818</id><snippet>x = 10
y = 20

class dump_into_namespace:
    def __init__(self, env, *vars):
        self.vars = dict([(x, env[x]) for v in vars for x in env if v is env[x]])
    def __getattr__(self, name): return self.vars[name]

o = dump_into_namespace(locals(), x, y)
print o.x, o.y
</snippet></ROW><ROW><id>14903818</id><snippet>&gt;&gt;&gt; locals().update(o.vars)
&gt;&gt;&gt; x
10
</snippet></ROW><ROW><id>14903818</id><snippet>self.__dict__</snippet></ROW><ROW><id>14903818</id><snippet>class dump_into_namespace:
    def __init__(self, env, *vs):
        vars(self).update(dict([(x, env[x]) for v in vs for x in env if v is env[x]]))

def f():
    x = 10
    y = 20
    return dump_into_namespace(locals(), x, y)

o = f() 
print o.x, o.y 
globals().update(vars(o))
print x
</snippet></ROW><ROW><id>14903832</id><snippet>a = get_object_or_404(Author.objects, id=id)

s = Author.objects.filter(century__in=a.century.all()).order_by('?')[:3]
</snippet></ROW><ROW><id>14904287</id><snippet>&gt;&gt;&gt; re.findall(r'(\w[\w\s\.]+?)\s*\[([\w\s;\.,]+)\][,;\s$]*', s)
[('Shelley Winters', 'Ruby'),
 ('Millicent Martin', 'Siddie'),
 ('Julia Foster', 'Gilda'),
 ('Jane Asher', 'Annie'),
 ('Shirley Ann Field', 'Carla'),
 ('Vivien Merchant', 'Lily'),
 ('Eleanor Bron', 'Woman Doctor'),
 ('Denholm Elliott', 'Mr. Smith; abortionist'),
 ('Alfie Bass', 'Harry')]
</snippet></ROW><ROW><id>14904287</id><snippet>.*?</snippet></ROW><ROW><id>14904287</id><snippet>re.findall(r'(\w.*?)\s*\[(.*?)\][,;\s$]*', s)
</snippet></ROW><ROW><id>14904522</id><snippet>tb_next</snippet></ROW><ROW><id>14904522</id><snippet>None</snippet></ROW><ROW><id>14904522</id><snippet>except ImportError:
    traceback = sys.exc_info()[2]
    if ( traceback.tb_next ):
        raise
    pass
</snippet></ROW><ROW><id>14904522</id><snippet>tb_next</snippet></ROW><ROW><id>14904522</id><snippet>inspect</snippet></ROW><ROW><id>14904620</id><snippet>celery</snippet></ROW><ROW><id>14904834</id><snippet>int</snippet></ROW><ROW><id>14904834</id><snippet>long</snippet></ROW><ROW><id>14904967</id><snippet>my_image.Band1.Meta</snippet></ROW><ROW><id>14904967</id><snippet>my_image.Meta</snippet></ROW><ROW><id>14904967</id><snippet>my_mage.Meta</snippet></ROW><ROW><id>14904967</id><snippet>id(my_image.Meta)</snippet></ROW><ROW><id>14904967</id><snippet>id(my_image.Band1.Meta)</snippet></ROW><ROW><id>14904967</id><snippet>my_image.Meta is my_image.Band1.Meta</snippet></ROW><ROW><id>14904967</id><snippet>self.Bands = []
self.Bands.append(Band(self.Meta, 1))
self.Bands.append(Band(self.Meta, 2))
self.Bands.append(Band(self.Meta, 3))
</snippet></ROW><ROW><id>14904967</id><snippet>self.Bands = [Band(self.Meta, i) for i in range(3)]
</snippet></ROW><ROW><id>14904967</id><snippet>'R'</snippet></ROW><ROW><id>14904967</id><snippet>'G'</snippet></ROW><ROW><id>14904967</id><snippet>'B'</snippet></ROW><ROW><id>14904967</id><snippet>self.Bands = {name: Band(self.Meta, name) for name in ('R', 'G', 'B')}
</snippet></ROW><ROW><id>14905011</id><snippet>\t</snippet></ROW><ROW><id>14905011</id><snippet>sreader = csv.reader(csvfile, delimiter=' ')
</snippet></ROW><ROW><id>14905011</id><snippet>sreader = csv.reader(csvfile, delimiter='\t')
</snippet></ROW><ROW><id>14905186</id><snippet>&gt;&gt;&gt; re.sub('\[.+?]',',',s)
</snippet></ROW><ROW><id>14905356</id><snippet>--with-pydebug</snippet></ROW><ROW><id>14905356</id><snippet>python-dbg</snippet></ROW><ROW><id>14905356</id><snippet>python-dbg</snippet></ROW><ROW><id>14905356</id><snippet>libpython.py</snippet></ROW><ROW><id>14905356</id><snippet>python-gdb.py</snippet></ROW><ROW><id>14905356</id><snippet>PyEval_EvalFrameEx</snippet></ROW><ROW><id>14905356</id><snippet>~/Downloads/Python-2.6.4$ cat ~/bin/dumpcore.py
class Foo:

    def bar(self):
        from ctypes import string_at
        string_at(0xDEADBEEF) # this code will cause Python to segfault


def main():
    f = Foo()
    f.someattr = 42
    f.someotherattr = {'one':1, 'two':2L, 'three':[(), (None,), (None, None)]}
    f.bar()


if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14905356</id><snippet>~/Downloads/Python-2.6.4$ gdb --args ./python ~/bin/dumpcore.py
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
For bug reporting instructions, please see:
&lt;http://bugs.launchpad.net/gdb-linaro/&gt;...
Reading symbols from /home/john/Downloads/Python-2.6.4/python...done.
(gdb) run
Starting program: /home/john/Downloads/Python-2.6.4/python /home/john/bin/dumpcore.py
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000468d67 in PyString_FromString (str=0xdeadbeef &lt;Address 0xdeadbeef out of bounds&gt;) at Objects/stringobject.c:116
116             size = strlen(str);
(gdb) py-bt
Undefined command: "py-bt".  Try "help".
(gdb) python
&gt;import sys
&gt;sys.path.insert(0, "/home/john/Downloads/Python-2.7/Tools/gdb")
&gt;import libpython
&gt;(gdb) py-bt
#10 Frame 0x8f0f90, for file /home/john/Downloads/Python-2.6.4/Lib/ctypes/__init__.py, line 496, in string_at (ptr=3735928559, size=-1)
    return _string_at(ptr, size)
#14 Frame 0x8ebf90, for file /home/john/bin/dumpcore.py, line 5, in bar (self=&lt;Foo(someattr=42, someotherattr={'three': [(), (None,), (None, None)], 'two': 2L, 'one': 1}) at remote 0x7ffff6e03240&gt;, string_at=&lt;function at remote 0x7ffff6e1c990&gt;)
        string_at(0xDEADBEEF) # this code will cause Python to segfault
#17 Frame 0x8ebd80, for file /home/john/bin/dumpcore.py, line 12, in main (f=&lt;Foo(someattr=42, someotherattr={'three': [(), (None,), (None, None)], 'two': 2L, 'one': 1}) at remote 0x7ffff6e03240&gt;)
    f.bar()
#20 Frame 0x8eb680, for file /home/john/bin/dumpcore.py, line 16, in &lt;module&gt; ()
    main()
(gdb) 
</snippet></ROW><ROW><id>14905485</id><snippet>asmatrix</snippet></ROW><ROW><id>14905485</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(9).reshape((3,3))
&gt;&gt;&gt; b = np.asmatrix(a)
&gt;&gt;&gt; b.base is a
True
&gt;&gt;&gt; a[0] = 3
&gt;&gt;&gt; b
matrix([[3, 3, 3],
        [3, 4, 5],
        [6, 7, 8]])
</snippet></ROW><ROW><id>14905579</id><snippet>title = data.get('title')
label = data.get('label')

parent = filter(None, [title, label])
</snippet></ROW><ROW><id>14905579</id><snippet>list(filter(...))</snippet></ROW><ROW><id>14905579</id><snippet>parent = [i for i in parent if i]</snippet></ROW><ROW><id>14905626</id><snippet>class FooWrapper(object):
    def __init__(self, value):
         self.value = value

# save an object into a list
l = []
obj = FooWrapper(5)
l.append(obj)

# add another object, so the initial object is shifted
l.insert(0, FooWrapper(1))

# change the value of the initial object
obj.value = 3
print l[1].value # prints 3 since it's still the same reference
</snippet></ROW><ROW><id>14905721</id><snippet>range(len(e)-1) + 1
</snippet></ROW><ROW><id>14905721</id><snippet>1</snippet></ROW><ROW><id>14905721</id><snippet>range(...)</snippet></ROW><ROW><id>14905721</id><snippet>for i in range(1, len(e)):
</snippet></ROW><ROW><id>14905823</id><snippet># build rows for each date and add to a list of rows we'll use to insert as a batch 
rows = [] 
numberOfYears = endYear - startYear + 1
for i in range(numberOfYears):
    for j in range(12):
        # make a date for the first day of the month
        dateValue = datetime.date(startYear + i, j + 1, 1)
        index = (i * 12) + j
        row = (stationId, dateValue, temps[index], precips[index])
        rows.append(row)

# insert all of the rows as a batch and commit
ip = '192.1.2.3' 
port = 1521
SID = 'my_sid'
dsn = cx_Oracle.makedsn(ip, port, SID)
connection = cx_Oracle.connect('username', 'password', dsn)
cursor = cx_Oracle.Cursor(connection)
cursor.prepare('insert into ' + database_table_name + ' (id, record_date, temp, precip) values (:1, :2, :3, :4)')
cursor.executemany(None, rows)
connection.commit()
cursor.close()
connection.close()
</snippet></ROW><ROW><id>14906021</id><snippet>&gt;&gt;&gt; s = 'ab'
&gt;&gt;&gt; id(s)
952080
&gt;&gt;&gt; g = 'a' if True else 'c'
&gt;&gt;&gt; g += 'b'
&gt;&gt;&gt; g
'ab'
&gt;&gt;&gt; id(g)
951336
</snippet></ROW><ROW><id>14906021</id><snippet>raw_input</snippet></ROW><ROW><id>14906021</id><snippet>id</snippet></ROW><ROW><id>14906161</id><snippet>class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, primary_key=True)
    hostID = Column(Integer, ForeignKey('hosts.id'))
    name = Column(String)
    host = relationship("Host", backref=backref("tasks", cascade_backrefs=False))

    def __init__(self, host, name):
        self.host = host
        self.name = name
</snippet></ROW><ROW><id>14906204</id><snippet>weights = [.3, .1, .6]
with open ('file2.txt') as f:
    count = int (f.readline ().strip () )
    for i in range (count):
        name = f.readline ().strip ()
        score = sum (w * s for w,s in zip (weights, (int (x) for x in f.readline ().strip ().split () ) ) )
        print ('{}\'s Score is {} %.'.format (name, score) )
</snippet></ROW><ROW><id>14906226</id><snippet>resample</snippet></ROW><ROW><id>14906226</id><snippet>In [35]: ts
Out[35]:
2013-01-01 00:00:00     0
2013-01-01 00:15:00     1
2013-01-01 00:30:00     2
2013-01-01 00:45:00     3
2013-01-01 01:00:00     4
2013-01-01 01:15:00     5
...
2013-01-01 23:00:00    92
2013-01-01 23:15:00    93
2013-01-01 23:30:00    94
2013-01-01 23:45:00    95
2013-01-02 00:00:00    96
Freq: 15T, Length: 97
</snippet></ROW><ROW><id>14906226</id><snippet>mhl = {'m':np.mean, 'h':np.max, 'l':np.min}
</snippet></ROW><ROW><id>14906226</id><snippet>how</snippet></ROW><ROW><id>14906226</id><snippet>resample</snippet></ROW><ROW><id>14906226</id><snippet>In [36]: ts.resample("30Min", how=mhl)
Out[36]:
                      h     m   l
2013-01-01 00:00:00   1   0.5   0
2013-01-01 00:30:00   3   2.5   2
2013-01-01 01:00:00   5   4.5   4
2013-01-01 01:30:00   7   6.5   6
2013-01-01 02:00:00   9   8.5   8
2013-01-01 02:30:00  11  10.5  10
2013-01-01 03:00:00  13  12.5  12
2013-01-01 03:30:00  15  14.5  14
</snippet></ROW><ROW><id>14906346</id><snippet>prettytable</snippet></ROW><ROW><id>14906346</id><snippet>t = PrettyTable(['key', 'value'])
for key, val in dictionary.items():
   t.add_row([key, val])
print t
</snippet></ROW><ROW><id>14906346</id><snippet>textwrap</snippet></ROW><ROW><id>14906346</id><snippet>+------------------------------+--------------------------------------------------------------+
|             key              |                            value                             |
+------------------------------+--------------------------------------------------------------+
|            CFLAGS            |           -fno-strict-aliasing -O2 -g -pipe -Wall            |
|                              |    -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector    |
|                              | --param=ssp-buffer-size=4  -m64 -mtune=generic -D_GNU_SOURCE |
|                              |         -fPIC -fwrapv   -DNDEBUG -O2 -g -pipe -Wall          |
|                              |    -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector    |
|                              | --param=ssp-buffer-size=4  -m64 -mtune=generic -D_GNU_SOURCE |
|                              |                        -fPIC -fwrapv                         |
|             MAIL             |                    /var/spool/mail/damien                    |
|          LS_COLORS           | rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=4 |
|                              | 0;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=3 |
|                              | 0;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;3 |
|                              | 1:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01; |
|                              | 31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:* |
|                              | .dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.tbz |
|                              | =01;31:*.tbz2=01;31:*.bz=01;31:*.tz=01;31:*.deb=01;31:*.rpm= |
|                              | 01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar= |
|                              | 01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=0 |
|                              | 1;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm= |
|                              | 01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm= |
|                              | 01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svg |
|                              | z=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mp |
|                              | eg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m |
|                              | 4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.w |
|                              | mv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.a |
|                              | vi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf |
|                              | =01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv |
|                              | =01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au= |
|                              | 01;36:*.flac=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp |
|                              | 3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.axa |
|                              | =01;36:*.oga=01;36:*.spx=01;36:*.xspf=01;36:*.pdf=00;33:*.ps |
|                              | =00;33:*.ps.gz=00;33:*.txt=00;33:*.patch=00;33:*.diff=00;33: |
|                              | *.log=00;33:*.tex=00;33:*.xls=00;33:*.xlsx=00;33:*.ppt=00;33 |
|                              | :*.pptx=00;33:*.rtf=00;33:*.doc=00;33:*.docx=00;33:*.odt=00; |
|                              | 33:*.ods=00;33:*.odp=00;33:*.xml=00;33:*.epub=00;33:*.abw=00 |
|                              |   ;33:*.htm=00;33:*.html=00;33:*.shtml=00;33:*.wpd=00;33:    |
|       GJS_DEBUG_TOPICS       |                       JS ERROR;JS LOG                        |
+------------------------------+--------------------------------------------------------------+
</snippet></ROW><ROW><id>14906442</id><snippet>indices</snippet></ROW><ROW><id>14906442</id><snippet>u</snippet></ROW><ROW><id>14906442</id><snippet>v</snippet></ROW><ROW><id>14906442</id><snippet>v</snippet></ROW><ROW><id>14906442</id><snippet>u</snippet></ROW><ROW><id>14906442</id><snippet>v</snippet></ROW><ROW><id>14906442</id><snippet>positions</snippet></ROW><ROW><id>14906481</id><snippet>data</snippet></ROW><ROW><id>14906481</id><snippet>form.is_valid()</snippet></ROW><ROW><id>14906481</id><snippet>form.save()</snippet></ROW><ROW><id>14906547</id><snippet>#! /usr/bin/python3.2

import json

class Jsonable:
    def __init__ (self, *args):
        self.fields = args

    def __call__ (self, cls):
        cls._jsonFields = self.fields
        def toDict (self):
            d = {}
            for f in self.__class__._jsonFields:
                v = self.__getattribute__ (f)
                if isinstance (v, list):
                    d [f] = [e.jsonDict if hasattr (e.__class__, '_jsonFields') else e for e in v]
                    continue
                d [f] = v.jsonDict if hasattr (v.__class__, '_jsonFields') else v
            return d
        cls.toDict = toDict

        oGetter = cls.__getattribute__
        def getter (self, key):
            if key == 'jsonDict': return self.toDict ()
            return oGetter (self, key)
        cls.__getattribute__ = getter

        return cls

@Jsonable ('professor', 'students', 'primitiveList')
class Course:
    def __init__ (self, professor, students):
        self.professor = professor
        self.students = students
        self.toBeIgnored = 5
        self.primitiveList = [0, 1, 1, 2, 3, 5]

@Jsonable ('firstname', 'lastname')
class Student:
    def __init__ (self, firstname, lastname, score = 42):
        self.firstname = firstname
        self.lastname = lastname
        self.score = score

@Jsonable ('title', 'name')
class Professor:
    def __init__ (self, name, title):
        self.title = title
        self.name = name

p = Professor ('Ordóñez', 'Dra')
s1 = Student ('Juan', 'Pérez')
s2 = Student ('Juana', 'López')
s3 = Student ('Luis', 'Jerez')
s4 = Student ('Luisa', 'Gómez')
c = Course (p, [s1, s2, s3, s4] )

print (json.dumps (c.jsonDict) )
</snippet></ROW><ROW><id>14906547</id><snippet>list</snippet></ROW><ROW><id>14906547</id><snippet>hasattr (v, __iter__) and not isinstance (v, str)</snippet></ROW><ROW><id>14906645</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14906645</id><snippet>cvexp</snippet></ROW><ROW><id>14906747</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; year_of_birth = 1920
&gt;&gt;&gt; re.sub('(?m)[bB]orn[^,.?!:;]+', '\g&lt;0&gt; in %d' % year_of_birth, content)
'abc abc abc abc.\n\nBorn in England in 1920. abc abc abc.\n\nabc abc abc abc.'
</snippet></ROW><ROW><id>14906747</id><snippet>[^,.?!:;]+</snippet></ROW><ROW><id>14906747</id><snippet>(?m)</snippet></ROW><ROW><id>14907080</id><snippet>addNode</snippet></ROW><ROW><id>14907080</id><snippet>.prev</snippet></ROW><ROW><id>14907080</id><snippet>self.nil</snippet></ROW><ROW><id>14907080</id><snippet>def addNode(self,v):
    a = Node(v)
    a.setNext(self.nil.next)
    if self.nil.next is not None:
        self.nil.next.setPrev(a)
    a.setPrev(self.nil)
    self.nil.next = a
</snippet></ROW><ROW><id>14907080</id><snippet>setPrev</snippet></ROW><ROW><id>14907080</id><snippet>setNext</snippet></ROW><ROW><id>14907080</id><snippet>a == a.next.prev</snippet></ROW><ROW><id>14907080</id><snippet>a == a.prev.next</snippet></ROW><ROW><id>14907080</id><snippet>a</snippet></ROW><ROW><id>14907102</id><snippet>while True:
    # main program
    while True:
        answer = raw_input('Run again? (y/n): ')
        if answer in ('y', 'n'):
            break
        print 'Invalid input.'
    if answer == 'y':
        continue
    else:
        print 'Goodbye'
        break
</snippet></ROW><ROW><id>14907102</id><snippet>'y'</snippet></ROW><ROW><id>14907102</id><snippet>'n'</snippet></ROW><ROW><id>14907102</id><snippet>'y'</snippet></ROW><ROW><id>14907102</id><snippet>continue</snippet></ROW><ROW><id>14907102</id><snippet>'n'</snippet></ROW><ROW><id>14907102</id><snippet>raw_input</snippet></ROW><ROW><id>14907102</id><snippet>str()</snippet></ROW><ROW><id>14907102</id><snippet>raw_input</snippet></ROW><ROW><id>14907802</id><snippet>import os
import subprocess
import re

ports = ['1234','5678','9101']


popen = subprocess.Popen(['netstat', '-lpn'],
                         shell=False,
                         stdout=subprocess.PIPE)
(data, err) = popen.communicate()

pattern = "^tcp.*((?:{0})).* (?P&lt;pid&gt;[0-9]*)/.*$"
pattern = pattern.format(')|(?:'.join(ports))
prog = re.compile(pattern)
for line in data.split('\n'):
    match = re.match(prog, line)
    if match:
        pid = match.group('pid')
        subprocess.Popen(['kill', '-9', pid])
</snippet></ROW><ROW><id>14907802</id><snippet>&lt;pid&gt;</snippet></ROW><ROW><id>14907802</id><snippet>?P</snippet></ROW><ROW><id>14907951</id><snippet>filter</snippet></ROW><ROW><id>14907951</id><snippet>False</snippet></ROW><ROW><id>14907951</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>14907951</id><snippet>(1, (1, 2, 3))</snippet></ROW><ROW><id>14907951</id><snippet>True</snippet></ROW><ROW><id>14907951</id><snippet>map</snippet></ROW><ROW><id>14907951</id><snippet>A1 = map(lambda (a,b): b, A)
A2 = map(lambda ab: ab, A)
</snippet></ROW><ROW><id>14907951</id><snippet>False</snippet></ROW><ROW><id>14907951</id><snippet>True</snippet></ROW><ROW><id>14907951</id><snippet>0
None
False
''
[]
()
# and all other empty containers
</snippet></ROW><ROW><id>14908516</id><snippet>import pandas as pd
import numpy as np

index = pd.date_range('1/1/2000', periods=60, freq='2h')
ts = pd.Series(np.random.randn(60), index = index)

key = lambda x: x.time()
groups = ts.groupby(key)

print pd.DataFrame({k:g for k,g in groups}).resample('D').T
</snippet></ROW><ROW><id>14908516</id><snippet>          2000-01-01  2000-01-02  2000-01-03  2000-01-04  2000-01-05  2000-01-06  \
00:00:00    0.109959   -0.124291   -0.137365    0.054729   -1.305821   -1.928468   
03:00:00    1.336467    0.874296    0.153490   -2.410259    0.906950    1.860385   
06:00:00   -1.172638   -0.410272   -0.800962    0.568965   -0.270307   -2.046119   
09:00:00   -0.707423    1.614732    0.779645   -0.571251    0.839890    0.435928   
12:00:00    0.865577   -0.076702   -0.966020    0.589074    0.326276   -2.265566   
15:00:00    1.845865   -1.421269   -0.141785    0.433011   -0.063286    0.129706   
18:00:00   -0.054569    0.277901    0.383375   -0.546495   -0.644141   -0.207479   
21:00:00    1.056536    0.031187   -1.667686   -0.270580   -0.678205    0.750386   

          2000-01-07  2000-01-08  
00:00:00   -0.657398   -0.630487  
03:00:00    2.205280   -0.371830  
06:00:00   -0.073235    0.208831  
09:00:00    1.720097   -0.312353  
12:00:00   -0.774391         NaN  
15:00:00    0.607250         NaN  
18:00:00    1.379823         NaN  
21:00:00    0.959811         NaN
</snippet></ROW><ROW><id>14908626</id><snippet>fscanf</snippet></ROW><ROW><id>14908626</id><snippet>Scanner</snippet></ROW><ROW><id>14908626</id><snippet>scanf</snippet></ROW><ROW><id>14908626</id><snippet>import re


FORMATS_TYPES = {
    'd': int,
    'f': float,
    's': str,
}


FORMATS_REGEXES = {    
    'd': re.compile(r'(?:\s|\b)*([+-]?\d+)(?:\s|\b)*'),
    'f': re.compile(r'(?:\s|\b)*([+-]?\d+\.?\d*)(?:\s|\b)*'),
    's': re.compile(r'\b(\w+)\b'),
}


FORMAT_FIELD_REGEX = re.compile(r'%(s|d|f)')


def scan_input(format_string, stream, max_size=float('+inf'), chunk_size=1024):
    """Scan an input stream and retrieve formatted input."""

    chunk = ''
    format_fields = format_string.split()[::-1]
    while format_fields:
        fields = FORMAT_FIELD_REGEX.findall(format_fields.pop())
        if not chunk:
            chunk = _get_chunk(stream, chunk_size)

        for field in fields:
            field_regex = FORMATS_REGEXES[field]
            match = field_regex.search(chunk)
            length_before = len(chunk)
            while match is None or match.end() &gt;= len(chunk):
                chunk += _get_chunk(stream, chunk_size)
                if not chunk or length_before == len(chunk):
                    if match is None:
                        raise ValueError('Missing fields.')
                    break
            text = match.group(1)
            yield FORMATS_TYPES[field](text)
            chunk = chunk[match.end():]



def _get_chunk(stream, chunk_size):
    try:
        return stream.read(chunk_size)
    except EOFError:
        return ''
</snippet></ROW><ROW><id>14908626</id><snippet>&gt;&gt;&gt; s = StringIO('1234 Hello World -13.48 -678 12.45')
&gt;&gt;&gt; for data in scan_input('%d %s %s %f %d %f', s): print repr(data)
...                                                                                            
1234                                                                                           
'Hello'
'World'
-13.48
-678
12.45
</snippet></ROW><ROW><id>14908972</id><snippet>__init__</snippet></ROW><ROW><id>14908972</id><snippet>RequestHandler</snippet></ROW><ROW><id>14908972</id><snippet>application, request, **kwargs</snippet></ROW><ROW><id>14908972</id><snippet>def __init__(self, application, request, **kwargs):
    self.title = "Welcome!"
    super(IndexHandler, self).__init__(application, request, **kwargs)
</snippet></ROW><ROW><id>14908972</id><snippet>IndexHandler</snippet></ROW><ROW><id>14908972</id><snippet>initialize</snippet></ROW><ROW><id>14908972</id><snippet>def initialize(self):
    self.title = "Welcome!"
</snippet></ROW><ROW><id>14909024</id><snippet>In [9]: K = 5

In [10]: fitness_landscape = np.random.uniform (0, 1, size = (N,) + (2,) * K)

In [11]: fitness_landscape.shape
Out[11]: (3, 2, 2, 2, 2, 2)
</snippet></ROW><ROW><id>14909069</id><snippet>import sys, re

regex = sys.argv[1]

someOtherString = 'hi there'

found = re.search(regex, someOtherString)
print('ok' if found else 'nope')
</snippet></ROW><ROW><id>14909069</id><snippet>&gt; python test.py hi.th
ok
&gt; python test.py blah
nope
</snippet></ROW><ROW><id>14909069</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>14909069</id><snippet>re.search</snippet></ROW><ROW><id>14909242</id><snippet>import sys
sorted(a.items(), key = lambda (k, v): b.index(k) if k in b else sys.maxint)
</snippet></ROW><ROW><id>14909242</id><snippet>b</snippet></ROW><ROW><id>14909281</id><snippet>files</snippet></ROW><ROW><id>14909281</id><snippet>os.path.join</snippet></ROW><ROW><id>14909281</id><snippet>def sanBrds(args, dirname, files):
    print "checking ", dirname
    for file in files:
        fullpath = os.path.join(dirname, file)
        if fullpath.endswith(".brd"):
            print "found ", file
            newfile = splitext(basename(fullpath))[0] + "_pyclean.brd"
            tree = etree.parse(fullpath)
            # ...
</snippet></ROW><ROW><id>14909284</id><snippet>created = datetime.strptime((r.json()[x]["created_at"]).strip('"'), "%a %b %d %H:%M:%S +0000 %Y") 
</snippet></ROW><ROW><id>14909284</id><snippet>strip('"')</snippet></ROW><ROW><id>14909284</id><snippet>"</snippet></ROW><ROW><id>14909391</id><snippet>xmlprclib</snippet></ROW><ROW><id>14909391</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>14909391</id><snippet>xmlrpc.client</snippet></ROW><ROW><id>14909391</id><snippet>xmlrpc.server</snippet></ROW><ROW><id>14909627</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>14909627</id><snippet>STORE_FAST</snippet></ROW><ROW><id>14909627</id><snippet>global</snippet></ROW><ROW><id>14909627</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>14909627</id><snippet>STORE_GLOBAL</snippet></ROW><ROW><id>14909627</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>14909627</id><snippet>global x</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>&gt;&gt;&gt; dis.dis(changeXto1)
  3           0 LOAD_CONST               1 (1)
              3 STORE_GLOBAL             0 (x)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE        
</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>globals()</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>&gt;&gt;&gt; dis.dis(changeXto3)
  2           0 LOAD_CONST               1 (-1)
              3 LOAD_CONST               0 (None)
              6 IMPORT_NAME              0 (__main__)
              9 STORE_FAST               0 (__main__)

  3          12 LOAD_CONST               2 (3)
             15 LOAD_FAST                0 (__main__)
             18 STORE_ATTR               1 (x)
             21 LOAD_CONST               0 (None)
             24 RETURN_VALUE        
</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>from __main__ import x</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>from ${module} import ${name}</snippet></ROW><ROW><id>14909627</id><snippet>x</snippet></ROW><ROW><id>14909627</id><snippet>__main__</snippet></ROW><ROW><id>14909627</id><snippet>&gt;&gt;&gt; dis.dis(f2)
  2           0 LOAD_CONST               1 (-1)
              3 LOAD_CONST               2 (('x',))
              6 IMPORT_NAME              0 (__main__)
              9 IMPORT_FROM              1 (x)
             12 STORE_FAST               0 (x)
             15 POP_TOP             

  3          16 LOAD_CONST               3 (2)
             19 STORE_FAST               0 (x)
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE        
</snippet></ROW><ROW><id>14909627</id><snippet>obj.field</snippet></ROW><ROW><id>14909627</id><snippet>obj</snippet></ROW><ROW><id>14909627</id><snippet>obj.__dict__</snippet></ROW><ROW><id>14909627</id><snippet>"field"</snippet></ROW><ROW><id>14909627</id><snippet>locals()</snippet></ROW><ROW><id>14909627</id><snippet>globals()</snippet></ROW><ROW><id>14909627</id><snippet>locals()</snippet></ROW><ROW><id>14909627</id><snippet>global ${name}</snippet></ROW><ROW><id>14909627</id><snippet># NOTE: this is valid Python code, but is less optimal than
# the original code. It is here only for demonstration.

def changeXto1():
    globals()['x'] = 1

def changeXto2():
    locals()['x'] = __import__('__main__').__dict__['x']
    locals()['x'] = 2

def changeXto3():
    locals()['__main__'] = __import__('__main__')
    locals()['__main__'].__dict__['x'] = 3
</snippet></ROW><ROW><id>14909654</id><snippet>numpy.diag</snippet></ROW><ROW><id>14909654</id><snippet>*</snippet></ROW><ROW><id>14909654</id><snippet>numpy.dot</snippet></ROW><ROW><id>14909654</id><snippet>In [16]: import numpy as np

In [17]: A = np.arange(15).reshape(5,3)

In [18]: A
Out[18]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])


In [19]: u, s, v = np.linalg.svd(A)

In [20]: S = np.diag(s)

In [21]: S = np.vstack([S, np.zeros((2,3)) ])

In [22]: #fill in zeros to get the right shape

In [23]: np.allclose(A, np.dot(u, np.dot(S,v)))
Out[23]: True
</snippet></ROW><ROW><id>14909654</id><snippet>numpy.allclose</snippet></ROW><ROW><id>14909803</id><snippet>1</snippet></ROW><ROW><id>14909803</id><snippet>match.group(1)</snippet></ROW><ROW><id>14909803</id><snippet>re.MatchObject.group()</snippet></ROW><ROW><id>14909803</id><snippet>&gt;&gt;&gt; m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
&gt;&gt;&gt; m.group(0)       # The entire match
'Isaac Newton'
&gt;&gt;&gt; m.group(1)       # The first parenthesized subgroup.
'Isaac'
&gt;&gt;&gt; m.group(2)       # The second parenthesized subgroup.
'Newton'
&gt;&gt;&gt; m.group(1, 2)    # Multiple arguments give us a tuple.
('Isaac', 'Newton')
</snippet></ROW><ROW><id>14909859</id><snippet>np.array([1, 2, 4, 7, 5, 2])
</snippet></ROW><ROW><id>14910097</id><snippet>ConfigParser</snippet></ROW><ROW><id>14910097</id><snippet>configparser</snippet></ROW><ROW><id>14910439</id><snippet>db.aetitles.hospital_id.requires = [IS_NOT_EMPTY(),
                                IS_IN_DB(db, db.hospitals.id, '%(title)s')]
</snippet></ROW><ROW><id>14910495</id><snippet>.hide()</snippet></ROW><ROW><id>14910495</id><snippet>.setVisible(False)</snippet></ROW><ROW><id>14910495</id><snippet>self.ui.tblContents.horizontalHeader().hide()
# or
# self.ui.tblContents.horizontalHeader().setVisible(False)

self.ui.tblContents.verticalHeader().hide()
# or
# self.ui.tblContents.verticalHeader().setVisible(False)
</snippet></ROW><ROW><id>14911270</id><snippet>stars</snippet></ROW><ROW><id>14911270</id><snippet>while stars &lt; 50:
   print "That's no good, pick again"
   critic, aud, stars = getScore()
</snippet></ROW><ROW><id>14911475</id><snippet>program_time</snippet></ROW><ROW><id>14911475</id><snippet>time.time()</snippet></ROW><ROW><id>14911475</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time()
1361025728.405679
&gt;&gt;&gt; a = time.time()
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b
1361025731.55744
&gt;&gt;&gt; a
1361025731.55744
&gt;&gt;&gt; b - a
0.0
&gt;&gt;&gt; time.time() - b
17.488538026809692
</snippet></ROW><ROW><id>14911475</id><snippet>time.time()</snippet></ROW><ROW><id>14911475</id><snippet>start = time.time()
while True:
    now = time.time()
    elapsed = now - start
    print elapsed
</snippet></ROW><ROW><id>14911527</id><snippet>Element.string</snippet></ROW><ROW><id>14911527</id><snippet>Element.stripped_strings</snippet></ROW><ROW><id>14911527</id><snippet>print ''.join(x.stripped_strings)
</snippet></ROW><ROW><id>14911527</id><snippet>print ''.join([unicode(t).strip() for t in x.findAll(text=True)])
</snippet></ROW><ROW><id>14911527</id><snippet>&lt;th&gt;</snippet></ROW><ROW><id>14911527</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>14911527</id><snippet>&lt;th&gt;</snippet></ROW><ROW><id>14911527</id><snippet>.findNextSibling()</snippet></ROW><ROW><id>14911527</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>14911527</id><snippet>.findAll(text=True)</snippet></ROW><ROW><id>14911527</id><snippet>info = {}
rows = table.findAll("th")
for headercell in rows:
    valuecell = headercell.findNextSibling('td')
    if valuecell is None:
        continue
    header = ''.join([unicode(t).strip() for t in headercell.findAll(text=True)])
    value = ''.join([unicode(t).strip() for t in valuecell.findAll(text=True)])
    info[header] = value
</snippet></ROW><ROW><id>14911613</id><snippet>defaultextension</snippet></ROW><ROW><id>14911613</id><snippet>tkF.askopenfilename(initialdir='D:\\',
filetypes=myFormat,
title="Open a .mydoc",
defaultextension=".mydoc")
</snippet></ROW><ROW><id>14911711</id><snippet>&gt;&gt;&gt; d = dict(zip(list1, list2))
{'blue': 2, 'green': 3, 'red': 1}
</snippet></ROW><ROW><id>14911753</id><snippet>getpass</snippet></ROW><ROW><id>14911753</id><snippet>import getpass

password = getpass.getpass('Password: ')
</snippet></ROW><ROW><id>14911903</id><snippet>self.parent_field</snippet></ROW><ROW><id>14911903</id><snippet>self._meta</snippet></ROW><ROW><id>14911903</id><snippet>class Mata</snippet></ROW><ROW><id>14911903</id><snippet>self._meta.fields</snippet></ROW><ROW><id>14911903</id><snippet>django.models.Field</snippet></ROW><ROW><id>14911939</id><snippet>subplots</snippet></ROW><ROW><id>14911939</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, axes = plt.subplots(nrows=2, ncols=2, sharey=True, sharex=True)
for i, ax in enumerate(axes.flat, start=1):
    ax.set(aspect=1)
    ax.plot(np.arange(0, i * 4, i))

plt.show()
</snippet></ROW><ROW><id>14911939</id><snippet>adjustable='box'</snippet></ROW><ROW><id>14911939</id><snippet>adjustable='box-forced'</snippet></ROW><ROW><id>14911939</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, axes = plt.subplots(nrows=2, ncols=2, sharey=True, sharex=True)
for i, ax in enumerate(axes.flat, start=1):
    ax.set(aspect=1, adjustable='box-forced', xticks=range(i))
    ax.plot(np.arange(0, i * 4, i))

plt.show()
</snippet></ROW><ROW><id>14911939</id><snippet>import matplotlib.pyplot as plt 
import numpy as np 

fig, axes = plt.subplots(nrows=2, ncols=2)
for i, ax in enumerate(axes.flat, start=1):
    ax.set(adjustable='datalim', aspect=1)
    ax.plot(np.arange(0, i * 4, i))

plt.show()
</snippet></ROW><ROW><id>14911939</id><snippet>import matplotlib.pyplot as plt 
import numpy as np 

# The key here is the figsize (it needs to be square). The position and size of
# axes in matplotlib are defined relative to the size of the figure.
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(8,8))

for i, ax in enumerate(axes.flat, start=1):
    ax.plot(np.arange(0, i * 4, i))

# By default, subplots leave a bit of room for tick labels on the left.
# We'll remove it so that the axes are perfectly square.
fig.subplots_adjust(left=0.1)

plt.show()
</snippet></ROW><ROW><id>14912114</id><snippet>numpy</snippet></ROW><ROW><id>14912114</id><snippet>import sys
import cv2
import numpy

outbasename = 'hexagon_%02d.png'

img = cv2.imread(sys.argv[1])
template = cv2.cvtColor(cv2.imread(sys.argv[2]), cv2.COLOR_BGR2GRAY)
theight, twidth = template.shape[:2]

# Binarize the input based on the saturation and value.
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
saturation = hsv[:,:,1]
value = hsv[:,:,2]
value[saturation &gt; 35] = 255
value = cv2.threshold(value, 0, 255, cv2.THRESH_OTSU)[1]
# Pad the image.
value = cv2.copyMakeBorder(255 - value, 3, 3, 3, 3, cv2.BORDER_CONSTANT, value=0)

# Discard small components.
img_clean = numpy.zeros(value.shape, dtype=numpy.uint8)
contours, _ = cv2.findContours(value, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
for i, c in enumerate(contours):
    area = cv2.contourArea(c)
    if area &gt; 500:
        cv2.drawContours(img_clean, contours, i, 255, 2)


def closest_pt(a, pt):
    if not len(a):
        return (float('inf'), float('inf'))
    d = a - pt
    return a[numpy.argmin((d * d).sum(1))]

match = cv2.matchTemplate(img_clean, template, cv2.TM_CCORR_NORMED)

# Filter matches.
threshold = 0.8
dist_threshold = twidth / 1.5
loc = numpy.where(match &gt; threshold)
ptlist = numpy.zeros((len(loc[0]), 2), dtype=int)
count = 0
print "%d matches" % len(loc[0])
for pt in zip(*loc[::-1]):
    cpt = closest_pt(ptlist[:count], pt)
    dist = ((cpt[0] - pt[0]) ** 2 + (cpt[1] - pt[1]) ** 2) ** 0.5
    if dist &gt; dist_threshold:
        ptlist[count] = pt
        count += 1

# Adjust points (could do for the x coords too).
ptlist = ptlist[:count]
view = ptlist.ravel().view([('x', int), ('y', int)])
view.sort(order=['y', 'x'])
for i in xrange(1, ptlist.shape[0]):
    prev, curr = ptlist[i - 1], ptlist[i]
    if abs(curr[1] - prev[1]) &lt; 5:
        y = min(curr[1], prev[1])
        curr[1], prev[1] = y, y

# Crop in raster order.
view.sort(order=['y', 'x'])
for i, pt in enumerate(ptlist, start=1):
    cv2.imwrite(outbasename % i,
            img[pt[1]-2:pt[1]+theight-2, pt[0]-2:pt[0]+twidth-2])
    print 'Wrote %s' % (outbasename % i)
</snippet></ROW><ROW><id>14912114</id><snippet>img_clean</snippet></ROW><ROW><id>14912114</id><snippet>img</snippet></ROW><ROW><id>14912140</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>14912140</id><snippet>import subprocess

output = subprocess.check_output(['sudo', 'dpkg', '-l'])
</snippet></ROW><ROW><id>14912140</id><snippet>os.system()</snippet></ROW><ROW><id>14912140</id><snippet>sudo</snippet></ROW><ROW><id>14912234</id><snippet>cbar</snippet></ROW><ROW><id>14912234</id><snippet>cbar.ax</snippet></ROW><ROW><id>14912234</id><snippet>ax.set_aspect(number)</snippet></ROW><ROW><id>14912234</id><snippet>ax.set_aspect('auto')</snippet></ROW><ROW><id>14912234</id><snippet>ax.set_position((left, bottom, width, height))
</snippet></ROW><ROW><id>14912234</id><snippet>0</snippet></ROW><ROW><id>14912234</id><snippet>1</snippet></ROW><ROW><id>14912234</id><snippet>0,0</snippet></ROW><ROW><id>14912234</id><snippet>set_position((0.1, 0.2, 0.4, 0.6))</snippet></ROW><ROW><id>14912234</id><snippet>(0.1, 0.2)</snippet></ROW><ROW><id>14912234</id><snippet>(0.1 + 0.4, 0.2 + 0.6)</snippet></ROW><ROW><id>14912313</id><snippet>resp</snippet></ROW><ROW><id>14912313</id><snippet>;</snippet></ROW><ROW><id>14912313</id><snippet>out = resp.split(';')
</snippet></ROW><ROW><id>14912313</id><snippet>out</snippet></ROW><ROW><id>14912313</id><snippet>print 'Country: {}'.format(out[3])
</snippet></ROW><ROW><id>14912313</id><snippet>format=json</snippet></ROW><ROW><id>14912313</id><snippet>import json

resp = urllib2.urlopen('http://api.ipinfodb.com/v3/ip-city/?format=json&amp;key=mykey&amp;ip=someip')
data = json.load(resp)

print data['countryName']
</snippet></ROW><ROW><id>14912644</id><snippet>root = Tk() #Sets root
root.title("My Text Editor") #This is the tile at the top of the window

#make my screen dimensions work
w = 1000 #The value of the width
h = 750 #The value of the height of the window

# get screen width and height
ws = root.winfo_screenwidth()#This value is the width of the screen
hs = root.winfo_screenheight()#This is the height of the screen

# calculate position x, y
x = (ws/2) - (w/2)
y = (hs/2) - (h/2)

#This is responsible for setting the dimensions of the screen and where it is
#placed
root.geometry('%dx%d+%d+%d' % (w, h, x, y))

app = Application(root) #used in OOP (My class was called Application)
root.mainloop() #Starts the script
</snippet></ROW><ROW><id>14912657</id><snippet>temp</snippet></ROW><ROW><id>14912691</id><snippet>AddHandler python-program .py
PythonHandler mod_python.publisher
</snippet></ROW><ROW><id>14912691</id><snippet>def index(req):
    # Your handler here
</snippet></ROW><ROW><id>14912691</id><snippet>def say(req, what="NOTHING"):
    return "I am saying %s" % what
</snippet></ROW><ROW><id>14912700</id><snippet>import math

#set speed to how fast you want your guy to move
speed = 1
dx = myX - targetX
dy = myY - targetY

dz = math.sqrt(dx**2 + dy**2)

speedx = dx/dz * speed
speedy = dy/dz * speed
</snippet></ROW><ROW><id>14912803</id><snippet>$'...'</snippet></ROW><ROW><id>14912803</id><snippet>   Words of the form $'string' are treated specially.  The word expands to
   string, with backslash-escaped characters replaced as specified by  the
   ANSI  C  standard.  Backslash escape sequences, if present, are decoded
   as follows:
          \a     alert (bell)
          \b     backspace
          \e     an escape character
          \f     form feed
          \n     new line
          \r     carriage return
          \t     horizontal tab
          \v     vertical tab
          \\     backslash
          \'     single quote
          \nnn   the eight-bit character whose value is  the  octal  value
                 nnn (one to three digits)
          \xHH   the  eight-bit  character  whose value is the hexadecimal
                 value HH (one or two hex digits)
          \cx    a control-x character

   The expanded result is single-quoted, as if the  dollar  sign  had  not
   been present.
</snippet></ROW><ROW><id>14912803</id><snippet>$ python parse_input.py $'1\n2\n'
</snippet></ROW><ROW><id>14912975</id><snippet>cbar.ax.set_picker(tolerance)</snippet></ROW><ROW><id>14912975</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = np.random.random((10,10))

fig, ax = plt.subplots()
im = ax.imshow(data)
cbar = fig.colorbar(im)
ax.set_title('Click on the colorbar')

highlight = ax.imshow(np.ma.masked_all_like(data), interpolation='nearest', 
                      vmin=data.min(), vmax=data.max())

def on_pick(event):
    val = event.mouseevent.ydata
    selection = np.ma.masked_outside(data, val - 0.05, val + 0.05)
    highlight.set_data(selection)
    fig.canvas.draw()

cbar.ax.set_picker(5)
fig.canvas.mpl_connect('pick_event', on_pick)

plt.show()
</snippet></ROW><ROW><id>14913015</id><snippet>Frame</snippet></ROW><ROW><id>14913015</id><snippet>Application</snippet></ROW><ROW><id>14913015</id><snippet>#Import Tkinter
from Tkinter import *

#Main Frame
class Application(Frame):
    def __init__(self, master):  #initialize the grid and widgets
        Frame.__init__(self,master)
        self.grid()
        self.redFUN() #initialize the red frame's Function
        self.greenFUN() #initialize the green frame's Function
        self.widgets() #To show that you can still place non-Frame widgets 
    def widgets(self):
        self.mylabel = Label (self, text = "Hello World!")
        self.mylabel.grid()
    def redFUN(self): #The 'self' means that it is an instance of the main frame
        #Init the red frame
        self.redFrame = Frame(root, width = 100, height = 50,pady = 5,
                              bg = "red")
        self.redFrame.grid()



    def greenFUN(self): #Child of the mainframe
        self.greenFrame = Frame(root, width = 100, height = 50,pady = 5,
                          bg = "green") #it is green!
        self.greenFrame.grid()








#These lines of code are used for the grid
root = Tk()
root.title("Frame Example")
root.geometry("300x300")
app = Application(root)

root.mainloop()
</snippet></ROW><ROW><id>14913021</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.array([1,3,70,924,3])

plt.bar(np.arange(data.size), data)
plt.ylim([0, 300])

plt.show()
</snippet></ROW><ROW><id>14913021</id><snippet>clip_on=False</snippet></ROW><ROW><id>14913021</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.array([1,3,70,924,3])

plt.bar(np.arange(data.size), data, clip_on=False)
plt.ylim([0, 300])

plt.show()
</snippet></ROW><ROW><id>14913189</id><snippet>raw_input</snippet></ROW><ROW><id>14913189</id><snippet>%</snippet></ROW><ROW><id>14913189</id><snippet>x = raw_input("Write a number")
if x.isalpha():
    print "Invalid!"
x = int(x)
</snippet></ROW><ROW><id>14913189</id><snippet>x.isalpha()</snippet></ROW><ROW><id>14913189</id><snippet>try:
    x = int(raw_input("Write a number"))
except ValueError:
    print 'Invalid!'
else:
    if x % 2 == 0:
        print "The number you have written is EVEN"
    else:
        print "The number you have written is ODD"
</snippet></ROW><ROW><id>14913189</id><snippet>int()</snippet></ROW><ROW><id>14913189</id><snippet>ValueError</snippet></ROW><ROW><id>14913250</id><snippet>From External</snippet></ROW><ROW><id>14913458</id><snippet>init</snippet></ROW><ROW><id>14913458</id><snippet>append</snippet></ROW><ROW><id>14913458</id><snippet>row.append(list(init))
</snippet></ROW><ROW><id>14913566</id><snippet>class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    expiry_date = models.DateTimeField()

    def colored_name(self):
        if datetime.datetime.now() &gt;= self.expiry_date:
            return '&lt;span style="color: red;"&gt;%s %s&lt;/span&gt;' % (self.first_name, self.last_name)
    colored_name.allow_tags = True

class PersonAdmin(admin.ModelAdmin):
    list_display = ('colored_name', 'first_name', 'last_name')
</snippet></ROW><ROW><id>14913566</id><snippet># -*- coding: utf-8 -*-

from django.core import management
from django.core.mail import mail_admins


class Command(BaseCommand):

    def inner_run(self, *args, **options):
        expired_items = Model.objects.filter(expiry_date__lte=datetime.datetime.now())
        message = some_message_formatter(expired_items)

        mail_admins(subject='Alerts on my Project!', message=message)
</snippet></ROW><ROW><id>14913566</id><snippet>8 3 */15 * * cd /path/to/project &amp;&amp; echo 'Activate virtual env if needed' &amp;&amp; PYTHONPATH='Additional_python_path' DJANGO_SETTINGS_MODULE=your_project.settings django-admin.py check_expired
</snippet></ROW><ROW><id>14913736</id><snippet>None</snippet></ROW><ROW><id>14913736</id><snippet>None</snippet></ROW><ROW><id>14913736</id><snippet>def square(x):
    '''
    x: int or float.
    '''
    return x * x
</snippet></ROW><ROW><id>14914248</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-v', '--verbosity', help='more debug info', action='store_true')
_StoreTrueAction(option_strings=['-v', '--verbosity'], dest='verbosity', nargs=0, const=True, default=False, type=None, choices=None, help='more debug info', metavar=None)
&gt;&gt;&gt; parser._option_string_actions.keys()
['-v', '-h', '--verbosity', '--help']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14914635</id><snippet>sum()</snippet></ROW><ROW><id>14914635</id><snippet>def differences(a, b):
    if len(a) != len(b):
        raise ValueError("Lists of different length.")
    return sum(i != j for i, j in zip(a, b))
</snippet></ROW><ROW><id>14914635</id><snippet>zip()</snippet></ROW><ROW><id>14914635</id><snippet>True == 1</snippet></ROW><ROW><id>14914635</id><snippet>False == 0</snippet></ROW><ROW><id>14914635</id><snippet>sum(1 for i, j in zip(a, b) if i != j)
</snippet></ROW><ROW><id>14914720</id><snippet>&gt;&gt;&gt; [s[:-1]+f for (f,s) in zip(first_array, second_array)]
['523', '64', '395', '102', '90', '10', '41', '7']
</snippet></ROW><ROW><id>14914816</id><snippet>@</snippet></ROW><ROW><id>14914816</id><snippet>?</snippet></ROW><ROW><id>14914816</id><snippet>+</snippet></ROW><ROW><id>14914816</id><snippet>@</snippet></ROW><ROW><id>14914816</id><snippet>r"!.+?@"
</snippet></ROW><ROW><id>14914816</id><snippet>negated</snippet></ROW><ROW><id>14914816</id><snippet>@</snippet></ROW><ROW><id>14914816</id><snippet>r"![^@]+"
</snippet></ROW><ROW><id>14915053</id><snippet>&gt;&gt;&gt; l = [[0.1, 0.2], [1.1, 1.2]]
&gt;&gt;&gt; [[(0, val) for val in elem] for elem in l]
[[(0, 0.1), (0, 0.2)], [(0, 1.1), (0, 1.2)]]
</snippet></ROW><ROW><id>14915231</id><snippet>if char == 'a' or 'e' or 'i' or 'o' or 'u' or 'A' or 'E' or 'I' or 'O' or 'U':
        return True
</snippet></ROW><ROW><id>14915231</id><snippet>if (char == 'a') or 'e' or 'i' or 'o' or 'u' or 'A' or 'E' or 'I' or 'O' or 'U':
</snippet></ROW><ROW><id>14915231</id><snippet>True</snippet></ROW><ROW><id>14915231</id><snippet>e</snippet></ROW><ROW><id>14915231</id><snippet>True</snippet></ROW><ROW><id>14915231</id><snippet>True</snippet></ROW><ROW><id>14915231</id><snippet>if char == 'a' or char == 'e' or char == 'i' so on...:
        return True
</snippet></ROW><ROW><id>14915231</id><snippet>in</snippet></ROW><ROW><id>14915231</id><snippet>def isVowel(char):
    return char.lower() in 'aeiou'
</snippet></ROW><ROW><id>14915350</id><snippet>__init__</snippet></ROW><ROW><id>14915350</id><snippet>abrs</snippet></ROW><ROW><id>14915350</id><snippet>def __init__(self,start=None, finals=None, edges=None):</snippet></ROW><ROW><id>14915350</id><snippet>abrs=None</snippet></ROW><ROW><id>14915350</id><snippet>abrs</snippet></ROW><ROW><id>14915671</id><snippet>dict</snippet></ROW><ROW><id>14915671</id><snippet>defaultdict</snippet></ROW><ROW><id>14915671</id><snippet>key</snippet></ROW><ROW><id>14915671</id><snippet>dict</snippet></ROW><ROW><id>14915671</id><snippet>tup[0]</snippet></ROW><ROW><id>14915671</id><snippet>&gt;&gt;&gt; t = (('apple', 'banana'), ('apple', 'carrot'), ('banana', 'carrot'))
&gt;&gt;&gt;
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; 
&gt;&gt;&gt; temp_dict = defaultdict(tuple)
&gt;&gt;&gt; 
&gt;&gt;&gt; for tup in t:
        temp_dict[tup[0]] += tup[1:]  


&gt;&gt;&gt; temp_dict
defaultdict(&lt;type 'tuple'&gt;, {'apple': ('banana', 'carrot'), 'banana': ('carrot',)})

&gt;&gt;&gt; {key:value for key, value in temp_dict.items()}
{'apple': ('banana', 'carrot'), 'banana': ('carrot',)}
</snippet></ROW><ROW><id>14915874</id><snippet>check_ouput</snippet></ROW><ROW><id>14915874</id><snippet>&gt;&gt;&gt; subprocess.check_output(["echo", "Hello World!"])
'Hello World!\n'
</snippet></ROW><ROW><id>14915997</id><snippet>import itertools
for tup in itertools.product(range(0x100), repeat=3):
    ...
</snippet></ROW><ROW><id>14916087</id><snippet>var a = JSON.parse(String(m.data));
</snippet></ROW><ROW><id>14916104</id><snippet>import argparse
class Once(argparse.Action):
    def __call__(self, parser, namespace, values, option_string = None):
        # print '{n} {v} {o}'.format(n = namespace, v = values, o = option_string)
        if getattr(namespace, self.dest) is not None:
            msg = '{o} can only be specified once'.format(o = option_string)
            raise argparse.ArgumentError(None, msg)
        setattr(namespace, self.dest, values)

cmd_parser = argparse.ArgumentParser()
cmd_parser.add_argument('-o', dest='outfile', action=Once)
cmd_line = cmd_parser.parse_args()
print(cmd_line.outfile)
</snippet></ROW><ROW><id>14916104</id><snippet>% test.py -o file1
file1
% test.py -o file1 -o file2
usage: test.py [-h] [-o OUTFILE]
test.py: error: -o can only be specified once
</snippet></ROW><ROW><id>14916118</id><snippet>ss = ('Found 1 items\n'
      "drwxr-xr-x   - hadoop supergroup          "
      '0 2013-02-16 13:21 /user/hadoop/wiki\n')

('Found **n** items\n'
 '**permissions**   - **username** **group**          '
 '**notsurewhatthisis** **date** **time** **folders(or file)**\n')

import re

r = re.compile('Found +(\d+) +items *\n *(.+?) *- ')

print r.search(ss).groups()
</snippet></ROW><ROW><id>14916118</id><snippet>ss</snippet></ROW><ROW><id>14916118</id><snippet>'Found +(\d+) +items *\n *(.+?) *- '</snippet></ROW><ROW><id>14916118</id><snippet>r</snippet></ROW><ROW><id>14916455</id><snippet>&gt;&gt;&gt; a = ones((3,))
&gt;&gt;&gt; b = ones((2,))
&gt;&gt;&gt; c = array([a, b])
&gt;&gt;&gt; c
array([[ 1.  1.  1.], [ 1.  1.]], dtype=object)
</snippet></ROW><ROW><id>14916455</id><snippet>sum</snippet></ROW><ROW><id>14916455</id><snippet>reshape</snippet></ROW><ROW><id>14916455</id><snippet>[a, b]</snippet></ROW><ROW><id>14916455</id><snippet>a</snippet></ROW><ROW><id>14916455</id><snippet>b</snippet></ROW><ROW><id>14916455</id><snippet>b</snippet></ROW><ROW><id>14916455</id><snippet>&gt;&gt;&gt; ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])
masked_array(data = [1.0 1.0 --],
             mask = [False False  True],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>14916455</id><snippet>a</snippet></ROW><ROW><id>14916455</id><snippet>&gt;&gt;&gt; ma.vstack([a, ma.array(np.resize(b, a.shape[0]), mask=[False, False, True])])
masked_array(data =
 [[1.0 1.0 1.0]
 [1.0 1.0 --]],
             mask =
 [[False False False]
 [False False  True]],
       fill_value = 1e+20)
</snippet></ROW><ROW><id>14916455</id><snippet>scipy.sparse</snippet></ROW><ROW><id>14916491</id><snippet>class SomeClass(object):
    def __init__(self, n):
        self.list = range(0, n)

    @property
    def list(self):
        return self._list
    @list.setter
    def list(self, val):
        self._list = val
        self._listsquare = [x**2 for x in self._list ]

    @property
    def listsquare(self):
        return self._listsquare
    @listsquare.setter
    def listsquare(self, val):
        self.list = [int(pow(x, 0.5)) for x in val]

&gt;&gt;&gt; c = SomeClass(5)
&gt;&gt;&gt; c.listsquare
[0, 1, 4, 9, 16]
&gt;&gt;&gt; c.list
[0, 1, 2, 3, 4]
&gt;&gt;&gt; c.list = range(0,6)
&gt;&gt;&gt; c.list
[0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; c.listsquare
[0, 1, 4, 9, 16, 25]
&gt;&gt;&gt; c.listsquare = [x**2 for x in range(0,10)]
&gt;&gt;&gt; c.list
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>14916629</id><snippet>#Get an instance of the class
myItem = db.query(myClass).get(record)

#Change an attribute
myItem.title="foo"

#Commit if necessary                 
db.commit()
</snippet></ROW><ROW><id>14916630</id><snippet>your_dict = { 1:{'foo':123}}
your_dict[1]['foo']
</snippet></ROW><ROW><id>14916639</id><snippet>ids</snippet></ROW><ROW><id>14916639</id><snippet>ids</snippet></ROW><ROW><id>14916639</id><snippet>entries</snippet></ROW><ROW><id>14916639</id><snippet>ids</snippet></ROW><ROW><id>14916639</id><snippet>entries</snippet></ROW><ROW><id>14916639</id><snippet>LIMIT</snippet></ROW><ROW><id>14916639</id><snippet>def auto_update_ratings(amounts, assessment_entries_qs, lowest_rating=-1):
    # assessment_entries_qs is an unevaluated QuerySet
    # from your calling code, it would probably generate a query like this:
    # SELECT * FROM assessments ORDER BY RANDOM()
    start = 0
    rating = lowest_rating
    ids = assessment_entries_qs.values_list('id', flat=True)
    # ids is a ValueQuerySet that adds "SELECT id"
    # to the query that assessment_entries_qs would generate.
    # So ids is now something like:
    # SELECT id FROM assessments ORDER BY RANDOM()

    # we omit the loop

    for amount in amounts:
        end_mark = start + amount
        entries = ids[start:end_mark]
        # entries is now another QuerySet with a LIMIT clause added:
        # SELECT id FROM assessments ORDER BY RANDOM() LIMIT start,(start+end_mark)
        # When filter() gets a QuerySet, it adds a subquery
        a = assessment_entries_qs.filter(id__in=entries).update(rating=rating)
        # FINALLY, we now actually EXECUTE a query which is something like this:
        # UPDATE assessments SET rating=? WHERE id IN 
        # (SELECT id FROM assessments ORDER BY RANDOM() LIMIT start,(start+end_mark))
        start = end_mark
        rating += 1
</snippet></ROW><ROW><id>14916639</id><snippet>entries</snippet></ROW><ROW><id>14916639</id><snippet>ids = assessment_entries_qs.values_list('id', flat=True)

# Iterating ids causes the query to actually be executed
# This query was sent to the DB:
# SELECT id FROM assessments ORDER BY RANDOM()
for id in ids:
    pass

# ids has now been "realized" and contains the *results* of the query
# e.g., [5,1,2,3,4]
# Iterating again (or slicing) will now return values rather than modify the query

for amount in amounts:
    end_mark = start + amount
    entries = ids[start:end_mark]
    # because ids was executed, entries contains definite values
    # When filter() gets actual values, it adds a simple condition
    a = assessment_entries_qs.filter(id__in=entries).update(rating=rating)
    # The query executed is something like this:
    # UPDATE assessments SET rating=? WHERE id IN (5,1)
    # "(5,1)" will change on each iteration, but it will always be a set of
    # scalar values rather than a subquery.
    start = end_mark
    rating += 1
</snippet></ROW><ROW><id>14916639</id><snippet>    ids = list(assessment_entries_qs.values_list('id', flat=True))
</snippet></ROW><ROW><id>14916639</id><snippet>QuerySet</snippet></ROW><ROW><id>14916675</id><snippet>import</snippet></ROW><ROW><id>14916675</id><snippet>_</snippet></ROW><ROW><id>14916675</id><snippet>__all__</snippet></ROW><ROW><id>14916675</id><snippet>basedir = os.path.dirname(__file__)
for m in sys.modules:
    if m in locals() and not m.startswith('_'): # Only export regular names
        mod = locals()[m]
        if '__file__' in mod.__dict__  and mod.__file__.startswith(basedir):
            print m
</snippet></ROW><ROW><id>14916675</id><snippet>sys.modules</snippet></ROW><ROW><id>14916675</id><snippet>locals()</snippet></ROW><ROW><id>14916675</id><snippet>.py</snippet></ROW><ROW><id>14916675</id><snippet>__init__.py</snippet></ROW><ROW><id>14916685</id><snippet>aDict = { chr(x):x for x in range(129) }
</snippet></ROW><ROW><id>14916869</id><snippet>ip = r.text.strip()</snippet></ROW><ROW><id>14917025</id><snippet>zip</snippet></ROW><ROW><id>14917025</id><snippet>print tuple(x*y for x,y in zip(t,t[1:]))
</snippet></ROW><ROW><id>14917111</id><snippet>isinstance</snippet></ROW><ROW><id>14917111</id><snippet>def nested_sum(L):
    total = 0  # don't use `sum` as a variable name
    for i in L:
        if isinstance(i, list):  # checks if `i` is a list
            total += nested_sum(i)
        else:
            total += i
    return total
</snippet></ROW><ROW><id>14917213</id><snippet>gem install fastimage</snippet></ROW><ROW><id>14917213</id><snippet>reduce-maxi 4x3 center shutup.png templerun.jpg</snippet></ROW><ROW><id>14917213</id><snippet>reduce-maxi RATIO DIRECTION IMAGES...</snippet></ROW><ROW><id>14917293</id><snippet>__str__</snippet></ROW><ROW><id>14917293</id><snippet>class House:
    # other methods
    def __str__(self):
        return "%d %s" % (self.street_number, self.street_name)
</snippet></ROW><ROW><id>14917444</id><snippet>def clip(lo, x, hi):
    return lo if x &lt;= lo else hi if x &gt;= hi else x
</snippet></ROW><ROW><id>14917444</id><snippet>x &lt;= lo</snippet></ROW><ROW><id>14917444</id><snippet>python -m timeit -s "lo,hi=10,90" "[max(lo,min(hi,x)) for x in range(100)]"
10000 loops, best of 3: 54.5 usec per loop
</snippet></ROW><ROW><id>14917444</id><snippet>python -m timeit -s "lo,hi=10,90" "[(lo,(hi,x)[x&lt;hi])[x&gt;lo] for x in range(100)]"
10000 loops, best of 3: 40.9 usec per loop
</snippet></ROW><ROW><id>14917444</id><snippet>python -m timeit -s "lo,hi=10,90" "[sorted((lo,x,hi))[1] for x in range(100)]"
10000 loops, best of 3: 90.5 usec per loop
</snippet></ROW><ROW><id>14917444</id><snippet>python -m timeit -s "lo,hi=10,90" "[lo if x &lt;= lo else hi if x &gt;= hi else x for x in range(100)]"
100000 loops, best of 3: 18.9 usec per loop
</snippet></ROW><ROW><id>14917444</id><snippet>x &gt;= hi</snippet></ROW><ROW><id>14917444</id><snippet>x &gt; lo</snippet></ROW><ROW><id>14917444</id><snippet>python -m timeit -s "lo,hi=80,90" "[lo if x &lt;= lo else hi if x &gt;= hi else x for x in range(100)]"
100000 loops, best of 3: 15.1 usec per loop
</snippet></ROW><ROW><id>14917444</id><snippet>range</snippet></ROW><ROW><id>14917444</id><snippet>xrange</snippet></ROW><ROW><id>14917572</id><snippet>In [4]: df = pandas.DataFrame({"s1_x": scipy.randn(10), "s1_y": scipy.randn(10), "s2_x": scipy.randn(10), "s2_y": scipy.randn(10)})

In [5]: df.columns = pandas.MultiIndex.from_tuples([tuple(c.split('_')) for c in df.columns])

In [6]: df.stack(0).reset_index(1)
Out[6]: 
  level_1         x         y
0      s1  0.897994 -0.278357
0      s2 -0.008126 -1.701865
1      s1 -1.354633 -0.890960
1      s2 -0.773428  0.003501
2      s1 -1.499422 -1.518993
2      s2  0.240226  1.773427
3      s1 -1.090921  0.847064
3      s2 -1.061303  1.557871
4      s1 -1.697340 -0.160952
4      s2 -0.930642  0.182060
5      s1 -0.356076 -0.661811
5      s2  0.539875 -1.033523
6      s1 -0.687861 -1.450762
6      s2  0.700193  0.658959
7      s1 -0.130422 -0.826465
7      s2 -0.423473 -1.281856
8      s1  0.306983  0.433856
8      s2  0.097279 -0.256159
9      s1  0.498057  0.147243
9      s2  1.312578  0.111837
</snippet></ROW><ROW><id>14917572</id><snippet>In [59]: df
Out[59]: 
   names      s1_x      s1_y      s2_x      s2_y
0      0  0.732099  0.018387  0.299856  0.737142
1      1  0.914755 -0.798159 -0.732868 -1.279311
2      2 -1.063558  0.161779 -0.115751 -0.251157
3      3 -1.185501  0.095147 -1.343139 -0.003084
4      4  0.622400 -0.299726  0.198710 -0.383060
5      5  0.179318  0.066029 -0.635507  1.366786
6      6 -0.820099  0.066067  1.113402  0.002872
7      7  0.711627 -0.182925  1.391194 -2.788434
8      8 -1.124092  1.303375  0.202691 -0.225993
9      9 -0.179026  0.847466 -1.480708 -0.497067

In [60]: id = df.ix[:, ['names']]

In [61]: df.columns = pandas.MultiIndex.from_tuples([tuple(c.split('_')) for c in df.columns])

In [62]: pandas.merge(df.stack(0).reset_index(1), id, left_index=True, right_index=True)
Out[62]: 
  level_1         x         y  names
0      s1  0.732099  0.018387      0
0      s2  0.299856  0.737142      0
1      s1  0.914755 -0.798159      1
1      s2 -0.732868 -1.279311      1
2      s1 -1.063558  0.161779      2
2      s2 -0.115751 -0.251157      2
3      s1 -1.185501  0.095147      3
3      s2 -1.343139 -0.003084      3
4      s1  0.622400 -0.299726      4
4      s2  0.198710 -0.383060      4
5      s1  0.179318  0.066029      5
5      s2 -0.635507  1.366786      5
6      s1 -0.820099  0.066067      6
6      s2  1.113402  0.002872      6
7      s1  0.711627 -0.182925      7
7      s2  1.391194 -2.788434      7
8      s1 -1.124092  1.303375      8
8      s2  0.202691 -0.225993      8
9      s1 -0.179026  0.847466      9
9      s2 -1.480708 -0.497067      9
</snippet></ROW><ROW><id>14917572</id><snippet>    In [64]: df
Out[64]: 
   names      s1_x      s1_y      s2_x      s2_y
0      0  0.744742 -1.123403  0.212736  0.005440
1      1  0.465075 -0.673491  1.467156 -0.176298
2      2 -1.111566  0.168043 -0.102142 -1.072461
3      3  1.226537 -1.147357 -1.583762 -1.236582
4      4  1.137675  0.224422  0.738988  1.528416
5      5 -0.237014 -1.110303 -0.770221  1.389714
6      6 -0.659213  2.305374 -0.326253  1.416778
7      7  1.524214 -0.395451 -1.884197  0.524606
8      8  0.375112 -0.622555  0.295336  0.927208
9      9  1.168386 -0.291899 -1.462098  0.250889

In [65]: df = df.set_index('names')

In [66]: df.columns = pandas.MultiIndex.from_tuples([tuple(c.split('_')) for c in df.columns])

In [67]: df.stack(0).reset_index(1)
Out[67]: 
      level_1         x         y
names                            
0          s1  0.744742 -1.123403
0          s2  0.212736  0.005440
1          s1  0.465075 -0.673491
1          s2  1.467156 -0.176298
2          s1 -1.111566  0.168043
2          s2 -0.102142 -1.072461
3          s1  1.226537 -1.147357
3          s2 -1.583762 -1.236582
4          s1  1.137675  0.224422
4          s2  0.738988  1.528416
5          s1 -0.237014 -1.110303
5          s2 -0.770221  1.389714
6          s1 -0.659213  2.305374
6          s2 -0.326253  1.416778
7          s1  1.524214 -0.395451
7          s2 -1.884197  0.524606
8          s1  0.375112 -0.622555
8          s2  0.295336  0.927208
9          s1  1.168386 -0.291899
9          s2 -1.462098  0.250889
</snippet></ROW><ROW><id>14917587</id><snippet>pack</snippet></ROW><ROW><id>14917587</id><snippet>grid</snippet></ROW><ROW><id>14917587</id><snippet>grid</snippet></ROW><ROW><id>14917587</id><snippet>f = Label(#info)</snippet></ROW><ROW><id>14917587</id><snippet>grid</snippet></ROW><ROW><id>14917587</id><snippet>f.grid(row =1, column = 1, sticky = W)</snippet></ROW><ROW><id>14917587</id><snippet>grid</snippet></ROW><ROW><id>14917656</id><snippet>python</snippet></ROW><ROW><id>14917656</id><snippet>resize.py</snippet></ROW><ROW><id>14917656</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>14917656</id><snippet>chmod +x resize.py</snippet></ROW><ROW><id>14917779</id><snippet>Procfile</snippet></ROW><ROW><id>14917825</id><snippet>import socket
# ...
host_id = socket.gethostname()
# or alternately
host_id = socket.gethostname().split('.')[0]
</snippet></ROW><ROW><id>14917992</id><snippet>r</snippet></ROW><ROW><id>14917992</id><snippet>r.flatten()[:8]
</snippet></ROW><ROW><id>14918110</id><snippet>raw_input('Enter to Quit')
tcpClient.close()
</snippet></ROW><ROW><id>14918110</id><snippet>threading.Condition</snippet></ROW><ROW><id>14918110</id><snippet>notifyAll</snippet></ROW><ROW><id>14918110</id><snippet>condition</snippet></ROW><ROW><id>14918162</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; old_list = ["I love #stackoverflow because #people are very #helpful!","But I dont #love hastags",
... "So #what can you do","Some simple senetnece","where there is no hastags","however #one can be good"]
&gt;&gt;&gt; hash_regex = re.compile('#(\w+)')
&gt;&gt;&gt; [(hash_regex.findall(l), l) for l in old_list]
[(['stackoverflow', 'people', 'helpful'], 'I love #stackoverflow because #people are very #helpful!'), (['love'], 'But I dont #love hastags'), (['what'], 'So #what can you do'), ([], 'Some simple senetnece'), ([], 'where there is no hastags'), (['one'], 'however #one can be good')]
</snippet></ROW><ROW><id>14918165</id><snippet>mac osx</snippet></ROW><ROW><id>14918420</id><snippet>r[0, :8] = array
</snippet></ROW><ROW><id>14918681</id><snippet>dev.off()</snippet></ROW><ROW><id>14918681</id><snippet>pdf(...)
print(....)
dev.off()
</snippet></ROW><ROW><id>14918681</id><snippet>dev.off()</snippet></ROW><ROW><id>14918681</id><snippet>rpy2</snippet></ROW><ROW><id>14918681</id><snippet>grdevices.dev_off()
</snippet></ROW><ROW><id>14919039</id><snippet>lst = ['aaa','bbb','ccc']
tpl_lst = [(i,) for i in lst]
</snippet></ROW><ROW><id>14919039</id><snippet>[('aaa',), ('bbb',), ('ccc',)]
</snippet></ROW><ROW><id>14919080</id><snippet>In [22]: dates = pd.date_range('01-Jan-2014','11-Jan-2014', freq='T')[0:-1]
    ...: dates = dates[dates.dayofweek &lt; 5]
    ...: s = pd.TimeSeries(np.random.randn(dates.size), dates)
    ...: 

In [23]: s.size
Out[23]: 11520

In [24]: s.groupby(lambda d: d.date()).resample('30min').size
Out[24]: 384

In [25]: s.groupby(lambda d: d.date()).resample('30min')
Out[25]: 
2014-01-01  2014-01-01 00:00:00    0.202943
            2014-01-01 00:30:00   -0.466010
            2014-01-01 01:00:00    0.029175
            2014-01-01 01:30:00   -0.064492
            2014-01-01 02:00:00   -0.113348
            2014-01-01 02:30:00    0.100408
            2014-01-01 03:00:00   -0.036561
            2014-01-01 03:30:00   -0.029578
            2014-01-01 04:00:00   -0.047602
            2014-01-01 04:30:00   -0.073846
            2014-01-01 05:00:00   -0.410143
            2014-01-01 05:30:00    0.143853
            2014-01-01 06:00:00   -0.077783
            2014-01-01 06:30:00   -0.122345
            2014-01-01 07:00:00    0.153003
...
2014-01-10  2014-01-10 16:30:00   -0.107377
            2014-01-10 17:00:00   -0.157420
            2014-01-10 17:30:00    0.201802
            2014-01-10 18:00:00   -0.189018
            2014-01-10 18:30:00   -0.310503
            2014-01-10 19:00:00   -0.086091
            2014-01-10 19:30:00   -0.090800
            2014-01-10 20:00:00   -0.263758
            2014-01-10 20:30:00   -0.036789
            2014-01-10 21:00:00    0.041957
            2014-01-10 21:30:00   -0.192332
            2014-01-10 22:00:00   -0.263690
            2014-01-10 22:30:00   -0.395939
            2014-01-10 23:00:00   -0.171149
            2014-01-10 23:30:00    0.263057
Length: 384

In [26]: np.unique(_25.index.get_level_values(1).minute)
Out[26]: array([ 0, 30])

In [27]: np.unique(_25.index.get_level_values(1).dayofweek)
Out[27]: array([0, 1, 2, 3, 4]) 
</snippet></ROW><ROW><id>14919141</id><snippet>from rpy2.robjects.lib.ggplot2 import ggplot, \
                               aes_string, \
                               geom_histogram, \
                               element_blank, \
                               theme_bw, \
                               theme
from rpy2.robjects import r

nogrid_x_theme = theme(**{'panel.grid.major.x': element_blank(),
                         'panel.grid.minor.x': element_blank()})
iris = r('iris')
p = ggplot(iris) + geom_histogram(aes_string(x = 'Sepal.Width'))
p += theme_bw() + nogrid_x_theme
p.plot()
</snippet></ROW><ROW><id>14919142</id><snippet>pipe</snippet></ROW><ROW><id>14919142</id><snippet>((?:[^\W\d]|-)+)
</snippet></ROW><ROW><id>14919232</id><snippet>&lt;C-x&gt;&lt;C-o&gt;</snippet></ROW><ROW><id>14919232</id><snippet>numpy.</snippet></ROW><ROW><id>14919232</id><snippet>numpy.arc</snippet></ROW><ROW><id>14919615</id><snippet>title</snippet></ROW><ROW><id>14919615</id><snippet>text</snippet></ROW><ROW><id>14919615</id><snippet>city</snippet></ROW><ROW><id>14919615</id><snippet>created</snippet></ROW><ROW><id>14920354</id><snippet>yearout</snippet></ROW><ROW><id>14920354</id><snippet>yearc</snippet></ROW><ROW><id>14920354</id><snippet>finalcalc()</snippet></ROW><ROW><id>14920354</id><snippet>dayout</snippet></ROW><ROW><id>14920354</id><snippet>monthout</snippet></ROW><ROW><id>14920354</id><snippet>yearout</snippet></ROW><ROW><id>14920354</id><snippet>dayout</snippet></ROW><ROW><id>14920354</id><snippet>monthout</snippet></ROW><ROW><id>14920354</id><snippet>finalcalc()</snippet></ROW><ROW><id>14920354</id><snippet>return</snippet></ROW><ROW><id>14920354</id><snippet>yearc</snippet></ROW><ROW><id>14920354</id><snippet>yearout</snippet></ROW><ROW><id>14920354</id><snippet>def yearc(y):
    y = y % 100
    yearout = y + (y // 4)
    yearrem = y % 4
    if yearrem &gt;= 2:
        yearout += 1
    yearout = yearout % 7
    return yearout
</snippet></ROW><ROW><id>14920354</id><snippet>yearout = yearc(yearin)
</snippet></ROW><ROW><id>14920374</id><snippet>open("C:\Users\Owatch\Documents\Python\FunStuff\nsed.txt")
</snippet></ROW><ROW><id>14920374</id><snippet>open(r"C:\Users\Owatch\Documents\Python\FunStuff\nsed.txt")
</snippet></ROW><ROW><id>14920374</id><snippet>d[int(key)] = val
</snippet></ROW><ROW><id>14920374</id><snippet>d[key] = val
</snippet></ROW><ROW><id>14920374</id><snippet>d[ord(key) - ord('a')] = val
</snippet></ROW><ROW><id>14920485</id><snippet>from django.contrib import admin
from myapp.models import Reseller

class ResellerAdmin(admin.ModelAdmin):
    ...

    actions = ['reset_password']

    def reset_password(self, request, queryset):
        for obj in queryset:
            obj.password = genereate_new_passwd()
            sender.send(obj.email, obj.password)
            obj.save()
        self.message_user(request, "Passwords were resets for selected resellers successfully.")

    reset_password.short_description = "Resend Passwords for selected resellers"

admin.site.register(Reseller, ResellerAdmin)
</snippet></ROW><ROW><id>14920485</id><snippet>from django.contrib import admin
from myapp.models import Reseller

change_form_template = 'admin/myapp/extras/reseller_change_form.html'

class ResellerAdmin(admin.ModelAdmin):

    def change_view(self, request, object_id, form_url='', extra_context=None):
        if(comming from new action)
            # intercept the request post here, if it comes from your new button, do reset password
        else: 
            return super(ResellerAdmin, self).change_view(request, object_id,
               form_url, extra_context=extra_context)
</snippet></ROW><ROW><id>14920485</id><snippet>class ResellerAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        if change and form.is_reset:
             #do reset password and send
        obj.save()

    def get_form(self, request, obj=None, **kwargs):
        form = super(ResellerAdmin, self).get_form(request, obj, **kwargs)
        form.fields['is_reset'] = form.BooleanField()
        return form
</snippet></ROW><ROW><id>14920617</id><snippet>--- /tmp/test.py
+++ /tmp/test2.py
@@ -11,8 +11,19 @@
         self.timer = wx.Timer(self)
         self.Bind(wx.EVT_TIMER, self.Update, self.timer)     

+        # Panel for 'Enter Task' textfield and button
+        enter_task_panel = wx.Panel(self, -1)
+        task_panel_sizer = wx.BoxSizer(wx.VERTICAL)
+        enter_task_panel.SetSizer(task_panel_sizer)
+
         #Enter Task Field
-        self.edit = wx.TextCtrl(self, -1, size=wx.Size(200, -1))
+        self.edit = wx.TextCtrl(enter_task_panel, -1, size=wx.Size(200, -1))
+        task_panel_sizer.Add(self.edit, 1)
+
+        # 'Enter Task' button
+        enter_task_button = wx.Button(enter_task_panel, -1, "Enter Task")
+        task_panel_sizer.Add(enter_task_button, 1, wx.EXPAND)
+
         #Enter Task Button
         self.button = wx.Button(self, -1, label="Enter!")
         self.midpanel = MiddlePanel(self)
@@ -25,7 +36,7 @@
         self.Bind(wx.EVT_BUTTON, MainWin.CloseButton, self.exit_button)

          self.sizer = wx.BoxSizer()
-         self.sizer.Add(self.edit, 1, wx.EXPAND)
+         self.sizer.Add(enter_task_panel, 1, wx.EXPAND)
          self.sizer.Add(self.start_button, 0, wx.EXPAND)
          self.sizer.Add(self.exit_button, 0, wx.EXPAND)
</snippet></ROW><ROW><id>14920792</id><snippet>getattr()</snippet></ROW><ROW><id>14920792</id><snippet>root = getattr(winreg, KeyRoot, None)
if root is None or not KeyRoot.startswith('HKEY_'):
    mymessagebox('{} is not a valid Key Root'.format(KeyRoot))
    return

if not Key:
    try:
        keyhandle = winreg.ConnectRegistry(None, root)
        return winreg.QueryValue(keyhandle, KeyFolder)
    except FileNotFoundError:
        mymessagebox('{} not found in registry'.format(KeyFolder))
else:
    try:
        keyhandle = winreg.OpenKey(root, KeyFolder, 0, KEY_READ)
        return winreg.QueryValueEx(keyhandle, Key)[0]
    except FileNotFoundError:
        mymessagebox('{} not found in registry'.format(KeyFolder))
</snippet></ROW><ROW><id>14920854</id><snippet>import multiprocessing
import time

# Your foo function
def foo(n):
    for i in range(10000 * n):
        print "Tick"
        time.sleep(1)

if __name__ == '__main__':
    # Start foo as a process
    p = multiprocessing.Process(target=foo, name="Foo", args=(10,))
    p.start()

    # Wait 10 seconds for foo
    time.sleep(10)

    # Terminate foo
    p.terminate()

    # Cleanup
    p.join()
</snippet></ROW><ROW><id>14920854</id><snippet>foo</snippet></ROW><ROW><id>14920854</id><snippet># If thread is active
if p.is_alive:
    print "foo is running... let's kill it..."

    # Terminate foo
    p.terminate()
</snippet></ROW><ROW><id>14920854</id><snippet>join</snippet></ROW><ROW><id>14920854</id><snippet>timeout</snippet></ROW><ROW><id>14920854</id><snippet>foo</snippet></ROW><ROW><id>14920854</id><snippet># Wait a maximum of 10 seconds for foo
# Usage: join([timeout in seconds])
p.join(10)

# If thread is active
if p.is_alive:
    print "foo is running... let's kill it..."

    # Terminate foo
    p.terminate()
    p.join()
</snippet></ROW><ROW><id>14920923</id><snippet>&gt;&gt;&gt; dt.item().total_seconds()
65.0
</snippet></ROW><ROW><id>14921165</id><snippet>img</snippet></ROW><ROW><id>14921165</id><snippet>BytesIO</snippet></ROW><ROW><id>14921165</id><snippet>output = io.BytesIO()
img.save(output, format='JPEG')
</snippet></ROW><ROW><id>14921165</id><snippet>.getvalue()</snippet></ROW><ROW><id>14921165</id><snippet>hex_data = output.getvalue()
</snippet></ROW><ROW><id>14921165</id><snippet>BytesIO</snippet></ROW><ROW><id>14921165</id><snippet>io.UnsupportedOperation: fileno</snippet></ROW><ROW><id>14921385</id><snippet>csv</snippet></ROW><ROW><id>14921385</id><snippet>print</snippet></ROW><ROW><id>14921385</id><snippet>import csv

with open('nsed.txt', newline='') as f:
    reader = csv.reader((line.strip() for line in f), delimiter=' ')
    TRvalues = dict(reader)

print(TRvalues)
</snippet></ROW><ROW><id>14921385</id><snippet>a 0.01
b 0.11
c 1.11
d 0.02
" " " "
</snippet></ROW><ROW><id>14921385</id><snippet>{' ': ' ', 'a': '0.01', 'b': '0.11', 'c': '1.11', 'd': '0.02'}
</snippet></ROW><ROW><id>14921444</id><snippet>y</snippet></ROW><ROW><id>14921444</id><snippet>plt.ylim([-81,81])
</snippet></ROW><ROW><id>14921444</id><snippet>y</snippet></ROW><ROW><id>14921444</id><snippet>x</snippet></ROW><ROW><id>14921444</id><snippet>plt.xlim([ xmin,xmax])
</snippet></ROW><ROW><id>14921460</id><snippet>a = ['this;mango', 'is:red', 'test;cat']
b = ['man', 'is', 'can']

import re

for elem in b:
    for test in a:
        if re.search(r'\b' + re.escape(elem) + r'\b', test):
            print elem
</snippet></ROW><ROW><id>14921460</id><snippet>&gt;&gt;&gt; a = ['this;mango', 'is:red', 'test;cat']
&gt;&gt;&gt; b = ['man', 'is', 'can']
&gt;&gt;&gt; 
&gt;&gt;&gt; import re
&gt;&gt;&gt; [elem for elem in b if any(re.search(r'\b' + re.escape(elem) + r'\b', test) for test in a)]
['is']
</snippet></ROW><ROW><id>14921460</id><snippet>map</snippet></ROW><ROW><id>14921460</id><snippet>lambda</snippet></ROW><ROW><id>14921460</id><snippet>explicit</snippet></ROW><ROW><id>14921460</id><snippet>a</snippet></ROW><ROW><id>14921460</id><snippet>&gt;&gt;&gt; [elem for elem in b if any(map(lambda test: re.search(r'\b' + re.escape(elem) + r'\b', test), a))]
['is']
</snippet></ROW><ROW><id>14921464</id><snippet>import numpy as np
import matplotlib.pyplot as plt
linalg = np.linalg

N = 1000
mean = [1,1]
cov = [[0.3, 0.2],[0.2, 0.2]]
data = np.random.multivariate_normal(mean, cov, N)
L = linalg.cholesky(cov)
# print(L.shape)
# (2, 2)
uncorrelated = np.random.standard_normal((2,N))
data2 = np.dot(L,uncorrelated) + np.array(mean).reshape(2,1)
# print(data2.shape)
# (2, 1000)
plt.scatter(data2[0,:], data2[1,:], c='green')    
plt.scatter(data[:,0], data[:,1], c='yellow')
plt.show()
</snippet></ROW><ROW><id>14921464</id><snippet>np.random.multivariate_normal</snippet></ROW><ROW><id>14921464</id><snippet>L</snippet></ROW><ROW><id>14921469</id><snippet># Tally occurrences of words in a list
cnt = Counter()
for word in ['red', 'blue', 'red', 'green', 'blue', 'blue']:
    cnt[word] += 1
print cnt


# Find the ten most common words in Hamlet
import re
words = re.findall('\w+', open('hamlet.txt').read().lower())
Counter(words).most_common(10)
</snippet></ROW><ROW><id>14921469</id><snippet>import re
import collections
words = re.findall('\w+', open('1976.03.txt').read().lower())
print collections.Counter(words)
</snippet></ROW><ROW><id>14921469</id><snippet>wanted = "fish chips steak"
cnt = Counter()
words = re.findall('\w+', open('1976.03.txt').read().lower())
for word in words:
    if word in wanted:
        cnt[word] += 1
print cnt
</snippet></ROW><ROW><id>14921651</id><snippet>subparsers=parser.add_subparsers(dest='action')
subparsers.add_parser('Restart',parents=[general_group,second_group])
subparsers.add_parser('Start',parents=[general_group])
</snippet></ROW><ROW><id>14921651</id><snippet>general_group</snippet></ROW><ROW><id>14921651</id><snippet>./script.py -h</snippet></ROW><ROW><id>14921651</id><snippet>--threads</snippet></ROW><ROW><id>14921651</id><snippet>parser = argparse.ArgumentParser(parents=[general_group])
subparsers=parser.add_subparsers(dest='action')
subparsers.add_parser('Restart',parents=[second_group])
subparsers.add_parser('Start')
</snippet></ROW><ROW><id>14921651</id><snippet>$ python script.py -h
usage: script.py [-h] [--threads] {Restart,Start} ...

positional arguments:
  {Restart,Start}

optional arguments:
  -h, --help       show this help message and exit
  --threads
</snippet></ROW><ROW><id>14921651</id><snippet>$python script.py --threads Start
</snippet></ROW><ROW><id>14921651</id><snippet>$ python script.py Start --threads
usage: script.py [-h] [--threads] {Restart,Start} ...
script.py: error: unrecognized arguments: --threads
</snippet></ROW><ROW><id>14921651</id><snippet>--threads</snippet></ROW><ROW><id>14921651</id><snippet>--threads</snippet></ROW><ROW><id>14921651</id><snippet>parents</snippet></ROW><ROW><id>14921651</id><snippet>parser = argparse.ArgumentParser(parents=[general_group])
subparsers=parser.add_subparsers(dest='action')
subparsers.add_parser('Restart',parents=[general_group, second_group])
subparsers.add_parser('Start', parents=[general_group])
</snippet></ROW><ROW><id>14921651</id><snippet>$ python script.py -h
usage: script.py [-h] [--threads] {Restart,Start} ...

positional arguments:
  {Restart,Start}

optional arguments:
  -h, --help       show this help message and exit
  --threads
$ python script.py Start -h
usage: script.py Start [-h] [--threads]

optional arguments:
  -h, --help  show this help message and exit
  --threads
</snippet></ROW><ROW><id>14922111</id><snippet>In [2]: conv={'c':0,'h':1,'e':2}

In [3]: a=['c','c','c','c','c','h','h','h','h','h','e','e','e','e','e']

In [4]: [conv[i] for i in a]
Out[4]: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]
</snippet></ROW><ROW><id>14922282</id><snippet>from sqlalchemy.orm import configure_mappers

configure_mappers()
</snippet></ROW><ROW><id>14922464</id><snippet>input()</snippet></ROW><ROW><id>14922464</id><snippet>raw_input</snippet></ROW><ROW><id>14922517</id><snippet>def foo(func):
    print func()
</snippet></ROW><ROW><id>14922517</id><snippet>def main():
    foo.foo(bar)
</snippet></ROW><ROW><id>14922667</id><snippet>import numpy as np
channel = np.zeros(1, dtype = [('PRN',int),
                               ('acquiredFreq',int),
                               ('codePhase',int),
                               ('status','|S1')])

print(channel)
# [(0, 0, 0, '')]
</snippet></ROW><ROW><id>14922667</id><snippet>print(channel[0])
# (0, 0, 0, '')
</snippet></ROW><ROW><id>14922667</id><snippet>print(channel['PRN'])
# [0]
</snippet></ROW><ROW><id>14922667</id><snippet>for row in channel:
    row['PRN'] = 1
    row['acquiredFreq'] = 1
    row['codePhase'] = 1
    row['status'] = '+'

print(channel)    
# [(1, 1, 1, '+')]
</snippet></ROW><ROW><id>14922667</id><snippet>channel[0]['status'] = '-'
print(channel)
# [(1, 1, 1, '-')]
</snippet></ROW><ROW><id>14922667</id><snippet>channel['PRN'][0] = 10
print(channel)
# [(10, 1, 1, '-')]
</snippet></ROW><ROW><id>14922667</id><snippet>channel['PRN'] = PRNindexes
</snippet></ROW><ROW><id>14922667</id><snippet>PRNindexes</snippet></ROW><ROW><id>14922667</id><snippet>index = (channel.status == '+')  # Select all rows with status '+'
channel['PRN'][index] = 10       # Set PRN to 10 for all those rows
</snippet></ROW><ROW><id>14922667</id><snippet>channel[0]</snippet></ROW><ROW><id>14922667</id><snippet>channel[1:10]</snippet></ROW><ROW><id>14922667</id><snippet>index</snippet></ROW><ROW><id>14922667</id><snippet>channel['PRN'][index] = ...
</snippet></ROW><ROW><id>14922667</id><snippet>channel[index]['PRN'] = ...
</snippet></ROW><ROW><id>14922914</id><snippet>itr = store.append(['Its working', ])
</snippet></ROW><ROW><id>14922988</id><snippet>master.geometry("%sx%sx%sx%s" % (screensize[0], screensize[1], screensize[2], screensize[3]))
</snippet></ROW><ROW><id>14922989</id><snippet>import json, pickle

with open("data.pickle", "rb") as fpick:
    with open("data.json", "w") as fjson:
        json.dump(pickle.load(fpick), fjson)
</snippet></ROW><ROW><id>14923284</id><snippet>import re
lines = [line.strip() for line in open('file.csv')]
for x in lines:
    match=re.search(r'^_.*_$',x)
    if match: print x
</snippet></ROW><ROW><id>14923284</id><snippet>_abdlfla_
sldjlfds_
_adlfdls
_132jdlfjflds_
</snippet></ROW><ROW><id>14923284</id><snippet>_abdlfla_
_132jdlfjflds_
</snippet></ROW><ROW><id>14923509</id><snippet>getattr</snippet></ROW><ROW><id>14923509</id><snippet>id</snippet></ROW><ROW><id>14923509</id><snippet>a = getattr(myobject, 'id', None)
</snippet></ROW><ROW><id>14923509</id><snippet>id</snippet></ROW><ROW><id>14923509</id><snippet>myobject</snippet></ROW><ROW><id>14923509</id><snippet>id</snippet></ROW><ROW><id>14923509</id><snippet>myobject</snippet></ROW><ROW><id>14923509</id><snippet>None</snippet></ROW><ROW><id>14923509</id><snippet>getattr</snippet></ROW><ROW><id>14923509</id><snippet>a = myobject.getattr('id', None)
</snippet></ROW><ROW><id>14923509</id><snippet>def deepgetattr(obj, attr):
    """Recurses through an attribute chain to get the ultimate value."""
    return reduce(getattr, attr.split('.'), obj)
# usage: 
print deepgetattr(universe, 'galaxy.solarsystem.planet.name')
</snippet></ROW><ROW><id>14923509</id><snippet>obj</snippet></ROW><ROW><id>14923509</id><snippet>getattr</snippet></ROW><ROW><id>14923509</id><snippet>a = getattr(getattr(myobject, 'id', None), 'number', None)</snippet></ROW><ROW><id>14923515</id><snippet>(x,y)</snippet></ROW><ROW><id>14923515</id><snippet>x</snippet></ROW><ROW><id>14923515</id><snippet>y</snippet></ROW><ROW><id>14923515</id><snippet>u</snippet></ROW><ROW><id>14923515</id><snippet>v</snippet></ROW><ROW><id>14923515</id><snippet>streamplot</snippet></ROW><ROW><id>14923515</id><snippet>density=1</snippet></ROW><ROW><id>14923515</id><snippet>(1,1)</snippet></ROW><ROW><id>14923515</id><snippet>density</snippet></ROW><ROW><id>14923515</id><snippet>linspace</snippet></ROW><ROW><id>14923515</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 1, 10)
y = np.linspace(0, 2, 10)
u = np.zeros((y.size, x.size))
v = np.zeros((y.size, x.size))
u[:,-2:] = 1
speed = np.sqrt(u*u + v*v)

plt.figure()
plt.subplot(121)
plt.streamplot(x, y, u, v,density=1, color='b')
plt.subplot(122)
plt.streamplot(x, y, u, v, density=(1,1), color=u, linewidth=5*speed/speed.max())
plt.show()
</snippet></ROW><ROW><id>14923545</id><snippet>canvas</snippet></ROW><ROW><id>14923545</id><snippet>fig</snippet></ROW><ROW><id>14923545</id><snippet>cmap = mpl.colors.ListedColormap([[1,0,0], [0,0,1], [0,1,0], [1,1,0]])

xcolors = arange(15).reshape(15,1)
ycolors = arange(15).reshape(1,15)
fig = plt.figure(figsize=(6,6))
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
x_ax = fig.add_axes([0.05, 0.1, 0.05, 0.8])
x2_ax = fig.add_axes([0.05, 0.1, 0.05, 0.8])
y_ax = fig.add_axes([0.1, 0.05, 0.8, 0.05])
x_ax.imshow(xcolors, cmap=cmap, interpolation='none', picker=True)
x_ax.set_aspect('auto')
x_ax.set_position((0.1,0.1,0.05,0.8))
y_ax.imshow(ycolors, cmap=cmap, interpolation='none', picker=True)
def on_pick(event):
    artist = event.artist
    if isinstance(artist, matplotlib.image.AxesImage):
        im = artist
        A = im.get_array()
        print A.shape,
    print 'hello'


canvas = fig.canvas
canvas.mpl_connect('pick_event',on_pick)
</snippet></ROW><ROW><id>14923545</id><snippet>cmap = mpl.colors.ListedColormap([[1,0,0], [0,0,1], [0,1,0], [1,1,0]])

xcolors = arange(15).reshape(15,1)
ycolors = arange(15).reshape(1,15)
fig = plt.figure(figsize=(6,6))
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
x_ax = fig.add_axes([0.05, 0.1, 0.05, 0.8])
x2_ax = fig.add_axes([0.05, 0.1, 0.05, 0.8])
y_ax = fig.add_axes([0.1, 0.05, 0.8, 0.05])
x_ax.imshow(xcolors, cmap=cmap, interpolation='none')
x_ax.set_aspect('auto')
x_ax.set_position((0.1,0.1,0.05,0.8))
y_ax.imshow(ycolors, cmap=cmap, interpolation='none')

x_ax.set_picker(5)
y_ax.set_picker(5)

def on_pick(event):
    artist = event.artist
    if isinstance(artist, matplotlib.axes.Axes):

        print event.mouseevent.ydata,
        print event.mouseevent.xdata,
    print 'hello'


canvas = fig.canvas
canvas.mpl_connect('pick_event',on_pick)
</snippet></ROW><ROW><id>14923623</id><snippet>redirect</snippet></ROW><ROW><id>14923623</id><snippet>get_absolute_url()</snippet></ROW><ROW><id>14923906</id><snippet>import os, pymunk
pymunk_dir = os.path.dirname(pymunk.__file__)
chipmunk_libs = [
    ('chipmunk.dll', os.path.join(pymunk_dir, 'chipmunk.dll'), 'DATA'),
]
#... 
coll = COLLECT(exe,
               a.binaries + chipmunk_libs,
               a.zipfiles,
               a.datas,
               strip=None,
               upx=True,
               name=os.path.join('dist', 'basic_test'))
</snippet></ROW><ROW><id>14924087</id><snippet>lst = [a,d,e,g,h,j]
nm_lst = ['a', 'b', 'd', 'e', 'h', 'j']
for i,nm in zip(lst,nm_lst):
    pickle.dump(i,open('{0}.p'.format(nm),'wb'))
</snippet></ROW><ROW><id>14924087</id><snippet>my_dict = {'a':a, 'b':b}
for key, val in my_dict.iteritems():
    pickle.dump(val,open('{0}.p'.format(key),'wb'))
</snippet></ROW><ROW><id>14924087</id><snippet>iteritems</snippet></ROW><ROW><id>14924087</id><snippet>items</snippet></ROW><ROW><id>14924389</id><snippet>iterparse()</snippet></ROW><ROW><id>14924389</id><snippet>from xml.etree import ElementTree as ET

parser = ET.iterparse(filename)

for event, element in parser:
    # element is a whole element
    if element.tag == 'yourelement'
         # do something with this element
         # then clean up
         element.clear()
</snippet></ROW><ROW><id>14924389</id><snippet>iterparse()</snippet></ROW><ROW><id>14924553</id><snippet>while not browser.is_loaded():
</snippet></ROW><ROW><id>14924948</id><snippet>from rpy2.robjects.lib import ggplot2
from rpy2.robjects import r
from rpy2.robjects.packages import importr

scales = importr('scales')

iris = r('iris')

p = ggplot2.ggplot(iris) + \
    ggplot2.geom_point(ggplot2.aes_string(x="Sepal.Length", y="Sepal.Width")) + \
    ggplot2.scale_x_continuous(trans = scales.log2_trans())

p.plot()
</snippet></ROW><ROW><id>14924958</id><snippet>class MyDateTimeField(forms.Field):

    def to_python(self, value):
        # Return an empty list if no input was given.
        if not value:
            return []
        import datetime 
        today = datetime.date.today()
        hhmm = value.split(':')
        val= datetime.datetime.combine(datetime.date.today(), datetime.time(int(hhmm[0]),int(hhmm[1])))
        return val
</snippet></ROW><ROW><id>14924958</id><snippet>class JobForm(forms.ModelForm):
    end_time = MyDateTimeField()
</snippet></ROW><ROW><id>14925034</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def haha(self):
...         print 3
...     def __init__(self):
...         def haha():
...             print 4
...         self.haha = haha
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.haha
&lt;function haha at 0x7f4539e25aa0&gt;
&gt;&gt;&gt; a.haha()
4
</snippet></ROW><ROW><id>14925034</id><snippet>haha</snippet></ROW><ROW><id>14925034</id><snippet>self</snippet></ROW><ROW><id>14925034</id><snippet>types.MethodType</snippet></ROW><ROW><id>14925059</id><snippet>&gt;&gt;&gt; "a" + "b"
'ab'
&gt;&gt;&gt; "a" "b"
'ab'
</snippet></ROW><ROW><id>14925059</id><snippet>plt.text(0.5, 0.5,
         r'$\mathsf{sin\left(\frac{\pi}{180} f_1 \theta + \varphi_1\right)'
         r'     + B sin\left(\frac{\pi}{180} f_2 \theta + \varphi_2\right)}$')
</snippet></ROW><ROW><id>14925152</id><snippet>class MyModelManager(models.Manager):
    def get_query_set(self):
        return super(MyModelManager, self).get_query_set().filter(active=True)

class MyModel(models.Model):
    timestamp = models.DateTimeField(default=datetime.utcnow)
    active = models.BooleanField(default=True)

    objects = MyModelManager()

    class Meta:
        ordering = ['-timestamp']
</snippet></ROW><ROW><id>14925355</id><snippet>getattr(getattr(myobject, "id", None), "number", None)
</snippet></ROW><ROW><id>14925693</id><snippet>if time == '90.00':
    time = float(time)
    added = added.getText()
    if not added == '':
        added = added.replace(':', '.')
        added = added.replace('+', '')
        added = ' '.join(added.split())
        added = float(added)
        time1 = time+added
        print time1
</snippet></ROW><ROW><id>14925693</id><snippet>float</snippet></ROW><ROW><id>14925693</id><snippet>float(added)</snippet></ROW><ROW><id>14925693</id><snippet>added</snippet></ROW><ROW><id>14925693</id><snippet>added</snippet></ROW><ROW><id>14925693</id><snippet>added</snippet></ROW><ROW><id>14925704</id><snippet>defaultdict</snippet></ROW><ROW><id>14925704</id><snippet>list1=[{'a':'apples', 'b':'snack','count':2},{'a':'apples','b':'lunch','count':3},{'a':'apples','b':'snack','count':3}]

from collections import defaultdict
dd = defaultdict(int)
for d in list1:
    dd[d['a'], d['b']] += d['count']

list2 = [{'a': k[0], 'b': k[1], 'count': v} for k, v in dd.iteritems()]

[{'a': 'apples', 'count': 3, 'b': 'lunch'}, {'a': 'apples', 'count': 5, 'b': 'snack'}]
</snippet></ROW><ROW><id>14925756</id><snippet>Rectangle</snippet></ROW><ROW><id>14925756</id><snippet>def calcArea(self):
    return self.width * self.height
</snippet></ROW><ROW><id>14925756</id><snippet>print mRectangle.calcArea()</snippet></ROW><ROW><id>14925756</id><snippet>mRectangle</snippet></ROW><ROW><id>14925756</id><snippet>Rectangle</snippet></ROW><ROW><id>14925756</id><snippet>self.width</snippet></ROW><ROW><id>14925756</id><snippet>self.height</snippet></ROW><ROW><id>14925756</id><snippet>Rectangle</snippet></ROW><ROW><id>14925756</id><snippet>Size</snippet></ROW><ROW><id>14925756</id><snippet>Size</snippet></ROW><ROW><id>14925756</id><snippet>width</snippet></ROW><ROW><id>14925756</id><snippet>height</snippet></ROW><ROW><id>14925756</id><snippet>Rectangle</snippet></ROW><ROW><id>14925756</id><snippet>Size</snippet></ROW><ROW><id>14925756</id><snippet>width = 0</snippet></ROW><ROW><id>14925756</id><snippet>height = 0</snippet></ROW><ROW><id>14925756</id><snippet>self.width</snippet></ROW><ROW><id>14925756</id><snippet>self.height</snippet></ROW><ROW><id>14925756</id><snippet>&gt;&gt;&gt; class MyClass():
...     a = 0
...     def __init__(self):
...         self.a = 5
...     def echo(self):
...         print MyClass.a, self.a
... 
&gt;&gt;&gt; instance = MyClass()
&gt;&gt;&gt; instance.echo()
0 5
&gt;&gt;&gt; instance.a
5
&gt;&gt;&gt; MyClass.a
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14925756</id><snippet>ClassName.Variable</snippet></ROW><ROW><id>14926104</id><snippet>U'\x83'.encode('cp870')
</snippet></ROW><ROW><id>14926195</id><snippet>from xml.dom import minidom
from copy import copy

class Xmlparse:

    def __init__(self, xmlfile):
        self.doc = minidom.parse(xmlfile)

    def findadress(self):
        itemlist =self.doc.getElementsByTagName('addresses')
        return itemlist[0].attributes['firstname'].value
</snippet></ROW><ROW><id>14926243</id><snippet>@view_config(route_name='login', renderer='json', request_method='POST')
def post_login(request):
   ...
   ... authentication logic
   ...
   headers = remeber(request, login)
   request.response.headerlist.extend(headers)
   return { 'successful': True, 'message': 'auth OK'}
</snippet></ROW><ROW><id>14926584</id><snippet>class QuestionForm(forms.ModelForm):
    answer = forms.ChoiceField(required=True, widget=forms.RadioSelect())

    def __init__(self, question=None, *args, **kwargs):
        super(QuestionForm, self).__init__(*args, **kwargs)
        self.fields['answer'].choices = [(a.text, a.value) for a in Answer.objects.filter(question=question)]

    class Meta:
        model = Question
        fields = ('text')
</snippet></ROW><ROW><id>14926584</id><snippet>q = Question.objects.get(pk=1)
qform = QuestionForm(instance=q)
</snippet></ROW><ROW><id>14927113</id><snippet>&lt;tag attr1="val1" attr2="val2"/&gt;

&lt;!-- means the same thing as: --&gt;

&lt;tag attr2="val2" attr1="val1"/&gt;
</snippet></ROW><ROW><id>14927113</id><snippet>lxml</snippet></ROW><ROW><id>14927113</id><snippet>id = 1
name = 'Development Signature'
puid = 'dev/1'
version = '1.0'
mimetype = 'text/x-test-signature'

template = ('&lt;FileFormat ID="%d" Name="%s" PUID="%s" Version="%s" '
            'MIMEType="%s"&gt;')

xml = template % (id, name, puid, version, mimetype)
</snippet></ROW><ROW><id>14927165</id><snippet>def safe_input(prompt, type_=str):
    if(type_ not in (str, int, float)): 
        raise ValueError("Expected str, int or float.")  

    while True:
        test = input(prompt)    
        try:
            ret = type_(test)
        except ValueError:
            print("Invalid type, enter again.")                
        else:
            break    

    return ret
</snippet></ROW><ROW><id>14927186</id><snippet>for column in ('name', 'synopsis', 'something', 'other'):
    if not getattr(title, column):
        setattr(title, column, data[column])
</snippet></ROW><ROW><id>14927308</id><snippet>self.aboutWindow = self.builder.get_object("aboutWindow")</snippet></ROW><ROW><id>14927308</id><snippet>self.aboutWindow.destroy()</snippet></ROW><ROW><id>14927308</id><snippet>self.aboutWindow.hide()</snippet></ROW><ROW><id>14927327</id><snippet>generate_series</snippet></ROW><ROW><id>14927327</id><snippet>SELECT
  x.gendate,
  t.account_id, t.id, t.note, t.amount
FROM 
  generate_series(
    (SELECT min("date") FROM transaction),
    (SELECT max("date") FROM transaction),
    INTERVAL '1' DAY
  ) AS x(gendate)
  LEFT OUTER JOIN transaction t ON (t."date" = x.gendate)
ORDER BY x.gendate;
</snippet></ROW><ROW><id>14927327</id><snippet>WITH continuous_tx AS (
  SELECT
    x.gendate AS "date",
    t.account_id, t.id, t.note, t.amount
  FROM 
    generate_series(
      (SELECT min("date") FROM transaction),
      (SELECT max("date") FROM transaction),
      INTERVAL '1' DAY
    ) AS x(gendate)
    LEFT OUTER JOIN transaction t ON (t."date" = x.gendate)
  ORDER BY x.gendate
)
SELECT array_to_json(array_agg(continuous_tx ),'t')
FROM continuous_tx;
</snippet></ROW><ROW><id>14927570</id><snippet>import numpy
from matplotlib import pyplot
import random



N = 10000
aa = numpy.linspace(2, 4, N)
xx = numpy.zeros(N)
for jj in range(N):
    a = aa[jj]
    x0 = random.random()
    for ii in range(1, 100):
        xx[jj] = a *x0 *(1 -x0)

pyplot.plot(aa, xx, '.')
pyplot.show()
</snippet></ROW><ROW><id>14927690</id><snippet>gmpy2.f_divmod()</snippet></ROW><ROW><id>14927690</id><snippet>gmpy2.c_divmod()</snippet></ROW><ROW><id>14927690</id><snippet>gmpy2.t_divmod()</snippet></ROW><ROW><id>14927690</id><snippet>gmpy2.divmod()</snippet></ROW><ROW><id>14927690</id><snippet>divmod()</snippet></ROW><ROW><id>14927690</id><snippet>(a // b, a % b)</snippet></ROW><ROW><id>14927690</id><snippet>//</snippet></ROW><ROW><id>14927690</id><snippet>/</snippet></ROW><ROW><id>14927690</id><snippet>//</snippet></ROW><ROW><id>14928067</id><snippet>isspace()</snippet></ROW><ROW><id>14928067</id><snippet>&gt;&gt;&gt; "   ".isspace()
True
&gt;&gt;&gt; " x  ".isspace()
False
</snippet></ROW><ROW><id>14928067</id><snippet>if not s.strip():
    print "It was all whitespace!"
</snippet></ROW><ROW><id>14928107</id><snippet># drawing stars
for star in stars:
    draw_star(star)

screen.fill((0,0,0))

pygame.display.flip()
</snippet></ROW><ROW><id>14928107</id><snippet>screen.fill((0,0,0))

# drawing stars
for star in stars:
    draw_star(star)



pygame.display.flip()
</snippet></ROW><ROW><id>14928206</id><snippet>&gt;&gt;&gt; f1 = 0.7 + 0.2 + 0.1
&gt;&gt;&gt; f2 = 0.1 + 0.2 + 0.7
&gt;&gt;&gt; f1 == f2
False
&gt;&gt;&gt; round(f1,2) == round(f2,2)
True
</snippet></ROW><ROW><id>14928219</id><snippet>tokenize</snippet></ROW><ROW><id>14928219</id><snippet>keyword</snippet></ROW><ROW><id>14928310</id><snippet>scipy.spatial.distance.cdist</snippet></ROW><ROW><id>14928310</id><snippet>import numpy as np
from scipy.spatial.distance import cdist
# start year to stop year
years = range(2003,2013)
# this will yield an n_years X n_features array
features = np.array([np.loadtxt('/Datafiles/%s.txt' % year) for year in years])
# compute the euclidean distance from each year to every other year
distance_matrix = cdist(features,features,metric = 'euclidean')
</snippet></ROW><ROW><id>14928310</id><snippet>(m,n)</snippet></ROW><ROW><id>14928445</id><snippet>upsert</snippet></ROW><ROW><id>14928445</id><snippet>multi</snippet></ROW><ROW><id>14928445</id><snippet>Collection.update</snippet></ROW><ROW><id>14928445</id><snippet>upsert</snippet></ROW><ROW><id>14928445</id><snippet>manipulate</snippet></ROW><ROW><id>14928445</id><snippet>update</snippet></ROW><ROW><id>14928445</id><snippet>upsert=False</snippet></ROW><ROW><id>14928445</id><snippet>multi=True</snippet></ROW><ROW><id>14928445</id><snippet>db.users.update({}, { "$unset": { "assignments": 1 } }, upsert=False, multi=True)
</snippet></ROW><ROW><id>14928585</id><snippet>difflib</snippet></ROW><ROW><id>14928585</id><snippet>difflib</snippet></ROW><ROW><id>14928585</id><snippet>import difflib

bart_stations = ['Lake Merritt', 'Daly City', 'Fruitvale', 'Coliseum/Oakland Airport',
                 'San Leandro']

while True:
    text = raw_input('Enter BART station: ')
    if not text: break  # Pressing Enter quits
    guess = difflib.get_close_matches(text, bart_stations, n=1, cutoff=0)[0]
    print('Closest match: {g}'.format(g = guess))
</snippet></ROW><ROW><id>14928585</id><snippet>% test.py
Enter BART station: Merit
Closest match: Lake Merritt
Enter BART station: Fruity
Closest match: Fruitvale
Enter BART station: Coli
Closest match: Daly City
Enter BART station: Col
Closest match: Coliseum/Oakland Airport
Enter BART station: Lean
Closest match: San Leandro
Enter BART station: 
</snippet></ROW><ROW><id>14928808</id><snippet>w=0</snippet></ROW><ROW><id>14928808</id><snippet>insert</snippet></ROW><ROW><id>14928828</id><snippet>a{10,}</snippet></ROW><ROW><id>14928828</id><snippet>a</snippet></ROW><ROW><id>14928828</id><snippet>a{10,20}</snippet></ROW><ROW><id>14928828</id><snippet>a</snippet></ROW><ROW><id>14928848</id><snippet>_root</snippet></ROW><ROW><id>14928848</id><snippet>Canvas</snippet></ROW><ROW><id>14928848</id><snippet>&gt;&gt;&gt; import Tkinter as tk
&gt;&gt;&gt; a = tk.Canvas()
&gt;&gt;&gt; print a._root
&lt;bound method Canvas._root of &lt;Tkinter.Canvas instance at 0xee1c0&gt;&gt;
</snippet></ROW><ROW><id>14928848</id><snippet>_root</snippet></ROW><ROW><id>14928848</id><snippet>Canvas</snippet></ROW><ROW><id>14928848</id><snippet>class MapDrawer(Canvas):
    NODE_RADIUS = 20

    def __init__(self, master):
        Canvas.__init__(self, master)
        self._root = master
</snippet></ROW><ROW><id>14928848</id><snippet>master</snippet></ROW><ROW><id>14928848</id><snippet>Frame</snippet></ROW><ROW><id>14928899</id><snippet>with</snippet></ROW><ROW><id>14928899</id><snippet>for</snippet></ROW><ROW><id>14928899</id><snippet>with open("./out.txt", "w+") as out:
    for line in open("./int.txt", "r"):
        for key in dic.keys():
            if key in line:
                line = re.sub(key, dic[key], line)
        print line,
        out.write(line)
</snippet></ROW><ROW><id>14928899</id><snippet>.readlines()</snippet></ROW><ROW><id>14928899</id><snippet>if key in line:</snippet></ROW><ROW><id>14928899</id><snippet>key</snippet></ROW><ROW><id>14928899</id><snippet>line</snippet></ROW><ROW><id>14928899</id><snippet>print line,</snippet></ROW><ROW><id>14928899</id><snippet>line</snippet></ROW><ROW><id>14928899</id><snippet>line = line.replace(key, dic[key])</snippet></ROW><ROW><id>14928899</id><snippet>line</snippet></ROW><ROW><id>14929005</id><snippet>LabelsData</snippet></ROW><ROW><id>14929005</id><snippet>LabelsData</snippet></ROW><ROW><id>14929005</id><snippet>  from json import dumps
  from sqlalchemy.orm import class_mapper

  def serialize(model):
    """Transforms a model into a dictionary which can be dumped to JSON."""
    # first we get the names of all the columns on your model
    columns = [c.key for c in class_mapper(model.__class__).columns]
    # then we return their values in a dict
    return dict((c, getattr(model, c)) for c in columns)

  # we can then use this for your particular example
  serialized_labels = [
    serialize(label)
    for label in session.query(LabelsData).filter(LabelsData.deleted == False)
  ]
  your_json = dump(serialized_labels)
</snippet></ROW><ROW><id>14929037</id><snippet>&gt;&gt;&gt; struct.pack('!L4sL4s', field1, socket.inet_aton(field2),
                           field3, socket.inet_aton(field4))
'\x00\x00\x00\x01\xff\xff\xff\x00\x00\x00\x00\x14\xc0\xa8\x00\x01'
</snippet></ROW><ROW><id>14929133</id><snippet>attr_a = {}</snippet></ROW><ROW><id>14929133</id><snippet>a={}</snippet></ROW><ROW><id>14929133</id><snippet>a</snippet></ROW><ROW><id>14929133</id><snippet>attr_a</snippet></ROW><ROW><id>14929133</id><snippet>a=None</snippet></ROW><ROW><id>14929133</id><snippet>__init__</snippet></ROW><ROW><id>14929133</id><snippet>def __init__(self, a=None):
        self.attr_a = a or {}
</snippet></ROW><ROW><id>14929135</id><snippet>list</snippet></ROW><ROW><id>14929135</id><snippet>tuple</snippet></ROW><ROW><id>14929135</id><snippet>&gt;&gt;&gt; lists = [[[1,2],[3,4],[6,7]],[[3,4],[5,9],[8,3],[4,2]],[[3,4],[9,9]]]
&gt;&gt;&gt; sets = [set(tuple(x) for x in y) for y in lists]
&gt;&gt;&gt; set.intersection(*sets)
set([(3, 4)])
</snippet></ROW><ROW><id>14929135</id><snippet>[list(x) for x in set.intersection(*sets)]
</snippet></ROW><ROW><id>14929135</id><snippet>first</snippet></ROW><ROW><id>14929135</id><snippet>lists[0]</snippet></ROW><ROW><id>14929135</id><snippet>#... Stuff as before
intersection = set.intersection(*sets)
reference_to_first = next( (x for x in lists[0] if tuple(x) in intersection), None ) 
</snippet></ROW><ROW><id>14929135</id><snippet>None</snippet></ROW><ROW><id>14929161</id><snippet>https://www.googleapis.com/drive/v2/files?q='0B7Gsb83y7LCsMHUweWFRUTlBeEU'+in+parents&amp;key={YOUR_API_KEY}
</snippet></ROW><ROW><id>14929161</id><snippet>https://www.googleapis.com/drive/v2/files?q='0B7Gsb83y7LCsMHUweWFRUTlBeEU'+in+parents&amp;fields=items%2Fdescription&amp;key={YOUR_API_KEY}
</snippet></ROW><ROW><id>14929387</id><snippet>sys.exit</snippet></ROW><ROW><id>14929387</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.my_exit = sys.exit
&gt;&gt;&gt; def func(status):
...     if status:
...        print "Fatal!"
...     sys.my_exit(status)
... 
&gt;&gt;&gt; sys.exit = func
&gt;&gt;&gt; sys.exit(1)
Fatal!
</snippet></ROW><ROW><id>14929387</id><snippet>sys.exit</snippet></ROW><ROW><id>14929387</id><snippet>import sys
def main():
    pass
    sys.exit(2) #comment this out, or change the exit status to 0 to test.

try:
    main()
except SystemExit as e:
    if e.args[0]:  #non-zero exit status
        print "Failed"
    else:
        print "Success"
    raise
else:
    print "Success"
</snippet></ROW><ROW><id>14929410</id><snippet>&gt;&gt;&gt; def f():
...  print "Worker"
...
&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               1 ('Worker')
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
</snippet></ROW><ROW><id>14929410</id><snippet>&gt;&gt;&gt; def g():
...  print "Worker", "Hello"
...
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_CONST               1 ('Worker')
              3 PRINT_ITEM
              4 LOAD_CONST               2 ('Hello')
              7 PRINT_ITEM
              8 PRINT_NEWLINE
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE
</snippet></ROW><ROW><id>14929410</id><snippet>def PRINT_ITEM(f, item):
    if f.softspace:
        f.write(' ')
    f.write(str(item))
    f.softspace = True

def PRINT_NEWLINE(f):
    f.write('\n')
    f.softspace = False
</snippet></ROW><ROW><id>14929419</id><snippet>row</snippet></ROW><ROW><id>14929419</id><snippet>if "Date range" in row:
</snippet></ROW><ROW><id>14929419</id><snippet>if "Date range" in row[0]:
</snippet></ROW><ROW><id>14929419</id><snippet>if row[0][0:].find('OPSURVEYLEVEL') == 0:
    break
</snippet></ROW><ROW><id>14929419</id><snippet>for</snippet></ROW><ROW><id>14929419</id><snippet>while</snippet></ROW><ROW><id>14929419</id><snippet>if</snippet></ROW><ROW><id>14929419</id><snippet>while</snippet></ROW><ROW><id>14929419</id><snippet>if</snippet></ROW><ROW><id>14929419</id><snippet>    for row in reader:
        if foo &lt; 1: 
            if row[0][0:].find('OPSURVEYLEVEL') == 0:
                foo = 1
            if "Date range" in row[0]:  # Changed this line
                print("found report date")
                report_date = row[0][-8:]
        else:
            print(row)
            if row[0][0:].find('OPSURVEYLEVEL') == 0:
                break
            if 'ops2' in prime_column:
                dup_col = row[0]
                row.insert(0,dup_col)
                row.append(report_date)
            elif 'ops3' in prime_column:
                row.append(report_date)
            with open('report_merge.csv', 'a') as outfile:
                outfile.write(','.join(row)+'\n')
</snippet></ROW><ROW><id>14929582</id><snippet>lines = [line.strip() for line in open('file.txt')]
nlines=[]
for line in lines:
    if 3 not in map(int,line.split()) and 4 not in map(int,line.split()): nlines.append(line)
for x in nlines:
    y=x.split()
    y=y[1::2]
    print ' '.join(y)
</snippet></ROW><ROW><id>14929582</id><snippet>3 4 5 6 7 12 34 56
2 5 6 7 8 11 10 7
4 5 6 7 8 44 55 12
33 66 88 99 79 1 2 5
</snippet></ROW><ROW><id>14929582</id><snippet>5 7 11 7
66 99 1 5
</snippet></ROW><ROW><id>14930034</id><snippet>pymacs-call</snippet></ROW><ROW><id>14930034</id><snippet>(funcall matcher "PATTERN123")</snippet></ROW><ROW><id>14930174</id><snippet>synchronize_session</snippet></ROW><ROW><id>14930174</id><snippet>"fetch"</snippet></ROW><ROW><id>14930174</id><snippet>False</snippet></ROW><ROW><id>14930174</id><snippet>session</snippet></ROW><ROW><id>14930174</id><snippet>Artist</snippet></ROW><ROW><id>14930174</id><snippet>in_(query.all())</snippet></ROW><ROW><id>14930174</id><snippet>in_(query)</snippet></ROW><ROW><id>14930632</id><snippet>AWS_ACCESS_KEY_ID</snippet></ROW><ROW><id>14930632</id><snippet>AWS_SECRET_ACCESS_KEY</snippet></ROW><ROW><id>14930632</id><snippet>setenv</snippet></ROW><ROW><id>14930632</id><snippet>MRJOB_CONF</snippet></ROW><ROW><id>14930632</id><snippet>aws_access_key_id = XXXX
aws_secret_access_key = YYYY
</snippet></ROW><ROW><id>14930907</id><snippet>TestSomething</snippet></ROW><ROW><id>14930907</id><snippet>Test</snippet></ROW><ROW><id>14930907</id><snippet>nose</snippet></ROW><ROW><id>14930907</id><snippet>nose</snippet></ROW><ROW><id>14930907</id><snippet>TestCase</snippet></ROW><ROW><id>14930907</id><snippet>class Something(unittest.TestCase):
    ...
</snippet></ROW><ROW><id>14930907</id><snippet>TestCase</snippet></ROW><ROW><id>14930907</id><snippet>class Something(object):
    def test_x(self):
        # here the various assertEqual etc. do not resolve, but you can use them
        # as if they were present, since in real test-cases they will be inherited
        # from unittest.TestCase.
        ...
    ...

class TestCase1(unittest.TestCase, Something):
    def setUp(self):
        ...
</snippet></ROW><ROW><id>14930907</id><snippet>__test__</snippet></ROW><ROW><id>14930907</id><snippet>False</snippet></ROW><ROW><id>14930907</id><snippet>class TestSomething(unittest.TestCase):
    __test__ = False
    def test_x(self):
        ...


class TestCase1(TestSomething):
    __test__ = True  #must put this
    def setUp(self):
        ...
</snippet></ROW><ROW><id>14930907</id><snippet>nose.istest</snippet></ROW><ROW><id>14930907</id><snippet>nose.nottest</snippet></ROW><ROW><id>14930907</id><snippet>@tools.nottest
class TestSomething(unittest.TestCase):
    def test_x(self):
        ...

@tools.istest
class TestCase1(TestSomething):
    sef setUp(self):
        ...
</snippet></ROW><ROW><id>14931110</id><snippet>c = getattr(dictRef, 'two')
</snippet></ROW><ROW><id>14931128</id><snippet>import requests
from requests.auth import HTTPProxyAuth

proxy = {'http': 'http://my.proxy:8080'}
auth = HTTPProxyAuth('username', 'password')
r = requests.get('http://wwww.google.com/', proxies=proxy, auth=auth)
print r.text
</snippet></ROW><ROW><id>14931128</id><snippet>s = requests.Session(proxies=proxy, auth=auth)
r = s.get('http://www.google.com/')
print r.text
</snippet></ROW><ROW><id>14931150</id><snippet>lookups</snippet></ROW><ROW><id>14931150</id><snippet>queryset</snippet></ROW><ROW><id>14931150</id><snippet>self.value()</snippet></ROW><ROW><id>14931150</id><snippet>if</snippet></ROW><ROW><id>14931443</id><snippet>diagnostic_filter</snippet></ROW><ROW><id>14931443</id><snippet>DiagnosticFilter</snippet></ROW><ROW><id>14931443</id><snippet>diagnostic_filter.FALSE</snippet></ROW><ROW><id>14931443</id><snippet>None</snippet></ROW><ROW><id>14931443</id><snippet>diagnostic_filter</snippet></ROW><ROW><id>14931514</id><snippet>def read_config_file():
    config = ConfigParser.ConfigParser()
    cnf_path = 'config_files/php.sr'
    config.read(cnf_path)
    if config.has_section('basic'):
        if config.has_option('basic', 'basic'):
            php_bsc_mdls = config.get('basic', 'basic').split(',')
    if config.has_section('advance'):
        if config.has_option('advance','advance'):
            php_adv_mdls = config.get('advance', 'advance').split(',')

    if php_bsc_mdls and php_adv_bls:
        return php_bsc_mdls,php_adv_mdls
    elif php_bsc_mdls:
        return php_bsc_mdls, None
</snippet></ROW><ROW><id>14931514</id><snippet>def read_config_file():
    php_bsc_mdls = None
    php_adv_mdls = None
    config = ConfigParser.ConfigParser()
    cnf_path = 'config_files/php.sr'
    config.read(cnf_path)
    if config.has_section('basic'):
        if config.has_option('basic', 'basic'):
            php_bsc_mdls = config.get('basic', 'basic').split(',')
    if config.has_section('advance'):
        if config.has_option('advance','advance'):
            php_adv_mdls = config.get('advance', 'advance').split(',')

    return php_bsc_mdls, php_adv_mdls
</snippet></ROW><ROW><id>14931693</id><snippet>import re

_pat_student_parser = re.compile(r'((?P&lt;id&gt;\d{4})(?P&lt;name&gt;\w{4}))')

def nested_dict_from_text(text):
    m = re.search(_pat_student_parser, text)
    if not m:
        raise ValueError
    d = m.groupdict()
    return { "student": d }

result = nested_dict_from_text('1234STUD')
print(result)
</snippet></ROW><ROW><id>14931808</id><snippet>itertools.product</snippet></ROW><ROW><id>14931808</id><snippet>import itertools
lst = list(itertools.product([0, 1], repeat=3))
</snippet></ROW><ROW><id>14931808</id><snippet>repeat</snippet></ROW><ROW><id>14931808</id><snippet>n = 3
lst = list(itertools.product([0, 1], repeat=n))
</snippet></ROW><ROW><id>14931808</id><snippet>map</snippet></ROW><ROW><id>14931808</id><snippet>lst = map(list, itertools.product([0, 1], repeat=n))
</snippet></ROW><ROW><id>14931808</id><snippet>lst = list(map(list, itertools.product([0, 1], repeat=n)))
# OR
lst = [list(i) for i in itertools.product([0, 1], repeat=n)]
</snippet></ROW><ROW><id>14931808</id><snippet>map</snippet></ROW><ROW><id>14931808</id><snippet>itertools.product</snippet></ROW><ROW><id>14932116</id><snippet>fabric.operations.run()</snippet></ROW><ROW><id>14932116</id><snippet>from fabric.operations import run

oracle_path = run('echo $ORACLE_PATH', shell=True)

with settings(host_string = 'user@server.com'):
    get(os.path.join(oracle_path, 'network/admin/tnsnames.ora'))
</snippet></ROW><ROW><id>14932230</id><snippet>u</snippet></ROW><ROW><id>14932230</id><snippet>str()</snippet></ROW><ROW><id>14932230</id><snippet>end_rowx=1</snippet></ROW><ROW><id>14932230</id><snippet>ids = sh.col_values(0, start_rowx=1)
english = sh.col_values(1, start_rowx=1)
spanish = sh.col_values(2, start_rowx=1)
french = sh.col_values(3, start_rowx=1)
</snippet></ROW><ROW><id>14932230</id><snippet>zip</snippet></ROW><ROW><id>14932230</id><snippet>english_with_IDS = zip(ids, english)
spanish_with_IDS = zip(ids, spanish)
french_with_IDS = zip(ids, french)
</snippet></ROW><ROW><id>14932230</id><snippet>("1", "Hello"),("2", "Hi"), ("3", "Bus")
</snippet></ROW><ROW><id>14932230</id><snippet>for id, word in english_with_IDS:
       print id + "=" + word
</snippet></ROW><ROW><id>14932230</id><snippet>col_values</snippet></ROW><ROW><id>14932230</id><snippet>sh.cell_value(rowx, cellx)</snippet></ROW><ROW><id>14932607</id><snippet>'{0:.{1}%}'.format(value, digits)
</snippet></ROW><ROW><id>14932607</id><snippet>&gt;&gt; '{0:.{1}%}'.format(0.1565, 0)
'16%'
&gt;&gt; '{0:.{1}%}'.format(0.1565, 2)
'15.65%'
</snippet></ROW><ROW><id>14932927</id><snippet>import wx
class ExampleFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent)

        self.panel = wx.Panel(self)     
        self.quote = wx.StaticText(self.panel, label="Your quote:")
        self.result = wx.StaticText(self.panel, label="")
        self.result.SetForegroundColour(wx.RED)
        self.button = wx.Button(self.panel, label="Save")
        self.lblname = wx.StaticText(self.panel, label="Your name:")
        self.editname = wx.TextCtrl(self.panel, size=(140, -1))

        # Set sizer for the frame, so we can change frame size to match widgets
        self.windowSizer = wx.BoxSizer()
        self.windowSizer.Add(self.panel, 1, wx.ALL | wx.EXPAND)        

        # Set sizer for the panel content
        self.sizer = wx.GridBagSizer(5, 5)
        self.sizer.Add(self.quote, (0, 0))
        self.sizer.Add(self.result, (0, 1))
        self.sizer.Add(self.lblname, (1, 0))
        self.sizer.Add(self.editname, (1, 1))
        self.sizer.Add(self.button, (2, 0), (1, 2), flag=wx.EXPAND)

        # Set simple sizer for a nice border
        self.border = wx.BoxSizer()
        self.border.Add(self.sizer, 1, wx.ALL | wx.EXPAND, 5)

        # Use the sizers
        self.panel.SetSizerAndFit(self.border)  
        self.SetSizerAndFit(self.windowSizer)  

        # Set event handlers
        self.button.Bind(wx.EVT_BUTTON, self.OnButton)

    def OnButton(self, e):
        self.result.SetLabel(self.editname.GetValue())

app = wx.App(False)
frame = ExampleFrame(None)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>14932946</id><snippet>def cmdB():
     pass

def cmdC():
    pass


def cmdA():
    # start recording information
    print "recording started"
    #run cmdB
    cmdB()
    # run cmdC
    cmdC()
    # stop recording
    print "recording stopped"

if __name__ == '__main__':
    cmdA() 
</snippet></ROW><ROW><id>14933025</id><snippet>print</snippet></ROW><ROW><id>14933025</id><snippet>print</snippet></ROW><ROW><id>14933025</id><snippet>Python 3</snippet></ROW><ROW><id>14933025</id><snippet>Python 2</snippet></ROW><ROW><id>14933025</id><snippet>statement</snippet></ROW><ROW><id>14933025</id><snippet>print(s[0])
</snippet></ROW><ROW><id>14933359</id><snippet>combo.set_active(int) # 1st item is 0, 2nd is 1 and such.
</snippet></ROW><ROW><id>14933652</id><snippet>class Animal:
    def __unicode__(self):
        return 'animal'

class Dog(Animal):
    def __unicode__(self):
        return 'this %s is a dog' % Animal.__unicode__(self)
</snippet></ROW><ROW><id>14933652</id><snippet>class Animal(object):
    def __unicode__(self):
        return 'animal'

class Dog(Animal):
    def __unicode__(self):
        return 'this %s is a dog' % super(Dog, self).__unicode__()
</snippet></ROW><ROW><id>14933652</id><snippet>super()</snippet></ROW><ROW><id>14933711</id><snippet>con.executemany("insert into stats(date, temperature) values (?, ?)",
                ((rec[0], rec[9]) for rec in stats))
</snippet></ROW><ROW><id>14933826</id><snippet>hist</snippet></ROW><ROW><id>14933826</id><snippet>matplotlib.pyplot.hist</snippet></ROW><ROW><id>14933826</id><snippet>numpy.histogram</snippet></ROW><ROW><id>14933826</id><snippet>scipy.stats</snippet></ROW><ROW><id>14933826</id><snippet>scipy.stats.norm.fit</snippet></ROW><ROW><id>14933826</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
linalg = np.linalg

N = 100
mean = [1,1]
cov = [[0.3, 0.2],[0.2, 0.2]]
data = np.random.multivariate_normal(mean, cov, N)
L = linalg.cholesky(cov)
# print(L.shape)
# (2, 2)
uncorrelated = np.random.standard_normal((2,N))
data2 = np.dot(L,uncorrelated) + np.array(mean).reshape(2,1)
# print(data2.shape)
# (2, 1000)
plt.figure()
plt.scatter(data2[0,:], data2[1,:], c='green')    
plt.scatter(data[:,0], data[:,1], c='yellow')
plt.show()

# Plotting histograms and fitting normal distributions
plt.subplot(211)
plt.hist(data[:,0], bins=20, normed=1, alpha=0.5, color='green')
plt.hist(data2[0,:], bins=20, normed=1, alpha=0.5, color='yellow')
x = np.arange(-1, 3, 0.001)
plt.plot(x, norm.pdf(x, *norm.fit(data[:,0])), color='green')
plt.plot(x, norm.pdf(x, *norm.fit(data2[0,:])), color='yellow')
plt.title('Var 1')

plt.subplot(212)
plt.hist(data[:,1], bins=20, normed=1, alpha=0.5, color='green')
plt.hist(data2[1,:], bins=20, normed=1, alpha=0.5, color='yellow')
x = np.arange(-1, 3, 0.001)
plt.plot(x, norm.pdf(x, *norm.fit(data[:,1])), color='green')
plt.plot(x, norm.pdf(x, *norm.fit(data2[1,:])), color='yellow')
plt.title('Var 2')

plt.tight_layout()
</snippet></ROW><ROW><id>14933877</id><snippet>class Entity(Models):
    NORMAL, LARGE, SMALL = 0, 1, 2
    ETYPE = (
        (NORMAL, 'Normal'),
        (LARGE, 'Large'),
        (SMALL, 'Small'),
    )
    entity_type = IntegerField(choices=ETYPE,...)

    name = CharField()
    size = FloatField()
    smalltype = ForeignKey(SmallEntityType)
    ...
</snippet></ROW><ROW><id>14934087</id><snippet>&gt;&gt;&gt; BaseHandler()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class BaseHandler with abstract methods start
</snippet></ROW><ROW><id>14934087</id><snippet>all_plugins[plugin.__name__] = plugin
</snippet></ROW><ROW><id>14934087</id><snippet>__class__</snippet></ROW><ROW><id>14934087</id><snippet>BaseHandler</snippet></ROW><ROW><id>14934087</id><snippet>plugin</snippet></ROW><ROW><id>14934322</id><snippet>from copy import copy

def multidict(*args):
    if len(args) == 1:
        return copy(args[0])
    out = {}
    for x in args[0]:
        out[x] = multidict(*args[1:])
    return out

print multidict(['a', 'b'], ['A', 'B'], ['1', '2'], {})
</snippet></ROW><ROW><id>14934500</id><snippet>__doc__</snippet></ROW><ROW><id>14934500</id><snippet>dir()</snippet></ROW><ROW><id>14934500</id><snippet>gnupg</snippet></ROW><ROW><id>14934500</id><snippet>&gt;&gt;&gt; import gnupg
&gt;&gt;&gt; dir(gnupg)
['Crypt', 'DeleteResult', 'GPG', 'GenKey', ...
&gt;&gt;&gt; gnupg.Crypt.__doc__
'Handle status messages for --encrypt and --decrypt'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14934500</id><snippet>dir()</snippet></ROW><ROW><id>14934500</id><snippet>__doc__</snippet></ROW><ROW><id>14934506</id><snippet>[basic]
basic:
    bz2
    calendar
    Core
    ctype
    curl
    date
    dom
    ereg
    exif
    fileinfo
    filter
    ftp
    gd
    gettext
    gmp
    mhash
    mysql
    mysqli
    openssl
    pcntl
    pcre
    PDO
    pdo_mysql
    pdo_sqlite
    Phar
    readline
</snippet></ROW><ROW><id>14934506</id><snippet>config = ConfigParser.ConfigParser()
config.read('config.sr')
basic_list = config.get('basic', 'basic').split('\n')
</snippet></ROW><ROW><id>14934506</id><snippet>config.sr</snippet></ROW><ROW><id>14934506</id><snippet>[basic]
basic:
    bz2
    calendar
    Core
    ctype
    curl
    date
    dom
    ereg
    exif
    fileinfo
    filter
    ftp
    gd
    gettext
    gmp
    mhash
    mysql
    mysqli
    openssl
    pcntl
    pcre
    PDO
    pdo_mysql
    pdo_sqlite
    Phar
    readline

[advanced]
advanced:
    a
    b
    c
    d
    e
</snippet></ROW><ROW><id>14934506</id><snippet>q_14934291.py</snippet></ROW><ROW><id>14934506</id><snippet>import ConfigParser

config = ConfigParser.ConfigParser()
config.read('config.sr')

basic_list = config.get('basic', 'basic').split('\n')
print('Basic list:')
print(basic_list)

advanced_list = config.get('advanced', 'advanced').split('\n')
print('\n\nAdvanced list:')
print(advanced_list)
</snippet></ROW><ROW><id>14934506</id><snippet>Basic list:
['', 'bz2', 'calendar', 'Core', 'ctype', 'curl', 'date', 'dom', 'ereg', 'exif', 'fileinfo', 'filter', 'ftp', 'gd', 'gettext', 'gmp', 'mhash', 'mysql', 'mysqli', 'openssl', 'pcntl', 'pcre', 'PDO', 'pdo_mysql', 'pdo_sqlite', 'Phar', 'readline']


Advanced list:
['', 'a', 'b', 'c', 'd', 'e']
</snippet></ROW><ROW><id>14934506</id><snippet>.split('\n')</snippet></ROW><ROW><id>14934506</id><snippet>strip</snippet></ROW><ROW><id>14934506</id><snippet>basic_list = config.get('basic', 'basic').strip().split('\n')
</snippet></ROW><ROW><id>14935674</id><snippet>^Copied file (.+?Application Folder)
</snippet></ROW><ROW><id>14935674</id><snippet>^                   : begining of string
Copied file         : litteral
(                   : start grouping
.+?                 : Any char one or more times non greedy
Application Folder  : litteral
)                   : end grouping
</snippet></ROW><ROW><id>14935734</id><snippet>dict()</snippet></ROW><ROW><id>14935734</id><snippet>render_to_response</snippet></ROW><ROW><id>14935734</id><snippet>dict()</snippet></ROW><ROW><id>14935734</id><snippet>render_to_response("forum/list.html", {"forums":forums, "user":request.user})
</snippet></ROW><ROW><id>14935734</id><snippet>add_csrf</snippet></ROW><ROW><id>14935734</id><snippet>render_to_response</snippet></ROW><ROW><id>14935778</id><snippet>Package submission</snippet></ROW><ROW><id>14935778</id><snippet>http://pypi.python.org/pypi?%3Aaction=submit_form</snippet></ROW><ROW><id>14935778</id><snippet>.egg</snippet></ROW><ROW><id>14935778</id><snippet>.zip</snippet></ROW><ROW><id>14935778</id><snippet>EGG-INFO</snippet></ROW><ROW><id>14935778</id><snippet>PKG-INFO</snippet></ROW><ROW><id>14935778</id><snippet>setup.py register</snippet></ROW><ROW><id>14935778</id><snippet>files</snippet></ROW><ROW><id>14935808</id><snippet>form.is_valid()</snippet></ROW><ROW><id>14935819</id><snippet>from werkzeug.local import Local
myLocals = Local()
</snippet></ROW><ROW><id>14935819</id><snippet>from Z import myLocals
myLocals.C = "C"
</snippet></ROW><ROW><id>14935819</id><snippet>from Z import myLocals
C = getattr(myLocals, "C", None)
</snippet></ROW><ROW><id>14935857</id><snippet>self.get_valid_token()</snippet></ROW><ROW><id>14935857</id><snippet>request</snippet></ROW><ROW><id>14935857</id><snippet>self.request</snippet></ROW><ROW><id>14935903</id><snippet>example</snippet></ROW><ROW><id>14935903</id><snippet>oauth2</snippet></ROW><ROW><id>14936040</id><snippet>from itertools import izip
with open('data.txt', 'r') as f:
    for line1, line2 in izip(*(iter(f),) * 2):
        print line1, line2
</snippet></ROW><ROW><id>14936051</id><snippet>&gt;&gt;&gt; l = range(1,6)
&gt;&gt;&gt; x = 3
&gt;&gt;&gt; def f(e):
        return e%2 == 0
&gt;&gt;&gt; [l[i:i+x] for i, j in enumerate(l) if f(j)]
[[2, 3, 4], [4, 5]]
</snippet></ROW><ROW><id>14936139</id><snippet>str.format()</snippet></ROW><ROW><id>14936139</id><snippet>list</snippet></ROW><ROW><id>14936139</id><snippet>tuple</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; ', '.join(['{1}:{0}'.format(*line.split()) for line in result_lines])
'age1:name1, age2:name2, age3:name3'
</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; [line for line in result_lines]
['name1 age1 address1 email1', 'name2 age2 address2 email2', 'name3 age3 address3 email3']
</snippet></ROW><ROW><id>14936139</id><snippet>str.split()</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; [line.split() for line in result_lines]
[['name1', 'age1', 'address1', 'email1'], ['name2', 'age2', 'address2', 'email2'], ['name3', 'age3', 'address3', 'email3']]
</snippet></ROW><ROW><id>14936139</id><snippet>str.format()</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; ['{0}:{1}:{2}:{3}'.format(*line.split()) for line in result_lines]
['name1:age1:address1:email1', 'name2:age2:address2:email2', 'name3:age3:address3:email3']
</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; ['{1}:{0}'.format(*line.split()) for line in result_lines]
['age1:name1', 'age2:name2', 'age3:name3']
</snippet></ROW><ROW><id>14936139</id><snippet>str.</snippet></ROW><ROW><id>14936139</id><snippet>join</snippet></ROW><ROW><id>14936139</id><snippet>', '</snippet></ROW><ROW><id>14936139</id><snippet>&gt;&gt;&gt; ', '.join(['{1}:{0}'.format(*line.split()) for line in result_lines])
'age1:name1, age2:name2, age3:name3'
</snippet></ROW><ROW><id>14936328</id><snippet>get_context_data</snippet></ROW><ROW><id>14936328</id><snippet>url(r'^(?P&lt;pk&gt;\d+)/$', YourDetailView.as_view(), name='cars-advertisment-detail'),

class YourDetailView(DetailView):
    context_object_name = "advertisment"
    model = Advertisement

    def get_context_data(self, **kwargs):
        """
        This has been overridden to add `car` to the templates context,
        so you can use {{ car }} etc. within the template
        """
        context = super(YourDetailView, self).get_context_data(**kwargs)
        context["car"] = Car.objects.get(registration="DK52 WLG")
        return context
</snippet></ROW><ROW><id>14936808</id><snippet>sys.modules</snippet></ROW><ROW><id>14937704</id><snippet>fmemopen</snippet></ROW><ROW><id>14937704</id><snippet>FILE*</snippet></ROW><ROW><id>14937704</id><snippet>%module test
%include &lt;typemaps.i&gt;

%typemap(in) FILE *sb (PyObject *str=NULL) {
  str = PyObject_CallMethod($input, "getvalue", NULL);
  char *buf = NULL;
  int len = 0;
  PyString_AsStringAndSize(str, &amp;buf, &amp;len);
  $1 = fmemopen(buf, len, "r");
}

%typemap(freearg) FILE *sb {
  if ($1) fclose($1);
  Py_XDECREF(str$argnum);
}

%apply int *OUTPUT { int * i };

%inline %{
  void foo(FILE *sb, int *i) {
    fscanf(sb, "%d", i);
  }
%}
</snippet></ROW><ROW><id>14937704</id><snippet>getvalue</snippet></ROW><ROW><id>14937704</id><snippet>StringIO</snippet></ROW><ROW><id>14937704</id><snippet>FILE*</snippet></ROW><ROW><id>14937704</id><snippet>%apply</snippet></ROW><ROW><id>14937704</id><snippet>int *i</snippet></ROW><ROW><id>14937704</id><snippet>import StringIO
import test

buf=StringIO.StringIO("666")
print test.foo(buf)
</snippet></ROW><ROW><id>14937704</id><snippet>PyFile_AsFile</snippet></ROW><ROW><id>14937704</id><snippet>cStringIO</snippet></ROW><ROW><id>14937704</id><snippet>getvalue</snippet></ROW><ROW><id>14937704</id><snippet>fopencookie</snippet></ROW><ROW><id>14937704</id><snippet>FILE*</snippet></ROW><ROW><id>14937704</id><snippet>cStringIO</snippet></ROW><ROW><id>14938041</id><snippet>Frame</snippet></ROW><ROW><id>14938041</id><snippet>Listbox</snippet></ROW><ROW><id>14938041</id><snippet>Scrollbar</snippet></ROW><ROW><id>14938041</id><snippet>grid()</snippet></ROW><ROW><id>14938041</id><snippet>pack()</snippet></ROW><ROW><id>14938041</id><snippet>class ScrollableListbox(tk.Listbox):
    def __init__(self, master, *arg, **key):
        self.frame = tk.Frame(master)
        self.yscroll = tk.Scrollbar(self.frame, orient=tk.VERTICAL)
        tk.Listbox.__init__(self, self.frame, yscrollcommand=self.yscroll.set, *arg, **key)
        self.yscroll['command'] = self.yview

    def grid(self, *arg, **key):
        self.frame.grid(*arg, **key)
        tk.Listbox.grid(self, row=0, column=0, sticky='nswe')
        self.yscroll.grid(row=0, column=1, sticky='ns')
</snippet></ROW><ROW><id>14938127</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14938127</id><snippet>&gt;&gt;&gt; s = '[{"name":"Tom","adress":"adress1"},{"name":"Mari","adress":"adress2"}]'
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(s)
[{'adress': 'adress1', 'name': 'Tom'}, {'adress': 'adress2', 'name': 'Mari'}]
</snippet></ROW><ROW><id>14938127</id><snippet>json.loads</snippet></ROW><ROW><id>14938127</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads(s)
[{u'adress': u'adress1', u'name': u'Tom'}, {u'adress': u'adress2', u'name': u'Mari'}]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14938326</id><snippet>warnings</snippet></ROW><ROW><id>14938326</id><snippet>import warnings

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    pyfits.writeto(...)
</snippet></ROW><ROW><id>14938326</id><snippet>catch_warnings()</snippet></ROW><ROW><id>14938326</id><snippet>pyfits.writeto()</snippet></ROW><ROW><id>14938326</id><snippet>import warnings
warnings.filterwarnings('ignore', message='Overwriting existing file .*', module='pyfits\.hdu.*')
</snippet></ROW><ROW><id>14938326</id><snippet>Overwriting existing file</snippet></ROW><ROW><id>14938326</id><snippet>pyfits.hdu</snippet></ROW><ROW><id>14938595</id><snippet>cls</snippet></ROW><ROW><id>14938595</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([47, 21, 16, 19, 38])
&gt;&gt;&gt; cls = np.array([0, 0, 1, 0, 1],dtype=bool)
&gt;&gt;&gt; x[cls]
array([16, 38])
&gt;&gt;&gt; x[~cls]
array([47, 21, 19])
</snippet></ROW><ROW><id>14938595</id><snippet>cls</snippet></ROW><ROW><id>14938595</id><snippet>ndarray.astype</snippet></ROW><ROW><id>14938595</id><snippet>&gt;&gt;&gt; cls = np.array([0, 0, 1, 0, 1])
&gt;&gt;&gt; x[cls]  #Not what you want
array([47, 47, 21, 47, 21])
&gt;&gt;&gt; x[cls.astype(bool)]  #what you want.
array([16, 38])
</snippet></ROW><ROW><id>14938595</id><snippet>cls</snippet></ROW><ROW><id>14938595</id><snippet>&gt;&gt;&gt; x[cls == 0]
array([47, 21, 19])
&gt;&gt;&gt; x[cls == 1]
array([16, 38])
</snippet></ROW><ROW><id>14938595</id><snippet>np.unique(cls)</snippet></ROW><ROW><id>14938754</id><snippet>multiprocessing</snippet></ROW><ROW><id>14938754</id><snippet>multiprocessing</snippet></ROW><ROW><id>14938754</id><snippet>Tkinter</snippet></ROW><ROW><id>14938754</id><snippet>logging</snippet></ROW><ROW><id>14938754</id><snippet>Tkinter</snippet></ROW><ROW><id>14938754</id><snippet>Tkinter</snippet></ROW><ROW><id>14938754</id><snippet>PyQt</snippet></ROW><ROW><id>14938754</id><snippet>wxWidgets</snippet></ROW><ROW><id>14938754</id><snippet>subprocess</snippet></ROW><ROW><id>14938754</id><snippet>.join()</snippet></ROW><ROW><id>14938897</id><snippet>pal = models.ManyToManyField('PS', blank=True, null=True)
</snippet></ROW><ROW><id>14939166</id><snippet>cert = crypto.dump_certificate(crypto.FILETYPE_PEM, k)
</snippet></ROW><ROW><id>14939166</id><snippet>pyOpenSSL</snippet></ROW><ROW><id>14939500</id><snippet>MIMEText</snippet></ROW><ROW><id>14939500</id><snippet>MIMENonMultipart</snippet></ROW><ROW><id>14939500</id><snippet>import email.mime, email.mime.nonmultipart, email.charset
m=email.mime.nonmultipart.MIMENonMultipart('text', 'plain', charset='utf-8')

#Construct a new charset which uses Quoted Printables (base64 is default)
cs=email.charset.Charset('utf-8')
cs.body_encoding = email.charset.QP

#Now set the content using the new charset
m.set_payload(u'This is the text containing ünicöde', charset=cs)
</snippet></ROW><ROW><id>14939500</id><snippet>Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: quoted-printable

This is the text containing =C3=BCnic=C3=B6de
</snippet></ROW><ROW><id>14939500</id><snippet>class MIMEUTF8QPText(email.mime.nonmultipart.MIMENonMultipart):
  def __init__(self, payload):
    email.mime.nonmultipart.MIMENonMultipart.__init__(self, 'text', 'plain',
                                                      charset='utf-8')

    utf8qp=email.charset.Charset('utf-8')
    utf8qp.body_encoding=email.charset.QP

    self.set_payload(payload, charset=utf8qp) 
</snippet></ROW><ROW><id>14939500</id><snippet>m = MIMEUTF8QPText(u'This is the text containing ünicöde')
m.as_string()
</snippet></ROW><ROW><id>14939582</id><snippet>build,addr = ver.accept()
</snippet></ROW><ROW><id>14939582</id><snippet>ver.send(version)
</snippet></ROW><ROW><id>14939794</id><snippet>&gt;&gt;&gt; arr1 = range(1,10)
&gt;&gt;&gt; arr2 = range(20,23)
&gt;&gt;&gt; from operator import sub
&gt;&gt;&gt; from itertools import izip, cycle, starmap
&gt;&gt;&gt; list(starmap(sub, izip(arr1, cycle(arr2))))
[-19, -19, -19, -16, -16, -16, -13, -13, -13]
</snippet></ROW><ROW><id>14940026</id><snippet>def sum_digits(n):
    s = 0
    while n:
        s += n % 10
        n /= 10
    return s
</snippet></ROW><ROW><id>14940026</id><snippet>divmod</snippet></ROW><ROW><id>14940026</id><snippet>def sum_digits2(n):
    s = 0
    while n:
        n, remainder = divmod(n, 10)
        s += remainder
    return s
</snippet></ROW><ROW><id>14940026</id><snippet>def sum_digits3(n):
   r = 0
   while n:
       r, n = r + n % 10, n / 10
   return r
</snippet></ROW><ROW><id>14940026</id><snippet>&gt; %timeit sum_digits(n)
1000000 loops, best of 3: 574 ns per loop

&gt; %timeit sum_digits2(n)
1000000 loops, best of 3: 716 ns per loop

&gt; %timeit sum_digits3(n)
1000000 loops, best of 3: 479 ns per loop

&gt; %timeit sum(map(int, str(n)))
1000000 loops, best of 3: 1.42 us per loop

&gt; %timeit sum([int(digit) for digit in str(n)])
100000 loops, best of 3: 1.52 us per loop

&gt; %timeit sum(int(digit) for digit in str(n))
100000 loops, best of 3: 2.04 us per loop
</snippet></ROW><ROW><id>14940189</id><snippet>next_cursor_str</snippet></ROW><ROW><id>14940189</id><snippet>parsed_json</snippet></ROW><ROW><id>14940189</id><snippet>print parsed_json["next_cursor_str"]
# 1395095221152647652
</snippet></ROW><ROW><id>14940374</id><snippet>urllib2</snippet></ROW><ROW><id>14940374</id><snippet>urllib2</snippet></ROW><ROW><id>14940374</id><snippet>HTTPS_PKCS12_*</snippet></ROW><ROW><id>14940374</id><snippet>urllib2</snippet></ROW><ROW><id>14940378</id><snippet>functools.partial()</snippet></ROW><ROW><id>14940378</id><snippet>from functools import partial
map(partial(add_x_to_input, some_value_for_x), myList)
</snippet></ROW><ROW><id>14940378</id><snippet>lambda</snippet></ROW><ROW><id>14940378</id><snippet>map(lambda k: add_x_to_input(some_value_for_x, k), myList)
</snippet></ROW><ROW><id>14940378</id><snippet>def wrapping_function(k):
    return add_x_to_input(some_value_for_x, k)

map(wrapping_function, myList)
</snippet></ROW><ROW><id>14940378</id><snippet>functools.partial()</snippet></ROW><ROW><id>14940378</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; L = range(10)
&gt;&gt;&gt; def foo(a, b): pass
... 
&gt;&gt;&gt; def p(b): return foo(1, b)
... 
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L; from functools import partial; p = partial(foo, 1)')
3.0008959770202637
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L; p = lambda b: foo(1, b)')
3.8707590103149414
&gt;&gt;&gt; timeit.timeit('map(p, L)', 'from __main__ import foo, L, p')
3.9136409759521484
</snippet></ROW><ROW><id>14940509</id><snippet>perl</snippet></ROW><ROW><id>14940509</id><snippet>... | perl -ne 'm/\A(?i)variables\s+/ and m/(\d+)\s*$/ and printf qq|%s\n|, $1 and exit'
</snippet></ROW><ROW><id>14940509</id><snippet>11
</snippet></ROW><ROW><id>14940904</id><snippet>outval = re.sub(r'(?i)item3', .......... )  
</snippet></ROW><ROW><id>14940904</id><snippet>r.sub(fruiting,text)</snippet></ROW><ROW><id>14940904</id><snippet>text = '''
OR 125
BA  48
Pr 12
ba 4
Cherry 147
Ba   10
Or 7
OR 6
Orange 2
AP 9
PR          3
Banana 101
or 22
pR 13
'''
</snippet></ROW><ROW><id>14940904</id><snippet>the_items = ('OR','BA','AP','PR','CH')
new_items = ('Orange','Banana','Apple','Pear','Cherry')
corresp = dict(zip(the_items,new_items))

r = re.compile('(%s) *(\d+)' % '|'.join(the_items),
               re.IGNORECASE)

def fruiting(ma,longname = corresp):
    fresh = '%-12s %s' % (longname[ma.group(1).upper()],
                          ma.group(2) ) 
    tu = ('OLD: %r\n'
          'NEW: %r\n'
          %
          ( ma.group(),fresh) )
    print tu
    return fresh

print '%s%s' % (text, r.sub(fruiting,text))
</snippet></ROW><ROW><id>14940904</id><snippet>OLD: 'OR 125'
NEW: 'Orange       125'

OLD: 'BA  48'
NEW: 'Banana       48'

OLD: 'Pr 12'
NEW: 'Pear         12'

OLD: 'ba 4'
NEW: 'Banana       4'

OLD: 'Ba   10'
NEW: 'Banana       10'

OLD: 'Or 7'
NEW: 'Orange       7'

OLD: 'OR 6'
NEW: 'Orange       6'

OLD: 'AP 9'
NEW: 'Apple        9'

OLD: 'PR          3'
NEW: 'Pear         3'

OLD: 'or 22'
NEW: 'Orange       22'

OLD: 'pR 13'
NEW: 'Pear         13'
</snippet></ROW><ROW><id>14940904</id><snippet>OR 125
BA  48
Pr 12
ba 4
Cherry 147
Ba   10
Or 7
OR 6
Orange 2
AP 9
PR          3
Banana 101
or 22
pR 13

Orange       125
Banana       48
Pear         12
Banana       4
Cherry 147
Banana       10
Orange       7
Orange       6
Orange 2
Apple        9
Pear         3
Banana 101
Orange       22
Pear         13
</snippet></ROW><ROW><id>14940928</id><snippet>set</snippet></ROW><ROW><id>14940928</id><snippet>list</snippet></ROW><ROW><id>14940928</id><snippet>import pandas as pd
df = pd.DataFrame(np.random.randn(100, 4), columns=list('ABCD'))
my_cols = set(df.columns)
my_cols.remove('B')
my_cols.remove('D')
my_cols = list(my_cols)
df2 = df[my_cols]
</snippet></ROW><ROW><id>14941063</id><snippet>.order('name')</snippet></ROW><ROW><id>14941063</id><snippet>q = Institution_Table.all().order('name')
results = q.run()
</snippet></ROW><ROW><id>14941067</id><snippet>In [230]: s = 'Website is: http://www.somesite.com '
In [231]: re.findall('Website is:\s+(\S+)', s)
Out[231]: ['http://www.somesite.com']
</snippet></ROW><ROW><id>14941151</id><snippet>dict1.update((k, dict2[k]) for k in set(dict2).intersection(dict1))
</snippet></ROW><ROW><id>14941151</id><snippet>dict.update()</snippet></ROW><ROW><id>14941151</id><snippet>(key, value)</snippet></ROW><ROW><id>14941151</id><snippet>&gt;&gt;&gt; dict1 = {'foo':'bar', 'ham': 'eggs'}
&gt;&gt;&gt; dict2 = {'ham': 'spam', 'bar': 'baz'}
&gt;&gt;&gt; dict1.update((k, dict2[k]) for k in set(dict2).intersection(dict1))
&gt;&gt;&gt; dict1
{'foo': 'bar', 'ham': 'spam'}
</snippet></ROW><ROW><id>14941151</id><snippet>dict1.update((k, dict2[k]) for k in dict1.viewkeys() &amp; dict2.viewkeys())
</snippet></ROW><ROW><id>14941151</id><snippet>dict1.update((k, dict2[k]) for k in dict1.keys() &amp; dict2.keys())
</snippet></ROW><ROW><id>14941170</id><snippet>&gt;&gt;&gt; df
          A         B         C         D
0  0.424634  1.716633  0.282734  2.086944
1 -1.325816  2.056277  2.583704 -0.776403
2  1.457809 -0.407279 -1.560583 -1.316246
3 -0.757134 -1.321025  1.325853 -2.513373
4  1.366180 -1.265185 -2.184617  0.881514
&gt;&gt;&gt; df.ix[:, 2]
0    0.282734
1    2.583704
2   -1.560583
3    1.325853
4   -2.184617
Name: C
&gt;&gt;&gt; df[df.columns[2]]
0    0.282734
1    2.583704
2   -1.560583
3    1.325853
4   -2.184617
Name: C
</snippet></ROW><ROW><id>14941263</id><snippet> pghash = "md5" + hashlib.md5(password + username).hexdigest()
</snippet></ROW><ROW><id>14941263</id><snippet>ALTER USER</snippet></ROW><ROW><id>14941370</id><snippet>for number in students:
</snippet></ROW><ROW><id>14941370</id><snippet>students</snippet></ROW><ROW><id>14941370</id><snippet>students</snippet></ROW><ROW><id>14941370</id><snippet>for</snippet></ROW><ROW><id>14941370</id><snippet>range</snippet></ROW><ROW><id>14941370</id><snippet>for</snippet></ROW><ROW><id>14941370</id><snippet>for number in range(students):
    # do stuff
</snippet></ROW><ROW><id>14941370</id><snippet>range</snippet></ROW><ROW><id>14941370</id><snippet>&gt;&gt;&gt; range(5)
[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>14941370</id><snippet>for</snippet></ROW><ROW><id>14941370</id><snippet>for number in range(5):

for number in [1, 3, 97, 4, -32768]:
</snippet></ROW><ROW><id>14941370</id><snippet>range</snippet></ROW><ROW><id>14941591</id><snippet>newChaps = sorted(chaps, key=lambda obj: obj.version)
</snippet></ROW><ROW><id>14941684</id><snippet>numpy</snippet></ROW><ROW><id>14941684</id><snippet>bsxfun</snippet></ROW><ROW><id>14941684</id><snippet>&gt;&gt;&gt; a = np.array([1,3,5,7,9])
&gt;&gt;&gt; a - a[:,None]
array([[ 0,  2,  4,  6,  8],
       [-2,  0,  2,  4,  6],
       [-4, -2,  0,  2,  4],
       [-6, -4, -2,  0,  2],
       [-8, -6, -4, -2,  0]])
</snippet></ROW><ROW><id>14941688</id><snippet>fileobj.tell()</snippet></ROW><ROW><id>14941688</id><snippet>fileobj.seek(pos)</snippet></ROW><ROW><id>14941688</id><snippet>for line in fileobject)</snippet></ROW><ROW><id>14941688</id><snippet>next(fileobject)</snippet></ROW><ROW><id>14941688</id><snippet>for line in iter(fileobj.readline, ''):
</snippet></ROW><ROW><id>14941688</id><snippet>fileobj</snippet></ROW><ROW><id>14941717</id><snippet>ndb.IntegerProperty(repeated=True)</snippet></ROW><ROW><id>14941717</id><snippet>newChaps = sorted(chaps, key=lambda obj: obj.version)
</snippet></ROW><ROW><id>14941764</id><snippet>python -t yourscript.py
</snippet></ROW><ROW><id>14941764</id><snippet>calendar</snippet></ROW><ROW><id>14941764</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.weekday(2013,2,18)
0
&gt;&gt;&gt; calendar.day_name[calendar.weekday(2013,2,18)]
'Monday'
</snippet></ROW><ROW><id>14941764</id><snippet>NameError</snippet></ROW><ROW><id>14941764</id><snippet>dayin</snippet></ROW><ROW><id>14941764</id><snippet>dayayin</snippet></ROW><ROW><id>14941996</id><snippet>liNums = xrange(1, 20)
x = 0
line = ""
for i in liNums:
    x+=1
    line += "%s " % i
    if not x%7:
        line += "\n"
#send line to output, here I will just print it
print line
</snippet></ROW><ROW><id>14941996</id><snippet>1 2 3 4 5 6 7 
8 9 10 11 12 13 14 
15 16 17 18 19 
</snippet></ROW><ROW><id>14941999</id><snippet>x, key, y = line.split()
</snippet></ROW><ROW><id>14941999</id><snippet>key == "xyz"</snippet></ROW><ROW><id>14941999</id><snippet>collections.Counter</snippet></ROW><ROW><id>14941999</id><snippet>xyz</snippet></ROW><ROW><id>14941999</id><snippet>from collections import Counter

before = Counter()
after = Counter()

for line in open("log"):
    x, key, y = line.split()
    if key == "xyz":
        # increment counts of x and y in their positions
        before[x] += 1
        after[y] += 1

# print some statistics
print("Before xyz we found:")
for key, val in before.iteritems():
    print("    %s %s" % (key, val))
# do the same for after
</snippet></ROW><ROW><id>14941999</id><snippet>array</snippet></ROW><ROW><id>14942065</id><snippet>difflib</snippet></ROW><ROW><id>14942065</id><snippet>import difflib

datab = ['Pnk Flooyd', 'John Marvulli',
         'Ld Zeppelin', 'John Michael Marvulli',
         'Led Zepelin', 'Beetles', 'Pink Fl',
         'Beatlez', 'Beatles', 'Poonk LLoyds',
         'Pook Loyds']
print datab
print


li = []
s = difflib.SequenceMatcher()

def yield_ratios(s,iterable):
    for x in iterable:
        s.set_seq1(x)
        yield s.ratio()

for text_item in datab:
    s.set_seq2(text_item)
    for gathered in li:
        if any(r&gt;0.45 for r in yield_ratios(s,gathered)):
            gathered.append(text_item)
            break
    else:
        li.append([text_item])


for el in li:
    print el
</snippet></ROW><ROW><id>14942065</id><snippet>['Pnk Flooyd', 'Pink Fl', 'Poonk LLoyds', 'Pook Loyds']
['John Marvulli', 'John Michael Marvulli']
['Ld Zeppelin', 'Led Zepelin']
['Beetles', 'Beatlez', 'Beatles']
</snippet></ROW><ROW><id>14942458</id><snippet>W</snippet></ROW><ROW><id>14942458</id><snippet>Q</snippet></ROW><ROW><id>14942458</id><snippet>np.log(Q)-1</snippet></ROW><ROW><id>14942458</id><snippet>W</snippet></ROW><ROW><id>14942458</id><snippet>W*(np.log(Q)-1)</snippet></ROW><ROW><id>14942458</id><snippet>nnz &gt; 2^31</snippet></ROW><ROW><id>14942486</id><snippet>/opt/django</snippet></ROW><ROW><id>14942486</id><snippet>sys.path</snippet></ROW><ROW><id>14942486</id><snippet>/opt/django/webtools</snippet></ROW><ROW><id>14942504</id><snippet>wrapped = decorated.func_closure[0].cell_contents
</snippet></ROW><ROW><id>14942504</id><snippet>func_closure</snippet></ROW><ROW><id>14942504</id><snippet>functools.wraps()</snippet></ROW><ROW><id>14942504</id><snippet>&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print 'Calling decorated function'
...         return f(*args, **kwds)
...     return wrapper
... 
&gt;&gt;&gt; @my_decorator
... def example():
...     """Docstring"""
...     print 'Called example function'
... 
&gt;&gt;&gt; example
&lt;function example at 0x107ddfaa0&gt;
&gt;&gt;&gt; example.func_closure
(&lt;cell at 0x107de3d70: function object at 0x107dc3b18&gt;,)
&gt;&gt;&gt; example.func_closure[0].cell_contents
&lt;function example at 0x107dc3b18&gt;
&gt;&gt;&gt; example()
Calling decorated function
Called example function
&gt;&gt;&gt; example.func_closure[0].cell_contents()
Called example function
</snippet></ROW><ROW><id>14942504</id><snippet>@render_to</snippet></ROW><ROW><id>14942504</id><snippet>__wrapped__</snippet></ROW><ROW><id>14942504</id><snippet>&gt;&gt;&gt; example.__wrapped__
&lt;function example at 0x103329050&gt;
</snippet></ROW><ROW><id>14942504</id><snippet>def my_decorator(f):
    @wraps(f)
    def wrapper(*args, **kwds):
        # implementation

    wrapper.__wrapped__ = f
    return wrapper
</snippet></ROW><ROW><id>14942576</id><snippet>random</snippet></ROW><ROW><id>14942576</id><snippet>name = random.choice(contents)
</snippet></ROW><ROW><id>14942576</id><snippet>contents</snippet></ROW><ROW><id>14942576</id><snippet>rnd.close()</snippet></ROW><ROW><id>14942576</id><snippet>with open(...) as rnd:</snippet></ROW><ROW><id>14942576</id><snippet>with</snippet></ROW><ROW><id>14942755</id><snippet>echo</snippet></ROW><ROW><id>14942755</id><snippet>osascript</snippet></ROW><ROW><id>14942755</id><snippet>subprocess</snippet></ROW><ROW><id>14942755</id><snippet>import subprocess

subprocess.call(['osascript', '-e', 'tell application "XQuartz" to quit'])
</snippet></ROW><ROW><id>14942755</id><snippet>subprocess</snippet></ROW><ROW><id>14943116</id><snippet>your_list = [('It', 'PPS'), ('says', 'VBZ'), ('that', 'CS'), ('``', '``'), ('in', 'IN'), ('the', 'AT'), ('event', 'NN'), ('Congress', 'NP'), ('does', 'DOZ'), ('provide', 'VB'), ('this', 'DT'), ('increase', 'NN'), ('in', 'IN'), ('federal', 'JJ'), ('funds', 'NNS'), ("''", "''"), (',', ','), ('the', 'AT'), ('State', 'NN-TL'), ('Board', 'NN-TL'), ('of', 'IN-TL'), ('Education', 'NN-TL'), ('should', 'MD'), ('be', 'BE'), ('directed', 'VBN'), ('to', 'TO'), ('``', '``'), ('give', 'VB'), ('priority', 'NN'), ("''", "''"), ('to', 'IN'), ('teacher', 'NN'), ('pay', 'NN'), ('raises', 'NNS'), ('.', '.')]
print ('federal', 'JJ') in your_list
</snippet></ROW><ROW><id>14943116</id><snippet>print " ".join([wordclass for word, wordclass in your_list if word == 'federal'])
</snippet></ROW><ROW><id>14943116</id><snippet>def hasWord(l, word):
    for w, wordclass in l:
        if w == word:
            return True
    return False

def hasTag(l, tag):
    for w, wordclass in l:
        if wordclass == tag:
            return True
    return False

if hasTag(your_list, 'JJ'): print your_list
</snippet></ROW><ROW><id>14943116</id><snippet>for sentence in sentences:
    if ('federal', 'JJ') in sentence:
        print sentence
</snippet></ROW><ROW><id>14943317</id><snippet>class Main(QtGui.QMainWindow):
      def __init__(self):
          self.setAttribute(Qt.WA_TranslucentBackground)
</snippet></ROW><ROW><id>14943593</id><snippet>__init__</snippet></ROW><ROW><id>14943593</id><snippet>self.config</snippet></ROW><ROW><id>14943593</id><snippet>None</snippet></ROW><ROW><id>14943593</id><snippet>_set_derived_options</snippet></ROW><ROW><id>14943593</id><snippet>self.config</snippet></ROW><ROW><id>14943593</id><snippet>t = Template(self.config['target']['cmdline_template'])
</snippet></ROW><ROW><id>14943593</id><snippet>self.config</snippet></ROW><ROW><id>14943593</id><snippet>None</snippet></ROW><ROW><id>14943593</id><snippet>None['target']</snippet></ROW><ROW><id>14943594</id><snippet>File*</snippet></ROW><ROW><id>14943594</id><snippet>File*</snippet></ROW><ROW><id>14943693</id><snippet>sudo apt-get install postfix
</snippet></ROW><ROW><id>14943693</id><snippet>sudo vi /etc/postfix/main.cf
</snippet></ROW><ROW><id>14943693</id><snippet>relayhost = mail.your-admin-email.com
</snippet></ROW><ROW><id>14943763</id><snippet>np.absolute</snippet></ROW><ROW><id>14944127</id><snippet>import os
os.system('/Library/Frameworks/GDAL.framework/Programs/ogr2ogr -f "GeoJSON" output.json input.shp')
</snippet></ROW><ROW><id>14944127</id><snippet>subprocess.call(['/Library/Frameworks/GDAL.framework/Programs/ogr2ogr', '-f',
                 '"GeoJSON"', 'output.json', 'input.shp'])
</snippet></ROW><ROW><id>14944205</id><snippet>10 * np.random.randn(1, 100)
</snippet></ROW><ROW><id>14944205</id><snippet>import numpy
import lomb
numpy.random.seed(999)
nd = 20
fs = 10
x = numpy.arange(nd)
y = numpy.random.randn(nd)
fx, fy, nout, jmax, prob = lomb.fasper(x, y, 1., fs)
fNy = fx[-1]
fy = fy/fs
Si = numpy.mean(fy)*fNy
print fNy, Si, Si*2
</snippet></ROW><ROW><id>14944205</id><snippet>5.26315789474 0.482185882163 0.964371764327
</snippet></ROW><ROW><id>14944403</id><snippet>sorted</snippet></ROW><ROW><id>14944403</id><snippet>print</snippet></ROW><ROW><id>14944403</id><snippet>print</snippet></ROW><ROW><id>14944425</id><snippet>logx = np.log(x)</snippet></ROW><ROW><id>14944574</id><snippet>ctypes.POINTER(ctypes.c_char)</snippet></ROW><ROW><id>14944574</id><snippet>import ctypes

lib = ctypes.CDLL('./hello.so')    
lib.hello.restype = ctypes.POINTER(ctypes.c_char)

ptr = lib.hello("Frank")
print repr(ctypes.cast(ptr, ctypes.c_char_p).value)
lib.free_response(ptr)
</snippet></ROW><ROW><id>14944602</id><snippet>threading</snippet></ROW><ROW><id>14944602</id><snippet>multiprocessing</snippet></ROW><ROW><id>14944602</id><snippet>timeit</snippet></ROW><ROW><id>14944602</id><snippet>time</snippet></ROW><ROW><id>14944602</id><snippet>os.open</snippet></ROW><ROW><id>14944602</id><snippet>os.write</snippet></ROW><ROW><id>14944602</id><snippet>CreateFile</snippet></ROW><ROW><id>14944602</id><snippet>WriteFileEx</snippet></ROW><ROW><id>14944602</id><snippet>ctypes</snippet></ROW><ROW><id>14944602</id><snippet>win32api</snippet></ROW><ROW><id>14944602</id><snippet>aio_write</snippet></ROW><ROW><id>14944602</id><snippet>WriteFileEx</snippet></ROW><ROW><id>14944602</id><snippet>os.link</snippet></ROW><ROW><id>14944602</id><snippet>with open('file_0', 'w') as f:
    f.write('anything')
for i in range(1, 10000):
    os.link('file_0', 'file_{}'.format(i))
</snippet></ROW><ROW><id>14944602</id><snippet>file_0</snippet></ROW><ROW><id>14944602</id><snippet>file_9999</snippet></ROW><ROW><id>14944602</id><snippet>os.link</snippet></ROW><ROW><id>14944602</id><snippet>ctypes</snippet></ROW><ROW><id>14944602</id><snippet>win32api</snippet></ROW><ROW><id>14944602</id><snippet>CreateHardLink</snippet></ROW><ROW><id>14944602</id><snippet>subprocess</snippet></ROW><ROW><id>14944602</id><snippet>mklink</snippet></ROW><ROW><id>14944602</id><snippet>fsutil</snippet></ROW><ROW><id>14944602</id><snippet>stat</snippet></ROW><ROW><id>14944602</id><snippet>lstat</snippet></ROW><ROW><id>14944602</id><snippet>file_0</snippet></ROW><ROW><id>14944602</id><snippet>os.symlink</snippet></ROW><ROW><id>14944602</id><snippet>os.symlink</snippet></ROW><ROW><id>14944710</id><snippet>text = result.content</snippet></ROW><ROW><id>14944710</id><snippet>from google.appengine.api import urlfetch

futures = []
for url in urls:
    rpc = urlfetch.create_rpc()
    urlfetch.make_fetch_call(rpc, url)
    futures.append(rpc)

contents = []
for rpc in futures:
    try:
        result = rpc.get_result()
        if result.status_code == 200:
            contents.append(result.content)
            # ...
    except urlfetch.DownloadError:
        # Request timed out or failed.
        # ...

concatenated_result = '\n'.join(contents)
</snippet></ROW><ROW><id>14944710</id><snippet>@ndb.tasklet
def get_urls(urls):
  ctx = ndb.get_context()
  result = yield map(ctx.urlfetch, urls)
  contents = [r.content for r in result if r.status_code==200]
  raise ndb.Return('\n'.join(contents))
</snippet></ROW><ROW><id>14944755</id><snippet>query</snippet></ROW><ROW><id>14945031</id><snippet>-q</snippet></ROW><ROW><id>14945031</id><snippet>senderle:~ $ echo "print(isprime(5))" | gp -q
1
</snippet></ROW><ROW><id>14945031</id><snippet>//pariparse.c

#include&lt;Python.h&gt;
#include&lt;pari/pari.h&gt;

static PyObject * pariparse_run(PyObject *self, PyObject *args) {
    pari_init(40000000, 2);
    const char *pari_code;
    char *outstr;

    if (!PyArg_ParseTuple(args, "s", &amp;pari_code)) { return NULL; }
    outstr = GENtostr(gp_read_str(pari_code));
    pari_close();
    return Py_BuildValue("s", outstr);
}

static PyMethodDef PariparseMethods[] = {
    {"run", pariparse_run, METH_VARARGS, "Run a pari command."},
    {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC initpariparse(void) {
    (void) Py_InitModule("pariparse", PariparseMethods);
}
</snippet></ROW><ROW><id>14945031</id><snippet>#setup.py

from distutils.core import setup, Extension

module1 = Extension('pariparse',
                    include_dirs = ['/usr/include', '/usr/local/include'],
                    libraries = ['pari'],
                    library_dirs = ['/usr/lib', '/usr/local/lib'],
                    sources = ['pariparse.c'])

setup (name = 'pariparse',
       version = '0.01a',
       description = 'A super tiny python-pari interface',
       ext_modules = [module1])
</snippet></ROW><ROW><id>14945031</id><snippet>python setup.py build</snippet></ROW><ROW><id>14945031</id><snippet>&gt;&gt;&gt; pariparse.run('nextprime(5280)')
'5281'
</snippet></ROW><ROW><id>14945097</id><snippet>import json
string_for_printing = json.dumps(original_string).strip('"')
</snippet></ROW><ROW><id>14945119</id><snippet>import sys


def search_func_a(l):
    """
    Called for things that follow `search key A`
    """
    print 'A: %s' % l


def search_func_b(l):
    """
    Called for things that follow `search key B`
    """
    print 'B: %s' % l


def search_key_func(l):
    """
    Returns the associated "search function" for each search string.
    """
    if 'search key A' in l:
        return search_func_a
    if 'search key B' in l:
        return search_func_b
    return None


def main():
    # Start with a default handler.  This changes as `search key` lines are
    # found.
    handler = lambda _: 0 

    for line in open('test.txt'):
        # search_key_func returns None for non `search key` lines.  In that
        # case, continue to use the last `search function` found.
        search_func = search_key_func(line) 
        if search_func:
            # If a search line is found, don't pass it into the search func.
            handler = search_func
            continue
        handler(line)


if __name__ == '__main__':
    sys.exit(main())
</snippet></ROW><ROW><id>14945128</id><snippet>-w</snippet></ROW><ROW><id>14945128</id><snippet>args = ['-w', 'test_dir/testsetA/', '--collect-only'] 
</snippet></ROW><ROW><id>14945128</id><snippet>nose</snippet></ROW><ROW><id>14945128</id><snippet>'-w test_dir/testsetA/</snippet></ROW><ROW><id>14945181</id><snippet>~</snippet></ROW><ROW><id>14945181</id><snippet>import os
filepath = os.path.join(os.path.expanduser("~/Desktop/Experiment/Neuro_images/"), savename)
complete.save(filepath, "png")
</snippet></ROW><ROW><id>14945277</id><snippet>foreign_key_id</snippet></ROW><ROW><id>14945277</id><snippet>MyModel</snippet></ROW><ROW><id>14945277</id><snippet>foreign_key__id</snippet></ROW><ROW><id>14945277</id><snippet>MyModel1.foreign_key_id == 5  # this is stored on the model
                              # and does not require a lookup.
MyModel1.foreign_key.id == 5  # this is stored on the target table
                              # and requires a DB hit. 
</snippet></ROW><ROW><id>14946050</id><snippet>s = '(pattern1|pattern2|pattern3)'
match = sorted(re.findall(s, 'pattern1 pattern3 pattern2'))
match
&gt;&gt;&gt; ['pattern1', 'pattern2', 'pattern3']
</snippet></ROW><ROW><id>14946070</id><snippet>&gt;&gt;&gt; root = ''
&gt;&gt;&gt; for c in hablar['yo']:
...     if all(v.startswith(root + c) for v in hablar.itervalues()):
...         root += c
...     else:
...        break
... 
&gt;&gt;&gt; root
'habl'
</snippet></ROW><ROW><id>14946070</id><snippet>list</snippet></ROW><ROW><id>14946070</id><snippet>&gt;&gt;&gt; endings = [v[len(root):] for v in hablar.itervalues()]
&gt;&gt;&gt; print endings
['abas', 'aba', 'abais', 'aba', '\xc3\xa1bamos', 'aban', 'abas']
</snippet></ROW><ROW><id>14946070</id><snippet>&gt;&gt;&gt; unique_endings = set(endings)
&gt;&gt;&gt; print unique_endings
set(['abas', 'abais', '\xc3\xa1bamos', 'aban', 'aba'])
</snippet></ROW><ROW><id>14946070</id><snippet>&gt;&gt;&gt; conjoined_endings = '|'.join(unique_endings)
&gt;&gt;&gt; print conjoined_endings
abas|abais|ábamos|aban|aba
</snippet></ROW><ROW><id>14946070</id><snippet>&gt;&gt;&gt; final_regex = '{}({})'.format(root, conjoined_endings)
&gt;&gt;&gt; print final_regex
habl(abas|abais|ábamos|aban|aba)
</snippet></ROW><ROW><id>14946151</id><snippet>re.findall</snippet></ROW><ROW><id>14946151</id><snippet>rating</snippet></ROW><ROW><id>14946151</id><snippet>rating2 = rating[0:1]</snippet></ROW><ROW><id>14946151</id><snippet>rating2</snippet></ROW><ROW><id>14946151</id><snippet>rating2</snippet></ROW><ROW><id>14946151</id><snippet>findall</snippet></ROW><ROW><id>14946151</id><snippet>rating</snippet></ROW><ROW><id>14946151</id><snippet>rating = regels.findall(s)
rating2 = rating[0] # only get the first element; a string
rating3 = re.findall("[0-9]", rating2)
</snippet></ROW><ROW><id>14946231</id><snippet>import psycopg2
conn = psycopg2.connect(database='postgis', user='postgres')
curs = conn.cursor()

# Find the distance within 1 km of point-of-interest
poi = (-124.3, 53.2)  # longitude, latitude

# Table 'my_points' has a geography column 'geog'
curs.execute("""\
SELECT gid, ST_AsGeoJSON(geog), ST_Distance(geog, poi)
FROM my_points, (SELECT ST_MakePoint(%s, %s)::geography AS poi) AS f
WHERE ST_DWithin(geog, poi, 1000);""", poi)

for row in curs.fetchall():
    print(row)
</snippet></ROW><ROW><id>14946245</id><snippet>#!/usr/bin/env python
# encoding: utf-8

import sys
import re

def extract_id(line):
    """
    input: HumanDistalGut_READ_00048904.2  GO:0006412  TIGRFAM TIGR00001
    returns: 00048904.2
    """
    result = re.search(r'READ_(\d{8}\.\d)', line)
    if result != None:
        return result.group(1)
    else:
        return None

def extract_go_num(line):
    """
    input: HumanDistalGut_READ_00048904.2  GO:0006412  TIGRFAM TIGR00001
    returns: 0006412
    """
    result = re.search(r'GO:(\d{7})', line)
    if result != None:
        return result.group(1)
    else:
        return None

def main(argv = None):
    if argv is None:
        argv = sys.argv

    with open('readID.txt', 'r') as f:
        ids = frozenset(f.readlines())

    with open('GO.txt', 'r') as haystack, \
        open('GOLines.txt', 'w') as output:

        for line in haystack:
            if extract_id(line) in ids:
                output.write(extract_go_num(line) + '\n')

if __name__ == "__main__":
    sys.exit(main())
</snippet></ROW><ROW><id>14946246</id><snippet>In [0]: grp = df.groupby('A')
</snippet></ROW><ROW><id>14946246</id><snippet>In [1]: grp[['B']].transform(sum).sort('B')
Out[1]:
          B
2 -2.829710
5 -2.829710
1  0.253651
4  0.253651
0  0.551377
3  0.551377
</snippet></ROW><ROW><id>14946246</id><snippet>In [2]: sort1 = df.ix[grp[['B']].transform(sum).sort('B').index]

In [3]: sort1
Out[3]:
     A         B      C
2  baz -0.528172  False
5  baz -2.301539   True
1  bar -0.611756   True
4  bar  0.865408  False
0  foo  1.624345  False
3  foo -1.072969   True
</snippet></ROW><ROW><id>14946246</id><snippet>sort=False</snippet></ROW><ROW><id>14946246</id><snippet>In [4]: f = lambda x: x.sort('C', ascending=False)

In [5]: sort2 = sort1.groupby('A', sort=False).apply(f)

In [6]: sort2
Out[6]:
         A         B      C
A
baz 5  baz -2.301539   True
    2  baz -0.528172  False
bar 1  bar -0.611756   True
    4  bar  0.865408  False
foo 3  foo -1.072969   True
    0  foo  1.624345  False
</snippet></ROW><ROW><id>14946246</id><snippet>reset_index</snippet></ROW><ROW><id>14946246</id><snippet>drop=True</snippet></ROW><ROW><id>14946246</id><snippet>In [7]: sort2.reset_index(0, drop=True)
Out[7]:
     A         B      C
5  baz -2.301539   True
2  baz -0.528172  False
1  bar -0.611756   True
4  bar  0.865408  False
3  foo -1.072969   True
0  foo  1.624345  False
</snippet></ROW><ROW><id>14946294</id><snippet>(edge, autoincrement)</snippet></ROW><ROW><id>14946294</id><snippet>blist</snippet></ROW><ROW><id>14946294</id><snippet>&gt;&gt;&gt; l3 = blist.sortedlist(l2)
</snippet></ROW><ROW><id>14946294</id><snippet>&gt;&gt;&gt; edge = random.choice(l3)
</snippet></ROW><ROW><id>14946294</id><snippet>l3[random.randrange(len(l3))]</snippet></ROW><ROW><id>14946294</id><snippet>&gt;&gt;&gt; del l3[l3.bisect_left(edge):l3.bisect_right(edge)]
</snippet></ROW><ROW><id>14946294</id><snippet>&gt;&gt;&gt; try:
...     while True:
...         l3.remove(edge)
... except ValueError:
...     pass
</snippet></ROW><ROW><id>14946294</id><snippet>len</snippet></ROW><ROW><id>14946294</id><snippet>blist</snippet></ROW><ROW><id>14946294</id><snippet>class MGraph(object):
    def __init__(self):
        self.edgelist = []
        self.edgedict = defaultdict(list)
    def add(self, edge):
        self.edgedict[edge].append(len(self.edgelist))
        self.edgelist.append(edge)
    def remove(self, edge):
        for index in self.edgedict.get(edge, []):
            maxedge = len(self.edgelist) - 1
            lastedge = self.edgelist[maxedge]
            self.edgelist[index], self.edgelist[maxedge] = self.edgelist[maxedge], self.edgelist[index]
            self.edgedict[lastedge] = [i if i != maxedge else index for i in self.edgedict[lastedge]]
            del self.edgelist[-1]
        del self.edgedict[edge]
    def choice(self):
        return random.choice(self.edgelist)
</snippet></ROW><ROW><id>14946294</id><snippet>list</snippet></ROW><ROW><id>14946294</id><snippet>set</snippet></ROW><ROW><id>14946294</id><snippet>tuple</snippet></ROW><ROW><id>14946294</id><snippet>Counter</snippet></ROW><ROW><id>14946294</id><snippet>collections.abc.Foo</snippet></ROW><ROW><id>14946294</id><snippet>collections.Foo</snippet></ROW><ROW><id>14946294</id><snippet>log N</snippet></ROW><ROW><id>14946294</id><snippet>(N/2)**2</snippet></ROW><ROW><id>14946294</id><snippet>W**2</snippet></ROW><ROW><id>14946294</id><snippet>W</snippet></ROW><ROW><id>14946294</id><snippet>list</snippet></ROW><ROW><id>14946355</id><snippet>\xXX</snippet></ROW><ROW><id>14946355</id><snippet>\x</snippet></ROW><ROW><id>14946355</id><snippet>repr</snippet></ROW><ROW><id>14946355</id><snippet>re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\xff]', '', text)
</snippet></ROW><ROW><id>14946355</id><snippet>&gt;&gt;&gt; re.sub(r'[\x00-\x1f\x7f-\xff]', '', ''.join(map(chr, range(256))))
' !"#$%&amp;\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
</snippet></ROW><ROW><id>14946444</id><snippet>import matplotlib.dates as mdates
myFmt = mdates.DateFormatter('%d')
ax.xaxis.set_major_formatter(myFmt)
</snippet></ROW><ROW><id>14946506</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>14946506</id><snippet>functools32</snippet></ROW><ROW><id>14946506</id><snippet>class Test:
    def cached_method(self, x):
         return x + 5
    def __init__(self):
         self.cached_method = lru_cache(maxsize=16)(self.cached_method)
</snippet></ROW><ROW><id>14947231</id><snippet>#! /usr/bin/python3.2

import re

a = '524946(46|58){4}434452[22:33]367672736E'
patterns = [ ('([0-9a-fA-F]+)', 'Sequence '),
    ('(\\([0-9a-fA-F]+\\|[0-9a-fA-F]+\\))', 'Option '),
    ('({[0-9a-fA-F]+})', 'Curly '),
    ('(\\[[0-9a-fA-F]+:[0-9a-fA-F]+\\])', 'Slice ') ]

while a:
    found = False
    for pattern, name in patterns:
        m = re.match (pattern, a)
        if m:
            m = m.groups () [0]
            print (name + m)
            a = a [len (m):]
            found = True
            break
    if not found: raise Exception ('Unrecognized sequence')
</snippet></ROW><ROW><id>14947231</id><snippet>Sequence 524946
Option (46|58)
Curly {4}
Sequence 434452
Slice [22:33]
Sequence 367672736E
</snippet></ROW><ROW><id>14947274</id><snippet>weights = [1, 2, 3]

def EhMensuravel(entry, weights, weight_idx = 0):
    if entry == 0:
        return True

    if weight_idx == len(weights):
        return False

    if EhMensuravel(entry + weights[weight_idx], weights, weight_idx+1):
        return True

    if EhMensuravel(entry - weights[weight_idx], weights, weight_idx+1):
        return True

    if EhMensuravel(entry, weights, weight_idx+1):
        return True

    return False

print EhMensuravel(4, weights)
</snippet></ROW><ROW><id>14947274</id><snippet>entry</snippet></ROW><ROW><id>14947375</id><snippet>x = y
y = x + y
</snippet></ROW><ROW><id>14947375</id><snippet>y + y</snippet></ROW><ROW><id>14947375</id><snippet>y</snippet></ROW><ROW><id>14947375</id><snippet>x</snippet></ROW><ROW><id>14947375</id><snippet>x, y = y, x + y
</snippet></ROW><ROW><id>14947375</id><snippet>y</snippet></ROW><ROW><id>14947375</id><snippet>x + y</snippet></ROW><ROW><id>14947375</id><snippet>x, y</snippet></ROW><ROW><id>14947375</id><snippet>x + y</snippet></ROW><ROW><id>14947375</id><snippet>x</snippet></ROW><ROW><id>14947375</id><snippet>y</snippet></ROW><ROW><id>14947375</id><snippet>x + y</snippet></ROW><ROW><id>14947375</id><snippet>evaluation</snippet></ROW><ROW><id>14947375</id><snippet>RHS</snippet></ROW><ROW><id>14947384</id><snippet>from_file.readline() # and discard
to_file.write(replacement_line)
shutil.copyfileobj(from_file, to_file)
</snippet></ROW><ROW><id>14947439</id><snippet>d2 = defaultdict(list)
for k, v in d.iteritems():
    sum = 0.0
    v2 = []
    for x in v:
        sum += x
        v2.append(sum)
    d2[k] = v2
</snippet></ROW><ROW><id>14947439</id><snippet>numpy.cumsum</snippet></ROW><ROW><id>14947657</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>self.main_container = Frame(parent. baclground="bisque")
self.main_container.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>14947657</id><snippet>__init__</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_frame = Frame(self.main_container, background="green")
    self.bottom_frame = Frame(self.main_container, background="yellow")
    self.top_frame.pack(side="top", fill="x", expand=False)
    self.bottom_frame.pack(side="bottom", fill="both", expand=True)
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_left = Frame(self.top_frame, background="pink")
    self.top_right = Frame(self.top_frame, background="blue")
    self.top_left.pack(side="left", fill="x", expand=True)
    self.top_right.pack(side="right", fill="x", expand=True)
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>sticky</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_left_label = Label(self.top_left, text="Top Left")
    self.top_right_label = Label(self.top_right, text="Top Right")
    self.top_left_label.pack(side="left")
    self.top_right_label.pack(side="right")
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.text_box = Text(self.bottom_frame, height=5, width=40, background="gray")
    self.text_box.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>    self.main_container.grid(row=0, column=0, sticky="nsew")
    self.myParent.grid_rowconfigure(0, weight=1)
    self.myParent.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_frame.grid(row=0, column=0, sticky="ew")
    self.bottom_frame.grid(row=1, column=0,sticky="nsew")
    self.main_container.grid_rowconfigure(1, weight=1)
    self.main_container.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_left.grid(row=0, column=0, sticky="w")
    self.top_right.grid(row=0, column=2, sticky="e")
    self.top_frame.grid_columnconfigure(1, weight=1)
</snippet></ROW><ROW><id>14947657</id><snippet>    self.top_left_label.grid(row=0, column=0, sticky="w")
    self.top_right_label.grid(row=0, column=0, sticky="e")
</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947657</id><snippet>    self.text_box.grid(row=0, column=0, sticky="nsew")
    self.bottom_frame.grid_rowconfigure(0, weight=1)
    self.bottom_frame.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>14947657</id><snippet>grid</snippet></ROW><ROW><id>14947657</id><snippet>pack</snippet></ROW><ROW><id>14947685</id><snippet>canvas</snippet></ROW><ROW><id>14947685</id><snippet>canvas</snippet></ROW><ROW><id>14947685</id><snippet>on_pick</snippet></ROW><ROW><id>14947685</id><snippet>label</snippet></ROW><ROW><id>14947685</id><snippet>x_ax.set_label('x')
y_ax.set_label('y')
</snippet></ROW><ROW><id>14947685</id><snippet>on_pick</snippet></ROW><ROW><id>14947685</id><snippet>def on_pick(event):
    #some code here
    art = event.artist
    if isinstance(art, matplotlib.axes.Axes):
        # the artist is as axes
        if art.get_label() == 'x':
            # do one thing
            pass
        elif art.get_label() == 'y':
            # do another thing
            pass
</snippet></ROW><ROW><id>14947685</id><snippet>dict</snippet></ROW><ROW><id>14947953</id><snippet>run</snippet></ROW><ROW><id>14947953</id><snippet>while counter == -1:
    counter = logindata["counter"]
    print(counter)
</snippet></ROW><ROW><id>14947953</id><snippet>logindata["counter"]</snippet></ROW><ROW><id>14947953</id><snippet>threading.Condition</snippet></ROW><ROW><id>14947953</id><snippet>queue.Queue</snippet></ROW><ROW><id>14947953</id><snippet>_login</snippet></ROW><ROW><id>14947953</id><snippet>_login</snippet></ROW><ROW><id>14947967</id><snippet>labeled_words = [('neg', ['watching', 'by', 'myself', 'tweetdebate', 'not']), ('pos',     ['here', 'we', 'go', 'tweetdebate', 'tweetdebate'])]
stemmedWords = []
for label, words in labeled_words:
    stemmed = []
    for word in words:
        stemmed.append(porter2.stem(word))
    stemmedWords.append((label,stemmed))
</snippet></ROW><ROW><id>14947967</id><snippet>&gt;&gt;&gt; stemmedWords
[('neg', ['watch', 'by', 'myself', 'tweetdeb', 'not']), ('pos', ['here', 'we', 'go', 'tweetdeb', 'tweetdeb'])]
</snippet></ROW><ROW><id>14947984</id><snippet>list.sort()</snippet></ROW><ROW><id>14947984</id><snippet>None</snippet></ROW><ROW><id>14947984</id><snippet>None + None
</snippet></ROW><ROW><id>14947984</id><snippet>listA.sort()
listB.sort()
listC = listA + listB
</snippet></ROW><ROW><id>14947984</id><snippet>listC = sorted(listA) + sorted(listB)
</snippet></ROW><ROW><id>14947984</id><snippet>sorted()</snippet></ROW><ROW><id>14948054</id><snippet>1-9</snippet></ROW><ROW><id>14948054</id><snippet>r'[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'
</snippet></ROW><ROW><id>14948054</id><snippet>\d</snippet></ROW><ROW><id>14948054</id><snippet>r'\d+\.\d+\.\d+\.\d+'
</snippet></ROW><ROW><id>14948054</id><snippet>r' [\.0-9]+/.*/.*/.* ms'
</snippet></ROW><ROW><id>14948056</id><snippet>&gt;&gt;&gt; value = [0, 1, 1, 1, -1, -1, -1, -1, 1]
&gt;&gt;&gt; n_day = 5
&gt;&gt;&gt; [sum(value[i:max(i-n_day, 0):-1]) for i in range(len(value))]
[0, 1, 2, 3, 2, 1, -1, -3, -3]
</snippet></ROW><ROW><id>14948166</id><snippet>email</snippet></ROW><ROW><id>14948166</id><snippet>imaplib</snippet></ROW><ROW><id>14948166</id><snippet>email.parser.HeaderParser</snippet></ROW><ROW><id>14948166</id><snippet>&gt;&gt;&gt; from email.parser import HeaderParser

&gt;&gt;&gt; msg = HeaderParser().parsestr(header) # or parsestr(msg) if you have the whole msg
&gt;&gt;&gt; return_path = msg.get('Return-Path')
</snippet></ROW><ROW><id>14948166</id><snippet>return_path</snippet></ROW><ROW><id>14948166</id><snippet>"&lt;bob@example2.com&gt;"</snippet></ROW><ROW><id>14948166</id><snippet>None</snippet></ROW><ROW><id>14948166</id><snippet>&gt;&gt;&gt; from email.utils import parseaddr
&gt;&gt;&gt; realname, emailaddr = parseaddr(return_path)
</snippet></ROW><ROW><id>14948166</id><snippet>realname</snippet></ROW><ROW><id>14948166</id><snippet>""</snippet></ROW><ROW><id>14948166</id><snippet>emailaddr</snippet></ROW><ROW><id>14948166</id><snippet>'bob@example2.com'</snippet></ROW><ROW><id>14948166</id><snippet>Return-Path: "Bob Example" &lt;bob@example.com&gt;
</snippet></ROW><ROW><id>14948166</id><snippet>Return-Path</snippet></ROW><ROW><id>14948166</id><snippet>Return-Path</snippet></ROW><ROW><id>14948166</id><snippet>&gt;&gt;&gt; return_paths = msg.get_all('Return-Path')
</snippet></ROW><ROW><id>14948166</id><snippet>list</snippet></ROW><ROW><id>14948166</id><snippet>["&lt;bob@example2.com&gt;"]</snippet></ROW><ROW><id>14948166</id><snippet>Return-Path</snippet></ROW><ROW><id>14948166</id><snippet>list</snippet></ROW><ROW><id>14948166</id><snippet>None</snippet></ROW><ROW><id>14948166</id><snippet>list</snippet></ROW><ROW><id>14948166</id><snippet>&gt;&gt;&gt; from email.utils import getaddresses
&gt;&gt;&gt; for realname, emailaddr in getaddresses(returnpaths):
...     print(realname, emailaddr)
</snippet></ROW><ROW><id>14948661</id><snippet>try:
    N = float(N)
except ValueError:
    pass
except TypeError:
    pass
</snippet></ROW><ROW><id>14948661</id><snippet>N</snippet></ROW><ROW><id>14948661</id><snippet>float</snippet></ROW><ROW><id>14948661</id><snippet>pass</snippet></ROW><ROW><id>14948661</id><snippet>try</snippet></ROW><ROW><id>14948661</id><snippet>except</snippet></ROW><ROW><id>14948661</id><snippet>try:
    N = float(N)
except (ValueError, TypeError):
    pass
</snippet></ROW><ROW><id>14948745</id><snippet>car__like</snippet></ROW><ROW><id>14948745</id><snippet>__icontains</snippet></ROW><ROW><id>14948745</id><snippet>Foo.objects.filter(some_field__icontains='ford')
</snippet></ROW><ROW><id>14948933</id><snippet>if a in b:</snippet></ROW><ROW><id>14948933</id><snippet>a</snippet></ROW><ROW><id>14948933</id><snippet>b</snippet></ROW><ROW><id>14948933</id><snippet>if 'foo' in 'foobar':
    print True

if 'foo' in 'barfoo':
    print True
</snippet></ROW><ROW><id>14948933</id><snippet>.startswith</snippet></ROW><ROW><id>14948933</id><snippet>if 'foobar'.startswith('foo'):
    print "it does!"
</snippet></ROW><ROW><id>14948933</id><snippet>endswith</snippet></ROW><ROW><id>14948933</id><snippet>if 'foobar'.endswith('bar'):
    print "Yes sir :)"
</snippet></ROW><ROW><id>14948933</id><snippet>strncmp</snippet></ROW><ROW><id>14948933</id><snippet>==</snippet></ROW><ROW><id>14948933</id><snippet>if a[:n] == b[:n]:
    print 'strncmp success!'
</snippet></ROW><ROW><id>14948933</id><snippet>os.path</snippet></ROW><ROW><id>14949010</id><snippet>from BeautifulSoup import BeautifulSoup

# Insert whatever networking stuff you're doing here. I'm going to assume
# that you've already downloaded the page and assigned it to a variable 
# named 'html'

soup = BeautifulSoup(html)
headings = ['Internship', 'Residency', 'Fellowship']
values = []
for heading in headings:
    x = soup.find('span', text=heading)
    if x:
        span_id = x.parent['id']
        table_id = span_id.replace('dnnTITLE_lblTitle', 'Display_HtmlHolder')        
        values.append(soup.find('td', attrs={'id': table_id}).text)
    else:
        values.append('')

print zip(headings, values)
</snippet></ROW><ROW><id>14949120</id><snippet>&gt;&gt;&gt; s  = [1,2,3]
&gt;&gt;&gt; str(tuple(s))
'(1, 2, 3)'
</snippet></ROW><ROW><id>14949173</id><snippet>process</snippet></ROW><ROW><id>14949173</id><snippet>Stream</snippet></ROW><ROW><id>14949173</id><snippet>Stream.tokens</snippet></ROW><ROW><id>14949173</id><snippet>Stream.process</snippet></ROW><ROW><id>14949173</id><snippet>Stream</snippet></ROW><ROW><id>14949173</id><snippet>#! /usr/bin/python3.2

import re

class Sequence:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Sequence {}'.format (self.__raw)
    def process (self): print ('Wolfing sequence {}'.format (self.__raw) )

class Option:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Option {}'.format (self.__raw)
    def process (self): print ('Foxing option {}'.format (self.__raw) )

class Range:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Range {}'.format (self.__raw)
    def process (self): print ('Bearing range {}'.format (self.__raw) )

class Slice:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Slice {}'.format (self.__raw)
    def process (self): print ('Badgering slice {}'.format (self.__raw) )


class Stream:
    patterns = [ ('([0-9a-fA-F]+)', Sequence),
        ('(\\([0-9a-fA-F]+\\|[0-9a-fA-F]+\\))', Option),
        ('({[0-9a-fA-F]+})', Range),
        ('(\\[[0-9a-fA-F]+:[0-9a-fA-F]+\\])', Slice) ]

    def __init__ (self, stream):
        self.__tokens = []
        while stream:
            found = False
            for pattern, cls in self.patterns:
                m = re.match (pattern, stream)
                if m:
                    m = m.groups () [0]
                    self.__tokens.append (cls (m) )
                    stream = stream [len (m):]
                    found = True
                    break
            if not found: raise Exception ('Unrecognized sequence')

    @property
    def tokens (self): return (token for token in self.__tokens)

    def process (self):
        for token in self.__tokens: token.process ()

stream = Stream ('524946(46|58){4}434452[22:33]367672736E')
print ('These are the tokens:')
for idx, token in enumerate (stream.tokens):
    print ('{} at position {}.'.format (token, idx) )

print ('\nNow let\'s process them all:')
stream.process ()
</snippet></ROW><ROW><id>14949173</id><snippet>These are the tokens:
Sequence 524946 at position 0.
Option (46|58) at position 1.
Range {4} at position 2.
Sequence 434452 at position 3.
Slice [22:33] at position 4.
Sequence 367672736E at position 5.

Now let's process them all:
Wolfing sequence 524946
Foxing option (46|58)
Bearing range {4}
Wolfing sequence 434452
Badgering slice [22:33]
Wolfing sequence 367672736E
</snippet></ROW><ROW><id>14949551</id><snippet>import wave
CHUNK_SIZE=1024
wf = wave.open('filename.wav')
data = wf.readframes(CHUNK_SIZE)
while data != '':
    do_something(data)
    data = wf.readframes(CHUNK_SIZE)
</snippet></ROW><ROW><id>14949571</id><snippet>&gt;&gt;&gt; df.sub(df.a, axis=0)
   a         b         c         d         e
0  0  0.112285  0.267105  0.365407 -0.159907
1  0  0.380421  0.119536  0.356203  0.096637
2  0 -0.100310 -0.180927  0.112677  0.260202
3  0  0.653642  0.566408  0.086720  0.256536
</snippet></ROW><ROW><id>14949571</id><snippet>df-df.a</snippet></ROW><ROW><id>14949571</id><snippet>0   1   2   3   a   b   c   d   e</snippet></ROW><ROW><id>14949571</id><snippet>(df.T - df.a).T</snippet></ROW><ROW><id>14949571</id><snippet>df</snippet></ROW><ROW><id>14949596</id><snippet>pymongo.uri_parser</snippet></ROW><ROW><id>14949596</id><snippet>parse_uri</snippet></ROW><ROW><id>14949596</id><snippet>username</snippet></ROW><ROW><id>14949596</id><snippet>password</snippet></ROW><ROW><id>14949596</id><snippet>database</snippet></ROW><ROW><id>14949596</id><snippet>from pymongo.uri_parser import parse_uri

mongo_uri = 'mongodb://james:brewer@localhost/test'

for k, v in parse_uri(mongo_uri).items():
    print k, ':', v
</snippet></ROW><ROW><id>14949596</id><snippet>username : james
nodelist : [('localhost', 27017)]
database : test
connection : None
password : brewer
options : {}
</snippet></ROW><ROW><id>14949711</id><snippet>PROJECT_PATH</snippet></ROW><ROW><id>14949711</id><snippet>dirname</snippet></ROW><ROW><id>14949711</id><snippet>/path/to/inner/mysite</snippet></ROW><ROW><id>14949711</id><snippet>templates</snippet></ROW><ROW><id>14949711</id><snippet>mysite</snippet></ROW><ROW><id>14949711</id><snippet>PROJECT_PATH = os.path.realpath(os.path.dirname(os.path.dirname(__file__))) 
</snippet></ROW><ROW><id>14949711</id><snippet>mysite</snippet></ROW><ROW><id>14949788</id><snippet>file.read</snippet></ROW><ROW><id>14949788</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; input_chunk = 'foo bar baz'
&gt;&gt;&gt; input_chunk + struct.pack('16B',*([0]*16))
'foo bar baz\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14949788</id><snippet>struct.pack</snippet></ROW><ROW><id>14949788</id><snippet>struct.pack('80s',string_of_64_bytes)
</snippet></ROW><ROW><id>14949820</id><snippet>urllib.request</snippet></ROW><ROW><id>14949820</id><snippet>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; response =  urllib.request.urlopen(url)
&gt;&gt;&gt; response.getcode()
200
&gt;&gt;&gt; if response.getcode() == 200:
...     print('Bingo')
... 
Bingo
</snippet></ROW><ROW><id>14949820</id><snippet>HTTPResponse</snippet></ROW><ROW><id>14949820</id><snippet>&gt;&gt;&gt; response.getheader('Server')
'Apache/2.2.16 (Debian)'
</snippet></ROW><ROW><id>14949820</id><snippet>urllib.request.urlopen()</snippet></ROW><ROW><id>14949820</id><snippet>HTTPError</snippet></ROW><ROW><id>14949820</id><snippet>Exception</snippet></ROW><ROW><id>14949820</id><snippet>import urllib.request
try:
    response = urllib.request.urlopen(url)
    if response.getcode() == 200:
        print('Bingo')
    else:
        print('The response code was not 200, but: {}'.format(
            response.get_code()))
except urllib.error.HTTPError as e:
    print('''An error occurred: {}
The response code was {}'''.format(e, e.getcode()))
</snippet></ROW><ROW><id>14949864</id><snippet>cur.execute("SELECT * FROM list WHERE InstitutionName=?", (Variable,))
</snippet></ROW><ROW><id>14949864</id><snippet>%</snippet></ROW><ROW><id>14949864</id><snippet>format</snippet></ROW><ROW><id>14949864</id><snippet># NEVER DO THIS
cur.execute("SELECT * FROM list WHERE InstitutionName='%s'" % (Variable,))
</snippet></ROW><ROW><id>14950090</id><snippet>MappedCollection</snippet></ROW><ROW><id>14950090</id><snippet>from sqlalchemy.orm.collections import collection, MappedCollection

class GroupedCollection(MappedCollection):

  def __init__(self):
    super(GroupedCollection, self).__init__(
      self,
      lambda e: e.resource_id # the key we want to group by
    )

  @collection.internally_instrumented
  def __setitem__(self, key, value, _sa_initiator=None):
    if key in self:
      # there is already another comment for that resource
      # we simply append the comment (or you could do something
      # more fancy here if you would like to order the comments)
      self[key]['comments'].append(value)
    else:
      # we create a new entry with a dictionary containing the
      # resource and comment
      super(GroupedCollection, self).__setitem__(
        key,
        {'resource': value.resource, 'comments': [value]},
        _sa_initiator
      )
</snippet></ROW><ROW><id>14950090</id><snippet>User</snippet></ROW><ROW><id>14950090</id><snippet>class User(Base):

  # ...

  grouped_comments = relationship(
    'Comment',
    collection_class=GroupedCollection
  )
</snippet></ROW><ROW><id>14950090</id><snippet>&gt;&gt;&gt; user.grouped_comments
{
  'resource_id_1': {'resource': &lt;Resource 1&gt;, 'comments': [&lt;Comment ...&gt;, &lt;Comment ...&gt;]},
  'resource_id_2': {'resource': &lt;Resource 2&gt;, 'comments': [&lt;Comment ...&gt;]}
}
&gt;&gt;&gt; user.grouped_comments.values()
[
  {'resource': &lt;Resource 1&gt;, 'comments': [&lt;Comment ...&gt;, &lt;Comment ...&gt;]},
  {'resource': &lt;Resource 2&gt;, 'comments': [&lt;Comment ...&gt;]}
]
</snippet></ROW><ROW><id>14950090</id><snippet>GroupedCollection</snippet></ROW><ROW><id>14950162</id><snippet>row_a = ["rowname","items1","items2"]
def set_rowname(row, value):
    row[1] = value
set_rowname(row_a, "another_rowname")
</snippet></ROW><ROW><id>14950356</id><snippet>ast</snippet></ROW><ROW><id>14950356</id><snippet>import ast

d = ast.literal_eval("{'code1':1,'code2':1}")
</snippet></ROW><ROW><id>14950356</id><snippet>literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
</snippet></ROW><ROW><id>14950495</id><snippet>&gt;&gt;&gt; width = 40
&gt;&gt;&gt; '{0:&lt;{width}}'.format('aa', width=width)
'aa                                      '
</snippet></ROW><ROW><id>14950568</id><snippet>chmod 755 my-program.py
ln -s my-program.py /usr/local/bin/my-program
</snippet></ROW><ROW><id>14950568</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>14950570</id><snippet>Field</snippet></ROW><ROW><id>14950570</id><snippet>f</snippet></ROW><ROW><id>14950570</id><snippet>def walk(f, d, numSteps):
         ^
</snippet></ROW><ROW><id>14951061</id><snippet>parser = argparse.ArgumentParser('Cool', add_help=False)
parser.add_argument('-h', '--hi', action='store_true', dest='hi')
</snippet></ROW><ROW><id>14951100</id><snippet>pandas</snippet></ROW><ROW><id>14951100</id><snippet>numpy</snippet></ROW><ROW><id>14951100</id><snippet>In [5]: import pandas as pd

# generate some data
In [6]: idx = pd.date_range('2013-01-01', pd.datetime.today(), freq='H')

In [7]: s = pd.Series(np.random.random_sample(idx.size) * 1000, index=idx)

In [8]: s.describe() # print some statistics 
Out[8]: 
count    1184.000000
mean      499.817905
std       291.446537
min         0.292728
25%       252.537037
50%       485.828521
75%       758.535148
max       999.681320

In [9]: s.index
Out[9]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 00:00:00, ..., 2013-02-19 07:00:00]
Length: 1184, Freq: H, Timezone: None

# downsample to daily using median value for a day and plot it
In [10]: s.resample('D', how='median').plot()
Out[10]: &lt;matplotlib.axes.AxesSubplot at 0x3d88ad0&gt;
</snippet></ROW><ROW><id>14951304</id><snippet>person</snippet></ROW><ROW><id>14951304</id><snippet>request</snippet></ROW><ROW><id>14951304</id><snippet>ModelAdmin.get_form()</snippet></ROW><ROW><id>14951304</id><snippet>InlineModelAdmin.get_formset()</snippet></ROW><ROW><id>14951304</id><snippet>from functools import partial

class MyModelAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        kwargs['formfield_callback'] = partial(self.formfield_for_dbfield, request=request, obj=obj)
        return super(MyModelAdmin, self).get_form(request, obj, **kwargs)

    def formfield_for_dbfield(self, db_field, **kwargs):
        person = kwargs.pop('obj', None)
        formfield = super(MyModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == "car" and person:
            formfield.queryset = Cars.objects.filter(owner=person)
        return formfield 

# or its inline
class MyInlineModelAdmin(admin.StackedInline):
    def get_formset(self, request, obj=None, **kwargs):
        kwargs['formfield_callback'] = partial(self.formfield_for_dbfield, request=request, obj=obj)
        return super(MyInlineModelAdmin, self).get_formset(request, obj, **kwargs)

    def formfield_for_dbfield(self, db_field, **kwargs):
        person = kwargs.pop('obj', None)
        formfield = super(MyInlineModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)
        if db_field.name == "car" and person:
            formfield.queryset = Cars.objects.filter(owner=person)
        return formfield 
</snippet></ROW><ROW><id>14951304</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        kwargs['formfield_callback'] = partial(self.formfield_for_dbfield, request=request, obj=obj)
        return super(MyModelAdmin, self).get_form(request, obj, **kwargs)

    def formfield_for_dbfield(self, db_field, **kwargs):
        if db_field.name != "car":
            kwargs.pop('obj', None)
        return super(MyModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)

    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        person = kwargs.pop('obj', None)
        if db_field.name == "car" and person:
            kwargs['queryset'] = Cars.objects.filter(owner=person)
        return super(MyModelAdmin, self).formfield_for_manytomany(db_field, request, **kwargs)
</snippet></ROW><ROW><id>14951764</id><snippet>os.getuid</snippet></ROW><ROW><id>14951764</id><snippet>os.geteuid</snippet></ROW><ROW><id>14951764</id><snippet>os</snippet></ROW><ROW><id>14951764</id><snippet>getuid</snippet></ROW><ROW><id>14951764</id><snippet>geteuid</snippet></ROW><ROW><id>14951764</id><snippet>passwd</snippet></ROW><ROW><id>14951764</id><snippet>passwd</snippet></ROW><ROW><id>14951764</id><snippet>setuid bit</snippet></ROW><ROW><id>14951764</id><snippet>root</snippet></ROW><ROW><id>14951764</id><snippet>passwd</snippet></ROW><ROW><id>14951764</id><snippet>UID</snippet></ROW><ROW><id>14951764</id><snippet>passwd</snippet></ROW><ROW><id>14952021</id><snippet>__str__</snippet></ROW><ROW><id>14952021</id><snippet>__repr__</snippet></ROW><ROW><id>14952021</id><snippet>__repr__</snippet></ROW><ROW><id>14952021</id><snippet>TestClass()</snippet></ROW><ROW><id>14952021</id><snippet>__repr__</snippet></ROW><ROW><id>14952021</id><snippet>&lt;__main__.TestClass instance at 0xdeadbeef&gt;</snippet></ROW><ROW><id>14952021</id><snippet>__repr__</snippet></ROW><ROW><id>14952021</id><snippet>def __repr__(self):
    return self.__class__.__name__ + '()' # put constructor arguments in the ()
</snippet></ROW><ROW><id>14952021</id><snippet>__str__</snippet></ROW><ROW><id>14952021</id><snippet>__repr__</snippet></ROW><ROW><id>14952021</id><snippet>__str__</snippet></ROW><ROW><id>14952021</id><snippet>def __str__(self):
    return "(TestClass instance)"
</snippet></ROW><ROW><id>14952788</id><snippet>n</snippet></ROW><ROW><id>14952788</id><snippet>(n, n)</snippet></ROW><ROW><id>14952788</id><snippet>mask = np.triu_indices(x.shape[0], 1)
para = np.sqrt((x[:, None] - x)**2 + (y[:, None] - y)**2)
perp = np.abs(z[:, None] - z)
hist, _, _ = np.histogram2d(para[mask], perp[mask], bins=[rpbins, pibins])
</snippet></ROW><ROW><id>14952788</id><snippet>mask</snippet></ROW><ROW><id>14952788</id><snippet>1</snippet></ROW><ROW><id>14952788</id><snippet>0</snippet></ROW><ROW><id>14952788</id><snippet>para</snippet></ROW><ROW><id>14952788</id><snippet>perp</snippet></ROW><ROW><id>14952788</id><snippet>items = 100
rpbins, pibins = np.linspace(0, 1, 3), np.linspace(0, 1, 3)
x = np.random.rand(items)
y = np.random.rand(items)
z = np.random.rand(items)
</snippet></ROW><ROW><id>14952788</id><snippet>hist</snippet></ROW><ROW><id>14952788</id><snippet>out</snippet></ROW><ROW><id>14952788</id><snippet>&gt;&gt;&gt; hist
array([[ 1795.,   651.],
       [ 1632.,   740.]])
&gt;&gt;&gt; out
array([[ 3690.,  1302.],
       [ 3264.,  1480.]])
</snippet></ROW><ROW><id>14952788</id><snippet>out[i, j] = 2 * hist[i, j]</snippet></ROW><ROW><id>14952788</id><snippet>i = j = 0</snippet></ROW><ROW><id>14952788</id><snippet>out[0, 0] = 2 * hist[0, 0] + items</snippet></ROW><ROW><id>14952788</id><snippet>0</snippet></ROW><ROW><id>14952788</id><snippet>items = 1000
rpbins, pibins = np.linspace(0, 1, 3), np.linspace(0, 1, 3)
x, y, z = np.random.rand(3, items)

def hist1(x, y, z, rpbins, pibins) :
    mask = np.triu_indices(x.shape[0], 1)
    para = np.sqrt((x[:, None] - x)**2 + (y[:, None] - y)**2)
    perp = np.abs(z[:, None] - z)
    hist, _, _ = np.histogram2d(para[mask], perp[mask], bins=[rpbins, pibins])
    return hist

def hist2(x, y, z, rpbins, pibins) :
    mask = np.triu_indices(x.shape[0], 1)
    para = np.sqrt((x[:, None] - x)[mask]**2 + (y[:, None] - y)[mask]**2)
    perp = np.abs((z[:, None] - z)[mask])
    hist, _, _ = np.histogram2d(para, perp, bins=[rpbins, pibins])
    return hist

def hist3(x, y, z, rpbins, pibins) :
    mask = np.triu_indices(x.shape[0], 1)
    para = np.sqrt(((x[:, None] - x)**2 + (y[:, None] - y)**2)[mask])
    perp = np.abs((z[:, None] - z)[mask])
    hist, _, _ = np.histogram2d(para, perp, bins=[rpbins, pibins])
    return hist

In [10]: %timeit -n1 -r10 hist1(x, y, z, rpbins, pibins)
1 loops, best of 10: 289 ms per loop

In [11]: %timeit -n1 -r10 hist2(x, y, z, rpbins, pibins)
1 loops, best of 10: 294 ms per loop

In [12]: %timeit -n1 -r10 hist3(x, y, z, rpbins, pibins)
1 loops, best of 10: 278 ms per loop
</snippet></ROW><ROW><id>14953456</id><snippet>self.add(a, b)
</snippet></ROW><ROW><id>14953456</id><snippet>add</snippet></ROW><ROW><id>14953456</id><snippet>()</snippet></ROW><ROW><id>14953456</id><snippet>self.add</snippet></ROW><ROW><id>14953456</id><snippet>dict</snippet></ROW><ROW><id>14953456</id><snippet>print operation[operator](a, b)
</snippet></ROW><ROW><id>14953456</id><snippet>()</snippet></ROW><ROW><id>14953456</id><snippet>def get_result(self, a, b, operator):
    operation = {
        "+" : self.add,      
        "-" : self.subtract, 
        "*" : self.multiply,
        "/" : self.divide,
    }
    print operation[operator](a, b)
</snippet></ROW><ROW><id>14953456</id><snippet>dict</snippet></ROW><ROW><id>14953456</id><snippet>self</snippet></ROW><ROW><id>14953789</id><snippet>def getHandBrakeInformation(l):
    currentTitle = None
    titleDict = {}
    returnDict = {}
    for line in l:
        if line.startswith('+ title'):
            titleNum = line.rstrip(':').split(' ')
            currentTitle = "%s_%s" % (titleNum[1], titleNum[2])
            titleDict[currentTitle] = []
            returnDict[currentTitle] = {}
        else:
            titleDict[currentTitle].append(line[2:])

    currentTrack = None
    for title in titleDict:
        for key in titleDict[title]:
            if key.startswith('+ duration:'):
                duration = key.split(' ')
                duration = duration[2]
                returnDict[title]['duration'] = duration
                titleDict[title].remove(key)
            elif key.startswith('+ audio') or key.startswith('+ subtitle'):
                currentTrack = key[2:-1].replace(' ', '_')
                returnDict[title][currentTrack] = {}
            elif currentTrack is not None and not key.startswith('+'):
                currentTrackValueSplit = key[4:].split(',', 1)
                returnDict[title][currentTrack][currentTrackValueSplit[0].strip()] = currentTrackValueSplit[1].strip()
            else:
                currentTrack = None
    return returnDict
</snippet></ROW><ROW><id>14953789</id><snippet>{'title_1': {'audio_tracks': {'1': 'English (AC3) (5.1 ch) (iso639-2: eng), 48000Hz, 384000bps',
   '2': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps',
   '3': 'Deutsch (AC3) (5.1 ch) (iso639-2: deu), 48000Hz, 384000bps',
   '4': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '02:06:44',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_2': {'audio_tracks': {'1': 'English (AC3) (5.1 ch) (iso639-2: eng), 48000Hz, 384000bps',
   '2': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps',
   '3': 'Deutsch (AC3) (5.1 ch) (iso639-2: deu), 48000Hz, 384000bps',
   '4': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:00:12',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_3': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:01:51',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_4': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:00:19',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_5': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:00:34',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_6': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:00:35',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_7': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:00:34',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}},
 'title_8': {'audio_tracks': {'1': 'English (AC3) (Dolby Surround) (iso639-2: eng), 48000Hz, 192000bps'},
  'duration': '00:01:37',
  'subtitle_tracks': {'1': 'English (iso639-2: eng) (Bitmap)(VOBSUB)',
   '10': 'Czech (iso639-2: ces) (Bitmap)(VOBSUB)',
   '11': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '2': 'Deutsch (iso639-2: deu) (Bitmap)(VOBSUB)',
   '3': 'Italiano (iso639-2: ita) (Bitmap)(VOBSUB)',
   '4': 'Francais (iso639-2: fra) (Bitmap)(VOBSUB)',
   '5': 'Norsk (iso639-2: nor) (Bitmap)(VOBSUB)',
   '6': 'Dansk (iso639-2: dan) (Bitmap)(VOBSUB)',
   '7': 'Svenska (iso639-2: swe) (Bitmap)(VOBSUB)',
   '8': 'Suomi (iso639-2: fin) (Bitmap)(VOBSUB)',
   '9': 'Polish (iso639-2: pol) (Bitmap)(VOBSUB)'}}}
</snippet></ROW><ROW><id>14953879</id><snippet>python generate_efficient_map_file.py dirname
</snippet></ROW><ROW><id>14953879</id><snippet>python -V
</snippet></ROW><ROW><id>14953885</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.CreateStatusBar()

        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label="Test")
        self.button.SetToolTipString("This is for testing purposes!")

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>14953885</id><snippet>import wx

class TipButton(wx.Button):
    """Subclass of wx.Button, has the same functionality. 
    Allows user to set Status Bar help by using SetStatusText method.
    """
    current = None

    def __init__(self, *args, **kwargs):
        wx.Button.__init__(self, *args, **kwargs)

    def SetStatusText(self, help_string, status_bar_frame):
        self.help_string = help_string
        self.status_bar_frame = status_bar_frame
        self.Bind(wx.EVT_ENTER_WINDOW, self._ShowHelp)
        self.Bind(wx.EVT_LEAVE_WINDOW, self._HideHelp)       

    def _ShowHelp(self, e):
        TipButton.current = self.GetLabel()
        self.status_bar_frame.SetStatusText(self.help_string)

    def _HideHelp(self, e):
        if self.GetLabel() == TipButton.current:
            self.status_bar_frame.SetStatusText("")        

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.CreateStatusBar()

        self.panel = wx.Panel(self)
      # Instead of 
      # self.button1 = wx.Button(self.panel, label="Test1", size=(150, 50))
        self.button1 = TipButton(self.panel, label="Test1", size=(150, 50))
        self.button1.SetStatusText("This is for testing purposes", self)
        self.button1.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

      # Instead of 
      # self.button2 = wx.Button(self.panel, label="Test2", size=(150, 50))
        self.button2 = TipButton(self.panel, label="Test2", size=(150, 50))
        self.button2.SetStatusText("This is jusst for fun!", self)
        self.button2.SetFont(wx.Font(14, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, u'Consolas'))

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button1)
        self.sizer.Add(self.button2)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()      

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>14954254</id><snippet>sudo python3.2 setup.py install
</snippet></ROW><ROW><id>14954254</id><snippet>sudo python3 setup.py install #distributed
sudo python3 setup.py install #pip
sudo pip-3.2 install pymongo
</snippet></ROW><ROW><id>14954777</id><snippet>.....
localpath='C:\Users\handsonexpert\Documents\file3.txt'
remotepath='/Users/ihussain/testdir/file3.txt'
.....
sftp.get(remotepath, localpath)
</snippet></ROW><ROW><id>14954883</id><snippet>pyplot.bloxplot</snippet></ROW><ROW><id>14954883</id><snippet>positions</snippet></ROW><ROW><id>14954883</id><snippet>x = np.array([1000,2000])
data1 = np.array([np.random.normal(loc=0.5,size=100),np.random.normal(loc=1.5,size=100)]).T
data2 = np.array([np.random.normal(loc=2.5,size=100),np.random.normal(loc=0.75,size=100)]).T
plt.figure()
plt.boxplot(data1,0,'',positions=x-100,widths=150)
plt.boxplot(data2,0,'',positions=x+100,widths=150)
plt.xlim(500,2500)
plt.xticks(x)
plt.show()
</snippet></ROW><ROW><id>14954883</id><snippet>widths</snippet></ROW><ROW><id>14955349</id><snippet>def write(data):
    """
    The producer will write data by calling this method.

    The implementation must be non-blocking and perform whatever
    buffering is necessary.  If the producer has provided enough data
    for now and it is a L{IPushProducer}, the consumer may call its
    C{pauseProducing} method.
    """
</snippet></ROW><ROW><id>14955672</id><snippet>foo</snippet></ROW><ROW><id>14955672</id><snippet>from foo import bar</snippet></ROW><ROW><id>14956590</id><snippet>def f(n, k, s):
    if n == 1:
        return int(k &gt;= s)
        # or: 1 if k &gt;=s else 0 
    return sum(f(n-1, j, s-j) for j in range(1, min(k, s)+1))
    # to make it faster:
    #return sum(f(n-1, j, s-j) for j in range(1, min(k, s)+1) if n*k &gt;= s)
</snippet></ROW><ROW><id>14956590</id><snippet>def f(n, k, s):
    ans = 0
    if n == 1:
        return int(k &gt;= s)

    for j in range(1, min({k,s}) + 1):
        print j
        if n*k &gt;= s:
            ans += f(n-1,j,s-j)
    return ans
</snippet></ROW><ROW><id>14956590</id><snippet>f(10, 12, 70)</snippet></ROW><ROW><id>14956718</id><snippet>a[np.argmin(a[:,1]),0]
</snippet></ROW><ROW><id>14956718</id><snippet>&gt;&gt;&gt; a[:,1]
array([ 4,  1, 10,  8])
</snippet></ROW><ROW><id>14956718</id><snippet>&gt;&gt;&gt; np.argmin(a[:,1])
1
</snippet></ROW><ROW><id>14956718</id><snippet>a</snippet></ROW><ROW><id>14956718</id><snippet>&gt;&gt;&gt; a[np.argmin(a[:,1])]
array([2, 1])
</snippet></ROW><ROW><id>14956718</id><snippet>&gt;&gt;&gt; a[np.argmin(a[:,1])][0]
2
</snippet></ROW><ROW><id>14956718</id><snippet>&gt;&gt;&gt; a[np.argmin(a[:,1]),0]
2
</snippet></ROW><ROW><id>14956754</id><snippet>config = config.Config()
</snippet></ROW><ROW><id>14956754</id><snippet>config</snippet></ROW><ROW><id>14956754</id><snippet>config</snippet></ROW><ROW><id>14956754</id><snippet>Config</snippet></ROW><ROW><id>14956754</id><snippet>from Analyzer import config

config_instance = config.Config()
sqlite_instance = config.Sqlite()
</snippet></ROW><ROW><id>14956950</id><snippet>class MyMemCacheProtocol(MemCacheProtocol):

    MAX_KEY_LENGTH = 1000
</snippet></ROW><ROW><id>14957089</id><snippet>global i
i=0

def rabbit():
    global i
    print "rabbit ",i


#main here
if __name__ == '__main__':
    rabbit()
</snippet></ROW><ROW><id>14957119</id><snippet>xml = xml.split('&lt;/response&gt;', 1)[0] + '&lt;/response&gt;'
</snippet></ROW><ROW><id>14957278</id><snippet>import ast
tweet = ast.literal_eval(row[0])
</snippet></ROW><ROW><id>14957300</id><snippet>str</snippet></ROW><ROW><id>14957300</id><snippet>s = ''
for bla in bli:
  s += bla
s = 'it works ' + s
</snippet></ROW><ROW><id>14957300</id><snippet>s = 'it works ' + ''.join(bli)
</snippet></ROW><ROW><id>14957399</id><snippet>for eachLetter in range(len(string)):
</snippet></ROW><ROW><id>14957399</id><snippet>eachLetter</snippet></ROW><ROW><id>14957399</id><snippet>eachLetter[count]</snippet></ROW><ROW><id>14957399</id><snippet>string[eachLetter]</snippet></ROW><ROW><id>14957571</id><snippet>ShowAppsView.as_view()(self.request)
</snippet></ROW><ROW><id>14957571</id><snippet>return ShowAppsView.as_view()(self.request)
</snippet></ROW><ROW><id>14957666</id><snippet>sorted</snippet></ROW><ROW><id>14957666</id><snippet>itemgetter</snippet></ROW><ROW><id>14957666</id><snippet>&gt;&gt;&gt; a = [ ["id1", 123], ["id2", 1], ["id3", 6] ]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(a, key=itemgetter(1), reverse=True)
[['id1', 123], ['id3', 6], ['id2', 1]]
</snippet></ROW><ROW><id>14957666</id><snippet>lambda</snippet></ROW><ROW><id>14957666</id><snippet>&gt;&gt;&gt; sorted(a, key=lambda L: L[1], reverse=True)
</snippet></ROW><ROW><id>14957676</id><snippet>YUM</snippet></ROW><ROW><id>14957841</id><snippet>class GameResource(ModelResource):
    activities = fields.ToManyField(ActivityResource, 'activities', full=True)
</snippet></ROW><ROW><id>14958002</id><snippet>19:30:00, 18/02/2013
</snippet></ROW><ROW><id>14958002</id><snippet>strptime</snippet></ROW><ROW><id>14958002</id><snippet>%H:%M:%S, %d/%m/%Y
</snippet></ROW><ROW><id>14958252</id><snippet>&amp;</snippet></ROW><ROW><id>14958252</id><snippet>operator.and_</snippet></ROW><ROW><id>14958252</id><snippet>'AND'</snippet></ROW><ROW><id>14958252</id><snippet>&gt;&gt;&gt; mylist = [Q(question__contains='dinner'), Q(question__contains='meal')]
# AND
&gt;&gt;&gt; Poll.objects.filter(reduce(operator.and_, mylist))
# could be 
&gt;&gt;&gt; Poll.objects.filter(*mylist)
</snippet></ROW><ROW><id>14958386</id><snippet>raw_input()</snippet></ROW><ROW><id>14958386</id><snippet>lambda</snippet></ROW><ROW><id>14958386</id><snippet>$ cat ./name_getter.py
#!/usr/bin/env python

class NameGetter(object):

    def get_name(self):
        self.name = raw_input('What is your name? ')

    def greet(self):
        print 'Hello, ', self.name, '!'

    def run(self):
        self.get_name()
        self.greet()

if __name__ == '__main__':
    ng = NameGetter()
    ng.run()

$ echo Derek | ./name_getter.py 
What is your name? Hello,  Derek !
</snippet></ROW><ROW><id>14958386</id><snippet>$ cat ./t_name_getter.py
#!/usr/bin/env python

import unittest
import name_getter

class TestNameGetter(unittest.TestCase):

    def test_get_alice(self):
        name_getter.raw_input = lambda _: 'Alice'
        ng = name_getter.NameGetter()
        ng.get_name()
        self.assertEquals(ng.name, 'Alice')

    def test_get_bob(self):
        name_getter.raw_input = lambda _: 'Bob'
        ng = name_getter.NameGetter()
        ng.get_name()
        self.assertEquals(ng.name, 'Bob')

if __name__ == '__main__':
    unittest.main()

$ ./t_name_getter.py -v
test_get_alice (__main__.TestNameGetter) ... ok
test_get_bob (__main__.TestNameGetter) ... ok

----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>14958695</id><snippet>run(host='localhost', port=8080, debug=True)
</snippet></ROW><ROW><id>14958695</id><snippet>run(host='192.168.1.10', port=8080, debug=True)
</snippet></ROW><ROW><id>14958695</id><snippet>bottle.run</snippet></ROW><ROW><id>14958695</id><snippet>run(host='0.0.0.0', port=8080, debug=True)
</snippet></ROW><ROW><id>14958695</id><snippet>http://192.168.1.10:8080/hello/world</snippet></ROW><ROW><id>14958707</id><snippet>hlines()</snippet></ROW><ROW><id>14958707</id><snippet>vlines()</snippet></ROW><ROW><id>14958707</id><snippet>import numpy
from matplotlib import pyplot

x_arr = numpy.random.random(10)-0.5; y_arr = numpy.arange(10)

pyplot.hlines(y_arr, 0, x_arr, color='red')  # Stems
pyplot.plot(x_arr, y_arr, 'D')  # Stem ends
pyplot.plot([0, 0], [y_arr.min(), y_arr.max()], '--')  # Middle bar
</snippet></ROW><ROW><id>14958707</id><snippet>hlines()</snippet></ROW><ROW><id>14959001</id><snippet>object.__hash__()</snippet></ROW><ROW><id>14959046</id><snippet>datetime</snippet></ROW><ROW><id>14959046</id><snippet>dateutil.parser</snippet></ROW><ROW><id>14959046</id><snippet>from dateutil import parser

dt = parser.parse(s)
</snippet></ROW><ROW><id>14959046</id><snippet>iso8601</snippet></ROW><ROW><id>14959046</id><snippet>import iso8601
datetimetext, tz = s.rsplit(None, 1)  # only grab the timezone portion.
timezone = iso8601.iso8601.parse_timezone('{}:{}'.format(tz[:3], tz[3:]))
dt = datetime.strptime(datetimetext, '%a %b %d %H:%M:%S %Y').replace(tzinfo=timezone)
</snippet></ROW><ROW><id>14959046</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; s = 'Fri Aug 17 12:34:00 2012 +0000'
&gt;&gt;&gt; import iso8601
&gt;&gt;&gt; timezone = iso8601.iso8601.parse_timezone('{}:{}'.format(tz[:3], tz[3:]))
&gt;&gt;&gt; datetime.datetime.strptime(datetimetext, '%a %b %d %H:%M:%S %Y').replace(tzinfo=timezone)
datetime.datetime(2012, 8, 17, 12, 34, tzinfo=&lt;FixedOffset '+00:00'&gt;)
&gt;&gt;&gt; from dateutil import parser
&gt;&gt;&gt; parser.parse(s)
datetime.datetime(2012, 8, 17, 12, 34, tzinfo=tzutc())
</snippet></ROW><ROW><id>14959053</id><snippet>&lt;input type="submit" name="do" value="Submit OCTOPUS"&gt;
</snippet></ROW><ROW><id>14959053</id><snippet>'value' : 'Submit OCTOPUS', 
'name' : 'do',
</snippet></ROW><ROW><id>14959053</id><snippet>'do' : 'Submit OCTOPUS'
</snippet></ROW><ROW><id>14959053</id><snippet>import requests

octopus_url = "http://octopus.cbr.su.se/"

data = {
    'do' : 'Submit OCTOPUS',
    'sequence' : 'QPRRKLCILHRNPGRCYDKIPAFYYNQKKKQCERFDWSGCGGNSNRFKTIEECRRTCIG'
}

s = requests.Session()
r = s.post( octopus_url, data=data )
print r.text
</snippet></ROW><ROW><id>14959096</id><snippet>from celery import subtask

chain = subtask('task', queue = 'beetroot') | subtask('task', queue = 'beetroot')
</snippet></ROW><ROW><id>14959096</id><snippet>chain = task.s().apply_async(queue = 'beetroot') | task.s().apply_async(queue = 'beetroot')
</snippet></ROW><ROW><id>14959096</id><snippet>chain.apply_async()
</snippet></ROW><ROW><id>14959096</id><snippet>chain.delay()
</snippet></ROW><ROW><id>14959148</id><snippet>&gt;&gt;&gt; string = '+CPBR: 1,"111",129,"0|2|XX"^M'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search('\|([^|"]+)"',string).group(1)
'XX'
&gt;&gt;&gt; string = '+CPBR: 1,"111",129,"0|2|9X"^M'
'9X'
&gt;&gt;&gt; string = '+CPBR: 1,"111",129,"0|2|ABC"^M'
'ABC'
</snippet></ROW><ROW><id>14959257</id><snippet>print type(sender)</snippet></ROW><ROW><id>14959257</id><snippet>print sender</snippet></ROW><ROW><id>14959257</id><snippet>print dir(sender)</snippet></ROW><ROW><id>14959257</id><snippet>==</snippet></ROW><ROW><id>14959257</id><snippet>dir(sender)</snippet></ROW><ROW><id>14959257</id><snippet>type(sender)</snippet></ROW><ROW><id>14959297</id><snippet>from django.views.generic.base import RedirectView

urlpatterns = patterns('',
    url(r'^$', 'macmonster.views.home'),
    #url(r'^macmon_home$', 'macmonster.views.home'),
    url(r'^macmon_output/$', 'macmonster.views.output'),
    url(r'^macmon_about/$', 'macmonster.views.about'),
    url(r'^.*$', RedirectView.as_view(url='&lt;url_to_home_view&gt;', permanent=False), name='index')
)
</snippet></ROW><ROW><id>14959297</id><snippet>url</snippet></ROW><ROW><id>14959297</id><snippet>&lt;url_to_home_view&gt;</snippet></ROW><ROW><id>14959297</id><snippet>permanent=False</snippet></ROW><ROW><id>14959297</id><snippet>permanent=True</snippet></ROW><ROW><id>14959301</id><snippet>from collections import namedtuple
value = namedtuple('Value', 'N')(len(roots["roots"]))
</snippet></ROW><ROW><id>14959384</id><snippet>logger = logging.getLogger('test.important_module')
logger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>14959384</id><snippet>'loggers': {
    'test.important_module': {
        'level': 'DEBUG',         # &lt;&lt;&lt; HERE
        'handlers': [
            'db_log'
        ],
},
</snippet></ROW><ROW><id>14959412</id><snippet>python.path=\
/path/to/project/build:\
/path/to/project/src:\
/home/me/jdevel/extras/2.5.3/Lib:\
/home/me/jdevel/extras/2.5.3/Lib/site-packages
</snippet></ROW><ROW><id>14959412</id><snippet>python.path=\
/path/to/project/build/classes:\
/path/to/project/src:\
/home/me/jdevel/extras/2.5.3/Lib:\
/home/me/jdevel/extras/2.5.3/Lib/site-packages
</snippet></ROW><ROW><id>14959412</id><snippet>/path/to/project/build/classes</snippet></ROW><ROW><id>14959412</id><snippet>/path/to/project/build</snippet></ROW><ROW><id>14959474</id><snippet>def delete_server(instanceId):
    conn.terminate_instances(instance_ids=[instanceId])
</snippet></ROW><ROW><id>14959474</id><snippet>conn</snippet></ROW><ROW><id>14959474</id><snippet>boto</snippet></ROW><ROW><id>14959474</id><snippet>terminate_instances</snippet></ROW><ROW><id>14959505</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>14959505</id><snippet>TestCase</snippet></ROW><ROW><id>14959505</id><snippet>class TestBase(object):
    # base tests to be reused

class TestCaseA(TestBase, unittest.TestCase):
    # Concrete tests, reusing tests defined on TestBase

class TestCaseB(TestBase, unittest.TestCase):
    # Concrete tests, reusing tests defined on TestBase
</snippet></ROW><ROW><id>14959713</id><snippet>import sys
sys.stdout.encoding
</snippet></ROW><ROW><id>14959713</id><snippet>LC_CTYPE</snippet></ROW><ROW><id>14959713</id><snippet>PYTHONIOENCODING</snippet></ROW><ROW><id>14959713</id><snippet>$ PYTHONIOENCODING=latin-1 python -c 'import sys; print sys.stdout.encoding'
latin-1
$  PYTHONIOENCODING=utf8 python -c 'import sys; print sys.stdout.encoding'
utf8
</snippet></ROW><ROW><id>14959832</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>14959832</id><snippet>from collections import defaultdict

a = defaultdict(bool)
a[i,j,k,m] = True
</snippet></ROW><ROW><id>14959977</id><snippet>' '</snippet></ROW><ROW><id>14960078</id><snippet>if __name__ == '__main__':
    if len(sys.argv) &gt; 1:
        folder = sys.argv[1]
    else:
        print "Syntax: %s folder" % sys.argv[0]
        sys.exit(1)
    folder = os.path.realpath(folder)
    if not os.path.isdir(folder):
        print "%s is not a folder. Terminating." % (folder,)
        sys.exit(1)
    # walk all directories inside `folder`
    for (dirname, subdirs, files) in os.walk(folder):
        subdir = os.path.realpath(dirname)
        if not os.path.isdir(subdir):
            continue
        reactor.callWhenRunning(process_folder, subdir)
        reactor.run()
</snippet></ROW><ROW><id>14960330</id><snippet>numpy.savetext()</snippet></ROW><ROW><id>14960330</id><snippet>numpy.savetxt(filename, arr, header=arr.dtype.names)
</snippet></ROW><ROW><id>14960330</id><snippet>for arr_row in arr:
    c.writerow(" ".join(map(str, arr_row)))
</snippet></ROW><ROW><id>14960406</id><snippet>class infoClass(object):
    pass

def infoCollection(string_a, string_b, string_c):
    i = infoClass()
    i.string_a = string_a
    i.string_b = string_b
    i.string_c = string_c
    return i
</snippet></ROW><ROW><id>14960407</id><snippet>1.  At the linux terminal type cat
2.  press enter once.
3.  enter letters: foo
4.  press &lt;Ctrl-D&gt; once, you don't get back to the terminal.
5.  press &lt;Ctrl-D&gt; again, you are brought back to the terminal.
</snippet></ROW><ROW><id>14960407</id><snippet>user@defiant ~ $ cat
foofoouser@defiant ~ $
</snippet></ROW><ROW><id>14960427</id><snippet>symlog</snippet></ROW><ROW><id>14960427</id><snippet>xscale()</snippet></ROW><ROW><id>14960427</id><snippet>log(0)</snippet></ROW><ROW><id>14960687</id><snippet>def traverse(l):
    for x in l:
        if isinstance(x, list):
            traverse(x)
    callback(l)
</snippet></ROW><ROW><id>14960687</id><snippet>callback</snippet></ROW><ROW><id>14960687</id><snippet>print</snippet></ROW><ROW><id>14960687</id><snippet>['e']
['c', ['e'], 'd']
['a', ['c', ['e'], 'd'], 'b']
</snippet></ROW><ROW><id>14960849</id><snippet>easy_install</snippet></ROW><ROW><id>14960849</id><snippet>setup.py</snippet></ROW><ROW><id>14960849</id><snippet>setup.cfg</snippet></ROW><ROW><id>14960849</id><snippet>[build_ext]
include_dirs = /path/to/headers
library_dirs = /path/to/libs
</snippet></ROW><ROW><id>14961000</id><snippet>string_escape</snippet></ROW><ROW><id>14961000</id><snippet>print s.encode('string_escape')
</snippet></ROW><ROW><id>14961000</id><snippet>repr()</snippet></ROW><ROW><id>14961000</id><snippet>print repr(s)
</snippet></ROW><ROW><id>14961000</id><snippet>&gt;&gt;&gt; s = "String:\tA"
&gt;&gt;&gt; print s.encode('string_escape')
String:\tA
&gt;&gt;&gt; print repr(s)
'String:\tA'
</snippet></ROW><ROW><id>14961000</id><snippet>unicode_escape</snippet></ROW><ROW><id>14961000</id><snippet>print(s.encode('unicode_escape'))
</snippet></ROW><ROW><id>14961000</id><snippet>&gt;&gt;&gt; s = "String:\tA"
&gt;&gt;&gt; print(s.encode('unicode_escape'))
b'String:\\tA'
&gt;&gt;&gt; print(s.encode('unicode_escape').decode('ASCII'))
String:\tA
</snippet></ROW><ROW><id>14961055</id><snippet>None</snippet></ROW><ROW><id>14961055</id><snippet>def my_remove(lst,what):
   lst.remove(what)
   return lst
</snippet></ROW><ROW><id>14961055</id><snippet>list(something_convertible_to_list).remove('item')
</snippet></ROW><ROW><id>14961055</id><snippet>[x for x in something_iterable if x != 'item']
</snippet></ROW><ROW><id>14961055</id><snippet>list.remove</snippet></ROW><ROW><id>14961055</id><snippet>'item'</snippet></ROW><ROW><id>14961055</id><snippet>'item'</snippet></ROW><ROW><id>14961459</id><snippet>In [1]: import numpy as np

In [2]: a = np.matrix([.69,.41])

In [3]: b = np.matrix([ 0.81818182, 0.18181818])

In [4]: np.asarray(a) * np.asarray(b)
Out[4]: array([[ 0.56454546,  0.07454545]])

In [5]: np.matrix(_)
Out[5]: matrix([[ 0.56454546,  0.07454545]])
</snippet></ROW><ROW><id>14961462</id><snippet>my $re = qr#///--STRING TEXT ONE. Ends with the word EDIT.(?:.*)--///(?:(?:.*\n))*///--END is the first word in STRING TEXT TWO--///#;
</snippet></ROW><ROW><id>14961577</id><snippet>soup = bs4.BeautifulSoup(S, 'xml')
</snippet></ROW><ROW><id>14961577</id><snippet>selfClosingTags</snippet></ROW><ROW><id>14961577</id><snippet>In [1]: import bs4
In [2]: S = '''&lt;foo&gt; &lt;bar a="3"/&gt; &lt;/foo&gt;'''
In [3]: soup = bs4.BeautifulSoup(S, 'xml')
In [4]: print soup.prettify()
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;foo&gt;
 &lt;bar a="3"/&gt;
&lt;/foo&gt;
</snippet></ROW><ROW><id>14961627</id><snippet>ord()</snippet></ROW><ROW><id>14961627</id><snippet>map()</snippet></ROW><ROW><id>14961627</id><snippet>&gt;&gt;&gt; s = '\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00'
&gt;&gt;&gt; map(ord, s)
[0, 0, 0, 1, 0, 0, 0, 255, 255, 0, 0]
</snippet></ROW><ROW><id>14961692</id><snippet>ydata</snippet></ROW><ROW><id>14961692</id><snippet>cb</snippet></ROW><ROW><id>14961692</id><snippet>color = cb.cmap(cb.norm(event.mouseevent.ydata))
</snippet></ROW><ROW><id>14961740</id><snippet>setup(
   ...
   options=dict(
      py2app=dict(
        includes=["module1", "module"],
      ),
   ),
   ...
)
</snippet></ROW><ROW><id>14961800</id><snippet>if not isinstance(x,basestring):
   ...
</snippet></ROW><ROW><id>14961800</id><snippet>isinstance</snippet></ROW><ROW><id>14961800</id><snippet>isinstance</snippet></ROW><ROW><id>14962011</id><snippet>for url in urls:
    try:
        a = urllib2.urlopen(url)  
    except urllib2.HTTPError, e:
        print "Error", e
        continue

..... do something with a   
</snippet></ROW><ROW><id>14962150</id><snippet>import scipy as sp</snippet></ROW><ROW><id>14962150</id><snippet>import scipy.sparse as sp</snippet></ROW><ROW><id>14962150</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt
import networkx as nx
</snippet></ROW><ROW><id>14962150</id><snippet>import lln as library_with_a_long_name</snippet></ROW><ROW><id>14962150</id><snippet># Try to import the C implementation of StringIO; if that doesn't work
# (e.g. in IronPython or Jython), import the pure Python version.
# Make sure the imported module is called StringIO locally.
try:
    import cStringIO as StringIO
except ImportError:
    import StringIO
</snippet></ROW><ROW><id>14962150</id><snippet>StringIO</snippet></ROW><ROW><id>14962150</id><snippet>pickle</snippet></ROW><ROW><id>14962385</id><snippet>ping = str(ping)</snippet></ROW><ROW><id>14962385</id><snippet>if ping is None:
   # no last ping time
</snippet></ROW><ROW><id>14962509</id><snippet>return</snippet></ROW><ROW><id>14962509</id><snippet>_finditem</snippet></ROW><ROW><id>14962509</id><snippet>def _finditem(obj, key):
    if key in obj: return obj[key]
    for k, v in obj.items():
        if isinstance(v,dict):
            return _finditem(v, key)  #added return statement
</snippet></ROW><ROW><id>14962509</id><snippet>_finditem</snippet></ROW><ROW><id>14962509</id><snippet>None</snippet></ROW><ROW><id>14962509</id><snippet>def _finditem(obj, key):
    if key in obj: return obj[key]
    for k, v in obj.items():
        if isinstance(v,dict):
            item = _finditem(v, key)
            if item is not None:
                return item
</snippet></ROW><ROW><id>14962509</id><snippet>None</snippet></ROW><ROW><id>14962509</id><snippet>object()</snippet></ROW><ROW><id>14962509</id><snippet>sentinel</snippet></ROW><ROW><id>14962712</id><snippet>list</snippet></ROW><ROW><id>14962712</id><snippet>limitn</snippet></ROW><ROW><id>14962712</id><snippet>False</snippet></ROW><ROW><id>14962712</id><snippet>*</snippet></ROW><ROW><id>14962712</id><snippet>List</snippet></ROW><ROW><id>14962712</id><snippet>integer</snippet></ROW><ROW><id>14962712</id><snippet>n</snippet></ROW><ROW><id>14962712</id><snippet>right</snippet></ROW><ROW><id>14962712</id><snippet>list</snippet></ROW><ROW><id>14962712</id><snippet>n</snippet></ROW><ROW><id>14962712</id><snippet>&gt;&gt;&gt; [False] * 2
[False, False]
&gt;&gt;&gt; "rohit" * 2
rohitrohit
</snippet></ROW><ROW><id>14963027</id><snippet>web.header</snippet></ROW><ROW><id>14963027</id><snippet>StringIO</snippet></ROW><ROW><id>14963027</id><snippet>import StringIO

# in GET(self):
web.header('Content-type', 'image/png')
buf = StringIO()
img.save(buf, "PNG")
contents = buf.getvalue()
return contents
</snippet></ROW><ROW><id>14963068</id><snippet>In [8]: df['date2'] = df.groupby('symbol').apply(lambda x: x['date'].shift(-1))

In [9]: df
Out[9]:
       date  shares symbol     date2
0  20120614    1100  AAT.N  20120615
1  20120615    1100  AAT.N  20120616
2  20120616    1100  AAT.N  20120617
3  20120617    1100  AAT.N       NaN
4  20030405     800  ABT.N  20030406
5  20030406     800  ABT.N  20030407
6  20030407     800  ABT.N       NaN
</snippet></ROW><ROW><id>14963133</id><snippet>&gt;&gt;&gt; orig = [ 'a', 'b', 'c', 'd' ]
&gt;&gt;&gt; rep = {'c': ['x', 'y', 'z']}
&gt;&gt;&gt; [i for c in orig for i in rep.get(c, [c])]
['a', 'b', 'x', 'y', 'z', 'd']
</snippet></ROW><ROW><id>14963133</id><snippet>'c'</snippet></ROW><ROW><id>14963133</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(rep.get(c, [c]) for c in orig))
['a', 'b', 'x', 'y', 'z', 'd']
</snippet></ROW><ROW><id>14963133</id><snippet>&gt;&gt;&gt; orig = [ 'a', 'b', 'c', 'd', 'c' ]
&gt;&gt;&gt; rep = {'c': ['x', 'y', 'z']}
&gt;&gt;&gt; list(chain.from_iterable(rep.get(c, [c]) for c in orig))
['a', 'b', 'x', 'y', 'z', 'd', 'x', 'y', 'z']
</snippet></ROW><ROW><id>14963202</id><snippet>bits</snippet></ROW><ROW><id>14963202</id><snippet>0b10000</snippet></ROW><ROW><id>14963202</id><snippet>if (bits&amp;0x10)
    ......
end
</snippet></ROW><ROW><id>14963202</id><snippet>if bits&amp;0x10:
    .......
</snippet></ROW><ROW><id>14963447</id><snippet>packet2json()</snippet></ROW><ROW><id>14963447</id><snippet>for i in range(len(payload)):
    if ((i % 2) == 1):
        fcs = fcs ^ int('0x' + payload[(i - 1):(i + 1)], 16)
</snippet></ROW><ROW><id>14963447</id><snippet>packet2json(0xa3, 0xe0, '*A3;E0;10;#')
</snippet></ROW><ROW><id>14963447</id><snippet>if</snippet></ROW><ROW><id>14963447</id><snippet>int('0x' + payload[(i-1):(i+1)], 16)</snippet></ROW><ROW><id>14963447</id><snippet>int('0x' + payload[0:2], 16)</snippet></ROW><ROW><id>14963447</id><snippet>int('0x*A',16)</snippet></ROW><ROW><id>14963447</id><snippet>packet2json()</snippet></ROW><ROW><id>14963447</id><snippet>*</snippet></ROW><ROW><id>14963654</id><snippet>s = "Is This It? Nope, that's fine"

'?' in s[:-1].replace('? ','')
</snippet></ROW><ROW><id>14963750</id><snippet>struct.unpack()</snippet></ROW><ROW><id>14963750</id><snippet>bytes</snippet></ROW><ROW><id>14963750</id><snippet>str</snippet></ROW><ROW><id>14963750</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; s = b'\x00\x00\x00\x01\x00\x00\x00\xff\xff\x00\x00'
&gt;&gt;&gt; struct.unpack('11B', s)
(0, 0, 0, 1, 0, 0, 0, 255, 255, 0, 0)
</snippet></ROW><ROW><id>14964150</id><snippet>*args</snippet></ROW><ROW><id>14964150</id><snippet>**kwargs</snippet></ROW><ROW><id>14964150</id><snippet>axes</snippet></ROW><ROW><id>14964218</id><snippet>dicts = [dict1, dict2]
dict([(key, sum(map(lambda x: x.get(key) or 0, dicts))) for key in set(reduce(lambda a,b: a + b, map(lambda x: x.keys(), dicts), []))])
</snippet></ROW><ROW><id>14964218</id><snippet>dicts = [dict1, dict2]
keys = reduce(lambda a,b: a + b, map(lambda x: x.keys(), dicts), [])
dict([(key, sum(map(lambda x: x.get(key) or 0, dicts))) for key in set(keys)])
</snippet></ROW><ROW><id>14964365</id><snippet>from pylab import *
from numarray import *

x = arange(10)
y = x

# Plot junk and then a filled region
plot(x, y)

# Now lets make an arrow object
arr = Arrow(2, 2, 1, 1, edgecolor='white')

# Get the subplot that we are currently working on
ax = gca()

# Now add the arrow
ax.add_patch(arr)

# We should be able to make modifications to the arrow.
# Lets make it green.
arr.set_facecolor('g')
</snippet></ROW><ROW><id>14964537</id><snippet>preg_match_all</snippet></ROW><ROW><id>14964537</id><snippet>$test = "[u'Person 1', u'Person 2']";

preg_match_all('/u\'(.*?)\'/', $test, $matches);

var_dump($matches);

/*
array(2) { 
[0]=&gt; array(2) { 
    [0]=&gt; string(11) "u'Person 1'" 
    [1]=&gt; string(11) "u'Person 2'" } 
[1]=&gt; array(2) { 
    [0]=&gt; string(8) "Person 1" 
    [1]=&gt; string(8) "Person 2" 
    } 
} 
*/
</snippet></ROW><ROW><id>14964876</id><snippet>django-usertools</snippet></ROW><ROW><id>14964912</id><snippet>allp = open("allp.txt","r").readlines()
</snippet></ROW><ROW><id>14964912</id><snippet>for line_2 in allp:
</snippet></ROW><ROW><id>14964912</id><snippet>allp.seek(0)</snippet></ROW><ROW><id>14965325</id><snippet>python hello.py &lt;&lt;EOF
Matt
EOF
</snippet></ROW><ROW><id>14965327</id><snippet>%d</snippet></ROW><ROW><id>14965441</id><snippet>def test_should_get_403_when_csrf_enforced(self):
    self.client = test.Client(enforce_csrf_checks=True)
    self.client.cookies[settings.CSRF_COOKIE_NAME] = 'asdf'                                                  
    response = self.client.post(url, {'name': 'foobar'})
    self.assertEqual(403, response.status_code)
</snippet></ROW><ROW><id>14965487</id><snippet>UndefinedCompression</snippet></ROW><ROW><id>14965487</id><snippet>JPEGCompression</snippet></ROW><ROW><id>14965855</id><snippet>from noise import snoise2 # Simplex noise for 2D points

x, y = 0.5, 0.3
factor = 0.1
n = snoise2(x, y)
print x + n * factor, y + n * factor
</snippet></ROW><ROW><id>14965855</id><snippet>factor = 15</snippet></ROW><ROW><id>14965855</id><snippet>n1</snippet></ROW><ROW><id>14965855</id><snippet>n2</snippet></ROW><ROW><id>14965855</id><snippet>import sys
from noise import snoise2
from PIL import Image

img = Image.open(sys.argv[1]).convert('L')
result = Image.new('L', img.size)
width, height = img.size

factor = 15
res = result.load()
im = img.load()
for x in xrange(width):
    for y in xrange(height):
        n1 = snoise2(x, y)
        n2 = snoise2(y, x)
        pt = [int(round(x + n1 * factor)), int(round(y + n2 * factor))]
        pt[0] = min(max(0, pt[0]), width - 1)
        pt[1] = min(max(0, pt[1]), height - 1)
        res[x, y] = im[tuple(pt)]
result.save(sys.argv[2])
</snippet></ROW><ROW><id>14966019</id><snippet>import webbrowser
url = "https://www.google.com.tr/search?q={}".format(search_term)    
webbrowser.open(url)
</snippet></ROW><ROW><id>14966019</id><snippet>urlencode</snippet></ROW><ROW><id>14966165</id><snippet>start</snippet></ROW><ROW><id>14966165</id><snippet>stop</snippet></ROW><ROW><id>14966218</id><snippet>import re

ss = '''
&gt;Entry1.1
#size=1688
704 1   1   1   4
979 2   2   2   0
1220    1   1   1   4
1309    1   1   1   4
1316    1   1   1   4
1372    1   1   1   4
1374    1   1   1   4
1576    1   1   1   4
&gt;Entry2.1
#size=6251
6110    3   1.5 0   2
6129    2   2   2   2
6136    1   1   1   4
6142    3   3   3   2
6143    4   4   4   1
6150    1   1   1   4
6152    1   1   1   4
&gt;Entry3.2
#size=1777
AND SO ON-----------
'''

patbase = '(&gt;Entry *%s(?![^\n]+?\d).+?)(?=&gt;|(?:\s*\Z))'


while True:
    x = raw_input('What entry do you want ? : ')
    found = re.findall(patbase % x, ss, re.DOTALL)
    if found:
        print 'found ==',found
        for each_entry in found:
            print '\n%s\n' % each_entry
    else:
        print '\n ** There is no such an entry **\n'
</snippet></ROW><ROW><id>14966218</id><snippet>'(&gt;Entry *%s(?![^\n]+?\d).+?)(?=&gt;|(?:\s*\Z))'</snippet></ROW><ROW><id>14966218</id><snippet>%s</snippet></ROW><ROW><id>14966218</id><snippet>(?![^\n]+?\d)</snippet></ROW><ROW><id>14966218</id><snippet>(?![^\n]+?\d)</snippet></ROW><ROW><id>14966218</id><snippet>%s</snippet></ROW><ROW><id>14966218</id><snippet>[^\n]+?\d</snippet></ROW><ROW><id>14966218</id><snippet>[^\n]+?</snippet></ROW><ROW><id>14966218</id><snippet>\d</snippet></ROW><ROW><id>14966218</id><snippet>[^\n]</snippet></ROW><ROW><id>14966218</id><snippet>\n</snippet></ROW><ROW><id>14966218</id><snippet>.+?</snippet></ROW><ROW><id>14966218</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14966218</id><snippet>.+?</snippet></ROW><ROW><id>14966218</id><snippet>'(&gt;Entry *%s(?![^\n]+?\d).+?)</snippet></ROW><ROW><id>14966218</id><snippet>.+?</snippet></ROW><ROW><id>14966218</id><snippet>\n</snippet></ROW><ROW><id>14966218</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14966218</id><snippet>.+?</snippet></ROW><ROW><id>14966218</id><snippet>(&gt;Entry *%s(?![^\n]+?\d).+?)</snippet></ROW><ROW><id>14966218</id><snippet>(?=&gt;|(?:\s*\Z))</snippet></ROW><ROW><id>14966218</id><snippet>.+?</snippet></ROW><ROW><id>14966218</id><snippet>&gt;</snippet></ROW><ROW><id>14966218</id><snippet>\Z</snippet></ROW><ROW><id>14966218</id><snippet>\s*</snippet></ROW><ROW><id>14966218</id><snippet>\s*\Z</snippet></ROW><ROW><id>14966218</id><snippet>blank</snippet></ROW><ROW><id>14966218</id><snippet>\f</snippet></ROW><ROW><id>14966218</id><snippet>\n</snippet></ROW><ROW><id>14966218</id><snippet>\r</snippet></ROW><ROW><id>14966218</id><snippet>\t</snippet></ROW><ROW><id>14966218</id><snippet>\v</snippet></ROW><ROW><id>14966220</id><snippet>with open('testdata.txt') as fin, open('testdata.out', 'w') as fout:
    for line in fin:
        if 0 &lt;= line.find('.') &lt;= 8:
            fout.write(line.rstrip() + '\t' + next(fin))
        else:
            fout.write(line)
</snippet></ROW><ROW><id>14966308</id><snippet>start_urls</snippet></ROW><ROW><id>14966308</id><snippet>&lt;a href="http://www.20130219-0606.com"&gt;Test&lt;/a&gt;
</snippet></ROW><ROW><id>14966308</id><snippet>20130219-0606.com</snippet></ROW><ROW><id>14966308</id><snippet>allowed_domains</snippet></ROW><ROW><id>14966308</id><snippet>['szuhanchang.com', 'www.szuhanchang.com', 'www.szuhanchang.com']
</snippet></ROW><ROW><id>14966308</id><snippet>OffsiteMiddleware</snippet></ROW><ROW><id>14966308</id><snippet>2013-02-19 18:03:25+0000 [crawler] DEBUG: Filtered offsite request to 'www.20130219-0606.com': &lt;GET http://www.20130219-0606.com/&gt;
</snippet></ROW><ROW><id>14966308</id><snippet>parse_item</snippet></ROW><ROW><id>14966624</id><snippet>py2exe</snippet></ROW><ROW><id>14966624</id><snippet>http://example.com/testfile.php</snippet></ROW><ROW><id>14966624</id><snippet>import urllib
urllib.urlopen("http://example.com/testfile.php?number1=20&amp;number2=100")
</snippet></ROW><ROW><id>14966624</id><snippet>ftplib</snippet></ROW><ROW><id>14966624</id><snippet>import thread
thread.start_new_thread(upload_function()) #using the upload-process in a new function
</snippet></ROW><ROW><id>14966676</id><snippet>def make_model(data,model):
</snippet></ROW><ROW><id>14966676</id><snippet>LeastModel</snippet></ROW><ROW><id>14966676</id><snippet>make_model</snippet></ROW><ROW><id>14966676</id><snippet>LeastModel</snippet></ROW><ROW><id>14966676</id><snippet>return LeastModel</snippet></ROW><ROW><id>14966801</id><snippet>$:scene.descriptions[scene.status]
 ^-- add this thing
</snippet></ROW><ROW><id>14966827</id><snippet>import re
r = re.compile('.*/.*/.*:.*')
if r.match('x/x/xxxx xx:xx') is not None:
   print 'matches'
</snippet></ROW><ROW><id>14966897</id><snippet>         1000004 function calls in 0.424 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.424    0.424 &lt;string&gt;:1(&lt;module&gt;)
        1    0.242    0.242    0.424    0.424 test.py:14(testit)
        1    0.000    0.000    0.424    0.424 test.py:21(testit1)
  1000000    0.182    0.000    0.182    0.000 test.py:6(vprint)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


         1000004 function calls in 0.408 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.408    0.408 &lt;string&gt;:1(&lt;module&gt;)
  1000000    0.142    0.000    0.142    0.000 test.py:10(vprint2)
        1    0.266    0.266    0.408    0.408 test.py:14(testit)
        1    0.000    0.000    0.408    0.408 test.py:18(testit2)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>14966897</id><snippet>#!/usr/bin/python

import cProfile

verbose=False
def vprint(msg):
    if verbose:
        print msg

def vprint2(msg):
    pass

def testit(fcn):
    for i in xrange(1000000):
        fcn(i)

def testit2():
    testit(vprint2)

def testit1():
    testit(vprint)

if __name__ == '__main__':
    cProfile.run('testit1()')
    cProfile.run('testit2()')
</snippet></ROW><ROW><id>14967008</id><snippet>SyntaxError: can't assign to function call</snippet></ROW><ROW><id>14967008</id><snippet>undercurve(size) = undercurve(1)+undercurve(size)
</snippet></ROW><ROW><id>14967008</id><snippet>undercurve(size)</snippet></ROW><ROW><id>14967008</id><snippet>100</snippet></ROW><ROW><id>14967008</id><snippet>undercurve(size)</snippet></ROW><ROW><id>14967008</id><snippet>undercurve(size)[:100]
</snippet></ROW><ROW><id>14967041</id><snippet>chr()</snippet></ROW><ROW><id>14967041</id><snippet>&gt;&gt;&gt; chr(5)
'\x05'
&gt;&gt;&gt; chr(5) * 5
'\x05\x05\x05\x05\x05'
</snippet></ROW><ROW><id>14967041</id><snippet>bytearray()</snippet></ROW><ROW><id>14967041</id><snippet>&gt;&gt;&gt; str(bytearray(5 * [5]))
'\x05\x05\x05\x05\x05'
</snippet></ROW><ROW><id>14967041</id><snippet>array.array()</snippet></ROW><ROW><id>14967041</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; array.array('B', 5*[5]).tostring()
'\x05\x05\x05\x05\x05'
</snippet></ROW><ROW><id>14967041</id><snippet>struct.pack()</snippet></ROW><ROW><id>14967041</id><snippet> &gt;&gt;&gt; import struct
 &gt;&gt;&gt; struct.pack('{}B'.format(5), *(5 * [5]))
 '\x05\x05\x05\x05\x05'
</snippet></ROW><ROW><id>14967098</id><snippet>pygame.mouse.get_pos(): return (x, y)
</snippet></ROW><ROW><id>14967173</id><snippet>--install-dir</snippet></ROW><ROW><id>14967173</id><snippet>--prefix</snippet></ROW><ROW><id>14967173</id><snippet>/home/dgomez/bin/python ez_setup.py --prefix=/home/dgomez
</snippet></ROW><ROW><id>14967173</id><snippet>--install-dir</snippet></ROW><ROW><id>14967173</id><snippet>/home/dgomez/bin/python ez_setup.py --install-dir=/home/dgomez/lib/python2.7/site-packages
</snippet></ROW><ROW><id>14967173</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14967173</id><snippet>export PYTHONPATH=$PYTHONPATH:/home/dgomez/lib/python2.7/site-packages/
</snippet></ROW><ROW><id>14967173</id><snippet>~/.bashrc</snippet></ROW><ROW><id>14967660</id><snippet>students=int(input('Please enter the number of students in the class: '))
class_average = 0 
maximum_num = 0
minimum_num = 100
for number in range(students):

  first_grade=int(input("Enter student's first grade: "))
  second_grade=int(input("Enter student's second grade: "))
  third_grade=int(input("Enter student's third grade: "))

  StudentAverage=(first_grade + second_grade + third_grade)/3
  print("The student's average is", round(StudentAverage,2))

  class_average= class_average + StudentAverage
  print("The class average is", round(class_average/(number+1),2))

  if StudentAverage &gt; maximum_num:
    maximum_num = StudentAverage

  if StudentAverage &lt; minimum_num:
    minimum_num = StudentAverage
print("The minimum average is", round(minimum_num,2))
print("The maxiumum average is", round(maximum_num,2))
</snippet></ROW><ROW><id>14967752</id><snippet>ref_by_number = dict(
  (row.number, row)
  for row in db.session.query(reference).filter(reference.parent == 1)
)
</snippet></ROW><ROW><id>14967752</id><snippet>ref_by_number[number]</snippet></ROW><ROW><id>14967752</id><snippet>number</snippet></ROW><ROW><id>14967859</id><snippet>t</snippet></ROW><ROW><id>14967859</id><snippet>point_data = mesh.mlab_source.dataset.point_data
point_data.scalars = t
point_data.scalars.name = 'Point data'
point_data.update()

mesh2 = mlab.pipeline.set_active_attribute(mesh,
        point_scalars='Point data')
</snippet></ROW><ROW><id>14967980</id><snippet>b</snippet></ROW><ROW><id>14967980</id><snippet>a</snippet></ROW><ROW><id>14967980</id><snippet>axis</snippet></ROW><ROW><id>14967980</id><snippet>np.any</snippet></ROW><ROW><id>14967980</id><snippet>np.all</snippet></ROW><ROW><id>14967980</id><snippet>a</snippet></ROW><ROW><id>14967980</id><snippet>b</snippet></ROW><ROW><id>14967980</id><snippet>b</snippet></ROW><ROW><id>14967980</id><snippet>a</snippet></ROW><ROW><id>14967980</id><snippet>a</snippet></ROW><ROW><id>14967980</id><snippet>b</snippet></ROW><ROW><id>14967980</id><snippet>def same_rows(a, b, tol=5) :
    rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
    return (np.all(np.any(rows_close, axis=-1), axis=-1) and
            np.all(np.any(rows_close, axis=0), axis=0))

&gt;&gt;&gt; rows, cols = 5, 3
&gt;&gt;&gt; a = np.arange(rows * cols).reshape(rows, cols)
&gt;&gt;&gt; b = np.arange(rows)
&gt;&gt;&gt; np.random.shuffle(b)
&gt;&gt;&gt; b = a[b]
&gt;&gt;&gt; a
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])
&gt;&gt;&gt; b
array([[ 9, 10, 11],
       [ 3,  4,  5],
       [ 0,  1,  2],
       [ 6,  7,  8],
       [12, 13, 14]])
&gt;&gt;&gt; same_rows(a, b)
True
&gt;&gt;&gt; b[0] = b[1]
&gt;&gt;&gt; b
array([[ 3,  4,  5],
       [ 3,  4,  5],
       [ 0,  1,  2],
       [ 6,  7,  8],
       [12, 13, 14]])
&gt;&gt;&gt; same_rows(a, b) # not all rows in a are close to a row in b
False
</snippet></ROW><ROW><id>14967980</id><snippet>(rows, rows, cols)</snippet></ROW><ROW><id>14967980</id><snippet>In [2]: rows, cols = 1000, 10

In [3]: a = np.arange(rows * cols).reshape(rows, cols)

In [4]: b = np.arange(rows)

In [5]: np.random.shuffle(b)

In [6]: b = a[b]

In [7]: %timeit same_rows(a, b)
10 loops, best of 3: 103 ms per loop
</snippet></ROW><ROW><id>14968010</id><snippet>filename[-4] == '.mp3'</snippet></ROW><ROW><id>14968010</id><snippet>'.mp3'</snippet></ROW><ROW><id>14968010</id><snippet>.endswith()</snippet></ROW><ROW><id>14968010</id><snippet>filename.endswith('.mp3')
</snippet></ROW><ROW><id>14968010</id><snippet>filename[-4:] == '.mp3'
</snippet></ROW><ROW><id>14968158</id><snippet>PyRun_SimpleFile(fileReference, scriptPath)</snippet></ROW><ROW><id>14968373</id><snippet>datetime</snippet></ROW><ROW><id>14968373</id><snippet>dateutil.parser</snippet></ROW><ROW><id>14968373</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14968373</id><snippet>&gt;&gt;&gt; dateutil.parser.parse('Sat Feb 06 07:00:13 -0800 2010')
datetime.datetime(2010, 2, 6, 7, 0, 13, tzinfo=tzoffset(None, -28800))
</snippet></ROW><ROW><id>14968526</id><snippet>&gt;&gt;&gt; f1
    cid
0   531
1  1102
2  1103
3  1406
4  1409
&gt;&gt;&gt; f2
     cid   media_cost     imps  booked_revenue
0  72692    29.671446    13918       84.961853
1  72704  3121.781201  6992946     9912.982516
2    531     0.001540        2        0.000000
3  39964  2307.119001  3997167     5425.629736
4  72736    45.716847   143574       56.280000
&gt;&gt;&gt; f2[~f2.cid.isin(f1.cid)]
     cid   media_cost     imps  booked_revenue
0  72692    29.671446    13918       84.961853
1  72704  3121.781201  6992946     9912.982516
3  39964  2307.119001  3997167     5425.629736
4  72736    45.716847   143574       56.280000
</snippet></ROW><ROW><id>14968567</id><snippet>ir_values</snippet></ROW><ROW><id>14968701</id><snippet>__main__.Test</snippet></ROW><ROW><id>14968701</id><snippet>getattr()</snippet></ROW><ROW><id>14969038</id><snippet>diff_as_dict = {k:dict1[k] for k in diff_as_set}
</snippet></ROW><ROW><id>14969038</id><snippet>&gt;&gt;&gt; dict1={'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; dict2={'a':3, 'c':7}
&gt;&gt;&gt; diff_as_set = set(dict1.keys()) - set (dict2.keys())
&gt;&gt;&gt; diff_as_set
set(['b'])
&gt;&gt;&gt; diff_as_dict = {k:dict1[k] for k in diff_as_set}
&gt;&gt;&gt; diff_as_dict
{'b': 2}
</snippet></ROW><ROW><id>14969521</id><snippet>\*\s*\[\[.*?\]\]
</snippet></ROW><ROW><id>14969521</id><snippet>?</snippet></ROW><ROW><id>14969521</id><snippet>.*</snippet></ROW><ROW><id>14969521</id><snippet>]]</snippet></ROW><ROW><id>14969564</id><snippet>func</snippet></ROW><ROW><id>14969564</id><snippet>get_callable_name(func)</snippet></ROW><ROW><id>14969564</id><snippet>X</snippet></ROW><ROW><id>14969564</id><snippet>try:
    obj2 = ref_to_obj(ref)
    print 'obj != obj2  : ',obj != obj2
    if obj != obj2:
        raise ValueError
except Exception:
    raise ValueError('Cannot determine the reference to %s' % repr(obj))
return ref
</snippet></ROW><ROW><id>14969564</id><snippet>obj_to_ref()</snippet></ROW><ROW><id>14969564</id><snippet>t.TestFunc</snippet></ROW><ROW><id>14969564</id><snippet>X</snippet></ROW><ROW><id>14969564</id><snippet>'__main__:Test.TestFunc'</snippet></ROW><ROW><id>14969564</id><snippet>'__main__:t.TestFunc'</snippet></ROW><ROW><id>14969564</id><snippet>get_callable_name()</snippet></ROW><ROW><id>14969564</id><snippet>f.self</snippet></ROW><ROW><id>14969564</id><snippet>t</snippet></ROW><ROW><id>14969564</id><snippet>X</snippet></ROW><ROW><id>14969564</id><snippet>type</snippet></ROW><ROW><id>14969564</id><snippet>t</snippet></ROW><ROW><id>14969564</id><snippet>return '%s.%s' % (f_self.__class__.__name__, X.__name__)</snippet></ROW><ROW><id>14969564</id><snippet>f_self.__class__.__name</snippet></ROW><ROW><id>14969564</id><snippet>t</snippet></ROW><ROW><id>14969564</id><snippet>t</snippet></ROW><ROW><id>14969564</id><snippet>__name__</snippet></ROW><ROW><id>14969564</id><snippet>__name__</snippet></ROW><ROW><id>14969564</id><snippet>get__callable_name()</snippet></ROW><ROW><id>14969564</id><snippet>t.TestFunc</snippet></ROW><ROW><id>14969564</id><snippet>t.TestFunc</snippet></ROW><ROW><id>14969564</id><snippet>TestFunc</snippet></ROW><ROW><id>14969564</id><snippet>getattr(t,"TestFunc")</snippet></ROW><ROW><id>14969564</id><snippet>&lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011D8DC8&gt;&gt;</snippet></ROW><ROW><id>14969564</id><snippet>t</snippet></ROW><ROW><id>14969564</id><snippet>t.__dict__</snippet></ROW><ROW><id>14969564</id><snippet>{ }</snippet></ROW><ROW><id>14969564</id><snippet>get_callable_name()</snippet></ROW><ROW><id>14969564</id><snippet>return '%s.%s' % ('t', X.__name__)</snippet></ROW><ROW><id>14969564</id><snippet>return '%s.%s' % (f_self.__class__.__name__, func.__name__)</snippet></ROW><ROW><id>14969564</id><snippet>return '%s.%s' % (variable_name_in_module(__import__(f_self.__module__), f_self),
                          func.__name__)</snippet></ROW><ROW><id>14969564</id><snippet>get_callanle_name()</snippet></ROW><ROW><id>14969564</id><snippet>def get_callable_name(X):
    """
    Returns the best available display name for the given function/callable.
    """
    print '- inside get_callable_name()'
    print '  object X arriving in get_callable_name() :\n    ',X
    f_self = getattr(X, '__self__', None) or getattr(X, 'im_self', None) 
    print '  X.__call__ ==',X.__call__  
    print '  X.__name__ ==',X.__name__
    print '\n  X.__self__== X.im_self ==',f_self
    print '  isinstance(%r, type)  is  %r' % (f_self,isinstance(f_self, type))
    if f_self and hasattr(X, '__name__'): # it is a method
        if isinstance(f_self, type):
            # class method
            clsname = getattr(f_self, '__qualname__', None) or f_self.__name__
            return '%s.%s' % (clsname, X.__name__)
        # bound method
        print '\n  f_self.__class__          ==',f_self.__class__
        print '  f_self.__class__.__name__ ==',f_self.__class__.__name__
        return '%s.%s' % ('t', X.__name__)
    if hasattr(X, '__call__'):
        if hasattr(X, '__name__'):
            # function, unbound method or a class with a __call__ method
            return X.__name__
        # instance of a class with a __call__ method
        return X.__class__.__name__
    raise TypeError('Unable to determine a name for %s -- '
                    'maybe it is not a callable?' % repr(X))


def obj_to_ref(obj):
    """
    Returns the path to the given object.
    """
    print '- obj arriving in obj_to_ref :\n  %r' % obj

    ref = '%s:%s' % (obj.__module__, get_callable_name(obj))

    return ref


def ref_to_obj(ref):
    """
    Returns the object pointed to by ``ref``.
    """
    print '- ref arriving in ref_to_obj == %r' % ref

    if not isinstance(ref, basestring):
        raise TypeError('References must be strings')
    if not ':' in ref:
        raise ValueError('Invalid reference')
    modulename, rest = ref.split(':', 1)

    try:
        obj = __import__(modulename)
    except ImportError:
        raise LookupError('Error resolving reference %s: '
                          'could not import module' % ref)

    print '  we start with dictionary obj == ',obj
    try:
        for name in modulename.split('.')[1:] + rest.split('.'):
            print '  object of name ',name,' searched in',obj
            obj = getattr(obj, name)
            print '  got obj ==',obj
        return obj
    except Exception:
        raise LookupError('Error resolving reference %s: '
                          'error looking up object' % ref)

class Test:
    def TestFunc(self):
        print 'this is Test::TestFunc method'


t = Test()

print 't ==',t

print '\nt.TestFunc ==',t.TestFunc

print "getattr(t,'TestFunc') ==",getattr(t,'TestFunc')

print ('\nTrying to obtain reference of t.TestFunc\n'
       '----------------------------------------')

print '- REF = obj_to_ref(t.TestFunc)  done'
REF = obj_to_ref(t.TestFunc)
print '\n- REF obtained: %r' % REF

print ("\n\nVerifying what is ref_to_obj(REF)\n"
       "---------------------------------")
try:
    print '- obj2 = ref_to_obj(REF)  done'
    obj2 = ref_to_obj(REF)
    if obj2 != t.TestFunc:
        raise ValueError
except Exception:
        raise ValueError('Cannot determine the object of reference %s' % REF)
print '\n- object obtained : ',obj2
</snippet></ROW><ROW><id>14969564</id><snippet>t == &lt;__main__.Test instance at 0x011DF5A8&gt;

t.TestFunc == &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;
getattr(t,'TestFunc') == &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;

Trying to obtain reference of t.TestFunc
----------------------------------------
- REF = obj_to_ref(t.TestFunc)  done
- obj arriving in obj_to_ref :
  &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;
- inside get_callable_name()
  object X arriving in get_callable_name() :
     &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;
  X.__call__ == &lt;method-wrapper '__call__' of instancemethod object at 0x011DB990&gt;
  X.__name__ == TestFunc

  X.__self__== X.im_self == &lt;__main__.Test instance at 0x011DF5A8&gt;
  isinstance(&lt;__main__.Test instance at 0x011DF5A8&gt;, type)  is  False

  f_self.__class__          == __main__.Test
  f_self.__class__.__name__ == Test

- REF obtained: '__main__:t.TestFunc'


Verifying what is ref_to_obj(REF)
---------------------------------
- obj2 = ref_to_obj(REF)  done
- ref arriving in ref_to_obj == '__main__:t.TestFunc'
  we start with dictionary obj ==  &lt;module '__main__' (built-in)&gt;
  object of name  t  searched in &lt;module '__main__' (built-in)&gt;
  got obj == &lt;__main__.Test instance at 0x011DF5A8&gt;
  object of name  TestFunc  searched in &lt;__main__.Test instance at 0x011DF5A8&gt;
  got obj == &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;

- object obtained :  &lt;bound method Test.TestFunc of &lt;__main__.Test instance at 0x011DF5A8&gt;&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14969895</id><snippet>with open('htmlfile.html','r') as file:
  rows = []
  for line in file:
    start = max(line.find('FORWARD'),line.find('REVERSE'))
    rows.append(line[start:].replace('&lt;','').replace('&gt;','').replace('/','').replace('td',' ').replace('tr',' ').strip().split('  '))
print(rows)
</snippet></ROW><ROW><id>14970071</id><snippet>blob_reader = blobstore.BlobReader(blob_key)
</snippet></ROW><ROW><id>14970145</id><snippet>zip</snippet></ROW><ROW><id>14970145</id><snippet>-u</snippet></ROW><ROW><id>14970145</id><snippet>-u</snippet></ROW><ROW><id>14970145</id><snippet>add</snippet></ROW><ROW><id>14970145</id><snippet>tempfile.NamedTemporaryFile</snippet></ROW><ROW><id>14970145</id><snippet>os.rename</snippet></ROW><ROW><id>14970145</id><snippet>zip -u</snippet></ROW><ROW><id>14970197</id><snippet>__file__</snippet></ROW><ROW><id>14970304</id><snippet>set_data</snippet></ROW><ROW><id>14970304</id><snippet>import matplotlib.pyplot as plt
x = [1,2,3,4]
y = [1,4,9,16]

plt.ion()
h = plt.plot(x,y)
plt.show()
var = raw_input("type enter to change")
#update data some where here?
h[0].set_data(y,x)
plt.show()
var = raw_input("type enter to end")
</snippet></ROW><ROW><id>14970375</id><snippet>'a'</snippet></ROW><ROW><id>14970375</id><snippet>'w'</snippet></ROW><ROW><id>14970375</id><snippet>open</snippet></ROW><ROW><id>14970422</id><snippet>import csv

dics = [{'Color':'Red', 'Age':29, 'Date':'October 2nd', 'Time':'4pm'},
        {'Color':'Blue', 'Age':32, 'Date':'December 5th', 'Time':'6pm'},
        {'Color':'Green', 'Age':12, 'Date':'January 10th', 'Time':'2pm'}]

with open("file.csv",'wb') as f:
   # Using dictionary keys as fieldnames for the CSV file header
   writer = csv.DictWriter(f, dics[0].keys())
   writer.writeheader()
   for d in dics:
      writer.writerow(d)
</snippet></ROW><ROW><id>14970422</id><snippet>import csv

with open("file.csv", 'rb') as f:
   reader = csv.DictReader(f)
   dics = [ d for d in reader ]

&gt;&gt;&gt; dics
[{'Color': 'Red', 'Date': 'October 2nd', 'Age': '29', 'Time': '4pm'},
 {'Color': 'Blue', 'Date': 'December 5th', 'Age': '32', 'Time': '6pm'},
 {'Color': 'Green', 'Date': 'January 10th', 'Age': '12', 'Time': '2pm'}]
</snippet></ROW><ROW><id>14970453</id><snippet>title</snippet></ROW><ROW><id>14970453</id><snippet>==</snippet></ROW><ROW><id>14970453</id><snippet>{% if somevar == "x" %}</snippet></ROW><ROW><id>14970453</id><snippet>This appears if variable somevar equals the string "x"</snippet></ROW><ROW><id>14970453</id><snippet>{% endif %}</snippet></ROW><ROW><id>14970477</id><snippet>my_list[-40:]</snippet></ROW><ROW><id>14970487</id><snippet>email = super(CustomPasswordResetForm, self).clean_email()
</snippet></ROW><ROW><id>14970625</id><snippet>mode</snippet></ROW><ROW><id>14970625</id><snippet>mode='full'</snippet></ROW><ROW><id>14970625</id><snippet>N</snippet></ROW><ROW><id>14970625</id><snippet>M</snippet></ROW><ROW><id>14970625</id><snippet>np.convolve(filter,img[...],mode='same')</snippet></ROW><ROW><id>14970803</id><snippet>children</snippet></ROW><ROW><id>14970803</id><snippet>class Node(object):
    def __init__(self, children=None tag=None):
        self.children = children if children is not None else []
        self.tag = tag

    def appendChild(self, child):
        self.children.append(child)

    def getChildren(self):
        return self.children

    def printAll(self):
        print self.getChildren()
        for child in self.children:
            child.printAll()
</snippet></ROW><ROW><id>14970826</id><snippet>&gt;&gt;&gt; struct.pack('&lt;s', 'myapp-0.0.1')
'm'
</snippet></ROW><ROW><id>14970826</id><snippet>'s'</snippet></ROW><ROW><id>14970826</id><snippet>'10s'</snippet></ROW><ROW><id>14970826</id><snippet>'10c'</snippet></ROW><ROW><id>14970826</id><snippet>struct</snippet></ROW><ROW><id>14970826</id><snippet>struct</snippet></ROW><ROW><id>14970826</id><snippet>struct</snippet></ROW><ROW><id>14970826</id><snippet>write</snippet></ROW><ROW><id>14970826</id><snippet>json</snippet></ROW><ROW><id>14970826</id><snippet>pickle</snippet></ROW><ROW><id>14970826</id><snippet>'&lt;255s'</snippet></ROW><ROW><id>14970826</id><snippet>'p'</snippet></ROW><ROW><id>14970826</id><snippet>'P'</snippet></ROW><ROW><id>14970826</id><snippet>struct.pack('&lt;h{}s'.format(len(name)), len(name), name)</snippet></ROW><ROW><id>14970826</id><snippet>read(11)</snippet></ROW><ROW><id>14970826</id><snippet>read(11)</snippet></ROW><ROW><id>14970826</id><snippet>read(1)</snippet></ROW><ROW><id>14970826</id><snippet>struct.calcsize('s')</snippet></ROW><ROW><id>14970826</id><snippet>1</snippet></ROW><ROW><id>14970826</id><snippet>infile</snippet></ROW><ROW><id>14970826</id><snippet>'m'</snippet></ROW><ROW><id>14970826</id><snippet>'m'</snippet></ROW><ROW><id>14970826</id><snippet>write</snippet></ROW><ROW><id>14970826</id><snippet>\n</snippet></ROW><ROW><id>14970826</id><snippet>'i'</snippet></ROW><ROW><id>14970826</id><snippet>int</snippet></ROW><ROW><id>14970826</id><snippet>int</snippet></ROW><ROW><id>14970826</id><snippet>struct</snippet></ROW><ROW><id>14971054</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>14971054</id><snippet>heroku config:get DATABASE_URL --app your-app</snippet></ROW><ROW><id>14971054</id><snippet>heroku pg:info --app your-app</snippet></ROW><ROW><id>14971054</id><snippet>pg:info</snippet></ROW><ROW><id>14971054</id><snippet>heroku pg:promote HEROKU_POSTGRESQL_&lt;color&gt; --app your-app</snippet></ROW><ROW><id>14971068</id><snippet>toyota()</snippet></ROW><ROW><id>14971068</id><snippet>return chances, Tire, Km, Insurance, chairs
</snippet></ROW><ROW><id>14971068</id><snippet>chances, chairs, insurance, km, tire = toyota()
</snippet></ROW><ROW><id>14971068</id><snippet>Tire</snippet></ROW><ROW><id>14971068</id><snippet>chairs</snippet></ROW><ROW><id>14971139</id><snippet>class UserProfile(models.Model):
    # existing fields here
    single_group = models.ForeignKey(Group)
</snippet></ROW><ROW><id>14971139</id><snippet>class SelectMultiple(Select):
    def render(self, name, value, attrs=None, choices=()):
        if value is None: value = []
        final_attrs = self.build_attrs(attrs, name=name)
        output = [u'&lt;select multiple="multiple"%s&gt;' % flatatt(final_attrs)]
        options = self.render_options(choices, value)
        if options:
            output.append(options)
        output.append('&lt;/select&gt;')
        return mark_safe(u'\n'.join(output))
</snippet></ROW><ROW><id>14971139</id><snippet>class CustomSelectSingleAsList(SelectMultiple):
    def render(self, name, value, attrs=None, choices=()):
        if value is None: value = []
        final_attrs = self.build_attrs(attrs, name=name)
        output = [u'&lt;select %s&gt;' % flatatt(final_attrs)] # NOTE removed the multiple attribute
        options = self.render_options(choices, value)
        if options:
            output.append(options)
        output.append('&lt;/select&gt;')
        return mark_safe(u'\n'.join(output))
</snippet></ROW><ROW><id>14971139</id><snippet>class SelectSingleAsList(Select):
    def value_from_datadict(self, data, files, name):
        if isinstance(data, (MultiValueDict, MergeDict)):
            return data.getlist(name)  # NOTE this returns a list rather than a single value.
        return data.get(name, None)
</snippet></ROW><ROW><id>14971240</id><snippet>def foo(cur=None):
    inside_larger_transaction = False
    if cursor is None:
        db = connect()
        cur = db.cursor()
        inside_larger_transaction = True
    try:
        cur.execute(...)
        if not inside_larger_transaction:
             conn.commit()
    except:

        conn.rollback()
</snippet></ROW><ROW><id>14971240</id><snippet>bar</snippet></ROW><ROW><id>14971240</id><snippet>foo</snippet></ROW><ROW><id>14971240</id><snippet>__exit__</snippet></ROW><ROW><id>14971240</id><snippet>class Transaction(object):
    def __enter__(self):
       self.db = connect()
       cursor = self.db.cursor()
       return cursor
   def __exit__(self, exc_type, exc_value, traceback):
       if exc_type is None:
           self.db.commit()
       else:
           self.db.rollback()
</snippet></ROW><ROW><id>14971240</id><snippet>def foo(cursor):
    ...

def foo(cur):
        cur.execute(...)


def bar(cur):
    cur.execute(...)
    foo(cur)

with Transaction() as cursor:
    foo(cursor)


with Transaction() as cursor:
    bar(cursor)
</snippet></ROW><ROW><id>14971429</id><snippet>shell=True</snippet></ROW><ROW><id>14971429</id><snippet>import subprocess
subprocess.check_output('ps -ef | grep something | wc -l', shell=True)
</snippet></ROW><ROW><id>14971477</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.defaultdict(list)
&gt;&gt;&gt; d[0].append('potato')
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {0: ['potato']})
</snippet></ROW><ROW><id>14971477</id><snippet>dict.setdefault</snippet></ROW><ROW><id>14971552</id><snippet>shelve</snippet></ROW><ROW><id>14971552</id><snippet>import shelve
s = shelve.open('filehere.db', flag='n', protocol=-1, writeback=False)
for key, val in csv.reader(open('filehere.txt')):
    s[key] = eval(val)
s.close()
</snippet></ROW><ROW><id>14971552</id><snippet>import shelve
import itertools
s = shelve.open('final.db', flag='c', protocol=-1, writeback=False)
s1 = shelve.open('file1.db', flag='r')
s2 = shelve.open('file2.db', flag='r')
for key, val in itertools.chain(s1.iteritems(), s2.iteritems()):
    d = s.get(key, {})
    d.update(val)
    s[key] = d # force write
s.close()
</snippet></ROW><ROW><id>14971805</id><snippet>self.screen = pygame.display.set_mode((screen_width, screen_height))
</snippet></ROW><ROW><id>14971805</id><snippet>self.screen = pygame.display.set_mode((screen_width, screen_height), 0, 32)
</snippet></ROW><ROW><id>14971848</id><snippet>print("this is a {:&gt;30.2f} test ".format(2.345345345345))
</snippet></ROW><ROW><id>14971880</id><snippet>data = #your data as posted

data = [set ( [k] ) | set (v ['root'] ) | set (v ['leaf'] ) for k, v in data.items () ]
merged = []
while data:
    e0 = data [0]
    for idx, e in enumerate (data [1:] ):
        if e0 &amp; e:
            data [idx + 1] = e | e0 #idx is off by 1 as I enumerate data [1:]
            break
    else: merged.append (e0)
    data = data [1:]

print (merged)
</snippet></ROW><ROW><id>14972064</id><snippet>for my_key in my_dict:
    my_dict[my_key] = IntVar()
    cb = Checkbutton(text=my_key, variable=my_dict[my_key])
    self.checkbox_text.window_create("END", window=cb)
    self.checkbox_text.insert("END", "\n")
</snippet></ROW><ROW><id>14972180</id><snippet>&gt;`
def randomLine(filename):
#   #"Retrieve a  random line from a file, reading through the file once"
        fh = open("KEEP-IMPORANT.txt", "r")
        lineNum = 0
        it = ''

        while 1:
                aLine = fh.readline()
                lineNum = lineNum + 1
                if aLine != "":
                        #
                        # How likely is it that this is the last line of the file ? 
                        if random.uniform(0,lineNum)&lt;1:
                                it = aLine
                else:
                        break
        nmsg=it
        return nmsg
        #this is suposed to be a var pull = randomLine(filename)
</snippet></ROW><ROW><id>14972357</id><snippet>import time
tic = time.time() #start
while True:
   do_big_job()
   toc = time.time();
   if ( toc - tic &gt; timeout ):
      break
</snippet></ROW><ROW><id>14972374</id><snippet>import itertools

mapping = {
    'v': 'aeiou',
    'c': 'bcdfghjklmnpqrstvwxyz'
}

pattern = 'vcvcv'

for thing in itertools.product(*map(mapping.get, pattern)):
    print ''.join(thing)
</snippet></ROW><ROW><id>14972374</id><snippet>map(mapping.get, pattern)</snippet></ROW><ROW><id>14972374</id><snippet>'vcv'</snippet></ROW><ROW><id>14972374</id><snippet>['aeiou', 'bcdfghjklmnpqrstvwxyz', 'aeiou']</snippet></ROW><ROW><id>14972374</id><snippet>*map(...)</snippet></ROW><ROW><id>14972374</id><snippet>itertools.product()</snippet></ROW><ROW><id>14972374</id><snippet>''.join(thing)</snippet></ROW><ROW><id>14972374</id><snippet>itertools</snippet></ROW><ROW><id>14972640</id><snippet>"update_xml" replace with "data"
"init_xml" removed,used in directly in data just put &lt;data noupdate="1"&gt; in xml
"demo xml"  replace with "demo"
"active" removed, installable is ok
</snippet></ROW><ROW><id>14972640</id><snippet>" &lt;field name="type"&gt;tree&lt;/field&gt;"</snippet></ROW><ROW><id>14972648</id><snippet>python myscript.py -f myfile
</snippet></ROW><ROW><id>14972648</id><snippet>&gt;&gt;&gt; from optparse import OptionParser
&gt;&gt;&gt; parser = OptionParser()
&gt;&gt;&gt; parser.add_option("-f", "--file", dest="in_filenames",
...                   help="read data from FILE - enclose comma-separated file list in quotes e.g. \"FILE1, FILE2\"", metavar="FILE")
&lt;Option at 0x29f47c8: -f/--file&gt;
&gt;&gt;&gt; (options, args) = parser.parse_args()
&gt;&gt;&gt; options # Notice that in_filenames is None here
&lt;Values at 0x29f6648: {'in_filenames': None}&gt;
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.argv
['']
&gt;&gt;&gt; sys.argv = ['','-f','myfile'] # Let's explicitly set the argument
&gt;&gt;&gt; (options, args) = parser.parse_args()
&gt;&gt;&gt; options # Now it works...
&lt;Values at 0x29fd848: {'in_filenames': 'myfile'}&gt;
</snippet></ROW><ROW><id>14972776</id><snippet>Sample.objects.filter(date__month=month).exclude(date__day__in = weekends)
</snippet></ROW><ROW><id>14972776</id><snippet>def get_prep_lookup(self, lookup_type, value):
    # For "__month", "__day", and "__week_day" lookups, convert the value
    # to an int so the database backend always sees a consistent type.
    if lookup_type in ('month', 'day', 'week_day'):
        return int(value)
</snippet></ROW><ROW><id>14972776</id><snippet>__day</snippet></ROW><ROW><id>14972776</id><snippet>date</snippet></ROW><ROW><id>14972776</id><snippet>created_date</snippet></ROW><ROW><id>14972866</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; today = datetime.utcnow().date()
&gt;&gt;&gt; today
datetime.date(2013, 2, 21)
</snippet></ROW><ROW><id>14972866</id><snippet>&gt;&gt;&gt; start = datetime(today.year, today.month, today.day, tzinfo=tz.tzutc())
datetime.datetime(2013, 2, 21, 0, 0, tzinfo=tzutc())
</snippet></ROW><ROW><id>14972866</id><snippet>&gt;&gt;&gt; from dateutil import tz
&gt;&gt;&gt; est = tz.gettz('America/New_York')
&gt;&gt;&gt; start = start.astimezone(est)
&gt;&gt;&gt; start
datetime.datetime(2013, 2, 20, 19, 0, tzinfo=tzfile('/usr/share/zoneinfo/America/New_York'))
</snippet></ROW><ROW><id>14972866</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; end = start + timedelta(1)
&gt;&gt;&gt; end
datetime.datetime(2013, 2, 21, 19, 0, tzinfo=tzfile('/usr/share/zoneinfo/America/New_York'))
</snippet></ROW><ROW><id>14972866</id><snippet>today = datetime.utcnow().date()
start = datetime(today.year, today.month, today.day, tzinfo=tz.tzutc()).astimezone(est)
end = start + timedelta(1)
</snippet></ROW><ROW><id>14972916</id><snippet>{{ request.user.date_joined|date:"Y-m-d H:i:s" }}
</snippet></ROW><ROW><id>14972928</id><snippet>copy</snippet></ROW><ROW><id>14972928</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>14972928</id><snippet>class Obj:
    def __init__(self, value):
        self.value = value

x = Obj(5)
y = copy.deepcopy(x)

print 'x:', x.value
print 'y:', y.value

x.value = 3

print 'x:', x.value
print 'y:', y.value
</snippet></ROW><ROW><id>14972928</id><snippet>x: 5
y: 5
x: 3
y: 5    
</snippet></ROW><ROW><id>14972968</id><snippet>m = re.compile(r'\d{%d}:\d{%d}' % (var1, var2))
</snippet></ROW><ROW><id>14972968</id><snippet>m = re.compile(r'\d{%d}:\d{%d}' % (int(var1), int(var2)))
</snippet></ROW><ROW><id>14973052</id><snippet>subprocess</snippet></ROW><ROW><id>14973052</id><snippet>import subprocess

try:
  mycommand = "ls"
  result = subprocess.check_output(mycommand, shell=True)
  print(result)
except subprocess.CalledProcessError as error:
  # Handle the error
  print("Error: Command exited with code {0}".format(error.returncode))
</snippet></ROW><ROW><id>14973094</id><snippet>b.x = 10</snippet></ROW><ROW><id>14973094</id><snippet>setattr</snippet></ROW><ROW><id>14973094</id><snippet>setattr(b, 'x', 10)</snippet></ROW><ROW><id>14973094</id><snippet>x</snippet></ROW><ROW><id>14973094</id><snippet>b.x = 10</snippet></ROW><ROW><id>14973094</id><snippet>setattr</snippet></ROW><ROW><id>14973094</id><snippet>optionName, optionValue = readConfigFile()
setattr(configObject, optionName, optionValue)
</snippet></ROW><ROW><id>14973847</id><snippet>user</snippet></ROW><ROW><id>14973847</id><snippet>class Article(object):
       title = '111'
       body  = '222'
       def __init__(self):
              setattr(Article,"user",145)

aaaaaaa = Article()
print '# aaaaaaa = Article()  /done'
print '  aaaaaaa.__dict__ == %r ' % aaaaaaa.__dict__
print '  aaaaaaa.user == %r ' % aaaaaaa.user
print '  Article.user == %r\n' % Article.user

aaaaaaa.user = 2000
print '# aaaaaaa.user = 2000  /done'
print '  aaaaaaa.__dict__ == %r ' % aaaaaaa.__dict__
print '  aaaaaaa.user == %r ' % aaaaaaa.user
print '  Article.user == %r\n' % Article.user

Article.user = 'JUJU'
print "# Article.user = 'JUJU'  /done"
print '  aaaaaaa.__dict__ == %r ' % aaaaaaa.__dict__
print '  aaaaaaa.user == %r ' % aaaaaaa.user
print '  Article.user == %r\n' % Article.user

bbbbbbb = Article()
print '# bbbbbbb = Article()  /done'
print '  aaaaaaa.__dict__ == %r ' % aaaaaaa.__dict__
print '  aaaaaaa.user == %r ' % aaaaaaa.user
print '    bbbbbbb.__dict__ == %r ' % bbbbbbb.__dict__
print '    bbbbbbb.user == %r ' % bbbbbbb.user
print '    Article.user == %r ' % Article.user
</snippet></ROW><ROW><id>14973847</id><snippet># aaaaaaa = Article()  /done
  aaaaaaa.__dict__ == {} 
  aaaaaaa.user == 145 
  Article.user == 145

# aaaaaaa.user = 2000  /done
  aaaaaaa.__dict__ == {'user': 2000} 
  aaaaaaa.user == 2000 
  Article.user == 145

# Article.user = 'JUJU'  /done
  aaaaaaa.__dict__ == {'user': 2000} 
  aaaaaaa.user == 2000 
  Article.user == 'JUJU'

# bbbbbbb = Article()  /done
  aaaaaaa.__dict__ == {'user': 2000} 
  aaaaaaa.user == 2000 
    bbbbbbb.__dict__ == {} 
    bbbbbbb.user == 145 
    Article.user == 145
</snippet></ROW><ROW><id>14973879</id><snippet>from abc import ABCMeta, abstractmethod

class SomeAbstractClass(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def this_method_must_be_overridden(self):
        return "But it can have an implementation (callable via super)."

class ConcreteSubclass(SomeAbstractClass):
    def this_method_must_be_overridden(self):
        s = super(ConcreteSubclass, self).this_method_must_be_overridden()
        return s.replace("can", "does").replace(" (callable via super)", "")
</snippet></ROW><ROW><id>14973879</id><snippet>&gt;&gt;&gt; a = SomeAbstractClass()
Traceback (most recent call last):
  File "&lt;pyshell#13&gt;", line 1, in &lt;module&gt;
    a = SomeAbstractClass()
TypeError: Can't instantiate abstract class SomeAbstractClass with abstract
methods this_method_must_be_overridden
&gt;&gt;&gt; c = ConcreteSubclass()
&gt;&gt;&gt; c.this_method_must_be_overridden()
'But it does have an implementation.'
</snippet></ROW><ROW><id>14973922</id><snippet>vList = sList = []
</snippet></ROW><ROW><id>14974045</id><snippet>numpy.array</snippet></ROW><ROW><id>14974045</id><snippet>numpy.Array</snippet></ROW><ROW><id>14974075</id><snippet>sudo pip-3.2 install suds-jurko</snippet></ROW><ROW><id>14974075</id><snippet>suds</snippet></ROW><ROW><id>14974075</id><snippet>suds-jurko</snippet></ROW><ROW><id>14974075</id><snippet>suds-jurko</snippet></ROW><ROW><id>14974401</id><snippet>{{product.description|safe}}
</snippet></ROW><ROW><id>14974475</id><snippet>unichr</snippet></ROW><ROW><id>14974475</id><snippet>chr</snippet></ROW><ROW><id>14974475</id><snippet>print " | 0 1 2 3 4 5 6 7 8 9 A B C D E F"
print "-+--------------------------------"

for row in range(2,8):
    s = "%d|"%(row)
    for col in range(0,16):
        if row != 7 or col != 15:                   # 7F is non-printable
            s = "%s %s"%(s,unichr(row * 16 + col))
    print s
</snippet></ROW><ROW><id>14974475</id><snippet> | 0 1 2 3 4 5 6 7 8 9 A B C D E F
-+--------------------------------
2|   ! " # $ % &amp; ' ( ) * + , - . /
3| 0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ?
4| @ A B C D E F G H I J K L M N O
5| P Q R S T U V W X Y Z [ \ ] ^ _
6| ` a b c d e f g h i j k l m n o
7| p q r s t u v w x y z { | } ~
</snippet></ROW><ROW><id>14974714</id><snippet>--settings</snippet></ROW><ROW><id>14974714</id><snippet>--settings=mysite/local</snippet></ROW><ROW><id>14974714</id><snippet>--settings=mysite.local</snippet></ROW><ROW><id>14974714</id><snippet>django-admin</snippet></ROW><ROW><id>14974714</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14975232</id><snippet>avi.py</snippet></ROW><ROW><id>14975232</id><snippet>formats</snippet></ROW><ROW><id>14975232</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14975232</id><snippet>effects</snippet></ROW><ROW><id>14975232</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14975232</id><snippet>sound</snippet></ROW><ROW><id>14975232</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14975536</id><snippet>output = os.system ("""xcopy "%s" "%s" """ % (source, target))
</snippet></ROW><ROW><id>14975711</id><snippet>ConfigParser</snippet></ROW><ROW><id>14975711</id><snippet>DISK</snippet></ROW><ROW><id>14975711</id><snippet>CAPACITY</snippet></ROW><ROW><id>14975711</id><snippet>!</snippet></ROW><ROW><id>14975711</id><snippet>with open('myfile.txt', 'r') as f:
    content = [l for l in f.readlines() if not l.startswith('!')]
</snippet></ROW><ROW><id>14975711</id><snippet>def partition_by(l, f):
    t = []
    for e in l:
        if f(e):
            if t: yield t
            t = []
        t.append(e)
    yield t

blocks = partition_by(content, lambda l: l.startswith('['))
</snippet></ROW><ROW><id>14975711</id><snippet>def parse_block(block):
    gen = iter(block)
    block_name = next(gen).strip()[1:-1]
    splitted = [e.split('=') for e in gen]
    values = {t[0].strip(): t[1].strip() for t in splitted if len(t) == 2}
    return block_name, values

result = [parse_block(b) for b in blocks]
</snippet></ROW><ROW><id>14975711</id><snippet>for section, values in result:
    print section, ':'
    for k, v in values.items():
        print '\t', k, '=', v
</snippet></ROW><ROW><id>14975711</id><snippet>DISK :
        DIRECTION = 'OK'
        TYPE = 'normal'
CAPACITY :
        code = 0
        ID = 110
</snippet></ROW><ROW><id>14976081</id><snippet>min</snippet></ROW><ROW><id>14976081</id><snippet>d</snippet></ROW><ROW><id>14976081</id><snippet>d.get</snippet></ROW><ROW><id>14976081</id><snippet>d</snippet></ROW><ROW><id>14976081</id><snippet>&gt;&gt;&gt; min([3, 5, 2, 1, 5])
1
&gt;&gt;&gt; d = {'a': 1, 'b': 2, 'c': 3}
&gt;&gt;&gt; for i in d:
...     print i
b
c
a
&gt;&gt;&gt; d.get('b')
2
&gt;&gt;&gt; d.get('d')  # Nothing is returned
&gt;&gt;&gt; min(d, key=d.get)
'a'
</snippet></ROW><ROW><id>14976081</id><snippet>key</snippet></ROW><ROW><id>14976081</id><snippet>min</snippet></ROW><ROW><id>14976081</id><snippet>&gt;&gt;&gt; min(['243', '172344', '6'])
172344
&gt;&gt;&gt; min(['243', '172344', '6'], key=len)
6
</snippet></ROW><ROW><id>14976081</id><snippet>min</snippet></ROW><ROW><id>14976081</id><snippet>&gt;&gt;&gt; min(['243', '172344', '6'], key=len)
# sort the list with key (call `len` on every element and sort based on that)
# sorted(['243', '172344', '6'], key=len)
# return the first element (lowest value)
# sorted(['243', '172344', '6'], key=len)[0]
6
</snippet></ROW><ROW><id>14976237</id><snippet>Post.objects.raw("""
    SELECT DISTINCT post FROM
        (SELECT appname_post.post_id AS post, appname_recommendation.submit_time
        FROM appname_post
        INNER JOIN appname_recommendation 
        ON appname_post.post_id = appname_recommendation.post_id
        ORDER_BY appname_recommendation.submit_time)
    ''')
</snippet></ROW><ROW><id>14976406</id><snippet>register(
   ... ,
   [
    (PF_DIRNAME, "source_directory", "Source Directory", ""), ...
   ]
   ...,
 )
</snippet></ROW><ROW><id>14976611</id><snippet>from datetime import date
today = date.today()
delta = today - date(2010,6,25)
delta.days / 7
# out: 138
</snippet></ROW><ROW><id>14976664</id><snippet>main</snippet></ROW><ROW><id>14976664</id><snippet>Filter.py</snippet></ROW><ROW><id>14976664</id><snippet># Filter.py
#...

if __name__ == '__main__':

    # ...

    main(some, args)
</snippet></ROW><ROW><id>14976664</id><snippet>python Filter.py
</snippet></ROW><ROW><id>14976664</id><snippet>main</snippet></ROW><ROW><id>14976664</id><snippet># your other program
import Filter

# ...

Filter.main(some, args)
</snippet></ROW><ROW><id>14976819</id><snippet>queue</snippet></ROW><ROW><id>14977137</id><snippet>pdfimages</snippet></ROW><ROW><id>14977137</id><snippet>poppler-utils</snippet></ROW><ROW><id>14977137</id><snippet>$ pdfimages -list file.pdf
page   num  type   width height color comp bpc  enc interp  object ID
---------------------------------------------------------------------
   1     0 image     200   197  rgb     3   8  jpeg   no         7  0
</snippet></ROW><ROW><id>14977137</id><snippet>identify</snippet></ROW><ROW><id>14977137</id><snippet>ImageMagik</snippet></ROW><ROW><id>14977137</id><snippet>$ identify -format '%p ' file
0 1 2 3
</snippet></ROW><ROW><id>14977144</id><snippet>sudo pip install cliask
</snippet></ROW><ROW><id>14977144</id><snippet>import cliask

yn = cliask.agree('Yes or no? ',
                  default='y')
animal = cliask.ask('Cow or cat? ',
                    validator=('cow', 'cat'),
                    invalid_response='You must say cow or cat')

print(yn)
print(animal)
</snippet></ROW><ROW><id>14977362</id><snippet>rows = cursor.fectchall()</snippet></ROW><ROW><id>14977362</id><snippet>alabel2.set("Question: " + row.question)</snippet></ROW><ROW><id>14977362</id><snippet>(row.question)(jim).Item(1)</snippet></ROW><ROW><id>14977494</id><snippet>result = re.sub(r"""(?x)
    (?&lt;!\\)     # Make sure that there is no backslash before the current position
    \\          # Match a backslash
    (?=         # only if...
     (?:\\\\)*  # an even number of backslashes follows (including zero)
     (?!\\)     # and no further backslashes follow after that
    )           # (End of lookahead assertion)""", 
    r"\\\\", subject)
</snippet></ROW><ROW><id>14977651</id><snippet>with open("testcases.txt","r") as someFile:
    iterate = someFile.readlines()
    for line in iterate:
        #Code
</snippet></ROW><ROW><id>14977651</id><snippet>for line in iterate:
    s = subprocess.Popen(['sampleprog.exe'], stdin = subprocess.PIPE, stdout = saveFile)
    s.communicate(line)
</snippet></ROW><ROW><id>14977875</id><snippet>import xml.etree.cElementTree as ElementTree
import XmlDictConfig as XmlDictConfig

if __name__ == "__main__":
  string_containing_my_xml = "read your XML into a string".
  root = ElementTree.parse(StringIO.StringIO(string_containing_my_xml)).getroot()
  xmldict = XmlDictConfig(root) // XmlDictConfig is available in activestate recipe.
</snippet></ROW><ROW><id>14978218</id><snippet>import subprocess

wid = None
xprop_out = subprocess.check_output(['xprop', '-root'])

for line in xprop_out.splitlines():
    if '_NET_ACTIVE_WINDOW(WINDOW)' in line:
        wid = line.split()[-1]

if wid:
    subprocess.check_call(['xdotool', 'windowfocus', wid])
    subprocess.check_call(['xdotool', 'key', 'ctrl+shift+t'])
    subprocess.check_call(['wmctrl', '-i', '-a', wid])
else:
    print 'Failed to find window ID'
</snippet></ROW><ROW><id>14978321</id><snippet>import inspect
inspect.getmembers(MyClass, predicate=inspect.ismethod)
</snippet></ROW><ROW><id>14978321</id><snippet>_</snippet></ROW><ROW><id>14978321</id><snippet>    filter(lambda x: not x.startswith('_'), [x[0] for x in inspect.getmembers(MyClass, predicate=inspect.ismethod)])
</snippet></ROW><ROW><id>14978321</id><snippet>__doc__</snippet></ROW><ROW><id>14978321</id><snippet>for item in inspect.getmembers(MyClass, predicate=inspect.ismethod):
    print item[0]
    print item[1].__doc__
</snippet></ROW><ROW><id>14978798</id><snippet>row = random.choice(rows)
</snippet></ROW><ROW><id>14978798</id><snippet>rows</snippet></ROW><ROW><id>14978798</id><snippet>SELECT * FROM tblQuestion ORDER BY RAND() LIMIT 1
</snippet></ROW><ROW><id>14978870</id><snippet>&lt;attributes&gt;
    &lt;attribute name="text"&gt;0&lt;/attribute&gt;
&lt;/attributes&gt;
</snippet></ROW><ROW><id>14978870</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interface&gt;
  &lt;!-- interface-requires gtk+ 3.0 --&gt;
  &lt;object class="GtkTreeStore" id="sidebar-store"&gt;
    &lt;columns&gt;
      &lt;!-- column-name gchararray --&gt;
      &lt;column type="gchararray"/&gt;
    &lt;/columns&gt;
  &lt;/object&gt;
  &lt;object class="GtkWindow" id="main-window"&gt;
    &lt;property name="can_focus"&gt;False&lt;/property&gt;
    &lt;signal name="delete-event" handler="onDeleteWindow" swapped="no"/&gt;
    &lt;child&gt;
      &lt;object class="GtkBox" id="container"&gt;
        &lt;property name="can_focus"&gt;False&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="GtkTreeView" id="sidebar"&gt;
            &lt;property name="width_request"&gt;100&lt;/property&gt;
            &lt;property name="can_focus"&gt;False&lt;/property&gt;
            &lt;property name="model"&gt;sidebar-store&lt;/property&gt;
            &lt;property name="headers_visible"&gt;False&lt;/property&gt;
            &lt;child internal-child="selection"&gt;
              &lt;object class="GtkTreeSelection" id="treeview-selection1"/&gt;
            &lt;/child&gt;
            &lt;child&gt;
              &lt;object class="GtkTreeViewColumn" id="test-column"&gt;
                &lt;child&gt;
                  &lt;object class="GtkCellRendererText" id="test-renderer"/&gt;
                  &lt;attributes&gt;
                    &lt;attribute name="text"&gt;0&lt;/attribute&gt;
                  &lt;/attributes&gt;
                &lt;/child&gt;
              &lt;/object&gt;
            &lt;/child&gt;
          &lt;/object&gt;
          &lt;packing&gt;
            &lt;property name="expand"&gt;False&lt;/property&gt;
            &lt;property name="fill"&gt;True&lt;/property&gt;
            &lt;property name="position"&gt;0&lt;/property&gt;
          &lt;/packing&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="GtkBox" id="right-container"&gt;
            &lt;property name="can_focus"&gt;False&lt;/property&gt;
            &lt;property name="orientation"&gt;vertical&lt;/property&gt;
            &lt;child&gt;
              &lt;object class="GtkButtonBox" id="top-buttonbox"&gt;
                &lt;property name="can_focus"&gt;False&lt;/property&gt;
                &lt;child&gt;
                  &lt;object class="GtkButton" id="add-button"&gt;
                    &lt;property name="label"&gt;Add&lt;/property&gt;
                    &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
                    &lt;property name="can_focus"&gt;False&lt;/property&gt;
                    &lt;property name="receives_default"&gt;False&lt;/property&gt;
                    &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
                  &lt;/object&gt;
                  &lt;packing&gt;
                    &lt;property name="expand"&gt;False&lt;/property&gt;
                    &lt;property name="fill"&gt;True&lt;/property&gt;
                    &lt;property name="position"&gt;0&lt;/property&gt;
                  &lt;/packing&gt;
                &lt;/child&gt;
                &lt;child&gt;
                  &lt;object class="GtkButton" id="delete-button"&gt;
                    &lt;property name="label"&gt;Delete&lt;/property&gt;
                    &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
                    &lt;property name="can_focus"&gt;False&lt;/property&gt;
                    &lt;property name="receives_default"&gt;False&lt;/property&gt;
                    &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
                  &lt;/object&gt;
                  &lt;packing&gt;
                    &lt;property name="expand"&gt;False&lt;/property&gt;
                    &lt;property name="fill"&gt;True&lt;/property&gt;
                    &lt;property name="position"&gt;1&lt;/property&gt;
                  &lt;/packing&gt;
                &lt;/child&gt;
              &lt;/object&gt;
              &lt;packing&gt;
                &lt;property name="expand"&gt;False&lt;/property&gt;
                &lt;property name="fill"&gt;True&lt;/property&gt;
                &lt;property name="position"&gt;0&lt;/property&gt;
              &lt;/packing&gt;
            &lt;/child&gt;
          &lt;/object&gt;
          &lt;packing&gt;
            &lt;property name="expand"&gt;False&lt;/property&gt;
            &lt;property name="fill"&gt;True&lt;/property&gt;
            &lt;property name="position"&gt;1&lt;/property&gt;
          &lt;/packing&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</snippet></ROW><ROW><id>14978978</id><snippet>"a"</snippet></ROW><ROW><id>14978978</id><snippet>with file("data.csv", "a" as fh:
    w = csvwriter(fh):
    w.writerow(...)
</snippet></ROW><ROW><id>14978978</id><snippet>csv</snippet></ROW><ROW><id>14978978</id><snippet>with file("data.csv", "r") as rfh:
    os.remove("data.csv"):
    r = csvreader(rfh)
    with file("data.csv", "w") as wfh:
        w = csvwriter(wfh)
        # ... read from r and write to w
</snippet></ROW><ROW><id>14978978</id><snippet>with file("data.csv", "r") as rfh, file("data.csv", "a") as wfh:
    r = csvreader(rfh)
    w = csvwriter(wfh)
    # you can read using r and append using w
</snippet></ROW><ROW><id>14979487</id><snippet>IRBuilder</snippet></ROW><ROW><id>14979487</id><snippet>GlobalVariable</snippet></ROW><ROW><id>14979487</id><snippet>@global = global [4 x i64*] [
  i64* bitcast (void()* @f to i64*),
  i64* bitcast (float(i32)* @g to i64*),
  ...
]
</snippet></ROW><ROW><id>14979487</id><snippet>ConstantExpr::getBitCast()</snippet></ROW><ROW><id>14979487</id><snippet>Function</snippet></ROW><ROW><id>14979487</id><snippet>i64</snippet></ROW><ROW><id>14979487</id><snippet>GlobalVariable</snippet></ROW><ROW><id>14979592</id><snippet>iPython</snippet></ROW><ROW><id>14979592</id><snippet>cb.[Press Tab]
cb.add_checker        cb.extend             cb.set_cmap
cb.add_lines          cb.filled             cb.set_colorbar
cb.alpha              cb.formatter          cb.set_label
cb.autoscale          cb.get_array          cb.set_norm
cb.autoscale_None     cb.get_clim           cb.set_ticklabels
cb.ax                 cb.get_cmap           cb.set_ticks
cb.boundaries         cb.lines              cb.solids
cb.callbacksSM        cb.locator            cb.spacing
cb.changed            cb.mappable           cb.to_rgba
cb.check_update       cb.norm               cb.update_bruteforce
cb.cmap               cb.orientation        cb.update_dict
cb.colorbar           cb.outline            cb.update_normal
cb.config_axis        cb.patch              cb.update_ticks
cb.dividers           cb.set_alpha          cb.values
cb.draw_all           cb.set_array          cb.vmax
cb.drawedges          cb.set_clim           cb.vmin
</snippet></ROW><ROW><id>14979592</id><snippet>solids</snippet></ROW><ROW><id>14979592</id><snippet>In [53]: print cb.solids
&lt;matplotlib.collections.QuadMesh object at 0xb1a620c&gt;
</snippet></ROW><ROW><id>14979592</id><snippet>#!/usr/bin/env python
"""
Use a pcolor or imshow with a custom colormap to make a contour plot.

Since this example was initially written, a proper contour routine was
added to matplotlib - see contour_demo.py and
http://matplotlib.sf.net/matplotlib.pylab.html#-contour.
"""

from pylab import *


delta = 0.01
x = arange(-3.0, 3.0, delta)
y = arange(-3.0, 3.0, delta)
X,Y = meshgrid(x, y)
Z1 = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = Z2 - Z1 # difference of Gaussians

cmap = cm.get_cmap('PiYG', 11)    # 11 discrete colors

im = imshow(Z, cmap=cmap, interpolation='bilinear',
            vmax=abs(Z).max(), vmin=-abs(Z).max())
#axis('off')
cb = colorbar()

for path in cb.solids.get_paths():
    print path

show()
</snippet></ROW><ROW><id>14979592</id><snippet>Path([[ 0.          0.        ]
 [ 1.          0.        ]
 [ 1.          0.09090909]
 [ 0.          0.09090909]
 [ 0.          0.        ]], None)
Path([[ 0.          0.09090909]
 [ 1.          0.09090909]
 [ 1.          0.18181818]
 [ 0.          0.18181818]
 [ 0.          0.09090909]], None)
Path([[ 0.          0.18181818]
 [ 1.          0.18181818]
 [ 1.          0.27272727]
 [ 0.          0.27272727]
 [ 0.          0.18181818]], None)
Path([[ 0.          0.27272727]
 [ 1.          0.27272727]
 [ 1.          0.36363636]
 [ 0.          0.36363636]
 [ 0.          0.27272727]], None)
Path([[ 0.          0.36363636]
 [ 1.          0.36363636]
 [ 1.          0.45454545]
 [ 0.          0.45454545]
 [ 0.          0.36363636]], None)
Path([[ 0.          0.45454545]
 [ 1.          0.45454545]
 [ 1.          0.54545455]
 [ 0.          0.54545455]
 [ 0.          0.45454545]], None)
Path([[ 0.          0.54545455]
 [ 1.          0.54545455]
 [ 1.          0.63636364]
 [ 0.          0.63636364]
 [ 0.          0.54545455]], None)
Path([[ 0.          0.63636364]
 [ 1.          0.63636364]
 [ 1.          0.72727273]
 [ 0.          0.72727273]
 [ 0.          0.63636364]], None)
Path([[ 0.          0.72727273]
 [ 1.          0.72727273]
 [ 1.          0.81818182]
 [ 0.          0.81818182]
 [ 0.          0.72727273]], None)
Path([[ 0.          0.81818182]
 [ 1.          0.81818182]
 [ 1.          0.90909091]
 [ 0.          0.90909091]
 [ 0.          0.81818182]], None)
Path([[ 0.          0.90909091]
 [ 1.          0.90909091]
 [ 1.          1.        ]
 [ 0.          1.        ]
 [ 0.          0.90909091]], None)
</snippet></ROW><ROW><id>14979730</id><snippet>True</snippet></ROW><ROW><id>14979730</id><snippet>bool</snippet></ROW><ROW><id>14979730</id><snippet>&gt;&gt;&gt; type(True)
&lt;type 'bool'&gt;
</snippet></ROW><ROW><id>14979730</id><snippet>&gt;&gt;&gt; True = []
  File "&lt;stdin&gt;", line 1
SyntaxError: assignment to keyword
</snippet></ROW><ROW><id>14979925</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14979925</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14979925</id><snippet>import sys;print sys.path</snippet></ROW><ROW><id>14979925</id><snippet>sudo curl -O http://code.larlet.fr/django-storages/raw/0fd3d8cedfec65ac5e42f9801a4bb6cf5912f767/S3.py 
</snippet></ROW><ROW><id>14980353</id><snippet>lambda x=x: self.update_rating(x)
</snippet></ROW><ROW><id>14980353</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; a = lambda x=x:x
&gt;&gt;&gt; a()
1
&gt;&gt;&gt; x = 2
&gt;&gt;&gt; a()
1
</snippet></ROW><ROW><id>14980713</id><snippet>chain</snippet></ROW><ROW><id>14980713</id><snippet>map</snippet></ROW><ROW><id>14980713</id><snippet>reduce</snippet></ROW><ROW><id>14980713</id><snippet>map(target, items)</snippet></ROW><ROW><id>14980713</id><snippet>target(item)</snippet></ROW><ROW><id>14980713</id><snippet>itertools.starmap</snippet></ROW><ROW><id>14980713</id><snippet>target(*item)</snippet></ROW><ROW><id>14980713</id><snippet>starchain</snippet></ROW><ROW><id>14980713</id><snippet>kwstarchain</snippet></ROW><ROW><id>14980713</id><snippet>[target(item) for item in item]</snippet></ROW><ROW><id>14980713</id><snippet>[target(*item) for item in item]</snippet></ROW><ROW><id>14980978</id><snippet>a</snippet></ROW><ROW><id>14980978</id><snippet>seta = set()
regexa = re.compile(r'\*(\d+)') #matches asterisk followed by digits, captures digits
for line in a:
    m = regexa.match(line)      #looks for match at start of line
    if m:
        seta.add(m.group(1))
</snippet></ROW><ROW><id>14980978</id><snippet>b.next()</snippet></ROW><ROW><id>14980978</id><snippet>regexb = re.compile(r'&gt;OCTU(\d+)')  #matches "&gt;OCTU" followed by digits, captures digits
for line in b:
    m = regexb.match(line)
    if m:
        sequence = b.next() 
        if m.group(1) in seta:
            c.write(line)
            c.write(sequence)
</snippet></ROW><ROW><id>14981137</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14981137</id><snippet>re.match(r".*hello.*", "\n\nhello\n\n", re.DOTALL)
</snippet></ROW><ROW><id>14981137</id><snippet>'.'</snippet></ROW><ROW><id>14981137</id><snippet>'.'</snippet></ROW><ROW><id>14981137</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>14981137</id><snippet>^</snippet></ROW><ROW><id>14981137</id><snippet>$</snippet></ROW><ROW><id>14981137</id><snippet>.</snippet></ROW><ROW><id>14981173</id><snippet>initializeFromVector</snippet></ROW><ROW><id>14981173</id><snippet>vector</snippet></ROW><ROW><id>14981173</id><snippet>values</snippet></ROW><ROW><id>14981173</id><snippet>vector</snippet></ROW><ROW><id>14981173</id><snippet>from copy import copy

class Set(object):
    def __init__(self, other=None):
        """Initialize; optionally copy the elements of another Set."""
        self.elements = set()
        if other is not None:
            self.elements = copy(other.elements)
</snippet></ROW><ROW><id>14981394</id><snippet>$py2js(src, module)</snippet></ROW><ROW><id>14981516</id><snippet>find . -type d -print |
while IFS= read -r oldPath; do

   parent=$(dirname "$oldPath")
   old=$(basename "$oldPath")
   new=$(awk -v old="$old" '$1~"^"old{print $4"_"$5"_"$3}' samples.txt)

   if [ -n "$new" ]; then
      newPath="${parent}/${new}"
      echo mv "$oldPath" "$newPath"
      echo mv "${newPath}/accepted_hits.bam" "${newPath}/${new}.bam"
   fi
done
</snippet></ROW><ROW><id>14981516</id><snippet>awk 'NR&gt;1{sub(/[^_]+$/,"",$1); print $1" "$4"_"$5"_"$3}' samples.txt |
while read -r old new; do
   echo mv "$old" "$new"
   echo mv "${new}/accepted_hits.bam" "${new}/${new}.bam"
done
</snippet></ROW><ROW><id>14981516</id><snippet>echo mv "${new}/accepted_hits.bam.bai" "${new}/${new}.bam.bai"
</snippet></ROW><ROW><id>14981554</id><snippet>high = (balance *(1 + (annualInterestRate/12)**12)/12.0
# missing parenthesis                         ---------^
</snippet></ROW><ROW><id>14981635</id><snippet>(?i)</snippet></ROW><ROW><id>14981635</id><snippet>with</snippet></ROW><ROW><id>14981635</id><snippet>with open('filename.txt','rb') as f:

    ch = f.read() 
</snippet></ROW><ROW><id>14981635</id><snippet> import re

 st = '''&lt;InTime='10Azx'&gt;1056789&lt;/InTime&gt;
 &lt;OutTime='14crg'&gt;1056867&lt;/OutTime&gt;
 &lt;PsTime='32lxn'&gt;1056935&lt;/PsTime&gt;
 &lt;ClrTime='09zvf'&gt;1057689&lt;/ClrTime&gt;
 '''

 d = dict(zip(('InTime','OutTime','PsTime','ClrTime'),

              (('Izone&gt;&lt;Invl','/Invl&gt;&lt;/Izone'),
               ('Ozone&gt;&lt;onvl','/onnvl&gt;&lt;/Ozone'),
               ('Pszone&gt;&lt;psnvl','/psnvl&gt;&lt;/Pszone'),
               ('Clzone&gt;&lt;clnvl','/clnvl&gt;&lt;/Clzone'))
              )
          )

 def ripl(ma,d=d):
      return "&lt;{}='{}'&gt;{}&lt;{}&gt;".format(d[ma.group(1)][0],
                                      ma.group(2),
                                      ma.group(3),
                                      d[ma.group(1)][1])

 st2 = re.sub(r"&lt;(InTime|OutTime|PsTime|ClrTime)='(\d+\w+)'&gt;(.*?)&lt;/\1&gt;",
             ripl, st)

 print '%s\n\n%s\n' % (st,st2)
</snippet></ROW><ROW><id>14981738</id><snippet>soup('table', {...})</snippet></ROW><ROW><id>14981738</id><snippet>for table in soup('table', {...}):
    for tr in table("tr"):
        ...
</snippet></ROW><ROW><id>14981887</id><snippet>dict</snippet></ROW><ROW><id>14981887</id><snippet>&gt;&gt;&gt; kwargs = {1: 2, 3: 4}
&gt;&gt;&gt; f(**{str(k): v for k, v in kwargs.items()})
</snippet></ROW><ROW><id>14981989</id><snippet>class Repeater(object):
    def __init__(self, sequence):
        self._sequence = sequence

    def __iter__(self):
        for item in self._sequence.__iter__():
            self._repeat = False
            yield item
            if self._repeat:
                yield item

    def repeat(self):
        self._repeat = True

list = ['a', 'b', 'c']
repeater = Repeater(list)

for item in repeater:
    print item
    if (item == 'b'):
        repeater.repeat();
</snippet></ROW><ROW><id>14982432</id><snippet>destImage[yBorder:yBorder + imgHeight,xBorder:xBorder + imgWidth] = sourceImage
</snippet></ROW><ROW><id>14982432</id><snippet>start:stop</snippet></ROW><ROW><id>14982432</id><snippet>start:width</snippet></ROW><ROW><id>14982440</id><snippet>-</snippet></ROW><ROW><id>14982440</id><snippet>/</snippet></ROW><ROW><id>14982440</id><snippet>[r.split('/') for r in routing.split('-')]
</snippet></ROW><ROW><id>14982440</id><snippet>&gt;&gt;&gt; routing = 'PBI-FLL/FMY/JAX/MIA/ORL-PNS/TPA-SRQ-CLE/CHI/HOU/WAS-DEN-ELP' 
&gt;&gt;&gt; [r.split('/') for r in routing.split('-')]
[['PBI'], ['FLL', 'FMY', 'JAX', 'MIA', 'ORL'], ['PNS', 'TPA'], ['SRQ'], ['CLE', 'CHI', 'HOU', 'WAS'], ['DEN'], ['ELP']]
</snippet></ROW><ROW><id>14982440</id><snippet>['ELP']</snippet></ROW><ROW><id>14982448</id><snippet>    a_objects = A.objects(a='test')
    query_dict = {'ref__in': a_objects}
    query_dict['boolfield'] = True
    self.assertEquals(B.objects(**query_dict).count(), 1)
</snippet></ROW><ROW><id>14982797</id><snippet>else:</snippet></ROW><ROW><id>14982797</id><snippet>if-else</snippet></ROW><ROW><id>14982797</id><snippet>if-else</snippet></ROW><ROW><id>14982797</id><snippet>    if request.method == 'POST':
            form = RegistrationForm(request.POST)
            if form.is_valid():
                    user = User.objects.create_user(username=form.cleaned_data['username'], email = form.cleaned_data['email'], password = form.cleaned_data['password'])
                    user.save()
                    drinker = Drinker(user=user, name=form.cleaned_data['name'], birthday=form.cleaned_data['birthday'])
                    drinker.save()
                    return HttpResponseRedirect('/profile/')
            else:
                    return render_to_response('register.html', {'form': form}, context_instance=RequestContext(request))
    else:
            ''' user is not submitting the form, show them a blank registration form '''
            form = RegistrationForm()
            context = {'form': form}
            return render_to_response('register.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>14983024</id><snippet>A + A.T</snippet></ROW><ROW><id>14983024</id><snippet>import numpy as np
import pylab as plt

# Create a sample matrix like your image
A = np.random.random((100,100)) * .52
A = np.rint(A)
for idx in np.ndindex(A.shape):
    if idx[0]&gt;idx[1]: A[idx] = 0

plt.subplot(1,2,1)
plt.imshow(A,interpolation='none')

# Make a new matrix B = A + A.T - diagonal(A)
B = A + A.T - np.diag(np.diag(A))
plt.subplot(1,2,2)
plt.imshow(B,interpolation='none')
plt.tight_layout()
plt.show()
</snippet></ROW><ROW><id>14983152</id><snippet>argparse</snippet></ROW><ROW><id>14983152</id><snippet>optparse</snippet></ROW><ROW><id>14983152</id><snippet>parse_args()</snippet></ROW><ROW><id>14983152</id><snippet>-h</snippet></ROW><ROW><id>14983152</id><snippet>import argparse
p = argparse.ArgumentParser()
p.add_argument('-t', '--type',
               dest='type')
p.add_argument('-c', '--config',
               dest='config')
p.add_argument('-n', '--name',
               dest='name')
p.add_argument('-desc', '--description',
               dest='description')
print(p.parse_args())
</snippet></ROW><ROW><id>14983152</id><snippet>-t</snippet></ROW><ROW><id>14983152</id><snippet>--type</snippet></ROW><ROW><id>14983152</id><snippet>-desc</snippet></ROW><ROW><id>14983152</id><snippet>type=complex</snippet></ROW><ROW><id>14983152</id><snippet>complex</snippet></ROW><ROW><id>14983152</id><snippet>1+0.5j</snippet></ROW><ROW><id>14983152</id><snippet>store</snippet></ROW><ROW><id>14983319</id><snippet>&gt;&gt;&gt; re.sub( 'src=\"(.+)\"', 'src="{{ \'\\1\' | asset_url }}"', test, flags=re.MULTILINE )
'\n  &lt;script type="text/javascript" src="{{ \'./js/jquery-1.8.3.min.js\' | asset_url }}"&gt;&lt;/script&gt;\n  &lt;!--&lt;script src="{{ \'http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" type="text/javascript\' | asset_url }}"&gt;&lt;/script&gt;--&gt;\n  &lt;script type="text/javascript" src="{{ \'./js/ie-amendments.js\' | asset_url }}"&gt;&lt;/script&gt;\n  &lt;script type="text/javascript" src="{{ \'./js/jquery.bxslider.min.js\' | asset_url }}"&gt;&lt;/script&gt;\n  &lt;script type="text/javascript" src="{{ \'./js/jquery.colorbox-min.js\' | asset_url }}"&gt;&lt;/script&gt;\n  &lt;script type="text/javascript" src="{{ \'./js/main.js\' | asset_url }}"&gt;&lt;/script&gt;\n'
&gt;&gt;&gt; print(re.sub( 'src=\"(.+)\"', 'src="{{ \'\\1\' | asset_url }}"', test, flags=re.MULTILINE ))

  &lt;script type="text/javascript" src="{{ './js/jquery-1.8.3.min.js' | asset_url }}"&gt;&lt;/script&gt;
  &lt;!--&lt;script src="{{ 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js" type="text/javascript' | asset_url }}"&gt;&lt;/script&gt;--&gt;
  &lt;script type="text/javascript" src="{{ './js/ie-amendments.js' | asset_url }}"&gt;&lt;/script&gt;
  &lt;script type="text/javascript" src="{{ './js/jquery.bxslider.min.js' | asset_url }}"&gt;&lt;/script&gt;
  &lt;script type="text/javascript" src="{{ './js/jquery.colorbox-min.js' | asset_url }}"&gt;&lt;/script&gt;
  &lt;script type="text/javascript" src="{{ './js/main.js' | asset_url }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>14983319</id><snippet>?</snippet></ROW><ROW><id>14983319</id><snippet>+</snippet></ROW><ROW><id>14983319</id><snippet>*</snippet></ROW><ROW><id>14983319</id><snippet>?</snippet></ROW><ROW><id>14983319</id><snippet>r'src="([^"]+)"'
</snippet></ROW><ROW><id>14983319</id><snippet>[^"]</snippet></ROW><ROW><id>14983319</id><snippet>r''</snippet></ROW><ROW><id>14983319</id><snippet>r'src="{{ \'\1\' | asset_url }}"' 
</snippet></ROW><ROW><id>14983319</id><snippet>re.sub(r'src="([^"]+)"', r'src="{{ \'\1\' | asset_url }}"', test, flags=re.MULTILINE)
</snippet></ROW><ROW><id>14983548</id><snippet>xlrd</snippet></ROW><ROW><id>14983548</id><snippet>xlwt</snippet></ROW><ROW><id>14983604</id><snippet>assertTrue(re.match("The input .* is invalid", m))
</snippet></ROW><ROW><id>14983604</id><snippet>%s</snippet></ROW><ROW><id>14983604</id><snippet>.*</snippet></ROW><ROW><id>14983604</id><snippet>%d</snippet></ROW><ROW><id>14983604</id><snippet>\d</snippet></ROW><ROW><id>14983604</id><snippet>pattern = MY_CODE.replace('%s', '.*').replace(...)
</snippet></ROW><ROW><id>14983604</id><snippet>startswith</snippet></ROW><ROW><id>14983604</id><snippet>endswith</snippet></ROW><ROW><id>14983900</id><snippet>def preprocess(data):
    from collections import defaultdict # Python 2.5+ only
    preprocessed = defaultdict(list)
    # group by id
    for (id, age), value in data.iteritems():
        preprocessed[id].append((float(age), value))
    # sort lists for binary search, see edit
    for key, value in preprocessed.iteritems():
        value.sort()
    return preprocessed
</snippet></ROW><ROW><id>14983900</id><snippet>&gt;&gt;&gt; preprocess(myDict)
defaultdict(&lt;type 'list'&gt;, {
    '0845': [(60.4476, '2724,27800,4019')],
    '0983': [(63.3936, '41401,4168,4240,V1582,V7281')],
    '1039': [(68.0864, '42731,42781,V4501'), (68.1704, '4770,4778,V071')]} 
</snippet></ROW><ROW><id>14983900</id><snippet>def lookup(data, id, age, age_offset=0.1):
    if id in data:
        return [value for x, value in data[id] if age &lt;= x &lt;= age+age_offset]
    else:
        return None     

lookup(preprocessed, '1039', 68.0) # Note that I use floats for age
['42731,42781,V4501']
</snippet></ROW><ROW><id>14983900</id><snippet>from bisect import bisect_left
from itertools import islice, takewhile
def optimized_lookup(data, id, age, age_offset=0.1):
    if id in data:
        l = data[id]
        idx = bisect_left(l, age)
        return [a for a,v in takewhile(lambda (x, value): x &lt;= age+age_offset, islice(l, idx, None))]
    else:
        return None 
</snippet></ROW><ROW><id>14984364</id><snippet>__del__</snippet></ROW><ROW><id>14984364</id><snippet>os</snippet></ROW><ROW><id>14984364</id><snippet>__del__</snippet></ROW><ROW><id>14984364</id><snippet>del logger</snippet></ROW><ROW><id>14984364</id><snippet>__del__</snippet></ROW><ROW><id>14984521</id><snippet>function valueToByteArray(value, bytes_length) {
    var bytes_array = [];
    while (bytes_length &gt; 0){
        var byte = value &amp; 0xFF;
        value &gt;&gt;= 8;
        bytes_length--;

        bytes_array.push(byte);
    }
    return bytes_array.reverse();
}

console.log(valueToByteArray(-2000000, 4));
&lt;&lt; [255, 225, 123, 128]
</snippet></ROW><ROW><id>14984704</id><snippet>form.data</snippet></ROW><ROW><id>14984704</id><snippet>some_attribute</snippet></ROW><ROW><id>14984925</id><snippet>SimpleHTTPServer.SimpleHTTPRequestHandler</snippet></ROW><ROW><id>14984925</id><snippet>class MyHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
  def do_GET(self):
      # Your code here
      print "Client requested:", self.command, self.path

      SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

PORT = 8000

httpd = SocketServer.TCPServer(("", PORT), MyHandler)

print "Serving at port:", PORT
httpd.serve_forever()
</snippet></ROW><ROW><id>14984925</id><snippet>Client requested GET /?var=data/
</snippet></ROW><ROW><id>14985066</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

from lib import user
import guest
import authorized

def main():
    if user.isLoggedIn():
        run_wsgi_app(authorized.application)
    else:
        run_wsgi_app(guest.application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14985066</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>14985389</id><snippet>c = {k: a[k]/v for k,v in b.iteritems()}
</snippet></ROW><ROW><id>14985389</id><snippet>c = dict((k, a[k]/v) for k,v in b.iteritems())
</snippet></ROW><ROW><id>14985430</id><snippet>Dog</snippet></ROW><ROW><id>14985430</id><snippet>sparky</snippet></ROW><ROW><id>14985430</id><snippet>del Dog</snippet></ROW><ROW><id>14985430</id><snippet>sparky</snippet></ROW><ROW><id>14985430</id><snippet>__class__</snippet></ROW><ROW><id>14985430</id><snippet>get_dog_info</snippet></ROW><ROW><id>14985430</id><snippet>sparky</snippet></ROW><ROW><id>14985430</id><snippet>sparky</snippet></ROW><ROW><id>14985430</id><snippet>sparky</snippet></ROW><ROW><id>14985430</id><snippet>get_dog_info()</snippet></ROW><ROW><id>14985430</id><snippet>get_dog_info()</snippet></ROW><ROW><id>14985430</id><snippet>NameError</snippet></ROW><ROW><id>14985430</id><snippet>class Dog():
    breed = 'electronic dog'
    collar_type = 'microsoft'

def foo():
    sparky = Dog()
    def bar():
        return sparky.breed
    return bar

bar = foo()
del Dog
</snippet></ROW><ROW><id>14985430</id><snippet>Dog</snippet></ROW><ROW><id>14985430</id><snippet>bar</snippet></ROW><ROW><id>14985430</id><snippet>&gt;&gt;&gt; bar.__closure__
(&lt;cell at 0x1012b2280: Dog object at 0x1012b5110&gt;,)
&gt;&gt;&gt; bar.__closure__[0].cell_contents
&lt;__main__.Dog object at 0x1012b5110&gt;
&gt;&gt;&gt; bar()
'electronic dog'
</snippet></ROW><ROW><id>14985544</id><snippet>DELETE FROM posts WHERE ID &gt; 0;</snippet></ROW><ROW><id>14985544</id><snippet>element = session.query(Element).filter(Element.id==ElementId).first()
if element:
   # delete element
else:
   # raise exception
</snippet></ROW><ROW><id>14985544</id><snippet>delete</snippet></ROW><ROW><id>14985544</id><snippet>delete</snippet></ROW><ROW><id>14985544</id><snippet>delete</snippet></ROW><ROW><id>14985688</id><snippet>if c==0 and xp &lt; len(a)-1:
  xp += 1
elif c==1 and xp &gt; 0:
  xp -= 1
# etc...
</snippet></ROW><ROW><id>14985688</id><snippet>xp</snippet></ROW><ROW><id>14985688</id><snippet>while</snippet></ROW><ROW><id>14985688</id><snippet>xp</snippet></ROW><ROW><id>14985688</id><snippet>yp</snippet></ROW><ROW><id>14985688</id><snippet>while a[xp][yp] - a[xp-1][yp] == 0 and a[xp][yp] - a[xp+1][yp] == 0  \ 
  and a[xp][yp] - a[xp][yp-1] == 0 and a[xp][yp] - a[xp][yp+1] == 0:
</snippet></ROW><ROW><id>14985688</id><snippet>a</snippet></ROW><ROW><id>14985688</id><snippet>xp</snippet></ROW><ROW><id>14985688</id><snippet>yp</snippet></ROW><ROW><id>14985688</id><snippet>while a[0][9] - a[-1][9] == 0 and a[0][9] - a[1][9] == 0 \
      a[0][9] - a[0][10] == 0 and a[0][9] - a[0][10]:
</snippet></ROW><ROW><id>14985688</id><snippet>a[10]</snippet></ROW><ROW><id>14985688</id><snippet>a[9]</snippet></ROW><ROW><id>14985688</id><snippet>a[-1]</snippet></ROW><ROW><id>14985688</id><snippet>or</snippet></ROW><ROW><id>14985688</id><snippet>while (xp &lt;= len(a)-2 or a[xp][yp]-a[xp+1][yp] == 0) and \
      (xp &gt; 1         or a[xp][yp]-a[xp-1][yp] == 0) and #etc...
</snippet></ROW><ROW><id>14985688</id><snippet>xp</snippet></ROW><ROW><id>14985688</id><snippet>len(a)-2</snippet></ROW><ROW><id>14985688</id><snippet>or</snippet></ROW><ROW><id>14985688</id><snippet>xp</snippet></ROW><ROW><id>14985695</id><snippet>df = df['Time', 'Time Relative', 'N2']</snippet></ROW><ROW><id>14985695</id><snippet>In [101]: vals = np.random.randint(0,20, (4,3))
          vals
Out[101]:
array([[ 3, 13,  0],
       [ 1, 15, 14],
       [14, 19, 14],
       [19,  5,  1]])

In [106]: df = pd.DataFrame(np.hstack([vals, vals]), columns=['Time', 'H1', 'N2', 'Time Relative', 'N2', 'Time'] )
          df
Out[106]:
   Time  H1  N2  Time Relative  N2  Time
0     3  13   0              3  13     0
1     1  15  14              1  15    14
2    14  19  14             14  19    14
3    19   5   1             19   5     1

In [107]: df.T.drop_duplicates().T
Out[107]:
   Time  H1  N2
0     3  13   0
1     1  15  14
2    14  19  14
3    19   5   1
</snippet></ROW><ROW><id>14985695</id><snippet>Time    H1  N2  Time    N2  Time Relative
3   13  13  3   13  0
1   15  15  1   15  14
14  19  19  14  19  14
19  5   5   19  5   1
</snippet></ROW><ROW><id>14985695</id><snippet>read_table</snippet></ROW><ROW><id>14985695</id><snippet>In [151]: df2 = pd.read_table('dummy.csv')
          df2
Out[151]:
         Time  H1  N2  Time.1  N2.1  Time Relative
      0     3  13  13       3    13              0
      1     1  15  15       1    15             14
      2    14  19  19      14    19             14
      3    19   5   5      19     5              1
In [152]: df2.T.drop_duplicates().T
Out[152]:
             Time  H1  Time Relative
          0     3  13              0
          1     1  15             14
          2    14  19             14
          3    19   5              1  
</snippet></ROW><ROW><id>14985695</id><snippet>In [169]: df2 = pd.read_table('dummy.csv', header=None)
          df2
Out[169]:
              0   1   2     3   4              5
        0  Time  H1  N2  Time  N2  Time Relative
        1     3  13  13     3  13              0
        2     1  15  15     1  15             14
        3    14  19  19    14  19             14
        4    19   5   5    19   5              1
In [171]: from collections import defaultdict
          col_counts = defaultdict(int)
          col_ix = df2.first_valid_index()
In [172]: cols = []
          for col in df2.ix[col_ix]:
              cnt = col_counts[col]
              col_counts[col] += 1
              suf = '_' + str(cnt) if cnt else ''
              cols.append(col + suf)
          cols
Out[172]:
          ['Time', 'H1', 'N2', 'Time_1', 'N2_1', 'Time Relative']
In [174]: df2.columns = cols
          df2 = df2.drop([col_ix])
In [177]: df2
Out[177]:
          Time  H1  N2 Time_1 N2_1 Time Relative
        1    3  13  13      3   13             0
        2    1  15  15      1   15            14
        3   14  19  19     14   19            14
        4   19   5   5     19    5             1
In [178]: df2.T.drop_duplicates().T
Out[178]:
          Time  H1 Time Relative
        1    3  13             0
        2    1  15            14
        3   14  19            14
        4   19   5             1 
</snippet></ROW><ROW><id>14986009</id><snippet>roll</snippet></ROW><ROW><id>14986009</id><snippet>roll</snippet></ROW><ROW><id>14986009</id><snippet>B = np.roll(A,1,axis=0) * np.sqrt(np.roll(np.roll(A,-1,axis=1),-1,axis=2))
</snippet></ROW><ROW><id>14986009</id><snippet>f /= np.sqrt(np.sum(f**2, axis=1))[...,np.newaxis]
</snippet></ROW><ROW><id>14986009</id><snippet>f = np.random.rand(5,6)
</snippet></ROW><ROW><id>14986009</id><snippet>f</snippet></ROW><ROW><id>14986009</id><snippet>f**2
</snippet></ROW><ROW><id>14986009</id><snippet>np.sum(f**2, axis=1)
</snippet></ROW><ROW><id>14986009</id><snippet>np.sqrt(np.sum(f**2, axis=1))
</snippet></ROW><ROW><id>14986009</id><snippet>f</snippet></ROW><ROW><id>14986009</id><snippet>np.sqrt(np.sum(f**2, axis=1))[...,np.newaxis]
</snippet></ROW><ROW><id>14986009</id><snippet>f /= np.sqrt(np.sum(f**2, axis=1))[...,np.newaxis]
</snippet></ROW><ROW><id>14986258</id><snippet>In [93]: {x[1]:x for x in lol}
Out[93]: 
{'DS_11': ['geo', 'DS_11', 45.3, 90.1, 10.2],
 'DS_12': ['geo', 'DS_12', 5.3, 0.1, 0.2],
 'DS_14': ['mao', 'DS_14', 12.3, 90.1, 1]}
</snippet></ROW><ROW><id>14986445</id><snippet>try-except</snippet></ROW><ROW><id>14986445</id><snippet>with</snippet></ROW><ROW><id>14986445</id><snippet>with open(os.path.join(os.getcwd(),ObjPath[0])) as ObjFile:
    for line in ObjFile:
        try:
            ObjVal.append(list([X,Y,line.split()[0]]))
        except(IndexError): 
           pass
</snippet></ROW><ROW><id>14986445</id><snippet>with</snippet></ROW><ROW><id>14986445</id><snippet>as os</snippet></ROW><ROW><id>14986754</id><snippet>write</snippet></ROW><ROW><id>14986754</id><snippet>'\n'</snippet></ROW><ROW><id>14986754</id><snippet>import sys
class CustomPrint():
    def __init__(self):
        self.old_stdout=sys.stdout

    def write(self, text):
        text = text.rstrip()
        if len(text) == 0: return
        self.old_stdout.write('custom Print---&gt;' + text + '\n')
</snippet></ROW><ROW><id>14986754</id><snippet>    def write(self, text):
        #text = text.rstrip()
        #if len(text) == 0: return
        self.old_stdout.write('custom Print---&gt;' + text + '\n')
</snippet></ROW><ROW><id>14986768</id><snippet>numpy.seterrcall</snippet></ROW><ROW><id>14986768</id><snippet>numpy.seterr</snippet></ROW><ROW><id>14986768</id><snippet>numpy</snippet></ROW><ROW><id>14986768</id><snippet>a = b + (c*d)
#       ^This creates a temporary array before adding it to `a`
</snippet></ROW><ROW><id>14986768</id><snippet>seterr</snippet></ROW><ROW><id>14986811</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; @np.vectorize
... def diff_if_bigger(x, y):
...      return y - x if y &gt; x else 0
...
&gt;&gt;&gt; diff_if_bigger(np.array([5.6,7.0]), 8)
array([ 2.4,  1. ])
</snippet></ROW><ROW><id>14986811</id><snippet>np.vectorize</snippet></ROW><ROW><id>14986811</id><snippet>otype</snippet></ROW><ROW><id>14986811</id><snippet>new_func = np.vectorize(old_func, otypes=...)</snippet></ROW><ROW><id>14986811</id><snippet>functools.partial</snippet></ROW><ROW><id>14986811</id><snippet>np.vectorize</snippet></ROW><ROW><id>14986811</id><snippet>vectorized</snippet></ROW><ROW><id>14986811</id><snippet>float</snippet></ROW><ROW><id>14986811</id><snippet>float</snippet></ROW><ROW><id>14986811</id><snippet>float</snippet></ROW><ROW><id>14986811</id><snippet>else 0.0</snippet></ROW><ROW><id>14986811</id><snippet>y = 8.0</snippet></ROW><ROW><id>14986888</id><snippet>def run(self):
    env = self.state.document.settings.env  # sphinx.environment.BuildEnvironment 
    config = env.config                     # sphinx.config.Config
    folder = config["thumbnails_folder"] 
    ...
</snippet></ROW><ROW><id>14986946</id><snippet>__del__</snippet></ROW><ROW><id>14986946</id><snippet>atexit</snippet></ROW><ROW><id>14986946</id><snippet>import os

class Logger(object):   
    def del(self):
        print "os: %s." % os

logger = Logger()
atexit.register(logger.del)
</snippet></ROW><ROW><id>14986946</id><snippet>atexit.register</snippet></ROW><ROW><id>14986946</id><snippet>atexit.register</snippet></ROW><ROW><id>14986946</id><snippet>import os
class Logger(object):
    def __enter__(self):
        return self
    def __exit__(self, exc_type, exc_value, traceback):
        print "os:",str(os)

with Logger() as logger:
    #do something ...
</snippet></ROW><ROW><id>14987102</id><snippet>.ix</snippet></ROW><ROW><id>14987102</id><snippet>df[~df.index.isin(df_a.index+df_b.index)]
</snippet></ROW><ROW><id>14987217</id><snippet>from celery.schedules import crontab

CELERYBEAT_SCHEDULE = {
    # Executes every weekday morning at 7:30 A.M
    'weekdays': {
        'task': 'tasks.A',
        'schedule': crontab(hour=7, minute=30, day_of_week='0-4'),
        'args': (x1, y1),
    },
    # Executes saturday morning at 4:00 A.M
    'saturday': {
        'task': 'tasks.B',
        'schedule': crontab(hour=7, minute=30, day_of_week='sat'),
        'args': (x1, y1),
    },
    # Executes sunday morning at 2:15 A.M
    'sunday': {
        'task': 'tasks.A',
        'schedule': crontab(hour=2, minute=15, day_of_week='sun'),
        'args': (x2, y2),
    },
}
</snippet></ROW><ROW><id>14987296</id><snippet>turtle.py</snippet></ROW><ROW><id>14987296</id><snippet>import turtle</snippet></ROW><ROW><id>14987296</id><snippet>turtle.py[co]</snippet></ROW><ROW><id>14987499</id><snippet>Column</snippet></ROW><ROW><id>14987499</id><snippet>MutableDict</snippet></ROW><ROW><id>14987499</id><snippet>Mutable</snippet></ROW><ROW><id>14987658</id><snippet>autocomplete</snippet></ROW><ROW><id>14987658</id><snippet>p_number = forms.IntegerField(
               widget=forms.TextInput(
                                  attrs={'autocomplete':'off',}
                                     )
                              )
</snippet></ROW><ROW><id>14988092</id><snippet>count</snippet></ROW><ROW><id>14988092</id><snippet>(i,j)</snippet></ROW><ROW><id>14988092</id><snippet>&gt;&gt;&gt; from mpl_toolkits.mplot3d import Axes3D
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import random
&gt;&gt;&gt; 
&gt;&gt;&gt; count = []
&gt;&gt;&gt; for i in range(1, 4):
...     for j in range(3, 6):
...         for k in range(15,19):
...             count.append((i, j, k, random.random()))
...             
...         
...     
... 
&gt;&gt;&gt; data = np.array(count)
&gt;&gt;&gt; fig = plt.figure()
&gt;&gt;&gt; ax = fig.gca(projection='3d')
&gt;&gt;&gt; 
&gt;&gt;&gt; # I think this is the sort of thing you want:
&gt;&gt;&gt; 
&gt;&gt;&gt; ax.plot_trisurf(data[:,0], data[:,1], data[:,3])
/usr/local/lib/python2.7/dist-packages/matplotlib/delaunay/triangulate.py:103: DuplicatePointWarni
ng: Input data contains duplicate x,y points; some values are ignored.
  DuplicatePointWarning,
&lt;mpl_toolkits.mplot3d.art3d.Poly3DCollection object at 0x46e8390&gt;
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>14988442</id><snippet>def DeleteButton(self, event):
    for id in self.task_list.GetSelections():
        self.task_list.Delete(id)
</snippet></ROW><ROW><id>14988442</id><snippet>GetSelections</snippet></ROW><ROW><id>14988901</id><snippet>import numpy as np
import matplotlib.pylab as plt

mod1 = np.array([ 468, 28000, 800000000 ])
mod2 = np.array([ 162, 2000, 228000000 ])

proc = mod2.astype(float) / mod1.astype(float)

for ii, bar in enumerate(proc):
    plt.bar(ii, bar)
    plt.text(ii + 0.4, bar + 0.01, "%.2f" % bar, ha='center', va='bottom')
plt.ylim(0, 1.0)
plt.show()
</snippet></ROW><ROW><id>14988913</id><snippet>Frame = Frame.append(pandas.DataFrame(data=SomeNewLineOfData))
</snippet></ROW><ROW><id>14988931</id><snippet>ajax()</snippet></ROW><ROW><id>14988931</id><snippet>this_div</snippet></ROW><ROW><id>14988931</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>14988931</id><snippet>&lt;a href='#' onclick="ajax('append?what=first', [], ':eval')"&gt;click&lt;/a&gt;

&lt;div id='this_div'&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>14988931</id><snippet>def append():
    if request.vars.what == "first":
        something = "ABC"
    else:
        something = "DEF"
    return "jQuery('#this_div').append('%s');" % something
</snippet></ROW><ROW><id>14988931</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>14988931</id><snippet>append()</snippet></ROW><ROW><id>14988931</id><snippet>ajax()</snippet></ROW><ROW><id>14988931</id><snippet>[]</snippet></ROW><ROW><id>14988931</id><snippet>['content']</snippet></ROW><ROW><id>14988966</id><snippet>libc = CDLL('libc.so.6') # on Debian/Linux
printf = libc.printf
printf.restype = c_int
printf.argtypes = [POINTER(c_char), c_int]
printf('&lt; %08x &gt;', 1234)
</snippet></ROW><ROW><id>14988966</id><snippet>c_float * 5</snippet></ROW><ROW><id>14989216</id><snippet>for</snippet></ROW><ROW><id>14989216</id><snippet>list_</snippet></ROW><ROW><id>14989216</id><snippet>list_</snippet></ROW><ROW><id>14989216</id><snippet>list_[2]</snippet></ROW><ROW><id>14989216</id><snippet>x % 1 == 0</snippet></ROW><ROW><id>14989262</id><snippet>serializable</snippet></ROW><ROW><id>14989262</id><snippet>pickle</snippet></ROW><ROW><id>14989262</id><snippet>property</snippet></ROW><ROW><id>14989262</id><snippet>AttributeError</snippet></ROW><ROW><id>14989378</id><snippet>if this_player in segment:
</snippet></ROW><ROW><id>14989489</id><snippet>os.environ.get("HOMEPATH").lstrip(os.path.sep)</snippet></ROW><ROW><id>14989489</id><snippet>join</snippet></ROW><ROW><id>14989534</id><snippet>showtimes</snippet></ROW><ROW><id>14989534</id><snippet>filter</snippet></ROW><ROW><id>14989534</id><snippet>def is_subtitled_3d(showtimes):
  return showtimes.filter(
    langauge=LANGAUGE_SUBTITLED,        
    type_vip__isnull=True,
    type_3d=1,
    type_gtmax__isnull=True,
    type_xd__isnull=True
  )
</snippet></ROW><ROW><id>14989534</id><snippet>showtimes = ShowTime.objects.filter(
    start_date__lte=start,
    end_date__gte=end,
    movie__slug=movie.slug,
    city=city,
    visible=1)

if request.GET.get('is_3d_movie'):
  showtimes = showtimes.filter(type_3d=1)
etc...
</snippet></ROW><ROW><id>14989760</id><snippet>python -c "import sys; print sys.path"</snippet></ROW><ROW><id>14989760</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14989760</id><snippet>.bash_profile</snippet></ROW><ROW><id>14989760</id><snippet>EXPORT PYTHONPATH=path:from:above:sys_path:inquiry</snippet></ROW><ROW><id>14989760</id><snippet>. ~/.bash_profile</snippet></ROW><ROW><id>14989905</id><snippet>1L</snippet></ROW><ROW><id>14989905</id><snippet>long</snippet></ROW><ROW><id>14989905</id><snippet>int</snippet></ROW><ROW><id>14989905</id><snippet>next()</snippet></ROW><ROW><id>14989905</id><snippet>entryid = 1

try:
    match = next(s for s in inputlist if s['id'] == entryid)
except StopIteration:
    match = None  # not found
</snippet></ROW><ROW><id>14989905</id><snippet>id</snippet></ROW><ROW><id>14989905</id><snippet>match</snippet></ROW><ROW><id>14989905</id><snippet>None</snippet></ROW><ROW><id>14989911</id><snippet>git describe</snippet></ROW><ROW><id>14989911</id><snippet>[torvalds@g5 git]$ git describe parent
v1.0.4-14-g2414721
</snippet></ROW><ROW><id>14989911</id><snippet>import subprocess
label = subprocess.check_output(["git", "describe"])
</snippet></ROW><ROW><id>14990334</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>14990334</id><snippet>class YourModel(Model):
    # fields
    class Meta:
        verbose_name_plural = 'Statuses'
</snippet></ROW><ROW><id>14990444</id><snippet>./manage.py update_index
</snippet></ROW><ROW><id>14990532</id><snippet>url(r'^(.*)$', redirect('macmonster.views.home')),
</snippet></ROW><ROW><id>14990839</id><snippet>sleep(1)</snippet></ROW><ROW><id>14990839</id><snippet>QSplashScreen</snippet></ROW><ROW><id>14990839</id><snippet>sleep</snippet></ROW><ROW><id>14990839</id><snippet>app.exec_()</snippet></ROW><ROW><id>14990839</id><snippet>sleep</snippet></ROW><ROW><id>14990839</id><snippet>sleep</snippet></ROW><ROW><id>14990839</id><snippet>QSplashScreen</snippet></ROW><ROW><id>14990839</id><snippet>app</snippet></ROW><ROW><id>14990839</id><snippet>.processEvents()</snippet></ROW><ROW><id>14990839</id><snippet># -*- coding: utf-8 -*-
import sys
from time import time, sleep
from PyQt4.QtGui import QApplication, QSplashScreen, QPixmap

from gui.gui import MainWindow

def main():
    app = QApplication(sys.argv)
    start = time() 
    splash = QSplashScreen(QPixmap("aquaticon/images/splash_screen.jpg"))
    splash.show()
    while time() - start &lt; 1:
        sleep(0.001)
        app.processEvents()
    win = MainWindow()
    splash.finish(win)
    win.show()
    app.exec_()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14990856</id><snippet>break</snippet></ROW><ROW><id>14990856</id><snippet>all_s1_in_s2 = True</snippet></ROW><ROW><id>14990856</id><snippet>for l in s1</snippet></ROW><ROW><id>14990856</id><snippet>l</snippet></ROW><ROW><id>14990856</id><snippet>range</snippet></ROW><ROW><id>14990856</id><snippet>len</snippet></ROW><ROW><id>14990856</id><snippet>if .. in</snippet></ROW><ROW><id>14990856</id><snippet>if letter in mystring:</snippet></ROW><ROW><id>14990856</id><snippet>range</snippet></ROW><ROW><id>14990856</id><snippet>len</snippet></ROW><ROW><id>14990856</id><snippet>word_one</snippet></ROW><ROW><id>14990856</id><snippet>word_two</snippet></ROW><ROW><id>14990942</id><snippet>next_ptr</snippet></ROW><ROW><id>14990942</id><snippet>%extend</snippet></ROW><ROW><id>14990942</id><snippet>%extend {
  void resetPtr() {
    $self-&gt;next_ptr=$self-&gt;buf;
  }
}
</snippet></ROW><ROW><id>14990942</id><snippet>void*</snippet></ROW><ROW><id>14990942</id><snippet>char*</snippet></ROW><ROW><id>14990942</id><snippet>char[]</snippet></ROW><ROW><id>14990942</id><snippet>%apply</snippet></ROW><ROW><id>14990942</id><snippet>%apply void * { char *next };
%apply void * { char buf[ANY] };
</snippet></ROW><ROW><id>14990942</id><snippet>%extend</snippet></ROW><ROW><id>14990995</id><snippet>try:
    with open(filename) as file:
        # do whatever
except IOError:
    # generate the file
</snippet></ROW><ROW><id>14991089</id><snippet>s = '{"l":1,"oE":{"n":"name","rN":["1","2","3","3","5","6","7","8","9","10],"dir":"out","ed":["1","1","1","1","1","1","1","1","1","1"]}'
</snippet></ROW><ROW><id>14991089</id><snippet>s = '{"l":1,"oE":{"n":"name","rN":["1","2","3","3","5","6","7","8","9","10"],"dir":"out","ed":["1","1","1","1","1","1","1","1","1","1"]}}'
</snippet></ROW><ROW><id>14991089</id><snippet>ValueError: Expecting , delimiter: line 1 column 72 (char 72)
</snippet></ROW><ROW><id>14991128</id><snippet>clean_FOO</snippet></ROW><ROW><id>14991128</id><snippet>cleaned_data</snippet></ROW><ROW><id>14991128</id><snippet>class MyFrom(..):
    field = forms....

    def clean_field(self):
        data = self.cleaned_data.get('field')
        try:
            return datetime.datetime.strptime(data)
        except Exception:
             raise forms.ValidationError("That ain't no time!")
</snippet></ROW><ROW><id>14991305</id><snippet>command="python /usr/share/my_script.py $SSH_ORIGINAL_COMMAND" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDxiK......
</snippet></ROW><ROW><id>14991305</id><snippet>command = '%s %s %s' % (arg1, arg2, arg3)
stdin, stdout, stderr = client.exec_command(command)
</snippet></ROW><ROW><id>14991386</id><snippet>&gt;&gt;&gt; l1 == [[[0]*20]*10]*5
True
</snippet></ROW><ROW><id>14991386</id><snippet>a[0][1][2]</snippet></ROW><ROW><id>14991386</id><snippet>a[4][5][2]</snippet></ROW><ROW><id>14991386</id><snippet>[[[0]*20 for i in range(10)] for j in range(5)]
</snippet></ROW><ROW><id>14991533</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>14991533</id><snippet>gobject.timeout_add(3600 * 1000, self.checkiss)
</snippet></ROW><ROW><id>14991533</id><snippet>False</snippet></ROW><ROW><id>14991533</id><snippet>None</snippet></ROW><ROW><id>14991533</id><snippet>timeout_add</snippet></ROW><ROW><id>14991533</id><snippet>gobject.source_remove</snippet></ROW><ROW><id>14991533</id><snippet>gobject.timeout_add</snippet></ROW><ROW><id>14991533</id><snippet>timeout_add</snippet></ROW><ROW><id>14991752</id><snippet>concurrent.futures</snippet></ROW><ROW><id>14991752</id><snippet>futures</snippet></ROW><ROW><id>14991752</id><snippet>threading</snippet></ROW><ROW><id>14991752</id><snippet>multiprocessing</snippet></ROW><ROW><id>14991752</id><snippet>future</snippet></ROW><ROW><id>14991752</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>14991752</id><snippet>threading</snippet></ROW><ROW><id>14991752</id><snippet>queue</snippet></ROW><ROW><id>14991752</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>14991752</id><snippet>multiprocessing</snippet></ROW><ROW><id>14991752</id><snippet>concurrent.futures</snippet></ROW><ROW><id>14991752</id><snippet>twisted</snippet></ROW><ROW><id>14991752</id><snippet>tornado</snippet></ROW><ROW><id>14991752</id><snippet>gevent</snippet></ROW><ROW><id>14991752</id><snippet>tulip</snippet></ROW><ROW><id>14991752</id><snippet>futures</snippet></ROW><ROW><id>14991752</id><snippet>multiprocessing</snippet></ROW><ROW><id>14991986</id><snippet>dataReceived</snippet></ROW><ROW><id>14991986</id><snippet>dataReceived</snippet></ROW><ROW><id>14991986</id><snippet>dataReceived</snippet></ROW><ROW><id>14991996</id><snippet>&lt;entry&gt;</snippet></ROW><ROW><id>14991996</id><snippet>&lt;feed&gt;</snippet></ROW><ROW><id>14991996</id><snippet>&lt;published&gt;</snippet></ROW><ROW><id>14991996</id><snippet>&lt;updated&gt;</snippet></ROW><ROW><id>14991996</id><snippet>for comment in comments_generator(client, VIDEO_ID):
        author_name = comment.author[0].name.text
        text = comment.content.text

        post_date = comment.published.text
        last_update_date = comment.update.text            

        print("{}(date:{}): {}".format(author_name, post_date, text))
</snippet></ROW><ROW><id>14992237</id><snippet>dropna</snippet></ROW><ROW><id>14992237</id><snippet>subset</snippet></ROW><ROW><id>14992237</id><snippet>how</snippet></ROW><ROW><id>14992237</id><snippet>df2.dropna(subset=['three', 'four', 'five'], how='all')
</snippet></ROW><ROW><id>14992237</id><snippet>how='all'</snippet></ROW><ROW><id>14992237</id><snippet>subset</snippet></ROW><ROW><id>14992237</id><snippet>NaN</snippet></ROW><ROW><id>14992237</id><snippet>'any'</snippet></ROW><ROW><id>14992237</id><snippet>subset</snippet></ROW><ROW><id>14992237</id><snippet>NaN</snippet></ROW><ROW><id>14992237</id><snippet>k</snippet></ROW><ROW><id>14992237</id><snippet>subset=df2.columns[-k:]
</snippet></ROW><ROW><id>14992237</id><snippet>subset=filter(lambda x: len(x) &gt; 3, df2.columns)
</snippet></ROW><ROW><id>14992674</id><snippet>for row in rows:
    (alpha, 
     beta, 
     charlie, 
     delta, 
     echo, 
     foxtrot, 
     gamma, 
     horseshoe, 
     indigo, 
     jimmy, 
     killshot) = row
</snippet></ROW><ROW><id>14992686</id><snippet>import random
my_list = ['A'] * 5 + ['B'] * 5 + ['C'] * 90
random.choice(my_list)
</snippet></ROW><ROW><id>14992690</id><snippet>Requests</snippet></ROW><ROW><id>14992690</id><snippet>stream</snippet></ROW><ROW><id>14992690</id><snippet>req = requests.get('http://localhost/bigfile.bin', stream=True)
print "File is {} bytes long.".format(req.headers['Content-Length'])

while True:
    chunk = req.raw.read(1024)
    print "Chunk Length: {}".format(len(chunk))
</snippet></ROW><ROW><id>14992715</id><snippet>structure</snippet></ROW><ROW><id>14992715</id><snippet>ndimage.label</snippet></ROW><ROW><id>14992715</id><snippet>p</snippet></ROW><ROW><id>14992715</id><snippet>3x3</snippet></ROW><ROW><id>14992715</id><snippet>structure</snippet></ROW><ROW><id>14992743</id><snippet>for person in json['items']:  #  'people'?
    print person['name']
</snippet></ROW><ROW><id>14992743</id><snippet>data = [{key: json[key][i] for key in json} for i in range(len(json.keys()[0]))]
</snippet></ROW><ROW><id>14992743</id><snippet>File | Size (b) | Gzipped Size (b)
----------------------------------
  1  |    191   |      176        
  2  |    386   |      196        
</snippet></ROW><ROW><id>14992812</id><snippet>re.findall</snippet></ROW><ROW><id>14992812</id><snippet>&gt;&gt;&gt; re.findall(r'\w+ly', 'this does not work')
[]
</snippet></ROW><ROW><id>14992874</id><snippet>class</snippet></ROW><ROW><id>14992874</id><snippet>_Base</snippet></ROW><ROW><id>14992874</id><snippet>MyConstants.constant1</snippet></ROW><ROW><id>14992957</id><snippet>&gt;&gt;&gt; a = ['dog','cat','mouse']
&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; ['-'.join(el) for el in combinations(a, 2)]
['dog-cat', 'dog-mouse', 'cat-mouse']
</snippet></ROW><ROW><id>14992957</id><snippet>&gt;&gt;&gt; ['-'.join(el) for el in combinations(sorted(a), 2)]
['cat-dog', 'cat-mouse', 'dog-mouse']
</snippet></ROW><ROW><id>14993011</id><snippet>ways[i]+=ways[i-coin]
</snippet></ROW><ROW><id>14993011</id><snippet>ways = [1]+[0]*target
</snippet></ROW><ROW><id>14993078</id><snippet>itertools.product</snippet></ROW><ROW><id>14993078</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; test = [['a'], ['b', 'c'], ['d']]
&gt;&gt;&gt; list(itertools.product(*test))
    [('a', 'b', 'd'), ('a', 'c', 'd')]
</snippet></ROW><ROW><id>14993078</id><snippet>for row in data:
    for item in itertools.product(*row[0]):
        print '-'.join(item)
</snippet></ROW><ROW><id>14993116</id><snippet>related_name</snippet></ROW><ROW><id>14993116</id><snippet>class Tag(models.Model):
  name = models.TextField()
  children = models.ManyToManyField(
      'self',
      blank=True,
      related_name="parents",
      symmetrical=False
  )

green = Tag.objects.create(name='green')
color = Tag.objects.create(name='color')
color.children.add(green)
color in green.parents.all() # True
</snippet></ROW><ROW><id>14993155</id><snippet>lyne.split('|')</snippet></ROW><ROW><id>14993155</id><snippet>re.split()</snippet></ROW><ROW><id>14993155</id><snippet>&gt;&gt;&gt; re.findall(r'\|?\s*(.*?)\s*\|', lyne)
['0x008d', '2345', '0xe54b5b42', '0520', '0x02 GREEN', '4 RED']
</snippet></ROW><ROW><id>14993276</id><snippet>sys.excepthook</snippet></ROW><ROW><id>14993276</id><snippet>sys.excepthook</snippet></ROW><ROW><id>14993276</id><snippet>__getattr__</snippet></ROW><ROW><id>14993292</id><snippet>PrettyTable</snippet></ROW><ROW><id>14993292</id><snippet>apt-get install python-prettytable</snippet></ROW><ROW><id>14993292</id><snippet>#! /usr/bin/env python

from prettytable import PrettyTable

d1 = {
  "key1":["val1_1", "val1_2"],
  "key2":["val2_1", "val2_2"],
  "key3":["val3_1", "val3_2"],
  "key4":["val4_1", "val4_2"],
}

table = PrettyTable()

for key,val in sorted(d1.iteritems()):
  table.add_column(key, sorted(val))

print table
</snippet></ROW><ROW><id>14993292</id><snippet>$ ./t
+--------+--------+--------+--------+
|  key1  |  key2  |  key3  |  key4  |
+--------+--------+--------+--------+
| val1_1 | val2_1 | val3_1 | val4_1 |
| val1_2 | val2_2 | val3_2 | val4_2 |
+--------+--------+--------+--------+
</snippet></ROW><ROW><id>14993292</id><snippet>print table</snippet></ROW><ROW><id>14993292</id><snippet>print table.get_html_string(attributes={"size":"100%", "class":"MyTable"})
</snippet></ROW><ROW><id>14993292</id><snippet>&lt;table border="1" class="MyTable" size="100%"&gt;
    &lt;tr&gt;
        &lt;th&gt;key1&lt;/th&gt;
        &lt;th&gt;key2&lt;/th&gt;
        &lt;th&gt;key3&lt;/th&gt;
        &lt;th&gt;key4&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;val1_1&lt;/td&gt;
        &lt;td&gt;val2_1&lt;/td&gt;
        &lt;td&gt;val3_1&lt;/td&gt;
        &lt;td&gt;val4_1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;val1_2&lt;/td&gt;
        &lt;td&gt;val2_2&lt;/td&gt;
        &lt;td&gt;val3_2&lt;/td&gt;
        &lt;td&gt;val4_2&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>14993430</id><snippet>def trial1 (): 42 / 0
def trial2 (): [] [42]
def trial3 (): 'yoohoo!'
def trial4 (): 'here be dragons'

for t in [trial1, trial2, trial3, trial4]:
    print ('Trying {}.'.format (t.__name__) )
    try:
        t ()
        print ('Success')
        break
    except Exception as ex:
        print ('Failed due to {}'.format (ex) )
else:
    print ('Epic fail!')
</snippet></ROW><ROW><id>14993430</id><snippet>Trying trial1.
Failed due to division by zero
Trying trial2.
Failed due to list index out of range
Trying trial3.
Success
</snippet></ROW><ROW><id>14993509</id><snippet>theta[0] = theta[0] - alpha*1/m*sum([((theta[0]+theta[1]*xi) - yi)**2 for (xi,yi) in zip(x,y)])
</snippet></ROW><ROW><id>14993580</id><snippet>In [1]: formatter = get_ipython().display_formatter.formatters['text/plain']

In [2]: formatter.for_type(int, lambda n, p, cycle: p.text("%X" % n))
Out[2]: &lt;function IPython.lib.pretty._repr_pprint&gt;

In [3]: 1
Out[3]: 1

In [4]: 100
Out[4]: 64

In [5]: 255
Out[5]: FF
</snippet></ROW><ROW><id>14993580</id><snippet>$(ipython locate profile)/startup/hexints.py</snippet></ROW><ROW><id>14993580</id><snippet>get_ipython().display_formatter.formatters['text/plain'].for_type(int, lambda n, p, cycle: p.text("%X" % n))
</snippet></ROW><ROW><id>14993626</id><snippet>if x &lt; 800</snippet></ROW><ROW><id>14993626</id><snippet>if x % 2 == 0</snippet></ROW><ROW><id>14993626</id><snippet>str(x)[-1] == "3"</snippet></ROW><ROW><id>14993626</id><snippet>or</snippet></ROW><ROW><id>14993626</id><snippet>and</snippet></ROW><ROW><id>14993626</id><snippet>if x &lt; 800 and x % 2 == 0:</snippet></ROW><ROW><id>14993652</id><snippet>A=line.split(' ')
if len(A) &gt; 1:
    print A[1]
</snippet></ROW><ROW><id>14993758</id><snippet>x_n = x_{n-1} * (x_{n-1} + 1)/2</snippet></ROW><ROW><id>14993758</id><snippet>x_1 = 20</snippet></ROW><ROW><id>14993758</id><snippet>x_2 = 20</snippet></ROW><ROW><id>14993758</id><snippet>x_1</snippet></ROW><ROW><id>14993758</id><snippet>x_2</snippet></ROW><ROW><id>14993758</id><snippet>mem={}
def f(x):
    if x == 1:   # base case
        return 20
    if not x in mem:    # if we did not calculate it before - calculate
        mem[x] = f(x-1) * (f(x-1) +1) / 2
    return mem[x]   # otherwise return it

print f(1)    
print f(2)
print f(3)
</snippet></ROW><ROW><id>14993758</id><snippet>20
210
22155
</snippet></ROW><ROW><id>14993758</id><snippet>f(20)</snippet></ROW><ROW><id>14993758</id><snippet>print "number of digits: %s" % len(str(f(20)))

number of digits: 530115
</snippet></ROW><ROW><id>14993758</id><snippet>import timeit
mem={}
print "Execution time: %s" % timeit.Timer("len(str(f(20)))",
                            setup = "from __main__ import f").timeit(1)
</snippet></ROW><ROW><id>14993886</id><snippet>cd C:\Users\You\Downloads
</snippet></ROW><ROW><id>14993886</id><snippet>python ez_setup.py
</snippet></ROW><ROW><id>14993886</id><snippet>C:\Python27\Scripts\easy_install jinja2
</snippet></ROW><ROW><id>14993886</id><snippet>easy_install</snippet></ROW><ROW><id>14993886</id><snippet>Environment variables...</snippet></ROW><ROW><id>14993886</id><snippet>;C:\Python27\Scripts\</snippet></ROW><ROW><id>14994051</id><snippet>string string loginData = "username=***&amp;passowrd=***&amp;next=/hurt/";

WebClient wc = new WebClient();

wc.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.56 Safari/536.5");
wc.Headers.Add("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
wc.Headers.Add("Accept-Encoding", "identity");
wc.Headers.Add("Accept-Language", "en-US,en;q=0.8");
wc.Headers.Add("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.3");
wc.Headers.Add("ContentType", "application/x-www-form-urlencoded");
string response = wc.UploadString("http://xyz.com/accounts/login/", "POST", loginData);
</snippet></ROW><ROW><id>14994110</id><snippet>df.astype('float64')
</snippet></ROW><ROW><id>14994466</id><snippet>def gcd(a, b):
</snippet></ROW><ROW><id>14994466</id><snippet>gcd</snippet></ROW><ROW><id>14994466</id><snippet>a</snippet></ROW><ROW><id>14994466</id><snippet>b</snippet></ROW><ROW><id>14994466</id><snippet>while b:
</snippet></ROW><ROW><id>14994466</id><snippet>b</snippet></ROW><ROW><id>14994466</id><snippet> a, b = b, a%b
</snippet></ROW><ROW><id>14994466</id><snippet>a = b
b = a%b
</snippet></ROW><ROW><id>14994466</id><snippet>a%b</snippet></ROW><ROW><id>14994466</id><snippet>a (mod b)</snippet></ROW><ROW><id>14994466</id><snippet>12%5 = 2</snippet></ROW><ROW><id>14994466</id><snippet>12/5</snippet></ROW><ROW><id>14994466</id><snippet>b</snippet></ROW><ROW><id>14994466</id><snippet>return a
</snippet></ROW><ROW><id>14994466</id><snippet>a</snippet></ROW><ROW><id>14994493</id><snippet>lambda</snippet></ROW><ROW><id>14994493</id><snippet>bar(lambda x: foo(x,300))
</snippet></ROW><ROW><id>14994493</id><snippet>func = lambda x: x*x
</snippet></ROW><ROW><id>14994493</id><snippet>def func(x):
   return x*x
</snippet></ROW><ROW><id>14994493</id><snippet>def new_func(x):
    return foo(x,300)
</snippet></ROW><ROW><id>14994493</id><snippet>new_func</snippet></ROW><ROW><id>14994493</id><snippet>bar</snippet></ROW><ROW><id>14994600</id><snippet>super(Product, self).save()</snippet></ROW><ROW><id>14994600</id><snippet>if</snippet></ROW><ROW><id>14994600</id><snippet>auto_now_add</snippet></ROW><ROW><id>14994600</id><snippet>pub_date</snippet></ROW><ROW><id>14994644</id><snippet>Intermittent errors could occur on Windows systems: InterfaceError(errno=2013).
The cause was incorrect handling of sock.recv() library calls that returned less
data than was requested. (Bug #14829471, Bug #67303)
</snippet></ROW><ROW><id>14994649</id><snippet>strptime</snippet></ROW><ROW><id>14994649</id><snippet>strftime</snippet></ROW><ROW><id>14994649</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; strptime = datetime.datetime.strptime
&gt;&gt;&gt; s = "2013-02-20 17:57:25+00:00"
&gt;&gt;&gt; # Using s[:-6] to trim off the timezone
&gt;&gt;&gt; strptime(s[:-6], "%Y-%m-%d %H:%M:%S").strftime("%b %d, %Y %I:%M %p")
'Feb 20, 2013 05:57 PM'
</snippet></ROW><ROW><id>14994649</id><snippet>%z</snippet></ROW><ROW><id>14994649</id><snippet>strptime</snippet></ROW><ROW><id>14994649</id><snippet>&gt;&gt;&gt; strptime(s, "%Y-%I-%d %H:%M:%S%z")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\apps\Python27\lib\_strptime.py", line 317, in _strptime
    (bad_directive, format))
ValueError: 'z' is a bad directive in format '%Y-%I-%d %H:%M:%S%z'
</snippet></ROW><ROW><id>14995386</id><snippet>append</snippet></ROW><ROW><id>14995386</id><snippet>for</snippet></ROW><ROW><id>14995386</id><snippet>self.bullets = []
self.bullets.append(bullet())
self.bullets.append(bullet())
</snippet></ROW><ROW><id>14995386</id><snippet>for bullet in self.bullets:
    bullet_image.blit(bullet.x, bullet.y)
    bullet.x += 5
</snippet></ROW><ROW><id>14995920</id><snippet>sender</snippet></ROW><ROW><id>14995920</id><snippet>w</snippet></ROW><ROW><id>14996040</id><snippet>from datetime import datetime

def load_with_datetime(pairs, format='%Y-%m-%d'):
    """Load with dates"""
    d = {}
    for k, v in pairs:
        if isinstance(v, basestring):
            try:
                d[k] = datetime.strptime(v, format).date()
            except ValueError:
                d[k] = v
        else:
            d[k] = v             
    return d

dump = json.dumps(A, default = f)
json.loads(dump, object_pairs_hook=load_with_datetime)

# {u'date': datetime.date(2013, 1, 1), u'price': 100}
</snippet></ROW><ROW><id>14996045</id><snippet>lines = [line.strip() for line in open('some.txt')]
nlines=[]
for line in lines:
    if line[-1]==':': 
        nlines.append(':'+line)
    else:
        nlines.append(line)
total="\n".join(nlines)
temp=total.split(':')
answers=temp[2::2]
for ans in answers:print ans
</snippet></ROW><ROW><id>14996045</id><snippet>first answer:
first line 1
second line 1
third line 1
second answer:
first line 2
secon line 2
third line 2
third answer:
first 3
second 3
third 3
fourth answer:
first 4
second 4
third 4
fourth 4
</snippet></ROW><ROW><id>14996045</id><snippet>first line 1
second line 1
third line 1


first line 2
secon line 2
third line 2


first 3
second 3
third 3


first 4
second 4
third 4
fourth 4
</snippet></ROW><ROW><id>14996277</id><snippet>for radioButton in self.findChildren(QtGui.QRadioButton):
    if radioButton.isChecked():
        radioButtonText = radioButton.text()
        print "Radio Button Selected: ", radioButtonText
        if radioButtonText == "example":
            example(args) 
</snippet></ROW><ROW><id>14996296</id><snippet>div</snippet></ROW><ROW><id>14996296</id><snippet>iframe</snippet></ROW><ROW><id>14996296</id><snippet> driver.switch_to_frame("Frame Name");
 //Do some actions on the frame
</snippet></ROW><ROW><id>14996296</id><snippet>driver.switch_to_default_content();
</snippet></ROW><ROW><id>14996709</id><snippet>\r\n</snippet></ROW><ROW><id>14996709</id><snippet>\n</snippet></ROW><ROW><id>14996709</id><snippet>open(filename, "U")</snippet></ROW><ROW><id>14996758</id><snippet>leftIndent</snippet></ROW><ROW><id>14996758</id><snippet>ListItem</snippet></ROW><ROW><id>14996758</id><snippet>my_list = ListFlowable([
    ListItem(Paragraph("Line 1", styles['Normal']),
         leftIndent=35, value='circle',
         bulletColor=CMYKColor(0.81, 0.45, 0.53, 0.23)
    ),
    ListItem(Paragraph("Line 2", styles['Normal']),
         leftIndent=35, value='circle',
         bulletColor=CMYKColor(0.81, 0.45, 0.53, 0.23))
],
bulletType='bullet',
start='circle',
leftIndent=10
)
</snippet></ROW><ROW><id>14996758</id><snippet>leftIndent</snippet></ROW><ROW><id>14996758</id><snippet>ListFlowable</snippet></ROW><ROW><id>14996816</id><snippet>suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
def humansize(nbytes):
    if nbytes == 0: return '0 B'
    i = 0
    while nbytes &gt;= 1024 and i &lt; len(suffixes)-1:
        nbytes /= 1024.
        i += 1
    f = ('%.2f' % nbytes).rstrip('0').rstrip('.')
    return '%s %s' % (f, suffixes[i])
</snippet></ROW><ROW><id>14996816</id><snippet>&gt;&gt;&gt; humansize(131)
'131 B'
&gt;&gt;&gt; humansize(1049)
'1.02 KB'
&gt;&gt;&gt; humansize(58812)
'57.43 KB'
&gt;&gt;&gt; humansize(68819826)
'65.63 MB'
&gt;&gt;&gt; humansize(39756861649)
'37.03 GB'
&gt;&gt;&gt; humansize(18754875155724)
'17.06 TB'
</snippet></ROW><ROW><id>14996907</id><snippet>textwrap</snippet></ROW><ROW><id>14996907</id><snippet>import textwrap

My_string = "aaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbccccccccccccccccccccddddddddddddddddddddeeeeeeeeeeeeeeeeeeeeffffffffffffffffffff"


print '\n'.join('              {0}'.format(line) for line in [
                '---------------------------------------------------------------',
                'Value of a is'] + textwrap.fill(My_string, 20).split('\n') +
                ['---------------------------------------------------------------'])
</snippet></ROW><ROW><id>14996907</id><snippet>              ---------------------------------------------------------------
              Value of a is
              aaaaaaaaaaaaaaaaaaab
              bbbbbbbbbbbbbbbbbbbc
              cccccccccccccccccccd
              ddddddddddddddddddde
              eeeeeeeeeeeeeeeeeeef
              fffffffffffffffffff
              ---------------------------------------------------------------
</snippet></ROW><ROW><id>14996934</id><snippet>Dialplan().__call__()</snippet></ROW><ROW><id>14996934</id><snippet>Dialplan().agi</snippet></ROW><ROW><id>14996934</id><snippet>#! /usr/bin/env python
"""Read digits from the user in various ways..."""
from twisted.internet import reactor, defer
from starpy import fastagi, error
import logging, time

log = logging.getLogger( 'hellofastagi' )




class DialPlan( object ):
    """Stupid little application to report how many times it's been accessed"""
    def __init__( self,application, agi ):
        self.application = application
        self.agi = agi
    def start( self ):
        """Begin the dial-plan-like operations"""
        return self.agi.answer().addCallbacks( self.onAnswered, self.answerFailure )
    def answerFailure( self, reason ):
        """Deal with a failure to answer"""
        log.warn( 
            """Unable to answer channel %r: %s""", 
            self.agi.variables['agi_channel'], reason.getTraceback(),
        )
        self.agi.finish()
    def onAnswered( self, resultLine ):
        """We've managed to answer the channel, yay!"""
        return self.agi.wait( 2.0 ).addCallback( self.onWaited )
    def onWaited( self, result ):
        """We've finished waiting, tell the user the number"""
        return self.agi.sayNumber( self.application.count, '*' ).addErrback(
            self.onNumberFailed,
        ).addCallbacks(
            self.onFinished, self.onFinished,
        )
    def onFinished( self, resultLine ):
        """We said the number correctly, hang up on the user"""
        return self.agi.finish()
    def onNumberFailed( self, reason ):
        """We were unable to read the number to the user"""
        log.warn( 
            """Unable to read number to user on channel %r: %s""",
            self.agi.variables['agi_channel'], reason.getTraceback(),
        )

    def onHangupFailure( self, reason ):
        """Failed trying to hang up"""
        log.warn( 
            """Unable to hang up channel %r: %s""", 
            self.agi.variables['agi_channel'], reason.getTraceback(),
        )


class CallCounterApplication(object):
    def __init__( self ):
        self.count = 0

    def __call__(self,agi):
        self.count = self.count+1
        dp = Dialplan(self,agi)
        return dp.start()


if __name__ == "__main__":
    logging.basicConfig()
    fastagi.log.setLevel( logging.DEBUG )
    f = fastagi.FastAGIFactory(CallCounterApplication())
    reactor.listenTCP(4573, f, 50, '10.0.0.167') # only binding on local interface
    reactor.run()
</snippet></ROW><ROW><id>14997191</id><snippet>while</snippet></ROW><ROW><id>14997191</id><snippet>libtcod.console_wait_for_keypress(True)</snippet></ROW><ROW><id>14997191</id><snippet>libtcod.console_check_for_keypress()</snippet></ROW><ROW><id>14997388</id><snippet>import sys, re, math

def find_numbers(f):
    for line in f:
        for word in line.split():
            if word.isdigit():
                yield float(word)

lst = list(find_numbers(sys.stdin))
lst.reverse()
for x in lst:
    print('%.4f' % math.sqrt(x))
</snippet></ROW><ROW><id>14997695</id><snippet>include/opcode.h</snippet></ROW><ROW><id>14997695</id><snippet>#define loadup</snippet></ROW><ROW><id>14997695</id><snippet>.pyc</snippet></ROW><ROW><id>14997695</id><snippet>.pyc</snippet></ROW><ROW><id>14997722</id><snippet>SELECT t3.*, count(t2.tag_id) as similar_tags_count
FROM m2m_tbl t1 INNER JOIN m2m_tbl t2 
     ON (t1.tag_id = t2.tag_id and t1.product_id != t2.product_id and t1.product_id = pk_of_the_given_product)
     INNER JOIN product_tbl t3 ON (t2.product_id = t3.id)
GROUP BY t3.id, t3.name
ORDER BY similar_tags_count DESC;
</snippet></ROW><ROW><id>14997722</id><snippet>.raw()</snippet></ROW><ROW><id>14997722</id><snippet>Product.objects.raw("""
SELECT t3.*, count(t2.tag_id) as similar_tags_count
FROM {m2m_tbl} t1 INNER JOIN {m2m_tbl} t2 
     ON (t1.tag_id = t2.tag_id and t1.product_id != t2.product_id and t1.product_id = %s)
     INNER JOIN {product_tbl} t3 ON (t2.product_id = t3.id)
GROUP BY t3.id, t3.name
ORDER BY similar_tags_count DESC;
""".format(m2m_tbl=Product.tags.through._meta.db_table, product_tbl=Product._meta.db_table),
    [the_given_product.pk])
</snippet></ROW><ROW><id>14997722</id><snippet>query.join()</snippet></ROW><ROW><id>14997722</id><snippet>query.join()</snippet></ROW><ROW><id>14997722</id><snippet>QuerySet</snippet></ROW><ROW><id>14997722</id><snippet>m2m_tbl = Product.tags.through._meta.db_table
qs = Product.objects.exclude(pk=the_given_product.pk)
alias_1 = qs.query.get_initial_alias()
alias_2 = qs.query.join((alias_1, m2m_tbl, 'id', 'product_id'))
alias_3 = qs.query.join((alias_2, m2m_tbl, 'tag_id', 'tag_id'))
qs = qs.annotate(similar_tags_count=models.Count('tags__id')).extra(where=[
    '{alias_2}.product_id != {alias_3}.product_id'.format(alias_2=alias_2, alias_3=alias_3),
    '{alias_3}.product_id = %s'.format(alias_3=alias_3)
], params=[the_given_product.pk])
</snippet></ROW><ROW><id>14998081</id><snippet>sockshandler</snippet></ROW><ROW><id>14998081</id><snippet>opener = urllib2.build_opener(SocksiPyHandler(socks.PROXY_TYPE_SOCKS5, "localhost", 9050))
</snippet></ROW><ROW><id>14998081</id><snippet>opener.open(url)</snippet></ROW><ROW><id>14998448</id><snippet>from distutils.core import setup, Command
import distutils.command.install as InstallCommand
from subprocess import call

class FinallyDoSomething(Command):
    description = "Do my custom stuff"
    user_options = []
    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        call(["update-rc.d", "kmsd", "defaults", "21"])

class NewInstall(InstallCommand):
    sub_commands = InstallCommand.sub_commands + [
            ('custom_install', None),]

setup(name='PackageName',
      version='0.1',
      #The rest of the setup config
      cmdclass={
          'install': NewInstall,
          'custom_install': FinallyDoSomething,
          },
      )
</snippet></ROW><ROW><id>14998736</id><snippet>named groups</snippet></ROW><ROW><id>14998736</id><snippet>Named groups</snippet></ROW><ROW><id>14998736</id><snippet>(?P&lt;nameofgroup&gt;bla)</snippet></ROW><ROW><id>14998736</id><snippet>import re
str = "3249dsf 2013-02-10T06:44:30.666821+00:00 domain constant 66666 sync:[127.0.0.1] Request: pubvalue=kjiduensofksidoposiw&amp;change=09872534&amp;value2=jdmcnhj&amp;counter=232&amp;value3=2&amp;nonce=7896089hujoiuhiuh098h"
print re.search("\[(?P&lt;ip&gt;\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\]", str).groupdict()
</snippet></ROW><ROW><id>14998736</id><snippet>?</snippet></ROW><ROW><id>14998736</id><snippet>(?P&lt;ip&gt;pattern)?</snippet></ROW><ROW><id>14998736</id><snippet>None</snippet></ROW><ROW><id>14999011</id><snippet>def move(self, dx, dy):
    self.x = dx
    self.y = dy
</snippet></ROW><ROW><id>14999011</id><snippet>def move(self, dx, dy):
    self.x += dx
    self.y += dy
</snippet></ROW><ROW><id>14999011</id><snippet>(-1, 0)</snippet></ROW><ROW><id>14999011</id><snippet>KEY_LEFT</snippet></ROW><ROW><id>14999077</id><snippet>%</snippet></ROW><ROW><id>14999077</id><snippet>s = s.replace('%', '%%')
</snippet></ROW><ROW><id>14999077</id><snippet>format</snippet></ROW><ROW><id>14999077</id><snippet>s = s.replace('{', '{{').replace('}', '}}')
</snippet></ROW><ROW><id>14999378</id><snippet>None</snippet></ROW><ROW><id>14999378</id><snippet>def my_func():
    return {'key1': val1,
            'key2': val2,
            'key3': val3,
            'key4': val4,
           }
</snippet></ROW><ROW><id>14999512</id><snippet>webPage.setViewportSize</snippet></ROW><ROW><id>14999512</id><snippet>webFrame.setHtml</snippet></ROW><ROW><id>14999512</id><snippet>sizeHint</snippet></ROW><ROW><id>14999512</id><snippet>QWebView</snippet></ROW><ROW><id>14999512</id><snippet>contentsSize</snippet></ROW><ROW><id>14999558</id><snippet>SQLAlchemy</snippet></ROW><ROW><id>14999558</id><snippet>db</snippet></ROW><ROW><id>14999558</id><snippet># Assuming that A and B are mapped objects that point to tables a and b from
# your example.
q = db.session.query(
    db.cast(A.product_id, db.BigInteger),
    db.cast(db.count(A.product_id), db.BigInteger).label('itemsSold'),
    db.cast(B.product_name, db.String)
# If relationship between A and B is configured properly, explicit join
# condition usually is not needed.
).outerjoin(B, A.product_id == B.product_id).\
group_by(A.product_id, B.product_name).\
order_by(db.desc('itemsSold'))
</snippet></ROW><ROW><id>14999585</id><snippet>yourstring= '"ABC", "XYZ,MNO", "KLM"\n"ABC", "MN"\n"ABC", "123", "10", "OPPA GANGNAM STYLE", "LADY"'

import csv
import StringIO

class MyDialect(csv.Dialect):
    strict = True
    skipinitialspace = True
    quoting = csv.QUOTE_ALL
    delimiter = ','
    quotechar = '"'
    lineterminator = '\n'


b=StringIO.StringIO(yourstring)
r=csv.reader(b,MyDialect())

for i in r:
    print len(i), ':',' @ '.join(i)
</snippet></ROW><ROW><id>14999619</id><snippet>f(a, b, c)</snippet></ROW><ROW><id>14999619</id><snippet>a^b-c</snippet></ROW><ROW><id>14999619</id><snippet>def f(a, b, c):
    return a ** b - c
</snippet></ROW><ROW><id>14999619</id><snippet>[0,1] x [0,1] x [0,1]</snippet></ROW><ROW><id>14999619</id><snippet>ogrid</snippet></ROW><ROW><id>14999619</id><snippet>x = np.ogrid[0:1:24j, 0:1:12j, 0:1:6j]
</snippet></ROW><ROW><id>14999619</id><snippet>f(x[0], x[1], x[2])
</snippet></ROW><ROW><id>14999619</id><snippet>np.mean(f(x[0], x[1], x[2]))
</snippet></ROW><ROW><id>14999619</id><snippet>0.18884234602967925</snippet></ROW><ROW><id>14999954</id><snippet>print '\n'.join('{} \t {}'.format(aa,bb) for aa,bb in zip(a,b))
</snippet></ROW><ROW><id>14999954</id><snippet>print '\n'.join(map('{0[0]} \t {0[1]}'.format, zip(a,b)))
</snippet></ROW><ROW><id>15000032</id><snippet>dict1 = dict(row for row in reader1 if len(row) == 2)
dict2 = dict(row for row in reader2 if len(row) == 2)

if sorted(dict1.keys()) == sorted(dict2.keys()):
    if dict1 != dict2:
        print "Not Equ"
</snippet></ROW><ROW><id>15000032</id><snippet>dict(reader1)</snippet></ROW><ROW><id>15000032</id><snippet>(row for row in reader1 if len(row) == 2)</snippet></ROW><ROW><id>15000032</id><snippet>dict1 != dict2</snippet></ROW><ROW><id>15000032</id><snippet>dict1 = dict(row for row in reader1 if len(row) == 2)
dict2 = dict(row for row in reader2 if len(row) == 2)

for key, val in dict1.iteritems():
    try:
        if dict2[key] != val:
            print "Not Equ"
    except KeyError:
        pass
</snippet></ROW><ROW><id>15000254</id><snippet>python src/integration_tests/endtoend.py -o 2 | python src/manage.py shell
</snippet></ROW><ROW><id>15000927</id><snippet>__main__</snippet></ROW><ROW><id>15000927</id><snippet>if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15000927</id><snippet>main()</snippet></ROW><ROW><id>15000983</id><snippet>if int(style_score.style_quiz_score) in scoremx:
    pass 
</snippet></ROW><ROW><id>15000983</id><snippet>if 17 &lt;= style_score.style_quiz_score &lt; 20:
   pass
</snippet></ROW><ROW><id>15001175</id><snippet>0</snippet></ROW><ROW><id>15001175</id><snippet>.</snippet></ROW><ROW><id>15001175</id><snippet>0</snippet></ROW><ROW><id>15001175</id><snippet>format()</snippet></ROW><ROW><id>15001175</id><snippet>format(f, '.2f').rstrip('0').rstrip('.')
</snippet></ROW><ROW><id>15001175</id><snippet>&gt;&gt;&gt; def formatted(f): return format(f, '.2f').rstrip('0').rstrip('.')
... 
&gt;&gt;&gt; formatted(0.0)
'0'
&gt;&gt;&gt; formatted(4.797)
'4.8'
&gt;&gt;&gt; formatted(4.001)
'4'
&gt;&gt;&gt; formatted(13.577)
'13.58'
&gt;&gt;&gt; formatted(0.000000000000000000001)
'0'
&gt;&gt;&gt; formatted(10000000000)
'10000000000'
</snippet></ROW><ROW><id>15001723</id><snippet>class Weights(list):

    def __setitem__(self, key, value):
         ....
</snippet></ROW><ROW><id>15002105</id><snippet>import operator
conds = (request.GET.get(f) for f in ('category', 'something', 'from_price', 'to_price'))
if any(conds):
    d = Data.objects.filter(
            reduce(operator.or_, 
                (Q(**{a:b}) for a,b in zip(('category', 'something', 'price__gt', 'price__lt'), filter(lambda x: x, conds)))))
</snippet></ROW><ROW><id>15002105</id><snippet>if</snippet></ROW><ROW><id>15002105</id><snippet># or

category = request.GET.get('category')
something = request.GET.get('something')
from_price = request.GET.get('from_price')
to_price = request.GET.get('to_price')

q = Q()
if category:
    q |= Q(category=category)
if something:
    q |= Q(something=something)
if from_price:
    q |= Q(price__gt=from_price)
if to_price:
    q |= Q(price__lt=to_price)

d = Data.objects.filter(q)
</snippet></ROW><ROW><id>15002260</id><snippet>&gt;&gt;&gt; df
     A    B  C   D
0  foo  one  1  10
1  bar  one  2  20
2  foo  two  3  30
3  bar  one  4  40
4  foo  two  5  50
5  bar  two  6  60
6  foo  one  7  70
7  foo  two  8  80
&gt;&gt;&gt; df.groupby("A").get_group("foo")["D"]
0    10
2    30
4    50
6    70
7    80
Name: D
&gt;&gt;&gt; df.groupby("A").get_group("foo")["D"].tolist()
[10, 30, 50, 70, 80]
</snippet></ROW><ROW><id>15003127</id><snippet>get_or_insert</snippet></ROW><ROW><id>15003127</id><snippet>Model.get_or_insert (key_name, **kwds)
</snippet></ROW><ROW><id>15003438</id><snippet>meta</snippet></ROW><ROW><id>15003438</id><snippet>class SocialGroup(Document):
    timestamp = DateTimeField(default=datetime.now)
    course_name = StringField()
    group_name = StringField(choices=[('A', 1), ('B', 1), ('C', 1),('D', 1), ('E', 1), ('F', 1), ('None',1)], default="None")
    meta = {
        'indexes': [
            {'fields': ('course_name', 'group_name'), 'unique': True}
        ]
    }
</snippet></ROW><ROW><id>15003458</id><snippet>setuptools</snippet></ROW><ROW><id>15003458</id><snippet>python3-setuptools</snippet></ROW><ROW><id>15003458</id><snippet>sudo apt-get install python3-setuptools</snippet></ROW><ROW><id>15003458</id><snippet>PIL</snippet></ROW><ROW><id>15003458</id><snippet>Pillow</snippet></ROW><ROW><id>15003458</id><snippet>python3 setup.py build</snippet></ROW><ROW><id>15003458</id><snippet>sudo python3 setup.py install</snippet></ROW><ROW><id>15003590</id><snippet>layer()</snippet></ROW><ROW><id>15003590</id><snippet>version_2.3.x</snippet></ROW><ROW><id>15003590</id><snippet>default</snippet></ROW><ROW><id>15003593</id><snippet>o.points</snippet></ROW><ROW><id>15003593</id><snippet>o.points.get('points')</snippet></ROW><ROW><id>15003593</id><snippet>o.points</snippet></ROW><ROW><id>15003593</id><snippet>.get</snippet></ROW><ROW><id>15004155</id><snippet>.</snippet></ROW><ROW><id>15004155</id><snippet>importlib</snippet></ROW><ROW><id>15004155</id><snippet>getattr()</snippet></ROW><ROW><id>15004155</id><snippet>import importlib
modulename, funcname = string.rsplit('.', 1)

module = importlib.import_module(modulename)
function = getattr(module, funcname)

result = function()
</snippet></ROW><ROW><id>15004155</id><snippet>string = 'myApp.myFunc.test'</snippet></ROW><ROW><id>15004155</id><snippet>'modulename = 'myApp.myFunc'</snippet></ROW><ROW><id>15004155</id><snippet>funcname = 'test'</snippet></ROW><ROW><id>15004155</id><snippet>importlib.import_module('myApp.myFunc')</snippet></ROW><ROW><id>15004155</id><snippet>getattr(module, 'test')</snippet></ROW><ROW><id>15004292</id><snippet>import subprocess
args = ['/path/to/python', 'bar.py']
process = subprocess.Popen(args, shell=True, creationflags=subprocess.CREATE_NEW_CONSOLE) # you can also set only shell=True
print process.pid
</snippet></ROW><ROW><id>15004350</id><snippet>sudo su root
</snippet></ROW><ROW><id>15004350</id><snippet>sudo</snippet></ROW><ROW><id>15004457</id><snippet>import sys
import cv2
import numpy
import random
from scipy.ndimage import label

def segment_on_dt(img):
    dt = cv2.distanceTransform(img, 2, 3) # L2 norm, 3x3 mask
    dt = ((dt - dt.min()) / (dt.max() - dt.min()) * 255).astype(numpy.uint8)
    dt = cv2.threshold(dt, 100, 255, cv2.THRESH_BINARY)[1]
    lbl, ncc = label(dt)

    lbl[img == 0] = lbl.max() + 1
    lbl = lbl.astype(numpy.int32)
    cv2.watershed(cv2.cvtColor(img, cv2.COLOR_GRAY2BGR), lbl)
    lbl[lbl == -1] = 0
    return lbl


img = cv2.cvtColor(cv2.imread(sys.argv[1]), cv2.COLOR_BGR2GRAY)
img = cv2.threshold(img, 0, 255, cv2.THRESH_OTSU)[1]
img = 255 - img # White: objects; Black: background

ws_result = segment_on_dt(img)
# Colorize
height, width = ws_result.shape
ws_color = numpy.zeros((height, width, 3), dtype=numpy.uint8)
lbl, ncc = label(ws_result)
for l in xrange(1, ncc + 1):
    a, b = numpy.nonzero(lbl == l)
    if img[a[0], b[0]] == 0: # Do not color background.
        continue
    rgb = [random.randint(0, 255) for _ in xrange(3)]
    ws_color[lbl == l] = tuple(rgb)

cv2.imwrite(sys.argv[2], ws_color)
</snippet></ROW><ROW><id>15004457</id><snippet># Fit ellipse to determine the rectangles.
wsbin = numpy.zeros((height, width), dtype=numpy.uint8)
wsbin[cv2.cvtColor(ws_color, cv2.COLOR_BGR2GRAY) != 0] = 255

ws_bincolor = cv2.cvtColor(255 - wsbin, cv2.COLOR_GRAY2BGR)
lbl, ncc = label(wsbin)
for l in xrange(1, ncc + 1):
    yx = numpy.dstack(numpy.nonzero(lbl == l)).astype(numpy.int64)
    xy = numpy.roll(numpy.swapaxes(yx, 0, 1), 1, 2)
    if len(xy) &lt; 100: # Too small.
        continue

    ellipse = cv2.fitEllipse(xy)
    center, axes, angle = ellipse
    rect_area = axes[0] * axes[1]
    if 0.9 &lt; rect_area / float(len(xy)) &lt; 1.1:
        rect = numpy.round(numpy.float64(
                cv2.cv.BoxPoints(ellipse))).astype(numpy.int64)
        color = [random.randint(60, 255) for _ in xrange(3)]
        cv2.drawContours(ws_bincolor, [rect], 0, color, 2)

cv2.imwrite(sys.argv[3], ws_bincolor)
</snippet></ROW><ROW><id>15004478</id><snippet>def list_animals(request_id, response, exception):
    if exception is not None:
        # Do something with the exception.
        pass
    else:
        # Do something with the response.
        pass

def list_farmers(request_id, response, exception):
    if exception is not None:
        # Do something with the exception.
        pass
    else:
        # Do something with the response.
        pass

service_ = authHandler.CreateService('drive', 'v2', creds)

batch = BatchHttpRequest()

batch.add(service_.changes().list(), list_animals)
batch.add(service_.changes().list(), list_farmers)
batch.execute(http=authHandler.getHttp(creds))
</snippet></ROW><ROW><id>15004562</id><snippet>switch</snippet></ROW><ROW><id>15004562</id><snippet>class mode():
    @staticmethod
    def switch(b1):
        if b1["text"] == "Mode = Setup":
            b1["text"] = "Mode = Run"
        else:
            b1["text"] = "Mode = Setup"
</snippet></ROW><ROW><id>15004562</id><snippet>callback</snippet></ROW><ROW><id>15004562</id><snippet>b1 = Button(toolbar, text="Mode = Setup")
b1.config(command=lambda : m.mode.switch(b1))
</snippet></ROW><ROW><id>15004562</id><snippet>mode</snippet></ROW><ROW><id>15004562</id><snippet>switch</snippet></ROW><ROW><id>15004562</id><snippet>mode</snippet></ROW><ROW><id>15004794</id><snippet>itertools.chain(list1, list2, list3)

iterables = [list1, list2, list3]
itertools.chain.from_iterable(iterables)
</snippet></ROW><ROW><id>15004794</id><snippet>iterables</snippet></ROW><ROW><id>15004794</id><snippet>def generate_iterables():
    for i in range(10):
        yield range(i)

itertools.chain.from_iterable(generate_iterables())
</snippet></ROW><ROW><id>15004794</id><snippet>def generate_iterables():
    while True:
        for i in range(5, 10)
            yield range(i)

itertools.chain.from_iterable(generate_iterables())
</snippet></ROW><ROW><id>15004794</id><snippet>range()</snippet></ROW><ROW><id>15004896</id><snippet>inspect</snippet></ROW><ROW><id>15004896</id><snippet>inspect.getmodule</snippet></ROW><ROW><id>15004896</id><snippet>__bases__</snippet></ROW><ROW><id>15004896</id><snippet>&gt;&gt;&gt; IOError.__bases__
(&lt;type 'exceptions.EnvironmentError'&gt;,)
</snippet></ROW><ROW><id>15004896</id><snippet>__mro__</snippet></ROW><ROW><id>15004896</id><snippet>&gt;&gt;&gt; IOError.__mro__
(&lt;type 'exceptions.IOError'&gt;, &lt;type 'exceptions.EnvironmentError'&gt;, &lt;type 'exceptions.StandardError'&gt;, &lt;type 'exceptions.Exception'&gt;, &lt;type 'exceptions.BaseException'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>15004896</id><snippet>__mro__</snippet></ROW><ROW><id>15004956</id><snippet>=</snippet></ROW><ROW><id>15004956</id><snippet>cell.value = statN
</snippet></ROW><ROW><id>15004956</id><snippet>lstStat</snippet></ROW><ROW><id>15004956</id><snippet>lstStat</snippet></ROW><ROW><id>15004956</id><snippet>lstStat</snippet></ROW><ROW><id>15004956</id><snippet>r = 2
for statN in lstStat:
    ws.cell(row=r, column=0).value = statN
    r += 1
</snippet></ROW><ROW><id>15004956</id><snippet>enumerate</snippet></ROW><ROW><id>15004956</id><snippet>for i, statN in enumerate(lstStat):
    ws.cell(row=i+2, column=0).value = statN
</snippet></ROW><ROW><id>15005024</id><snippet>lxml</snippet></ROW><ROW><id>15005024</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup(html_doc, "lxml")
&gt;&gt;&gt; soup.head
&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;
</snippet></ROW><ROW><id>15005024</id><snippet>&gt;&gt;&gt; soup = BeautifulSoup(html_doc, "xml")
&gt;&gt;&gt; soup.head
&gt;&gt;&gt; soup.HEAD
&lt;HEAD&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/HEAD&gt;
</snippet></ROW><ROW><id>15005024</id><snippet>lxml</snippet></ROW><ROW><id>15005024</id><snippet>regexpNS = "http://exslt.org/regular-expressions"
tree.xpath('//*[re:test(., '^head$', 'i')]', namespaces={'re':regexpNS})
</snippet></ROW><ROW><id>15005024</id><snippet>head</snippet></ROW><ROW><id>15005535</id><snippet>df2</snippet></ROW><ROW><id>15005535</id><snippet>df2</snippet></ROW><ROW><id>15005535</id><snippet>&gt;&gt;&gt; df2['index'] = df2.index
&gt;&gt;&gt; df3 = df2.drop_duplicates(cols='index', take_last=True).reindex(df.index, method='ffill')
&gt;&gt;&gt; del df3['index']
&gt;&gt;&gt; df3
                             a
2013-02-21 09:51:56.615338 NaN
2013-02-22 09:51:56.615357   3
</snippet></ROW><ROW><id>15005535</id><snippet>&gt;&gt;&gt; df
                            a
2013-02-21 09:51:56.615338  1
2013-02-22 09:51:56.615357  2
&gt;&gt;&gt; df2
                            a
2013-02-21 09:51:57.802331  2
2013-02-21 09:51:57.802331  3
</snippet></ROW><ROW><id>15005625</id><snippet>export DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>15005644</id><snippet>(r'^(\d{4})/(\d{1,2})/([-\w]+)/$', 'blog.views.detail')
</snippet></ROW><ROW><id>15005904</id><snippet>In [33]: import re

In [34]: pat = re.compile('\\fc \+ \\fr(.*?)\\fc\*')

In [43]: main, new = zip(*[(''.join(parts[::2]), ''.join(parts[1::2])) for parts in [pat.split(m) for m in main]])

In [44]: new = [n.strip() for n in new if n]

In [45]: main
Out[45]: ('text  text', 'text  text', 'text', 'text', 'text  text')

In [46]: new
Out[46]: ['this is my match1', 'this is my match2', 'this is my match']
</snippet></ROW><ROW><id>15005904</id><snippet>pat.split</snippet></ROW><ROW><id>15005904</id><snippet>In [37]: pat.split(main[0])
Out[37]: ['text ', ' this is my match1 ', ' text']
</snippet></ROW><ROW><id>15005904</id><snippet>main</snippet></ROW><ROW><id>15005904</id><snippet>new</snippet></ROW><ROW><id>15005904</id><snippet>pat.split</snippet></ROW><ROW><id>15005904</id><snippet>main</snippet></ROW><ROW><id>15005904</id><snippet>In [51]: [pat.split(m) for m in main]
Out[51]: 
[['text ', ' this is my match1 ', ' text'],
 ['text ', ' this is my match2 ', ' text'],
 ['text'],
 ['text'],
 ['text ', ' this is my match ', ' text']]
</snippet></ROW><ROW><id>15005904</id><snippet>''.join</snippet></ROW><ROW><id>15005904</id><snippet>In [52]: [(''.join(parts[::2]), ''.join(parts[1::2])) for parts in [pat.split(m) for m in main]]
Out[52]: 
[('text  text', ' this is my match1 '),
 ('text  text', ' this is my match2 '),
 ('text', ''),
 ('text', ''),
 ('text  text', ' this is my match ')]
</snippet></ROW><ROW><id>15005904</id><snippet>zip(*...)</snippet></ROW><ROW><id>15005904</id><snippet>main</snippet></ROW><ROW><id>15005904</id><snippet>new</snippet></ROW><ROW><id>15005904</id><snippet>In [53]: main, new = zip(*[(''.join(parts[::2]), ''.join(parts[1::2])) for parts in [pat.split(m) for m in main]])

In [54]: main
Out[54]: ('text  text', 'text  text', 'text', 'text', 'text  text')

In [55]: new
Out[55]: (' this is my match1 ', ' this is my match2 ', '', '', ' this is my match ')
</snippet></ROW><ROW><id>15005979</id><snippet>for u in line.split():
</snippet></ROW><ROW><id>15005979</id><snippet>str</snippet></ROW><ROW><id>15005979</id><snippet>u = u.strip('\'')
</snippet></ROW><ROW><id>15005979</id><snippet>'</snippet></ROW><ROW><id>15005988</id><snippet>self.children = []</snippet></ROW><ROW><id>15006198</id><snippet>__del__</snippet></ROW><ROW><id>15006198</id><snippet>request.addfinalizer(resource.finalize)</snippet></ROW><ROW><id>15006880</id><snippet>Data</snippet></ROW><ROW><id>15006880</id><snippet>Photo</snippet></ROW><ROW><id>15006880</id><snippet>data</snippet></ROW><ROW><id>15006880</id><snippet>.save()</snippet></ROW><ROW><id>15006880</id><snippet>photo</snippet></ROW><ROW><id>15006880</id><snippet>class Data(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField()

class Photo(models.Model):
    photo = models.ImageField(upload_to='img')
    data = models.ForeignKey(Data)

class DataForm(forms.ModelForm):
    class Meta:
        model = Data

class PhotoForm(forms.ModelForm):
    class Meta:
        model = Photo
        exclude = ('data',)

def your_view(request):
    data_form = DataForm(request.POST or None)
    photo_form = PhotoForm(request.POST or None, request.FILES or None)

    if request.method == 'POST':
        if data_form.is_valid() and photo_form.is_valid():
            data = data_form.save()
            photo = photo_form.save(commit=False)
            photo.data = data
            photo.save()
            # do something else here, like a redirect to another view.
    return render(request, 'your-template.html',
        {'data_form': data_form, 'photo_form': photo_form})
</snippet></ROW><ROW><id>15006880</id><snippet>multipart/form-data</snippet></ROW><ROW><id>15006880</id><snippet>request.FILES</snippet></ROW><ROW><id>15006930</id><snippet> self.returnerr['ERROR_CD']   = error.code
</snippet></ROW><ROW><id>15006930</id><snippet>.code</snippet></ROW><ROW><id>15006930</id><snippet>delete from a table  
</snippet></ROW><ROW><id>15006930</id><snippet>import cx_Oracle as db
conn = db.connection()
cur = conn.cursor()
cur.execute("DELETE FROM TABLE WHERE somecolumn = someval")
conn.commit()
conn.close
</snippet></ROW><ROW><id>15007167</id><snippet>my_string ='   0   0 -16-50.6123 115.393   2'
widths=[4,4,4,8,8,4]
my_start=0
my_end=0
for w in widths:
     my_end+=w
     print my_string[my_start:my_end] #or do whatever you want
     my_start+=w
</snippet></ROW><ROW><id>15007167</id><snippet>   0
   0
 -16
-50.6123
 115.393
   2
</snippet></ROW><ROW><id>15007393</id><snippet>canvas</snippet></ROW><ROW><id>15007393</id><snippet>plt.gcf().canvas.get_supported_filetypes()
</snippet></ROW><ROW><id>15007393</id><snippet>plt.gcf().canvas.get_supported_filetypes_grouped()
</snippet></ROW><ROW><id>15007662</id><snippet>strip('\n')</snippet></ROW><ROW><id>15007662</id><snippet> sys.stdout.write('"' + line + '",')
</snippet></ROW><ROW><id>15007662</id><snippet>sys.stdout.write('"' + line.strip() + '",')
</snippet></ROW><ROW><id>15007662</id><snippet>&gt;&gt;&gt; from itertools import imap
&gt;&gt;&gt; with open("list.txt") as fin:
    print ','.join(imap(str.strip, fin))


Cat,Dog,Monkey,Pig
</snippet></ROW><ROW><id>15007662</id><snippet>&gt;&gt;&gt; with open("test.txt") as fin:
    print ','.join(e.strip('\n') for e in  fin)


Cat,Dog,Monkey,Pig
</snippet></ROW><ROW><id>15008019</id><snippet>mylist =  [['someid-1', None] ,['someid-2', 4545.474] ,['someid-3', 200.1515] ,['someid-4', None] ,['someid-4', 0]]
</snippet></ROW><ROW><id>15008019</id><snippet>min</snippet></ROW><ROW><id>15008019</id><snippet>itemgetter(1)</snippet></ROW><ROW><id>15008019</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; min((e for e in mylist if e[1]), key = itemgetter(1))[0]
'someid-3'
</snippet></ROW><ROW><id>15008158</id><snippet>Expecting property name enclosed in double quotes: line 1 column 1 (char 1)
</snippet></ROW><ROW><id>15008158</id><snippet>{</snippet></ROW><ROW><id>15008158</id><snippet>od</snippet></ROW><ROW><id>15008158</id><snippet>with open('json.txt') as fin:
    for line in fin:
        print [hex(ord(e)) for e in line]
</snippet></ROW><ROW><id>15008158</id><snippet>hex(ord(open('test.txt').read(2)[1]))
</snippet></ROW><ROW><id>15008288</id><snippet>from pyparsing import Word,hexnums,Suppress,OneOrMore

twoDigitHex = Word(hexnums,exact=2)
VERT = Suppress('|')

pattern = VERT + OneOrMore(twoDigitHex) + VERT

# attach parse action to prefix each 2-digit hex with 'x' and join all together
pattern.setParseAction(lambda t: ''.join('x'+tt for tt in t))

# take sample code, and use transformString to apply conversion
sample = "blahblah|0A 4D 5E 43|adfsdasd|92| sgagrewas|12 5E|"
print pattern.transformString(sample)
</snippet></ROW><ROW><id>15008288</id><snippet>blahblahx0Ax4Dx5Ex43adfsdasdx92 sgagrewasx12x5E
</snippet></ROW><ROW><id>15008404</id><snippet>is</snippet></ROW><ROW><id>15008404</id><snippet>==</snippet></ROW><ROW><id>15008404</id><snippet>dir()</snippet></ROW><ROW><id>15008404</id><snippet>list</snippet></ROW><ROW><id>15008404</id><snippet>foo</snippet></ROW><ROW><id>15008404</id><snippet>10</snippet></ROW><ROW><id>15008404</id><snippet>list</snippet></ROW><ROW><id>15008806</id><snippet>command --feature
</snippet></ROW><ROW><id>15008806</id><snippet>command --no-feature
</snippet></ROW><ROW><id>15008806</id><snippet>argparse</snippet></ROW><ROW><id>15008806</id><snippet>parser.add_argument('--feature',dest='feature',action='store_true')
parser.add_argument('--no-feature',dest='feature',action='store_false')
parser.set_defaults(feature=True)
</snippet></ROW><ROW><id>15008806</id><snippet>--arg &lt;True|False&gt;</snippet></ROW><ROW><id>15008806</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15008806</id><snippet>def t_or_f(arg):
    ua = str(arg).upper()
    if ua == 'TRUE'[:len(ua)]:
       return True
    elif ua == 'FALSE'[:len(ua)]:
       return False
    else:
       pass  #error condition maybe?
</snippet></ROW><ROW><id>15009114</id><snippet>__or__</snippet></ROW><ROW><id>15009114</id><snippet>Fruit</snippet></ROW><ROW><id>15009114</id><snippet>Fruit</snippet></ROW><ROW><id>15009114</id><snippet>Fruit</snippet></ROW><ROW><id>15009114</id><snippet>type</snippet></ROW><ROW><id>15009114</id><snippet>Fruit</snippet></ROW><ROW><id>15009114</id><snippet>class FruitMeta(type):

    def __or__(self, other):
        return Or(self, other)


class Fruit(object):
    __metaclass__ = FruitMeta
</snippet></ROW><ROW><id>15009114</id><snippet>class Fruit(metaclass=FruitMeta):</snippet></ROW><ROW><id>15009114</id><snippet>Apple | Banana</snippet></ROW><ROW><id>15009114</id><snippet>Fruit</snippet></ROW><ROW><id>15009114</id><snippet>Or(Apple, Banana)</snippet></ROW><ROW><id>15009114</id><snippet>&gt;&gt;&gt; class Or(object):
...     def __init__(self, a, b):
...             self.a = a
...             self.b = b
...     def __repr__(self):
...             return 'Or({!r}, {!r})'.format(self.a, self.b)
... 
&gt;&gt;&gt; class FruitMeta(type):
...     def __or__(self, other):
...             return Or(self, other)
... 
&gt;&gt;&gt; class Fruit(object):
...     __metaclass__ = FruitMeta
... 
&gt;&gt;&gt; class Apple(Fruit): pass
... 
&gt;&gt;&gt; class Banana(Fruit): pass
... 
&gt;&gt;&gt; Apple | Banana
Or(&lt;class '__main__.Apple'&gt;, &lt;class '__main__.Banana'&gt;)
</snippet></ROW><ROW><id>15009262</id><snippet>for eachitem in dicta:
    for k in ['NAME','STATE','COUNTRY','REGION','LNAME']:
        del eachitem[k]
</snippet></ROW><ROW><id>15009262</id><snippet>for eachitem in dicta:
    salary = eachitem['SALARY']
    eachitem.clear()
    eachitem['SALARY'] = salary
</snippet></ROW><ROW><id>15009262</id><snippet>eachitem = {'SALARY':eachitem['SALARY']}
</snippet></ROW><ROW><id>15009438</id><snippet>.get()</snippet></ROW><ROW><id>15009438</id><snippet>&gt;&gt;&gt; a = {'bar': 'eggs'}
&gt;&gt;&gt; a['foo']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'foo'
&gt;&gt;&gt; a.get('foo', 'default value')
'default value'
&gt;&gt;&gt; a.get('bar', 'default value')
'eggs'
</snippet></ROW><ROW><id>15009438</id><snippet>.get()</snippet></ROW><ROW><id>15009438</id><snippet>.update()</snippet></ROW><ROW><id>15009438</id><snippet>profile = dict.fromkeys('id name first_name last_name link username gender locale'.split(), '')
profile.update(result)
</snippet></ROW><ROW><id>15009438</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>15009438</id><snippet>''</snippet></ROW><ROW><id>15009438</id><snippet>.update()</snippet></ROW><ROW><id>15009438</id><snippet>result</snippet></ROW><ROW><id>15009467</id><snippet>{{ formset.management_form }}</snippet></ROW><ROW><id>15009470</id><snippet>groupby</snippet></ROW><ROW><id>15009470</id><snippet>&gt;&gt;&gt; df
  Item1 Item2  Moves
0     A     B      1
1     A     C      2
2     B     D      3
3     C     A      1
4     C     B      5
5     D     B      4
6     D     C      1
&gt;&gt;&gt; swapidx = df['Item1'] &lt; df['Item2']
&gt;&gt;&gt; df1 = df[swapidx]
&gt;&gt;&gt; df2 = df[swapidx^True]
&gt;&gt;&gt; df1
  Item1 Item2  Moves
0     A     B      1
1     A     C      2
2     B     D      3
&gt;&gt;&gt; df2
  Item1 Item2  Moves
3     C     A      1
4     C     B      5
5     D     B      4
6     D     C      1
&gt;&gt;&gt; df2[['Item1', 'Item2']] = df2[['Item2', 'Item1']]
&gt;&gt;&gt; df2['Moves'] = df2['Moves']*-1
&gt;&gt;&gt; df2
  Item1 Item2  Moves
3     A     C     -1
4     B     C     -5
5     B     D     -4
6     C     D     -1
&gt;&gt;&gt; df3 = df1.append(df2)
&gt;&gt;&gt; df3.groupby(['Item1', 'Item2'], as_index=False).sum()
  Item1 Item2  Moves
0     A     B      1
1     A     C      1
2     B     C     -5
3     B     D     -1
4     C     D     -1
</snippet></ROW><ROW><id>15009737</id><snippet>method="post"</snippet></ROW><ROW><id>15009738</id><snippet>compound</snippet></ROW><ROW><id>15009738</id><snippet>import Tkinter as tk

class View(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.image = tk.PhotoImage(file="somefile.gif")
        b = tk.Button(self, text="Hello, world", image=self.image, compound="left")
        b.pack(side="top")

if __name__ == "__main__":
    root = tk.Tk()
    view = View(root)
    view.pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15010112</id><snippet>=</snippet></ROW><ROW><id>15010112</id><snippet>r = requests.post("http://httpbin.org/get", params={'arg1': 'val1', 'setting': 'DOWNLOAD_DELAY=2'})
</snippet></ROW><ROW><id>15010112</id><snippet>--foo=bar=baz</snippet></ROW><ROW><id>15010112</id><snippet>foo</snippet></ROW><ROW><id>15010112</id><snippet>name</snippet></ROW><ROW><id>15010112</id><snippet>bar=baz</snippet></ROW><ROW><id>15010112</id><snippet>value</snippet></ROW><ROW><id>15010112</id><snippet>=</snippet></ROW><ROW><id>15010112</id><snippet>curl</snippet></ROW><ROW><id>15010112</id><snippet>-d foo=bar=baz</snippet></ROW><ROW><id>15010112</id><snippet>foo</snippet></ROW><ROW><id>15010112</id><snippet>name</snippet></ROW><ROW><id>15010112</id><snippet>bar=baz</snippet></ROW><ROW><id>15010112</id><snippet>curl</snippet></ROW><ROW><id>15010112</id><snippet>curl</snippet></ROW><ROW><id>15010112</id><snippet>netcat</snippet></ROW><ROW><id>15010112</id><snippet>nc -kl 8888</snippet></ROW><ROW><id>15010112</id><snippet>curl http://localhost:8888/schedule.json -d project=myproject -d spider=somespider -d setting=DOWNLOAD_DELAY=2 -d arg1=val1</snippet></ROW><ROW><id>15010112</id><snippet>name=value</snippet></ROW><ROW><id>15010127</id><snippet>class Event(models.Model):
    ALERT   = "alert"
    WARNING = "warning"
    ERROR   = "error"
    EVENT_TYPES = (
        (ALERT,   "Alert"),
        (WARNING, "Warning"),
        (ERROR,   "Error"),
    )

    YELLOW = "FF6A00"
    ORANGE = "FFE800"
    RED    = "FF0000"
    COLOURS = (
        (YELLOW, "Yellow"),
        (ORANGE, "Orange"),
        (RED,    "Red"),
    )

    event_type = models.CharField(max_length=16, choices=EVENT_TYPES, default=ALERT)
    event_colour = models.CharField(max_length=6, choices=COLOURS, default=YELLOW)
</snippet></ROW><ROW><id>15010127</id><snippet># example 1
error_events = Event.objects.filter(event_type=Event.ERROR)

# example 2
if my_event.event_type == Event.Error:
    # this is an error event
    pass
</snippet></ROW><ROW><id>15010127</id><snippet>class Event(models.Model):
    ALERT   = "alert"
    WARNING = "warning"
    ERROR   = "error"
    EVENT_TYPES = (
        (ALERT,   "Alert"),
        (WARNING, "Warning"),
        (ERROR,   "Error"),
    )

    # map events to colours
    COLOUR = {
        ALERT:   "FF6A00",
        WARNING: "FFE800",
        ERROR:   "FF0000",
    }

    event_type = models.CharField(max_length=16, choices=EVENT_TYPES, default=ALERT)

    @property
    def colour(self):
        """
        Return the hexadecimal colour of this event
        """
        self.COLOUR[event_type]

# now this would return True
my_error_event.colour == "FF0000"
</snippet></ROW><ROW><id>15010485</id><snippet>**</snippet></ROW><ROW><id>15010485</id><snippet>Metro</snippet></ROW><ROW><id>15010485</id><snippet>namedtuple</snippet></ROW><ROW><id>15010485</id><snippet>from collections import namedtuple
Metro = namedtuple('Metro', 'code, name, country, continent, timezone, coordinates, population, region')
</snippet></ROW><ROW><id>15010485</id><snippet>import json
data = json.loads('''...''')
metros = [Metro(**k) for k in data["metros"]]
</snippet></ROW><ROW><id>15010608</id><snippet>def save(self, which_save, *args, **kwargs):
    if(which_save == 1):
        do_something()
    elif(which_save == 2):
        do_something_else()
    else:
        raise ValueError
</snippet></ROW><ROW><id>15010608</id><snippet>def save_a(self, *args, **kwargs):
    # some code

def save_b(self, *args, **kwargs):
    # some other code
</snippet></ROW><ROW><id>15010608</id><snippet>save</snippet></ROW><ROW><id>15010608</id><snippet>save_a</snippet></ROW><ROW><id>15010608</id><snippet>save_b</snippet></ROW><ROW><id>15010694</id><snippet>open</snippet></ROW><ROW><id>15010694</id><snippet>xfoil = sp.Popen(['/Applications/Xfoil.app/Contents/MacOS/Xfoil'], stdin=sp.PIPE, stdout=sp.PIPE)
</snippet></ROW><ROW><id>15010694</id><snippet>MacOS/Xfoil</snippet></ROW><ROW><id>15010694</id><snippet>Resources/xfoil</snippet></ROW><ROW><id>15010694</id><snippet>/usr/local/bin/xfoil</snippet></ROW><ROW><id>15010694</id><snippet>xfoil = sp.Popen(['/Applications/Xfoil.app/Contents/Resouces/xfoil'], stdin=sp.PIPE, stdout=sp.PIPE)
</snippet></ROW><ROW><id>15010694</id><snippet>-a</snippet></ROW><ROW><id>15010694</id><snippet>open</snippet></ROW><ROW><id>15010694</id><snippet>open -a /Applications/Xfoil.app/Contents/MacOS/Xfoil</snippet></ROW><ROW><id>15010694</id><snippet>open /Applications/Xfoil.app/Contents/MacOS/Xfoil</snippet></ROW><ROW><id>15010694</id><snippet>stdin</snippet></ROW><ROW><id>15010694</id><snippet>Popen</snippet></ROW><ROW><id>15010694</id><snippet>xfoil</snippet></ROW><ROW><id>15010694</id><snippet>Fortran runtime error: end of file</snippet></ROW><ROW><id>15010694</id><snippet>xfoil.wait()</snippet></ROW><ROW><id>15010694</id><snippet>wait</snippet></ROW><ROW><id>15010735</id><snippet>&gt;&gt;&gt; g = d.hit.groupby([d.experiment, d.treatment, d.replicate]).value_counts().unstack().reset_index()
&gt;&gt;&gt; print g
   experiment  treatment  replicate  gene1  gene2
0           1          1          1      3      1
1           1          1          2      2    NaN
2           1          2          1      1      1
3           1          2          2    NaN      2
&gt;&gt;&gt; print g.fillna(0).groupby(['experiment', 'treatment']).mean()
                      replicate  gene1  gene2
experiment treatment                         
1          1                1.5    2.5    0.5
           2                1.5    0.5    1.5
</snippet></ROW><ROW><id>15010850</id><snippet>do_get_size()</snippet></ROW><ROW><id>15010850</id><snippet>do_render()</snippet></ROW><ROW><id>15010896</id><snippet>future</snippet></ROW><ROW><id>15010896</id><snippet>user&gt; (def notepad-process (future (sh "emacs" "jpad.clj")))
#'user/notepad-process
</snippet></ROW><ROW><id>15010896</id><snippet>user&gt; @notepad-process
{:exit 0, :out "", :err ""} 
</snippet></ROW><ROW><id>15010961</id><snippet>skimage.io.Video</snippet></ROW><ROW><id>15010961</id><snippet>frame_count</snippet></ROW><ROW><id>15010961</id><snippet>GetCaptureProperty</snippet></ROW><ROW><id>15010961</id><snippet>frame_count</snippet></ROW><ROW><id>15010961</id><snippet>frame_count</snippet></ROW><ROW><id>15010961</id><snippet>movieDuration*movieFPS/1000</snippet></ROW><ROW><id>15010987</id><snippet>','</snippet></ROW><ROW><id>15010987</id><snippet>'.'</snippet></ROW><ROW><id>15011300</id><snippet>list</snippet></ROW><ROW><id>15011300</id><snippet>tuple</snippet></ROW><ROW><id>15011300</id><snippet>list</snippet></ROW><ROW><id>15011300</id><snippet>(element, element)</snippet></ROW><ROW><id>15011300</id><snippet>zip</snippet></ROW><ROW><id>15011300</id><snippet>list</snippet></ROW><ROW><id>15011300</id><snippet>tuple</snippet></ROW><ROW><id>15011300</id><snippet>tuple</snippet></ROW><ROW><id>15011300</id><snippet>tuple(zip(huge_list, huge_list))
</snippet></ROW><ROW><id>15011300</id><snippet>tuple</snippet></ROW><ROW><id>15011300</id><snippet>tuple((element, element) for element in huge_list)
</snippet></ROW><ROW><id>15011300</id><snippet>tuple</snippet></ROW><ROW><id>15011300</id><snippet>(s[0], s[1:])</snippet></ROW><ROW><id>15011300</id><snippet>(s, s)</snippet></ROW><ROW><id>15011300</id><snippet>tuple((element[0], element[1:]) for element in huge_list)
</snippet></ROW><ROW><id>15011300</id><snippet>repr</snippet></ROW><ROW><id>15011300</id><snippet>eval(repr(x)) != x</snippet></ROW><ROW><id>15011351</id><snippet>logger = logging.getLogger(__name__)</snippet></ROW><ROW><id>15011351</id><snippet>import logging

def configure_log(level=None,name=None):
    logger = logging.getLogger(name)
    logger.setLevel(level)

    file_handler = logging.FileHandler('../logs/%s' % name,'w','utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_format = logging.Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d in %(funcName)s]')
    file_handler.setFormatter(file_format)
    logger.addHandler(file_handler)

    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_format = logging.Formatter('%(message)s')
    console_handler.setFormatter(console_format)
    logger.addHandler(console_handler)
</snippet></ROW><ROW><id>15011351</id><snippet>main</snippet></ROW><ROW><id>15011351</id><snippet>def main():
  # do whatever
</snippet></ROW><ROW><id>15011351</id><snippet>import logging
from logsetup import configure_log
configure_log(logging.DEBUG,'level0') # or 'level1'
from level0 import main # or level1

if __name__ == "__main__"
  main()
</snippet></ROW><ROW><id>15011351</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>15011360</id><snippet>self._table</snippet></ROW><ROW><id>15011360</id><snippet>'UPDATE {table_name} SET BASE_PRICE = {base_price} WHERE {condition}'.format(
     table_name=self._table,
     base_price=row['BASE_PRICE'],
     condition=row['where']
 )
</snippet></ROW><ROW><id>15011456</id><snippet>from module import name1, name2</snippet></ROW><ROW><id>15011456</id><snippet>import module1</snippet></ROW><ROW><id>15011456</id><snippet>Yes: import os
     import sys

No:  import sys, os

Ok: from subprocess import Popen, PIPE
</snippet></ROW><ROW><id>15011841</id><snippet>index()</snippet></ROW><ROW><id>15011841</id><snippet>replace()</snippet></ROW><ROW><id>15011841</id><snippet>guess.index(i)</snippet></ROW><ROW><id>15011841</id><snippet>i</snippet></ROW><ROW><id>15011841</id><snippet>guess</snippet></ROW><ROW><id>15011841</id><snippet>index()</snippet></ROW><ROW><id>15011841</id><snippet>index()</snippet></ROW><ROW><id>15011841</id><snippet>guess</snippet></ROW><ROW><id>15011841</id><snippet>index()</snippet></ROW><ROW><id>15011841</id><snippet>... and not guess.index(i) == guess.index(i):</snippet></ROW><ROW><id>15011841</id><snippet>index</snippet></ROW><ROW><id>15011841</id><snippet>replace</snippet></ROW><ROW><id>15011841</id><snippet>replace</snippet></ROW><ROW><id>15011841</id><snippet>guess = guess.replace(i, 'BULL')</snippet></ROW><ROW><id>15011841</id><snippet>guess</snippet></ROW><ROW><id>15011841</id><snippet>i</snippet></ROW><ROW><id>15011841</id><snippet>'BULL'</snippet></ROW><ROW><id>15012037</id><snippet>reformattedName = names_list[1:] + names_list[:1]
</snippet></ROW><ROW><id>15012037</id><snippet>reformattedName = ' '.join(names_list[1:] + names_list[:1])
</snippet></ROW><ROW><id>15012237</id><snippet>.rsplit()</snippet></ROW><ROW><id>15012237</id><snippet>s.rsplit(',', 1)
</snippet></ROW><ROW><id>15012237</id><snippet>&gt;&gt;&gt; s = "a,b,c,d"
&gt;&gt;&gt; s.rsplit(',', 1)
['a,b,c', 'd']
&gt;&gt;&gt; s.rsplit(',', 2)
['a,b', 'c', 'd']
</snippet></ROW><ROW><id>15012281</id><snippet>getattr</snippet></ROW><ROW><id>15012281</id><snippet>the_ball = next(b for b in list_of_balls if b.name == sys.argv[1])
the_value = getattr(the_ball, sys.argv[2])
print('ball {}.{} == {}'.format(sys.argv[1], sys.argv[2], the_value)
</snippet></ROW><ROW><id>15012281</id><snippet>class</snippet></ROW><ROW><id>15012281</id><snippet>class ball(self, size, color, name):
  self.size = size
  self.color = color
  self.name = name
</snippet></ROW><ROW><id>15012281</id><snippet>__init__</snippet></ROW><ROW><id>15012281</id><snippet>ball</snippet></ROW><ROW><id>15012281</id><snippet>class</snippet></ROW><ROW><id>15012281</id><snippet>class ball(object):
  def __init__(self, size, color, name):
    self.size = size
    self.color = color
    self.name = name
</snippet></ROW><ROW><id>15012281</id><snippet>dict</snippet></ROW><ROW><id>15012281</id><snippet>class Ball(object):
    def __init__(self, size, color, name):
        self.name = name
        self.ball_props = {'size': size, 'color': color}

list_of_balls = [Ball(10, 'red', 'Fred'), Ball(20, 'blue', 'Frank')]

the_ball = next(b for b in list_of_balls if b.name == sys.argv[1])
the_value = the_ball.ball_props[sys.argv[2]]
</snippet></ROW><ROW><id>15012281</id><snippet>dict</snippet></ROW><ROW><id>15012281</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>15012281</id><snippet>the_value = the_ball[sys.argv[2]]
</snippet></ROW><ROW><id>15012281</id><snippet>dict</snippet></ROW><ROW><id>15012281</id><snippet>dict_of_balls = {'Fred': Ball(10, 'red', 'Fred'), …}
# ...

the_ball = dict_of_balls[sys.argv[1]]
</snippet></ROW><ROW><id>15012281</id><snippet>list</snippet></ROW><ROW><id>15012281</id><snippet>dict</snippet></ROW><ROW><id>15012281</id><snippet>dict_of_balls = {ball.name: ball for ball in list_of_balls}
</snippet></ROW><ROW><id>15012341</id><snippet>FileInput(bufsize=1)</snippet></ROW><ROW><id>15012341</id><snippet>file.readlines()</snippet></ROW><ROW><id>15012341</id><snippet>with fileinput.input(bufsize=1) as f:
    for line in f:
        print("One line in, one line out!")
</snippet></ROW><ROW><id>15012553</id><snippet>requests.get()</snippet></ROW><ROW><id>15012635</id><snippet>python -c 'import this'</snippet></ROW><ROW><id>15012716</id><snippet>matplotlib.pyplot.close</snippet></ROW><ROW><id>15012716</id><snippet>from numpy import *
import matplotlib.pyplot as plt
from scipy import *

t = linspace(0, 0.1,1000)
w = 60*2*pi


fig = plt.figure()
plt.plot(t,cos(w*t))
plt.plot(t,cos(w*t-2*pi/3))
plt.plot(t,cos(w*t-4*pi/3))
plt.show()
plt.close(fig)
</snippet></ROW><ROW><id>15012716</id><snippet>matplotlib.pyplot.close("all")</snippet></ROW><ROW><id>15012814</id><snippet>import _ctypes

def di(obj_id):
    """ reverse of id() function """
    return _ctypes.PyObj_FromPtr(obj_id)

if __name__ == '__main__':
    a = 42
    b = 'answer'
    print di(id(a))  # 42
    print di(id(b))  # answer
</snippet></ROW><ROW><id>15012927</id><snippet>eval</snippet></ROW><ROW><id>15012927</id><snippet>pound = float(input("Enter the weight in pounds: "))
</snippet></ROW><ROW><id>15012927</id><snippet>try:
    pound = float(input("Enter the weight in pounds: "))
except ValueError:
    print('Invalid input.')
    return
# the rest of the code
</snippet></ROW><ROW><id>15012927</id><snippet>try:
    pound = float(input("Enter the weight in pounds: "))
except ValueError:
    print('Invalid input.')
else:
    # the rest of the code
</snippet></ROW><ROW><id>15012927</id><snippet>while True:
    try:
        pound = float(input("Enter the weight in pounds: "))
    except ValueError:
        print('Invalid input. Try again.')
    else:
        break
# do the rest with `pound`
</snippet></ROW><ROW><id>15013091</id><snippet>key</snippet></ROW><ROW><id>15013091</id><snippet>row</snippet></ROW><ROW><id>15013091</id><snippet>key['where']</snippet></ROW><ROW><id>15013091</id><snippet>row</snippet></ROW><ROW><id>15013467</id><snippet>Canvas</snippet></ROW><ROW><id>15013467</id><snippet>text = self.canvas.create_text(30, 10, text="Welcome", tags="text")
# The canvas.bbox method returns the corner coordinates of the provided item id.
rect = self.canvas.create_rectangle(self.canvas.bbox(text), fill='red')
# Then you need to reposition the rectangle so that it is behind the text.
self.canvas.lower(rect, text)
</snippet></ROW><ROW><id>15013467</id><snippet>.winfo_x()</snippet></ROW><ROW><id>15013467</id><snippet>.winfo_y()</snippet></ROW><ROW><id>15013467</id><snippet>Label</snippet></ROW><ROW><id>15013467</id><snippet>self.lbl.place(x=self.lbl.winfo_x()+2)
</snippet></ROW><ROW><id>15013467</id><snippet>Canvas</snippet></ROW><ROW><id>15013467</id><snippet>ttk</snippet></ROW><ROW><id>15013467</id><snippet>Label</snippet></ROW><ROW><id>15013766</id><snippet>latin-1</snippet></ROW><ROW><id>15013766</id><snippet>enc = "latin-1"
f = open("TSD.csv", "r")
content = f.read() # raw encoded content
u_content = content.decode(enc) # decodes from enc to unicode
utf8_content = u_content.encode("utf8")
</snippet></ROW><ROW><id>15013801</id><snippet>from mysql import connector
con = connector.Connect(user='root',password='root',database='test',host='localhost')
cur=con.cursor()
cur.execute("""insert into user values ('userName', 'passWord')""")
**con.commit()**
con.close()
</snippet></ROW><ROW><id>15013846</id><snippet>import re
rex = re.compile('([^:]+\S)\s*:\s*(\d+)\s*\(\s*(\d+)/Sec\)')
for line in temp:
    match = rex.match(line)
    if match:
        print match.groups()
</snippet></ROW><ROW><id>15013846</id><snippet>['Total Requests', '337827', '6687']
['Total Responses', '337830', '6687']
['Total Success Connections', '3346', '66']
['Total Connect Errors', '0', '0']
['Total Socket Errors', '0', '0']
['Total I/O Errors', '0', '0']
['Total 200 OK', '33864', '718']
['Total 30X Redirect', '0', '0']
['Total 304 Not Modified', '0', '0']
['Total 404 Not Found', '303966', '5969']
['Total 500 Server Error', '0', '0']
['Total Bad Status', '303966', '5969']
</snippet></ROW><ROW><id>15013936</id><snippet>if a == "1":
    echo "Apples"
elif b == "2":
    echo "Bananas"
</snippet></ROW><ROW><id>15013936</id><snippet>if a == "1":
echo "Apples"
elif b == "2":
    echo "Bananas"
</snippet></ROW><ROW><id>15014029</id><snippet>sorted(sys.stdin)</snippet></ROW><ROW><id>15014029</id><snippet>import re
rex = re.compile('py2\d+-(\S+)')
modules = {}
for line in sys.stdin:
    match = rex.match(line)
    if match:
        modules[match.group(1)] = match.group(0)
    else:
        modules[line] = line
print '\n'.join(sorted(modules.values()))
</snippet></ROW><ROW><id>15014029</id><snippet>py25-libgmail
py26-icalendar
py26-vobject
py27-appscript
py27-asciitable
py27-beautifulsoup
py27-beautifulsoup4
py27-blist
py27-bpython
py27-chm
py27-configobj
py27-dateutil
py27-epydoc
py27-game
py27-gdal
py27-gtk
py27-ipython
py27-lxml
py27-matplotlib
py27-mechanize
py27-mysql
py27-numpy
py27-pdfminer
py27-pil
py27-prettytable
py27-progressbar
py27-psutil
py27-py2app
py27-pylint
py27-pyobjc
py27-pyobjc-cocoa
py27-pypdf
py27-pyqt4
py27-simplejson
py27-sphinx
py27-sqlalchemy
py27-sqlite
py27-termcolor
py27-tkinter
py27-tz
py27-wxpython
py31-appscript
py31-asciitable
py31-beautifulsoup4
py31-blist
py31-bpython
py31-game
py31-lxml
py31-psutil
py32-asciitable
py32-beautifulsoup4
py32-blist
py32-bpython
py32-game
py32-ipython
py32-lxml
py32-psutil
</snippet></ROW><ROW><id>15014166</id><snippet>SystemExit</snippet></ROW><ROW><id>15014166</id><snippet>parse_args</snippet></ROW><ROW><id>15014226</id><snippet>import twitter
api = twitter.Api()
statuses = api.GetUserTimeline(uid, count=200)
</snippet></ROW><ROW><id>15014226</id><snippet>pip install python-twitter
</snippet></ROW><ROW><id>15014226</id><snippet>pip install twitter
</snippet></ROW><ROW><id>15014257</id><snippet>def get_input():
    return raw_input('get file: ')

if __name__ == '__main__':
    print get_input()
</snippet></ROW><ROW><id>15014298</id><snippet>...
&lt;link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.0/jquery.mobile-1.3.0.min.css"&gt;
&lt;script src="http://code.jquery.com/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
&lt;script src="http://code.jquery.com/mobile/1.3.0/jquery.mobile-1.3.0.min.js"&gt;&lt;/script&gt;
...
&lt;div data-role="fieldcontain"&gt;
    &lt;fieldset data-role="controlgroup"&gt;
        &lt;div class="rgbw_label"&gt;&lt;label for="red_slider"&gt;
            Red:
        &lt;/label&gt;&lt;/div&gt;
        &lt;input type="range" id="red_slider" name="red_slider" class="posting-slider" data-slider-id="1" value="0" min="0" max="255" data-highlight="true" /&gt;
    &lt;/fieldset&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>15014298</id><snippet>$(document).ready(function() {
    $('.posting-slider').on('slidestop', function(e) {
        $.post('/server/script.py', { id: $(this).data('slider-id'), value: e.target.value }, function(data, textStatus, jqXHR) {
            console.log('POSTed: ' + textStatus);
        });
    });
});
</snippet></ROW><ROW><id>15014298</id><snippet>import cgi
form = cgi.FieldStorage()

import json

import serial
ser = serial.Serial('/dev/ttyUSB0', 57600)
ser.write("Hello, this is a command for value %s from slider id %s!\n" % (form["id"], form["value"]))      # write a string
ser.close()

print "Content-type: application/json"
print
print(json.JSONEncoder().encode({"status":"ok"}))
</snippet></ROW><ROW><id>15014352</id><snippet>gluLookAt</snippet></ROW><ROW><id>15014352</id><snippet>glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
gluLookAt(10, 10, 10, ...); // &lt;-- this line has no effect
glLoadIdentity();
</snippet></ROW><ROW><id>15014352</id><snippet>gluLookAt</snippet></ROW><ROW><id>15014352</id><snippet>glRotate</snippet></ROW><ROW><id>15014352</id><snippet>glTranslate</snippet></ROW><ROW><id>15014576</id><snippet>timeit</snippet></ROW><ROW><id>15014576</id><snippet>time</snippet></ROW><ROW><id>15014576</id><snippet>In [37]: %timeit collections.deque((x for x in xrange(10000000) if x%4 == 0), maxlen=0)
1 loops, best of 3: 1.05 s per loop
</snippet></ROW><ROW><id>15014576</id><snippet>In [83]: %timeit collections.deque((x for x in range(10000000) if x%4 == 0), maxlen=0)
1 loops, best of 3: 1.32 s per loop

In [84]: %timeit collections.deque((x for x in xrange(10000000) if x%4 == 0), maxlen=0)
1 loops, best of 3: 1.31 s per loop

In [85]: %timeit collections.deque((x for x in iter(range(10000000)) if x%4 == 0), maxlen=0) 
1 loops, best of 3: 1.33 s per loop
</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>__iter__</snippet></ROW><ROW><id>15014576</id><snippet>In [86]: %timeit [x for x in range(10000000) if x%4 == 0]
1 loops, best of 3: 3.65 s per loop
</snippet></ROW><ROW><id>15014576</id><snippet>list</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>for</snippet></ROW><ROW><id>15014576</id><snippet>deque</snippet></ROW><ROW><id>15014576</id><snippet>In [87]: def consume(x):
   ....:     for i in x:
   ....:         pass
In [88]: %timeit consume(x for x in range(10000000) if x%4 == 0)
1 loops, best of 3: 1.85 s per loop
</snippet></ROW><ROW><id>15014576</id><snippet>for</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014576</id><snippet>xrange</snippet></ROW><ROW><id>15014576</id><snippet>range</snippet></ROW><ROW><id>15014753</id><snippet>with open('datafile.txt') as file:
  datalist = []
  for line in file:
    if line.startswith('&gt;'):
      datalist.append([line.strip()[1:], ''])
    else:
      datalist[-1][1] += line.strip()
  for data in datalist:
    print(data[0], '   ', data[1].count('C'))
</snippet></ROW><ROW><id>15014829</id><snippet>&gt;&gt;&gt; from textwrap import dedent
&gt;&gt;&gt; def print_help():
...   help = """\
...   Specify the hostname or service/hostname you want to connect to
...   If specified -f/--hostfile will be ignored
...   Some more multiline text here
...   and more to demonstrate"""
...   print dedent(help)
... 
&gt;&gt;&gt; print_help()
Specify the hostname or service/hostname you want to connect to
If specified -f/--hostfile will be ignored
Some more multiline text here
and more to demonstrate
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15014963</id><snippet>idle</snippet></ROW><ROW><id>15014963</id><snippet>youtube-dl</snippet></ROW><ROW><id>15015003</id><snippet>endpoint1 = TCP4ServerEndpoint(reactor, 8007)
endpoint.listen(QOTDFactory("tweedledee"))
endpoint2 = TCP4ServerEndpoint(reactor, 8008)
endpoint2.listen(QOTDFactory("tweedledum"))
</snippet></ROW><ROW><id>15015003</id><snippet>QOTDFactory.buildProtocol</snippet></ROW><ROW><id>15015003</id><snippet>tweedledee</snippet></ROW><ROW><id>15015003</id><snippet>tweedledum</snippet></ROW><ROW><id>15015136</id><snippet>sys.platform</snippet></ROW><ROW><id>15015136</id><snippet>if sys.platform.startswith('win') or sys.platform.startswith('cygwin'):
    do_windows_stuff()
elif sys.platform.startswith('darwin'):
    do_osx_stuff()
elif sys.platform.startswith('linux'):
    do_linux_stuff()
else:
    raise Exception("Nobody's written the stuff for {}, sorry".format(sys.platform))
</snippet></ROW><ROW><id>15015136</id><snippet>RunServices</snippet></ROW><ROW><id>15015136</id><snippet>rc.local.d</snippet></ROW><ROW><id>15015136</id><snippet>rc.d</snippet></ROW><ROW><id>15015136</id><snippet>chkconfig</snippet></ROW><ROW><id>15015136</id><snippet>rc.local</snippet></ROW><ROW><id>15015156</id><snippet>all</snippet></ROW><ROW><id>15015156</id><snippet>all(request)</snippet></ROW><ROW><id>15015156</id><snippet>submit == all</snippet></ROW><ROW><id>15015156</id><snippet>in</snippet></ROW><ROW><id>15015156</id><snippet>submit = request.POST['submit']

if submit == 'all':
    # call method
elif submit == 'addtype':
   # etc
</snippet></ROW><ROW><id>15015223</id><snippet>readonly</snippet></ROW><ROW><id>15015470</id><snippet>print(list(iterable))
</snippet></ROW><ROW><id>15015470</id><snippet>for item in iterable:
    print(item)
</snippet></ROW><ROW><id>15015470</id><snippet>pprint</snippet></ROW><ROW><id>15015470</id><snippet>print()</snippet></ROW><ROW><id>15015470</id><snippet>print(*iterable, sep="\n")
</snippet></ROW><ROW><id>15015470</id><snippet>print()</snippet></ROW><ROW><id>15015491</id><snippet>       def __unicode__(self):
       return '%s %s' % (self.app_id.app_name, self.environ_name)     
</snippet></ROW><ROW><id>15015643</id><snippet>file.writelines()</snippet></ROW><ROW><id>15015643</id><snippet>with open('file.txt', 'w') as textfile:
    textfile.writelines(str(i) + "\n" for i in range(1, 6))
</snippet></ROW><ROW><id>15015685</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&gt;&gt;&gt; b = np.array([[7, 8, 9], [10, 11, 12]])
&gt;&gt;&gt; np.hstack( (a, b) )
array([[ 1,  2,  3,  7,  8,  9],
       [ 4,  5,  6, 10, 11, 12]])
</snippet></ROW><ROW><id>15015835</id><snippet>\a</snippet></ROW><ROW><id>15015835</id><snippet>winsound</snippet></ROW><ROW><id>15015923</id><snippet>def exclamation(s):
    'string ==&gt; string, returns the string with every vowel repeating four times and an exclamation mark at the end'
    vowels = 'aeiouAEIOU'
    for vowel in vowels:
        s = s.replace(vowel, vowel * 4)
    return s + '!'
</snippet></ROW><ROW><id>15015938</id><snippet>def excercise13():

    currentnumber = 0
</snippet></ROW><ROW><id>15015938</id><snippet>excercise13()</snippet></ROW><ROW><id>15015938</id><snippet>currentnumber</snippet></ROW><ROW><id>15015938</id><snippet>    print("Programming Excercise 13")
    print("This program adds a series of numbers.")
    while True:
        try:
            numberTimes = int(input("Enter how many numbers will be added: "))
        except ValueError:
            print("Invalid input.")
        else:
            break
</snippet></ROW><ROW><id>15015938</id><snippet>int</snippet></ROW><ROW><id>15015938</id><snippet>float.</snippet></ROW><ROW><id>15015938</id><snippet>    for x in range(numbertimes): #More pythonic way.
        new_number = input ("Please enter a number to be added.")
        currentnumber += new_number
</snippet></ROW><ROW><id>15015938</id><snippet>numbertimes</snippet></ROW><ROW><id>15015938</id><snippet>currentnumber</snippet></ROW><ROW><id>15015938</id><snippet>    totalSum = currentnumber
    print("The sum of",nums,"is:",totalSum)
    print()
</snippet></ROW><ROW><id>15015938</id><snippet>totalSum</snippet></ROW><ROW><id>15015938</id><snippet>currentnumber</snippet></ROW><ROW><id>15015938</id><snippet>excercise13()
</snippet></ROW><ROW><id>15015979</id><snippet>np.einsum</snippet></ROW><ROW><id>15015979</id><snippet>In [5]: np.einsum('ij, jkl', M, a)
Out[5]: 
array([[[  0,   1,   2,   3,   4],
        [  5,   6,   7,   8,   9],
        [ 10,  11,  12,  13,  14],
        [ 15,  16,  17,  18,  19]],

       [[  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0]],

       [[-40, -41, -42, -43, -44],
        [-45, -46, -47, -48, -49],
        [-50, -51, -52, -53, -54],
        [-55, -56, -57, -58, -59]]])
</snippet></ROW><ROW><id>15015979</id><snippet>In [17]: a = np.random.randint(256, size=(3, 1000, 2000))

In [18]: %timeit np.dot(M, a.swapaxes(0,1))
10 loops, best of 3: 116 ms per loop

In [19]: %timeit np.einsum('ij, jkl', M, a)
10 loops, best of 3: 60.7 ms per loop
</snippet></ROW><ROW><id>15015979</id><snippet>einsum</snippet></ROW><ROW><id>15015979</id><snippet>&gt;&gt;&gt; a = np.arange(60).reshape((3,4,5))
&gt;&gt;&gt; M = np.array([[1,0,0], [0,0,0], [0,0,-1]])
&gt;&gt;&gt; M = M.reshape((3,3,1,1)).repeat(4,axis=2).repeat(5,axis=3)
&gt;&gt;&gt; np.einsum('ijkl,jkl-&gt;ikl', M, b)
array([[[  0,   1,   2,   3,   4],
        [  5,   6,   7,   8,   9],
        [ 10,  11,  12,  13,  14],
        [ 15,  16,  17,  18,  19]],

       [[  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0],
        [  0,   0,   0,   0,   0]],

       [[-40, -41, -42, -43, -44],
        [-45, -46, -47, -48, -49],
        [-50, -51, -52, -53, -54],
        [-55, -56, -57, -58, -59]]])
</snippet></ROW><ROW><id>15016117</id><snippet>print_topics(numoftopics)</snippet></ROW><ROW><id>15016117</id><snippet>ldamodel</snippet></ROW><ROW><id>15016117</id><snippet>print_topic(topicid)</snippet></ROW><ROW><id>15016117</id><snippet>&gt;&gt;&gt; print lda.print_topics()
None
&gt;&gt;&gt; for i in range(0, lda.num_topics-1):
&gt;&gt;&gt;  print lda.print_topic(i)
0.083*response + 0.083*interface + 0.083*time + 0.083*human + 0.083*user + 0.083*survey + 0.083*computer + 0.083*eps + 0.083*trees + 0.083*system
...
</snippet></ROW><ROW><id>15016594</id><snippet>csv</snippet></ROW><ROW><id>15016594</id><snippet>writer.writerows()</snippet></ROW><ROW><id>15016594</id><snippet>def csv_spec(queryset):
    for employee in queryset:
        yield (
            employee.id,
            employee.manager.first_name,
            employee.user.last_login,
            employee.contact.phone_number)

w = csv.writer(outfile)
w.writerows(csv_spec(something))
</snippet></ROW><ROW><id>15016594</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; Employee = namedtuple('Employee', 'id manager user contact')
&gt;&gt;&gt; Person = namedtuple('Person', 'first_name last_name')
&gt;&gt;&gt; Account = namedtuple('Account', 'username password last_login')
&gt;&gt;&gt; Contact = namedtuple('Contact', 'phone_number email')
&gt;&gt;&gt; data = [
...     Employee(0, Person('Alice', 'Brown'),
...              Account('abrown', 'secret', datetime(2013, 3, 3)),
...              Contact('5551234', 'abrown@example.com')),
...     Employee(1, Person('Bob', 'Jones'),
...              Account('bjones', 'safe', datetime(2013, 3, 3)),
...              Contact('5555678', 'bjones@example.com')),
...     Employee(2, Person('Carol', 'Smith'),
...              Account('csmith', 'hidden', datetime(2013, 3, 3)),
...              Contact('5559012', 'csmith@example.com'))]
</snippet></ROW><ROW><id>15016594</id><snippet>&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; template = StringIO.StringIO('''employee.id
... employee.manager.first_name
... employee.user.last_login
... employee.contact.phone_number''')
</snippet></ROW><ROW><id>15016594</id><snippet>&gt;&gt;&gt; import jinja2
&gt;&gt;&gt; env = jinja2.Environment()
&gt;&gt;&gt; template_filter = map(env.compile_expression, template)
</snippet></ROW><ROW><id>15016594</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; import sys
&gt;&gt;&gt; writer = csv.writer(sys.stdout)
</snippet></ROW><ROW><id>15016594</id><snippet>&gt;&gt;&gt; writer.writerows([[field(employee=row) for field in template_filter]
...                   for row in data])
0,Alice,2013-03-03 00:00:00,5551234
1,Bob,2013-03-03 00:00:00,5555678
2,Carol,2013-03-03 00:00:00,5559012
</snippet></ROW><ROW><id>15016644</id><snippet>dependsontext[0]['number']
</snippet></ROW><ROW><id>15016644</id><snippet>dependsontext</snippet></ROW><ROW><id>15016644</id><snippet>[0]</snippet></ROW><ROW><id>15016644</id><snippet>['number']</snippet></ROW><ROW><id>15016657</id><snippet>pi/2 = 1 + 1/3 + (1*2)/(3*5) + (1*2*3)/(3*5*7) + ...</snippet></ROW><ROW><id>15016657</id><snippet>pi/2 = 1 + 1/3 + (1*2)/(3*4) + (1*2*3)/(3*4*5) + ...</snippet></ROW><ROW><id>15016657</id><snippet>approx2 = approx2 * count/(count + 2)
</snippet></ROW><ROW><id>15016657</id><snippet>count</snippet></ROW><ROW><id>15016657</id><snippet>count + 2</snippet></ROW><ROW><id>15016657</id><snippet>approx2 = approx2 * count/(2 * count + 1)
</snippet></ROW><ROW><id>15016657</id><snippet>from __future__ import division

def half_pi(max_err=10**-6, max_iter=10000):
    partial_sum = cur_term = 1
    n = 1
    while abs(t) &gt; max_err and n &lt; max_iter:
        cur_term = cur_term * (n / (2 * n + 1))
        partial_sum += cur_term
        n += 1
    return partial_sum, n
</snippet></ROW><ROW><id>15016746</id><snippet>200 * len(spiketimes)</snippet></ROW><ROW><id>15016746</id><snippet>spiketimes</snippet></ROW><ROW><id>15016746</id><snippet>spiketimes</snippet></ROW><ROW><id>15016746</id><snippet>def get_waveforms(data, spiketimes, lookback=100, lookahead=100) :
    offsets = np.arange(-lookback, lookahead)
    indices = spiketimes + offsets[:, None]
    ret = np.take(data, indices, mode='clip')
    ret[:, spiketimes &lt; lookback] = 0
    ret[:, spiketimes + lookahead &gt;= len(data)] = 0
    return ret
</snippet></ROW><ROW><id>15016746</id><snippet>spiketimes</snippet></ROW><ROW><id>15016746</id><snippet>data</snippet></ROW><ROW><id>15016746</id><snippet>def get_waveforms_views(data, spiketimes, lookback=100, lookahead=100) :
    ret = []
    for j in spiketimes :
        if j &lt; lookback or j + lookahead &gt;= len(data) :
            ret.append(None)
        else :
            ret.append(data[j - lookback:j + lookahead])
    return ret
</snippet></ROW><ROW><id>15016746</id><snippet>data_points, num_spikes = 1000000, 10000

data = np.random.rand(data_points)
spiketimes = np.random.randint(data_points, size=(num_spikes))
</snippet></ROW><ROW><id>15016746</id><snippet>In [2]: %timeit get_waveforms(data, spiketimes)
1 loops, best of 3: 320 ms per loop

In [3]: %timeit get_waveforms_views(data, spiketimes)
1 loops, best of 3: 313 ms per loop
</snippet></ROW><ROW><id>15016937</id><snippet>serial</snippet></ROW><ROW><id>15016937</id><snippet>widget=</snippet></ROW><ROW><id>15016937</id><snippet>forms.TextInput(</snippet></ROW><ROW><id>15016937</id><snippet>p</snippet></ROW><ROW><id>15016937</id><snippet>alert</snippet></ROW><ROW><id>15016937</id><snippet>alert-info</snippet></ROW><ROW><id>15016937</id><snippet>span1</snippet></ROW><ROW><id>15016937</id><snippet>span6</snippet></ROW><ROW><id>15016937</id><snippet>PrependedAppendedText</snippet></ROW><ROW><id>15016937</id><snippet>PrependedAppendedText.template = 'custom_appended_prepended_text.html'</snippet></ROW><ROW><id>15016937</id><snippet>span</snippet></ROW><ROW><id>15016937</id><snippet>{{ crispy_appended_text|safe }}</snippet></ROW><ROW><id>15016937</id><snippet>Div(PrependedAppendedText('serial', 'Serial #', '&lt;button class="btn btn-primary"&gt;Submit&lt;/button&gt;', css_class='input-xlarge'), css_class='span1'),
</snippet></ROW><ROW><id>15016937</id><snippet>autocomplete</snippet></ROW><ROW><id>15016937</id><snippet>off</snippet></ROW><ROW><id>15016937</id><snippet>class</snippet></ROW><ROW><id>15016937</id><snippet>input-xlarge</snippet></ROW><ROW><id>15016937</id><snippet>placeholder</snippet></ROW><ROW><id>15016937</id><snippet>Serial #</snippet></ROW><ROW><id>15016937</id><snippet>FieldWithButtons('serial', StrictButton('Submit', type='submit', css_class='btn-primary')),
</snippet></ROW><ROW><id>15016937</id><snippet>p</snippet></ROW><ROW><id>15017147</id><snippet>if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
</snippet></ROW><ROW><id>15017247</id><snippet>convert.exe</snippet></ROW><ROW><id>15017247</id><snippet>PATH</snippet></ROW><ROW><id>15017247</id><snippet>b'C:\\Windows\\System32\\convert.exe\r\n'</snippet></ROW><ROW><id>15017247</id><snippet>try:
    print(subprocess.check_output(["where",'convert'],stderr=subprocess.STDOUT,shell=True))
except CalledProcessError as e:
    print(e)
    print(e.output)
</snippet></ROW><ROW><id>15017247</id><snippet>convert</snippet></ROW><ROW><id>15017247</id><snippet>convert</snippet></ROW><ROW><id>15017247</id><snippet>C:\Users\Navin&gt;where convert                                                    
C:\Program Files\ImageMagick-6.8.3-Q16\convert.exe                              
C:\Windows\System32\convert.exe                                                 
</snippet></ROW><ROW><id>15017247</id><snippet>PATH</snippet></ROW><ROW><id>15017247</id><snippet>try:
    cmd= ['C:\Program Files\ImageMagick-6.8.3-Q16\convert','-size','30x40','xc:white','-fill','white','-fill','black','-font','fonts\Helvetica Regular.ttf','-pointsize','40','-gravity','South','-draw',"text 0,0 'P'",'draw_text.gif']
    print(str.join(' ', cmd))
    print('stdout: {}'.format(subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT)))
except CalledProcessError as e:
    print(e)
    print(e.output)
</snippet></ROW><ROW><id>15017380</id><snippet>def unique_justseen(iterable, key=None):
    "List unique elements, preserving order. Remember only the element just seen."
    # unique_justseen('AAAABBBCCDAABBB') --&gt; A B C D A B
    # unique_justseen('ABBCcAD', str.lower) --&gt; A B C A D
    return imap(next, imap(itemgetter(1), groupby(iterable, key)))
</snippet></ROW><ROW><id>15017380</id><snippet>itertools</snippet></ROW><ROW><id>15017658</id><snippet>&gt;&gt;&gt; def group(seq):
    for k, v in groupby(sorted(chain(*seq), key = itemgetter(0)), itemgetter(0)):
        v = list(v)
        if len(v) &gt; 1:
            yield v


&gt;&gt;&gt; list(group(some_list))
[[(1, 2), (1, 5), (1, 8)], [(3, 6), (3, 5), (3, 9)]]
</snippet></ROW><ROW><id>15017658</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; def group(seq):
    some_dict = defaultdict(list)
    for e in chain(*seq):
        some_dict[e[0]].append(e)
    return (v for v in some_dict.values() if len(v) &gt; 1)

&gt;&gt;&gt; list(group(some_list))
[[(1, 2), (1, 5), (1, 8)], [(3, 6), (3, 5), (3, 9)]]
</snippet></ROW><ROW><id>15017658</id><snippet>&gt;&gt;&gt; def group_sort(seq):
    for k, v in groupby(sorted(chain(*seq), key = itemgetter(0)), itemgetter(0)):
        v = list(v)
        if len(v) &gt; 1:
            yield v


&gt;&gt;&gt; def group_hash(seq):
    some_dict = defaultdict(list)
    for e in chain(*seq):
        some_dict[e[0]].append(e)
    return (v for v in some_dict.values() if len(v) &gt; 1)

&gt;&gt;&gt; t1_sort = Timer(stmt="list(group_sort(some_list))", setup = "from __main__ import some_list, group_sort, chain, groupby")
&gt;&gt;&gt; t1_hash = Timer(stmt="list(group_hash(some_list))", setup = "from __main__ import some_list, group_hash,chain, defaultdict")
&gt;&gt;&gt; t1_hash.timeit(100000)
3.340240917954361
&gt;&gt;&gt; t1_sort.timeit(100000)
0.14324535970808938
</snippet></ROW><ROW><id>15017658</id><snippet>&gt;&gt;&gt; some_list = [[sample(range(1000), 2) for _ in range(100)] for _ in range(100)]
&gt;&gt;&gt; t1_sort.timeit(100)
1.3816694363194983
&gt;&gt;&gt; t1_hash.timeit(1000)
34.015403087978484
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15017912</id><snippet>import urlparse
urls = [
    'https://www.google.com', 
    'http://stackoverflow.com',
    'http://www.google.co.in',
    'http://domain.com',
    ]
hostnames = [urlparse.urlparse(url).hostname for url in urls]
hostparts = [hostname.split('.') for hostname in hostnames]
domains = [p[0] == 'www' and p[1] or p[0] for p in hostparts]
print domains # ==&gt; ['google', 'stackoverflow', 'google', 'domain']
</snippet></ROW><ROW><id>15017912</id><snippet>urlparse.urlparse()</snippet></ROW><ROW><id>15018616</id><snippet>print(result['raw_location']
</snippet></ROW><ROW><id>15018898</id><snippet>login_view() got an unexpected keyword argument 'template_name'</snippet></ROW><ROW><id>15018898</id><snippet>template_name</snippet></ROW><ROW><id>15018898</id><snippet>def login_view(request, template_name):
   'your code'
</snippet></ROW><ROW><id>15018898</id><snippet>(r'^login/$', login_view),
</snippet></ROW><ROW><id>15018898</id><snippet>login_view</snippet></ROW><ROW><id>15018898</id><snippet>def login_view(request):
    if request.method == 'POST':
        username = request.POST['email']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None and user.is_active:
            login(request, user)
            return HttpResponseRedirect("/n1.html")
        return HttpResponseRedirect("/account/invalid/")
    form = LoginForm()
    return render(request, 'enter.html', {'login_form': LoginForm})
</snippet></ROW><ROW><id>15019108</id><snippet>class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</snippet></ROW><ROW><id>15019108</id><snippet>property</snippet></ROW><ROW><id>15019553</id><snippet>&gt;&gt;&gt; [i for i, row in enumerate(data) if row[0] == 2]
[1]
&gt;&gt;&gt; data = [
    [1, 2, 3],
    [2, 3, 4],
    [1, 3, 5],
    [2, 6, 8]
]
&gt;&gt;&gt; [i for i, row in enumerate(data) if row[0] == 2]
[1, 3]
</snippet></ROW><ROW><id>15019768</id><snippet>extra_tags</snippet></ROW><ROW><id>15019768</id><snippet>messages.error(request, 'username or password wrong.', extra_tags='login')
</snippet></ROW><ROW><id>15019768</id><snippet>messages.error(request, 'username or password wrong.', extra_tags='signup')
</snippet></ROW><ROW><id>15019768</id><snippet>{# login form #}
{%for message in messages %}
     {%if "login" in message.tags %}
          &lt;p&gt; {{message}} &lt;/p&gt;   {# show login error message #}
     {%endif%}
{%endfor%}

{# signup form #}
{%for message in messages %}
     {%if "signup" in message.tags %}
          &lt;p&gt; {{message}} &lt;/p&gt;   {# show signup error message #}
     {%endif%}
{%endfor%}
</snippet></ROW><ROW><id>15019863</id><snippet>etree</snippet></ROW><ROW><id>15019863</id><snippet>root.find('project[@name="proj1"]/design[@name="des2"]/param').text
</snippet></ROW><ROW><id>15019884</id><snippet>isinstance(x[0], (int, float))
</snippet></ROW><ROW><id>15019884</id><snippet>x[0]</snippet></ROW><ROW><id>15019884</id><snippet>(int, float)</snippet></ROW><ROW><id>15019884</id><snippet>bool</snippet></ROW><ROW><id>15019884</id><snippet>bool</snippet></ROW><ROW><id>15019884</id><snippet>int</snippet></ROW><ROW><id>15019884</id><snippet>isinstance()</snippet></ROW><ROW><id>15019884</id><snippet>==</snippet></ROW><ROW><id>15019884</id><snippet>x[1] == 'Hip'
</snippet></ROW><ROW><id>15019976</id><snippet>&gt;&gt;&gt; from itertools import groupby, count
&gt;&gt;&gt; inp = [0, 1, 3, 5, 6, 7]
&gt;&gt;&gt; [list(g) for k, g in groupby(inp, key=lambda i,j=count(): i-next(j))]
[[0, 1], [3], [5, 6, 7]]
</snippet></ROW><ROW><id>15020115</id><snippet>def hashsum(path, hex=True, hash_type=hashlib.md5):
    hashinst = hash_type()
    with open(path, 'rb') as f:
        for chunk in iter(lambda: f.read(hashinst.block_size * 128), b''):
            hashinst.update(chunk)
    return hashinst.hexdigest() if hex else hashinst.digest()
</snippet></ROW><ROW><id>15020115</id><snippet>myhash = hashsum(cfile)
sproc = subprocess.Popen(['md5', cfile], stdout=subprocess.PIPE)
syshash = sproc.communicate()[0].split()[0]
print myhash
print syshash
print 'Hash idetntical' if myhash == syshash else 'Hash check fail'
</snippet></ROW><ROW><id>15020115</id><snippet>cfile</snippet></ROW><ROW><id>15020115</id><snippet>sys.path[0]</snippet></ROW><ROW><id>15020283</id><snippet>d = {'player1':'Bob' , 'player2':'John', 'player3':'Greg', 'player4':'Tim'}

players = list(d.values())
print(', '.join('{} and {}'.format(players[i], players[i+1]) for i in range(0, len(players), 2)))
</snippet></ROW><ROW><id>15020283</id><snippet>John and Greg, Bob and Tim
</snippet></ROW><ROW><id>15020283</id><snippet>players = sorted(d.values())
</snippet></ROW><ROW><id>15020420</id><snippet>all_values</snippet></ROW><ROW><id>15020420</id><snippet>row_values</snippet></ROW><ROW><id>15020420</id><snippet>all_values</snippet></ROW><ROW><id>15020420</id><snippet>row_values</snippet></ROW><ROW><id>15020420</id><snippet>b = []

a = [1, 2]
b.append(a)
print b

a[0] = 3
b.append(a)
print b

print id(b[0]), id(b[1])
</snippet></ROW><ROW><id>15020420</id><snippet>[[3, 2], [3, 2]]</snippet></ROW><ROW><id>15020420</id><snippet>print</snippet></ROW><ROW><id>15020420</id><snippet>print</snippet></ROW><ROW><id>15020420</id><snippet>b</snippet></ROW><ROW><id>15020420</id><snippet>reader = csv.reader(open(filename,'rt'),delimiter=',')
for row in reader:
    row_values = [float(item) for item in row]
    all_values.append(row_values)

print all_values
</snippet></ROW><ROW><id>15020420</id><snippet>row</snippet></ROW><ROW><id>15020420</id><snippet>all_values</snippet></ROW><ROW><id>15020562</id><snippet>myList</snippet></ROW><ROW><id>15020562</id><snippet>myReserve</snippet></ROW><ROW><id>15020562</id><snippet>myReserve.__init__</snippet></ROW><ROW><id>15020562</id><snippet>class myReserve():
    def __init__(self, initName):
        self.myList = dict()
</snippet></ROW><ROW><id>15020562</id><snippet>#!/usr/bin/python3

class myReserve():
    def __init__(self, initName):
        self.myList = dict()
        self.myName = initName
        self.setList()

    def setList(self):
        if self.myName == "fruit":
            self.myList[0] = "Orange"
            self.myList[1] = "Lemon"
        elif self.myName == "vegetable":
            self.myList[0] = "Tomato"
            self.myList[1] = "Carrot"
        #If neither fruit nor vegetable
        #myList should be empty.


myStore = dict()
myStore[0] = myReserve("fruit")
myStore[1] = myReserve("vegetable")
myStore[2] = myReserve("spices")

print(myStore[0].myList)
</snippet></ROW><ROW><id>15020579</id><snippet>&gt;&gt;&gt; from numpy import r_
&gt;&gt;&gt; a = r_[10**(-9), 10**(-3), 3*10**(-3), 6*10**(-3), 9*10**(-3), 1.5*10**(-2)]
&gt;&gt;&gt; for x in a: print "%.1e"%x
... 
1.0e-09
1.0e-03
3.0e-03
6.0e-03
9.0e-03
1.5e-02
</snippet></ROW><ROW><id>15020579</id><snippet>%.0e</snippet></ROW><ROW><id>15020579</id><snippet>1e-2</snippet></ROW><ROW><id>15020579</id><snippet>matplotlib</snippet></ROW><ROW><id>15020579</id><snippet>fig = plt.figure()
ax = fig.add_subplot(111)

x = 1.5*10**(-2)
l = ("%.0e"%x).split("e")
x_str = r"$ %s \times 10^{%s}$" % (l[0], l[1] )

ax.set_title(x_str)

plt.show()
</snippet></ROW><ROW><id>15020579</id><snippet>.format</snippet></ROW><ROW><id>15020579</id><snippet>x = 1.5*10**(-2)
l = ("%.0e"%x).split("e")
x_str = r"$%s \times 10^{%s}$" % ( l[0], str(int(l[1])) )
</snippet></ROW><ROW><id>15020579</id><snippet>-02</snippet></ROW><ROW><id>15020579</id><snippet>-2</snippet></ROW><ROW><id>15021436</id><snippet>test()</snippet></ROW><ROW><id>15021541</id><snippet>cbar = colorbar()
cbar.solids.set_edgecolor("face")
draw()
</snippet></ROW><ROW><id>15022285</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>15022383</id><snippet>Post.objects.filter(followers__in=[user])
</snippet></ROW><ROW><id>15022638</id><snippet>perl -e 'print log($ARGV[0])/log(10),"\n"' 3e-320
</snippet></ROW><ROW><id>15022638</id><snippet>-319.522883580228
</snippet></ROW><ROW><id>15022654</id><snippet>lxml</snippet></ROW><ROW><id>15022654</id><snippet>from lxml import etree as ET

os.chdir("/Users/paulsallen/workspace/fforce/FForce Dev Account/config/objects/")
objs = glob.glob("*.object")

fields_dict = {}

for filename in objs:
    root = ET.parse(filename).getroot()
    required = root.xpath('.//n:fullName[../n:required/text()="true"]/text()',
        namespaces={'n': tree.nsmap[None]})
    fields_dict[os.path.splitext(filename)[0]] = required
</snippet></ROW><ROW><id>15022654</id><snippet>fullName</snippet></ROW><ROW><id>15022654</id><snippet>required</snippet></ROW><ROW><id>15022654</id><snippet>'true'</snippet></ROW><ROW><id>15022665</id><snippet>&gt;&gt;&gt; x = [1,2,3,4,7,7,5,6,7,8,8]
&gt;&gt;&gt; y = [1,4,5,6,8,9]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; count=Counter(x)
&gt;&gt;&gt; for i in y:
...     del count[i]
... 
&gt;&gt;&gt; list(count.elements())
[2, 3, 7, 7, 7]
</snippet></ROW><ROW><id>15022760</id><snippet>math</snippet></ROW><ROW><id>15022760</id><snippet>numpy</snippet></ROW><ROW><id>15022760</id><snippet>import numpy as np

# my function
def vector(x, y, z):
    vec=np.sqrt(np.power(x,2)+np.power(y,2)+np.power(z,2))
    return vec 
</snippet></ROW><ROW><id>15022760</id><snippet>def vector(x, y, z):
    vec=np.sqrt(x**2+y**2+z**2)
    return vec 
</snippet></ROW><ROW><id>15022906</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; fullpath = '/absolute/path/to/file'
&gt;&gt;&gt; os.path.dirname(fullpath)
'/absolute/path/to'
</snippet></ROW><ROW><id>15022906</id><snippet>&gt;&gt;&gt; os.path.basename(fullpath)
'file'
&gt;&gt;&gt; os.path.split(fullpath)
('/absolute/path/to','file')
</snippet></ROW><ROW><id>15022946</id><snippet>close_fds=True</snippet></ROW><ROW><id>15022946</id><snippet>pipe(2)</snippet></ROW><ROW><id>15022946</id><snippet>fork(2)</snippet></ROW><ROW><id>15023154</id><snippet>ip, date, method, path, status, _ = line.split('\t')
</snippet></ROW><ROW><id>15023917</id><snippet>reindex</snippet></ROW><ROW><id>15023917</id><snippet>In [1]: df = pd.DataFrame([[1, 2], [3, 4]], index=list('ab'))

In [2]: s = pd.Series([2,1], index=list('ab'))

In [3]: s
Out[3]: 
a    2
b    1

In [4]: s.sort()

In [5]: df.reindex(s.index)
Out[5]: 
   0  1
b  3  4
a  1  2
</snippet></ROW><ROW><id>15024266</id><snippet>data = """\
ATOM    973  CG  ARG A  61     -21.593   8.884  69.770  1.00 25.13           C
ATOM    974  CD  ARG A  61     -21.610   7.433  69.314  1.00 23.44           C
ATOM    975  NE  ARG A  61     -21.047   7.452  67.937  1.00 12.13           N"""

offset = 308
for line in data.split('\n'):
    line = line[:22] + "  {:&lt;5d}  ".format(int(line[22:31]) + offset) + line[31:]
    print line
</snippet></ROW><ROW><id>15024501</id><snippet>from collections import defaultdict

alignments = defauldict(list)

...
[the remainder of your code]
... 

alignments[k, chinese_sent[i]].append(english_sent[j])
</snippet></ROW><ROW><id>15024501</id><snippet>from collections import defaultdict

alignments = defauldict(list)

for k in range(1, number_of_sent+1):

    sentences = bitext[k-1]
    chinese_sent = sentences[0]
    english_sent = sentences[1]

    for cs in chinese_sent:
        argmax = 0
        for es in english_sent:
            if probabilities[cs,es] &gt;= argmax:
                argmax = probabilities[cs,es]
                alignments[k, cs].append(es)
</snippet></ROW><ROW><id>15024554</id><snippet>ui.show()</snippet></ROW><ROW><id>15024554</id><snippet>mySumCorr</snippet></ROW><ROW><id>15024554</id><snippet>setupUi</snippet></ROW><ROW><id>15024554</id><snippet>SumCorr</snippet></ROW><ROW><id>15024554</id><snippet>ui.setupUi(mySumCorr)</snippet></ROW><ROW><id>15024554</id><snippet>mySumCorr</snippet></ROW><ROW><id>15024554</id><snippet>class SumCorr(QtGui.QMainWindow, Ui_SumCorr_ui):

    def __init__(self):
        SumCorr_ui.__init__(self)
        self.setupUi(self)

        self.save_energies_button.clicked.connect(self.saveEnergyScheme)

    def saveEnergyScheme(self):
        print 'energyList'

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    mySumCorr = SumCorr()
    mySumCorr.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15024554</id><snippet>SumCorr_ui</snippet></ROW><ROW><id>15024554</id><snippet>Qt</snippet></ROW><ROW><id>15024710</id><snippet>import ast
with open('new.txt') as f:
    d = ast.literal_eval(f.read())
print d['String2']['Value2']['One']
</snippet></ROW><ROW><id>15024941</id><snippet>storedSums.append(som) if som &lt; 10000 else 0
</snippet></ROW><ROW><id>15024941</id><snippet>test_list = []
for i in range(10):
    test_list.append(i) if i &lt; 5 else 0
print test_list
</snippet></ROW><ROW><id>15024941</id><snippet>[0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>15024941</id><snippet>    if som &lt; 10000:
        storedSums.append(som)
    else:
        storedSums.append(0)
</snippet></ROW><ROW><id>15025124</id><snippet>psycopg2</snippet></ROW><ROW><id>15025124</id><snippet>pip</snippet></ROW><ROW><id>15025124</id><snippet>easy_install</snippet></ROW><ROW><id>15025124</id><snippet>libpq-dev</snippet></ROW><ROW><id>15025124</id><snippet>psycopg2</snippet></ROW><ROW><id>15025423</id><snippet>z</snippet></ROW><ROW><id>15025423</id><snippet>p</snippet></ROW><ROW><id>15025423</id><snippet>z_n = z_n-1**2 + p</snippet></ROW><ROW><id>15025423</id><snippet>for</snippet></ROW><ROW><id>15025423</id><snippet>threshold = 2
mask = np.abs(z) &lt; threshold
</snippet></ROW><ROW><id>15025423</id><snippet>mask</snippet></ROW><ROW><id>15025423</id><snippet>imshow</snippet></ROW><ROW><id>15025425</id><snippet>import</snippet></ROW><ROW><id>15025425</id><snippet>import</snippet></ROW><ROW><id>15025425</id><snippet>CREATE FUNCTION test() RETURNS text
LANGUAGE plpythonu
AS $$
if 'json' in SD:
    json = SD['json']
else:
    import json
    SD['json'] = json

 return json.dumps(...)
$$;
</snippet></ROW><ROW><id>15025478</id><snippet>process.getOutputStream().flush();
</snippet></ROW><ROW><id>15025478</id><snippet>PrintWriter outputWriter = new PrintWriter(process.getOutputStream(),true);
outputWriter.println("kill");
</snippet></ROW><ROW><id>15025754</id><snippet>au</snippet></ROW><ROW><id>15025754</id><snippet>    au = plpy.execute(query)
    _aunits=float(au[0]["unitsavailable"])
</snippet></ROW><ROW><id>15025754</id><snippet>au</snippet></ROW><ROW><id>15025754</id><snippet>raise plpy.error("Error generating insert queries--&gt;"+str(e)+"Debug is "+debugcode)
</snippet></ROW><ROW><id>15025754</id><snippet>raise
</snippet></ROW><ROW><id>15025856</id><snippet>QCoreApplication::processEvents()</snippet></ROW><ROW><id>15025856</id><snippet>PySide.QtCore.QCoreApplication.processEvents()</snippet></ROW><ROW><id>15025901</id><snippet>gcc-4.2</snippet></ROW><ROW><id>15025901</id><snippet>gcc-apple-4.2</snippet></ROW><ROW><id>15025915</id><snippet>in</snippet></ROW><ROW><id>15025915</id><snippet>exclude_list</snippet></ROW><ROW><id>15025915</id><snippet>exclude_set</snippet></ROW><ROW><id>15025915</id><snippet>exclude_set = {v for i,v in enumerate(tuple_list) if (i % 3) == 0}
</snippet></ROW><ROW><id>15025915</id><snippet>exclude_list</snippet></ROW><ROW><id>15025915</id><snippet>exclude_set = set(exclude_list)
</snippet></ROW><ROW><id>15025915</id><snippet>remainder_list</snippet></ROW><ROW><id>15025915</id><snippet>remainder_list = [v for v in tuple_list if v not in exclude_set]
</snippet></ROW><ROW><id>15025915</id><snippet>in</snippet></ROW><ROW><id>15025915</id><snippet>remainder_list</snippet></ROW><ROW><id>15025915</id><snippet>M == len(remainder_list</snippet></ROW><ROW><id>15025915</id><snippet>remainder_list = [v for i,v in enumerate(tuple_list) if (i % 3) != 0]     
</snippet></ROW><ROW><id>15025991</id><snippet>for line in f.readlines():
</snippet></ROW><ROW><id>15025991</id><snippet>for line in f:
</snippet></ROW><ROW><id>15026286</id><snippet> response = yield tornado.gen.Task(http_client.fetch, como_url)
</snippet></ROW><ROW><id>15026286</id><snippet>@tornado.web.asynchronous
@tornado.gen.engine
@tornado.web.authenticated
def get(self):
    ....
</snippet></ROW><ROW><id>15026416</id><snippet>python manage.py schemamigration yourapp --auto</snippet></ROW><ROW><id>15026416</id><snippet>models.py</snippet></ROW><ROW><id>15026416</id><snippet>python manage.py migrate yourapp version_no</snippet></ROW><ROW><id>15026839</id><snippet>delim_whitespace</snippet></ROW><ROW><id>15026839</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; for line in open("whitespace.csv"):
...     print repr(line)
...     
'a\t  b\tc 1 2\n'
'd\t  e\tf 3 4\n'
&gt;&gt;&gt; pd.read_csv("whitespace.csv", header=None, delimiter=r"\s+")
   0  1  2  3  4
0  a  b  c  1  2
1  d  e  f  3  4
&gt;&gt;&gt; pd.read_csv("whitespace.csv", header=None, delim_whitespace=True)
   0  1  2  3  4
0  a  b  c  1  2
1  d  e  f  3  4
</snippet></ROW><ROW><id>15026993</id><snippet>pip install virtualenvwrapper</snippet></ROW><ROW><id>15027442</id><snippet>argparse</snippet></ROW><ROW><id>15027442</id><snippet>optparse</snippet></ROW><ROW><id>15027442</id><snippet>argparse</snippet></ROW><ROW><id>15027464</id><snippet>import os</snippet></ROW><ROW><id>15027464</id><snippet>os</snippet></ROW><ROW><id>15027619</id><snippet>__bind_key = 'db1'
</snippet></ROW><ROW><id>15027619</id><snippet>__bind_key__ = 'db1'
</snippet></ROW><ROW><id>15028185</id><snippet>subprocess.call("./linuxUpgrade.sh", shell=True)
</snippet></ROW><ROW><id>15028185</id><snippet>chmod u+x linuxUpgrade.sh
</snippet></ROW><ROW><id>15028238</id><snippet>def clusters(array,
             orig_indices = None,
             start = 0,
             rtol=numpy.allclose.__defaults__[0],
             atol=numpy.allclose.__defaults__[1]):
    """For an array, return a permutation that sorts the numbers and the sizes of the resulting blocks of identical numbers."""
    array = numpy.asarray(array)
    if not len(array):
        return numpy.array([]),[]
    if orig_indices is None:
        orig_indices = numpy.arange(len(array))
    x = array[0]
    close = abs(array-x) &lt;= (atol + rtol*abs(x))
    first = sum(close)
    r_perm, r_sizes = clusters(
        array[~close],
        orig_indices[~close],
        start+first,
        rtol, atol)
    r_sizes.insert(0, first)
    return numpy.concatenate((orig_indices[close], r_perm)), r_sizes

def permutation_matrix(permutation, dtype=dtype):
    n = len(permutation)
    P = numpy.zeros((n,n), dtype)
    for i,j in enumerate(permutation):
        P[j,i]=1
    return P

def simultaneously_diagonalize(tensor, atol=numpy.allclose.__defaults__[1]):
    tensor = numpy.asarray(tensor)
    old_shape = tensor.shape
    size = old_shape[-1]
    tensor = tensor.reshape((-1, size, size))
    diag_mask = 1-numpy.eye(size)

    eigvalues, diagonalizer = numpy.linalg.eig(tensor[0])
    diagonalization = numpy.dot(
        numpy.dot(
            matrix.linalg.inv(diagonalizer),
            tensor).swapaxes(0,-2),
        diagonalizer)
    if numpy.allclose(diag_mask*diagonalization, 0):
        return diagonalization.diagonal(axis1=-2, axis2=-1).reshape(old_shape[:-1])
    else:
        perm, cluster_sizes = clusters(diagonalization[0].diagonal())
        perm_matrix = permutation_matrix(perm)
        diagonalization = numpy.dot(
            numpy.dot(
                perm_matrix.T,
                diagonalization).swapaxes(0,-2),
            perm_matrix)
        mask = 1-scipy.linalg.block_diag(
            *list(
                numpy.ones((blocksize, blocksize))
                for blocksize in cluster_sizes))
        print(diagonalization)
        assert(numpy.allclose(
                diagonalization*mask,
                0)) # Assert that the matrices are co-diagonalizable
        blocks = numpy.cumsum(cluster_sizes)
        start = 0
        other_part = []
        for block in blocks:
            other_part.append(
                simultaneously_diagonalize(
                    diagonalization[1:, start:block, start:block]))
            start = block
        return numpy.vstack(
            (diagonalization[0].diagonal(axis1=-2, axis2=-1),
             numpy.hstack(other_part)))
</snippet></ROW><ROW><id>15028537</id><snippet>&gt;&gt;&gt; c = http.client.HTTPConnection('t.co')
&gt;&gt;&gt; c.request('GET', '/7fGoazTYpc')          # or HEAD, but body is empty anyway
&gt;&gt;&gt; r = c.getresponse()
&gt;&gt;&gt; r.getheader('Location')
'http://bit.ly/900913'
</snippet></ROW><ROW><id>15028660</id><snippet>ū</snippet></ROW><ROW><id>15028660</id><snippet>u</snippet></ROW><ROW><id>15028660</id><snippet>u</snippet></ROW><ROW><id>15028812</id><snippet>&gt;&gt;&gt; A = np.array([[2,-1,0],[-1,2,-1],[0,-1,2]])
&gt;&gt;&gt; A.dtype
dtype('int32')
&gt;&gt;&gt; A[0, 1]
-1
&gt;&gt;&gt; A[0, 1] * 0.5
-0.5
&gt;&gt;&gt; A[0, 1] *= 0.5
&gt;&gt;&gt; A[0, 1]
0
&gt;&gt;&gt; int(-0.5)
0
</snippet></ROW><ROW><id>15028812</id><snippet>def ldlt_np(arr) :
    rows, cols = arr.shape
    tmp = 1 / np.diag(arr) # this is a float array
    mask = np.tril_indices(cols)
    ret = arr * tmp[:, None] # this will also be a float array
    ret[mask] = arr[mask]

    return ret

&gt;&gt;&gt; A = np.array([[2,-1,0],[-1,2,-1],[0,-1,2]])
&gt;&gt;&gt; ldlt_np(A)
array([[ 2. , -0.5,  0. ],
       [-1. ,  2. , -0.5],
       [ 0. , -1. ,  2. ]])
</snippet></ROW><ROW><id>15028838</id><snippet>class ConstantFunction(object):
    def __init__(constant):
        self.constant = constant
    def __call__(self, t):
        return self.constant

def constant_function(constant):
    return ConstantFunction(constant)
</snippet></ROW><ROW><id>15029437</id><snippet>LoadFunc</snippet></ROW><ROW><id>15029437</id><snippet>LoadFunc</snippet></ROW><ROW><id>15029437</id><snippet>pathGlob</snippet></ROW><ROW><id>15029437</id><snippet>pathGlob</snippet></ROW><ROW><id>15029437</id><snippet>setLocation()</snippet></ROW><ROW><id>15029437</id><snippet>/**
 * Limit data to a week starting at given day. If day is 0, month is assumed.
 */
public WeeklyOrMonthlyTextLoader(String year, String month, String day) {
    super();
    pathGlob = getPathGlob(
        Integer.parseInt(year),
        Integer.parseInt(month),
        Integer.parseInt(day)
    );
}

/**
 * Replace DATE_PATH in location with glob required for reading in this
 * month or week of data. This assumes the following directory structure:
 *
 * &lt;code&gt;/year=&gt;year&lt;/month=&gt;month&lt;/day=&gt;day&lt;/*&lt;/code&gt;
 */
@Override
public void setLocation(String location, Job job) throws IOException {
    location = location.replace(GLOB_PLACEHOLDER, pathGlob);
    super.setLocation(location, job);
}
</snippet></ROW><ROW><id>15029437</id><snippet>DEFINE TextLoader com.foo.WeeklyOrMonthlyTextLoader('$year', '$month', '$day');
</snippet></ROW><ROW><id>15029437</id><snippet>String</snippet></ROW><ROW><id>15029437</id><snippet>int</snippet></ROW><ROW><id>15029437</id><snippet>LoadFunc</snippet></ROW><ROW><id>15029505</id><snippet>help(function)
</snippet></ROW><ROW><id>15029505</id><snippet>def func():
    """
    I am a function who doesn't do anything,
    I just sit in your namespace and crowd it up.
    If you call me expecting anything
    I'll just return to you the singleton None
    """
    pass

help(func)
</snippet></ROW><ROW><id>15029693</id><snippet>def get_model_fields(model):
    return model._meta.fields
</snippet></ROW><ROW><id>15029693</id><snippet>getattr(instance, field.name)
</snippet></ROW><ROW><id>15029693</id><snippet>with open('your.csv', 'wb') as csvfile:
    writer = csv.writer(csvfile)
    # write your header first
    for obj in YourModel.objects.all():
        row = ""
        for field in fields:
             row += gettAttr(obj, field.name) + ","
        writer.writerow(row)
</snippet></ROW><ROW><id>15030310</id><snippet>p = re.search(r'Profile\t+(\w+)',s)
d = re.search(r'BuildDate\t+([A-z0-9-]+)',s)

return (p.group(1) if p is not None else None,
        d.group(1) if d is not None else None)
</snippet></ROW><ROW><id>15030310</id><snippet>return (p and p.group(1), d and d.group(1))
</snippet></ROW><ROW><id>15030394</id><snippet>A</snippet></ROW><ROW><id>15030394</id><snippet>vocabulary = {}  # map terms to column indices
data = []        # values (maybe weights)
row = []         # row (document) indices
col = []         # column (term) indices

for i, doc in enumerate(documents):
    for term in doc:
        # get column index, adding the term to the vocabulary if needed
        j = vocabulary.setdefault(term, len(vocabulary))
        data.append(1)  # uniform weights
        row.append(i)
        col.append(j)

A = scipy.sparse.coo_matrix((data, (row, col)))
</snippet></ROW><ROW><id>15030394</id><snippet>A.T * A
</snippet></ROW><ROW><id>15030425</id><snippet>/* Calculating ZIP CRC-32 in 'C'
   =============================
   Reference model for the translated code */

#define poly 0xEDB88320
/* Some compilers need
   #define poly 0xEDB88320uL
 */

/* On entry, addr=&gt;start of data
             num = length of data
             crc = incoming CRC     */
int crc32(char *addr, int num, int crc)
{
int i;

for (; num&gt;0; num--)              /* Step through bytes in memory */
  {
  crc = crc ^ *addr++;            /* Fetch byte from memory, XOR into CRC */
  for (i=0; i&lt;8; i++)             /* Prepare to rotate 8 bits */
  {
    if (crc &amp; 1)                  /* b0 is set... */
      crc = (crc &gt;&gt; 1) ^ poly;    /* rotate and XOR with ZIP polynomic */
    else                          /* b0 is clear... */
      crc &gt;&gt;= 1;                  /* just rotate */
  /* Some compilers need:
    crc &amp;= 0xFFFFFFFF;
   */
    }                             /* Loop for 8 bits */
  }                               /* Loop until num=0 */
  return(crc);                    /* Return updated CRC */
}
</snippet></ROW><ROW><id>15030425</id><snippet>const uint32_t Polynomial = 0xEDB88320;

uint32_t crc32_bitwise(const void* data, size_t length, uint32_t previousCrc32 = 0) { 
     uint32_t crc = ~previousCrc32; // same as previousCrc32 ^ 0xFFFFFFFF 
     unsigned char* current = (unsigned char*) data; 
     while (length--) { 
         crc ^= *current++; 
         for (unsigned int j = 0; j &lt; 8; j++) {
             if (crc &amp; 1) 
                 crc = (crc &gt;&gt; 1) ^ Polynomial; 
             else 
                 crc = crc &gt;&gt; 1; 
         }

     } 
     return ~crc; // same as crc ^ 0xFFFFFFFF 
} 
</snippet></ROW><ROW><id>15031090</id><snippet>fileinput</snippet></ROW><ROW><id>15031090</id><snippet>#! /usr/bin/env python
import fileinput

def get_point_grid_id(x,y,x_min,y_max,x_dist,y_dist):
    col = int((x - x_min)/x_dist)
    row = int((y_max - y)/y_dist)
    return (row, col)

input_file = "test.dat"
#
# Add mode='rb' to the arguments of fileinput.input() if you are
# using a binary file on operating systems that differentiate 
# between binary and text files (e.g. Microsoft Windows). 
#
for line in fileinput.input(input_file, inplace=True):
    columns = line.split()
    if 3 == len(columns):
        x, y, z = columns
        id = get_point_grid_id(float(x),float(y),0,10,1,1)
        print "{0} {1} {2} {3}".format(x, y, z, id)
</snippet></ROW><ROW><id>15031090</id><snippet>inplace</snippet></ROW><ROW><id>15031090</id><snippet>fileinput.input</snippet></ROW><ROW><id>15031114</id><snippet>.replace()</snippet></ROW><ROW><id>15031114</id><snippet>word = word.replace('\n','') 
</snippet></ROW><ROW><id>15031114</id><snippet>word = word.replace('\n','').replace('?','')
</snippet></ROW><ROW><id>15031114</id><snippet>collections.Counter()</snippet></ROW><ROW><id>15031114</id><snippet>from collections import Counter

with open(fileName, "rb") as inputFile:
    wordCount = Counter(w.replace('?', '')
        for line in inputFile for w in line.split())
</snippet></ROW><ROW><id>15031114</id><snippet>wordCount</snippet></ROW><ROW><id>15031114</id><snippet>.split()</snippet></ROW><ROW><id>15031114</id><snippet>.strip()</snippet></ROW><ROW><id>15031114</id><snippet>wordCount = Counter(w.strip('.,:?')
    for line in inputFile for w in line.split())
</snippet></ROW><ROW><id>15031114</id><snippet>.strip('.,:?')</snippet></ROW><ROW><id>15031120</id><snippet>yBits = y &amp; 0xFFFFFFFL
Original exception was:
  File "&lt;stdin&gt;", line 1
    0xFFL
        ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>15031204</id><snippet>pwd.getpwuid</snippet></ROW><ROW><id>15031204</id><snippet>os.getuid</snippet></ROW><ROW><id>15031204</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import pwd
&gt;&gt;&gt; pwd.getpwuid(os.getuid())[4]
</snippet></ROW><ROW><id>15031229</id><snippet>&gt;&gt;&gt; s = 'id,obj1,"string, etc",obj2'
&gt;&gt;&gt; import csv
&gt;&gt;&gt; dict(enumerate(next(csv.reader([s])),start=1))
{1: 'id', 2: 'obj1', 3: 'string, etc', 4: 'obj2'}
</snippet></ROW><ROW><id>15031575</id><snippet>cost + cost2 + h(v2)</snippet></ROW><ROW><id>15031843</id><snippet>--find-links</snippet></ROW><ROW><id>15031843</id><snippet>index.html</snippet></ROW><ROW><id>15032253</id><snippet>select date_part('epoch',mydatefield)*1000 from table;
</snippet></ROW><ROW><id>15032253</id><snippet>epoch</snippet></ROW><ROW><id>15032253</id><snippet>*1000</snippet></ROW><ROW><id>15032253</id><snippet>new Date(timestamp_from_pg)</snippet></ROW><ROW><id>15032253</id><snippet>Date</snippet></ROW><ROW><id>15032256</id><snippet>new_title_box.__init__()</snippet></ROW><ROW><id>15032256</id><snippet>listx.append(name)</snippet></ROW><ROW><id>15032256</id><snippet>listx.append(self.name)</snippet></ROW><ROW><id>15032256</id><snippet>generate()</snippet></ROW><ROW><id>15032256</id><snippet>folder = boxvar.entry.get()</snippet></ROW><ROW><id>15032256</id><snippet>folder = boxvar.get()</snippet></ROW><ROW><id>15032444</id><snippet>IOError</snippet></ROW><ROW><id>15032444</id><snippet>OSError</snippet></ROW><ROW><id>15032444</id><snippet>FileNotFoundError</snippet></ROW><ROW><id>15032444</id><snippet>OSError</snippet></ROW><ROW><id>15032444</id><snippet>except (OSError, IOError) as e:
   ...
</snippet></ROW><ROW><id>15032444</id><snippet>e.errno</snippet></ROW><ROW><id>15032771</id><snippet>concurrent.futures</snippet></ROW><ROW><id>15032771</id><snippet>futures</snippet></ROW><ROW><id>15032771</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>15032771</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>15032771</id><snippet>monocle</snippet></ROW><ROW><id>15032771</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>15032771</id><snippet>twisted</snippet></ROW><ROW><id>15032771</id><snippet>tulip</snippet></ROW><ROW><id>15032771</id><snippet>twisted</snippet></ROW><ROW><id>15032771</id><snippet>gevent</snippet></ROW><ROW><id>15032771</id><snippet>eventlet</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>threading</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>gevent</snippet></ROW><ROW><id>15032771</id><snippet>threading</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>threading</snippet></ROW><ROW><id>15032771</id><snippet>threading</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>threading</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>multiprocessing</snippet></ROW><ROW><id>15032771</id><snippet>futures</snippet></ROW><ROW><id>15032953</id><snippet>try:
    for table in tables:
        my_method(table) #Exception message gets passed in with BadTableName, but the program ends. Subsequest iterations of this loop never happen
except Exception, e:
    print e
</snippet></ROW><ROW><id>15032953</id><snippet>for table in tables:
    try:
        my_method(table) #Exception message gets passed in with BadTableName, but the program ends. Subsequest iterations of this loop never happen
    except Exception, e:
        print e
</snippet></ROW><ROW><id>15032953</id><snippet>MyException</snippet></ROW><ROW><id>15032953</id><snippet>Exception</snippet></ROW><ROW><id>15032953</id><snippet>except</snippet></ROW><ROW><id>15032953</id><snippet>except Exception, e:</snippet></ROW><ROW><id>15032953</id><snippet>except Exception as e:</snippet></ROW><ROW><id>15032953</id><snippet>BaseException</snippet></ROW><ROW><id>15032953</id><snippet>class MyException(object):
    def __init__(self, msg):
        pass

try:
    raise MyException("dsfsdf")
except Exception:
    pass
</snippet></ROW><ROW><id>15032953</id><snippet>MyException</snippet></ROW><ROW><id>15032953</id><snippet>TypeError('
Out[11]: TypeError('exceptions must be old-style classes or derived from BaseException, not MyException')</snippet></ROW><ROW><id>15032953</id><snippet>class MyException:
    def __init__(self, msg):
        pass

try:
    raise MyException("dsfsdf")
except Exception:
    pass
</snippet></ROW><ROW><id>15032953</id><snippet>BaseException</snippet></ROW><ROW><id>15032953</id><snippet>Exception</snippet></ROW><ROW><id>15032953</id><snippet>Exception</snippet></ROW><ROW><id>15032953</id><snippet>class MyException(BaseException):
    def __init__(self, msg):
        pass

try:
    raise MyException("dsfsdf")
except Exception:
    pass
</snippet></ROW><ROW><id>15033071</id><snippet>mutable_object = {} 
fig = plt.figure()
def on_key(event):
    print('you pressed', event.key, event.xdata, event.ydata)
    N=event.xdata
    mutable_object['key'] = N
</snippet></ROW><ROW><id>15033071</id><snippet>N = mutable_object['key']
</snippet></ROW><ROW><id>15033071</id><snippet>list</snippet></ROW><ROW><id>15033071</id><snippet>append</snippet></ROW><ROW><id>15033115</id><snippet>s</snippet></ROW><ROW><id>15033115</id><snippet>df = pd.DataFrame([s[i:i+60].values for i in range(len(s)-60)])
</snippet></ROW><ROW><id>15033115</id><snippet>df.columns=['Day '+str(i) for i in range(1,61)]
</snippet></ROW><ROW><id>15033133</id><snippet>one()</snippet></ROW><ROW><id>15033133</id><snippet>threading.local</snippet></ROW><ROW><id>15033133</id><snippet>import threading
state = threading.local()

def three():
    # something is defined implicitly
    print(state.something)

def two():
    # ...
    three()

def one(something):
    # somehow define something inside a context
    # for this activation
    def inner():
        state.something = something
        two()
    t = threading.Thread(target=inner)
    t.start()
    t.join()

if __name__=='__main__':
    one(42)
    one(24)
</snippet></ROW><ROW><id>15033208</id><snippet>v, w = e</snippet></ROW><ROW><id>15033208</id><snippet>&gt;&gt;&gt; e = (1, 2)
&gt;&gt;&gt; u, v = e
&gt;&gt;&gt; u
1 
&gt;&gt;&gt; v
2
</snippet></ROW><ROW><id>15033326</id><snippet>sum</snippet></ROW><ROW><id>15033326</id><snippet>sum</snippet></ROW><ROW><id>15033326</id><snippet>def problem30():
    total = 0
    for n in xrange(20000):
        if sum(int(x) ** 5 for x in str(n)) == n:
            total += n
    return total
</snippet></ROW><ROW><id>15033443</id><snippet>Point</snippet></ROW><ROW><id>15033443</id><snippet>class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
</snippet></ROW><ROW><id>15033443</id><snippet>p1 = Point(point.x + jumpValue, point.y)
</snippet></ROW><ROW><id>15033968</id><snippet>os.path.getctime()</snippet></ROW><ROW><id>15034026</id><snippet>import dbf
table = dbf.Table('Cars', default_data_types={'C':dbf.Char})  # don't want extra spaces
cars = []
table.open()
for record in table:
    cars.append(record[0])   # or cars.append(record.make) if 'make' is the field name

if len(cars) == 1 and cars[0] == 'empty'):
    # print no cars sentence
elif len(cars) == 1:
    # print one car sentence
elif len(cars) == 2:
    # print two car sentence
else:
    # print many car sentence
</snippet></ROW><ROW><id>15034026</id><snippet>for record in table</snippet></ROW><ROW><id>15034026</id><snippet>cars</snippet></ROW><ROW><id>15034026</id><snippet># many car case
first = "Within this neighborhood there is a "
last = " parked on the street."
middle = ('%s, ' * (len(cars)-1) + 'and a %s') % tuple(cars)
print first + middle + last+
</snippet></ROW><ROW><id>15034026</id><snippet>middle =</snippet></ROW><ROW><id>15034026</id><snippet>%s</snippet></ROW><ROW><id>15034026</id><snippet>cars</snippet></ROW><ROW><id>15034026</id><snippet>cars</snippet></ROW><ROW><id>15034026</id><snippet>%s</snippet></ROW><ROW><id>15034026</id><snippet>cars = ['Mazda', 'Ford', 'Dodge', 'Yugo']
</snippet></ROW><ROW><id>15034026</id><snippet>len(cars) - 1 == 3
</snippet></ROW><ROW><id>15034026</id><snippet>'%s, ' * (len(cars)-1) == '%s, %s, %s, '
</snippet></ROW><ROW><id>15034026</id><snippet>'%s, ' * (len(cars)-1) + 'and a %s' == '%s, %s, %s, and a %s'
</snippet></ROW><ROW><id>15034026</id><snippet>%</snippet></ROW><ROW><id>15034026</id><snippet>'%s, %s, %s, and a %s' % tuple(cars)
</snippet></ROW><ROW><id>15034026</id><snippet> 'Mazda, Ford, Dodge, and a Yugo'
</snippet></ROW><ROW><id>15034026</id><snippet>tuple(cars)</snippet></ROW><ROW><id>15034026</id><snippet>cars</snippet></ROW><ROW><id>15034026</id><snippet>list</snippet></ROW><ROW><id>15034026</id><snippet>%</snippet></ROW><ROW><id>15034143</id><snippet>import numpy as np
import scipy as sp
import scipy.stats

def mean_confidence_interval(data, confidence=0.95):
    a = 1.0*np.array(data)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    h = se * sp.stats.t._ppf((1+confidence)/2., n-1)
    return m, m-h, m+h
</snippet></ROW><ROW><id>15034373</id><snippet>import distutils.core

# copy subdirectory example
fromDirectory = "/a/b/c"
toDirectory = "/x/y/z"

distutils.dir_util.copy_tree(fromDirectory, toDirectory)
</snippet></ROW><ROW><id>15034574</id><snippet>the_text.decode('utf8')</snippet></ROW><ROW><id>15034574</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>15034574</id><snippet>print repr(the_text)</snippet></ROW><ROW><id>15034574</id><snippet>str</snippet></ROW><ROW><id>15034574</id><snippet>unicode</snippet></ROW><ROW><id>15034574</id><snippet>False</snippet></ROW><ROW><id>15034574</id><snippet>latin1</snippet></ROW><ROW><id>15034574</id><snippet>iso-8859-1</snippet></ROW><ROW><id>15034574</id><snippet>latin1</snippet></ROW><ROW><id>15034574</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>15034574</id><snippet>text.decode('latin1')</snippet></ROW><ROW><id>15034574</id><snippet>foo = text.decode('utf8')</snippet></ROW><ROW><id>15034574</id><snippet>text</snippet></ROW><ROW><id>15034574</id><snippet>foo = text.decode('utf8')</snippet></ROW><ROW><id>15034574</id><snippet>text</snippet></ROW><ROW><id>15034574</id><snippet>str</snippet></ROW><ROW><id>15034574</id><snippet>print foo</snippet></ROW><ROW><id>15034574</id><snippet>latin-1</snippet></ROW><ROW><id>15034574</id><snippet>print repr(text)</snippet></ROW><ROW><id>15034574</id><snippet>text.decode("utf8")</snippet></ROW><ROW><id>15034574</id><snippet>u'\u2014'</snippet></ROW><ROW><id>15034574</id><snippet>cp1252</snippet></ROW><ROW><id>15034574</id><snippet>latin-1</snippet></ROW><ROW><id>15034574</id><snippet>u'\u2014'</snippet></ROW><ROW><id>15034671</id><snippet>r',\b(?!Inc\.)'
</snippet></ROW><ROW><id>15034708</id><snippet>tupled</snippet></ROW><ROW><id>15034814</id><snippet>#!/usr/bin/env python

d = {}

# open your file here, i'm using /etc/hosts as an example...
f = open("/etc/hosts","r")
for line in f:
    line = line.rstrip()
    l = len(line)+1
    for i in xrange(1,l):
        d[line[:i]] = True
f.close()


while True:
    w = raw_input('&gt; ')
    if not w:
        break

    if w in d:
        print "match found", w
</snippet></ROW><ROW><id>15034814</id><snippet>#!/usr/bin/env python

d = []

def binary_search(a, x, lo=0, hi=None):
    if hi is None:
        hi = len(a)
    while lo &lt; hi:
        mid = (lo+hi)//2
        midval = a[mid]
        if midval &lt; x:
            lo = mid+1
        elif midval &gt; x:
            hi = mid
        else:
            return mid
    return -1


f = open("/etc/hosts","r")
for line in f:
    line=line.rstrip()
    l = len(line)+1
    for i in xrange(1,l):
        x = hash(line[:i])
        d.append(x)
f.close()

d.sort()

while True:
    w = raw_input('&gt; ')
    if not w:
        break

    if binary_search(d, hash(w)) != -1:
        print "match found", w
</snippet></ROW><ROW><id>15035009</id><snippet>def list_range(offset, length, l):
    # this handles both negative offsets and offsets larger than list length
    start = offset % len(l)
    end = (start + length) % len(l)
    if end &gt; start:
        return l[start:end]
    return l[start:] + l[:end]
</snippet></ROW><ROW><id>15035009</id><snippet>&gt;&gt;&gt; l = range(30)
&gt;&gt;&gt; list_range(15,10,l)
[15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
&gt;&gt;&gt; list_range(25,10,l) # I'm guessing the 35 in the example was accidental
[25, 26, 27, 28, 29, 0, 1, 2, 3, 4]
&gt;&gt;&gt; list_range(-8,10,l)
[12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
</snippet></ROW><ROW><id>15035077</id><snippet># write out encrypted data and an HMAC of the block
outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, hashlib.sha256).digest())
</snippet></ROW><ROW><id>15035077</id><snippet># write out encrypted data and an HMAC of the block
data = cipher.encrypt(input_chunk)
outfile.write(data + hmac.new(hmac_key, data, hashlib.sha256).digest())
</snippet></ROW><ROW><id>15035077</id><snippet>data</snippet></ROW><ROW><id>15035077</id><snippet>update</snippet></ROW><ROW><id>15035077</id><snippet>digest</snippet></ROW><ROW><id>15035077</id><snippet>update</snippet></ROW><ROW><id>15035077</id><snippet>infile.read(64 * 1024)</snippet></ROW><ROW><id>15035077</id><snippet>64*1024</snippet></ROW><ROW><id>15035161</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>15035161</id><snippet>matplotlib.pyplot.plotfile</snippet></ROW><ROW><id>15035161</id><snippet>savetxt</snippet></ROW><ROW><id>15035161</id><snippet>import numpy as np 
np.savetxt("test.dat", np.column_stack((x, y)), delimiter=',')
</snippet></ROW><ROW><id>15035302</id><snippet>__slots__ = "vocab"
</snippet></ROW><ROW><id>15035302</id><snippet>__slots__</snippet></ROW><ROW><id>15035302</id><snippet>__slots__</snippet></ROW><ROW><id>15035302</id><snippet>__slots__</snippet></ROW><ROW><id>15035308</id><snippet>subprocess.call(['c:/cygwin/bin/bash.exe', '--login', '-i', '-c', 'rsync -zrgo --omit-dir-times --verbose --delete . usertwo@192.168.1.1:/var/www/project/'])
</snippet></ROW><ROW><id>15035308</id><snippet>-c string If the -c option is present,  then  commands  are  read  from
          string.   If  there  are arguments after the string, they are
          assigned to the positional parameters, starting with $0.
</snippet></ROW><ROW><id>15035308</id><snippet># bash /bin/ls
/bin/ls: /bin/ls: cannot execute binary file
# bash -c "/bin/ls -l"
&lt;ls output&gt;
</snippet></ROW><ROW><id>15035344</id><snippet>Popen</snippet></ROW><ROW><id>15035344</id><snippet>os.walk</snippet></ROW><ROW><id>15035344</id><snippet>\;</snippet></ROW><ROW><id>15035344</id><snippet>;</snippet></ROW><ROW><id>15035344</id><snippet>;</snippet></ROW><ROW><id>15035344</id><snippet>find</snippet></ROW><ROW><id>15035344</id><snippet>{}</snippet></ROW><ROW><id>15035344</id><snippet>Popen</snippet></ROW><ROW><id>15035344</id><snippet>import subprocess

subprocess.Popen(('find', '/tmp/mount', '-type', 'f',
                  '-name', '*.rpmsave', '-exec', 'rm', '-f', '{}', ';'))
</snippet></ROW><ROW><id>15035405</id><snippet>results = Calls.objects.order_by("followupdate")
newresults = []

seen_altid = []

for result in results:
    if result.altid not in seen_altids:
        seen_altids.append(result.altid)
        newresults.append(result)
</snippet></ROW><ROW><id>15035405</id><snippet>-followupdate</snippet></ROW><ROW><id>15035466</id><snippet>urlretrieve</snippet></ROW><ROW><id>15035466</id><snippet>from urllib.request import urlopen
from shutil import copyfileobj

with urlopen(image['url']) as in_stream, open(p, 'wb') as out_file:
    copyfileobj(in_stream, out_file)
</snippet></ROW><ROW><id>15035783</id><snippet>sudo aptitude install python3-setuptools
sudo easy_install3 pip
sudo apt-get install python3-dev
download the Pillow-master.zip
wget https://github.com/python-imaging/Pillow/archive/master.zip
go to downloaded directory and,
sudo unzip Pillow-master.zip
python3 setup.py build
python3 setup.py install
</snippet></ROW><ROW><id>15035797</id><snippet>PyObject *array = PyObject_CallFunction(array_type, "c", 'd');   
</snippet></ROW><ROW><id>15035818</id><snippet>df = df1.reset_index().merge(df2.reset_index(), on=['index','cols']).set_index('index')
</snippet></ROW><ROW><id>15035942</id><snippet>money + 2</snippet></ROW><ROW><id>15035942</id><snippet>money</snippet></ROW><ROW><id>15035942</id><snippet>money = money + 2
# or
money += 2
</snippet></ROW><ROW><id>15035942</id><snippet>global</snippet></ROW><ROW><id>15035942</id><snippet>global money
money += 2
</snippet></ROW><ROW><id>15035942</id><snippet>money</snippet></ROW><ROW><id>15035942</id><snippet>money</snippet></ROW><ROW><id>15035942</id><snippet>def gainM(money):
    money += 2
    Stats()
    return money

if money == 1:
    money = gainM(money)
</snippet></ROW><ROW><id>15035942</id><snippet>Stats</snippet></ROW><ROW><id>15035942</id><snippet>money</snippet></ROW><ROW><id>15035942</id><snippet>def Stats(money):
     print
     print "money " + str(money)
</snippet></ROW><ROW><id>15035942</id><snippet>1</snippet></ROW><ROW><id>15035942</id><snippet>3</snippet></ROW><ROW><id>15035942</id><snippet>'money %d' % money  # the old way
'money {}'.format(money)  # the new and recommended way
</snippet></ROW><ROW><id>15035942</id><snippet>money</snippet></ROW><ROW><id>15035942</id><snippet>Stats</snippet></ROW><ROW><id>15035942</id><snippet>def gainM(money):
    money += 2
    Stats(money)
    return money
</snippet></ROW><ROW><id>15036058</id><snippet>random.choice([1]*30 + [2]*50 + [3]*20)
</snippet></ROW><ROW><id>15036179</id><snippet>import nltk
# Define the cfg grammar.
grammar = nltk.parse_cfg("""
S -&gt; NP VP
NP -&gt; 'DT' 'NN'
VP -&gt; 'VB'
VP -&gt; 'VB' 'NN'
""")


# Make your POS sentence into a list of tokens.
sentence = "DT NN VB NN".split(" ")

# Load the grammar into the ChartParser.
cp = nltk.ChartParser(grammar)

# Generate and print the nbest_parse from the grammar given the sentence tokens.
for tree in cp.nbest_parse(sentence):
    print tree
</snippet></ROW><ROW><id>15036194</id><snippet>.append</snippet></ROW><ROW><id>15036194</id><snippet>None</snippet></ROW><ROW><id>15036271</id><snippet>z = zip(x,y)
np.cov(z)
</snippet></ROW><ROW><id>15036271</id><snippet>n=100 # number of points in each vector
num_vects=25
vals=[]
for _ in range(num_vects):
    vals.append(np.random.normal(size=n))
np.cov(vals)
</snippet></ROW><ROW><id>15036271</id><snippet>num_vects</snippet></ROW><ROW><id>15036271</id><snippet>n</snippet></ROW><ROW><id>15036547</id><snippet>for lines in untranslated:
    latin = []
    words = lines.split()
    for word in words:
        if word[0] in vowels:
            word = word + 'yay'
        else:
            while word[0] not in vowels:
                word = word[1:] + word[0]
            word = word + 'ay'
        latin.append(word)
    print(' '.join(latin))
</snippet></ROW><ROW><id>15036547</id><snippet>' '</snippet></ROW><ROW><id>15036568</id><snippet>def bytes(integer):
    return divmod(integer, 0x100)
</snippet></ROW><ROW><id>15036568</id><snippet>&gt;&gt;&gt; high, low = bytes(0x607F)
&gt;&gt;&gt; hex(high)
'0x60'
&gt;&gt;&gt; hex(low)
'0x7f'
</snippet></ROW><ROW><id>15036603</id><snippet>print</snippet></ROW><ROW><id>15036603</id><snippet>None</snippet></ROW><ROW><id>15036603</id><snippet>print ("number of donuts: " ) +str(count)
</snippet></ROW><ROW><id>15036603</id><snippet>None + str(count)</snippet></ROW><ROW><id>15036603</id><snippet>print ("Number of donuts: {}".format(count))
</snippet></ROW><ROW><id>15036705</id><snippet>[ [] ]*10
</snippet></ROW><ROW><id>15036705</id><snippet>id</snippet></ROW><ROW><id>15036705</id><snippet>&gt;&gt;&gt; print map(id,[ [] ]*10)
[958336, 958336, 958336, 958336, 958336, 958336, 958336, 958336, 958336, 958336]
</snippet></ROW><ROW><id>15036705</id><snippet>[ [['O','O'] for _ in range(10)] for x in range(1, 11) ]
</snippet></ROW><ROW><id>15036813</id><snippet>KeyError</snippet></ROW><ROW><id>15036813</id><snippet>try:
    caption = post['caption']['text']
except KeyError:
    caption = None
</snippet></ROW><ROW><id>15037173</id><snippet>return render_to_response('myapp/index.html', dict(latest_poll_list , user =request.user)
</snippet></ROW><ROW><id>15037173</id><snippet>return render_to_response('myapp/index.html', dict(latest_poll_list=latest_poll_list, user=request.user))
</snippet></ROW><ROW><id>15037227</id><snippet>Hello World!</snippet></ROW><ROW><id>15037227</id><snippet>import threading
import time
import sublime
import sublime_plugin

"""
The command just creates and runs a thread.
The thread will do all the work in the background.

Note that in your Thread constructor, you will need to pass in an 
instance of your Command class to work with in your thread.
"""
class ExampleCommand(sublime_plugin.TextCommand):

    def run(self, edit):

        exampleThread = ExampleThread(self, edit)
        exampleThread.start()

"""
Extend the Thread class and add your functionality in 
the run method below.

One thing to remember when moving your code over is 
you need to use self.cmd instead of self.
"""
class ExampleThread(threading.Thread):

    """
    Remember to pass in the parameters you need
    in this thread constructor.
    """
    def __init__(self, cmd, edit):
        threading.Thread.__init__(self)
        self.cmd = cmd
        self.edit = edit

    """
    Add your functionality here.

    If you need to access the main thread, you need to
    use sublime.set_timeout(self.callback, 1).

    In my example here, you can't call insert text into the editor
    unless you are in the main thread.

    Luckily that is fast operation.

    Basically, time.sleep(3) is a slow operation and will block, hence it
    is run in this separate thread.
    """
    def run(self):
        time.sleep(3)
        sublime.set_timeout(self.callback, 1)

    """
    This is the callback function that will be called to 
    insert HelloWorld. 

    You will probably need to use this to set your status message at 
    the end. I'm pretty sure that requires that you be on main thread 
    to work.
    """
    def callback(self):
        self.cmd.view.insert(self.edit, 0, "Hello, World!")
</snippet></ROW><ROW><id>15037227</id><snippet>import threading
import time
import sublime
import sublime_plugin


def buildsnippetURL():
    return ""

def getsnippets(snippet_url):
    time.sleep(3)
    return ""

class SyncsnippetsCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        syncsnippetsThread = SyncsnippetsThread(self, edit)
        syncsnippetsThread.start()


class SyncsnippetsThread(threading.Thread):
    def __init__(self, cmd, edit):
        threading.Thread.__init__(self)
        self.cmd = cmd
        self.edit = edit

    def buildLexerDict(self,snippets):
        lexers = snippets[0]['user']['lexers']
        lexer_dict = {}
        for lexer in lexers:
            lexer_dict[lexer] = []
        return lexer_dict

    def buildsnippetsContextDict(self,snippets,lexer_dict):
        snippets_dict = lexer_dict
        for snippet in snippets:
            snippets_dict[snippet['lexer']].append({"id":str(snippet['id']),
                                         "title":snippet['title']})
        return snippets_dict

    def run(self): 
        snippet_url = buildsnippetURL()
        snippets_count = 1;
        snippets = getsnippets(snippet_url)

        """
        context_menu = '['
        context_menu += '\n\t{ "caption": "snippets", "id": "file", "children":'
        context_menu += '\n\t\t['
        if snippets == None:
            {"caption":"No snippets available"}
        else:
            snippets = snippets['objects']
            lexers = self.buildLexerDict(snippets)
            snippets_dict = self.buildsnippetsContextDict(snippets, lexers)
            for j,key in reversed(list(enumerate(reversed(snippets_dict.keys())))):
                ... loop through JSON and create menu ...
                if j == 0:
                    context_menu += ''
                else:
                    context_menu += ',' 
        context_menu += '\n\t\t]'
        context_menu += '\n\t}'
        context_menu += '\n]'
        f = open(sublime.packages_path() + '\snippetSync\\Context.sublime-menu', 'w')
        f.write(context_menu)
        f.close
        """

        sublime.set_timeout(lambda: self.callback(snippets_count), 1)

    def callback(self, snippets_count):
        self.cmd.view.set_status('snippet', 'snippet Sync: Added ' + str(snippets_count)  + ' snippets from your account.')
        sublime.set_timeout(lambda: self.cmd.view.erase_status('snippet'), 3000)
</snippet></ROW><ROW><id>15037341</id><snippet>&gt;&gt;&gt; unq_lst = OrderedDict()
&gt;&gt;&gt; for e in lst:
    unq_lst.setdefault(frozenset(e),[]).append(e)


&gt;&gt;&gt; map(list, unq_lst.keys())
[[1, 2], [4, 5], [3, 4]]
</snippet></ROW><ROW><id>15037347</id><snippet>PDDocument document = null; 
document = PDDocument.load(inFile); 
List pages = document.getDocumentCatalog().getAllPages();
Iterator iter = pages.iterator(); 
while (iter.hasNext()) {
            PDPage page = (PDPage) iter.next();
            PDResources resources = page.getResources();
            Map pageImages = resources.getImages();
            if (pageImages != null) { 
                Iterator imageIter = pageImages.keySet().iterator();
                while (imageIter.hasNext()) {
                    String key = (String) imageIter.next();
                    PDXObjectImage image = (PDXObjectImage) pageImages.get(key);
                    image.write2OutputStream(/* some output stream */);
                }
            }
}
</snippet></ROW><ROW><id>15037347</id><snippet>import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDResources;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectForm;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;

/**
 * This will read a read pdf and extract images. &lt;br/&gt;&lt;br/&gt;
 *
 * usage: java org.apache.pdfbox.ExtractImages &lt;pdffile&gt; &lt;password&gt; [imageprefix]
 *
 * @author  &lt;a href="mailto:ben@benlitchfield.com"&gt;Ben Litchfield&lt;/a&gt;
 * @version $Revision: 1.7 $
 */
public class ExtractImages
{
    private int imageCounter = 1;

    private static final String PASSWORD = "-password";
    private static final String PREFIX = "-prefix";
    private static final String ADDKEY = "-addkey";
    private static final String NONSEQ = "-nonSeq";

    private ExtractImages()
    {
    }

    /**
     * This is the entry point for the application.
     *
     * @param args The command-line arguments.
     *
     * @throws Exception If there is an error decrypting the document.
     */
    public static void main( String[] args ) throws Exception
    {
        ExtractImages extractor = new ExtractImages();
        extractor.extractImages( args );
    }

    private void extractImages( String[] args ) throws Exception
    {
        if( args.length &lt; 1 || args.length &gt; 4 )
        {
            usage();
        }
        else
        {
            String pdfFile = null;
            String password = "";
            String prefix = null;
            boolean addKey = false;
            boolean useNonSeqParser = false;
            for( int i=0; i&lt;args.length; i++ )
            {
                if( args[i].equals( PASSWORD ) )
                {
                    i++;
                    if( i &gt;= args.length )
                    {
                        usage();
                    }
                    password = args[i];
                }
                else if( args[i].equals( PREFIX ) )
                {
                    i++;
                    if( i &gt;= args.length )
                    {
                        usage();
                    }
                    prefix = args[i];
                }
                else if( args[i].equals( ADDKEY ) )
                {
                    addKey = true;
                }
                else if( args[i].equals( NONSEQ ) )
                {
                    useNonSeqParser = true;
                }
                else
                {
                    if( pdfFile == null )
                    {
                        pdfFile = args[i];
                    }
                }
            }
            if(pdfFile == null)
            {
                usage();
            }
            else
            {
                if( prefix == null &amp;&amp; pdfFile.length() &gt;4 )
                {
                    prefix = pdfFile.substring( 0, pdfFile.length() -4 );
                }

                PDDocument document = null;

                try
                {
                    if (useNonSeqParser)
                    {
                        document = PDDocument.loadNonSeq(new File(pdfFile), null, password);
                    }
                    else
                    {
                        document = PDDocument.load( pdfFile );

                        if( document.isEncrypted() )
                        {
                            StandardDecryptionMaterial spm = new StandardDecryptionMaterial(password);
                            document.openProtection(spm);
                        }
                    }
                    AccessPermission ap = document.getCurrentAccessPermission();
                    if( ! ap.canExtractContent() )
                    {
                        throw new IOException(
                            "Error: You do not have permission to extract images." );
                    }

                    List pages = document.getDocumentCatalog().getAllPages();
                    Iterator iter = pages.iterator();
                    while( iter.hasNext() )
                    {
                        PDPage page = (PDPage)iter.next();
                        PDResources resources = page.getResources();
                        // extract all XObjectImages which are part of the page resources
                        processResources(resources, prefix, addKey);
                    }
                }
                finally
                {
                    if( document != null )
                    {
                        document.close();
                    }
                }
            }
        }
    }

    private void processResources(PDResources resources, String prefix, boolean addKey) throws IOException
    {
        if (resources == null)
        {
            return;
        }
        Map&lt;String, PDXObject&gt; xobjects = resources.getXObjects();
        if( xobjects != null )
        {
            Iterator&lt;String&gt; xobjectIter = xobjects.keySet().iterator();
            while( xobjectIter.hasNext() )
            {
                String key = xobjectIter.next();
                PDXObject xobject = xobjects.get( key );
                // write the images
                if (xobject instanceof PDXObjectImage)
                {
                    PDXObjectImage image = (PDXObjectImage)xobject;
                    String name = null;
                    if (addKey) 
                    {
                        name = getUniqueFileName( prefix + "_" + key, image.getSuffix() );
                    }
                    else 
                    {
                        name = getUniqueFileName( prefix, image.getSuffix() );
                    }
                    System.out.println( "Writing image:" + name );
                    image.write2file( name );
                }
                // maybe there are more images embedded in a form object
                else if (xobject instanceof PDXObjectForm)
                {
                    PDXObjectForm xObjectForm = (PDXObjectForm)xobject;
                    PDResources formResources = xObjectForm.getResources();
                    processResources(formResources, prefix, addKey);
                }
            }
        }
    }

    private String getUniqueFileName( String prefix, String suffix )
    {
        String uniqueName = null;
        File f = null;
        while( f == null || f.exists() )
        {
            uniqueName = prefix + "-" + imageCounter;
            f = new File( uniqueName + "." + suffix );
            imageCounter++;
        }
        return uniqueName;
    }

    /**
     * This will print the usage requirements and exit.
     */
    private static void usage()
    {
        System.err.println( "Usage: java org.apache.pdfbox.ExtractImages [OPTIONS] &lt;PDF file&gt;\n" +
            "  -password  &lt;password&gt;        Password to decrypt document\n" +
            "  -prefix  &lt;image-prefix&gt;      Image prefix(default to pdf name)\n" +
            "  -addkey                      add the internal image key to the file name\n" +
            "  -nonSeq                      Enables the new non-sequential parser\n" +
            "  &lt;PDF file&gt;                   The PDF document to use\n"
            );
        System.exit( 1 );
    }

}
</snippet></ROW><ROW><id>15037347</id><snippet>/**
     * Crop the main image according to this rectangle, and scale it to the
     * correct size for a thumbnail.
     */
    public InputStream cropAndScale(InputStream mainImageStream,
            CropRectangle crop) {
        try {
            RenderedOp mainImage = loadImage(mainImageStream);
            RenderedOp opaqueImage = makeImageOpaque(mainImage);
            RenderedOp croppedImage = cropImage(opaqueImage, crop);
            RenderedOp scaledImage = scaleImage(croppedImage);
            byte[] jpegBytes = encodeAsJpeg(scaledImage);
            return new ByteArrayInputStream(jpegBytes);
        } catch (Exception e) {
            throw new IllegalStateException("Failed to scale the image", e);
        }
    }
</snippet></ROW><ROW><id>15037361</id><snippet>balance = 4213
annual_interest_rate = 0.2
monthly_payment_rate =0.04
monthly_interest_rate = annual_interest_rate / 12
monthly_payment = monthly_payment_rate * balance
new_balance= (balance - monthly_payment) * (1 + monthly_interest_rate)

for month in range(1, 13):
    monthly_payment = monthly_payment_rate * balance
    balance = (balance - monthly_payment) * (1 + monthly_interest_rate)

    print('Month: %d \n Minimum monthly payment: %g \n Remaining balance: %g'\
          % (month, round(monthly_payment, 2), round(balance,2)))
</snippet></ROW><ROW><id>15037397</id><snippet>from bs4 import BeautifulSoup as bs

dic = {}
data = \
"""
    &lt;p&gt;
        &lt;strong&gt;Name:&lt;/strong&gt; Pasan &lt;br/&gt;
        &lt;strong&gt;Surname: &lt;/strong&gt; Wijesingher &lt;br/&gt;                    
        &lt;strong&gt;Former/AKA Name:&lt;/strong&gt; No Former/AKA Name &lt;br/&gt;                    
        &lt;strong&gt;Gender:&lt;/strong&gt; Male &lt;br/&gt;
        &lt;strong&gt;Language Fluency:&lt;/strong&gt; ENGLISH &lt;br/&gt;                    
    &lt;/p&gt;
"""

soup = bs(data)
# Get the text on the html through BeautifulSoup
text = soup.get_text()

# parsing the text
lines = text.splitlines()
for line in lines:
    # check if line has ':', if it doesn't, move to the next line
    if line.find(':') == -1: 
        continue    
    # split the string at ':'
    parts = line.split(':')

    # You can add more tests here like
    # if len(parts) != 2:
    #     continue

    # stripping whitespace
    for i in range(len(parts)):
        parts[i] = parts[i].strip()    
    # adding the vaules to a dictionary
    dic[parts[0]] = parts[1]
    # printing the data after processing
    print '%16s %20s' % (parts[0],parts[1])
</snippet></ROW><ROW><id>15037397</id><snippet>class=input</snippet></ROW><ROW><id>15037397</id><snippet>id=10</snippet></ROW><ROW><id>15037397</id><snippet>from bs4 import BeautifulSoup as bs

c_addr = []
id_addr = []
data = \
"""
&lt;h2&gt;Primary Location&lt;/h2&gt;
&lt;div class="address" id="10"&gt;
    &lt;p&gt;
       No. 4&lt;br&gt;
       Private Drive,&lt;br&gt;
       Sri Lanka ON  K7L LK &lt;br&gt;
"""
soup = bs(data)

for i in soup.find_all('div'):
    # get data using "class" attribute
    addr = ""
    if i.get("class")[0] == u'address': # unicode string
        text = i.get_text()
        for line in text.splitlines(): # line-wise
            line = line.strip() # remove whitespace
            addr += line # add to address string
        c_addr.append(addr)

    # get data using "id" attribute
    addr = ""
    if int(i.get("id")) == 10: # integer
        text = i.get_text()
        # same processing as above
        for line in text.splitlines():
            line = line.strip()
            addr += line
        id_addr.append(addr)

print "id_addr"
print id_addr
print "c_addr"
print c_addr
</snippet></ROW><ROW><id>15037504</id><snippet>device.press('KEYCODE_TAB', MonkeyDevice.DOWN_AND_UP)
</snippet></ROW><ROW><id>15037504</id><snippet>vc = ViewClient(*ViewClient.connectToDeviceOrExit())
newAlliance = vc.findViewByIdOrRaise('id/new_alliance')
newAlliance.type('Legion of Anarchy')
allianceLeader = vc.findViewByIdOrRaise('id/alliance_leader')
allianceLeader.type('DeathAngel')
</snippet></ROW><ROW><id>15037998</id><snippet>--listen</snippet></ROW><ROW><id>15037998</id><snippet>uwsgi</snippet></ROW><ROW><id>15037998</id><snippet>top</snippet></ROW><ROW><id>15037998</id><snippet>uswgi</snippet></ROW><ROW><id>15037998</id><snippet>--listen</snippet></ROW><ROW><id>15037998</id><snippet>top</snippet></ROW><ROW><id>15038071</id><snippet>import re
import csv

strings = ("Frequency", "Symbol", "Polar", "Mod", "FEC", "RF", "Signal", "Carrier", "BitRate")  
sat_raw = open('/BLScan/reports/1520.txt', 'r') 
sat_out = open('1520out.txt', 'w')
csv_writer = csv.writer(sat_out)
csv_output = []
for line in sat_raw:
    if any(s in line for s in strings): 
        try:
            m = re.match(r'^.*:\s+(\S+)', line)
            value = m.groups()[0]
            # Attempt to convert to int, thus removing the decimal part
            value = int(float(value))
        except ValueError:
            pass # Ignore conversion
        except AttributeError:
            pass # Ignore case when m is None (no match)
        csv_output.append(value)
    elif line.startswith('TP N'):
        # Before we start a new set of values, write out the old set
        if csv_output:
            csv_writer.writerow(csv_output)
            csv_output=[]

# If we reach the end of the file, don't miss the last set of values
if csv_output:
    csv_writer.writerow(csv_output)

sat_raw.close()
sat_out.close()
</snippet></ROW><ROW><id>15038071</id><snippet>value = int(...)</snippet></ROW><ROW><id>15038142</id><snippet>chain</snippet></ROW><ROW><id>15038142</id><snippet>&gt;&gt;&gt; l=[[[(1, 4)]], [[(1, 3)], [(5, 4)]], [[(1, 2)]]]
&gt;&gt;&gt; [e for e in chain(*chain(*l)) if e[0] == 1]
[(1, 4), (1, 3), (1, 2)]
</snippet></ROW><ROW><id>15038477</id><snippet>sparse</snippet></ROW><ROW><id>15038477</id><snippet>DictVectorizer.vocabulary</snippet></ROW><ROW><id>15038477</id><snippet>fit</snippet></ROW><ROW><id>15038501</id><snippet>.gitignore</snippet></ROW><ROW><id>15038501</id><snippet>$ cat &gt; .gitignore
venv
*.pyc
&lt;press ctrl-d&gt;
$
</snippet></ROW><ROW><id>15038571</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>15038571</id><snippet>django.core.context_processors.csrf</snippet></ROW><ROW><id>15038571</id><snippet>HttpResponse</snippet></ROW><ROW><id>15038571</id><snippet>search</snippet></ROW><ROW><id>15038571</id><snippet>def search(request):
    if request.method == POST:
        print 'request.post=', request.POST
        print 'request.get=', request.GET
        print 'request.method=', request.META.get('REQUEST_METHOD')
        if 'q' in request.GET:
            message = 'You searched for :%r' % request.POST['q']
        else:
            message = 'You submitted an empty form'
        return render(request, 'search_form.html', {'message': message})
    return render(request, 'search_form.html')
</snippet></ROW><ROW><id>15038571</id><snippet>{{ message }}</snippet></ROW><ROW><id>15038571</id><snippet>search_form.html</snippet></ROW><ROW><id>15038571</id><snippet>&lt;body&gt;
    {% if message %}
        &lt;div&gt; {{ message }} &lt;/div&gt;
    {% else %}
        &lt;form action="/polls/search/" method="post"&gt;{% csrf_token %}
            &lt;input type="text" name="q"&gt;
            &lt;input type="submit" value="Search"&gt;
        &lt;/form&gt;
    {% endif %}
&lt;/body&gt;
</snippet></ROW><ROW><id>15038638</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15038638</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15038638</id><snippet>url = 'http://acl.ldc.upenn.edu/P/P96/P96-1004.pdf'
res = urllib2.urlopen(url)
with open(fileName, 'wb') as fp:
    fp.write(res.read())
</snippet></ROW><ROW><id>15038638</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15038638</id><snippet>reqSoup = BeautifulSoup('http://acl.ldc.upenn.edu/P/P96/P96-1004.pdf')
</snippet></ROW><ROW><id>15038638</id><snippet>reqSoup</snippet></ROW><ROW><id>15038638</id><snippet>&lt;html&gt;&lt;body&gt;&lt;p&gt;http://acl.ldc.upenn.edu/P/P96/P96-1004.pdf&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>15038670</id><snippet>$ ssh-add ~/.ssh/id_rsa
</snippet></ROW><ROW><id>15038670</id><snippet>$ ssh-add ~/.ssh/github_rsa
</snippet></ROW><ROW><id>15038734</id><snippet>d</snippet></ROW><ROW><id>15038734</id><snippet>start</snippet></ROW><ROW><id>15038734</id><snippet>+=</snippet></ROW><ROW><id>15038734</id><snippet>=</snippet></ROW><ROW><id>15038734</id><snippet>d</snippet></ROW><ROW><id>15038734</id><snippet>d</snippet></ROW><ROW><id>15038734</id><snippet>d</snippet></ROW><ROW><id>15038734</id><snippet>for x in d:
    print s[start:start+x]
    start += x
</snippet></ROW><ROW><id>15039054</id><snippet>a = [('when', 3), ('why', 4), ('throw', 9), ('send', 15), ('you', 1)]
b = ['the', 'when', 'send', 'we', 'us']
filtered = [i for i in a if not i[0] in b]

&gt;&gt;&gt;print(filtered)
[('why', 4), ('throw', 9), ('you', 1)]
</snippet></ROW><ROW><id>15039662</id><snippet>open()</snippet></ROW><ROW><id>15039662</id><snippet>os.open()</snippet></ROW><ROW><id>15039662</id><snippet>os</snippet></ROW><ROW><id>15039662</id><snippet>os.open(filename, "w")</snippet></ROW><ROW><id>15039662</id><snippet>os.open</snippet></ROW><ROW><id>15039662</id><snippet>open(filename, "w")</snippet></ROW><ROW><id>15039662</id><snippet>open()</snippet></ROW><ROW><id>15039662</id><snippet>os.open()</snippet></ROW><ROW><id>15039662</id><snippet>os.fdopen()</snippet></ROW><ROW><id>15039662</id><snippet>open()</snippet></ROW><ROW><id>15039662</id><snippet>os.open()</snippet></ROW><ROW><id>15039662</id><snippet>os.read()</snippet></ROW><ROW><id>15039662</id><snippet>os.write()</snippet></ROW><ROW><id>15039662</id><snippet>os.fdopen()</snippet></ROW><ROW><id>15039662</id><snippet>O_EXCL</snippet></ROW><ROW><id>15039662</id><snippet>open(2)</snippet></ROW><ROW><id>15039662</id><snippet>os.fdopen()</snippet></ROW><ROW><id>15039662</id><snippet>pipe()</snippet></ROW><ROW><id>15039662</id><snippet>dup()</snippet></ROW><ROW><id>15039662</id><snippet>open</snippet></ROW><ROW><id>15039662</id><snippet>os.open()</snippet></ROW><ROW><id>15039662</id><snippet>os.fdopen()</snippet></ROW><ROW><id>15039662</id><snippet># equivalent to open(filename, "r")
f = os.fdopen(os.open(filename, os.O_RDONLY))
</snippet></ROW><ROW><id>15039682</id><snippet>def first_read():
    codecs.open(file, 'r', 'utf8').readlines()

def line_by_line():
    for i in codecs.open(file, 'r', 'utf8'):
        pass

def at_once():
    for i in codecs.open(file, 'r', 'utf8').readlines():
        pass

first_read()
cProfile.run('line_by_line()')
cProfile.run('at_once()')
</snippet></ROW><ROW><id>15039682</id><snippet>         366959 function calls in 1.762 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    1.762    1.762 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 codecs.py:322(__init__)
        1    0.000    0.000    0.000    0.000 codecs.py:395(__init__)
    14093    0.087    0.000    0.131    0.000 codecs.py:424(read)
    57448    0.285    0.000    0.566    0.000 codecs.py:503(readline)
    57448    0.444    0.000    1.010    0.000 codecs.py:612(next)
        1    0.000    0.000    0.000    0.000 codecs.py:651(__init__)
    57448    0.381    0.000    1.390    0.000 codecs.py:681(next)
        1    0.000    0.000    0.000    0.000 codecs.py:686(__iter__)
        1    0.000    0.000    0.000    0.000 codecs.py:841(open)
        1    0.372    0.372    1.762    1.762 test.py:9(line_by_line)
    13316    0.011    0.000    0.023    0.000 utf_8.py:15(decode)
        1    0.000    0.000    0.000    0.000 {_codecs.lookup}
    27385    0.027    0.000    0.027    0.000 {_codecs.utf_8_decode}
    98895    0.011    0.000    0.011    0.000 {len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
    13316    0.099    0.000    0.122    0.000 {method 'endswith' of 'unicode' objects}
       27    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}
    14069    0.027    0.000    0.027    0.000 {method 'read' of 'file' objects}
    13504    0.020    0.000    0.020    0.000 {method 'splitlines' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {open}
</snippet></ROW><ROW><id>15039682</id><snippet>         15 function calls in 0.023 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.023    0.023 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 codecs.py:322(__init__)
        1    0.000    0.000    0.000    0.000 codecs.py:395(__init__)
        1    0.000    0.000    0.003    0.003 codecs.py:424(read)
        1    0.000    0.000    0.014    0.014 codecs.py:576(readlines)
        1    0.000    0.000    0.000    0.000 codecs.py:651(__init__)
        1    0.000    0.000    0.014    0.014 codecs.py:677(readlines)
        1    0.000    0.000    0.000    0.000 codecs.py:841(open)
        1    0.009    0.009    0.023    0.023 test.py:13(at_once)
        1    0.000    0.000    0.000    0.000 {_codecs.lookup}
        1    0.003    0.003    0.003    0.003 {_codecs.utf_8_decode}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.001    0.001    0.001    0.001 {method 'read' of 'file' objects}
        1    0.010    0.010    0.010    0.010 {method 'splitlines' of 'unicode' objects}
        1    0.000    0.000    0.000    0.000 {open}
</snippet></ROW><ROW><id>15039953</id><snippet>all_classes</snippet></ROW><ROW><id>15039953</id><snippet>clf</snippet></ROW><ROW><id>15039953</id><snippet>LogisticRegression</snippet></ROW><ROW><id>15039953</id><snippet>from itertools import repeat

# determine the classes that were not present in the training set;
# the ones that were are listed in clf.classes_.
classes_not_trained = set(clf.classes_).symmetric_difference(all_classes)

# the order of classes in predict_proba's output matches that in clf.classes_.
prob = clf.predict_proba(test_samples)
for row in prob:
    prob_per_class = (zip(clf.classes_, prob)
                    + zip(classes_not_trained, repeat(0.)))
</snippet></ROW><ROW><id>15039953</id><snippet>(cls, prob)</snippet></ROW><ROW><id>15039960</id><snippet>In [24]: value = [17, 18, 19, 0, 1]

In [25]: valueIndex = range(len(value))

In [26]: valueIndex
Out[26]: [0, 1, 2, 3, 4]

# Get the valueRemapped in float format
In [27]: valueRemapped = [float(x)/valueIndex[-1] if x &gt; 0 else x for x in valueIndex]

In [28]: valueRemapped
Out[28]: [0, 0.25, 0.5, 0.75, 1.0]

# Zip the two lists
In [29]: tempresult = zip(value, valueRemapped)

In [30]: tempresult
Out[30]: [(17, 0), (18, 0.25), (19, 0.5), (0, 0.75), (1, 1.0)]

# Sort the lists based on value list
In [31]: tempresult.sort(key=operator.itemgetter(0))

In [32]: tempresult
Out[32]: [(0, 0.75), (1, 1.0), (17, 0), (18, 0.25), (19, 0.5)]

# print the corresponding data
In [33]: [x[1] for x in tempresult]
Out[33]: [0.75, 1.0, 0, 0.25, 0.5]
</snippet></ROW><ROW><id>15040038</id><snippet>def nextFrame(self):
    ## load the image from file

    self.appStatus.imageQt = ImageQt.ImageQt(image)
    pixMap = QtGui.QPixmap.fromImage(self.appStatus.imageQt)

    ## update the QGraphicsView
</snippet></ROW><ROW><id>15040070</id><snippet>sklearn.linear_model.SGDClassifier</snippet></ROW><ROW><id>15040070</id><snippet>loss="log"</snippet></ROW><ROW><id>15040070</id><snippet>SGDClassifier</snippet></ROW><ROW><id>15040070</id><snippet>LogisticRegression</snippet></ROW><ROW><id>15040070</id><snippet>OneVsRestClassifier</snippet></ROW><ROW><id>15040070</id><snippet># you'll have to set a few other options to get good estimates,
# in particular n_iterations, but this should get you going
lr = SGDClassifier(loss="log")
</snippet></ROW><ROW><id>15040070</id><snippet>partial_fit</snippet></ROW><ROW><id>15040070</id><snippet>fit</snippet></ROW><ROW><id>15040070</id><snippet>import numpy as np
classes = np.unique(["ham", "spam", "eggs"])

for xs, ys in minibatches:
    lr.partial_fit(xs, ys, classes=classes)
</snippet></ROW><ROW><id>15040070</id><snippet>classes</snippet></ROW><ROW><id>15040179</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>15040179</id><snippet>key=value&amp;key2=value2
</snippet></ROW><ROW><id>15040179</id><snippet>var postData = encodeURIComponent('user') + '=' + encodeURIComponent(user);
xhr.send(postData);
</snippet></ROW><ROW><id>15040179</id><snippet>$_POST['user']</snippet></ROW><ROW><id>15040179</id><snippet>form['user'].value</snippet></ROW><ROW><id>15040179</id><snippet>form['user']</snippet></ROW><ROW><id>15040179</id><snippet>str</snippet></ROW><ROW><id>15040179</id><snippet>+ 1</snippet></ROW><ROW><id>15040182</id><snippet>tablesUsed()
</snippet></ROW><ROW><id>15040182</id><snippet>def tablesUsed():
    return [int(x) for x in input("Please choose which multiplication tables you   wish\nto practice, then type them like this: 2 5 10.\n").split()]
</snippet></ROW><ROW><id>15040182</id><snippet>input()</snippet></ROW><ROW><id>15040182</id><snippet>raw_input()</snippet></ROW><ROW><id>15040182</id><snippet>raw_input()</snippet></ROW><ROW><id>15040182</id><snippet>input()</snippet></ROW><ROW><id>15040371</id><snippet>open()</snippet></ROW><ROW><id>15040371</id><snippet>/dev/shm</snippet></ROW><ROW><id>15040371</id><snippet>/dev/shm/foo.mp3</snippet></ROW><ROW><id>15040546</id><snippet>rowdata</snippet></ROW><ROW><id>15040546</id><snippet>for row, o in enumerate(xls_values):
    sheet.write(row + 1, 0, o.my_first_field, date_style)
    sheet.write(row + 1, 1, o.my_second_field, val, currency_style)
    sheet.write(row + 1, 2, o.my_category_field.name, val) # assuming name is what you want
</snippet></ROW><ROW><id>15040724</id><snippet>STATIC_ROOT   = os.path.join(PROJECT_PATH,'static').replace('\\', '/'),
</snippet></ROW><ROW><id>15040724</id><snippet>,</snippet></ROW><ROW><id>15040798</id><snippet>wxMessageBox()</snippet></ROW><ROW><id>15040798</id><snippet>wx.CallAfter()</snippet></ROW><ROW><id>15040910</id><snippet>[0,1,4,None,None,None,None,None,None]
[None,None,None,3,2,4,None,None,None]
[None,None,None,None,None,None,2,1,0]
</snippet></ROW><ROW><id>15040996</id><snippet>re.sub(r"(?:ate|ize|ify|able)$", "", "terrorize")
</snippet></ROW><ROW><id>15041018</id><snippet>results = []
database = []
for line in open("database/db.hdb"):
    line = line.split(':')
    #You could then manage database in chunks?
    database.append(line)
    if len(database) &gt; MAX:
        #dosomething with database list so far to get result
        results.append(process_database(database))
        database = []
#do something now with individual results to make one result
combine_results(results)
</snippet></ROW><ROW><id>15041191</id><snippet>globals()</snippet></ROW><ROW><id>15041191</id><snippet>from commands.shVersionCmd import shVersionCmd
from commands.shVRFCmd import shVRFCmd

# An explicit list of allowed commands to prevent malicious activity.
commands = ['shVersionCmd', 'shVRFCmd']

def CommandFactory(commandnode):
    cmd = commandnode.attrib['name']
    if cmd in commands:
        fn = globals()[cmd]
        fn(commandnode)
</snippet></ROW><ROW><id>15041301</id><snippet>import os

for f in os.listdir('.'):
    print "%s: %s" % (f, getLength(f))
</snippet></ROW><ROW><id>15041350</id><snippet>instance.__table__.columns.keys()</snippet></ROW><ROW><id>15041350</id><snippet>instance</snippet></ROW><ROW><id>15041350</id><snippet>for instance in SESSION.query(SampleClass).filter(SampleClass.id == 2): 
  for colname in instance.__table__.columns.keys():
    setattr(instance, colname, 'text_to_insert')
</snippet></ROW><ROW><id>15041586</id><snippet>&gt;&gt;&gt; '\x00'
'\x00'
&gt;&gt;&gt; len('\x00')
1
&gt;&gt;&gt; '\x65'
'e'
</snippet></ROW><ROW><id>15041586</id><snippet>\x00</snippet></ROW><ROW><id>15041586</id><snippet>e</snippet></ROW><ROW><id>15041878</id><snippet>&gt;&gt;&gt; a = ["Three","Four","Five","Six"]
&gt;&gt;&gt; b = range(3,7)
&gt;&gt;&gt; zip(a,b)
[('Three', 3), ('Four', 4), ('Five', 5), ('Six', 6)]
&gt;&gt;&gt; [term for pair in zip(a,b) for term in pair]
['Three', 3, 'Four', 4, 'Five', 5, 'Six', 6]
</snippet></ROW><ROW><id>15041878</id><snippet>itertools.chain</snippet></ROW><ROW><id>15041878</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(zip(a,b)))
['Three', 3, 'Four', 4, 'Five', 5, 'Six', 6]
</snippet></ROW><ROW><id>15041911</id><snippet>playAgain</snippet></ROW><ROW><id>15041911</id><snippet>withTimer</snippet></ROW><ROW><id>15041911</id><snippet>def withTimer():
    playAgain = "yes"

    # ...

    while playAgain == "yes":
        # ....

        playAgain()   # this is now a string, not the function
</snippet></ROW><ROW><id>15042030</id><snippet>P.isdigit()</snippet></ROW><ROW><id>15042030</id><snippet>''.isdigit()</snippet></ROW><ROW><id>15042101</id><snippet>subprocess</snippet></ROW><ROW><id>15042101</id><snippet>import subprocess

output = subprocess.check_output('fst-mor', 'NOUN.A')
</snippet></ROW><ROW><id>15042101</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>15042101</id><snippet>stdin</snippet></ROW><ROW><id>15042101</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>15042101</id><snippet>subprocess</snippet></ROW><ROW><id>15042101</id><snippet>proc = subprocess.Popen(['fst-mor', 'NOUN.A'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
output, err = proc.communicate('INPUT_A_STRING_HERE')
</snippet></ROW><ROW><id>15042101</id><snippet>pexpect</snippet></ROW><ROW><id>15042101</id><snippet>import pexpect

py = pexpect.spawn('fst-mor NOUN.A')
py.expect('analyze&gt;')
py.send('INPUT_A_STRING_HERE')
output = py.read()
py.close()
</snippet></ROW><ROW><id>15042171</id><snippet>SearchIndex</snippet></ROW><ROW><id>15042171</id><snippet>model_attr</snippet></ROW><ROW><id>15042171</id><snippet>SearchIndex</snippet></ROW><ROW><id>15042171</id><snippet>SearchIndex</snippet></ROW><ROW><id>15042171</id><snippet>class Note(models.Model):
    title = models.CharField(max_length=40)
    body = models.TextField()

class Memo(models.Model):
    subject = models.CharField(max_length=50)
    content = models.TextField()
    author = models.ForeignKey(StaffMember)
</snippet></ROW><ROW><id>15042171</id><snippet>class NoteIndex(indexes.SearchIndex, indexes.Indexable):
    body = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='title')

    def get_model(self):
        return Note

class MemoIndex(indexes.SearchIndex, indexes.Indexable):
    content = indexes.CharField(document=True, use_template=True)
    subject = indexes.CharField(model_attr='subject')

    def get_model(self):
        return Memo
</snippet></ROW><ROW><id>15042171</id><snippet>subject</snippet></ROW><ROW><id>15042171</id><snippet>Note</snippet></ROW><ROW><id>15042171</id><snippet>body</snippet></ROW><ROW><id>15042171</id><snippet>class NoteIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='title')

    def get_model(self):
        return Note

class MemoIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    title = indexes.CharField(model_attr='subject')

    def get_model(self):
        return Memo
</snippet></ROW><ROW><id>15042171</id><snippet>SearchIndex</snippet></ROW><ROW><id>15042171</id><snippet>SeachIndex</snippet></ROW><ROW><id>15042171</id><snippet>SearchIndex</snippet></ROW><ROW><id>15042171</id><snippet>SearchField</snippet></ROW><ROW><id>15042171</id><snippet>model_attr</snippet></ROW><ROW><id>15042171</id><snippet>text</snippet></ROW><ROW><id>15042171</id><snippet>model_attr</snippet></ROW><ROW><id>15042259</id><snippet>def change_background(self, *args):
        self.canvas.before.clear()#&lt;- clear previous instructions
        with self.canvas.before:
            if self.bg:
                Color(0.2, 0.2, 0.2, mode = 'rgb')
            else:
                Color(0.1, 0.1, 0.1, mode = 'rgb')
            Rectangle(pos = self.pos, size = self.size)
</snippet></ROW><ROW><id>15042259</id><snippet>import kivy
kivy.require('1.0.7')

from kivy.app import App
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.properties import ObjectProperty, BooleanProperty
from kivy.lang import Builder

Builder.load_string('''
&lt;Scroller&gt;
    # root is Scroller here
    # create a new ObjectProperty in kv that holds the ref to Gridlayout
    # so you can access the instance in python code
    view: glayout
    GridLayout:
        id: glayout
        cols: 1
        size_hint: (1, None)
        height: self.minimum_height

&lt;Field&gt;
    canvas.before:
        Color:
            rgba: (0.2, 0.2, 0.2, 1) if self.bg else (0.1, 0.1, 0.1, 1)
        Rectangle:
            # binding properties is done implicitly and instructions aren't
            # piled up while doing that.
            pos: self.pos
            # self here refers to Field as `self` is supposed to refer to the
            # Widget not the drawing instruction
            size: self.size
    rows: 1
    padding: 10
    size: (0, 60)
    size_hint: (1, None)
    Label:
        text: root.name
    Button:
        text: 'test button'
        size: (200, 0)
        size_hint: (None, 1)
''')


class Main(App):

    def build(self):
        self.root = GridLayout(rows = 1)
        self.root.add_widget(Scroller())
        return self.root


class Scroller(ScrollView):
    def __init__(self, **kwargs):
        super(Scroller, self).__init__(**kwargs)
        for i in range(20):
            # access self.view that was set in kv
            self.view.add_widget(
                                Field(
                                    name = 'Test field {}'.format(i),
                                    bg = i%2 is 0))

class Field(GridLayout):

    # use  kivy's Properties so it becomes easier to observe and apply changes
    # as a plus these can also be directly used in kv. As a advantage of using this now
    # you can change name and bg dynamically and the changes should be reflected on
    # screen
    name = ObjectProperty('Test field uninitialized')

    bg = BooleanProperty(False)


if __name__ in ('__main__', '__android__'):
    app = Main()
    app.run()
</snippet></ROW><ROW><id>15042327</id><snippet>import flask
import time

app = flask.Flask(__name__)

@app.route('/yield')
def index():
    def inner():
        for x in range(100):
            time.sleep(1)
            yield '%s&lt;br/&gt;\n' % x
    return flask.Response(inner(), mimetype='text/html')  # text/html is required for most browsers to show the partial page immediately

app.run(debug=True)
</snippet></ROW><ROW><id>15042385</id><snippet>__init__</snippet></ROW><ROW><id>15042385</id><snippet>a=[]</snippet></ROW><ROW><id>15042385</id><snippet>def initialize(self):
    self.a=[]
</snippet></ROW><ROW><id>15042385</id><snippet>def __init__(self)</snippet></ROW><ROW><id>15042385</id><snippet>initialize</snippet></ROW><ROW><id>15042458</id><snippet>telescope.date = '2013/1/18 05:04:14'
</snippet></ROW><ROW><id>15042458</id><snippet>62:27:19.0 349:26:19.4
</snippet></ROW><ROW><id>15042551</id><snippet>ltx = a.to_latex().replace('\n', ' ')
plt.text(9, 3.4, ltx, size=12)
</snippet></ROW><ROW><id>15042805</id><snippet>undefined variable OpenPrinter</snippet></ROW><ROW><id>15042805</id><snippet>win32print.OpenPrinter()</snippet></ROW><ROW><id>15042916</id><snippet>return "break"</snippet></ROW><ROW><id>15042916</id><snippet>...
    my_listbox.bind("&lt;1&gt;", self.no_op)
    my_listbox.bind("&lt;Double-1&gt;", self.no_op)
...
def no_op(self, event):
    return "break"
</snippet></ROW><ROW><id>15042930</id><snippet>http://tulip-control.sourceforge.net/doc/_modules/prop2part.html</snippet></ROW><ROW><id>15042944</id><snippet>ALL_CAPS</snippet></ROW><ROW><id>15042944</id><snippet>@@double_at</snippet></ROW><ROW><id>15042944</id><snippet>@single_at</snippet></ROW><ROW><id>15042944</id><snippet>get_instance_variable</snippet></ROW><ROW><id>15042944</id><snippet>$starts_with_dollar</snippet></ROW><ROW><id>15043119</id><snippet>get_time()</snippet></ROW><ROW><id>15043119</id><snippet>time = self.get_time()
</snippet></ROW><ROW><id>15043119</id><snippet>str()</snippet></ROW><ROW><id>15043119</id><snippet>&gt;&gt;&gt; from time import strftime, gmtime
&gt;&gt;&gt; class MainPage():
...     def get_time(self):
...         return strftime('%U %A',gmtime())
... 
&gt;&gt;&gt; mp = MainPage()
&gt;&gt;&gt; mp.get_time
&lt;bound method MainPage.get_time of &lt;__main__.MainPage instance at 0x1031c7320&gt;&gt;
&gt;&gt;&gt; mp.get_time()
'07 Saturday'
</snippet></ROW><ROW><id>15043769</id><snippet>try:
    if not db.connect(UnivConf['DBHT'],UnivConf['DBUN'],UnivConf['DBPW'],UnivConf['DBDB'])
        # Do something

except _mysql_exceptions.OperationalError as e:
    print "Caught an exception : " + str(e.message)
    print "Something blah blah..."

finally:
    print "Done"
</snippet></ROW><ROW><id>15043840</id><snippet>object</snippet></ROW><ROW><id>15043840</id><snippet>a=Bag
</snippet></ROW><ROW><id>15043840</id><snippet>Bag</snippet></ROW><ROW><id>15043840</id><snippet>a</snippet></ROW><ROW><id>15043840</id><snippet>Bag</snippet></ROW><ROW><id>15043840</id><snippet>a.add('23')
</snippet></ROW><ROW><id>15043840</id><snippet>add</snippet></ROW><ROW><id>15043840</id><snippet>self</snippet></ROW><ROW><id>15043840</id><snippet>x</snippet></ROW><ROW><id>15043840</id><snippet>TypeError: add() missing 1 required positional argument: 'x'
</snippet></ROW><ROW><id>15043840</id><snippet>&gt;&gt;&gt; a = Bag()
&gt;&gt;&gt; a.add('23')
&gt;&gt;&gt; a.data
['23']
</snippet></ROW><ROW><id>15044612</id><snippet>timezone</snippet></ROW><ROW><id>15044612</id><snippet>tzinfo</snippet></ROW><ROW><id>15044612</id><snippet>datetime</snippet></ROW><ROW><id>15044612</id><snippet>tzinfo</snippet></ROW><ROW><id>15044612</id><snippet># -*- coding: iso-8859-1 -*-
import datetime
import timezone  # concrete tzinfo subclass based on the Python docs
import math
from Sun import Sun

__all__ = ['getsuninfo', 'Place']

class Place(object):
    def __init__(self, name, coords, tz=timezone.Pacific):
        self.name = name        # string
        self.coords = coords    # tuple (E/W long, N/S lat)
        self.tz = tz            # tzinfo constant

def _hoursmins(hours):
    """Convert floating point decimal time in hours to integer hrs,mins"""
    frac,h = math.modf(hours)
    m = round(frac*60, 0)
    if m == 60: # rounded up to next hour
        h += 1; m = 0
    return int(h),int(m)

def _ymd(date):
    """Return y,m,d from datetime object as tuple"""
    return date.timetuple()[:3]

def getsuninfo(location, date=None):
    """Return local datetime of sunrise, sunset, and length of day in hrs,mins)"""
    if date == None:
        querydate = datetime.date.today()
    else: # date given should be datetime instance
        querydate = date

    args = _ymd(querydate) + location.coords
    utcrise, utcset = Sun().sunRiseSet(*args)
    daylength = Sun().dayLength(*args)
    hrs,mins = _hoursmins(daylength)

    risehour, risemin = _hoursmins(utcrise)
    sethour, setmin   = _hoursmins(utcset)

    # convert times to timedelta values (ie from midnight utc of the date)
    midnight = datetime.datetime(tzinfo=timezone.utc, *_ymd(querydate))
    deltarise = datetime.timedelta(hours=risehour, minutes=risemin)
    utcdatetimerise = midnight+deltarise
    deltaset = datetime.timedelta(hours=sethour, minutes=setmin)
    utcdatetimeset  = midnight+deltaset

    # convert results from UTC time to local time of location
    localrise = utcdatetimerise.astimezone(location.tz)
    localset  = utcdatetimeset.astimezone(location.tz)

    return localrise, localset, hrs, mins

if __name__ == "__main__":
    import datetime, timezone

    def unittest(location, testdate):
        risetime, settime, hrs, mins = getsuninfo(location, testdate)

        print "Location:", location.name
        print "Date:", testdate.strftime("%a %x")
        print risetime.strftime("Sunrise %I:%M %p"), settime.strftime("- Sunset %I:%M %p (%Z)")
        print "daylight: %d:%02d" % (hrs,mins)
        print

    place = Place("My House", (-121.990278, 47.204444), timezone.Pacific)

    # test dates just before and after DST transitions
    print "pre 2007"
    print "========="
    unittest(place, datetime.date(2006, 4, 1))
    unittest(place, datetime.date(2006, 4, 2))
    unittest(place, datetime.date(2006, 10, 28))
    unittest(place, datetime.date(2006, 10, 29))

    print "2007"
    print "========="
    unittest(place, datetime.date(2007, 3, 10))
    unittest(place, datetime.date(2007, 3, 11))
    unittest(place, datetime.date(2007, 11, 3))
    unittest(place, datetime.date(2007, 11, 4))
</snippet></ROW><ROW><id>15044790</id><snippet>for i, line in enumerate(sys.stdin, -4):
    if i&gt;=0: print line,
</snippet></ROW><ROW><id>15045172</id><snippet>from django.db.models import Q
expense.objects.filter(
    Q(name__icontains=q) | Q(amount__icontains=q) | Q(category__icontains=q)
)
</snippet></ROW><ROW><id>15045255</id><snippet>from collections import defaultdict

filetypecounter = defaultdict(int)
filetypecounter[filetype] += 1
</snippet></ROW><ROW><id>15045255</id><snippet>from collections import Counter

filetypecounter = Counter()
filetypecounter.update([filetype])
</snippet></ROW><ROW><id>15045255</id><snippet>dict</snippet></ROW><ROW><id>15045255</id><snippet>filetypecounter = {}
filetypecounter[filetype] = filetypecounter.get(filetype, 0) + 1
</snippet></ROW><ROW><id>15045487</id><snippet>class ColorMap:
    startcolor = ()
    endcolor = ()
    startmap = 0
    endmap = 0
    colordistance = 0
    valuerange = 0
    ratios = []    

    def __init__(self, startcolor, endcolor, startmap, endmap):
        self.startcolor = np.array(startcolor)
        self.endcolor = np.array(endcolor)
        self.startmap = float(startmap)
        self.endmap = float(endmap)
        self.valuerange = float(endmap - startmap)
        self.ratios = (self.endcolor - self.startcolor) / self.valuerange

    def __getitem__(self, value):
        color = tuple(self.startcolor + (self.ratios * (value - self.startmap)))
        return (int(color[0]), int(color[1]), int(color[2]))
</snippet></ROW><ROW><id>15045497</id><snippet>    if self.isEmpty():
        self._header.setNext(temp)
        self._trailer.setPrevious(temp)
</snippet></ROW><ROW><id>15045497</id><snippet>temp</snippet></ROW><ROW><id>15045654</id><snippet>reduce</snippet></ROW><ROW><id>15045654</id><snippet>[f]</snippet></ROW><ROW><id>15045654</id><snippet>return reduce(compose1, [f])</snippet></ROW><ROW><id>15045654</id><snippet>f</snippet></ROW><ROW><id>15045654</id><snippet>compose1</snippet></ROW><ROW><id>15045654</id><snippet>[f, f]</snippet></ROW><ROW><id>15045654</id><snippet>  compose(f, f)
= lambda x: f(f(x))
</snippet></ROW><ROW><id>15045654</id><snippet>[f, f, f]</snippet></ROW><ROW><id>15045654</id><snippet>  compose(compose(f, f), f)
= lambda x: f(f(f(x)))
</snippet></ROW><ROW><id>15045654</id><snippet>f</snippet></ROW><ROW><id>15045654</id><snippet>[f] * n</snippet></ROW><ROW><id>15045654</id><snippet>n</snippet></ROW><ROW><id>15045654</id><snippet>f</snippet></ROW><ROW><id>15045703</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>15045703</id><snippet>&lt;span tal:omit-tag="" 
      tal:repeat="line text_with_newlines.splitlines()"&gt;
  ${line}&lt;br /&gt;
&lt;/span&gt;
</snippet></ROW><ROW><id>15045703</id><snippet>str.splitlines()</snippet></ROW><ROW><id>15045703</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>15045703</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>15045703</id><snippet>structure:</snippet></ROW><ROW><id>15046016</id><snippet>global v</snippet></ROW><ROW><id>15046016</id><snippet>print_v</snippet></ROW><ROW><id>15046096</id><snippet>self</snippet></ROW><ROW><id>15046096</id><snippet>__import__()</snippet></ROW><ROW><id>15046096</id><snippet>import language_class

turkish = language_class.language("Turkish", turkish_latin, turkish_grammar).turkish
</snippet></ROW><ROW><id>15046171</id><snippet>from math import floor

def build_rfc3339_phrase(datetime_obj):
    datetime_phrase = datetime_obj.strftime('%Y-%m-%dT%H:%M:%S')
    us = datetime_obj.strftime('%f')

    seconds = datetime_obj.utcoffset().total_seconds()

    if seconds is None:
        datetime_phrase += 'Z'
    else:
        # Append: decimal, 6-digit uS, -/+, hours, minutes
        datetime_phrase += ('.%.6s%s%02d:%02d' % (
                            us,
                            ('-' if seconds &lt; 0 else '+'),
                            abs(int(floor(seconds / 3600))),
                            abs(seconds % 3600)
                            ))

    return datetime_phrase
</snippet></ROW><ROW><id>15046263</id><snippet>&gt;&gt;&gt; a = 'ZENOVW'
&gt;&gt;&gt; ''.join(sorted(a))
'ENOVWZ'
</snippet></ROW><ROW><id>15046298</id><snippet>test</snippet></ROW><ROW><id>15046298</id><snippet>melt</snippet></ROW><ROW><id>15046298</id><snippet>value_vars</snippet></ROW><ROW><id>15046298</id><snippet>In [15]: test['index'] = range(len(test) / 2) * 2
In [16]: test[:10]
Out[16]: 
          Name     variable  value  index
0  Iris-setosa  SepalLength    5.1      0
1  Iris-setosa  SepalLength    4.9      1
2  Iris-setosa  SepalLength    4.7      2
3  Iris-setosa  SepalLength    4.6      3
4  Iris-setosa  SepalLength    5.0      4
5  Iris-setosa  SepalLength    5.4      5
6  Iris-setosa  SepalLength    4.6      6
7  Iris-setosa  SepalLength    5.0      7
8  Iris-setosa  SepalLength    4.4      8
9  Iris-setosa  SepalLength    4.9      9

In [17]: test[-10:]
Out[17]: 
               Name    variable  value  index
290  Iris-virginica  SepalWidth    3.1    140
291  Iris-virginica  SepalWidth    3.1    141
292  Iris-virginica  SepalWidth    2.7    142
293  Iris-virginica  SepalWidth    3.2    143
294  Iris-virginica  SepalWidth    3.3    144
295  Iris-virginica  SepalWidth    3.0    145
296  Iris-virginica  SepalWidth    2.5    146
297  Iris-virginica  SepalWidth    3.0    147
298  Iris-virginica  SepalWidth    3.4    148
299  Iris-virginica  SepalWidth    3.0    149

In [18]: df = test.pivot(index='index', columns='variable', values='value')
In [19]: df['Name'] = test['Name']
In [20]: df[:10]
Out[20]: 
variable  SepalLength  SepalWidth         Name
index                                         
0                 5.1         3.5  Iris-setosa
1                 4.9         3.0  Iris-setosa
2                 4.7         3.2  Iris-setosa
3                 4.6         3.1  Iris-setosa
4                 5.0         3.6  Iris-setosa
5                 5.4         3.9  Iris-setosa
6                 4.6         3.4  Iris-setosa
7                 5.0         3.4  Iris-setosa
8                 4.4         2.9  Iris-setosa
9                 4.9         3.1  Iris-setosa

In [21]: (iris[["SepalLength", "SepalWidth", "Name"]] == df[["SepalLength", "SepalWidth", "Name"]]).all()
Out[21]: 
SepalLength    True
SepalWidth     True
Name           True
</snippet></ROW><ROW><id>15046341</id><snippet>func1()</snippet></ROW><ROW><id>15046341</id><snippet>func1()</snippet></ROW><ROW><id>15046341</id><snippet>func1()</snippet></ROW><ROW><id>15046341</id><snippet>sys.getrecursionlimit()</snippet></ROW><ROW><id>15046341</id><snippet>sys.setrecursionlimit()</snippet></ROW><ROW><id>15046341</id><snippet>dump</snippet></ROW><ROW><id>15046341</id><snippet>dumps</snippet></ROW><ROW><id>15046341</id><snippet>picke.dump()</snippet></ROW><ROW><id>15046341</id><snippet>def nestedness(struct):
    if isinstance(struct, list):
        return max([0] + [nestedness(i) for i in struct]) + 1
    if isinstance(struct, dict):
        return max([0] + [nestedness(i) for i in struct.values()])+1
    return 1
</snippet></ROW><ROW><id>15046341</id><snippet>sys.setrecursionlimit()</snippet></ROW><ROW><id>15046539</id><snippet>withdraw()</snippet></ROW><ROW><id>15046539</id><snippet>iconify()</snippet></ROW><ROW><id>15046539</id><snippet>deiconify()</snippet></ROW><ROW><id>15046539</id><snippet>withdraw()</snippet></ROW><ROW><id>15046539</id><snippet>from Tkinter import * # tkinter in Python 3

root = Tk()
root.withdraw()

top = Toplevel(root)
top.protocol("WM_DELETE_WINDOW", root.destroy)

but = Button(top, text='deiconify')
but['command'] = root.deiconify
but.pack()

root.mainloop()
</snippet></ROW><ROW><id>15046539</id><snippet>protocol()</snippet></ROW><ROW><id>15046539</id><snippet>destroy()</snippet></ROW><ROW><id>15046730</id><snippet>  for lines in chain(*infiles):
       fout.write(lines)
       if not lines.endswith('\n'):
           fout.write('\n')
</snippet></ROW><ROW><id>15046730</id><snippet>from itertools import chain


infiles = [open('{}_example.txt'.format(i+1), 'r') for i in xrange(100)]
with open('example.txt', 'w') as fout:
    for infile in infiles:
        fout.write(infile.read())
        fout.write('\n')
</snippet></ROW><ROW><id>15046740</id><snippet>bulk_create</snippet></ROW><ROW><id>15046740</id><snippet>AccessCode.objects.bulk_create([AccessCode() for i in range(100)])
</snippet></ROW><ROW><id>15046740</id><snippet>- The model’s save() method will not be called, and the pre_save and post_save signals will not be sent.
- It does not work with child models in a multi-table inheritance scenario.
- If the model’s primary key is an AutoField it does not retrieve and set the primary key attribute, as save() does.
</snippet></ROW><ROW><id>15046751</id><snippet>suds</snippet></ROW><ROW><id>15047057</id><snippet>re.sub('&lt;a[^&gt;]+&gt;(.*?)&lt;/a&gt;', '\\1', text)
</snippet></ROW><ROW><id>15047141</id><snippet>return y</snippet></ROW><ROW><id>15047141</id><snippet>n</snippet></ROW><ROW><id>15047141</id><snippet>0</snippet></ROW><ROW><id>15047141</id><snippet>n</snippet></ROW><ROW><id>15047141</id><snippet>return</snippet></ROW><ROW><id>15047141</id><snippet>None</snippet></ROW><ROW><id>15047141</id><snippet>return y</snippet></ROW><ROW><id>15047141</id><snippet>def f(n):
    a, b = 0, 1
    for i in range(0, n):
        a, b = b, a + b
    return a
</snippet></ROW><ROW><id>15047410</id><snippet>Ctrl+Shift+/</snippet></ROW><ROW><id>15047568</id><snippet>default=True</snippet></ROW><ROW><id>15047568</id><snippet>TimeField</snippet></ROW><ROW><id>15047815</id><snippet>os.lseek</snippet></ROW><ROW><id>15047815</id><snippet>print os.read(fd,24)
os.lseek(fd,0,0)
print os.read(fd,24)
</snippet></ROW><ROW><id>15047815</id><snippet>with open('filename') as fin:
    print fin.read(24)
    fin.seek(0)
    print fin.read(24)
</snippet></ROW><ROW><id>15047878</id><snippet>for itemID in itemsArray:
    avgQuantity = getJitaQuantity(itemID)
    lowestJitaSell = getJitaLowest(itemID)
    candidateArray = findLowestPrices(itemID, lowestJitaSell, candidateArray, avgQuantity)
    multiCandidateArray.append(sorted(candidateArray))
</snippet></ROW><ROW><id>15047878</id><snippet>del</snippet></ROW><ROW><id>15047878</id><snippet>sorted</snippet></ROW><ROW><id>15047878</id><snippet>list</snippet></ROW><ROW><id>15047878</id><snippet>FindLowestPrices</snippet></ROW><ROW><id>15047878</id><snippet>multiCandidateArray</snippet></ROW><ROW><id>15047894</id><snippet>proportion</snippet></ROW><ROW><id>15047894</id><snippet>mainSzr.Add(posPnl, 0)
mainSzr.Add(posPnl2, 1)
</snippet></ROW><ROW><id>15047894</id><snippet>wx.FIXED</snippet></ROW><ROW><id>15047894</id><snippet>wx.GROW</snippet></ROW><ROW><id>15047894</id><snippet>mainSzr.Add(posPnl, 1)
mainSzr.Add(posPnl2, 2)
</snippet></ROW><ROW><id>15047894</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>15047894</id><snippet>mainSzr.Add(posPnl, 0, wx.EXPAND)
mainSzr.Add(posPnl2, 1, wx.EXPAND)
</snippet></ROW><ROW><id>15047894</id><snippet>self.SetupScrolling()</snippet></ROW><ROW><id>15047894</id><snippet>__init__</snippet></ROW><ROW><id>15048246</id><snippet>is_tuple_string_row</snippet></ROW><ROW><id>15048246</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15048246</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>15048246</id><snippet>normalized_list()</snippet></ROW><ROW><id>15048246</id><snippet>l = [["('N', '', 'SHOWERS', '', 'RD', '11734', '11734', '', '')", "('61060', '61060')"], ['', '', 'NORA', '', 'RD', '10301', '10999', '10400', '10998', '61089', '61089']]

l2 = [['N', '', 'SHOWERS', '', 'RD', '11734', '11734', '', '', '61060', '61060'], ['', '', 'NORA', '', 'RD', '10301', '10999', '10400', '10998', '61089', '61089']]

import ast
from itertools import imap, chain


def is_tuple_string_row(L):
    """Return whether list L is a list of strings containing tuples"""
    return len(L)==2 and all(s.startswith("('") and s.endswith("')") for s in L)


def normalized_list(L):
    """Yield lists in sequence L as lists of strings

    Normalizes a list of strings of tuples down to a simple list of strings
    """
    for item in L:
        if is_tuple_string_row(item):
            yield list(chain.from_iterable(imap(ast.literal_eval, item)))
        else:
            yield item


# You can iterate efficiently
for item in normalized_list(l):
    print item

# or you can put the whole thing to a single new list
aslist = list(normalized_list(l))

# verify results
assert aslist == l2
</snippet></ROW><ROW><id>15048251</id><snippet>enumerate</snippet></ROW><ROW><id>15048251</id><snippet>zip</snippet></ROW><ROW><id>15048251</id><snippet>lst = [[3, 0, 7, 4, 5], [2, 3, 0, 1, 2], [6, 6, 7, 6, 6]]
d = dict(enumerate(zip(*lst)))
</snippet></ROW><ROW><id>15048251</id><snippet>zip(*lst)</snippet></ROW><ROW><id>15048251</id><snippet>zip</snippet></ROW><ROW><id>15048251</id><snippet>[(3, 2, 6), (0, 3, 6), (7, 0, 7), (4, 1, 6), (5, 2, 6)]
</snippet></ROW><ROW><id>15048251</id><snippet>enumerate()</snippet></ROW><ROW><id>15048251</id><snippet>enumerate</snippet></ROW><ROW><id>15048251</id><snippet>[(0, (3, 2, 6)), (1, (0, 3, 6)), (2, (7, 0, 7)), (3, (4, 1, 6)), (4, (5, 2, 6))]
</snippet></ROW><ROW><id>15048251</id><snippet>dict()</snippet></ROW><ROW><id>15048251</id><snippet>{0: (3, 2, 6), 1: (0, 3, 6), 2: (7, 0, 7), 3: (4, 1, 6), 4: (5, 2, 6)}
</snippet></ROW><ROW><id>15048453</id><snippet>import MySQLdb as mdb

db = None

try:

    db = mdb.connect("localhost","user", "password", "test_data")

    ## with db:  ## try taking this out for Python 2.4
    cur = db.cursor()
    cur.execute("SELECT * FROM PRODUCT")
    rows = cur.fetchall()
    for row in rows:
        print row

except mdb.Error, e:

    print "Error %d: %s" % (e.args[0],e.args[1])
    sys.exit(1)
</snippet></ROW><ROW><id>15048459</id><snippet>def buildLink2(self):
    temp=1
    while temp&lt;10:
        self=self.next
        self=Node(temp)
        temp+=1
</snippet></ROW><ROW><id>15048459</id><snippet>self</snippet></ROW><ROW><id>15048459</id><snippet>self</snippet></ROW><ROW><id>15048459</id><snippet>self.next</snippet></ROW><ROW><id>15048459</id><snippet>None</snippet></ROW><ROW><id>15048459</id><snippet>self</snippet></ROW><ROW><id>15048459</id><snippet>Node</snippet></ROW><ROW><id>15048459</id><snippet>self</snippet></ROW><ROW><id>15048459</id><snippet>None</snippet></ROW><ROW><id>15048459</id><snippet>def build_link(first_node):

    cur_node = first_node
    for tmp in range(10):
        cur_node.next = Node(tmp)
        cur_node = cur_node.next
</snippet></ROW><ROW><id>15048630</id><snippet>AWS_S3_CUSTOM_DOMAIN</snippet></ROW><ROW><id>15048630</id><snippet>s3boto</snippet></ROW><ROW><id>15048653</id><snippet>_PLANES</snippet></ROW><ROW><id>15048653</id><snippet>zaxis</snippet></ROW><ROW><id>15048653</id><snippet>tmp_planes = ax.zaxis._PLANES 
ax.zaxis._PLANES = ( tmp_planes[2], tmp_planes[3], 
                     tmp_planes[0], tmp_planes[1], 
                     tmp_planes[4], tmp_planes[5])
view_1 = (25, -135)
view_2 = (25, -45)
init_view = view_2
ax.view_init(*init_view)
</snippet></ROW><ROW><id>15048653</id><snippet>_PLANES</snippet></ROW><ROW><id>15048653</id><snippet>matplotlib</snippet></ROW><ROW><id>15048759</id><snippet>$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
</snippet></ROW><ROW><id>15048759</id><snippet>export VIRTUALENV_DISTRIBUTE=1</snippet></ROW><ROW><id>15048761</id><snippet>$ sudo apt-get install libpcap-dev libnl-dev python-dev
</snippet></ROW><ROW><id>15048852</id><snippet>"&lt;Button-1&gt;"</snippet></ROW><ROW><id>15048852</id><snippet>"&lt;ButtonRelease-1&gt;"</snippet></ROW><ROW><id>15048852</id><snippet>from Tkinter import Tk, Canvas

start = None

def onclick_handler(event):
    global start
    start = (event.x, event.y)

def onrelease_handler(event):
    global start
    if start is not None:
        x = start[0]
        y = start[1]
        event.widget.create_line(x, y, event.x, event.y)
        start = None

master = Tk()
canvas = Canvas(master, width=200, height=200)
canvas.bind("&lt;Button-1&gt;", onclick_handler)
canvas.bind("&lt;ButtonRelease-1&gt;", onrelease_handler)
canvas.pack()
master.mainloop()
</snippet></ROW><ROW><id>15048903</id><snippet>CPIobvs['observations']['observation']</snippet></ROW><ROW><id>15048903</id><snippet>'realtime_start'</snippet></ROW><ROW><id>15048903</id><snippet>&gt;</snippet></ROW><ROW><id>15048903</id><snippet>aDate</snippet></ROW><ROW><id>15048903</id><snippet>candidates = (ob for ob in CPIobvs['observations']['observation'] if
    ob['realtime_start'] &lt;= aDate)
</snippet></ROW><ROW><id>15048903</id><snippet>[ob for ob in CPIobvs['observations']['observation'] if
    ob['realtime_start'] &lt;= aDate]
</snippet></ROW><ROW><id>15048903</id><snippet>max()</snippet></ROW><ROW><id>15048903</id><snippet>key</snippet></ROW><ROW><id>15048903</id><snippet>'realtime_start'</snippet></ROW><ROW><id>15048903</id><snippet>dict</snippet></ROW><ROW><id>15048903</id><snippet>last_ob = max(candidates, key=lambda ob: ob['realtime_start'])
</snippet></ROW><ROW><id>15048903</id><snippet>last_ob['date']</snippet></ROW><ROW><id>15048903</id><snippet>last_ob['value']</snippet></ROW><ROW><id>15049248</id><snippet>from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

browser = webdriver.Firefox() # Get local session(use webdriver.Chrome() for chrome) 
browser.get("http://www.example.com") # load page from some url
assert "example" in browser.title # assume example.com has string "example" in title

try:
    # temporarily make parent(assuming its id is parent_id) visible
    browser.execute_script("document.getElementById('parent_id').style.display='block'")
    # now the following code won't raise ElementNotVisibleException any more
    browser.find_element_by_xpath("//input[@itemcode='XYZ']").send_keys(1)
    # hide the parent again
    browser.execute_script("document.getElementById('parent_id').style.display='none'")
except NoSuchElementException:
    assert 0, "can't find input with XYZ itemcode"
</snippet></ROW><ROW><id>15049248</id><snippet>browser.execute_script("document.getElementById('XYZ').value+='1'")
</snippet></ROW><ROW><id>15049297</id><snippet>playRandom</snippet></ROW><ROW><id>15049297</id><snippet>isPlaying</snippet></ROW><ROW><id>15049297</id><snippet>lengthOfTrack</snippet></ROW><ROW><id>15049297</id><snippet>playRandom</snippet></ROW><ROW><id>15049297</id><snippet>isPlaying</snippet></ROW><ROW><id>15049297</id><snippet>lengthOfTrack</snippet></ROW><ROW><id>15049297</id><snippet>isPlaying</snippet></ROW><ROW><id>15049373</id><snippet>_xxx</snippet></ROW><ROW><id>15049517</id><snippet>__getitem____(self, key)</snippet></ROW><ROW><id>15049517</id><snippet>class Room(object):
    # stuff...
    def __getitem__(self, key):
        # get room using the key and return the value
        # you should raise a KeyError if the value is not found
        return self.get_room(key)

dungeon.room = Room()
dungeon.room['room_name']  # this will work!
</snippet></ROW><ROW><id>15049606</id><snippet>BLACK = (0,0,0)
....
screen.blit(cv9, (xposCv9, yposCv9))
pygame.display.flip()
clock.tick(60)
screen.fill(BLACK) # Add this to "clear" the screen.
</snippet></ROW></DATA>