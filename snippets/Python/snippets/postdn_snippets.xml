<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19577043</id><snippet>getattr</snippet></ROW><ROW><id>19577043</id><snippet>col = 'col1'
getattr(table, col)
</snippet></ROW><ROW><id>19577190</id><snippet>sorted(jewels_list, reverse=True)</snippet></ROW><ROW><id>19577315</id><snippet>rocreader</snippet></ROW><ROW><id>19577315</id><snippet>with open(csvfilename) as csvfile:
    rocreader=csv.reader(csvfile)
    rocindex = dict((row[-1], row) for row in rocreader)
</snippet></ROW><ROW><id>19577315</id><snippet>newentry</snippet></ROW><ROW><id>19577315</id><snippet>if newentry in rocindex:
    truth = rocindex[newentry]  
    # Merge it with the row that has key `newentry`
</snippet></ROW><ROW><id>19577318</id><snippet>class Parent:

    PATH_PROPERTIES = [ 'parent' ]

    def __init__(self, path):
        self.props = { self.PATH_PROPERTIES[0]: path }

    def getPath(self):
        return self.props[self.PATH_PROPERTIES[0]]


class Child(Parent):

    PATH_PROPERTIES = [ 'child' ]    


c = Child('path')
print(c.getPath())
</snippet></ROW><ROW><id>19577318</id><snippet>path
</snippet></ROW><ROW><id>19577318</id><snippet>getter</snippet></ROW><ROW><id>19577318</id><snippet>class Parent:

    PATH_PROPERTIES = 'parent'

    def __init__(self, path):
        self.props = { self.PATH_PROPERTIES: path }

    @property
    def path(self):
        return self.props[self.PATH_PROPERTIES]


class Child(Parent):

    PATH_PROPERTIES = 'child'         

c = Child('path')
print(c.path)
</snippet></ROW><ROW><id>19577318</id><snippet>path
</snippet></ROW><ROW><id>19577318</id><snippet>c.path</snippet></ROW><ROW><id>19577318</id><snippet>path</snippet></ROW><ROW><id>19577318</id><snippet>@property</snippet></ROW><ROW><id>19577318</id><snippet>c.getPath()</snippet></ROW><ROW><id>19577533</id><snippet>list(k)</snippet></ROW><ROW><id>19577533</id><snippet>+</snippet></ROW><ROW><id>19577533</id><snippet>a_processed = [list(k) + [round(sum(vals)/len(vals),2)] for k, vals in nums.items()]
</snippet></ROW><ROW><id>19577636</id><snippet>i</snippet></ROW><ROW><id>19577636</id><snippet>i = sorted(random.sample(range(1, 53), 5))
</snippet></ROW><ROW><id>19577992</id><snippet>try</snippet></ROW><ROW><id>19577992</id><snippet>for row in table.findAll("tr"):
    try:
        cells = row.findAll("td")
        rank = int(cells[0].find(class_="ooookiig").text)
        artist = cells[2].find(class_="artist").text
        album = cells[2].find(class_="album").text
        year = cells[2].find(class_="mediumg").text
        year = int(year[1:5])

        chartData = {"Rank":rank, "Artist":artist, "Album":album, "Year":year}
        totalList.append(chartData)
        print(chartData)
    except AttributeError:
        pass
</snippet></ROW><ROW><id>19578195</id><snippet>f</snippet></ROW><ROW><id>19578195</id><snippet>function</snippet></ROW><ROW><id>19578195</id><snippet>__dict__</snippet></ROW><ROW><id>19578195</id><snippet>f.y=11</snippet></ROW><ROW><id>19578195</id><snippet>dir(f)</snippet></ROW><ROW><id>19578195</id><snippet>__dict__</snippet></ROW><ROW><id>19578195</id><snippet>dict</snippet></ROW><ROW><id>19578195</id><snippet>my_dict['y'] = 10
</snippet></ROW><ROW><id>19578195</id><snippet>dict</snippet></ROW><ROW><id>19578195</id><snippet>dict</snippet></ROW><ROW><id>19578195</id><snippet>dict</snippet></ROW><ROW><id>19578195</id><snippet>__dict__</snippet></ROW><ROW><id>19578195</id><snippet>def f(y=10):
    print y

f()
#prints 10

f(y=11)
#prints 11
</snippet></ROW><ROW><id>19578195</id><snippet>f</snippet></ROW><ROW><id>19578195</id><snippet>def f(y=10):
    return y

f()
Out[9]: 10

f(y=11)
Out[10]: 11
</snippet></ROW><ROW><id>19578195</id><snippet>f</snippet></ROW><ROW><id>19578195</id><snippet>class</snippet></ROW><ROW><id>19578195</id><snippet>f</snippet></ROW><ROW><id>19578195</id><snippet>class F:
    def __init__(self,y=10):
        self.y = y

f1 = F()

f2 = F(y=11)

f1.y, f2.y
Out[17]: (10, 11)
</snippet></ROW><ROW><id>19578220</id><snippet>scipy.ndimage.map_coordinates</snippet></ROW><ROW><id>19578220</id><snippet>map_coordinates(im, samples)</snippet></ROW><ROW><id>19578220</id><snippet>def sliceImage(I, a, b, *arg, **kws):
    from scipy import linspace, asarray
    from scipy.ndimage import map_coordinates
    from scipy.linalg import norm
    dst = norm(asarray(b) - a) + 1
    return map_coordinates(I, [linspace(strt, end, dst) 
                               for strt, end in zip(a, b)],
                           *arg, **kws)
</snippet></ROW><ROW><id>19578220</id><snippet>def sliceImage(I, a, b, *arg, **kws):
    from scipy import linspace, asarray
    from scipy.ndimage import map_coordinates
    from scipy.linalg import norm
    a = asarray(a)
    b = asarray(b)
    dst = norm(b - a) + 1
    return map_coordinates(I, (a[:,newaxis] * linspace(1, 0, dst) +
                               b[:,newaxis] * linspace(0, 1, dst)),
                           *arg, **kws)
</snippet></ROW><ROW><id>19578220</id><snippet>dst</snippet></ROW><ROW><id>19578327</id><snippet>def getdiameter(self):
    return self.r * 2

def setdiameter(self, d):
    self.r = d / 2

d = property(getdiameter, setdiameter)
</snippet></ROW><ROW><id>19578327</id><snippet>def setr(self, r):
    self.r = r
    self.d = None

def getd(self):
    if not self.d is None:
        return self.d
    self.d = self.r * 2 # Our expensive calculation
    return self.d
</snippet></ROW><ROW><id>19578335</id><snippet>if __name__ == '__main__':
     # your code
</snippet></ROW><ROW><id>19578345</id><snippet>r'/v1/files_get/(?P&lt;root&gt;[^/]+)(?P&lt;path&gt;/.*)?'
</snippet></ROW><ROW><id>19578345</id><snippet>/</snippet></ROW><ROW><id>19578663</id><snippet>id</snippet></ROW><ROW><id>19578663</id><snippet>name</snippet></ROW><ROW><id>19578663</id><snippet>input</snippet></ROW><ROW><id>19578663</id><snippet>name</snippet></ROW><ROW><id>19578663</id><snippet>KeyError</snippet></ROW><ROW><id>19578663</id><snippet>request.form['query']</snippet></ROW><ROW><id>19578750</id><snippet>findTileLetter(x, y)</snippet></ROW><ROW><id>19578750</id><snippet>(x, y)</snippet></ROW><ROW><id>19578750</id><snippet>PLAYERDISTANCE[unit] + 1</snippet></ROW><ROW><id>19578750</id><snippet>for y in range(len(currentNewSpots) - 1):
</snippet></ROW><ROW><id>19578750</id><snippet>currentNewSpots</snippet></ROW><ROW><id>19578750</id><snippet>x</snippet></ROW><ROW><id>19578750</id><snippet>currentNewSpots</snippet></ROW><ROW><id>19578750</id><snippet>x</snippet></ROW><ROW><id>19578750</id><snippet>for y in range(len(currentNewSpots))
</snippet></ROW><ROW><id>19578750</id><snippet>y</snippet></ROW><ROW><id>19578750</id><snippet>    c = b + 1
    test = findTileLetter(a, c)
    if test and ((c, b)) not in ALLOWEDMOVES: ### &lt;--- should be (a, c)
        currentNewSpots.append((a, c))
        ALLOWEDMOVES.append((a, c))
</snippet></ROW><ROW><id>19578750</id><snippet>grid</snippet></ROW><ROW><id>19578750</id><snippet>0</snippet></ROW><ROW><id>19578750</id><snippet>1</snippet></ROW><ROW><id>19578750</id><snippet>MY_X</snippet></ROW><ROW><id>19578750</id><snippet>MY_Y</snippet></ROW><ROW><id>19578750</id><snippet>import sys

MY_X = 3
MY_Y = 4
MY_RNG = 2

grid = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 1, 1, 0, 1, 1, 0, 0, 1],
    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]

def findTileLetter(x, y):
    return grid[y][x]

class Person:
    pass

def showMap():
    for y in range(len(grid)):
        for x in range(len(grid[y])):
            if grid[y][x] == 0:
                sys.stdout.write(' ')
            elif x == MY_X and y == MY_Y:
                sys.stdout.write('x')
            elif (x, y) in ALLOWEDMOVES:
                sys.stdout.write('o')
            else:
                sys.stdout.write('-')
        sys.stdout.write('\n')

me = Person()

ALLOWEDMOVES = []

PLAYERDISTANCE = {}
PLAYERDISTANCE[me] = MY_RNG

PLAYERSPOSITION = {}
PLAYERSPOSITION[me] = (MY_X, MY_Y)

def showPerson(tilex, tiley, personAtTile):
    global ALLOWEDMOVES
    ALLOWEDMOVES = []
    prepare = {k:v for v,k in PLAYERSPOSITION.items()}
    z = PLAYERDISTANCE[personAtTile]
    #get all coords for the possible moves
    currentNewSpots = []
    oldSpots = []
    a = PLAYERSPOSITION[personAtTile][0]
    b = PLAYERSPOSITION[personAtTile][1]
    c = a + 1
    test = findTileLetter(c, b)
    if test:
        currentNewSpots.append((c, b))
        ALLOWEDMOVES.append((c, b))
    c = a -1
    test = findTileLetter(c, b)
    if test:
        currentNewSpots.append((c, b))
        ALLOWEDMOVES.append((c, b))
    c = b + 1
    test = findTileLetter(a, c)
    if test:
        currentNewSpots.append((a, c))
        ALLOWEDMOVES.append((a, c))
    c = b - 1
    test = findTileLetter(a, c)
    if test:
        currentNewSpots.append((a, c))
        ALLOWEDMOVES.append((a, c))

    showMap()

    for x in range(PLAYERDISTANCE[prepare[(tilex, tiley)]]):
        for y in range(len(currentNewSpots)):
            a = currentNewSpots[y][0]
            b = currentNewSpots[y][1]
            c = a + 1
            test = findTileLetter(c, b)
            if test and ((c, b)) not in ALLOWEDMOVES:
                currentNewSpots.append((c, b))
                ALLOWEDMOVES.append((c, b))
            c = a - 1
            test = findTileLetter(c, b)
            if test and ((c, b)) not in ALLOWEDMOVES:
                currentNewSpots.append((c, b))
                ALLOWEDMOVES.append((c, b))
            c = b + 1
            test = findTileLetter(a, c)
            if test and ((a, c)) not in ALLOWEDMOVES:
                currentNewSpots.append((a, c))
                ALLOWEDMOVES.append((a, c))
            c = b - 1
            test = findTileLetter(a, c)
            if test and ((a, c)) not in ALLOWEDMOVES:
                currentNewSpots.append((a, c))
                ALLOWEDMOVES.append((a, c))
        showMap()

showPerson(MY_X, MY_Y, me)
print ALLOWEDMOVES
</snippet></ROW><ROW><id>19578764</id><snippet>in</snippet></ROW><ROW><id>19578764</id><snippet>while a &lt;= c:
    b = randrange(1, 200)
    if b in my:
        print('Duplicate random value generated')
    my.add(b)
    a = a + 1
</snippet></ROW><ROW><id>19578764</id><snippet>for</snippet></ROW><ROW><id>19578764</id><snippet>range()</snippet></ROW><ROW><id>19578764</id><snippet>while</snippet></ROW><ROW><id>19578764</id><snippet>c</snippet></ROW><ROW><id>19578764</id><snippet>for i in range(c):
    b = randrange(1, 200)
    if b in my:
        print('Duplicate random value generated')
    my.add(b)
</snippet></ROW><ROW><id>19578795</id><snippet>clipboard = os.system("pbpaste")
</snippet></ROW><ROW><id>19578795</id><snippet>In [3]: ?os.system
Type:       builtin_function_or_method
String Form:&lt;built-in function system&gt;
Docstring:
system(command) -&gt; exit_status

Execute the command (a string) in a subshell.
</snippet></ROW><ROW><id>19578795</id><snippet>import subprocess
clipboard = subprocess.check_output('pbpaste', shell=True)
</snippet></ROW><ROW><id>19578795</id><snippet>clipboard[:4]</snippet></ROW><ROW><id>19578795</id><snippet>if (len(clipboard) &gt; 4)</snippet></ROW><ROW><id>19578795</id><snippet>if (clipboard.startswith('http'))</snippet></ROW><ROW><id>19578828</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; foo = "[['Cheese', 72], ['Milk', 45], ['Bread', 22]]"
&gt;&gt;&gt; ast.literal_eval(foo)
[['Cheese', 72], ['Milk', 45], ['Bread', 22]]
</snippet></ROW><ROW><id>19578895</id><snippet>NavigableString</snippet></ROW><ROW><id>19578895</id><snippet>unicode</snippet></ROW><ROW><id>19578895</id><snippet>print unicode(names)
</snippet></ROW><ROW><id>19578943</id><snippet>print('\n'.join(' '.join(p) for p in matrix))
</snippet></ROW><ROW><id>19578943</id><snippet>for row in matrix:
    print(' '.join(row))
</snippet></ROW><ROW><id>19578943</id><snippet>&gt;&gt;&gt; print('\n'.join(' '.join(p) for p in matrix))
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
</snippet></ROW><ROW><id>19579016</id><snippet>table = [[[ 0
    for i in range(cols) ]
         for j in range(rows) ]
              for k in range (dept) ]
</snippet></ROW><ROW><id>19579016</id><snippet>k</snippet></ROW><ROW><id>19579016</id><snippet>cols</snippet></ROW><ROW><id>19579016</id><snippet>cols</snippet></ROW><ROW><id>19579016</id><snippet>rows</snippet></ROW><ROW><id>19579016</id><snippet>table = [[[ 0
    for k in range(dept) ]
         for j in range(cols) ]
              for i in range(rows) ]
</snippet></ROW><ROW><id>19579080</id><snippet>isinstance(object, basestring)</snippet></ROW><ROW><id>19579080</id><snippet>str</snippet></ROW><ROW><id>19579080</id><snippet>unicode</snippet></ROW><ROW><id>19579080</id><snippet>In [1]: isinstance("foo", basestring)
Out[1]: True

In [2]: isinstance(["foo"], basestring)
Out[2]: False

In [3]: isinstance(u"foo", basestring)
Out[3]: True
</snippet></ROW><ROW><id>19579174</id><snippet>print("{0:3d}   ...".format(count + 1, ...))
</snippet></ROW><ROW><id>19579174</id><snippet>   1
   2
   3
 ...
  10
</snippet></ROW><ROW><id>19579480</id><snippet>str.join()</snippet></ROW><ROW><id>19579480</id><snippet>&gt;&gt;&gt; listOne = ['!'.join(i) for i in listOne]
&gt;&gt;&gt; listOne
</snippet></ROW><ROW><id>19579480</id><snippet>['h!e!l!l!o', 'w!o!r!l!d']
</snippet></ROW><ROW><id>19579480</id><snippet>map</snippet></ROW><ROW><id>19579480</id><snippet>&gt;&gt;&gt; listOne = list(map('!'.join, listOne))
&gt;&gt;&gt; listOne
['h!e!l!l!o', 'w!o!r!l!d']
</snippet></ROW><ROW><id>19579498</id><snippet>PATH</snippet></ROW><ROW><id>19579498</id><snippet>cd</snippet></ROW><ROW><id>19579498</id><snippet>os.chdir(path)</snippet></ROW><ROW><id>19579715</id><snippet>num_tries  = self.request.headers.get('X-AppEngine-TaskRetryCount')
</snippet></ROW><ROW><id>19579715</id><snippet>request = webapp2.get_request()
</snippet></ROW><ROW><id>19580035</id><snippet>try:
    user_input = input() # raw_input in Python 2.x
    if not user_input:
        raise ValueError('empty string')
except ValueError as e:
    print(e)
</snippet></ROW><ROW><id>19580035</id><snippet>int('2')</snippet></ROW><ROW><id>19580035</id><snippet>int('abc')</snippet></ROW><ROW><id>19580035</id><snippet>int('')</snippet></ROW><ROW><id>19580035</id><snippet>user_input = input()</snippet></ROW><ROW><id>19580035</id><snippet>try</snippet></ROW><ROW><id>19580035</id><snippet>user_input</snippet></ROW><ROW><id>19580035</id><snippet>except</snippet></ROW><ROW><id>19580035</id><snippet>if</snippet></ROW><ROW><id>19580035</id><snippet>except</snippet></ROW><ROW><id>19580035</id><snippet>OSError</snippet></ROW><ROW><id>19580035</id><snippet>EINTR</snippet></ROW><ROW><id>19580035</id><snippet>errno</snippet></ROW><ROW><id>19580035</id><snippet>errno</snippet></ROW><ROW><id>19580249</id><snippet>import math
def floor_float(x, index):
    sx = str(x)
    sx = sx[:index]+str(math.floor(float(sx[index]+"."+sx[index+1])))
    return float(sx)
</snippet></ROW><ROW><id>19580249</id><snippet>&gt;&gt;&gt; floor_float(10.8976540981, 8)
10.897654
</snippet></ROW><ROW><id>19580249</id><snippet>math.floor</snippet></ROW><ROW><id>19580249</id><snippet>    sx = sx[:index]+str(int(math.floor(float(sx[index]+"."+sx[index+1]))))
</snippet></ROW><ROW><id>19580249</id><snippet>def floor_float(x, i):
    return float(str(x)[:i])
</snippet></ROW><ROW><id>19580452</id><snippet>syncdb</snippet></ROW><ROW><id>19580452</id><snippet>mysql</snippet></ROW><ROW><id>19580452</id><snippet>polls_poll</snippet></ROW><ROW><id>19580452</id><snippet>mysql&gt; DESCRIBE polls_poll;
</snippet></ROW><ROW><id>19580452</id><snippet>question</snippet></ROW><ROW><id>19580452</id><snippet>polls_poll</snippet></ROW><ROW><id>19580452</id><snippet>syncdb</snippet></ROW><ROW><id>19580452</id><snippet>mysql&gt; DROP TABLE polls_poll;
$ manage.py syncdb
</snippet></ROW><ROW><id>19580524</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>19580524</id><snippet>import ast
import csv

def convert_type(s):
    try:
        return ast.literal_eval(s)
    except (ValueError, SyntaxError):
        return s

def convert_csv_row(lst):
    return [convert_type(x) for x in lst]

data = csv.reader(open('pppp.csv','r', newline=''))
converted = [convert_csv_row(row) for row in data]
print(converted)
</snippet></ROW><ROW><id>19580524</id><snippet>import json

list_of_ee = [["a","m",15],["w","p",34]]

with open("test.json", "wt") as f:
    f.write(json.dumps(list_of_ee))

with open("test.json", "rt") as f:
    s = f.read()
    lst = json.loads(s)

print(lst)
assert list_of_ee == lst
</snippet></ROW><ROW><id>19580524</id><snippet>pickle</snippet></ROW><ROW><id>19580524</id><snippet>import pickle

list_of_ee = [["a","m",15],["w","p",34]]

with open("test.pickle", "wb") as f:
    f.write(pickle.dumps(list_of_ee))

with open("test.pickle", "rb") as f:
    bytes_data = f.read()
    lst = pickle.loads(bytes_data)

print(lst)
assert list_of_ee == lst
</snippet></ROW><ROW><id>19580524</id><snippet>pickle</snippet></ROW><ROW><id>19580524</id><snippet>pickle</snippet></ROW><ROW><id>19580524</id><snippet>pickle</snippet></ROW><ROW><id>19580525</id><snippet>if choice == 'video games':
    print("Lets start with Video Games!")
</snippet></ROW><ROW><id>19580525</id><snippet>for</snippet></ROW><ROW><id>19580525</id><snippet>while</snippet></ROW><ROW><id>19580525</id><snippet>if</snippet></ROW><ROW><id>19580525</id><snippet>def</snippet></ROW><ROW><id>19580525</id><snippet>ViDeO GaMeS</snippet></ROW><ROW><id>19580525</id><snippet>if choice.lower() == 'video games':
    print("Let's start with Video Games!")
</snippet></ROW><ROW><id>19580590</id><snippet>from Tkinter import *
window = Tk()

def printVal():
    canvas = Canvas(window, width = 100, height = 100)
    canvas.grid(row = 0, column = 0, columnspan = 2)
    string = entryval.get()
    canvas.create_text(50,50, text = string)

entryval = Entry(window)
entryval.grid(row = 1, column = 0)
button = Button(window, text = "Print", command = printVal)
button.grid(row = 1, column = 1)

window.mainloop()
</snippet></ROW><ROW><id>19580599</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; sha = hashlib.sha1("I am a cat")
&gt;&gt;&gt; sha.hexdigest()
'576f38148ae68c924070538b45a8ef0f73ed8710'
</snippet></ROW><ROW><id>19580599</id><snippet>hashlib</snippet></ROW><ROW><id>19580599</id><snippet>Algorithm  Digest Size (in bits)
md5        128
sha1       160
sha224     224
sha256     256
sha384     384
sha512     512
</snippet></ROW><ROW><id>19580599</id><snippet>hash()</snippet></ROW><ROW><id>19580599</id><snippet>hash()</snippet></ROW><ROW><id>19580599</id><snippet>&gt;&gt;&gt; hash('moo')
6387157653034356308
</snippet></ROW><ROW><id>19580599</id><snippet>hash</snippet></ROW><ROW><id>19580599</id><snippet>hash()</snippet></ROW><ROW><id>19580599</id><snippet>hash()</snippet></ROW><ROW><id>19580599</id><snippet>hash()</snippet></ROW><ROW><id>19580599</id><snippet>hashlib</snippet></ROW><ROW><id>19580680</id><snippet>xargs</snippet></ROW><ROW><id>19580680</id><snippet>xargs</snippet></ROW><ROW><id>19580680</id><snippet>xargs</snippet></ROW><ROW><id>19580680</id><snippet>subprocess</snippet></ROW><ROW><id>19580680</id><snippet>xargs</snippet></ROW><ROW><id>19580680</id><snippet>chr(0)</snippet></ROW><ROW><id>19580680</id><snippet>xargs --null</snippet></ROW><ROW><id>19580680</id><snippet>' '.join()</snippet></ROW><ROW><id>19580680</id><snippet>xargs</snippet></ROW><ROW><id>19580777</id><snippet>my_df.groupby(['A', 'B']).count()
len(my_df.groupby(['A', 'B']).groups)
</snippet></ROW><ROW><id>19580777</id><snippet>df["size"] = df.groupby(['A', 'B']).transform(len)
</snippet></ROW><ROW><id>19580954</id><snippet>open(bill_file_name,'r')</snippet></ROW><ROW><id>19580972</id><snippet>set()</snippet></ROW><ROW><id>19580972</id><snippet>set().intersection(...)</snippet></ROW><ROW><id>19580972</id><snippet>&gt;&gt;&gt; x = [{1, 2, 3}, {2, 3, 4}, {3, 4, 5}]
&gt;&gt;&gt; set.intersection(*x)
set([3])
</snippet></ROW><ROW><id>19580972</id><snippet>intersection(*...)</snippet></ROW><ROW><id>19580972</id><snippet>x = [[1,2,3], [2,3,4]]
</snippet></ROW><ROW><id>19580972</id><snippet>x = [set(a) for a in x]
</snippet></ROW><ROW><id>19581644</id><snippet>&amp;</snippet></ROW><ROW><id>19581644</id><snippet>==</snippet></ROW><ROW><id>19581644</id><snippet>&gt;&gt;&gt; 2 == 2 &amp; 3 == 3
False
</snippet></ROW><ROW><id>19581644</id><snippet>2 == (2 &amp; 3) == 3</snippet></ROW><ROW><id>19581644</id><snippet> data = all_data[((all_data['Source'] == 2) &amp;
                np.isfinite(all_data[self.design_metric])) |
                ((all_data['Source'] != 2) &amp;
                np.isfinite(all_data[self.actual_metric]))]
</snippet></ROW><ROW><id>19581644</id><snippet>==</snippet></ROW><ROW><id>19581644</id><snippet>!=</snippet></ROW><ROW><id>19581754</id><snippet>Gtk.Window.set_opacity()</snippet></ROW><ROW><id>19581754</id><snippet>pygtk</snippet></ROW><ROW><id>19581754</id><snippet>pygtk</snippet></ROW><ROW><id>19581754</id><snippet>Gdk.Visual</snippet></ROW><ROW><id>19581754</id><snippet>gtk.gdk.Colormap</snippet></ROW><ROW><id>19581754</id><snippet>draw</snippet></ROW><ROW><id>19581754</id><snippet>expose-event</snippet></ROW><ROW><id>19581754</id><snippet>#!/usr/bin/env python
import cairo
import gtk

class MyWin (gtk.Window):
  def __init__(self):
    super(MyWin, self).__init__()
    self.set_position(gtk.WIN_POS_CENTER)

    self.set_size_request(300, 220)
    self.set_border_width(11)

    self.screen = self.get_screen()
    colormap = self.screen.get_rgba_colormap()
    if (colormap is not None and self.screen.is_composited()):
        print "yay"
        self.set_colormap(colormap)

    self.set_app_paintable(True)
    self.connect("expose-event", self.area_draw)
    self.show_all()

  def area_draw(self, widget, event):
    cr = widget.get_window().cairo_create()
    cr.set_source_rgba(.2, .2, .2, 0.3)
    cr.set_operator(cairo.OPERATOR_SOURCE)
    cr.paint()
    cr.set_operator(cairo.OPERATOR_OVER)
    return False

MyWin()
gtk.main()
</snippet></ROW><ROW><id>19582008</id><snippet>&gt;&gt;&gt; a = (1,2,3)
&gt;&gt;&gt; res = []
&gt;&gt;&gt; res.extend(a)
&gt;&gt;&gt; res
[1, 2, 3]
&gt;&gt;&gt; list(a)
[1, 2, 3]
</snippet></ROW><ROW><id>19582031</id><snippet>izip_longest</snippet></ROW><ROW><id>19582031</id><snippet>l = [[99,2], [3], [10, 20, -4, 5]]
n = l.map{ |x| x.size }.max
(0...n).map { |i| l.map { |x| x.fetch(i, 'NaN') } }
# =&gt; [[99, 3, 10], [2, "NaN", 20], ["NaN", "NaN", -4], ["NaN", "NaN", 5]]
</snippet></ROW><ROW><id>19582052</id><snippet>d = [(key, list(group)) for key, group in groupby(dt, lambda x: x[0])]
prnt(d)
</snippet></ROW><ROW><id>19582052</id><snippet>groupby</snippet></ROW><ROW><id>19582052</id><snippet>[('23271800', [('23271800', 0.0006679078063627531)]),
 ('23271812', [('23271812', 0.0010018617095441298)]),
 ('26112103', [('26112103', 0.0006679078063627531)]),
 ('27111616', [('27111616', 0.005677216354083401)]),
 ('30101600',
  [('30101600', 1.3909064158636346e-05), ('30101600', 0.002002905238843634)]),
 ('30102200', [('30102200', 0.00013358156127255062)]),
 ('31100000', [('31100000', 2.1849453575689805e-05)]),
 ('31161500', [('31161500', 0.0005180729752775727)]),
 ('31161501', [('31161501', 0.00012902764441098641)]),
 ('31161505', [('31161505', 0.013866049271881438)]),
 ('31161513', [('31161513', 0.021559049445886335)]),
 ('31161518', [('31161518', 0.0011596016382808651)]),
 ('31161520', [('31161520', 0.022263593545425106)]),
 ('31161600', [('31161600', 0.003930380552826971)]),
 ('31161618', [('31161618', 0.0016029787352706075)]),
 ('31161620', [('31161620', 0.0008462931211056002)]),
 ('31161700', [('31161700', 0.0008833842874611101)]),
 ('31161716', [('31161716', 7.067074299688881e-05)]),
 ('31161717', [('31161717', 0.0014193040885208503)]),
 ('31161727', [('31161727', 0.01364664212812536)]),
 ('31161801', [('31161801', 0.000179280516444739)]),
 ('31161900',
  [('31161900', 1.6624352427769844e-05), ('31161900', 0.0001496191718499286)]),
 ('31161904', [('31161904', 6.666007460763289e-05)]),
 ('31162409', [('31162409', 0.007129527514430318)]),
 ('31162800',
  [('31162800', 0.0002625302360269781),
   ('31162800', 0.359403893120933),
   ('31162800', 0.2207879284986886),
   ('31162800', 0.0002625302360269781)]),
 ('31163200',
  [('31163200', 0.00037295581888139136),
   ('31163200', 4.1439535431265705e-05)]),
 ('31163201', [('31163201', 0.011292216638533014)]),
 ('31163202',
  [('31163202', 4.5417730832667214e-05),
   ('31163202', 4.5417730832667214e-05)]),
 ('31163203', [('31163203', 0.003471418917146539)]),
 ('31163204', [('31163204', 0.0002962025923869601)]),
 ('31163214', [('31163214', 0.0014119501813264418)]),
 ('31163215', [('31163215', 0.017772155543217604)]),
 ('31171504', [('31171504', 0.05423235622453355)]),
 ('31181600', [('31181600', 5.262772981769086e-05)]),
 ('31181602', [('31181602', 0.00019920057382748777)]),
 ('31191518', [('31191518', 0.0014972878296483697)]),
 ('39121719', [('39121719', 0.0022708865416333607)]),
 ('40141600', [('40141600', 5.0614113112184855e-05)]),
 ('40141607', [('40141607', 0.0958030259751574)]),
 ('40141616',
  [('40141616', 0.005499007768977646), ('40141616', 0.00015275021580493458)]),
 ('40141636', [('40141636', 0.0007247510239255406)]),
 ('40141680', [('40141680', 0.12267031972561518)]),
 ('40142000', [('40142000', 0.0002962025923869601)]),
 ('40142100', [('40142100', 8.188292818389522e-05)]),
 ('40142315', [('40142315', 0.00034758467473980007)]),
 ('40142323', [('40142323', 0.0006308018171203779)]),
 ('40161500', [('40161500', 0.0004007446838176519)])]
</snippet></ROW><ROW><id>19582107</id><snippet>[[["A"]+y for y in find_all_paths(G,x,"A")] for x in graph["A"]]
</snippet></ROW><ROW><id>19582107</id><snippet>[[['A', 'B', 'C', 'A']], [['A', 'C', 'A']]]
</snippet></ROW><ROW><id>19582160</id><snippet>write</snippet></ROW><ROW><id>19582160</id><snippet>s0 = "[" + ", ".join([str(x) for x in B(0)]) + "]"
infile.write(s0 + "\n")
</snippet></ROW><ROW><id>19582277</id><snippet>ValueError: invalid literal for int() with base 10: ''</snippet></ROW><ROW><id>19582277</id><snippet>int()</snippet></ROW><ROW><id>19582277</id><snippet>int('')</snippet></ROW><ROW><id>19582277</id><snippet>In [3]: import re

In [4]: a = re.search('\d+', ' 18 count 9 count')

In [5]: int(a.group())
Out[5]: 18
</snippet></ROW><ROW><id>19582470</id><snippet>datetime</snippet></ROW><ROW><id>19582470</id><snippet>&gt;&gt;&gt; s='2005-08-11T16:34:33Z'
&gt;&gt;&gt; t=datetime.datetime(2009,04,01)
&gt;&gt;&gt; t.isoformat()
'2009-04-01T00:00:00'
&gt;&gt;&gt; s &lt; t
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't compare datetime.datetime to str
&gt;&gt;&gt; s &lt; t.isoformat()
True
&gt;&gt;&gt; z='2009-10-01T18:20:12'
&gt;&gt;&gt; z &lt; t.isoformat()
False
</snippet></ROW><ROW><id>19582470</id><snippet>.isoformat()</snippet></ROW><ROW><id>19582470</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')
datetime.datetime(2005, 8, 11, 16, 34, 33)
</snippet></ROW><ROW><id>19582716</id><snippet>def main():
    inGolf = open('golf.txt', 'r')
    names = [] # to store names
    scores = [] # to store scores
    for line in inGolf: # reads file line by line
        line_list = line.split(",") # list formed by each word (separated by comma) 
        names.append(line_list[0]) # append to respective list
        scores.append(line_list[1])

    for i in range(len(names)): # printing
        print "{0:20}{1:10}".format(names[i], scores[i]) # 20 and 10 are the field length

    inGolf.close()

def w(numPlayers): # to write the file
    counter = 0
    outGolf = open('golf.txt', 'w')
    while counter &lt; numPlayers:
        name = raw_input("Please enter the player's name:")
        outGolf.write(name + ",") # separate name and score by a comma
        score = input("Please enter that player's score:")
        outGolf.write(str(score) + "\n") # just add a "\n" to write in different line next time
        counter = counter + 1
    outGolf.close()

w(2)
main()
</snippet></ROW><ROW><id>19583095</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>19583095</id><snippet>pip</snippet></ROW><ROW><id>19583095</id><snippet>python setup.py</snippet></ROW><ROW><id>19583095</id><snippet>pip</snippet></ROW><ROW><id>19583239</id><snippet>django.db.Model</snippet></ROW><ROW><id>19583239</id><snippet>{
   '2013': {
      'amount': Decimal('92.96892879384746351465539182'), 
      'date': datetime.date(2013, 10, 25)
      },
   # etc
}
</snippet></ROW><ROW><id>19583239</id><snippet>{
   '2013': [
      {
        'amount': Decimal('92.96892879384746351465539182'), 
        'date': datetime.date(2013, 10, 25)
      },
      {
        'amount': Decimal('29.9689287'), 
        'date': datetime.date(2013, 10, 21)
      },
    ],

   # etc
}
</snippet></ROW><ROW><id>19583252</id><snippet>import cgi

print "Content- type : text/html\n"
form = cgi.FieldStorage()

Fname = form.getvalue('firstname')
Lname = form.getvalue('lastname')
Age = form.getvalue('age')
Gender = form.getvalue('gender')

with open('copy.txt', 'w') as f:
    for data in f:
        f.write("Fname")
        f.write("Lname")
        f.write("age")
        f.write("gender")
</snippet></ROW><ROW><id>19583252</id><snippet>with</snippet></ROW><ROW><id>19583252</id><snippet>f = open('copy.txt', 'w')
for data in f:
    f.write("Fname")
    f.write("Lname")
    f.write("age")
    f.write("gender")
f.close()
</snippet></ROW><ROW><id>19583346</id><snippet>upload_to = lambda instance, filename : create_file(instance, 'whatever')
</snippet></ROW><ROW><id>19583436</id><snippet>BeforeRender</snippet></ROW><ROW><id>19583436</id><snippet>get_base_data()</snippet></ROW><ROW><id>19583436</id><snippet>{{ view.get_base_data }}</snippet></ROW><ROW><id>19583627</id><snippet>text</snippet></ROW><ROW><id>19583627</id><snippet>root = ET.fromstring(statsTF2)
for stat in root.findall("./stats/stat"):
    if stat.find('name').text.endswith('.accum.iPlayTime'):
        print stat.find('value').text
</snippet></ROW><ROW><id>19583627</id><snippet>247469
94649
1110582
</snippet></ROW><ROW><id>19583627</id><snippet>lxml</snippet></ROW><ROW><id>19583627</id><snippet>import lxml.etree as ET

root = ET.fromstring(statsTF2)
for text in root.xpath('./stats/stat[name[contains(text(), ".accum.iPlayTime")]]/value/text()'):
    print text
</snippet></ROW><ROW><id>19583647</id><snippet>jQuery.post</snippet></ROW><ROW><id>19583647</id><snippet>// This line can be safely removed;
// jQuery is doing it for you behind the scenes
var patients = jQuery.parseJSON(data);
</snippet></ROW><ROW><id>19583647</id><snippet>parseJSON</snippet></ROW><ROW><id>19583664</id><snippet>var geometry = new THREE.CubeGeometry(100, 200, 300);
</snippet></ROW><ROW><id>19583664</id><snippet>(100, 200, 300) = (width, height, length)</snippet></ROW><ROW><id>19583664</id><snippet>VAO</snippet></ROW><ROW><id>19583664</id><snippet>VBO</snippet></ROW><ROW><id>19583664</id><snippet>renderer.setSize(window.innerWidth, window.innerHeight);
</snippet></ROW><ROW><id>19583801</id><snippet>from myclass import MyClass
class MyClass2(MyClass):
      def __init__(self, Dict):
          self.Dict = Dict
          Dict = {}
      def __iter__(self):
          for key, value in self.Dict.items():
              yield key, value

filename = MyClass1('name of file')
y = MyClass2(filename)
</snippet></ROW><ROW><id>19583801</id><snippet>filename</snippet></ROW><ROW><id>19583801</id><snippet>str</snippet></ROW><ROW><id>19583801</id><snippet>unicode</snippet></ROW><ROW><id>19583801</id><snippet>MyClass1</snippet></ROW><ROW><id>19583801</id><snippet>filename</snippet></ROW><ROW><id>19583801</id><snippet>MyClass2.__init__()</snippet></ROW><ROW><id>19583801</id><snippet>self.Dict</snippet></ROW><ROW><id>19583801</id><snippet>Dict</snippet></ROW><ROW><id>19583801</id><snippet>{}</snippet></ROW><ROW><id>19583801</id><snippet>class MyClass2(MyClass):
      def __init__(self, filename):
          self.filename = filename
          self.Dict = {}
      def __iter__(self):
          for key, value in self.Dict.items():
              yield key, value
</snippet></ROW><ROW><id>19583801</id><snippet>Dict</snippet></ROW><ROW><id>19583801</id><snippet>dict</snippet></ROW><ROW><id>19583928</id><snippet>:</snippet></ROW><ROW><id>19583928</id><snippet>if (i[0][0] &lt; width * 0.025) or (i[0][0] &gt; width - width * 0.025) or (i[0][1] &lt; height * 0.025) or (i[0][1] &gt; height - height * 0.025):
</snippet></ROW><ROW><id>19584383</id><snippet>def give_winner(first_selection, second_selection):
    rules = {
        1: lambda x: x in (3, 4),
        2: lambda x: x in (1, 5),
        3: lambda x: x in (2, 4),
        4: lambda x: x in (2, 5),
        5: lambda x: x in (3, 1)
    }
    return rules[first_selection](second_selection)
</snippet></ROW><ROW><id>19584546</id><snippet>z=int(y)</snippet></ROW><ROW><id>19584546</id><snippet>z=int(round(y,0))</snippet></ROW><ROW><id>19584546</id><snippet>&gt;&gt;&gt; int(round((50.4-50.)*1000, 0))
400
</snippet></ROW><ROW><id>19585362</id><snippet>subprocess.call()</snippet></ROW><ROW><id>19585362</id><snippet>example/*</snippet></ROW><ROW><id>19585362</id><snippet>os.listdir()</snippet></ROW><ROW><id>19585362</id><snippet>glob</snippet></ROW><ROW><id>19585362</id><snippet>shell=True</snippet></ROW><ROW><id>19585362</id><snippet>subprocess.call()</snippet></ROW><ROW><id>19585362</id><snippet>glob.glob()</snippet></ROW><ROW><id>19585362</id><snippet>import glob
import subprocess

subprocess.call(['zip', 'example.zip'] + glob.glob('example/*'))
</snippet></ROW><ROW><id>19585548</id><snippet>dict(input)</snippet></ROW><ROW><id>19585548</id><snippet>deepcopy</snippet></ROW><ROW><id>19585548</id><snippet>update</snippet></ROW><ROW><id>19585548</id><snippet>newinput = shelve.open("newtest.dict")
newinput.update(copy.deepcopy(dict(input)))
</snippet></ROW><ROW><id>19585890</id><snippet>raw_input()</snippet></ROW><ROW><id>19585890</id><snippet>input()</snippet></ROW><ROW><id>19585890</id><snippet>str()</snippet></ROW><ROW><id>19585890</id><snippet>for line in numFile:
    # line now contains the current line, including a trailing \n, if present
</snippet></ROW><ROW><id>19585890</id><snippet>line</snippet></ROW><ROW><id>19585890</id><snippet>int</snippet></ROW><ROW><id>19585890</id><snippet>total += int(line)       # shorthand for total = total + int(line)
</snippet></ROW><ROW><id>19585890</id><snippet>int("")</snippet></ROW><ROW><id>19585890</id><snippet>for line in numFile:
    if line:
        total += int(line)
</snippet></ROW><ROW><id>19585925</id><snippet>w</snippet></ROW><ROW><id>19585925</id><snippet>for</snippet></ROW><ROW><id>19585925</id><snippet>\n</snippet></ROW><ROW><id>19585925</id><snippet>f = open("abc.txt","w")
f.write(form.getvalue('firstname', '?') + '\n')
f.write(form.getvalue('lastname', '?') + '\n')
f.write(form.getvalue('age', '?') + '\n')
f.write(form.getvalue('gender', '?') + '\n')
f.close() 
</snippet></ROW><ROW><id>19585925</id><snippet>with</snippet></ROW><ROW><id>19585925</id><snippet>with open("abc.txt","w") as f:
    f.write(form.getvalue('firstname', '?') + '\n')
    f.write(form.getvalue('lastname', '?') + '\n')
    f.write(form.getvalue('age', '?') + '\n')
    f.write(form.getvalue('gender', '?') + '\n')
</snippet></ROW><ROW><id>19585925</id><snippet>for</snippet></ROW><ROW><id>19585925</id><snippet>with open("abc.txt", "w") as f:
    for param in ['firstname', 'lastname', 'age', 'gender']:
        f.write(form.getvalue(param, '?') + '\n')
</snippet></ROW><ROW><id>19585961</id><snippet>LKTracker.track_points
</snippet></ROW><ROW><id>19585961</id><snippet>&gt;&gt;&gt; LKTracker.track_points
&lt;unbound method LKTracker.track_points&gt;
</snippet></ROW><ROW><id>19585961</id><snippet>&gt;&gt;&gt; LKTracker.track_points.__func__
&lt;function track_points at 0x103e7c500&gt;
</snippet></ROW><ROW><id>19585961</id><snippet>self</snippet></ROW><ROW><id>19585961</id><snippet>self.track_points.__func__
</snippet></ROW><ROW><id>19585961</id><snippet>track_points = self.track_points.__func__
if not hasattr(track_points, "gotInitialFeatures"):
    track_points.gotInitialFeatures = None

if not track_points.gotInitialFeatures:
    #do some stuff
track_points.gotInitialFeatures = True
</snippet></ROW><ROW><id>19585961</id><snippet>if not hasattr(LKTracker, 'gotInitialFeatures'):
</snippet></ROW><ROW><id>19586156</id><snippet>lst1</snippet></ROW><ROW><id>19586156</id><snippet>lst2</snippet></ROW><ROW><id>19586156</id><snippet>uniq</snippet></ROW><ROW><id>19586156</id><snippet>lst1</snippet></ROW><ROW><id>19586156</id><snippet>uniq_full</snippet></ROW><ROW><id>19586156</id><snippet>lst2</snippet></ROW><ROW><id>19586156</id><snippet>lst1</snippet></ROW><ROW><id>19586156</id><snippet>lst1 = [('vr1', '635', '1'), ('vr1', '32', '1'), ('vr1', '784', '0.526'), ('vr1', '431', '1')]    
lst2 = [('vr1', '635', '3'), ('vr1', '784', '2.526'), ('vr1', '431', '2')]

remove_keys = set([item[:2] for item in lst2])
unique = [item for item in lst1 if item[:2] not in remove_keys]
print(unique)
</snippet></ROW><ROW><id>19586156</id><snippet>[('vr1', '32', '1')]
</snippet></ROW><ROW><id>19586156</id><snippet>def orig(lst1, lst2):
    uniq = set([i[0:2] for i in lst1]).difference([j[0:2] for j in lst2])
    uniq_full = [i for i in lst1 if i[0:2] in uniq]
    return uniq_full

def alt(lst1, lst2):
    remove_keys = set([item[:2] for item in lst2])
    unique = [item for item in lst1 if item[:2] not in remove_keys]
    return unique

In [4]: %timeit orig(lst1, lst2)
100000 loops, best of 3: 2.29 µs per loop

In [5]: %timeit alt(lst1, lst2)
1000000 loops, best of 3: 1.36 µs per loop
</snippet></ROW><ROW><id>19586156</id><snippet>remove_keys</snippet></ROW><ROW><id>19586156</id><snippet>def alt2(lst1, lst2):
    remove_keys = set(item[:2] for item in lst2)
    unique = [item for item in lst1 if item[:2] not in remove_keys]
    return unique

In [7]: %timeit alt2(lst1, lst2)
1000000 loops, best of 3: 1.54 µs per loop
</snippet></ROW><ROW><id>19586156</id><snippet>In [8]: lst1 = [('vr1', '635', '1'), ('vr1', '32', '1'), ('vr1', '784', '0.526'), ('vr1', '431', '1')]*10000

In [9]: lst2 = [('vr1', '635', '3'), ('vr1', '784', '2.526'), ('vr1', '431', '2')]*10000

In [10]: %timeit alt(lst1, lst2)
100 loops, best of 3: 9.34 ms per loop

In [11]: %timeit alt2(lst1, lst2)
100 loops, best of 3: 9.49 ms per loop

In [12]: %timeit orig(lst1, lst2)
100 loops, best of 3: 13.5 ms per loop
</snippet></ROW><ROW><id>19586156</id><snippet>In [19]: %timeit alt(lst1, lst2)
1 loops, best of 3: 972 ms per loop

In [20]: %timeit alt2(lst1, lst2)
1 loops, best of 3: 957 ms per loop
</snippet></ROW><ROW><id>19586156</id><snippet>def using_dicts(lst1, lst2):
    d1 = {x[0:2]:x for x in lst1}
    d2 = {x[0:2]:x for x in lst2}
    return [d1[key] for key in set(d1) - set(d2)]
</snippet></ROW><ROW><id>19586156</id><snippet>lst1 = [('vr1', '635', '1'), ('vr1', '32', '1'), ('vr1', '784', '0.526'), ('vr1', '431', '1')]*10000

lst2 = [('vr1', '635', '3'), ('vr1', '784', '2.526'), ('vr1', '431', '2')]*10000
</snippet></ROW><ROW><id>19586156</id><snippet>using_dicts</snippet></ROW><ROW><id>19586156</id><snippet>alt</snippet></ROW><ROW><id>19586156</id><snippet>In [31]: %timeit alt(lst1, lst2)
100 loops, best of 3: 8.39 ms per loop

In [32]: %timeit using_dicts(lst1, lst2)
100 loops, best of 3: 7.98 ms per loop
</snippet></ROW><ROW><id>19586156</id><snippet>lst1</snippet></ROW><ROW><id>19586156</id><snippet>lst2</snippet></ROW><ROW><id>19586156</id><snippet>x[0:2]</snippet></ROW><ROW><id>19586156</id><snippet>d1</snippet></ROW><ROW><id>19586156</id><snippet>d2</snippet></ROW><ROW><id>19586156</id><snippet>lst1</snippet></ROW><ROW><id>19586156</id><snippet>lst2</snippet></ROW><ROW><id>19586156</id><snippet>lst1 = [(i,i,i) for i in range(10**4+100)]
lst2 = [(i,i,i) for i in range(10**4)]
</snippet></ROW><ROW><id>19586156</id><snippet>alt</snippet></ROW><ROW><id>19586156</id><snippet>using_dicts</snippet></ROW><ROW><id>19586156</id><snippet>In [34]: %timeit alt(lst1, lst2)
100 loops, best of 3: 3.12 ms per loop

In [35]: %timeit using_dicts(lst1, lst2)
100 loops, best of 3: 5.93 ms per loop
</snippet></ROW><ROW><id>19586330</id><snippet>Counter</snippet></ROW><ROW><id>19586330</id><snippet>print count</snippet></ROW><ROW><id>19586330</id><snippet>for c in sorted(count): 
    print c + '.'*(10-len(c))+'|'+'.'*(6-len(str(count[c])))+str(count[c])
</snippet></ROW><ROW><id>19586564</id><snippet>print numpy.sum(numpy.array([0.0132391039, 0.0097909093, -0.0028579101, 0.0245043133]))
</snippet></ROW><ROW><id>19586564</id><snippet>print numpy.sum(numpy.array([0.0132391039, 0.0132391039, -0.0028579101, 0.0245043133]))
</snippet></ROW><ROW><id>19586836</id><snippet>CallBackStuff</snippet></ROW><ROW><id>19586836</id><snippet>CallBackStuff</snippet></ROW><ROW><id>19586836</id><snippet>class Observable:
    def subscribe(self,callback):
        self.callback = callback

    def fire(self):
        self.callback()

class CallBackStuff:
    storedInput = None # Class member to store the input
    def doCallback(self):
        self.storedInput = raw_input("Please enter Y or N?")

if __name__ == '__main__':
    s = CallBackStuff()
    o = Observable()
    o.subscribe(s.doCallback)
    o.fire()
    print s.storedInput # Print stored input from call-back object
</snippet></ROW><ROW><id>19586943</id><snippet>form.getvalue('firstname')</snippet></ROW><ROW><id>19586943</id><snippet>None</snippet></ROW><ROW><id>19587253</id><snippet>fname = fname.strip('.csv')   # no semicolons in Python!
</snippet></ROW><ROW><id>19587253</id><snippet>c</snippet></ROW><ROW><id>19587253</id><snippet>s</snippet></ROW><ROW><id>19587253</id><snippet>v</snippet></ROW><ROW><id>19587253</id><snippet>.</snippet></ROW><ROW><id>19587253</id><snippet>&gt;&gt;&gt; "cross.csv".strip(".csv")
'ro'
</snippet></ROW><ROW><id>19587253</id><snippet>import re
fname = re.sub(r"\.csv$", "", fname)
</snippet></ROW><ROW><id>19587274</id><snippet>v=v0+at</snippet></ROW><ROW><id>19587274</id><snippet>v0=0</snippet></ROW><ROW><id>19587274</id><snippet>import numpy as np
import matplotlib.pyplot as plt

a = 0.11768 #is it in m/s^2? I've used m/s^2...
v=[] #velocity at a given time ‹
x = np.arange(0, 100, 1)    # 0 to 100 seconds
for i in x: # ‹
    v.append(i*a) #read it as a*t, in fact is t...use i*a*3.6 if you want km/h ‹
fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,v,)   
plt.plot(x, v)
plt.ylabel(r'Velocity $(m/sec )$') #note if you want km/h use v.append(i*a*3.6) above
plt.xlabel(r'Time $(sec)$')
plt.show()
</snippet></ROW><ROW><id>19587274</id><snippet>v=a*x</snippet></ROW><ROW><id>19587274</id><snippet>‹</snippet></ROW><ROW><id>19587452</id><snippet>range(start,stop[,step])</snippet></ROW><ROW><id>19587452</id><snippet>_list = range(50,101,2)
print _list
#[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]
</snippet></ROW><ROW><id>19587452</id><snippet>range</snippet></ROW><ROW><id>19587452</id><snippet>xrange</snippet></ROW><ROW><id>19587452</id><snippet>step</snippet></ROW><ROW><id>19587581</id><snippet>import os
rootdir = 'C:/Users/sid/Desktop/test'

for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        print subdir+'/'+file
</snippet></ROW><ROW><id>19587689</id><snippet>Alias /static /var/www/wsgi/static
</snippet></ROW><ROW><id>19587689</id><snippet>url(r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root' : settings.STATIC_ROOT}),
</snippet></ROW><ROW><id>19587911</id><snippet>collections.Counter</snippet></ROW><ROW><id>19587911</id><snippet>import collections
import itertools

news_db = [{'el1':2, 'el3':4, 'el12':32},
           {'el3':5, 'el4':6, 'el12':21}]

vertices = collections.Counter()
edges = collections.Counter()

for item in news_db:
    vertices.update(**item)
    edges.update(itertools.combinations(item.keys(), 2))

print vertices 
print edges
</snippet></ROW><ROW><id>19587911</id><snippet>Counter({'el12': 53, 'el3': 9, 'el4': 6, 'el1': 2})
Counter({('el3', 'el12'): 2, ('el3', 'el4'): 1, ('el3', 'el1'): 1, ('el1', 'el12'): 1, ('el12', 'el4'): 1})
</snippet></ROW><ROW><id>19587939</id><snippet>lemma_sense_freqs = sortAndCount(input_file)
</snippet></ROW><ROW><id>19588212</id><snippet>class SamplemodAdmin(admin.ModelAdmin):
   pass
admin.site.register(Samplemod, SamplemodAdmin)
</snippet></ROW><ROW><id>19588323</id><snippet>dict</snippet></ROW><ROW><id>19588323</id><snippet>my_dict = {'cheese': 'cake'}
</snippet></ROW><ROW><id>19588323</id><snippet>&gt;&gt;&gt; a = dict(one=1, two=2, three=3)
&gt;&gt;&gt; b = {'one': 1, 'two': 2, 'three': 3}
&gt;&gt;&gt; c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
&gt;&gt;&gt; d = dict([('two', 2), ('one', 1), ('three', 3)])
&gt;&gt;&gt; e = dict({'three': 3, 'one': 1, 'two': 2})
&gt;&gt;&gt; a == b == c == d == e
True
</snippet></ROW><ROW><id>19589254</id><snippet>tup</snippet></ROW><ROW><id>19589254</id><snippet>reduce()</snippet></ROW><ROW><id>19589254</id><snippet>functools.reduce()</snippet></ROW><ROW><id>19589254</id><snippet>def reduce(function, iterable, initializer=None):
    it = iter(iterable)
    if initializer is None:
        value = next(it)
    else:
        value = initializer
    for element in it:
        value = function(value, element)
    return value
</snippet></ROW><ROW><id>19589254</id><snippet>initializer</snippet></ROW><ROW><id>19589254</id><snippet>None</snippet></ROW><ROW><id>19589254</id><snippet>iterable</snippet></ROW><ROW><id>19589310</id><snippet>&gt;&gt;&gt;l=[]
&gt;&gt;&gt;coords = tuple([2,4])
&gt;&gt;&gt;l.append(coords)
&gt;&gt;&gt;l
[(2,3)]
</snippet></ROW><ROW><id>19590035</id><snippet>_sentinel = object()

def foo(a, optional=_sentinel):
    if optional is _sentinel:
        optional = 42
        print "1 arg"
    else:
        print "2 args"
</snippet></ROW><ROW><id>19590035</id><snippet>func_defaults</snippet></ROW><ROW><id>19590035</id><snippet>def foo(a, optional=object()):
    if optional is foo.func_defaults[0]:
        optional = 42
        print "1 arg"
    else:
        print "2 args"
</snippet></ROW><ROW><id>19590035</id><snippet>_sentinel</snippet></ROW><ROW><id>19590360</id><snippet>clist = []
for i in alist:
    if i in blist:
        clist.append(i)

print clist
</snippet></ROW><ROW><id>19590360</id><snippet>in</snippet></ROW><ROW><id>19590360</id><snippet>alist = ["a", "b", "c"]
print "b" in alist      # will print True
print "d" in alist      # will print False
</snippet></ROW><ROW><id>19590360</id><snippet>append</snippet></ROW><ROW><id>19590409</id><snippet>Dim p As Paragraph
Dim s As String
s = ""
For Each p In Selection.Range.Paragraphs
  s = s &amp; p.Range.ListFormat.ListString &amp; " " &amp; p.Range.Text
Next
Debug.Print s
End Sub
</snippet></ROW><ROW><id>19590868</id><snippet>piecewise</snippet></ROW><ROW><id>19590868</id><snippet>&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; 1.5 &lt; a
array([False,  True,  True], dtype=bool)
&gt;&gt;&gt; 
&gt;&gt;&gt; 1.5 &lt; a &lt; 2.5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
&gt;&gt;&gt; 
&gt;&gt;&gt; (1.5 &lt; a) &amp; (a &lt; 2.5)
array([False,  True, False], dtype=bool)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19590868</id><snippet>np.logical_and</snippet></ROW><ROW><id>19590868</id><snippet>and</snippet></ROW><ROW><id>19590868</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; def piecew(x):
...   conds = [x &lt; 0, (x &gt; 0) &amp; (x &lt; 1), (x &gt; 1) &amp; (x &lt; 2), x &gt; 2]
...   funcs = [lambda x: x+1, lambda x: 1, 
...            lambda x: -x + 2., lambda x: (x-2)**2]
...   return np.piecewise(x, conds, funcs)
&gt;&gt;&gt;
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; xx = np.linspace(-0.5, 3.1, 100)
&gt;&gt;&gt; plt.plot(xx, piecew(xx))
&gt;&gt;&gt; plt.show() # or plt.savefig('foo.eps')
</snippet></ROW><ROW><id>19590868</id><snippet>piecewise</snippet></ROW><ROW><id>19590868</id><snippet>x</snippet></ROW><ROW><id>19590868</id><snippet>numpy</snippet></ROW><ROW><id>19590868</id><snippet>x</snippet></ROW><ROW><id>19590868</id><snippet>ndarray</snippet></ROW><ROW><id>19590868</id><snippet>array_like</snippet></ROW><ROW><id>19590868</id><snippet>&gt;&gt;&gt; piecew(2.1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in piecew
  File "/home/br/.local/lib/python2.7/site-packages/numpy/lib/function_base.py", line 690, in piecewise
    "function list and condition list must be the same")
ValueError: function list and condition list must be the same
&gt;&gt;&gt; 
&gt;&gt;&gt; piecew(np.asarray([2.1]))
array([ 0.01])
</snippet></ROW><ROW><id>19590877</id><snippet>click</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19590877</id><snippet>click</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19590877</id><snippet>global</snippet></ROW><ROW><id>19590877</id><snippet>click</snippet></ROW><ROW><id>19590877</id><snippet>global oval; oval = esimene_x1, esimene_y1, teine_x1, teine_y1</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19590877</id><snippet>pulsate</snippet></ROW><ROW><id>19591353</id><snippet>plt.hist2d</snippet></ROW><ROW><id>19591353</id><snippet>import numpy as np
import matplotlib.pyplot as plt

data = np.array([[8,  15,  1, 65, 79],
                 [45, 22, 60, 43, 16],
                 [3,  75, 90, 11, 14],
                 [89, 32, 27, 59, 99],
                 [62,  5, 54, 92, 81]])
nrows, ncols = data.shape
# Generate 1-based row indicies, similar to your table
row = np.vstack(ncols * [np.arange(nrows) + 1]).T

x, y = row.flatten(), data.flatten()

xbins = np.arange(nrows+1) + 0.5
plt.hist2d(x, y, bins=(xbins, 10), cmap=plt.cm.Reds)
plt.show()
</snippet></ROW><ROW><id>19591532</id><snippet>.</snippet></ROW><ROW><id>19591532</id><snippet>/</snippet></ROW><ROW><id>19591532</id><snippet>.</snippet></ROW><ROW><id>19591693</id><snippet>from django.db import connection

def my_custom_sql(self):
    cursor = connection.cursor()    
    cursor.execute("select id_noga
                    from myapp_Tnogahist a
                    inner join myapp_Tdzien b on a.dziens=b.dziens
                    where b.dzienrok = 1234")
    row = cursor.fetchone()
    return row
</snippet></ROW><ROW><id>19591764</id><snippet>N = 15
# make an empty data set
data = np.ones((N, N)) * np.nan
# fill in some fake data
for j in range(3)[::-1]:
    data[N//2 - j : N//2 + j +1, N//2 - j : N//2 + j +1] = j
# make a figure + axes
fig, ax = plt.subplots(1, 1, tight_layout=True)
# make color map
my_cmap = matplotlib.colors.ListedColormap(['r', 'g', 'b'])
# set the 'bad' values (nan) to be white and transparent
my_cmap.set_bad(color='w', alpha=0)
# draw the grid
for x in range(N + 1):
    ax.axhline(x, lw=2, color='k', zorder=5)
    ax.axvline(x, lw=2, color='k', zorder=5)
# draw the boxes
ax.imshow(data, interpolation='none', cmap=my_cmap, extent=[0, N, 0, N], zorder=0)
# turn off the axis labels
ax.axis('off')
</snippet></ROW><ROW><id>19591815</id><snippet>codecs</snippet></ROW><ROW><id>19591815</id><snippet>import codecs
with codecs.open(file name,'r',encoding='utf8') as f:
    text = f.read()
# process Unicode text
with codecs.open(file name,'w',encoding='utf8') as f:
    f.write(text)
</snippet></ROW><ROW><id>19591840</id><snippet>strptime</snippet></ROW><ROW><id>19591840</id><snippet>import datetime
df['DateTime'] = df.apply(lambda row: datetime.datetime.strptime(row['date']+ ':' + row['time'], '%Y.%m.%d:%H:%M'), axis=1)
</snippet></ROW><ROW><id>19591840</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>19591840</id><snippet>df = pd.read_csv(r'c:\data\temp.txt', parse_dates={'datetime':['date','time']}, index_col='datetime')
</snippet></ROW><ROW><id>19591840</id><snippet>read_csv</snippet></ROW><ROW><id>19591884</id><snippet>class SchoolAdmin(admin.ModelAdmin):
  list_display = ('school', 'student__name', 'student__subject__name')
  list_filter = ('school', 'student__name', 'student__subject__name')

admin.site.register(School, SchoolAdmin)
</snippet></ROW><ROW><id>19592074</id><snippet>table = soup.find('table', id="ctl00_SPWebPartManager1_g_c001c0d9_0cb8_4b0f_b75a_7cc3b6f7d790_ctl00_HistoryData1_gridHistoryData_DataGrid1")
</snippet></ROW><ROW><id>19592074</id><snippet>rows = table.findAll('tr')
</snippet></ROW><ROW><id>19592074</id><snippet>utf-8</snippet></ROW><ROW><id>19592074</id><snippet>html = br.response().read().decode('utf-8')
soup = BeautifulSoup(html.encode('utf-8'))
</snippet></ROW><ROW><id>19592324</id><snippet>openCON</snippet></ROW><ROW><id>19592324</id><snippet>extend</snippet></ROW><ROW><id>19592324</id><snippet>append</snippet></ROW><ROW><id>19592324</id><snippet>[
    [19, '88:9F:FA:D3:0B:5F', '192.168.178.24', 8, 4, 20, 64, 17, '212.54.40.25', 52698, 53, 28485], 
    [18, '88:9F:FA:D3:0B:5F', '192.168.178.24', 8, 4, 20, 64, 17, '212.54.40.25', 52681, 53, 28485], 
    [20, '88:9F:FA:D3:0B:5F', '192.168.178.24', 8, 4, 20, 64, 17, '212.54.40.25', 34310, 53, 28502]
]
</snippet></ROW><ROW><id>19592324</id><snippet>*</snippet></ROW><ROW><id>19592324</id><snippet>dnsses = openCON(query)
for dns in dnsses:
    printHeader(*dns[0:3])
    printDNS(*dns[3:])
</snippet></ROW><ROW><id>19592551</id><snippet>fkeys = ['dma_targets', 'ids']
fvals = [5678, None]
d = {'profile': {k:v for (k,v) in zip(fkeys, fvals) if v is not None}}
</snippet></ROW><ROW><id>19592551</id><snippet>d</snippet></ROW><ROW><id>19592551</id><snippet>{'profile': {'dma_targets': 5678}}
</snippet></ROW><ROW><id>19592635</id><snippet>xRng = range(a[0],b[0]+1)
yRng = range(a[1],b[1]+1)
zRng = range(a[2],b[2]+1)
g = [(a,b,c) for a in xRng for b in yRng for c in zRng]
</snippet></ROW><ROW><id>19592715</id><snippet>print [line for line in file  if re.match(targetregex, line)]
</snippet></ROW><ROW><id>19592773</id><snippet>:</snippet></ROW><ROW><id>19592773</id><snippet>def main():
    a = input("Type number")
    e = int(a)
    function2(e)


def function2(e):
    for h in range(e):
        print("X")


main()
</snippet></ROW><ROW><id>19592852</id><snippet>xml.dom.minidom.parseString</snippet></ROW><ROW><id>19592852</id><snippet>xml.dom.pulldom.parseString</snippet></ROW><ROW><id>19592852</id><snippet>_do_pulldom_parse</snippet></ROW><ROW><id>19592852</id><snippet>StringIO</snippet></ROW><ROW><id>19592852</id><snippet>StringIO</snippet></ROW><ROW><id>19592852</id><snippet>BytesIO</snippet></ROW><ROW><id>19592852</id><snippet>from io import StringIO, BytesIO

def parseMaybeBytes(string, parser):
    bufsize = len(string)
    stream_class = BytesIO if isinstance(string, bytes) else StringIO
    buf = stream_class(string)
    return xml.dom.pulldom.DOMEventStream(buf, parser, bufsize)

def parseString(string, parser=None):
    """Parse a file into a DOM from a string."""
    if parser is None:
        return xml.dom.minidom.parseString(string)

    return xml.dom.minidom._do_pulldom_parse(parseMaybeBytes, (string,),
                                             {'parser': parser})
</snippet></ROW><ROW><id>19593028</id><snippet>blind[series[1:] - series[:-1] &gt; 0.4] = 1
</snippet></ROW><ROW><id>19593028</id><snippet>tk</snippet></ROW><ROW><id>19593028</id><snippet>blind[np.diff(series) &gt; 0.4] = 1
</snippet></ROW><ROW><id>19593083</id><snippet>[-\w]+</snippet></ROW><ROW><id>19593083</id><snippet>p = r'(?P&lt;slug&gt;(?!.*my-string/$)(^foo)[-\w]+)'
</snippet></ROW><ROW><id>19593100</id><snippet>setData</snippet></ROW><ROW><id>19593100</id><snippet>setData</snippet></ROW><ROW><id>19593100</id><snippet>DisplayRole</snippet></ROW><ROW><id>19593100</id><snippet>item1.setData("321", QtCore.Qt.DisplayRole)
</snippet></ROW><ROW><id>19593100</id><snippet>setText</snippet></ROW><ROW><id>19593100</id><snippet>item1.setText("321")
</snippet></ROW><ROW><id>19593198</id><snippet>try/except</snippet></ROW><ROW><id>19593198</id><snippet>try</snippet></ROW><ROW><id>19593198</id><snippet>&gt;&gt;&gt; try:
...     1/0
...     print 'hi'
... except ZeroDivisionError, e:
...     print 'error'
...
error
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19593198</id><snippet>print 'hi'</snippet></ROW><ROW><id>19593198</id><snippet>except</snippet></ROW><ROW><id>19593210</id><snippet>import numpy as np
import scipy.integrate as integ

def g(x) :
    return np.sqrt(1470) * (x**3-11./7*x**2+4./7*x)

def G(x,n) :
    return np.sin(n*np.pi*x) * g(x)

def do_integral (N) :
    res = np.zeros(N)
    err = np.zeros(N)
    for n in xrange(1,N) :
        (res[n],err[n]) = integ.quad(G, 0, 1, args=(n,))
    return (res,err)

(c,err) = do_integral(500)
S = np.cumsum(c[1:]**2) # skip n=0
</snippet></ROW><ROW><id>19593210</id><snippet>S</snippet></ROW><ROW><id>19593210</id><snippet>S</snippet></ROW><ROW><id>19593210</id><snippet>S[200]</snippet></ROW><ROW><id>19593210</id><snippet>quad()</snippet></ROW><ROW><id>19593210</id><snippet>quad()</snippet></ROW><ROW><id>19593210</id><snippet>G(x,n)</snippet></ROW><ROW><id>19593210</id><snippet>n</snippet></ROW><ROW><id>19593210</id><snippet>quad()</snippet></ROW><ROW><id>19593210</id><snippet>quad_explain()</snippet></ROW><ROW><id>19593210</id><snippet>g(x)</snippet></ROW><ROW><id>19593210</id><snippet>def do_integral_weighted (N) :
    res = np.zeros(N)
    err = np.zeros(N)
    for n in xrange(1,N) :
        (res[n],err[n]) = integ.quad(g, 0, 1, weight='sin', wvar=n*np.pi)
    return (res,err)

(cw,errw) = do_integral_weighted(500)
Sw = np.cumsum(cw[1:]**2) # skip n=0
</snippet></ROW><ROW><id>19593412</id><snippet>id</snippet></ROW><ROW><id>19593412</id><snippet>id</snippet></ROW><ROW><id>19593412</id><snippet>id</snippet></ROW><ROW><id>19593412</id><snippet># encoding=utf-8
from bs4 import BeautifulSoup
import requests

data = requests.get('https://dpaste.de/EWCK/raw/')
soup = BeautifulSoup(data.text)
print soup.find("table",
                id="ctl00_SPWebPartManager1_g_c001c0d9_0cb8_4b0f_b75a_7cc3b6f7d790_ctl00_HistoryData1_gridHistoryData_DataGrid1")
</snippet></ROW><ROW><id>19593412</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>19593412</id><snippet>br.response().read()</snippet></ROW><ROW><id>19593894</id><snippet>sys.stdout</snippet></ROW><ROW><id>19593894</id><snippet>sys.stderr</snippet></ROW><ROW><id>19593894</id><snippet>def redirect_stdout():
    # Redirecting stdout
    sys.stdout.flush() # &lt;--- important when redirecting to files
    newstdout = os.dup(1)
    devnull = os.open(os.devnull, os.O_WRONLY)
    os.dup2(devnull, 1)
    os.close(devnull)
    sys.stdout = os.fdopen(newstdout, 'w')
</snippet></ROW><ROW><id>19593904</id><snippet>setuptools</snippet></ROW><ROW><id>19593904</id><snippet>setuptools</snippet></ROW><ROW><id>19593904</id><snippet>distutils</snippet></ROW><ROW><id>19594209</id><snippet>import re

numbers = re.compile('\d+(?:\.\d+)?')
numbers.findall("It took 2.3 seconds")
</snippet></ROW><ROW><id>19594209</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; numbers = re.compile('\d+(?:\.\d+)?')
&gt;&gt;&gt; numbers.findall("It took 2.3 seconds")
['2.3']
</snippet></ROW><ROW><id>19594209</id><snippet>&gt;&gt;&gt; numbers.findall("It took between 2.3 and 42.31 seconds")
['2.3', '42.31']
</snippet></ROW><ROW><id>19594524</id><snippet>import tkWorld
tkWorld.drawWorld()
print "end"
</snippet></ROW><ROW><id>19594524</id><snippet>root.quit()</snippet></ROW><ROW><id>19594524</id><snippet>root.destroy()</snippet></ROW><ROW><id>19594524</id><snippet>from Tkinter import Tk, Canvas, Frame, BOTH

class World(Frame):

    def __init__(self, parent):
        Frame.__init__(self, parent)   
        self.parent = parent              
        self.parent.title("CliffWorld")        
        self.pack(fill=BOTH, expand=1)

        canvas = Canvas(self)        

        canvas.create_rectangle(4, 4, 31, 31, 
            outline="#f11", fill="#1f1", width=1)
        canvas.pack(fill=BOTH, expand=1)


def drawWorld():
    root = Tk()
    ex = World(root)
    root.geometry("330x220+300+300")
    root.after(1000, lambda: root.destroy())
    root.after(1000, lambda: root.quit())
    root.mainloop() 

if __name__ == "__main__":
    import tkWorld
    tkWorld.drawWorld()
    print "end"
</snippet></ROW><ROW><id>19594726</id><snippet>any()</snippet></ROW><ROW><id>19594726</id><snippet>transposedlist = [entry for entry in transposedlist if any(e.isdigit() for e in entry)]
</snippet></ROW><ROW><id>19594726</id><snippet>any()</snippet></ROW><ROW><id>19594726</id><snippet>True</snippet></ROW><ROW><id>19594726</id><snippet>True</snippet></ROW><ROW><id>19594726</id><snippet>False</snippet></ROW><ROW><id>19594726</id><snippet>(e.isdigit() for e in entry)</snippet></ROW><ROW><id>19594726</id><snippet>False</snippet></ROW><ROW><id>19594726</id><snippet>entry</snippet></ROW><ROW><id>19594726</id><snippet>&gt;&gt;&gt; transposedlist = [('-', '*', '*', '1'), ('7', '6', '6', '1'), ('-', '*', '1', '*'), ('-', '*', '*', '*'), ('1', '3', '3', '*'), ('-', ' ', ' ', '*')]
&gt;&gt;&gt; any(e.isdigit() for e in transposedlist[0])
True
&gt;&gt;&gt; any(e.isdigit() for e in transposedlist[3])
False
&gt;&gt;&gt; [entry for entry in transposedlist if any(e.isdigit() for e in entry)]
[('-', '*', '*', '1'), ('7', '6', '6', '1'), ('-', '*', '1', '*'), ('1', '3', '3', '*')]
</snippet></ROW><ROW><id>19594889</id><snippet>from datetime import datetime, date, time

midnight = datetime.combine(date.today(), time.min)
</snippet></ROW><ROW><id>19594889</id><snippet>time.min</snippet></ROW><ROW><id>19594889</id><snippet>datetime</snippet></ROW><ROW><id>19594889</id><snippet>timedelta()</snippet></ROW><ROW><id>19594889</id><snippet>from datetime import timedelta

yesterday_midnight = midnight - timedelta(days=1)
</snippet></ROW><ROW><id>19594889</id><snippet>timestamp = datetime.fromtimestamp(some_timestamp_from_your_log)
if yesterday_midnight &lt;= timestamp &lt; midnight:
    # this happened between 00:00:00 and 23:59:59 yesterday
</snippet></ROW><ROW><id>19594889</id><snippet>from datetime import datetime, date, time, timedelta

def is_yesterday(timestamp):
    midnight = datetime.combine(date.today(), time.min)
    yesterday_midnight = midnight - timedelta(days=1)
    timestamp = datetime.fromtimestamp(some_timestamp_from_your_log)
    return yesterday_midnight &lt;= timestamp &lt; midnight:
</snippet></ROW><ROW><id>19594892</id><snippet>body['parents'] = [{'id': parent_id}]</snippet></ROW><ROW><id>19594892</id><snippet>from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

gauth = GoogleAuth()
drive = GoogleDrive(gauth)

f = drive.CreateFile({'parent': parent_id})
f.SetContentFile('cat.png') # Read local file
f.Upload() # Upload it
</snippet></ROW><ROW><id>19594976</id><snippet>bad_list=[]
good_list=[]

bad_list.append(['blue_widget', 'cracked', '776'])
bad_list.append(['red_widget', 'not_smooth', '545']) 
bad_list.append(['yellow_widget', 'spots', '35']) 
bad_list.append(['green_widget', 'smells_bad', '10'])
bad_list.append(['purple_widget', 'not_really_purple', '10'])


good_list.append(['blue_widget', 'ok', '776'])
good_list.append(['red_widget', 'ok', '545']) 
good_list.append(['green_widget', 'ok', '10'])

# ['yellow_widget', 'spots', '35']
# ['purple_widget', 'not_really_purple', '10']

labels = zip(*good_list)[0]

new_bad_list=[]

for item in bad_list:
    if item[0] not in labels:
        new_bad_list.append(item)

print new_bad_list
</snippet></ROW><ROW><id>19594976</id><snippet>new_bad_list=[item for item in bad_list if item[0] not in zip(*good_list)[0]]
</snippet></ROW><ROW><id>19595099</id><snippet>if</snippet></ROW><ROW><id>19595220</id><snippet>var x = { PR: 4, N: 1 };
var cart = { Cart: [x] };
JSON.stringify(cart);
</snippet></ROW><ROW><id>19595220</id><snippet>var x = { PR: 4, N: 1 };
var cart = { Cart: [JSON.stringify(x)] };
JSON.stringify(cart);
</snippet></ROW><ROW><id>19595305</id><snippet>for k in test:
    print test[k]['nom']
</snippet></ROW><ROW><id>19595332</id><snippet>Panel</snippet></ROW><ROW><id>19595332</id><snippet>pd.Panel({0:df1, 1:df1+10})
Out[2]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 3 (major_axis) x 2 (minor_axis)
Items axis: 0 to 1
Major_axis axis: 0 to 2
Minor_axis axis: a to b
</snippet></ROW><ROW><id>19595332</id><snippet>p[0]
Out[4]: 
   a  b
0  1  3
1  2  4
2  3  5

p[1]
Out[5]: 
    a   b
0  11  13
1  12  14
2  13  15
</snippet></ROW><ROW><id>19595332</id><snippet>p.minor_xs('a')
Out[6]: 
   0   1
0  1  11
1  2  12
2  3  13
</snippet></ROW><ROW><id>19595346</id><snippet>re.match</snippet></ROW><ROW><id>19595346</id><snippet>None</snippet></ROW><ROW><id>19595346</id><snippet># There is no need for the try/except anymore
match = re.match(r'^(\S+) (.*?) (\S+)$', full)
if match is not None:
    clean = filter(None, match.groups())
else:
    clean = ""
</snippet></ROW><ROW><id>19595346</id><snippet>if match:</snippet></ROW><ROW><id>19595346</id><snippet>if match is not None:</snippet></ROW><ROW><id>19595387</id><snippet>((\d)((?!\2)\d)((?!\2)(?!\3)\d))
</snippet></ROW><ROW><id>19595387</id><snippet>((\w)((?!\2)\w)((?!\2)(?!\3)\w))
</snippet></ROW><ROW><id>19595387</id><snippet>((\w)((?!\2)\w)((?!\2)(?!\3)\w)((?!\2)(?!\3)(?!\4)\w))
</snippet></ROW><ROW><id>19595387</id><snippet>max=&lt;your arbitrary length&gt;
regex = "((\\w)"
for i in range(1, max-1):
    regex += "("
    for j in range(2, i+1):
        regex +="(?!\\"+j+")"
    regex += "\\w)"
regex = ")"
</snippet></ROW><ROW><id>19595608</id><snippet>(...)</snippet></ROW><ROW><id>19595608</id><snippet>upper</snippet></ROW><ROW><id>19595608</id><snippet>list</snippet></ROW><ROW><id>19595608</id><snippet># Don't name a variable 'list' -- it overshadows the built-in.
lst = ("hello", "this", "is", "a", "test")

def firstFunction(x):
    return tuple(y.upper() for y in x)

print firstFunction(lst)
</snippet></ROW><ROW><id>19595608</id><snippet>('HELLO', 'THIS', 'IS', 'A', 'TEST')
</snippet></ROW><ROW><id>19595672</id><snippet>for k in range(city_count):
    cur.execute("UPDATE hqstock SET citylastprice = '%s' WHERE id = '%s'"% (CITYPRICE[k],   tID[k]))
    cur.commit()
</snippet></ROW><ROW><id>19595930</id><snippet>['curl', '-XPOST', 'http://localhost:9260/icrd_client_1', '-d', '@clientmappings.json']
</snippet></ROW><ROW><id>19596243</id><snippet>-N</snippet></ROW><ROW><id>19596243</id><snippet>  -N

    Run in non-newest mode.  This is equivalent to the assignment
    buildout:newest=false.  With this setting, buildout will not seek
    new distributions if installed distributions satisfy it's
    requirements.
</snippet></ROW><ROW><id>19596243</id><snippet>[versions]</snippet></ROW><ROW><id>19596243</id><snippet>versions = versions</snippet></ROW><ROW><id>19596243</id><snippet>[buildout]</snippet></ROW><ROW><id>19596243</id><snippet>newest = false</snippet></ROW><ROW><id>19596243</id><snippet>allow-picked-versions = false</snippet></ROW><ROW><id>19596243</id><snippet>[buildout]
# other options
versions = versions
allow-picked-versions = false
newest = false

[versions]
Django = 1.5.5
South = 0.8.2
# etc.
</snippet></ROW><ROW><id>19596243</id><snippet>allow-picked-versions = false</snippet></ROW><ROW><id>19596243</id><snippet>[versions]</snippet></ROW><ROW><id>19596360</id><snippet>ParseHex</snippet></ROW><ROW><id>19596360</id><snippet>return</snippet></ROW><ROW><id>19596360</id><snippet>endstring</snippet></ROW><ROW><id>19596360</id><snippet>return</snippet></ROW><ROW><id>19596360</id><snippet>yield</snippet></ROW><ROW><id>19596360</id><snippet>yield</snippet></ROW><ROW><id>19596360</id><snippet>&gt;&gt;&gt; def spam():
...     for i in range(10):
...         return '{} servings of spam'.format(i)
</snippet></ROW><ROW><id>19596360</id><snippet>"0 servings of spam"</snippet></ROW><ROW><id>19596360</id><snippet>0</snippet></ROW><ROW><id>19596360</id><snippet>s</snippet></ROW><ROW><id>19596360</id><snippet>&gt;&gt;&gt; for i in spam():
...     print(i)
</snippet></ROW><ROW><id>19596360</id><snippet>&gt;&gt;&gt; def spam():
...     for i in range(10):
...         yield '{} servings of spam'.format(i)
</snippet></ROW><ROW><id>19596360</id><snippet>0 servings of spam</snippet></ROW><ROW><id>19596360</id><snippet>1 servings of spam</snippet></ROW><ROW><id>19596360</id><snippet>&gt;&gt;&gt; for i in spam():
...     print(i)
</snippet></ROW><ROW><id>19596395</id><snippet>session.ConvertMIME = False
</snippet></ROW><ROW><id>19596395</id><snippet>doc.GetFirstItem("Body").GetMIMEEntity()
</snippet></ROW><ROW><id>19596420</id><snippet>canvas</snippet></ROW><ROW><id>19596420</id><snippet>canvas.create_rectangle(x0, y0, x1, y1)
</snippet></ROW><ROW><id>19596420</id><snippet>handle</snippet></ROW><ROW><id>19596420</id><snippet>myRectangle = canvas.create_rectangle(x0, y0, x1, y1)
canvas.delete(myRectangle)
</snippet></ROW><ROW><id>19596420</id><snippet>canvas.create_rectangle(x0, y0, x1, y1, tags="myRectangle")
canvas.delete("myRectangle")
</snippet></ROW><ROW><id>19596515</id><snippet>k</snippet></ROW><ROW><id>19596515</id><snippet>k=2</snippet></ROW><ROW><id>19596515</id><snippet># import required modules
import numpy as np
from scipy.cluster.vq import kmeans2

# generate clouds of 2D normally distributed points
N = 6000000 # number of points in each cluster

# cloud 1: mean (0, 0)
mean1 = [0, 0]
cov1  = [[1, 0], [0, 1]]
x1,y1 = np.random.multivariate_normal(mean1, cov1, N).T

# cloud 2: mean (5, 5)
mean2 = [5, 5]
cov2  = [[1, 0], [0, 1]]
x2,y2 = np.random.multivariate_normal(mean2, cov2, N).T

# merge the clouds and arrange into data points
xs, ys = np.concatenate( (x1, x2) ), np.concatenate( (y1, y2) )
points = np.array([xs, ys]).T

# cluster the points using k-means
centroids, clusters = kmeans2(points, k=2)
</snippet></ROW><ROW><id>19596515</id><snippet>&gt;&gt;&gt; time python test.py

real    0m20.957s
user    0m18.128s
sys     0m2.732s
</snippet></ROW><ROW><id>19596515</id><snippet># determine which centroid belongs to which cluster
# using Euclidean distance
dist1 = np.linalg.norm(centroids[0]-mean1)
dist2 = np.linalg.norm(centroids[1]-mean1)
if dist1 &lt;= dist2:
    FIRST, SECOND = 0, 1
else:
    FIRST, SECOND = 1, 0

# compute accuracy by iterating through all 2N points
# note: first N points are from cloud1, second N points are from cloud2
correct = 0
for i in range(len(clusters)):
    if clusters[i] == FIRST and i &lt; N:
        correct += 1    
    elif clusters[i] == SECOND and i &gt;= N:
        correct += 1

# output accuracy
print 'Accuracy: %.2f' % (correct*100./len(clusters))
</snippet></ROW><ROW><id>19596793</id><snippet>import os
os.system('cls')
</snippet></ROW><ROW><id>19596793</id><snippet>os.system('clear')</snippet></ROW><ROW><id>19596793</id><snippet>os.system("printf '\033c'")</snippet></ROW><ROW><id>19596793</id><snippet>import os
os.system('cls' if os.name == 'nt' else "printf '\033c'")
</snippet></ROW><ROW><id>19596855</id><snippet>python setupegg.py bdist_egg</snippet></ROW><ROW><id>19596855</id><snippet>pip</snippet></ROW><ROW><id>19596855</id><snippet>wheel</snippet></ROW><ROW><id>19597271</id><snippet>timeout</snippet></ROW><ROW><id>19597271</id><snippet>timeout</snippet></ROW><ROW><id>19597271</id><snippet>0.0</snippet></ROW><ROW><id>19597271</id><snippet>timeout()</snippet></ROW><ROW><id>19597271</id><snippet>start_timer()</snippet></ROW><ROW><id>19597271</id><snippet>timeout</snippet></ROW><ROW><id>19597271</id><snippet>print timeout()</snippet></ROW><ROW><id>19597271</id><snippet>timeout</snippet></ROW><ROW><id>19597382</id><snippet>if os.path.exists(FileName):
    with open(FileName) as File:
        lastRow = []
        # loop over the lines in the file
        for row in csv.reader(File, delimiter= ',', skipinitialspace= True):
            # saves the first row, for comparison below
            if lastRow == []:
                lastRow = row
                continue

            # loop over the columns, if all rows have the same number
            for colNum in range(len(row)):
                # compare row[colNum] and lastRow[colNum] as you wish

            # save this row, to compare with the next row in the loop
            lastRow = row
</snippet></ROW><ROW><id>19597391</id><snippet>&gt;&gt;&gt; a = range(1, 11)
&gt;&gt;&gt; b = [0,1] * 5

&gt;&gt;&gt; split(a, b)
([1, 3, 5, 7, 9], [2, 4, 6, 8, 10])
</snippet></ROW><ROW><id>19597391</id><snippet>itertools.compress</snippet></ROW><ROW><id>19597391</id><snippet>def split(x, f):
    return list(itertools.compress(x, f)), list(itertools.compress(x, (not i for i in f)))
</snippet></ROW><ROW><id>19597391</id><snippet>def split(x, f):
    count = max(f) + 1
    return tuple( list(itertools.compress(x, (el == i for el in f))) for i in xrange(count) )  

&gt;&gt;&gt; split([1,2,3,4,5,6,7,8,9,10], [0,1,1,0,2,3,4,0,1,2])
([1, 4, 8], [2, 3, 9], [5, 10], [6], [7])
</snippet></ROW><ROW><id>19597521</id><snippet>%</snippet></ROW><ROW><id>19597521</id><snippet>%</snippet></ROW><ROW><id>19597521</id><snippet>%</snippet></ROW><ROW><id>19597521</id><snippet>TypeError: not enough arguments for format string</snippet></ROW><ROW><id>19597521</id><snippet>cmd = "tshark -o column.format:'\"Source\", \"%%s\", \"Destination\", \"%%d\", \"dstport\", \"%%uD\"' -r %s |sort|uniq " %filepcap
</snippet></ROW><ROW><id>19597521</id><snippet>printf</snippet></ROW><ROW><id>19597521</id><snippet>%%</snippet></ROW><ROW><id>19597521</id><snippet>'%'</snippet></ROW><ROW><id>19597521</id><snippet>%s</snippet></ROW><ROW><id>19597521</id><snippet>filepcap</snippet></ROW><ROW><id>19597521</id><snippet>%%s</snippet></ROW><ROW><id>19597521</id><snippet>%s</snippet></ROW><ROW><id>19597521</id><snippet>%</snippet></ROW><ROW><id>19597521</id><snippet>str.format</snippet></ROW><ROW><id>19597521</id><snippet>cmd = "tshark -o column.format:'\"Source\", \"%s\", \"Destination\", \"%d\", \"dstport\", \"%uD\"' -r {} |sort|uniq ".format(filepcap)
</snippet></ROW><ROW><id>19597805</id><snippet>np.random.choice</snippet></ROW><ROW><id>19597805</id><snippet>&gt;&gt;&gt; np.random.choice([0, 1], size=(10,), p=[1./3, 2./3])
array([0, 1, 1, 1, 1, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>19597828</id><snippet>groupby</snippet></ROW><ROW><id>19597828</id><snippet>apply</snippet></ROW><ROW><id>19597828</id><snippet>def foo(zz):
    zz1 = zz.sort("dt", ascending=True).reset_index().set_index("dt", inplace=True)
    r1 = pandas.ols(y=zz1["y1"], x=zz1["x"], window=60, min_periods=12)
    return r1.beta
</snippet></ROW><ROW><id>19597899</id><snippet>Range: bytes=0-1024</snippet></ROW><ROW><id>19597899</id><snippet>[100:300]</snippet></ROW><ROW><id>19597899</id><snippet>Range</snippet></ROW><ROW><id>19597899</id><snippet>Content-Range</snippet></ROW><ROW><id>19597899</id><snippet>Content-Range</snippet></ROW><ROW><id>19597899</id><snippet>HEAD</snippet></ROW><ROW><id>19597899</id><snippet>Content-Length</snippet></ROW><ROW><id>19597899</id><snippet>Accept-Ranges</snippet></ROW><ROW><id>19597899</id><snippet>requests</snippet></ROW><ROW><id>19597899</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; url = 'http://example.com'
&gt;&gt;&gt; h = requests.head(url)
&gt;&gt;&gt; h.headers['Accept-Ranges']
'bytes'
&gt;&gt;&gt; h.headers['Content-Length']
'1270'
&gt;&gt;&gt; r = requests.get(url, headers={'Range': 'bytes=500-600'})
&gt;&gt;&gt; r.status_code
206
&gt;&gt;&gt; r.headers['Content-Range']
500-600/1270
&gt;&gt;&gt; len(r.text)
101
&gt;&gt;&gt; r.text
' 5em auto;\n        padding: 50px;\n        background-color: #fff;\n        border-radius: 1em;\n    }\n '
</snippet></ROW><ROW><id>19597899</id><snippet>Bytes: 500-600</snippet></ROW><ROW><id>19597899</id><snippet>range(500, 600)</snippet></ROW><ROW><id>19597906</id><snippet>def setxattr(self, path, name, value, options, position=0):
    # Ignore options
    attrs = self.files[path].setdefault('attrs', {})
    attrs[name] = value
</snippet></ROW><ROW><id>19597906</id><snippet>setdefault</snippet></ROW><ROW><id>19597906</id><snippet>self.files[path]</snippet></ROW><ROW><id>19597906</id><snippet>attrs</snippet></ROW><ROW><id>19597906</id><snippet>name</snippet></ROW><ROW><id>19597906</id><snippet>value</snippet></ROW><ROW><id>19597906</id><snippet>self.files</snippet></ROW><ROW><id>19597982</id><snippet>+</snippet></ROW><ROW><id>19597982</id><snippet>Section[\s\\n]+13[ -:\\n]+(Governmental.*?Accountability\.)
</snippet></ROW><ROW><id>19598154</id><snippet>page</snippet></ROW><ROW><id>19598154</id><snippet>page = re.sub("&amp;",'',page)
</snippet></ROW><ROW><id>19598464</id><snippet>None</snippet></ROW><ROW><id>19598464</id><snippet>&gt;&gt;&gt; td_al_center = soup.find_all('td', {'align': 'center', 'valign': None})
&gt;&gt;&gt; td_al_center
[&lt;td align="center"&gt;
foo bar
&lt;/td&gt;]
</snippet></ROW><ROW><id>19598513</id><snippet>SAES_FromStateMatrix(state_matrix)</snippet></ROW><ROW><id>19598513</id><snippet>state_matrix</snippet></ROW><ROW><id>19598513</id><snippet>SBox_matrix</snippet></ROW><ROW><id>19598536</id><snippet>conversion_factors = {
    'foot': 0.3048,  # Google search '1 foot in m'
    'yard': 0.9144,
    # etc
}

def unit_convert(number, from_unit='m', to_unit='m'):
    m = number * conversion_factor[from_unit]
    return m / conversion_factor[to_unit]
</snippet></ROW><ROW><id>19598536</id><snippet>conversion_factors = { ... }  # as above

synonyms = {
    'feet': 'foot',
    'ft': 'foot',
    ...
}

def unit_convert(number, from_unit='m', to_unit='m'):
    from_unit = synonyms.get(from_unit, from_unit)
    to_unit = synonyms.get(to_unit, to_unit)
    # etc
</snippet></ROW><ROW><id>19598536</id><snippet>conversion_factors</snippet></ROW><ROW><id>19598536</id><snippet>conversion_factors = {
    'foot': 0.3048,  # Google search '1 foot in m'
    'feet': 0.3048,
    'ft': 0.3048,
    'yard': 0.9144,
    # etc
}
</snippet></ROW><ROW><id>19598610</id><snippet>destroy</snippet></ROW><ROW><id>19598610</id><snippet>grid_remove</snippet></ROW><ROW><id>19598610</id><snippet>grid_forget</snippet></ROW><ROW><id>19598610</id><snippet>pack_forget</snippet></ROW><ROW><id>19598610</id><snippet>place_forget</snippet></ROW><ROW><id>19598709</id><snippet>def swap(a, b):
    a = np.copy(a)
    b = np.asarray(b, dtype=np.bool)
    a[b] = a[b, ::-1]  # equivalent to: a[b] = np.fliplr(a[b])
    return a

# the following is faster, but modifies the original array
def swap_inplace(a, b):
    b = np.asarray(b, dtype=np.bool)
    a[b] = a[b, ::-1]


print swap(a=[[1,2],[2,3],[3,4],[3,5],[5,6]],b=[0,0,0,1,1])
</snippet></ROW><ROW><id>19598709</id><snippet>[[1 2]
 [2 3]
 [3 4]
 [5 3]
 [6 5]]
</snippet></ROW><ROW><id>19598709</id><snippet>a</snippet></ROW><ROW><id>19598709</id><snippet>b</snippet></ROW><ROW><id>19598709</id><snippet>function     | milisec | normalized
-------------+---------+-----------
loop         | 184     | 10.
double_loop  |  84     |  4.7
pure_python  |  51     |  2.8
swap         |  18     |  1
swap_inplace |  17     |  0.95
cython       | 1.9     |  0.11
</snippet></ROW><ROW><id>19598709</id><snippet>def loop(a, b):
    a_c = np.copy(a)
    for i in xrange(a.shape[0]):
        if b[i]:
            a_c[i,:] = a[i, ::-1]

def double_loop(a, b):
    a_c = np.copy(a)
    n, m = a_c.shape
    for i in xrange(n):
        if b[i]:
            for j in xrange(m):
                a_c[i, j] = a[i, m-j-1]
    return a_c

from copy import copy
def pure_python(a, b):
    a_c = copy(a)
    n, m = len(a), len(a[0])
    for i in xrange(n):
        if b[i]:
            for j in xrange(m):
                a_c[i][j] = a[i][m-j-1]
    return a_c

import pyximport; pyximport.install()
import testcy
def cython(a, b):
    return testcy.swap(a, np.asarray(b, dtype=np.uint8))

def rand_bin_array(K, N):
    arr = np.zeros(N, dtype=np.bool)
    arr[:K]  = 1
    np.random.shuffle(arr)
    return arr

N = 100000
a = np.random.randint(0, N, (N, 2))
b = rand_bin_array(0.33*N, N)

# before timing the pure python solution I first did:
a = a.tolist()
b = b.tolist()


######### In the file testcy.pyx #########

#cython: boundscheck=False
#cython: wraparound=False

import numpy as np
cimport numpy as np

def swap(np.ndarray[np.int_t, ndim=2] a, np.ndarray[np.uint8_t, ndim=1] b):
    cdef np.ndarray[np.int_t, ndim=2] a_c
    cdef int n, m, i, j
    a_c = a.copy()
    n = a_c.shape[0]
    m = a_c.shape[1]
    for i in range(n):
        if b[i]:
            for j in range(m):
                a_c[i, j] = a[i, m-j-1]
    return a_c
</snippet></ROW><ROW><id>19598844</id><snippet>{% if thing.watchlist.user != request.user %}
</snippet></ROW><ROW><id>19598844</id><snippet>{% if request.user not in thing.watchlist.user.all %}
</snippet></ROW><ROW><id>19598844</id><snippet>.all</snippet></ROW><ROW><id>19598888</id><snippet>u, s, vh = linalg.svd(A)
print(s.max()/s.min())
# -&gt; 4.03758642411e+16
</snippet></ROW><ROW><id>19598888</id><snippet>A</snippet></ROW><ROW><id>19598888</id><snippet>linalg.inv(A)</snippet></ROW><ROW><id>19598888</id><snippet>linalg.pinv(A, 1e-8)
</snippet></ROW><ROW><id>19598888</id><snippet>1e-8</snippet></ROW><ROW><id>19598888</id><snippet>sqrt(finfo(float).eps)</snippet></ROW><ROW><id>19598888</id><snippet>u</snippet></ROW><ROW><id>19598888</id><snippet>[0, 5]</snippet></ROW><ROW><id>19599141</id><snippet>&gt;&gt;&gt; t1 = df1[["start", "end"]]
&gt;&gt;&gt; t2 = df2[["start", "end"]]
&gt;&gt;&gt; f = t2.apply(lambda x2: t1.apply(lambda x1: x1.isin(x2).all(), axis=1).any(), axis=1)
&gt;&gt;&gt; df2[~f]
    end  pkid  start
2  2010   NaN   2010
</snippet></ROW><ROW><id>19599141</id><snippet>not exists</snippet></ROW><ROW><id>19599141</id><snippet>select *
from df2
where not exists (select * from df1 where df1.start = df2.start and df1.end = df2.end)
</snippet></ROW><ROW><id>19599141</id><snippet>left outer join</snippet></ROW><ROW><id>19599141</id><snippet>where</snippet></ROW><ROW><id>19599141</id><snippet>select *
from df1
    left outer join df1 on df1.start = df2.start and df1.end = df1.end
where df1.&lt;key&gt; is null
</snippet></ROW><ROW><id>19599141</id><snippet>&gt;&gt;&gt; m = pd.merge(df2, df1, how='left', on=['end','start'], suffixes=['','_r'])
&gt;&gt;&gt; df2[m['pkid_r'].isnull()]
    end  pkid  start
2  2010   NaN   2010
</snippet></ROW><ROW><id>19599253</id><snippet>class MobileAppAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        form = super(MobileAppAdmin, self).get_form(request, obj, **kwargs)
        if request.method == 'GET':
            if obj:
                form.base_fields['images'].queryset = Image.objects.filter(pk__in=obj.images.all())
            else:
                form.base_fields['images'].queryset = Image.objects.filter(pk=0)
        return form
</snippet></ROW><ROW><id>19599293</id><snippet>from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button

class MainMenu(Screen):
    def __init__(self, **kwargs):
        super(MainMenu, self).__init__(**kwargs)
        self.add_widget(Button(text = 'test'))      


class Sis(App):
     def build(self):
         root = ScreenManager()
         root.add_widget(MainMenu(name = 'mainMenu'))
         root.current = 'mainMenu'
         return root

Sis().run()
</snippet></ROW><ROW><id>19599379</id><snippet>...
s.connect((HOST, PORT))
</snippet></ROW><ROW><id>19599379</id><snippet>HOST = ""</snippet></ROW><ROW><id>19599379</id><snippet>HOST = ""</snippet></ROW><ROW><id>19599379</id><snippet>HOST = "localhost"</snippet></ROW><ROW><id>19599379</id><snippet>HOST = "someaddr.com"</snippet></ROW><ROW><id>19599457</id><snippet>$.ajax({
data: arrObj,
...
</snippet></ROW><ROW><id>19599537</id><snippet>import functools

def conditional_memoize(fn):
    cache = {}

    @functools.wraps(fn)
    def wrapper(*args, **kwargs):
        key = args + tuple(sorted(kwargs.iteritems()))
        if key in cache:
            return cache[key]
        result, flag = fn(*args, **kwargs)
        if flag:
            cache[key] = result
        return result

    return wrapper
</snippet></ROW><ROW><id>19599652</id><snippet>&gt;&gt;&gt; a.reshape(-1,a.shape[-1])
array([[1, 2],
       [3, 4],
       [1, 2],
       [3, 4]])
</snippet></ROW><ROW><id>19599652</id><snippet>&gt;&gt;&gt; a.ravel()
array([1, 2, 3, 4, 1, 2, 3, 4])
</snippet></ROW><ROW><id>19599652</id><snippet>&gt;&gt;&gt; a.flatten()
array([1, 2, 3, 4, 1, 2, 3, 4])
</snippet></ROW><ROW><id>19599661</id><snippet>squeeze</snippet></ROW><ROW><id>19599661</id><snippet>df[df["location"] == "c"].squeeze()
Out[5]: 
date        20130102
location           c
Name: 2, dtype: object
</snippet></ROW><ROW><id>19599667</id><snippet>if minorallelefreq[x] &lt;= int(0.1):
    minprop = minprop + 1 
if minorallelefreq[x] &gt; 0.1 and minorallelefreq[x] &lt;= 0.2: 
    minprop1 = minprop1 + 1 
</snippet></ROW><ROW><id>19599667</id><snippet>int()</snippet></ROW><ROW><id>19599667</id><snippet>if minorallelefreq[x] &gt; 0.4 and minorallelefreq[x] &lt;= 0.4:  # never True
    minprop4 = minprop4 + 1                                 # indentation??
</snippet></ROW><ROW><id>19599667</id><snippet>if 0.1 &lt; minorallelefreq[x] &lt;= 0.2:   # much easier to read, and faster.
    # etc.
</snippet></ROW><ROW><id>19599929</id><snippet>seek()</snippet></ROW><ROW><id>19600054</id><snippet>nbytes</snippet></ROW><ROW><id>19600054</id><snippet>In [8]: np.uint8(0).nbytes
Out[8]: 1

In [9]: np.uint16(0).nbytes
Out[9]: 2

In [10]: np.uint32(0).nbytes
Out[10]: 4
</snippet></ROW><ROW><id>19600054</id><snippet>itemsize</snippet></ROW><ROW><id>19600054</id><snippet>nbytes</snippet></ROW><ROW><id>19600054</id><snippet>In [13]: np.int32().itemsize
Out[13]: 4
</snippet></ROW><ROW><id>19600054</id><snippet>dtype</snippet></ROW><ROW><id>19600054</id><snippet>itemsize</snippet></ROW><ROW><id>19600054</id><snippet>In [14]: dt = np.dtype(np.int32)

In [15]: dt.itemsize
Out[15]: 4
</snippet></ROW><ROW><id>19600054</id><snippet>dtype</snippet></ROW><ROW><id>19600066</id><snippet>ECONNRESET</snippet></ROW><ROW><id>19600091</id><snippet>"rgb\([^)]*\)|\S+"</snippet></ROW><ROW><id>19600136</id><snippet>with open('originalfile.csv','r') as f:
  with open('newfile.csv','w') as new_file:
    for row in f:
      if not is_junk(row):
        new_file.write(row)


def is_junk(row):
  return not row.strip() or ( not ( ("Retail" in row ) or is_float(row.split()[-1]) ) )

def is_float(str):
  try:
    float(str)
    return True
  except ValueError:
    return False
</snippet></ROW><ROW><id>19600210</id><snippet>import urlib.parse, json
cookie_data = urllib.parse.quote(json.dumps(mydict))
</snippet></ROW><ROW><id>19600210</id><snippet>var dict = $.parseJSON($.cookie('MyCookie'));
</snippet></ROW><ROW><id>19600228</id><snippet>allow_characters</snippet></ROW><ROW><id>19600228</id><snippet>''.join()</snippet></ROW><ROW><id>19600228</id><snippet>s</snippet></ROW><ROW><id>19600228</id><snippet>allow_char_set = set(allow_characters)
s = ''.join(c for c in s if c in allow_char_set)
</snippet></ROW><ROW><id>19600228</id><snippet>s = re.sub(r'[^#.\-_a-zA-Z0-9]+', '', s)
</snippet></ROW><ROW><id>19600228</id><snippet>allow_characters</snippet></ROW><ROW><id>19600228</id><snippet>str.translate()</snippet></ROW><ROW><id>19600228</id><snippet>import string

allow_characters = "#.-_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
all_characters = string.maketrans('', '')
delete_characters = all_characters.translate(None, allow_characters)

s = s.translate(None, delete_characters)
</snippet></ROW><ROW><id>19600349</id><snippet>ref</snippet></ROW><ROW><id>19600349</id><snippet>out</snippet></ROW><ROW><id>19600349</id><snippet>clr.Reference[T]</snippet></ROW><ROW><id>19600349</id><snippet>itemIDs, itemNames = GetItems()
</snippet></ROW><ROW><id>19600349</id><snippet>itemIDsRef = clr.Reference[Array[int]]()
itemNamesRef = clr.Reference[Array[String]]()
GetItems(itemIDs, itemNames)
itemIDs, itemNames = itemIDsRef.Value, itemNamesRef.Value
</snippet></ROW><ROW><id>19600349</id><snippet>out</snippet></ROW><ROW><id>19600349</id><snippet>ref</snippet></ROW><ROW><id>19600349</id><snippet>void</snippet></ROW><ROW><id>19600349</id><snippet>ref</snippet></ROW><ROW><id>19600349</id><snippet>out</snippet></ROW><ROW><id>19600349</id><snippet>None</snippet></ROW><ROW><id>19600349</id><snippet>ref</snippet></ROW><ROW><id>19600349</id><snippet>out</snippet></ROW><ROW><id>19600349</id><snippet>_, itemIDs, itemNames = GetItems()
</snippet></ROW><ROW><id>19600349</id><snippet>IEnumerable</snippet></ROW><ROW><id>19600349</id><snippet>Array</snippet></ROW><ROW><id>19600349</id><snippet>for itemID, itemName in zip(itemIDs, itemNames):
    print itemID, itemName
</snippet></ROW><ROW><id>19600349</id><snippet>Int32</snippet></ROW><ROW><id>19600349</id><snippet>String</snippet></ROW><ROW><id>19600349</id><snippet>int</snippet></ROW><ROW><id>19600349</id><snippet>long</snippet></ROW><ROW><id>19600349</id><snippet>str</snippet></ROW><ROW><id>19600349</id><snippet>unicode</snippet></ROW><ROW><id>19600349</id><snippet>map</snippet></ROW><ROW><id>19600349</id><snippet>Array</snippet></ROW><ROW><id>19600349</id><snippet>IEnumerable</snippet></ROW><ROW><id>19600349</id><snippet>long</snippet></ROW><ROW><id>19600349</id><snippet>unicode</snippet></ROW><ROW><id>19600349</id><snippet>Int32</snippet></ROW><ROW><id>19600349</id><snippet>String</snippet></ROW><ROW><id>19600349</id><snippet>itemIDs = map(int, itemIDs)
itemNames = map(unicode, itemNames)
</snippet></ROW><ROW><id>19600494</id><snippet>whoami</snippet></ROW><ROW><id>19600494</id><snippet>&gt;&gt;&gt; print os.getuid()
0
</snippet></ROW><ROW><id>19600494</id><snippet>&gt;&gt;&gt; cmd = "whoami"
&gt;&gt;&gt; proc = subprocess.Popen(cmd, preexec_fn=demote(1000), stdout=subprocess.PIPE, shell=True)
&gt;&gt;&gt; output = proc.communicate()[0]
&gt;&gt;&gt; print output
voodoonofx
</snippet></ROW><ROW><id>19600494</id><snippet>  __init__(self, args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)
      Create new Popen instance.
</snippet></ROW><ROW><id>19600562</id><snippet>file</snippet></ROW><ROW><id>19600562</id><snippet>io</snippet></ROW><ROW><id>19600562</id><snippet>readline</snippet></ROW><ROW><id>19600562</id><snippet>for line in file</snippet></ROW><ROW><id>19600562</id><snippet>readline</snippet></ROW><ROW><id>19600562</id><snippet>def delimited(file, delimiter='\n', bufsize=4096):
    buf = ''
    while True:
        newbuf = file.read(bufsize)
        if not newbuf:
            yield buf
            return
        buf += newbuf
        lines = buf.split(delimiter)
        for line in lines[:-1]:
            yield line
        buf = lines[-1]
</snippet></ROW><ROW><id>19600562</id><snippet>&gt;&gt;&gt; s = io.StringIO('abcZZZdefZZZghiZZZjklZZZmnoZZZpqr')
&gt;&gt;&gt; d = delimited(s, 'ZZZ', bufsize=2)
&gt;&gt;&gt; list(d)
['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']
</snippet></ROW><ROW><id>19600562</id><snippet>io</snippet></ROW><ROW><id>19600562</id><snippet>BufferedIOBase</snippet></ROW><ROW><id>19600562</id><snippet>io</snippet></ROW><ROW><id>19600744</id><snippet>setuptools</snippet></ROW><ROW><id>19600744</id><snippet>pkg_resources</snippet></ROW><ROW><id>19600744</id><snippet>import pkg_resources
my_stream = pkg_resources.resource_stream(__name__, "foo.dat")
</snippet></ROW><ROW><id>19600744</id><snippet>my.package/my/package/foo.dat</snippet></ROW><ROW><id>19600744</id><snippet>my_stream</snippet></ROW><ROW><id>19600744</id><snippet>setuptools</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>def worker():
    while True:
        crunchData()

# ... somewhere in the daemon startup code ...
t = threading.Thread(target=worker)
t.daemon = True
t.start()
</snippet></ROW><ROW><id>19600829</id><snippet>t.daemon</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>quitflag = False
quitlock = threading.Lock()

def worker():
    while True:
        with quitlock:
            if quitflag:
                return
        crunchData()

# ... somewhere in the daemon startup code ...
t = threading.Thread(target=worker)
t.start()

# ... somewhere in the daemon shutdown code ...
with quitlock:
    quitflag = True
t.join()
</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>quitFlag</snippet></ROW><ROW><id>19600829</id><snippet>Lock</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>currentData = newData</snippet></ROW><ROW><id>19600829</id><snippet>Queue</snippet></ROW><ROW><id>19600829</id><snippet>crunchData</snippet></ROW><ROW><id>19600829</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>19600829</id><snippet>Thread</snippet></ROW><ROW><id>19600942</id><snippet>elif current_time != the_time:
    #message IS new
    #Shell script to run text-to-speech
    subprocess.call(['/home/pi/./speech.sh',speak_message])
    the_time = current_time
</snippet></ROW><ROW><id>19600942</id><snippet>the_time</snippet></ROW><ROW><id>19600942</id><snippet>showmessage</snippet></ROW><ROW><id>19600942</id><snippet>the_time</snippet></ROW><ROW><id>19600942</id><snippet>def showmessage():
    global the_time
    #all other stuff
</snippet></ROW><ROW><id>19600996</id><snippet>&gt;&gt;&gt; help(urllib.urlopen)
urlopen(url, data=None, proxies=None)
    Create a file-like object for the specified URL to read from.
</snippet></ROW><ROW><id>19600996</id><snippet>def geturl(Address, FileName):
    html_data = urllib.urlopen(Address).read()  # Open the URL
    with open(FileName, 'wb') as f:  # Open the file
        f.write(html_data)  # Write data from URL to file

geturl(u'http://roblox.com')  # URL's must contain the full URI, including http://
</snippet></ROW><ROW><id>19601128</id><snippet>my_string = "StopAndSmellTheRoses"
i = 0
result = ""
for c in my_string:
    if c.isupper() and i &gt; 0:
        result += " "
        result += c.lower()
    else:
        result += c
    i += 1

print result
</snippet></ROW><ROW><id>19601128</id><snippet>c</snippet></ROW><ROW><id>19601128</id><snippet>i</snippet></ROW><ROW><id>19601128</id><snippet>i</snippet></ROW><ROW><id>19601128</id><snippet>i += 1</snippet></ROW><ROW><id>19601155</id><snippet>driver.findElement(By.linkText("Send InMail")).click();
</snippet></ROW><ROW><id>19601182</id><snippet> $ curl --tlsv1 -k https://matriculaweb.unb.br/matriculaweb/graduacao/oferta_campus.aspx

 $ curl --sslv2 -k https://matriculaweb.unb.br/matriculaweb/graduacao/oferta_campus.aspx

 $ curl --sslv3 -k https://matriculaweb.unb.br/matriculaweb/graduacao/oferta_campus.aspx
</snippet></ROW><ROW><id>19601182</id><snippet># file: myproject/contextfactory.py
 from OpenSSL import SSL
 from scrapy.core.downloader.contextfactory import ClientContextFactory


 class MyClientContextFactory(ClientContextFactory):
     def __init__(self):
         self.method = SSL.SSLv23_METHOD  # or SSL.SSLv3_METHOD
</snippet></ROW><ROW><id>19601182</id><snippet>DOWNLOADER_CLIENTCONTEXTFACTORY = 'myproject.contextfactory.MyClientContextFactory'
</snippet></ROW><ROW><id>19601182</id><snippet>$ scrapy shell https://matriculaweb.unb.br/matriculaweb/graduacao/oferta_campus.aspx
</snippet></ROW><ROW><id>19601382</id><snippet>cdecl</snippet></ROW><ROW><id>19601382</id><snippet>stdcall</snippet></ROW><ROW><id>19601382</id><snippet>SwitchOn</snippet></ROW><ROW><id>19601382</id><snippet>error</snippet></ROW><ROW><id>19601382</id><snippet>SwitchOn</snippet></ROW><ROW><id>19601382</id><snippet>ffi.verify</snippet></ROW><ROW><id>19601395</id><snippet>query_dict</snippet></ROW><ROW><id>19601395</id><snippet>veggies</snippet></ROW><ROW><id>19601395</id><snippet>fruits</snippet></ROW><ROW><id>19601395</id><snippet>query_dict</snippet></ROW><ROW><id>19601395</id><snippet>veggies</snippet></ROW><ROW><id>19601395</id><snippet>fruits</snippet></ROW><ROW><id>19601395</id><snippet>veggies = []
fruits = []

for x in query_dict:
    if re.search('veggies',x['url']):
         veggies.append(x)
    if re.search('fruits',x['url']):
         fruits.append(x)
</snippet></ROW><ROW><id>19601395</id><snippet>csv.DictReader()</snippet></ROW><ROW><id>19601395</id><snippet>fruits</snippet></ROW><ROW><id>19601395</id><snippet>query_dict = csv.DictReader(query,fieldnames=('ip','na-1','na-2','time', 'zone', 'url', 'refer', 'client'),quotechar='"',delimiter=" ")
veggies = [ x for x in query_dict if re.search('veggies',x['url']) ]
query_dict = csv.DictReader(query,fieldnames=('ip','na-1','na-2','time', 'zone', 'url', 'refer', 'client'),quotechar='"',delimiter=" ")
fruits = [ x for x in query_dict if re.search('fruits',x['url']) ]
</snippet></ROW><ROW><id>19601395</id><snippet>itertools.tee()</snippet></ROW><ROW><id>19601395</id><snippet>from itertools import tee
veggies_query_dict, fruits_query_dict = tee(query_dict)
veggies = [ x for x in veggies_query_dict if re.search('veggies',x['url']) ]
fruits = [ x for x in fruits_query_dict if re.search('fruits',x['url']) ]
</snippet></ROW><ROW><id>19601395</id><snippet>query_dict</snippet></ROW><ROW><id>19601395</id><snippet>tee</snippet></ROW><ROW><id>19601395</id><snippet>fruits</snippet></ROW><ROW><id>19601434</id><snippet>def __unicode__(self):
     return '%s' % (self.user)
</snippet></ROW><ROW><id>19601447</id><snippet>common_imports.py</snippet></ROW><ROW><id>19601447</id><snippet>from datetime import date, datetime, timedelta
import numpy as  np
import argparse
...
</snippet></ROW><ROW><id>19601447</id><snippet>main_module.py</snippet></ROW><ROW><id>19601447</id><snippet>from common_import import *

a = np.array([])  # works fine
</snippet></ROW><ROW><id>19601483</id><snippet>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | python
</snippet></ROW><ROW><id>19601483</id><snippet>wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | python2.7
</snippet></ROW><ROW><id>19601646</id><snippet>elem.clear</snippet></ROW><ROW><id>19601646</id><snippet>clear</snippet></ROW><ROW><id>19601646</id><snippet>del elem.getparent()[0]</snippet></ROW><ROW><id>19601646</id><snippet>while</snippet></ROW><ROW><id>19601646</id><snippet>start</snippet></ROW><ROW><id>19601646</id><snippet>end</snippet></ROW><ROW><id>19601646</id><snippet>start</snippet></ROW><ROW><id>19601646</id><snippet>end</snippet></ROW><ROW><id>19601646</id><snippet>context</snippet></ROW><ROW><id>19601646</id><snippet>iterparse</snippet></ROW><ROW><id>19601646</id><snippet>start</snippet></ROW><ROW><id>19601646</id><snippet>end</snippet></ROW><ROW><id>19601646</id><snippet>func</snippet></ROW><ROW><id>19601646</id><snippet>iterparse</snippet></ROW><ROW><id>19601646</id><snippet>while</snippet></ROW><ROW><id>19601646</id><snippet>if</snippet></ROW><ROW><id>19601646</id><snippet>while</snippet></ROW><ROW><id>19601646</id><snippet>if</snippet></ROW><ROW><id>19601646</id><snippet>start</snippet></ROW><ROW><id>19601646</id><snippet>end</snippet></ROW><ROW><id>19601798</id><snippet>    if sys.version_info &lt; (2, 6):
</snippet></ROW><ROW><id>19601798</id><snippet>&lt;</snippet></ROW><ROW><id>19601798</id><snippet>urllib2.urlopen(url['href']).read()
</snippet></ROW><ROW><id>19601813</id><snippet>def all(list, condition):
  for a in list:
    if not condition(a):
      return false
  return true
</snippet></ROW><ROW><id>19601813</id><snippet>def any(list, condition):
  for a in list:
    if condition(a):
      return true
  return false
</snippet></ROW><ROW><id>19601813</id><snippet>all</snippet></ROW><ROW><id>19601813</id><snippet>any</snippet></ROW><ROW><id>19601841</id><snippet>ben.displayPerson</snippet></ROW><ROW><id>19601841</id><snippet>conn.execute("insert into people values (?, ?, ?, ?)", (ben.displayPerson()))
</snippet></ROW><ROW><id>19601841</id><snippet>conn.execute("insert into people values (?, ?, ?, ?)", ben.displayPerson())
</snippet></ROW><ROW><id>19601967</id><snippet>import java.math.BigInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SignatureFromPython {
    private static final Pattern PAT = Pattern.compile("\\[(\\d+)\\]");

    private static byte[] i2osp(final BigInteger i, final int bitSize) {
        if (i == null || i.signum() == -1) {
            throw new IllegalArgumentException(
                    "input parameter should not be null or negative");
        }

        if (bitSize &lt; Byte.SIZE) {
            throw new IllegalArgumentException(
                    "bitSize parameter should not be negative and a multiple of 8");
        }

        final int byteSize = (bitSize - 1) / Byte.SIZE + 1;
        final byte[] signedBigEndian = i.toByteArray();
        final int signedBigEndianLength = signedBigEndian.length;
        if (signedBigEndianLength == byteSize) {
            return signedBigEndian;
        }

        final byte[] leftPadded = new byte[byteSize];

        if (signedBigEndianLength == byteSize + 1) {
            System.arraycopy(signedBigEndian, 1, leftPadded, 0, byteSize);
        } else if (signedBigEndianLength &lt; byteSize) {
            System.arraycopy(signedBigEndian, 0, leftPadded, byteSize
                    - signedBigEndianLength, signedBigEndianLength);
        } else {
            throw new IllegalArgumentException(
                    "Integer i is too large to fit into " + bitSize + " bits");
        }
        return leftPadded;
    }

    public static String toHex(final byte[] data) {
        final StringBuilder hex = new StringBuilder(data.length * 2);
        for (int i = 0; i &lt; data.length; i++) {
            hex.append(String.format("%02X", data[i]));
        }
        return hex.toString();
    }

    public static void main(String[] args) {
        String sigString = "[68830459489863257411523011520104203035626147084548742757940226446079486348431212041096334237130703774949375015187747280487790006116898192460644067270457728626039524097117092304115366780581423597886886987279231850120937691165013216970647150989646220735762034864029622135210042186666476516651349805320771941650]";
        Matcher sigMatcher = PAT.matcher(sigString);
        if (!sigMatcher.matches()) {
            throw new IllegalArgumentException("Whatever");
        }
        BigInteger sigBI = new BigInteger(sigMatcher.group(1));
        // requires bouncy castle libraries
        System.out.println(toHex(i2osp(sigBI, 1024)));
    }
}
</snippet></ROW><ROW><id>19601967</id><snippet>privateKey.sign(hash,'')</snippet></ROW><ROW><id>19601993</id><snippet>(w,li=[])</snippet></ROW><ROW><id>19602014</id><snippet>        if len(set(substr)) != (end - start): # found duplicates or EOS
            break
        if (ord(max(sorted(substr))) - ord(min(sorted(substr))) + 1) == len(substr):
</snippet></ROW><ROW><id>19602014</id><snippet>        if len(substr) != (end - start): # found duplicates or EOS
            break
        if sorted(substr) == list(substr):
</snippet></ROW><ROW><id>19602014</id><snippet>ccl</snippet></ROW><ROW><id>19602037</id><snippet>to_decorate = []

def decorate_later(func):
    to_decorate.append(func)
    return func

@decorate_later
def do_stuff(*args, **kw):
    print('I am doing stuff')
@decorate_later
def do_more_stuff(*args, **kw):
    print('Even more stuff')

def apply_decorator(decorator):
    for func in to_decorate:
        globals()[func.func_name] = decorator(func)
</snippet></ROW><ROW><id>19602037</id><snippet>decorate_later</snippet></ROW><ROW><id>19602037</id><snippet>apply_decorator()</snippet></ROW><ROW><id>19602037</id><snippet>@decorate_later</snippet></ROW><ROW><id>19602063</id><snippet>normalizer</snippet></ROW><ROW><id>19602063</id><snippet>with open('text.txt') as fin:
    Nwords = trian(normalizer(word) for ln in fin for word in ln.split()))
</snippet></ROW><ROW><id>19602063</id><snippet>Counter</snippet></ROW><ROW><id>19602209</id><snippet>None</snippet></ROW><ROW><id>19602209</id><snippet>np.newaxis</snippet></ROW><ROW><id>19602209</id><snippet>In [6]: data - vector[:,None]
Out[6]:
array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]])

In [7]: data / vector[:,None]
Out[7]:
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1]])
</snippet></ROW><ROW><id>19602304</id><snippet>»</snippet></ROW><ROW><id>19602304</id><snippet>lxml</snippet></ROW><ROW><id>19602304</id><snippet>\xbb</snippet></ROW><ROW><id>19602304</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>19602304</id><snippet>iso8859-2</snippet></ROW><ROW><id>19602304</id><snippet>\xbb</snippet></ROW><ROW><id>19602304</id><snippet>&gt;&gt;&gt; u'\xbb'.encode('iso8859-2')
...
UnicodeEncodeError: 'charmap' codec can't encode character u'\xbb' in position 0: character maps to &lt;undefined&gt;
</snippet></ROW><ROW><id>19602304</id><snippet>utf8</snippet></ROW><ROW><id>19602304</id><snippet># file: myproject/middlewares.py

class ForceUTF8Response(object):
    """A downloader middleware to force utf8 encoding for all responses."""

    def process_response(self, request, response, spider):
        ubody = response.body_as_unicode().encode('utf8')
        return response.replace(body=ubody, encoding='utf8')
</snippet></ROW><ROW><id>19602304</id><snippet>DOWNLOADER_MIDDLEWARES = {
    'myproject.middlewares.ForceUTF8Response': 100,
}
</snippet></ROW><ROW><id>19602364</id><snippet>^( {4})*#(\s.*\S)?$
</snippet></ROW><ROW><id>19602364</id><snippet>(\s.*\S)?</snippet></ROW><ROW><id>19602364</id><snippet>(\s+\S(.*\S)?)?</snippet></ROW><ROW><id>19602364</id><snippet>\s+</snippet></ROW><ROW><id>19602364</id><snippet>\s(\s)*</snippet></ROW><ROW><id>19602364</id><snippet>\S(.*\S)?</snippet></ROW><ROW><id>19602364</id><snippet>\S</snippet></ROW><ROW><id>19602364</id><snippet>\S.*\S</snippet></ROW><ROW><id>19602364</id><snippet>(\S.*)?\S</snippet></ROW><ROW><id>19602364</id><snippet>(\s+\S(.*\S)?)?</snippet></ROW><ROW><id>19602364</id><snippet>(\s(\s)*(\S.*)?\S)?</snippet></ROW><ROW><id>19602364</id><snippet>(\s.*\S)?</snippet></ROW><ROW><id>19602364</id><snippet>(\s)*(\S.*)?</snippet></ROW><ROW><id>19602364</id><snippet>.*</snippet></ROW><ROW><id>19602405</id><snippet> letter.strip() == "E" or "e":
 #                      ^^^^ always True  
</snippet></ROW><ROW><id>19602405</id><snippet> letter.strip() in ["E", "e"]:
</snippet></ROW><ROW><id>19602405</id><snippet>&gt;&gt;&gt; bool("") # bool of empty string 
False
&gt;&gt;&gt; bool(" ") # bool of non-empty string 
True
&gt;&gt;&gt; bool("e")
True
</snippet></ROW><ROW><id>19602405</id><snippet>letter.strip() == "E" or "e":</snippet></ROW><ROW><id>19602405</id><snippet>letter.strip() == "E" or True:</snippet></ROW><ROW><id>19602405</id><snippet>Ture</snippet></ROW><ROW><id>19602405</id><snippet>letter.strip().lower() == 'e':
</snippet></ROW><ROW><id>19602566</id><snippet>html_doc = """
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;

&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;

&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were
&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,
&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and
&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class="story"&gt;...&lt;/p&gt;
"""

from bs4 import BeautifulSoup
soup = BeautifulSoup(html_doc)
head = soup.head

print head.contents
</snippet></ROW><ROW><id>19602566</id><snippet>[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</snippet></ROW><ROW><id>19602566</id><snippet>head</snippet></ROW><ROW><id>19602566</id><snippet>[0]</snippet></ROW><ROW><id>19602566</id><snippet>soup.contents[0].contents[0].contents[0].contents[0]</snippet></ROW><ROW><id>19602566</id><snippet>Page Title</snippet></ROW><ROW><id>19602566</id><snippet>contents[0]</snippet></ROW><ROW><id>19602566</id><snippet>head</snippet></ROW><ROW><id>19602566</id><snippet>title</snippet></ROW><ROW><id>19602566</id><snippet>name</snippet></ROW><ROW><id>19602566</id><snippet>soup = BeautifulSoup(''.join(doc))
print soup.body
</snippet></ROW><ROW><id>19602566</id><snippet>body</snippet></ROW><ROW><id>19602566</id><snippet>contents</snippet></ROW><ROW><id>19602566</id><snippet>soup = BeautifulSoup(''.join(doc))
print soup.contents[0].contents[1].name
</snippet></ROW><ROW><id>19602566</id><snippet>[0]</snippet></ROW><ROW><id>19602566</id><snippet>body</snippet></ROW><ROW><id>19602566</id><snippet>head</snippet></ROW><ROW><id>19602998</id><snippet>numpy.array</snippet></ROW><ROW><id>19602998</id><snippet>first_elements = [e[0] for e in list1]
</snippet></ROW><ROW><id>19602998</id><snippet>list1</snippet></ROW><ROW><id>19602998</id><snippet>first_elements</snippet></ROW><ROW><id>19602998</id><snippet>list1</snippet></ROW><ROW><id>19602998</id><snippet>first_elements = []
for arr in list1:
    first_elements.append(arr[0])
</snippet></ROW><ROW><id>19603003</id><snippet>import urllib
urllib.urlretrieve ("http://randomsite.com/file.gz", "file.gz")
</snippet></ROW><ROW><id>19603003</id><snippet>EDIT:</snippet></ROW><ROW><id>19603051</id><snippet>mod_python</snippet></ROW><ROW><id>19603142</id><snippet>from itertools import izip_longest

inc_data = [[u'Period Ending', u'Dec 31, 2012', u'Dec 31, 2011', u'Dec 31, 2010'],
            [u'Total Revenue\n', u'104,507,100\n', u'106,916,100\n', u'99,870,100\n'],
            [u'Cost of Revenue\n',u'56,000,000\n']
            ]

print list(izip_longest(*inc_data, fillvalue=u'')) 


# [(u'Period Ending', u'Total Revenue\n', u'Cost of Revenue\n'), 
   (u'Dec 31, 2012', u'104,507,100\n', u'56,000,000\n'), 
   (u'Dec 31, 2011', u'106,916,100\n', u''), 
   (u'Dec 31, 2010', u'99,870,100\n', u'')]
</snippet></ROW><ROW><id>19603181</id><snippet>if board[move] == user_team or computer_team:
</snippet></ROW><ROW><id>19603181</id><snippet>if board[move] in [user_team, computer_team]:
</snippet></ROW><ROW><id>19603181</id><snippet>if board[move] == user_team or computer_team</snippet></ROW><ROW><id>19603181</id><snippet>(board[move] == user_team) or (computer_team)</snippet></ROW><ROW><id>19603181</id><snippet>computer_team</snippet></ROW><ROW><id>19603181</id><snippet>in</snippet></ROW><ROW><id>19603181</id><snippet>board[move]</snippet></ROW><ROW><id>19603181</id><snippet>user_team</snippet></ROW><ROW><id>19603181</id><snippet>computer_team</snippet></ROW><ROW><id>19603313</id><snippet>handlers
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: .*
  script: main.app

libraries:
- name: webapp2
  version: "2.5.2"
- name: jinja2
  version: "2.7"
- name: markupsafe
  version: "0.18"
</snippet></ROW><ROW><id>19603406</id><snippet>itertools.combinations_with_replacement</snippet></ROW><ROW><id>19603406</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.combinations_with_replacement([1,2,3], 2))
[(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]
</snippet></ROW><ROW><id>19603520</id><snippet>itertools.product</snippet></ROW><ROW><id>19603520</id><snippet>[''.join(map(str,tup)) for tup in product(range(3),repeat=4)]
</snippet></ROW><ROW><id>19603520</id><snippet>join(map(str...</snippet></ROW><ROW><id>19603520</id><snippet>list(product(range(4),repeat=3))
</snippet></ROW><ROW><id>19604070</id><snippet>grep -lr "pattern" /mydirectory/*
</snippet></ROW><ROW><id>19604071</id><snippet>a</snippet></ROW><ROW><id>19604071</id><snippet>b</snippet></ROW><ROW><id>19604071</id><snippet>a</snippet></ROW><ROW><id>19604071</id><snippet>b</snippet></ROW><ROW><id>19604071</id><snippet>np.array([np.dot(x,y) for x,y in zip(a,b)])
</snippet></ROW><ROW><id>19604071</id><snippet>X = np.zeros((2,2))
for i in range(2):
    X[i,...] = np.dot(a[i],b[i])
</snippet></ROW><ROW><id>19604071</id><snippet>dot</snippet></ROW><ROW><id>19604071</id><snippet>einsum</snippet></ROW><ROW><id>19604071</id><snippet>[np.einsum('ij,j-&gt;i',x,y) for x,y in zip(a,b)]
</snippet></ROW><ROW><id>19604071</id><snippet>np.einsum('kij,kj-&gt;ki',a,b)
</snippet></ROW><ROW><id>19604071</id><snippet>einsum</snippet></ROW><ROW><id>19604071</id><snippet>A, B = np.array(a), np.array(b)    
np.multiply(A,B[:,np.newaxis,:]).sum(axis=2)
(A*B[:,None,:]).sum(2)
np.dot(A,B.T)[0,...]
np.tensordot(b,a,(-1,-1))[:,0,:]
</snippet></ROW><ROW><id>19604071</id><snippet>A</snippet></ROW><ROW><id>19604071</id><snippet>(2,3,4)</snippet></ROW><ROW><id>19604071</id><snippet>B</snippet></ROW><ROW><id>19604071</id><snippet>(2,4)</snippet></ROW><ROW><id>19604071</id><snippet>np.nditer</snippet></ROW><ROW><id>19604071</id><snippet>einsum</snippet></ROW><ROW><id>19604071</id><snippet>it = np.nditer([A, B, None],flags=['external_loop'],
    op_axes=[[0,1,2], [0,-1,1], None])
for x,y,w in it:
    # x, y are shape (2,)
    w[...] = np.dot(x,y)
it.operands[2][...,0]
</snippet></ROW><ROW><id>19604071</id><snippet>[...,0]</snippet></ROW><ROW><id>19604071</id><snippet>C = np.zeros((2,2))
it = np.nditer([A, B, C],flags=['external_loop','reduce_ok'],
    op_axes=[[0,1,2], [0,-1,1], [0,1,-1]],
    op_flags=[['readonly'],['readonly'],['readwrite']])
for x,y,w in it:
    w[...] = np.dot(x,y)
    # w[...] += x*y 
print C
# array([[  7.,  15.],[ 14.,  32.]])
</snippet></ROW><ROW><id>19604092</id><snippet>.create_text()</snippet></ROW><ROW><id>19604092</id><snippet>from Tkinter import *

root = Tk()

canvas = Canvas(root)
canvas.grid()

canvas.create_line(0, 0, 20, 20, fill='green', width=2, tags='line1')
canvas.create_line(30, 30, 40, 40, fill='red', width=2, tags='line2')
canvas.create_line(50, 50, 60, 60, fill='blue', width=2,tags='line3')

legend_text = """
-------------------
|   ------     line1    |
|   ------     line2    |
|   ------     line3    |
-------------------"""

legend_frame = LabelFrame(canvas,text='Legend',padx=5, pady=5)
legend_label = Label(legend_frame,text=legend_text)
legend_label.pack()

canvas.create_window(120,200,window=legend_frame,anchor=E)

root.mainloop()
</snippet></ROW><ROW><id>19604092</id><snippet>—</snippet></ROW><ROW><id>19604092</id><snippet>-</snippet></ROW><ROW><id>19604421</id><snippet>### foo/bar/schema.py
def some_function():
    pass
class SomeSchema:
    fcnt = some_function


### another/file.py
from foo.bar import schema

# do something with SomeSchema:
smth = schema.SomeSchema()
smth.fcnt()
</snippet></ROW><ROW><id>19604421</id><snippet>SomeSchema</snippet></ROW><ROW><id>19604421</id><snippet>schema.SomeSchema</snippet></ROW><ROW><id>19604421</id><snippet>### another/file.py
from foo.bar.schema import SomeSchema

# do something with SomeSchema:
smth = SomeSchema()
smth.fcnt()
</snippet></ROW><ROW><id>19604421</id><snippet>PascalCase</snippet></ROW><ROW><id>19604421</id><snippet>object</snippet></ROW><ROW><id>19604421</id><snippet>class fake_namespace:
    def some_function():
        pass
    class RealClass:
        some_function  # &lt;-- that name is not even visibile here;
                       # you'd have to use fake_namespace.some_function instead
</snippet></ROW><ROW><id>19604421</id><snippet>lowercase</snippet></ROW><ROW><id>19604421</id><snippet>PascalCase</snippet></ROW><ROW><id>19604421</id><snippet>schema1/class1.py</snippet></ROW><ROW><id>19604421</id><snippet>schema/class2.py</snippet></ROW><ROW><id>19604421</id><snippet>schema/__init__.py</snippet></ROW><ROW><id>19604421</id><snippet>schema</snippet></ROW><ROW><id>19604421</id><snippet># schema/__init__.py
from .class1 import Class1
from .class2 import Class2

__all__ = [Class1, Class2]  # optional
</snippet></ROW><ROW><id>19604421</id><snippet>schema1</snippet></ROW><ROW><id>19604421</id><snippet>schema2</snippet></ROW><ROW><id>19604421</id><snippet>from somewhere import schema1
from somewhere_else import schema2

s1_user = schema1.User()
s2_user = schema2.User()
# etc
</snippet></ROW><ROW><id>19604496</id><snippet>requests.get</snippet></ROW><ROW><id>19604496</id><snippet>&lt;script language="javascript" type="text/javascript"&gt;
window.location ="http://www.nenu.edu.cn/intramural/content/news/110.php";
&lt;/script&gt;
</snippet></ROW><ROW><id>19604496</id><snippet>http://www.nenu.edu.cn/intramural/content/news/110.php</snippet></ROW><ROW><id>19604496</id><snippet>requests</snippet></ROW><ROW><id>19604496</id><snippet>window.location = ...</snippet></ROW><ROW><id>19604678</id><snippet>pushed</snippet></ROW><ROW><id>19604678</id><snippet>method</snippet></ROW><ROW><id>19604678</id><snippet>pushed</snippet></ROW><ROW><id>19604678</id><snippet>pushed = False

@post('/button')
def action():
    global pushed  # needed because otherwise assigning to `pushed` will
                   # just create a local variable shadowing the global one
    pushed = True
    redirect("/button")

def method():
    # pushed = False   &lt;----- this line is not needed, and if enabled, will, again, 
    #                         create a local variable shadowing the global one
    global pushed  # again, otherwise the `pushed = False` statement will create a local variable
    while True:  # use real booleans, i.e. True/False not 1/0
        if pushed:
            print "push recieved"
            pushed = False

method()
</snippet></ROW><ROW><id>19604678</id><snippet>from Queue import Queue, Empty

button_pressed = Queue()

@post('/button')
def action():
    button_pressed.put(1)  # can be any value really
    redirect("/button")

def method():
    while True:
        try:
            button_pressed.get_nowait()
        except Empty:
            pass
        else:
            print "push recieved"
</snippet></ROW><ROW><id>19604678</id><snippet>get_nowait()</snippet></ROW><ROW><id>19604678</id><snippet>put</snippet></ROW><ROW><id>19604678</id><snippet>Empty</snippet></ROW><ROW><id>19604678</id><snippet>method()</snippet></ROW><ROW><id>19604678</id><snippet>if __name__ == '__main__':
    threading.Thread(target=run, kwargs=dict(host='localhost', port=8080)).start()
    method()
</snippet></ROW><ROW><id>19604678</id><snippet>.py</snippet></ROW><ROW><id>19604678</id><snippet>run()</snippet></ROW><ROW><id>19604678</id><snippet>method</snippet></ROW><ROW><id>19604885</id><snippet>while s[j]&lt;=s[j+1]:
    j+=1
</snippet></ROW><ROW><id>19604885</id><snippet>while j!=len(s)-1 and s[j]&lt;=s[j+1]:
    j+=1
</snippet></ROW><ROW><id>19605015</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>19605015</id><snippet>MemoryError</snippet></ROW><ROW><id>19605015</id><snippet>GeneratorExit</snippet></ROW><ROW><id>19605015</id><snippet>SystemExit</snippet></ROW><ROW><id>19605015</id><snippet>Exception</snippet></ROW><ROW><id>19605015</id><snippet>Exception</snippet></ROW><ROW><id>19605015</id><snippet>except (Exception, KeyboardInterrupt) as exc:
</snippet></ROW><ROW><id>19605015</id><snippet>def runserver():
    print "Running server ..."

    global running
    running = True

    try:    
        while running:
            time.sleep(0.07)
    except (Exception, KeyboardInterrupt) as exc:
        print "Error in the runserver thread"
</snippet></ROW><ROW><id>19605224</id><snippet>fill</snippet></ROW><ROW><id>19605224</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; X = np.arange(9).reshape(3,3)
&gt;&gt;&gt; temp = X.copy()
&gt;&gt;&gt; return_value_of_fill = temp.fill(5.446361E-01)
&gt;&gt;&gt; return_value_of_fill is None
True
</snippet></ROW><ROW><id>19605224</id><snippet>temp = X.copy().fill(5.446361E-01)
</snippet></ROW><ROW><id>19605224</id><snippet>temp = X.copy()
temp.fill(5.446361E-01)
</snippet></ROW><ROW><id>19605432</id><snippet>label_frame</snippet></ROW><ROW><id>19605432</id><snippet>canvas</snippet></ROW><ROW><id>19605432</id><snippet>label</snippet></ROW><ROW><id>19605432</id><snippet>label_frame</snippet></ROW><ROW><id>19605432</id><snippet>label</snippet></ROW><ROW><id>19605432</id><snippet>create_window</snippet></ROW><ROW><id>19605432</id><snippet>...
label_frame = LabelFrame(canvas, text="I'm a Label frame")
label = Label(label_frame, text="Hey I'm a Label")
label.pack()

canvas.create_window(10, 20, window=label_frame, anchor='w')
...
</snippet></ROW><ROW><id>19605432</id><snippet>anchor</snippet></ROW><ROW><id>19605432</id><snippet>CENTER</snippet></ROW><ROW><id>19605432</id><snippet>w</snippet></ROW><ROW><id>19605438</id><snippet>int</snippet></ROW><ROW><id>19605438</id><snippet>def hex_to_dex(strng_of_hex):
    return int(strng_of_hex, 16)
</snippet></ROW><ROW><id>19605438</id><snippet>&gt;&gt;&gt; int("0xff", 16)
255
</snippet></ROW><ROW><id>19605438</id><snippet>0x</snippet></ROW><ROW><id>19605438</id><snippet>0x</snippet></ROW><ROW><id>19605438</id><snippet>&gt;&gt;&gt; int("a", 16)
10
</snippet></ROW><ROW><id>19605438</id><snippet>def hex(s):
    _hexer = "0123456789ABCDEF"
    return sum([_hexer.find(var) * 16 ** i for i, var in enumerate(reversed(s.upper()))])
</snippet></ROW><ROW><id>19605438</id><snippet>def hex(s):
    _hexer = "0123456789ABCDEF"

    if not all([var in _hexer for var in s.upper()]):
        print "Invalid string"
        return None

    return sum([_hexer.find(var) * 16 ** i for i, var in enumerate(reversed(s.upper()))])
</snippet></ROW><ROW><id>19605438</id><snippet>[...]</snippet></ROW><ROW><id>19605485</id><snippet>lists[:]=range(2,16)</snippet></ROW><ROW><id>19605485</id><snippet>In [11]: range(2, 16)
Out[11]: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
</snippet></ROW><ROW><id>19605485</id><snippet>findheadings</snippet></ROW><ROW><id>19605485</id><snippet>findheadings</snippet></ROW><ROW><id>19605485</id><snippet>for heading in findheadings
</snippet></ROW><ROW><id>19605485</id><snippet>findheadings</snippet></ROW><ROW><id>19605485</id><snippet>heading</snippet></ROW><ROW><id>19605485</id><snippet>findheadings</snippet></ROW><ROW><id>19605485</id><snippet>findheading</snippet></ROW><ROW><id>19605485</id><snippet>findlink</snippet></ROW><ROW><id>19605485</id><snippet>for heading, link in zip(findheading, findlink):
    print(heading)
    print(link) 
</snippet></ROW><ROW><id>19605485</id><snippet>findheading</snippet></ROW><ROW><id>19605485</id><snippet>findlink</snippet></ROW><ROW><id>19605485</id><snippet>zip</snippet></ROW><ROW><id>19605946</id><snippet>url</snippet></ROW><ROW><id>19606055</id><snippet>__import__</snippet></ROW><ROW><id>19606092</id><snippet>unicode()</snippet></ROW><ROW><id>19606092</id><snippet>str()</snippet></ROW><ROW><id>19606092</id><snippet>unicode.encode()</snippet></ROW><ROW><id>19606092</id><snippet>Variable = input.encode('utf8')
</snippet></ROW><ROW><id>19606253</id><snippet>wait_one</snippet></ROW><ROW><id>19606253</id><snippet>  def errback(failure):
    ## new code
    if g.dead:
        return
    ##
    if not active:
        g.throw(failure)
    else:
        reactor.callLater(0, g.throw, failure)
</snippet></ROW><ROW><id>19606328</id><snippet>functools.partial</snippet></ROW><ROW><id>19606328</id><snippet>polarization_value</snippet></ROW><ROW><id>19606328</id><snippet>functools.partial(polarization_value, timespan='day')
</snippet></ROW><ROW><id>19606328</id><snippet>&gt;&gt;&gt; import functools
def func(x, y=1):
    print x, y
...     
&gt;&gt;&gt; new_func = functools.partial(func, y=20)
&gt;&gt;&gt; new_func(100)
100 20
</snippet></ROW><ROW><id>19606328</id><snippet>functools.partial</snippet></ROW><ROW><id>19606528</id><snippet>with open(filename) as f:
    lines = [l.split() for l in f.readlines()]
lines = [map(float, l[:3]) for l in lines if len(l)&gt;=3]
</snippet></ROW><ROW><id>19606602</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19606602</id><snippet>max</snippet></ROW><ROW><id>19606602</id><snippet>&gt;&gt;&gt; from itertools import groupby
def solve(strs):
     return max((list(g) for k, g in groupby(strs, key=lambda x:int(x)%2) if not k),
                                                                            key=len)
... 
&gt;&gt;&gt; solve('2456890048') #or pass `str(2456890048)` if you've integers.
['0', '0', '4', '8']
&gt;&gt;&gt; solve('245688888890048')
['6', '8', '8', '8', '8', '8', '8']
</snippet></ROW><ROW><id>19606602</id><snippet>[list(g) for k, g in groupby('2456890048', key=lambda x:int(x)%2) if not k]
</snippet></ROW><ROW><id>19606602</id><snippet>[['2', '4'], ['6', '8'], ['0', '0', '4', '8']]
</snippet></ROW><ROW><id>19606602</id><snippet>max</snippet></ROW><ROW><id>19606602</id><snippet>key=len</snippet></ROW><ROW><id>19606602</id><snippet>max</snippet></ROW><ROW><id>19606620</id><snippet>question</snippet></ROW><ROW><id>19606620</id><snippet>urls.py</snippet></ROW><ROW><id>19606620</id><snippet>/question/10</snippet></ROW><ROW><id>19606620</id><snippet>question</snippet></ROW><ROW><id>19606620</id><snippet>from django.core.urlresolvers import reverse

def comment(request):
    if request.method == 'POST': 
        form = CommentForm(request.POST) 
        if form.is_valid(): 
            # save, process, etc..
            # ...
            return HttpResponseRedirect(
                reverse('question', args=[form.cleaned_data.question])
            ) 
    else:
        form = CommentForm()
    return render(request, 'question.html', {'form': form})
</snippet></ROW><ROW><id>19607294</id><snippet>forms.get(i)).children().children().each
</snippet></ROW><ROW><id>19607294</id><snippet>forms.get(i)).find('input,select,textarea').each
</snippet></ROW><ROW><id>19607294</id><snippet>$(row).children().children().each
</snippet></ROW><ROW><id>19607294</id><snippet>$(row).find('input,select,textarea').each
</snippet></ROW><ROW><id>19607337</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; _ = lambda i: int(ctypes.c_uint32(i).value)
&gt;&gt;&gt; hex(_(0xF0 + 0xAA))
'0x19a'
</snippet></ROW><ROW><id>19607623</id><snippet>scipy.weave</snippet></ROW><ROW><id>19607623</id><snippet>weave</snippet></ROW><ROW><id>19607713</id><snippet># List of possible Strings
comma_check_list = ['hello, world', 'hello world', 'hello,  world', 'hello world, good, morning']

# Dictionary of punctuation that's not a comma
punct = set('@^! #%$&amp;)(+*-="')

# Function to check the string
def string_check(comma_check_list, punct):
    for string in comma_check_list:
        new_list = string.split(", ")
        print string, not any(char in punct for item in new_list for char in item)

# Usage
string_check(comma_check_list, punct)
</snippet></ROW><ROW><id>19607713</id><snippet>set</snippet></ROW><ROW><id>19607713</id><snippet>any</snippet></ROW><ROW><id>19607713</id><snippet>if</snippet></ROW><ROW><id>19607713</id><snippet>In [6]: %run 
hello, world True
hello world False
hello,  world False
hello world, good, morning False
</snippet></ROW><ROW><id>19607736</id><snippet>collections.namedtuple()</snippet></ROW><ROW><id>19607736</id><snippet>from collections import namedtuple

foo = namedtuple('foo', ('bar', 'baz'))
</snippet></ROW><ROW><id>19607736</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; foo = namedtuple('foo', ('bar', 'baz'))
&gt;&gt;&gt; f = foo(42, 38)
&gt;&gt;&gt; f.someattribute = 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'foo' object has no attribute 'someattribute'
&gt;&gt;&gt; f.bar
42
</snippet></ROW><ROW><id>19607736</id><snippet>f.bar</snippet></ROW><ROW><id>19607736</id><snippet>&gt;&gt;&gt; f.bar = 43
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>19607796</id><snippet>fname</snippet></ROW><ROW><id>19607796</id><snippet>proxyfy</snippet></ROW><ROW><id>19607796</id><snippet>proxy_func</snippet></ROW><ROW><id>19607796</id><snippet>for-loop</snippet></ROW><ROW><id>19607796</id><snippet>    for _, func in inspect.getmembers(target, predicate=inspect.ismethod):
</snippet></ROW><ROW><id>19607796</id><snippet>fname</snippet></ROW><ROW><id>19607796</id><snippet>'foo2'</snippet></ROW><ROW><id>19607796</id><snippet>proxy_func</snippet></ROW><ROW><id>19607796</id><snippet>foo2</snippet></ROW><ROW><id>19607796</id><snippet>fname</snippet></ROW><ROW><id>19607796</id><snippet>proxy_func</snippet></ROW><ROW><id>19607796</id><snippet>bname</snippet></ROW><ROW><id>19607796</id><snippet>    for bname, func in inspect.getmembers(target, predicate=inspect.ismethod):
</snippet></ROW><ROW><id>19607796</id><snippet>bname</snippet></ROW><ROW><id>19607796</id><snippet>        def proxy_func(self, bname=bname, *args, **kwargs):
</snippet></ROW><ROW><id>19607796</id><snippet>proxy_func</snippet></ROW><ROW><id>19607796</id><snippet>bname</snippet></ROW><ROW><id>19607796</id><snippet>proxy_func</snippet></ROW><ROW><id>19607796</id><snippet>def proxy(bridge, target):
    def proxyfy(cls):
        for bname, func in inspect.getmembers(target, predicate=inspect.ismethod):
            fname = func.__name__
            if fname in cls.__dict__:
                print 'ignoring %s.%s' % (cls, fname)
                continue
            print 'adding %s.%s' % (cls, fname)
            def proxy_func(self, bname=bname, *args, **kwargs):
                print 'calling %s.%s.%s' % (cls, bridge, bname)
                bridge_member = getattr(self, bridge)
                return getattr(bridge_member, bname)(*args, **kwargs)
            setattr(cls, fname, proxy_func)
        return cls
    return proxyfy
</snippet></ROW><ROW><id>19607796</id><snippet>__getattr__</snippet></ROW><ROW><id>19607796</id><snippet>def proxy(bridge):
    def proxyfy(cls):
        def __getattr__(self, attr):
            target = getattr(self, bridge)
            if attr.startswith('__') and not attr.endswith('__'):
                # unmangle
                attr = '_{}{}'.format(type(target).__name__, attr)
            return getattr(target, attr)
        setattr(cls, '__getattr__', __getattr__)
        return cls
    return proxyfy
</snippet></ROW><ROW><id>19607796</id><snippet>import inspect

def proxy(bridge, target):
    def proxyfy(cls):
        for bname, func in inspect.getmembers(target, predicate=inspect.ismethod):
            fname = func.__name__
            if fname in cls.__dict__:
                print 'ignoring %s.%s' % (cls, fname)
                continue
            print 'adding %s.%s' % (cls, fname)
            def proxy_func(self, bname=bname, *args, **kwargs):
                print 'calling %s.%s.%s' % (cls, bridge, bname)
                bridge_member = getattr(self, bridge)
                return getattr(bridge_member, bname)(*args, **kwargs)
            setattr(cls, fname, proxy_func)
        return cls
    return proxyfy

def proxy(bridge):
    def proxyfy(cls):
        def __getattr__(self, attr):
            target = getattr(self, bridge)
            if attr.startswith('__') and not attr.endswith('__'):
                # unmangle
                attr = '_{}{}'.format(type(target).__name__, attr)
            return getattr(target, attr)
        setattr(cls, '__getattr__', __getattr__)
        return cls
    return proxyfy

class Base(object):
    def __init__(self, i):
        self._i = i

    def __bar(self):
        print 0

    def foo(self):
        print self._i

    def foo2(self):
        print 2 * self._i


# @proxy('_proxy', Base)
@proxy('_proxy')
class Delegate(object):
    def __init__(self, base):
        self._proxy = base

    def foo2(self):
        print 4 * self._proxy._i

d = Delegate(Base(1))
d.__bar() # d._proxy.__bar()
d.foo()   # d._proxy.foo()
d.foo2()  # d.foo2()
</snippet></ROW><ROW><id>19608056</id><snippet>hxs.select('//div[@id="pagination_contents"]')</snippet></ROW><ROW><id>19608056</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>19608056</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>19608056</id><snippet>sites = hxs.select('//div[@id="pagination_contents"]/div[2]/div[a]')
for site in sites:
    ## This loop will run 33 times in my test.
    ## Access to each link:
    item['link'] = site.select('./a[2]/@href').extract()
</snippet></ROW><ROW><id>19608351</id><snippet>i += 1 
</snippet></ROW><ROW><id>19608351</id><snippet>for i in rangeLenA: 
</snippet></ROW><ROW><id>19608351</id><snippet>for i in xrange(LenA) 
</snippet></ROW><ROW><id>19608351</id><snippet>    for j in xrange(i,lenA,aux):
</snippet></ROW><ROW><id>19608351</id><snippet>    while j &lt; lenA:
</snippet></ROW><ROW><id>19608351</id><snippet>while A[i] &lt;= raiz: 
</snippet></ROW><ROW><id>19608964</id><snippet>connectionMade</snippet></ROW><ROW><id>19608964</id><snippet>if len(self.factory.clients) == 2:
  self.transport.loseConnection()
</snippet></ROW><ROW><id>19609044</id><snippet>sf = ax.plot_surface(x,y,z,rstride=5,cstride=5,color='r',linewidth=0.1,shade=0) # - this function
sf.remove()
</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>class Foo(Bar):
    def baz(self):
        return super(Foo, self).baz() + 42

Spam = Foo
Foo = something_else()
</snippet></ROW><ROW><id>19609168</id><snippet>@class_decorator_returning_new_class
class Foo(Bar):
    def baz(self):
        # Now `Foo` is a *different class*
        return super(Foo, self).baz() + 42
</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>super</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>'super'</snippet></ROW><ROW><id>19609168</id><snippet>super</snippet></ROW><ROW><id>19609168</id><snippet>supper</snippet></ROW><ROW><id>19609168</id><snippet>supper</snippet></ROW><ROW><id>19609168</id><snippet>super</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>super</snippet></ROW><ROW><id>19609168</id><snippet>super</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>super(type(self), self)</snippet></ROW><ROW><id>19609168</id><snippet>super(self.__class__, self)</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>super_</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>super()</snippet></ROW><ROW><id>19609168</id><snippet>__class__</snippet></ROW><ROW><id>19609168</id><snippet>&gt;&gt;&gt; super_ = super
&gt;&gt;&gt; class A(object):
...     def x(self):
...         print("No flipping")
... 
&gt;&gt;&gt; class B(A):
...     def x(self):
...         __class__  # just referencing it is enough
...         super_().x()
... 
&gt;&gt;&gt; B().x()
No flipping
</snippet></ROW><ROW><id>19609265</id><snippet># main definitions
import time
class Blah():
    update=0
    def testthings(self, function):
        return function(9)

# rpyc servic definition
import rpyc

class MyService(rpyc.Service):
    def exposed_testthings(self, function = lambda x: x):
        return main.testthings(function = function)
    def exposed_get_main_update(self):
        return main.update

# start the rpyc server
from rpyc.utils.server import ThreadedServer
from threading import Thread
server = ThreadedServer(MyService, port = 12345)
t = Thread(target = server.start)
t.daemon = True
t.start()

# the main logic
main = Blah()
while True:
    main.update+=1
    time.sleep(1)
</snippet></ROW><ROW><id>19609265</id><snippet># rpyc client
import rpyc
conn = rpyc.connect("localhost", 12345)
c = conn.root

# do stuff over rpyc
import time
print 'update =', c.get_main_update()
time.sleep(2)
print 'update =', c.get_main_update()
print 'testing returned:', c.testthings(lambda x: x)  # calling a method of the remote service
print 'update =', c.get_main_update()
</snippet></ROW><ROW><id>19609265</id><snippet>update= 6
update= 8
testing returned: 9
update= 8
</snippet></ROW><ROW><id>19609265</id><snippet>lambda</snippet></ROW><ROW><id>19609275</id><snippet>file.read()</snippet></ROW><ROW><id>19609275</id><snippet>size</snippet></ROW><ROW><id>19609275</id><snippet>size</snippet></ROW><ROW><id>19609275</id><snippet>iter()</snippet></ROW><ROW><id>19609275</id><snippet>''</snippet></ROW><ROW><id>19609275</id><snippet>functools.partial()</snippet></ROW><ROW><id>19609275</id><snippet>from functools import partial

with open(localFileTT, 'rb', 0) as f:
    for chunk in iter(partial(f.read, 1000), ''):
        # chunk is up to 1000 characters long
</snippet></ROW><ROW><id>19609275</id><snippet>while</snippet></ROW><ROW><id>19609275</id><snippet>with open(localFileTT, 'rb', 0) as f:
    while True:
        chunk = f.read(1000)
        if not chunk:
            # EOF reached, end loop
            break
        # chunk is up to 1000 characters long
</snippet></ROW><ROW><id>19609275</id><snippet>read(1000)</snippet></ROW><ROW><id>19609335</id><snippet># encoding=utf-8
</snippet></ROW><ROW><id>19609348</id><snippet>np.cross</snippet></ROW><ROW><id>19609348</id><snippet>axisa</snippet></ROW><ROW><id>19609348</id><snippet>axisb</snippet></ROW><ROW><id>19609348</id><snippet>axisc</snippet></ROW><ROW><id>19609348</id><snippet>np.cross(d2, d3, axisa=1, axisb=1, axisc=1)
</snippet></ROW><ROW><id>19609348</id><snippet>axisc=1</snippet></ROW><ROW><id>19609348</id><snippet>torsion</snippet></ROW><ROW><id>19609348</id><snippet>torsion = np.zeros((len(d1), 1)
idx = (tb !=0)
torsion[idx] = tt[idx] / tb[idx]
</snippet></ROW><ROW><id>19609725</id><snippet>import os
json_data = open(os.path.join(os.path.dirname(__file__),"cs1.txt"),'r')
</snippet></ROW><ROW><id>19609725</id><snippet>json_data = open("cs1.txt")
</snippet></ROW><ROW><id>19609727</id><snippet>r = requests.post(
    'https://maxcvservices.dnb.com/rest/Authentication',
    headers={'x-dnb-user': userid, 'x-dnb-pwd': password})
</snippet></ROW><ROW><id>19609727</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.__version__
'2.0.0'
&gt;&gt;&gt; r = requests.post('https://maxcvservices.dnb.com/rest/Authentication',
...                   headers={'x-dnb-user': 'userid', 'x-dnb-pwd': 'password'})
&gt;&gt;&gt; r
&lt;Response [401]&gt;
&gt;&gt;&gt; r.headers['authorization']
'INVALID CREDENTIALS'
</snippet></ROW><ROW><id>19609945</id><snippet>followers_df.index = range(20)
</snippet></ROW><ROW><id>19610042</id><snippet>checkAnswer()</snippet></ROW><ROW><id>19610042</id><snippet>def checkAnswer(number1, number2, answer, right):
    if answer == number1+number2:
        print 'Right'
        right = right + 1
    else:
        print 'Wrong'

    return right, answer
</snippet></ROW><ROW><id>19610042</id><snippet>return right, answer</snippet></ROW><ROW><id>19610042</id><snippet>right</snippet></ROW><ROW><id>19610042</id><snippet>right = checkAnswer(number1, number2, answer, right)
</snippet></ROW><ROW><id>19610042</id><snippet>right</snippet></ROW><ROW><id>19610042</id><snippet>1</snippet></ROW><ROW><id>19610042</id><snippet>answer</snippet></ROW><ROW><id>19610042</id><snippet>return</snippet></ROW><ROW><id>19610042</id><snippet>def checkAnswer(number1, number2, answer, right):
    if answer == number1+number2:
        print 'Right'
        right = right + 1
    else:
        print 'Wrong'

    return right
</snippet></ROW><ROW><id>19610314</id><snippet>class RegisterForm(forms.Form):
     ids = AccountType.objects.values_list('Name', flat=True)
</snippet></ROW><ROW><id>19610314</id><snippet>class RegisterForm(forms.Form):
     ids = AccountType.objects.values_list('id', flat=True)
</snippet></ROW><ROW><id>19610314</id><snippet>Name</snippet></ROW><ROW><id>19610314</id><snippet>ID</snippet></ROW><ROW><id>19610314</id><snippet>acc_types_lst = AccountType.objects.filter(pk__in=set(ids))
</snippet></ROW><ROW><id>19610354</id><snippet>mat = SAES_ToStateMatrix([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
SAES_FromStateMatrix(mat)
</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; d = dict(foo=1, bar=2)
&gt;&gt;&gt; d
{'foo': 1, 'bar': 2}
</snippet></ROW><ROW><id>19610354</id><snippet>{key: value, ...}</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; class Foobar(object):
...     def __init__(self):
...         self.attr = 'foo'
...
&gt;&gt;&gt; f = Foobar()
&gt;&gt;&gt; f
&lt;__main__.Foobar object at 0x109ee7750&gt;
</snippet></ROW><ROW><id>19610354</id><snippet>Foobar</snippet></ROW><ROW><id>19610354</id><snippet>&lt;scope.Foobar object at memory_address&gt;</snippet></ROW><ROW><id>19610354</id><snippet>__repr__</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; class Foobar(object):
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return '&lt;Foobar instance with value=%s&gt;' % self.value
...
&gt;&gt;&gt; f = Foobar(42)
&gt;&gt;&gt; f
&lt;Foobar instance with value=42&gt;
</snippet></ROW><ROW><id>19610354</id><snippet>__repr__</snippet></ROW><ROW><id>19610354</id><snippet>eval()</snippet></ROW><ROW><id>19610354</id><snippet>dict()</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; dict(foo=1, bar=2)
</snippet></ROW><ROW><id>19610354</id><snippet>{</snippet></ROW><ROW><id>19610354</id><snippet>}</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; {'foo': 1, 'bar': 2}
</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; list((1, 2, 3))
</snippet></ROW><ROW><id>19610354</id><snippet>[</snippet></ROW><ROW><id>19610354</id><snippet>]</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; [1, 2, 3]
</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; 3.14j
</snippet></ROW><ROW><id>19610354</id><snippet>&gt;&gt;&gt; 3.14e-10
</snippet></ROW><ROW><id>19610354</id><snippet>{'foo': 1, 'bar': 2}</snippet></ROW><ROW><id>19610354</id><snippet>Matrix</snippet></ROW><ROW><id>19610354</id><snippet>a</snippet></ROW><ROW><id>19610354</id><snippet>[a^3 + a a^3 + a]</snippet></ROW><ROW><id>19610354</id><snippet>NameError</snippet></ROW><ROW><id>19610354</id><snippet>a</snippet></ROW><ROW><id>19610354</id><snippet>x = 2 * y</snippet></ROW><ROW><id>19610354</id><snippet>y</snippet></ROW><ROW><id>19610354</id><snippet>SAES_ToStateMatrix(lst)</snippet></ROW><ROW><id>19610354</id><snippet>SAES_FromStateMatrix()</snippet></ROW><ROW><id>19610354</id><snippet>mat = SAES_ToStateMatrix([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])
SAES_FromStateMatrix(mat)
</snippet></ROW><ROW><id>19610354</id><snippet>SAES_FromStateMatrix(SAES_ToStateMatrix([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))
</snippet></ROW><ROW><id>19610441</id><snippet>csv</snippet></ROW><ROW><id>19610441</id><snippet>import csv

with open('sample.csv') as f:
   c = [r for r in csv.reader(f, delimiter=',')]
    data = [
        item[0] * 14 + item[1] for item in
            [map(int, row[2].split('-', 1)) for row in c]
    ]

    print data
</snippet></ROW><ROW><id>19610441</id><snippet>[122, 132, 140, 206, 178, 123, 234, 290, 262]
</snippet></ROW><ROW><id>19610441</id><snippet>import csv

with open('sample.csv') as f:
    with open('new_file.txt', 'w') as w:
        c = [r for r in csv.reader(f, delimiter=',')]
        data = [
            item[0] * 14 + item[1] for item in
                [map(int, row[2].split('-', 1)) for row in c]
        ]
        for line, d in zip(c, data):
            for l in line:
                w.writelines(str(l) + ',')
            w.writelines(str(d))
            w.writelines('\n')
</snippet></ROW><ROW><id>19610644</id><snippet>print "%.4f" % voltsdiff,
</snippet></ROW><ROW><id>19610644</id><snippet>print</snippet></ROW><ROW><id>19610644</id><snippet>for i, voltsdiffs in enumerate(many_voltages):
    print "%.4f" % voltsdiffs,
    if i % 10 == 9:
         print # puts a newline after every 10 values
</snippet></ROW><ROW><id>19610644</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>19610644</id><snippet>print "%.4f" % voltsdiffs,
sys.stdout.flush()
</snippet></ROW><ROW><id>19610644</id><snippet>print</snippet></ROW><ROW><id>19610644</id><snippet>flush</snippet></ROW><ROW><id>19610644</id><snippet>True</snippet></ROW><ROW><id>19610644</id><snippet># before any other code
from __future__ import print_function

# later
print(format(voltsdiffs, ".4f"), end=" ", flush=True)
</snippet></ROW><ROW><id>19610711</id><snippet>ImportError</snippet></ROW><ROW><id>19610711</id><snippet>from BB_Files import BB_Expand 
## if you comment this the next immediate line will give you same error
</snippet></ROW><ROW><id>19610711</id><snippet>from &lt;something&gt; import &lt;something-else&gt;
</snippet></ROW><ROW><id>19610711</id><snippet>module/class/function</snippet></ROW><ROW><id>19610711</id><snippet>package/module</snippet></ROW><ROW><id>19610711</id><snippet>package</snippet></ROW><ROW><id>19610711</id><snippet>__init__.py</snippet></ROW><ROW><id>19610711</id><snippet>python</snippet></ROW><ROW><id>19610711</id><snippet>## try this to get your directory name
print __file__
print "Path is:", os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>19610723</id><snippet>with open("/path/to/new/file", "w") as newfile:   # Create and open the new file
    with open("/path/to/old/file") as oldfile:    # Open the old file
        oldfile = oldfile.readlines()             # Read the lines of the old file into a list
        newfile.write(oldfile[0])                 # Write the column names to the new file
        for line in oldfile[1:]:                  # Iterate through the lines, skipping the first (which we already wrote to the new file)
            line = line.split(",")                # Split the line by commas
            line[3] = line[3].upper()             # Make the Varsity column value uppercase
            newfile.write(",".join(line))         # Put the line back together with .join and write it to the new file
</snippet></ROW><ROW><id>19610723</id><snippet>Name,Age,Gender,Varsity,GPA,Town,State
John,18,Male,YES,3.2,Tacoma,WA
Tyler,18,Male,YES,2.9,Tacoma,WA
Jane,17,Jane,YES,3.5,Tacoma,WA
Michelle,18,Female,NO,3.1,Tacoma,WA
Jamie,17,Male,NO,2.6,Tacoma,WA
Robert,17,Male,YES,4.0,Tacoma,WA
Danielle,18,Female,NO,3.0,Tacoma,WA
Dustin,18,Male,NO,3.2,Tacoma,WA
Angela,16,Female,NO,2.9,Tacoma,WA
Barbara,17,Female,YES,3.5,Tacoma,WA
Megan,18,Female,NO,3.4,Tacoma,WA
Michael,18,Male,YES,3.0,Tacoma,WA
Craig,17,Male,NO,3.1,Tacoma,WA
Jackson,18,Male,NO,2.8,Tacoma,WA
Bill,18,Male,YES,3.2,Tacoma,WA
Matthew,17,Male,YES,3.0,Tacoma,WA
Karen,16,Female,NO,3.4,Tacoma,WA
Sarah,17,Female,YES,3.2,Tacoma,WA
Charles,18,Male,NO,3.5,Tacoma,WA
</snippet></ROW><ROW><id>19610843</id><snippet>ndb</snippet></ROW><ROW><id>19610843</id><snippet>db</snippet></ROW><ROW><id>19610843</id><snippet>db</snippet></ROW><ROW><id>19610843</id><snippet>ndb</snippet></ROW><ROW><id>19610843</id><snippet>required=False</snippet></ROW><ROW><id>19610843</id><snippet>from google.appengine.ext import ndb

class D(ndb.Model):
    did = ndb.StringProperty(required=True)
    sample_tm = ndb.DateTimeProperty(auto_now_add=True)
    weekday = ndb.IntegerProperty()
</snippet></ROW><ROW><id>19610843</id><snippet>d = D(did='spam')
d_key = d.put()  # Stores the instance.
</snippet></ROW><ROW><id>19610843</id><snippet>d_key</snippet></ROW><ROW><id>19610843</id><snippet>Key</snippet></ROW><ROW><id>19610843</id><snippet>d = d_key.get()
assert d.did == 'spam'
</snippet></ROW><ROW><id>19610843</id><snippet>D.query()</snippet></ROW><ROW><id>19610843</id><snippet>results = D.query().fetch()  # results will be a list with D instances
</snippet></ROW><ROW><id>19610992</id><snippet>(
  node
    ["shop"]
    (50.6,7.0,50.65,7.05);
  node
    ["amenity"="parking"]
    (50.6,7.0,50.65,7.05);
  way
    ["shop"]
    (50.6,7.0,50.65,7.05);
  way
    ["amenity"="parking"]
    (50.6,7.0,50.65,7.05);
  relation
    ["shop"]
    (50.6,7.0,50.65,7.05);
  relation
    ["amenity"="parking"]
    (50.6,7.0,50.65,7.05);
);
(
  ._;
  &gt;;
);
out;
</snippet></ROW><ROW><id>19611078</id><snippet>kernel.js</snippet></ROW><ROW><id>19611078</id><snippet>IPython.kernel.execute(code, callbacks)</snippet></ROW><ROW><id>19611147</id><snippet>__getattr__</snippet></ROW><ROW><id>19611147</id><snippet>def __getattr__(self, x):
    r = getattr(self.int, x)
    if callable(r):
        def f(*args, **kwargs):
            if args and isinstance(args[0], u32):
                args = (args[0].int, ) + args[1:]
            ret = r(*args, **kwargs)
            if ret is NotImplemented:
                return ret
            if x in ['__str__', '__repr__', '__cmp__', '__index__']:
                return ret
            ret %= MODULO
            return u32(ret)
        return f
    return r
</snippet></ROW><ROW><id>19611491</id><snippet>EDGE_LIST1 = pandas.concat({'User':start_df_1, 'Follower': friends_df}, axis=1)
</snippet></ROW><ROW><id>19611518</id><snippet>sin = math.sin(angle)
cos = math.cos(angle)
</snippet></ROW><ROW><id>19611518</id><snippet>sin = math.sin
cos = math.cos
</snippet></ROW><ROW><id>19611518</id><snippet>sin(...)</snippet></ROW><ROW><id>19611518</id><snippet>sin</snippet></ROW><ROW><id>19611518</id><snippet>math.sin(angle)</snippet></ROW><ROW><id>19611518</id><snippet>numpy.array</snippet></ROW><ROW><id>19611518</id><snippet>array.array</snippet></ROW><ROW><id>19611518</id><snippet>rotMatrix = [[a, b, c],
             [d, e, f],
             [g, h, i]]
</snippet></ROW><ROW><id>19611659</id><snippet>In [19]: df = DataFrame(randn(5, 2), columns=['a', 'b'])

In [20]: df
Out[20]: 
          a         b
0 -1.949107 -0.763762
1 -0.382173 -0.970349
2  0.202116  0.094344
3 -1.225579 -0.447545
4  1.739508 -0.400829

In [21]: formulas = [ ('c','a+b'), ('d', 'a*c')]
</snippet></ROW><ROW><id>19611659</id><snippet>eval</snippet></ROW><ROW><id>19611659</id><snippet>In [22]: def lazy(x, formulas):
   ....:     for col, f in formulas:
   ....:         x[col] = x.eval(f)
   ....:         yield x
   ....:         
</snippet></ROW><ROW><id>19611659</id><snippet>In [23]: gen = lazy(df,formulas)

In [24]: gen.next()
Out[24]: 
          a         b         c
0 -1.949107 -0.763762 -2.712869
1 -0.382173 -0.970349 -1.352522
2  0.202116  0.094344  0.296459
3 -1.225579 -0.447545 -1.673123
4  1.739508 -0.400829  1.338679

In [25]: gen.next()
Out[25]: 
          a         b         c         d
0 -1.949107 -0.763762 -2.712869  5.287670
1 -0.382173 -0.970349 -1.352522  0.516897
2  0.202116  0.094344  0.296459  0.059919
3 -1.225579 -0.447545 -1.673123  2.050545
4  1.739508 -0.400829  1.338679  2.328644
</snippet></ROW><ROW><id>19611659</id><snippet>numba</snippet></ROW><ROW><id>19611659</id><snippet>eval</snippet></ROW><ROW><id>19611857</id><snippet>from StringIO import StringIO  # got moved around in python3 if you're using that.

import requests
r = requests.get('https://docs.google.com/spreadsheet/ccc?key=0Ak1ecr7i0wotdGJmTURJRnZLYlV3M2daNTRubTdwTXc&amp;output=csv')
data = r.content

In [10]: df = pd.read_csv(StringIO(data), index_col=0,parse_dates=['Quradate'])

In [11]: df.head()
Out[11]: 
          City                                            region     Res_Comm  \
0       Dothan  South_Central-Montgomery-Auburn-Wiregrass-Dothan  Residential   
10       Foley                              South_Mobile-Baldwin  Residential   
12  Birmingham      North_Central-Birmingham-Tuscaloosa-Anniston   Commercial   
38       Brent      North_Central-Birmingham-Tuscaloosa-Anniston  Residential   
44      Athens                 North_Huntsville-Decatur-Florence  Residential   

          mkt_type            Quradate  National_exp  Alabama_exp  Sales_exp  \
0            Rural 2010-01-15 00:00:00             2            2          3   
10  Suburban_Urban 2010-01-15 00:00:00             4            4          4   
12  Suburban_Urban 2010-01-15 00:00:00             2            2          3   
38           Rural 2010-01-15 00:00:00             3            3          3   
44  Suburban_Urban 2010-01-15 00:00:00             4            5          4   

    Inventory_exp  Price_exp  Credit_exp  
0               2          3           3  
10              4          4           3  
12              2          2           3  
38              3          3           2  
44              4          4           4  
</snippet></ROW><ROW><id>19611936</id><snippet>for dd in List1:
    if dd["a"] &gt; 1.3 * dd["b"]:
        print dd["value"]
</snippet></ROW><ROW><id>19612268</id><snippet>pygame.K_LEFT</snippet></ROW><ROW><id>19612271</id><snippet>for i in range(len(teams)):
    print(team[i],team[i+1])
</snippet></ROW><ROW><id>19612271</id><snippet>team</snippet></ROW><ROW><id>19612271</id><snippet>teams</snippet></ROW><ROW><id>19612271</id><snippet>'-1'</snippet></ROW><ROW><id>19612271</id><snippet>string index out of range</snippet></ROW><ROW><id>19612271</id><snippet>team</snippet></ROW><ROW><id>19612271</id><snippet>teams</snippet></ROW><ROW><id>19612271</id><snippet>teams[i+1]</snippet></ROW><ROW><id>19612292</id><snippet>mqttc.connect(broker, 1883, 60, True)
</snippet></ROW><ROW><id>19612292</id><snippet>mqttc.connect(broker, 1883, 60)
</snippet></ROW><ROW><id>19612292</id><snippet>True</snippet></ROW><ROW><id>19612292</id><snippet>clean_session</snippet></ROW><ROW><id>19612292</id><snippet>Mosquitto()</snippet></ROW><ROW><id>19612292</id><snippet>bind_address</snippet></ROW><ROW><id>19612292</id><snippet>connect()</snippet></ROW><ROW><id>19612292</id><snippet>python_sub</snippet></ROW><ROW><id>19612382</id><snippet>r = (1+1.414*math.sin(theta)*math.cos(theta)*-0.5*math.cos(theta)*math.cos(theta))**(1/6)*math.exp(-0.4714*theta)
</snippet></ROW><ROW><id>19612382</id><snippet>r = (1+1.414*math.sin(theta)*math.cos(theta) -0.5*math.cos(theta)*math.cos(theta))**(1/6)*math.exp(-0.4714*theta)
</snippet></ROW><ROW><id>19612382</id><snippet>(1/6)</snippet></ROW><ROW><id>19612382</id><snippet>0</snippet></ROW><ROW><id>19612382</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>19612428</id><snippet>def __init__(self):
    self.x = None
</snippet></ROW><ROW><id>19612428</id><snippet>None &gt; 0 == False</snippet></ROW><ROW><id>19612532</id><snippet>{ 
    "cmd": ["python", "-u", "/path/to/convert.py $file"],
    "selector": "source.markdown",
    "path": "/usr/local/lib/python"
}
</snippet></ROW><ROW><id>19612532</id><snippet>import sys
import markdown2

with open(sys.argv[0]) as f:
    script = 'tell application "Mail"' \
       'make new outgoing message with properties {' \
       'visible:true,content:"%s" }' \
    'end tell' % markdown2.markdown(f.read())

    p = Popen('/usr/bin/osascript',stdin=PIPE,stdout=PIPE)
    p.communicate(script)
</snippet></ROW><ROW><id>19612565</id><snippet>name = input(...)
</snippet></ROW><ROW><id>19612565</id><snippet>name = raw_input(...)
</snippet></ROW><ROW><id>19612633</id><snippet>def rotate(*args):
    print 'rotate button press...'
    theta = 90
    rotated = ndimage.rotate(image, theta)
    im.set_data(rotated)
    canvas.draw()
</snippet></ROW><ROW><id>19612633</id><snippet>image</snippet></ROW><ROW><id>19612633</id><snippet>root</snippet></ROW><ROW><id>19612633</id><snippet>root = Tk.Tk()
root.wm_title("minimal example")

root.image = plt.imread('test.jpg')
fig = plt.figure(figsize=(5,4))
im = plt.imshow(root.image) # later use a.set_data(new_data)
ax = plt.gca()
ax.set_xticklabels([]) 
ax.set_yticklabels([])

# a tk.DrawingArea
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.show()
canvas.get_tk_widget().pack(side=Tk.TOP, fill=Tk.BOTH, expand=1)

def rotate(*args):
    print 'rotate button press...'
    root.image = ndimage.rotate(root.image, 90)
    im.set_data(root.image)
    canvas.draw()
</snippet></ROW><ROW><id>19612659</id><snippet>{% for widget in my_widgets %}
    {% include widget %}
{% endfor %}
</snippet></ROW><ROW><id>19612659</id><snippet>my_widgets = ('myapp/widgetC.html', 'myapp/widgetB.html', 'myapp/widgetA.html', 'myapp/widgetD.html')</snippet></ROW><ROW><id>19612877</id><snippet>alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
key =   "XPMGTDHLYONZBWEARKJUFSCIQV"
</snippet></ROW><ROW><id>19612877</id><snippet>zip()</snippet></ROW><ROW><id>19612877</id><snippet>mydict = {k:v for k, v in zip(alpha, key)} # Or dict(zip(alpha, key))
</snippet></ROW><ROW><id>19612877</id><snippet>encode()</snippet></ROW><ROW><id>19612877</id><snippet>def encode(plain):
    return ''.join([mydict.get(i, i) for i in plain])
</snippet></ROW><ROW><id>19612877</id><snippet>[mydict.get(i, i) for i in plain]</snippet></ROW><ROW><id>19612877</id><snippet>newlist = []
for i in plain:
    newlist.append(mydict.get(i, i))
</snippet></ROW><ROW><id>19612877</id><snippet>mydict.get(i, i)</snippet></ROW><ROW><id>19612877</id><snippet>mydict[i]</snippet></ROW><ROW><id>19612877</id><snippet>i</snippet></ROW><ROW><id>19612877</id><snippet>i</snippet></ROW><ROW><id>19612877</id><snippet>['M', 'X', 'U']</snippet></ROW><ROW><id>19612877</id><snippet>''.join()</snippet></ROW><ROW><id>19612877</id><snippet>'MXU'</snippet></ROW><ROW><id>19612890</id><snippet>def lists_to_dyn(lst):
    return '|'.join(';'.join(','.join(lst3) for lst3 in lst2) for lst2 in lst)
</snippet></ROW><ROW><id>19612918</id><snippet>a</snippet></ROW><ROW><id>19612918</id><snippet>a</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>a</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>c</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>r'a[^ab]*b[^abc]*c'
</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>"abbc"</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>b</snippet></ROW><ROW><id>19612918</id><snippet>a</snippet></ROW><ROW><id>19613063</id><snippet>screen.fill(some_color)</snippet></ROW><ROW><id>19613187</id><snippet>textFile = open(filename, 'r')
#open() returns a file object
#'r' opens the file for reading. 'w' would be writing
textString = textFile.read()
#This takes the file object opened with the open() and turns it into a string which
#you can now use textString in a text widget.
</snippet></ROW><ROW><id>19613280</id><snippet>  nums = [4., 9., 13., 25]
  N = 10
  while len(nums) &lt; N:
      pos = np.argmax(np.diff(nums))   # where maximum difference is
      nums.insert(pos+1, (nums[pos+1] + nums[pos]) / 2.)  #introduce value
</snippet></ROW><ROW><id>19613290</id><snippet>C#</snippet></ROW><ROW><id>19613290</id><snippet>Python</snippet></ROW><ROW><id>19613290</id><snippet>Least Square Circle Fitting</snippet></ROW><ROW><id>19613290</id><snippet>Python</snippet></ROW><ROW><id>19613448</id><snippet>set_index</snippet></ROW><ROW><id>19613448</id><snippet>df = DataFrame(dict([ (c,col) for c, col in df.iteritems() ]))
</snippet></ROW><ROW><id>19613487</id><snippet>forms.ContactForm</snippet></ROW><ROW><id>19613487</id><snippet>contact.html</snippet></ROW><ROW><id>19613487</id><snippet>{{ form.hidden_tag() }}
</snippet></ROW><ROW><id>19613545</id><snippet>multiprocessing</snippet></ROW><ROW><id>19613545</id><snippet>Lock()</snippet></ROW><ROW><id>19613545</id><snippet>Queue()</snippet></ROW><ROW><id>19613545</id><snippet>csv.reader(f)</snippet></ROW><ROW><id>19613545</id><snippet>pickle</snippet></ROW><ROW><id>19613545</id><snippet>pickle.PicklingError: Can't pickle &lt;type '_csv.reader'&gt;: it's not the same object as _csv.reader
</snippet></ROW><ROW><id>19613545</id><snippet>def manual_parse_input_csv(csvfile):
    f = open(csvfile,'rb')
    in_csvfile = csv.reader(f)
    for row in in_csvfile:
        print row
    f.close()
</snippet></ROW><ROW><id>19613545</id><snippet>manualCSVworker</snippet></ROW><ROW><id>19613545</id><snippet>pin = multiprocessing.Process(target=manual_parse_input_csv, args=(infile,))
</snippet></ROW><ROW><id>19613591</id><snippet>.diff()</snippet></ROW><ROW><id>19613591</id><snippet>import pandas as pd
import numpy as np

data = pd.DataFrame({'time': np.arange(1,101), 'mass': np.random.randn(100)})
dm = np.diff(data.mass, n=1)
dmv = np.diff(data.mass.values, n=1)

print 'data.mass: \t\t', dm.shape
print 'min: ', dm.min(), ' max: ', dm.max(), ' mean: ', dm.mean()

print ''
print 'now using data.mass.values in the calculations \n'
print 'data.mass.values: \t', dmv.shape
print 'min: ', dmv.min(), ' max: ', dmv.max(), ' mean: ', dmv.mean()

print ''
dm_p = data.mass.diff()
print 'now based on what @jeff said: '
print 'using .diff() : \t', dm_p.shape
print 'min: ', dm_p.min(), ' max: ', dm_p.max(), ' mean: ', dm_p.mean()
</snippet></ROW><ROW><id>19613591</id><snippet>data.mass:      (100,)
min:  0.0  max:  0.0  mean:  0.0

now using data.mass.values in the calculations 

data.mass.values:   (99,)
min:  -3.54980400026  max:  3.33045231942  mean:  0.0326969806441

now based on what @jeff said: 
using .diff() :     (100,)
min:  -3.54980400026  max:  3.33045231942  mean:  0.0326969806441
</snippet></ROW><ROW><id>19613644</id><snippet>Objects/dictobject.c</snippet></ROW><ROW><id>19613644</id><snippet>PyDict_GetItem()</snippet></ROW><ROW><id>19613644</id><snippet>Python/symtable.c</snippet></ROW><ROW><id>19613644</id><snippet>v = PyDict_GetItem(st-&gt;st_blocks, k);
if (v) {
    assert(PySTEntry_Check(v));
    Py_INCREF(v);
}
else {
    PyErr_SetString(PyExc_KeyError,
                    "unknown symbol table entry");
}
</snippet></ROW><ROW><id>19613644</id><snippet>KeyError</snippet></ROW><ROW><id>19613648</id><snippet>from collections import Counter
totals = Counter()
for dct in dictionary.values():
    totals.update(dct)
</snippet></ROW><ROW><id>19613809</id><snippet>id</snippet></ROW><ROW><id>19613809</id><snippet>input</snippet></ROW><ROW><id>19613809</id><snippet>&lt;input id="item" name="item" type="text" value="" /&gt;
</snippet></ROW><ROW><id>19613809</id><snippet>&lt;input name="item" type="text" value="" /&gt;
</snippet></ROW><ROW><id>19613961</id><snippet>listy[start:end]</snippet></ROW><ROW><id>19613961</id><snippet>listy[i]</snippet></ROW><ROW><id>19613961</id><snippet>start &lt;= i &lt; end</snippet></ROW><ROW><id>19613961</id><snippet>&lt;</snippet></ROW><ROW><id>19613961</id><snippet>&lt;=</snippet></ROW><ROW><id>19613961</id><snippet>i</snippet></ROW><ROW><id>19613961</id><snippet>0 &lt;= i &lt; 0</snippet></ROW><ROW><id>19613961</id><snippet>listy[0:0:anything]</snippet></ROW><ROW><id>19614020</id><snippet>def find(x):
    for root in range(x + 1):
        for pwr in range(1, 6):
            y = pow(root, pwr)
            if y &gt; x:
                break
            if y == x:
                return root, pwr
    return None

x = int(raw_input('Enter an integer: '))
result = find(x)
if result is None:
    print 'No combinations within parameters exist'
else:
    root, pwr = result
    print root, "**", pwr, "=", x
</snippet></ROW><ROW><id>19614020</id><snippet>^</snippet></ROW><ROW><id>19614020</id><snippet>^</snippet></ROW><ROW><id>19614020</id><snippet>"No combinations ..."</snippet></ROW><ROW><id>19614020</id><snippet>x</snippet></ROW><ROW><id>19614020</id><snippet>pow(x, 1) == x</snippet></ROW><ROW><id>19614151</id><snippet>def main():
    num1= int(input('Enter the first integer: '))
    num2 = int(input('Enter the second integer: '))
    def maximum(num1, num2):
        if num1 &gt; num2:
            return num1
        else:
            return num2
    print('The greater integer is ', maximum(num1, num2))

main()
</snippet></ROW><ROW><id>19614151</id><snippet>maximum(...)</snippet></ROW><ROW><id>19614151</id><snippet>print</snippet></ROW><ROW><id>19614151</id><snippet>maximum(...)</snippet></ROW><ROW><id>19614151</id><snippet>main()</snippet></ROW><ROW><id>19614151</id><snippet>def maximum(num1, num2):
    if num1 &gt; num2:
        return num1
    else:
        return num2

def main():
    num1= int(input('Enter the first integer: '))
    num2 = int(input('Enter the second integer: '))        
    print('The greater integer is ', maximum(num1, num2))

main()
</snippet></ROW><ROW><id>19614216</id><snippet>someClass</snippet></ROW><ROW><id>19614216</id><snippet>object</snippet></ROW><ROW><id>19614216</id><snippet>someClass</snippet></ROW><ROW><id>19614216</id><snippet>(object)</snippet></ROW><ROW><id>19614216</id><snippet>(object)</snippet></ROW><ROW><id>19614225</id><snippet>win.Show(True)
app.MainLoop()
</snippet></ROW><ROW><id>19614225</id><snippet>win = wx.Frame(None, -1, 'Title')
win.Show(True)
app.MainLoop()
</snippet></ROW><ROW><id>19614225</id><snippet>Show</snippet></ROW><ROW><id>19614382</id><snippet>multiprocessing</snippet></ROW><ROW><id>19614382</id><snippet>result = SeqFile.run.get()
</snippet></ROW><ROW><id>19614382</id><snippet>execfile</snippet></ROW><ROW><id>19614382</id><snippet>file</snippet></ROW><ROW><id>19614382</id><snippet>execfile</snippet></ROW><ROW><id>19614382</id><snippet>execfile</snippet></ROW><ROW><id>19614382</id><snippet>execfile("/")
</snippet></ROW><ROW><id>19614382</id><snippet>apply_async()</snippet></ROW><ROW><id>19614382</id><snippet>map_async()</snippet></ROW><ROW><id>19614382</id><snippet>a.py</snippet></ROW><ROW><id>19614382</id><snippet>b.py</snippet></ROW><ROW><id>19614382</id><snippet>c.py</snippet></ROW><ROW><id>19614382</id><snippet>a.py</snippet></ROW><ROW><id>19614382</id><snippet>print "I'm A!"
</snippet></ROW><ROW><id>19614382</id><snippet>if __name__ == "__main__":
    import multiprocessing as mp

    files = ["a.py", "b.py", "c.py"]
    pool = mp.Pool(2)
    pool.imap_unordered(execfile, files)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>19614382</id><snippet>I'm A!
I'm B!
I'm C!
</snippet></ROW><ROW><id>19614382</id><snippet>imap_unordered()</snippet></ROW><ROW><id>19614382</id><snippet>Pool</snippet></ROW><ROW><id>19614382</id><snippet>map_async()</snippet></ROW><ROW><id>19614382</id><snippet>imap_unordered()</snippet></ROW><ROW><id>19614382</id><snippet>async = pool.map_async(execfile, files)
async.get()
</snippet></ROW><ROW><id>19614382</id><snippet>asyncs = [pool.apply_async(execfile, (fn,)) for fn in files]
for a in asyncs:
    a.get()
</snippet></ROW><ROW><id>19614536</id><snippet>export PYTHONPATH=$PYTHONPATH:'/path/to/your/modules/'
</snippet></ROW><ROW><id>19614646</id><snippet>for dict1_key, dict1_values in dict1.iteritems():
    for dict1_value in dict1_values:
        try:
            dict2_value = dict2[dict1_value]
            print str(dict1_key) + '\t' + str(dict1_value) + '\t' + str(dict2_value)
        except KeyError:
            pass
</snippet></ROW><ROW><id>19614646</id><snippet>iteritems</snippet></ROW><ROW><id>19614646</id><snippet>try</snippet></ROW><ROW><id>19614646</id><snippet>dict2[dict1_value]</snippet></ROW><ROW><id>19614646</id><snippet>dict2</snippet></ROW><ROW><id>19614646</id><snippet>dict2</snippet></ROW><ROW><id>19614646</id><snippet>dict1_value</snippet></ROW><ROW><id>19614646</id><snippet>catch</snippet></ROW><ROW><id>19614646</id><snippet>pass</snippet></ROW><ROW><id>19614716</id><snippet>[item for item in mv.split(',')]</snippet></ROW><ROW><id>19614716</id><snippet>mv.split(',')</snippet></ROW><ROW><id>19614716</id><snippet>compress</snippet></ROW><ROW><id>19614716</id><snippet>dyn_to_min_lists</snippet></ROW><ROW><id>19614716</id><snippet>dyn_to_min_lists</snippet></ROW><ROW><id>19614716</id><snippet>len</snippet></ROW><ROW><id>19614716</id><snippet>len(x) == 0</snippet></ROW><ROW><id>19614716</id><snippet>not x</snippet></ROW><ROW><id>19614716</id><snippet>compress</snippet></ROW><ROW><id>19614716</id><snippet>def compress(x): 
    if len(x) &gt; 1:
        return x
    elif not x:
        return ''
    else:
        return x[0]

def parse(s):
    return compress([
        compress([
            compress(b.split(',')) for b in a.split(';')
        ]) for a in s.split('|')
    ])
</snippet></ROW><ROW><id>19614716</id><snippet>&gt;&gt;&gt; %timeit parse('a,b;c,d|e||f,g|h;;')
100000 loops, best of 3: 10 µs per loop
&gt;&gt;&gt; %timeit dyn_to_min_lists('a,b;c,d|e||f,g|h;;')
10000 loops, best of 3: 15.6 µs per loop
</snippet></ROW><ROW><id>19614720</id><snippet>]</snippet></ROW><ROW><id>19614720</id><snippet>msg = Message(form.subject.data, sender='''contact@example.com&lt;script type="text/javascript"&gt;
/* &lt;![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]&gt; */
&lt;/script&gt;', recipients=['your_email@example.com&lt;script type="text/javascript"&gt;
/* &lt;![CDATA[ */
(function(){try{var s,a,i,j,r,c,l,b=document.getElementsByTagName("script");l=b[b.length-1].previousSibling;a=l.getAttribute('data-cfemail');if(a){s='';r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]&gt; */
&lt;/script&gt;]''')
</snippet></ROW><ROW><id>19614749</id><snippet>@decorated
def f(*args):
    # function body
</snippet></ROW><ROW><id>19614749</id><snippet>def f(*args):
    # function body
f = decorated(f)
</snippet></ROW><ROW><id>19614749</id><snippet>wrapper</snippet></ROW><ROW><id>19614749</id><snippet>wrapper</snippet></ROW><ROW><id>19614749</id><snippet>lowercasewrapper(f)</snippet></ROW><ROW><id>19614749</id><snippet>f</snippet></ROW><ROW><id>19614749</id><snippet>lowercasewrapper</snippet></ROW><ROW><id>19614749</id><snippet>lowercasewrapper</snippet></ROW><ROW><id>19614761</id><snippet>test_method</snippet></ROW><ROW><id>19614761</id><snippet>def test_method(self, par1, par2):
</snippet></ROW><ROW><id>19614761</id><snippet>test_method</snippet></ROW><ROW><id>19614761</id><snippet>@staticmethod
def test_method(par1, par2):
</snippet></ROW><ROW><id>19614761</id><snippet>class myClass(object):
    def __init__(self, num):
        self.number = num

    def getNum(self):
        return self.number

    @staticmethod
    def product(num1,num2):
        return num1*num2

if __name__ == "__main__":
    obj = myClass(4)
    print obj.getNum()
    print myClass.product(2,3)
</snippet></ROW><ROW><id>19614803</id><snippet>_list = []


def calc_average(total):
    return total / 5


def determine_grade(grade):
    if grade &gt;= 90 and grade &lt;= 100:
        return 'A'
    elif grade &gt;= 80 and grade &lt;= 89:
        return 'B'
    elif grade &gt;= 70 and grade &lt;= 79:
        return 'C'
    elif grade &gt;= 60 and grade &lt;= 69:
        return 'D'
    else:
        return 'F'


while True:
    grade = int(input('Enter grade: '))
    _list.append(grade)

    avg = calc_average(sum(_list))
    abc_grade = ' '.join([determine_grade(mark) for mark in _list])

    if len(_list) &gt; 5:
        break

print('Average grade is: ', avg)
print('Letter grades for entered grades are: ', abc_grade)
</snippet></ROW><ROW><id>19614975</id><snippet>JSON = [
        {

            "name": "fred",
...
},
        {

            "name": "peter",
...
},
        {

            "name": "fred",
...
},
</snippet></ROW><ROW><id>19614975</id><snippet>r = dict([(user['name'], user) for user in JSON])
</snippet></ROW><ROW><id>19614975</id><snippet>r</snippet></ROW><ROW><id>19615191</id><snippet>if</snippet></ROW><ROW><id>19615191</id><snippet>else</snippet></ROW><ROW><id>19615191</id><snippet>if True:
 print 
elif True:
  print 
elif True:
   print 
elif True:
     print 
else:
         print
</snippet></ROW><ROW><id>19615191</id><snippet>IndendationError</snippet></ROW><ROW><id>19615191</id><snippet>if True:

    print ""
      print ""  # has different Indentation
    print ""
</snippet></ROW><ROW><id>19615333</id><snippet>objects</snippet></ROW><ROW><id>19615333</id><snippet>ndb</snippet></ROW><ROW><id>19615333</id><snippet>db</snippet></ROW><ROW><id>19615333</id><snippet>ndb</snippet></ROW><ROW><id>19615343</id><snippet>i</snippet></ROW><ROW><id>19615343</id><snippet>j</snippet></ROW><ROW><id>19615343</id><snippet>title</snippet></ROW><ROW><id>19615343</id><snippet>link</snippet></ROW><ROW><id>19615343</id><snippet>for i, j in zip(titlesoup, linksoup):
    print(i.getText())
    print(j.getText())
    print("\n")
</snippet></ROW><ROW><id>19615343</id><snippet>features='xml'</snippet></ROW><ROW><id>19615343</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>19615343</id><snippet>soup = BeautifulSoup(webpage, features='xml')
</snippet></ROW><ROW><id>19615437</id><snippet>read</snippet></ROW><ROW><id>19615437</id><snippet>sort()</snippet></ROW><ROW><id>19615437</id><snippet>sort</snippet></ROW><ROW><id>19615437</id><snippet>lists</snippet></ROW><ROW><id>19615437</id><snippet>readlines</snippet></ROW><ROW><id>19615437</id><snippet>apples
oranges
watermelon
kiwi
zucchini
carrot
okra
jalapeno
pepper
cucumber
banana
</snippet></ROW><ROW><id>19615437</id><snippet>with open('word-text.txt', 'r') as f:
    words = f.readlines()

    #Strip the words of the newline characters (you may or may not want to do this):
    words = [word.strip() for word in words]

    #sort the list:
    words.sort()
    print words
</snippet></ROW><ROW><id>19615437</id><snippet>['apples', 'banana', 'carrot', 'cucumber', 'jalapeno', 'kiwi', 'okra', 'oranges', 'pepper', 'watermelon', 'zucchini']
</snippet></ROW><ROW><id>19615607</id><snippet>deck = cards_above + [JOKER2] + cards_below</snippet></ROW><ROW><id>19615607</id><snippet>deck</snippet></ROW><ROW><id>19615607</id><snippet>deck</snippet></ROW><ROW><id>19615607</id><snippet>deck[:] = cards_above + [JOKER2] + cards_below</snippet></ROW><ROW><id>19615607</id><snippet>&gt;&gt;&gt; def f1(deck):
...     deck = [1,2,3] # This does not change the `deck` passed.
                       # This just create a local variable `deck`.
...
&gt;&gt;&gt; def f2(deck):
...     deck[:] = [4,5,6] # This change the `deck` passed.
...
&gt;&gt;&gt; deck = [0]
&gt;&gt;&gt; f1(deck)
&gt;&gt;&gt; deck
[0]
&gt;&gt;&gt; f2(deck)
&gt;&gt;&gt; deck
[4, 5, 6]
</snippet></ROW><ROW><id>19615873</id><snippet>import pandas as pd
import numpy as np
from pandas import DataFrame
import datetime
# Create a year's worth of data
base = datetime.date.today() - datetime.timedelta(365)
Datelist = [base + datetime.timedelta(days = x) for x in range(365)]
DF = DataFrame(np.random.rand(365), index = Datelist)

# Create a Seasonal Dictionary that will map months to seasons
SeasonDict = {11: 'Winter', 12: 'Winter', 1: 'Winter', 2: 'Spring', 3: 'Spring', 4: 'Spring', 5: 'Summer', 6: 'Summer', 7: 'Summer', \
8: 'Autumn', 9: 'Autumn', 10: 'Autumn'}

# Write a function that will be used to group the data
def GroupFunc(x):
    return SeasonDict[x.month]

# Call the function with the groupby operation. 
Grouped = DF.groupby(GroupFunc)
Grouped.sum()
</snippet></ROW><ROW><id>19615873</id><snippet>DF.groupby(lambda x: SeasonDict[x.month]).sum()
</snippet></ROW><ROW><id>19615873</id><snippet>DF['Season'] = ""
for row in DF.index:
    DF.Season[row] = SeasonDict[row.month]
DFWinter = DF[DF.Season == 'Winter']
</snippet></ROW><ROW><id>19615921</id><snippet>l = [[]]
for e in stripped:
    (l[0] if len(e) == 3 else l).append(e)
&gt;&gt;&gt; 
[['a,b', 'c,d', 'f,g'], 'e', '', 'h', '', '']
</snippet></ROW><ROW><id>19615921</id><snippet>for e in stripped:
    l[0].append(e.split(',')) if len(e) == 3 else l.append(e)
&gt;&gt;&gt; 
[[['a', 'b'], ['c', 'd'], ['f', 'g']], 'e', '', 'h', '', '']
</snippet></ROW><ROW><id>19615921</id><snippet>A</snippet></ROW><ROW><id>19615921</id><snippet>B</snippet></ROW><ROW><id>19615921</id><snippet>stripped</snippet></ROW><ROW><id>19616072</id><snippet>&gt;&gt;&gt; def GroupColFunc(df, ind, col):
...     if df[col].loc[ind] &gt; 1:
...         return 'Group1'
...     else:
...         return 'Group2'
... 
</snippet></ROW><ROW><id>19616072</id><snippet>&gt;&gt;&gt; people.groupby(lambda x: GroupColFunc(people, x, 'a')).sum()
               a         b         c         d        e
Group2 -2.384614 -0.762208  3.359299 -1.574938 -2.65963
</snippet></ROW><ROW><id>19616072</id><snippet>&gt;&gt;&gt; people.groupby(lambda x: 'Group1' if people['b'].loc[x] &gt; people['a'].loc[x] else 'Group2').sum()
               a         b         c         d         e
Group1 -3.280319 -0.007196  1.525356  0.324154 -1.002439
Group2  0.895705 -0.755012  1.833943 -1.899092 -1.657191
</snippet></ROW><ROW><id>19616072</id><snippet>&gt;&gt;&gt; mapping = np.where(people['b'] &gt; people['a'], 'Group1', 'Group2')
&gt;&gt;&gt; mapping
Joe       Group2
Steve     Group1
Wes       Group2
Jim       Group1
Travis    Group1
dtype: string48
&gt;&gt;&gt; people.groupby(mapping).sum()
               a         b         c         d         e
Group1 -3.280319 -0.007196  1.525356  0.324154 -1.002439
Group2  0.895705 -0.755012  1.833943 -1.899092 -1.657191
</snippet></ROW><ROW><id>19616346</id><snippet>dtype=np.int64</snippet></ROW><ROW><id>19616346</id><snippet>In [1]: import numpy

In [2]: A = numpy.matrix([[36, 34, 26],
   ...:         [18, 44,  1],
   ...:         [11, 31, 41]])

In [3]:

In [3]: X1 = numpy.matrix([[46231154], [26619349], [37498603]])

In [4]: A*X1
Out[4]:
matrix([[3544343088],
        [2040910731],
        [2871185236]])
</snippet></ROW><ROW><id>19616385</id><snippet>Logger</snippet></ROW><ROW><id>19616385</id><snippet>def findCaller(self):
    """
    Find the stack frame of the caller so that we can note the source
    file name, line number and function name.
    """
    f = currentframe()
    #On some versions of IronPython, currentframe() returns None if
    #IronPython isn't run with -X:Frames.
    if f is not None:
        f = f.f_back
    rv = "(unknown file)", 0, "(unknown function)"
    while hasattr(f, "f_code"):
        co = f.f_code
        filename = os.path.normcase(co.co_filename)
        if filename == _srcfile:
            f = f.f_back
            continue
        rv = (co.co_filename, f.f_lineno, co.co_name)
        break
    return rv
</snippet></ROW><ROW><id>19616385</id><snippet>Logger</snippet></ROW><ROW><id>19616385</id><snippet>logger.progress('Hello %s', name)
logger.progress('How are you doing?')
</snippet></ROW><ROW><id>19616385</id><snippet>def splitter(txt, *args)
    txt = txt % (args)
    for line in txt.split('\n'):
        yield line

for line in splitter('Hello %s\nHow are you doing?', name):
    logger.progress(line)
</snippet></ROW><ROW><id>19616385</id><snippet>def progress(self, txt, *args):
    self.log(self.PROGRESS, txt, *args)
</snippet></ROW><ROW><id>19616385</id><snippet>progress</snippet></ROW><ROW><id>19616410</id><snippet>for i in D:
  print i
</snippet></ROW><ROW><id>19616410</id><snippet>list(D)</snippet></ROW><ROW><id>19616487</id><snippet>with open ("word-text.txt","r") as f:</snippet></ROW><ROW><id>19616487</id><snippet>&lt;string&gt;.split()</snippet></ROW><ROW><id>19616642</id><snippet>[</snippet></ROW><ROW><id>19616642</id><snippet>]</snippet></ROW><ROW><id>19616642</id><snippet>[ .. ]</snippet></ROW><ROW><id>19616642</id><snippet>re.sub(r'[^a-zA-Z0-9\[\]]',' ', text)
</snippet></ROW><ROW><id>19616642</id><snippet>&gt;&gt;&gt; re.sub(r'[^a-zA-Z0-9\[\]]', ' ', 'a,b[c-d]!')
'a b[c d] '
</snippet></ROW><ROW><id>19616880</id><snippet>self.client</snippet></ROW><ROW><id>19616880</id><snippet>.logout()</snippet></ROW><ROW><id>19616925</id><snippet>csv</snippet></ROW><ROW><id>19616925</id><snippet>import csv

with open('filename.csv', 'rb') as f:
    reader = csv.reader(f, delimiter='#')
    for row in reader:
</snippet></ROW><ROW><id>19616925</id><snippet>row</snippet></ROW><ROW><id>19616925</id><snippet>'1638.93'</snippet></ROW><ROW><id>19616925</id><snippet>amount = float(row[7])
</snippet></ROW><ROW><id>19616925</id><snippet>with open('filename.csv', 'rb') as f:
    reader = csv.reader(f, delimiter='#')
    for row in reader:
        amount = float(row[7])
        if amount &lt;= 1500:
            print row
</snippet></ROW><ROW><id>19617035</id><snippet>usecols</snippet></ROW><ROW><id>19617035</id><snippet>skip_header</snippet></ROW><ROW><id>19617035</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>19617035</id><snippet>test_array = np.genfromtxt(example_file, skip_header=1, usecols=(1,2,3))
&gt;&gt;&gt; print(test_array)
[[ 0.  0.  0.]
 [ 0.  1.  0.]
 [ 1.  0.  0.]]
</snippet></ROW><ROW><id>19617118</id><snippet>?</snippet></ROW><ROW><id>19617118</id><snippet>query = ("INSERT INTO `python`.`UDP` (`Packet`, `Destination`, `Source`, `Protocol`, "
         "`Version`, `Header_Length`, `TTL`, `Protocol_UDP`, `Target`, `Source_Port`, "
         "`Destination_Port`, `Length`) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?))")
</snippet></ROW><ROW><id>19617118</id><snippet>cursor.execute()</snippet></ROW><ROW><id>19617118</id><snippet>cursor.execute(query,
    (destination, source, protocol, version, header_length, ttl, protocolEGP, target, source_port, destination_port, length, data))
</snippet></ROW><ROW><id>19617118</id><snippet>?</snippet></ROW><ROW><id>19617118</id><snippet>%s</snippet></ROW><ROW><id>19617118</id><snippet>:1</snippet></ROW><ROW><id>19617118</id><snippet>:name</snippet></ROW><ROW><id>19617118</id><snippet>%(name)s</snippet></ROW><ROW><id>19617162</id><snippet>for i, _ in enumerate(s): #i here is the index, equal to "i in range(len(s))"
    if s[i:i+3] == 'bob': #Check the current char + the next three chars.
        bob += 1
print('Number of times bob occurs is: ' + str(bob))
</snippet></ROW><ROW><id>19617162</id><snippet>&gt;&gt;&gt; s = 'gfdhbobobyui'
&gt;&gt;&gt; bob = 0
&gt;&gt;&gt; for i, v in enumerate(s): #i here is the index, equal to "i range(len(s))"
    if s[i:i+3] == 'bob': #Check the current char + the next two chars.
        bob += 1


&gt;&gt;&gt; bob
2
</snippet></ROW><ROW><id>19617398</id><snippet>def flatten(a):
    b = []
    for c in a:
        if isinstance(c, list) and any(isinstance(i, list) for i in c):
            b.extend(flatten(c))
        else:
            b.append(c)
    return b
</snippet></ROW><ROW><id>19617398</id><snippet>&gt;&gt;&gt; def flatten(a):
...     b = []
...     for c in a:
...         if isinstance(c, list) and any(isinstance(i, list) for i in c):
...             b.extend(flatten(c))
...         else:
...             b.append(c)
...     return b
... 
&gt;&gt;&gt; A = [ [[1,3]], [[3,5], [4,4], [[5,3]]] ]
&gt;&gt;&gt; flatten(A)
[[1, 3], [3, 5], [4, 4], [5, 3]]
</snippet></ROW><ROW><id>19617398</id><snippet>any()</snippet></ROW><ROW><id>19617608</id><snippet>freq.append(cos(2*pi*i*x))
</snippet></ROW><ROW><id>19617608</id><snippet>from pylab import *
from numpy import *
freq=[]
x=linspace(-500,500,1001)
for i in range(101):
    freq.append(cos(2*pi*i*(x/1001.)))
    plot(freq[-1])
    show() 
</snippet></ROW><ROW><id>19617829</id><snippet>.strip()</snippet></ROW><ROW><id>19617829</id><snippet>()</snippet></ROW><ROW><id>19617829</id><snippet>files_to_find</snippet></ROW><ROW><id>19617829</id><snippet>&gt;&gt;&gt; row = 'abc\n'
&gt;&gt;&gt; row.strip
&lt;built-in method strip of str object at 0x0000000002C5EAF8&gt;
&gt;&gt;&gt; row.strip()
'abc'
</snippet></ROW><ROW><id>19617829</id><snippet>files_to_find.append(row.strip)
</snippet></ROW><ROW><id>19617829</id><snippet>files_to_find.append(row.strip())
</snippet></ROW><ROW><id>19618033</id><snippet>import threading
import time


def reset_level():
    # you can reload your own config file or use logging.config.fileConfig here
    print 'Something else'
    pass


t = threading.Timer(10, reset_level)
t.start()

while True:
    # your app code
    print 'Test'
    time.sleep(2)
</snippet></ROW><ROW><id>19618033</id><snippet>Test
Test
Test
Test
Test
Something else
Test
Test
</snippet></ROW><ROW><id>19618122</id><snippet>six.b</snippet></ROW><ROW><id>19618122</id><snippet>unicode_literals</snippet></ROW><ROW><id>19618122</id><snippet>def b(s): return s</snippet></ROW><ROW><id>19618122</id><snippet>unicode_literals</snippet></ROW><ROW><id>19618122</id><snippet>str(name)</snippet></ROW><ROW><id>19618161</id><snippet>findAll</snippet></ROW><ROW><id>19618161</id><snippet>x = soup.findAll("tbody")

if x is not None and len(x) &gt; 0:
    section = x[0]
</snippet></ROW><ROW><id>19618219</id><snippet>from abc import ABCMeta


class Registry(object):

    def __init__(self):
        self._proxies = {}
        self._classes = {}

    def resolve(self, name):
        try:
            return self._classes[name]
        except KeyError:
            raise KeyError('Cannot resolve "%s".'
                           ' Class not registered yet.' % name)

    def __getitem__(self, name):
        """Return a proxy class bound to `name`."""
        if name not in self._proxies:
            self._proxies[name] = make_proxy(lambda: self.resolve(name))
        return self._proxies[name]

    def __setitem__(self, name, val):
        """Store a class for `name`."""
        self._classes[name] = val


def make_proxy(resolve):
    """
    Return a proxy class.

    :param resolve: a function that returns the actual class

    """

    class ProxyMeta(ABCMeta):
        """
        Custom meta class based on ABCMeta that forwards various checks
        to the resolved class.

        """
        def __eq__(self, y):
            return resolve() == y

        def __repr__(self):
            return repr(resolve())

        def __str__(self):
            return str(resolve())

    class Proxy(object):
        """
        The actual proxy class.

        """
        __metaclass__ = ProxyMeta

        def __new__(cls, *args, **kwargs):
            """Calling this class returns an instance of the resolved class."""
            return resolve()(*args, **kwargs)

        @classmethod
        def __subclasshook__(cls, subclass):
            """issubclass() overwrite."""
            return issubclass(resolve(), subclass)

    return Proxy

&gt;&gt;&gt; registry = Registry()
&gt;&gt;&gt; List = registry['list']
&gt;&gt;&gt; List
KeyError: 'Cannot resolve "list". Class not registered yet.'
&gt;&gt;&gt; registry['list'] = list
&gt;&gt;&gt; List
&lt;type 'list'&gt;
&gt;&gt;&gt; issubclass(List, List)
True
&gt;&gt;&gt; issubclass(list, List)
True
&gt;&gt;&gt; List == list
True
&gt;&gt;&gt; List()
[]
&gt;&gt;&gt; registry['list'] = tuple
&gt;&gt;&gt; List()
()
</snippet></ROW><ROW><id>19618336</id><snippet>__dict__</snippet></ROW><ROW><id>19618336</id><snippet>B</snippet></ROW><ROW><id>19618336</id><snippet>__metaclass__.__new__()</snippet></ROW><ROW><id>19618336</id><snippet>B</snippet></ROW><ROW><id>19618336</id><snippet>B</snippet></ROW><ROW><id>19618336</id><snippet>__get__</snippet></ROW><ROW><id>19618336</id><snippet>class A(object):
    def __init__(self):
        self.hello = "Hello"
        # + some huge misguided crap that I do not control
    def f1(self):
        self.f2()
    def f2(self):
        print self.hello

class B(object):
    class __metaclass__(type):
        A_METHODS = ['f{}'.format(i) for i in xrange(1, 11)] # 'f1'...'f10'

        def __new__(mcls, classname, bases, classdict):
            classobj = type.__new__(mcls, classname, bases, classdict)
            classobj.hello = A().hello
            for fn in mcls.A_METHODS:
                if fn in A.__dict__:
                    setattr(classobj, fn, A.__dict__[fn].__get__(classobj, A))
            return classobj

    def __init__(self):
        pass

a = B()
a.f2()  # --&gt; Hello
</snippet></ROW><ROW><id>19618337</id><snippet>temp[0]</snippet></ROW><ROW><id>19618337</id><snippet>False</snippet></ROW><ROW><id>19618337</id><snippet>'test'</snippet></ROW><ROW><id>19618337</id><snippet>True</snippet></ROW><ROW><id>19618337</id><snippet>if(temp[0]=="generate" or 'test' or 'randomize' or 'randomise' or 'go'):
</snippet></ROW><ROW><id>19618337</id><snippet>if(temp[0]=="generate" or temp[0]=='test' or temp[0]=='randomize' or temp[0]=='randomise' or temp[0]=='go'):
</snippet></ROW><ROW><id>19618337</id><snippet>if(temp[0] in ("generate",'test', 'randomize', 'randomise', 'go')):
</snippet></ROW><ROW><id>19618481</id><snippet>block[4*i+j] = arr[i][j]
</snippet></ROW><ROW><id>19618481</id><snippet>i, j</snippet></ROW><ROW><id>19618481</id><snippet>enumerate()</snippet></ROW><ROW><id>19618481</id><snippet>block</snippet></ROW><ROW><id>19618481</id><snippet>for i, outer in enumerate(arr):
    for j, value in enumerate(outer):
        block[4 * i + j] = value
</snippet></ROW><ROW><id>19618498</id><snippet>text = 'Hello JJ'
counter = 0
for i in range(len(text)):
    if counter:
        counter -= 1
        continue
    for j in range(i + 1, len(text)):
        if text[j] != text[i]: break
        else: counter += 1
    print text[0:i + counter + 1]
</snippet></ROW><ROW><id>19618498</id><snippet>H
He
Hell
Hello
Hello 
Hello JJ
</snippet></ROW><ROW><id>19618518</id><snippet>t="j,h,m,s"
</snippet></ROW><ROW><id>19618518</id><snippet>int(t[anything])</snippet></ROW><ROW><id>19618518</id><snippet>t = "1234"</snippet></ROW><ROW><id>19618518</id><snippet>t = "31,11,22,45"</snippet></ROW><ROW><id>19618518</id><snippet>int(t[6])</snippet></ROW><ROW><id>19618518</id><snippet>t = int(t[9:11])</snippet></ROW><ROW><id>19618518</id><snippet>#!/usr/bin/python

t = "31,11,22,45"
(day, hour, min, sec) = [int(elem) for elem in t.split(',')]

if not 0 &lt;= sec &lt;= 59:
    print("Seconds wrong")
elif not 0 &lt;= min &lt;= 59:
    print("Minutes wrong")
elif not 0 &lt;= hour &lt;= 23:
    print("Hours wrong")
elif not 1 &lt;= day &lt;= 31:
    print("days wrong")
else:
    print("OK")
</snippet></ROW><ROW><id>19618518</id><snippet>if</snippet></ROW><ROW><id>19618518</id><snippet>elif</snippet></ROW><ROW><id>19618518</id><snippet>"OK"</snippet></ROW><ROW><id>19618518</id><snippet>day</snippet></ROW><ROW><id>19618518</id><snippet>#!/usr/bin/python

t = "31,11,22,45"
(day, hour, min, sec) = [int(elem) for elem in t.split(',')]
time_ok = True

if not 0 &lt;= sec &lt;= 59:
    print("Seconds wrong")
    time_ok = False

if not 0 &lt;= min &lt;= 59:
    print("Minutes wrong")
    time_ok = False

if not 0 &lt;= hour &lt;= 23:
    print("Hours wrong")
    time_ok = False

if not 1 &lt;= day &lt;= 31:
    print("Days wrong")
    time_ok = False

if time_ok:
    print("Time is OK")
</snippet></ROW><ROW><id>19618522</id><snippet>s='1.25,3.455,3.7'
print sum(float(num) for num in s.split(","))
</snippet></ROW><ROW><id>19618522</id><snippet>,</snippet></ROW><ROW><id>19618522</id><snippet>float</snippet></ROW><ROW><id>19618522</id><snippet>print s.split(",")
</snippet></ROW><ROW><id>19618522</id><snippet>['1.25', '3.455', '3.7']
</snippet></ROW><ROW><id>19618522</id><snippet>for num in s.split(","):
    print float(num)
</snippet></ROW><ROW><id>19618522</id><snippet>1.25
3.455
3.7
</snippet></ROW><ROW><id>19618522</id><snippet>sum(float(num) for num in s.split(","))</snippet></ROW><ROW><id>19618531</id><snippet>zipfile</snippet></ROW><ROW><id>19618531</id><snippet>ZipFile.extractall()</snippet></ROW><ROW><id>19618531</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>19618531</id><snippet>test1</snippet></ROW><ROW><id>19618531</id><snippet>test1.zip</snippet></ROW><ROW><id>19618531</id><snippet>tmpfile.mkdtemp()</snippet></ROW><ROW><id>19618531</id><snippet>shutil.move()</snippet></ROW><ROW><id>19618531</id><snippet>#!/usr/bin/env python
"""Usage:
./extract.py test.zip
"""

from zipfile import ZipFile
import os
import sys
import tempfile
import shutil


ROOT_PATH = 'xl/media/'

zip_name = sys.argv[1]
zip_path = os.path.abspath(zip_name)
extraction_dir = os.path.join(os.getcwd(), os.path.splitext(zip_name)[0])
temp_dir = tempfile.mkdtemp()


with ZipFile(zip_path, 'r') as zip_file:
    # Build a list of only the members below ROOT_PATH
    members = zip_file.namelist()
    members_to_extract = [m for m in members if m.startswith(ROOT_PATH)]
    # Extract only those members to the temp directory
    zip_file.extractall(temp_dir, members_to_extract)
    # Move the extracted ROOT_PATH directory to its final location
    shutil.move(os.path.join(temp_dir, ROOT_PATH), extraction_dir)

# Uncomment if you want to delete the original zip file
# os.remove(zip_path)

print "Sucessfully extracted '%s' to '%s'" % (zip_path, extraction_dir)
</snippet></ROW><ROW><id>19618531</id><snippet>try..except</snippet></ROW><ROW><id>19618556</id><snippet>csv</snippet></ROW><ROW><id>19618556</id><snippet>import csv

with open(csvfilename, 'rb') as infile:
    reader = csv.reader(infile)
    for row in reader:
        print repr(row[5])
</snippet></ROW><ROW><id>19618556</id><snippet>'Block. CertNot Valid.\nQuery with me'
</snippet></ROW><ROW><id>19618577</id><snippet>/^#@ &lt;.*wxyz.*&gt;/ {
   N        #Add the next line to the pattern space
   s/.*//   #clear the line
   N        #Read another line
   /^\n$/ d #if line was blank, delete and start next cycle (reading again)
   D        #Otherwise, delete up to newline, and start next cycle with that

}
</snippet></ROW><ROW><id>19618758</id><snippet>mayapy</snippet></ROW><ROW><id>19618758</id><snippet>&lt;Maya_INSTALL_DIR&gt;\bin</snippet></ROW><ROW><id>19618768</id><snippet>import os
os.system('eog {0}'.format(r'path/to/your/gif'))
</snippet></ROW><ROW><id>19618809</id><snippet>getattr</snippet></ROW><ROW><id>19618809</id><snippet>getattr(customer, a)
</snippet></ROW><ROW><id>19618809</id><snippet>&gt;&gt;&gt; class Human:
...     name = 'Jenny'
...     phone = '8675309'
...
&gt;&gt;&gt; customer = Human()
&gt;&gt;&gt; for a in ['name', 'phone']:
...     print(getattr(customer, a))
...
Jenny
8675309
</snippet></ROW><ROW><id>19618823</id><snippet>x2 = [0.000266987932788242, 0.000106735120804439, -0.000133516844874253, -0.000534018243439120]
print [1 if num &gt;= 0 else num for num in x2]
</snippet></ROW><ROW><id>19618823</id><snippet>[1, 1, -0.000133516844874253, -0.000534018243439120]
</snippet></ROW><ROW><id>19618823</id><snippet>x2 = [-1, 2, -3, 4]
print [-1 if num &lt; 0 else num for num in x2]
</snippet></ROW><ROW><id>19618823</id><snippet>[0.000266987932788242, 0.000106735120804439,  -1, -1]
</snippet></ROW><ROW><id>19618823</id><snippet>x2 = [0.000266987932788242, 0.000106735120804439, -0.000133516844874253, -0.000534018243439120]
x2 = [-1 if num &lt; 0 else 1 for num in x2]
print x2
</snippet></ROW><ROW><id>19618823</id><snippet>[1, 1, -1, -1]
</snippet></ROW><ROW><id>19618837</id><snippet>create table series (
  series_name,
  alt_name,
  special_eps,
  special_eps_me,
  primary key(series_name)
);

create table seasons (
  series_name,
  season_num,         
  i_have_season, 
  episodes, 
  episodes_i_have,
  primary key (series_name,season_num),
  foreign key (series_name) references series (series_name),
  check (i_have_season in ('F','T'))
);

create view everything_with_counts as 
select series_name, 
       alt_name, 
       special_eps, 
       special_eps_me, 
       (select count(*) from seasons  where seasons.series_name = series.series_name) as tot_ses,
       (select count(*) from seasons  where seasons.series_name = series.series_name and i_have_season = 'T') as tot_ses_me,
       (select sum(episodes) from seasons where seasons.series_name = series.series_name) as tot_epsiodes,
       (select sum(episodes_i_have) from seasons where seasons.series_name = series.series_name and i_have_season = 'T') as tot_epsiodes_me
from series;
</snippet></ROW><ROW><id>19618837</id><snippet>create table series_a (
  season_num,         
  i_have_season, 
  episodes, 
  episodes_i_have
);

create table series_b (
  season_num,         
  i_have_season, 
  episodes, 
  episodes_i_have
);
</snippet></ROW><ROW><id>19618837</id><snippet>create table summary (
  series_name,
  alt_name,
  special_eps,
  special_eps_me,
  tot_ses,
  tot_ses_me,
  tot_episodes,
  tot_episodes_me,
  primary key(series_name));
</snippet></ROW><ROW><id>19618837</id><snippet>  create trigger series_a_ins after insert on series_a 
  begin
    update summary set tot_ses = (select count(*) from series_a ),
                       tot_ses_me = (select count(*) from series_a  where  i_have_season = 'T'),
                       tot_episodes = (select sum(episodes) from series_a ),
                       tot_episodes_me = (select sum(episodes_i_have) from series_a where  i_have_season = 'T') 
    where series_name = 'a';
  end;

/* create trigger series_a_upd after update on series_a ... */
/* create trigger series_a_del after delete on series_a ... */
</snippet></ROW><ROW><id>19618957</id><snippet>.profile</snippet></ROW><ROW><id>19618957</id><snippet>    export PYTHONDIR=/Library/Frameworks/Python.framework/Versions/2.7/bin
    export PYTHONPATH=$PYTHONPATH:/Library/Frameworks/Python.framework/Versions/2.7/bin
    export PYTHONPATH=$PYTHONPATH:/Users/mohsenjadidi/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages
    export PYTHONPATH=$PYTHONPATH:/Applications/Canopy.app/appdata/canopy-1.0.1.1189.macosx-x86_64/Canopy.app/Contents/lib/python2.7/site-packages
</snippet></ROW><ROW><id>19618957</id><snippet>canopy</snippet></ROW><ROW><id>19618986</id><snippet>if last_pos(i) != None:</snippet></ROW><ROW><id>19618986</id><snippet>for</snippet></ROW><ROW><id>19618986</id><snippet>i</snippet></ROW><ROW><id>19618986</id><snippet>i+1</snippet></ROW><ROW><id>19618986</id><snippet>diff</snippet></ROW><ROW><id>19618986</id><snippet>diff - 1</snippet></ROW><ROW><id>19618986</id><snippet>maxLen</snippet></ROW><ROW><id>19618986</id><snippet>for i in range(len(s)):
    if last_pos(i) != None:
        diff = last_pos(i) - i + 1
    if diff &gt; maxLen:
        maxLen = diff
        startPos = i
        endPos = startPos + diff - 1
</snippet></ROW><ROW><id>19619020</id><snippet>Series.isin()</snippet></ROW><ROW><id>19619020</id><snippet>DataFrame.append()</snippet></ROW><ROW><id>19619020</id><snippet>In [80]: df1
Out[80]:
   rating  user_id
0       2  0x21abL
1       1  0x21abL
2       1   0xdafL
3       0  0x21abL
4       4  0x1d14L
5       2  0x21abL
6       1  0x21abL
7       0   0xdafL
8       4  0x1d14L
9       1  0x21abL

In [81]: df2
Out[81]:
   rating      user_id
0       2      0x1d14L
1       1    0xdbdcad7
2       1      0x21abL
3       3      0x21abL
4       3      0x21abL
5       1  0x5734a81e2
6       2      0x1d14L
7       0       0xdafL
8       0      0x1d14L
9       4  0x5734a81e2

In [82]: ind = df2.user_id.isin(df1.user_id) &amp; df1.user_id.isin(df2.user_id)

In [83]: ind
Out[83]:
0     True
1    False
2     True
3     True
4     True
5    False
6     True
7     True
8     True
9    False
Name: user_id, dtype: bool

In [84]: df1[ind].append(df2[ind])
Out[84]:
   rating  user_id
0       2  0x21abL
2       1   0xdafL
3       0  0x21abL
4       4  0x1d14L
6       1  0x21abL
7       0   0xdafL
8       4  0x1d14L
0       2  0x1d14L
2       1  0x21abL
3       3  0x21abL
4       3  0x21abL
6       2  0x1d14L
7       0   0xdafL
8       0  0x1d14L
</snippet></ROW><ROW><id>19619020</id><snippet>pandas</snippet></ROW><ROW><id>19619020</id><snippet>df1</snippet></ROW><ROW><id>19619020</id><snippet>df2</snippet></ROW><ROW><id>19619020</id><snippet>In [93]: df1.index &amp; df2.index
Out[93]: Int64Index([], dtype='int64')
</snippet></ROW><ROW><id>19619029</id><snippet>H=set()
ans=0
for a in A: 
  H.add(a)
for a in A: 
  if a-k in H: 
    ans+=1
print ans
</snippet></ROW><ROW><id>19619029</id><snippet>H=set(A)
ans = sum(1 for a in A if a-k in H)
print ans
</snippet></ROW><ROW><id>19619137</id><snippet>{
    "title": "Post Title 1",
    "video": "http://www.youtube.com/watch?v=0u03h73ClZ8",
    "artist": "artist_name 1"
}
</snippet></ROW><ROW><id>19619137</id><snippet>"artist": {"name": "artist_name 1"}
</snippet></ROW><ROW><id>19619137</id><snippet>"artist": "/api/v1/user/1/"
</snippet></ROW><ROW><id>19619269</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; rte = np.array([1,2,3,4,5])
&gt;&gt;&gt; yu = np.array([np.nan, np.nan, np.nan, np.nan, np.nan,])
&gt;&gt;&gt; yu[:] = rte

&gt;&gt;&gt; yu
array([ 1.,  2.,  3.,  4.,  5.])
</snippet></ROW><ROW><id>19619269</id><snippet>yu[np.isnan(yu)] = values
</snippet></ROW><ROW><id>19619269</id><snippet>&gt;&gt;&gt; yu
array([ 0.20087116,         nan,  0.71742786,  0.05037165,  0.25646742,
               nan,  0.27702335,         nan,         nan,  0.62272575])

&gt;&gt;&gt; yu[np.isnan(yu)] = np.random.rand(4)

&gt;&gt;&gt; yu
array([ 0.20087116,  0.6701011 ,  0.71742786,  0.05037165,  0.25646742,
        0.63462273,  0.27702335,  0.01248758,  0.61178318,  0.62272575])
</snippet></ROW><ROW><id>19619545</id><snippet>return render(request, 'polls/detail.html', {
    'question': p,
    'error_message': "You didn't select a choice.",
})
</snippet></ROW><ROW><id>19619728</id><snippet>if len(l) != len(set(l)):
    # not unique
</snippet></ROW><ROW><id>19619849</id><snippet>SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [('birthdate', 'birthdate')]</snippet></ROW><ROW><id>19619849</id><snippet>user.social_auth.get(provider='facebook').extra_data['birthdate']</snippet></ROW><ROW><id>19619849</id><snippet>strategy</snippet></ROW><ROW><id>19619849</id><snippet>backend</snippet></ROW><ROW><id>19619849</id><snippet>social</snippet></ROW><ROW><id>19619849</id><snippet>user</snippet></ROW><ROW><id>19619849</id><snippet>response</snippet></ROW><ROW><id>19619849</id><snippet>requests</snippet></ROW><ROW><id>19619849</id><snippet>details</snippet></ROW><ROW><id>19619849</id><snippet>**kwargs</snippet></ROW><ROW><id>19619849</id><snippet>SOCIAL_AUTH_PIPELINE</snippet></ROW><ROW><id>19619990</id><snippet>turtle.delay(0)</snippet></ROW><ROW><id>19619990</id><snippet>import turtle
turtle.width(5)
yd=xd=-64
turtle.delay(0) # &lt;----
for i in range(2):
    turtle.up()
    turtle.goto(-197.5,yd)
    turtle.down()
    turtle.seth(0)
    turtle.fd(394)
    yd+=128
    turtle.up()
    turtle.goto(xd,197.5)
    turtle.down()
    turtle.seth(270)
    turtle.fd(394)
    xd+=128
turtle.mainloop()
</snippet></ROW><ROW><id>19619990</id><snippet>turtle.update</snippet></ROW><ROW><id>19619990</id><snippet>turtle.tracer</snippet></ROW><ROW><id>19619990</id><snippet>...
turtle.tracer(8,25)
for i in range(2):
    ...
tracer.update()
tracer.mainloop()
</snippet></ROW><ROW><id>19619999</id><snippet>#ifndef SHAREDMEMORY_HPP_INCLUDED
#define SHAREDMEMORY_HPP_INCLUDED

#if defined _WIN32 || defined _WIN64
    #include &lt;windows.h&gt;
#else
    #include &lt;sys/types.h&gt;
    #include &lt;sys/mman.h&gt;
    #include &lt;dlfcn.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;unistd.h&gt;
#endif

#include &lt;tchar.h&gt;
#include &lt;iostream&gt;
#include &lt;map&gt;

class SharedMemory
{
    private:
        void* FromFile;
        void* hFileMap;
        void* pData;
        std::string MapName;
        std::size_t Size;
        bool Debug;
        std::map&lt;std::string, void*&gt; Events;

    public:
        SharedMemory(std::string MapName);
        SharedMemory(std::string MapName, std::size_t Size);
        ~SharedMemory();

        SharedMemory(const SharedMemory&amp; Shm) = delete;
        SharedMemory(SharedMemory &amp;&amp; Shm) = delete;
        SharedMemory&amp; operator = (const SharedMemory&amp; Shm) = delete;
        SharedMemory&amp; operator = (SharedMemory &amp;&amp; Shm) = delete;

        void* GetDataPointer();

        bool OpenMemoryMap(std::size_t Size);

        bool MapMemory(std::size_t Size);

        bool ReleaseMemory();

        bool CreateNewEvent(LPSECURITY_ATTRIBUTES lpEventAttributes, bool bManualReset, bool bInitialState, std::string EventName);

        std::uint32_t OpenSingleEvent(std::string EventName, bool InheritHandle, bool SaveHandle = false, std::uint32_t dwDesiredAccess = EVENT_ALL_ACCESS, std::uint32_t dwMilliseconds = INFINITE);

        bool SetEventSignal(std::string EventName, bool Signaled);

        bool DeleteSingleEvent(std::string EventName);

        bool DeleteAllEvents();

        void SetDebug(bool On);
};

#endif // SHAREDMEMORY_HPP_INCLUDED
</snippet></ROW><ROW><id>19619999</id><snippet>#include "SharedMemory.hpp"

SharedMemory::SharedMemory(std::string MapName) : hFileMap(nullptr), pData(nullptr), MapName(MapName), Size(0), Debug(false), Events() {}
SharedMemory::SharedMemory(std::string MapName, std::size_t Size) : hFileMap(nullptr), pData(nullptr), MapName(MapName), Size(Size), Debug(false), Events() {}
SharedMemory::~SharedMemory()
{
    ReleaseMemory();
    DeleteAllEvents();
}

void* SharedMemory::GetDataPointer()
{
    void* Ptr = pData;
    return Ptr;
}

bool SharedMemory::OpenMemoryMap(std::size_t Size)
{
    this-&gt;Size = Size;

    #if defined _WIN32 || defined _WIN64
    if ((hFileMap = OpenFileMapping(FILE_MAP_ALL_ACCESS, false, MapName.c_str())) == nullptr)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Open Shared Memory Map.\n");
        return false;
    }

    if ((pData = MapViewOfFile(hFileMap, FILE_MAP_ALL_ACCESS, 0, 0, Size)) == nullptr)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Map View Of File.\n");
        CloseHandle(hFileMap);
        return false;
    }

    #else

    if ((hFileMap = open(MapName.c_str(), O_RDWR | O_CREAT, 438)) == -1)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Open Shared Memory Map.\n");
        return false;
    }

    if ((pData = mmap(nullptr, Size, PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED, hFileMap, 0)) == MAP_FAILED)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Map View Of File.\n");
        close(hFileMap);
        return false;
    }
    #endif

    if (Debug) std::cout &lt;&lt; _T("\nInter-Process Communication Successful.\n");
    return true;
}

bool SharedMemory::MapMemory(std::size_t Size)
{
    this-&gt;Size = Size;

    #if defined _WIN32 || defined _WIN64
    if ((hFileMap = CreateFileMapping(INVALID_HANDLE_VALUE, nullptr, PAGE_READWRITE, 0, Size, MapName.c_str())) == nullptr)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Create Shared Memory Map.\n");
        return false;
    }

    if ((pData = MapViewOfFile(hFileMap, FILE_MAP_ALL_ACCESS, 0, 0, Size)) == nullptr)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Map View Of File.\n");
        CloseHandle(hFileMap);
        return false;
    }

    #else

    if ((hFileMap = open(MapName.c_str(), O_RDWR | O_CREAT, 438)) == -1)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Create Shared Memory Map.\n");
        return false;
    }

    if ((pData = mmap(nullptr, Size, PROT_READ | PROT_WRITE, MAP_FILE | MAP_SHARED, hFileMap, 0)) == MAP_FAILED)
    {
        if (Debug) std::cout &lt;&lt; _T("\nCould Not Map View Of File.\n");
        close(hFileMap);
        return false;
    }
    #endif

    if (Debug) std::cout &lt;&lt; _T("\nMapped Shared Memory Successfully.\n");
    return true;
}

bool SharedMemory::ReleaseMemory()
{
    bool Result = false;
    #if defined _WIN32 || defined _WIN64
    if (pData)
    {
        Result = UnmapViewOfFile(pData);
        pData = nullptr;
        if (Result &amp;&amp; Debug)
        {
            std::cout &lt;&lt; _T("\nMemory Un-Mapped Successfully.\n");
        }
    }

    if (hFileMap)
    {
        if (CloseHandle(hFileMap))
        {
            hFileMap = nullptr;
            Result = Result &amp;&amp; true;
            if (Debug) std::cout &lt;&lt; _T("\nMemory Map Closed Successfully.\n");
        }
    }

    #else

    if (pData)
    {
        Result = munmap(pData, Size);
        if (!Result &amp;&amp; Debug)
        {
            std::cout &lt;&lt; _T("\nMemory Un-Mapped Successfully.\n");
        }
        pData = nullptr;
        return true;
    }

    if (hFileMap)
    {
        if (!close(hFileMap))
        {
            hFileMap = nullptr;
            if (Debug) std::cout &lt;&lt; _T("\nMemory Map Closed Successfully.\n");
        }
    }
    #endif
    return Result;
}

bool SharedMemory::CreateNewEvent(LPSECURITY_ATTRIBUTES lpEventAttributes, bool bManualReset, bool bInitialState, std::string EventName)
{
    std::map&lt;std::string, void*&gt;::iterator it = Events.find(EventName);
    if (it != Events.end())
    {
        if (Debug)
        {
            std::cout &lt;&lt; _T("\nCreateNewEvent Error: An Event With That Key Already Exists!\n");
        }
        return false;
    }

    Events.insert(std::pair&lt;std::string, void*&gt;(EventName, CreateEvent(lpEventAttributes, bManualReset, bInitialState, EventName.c_str())));
    it = Events.end();
    return ((--it)-&gt;second != nullptr);
}

std::uint32_t SharedMemory::OpenSingleEvent(std::string EventName, bool InheritHandle, bool SaveHandle, std::uint32_t dwDesiredAccess, std::uint32_t dwMilliseconds)
{
    void* hEvent = OpenEvent(dwDesiredAccess, InheritHandle, EventName.c_str());
    if (hEvent)
    {
        if (SaveHandle)
        {
            std::map&lt;std::string, void*&gt;::iterator it = Events.find(EventName);
            if (it != Events.end())
            {
                CloseHandle(it-&gt;second);
                it-&gt;second = hEvent;
            }
            else
                Events.insert(std::pair&lt;std::string, void*&gt;(EventName, hEvent));
        }
        std::uint32_t Result = WaitForSingleObject(hEvent, dwMilliseconds);
        if (!SaveHandle) CloseHandle(hEvent);
        return Result;
    }
    CloseHandle(hEvent);
    return WAIT_FAILED;
}

bool SharedMemory::SetEventSignal(std::string EventName, bool Signaled)
{
    std::map&lt;std::string, void*&gt;::iterator it = Events.find(EventName);
    if (it == Events.end())
    {
        if (Debug)
        {
            std::cout &lt;&lt; _T("\nSetEventSignal Error: No Event With That Key Exists!\n");
        }
        return false;
    }
    if (Signaled) return SetEvent(it-&gt;second);
    return ResetEvent(it-&gt;second);
}

bool SharedMemory::DeleteSingleEvent(std::string EventName)
{
    std::map&lt;std::string, void*&gt;::iterator it = Events.find(EventName);
    if (it == Events.end()) return true;
    bool Result = CloseHandle(it-&gt;second);
    Events.erase(it);
    return Result;
}

bool SharedMemory::DeleteAllEvents()
{
    bool Result = false;
    for (std::map&lt;std::string, void*&gt;::iterator it = Events.begin(); it != Events.end(); ++it)
    {
        Result = Result &amp;&amp; CloseHandle(it-&gt;second);
    }
    Events.clear();
    return Result;
}

void SharedMemory::SetDebug(bool On)
{
    Debug = On;
}
</snippet></ROW><ROW><id>19619999</id><snippet>SharedMemory mem("OpenCVMap", 1980 * 1024 * 4); //Assuming max image size is 1980*1024*RGBA.
mem-&gt;CreateNewEvent(nullptr, true, false, "ImageReplySignal");

unsigned char* PtrToImagePixel = GetOpenCVCameraFeed();
unsigned char* MemPtr = static_cast&lt;unsigned char*&gt;(mem-&gt;GetDataPointer());
*reinterpret_cast&lt;int*&gt;(MemPtr) = GetOpenCVCameraFeedSize();
MemPtr += sizeof(int);

for (int i = 0; i &lt; GetOpenCVCameraFeedSize(); ++i)
{
    *MemPtr += *PtrToImagePixels++;
} 
mem-&gt;SetEventSignal("ImageReplySignal", true);
</snippet></ROW><ROW><id>19619999</id><snippet>SharedMemory mem("OpenCVMap");
mem-&gt;OpenMemoryMap(1980 * 1024 * 4);
std::vector&lt;unsigned char&gt; Image;

while(true)
{
    if (mem-&gt;OpenSingleEvent("ImageReplySignal", true, true) == WAIT_OBJECT_0)
    {
        unsigned char* MemPtr = static_cast&lt;unsigned char*&gt;(mem-&gt;GetDataPointer());
        int size = *(reinterpret_cast&lt;int*&gt;(MemPtr));
        MemPtr += sizeof(int);
        Image.resize(size);

        for (int i = 0; i &lt; size; ++i)
        {
            Image[i] = *MemPtr++;
        }

        mem-&gt;SetEventSignal("ImageReplySignal", false);
    }
}
</snippet></ROW><ROW><id>19620198</id><snippet>lxml</snippet></ROW><ROW><id>19620198</id><snippet>link</snippet></ROW><ROW><id>19620198</id><snippet>href</snippet></ROW><ROW><id>19620198</id><snippet>from lxml import etree

parser = etree.HTMLParser()

doc = etree.parse(open('sample.html'), parser)
links = doc.xpath("//head/link[@rel='stylesheet']")
hrefs = [l.attrib['href'] for l in links]

print hrefs
</snippet></ROW><ROW><id>19620198</id><snippet>['catalog/view/theme/default/stylesheet/stylesheet.css', 'http://1', 'http://2']
</snippet></ROW><ROW><id>19620400</id><snippet>self.processing_label.show()
QtGui.qApp.processEvents() # or QtCore.QCoreApplication.processEvents()
self.qry_db()
</snippet></ROW><ROW><id>19620530</id><snippet>from utility import some_func
</snippet></ROW><ROW><id>19620530</id><snippet>.py</snippet></ROW><ROW><id>19620530</id><snippet>python-requests</snippet></ROW><ROW><id>19620630</id><snippet>0.44999999999999996 &lt; 0.45
</snippet></ROW><ROW><id>19620630</id><snippet>&gt;&gt;&gt; x=0.35
&gt;&gt;&gt; while (x&lt;0.45):
        x = x+0.05
        print repr(x),"&lt;",0.45, x&lt;0.45
...     
0.39999999999999997 &lt; 0.45 True
0.44999999999999996 &lt; 0.45 True
0.49999999999999994 &lt; 0.45 False
</snippet></ROW><ROW><id>19620630</id><snippet>print</snippet></ROW><ROW><id>19620630</id><snippet>str</snippet></ROW><ROW><id>19620630</id><snippet>&gt;&gt;&gt; print 0.44999999999999996
0.45
&gt;&gt;&gt; print str(0.44999999999999996)
0.45
&gt;&gt;&gt; print repr(0.44999999999999996)
0.44999999999999996
</snippet></ROW><ROW><id>19620698</id><snippet>x.__dict__</snippet></ROW><ROW><id>19620698</id><snippet>&gt;&gt;&gt; x.__dict__
{'value': 'hello', 'valueTwo': 'world'}
</snippet></ROW><ROW><id>19620861</id><snippet>twinx</snippet></ROW><ROW><id>19620861</id><snippet>import numpy as np
import matplotlib.pyplot as plt

numpoints = 30
theta = np.linspace(0, 2*np.pi, numpoints)
r1 = np.random.random(numpoints)
r2 = 5 * np.random.random(numpoints)

params = dict(projection='polar', theta_direction=-1, theta_offset=np.pi/2)
fig, ax = plt.subplots(subplot_kw=params)

ax.fill_between(theta, r2, color='blue', alpha=0.5)
ax.fill_between(theta, r1, color='green', alpha=0.5)

plt.show()
</snippet></ROW><ROW><id>19620861</id><snippet>ax.twinx()</snippet></ROW><ROW><id>19620861</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    numpoints = 30
    theta = np.linspace(0, 2*np.pi, numpoints)
    r1 = np.random.random(numpoints)
    r2 = 5 * np.random.random(numpoints)

    params = dict(projection='polar', theta_direction=-1, theta_offset=np.pi/2)
    fig, ax = plt.subplots(subplot_kw=params)
    ax2 = polar_twin(ax)

    ax.fill_between(theta, r2, color='blue', alpha=0.5)
    ax2.fill_between(theta, r1, color='green', alpha=0.5)
    plt.show()

def polar_twin(ax):
    ax2 = ax.figure.add_axes(ax.get_position(), projection='polar', 
                             label='twin', frameon=False,
                             theta_direction=ax.get_theta_direction(),
                             theta_offset=ax.get_theta_offset())
    ax2.xaxis.set_visible(False)
    # There should be a method for this, but there isn't... Pull request?
    ax2._r_label_position._t = (22.5 + 180, 0.0)
    ax2._r_label_position.invalidate()
    # Ensure that original axes tick labels are on top of plots in twinned axes
    for label in ax.get_yticklabels():
        ax.figure.texts.append(label)
    return ax2

main()
</snippet></ROW><ROW><id>19620861</id><snippet>plt.setp(ax2.get_yticklabels(), color='darkgreen')
plt.setp(ax.get_yticklabels(), color='darkblue')
</snippet></ROW><ROW><id>19620861</id><snippet>ax.set_rlim([0, 5])
ax2.set_rlim([0, 1])
</snippet></ROW><ROW><id>19620861</id><snippet>import numpy as np
import matplotlib.pyplot as plt
np.random.seed(1977)

def main():
    numpoints = 30
    theta = np.linspace(0, 2*np.pi, numpoints)
    r1 = np.random.random(numpoints)
    r2 = 5 * np.random.random(numpoints)

    params = dict(projection='polar', theta_direction=-1, theta_offset=np.pi/2)
    fig, ax = plt.subplots(subplot_kw=params)
    ax2 = polar_twin(ax)

    ax.fill_between(theta, r2, color='blue', alpha=0.5)
    ax2.fill_between(theta, r1, color='green', alpha=0.5)

    plt.setp(ax2.get_yticklabels(), color='darkgreen')
    plt.setp(ax.get_yticklabels(), color='darkblue')
    ax.set_ylim([0, 5])
    ax2.set_ylim([0, 1])

    plt.show()

def polar_twin(ax):
    ax2 = ax.figure.add_axes(ax.get_position(), projection='polar', 
                             label='twin', frameon=False,
                             theta_direction=ax.get_theta_direction(),
                             theta_offset=ax.get_theta_offset())
    ax2.xaxis.set_visible(False)

    # There should be a method for this, but there isn't... Pull request?
    ax2._r_label_position._t = (22.5 + 180, 0.0)
    ax2._r_label_position.invalidate()

    # Bit of a hack to ensure that the original axes tick labels are on top of
    # whatever is plotted in the twinned axes. Tick labels will be drawn twice.
    for label in ax.get_yticklabels():
        ax.figure.texts.append(label)

    return ax2

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19620990</id><snippet>get()</snippet></ROW><ROW><id>19620990</id><snippet>calc_c</snippet></ROW><ROW><id>19620990</id><snippet>calc_b</snippet></ROW><ROW><id>19620990</id><snippet>try</snippet></ROW><ROW><id>19620990</id><snippet>except</snippet></ROW><ROW><id>19620990</id><snippet>else</snippet></ROW><ROW><id>19620990</id><snippet>def calc_c(self,name,index,mode):
    try:
        self.c.set(self.b.get()*self.a.get())
    except ValueError:
        # here you can either complain to the user (message-box...) 
        # or just restore the last value using the other entry like so:
        self.b.set(self.c.get()/self.a.get())
</snippet></ROW><ROW><id>19621001</id><snippet>total = 0;
for i in range (a_lenght):
    if(a[i] == u[0]):
        end = i + u_length;

    if (a[i:end] == u):
        total +=1;
</snippet></ROW><ROW><id>19621013</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False, index=True)
    variant = Column(Integer, nullable=False, index=True)

    def __init__(self, name):
        self.name = name
        self.variant = select([func.count(User.id)]).where(User.name == self.name)

e = create_engine("sqlite://", echo=True)

Base.metadata.create_all(e)

s = Session(e)

s.add(User(name='n1'))
s.commit()

s.add(User(name='n1'))
s.commit()

print s.query(User.variant).all()
</snippet></ROW><ROW><id>19621130</id><snippet>*val</snippet></ROW><ROW><id>19621130</id><snippet>list</snippet></ROW><ROW><id>19621130</id><snippet>tuple</snippet></ROW><ROW><id>19621130</id><snippet>float()</snippet></ROW><ROW><id>19621130</id><snippet>str</snippet></ROW><ROW><id>19621130</id><snippet>float</snippet></ROW><ROW><id>19621130</id><snippet>tuples</snippet></ROW><ROW><id>19621130</id><snippet>*val</snippet></ROW><ROW><id>19621130</id><snippet>def thresh (*val):
    return [float(one_val)/100 * 10000.0 for one_val in val]
</snippet></ROW><ROW><id>19621153</id><snippet>white_pixel</snippet></ROW><ROW><id>19621153</id><snippet>import numpy as np
from skimage.morphology import binary_dilation
# Setup
coordx = [110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 100, 101, 102,
          103, 104, 105, 106, 107, 108, 109, 110]
coordy = [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 110, 111, 112,
          113, 114, 115, 116, 117, 118, 119, 120]
img = np.random.random((128, 128))
img[110, 110] = 1.
img[109, 110] = 1.


# values grater than white_pixel will get detected as white pixels
white_pixel = 1

mask = np.zeros((128, 128), dtype=bool)
mask[coordx, coordy] = 1

structure = np.ones((7, 7))
mask = binary_dilation(mask, structure)

is_white = (img * mask) &gt;= white_pixel

# This will tell you which pixels are white
print np.where(is_white)

# This will tell you if any pixels are white
print np.any(is_white)
</snippet></ROW><ROW><id>19621153</id><snippet>numpy.where</snippet></ROW><ROW><id>19621153</id><snippet>np.any</snippet></ROW><ROW><id>19621153</id><snippet># Setup
coordx = [110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 100, 101, 102,
          103, 104, 105, 106, 107, 108, 109, 110]
coordy = [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 110, 111, 112,
          113, 114, 115, 116, 117, 118, 119, 120]
white_pixel = np.array([255, 255, 255])
img = np.random.randint(0, 256, (128, 128, 3))
img[110, 110, :] = 255
img[109, 110, :] = 255

mask = np.zeros((128, 128, 1), dtype=bool)
mask[coordx, coordy] = 1

structure = np.ones((7, 7, 1))
mask = binary_dilation(mask, structure)

is_white = np.all((img * mask) == white_pixel, axis=-1)

# This will tell you which pixels are white
print np.where(is_white)

# This will tell you if any pixels are white
print np.any(is_white)
</snippet></ROW><ROW><id>19621424</id><snippet>requests</snippet></ROW><ROW><id>19621424</id><snippet>files</snippet></ROW><ROW><id>19621424</id><snippet>files = [('file[]', ("", "", "application/octet-stream")),
         ('file[]', ('qwe.txt', open('qwe.txt','rb'), 'text/plain'))]
requests.post(url, files=files)
</snippet></ROW><ROW><id>19621447</id><snippet>len()</snippet></ROW><ROW><id>19621447</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>19621447</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>19621452</id><snippet>FloatField</snippet></ROW><ROW><id>19621500</id><snippet>"i+/-uncert"</snippet></ROW><ROW><id>19621500</id><snippet>temp = ufloat(i, uncert)
</snippet></ROW><ROW><id>19621500</id><snippet>temp = ufloat('{}+/-{}'.format(i, uncert))
</snippet></ROW><ROW><id>19621500</id><snippet>ufloat</snippet></ROW><ROW><id>19621811</id><snippet>money</snippet></ROW><ROW><id>19621811</id><snippet>Turn()</snippet></ROW><ROW><id>19621811</id><snippet>money = 2000
moneyPerTurn = population * 5

def Turn ():
    global money
    global moneyPerTurn
    money = money + moneyPerTurn
    print('STATUS REPORT')
</snippet></ROW><ROW><id>19621886</id><snippet>r1</snippet></ROW><ROW><id>19621886</id><snippet>import math

r1=0;
r2=110.5;              #vstupny polomer
r3=212.5;              #vystupny polomer
beta2d=35;             #vystupny uhel
beta1dpoz=45;          #vstupny uhel

xA1, xA2 = None, None
#Keep looping till xA1 and xA2 are valid
while xA1 == None and xA2 == None:

    beta2r=beta2d*math.pi/180

    xs2=r3*math.sin(beta2r)     
    ys2=r1-r3*math.cos(beta2r) 

    kruh1=math.pow(xs2,2)+math.pow(ys2,2)                         
    kruh2=math.pow(r1,2)+math.pow(r3,2)-2*r1*r3*math.cos(beta2r)

    try:
        xA1=1.0/2*((xs2*(1+((math.pow(r1,2)-math.pow(r2,2))/(math.pow(xs2,2)+math.pow(ys2,2)))))+(ys2*(math.sqrt(((2*(math.pow(r1,2)+math.pow(r2,2)))/(math.pow(xs2,2)+math.pow(ys2,2)))-(math.pow(((math.pow(r1,2)-math.pow(r2,2))/(math.pow(xs2,2)+math.pow(ys2,2))),2))-1))))
        xA2=1.0/2*((xs2*(1+((math.pow(r1,2)-math.pow(r2,2))/(math.pow(xs2,2)+math.pow(ys2,2)))))-(ys2*(math.sqrt(((2*(math.pow(r1,2)+math.pow(r2,2)))/(math.pow(xs2,2)+math.pow(ys2,2)))-(math.pow(((math.pow(r1,2)-math.pow(r2,2))/(math.pow(xs2,2)+math.pow(ys2,2))),2))-1))))
    except ValueError:
        r1 += 0.1

xAmat=[xA1,xA2]
xA=max(xAmat) 
</snippet></ROW><ROW><id>19621886</id><snippet>beta2r, ys2, xs2, kruh1, kruh1</snippet></ROW><ROW><id>19621886</id><snippet>try</snippet></ROW><ROW><id>19622026</id><snippet>for i in paragList:
    para_string = para_string + str(i)
    newlist = range(len(findPatTitle))
    for i in newlist:
        ofile = open(str(listIterator[i])+'.txt', 'w')
        ofile.write(para_string)
        ofile.close()
</snippet></ROW><ROW><id>19622026</id><snippet>parag_string</snippet></ROW><ROW><id>19622026</id><snippet>parag_string</snippet></ROW><ROW><id>19622026</id><snippet>paraStringList</snippet></ROW><ROW><id>19622026</id><snippet>for i, var in enumerate(paraStringList):  # Enumerate creates a tuple
    with open("{0}.txt".format(i), 'w') as writer:
        writer.write(var)
</snippet></ROW><ROW><id>19622026</id><snippet>for i in listIterator:(...)</snippet></ROW><ROW><id>19622026</id><snippet>from urllib import urlopen
from bs4 import BeautifulSoup
import re


webpage = urlopen('http://talkingpointsmemo.com/feed/livewire').read()

patFinderTitle = re.compile('&lt;title&gt;(.*)&lt;/title&gt;')
patFinderLink = re.compile('&lt;link rel.*href="(.*)"/&gt;')

findPatTitle = re.findall(patFinderTitle, webpage)[0:4]
findPatLink = re.findall(patFinderLink, webpage)[0:4]

listIterator = []
listIterator[:] = range(len(findPatTitle))
paraStringList = []

for i in listIterator:

    print findPatTitle[i]

    articlePage = urlopen(findPatLink[i]).read()

    divBegin = articlePage.find("&lt;div class='story-teaser'&gt;")
    divEnd = articlePage.find("&lt;footer class='article-footer'&gt;")

    article = articlePage[divBegin:divEnd]

    soup = BeautifulSoup(article)

    paragList = soup.findAll('p')

    para_string = ''

    for i in paragList:
        para_string += str(i)

    paraStringList.append(para_string)

for i, var in enumerate(paraStringList):
    with open("{0}.txt".format(i), 'w') as writer:
        writer.write(var)
</snippet></ROW><ROW><id>19622095</id><snippet>PatchCollection</snippet></ROW><ROW><id>19622095</id><snippet>remove</snippet></ROW><ROW><id>19622095</id><snippet>ax.patches</snippet></ROW><ROW><id>19622095</id><snippet>ax.patches = []</snippet></ROW><ROW><id>19622095</id><snippet>sl.arrows</snippet></ROW><ROW><id>19622095</id><snippet>PatchCollection</snippet></ROW><ROW><id>19622095</id><snippet>FancyArrowPatch</snippet></ROW><ROW><id>19622095</id><snippet>keep = lambda x: not isinstance(x, mpl.patches.FancyArrorPatch)
ax.patches = [patch if keep(patch) for patch in ax.patches]
</snippet></ROW><ROW><id>19622162</id><snippet>getattr()</snippet></ROW><ROW><id>19622162</id><snippet>def meth1(self, obj):
    self.hello = {}
    return getattr(self.hello, obj)()
</snippet></ROW><ROW><id>19622162</id><snippet>getattr(a, b)</snippet></ROW><ROW><id>19622162</id><snippet>a.b</snippet></ROW><ROW><id>19622162</id><snippet>b</snippet></ROW><ROW><id>19622162</id><snippet>b</snippet></ROW><ROW><id>19622162</id><snippet>a</snippet></ROW><ROW><id>19622162</id><snippet>self.hello</snippet></ROW><ROW><id>19622162</id><snippet>b</snippet></ROW><ROW><id>19622162</id><snippet>obj</snippet></ROW><ROW><id>19622162</id><snippet>obj</snippet></ROW><ROW><id>19622162</id><snippet>()</snippet></ROW><ROW><id>19622162</id><snippet>&gt;&gt;&gt; class test:
...     def meth1(self, obj):
...         self.hello = {}
...         return getattr(self.hello, obj)()
...     def meth2(self):
...         return test.meth1(self, 'keys')
... 
&gt;&gt;&gt; x = test()
&gt;&gt;&gt; x.meth2()
[]
</snippet></ROW><ROW><id>19622217</id><snippet>itertools.zip_longest</snippet></ROW><ROW><id>19622217</id><snippet>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; text = "John walked to the store"
for x in zip_longest(*text.split(), fillvalue=' '):
    print (' '.join(x))
...     
J w t t s
o a o h t
h l   e o
n k     r
  e     e
  d      
</snippet></ROW><ROW><id>19622233</id><snippet>index_max = a.index(max(a))
a[index_max], a[0] = a[0], a[index_max]
</snippet></ROW><ROW><id>19622330</id><snippet>open(filename[1:], "rb")</snippet></ROW><ROW><id>19622330</id><snippet>\n</snippet></ROW><ROW><id>19622330</id><snippet>Content-Type</snippet></ROW><ROW><id>19622330</id><snippet>image/jpeg</snippet></ROW><ROW><id>19622330</id><snippet>text/html</snippet></ROW><ROW><id>19622362</id><snippet>SELECT name FROM sqlite_master WHERE type='table' AND name='spwords'
</snippet></ROW><ROW><id>19622362</id><snippet>tb_exists = "SELECT name FROM sqlite_master WHERE type='table' AND name='spwords'"
if not conn.execute(tb_exists).fetchone():
    conn.execute(tb_create)
</snippet></ROW><ROW><id>19622362</id><snippet>CREATE TABLE IF NOT EXISTS spwords (sp_word text, word_len int, word_alpha text, word_score int)
</snippet></ROW><ROW><id>19622469</id><snippet>position</snippet></ROW><ROW><id>19622469</id><snippet>&gt;&gt;&gt; word = "python"
&gt;&gt;&gt; position = 3
&gt;&gt;&gt; 
&gt;&gt;&gt; word[:position] + word[(position +1):]
'pyton'
</snippet></ROW><ROW><id>19622469</id><snippet>"python"</snippet></ROW><ROW><id>19622469</id><snippet>position = 3</snippet></ROW><ROW><id>19622469</id><snippet>"pyton"</snippet></ROW><ROW><id>19622469</id><snippet>'h'</snippet></ROW><ROW><id>19622487</id><snippet>for</snippet></ROW><ROW><id>19622487</id><snippet>xs=[5,3,2,5,6,1,0,5]
minimum = xs[0];
for i in xs:
    if i &lt; minimum:
        minimum = i ;
print(minimum)
</snippet></ROW><ROW><id>19622487</id><snippet>min</snippet></ROW><ROW><id>19622487</id><snippet>minimum = min(xs)
print(minimum)
</snippet></ROW><ROW><id>19622553</id><snippet>n=1</snippet></ROW><ROW><id>19622553</id><snippet>2^1=2=2^0+1=1+1</snippet></ROW><ROW><id>19622553</id><snippet>n=k</snippet></ROW><ROW><id>19622553</id><snippet>2^n=2^0+2^1+...+2^(n-1)+1</snippet></ROW><ROW><id>19622553</id><snippet>2^n=(2^k)*(2^1)</snippet></ROW><ROW><id>19622553</id><snippet>2^n=(2^0+2^1+...+2^(n-2)+1)*2</snippet></ROW><ROW><id>19622553</id><snippet>2^n=(2^1+2^2+...+2^(n-1)+2)=1+2^0+2^1+...+2^(n-1)</snippet></ROW><ROW><id>19622586</id><snippet>class</snippet></ROW><ROW><id>19622613</id><snippet>run_update_procedure</snippet></ROW><ROW><id>19622613</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>19622613</id><snippet>apply_async</snippet></ROW><ROW><id>19622613</id><snippet>map_async</snippet></ROW><ROW><id>19622613</id><snippet>timeout</snippet></ROW><ROW><id>19622613</id><snippet>AsyncResult.get()</snippet></ROW><ROW><id>19622613</id><snippet>pool = Pool(10)
result = pool.map_async(run_update_procedure, titles_to_update)
try:
    updates = result.get(timeout=x)
except TimeoutError:
    # handle timeout
</snippet></ROW><ROW><id>19622625</id><snippet># The main function.
def main():
  mysum = 0
  while True:
    positive = int(input('Enter a positive number, or enter a\n\
negative number to end and calculate the sum: '))
    if positive &lt; 0:
      print mysum
      return
    mysum = mysum + positive

# Call the main function. 
main()
</snippet></ROW><ROW><id>19622732</id><snippet>to_html</snippet></ROW><ROW><id>19622732</id><snippet>import numpy as np
import pandas as pd

num = np.array([[ 0.17899619,  0.33093259,  0.2076353,   0.06130814,],
                [ 0.20392888,  0.42653105,  0.33325891,  0.10473969,],
                [ 0.17038247,  0.19081956,  0.10119709,  0.09032416,],
                [-0.10606583, -0.13680513, -0.13129103, -0.03684349,],
                [ 0.20319428,  0.28340985,  0.20994867,  0.11728491,],
                [ 0.04396872,  0.23703525,  0.09359683,  0.11486036,],
                [ 0.27801304, -0.05769304, -0.06202813,  0.04722761,],])

days = ['5 days', '10 days', '20 days', '60 days']

prices = ['AAPL', 'ADBE', 'AMD', 'AMZN', 'CRM', 'EXPE', 'FB']

df = pd.DataFrame(num, index=prices, columns=days)

html = df.to_html()

print html
</snippet></ROW><ROW><id>19622732</id><snippet>&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;5 days&lt;/th&gt;
      &lt;th&gt;10 days&lt;/th&gt;
      &lt;th&gt;20 days&lt;/th&gt;
      &lt;th&gt;60 days&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;AAPL&lt;/th&gt;
      &lt;td&gt; 0.178996&lt;/td&gt;
      &lt;td&gt; 0.330933&lt;/td&gt;
      &lt;td&gt; 0.207635&lt;/td&gt;
      &lt;td&gt; 0.061308&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;ADBE&lt;/th&gt;
      &lt;td&gt; 0.203929&lt;/td&gt;
      &lt;td&gt; 0.426531&lt;/td&gt;
      &lt;td&gt; 0.333259&lt;/td&gt;
      &lt;td&gt; 0.104740&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AMD&lt;/th&gt;
      &lt;td&gt; 0.170382&lt;/td&gt;
      &lt;td&gt; 0.190820&lt;/td&gt;
      &lt;td&gt; 0.101197&lt;/td&gt;
      &lt;td&gt; 0.090324&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;AMZN&lt;/th&gt;
      &lt;td&gt;-0.106066&lt;/td&gt;
      &lt;td&gt;-0.136805&lt;/td&gt;
      &lt;td&gt;-0.131291&lt;/td&gt;
      &lt;td&gt;-0.036843&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CRM&lt;/th&gt;
      &lt;td&gt; 0.203194&lt;/td&gt;
      &lt;td&gt; 0.283410&lt;/td&gt;
      &lt;td&gt; 0.209949&lt;/td&gt;
      &lt;td&gt; 0.117285&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;EXPE&lt;/th&gt;
      &lt;td&gt; 0.043969&lt;/td&gt;
      &lt;td&gt; 0.237035&lt;/td&gt;
      &lt;td&gt; 0.093597&lt;/td&gt;
      &lt;td&gt; 0.114860&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt; 0.278013&lt;/td&gt;
      &lt;td&gt;-0.057693&lt;/td&gt;
      &lt;td&gt;-0.062028&lt;/td&gt;
      &lt;td&gt; 0.047228&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>19622817</id><snippet>MyLabel</snippet></ROW><ROW><id>19622817</id><snippet>QLabel</snippet></ROW><ROW><id>19622817</id><snippet>QLabel</snippet></ROW><ROW><id>19622817</id><snippet>MyLabel</snippet></ROW><ROW><id>19622817</id><snippet>mypackage/mycomponent.h</snippet></ROW><ROW><id>19622817</id><snippet>MyLabel</snippet></ROW><ROW><id>19622817</id><snippet>pyuic</snippet></ROW><ROW><id>19622817</id><snippet>from mypackage.mycomponent import MyLabel
</snippet></ROW><ROW><id>19622817</id><snippet>.h</snippet></ROW><ROW><id>19622817</id><snippet>.</snippet></ROW><ROW><id>19622817</id><snippet>uic</snippet></ROW><ROW><id>19622817</id><snippet>#include "mypackage/mycomponent.h"</snippet></ROW><ROW><id>19622817</id><snippet>#include &lt;mypackage/mycomponent.h&gt;</snippet></ROW><ROW><id>19622903</id><snippet>SetFileAttributesW()</snippet></ROW><ROW><id>19622903</id><snippet>u</snippet></ROW><ROW><id>19622903</id><snippet>r</snippet></ROW><ROW><id>19622903</id><snippet>import ctypes
FILE_ATTRIBUTE_HIDDEN = 0x02

ret = ctypes.windll.kernel32.SetFileAttributesW(ur'G:\Dir\folder1',
                                                FILE_ATTRIBUTE_HIDDEN)
if ret:
    print 'attribute set to Hidden'
else:  # return code of zero indicates failure, raise Windows error
    raise ctypes.WinError()
</snippet></ROW><ROW><id>19622903</id><snippet>W</snippet></ROW><ROW><id>19622903</id><snippet>ctypes.windll.kernel32.SetFileAttributesW.argtypes = (
    ctypes.c_wchar_p, ctypes.c_uint32)
</snippet></ROW><ROW><id>19622903</id><snippet>r</snippet></ROW><ROW><id>19622903</id><snippet>ret = ctypes.windll.kernel32.SetFileAttributesW(r'G:\Dir\folder1',
                                                FILE_ATTRIBUTE_HIDDEN)
</snippet></ROW><ROW><id>19623059</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19623059</id><snippet>['foo', '-a', 'bar', '--baz']
</snippet></ROW><ROW><id>19623059</id><snippet>cmd = [
    'C:\\Program Files\\Handbrake\\HandbrakeCLI.exe',
    '-i', filepath,
    '-o', outputPath
]
</snippet></ROW><ROW><id>19623073</id><snippet>key</snippet></ROW><ROW><id>19623073</id><snippet>sortedBookList = sorted(
    bookList, 
    key=lambda elem: (sortByName(elem), 
                      sortByFirstLanguage(elem, firstLanguage), 
                      sortByLanguages(elem, possibleLanguages)))
</snippet></ROW><ROW><id>19623073</id><snippet>def key_combiner(*keyfuncs):
  def helper(elem):
    return [keyfunc(elem) for keyfunc in keyfuncs]
  return helper

def sortByFirstLanguage(firstLanguage):
  def helper(elem):
    return elem.language == firstLanguage  # True &gt; False
  return helper

def sortByLanguages(possibleLanguages):
  def helper(elem):
    if elem.language in possibleLanguages:
       return possibleLanguages.index(elem.language)
  return helper

sortedBookList = sorted(bookList,
                        key=key_combiner(sortByName, 
                                         sortByFirstLanguage(firstLanguage), 
                                         sortByLanguages(possibleLanguages))
</snippet></ROW><ROW><id>19623478</id><snippet>header_line = ['1st column', '2nd column'] + [x for x in my_dict.keys()] + ['note']
</snippet></ROW><ROW><id>19623478</id><snippet>my_dict.keys()</snippet></ROW><ROW><id>19623478</id><snippet>list(my_dict)</snippet></ROW><ROW><id>19623643</id><snippet>state</snippet></ROW><ROW><id>19623643</id><snippet>abbrev</snippet></ROW><ROW><id>19623643</id><snippet>statesAbbrev.items()</snippet></ROW><ROW><id>19623643</id><snippet>[('Oregon', 'OR'), ('Florida', 'FL') ...]
</snippet></ROW><ROW><id>19623643</id><snippet>for state, abbrev in ...:
</snippet></ROW><ROW><id>19623643</id><snippet>state</snippet></ROW><ROW><id>19623643</id><snippet>abbrev</snippet></ROW><ROW><id>19623643</id><snippet>statesAbbrev</snippet></ROW><ROW><id>19623643</id><snippet>In [1]: a,b,c = 1,2,3

In [2]: a
Out[2]: 1

In [3]: b
Out[3]: 2

In [4]: c
Out[4]: 3

In [5]: def x(): return (1,2,3,4)

In [6]: d,e,f,g = x()

In [7]: d
Out[7]: 1

In [8]: e
Out[8]: 2

In [9]: f
Out[9]: 3

In [10]: g
Out[10]: 4
</snippet></ROW><ROW><id>19623643</id><snippet>In [11]: a,b = (1,2,3)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-11-9c07109388c5&gt; in &lt;module&gt;()
----&gt; 1 a,b = (1,2,3)

ValueError: too many values to unpack

In [12]: a,b,c,d,e,f,g = (1,2,3)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-12-fcc71a498285&gt; in &lt;module&gt;()
----&gt; 1 a,b,c,d,e,f,g = (1,2,3)

ValueError: need more than 3 values to unpack
</snippet></ROW><ROW><id>19623643</id><snippet>In [13]: lst = [(1,2,3,4),(5,6,7,8)]

In [14]: for a,b,c,d in lst:
   ....:     print a,b,c,d
   ....:
1 2 3 4
5 6 7 8
</snippet></ROW><ROW><id>19624046</id><snippet>def add_value(container, value):
    oldlen = len(container)
    container.add(value)
    return len(container) != oldlen

if add_value(number_set, number):
    # process number
</snippet></ROW><ROW><id>19624046</id><snippet>__hash__</snippet></ROW><ROW><id>19624046</id><snippet>__hash__</snippet></ROW><ROW><id>19624046</id><snippet>__eq__</snippet></ROW><ROW><id>19624046</id><snippet>set.add</snippet></ROW><ROW><id>19624046</id><snippet>pop()</snippet></ROW><ROW><id>19624046</id><snippet>list.sort()</snippet></ROW><ROW><id>19624046</id><snippet>None</snippet></ROW><ROW><id>19624046</id><snippet>self</snippet></ROW><ROW><id>19624046</id><snippet>def deduped(iterable):
    seen = set()
    count = 0
    for value in iterable:
        seen.add(value)
        if count != len(seen):
            count += 1
            yield value

for number in deduped(number_list):
    # process number
</snippet></ROW><ROW><id>19624046</id><snippet>if not in</snippet></ROW><ROW><id>19624055</id><snippet>b = [range(x) for x in a]
</snippet></ROW><ROW><id>19624203</id><snippet>while power &lt; 6:
    if root ** power == num:
        break
</snippet></ROW><ROW><id>19624203</id><snippet>while (power &lt; 6) and (root ** power != num):
</snippet></ROW><ROW><id>19624231</id><snippet>-------</snippet></ROW><ROW><id>19624231</id><snippet>&gt;&gt;&gt; record='''\
... Name: test
... Address: testaddress
... Home Phone No.: 2313123121233
... Mobile Phone No.: 423423423432
... ---------------
... '''
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split("[-]+", record, re.M)
['Name: test\nAddress: testaddress\nHome Phone No.: 2313123121233\nMobile Phone No.: 423423423432\n', '\n']
</snippet></ROW><ROW><id>19624231</id><snippet>'\n'</snippet></ROW><ROW><id>19624231</id><snippet>'Name'</snippet></ROW><ROW><id>19624231</id><snippet>&gt;&gt;&gt; dict(re.findall("^(.*): (.*)$", '\n', re.M))
{}
</snippet></ROW><ROW><id>19624231</id><snippet>record = get_record(data)
if record and record.get('Name', None) == name:
</snippet></ROW><ROW><id>19624421</id><snippet>print</snippet></ROW><ROW><id>19624421</id><snippet>print(choice(foo));
</snippet></ROW><ROW><id>19624614</id><snippet>import csv
with open("pe_ratio.csv", "w") as out_file:
    f = csv.writer(out_file)

    def factorial(n):
        results = 1
        # results are one because that is the minimum number 
        while n &gt;= 1:
            results =  results * n
            # results * nth number of n
            n = n - 1   
            # n - 1     
            # two variables are affected in this program results and n
        return f.writerow([results])  # &lt;---note writerows vs writerow

    print factorial(4)
</snippet></ROW><ROW><id>19624687</id><snippet>&gt;&gt;&gt; # Note this is for Python 2.x.
&gt;&gt;&gt; def func(lst):
...     return map(range, xrange(len(lst)+1))
...
&gt;&gt;&gt; L = range(5)
&gt;&gt;&gt; func(L)
[[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 2, 3, 4]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19624776</id><snippet>values()</snippet></ROW><ROW><id>19624776</id><snippet># models.py
class Author(models.Model):
    name = models.CharField()

class Book(models.Model):
    name = models.CharField()
    authors = models.ManyToManyField(Author)
</snippet></ROW><ROW><id>19624776</id><snippet>&gt;&gt;&gt; authors = Author.objects.prefetch_related('book_set').values('id', 'book')
&gt;&gt;&gt; print authors
    [{'book': 1, 'id': 1}, {'book': 2, 'id': 1}, {'book': 2, 'id': 2}]
&gt;&gt;&gt; author_dict = {}
&gt;&gt;&gt; for a in authors:
    if a['id'] not in author_dict:
        author_dict[a['id']] = set()
    author_dict[a['id']].add(a['book'])
&gt;&gt;&gt; print author_dict
    {1: set([1, 2]), 2: set([2])}
</snippet></ROW><ROW><id>19624925</id><snippet>pip install natsort
</snippet></ROW><ROW><id>19624925</id><snippet>&gt;&gt;&gt; input = ['1', '10', '2', '0', '3', 'Hello', '100', 'Allowance']

&gt;&gt;&gt; from natsort import natsorted
&gt;&gt;&gt; natsorted(input)
['0', '1', '2', '3', '10', '100', 'Allowance', 'Hello']
</snippet></ROW><ROW><id>19625250</id><snippet>def print_table():
    for row in range(5):
        for col in range(5):
             print table[row][col],
        print  # Added so it print new lines
</snippet></ROW><ROW><id>19625250</id><snippet>def create_table(secret):
    clear_table()
    secret = secret.upper()
    secret = secret.replace(" ",'')
    secret.split(",")
    row = 0
    col = 0
    for i in range(len(secret)):
        if  i != 0 and i % 5 == 0:
            row += 1
            col = 0
        table[row][col] = secret[i]
        col += 1
</snippet></ROW><ROW><id>19625250</id><snippet>create_table("Hi world")
print_table()
&gt;&gt;&gt; 
H I W O R
L D * * *
* * * * *
* * * * *
* * * * *

create_table("play fair")
print_table()
&gt;&gt;&gt;
P L A Y F
A I R * *
* * * * *
* * * * *
* * * * *
</snippet></ROW><ROW><id>19625250</id><snippet>def removeDup(mystring):
    newStr = ""
    for ch in mystring:
        if ch not in newStr:
            newStr = newStr + ch
    return newStr
</snippet></ROW><ROW><id>19625250</id><snippet>create_table</snippet></ROW><ROW><id>19625250</id><snippet>def create_table_without_rep(secret):
    clear_table()
    secret = secret.upper()
    secret = secret.replace(" ",'')
    secret.split(",")
    row = 0
    col = 0
    secret = removeDup(secret) # Add this line     
    for i in range(len(secret)):
        if  i != 0 and i % 5 == 0:
            row += 1
            col = 0
        table[row][col] = secret[i]
        col += 1
</snippet></ROW><ROW><id>19625472</id><snippet>dict</snippet></ROW><ROW><id>19625472</id><snippet>&gt;&gt;&gt; dict(Counter('abracadabra').most_common(3))
{'a': 5, 'r': 2, 'b': 2}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19625472</id><snippet>help(dict)</snippet></ROW><ROW><id>19625472</id><snippet>     dict(iterable) -&gt; new dictionary initialized as if via:
 |      d = {}
 |      for k, v in iterable:
 |          d[k] = v
</snippet></ROW><ROW><id>19625531</id><snippet>&gt;&gt;&gt; lst = ['this', 'that', 'more']
&gt;&gt;&gt; print(lst[:2])
['this', 'that']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19625531</id><snippet>[start:stop:step]</snippet></ROW><ROW><id>19625531</id><snippet>lst</snippet></ROW><ROW><id>19625531</id><snippet>list</snippet></ROW><ROW><id>19625615</id><snippet>if choice == 'video games' or choice == 'Video Games' or choice == 'Video games' or choice == 'a)':
    print("You picked Video Games.")
</snippet></ROW><ROW><id>19625615</id><snippet>if choice.lower() == 'video games' or choice == 'a':
    print('You picked Video Games.")
</snippet></ROW><ROW><id>19625615</id><snippet>break</snippet></ROW><ROW><id>19625615</id><snippet>while True:
    choice = input('Which topic would you like to begin with?')
    if choice.lower() == 'video games' or 'a':
        print('You picked Video Games.')
        break #This breaks out of the while loop, and continues executing the code that follows the loop
</snippet></ROW><ROW><id>19625615</id><snippet>choice</snippet></ROW><ROW><id>19625615</id><snippet>while</snippet></ROW><ROW><id>19625615</id><snippet>choice = input('Which topic would you like to begin with?')
while choice.lower() != 'video games' and choice != 'a':
    print('Please pick a valid option')
    choice = input('Which topic would you like to begin with?')
print('You picked "{}".'.format(choice))
</snippet></ROW><ROW><id>19625615</id><snippet>valid_options = ['video games', 'a', 'software', 'b', 'cartoons', 'c']
choice = input('Which topic would you like to begin with?')
while choice.lower() not in valid_options:
    print('Please pick a valid option')
    choice = input('Which topic would you like to begin with?')
print('You picked "{}".'.format(choice))
</snippet></ROW><ROW><id>19625615</id><snippet>Which topic would you like to begin with?Movies
Please pick a valid option
Which topic would you like to begin with?vIdeO gaMes
You picked "vIdeO gaMes".

Which topic would you like to begin with?software
You picked "software".
</snippet></ROW><ROW><id>19625615</id><snippet>raw_input()</snippet></ROW><ROW><id>19625615</id><snippet>input()</snippet></ROW><ROW><id>19625733</id><snippet>items</snippet></ROW><ROW><id>19625733</id><snippet>sorted(data["countries"].items(), key=lambda kv: kv[1]["requests"])
</snippet></ROW><ROW><id>19625774</id><snippet>plt.sca</snippet></ROW><ROW><id>19625778</id><snippet>trans.add_item(my_item)</snippet></ROW><ROW><id>19625778</id><snippet>my_item</snippet></ROW><ROW><id>19625778</id><snippet>Item</snippet></ROW><ROW><id>19625778</id><snippet>trans.items</snippet></ROW><ROW><id>19625848</id><snippet>extra_context</snippet></ROW><ROW><id>19625848</id><snippet>(r'^accounts/login/$', 'django.contrib.auth.views.login', { 'extra_context' : {'design_form': True }}),
</snippet></ROW><ROW><id>19625848</id><snippet>design_form</snippet></ROW><ROW><id>19625853</id><snippet>def highlight(data):
    for word in data.split():
        if word[0] == "#":
            print "&lt;FONT COLOR=\"brown\"&gt;" + word + "&lt;/FONT&gt;",
        else:
            print word,

highlight("""hello world this
    is a #test that i am #writing.""")
</snippet></ROW><ROW><id>19625935</id><snippet>string</snippet></ROW><ROW><id>19625935</id><snippet>mystring</snippet></ROW><ROW><id>19625935</id><snippet>def removeDupes(mystring):
    newStr = ""
    for ch in mystring:
        if ch not in newStr:
            newStr = newStr + ch
    return newStr

print removeDupes("hello")
print removeDupes("overflow")
print removeDupes("paragraphs")

&gt;&gt;&gt; 
helo
overflw
parghs
</snippet></ROW><ROW><id>19626058</id><snippet>import calendar
nextmonth = calendar.month_name[1:][(calendar.month_name[1:].index(month) + 1) % 12]
</snippet></ROW><ROW><id>19626058</id><snippet>./myscript.py somemonth someyear</snippet></ROW><ROW><id>19626058</id><snippet>nextmonth year MRG.csv</snippet></ROW><ROW><id>19626058</id><snippet>import pandas as pd
import calendar
import sys

if len(sys.argv) != 3:
    print "Usage: {0} &lt;month&gt; &lt;year&gt;".format(sys.argv[0])
month, year = sys.argv[1:]

if not month in calendar.month_name:
    print "Invalid month! Month must be one of:{0}".format(str(calendar.month_name))
if not year.isdigit():
    print "Invalid year! Year must be a number."

nextmonth = calendar.month_name[1:][(calendar.month_name[1:].index(month) + 1) % 12]

df1 = pd.read_csv("data csv 1\{0} {1} 1 UUedit1.csv".format(month, year), delimiter = ",")
df2 = pd.read_csv("data csv 1\{0} {1} 2 UUedit2.csv".format(month, year), delimiter = ",")
merged = df1.merge(df2, on="Unique Element")
delcols = "Element_y", "number_y", "date_y", "title_y", "name_y"

for delcol in delcols:
    del merged[delcol]

merged.rename(columns={"name_x": "name", "rdate_x": "date", "title_x": "title", "number_x": "number", "Element_x": "Element"}, inplace = True)
merged = merged.sort("Element").reset_index(drop=True)
merged = merged.sort("date").reset_index(drop=True)

if month == calendar.month_name[-1]: year = str(int(year + 1))

merged.to_csv("{0} {1} MRG.csv".format(nextmonth, year), index=False, sep = ",")
</snippet></ROW><ROW><id>19626058</id><snippet>nextmonth = calendar.month_name[1:][(calendar.month_name[1:].index(month) + 1) % 12]
[...]
if month == calendar.month_name[-1]: year = str(int(year + 1))
</snippet></ROW><ROW><id>19626058</id><snippet>merged.to_csv("{0} {1} MRG.csv".format(month, year), index=False, sep = ",")
</snippet></ROW><ROW><id>19626189</id><snippet>answerb = input(...)</snippet></ROW><ROW><id>19626189</id><snippet>maxGuesses = 2 #Max number of attempts for the problem
guessesTaken = 0
points = 0
while guessesTaken&lt;maxGuesses:
    answer = input("Your answer: ")
    if answer.lower() == 'call of duty' or answer.lower() == 'a' or answer.lower() == 'a)':
        print("You are correct!")
        points = points + maxGuesses-guessesTaken
        print("You scored %d points!" %(maxGuesses-guessesTaken))
        break
    else:
        print("Incorrect")
        print("You have %d guesses remaining!" %(maxGuesses-guessesTaken-1))
        guessesTaken += 1
</snippet></ROW><ROW><id>19626225</id><snippet>itertools.combinations</snippet></ROW><ROW><id>19626225</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; len(list(a for a in combinations(range(1, 101), 3)))
161700
</snippet></ROW><ROW><id>19626225</id><snippet>def findbest(origarray, denom):
    current = origarray
    i = 1
    while(i &lt; size):
        if(i in denom):
            current[i] = 1
            coinlist[i] = [i]
        else:
            k = 1
            while(k &lt; 1 + (i/2)):
                c = current[k] + current[i-k]
                if(c &lt; current[i]):
                    current[i] = c
                    coinlist[i] = coinlist[k] + coinlist[i-k]
                k+=1
        #print i, current[i], coinlist[i]
        i+=1
    return current

size = 100

def reset_cache():
  i = 1
  global coinlist
  coinlist = [[]]
  global origarray
  origarray = [0] 

  while(i &lt; size):
      origarray.append(100)
      coinlist.append([])
      i += 1

reset_cache()

denom = [1,5,10,25,50]

x = findbest(origarray, denom)

total=0

for value in findbest(origarray,denom):
    total += value

print total


print "\n\n\n"
print x


from itertools import combinations

best = ((0,0,0), 1e6)
for comb in combinations(range(1, 101), 3):
  #print "Considering: %s" % comb
  reset_cache()
  total = 0
  for value in findbest(origarray, comb):
    total += value
  if total &lt; best[1]:
    print "%s beat best with %d" % (comb, total)
    best = (comb, total)

print best
</snippet></ROW><ROW><id>19626225</id><snippet>for comb in [(1,) + a for a in combinations(range(2, 101), 2)]:
</snippet></ROW><ROW><id>19626225</id><snippet>&gt;&gt;&gt; len([(1,) + a for a in combinations(range(2, 101), 2)])
4851
</snippet></ROW><ROW><id>19626302</id><snippet>with open(sys.argv[1]) as ifile, open(sys.argv[2], mode = 'w') as ofile:
    for row in ifile:

    #...
    #You've defined some_condition to be met (you will have to replace this for yourself)
    #E.g.: the number of entries in each row is greater than 5:
        if len([term for term in row.split('#') if term.strip() != '']) &gt; 5:
            ofile.write(row)
</snippet></ROW><ROW><id>19626302</id><snippet>,</snippet></ROW><ROW><id>19626302</id><snippet>0, 1, 2, 3, 4, 5
</snippet></ROW><ROW><id>19626302</id><snippet>line.split(',')
</snippet></ROW><ROW><id>19626302</id><snippet>['0', '1', '2', '3', '4', '5']
</snippet></ROW><ROW><id>19626302</id><snippet>import sys

if __name__ == '__main__':
    ticker = sys.argv[3]
    allTypes = bool(int(sys.argv[4])) #argv[4] is a string, you have to convert it to an int, then to a bool

    with open(sys.argv[1]) as ifile, open(sys.argv[2], mode = 'w') as ofile:
        all_timestamps = [] #this is an empty list
        n_rows = 0
        for row in ifile:
            #This splits the line into constituent terms as described earlier
            #SAMPLE LINE:
            #A,1,12884902522,B,B,4900,AAIR,0.1046,28800,390,B,AARCA,
            #After applying this bit of code, the line should be split into this:
            #['A', '1', '12884902522', 'B', 'B', '4900', 'AAIR', '0.1046', '28800', '390', 'B', 'AARCA']
            #NOW, you can make comparisons against those terms. :)

            terms = [term for term in row.split(',') if term.strip() != '']
            current_timestamp = int(terms[2])

            #compare the current against the previous
            #starting from row 2: (index 1)
            if n_rows &gt; 1:
                #Python uses circular indices, hence: -1 means the value at the last index
                #That is, the previous time_stamp. Now perform the comparison and do something if that criterion is met:
                if current_timestamp - all_timestamp[-1] &gt;= 0:
                    pass #the pass keyword means to do nothing. You'll have to replace it with whatever code you want

            #increment n_rows every time:
            n_rows += 1

            #always append the current timestamp to all the time_stamps
            all_timestamps.append(current_timestamp)


            if (terms[6] == ticker):
                # add something to make sure chronological order hasn't been broken
                if (allTypes == 1):
                    ofile.write(row)
            #I don't know if this was a bad indent of not, but you should know
            #where this goes
            elif (terms[0] == "A" or terms[0] == "M" or terms[0] == "D"):
                print row
                ofile.write(row)
</snippet></ROW><ROW><id>19626406</id><snippet>sudo apt-get install python-distribute
</snippet></ROW><ROW><id>19626406</id><snippet>sudo easy_install pip
sudo pip install virtualenv
</snippet></ROW><ROW><id>19626406</id><snippet>sudo pip install ipython[all]
</snippet></ROW><ROW><id>19626406</id><snippet>apt-get install libfreetype6-dev libpng-dev libpython-all-dev gcc gfortran dvipdf
</snippet></ROW><ROW><id>19626406</id><snippet>    ============================================================================
Edit setup.cfg to change the build options

BUILDING MATPLOTLIB
            matplotlib: yes [1.3.1]
                python: yes [2.7.5+ (default, Sep 19 2013, 13:49:51)  [GCC
                        4.8.1]]
              platform: yes [linux2]

REQUIRED DEPENDENCIES AND EXTENSIONS
                 numpy: yes [version 1.7.1]
              dateutil: yes [using dateutil version 2.1]
               tornado: yes [using tornado version 3.1.1]
             pyparsing: yes [using pyparsing version 2.0.1]
                 pycxx: yes [Couldn't import.  Using local copy.]
                libagg: yes [pkg-config information for 'libagg' could not
                        be found. Using local copy.]
              freetype: yes [version 16.1.10]
                   png: yes [version 1.2.49]

OPTIONAL SUBPACKAGES
           sample_data: yes [installing]
              toolkits: yes [installing]
                 tests: yes [using nose version 1.3.0]

    OPTIONAL BACKEND EXTENSIONS
                macosx: no  [Mac OS-X only]
                qt4agg: yes [installing, Qt: 4.8.4, PyQt4: 4.10.3]
               gtk3agg: yes [installing, version 3.4.8]
             gtk3cairo: yes [installing, version 3.4.8]
                gtkagg: no  [The C/C++ header for gtk (gtk/gtk.h) could not
                        be found.  You may need to install the development
                        package.]
                 tkagg: no  [The C/C++ header for Tk (tk.h) could not be
                        found.  You may need to install the development
                        package.]
                 wxagg: no  [requires wxPython]
                   gtk: no  [The C/C++ header for gtk (gtk/gtk.h) could not
                        be found.  You may need to install the development
                        package.]
                   agg: yes [installing]
                 cairo: yes [installing, version 1.8.8]
             windowing: no  [Microsoft Windows only]

OPTIONAL LATEX DEPENDENCIES
                dvipng: yes [version 1.14]
           ghostscript: yes [version 9.10]
                 latex: yes [version 3.1415926]
               pdftops: yes [version 0.24.1]
</snippet></ROW><ROW><id>19626406</id><snippet>sudo pip install matplotlib[all]
</snippet></ROW><ROW><id>19626560</id><snippet>;</snippet></ROW><ROW><id>19626560</id><snippet>;</snippet></ROW><ROW><id>19626560</id><snippet> if x &gt; y:
     x += y
     print y
 else:
     y += x
     print x
</snippet></ROW><ROW><id>19626560</id><snippet> if x&gt;y:x+=y;print y;
 else:y+=x;print x;
</snippet></ROW><ROW><id>19626560</id><snippet>;</snippet></ROW><ROW><id>19626560</id><snippet>.pyo</snippet></ROW><ROW><id>19626560</id><snippet>.pyc</snippet></ROW><ROW><id>19626560</id><snippet>.pyc</snippet></ROW><ROW><id>19626572</id><snippet>itertools.combinations</snippet></ROW><ROW><id>19626572</id><snippet>d = {'A':12, 'B':1, 'C':14, 'D':13, 'E':3, 'F': 4}

import itertools
for a, b, c in itertools.combinations(sorted(d, key=d.get), 3):
    if d[a] + d[b] == d[c]:
        print(a,b,c)
</snippet></ROW><ROW><id>19626572</id><snippet>B E F
B A D
B D C
</snippet></ROW><ROW><id>19626572</id><snippet>itertools.combinations_with_replacement</snippet></ROW><ROW><id>19626572</id><snippet>d = {'A':1, 'B':2, 'C':4}

import itertools
for a, b, c in itertools.combinations_with_replacement(sorted(d, key=d.get), 3):
    if d[a] + d[b] == d[c]:
        print(a,b,c)
</snippet></ROW><ROW><id>19626572</id><snippet>A A B
B B C
</snippet></ROW><ROW><id>19626572</id><snippet>sorted</snippet></ROW><ROW><id>19626572</id><snippet>x + y</snippet></ROW><ROW><id>19626572</id><snippet>z</snippet></ROW><ROW><id>19626572</id><snippet>x</snippet></ROW><ROW><id>19626572</id><snippet>y</snippet></ROW><ROW><id>19626572</id><snippet>z</snippet></ROW><ROW><id>19626572</id><snippet>sorted</snippet></ROW><ROW><id>19626572</id><snippet>x &lt;= y &lt;= z</snippet></ROW><ROW><id>19626572</id><snippet>A + B == C</snippet></ROW><ROW><id>19626572</id><snippet>B + A == C</snippet></ROW><ROW><id>19626572</id><snippet>sorted</snippet></ROW><ROW><id>19626572</id><snippet>dict</snippet></ROW><ROW><id>19626572</id><snippet>dict</snippet></ROW><ROW><id>19626667</id><snippet>ax.set_xticks</snippet></ROW><ROW><id>19626667</id><snippet>ax.set_xticklabels</snippet></ROW><ROW><id>19626667</id><snippet>plt.sca</snippet></ROW><ROW><id>19626667</id><snippet>plt</snippet></ROW><ROW><id>19626667</id><snippet>setp</snippet></ROW><ROW><id>19626667</id><snippet>import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=3, ncols=4)

# Set the ticks and ticklabels for all axes
plt.setp(axes, xticks=[0.1, 0.5, 0.9], xticklabels=['a', 'b', 'c'],
        yticks=[1, 2, 3])

# Use the pyplot interface to change just one subplot...
plt.sca(axes[1, 1])
plt.xticks(range(3), ['A', 'Big', 'Cat'], color='red')

fig.tight_layout()
plt.show()
</snippet></ROW><ROW><id>19626785</id><snippet>old_list = [
        (1, 'AAA', None, 1),
        (2, 'AAA', 'x', 0),
        (5, 'AAB', 'z', 1),
        (6, 'ABB', 'x', 1),
        (9, 'ABB', 'x', 1)]
from itertools import groupby
from operator import itemgetter
print [sorted(list(group), key=itemgetter(0))[-1]
       for key, group in groupby(old_list, key=itemgetter(1))]
</snippet></ROW><ROW><id>19626785</id><snippet>[(2, 'AAA', 'x', 0), (5, 'AAB', 'z', 1), (9, 'ABB', 'x', 1)]
</snippet></ROW><ROW><id>19626785</id><snippet>old_list</snippet></ROW><ROW><id>19626785</id><snippet>old_list = sorted([
        (1, 'AAA', None, 1),
        (2, 'AAA', 'x', 0),
        (5, 'AAB', 'z', 1),
        (6, 'ABB', 'x', 1),
        (9, 'ABB', 'x', 1)], key=itemgetter(1))
</snippet></ROW><ROW><id>19627115</id><snippet>foo = whatever</snippet></ROW><ROW><id>19627115</id><snippet>foo</snippet></ROW><ROW><id>19627115</id><snippet>whatever</snippet></ROW><ROW><id>19627199</id><snippet>y==0</snippet></ROW><ROW><id>19627199</id><snippet>ax.lines[0].set_visible(False)</snippet></ROW><ROW><id>19627199</id><snippet>ax = DataFrame([1]).plot(kind='bar')
ax.lines[0].set_visible(False)
ax.set_ylim(-0.2, 1.2)
</snippet></ROW><ROW><id>19627296</id><snippet>pip install haystack</snippet></ROW><ROW><id>19627296</id><snippet>dyango haystack</snippet></ROW><ROW><id>19627296</id><snippet>pip install django-haystack</snippet></ROW><ROW><id>19627623</id><snippet>s = u'\u2212$9.02'
float(s.replace(u'\u2212', '-').replace('$', ''))
</snippet></ROW><ROW><id>19627643</id><snippet>'file'</snippet></ROW><ROW><id>19627643</id><snippet>fileinput</snippet></ROW><ROW><id>19627643</id><snippet>Fileformat = subprocess.Popen('file ' + Fileinput)
#                                  ^
</snippet></ROW><ROW><id>19627643</id><snippet>file/current/path/testfile.zip</snippet></ROW><ROW><id>19627643</id><snippet>file</snippet></ROW><ROW><id>19627643</id><snippet>Fileformat = subprocess.Popen(['file', Fileinput])
</snippet></ROW><ROW><id>19627643</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>19627643</id><snippet>Popen</snippet></ROW><ROW><id>19627643</id><snippet>Fileformat.stdout.read()</snippet></ROW><ROW><id>19627643</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19627643</id><snippet>&gt;&gt;&gt; subprocess.check_output(['file', '/etc/passwd'])
'/etc/passwd: ASCII text\n'
</snippet></ROW><ROW><id>19627703</id><snippet>data</snippet></ROW><ROW><id>19627703</id><snippet>from rauth import OAuth1Service

def Authorize():
vimeo = OAuth1Service(
    name='Vimeo',
    consumer_key=client_id,
    consumer_secret=client_secret,
    request_token_url='https://vimeo.com/oauth/request_token',
    authorize_url='https://vimeo.com/oauth/authorize',
    access_token_url='https://vimeo.com/oauth/access_token',
    base_url='http://vimeo.com/api/rest/v2',
)
try:
    request_token, request_token_secret = vimeo.get_request_token(key_token_secret=access_token_secret,data={})
    print(request_token)
except Exception, e:
    print(e)
</snippet></ROW><ROW><id>19627921</id><snippet>list</snippet></ROW><ROW><id>19627921</id><snippet>position_recalc</snippet></ROW><ROW><id>19627921</id><snippet>class ListWithReCalc(list):
    def position_recalc(self):
        ...

class Control:
    def __init__(self, instances):
        self.machine_instances = instances
        ...

    def get(self, elem = 0, end = None, step = 1):
        return ListWithReCalc(machine_instances[elem : end : step])
</snippet></ROW><ROW><id>19627921</id><snippet>class ThingWithReCalc(object):
    def __init__(self, items):
        self.items = items()

    def position_recalc(self):
        for i in self.items():
            i.position_recalc()

class Control:
    def __init__(self, instances):
        self.machine_instances = instances
        ...

    def get(self, elem = 0, end = None, step = 1):
        return ListWithReCalc(machine_instances[elem : end : step])
</snippet></ROW><ROW><id>19628064</id><snippet>apply()</snippet></ROW><ROW><id>19628064</id><snippet>import numpy as np
import pandas as pl
np.random.seed(0)

people2 = pd.DataFrame(np.random.randn(5, 5), 
                      columns=['a', 'b', 'c', 'd', 'e'], 
                      index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'])
key = ['one', 'two', 'one', 'two', 'one']

Grouped = people2.groupby(key)

def f(df):
    df["f"] = (df.a.mean() - df.b.mean())*df.c
    return df

people2 = Grouped.apply(f)
print people2
</snippet></ROW><ROW><id>19628064</id><snippet>Grouped = people2.groupby(key)

def f(a, b, c, **kw):
    return (a.mean() - b.mean())*c

people2["f"] = Grouped.apply(lambda df:f(**df))
print people2
</snippet></ROW><ROW><id>19628075</id><snippet>logging.info('Altitude:%s' % gpsd.fix.altitude)
</snippet></ROW><ROW><id>19628079</id><snippet>subprocess.call</snippet></ROW><ROW><id>19628079</id><snippet>subprocess.call(['useradd', '-c', comment, 'username', '-p', 'password'])
</snippet></ROW><ROW><id>19628079</id><snippet>username</snippet></ROW><ROW><id>19628079</id><snippet>'password'</snippet></ROW><ROW><id>19628079</id><snippet>useradd</snippet></ROW><ROW><id>19628079</id><snippet>crypt</snippet></ROW><ROW><id>19628079</id><snippet>import os
import crypt
import random

saltchars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

def salt():
    return random.choice(saltchars) + random.choice(saltchars)

def encript_pwd(password):
    return crypt.crypt(password,salt())
</snippet></ROW><ROW><id>19628079</id><snippet>subprocess.call(['useradd', '-c', comment, 'username', '-p', 
    encript_pwd(username)])
</snippet></ROW><ROW><id>19628156</id><snippet>{{...}}</snippet></ROW><ROW><id>19628156</id><snippet>"..."</snippet></ROW><ROW><id>19628156</id><snippet>request.build_absolute_uri</snippet></ROW><ROW><id>19628156</id><snippet>{% if %}</snippet></ROW><ROW><id>19628156</id><snippet>request.build_absolute_uri</snippet></ROW><ROW><id>19628156</id><snippet>{{...}}</snippet></ROW><ROW><id>19628156</id><snippet>{% if 'index.html' in request.build_absolute_uri %}
    hello
{% else %}
    bye
{% endif %}
</snippet></ROW><ROW><id>19628156</id><snippet>"{{ request.build_absolute_uri  }}"</snippet></ROW><ROW><id>19628286</id><snippet>data = """
Name         At time Last  Inter\ Max    Logfile Location               Status  
                     time   val   log                                           
                           (mins) files                                         
------------ ------- ----- ------ ------ ------------------------------ ------- 
foo1           now   16:00   60   100    flash:/schedule/foo1/          Job     
                                                                        under   
                                                                        progress
foo2           now     -     60   100    -                              Waiting 
tech-support   now   16:00   60   100    flash:/schedule/tech-support/  Job     
                                                                        under   
                                                                        progress
                                                                        """
import re
print len(re.findall("Job\s+under\s+progress", data))
</snippet></ROW><ROW><id>19628286</id><snippet>2
</snippet></ROW><ROW><id>19628286</id><snippet>data = """
Name         At time Last  Inter\ Max    Logfile Location               Status  
                     time   val   log                                           
                           (mins) files                                         
------------ ------- ----- ------ ------ ------------------------------ ------- 
foo1           now   16:00   60   100    flash:/schedule/foo1/          Job under progress
foo2           now     -     60   100    -                              Waiting 
tech-support   now   16:00   60   100    flash:/schedule/tech-support/  Job under progress
"""

print sum(1 for line in data.split("\n") if "Job under progress" in line)
</snippet></ROW><ROW><id>19628286</id><snippet>2
</snippet></ROW><ROW><id>19628560</id><snippet>__str__</snippet></ROW><ROW><id>19628560</id><snippet>object.__str__</snippet></ROW><ROW><id>19628560</id><snippet>Foo.__str__ is not object.__str__
</snippet></ROW><ROW><id>19628560</id><snippet>type(f).__str__ is not object.__str__
</snippet></ROW><ROW><id>19628560</id><snippet>__str__</snippet></ROW><ROW><id>19628560</id><snippet>object</snippet></ROW><ROW><id>19628799</id><snippet>zip</snippet></ROW><ROW><id>19628799</id><snippet>enumerate</snippet></ROW><ROW><id>19628799</id><snippet>enumerate</snippet></ROW><ROW><id>19628799</id><snippet>def solve(lis, num):
    for i, (x, y) in enumerate(zip(lis, lis[1:]), 1):
        if y - x &gt;= num:
            yield i

print list(solve([0,1,-1,3,7,4,5,3,2,4,8], 2))
#[3, 4, 9, 10]
</snippet></ROW><ROW><id>19628799</id><snippet>from itertools import tee, izip
def solve(lis, num):
    it1, it2 = tee(lis, 2)
    next(it2)  #drop first item
    for i, (x, y) in enumerate(izip(it1, it2), 1):
        print x, y
        if y - x &gt;= num:
            yield i

print list(solve((x for x in [0,1,-1,3,7,4,5,3,2,4,8]), 2))
#[3, 4, 9, 10]
</snippet></ROW><ROW><id>19628992</id><snippet>names</snippet></ROW><ROW><id>19628992</id><snippet>result</snippet></ROW><ROW><id>19628992</id><snippet>F</snippet></ROW><ROW><id>19628992</id><snippet>data = {'001': {'desc': 'Verify all commands.', 'result': 'P', 'name': '001', 'run_time': '00:00:30', 'start_time': '1382943624', 'end_time': '1382943654'}, 
'002': {'desc': 'Verify all commands.', 'result': 'F', 'name': '002', 'run_time': '00:00:30', 'start_time': '1382943624', 'end_time': '1382943654'},
'003': {'desc': 'Verify all commands.', 'result': 'F', 'name': '003', 'run_time': '00:00:30', 'start_time': '1382943624', 'end_time': '1382943654'}}

print [value["name"] for key, value in data.items() if value["result"] == "F"]
</snippet></ROW><ROW><id>19628992</id><snippet>['002', '003']
</snippet></ROW><ROW><id>19629100</id><snippet>subplots_adjust</snippet></ROW><ROW><id>19629100</id><snippet>fig, axes = plt.subplots(3, 4)
</snippet></ROW><ROW><id>19629100</id><snippet>figsize=(8,6)</snippet></ROW><ROW><id>19629153</id><snippet>def test():
    value=input("Value here!") #eval is bad AND dangerous practice. Avoid using it.
    with open ("word-text.txt","r") as f:
        #At this point you can do one of two things:
        #1) read the entire file line by line
        #2) read the entire file into a list, and loop/iterate over that list
        #In this example, I'll read the file line by line:
        nice_strings = []
        for line in f:
            line = line.strip() #remove any extraneous whitespace from the line (e.g. spaces and newlines)
            nice_str_chars = []
            #At this point, you want to read EACH character in the line
            #N.B.: ord is the name of a built-in function. Use another name like `char` (below):
            for char in line:
                #Since you're in this loop, you are dealing with EACH individual character of each line
                #And, as you want to "shift" the character by some number of places
                #Python doesn't allow you to natively shift strings by arbitrary amounts,
                #so, the only way we can do so is to convert EACH character into its numeric representation.
                #In order to do so, you have to use the `ord` function which converts characters into
                #their respective integer representation.
                int_of_char = ord(char)
                #At this point, the character has been converted to it's integer equivalent
                #NOW, you can "shift" it. In other words, add the value to the `int_of_char`:
                int_of_char += value #update the value of the variable
                #At this point, the value has been modified, and the INTEGER value of the character has been
                #shifted. However, we don't want the shifted INTEGER value: we want the shifted CHARACTER value.
                #So, how do we convert integers to characters? Python has a builtin function called `chr` which
                #does exactly that.
                #So, let's convert the shifted INTEGER to a shifted CHARACTER using `chr`:
                nice_char = chr(int_of_char)
                #print it out the original and modified characters so you can see what's in the string (this step is optional)
                print char, '=&gt;', nice_char
                #At this point we've successfully shifted the character. However, since this is just A character of the original
                #string, we need a way to save the updated characters as a string. There are a number of ways to do this.
                #For simplicity, we can use a list `nice_str_chars`:
                nice_str_chars.append(nice_char)
            #At this point we've looped over all the characters in ONE LINE, and we've calculated and stored the shifted
            #characters for that same line. However, since we've stored the characters in a list: `nice_str_chars`, we
            #have to convert it to a string. We can do that using the `join` method on an empty string, with 
            #`nice_str_chars` as the list (as we want to join the characters of the list into a string):
            nice_str = ''.join(nice_str_chars)
            #And, since you want to shift ALL the lines, you ought to append the corrected line to a list that can later be
            #returned:
            nice_strings.append(nice_str)
            #you can print it out if necessary:
            print line, '=&gt;', nice_str, '\n'
        #At this point, you've successfully looped over the entire file, shifted all lines by a user entered integer amount,
        #now, all you have to do is return it, or do something else with them (i.e. write the updated strings to another file).
        #That part, I'll leave up to you.
        return nice_strings
</snippet></ROW><ROW><id>19629153</id><snippet>z</snippet></ROW><ROW><id>19629153</id><snippet>3</snippet></ROW><ROW><id>19629153</id><snippet>c</snippet></ROW><ROW><id>19629153</id><snippet>Value here!2
a =&gt; c
p =&gt; r
p =&gt; r
l =&gt; n
e =&gt; g
s =&gt; u
apples =&gt; crrngu 

o =&gt; q
r =&gt; t
a =&gt; c
n =&gt; p
g =&gt; i
e =&gt; g
s =&gt; u
oranges =&gt; qtcpigu 

w =&gt; y
a =&gt; c
t =&gt; v
e =&gt; g
r =&gt; t
m =&gt; o
e =&gt; g
l =&gt; n
o =&gt; q
n =&gt; p
watermelon =&gt; ycvgtognqp 

k =&gt; m
i =&gt; k
w =&gt; y
i =&gt; k
kiwi =&gt; mkyk 

z =&gt; |
u =&gt; w
c =&gt; e
c =&gt; e
h =&gt; j
i =&gt; k
n =&gt; p
i =&gt; k
zucchini =&gt; |weejkpk 

c =&gt; e
a =&gt; c
r =&gt; t
r =&gt; t
o =&gt; q
t =&gt; v
carrot =&gt; ecttqv 

o =&gt; q
k =&gt; m
r =&gt; t
a =&gt; c
okra =&gt; qmtc 

j =&gt; l
a =&gt; c
l =&gt; n
a =&gt; c
p =&gt; r
e =&gt; g
n =&gt; p
o =&gt; q
jalapeno =&gt; lcncrgpq 

p =&gt; r
e =&gt; g
p =&gt; r
p =&gt; r
e =&gt; g
r =&gt; t
pepper =&gt; rgrrgt 

c =&gt; e
u =&gt; w
c =&gt; e
u =&gt; w
m =&gt; o
b =&gt; d
e =&gt; g
r =&gt; t
cucumber =&gt; ewewodgt 

b =&gt; d
a =&gt; c
n =&gt; p
a =&gt; c
n =&gt; p
a =&gt; c
banana =&gt; dcpcpc 
</snippet></ROW><ROW><id>19629357</id><snippet>(1382693438.0, 1382693438.0)</snippet></ROW><ROW><id>19629357</id><snippet>[1382693438.0, 1382693438.0]</snippet></ROW><ROW><id>19629459</id><snippet>xml_declaration</snippet></ROW><ROW><id>19629459</id><snippet>encoding</snippet></ROW><ROW><id>19629459</id><snippet>tree.write("filename.xml", xml_declaration=True, encoding='utf-8')
</snippet></ROW><ROW><id>19629459</id><snippet>ElementTree.write</snippet></ROW><ROW><id>19629459</id><snippet>write(file, encoding="us-ascii", xml_declaration=None,
  default_namespace=None, method="xml")</snippet></ROW><ROW><id>19629720</id><snippet>sudo pip install django</snippet></ROW><ROW><id>19629845</id><snippet>dummy_threading</snippet></ROW><ROW><id>19629845</id><snippet>threading</snippet></ROW><ROW><id>19629845</id><snippet>start</snippet></ROW><ROW><id>19629845</id><snippet>import dummy_threading as threading
</snippet></ROW><ROW><id>19629861</id><snippet>by getting the same issue before i simple replace like this :    

import os
TEMPLATE_DIRS = (
    os.path.join(os.path.dirname(__file__),'templates').replace('\\','/'),
</snippet></ROW><ROW><id>19630175</id><snippet>%(name)x</snippet></ROW><ROW><id>19630175</id><snippet>str.format()</snippet></ROW><ROW><id>19630175</id><snippet>&gt;&gt;&gt; x={1:100,2:200,3:300}
&gt;&gt;&gt; "I scored {0[1]}".format(x)
'I scored 100'
</snippet></ROW><ROW><id>19630305</id><snippet>/lookbook/uploads</snippet></ROW><ROW><id>19630305</id><snippet>&gt;&gt;&gt; open('/tmp/no-such-directory/a-text-file.txt', 'w')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: '/tmp/no-such-directory/a-text-file.txt'
&gt;&gt;&gt; os.mkdir('/tmp/no-such-directory')
&gt;&gt;&gt; open('/tmp/no-such-directory/a-text-file.txt', 'w')
&lt;open file '/tmp/no-such-directory/a-text-file.txt', mode 'w' at 0x1ec6270&gt;
</snippet></ROW><ROW><id>19630305</id><snippet>/tmp/no-such-directory</snippet></ROW><ROW><id>19630449</id><snippet>df.apply(lambda x: 'mike' in x.values, axis=1).any()
</snippet></ROW><ROW><id>19630449</id><snippet>df.applymap(lambda x: x == 'mike').any().any()
</snippet></ROW><ROW><id>19630521</id><snippet>big_array</snippet></ROW><ROW><id>19630521</id><snippet>big_array</snippet></ROW><ROW><id>19630521</id><snippet>num</snippet></ROW><ROW><id>19630521</id><snippet>import numpy as np
import pandas as pd

num = np.array([[ 0.17899619,  0.33093259,  0.2076353,   0.06130814],
                [ 0.20392888,  0.42653105,  0.33325891,  0.10473969],
                [ 0.17038247,  0.19081956,  0.10119709,  0.09032416],
                [-0.10606583, -0.13680513, -0.13129103, -0.03684349],
                [ 0.20319428,  0.28340985,  0.20994867,  0.11728491],
                [ 0.04396872,  0.23703525,  0.09359683,  0.11486036],
                [ 0.27801304, -0.05769304, -0.06202813,  0.04722761]])

days = ['5 days', '10 days', '20 days', '60 days']
prices = ['AAPL', 'ADBE', 'AMD', 'AMZN', 'CRM', 'EXPE', 'FB']

print pd.DataFrame(num, index=prices, columns=days).to_html()
</snippet></ROW><ROW><id>19630521</id><snippet>pandas</snippet></ROW><ROW><id>19630521</id><snippet>numpy</snippet></ROW><ROW><id>19630726</id><snippet>wifey[0] = 'jane'</snippet></ROW><ROW><id>19630726</id><snippet>wifey</snippet></ROW><ROW><id>19630726</id><snippet>hubby</snippet></ROW><ROW><id>19630726</id><snippet>hubby[1][1] = 50.0</snippet></ROW><ROW><id>19630726</id><snippet>hubby</snippet></ROW><ROW><id>19630726</id><snippet>hubby[1]</snippet></ROW><ROW><id>19630726</id><snippet>wifey[1]</snippet></ROW><ROW><id>19630726</id><snippet>hubby[0]</snippet></ROW><ROW><id>19630726</id><snippet>wifey[0]</snippet></ROW><ROW><id>19630726</id><snippet>person = [[], ['savings', 100.00]]
hubby = list(person)
wifey = list(person)
</snippet></ROW><ROW><id>19630726</id><snippet>hubby[0] = [1,2,3]
id(hubby[0])
id(wifey[0])
</snippet></ROW><ROW><id>19630726</id><snippet>original[:]</snippet></ROW><ROW><id>19630726</id><snippet>str(original)</snippet></ROW><ROW><id>19630726</id><snippet>copy.copy(original)</snippet></ROW><ROW><id>19630726</id><snippet>==</snippet></ROW><ROW><id>19630726</id><snippet>(original + ' ')[0:-1]</snippet></ROW><ROW><id>19630778</id><snippet>a</snippet></ROW><ROW><id>19630778</id><snippet>b</snippet></ROW><ROW><id>19630778</id><snippet>id</snippet></ROW><ROW><id>19630778</id><snippet>b</snippet></ROW><ROW><id>19630778</id><snippet>a</snippet></ROW><ROW><id>19630778</id><snippet>b = a[:]
</snippet></ROW><ROW><id>19630778</id><snippet>b</snippet></ROW><ROW><id>19630778</id><snippet>a</snippet></ROW><ROW><id>19630778</id><snippet>b = list(a)
</snippet></ROW><ROW><id>19630778</id><snippet>import copy
b = copy.copy(a) # The copy module can be useful for nested lists.
</snippet></ROW><ROW><id>19630870</id><snippet>locale</snippet></ROW><ROW><id>19630870</id><snippet>tickets</snippet></ROW><ROW><id>19630870</id><snippet>js_info_dict = {
    'domain': 'djangojs',
    'packages': ('tickets',),
}

urlpatterns = patterns('',
    (r'^jsi18n/$', 'django.views.i18n.javascript_catalog', js_info_dict),
    ...
</snippet></ROW><ROW><id>19630870</id><snippet>&lt;script type="text/javascript" src="{% url django.views.i18n.javascript_catalog %}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19630870</id><snippet>python -m django-admin makemessages -d djangojs -l fr
python -m django-admin compilemessages
</snippet></ROW><ROW><id>19631067</id><snippet>re.error</snippet></ROW><ROW><id>19631067</id><snippet>import re

try:
    re.compile('[')
    is_valid = True
except re.error:
    is_valid = False
</snippet></ROW><ROW><id>19631067</id><snippet>re.error</snippet></ROW><ROW><id>19631197</id><snippet>from subprocess import check_call

check_call("cmd1 &gt; &gt;(cmd2) 2&gt; &gt;(cmd3)", shell=True, executable="/bin/bash")
</snippet></ROW><ROW><id>19631197</id><snippet>cmd1</snippet></ROW><ROW><id>19631197</id><snippet>cmd2</snippet></ROW><ROW><id>19631197</id><snippet>cmd1</snippet></ROW><ROW><id>19631197</id><snippet>cmd3</snippet></ROW><ROW><id>19631197</id><snippet>bash</snippet></ROW><ROW><id>19631197</id><snippet>#!/usr/bin/env python
import sys
from subprocess import Popen, PIPE
from textwrap import dedent

# generate some output on stdout/stderr
source = Popen([sys.executable, "-c", dedent("""
    from __future__ import print_function
    import sys
    from itertools import cycle
    from string import ascii_lowercase

    for i, c in enumerate(cycle(ascii_lowercase)):
        print(c)
        print(i, file=sys.stderr)
""")], stdout=PIPE, stderr=PIPE)

# convert input to upper case
sink = Popen([sys.executable, "-c", dedent("""
    import sys

    for line in sys.stdin:
        sys.stdout.write(line.upper())
""")], stdin=source.stdout)
source.stdout.close() # allow source to receive SIGPIPE if sink exits

# square input
sink_stderr = Popen([sys.executable, "-c", dedent("""
   import sys

   for line in sys.stdin:
       print(int(line)**2)
""")], stdin=source.stderr)
source.stderr.close() # allow source to receive SIGPIPE if sink_stderr exits

sink.communicate()
sink_stderr.communicate()
source.wait()
</snippet></ROW><ROW><id>19631366</id><snippet>def product(a, b):
    print ("product is", a*b)

if __name__ == "__main__":
    product( int(sys.argv[1]), int(sys.argv[2]) )
</snippet></ROW><ROW><id>19631366</id><snippet>python product.py 2 3

product is 6
</snippet></ROW><ROW><id>19631366</id><snippet>a = input("value one:  ")
b = input("value two:  ")
os.execlp('python', 'python', 'product.py', a, b) 
</snippet></ROW><ROW><id>19631596</id><snippet>decimal</snippet></ROW><ROW><id>19631596</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; decimal.Decimal('-97.173125220360362')
Decimal('-97.173125220360362')
</snippet></ROW><ROW><id>19631596</id><snippet>str.split</snippet></ROW><ROW><id>19631596</id><snippet>str.strip</snippet></ROW><ROW><id>19631596</id><snippet>&gt;&gt;&gt; s = '[-97.173125220360362, -97.173125220360362]'
&gt;&gt;&gt; [decimal.Decimal(x) for x in s.strip('[]').split(',')]
[Decimal('-97.173125220360362'), Decimal('-97.173125220360362')]
</snippet></ROW><ROW><id>19631596</id><snippet>&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.dig
15
&gt;&gt;&gt; s = '3.14159265358979'    # decimal string with 15 significant digits
&gt;&gt;&gt; format(float(s), '.15g')  # convert to float and back -&gt; same value
'3.14159265358979'
</snippet></ROW><ROW><id>19631596</id><snippet>sys.float_info.dig</snippet></ROW><ROW><id>19631596</id><snippet>&gt;&gt;&gt;
&gt;&gt;&gt; s = '9876543211234567'    # 16 significant digits is too many!
&gt;&gt;&gt; format(float(s), '.16g')  # conversion changes value
'9876543211234568'
</snippet></ROW><ROW><id>19631596</id><snippet>sys.float_info.dig</snippet></ROW><ROW><id>19631596</id><snippet>decimal</snippet></ROW><ROW><id>19631691</id><snippet>for stops in range(lines):
    body.pendown()
    body.left(circle)    // swapped vars 
    body.forward(sol)    // on these two lines
</snippet></ROW><ROW><id>19631691</id><snippet>circle --&gt; penForwardAmount
sol    --&gt; penRotateAmount
lines  --&gt; numberOfLines
</snippet></ROW><ROW><id>19631691</id><snippet>topRad</snippet></ROW><ROW><id>19631691</id><snippet>numLines</snippet></ROW><ROW><id>19631691</id><snippet>topRad</snippet></ROW><ROW><id>19632404</id><snippet>def is_user_privileged(name):
    namequery = Ops.query.filter(name==name)
    if namequery.count():
       return True
    else:
       return False
</snippet></ROW><ROW><id>19632404</id><snippet>def is_user_privileged(name):
    namequery = Ops.query.filter(name==name)
    return namequery.count()
</snippet></ROW><ROW><id>19632680</id><snippet>def p():
    print(p.__dict__.get('smuggled_value',0))

def q():
    p.smuggled_value = getattr(p,'smuggled_value',0) + 1
</snippet></ROW><ROW><id>19632680</id><snippet>p</snippet></ROW><ROW><id>19632680</id><snippet>q</snippet></ROW><ROW><id>19632680</id><snippet>__dict__</snippet></ROW><ROW><id>19632680</id><snippet>object.attribute</snippet></ROW><ROW><id>19632680</id><snippet>class</snippet></ROW><ROW><id>19632680</id><snippet>p</snippet></ROW><ROW><id>19632680</id><snippet>q</snippet></ROW><ROW><id>19632857</id><snippet>def printHead(n):
    for l in range(1,n):
        print " "*(n-l)+"*"*(1 if l==1 else 2*l-1)
</snippet></ROW><ROW><id>19632857</id><snippet>level-1</snippet></ROW><ROW><id>19632857</id><snippet>2*level-1</snippet></ROW><ROW><id>19632857</id><snippet>&gt;&gt;&gt; printHead(6)
     *
    ***
   *****
  *******
 *********
</snippet></ROW><ROW><id>19633081</id><snippet>fileinput.input()</snippet></ROW><ROW><id>19633081</id><snippet>inplace=1</snippet></ROW><ROW><id>19633081</id><snippet>sys.stdout.write(line)</snippet></ROW><ROW><id>19633081</id><snippet>def replaceAll(file,searchExp,replaceExp):
    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)
</snippet></ROW><ROW><id>19633081</id><snippet>inplace=1</snippet></ROW><ROW><id>19633103</id><snippet>delim_whitespace=True</snippet></ROW><ROW><id>19633306</id><snippet>if</snippet></ROW><ROW><id>19633306</id><snippet>True</snippet></ROW><ROW><id>19633306</id><snippet>False</snippet></ROW><ROW><id>19633306</id><snippet>None</snippet></ROW><ROW><id>19633306</id><snippet>False</snippet></ROW><ROW><id>19633306</id><snippet>''</snippet></ROW><ROW><id>19633306</id><snippet>()</snippet></ROW><ROW><id>19633306</id><snippet>[]</snippet></ROW><ROW><id>19633306</id><snippet>{}</snippet></ROW><ROW><id>19633306</id><snippet>__bool__()</snippet></ROW><ROW><id>19633306</id><snippet>__len__()</snippet></ROW><ROW><id>19633306</id><snippet>False</snippet></ROW><ROW><id>19633306</id><snippet>False</snippet></ROW><ROW><id>19633306</id><snippet>True</snippet></ROW><ROW><id>19633306</id><snippet>-1</snippet></ROW><ROW><id>19633410</id><snippet>import re
p = re.compile("&lt;br&gt;\((\d+%)\)&lt;\/TD&gt;", re.IGNORECASE)
for m in p.finditer(html_code):
    print m.start(), m.group()
</snippet></ROW><ROW><id>19633586</id><snippet>pylab.text()</snippet></ROW><ROW><id>19633586</id><snippet>import pylab as pl
xs = [0, 1, 2]
ys = [2.5, 4, 3]
pl.plot(xs, ys, "-o")
for x, y in zip(xs, ys):
    pl.text(x, y, str(x), color="red", fontsize=12)
pl.margins(0.1)
</snippet></ROW><ROW><id>19634771</id><snippet>.py</snippet></ROW><ROW><id>19634771</id><snippet>.pyc</snippet></ROW><ROW><id>19634771</id><snippet>.pyo</snippet></ROW><ROW><id>19634771</id><snippet>.pyc</snippet></ROW><ROW><id>19634771</id><snippet>assert</snippet></ROW><ROW><id>19634771</id><snippet>.pyd</snippet></ROW><ROW><id>19634771</id><snippet>.pyw</snippet></ROW><ROW><id>19634771</id><snippet>pythonw</snippet></ROW><ROW><id>19635035</id><snippet>y=y+1</snippet></ROW><ROW><id>19635035</id><snippet>if</snippet></ROW><ROW><id>19635035</id><snippet>sorted=True</snippet></ROW><ROW><id>19635035</id><snippet>;</snippet></ROW><ROW><id>19635035</id><snippet>a, b = b, a</snippet></ROW><ROW><id>19635035</id><snippet>global</snippet></ROW><ROW><id>19635035</id><snippet>while x &lt; y: ... x=x+1</snippet></ROW><ROW><id>19635035</id><snippet>for x in range(y)</snippet></ROW><ROW><id>19635035</id><snippet>&gt;</snippet></ROW><ROW><id>19635035</id><snippet>&lt;</snippet></ROW><ROW><id>19635035</id><snippet>import random

def createRandom():
    return [random.randrange(1,100) for i in range(100)]

def bubblesort(test):
    is_sorted = False
    while not is_sorted:
        is_sorted= True
        for y in range(len(test) - 1):
            if test[y] &gt; test[y+1]:
                test[y], test[y+1] = test[y+1], test[y]
                is_sorted= False

lst = createRandom()
bubblesort(lst)
print(lst)
</snippet></ROW><ROW><id>19635049</id><snippet>sendmail</snippet></ROW><ROW><id>19635049</id><snippet>apt-get install sendmail
</snippet></ROW><ROW><id>19635051</id><snippet>min()</snippet></ROW><ROW><id>19635051</id><snippet>inspect.getsource()</snippet></ROW><ROW><id>19635051</id><snippet>&gt;&gt;&gt; min
&lt;built-in function min&gt;
</snippet></ROW><ROW><id>19635051</id><snippet>built-in function</snippet></ROW><ROW><id>19635051</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>19635051</id><snippet>builtin_min()</snippet></ROW><ROW><id>19635051</id><snippet>min_max()</snippet></ROW><ROW><id>19635079</id><snippet>with</snippet></ROW><ROW><id>19635079</id><snippet>__del__</snippet></ROW><ROW><id>19635079</id><snippet>with</snippet></ROW><ROW><id>19635348</id><snippet>Lname</snippet></ROW><ROW><id>19635348</id><snippet>Age</snippet></ROW><ROW><id>19635348</id><snippet>Gender</snippet></ROW><ROW><id>19635428</id><snippet>{% mytag "/sms/"|add:phone.number %}
</snippet></ROW><ROW><id>19635599</id><snippet>user = fields.ToOneField(UserResource, 'user',  full=True)
</snippet></ROW><ROW><id>19635599</id><snippet>ToOneField</snippet></ROW><ROW><id>19635599</id><snippet>full=true</snippet></ROW><ROW><id>19635622</id><snippet>thisone_pos = rr.find('JA=THISONE')
range_start = rr.rfind("JA=", 0, thisone_pos) + 3
range_end = rr.find(';', range_start)
print rr[range_start:range_end]
</snippet></ROW><ROW><id>19635622</id><snippet>re.findall(pattern, rr[::-1])
</snippet></ROW><ROW><id>19635706</id><snippet>fileinput.input(..., inplace=1)</snippet></ROW><ROW><id>19635706</id><snippet>sys.stdout</snippet></ROW><ROW><id>19635706</id><snippet>fileinput</snippet></ROW><ROW><id>19635706</id><snippet>.bak</snippet></ROW><ROW><id>19635706</id><snippet>C:/Users/sid/Desktop/app/pom.template.xml.bak</snippet></ROW><ROW><id>19635706</id><snippet>C:/Users/sid/Desktop/app/pom.template.xml</snippet></ROW><ROW><id>19635706</id><snippet>import time, os

def replaceAll(file,searchExp,replaceExp):
    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)

    time.sleep(1) # wait 1 second, then delete the backup
    os.remove(file + '.bak')
</snippet></ROW><ROW><id>19635706</id><snippet>import os, stat

def replaceAll(file,searchExp,replaceExp):
    readonly = not os.stat(myFile)[0] &amp; stat.S_IWRITE
    if readonly:
        os.chmod(file, stat.S_IWRITE)

    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)

    if readonly:
        os.chmod(file, stat.S_IREAD)
</snippet></ROW><ROW><id>19636026</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; print textwrap.fill('This is a cool sentence... How about eating it??? Whats more?? pepper is available all for free!!!', 15)
This is a cool
sentence... How
about eating
it??? Whats
more?? pepper
is available
all for free!!!
</snippet></ROW><ROW><id>19636026</id><snippet>10</snippet></ROW><ROW><id>19636026</id><snippet>sentence...</snippet></ROW><ROW><id>19636026</id><snippet>textwrap</snippet></ROW><ROW><id>19636026</id><snippet>break_long_words=False</snippet></ROW><ROW><id>19636026</id><snippet>&gt;&gt;&gt; print textwrap.fill('This is a cool sentence... How about eating it??? Whats more?? pepper is available all for free!!!', 10, break_long_words=False)
This is a
cool
sentence...
How about
eating
it???
Whats
more??
pepper is
available
all for
free!!!
</snippet></ROW><ROW><id>19636285</id><snippet>featgen = etree.iterparse('somefile.xml', tag='{%s}sometag' % ns['xmlns'], events=('start',))
</snippet></ROW><ROW><id>19636285</id><snippet>featgen = etree.iterparse('somefile.xml', tag='{%s}sometag' % ns['xmlns'])
</snippet></ROW><ROW><id>19636310</id><snippet>void callFunc(NativeObj* obj)
{
    obj-&gt;func();
}
</snippet></ROW><ROW><id>19636310</id><snippet>import ctypes
d = ctypes.cdll.LoadLibrary('dll/path')
obj = d.createNativeObj()
d.callFunc(obj)
</snippet></ROW><ROW><id>19636310</id><snippet>ctypes</snippet></ROW><ROW><id>19636310</id><snippet>import ctypes
d = ctypes.cdll.LoadLibrary('dll/path')

createNativeObj = d.createNativeObj
createNativeObj.restype = ctypes.c_void_p
callFunc = d.callFunc
callFunc.argtypes = [ctypes.c_void_p]

obj = createNativeObj()
callFunc(obj)
</snippet></ROW><ROW><id>19636387</id><snippet>app.yaml</snippet></ROW><ROW><id>19636387</id><snippet>- url: /rss/.*
  script: main.rss
</snippet></ROW><ROW><id>19636387</id><snippet>uuid</snippet></ROW><ROW><id>19636387</id><snippet>http://www.my-company.com/rss/550e8400-e29b-41d4-a716-446655440000
</snippet></ROW><ROW><id>19636739</id><snippet>Application</snippet></ROW><ROW><id>19636739</id><snippet>import spyne.const
spyne.const.REQUEST_SUFFIX ='RQ'
spyne.const.RESPONSE_SUFFIX ='RS'
</snippet></ROW><ROW><id>19636874</id><snippet>TimeGrouper</snippet></ROW><ROW><id>19636874</id><snippet>resample</snippet></ROW><ROW><id>19636874</id><snippet>In [3]: df
Out[3]: 
                     value
2013-10-13 19:03:54   5462
2013-10-12 19:03:54   5462
2013-10-11 13:19:23   3185

In [4]: df.resample('d')
Out[4]: 
            value
2013-10-11   3185
2013-10-12   5462
2013-10-13   5462
</snippet></ROW><ROW><id>19637175</id><snippet>url_for()</snippet></ROW><ROW><id>19637175</id><snippet>from flask.globals import _app_ctx_stack, _request_ctx_stack
from werkzeug.urls import url_parse

def route_from(url, method = None):
    appctx = _app_ctx_stack.top
    reqctx = _request_ctx_stack.top
    if appctx is None:
        raise RuntimeError('Attempted to match a URL without the '
                           'application context being pushed. This has to be '
                           'executed when application context is available.')

    if reqctx is not None:
        url_adapter = reqctx.url_adapter
    else:
        url_adapter = appctx.url_adapter
        if url_adapter is None:
            raise RuntimeError('Application was not able to create a URL '
                               'adapter for request independent URL matching. '
                               'You might be able to fix this by setting '
                               'the SERVER_NAME config variable.')
    parsed_url = url_parse(url)
    if parsed_url.netloc is not "" and parsed_url.netloc != url_adapter.server_name:
        raise NotFound()
    return url_adapter.match(parsed_url.path, method)
</snippet></ROW><ROW><id>19637185</id><snippet>__cmp__(self, other)</snippet></ROW><ROW><id>19637185</id><snippet>__lt__, __gt__, __eq__, __le__, __ge__, __ne__</snippet></ROW><ROW><id>19637185</id><snippet>__lt__</snippet></ROW><ROW><id>19637185</id><snippet>__gt__</snippet></ROW><ROW><id>19637185</id><snippet>__cmp__</snippet></ROW><ROW><id>19637185</id><snippet># Python 2.X
def is_sortable(obj):
    return hasattr(obj, "__cmp__") or \
           hasattr(obj, "__lt__") or \
           hasattr(obj, "__gt__")

# Python 3.X
def is_sortable(obj):
    cls = obj.__class__
    return cls.__lt__ != object.__lt__ or \
           cls.__gt__ != object.__gt__
</snippet></ROW><ROW><id>19637422</id><snippet>def __init__(self, tup):
</snippet></ROW><ROW><id>19637422</id><snippet>tup</snippet></ROW><ROW><id>19637422</id><snippet>tuple</snippet></ROW><ROW><id>19637422</id><snippet>tuple</snippet></ROW><ROW><id>19637422</id><snippet>class Board(tuple):
    def __init__(self, tup):
        if not isinstance(tup, tuple):
            raise TypeError("Constrcutor argument to Board should be a tuple")
        super().__init__()

print Board([1, 2])
</snippet></ROW><ROW><id>19637422</id><snippet>TypeError: Constrcutor argument to Board should be a tuple
</snippet></ROW><ROW><id>19637422</id><snippet>tuple</snippet></ROW><ROW><id>19637422</id><snippet>list</snippet></ROW><ROW><id>19637422</id><snippet>class Board(tuple):
    def __init__(self, tup):
        for i in tup:
            pass
myList, myTuple = range(10), tuple(xrange(10))

from timeit import timeit
print timeit("Board(myList)", "from __main__ import myList, Board", number = 1000000)
print timeit("Board(myTuple)", "from __main__ import myTuple, Board", number = 1000000)
</snippet></ROW><ROW><id>19637422</id><snippet>0.44806599617
0.413192987442
</snippet></ROW><ROW><id>19637422</id><snippet>list</snippet></ROW><ROW><id>19637422</id><snippet>tuple</snippet></ROW><ROW><id>19637789</id><snippet>re.findall()</snippet></ROW><ROW><id>19637789</id><snippet>.group()</snippet></ROW><ROW><id>19637789</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r"(\w)(\W)")
&gt;&gt;&gt; regex.findall("A/1$5&amp;")
[('A', '/'), ('1', '$'), ('5', '&amp;')]
</snippet></ROW><ROW><id>19637789</id><snippet>re.finditer()</snippet></ROW><ROW><id>19637789</id><snippet>&gt;&gt;&gt; for match in regex.finditer("A/1$5&amp;"):
...     print match.group(1), match.group(2)
...
A /
1 $
5 &amp;
</snippet></ROW><ROW><id>19637885</id><snippet>name == 'posix'</snippet></ROW><ROW><id>19637885</id><snippet>True</snippet></ROW><ROW><id>19637885</id><snippet>False</snippet></ROW><ROW><id>19637885</id><snippet>name</snippet></ROW><ROW><id>19637885</id><snippet>'posix'</snippet></ROW><ROW><id>19637885</id><snippet>True</snippet></ROW><ROW><id>19637885</id><snippet>False</snippet></ROW><ROW><id>19637885</id><snippet>close_fds</snippet></ROW><ROW><id>19637885</id><snippet>Popen</snippet></ROW><ROW><id>19637885</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19637885</id><snippet>name</snippet></ROW><ROW><id>19637885</id><snippet>NameError</snippet></ROW><ROW><id>19637885</id><snippet>from xxxx import *</snippet></ROW><ROW><id>19638122</id><snippet>class Field(Leaf):
    """
    Field object.

    Field examples: User.name, User.age ..
    """

    def __init__(self, is_primarykey=False, is_foreignkey=False):
        self.is_primarykey = is_primarykey
        self.is_foreignkey = is_foreignkey

    # describe model's attr
    def describe(self, name, model):
        self.name = name
        self.model = model
        # fullname e.g. : User.id 's fullname is "user.id"
        self.fullname = self.model.table_name + "." + self.name
        # describe the attribute, reload its access control of writing, reading
        setattr(model, name, FieldDescriptor(self))
</snippet></ROW><ROW><id>19638122</id><snippet>setattr</snippet></ROW><ROW><id>19638122</id><snippet>describe("field_name", myObject)</snippet></ROW><ROW><id>19638122</id><snippet>myObject.field_name</snippet></ROW><ROW><id>19638195</id><snippet>datetime</snippet></ROW><ROW><id>19638195</id><snippet>date</snippet></ROW><ROW><id>19638195</id><snippet>date2.date() == datetime.date(2010,11,15)
</snippet></ROW><ROW><id>19638195</id><snippet>In [1]: import datetime

In [2]: datetime.date.today()
Out[2]: datetime.date(2013, 10, 28)

In [3]: datetime.datetime.now()
Out[3]: datetime.datetime(2013, 10, 28, 11, 5, 43, 997651)

In [4]: datetime.datetime.now() == datetime.date.today()
Out[4]: False

In [5]: datetime.datetime.now().date() == datetime.date.today()
Out[5]: True
</snippet></ROW><ROW><id>19638582</id><snippet>all_sprites_list.draw(mainScreen)
</snippet></ROW><ROW><id>19638582</id><snippet>barrier_hit_list</snippet></ROW><ROW><id>19638673</id><snippet>+</snippet></ROW><ROW><id>19638673</id><snippet>"http://www.domain.com/ex/s/API/r/postLoadItemUpdate?id='" + itemid + "'"
</snippet></ROW><ROW><id>19638673</id><snippet>itemid</snippet></ROW><ROW><id>19638673</id><snippet>str(itemid)</snippet></ROW><ROW><id>19638673</id><snippet>"http://www.domain.com/ex/s/API/r/postLoadItemUpdate?id='{}'".format(itemid)
</snippet></ROW><ROW><id>19639007</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19639007</id><snippet>datetime.strptime</snippet></ROW><ROW><id>19639007</id><snippet>from itertools import groupby
from datetime import datetime
def solve(item):
    dt = datetime.strptime(item[0], '%H:%M:%S.%f')
    return dt.hour, dt.minute, dt.second

lis = [['10:09:56.033', 'ComponentB', 2, 'DEBUG', 'description'], ['10:09:56.034', 'ComponentB', 1, 'DEBUG', 'description'], ['10:09:57.034', 'ComponentB', 2, 'DEBUG', 'description'], ['10:09:57.045', 'ComponentB', 2, 'DEBUG', 'description']]

for k, g in groupby(lis, key=solve):
    print '\n'.join(x[0] for x in g) + '\n'
</snippet></ROW><ROW><id>19639007</id><snippet>10:09:56.033
10:09:56.034

10:09:57.034
10:09:57.045
</snippet></ROW><ROW><id>19639007</id><snippet>datetime</snippet></ROW><ROW><id>19639007</id><snippet>str.partition('.')</snippet></ROW><ROW><id>19639007</id><snippet>for k, g in groupby(lis, key=lambda x:x[0].partition('.')[0]):
    print '\n'.join(x[0] for x in g) + '\n'
</snippet></ROW><ROW><id>19639134</id><snippet>opener</snippet></ROW><ROW><id>19639134</id><snippet>openers = {
    'http': urllib2.urlopen,
    '.csv.gz': gzip.open
    '.csv': open
}

resource_type = get_resource_type(resource) # determine the type of the resource

with openers[resource_type](resource) as f:
    # do stuff ...
</snippet></ROW><ROW><id>19639224</id><snippet>import numpy
stream = p.open(format=FORMAT,channels=1,rate=SAMPLEFREQ,input=True,frames_per_buffer=FRAMESIZE)
data = stream.read(NOFFRAMES*FRAMESIZE)
decoded = numpy.fromstring(data, 'Float32');
</snippet></ROW><ROW><id>19639297</id><snippet>a</snippet></ROW><ROW><id>19639297</id><snippet>i</snippet></ROW><ROW><id>19639297</id><snippet>a</snippet></ROW><ROW><id>19639297</id><snippet>zip</snippet></ROW><ROW><id>19639297</id><snippet>links = soup.find_all('a')
links = [link for link in links
         if link["href"].startswith("http://www.conakat.com/map/?p=")]
zips = soup.find_all('i')

for l, z in zip(links, zips):
    f.writerow((l.contents[0], z.contents[0]))
</snippet></ROW><ROW><id>19639297</id><snippet>Name,ZipCodes
1ST ST,(43512)
E 1ST ST,(43512)
W 1ST ST,(43512)
2ND ST,(43512)
E 2ND ST,(43512)
W 2ND ST,(43512)
3 RIVERS CT,(43512)
3RD ST,(43512)
E 3RD ST,(43512)
...
</snippet></ROW><ROW><id>19639323</id><snippet>newshapeA = A.shape + (1,) * (N + 1 - A.ndim)
</snippet></ROW><ROW><id>19639536</id><snippet>d = {}
d.update({'a':1})
d.update({'b':2})
print d.keys()
</snippet></ROW><ROW><id>19639536</id><snippet>['a', 'b']
</snippet></ROW><ROW><id>19639536</id><snippet>print d.get('a','')
</snippet></ROW><ROW><id>19639536</id><snippet>for element in d.keys():
    print d.get(element,'')
</snippet></ROW><ROW><id>19639536</id><snippet>for element in d.keys():
    print d[element]
</snippet></ROW><ROW><id>19639670</id><snippet>python2.7
...
&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; id(True)
7744528
&gt;&gt;&gt; id(__builtin__.True)
7744528
&gt;&gt;&gt; True = 'abc'
&gt;&gt;&gt; id(True)
34386540544
</snippet></ROW><ROW><id>19639670</id><snippet>id</snippet></ROW><ROW><id>19639670</id><snippet>is</snippet></ROW><ROW><id>19639670</id><snippet>&gt;&gt;&gt; 1==1
True
&gt;&gt;&gt; id(1==1)
7744528
</snippet></ROW><ROW><id>19639670</id><snippet>True</snippet></ROW><ROW><id>19639670</id><snippet>__builtin__.True</snippet></ROW><ROW><id>19639670</id><snippet>__main__.True</snippet></ROW><ROW><id>19639670</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>19639670</id><snippet>__main__</snippet></ROW><ROW><id>19639670</id><snippet>&gt;&gt;&gt; True
'abc'
&gt;&gt;&gt; __builtin__.True
True
</snippet></ROW><ROW><id>19639670</id><snippet>&gt;&gt;&gt; import __main__
&gt;&gt;&gt; id(__main__.True)
34386540544
&gt;&gt;&gt; __main__.True
'abc'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19639670</id><snippet>def foo(list):
    ...
</snippet></ROW><ROW><id>19639670</id><snippet>list</snippet></ROW><ROW><id>19639670</id><snippet>foo</snippet></ROW><ROW><id>19639670</id><snippet>...</snippet></ROW><ROW><id>19639670</id><snippet>    x = list(y)
</snippet></ROW><ROW><id>19639670</id><snippet>__builtin__.list</snippet></ROW><ROW><id>19639670</id><snippet>import __builtin__</snippet></ROW><ROW><id>19639670</id><snippet>__builtin__</snippet></ROW><ROW><id>19639681</id><snippet>extra</snippet></ROW><ROW><id>19639681</id><snippet>CASE</snippet></ROW><ROW><id>19639681</id><snippet>start_month = 12
start_day = 31
end_month = 1
end_day = 1
query = (models.MyModel.objects.filter(Q(month=start_month, day=start_day) | 
                                       Q(month=end_month, day=end_day))
                       .extra(select={'order_me': '''CASE WHEN month*31+day &lt; %s*31+%s 
                                                          THEN (12+month)*31+day 
                                                          ELSE (month)*31+day
                                                   END''' % (start_month, start_day)})
                       .extra(order_by=['order_me']))
</snippet></ROW><ROW><id>19639681</id><snippet>order_me</snippet></ROW><ROW><id>19639681</id><snippet>Q(...)|Q(...)</snippet></ROW><ROW><id>19639681</id><snippet>query = (models.MyModel.objects.all()
                   .extra(select={'order_me': """CASE WHEN month*31+day &lt; %s*31+%s 
                                                    THEN (12+month)*31+day 
                                                    ELSE (month)*31+day
                                               END""" % (start_month, start_day) })
                   .extra(order_by=['order_me'])
                   .extra(where=['order_me &lt; (12 + %s) * 31 + %s' % (end_month,
                                                                     end_day)]))
</snippet></ROW><ROW><id>19640099</id><snippet>append</snippet></ROW><ROW><id>19640099</id><snippet>elements2 = elements0.append(elements1)
</snippet></ROW><ROW><id>19640099</id><snippet>elements2</snippet></ROW><ROW><id>19640099</id><snippet>None</snippet></ROW><ROW><id>19640099</id><snippet>elements0</snippet></ROW><ROW><id>19640099</id><snippet>elements1</snippet></ROW><ROW><id>19640099</id><snippet>elements0[0] -&gt; Paragraph("The Platypus0", styles['Heading1'])
elements0[1] -&gt; Paragraph("Very &lt;i&gt;Special&lt;/i&gt;!", styles['Normal'])
elements0[2] -&gt; [Paragraph("The Platypus1", styles['Heading1']), Paragraph("Very &lt;i&gt;Special&lt;/i&gt;!", styles['Normal'])
</snippet></ROW><ROW><id>19640099</id><snippet>elements2 = elements0 + elements1
</snippet></ROW><ROW><id>19640500</id><snippet>def search_func(lst, x):
    if len(lst) &lt;= 0:   # this is how you test if the list is empty
        return "failure"
    i = 0               # we'll use this as index to traverse the list
    while i &lt; len(lst): # this is how you test to see if the index is valid
        if lst[i] == x: # this is how you check the current element
            return "success"
        i += 1          # this is how you advance to the next element
    else:               # this executes only if the loop didn't find the element
        return "failure" 
</snippet></ROW><ROW><id>19640500</id><snippet>while</snippet></ROW><ROW><id>19640500</id><snippet>for</snippet></ROW><ROW><id>19640500</id><snippet>def search_func(lst, x):
    if not lst:    # shorter way to test if the list is empty
        return "failure"
    for e in lst:  # look how easy is to traverse the list!
        if e == x: # we no longer care about indexes
            return "success"
    else:
        return "failure" 
</snippet></ROW><ROW><id>19640500</id><snippet>in</snippet></ROW><ROW><id>19640500</id><snippet>def search_func(lst, x):
    if lst and x in lst: # test for emptiness and for membership
        return "success"
    else:
        return "failure"
</snippet></ROW><ROW><id>19640615</id><snippet>import itertools

A=[[1,2,3],
[4,5,6],
[7,8,9]]

for P in itertools.permutations(range(len(A))):
    print [A[p][i] for i,p in enumerate(P)]
</snippet></ROW><ROW><id>19640615</id><snippet>[1, 5, 9]
[1, 8, 6]
[4, 2, 9]
[4, 8, 3]
[7, 2, 6]
[7, 5, 3]
</snippet></ROW><ROW><id>19640673</id><snippet>patch</snippet></ROW><ROW><id>19640673</id><snippet>diff(repo, prev, node, opts=opts)</snippet></ROW><ROW><id>19640673</id><snippet>cmdutil.py</snippet></ROW><ROW><id>19640673</id><snippet>hg export</snippet></ROW><ROW><id>19640673</id><snippet>def export</snippet></ROW><ROW><id>19641086</id><snippet>xRand = (random.randint(yRand, (w - yrand) * 2))
                                               ^
</snippet></ROW><ROW><id>19641086</id><snippet>yRand</snippet></ROW><ROW><id>19641086</id><snippet>yrand</snippet></ROW><ROW><id>19641327</id><snippet>','.join(items)</snippet></ROW><ROW><id>19641337</id><snippet>def tree(head, stem):
    #for head
    for i in xrange(1, head+1, 2):
        print '{:^{}}'.format('*'*i, head)
    #for trunk
    for _ in xrange(3):
        print '{:^{}}'.format('*'*stem, head)
...         
&gt;&gt;&gt; tree(10, 3)
    *     
   ***    
  *****   
 *******  
********* 
   ***    
   ***    
   ***    
&gt;&gt;&gt; tree(5, 1)
  *  
 *** 
*****
  *  
  *  
  *  
</snippet></ROW><ROW><id>19641337</id><snippet>stem</snippet></ROW><ROW><id>19641337</id><snippet>head</snippet></ROW><ROW><id>19641337</id><snippet>def tree(head, stem):
    for i in xrange(1, head+1, 2):
        print ('*'*i).center(head)
    x = (head/2) if (head/2)%2 else (head/2)-1
    for _ in xrange(stem):
        print ('*'*x).center(head)

&gt;&gt;&gt; tree(12, 2)
     *      
    ***     
   *****    
  *******   
 *********  
*********** 
   *****    
   *****    
&gt;&gt;&gt; tree(14, 4)
      *       
     ***      
    *****     
   *******    
  *********   
 ***********  
************* 
   *******    
   *******    
   *******    
   *******    
</snippet></ROW><ROW><id>19641658</id><snippet>data:image/png;base64,</snippet></ROW><ROW><id>19641658</id><snippet>&gt;&gt;&gt; len(image_data)
223548
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.md5(image_data).hexdigest()
'03918c3508fef1286af8784dc65f23ff'
</snippet></ROW><ROW><id>19641658</id><snippet>data:</snippet></ROW><ROW><id>19641658</id><snippet>from urllib import unquote

if image_data.startswith('data:'):
    params, data = image_data.split(',', 1)
    params = params[5:] or 'text/plain;charset=US-ASCII'
    params = params.split(';')
    if not '=' in params[0] and '/' in params[0]:
        mimetype = params.pop(0)
    else:
        mimetype = 'text/plain'
    if 'base64' in params:
        # handle base64 parameters first
        data = data.decode('base64')
    for param in params:
        if param.startswith('charset='):
            # handle characterset parameter
            data = unquote(data).decode(param.split('=', 1)[-1])
</snippet></ROW><ROW><id>19641785</id><snippet>json</snippet></ROW><ROW><id>19641785</id><snippet>import json

return HttpResponse(json.dumps(option), content_type="application/json")
</snippet></ROW><ROW><id>19641785</id><snippet>$.ajax({
  dataType: "json",
  url: url,
  data: data,
  success: success
});
</snippet></ROW><ROW><id>19642021</id><snippet>mystring = input("Enter the sentence you wish to be an acronym: ")

mystring_length = len(mystring)

print(mystring[0] ,end="")

for i in range (1,mystring_length):
    if mystring[i].isupper():
        print(". " ,end="") 
        print(mystring[i],end="")
</snippet></ROW><ROW><id>19642272</id><snippet>j</snippet></ROW><ROW><id>19642272</id><snippet>from pylab import *

t = linspace(0.0, pi, 100)
x = cos(t)
y = sin(t)
figure(0)
subplot(111, autoscale_on=False, xlim=(-1.2, 1.2), ylim=(-.2, 1.2))

point,  = plot([x[0]], [y[0]], marker='o', mfc='r', ms=3)

for j in arange(len(t)):
    # reset x/y-data of point
    point.set_data(x[:j], y[:j])
    plt.pause(0.05)
    plt.draw() # redraw current figure
</snippet></ROW><ROW><id>19642648</id><snippet>str.splitlines</snippet></ROW><ROW><id>19642648</id><snippet>map</snippet></ROW><ROW><id>19642648</id><snippet>list comprehension</snippet></ROW><ROW><id>19642648</id><snippet>map</snippet></ROW><ROW><id>19642648</id><snippet>&gt;&gt;&gt; map(list, design.splitlines())
[['x', 'x', 'x'], ['y', 'x', 'x'], ['x', 'y', 'x']]
</snippet></ROW><ROW><id>19642648</id><snippet>&gt;&gt;&gt; [list(x) for x in  design.splitlines()]
[['x', 'x', 'x'], ['y', 'x', 'x'], ['x', 'y', 'x']]
</snippet></ROW><ROW><id>19643145</id><snippet>sorted_by_length = sorted(list_,
                         key=lambda x: (x[0], len(x[1]), float(x[1])))
</snippet></ROW><ROW><id>19643145</id><snippet>In [1]: list_ = [(1, '0101'), (1, '1010'), (1, '101'), (2, '01'), (2, '010'), (2, '10')]

In [2]: sorted_by_length = sorted(list_,
                         key=lambda x: (x[0], len(x[1]), float(x[1])))
   ...: 
In [3]: sorted_by_length
Out[3]: [(1, '101'), (1, '0101'), (1, '1010'), (2, '01'), (2, '10'), (2, '010')]
</snippet></ROW><ROW><id>19643145</id><snippet>int</snippet></ROW><ROW><id>19643145</id><snippet>int(x, 2)</snippet></ROW><ROW><id>19643145</id><snippet>float(x)</snippet></ROW><ROW><id>19643145</id><snippet>int(x)</snippet></ROW><ROW><id>19643903</id><snippet>iterable</snippet></ROW><ROW><id>19643903</id><snippet>__getitem__()</snippet></ROW><ROW><id>19643903</id><snippet>len()</snippet></ROW><ROW><id>19643903</id><snippet>__getitem__</snippet></ROW><ROW><id>19643903</id><snippet>__len__</snippet></ROW><ROW><id>19643903</id><snippet>sequence</snippet></ROW><ROW><id>19643903</id><snippet>sequences</snippet></ROW><ROW><id>19643903</id><snippet>str</snippet></ROW><ROW><id>19643903</id><snippet>unicode</snippet></ROW><ROW><id>19643903</id><snippet>list</snippet></ROW><ROW><id>19643903</id><snippet>tuple</snippet></ROW><ROW><id>19643903</id><snippet>bytearray</snippet></ROW><ROW><id>19643903</id><snippet>buffer</snippet></ROW><ROW><id>19643903</id><snippet>xrange</snippet></ROW><ROW><id>19643903</id><snippet>container
    Has a __contains__ method

generator
    A function which returns an iterator.

iterable
    An object with an __iter__() or __getitem__() method. Examples of
    iterables include all sequence types (such as list, str, and
    tuple) and some non-sequence types like dict and file. When an
    iterable object is passed as an argument to the builtin function
    iter(), it returns an iterator for the object. This iterator is
    good for one pass over the set of values.

iterator
    An iterable which has a next() method.  Iterators are required to
    have an __iter__() method that returns the iterator object
    itself. An iterator is good for one pass over the set of values.

sequence
    An iterable which supports efficient element access using integer
    indices via the __getitem__() special method and defines a len()
    method that returns the length of the sequence. Note that dict
    also supports __getitem__() and __len__(), but is considered a
    mapping rather than a sequence because the lookups use arbitrary
    immutable keys rather than integers.  sequences are orderable
    iterables.

    deque is a sequence, but collections.Sequence does not recognize
    deque as a sequence.
    &gt;&gt;&gt; isinstance(collections.deque(), collections.Sequence)
    False
</snippet></ROW><ROW><id>19643999</id><snippet>import pythoncom
import win32com.client as wc
from win32com.axcontrol import axcontrol
import win32com.server as ws
from win32com.server import util
from win32com.server.exception import COMException
import winerror
import pywintypes

# Windows Media Player Custom Interface IWMPRemoteMediaServices
IWMPRemoteMediaServices = pywintypes.IID("{CBB92747-741F-44FE-AB5B-F1A48F3B2A59}")

class OleClientSite:
    _public_methods_ = [ 'SaveObject', 'GetMoniker', 'GetContainer', 'ShowObject', 'OnShowWindow', 'RequestNewObjectLayout', 'QueryService' ]
    _com_interfaces_ = [ axcontrol.IID_IOleClientSite, pythoncom.IID_IServiceProvider ]

    def SaveObject(self):
        print("SaveObject")
        raise COMException(hresult=winerror.E_NOTIMPL)

    def GetMoniker(self, dwAssign, dwWhichMoniker):
        print("GetMoniker ")
        raise COMException(hresult=winerror.E_NOTIMPL)

    def GetContainer(self):
        print("GetContainer")
        raise COMException(hresult=winerror.E_NOTIMPL)

    def ShowObject(self):
        print("ShowObject")
        raise COMException(hresult=winerror.E_NOTIMPL)

    def OnShowWindow(self, fShow):
        print("ShowObject" + str(fShow))
        raise COMException(hresult=winerror.E_NOTIMPL)

    def RequestNewObjectLayout(self):
        print("RequestNewObjectLayout")
        raise COMException(hresult=winerror.E_NOTIMPL)

    def QueryService(self, guidService, riid):
        print("QueryService",guidService,riid)
        if riid == IWMPRemoteMediaServices:
            print("Known Requested IID, but can't implement!")
            raise COMException(hresult=winerror.E_NOINTERFACE)
        else:
            print("Requested IID is not IWMPRemoteMediaServices" )
            raise COMException(hresult=winerror.E_NOINTERFACE)


if __name__=='__main__':
    wmp = wc.Dispatch("WMPlayer.OCX")
    IOO = wmp._oleobj_.QueryInterface(axcontrol.IID_IOleObject)
    pyOCS = OleClientSite()
    comOCS = ws.util.wrap(pyOCS, axcontrol.IID_IOleClientSite)
    IOO.SetClientSite(comOCS)
</snippet></ROW><ROW><id>19644196</id><snippet>import itertools
firms = [Firm_loc('Firm_type_0') for i in range(5)]
other_firms = [Firm_loc('Firm_type_1') for i in range(5)]
distances = [i.distance(j) for i, j in itertools.product(firms, other_firms)]
</snippet></ROW><ROW><id>19644196</id><snippet>product</snippet></ROW><ROW><id>19644623</id><snippet>def advance(stringlist):
    return stringlist[1:] + stringlist[:1]
</snippet></ROW><ROW><id>19644623</id><snippet>&gt;&gt;&gt; def advance(stringlist):
...     return stringlist[1:] + stringlist[:1]
... 
&gt;&gt;&gt; advance(['cooking', 'homework', 'laundry', 'cleaning'])
['homework', 'laundry', 'cleaning', 'cooking']
</snippet></ROW><ROW><id>19644623</id><snippet>stringlist[1:]</snippet></ROW><ROW><id>19644623</id><snippet>return</snippet></ROW><ROW><id>19644653</id><snippet>lxml.etree.parse</snippet></ROW><ROW><id>19644653</id><snippet>ElementTree</snippet></ROW><ROW><id>19644653</id><snippet>Element</snippet></ROW><ROW><id>19644653</id><snippet>ElementTree.getroot()</snippet></ROW><ROW><id>19644653</id><snippet>xml_doc = lxml.etree.parse(StringIO.StringIO(r.content))
xml_dict = recursive_dict(xml_doc.getroot())
</snippet></ROW><ROW><id>19644653</id><snippet>recursive_dict</snippet></ROW><ROW><id>19644653</id><snippet>def recursive_dict(element):
    retval = {}
    retval["tag"] = element.tag
    if element.text:
        retval["text"] = element.text

    if element.tail:
        retval["tail"] = element.tail

    if element.attrib:
        retval["attributes"] = element.attrib

    if len(element) &gt; 0:
        retval["children"] = [recursive_dict(child_element) for child_element in element]

    return retval
</snippet></ROW><ROW><id>19644812</id><snippet>letterlist = {lt for wd in wordlist for lt in wd}
</snippet></ROW><ROW><id>19644812</id><snippet>set()</snippet></ROW><ROW><id>19644812</id><snippet>letterlist = set(lt for wd in wordlist for lt in wd)
</snippet></ROW><ROW><id>19644812</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>19644812</id><snippet>from itertools import chain
letterlist = set(chain.from_iterable(wordlist))
</snippet></ROW><ROW><id>19644952</id><snippet>from base import Base</snippet></ROW><ROW><id>19644952</id><snippet>base</snippet></ROW><ROW><id>19644952</id><snippet>model.base</snippet></ROW><ROW><id>19644952</id><snippet>from .base import Base
</snippet></ROW><ROW><id>19644952</id><snippet>.</snippet></ROW><ROW><id>19644952</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>19644952</id><snippet>from future</snippet></ROW><ROW><id>19645086</id><snippet>rows = ['Date,Open,High,Low,Close,Volume,Adj Close', '2012-11-30,691.31,699.22,685.69,698.37,3163600,698.37', '2012-11-29,687.78,693.90,682.00,691.89,2776500,691.89','2012-11-28,668.01,684.91,663.89,683.67,3042000,683.67', '2012-11-27,660.17,675.00,658.00,670.71,2508700,670.71']

def format_rows(rows, gap):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    for row in split_rows:
        col_lengths = zip(row, column_lengths)
        print ''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths)
        # Prints out the data, making sure there's a minimum of "gap" spaces 
        # between each column
</snippet></ROW><ROW><id>19645086</id><snippet>format_rows(rows, 4)</snippet></ROW><ROW><id>19645086</id><snippet>Date          Open      High      Low       Close     Volume     Adj Close
2012-11-30    691.31    699.22    685.69    698.37    3163600    698.37
2012-11-29    687.78    693.90    682.00    691.89    2776500    691.89
2012-11-28    668.01    684.91    663.89    683.67    3042000    683.67
2012-11-27    660.17    675.00    658.00    670.71    2508700    670.71
</snippet></ROW><ROW><id>19645086</id><snippet>def format_rows(rows, gap):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    output = []
    for row in split_rows:
        col_lengths = zip(row, column_lengths)
        output.append(''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths))
    return '\n'.join(output)
</snippet></ROW><ROW><id>19645086</id><snippet>n</snippet></ROW><ROW><id>19645086</id><snippet>format_rows(rows, 4, 5)</snippet></ROW><ROW><id>19645086</id><snippet>def format_rows(rows, gap, limit):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    for row in split_rows:
        col_lengths = zip(row, column_lengths)[:limit]
        # Prints out only the first `limit` columns

        print ''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths)
        # Prints out the data, making sure there's a minimum of "gap" spaces 
        # between each column
</snippet></ROW><ROW><id>19645147</id><snippet>{{ form.question(value=q.question) }}
</snippet></ROW><ROW><id>19645350</id><snippet>def train(....)</snippet></ROW><ROW><id>19645350</id><snippet>str</snippet></ROW><ROW><id>19645350</id><snippet>train = input(...)</snippet></ROW><ROW><id>19645350</id><snippet>TypeError: 'str' object is not callable</snippet></ROW><ROW><id>19645350</id><snippet>input</snippet></ROW><ROW><id>19645350</id><snippet>if</snippet></ROW><ROW><id>19645350</id><snippet>energy &lt;= 0</snippet></ROW><ROW><id>19645350</id><snippet>return</snippet></ROW><ROW><id>19645350</id><snippet>else</snippet></ROW><ROW><id>19645438</id><snippet>else:
    db.close()
</snippet></ROW><ROW><id>19645438</id><snippet>try</snippet></ROW><ROW><id>19645673</id><snippet>['text' + str(i) + '.txt' for i in range(19, 22)]
</snippet></ROW><ROW><id>19645673</id><snippet>['test19.txt', 'test20.txt', 'test21.txt']
</snippet></ROW><ROW><id>19645673</id><snippet>words</snippet></ROW><ROW><id>19645673</id><snippet>r = ['text' + str(i) + '.txt' for i in range(19, 22)]
[x for x in words if x in r]
</snippet></ROW><ROW><id>19645673</id><snippet>re.compile('|'.join(['text' + str(i) + '.txt' for i in range(19, 22)]))
</snippet></ROW><ROW><id>19646112</id><snippet>import matplotlib.pyplot as plt   
from matplotlib.patches import Circle


xData=[5000,10000,20000, 15000]
yData=[20000,10000,5000, 15000]
radius_in_pixels=[100,200,100, 1000] # Circle takes radius as an argument. You could convert from area. 


fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')

for x, y, r in zip(xData, yData, radius_in_pixels):
    ax.add_artist(Circle(xy=(x, y), radius = r))      

plt.xlim(0, max(xData) + 200)
plt.ylim(0, max(yData) + 200)
plt.show()
</snippet></ROW><ROW><id>19646140</id><snippet>Show</snippet></ROW><ROW><id>19646140</id><snippet>    show = db.relationship('Show', backref=db.backref('episodes', lazy='dynamic'), cascade=None)
</snippet></ROW><ROW><id>19646140</id><snippet>None</snippet></ROW><ROW><id>19646140</id><snippet>False</snippet></ROW><ROW><id>19646140</id><snippet>ep = Episode.query.filter(Episode.show_id == 139).filter(Episode.season == 39).filter(Episode.episode == 1).first()
if ep:
    # update
else:
    # create new
</snippet></ROW><ROW><id>19646227</id><snippet>freq</snippet></ROW><ROW><id>19646227</id><snippet>freq</snippet></ROW><ROW><id>19646227</id><snippet>freq</snippet></ROW><ROW><id>19646227</id><snippet>decrypt</snippet></ROW><ROW><id>19646227</id><snippet>def decrypt():

    # we don't need the zero start value, that's the default
    # test all possible shifts
    for i in range(27):

        # initialize the array
        freqlist = []

        # shift all the letters in the input
        for a in inpt:
            b = ord(a)
            b -= i
            if b &gt; ord("Z"):
                b -= 26
            elif b &lt; ord("A"):
                b+=26
            freqlist.append(b)

        # now put the shifted letters back together
        shifted = ""
        for a in freqlist:
           d = chr(a)
           # append the shifted letter onto our output
           shifted += d

        # after we put the decrypted string back together, print it
        # note this is outside the letter loops, 
        # but still inside the possible shifts loop
        # thus printing all possible shifts for the given message
        print(d)
</snippet></ROW><ROW><id>19646241</id><snippet>session.query(ParentChild).join(ParentChild.children).join(Child.appointments)
</snippet></ROW><ROW><id>19646241</id><snippet>session.query(ParentChild).join(Child).join(ChildAppointment)
</snippet></ROW><ROW><id>19646241</id><snippet>Child.appointments.date_appointment
</snippet></ROW><ROW><id>19646241</id><snippet>ChildAppointment.date_appointment
</snippet></ROW><ROW><id>19646241</id><snippet>ChildAppointment</snippet></ROW><ROW><id>19646241</id><snippet>Child</snippet></ROW><ROW><id>19646241</id><snippet>ParentChild</snippet></ROW><ROW><id>19646241</id><snippet>join</snippet></ROW><ROW><id>19646241</id><snippet>session.query(ParentChild).join(ParentChild.children).join(Child.appointments).filter(ParentChild.parent_id == 1).order_by(ChildAppointment.date_appointment.desc()).all():
</snippet></ROW><ROW><id>19646268</id><snippet>importlib</snippet></ROW><ROW><id>19646268</id><snippet>getattr()</snippet></ROW><ROW><id>19646268</id><snippet>import importlib

def aFunctionImportingAndCallingAnotherFunction(functionName, args):
    module = importlib.import_module(packageString)
    func = getattr(module, functionname)
    return func(*args)
</snippet></ROW><ROW><id>19646274</id><snippet>session.bind.dialect.name
</snippet></ROW><ROW><id>19646274</id><snippet>sqlite</snippet></ROW><ROW><id>19646274</id><snippet>mysql</snippet></ROW><ROW><id>19646274</id><snippet>mysql://...</snippet></ROW><ROW><id>19646274</id><snippet>dialect</snippet></ROW><ROW><id>19646274</id><snippet>engine</snippet></ROW><ROW><id>19646274</id><snippet>connection</snippet></ROW><ROW><id>19646274</id><snippet>bind</snippet></ROW><ROW><id>19646398</id><snippet>with</snippet></ROW><ROW><id>19646398</id><snippet>with</snippet></ROW><ROW><id>19646398</id><snippet>"dir\notUsed.txt"</snippet></ROW><ROW><id>19646398</id><snippet>"dir\\notUsed.txt"</snippet></ROW><ROW><id>19646398</id><snippet>r"dir\notUsed.txt"</snippet></ROW><ROW><id>19646398</id><snippet>"\n"</snippet></ROW><ROW><id>19646398</id><snippet>ur"dir\notUsed.txt"</snippet></ROW><ROW><id>19646398</id><snippet>set</snippet></ROW><ROW><id>19646398</id><snippet>not_used_path = ur"dir\sNotUsed.txt"
with open(not_used_path) as not_used_file:
    not_used_set = set([line.strip() for line in not_used_file])
</snippet></ROW><ROW><id>19646398</id><snippet>pattern = re.compile(r"\w/([\w\-]+)")
</snippet></ROW><ROW><id>19646398</id><snippet>os.listdir()</snippet></ROW><ROW><id>19646398</id><snippet>'C:\Users\xxx\Desktop\dir'</snippet></ROW><ROW><id>19646398</id><snippet>os.listdir()</snippet></ROW><ROW><id>19646398</id><snippet>open(files, "r+")</snippet></ROW><ROW><id>19646398</id><snippet>os.path.join()</snippet></ROW><ROW><id>19646398</id><snippet>desktop_dir = r'C:\Users\xxx\Desktop\dir'
for filename in os.listdir(desktop_dir):
    desktop_path = os.path.join(desktop_dir, filename)
</snippet></ROW><ROW><id>19646398</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>19646398</id><snippet>desktop_dir = r'C:\Users\xxx\Desktop\dir'
for filename in os.listdir(desktop_dir):
    if os.path.splitext(filename)[1].lower() != '.xml':
        continue
    desktop_path = os.path.join(desktop_dir, filename)
</snippet></ROW><ROW><id>19646398</id><snippet>desktop_dir = r'C:\Users\xxx\Desktop\dir'
xml_list = [os.path.join(desktop_dir, filename)
            for filename in os.listdir(desktop_dir)
            if os.path.splitext(filename)[1].lower() == '.xml']
</snippet></ROW><ROW><id>19646398</id><snippet>for xml_path in xml_list:
    with codecs.open(xml_path, "r", encoding="UTF-8") as xml_file:
        content = xml_file.read()
</snippet></ROW><ROW><id>19646398</id><snippet>content</snippet></ROW><ROW><id>19646398</id><snippet>for xml_path in xml_list:
    with codecs.open(xml_path, "r", encoding="UTF-8") as xml_file:
        content = xml_file.read()
    actual_set = set(pattern.findall(content))
    print(not_used_set &amp; actual_set)
</snippet></ROW><ROW><id>19646409</id><snippet>import re

data = """group Head:
  data1: abc         data2: def
  2word data3: ghi   data4: jkl
  data3: mno         three word data4: pqr stu"""

for l in data.split('\n'):
    print [ x.split(':') for x in re.split('\s\s+', l) if x ] 
</snippet></ROW><ROW><id>19646409</id><snippet>[['group Head', '']]
[['data1', ' abc'], ['data2', ' def']]
[['2word data3', ' ghi'], ['data4', ' jkl']]
[['data3', ' mno'], ['three word data4', ' pqr stu']]
</snippet></ROW><ROW><id>19646604</id><snippet>if keywords.index(chosenKey) == definitions.index(chosenKey):
</snippet></ROW><ROW><id>19646604</id><snippet>if chosenKey in keywords:
    answers.append(definitions[keywords.index(chosenKey)])
else:
    pass
</snippet></ROW><ROW><id>19646604</id><snippet>wrongAnswers = random.sample(define,2)
while definitions[keywords.index(chosenKey)] not in wrongAnswers:        
    wrongAnswers = random.sample(define,2)
answers = wrongAnswers
print(answers)
</snippet></ROW><ROW><id>19646666</id><snippet>rights</snippet></ROW><ROW><id>19646666</id><snippet>doi</snippet></ROW><ROW><id>19646666</id><snippet>date</snippet></ROW><ROW><id>19646666</id><snippet>getElementsByTagName</snippet></ROW><ROW><id>19646666</id><snippet>doi</snippet></ROW><ROW><id>19646666</id><snippet>doi[1]</snippet></ROW><ROW><id>19646666</id><snippet>try-catch</snippet></ROW><ROW><id>19646790</id><snippet>end_pos = source.find(char, start)
output.append(source[start_pos:end_pos])
</snippet></ROW><ROW><id>19646790</id><snippet>output.append(source[end_pos+1:];
</snippet></ROW><ROW><id>19646809</id><snippet>int(raw_input())</snippet></ROW><ROW><id>19646809</id><snippet>ValueError exception</snippet></ROW><ROW><id>19646809</id><snippet>while True:
    i1 = raw_input("Enter in the value for red: ")
    i2 = raw_input("Enter in the value for green: ")
    i3 = raw_input("Enter in the value for blue: ")
    if ((i1 == "quit") or (i2 == "quit") or (i3 == "quit")):
        break
    r = int(i1)
    g = int(i2)
    b = int(i3)
    result = Brightness(r,g,b)
    print result

result = Brightness(r,g,b)
</snippet></ROW><ROW><id>19646809</id><snippet>result = Brightness(r,g,b)</snippet></ROW><ROW><id>19646825</id><snippet>#!/usr/bin/python
import csv
def printresults(results):
    print ("Information Requested:\n" + results)

file = open("/tmp/csvfile.txt", "r")
reader = csv.DictReader(file, skipinitialspace=True, dialect='excel', delimiter=',')

totalfields = (len(reader.fieldnames))
result={}

for row in reader:
    resultfields = ""
    for i in range(1,totalfields):
        resultfields = resultfields + reader.fieldnames[i] + ": " + row[reader.fieldnames[i]] + "\n"
    result[row['id']] = resultfields

idvalues = ["exit", "4"]
while 1:
    idvalue = idvalues.pop() #eg.enterbox(msg=message,title='Print Results', default='', strip=True)                               

    if idvalue == "":
        message = "Enter id Number"

    elif idvalue =="exit":
        print "done"
        exit()

    else:
        message = result[idvalue]
        print(message)
</snippet></ROW><ROW><id>19646825</id><snippet>name: mike
age: 26

done
</snippet></ROW><ROW><id>19647064</id><snippet>def _valor_carrinho(self):
    return self.item_set.all().aggregate(Sum('total_price'))
</snippet></ROW><ROW><id>19647064</id><snippet>Cart</snippet></ROW><ROW><id>19647064</id><snippet>total_price</snippet></ROW><ROW><id>19647064</id><snippet>item_set</snippet></ROW><ROW><id>19647158</id><snippet>"a-b-c-d".rsplit('-',1)

&gt;&gt;&gt; ['a-b-c', 'd']
</snippet></ROW><ROW><id>19647158</id><snippet>items = '- //components/rel/bt.wcnss/2.4/wcnss_proc/bt/platform/rom/inc/oi_sbc_tables-generated.h#1 - branch change 700801 (text)'
answer = items.rsplit('-',1);
k.append(answer[0].strip() + '\n')
# print answer[0].strip()
</snippet></ROW><ROW><id>19647226</id><snippet>self</snippet></ROW><ROW><id>19647226</id><snippet>import Tkinter


class Application(Tkinter.Frame):
    def __init__(self, master):
        Tkinter.Frame.__init__(self, master)
        self.master.minsize(width=256, height=256)
        self.master.config()
        self.pack()

        self.main_frame = Tkinter.Frame()

        self.some_list = [
            'One',
            'Two',
            'Three',
            'Four'
        ]

        self.some_listbox = Tkinter.Listbox(self.main_frame)

        # bind the selection event to a custom function
        # Note the absence of parentheses because it's a callback function
        self.some_listbox.bind('&lt;&lt;ListboxSelect&gt;&gt;', self.listbox_changed)
        self.some_listbox.pack(fill='both', expand=True)
        self.main_frame.pack(fill='both', expand=True)

        # insert our items into the list box
        for i, item in enumerate(self.some_list):
            self.some_listbox.insert(i, item)

        # make a label to show the selected item
        self.some_label = Tkinter.Label(self.main_frame, text="Welcome to SO!")
        self.some_label.pack(side='top')

        # not really necessary, just make things look nice and centered
        self.main_frame.place(in_=self.master, anchor='c', relx=.5, rely=.5)

    def listbox_changed(self, *args, **kwargs):
        selection_index = self.some_listbox.curselection()
        selection_text = self.some_listbox.get(selection_index, selection_index)
        self.some_label.config(text=selection_text)

root = Tkinter.Tk()
app = Application(root)
app.mainloop()
</snippet></ROW><ROW><id>19647242</id><snippet>my_field</snippet></ROW><ROW><id>19647242</id><snippet>MyModelInline</snippet></ROW><ROW><id>19647242</id><snippet>readonly_fields</snippet></ROW><ROW><id>19647242</id><snippet>fields = ('my_field',)
readonly_fields = ('my_field',)
</snippet></ROW><ROW><id>19647294</id><snippet>bin</snippet></ROW><ROW><id>19647294</id><snippet>value = 53
for relay in range(8):
    print 'Relay{} = {}'.format(relay + 1, 2**relay &amp; value)
</snippet></ROW><ROW><id>19647294</id><snippet>Relay1 = 1
Relay2 = 0
Relay3 = 4
Relay4 = 0
Relay5 = 16
Relay6 = 32
Relay7 = 0
Relay8 = 0
</snippet></ROW><ROW><id>19647294</id><snippet>&amp;</snippet></ROW><ROW><id>19647294</id><snippet>&amp;</snippet></ROW><ROW><id>19647294</id><snippet> 53 = 00110101
--------------
  1 = 00000001   --&amp;-&gt; 00000001  # the 1's place lined up, so you get it back
  2 = 00000010   --&amp;-&gt; 00000000  # nothing at the 2's in the key
  4 = 00000100   --&amp;-&gt; 00000100  # 4's place lines up
     ... and so on.
</snippet></ROW><ROW><id>19647294</id><snippet>for key in range(256):
    print '&lt;map key="{}"&gt;'.format(key)
    for relay in range(8):
        print '    &lt;update state="Relay{}" type="boolean"&gt;{}&lt;/update&gt;'.format(
                relay + 1, 'On' if key &amp; 2**relay else 'Off')
    print '&lt;/map&gt;'
</snippet></ROW><ROW><id>19647294</id><snippet>1 &gt;&gt; relay</snippet></ROW><ROW><id>19647325</id><snippet>yscrollcommand=scroll.set</snippet></ROW><ROW><id>19647325</id><snippet>scroll.config(command=eula.yview)</snippet></ROW><ROW><id>19647325</id><snippet>#Import Tkinter
from Tkinter import *
#define master
master = Tk()
#Vertical (y) Scroll Bar
scroll = Scrollbar(master)
scroll.pack(side=RIGHT, fill=Y)
#Text Widget
eula = Text(master, wrap=NONE, yscrollcommand=scroll.set)
eula.insert("1.0", "text")
eula.pack(side="left")
#Configure the scrollbars
scroll.config(command=eula.yview)
mainloop()
</snippet></ROW><ROW><id>19647325</id><snippet>#Import Tkinter
from Tkinter import *
#define master
master = Tk()

#Horizontal (x) Scroll bar
xscrollbar = Scrollbar(master, orient=HORIZONTAL)
xscrollbar.pack(side=BOTTOM, fill=X)
#Vertical (y) Scroll Bar
yscrollbar = Scrollbar(master)
yscrollbar.pack(side=RIGHT, fill=Y)

#Text Widget
text = Text(master, wrap=NONE,
            xscrollcommand=xscrollbar.set,
            yscrollcommand=yscrollbar.set)
text.pack()

#Configure the scrollbars
xscrollbar.config(command=text.xview)
yscrollbar.config(command=text.yview)
#Run tkinter main loop
mainloop()
</snippet></ROW><ROW><id>19647389</id><snippet>[^ \t\r\n]+</snippet></ROW><ROW><id>19647389</id><snippet>[^\r\n]+</snippet></ROW><ROW><id>19647389</id><snippet>[ \t\r\n]*(?P&lt;from&gt;.*?[^ \t\r\n])[ \t\r\n]*'</snippet></ROW><ROW><id>19647389</id><snippet>strip</snippet></ROW><ROW><id>19647389</id><snippet>''</snippet></ROW><ROW><id>19647389</id><snippet>\Z</snippet></ROW><ROW><id>19647389</id><snippet>import re


emailsString = (u'     From:\n'
                '     Lastname, Firstname\n'
                '     Sent:\n'
                '     Monday, June 24, 2013 1:48 PM\n'
                '     To:\n'
                '     Othername, Name\n'
                '     Subject:\n'
                '     RE: Center update\n'
                '    Message message message.\n'
                '    Such a lovely message\n'
                '    Take care,\n'
                '    Firstname Lastname, MS\n'
                '     Long signature\n'
                '     in this email\n'
                '   \n'
                '    E-mail:\n'
                '     email@email.com\n'
                '     Web\n'
                '     my blog\n'
                '     From:\n'
                '     Lastname, Firstname\n'
                '     Sent:\n'
                '     Monday, June 24, 2013 9:33 AM\n'
                '     To:\n'
                '     Othername, Name\n'
                '     Subject:\n'
                '     Center update\n'
                '     Importance:\n'
                '     High\n'
                '    Good Morning Name,\n'
                '    I hope this finds you doing well.\n'
                '    I wanted to inform you of some changes. The Center will be closing August 30\n'
                '     th\n'
                '     .  or September 1\n'
                '     st\n'
                '     .  I\u2019ve enjoyed my experience. ')


allEmailsString = '''
From: FirstLastname, FirstFirstname
Sent: Monday, July 15th, 2011, 9:36 AM
To: TheOne
Subject: blah
Importance: High

Message message message
second line of message

second para of message

From: MidLastname, MidFirstname
Sent: Thursday, July 18th, 2011, 10:45 AM
To: TWOTWO
Subject: once upon



From: LastLastname, LastFirstname
Sent: Saturday, July 20th, 2011, 12:51 AM
To: Mr Three
Subject: blobloblo

Nothing to say. '''



dispat = ("*  from: {from}\n"
          "*  to: {to}\n"
          "*  date: {date}\n"
          "*  subject: {subject}\n"
          "** message (beginning on next line):\n{message}\n"
          "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-")



regx = re.compile('From:[ \t\r\n]*(?P&lt;from&gt;.*?[^ \t\r\n])'
                  '[ \t\r\n]*'
                  'Sent:[ \t\r\n]*'
                  '(?P&lt;date&gt;.*?(?:Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day.*?[^ \t\r\n])'
                  '[ \t\r\n]*'
                  'To:[ \t\r\n]*(?P&lt;to&gt;.*?[^ \t\r\n])'
                  '[ \t\r\n]*'
                  'Subject:[ \t\r\n]*(?P&lt;subject&gt;[^\r\n]+)'
                  '[ \t\r\n]*'
                  '(?:Importance:[ \t\r\n]*(?P&lt;importance&gt;[^ \t\r\n]+))?'
                  '[ \t\r\n]*'
                  '(?P&lt;message&gt;.*?)'
                  '(?=[ \t\r\n]*From:.*?'
                  'Sent:.*?(?:Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day.*?'
                  'To.*?Subject:|\Z)',
                  re.DOTALL)


for s in (emailsString,allEmailsString):
    print ''.join(dispat.format(**d)
                  for d in (ma.groupdict('') for ma in regx.finditer(s)))
    print '\n#######################################\n'
</snippet></ROW><ROW><id>19647389</id><snippet>*  from: Lastname, Firstname
*  to: Othername, Name
*  date: Monday, June 24, 2013 1:48 PM
*  subject: RE: Center update
** message (beginning on next line):
Message message message.
    Such a lovely message
    Take care,
    Firstname Lastname, MS
     Long signature
     in this email

    E-mail:
     email@email.com
     Web
     my blog
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*  from: Lastname, Firstname
*  to: Othername, Name
*  date: Monday, June 24, 2013 9:33 AM
*  subject: Center update
** message (beginning on next line):
Good Morning Name,
    I hope this finds you doing well.
    I wanted to inform you of some changes. The Center will be closing August 30
     th
     .  or September 1
     st
     .  I\u2019ve enjoyed my experience. 
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#######################################

*  from: FirstLastname, FirstFirstname
*  to: TheOne
*  date: Monday, July 15th, 2011, 9:36 AM
*  subject: blah
** message (beginning on next line):
Message message message
second line of message

second para of message
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*  from: MidLastname, MidFirstname
*  to: TWOTWO
*  date: Thursday, July 18th, 2011, 10:45 AM
*  subject: once upon
** message (beginning on next line):

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*  from: LastLastname, LastFirstname
*  to: Mr Three
*  date: Saturday, July 20th, 2011, 12:51 AM
*  subject: blobloblo
** message (beginning on next line):
Nothing to say. 
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

#######################################
</snippet></ROW><ROW><id>19647414</id><snippet>numpy.append</snippet></ROW><ROW><id>19647414</id><snippet>numpy.append</snippet></ROW><ROW><id>19647414</id><snippet>import numpy

old = numpy.array([1, 2, 3, 4])
new = numpy.append(old, 5)
print old
# [1, 2, 3, 4]
print new
# [1, 2, 3, 4, 5]
new = numpy.append(new, [6, 7])
print new
# [1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>19647414</id><snippet>result = numpy.zeros((10,))
result[0:2] = [1, 2]

# Or
result = numpy.zeros((10, 2))
result[0, :] = [1, 2]
</snippet></ROW><ROW><id>19647414</id><snippet>import numpy as np

a = np.array([0., 1.])
b = np.array([2., 3.])

temp = []
while True:
    rnd = random.randint(0, 100)
    if rnd &gt; 50:
        temp.append(a)
    else:
        temp.append(b)
    if rnd == 0:
         break

 result = np.array(temp)
</snippet></ROW><ROW><id>19647414</id><snippet>np.append(a, b)</snippet></ROW><ROW><id>19647414</id><snippet>a</snippet></ROW><ROW><id>19647414</id><snippet>b</snippet></ROW><ROW><id>19647508</id><snippet>import re

def matchCity(city_name):
    if re.search('kyo|par|omba', city_name):
        print "{} is a valid city name".format(city_name)

matchCity('tokyo') # tokyo is a valid city name
matchCity('paris') # paris is a valid city name
matchCity('bombay') # bombay is a valid city name
matchCity('chicago') # Doesn't print anything
</snippet></ROW><ROW><id>19647633</id><snippet>access_token_method</snippet></ROW><ROW><id>19647633</id><snippet>'GET'</snippet></ROW><ROW><id>19647633</id><snippet>remote_app()</snippet></ROW><ROW><id>19647633</id><snippet>twitter = oauth.remote_app(
    'twitter',
    consumer_key='xBeXxg9lyElUgwZT6AZ0A',
    consumer_secret='aawnSpNTOVuDCjx7HMh6uSXetjNN8zWLpZwCEU4LBrk',
    base_url='https://api.twitter.com/1.1/',
    request_token_url='https://api.twitter.com/oauth/request_token',
    access_token_url='https://api.twitter.com/oauth/access_token',
    authorize_url='https://api.twitter.com/oauth/authenticate',
    access_token_method = 'GET' # &lt;--- add this line
)
</snippet></ROW><ROW><id>19647642</id><snippet>enumerate</snippet></ROW><ROW><id>19647642</id><snippet>for i, key in enumerate(DBDICT):
    numList = []
    for value in DBDICT[key]:
        numList.append(float(value))
    ws.write(i, 0, key.lat)
    ws.write(i, 1, key.lon)
    for j in range(len(numList)):
        ws.write(i, (j+2), numList[j])
</snippet></ROW><ROW><id>19647642</id><snippet>for i, key in enumerate(DBDICT):
    ws.write(i, 0, key.lat)
    ws.write(i, 1, key.lon)
    for j, val in enumerate(DBDICT[key]):
        ws.write(i, j+2, float(val))
</snippet></ROW><ROW><id>19647673</id><snippet>'a'</snippet></ROW><ROW><id>19647673</id><snippet>(date, time)</snippet></ROW><ROW><id>19647673</id><snippet>from collections import defaultdict
from datetime import datetime
import csv
import glob
import os

# data structure is data[source][date, time][sensor] = value, with "" as default value
data = defaultdict(lambda: defaultdict(lambda: defaultdict(str)))
sensors = []

filelist = glob.glob("*.csv")

# read old files
for fn in filelist:
    sensor = os.path.splitext(fn)[0]
    sensors.append(sensor)
    with open(fn, 'rb') as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            date = datetime.strptime(row['date'], '%m/%d/%y')
            data[row['source']][date, row['hour']][sensor] = row['values']

sensors.sort() # note, this may not give the best sort order
header = ['date', 'hour', 'source'] + sensors

for source, source_data in data.iteritems():
    fn = "{}.csv".format(source)
    with open(fn, 'wb') as f:
        writer = csv.writer(f, delimiter=";")
        writer.writerow(header)
        for (date, time), hour_data in sorted(source_data.items()):
            values = [hour_data[sensor] for sensor in sensors]
            writer.writerow([date.strftime('%m/%d/%y'), time, source] + values)
</snippet></ROW><ROW><id>19647673</id><snippet>YYYY-MM-DD</snippet></ROW><ROW><id>19647673</id><snippet>sensor</snippet></ROW><ROW><id>19647673</id><snippet>s1</snippet></ROW><ROW><id>19647673</id><snippet>s2</snippet></ROW><ROW><id>19647673</id><snippet>s10</snippet></ROW><ROW><id>19647673</id><snippet>s2</snippet></ROW><ROW><id>19647673</id><snippet>a.csv</snippet></ROW><ROW><id>19647673</id><snippet>glob.glob('*.csv')</snippet></ROW><ROW><id>19647762</id><snippet>def find_index(table, letter):
    for r_index, row in enumerate(table):
        if letter in row:
            return (r_index, row.index(letter))
</snippet></ROW><ROW><id>19647762</id><snippet>def get_index_map(table):
    output = {}
    for r_index, row in enumerate(table):
        for c_index, letter in enumerate(row):
            output[letter] = (r_index, c_index)
    return output
</snippet></ROW><ROW><id>19647777</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://finance.yahoo.com/q/ks?s=NATI%20Key%20Statistics').read()

soup = BeautifulSoup(page)

all_data = soup.findAll('td', "yfnc_tabledata1")

print all_data[2].getText()

# or - for more elements

for element in all_data[0:3]:
    print element.getText()

# write to CSV

import csv

with open("results.csv", "wb") as f:
    writer = csv.writer(f)

    writer.writerow(["header1", "header2", "header3"])  

    for element in all_data[0:3]:
        writer.writerow([element.getText(), "column2", "column3"])
</snippet></ROW><ROW><id>19647777</id><snippet>47.65
# or - for more elements
3.69B
3.38B
47.65
</snippet></ROW><ROW><id>19647777</id><snippet>header1,header2,header3
3.69B,column2,column3
3.38B,column2,column3
47.65,column2,column3
</snippet></ROW><ROW><id>19647830</id><snippet>ser.read()</snippet></ROW><ROW><id>19647830</id><snippet>import serial
import time
ser = serial.Serial('/dev/ttyACM0', 9600) 
a = ser.read()
t0 = time.time()

while(a == ser.read()):
    t1 = time.time()
    try:
        print(1 / ((t1-t0)/60))
    except ZeroDivisionError:
        pass
    t0 = t1
</snippet></ROW><ROW><id>19647830</id><snippet>a</snippet></ROW><ROW><id>19647830</id><snippet>ser.read()</snippet></ROW><ROW><id>19647830</id><snippet>ser.read()</snippet></ROW><ROW><id>19647830</id><snippet>a == ser.read()</snippet></ROW><ROW><id>19647830</id><snippet>False</snippet></ROW><ROW><id>19647830</id><snippet>import serial
import time


ser = serial.Serial('/dev/ttyACM0', 9600) 
t0 = time.time()

while True:
    a = ser.read()
    if a == b'2' or a == b'1':
        t1 = time.time()
        try:
            print(1 / ((t1-t0)/60))
        except ZeroDivisionError:
            pass
        t0 = t1
    else:
        break
</snippet></ROW><ROW><id>19647926</id><snippet>targetdata = originaldata[mapping[..., 0], mapping[..., 1]]
</snippet></ROW><ROW><id>19647926</id><snippet>&gt;&gt;&gt; original_data = np.arange(6).reshape(2, 3)
&gt;&gt;&gt; original_data
array([[0, 1, 2],
       [3, 4, 5]])
&gt;&gt;&gt; mapping = np.array([[[1,0], [1, 1], [1, 2]],   # swap rows and reverse
...                     [[0, 2], [0, 1], [0, 0]]]) # the second one
&gt;&gt;&gt; original_data[mapping[..., 0], mapping[..., 1]]
array([[3, 4, 5],
       [2, 1, 0]])
</snippet></ROW><ROW><id>19647939</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>19647939</id><snippet>from itertools import groupby, cycle

output = [res for k, g in groupby(l) for orig, res in zip(g, cycle([k] + [-1] * (k - 1)))]
</snippet></ROW><ROW><id>19647939</id><snippet>&gt;&gt;&gt; from itertools import groupby, cycle
&gt;&gt;&gt; l = [3,3,3,4,4,4,4,2,2,2,2,3,3,3,3,3,3,3,3,3,2,2,5,5,5,5,5,3,3,3,3,3,3] 
&gt;&gt;&gt; [res for k, g in groupby(l) for orig, res in zip(g, cycle([k] + [-1] * (k - 1)))]
[3, -1, -1, 4, -1, -1, -1, 2, -1, 2, -1, 3, -1, -1, 3, -1, -1, 3, -1, -1, 2, -1, 5, -1, -1, -1, -1, 3, -1, -1, 3, -1, -1]
</snippet></ROW><ROW><id>19647939</id><snippet>groupby()</snippet></ROW><ROW><id>19647939</id><snippet>3</snippet></ROW><ROW><id>19647939</id><snippet>4</snippet></ROW><ROW><id>19647939</id><snippet>-1</snippet></ROW><ROW><id>19647939</id><snippet>zip()</snippet></ROW><ROW><id>19647939</id><snippet>g</snippet></ROW><ROW><id>19647939</id><snippet>[2, 2, 2, 2]</snippet></ROW><ROW><id>19647939</id><snippet>[2, -1]</snippet></ROW><ROW><id>19647939</id><snippet>[2, -1, 2, -1]</snippet></ROW><ROW><id>19647995</id><snippet>results = ()

dc = ['103,4770634', '42,427752', '64,10122045', '42,13603629', '42,25516425', '103,2748102', '42,1966402', '42,30262834', '42,6667711', '18,13737683', '42,28921168', '42,26076925', '103,3733654', '42,23313527', '64,3307344', '103,3973533', '42,6360982', '48,11846077', '103,3775309', '64,10122050', '42,1965119', '103,4265810', '103,3971645', '103,4962583', '103,689615', '42,22834366', '103,761655', '95,1184', '64,9594482', '42,22855603', '48,8654764', '103,4226756', '42,23366982', '103,3897036', '42,11339650', '101,6369', '42,25830920', '103,5009291', '42,29238961', '59,6299475', '42,22931663', '42,25839056', '43,11864458', '43,41346192', '103,4261645', '42,3747082', '103,4795050', '42,9417503', '103,4245623', '42,61431911']

try:
    sql = "SELECT * FROM tbl1 WHERE id1 in (%s) AND id2 in (%s)"
    in_ids = ', '.join(map(lambda x: '%s', dc))
    in_ids = in_ids % tuple(dc)
    sql = sql % (in_ids, in_ids)
    cursor.execute(sql)
    res = cursor.fetchall()
    results = results + res
except Exception, e:
    print e
</snippet></ROW><ROW><id>19647995</id><snippet>SELECT * FROM tbl1 WHERE id1 in (103,4770634, 42,427752, 64,10122045, 42,13603629, 42,25516425, 103,2748102, 42,1966402, 42,30262834, 42,6667711, 18,13737683, 42,28921168, 42,26076925, 103,3733654, 42,23313527, 64,3307344, 103,3973533, 42,6360982, 48,11846077, 103,3775309, 64,10122050, 42,1965119, 103,4265810, 103,3971645, 103,4962583, 103,689615, 42,22834366, 103,761655, 95,1184, 64,9594482, 42,22855603, 48,8654764, 103,4226756, 42,23366982, 103,3897036, 42,11339650, 101,6369, 42,25830920, 103,5009291, 42,29238961, 59,6299475, 42,22931663, 42,25839056, 43,11864458, 43,41346192, 103,4261645, 42,3747082, 103,4795050, 42,9417503, 103,4245623, 42,61431911) AND id2 in (103,4770634, 42,427752, 64,10122045, 42,13603629, 42,25516425, 103,2748102, 42,1966402, 42,30262834, 42,6667711, 18,13737683, 42,28921168, 42,26076925, 103,3733654, 42,23313527, 64,3307344, 103,3973533, 42,6360982, 48,11846077, 103,3775309, 64,10122050, 42,1965119, 103,4265810, 103,3971645, 103,4962583, 103,689615, 42,22834366, 103,761655, 95,1184, 64,9594482, 42,22855603, 48,8654764, 103,4226756, 42,23366982, 103,3897036, 42,11339650, 101,6369, 42,25830920, 103,5009291, 42,29238961, 59,6299475, 42,22931663, 42,25839056, 43,11864458, 43,41346192, 103,4261645, 42,3747082, 103,4795050, 42,9417503, 103,4245623, 42,61431911)
</snippet></ROW><ROW><id>19648043</id><snippet>reset_index</snippet></ROW><ROW><id>19648043</id><snippet>Name2</snippet></ROW><ROW><id>19648043</id><snippet>join</snippet></ROW><ROW><id>19648043</id><snippet>set_index</snippet></ROW><ROW><id>19648043</id><snippet>Name1</snippet></ROW><ROW><id>19648043</id><snippet>import pandas as pd

df = pd.DataFrame({'Name1':['a','a','a','b','b','b'],
                   'Name2':[1,2,4,2,4,8],
                   'present':[1,1,3,1,5,1]})
df.set_index(['Name1','Name2'], inplace=True)

df2 = pd.DataFrame({'Data1':[80,61,45,30],
                    'Data2':[6,8,7,3]},
                   index=pd.Series([1,2,4,8], name='Name2'))
result = df.reset_index(level=0).join(df2).set_index('Name1', append=True)
print(result)
#              present  Data1  Data2
# Name2 Name1                       
# 1     a            1     80      6
# 2     a            1     61      8
#       b            1     61      8
# 4     a            3     45      7
#       b            5     45      7
# 8     b            1     30      3
</snippet></ROW><ROW><id>19648043</id><snippet>print(result.reorder_levels([1,0],axis=0).sort(axis=0))
#              present  Data1  Data2
# Name1 Name2                       
# a     1            1     80      6
#       2            1     61      8
#       4            3     45      7
# b     2            1     61      8
#       4            5     45      7
#       8            1     30      3
</snippet></ROW><ROW><id>19648076</id><snippet>with open(input_file_name, "rt") as f:
    for line in f:
        for word in line.split():
            # do something with each word here
</snippet></ROW><ROW><id>19648076</id><snippet>file</snippet></ROW><ROW><id>19648076</id><snippet>f</snippet></ROW><ROW><id>19648076</id><snippet>with</snippet></ROW><ROW><id>19648076</id><snippet>open()</snippet></ROW><ROW><id>19648076</id><snippet>for</snippet></ROW><ROW><id>19648076</id><snippet>line.split()</snippet></ROW><ROW><id>19648076</id><snippet>for</snippet></ROW><ROW><id>19648076</id><snippet>def words(f):
    for line in f:
        for word in line.split():
            yield word

with open(input_file_name, "rt") as f:
    for word in words(f):
        # do something with word
</snippet></ROW><ROW><id>19648181</id><snippet>var product = ['$product_values'];
for(var i = 0; i &lt; 3; i++)
{
    var k = product[i]
    alert(k)
}
</snippet></ROW><ROW><id>19648184</id><snippet>if answerb == 'Call of duty' or answerb == 'call of duty' or answerb == 'Call Of Duty' or answerb == 'Call of Duty' or answerb == 'a' or answerb == 'a)':
    print("You are correct!")
    points = points + maxGuesses-guessesTaken
</snippet></ROW><ROW><id>19648184</id><snippet>print("Hello and welcome to Shahaad's quiz!") #Introduction
name = input("What is your name? ")
print("Alright", name,", these will be today's topics:")  #Topics
print("a) Video Games") 
print("b) Soccer")
print("c) Geography") 
choice = input("Which topic would you like to begin with?")
if choice == 'video games' or choice == 'Video Games' or choice == 'Video games' or choice == 'a)' or choice == 'a':
    print("You picked Video Games.")
print("Question number one:")                                      #Question one
print("What is the most popular FPS (First Person Shooter) game?")
print("a) Call of Duty")
print("b) Battlefield")
print("c) Grand Theft Auto 5")
print("d) Counter Strike")       
maxGuesses = 2 #Max number of attempts for the problem
guessesTaken = 0
points = 0
question = input("Your answer: ")
if question == 'Call of duty' or question == 'call of duty' or question == 'Call Of Duty' or question == 'Call of Duty' or question == 'a' or question == 'a)':
    print("You are correct! You guessed the question on the first try!")
    points = points + maxGuesses-guessesTaken
    print("You scored",(maxGuesses-guessesTaken), "points!")
else:
    print("Incorrect!")
    print("You have", (maxGuesses-guessesTaken-1), "guesses remaining!")
    answerb = input("Your answer: ")
    if answerb == 'Call of duty' or answerb == 'call of duty' or answerb == 'Call Of Duty' or answerb == 'Call of Duty' or answerb == 'a' or answerb == 'a)':
        print("You are correct!")
        points = points + maxGuesses-guessesTaken
    print("You scored", (maxGuesses-guessesTaken-1), "points!")
</snippet></ROW><ROW><id>19648186</id><snippet>argmin()</snippet></ROW><ROW><id>19648186</id><snippet>txt = """  cat  val
0   a    1
1   a    6
2   a   12
3   b    2
4   b    5
5   b   11
6   c    4
7   c   22"""

import io

df = pd.read_csv(io.BytesIO(txt), delim_whitespace=True, index_col=0)
df["val_delt"] = (df.val - 5.5).abs()
idx = df.groupby("cat").apply(lambda df:df.index[df.val_delt.argmin()])
df.ix[idx, :]
</snippet></ROW><ROW><id>19648186</id><snippet>cat  val  val_delt
1   a    6       0.5
4   b    5       0.5
6   c    4       1.5
</snippet></ROW><ROW><id>19648787</id><snippet>import json, subprocess
file_name = u'/path/to/some/file.mp3'
command=["/path/to/ffmpeg/bin/ffprobe",
         '-print_format', 'json',
         '-v', 'quiet',
         '-show_error',
         '-show_format',
         #'-show_frames',
         #'-show_packets',
         '-show_streams',
         '-show_program_version',
         '-show_library_versions',
         '-show_versions',
         '-show_private_data',
         file_name]
process_data=subprocess.Popen(command, stderr = subprocess.PIPE, stdout = subprocess.PIPE)
returncode = process_data.wait()
json_result=json.loads(process_data.stdout.read())
print json_result.get(u'format')
</snippet></ROW><ROW><id>19648787</id><snippet>"format": {
    "filename": "/path/to/some/file.mp3",
    "nb_streams": 1,
    "format_name": "mp3",
    "format_long_name": "MP2/3 (MPEG audio layer 2/3)",
    "start_time": "0.000000",
    "duration": "12.416125",
    "size": "198658",
    "bit_rate": "128000",
    "tags": {
        "title": "Test of MP3 File              ",
        "artist": "Me                            ",
        "album": "Me                            ",
        "date": "2006",
        "comment": "test                        ",
        "track": "1",
        "genre": "Other"
    }
</snippet></ROW><ROW><id>19648831</id><snippet>def f(x, M):
    return M.dot(x)
</snippet></ROW><ROW><id>19648831</id><snippet>m = M.shape[0]
x0 = np.ones(m)/np.sqrt(m)
</snippet></ROW><ROW><id>19648831</id><snippet>def con(x):
    return np.linalg.norm(x) - 1

cons = {'type':'eq', 'fun': con}
</snippet></ROW><ROW><id>19648831</id><snippet>scipy.optimize.minimize(f, x0, args=(M,), constraints=cons)
</snippet></ROW><ROW><id>19648831</id><snippet>scipy.linalg.solve</snippet></ROW><ROW><id>19648831</id><snippet>from scipy import linalg

x = linalg.solve(M, np.zeros(M.shape[0]))
</snippet></ROW><ROW><id>19648831</id><snippet>x /= linalg.norm(x)
</snippet></ROW><ROW><id>19648924</id><snippet>if not request.user.is_authenticated():
    # LoginView.login_view will return a HttpResponse object
    return LoginView.login_view(request)
else:
    ...
</snippet></ROW><ROW><id>19648924</id><snippet>def login_view(request):
    err_msg = None
    # if the request method is POST the process the POST values otherwise just render the page
    if request.method == 'POST':
        username = request.POST.get('username', '')
        password = request.POST.get('password', '')
        user = auth.authenticate(username=username, password=password)
        if user is not None and user.is_active:
            # Correct password, and the user is marked "active"
            auth.login(request, user)
            # Redirect to dashboard
           return HttpResponseRedirect('/')
        else:
            # Show a message     
            err_msg 'Please enter your username and password below.'
    return render(request, 'login.html', {'login': err_msg})
</snippet></ROW><ROW><id>19649038</id><snippet>with open('corpus.txt', 'r') as f:
    answer = []
    for line in f:
        cnt = 0
        sa = nltk.word_tokenize(line)
        answer.append([tuple([char, sa[i+1]]) for i,char in enumerate(sa[:-1])])
</snippet></ROW><ROW><id>19649223</id><snippet>panda.shift()</snippet></ROW><ROW><id>19649223</id><snippet>plt.plot(data0.x, data0.y)
for target in [data1, data2]:
    dx = np.mean(np.diff(data0.x.values))
    shift = (np.argmax(signal.correlate(data0.y, target.y)) - len(target.y)) * dx
    plt.plot(target.x + shift, target.y)
</snippet></ROW><ROW><id>19649259</id><snippet># -*- coding: utf-8 -*-
import threading

use_gevent = True        
use_debug = False        
cycles_count = 100
if use_gevent:
    from gevent import monkey
    monkey.patch_thread()

count = 0

class Counter(threading.Thread):
    def __init__(self, name):
        self.thread_name = name
        super(Counter, self).__init__(name=name)

    def run(self):
        global count
        for i in xrange(cycles_count):
            if use_debug:
                print '%s:%s' % (self.thread_name, count)
            if use_gevent:
                print self.thread_name
            count = count + 1

class Infinite(threading.Thread):
    def run(self):
        if use_gevent:
            print 'Infinite ...'
        while True:
            pass


counters = [Counter('thread:%s' % i) for i in range(5)]
for counter in counters:
    counter.start()
infinite = Infinite()
infinite.start()
for counter in counters:
    counter.join()

print 'count=%s' % count 
</snippet></ROW><ROW><id>19649302</id><snippet>items = ["Data Here 94/452O", "Data more 94/4522i", "Data bla 94/111", "Data bla 94/459es", "Data bla 94/444"]

items = [item[:-2] + item[-2:].upper() for item in items]

print items
</snippet></ROW><ROW><id>19649302</id><snippet>['Data Here 94/452O', 'Data more 94/4522I', 'Data bla 94/111', 'Data bla 94/459ES', 'Data bla 94/444']
</snippet></ROW><ROW><id>19649347</id><snippet>HashTable</snippet></ROW><ROW><id>19649347</id><snippet>main()</snippet></ROW><ROW><id>19649347</id><snippet>HashTable</snippet></ROW><ROW><id>19649347</id><snippet>mkHashTable</snippet></ROW><ROW><id>19649347</id><snippet>table</snippet></ROW><ROW><id>19649347</id><snippet>HashTable</snippet></ROW><ROW><id>19649347</id><snippet>table</snippet></ROW><ROW><id>19649347</id><snippet>hashtable</snippet></ROW><ROW><id>19649347</id><snippet>HashTable</snippet></ROW><ROW><id>19649347</id><snippet>__init__</snippet></ROW><ROW><id>19649347</id><snippet>mkHashTable</snippet></ROW><ROW><id>19649347</id><snippet>hashtable.py</snippet></ROW><ROW><id>19649347</id><snippet>HashTable</snippet></ROW><ROW><id>19649347</id><snippet>_Entry</snippet></ROW><ROW><id>19649347</id><snippet>contains</snippet></ROW><ROW><id>19649347</id><snippet>__contains__</snippet></ROW><ROW><id>19649347</id><snippet>word in table</snippet></ROW><ROW><id>19649347</id><snippet>HashTableToStr</snippet></ROW><ROW><id>19649347</id><snippet>__str__</snippet></ROW><ROW><id>19649347</id><snippet>print(table)</snippet></ROW><ROW><id>19649460</id><snippet>os.remove(f)</snippet></ROW><ROW><id>19649460</id><snippet>filename="/home/priyan/Desktop/Store/HR_Module/attendance/savefile.txt"
</snippet></ROW><ROW><id>19649460</id><snippet>filename</snippet></ROW><ROW><id>19649460</id><snippet>open()</snippet></ROW><ROW><id>19649460</id><snippet>remove()</snippet></ROW><ROW><id>19649460</id><snippet>filename="/home/priyan/Desktop/Store/HR_Module/attendance/savefile.txt"

# snip

f = open(filename,'rU')

# snip

f.close()
os.remove(filename)
return False
</snippet></ROW><ROW><id>19649561</id><snippet>os.chdir(42)</snippet></ROW><ROW><id>19649561</id><snippet>&gt;&gt;&gt; os.chdir(42)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be string, not int
</snippet></ROW><ROW><id>19649561</id><snippet>...other arguments that have the correct type...</snippet></ROW><ROW><id>19649561</id><snippet>os</snippet></ROW><ROW><id>19649940</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; txt = '''&lt;description&gt;&lt;![CDATA[Voice of America is an international news and broadcast organization serving Central and Eastern Europe, the Caucasus, Central Asia, Russia, the Middle East and Balkan countries]]&gt;&lt;/description&gt;'''
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(txt)
&gt;&gt;&gt; for cd in soup.findAll(text=True):
...   if isinstance(cd, BeautifulSoup.CData):
...     print 'CData value: %r' % cd
...
CData value: u'Voice of America is an international news and broadcast organi
zation serving Central and Eastern Europe, the Caucasus, Central Asia, Russia, t
he Middle East and Balkan countries'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19649940</id><snippet>from bs4 import BeautifulSoup, CData
import urllib

source_txt = urllib.urlopen("http://voanews.com/api/epiqq")
soup = BeautifulSoup.BeautifulSoup(source_txt.read())
for cd in soup.findAll(text=True):
    if isinstance(cd, CData):
        print 'CData value: %r' % cd        
</snippet></ROW><ROW><id>19649940</id><snippet>urlopen</snippet></ROW><ROW><id>19649940</id><snippet>http</snippet></ROW><ROW><id>19650004</id><snippet>class UserAdmin(UserAdmin):
    inlines = (InsiderUserInline, )
    list_display = ('email', 'first_name', 'last_name', 'display_company_name', )

    def display_company_name(self, request):
        if InsiderUser.objects.filter(user__id = request.id):
            return InsiderUser.objects.get(user__id = request.id).company_name
        else:
            return None
    display_company_name.short_description = 'Company Name'

admin.site.unregister(User)
admin.site.register(User, UserAdmin)
</snippet></ROW><ROW><id>19650015</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>19650015</id><snippet>href</snippet></ROW><ROW><id>19650015</id><snippet>href</snippet></ROW><ROW><id>19650015</id><snippet>for link in projects</snippet></ROW><ROW><id>19650015</id><snippet>projects</snippet></ROW><ROW><id>19650015</id><snippet>link</snippet></ROW><ROW><id>19650015</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>19650015</id><snippet>for project in projects:
   for link in project.find_all("a"):
</snippet></ROW><ROW><id>19650015</id><snippet>for link in soup.select("h2.bbcard_name a"):
</snippet></ROW><ROW><id>19650556</id><snippet>try:
    branch = sys.argv[1]
except IndexError:
    branch = ''
</snippet></ROW><ROW><id>19650656</id><snippet>def GroupFunc(x, df, col, Value):
    if df[col][x] == Value:
        return "Group 1" 
    else:
        return "Group 2"

DFGrouped = df2.groupby(lambda x: GroupFunc(x, df2, 'X', 'A'))
</snippet></ROW><ROW><id>19650656</id><snippet>DFGrouped = df2.groupby(lambda x: 'Group 1' if df2.X[x] == 'A' else 'Group 2')
</snippet></ROW><ROW><id>19650769</id><snippet>m=re.search("data.(..)",str)
</snippet></ROW><ROW><id>19650797</id><snippet>{{ data }}</snippet></ROW><ROW><id>19650797</id><snippet>countdata</snippet></ROW><ROW><id>19650797</id><snippet>query_response</snippet></ROW><ROW><id>19650797</id><snippet>{{ data }}</snippet></ROW><ROW><id>19650861</id><snippet>sys.path</snippet></ROW><ROW><id>19650863</id><snippet>#views.py
rated = BlogSiteReview.objects.filter(user=request.user).values_list('blog_site', flat=True)
return render(request, page, {..., 'blogsites':blog_sites, 'rated':rated})
</snippet></ROW><ROW><id>19650863</id><snippet>#template
{% for blogsite in blogsites %}
&lt;tr&gt;
  &lt;td&gt;&lt;a href="http://{{ blogsite.url }}" id="{{ blogsite.id }}"&gt;{{ blogsite.site_name }}&lt;/a&gt;&lt;/td&gt;
  &lt;td&gt;&lt;div id="rating{{ blogsite.id }}" class="rating {% if blogsite.id in rated %}jDisabled{% endif %}" data-average="{{ blogsite.rating_avg }}" data-id="{{ blogsite.id }}"&gt;&lt;/div&gt;&lt;/td&gt;
  &lt;td&gt;{{ blogsite.create_date }}&lt;/td&gt;
  &lt;td&gt;{{ rated }}&lt;/td&gt;
&lt;/tr&gt;
{% empty %}
  &lt;p&gt;There are no registered blogsites for this country.&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>19651125</id><snippet>for x in c[0]: x = 0
</snippet></ROW><ROW><id>19651125</id><snippet>&gt;&gt;&gt; a = b = 1
&gt;&gt;&gt; b += 1     # in-place operation, this will work differently for mutable objects
&gt;&gt;&gt; a, b       # a is still unchanged
(1, 2)
</snippet></ROW><ROW><id>19651125</id><snippet>&gt;&gt;&gt; x = y = [1, 1]
&gt;&gt;&gt; x = 2 # `x` now points to a new object, number of references to [1, 1] decreased by 1
&gt;&gt;&gt; x, y
(2, [1, 1])
</snippet></ROW><ROW><id>19651125</id><snippet>&gt;&gt;&gt; x = y = [1, 1]
&gt;&gt;&gt; x.append(2)
&gt;&gt;&gt; x, y
([1, 1, 2], [1, 1, 2])
</snippet></ROW><ROW><id>19651125</id><snippet>x = c[0]
x = 0    #this won't affect `c[0]`
x = c[1]
x = 0
...
</snippet></ROW><ROW><id>19651125</id><snippet>&gt;&gt;&gt; c= [x[:] for x in [[None]*3]*4]
&gt;&gt;&gt; c= [x[:] for x in [[None]*3]*4]
&gt;&gt;&gt; print id(c[0])
45488072
&gt;&gt;&gt; c[0] = [0 for x in c[0]]
&gt;&gt;&gt; print id(c[0])              #c[0] is a new list object
45495944
</snippet></ROW><ROW><id>19651195</id><snippet>import csv

FieldIP = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
FieldOP = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
signalIP = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.20]
signalOP = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.20]
NameIP = "JDP123"
TypeIP = "ID123"
NameOP = "JDP124"
TypeOP = "ID124"

newDirRH = "C:/VSMPlots"
newfile = newDirRH + "/TabulatedStatsVSM1.csv"
with open(newfile, "wb") as csvfile:
writer = csv.writer(csvfile)
writer.writerow(["NameIP", "TypeIP", "NameOP", "TypeOP"])
writer.writerow([NameIP, TypeIP, NameOP, TypeOP])
writer.writerow([" "])
writer.writerow(["FieldIP", "SignalIP", "FieldOP", "SignalOP"])
for field, signal, field1, signal1 in zip(FieldIP, signalIP, FieldOP, signalOP):
    writer.writerow([field, signal, field1,signal1])
print "Done"
</snippet></ROW><ROW><id>19651321</id><snippet>time.sleep</snippet></ROW><ROW><id>19651325</id><snippet>found</snippet></ROW><ROW><id>19651325</id><snippet>False</snippet></ROW><ROW><id>19651325</id><snippet>found = False</snippet></ROW><ROW><id>19651325</id><snippet>line</snippet></ROW><ROW><id>19651325</id><snippet>found</snippet></ROW><ROW><id>19651325</id><snippet>True</snippet></ROW><ROW><id>19651325</id><snippet>True</snippet></ROW><ROW><id>19651325</id><snippet>line</snippet></ROW><ROW><id>19651840</id><snippet>_prefetched_objects_cache</snippet></ROW><ROW><id>19651840</id><snippet>instance = Parent.objects.prefetch_related('children').all()[0]

try:
    instance._prefetched_objects_cache[instance.children.prefetch_cache_name]
    # Ok, it's pefetched
    child_count = len(instance.children.all())
except (AttributeError, KeyError):
    # Not prefetched
    child_count = instance.children.count()
</snippet></ROW><ROW><id>19652250</id><snippet>inspect.getcallargs()</snippet></ROW><ROW><id>19652250</id><snippet>dictionary = inspect.getcallargs(func, *args, **kwargs)
dictionary['username']  # Gets you the username, default or modifed
</snippet></ROW><ROW><id>19652250</id><snippet>&gt;&gt;&gt; from inspect import getcallargs
&gt;&gt;&gt; def f(a, b=1, *pos, **named):
...     pass
&gt;&gt;&gt; getcallargs(f, 1, 2, 3)
{'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
&gt;&gt;&gt; getcallargs(f, a=2, x=4)
{'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
&gt;&gt;&gt; getcallargs(f)
Traceback (most recent call last):
...
TypeError: f() takes at least 1 argument (0 given)
</snippet></ROW><ROW><id>19652271</id><snippet>from yourmodule.yourapp import celery
celery.send_task("yourtasksmodule.yourtask", args=["Hello World"])
</snippet></ROW><ROW><id>19652434</id><snippet>and</snippet></ROW><ROW><id>19652434</id><snippet>or</snippet></ROW><ROW><id>19652434</id><snippet>cont="a"
if cont not in ("n", "y"):
    print "Welcome"
</snippet></ROW><ROW><id>19652434</id><snippet>if cont not in ("n", "y", "N", "Y"):
</snippet></ROW><ROW><id>19652434</id><snippet>True</snippet></ROW><ROW><id>19652434</id><snippet>cont</snippet></ROW><ROW><id>19652434</id><snippet>n</snippet></ROW><ROW><id>19652434</id><snippet>y</snippet></ROW><ROW><id>19652434</id><snippet>if cont not in "nyNY":
</snippet></ROW><ROW><id>19652549</id><snippet>stdin</snippet></ROW><ROW><id>19652549</id><snippet>import tempfile, subprocess
installpip="echo 'hello'\n"

with tempfile.TemporaryFile() as scriptfile:
        scriptfile.write(installpip)
        scriptfile.flush()
        scriptfile.seek(0)
        subprocess.call(['/bin/bash', '-s'], stdin=scriptfile)
</snippet></ROW><ROW><id>19652598</id><snippet>keys</snippet></ROW><ROW><id>19652598</id><snippet>    if (PyObject_HasAttrString(arg, "keys"))
        result = PyDict_Merge(self, arg, 1);
</snippet></ROW><ROW><id>19652598</id><snippet>keys</snippet></ROW><ROW><id>19652598</id><snippet>keys</snippet></ROW><ROW><id>19652598</id><snippet>class Mydict2(UserDict):
    def keys(self):
        print 'here keys'
        return ['x', 'y']
</snippet></ROW><ROW><id>19652598</id><snippet>class Mydict2(dict):
    def export(self):
        return {k:self[k] for k in ['x', 'y']}
</snippet></ROW><ROW><id>19652617</id><snippet>WriteBatch()</snippet></ROW><ROW><id>19652617</id><snippet>add_index_node</snippet></ROW><ROW><id>19652617</id><snippet>batch = neo4j.WriteBatch(graph_db)  
a = batch.create(node(name='Alice'))  
batch.add_index_node("people","name","alice",a)  
batch.submit()
</snippet></ROW><ROW><id>19652642</id><snippet>from contextlib import contextmanager

@contextmanager
def temporary_changed_attr(object, attr, value):
    if hasattr(object, attr):
        old = getattr(object, attr)
        setattr(object, attr, value)
        yield
        setattr(object, attr, old)
    else:
        setattr(object, attr, value)
        yield
        delattr(object, attr)

# Example usage
with temporary_changed_attr(self.testuser, 'is_active', False):
    # self.testuser.is_active will be false in here
</snippet></ROW><ROW><id>19652730</id><snippet>routing_key</snippet></ROW><ROW><id>19652730</id><snippet>queue</snippet></ROW><ROW><id>19652730</id><snippet>subtask()</snippet></ROW><ROW><id>19652730</id><snippet>s()</snippet></ROW><ROW><id>19652889</id><snippet>getattr</snippet></ROW><ROW><id>19652889</id><snippet>def calculate(function):
    func = getattr(np, function)
    func(...)   # do what you want

calculate("mean") # calculate the average number 
calculate("std")  # calculate the standard deviation
</snippet></ROW><ROW><id>19653182</id><snippet>enumerate</snippet></ROW><ROW><id>19653182</id><snippet>&gt;&gt;&gt; names = ['ALICE', 'BOB', 'ME']
&gt;&gt;&gt; sum(i * sum(ord(ch) - ord('A') + 1 for ch in name) for i, name in enumerate(names, 1))
122
</snippet></ROW><ROW><id>19653182</id><snippet>sum</snippet></ROW><ROW><id>19653182</id><snippet>&gt;&gt;&gt; enumerate('ALICE')
&lt;enumerate object at 0x7f8f7b8c42d0&gt;
&gt;&gt;&gt; list(enumerate('ALICE'))
[(0, 'A'), (1, 'L'), (2, 'I'), (3, 'C'), (4, 'E')]
&gt;&gt;&gt; list(enumerate('ALICE', 1))
[(1, 'A'), (2, 'L'), (3, 'I'), (4, 'C'), (5, 'E')]
</snippet></ROW><ROW><id>19653233</id><snippet>name = ""
while len(name) &lt; 3:
    name = input("What's the student's name?")
    #if python2:
    #name = raw_input("What's the student's name?") 
</snippet></ROW><ROW><id>19653233</id><snippet>input</snippet></ROW><ROW><id>19653233</id><snippet>input</snippet></ROW><ROW><id>19653233</id><snippet>int</snippet></ROW><ROW><id>19653233</id><snippet>len(name)</snippet></ROW><ROW><id>19653233</id><snippet>raw_input</snippet></ROW><ROW><id>19653233</id><snippet>input</snippet></ROW><ROW><id>19653233</id><snippet>input</snippet></ROW><ROW><id>19653372</id><snippet>import os
import sys

if __name__ == '__main__':
    sys.path.append('/gpfs02/gcdistro/app/scons/2.3.0/engine/')
    sys.path.append('/gpfs02/gcdistro/app/scons/2.3.0/bin/')
    sys.path.append('/gpfs02/gcdistro/app/scons/2.3.0/engine/SCons/')
    import SCons
    from SCons import Script
    Script.main()
</snippet></ROW><ROW><id>19653524</id><snippet>class AKA(type):
    """ An 'Also Known As' metaclass to create aliases for a class. """
    def __new__(cls, classname, bases, classdict):
        classobj = type.__new__(cls, classname, bases, classdict)
        globals().update(
            (alias, classobj) for alias in classdict.get('aliases', []))
        return classobj

class C(object):
    __metaclass__ = AKA
    aliases = ['C1', 'C2']

print C   # &lt;class '__main__.C'&gt;
print C.aliases  # ['C1', 'C2']
print C1  # &lt;class '__main__.C'&gt;
print C2  # &lt;class '__main__.C'&gt;
</snippet></ROW><ROW><id>19653750</id><snippet>line = raw_input()
while(line):
   line=raw_input()
</snippet></ROW><ROW><id>19654515</id><snippet>self.labels = [Label(self, text=val) for val in my_list_of_texts]
</snippet></ROW><ROW><id>19654515</id><snippet>self.labels[0]</snippet></ROW><ROW><id>19654515</id><snippet>self.labels[1]</snippet></ROW><ROW><id>19654515</id><snippet>for label in self.labels:
    label.some_method()
    do_something(label)
    ...
</snippet></ROW><ROW><id>19654548</id><snippet>import os
import collections
extensions = collections.defaultdict(int)
size = collections.defaultdict(int)

for path, dirs, files in os.walk('/'):
   for filename in files:
       extensions[os.path.splitext(filename)[1].lower()] += 1
       size[os.path.splitext(filename)[1].lower()] += os.path.getsize(path+os.sep+filename)

for key,value in extensions.items():
    print 'Extension: ', key, ' ', value, ' items'

for key,value in size.items():
    print 'Extension: ', key, ' ', value, ' size'
</snippet></ROW><ROW><id>19654573</id><snippet>def squared_row_norms(X):
    # From http://stackoverflow.com/q/19094441/166749
    return np.einsum('ij,ij-&gt;i', X, X)

def squared_euclidean_distances(data, vec):
    data2 = squared_row_norms(data)
    vec2 = squared_row_norms(vec)
    d = np.dot(data, vec.T).ravel()
    d *= -2
    d += data2
    d += vec2
    return d
</snippet></ROW><ROW><id>19654573</id><snippet>&gt;&gt;&gt; data = np.random.randn(10, 40)
&gt;&gt;&gt; vec = np.random.randn(1, 40)
&gt;&gt;&gt; ((data - vec) ** 2).sum(axis=1)
array([  96.75712686,   69.45894306,  100.71998244,   80.97797154,
         84.8832107 ,   82.28910021,   67.48309433,   81.94813371,
         64.68162331,   77.43265692])
&gt;&gt;&gt; squared_euclidean_distances(data, vec)
array([  96.75712686,   69.45894306,  100.71998244,   80.97797154,
         84.8832107 ,   82.28910021,   67.48309433,   81.94813371,
         64.68162331,   77.43265692])
&gt;&gt;&gt; from sklearn.metrics.pairwise import euclidean_distances
&gt;&gt;&gt; euclidean_distances(data, vec, squared=True).ravel()
array([  96.75712686,   69.45894306,  100.71998244,   80.97797154,
         84.8832107 ,   82.28910021,   67.48309433,   81.94813371,
         64.68162331,   77.43265692])
</snippet></ROW><ROW><id>19654573</id><snippet>&gt;&gt;&gt; data = np.random.randn(1000, 40)
&gt;&gt;&gt; vec = np.random.randn(1, 40)
&gt;&gt;&gt; %timeit ((data - vec)**2).sum(axis=1)
10000 loops, best of 3: 114 us per loop
&gt;&gt;&gt; %timeit squared_euclidean_distances(data, vec)
10000 loops, best of 3: 52.5 us per loop
</snippet></ROW><ROW><id>19654573</id><snippet>&gt;&gt;&gt; %timeit ne.evaluate("sum((data - vec) ** 2, axis=1)")
10000 loops, best of 3: 142 us per loop
</snippet></ROW><ROW><id>19654631</id><snippet>xml_cleaned = re.sub(u'[^\x01-\x7f]+',u'',xml_as_string)
</snippet></ROW><ROW><id>19654631</id><snippet>^[</snippet></ROW><ROW><id>19654631</id><snippet>\x1b</snippet></ROW><ROW><id>19654631</id><snippet>xml_cleaned = re.sub(u'[^\n\r\t\x20-\x7f]+',u'',xml_as_string)
</snippet></ROW><ROW><id>19654903</id><snippet>Private key not found</snippet></ROW><ROW><id>19654903</id><snippet>DKIM_PRIVATE_KEY = '''
-----BEGIN RSA PRIVATE KEY-----
xxxxxxxxxxx
-----END RSA PRIVATE KEY-----
'''
</snippet></ROW><ROW><id>19654913</id><snippet>reduce</snippet></ROW><ROW><id>19654913</id><snippet>np.add</snippet></ROW><ROW><id>19654913</id><snippet>[]</snippet></ROW><ROW><id>19654913</id><snippet>{}</snippet></ROW><ROW><id>19654913</id><snippet>R</snippet></ROW><ROW><id>19654913</id><snippet>S</snippet></ROW><ROW><id>19654913</id><snippet>S = {k:[ R[j][k] for j in range(len(R)) ] for k in R[0].keys()}
</snippet></ROW><ROW><id>19654913</id><snippet>np.add</snippet></ROW><ROW><id>19654913</id><snippet>S = {'a1': [array([[ 32, 120,  80, 380, 360, 212, 188,  56, 312, 112],
                   [388, 348, 196, 236,  60, 200, 224, 208,  24, 104],
                   [324, 296,  24, 52, 220,  12, 104,  52, 232, 196]]),
            array([[ 32, 120,  80, 380, 360, 212, 188,  56, 312, 112],
                   [388, 348, 196, 236,  60, 200, 224, 208,  24, 104],
                   [324, 296,  24, 152, 220,  12, 104,  52, 232, 196]])],
     'a2': [array([[30, 82, 99, 72, 79, 98, 93, 93, 28, 46],
                   [ 8, 17, 50, 59, 85, 73, 48, 97, 87, 41],
                   [98, 36, 27, 55, 98, 39, 73, 51, 27, 33]]),
            array([[30, 82, 99, 72, 79, 98, 93, 93, 28, 46],
                   [ 8, 17, 50, 59, 85, 73, 48, 97, 87, 41],
                   [98, 36, 27, 55, 98, 39, 73, 51, 27, 33]])],
     'a3': [array([[78, 24, 87, 83, 30, 14, 88, 57, 55, 73],
                   [76, 94, 99, 58, 63, 34, 70, 81, 45, 20],
                   [32, 61,  0,  3, 33, 33, 38, 90, 11,  3]]),
            array([[78, 24, 87, 83, 30, 14, 88, 57, 55, 73],
                   [76, 94, 99, 58, 63, 34, 70, 81, 45, 20],
                   [32, 61,  0,  3, 33, 33, 38, 90, 11,  3]])]}
</snippet></ROW><ROW><id>19654913</id><snippet>T = {k:( reduce(np.add, v)/len(v) ) for k,v in S.iteritems()}
</snippet></ROW><ROW><id>19654913</id><snippet>T</snippet></ROW><ROW><id>19654913</id><snippet>T = {'a1': array([[ 32, 120,  80, 380, 360, 212, 188,  56, 312, 112],
                  [388, 348, 196, 236,  60, 200, 224, 208,  24, 104],
                  [324, 296,  24, 152, 220,  12, 104,  52, 232, 196]]),
     'a2': array([[30, 82, 99, 72, 79, 98, 93, 93, 28, 46],
                  [ 8, 17, 50, 59, 85, 73, 48, 97, 87, 41],
                  [98, 36, 27, 55, 98, 39, 73, 51, 27, 33]]),
     'a3': array([[78, 24, 87, 83, 30, 14, 88, 57, 55, 73],
                  [76, 94, 99, 58, 63, 34, 70, 81, 45, 20],
                  [32, 61,  0,  3, 33, 33, 38, 90, 11,  3]])}
</snippet></ROW><ROW><id>19654994</id><snippet>((?&lt;!java:)[0-9]+)
</snippet></ROW><ROW><id>19654994</id><snippet>java:
     ^
</snippet></ROW><ROW><id>19654994</id><snippet>java:4
      ^
</snippet></ROW><ROW><id>19654994</id><snippet>ava:4</snippet></ROW><ROW><id>19654994</id><snippet>java:</snippet></ROW><ROW><id>19654994</id><snippet>((?&lt;!java:)(?&lt;![0-9])[0-9]+)
           ^^^^^^^^^^
</snippet></ROW><ROW><id>19655379</id><snippet>np.c_[A,B,B]</snippet></ROW><ROW><id>19655379</id><snippet>array([[1, 5, 5],
       [2, 6, 6],
       [3, 7, 7],
       [4, 8, 8]])
</snippet></ROW><ROW><id>19655435</id><snippet>bind()</snippet></ROW><ROW><id>19655435</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19655435</id><snippet>'&lt;broadcast&gt;'</snippet></ROW><ROW><id>19655435</id><snippet>INADDR_BROADCAST</snippet></ROW><ROW><id>19655435</id><snippet>socket.gethostname()</snippet></ROW><ROW><id>19655435</id><snippet>gethostbyname(gethostname())</snippet></ROW><ROW><id>19655444</id><snippet>enumerate</snippet></ROW><ROW><id>19655444</id><snippet>&gt;&gt;&gt; L = [3, 2, -1, 7, 3, 5]
&gt;&gt;&gt; [(x, i) for i, x in enumerate(L, 1)]
[(3, 1), (2, 2), (-1, 3), (7, 4), (3, 5), (5, 6)]
</snippet></ROW><ROW><id>19655444</id><snippet>enumerate</snippet></ROW><ROW><id>19655444</id><snippet>&gt;&gt;&gt; help(enumerate)
Help on class enumerate in module __builtin__:

class enumerate(object)
 |  enumerate(iterable[, start]) -&gt; iterator for index, value of iterable
 |  
 |  Return an enumerate object.  iterable must be another object that supports
 |  iteration.  The enumerate object yields pairs containing a count (from
 |  start, which defaults to zero) and a value yielded by the iterable argument.
 |  enumerate is useful for obtaining an indexed list:
 |      (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
</snippet></ROW><ROW><id>19655510</id><snippet>object</snippet></ROW><ROW><id>19655510</id><snippet>A</snippet></ROW><ROW><id>19655510</id><snippet>object</snippet></ROW><ROW><id>19655734</id><snippet>&gt;&gt;&gt; INPUTSCRIPT="CLOSEDLOOP{DCSOURCE1|VOLTAGE|0.1|-1|5|1000}"
&gt;&gt;&gt; TEMPSCRIPT=INPUTSCRIPT.split('|')
&gt;&gt;&gt; TEMPSCRIPT
['CLOSEDLOOP{DCSOURCE1', 'VOLTAGE', '0.1', '-1', '5', '1000}']
&gt;&gt;&gt; TEMPSCRIPT[5]
'1000}'
</snippet></ROW><ROW><id>19655734</id><snippet>&gt;&gt;&gt; TEMPSCRIPT[5].rstrip('}')
'1000'
</snippet></ROW><ROW><id>19655743</id><snippet>import</snippet></ROW><ROW><id>19655743</id><snippet>$ cat file1.py
def fun():
   print('in fun1')

$ cat file2.py
import file1

file1.fun()
</snippet></ROW><ROW><id>19656056</id><snippet>logging/__init__.py</snippet></ROW><ROW><id>19656056</id><snippet>FileHandler</snippet></ROW><ROW><id>19656056</id><snippet>__init__()</snippet></ROW><ROW><id>19656056</id><snippet>FileHandler.__init__</snippet></ROW><ROW><id>19656056</id><snippet>delay</snippet></ROW><ROW><id>19656056</id><snippet>StreamHandler</snippet></ROW><ROW><id>19656056</id><snippet>open()</snippet></ROW><ROW><id>19656056</id><snippet>FileHandler</snippet></ROW><ROW><id>19656056</id><snippet>logger.disabled</snippet></ROW><ROW><id>19656260</id><snippet>subprocess.call()</snippet></ROW><ROW><id>19656260</id><snippet>shell=False</snippet></ROW><ROW><id>19656260</id><snippet>shell=True</snippet></ROW><ROW><id>19656260</id><snippet>subprocess.call([ '/path/to/executable', 'arg1', 'arg2' ])  # shell=False</snippet></ROW><ROW><id>19656260</id><snippet>subprocess.call('/path/to/executable "arg1" "arg2"', shell=True)</snippet></ROW><ROW><id>19656260</id><snippet>not found</snippet></ROW><ROW><id>19656260</id><snippet>shell=True</snippet></ROW><ROW><id>19656260</id><snippet>#!</snippet></ROW><ROW><id>19656260</id><snippet>#!/binn/sh</snippet></ROW><ROW><id>19656374</id><snippet>session = Popen(connection_string, stdin=PIPE, stdout=PIPE, stderr=PIPE, shell=True)
</snippet></ROW><ROW><id>19656392</id><snippet>from __future__ import division # this must be the very first import statement
score = sum(i*w(i) for i in x if i in y) / sum(i * w(i) for i in x)
</snippet></ROW><ROW><id>19656392</id><snippet>w(i)</snippet></ROW><ROW><id>19656392</id><snippet>w(i)</snippet></ROW><ROW><id>19656392</id><snippet>i</snippet></ROW><ROW><id>19656392</id><snippet>from __future__ import division # this must be the very first import statement
xx = set(x)
yy = set(y)
score = sum(i*w(i) for i in xx &amp; yy) / sum(i * w(i) for i in x)
</snippet></ROW><ROW><id>19656392</id><snippet>xx &amp; yy</snippet></ROW><ROW><id>19656392</id><snippet>xx.intersection(yy)</snippet></ROW><ROW><id>19656392</id><snippet>x</snippet></ROW><ROW><id>19656392</id><snippet>y</snippet></ROW><ROW><id>19656475</id><snippet>.name</snippet></ROW><ROW><id>19656475</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--sqlite-file', type=argparse.FileType('r'))
_StoreAction(option_strings=['--sqlite-file'], dest='sqlite_file', nargs=None, const=None, default=None, type=FileType('r'), choices=None, help=None, metavar=None)
&gt;&gt;&gt; args = parser.parse_args(['--sqlite-file', '/tmp/demo.db'])
&gt;&gt;&gt; args.sqlite_file
&lt;_io.TextIOWrapper name='/tmp/demo.db' mode='r' encoding='UTF-8'&gt;
&gt;&gt;&gt; args.sqlite_file.name
'/tmp/demo.db'
</snippet></ROW><ROW><id>19656636</id><snippet>for x in [1, 2, 3, 4]:
  for y in [1, 2, 3, 4]:
    for z in [1, 2, 3, 4]:
      # start of the alignment is given by (x, y, z).
      for dx in [-1, 0, +1]:
        for dy in [-1, 0, +1]:
          for dz in [-1, 0, +1]:
            # add (dx, dy, dz) for each successive point.
            # check that it makes a valid alignment first.
            if ((dx, dy, dz) != (0, 0, 0) and
                1 &lt;= x + 3*dx &lt;= 4 and
                1 &lt;= y + 3*dy &lt;= 4 and
                1 &lt;= z + 3*dz &lt;= 4):
              # that's a valid alignment.
              print (x, y, z), (x + 3*dx, y + 3*dy, z + 3*dz)
</snippet></ROW><ROW><id>19656962</id><snippet>DataDiff.stringify()</snippet></ROW><ROW><id>19656962</id><snippet>.diffs</snippet></ROW><ROW><id>19656962</id><snippet>def output(ddiff, f, depth=0):
    for change, items in out.diffs:
        if change in ('insert', 'delete'):
            prefix = '-' if change == 'delete' else '+'
            for line in items:
                f.write('{}{}{}&lt;br/&gt;'.format(prefix, depth * ' ', line))
        elif change == 'datadiff':
            output(items, f, depth + 1)
            f.write(',')

output(out, f)
</snippet></ROW><ROW><id>19656962</id><snippet>str.splitlines()</snippet></ROW><ROW><id>19656962</id><snippet>for line in str(out).splitlines():
    # etc.
</snippet></ROW><ROW><id>19657083</id><snippet>both = [ random.randint(0, 500) for i in range(100) ]
odd = [ x for x in both if x % 2 == 1 ]
even = [ x for x in both if x % 2 == 0 ]
</snippet></ROW><ROW><id>19657257</id><snippet>s1 = "The cat Went to The store To get Some food doNotMatch"
r1 = re.compile('\\b[A-Z]\w+')
r1.sub('',s1)
' cat  to  store  get  food doNotMatch'
</snippet></ROW><ROW><id>19657366</id><snippet>0xbd</snippet></ROW><ROW><id>19657366</id><snippet>\xc2\xbd</snippet></ROW><ROW><id>19657457</id><snippet>child_methods = [] # a list of all the methods in `Child`

class Parent(object):
    def parent_method(self):
        print "parent_method() called"
        method = child_methods[0]
        method(self)

class Child(Parent):
    def child_method(self):
        print "child_method() called"

# add child_method to child_methods
child_methods.append(Child.child_method)
</snippet></ROW><ROW><id>19657457</id><snippet>child_methods[0]</snippet></ROW><ROW><id>19657457</id><snippet>Child.child_method</snippet></ROW><ROW><id>19657457</id><snippet>Child</snippet></ROW><ROW><id>19657457</id><snippet>self</snippet></ROW><ROW><id>19657457</id><snippet>Child</snippet></ROW><ROW><id>19657457</id><snippet>child_obj = Child()
bound_child_method = child_obj.child_method
</snippet></ROW><ROW><id>19657457</id><snippet># A dummy class to hold attributes
class Foo(object):
    pass

Foo.bar = 123 # we're adding an attribute to the type itself

foo1 = Foo()
print foo1.bar # prints 123
foo1.bar = 456 # this `bar` attribute "hides" the one on the type
print foo1.bar # prints 456
foo2 = Foo()
print foo2.bar # prints the 123 from the type again
</snippet></ROW><ROW><id>19657457</id><snippet>commands</snippet></ROW><ROW><id>19657457</id><snippet>B</snippet></ROW><ROW><id>19657457</id><snippet>B</snippet></ROW><ROW><id>19657678</id><snippet>def print_lol(the_list):
"""this doesn't works"""
</snippet></ROW><ROW><id>19657678</id><snippet>def print_lol(the_list):
    """this works!"""
</snippet></ROW><ROW><id>19657678</id><snippet>#</snippet></ROW><ROW><id>19657678</id><snippet>def print_lol(the_list):
#this works, too!
</snippet></ROW><ROW><id>19657934</id><snippet>objects=models.Manager()</snippet></ROW><ROW><id>19657934</id><snippet>live=LiveManager()</snippet></ROW><ROW><id>19657944</id><snippet># Sequential wait to finish before moving onto the next script
try: 
    execfile("SUBSCRIPTS/TESTSCRIPT.py", {})
except Exception:
    errors.write(traceback.format_exc() + '\n')
    errors.write("\n\n")

# Semi-Sequential (Don't wait for it to finish before moving onto the third script)
p1 = subprocess.Popen(["pythonw", "SUBSCRIPTS/TEST.py", "0"], shell=True)

# Sequential wait to finish before moving onto the next script
try: 
    execfile("SUBSCRIPTS/TEST.py", {})
except Exception:
    errors.write(traceback.format_exc() + '\n')
    errors.write("\n\n")

#Do you want to kill the "pythonw", "SUBSCRIPTS/TEST.py", "0" command after the "SUBSCRIPTS/TEST.py" call or do you want to allow the pythonw command to continue running until after the "SUBSCRIPTS/TESTSCRIPT.py"

#you need to put this code depending on where the subprocess.Popen(["pythonw", "SUBSCRIPTS/TEST.py", "0"], shell=True) #script needs to be killed
currentStatus = p1.poll()
if currentStatus is None: #then it is still running
  try:
    p1.kill() #maybe try os.kill(p1.pid,2) if p1.kill does not work
  except:
    #do something else if process is done running - maybe do nothing?
    pass

# Sequential wait to finish before moving onto the next script
try: 
    execfile("SUBSCRIPTS/TESTSCRIPT.py", {})
except Exception:
    errors.write(traceback.format_exc() + '\n')
    errors.write("\n\n")

#or put the code snippet here if you want to allow the pythonw command to continue running until after the SUBSCRIPTS/TESTSCRIPT.py command
</snippet></ROW><ROW><id>19658457</id><snippet>apt-get</snippet></ROW><ROW><id>19658457</id><snippet>/usr/lib/python3/dist-packages</snippet></ROW><ROW><id>19658457</id><snippet>locate sqlalchemy</snippet></ROW><ROW><id>19658457</id><snippet>/opt/python3.3/bin/python3.3 setup.py install</snippet></ROW><ROW><id>19658750</id><snippet>class Player:
   def __init(self):
       self.score=0
   def collision():
      if player_rect.coliderect(baddie_rect):
           self.score +=1


class main():
    player = Player()
    player.collision()
    print(player.score)
</snippet></ROW><ROW><id>19658750</id><snippet>score</snippet></ROW><ROW><id>19658750</id><snippet>self.score</snippet></ROW><ROW><id>19658859</id><snippet>print(list(data))
</snippet></ROW><ROW><id>19658859</id><snippet>print(next(key for key, value in data.items() if value == something))
</snippet></ROW><ROW><id>19658859</id><snippet>&gt;&gt;&gt; data = {'a': 1, 'aa': 2, 'b': 3, 'cd': 4}
&gt;&gt;&gt; list(data)
['cd', 'a', 'b', 'aa']
&gt;&gt;&gt; data['f'] = 1
&gt;&gt;&gt; list(data)
['cd', 'a', 'b', 'aa', 'f']
&gt;&gt;&gt; del data['a']
&gt;&gt;&gt; list(data)
['cd', 'b', 'aa', 'f']
&gt;&gt;&gt; data[1] = 1
&gt;&gt;&gt; list(data)
['cd', 1, 'b', 'aa', 'f']
&gt;&gt;&gt; for c in ('cde', 'fgh', 'ijk', 'rmn'):
...     data[c] = 1
... 
&gt;&gt;&gt; list(data)
[1, 'aa', 'cde', 'cd', 'rmn', 'b', 'ijk', 'fgh', 'f']
</snippet></ROW><ROW><id>19659029</id><snippet>chunksize</snippet></ROW><ROW><id>19659029</id><snippet>chunksize = num_tasks / (num_processes * 4)</snippet></ROW><ROW><id>19659145</id><snippet>print</snippet></ROW><ROW><id>19659145</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>19659145</id><snippet>import sys

def square(n):
    for i in range(n):
        for j in range(n):
            if i==0 or j==0 or i==n-1 or j==n-1: sys.stdout.write("*")
            else: sys.stdout.write("+")
        print
</snippet></ROW><ROW><id>19659145</id><snippet>print</snippet></ROW><ROW><id>19659145</id><snippet>sys.stdout</snippet></ROW><ROW><id>19659145</id><snippet>print()</snippet></ROW><ROW><id>19659145</id><snippet>from __future__ import print_function

def square(n):
    for i in range(n):
        for j in range(n):
            if i==0 or j==0 or i==n-1 or j==n-1: print("*", end='')
            else: print("+", end='')
        print()
</snippet></ROW><ROW><id>19659145</id><snippet>''.join()</snippet></ROW><ROW><id>19659145</id><snippet>def square(n):
    for i in range(n):
        print ''.join(['*' if i in (0, n-1) or j in (0, n-1) else '+' for j in xrange(n)])
</snippet></ROW><ROW><id>19659371</id><snippet>def find_max(s):
    _ret = []

    def string_iter(concat, compare):

        def appender():
            if len(concat) &gt;= len(_ret[-1]):
                if len(concat) &gt; len(_ret[-1]):
                    while _ret:
                        _ret.pop()
                _ret.append(concat)

        if len(compare) == 0:
            if len(_ret) != 0:
                appender()
            else:
                _ret.append(concat)
            return

        if concat[-1] &lt; compare[0]:
            concat += compare[0]
            string_iter(concat, compare[1:])
        else:
            if len(_ret) != 0:
                appender()
            else:
                _ret.append(concat)
            string_iter(compare[0], compare[1:])

    string_iter(s[0], s[1:])

    return _ret

print find_max('abc')      # --&gt;['abc']
print find_max('afz')      # --&gt;['afz']
print find_max('cba')      # --&gt;['c','b','a']
print find_max('zfa')      # --&gt;['z','f','a']
print find_max('abczabc')  # --&gt; ['abcz']
print find_max('abcabcpaidfbkjabdsfilabdfkabldfjadf')   # --&gt; ['abcp', 'abdfk']
</snippet></ROW><ROW><id>19659434</id><snippet>__getattr__</snippet></ROW><ROW><id>19659434</id><snippet>__getattribute__</snippet></ROW><ROW><id>19659434</id><snippet>AttributeError</snippet></ROW><ROW><id>19659434</id><snippet>import random

class AttributeGenerator(object):
    def __getattr__(self, attr):
        if random.random() &lt; 0.5:
            setattr(self, attr, None)
            return getattr(self, attr) 
        else:
            raise AttributeError(attr)
</snippet></ROW><ROW><id>19659434</id><snippet>dir()</snippet></ROW><ROW><id>19659434</id><snippet>vars()</snippet></ROW><ROW><id>19659434</id><snippet>dir()</snippet></ROW><ROW><id>19659434</id><snippet>__dict__</snippet></ROW><ROW><id>19659434</id><snippet>__slots__</snippet></ROW><ROW><id>19659434</id><snippet>__dict__</snippet></ROW><ROW><id>19659434</id><snippet>dir()</snippet></ROW><ROW><id>19659434</id><snippet>__dir__</snippet></ROW><ROW><id>19659434</id><snippet>attributes = list(object.__dict__.keys()) + list(obj.__slots__) + list(type(obj).__dict__)
</snippet></ROW><ROW><id>19659434</id><snippet>dir()</snippet></ROW><ROW><id>19659728</id><snippet>multipart/form-data</snippet></ROW><ROW><id>19659728</id><snippet>json.dumps</snippet></ROW><ROW><id>19659728</id><snippet>'{"client_id": 1, "folder_id": 2, "advert_id": 3, "image_type": "jpeg", "crop_image": true}'
</snippet></ROW><ROW><id>19659728</id><snippet>multipart/form-data</snippet></ROW><ROW><id>19659728</id><snippet>files</snippet></ROW><ROW><id>19659728</id><snippet>Content-Type</snippet></ROW><ROW><id>19659728</id><snippet>multipart/form-data</snippet></ROW><ROW><id>19659728</id><snippet>json.dumps</snippet></ROW><ROW><id>19659728</id><snippet>data</snippet></ROW><ROW><id>19659728</id><snippet>files=files)</snippet></ROW><ROW><id>19659856</id><snippet>text[start_of_price:end_of_price]</snippet></ROW><ROW><id>19659856</id><snippet>!DOC</snippet></ROW><ROW><id>19659870</id><snippet>dlopen</snippet></ROW><ROW><id>19659870</id><snippet>dlsym</snippet></ROW><ROW><id>19659870</id><snippet>dlclose</snippet></ROW><ROW><id>19660128</id><snippet>dataChanged(QModelIndex,QModelIndex)</snippet></ROW><ROW><id>19660128</id><snippet>setData</snippet></ROW><ROW><id>19660128</id><snippet>changeColor</snippet></ROW><ROW><id>19660128</id><snippet>def changeColor(self, model):
    model.setData(model.index(1, 5), 1)
    model.setData(model.index(2, 5), 2)
    model.emit(QtCore.SIGNAL('dataChanged(QModelIndex,QModelIndex)'), model.index(1, 5), model.index(2, 5))
</snippet></ROW><ROW><id>19660233</id><snippet>z</snippet></ROW><ROW><id>19660233</id><snippet>*</snippet></ROW><ROW><id>19660233</id><snippet>list</snippet></ROW><ROW><id>19660233</id><snippet>tuple</snippet></ROW><ROW><id>19660233</id><snippet>str</snippet></ROW><ROW><id>19660233</id><snippet>*</snippet></ROW><ROW><id>19660233</id><snippet>*z</snippet></ROW><ROW><id>19660233</id><snippet>z</snippet></ROW><ROW><id>19660233</id><snippet>def f(x, y, z):
    k = x(z)
    l = y(z)
    return k == l
</snippet></ROW><ROW><id>19660233</id><snippet>def f(x, y, *z):
    k = x(*z)
    l = y(*z)
    return k == l
</snippet></ROW><ROW><id>19660233</id><snippet>f(math.pow, math.log, 10, 10)
</snippet></ROW><ROW><id>19660233</id><snippet>**kw</snippet></ROW><ROW><id>19660233</id><snippet>def f(x, y, *args, **kwargs):
    k = x(*args, **kwargs)
    l = y(*args, **kwargs)
    return k == l
</snippet></ROW><ROW><id>19660233</id><snippet>z</snippet></ROW><ROW><id>19660233</id><snippet>args</snippet></ROW><ROW><id>19660341</id><snippet>import wx
import wx.grid as grid

class MainPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent = parent)

        self.txtOne = wx.StaticText(self, -1, label = "piradoba", pos = (20,10))
        self.txtPlace = wx.TextCtrl(self, pos = (20,30))
        self.txtTwo = wx.StaticText(self, -1, label = "", pos = (20,40))

        button = wx.Button(self, label = "search", pos = (20,70))
        button.Bind(wx.EVT_BUTTON, self.onButton)

    def onButton(self, event):
        var=self.txtPlace.GetValue()
        if len(var) == 9 or len(var) == 11:
            print "???"
        # MainPanel-&gt;SplitterWindow-&gt;MainFrame ( 2x GetParent() )
        self.GetParent().GetParent().AddPanel()

class SecondPanel(wx.Panel):

    def __init__(self, parent,a,b):
        """Constructor"""
        wx.Panel.__init__(self, parent=parent)

        MyGrid=grid.Grid(self)
        MyGrid.CreateGrid(a, b)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(MyGrid, 0, wx.EXPAND)
        self.SetSizer(sizer)

class MainFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="test", size=(800,600))

        self.splitter = wx.SplitterWindow(self)

        self.panelOne = MainPanel(self.splitter)
        self.panelTwo = SecondPanel(self.splitter, 1, 1)

        self.splitter.SplitHorizontally(self.panelOne, self.panelTwo)
        self.splitter.SetMinimumPaneSize(20)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.splitter, 2, wx.EXPAND)

        self.SetSizer(self.sizer)

    def AddPanel(self):
        self.newPanel = SecondPanel(self, 1, 1)
        self.sizer.Add(self.newPanel, 1, wx.EXPAND)
        self.sizer.Layout()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>19660903</id><snippet>re.sub</snippet></ROW><ROW><id>19660903</id><snippet>&gt;&gt;&gt; pattern = "(-?\d+)|(\+1)"
&gt;&gt;&gt; def sub_one(match):
        return str(int(match.group(0)) - 1)

&gt;&gt;&gt; text = "foo 15 bar -2hello 4 asdf+2"
&gt;&gt;&gt; re.sub(pattern, sub_one, text)
'foo 14 bar -3hello 3 asdf+1'
</snippet></ROW><ROW><id>19660903</id><snippet>(-?\d+)|(\+1)</snippet></ROW><ROW><id>19660903</id><snippet>-</snippet></ROW><ROW><id>19660903</id><snippet>+1</snippet></ROW><ROW><id>19660903</id><snippet>(-?\d+)</snippet></ROW><ROW><id>19660903</id><snippet>(\+1)</snippet></ROW><ROW><id>19660903</id><snippet>+1</snippet></ROW><ROW><id>19660903</id><snippet>+1</snippet></ROW><ROW><id>19660903</id><snippet>+0</snippet></ROW><ROW><id>19660903</id><snippet>(-?d+)</snippet></ROW><ROW><id>19660903</id><snippet>def replace_digits(text):
    return re.sub("(-?\d+)|(\+1)", lambda m: str(int(m.group(0)) - 1), text)
</snippet></ROW><ROW><id>19661004</id><snippet>\b</snippet></ROW><ROW><id>19661004</id><snippet>.</snippet></ROW><ROW><id>19661004</id><snippet>\b</snippet></ROW><ROW><id>19661004</id><snippet>re</snippet></ROW><ROW><id>19661004</id><snippet>1.</snippet></ROW><ROW><id>19661004</id><snippet>1</snippet></ROW><ROW><id>19661004</id><snippet>re.escape()</snippet></ROW><ROW><id>19661004</id><snippet>.</snippet></ROW><ROW><id>19661004</id><snippet>re.search(r"%s(?:\s|$)" % re.escape(Str2), Str1, re.IGNORECASE)
</snippet></ROW><ROW><id>19661004</id><snippet>(?:...)</snippet></ROW><ROW><id>19661004</id><snippet>|</snippet></ROW><ROW><id>19661004</id><snippet>\s</snippet></ROW><ROW><id>19661004</id><snippet>$</snippet></ROW><ROW><id>19661004</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; Str1 = "1. how are you doing"
&gt;&gt;&gt; Str2 = "1."
&gt;&gt;&gt; re.search(r"%s(?:\s|$)" % re.escape(Str2), Str1, re.IGNORECASE)
&lt;_sre.SRE_Match object at 0x10457eed0&gt;
&gt;&gt;&gt; _.group(0)
'1. '
</snippet></ROW><ROW><id>19661035</id><snippet>pip install -e .</snippet></ROW><ROW><id>19661035</id><snippet>django-training</snippet></ROW><ROW><id>19661035</id><snippet>setup.py</snippet></ROW><ROW><id>19661171</id><snippet>user_ns = users.get_current_user().user_id()
entity_ns = my_entity.key.namespace()      # NDB datastore
# entity_ns = my_entity.key().namespace()  # DB datastore
if user_ns == entity_ns:
    # Save the entity if the namespaces are the same
    my_entity.put()
</snippet></ROW><ROW><id>19661248</id><snippet>store['Store']
</snippet></ROW><ROW><id>19661248</id><snippet>newstore = store.copy()
newstore['Store'] = { ... }
</snippet></ROW><ROW><id>19661331</id><snippet>import matplotlib.pyplot as pyplot
import numpy

x = range(5)
k = numpy.array([(1.,0.001), (1.1, 0.002), (numpy.nan, numpy.nan), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()

# This plots a gap---as desired
ax.plot(x, k[:,0], 'k-')

ax.plot(range(len(y)), y[:,0]+y[:,1], 'k--')
</snippet></ROW><ROW><id>19661331</id><snippet>import matplotlib.pyplot as pyplot
import numpy

x = range(5)
y = numpy.array([(1.,0.001), (1.1, 0.002), (numpy.nan, numpy.nan), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()


ax.plot(range(len(y)), y[:,0]+y[:,1], 'k--')
import matplotlib.pyplot as pyplot
import numpy

x = range(5)
k = numpy.array([(1.,0.001), (1.1, 0.002), (None, None), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()

# This plots a gap---as desired
ax.plot(x, k[:,0], 'k-')

# I'd like to plot
#     k[:,0] + k[:,1]
# but I can't add None

arr_none = np.array([None])
mask = (k[:,0] == arr_none) | (k[:,1] == arr_none)

ax.plot(numpy.arange(len(y))[mask], k[mask,0]+k[mask,1], 'k--')
</snippet></ROW><ROW><id>19661700</id><snippet>aList = [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30]]
bList = []

i = 0

for a, b, c, d, e in aList:
    tempC = c
    tempD = d

    tempX = tempC * 2
    tempY = tempD * 2

    if tempX &gt;= 50:
        bList.append(aList[i]+ [tempX,tempY])
    i += 1

print bList
</snippet></ROW><ROW><id>19661835</id><snippet>DLL.SimpleMath</snippet></ROW><ROW><id>19661835</id><snippet>c_double</snippet></ROW><ROW><id>19661835</id><snippet>DLL.SimpleMath.restype = c_double</snippet></ROW><ROW><id>19661835</id><snippet>out = c_double()</snippet></ROW><ROW><id>19662005</id><snippet>raw_input</snippet></ROW><ROW><id>19662005</id><snippet>import getpass

user = raw_input("Username:")
passwd = getpass.getpass("Password for " + user + ":")

print("Got", user, passwd)
</snippet></ROW><ROW><id>19662005</id><snippet>Username:iCodez
Password for iCodez:
('Got', 'iCodez', 'secret')
</snippet></ROW><ROW><id>19662361</id><snippet>plt.xticks(np.arange(0,10), neworder)
plt.yticks(np.arange(0,10), neworder)
</snippet></ROW><ROW><id>19662361</id><snippet>matshow</snippet></ROW><ROW><id>19662361</id><snippet>matshow</snippet></ROW><ROW><id>19662361</id><snippet>plot</snippet></ROW><ROW><id>19662361</id><snippet>matshow</snippet></ROW><ROW><id>19662361</id><snippet>plt.matshow(D)</snippet></ROW><ROW><id>19662361</id><snippet>plt.xticks</snippet></ROW><ROW><id>19662361</id><snippet>plt.yticks</snippet></ROW><ROW><id>19662361</id><snippet>set_ticks</snippet></ROW><ROW><id>19662361</id><snippet>axis</snippet></ROW><ROW><id>19662361</id><snippet>matshow</snippet></ROW><ROW><id>19662361</id><snippet>ax = plt.gca()
ax.xaxis.set_ticks(np.arange(0,10))  # turn on all tick locations
ax.xaxis.set_ticklabels(neworder)    # use neworder for labels
</snippet></ROW><ROW><id>19662361</id><snippet>ax = plt.gca()
ax.xaxis.set_major_locator(plt.MaxNLocator(nbins=3))  # one less tick than 'bin'
tl = ax.xaxis.get_ticklocs()                          # get current tick locations
tl[1:-1] = [neworder[idx] for idx in tl[1:-1]]        # find what the labels should be at those locs
ax.xaxis.set_ticklabels(tl)                           # set the labels
plt.draw()
</snippet></ROW><ROW><id>19662661</id><snippet>In [1]: import pandas as pd

In [5]: data = [{'a': 2, 'g': 1},{'p': 3, 'a': 5, 'cat': 4}]

In [6]: df = pd.DataFrame(data)

In [7]: df
Out[7]: 
   a  cat   g   p
0  2  NaN   1 NaN
1  5    4 NaN   3

In [9]: df = df.fillna(0)

In [10]: df
Out[10]: 
   a  cat  g  p
0  2    0  1  0
1  5    4  0  3
</snippet></ROW><ROW><id>19662661</id><snippet>df.to_csv('filename.csv')
</snippet></ROW><ROW><id>19662688</id><snippet>import Image</snippet></ROW><ROW><id>19662688</id><snippet>im</snippet></ROW><ROW><id>19662688</id><snippet>imread</snippet></ROW><ROW><id>19662688</id><snippet>Image.open</snippet></ROW><ROW><id>19662688</id><snippet>x_min</snippet></ROW><ROW><id>19662688</id><snippet>import matplotlib.pyplot as plt
im = plt.imread("/...image_%03i.tif" % (index))
submatrix = im[x_min:x_max, y_min:y_max]
plt.figure(1)
plt.imshow(submatrix)
plt.show()
</snippet></ROW><ROW><id>19662865</id><snippet>cd
ls -a
</snippet></ROW><ROW><id>19662865</id><snippet>cd /usr/local
ls | grep -i homebrew
</snippet></ROW><ROW><id>19662865</id><snippet># .bashrc

# User specific aliases and functions
. .alias
alias ducks='du -cks * | sort -rn | head -15'

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

PATH=$PATH:/home/username/bin:/usr/local/homebrew
export PATH
</snippet></ROW><ROW><id>19662865</id><snippet># Get the aliases and functions
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
</snippet></ROW><ROW><id>19663050</id><snippet>from bs4 import BeautifulSoup, SoupStrainer
import urllib2
import re

def main():
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', 'Mozilla/5.0')]
    url = 'http://www.cnn.com/2013/10/29/us/florida-shooting-cell-phone-blocks-bullet/index.html?hpt=ju_c2'
    soup = BeautifulSoup(opener.open(url))
    #1) Link to the website 

    #2) Date article published 
    date = soup.find("div", {"class":"cnn_strytmstmp"}).text.encode('utf-8')
    #3) title of article 
    title = soup.find("div", {"id":"cnnContentContainer"}).find('h1').text.encode('utf-8')
    #4) Text of the article
    paragraphs = soup.find('div', {"class":"cnn_strycntntlft"}).find_all('p')
    text = " ".join([ paragraph.text.encode('utf-8') for paragraph in paragraphs])

    print url
    print date
    print title 
    print text

if __name__ == '__main__':   
     main()
</snippet></ROW><ROW><id>19663050</id><snippet>http://www.cnn.com/2013/10/29/us/florida-shooting-cell-phone-blocks-bullet/index.html?hpt=ju_c2
updated 7:34 AM EDT, Tue October 29, 2013
Cell phone stops bullet aimed at Florida gas station clerk
(CNN) -- A gas station clerk's smartphone may... the TV station reported. 
</snippet></ROW><ROW><id>19663402</id><snippet>int</snippet></ROW><ROW><id>19663402</id><snippet>if(int(my_list[j]) &gt; int(my_list[j+1])):</snippet></ROW><ROW><id>19663402</id><snippet>python natural sort</snippet></ROW><ROW><id>19663414</id><snippet>ProjectiveTransform</snippet></ROW><ROW><id>19663414</id><snippet>PiecewiseAffineTransform</snippet></ROW><ROW><id>19663462</id><snippet>pygtk-all-in-one-2.24.2.win32-py2.7.msi
(and)
pygtk-all-in-one-2.22.6.win32-py2.7.msi
</snippet></ROW><ROW><id>19663580</id><snippet>lineterminator ="\n"</snippet></ROW><ROW><id>19663580</id><snippet>from BeautifulSoup import BeautifulSoup
import csv 

import urllib2

url="http://www.conakat.com/states/ohio/cities/defiance/road_maps/"

page=urllib2.urlopen(url)

soup = BeautifulSoup(page.read())


f = csv.writer(open("Defiance Steets1.csv", "w"), lineterminator ="\n")
f.writerow(["Street", "Zipcode"]) # Write column headers as the first line

#print soup.
links = soup.findAll('a')

for link in links:
    #i = link.find_next_sibling('i')
    i = link.findNextSibling('i')
    if getattr(i, 'name', None):
        a, i = link.string, i.string[1:-1] 
        print [a,i]
        f.writerow([a, i])
</snippet></ROW><ROW><id>19663594</id><snippet>int</snippet></ROW><ROW><id>19663594</id><snippet>input = "01 02 03 04"
s = input[0:2]
&gt;&gt;&gt; int(s, 16)
1
&gt;&gt;&gt; int('FF', 16)
255
</snippet></ROW><ROW><id>19663817</id><snippet>&gt;&gt;&gt; np.array([np.ones(3), np.ones(3)])
array([[ 1.,  1.,  1.],
       [ 1.,  1.,  1.]])
</snippet></ROW><ROW><id>19663817</id><snippet>&gt;&gt;&gt; np.array([np.ones(3), np.ones(7)])
array([array([ 1.,  1.,  1.]), array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.])], dtype=object)
</snippet></ROW><ROW><id>19663817</id><snippet>object</snippet></ROW><ROW><id>19663817</id><snippet>c</snippet></ROW><ROW><id>19663817</id><snippet>(2, 3)</snippet></ROW><ROW><id>19663817</id><snippet>(2,)</snippet></ROW><ROW><id>19663817</id><snippet>c</snippet></ROW><ROW><id>19663817</id><snippet>(2, 1)</snippet></ROW><ROW><id>19663817</id><snippet>&gt;&gt;&gt; grid_mod * c[:, np.newaxis]
array([[  9.,   9.,   9.],
       [ 11.,  11.,  11.]])
</snippet></ROW><ROW><id>19663817</id><snippet>c</snippet></ROW><ROW><id>19663817</id><snippet>(2,)</snippet></ROW><ROW><id>19663817</id><snippet>c = np.random.rand(10000)
a = np.random.rand(10000, 3)
b = np.empty((10000,), dtype=object)
for j in xrange(10000):
    b[j] = a[j]

%timeit a*c[:, np.newaxis]
10000 loops, best of 3: 176 us per loop

%timeit b*c
10 loops, best of 3: 16.5 ms per loop
</snippet></ROW><ROW><id>19663901</id><snippet>&gt;&gt; ciphertext
=&gt; "\xD6\x83\x8Dd!VT\x92\xAA`A\x05\xE0\x9B\x8B\xF1\xD5f\xC7\xFFNI\xC7N\xBC-;!\f\xF1!\xB4"
&gt;&gt; ciphertext.bytes
=&gt; [214, 131, 141, 100, 33, 86, 84, 146, 170, 96, 65, 5, 224, 155, 139, 241, 213, 102, 199, 255, 78, 73, 199, 78, 188, 45, 59, 33, 12, 241, 33, 180]
</snippet></ROW><ROW><id>19663901</id><snippet>Cipher</snippet></ROW><ROW><id>19663901</id><snippet>padding</snippet></ROW><ROW><id>19663901</id><snippet>&gt;&gt; require 'openssl'
=&gt; true
&gt;&gt; obj2 = OpenSSL::Cipher::Cipher.new("AES-128-CBC")
=&gt; #&lt;OpenSSL::Cipher::Cipher:0x007fe62407a9b0&gt;
&gt;&gt; obj2.decrypt
=&gt; #&lt;OpenSSL::Cipher::Cipher:0x007fe62407a9b0&gt;
&gt;&gt; obj2.key = 'This is a key123'
=&gt; "This is a key123"
&gt;&gt; obj2.iv = 'This is an IV456'
=&gt; "This is an IV456"
&gt;&gt; obj2.padding = 0
=&gt; 0
&gt;&gt; ciphertext = [214, 131, 141, 100, 33, 86, 84, 146, 170, 96, 65, 5, 224, 155, 139, 241].pack('c*')
=&gt; "\xD6\x83\x8Dd!VT\x92\xAA`A\x05\xE0\x9B\x8B\xF1"
&gt;&gt; obj2.update(ciphertext) + obj2.final
=&gt; "The answer is no"
</snippet></ROW><ROW><id>19663965</id><snippet>precommit = java -jar YourJarFile.jar ...arguments...
</snippet></ROW><ROW><id>19664135</id><snippet>import turtle

turtle.colormode(255)

for i in range(0,255,15):
    turtle.pencolor(i,i,i)
    turtle.write("Hello")
    turtle.delay(100)
</snippet></ROW><ROW><id>19664204</id><snippet>values = [val1, val2, val3]
values_str = json.dumps(values)

# Then read it back
values = json.loads(values_str)
</snippet></ROW><ROW><id>19664204</id><snippet>import ast
values = ast.literal_eval(values_str)
values = [json.loads(item) for item in values]
</snippet></ROW><ROW><id>19664259</id><snippet>locations.append(x)
</snippet></ROW><ROW><id>19664259</id><snippet>locations.append([x])
</snippet></ROW><ROW><id>19664259</id><snippet> ##Some loop to go through rows
    row = []
    ##Some loop structure
        row.append([x,y])
    locations.append(row)
</snippet></ROW><ROW><id>19664269</id><snippet>os.chdir(os.path.join(path, asset_name))
</snippet></ROW><ROW><id>19664308</id><snippet>dlopen()</snippet></ROW><ROW><id>19664308</id><snippet>sys.setdlopenflags()</snippet></ROW><ROW><id>19664308</id><snippet>sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)</snippet></ROW><ROW><id>19664308</id><snippet>&gt;&gt;&gt; import myTest
&gt;&gt;&gt; myTest.run()
/usr/bin/python: undefined symbol: target_func
</snippet></ROW><ROW><id>19664308</id><snippet>dlopen()</snippet></ROW><ROW><id>19664308</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; import dl
&gt;&gt;&gt; sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)
&gt;&gt;&gt; import myTest
&gt;&gt;&gt; myTest.run()
Works!
</snippet></ROW><ROW><id>19664337</id><snippet>def confirm_with_user():
    user_data = ""
    while user_data not in "YyYesNnNo":
        user_data = input("Are you sure? (Y/N) ")

    return user_data.lower() in "yes":
</snippet></ROW><ROW><id>19664337</id><snippet>if confirm_with_user():
    #proceed...
else:
    #They don't want to proceed
</snippet></ROW><ROW><id>19664467</id><snippet>r = requests.put(url, data=json.dumps([nfe, nfe_itens])
</snippet></ROW><ROW><id>19664542</id><snippet>copy</snippet></ROW><ROW><id>19664588</id><snippet>self.t0.config(fg="red")
</snippet></ROW><ROW><id>19664588</id><snippet>self.t0["fg"] = "red"
</snippet></ROW><ROW><id>19664588</id><snippet>self.t0 = Label(frame, fg="blue", textvariable=self.temp0,font=(20)).grid(row=2, column=0)
</snippet></ROW><ROW><id>19664588</id><snippet>self.t0 = Label(frame, fg="blue", textvariable=self.temp0,font=(20))
self.t0.grid(row=2, column=0)
</snippet></ROW><ROW><id>19664588</id><snippet>self.t0</snippet></ROW><ROW><id>19664588</id><snippet>.grid</snippet></ROW><ROW><id>19664588</id><snippet>None</snippet></ROW><ROW><id>19664685</id><snippet>div = self.driver.find_element_by_class_name('someclass')
div.find_element_by_css_selector('a').get_attribute('href')
</snippet></ROW><ROW><id>19664819</id><snippet>In [6]: [a] + d
Out[6]: [[1, 2, 3], [4, 5], [6, 7, 8, 9]]
</snippet></ROW><ROW><id>19664819</id><snippet>d</snippet></ROW><ROW><id>19664819</id><snippet>[a] + list(d)
</snippet></ROW><ROW><id>19664854</id><snippet>open</snippet></ROW><ROW><id>19664854</id><snippet>with open(outputFile, 'rb') as fh:
</snippet></ROW><ROW><id>19664854</id><snippet>outputFile</snippet></ROW><ROW><id>19664854</id><snippet>file</snippet></ROW><ROW><id>19664854</id><snippet>open</snippet></ROW><ROW><id>19664854</id><snippet>open</snippet></ROW><ROW><id>19664854</id><snippet>outputFile</snippet></ROW><ROW><id>19664854</id><snippet>outputFile = open(outputFile, 'wb+')
</snippet></ROW><ROW><id>19664854</id><snippet>outputFile</snippet></ROW><ROW><id>19664854</id><snippet>filePath</snippet></ROW><ROW><id>19665231</id><snippet>default_list=None</snippet></ROW><ROW><id>19665231</id><snippet>default_list = default_list or None</snippet></ROW><ROW><id>19665357</id><snippet>"step_id": "\i"</snippet></ROW><ROW><id>19665357</id><snippet>for i in FUNNEL_STEP_ARRAY:
    y = db.external_funnel.find({
        "step_id": i, 
        "client_timestamp": {"$regex": "2013-10-25T"},
        "application_id":"6083502215600857441"
    }).distinct("user_id")
    print(len(y))
</snippet></ROW><ROW><id>19665357</id><snippet>i</snippet></ROW><ROW><id>19665357</id><snippet>for step_id in FUNNEL_STEP_ARRAY:
    y = db.external_funnel.find({
        "step_id": step_id, 
        "client_timestamp": {"$regex": "2013-10-25T"},
        "application_id":"6083502215600857441"
    }).distinct("user_id")
    print(len(y))
</snippet></ROW><ROW><id>19665438</id><snippet>plt.colorbar</snippet></ROW><ROW><id>19665438</id><snippet>import pylab as plt

plt.imshow([[1,2,3],[4,5,6]])

cbar_options = {'extend':'both',
                'orientation':"horizontal",
                'shrink':0.75,
                'fraction':.10,
                'pad':.07}

cb1 = plt.colorbar(**cbar_options)
cb1.set_label('Increase in Black Carbon')

cb2 = plt.colorbar(**cbar_options)
cb2.set_label('Decrease in Black Carbon')

plt.show()
</snippet></ROW><ROW><id>19665616</id><snippet>import numpy as np
import scipy.optimize as opt

#Some variables
cost = np.array([1.800, 0.433, 0.180])
p = np.array([0.480, 0.080, 0.020])
e = np.array([0.744, 0.800, 0.142])

#Our function
fun = lambda x: np.sum(x*cost)

#Our conditions
cond = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 100},
        {'type': 'ineq', 'fun': lambda x: np.sum(p*x) - 24},
        {'type': 'ineq', 'fun': lambda x: np.sum(e*x) - 76},
        {'type': 'ineq', 'fun': lambda x: -1*x[2] + 2})


bnds = ((0,100),(0,100),(0,100))
guess = [20,30,50]
opt.minimize(fun, guess, method='SLSQP', bounds=bnds, constraints = cond)
</snippet></ROW><ROW><id>19665616</id><snippet>eq</snippet></ROW><ROW><id>19665616</id><snippet>ineq</snippet></ROW><ROW><id>19665616</id><snippet>  status: 0
 success: True
    njev: 4
    nfev: 21
     fun: 97.884100000000345
       x: array([ 40.3,  57.7,   2. ])
 message: 'Optimization terminated successfully.'
     jac: array([ 1.80000019,  0.43300056,  0.18000031,  0.        ])
     nit: 4
</snippet></ROW><ROW><id>19665616</id><snippet>output = np.array([ 40.3,  57.7,   2. ])

np.sum(output) == 100
True
round(np.sum(p*output),8) &gt;= 24
True
round(np.sum(e*output),8) &gt;= 76
True
</snippet></ROW><ROW><id>19665616</id><snippet>np.sum(p*output)
23.999999999999996
</snippet></ROW><ROW><id>19665862</id><snippet>__init__</snippet></ROW><ROW><id>19665862</id><snippet>myclass1</snippet></ROW><ROW><id>19665862</id><snippet>myclass2</snippet></ROW><ROW><id>19665862</id><snippet>myclass2</snippet></ROW><ROW><id>19665862</id><snippet>__init__</snippet></ROW><ROW><id>19665862</id><snippet>myclass1</snippet></ROW><ROW><id>19666144</id><snippet>for d in inputlist:
    words = d['stim'].split(',')
    d['stim'] = words[0]
    d.update(('stim{}'.format(i), word) for i, word in enumerate(words[1:], 1))
</snippet></ROW><ROW><id>19666144</id><snippet>d['stim']</snippet></ROW><ROW><id>19666144</id><snippet>,</snippet></ROW><ROW><id>19666238</id><snippet> gcc -L/usr/lib/i386-linux-gnu  -o ice2mysql2 ice2mysql2.c -lxml2 -lmysqlclient
</snippet></ROW><ROW><id>19666303</id><snippet>BaseException</snippet></ROW><ROW><id>19666303</id><snippet>object</snippet></ROW><ROW><id>19666303</id><snippet>e</snippet></ROW><ROW><id>19666303</id><snippet>except ValueError:
    print "the input is Invaild(dd.mm.year)"
except BaseException as e:
    print "Unknown error"
    print e
</snippet></ROW><ROW><id>19666303</id><snippet>Exception</snippet></ROW><ROW><id>19666303</id><snippet>except ValueError:
    print "the input is Invaild(dd.mm.year)"
except Exception as e:
    print "Unknown error"
    print e
</snippet></ROW><ROW><id>19666303</id><snippet>except:</snippet></ROW><ROW><id>19666303</id><snippet>BaseException</snippet></ROW><ROW><id>19666303</id><snippet>Exception</snippet></ROW><ROW><id>19666303</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>19666303</id><snippet>SystemExit</snippet></ROW><ROW><id>19666303</id><snippet>GeneratorExit</snippet></ROW><ROW><id>19666594</id><snippet>scipy.sparse</snippet></ROW><ROW><id>19666594</id><snippet>&gt;&gt;&gt; import scipy.sparse as sps
&gt;&gt;&gt; cfq = np.array([(1,4),(3,2),(9,8)])
&gt;&gt;&gt; cfq_sps = sps.coo_matrix((cfq[:,1], ([0]*len(cfq), cfq[:,0])))
&gt;&gt;&gt; cfq_sps
&lt;1x10 sparse matrix of type '&lt;type 'numpy.int32'&gt;'
    with 3 stored elements in COOrdinate format&gt;
&gt;&gt;&gt; cfq_sps.A # convert to dense array
array([[0, 4, 0, 2, 0, 0, 0, 0, 0, 8]])
&gt;&gt;&gt; weights = np.array([4,4,4,3,3,3,2,2,2,1])
&gt;&gt;&gt; cfq_sps.dot(weights)
array([30])
</snippet></ROW><ROW><id>19666594</id><snippet>&gt;&gt;&gt; sum(k*weights[j] for j,k in cfq)
30
</snippet></ROW><ROW><id>19666680</id><snippet>ndarray</snippet></ROW><ROW><id>19666680</id><snippet>arr</snippet></ROW><ROW><id>19666680</id><snippet>&gt;255</snippet></ROW><ROW><id>19666680</id><snippet>x</snippet></ROW><ROW><id>19666680</id><snippet>arr[arr &gt; 255] = x
</snippet></ROW><ROW><id>19666680</id><snippet>In [1]: import numpy as np
In [2]: A = np.random.rand(500, 500)
In [3]: timeit A[A &gt; 0.5] = 5
100 loops, best of 3: 7.59 ms per loop
</snippet></ROW><ROW><id>19666690</id><snippet>django.contrib.auth.backends.ModelBackend</snippet></ROW><ROW><id>19666690</id><snippet>AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'social_auth.backends.twitter.TwitterBackend',
    'social_auth.backends.facebook.FacebookBackend',
)
</snippet></ROW><ROW><id>19666690</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>19666751</id><snippet>print 1 if x&amp;i else 0,
</snippet></ROW><ROW><id>19666751</id><snippet>true_expr if condition_expr else false_expr</snippet></ROW><ROW><id>19666751</id><snippet>if</snippet></ROW><ROW><id>19666751</id><snippet>true_expr</snippet></ROW><ROW><id>19666812</id><snippet>defaultdict</snippet></ROW><ROW><id>19666812</id><snippet>defaultdict</snippet></ROW><ROW><id>19666845</id><snippet>[29/Oct/2013 12:50:48] "GET /static/srt/css/django-admin-widgets.css HTTP/1.1" 304 0
[29/Oct/2013 12:50:48] "GET /static/srt/js/django-admin.multiselect.js HTTP/1.1" 304 0
</snippet></ROW><ROW><id>19666903</id><snippet>&lt;neo4j.version&gt;1.9-SNAPSHOT&lt;/neo4j.version&gt;
</snippet></ROW><ROW><id>19666903</id><snippet>&lt;neo4j.version&gt;1.9&lt;/neo4j.version&gt;
</snippet></ROW><ROW><id>19666932</id><snippet>import cv
with open('textFileOfImages.txt','rb') as f:
    img = [line.strip() for line in f]

#load the images at you leisure
for image in img:
    loadedImage = cv.LoadImage(image)
    #manipulate image
</snippet></ROW><ROW><id>19666932</id><snippet>import os
import cv
with open('textFileOfImages.txt','rb') as f:
    img = ['%s/%s'%(os.getcwd(),line.strip()) for line in f]
</snippet></ROW><ROW><id>19666932</id><snippet>import os
import cv
with open('textFileOfImages.txt','rb') as f:
     img = ['%s/%s'%(os.path.dirname(os.path.abspath(__file__)),line.strip()) for line in f]
</snippet></ROW><ROW><id>19666932</id><snippet>with</snippet></ROW><ROW><id>19666932</id><snippet>listOfFilenames = ['filename1.txt','filename2.txt','filename3.txt']
for filename in listOfFilenames: 
    with open(filename,'rb') as f:
    ...
</snippet></ROW><ROW><id>19667038</id><snippet>append</snippet></ROW><ROW><id>19667038</id><snippet>numpy.append</snippet></ROW><ROW><id>19667038</id><snippet># Python list
a = [1, 2, 3]
a.append(1)
# =&gt; [1, 2, 3, 1]

# Numpy array
import numpy as np
a = np.array([1, 2, 3])
a = np.append(a, 1)
# =&gt; [1, 2, 3, 1]
</snippet></ROW><ROW><id>19667038</id><snippet>numpy.append</snippet></ROW><ROW><id>19667071</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A':[1,2,3,4,5], 'B':list('ABCDE')})
&gt;&gt;&gt; f = pd.Series([1,2])
&gt;&gt;&gt; df[df['A'].isin(f)]
   A  B
0  1  A
1  2  B
</snippet></ROW><ROW><id>19667071</id><snippet>&gt;&gt;&gt; df['A'].isin(f)
0     True
1     True
2    False
3    False
4    False
</snippet></ROW><ROW><id>19667113</id><snippet>#!/usr/bin/env python3

import tarfile
tarf = tarfile.open('foo.tar.gz', 'r:gz')
print(tarf.getnames())
</snippet></ROW><ROW><id>19667113</id><snippet>print([(member.name, member.mtime) for member in tarf.getmembers()])
</snippet></ROW><ROW><id>19667155</id><snippet>.</snippet></ROW><ROW><id>19667155</id><snippet>.</snippet></ROW><ROW><id>19667155</id><snippet>for match in re.finditer('\.', bd):
</snippet></ROW><ROW><id>19667155</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; list(re.finditer('\.', '2013.10.29'))
[&lt;_sre.SRE_Match object at 0x100e8ad98&gt;, &lt;_sre.SRE_Match object at 0x100eaf308&gt;]
</snippet></ROW><ROW><id>19667312</id><snippet>args</snippet></ROW><ROW><id>19667312</id><snippet>parse_args</snippet></ROW><ROW><id>19667312</id><snippet>script.py -z hello.zip -d world.txt foo bar
</snippet></ROW><ROW><id>19667312</id><snippet>2</snippet></ROW><ROW><id>19667312</id><snippet>optparse</snippet></ROW><ROW><id>19667835</id><snippet>from myModule import *</snippet></ROW><ROW><id>19667835</id><snippet>hidNow</snippet></ROW><ROW><id>19667835</id><snippet>hidNow</snippet></ROW><ROW><id>19667835</id><snippet>myModule</snippet></ROW><ROW><id>19667835</id><snippet>hidNow</snippet></ROW><ROW><id>19667835</id><snippet>myModule</snippet></ROW><ROW><id>19667835</id><snippet>*</snippet></ROW><ROW><id>19667835</id><snippet>import myModule
print myModule.hidNow
myModule.loginFromSql()
print myModule.hidNow # will change
</snippet></ROW><ROW><id>19667977</id><snippet>import sys
import unittest
try:
    import simplejson as json
except ImportError:
    import json

class TestSomething(unittest.TestCase):
    def test_json(self):
        if ('json' in sys.modules or 'simplejson' in sys.modules):
            self.assert_(True, "some kind of json loaded")
        else:
            self.fail()

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>19668014</id><snippet>my_list_one</snippet></ROW><ROW><id>19668014</id><snippet>my_list[0]</snippet></ROW><ROW><id>19668014</id><snippet>columnA</snippet></ROW><ROW><id>19668014</id><snippet>column['A']</snippet></ROW><ROW><id>19668014</id><snippet>column[0]</snippet></ROW><ROW><id>19668014</id><snippet>len(my_list)</snippet></ROW><ROW><id>19668014</id><snippet>len(my_list[0])</snippet></ROW><ROW><id>19668014</id><snippet>my_list[index]</snippet></ROW><ROW><id>19668014</id><snippet>my_list[index-1]</snippet></ROW><ROW><id>19668014</id><snippet>usrnput.lower()</snippet></ROW><ROW><id>19668014</id><snippet>if usrnput in ('a', 'A'):</snippet></ROW><ROW><id>19668014</id><snippet>for index in range(len(my_list)):</snippet></ROW><ROW><id>19668014</id><snippet>for row in my_list:</snippet></ROW><ROW><id>19668014</id><snippet>column['A'].append(some_value_from_my_list)</snippet></ROW><ROW><id>19668014</id><snippet>#!/usr/bin/python3

def main():

    # read file

    all_rows = [[float(i) for i in line.split(',')] for line in open("Alpha.txt")]

    # table size

    rows_number = len(all_rows)
    cols_number = len(all_rows[0])

    print("size (rows x cols): {0}x{1}".format(rows_number,cols_number))
    print()

    # create columns (indexed by numbers)

    all_columns = []

    for col_index in range(cols_number):

        all_columns.append([])

        for row_index in range(rows_number):
            all_columns[col_index].append(all_rows[row_index][col_index])

    # print rows

    print("rows")

    for i,row in enumerate(all_rows):
        print(i+1, ":", " , ".join(str(num) for num in row))

    print()

    # print cols

    print("cols")

    for i, col in enumerate(all_columns):
        print(chr(ord('A')+i), ":", " , ".join(str(num) for num in col))

    print()

    # main loop

    end = False

    while not end:
        usrnput = input("Enter a row or column (or 'Q' for quit): ").upper()

        if usrnput in ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'):
            index = ord(usrnput)-ord('A')
            if index &lt; cols_number:
                print("min", all_columns[index], "=", min(all_columns[index]))
        elif usrnput in ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'):
            index = int(usrnput)-1
            if index &lt; rows_number:
                print("min", all_rows[index], "=", min(all_rows[index]))
        elif usrnput in ('Q'):
            end = True

main()
</snippet></ROW><ROW><id>19668040</id><snippet>required=False</snippet></ROW><ROW><id>19668040</id><snippet>field = forms.CharField(required=False)
</snippet></ROW><ROW><id>19668238</id><snippet>dead()</snippet></ROW><ROW><id>19668238</id><snippet>dead("You manage to get two of them killed, %s and %s, but you die as well.") % (name[1], name[2])
</snippet></ROW><ROW><id>19668238</id><snippet>dead("You manage to get two of them killed, %s and %s, but you die as well." % (name[1], name[2]))
</snippet></ROW><ROW><id>19668243</id><snippet>step into</snippet></ROW><ROW><id>19668278</id><snippet>np.swapaxes(1, 2)</snippet></ROW><ROW><id>19668278</id><snippet>mat.swapaxes(1, 2).reshape(N*Q, N*Q)</snippet></ROW><ROW><id>19668323</id><snippet>csv</snippet></ROW><ROW><id>19668323</id><snippet>import csv

with open('file.txt', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
</snippet></ROW><ROW><id>19668323</id><snippet>zip()</snippet></ROW><ROW><id>19668323</id><snippet>import csv

with open('file.txt', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for column in zip(*reader):
</snippet></ROW><ROW><id>19668337</id><snippet>Graph</snippet></ROW><ROW><id>19668337</id><snippet>graph</snippet></ROW><ROW><id>19668337</id><snippet>graph.py</snippet></ROW><ROW><id>19668337</id><snippet>class Vertex(object):
    def __init__(self,key):
        self.id = key
        self.connectedTo = {}

class Graph(object):
    def __init__(self, vertexclass=Vertex):
        self.vertList = {}
        self.numVertices = 0 
        self.vertexclass = vertexclass

    def addVertex(self,key):
        self.numVertices += 1
        newVert = self.vertexclass(key)
        self.vertList[key] = newVert
        return newVert

    def getVertex(self,k):
        if k in self.vertList:
            return self.vertList[k]
        else:
            return None
</snippet></ROW><ROW><id>19668337</id><snippet>Graph.__init__</snippet></ROW><ROW><id>19668337</id><snippet>Vertex</snippet></ROW><ROW><id>19668337</id><snippet>Graph</snippet></ROW><ROW><id>19668337</id><snippet>addVertex</snippet></ROW><ROW><id>19668337</id><snippet>#!/usr/bin/python
import graph

class MyVertex(graph.Vertex):
    def __init__(self,key):
        super(Vertex,self).__init__(key)

        # extensions for BFS
        self.predecessor = None
        self.dist = 0 
        self.color = 'w' # white, grey, and black

class BFSGraph(Graph):

    def __init__(self):
        super(BFSGraph, self).__init__(MyVertex)

    def getColor(self,k):
        return self.getVertex(k).color


def test():
    g=BFSGraph()
    g.addVertex('a')
    g.getColor('a')    
</snippet></ROW><ROW><id>19668337</id><snippet>BFSGraph.__init__</snippet></ROW><ROW><id>19668337</id><snippet>__init__</snippet></ROW><ROW><id>19668337</id><snippet>graph.Vertex</snippet></ROW><ROW><id>19668337</id><snippet>Graph</snippet></ROW><ROW><id>19668392</id><snippet>partial</snippet></ROW><ROW><id>19668392</id><snippet>defaultFlags = {'flag_name' : False,
'flag_name2' : False,
'flag_name3' : False,
# etc.
}

self.ids_with_flags_dictionary = defaultdict(lambda: defaultFlags.copy())
</snippet></ROW><ROW><id>19668429</id><snippet>'{0} {1}\n'.format(numb, foo)
</snippet></ROW><ROW><id>19668429</id><snippet>'{} {}'</snippet></ROW><ROW><id>19668429</id><snippet>'{0} {1}'</snippet></ROW><ROW><id>19668449</id><snippet>/tmp/sudoku.html</snippet></ROW><ROW><id>19668449</id><snippet>wkhtmltopdf</snippet></ROW><ROW><id>19668449</id><snippet>flush</snippet></ROW><ROW><id>19668449</id><snippet>/tmp/sudoku.html</snippet></ROW><ROW><id>19668449</id><snippet>html = generate_html()
f = open("/tmp/sudoku.html", 'w+')
f.write(html)
f.close() # close the file first
system('wkhtmltopdf /tmp/sudoku.html sudoku.pdf')
</snippet></ROW><ROW><id>19668464</id><snippet>class Postlist(ListView):
model=post
paginate_by = 2

def get_queryset(self):
    query_string = ''
    if ('search' in self.request.GET) and self.request.GET['search'].strip():
       query_string = self.request.GET['search']
       entry_query = get_query(query_string, ['title', 'body',]) ## call get_query to clean search terms
       queryset = post.objects.filter(entry_query).order_by('-created')
       self.request.session['searchset']=queryset

    else:
       if self.request.session.get('searchset') and ('page' in self.request.GET):
           queryset=self.request.session['searchset']
       else:
           queryset=post.objects.all().order_by('-created')
           if self.request.session.get('searchset'):
             del self.request.session['searchset']
    return queryset
</snippet></ROW><ROW><id>19668464</id><snippet>from django import forms
</snippet></ROW><ROW><id>19668676</id><snippet>related_name</snippet></ROW><ROW><id>19668676</id><snippet>OneToOneField</snippet></ROW><ROW><id>19668676</id><snippet>.</snippet></ROW><ROW><id>19668676</id><snippet>class userProfile(models.Model):
    user = models.OneToOneField(User, related_name='profile')
    USER_RATING_CHOICES = (("1 star", "1 Star(s)"), ("2 star", "2 Star(s)"), ("3 star", "3 Star(s)"), ("4 star", "4 Star(s)"), ("5 star", "5 Star(s)"))        
    userRating = models.CharField("User rating", max_length=6, choices=USER_RATING_CHOICES, default="1 star")
</snippet></ROW><ROW><id>19668676</id><snippet>{% for listing in partListingTitle %}
    {{listing.postedBy.profile.userRating}}
{% endfor %}
</snippet></ROW><ROW><id>19668885</id><snippet>virtualenv</snippet></ROW><ROW><id>19668885</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>19668885</id><snippet>virtualenv</snippet></ROW><ROW><id>19668885</id><snippet>python</snippet></ROW><ROW><id>19668885</id><snippet>site-packages</snippet></ROW><ROW><id>19668885</id><snippet>import os
settings_dir = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))
</snippet></ROW><ROW><id>19668885</id><snippet>PROJECT_ROOTH</snippet></ROW><ROW><id>19668885</id><snippet>settings.py</snippet></ROW><ROW><id>19668997</id><snippet>OrderedDict</snippet></ROW><ROW><id>19668997</id><snippet>collections</snippet></ROW><ROW><id>19668997</id><snippet>import</snippet></ROW><ROW><id>19669004</id><snippet>url(r'^swap/$', include('apps.swap.urls'))
</snippet></ROW><ROW><id>19669004</id><snippet>$</snippet></ROW><ROW><id>19669004</id><snippet>swap/about</snippet></ROW><ROW><id>19669051</id><snippet>&gt;&gt;&gt; full_name = input("Please enter in a full name: ")
Please enter in a full name: john smith
&gt;&gt;&gt; len(full_name) - full_name.count(' ')
9
&gt;&gt;&gt; len(full_name)
</snippet></ROW><ROW><id>19669238</id><snippet>1/sqrt(n)</snippet></ROW><ROW><id>19669238</id><snippet>n</snippet></ROW><ROW><id>19669238</id><snippet>w=np.sqrt(n)</snippet></ROW><ROW><id>19669238</id><snippet>cov=True</snippet></ROW><ROW><id>19669238</id><snippet>x = np.array([0, 1, 2, 3])
y = np.array([2.2, 3.5, 4.6, 5.2])
n = np.array([1, 2, 2, 1])

p, c = np.polyfit(x, y, 1, w=np.sqrt(n), cov=True)
</snippet></ROW><ROW><id>19669238</id><snippet>cov</snippet></ROW><ROW><id>19669238</id><snippet>e = np.sqrt(np.diag(c))
</snippet></ROW><ROW><id>19669255</id><snippet>def update(ip_dict, ip_address, site_path, user_agent):
    if ip_address in ip_dict:
        ip_entry = ip_dict[ip_address]

        ip_entry['total_count'] += 1

        if site_path in ip_entry['site_paths']:
            ip_entry['site_paths'][site_path] += 1
        else:
            ip_entry['site_paths'][site_path] = 0

        if user_agent in ip_entry['user_agents']:
            ip_entry['user_agents'][user_agent] += 1
        else:
            ip_entry['user_agents'][user_agent] = 0
    else:
        ip_dict[ip_address] = {
            'total_count': 1,
            'site_paths': {site_path: 1},
            'user_agent': {user_agent: 1}
        }

# initialize the ip dict
ip_dict = {}

# read from your log file and for every entry, call
update(ip_dict, '1.2.3.4', site_path, user_agent)
</snippet></ROW><ROW><id>19669255</id><snippet>defaultdict</snippet></ROW><ROW><id>19669732</id><snippet>y</snippet></ROW><ROW><id>19669732</id><snippet>T</snippet></ROW><ROW><id>19669732</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; y = random.randrange(2**64) # some 64-bit int
&gt;&gt;&gt; y
17364376918466400468
&gt;&gt;&gt; yt = y * 0.6
&gt;&gt;&gt; yt
1.041862615107984e+19
&gt;&gt;&gt; yt - int(yt)
0.0
</snippet></ROW><ROW><id>19669732</id><snippet>hash()</snippet></ROW><ROW><id>19669732</id><snippet>y = abs(y)
y = (y &gt;&gt; 32) ^ (y &amp; 0xffffffff)  # collapse to 32 bits
</snippet></ROW><ROW><id>19669770</id><snippet>ImportError</snippet></ROW><ROW><id>19669770</id><snippet>try:
    import _winreg as winreg
except ImportError:
    pass
</snippet></ROW><ROW><id>19669770</id><snippet>winreg</snippet></ROW><ROW><id>19669770</id><snippet>NameError</snippet></ROW><ROW><id>19669770</id><snippet>winreg</snippet></ROW><ROW><id>19669770</id><snippet>try</snippet></ROW><ROW><id>19669770</id><snippet>except</snippet></ROW><ROW><id>19669770</id><snippet>try:
    import _winreg as winreg  # Try importing on Python 2
except ImportError:
    import winreg  # Fallback to Python 3 (if this raises an Exception, it'll escalate)
</snippet></ROW><ROW><id>19669770</id><snippet>_winreg</snippet></ROW><ROW><id>19669773</id><snippet>sys.path</snippet></ROW><ROW><id>19669773</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19669773</id><snippet>python -m TestsFolder.UnitTest1
</snippet></ROW><ROW><id>19669773</id><snippet>py.test</snippet></ROW><ROW><id>19669773</id><snippet>test_unit1.py</snippet></ROW><ROW><id>19669886</id><snippet>/i</snippet></ROW><ROW><id>19669886</id><snippet>m = re.search(r'&lt;stat&gt;(.*?)&lt;/stat&gt;',line,re.IGNORECASE)
</snippet></ROW><ROW><id>19669886</id><snippet>r</snippet></ROW><ROW><id>19669894</id><snippet>rolesFormset.save()</snippet></ROW><ROW><id>19669894</id><snippet>form.save()</snippet></ROW><ROW><id>19669894</id><snippet>if request.method == 'POST':
    form = AppForm(request.POST)
    rolesFormset = RoleForm(request.POST)
    if form.is_valid() and rolesFormset.is_valid():
        app = form.save()
        roles = rolesFormset.save()
        for role in roles:
            app.roles.add(role)
        return redirect(reverse('index'))
</snippet></ROW><ROW><id>19669894</id><snippet>rolesFormSet = rolesInlineFormSet(request.POST, instance=app, prefix='roles')
</snippet></ROW><ROW><id>19669894</id><snippet>buildRolesFormset</snippet></ROW><ROW><id>19669894</id><snippet>formset = RoleFormSet(prefix='roles')
</snippet></ROW><ROW><id>19669916</id><snippet>Symbol('x')</snippet></ROW><ROW><id>19669916</id><snippet>lambdify</snippet></ROW><ROW><id>19669916</id><snippet>ufloat</snippet></ROW><ROW><id>19669916</id><snippet>x, x1, x3 = symbols('x x1 x3')
L=Symbol("L")
eqn=(x*(L**2))+(x1*(L*1))+(x3*(L**0))
s = solve(eqn,L)
lambdify([x, x1, x3], s)(ufloat(10,0.2), ufloat(8,0.01), ufloat(25,2))
</snippet></ROW><ROW><id>19670107</id><snippet>from bs4 import BeautifulSoup
import re

html = r"""
      &lt;br /&gt;
       &lt;table cellspacing="0" cellpadding="4" border="1" class="GroupBox1"&gt;
          &lt;tbody&gt;&lt;tr&gt;
            &lt;th&gt;&lt;h3&gt;Completion Information&lt;/h3&gt;&lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;table width="578" cellspacing="0" cellpadding="4" border="1" class="GroupBox3"&gt;
              &lt;tbody&gt;&lt;tr&gt;
                &lt;th width="31%"&gt;Well Status Code&lt;/th&gt;
                &lt;th width="17%" nowrap="nowrap"&gt;&lt;div align="center"&gt;&lt;strong&gt;Spud Date&lt;/strong&gt;&lt;/div&gt;&lt;/th&gt;
                &lt;th width="28%" nowrap="nowrap"&gt;&lt;div align="center"&gt;Drilling Completed&lt;/div&gt;&lt;/th&gt;
                &lt;th width="24%" nowrap="nowrap"&gt;&lt;div align="center"&gt;Surface Casing Date&lt;/div&gt;&lt;/th&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td nowrap="nowrap"&gt;W - Final Completion&lt;/td&gt;
                &lt;td&gt;&lt;div align="center"&gt;12/08/2011&lt;/div&gt;&lt;/td&gt;
                &lt;td&gt;&lt;div align="center"&gt;02/14/2012&lt;/div&gt;&lt;/td&gt;
                &lt;td&gt;&lt;div align="center"&gt;12/09/2011&lt;/div&gt;&lt;/td&gt;
              &lt;/tr&gt;
            &lt;/tbody&gt;&lt;/table&gt;&lt;/td&gt;
          &lt;/tr&gt;

          &lt;tr&gt;
            &lt;td&gt;&lt;table cellspacing="0" cellpadding="4" border="1" class="TabBox"&gt;
              &lt;tbody&gt;&lt;tr&gt;
                &lt;th width="155" nowrap="nowrap"&gt;Field Name&lt;/th&gt;
                &lt;th width="142" nowrap="nowrap"&gt;Completed Well Type&lt;/th&gt;
                &lt;th width="108" nowrap="nowrap"&gt;&lt;div align="center"&gt;Completed Date&lt;/div&gt;&lt;/th&gt;
                &lt;th width="133" nowrap="nowrap"&gt;&lt;div align="center"&gt;Validated Date&lt;/div&gt;&lt;/th&gt;
              &lt;/tr&gt;

               &lt;tr&gt;
                &lt;td nowrap="nowrap"&gt;
                   WOLFBONE (TREND AREA)
                &lt;/td&gt;
                &lt;td nowrap="nowrap"&gt;&lt;div align="center"&gt;Oil&lt;/div&gt;
                &lt;/td&gt;
                &lt;td nowrap="nowrap"&gt;&lt;div align="center"&gt;02/14/2012&lt;/div&gt;
                &lt;/td&gt;
                &lt;td nowrap="nowrap"&gt;&lt;div align="center"&gt;06/04/2013&lt;/div&gt;
                &lt;/td&gt;
               &lt;/tr&gt;

            &lt;/tbody&gt;&lt;/table&gt;
           &lt;/td&gt;
          &lt;/tr&gt;

        &lt;/tbody&gt;&lt;/table&gt;
       &lt;br /&gt;
"""
soup = BeautifulSoup(html)
tab_box = soup.findAll('table', {'class': 'TabBox'})

for var in tab_box:
    print var
</snippet></ROW><ROW><id>19670173</id><snippet>s.port="/dev/ttys0"</snippet></ROW><ROW><id>19670173</id><snippet>ls/dev/tty*</snippet></ROW><ROW><id>19670231</id><snippet># This takes your data and creates a new array that is (T, V-1, 2, 3)
lstLines = np.concatenate((Spar_Res[:, :-1, None, :],
                           Spar_Res[:,  1:, None, :]), axis=2)
# This reshapes the array to be (T * (V - 1), 2, 3)
lstLines = lstLines.reshape(-1, 2, 3)
</snippet></ROW><ROW><id>19670231</id><snippet>lstLines = [((xb, yb, zb), (xe, ye, ze)) for i in range(Spar_Res.shape[0])
            for (xb, xe, yb, ye, zb, ze) in zip(Spar_Res[i,:-1,0], Spar_Res[i,1:,0],
                                                Spar_Res[i,:-1,1], Spar_Res[i,1:,1],
                                                Spar_Res[i,:-1,2], Spar_Res[i,1:,2]) 
           ]
lstLines = np.array(lstLines)
</snippet></ROW><ROW><id>19670263</id><snippet>category = TreeNodeChoiceField(
    required=False,
    queryset=NewsCategory.objects.filter(status=True, is_deleted =False), label=u"Kategori", widget=forms.SelectMultiple(attrs={'class':'uniformselect'})
    )
</snippet></ROW><ROW><id>19670263</id><snippet>category = forms.ModelMultipleChoiceField(queryset=NewsCategory.objects.filter(parent__isnull=False, status=True, is_deleted=False)
</snippet></ROW><ROW><id>19670293</id><snippet>df.T.set_index('utcdt')
Out[133]: 
                    impressions    campaign_id
utcdt                                         
2013-10-29 18:00:00         105  cid2504649263
</snippet></ROW><ROW><id>19670433</id><snippet>from bs4 import BeautifulSoup
import sys 

soup = BeautifulSoup(open(sys.argv[1], 'r'), 'xml')
for e in soup.find_all(sys.argv[2]):
    p = e.parent
    cls = soup.new_tag('cls')
    e_extracted = e.extract()
    cls.append(e_extracted)
    p.append(cls)

print(soup.prettify())
</snippet></ROW><ROW><id>19670433</id><snippet>xml</snippet></ROW><ROW><id>19670433</id><snippet>python3 script.py xmlfile op
</snippet></ROW><ROW><id>19670433</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;doc&gt;
 &lt;a&gt;
  &lt;cls&gt;
   &lt;op&gt;
    xxx
   &lt;/op&gt;
  &lt;/cls&gt;
 &lt;/a&gt;
&lt;/doc&gt;
</snippet></ROW><ROW><id>19670433</id><snippet>&lt;doc&gt;</snippet></ROW><ROW><id>19670433</id><snippet>python3 script.py xmlfile doc
</snippet></ROW><ROW><id>19670433</id><snippet>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;cls&gt;
 &lt;doc&gt;
  &lt;a&gt;
   &lt;op&gt;
    xxx
   &lt;/op&gt;
  &lt;/a&gt;
 &lt;/doc&gt;
&lt;/cls&gt;
</snippet></ROW><ROW><id>19670684</id><snippet>import time
import fluidsynth

fs = fluidsynth.Synth()
fs.start()

sfid = fs.sfload("example.sf2")
fs.program_select(0, sfid, 0, 0)

fs.noteon(0, 60, 30)
fs.noteon(0, 67, 30)
fs.noteon(0, 76, 30)

time.sleep(1.0)

fs.noteoff(0, 60)
fs.noteoff(0, 67)
fs.noteoff(0, 76)

time.sleep(1.0)

fs.delete()
</snippet></ROW><ROW><id>19670799</id><snippet>celery worker -Q q1,q2 -c 2</snippet></ROW><ROW><id>19670799</id><snippet>celery multi</snippet></ROW><ROW><id>19670799</id><snippet>celery multi start 2 -Q:1 q1 -Q:2 q2 -c:1 1 -c:2 1
</snippet></ROW><ROW><id>19670799</id><snippet>-Q:1 q1</snippet></ROW><ROW><id>19670799</id><snippet>q1</snippet></ROW><ROW><id>19670799</id><snippet>q2</snippet></ROW><ROW><id>19670799</id><snippet>-c:1 1</snippet></ROW><ROW><id>19670856</id><snippet>sum(1:N) = N * (N + 1) / 2
</snippet></ROW><ROW><id>19670856</id><snippet>for</snippet></ROW><ROW><id>19670856</id><snippet>range</snippet></ROW><ROW><id>19670856</id><snippet>mySum = 0
i = 1;
while( &lt;&lt;&lt; put some condition here &gt;&gt;&gt; ):
  mySum = mySum + i
  &lt;&lt;&lt;&lt;&lt; do something clever with i &gt;&gt;&gt;&gt;&gt;
print &lt;&lt;&lt;&lt;&lt; what do you think you should print here? &gt;&gt;&gt;&gt;&gt;
</snippet></ROW><ROW><id>19670856</id><snippet>:</snippet></ROW><ROW><id>19670856</id><snippet>while</snippet></ROW><ROW><id>19671022</id><snippet>finder()</snippet></ROW><ROW><id>19671022</id><snippet>in_file</snippet></ROW><ROW><id>19671022</id><snippet>next()</snippet></ROW><ROW><id>19671022</id><snippet>for line in in_file:
</snippet></ROW><ROW><id>19671022</id><snippet>for ... in</snippet></ROW><ROW><id>19671022</id><snippet>in_file.next()</snippet></ROW><ROW><id>19671022</id><snippet>next()</snippet></ROW><ROW><id>19671022</id><snippet>yield</snippet></ROW><ROW><id>19671022</id><snippet>def finder_character(file_name,character):

    with open(file_name, "r") as ifile:
        if character=='vowel':
            brain_rat='aeiou'
        elif character=='consonant':
            brain_rat='bcdfghjklmnpqrstvwxyz'
        elif character=='space':
            brain_rat=' '
        else:
            brain_rat='!@#$%^&amp;*()_+=-123456789{}|":?&gt;&lt;,./;[]\'' 

    return sum(1 if c.lower() in brain_rat else 0 for c in ifile.read())
</snippet></ROW><ROW><id>19671022</id><snippet>eeehhh
iii!#
kk ="k
oo o
</snippet></ROW><ROW><id>19671022</id><snippet>&gt;&gt;&gt;print(finder_character('test.txt', 'vowel'))
9
&gt;&gt;&gt;print(finder_character('test.txt', 'consonant'))
6
&gt;&gt;&gt;print(finder_character('test.txt', 'space'))
2
&gt;&gt;&gt;print(finder_character('test.txt', ''))
4
</snippet></ROW><ROW><id>19671022</id><snippet>return</snippet></ROW><ROW><id>19671022</id><snippet>Sum this generator:
    Make a generator with values as v in:
        for row in ifile.read():
            if c.lower() in brain_rat:
                v = 1
            else:
                v = 0
</snippet></ROW><ROW><id>19671128</id><snippet>zip()</snippet></ROW><ROW><id>19671128</id><snippet>            for DataOne, DataTwo in zip(DictOne, DictTwo):
                DataOne.update(DataTwo)
                outf.writerow([DataOne['C'], DataTwo['A']])
</snippet></ROW><ROW><id>19671178</id><snippet>inputFromUser = input("blah blah blah")
</snippet></ROW><ROW><id>19671178</id><snippet>inputFromUser = raw_input("blah blah blah")
</snippet></ROW><ROW><id>19671242</id><snippet>long</snippet></ROW><ROW><id>19671242</id><snippet>__str__</snippet></ROW><ROW><id>19671242</id><snippet>str</snippet></ROW><ROW><id>19671242</id><snippet>__int__</snippet></ROW><ROW><id>19671245</id><snippet>s = s.translate('\0'*256)</snippet></ROW><ROW><id>19671245</id><snippet>s = bytearray(256)</snippet></ROW><ROW><id>19671245</id><snippet>translate</snippet></ROW><ROW><id>19671245</id><snippet>In [64]: s = bytearray('Hello World')

In [65]: s
Out[65]: bytearray(b'Hello World')

In [66]: import string

In [67]: zero = string.maketrans(buffer(bytearray(range(256))),buffer(bytearray(256)))

In [68]: s.translate(zero)
Out[68]: bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
</snippet></ROW><ROW><id>19671245</id><snippet>In [72]: s.translate('\0'*256)
Out[72]: bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

In [73]: %timeit s.translate('\0'*256)
1000000 loops, best of 3: 282 ns per loop

In [74]: %timeit s.translate(bytearray(256))
1000000 loops, best of 3: 398 ns per loop
</snippet></ROW><ROW><id>19671256</id><snippet>isPrime()</snippet></ROW><ROW><id>19671256</id><snippet>for</snippet></ROW><ROW><id>19671256</id><snippet>False</snippet></ROW><ROW><id>19671256</id><snippet>n%i</snippet></ROW><ROW><id>19671256</id><snippet>n</snippet></ROW><ROW><id>19671256</id><snippet>i</snippet></ROW><ROW><id>19671256</id><snippet>if not n%i</snippet></ROW><ROW><id>19671256</id><snippet>if n%i == 0</snippet></ROW><ROW><id>19671299</id><snippet>Queue</snippet></ROW><ROW><id>19671299</id><snippet>threading</snippet></ROW><ROW><id>19671299</id><snippet>from Queue import Queue
from threading import Thread

def worker():
    while True:
        item = q.get()
        do_work(item)
        q.task_done()

q = Queue()
for i in range(num_worker_threads):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

for item in source():
    q.put(item)

q.join()       # block until all tasks are done
</snippet></ROW><ROW><id>19671366</id><snippet>if</snippet></ROW><ROW><id>19671366</id><snippet>for</snippet></ROW><ROW><id>19671366</id><snippet>with open("inputcsv1.csv", "rt") as input_file:
    header = input_file.readline()[:-1]  # remove trailing newline
    # add a title to the header for each of the two new columns
    header += ",Table exists?,Are you sure table exists?"
    output_lines = [header]

    for line in input_file:
        line = line[:-1]  # remove trailing newline
        cols = line.split(',')  # split line in columns based on delimiter
        # add first column
        if 'table' in cols[3]:
            line += ",table exists"
        else:
            line += ",No table found"
        # add second column
        if 'table' in cols[3]:
            line += ",table definitely exists"
        else:
            line += ",No table was not found"
        output_lines.append(line)

with open("TestMurgedOutput.csv", "wt") as output_file:
    output_file.write("\n".join(output_lines))
</snippet></ROW><ROW><id>19671366</id><snippet>TestMurgedOutput.csv</snippet></ROW><ROW><id>19671366</id><snippet>title1,title2,title3,Table or no table?,title4,Table exists?,Are you sure table exists?
data,text,data,the cat sits on the table,text,data,table exists,table definitely exists
data,text,data,tables are made of wood,text,data,table exists,table definitely exists
data,text,data,the cat sits on the television,text,data,No table found,No table was not found
data,text,data,the dog chewed the table leg,text,data,table exists,table definitely exists
data,text,data,random string of words,text,data,No table found,No table was not found
data,text,data,table seats 25 people,text,data,table exists,table definitely exists
data,text,data,I have no idea why I made this example about tables,text,data,table exists,table definitely exists
data,text,data,,text,data,No table found,No table was not found
</snippet></ROW><ROW><id>19671385</id><snippet>"source": "&lt;a href=\"http://twitterfeed.com\" rel=\"nofollow\"&gt; twitterfeed &lt;/a&gt;", 
</snippet></ROW><ROW><id>19671385</id><snippet>\"</snippet></ROW><ROW><id>19671385</id><snippet>"</snippet></ROW><ROW><id>19671385</id><snippet>\\"</snippet></ROW><ROW><id>19671385</id><snippet>\"</snippet></ROW><ROW><id>19671385</id><snippet>"source": "&lt;a href=\\"http://twitterfeed.com\\" rel=\\"nofollow\\"&gt; twitterfeed &lt;/a&gt;",
</snippet></ROW><ROW><id>19671385</id><snippet>correct_json = r""" {
</snippet></ROW><ROW><id>19671394</id><snippet>In [26]: dfA.reset_index()
Out[26]: 
  index special_name
0   NaN        Apple
1   OMG       Banana

In [30]: df = dfA.reset_index().dropna().set_index('index')

In [31]: df
Out[31]: 
      special_name
index             
OMG         Banana
</snippet></ROW><ROW><id>19671670</id><snippet>Summary</snippet></ROW><ROW><id>19671670</id><snippet>Graph</snippet></ROW><ROW><id>19671670</id><snippet>class Summary(object):
    def __init__(self, graph):
        self.graph = graph

    def avg_connectivity(self):
        return ("Average Node Connectivity:", np.average(self.graph.degree))

    # ... etc


if __name__ == '__main__':
    import numpy as np
    infile = raw_input("Enter File Name (e.g. e06.gal): ")
    myfile = open(infile, 'r')
    graph = Graph(myfile)
    summary = Summary(graph)
</snippet></ROW><ROW><id>19671670</id><snippet>self.graph</snippet></ROW><ROW><id>19671670</id><snippet>self</snippet></ROW><ROW><id>19671670</id><snippet>summary</snippet></ROW><ROW><id>19671670</id><snippet>Foo_Bar</snippet></ROW><ROW><id>19671670</id><snippet>Graph</snippet></ROW><ROW><id>19671670</id><snippet>graph</snippet></ROW><ROW><id>19671670</id><snippet>self.graph</snippet></ROW><ROW><id>19671670</id><snippet>d</snippet></ROW><ROW><id>19671670</id><snippet>d1</snippet></ROW><ROW><id>19671670</id><snippet>d2</snippet></ROW><ROW><id>19671670</id><snippet>hist</snippet></ROW><ROW><id>19671670</id><snippet>histogram</snippet></ROW><ROW><id>19671670</id><snippet>import</snippet></ROW><ROW><id>19671698</id><snippet>random.randint(yRand, maxX)</snippet></ROW><ROW><id>19671698</id><snippet>randPoint()</snippet></ROW><ROW><id>19671698</id><snippet>yRand &gt; maxX</snippet></ROW><ROW><id>19671698</id><snippet>random.randint(a, b)</snippet></ROW><ROW><id>19671698</id><snippet>a &lt;= b</snippet></ROW><ROW><id>19671698</id><snippet>for i in range(50000):</snippet></ROW><ROW><id>19671698</id><snippet>color()</snippet></ROW><ROW><id>19671698</id><snippet>import pygame
import math

class Sierpinski():

    def __init__(self):

        h = w = int(input("Triangle size: "))

        level = int(input("Recursion level: "))

        margin = 50 # add to size to make margin around triangle

        # initializes pygame and setting screne

        pygame.init()

        self.screen = pygame.display.set_mode( (w + margin*2, h + margin*2) ) # self. - to make accessible in all function
        pygame.display.set_caption("Sierpinski Triangle - Recursion")

        # offset to move triangle to middle of window

        const_height = math.sqrt(3)/2  # h = a * sqrt(3)/2 = a * const_height
        invert_const_height = 1 - const_height

        offset = int(h * invert_const_height / 2) # to move triange up - to middle 

        # main vertices A, B, C

        a = (margin, h + margin - offset)
        b = (w + margin, h + margin - offset)
        c = (w/2 + margin, int(h * invert_const_height) + margin - offset)

        self.screen.set_at(a, (255,255,255))
        self.screen.set_at(b, (255,255,255))
        self.screen.set_at(c, (255,255,255))

        # recursion

        self.drawTriangle(a, b, c, level)

        # main loop (in game)

        clock = pygame.time.Clock()
        running = True

        while running:

            # keyboard &amp; mouse event
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False

            # move objects - nothing to do here

            # draw object &amp; redraw on screen

            pygame.display.set_caption("Sierpinski Triangle - Recursion [FPS: %f]" % (clock.get_fps()))

            pygame.display.update()

            # frametime 

            clock.tick(25) # max 25 Frames Per Second

        # end program

        pygame.quit()

    #-------------------------------------------------------

    def drawTriangle(self, a, b, c, level):

        if level == 0:
            return

        ab = self.middlePoint(a, b)
        ac = self.middlePoint(a, c)
        bc = self.middlePoint(b, c)

        self.screen.set_at(ab, (255,255,255))
        self.screen.set_at(bc, (255,255,255))
        self.screen.set_at(ac, (255,255,255))

        self.drawTriangle(a, ab, ac, level-1)
        self.drawTriangle(b, ab, bc, level-1)
        self.drawTriangle(c, bc, ac, level-1)

    #-------------------------------------------------------

    def middlePoint(self, a, b):
        x = (a[0] + b[0])/2
        y = (a[1] + b[1])/2

        return (x,y)

#----------------------------------------------------------------------

if __name__ == '__main__':
    Sierpinski()
</snippet></ROW><ROW><id>19671719</id><snippet>Enum</snippet></ROW><ROW><id>19671719</id><snippet>class Size(Enum):

    small = 1
    medium = 2
    large = 3

    @classmethod
    def classify(cls, number):
        if number &lt; 10:
            return cls.small
        elif number &lt; 20:
            return cls.medium
        else:
            return cls.large
</snippet></ROW><ROW><id>19671719</id><snippet>--&gt; Size.classify(15)
&lt;Size.medium: 2&gt;
</snippet></ROW><ROW><id>19671798</id><snippet>import csv

def get_html_table(data):
    s = '&lt;table&gt;\n'
    for row in data:
        s += '&lt;tr&gt;'
        for cell in row:
            s += r'&lt;td&gt;{}&lt;/td&gt;'.format(cell)
        s += '&lt;/tr&gt;\n'
    s += '&lt;/table&gt;'
    return s

with open('testscore.txt') as ifile, open('output.html', 'wb') as ofile:
    data = []
    for row in list(csv.reader(ifile))[1:]:
        data.append([row[0], row[1], row[3], '{0:0.2f}'.format(float(row[6]))])
    ofile.write(get_html_table(data))
</snippet></ROW><ROW><id>19671798</id><snippet>School,Class,Data,Student,Data,Data,testscore
West,1B,Data,StudentA,Data,Data,55.42452912
West,1B,Data,StudentB,Data,Data,32.22219
West,2A,Data,StudentC,Data,Data,49.242
West,2A,Data,StudentD,Data,Data,23.42452912
East(LMK),2,Data,StudentE,Data,Data,13.42452912
North,B,Data,StudentF,Data,Data,15.42452912
North,B,Data,StudentG,Data,Data,93.42
</snippet></ROW><ROW><id>19671798</id><snippet>&lt;table&gt;
&lt;tr&gt;&lt;td&gt;West&lt;/td&gt;&lt;td&gt;1B&lt;/td&gt;&lt;td&gt;StudentA&lt;/td&gt;&lt;td&gt;55.42&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;West&lt;/td&gt;&lt;td&gt;1B&lt;/td&gt;&lt;td&gt;StudentB&lt;/td&gt;&lt;td&gt;32.22&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;West&lt;/td&gt;&lt;td&gt;2A&lt;/td&gt;&lt;td&gt;StudentC&lt;/td&gt;&lt;td&gt;49.24&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;West&lt;/td&gt;&lt;td&gt;2A&lt;/td&gt;&lt;td&gt;StudentD&lt;/td&gt;&lt;td&gt;23.42&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;East(LMK)&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;StudentE&lt;/td&gt;&lt;td&gt;13.42&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;North&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;StudentF&lt;/td&gt;&lt;td&gt;15.42&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;North&lt;/td&gt;&lt;td&gt;B&lt;/td&gt;&lt;td&gt;StudentG&lt;/td&gt;&lt;td&gt;93.42&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>19672184</id><snippet>collections.Counter</snippet></ROW><ROW><id>19672184</id><snippet>from collections import Counter

# read in original records
with open("account_names.csv", "rt") as f:
    rows = sorted(line.strip() for line in f)

# count how many times each row appears
counts = Counter(rows)

# get a list of tuples of (count, row) that only includes count &gt; 1
dups = [(count, row) for row, count in counts.items() if count &gt; 1]
dup_count = sum(count-1 for count in counts.values() if count &gt; 1)

# sort the list from largest number of dups to least
dups.sort(reverse=True)

# print a report showing how many dups
for count, row in dups:
    print("{}\t{}".format(count, row))

# get de-duped list
unique_rows = sorted(counts)

# read in de-duped list
with open("account_de_ex.csv", "rt") as f:
    de_duped = sorted(line.strip() for line in f)

print("List lengths: rows {}, uniques {}/de_duped {}, result {}".format(
        len(rows), len(unique_rows), len(de_duped), len(de_duped) + dup_count))

# lists should match since we sorted both lists
if unique_rows == de_duped:
    print("perfect match!")
else:
    # if lists don't match, find out what is going on
    uniques_set = set(unique_rows)
    deduped_set = set(de_duped)

    # find intersection of the two sets
    x = uniques_set.intersection(deduped_set)

    # print differences
    if x != uniques_set:
        print("Rows in original that are not in deduped:\n{}".format(sorted(uniques_set - x)))
    if x != deduped_set:
        print("Rows in deduped that are not in original:\n{}".format(sorted(deduped_set - x)))
</snippet></ROW><ROW><id>19672261</id><snippet>&gt;&gt;&gt; x = 'C:/bye1.txt'
&gt;&gt;&gt; x.split()[-1]
'C:/bye1.txt'
&gt;&gt;&gt; y = 'C:/bye1.txt C:/hello1.txt'
&gt;&gt;&gt; y.split()[-1]
'C:/hello1.txt'
&gt;&gt;&gt; z = 'C:/bye1.txt C:/hello1.txt C:/bye2 C:/bye3'
&gt;&gt;&gt; z.split()[-1]
'C:/bye3'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19672261</id><snippet>str.split</snippet></ROW><ROW><id>19672261</id><snippet>[-1]</snippet></ROW><ROW><id>19672345</id><snippet>import os.path
os.path.isfile = lambda path: path == '/path/to/testfile'
</snippet></ROW><ROW><id>19672345</id><snippet>import classtobetested                                                                                                                                                                                      
import unittest                                                                                                                                                                                             

import contextlib                                                                                                                                                                                           

@contextlib.contextmanager                                                                                                                                                                                  
def monkey_patch(module, fn_name, patch):                                                                                                                                                                   
    unpatch = getattr(module, fn_name)                                                                                                                                                                      
    setattr(module, fn_name)                                                                                                                                                                                
    try:                                                                                                                                                                                                    
        yield                                                                                                                                                                                               
    finally:                                                                                                                                                                                                
        setattr(module, fn_name, unpatch)                                                                                                                                                                   


class TestTheClassToBeTested(unittest.TestCase):                                                                                                                                                              
    def test_with_fs_mocks(self):                                                                                                                                                                           
        with monkey_patch(classtobetested.os.path,                                                                                                                                                          
                          'isfile',                                                                                                                                                                         
                          lambda path: path == '/path/to/file'):                                                                                                                                            
            self.assertTrue(classtobetested.testable())                 
</snippet></ROW><ROW><id>19672345</id><snippet>mock</snippet></ROW><ROW><id>19672765</id><snippet>__init__</snippet></ROW><ROW><id>19672765</id><snippet>def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
                 initial=None, error_class=ErrorList, label_suffix=None,
                 empty_permitted=False, instance=None):
</snippet></ROW><ROW><id>19672765</id><snippet>__init__</snippet></ROW><ROW><id>19672765</id><snippet> def __init__(self, *args, **kwargs):
        instance = kwargs.get('instance')
        _fields = ('username', 'first_name', 'last_name', 'email', 'password')
        _initial = model_to_dict(instance.dragonuser, _fields) \
            if instance is not None else {}
        kwargs['initial'] = _initial
        super(ParentCreationForm, self).__init__(*args, **kwargs)
        self.fields.update(fields_for_model(DragonUser, _fields))
</snippet></ROW><ROW><id>19672779</id><snippet>from pandas.compat import range, lrange, lmap, map, zip
from pandas.tools.plotting import _get_standard_colors
import pandas.core.common as com

def andrews_curves(data, class_column, ax=None, samples=200, colormap=None,
                   **kwds):
    """
    Parameters:
    -----------
    data : DataFrame
        Data to be plotted, preferably normalized to (0.0, 1.0)
    class_column : Name of the column containing class names
    ax : matplotlib axes object, default None
    samples : Number of points to plot in each curve
    colormap : str or matplotlib colormap object, default None
        Colormap to select colors from. If string, load colormap with that name
        from matplotlib.
    kwds : Optional plotting arguments to be passed to matplotlib

    Returns:
    --------
    ax: Matplotlib axis object

    """
    from math import sqrt, pi, sin, cos
    import matplotlib.pyplot as plt

    def function(amplitudes):
        def f(x):
            x1 = amplitudes[0]
            result = x1 / sqrt(2.0)
            harmonic = 1.0
            for x_even, x_odd in zip(amplitudes[1::2], amplitudes[2::2]):
                result += (x_even * sin(harmonic * x) +
                           x_odd * cos(harmonic * x))
                harmonic += 1.0
            if len(amplitudes) % 2 != 0:
                result += amplitudes[-1] * sin(harmonic * x)
            return result
        return f

    n = len(data)
    class_col = data[class_column]
    uniq_class = class_col.drop_duplicates()
    columns = [data[col] for col in data.columns if (col != class_column)]
    x = [-pi + 2.0 * pi * (t / float(samples)) for t in range(samples)]
    used_legends = set([])

    colors = _get_standard_colors(num_colors=len(uniq_class), colormap=colormap,
                                  color_type='random', color=kwds.get('color'))
    col_dict = dict([(klass, col) for klass, col in zip(uniq_class, colors)])
    if ax is None:
        ax = plt.gca(xlim=(-pi, pi))
    for i in range(n):
        row = [columns[c][i] for c in range(len(columns))]
        f = function(row)
        y = [f(t) for t in x]
        label = None
        if com.pprint_thing(class_col[i]) not in used_legends:
            label = com.pprint_thing(class_col[i])
            used_legends.add(label)
            ax.plot(x, y, color=col_dict[class_col[i]], label=label, **kwds)
        else:
            ax.plot(x, y, color=col_dict[class_col[i]], **kwds)

    ax.legend(loc='upper right')
    ax.grid()
    return ax
</snippet></ROW><ROW><id>19672921</id><snippet>all</snippet></ROW><ROW><id>19672921</id><snippet>import pandas
import numpy

a = numpy.random.rand(10, 10)&gt;0.5
b = pandas.DataFrame(a, columns=list('ABCDEFGHIJ'))
selectedcolumns = ['A', 'B', 'C']
b['Anded'] = b[selectedcolumns].all(1)
</snippet></ROW><ROW><id>19672921</id><snippet>anded = b[selectedcolumns].apply(lambda x, y: x*y, args=[b['J']])
</snippet></ROW><ROW><id>19672991</id><snippet>zip</snippet></ROW><ROW><id>19672991</id><snippet>''.join(string[a:b] for a, b in zip(start_list, end_list))
</snippet></ROW><ROW><id>19672991</id><snippet>zip</snippet></ROW><ROW><id>19672991</id><snippet>print zip(start_list, end_list)
&gt; [(0, 4), (8, 12), (16, 20), (24, 28)]
</snippet></ROW><ROW><id>19672991</id><snippet>izip</snippet></ROW><ROW><id>19673045</id><snippet>DataFrame.dtypes</snippet></ROW><ROW><id>19673045</id><snippet>Series</snippet></ROW><ROW><id>19673045</id><snippet>print type(df.dtypes)
print df.dtypes.dtype
</snippet></ROW><ROW><id>19673045</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame(np.random.rand(10, 5))
df.to_hdf("test.hdf", "data")
</snippet></ROW><ROW><id>19673269</id><snippet>Worksheet</snippet></ROW><ROW><id>19673269</id><snippet>write_merge</snippet></ROW><ROW><id>19673269</id><snippet>merge</snippet></ROW><ROW><id>19673269</id><snippet>merge</snippet></ROW><ROW><id>19673269</id><snippet>write_merge</snippet></ROW><ROW><id>19673269</id><snippet>write</snippet></ROW><ROW><id>19673269</id><snippet>merge</snippet></ROW><ROW><id>19673269</id><snippet>r1, r2, c1, c2</snippet></ROW><ROW><id>19673269</id><snippet>style</snippet></ROW><ROW><id>19673269</id><snippet>sheet.write_merge(0, 0, 0, 1, 'Long Cell')
sheet.write(1, 0, 1)
sheet.write(1, 1, 2)
</snippet></ROW><ROW><id>19673269</id><snippet>top_row = 0
bottom_row = 0
left_column = 0
right_column = 1
sheet.write_merge(top_row, bottom_row, left_column, right_column, 'Long Cell')
</snippet></ROW><ROW><id>19673269</id><snippet>merge</snippet></ROW><ROW><id>19673269</id><snippet>sheet.write(top_row, left_column, 'Long Cell')
sheet.merge(top_row, bottom_row, left_column, right_column)
</snippet></ROW><ROW><id>19673269</id><snippet>merge</snippet></ROW><ROW><id>19673269</id><snippet>    # Problems: (1) style to be used should be existing style of
    # the top-left cell, not an arg.
    # (2) should ensure that any previous data value in
    # non-top-left cells is nobbled.
    # Note: if a cell is set by a data record then later
    # is referenced by a [MUL]BLANK record, Excel will blank
    # out the cell on the screen, but OOo &amp; Gnu will not
    # blank it out. Need to do something better than writing
    # multiple records. In the meantime, avoid this method and use
    # write_merge() instead.
</snippet></ROW><ROW><id>19673670</id><snippet>import datetime
start = datetime.date(2000, 1, 1)
oneday = datetime.timedelta(1)
print start.strftime('%b %d %Y')
# 'Jan 01 2000'
print start.isoformat()
# '2000-01-01'
print start + oneday
# 2000-01-02
print start + 30*oneday
# 2000-01-31
</snippet></ROW><ROW><id>19673670</id><snippet>labels = [date.isoformat() for date in (start + oneday*i for i in xrange(0,470))]
print labels[0]
# 2000-01-01
print labels[1]
# 2000-01-02
print labels[31]
# 2000-02-01
print labels[-1]
# 2001-04-14
</snippet></ROW><ROW><id>19673670</id><snippet>import datetime

import matplotlib.pyplot as plt
import numpy as np
import numpy.random as nprnd

y_data = np.random.randint(0, 1000, size = 470)
##y_data = np.row_stack((items[0]))
x_data = np.arange(470)

fig = plt.figure()
ax1 = fig.add_subplot(1, 1, 1)

ax1.fill_between(x_data, 0, y_data, color="#0026cf", alpha=1)

###### date labels
start = datetime.date(2000, 1, 1)
oneday = datetime.timedelta(1)
labels = [date.isoformat() for date in (start + oneday*i for i in xrange(0,470))]
plt.xticks(x_data, labels, rotation='vertical')

plt.show()
plt.close()
</snippet></ROW><ROW><id>19673670</id><snippet>labels = [date.isoformat() for date in (start + oneday*i for i in xrange(0,470))]
labels = labels[::7]
plt.xticks(x_data[::7], labels, rotation='vertical')
</snippet></ROW><ROW><id>19673806</id><snippet>def maxSubArray(seq):
    all_sum = cur_sum = 0
    all_beg = cur_beg = 0
    all_end = 0
    for cur_end, x in enumerate(seq, 1):
        if cur_sum + x &gt; 0:
            cur_sum += x
            if all_sum &lt; cur_sum:
                all_sum = cur_sum
                all_beg, all_end = cur_beg, cur_end
        else:
            cur_sum = 0
            cur_beg = cur_end
    return all_sum, all_beg, all_end
</snippet></ROW><ROW><id>19673806</id><snippet>cur_</snippet></ROW><ROW><id>19673806</id><snippet>all_</snippet></ROW><ROW><id>19673867</id><snippet>d = {}

for i in dates:
  if not i['basic'] in d:
     d[i['basic']] = {}
     d[i['basic']]['start_date'] = []
     d[i['basic']]['end_date'] = []
  d[i['basic']]['start_date'].append(int(i['start_date'].replace('-','')))
  d[i['basic']]['end_date'].append(int(i['end_date'].replace('-','')))

# This will give you:

&gt;&gt;&gt; d
{1000.0: {'start_date': [20110101, 20110501], 'end_date': [20110131, 20110531]},
 2000.0: {'start_date': [20120101, 20120501], 'end_date': [20120131, 20120531]},
 3500.0: {'start_date': [20130101, 20130201], 'end_date': [20130131, 20130228]},
 2500.0: {'start_date': [20120701, 20120801], 'end_date': [20120731, 20120831]},
 4000.0: {'start_date': [20131101], 'end_date': [20131130]}}

# Next, sort the start and end dates. We want the earliest start date,
# and the last end date for each number

for i in d.values():
   i['start_date'].sort()
   i['end_date'].sort(reverse=True)

# Now we have:

&gt;&gt;&gt; d
{1000.0: {'start_date': [20110101, 20110501], 'end_date': [20110531, 20110131]},
 2000.0: {'start_date': [20120101, 20120501], 'end_date': [20120531, 20120131]},
 3500.0: {'start_date': [20130101, 20130201], 'end_date': [20130228, 20130131]},
 2500.0: {'start_date': [20120701, 20120801], 'end_date': [20120831, 20120731]},
 4000.0: {'start_date': [20131101], 'end_date': [20131130]}}

# To build our final result; we need to have for each
# number, the earliest start date, and the latest end date (which are the first
# items of each `start_date` and `end_date` dictionary keys

# Then we just do some formatting to get it back in to the date string

result = []
for i,v in d.iteritems():
   j = {}
   j['basic'] = i

   # Convert the start and end dates into strings
   # and format them
   start = str(v['start_date'][0])
   end = str(v['end_date'][0])

   j['start_date'] = '{0}-{1}-{2}'.format(start[:4],start[4:6],start[-2:])
   j['end_date'] = '{0}-{1}-{2}'.format(end[:4],end[4:6],end[-2:])

   result.append(j)
</snippet></ROW><ROW><id>19673893</id><snippet>mapping = {
    'domain': 'domain',
    'db_user': 'username',
}

key = mapping.get(obj_type, 'name')
</snippet></ROW><ROW><id>19674287</id><snippet>img = win32gui.LoadImage(None, "C:\\tmp.bmp", win32con.IMAGE_BITMAP, 0, 0, flags)
pyiconinfo = (True, 0, 0, img, img)
hicon = win32gui.CreateIconIndirect(pyiconinfo)
</snippet></ROW><ROW><id>19674287</id><snippet>def img_to_bitmap(image, pixel_value):
    hdc = win32gui.CreateCompatibleDC(0)
    dc = win32gui.GetDC(0)
    hbm = win32gui.CreateCompatibleBitmap(dc, size, size)
    hbm_save = win32gui.SelectObject(hdc, hbm)
    for x in range(size):
        for y in range(size):
            pixel = image.getpixel((x, y))
            v = pixel_value(pixel)
            win32gui.SetPixelV(hdc, x, y, v)
    win32gui.SelectObject(hdc, hbm_save)
    win32gui.ReleaseDC(self.hwnd, hdc)
    win32gui.ReleaseDC(self.hwnd, dc)
    return hbm
</snippet></ROW><ROW><id>19674287</id><snippet>set_icon_from_data</snippet></ROW><ROW><id>19674372</id><snippet>call(["xdotool", "mousemove", str(x), str(y)])
</snippet></ROW><ROW><id>19674372</id><snippet>x</snippet></ROW><ROW><id>19674372</id><snippet>y</snippet></ROW><ROW><id>19674372</id><snippet>"x"</snippet></ROW><ROW><id>19674372</id><snippet>"y"</snippet></ROW><ROW><id>19674373</id><snippet>from bson.json_util import dumps

dumps(l)
</snippet></ROW><ROW><id>19674373</id><snippet>u'name'</snippet></ROW><ROW><id>19674373</id><snippet>u'date'</snippet></ROW><ROW><id>19674373</id><snippet>u'_id'</snippet></ROW><ROW><id>19674396</id><snippet>#Modified your above code to generate the required output
import urllib2
import random
from operator import itemgetter

current_word = {}
current_count = 0
story = 'http://sixty-north.com/c/t.txt'
request = urllib2.Request(story)
response = urllib2.urlopen(request)
each_word = []
words = None
count = 1
same_words ={}
word = []
""" looping the entire file """
#Collect All the words into a list
for line in response:
    #print "Line = " , line
    line_words = line.split()
    for word in line_words:  # looping each line and extracting words
        each_word.append(word)

#for every word collected, in dict same_words
#if a key exists, such that key == word then increment Mapping Value by 1
# Else add word as new key with mapped value as 1
for words in each_word:
    if words.lower() not in same_words.keys() :
        same_words[words.lower()]=1
    else:
        same_words[words.lower()]=same_words[words.lower()]+1

for each in same_words.keys():
    print "word = ",each, ", count = ",same_words[each]
</snippet></ROW><ROW><id>19674399</id><snippet>a, b = 1, 2
print a # 1
print b # 2
</snippet></ROW><ROW><id>19674399</id><snippet>line.split(...)</snippet></ROW><ROW><id>19674399</id><snippet>role</snippet></ROW><ROW><id>19674399</id><snippet>line_spoken</snippet></ROW><ROW><id>19674399</id><snippet>line.split(...)</snippet></ROW><ROW><id>19674399</id><snippet>['Monty', 'Python']</snippet></ROW><ROW><id>19674399</id><snippet>role</snippet></ROW><ROW><id>19674399</id><snippet>'Monty'</snippet></ROW><ROW><id>19674399</id><snippet>line_spoken</snippet></ROW><ROW><id>19674399</id><snippet>'Python'</snippet></ROW><ROW><id>19674825</id><snippet>class Episode(models.Model):
    episode_num = models.IntegerField()
    def __unicode__(self):
        return 'episode {}'.format(self.episode_num)

Episode.objects.order_by('episode_num')
</snippet></ROW><ROW><id>19674974</id><snippet>from itertools import groupby
with open('infile') as f:
    groups = groupby(f, key=str.isspace)
    for k, lines in groups:
        if k:
            continue
        fname = next(lines).strip().lower().replace(' ', '_')+'.txt'
        with open(fname, 'w') as outf:
            outf.writelines(lines)
</snippet></ROW><ROW><id>19675173</id><snippet>import re

# This pattern should match correct data lines and should not
# match "continuation" lines (lines added by the unquoted newline).
# This pattern means: start of line, then a number, then white space,
# then another number, then more white space, then another number.

# This program won't work right if this pattern isn't correct.
pat = re.compile("^\d+\s+\d+\s+\d+")

def collect_lines(iterable):
    itr = iter(iterable)  # get an iterator

    # First, loop until we find a valid line.
    # This will skip the first line with the "header" info.
    line = next(itr)
    while True:
        line = next(itr)
        if pat.match(line):
            # found a valid line; hold it as cur
            cur = line
            break
    for line in itr:
        # Look at the line after cur.  Is it a valid line?
        if pat.match(line):
            # Line after cur is valid!
            yield cur  # output cur
            cur = line  # hold new line as new cur
        else:
            # Line after cur is not valid; append to cur but do not output yet.
            cur = cur.rstrip('\r\n') + line
    yield cur

data = """\
   JOB  REF Comment V2  Other
@@@1   3   45  This was a small job    NULL    sdnsdf
@@@2   4   456 This was a large job and I have to go onto a new line, 
@@@    but I didn't properly escape so it's on the next row whoops!    NULL    NULL        
@@@3   7   354 NULL    NULL    NULL
"""

lines = data.split('@@@')
for line in collect_lines(lines):
    print("&gt;&gt;&gt;{}&lt;&lt;&lt;".format(line))
</snippet></ROW><ROW><id>19675173</id><snippet>with open("filename", "rt") as f:
    for line in collect_lines(f):
        # do something with each line
</snippet></ROW><ROW><id>19675173</id><snippet>cur</snippet></ROW><ROW><id>19675173</id><snippet>cur</snippet></ROW><ROW><id>19675198</id><snippet> thequickbrownfoxjumpsoverthelazydog
</snippet></ROW><ROW><id>19675198</id><snippet> the quick brown fox jumps over the lazy dog
</snippet></ROW><ROW><id>19675198</id><snippet>$ python segmentation.py t hequi ckbrownfoxjum ped
thequickbrownfoxjumped
['the', 'quick', 'brown', 'fox', 'jumped']
</snippet></ROW><ROW><id>19675198</id><snippet>$ python segmentation.py lmaoro fll olwt f pwned
lmaorofllolwtfpwned
['lmao', 'rofl', 'lol', 'wtf', 'pwned']
</snippet></ROW><ROW><id>19675227</id><snippet>def dictionary_to_list(data):
    result = {}
    for key, value in data.items():
        if isinstance(value, list):
            for index in value:
                result[index] = key
        else:
            result[value] = key
    return [result[key] for key in sorted(result)]

def list_to_dictionary(data):
    result = {}
    for index, char in enumerate(data):
        result.setdefault(char, [])
        result[char].append(index)
    return dict((key, value[0]) if len(value) == 1 else (key, value) for key, value in result.items())

dictData = {'a':3, 'b':0, 'c':[2,4], 'd':[1,5]}
listData = ['b', 'd', 'c', 'a', 'c', 'd']

print dictionary_to_list(dictData)
print list_to_dictionary(listData)
</snippet></ROW><ROW><id>19675227</id><snippet>['b', 'd', 'c', 'a', 'c', 'd']
{'a': 3, 'c': [2, 4], 'b': 0, 'd': [1, 5]}
</snippet></ROW><ROW><id>19675231</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'a':[0,1,0,0], 'b':[0,0,1,0], 'c':[1,0,1,0], 'd':[0,1,1,0], 'c':[0,1,1,0]})
&gt;&gt;&gt; df
   a  b  c  d
0  0  0  0  0
1  1  0  1  1
2  0  1  1  1
3  0  0  0  0
&gt;&gt;&gt; df2 = df.apply(lambda row: ','.join(map(str, row)), axis=1)
&gt;&gt;&gt; df2
0    0,0,0,0
1    1,0,1,1
2    0,1,1,1
3    0,0,0,0
</snippet></ROW><ROW><id>19675295</id><snippet>%20</snippet></ROW><ROW><id>19675295</id><snippet>url = 'http://' + itop_server + \
     '.acme.org:8000/webservices/export.php?login_mode=basic&amp;format=xml&amp;expression='\
     + select_statement.replace(' ','%20') + '&amp;fields=' + fields
</snippet></ROW><ROW><id>19675440</id><snippet>csv.writer</snippet></ROW><ROW><id>19675440</id><snippet>csvfile</snippet></ROW><ROW><id>19675440</id><snippet>'b'</snippet></ROW><ROW><id>19675440</id><snippet>csvfile</snippet></ROW><ROW><id>19675440</id><snippet>newline=''</snippet></ROW><ROW><id>19675440</id><snippet>with</snippet></ROW><ROW><id>19675440</id><snippet>with open("pe_ratio.csv","wb") as f: # or open("pe_ratio.csv", "w", newline="") in Py3
    writer = csv.writer(f)

    # do other stuff here, staying indented until you're done writing to the file
</snippet></ROW><ROW><id>19675670</id><snippet>varBinds = [ (ObjectIdentifier('1.3.6.1.1.18443.1.1'), Integer(9016)) ]
</snippet></ROW><ROW><id>19675670</id><snippet>varBind = varBinds[0]
oid, value = varBind
str(value)
</snippet></ROW><ROW><id>19675670</id><snippet>int(value)
</snippet></ROW><ROW><id>19675736</id><snippet>Python27\Lib\site-packages\pyarabic</snippet></ROW><ROW><id>19675736</id><snippet>stack.py</snippet></ROW><ROW><id>19675782</id><snippet>In [26]: L = [{'name':'Accra','url':''},{'name':'Dubai','url':''},{'name':'Birmingham','url':''},{'name':'Dhaka','url':''},{'name':'Abu Dhabi','url':''},{'name':'Lahore','url':''},{'name':'Karachi','url':''},{'name':'Kathmandu','url':''},{'name':'SEA','url':''}]

In [27]: L.sort(key=lambda d:d['name'])

In [28]: L
Out[28]: 
[{'name': 'Abu Dhabi', 'url': ''},
 {'name': 'Accra', 'url': ''},
 {'name': 'Birmingham', 'url': ''},
 {'name': 'Dhaka', 'url': ''},
 {'name': 'Dubai', 'url': ''},
 {'name': 'Karachi', 'url': ''},
 {'name': 'Kathmandu', 'url': ''},
 {'name': 'Lahore', 'url': ''},
 {'name': 'SEA', 'url': ''}]
</snippet></ROW><ROW><id>19675957</id><snippet>&gt;&gt;&gt; buffer="tags = { 'one' : \"two\", \"three\", 'four' }"
&gt;&gt;&gt; re.findall(r"['\"](.*?)['\"]", buffer)
['one', 'two', 'three', 'four']
</snippet></ROW><ROW><id>19676076</id><snippet>level1_id</snippet></ROW><ROW><id>19676076</id><snippet>level1__id</snippet></ROW><ROW><id>19676076</id><snippet>db_table</snippet></ROW><ROW><id>19676091</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>19676091</id><snippet>itertools.izip</snippet></ROW><ROW><id>19676091</id><snippet>zip</snippet></ROW><ROW><id>19676091</id><snippet>&gt;&gt;&gt; from itertools import chain, izip
&gt;&gt;&gt; value_list = [[['NaN'], ['sponge'], ['Palau']], [['skin'], ['fish'], ['Cuba']], [['claw'], ['crab'], ['Japan: Aomori, Natsudomari peninsula']]]
&gt;&gt;&gt; key_tuple = ('AB479448', 'AB479449', 'AB602436')
&gt;&gt;&gt; {k: list(chain.from_iterable(v)) for k, v in izip(key_tuple, value_list)}
{'AB479449': ['skin', 'fish', 'Cuba'],
 'AB479448': ['NaN', 'sponge', 'Palau'],
 'AB602436': ['claw', 'crab', 'Japan: Aomori, Natsudomari peninsula']}
</snippet></ROW><ROW><id>19676278</id><snippet>mod.%str(10, 20, 30, 40)
</snippet></ROW><ROW><id>19676278</id><snippet>getattr(mod, str)(10, 20, 30, 40)
</snippet></ROW><ROW><id>19676379</id><snippet>test = "level"+level
d = {test: l_id}
device_level_mapping = DeviceLevelMapping.objects.filter(**d)
</snippet></ROW><ROW><id>19676510</id><snippet>python &lt;scriptName&gt;.py</snippet></ROW><ROW><id>19676510</id><snippet>test.py</snippet></ROW><ROW><id>19676510</id><snippet>name = raw_input("Enter your name: ")
print "Hello, " + name
</snippet></ROW><ROW><id>19676510</id><snippet>PS C:\Python27&gt; python test.py
Enter your name: Monty Python
Hello, Monty Python
PS C:\Python27&gt;
</snippet></ROW><ROW><id>19676613</id><snippet>&gt;&gt;&gt; ship_dates = [(datetime.datetime(2012, 12, 28, 0, 0),), (datetime.datetime(2012, 12, 28, 0, 0),)]
&gt;&gt;&gt; [dt.strftime("%Y-%m-%d") for dt in ship_dates]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'tuple' object has no attribute 'strftime'

&gt;&gt;&gt; [dt.strftime("%Y-%m-%d") for (dt,) in ship_dates]
['2012-12-28', '2012-12-28']
</snippet></ROW><ROW><id>19676613</id><snippet>(..)</snippet></ROW><ROW><id>19676613</id><snippet>&gt;&gt;&gt; [dt.strftime("%Y-%m-%d") for dt, in ship_dates]
['2012-12-28', '2012-12-28']
</snippet></ROW><ROW><id>19676762</id><snippet>B</snippet></ROW><ROW><id>19676762</id><snippet>A</snippet></ROW><ROW><id>19676762</id><snippet>A</snippet></ROW><ROW><id>19676762</id><snippet>B</snippet></ROW><ROW><id>19676762</id><snippet>B[:] = A[:]</snippet></ROW><ROW><id>19676762</id><snippet>B = A[:]</snippet></ROW><ROW><id>19676762</id><snippet>B = numpy.copy(A)</snippet></ROW><ROW><id>19676762</id><snippet>B</snippet></ROW><ROW><id>19676762</id><snippet>B</snippet></ROW><ROW><id>19676762</id><snippet>numpy.copyto(B, A)</snippet></ROW><ROW><id>19676884</id><snippet>C:\Python27</snippet></ROW><ROW><id>19676884</id><snippet>C:\Python33</snippet></ROW><ROW><id>19676884</id><snippet>virtualenv</snippet></ROW><ROW><id>19676884</id><snippet>virtualenv</snippet></ROW><ROW><id>19676884</id><snippet>python.exe</snippet></ROW><ROW><id>19676884</id><snippet>interpreter</snippet></ROW><ROW><id>19676884</id><snippet>Project Interpreter</snippet></ROW><ROW><id>19676884</id><snippet>Python Interpreter</snippet></ROW><ROW><id>19676884</id><snippet>+</snippet></ROW><ROW><id>19676884</id><snippet>local</snippet></ROW><ROW><id>19676884</id><snippet>python.exe</snippet></ROW><ROW><id>19676896</id><snippet>bs4</snippet></ROW><ROW><id>19676896</id><snippet>pip</snippet></ROW><ROW><id>19676896</id><snippet>easy_install</snippet></ROW><ROW><id>19676896</id><snippet>soup = BeautifulSoup(xmlFileORString);
for item in soup.a.b.c.d.find_all('item'):
    print(item.string)
</snippet></ROW><ROW><id>19677049</id><snippet>"""
.. versionadded:: 1.1.0
   This demo depends on new features added to contourf3d.
"""

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import cm

fig = plt.figure()
ax = fig.gca(projection='3d')
X, Y, Z = axes3d.get_test_data(0.05)
ax.plot_surface(X, Y, Z, rstride=8, cstride=8, alpha=0.3)
cset = ax.contourf(X, Y, Z, zdir='z', offset=-100, cmap=cm.coolwarm)
cset = ax.contourf(X, Y, Z, zdir='x', offset=-40, cmap=cm.coolwarm)
cset = ax.contourf(X, Y, Z, zdir='y', offset=40, cmap=cm.coolwarm)

ax.set_xlabel('X')
ax.set_xlim(-40, 40)
ax.set_ylabel('Y')
ax.set_ylim(-40, 40)
ax.set_zlabel('Z')
ax.set_zlim(-100, 100)

plt.show()
</snippet></ROW><ROW><id>19678021</id><snippet>itertools.product(*[a, b, a, b])</snippet></ROW><ROW><id>19678021</id><snippet>In [1]: a = [1, 2]

In [2]: b = [3, 4]

In [3]: from itertools import product

In [4]: list(product(a, b, a, b))
Out[4]: 
[(1, 3, 1, 3),
 (1, 3, 1, 4),
 (1, 3, 2, 3),
 (1, 3, 2, 4),
 ...]

In [5]: test_list = [a, b, a, b]

In [6]: list(product(*test_list))
Out[6]: 
[(1, 3, 1, 3),
 (1, 3, 1, 4),
 (1, 3, 2, 3),
 (1, 3, 2, 4),
 ...]
</snippet></ROW><ROW><id>19678290</id><snippet>ApplicationCommand</snippet></ROW><ROW><id>19678290</id><snippet>sublime.run_command('application_command_name')</snippet></ROW><ROW><id>19678290</id><snippet>run_command</snippet></ROW><ROW><id>19678290</id><snippet>sublime</snippet></ROW><ROW><id>19678290</id><snippet>WindowCommand</snippet></ROW><ROW><id>19678290</id><snippet>window.run_command('window_command_name')</snippet></ROW><ROW><id>19678290</id><snippet>run_command</snippet></ROW><ROW><id>19678290</id><snippet>sublime.Window</snippet></ROW><ROW><id>19678290</id><snippet>TextCommand</snippet></ROW><ROW><id>19678290</id><snippet>view.run_command('text_command_name')</snippet></ROW><ROW><id>19678290</id><snippet>run_command</snippet></ROW><ROW><id>19678290</id><snippet>sublime.View</snippet></ROW><ROW><id>19678405</id><snippet>for k, spine in ax.spines.items():  #ax.spines is a dictionary
    spine.set_zorder(10)
</snippet></ROW><ROW><id>19678405</id><snippet>1. ax.tick_params(direction='in', length=10, color='k', zorder=10)
   #This increases the size of the lines to 10 points, 
   #but the lines stays hidden behind  the bars
2. for l in ax.yaxis.get_ticklines():
       l.set_zorder(10)
</snippet></ROW><ROW><id>19678405</id><snippet>ax.tick_params(direction='out', length=4, color='k', zorder=10)
</snippet></ROW><ROW><id>19678405</id><snippet>direction='inout'</snippet></ROW><ROW><id>19678405</id><snippet>zorder</snippet></ROW><ROW><id>19678405</id><snippet>ax.bar</snippet></ROW><ROW><id>19678405</id><snippet>zorder</snippet></ROW><ROW><id>19678405</id><snippet>zorder=1</snippet></ROW><ROW><id>19678405</id><snippet>bar</snippet></ROW><ROW><id>19678405</id><snippet>zorder=0</snippet></ROW><ROW><id>19678405</id><snippet>zorder</snippet></ROW><ROW><id>19678405</id><snippet>bar</snippet></ROW><ROW><id>19678405</id><snippet>patches</snippet></ROW><ROW><id>19678405</id><snippet>imshow</snippet></ROW><ROW><id>19678448</id><snippet>redis-server</snippet></ROW><ROW><id>19678466</id><snippet>pycompile.compile()</snippet></ROW><ROW><id>19678466</id><snippet>py_compile.compile(r"D:\University Project\Python\Examples\XO Game\XO.py")
</snippet></ROW><ROW><id>19678466</id><snippet>py_compile.compile("D:\\University Project\\Python\\Examples\\XO Game\\XO.py")
</snippet></ROW><ROW><id>19678534</id><snippet>pieces</snippet></ROW><ROW><id>19678534</id><snippet>pieces = map(float, pieces) #assign the floated list to the variable 'pieces'
</snippet></ROW><ROW><id>19678534</id><snippet>#List comprehension:
pieces = [float(i) for i in pieces] 
</snippet></ROW><ROW><id>19678534</id><snippet>import serial
ser = serial.Serial('COM7', 9600)

try:
    result=ser.readline()
    pieces=result.split(" \t")
    pieces = map(float, pieces)
    print pieces
    if pieces[0] == 5.0:
        print "Yes"
    else:
        print "No"
except:
    print "Failed to get data from Arduino!"
</snippet></ROW><ROW><id>19678801</id><snippet>.string</snippet></ROW><ROW><id>19678801</id><snippet>[link.string for link in item.find_all('a')]
</snippet></ROW><ROW><id>19679307</id><snippet>filter</snippet></ROW><ROW><id>19679307</id><snippet>if Product.objects.all().count() == Product.objects.filter(price=price).count():
    pass
</snippet></ROW><ROW><id>19679307</id><snippet>distinct</snippet></ROW><ROW><id>19679307</id><snippet>if Product.objects.all().products.distinct('price').count() == 1:
    pass
</snippet></ROW><ROW><id>19679307</id><snippet>annotate</snippet></ROW><ROW><id>19679307</id><snippet>if Product.objects.all().values('price').annotate(Count('price')).count() == 1:
    pass
</snippet></ROW><ROW><id>19679336</id><snippet>pythonw.exe</snippet></ROW><ROW><id>19679336</id><snippet>python.exe</snippet></ROW><ROW><id>19679587</id><snippet>len()</snippet></ROW><ROW><id>19679755</id><snippet>f.write ("P1 skill is {0}".format( PlayerOneSkill + P1SkillMod))
</snippet></ROW><ROW><id>19679755</id><snippet>format</snippet></ROW><ROW><id>19679755</id><snippet>+</snippet></ROW><ROW><id>19679755</id><snippet>f.write ("P1 skill is {0}\n".format( PlayerOneSkill + P1SkillMod))  # New line added.
</snippet></ROW><ROW><id>19679993</id><snippet>ret_this</snippet></ROW><ROW><id>19679993</id><snippet>scheduler.run</snippet></ROW><ROW><id>19679993</id><snippet>def ret_this():
    global result
    result = "I'm called!"
</snippet></ROW><ROW><id>19679993</id><snippet>ret_this</snippet></ROW><ROW><id>19679993</id><snippet>def ret_this():
    print "This."
</snippet></ROW><ROW><id>19679993</id><snippet>def ret_this():
    with open('output.txt', 'w') as f:
        f.write('I'm called!') 
if __name__ = "__main__":
    schedthis()
    with open("output.txt", 'r') as f:
        print(f.read())
</snippet></ROW><ROW><id>19679993</id><snippet>I'm called!</snippet></ROW><ROW><id>19679994</id><snippet>/simple/PACKAGE_NAME</snippet></ROW><ROW><id>19680163</id><snippet>def recursive_list_counter(l):
    sum = 0
    for e in l:
        if isinstance(e, list):
            sum += 1
            sum += recursive_list_counter(e)
    return sum 
</snippet></ROW><ROW><id>19680163</id><snippet>isinstance()</snippet></ROW><ROW><id>19680163</id><snippet>6</snippet></ROW><ROW><id>19680163</id><snippet>def recursive_list_counter(l):
    sum = 1
    for e in l:
        if isinstance(e, list):
            sum += recursive_list_counter(e)
    return sum 
</snippet></ROW><ROW><id>19680452</id><snippet>filename = "test.html"
f = file(filename)
attachment = MIMEText(f.read(),'html')
msg.attach(attachment)
</snippet></ROW><ROW><id>19680782</id><snippet>datasets = [{"x":[1,2,3], "y":[1,4,9], "z":[0,0,0], colour="red"} for _ in range(6)]

for dataset in datasets:
    ax.plot(dataset["x"], dataset["y"], dataset["z"], color=dataset["colour"])

plt.show()
</snippet></ROW><ROW><id>19680782</id><snippet>plot</snippet></ROW><ROW><id>19680782</id><snippet>plot_wireframe</snippet></ROW><ROW><id>19680782</id><snippet>axes</snippet></ROW><ROW><id>19680782</id><snippet>color</snippet></ROW><ROW><id>19680782</id><snippet>matplotlib</snippet></ROW><ROW><id>19680782</id><snippet>color</snippet></ROW><ROW><id>19680844</id><snippet>import rpy2.robjects as ro

ro.globalenv['dr'] = dr

ro.r("""
library(ggplot2)
names(dr) &lt;- c('letters','bool','n','value')

x &lt;- ggplot() +
  geom_bar(data=dr, aes(y = value, x = letters, fill = bool), 
           stat="identity", position='stack') +
  theme_bw() + 
  facet_grid( ~ n)

print(x)
""")
</snippet></ROW><ROW><id>19680844</id><snippet>make_plot = ro.r("""
function(dr) {
  names(dr) &lt;- c('letters','bool','n','value')

  x &lt;- ggplot() +
    geom_bar(data=dr, aes(y = value, x = letters, fill = bool), 
             stat="identity", position='stack') +
    theme_bw() + 
    facet_grid( ~ n)

  print(x)
}""")

make_plot(dr)
</snippet></ROW><ROW><id>19680844</id><snippet>from rpy2.robjects import Formula
from rpy2.robjects.lib.ggplot2 import ggplot, geom_bar, aes_string, theme_bw, facet_grid

## oddity with names in the examples, that can either be corrected in the Python-pandas
## structure or with an explicit conversion into an R object and renaming there
drr = rpy2.robjects.pandas2ri.pandas2ri(dr)
drr.names[2] = 'n'
drr.names[3] = 'value'

p = ggplot(drr) + \
    geom_bar(aes_string(x="letters", y="value", fill="bool"),
             stat="identity", position="stack") + \
    theme_bw() + \
    facet_grid(Formula('~ n'))

p.plot()
</snippet></ROW><ROW><id>19681274</id><snippet>*args</snippet></ROW><ROW><id>19681274</id><snippet>zip(*big_list)
</snippet></ROW><ROW><id>19681274</id><snippet>*</snippet></ROW><ROW><id>19681274</id><snippet>&gt;&gt;&gt; big_list = [['a1','b1','c1'], ['a2','b2','c3'], ['a3','b3','c3']]
&gt;&gt;&gt; zip(*big_list)
[('a1', 'a2', 'a3'), ('b1', 'b2', 'b3'), ('c1', 'c3', 'c3')]
</snippet></ROW><ROW><id>19681778</id><snippet>try/except</snippet></ROW><ROW><id>19681778</id><snippet>price = soup.find('li', {'id' :'J_PromoPrice'})
try:
    priced = price.find('strong', {'class' :'tb-rmb-num'}).text
    if priced == "":
        priced = price.find('strong', {'class' :'tb-rmb-num'}).text
    else:
        print ("No Normal Price Found")
except AttributeError:
     # Try this code instead
</snippet></ROW><ROW><id>19681778</id><snippet>catch</snippet></ROW><ROW><id>19682825</id><snippet>print 'ERROR: Version {0} has not been adjusted yet!'.format(version_)
</snippet></ROW><ROW><id>19683142</id><snippet>collections.Counter(...)</snippet></ROW><ROW><id>19683142</id><snippet>In [18]: from collections import Counter

In [19]: m = ['a', 'b', 'a', 'b', 'c']

In [20]: Counter(m).most_common()
Out[20]: [('a', 2), ('b', 2), ('c', 1)]
</snippet></ROW><ROW><id>19683142</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>19683142</id><snippet>In [21]: m2 = ['a', 'b', 'a', 'b', 'c', 'b']

In [22]: Counter(m2).most_common()
Out[22]: [('b', 3), ('a', 2), ('c', 1)]
</snippet></ROW><ROW><id>19683142</id><snippet>In [28]: [elem for elem, _ in Counter(m2).most_common()]
Out[28]: ['b', 'a', 'c']
</snippet></ROW><ROW><id>19683142</id><snippet>In [23]: final_list = []

In [24]: for elem in set(m2):
    ...:     final_list.append((elem, m2.count(elem)))
    ...:     

In [25]: from operator import itemgetter

In [26]: sorted(final_list, key=itemgetter(1))
Out[26]: [('c', 1), ('a', 2), ('b', 3)]

In [27]: sorted(final_list, key=itemgetter(1), reverse=True)
Out[27]: [('b', 3), ('a', 2), ('c', 1)]
</snippet></ROW><ROW><id>19683544</id><snippet>proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)
# This time, rather than install the OpenerDirector, we use it directly:
opener.open('http://www.example.com/login.html')
</snippet></ROW><ROW><id>19683544</id><snippet>    if self.proxies is None:
        self.urlopen = urllib_urlopen
    else:
        params = urlparse(proxies[1])
        host = params.get('hostname')
        username = params.get('username')
        password = params.get('password')
        if host and username and password:
            proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
            proxy_auth_handler.add_password(None, host, username, password)
            self.urlopen = build_opener(
               ProxyHandler(self.proxies, proxy_auth_handler),
            )
</snippet></ROW><ROW><id>19683545</id><snippet>tempfile</snippet></ROW><ROW><id>19683545</id><snippet>path_to_temporary_directory = tempfile.mkdtemp()
# work on the temporary directory
# ...
# move the necessary files to the destination
shutil.move(source, destination)
# delete the temporary directory (recommended)
shutil.rmtree(path_to_temporary_directory)
</snippet></ROW><ROW><id>19684047</id><snippet>from collections import defaultdict
from itertools import count

def read_file(file_path):
    result = defaultdict(dict)
    item = count()
    with open(file_path) as f:
        for line in f:
            if not line:
                continue
            parts = line.split()
            result[next(item)][parts[0]] = dict(p.split('=') for p in parts[1:])
    return dict(result)
</snippet></ROW><ROW><id>19684047</id><snippet>s = """
login url=http://demo.url.net username=test@url.net password=mytester

create-folder foldername=demo

select-folder foldername=test123

logout
"""

from collections import defaultdict
from itertools import count

result_dict = defaultdict(dict)
item = count()

# pretend you opened the file and are reading it line by line
for line in s.splitlines():
    if not line:
        continue # skip empty lines
    parts = line.split()
    result_dict[next(item)][parts[0]] = dict(p.split('=') for p in parts[1:])
</snippet></ROW><ROW><id>19684047</id><snippet>&gt;&gt;&gt; pprint(dict(result_dict))
{0: {'login': {'password': 'mytester',
               'url': 'http://demo.url.net',
               'username': 'test@url.net'}},
 1: {'create-folder': {'foldername': 'demo'}},
 2: {'select-folder': {'foldername': 'test123'}},
 3: {'logout': {}}}
</snippet></ROW><ROW><id>19684059</id><snippet>(np.unique(a)[..., None] == a).astype(np.int)
</snippet></ROW><ROW><id>19684059</id><snippet>.astype(np.int)</snippet></ROW><ROW><id>19684059</id><snippet>[..., None]</snippet></ROW><ROW><id>19684059</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1, 2, 3, 1])
&gt;&gt;&gt; unique_elements = np.unique(a)
&gt;&gt;&gt; result = unique_elements[..., None] == a
&gt;&gt;&gt; unique_elements
array([1, 2, 3])
&gt;&gt;&gt; result
array([[ True, False, False,  True],
       [False,  True, False, False],
       [False, False,  True, False]], dtype=bool)
</snippet></ROW><ROW><id>19684093</id><snippet>with open("outputHorizontal.{0}.txt".format(lat), 'w') as file:
    for item in I_list:
        file.write("{}\n".format(item))
</snippet></ROW><ROW><id>19684463</id><snippet>with open('a 100mb or so file') as fin:
    filedata = fin.read()
</snippet></ROW><ROW><id>19684485</id><snippet>x in &lt;list&gt;</snippet></ROW><ROW><id>19684485</id><snippet>if a in [5,6,7]:
</snippet></ROW><ROW><id>19684485</id><snippet># Long names
if a in [the_first_of_november,
         the_second_sunday_in_the_third_lunar_month,
         tuesday]: 


# Lists:
if myList in [yourList, hisList, herList]:
</snippet></ROW><ROW><id>19684485</id><snippet>in</snippet></ROW><ROW><id>19684485</id><snippet>if my_answer in list_of_correct_answers:
</snippet></ROW><ROW><id>19684571</id><snippet>class KeepSync(object):
    def __init__(self, default):
        self.value = default
    def __get__(self, instance, owner):
        return self.value
    def __set__(self, instance, value):
        self.value = value

class Foo(object):
    bar = KeepSync(0) 

class C1(Foo):
    pass

class C2(Foo):
    pass



f = C1()
g = C2()

print "f.bar is %s\ng.bar is %s" % (f.bar, g.bar)
print "Setting f.bar to 10"
f.bar = 10
print "f.bar is %s\ng.bar is %s" % (f.bar, g.bar)  # YAY BOTH ARE 10 !
</snippet></ROW><ROW><id>19684786</id><snippet>from collections import OrderedDict

anyname = OrderedDict()
</snippet></ROW><ROW><id>19684797</id><snippet>MyApiClass</snippet></ROW><ROW><id>19684797</id><snippet>partial</snippet></ROW><ROW><id>19684845</id><snippet>SecureForm</snippet></ROW><ROW><id>19684845</id><snippet>SecureForm</snippet></ROW><ROW><id>19684948</id><snippet>&gt;&gt;&gt; dfA = pd.DataFrame(['a','b','c'],columns=['A'])
&gt;&gt;&gt; dfB = pd.DataFrame(range(3),columns=['B'])
&gt;&gt;&gt; dfA['key'] = 1
&gt;&gt;&gt; dfB['key'] = 1
&gt;&gt;&gt; pd.merge(dfB, dfA, on='key').ix[:, ('A','B')]
   A  B
0  a  0
1  b  0
2  c  0
3  a  1
4  b  1
5  c  1
6  a  2
7  b  2
8  c  2
</snippet></ROW><ROW><id>19684948</id><snippet>how='cross'</snippet></ROW><ROW><id>19685083</id><snippet>atom = tables.Float32Atom() # you have UInt8Atom() above.  do you mean that?
shape = (a.shape[0], b.shape[1])

# you can vary block_size and chunkshape independently, but I would
# aim to have block_size an integer multiple of chunkshape
# your mileage may vary and depends on the array size and how you'll
# access it in the future.

Nchunk = 128  # ?
chunkshape = (Nchunk, Nchunk)
chunk_multiple = 1
block_size = chunk_multiple * Nchunk
c = h5f.create_carray(h5.root, 'c', atom, shape, chunkshape=chunkshape)

for i_start in range(0, a.shape[0], block_size):
    for j_start in range(0, b.shape[1], block_size):
        for k_start in range(0, a.shape[1], block_size):
            c[i_start:i_start+block_size, j_start:j_start + block_size] += \ 
                    np.dot(a[i_start:i_start + block_size, k_start:k_start + block_size],
                           b[k_start:k_start + block_size, j_start:j_start + block_size]
</snippet></ROW><ROW><id>19686210</id><snippet>import matplotlib.pylab as plt
from numpy.random import rand

data = rand(100,100)
mycm = plt.cm.Reds

fig = plt.figure()
ax4 = plt.subplot2grid((3, 4), (1, 3), colspan=1, rowspan=1)

heatmap = ax4.pcolor(data, cmap=mycm, edgecolors = 'none', picker=True)

box = ax4.get_position()
ax4.set_position([box.x0*1.05, box.y0, box.width, box.height])

# create color bar
axColor = plt.axes([box.x0*1.05 + box.width * 1.05, box.y0, 0.01, box.height])
plt.colorbar(heatmap, cax = axColor, orientation="vertical")
plt.show()
</snippet></ROW><ROW><id>19686219</id><snippet>super()</snippet></ROW><ROW><id>19686219</id><snippet>__getitem__</snippet></ROW><ROW><id>19686219</id><snippet>def __getitem__(self,n):
    while len(self) &lt;= n:
        self.append(self.dft)
    return super(ilist, self).__getitem__(n)
</snippet></ROW><ROW><id>19686219</id><snippet>&gt;&gt;&gt; class ilist(list):
...     def __init__(self,r=list(),dft=None):
...         list.__init__(self,r)
...         self.dft=dft
...     def __getitem__(self, n):
...         while len(self) &lt;= n:
...             self.append(self.dft)
...         return super(ilist, self).__getitem__(n)
... 
&gt;&gt;&gt; il = ilist()
&gt;&gt;&gt; il[3]
&gt;&gt;&gt; il
[None, None, None, None]
&gt;&gt;&gt; il[2] = 5
&gt;&gt;&gt; il
[None, None, 5, None]
&gt;&gt;&gt; il[2]
5
</snippet></ROW><ROW><id>19686219</id><snippet>def __getitem__(self, n):
    maxindex = n
    if isinstance(maxindex, slice):
        maxindex = maxindex.indices(len(self))[1]
    while len(self) &lt;= maxindex:
        self.append(self.dft)
    return super(ilist, self).__getitem__(n)
</snippet></ROW><ROW><id>19686219</id><snippet>__setitem__</snippet></ROW><ROW><id>19686219</id><snippet>def __setitem__(self, n, val):
    maxindex = n
    if isinstance(maxindex, slice):
        maxindex = maxindex.indices(len(self))[1]
    while len(self) &lt;= maxindex:
        self.append(self.dft)
    return super(ilist, self).__setitem__(n, val)
</snippet></ROW><ROW><id>19686219</id><snippet>class ilist(list):
    def __init__(self, r=None, dft=None):
        if r is None:
            r = []
        list.__init__(self, r)
        self.dft=dft

    def _ensure_length(n):
        maxindex = n
        if isinstance(maxindex, slice):
            maxindex = maxindex.indices(len(self))[1]
        while len(self) &lt;= maxindex:
            self.append(self.dft)

    def __getitem__(self, n):
        self._ensure_length(n)
        return super(ilist, self).__getitem__(n)

    def __setitem__(self, n, val):
        self._ensure_length(n)
        return super(ilist, self).__getitem__(n)
</snippet></ROW><ROW><id>19686233</id><snippet>In [28]: i = date_range('20130101',periods=20000000,freq='s')

In [29]: i
Out[29]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-01-01 00:00:00, ..., 2013-08-20 11:33:19]
Length: 20000000, Freq: S, Timezone: None
</snippet></ROW><ROW><id>19686233</id><snippet>In [30]: %timeit pd.to_timedelta(int((i.hour*3600+i.minute*60+i.second).mean()),unit='s')
1 loops, best of 3: 2.87 s per loop
</snippet></ROW><ROW><id>19686233</id><snippet>to_timedelta</snippet></ROW><ROW><id>19686233</id><snippet>In [31]: pd.to_timedelta(int((i.hour*3600+i.minute*60+i.second).mean()),unit='s')
Out[31]: 
0   11:59:12
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>19686233</id><snippet>In [32]: int((i.hour*3600+i.minute*60+i.second).mean())
Out[32]: 43152
</snippet></ROW><ROW><id>19686392</id><snippet>pyzendoc:main</snippet></ROW><ROW><id>19686392</id><snippet>(environ, start_response)</snippet></ROW><ROW><id>19686392</id><snippet>main(global_conf, **settings)</snippet></ROW><ROW><id>19686392</id><snippet>gunicorn_paster</snippet></ROW><ROW><id>19686469</id><snippet>cache_max_age=0</snippet></ROW><ROW><id>19686469</id><snippet>add_static_view</snippet></ROW><ROW><id>19686586</id><snippet>def main(global_conf, **settings):
    parser = ConfigParser({'here': global_conf['__here__']})
    parser.read(global_conf['__file__'])
    for k, v in parser.items('user:sg:qa'):
        settings['user:sg:qa:' + k] = v

    config = Configurator(settings=settings)
</snippet></ROW><ROW><id>19686586</id><snippet>request.registry.settings['user:sg:qa:host']
</snippet></ROW><ROW><id>19686624</id><snippet>itertools.cycle</snippet></ROW><ROW><id>19686624</id><snippet>A = [1,2,3,4,5,6,7,8,9]
B = ["A","B","C"]

from itertools import cycle
zip_list = zip(A, cycle(B)) if len(A) &gt; len(B) else zip(cycle(A), B)
</snippet></ROW><ROW><id>19686640</id><snippet>sorted(results, key=lambda t:t[0])
</snippet></ROW><ROW><id>19686640</id><snippet>sorted(results, key=lambda t:t[0], reverse=True)
</snippet></ROW><ROW><id>19686782</id><snippet>def array_front9(nums):   # Define the function "array_front9"
    end = len(nums)       # Get the length of "nums" and put it in the variable "end"
    if end &gt; 4:           # If "end" is greater than 4...
        end = 4           # ...reset "end" to 4

    for i in range(end):  # This iterates through each number contained in the range of "end", placing it in the variable "i"
        if nums[i]==9:    # If the "i" index of "nums" is 9...
            return True   # ...return True because we found what we were looking for
    return False          # If we have got here, return False because we didn't find what we were looking for
</snippet></ROW><ROW><id>19686782</id><snippet>True</snippet></ROW><ROW><id>19686958</id><snippet>weeks=1</snippet></ROW><ROW><id>19686958</id><snippet>start_delta</snippet></ROW><ROW><id>19686958</id><snippet>&gt;&gt;&gt; start_delta = datetime.timedelta(days=weekday, weeks=1)
</snippet></ROW><ROW><id>19686958</id><snippet>start_delta</snippet></ROW><ROW><id>19686958</id><snippet>&gt;&gt;&gt; start_delta
datetime.timedelta(9)
&gt;&gt;&gt; start_of_week = today - start_delta
&gt;&gt;&gt; start_of_week
datetime.date(2013, 10, 21)
</snippet></ROW><ROW><id>19687000</id><snippet>sort</snippet></ROW><ROW><id>19687000</id><snippet>-M</snippet></ROW><ROW><id>19687000</id><snippet>sort -k1 -M test.txt
</snippet></ROW><ROW><id>19687000</id><snippet>-k1</snippet></ROW><ROW><id>19687000</id><snippet>-M</snippet></ROW><ROW><id>19687000</id><snippet>sort -k1,1M -k2,2n test.txt
</snippet></ROW><ROW><id>19687103</id><snippet>%w[
  @@106#107#term1@@106#term2@@
  @@63#term1@@
  @@55#term1@@20#term2@@10015#18#term3@@
  @@106#107#my@@106#term@@
  @@63#hello@@
  @@55#rock@@20#my@@10015#18#world@@
].map{ |str|
  str.scan(/[^@#]+?)(?=@/)
}
# =&gt; [["term1", "term2"], ["term1"], ["term1", "term2", "term3"], ["my", "term"], ["hello"], ["rock", "my", "world"]]
</snippet></ROW><ROW><id>19687103</id><snippet>str</snippet></ROW><ROW><id>19687103</id><snippet>row['xTerm']</snippet></ROW><ROW><id>19687103</id><snippet>/[^@#]+?(?=@)/</snippet></ROW><ROW><id>19687103</id><snippet>str</snippet></ROW><ROW><id>19687103</id><snippet>#</snippet></ROW><ROW><id>19687103</id><snippet>@</snippet></ROW><ROW><id>19687103</id><snippet>@</snippet></ROW><ROW><id>19687377</id><snippet>__setitem__()</snippet></ROW><ROW><id>19687377</id><snippet>class Only5Items(dict):

    def __setitem__(self, key, value):
        if len(self) &lt; 5 or key in self:   # allow reassignment of existing key
            return super(Only5Items, self).__setitem__(key, value)
        raise KeyError("maximum number of items (5) exceeded")
</snippet></ROW><ROW><id>19687377</id><snippet>items = Only5Items(hi1="asdf1", hi2="asdf2", hi3="asdf3", hi4="asdf4", hi5="asdf5")
try:
    items["hi6"] = "asdf6"
except KeyError as e:
    print(e)
</snippet></ROW><ROW><id>19687377</id><snippet>True/False</snippet></ROW><ROW><id>19687377</id><snippet>class Only5Items(dict):

    def __setitem__(self, key, value):
        if len(self) &lt; 5 or key in self:   # allow reassignment of existing key
            return super(Only5Items, self).__setitem__(key, value)
        raise KeyError("maximum number of items (5) exceeded")

    def did_set(self, key, value):
        try:
            self[key] = value
        except KeyError:
            return False
        return True
</snippet></ROW><ROW><id>19687377</id><snippet>if not items.did_set("hi6", "asdf6"):
    print "couldn't set key 'hi6', dictionary is probably full"
</snippet></ROW><ROW><id>19687377</id><snippet>setdefault()</snippet></ROW><ROW><id>19687459</id><snippet>def stop_iteration():
    raise StopIteration
</snippet></ROW><ROW><id>19687459</id><snippet>foo()</snippet></ROW><ROW><id>19687459</id><snippet>myList = list((i,r) if i != 0 else stop_iteration() for (i,r) in foo())
</snippet></ROW><ROW><id>19687459</id><snippet>def foo_generator():
    i,r = foo()
    while i != 0:
      yield i,r
      i,r = foo()

myList = list(foo_generator())
</snippet></ROW><ROW><id>19687513</id><snippet>fields = ('fps', 'sps', 'tps', 'fpp', 'spp', 'tpp')
for r in results.values():
    print 'Row with id=%s:' % r['id']
    for f in fields:
        if word_name in str(r[f]):
            print '  Field %s matches' % f
</snippet></ROW><ROW><id>19687900</id><snippet>shuffle</snippet></ROW><ROW><id>19687900</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; coordinates = [(i, j) for i in xrange(10) for j in xrange(10)]
&gt;&gt;&gt; random.shuffle(coordinates)
&gt;&gt;&gt; coordinates[:60]
[(9, 5), (6, 9), (1, 5), ..., (0, 2), (5, 9), (2, 6)]
</snippet></ROW><ROW><id>19688084</id><snippet>weights</snippet></ROW><ROW><id>19688084</id><snippet>weights = [[0] * self.n_input ] * (self.n_neurons)
</snippet></ROW><ROW><id>19688084</id><snippet>inner_list = [0] * self.n_input
weights = [inner_list] * (self.n_neurons)
</snippet></ROW><ROW><id>19688084</id><snippet>weights</snippet></ROW><ROW><id>19688084</id><snippet>weights = [[0] * self.n_input for _ in range(self.n_neurons)]
</snippet></ROW><ROW><id>19688084</id><snippet>*</snippet></ROW><ROW><id>19688084</id><snippet>[0] * 4</snippet></ROW><ROW><id>19688084</id><snippet>[[0]] * 4</snippet></ROW><ROW><id>19688134</id><snippet>next2=input("How many would you like to add? ")
print("")
count = 0
inputs = []
while count &lt; int(next2):
    count = count + 1
    next3=input(str(count) + ". Input: ")
    inputs += [next3]
print("")
check=input("Are you sure? (Y/N) ")
while check not in ("YyYesNnNo"):
    check=input("Are you sure? (Y/N) ")
if check in ("YyYes"):
    for userInput in inputs:
        add(userInput)
else:
    home()
</snippet></ROW><ROW><id>19688179</id><snippet>def findDict (d, keyName):
    if not isinstance (d, dict): return None
    if keyName in d: return d [keyName]
    for subdict in d.values ():
        r = findDict (subdict, keyName)
        if r: return r
</snippet></ROW><ROW><id>19688210</id><snippet>#! /usr/bin/env python

from subprocess import call, STDOUT
import os
if call(["git", "branch"], stderr=STDOUT, stdout=open(os.devnull, 'w')) != 0:
    print("Nope!")
else:
    print("Yup!")
</snippet></ROW><ROW><id>19688256</id><snippet>def return_data(request):
    return HttpResponse('entered text:' + request.POST['text'])
</snippet></ROW><ROW><id>19688256</id><snippet>urlpatterns = patterns('',
    url(r'^$', views.index),
    url(r'^output/$', views.return_data)
)
</snippet></ROW><ROW><id>19688256</id><snippet>&lt;form action="output/" method="post"&gt;
{% csrf_token %}
...
&lt;/form&gt;
</snippet></ROW><ROW><id>19688279</id><snippet>in</snippet></ROW><ROW><id>19688279</id><snippet>np.any(y == e)</snippet></ROW><ROW><id>19688279</id><snippet>y == e</snippet></ROW><ROW><id>19688279</id><snippet>True</snippet></ROW><ROW><id>19688279</id><snippet>&gt;&gt;&gt; np.any(np.all(x == e, axis=-1))
True
&gt;&gt;&gt; np.any(np.all(y == e, axis=-1))
False
</snippet></ROW><ROW><id>19688279</id><snippet>y == e</snippet></ROW><ROW><id>19688279</id><snippet>&gt;&gt;&gt; y == e
array([[False, False],
       ...
       [False, False],
       [ True, False],
       [False, False],
       ...
       [False, False]], dtype=bool)
</snippet></ROW><ROW><id>19688583</id><snippet>themap={"one":1, "two":2}   # make a dictionary
themap["one"]    # evaluates to the number 1
</snippet></ROW><ROW><id>19688583</id><snippet>themap={"one":"1", "two":"2"}
themap["one"]    # evaluates to the string "1"
</snippet></ROW><ROW><id>19688583</id><snippet>inputs=["one","two"]   # square brackets, so it's an array
themap={"one":1, "two":2}   # braces, so it's a dictionary
map(lambda x: themap[x], inputs)  # evaluates to [1, 2]
</snippet></ROW><ROW><id>19688583</id><snippet>lambda x: themap[x]</snippet></ROW><ROW><id>19688583</id><snippet>themap</snippet></ROW><ROW><id>19688583</id><snippet>map()</snippet></ROW><ROW><id>19688583</id><snippet>inputs</snippet></ROW><ROW><id>19688650</id><snippet>itertools.groupby(iterable[, key])</snippet></ROW><ROW><id>19688650</id><snippet>item</snippet></ROW><ROW><id>19688650</id><snippet>used_names = set()
final_result = []
for k, g in itertools.groupby(query_result, key=lambda x: x['item']):
    final_result.append(sorted(g, key=lambda item: item['endtime'], reverse=True)[0])
</snippet></ROW><ROW><id>19688650</id><snippet>end_time</snippet></ROW><ROW><id>19688650</id><snippet>import datetime
def endtime_sort_key(item):
    return datetime.datetime.strptime(item['endtime'], "%Y-%m.%d %H:%M:%S")

used_names = set()
final_result = []
for k, g in itertools.groupby(query_result, key=lambda x: x['item']):
    final_result.append(sorted(g, key=endtime_sort_key, reverse=True)[0])
</snippet></ROW><ROW><id>19688738</id><snippet>C:\&gt;mklink /D link_name Y:\&lt;vobtag&gt;\dir3 
symbolic link created for link_name &lt;&lt;===&gt;&gt; Y:\&lt;vobtag&gt;\dir3
&gt;cd link_name
&gt;cleartool ls 
(system crash)
</snippet></ROW><ROW><id>19688738</id><snippet>cleartool ls</snippet></ROW><ROW><id>19688852</id><snippet>requests.auth.HTTPDigestAuth</snippet></ROW><ROW><id>19688852</id><snippet>jsons.dump</snippet></ROW><ROW><id>19688915</id><snippet>newname = infile.next().rstrip().split(",")[2]
</snippet></ROW><ROW><id>19689249</id><snippet>numpy</snippet></ROW><ROW><id>19689249</id><snippet>assert_allclose</snippet></ROW><ROW><id>19689249</id><snippet>&gt;&gt;&gt; x = [1e-5, 1e-3, 1e-1]
&gt;&gt;&gt; y = np.arccos(np.cos(x))
&gt;&gt;&gt; assert_allclose(x, y, rtol=1e-5, atol=0)
</snippet></ROW><ROW><id>19689249</id><snippet>assert_allclose</snippet></ROW><ROW><id>19689360</id><snippet>    &gt;&gt;&gt; c = [[1,4,-5],[3,-2,9]] # of the form [[x1,x2,x3],[y1,y2,y3]]
    &gt;&gt;&gt; centroide = (sum(c[0])/len(c[0]),sum(c[1])/len(c[1]))

    &gt;&gt;&gt; centroide
    (0, 3)
</snippet></ROW><ROW><id>19689361</id><snippet>yield from</snippet></ROW><ROW><id>19689361</id><snippet>u'...'</snippet></ROW><ROW><id>19689361</id><snippet>yield from</snippet></ROW><ROW><id>19689361</id><snippet>u</snippet></ROW><ROW><id>19689369</id><snippet>np.copyto(b, c[...,None], where=b.mask)
</snippet></ROW><ROW><id>19689369</id><snippet>c</snippet></ROW><ROW><id>19689369</id><snippet>np.mean</snippet></ROW><ROW><id>19689369</id><snippet>keepdims</snippet></ROW><ROW><id>19689369</id><snippet>np.sum</snippet></ROW><ROW><id>19689369</id><snippet>import numpy as np

a = np.arange(24).reshape(4,-1).astype(float)   # I changed your example to be a float
b = np.ma.masked_where(numpy.remainder(a,5)==0,a)
c = b.mean(1)

np.copyto(b, c[...,None], where=b.mask)

In [189]: b.data
Out[189]: 
array([[  2.5,   1. ,   2. ,   3. ,   4. ,   2.5],
       [  6. ,   7. ,   8. ,   9. ,   8.2,  11. ],
       [ 12. ,  13. ,  14. ,  14.4,  16. ,  17. ],
       [ 18. ,  19. ,  20.6,  21. ,  22. ,  23. ]])
</snippet></ROW><ROW><id>19689369</id><snippet>inds</snippet></ROW><ROW><id>19689369</id><snippet>In [169]: %%timeit
   .....: inds = np.where(b.mask)
   .....: b[inds] = np.take(c, inds[0])
   .....: 
10000 loops, best of 3: 81.2 µs per loop


In [173]: %%timeit
   .....: np.copyto(b, c[...,None], where=b.mask)
   .....: 
10000 loops, best of 3: 45.1 µs per loop
</snippet></ROW><ROW><id>19689369</id><snippet>a = np.arange(24).reshape(4,-1)    # still an int
b = np.ma.masked_where(numpy.remainder(a,5)==0,a)
c = b.mean(1)

In [193]: np.copyto(b, c[...,None], where=b.mask)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-193-edc7f01f3f89&gt; in &lt;module&gt;()
----&gt; 1 np.copyto(b, c[...,None], where=b.mask)

TypeError: Can not cast scalar from dtype('float64') to dtype('int64') according to the rule 'same_kind'
</snippet></ROW><ROW><id>19689369</id><snippet>np.put</snippet></ROW><ROW><id>19689369</id><snippet>np.place</snippet></ROW><ROW><id>19689369</id><snippet>np.copyto</snippet></ROW><ROW><id>19689369</id><snippet>np.putmask</snippet></ROW><ROW><id>19689489</id><snippet>if arr[i][j]==0:
    ...
else:
    row_arr.append(1/ arr[i][j])
</snippet></ROW><ROW><id>19689524</id><snippet>&gt;&gt;&gt; a = [[5, 4, 3, 3.2], [1, .2, 4.4, 8], [3, 8, 6.5, 2], [3, 2, 1, 5.3]]
&gt;&gt;&gt; a[0]
[5, 4, 3, 3.2]
</snippet></ROW><ROW><id>19689524</id><snippet>&gt;&gt;&gt; column_two = [a[0][2], a[1][2], a[2][2], a[3][2]]
&gt;&gt;&gt; column_two
[3, 4.4, 6.5, 1]
</snippet></ROW><ROW><id>19689524</id><snippet>&gt;&gt;&gt; [x[2] for x in a]
[3, 4.4, 6.5, 1]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19689524</id><snippet>column_two = []
for row in a:
    column_two.append(row[2])
</snippet></ROW><ROW><id>19689752</id><snippet>win32com\gen_py\E602ED16-8EF9-4F08-B09F-6F6E8306C51Bx0x1x0.py
</snippet></ROW><ROW><id>19689752</id><snippet>-</snippet></ROW><ROW><id>19689905</id><snippet>pt = (2, 2)
distance = 1
mask = (indices[0] - pt[0]) ** 2 + (indices[1] - pt[1]) ** 2 &lt;= distance ** 2
result = my_array[mask]
</snippet></ROW><ROW><id>19690093</id><snippet>list()</snippet></ROW><ROW><id>19690093</id><snippet>list_form = list(some_generator)
</snippet></ROW><ROW><id>19690093</id><snippet>list()</snippet></ROW><ROW><id>19690093</id><snippet>sorted()</snippet></ROW><ROW><id>19690093</id><snippet>sorted_form = sorted(some_generator)
</snippet></ROW><ROW><id>19690220</id><snippet>{{ data|tojson|safe }}
</snippet></ROW><ROW><id>19690252</id><snippet>csv</snippet></ROW><ROW><id>19690252</id><snippet>import csv

with open('inputfile', 'rb') as inputfile:
    reader = csv.reader(inputfile, delimiter='|')
    for row in reader:
        if len(row) &gt; 5 and row[5].lower().startswith('command'):
            print row[1], row[5]
</snippet></ROW><ROW><id>19690252</id><snippet>csv.reader()</snippet></ROW><ROW><id>19690252</id><snippet>['1376328501.285', '1166703600', '0', 'SimControl', '4', 'Command 72FB0007: AC28200 - "Thrst History Reset" to DCDR 0 time=62']
</snippet></ROW><ROW><id>19690252</id><snippet>Command</snippet></ROW><ROW><id>19690252</id><snippet>row[5]</snippet></ROW><ROW><id>19690252</id><snippet>row[1]</snippet></ROW><ROW><id>19690252</id><snippet>row[5]</snippet></ROW><ROW><id>19690252</id><snippet>command</snippet></ROW><ROW><id>19690252</id><snippet>import csv

with open('inputfile', newline='') as inputfile:
    reader = csv.reader(inputfile, delimiter='|')
    for row in reader:
        if len(row) &gt; 5 and row[5].lower().startswith('command'):
            print(row[1], row[5])
</snippet></ROW><ROW><id>19690513</id><snippet>from __future__ import</snippet></ROW><ROW><id>19690513</id><snippet>def (a, *b, **kwargs):
   c = 5
   if 'c' in kwargs:
       c = kwargs.pop('c')
</snippet></ROW><ROW><id>19690649</id><snippet>pip install Jinja2
</snippet></ROW><ROW><id>19690649</id><snippet>pip install ipython[all]
</snippet></ROW><ROW><id>19690883</id><snippet>sentence = raw_input("Please enter a sentence : ").lower()
newString = ''
validLetters = "abcdefghijklmnopqrstuvwxyz " #adding whitespace to valid chars...
space = []
for char in sentence:
    if char in validLetters or char in space:
        newString += char
shift = input("Please enter your shift : ")
resulta = []
for ch in newString:
    x = ord(ch)
    x = x+shift
    # special case for whitespace...
    resulta.append(chr(x if 97 &lt;= x &lt;= 122 else 96+x%122) if ch != ' ' else ch)
print sentence
print("")
print("Your encryption is :")
print("")
print ''.join(resulta)
</snippet></ROW><ROW><id>19690883</id><snippet>sentence = raw_input("Please enter a sentence : ").lower()
shift = input("Please enter your shift : ")

validLetters = map(chr, range(97, 123))
validLetters.append(' ')

tmp = [ord(ch)+shift for ch in sentence if ch in validLetters]
resulta = [chr(x if 97 &lt;= x &lt;= 122 else 96+x%122) if x != ord(' ')+shift else ' ' for x in tmp]

print sentence
print
print("Your encryption is :")
print
print ''.join(resulta)
</snippet></ROW><ROW><id>19691075</id><snippet>ravel</snippet></ROW><ROW><id>19691075</id><snippet>nditer</snippet></ROW><ROW><id>19691075</id><snippet>ndindex</snippet></ROW><ROW><id>19691075</id><snippet># For the simple case
for value in np.nditer(a):
    do_something_with(value)

# This is similar to above
for value in a.ravel():
    do_somting_with(value)

# Or if you need the index
for idx in np.ndindex(a.shape):
    a[idx] = do_something_with(a[idx])
</snippet></ROW><ROW><id>19691075</id><snippet>a[i, j]</snippet></ROW><ROW><id>19691075</id><snippet>a[i][j]</snippet></ROW><ROW><id>19691075</id><snippet>a[i, j]</snippet></ROW><ROW><id>19691075</id><snippet>a[(i, j)]</snippet></ROW><ROW><id>19691097</id><snippet>while 1:         
    for event in pygame.event.get():
        pygame.display.flip()
        if event.type == pygame.QUIT:sys.exit()
        pygame.time.wait(100)
        score = score + 1
</snippet></ROW><ROW><id>19691306</id><snippet>% for name, count in dict.items:
&lt;tr&gt;
&lt;td&gt;${name}&lt;/td&gt;
&lt;td&gt;${count}&lt;/td&gt;
&lt;/tr&gt;
% endfor
</snippet></ROW><ROW><id>19691306</id><snippet>% for name in dict:
&lt;tr&gt;
&lt;td&gt;${name}&lt;/td&gt;
&lt;td&gt;${dict[name]}&lt;/td&gt;
&lt;/tr&gt;
% endfor
</snippet></ROW><ROW><id>19691763</id><snippet>r = list()
S = "free tree"
S = "".join(S.split())
s = list()
for i in range(0,len(S)) :
    s.append(S[i])
while len(s) &gt; 0 :
    c1 = s.pop(0)
    c2 = 'X'
    if len(s) &gt; 0 :
        if s[0]!=c1 :
            c2 = s.pop(0)
    else :
        c2 = ''
    r.append("{0}{1}".format(c1,c2))
result = " ".join(r)
print(result)
</snippet></ROW><ROW><id>19691837</id><snippet>def factorial(x)
    pass
</snippet></ROW><ROW><id>19691837</id><snippet>&gt;&gt;&gt; factorial(7)
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19691837</id><snippet>def factorial(x):
    return x*x-1
</snippet></ROW><ROW><id>19691837</id><snippet>&gt;&gt;&gt; factorial(7)
42
</snippet></ROW><ROW><id>19691837</id><snippet>def factorial(x):
    return x * factorial(x-1)
</snippet></ROW><ROW><id>19691837</id><snippet>&gt;&gt;&gt; factorial(7)
RuntimeError: maximum recursion depth reached        # StackOverflow! (basically)
</snippet></ROW><ROW><id>19691837</id><snippet>def factorial(x):
    if x == 0:
        return 1
    else:
        return x * factorial(x-1)
</snippet></ROW><ROW><id>19691837</id><snippet>&gt;&gt;&gt; factorial(5)
120
</snippet></ROW><ROW><id>19691837</id><snippet>def factorial(n):
    """Return the factorial of n, an exact integer &gt;= 0.

    &gt;&gt;&gt; [factorial(n) for n in range(6)]
    [1, 1, 2, 6, 24, 120]
    &gt;&gt;&gt; factorial(30)
    265252859812191058636308480000000
    &gt;&gt;&gt; factorial(-1)
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0

    Factorials of floats are OK, but the float must be an exact integer:
    &gt;&gt;&gt; factorial(30.1)
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer
    &gt;&gt;&gt; factorial(30.0)
    265252859812191058636308480000000

    It must also not be ridiculously large:
    &gt;&gt;&gt; factorial(1e100)
    Traceback (most recent call last):
        ...
    OverflowError: n too large
    """

if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)
</snippet></ROW><ROW><id>19691837</id><snippet>Trying:
    [factorial(n) for n in range(6)]
Expecting:
    [1, 1, 2, 6, 24, 120]
ok
Trying:
    factorial(30)
Expecting:
    265252859812191058636308480000000
ok
Trying:
    factorial(-1)
Expecting:
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0
ok
Trying:
    factorial(30.1)
Expecting:
    Traceqwrqaeqrback (most recent call last):
        ...
    ValueError: n must be exact integer
**********************************************************************
File "C:/Python33/doctestex.py", line 14, in __main__.factorial
Failed example:
    factorial(30.1)
Exception raised:
    Traceback (most recent call last):
      File "C:\Python33\lib\doctest.py", line 1287, in __run
        compileflags, 1), test.globs)
      File "&lt;doctest __main__.factorial[3]&gt;", line 1, in &lt;module&gt;
        factorial(30.1)
      File "C:/Python33/doctestex.py", line 32, in factorial
        raise ValueError("n must be exact integer")
    ValueError: n must be exact integer
Trying:
    factorial(30.0)
Expecting:
    265252859812191058636308480000000
ok
Trying:
    factorial(1e100)
Expecting:
    Traceback (most recent call last):
        ...
    OverflowError: n too large
ok
1 items had no tests:
    __main__
**********************************************************************
1 items had failures:
   1 of   6 in __main__.factorial
6 tests in 2 items.
5 passed and 1 failed.
***Test Failed*** 1 failures.
&gt;&gt;&gt; ================================ RESTART ================================
&gt;&gt;&gt; 
Trying:
    [factorial(n) for n in range(6)]
Expecting:
    [1, 1, 2, 6, 24, 120]
**********************************************************************
File "C:/Python33/doctestex.py", line 4, in __main__.factorial
Failed example:
    [factorial(n) for n in range(6)]
Expected:
    [1, 1, 2, 6, 24, 120]
Got:
    [None, None, None, None, None, None]
Trying:
    factorial(30)
Expecting:
    265252859812191058636308480000000
**********************************************************************
File "C:/Python33/doctestex.py", line 6, in __main__.factorial
Failed example:
    factorial(30)
Expected:
    265252859812191058636308480000000
Got nothing
Trying:
    factorial(-1)
Expecting:
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0
**********************************************************************
File "C:/Python33/doctestex.py", line 8, in __main__.factorial
Failed example:
    factorial(-1)
Expected:
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0
Got nothing
Trying:
    factorial(30.1)
Expecting:
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer
**********************************************************************
File "C:/Python33/doctestex.py", line 14, in __main__.factorial
Failed example:
    factorial(30.1)
Expected:
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer
Got nothing
Trying:
    factorial(30.0)
Expecting:
    265252859812191058636308480000000
**********************************************************************
File "C:/Python33/doctestex.py", line 18, in __main__.factorial
Failed example:
    factorial(30.0)
Expected:
    265252859812191058636308480000000
Got nothing
Trying:
    factorial(1e100)
Expecting:
    Traceback (most recent call last):
        ...
    OverflowError: n too large
**********************************************************************
File "C:/Python33/doctestex.py", line 22, in __main__.factorial
Failed example:
    factorial(1e100)
Expected:
    Traceback (most recent call last):
        ...
    OverflowError: n too large
Got nothing
1 items had no tests:
    __main__
**********************************************************************
1 items had failures:
   6 of   6 in __main__.factorial
6 tests in 2 items.
0 passed and 6 failed.
***Test Failed*** 6 failures.
</snippet></ROW><ROW><id>19691837</id><snippet>Trying:
    [factorial(n) for n in range(6)]
Expecting:
    [1, 1, 2, 6, 24, 120]
ok
Trying:
    factorial(30)
Expecting:
    265252859812191058636308480000000
ok
Trying:
    factorial(-1)
Expecting:
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0
ok
Trying:
    factorial(30.1)
Expecting:
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer
ok
Trying:
    factorial(30.0)
Expecting:
    265252859812191058636308480000000
ok
Trying:
    factorial(1e100)
Expecting:
    Traceback (most recent call last):
        ...
    OverflowError: n too large
ok
1 items had no tests:
    __main__
1 items passed all tests:
   6 tests in __main__.factorial
6 tests in 2 items.
6 passed and 0 failed.
Test passed.
</snippet></ROW><ROW><id>19691837</id><snippet>help(factorial)</snippet></ROW><ROW><id>19691837</id><snippet>Help on function factorial in module __main__:

factorial(n)
    Return the factorial of n, an exact integer &gt;= 0.

    &gt;&gt;&gt; [factorial(n) for n in range(6)]
    [1, 1, 2, 6, 24, 120]
    &gt;&gt;&gt; factorial(30)
    265252859812191058636308480000000
    &gt;&gt;&gt; factorial(-1)
    Traceback (most recent call last):
        ...
    ValueError: n must be &gt;= 0

    Factorials of floats are OK, but the float must be an exact integer:
    &gt;&gt;&gt; factorial(30.1)
    Traceback (most recent call last):
        ...
    ValueError: n must be exact integer
    &gt;&gt;&gt; factorial(30.0)
    265252859812191058636308480000000

    It must also not be ridiculously large:
    &gt;&gt;&gt; factorial(1e100)
    Traceback (most recent call last):
        ...
    OverflowError: n too large
</snippet></ROW><ROW><id>19691837</id><snippet>assert</snippet></ROW><ROW><id>19691839</id><snippet>shell=True</snippet></ROW><ROW><id>19691839</id><snippet>[sys.executable, 'demo_package/deploy_database.py']</snippet></ROW><ROW><id>19691839</id><snippet>shell=True</snippet></ROW><ROW><id>19691839</id><snippet>shell=True</snippet></ROW><ROW><id>19691839</id><snippet>/bin/bash</snippet></ROW><ROW><id>19691839</id><snippet>shell=True</snippet></ROW><ROW><id>19692092</id><snippet>with open('test.txt') as f:
    data = [(l.split()[0].split('_'), l.split()[1]) for l in f]
    # Example:
    # [(['Jan', 'Feb'], '0.11'), (['Jan', 'Mar'], '-1.11'), (['Jan', 'Apr'], '0.2'),                   (['Feb', 'Jan'], '0.11'), (['Feb', 'Mar'], '-3.0'), (['Mar', 'Jan'], '-1.11'), (['Mar', 'Feb'], '-3.0'), (['Mar', 'Apr'], '3.5')]
    headers = set([var[0][0] for var in data] + [var[0][1] for var in data])
    # Example:
    # set(['Jan', 'Apr', 'Mar', 'Feb'])
</snippet></ROW><ROW><id>19692092</id><snippet>headers</snippet></ROW><ROW><id>19692092</id><snippet>data</snippet></ROW><ROW><id>19692092</id><snippet>format</snippet></ROW><ROW><id>19692092</id><snippet>open('output.txt', 'w')</snippet></ROW><ROW><id>19692259</id><snippet>!command</snippet></ROW><ROW><id>19692550</id><snippet>$ test=$(python -c "print 'hello'")
$ echo $test
hello
</snippet></ROW><ROW><id>19692550</id><snippet>echo</snippet></ROW><ROW><id>19692550</id><snippet>$ test=$(python -c "for i in range(3): print 'hello'")
$ echo $test
hello hello hello
$ echo "$test"
hello
hello
hello
</snippet></ROW><ROW><id>19692550</id><snippet>$ test=$(python -c "
&gt; import math
&gt; import sys
&gt; 
&gt; for x in sys.argv[1:]:
&gt;    print '2pi R of {}={}'.format(x,float(x)*2*math.pi)
&gt; " 1 2.4 5 6.6)
$ echo "$test"
2pi R of 1=6.28318530718
2pi R of 2.4=15.0796447372
2pi R of 5=31.4159265359
2pi R of 6.6=41.4690230274
</snippet></ROW><ROW><id>19692582</id><snippet>y_derivative=y</snippet></ROW><ROW><id>19692582</id><snippet>y_derivative[i]=y[i+1]</snippet></ROW><ROW><id>19692582</id><snippet>y_derivative=y[:]</snippet></ROW><ROW><id>19692582</id><snippet>y</snippet></ROW><ROW><id>19692582</id><snippet>y_derivative</snippet></ROW><ROW><id>19692582</id><snippet>sys.argv</snippet></ROW><ROW><id>19692640</id><snippet>from __future__ import print_function  #(1)
import os  #(2)
import sys
import time


def child(pipein):  # (3)
    num1 = int(os.read(pipein, 32))  # (6)
    num2 = int(os.read(pipein, 32))
    r = num1 * num2
    print("r = {}".format(r))
    print("Child says bye.") 
    sys.stdout.flush()  # (4)
    os._exit(0)  # (5)


def parent():
    pipein, pipeout = os.pipe()
    x = 1
    if os.fork() == 0:
        print("Launching child")
        child(pipein)
    else:  # (7)
        print("In parent")
        num1 = str(2)  # (8)
        num2 = str(1)
        os.write(pipeout, num1)
        os.write(pipeout, num2)
        print("Parent goes to sleep")
        time.sleep(x)
        print("Parent says bye.")


if __name__ == '__main__':
    parent()
</snippet></ROW><ROW><id>19692640</id><snippet>print()</snippet></ROW><ROW><id>19692640</id><snippet>exit()</snippet></ROW><ROW><id>19692640</id><snippet>In parent
Launching child
Parent goes to sleep
r = 2
Child says bye.
Parent says bye.
</snippet></ROW><ROW><id>19692640</id><snippet>multiprocessing</snippet></ROW><ROW><id>19692751</id><snippet>for row in dictrows:
    out_f.write("%s%s" %(delimiter.join([row[name] for name in fieldnames]),
                lineterminator))
</snippet></ROW><ROW><id>19692777</id><snippet>chmod +x EditOneAndQuit
</snippet></ROW><ROW><id>19692777</id><snippet>#!/bin/bash
# Start textedit in background
open "$1" &amp;

# Wait till textedit has zero documents open
while true
do
sleep 1
docs=`osascript -e 'tell application "textedit" to get documents'`
if [ -z "$docs" ]; then
    # Kill off poor old textedit
    osascript -e 'tell application "textedit" to quit'
exit
fi
done
</snippet></ROW><ROW><id>19692777</id><snippet>ls &gt; fred.txt
./OpenOneAndQuit fred.txt
</snippet></ROW><ROW><id>19692842</id><snippet>paginator_class</snippet></ROW><ROW><id>19692842</id><snippet>Paginator</snippet></ROW><ROW><id>19692842</id><snippet>class ExampleListView(ListView):
    paginate_by = 10
    paginator_class = ShuffledPaginator
    ...
</snippet></ROW><ROW><id>19692842</id><snippet>class ShuffledPaginator(Paginator):
    def page(self, number):
        page = super(ShuffledPaginator, self).page(number)
        random.shuffle(page.object_list)
        return page
</snippet></ROW><ROW><id>19692854</id><snippet>myfile.filename</snippet></ROW><ROW><id>19692854</id><snippet>dir(myfile)</snippet></ROW><ROW><id>19693010</id><snippet>pip works with CPython versions 2.6, 2.7, 3.1, 3.2, 3.3 and also pypy.

pip works on Unix/Linux, OS X, and Windows.

Note: Python 2.5 was supported through v1.3.1, and Python 2.4 was supported through v1.1.
</snippet></ROW><ROW><id>19693170</id><snippet>import sys
...
if sys.argv[0].endswith('.exe'):
   ...
</snippet></ROW><ROW><id>19693209</id><snippet>"C:\\Users\\Mainuser\\Desktop\\Lab6"
</snippet></ROW><ROW><id>19693209</id><snippet>r"C:\Users\Mainuser\Desktop\Lab6"
</snippet></ROW><ROW><id>19693209</id><snippet>os.path.join</snippet></ROW><ROW><id>19693209</id><snippet>os.path.join("c:", os.sep, "Users", "Mainuser", "Desktop", "Lab6")
</snippet></ROW><ROW><id>19693209</id><snippet>os.path.join</snippet></ROW><ROW><id>19693261</id><snippet>with open('topon.txt') as infile:
  for line in infile:
    print line.split('.', 1)[0]
</snippet></ROW><ROW><id>19693457</id><snippet>'good/'</snippet></ROW><ROW><id>19693457</id><snippet>'/good/'</snippet></ROW><ROW><id>19693487</id><snippet>.loc</snippet></ROW><ROW><id>19693487</id><snippet>.ix</snippet></ROW><ROW><id>19693487</id><snippet>df.loc[I,'Distances']=distances
</snippet></ROW><ROW><id>19693678</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ptr = ctypes.c_char_p(b'\xd0\x07')
&gt;&gt;&gt; val = ctypes.c_int()
&gt;&gt;&gt; ctypes.memmove(ctypes.byref(val),ptr,ctypes.sizeof(val))
&gt;&gt;&gt; val.value
2000
</snippet></ROW><ROW><id>19693691</id><snippet>__getattribute__</snippet></ROW><ROW><id>19693691</id><snippet>def __getattribute__(self, name):
    attr = super(MySuperclass, self).__getattribute__(name)
    if callable(attr):
        return hierarchywrapper(attr)
    else:
        return attr
</snippet></ROW><ROW><id>19693691</id><snippet>class CallableHierarchyWrapper(object):

    def __init__(self, wrapped_object):
        self.wrapped_object = wrapped_object

    def __getattribute__(self, name):
        attr = self.wrapped_object.__getattribute__(name)
        if callable(attr):
            return hierarchywrapper(attr)
        else:
            return attr
</snippet></ROW><ROW><id>19693709</id><snippet>retrbinary</snippet></ROW><ROW><id>19693709</id><snippet>ftp.quit()</snippet></ROW><ROW><id>19693709</id><snippet>timeout</snippet></ROW><ROW><id>19693709</id><snippet>FTP</snippet></ROW><ROW><id>19693709</id><snippet>IDLE</snippet></ROW><ROW><id>19693709</id><snippet>ftp.voidcmd('NOOP')</snippet></ROW><ROW><id>19693709</id><snippet>NOOP</snippet></ROW><ROW><id>19693709</id><snippet>select.select</snippet></ROW><ROW><id>19693709</id><snippet>retrbinary</snippet></ROW><ROW><id>19693709</id><snippet>transfercmd</snippet></ROW><ROW><id>19693709</id><snippet>def downloadFile(…):
    ftp = FTP(…)
    sock = ftp.transfercmd('RETR ' + filename)
    def background():
        f = open(…)
        while True:
            block = sock.recv(1024*1024)
            if not block:
                break
            f.write(block)
        sock.close()
    t = threading.Thread(target=background)
    t.start()
    while t.is_alive():
        t.join(60)
        ftp.voidcmd('NOOP')
</snippet></ROW><ROW><id>19693709</id><snippet>ftp.abort()</snippet></ROW><ROW><id>19693709</id><snippet>rest</snippet></ROW><ROW><id>19693709</id><snippet>retrbinary</snippet></ROW><ROW><id>19693709</id><snippet>ABOR</snippet></ROW><ROW><id>19693709</id><snippet>NOOP</snippet></ROW><ROW><id>19693709</id><snippet>quite</snippet></ROW><ROW><id>19693709</id><snippet>close</snippet></ROW><ROW><id>19693777</id><snippet>.get()</snippet></ROW><ROW><id>19693777</id><snippet>[]</snippet></ROW><ROW><id>19693777</id><snippet>url = 'http://www.places4two.de/location/'+locname+'/'+str(lid)+'/'
if comment_dict.get(url).get('comments').get('data'):
     #my code.
</snippet></ROW><ROW><id>19693777</id><snippet>NoneType has no attribute</snippet></ROW><ROW><id>19693777</id><snippet>url = 'http://www.places4two.de/location/'+locname+'/'+str(lid)+'/'
if comment_dict.get(url, {}).get('comments', {}).get('data', None):
     #my code.
</snippet></ROW><ROW><id>19693919</id><snippet>lambda</snippet></ROW><ROW><id>19693919</id><snippet>i</snippet></ROW><ROW><id>19693919</id><snippet>while</snippet></ROW><ROW><id>19693919</id><snippet>i</snippet></ROW><ROW><id>19693919</id><snippet>i</snippet></ROW><ROW><id>19693919</id><snippet>...
i = 1
while i &lt; 10:
    # Give a parameter to the lambda, defaulting to i (function default
    # arguments are bound at time of declaration)
    newButton = Button(F, text="Show Number",
        command=lambda num=i: showNumber(num))
    ...
</snippet></ROW><ROW><id>19693986</id><snippet>value</snippet></ROW><ROW><id>19693986</id><snippet>&lt;option value="{{label}}"&gt;
</snippet></ROW><ROW><id>19693986</id><snippet>&lt;input list="all_label_names" name="label_list" type="search" required&gt;
&lt;datalist id="all_label_names"&gt;
{% for label in label_names %}
    &lt;option value="{{label}}"&gt;
{% endfor %}
&lt;/datalist&gt; 
</snippet></ROW><ROW><id>19693986</id><snippet>label</snippet></ROW><ROW><id>19693986</id><snippet>a b</snippet></ROW><ROW><id>19693986</id><snippet>    &lt;option value=a b&gt;
</snippet></ROW><ROW><id>19693986</id><snippet>value=a</snippet></ROW><ROW><id>19693986</id><snippet>b</snippet></ROW><ROW><id>19694030</id><snippet>property</snippet></ROW><ROW><id>19694030</id><snippet>RoomPlaceholder</snippet></ROW><ROW><id>19694030</id><snippet>object</snippet></ROW><ROW><id>19694030</id><snippet>class RoomPlaceholder(object):
    # etc.
</snippet></ROW><ROW><id>19694041</id><snippet>from ctypes import *
from ctypes.wintypes import *
import struct

OpenProcess = windll.kernel32.OpenProcess
ReadProcessMemory = windll.kernel32.ReadProcessMemory
CloseHandle = windll.kernel32.CloseHandle

PROCESS_ALL_ACCESS = 0x1F0FFF

pid = 3112
address = 0x2411918

buffer = c_char_p(b"The data goes here")
val = c_int()
bufferSize = len(buffer.value)
bytesRead = c_ulong(0)

processHandle = OpenProcess(PROCESS_ALL_ACCESS, False, pid)
if ReadProcessMemory(processHandle, address, buffer, bufferSize, byref(bytesRead)):
    memmove(ctypes.byref(val), buffer, ctypes.sizeof(val))
    print("Success:" + str(val.value))
else:
    print("Failed.")

CloseHandle(processHandle)
</snippet></ROW><ROW><id>19694085</id><snippet>class Symbol(object):
    def __init__(self, name):
        self._name = name

    def __str__(self):
        return str(self._name)

    def __div__(self, other):
        return Div(self, other)

    def __mul__(self, other):
        return Mult(self, other)

    def __add__(self, other):
        return Add(self, other)

    def __sub__(self, other):
        return Sub(self, other)

    def __rdiv__(self, other):
        return Div(other, self)

    def __rmul__(self, other):
        return Mult(other, self)

    def __radd__(self, other):
        return Add(other, self)

    def __rsub__(self, other):
        return Sub(other, self)

class Operation(Symbol):
    def __init__(self, a, b, op):
        self._a = a
        self._b = b
        self._op = op

    def __str__(self):
        return self._op.format(self._a, self._b)

class Add(Operation):
    precedence = 0

    def __init__(self, a, b):
        super(Add, self).__init__(a, b, "{0} + {1}")

class Sub(Operation):
    precedence = 0
    def __init__(self, a, b):
        super(Sub, self).__init__(a, b, "{0} - {1}")

class Mult(Operation):
    precedence = 1
    def __init__(self, a, b):
        if isinstance(a, Operation) and a.precedence &lt; Mult.precedence:
            a_form = "({0})"
        else:
            a_form = "{0}"
        if isinstance(b, Operation) and b.precedence &lt; Mult.precedence:
            b_form = "({1})"
        else:
            b_form = "{1}"
        super(Mult, self).__init__(a, b, a_form + " " + b_form)

class Div(Operation):
    precedence = 1
    def __init__(self, a, b):
        super(Div, self).__init__(a, b, "\\frac{{{0}}}{{{1}}}")


A = Symbol('A')
B = Symbol('B')
C = Symbol('C')
x = Symbol('x')
</snippet></ROW><ROW><id>19694085</id><snippet>&gt;&gt;&gt; print (C - A * x) / (B)
\frac{C - A x}{B}
&gt;&gt;&gt; print (C * (A + B))
C (A + B)
&gt;&gt;&gt; print (C * (A + B + A + B + C + x))
C (A + B + A + B + C + x)
</snippet></ROW><ROW><id>19694327</id><snippet>MyClass</snippet></ROW><ROW><id>19694327</id><snippet>MyClass.__init__</snippet></ROW><ROW><id>19694327</id><snippet>MyClass.__new__</snippet></ROW><ROW><id>19694327</id><snippet>class MyTest(unittest.TestCase):

    def setUp(self):
        self.my_class = MyClass.__new__(MyClass)

    def test_init_method1(self):
        attr1 = ...
        result = self.my_class._init_method1(attr1)
</snippet></ROW><ROW><id>19694327</id><snippet>x = MyClass(attr1, attr2)</snippet></ROW><ROW><id>19694327</id><snippet>x = MyClass.__init__( MyClass.__new__(MyClass, attr1, attr2),
                      attr1,
                      attr2 )
</snippet></ROW><ROW><id>19694589</id><snippet>import os
import platform

print os.name #returns os name in simple form

platform.system() #returns the base system, in your case Linux
platform.release() #returns release version
</snippet></ROW><ROW><id>19694736</id><snippet>routes_in = (('/report', '/reporter/reporter/index'),)
routes_out = (('/reporter/reporter/index', '/report'),)
</snippet></ROW><ROW><id>19694785</id><snippet>main</snippet></ROW><ROW><id>19694785</id><snippet>x=input("Enter the choice")
</snippet></ROW><ROW><id>19694785</id><snippet>input</snippet></ROW><ROW><id>19694785</id><snippet>1</snippet></ROW><ROW><id>19694785</id><snippet>"1"</snippet></ROW><ROW><id>19694785</id><snippet>menu</snippet></ROW><ROW><id>19694785</id><snippet>menu</snippet></ROW><ROW><id>19694785</id><snippet>if x == 1:
</snippet></ROW><ROW><id>19694785</id><snippet>"1"</snippet></ROW><ROW><id>19694785</id><snippet>1</snippet></ROW><ROW><id>19694785</id><snippet>menu(x,l)</snippet></ROW><ROW><id>19694785</id><snippet>menu(int(x), l)</snippet></ROW><ROW><id>19694785</id><snippet>menu</snippet></ROW><ROW><id>19694785</id><snippet>if x == 1:</snippet></ROW><ROW><id>19694785</id><snippet>if x == "1":</snippet></ROW><ROW><id>19694785</id><snippet>print (x)</snippet></ROW><ROW><id>19694785</id><snippet>print(x)</snippet></ROW><ROW><id>19694785</id><snippet>str</snippet></ROW><ROW><id>19694785</id><snippet>repr</snippet></ROW><ROW><id>19694785</id><snippet>str</snippet></ROW><ROW><id>19694785</id><snippet>print(str("10"))</snippet></ROW><ROW><id>19694785</id><snippet>10</snippet></ROW><ROW><id>19694785</id><snippet>print(str(10))</snippet></ROW><ROW><id>19694785</id><snippet>print(repr("10"))</snippet></ROW><ROW><id>19694785</id><snippet>'10'</snippet></ROW><ROW><id>19694785</id><snippet>print(repr(10))</snippet></ROW><ROW><id>19694785</id><snippet>10</snippet></ROW><ROW><id>19694785</id><snippet>repr</snippet></ROW><ROW><id>19694800</id><snippet>pos = b.trueCenter() - im_center
pos = galsim.PositionD(pos.x * pixel_scale , pos.y * pixel_scale)
# The image comes out as about 211 arcsec across, so we define our variable
# parameters in terms of (r/100 arcsec), so roughly the scale size of the image.
r = math.sqrt(pos.x**2 + pos.y**2) / 100
psf_fwhm = 0.9 + 0.5 * r**2   # arcsec
psf_e = 0.4 * r**1.5
psf_beta = (math.atan2(pos.y,pos.x) + math.pi/2) * galsim.radians

# Define the PSF profile
psf = galsim.Gaussian(fwhm=psf_fwhm)
psf.applyShear(e=psf_e, beta=psf_beta)
</snippet></ROW><ROW><id>19694800</id><snippet>psf : 
    type : Gaussian
    fwhm :     
        type : Eval
        str : '0.9 + 0.5 * (sky_pos.x**2 + sky_pos.y**2) / 100**2'
    ellip:
        type : EBeta
        e : 
            type : Eval
            fr : { type : Eval , str : '(sky_pos.x**2 + sky_pos.y**2)**0.5' } 
            str : '0.4 * (r/100)**1.5'
        beta:
            type : Eval
            str : '(math.atan2(sky_pos.y,sky_pos.x) + math.pi/2.) * galsim.radians' 
</snippet></ROW><ROW><id>19695069</id><snippet>bin</snippet></ROW><ROW><id>19695069</id><snippet>bin</snippet></ROW><ROW><id>19695069</id><snippet>bin</snippet></ROW><ROW><id>19695069</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19695069</id><snippet># Setting PATH for Python 2.7
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
export PATH
</snippet></ROW><ROW><id>19695069</id><snippet>orginal</snippet></ROW><ROW><id>19695069</id><snippet>original</snippet></ROW><ROW><id>19695069</id><snippet>cp ~/.bash_profile.pysave ~/.bash_profile</snippet></ROW><ROW><id>19695069</id><snippet>2to3</snippet></ROW><ROW><id>19695069</id><snippet>ipython</snippet></ROW><ROW><id>19695069</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>19695149</id><snippet>import datetime,  os

current_month = datetime.date.today().replace(day=1)
# this could be more concise if `start_month` were the month number rather than month name
possible_month = datetime.datetime.strptime('%s %s' % (start_month, start_year), '%B %Y').date()
while possible_month &lt;= current_month:
    csv_filename = possible_month.strftime('%B %Y') + '.csv'
    if os.path.exists(csv_filename):
        CSVFile = True
        # do something cool here, and maybe break the loop if you like
    possible_month = (possible_month + datetime.timedelta(days=31)).replace(day=1)
</snippet></ROW><ROW><id>19695197</id><snippet>project
    main.py
    package1
        __init__.py
        module1.py
    package2
        __init__.py
        module2.py
</snippet></ROW><ROW><id>19695197</id><snippet>from package2 import module2
</snippet></ROW><ROW><id>19695197</id><snippet>from package2.module2 import myclass
</snippet></ROW><ROW><id>19695336</id><snippet>object</snippet></ROW><ROW><id>19695336</id><snippet>adapter.logger.setLevel(logging.WARN)
</snippet></ROW><ROW><id>19695369</id><snippet>import importlib
module1 = importlib.import_module('module1.module')
module2 = importlib.import_module('module2.module')
</snippet></ROW><ROW><id>19695369</id><snippet>__import__</snippet></ROW><ROW><id>19695369</id><snippet>In [3]: __import__('module1.module')
Out[3]: &lt;module 'module1' from 'module1/__init__.py'&gt;
</snippet></ROW><ROW><id>19695596</id><snippet>[^&lt;]</snippet></ROW><ROW><id>19695596</id><snippet>.</snippet></ROW><ROW><id>19695596</id><snippet>&gt;&gt;&gt; re.split('&lt;[^&lt;]*$', '&lt;/div&gt;&lt;/div&gt;&lt;div class="_3o-d" id="education')
['&lt;/div&gt;&lt;/div&gt;', '']
</snippet></ROW><ROW><id>19695708</id><snippet>dict</snippet></ROW><ROW><id>19695708</id><snippet>import pickle

class Box:
    pass

vars = Box()

vars.x = 1
vars.y = 2
vars.z = 3

with open("save_vars.pickle", "wb") as f:
    f.write(pickle.dumps(vars))

with open("save_vars.pickle", "rb") as f:
    v = pickle.load(f)

assert vars.__dict__ == v.__dict__
</snippet></ROW><ROW><id>19695772</id><snippet>sudo apt-get install libjpeg libjpeg-dev libfreetype6 libfreetype6-dev zlib1g-dev</snippet></ROW><ROW><id>19695772</id><snippet>ln -s /usr/lib/`uname -i`-linux-gnu/libjpeg.so /usr/lib
ln -s /usr/lib/`uname -i`-linux-gnu/libfreetype.so /usr/lib
ln -s /usr/lib/`uname -i`-linux-gnu/libz.so /usr/lib
</snippet></ROW><ROW><id>19695772</id><snippet>pip install</snippet></ROW><ROW><id>19695815</id><snippet>def minimum(y,var):
    for y in var:
        w=(var[0],var[1],var[2],var[3],var[4])
        a= min(var[0],var[1],var[2],var[3],var[4])

    return a



def menu(x,var): 
    if x == 1:
        make_table(var)
    if x == 2:
        y = raw_input("enter a row (as a number) or a column (as an uppercase letter)")
        if y in [ '1','2','3']:
            mini = minimum(y, var)
            print("Minimum is:", mini) # dont need this.
            print("Minimum is:", min(var)) # this should be all you really need.
    if x == 3:
        print ('bye')

menu(2,[1,2,3,4,5]) # calling the menu function
</snippet></ROW><ROW><id>19695815</id><snippet>minimum = minimum(y,l)</snippet></ROW><ROW><id>19695878</id><snippet>Queue.Queue</snippet></ROW><ROW><id>19695878</id><snippet>import threading, collections

class QLock:
    def __init__(self):
        self.lock = threading.Lock()
        self.waiters = collections.deque()
        self.count = 0

    def acquire(self):
        self.lock.acquire()
        if self.count:
            new_lock = threading.Lock()
            new_lock.acquire()
            self.waiters.append(new_lock)
            self.lock.release()
            new_lock.acquire()
            self.lock.acquire()
        self.count += 1
        self.lock.release()

    def release(self):
        with self.lock:
            if not self.count:
                raise ValueError("lock not acquired")
            self.count -= 1
            if self.waiters:
                self.waiters.popleft().release()

    def locked(self):
        return self.count &gt; 0
</snippet></ROW><ROW><id>19695878</id><snippet>QLock</snippet></ROW><ROW><id>19695878</id><snippet>threading.Lock</snippet></ROW><ROW><id>19695878</id><snippet>def work(name):
    qlock.acquire()
    acqorder.append(name)

from time import sleep
if 0:
    qlock = threading.Lock()
else:
    qlock = QLock()
qlock.acquire()
acqorder = []
ts = []
for name in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
    t = threading.Thread(target=work, args=(name,))
    t.start()
    ts.append(t)
    sleep(0.1) # probably enough time for .acquire() to run
for t in ts:
    while not qlock.locked():
        sleep(0)  # yield time slice
    qlock.release()
for t in ts:
    t.join()
assert qlock.locked()
qlock.release()
assert not qlock.locked()
print "".join(acqorder)
</snippet></ROW><ROW><id>19695878</id><snippet>threading.Lock</snippet></ROW><ROW><id>19695878</id><snippet>BACDEFGHIJKLMNOPQRSTUVWXYZ
ABCDEFGHIJKLMNOPQRSUVWXYZT
ABCEDFGHIJKLMNOPQRSTUVWXYZ
</snippet></ROW><ROW><id>19695878</id><snippet>QLock</snippet></ROW><ROW><id>19695878</id><snippet>ABCDEFGHIJKLMNOPQRSTUVWXYZ
</snippet></ROW><ROW><id>19695922</id><snippet>spamwriter.writerow(true_or_false(3))
</snippet></ROW><ROW><id>19695922</id><snippet>list</snippet></ROW><ROW><id>19695922</id><snippet>writerow</snippet></ROW><ROW><id>19695922</id><snippet>spamwriter.writerow([true_or_false(3)])
</snippet></ROW><ROW><id>19696253</id><snippet>logging</snippet></ROW><ROW><id>19696253</id><snippet>import logging

logging.basicConfig(filename=LOG_FILENAME, level=logging.DEBUG)

logging.debug(yourdataToSaveInFile)
</snippet></ROW><ROW><id>19696253</id><snippet>with open('logfile.txt', 'a') as f:
    while True:    
       voltsdiff = adc.readADCDifferential01(4096, 8)    
       print &gt;&gt; f, time(), voltsdiff    
       sleep(0.25)
</snippet></ROW><ROW><id>19696289</id><snippet>NODE                     EXPLANATION
----------------------------------------------------------------------
(?-imsx:                 group, but do not capture (case-sensitive)
                         (with ^ and $ matching normally) (with . not
                         matching \n) (matching whitespace and #
                         normally):
----------------------------------------------------------------------
  (?:                      group, but do not capture (optional
                           (matching the most amount possible)):
----------------------------------------------------------------------
    \d{1,2}                  digits (0-9) (between 1 and 2 times
                             (matching the most amount possible))
----------------------------------------------------------------------
    (?:                      group, but do not capture (optional
                             (matching the most amount possible)):
----------------------------------------------------------------------
      ,                        ','
----------------------------------------------------------------------
      \d{1,2}                  digits (0-9) (between 1 and 2 times
                               (matching the most amount possible))
----------------------------------------------------------------------
    )?                       end of grouping
----------------------------------------------------------------------
  )?                       end of grouping
----------------------------------------------------------------------
)                        end of grouping
----------------------------------------------------------------------
</snippet></ROW><ROW><id>19696289</id><snippet>12
1
20
10,2
22,3
12,0
14,20
</snippet></ROW><ROW><id>19696289</id><snippet>200
a,b
!123p9
1000,2000
</snippet></ROW><ROW><id>19696291</id><snippet>dicts = []
for line in sys.stdin:
    dicts.append(eval(line))
</snippet></ROW><ROW><id>19696291</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19696291</id><snippet>eval</snippet></ROW><ROW><id>19696291</id><snippet>dicts = [ast.literal_eval(line) for line in sys.stdin]
</snippet></ROW><ROW><id>19696291</id><snippet>dicts</snippet></ROW><ROW><id>19696291</id><snippet>for d in dicts:
    print d
</snippet></ROW><ROW><id>19696291</id><snippet>TypeError</snippet></ROW><ROW><id>19696291</id><snippet>for d in sorted(dicts, key=lambda d: d.keys()[0]):
    print d
</snippet></ROW><ROW><id>19696291</id><snippet>charcounts = []
for d in dicts:
    for k, v in d.items():
        if k == key:
            charcounts.append(v['charcount'])
</snippet></ROW><ROW><id>19696291</id><snippet>setdefault</snippet></ROW><ROW><id>19696291</id><snippet>dict</snippet></ROW><ROW><id>19696291</id><snippet>defaultdict</snippet></ROW><ROW><id>19696291</id><snippet>collections</snippet></ROW><ROW><id>19696291</id><snippet>dict</snippet></ROW><ROW><id>19696291</id><snippet>KeyError</snippet></ROW><ROW><id>19696291</id><snippet>defaultdict</snippet></ROW><ROW><id>19696291</id><snippet>dicts = {}
for line in sys.stdin:
    d = ast.literal_eval(line)
    for k, v in d.items(): # should only be one
        dicts.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>19696291</id><snippet>charcounts = [d['charcount'] for d in dicts[key]]
</snippet></ROW><ROW><id>19696291</id><snippet>dicts</snippet></ROW><ROW><id>19696291</id><snippet>dicts</snippet></ROW><ROW><id>19696291</id><snippet>{262968617233162240: 
    [
        {'!!!': False, '#': False, '@': False, 'charcount': 18, 'longword': True, 'sscore': False, 'stop': False, 'title': False, 'uppercase': False, 'url': False, 'word': 'good#1st#time#will'},
        {'!!!': False, '#': False, '@': False, 'charcount': 2, 'longword': False, 'sscore': False, 'stop': True, 'title': False, 'uppercase': False, 'url': False, 'word': 'be'},
        {'!!!': False, '#': False, '@': False, 'charcount': 5, 'longword': False, 'sscore': False, 'stop': False, 'title': False, 'uppercase': False, 'url': False, 'word': 'going'},
        {'!!!': False, '#': False, '@': False, 'charcount': 5, 'longword': False, 'sscore': False, 'stop': False, 'title': False, 'uppercase': False, 'url': False, 'word': 'back#'}
    ],
 263790847424880641: 
    [
        {'!!!': False, '#': False, '@': False, 'charcount': 33, 'longword': True, 'sscore': False, 'stop': False, 'title': False, 'uppercase': False, 'url': True, 'word': 'http://instagr.am/p/rx9939civ8/\xc2\xa0'}
    ]
}
</snippet></ROW><ROW><id>19696291</id><snippet>{262968617233162240: {'charcount': 30}}
</snippet></ROW><ROW><id>19696291</id><snippet>charcounts = [int(d['charcount']) for d in dicts[key]]
</snippet></ROW><ROW><id>19696291</id><snippet>sum</snippet></ROW><ROW><id>19696291</id><snippet>charcount = sum(int(d['charcount']) for d in dicts[key])
</snippet></ROW><ROW><id>19696291</id><snippet>charcount = sum(int(d['charcount']) for d in dicts[key])
output_dict = {key: {'charcount': charcount}}
</snippet></ROW><ROW><id>19696291</id><snippet>for key, values in dicts.items():
    charcount = sum(int(d['charcount']) for d in values)
    output_dict = {key: {'charcount': charcount}}
    # now do something with output_dict
</snippet></ROW><ROW><id>19696517</id><snippet>import numpy as np
import Image

data = np.random.randint(0, 255, (10,10)).astype(np.uint8)
im = Image.fromarray(data)
im.save('test.tif')
</snippet></ROW><ROW><id>19696517</id><snippet>imshow</snippet></ROW><ROW><id>19696517</id><snippet>import numpy as np
import matplotlib.pyplot as plt

dpi = 80 # Arbitrary. The number of pixels in the image will always be identical
data = np.random.random((10, 10))

height, width = np.array(data.shape, dtype=float) / dpi

fig = plt.figure(figsize=(width, height), dpi=dpi)
ax = fig.add_axes([0, 0, 1, 1])
ax.axis('off')

ax.imshow(data, interpolation='none')
fig.savefig('test.tif', dpi=dpi)
</snippet></ROW><ROW><id>19696546</id><snippet>print</snippet></ROW><ROW><id>19696546</id><snippet>str</snippet></ROW><ROW><id>19696546</id><snippet>write</snippet></ROW><ROW><id>19696546</id><snippet>write</snippet></ROW><ROW><id>19696546</id><snippet>TypeError: expected a character buffer object</snippet></ROW><ROW><id>19696546</id><snippet>invrow</snippet></ROW><ROW><id>19696546</id><snippet>csv.DictReader</snippet></ROW><ROW><id>19696546</id><snippet>TypeError</snippet></ROW><ROW><id>19696546</id><snippet>TypeError</snippet></ROW><ROW><id>19696546</id><snippet>except TypeError: pass</snippet></ROW><ROW><id>19696546</id><snippet>csv.DictWriter</snippet></ROW><ROW><id>19696546</id><snippet>writer = csv.DictWriter(final, inv[0].keys())
</snippet></ROW><ROW><id>19696546</id><snippet>writer.writerow(invrow)
</snippet></ROW><ROW><id>19696546</id><snippet>DictReader</snippet></ROW><ROW><id>19696546</id><snippet>list</snippet></ROW><ROW><id>19696546</id><snippet>append</snippet></ROW><ROW><id>19696546</id><snippet>inva = list(inv)
maina = list(main)
vba = list(vb)
</snippet></ROW><ROW><id>19696546</id><snippet>maina</snippet></ROW><ROW><id>19696546</id><snippet>list</snippet></ROW><ROW><id>19696546</id><snippet>inva</snippet></ROW><ROW><id>19696546</id><snippet>DictReader</snippet></ROW><ROW><id>19696546</id><snippet>vba</snippet></ROW><ROW><id>19696546</id><snippet>with</snippet></ROW><ROW><id>19696546</id><snippet>close</snippet></ROW><ROW><id>19696546</id><snippet>try</snippet></ROW><ROW><id>19696546</id><snippet>except</snippet></ROW><ROW><id>19696546</id><snippet>try</snippet></ROW><ROW><id>19696546</id><snippet>with open('main.txt', 'rU') as mainf:
    main = list(csv.DictReader(mainf, dialect='excel-tab', delimiter="\t")
with open('ireport.txt', 'rU') as invf, open('ireport2.tab', 'w') as finalf:
    inv = csv.DictReader(invf, dialect='excel-tab', delimiter="\t")
    final = csv.DictWriter(finalf, dialect='excel-tab', delimiter="\t",
                           fieldnames=inv.fieldnames)
    for invrow in inv:
        for mainrow in main:
            if invrow['\xef\xbb\xbfPART_CODE'] == mainrow['PART CODE']:
                invrow['MAINQTY'] = mainrow['ON-HAND']
                final.writerow(invrow)
</snippet></ROW><ROW><id>19696575</id><snippet>i</snippet></ROW><ROW><id>19696575</id><snippet>for</snippet></ROW><ROW><id>19696575</id><snippet>for i in range(len(people)):
    print(people[i],"buys for",people[(i+1)%(len(people))])
</snippet></ROW><ROW><id>19696603</id><snippet>Post</snippet></ROW><ROW><id>19696603</id><snippet>text</snippet></ROW><ROW><id>19696603</id><snippet>{{ post_obj.text|urlize }}
</snippet></ROW><ROW><id>19696619</id><snippet>def percentage(rd):
    apl = [10,10,10,5,5,20,10,10,10,10]
    if age &gt; 15:
        t=sum(apl)
    if age &lt; 15:
        t=sum(apl) + 10
    com=rd/t*100 #this overwrites whatever the passed argument com was.
    com = round(com,0) #assign the rounded value back to com
    return com
</snippet></ROW><ROW><id>19696747</id><snippet>reindex()</snippet></ROW><ROW><id>19696747</id><snippet>ffill()</snippet></ROW><ROW><id>19696747</id><snippet>import pandas as pd
df = pd.DataFrame({"A":[10, 20, 30], "B":[100, 200, 300], 
                   "C":[100, 200, 300]}, index=[2, 6, 8])
df2 = df.reindex([2,4,6,8,10])

for col in ["A", "B"]:
    df2[col].ffill(inplace=True)
print df2
</snippet></ROW><ROW><id>19696747</id><snippet>    A    B    C
2   10  100  100
4   10  100  NaN
6   20  200  200
8   30  300  300
10  30  300  NaN
</snippet></ROW><ROW><id>19696920</id><snippet>for v in data.itervalues():
  v['events'][:] = [e for e in v['events'] if e['displayed']]
</snippet></ROW><ROW><id>19696988</id><snippet>"displayed": True</snippet></ROW><ROW><id>19696988</id><snippet>db.locations.aggregate([{'$unwind': '$events'}, {'$match': {'events.displayed': True}}])
</snippet></ROW><ROW><id>19696988</id><snippet>db.locations.find</snippet></ROW><ROW><id>19697027</id><snippet>&gt;&gt;&gt; def random():
...     pass
...
&gt;&gt;&gt; random.choice
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'function' object has no attribute 'choice'
</snippet></ROW><ROW><id>19697306</id><snippet>admin.py</snippet></ROW><ROW><id>19697306</id><snippet>polls/</snippet></ROW><ROW><id>19697306</id><snippet>news/</snippet></ROW><ROW><id>19697306</id><snippet>polls/admin.py</snippet></ROW><ROW><id>19697306</id><snippet>from models import Poll, Choice
from django.contrib import admin

admin.site.register(Poll)
admin.site.register(Choice)
</snippet></ROW><ROW><id>19697306</id><snippet>polls</snippet></ROW><ROW><id>19697306</id><snippet>news</snippet></ROW><ROW><id>19697306</id><snippet>tutorial/admin.py</snippet></ROW><ROW><id>19697306</id><snippet>tutorial.polls.models</snippet></ROW><ROW><id>19697306</id><snippet>polls/</snippet></ROW><ROW><id>19697306</id><snippet>models/</snippet></ROW><ROW><id>19697306</id><snippet>tutorial/</snippet></ROW><ROW><id>19697605</id><snippet>from time import time

class DecayingSet:
    def __init__(self, timeout): # timeout in seconds
        from collections import deque
        self.timeout = timeout
        self.d = deque()
        self.present = set()

    def add(self, thing):
        # Return True if `thing` not already in set,
        # else return False.
        result = thing not in self.present
        if result:
            self.present.add(thing)
            self.d.append((time(), thing))
        self.clean()
        return result

    def clean(self):
        # forget stuff added &gt;= `timeout` seconds ago
        now = time()
        d = self.d
        while d and now - d[0][0] &gt;= self.timeout:
            _, thing = d.popleft()
            self.present.remove(thing)
</snippet></ROW><ROW><id>19697605</id><snippet>deque</snippet></ROW><ROW><id>19697605</id><snippet>deque</snippet></ROW><ROW><id>19697605</id><snippet>deque.popleft()</snippet></ROW><ROW><id>19697605</id><snippet>list.pop(0)</snippet></ROW><ROW><id>19697689</id><snippet>import PySide</snippet></ROW><ROW><id>19697689</id><snippet>python</snippet></ROW><ROW><id>19697689</id><snippet>python2.7</snippet></ROW><ROW><id>19697689</id><snippet>which python</snippet></ROW><ROW><id>19697799</id><snippet>if value &gt;= list[j]:
     numOfComp += 1
     j = j - 1
</snippet></ROW><ROW><id>19697799</id><snippet>value &gt;= list[j]</snippet></ROW><ROW><id>19697799</id><snippet>def insertionSort(list):
    numOfComp = 0
    for i in range(1,len(list)):
        value = list[i]
        j = i - 1
        while j&gt;=0:
            if value&lt;list[j]:
                flag=True
            else :
                flag=False
            numOfComp += 1
            if flag:
                list[j+1] = list[j]
                list[j] = value
                j = j - 1
            else:
                break
    print("Number of data comparisons:",numOfComp)
    print("Sorted list:",list)
</snippet></ROW><ROW><id>19697849</id><snippet>having count(distinct Date) &gt; 1</snippet></ROW><ROW><id>19697849</id><snippet>&gt;&gt;&gt; df
                 Date  UserID
0 2013-01-01 00:00:00       1
1 2013-01-02 00:00:00       2
2 2013-01-02 00:00:00       2
3 2013-01-02 00:00:00       1
4 2013-01-02 00:00:00       3
&gt;&gt;&gt; g = df.groupby('UserID').Date.nunique()
&gt;&gt;&gt; g
UserID
1         2
2         1
3         1
&gt;&gt;&gt; g &gt; 1
UserID
1          True
2         False
3         False
dtype: bool
&gt;&gt;&gt; g[g &gt; 1]
UserID
1         2
</snippet></ROW><ROW><id>19697849</id><snippet>UserID = 1</snippet></ROW><ROW><id>19697999</id><snippet>print "calculating fib(1000000)"
res = fib(1000000)
print "displaying the result..."
print res
</snippet></ROW><ROW><id>19697999</id><snippet>fib(1000000)</snippet></ROW><ROW><id>19697999</id><snippet>print hex(res)
</snippet></ROW><ROW><id>19698087</id><snippet>choiceterm=choice(terms)
choicePM=choice(pm)
choicetermnum=choice(termnum)
</snippet></ROW><ROW><id>19698087</id><snippet>#remove those lines
...
for i in range(10): #this will ask first 10, but change this to something else like a random in range (0, len(terms)) 
    term = terms[i]
    realanswer = pm[terms.index(term)] #terms.index(terms[i]) gets the index of the term, then you look up the answer for that index 
    print(term)
    ans=input("Which prime minister reigned in this time?:\n")
if ans == realanswer
    print("Great job!")
    score+=1
else:
    print("Incorrect!  The corret answer was {0}".format(realanswer))
</snippet></ROW><ROW><id>19698173</id><snippet>cycle</snippet></ROW><ROW><id>19698173</id><snippet>from django.template import Template, Context
t = Template("""
{% for staff in staff_members %}
     {% cycle '&lt;div class="row"&gt;' '' '' as div %}
     {{ staff }}
     {% cycle '' '' '&lt;/div&gt;' as div %}
{% endfor %}
{% if not staff_members|length|divisibleby:3 %}
    &lt;/div&gt;
{% endif %}
""")
print t.render(Context({'staff_members': [1,2,3,4,5,6,7,8]}))
</snippet></ROW><ROW><id>19698173</id><snippet>&lt;div class="row"&gt;
1
2
3
&lt;/div&gt;

&lt;div class="row"&gt;
4
5
6
&lt;/div&gt;

&lt;div class="row"&gt;
7
8
&lt;/div&gt;
</snippet></ROW><ROW><id>19698453</id><snippet>limit</snippet></ROW><ROW><id>19698453</id><snippet>on_status()</snippet></ROW><ROW><id>19698453</id><snippet>True</snippet></ROW><ROW><id>19698453</id><snippet>limit</snippet></ROW><ROW><id>19698453</id><snippet>     l = limit.add(longUrl)
     print l
     if l == False:
        pass
     else:
        r = requests.get("http://api.some.url/show?url=%s"% longUrl)
</snippet></ROW><ROW><id>19698453</id><snippet>     if limit.add(longUrl):
        r = requests.get("http://api.some.url/show?url=%s"% longUrl)
</snippet></ROW><ROW><id>19698453</id><snippet>True</snippet></ROW><ROW><id>19698453</id><snippet>False</snippet></ROW><ROW><id>19698453</id><snippet>limit</snippet></ROW><ROW><id>19698462</id><snippet>nOcc = 30
nVir = 120
Ew = np.random.rand(nOcc+nVir)
Ew[:nOcc]*=-1
Ia = np.random.rand(nOcc)
Ib = np.random.rand(nVir)
I = np.einsum('a,b,c,d-&gt;abcd',Ia,Ib,Ia,Ib)
</snippet></ROW><ROW><id>19698462</id><snippet>def oldcalc_D(Iiajb,nOcc,nVir,Ew):
    D = np.zeros((nOcc,nOcc,nVir,nVir))
    for i in range(nOcc):
       for j in range(i+1):
          tmp = Ew[i] + Ew[j]
          for a in range(nVir):
             tmp2 = tmp - Ew[a+nOcc]
             for b in range(a+1):
                tmp3 = 1.0/(tmp2 - Ew[b+nOcc])
                D[i,j,a,b] = Iiajb[i,a,j,b]*tmp3
                D[i,j,b,a] = Iiajb[i,b,j,a]*tmp3
                D[j,i,a,b] = D[i,j,b,a]
                D[j,i,b,a] = D[i,j,a,b]
    return D
</snippet></ROW><ROW><id>19698462</id><snippet>def newcalc_D(I,nOcc,nVir,Ew):
    O = Ew[:nOcc]
    V = Ew[nOcc:]
    D = O[:,None,None,None] - V[:,None,None] + O[:,None] - V
    return (I/D).swapaxes(1,2)
</snippet></ROW><ROW><id>19698462</id><snippet>np.allclose(oldcalc_D(I,nOcc,nVir,Ew),newcalc_D(I,nOcc,nVir,Ew))
True

%timeit newcalc_D(I,nOcc,nVir,Ew)
1 loops, best of 3: 142 ms per loop

%timeit oldcalc_D(I,nOcc,nVir,Ew)
1 loops, best of 3: 15 s per loop
</snippet></ROW><ROW><id>19698462</id><snippet>from numba import autojit

numba_D = autojit(oldcalc_D)

%timeit numba_D(I,nOcc,nVir,Ew)
10 loops, best of 3: 55.1 ms per loop
</snippet></ROW><ROW><id>19698465</id><snippet>s.title()
</snippet></ROW><ROW><id>19698465</id><snippet>title</snippet></ROW><ROW><id>19698465</id><snippet>print</snippet></ROW><ROW><id>19698497</id><snippet>any(setattr(obj, "attr", 0) for sub in L for obj in sub)
</snippet></ROW><ROW><id>19698497</id><snippet>from collections import deque
do = deque(maxlen=0).extend

do(setattr(obj, "attr", 0) for sub in L for obj in sub)
</snippet></ROW><ROW><id>19698780</id><snippet>painter.begin()</snippet></ROW><ROW><id>19698780</id><snippet>painter.end()</snippet></ROW><ROW><id>19698780</id><snippet>painter.begin()</snippet></ROW><ROW><id>19698780</id><snippet>self</snippet></ROW><ROW><id>19698780</id><snippet>painter.begin(self)</snippet></ROW><ROW><id>19698780</id><snippet>    painter = QtGui.QStylePainter()
    painter.begin(self)
    ...
</snippet></ROW><ROW><id>19698780</id><snippet>    painter = QtGui.QStylePainter(self)
    ...
</snippet></ROW><ROW><id>19698863</id><snippet>GL_CLAMP_TO_EDGE</snippet></ROW><ROW><id>19698863</id><snippet>GL_CLAMP_TO_EDGE</snippet></ROW><ROW><id>19698863</id><snippet>GL_CLAMP</snippet></ROW><ROW><id>19698916</id><snippet>.text</snippet></ROW><ROW><id>19698916</id><snippet>print RSelement.text
</snippet></ROW><ROW><id>19698994</id><snippet>calendar.monthrange()</snippet></ROW><ROW><id>19698994</id><snippet>for year in xrange(1950,2020):
    for month in xrange(1,13):
        day_num = calendar.monthrange(year, month)[1]
        random_num = np.random.rand(day_num)

        ...
</snippet></ROW><ROW><id>19699278</id><snippet>©</snippet></ROW><ROW><id>19699278</id><snippet>©</snippet></ROW><ROW><id>19699363</id><snippet>[[0], [0, 1]]</snippet></ROW><ROW><id>19699363</id><snippet>&gt;&gt;&gt; from multiprocessing import Pool
&gt;&gt;&gt; def myfunc(x):
...     return [i for i in range(x)]
... 
&gt;&gt;&gt; A = []
&gt;&gt;&gt; def mycallback(x):
...     print('mycallback is called with {}'.format(x))
...     A.extend(x)
... 
&gt;&gt;&gt; pool=Pool()
&gt;&gt;&gt; r = pool.map_async(myfunc, (1,2), callback=mycallback)
&gt;&gt;&gt; r.wait()
mycallback is called with [[0], [0, 1]]
&gt;&gt;&gt; print(A)
[[0], [0, 1]]
</snippet></ROW><ROW><id>19699363</id><snippet>apply_async</snippet></ROW><ROW><id>19699363</id><snippet>pool=Pool()
results = []
for x in (1,2):
    r = pool.apply_async(myfunc, (x,), callback=mycallback)
    results.append(r)
for r in results:
    r.wait()
</snippet></ROW><ROW><id>19699394</id><snippet>create_string_buffer(s)</snippet></ROW><ROW><id>19699394</id><snippet>s = "iooxooiddfggggggggggggvd"
foolib.foo(byref(o), s)
</snippet></ROW><ROW><id>19699394</id><snippet>21
xooiddfggggggggggggvd
♀ oxooiddfggggggggggggvd
</snippet></ROW><ROW><id>19699394</id><snippet>21
xooiddfggggggggggggvd
iooxooiddfggggggggggggvd
</snippet></ROW><ROW><id>19699824</id><snippet>join</snippet></ROW><ROW><id>19699824</id><snippet>terminate</snippet></ROW><ROW><id>19699824</id><snippet>p.terminate()</snippet></ROW><ROW><id>19699824</id><snippet>from multiprocessing import Process
import time

def f(name):
    time.sleep(1)
    print 'hello', name

if __name__ == '__main__':
    p = Process(target=f, args=('bob',))
    p.start()
    p.terminate() # &lt;---
    p.join()
</snippet></ROW><ROW><id>19699824</id><snippet>terminate</snippet></ROW><ROW><id>19699954</id><snippet>str(5638463263).encode()
</snippet></ROW><ROW><id>19699954</id><snippet>str.encode</snippet></ROW><ROW><id>19699954</id><snippet>'utf-8'</snippet></ROW><ROW><id>19700013</id><snippet>Element.tail</snippet></ROW><ROW><id>19700013</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; tree = ET.parse('test.xml')
&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; print root.find(".//ref").tail
 abcd
</snippet></ROW><ROW><id>19700126</id><snippet>import datetime</snippet></ROW><ROW><id>19700126</id><snippet>re1.py</snippet></ROW><ROW><id>19700126</id><snippet>re1.py</snippet></ROW><ROW><id>19700126</id><snippet>re2.py</snippet></ROW><ROW><id>19700126</id><snippet>import datetime</snippet></ROW><ROW><id>19700126</id><snippet>re2.py</snippet></ROW><ROW><id>19700126</id><snippet>re1.py</snippet></ROW><ROW><id>19700217</id><snippet>thread.start_new_thread(recv, ())
thread.start_new_thread(send, ())
</snippet></ROW><ROW><id>19700217</id><snippet>()</snippet></ROW><ROW><id>19700217</id><snippet>recv</snippet></ROW><ROW><id>19700217</id><snippet>send</snippet></ROW><ROW><id>19700403</id><snippet>None</snippet></ROW><ROW><id>19700403</id><snippet>set.remove</snippet></ROW><ROW><id>19700403</id><snippet>None</snippet></ROW><ROW><id>19700403</id><snippet>list.remove</snippet></ROW><ROW><id>19700403</id><snippet>list.append</snippet></ROW><ROW><id>19700403</id><snippet>set.add</snippet></ROW><ROW><id>19700403</id><snippet>self</snippet></ROW><ROW><id>19700411</id><snippet>matshow</snippet></ROW><ROW><id>19700411</id><snippet>imshow</snippet></ROW><ROW><id>19700411</id><snippet>vmin</snippet></ROW><ROW><id>19700411</id><snippet>vmax</snippet></ROW><ROW><id>19700411</id><snippet>import numpy as np
import matplotlib.pyplot as plt
plt.ion()
A = np.arange(0,100).reshape(10,10)
plt.matshow(A)                        # defaults
plt.matshow(A, vmin=0, vmax=99)       # same
plt.matshow(A, vmin=10, vmax=90)      # top/bottom rows get min/max colors, respectively
</snippet></ROW><ROW><id>19700411</id><snippet>cmap='hot'</snippet></ROW><ROW><id>19700411</id><snippet>'jet'</snippet></ROW><ROW><id>19700411</id><snippet>x = np.random.randn(1000)
y = np.random.randn(1000)+5
plt.hist2d(x, y, bins=40, cmap='hot')
plt.colorbar()
</snippet></ROW><ROW><id>19700472</id><snippet>*** Variables ***
@{list}           foo    bar    lorem    ipsum    dolor    sit    amet

*** Test Cases ***
Example
    : FOR    ${item}    IN    @{list}
    \    Log    ${item}
</snippet></ROW><ROW><id>19700472</id><snippet>example.txt</snippet></ROW><ROW><id>19700472</id><snippet>pybot example.txt</snippet></ROW><ROW><id>19700472</id><snippet>list</snippet></ROW><ROW><id>19700472</id><snippet>Call Method</snippet></ROW><ROW><id>19700472</id><snippet>class MyObject:
    def __init__(self):
        self.args = None
    def my_method(self, *args):
        self.args = args

obj = MyObject()
</snippet></ROW><ROW><id>19700472</id><snippet>vars.py</snippet></ROW><ROW><id>19700472</id><snippet>example.txt</snippet></ROW><ROW><id>19700472</id><snippet>example.txt</snippet></ROW><ROW><id>19700472</id><snippet>*** Settings ***
Variables         vars.py

*** Variables ***
@{list}           foo    bar    lorem    ipsum    dolor    sit    amet

*** Test Cases ***
Example
    : FOR    ${item}    IN    @{list}
    \    Log    ${item}

Example2
    Call Method    ${obj}    my_method
    Should Be True    ${obj.args} == ()
    Call Method    ${obj}    my_method    arg
    Should Be True    ${obj.args} == ('arg',)
    Call Method    ${obj}    my_method     a1     a2
    Should Be True    ${obj.args} == ('a1','a2')
</snippet></ROW><ROW><id>19700472</id><snippet>Call Method</snippet></ROW><ROW><id>19700842</id><snippet>for age in range(20, 70, 5):
    print(age, end=" ") #end is space
    for percentage in range(4, 12, 2):
        result = calc_final_balance(age, amount_saved, percentage)
        print("\t $" + format(result, '.2f').rjust(10), end=" ")
    print()
</snippet></ROW><ROW><id>19700842</id><snippet>20 $ 476321.30  $ 923268.18  $ 1859015.31  $ 3840898.15
70 $ someamount $ someamount $ someamount $ someamount
5 $ someamount $ someamount $ someamount $ someamount
</snippet></ROW><ROW><id>19701258</id><snippet>xyz_targets = ('www.youtube.com', 'youtu.be', ...)
if url.netloc in xyz_targets:
    doXYZ()
</snippet></ROW><ROW><id>19701258</id><snippet>actions = {'www.youtube.com': doXYZ,
                   'youtu.be': doXYZ,
                   ...
                   }
actions.get(url.netloc, doNothing)()
</snippet></ROW><ROW><id>19701258</id><snippet>xyz_targets</snippet></ROW><ROW><id>19701258</id><snippet>actions</snippet></ROW><ROW><id>19701411</id><snippet>cov</snippet></ROW><ROW><id>19701411</id><snippet>\site-packages\numpy\lib\function_base.py</snippet></ROW><ROW><id>19701411</id><snippet>def cov(m, y=None, rowvar=1, bias=0, ddof=None):
    """
    Estimate a covariance matrix, given data.

    Covariance indicates the level to which two variables vary together.
    If we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`,
    then the covariance matrix element :math:`C_{ij}` is the covariance of
    :math:`x_i` and :math:`x_j`. The element :math:`C_{ii}` is the variance
    of :math:`x_i`.

    Parameters
    ----------
    m : array_like
        A 1-D or 2-D array containing multiple variables and observations.
        Each row of `m` represents a variable, and each column a single
        observation of all those variables. Also see `rowvar` below.
</snippet></ROW><ROW><id>19701411</id><snippet>    if y is not None:
        y = array(y, copy=False, ndmin=2, dtype=float)
        X = concatenate((X,y), axis)

    X -= X.mean(axis=1-axis)[tup]
    if rowvar:
        N = X.shape[1]
    else:
        N = X.shape[0]

    if ddof is None:
        if bias == 0:
            ddof = 1
        else:
            ddof = 0
    fact = float(N - ddof)

    if not rowvar:
        return (dot(X.T, X.conj()) / fact).squeeze()
    else:
        return (dot(X, X.T.conj()) / fact).squeeze()
</snippet></ROW><ROW><id>19701812</id><snippet>lambda</snippet></ROW><ROW><id>19701812</id><snippet>&gt;&gt;&gt; def minus(a, b):
...     return a - b
... 
&gt;&gt;&gt; minus1 = lambda x: minus(x, 1)
&gt;&gt;&gt; minus1(3)
2
</snippet></ROW><ROW><id>19701812</id><snippet>functools.partial</snippet></ROW><ROW><id>19701812</id><snippet>&gt;&gt;&gt; minus1 = functools.partial(minus, b=1)
&gt;&gt;&gt; minus1(4)
3
</snippet></ROW><ROW><id>19701812</id><snippet>lambda</snippet></ROW><ROW><id>19701812</id><snippet>&gt;&gt;&gt; print(operator.sub.__doc__)
sub(a, b) -- Same as a - b.
&gt;&gt;&gt; minus1 = functools.partial(operator.sub, b=1)
&gt;&gt;&gt; minus1(5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sub() takes no keyword arguments

&gt;&gt;&gt; minus1 = lambda x: operator.sub(x, 1)
&gt;&gt;&gt; minus1(9)
8
</snippet></ROW><ROW><id>19701812</id><snippet>&gt;&gt;&gt; minus_from_10 = functools.partial(operator.sub, 10)
&gt;&gt;&gt; minus_from_10(7)
3
</snippet></ROW><ROW><id>19701822</id><snippet>l += [row]</snippet></ROW><ROW><id>19701822</id><snippet>l.append(int(row))</snippet></ROW><ROW><id>19701988</id><snippet>sys.dont_write_bytecode variable</snippet></ROW><ROW><id>19702223</id><snippet>class Demo:
     STARTED, LOADING, ACTIVE, ENDED = range(4)
</snippet></ROW><ROW><id>19702223</id><snippet>class Demo:
     STARTED, LOADING, ACTIVE, ENDED = (2**x for x in range(4))
</snippet></ROW><ROW><id>19702223</id><snippet>class States(object):
    def __init__(self):
         self.started = False
         self.loading = False
         self.active = False
         self.ended = False
</snippet></ROW><ROW><id>19702223</id><snippet>if state.loading:
</snippet></ROW><ROW><id>19702223</id><snippet>if state.started or state.loading:
</snippet></ROW><ROW><id>19702276</id><snippet># Generic class definition
class Generic (object):
    value = None
    @classmethod
    def val(cls):
        return int(cls.value)

# Top level class
TopLevelClass = type('TopLevelClass',
                     (Generic, ), {})

lines = ["A B C 42",
         "A B D 43"]

for line in lines:
    # Parse the line
    path = line.split()[:-1]
    value = line.split()[-1]
    # Create the classes
    current = TopLevelClass
    for x in path:
        if hasattr(current,x):
            current = getattr(current,x)
        else:
            cls = type(x, (Generic, ), {})
            setattr(current,x,cls)
            current = cls
    # Apply value
    setattr(cls,'value',value)


# Test
print(TopLevelClass.A.B.C.val())
print(TopLevelClass.A.B.D.val())    
</snippet></ROW><ROW><id>19702276</id><snippet>&gt;&gt;&gt; 42
&gt;&gt;&gt; 43  
</snippet></ROW><ROW><id>19702546</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>19702546</id><snippet>read</snippet></ROW><ROW><id>19702546</id><snippet>f = urllib2.urlopen(url)
try:
    print f.read()
finally:
    f.close()
</snippet></ROW><ROW><id>19702651</id><snippet>import nltk
nltk.download()
</snippet></ROW><ROW><id>19702780</id><snippet>class YourSystemModel(QtGui.QFileSystemModel):

    def columnCount(self, parent = QtCore.QModelIndex()):
        return super(YourSystemModel, self).columnCount()+1

    def data(self, index, role):
        if index.column() == self.columnCount() - 1:
            if role == QtCore.Qt.DisplayRole:
                return QtCore.QString("YourText")
            if role == QtCore.Qt.TextAlignmentRole:
                return QtCore.Qt.AlignHCenter

        return super(YourSystemModel, self).data(index, role)
</snippet></ROW><ROW><id>19703247</id><snippet>reload(S24)</snippet></ROW><ROW><id>19703822</id><snippet>import subprocess
import sys

outfile = i + ".txt"


cmd = sys.path[0] + "/htmltotext " + i + ".html"

with open(outfile, "w") as output_f:
    p = subprocess.Popen(cmd, stdout=output_f, shell=True)
</snippet></ROW><ROW><id>19703846</id><snippet>ioloop.add_timeout</snippet></ROW><ROW><id>19703846</id><snippet>time.sleep</snippet></ROW><ROW><id>19703846</id><snippet>import tornado.ioloop
import tornado.web
import tornado.gen


class PingHandler(tornado.web.RequestHandler):

    connection_closed = False

    def on_connection_close(self):
        print "closed"
        self.connection_closed = True

    @tornado.gen.coroutine  # &lt;= async handler
    def get(self):

        for i in range(600):

            if self.connection_closed:
                # `on_connection_close()` has been called,
                # break out of the loop
                break

            self.write("pong %s\n" % i)
            self.flush()

            # Add a timeout. Similar to time.sleep(1), but non-blocking:
            yield tornado.gen.Task(
                tornado.ioloop.IOLoop.instance().add_timeout,
                tornado.ioloop.IOLoop.instance().time() + 1,
            )

        self.finish()
        print "finished"

if __name__ == "__main__":
    application = tornado.web.Application([("/ping", PingHandler), ])
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19704174</id><snippet>cv2.stereoCalibrate</snippet></ROW><ROW><id>19704174</id><snippet>retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F
</snippet></ROW><ROW><id>19704174</id><snippet>retval,cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F = cv2.stereoCalibrate(objectPoints, imagePoints1, imagePoints2, (320,240))
</snippet></ROW><ROW><id>19704174</id><snippet>cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F = cv2.stereoCalibrate(objectPoints, imagePoints1, imagePoints2, (320,240))
</snippet></ROW><ROW><id>19704205</id><snippet>Fractal</snippet></ROW><ROW><id>19704205</id><snippet>return Fractal(start, r, commands, length, depth)
</snippet></ROW><ROW><id>19704205</id><snippet>Fractal.__init__</snippet></ROW><ROW><id>19704205</id><snippet>def __init__(self, rules, commands, start, length, depth):
</snippet></ROW><ROW><id>19704821</id><snippet>p0.view(('&gt;f8', 2))
</snippet></ROW><ROW><id>19704821</id><snippet>view</snippet></ROW><ROW><id>19705038</id><snippet>defaultdict</snippet></ROW><ROW><id>19705038</id><snippet>lambda</snippet></ROW><ROW><id>19705038</id><snippet>def dd():
    return 1
</snippet></ROW><ROW><id>19705038</id><snippet>defaultdict</snippet></ROW><ROW><id>19705038</id><snippet>dd</snippet></ROW><ROW><id>19705038</id><snippet>defaultdict</snippet></ROW><ROW><id>19705038</id><snippet>int</snippet></ROW><ROW><id>19705109</id><snippet>pd.Timestamp(timestamp)
Out[51]: Timestamp('1989-10-02 00:00:00', tz=None)

%timeit pd.Timestamp(timestamp)
100000 loops, best of 3: 1.96 µs per loop
</snippet></ROW><ROW><id>19705109</id><snippet>pd.Timestamp(-445645400000000000L)
Out[54]: Timestamp('1955-11-18 01:36:40', tz=None)
</snippet></ROW><ROW><id>19705291</id><snippet>&gt;&gt;&gt; res = soup.find('span')
&gt;&gt;&gt; res
&lt;span&gt;In current traffic: 7 mins&lt;/span&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19705291</id><snippet>res.text</snippet></ROW><ROW><id>19705291</id><snippet>&gt;&gt;&gt; res.text
u'In current traffic: 7 mins'
</snippet></ROW><ROW><id>19705291</id><snippet>pos = res.text.find(': ')
res.text[pos+2:]
</snippet></ROW><ROW><id>19705291</id><snippet>from bs4 import BeautifulSoup
import urllib2


url = "https://maps.google.com.au/maps?saddr=A6&amp;daddr=A6&amp;hl=en&amp;ll=-33.877613,151.039867&amp;spn=0.081236,0.083599&amp;sll=-33.869204,151.034546&amp;sspn=0.081244,0.083599&amp;geocode=FYSu-v0d2KMACQ%3BFbp0-_0dJKoACQ&amp;mra=ls&amp;t=m&amp;z=14&amp;layer=t"

content = urllib2.urlopen(url).read()
soup = BeautifulSoup(content)

div = soup.find('div', {'class':'altroute-rcol altroute-aux'}) #get the div where it's located
span = div.find('span')
pos = span.text.find(': ')
print 'Current Listeners:', span.text[pos+2:]
</snippet></ROW><ROW><id>19705291</id><snippet>Current Listeners: 7 min
</snippet></ROW><ROW><id>19705489</id><snippet>f = h5py.File('myfile.hdf5','r')
x_d = f['x_axis'][:]
y_d = f['values'][:]
sorted_y = y_d[numpy.argsort(x_d)]
</snippet></ROW><ROW><id>19705489</id><snippet>sorted_y = y_d[numpy.argsort(x_d)[::-1]]
</snippet></ROW><ROW><id>19705530</id><snippet>np.concatenate</snippet></ROW><ROW><id>19705530</id><snippet>np.vstack</snippet></ROW><ROW><id>19705530</id><snippet>bigArray=vstack(bigArray,newArray)</snippet></ROW><ROW><id>19705530</id><snippet>allArrays</snippet></ROW><ROW><id>19705530</id><snippet>bigArray = vstack(allArrays)</snippet></ROW><ROW><id>19705705</id><snippet>first = 0b01010101
second = 0b11110000
res = (first&lt;&lt;4) | (second&gt;&gt;4)
print bin(res)
</snippet></ROW><ROW><id>19705705</id><snippet>(first&lt;&lt;4)</snippet></ROW><ROW><id>19705705</id><snippet>(second&gt;&gt;4)</snippet></ROW><ROW><id>19705705</id><snippet>|</snippet></ROW><ROW><id>19705740</id><snippet>ftp = FTP(myhost,myuser,passw)
    ftp.sendcmd('TYPE I')
    ftp.set_debuglevel(2)
    sock = ftp.transfercmd('RETR ' + filename)
    def background():
        f = open(folder + filename, 'wb')
        while True:
            block = sock.recv(1024*1024)
            if not block:
                break
            f.write(block)
        sock.close()
    t = threading.Thread(target=background)
    t.start()
    while t.is_alive():
        t.join(60)
        ftp.voidcmd('NOOP')
</snippet></ROW><ROW><id>19705754</id><snippet>import MySQLdb
import json

db = MySQLdb.connect(...)    
cursor = db.cursor() 

dic = {'office': {'component_office': ['Word2010SP0', 'PowerPoint2010SP0']}}
sql = "INSERT INTO ep_soft(ip_address, soft_data) VALUES (%s, %s)"

cursor.execute(sql, ("192.xxx.xx.xx", json.dumps(dic)))
cursor.commit()
</snippet></ROW><ROW><id>19705985</id><snippet>file.write('other language string')
</snippet></ROW><ROW><id>19705985</id><snippet>open()</snippet></ROW><ROW><id>19705985</id><snippet>'wb'</snippet></ROW><ROW><id>19705985</id><snippet>'w'</snippet></ROW><ROW><id>19706108</id><snippet>retrbinary()</snippet></ROW><ROW><id>19706108</id><snippet>TYPE I</snippet></ROW><ROW><id>19706108</id><snippet>ftp.voidcmd('TYPE I')
# Do the transfer here
</snippet></ROW><ROW><id>19706108</id><snippet>retrbinary</snippet></ROW><ROW><id>19706108</id><snippet>def downloadFile(filename, folder):
    #login
    ftp = FTP(myhost,myuser,passw)
    ftp.set_debuglevel(2)
    ftp.voidcmd('TYPE I')
    sock = ftp.transfercmd('RETR ' + filename)
    f = open(folder + filename, 'wb')
    while True:
        block = sock.recv(1024*1024)
        if not block:
            break
        ftp.voidcmd('NOOP')
        f.write(block)
    sock.close()
</snippet></ROW><ROW><id>19706334</id><snippet>a, b, c = 1, 'two', 3.0
</snippet></ROW><ROW><id>19706334</id><snippet>a = 1
b = 'two'
c = 3.0
</snippet></ROW><ROW><id>19706334</id><snippet>a, b = b,a</snippet></ROW><ROW><id>19706334</id><snippet>return fp, resides, rank, eval, rcondnum
</snippet></ROW><ROW><id>19706355</id><snippet>g_source_remove(event_id)</snippet></ROW><ROW><id>19706648</id><snippet>values_list</snippet></ROW><ROW><id>19706648</id><snippet>flat=True</snippet></ROW><ROW><id>19706648</id><snippet>models.MyModel.objects.all().values_list('id', flat=True)
</snippet></ROW><ROW><id>19706708</id><snippet>3</snippet></ROW><ROW><id>19706791</id><snippet>fid = open('output.csv','w')
Z1 = (kernel(positions).T, X.shape)
Z = kernel(positions).T
#for currentIndex,elem in enumerate(positions):
for currentIndex,elem in enumerate(Z):
  #if Z1[currentIneex]&gt;0:
  s1 = '%f %f %f\n'%(positions[0][currentIndex], positions[1][currentIndex], Z[currentIndex] )

  fid.write(s1)
fid.close()
</snippet></ROW><ROW><id>19706994</id><snippet>json.dumps</snippet></ROW><ROW><id>19706994</id><snippet>import csv
import json

csvfile = open('file.csv', 'r')
jsonfile = open('file.json', 'w')

fieldnames = ("FirstName","LastName","IDNumber","Message")
reader = csv.DictReader( csvfile, fieldnames)
for row in reader:
    json.dump(row, jsonfile)
    jsonfile.write('\n')
</snippet></ROW><ROW><id>19707020</id><snippet>**</snippet></ROW><ROW><id>19707020</id><snippet>ssh.connect('example.com', 22, **params)
</snippet></ROW><ROW><id>19707020</id><snippet>dict</snippet></ROW><ROW><id>19707079</id><snippet>worksheets.Range("E:E,H:H,I:I").Select()</snippet></ROW><ROW><id>19707079</id><snippet>"E:E,H:H,I:I"</snippet></ROW><ROW><id>19707079</id><snippet>"E:E,H:H,I:I"</snippet></ROW><ROW><id>19707079</id><snippet>sel = worksheets.Range("E:E,H:H,I:I").Select()
</snippet></ROW><ROW><id>19707079</id><snippet>sel = worksheets.Range("E:E,H:H,I:I")
</snippet></ROW><ROW><id>19707079</id><snippet>Range("Destination").Value = sel.Value</snippet></ROW><ROW><id>19707361</id><snippet>._asdict()</snippet></ROW><ROW><id>19707361</id><snippet>func(**r._asdict())
</snippet></ROW><ROW><id>19707361</id><snippet>func(*r)
</snippet></ROW><ROW><id>19707361</id><snippet>&gt;&gt;&gt; def func(foo, bar):
...     print foo, bar
... 
&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Record = namedtuple('Record', 'foo bar')
&gt;&gt;&gt; r = Record(foo=1, bar=False)
&gt;&gt;&gt; func(**r._asdict())
1 False
&gt;&gt;&gt; func(*r)
1 False
</snippet></ROW><ROW><id>19707589</id><snippet>search_indexes</snippet></ROW><ROW><id>19707589</id><snippet>indexes</snippet></ROW><ROW><id>19707856</id><snippet>R</snippet></ROW><ROW><id>19707856</id><snippet>&gt;&gt;&gt; r_dist[0]
29.782287068025585
&gt;&gt;&gt; np_dist
5.4573150053873185
&gt;&gt;&gt; np_dist**2 - r_dist[0]
3.5527136788005009e-15
</snippet></ROW><ROW><id>19708252</id><snippet>port select python
</snippet></ROW><ROW><id>19708252</id><snippet>python27-apple (active)
</snippet></ROW><ROW><id>19708252</id><snippet>sudo port select python python27
</snippet></ROW><ROW><id>19708252</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>19708252</id><snippet>/System/Library</snippet></ROW><ROW><id>19708252</id><snippet>/opt/local/Library</snippet></ROW><ROW><id>19708252</id><snippet>.pth</snippet></ROW><ROW><id>19708252</id><snippet>site</snippet></ROW><ROW><id>19708252</id><snippet>sys.path</snippet></ROW><ROW><id>19708347</id><snippet>In [4]: df = pd.DataFrame({ 'A' : np.linspace(1,5,5), 'B' : np.linspace(0.1,0.5,5) })

In [5]: df
Out[5]: 
   A    B
0  1  0.1
1  2  0.2
2  3  0.3
3  4  0.4
4  5  0.5

In [6]: df.loc[(df.B&gt;0.3)&amp;(df.B&lt;0.5)]
Out[6]: 
   A    B
2  3  0.3
3  4  0.4
</snippet></ROW><ROW><id>19708506</id><snippet>love6</snippet></ROW><ROW><id>19708506</id><snippet>def love6(a,b):
    return a==6 or b==6 or a+b==6 or abs(a-b)==6
</snippet></ROW><ROW><id>19708516</id><snippet>Y</snippet></ROW><ROW><id>19708516</id><snippet>def fix(Y):
    if (len(Y)% 2)==1:
        if Y[-1]=='Z':
            Y=Y+'Q'
        else:
            Y=Y+'Z' 
    return Y
</snippet></ROW><ROW><id>19708516</id><snippet>Y</snippet></ROW><ROW><id>19708516</id><snippet>Y = fix(Y) #overwrites the previous value, put the fixed one.
</snippet></ROW><ROW><id>19708675</id><snippet>from mayavi.core import lut_manager

def is_tvtk_cmap(name): return name in lut_manager.lut_mode_list()
</snippet></ROW><ROW><id>19708688</id><snippet>zip()</snippet></ROW><ROW><id>19708688</id><snippet>zip()</snippet></ROW><ROW><id>19708688</id><snippet>b = zip(*(col for col in zip(*a) if col[0] == 2))
</snippet></ROW><ROW><id>19708688</id><snippet>&gt;&gt;&gt; a = [[0,0,0,1,1,1,2,2,2], [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],
... [0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29]]
&gt;&gt;&gt; zip(*(col for col in zip(*a) if col[0] == 2))
[(2, 2, 2), (0.7, 0.8, 0.9), (0.27, 0.28, 0.29)]
</snippet></ROW><ROW><id>19708688</id><snippet>b = map(list, zip(*(col for col in zip(*a) if col[0] == 2)))
</snippet></ROW><ROW><id>19708688</id><snippet>b = [list(t) for t in zip(*(col for col in zip(*a) if col[0] == 2))]
</snippet></ROW><ROW><id>19708916</id><snippet>SingleVoucherReward</snippet></ROW><ROW><id>19708916</id><snippet>SingleVoucherReward</snippet></ROW><ROW><id>19708916</id><snippet>_SingleVoucherReward</snippet></ROW><ROW><id>19708916</id><snippet>__call__</snippet></ROW><ROW><id>19708916</id><snippet>not callable</snippet></ROW><ROW><id>19708916</id><snippet>bundle.obj.participant_reward(_SingleVoucherReward())
</snippet></ROW><ROW><id>19708916</id><snippet>bundle.obj.participant_reward(_SingleVoucherReward)
</snippet></ROW><ROW><id>19708916</id><snippet>single_voucher_reward</snippet></ROW><ROW><id>19709093</id><snippet>...len(digitlis)&lt;sequence_len...</snippet></ROW><ROW><id>19709093</id><snippet>t</snippet></ROW><ROW><id>19709093</id><snippet>number = 343703  # Replace ??? with a value of your choice.
sequence_len = 3  # Replace ??? with a value of your choice.
numbstr = str(number)
digitlist = []

# Appending all the numbers to a list
for digit in numbstr:
    digitlist.append(int(digit))

# Looping over all the variables in digitlist, i is the index
for i, _ in enumerate(digitlist):
    # If the index, i is 2 less than the length of the list
    if i &lt; len(digitlist) - 2:
        # Adding the term and the next two terms after that
        if digitlist[i] + digitlist[i+1] + digitlist[i+2] == 10:
            # Printing the list
            print digitlist[i:i+3]
</snippet></ROW><ROW><id>19709166</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.locale_alias
</snippet></ROW><ROW><id>19709215</id><snippet>ui_modules={'Hello', HelloModule}</snippet></ROW><ROW><id>19709215</id><snippet>dict</snippet></ROW><ROW><id>19709215</id><snippet>set</snippet></ROW><ROW><id>19709215</id><snippet>ui_modules={'Hello': HelloModule}</snippet></ROW><ROW><id>19709361</id><snippet>import threading, time

def askForInput(arg):
    arg.append("some ID")
    time.sleep(2)

def main():
    print("starting time: {}".format(time.asctime()))
    my_input = []  # want an argument we can mutate
    thr = threading.Thread(target=askForInput, args=(my_input,))
    thr.start()
    thr.join()  # will wait here
    lookupID = my_input[0]
    print("ending time: {}".format(time.asctime()))
    print("Result back from async call: {}".format(lookupID))

if __name__ == '__main__':  
    main()
</snippet></ROW><ROW><id>19709361</id><snippet>starting time: Thu Oct 31 10:32:51 2013
ending time: Thu Oct 31 10:32:53 2013
Result back from async call: some ID
</snippet></ROW><ROW><id>19709523</id><snippet>campaign = Campaign()
campaign.participant_reward = single_voucher_reward
campaign.save()
</snippet></ROW><ROW><id>19709523</id><snippet>campaign = Campaign(participant_reward = single_voucher_reward)
campaign.save()
</snippet></ROW><ROW><id>19709530</id><snippet>withCredentials</snippet></ROW><ROW><id>19709530</id><snippet>true</snippet></ROW><ROW><id>19709530</id><snippet>&lt;script&gt;

  $(".logged_in").hide();

  request = $.ajax({
    url: "http://example.com/ping/",
    type: "GET",
    dataType: "jsonp",
    xhrFields: {
      withCredentials: true
   }

});

request.done(function (response, textStatus, jqXHR){
    // log a message to the console

    if (response['logged_in'])
    {
      $(".logged_in").show();
    }
});

request.fail(function (jqXHR, textStatus, errorThrown){
  // log the error to the console
  console.error("The following error occurred: " + textStatus, errorThrown);
  console.log("jqXHR: " + JSON.stringify(jqXHR))
});

&lt;/script&gt;
</snippet></ROW><ROW><id>19709530</id><snippet>def jsonp(func):
    """Wraps JSONified output for JSONP requests."""
    @wraps(func)
    def decorated_function(*args, **kwargs):
        callback = request.args.get('callback', False)
        if callback:
            data = str(func(*args, **kwargs).data)
            content = str(callback) + '(' + data + ')'
            mimetype = 'application/javascript'
            return current_app.response_class(content, mimetype=mimetype)
        else:
            return func(*args, **kwargs)
    return decorated_function


@app.route('/ping/')
@jsonp
def ping():

    if 'user_id' in session:
        print "session ping: %s" % session
        return jsonify(logged_in='true')

    else:
        print "session ping: not logged in"
        return jsonify(logged_in="false")
</snippet></ROW><ROW><id>19709623</id><snippet>tkinter</snippet></ROW><ROW><id>19709623</id><snippet>PyHook</snippet></ROW><ROW><id>19709623</id><snippet>from tkinter import * #imports everything from the tkinter library

def confirm(event=None): #set event to None to take the key argument from .bind
    print('Function successfully called!') #this will output in the shell

master = Tk() #creates our window

option1 = Button(master, text = 'Press Return', command = confirm)
option1.pack() #the past 2 lines define our button and make it visible

master.bind('&lt;Return&gt;', confirm) #binds 'return' to the confirm function
</snippet></ROW><ROW><id>19709623</id><snippet>Tk()</snippet></ROW><ROW><id>19709623</id><snippet>event=None</snippet></ROW><ROW><id>19709623</id><snippet>master.bind</snippet></ROW><ROW><id>19709623</id><snippet>event</snippet></ROW><ROW><id>19709623</id><snippet>event</snippet></ROW><ROW><id>19709623</id><snippet>None</snippet></ROW><ROW><id>19709623</id><snippet>TypeError</snippet></ROW><ROW><id>19709866</id><snippet>all</snippet></ROW><ROW><id>19709866</id><snippet>('^all/$', all)
</snippet></ROW><ROW><id>19709866</id><snippet>all</snippet></ROW><ROW><id>19710350</id><snippet>zip(*([xAxis[0]] + yAxis[:howManyY] + yError[:howManyY]))
</snippet></ROW><ROW><id>19710452</id><snippet>emp_name</snippet></ROW><ROW><id>19710452</id><snippet>raw_input("please enter employee name")</snippet></ROW><ROW><id>19710452</id><snippet>print emp_name[1]</snippet></ROW><ROW><id>19710452</id><snippet>emp_name[1]</snippet></ROW><ROW><id>19710452</id><snippet>emp_name[0] = raw_input("please enter employee name")
</snippet></ROW><ROW><id>19710452</id><snippet>emp_name</snippet></ROW><ROW><id>19710452</id><snippet>while</snippet></ROW><ROW><id>19710498</id><snippet>lo</snippet></ROW><ROW><id>19710498</id><snippet>hi</snippet></ROW><ROW><id>19710498</id><snippet>1</snippet></ROW><ROW><id>19710498</id><snippet>lo, hi = heapq.heappop(tree), heapq.heappop(tree)
</snippet></ROW><ROW><id>19710498</id><snippet>lo, hi = sorted([heapq.heappop(tree), heapq.heappop(tree)], key=len)
</snippet></ROW><ROW><id>19710498</id><snippet>&gt;&gt;&gt; encode(a)
3: [[1, '0'], [0, '10'], [0, '110'], [0, '111']]
&gt;&gt;&gt; encode(b)
4: [[0, '0'], [1, '10'], [0, '110'], [0, '111']]
</snippet></ROW><ROW><id>19710612</id><snippet>filtered = sorted(data["GROUP-A"].items(), key= lambda kv: max(value for group_b in kv[1].itervalues() for key_b in group_b.itervalues() for group_c in key_b.itervalues() for value in group_c.itervalues()))
print filtered
</snippet></ROW><ROW><id>19710612</id><snippet>[
    ('key-A2', {...}), 
    ('key-A1', {...}), 
    ('key-A3', {...})
]
</snippet></ROW><ROW><id>19710612</id><snippet>reverse=True</snippet></ROW><ROW><id>19710612</id><snippet>def get_biggest_c_value(key_a):
    values = []
    for group_b in key_a.itervalues():
        for key_b in group_b.itervalues():
            for group_c in key_b.itervalues():
                for value in group_c.itervalues():
                    values.append(value)
    return max(values)

filtered = sorted(data["GROUP-A"].items(), key=lambda kv: get_biggest_c_value(kv[1]))
print filtered
</snippet></ROW><ROW><id>19710641</id><snippet>rules = (
        Rule(SgmlLinkExtractor(allow=('http://www.cseblog.com/{d+}/{d+}/{*}.html', ), deny=( )),call_back ='parse_save' ),
        Rule(SgmlLinkExtractor(allow=('http://www.cseblog.com/search/{*}', ), deny=( )),,call_back = 'parse_only' ))
</snippet></ROW><ROW><id>19710648</id><snippet>scipy.sparse.hstack</snippet></ROW><ROW><id>19710648</id><snippet>from scipy.sparse import hstack
hstack((X, X2))
</snippet></ROW><ROW><id>19710648</id><snippet>numpy.hstack</snippet></ROW><ROW><id>19710678</id><snippet>np.where</snippet></ROW><ROW><id>19710678</id><snippet>&gt;&gt;&gt; A
array([[3, 2, 0, 3],
       [0, 3, 3, 0],
       [3, 1, 1, 0],
       [2, 1, 3, 1]])

&gt;&gt;&gt; np.where(A==0, 0, 5)
array([[5, 5, 0, 5],
       [0, 5, 5, 0],
       [5, 5, 5, 0],
       [5, 5, 5, 5]])
</snippet></ROW><ROW><id>19710678</id><snippet>A==0</snippet></ROW><ROW><id>19710678</id><snippet>C
array([[7, 8, 8, 6],
       [5, 7, 5, 5],
       [6, 9, 9, 9],
       [9, 7, 5, 8]])

np.where(A==0 ,0, C)
array([[7, 8, 0, 6],
       [0, 7, 5, 0],
       [6, 9, 9, 0],
       [9, 7, 5, 8]])

D
array([[145, 179, 123, 129],
       [173, 156, 108, 130],
       [186, 162, 157, 197],
       [178, 160, 176, 103]])

np.where(A==0, D, C)
array([[  7,   8, 123,   6],
       [173,   7,   5, 130],
       [  6,   9,   9, 197],
       [  9,   7,   5,   8]])
</snippet></ROW><ROW><id>19710960</id><snippet>def bin_convert(x, count=8):
    return "".join(map(lambda y:str((x&gt;&gt;y)&amp;1), range(count-1, -1, -1)))
</snippet></ROW><ROW><id>19710960</id><snippet>str()</snippet></ROW><ROW><id>19710960</id><snippet>range()</snippet></ROW><ROW><id>19710960</id><snippet>range(count-1, -1, -1)</snippet></ROW><ROW><id>19710960</id><snippet>"".join()</snippet></ROW><ROW><id>19710960</id><snippet>map()</snippet></ROW><ROW><id>19710960</id><snippet>lambda</snippet></ROW><ROW><id>19710960</id><snippet>def func_name(y)</snippet></ROW><ROW><id>19710960</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>19711092</id><snippet>csv_writer.writerow(linkedin_name)
</snippet></ROW><ROW><id>19711092</id><snippet>csv_writer.writerow([linkedin_name])
</snippet></ROW><ROW><id>19711268</id><snippet>ClearableFileInput</snippet></ROW><ROW><id>19711268</id><snippet>FileInput</snippet></ROW><ROW><id>19711268</id><snippet>FileInput</snippet></ROW><ROW><id>19711268</id><snippet>from django.forms import ModelForm, FileInput

class BookForm(ModelForm):
    class Meta:
        model = Book
        widgets = {
            'picture': FileInput(),
        }

    def __init__(self, *args, **kwargs):
        super(BookForm, self).__init__(*args, **kwargs)
        self.fields['picture'].widget.attrs = {'id':'selectedFile'} 
</snippet></ROW><ROW><id>19711268</id><snippet>ClearableFileInput</snippet></ROW><ROW><id>19711268</id><snippet>FileInput</snippet></ROW><ROW><id>19711270</id><snippet>FKtoClient</snippet></ROW><ROW><id>19711270</id><snippet>tld</snippet></ROW><ROW><id>19711270</id><snippet>def AccountHome(request):
    # I recommend using the login required decorator instead but this is ok
    if request.user.is_anonymous():
        return HttpResponseRedirect('/Login/')

    # create a tld instance for the form, with the user set
    tld = Tld(FKtoClient=request.user)
    form = SubmitDomain(data=request.POST or None, instance=tld) # A form bound to the POST data, using the tld instance

    if request.method == 'POST': # If the form has been submitted...
        if form.is_valid(): # If form input passes initial validation...
            domainNm = form.cleaned_data['domainNm']
            form.save() #save cleaned data to the db from dictionary

            # don't use a try..except block here, it shouldn't raise an exception
            return HttpResponseRedirect('/Processscan/?domainNm=%s' % domainNm)
    # No need to create another form here, because you are using the request.POST or None trick
    # else:
    #    form = SubmitDomain()

    tld_set = request.user.tld_set.all()

    return render(request, 'VA/account/accounthome.html', {
         'tld_set':tld_set, 'form' : form
    })
</snippet></ROW><ROW><id>19711270</id><snippet>user</snippet></ROW><ROW><id>19711270</id><snippet>self.instance.user</snippet></ROW><ROW><id>19711327</id><snippet>pd.to_datetime</snippet></ROW><ROW><id>19711327</id><snippet>In [12]: arr = [1382400000] * 1000000

In [14]: pd.to_datetime(arr,unit='s')
Out[14]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-10-22 00:00:00, ..., 2013-10-22 00:00:00]
Length: 1000000, Freq: None, Timezone: None

In [15]: %timeit pd.to_datetime(arr,unit='s')
10 loops, best of 3: 122 ms per loop
</snippet></ROW><ROW><id>19711477</id><snippet>results = {}

for ZeroID in ZeroList:
    if row[ZeroID]:
        results[R+str(ZeroID)] = float(row[ZeroID])
    else:
        results[R+str(ZeroID)] = 0
</snippet></ROW><ROW><id>19711593</id><snippet>with</snippet></ROW><ROW><id>19711593</id><snippet>writefile = random.choice([True, False])
f = open(filename) if writefile else None
try:
    # some code or other
finally:
    if writefile:
        f.close()
</snippet></ROW><ROW><id>19711593</id><snippet>with</snippet></ROW><ROW><id>19711782</id><snippet> 7 |  E
 6 |
 5 |
 4 |  D
 3 |
 2 |     B  C
 1 |  A
 0 +----------
   0  1  2  3
</snippet></ROW><ROW><id>19711782</id><snippet>p_2 = [('A', 'B'),
       ('B', 'C'),
       ('C', 'B'),
       ('D', 'B'),
       ('E', 'D')]
</snippet></ROW><ROW><id>19711782</id><snippet>from collections import defaultdict

p_2_dict = defaultdict(set)
for a, b in p_2:
    p_2_dict[a].add(b)
    p_2_dict[b].add(a)

def find_neigbours(start_vertex, levels):
    found = []
    from_vertices = [start_vertex]
    for i in range(1, levels+1):
        new_from_vertices = []
        for vertex in from_vertices:
            for neighbour in p_2_dict[vertex]:
                new_from_vertices.append(neighbour)
                found.append( (neighbour, i) )
        from_vertices = new_from_vertices
    return found
</snippet></ROW><ROW><id>19711782</id><snippet>def find_neigbours(start_vertex, levels):
    found = set()
    from_vertices = [start_vertex]
    for i in range(1, levels+1):
        new_from_vertices = set()
        for vertex in from_vertices:
            for neighbour in p_2_dict[vertex]:
                if neighbour == start_vertex:
                    continue
                new_from_vertices.add(neighbour)
                found.add( (neighbour, i) )
        from_vertices = new_from_vertices
    return found
</snippet></ROW><ROW><id>19711782</id><snippet>In [49]: find_neigbours('A', 1)
Out[49]: set([('B', 1)])

In [50]: find_neigbours('A', 2)
Out[50]: set([('B', 1), ('D', 2), ('C', 2)])

# 'B' encountered with different order:
In [51]: find_neigbours('A', 3)
Out[51]: set([('B', 1), ('D', 2), ('B', 3), ('E', 3), ('C', 2)])
</snippet></ROW><ROW><id>19711876</id><snippet>(?&lt;=-)(\d+)(?=\.tar\.gz)
</snippet></ROW><ROW><id>19711880</id><snippet>easy_install</snippet></ROW><ROW><id>19711880</id><snippet>v1/bin</snippet></ROW><ROW><id>19711880</id><snippet>which easy_install</snippet></ROW><ROW><id>19711880</id><snippet>/usr/bin/easy_install</snippet></ROW><ROW><id>19711899</id><snippet>find</snippet></ROW><ROW><id>19711901</id><snippet>0</snippet></ROW><ROW><id>19711901</id><snippet>1</snippet></ROW><ROW><id>19711901</id><snippet>left+1</snippet></ROW><ROW><id>19711901</id><snippet>right+1</snippet></ROW><ROW><id>19711901</id><snippet>4 2 3 2 2 1 3 6    &lt; original

4 1 3 1 2 1 3 6    &lt; valleys reduced
4 1 3 1 2 1 2 3    &lt; uphill reduced
2 1 3 1 2 1 2 3    &lt; downhill reduced
2 1 2 1 2 1 2 3    &lt; peaks reduced
</snippet></ROW><ROW><id>19711914</id><snippet>for batch in per_batch(log_entries):
    sp = transaction.savepoint()
    try:
        process_batch(batch)
    except BatchFailedException:
        sp.rollback()
        transaction.commit()
        raise
</snippet></ROW><ROW><id>19711914</id><snippet>Persistent</snippet></ROW><ROW><id>19711914</id><snippet>TmpStorage</snippet></ROW><ROW><id>19711914</id><snippet>TEMP</snippet></ROW><ROW><id>19711914</id><snippet>tempfile.TemporaryFile()</snippet></ROW><ROW><id>19712018</id><snippet>abs(imagem-255)</snippet></ROW><ROW><id>19712018</id><snippet>dtype</snippet></ROW><ROW><id>19712018</id><snippet>(255-imagem)</snippet></ROW><ROW><id>19712018</id><snippet>def inverte(imagem, name):
    imagem = (255-imagem)
    cv2.imwrite(name, imagem)
</snippet></ROW><ROW><id>19712051</id><snippet>metaData=`python /var/www/music/getMetaData.py "$artist" "$title" | tail -n 1`
</snippet></ROW><ROW><id>19712051</id><snippet>artist=${artist//[ ]/;}
title=${title//[ ]/;}
metaData=`python /var/www/music/getMetaData.py "$artist" "$title" | tail -n 1`
</snippet></ROW><ROW><id>19712287</id><snippet>from datetime import datetime, timedelta

# initial_date = datetime.today()
initial_date = datetime(2000, 3, 2)
interval = timedelta(days = 6)
increment = timedelta(days = 1)

i = initial_date - interval
while i &lt;= initial_date:
    print(i)
    i += increment
</snippet></ROW><ROW><id>19712497</id><snippet>k = (j + 13) / 27
while k &gt; 10:
    k += 1
    i = 3 * k - 1
</snippet></ROW><ROW><id>19712497</id><snippet>k = (j + 13) / 27;
while(k &gt; 10)
{
    k++;
    i = 3 * k - 1;
}
</snippet></ROW><ROW><id>19712508</id><snippet>read()</snippet></ROW><ROW><id>19712508</id><snippet>if value == "":  iniwriter.set(section_name,name,'""')</snippet></ROW><ROW><id>19712633</id><snippet>column_stack</snippet></ROW><ROW><id>19712633</id><snippet>In [30]: f1
Out[30]: array([ 12.3,  45.6,  78.9])

In [31]: f2
Out[31]: array([ 10.11,  12.13,  14.15])

In [32]: f3
Out[32]: array([ 1. ,  2.5,  5. ])

In [33]: s1
Out[33]: 
array(['foo', 'bar', 'baz'], 
      dtype='|S3')
</snippet></ROW><ROW><id>19712633</id><snippet>dtype</snippet></ROW><ROW><id>19712633</id><snippet>In [34]: data = np.array(zip(f1, f2, f3, s1), dtype=[('f1', float), ('f2', float), ('f3', float), ('s1', 'S16')])

In [35]: data
Out[35]: 
array([(12.3, 10.11, 1.0, 'foo'), (45.6, 12.13, 2.5, 'bar'),
       (78.9, 14.15, 5.0, 'baz')], 
      dtype=[('f1', '&lt;f8'), ('f2', '&lt;f8'), ('f3', '&lt;f8'), ('s1', 'S16')])
</snippet></ROW><ROW><id>19712633</id><snippet>np.savetxt</snippet></ROW><ROW><id>19712633</id><snippet>In [36]: np.savetxt('output.txt', data, fmt=["%.3f",]*3 + ["%s"])

In [37]: !cat output.txt
12.300 10.110 1.000 foo
45.600 12.130 2.500 bar
78.900 14.150 5.000 baz
</snippet></ROW><ROW><id>19712633</id><snippet>to_csv</snippet></ROW><ROW><id>19712968</id><snippet>sage: n, k = var('n, k')
sage: f(x,k) = sum((2/n)*(sin(n*x)*(-1)^(n+1)), n, 1, k)
#where n = 1,2,3 ... k
sage: f
(x, k) |--&gt; -2*sum((-1)^n*sin(n*x)/n, n, 1, k)
</snippet></ROW><ROW><id>19712968</id><snippet>if algorithm == 'maxima':
    return maxima.sr_sum(expression,v,a,b)
</snippet></ROW><ROW><id>19713300</id><snippet>numpy.bmat</snippet></ROW><ROW><id>19713300</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; z = np.zeros( (3, 2) )
</snippet></ROW><ROW><id>19713300</id><snippet>numpy.bmat</snippet></ROW><ROW><id>19713300</id><snippet>&gt;&gt;&gt; M = np.bmat( [[a, b], [z, c]] )
&gt;&gt;&gt; M
matrix([[  1.,   2.,   5.,   6.,   7.],
        [  3.,   4.,   8.,   9.,  10.],
        [  0.,   0.,   1.,   2.,   3.],
        [  0.,   0.,   4.,   5.,   6.],
        [  0.,   0.,   7.,   8.,   9.]])
</snippet></ROW><ROW><id>19713300</id><snippet>numpy.hstack</snippet></ROW><ROW><id>19713300</id><snippet>numpy.vstack</snippet></ROW><ROW><id>19713300</id><snippet>&gt;&gt;&gt; M = np.vstack( (np.hstack((a, b)), np.hstack((z, c))) )
&gt;&gt;&gt; M
matrix([[  1.,   2.,   5.,   6.,   7.],
        [  3.,   4.,   8.,   9.,  10.],
        [  0.,   0.,   1.,   2.,   3.],
        [  0.,   0.,   4.,   5.,   6.],
        [  0.,   0.,   7.,   8.,   9.]])
</snippet></ROW><ROW><id>19713334</id><snippet>file</snippet></ROW><ROW><id>19713334</id><snippet>file</snippet></ROW><ROW><id>19713334</id><snippet>def open_file_handler():
    filePath= askopenfilename() # don't override the built-in file class
    print filePath
    # do whatever with the file here
</snippet></ROW><ROW><id>19713334</id><snippet>def open_file_handler():
    filePath = askopenfilename()
    print filePath
    return filePath

def handle_file():
    filePath = open_file_handler()
    # handle the file
</snippet></ROW><ROW><id>19713334</id><snippet>open_file = Tkinter.Button(main_window, command=handle_file, padx=100, text="OPEN FILE")
open_file.pack()
</snippet></ROW><ROW><id>19713369</id><snippet>while l:
    # ...
    stats = []
</snippet></ROW><ROW><id>19713369</id><snippet>import copy
# ...
players[fullName] = copy.deepcopy(stats)
stats = []
</snippet></ROW><ROW><id>19713369</id><snippet>with open(filename, 'r') as f:
    for line in f:
        firstName = line.split(",")[0]
        lastName = line.split(",")[1]
        players[firstName + " " + lastName] = line.split(",")[2:]
</snippet></ROW><ROW><id>19713582</id><snippet>break</snippet></ROW><ROW><id>19713582</id><snippet>list[i]</snippet></ROW><ROW><id>19713582</id><snippet>list[i+1]</snippet></ROW><ROW><id>19713582</id><snippet>i+1</snippet></ROW><ROW><id>19713582</id><snippet>i</snippet></ROW><ROW><id>19713582</id><snippet>len(list)-1</snippet></ROW><ROW><id>19713582</id><snippet>def test(list, Threshold):

    for i in range(len(list)-1):    # &lt;-- note the change in limit

        if abs(list[i] - list[i+1]) &gt; Threshold:
            list.append((list[i] + list[i+1])/2) 
            list.sort()
            break    # this will stop the loop
</snippet></ROW><ROW><id>19713582</id><snippet>z = [1,2,4,4.5]
test(z,1.5)
z
[1, 2, 3, 4, 4.5]
</snippet></ROW><ROW><id>19713674</id><snippet>all_my_lists = {} #USE A DICT!!!
all_my_list[listx[2]] = listx  #listx[2] gives the 3rd value in listx
</snippet></ROW><ROW><id>19713726</id><snippet>data={"Name34":
        {
        "itemList":
            {
            "item1":100,
            "item2":100,
            "item3":100,
            "item4":100,
            "item5":100
            },
        "otherStuff":
            {
            "stuff1":100,
            "stuff2":100,
            "stuff3":100,
            }
        },
    "Name2":
        {
        "itemList":{'items'
        }}}

data['Name34']["itemList"]['item6']=100   

print(data['Name34']["itemList"])
</snippet></ROW><ROW><id>19713726</id><snippet>{'item1': 100, 'item3': 100, 'item2': 100, 'item5': 100, 'item4': 100, 'item6': 100}
</snippet></ROW><ROW><id>19713726</id><snippet>from collections import defaultdict
data = defaultdict(lambda: defaultdict(dict))

data['Name34']['IntemList']['Item1']=10
data['Name34']['IntemList']['Item6']=100

print(data['Name34']['IntemList'])
</snippet></ROW><ROW><id>19713726</id><snippet>{'Item1': 10, 'Item6': 100}
</snippet></ROW><ROW><id>19713726</id><snippet>from collections import defaultdict
import json

data = defaultdict(lambda: defaultdict(dict)) 

i=0
for k1 in ['Name{}'.format(j) for j in range(1,6)]:
    for k2 in ('Item1', 'Item2', 'Item33'):
        data[k1]['ItemList'][k2]=i
        i+=1

print(json.dumps(data)) 
</snippet></ROW><ROW><id>19713726</id><snippet>{"Name5": {"ItemList": {"Item33": 14, "Item2": 13, "Item1": 12}}, 
 "Name4": {"ItemList": {"Item33": 11, "Item2": 10, "Item1": 9}}, 
 "Name3": {"ItemList": {"Item33": 8, "Item2": 7, "Item1": 6}}, 
 "Name2": {"ItemList": {"Item33": 5, "Item2": 4, "Item1": 3}}, 
 "Name1": {"ItemList": {"Item33": 2, "Item2": 1, "Item1": 0}}}
</snippet></ROW><ROW><id>19713904</id><snippet>pivot</snippet></ROW><ROW><id>19713904</id><snippet>pdf = df.pivot("user_id", "item_id").fillna(0)
d = {k: v.tolist() for k,v in pdf.iterrows()}
</snippet></ROW><ROW><id>19713904</id><snippet>&gt;&gt;&gt; d
{1: [0.0, 0.0, 1.0], 2: [4.0, 0.0, 0.0], 3: [0.0, 3.0, 4.0]}
</snippet></ROW><ROW><id>19713904</id><snippet>&gt;&gt;&gt; df
   user_id  item_id  ratings
0        3        2        3
1        3        3        4
2        1        3        1
3        2        1        4
</snippet></ROW><ROW><id>19713904</id><snippet>&gt;&gt;&gt; pdf = df.pivot("user_id", "item_id")
&gt;&gt;&gt; pdf
         ratings        
item_id        1   2   3
user_id                 
1            NaN NaN   1
2              4 NaN NaN
3            NaN   3   4
</snippet></ROW><ROW><id>19713904</id><snippet>NaN</snippet></ROW><ROW><id>19713904</id><snippet>&gt;&gt;&gt; pdf = df.pivot("user_id", "item_id").fillna(0)
&gt;&gt;&gt; pdf
         ratings      
item_id        1  2  3
user_id               
1              0  0  1
2              4  0  0
3              0  3  4
</snippet></ROW><ROW><id>19713904</id><snippet>&gt;&gt;&gt; d = {k: v.tolist() for k,v in pdf.iterrows()}
&gt;&gt;&gt; d
{1: [0.0, 0.0, 1.0], 2: [4.0, 0.0, 0.0], 3: [0.0, 3.0, 4.0]}
</snippet></ROW><ROW><id>19713904</id><snippet>dict(zip(pdf.index, pdf.values.tolist()))</snippet></ROW><ROW><id>19713907</id><snippet>fp</snippet></ROW><ROW><id>19713907</id><snippet>fp.write('\034')
</snippet></ROW><ROW><id>19713907</id><snippet>echo «CONTROL-V»«CONTROL-BACKSLASH» | od -c</snippet></ROW><ROW><id>19713907</id><snippet>echo ^\ | od -c
0000000 034  \n
0000002
</snippet></ROW><ROW><id>19714092</id><snippet>any()</snippet></ROW><ROW><id>19714092</id><snippet>if any(s in x for s in (a,b,c,d,e,f,g)):
</snippet></ROW><ROW><id>19714092</id><snippet>any</snippet></ROW><ROW><id>19714092</id><snippet>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</snippet></ROW><ROW><id>19714092</id><snippet>a</snippet></ROW><ROW><id>19714092</id><snippet>g</snippet></ROW><ROW><id>19714464</id><snippet>form.my_action.triggered[()]
</snippet></ROW><ROW><id>19714517</id><snippet>view = self.window.active_view()
line = view.line(view.sel()[0])
linetext = view.substr(line)
</snippet></ROW><ROW><id>19714597</id><snippet>for tweet in reversed(user_tweets):
    print tweet.text
</snippet></ROW><ROW><id>19714877</id><snippet>if attempt == rndnumber + 3 or attempt == rndnumber - 3:
    # Do something...
</snippet></ROW><ROW><id>19715072</id><snippet>int</snippet></ROW><ROW><id>19715072</id><snippet>int(input())</snippet></ROW><ROW><id>19715072</id><snippet>s=0
L=[int(c) for c in input()]
for x in range(8):
    a=L[x]*(2**(7-x))
    # This is the same as "s=s+a"
    s+=a 
print(s)
</snippet></ROW><ROW><id>19715072</id><snippet>list(map(int, input()))</snippet></ROW><ROW><id>19715115</id><snippet>(defun python-electric-pair-string-delimiter ()
  (when (and electric-pair-mode
             (memq last-command-event '(?\" ?\'))
             (let ((count 0))
               (while (eq (char-before (- (point) count)) last-command-event)
                 (setq count (1+ count)))
               (= count 3)))
    (save-excursion (insert (make-string 3 last-command-event)))))

(add-hook 'python-mode-hook
          (lambda ()
            (add-hook 'post-self-insert-hook
                      #'python-electric-pair-string-delimiter 'append t)))
</snippet></ROW><ROW><id>19715152</id><snippet>def generate(x):
    for digits in itertools.count(1):
        for i in itertools.product(range(1, 10), repeat=digits):
            if reduce(operator.mul, i) == x:
                yield i
    if (math.pow(2, digits) &gt; x):
        break
</snippet></ROW><ROW><id>19715152</id><snippet>for i in generate(input_number)</snippet></ROW><ROW><id>19715152</id><snippet>import itertools</snippet></ROW><ROW><id>19715152</id><snippet>from functools import reduce</snippet></ROW><ROW><id>19715152</id><snippet>import math</snippet></ROW><ROW><id>19715351</id><snippet>&gt;&gt;&gt; df.groupby(df["b"].cumsum())["a"].cummax()
2007-04-27  11:00:00    1
            11:30:00    5
            12:00:00    5
            12:30:00    2
            13:00:00    2
            13:30:00    7
            14:00:00    7
            14:30:00    7
dtype: int64
</snippet></ROW><ROW><id>19715351</id><snippet>&gt;&gt;&gt; df["b"].cumsum()
2007-04-27  11:00:00    1
            11:30:00    1
            12:00:00    1
            12:30:00    2
            13:00:00    2
            13:30:00    3
            14:00:00    3
            14:30:00    3
Name: b, dtype: int32
</snippet></ROW><ROW><id>19715351</id><snippet>True</snippet></ROW><ROW><id>19715351</id><snippet>False</snippet></ROW><ROW><id>19715483</id><snippet>OrderedDict</snippet></ROW><ROW><id>19715483</id><snippet>__reduce__</snippet></ROW><ROW><id>19715483</id><snippet>__init__</snippet></ROW><ROW><id>19715483</id><snippet>def __reduce__(self):
    return (self.__class__, (self._somearg, tuple(self.items())))
</snippet></ROW><ROW><id>19715564</id><snippet>5**200000</snippet></ROW><ROW><id>19715564</id><snippet>0</snippet></ROW><ROW><id>19715564</id><snippet>(5**200000)-1</snippet></ROW><ROW><id>19715564</id><snippet>1000000</snippet></ROW><ROW><id>19715564</id><snippet>0</snippet></ROW><ROW><id>19715564</id><snippet>999999</snippet></ROW><ROW><id>19715564</id><snippet>139795</snippet></ROW><ROW><id>19715564</id><snippet>5**200000</snippet></ROW><ROW><id>19715564</id><snippet>139795</snippet></ROW><ROW><id>19715564</id><snippet>5**200000</snippet></ROW><ROW><id>19715564</id><snippet>5**200000</snippet></ROW><ROW><id>19715570</id><snippet>Promotion</snippet></ROW><ROW><id>19715570</id><snippet>end_date</snippet></ROW><ROW><id>19715570</id><snippet>crontab</snippet></ROW><ROW><id>19715833</id><snippet>exp &lt;= 0</snippet></ROW><ROW><id>19715833</id><snippet>1^0 =&gt; 1
2^0 =&gt; 1
...
</snippet></ROW><ROW><id>19715833</id><snippet>recurPower(2, 6)</snippet></ROW><ROW><id>19715833</id><snippet>recurPower(2, 6) =&gt;
2 * recurPower(2, 5) =&gt;
2 * 2 * recurPower(2, 4) =&gt;
...
2 * 2 * 2 * 2 * 2 * 2 * 1
</snippet></ROW><ROW><id>19715837</id><snippet>int(span.text[pos+2:].split(" ")[0])
</snippet></ROW><ROW><id>19715837</id><snippet>In [31]: span.text
Out[31]: u'In current traffic: 8 mins'

In [32]: span.text[pos+2:]
Out[32]: u'8 mins'

In [33]: span.text[pos+2:].split(' ')
Out[33]: [u'8', u'mins']

In [34]: span.text[pos+2:].split(' ')[0]
Out[34]: u'8'

In [35]: int(span.text[pos+2:].split(' ')[0])
Out[35]: 8
</snippet></ROW><ROW><id>19715904</id><snippet>import sys
sys.setrecursionlimit(9000)
</snippet></ROW><ROW><id>19715904</id><snippet>9000</snippet></ROW><ROW><id>19715931</id><snippet>convert()</snippet></ROW><ROW><id>19715931</id><snippet>import pygame

pygame.init()

image = pygame.image.load("file_to_load.jph")
print image.get_rect().size # you can get size

screen = pygame.display.set_mode(image.get_rect().size,0,32)

image = image.convert() # now you can convert 
</snippet></ROW><ROW><id>19715936</id><snippet>&gt;&gt;&gt; d = {'100,2': 0.3, "2,5": 0.5}
&gt;&gt;&gt; d = {tuple(k.split(',')): v for k, v in d.items()}
&gt;&gt;&gt; d
{('100', '2'): 0.3, ('2', '5'): 0.5}
</snippet></ROW><ROW><id>19715996</id><snippet>read_shmem</snippet></ROW><ROW><id>19715996</id><snippet>write_shmem</snippet></ROW><ROW><id>19715996</id><snippet>#include &lt;stdio.h&gt;

typedef struct {
    unsigned char c;
    unsigned long l;
    float f;
    double d;
} DataBlock ;

int write_shmem(const char* shmem_name, char* data)
{
    DataBlock* block = (DataBlock*)data ;
    printf("%c %ld %f %lf\n", block-&gt;c, block-&gt;l, block-&gt;f, block-&gt;d) ;
    return sizeof(DataBlock) ;
}

int read_shmem(const char* shmem_name, char* data) 
{
    DataBlock* block = (DataBlock*)data ;
    block-&gt;c = 'z' ;
    block-&gt;l = 3 ;
    block-&gt;f = block-&gt;d = 3.14 ;
    return sizeof(DataBlock) ;
}
</snippet></ROW><ROW><id>19715996</id><snippet>#! /usr/bin/env python3
from ctypes import *
dll = cdll.LoadLibrary('./libshmem.so')

write_shmem = dll.write_shmem
write_shmem.restype = c_int

read_shmem = dll.read_shmem
read_shmem.restype = c_int

class DataBlock(Structure):
    _fields_ = [('c', c_ubyte), ('l', c_ulong),
                ('f',c_float), ('d', c_double) ]

#
# Using byref()
#
data = DataBlock(ord('A'), 123, 12.32, 1.89721)

write_shmem(b"P0W", byref(data))
read_shmem(b"P0W", byref(data))

print("{0} {1} {2} {3}".format(chr(data.c), data.l, data.f, data.d))

#
# Using pointer()
#
data = DataBlock(ord('A'), 123, 12.32, 1.89721)

write_shmem(b"P0W", pointer(data))
read_shmem(b"P0W", pointer(data))

print("{0} {1} {2} {3}".format(chr(data.c), data.l, data.f, data.d))

#
# Using cast()
#
data = DataBlock(ord('A'), 123, 12.32, 1.89721)

write_shmem(b"P0W", cast(pointer(data), c_char_p))
read_shmem(b"P0W", cast(pointer(data), c_char_p))

print("{0} {1} {2} {3}".format(chr(data.c), data.l, data.f, data.d))
</snippet></ROW><ROW><id>19715996</id><snippet>byref</snippet></ROW><ROW><id>19715996</id><snippet>pointer</snippet></ROW><ROW><id>19715996</id><snippet>cast</snippet></ROW><ROW><id>19715996</id><snippet>A 123 12.320000 1.897210
z 3 3.140000104904175 3.14
</snippet></ROW><ROW><id>19715996</id><snippet>Makefile</snippet></ROW><ROW><id>19715996</id><snippet>libshmem.so: dummy_shmem.o
    gcc -shared -o libshmem.so dummy_shmem.o

dummy_shmem.o: dummy_shmem.c
    gcc -fpic -c dummy_shmem.c
</snippet></ROW><ROW><id>19715996</id><snippet>write_shmem</snippet></ROW><ROW><id>19715996</id><snippet>read_shmem</snippet></ROW><ROW><id>19715996</id><snippet>DataBlock</snippet></ROW><ROW><id>19715996</id><snippet>create_shmem</snippet></ROW><ROW><id>19715996</id><snippet>write_shmem</snippet></ROW><ROW><id>19715996</id><snippet>read_shmem</snippet></ROW><ROW><id>19715996</id><snippet>#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
#include &lt;string.h&gt;

typedef struct {
    unsigned char c;
    unsigned long l;
    float f;
    double d;
} DataBlock ;

static char* dummy_shmem = 0 ;
static size_t shmem_size = 0 ;

int create_shmem(const char* shmem_name, const size_t data_size)
{
    free(dummy_shmem) ;
    dummy_shmem = 0 ;
    shmem_size = 0 ;

    dummy_shmem = malloc(data_size) ;
    shmem_size = dummy_shmem ? data_size : 0 ;

    return shmem_size ;
}

int write_shmem(const char* shmem_name, const char* data, const size_t data_size)
{
    if (data_size &lt;= shmem_size) {
        memcpy(dummy_shmem, data, data_size) ;
        return data_size ;
    }
    return 0 ;
}

int read_shmem(const char* shmem_name, char* data, const size_t data_size) 
{
    if (data_size &lt;= shmem_size) {
        memcpy(data, dummy_shmem, data_size) ;
        return data_size ;
    }
    return 0 ;
}

int create_block(const char* shmem_name)
{
    printf("create_block: %s\n", shmem_name) ;
    return create_shmem(shmem_name, sizeof(DataBlock)) ;
}

int write_block(const char* shmem_name, const DataBlock* data)
{
    printf("write_block: [%s] %c %ld %f %lf\n", shmem_name, data-&gt;c, data-&gt;l, data-&gt;f, data-&gt;d) ;
    return write_shmem(shmem_name, (char*)data, sizeof(DataBlock)) ;
}

DataBlock read_block(const char* shmem_name)
{
    DataBlock result ;
    read_shmem(shmem_name, (char*)&amp;result, sizeof(DataBlock)) ;
    printf("read_block: [%s] %c %ld %f %lf\n", shmem_name, result.c, result.l, result.f, result.d) ;
    return result ;
}
</snippet></ROW><ROW><id>19715996</id><snippet>#! /usr/bin/env python3
from ctypes import *
dll = cdll.LoadLibrary('./libshmem.so')

class DataBlock(Structure):
    _fields_ = [('c', c_ubyte), ('l', c_ulong),
                ('f',c_float), ('d', c_double) ]

create_block = dll.create_block
create_block.argtypes = [c_char_p]
create_block.restype = c_int

write_block = dll.write_block
write_block.argtypes = [c_char_p, POINTER(DataBlock)]
write_block.restype = c_int

read_block = dll.read_block
read_block.argtypes = [c_char_p]
read_block.restype = DataBlock
#
# Create memory block 
#
create_block(b"P0W")    
#
# Write data block to shmem
#
in_data = DataBlock(ord('A'), 123, 12.32, 1.89721)
write_block(b"P0W", in_data)
#
# Read data block from shmem. 
#
out_data = read_block(b"P0W")

print("{0} {1} {2} {3}".format(chr(in_data.c), in_data.l, in_data.f, in_data.d))
print("{0} {1} {2} {3}".format(chr(out_data.c), out_data.l, out_data.f, out_data.d))
</snippet></ROW><ROW><id>19715996</id><snippet>DataBlock</snippet></ROW><ROW><id>19715996</id><snippet>write_block</snippet></ROW><ROW><id>19716084</id><snippet>start = [10, 5, 7]
</snippet></ROW><ROW><id>19716084</id><snippet>step1 = sorted(start) #if you have duplicates, sorted(set(start)) to uniquify
</snippet></ROW><ROW><id>19716084</id><snippet>lookup = {v:i for i,v in enumerate(step1,1)}
</snippet></ROW><ROW><id>19716084</id><snippet>[lookup[x] for x in start]
Out[9]: [3, 1, 2]
</snippet></ROW><ROW><id>19716084</id><snippet>index</snippet></ROW><ROW><id>19716084</id><snippet>test = [randrange(0,10000) for _ in range(10000)]

def f():
    std = sorted(test)
    return [std.index(e)+1 for e in test]

def g():
    step1 = sorted(test)
    lookup = {v:i for i,v in enumerate(step1,1)}
    return [lookup[x] for x in test]

%timeit f()
1 loops, best of 3: 1.17 s per loop

%timeit g()
100 loops, best of 3: 6.58 ms per loop
</snippet></ROW><ROW><id>19716149</id><snippet>django-admin.py startproject</snippet></ROW><ROW><id>19716149</id><snippet>USE_L10N = True</snippet></ROW><ROW><id>19716149</id><snippet>USE_THOUSAND_SEPARATOR = True</snippet></ROW><ROW><id>19716149</id><snippet>intcomma</snippet></ROW><ROW><id>19716149</id><snippet>USE_THOUSAND_SEPARATOR = False</snippet></ROW><ROW><id>19716149</id><snippet>{% load l10n %}
</snippet></ROW><ROW><id>19716149</id><snippet>{{ value.id|unlocalize }}
</snippet></ROW><ROW><id>19716151</id><snippet>a = Dice()</snippet></ROW><ROW><id>19716151</id><snippet>b = Dice()</snippet></ROW><ROW><id>19716151</id><snippet>result</snippet></ROW><ROW><id>19716151</id><snippet>    def __init__(self):
        self.number = random.randint(1,6)
</snippet></ROW><ROW><id>19716151</id><snippet>elif result == '7':
        result == '11'
else:
    print "we got here"
</snippet></ROW><ROW><id>19716151</id><snippet>def resultgiver():
    if result in [7,11]:
        print('You won! You got ' ,result,'.')

    elif result in [2, 3, 12]:
        print('You lost! You got ' ,result,'.')

    elif result in [5, 6, 8, 9, 10]:
        print('Roll again! You got ' ,result,'.')

    else:
        print "default case for result =", result
</snippet></ROW><ROW><id>19716402</id><snippet>from ctypes import c_ushort 

    def hex16(self, data):
        '''16bit int-&gt;hex converter'''
        return  '0x%004x' % (c_ushort(data).value)
#------------------------------------------------------------------------------      
    def int16(self, data):
        '''16bit hex-&gt;int converter'''
        return c_ushort(int(data,16)).value
</snippet></ROW><ROW><id>19716402</id><snippet>from struct import pack, unpack
pack_type = {'signed':'&gt;h','unsigned':'&gt;H',}
pack(self.pack_type[sign_type], data)
</snippet></ROW><ROW><id>19716603</id><snippet>Logger.handle()</snippet></ROW><ROW><id>19716603</id><snippet>basicConfig()</snippet></ROW><ROW><id>19716603</id><snippet>handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
# setting a Formatter to customise the logs is not shown, but
# you can add it here
logging.getLogger().addHandler(handler)
</snippet></ROW><ROW><id>19716603</id><snippet>basicConfig()</snippet></ROW><ROW><id>19716703</id><snippet>find()</snippet></ROW><ROW><id>19716703</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>19716703</id><snippet>string</snippet></ROW><ROW><id>19716703</id><snippet>name_company = soup.findAll("div", {"class" : "title"})
for name in name_company:
    print name.find('h2').string
</snippet></ROW><ROW><id>19716703</id><snippet>for name in name_company:
    ford = name.find('h2').string
    f.writerow([ford, all_data[2].getText()])
</snippet></ROW><ROW><id>19716703</id><snippet>Name,PE,Revenue % YOY,ROA% YOY,OCF Positive,Debt - Equity
Ford Motor Co. (F),11.23
</snippet></ROW><ROW><id>19716782</id><snippet>def clean(self):
    # Runs the super methods clean data to validate the form (ensure required fields are filled out and not beyond max lens)
    cleaned_data = super(UserRegistrationForm, self).clean()
    # verify passwords match
    password        = cleaned_data['password']
    password1       = cleaned_data['password1']

    if not password1:
            # raise forms.ValidationError("You must confirm your password!")
            # instead of raising exceptions you should put an error on the form itself.
            self._errors['password1'] = self.error_class(['you must confirm your password'])
    if password != password1:
            # raise forms.ValidationError("Your passwords did not match.")
            # instead of raising exceptions you should put an error on the form itself.
            self._errors['password1'] = self.error_class(['Your passwords did not match'])
    return cleaned_data # return that cleaned data
</snippet></ROW><ROW><id>19716782</id><snippet>def clean</snippet></ROW><ROW><id>19716845</id><snippet>regex = r'&lt;span class="SciName"&gt;\((.+?)\)&lt;/span&gt;'
</snippet></ROW><ROW><id>19716845</id><snippet>import re

text = '&lt;span class="SciName"&gt;(Acanthastrea bowerbanki)&lt;/span&gt;'
regex = r'&lt;span class="SciName"&gt;\((.+?)\)&lt;/span&gt;'
m = re.match(regex, text)
print m.group(1)
</snippet></ROW><ROW><id>19716853</id><snippet>sel()</snippet></ROW><ROW><id>19716853</id><snippet>sublime.View</snippet></ROW><ROW><id>19716853</id><snippet>sublime.Selection</snippet></ROW><ROW><id>19716853</id><snippet>[]</snippet></ROW><ROW><id>19716853</id><snippet>sublime.Region</snippet></ROW><ROW><id>19716853</id><snippet>`Selection</snippet></ROW><ROW><id>19716853</id><snippet>substr(region)</snippet></ROW><ROW><id>19716853</id><snippet>sublime.View</snippet></ROW><ROW><id>19716855</id><snippet>abstractproperty</snippet></ROW><ROW><id>19716855</id><snippet>class partialAP(abc.abstractproperty):
    def getter(self, func):
        if getattr(func, '__isabstractmethod__', False) or getattr(self.fset, '__isabstractmethod__', False):
            p = partialAP(func, self.fset)
        else:
            p = property(func, self.fset)
        return p

    def setter(self, func):
        if getattr(self.fget, '__isabstractmethod__', False) or getattr(func, '__isabstractmethod__', False):
            p = partialAP(self.fget, func)
        else:
            p = property(self.fset, func)
        return p
</snippet></ROW><ROW><id>19716855</id><snippet>class _mystring(object):

    __metaclass__ = abc.ABCMeta

    @partialAP
    @abc.abstractmethod
    def str(self):
        pass

    @str.setter
    def str(self,value):
        self._str = value

class uppercase(_mystring):

    @_mystring.str.getter
    def str(self):
        return self._str.upper()
</snippet></ROW><ROW><id>19716855</id><snippet>&gt;&gt;&gt; _mystring()
Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in &lt;module&gt;
    _mystring()
TypeError: Can't instantiate abstract class _mystring with abstract methods str
&gt;&gt;&gt; u = uppercase()
&gt;&gt;&gt; u.str = 'a'
&gt;&gt;&gt; u.str
'A'
</snippet></ROW><ROW><id>19716855</id><snippet>partialAP</snippet></ROW><ROW><id>19716855</id><snippet>abc.abstractmethod</snippet></ROW><ROW><id>19716855</id><snippet>abstractmethod</snippet></ROW><ROW><id>19716855</id><snippet>partialAP</snippet></ROW><ROW><id>19716855</id><snippet>partialAP</snippet></ROW><ROW><id>19716855</id><snippet>class _mystring(object):

    __metaclass__ = abc.ABCMeta

    @abc.abstractmethod
    def _strGet(self):
        pass

    def _strSet(self,value):
        self._str = value

    str = property(_strGet, _strSet)

class uppercase(_mystring):

    def _strGet(self):
        return self._str.upper()
    str = _mystring.str.getter(_strGet)
</snippet></ROW><ROW><id>19716855</id><snippet>&gt;&gt;&gt; _mystring()
Traceback (most recent call last):
  File "&lt;pyshell#39&gt;", line 1, in &lt;module&gt;
    _mystring()
TypeError: Can't instantiate abstract class _mystring with abstract methods _strGet
&gt;&gt;&gt; u = uppercase()
&gt;&gt;&gt; u.str = 'a'
&gt;&gt;&gt; u.str
'A'
</snippet></ROW><ROW><id>19716855</id><snippet>abstractproperty</snippet></ROW><ROW><id>19716855</id><snippet>_mystring.str.getter</snippet></ROW><ROW><id>19716855</id><snippet>@_mystring.str.getter</snippet></ROW><ROW><id>19716855</id><snippet>_strGet</snippet></ROW><ROW><id>19716923</id><snippet>X = list()
for i in range(108,1000,1):
   line[i].split('    ')
   float(line[i]) = X[i]
   print(X[i])
</snippet></ROW><ROW><id>19716923</id><snippet>f = open('Sample Data.txt',"r")
num=0
line = f.readlines()

    X = []
    for n, lines in enumerate(line, 0):  #6621
        # make it 109 to remove the first line "['# Column 3: Magnitude error\n']"
        if (n &gt; 109): 
            linSplit = lines.split('    ')
            joined = ' '.join(linSplit)
            # apply the float function to every item in joined.split
            # create a new list of floats in tmp variable
            tmp = map((lambda x: float(x)), joined.split())
            X.append(tmp)


    print X[0] # print first element in the list
</snippet></ROW><ROW><id>19716936</id><snippet>class LongHandler(tornado.web.RequestHandler):
    @thread_pool.in_thread_pool
    def long_time_function(self, callback):
        time.sleep(5)
        callback("foo")
</snippet></ROW><ROW><id>19716936</id><snippet>concurrent.futures.ThreadPoolExecutor</snippet></ROW><ROW><id>19716936</id><snippet>concurrent.futures.ProcessPoolExecutor</snippet></ROW><ROW><id>19716936</id><snippet>multiprocessing.dummy.Pool</snippet></ROW><ROW><id>19716936</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>19717020</id><snippet>__defaults__</snippet></ROW><ROW><id>19717020</id><snippet>func_defaults</snippet></ROW><ROW><id>19717020</id><snippet>&gt;&gt;&gt; def f(a=5):
...     return a
&gt;&gt;&gt; f.__defaults__
(5,)
&gt;&gt;&gt; f.__defaults__ = (99,)
&gt;&gt;&gt; f()
99
</snippet></ROW><ROW><id>19717020</id><snippet>__defaults__</snippet></ROW><ROW><id>19717109</id><snippet>if y &gt;= 1200 or y &lt;= 1299:
</snippet></ROW><ROW><id>19717109</id><snippet>if 1200 &lt;= y &lt;= 1299:
</snippet></ROW><ROW><id>19717116</id><snippet>'/folder1/folder2/folder3/folder4/folder5</snippet></ROW><ROW><id>19717116</id><snippet>lookup = {'/folder1/folder2/folder3/folder4':'include','/folder1/folder2':'exclude','/folder1':'include'}
</snippet></ROW><ROW><id>19717116</id><snippet>folder = '/folder1/folder2/folder3/folder4/folder5'.split('/')
for i in reversed(range(len(folder) + 1)):
    check = '/'.join(folder[:i])
    if lookup.get(check):
        print('{}: {}'.format(check,lookup.get(check)))
        break

#/folder1/folder2/folder3/folder4: include
</snippet></ROW><ROW><id>19717183</id><snippet>for i in range(len(string_a)):
    for j in range(len(string_b)):
        if string_a[i] == string_b[j]:
            same.append((i, j, string_b[j]))
</snippet></ROW><ROW><id>19717183</id><snippet>[ (3, 0, "h"), ... ]
</snippet></ROW><ROW><id>19717313</id><snippet>(\]\))</snippet></ROW><ROW><id>19717313</id><snippet>])</snippet></ROW><ROW><id>19717313</id><snippet>[ ]</snippet></ROW><ROW><id>19717313</id><snippet>([[(])([-+]?[0-9]*\.?[0-9]*|(\w*\([-+]?[0-9]*\.?[0-9]*\))|[+-]?oo)\W*?([-+]?[0-9]*\.?[0-9]*|(\w*\([-+]?[0-9]*\.?[0-9]*\))|[+-]?oo)([])])
</snippet></ROW><ROW><id>19717313</id><snippet>p_float = r'[-+]?[0-9]*\.?[0-9]*'  # a number
p_func = r'\w*\(%s\)' % p_float    # function + number
p_inf = r'[+-]?oo'                 # infinity
p_value = r'%s|%s|%s' % (p_float, p_func, p_inf)
pattern = re.compile(r'([[(])(%s)\W*?(%s)([])])' % (p_value, p_value))
</snippet></ROW><ROW><id>19717368</id><snippet>urlparse</snippet></ROW><ROW><id>19717368</id><snippet>&gt;&gt;&gt; from urlparse import urlparse, parse_qs
&gt;&gt;&gt; parse_qs(urlparse('/test?testing=test&amp;greeting=smile').query)
{'testing': ['test'], 'greeting': ['smile']}
</snippet></ROW><ROW><id>19717368</id><snippet>GET</snippet></ROW><ROW><id>19717613</id><snippet> def list_to_tuple(a_list):
    temp_list = []
    for item in a_list:
        if isinstance(item, list) or isinstance(item, tuple):
            temp_list.append(list_to_tuple(item))
        else:
            temp_list.append(item)
    return tuple(temp_list)
</snippet></ROW><ROW><id>19717662</id><snippet>writeRow = ['{:0&gt;3}'.format(t), len(c) , ','.join(c.keys()), ','.join(c.values())]
</snippet></ROW><ROW><id>19717662</id><snippet>t</snippet></ROW><ROW><id>19717662</id><snippet>0</snippet></ROW><ROW><id>19717662</id><snippet>&gt;&gt;&gt;t = 023
&gt;&gt;&gt;t
19
</snippet></ROW><ROW><id>19718029</id><snippet>bytearray</snippet></ROW><ROW><id>19718029</id><snippet>import ROOT
# create an array of bytes (chars) and reserve the last byte for null
# termination (last byte remains zero)
char_array = bytearray(21)
# all bytes of char_array are zeroed by default here (all b'\x00')

# create the tree
tree = ROOT.TTree('tree', 'tree')
# add a branch for char_array
tree.Branch('char_array', char_array, 'char_array[21]/C')
# set the first 20 bytes to characters of a string of length 20
char_array[:21] = 'a' * 20
# important to keep the last byte zeroed for null termination!
tree.Fill()
tree.Scan('', '', 'colsize=21')
</snippet></ROW><ROW><id>19718029</id><snippet>tree.Scan('', '', 'colsize=21')</snippet></ROW><ROW><id>19718029</id><snippet>************************************
*    Row   *            char_array *
************************************
*        0 *  aaaaaaaaaaaaaaaaaaaa *
************************************
</snippet></ROW><ROW><id>19718029</id><snippet>std::vector&lt;std::string&gt;</snippet></ROW><ROW><id>19718029</id><snippet>import ROOT

strings = ROOT.vector('string')()

tree = ROOT.TTree('tree', 'tree')
tree.Branch('strings', strings)
strings.push_back('Hello')
strings.push_back('world!')
tree.Fill()
tree.Scan()
</snippet></ROW><ROW><id>19718029</id><snippet>tree.Scan()</snippet></ROW><ROW><id>19718029</id><snippet>***********************************
*    Row   * Instance *   strings *
***********************************
*        0 *        0 *     Hello *
*        0 *        1 *    world! *
***********************************
</snippet></ROW><ROW><id>19718029</id><snippet>strings.clear()</snippet></ROW><ROW><id>19718029</id><snippet>from rootpy import stl
from rootpy.io import TemporaryFile
from rootpy.tree import Tree, TreeModel, CharArrayCol

class Model(TreeModel):
    # define the branches you want here
    # with branchname = branchvalue
    char_array = CharArrayCol(21)
    # the dictionary is compiled and cached for later
    # if not already available
    strings = stl.vector('string')

# create the tree inside a temporary file
with TemporaryFile():
    # all branches are created automatically according to your model above
    tree = Tree('tree', model=Model)

    tree.char_array = 'a' * 20
    # attemping to set char_array with a string of length 21 or longer will
    # result in a ValueError being raised.
    tree.strings.push_back('Hello')
    tree.strings.push_back('world!')
    tree.Fill()
    tree.Scan('', '', 'colsize=21')
</snippet></ROW><ROW><id>19718029</id><snippet>tree.Scan('', '', 'colsize=21')</snippet></ROW><ROW><id>19718029</id><snippet>***********************************************************************
*    Row   * Instance *            char_array *               strings *
***********************************************************************
*        0 *        0 *  aaaaaaaaaaaaaaaaaaaa *                 Hello *
*        0 *        1 *  aaaaaaaaaaaaaaaaaaaa *                world! *
***********************************************************************
</snippet></ROW><ROW><id>19718029</id><snippet>TreeModel</snippet></ROW><ROW><id>19718239</id><snippet>&gt;&gt;&gt; ["00"+"00"+"00"+"00"+"00"+"05"+"FF"+"70"+"00"+"00"+"00"]
['000000000005FF70000000']
</snippet></ROW><ROW><id>19718239</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>19718239</id><snippet>&gt;&gt;&gt; from binascii import unhexlify
&gt;&gt;&gt; unhexlify('000000000005FF70000000')
'\x00\x00\x00\x00\x00\x05\xffp\x00\x00\x00'
</snippet></ROW><ROW><id>19718239</id><snippet>&gt;&gt;&gt; unhexlify(''.join(["00","00","00","00","00","05","FF","70","00","00","00"]))
'\x00\x00\x00\x00\x00\x05\xffp\x00\x00\x00'
</snippet></ROW><ROW><id>19718239</id><snippet>list()</snippet></ROW><ROW><id>19718239</id><snippet>&gt;&gt;&gt; list(unhexlify('000000000005FF70000000'))
['\x00', '\x00', '\x00', '\x00', '\x00', '\x05', '\xff', 'p', '\x00', '\x00', '\x00']
</snippet></ROW><ROW><id>19718239</id><snippet>p</snippet></ROW><ROW><id>19718239</id><snippet>&gt;&gt;&gt; hex(ord('p'))
'0x70'
&gt;&gt;&gt; chr(0x70)
'p'
&gt;&gt;&gt; '\x70'
'p'
</snippet></ROW><ROW><id>19718240</id><snippet>sell</snippet></ROW><ROW><id>19718240</id><snippet>def buy():
    #...

def sell():
    #...

def stats():
    #...

while True:
    choice = input("1: Buy 2:Sell 3:Stats - press any other key to exit")
    if choice == "1": buy()
    elif choice == "2": sell()
    elif choice == "3": stats()
    else: break
</snippet></ROW><ROW><id>19718356</id><snippet>new_line</snippet></ROW><ROW><id>19718356</id><snippet>new_line</snippet></ROW><ROW><id>19718356</id><snippet>replaced</snippet></ROW><ROW><id>19718356</id><snippet>for i in range (replaced.count(part_of_speech)):
    new=input('Enter '+ part_of_speech +':') 
    new_line = replaced.replace(part_of_speech,new,1)
</snippet></ROW><ROW><id>19718356</id><snippet>new_line = replaced
for i in range (replaced.count(part_of_speech)):
    new=input('Enter '+ part_of_speech +':') 
    new_line = new_line.replace(part_of_speech,new,1)
</snippet></ROW><ROW><id>19718356</id><snippet>start = 0
current = 0
for i in range(5):
    current = start + i
print(current)
</snippet></ROW><ROW><id>19718356</id><snippet>4</snippet></ROW><ROW><id>19718356</id><snippet>start = 0
current = start
for i in range(5):
    current = current + i
print(current)
</snippet></ROW><ROW><id>19718356</id><snippet>10</snippet></ROW><ROW><id>19718411</id><snippet>datetime</snippet></ROW><ROW><id>19718411</id><snippet>date</snippet></ROW><ROW><id>19718411</id><snippet>sec_since_epoch = (date_obj.date() - date(1970, 1, 1)).total_seconds()
</snippet></ROW><ROW><id>19718411</id><snippet>date()</snippet></ROW><ROW><id>19718470</id><snippet>zip</snippet></ROW><ROW><id>19718470</id><snippet>lists = [mylist1, mylist2, mylist3]
selected_lists = (b for a, b in zip(selected, lists) if a)
result = zip(*selected_lists) # itertools if necessary
</snippet></ROW><ROW><id>19718489</id><snippet>QueryDict.getlist</snippet></ROW><ROW><id>19718489</id><snippet>request.GET.getlist('select_fields')
</snippet></ROW><ROW><id>19718489</id><snippet>request.GET</snippet></ROW><ROW><id>19718489</id><snippet>request.REQUEST.getlist('select_fields')</snippet></ROW><ROW><id>19718489</id><snippet>request.REQUEST</snippet></ROW><ROW><id>19718549</id><snippet>fileinput</snippet></ROW><ROW><id>19718549</id><snippet>import csv
import fileinput
import glob
import os

merged_csv = 'merged.csv'
columns = (1, 2)  # columns used for filtering
pathname = '*.csv'
tmpext = os.extsep + "tmp"
csv_files = glob.glob(pathname)

if merged_csv not in csv_files:
    prev_merged = None
else:
    prev_merged = merged_csv + tmpext
    os.rename(merged_csv, prev_merged)
    csv_files[csv_files.index(merged_csv)] = prev_merged

with open(merged_csv, 'wb') as ofile:
    csv_writer = csv.writer(ofile)
    written = set()  # unique combinations of column values written
    csv_stream = fileinput.input(csv_files, mode='rb')
    for row in csv.reader(csv_stream, delimiter=','):
        combination = tuple(row[col] for col in columns)
        if combination not in written:
            csv_writer.writerow(row)
            written.add(combination)

if prev_merged:
    os.unlink(prev_merged)  # clean up

print '{!r} file {}written'.format(merged_csv, 're' if prev_merged else '')
</snippet></ROW><ROW><id>19718583</id><snippet>db.serverStatus()</snippet></ROW><ROW><id>19718583</id><snippet>mongostat &gt; stats.txt</snippet></ROW><ROW><id>19718583</id><snippet>mongostat stats.txt</snippet></ROW><ROW><id>19718657</id><snippet>zip(*sorted(zip(*a), key=lambda x: -x[1]))
</snippet></ROW><ROW><id>19718921</id><snippet>update(request, extra=None, *args, **kwargs)
</snippet></ROW><ROW><id>19718921</id><snippet>kwargs['status'] 
</snippet></ROW><ROW><id>19718921</id><snippet>status
</snippet></ROW><ROW><id>19718951</id><snippet>for n in X</snippet></ROW><ROW><id>19718951</id><snippet>n</snippet></ROW><ROW><id>19718951</id><snippet>n</snippet></ROW><ROW><id>19718951</id><snippet>n</snippet></ROW><ROW><id>19718951</id><snippet>del n</snippet></ROW><ROW><id>19719019</id><snippet>def subpeptides(peptide):
    l = len(peptide)
    looped = peptide + peptide
    for start in range(0, l):
        for length in range(1, l):
            print(looped[start:start+length])
</snippet></ROW><ROW><id>19719019</id><snippet>&gt;&gt;&gt; subpeptides("ABCD")
A
AB
ABC
B
BC
BCD
C
CD
CDA
D
DA
DAB
</snippet></ROW><ROW><id>19719019</id><snippet>print(...)</snippet></ROW><ROW><id>19719019</id><snippet>yield ...</snippet></ROW><ROW><id>19719019</id><snippet>looped</snippet></ROW><ROW><id>19719071</id><snippet>for c in txt_open:
</snippet></ROW><ROW><id>19719071</id><snippet>c</snippet></ROW><ROW><id>19719071</id><snippet>for line in txt_open:
    for c in line:
</snippet></ROW><ROW><id>19719071</id><snippet>read</snippet></ROW><ROW><id>19719071</id><snippet>for c in txt_open.read():
</snippet></ROW><ROW><id>19719071</id><snippet>print</snippet></ROW><ROW><id>19719071</id><snippet>print</snippet></ROW><ROW><id>19719071</id><snippet>c</snippet></ROW><ROW><id>19719071</id><snippet>Counter</snippet></ROW><ROW><id>19719071</id><snippet>d = collections.Counter()
for line in txt_open:
    for c in line:
        d[c] += 1
</snippet></ROW><ROW><id>19719071</id><snippet>d = collections.Counter()
for line in txt_open:
    d.update(line)
</snippet></ROW><ROW><id>19719071</id><snippet>d = collections.Counter(c for line in txt_open for c in line)
</snippet></ROW><ROW><id>19719071</id><snippet>d = collections.Counter(txt_open.read())
</snippet></ROW><ROW><id>19719150</id><snippet>next()</snippet></ROW><ROW><id>19719150</id><snippet>file.writelines</snippet></ROW><ROW><id>19719150</id><snippet>with open(filenamex, 'rb') as currentx, open('foobar', 'w') as data:
    next(currentx)            #drop the first line
    data.writelines(currentx) #write rest of the content to `data`
</snippet></ROW><ROW><id>19719150</id><snippet>file.read()</snippet></ROW><ROW><id>19719186</id><snippet>Exception</snippet></ROW><ROW><id>19719186</id><snippet>try:
    call_your_function()
except Exception as e:
    print e.__module__
</snippet></ROW><ROW><id>19719186</id><snippet>Exception</snippet></ROW><ROW><id>19719216</id><snippet>class Product(models.Model):
    ... all other fields
    shops = models.ManyToManyField(Shop)
</snippet></ROW><ROW><id>19719216</id><snippet>def products(request):
     all_products = Product.objects.all()
     return render_to_response('polls/products.html', {
        'all_products': all_products,
     })
</snippet></ROW><ROW><id>19719216</id><snippet>{% for product in all_products %}
    &lt;li&gt;{{ product.name }}&lt;/li&gt;
    {% for shop in product.shops.all() %}
        &lt;li&gt;{{ shop.name }}&lt;/li&gt;
    {% endfor %}
    &lt;/br&gt;
{% endfor %}
</snippet></ROW><ROW><id>19719216</id><snippet>def products(request):
    all_products = Product.objects.all()
    return render_to_response('polls/products.html', {
        'all_products': all_products,
    })
</snippet></ROW><ROW><id>19719216</id><snippet>{% for product in all_products %}
    &lt;li&gt;{{ product.name }}&lt;/li&gt;
    {% for productinshop in product.productinshop_set.all %}
        &lt;li&gt;{{ productinshop.shop.name }}&lt;/li&gt;
    {% endfor %}
    &lt;/br&gt;
{% endfor %}
</snippet></ROW><ROW><id>19719216</id><snippet>def get_shops(self):
    return Shop.objects.filter(productinshop__product_id=self.pk)
</snippet></ROW><ROW><id>19719216</id><snippet>{% for product in all_products %}
    &lt;li&gt;{{ product.name }}&lt;/li&gt;
    {% for shop in product.get_shops %}
        &lt;li&gt;{{ shop.name }}&lt;/li&gt;
    {% endfor %}
    &lt;/br&gt;
{% endfor %}
</snippet></ROW><ROW><id>19719265</id><snippet>print "Content-type: application/pdf\n"
print pdf
</snippet></ROW><ROW><id>19719272</id><snippet>MainWindow</snippet></ROW><ROW><id>19719272</id><snippet>    view = View(Item('panel'))
</snippet></ROW><ROW><id>19719272</id><snippet>    view = View(Item('panel', style='custom'))
</snippet></ROW><ROW><id>19719272</id><snippet>simple</snippet></ROW><ROW><id>19719272</id><snippet>InstanceEditor</snippet></ROW><ROW><id>19719272</id><snippet>custom</snippet></ROW><ROW><id>19719272</id><snippet>simple</snippet></ROW><ROW><id>19719272</id><snippet>custom</snippet></ROW><ROW><id>19719272</id><snippet>text</snippet></ROW><ROW><id>19719272</id><snippet>readonly</snippet></ROW><ROW><id>19719292</id><snippet>import admin
if not admin.isUserAdmin():
        admin.runAsAdmin()
</snippet></ROW><ROW><id>19719292</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8; mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vim: fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4

# (C) COPYRIGHT © Preston Landers 2010
# Released under the same license as Python 2.6.5


import sys, os, traceback, types

def isUserAdmin():

    if os.name == 'nt':
        import ctypes
        # WARNING: requires Windows XP SP2 or higher!
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            traceback.print_exc()
            print "Admin check failed, assuming not an admin."
            return False
    elif os.name == 'posix':
        # Check for root on Posix
        return os.getuid() == 0
    else:
        raise RuntimeError, "Unsupported operating system for this module: %s" % (os.name,)

def runAsAdmin(cmdLine=None, wait=True):

    if os.name != 'nt':
        raise RuntimeError, "This function is only implemented on Windows."

    import win32api, win32con, win32event, win32process
    from win32com.shell.shell import ShellExecuteEx
    from win32com.shell import shellcon

    python_exe = sys.executable

    if cmdLine is None:
        cmdLine = [python_exe] + sys.argv
    elif type(cmdLine) not in (types.TupleType,types.ListType):
        raise ValueError, "cmdLine is not a sequence."
    cmd = '"%s"' % (cmdLine[0],)
    # XXX TODO: isn't there a function or something we can call to massage command line params?
    params = " ".join(['"%s"' % (x,) for x in cmdLine[1:]])
    cmdDir = ''
    showCmd = win32con.SW_SHOWNORMAL
    #showCmd = win32con.SW_HIDE
    lpVerb = 'runas'  # causes UAC elevation prompt.

    # print "Running", cmd, params

    # ShellExecute() doesn't seem to allow us to fetch the PID or handle
    # of the process, so we can't get anything useful from it. Therefore
    # the more complex ShellExecuteEx() must be used.

    # procHandle = win32api.ShellExecute(0, lpVerb, cmd, params, cmdDir, showCmd)

    procInfo = ShellExecuteEx(nShow=showCmd,
                              fMask=shellcon.SEE_MASK_NOCLOSEPROCESS,
                              lpVerb=lpVerb,
                              lpFile=cmd,
                              lpParameters=params)

    if wait:
        procHandle = procInfo['hProcess']    
        obj = win32event.WaitForSingleObject(procHandle, win32event.INFINITE)
        rc = win32process.GetExitCodeProcess(procHandle)
        #print "Process handle %s returned code %s" % (procHandle, rc)
    else:
        rc = None

    return rc

def test():
    rc = 0
    if not isUserAdmin():
        print "You're not an admin.", os.getpid(), "params: ", sys.argv
        #rc = runAsAdmin(["c:\\Windows\\notepad.exe"])
        rc = runAsAdmin()
    else:
        print "You are an admin!", os.getpid(), "params: ", sys.argv
        rc = 0
    x = raw_input('Press Enter to exit.')
    return rc


if __name__ == "__main__":
    sys.exit(test())
</snippet></ROW><ROW><id>19719314</id><snippet>Substitute.objects.filter(teacher__user=user.pk)
</snippet></ROW><ROW><id>19719352</id><snippet>sys.path</snippet></ROW><ROW><id>19719352</id><snippet>awesome-tool</snippet></ROW><ROW><id>19719352</id><snippet>$ cd ~/virtualenvs/awesome-tool
$ python
&gt;&gt;&gt; import awesometool.awesometool
&gt;&gt;&gt; ^D
$ cd ..
$ python
&gt;&gt;&gt; import awesometool.awesometool
ImportError: No module named awesome_tool.awesome_tool
$ cd awesome-tool
$ python ./bin/awesome-tool
&lt;everything works&gt;
$ cd bin
$ python awesome-tool
ImportError: No module named awesome_tool.awesome_tool
</snippet></ROW><ROW><id>19719366</id><snippet>class get_db:
    def __init__(self, dbpath):
        con = sqlite3.connect(dbpath, isolation_level=None)
        self.tups = con.cursor()

        self.dict = con.cursor()
        self.dict.row_factory = sqlite3.Row
</snippet></ROW><ROW><id>19719527</id><snippet>user_input = input("Make a selection: ")
</snippet></ROW><ROW><id>19719527</id><snippet>ask_user()</snippet></ROW><ROW><id>19719527</id><snippet>user_input</snippet></ROW><ROW><id>19719527</id><snippet>global user_input
user_input = input("Make a selection: ")
</snippet></ROW><ROW><id>19719527</id><snippet>ask_user()</snippet></ROW><ROW><id>19719527</id><snippet>user_input = ask_user()
</snippet></ROW><ROW><id>19719532</id><snippet>/</snippet></ROW><ROW><id>19719532</id><snippet>base64</snippet></ROW><ROW><id>19719532</id><snippet>b64encode</snippet></ROW><ROW><id>19719532</id><snippet>altchars=</snippet></ROW><ROW><id>19719532</id><snippet>+</snippet></ROW><ROW><id>19719532</id><snippet>/</snippet></ROW><ROW><id>19719532</id><snippet>"+-"</snippet></ROW><ROW><id>19719532</id><snippet>altchars</snippet></ROW><ROW><id>19719532</id><snippet>base64.b64encode(hmac.new(...), altchars='+-')
</snippet></ROW><ROW><id>19719556</id><snippet>class Sentence(object):
    pass

sentence = Sentence()
sentence.the_string = "This is a sentence."
</snippet></ROW><ROW><id>19719556</id><snippet>__init__</snippet></ROW><ROW><id>19719556</id><snippet>Sentence()</snippet></ROW><ROW><id>19719556</id><snippet>__init__</snippet></ROW><ROW><id>19719556</id><snippet>__init__</snippet></ROW><ROW><id>19719556</id><snippet>class Sentence(object):
    def __init__(self, the_sentence):
        pass

sentence = Sentence("This is a sentence.")
sentence.the_string = "This is a different sentence."
</snippet></ROW><ROW><id>19719556</id><snippet>__init__</snippet></ROW><ROW><id>19719556</id><snippet>class Sentence(object):
    def __init__(self, the_sentence):
        self.the_string = the_sentence

sentence = Sentence("This is a sentence.")
</snippet></ROW><ROW><id>19719556</id><snippet>property</snippet></ROW><ROW><id>19719702</id><snippet>.get</snippet></ROW><ROW><id>19719702</id><snippet>IntVar</snippet></ROW><ROW><id>19719702</id><snippet>def changeSpeed(self, delta_speed):
    self.speed += delta_speed.get()
</snippet></ROW><ROW><id>19719702</id><snippet>from Tkinter import Entry, IntVar, Tk

root = Tk()

data = IntVar()

entry = Entry(textvariable=data)
entry.grid()

def click(event):
    # Get the number, add 1 to it, and then print it
    print data.get() + 1

# Bind the entrybox to the Return key
entry.bind("&lt;Return&gt;", click)

root.mainloop()
</snippet></ROW><ROW><id>19719702</id><snippet>Return</snippet></ROW><ROW><id>19719702</id><snippet>data</snippet></ROW><ROW><id>19719781</id><snippet>@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
def get_centers_fast(np.ndarray[DTYPE_t, ndim = 2] x, double radius):

    cdef int N = x.shape[0]
    cdef int D = x.shape[1]
    cdef int m = 1
    cdef np.ndarray[DTYPE_t, ndim = 2] xc = np.zeros([10000, D])
    cdef double r = 0
    cdef double r_min = 10
    cdef int i, j, k

    for k in range(D):
        xc[0,k] = x[0,k]

    for i in range(1, N):
        r_min = 10
        for j in range(m):
            r = 0
            for k in range(D):
                r += (x[i, k] - xc[j, k])**2
            r = r**0.5
            if r &lt; r_min:
                r_min = r
        if r_min &gt; radius:
            m = m + 1
            for k in range(D):
                xc[m - 1,k] = x[i,k]

    nonzero = np.nonzero(xc[:,0])[0]
    xc = xc[nonzero,:]

    return xc
</snippet></ROW><ROW><id>19719781</id><snippet>N = 40000
r = 0.1
x1 = np.random.normal(size = N)
x1 = (x1 - min(x1)) / (max(x1)-min(x1))
x2 = np.random.normal(size = N)
x2 = (x2 - min(x2)) / (max(x2)-min(x2))
X = np.vstack([x1, x2]).T

tic = time.time()
grid0 = gt.get_centers0(X, r)
toc = time.time()
print 'Method 0: ' + str(toc - tic)

tic = time.time()
grid2 = gt.get_centers2(X, r, 10)
toc = time.time()
print 'Method 2: ' + str(toc - tic)

tic = time.time()
grid3 = gt.get_centers_fast(X, r)
toc = time.time()
print 'Method 3: ' + str(toc - tic)
</snippet></ROW><ROW><id>19719781</id><snippet>Method 0: 0.219595909119
Method 2: 0.191949129105
Method 3: 0.0127329826355
</snippet></ROW><ROW><id>19719831</id><snippet>Parent</snippet></ROW><ROW><id>19719831</id><snippet>_id</snippet></ROW><ROW><id>19719936</id><snippet>delete</snippet></ROW><ROW><id>19719942</id><snippet>upper</snippet></ROW><ROW><id>19719942</id><snippet>cap = cap + sentence[0].upper() + sentence[1:] #adding "" + capital letter + rest of sentence
</snippet></ROW><ROW><id>19720143</id><snippet>stored_data</snippet></ROW><ROW><id>19720143</id><snippet>with open('FullMergedData.csv', 'a') as output_csv: #this will append  
# the result to the file.
    with open(csv_filename, 'rb') as current_csv:
        for line in current_csv:   #loop through the lines
            if first_run != False:
                next(current_csv)
                first_run = True #After the first line,
                #you should immidiately change first_run to true.
            output_csv.writelines(line)  #write it per line
</snippet></ROW><ROW><id>19720165</id><snippet>shlex</snippet></ROW><ROW><id>19720165</id><snippet>shlex</snippet></ROW><ROW><id>19720165</id><snippet>r"..."</snippet></ROW><ROW><id>19720165</id><snippet>cmd = subprocess.call(r"C:\Windows\System32\cmd.exe")
</snippet></ROW><ROW><id>19720165</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>19720165</id><snippet>CreateProcess()</snippet></ROW><ROW><id>19720211</id><snippet>strnumbers = str(lst)
listnumbers = list(strnumbers.split())  
</snippet></ROW><ROW><id>19720211</id><snippet>,</snippet></ROW><ROW><id>19720211</id><snippet>[</snippet></ROW><ROW><id>19720211</id><snippet>lst</snippet></ROW><ROW><id>19720211</id><snippet>numbers = int(input("Enter numbers separated by space"))
</snippet></ROW><ROW><id>19720223</id><snippet>original</snippet></ROW><ROW><id>19720223</id><snippet>"original"</snippet></ROW><ROW><id>19720223</id><snippet>"original"</snippet></ROW><ROW><id>19720223</id><snippet>original</snippet></ROW><ROW><id>19720223</id><snippet>len ('original')
     ^        ^
</snippet></ROW><ROW><id>19720259</id><snippet>MEDIA_ROOT = os.path.join(SITE_ROOT, 'media')
</snippet></ROW><ROW><id>19720259</id><snippet>MEDIA_ROOT = os.path.join(SITE_ROOT, '..', 'media')
</snippet></ROW><ROW><id>19720259</id><snippet>SITE_ROOT</snippet></ROW><ROW><id>19720259</id><snippet>settings.py</snippet></ROW><ROW><id>19720259</id><snippet>myproject/myproject</snippet></ROW><ROW><id>19720276</id><snippet>keys = ('last_modified', 'asset_id', 'asset_type', 'asset_name', 'status', 'annotation', 'error_id')
print ','.join(keys)
for error in GetErrorList():
    print ','.join(str(error[key]) for key in keys)
</snippet></ROW><ROW><id>19720276</id><snippet>','</snippet></ROW><ROW><id>19720276</id><snippet>' '</snippet></ROW><ROW><id>19720315</id><snippet>next_page_id = None
while True:
  tags_recent_media, next = api.tag_recent_media(keyword, next_page_id)
  extractImagesFrom(tags_recent_media)
  if not next:
    break
  next_page_id = ...
</snippet></ROW><ROW><id>19720452</id><snippet>x2 = [abs(k) for k in x]
</snippet></ROW><ROW><id>19720541</id><snippet>s.bind(("", 5005)) 
</snippet></ROW><ROW><id>19720541</id><snippet>("192.168.178.25", 5005);</snippet></ROW><ROW><id>19720541</id><snippet>s.bind(("192.168.178.25", 5005)) 
</snippet></ROW><ROW><id>19720664</id><snippet>environ_overrides</snippet></ROW><ROW><id>19720664</id><snippet>remote_addr</snippet></ROW><ROW><id>19720664</id><snippet>environ_overrides={'REMOTE_ADDR': '127.0.0.2'})
</snippet></ROW><ROW><id>19720669</id><snippet>drop_duplicates()</snippet></ROW><ROW><id>19720669</id><snippet>df.drop_duplicates(cols = 'uniqueid', inplace = True)
</snippet></ROW><ROW><id>19720725</id><snippet>csv</snippet></ROW><ROW><id>19720725</id><snippet>import csv

def your_view(request, ...):
    csv_data = {
        'data': [
            ('quick', 'brown', 'fox', 'jump'),
            ('over', 'the', 'lazy', 'dog')
        ],
        'total': 23,
        'subtotal': 4
    }

    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="some_file.csv"'
    writer = csv.writer(response, delimiter='\t')
    writer.writerow(['header1', 'header2', 'header3', 'header4'])
    writer.writerows(csv_data['data'])
    writer.writerow(['tota', 'subtotal'])
    writer.writerow([csv_data['total'], csv_data['subtotal']])
    return response
</snippet></ROW><ROW><id>19720783</id><snippet>markX</snippet></ROW><ROW><id>19720783</id><snippet>return gameBoard[:index] + 'x' + gameBoard[index+1:]</snippet></ROW><ROW><id>19720783</id><snippet>gameBoard = ...</snippet></ROW><ROW><id>19720783</id><snippet>None</snippet></ROW><ROW><id>19720783</id><snippet>None</snippet></ROW><ROW><id>19720783</id><snippet>'NoneType' object is not subscriptable</snippet></ROW><ROW><id>19720783</id><snippet>markO()</snippet></ROW><ROW><id>19720783</id><snippet>self.gameBoard</snippet></ROW><ROW><id>19720963</id><snippet># All this work is un-necessary overkill
#root = Resource()
#root.putChild("",django_resource)
#from twisted.application import service
#application = service.Application("app")

internet.TCPServer(8080, Site(django_resource)).setServiceParent(application)
</snippet></ROW><ROW><id>19721026</id><snippet>raw_input</snippet></ROW><ROW><id>19721026</id><snippet>raw_input = ("?")
</snippet></ROW><ROW><id>19721026</id><snippet>raw_input('?')</snippet></ROW><ROW><id>19721026</id><snippet>&gt;&gt;&gt; raw_input('line 1:')
line 1:111
'111'
&gt;&gt;&gt; raw_input = ('?')
&gt;&gt;&gt; raw_input('line 1:')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>19721096</id><snippet>x=5</snippet></ROW><ROW><id>19721096</id><snippet>5</snippet></ROW><ROW><id>19721096</id><snippet>x</snippet></ROW><ROW><id>19721096</id><snippet>x</snippet></ROW><ROW><id>19721096</id><snippet>&gt;&gt;&gt; x=5    # discussed
&gt;&gt;&gt; id(x)  # the 'id' which in cPython is the memory address.
140246146681256
&gt;&gt;&gt; y=x    # now two names, 'x' and 'y' associated with that object
&gt;&gt;&gt; id(y)  
140246146681256     # same object
&gt;&gt;&gt; z=5    # no guaranteed, likely the same object referred to by 'x' and 'y'
&gt;&gt;&gt; id(z)
140246146681256     # id is the same! The object labeled 'x' was found and labeled 'z'
&gt;&gt;&gt; del x           # ref count to object '140246146681256' decreased by 1
&gt;&gt;&gt; del y           # same
&gt;&gt;&gt; z
5
&gt;&gt;&gt; id(z)
140246146681256    # same object but the names ''x' and 'y' no longer label it
</snippet></ROW><ROW><id>19721096</id><snippet>x=5</snippet></ROW><ROW><id>19721096</id><snippet>&gt;&gt;&gt; li=[str(x) for x in range(5)]  
&gt;&gt;&gt; li
['0', '1', '2', '3', '4']
</snippet></ROW><ROW><id>19721096</id><snippet>&gt;&gt;&gt; li2=list('012345')    # longer list; completely different construction
&gt;&gt;&gt; li2
['0', '1', '2', '3', '4', '5']    
</snippet></ROW><ROW><id>19721096</id><snippet>&gt;&gt;&gt; [id(x) for x in li]
[4373138488, 4372558792, 4372696960, 4373139288, 4373139368]
&gt;&gt;&gt; [id(x) for x in li2]
[4373138488, 4372558792, 4372696960, 4373139288, 4373139368,  4372696720]  
</snippet></ROW><ROW><id>19721096</id><snippet>x=5</snippet></ROW><ROW><id>19721229</id><snippet>result = [c[1] for b in z for c in b]
print result
</snippet></ROW><ROW><id>19721248</id><snippet>LineReceiver</snippet></ROW><ROW><id>19721248</id><snippet>\r\n</snippet></ROW><ROW><id>19721248</id><snippet>\n</snippet></ROW><ROW><id>19721248</id><snippet>\n</snippet></ROW><ROW><id>19721248</id><snippet>\r\n</snippet></ROW><ROW><id>19721248</id><snippet>class ChatServer(LineReceiver):
    delimiter = '\n' # &lt;----
    ...
</snippet></ROW><ROW><id>19721438</id><snippet>LinkedAccount</snippet></ROW><ROW><id>19721438</id><snippet>[1, [2, [3, [4]]]]
</snippet></ROW><ROW><id>19721438</id><snippet>LinkedAccount</snippet></ROW><ROW><id>19721471</id><snippet>&lt;record model="ir.ui.view" id="view_product_form_custom"&gt;
  &lt;field name="name"&gt;CRM - Leads Calendar.inherit&lt;/field&gt; 
  &lt;field name="model"&gt;crm.lead&lt;/field&gt;
  &lt;field name="inherit_id" ref="crm.crm_case_form_view_leads" /&gt; 
  &lt;field name="arch" type="xml"&gt;
    &lt;xpath expr="//field[@name='partner_name']" position="attributes"&gt;
        &lt;attribute name="on_change"&gt;testchange(partner_name)&lt;/attribute&gt;
    &lt;/xpath&gt;
  &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>19721471</id><snippet>_columns = {
    'contact_name': fields.char('Contact Name', size=64, readonly=False),
    'partner_name': fields.char("Customer Name", size=64, help='Got your nose!', select=1, readonly=False),
            }
</snippet></ROW><ROW><id>19721700</id><snippet>find ~/virtualenv/lib/python2.7/site-packages/mezzanine/ -type f | while read this; do cat $this | grep 'dev\.db' &amp;&amp; echo '&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;' $this; done
        "NAME": "dev.db",
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; /Users/eeytan/dd2/lib/python2.7/site-packages/mezzanine//project_template/local_settings.py.template
</snippet></ROW><ROW><id>19721700</id><snippet>.gitignore</snippet></ROW><ROW><id>19721903</id><snippet>row3</snippet></ROW><ROW><id>19721903</id><snippet>row4</snippet></ROW><ROW><id>19721903</id><snippet>set</snippet></ROW><ROW><id>19721903</id><snippet>row3 = row3.split()</snippet></ROW><ROW><id>19721903</id><snippet>set(row3+row4)</snippet></ROW><ROW><id>19722003</id><snippet>f.get.__closure__[0].cell_contents.value
f.get.__closure__[0].cell_contents.value = "some new value"
</snippet></ROW><ROW><id>19722105</id><snippet>for i in x[:5]:
    print i
</snippet></ROW><ROW><id>19722105</id><snippet>for x in x:</snippet></ROW><ROW><id>19722190</id><snippet>def getnewestfile(NetworkPath):
    DestFolder = os.getcwd()
    os.chdir(NetworkPath)
    filelist = os.listdir(os.getcwd())
    filelist = filter(lambda x: not os.path.isdir(x), filelist)
    newest = max(filelist, key=lambda x: os.stat(x).st_mtime)
    os.chdir(DestFolder)
    return newest
</snippet></ROW><ROW><id>19722583</id><snippet>finRecord = recordPart1 + str(recordCount)
</snippet></ROW><ROW><id>19722583</id><snippet>finRecord = recordPart1 + str(recordCount+urlCounter-10)
</snippet></ROW><ROW><id>19722583</id><snippet>link</snippet></ROW><ROW><id>19722583</id><snippet>for link in soup1.find_all('a'):
    print(link.get('href'))
</snippet></ROW><ROW><id>19722583</id><snippet>soup = BeautifulSoup(html)
urlCounter = urlCounter + 10
for link in soup.select('div.gs_ttss a'):
    print(link.get('href'))
</snippet></ROW><ROW><id>19722852</id><snippet>Region(start, end)</snippet></ROW><ROW><id>19722852</id><snippet>def run(self, edit, target):
    if not target or target == "":
        return

    content = self.view.substr(sublime.Region(0, self.view.size()))
    begin = content.find(target)
    if begin == -1:
        return
    end = begin + len(target)
    target_region = sublime.Region(begin, end)
    self.view.sel().clear()
    self.view.sel().add(target_region)
</snippet></ROW><ROW><id>19722911</id><snippet>DFS</snippet></ROW><ROW><id>19722911</id><snippet>WebSocketClientFactory</snippet></ROW><ROW><id>19722911</id><snippet>connectWs</snippet></ROW><ROW><id>19722911</id><snippet>DFS.onOpen</snippet></ROW><ROW><id>19722911</id><snippet>DFS</snippet></ROW><ROW><id>19723261</id><snippet>x</snippet></ROW><ROW><id>19723261</id><snippet>[int(x or 0) for x in mylist]
</snippet></ROW><ROW><id>19723398</id><snippet>A_generated = Entry(generated_frame, bd =2,width=12,justify=RIGHT)
A_generated.pack(side = RIGHT)
A_generated.focus_set() 
</snippet></ROW><ROW><id>19723398</id><snippet>A_generated</snippet></ROW><ROW><id>19723398</id><snippet>Entry</snippet></ROW><ROW><id>19723465</id><snippet>os.getcwd()</snippet></ROW><ROW><id>19723465</id><snippet>sys.path</snippet></ROW><ROW><id>19723509</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; d = deque(maxlen=3)
&gt;&gt;&gt; for i in range(1, 7):
...     d.append(i)
...     print d
...     
deque([1], maxlen=3)
deque([1, 2], maxlen=3)
deque([1, 2, 3], maxlen=3)
deque([2, 3, 4], maxlen=3)
deque([3, 4, 5], maxlen=3)
deque([4, 5, 6], maxlen=3)
</snippet></ROW><ROW><id>19723546</id><snippet>'core.handlers': {
    'level': 'DEBUG',
    'handlers': ['console']
}
</snippet></ROW><ROW><id>19723546</id><snippet>django.request</snippet></ROW><ROW><id>19723546</id><snippet>'root': {
    'level': 'DEBUG',
    'handlers': ['console']
}
</snippet></ROW><ROW><id>19723546</id><snippet>django.request</snippet></ROW><ROW><id>19723546</id><snippet>django.request</snippet></ROW><ROW><id>19723546</id><snippet>api</snippet></ROW><ROW><id>19723546</id><snippet>handlers</snippet></ROW><ROW><id>19723546</id><snippet>core</snippet></ROW><ROW><id>19723688</id><snippet>import asyncore
import socket

class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is not None:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = EchoHandler(sock)

server = EchoServer('localhost', 8080)
asyncore.loop()
</snippet></ROW><ROW><id>19723810</id><snippet>enumerate</snippet></ROW><ROW><id>19723810</id><snippet>enumerate object</snippet></ROW><ROW><id>19723810</id><snippet>tuples</snippet></ROW><ROW><id>19723810</id><snippet>&gt;&gt;&gt; text = 'qwerty'
&gt;&gt;&gt; it = enumerate(text)
&gt;&gt;&gt; next(it)
(0, 'q')
&gt;&gt;&gt; next(it)
(1, 'w')
&gt;&gt;&gt; next(it)
(2, 'e')
&gt;&gt;&gt; list(enumerate(text))
[(0, 'q'), (1, 'w'), (2, 'e'), (3, 'r'), (4, 't'), (5, 'y')]
</snippet></ROW><ROW><id>19723810</id><snippet>&gt;&gt;&gt; text = '12121'
&gt;&gt;&gt; result = []
for item in enumerate(text):
    i, ch = item              #sequence unpacking
    if ch == '1':
        result.append(i+1)
...         
&gt;&gt;&gt; result
[1, 3, 5]
</snippet></ROW><ROW><id>19723810</id><snippet>result = [i for i, ch in enumerate(s, start=1) if ch == '1']
</snippet></ROW><ROW><id>19723810</id><snippet>enumerate</snippet></ROW><ROW><id>19723810</id><snippet>&gt;&gt;&gt; lis = [4, 5, 6, 7]
for i in xrange(len(lis)):
    print i,'--&gt;',lis[i]
...     
0 --&gt; 4
1 --&gt; 5
2 --&gt; 6
3 --&gt; 7
</snippet></ROW><ROW><id>19723810</id><snippet>&gt;&gt;&gt; for ind, item in enumerate(lis):
    print ind,'--&gt;', item
...     
0 --&gt; 4
1 --&gt; 5
2 --&gt; 6
3 --&gt; 7
</snippet></ROW><ROW><id>19723810</id><snippet>enumerate</snippet></ROW><ROW><id>19723810</id><snippet>&gt;&gt;&gt; it = iter(range(5, 9))      #Indexing not possible here
for ind, item in enumerate(it):
    print ind,'--&gt;', item
...     
0 --&gt; 5
1 --&gt; 6
2 --&gt; 7
3 --&gt; 8
</snippet></ROW><ROW><id>19723810</id><snippet>enumerate</snippet></ROW><ROW><id>19723810</id><snippet>class enumerate(object)
 |  enumerate(iterable[, start]) -&gt; iterator for index, value of iterable
 |  
 |  Return an enumerate object.  iterable must be another object that supports
 |  iteration.  The enumerate object yields pairs containing a count (from
 |  start, which defaults to zero) and a value yielded by the iterable argument.
 |  enumerate is useful for obtaining an indexed list:
 |      (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
</snippet></ROW><ROW><id>19723906</id><snippet>\u</snippet></ROW><ROW><id>19723906</id><snippet>&gt;&gt;&gt; s = u'\xe0'
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps(s)
'"\\u00e0"'
</snippet></ROW><ROW><id>19723906</id><snippet>&gt;&gt;&gt; s.encode("utf-16-be")
'\x00\xe0'
</snippet></ROW><ROW><id>19723906</id><snippet>u'\u00e0'</snippet></ROW><ROW><id>19723906</id><snippet>u'\xe0'</snippet></ROW><ROW><id>19723906</id><snippet>'\u00e0'</snippet></ROW><ROW><id>19723906</id><snippet>&gt;&gt;&gt; u'\u00e0'
u'\xe0'
</snippet></ROW><ROW><id>19723957</id><snippet>&gt;&gt;&gt; list_string = '[[1, 1], [2, 2], [3, 3]]'
&gt;&gt;&gt; import ast
&gt;&gt;&gt; type(ast.literal_eval(list_string))
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>19724921</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>19724921</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; strs = """   3                             
  7 4
 2 4 6
8 5 9 3"""
&gt;&gt;&gt; lis = [s.split() for s in strs.splitlines()]
&gt;&gt;&gt; zip(*(izip_longest(*lis, fillvalue='0')))
[('3', '0', '0', '0'),
 ('7', '4', '0', '0'),
 ('2', '4', '6', '0'),
 ('8', '5', '9', '3')]
</snippet></ROW><ROW><id>19725181</id><snippet>AttachThreadInput</snippet></ROW><ROW><id>19725181</id><snippet>import win32gui
import win32process
import win32api

fg_win = win32gui.GetForegroundWindow()
fg_thread, fg_process = win32process.GetWindowThreadProcessId(fg_win)
current_thread = win32api.GetCurrentThreadId()
win32process.AttachThreadInput(current_thread, fg_thread, True)
try:
    print win32gui.GetCaretPos()
finally:
    win32process.AttachThreadInput(current_thread, fg_thread, False) #detach
</snippet></ROW><ROW><id>19725224</id><snippet>importlib</snippet></ROW><ROW><id>19725224</id><snippet>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; os = importlib.import_module('os')
&gt;&gt;&gt; os
&lt;module 'os' from '/usr/lib/python2.7/os.pyc'&gt;
</snippet></ROW><ROW><id>19725224</id><snippet>&gt;&gt;&gt; k = 'os'
&gt;&gt;&gt; import k
</snippet></ROW><ROW><id>19725224</id><snippet>k.py</snippet></ROW><ROW><id>19725224</id><snippet>k.pyc</snippet></ROW><ROW><id>19725224</id><snippet>os.py</snippet></ROW><ROW><id>19725350</id><snippet>object.__new__</snippet></ROW><ROW><id>19725350</id><snippet>__new__</snippet></ROW><ROW><id>19725350</id><snippet>__init__</snippet></ROW><ROW><id>19725350</id><snippet>object.__init__</snippet></ROW><ROW><id>19725350</id><snippet>__init__</snippet></ROW><ROW><id>19725350</id><snippet>__new__</snippet></ROW><ROW><id>19725350</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>19725350</id><snippet>__new__</snippet></ROW><ROW><id>19725350</id><snippet>__init__</snippet></ROW><ROW><id>19725350</id><snippet>__new__</snippet></ROW><ROW><id>19725350</id><snippet>super</snippet></ROW><ROW><id>19725350</id><snippet>object.__new__</snippet></ROW><ROW><id>19725350</id><snippet>super(A, cls).__new__ is object.__new__</snippet></ROW><ROW><id>19725350</id><snippet>if (excess_args(args, kwds) &amp;&amp;
    (type-&gt;tp_init == object_init || type-&gt;tp_new != object_new)) {
    PyErr_SetString(PyExc_TypeError, "object() takes no parameters");
    return NULL;
}
</snippet></ROW><ROW><id>19725350</id><snippet>object.__new__</snippet></ROW><ROW><id>19725416</id><snippet>&lt;Enter&gt;</snippet></ROW><ROW><id>19725416</id><snippet>&lt;1&gt;</snippet></ROW><ROW><id>19725416</id><snippet>&lt;FocusIn&gt;</snippet></ROW><ROW><id>19725470</id><snippet>boundingRect</snippet></ROW><ROW><id>19725470</id><snippet>boundingRect</snippet></ROW><ROW><id>19725470</id><snippet>self.pos()</snippet></ROW><ROW><id>19725470</id><snippet>def boundingRect(self):
  return QRectF(-self.penWidth / 2, -self.penWidth / 2, 
                self.width + self.penWidth, self.height + self.penWidth)
</snippet></ROW><ROW><id>19725580</id><snippet>input</snippet></ROW><ROW><id>19725580</id><snippet>&gt;&gt;&gt; input("?")
?&gt;? 1 + 1
2
</snippet></ROW><ROW><id>19725580</id><snippet>raw_input</snippet></ROW><ROW><id>19725580</id><snippet>input</snippet></ROW><ROW><id>19725580</id><snippet>TF</snippet></ROW><ROW><id>19725580</id><snippet>if</snippet></ROW><ROW><id>19725580</id><snippet>True</snippet></ROW><ROW><id>19725580</id><snippet>hello world</snippet></ROW><ROW><id>19725580</id><snippet>if user_input in DB
</snippet></ROW><ROW><id>19725580</id><snippet>user_input</snippet></ROW><ROW><id>19725580</id><snippet>for i in DB:</snippet></ROW><ROW><id>19725580</id><snippet>in</snippet></ROW><ROW><id>19725580</id><snippet>DB = {'ICMP': 'internet control message protocol', 'RIP': 'RIP Description',
      'ipv4': 'Internet protocol v4', 'ipv6': 'IP version 6'}


if __name__ == '__main__':
    # Running loop
    while True:
        # Taking user input
        user_input = raw_input("Please enter a protocol, press Q to quit")

        # If the input is Q, then we break the loop
        if user_input == 'Q':
            break

        # If the value of user_input is inside DB, then we print it
        if user_input in DB:
            print DB[user_input]
        # Else, we ask the user to add a description, and add it to our dictionary
        else:
            user_value = raw_input("Please enter a value for your new protocol")
            # Adding to dictionary using the update method
            DB.update({user_input: user_value})
</snippet></ROW><ROW><id>19725722</id><snippet>pip</snippet></ROW><ROW><id>19725722</id><snippet>zc.buildout</snippet></ROW><ROW><id>19725722</id><snippet>pip</snippet></ROW><ROW><id>19725722</id><snippet>requirements.txt</snippet></ROW><ROW><id>19725722</id><snippet>zc.buildout</snippet></ROW><ROW><id>19725722</id><snippet>.cfg</snippet></ROW><ROW><id>19725763</id><snippet>T1 = input("First side of triangle:  ")
T2 = input("Second side of triangle:  ")
addi = T1 + T2
suub = T1 - T2
T3 = input("Third side of triangle:  ")
    tyy = 1 \ Identation does not work
else tyy == 0 # else requires a : at the end of the line and an if before it it never has a condition. use elif instead of else: if ...:
    if T3 &lt; suub:
pss == 1 # you mus ident behind every :
    else pss = 0 # this is ok but : missing
if tyy + pss == 2: # there mus be something behind it.
</snippet></ROW><ROW><id>19725763</id><snippet>T1 = input("First side of triangle:  ")
T2 = input("Second side of triangle:  ")
addi = T1 + T2
suub = T1 - T2
T3 = input("Third side of triangle:  ")
tyy = 1
if False: pass # if before else
elif tyy == 0:
    if T3 &lt; suub:
        # should it be pss = 1 ?
        pss == 1 # this is in the if clause
    else: pss = 0
if tyy + pss == 2:
    pass # do something
</snippet></ROW><ROW><id>19725771</id><snippet>$inc</snippet></ROW><ROW><id>19725771</id><snippet>db[dbName].update( { 'pId' : publisher, 'oId' : offer.id },  {"$inc" : {'payout':1.22}}, True)
</snippet></ROW><ROW><id>19726078</id><snippet>data.columns = map(str.lower, data.columns)
</snippet></ROW><ROW><id>19726078</id><snippet>data.columns = [x.lower() for x in data.columns]
</snippet></ROW><ROW><id>19726078</id><snippet>&gt;&gt;&gt; data = pd.DataFrame({'A':range(3), 'B':range(3,0,-1), 'C':list('abc')})
&gt;&gt;&gt; data
   A  B  C
0  0  3  a
1  1  2  b
2  2  1  c
&gt;&gt;&gt; data.columns = map(str.lower, data.columns)
&gt;&gt;&gt; data
   a  b  c
0  0  3  a
1  1  2  b
2  2  1  c
</snippet></ROW><ROW><id>19726122</id><snippet>&gt;&gt;&gt; print '23' * 2
2323
</snippet></ROW><ROW><id>19726122</id><snippet>'23' + '23'</snippet></ROW><ROW><id>19726122</id><snippet>mul(2, int('23'))</snippet></ROW><ROW><id>19726122</id><snippet>'23'</snippet></ROW><ROW><id>19726122</id><snippet>23</snippet></ROW><ROW><id>19726122</id><snippet>operator</snippet></ROW><ROW><id>19726122</id><snippet>operator.mul(2, 23)
</snippet></ROW><ROW><id>19726143</id><snippet>serial</snippet></ROW><ROW><id>19726143</id><snippet>   """CREATE TABLE  sample (
       id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ,
       test real)"""
</snippet></ROW><ROW><id>19726160</id><snippet>unittest</snippet></ROW><ROW><id>19726160</id><snippet>Python Integrated Tools</snippet></ROW><ROW><id>19726160</id><snippet>Unittest</snippet></ROW><ROW><id>19726160</id><snippet>"Run Unittests in test.py"</snippet></ROW><ROW><id>19726177</id><snippet>self.finish()</snippet></ROW><ROW><id>19726177</id><snippet>on_message()</snippet></ROW><ROW><id>19726177</id><snippet>def on_message(self,msg):
    if msg.kind == 'message':

        self.finish(dict(complete=True,message=msg.body))

        self.client.unsubscribe('notification')
        self.client.disconnect()
</snippet></ROW><ROW><id>19726305</id><snippet>:set tabstop=8 shiftwidth=4 softtabstop=4 expandtab
</snippet></ROW><ROW><id>19726305</id><snippet>autocmd FileType python setlocal ts=8 sw=4 sts=4 et
</snippet></ROW><ROW><id>19726305</id><snippet>let g:pyindent_continue = '&amp;shiftwidth'
</snippet></ROW><ROW><id>19726305</id><snippet>'shiftwidth()'</snippet></ROW><ROW><id>19726305</id><snippet>'&amp;shiftwidth'</snippet></ROW><ROW><id>19726305</id><snippet>:h ft-python-indent</snippet></ROW><ROW><id>19726311</id><snippet>import json
import re

def parse(v):
    # Remove newlines and replace "=" with ":"
    v1 =  v.replace('=', ':').replace("\n", "")
    # Enclose strings in double quotes
    v2 = re.sub(r'(\d*[a-zA-Z][a-zA-Z0-9]*)', r'"\g&lt;1&gt;"', v1)
    # If you want booleans
    v3 = re.sub(r'"(true|false)"', r'\g&lt;1&gt;', v2)
    # Create lists
    return json.loads(re.sub(r"{([^:]+)}", r'[\g&lt;1&gt;]', v3))
</snippet></ROW><ROW><id>19726348</id><snippet>x</snippet></ROW><ROW><id>19726348</id><snippet>x</snippet></ROW><ROW><id>19726648</id><snippet># first extract precipitation data for later use
precipitation = [data[i][1] for i in xrange(0, rows)]

# then test the range (i, i+m)
all_dry = all([(data==0) for data in precipitation[i:i+m]])
all_wet = not any([(data==0) for data in precipitation[i:i+m]])
# of course you can also use
all_wet = all([(data&gt;0) for data in precipitation[i:i+m]])
</snippet></ROW><ROW><id>19726648</id><snippet># still extract precipitation data for later use first
precipitation = [data[i][1] for i in xrange(0, rows)]

# let's start our calculations by counting the longest consecutive dry days 
consecutive_dry = [1 if data == 0 else 0 for data in precipitation]
for i in xrange(1, len(consecutive_dry))
    if consecutive_dry[i] == 1:
        consecutive_dry[i] += consecutive_dry[i - 1]

# then you will see, if till day i there're m consecutive dry days, then:
consecutive_dry[i] &gt;= m    # here is the test

# ...and it would be same for wet day testings.
</snippet></ROW><ROW><id>19726648</id><snippet>import numpy as np
data = np.loadtxt('Data Series.txt', usecols=(1,3))
dry = np.zeros(12)
wet = np.zeros(12)

rows,cols = data.shape #reading number of rows and columns into variables

# prepare 
precipitation = [data[i][1] for i in xrange(0, rows)]

# collecting data for consecutive dry days
consecutive_dry = [1 if data == 0 else 1 for data in precipitation]
for i in xrange(1, len(consecutive_dry))
    if consecutive_dry[i] == 1:
        consecutive_dry[i] += consecutive_dry[i - 1]

# ...and for wet days
consecutive_wet = [1 if data &gt; 0 else 0 for data in precipitation]
for i in xrange(1, len(consecutive_wet))
    if consecutive_wet[i] == 1:
        consecutive_wet[i] += consecutive_wet[i - 1]

# set your day range here. 
day_range = 3

for i in xrange (0,rows):
    if consecutive_dry[i] &gt;= day_range:
        month_id = data[i,0]
        dry[month_id - 1] += 1
    if consecutive_wet[i] &gt;= day_range:
        month_id = data[i,0]
        wet[month_id - 1] += 1

print '3 Days Dry Spell\n', dry
print '3 Days Wet Spell\n', wet
</snippet></ROW><ROW><id>19726764</id><snippet>plt.show()</snippet></ROW><ROW><id>19726764</id><snippet>plt.savefig('foo.png')</snippet></ROW><ROW><id>19726764</id><snippet>&gt;&gt;&gt; import matplotlib
&gt;&gt;&gt; matplotlib.get_backend()
'Qt4Agg'
</snippet></ROW><ROW><id>19726764</id><snippet>pip install matplotlib</snippet></ROW><ROW><id>19726856</id><snippet>raid_teams = Team.objects.filter(
    Q(tanks__id=profile.pk) |
    Q(healers__id=profile.pk) | 
    Q(dps__id=profile.pk)
)
</snippet></ROW><ROW><id>19727019</id><snippet>np.digitize</snippet></ROW><ROW><id>19727019</id><snippet>&gt;&gt;&gt; def round_to_sequence(arr, seq):
...     rnd_thresholds = np.add(seq[:-1], seq[1:]) / 2
...     arr = np.asarray(arr)
...     idx = np.digitize(arr.ravel(), rnd_thresholds).reshape(arr.shape)
...     return np.take(seq, idx)
... 
&gt;&gt;&gt; round_to_sequence([[0.14, 0.18], [0.20, 0.27]],
...                   [0, 0.05, 0.2, 0.33, 0.5])
array([[ 0.2 ,  0.2 ],
       [ 0.2 ,  0.33]])
</snippet></ROW><ROW><id>19727019</id><snippet>np.add</snippet></ROW><ROW><id>19727019</id><snippet>seq[:-1] + seq[1:]</snippet></ROW><ROW><id>19727019</id><snippet>&gt;&gt;&gt; seq = [0, 0.05, 0.2, 0.33, 0.5]
&gt;&gt;&gt; rnd_threshold = np.add(seq[:-1], seq[1:]) / 2
&gt;&gt;&gt; rnd_threshold
array([ 0.025,  0.125,  0.265,  0.415])
</snippet></ROW><ROW><id>19727019</id><snippet>np.digitize</snippet></ROW><ROW><id>19727019</id><snippet>np.digitize</snippet></ROW><ROW><id>19727019</id><snippet>.ravel</snippet></ROW><ROW><id>19727019</id><snippet>.reshape</snippet></ROW><ROW><id>19727019</id><snippet>right</snippet></ROW><ROW><id>19727019</id><snippet>&gt;&gt;&gt; arr = np.array([[0.14, 0.18], [0.20, 0.27]])
&gt;&gt;&gt; idx = np.digitize(arr.ravel(), seq).reshape(arr.shape)
&gt;&gt;&gt; idx
array([[2, 2],
       [3, 3]], dtype=int64)
</snippet></ROW><ROW><id>19727019</id><snippet>idx</snippet></ROW><ROW><id>19727019</id><snippet>seq[idx]</snippet></ROW><ROW><id>19727019</id><snippet>np.take</snippet></ROW><ROW><id>19727019</id><snippet>&gt;&gt;&gt; np.take(seq, idx)
array([[ 0.2 ,  0.2 ],
       [ 0.33,  0.33]])
</snippet></ROW><ROW><id>19727094</id><snippet>TypeError</snippet></ROW><ROW><id>19727094</id><snippet>another_file</snippet></ROW><ROW><id>19727094</id><snippet>return another_file.another_def(text, th)
</snippet></ROW><ROW><id>19727115</id><snippet>any()</snippet></ROW><ROW><id>19727115</id><snippet>if any(s in item for item in L):
    print 'string was found!'
</snippet></ROW><ROW><id>19727115</id><snippet>any()</snippet></ROW><ROW><id>19727115</id><snippet>any()</snippet></ROW><ROW><id>19727115</id><snippet>s in item</snippet></ROW><ROW><id>19727115</id><snippet>retVal = True</snippet></ROW><ROW><id>19727115</id><snippet>return True</snippet></ROW><ROW><id>19727115</id><snippet>str</snippet></ROW><ROW><id>19727115</id><snippet>list</snippet></ROW><ROW><id>19727249</id><snippet>Profile</snippet></ROW><ROW><id>19727249</id><snippet>from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.OneToOneField(User)
    ...
</snippet></ROW><ROW><id>19727249</id><snippet>AUTH_PROFILE_MODULE = 'application.Profile.
</snippet></ROW><ROW><id>19727249</id><snippet>Profile</snippet></ROW><ROW><id>19727249</id><snippet>request.user.get_profile()</snippet></ROW><ROW><id>19727426</id><snippet>site = urllib.urlopen("http://python.org")
meta = site.info()
print meta.getheaders("Content-Length")
</snippet></ROW><ROW><id>19727426</id><snippet>r = requests.get("http://python.org")
r.headers["Content-Length"]
</snippet></ROW><ROW><id>19727626</id><snippet>socket.SOCK_DGRAM</snippet></ROW><ROW><id>19727626</id><snippet>socket.SOCK_STREAM</snippet></ROW><ROW><id>19727626</id><snippet>AF_INET</snippet></ROW><ROW><id>19727626</id><snippet>AF_INET6</snippet></ROW><ROW><id>19727701</id><snippet>xkcd</snippet></ROW><ROW><id>19727714</id><snippet>f = open("events.csv", "r")

carets_per_record = 33

final_file = []
temp_file  = []
temp_str   = ''
temp_cnt   = 0

building   = False

for i, line in enumerate(f):

    # If there are no carets on the line, we are building a string
    if line.count('^') == 0:
        building = True

    # If we are not building a string, then set temp_str equal to the line
    if building is False:
        temp_str = line
    else:
        temp_str = temp_str + " " + line

    # Count the number of carets on the line
    temp_cnt = temp_str.count('^')

    # If we do not have the proper number of carets, then we are building
    if temp_cnt &lt; carets_per_record:
        building = True

    # If we do have the proper number of carets, then we are finished
    # and we can push this line to the list
    elif temp_cnt == carets_per_record:
        building = False
        temp_file.append(temp_str)

# Strip embedded newline characters from the temp file
for i, item in enumerate(temp_file):
    final_file.append(temp_file[i].replace('\n', ''))

# Write the final_file list out to a csv final_file
g = open("new_events.csv", "wb")


# Write the lines back to the file
for item in enumerate(final_file):
    # item is a tuple, so we get the content part and append a new line
     g.write(item[1] + '\n')

# Close the files we were working with
f.close()
g.close()
</snippet></ROW><ROW><id>19727718</id><snippet>from collections import namedtuple

Candidate = namedtuple('Candidate', ['start', 'subseq_index', 'dist'])
Match = namedtuple('Match', ['start', 'end', 'dist'])

def find_near_matches(subsequence, sequence, max_l_dist=0):
    prev_char = None
    candidates = []
    for index, char in enumerate(sequence):
        for skip in range(min(max_l_dist+1, len(subsequence))):
            candidates.append(Candidate(index, skip, skip))
            if subsequence[skip] == prev_char:
                break
        new_candidates = []
        for cand in candidates:
            if char == subsequence[cand.subseq_index]:
                if cand.subseq_index + 1 == len(subsequence):
                    yield Match(cand.start, index + 1, cand.dist)
                else:
                    new_candidates.append(cand._replace(
                        subseq_index=cand.subseq_index + 1,
                    ))
            else:
                if cand.dist == max_l_dist or cand.subseq_index == 0:
                    continue
                # add a candidate skipping a sequence char
                new_candidates.append(cand._replace(dist=cand.dist + 1))
                # try skipping subsequence chars
                for n_skipped in range(1, max_l_dist - cand.dist + 1):
                    if cand.subseq_index + n_skipped == len(subsequence):
                        yield Match(cand.start, index + 1, cand.dist + n_skipped)
                        break
                    elif subsequence[cand.subseq_index + n_skipped] == char:
                        # add a candidate skipping n_skipped subsequence chars
                        new_candidates.append(cand._replace(
                            dist=cand.dist + n_skipped,
                            subseq_index=cand.subseq_index + n_skipped,
                        ))
                        break
        candidates = new_candidates
        prev_char = char
</snippet></ROW><ROW><id>19727718</id><snippet>&gt;&gt;&gt; list(find_near_matches('bde', 'abcdefg', 0))
[]
&gt;&gt;&gt; list(find_near_matches('bde', 'abcdefg', 1))
[Match(start=1, end=5, dist=1), Match(start=3, end=5, dist=1)]
&gt;&gt;&gt; list(find_near_matches('cde', 'abcdefg', 0))
[Match(start=2, end=5, dist=0)]
&gt;&gt;&gt; list(find_near_matches('cde', 'abcdefg', 1))
[Match(start=2, end=5, dist=0)]
&gt;&gt;&gt; match = _[0]
&gt;&gt;&gt; 'abcdefg'[match.start:match.end]
'cde'
</snippet></ROW><ROW><id>19727718</id><snippet>fuzzysearch</snippet></ROW><ROW><id>19727718</id><snippet>find_near_matches_with_ngrams()</snippet></ROW><ROW><id>19727762</id><snippet>import hashlib
import random
import string

def hash_short(url):
     return hashlib.sha1(url).hexdigest()[:10]

hashes = dict()
while True:
    if len(hashes) % 10000 == 0:
        print len(hashes)
    newurl = ''.join(random.choice(string.lowercase) for _ in xrange(30))
    newhash = hash_short(newurl)
    if newhash in hashes and newurl != hashes[newhash]:
        print 'found a collision!'
        print newhash
        print newurl
        print hashes[newhash]
        print len(hashes)
        break
    hashes[newhash] = newurl
</snippet></ROW><ROW><id>19727762</id><snippet>...
770000
780000
found a collision!
216be03ec7
txnbkwrfkpkmiexloxrifdsnjumkex
xlnmlhobtsswjvmqnjupaybkspptpo
780758
</snippet></ROW><ROW><id>19727762</id><snippet>2**40</snippet></ROW><ROW><id>19727762</id><snippet>(99999.0/100000) ** 10 million</snippet></ROW><ROW><id>19727762</id><snippet>3.7e-44</snippet></ROW><ROW><id>19727762</id><snippet>(999999.0 / 1000000) ** 9000000</snippet></ROW><ROW><id>19727762</id><snippet>1e-20</snippet></ROW><ROW><id>19727862</id><snippet>__contains__</snippet></ROW><ROW><id>19727862</id><snippet>__iter__</snippet></ROW><ROW><id>19727862</id><snippet>__eq__</snippet></ROW><ROW><id>19727862</id><snippet>in</snippet></ROW><ROW><id>19727862</id><snippet>in</snippet></ROW><ROW><id>19727862</id><snippet>in</snippet></ROW><ROW><id>19727862</id><snippet>__contains__</snippet></ROW><ROW><id>19727862</id><snippet>__iter__</snippet></ROW><ROW><id>19727862</id><snippet>__contains__</snippet></ROW><ROW><id>19727862</id><snippet>__eq__</snippet></ROW><ROW><id>19728212</id><snippet>a[++j]=*pr++;
</snippet></ROW><ROW><id>19728212</id><snippet>a[j+1] 
</snippet></ROW><ROW><id>19728212</id><snippet>j += 1
</snippet></ROW><ROW><id>19728271</id><snippet>app.secret_key</snippet></ROW><ROW><id>19728389</id><snippet>import requests

var = requests.get(r'http://www.google.com/search?q="stackoverflow"&amp;btnI')
print var.url
</snippet></ROW><ROW><id>19728391</id><snippet>ciel(.00000055) = 1</snippet></ROW><ROW><id>19728391</id><snippet>eN</snippet></ROW><ROW><id>19728391</id><snippet>*10^N</snippet></ROW><ROW><id>19728391</id><snippet>5.5e-7</snippet></ROW><ROW><id>19728391</id><snippet>5.5*10^-7</snippet></ROW><ROW><id>19728398</id><snippet>"12ab"</snippet></ROW><ROW><id>19728398</id><snippet>"\x31\x32\x61\x62"</snippet></ROW><ROW><id>19728398</id><snippet>x</snippet></ROW><ROW><id>19728398</id><snippet>"0110001011001011000011100010"</snippet></ROW><ROW><id>19728398</id><snippet>\x30\x31\x31\x30\x30...\x30\x30\x31\x30"</snippet></ROW><ROW><id>19728398</id><snippet>&gt;&gt;&gt; hexstr = "12ab"
&gt;&gt;&gt; len(hexstr)
4
&gt;&gt;&gt; ['"%s": %x' % (c, ord(c)) for c in hexstr]
['"1": 31', '"2": 32', '"a": 61', '"b": 62']

&gt;&gt;&gt; i = 42
&gt;&gt;&gt; hex(i)
'0x2a'
&gt;&gt;&gt; x = '{0:07b}'.format(i)
&gt;&gt;&gt; x
'0101010'
&gt;&gt;&gt; [hex(ord(c)) for c in x]
['0x30', '0x31', '0x30', '0x31', '0x30', '0x31', '0x30']
&gt;&gt;&gt; hex(ord('0')), hex(ord('1'))
('0x30', '0x31')

&gt;&gt;&gt; import binascii
&gt;&gt;&gt; [hex(ord(c)) for c in binascii.unhexlify(hexstr)]
['0x12', '0xab']
</snippet></ROW><ROW><id>19728398</id><snippet>import binascii

data = binascii.unhexlify(hexstr)
with open('outputfile.bin', 'wb') as f:
    f.write(data)
</snippet></ROW><ROW><id>19728436</id><snippet>functools.partial</snippet></ROW><ROW><id>19728436</id><snippet>iter</snippet></ROW><ROW><id>19728436</id><snippet>&gt;&gt;&gt; from functools import partial
for i in iter(partial(next, iter(lst)), 'kdawg'):
        print i
...     
2
3
4
</snippet></ROW><ROW><id>19728436</id><snippet>iter</snippet></ROW><ROW><id>19728436</id><snippet>iter</snippet></ROW><ROW><id>19728436</id><snippet>&gt;&gt;&gt; p = partial(next, iter(lst))
&gt;&gt;&gt; p()
2
&gt;&gt;&gt; p()
3
&gt;&gt;&gt; p()
4
&gt;&gt;&gt; p()
'kdawg'
</snippet></ROW><ROW><id>19728436</id><snippet>i</snippet></ROW><ROW><id>19728436</id><snippet>class</snippet></ROW><ROW><id>19728436</id><snippet>for i in iter(foo,'kdawg'):
    print repr(i)
</snippet></ROW><ROW><id>19728436</id><snippet>&lt;__main__.foo instance at 0xa15286c&gt;
&lt;__main__.foo instance at 0xa15284c&gt;
&lt;__main__.foo instance at 0xa15286c&gt;
...
...
</snippet></ROW><ROW><id>19728598</id><snippet>db_transform_and_save</snippet></ROW><ROW><id>19728655</id><snippet>imshow</snippet></ROW><ROW><id>19728655</id><snippet>origin</snippet></ROW><ROW><id>19728655</id><snippet>a = np.array([0.313660827978, 0.365348418405, 0.423733120134, 
              0.365348418405, 0.439599930621, 0.525083754405, 
              0.423733120134, 0.525083754405, 0.651536351379]).reshape(3,3)

extent = [4,6,4,6]

fig, axs = plt.subplots(1,2)

axs[0].imshow(a, extent=extent, interpolation='none')
axs[1].imshow(a, origin='lower', extent=extent, interpolation='none')
</snippet></ROW><ROW><id>19728655</id><snippet>np.flipud</snippet></ROW><ROW><id>19728655</id><snippet>np.fliplr</snippet></ROW><ROW><id>19728692</id><snippet>DictWriter</snippet></ROW><ROW><id>19728692</id><snippet>DictWriter</snippet></ROW><ROW><id>19728692</id><snippet>csv.writer</snippet></ROW><ROW><id>19728692</id><snippet>my_data = {'time, s': [0,1,2,3], 'x temp, C':[0,10,20,30],
 'x pressure, kPa': [0,100,200,300]}
import csv
with open('outfile.csv', 'w') as outfile:
   writer = csv.writer(outfile)
   writer.writerow(my_data.keys())
   writer.writerows(zip(*my_data.values()))
</snippet></ROW><ROW><id>19728692</id><snippet>   writer.writerow(sorted(my_data.keys()))
   writer.writerows(zip(*(my_data[k] for k in sorted(my_data.keys()))))
</snippet></ROW><ROW><id>19728720</id><snippet>print get_mean[1, 2, 3]
</snippet></ROW><ROW><id>19728720</id><snippet>TypeError: unsupported operand type(s) for +: 'float' and 'list'</snippet></ROW><ROW><id>19728720</id><snippet>args</snippet></ROW><ROW><id>19728720</id><snippet>[[1, 2, 3]]</snippet></ROW><ROW><id>19728720</id><snippet>print get_mean([1, 2, 3])
</snippet></ROW><ROW><id>19728720</id><snippet>*</snippet></ROW><ROW><id>19728720</id><snippet>print get_mean(1, 2, 3)
print get_mean(*[1, 2, 3])
#2.0
#2.0
</snippet></ROW><ROW><id>19728730</id><snippet>${float(node['slowcall_count']) / float(s['slowcall_count']) }
</snippet></ROW><ROW><id>19728911</id><snippet>erg</snippet></ROW><ROW><id>19728911</id><snippet>dict</snippet></ROW><ROW><id>19728911</id><snippet>erg = {}
allstrings = ['str1','str2','str3','str4']
userkeywords = set(['teststring','awesome','test','string'])
for strs in allstrings:
    strkeywords = params[strs].split()
    #len() works on sets too, no need to convert this to a list
    common = len( userkeywords &amp; set(strkeywords) )
    erg[str] = common

for k in sorted(erg, key=erg.get, reverse=True):
    print k, ':', erg[k]
</snippet></ROW><ROW><id>19728911</id><snippet>str2 : 2
str4 : 2
str3 : 1
str1 : 0
</snippet></ROW><ROW><id>19729186</id><snippet>import cv2
import numpy as np

im = cv2.imread('holes2.jpg')

gray=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
gray=cv2.threshold(gray,20,255,cv2.THRESH_BINARY)[1]
cv2.imshow('gray',gray)

contours,hierarchy = cv2.findContours(gray,cv2.RETR_LIST ,cv2.CHAIN_APPROX_SIMPLE   )

for cnt in contours:
    area = cv2.contourArea(cnt)
    if area&lt;400:
        cv2.drawContours(im,[cnt],0,(255,0,0),2)

cv2.imshow('im',im)
cv2.waitKey()
</snippet></ROW><ROW><id>19729209</id><snippet>isinstance()</snippet></ROW><ROW><id>19729209</id><snippet>type(ob) ==</snippet></ROW><ROW><id>19729209</id><snippet>def nestedListContains(NL, target):
    for value in NL:
        if isinstance(value, int):
            test = value == target
        else:
            # value is not an int, so it's a list
            test = nestedListContains(value, target)
        if test:
            return True  # found target

    return False  # We finished the loop without finding target
</snippet></ROW><ROW><id>19729209</id><snippet>def nested_list_contains(nested_list, target):
    try:
        for value in nested_list:
            if nested_list_contains(value, target):
                return True
        return False
    except TypeError:
        # It's a single value
        return nested_list == target
</snippet></ROW><ROW><id>19729209</id><snippet>def flatten_nested_list(nested_list):
    try:
        for v in nested_list:
            for flattened in flatten_nested_list(v):
                yield flatten
    except TypeError:
        yield nested_list

def nested_list_contains(nested_list, target):
    return target in flatten_nested_list(nested_list)
</snippet></ROW><ROW><id>19729323</id><snippet>“bonjour”</snippet></ROW><ROW><id>19729323</id><snippet>"bonjour"</snippet></ROW><ROW><id>19729323</id><snippet>~/coding$ python2.7 hello.py 
  File "hello.py", line 4
    hello=“bonjour”
          ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19729323</id><snippet>"</snippet></ROW><ROW><id>19729323</id><snippet>"</snippet></ROW><ROW><id>19729324</id><snippet>clip</snippet></ROW><ROW><id>19729324</id><snippet>out_arr_clip = Image.fromarray(arr.clip(0,255).astype('uint8'), 'RGB')
</snippet></ROW><ROW><id>19729324</id><snippet>arr = np.asarray(img, dtype=float)   # also simplified
value = math.floor(255*float(50)/100)
arr += value                           # the same as doing this in three separate lines
</snippet></ROW><ROW><id>19729324</id><snippet>value</snippet></ROW><ROW><id>19729324</id><snippet>percentages = np.array([25., 50., 75.])
values = np.floor(255*percentages/100)
arr += values   # the first will be added to the first channel, etc.
</snippet></ROW><ROW><id>19729530</id><snippet>center</snippet></ROW><ROW><id>19729530</id><snippet>from collections import namedtuple
center = namedtuple('center', ['x', 'y'], verbose=True)
center = center(x=3,y=4)
t_shape = T_Shape(center)
</snippet></ROW><ROW><id>19729594</id><snippet>jQuery(function ($) {
    $("#process_button").click(function () {
        //create an array of checked checkbox ids
        var ids = $('.css-checkbox_latest:checked').map(function (index) {
            return this.id;
        }).get();

        //if nothing is selected alert the user and stop further processing
        if (!ids.length) {
            alert('nothing is selected')
            return;
        }

        //send a request to server using an ajax POST request, it will contains an array of parameters called ids
        $.ajax({
            url: '&lt;url&gt;',
            type: 'POST',
            data: {
                ids: ids
            }
        })
    });
});
</snippet></ROW><ROW><id>19729657</id><snippet>&gt;&gt;&gt; blah = np.array(submatrix.shape, dtype = float) / dpi
&gt;&gt;&gt; dir(blah)
</snippet></ROW><ROW><id>19729657</id><snippet>height, width</snippet></ROW><ROW><id>19729657</id><snippet>blah = np.array(submatrix.shape, dtype = float) / dpi
height, width = blah
</snippet></ROW><ROW><id>19729770</id><snippet>python -c 'import os; print os.environ["PATH"]'
</snippet></ROW><ROW><id>19729770</id><snippet>echo 'import os; print os.environ['PATH']'
</snippet></ROW><ROW><id>19729770</id><snippet>PATH</snippet></ROW><ROW><id>19729770</id><snippet>import os; print os.environ[
PATH
]
</snippet></ROW><ROW><id>19729770</id><snippet>PATH</snippet></ROW><ROW><id>19729770</id><snippet>man bash</snippet></ROW><ROW><id>19729956</id><snippet>l.sort(key=lambda t: len(t[1]), reverse=True)
</snippet></ROW><ROW><id>19729956</id><snippet>list</snippet></ROW><ROW><id>19729976</id><snippet>"</snippet></ROW><ROW><id>19729976</id><snippet>'</snippet></ROW><ROW><id>19729976</id><snippet>json</snippet></ROW><ROW><id>19729976</id><snippet>from __future__ import print_function
import json

response = """{
    'ok': 1.0, 
    'result': [
        {
            'total': 142250.0, 
            '_id': 'BC'
        }, 
        {
            'total': 210.88999999999996,
             '_id': 'USD'
        }, 

        {
            'total': 1065600.0, 
            '_id': 'TK'
        }
        ]
}"""

# JSON requires double-quotes, not single-quotes.
response = response.replace("'", '"')
response = json.loads(response)
for doc in response['result']:
    print(doc['_id'], doc['total'])
</snippet></ROW><ROW><id>19729996</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>19730007</id><snippet>!=</snippet></ROW><ROW><id>19730007</id><snippet>&lt;</snippet></ROW><ROW><id>19730007</id><snippet>fruits = ['apple#1', 'apple#2', 'apple#3', 'apple#4']
[(f1, f2) for f1 in fruits for f2 in fruits if f1 != f2]
</snippet></ROW><ROW><id>19730007</id><snippet>fruits = ['apple#1', 'apple#2', 'apple#3', 'apple#4']
[(f1, f2) for f1 in fruits for f2 in fruits if f1 &lt; f2]
</snippet></ROW><ROW><id>19730007</id><snippet>fruits1 = ['apple#1', 'apple#2', 'apple#3', 'apple#4']
fruits2 = ['apple#1', 'apple#2', 'apple#3', 'apple#4', 'orange#1', 'orange#2']
</snippet></ROW><ROW><id>19730007</id><snippet>[(f1, f2) for f1 in fruits1 for f2 in fruits2 if f1 &lt; f2]
</snippet></ROW><ROW><id>19730049</id><snippet>QueryDict.getlist</snippet></ROW><ROW><id>19730049</id><snippet>request.GET.getlist('ids[]', None)
</snippet></ROW><ROW><id>19730095</id><snippet>batchsd</snippet></ROW><ROW><id>19730095</id><snippet>pymc.database.base</snippet></ROW><ROW><id>19730095</id><snippet>pymc.diagnostics</snippet></ROW><ROW><id>19730322</id><snippet>import copy
def myfunc(x1,x2, ... ,x10):                 # list
    ... 
    matrix operation on copy.deepcopy(x1), copy.deepcopy(x2) ..., copy.deepcopy(x10)      
    ...
    return X      

B = myfunc(a,b,c,d...)
</snippet></ROW><ROW><id>19730325</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>19730325</id><snippet>print()</snippet></ROW><ROW><id>19730325</id><snippet>stdout</snippet></ROW><ROW><id>19730325</id><snippet>with</snippet></ROW><ROW><id>19730344</id><snippet>import serial
ser = serial.Serial("COM5", 9600)
</snippet></ROW><ROW><id>19730555</id><snippet>ElementTree</snippet></ROW><ROW><id>19730555</id><snippet>cssselect</snippet></ROW><ROW><id>19730555</id><snippet>HtmlElement</snippet></ROW><ROW><id>19730555</id><snippet>ElementTree.getroot</snippet></ROW><ROW><id>19730555</id><snippet>HtmlElement</snippet></ROW><ROW><id>19730555</id><snippet>r = html.parse(start_url).getroot()
</snippet></ROW><ROW><id>19730769</id><snippet>print (mainR+'0')[:mainR.find('.')+3]
</snippet></ROW><ROW><id>19730907</id><snippet>__metaclass__</snippet></ROW><ROW><id>19730907</id><snippet>class D(object):
    def __metaclass__(name, bases, dct):
        for attr in meta_attrs:  
            dct[attr] = attr.upper()
        return type(name, bases, dct)
</snippet></ROW><ROW><id>19730907</id><snippet>locals()</snippet></ROW><ROW><id>19730939</id><snippet>n = 9010

int(str(n)[-2:])
=&gt; 10
</snippet></ROW><ROW><id>19730983</id><snippet>None</snippet></ROW><ROW><id>19731016</id><snippet>deck = [(cardval,suitval) for suitval in range(4) for cardval in range(13)] 
deck.shuffle()
</snippet></ROW><ROW><id>19731016</id><snippet>class Card:
    def __init__(self,cardval,suitval):
       self.cardval = cardval
       self.suitval = suitval
    def __str__(self):
       return "%s of %s"%(rankName[self.cardval],suitName[self.suitval])
    def __repr__(self):
       return "Card &lt;%s&gt;"%self

print Card(0,2) #prints "ace of Spades"
deck = [Card(cardval,suitval) for suitval in range(4) for cardval in range(13)] 
print deck
</snippet></ROW><ROW><id>19731140</id><snippet>&lt;table&gt;
{% for ds in data_streams %}
   &lt;tr&gt;
      &lt;td&gt;
          {% ds.category %}
      &lt;/td&gt;
      &lt;td&gt;
          {% for subcat in ds.datastreamsubsategory_set.all %}
               {{subcat.sub_category}}
          {% endfor %}
      &lt;/td&gt;
      &lt;td&gt;
          {% for example in ds.datastreamexample_set.all %}
               {{example.example}}
          {% endfor %}
      &lt;/td&gt;
{% empty %}
   &lt;tr&gt;&lt;td colspan="3"&gt;No categories found&lt;/td&gt;&lt;/tr&gt;
{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>19731140</id><snippet>{'data_streams': data_streams}</snippet></ROW><ROW><id>19731140</id><snippet>object.lowercasemodelname_set.all()</snippet></ROW><ROW><id>19731140</id><snippet>related_name</snippet></ROW><ROW><id>19731140</id><snippet>lowercasemodelname_set</snippet></ROW><ROW><id>19731140</id><snippet>prefetch_related</snippet></ROW><ROW><id>19731163</id><snippet>next()</snippet></ROW><ROW><id>19731163</id><snippet>tell()</snippet></ROW><ROW><id>19731163</id><snippet>tell()</snippet></ROW><ROW><id>19731163</id><snippet>readline()</snippet></ROW><ROW><id>19731163</id><snippet>tell()</snippet></ROW><ROW><id>19731163</id><snippet>readline()</snippet></ROW><ROW><id>19731163</id><snippet>for line in file_object:</snippet></ROW><ROW><id>19731163</id><snippet>line = self.fh.readline()
while line:
    if p.search(line):
        self.porSnipStartFPtr = self.fh.tell()
        sys.stdout.write("found regPorSnip")
    line = fh.readline()
</snippet></ROW><ROW><id>19731163</id><snippet>tell()</snippet></ROW><ROW><id>19731163</id><snippet>pos = self.fh.tell()
line = self.fh.readline()
while line:
    if p.search(line):
        self.porSnipStartFPtr = pos
        sys.stdout.write("found regPorSnip")
    pos = self.fh.tell()
    line = fh.readline()
</snippet></ROW><ROW><id>19731163</id><snippet>while True:
    pos = self.fh.tell()
    line = self.fh.readline()
    if not line:
        break
    if p.search(line):
        self.porSnipStartFPtr = pos
        sys.stdout.write("found regPorSnip")
</snippet></ROW><ROW><id>19731269</id><snippet>db.col.find({"subitems.subitem_id" : Objectid(id)})</snippet></ROW><ROW><id>19731269</id><snippet>a = ObjectId("5273e7d989800e7f4959526a")
db.m.insert({"subitems": [{"subitem_id":a},
                          {"subitem_id":ObjectId()}]})
db.m.insert({"subitems": [{"subitem_id":ObjectId()},
                          {"subitem_id":ObjectId()}]})
db.m.find({"subitems.subitem_id" : a })

&gt;&gt;&gt; { "_id" : ObjectId("5273e8e189800e7f4959526d"), 
"subitems" : 
[
 {"subitem_id" : ObjectId("5273e7d989800e7f4959526a") },    
 {"subitem_id" : ObjectId("5273e8e189800e7f4959526c")} 
]}
</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>couplepgcd</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>True</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>pgcd = False
while pgcd == False:
    [...]
    pgcd = couplepgcd()
</snippet></ROW><ROW><id>19731335</id><snippet>global</snippet></ROW><ROW><id>19731335</id><snippet>pgcd</snippet></ROW><ROW><id>19731335</id><snippet>while</snippet></ROW><ROW><id>19731335</id><snippet>nonlocal</snippet></ROW><ROW><id>19731335</id><snippet>def couplepgcd():
    global pgcd
    try:
        assert gcd(a,26) == 1 
    except Exception:
        print("a et 26 doivent être premiers entre eux !")
</snippet></ROW><ROW><id>19731335</id><snippet>def couplepgcd(pgcd):
    try:
        assert gcd(a,26) == 1 
        pgcd[0] = True
    except Exception:
        print("a et 26 doivent être premiers entre eux !")

pgcd = [False]
while not pgcd[0]:
    [...]
    couplepgcd(pgcd)
</snippet></ROW><ROW><id>19731342</id><snippet>lenght = length*float(self.l[0])
</snippet></ROW><ROW><id>19731342</id><snippet>xxx.length</snippet></ROW><ROW><id>19731342</id><snippet>xxx</snippet></ROW><ROW><id>19731342</id><snippet>length</snippet></ROW><ROW><id>19731465</id><snippet>repr</snippet></ROW><ROW><id>19731465</id><snippet>   MutNum(42) &gt; MutNum(3)
=&gt; MutNum(42).__gt__(MutNum(3))
=&gt; MutNum(42).val &gt; MutNum(3)
=&gt; 42 &gt; MutNum(3)
</snippet></ROW><ROW><id>19731476</id><snippet>config.txt</snippet></ROW><ROW><id>19731476</id><snippet>subprocess</snippet></ROW><ROW><id>19731476</id><snippet>from subprocess import call

call('color a', shell=True) #this sets the color to light green
print('The quick brown fox jumps over the lazy dog.')
</snippet></ROW><ROW><id>19731476</id><snippet>for</snippet></ROW><ROW><id>19731476</id><snippet>print</snippet></ROW><ROW><id>19731476</id><snippet>color 'background ID''text ID'</snippet></ROW><ROW><id>19731476</id><snippet>import time
from subprocess import call

for color in('a', 'e', 'c'): #cycles through different colours
    call('cls', shell=True) #clears the screen
    call('color ' + color, shell=True)
    print('The quick brown fox jumps over the lazy dog.')
    time.sleep(1)

input("\nPress enter to exit. ")
</snippet></ROW><ROW><id>19731559</id><snippet>QuerySet</snippet></ROW><ROW><id>19731559</id><snippet>johnny.signals.qc_hit</snippet></ROW><ROW><id>19731559</id><snippet>johnny.signals.qc_miss</snippet></ROW><ROW><id>19731559</id><snippet>from django.db import models

class TestModel(models.Model):
    prop_a = models.TextField()
    prop_b = models.TextField()

    def __unicode__(self):
        return "{} {}".format(self.prop_a, self.prop_b)
</snippet></ROW><ROW><id>19731559</id><snippet>from django.dispatch import receiver
from django.http import HttpResponse

from johnny.signals import qc_hit, qc_miss
from models import TestModel

def index(self):
    objs = TestModel.objects.all()
    print objs
    print objs.filter(prop_a='a') #Causes another database or cache hit
    return HttpResponse("success")

def generate(self):
    generate_data()
    return HttpResponse("generated")

def generate_data():
    properties = [ 'a', 'b', 'c', 'd', 'e']
    for i in xrange(len(properties)):
        for j in xrange(len(properties)):
            test_model = TestModel(prop_a=properties[i], prop_b=properties[j])
            test_model.save()

@receiver(qc_hit)
def cache_hit(sender, **kwargs):
    print "cache hit"

@receiver(qc_miss)
def cache_miss(sender, **kwargs):
    print "cache miss"
</snippet></ROW><ROW><id>19731559</id><snippet>TestModel</snippet></ROW><ROW><id>19731559</id><snippet>objs = TestModel.objects.all()
result = []
for obj in objs:
   if obj.prop_a == 'a':
      result.append(obj)
</snippet></ROW><ROW><id>19731867</id><snippet>in</snippet></ROW><ROW><id>19731867</id><snippet>if answer.lower() in 'yeah yes yep yea'.split():
</snippet></ROW><ROW><id>19731867</id><snippet>&gt;&gt;&gt; 'YeAH'.lower() in 'yeah yes yep yea'.split()
True
&gt;&gt;&gt; 'Yee'.lower() in 'yeah yes yep yea'.split()
False
</snippet></ROW><ROW><id>19731867</id><snippet>&gt;&gt;&gt; lis = 'yeah yes yep yea'.split()
&gt;&gt;&gt; 'yes' in lis
True
</snippet></ROW><ROW><id>19731867</id><snippet>set</snippet></ROW><ROW><id>19731867</id><snippet>x in {1, 2,
  3}</snippet></ROW><ROW><id>19731867</id><snippet>frozenset</snippet></ROW><ROW><id>19731867</id><snippet>if answer.lower() in {'yeah', 'yes', 'yep', 'yea'}:
    #pass
</snippet></ROW><ROW><id>19731880</id><snippet>while</snippet></ROW><ROW><id>19731880</id><snippet>low</snippet></ROW><ROW><id>19731880</id><snippet>guess</snippet></ROW><ROW><id>19731880</id><snippet>low</snippet></ROW><ROW><id>19731880</id><snippet>guess</snippet></ROW><ROW><id>19731880</id><snippet>guess</snippet></ROW><ROW><id>19731880</id><snippet>while</snippet></ROW><ROW><id>19731902</id><snippet>for proc in psutil.process_iter():
   try:
       if proc.name == PROCNAME:
          print(proc)
   except (PermissionError, AccessDenied):
       print "Permission error or access denied on process" # can't display name or id here
</snippet></ROW><ROW><id>19732048</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>19732048</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(a))
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24], [25, 26, 27, 28], [26, 30, 31, 32], [33, 34, 35, 36]]
</snippet></ROW><ROW><id>19732276</id><snippet>python gears</snippet></ROW><ROW><id>19732276</id><snippet>django-gears</snippet></ROW><ROW><id>19732276</id><snippet>sprockets</snippet></ROW><ROW><id>19732333</id><snippet>matrix.reshape((-1, 1))</snippet></ROW><ROW><id>19732358</id><snippet>def aggregate_flights(flights):
    out = []
    last_id = ''
    for row in flights:
        if row[-2] != last_id and len(out) &gt; 0:
            yield (last_id,out)
            out = []
        last_id = row[-2]
        out.append((row[3],row[4])) #2-tuple of (start,end)
    yield (last_id,out)
</snippet></ROW><ROW><id>19732358</id><snippet>list(aggregate_flight(agg))
Out[21]: 
[('156912756', [('083914', '084141')]),
 ('156912546', [('005500', '010051'), ('010051', '010310')])]
</snippet></ROW><ROW><id>19732358</id><snippet>(start,end)</snippet></ROW><ROW><id>19732358</id><snippet>(start,end)</snippet></ROW><ROW><id>19732358</id><snippet>(start,end)</snippet></ROW><ROW><id>19732358</id><snippet>defaultdict</snippet></ROW><ROW><id>19732358</id><snippet>list</snippet></ROW><ROW><id>19732358</id><snippet>(start,end)</snippet></ROW><ROW><id>19732358</id><snippet>(start,end)</snippet></ROW><ROW><id>19732358</id><snippet>def aggregate_flights(flights):
    last_id,start,end = None,None,None
    for row in flights:
        if row[-2] != last_id and last_id is not None:
            yield (last_id,(start,end))
            start,end = None,None
        if start is None:
            start = row[3]
        last_id = row[-2]
        end = row[4]
    yield (last_id,(start,end))
</snippet></ROW><ROW><id>19732358</id><snippet>(id,(start,end))</snippet></ROW><ROW><id>19732358</id><snippet>namedtuple</snippet></ROW><ROW><id>19732358</id><snippet>from collections import namedtuple
Flight = namedtuple('Flight',['id','start','end'])
</snippet></ROW><ROW><id>19732358</id><snippet>def aggregate_flights(flights):
    last_id,start,end = None,None,None
    for row in flights:
        if row[-2] != last_id and last_id is not None:
            yield Flight(last_id,start,end)
            start,end = None,None
        if start is None:
            start = row[3]
        last_id = row[-2]
        end = row[4]
    yield Flight(last_id,start,end)

list(aggregate_flights(agg))
Out[18]: 
[Flight(id='156912756', start='083914', end='084141'),
 Flight(id='156912546', start='005500', end='010310')]
</snippet></ROW><ROW><id>19732503</id><snippet>def words(stringIterable):
    #upcast the argument to an iterator, if it's an iterator already, it stays the same
    lineStream = iter(stringIterable)
    for line in lineStream: #enumerate the lines
        for word in line.split(): #further break them down
            yield word
</snippet></ROW><ROW><id>19732503</id><snippet>listOfLines = ['hi there', 'how are you']
for word in words(listOfLines):
    print(word)
</snippet></ROW><ROW><id>19732503</id><snippet>with open('words.py', 'r') as myself:
    for word in words(myself):
        print(word)
</snippet></ROW><ROW><id>19732557</id><snippet>Install Package Control</snippet></ROW><ROW><id>19732557</id><snippet>Preferences &gt; Browse Packages</snippet></ROW><ROW><id>19732557</id><snippet>Back Button</snippet></ROW><ROW><id>19732557</id><snippet>Package Control.sublime-package</snippet></ROW><ROW><id>19732557</id><snippet>Preferences &gt; Package Control &gt; Package Control: Install Package</snippet></ROW><ROW><id>19732557</id><snippet>SublimeREPL</snippet></ROW><ROW><id>19732557</id><snippet>Preferences &gt; Package Settings &gt; SublimeREPL &gt; Settings - Default</snippet></ROW><ROW><id>19732557</id><snippet>Preferences &gt; Package Settings &gt; SublimeREPL &gt; Settings - User</snippet></ROW><ROW><id>19732557</id><snippet>Tools &gt; SublimeREPL &gt; Python &gt; Python</snippet></ROW><ROW><id>19732730</id><snippet>request_finished</snippet></ROW><ROW><id>19732778</id><snippet>def number(self):
    yield self.item
    for child in self.left, self.right:
        if child: yield from child.number()
</snippet></ROW><ROW><id>19733431</id><snippet>ls -lAF /usr/bin/python
</snippet></ROW><ROW><id>19733431</id><snippet>sys.prefix</snippet></ROW><ROW><id>19733512</id><snippet>np.intersect1d</snippet></ROW><ROW><id>19733512</id><snippet>&gt;&gt;&gt; c = np.hstack((a, b))
&gt;&gt;&gt; c
array([[2, 5, 6, 2, 3, 4],
       [8, 2, 3, 7, 4, 3],
       [4, 1, 5, 5, 4, 1],
       [1, 7, 9, 7, 6, 9]])
&gt;&gt;&gt; c.sort(axis=1)
&gt;&gt;&gt; c
array([[2, 2, 3, 4, 5, 6],
       [2, 3, 3, 4, 7, 8],
       [1, 1, 4, 4, 5, 5],
       [1, 6, 7, 7, 9, 9]])
&gt;&gt;&gt; c[:, 1:] == c[:, :-1]
array([[ True, False, False, False, False],
       [False,  True, False, False, False],
       [ True, False,  True, False,  True],
       [False, False,  True, False,  True]], dtype=bool)
&gt;&gt;&gt; np.sum(c[:, 1:] == c[:, :-1], axis=1)
array([1, 1, 3, 2])
</snippet></ROW><ROW><id>19733650</id><snippet>super(Child, self).__init__() &lt;=&gt; SomeBaseClass.__init__(self)
</snippet></ROW><ROW><id>19733650</id><snippet>Child</snippet></ROW><ROW><id>19733650</id><snippet>SomeBaseClass</snippet></ROW><ROW><id>19733650</id><snippet>AnotherBaseClass</snippet></ROW><ROW><id>19733650</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...         print "A"
... 
&gt;&gt;&gt; class B(object):
...     def __init__(self):
...         print "B"
... 
&gt;&gt;&gt; class C(A, B):
...     def __init__(self):
...         super(C, self).__init__()
...             print "C"
... 
&gt;&gt;&gt; c = C()
A
C
&gt;&gt;&gt; class D(B, A):
...     def __init__(self):
...         super(D, self).__init__()
...             print "D"
... 
&gt;&gt;&gt; d = D()
B
D
&gt;&gt;&gt; class CC(A, B):
...     def __init__(self):
...         B.__init__(self) # Explicitely call B and not A !
...         print "CC"
... 
&gt;&gt;&gt; cc = CC()
B
CC
</snippet></ROW><ROW><id>19733702</id><snippet># a list of animals that can "speak"
animals = [Dog(), Cat(), Turkey()]
for a in animals:
  a.speak()

# .. but a string cannot "speak"
animals = [Dog(), "Meow!", Turkey()]
</snippet></ROW><ROW><id>19733713</id><snippet>"Python or Java use a lot of words".lower().split().count('or')
</snippet></ROW><ROW><id>19733953</id><snippet>list()</snippet></ROW><ROW><id>19734056</id><snippet>self.request.POST</snippet></ROW><ROW><id>19734056</id><snippet>save</snippet></ROW><ROW><id>19734056</id><snippet>user</snippet></ROW><ROW><id>19734056</id><snippet>self.request</snippet></ROW><ROW><id>19734056</id><snippet>form</snippet></ROW><ROW><id>19734056</id><snippet>form_valid</snippet></ROW><ROW><id>19734056</id><snippet>HttpResponse</snippet></ROW><ROW><id>19734056</id><snippet>form_valid</snippet></ROW><ROW><id>19734056</id><snippet>def form_valid(self, form):
    return form.save(self.request)
</snippet></ROW><ROW><id>19734284</id><snippet>import request
from bs4 import BeautifulSoup as BS

response = request.get('http://stackoverflow.com/') 
bs = BS(response.text)

//do some parsing using beautifulsoup to get the link
</snippet></ROW><ROW><id>19734507</id><snippet>reduce</snippet></ROW><ROW><id>19734507</id><snippet>operator.getitem</snippet></ROW><ROW><id>19734507</id><snippet>&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; d = {'a': {'b': {'c': 100}}}
&gt;&gt;&gt; reduce(getitem, ['a', 'b', 'c'], d)
100
&gt;&gt;&gt; d['a']['b']['c']
100
</snippet></ROW><ROW><id>19734757</id><snippet>response_dict = {
    'status': status,
    'message': unicode(message)
}
</snippet></ROW><ROW><id>19734951</id><snippet>preferences -&gt; Keybindings - User</snippet></ROW><ROW><id>19734951</id><snippet>[]</snippet></ROW><ROW><id>19734951</id><snippet>,</snippet></ROW><ROW><id>19734951</id><snippet>}</snippet></ROW><ROW><id>19734951</id><snippet>[]</snippet></ROW><ROW><id>19734951</id><snippet>,</snippet></ROW><ROW><id>19734951</id><snippet>[
    { "keys": ["ctrl+shift+r"], "command": "repl_open", 
                 "caption": "Python",
                 "mnemonic": "p",
                 "args": {
                    "type": "subprocess",
                    "encoding": "utf8",
                    "cmd": ["python", "-i", "-u","$file"],
                    "cwd": "$file_path",
                    "syntax": "Packages/Python/Python.tmLanguage",
                    "external_id": "python"
                    } 
    }
]
</snippet></ROW><ROW><id>19734951</id><snippet>hello.py</snippet></ROW><ROW><id>19734951</id><snippet>print('Hello World')
</snippet></ROW><ROW><id>19734961</id><snippet>itertools.product</snippet></ROW><ROW><id>19734961</id><snippet>itertools.product([0, 1], repeat=14)
</snippet></ROW><ROW><id>19734961</id><snippet>list(itertools.product([0, 1], repeat=14))
</snippet></ROW><ROW><id>19734961</id><snippet>for item in itertools.product([0, 1], repeat=14):
    print item
</snippet></ROW><ROW><id>19735086</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; mystr = "AaAaaEeEiOoouuu"
&gt;&gt;&gt; a,b = Counter(c for c in mystr.lower() if c in "aeiou").most_common(1)[0]
&gt;&gt;&gt; "the most frequent vowel is {} occurring {} times".format(a.upper(), b)
'the most frequent vowel is A occurring 5 times'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19735086</id><snippet>collections.Counter</snippet></ROW><ROW><id>19735086</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; mystr = "AaAaaEeEiOoouuu"
&gt;&gt;&gt; Counter(c for c in mystr.lower() if c in "aeiou")
Counter({'a': 5, 'o': 3, 'e': 3, 'u': 3, 'i': 1})
&gt;&gt;&gt; # Get the top three most common
&gt;&gt;&gt; Counter(c for c in mystr.lower() if c in "aeiou").most_common(3)
[('a', 5), ('o', 3), ('e', 3)]
&gt;&gt;&gt; # Get the most common
&gt;&gt;&gt; Counter(c for c in mystr.lower() if c in "aeiou").most_common(1)
[('a', 5)]
&gt;&gt;&gt; Counter(c for c in mystr.lower() if c in "aeiou").most_common(1)[0]
('a', 5)
&gt;&gt;&gt; a,b = Counter(c for c in mystr.lower() if c in "aeiou").most_common(1)[0]
&gt;&gt;&gt; a
'a'
&gt;&gt;&gt; b
5
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19735205</id><snippet>def writelist(liste,doc):
for element in liste:
    doc.write(str(element)+"\n")
return doc
</snippet></ROW><ROW><id>19735205</id><snippet>[1, 2, "hello"],
[3, 5, "hi There"],
[5, 7, "I don't know"]]
</snippet></ROW><ROW><id>19735228</id><snippet>sign</snippet></ROW><ROW><id>19735228</id><snippet>math.copysign</snippet></ROW><ROW><id>19735301</id><snippet>writerow()</snippet></ROW><ROW><id>19735301</id><snippet>contents</snippet></ROW><ROW><id>19735301</id><snippet>for x in data:
    strip1 = x.contents
    f.writerow(strip1)
</snippet></ROW><ROW><id>19735301</id><snippet>contents</snippet></ROW><ROW><id>19735301</id><snippet>strip1 = []
for x in data:
    strip1.extend(x.contents)
f.writerow(strip1)
</snippet></ROW><ROW><id>19735301</id><snippet>xml</snippet></ROW><ROW><id>19735301</id><snippet>&lt;SoftwareProduct&gt;</snippet></ROW><ROW><id>19735301</id><snippet>for product in soup.find_all('SoftwareProduct'):
    strip1 = []
    strip1.extend(product.Name.contents)
    strip1.extend(product.Price.contents)
    ...
    f.writerow(strip1)
</snippet></ROW><ROW><id>19735452</id><snippet>def taskchain(*args, **kwargs):
    output = kwargs.get('output', PIPE)
    error_output = kwargs.get('error_output', STDOUT) 
    lastprocess = None

    for index, argset in enumerate(args):
        islastprocess = index == len(args) - 1

        process = Popen(argset, stdout=output if islastprocess else PIPE,
                stdin=None if lastprocess is None else lastprocess.stdout,
                stderr=error_output)

        if lastprocess is not None:
            lastprocess.stdout.close()

        lastprocess = process

    if output == PIPE:
        return lastprocess.communicate()
    else:
        lastprocess.wait()
</snippet></ROW><ROW><id>19735452</id><snippet>&gt;&gt;&gt; print taskchain(('ps','aux'), ('grep','python'), ('cut','-c','1-50'))[0].trim()
naftuli   3221  0.1  0.1  60960 12376 pts/3    S+ 
naftuli   3242  0.0  0.0  32592  5748 pts/2    S+ 
naftuli   3246  0.0  0.0   9388   916 pts/2    S+ 
naftuli   5852  0.0  0.2 430284 20200 ?        Sl 
root      8153  0.0  0.1  95520 11060 ?        S

&gt;&gt;&gt; print taskchain(('ls',), ('grep', 'ic'))[0]
Music
Pictures
Public
</snippet></ROW><ROW><id>19735455</id><snippet>import socket
s = socket.socket()
KEY = "ce73007bb263c20268da59eb9fb52b06" # If you want to help me, you can use this key to connect to the server
USERNAME = "Vik2015"
HOST = "68.53.14.13"
PORT = 25566
s.connect((HOST, PORT))
print 'connected'
# login packet (pkt id, protocol version, user name, verification key, pad)
s.sendall('%c%c%-64s%-64s%c' % (0, 7, USERNAME, KEY, 0))
print 'sentall'
print s.recv(4096)
s.close()
</snippet></ROW><ROW><id>19735638</id><snippet>project</snippet></ROW><ROW><id>19735638</id><snippet>__init__.py</snippet></ROW><ROW><id>19735638</id><snippet>from view import *
from controller import *
from model import *
</snippet></ROW><ROW><id>19735638</id><snippet>view.py</snippet></ROW><ROW><id>19735638</id><snippet>controller.py</snippet></ROW><ROW><id>19735638</id><snippet>model.py</snippet></ROW><ROW><id>19735638</id><snippet>import project
</snippet></ROW><ROW><id>19735638</id><snippet>__init__.py</snippet></ROW><ROW><id>19735638</id><snippet>project</snippet></ROW><ROW><id>19735638</id><snippet>__init__.py</snippet></ROW><ROW><id>19735702</id><snippet>days</snippet></ROW><ROW><id>19735702</id><snippet>calculation</snippet></ROW><ROW><id>19735702</id><snippet>self.days</snippet></ROW><ROW><id>19735702</id><snippet>m = days</snippet></ROW><ROW><id>19735742</id><snippet>from rpy2 import robjects
robjects.r.ggsave(filename="x.pdf", plot=p, width=200, height=120, unit='mm')
</snippet></ROW><ROW><id>19735877</id><snippet>y_test</snippet></ROW><ROW><id>19735877</id><snippet>from sklearn.metrics import accuracy_score

# ... everything else the same ...

# create an answer key
# I hope this is correct!
y_test = [[1], [2], [3]]

# same as yours...
classifier.fit(X_train, y_train)
predicted = classifier.predict(X_test)

# get the accuracy
print accuracy_score(predicted, y_test)
</snippet></ROW><ROW><id>19735948</id><snippet>for point in self.pointArray.freqArray:
    #                  ---------------^
</snippet></ROW><ROW><id>19736074</id><snippet>a[:0] = b
</snippet></ROW><ROW><id>19736074</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; a[:0] = b
&gt;&gt;&gt; a
[4, 5, 6, 1, 2, 3]
</snippet></ROW><ROW><id>19736074</id><snippet>list.extend()</snippet></ROW><ROW><id>19736074</id><snippet>list[-1:]</snippet></ROW><ROW><id>19736074</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; a[1:1] = b
&gt;&gt;&gt; a
[1, 4, 5, 6, 2, 3]
</snippet></ROW><ROW><id>19736256</id><snippet>db.coll.update(
  { _id : ID },
  { 
     $push: {
       array: {
          $each: [{ key: 13}],
          $sort: { key: 1 }
       }
     }
  })
</snippet></ROW><ROW><id>19736293</id><snippet>&gt;&gt;&gt; L = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain.from_iterable(zip(L[1::2], L[::2])))
[2, 1, 4, 3, 6, 5]
</snippet></ROW><ROW><id>19736406</id><snippet>In [6]: d = dict( A = np.array([1,2]), B = np.array([1,2,3,4]) )

In [7]: DataFrame(dict([ (k,Series(v)) for k,v in d.iteritems() ]))
Out[7]: 
    A  B
0   1  1
1   2  2
2 NaN  3
3 NaN  4
</snippet></ROW><ROW><id>19736494</id><snippet>&lt;?php 

$command = escapeshellcmd('/usr/custom/test.py');
$output = shell_exec($command);
echo $output;

?&gt;
</snippet></ROW><ROW><id>19736494</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>19736494</id><snippet>chmod +x myscript.py
</snippet></ROW><ROW><id>19736512</id><snippet>btn.bind(on_release=self.load(fileChooser.path, fileChooser.selection))

...
def load(self, path, selection):
    print path,  selection
</snippet></ROW><ROW><id>19736512</id><snippet>on_release</snippet></ROW><ROW><id>19736512</id><snippet>def load_from_filechooser(self, filechooser):
    self.load(filechooser.path, filechooser.selection)
def load(self, path, selection):
    print path,  selection
...
from functools import partial
btn.bind(on_release=partial(self.load_from_filechooser, fileChooser))
</snippet></ROW><ROW><id>19736512</id><snippet>partial</snippet></ROW><ROW><id>19736636</id><snippet>re.findall</snippet></ROW><ROW><id>19736636</id><snippet>pattern = re.compile(r'(?&lt;=&lt;i&gt;).*?(?=&lt;/i&gt;)')

for names in re.findall(pattern, htmltext):
    print re.sub(r'[0-9]', '', names)
</snippet></ROW><ROW><id>19736636</id><snippet>matches = re.findall(r'(?&lt;=&lt;i&gt;)[^0-9]*(?=&lt;/i&gt;)', htmltext)
print matches
</snippet></ROW><ROW><id>19736670</id><snippet>map</snippet></ROW><ROW><id>19736670</id><snippet>(x + 1 for x in somegenerator)</snippet></ROW><ROW><id>19736857</id><snippet>$ python top_t.py
Hi, I'm instance #0 of SubModS!
Can ModM be seen by SubModS:0?  Yes!
Can UnBasedClass be seen by SubModS:0?  No!
Hi, I'm instance #0 of ModM!
Hi, I'm instance #1 of ModM!
Can SubModS be seen by ModM:1?  Yes!
Hi, I'm instance #1 of SubModS!
</snippet></ROW><ROW><id>19736857</id><snippet>from mod_m import ModM
from package_p import SubModS

s0 = SubModS()
s0.see_class('ModM')
s0.see_class('UnBasedClass')
s0.create_inst('ModM')

m0 = ModM()
m0.see_class('SubModS')
m0.create_inst('SubModS')
</snippet></ROW><ROW><id>19736857</id><snippet>from package_p import PluginBase
class ModM(PluginBase):
    def __init__(self):
        super(ModM, self).__init__()
</snippet></ROW><ROW><id>19736857</id><snippet>__all__ = ['SubModS', 'PluginBase']
from .meta_base import PluginBase
from .submod_s import SubModS
</snippet></ROW><ROW><id>19736857</id><snippet>from .meta_base import PluginBase
class SubModS(PluginBase):
    def __init__(self):
        super(SubModS, self).__init__()
</snippet></ROW><ROW><id>19736857</id><snippet>class PluginMount(type):
    def __init__(cls, name, bases, attrs):
        if not hasattr(cls, 'plugins'):
            cls.plugins = []
        else:
            cls.plugins.append(cls)

class PluginBase(object):
    __metaclass__ = PluginMount
    i = 0
    def __init__(self):
        self.i = self.__class__.i
        print "Hi, I'm instance #{} of {}!".format(self.i, self.__class__.__name__)
        self.__class__.i += 1
    def see_class(self, name):
        print "Can {} be seen by {}:{}?  {}!".format(name, self.__class__.__name__, self.i, 'Yes' if name in (cls.__name__ for cls in self.__class__.plugins) else 'No')
    def create_inst(self, name):
        for cls in self.__class__.plugins:
            if name == cls.__name__:
                return cls()
        return None
</snippet></ROW><ROW><id>19736891</id><snippet>Could not convert string to float</snippet></ROW><ROW><id>19736891</id><snippet>try/except</snippet></ROW><ROW><id>19736891</id><snippet>isdigit()</snippet></ROW><ROW><id>19736891</id><snippet>try:
    miles = float(input("How many miles can you walk?: "))
except:
    print("Please type in a number!")
</snippet></ROW><ROW><id>19736891</id><snippet>miles = input("How many miles can you walk?: ")
if not miles.isdigit():
    print("Please type a number!")
</snippet></ROW><ROW><id>19736891</id><snippet>while True:
    try:
        miles = float(input("How many miles can you walk?: "))
        break
    except:
        print("Please type in a number!")

#All of the ifs and stuff
</snippet></ROW><ROW><id>19736933</id><snippet>players[fullName] = (curLineFin[0] + '\t' + curLineFin[1] + 
      '\t' + curLineFin[2] + '\t' + curLineFin[3] + '\t' + 
      curLineFin[4] + '\t' + curLineFin[5] + '\t' + curLineFin[6] + 
      '\t' + curLineFin[7] + '\t' + curLineFin[8] + '\t' + 
      curLineFin[9] + '\t' + curLineFin[10] + '\t' )
</snippet></ROW><ROW><id>19736933</id><snippet>players[fullName] = '\t'.join(curLineFin[:11]) + '\t'
</snippet></ROW><ROW><id>19736933</id><snippet>curLineFin</snippet></ROW><ROW><id>19736933</id><snippet>players[fullName] = '\t'.join(curLineFin) 
</snippet></ROW><ROW><id>19736988</id><snippet>result = [{k: v} for (k, v) in mydict.iteritems()]
</snippet></ROW><ROW><id>19737147</id><snippet>execfile</snippet></ROW><ROW><id>19737147</id><snippet>exec</snippet></ROW><ROW><id>19737147</id><snippet>import</snippet></ROW><ROW><id>19737147</id><snippet>tempfile.NamedTemporaryFile</snippet></ROW><ROW><id>19737147</id><snippet>sys.path</snippet></ROW><ROW><id>19737147</id><snippet>import</snippet></ROW><ROW><id>19737245</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; src = """ &lt;div class="s"&gt;
...    &lt;div&gt;
...       &lt;div class="f kv" style="white-space:nowrap"&gt;
...          &lt;cite class="vurls"&gt;www.somewebsite.com/&lt;/cite&gt;\U+200E
...       &lt;/div&gt;
...    &lt;/div&gt;
... &lt;/div&gt;
...
... """
&gt;&gt;&gt; soup = BeautifulSoup(src)
&gt;&gt;&gt; soup.find_all('cite')
[&lt;cite class="vurls"&gt;www.somewebsite.com/&lt;/cite&gt;]
&gt;&gt;&gt; soup.find_all('cite', attr={'class': 'vurls'})
[]
&gt;&gt;&gt; soup.find_all('cite', class_='vurls')
[&lt;cite class="vurls"&gt;www.somewebsite.com/&lt;/cite&gt;]
</snippet></ROW><ROW><id>19737253</id><snippet>mock.patch.object</snippet></ROW><ROW><id>19737253</id><snippet>with mock.patch.object(MyClassUnderTest, "submethod") as submethod_mocked:
    submethod_mocked.return_value = 13
    MyClassUnderTest().main_method()
    submethod_mocked.assert_called_once_with(user_id, 100, self.context,
                                             self.account_type)
</snippet></ROW><ROW><id>19737253</id><snippet> patch.object(target, attribute, new=DEFAULT, 
              spec=None, create=False, spec_set=None, 
              autospec=None, new_callable=None, **kwargs)
</snippet></ROW><ROW><id>19737316</id><snippet>twitter</snippet></ROW><ROW><id>19737316</id><snippet>tweetphoto</snippet></ROW><ROW><id>19737340</id><snippet>getAllPixels</snippet></ROW><ROW><id>19737340</id><snippet>pix = getAllPixels(picture)
third = len(pix) // 3
for p in pix[:third]:
    # do top-third stuff
for p in pix[third:third*2]:
    # do middle-third stuff
for p in pix[third*2:]:
    # do bottom-third stuff
</snippet></ROW><ROW><id>19737344</id><snippet>focusInEvent</snippet></ROW><ROW><id>19737344</id><snippet>focusInEvent</snippet></ROW><ROW><id>19737344</id><snippet>from PyQt4 import QtGui, QtCore

class LineEdit(QtGui.QLineEdit):
    def __init__(self, strings, parent):
        QtGui.QLineEdit.__init__(self, parent)
        self.setCompleter(QtGui.QCompleter(strings, self))

    def focusInEvent(self, event):
        QtGui.QLineEdit.focusInEvent(self, event)
        self.completer().complete()

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        strings = 'one two three four five six seven eight'.split()
        self.edit1 = LineEdit(strings, self)
        self.edit2 = LineEdit(strings, self)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.edit1)
        layout.addWidget(self.edit2)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19737524</id><snippet>Model</snippet></ROW><ROW><id>19737524</id><snippet>get_FOO_display()</snippet></ROW><ROW><id>19737619</id><snippet>             Timestamp        , scancode, keycode, keystate
key event at 1383327570.147000, 2         (KEY_1), down
key event at 1383327570.147990, 2         (KEY_1), up
</snippet></ROW><ROW><id>19737619</id><snippet>from evdev import InputDevice, categorize  # import * is evil :)
dev = InputDevice('/dev/input/event1')

# Provided as an example taken from my own keyboard attached to a Centos 6 box:
scancodes = {
    # Scancode: ASCIICode
    0: None, 1: u'ESC', 2: u'1', 3: u'2', 4: u'3', 5: u'4', 6: u'5', 7: u'6', 8: u'7', 9: u'8',
    10: u'9', 11: u'0', 12: u'-', 13: u'=', 14: u'BKSP', 15: u'TAB', 16: u'Q', 17: u'W', 18: u'E', 19: u'R',
    20: u'T', 21: u'Y', 22: u'U', 23: u'I', 24: u'O', 25: u'P', 26: u'[', 27: u']', 28: u'CRLF', 29: u'LCTRL',
    30: u'A', 31: u'S', 32: u'D', 33: u'F', 34: u'G', 35: u'H', 36: u'J', 37: u'K', 38: u'L', 39: u';',
    40: u'"', 41: u'`', 42: u'LSHFT', 43: u'\\', 44: u'Z', 45: u'X', 46: u'C', 47: u'V', 48: u'B', 49: u'N',
    50: u'M', 51: u',', 52: u'.', 53: u'/', 54: u'RSHFT', 56: u'LALT', 100: u'RALT'
}
for event in dev.read_loop():
    if event.type == evdev.ecodes.EV_KEY:
        data = evdev.categorize(event)  # Save the event temporarily to introspect it
        if data.keystate == 1:  # Down events only
            key_lookup = scancodes.get(data.scancode) or u'UNKNOWN:{}'.format(data.scancode)  # Lookup or return UNKNOWN:XX
            print u'You Pressed the {} key!'.format(key_lookup)  # Print it all out!
</snippet></ROW><ROW><id>19737619</id><snippet>You Pressed the A key!
You Pressed the B key!
You Pressed the C key!
You Pressed the UNKNOWN:99 key!
</snippet></ROW><ROW><id>19737764</id><snippet>W = [['a', 'b', 'b', 'b', 'a'],
     ['a', 'a', 'a', 'a', 'b'],
     ['a', 'b', 'a', 'b', 'b'],
     ['a', 'a', 'a', 'b', 'b'],
     ['b', 'b', 'b', 'b', 'b'],
     ['b', 'b', 'b', 'b', 'b']]

def count_matrix(W, r,c, ch):
    ref=(-1,0,1)
    matches=[]
    for dr, dc in [(a, b) for a in ref for b in ref if (a,b)!=(0,0)]:
        if r+dr&gt;=0 and c+dc&gt;=0:
            try:
                matches.append(W[r+dr][c+dc])
            except IndexError:
                pass
    return matches.count(ch)

print count_matrix(W,0,0,'a')   # correctly handles upper LH 
# 2
print count_matrix(W,4,1,'a') 
# 3
</snippet></ROW><ROW><id>19737764</id><snippet>if (a,b)!=(0,0)</snippet></ROW><ROW><id>19737764</id><snippet>0,0</snippet></ROW><ROW><id>19737815</id><snippet>x</snippet></ROW><ROW><id>19737815</id><snippet>v</snippet></ROW><ROW><id>19737815</id><snippet>IntVar</snippet></ROW><ROW><id>19737815</id><snippet>.get</snippet></ROW><ROW><id>19737815</id><snippet>myfile.write("Name: "+mEntry1.get()+", Age: "+mEntry2.get()+", Skill: "+str(x.get())+", Strength: "+str(v.get()))
</snippet></ROW><ROW><id>19737815</id><snippet>myfile.write("Name: {}, Age: {}, Skill: {}, Strength: {}".format(mEntry1.get(), mEntry2.get(), x.get(), v.get()))
</snippet></ROW><ROW><id>19737815</id><snippet>str.format</snippet></ROW><ROW><id>19737973</id><snippet>import scipy.io
import numpy as np

def save_array(arr, arrname, fname):
    """
    Save an array to a .mat file
    Inputs:
      arr: ndarray to save
      arrname: name to save the array as (string)
      fname: .mat filename (string)
    """
    out_dict={arrname: arr}
    scipy.io.savemat(fname,out_dict)

save_array(np.array([1,2,3]), 'arr', 'test.mat')
</snippet></ROW><ROW><id>19738086</id><snippet>dependency_links</snippet></ROW><ROW><id>19738086</id><snippet>install_requires</snippet></ROW><ROW><id>19738086</id><snippet>dependency_links = ['git+https://github.com/liamzebedee/scandir.git#egg=scandir-0.1'],
install_requires = ['scandir'],
</snippet></ROW><ROW><id>19738382</id><snippet>In [6]: df = DataFrame(dict(A = date_range('20130101',periods=10)))

In [7]: df
Out[7]: 
                    A
0 2013-01-01 00:00:00
1 2013-01-02 00:00:00
2 2013-01-03 00:00:00
3 2013-01-04 00:00:00
4 2013-01-05 00:00:00
5 2013-01-06 00:00:00
6 2013-01-07 00:00:00
7 2013-01-08 00:00:00
8 2013-01-09 00:00:00
9 2013-01-10 00:00:00

In [8]: df['A'].apply(lambda x: x.strftime('%d%m%Y'))
Out[8]: 
0    01012013
1    02012013
2    03012013
3    04012013
4    05012013
5    06012013
6    07012013
7    08012013
8    09012013
9    10012013
Name: A, dtype: object
</snippet></ROW><ROW><id>19738396</id><snippet>datetime</snippet></ROW><ROW><id>19738396</id><snippet>datetime.now()</snippet></ROW><ROW><id>19738396</id><snippet>datetime.datetime.now().date().isoformat()</snippet></ROW><ROW><id>19738396</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now.strftime("%Y-%m-%d")
'2013-11-01'
&gt;&gt;&gt; datetime.datetime.now().date().isoformat()
'2013-11-01'
</snippet></ROW><ROW><id>19738396</id><snippet>import datetime
str1 = "\n".join(data)

# Get the current date and time
now = datetime.datetime.now()
now_str = now.strftime("%Y-%m-%d")

# Write out to a file for today
outfilename = 'sampledata-{}.csv'.format(now_str)

outFile = open(outfilename, 'write')
outFile.write(str1)
outFile.close()
</snippet></ROW><ROW><id>19738396</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now().isoformat()
'2013-11-01T21:55:45.465662'
</snippet></ROW><ROW><id>19738654</id><snippet>by_symbol()</snippet></ROW><ROW><id>19738654</id><snippet>by_zrange()</snippet></ROW><ROW><id>19738654</id><snippet>return self</snippet></ROW><ROW><id>19738654</id><snippet>from collections import namedtuple

Point = namedtuple('Point', 'x, y, z')

class Atom(object):
    def __init__(self, symbol, x, y, z):
        self.symbol = symbol
        self.position = Point(x, y, z)

    def __repr__(self):
        return '{name}({sym!r}, {pos.x}, {pos.y}, {pos.z})'.format(
            name=self.__class__.__name__, sym=self.symbol, pos=self.position)

class Selection(object):
    def __init__(self, a_system, atom_list=None):
        if atom_list is None:
            atom_list = []
        for atom in a_system:
            atom_list.append(atom)
        self.atom_list = atom_list

    def __repr__(self):
        return '{name}({atoms})'.format(
            name=self.__class__.__name__, atoms=self.atom_list)

    def _filter(self, func):
        return filter(func, self.atom_list)

    def by_symbol(self, symbol):
        self.atom_list = self._filter(lambda a: a.symbol == symbol)
        return self

    def by_zrange(self, zmin, zmax):
        def zrange(a):
            return zmin &lt;= a.position.z &lt;= zmax
        self.atom_list = self._filter(zrange)
        return self
</snippet></ROW><ROW><id>19738654</id><snippet>my_system = [Atom('H', 0, 1, 2),
             Atom('N', 3, 4, 5),
             Atom('C', 6, 7, 8),
             Atom('H', 9, 10, 11),]

group = Selection(my_system)
print group
print group.by_symbol('H')
print group.by_zrange(1, 2)
print
group = Selection(my_system)
print group.by_symbol('H').by_zrange(1, 2)
</snippet></ROW><ROW><id>19738654</id><snippet>Selection([Atom('H', 0, 1, 2), Atom('N', 3, 4, 5), Atom('C', 6, 7, 8),
           Atom('H', 9, 10, 11)])
Selection([Atom('H', 0, 1, 2), Atom('H', 9, 10, 11)])
Selection([Atom('H', 0, 1, 2)])

Selection([Atom('H', 0, 1, 2)])
</snippet></ROW><ROW><id>19738707</id><snippet>packet = self.socket.recv(4096)
self.recvqueue.put_nowait(packet)
</snippet></ROW><ROW><id>19738707</id><snippet>recv()</snippet></ROW><ROW><id>19738707</id><snippet>recv()</snippet></ROW><ROW><id>19738707</id><snippet>recv()</snippet></ROW><ROW><id>19738707</id><snippet>recv()</snippet></ROW><ROW><id>19738707</id><snippet>try:
   xmitmsg = self.sendqueue.get_nowait()
except Queue.Empty:
   pass
else:
   if writable:
       self.socket.send(xmitmsg)
</snippet></ROW><ROW><id>19738717</id><snippet>regex = re.compile(r'\"url\":("[^"]+"),\"id\":("[^"]+")')
match = re.finditer(regex, yourString)

for m in match:
    print m.group(1), m.group(2)
</snippet></ROW><ROW><id>19738717</id><snippet>[^"]</snippet></ROW><ROW><id>19738717</id><snippet>"</snippet></ROW><ROW><id>19738743</id><snippet>%</snippet></ROW><ROW><id>19738743</id><snippet>%%</snippet></ROW><ROW><id>19738743</id><snippet>print "The result is %s out of %s i.e. %d %%" % (nominator, denominator, percentage)
#                                         ^ extra % to escape the one after
</snippet></ROW><ROW><id>19738803</id><snippet>class MainHandler(webapp2.RequestHandler): 
    def test_download(self):
        self.response.headers.add_header('content-disposition','attachment',filename='text.txt')                 

        self.response.write("hello world")
</snippet></ROW><ROW><id>19738871</id><snippet>\n</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>\</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>sprintf</snippet></ROW><ROW><id>19738871</id><snippet>%%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>%</snippet></ROW><ROW><id>19738871</id><snippet>man sprintf</snippet></ROW><ROW><id>19739135</id><snippet>def dehydrate(self, bundle):
    for item in bundle.obj.iteritems():
        bundle.data["new_key"] = "new_value"
    return bundle
</snippet></ROW><ROW><id>19739256</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19739256</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; a = "('TO', 'RP', 'TO')"
&gt;&gt;&gt; b = ast.literal_eval(a)
&gt;&gt;&gt; b
('TO', 'RP', 'TO')
&gt;&gt;&gt; b[0]
'TO'
</snippet></ROW><ROW><id>19739256</id><snippet>&gt;&gt;&gt; [x.strip("' ") for x in a.strip('()').split(',')]
['TO', 'RP', 'TO']
</snippet></ROW><ROW><id>19739256</id><snippet>with open('/path/to/csv-file.csv') as f:
    reader = csv.reader(f, delimiter='"')
    header = [column.replace("'", "") for column in header]
</snippet></ROW><ROW><id>19739309</id><snippet>dict</snippet></ROW><ROW><id>19739309</id><snippet>sequence = [('item 1',150),('item 2',340),('item 3',794),('item 4',1205,),('item 5',1869),('item 2',3412)]
d = {}

for i,tup in enumerate(sequence):
    item,val = tup
    if d.get(item):
        print("I've seen {} before, it was {} at index {}".format(item,*d.get(item)))
    d[item] = (val, i)

#I've seen item 2 before, it was 340 at index 1
</snippet></ROW><ROW><id>19739309</id><snippet>d</snippet></ROW><ROW><id>19739309</id><snippet>item</snippet></ROW><ROW><id>19739309</id><snippet>None</snippet></ROW><ROW><id>19739309</id><snippet>item</snippet></ROW><ROW><id>19739309</id><snippet>defaultdict</snippet></ROW><ROW><id>19739309</id><snippet>(item, i)</snippet></ROW><ROW><id>19739309</id><snippet>list</snippet></ROW><ROW><id>19739568</id><snippet>line</snippet></ROW><ROW><id>19739568</id><snippet>word</snippet></ROW><ROW><id>19739568</id><snippet>view = self.window.active_view()
word = view.word(view.sel()[0])
wordtext = view.substr(word)
</snippet></ROW><ROW><id>19739570</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'AGE_R':[1,2,3,5,4,3,1]})
&gt;&gt;&gt; df
   AGE_R
0      1
1      2
2      3
3      5
4      4
5      3
6      1
&gt;&gt;&gt; df.ix[df['AGE_R'] == 1, 'AGE_R'] = np.random.randint(1, 15, len(df[df['AGE_R'] == 1]))
&gt;&gt;&gt; df
   AGE_R
0      5
1      2
2      3
3      5
4      4
5      3
6      11
</snippet></ROW><ROW><id>19739570</id><snippet>&gt;&gt;&gt; df.ix[df['AGE_R'] == 1, 'AGE_R'] = df.ix[df['AGE_R'] == 1].apply(lambda x: np.random.randint(1, 15), axis = 1)
&gt;&gt;&gt; df
   AGE_R
0      5
1      2
2      3
3      5
4      4
5      3
6     12
</snippet></ROW><ROW><id>19739589</id><snippet>import numpy as np
def DFT_matrix(N):
    i, j = np.meshgrid(np.arange(N), np.arange(N))
    omega = np.exp( - 2 * pi * 1J / N )
    W = np.power( omega, i * j ) / sqrt(N)
    return W
</snippet></ROW><ROW><id>19739589</id><snippet>x = np.zeros(N, N) # x is any input data with those dimensions
W = DFT_matrix(N)
fft_of_x = W.dot(x).dot(W)
</snippet></ROW><ROW><id>19739589</id><snippet>fft_of_x = (W.dot(W)).dot(x)</snippet></ROW><ROW><id>19739700</id><snippet>'NM'</snippet></ROW><ROW><id>19739700</id><snippet>Words = ['This','is','a','list','and','NM,']
for i in xrange(len(Words)):
    if Words[i].startswith('NM'):
        Words[i] = input("Input a " + ac_to_word("NM") + ": ")
</snippet></ROW><ROW><id>19739700</id><snippet>NM...</snippet></ROW><ROW><id>19739700</id><snippet>input()</snippet></ROW><ROW><id>19739954</id><snippet> result_dict={}
 f1=open(1st..)
 f2=open(2st..)
 line1=f1.readline()
 line2=f2.readline()
 while (...):
   name1,val11 , val12 = line1.split()
   result_dict.setdefault(name1,[0.]*4)[0],result_dict.\
   setdefault(name1,[0.]*4)[1] =val11,val12
   name2, val21, val22 = line1.split()
   result_dict.setdefault(name2,[0.]*4)[2],result_dict.\
   setdefault(name2,[0.]*4)[3] =val21,val22
   line1=f1.readline()
   line2=f2.readline()
   ....
 ....
 f1.close()
 f2.close()
</snippet></ROW><ROW><id>19739999</id><snippet>sudo  python setup.py install
</snippet></ROW><ROW><id>19739999</id><snippet>sudo apt-get install python-sklearn
</snippet></ROW><ROW><id>19740024</id><snippet>libraries=["stdc++"]
</snippet></ROW><ROW><id>19740060</id><snippet>from itertools import izip

amount = []
total = 0

month = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
idx = 0
while(idx &lt; len(month)):
    am = int(raw_input("Enter amount of rainfall each month from Jan to Dec sequently: "))
    amount.append(am)
    total+=am
    idx+=1

print "\nRainfall Statistics"
print "Month\t\tTotal Rainfall"
print "-----\t\t---------------"

for each_month, month_amount in izip(month, amount):
    print each_month, "\t\t", month_amount

print "\nTotal rainfall: ", total

average = total/12
print "\nAverage rainfall: ",average
</snippet></ROW><ROW><id>19740096</id><snippet>next</snippet></ROW><ROW><id>19740096</id><snippet>enumerate</snippet></ROW><ROW><id>19740096</id><snippet>&gt;&gt;&gt; x = 6
&gt;&gt;&gt; next((i for i, (a, b) in enumerate(zip(list1, list2)) if a&lt;=x&lt;=b), None)
1
</snippet></ROW><ROW><id>19740096</id><snippet>enumerate</snippet></ROW><ROW><id>19740096</id><snippet>next</snippet></ROW><ROW><id>19740096</id><snippet>None</snippet></ROW><ROW><id>19740096</id><snippet>&gt;&gt;&gt; list(enumerate(zip(list1, list2)))
[(0, (1, 3)), (1, (5, 7)), (2, (10, 20))]
</snippet></ROW><ROW><id>19740156</id><snippet>/usr/bin/svnlook</snippet></ROW><ROW><id>19740156</id><snippet>/usr/local/bin/svnlook</snippet></ROW><ROW><id>19740156</id><snippet>svnlook</snippet></ROW><ROW><id>19740425</id><snippet>csv</snippet></ROW><ROW><id>19740425</id><snippet>UnicodeReader</snippet></ROW><ROW><id>19740425</id><snippet>DictReader</snippet></ROW><ROW><id>19740425</id><snippet>import csv

class UnicodeDictReader:
    """
    A CSV reader which will iterate over lines in the CSV file "f",
    which is encoded in the given encoding.
    """

    def __init__(self, f, dialect=csv.excel, encoding="utf-8", **kwds):
        self.encoding = encoding
        self.reader = csv.DictReader(f, dialect=dialect, **kwds)

    def next(self):
        row = self.reader.next()
        return {k: unicode(v, "utf-8") for k, v in row.iteritems()}

    def __iter__(self):
        return self
</snippet></ROW><ROW><id>19740425</id><snippet>def openFile(fileName):
    try: 
        trainFile  = open(fileName, "rb")
    except IOError as e:
        print "File could not be opened: {}".format(e)
    else:
        return UnicodeDictReader(trainFile)
</snippet></ROW><ROW><id>19740428</id><snippet>{% for s in Tecs %}
{{ s.auteur }} &lt;-----&gt; {{ s.enterprise.ville }}
{% endfor %}
</snippet></ROW><ROW><id>19740453</id><snippet>index_page</snippet></ROW><ROW><id>19740453</id><snippet>url = reverse('db:index_page') + '?redirected=true'
return HttpResponseRedirect(url)
</snippet></ROW><ROW><id>19740453</id><snippet>redirect = request.GET.get('redirected')
</snippet></ROW><ROW><id>19740454</id><snippet>v</snippet></ROW><ROW><id>19740454</id><snippet>import ast
import sys

dicts = {}
for line in sys.stdin:
    d = ast.literal_eval(line)
    for k, v in d.items():
        inner_dict = dicts.setdefault(k, {})
        inner_dict['longword'] = inner_dict.get('longword', 0) + v.get('longword', 0)
        inner_dict['charcount'] = inner_dict.get('charcount', 0) + v.get('charcount', 0)

print dicts
</snippet></ROW><ROW><id>19740454</id><snippet>dicts</snippet></ROW><ROW><id>19740454</id><snippet>{12: {'charcount': 25, 'longword': 1},
 13: {'charcount': 38, 'longword': 1}}
</snippet></ROW><ROW><id>19740596</id><snippet>tensordot</snippet></ROW><ROW><id>19740596</id><snippet>dot</snippet></ROW><ROW><id>19740596</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; k = 5
</snippet></ROW><ROW><id>19740596</id><snippet>a</snippet></ROW><ROW><id>19740596</id><snippet>x</snippet></ROW><ROW><id>19740596</id><snippet>&gt;&gt;&gt; a = np.arange(1.*2*2*k*k).reshape(2,2,k,k)
&gt;&gt;&gt; x = np.arange(1.*2*k).reshape(2,k)
&gt;&gt;&gt; x
array([[ 0.,  1.,  2.,  3.,  4.],
       [ 5.,  6.,  7.,  8.,  9.]])
</snippet></ROW><ROW><id>19740596</id><snippet>&gt;&gt;&gt; result = np.tensordot(a,x,([1,3],[0,1]))
&gt;&gt;&gt; result
array([[  985.,  1210.,  1435.,  1660.,  1885.],
       [ 3235.,  3460.,  3685.,  3910.,  4135.]])
&gt;&gt;&gt; np.shape(result)
(2, 5)
</snippet></ROW><ROW><id>19740903</id><snippet>pconv</snippet></ROW><ROW><id>19740903</id><snippet>a</snippet></ROW><ROW><id>19740903</id><snippet>b</snippet></ROW><ROW><id>19740903</id><snippet>r</snippet></ROW><ROW><id>19740903</id><snippet>sxy = pconv[0,1]*x.shape[0]
sxx = pconv[0,0]
syy = pconv[1,1]
r = (sxy**2/(sxx*syy))**0.5
</snippet></ROW><ROW><id>19741580</id><snippet>TrainerFormSet = modelformset_factory(Trainer)
</snippet></ROW><ROW><id>19741580</id><snippet>Trainer</snippet></ROW><ROW><id>19741580</id><snippet>from models import *
</snippet></ROW><ROW><id>19741623</id><snippet>xargs</snippet></ROW><ROW><id>19741623</id><snippet>xargs -L 1 ./myscript.py &lt;inputfile
</snippet></ROW><ROW><id>19741623</id><snippet>while read line
do
    ./myscript $line
done &lt;inputfile
</snippet></ROW><ROW><id>19741910</id><snippet>&gt;&gt;&gt; map_dict = {'A':"A'", 'B':'BB', 'C':'CX', 'D':'KK'}
&gt;&gt;&gt; strs = 'ABCDEF'
&gt;&gt;&gt; ''.join(map_dict.get(c,c) for c in strs)
"A'BBCXKKEF"
</snippet></ROW><ROW><id>19741910</id><snippet>str.translate</snippet></ROW><ROW><id>19741910</id><snippet>str.join</snippet></ROW><ROW><id>19741910</id><snippet>&gt;&gt;&gt; map_dict = {ord('A'):"A'", ord('B'):'BB', ord('C'):'CX', ord('D'):'KK'}
&gt;&gt;&gt; strs = 'ABCDEF'
&gt;&gt;&gt; strs.translate(map_dict)
"A'BBCXKKEF"
</snippet></ROW><ROW><id>19741936</id><snippet>if gameA&gt;0.4   #&lt;-- end this with a colon
profitA=profitA+1 #&lt;-- needs more indent
end #&lt;-- what is end?
</snippet></ROW><ROW><id>19741936</id><snippet>gameB</snippet></ROW><ROW><id>19741936</id><snippet>profitA</snippet></ROW><ROW><id>19741936</id><snippet>profitB</snippet></ROW><ROW><id>19741936</id><snippet>testA</snippet></ROW><ROW><id>19741936</id><snippet>testB</snippet></ROW><ROW><id>19741936</id><snippet>testA</snippet></ROW><ROW><id>19741936</id><snippet>testB</snippet></ROW><ROW><id>19741994</id><snippet>settings.py</snippet></ROW><ROW><id>19741994</id><snippet>myProject</snippet></ROW><ROW><id>19741994</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19741994</id><snippet>sys.path</snippet></ROW><ROW><id>19741994</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19741994</id><snippet>sys.path</snippet></ROW><ROW><id>19741994</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19741994</id><snippet>sys.path</snippet></ROW><ROW><id>19741994</id><snippet>os.environ['PYTHONPATH']=&lt;some_new_value&gt;</snippet></ROW><ROW><id>19741994</id><snippet>sys.path</snippet></ROW><ROW><id>19741994</id><snippet>import</snippet></ROW><ROW><id>19741994</id><snippet>$ mkdir /tmp/tst
$ echo "print 'test'" &gt; /tmp/tst/__init__.py
$ python -c "import tst"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named tst
$ python -c "import os; os.environ['PYTHONPATH']+=';/tmp'; import tst;"
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named tst
$ python -c "import sys; sys.path.append('/tmp'); import tst;"
test
$ export PYTHONPATH=$PYTHONPATH:/tmp/
$ python -c "import tst"
test
</snippet></ROW><ROW><id>19741994</id><snippet>python manage.py</snippet></ROW><ROW><id>19741994</id><snippet>myProject</snippet></ROW><ROW><id>19741994</id><snippet>manage.py
myProject/
    settings.py
</snippet></ROW><ROW><id>19741994</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>19741994</id><snippet>settings</snippet></ROW><ROW><id>19741994</id><snippet>myProject.settings</snippet></ROW><ROW><id>19741994</id><snippet>python manage.py</snippet></ROW><ROW><id>19741994</id><snippet>--settings=settings</snippet></ROW><ROW><id>19742264</id><snippet>ndk-build DUMP_APP_ABI</snippet></ROW><ROW><id>19742264</id><snippet>$(info …)</snippet></ROW><ROW><id>19742264</id><snippet>$(__ndk_info)</snippet></ROW><ROW><id>19742511</id><snippet>ctrl+z</snippet></ROW><ROW><id>19742511</id><snippet>fg</snippet></ROW><ROW><id>19742511</id><snippet>ctrl+c</snippet></ROW><ROW><id>19742674</id><snippet>recv</snippet></ROW><ROW><id>19742674</id><snippet>send</snippet></ROW><ROW><id>19742674</id><snippet>send</snippet></ROW><ROW><id>19742674</id><snippet>TCP_NODELAY</snippet></ROW><ROW><id>19742674</id><snippet>sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
</snippet></ROW><ROW><id>19742674</id><snippet>recv</snippet></ROW><ROW><id>19742813</id><snippet>&gt; Math.pow(17, 22)
1.1745628765211486e+27
</snippet></ROW><ROW><id>19742813</id><snippet>&gt;&gt;&gt; pow(17, 22)
1174562876521148458974062689
</snippet></ROW><ROW><id>19742813</id><snippet>int</snippet></ROW><ROW><id>19742813</id><snippet>Number</snippet></ROW><ROW><id>19742813</id><snippet>17^22</snippet></ROW><ROW><id>19742813</id><snippet>pow</snippet></ROW><ROW><id>19742813</id><snippet>pow</snippet></ROW><ROW><id>19742813</id><snippet>function modpow (base, exponent, modulo) {
    var result = base;
    while (exponent &gt; 1 ) {
        result = (result * base) % modulo;
        exponent--;
    }
    return result;
}
</snippet></ROW><ROW><id>19742813</id><snippet>pow</snippet></ROW><ROW><id>19742813</id><snippet>&gt; modpow(17, 22, 21)
4
</snippet></ROW><ROW><id>19742864</id><snippet>aspect = float(width)/height
</snippet></ROW><ROW><id>19742864</id><snippet>width = 14.       # &lt;-- The decimal point makes width a float.
height 6
aspect = width/height
</snippet></ROW><ROW><id>19742864</id><snippet>from __future__ import division   # Place this as the top of the file
width =  14
height = 6
aspect = width/height
</snippet></ROW><ROW><id>19742864</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>19743189</id><snippet>x</snippet></ROW><ROW><id>19743189</id><snippet>mutable</snippet></ROW><ROW><id>19743189</id><snippet>def func():
    return x**2
</snippet></ROW><ROW><id>19743189</id><snippet>def func(y):
   return y**2
</snippet></ROW><ROW><id>19743189</id><snippet>&gt;&gt;&gt; x = 10
&gt;&gt;&gt; def func():
...     print x
...     x = 5
...     
&gt;&gt;&gt; func()
Traceback (most recent call last):
    func()
  File "&lt;ipython-input-5-ab38e6cadf6b&gt;", line 2, in func
    print x
UnboundLocalError: local variable 'x' referenced before assignment
</snippet></ROW><ROW><id>19743189</id><snippet>classes</snippet></ROW><ROW><id>19743189</id><snippet>class A:
    x = 5
    @staticmethod
    def func():
        return A.x**2
...     
&gt;&gt;&gt; A.func()
25
&gt;&gt;&gt; A.x = 10
&gt;&gt;&gt; A.func()
100
</snippet></ROW><ROW><id>19743432</id><snippet>import os
from os.path import dirname, realpath, abspath
</snippet></ROW><ROW><id>19743432</id><snippet>__file__ = "game_folder"    # &lt;-- This code is needed for CX_freeze, to avoid NameError.
file_path = os.path.join(dirname(__file__), "images", "energy.png")
</snippet></ROW><ROW><id>19743637</id><snippet>&gt;&gt;&gt; {} &gt; 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: dict() &gt; int()
&gt;&gt;&gt; class Foo:
...     def __gt__(self, other):
...         if isinstance(other, int):
...             return True
... 
&gt;&gt;&gt; Foo() &gt; 3
True
</snippet></ROW><ROW><id>19743660</id><snippet>function</snippet></ROW><ROW><id>19743660</id><snippet>class</snippet></ROW><ROW><id>19743660</id><snippet>folder.script.class(...).function()
</snippet></ROW><ROW><id>19743660</id><snippet>(...)</snippet></ROW><ROW><id>19743660</id><snippet>var = folder.script.class(...)
var.function()
</snippet></ROW><ROW><id>19743660</id><snippet>var</snippet></ROW><ROW><id>19743660</id><snippet>function</snippet></ROW><ROW><id>19743660</id><snippet>...</snippet></ROW><ROW><id>19743660</id><snippet>class.__init__</snippet></ROW><ROW><id>19743660</id><snippet>()</snippet></ROW><ROW><id>19743669</id><snippet>product(*lis)</snippet></ROW><ROW><id>19743669</id><snippet>def simpleSum(a=1,b=2):
    return a + b
simpleSum(**{'a':1,'b':2}) # returns 3
</snippet></ROW><ROW><id>19743746</id><snippet>*a</snippet></ROW><ROW><id>19743746</id><snippet>**keywords</snippet></ROW><ROW><id>19743746</id><snippet>&gt;&gt;&gt; demo = lambda *a: a
&gt;&gt;&gt; demo()
()
&gt;&gt;&gt; demo(1, 2, 3)
(1, 2, 3)
</snippet></ROW><ROW><id>19743746</id><snippet>demo</snippet></ROW><ROW><id>19743746</id><snippet>*a</snippet></ROW><ROW><id>19743782</id><snippet>Month: &lt;counter&gt;
Minimum monthly payment: &lt;payment&gt;
Remaining balance: &lt;balance&gt;
</snippet></ROW><ROW><id>19743782</id><snippet>counter</snippet></ROW><ROW><id>19743782</id><snippet>payment</snippet></ROW><ROW><id>19743782</id><snippet>balance</snippet></ROW><ROW><id>19743782</id><snippet>monthly_interest_rate = annualInterestRate / 12.0
</snippet></ROW><ROW><id>19743782</id><snippet>balance</snippet></ROW><ROW><id>19743782</id><snippet>minimum_monthly_payment = monthlyPaymentRate * balance
monthly_unpaid_balance = balance - minimum_monthly_payment
balance = monthly_unpaid_balance + (monthly_interest_rate * monthly_unpaid_balance)
print(('Month: &lt;counter&gt;\n') + ('Minimum monthly payment: ') + str(round(minimum_monthly_payment, 2)) + '\n' + ('Remaining balance: ') + str(round(balance, 2)))
</snippet></ROW><ROW><id>19743782</id><snippet>monthly_interest_rate = annualInterestRate / 12.0
for counter in range(1, 13):
    payment = monthlyPaymentRate * balance
    monthly_unpaid_balance = balance - payment
    balance = monthly_unpaid_balance + (monthly_interest_rate * monthly_unpaid_balance)
    print('Month: {}\nMinimum monthly payment: {}\nRemaining balance:{}\n'.format(
              counter, round(payment, 2), round(balance, 2)))
</snippet></ROW><ROW><id>19743782</id><snippet>print</snippet></ROW><ROW><id>19743782</id><snippet>monthly_interest_rate = annualInterestRate / 12.0
paid_total = 0
for counter in range(1, 13):
    payment = monthlyPaymentRate * balance
    paid_total += payment
    monthly_unpaid_balance = balance - payment
    balance = monthly_unpaid_balance + (monthly_interest_rate * monthly_unpaid_balance)
    print('Month: {}\nMinimum monthly payment: {}\nRemaining balance:{}\n'.format(
              counter, round(payment, 2), round(balance, 2)))
</snippet></ROW><ROW><id>19743828</id><snippet>import os
import win32com.client

if os.path.exists("excelsheet.xlsm"):
    xl=win32com.client.Dispatch("Excel.Application")
    xl.Workbooks.Open(Filename="C:\Full Location\To\excelsheet.xlsm", ReadOnly=1)
    xl.Application.Run("excelsheet.xlsm!macroname.macroname")
##    xl.Application.Save() # if you want to save then uncomment this line and change delete the ", ReadOnly=1" part from the open function.
    xl.Application.Quit() # Comment this out if your excel script closes
    del xl
</snippet></ROW><ROW><id>19743869</id><snippet>string_variable2</snippet></ROW><ROW><id>19743869</id><snippet>string_variable2 = file2.replacefunction('Some text','a_unique_key', string_variable1)
string_variable2 = file2.replacefunction('Other text','another_unique_key', string_variable2)
file2.replacefunction('More text','unique_key_3', string_variable2)
</snippet></ROW><ROW><id>19743869</id><snippet>replacefunction</snippet></ROW><ROW><id>19743869</id><snippet>string_variable2</snippet></ROW><ROW><id>19743994</id><snippet>items()</snippet></ROW><ROW><id>19743994</id><snippet>iteritems()</snippet></ROW><ROW><id>19743994</id><snippet>text = {('idA','id2'): 'text',
        ('idB','id1'): 'text',
        ('idC','id3'): 'text',}

print sorted(text.iteritems(), key=lambda item: item[0][1])
</snippet></ROW><ROW><id>19743994</id><snippet>[(('idB', 'id1'), 'text'), (('idA', 'id2'), 'text'), (('idC', 'id3'), 'text')]
</snippet></ROW><ROW><id>19744073</id><snippet>jsonpickle</snippet></ROW><ROW><id>19744073</id><snippet>jsonpickle</snippet></ROW><ROW><id>19744073</id><snippet>easy_install jsonpickle</snippet></ROW><ROW><id>19744073</id><snippet>json</snippet></ROW><ROW><id>19744073</id><snippet>JSONEncoder</snippet></ROW><ROW><id>19744073</id><snippet>jsonpickle</snippet></ROW><ROW><id>19744073</id><snippet>import jsonpickle
import os
import sys


SAVEGAME_FILENAME = 'savegame.json'

game_state = dict()


class Human(object):
    """The human player
    """
    def __init__(self, name, health, gold):
        self.name = name
        self.health = health
        self.gold = gold


class Monster(object):
    """A hostile NPC.
    """
    def __init__(self, name, health):
        self.name = name
        self.health = health


def load_game():
    """Load game state from a predefined savegame location and return the
    game state contained in that savegame.
    """
    with open(SAVEGAME_FILENAME, 'r') as savegame:
        state = jsonpickle.decode(savegame.read())
    return state


def save_game():
    """Save the current game state to a savegame in a predefined location.
    """
    global game_state
    with open(SAVEGAME_FILENAME, 'w') as savegame:
        savegame.write(jsonpickle.encode(game_state))


def initialize_game():
    """If no savegame exists, initialize the game state with some
    default values.
    """
    player = Human('Fred', 100, 10)
    imp = Monster('Imp', 50)

    state = dict()
    state['players'] = [player]
    state['npcs'] = [imp]
    return state


def attack():
    """Toy function to demonstrate attacking an NPC.
    """
    global game_state
    imp = game_state['npcs'][0]
    imp.health -= 3
    print "You attacked the imp for 3 dmg. The imp is now at %s HP." % imp.health


def spend_money(amount):
    """Toy function to demonstrate spending money.
    """
    global game_state
    player = game_state['players'][0]
    player.gold -= amount
    print "You just spent %s gold. You now have %s gold." % (amount, player.gold)


def game_loop():
    """Main game loop.
    This loop will run until the player exits the game.
    """
    global game_state

    while True:
        print "What do you want to do?"
        choice = int(raw_input("[1] Save game [2] Spend money "
                               "[3] Attack that Imp! [4] Load game "
                               "[5] Exit game\n"))
        if choice == 1:
            save_game()
        elif choice == 2:
            spend_money(5)
        elif choice == 3:
            attack()
        elif choice == 4:
            game_state = load_game()
        else:
            print "Goodbye!"
            sys.exit(0)


def main():
    """Main function. Check if a savegame exists, and if so, load it. Otherwise
    initialize the game state with defaults. Finally, start the game.
    """
    global game_state

    if not os.path.isfile(SAVEGAME_FILENAME):
        game_state = initialize_game()
    else:
        game_state = load_game()
    game_loop()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19744073</id><snippet>game_state</snippet></ROW><ROW><id>19744073</id><snippet>savegame.json</snippet></ROW><ROW><id>19744073</id><snippet>{
    "npcs": [
        {
            "health": 41,
            "name": "Imp",
            "py/object": "__main__.Monster"
        }
    ],
    "players": [
        {
            "gold": 5,
            "health": 100,
            "name": "Fred",
            "py/object": "__main__.Human"
        }
    ]
}
</snippet></ROW><ROW><id>19744149</id><snippet>numpy</snippet></ROW><ROW><id>19744149</id><snippet>from __future__ import division</snippet></ROW><ROW><id>19744149</id><snippet>rgb_to_hsv</snippet></ROW><ROW><id>19744149</id><snippet>def rgb_to_hsv(arr):
    """
    convert rgb values in a numpy array to hsv values
    input and output arrays should have shape (M,N,3)
    """
    arr = arr.astype('float')  # &lt;- add this line
    out = np.zeros(arr.shape, dtype=np.float)
    arr_max = arr.max(-1)
    ipos = arr_max &gt; 0
    delta = arr.ptp(-1)
    s = np.zeros_like(delta)
    s[ipos] = delta[ipos] / arr_max[ipos]
    ipos = delta &gt; 0
    # red is max
    idx = (arr[:, :, 0] == arr_max) &amp; ipos
    out[idx, 0] = (arr[idx, 1] - arr[idx, 2]) / delta[idx]
    # green is max
    idx = (arr[:, :, 1] == arr_max) &amp; ipos
    out[idx, 0] = 2. + (arr[idx, 2] - arr[idx, 0]) / delta[idx]
    # blue is max
    idx = (arr[:, :, 2] == arr_max) &amp; ipos
    out[idx, 0] = 4. + (arr[idx, 0] - arr[idx, 1]) / delta[idx]
    out[:, :, 0] = (out[:, :, 0] / 6.0) % 1.0
    out[:, :, 1] = s
    out[:, :, 2] = arr_max
    return out
</snippet></ROW><ROW><id>19744160</id><snippet>TemporaryFile</snippet></ROW><ROW><id>19744160</id><snippet>HttpResponse</snippet></ROW><ROW><id>19744160</id><snippet>response = HttpResponse('', content_type='text/plain')
response['Content-Disposition'] = 'attachment; filename="4cos_example.txt"'
response.write('first line\r\n')
response.write('second line\r\n')    
return response
</snippet></ROW><ROW><id>19744160</id><snippet>StreamingHttpResponse</snippet></ROW><ROW><id>19744160</id><snippet>Content-Length</snippet></ROW><ROW><id>19744226</id><snippet>nrow</snippet></ROW><ROW><id>19744226</id><snippet>import rpy2.robjects as robjects
from rpy2.robjects.packages import importr
ks = importr('ks')

kde_test = ks.kde_test

matr1 = [1., 3., 1., 3., 0.2, 1.5, 0.5, 1.3]
matr2 = [1., 3., 1., 3., 0.2, 1.5, 0.5, 1.3, 0.5, 4.6]  

m1 = robjects.r.matrix(robjects.FloatVector(matr1), nrow=int(len(matr1)/2), byrow=True)
m2 = robjects.r.matrix(robjects.FloatVector(matr2), nrow=int(len(matr2)/2), byrow=True)

res = kde_test(x1 = m1, x2 = m2)

pval = res.rx2('pvalue')

print float(str(pval)[4:])
</snippet></ROW><ROW><id>19744253</id><snippet>format</snippet></ROW><ROW><id>19744253</id><snippet>&gt;&gt;&gt; text = '142.55.33.1'
&gt;&gt;&gt; ' ' .join(format(int(x), '08b') for x in text.split('.'))
'10001110 00110111 00100001 00000001'
</snippet></ROW><ROW><id>19744253</id><snippet>&gt;&gt;&gt; [format(int(x), '08b') for x in text.split('.')]
['10001110', '00110111', '00100001', '00000001']
</snippet></ROW><ROW><id>19744253</id><snippet>&gt;&gt;&gt; format(8, 'b')
'1000'
&gt;&gt;&gt; format(8, '08b')  #with padding
'00001000'
</snippet></ROW><ROW><id>19744265</id><snippet>for c in itertools.combinations(zip(foo, bar, baz), 2):
    for u in zip(*c):
        print(u)
</snippet></ROW><ROW><id>19744265</id><snippet>(256, 456)
('a', 'aa')
(2.9, 2.7)
(256, 24)
('a', 'dd')
(2.9, 1.9)
(256, 79)
('a', 'e')
(2.9, 2.2)
(256, 14)
('a', 'b')
(2.9, 1.1)
(456, 24)
('aa', 'dd')
(2.7, 1.9)
(456, 79)
('aa', 'e')
(2.7, 2.2)
(456, 14)
('aa', 'b')
(2.7, 1.1)
(24, 79)
('dd', 'e')
(1.9, 2.2)
(24, 14)
('dd', 'b')
(1.9, 1.1)
(79, 14)
('e', 'b')
(2.2, 1.1)
</snippet></ROW><ROW><id>19744417</id><snippet>register(request, **form.cleaned_data)</snippet></ROW><ROW><id>19744417</id><snippet>RegistrationViewCandidate</snippet></ROW><ROW><id>19744417</id><snippet>django-registration</snippet></ROW><ROW><id>19744417</id><snippet>simple</snippet></ROW><ROW><id>19744417</id><snippet>RegistratioView</snippet></ROW><ROW><id>19744417</id><snippet>registration.backends.simple.views</snippet></ROW><ROW><id>19744417</id><snippet>registration.views</snippet></ROW><ROW><id>19744533</id><snippet>file.readlines</snippet></ROW><ROW><id>19744533</id><snippet>for path in datalist:
    shutil.copy(path.rstrip(), '/home/farted_in_your_general_direction')
</snippet></ROW><ROW><id>19744533</id><snippet>readlines</snippet></ROW><ROW><id>19744533</id><snippet>for ... in &lt;file&gt;</snippet></ROW><ROW><id>19744533</id><snippet>with</snippet></ROW><ROW><id>19744533</id><snippet>readlines</snippet></ROW><ROW><id>19744533</id><snippet>import shutil

with open('/home/shrubbery.txt') as f:
    for path in f:
        shutil.copy(path.rstrip(), '/home/farted_in_your_general_direction')
</snippet></ROW><ROW><id>19744651</id><snippet>f1 = lambda x: "a" + x
f2 = lambda x: x + "a"
l2 = map(f1,lst) + map(f2,lst)
print l2
</snippet></ROW><ROW><id>19744714</id><snippet>for i in text2:
</snippet></ROW><ROW><id>19744714</id><snippet>for i, char in enumerate(text2):
</snippet></ROW><ROW><id>19744714</id><snippet>text2 = "Welcome"
for i in text2:
    print i,
</snippet></ROW><ROW><id>19744714</id><snippet>W e l c o m e
</snippet></ROW><ROW><id>19744714</id><snippet>text2 = "Welcome"
for i, char in enumerate(text2):
    print i, char
</snippet></ROW><ROW><id>19744714</id><snippet>0 W
1 e
2 l
3 c
4 o
5 m
6 e
</snippet></ROW><ROW><id>19744748</id><snippet># intellectual property belongs to imdb    
import urllib2
from bs4 import BeautifulSoup

# get the SOUP: tree structure out of the HTML page
soup = BeautifulSoup(urllib2.urlopen("http://www.imdb.com/title/tt0413573/episodes?season=10"))

result = {}
for div in soup.find_all("div", {"class":"airdate"}):
    # get the date and number and store in a dictionary
    date = div.text.encode('utf-8').strip()
    number = div.find_previous_sibling()['content']
    result[number] = date

print result
</snippet></ROW><ROW><id>19744748</id><snippet>{'10': 'Nov. 21, 2013', '1': 'Sep. 26, 2013', '3': 'Oct. 3, 2013', '2': 'Sep. 26, 2013', '5': 'Oct. 17, 2013', '4': 'Oct. 10, 2013', '7': 'Oct. 31, 2013', '6': 'Oct. 24, 2013', '9': 'Nov. 14, 2013', '8': 'Nov. 7, 2013'}
</snippet></ROW><ROW><id>19744780</id><snippet>str.replace</snippet></ROW><ROW><id>19744780</id><snippet>&gt;&gt;&gt; "Please go away, DND".replace('DND', 'do not disturb')
'Please go away, do not disturb'
</snippet></ROW><ROW><id>19744780</id><snippet>&gt;&gt;&gt; excuses = ["Please go away, DND", "Didn't you hear me? DND", "I said DND!"]
&gt;&gt;&gt; [excuse.replace('DND', 'do not disturb') for excuse in excuses]
['Please go away, do not disturb', "Didn't you hear me? do not disturb", 'I said do not disturb!']
</snippet></ROW><ROW><id>19744844</id><snippet>Task</snippet></ROW><ROW><id>19744844</id><snippet>def mkTask(myName, myPriority):
    task = Task()
    task.task = myName
    task.priority = myPriority
    return task
</snippet></ROW><ROW><id>19744844</id><snippet>mkTask</snippet></ROW><ROW><id>19744844</id><snippet>mkTask('foobar', 5)
</snippet></ROW><ROW><id>19744905</id><snippet>itertools</snippet></ROW><ROW><id>19744905</id><snippet>itertools</snippet></ROW><ROW><id>19744905</id><snippet>def uprod(*seqs):
    def inner(i):
        if i == n:
            yield tuple(result)
            return
        for elt in sets[i] - seen:
            seen.add(elt)
            result[i] = elt
            for t in inner(i+1):
                yield t
            seen.remove(elt)

    sets = [set(seq) for seq in seqs]
    n = len(sets)
    seen = set()
    result = [None] * n
    for t in inner(0):
        yield t
</snippet></ROW><ROW><id>19744905</id><snippet>&gt;&gt;&gt; print list(uprod([1, 2, 1], [2, 4, 4], [5, 6, 5]))
[(1, 2, 5), (1, 2, 6), (1, 4, 5), (1, 4, 6), (2, 4, 5), (2, 4, 6)]
&gt;&gt;&gt; print list(uprod([1], [1, 2], [1, 2, 4], [1, 5, 6]))
[(1, 2, 4, 5), (1, 2, 4, 6)]
&gt;&gt;&gt; print list(uprod([1], [1, 2, 4], [1, 5, 6], [1]))
[]
&gt;&gt;&gt; print list(uprod([1, 2], [3, 4]))
[(1, 3), (1, 4), (2, 3), (2, 4)]
</snippet></ROW><ROW><id>19745029</id><snippet>listOfLists = [listOdd, listPrimes]
</snippet></ROW><ROW><id>19745029</id><snippet>3</snippet></ROW><ROW><id>19745029</id><snippet>"3"</snippet></ROW><ROW><id>19745029</id><snippet>all()</snippet></ROW><ROW><id>19745029</id><snippet>if all("9" in l for l in listOfLists):
</snippet></ROW><ROW><id>19745035</id><snippet>FormView</snippet></ROW><ROW><id>19745035</id><snippet>FormView</snippet></ROW><ROW><id>19745133</id><snippet>from collections import deque</snippet></ROW><ROW><id>19745133</id><snippet>from collections import deque

class PriorityQueue:
    def __init__(self, priorities=10):
        self.subqueues = [deque() for _ in range(levels)]

    def enqueue(self, priorty, value):
        self.subqueues[priority].append(value)

    def dequeue(self):
        for queue in self.subqueues:
            try:
                return queue.popleft()
            except IndexError:
                continue
</snippet></ROW><ROW><id>19745156</id><snippet>{{ json.key1 }}
</snippet></ROW><ROW><id>19745156</id><snippet>json[key]</snippet></ROW><ROW><id>19745156</id><snippet>key</snippet></ROW><ROW><id>19745182</id><snippet>scores = {'alex': 1, 'dave': 1, 'mike': 2};</snippet></ROW><ROW><id>19745182</id><snippet>min()</snippet></ROW><ROW><id>19745182</id><snippet>min_keys = [k for k, x in scores.items() if not any(y &lt; x for y in scores.values())]

print('Lowest score:', str(min(scores.values())) + '.', 'Achieved by: ')
for student in min_keys:
    print(student)
</snippet></ROW><ROW><id>19745182</id><snippet>Lowest score: 1. Achieved by: 
alex
dave
</snippet></ROW><ROW><id>19745182</id><snippet>print('The average score was:', str(sum(scores.values()) / len(scores)))</snippet></ROW><ROW><id>19745182</id><snippet>The average score was: 1.3333333333333333</snippet></ROW><ROW><id>19745182</id><snippet>data</snippet></ROW><ROW><id>19745182</id><snippet>score</snippet></ROW><ROW><id>19745182</id><snippet>data</snippet></ROW><ROW><id>19745182</id><snippet>print</snippet></ROW><ROW><id>19745182</id><snippet>return</snippet></ROW><ROW><id>19745182</id><snippet>print</snippet></ROW><ROW><id>19745511</id><snippet>print(open(r'c:\your_file.txt', 'r').read())
</snippet></ROW><ROW><id>19745511</id><snippet>print(open('your_file.txt', 'r').read())
</snippet></ROW><ROW><id>19746017</id><snippet>__init__</snippet></ROW><ROW><id>19746017</id><snippet>_init_</snippet></ROW><ROW><id>19746017</id><snippet>class PointsList():
    def __init__(self):        
        self.listlist = [None]
</snippet></ROW><ROW><id>19746017</id><snippet>init</snippet></ROW><ROW><id>19746268</id><snippet>number</snippet></ROW><ROW><id>19746268</id><snippet>firstnumber</snippet></ROW><ROW><id>19746268</id><snippet>&gt;&gt;&gt; multiplication = 0
&gt;&gt;&gt; firstnumber = int(input("Enter a number: "))
Enter a number: 17
&gt;&gt;&gt; number = firstnumber
&gt;&gt;&gt; number = firstnumber
&gt;&gt;&gt; for j in range(0, 1001):
...     for i in range(0, 1001):
...         multiplication = multiplication+1
...         number = firstnumber * multiplication
...         print(str(multiplication) + " times " + str(firstnumber) + " is " + str(number))
... 
1 times 17 is 17
2 times 17 is 34
3 times 17 is 51
4 times 17 is 68
5 times 17 is 85
6 times 17 is 102
7 times 17 is 119
8 times 17 is 136
9 times 17 is 153
10 times 17 is 170
11 times 17 is 187
12 times 17 is 204
13 times 17 is 221
14 times 17 is 238
15 times 17 is 255
16 times 17 is 272
</snippet></ROW><ROW><id>19746268</id><snippet>number = int(input("Enter a number: "))
mult = int(input("How many multiples: "))
for i in range(mult+1):
    print("%d times %d is %d" %(number, i, number*i))
</snippet></ROW><ROW><id>19746421</id><snippet>class UniqueValidator(object):
""" validator that checks field uniqueness """
def __init__(self, model, field, message=None):
    self.model = model
    self.field = field
    if not message:
        message = u'Existing element with the same value.'
    self.message = message

def __call__(self, form, field):
    existing = self.model.query(getattr(self.model,self.field) == field.data).get()
    if 'id' in form:
        id = int(form.id.data)
    else:
        id = None
    if existing and (id is None or id != existing.key.id()):
        raise ValidationError(self.message)
</snippet></ROW><ROW><id>19746421</id><snippet>class QuestionEditForm(Form):
id = HiddenField('id')
question = TextField('Question', [validators.Required(),
                                  validators.Length(min=4, max=225)])
slug = TextField('Slug', validators = [validators.Required(),
                                       validators.length(max=200),
                                       UniqueValidator(
                                           Question,
                                           'slug',
                                           'Existing slug with the same value.'
                                       )])`enter code here`
</snippet></ROW><ROW><id>19746636</id><snippet>'this is a string'[::-1]</snippet></ROW><ROW><id>19746636</id><snippet>[::-1]</snippet></ROW><ROW><id>19746636</id><snippet>'abcdefghijk'[6:1:-2]</snippet></ROW><ROW><id>19746636</id><snippet>'gec'</snippet></ROW><ROW><id>19746636</id><snippet>def semordnilap(str1, str2):
    if str1 == str2[::-1]: return True
    else: return False
</snippet></ROW><ROW><id>19746636</id><snippet>def semordnilap(str1, str2):
    if not (len(str1) or len(str2)): return True
    if not (len(str1) and len(str2)): return False
    if str1[0] != str2[-1]: return False
    return semordnilap(str1[1:], str2[:-1])
</snippet></ROW><ROW><id>19746636</id><snippet>0</snippet></ROW><ROW><id>19746636</id><snippet>False</snippet></ROW><ROW><id>19746636</id><snippet>True</snippet></ROW><ROW><id>19746636</id><snippet>len(str1)</snippet></ROW><ROW><id>19746636</id><snippet>True</snippet></ROW><ROW><id>19746655</id><snippet>property</snippet></ROW><ROW><id>19746655</id><snippet>class MyClass():

    def __init__(self, value):
        self.something = value

    @property
    def something(self):
        return self.item

    @something.setter
    def set_something(self, value):
        if value is not None:
            self.time = value
        else:
            raise Error
</snippet></ROW><ROW><id>19746655</id><snippet>None</snippet></ROW><ROW><id>19746805</id><snippet>print(type(nick))</snippet></ROW><ROW><id>19746805</id><snippet>nick</snippet></ROW><ROW><id>19746805</id><snippet>Libraries.biblib.nickclass</snippet></ROW><ROW><id>19746805</id><snippet>offencesquery = Offences.query.filter_by(nick = nick).first()
</snippet></ROW><ROW><id>19746805</id><snippet>nick</snippet></ROW><ROW><id>19746805</id><snippet>nickclass</snippet></ROW><ROW><id>19746805</id><snippet>nick = 'Test'
offencesquery = Offences.query.filter_by(nick = nick).first()
</snippet></ROW><ROW><id>19746805</id><snippet>nickclass</snippet></ROW><ROW><id>19746805</id><snippet>nickname</snippet></ROW><ROW><id>19746933</id><snippet>arg1</snippet></ROW><ROW><id>19746933</id><snippet>arg2</snippet></ROW><ROW><id>19746933</id><snippet>arg3</snippet></ROW><ROW><id>19746933</id><snippet>&lt;?php var_dump($argv);  ?&gt;
</snippet></ROW><ROW><id>19746933</id><snippet>array(4) {
  [0]=&gt;
  string(10) "script.php"
  [1]=&gt;
  string(4) "arg1"
  [2]=&gt;
  string(4) "arg2"
  [3]=&gt;
  string(4) "arg3"
}
</snippet></ROW><ROW><id>19746935</id><snippet>if(y[0]-3)&lt;b and b&lt;(y[0]+3) ...
</snippet></ROW><ROW><id>19746935</id><snippet>if(a-3)&lt;b and b&lt;(a+3) ...
</snippet></ROW><ROW><id>19746935</id><snippet>y=[a]</snippet></ROW><ROW><id>19746935</id><snippet>list</snippet></ROW><ROW><id>19746935</id><snippet>randint</snippet></ROW><ROW><id>19746935</id><snippet>if (a-3) &lt; b &lt; (a+3) ...
</snippet></ROW><ROW><id>19747209</id><snippet>def get_tile():
    from random import shuffle
    tiles = list("IJLOSTZ")
    while True:
        shuffle(tiles)
        for tile in tiles:
            yield tile
</snippet></ROW><ROW><id>19747209</id><snippet>class PeekableQueue:
    def __init__(self, item_getter, maxpeek=50):
        self.getter = item_getter
        self.maxpeek = maxpeek
        self.b = [next(item_getter) for _ in range(maxpeek)]
        self.i = 0

    def pop(self):
        result = self.b[self.i]
        self.b[self.i] = next(self.getter)
        self.i += 1
        if self.i &gt;= self.maxpeek:
            self.i = 0
        return result

    def peek(self, n):
        if not 0 &lt;= n &lt;= self.maxpeek:
            raise ValueError("bad peek argument %r" % n)
        nthruend = self.maxpeek - self.i
        if n &lt;= nthruend:
            result = self.b[self.i : self.i + n]
        else:
            result = self.b[self.i:] + self.b[:n - nthruend]
        return result

q = PeekableQueue(get_tile())
</snippet></ROW><ROW><id>19747209</id><snippet>q.pop()</snippet></ROW><ROW><id>19747209</id><snippet>n</snippet></ROW><ROW><id>19747209</id><snippet>q.peek(n)</snippet></ROW><ROW><id>19747210</id><snippet>string.ascii_lowercase</snippet></ROW><ROW><id>19747210</id><snippet>&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; list(ascii_lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</snippet></ROW><ROW><id>19747303</id><snippet>cache = {}
def main():
    print "recursive method"
    print "time taken",
</snippet></ROW><ROW><id>19747303</id><snippet>    t=timeit.Timer('get_min_coin_configuration(63, [25,10,5,1], cache)',
                   'from __main__ import get_min_coin_configuration, cache')
    print min(t.repeat(3,100))
    print get_min_coin_configuration(63,[25,10,5,1])
    print '*'*45
    print "non-recursive"
    print "time taken",
    t1=timeit.Timer('change(63)',"from __main__ import change")
    print min(t1.repeat(3,100))
    print change(63)

recursive method
time taken 8.26920739926e-05
[25, 25, 10, 1, 1, 1]
*********************************************
non-recursive
time taken 0.000361219093488
(25, 25, 10, 1, 1, 1)
</snippet></ROW><ROW><id>19747326</id><snippet>end=' '</snippet></ROW><ROW><id>19747326</id><snippet>print()</snippet></ROW><ROW><id>19747326</id><snippet>for i in range(1,r+1):
    for j in range(1,c+1):
        currentNumber = i**j
        print ("{0:&gt;{1}}".format(currentNumber ,numberLength), end=' ')
    print()
</snippet></ROW><ROW><id>19747326</id><snippet>Please enter a number 5
Please enter a number 5
   1    1    1    1    1 
   2    4    8   16   32 
   3    9   27   81  243 
   4   16   64  256 1024 
   5   25  125  625 3125 
</snippet></ROW><ROW><id>19747589</id><snippet>ftp = FTP('ftp.centizen.ca','21') 
</snippet></ROW><ROW><id>19747589</id><snippet>ftp=FTP()
ftp.connect('ftp.centizen.ca', 2121)
</snippet></ROW><ROW><id>19747623</id><snippet>else</snippet></ROW><ROW><id>19747623</id><snippet>insert</snippet></ROW><ROW><id>19747623</id><snippet>queue.firstMax = newnode</snippet></ROW><ROW><id>19747623</id><snippet>firstMax</snippet></ROW><ROW><id>19747623</id><snippet>newnode.next</snippet></ROW><ROW><id>19747623</id><snippet>&lt;=</snippet></ROW><ROW><id>19747623</id><snippet>insert</snippet></ROW><ROW><id>19747623</id><snippet>def insert(queue, element):
    newnode = mkNode(element, NONE_NODE)
    if emptyQueue(queue):
        #if the queue was empty, the new node is now both the first and last one
        queue.frontMax = newnode
        queue.backMin = newnode
    elif frontMax(queue).priority &gt; newnode.data.priority:
        #if the new node has a higher priority than the first, insert at front
        newnode.next = queue.frontMax #old first is now second node
        queue.frontMax = newnode
    else:
        #the node has a lower priority than the first
        #find the next node with a lower priority, insert newnode before that
        currentnode = queue.frontMax
        while not currentnode.next == NODE_NONE:
            #traverse nodes until we find a lower priority or until the end
            if currentnode.next.data.priority &lt; newnode.data.priority:
                break
            currentnode = currentnode.next
        #insert newnode between currentnode and currentnode.next
        newnode.next = currentnodenode.next
        currentnode.next = newnode
        #if newnode.next is now NODE_NONE, we're at the end so change backMin
        if newnode.next == NODE_NONE:
            queue.backMin = newnode

    queue.size += 1
</snippet></ROW><ROW><id>19747635</id><snippet>attr=[]</snippet></ROW><ROW><id>19747635</id><snippet>attr</snippet></ROW><ROW><id>19747635</id><snippet>attr=[]</snippet></ROW><ROW><id>19747635</id><snippet>MyClass(attr=[1,2])</snippet></ROW><ROW><id>19747808</id><snippet>GPIO</snippet></ROW><ROW><id>19747808</id><snippet>GPIO</snippet></ROW><ROW><id>19747808</id><snippet>from gpio import GPIO
import module1

print "main: %s" % GPIO.__name__
# Do stuff wth GPIO

module1.Relay()
</snippet></ROW><ROW><id>19747808</id><snippet># Sets GPIO's to HIGH = Relays OFF
try:
    import RPi.GPIO as GPIO
except RuntimeError:
    print("Error importing RPi.GPIO!!")

print "Setting up GPIO"
GPIO.state = 'initialized'
print "Done setting up"
</snippet></ROW><ROW><id>19747808</id><snippet>from gpio import GPIO

def Relay():
    print "Relay: %s" % GPIO.__name__
    # Do stuff with GPIO
</snippet></ROW><ROW><id>19747808</id><snippet>main.py</snippet></ROW><ROW><id>19747808</id><snippet>Setting up GPIO
Done setting up
main: RPi.GPIO
Relay: RPi.GPIO
</snippet></ROW><ROW><id>19747808</id><snippet>gpio.py</snippet></ROW><ROW><id>19747808</id><snippet># Sets GPIO's to HIGH = Relays OFF
try:
    import RPi.GPIO as GPIO
except RuntimeError:
    print("Error importing RPi.GPIO!!")

print "Setting up GPIO"
GPIO.state = 'initialized'
print "Done setting up"

import module1

print "main: %s" % GPIO.__name__
# Do stuff wth GPIO

module1.Relay(GPIO)
</snippet></ROW><ROW><id>19747808</id><snippet>def Relay(gpio):
    print "Relay: %s" % gpio.__name__
    # Do stuff with GPIO
</snippet></ROW><ROW><id>19747808</id><snippet>gpio.py</snippet></ROW><ROW><id>19748014</id><snippet>import os

def fcount(path, map = {}):
  count = 0
  for f in os.listdir(path):
    child = os.path.join(path, f)
    if os.path.isdir(child):
      child_count = fcount(child, map)
      count += child_count + 1 # unless include self
  map[path] = count
  return count

path = "/Desktop/lay"
map = {}
print fcount(path, map)
</snippet></ROW><ROW><id>19748175</id><snippet>figure(figsize=(xsize,ysize))
</snippet></ROW><ROW><id>19748175</id><snippet>text(x, y, '%.1f' % x,
     horizontalalignment='center', size=size)
</snippet></ROW><ROW><id>19748193</id><snippet>add_multi_representer</snippet></ROW><ROW><id>19748193</id><snippet># Change this line:
# yaml.SafeDumper.add_representer(MyTestCase, repr_testcase)

# to this line:
yaml.SafeDumper.add_multi_representer(MyTestCase, repr_testcase)
</snippet></ROW><ROW><id>19748272</id><snippet>socat - unix-connect:/tmp/foo.sock,crnl
</snippet></ROW><ROW><id>19748341</id><snippet>MyModel.objects.none()</snippet></ROW><ROW><id>19748341</id><snippet>ModelFormSet = modelformset_factory(MyModel)
if request.method == 'POST':
    formset = ModelFormSet(request.POST, request.FILES, queryset=MyModel.objects.none())
    if formset.is_valid():
        formset.save()
        # do something.
else:
    formset = ModelFormSet(queryset=MyModel.objects.none())
</snippet></ROW><ROW><id>19748359</id><snippet>people = models.UserRelationships.query.filter_by(user_id=user_id, active=ACTIVE_RECORD)
friends = people.filter_by(friends=YES)

return jsonify(friends.first().as_dict())
</snippet></ROW><ROW><id>19748496</id><snippet>Accept</snippet></ROW><ROW><id>19748496</id><snippet>req.add_header('Accept', 'arpplication/json')
</snippet></ROW><ROW><id>19748496</id><snippet>application</snippet></ROW><ROW><id>19748496</id><snippet>req.add_header('Accept', 'application/json')
</snippet></ROW><ROW><id>19748505</id><snippet>people = {}

for line in f:
    tmp = l.rstrip('\n').split(',')
    people[tmp[2]] = tmp[0]
</snippet></ROW><ROW><id>19748505</id><snippet>.readline()</snippet></ROW><ROW><id>19748505</id><snippet>csv</snippet></ROW><ROW><id>19748505</id><snippet>import csv

people = {}

with open("people.in", "rb") as f:
    reader = csv.reader(f)
    for row in reader:
        people[row[2]] = row[0]
</snippet></ROW><ROW><id>19748505</id><snippet>import csv

with open("people.in", "rb") as f:
    reader = csv.reader(f)
    people = {r[2]: r[0] for r in reader}
</snippet></ROW><ROW><id>19748505</id><snippet>csv</snippet></ROW><ROW><id>19748505</id><snippet>{</snippet></ROW><ROW><id>19748505</id><snippet>)</snippet></ROW><ROW><id>19748505</id><snippet>}</snippet></ROW><ROW><id>19748505</id><snippet>people = {tmp[2] : tmp[0])  # should be }
</snippet></ROW><ROW><id>19748505</id><snippet>row[2]</snippet></ROW><ROW><id>19748505</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19748505</id><snippet>import csv
from collections import defaultdict

people = defaultdict(list)

with open("people.in", "rb") as f:
    reader = csv.reader(f)
    for row in reader:
        people[row[2]].append(row[0])
</snippet></ROW><ROW><id>19748574</id><snippet>class Guitarist(object):

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)

    def __repr__(self):
        return "&lt;{0}('{1}')&gt;".format(self.__class__.__name__, 
                                     "', '".join(self.__dict__.values()))

if __name__ == '__main__':
    print(Guitarist(fname='Jimi', lname='Hendrix', dob='11/27/1942'))
</snippet></ROW><ROW><id>19748574</id><snippet>&lt;Guitarist('Jimi', 'Hendrix', '11/27/1942')&gt;
</snippet></ROW><ROW><id>19748645</id><snippet>class Inner:

    def __init__(self, context, hierarchy):
        self.children = []
        next_level = hierarchy[0]
        next_level_contexts = get_contexts(next_level)
        for context in next_level_contexts:
            child_context = parent_context.new_child().update(context)
            if next_level == hierarchy[-1]:
                self.children.append(Leaf(context))
            else:
                self.children.append(Inner(child_context, hierarchy[1:]))

    def do_something(self):
        # this will do something on the left-most leaf                         
        self.children[0].so_something()

    def prune(self):
        # this will remove the left-most leaf                                  
        if isinstance(self.children[0], Leaf):
            self.children.pop(0)
        else:
            self.children[0].prune()
            if not self.children[0]:
                self.children.pop(0)

    def __bool__(self):
        return bool(self.children)

class Leaf:

    def __init__(self, context):
        self.context = context

    def do_something(): 
        do_something(**self.context)
</snippet></ROW><ROW><id>19748645</id><snippet>do_something</snippet></ROW><ROW><id>19748645</id><snippet>prune</snippet></ROW><ROW><id>19748645</id><snippet>tree = Inner(initial_context, initial_hierarchy)
while tree:
    tree.do_something()
    tree.prune()
</snippet></ROW><ROW><id>19748711</id><snippet>rep = dict(zip(findlist, replacelist))

s = ifile.read()
for item in findlist:
    s = s.replace(item, rep[item])
ofile.write(s)
</snippet></ROW><ROW><id>19748711</id><snippet>dict</snippet></ROW><ROW><id>19748711</id><snippet>s = ifile.read()
for item, replacement in zip(findlist, replacelist):
    s = s.replace(item, replacement)
ofile.write(s)
</snippet></ROW><ROW><id>19749139</id><snippet>grunt.initConfig({
    shell: {
        pythonServer: {
            options: {
                stdout: true
            },
            command: 'python manage.py runserver 0.0.0.0:8000 --insecure'
        }
    }
});

grunt.loadNpmTasks('grunt-shell');
grunt.registerTask('default', ['shell:pythonServer']);
</snippet></ROW><ROW><id>19749149</id><snippet>shell=False</snippet></ROW><ROW><id>19749149</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>19749149</id><snippet>cd</snippet></ROW><ROW><id>19749149</id><snippet>target_folder = "/test_folder_path"
command_line = "cd " + target_folder + " &amp;&amp; ls -nR | grep -v '^d' | awk '{total += $5} END {print total}'"
folder_size = subprocess.check_output(command_line, shell=True)
</snippet></ROW><ROW><id>19749149</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; folder_size = subprocess.check_output('cd ~/mydir &amp;&amp; du -c | tail -n 1', shell=True)
&gt;&gt;&gt; folder_size
b'113576\ttotal\n'
</snippet></ROW><ROW><id>19749149</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19749149</id><snippet>check_output</snippet></ROW><ROW><id>19749149</id><snippet>cwd</snippet></ROW><ROW><id>19749149</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; result = subprocess.check_output('du -c | tail -n 1', cwd='/path/to/home/mydir', shell=True)
&gt;&gt;&gt; result
'113576\ttotal\n'
</snippet></ROW><ROW><id>19749340</id><snippet>from bisect import bisect_left

istart = 0
while istart &lt; len(hugelist):
    ifinish = bisect_left(hugelist, (maxx, 0, 0), lo=istart)
    # Now work on the slice hugelist[istart:ifinish].
    # It's possible that istart == ifinish, i.e. that the
    # slice is empty!
    maxx += deltax
    istart = ifinish
</snippet></ROW><ROW><id>19749340</id><snippet>len(hugelist)</snippet></ROW><ROW><id>19749340</id><snippet>bisect_left()</snippet></ROW><ROW><id>19749340</id><snippet>maxx</snippet></ROW><ROW><id>19749340</id><snippet>hugelist = [(0,0,0), (1,0,0), (3,0,0), (4,1,1), (4,2,2), (5,0,0)]
maxx = 0
deltax = 1
istart = 0
while istart &lt; len(hugelist):
    ifinish = bisect_left(hugelist, (maxx, 0, 0), lo=istart)
    # Now work on the slice hugelist[istart:ifinish].
    # It's possible that istart == ifinish, i.e. that the
    # slice is empty!
    print "for maxx =", maxx, hugelist[istart:ifinish]
    maxx += deltax
    istart = ifinish
</snippet></ROW><ROW><id>19749340</id><snippet>for maxx = 0 []
for maxx = 1 [(0, 0, 0)]
for maxx = 2 [(1, 0, 0)]
for maxx = 3 []
for maxx = 4 [(3, 0, 0)]
for maxx = 5 [(4, 1, 1), (4, 2, 2)]
for maxx = 6 [(5, 0, 0)]
</snippet></ROW><ROW><id>19749394</id><snippet>Interface</snippet></ROW><ROW><id>19749394</id><snippet>root = Tk()
ui = Interface(root)
ui.pack(side="top", fill="both", expand=True)
ui.mainloop()
</snippet></ROW><ROW><id>19749394</id><snippet>pack</snippet></ROW><ROW><id>19749394</id><snippet>ui</snippet></ROW><ROW><id>19749394</id><snippet>pack</snippet></ROW><ROW><id>19749394</id><snippet>grid</snippet></ROW><ROW><id>19749394</id><snippet>place</snippet></ROW><ROW><id>19749394</id><snippet>pack</snippet></ROW><ROW><id>19749394</id><snippet>self.canvas.pack(side="top", fill="both", expand=True)
</snippet></ROW><ROW><id>19749394</id><snippet>menu</snippet></ROW><ROW><id>19749394</id><snippet>self.master.configure(menu=self.m)
</snippet></ROW><ROW><id>19749414</id><snippet>teams = ['big','small','big','foo','bar','bar','foo']
teams = sorted(list(set(teams)))

In [12]: teams
Out[12]: ['bar', 'big', 'foo', 'small']
</snippet></ROW><ROW><id>19749414</id><snippet>set</snippet></ROW><ROW><id>19749445</id><snippet>str.replace(u"\uFEF5", "#")
</snippet></ROW><ROW><id>19749480</id><snippet>filter(lambda x: x &gt;= 0, list2)
</snippet></ROW><ROW><id>19749480</id><snippet>[x for x in list2 if x &gt;= 0]
</snippet></ROW><ROW><id>19749480</id><snippet>(index)        list1            elem
   0      [-1,3,-2,-5,4,7,8]     -1
   1      [3,-2,-5,4,7,8]        -2
   2      [3,-5,4,7,8]            4
   3      [3,4,7,8]               8
</snippet></ROW><ROW><id>19749480</id><snippet>(index)        (copy)             list2            elem
   0     [-1,3,-2,-5,4,7,8]  [-1,3,-2,-5,4,7,8]     -1
   1     [-1,3,-2,-5,4,7,8]  [3,-2,-5,4,7,8]         3
   2     [-1,3,-2,-5,4,7,8]  [3,-2,-5,4,7,8]        -2
   3     [-1,3,-2,-5,4,7,8]  [3,-5,4,7,8]           -5
   4     [-1,3,-2,-5,4,7,8]  [3,4,7,8]               4
   5     [-1,3,-2,-5,4,7,8]  [3,4,7,8]               7
   6     [-1,3,-2,-5,4,7,8]  [3,4,7,8]               8
</snippet></ROW><ROW><id>19749480</id><snippet>list2[:]</snippet></ROW><ROW><id>19749480</id><snippet>list2[0:len(list2):1]</snippet></ROW><ROW><id>19749480</id><snippet>list(list2)</snippet></ROW><ROW><id>19749498</id><snippet>XInputSetState()</snippet></ROW><ROW><id>19749498</id><snippet>ctypes</snippet></ROW><ROW><id>19749498</id><snippet>import ctypes

# Define necessary structures
class XINPUT_VIBRATION(ctypes.Structure):
    _fields_ = [("wLeftMotorSpeed", ctypes.c_ushort),
                ("wRightMotorSpeed", ctypes.c_ushort)]

xinput = ctypes.windll.xinput1_1  # Load Xinput.dll

# Set up function argument types and return type
XInputSetState = xinput.XInputSetState
XInputSetState.argtypes = [ctypes.c_uint, ctypes.POINTER(XINPUT_VIBRATION)]
XInputSetState.restype = ctypes.c_uint

# Now we're ready to call it.  Set left motor to 100%, right motor to 50%
# for controller 0
vibration = XINPUT_VIBRATION(65535, 32768)
XInputSetState(0, ctypes.byref(vibration))

# You can also create a helper function like this:
def set_vibration(controller, left_motor, right_motor):
    vibration = XINPUT_VIBRATION(int(left_motor * 65535), int(right_motor * 65535))
    XInputSetState(controller, ctypes.byref(vibration))

# ... and use it like so
set_vibration(0, 1.0, 0.5)
</snippet></ROW><ROW><id>19749561</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; lol = [[1,2],[1,3],[3,4]]
&gt;&gt;&gt; k = len(lol[0])
&gt;&gt;&gt; pair_sets = (set().union(*x) for x in combinations(lol,2))
&gt;&gt;&gt; keep = [sorted(x) for x in pair_sets if len(x) == k+1]
&gt;&gt;&gt; keep
[[1, 2, 3], [1, 3, 4]]
</snippet></ROW><ROW><id>19749561</id><snippet>set().union(*x)</snippet></ROW><ROW><id>19749561</id><snippet>set(x[0]).union(x[1])</snippet></ROW><ROW><id>19749561</id><snippet>pair_sets</snippet></ROW><ROW><id>19749561</id><snippet>&gt;&gt;&gt; pair_sets = list(set().union(*x) for x in combinations(lol,2))
[set([1, 2, 3]), set([1, 2, 3, 4]), set([1, 3, 4])]
</snippet></ROW><ROW><id>19749561</id><snippet>k+1</snippet></ROW><ROW><id>19749719</id><snippet>import Tkinter
#Set up a basic canvas
top = Tkinter.Tk()
canv = Tkinter.Canvas(top, bg="brown", height=250, width=300)

#Replace with what ever values you want
x = 50
y = 50

#Draw the first dot
line1 = canv.create_line(x, y, x - 2, y - 2, fill="green", width=3)
#This next line is pretty much all it takes to find the Y inverse
y = canv.winfo_reqheight() - y
#Draw the second dot
line2 = canv.create_line(x, y, x - 2, y - 2, fill="green", width = 3)

canv.pack()
top.mainloop()
</snippet></ROW><ROW><id>19749832</id><snippet>soup.find(lambda tag: tag.name == 'b' and
          "Particulate Matter" in tag.text)
</snippet></ROW><ROW><id>19749851</id><snippet>&gt;&gt;&gt; print(list(itertools.product(['a', 'b'], ['c', 'd'])))
[('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd')]
</snippet></ROW><ROW><id>19749865</id><snippet>def Buttons():
    global button1
    button1=Rectangle(Point(1,1),Point(100,100))
    button1.setFill('gold')
    button.draw(keyPad)
</snippet></ROW><ROW><id>19750299</id><snippet>name_company = soup.findAll("div", {"class" : "title"})
soup = BeautifulSoup(page) #this is the first time you define soup
</snippet></ROW><ROW><id>19750299</id><snippet>soup</snippet></ROW><ROW><id>19750299</id><snippet>soup.findAll</snippet></ROW><ROW><id>19750299</id><snippet>soup</snippet></ROW><ROW><id>19750299</id><snippet>findAll</snippet></ROW><ROW><id>19750320</id><snippet>&gt;&gt;&gt; def firstn(n):
...     num, nums = 0, []
...     while num &lt; n:
...         nums.append(nums)
...         num += 1
...     return nums
...
&gt;&gt;&gt; sum_of_first_n = sum(firstn(1000000))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'int' and 'list'
</snippet></ROW><ROW><id>19750320</id><snippet>nums.append(nums)
</snippet></ROW><ROW><id>19750320</id><snippet>&gt;&gt;&gt; def firstn(n):
...     num, nums = 0, []
...     while num &lt; n:
...         nums.append(num) # &lt;--
...         num += 1
...     return nums
...
&gt;&gt;&gt; sum_of_first_n = sum(firstn(1000000))
&gt;&gt;&gt; sum_of_first_n
499999500000L
</snippet></ROW><ROW><id>19750374</id><snippet>formacao = models.ManyToManyField(max_length=20, choices=OPCAO_FORMACAO)
</snippet></ROW><ROW><id>19750374</id><snippet>formacao</snippet></ROW><ROW><id>19750433</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; a = Fraction(1,2)
&gt;&gt;&gt; a.denominator
2
</snippet></ROW><ROW><id>19750433</id><snippet>help()</snippet></ROW><ROW><id>19750433</id><snippet>Fraction</snippet></ROW><ROW><id>19750433</id><snippet>help(Fraction)</snippet></ROW><ROW><id>19750433</id><snippet>help(a)</snippet></ROW><ROW><id>19750441</id><snippet>__</snippet></ROW><ROW><id>19750441</id><snippet>__getattribute__</snippet></ROW><ROW><id>19750441</id><snippet>__getattribute__</snippet></ROW><ROW><id>19750441</id><snippet>__str__</snippet></ROW><ROW><id>19750484</id><snippet>SQLAlchemy(app)</snippet></ROW><ROW><id>19750484</id><snippet>app</snippet></ROW><ROW><id>19750484</id><snippet>self.app</snippet></ROW><ROW><id>19750484</id><snippet>init_app(app)</snippet></ROW><ROW><id>19750484</id><snippet>app</snippet></ROW><ROW><id>19750484</id><snippet>current_app</snippet></ROW><ROW><id>19750484</id><snippet>db</snippet></ROW><ROW><id>19750484</id><snippet>db.init_app(app)</snippet></ROW><ROW><id>19750513</id><snippet>@app.route('/&lt;slug&gt;')
def redirect(slug):
    return redirect('http://google.com/')
</snippet></ROW><ROW><id>19750513</id><snippet>redirect()</snippet></ROW><ROW><id>19750513</id><snippet>return redirect(...)</snippet></ROW><ROW><id>19750513</id><snippet>slug</snippet></ROW><ROW><id>19750513</id><snippet>redirect()</snippet></ROW><ROW><id>19750692</id><snippet>ll =[['AAA','MG_00013'],
    ['AAA','MG_00177'],
    ['AAA','MG_00005'],
    ['BBB','MG_0045'],
    ['BBB','MG_00080'],
    ['CCC','MG_0002']]

d = {}
for l in ll:
    # If key is not the dict, insert the entry into dict
    if l[0] not in d:
        d[l[0]] = l[1]
    # If key is already in the dict, update the entry if value is smaller
    elif int(l[1][3:]) &lt; int(d[l[0]][3:]):
        d[l[0]] = l[1]

print d
</snippet></ROW><ROW><id>19750692</id><snippet>{'AAA': 'MG_00005', 'BBB': 'MG_0045', 'CCC': 'MG_0002'}
</snippet></ROW><ROW><id>19750699</id><snippet>import re

class ParseError(Exception):
    pass

# Tokenize a string.
# Tokens yielded are of the form (type, string)
# Possible values for 'type' are '(', ')' and 'WORD'
def tokenize(s):
    toks = re.compile(' +|[A-Za-z]+|[()]')
    for match in toks.finditer(s):
        s = match.group(0)
        if s[0] == ' ':
            continue
        if s[0] in '()':
            yield (s, s)
        else:
            yield ('WORD', s)


# Parse once we're inside an opening bracket.
def parse_inner(toks):
    ty, name = next(toks)
    if ty != 'WORD': raise ParseError
    children = []
    while True:
        ty, s = next(toks)
        if ty == '(':
            children.append(parse_inner(toks))
        elif ty == ')':
            return (name, children)

# Parse this grammar:
# ROOT ::= '(' INNER
# INNER ::= WORD ROOT* ')'
# WORD ::= [A-Za-z]+
def parse_root(toks):
    ty, _ = next(toks)
    if ty != '(': raise ParseError
    return parse_inner(toks)

def show_children(tree):
    name, children = tree
    if not children: return
    print '%s -&gt; %s' % (name, ' '.join(child[0] for child in children))
    for child in children:
        show_children(child)

example = '( Root ( AB ( ABC ) ( CBA ) ) ( CD ( CDE ) ( FGH ) ) )'
show_children(parse_root(tokenize(example)))
</snippet></ROW><ROW><id>19750785</id><snippet>.*</snippet></ROW><ROW><id>19750785</id><snippet>.*,</snippet></ROW><ROW><id>19750785</id><snippet>,</snippet></ROW><ROW><id>19750785</id><snippet>.*?</snippet></ROW><ROW><id>19750785</id><snippet>re.match</snippet></ROW><ROW><id>19750785</id><snippet>re.findall</snippet></ROW><ROW><id>19750785</id><snippet>&gt;&gt;&gt; s = "keep, ignore, keep_this_too, ignore, keep_this_also, ignore"
&gt;&gt;&gt; re.findall(r'([^,\s]+)', s)
['keep', 'ignore', 'keep_this_too', 'ignore', 'keep_this_also', 'ignore']
&gt;&gt;&gt; re.findall(r'([^,\s]+)', s)[::2] # using slice to get every other matches.
['keep', 'keep_this_too', 'keep_this_also']
</snippet></ROW><ROW><id>19750785</id><snippet>&gt;&gt;&gt; re.findall(r'([^,\s]+)(?:,\s*[^,\s]+)?', s)
['keep', 'keep_this_too', 'keep_this_also']
</snippet></ROW><ROW><id>19751001</id><snippet>self.connect(self,SIGNAL("textChanged(QString&amp;)"),
            self,SLOT("textChanged(QString *)"))
</snippet></ROW><ROW><id>19751001</id><snippet>self.connect(self,SIGNAL("textChanged(QString)"),
            self,SLOT("textChanged(QString)"))
</snippet></ROW><ROW><id>19751001</id><snippet>self.textChanged.connect</snippet></ROW><ROW><id>19751001</id><snippet>class DirLineEdit(QLineEdit, QtCore.QObject):

    def on_text_changed(self, string):
            QtGui.QMessageBox.information(self,"Hello!","Current String is:\n"+string)  

    def __init__(self):
        super(DirLineEdit, self).__init__()
        self.textChanged.connect(self.on_text_changed)
</snippet></ROW><ROW><id>19751100</id><snippet>&gt;&gt;&gt; ip_address = '123.45.67.89'
&gt;&gt;&gt; numbers = list(map(int, ip_address.split('.')))
&gt;&gt;&gt; '2002:{:02x}{:02x}:{:02x}{:02x}::'.format(*numbers)
'2002:7b2d:4359::'
</snippet></ROW><ROW><id>19751121</id><snippet>input</snippet></ROW><ROW><id>19751121</id><snippet>eval</snippet></ROW><ROW><id>19751121</id><snippet>raw_input</snippet></ROW><ROW><id>19751121</id><snippet>Equivalent to eval(raw_input(prompt)).
</snippet></ROW><ROW><id>19751274</id><snippet>in</snippet></ROW><ROW><id>19751274</id><snippet>query = 'select * from (select * from flingfix_user_profile where
domain=%s and sex=%s) as a left outer join (select * from flingfix_rating where
rater_id=%s) as b ON a.id = b.ratee_id where rater_id IS NULL and a.id 
not in ({}) LIMIT %s'.format(','.join(['%s' for _ in range(len(parameters))]))
</snippet></ROW><ROW><id>19751274</id><snippet>parameters</snippet></ROW><ROW><id>19751274</id><snippet>not in</snippet></ROW><ROW><id>19751274</id><snippet>params</snippet></ROW><ROW><id>19751274</id><snippet>params = ['illinois', 'F', '24'] + parameters + [10]
qs = MyModel.objects.raw(query,params)
</snippet></ROW><ROW><id>19751274</id><snippet>not in (%s, %s)</snippet></ROW><ROW><id>19751274</id><snippet>not in (%s)</snippet></ROW><ROW><id>19751586</id><snippet>1 in () == False</snippet></ROW><ROW><id>19751586</id><snippet>(1 in ()) == False</snippet></ROW><ROW><id>19751586</id><snippet>(1 in ()) and (() == False)
</snippet></ROW><ROW><id>19751586</id><snippet>(1 in ())</snippet></ROW><ROW><id>19751586</id><snippet>False and something_else</snippet></ROW><ROW><id>19751586</id><snippet>False</snippet></ROW><ROW><id>19751586</id><snippet>something_else</snippet></ROW><ROW><id>19751586</id><snippet>x &lt; y &lt;= z</snippet></ROW><ROW><id>19751586</id><snippet>x &lt; y and y &lt;= z</snippet></ROW><ROW><id>19751586</id><snippet>y</snippet></ROW><ROW><id>19751586</id><snippet>z</snippet></ROW><ROW><id>19751586</id><snippet>x &lt; y</snippet></ROW><ROW><id>19751586</id><snippet>&lt;</snippet></ROW><ROW><id>19751586</id><snippet>&gt;</snippet></ROW><ROW><id>19751586</id><snippet>==</snippet></ROW><ROW><id>19751586</id><snippet>&gt;=</snippet></ROW><ROW><id>19751586</id><snippet>&lt;=</snippet></ROW><ROW><id>19751586</id><snippet>!=</snippet></ROW><ROW><id>19751586</id><snippet>is</snippet></ROW><ROW><id>19751586</id><snippet>is not</snippet></ROW><ROW><id>19751586</id><snippet>in</snippet></ROW><ROW><id>19751586</id><snippet>not in</snippet></ROW><ROW><id>19751586</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>19751586</id><snippet>is</snippet></ROW><ROW><id>19751586</id><snippet>True</snippet></ROW><ROW><id>19751586</id><snippet>False</snippet></ROW><ROW><id>19751586</id><snippet>None</snippet></ROW><ROW><id>19751586</id><snippet>&gt;&gt;&gt; (1 in ()) is False
True
</snippet></ROW><ROW><id>19751586</id><snippet>bool</snippet></ROW><ROW><id>19751586</id><snippet>int</snippet></ROW><ROW><id>19751586</id><snippet>False == 0</snippet></ROW><ROW><id>19751586</id><snippet>True == 1</snippet></ROW><ROW><id>19751586</id><snippet>3 &gt; 1 == True
</snippet></ROW><ROW><id>19751586</id><snippet>3 &gt; 1</snippet></ROW><ROW><id>19751586</id><snippet>1 == True</snippet></ROW><ROW><id>19751586</id><snippet>3 &gt; 2 == True
</snippet></ROW><ROW><id>19751586</id><snippet>2 == True</snippet></ROW><ROW><id>19751586</id><snippet>bool</snippet></ROW><ROW><id>19751586</id><snippet>int</snippet></ROW><ROW><id>19751586</id><snippet>bool</snippet></ROW><ROW><id>19751586</id><snippet>bool</snippet></ROW><ROW><id>19751606</id><snippet>SOAPAction</snippet></ROW><ROW><id>19751606</id><snippet>from SOAPpy import SOAPProxy
from datetime import datetime

input = datetime.now()
namespace = "http://web.cbr.ru/"
url = "http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx"

proxy = SOAPProxy(url, namespace)
proxy.config.debug = 1
proxy.GetCursOnDate(input)
</snippet></ROW><ROW><id>19751606</id><snippet>*** Outgoing HTTP headers ***************************
POST /DailyInfoWebServ/DailyInfo.asmx HTTP/1.0
Host: www.cbr.ru
User-agent: SOAPpy 0.12.5 (http://pywebsvcs.sf.net)
Content-type: text/xml; charset=UTF-8
Content-length: 406
SOAPAction: "GetCursOnDate"
*****************************************************
</snippet></ROW><ROW><id>19751606</id><snippet>http://web.cbr.ru/GetCursOnDate</snippet></ROW><ROW><id>19751606</id><snippet>from SOAPpy import SOAPProxy
from datetime import datetime

input = datetime.now()
namespace = "http://web.cbr.ru/"
url = "http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx"
soapaction = "http://web.cbr.ru/GetCursOnDate"

proxy = SOAPProxy(url, namespace = namespace, soapaction = soapaction)
proxy.config.debug = 1
proxy.GetCursOnDate(input)
</snippet></ROW><ROW><id>19751606</id><snippet>*** Outgoing HTTP headers ***************************
POST /DailyInfoWebServ/DailyInfo.asmx HTTP/1.0
Host: www.cbr.ru
User-agent: SOAPpy 0.12.5 (http://pywebsvcs.sf.net)
Content-type: text/xml; charset=UTF-8
Content-length: 406
SOAPAction: "http://web.cbr.ru/GetCursOnDate"
*****************************************************
</snippet></ROW><ROW><id>19751606</id><snippet>v1</snippet></ROW><ROW><id>19751606</id><snippet>v2</snippet></ROW><ROW><id>19751606</id><snippet>v3</snippet></ROW><ROW><id>19751606</id><snippet>MethodParameterNaming.txt</snippet></ROW><ROW><id>19751606</id><snippet>&lt;SOAP-ENV:Body&gt;
    &lt;ns1:GetCursOnDate xmlns:ns1="http://web.cbr.ru/" SOAP-ENC:root="1"&gt;
        &lt;v1&gt;
        &lt;/v1&gt;
    &lt;/ns1:GetCursOnDate&gt;
&lt;/SOAP-ENV:Body&gt;
</snippet></ROW><ROW><id>19751606</id><snippet>On_date</snippet></ROW><ROW><id>19751606</id><snippet>v1</snippet></ROW><ROW><id>19751606</id><snippet>from SOAPpy import SOAPProxy
from datetime import datetime

input = datetime.now()
namespace = "http://web.cbr.ru/"
url = "http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx"
soapaction = "http://web.cbr.ru/GetCursOnDate"

proxy = SOAPProxy(url, namespace = namespace, soapaction = soapaction)
proxy.config.debug = 1
proxy.GetCursOnDate(On_date = input)
</snippet></ROW><ROW><id>19751606</id><snippet>&lt;SOAP-ENV:Body&gt;
    &lt;ns1:GetCursOnDate xmlns:ns1="http://web.cbr.ru/" SOAP-ENC:root="1"&gt;
       &lt;On_date&gt;
       &lt;/On_date&gt;
    &lt;/ns1:GetCursOnDate&gt;
&lt;/SOAP-ENV:Body&gt;
</snippet></ROW><ROW><id>19751606</id><snippet>datetime</snippet></ROW><ROW><id>19751606</id><snippet>&lt;ns1:On_date&gt;</snippet></ROW><ROW><id>19751606</id><snippet>&lt;On_date&gt;</snippet></ROW><ROW><id>19751606</id><snippet>SOAPBuilder.py</snippet></ROW><ROW><id>19751606</id><snippet>from SOAPpy import SOAPProxy
from SOAPpy import Types

namespace = "http://web.cbr.ru/"
url = "http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx"
soapaction = "http://web.cbr.ru/GetCursOnDate"
input = Types.dateType(name = (namespace, "On_date"))

proxy = SOAPProxy(url, namespace = namespace, soapaction = soapaction)
proxy.config.debug = 1
proxy.GetCursOnDate(input)
</snippet></ROW><ROW><id>19751606</id><snippet>&lt;SOAP-ENV:Body&gt;
    &lt;ns1:GetCursOnDate xmlns:ns1="http://web.cbr.ru/" SOAP-ENC:root="1"&gt;
      &lt;ns1:On_date xsi:type="xsd:date"&gt;2013-11-02Z&lt;/ns1:On_date&gt;
    &lt;/ns1:GetCursOnDate&gt;
&lt;/SOAP-ENV:Body&gt;
</snippet></ROW><ROW><id>19751606</id><snippet>SOAPAction</snippet></ROW><ROW><id>19751606</id><snippet>GetCursOnDate</snippet></ROW><ROW><id>19751606</id><snippet>WSDL.Proxy</snippet></ROW><ROW><id>19751606</id><snippet>SOAPProxy</snippet></ROW><ROW><id>19751606</id><snippet>SOAPAction</snippet></ROW><ROW><id>19751606</id><snippet>SOAPAction</snippet></ROW><ROW><id>19751606</id><snippet>WSDL.py</snippet></ROW><ROW><id>19751606</id><snippet>from SOAPpy import WSDL
from SOAPpy import Types

# you can download this and use it locally for better performance
wsdl = "http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx?wsdl"
namespace = "http://web.cbr.ru/"
input = Types.dateType(name = (namespace, "On_date"))

proxy = WSDL.Proxy(wsdl, namespace = namespace)
proxy.soapproxy.config.debug = 1

proxy.GetCursOnDate(input)
</snippet></ROW><ROW><id>19751694</id><snippet>from itertools import chain
foo =  pandas.DataFrame(
    zip(*[chain(*col) for col in test]), 
    columns=['24','22', '20' ,'18']
)
</snippet></ROW><ROW><id>19751694</id><snippet>numpy.reshape</snippet></ROW><ROW><id>19751694</id><snippet>pandas.DataFrame(
    np.reshape(np.array(test).T, (49, 4), order='C'),
    columns=['24','22', '20' ,'18']
) 
</snippet></ROW><ROW><id>19751824</id><snippet>if not 'seen' in session.data:
    # new session, set a flag
    session.data['seen'] = True
</snippet></ROW><ROW><id>19751837</id><snippet>page_range</snippet></ROW><ROW><id>19751837</id><snippet>{% for page in objects.paginator.page_range %}
    {% if forloop.counter != 1 %} | {% endif %}
    {{ page }}
{% endfor %}
</snippet></ROW><ROW><id>19751847</id><snippet>&amp; c:\python26\python.exe varconfig.py | % { 
    #Expecting all result to be $env:NAME=VALUE for variables that need to be set
    $a = $_ -replace '\$env:(\w+)=(.*)', '$1;$2' -split ';'

    #Setting variables at process-level. Can be replaced with "User" and "Machine" for permanent variables
    [System.Environment]::SetEnvironmentVariable($a[0],$a[1], "Process")
}
</snippet></ROW><ROW><id>19751847</id><snippet>&amp; c:\python26\python.exe varconfig.py | % { iex $($_ -replace '=(.*)', '="$1"') }
</snippet></ROW><ROW><id>19751949</id><snippet>repr()</snippet></ROW><ROW><id>19751949</id><snippet>repr()</snippet></ROW><ROW><id>19751949</id><snippet>&gt;&gt;&gt; repr(u'خُداوند خُداوند خُداوند\n').split(" ")
["u'\\u062e\\u064f\\u062f\\u0627\\u0648\\u0646\\u062f", '\\u062e\\u064f\\u062f\\u0627\\u0648\\u0646\\u062f', "\\u062e\\u064f\\u062f\\u0627\\u0648\\u0646\\u062f\\n'"]
</snippet></ROW><ROW><id>19751949</id><snippet>u'</snippet></ROW><ROW><id>19751949</id><snippet>\\n'</snippet></ROW><ROW><id>19751949</id><snippet>repr()</snippet></ROW><ROW><id>19751949</id><snippet>.split()</snippet></ROW><ROW><id>19751949</id><snippet>lst = file_obj.readline().split()
</snippet></ROW><ROW><id>19751949</id><snippet>&gt;&gt;&gt; res = u'خُداوند خُداوند خُداوند\n'.split()
&gt;&gt;&gt; res[0] == res[1] == res[2]
True
</snippet></ROW><ROW><id>19751967</id><snippet>database = open("C:/Users/PC/Desktop/database.txt", "w")
enter=input("What is your name: ")
database.write(enter)
database.close()
</snippet></ROW><ROW><id>19752074</id><snippet>for b in response['businesses']:
    print b.get('name', 'missing')
</snippet></ROW><ROW><id>19752096</id><snippet>x_init</snippet></ROW><ROW><id>19752096</id><snippet>opt.minimize</snippet></ROW><ROW><id>19752096</id><snippet>x</snippet></ROW><ROW><id>19752096</id><snippet>def func(x):
    x = x.reshape(2, -1)
    return 0.5 * np.tensordot(x, np.tensordot(H, x, axes=([1,3],[0,1]))) + np.tensordot(x,f)
</snippet></ROW><ROW><id>19752096</id><snippet>theta</snippet></ROW><ROW><id>19752096</id><snippet>x</snippet></ROW><ROW><id>19752096</id><snippet>theta.x</snippet></ROW><ROW><id>19752165</id><snippet>matplotlib.animation.FuncAnimation</snippet></ROW><ROW><id>19752165</id><snippet>#!/usr/bin/env python
from numpy import nan
import numpy as np

import matplotlib.pyplot as plt
from matplotlib.finance import candlestick
from matplotlib.animation import FuncAnimation

fig = plt.figure()
ax = fig.add_subplot(111)

def test(dummy):
    opn =  104.04852126730329
    close = np.random.uniform(90, 110)
    high = max(opn, close)*np.random.uniform(1, 1.05)
    low = min(opn, close)*np.random.uniform(0.95, 1)
    DOCHLV = np.array([[1, 100, 99, 101, 98, 0.0], [2, nan, nan, nan, nan, 0.0], [3, nan, nan, nan, nan, 0.0], [4, 104, 98, 105, 95, 0.0], [5, nan, nan, nan, nan, 0.0], [6, nan, nan, nan, nan, 0.0], [7, 100, 99.99976844819628, 100.91110690369828, 97.82248296015564, 1152.3258524820196], [8, 99.99976844819628, 100.51985544064271, 100.51985544064271, 96.65206230438159, 1578.5836411214814], [9, 100.51985544064271, 104.04852126730329, 104.54571702827914, 99.49632496479201, 1477.5651279091041], [10, opn, close, high, low, 372.6679262982206]])
    candlestick(ax, DOCHLV, width=0.8, colorup='g', colordown='r', alpha=1.0)
    ax.set_xlim(0, len(DOCHLV)+1)
anim = FuncAnimation(fig, test, interval=25)
anim.save('teste.mp4', fps=15)
</snippet></ROW><ROW><id>19752353</id><snippet>logging</snippet></ROW><ROW><id>19752353</id><snippet>This module defines functions and classes which implement a flexible event logging system for applications and libraries.
</snippet></ROW><ROW><id>19752353</id><snippet>import logging
logging.basicConfig(filename='mylog.log',level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
</snippet></ROW><ROW><id>19752353</id><snippet>level=logging.DEBUG</snippet></ROW><ROW><id>19752353</id><snippet>level=logging.INFO</snippet></ROW><ROW><id>19752442</id><snippet>a</snippet></ROW><ROW><id>19752442</id><snippet>database = open(r"C:\Users\PC\Desktop\database.txt", "a")
</snippet></ROW><ROW><id>19752442</id><snippet>w</snippet></ROW><ROW><id>19752442</id><snippet>if enter == "1":
    film=input("Please write a film name: ")
    database.write(film + "\n") #\n is the newline character
    database.close()
</snippet></ROW><ROW><id>19752474</id><snippet>llist</snippet></ROW><ROW><id>19752474</id><snippet>deque</snippet></ROW><ROW><id>19752647</id><snippet>m = 1
n = 1
</snippet></ROW><ROW><id>19752647</id><snippet>m = n = 1
</snippet></ROW><ROW><id>19752647</id><snippet>m, n = 1</snippet></ROW><ROW><id>19752647</id><snippet>x, y = z
</snippet></ROW><ROW><id>19752647</id><snippet>x = z[0]    # The first item in z
y = z[1]    # The second element of z
</snippet></ROW><ROW><id>19752647</id><snippet>x, y, z = (1, 2, 4)
</snippet></ROW><ROW><id>19752647</id><snippet>&gt;&gt;&gt; x
1
&gt;&gt;&gt; y
2
&gt;&gt;&gt; z
4
</snippet></ROW><ROW><id>19752647</id><snippet>1</snippet></ROW><ROW><id>19752647</id><snippet>*</snippet></ROW><ROW><id>19752647</id><snippet>a, b = b, a
</snippet></ROW><ROW><id>19752647</id><snippet>a</snippet></ROW><ROW><id>19752647</id><snippet>b</snippet></ROW><ROW><id>19752647</id><snippet>range</snippet></ROW><ROW><id>19752647</id><snippet>&gt;&gt;&gt; RED, GREEN, BLUE = range(3)
&gt;&gt;&gt; RED
0
&gt;&gt;&gt; GREEN
1
&gt;&gt;&gt; BLUE
2
</snippet></ROW><ROW><id>19752647</id><snippet>&gt;&gt;&gt; first, *middle, last = 1, 2, 3, 4, 5, 6, 7, 8, 9
&gt;&gt;&gt; first
1
&gt;&gt;&gt; middle
[2, 3, 4, 5, 6, 7, 8]
&gt;&gt;&gt; last
9
</snippet></ROW><ROW><id>19752922</id><snippet>u</snippet></ROW><ROW><id>19752922</id><snippet>print arr[0]</snippet></ROW><ROW><id>19752922</id><snippet>u</snippet></ROW><ROW><id>19752922</id><snippet>.read().decode()</snippet></ROW><ROW><id>19752922</id><snippet>.read()</snippet></ROW><ROW><id>19752922</id><snippet>u</snippet></ROW><ROW><id>19752922</id><snippet>.decode()</snippet></ROW><ROW><id>19753020</id><snippet>'topiccenter</snippet></ROW><ROW><id>19753020</id><snippet>instance.title</snippet></ROW><ROW><id>19753020</id><snippet>filename'</snippet></ROW><ROW><id>19753020</id><snippet>'tocpiccenter/instance.title</snippet></ROW><ROW><id>19753020</id><snippet>custom_path_tc()</snippet></ROW><ROW><id>19753071</id><snippet>session.query(x).join(y).filter("y.info LIKE '%#'||x.name||'#%'").all()
</snippet></ROW><ROW><id>19753087</id><snippet>In [1]: 27062.0/1000
Out[1]: 27.062

In [2]: float(27062)/1000
Out[2]: 27.062
</snippet></ROW><ROW><id>19753087</id><snippet>In [3]: from __future__ import division
</snippet></ROW><ROW><id>19753087</id><snippet>In [4]: 27062/1000
Out[4]: 27.062
</snippet></ROW><ROW><id>19753087</id><snippet>//</snippet></ROW><ROW><id>19753087</id><snippet>In [5]: 27062//1000
Out[5]: 27
</snippet></ROW><ROW><id>19753170</id><snippet>range</snippet></ROW><ROW><id>19753170</id><snippet>range(2, 2*1234567891011)</snippet></ROW><ROW><id>19753170</id><snippet>2*1234567891011-2</snippet></ROW><ROW><id>19753170</id><snippet>xrange()</snippet></ROW><ROW><id>19753170</id><snippet>for i in xrange(2,2**m):
</snippet></ROW><ROW><id>19753291</id><snippet>,</snippet></ROW><ROW><id>19753291</id><snippet>&gt;&gt;&gt; ((0, 1),) * 5
((0, 1), (0, 1), (0, 1), (0, 1), (0, 1))
</snippet></ROW><ROW><id>19753350</id><snippet># encoding=utf-8</snippet></ROW><ROW><id>19753350</id><snippet>u'some arabic word' #this will work
u'%s' % word #this will work
'some string' + u'some arabic string' #this will fail        
u'some string' + u'some arabic string' #this will work
</snippet></ROW><ROW><id>19753350</id><snippet>Database Chartset = utf8</snippet></ROW><ROW><id>19753350</id><snippet>Database Collation = utf8_general_ci</snippet></ROW><ROW><id>19753350</id><snippet>&lt;meta charset='utf-8'&gt;</snippet></ROW><ROW><id>19753384</id><snippet>-</snippet></ROW><ROW><id>19753384</id><snippet>ed_words = [w for w in words if re.search('ed$', w)]
</snippet></ROW><ROW><id>19753640</id><snippet>FooBar</snippet></ROW><ROW><id>19753640</id><snippet>import FooBar
</snippet></ROW><ROW><id>19753640</id><snippet>from FooBar import FooBar
</snippet></ROW><ROW><id>19753640</id><snippet>import FooBar
# First FooBar is the module, second is the class within the module.
p = FooBar.FooBar() 
</snippet></ROW><ROW><id>19753802</id><snippet>import tornado.ioloop
import tornado.web

print 'This is executed only once and global'
name = 'myname'

class MainHandler(tornado.web.RequestHandler):
    print 'This is executed only once'
    def get(self):
        print 'This is executed for each requests'
        self.write("Hello, world %s " % name)

application = tornado.web.Application([
    (r"/", MainHandler),
])

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19753802</id><snippet>$ ./bin/python server.py 
This is executed only once and global
This is executed only once



This is executed for each requests
WARNING:tornado.access:404 GET /favicon.ico (::1) 0.52ms
This is executed for each requests
WARNING:tornado.access:404 GET /favicon.ico (::1) 0.25ms
</snippet></ROW><ROW><id>19753802</id><snippet>MainHandler</snippet></ROW><ROW><id>19753802</id><snippet>get</snippet></ROW><ROW><id>19753802</id><snippet>get</snippet></ROW><ROW><id>19753850</id><snippet>rawList = [[[u'Hot Dogs', u'hotdog'], [u'Food Stands', u'foodstands']], [[u'Scandinavian',       u'scandinavian'], [u'Breakfast &amp; Brunch', u'breakfast_brunch'], [u'Coffee &amp; Tea', u'coffee']],    [[u'Burgers', u'burgers']]]
finalList = []

for l in rawList:
    finalList.append([i[0] for i in l])
</snippet></ROW><ROW><id>19753850</id><snippet>[[u'Hot Dogs', u'Food Stands'], [u'Scandinavian', u'Breakfast &amp; Brunch', u'Coffee &amp; Tea'], [u'Burgers']]
</snippet></ROW><ROW><id>19753885</id><snippet>&gt;&gt;&gt; df.pivot_table(values=["x","y","z"],rows=["A","B","D"], cols="C")
              x             y             z       
C            c0     c1     c0     c1     c0     c1
A  B  D                                           
a0 b0 d0  0.007  0.017  0.710  0.688  0.990  2.840
      d1  0.283  0.167  0.040  0.132  1.027  2.471
   b1 d0  0.041  0.037  0.851  0.934  1.078  2.282
      d1  0.235  0.023  1.027  1.049  1.027  2.826
a1 b0 d0  0.912  0.481  0.425  0.681  1.055  0.997
      d1  0.329  0.782  0.932  0.595  0.836  2.294
   b1 d0  0.264  1.161  0.918  1.090  0.857  1.470
      d1  0.053  0.130  1.001  0.992  0.920  2.121
</snippet></ROW><ROW><id>19753885</id><snippet>mean</snippet></ROW><ROW><id>19753885</id><snippet>sum</snippet></ROW><ROW><id>19753903</id><snippet>foo</snippet></ROW><ROW><id>19753903</id><snippet>xrange(10**(n-1), 10**n)</snippet></ROW><ROW><id>19753903</id><snippet>def foo2(n):
    for s in xrange(10**(n-1), 10**n):
        print s,
</snippet></ROW><ROW><id>19753903</id><snippet>def foo2(n):
    stack = [(0, 0)] # corresponding to (..., k=0, s=0)
    while stack:
        k, s = stack.pop(0)
        if k &lt; n:
            for i in xrange(k==0, 10):
                stack.append((k+1, 10*s + i))
        else:
            print s,
</snippet></ROW><ROW><id>19753903</id><snippet>xrange...</snippet></ROW><ROW><id>19753908</id><snippet>f = open("text.txt", "rb")
s = f.readlines()
f.close()
f = open("newtext.txt", "wb")
s.reverse()
for item in s:
  print&gt;&gt;f, s
f.close()
</snippet></ROW><ROW><id>19753997</id><snippet>self</snippet></ROW><ROW><id>19753997</id><snippet>self.x += 1
</snippet></ROW><ROW><id>19753997</id><snippet>self.x = self.x + 1
</snippet></ROW><ROW><id>19753997</id><snippet>self.x</snippet></ROW><ROW><id>19753997</id><snippet>self</snippet></ROW><ROW><id>19753997</id><snippet>x</snippet></ROW><ROW><id>19753997</id><snippet>A.x</snippet></ROW><ROW><id>19753997</id><snippet>10</snippet></ROW><ROW><id>19753997</id><snippet>11</snippet></ROW><ROW><id>19753997</id><snippet>x</snippet></ROW><ROW><id>19753997</id><snippet>self</snippet></ROW><ROW><id>19753997</id><snippet>x.x</snippet></ROW><ROW><id>19753997</id><snippet>add()</snippet></ROW><ROW><id>19753997</id><snippet>y.x</snippet></ROW><ROW><id>19753997</id><snippet>A.x += 1</snippet></ROW><ROW><id>19753997</id><snippet>self.x.append(1)
</snippet></ROW><ROW><id>19753997</id><snippet>self.x</snippet></ROW><ROW><id>19753997</id><snippet>list</snippet></ROW><ROW><id>19753997</id><snippet>x</snippet></ROW><ROW><id>19753997</id><snippet>x.x</snippet></ROW><ROW><id>19753997</id><snippet>y.x</snippet></ROW><ROW><id>19753997</id><snippet>x += y</snippet></ROW><ROW><id>19753997</id><snippet>x = x + y</snippet></ROW><ROW><id>19754080</id><snippet>for k, v in namcat.items():
    for item in v:
        for key, value in tom.items():
            if value == item:
                running_total += 1
</snippet></ROW><ROW><id>19754080</id><snippet>&gt;&gt;&gt; hotdog = 1
&gt;&gt;&gt; coffee = 2
&gt;&gt;&gt; foodstand = 6
&gt;&gt;&gt; breakfast = 10
&gt;&gt;&gt; tom = {'coffee': 2, 'hotdog': 1}
&gt;&gt;&gt; namcat = {'hotdog stand':[hotdog, foodstand], 'cafe':[breakfast, coffee]}
&gt;&gt;&gt; running_total = 0
&gt;&gt;&gt; for k, v in namcat.items():
    for item in v:
        for key, value in tom.items():
            if value == item:
                running_total += 1


&gt;&gt;&gt; running_total
2
</snippet></ROW><ROW><id>19754197</id><snippet>max_features : optional, None by default
    If not None, build a vocabulary that only consider the top
    max_features ordered by term frequency across the corpus.
</snippet></ROW><ROW><id>19754197</id><snippet>10000</snippet></ROW><ROW><id>19754197</id><snippet>max_features</snippet></ROW><ROW><id>19754197</id><snippet>vocabulary</snippet></ROW><ROW><id>19754197</id><snippet>emoticons = {":)":0, ":P":1, ":(":2}
vect = TfidfVectorizer(vocabulary=emoticons)
matrix = vect.fit_transform(traindata)
</snippet></ROW><ROW><id>19754197</id><snippet>&lt;Nx3 sparse matrix of type '&lt;class 'numpy.int64'&gt;' with M stored elements in Compressed Sparse Row format&gt;]</snippet></ROW><ROW><id>19754197</id><snippet>N</snippet></ROW><ROW><id>19754197</id><snippet># calculate the most frequent features first
vect = TfidfVectorizer(vocabulary=emoticons)
matrix = vect.fit_transform(traindata, max_features=10)
top_features = vect.vocabulary_
n = len(top_features)

# insert the emoticons into the vocabulary of common features
emoticons = {":)":0, ":P":1, ":(":2)}
for feature, index in emoticons.items():
    top_features[feature] = n + index

# re-vectorize using both sets of features
# at this point len(top_features) == 13
vect = TfidfVectorizer(vocabulary=top_features)
matrix = vect.fit_transform(traindata)
</snippet></ROW><ROW><id>19754226</id><snippet>yield</snippet></ROW><ROW><id>19754226</id><snippet>__enter__</snippet></ROW><ROW><id>19754226</id><snippet>p</snippet></ROW><ROW><id>19754226</id><snippet>with update(KEY) as updater:
    updater.value = int(updater.original) + 42
</snippet></ROW><ROW><id>19754226</id><snippet>with update(KEY) as updater:
    updater.process = lambda value: value + 42
</snippet></ROW><ROW><id>19754226</id><snippet>update(key, lambda value: value + 42)
</snippet></ROW><ROW><id>19754244</id><snippet>getattr(target,part).deltahealth(dmg)
</snippet></ROW><ROW><id>19754452</id><snippet>class UMM(object):
    def login(self):
        print("login()")
    def read_information(self):
        print("read_info() 1")
        UMM.login()
        print("read_info() 2")
</snippet></ROW><ROW><id>19754452</id><snippet>import umm
umm = umm.UMM()
umm.read_information()
</snippet></ROW><ROW><id>19754452</id><snippet>TypeError: unbound method login() must be called with UMM instance as first argument (got nothing instead)
</snippet></ROW><ROW><id>19754452</id><snippet>UMM.login()</snippet></ROW><ROW><id>19754452</id><snippet>read_information()</snippet></ROW><ROW><id>19754452</id><snippet>self</snippet></ROW><ROW><id>19754452</id><snippet>        UMM.login()
</snippet></ROW><ROW><id>19754452</id><snippet>        self.login()
</snippet></ROW><ROW><id>19754452</id><snippet>UMM.login()</snippet></ROW><ROW><id>19754452</id><snippet>login()</snippet></ROW><ROW><id>19754452</id><snippet>@staticmethod</snippet></ROW><ROW><id>19754452</id><snippet>@classmethod</snippet></ROW><ROW><id>19754470</id><snippet>    class MyClass:
       def something(self):
          self.variable_for_the_object = 1
</snippet></ROW><ROW><id>19754476</id><snippet>\u010d</snippet></ROW><ROW><id>19754476</id><snippet>č</snippet></ROW><ROW><id>19754476</id><snippet>č</snippet></ROW><ROW><id>19754476</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; obj = json.loads("""{"link": ["http://www.ponudadana.hr/Planinarski-dom-Kalnik-2-dana-s-doruckom-za-dvoje-za-149kn-umjesto-300kn-7482_1"], "title": ["Planinarski dom Kalnik - 2 dana s doru\u010dkom za dvoje za 149kn umjesto 300kn!"]}""")
&gt;&gt;&gt; obj['title']
[u'Planinarski dom Kalnik - 2 dana s doru\u010dkom za dvoje za 149kn umjesto 300kn!']
&gt;&gt;&gt; print obj['title'][0]
Planinarski dom Kalnik - 2 dana s doručkom za dvoje za 149kn umjesto 300kn!
</snippet></ROW><ROW><id>19754476</id><snippet>&gt;&gt;&gt; u"česnakas"
u'\u010desnakas'
&gt;&gt;&gt; print u"česnakas"
česnakas
</snippet></ROW><ROW><id>19754609</id><snippet>readline</snippet></ROW><ROW><id>19754609</id><snippet>rlcompleter</snippet></ROW><ROW><id>19754609</id><snippet>import code
import readline
import rlcompleter

# do something here

vars = globals()
vars.update(locals())
readline.set_completer(rlcompleter.Completer(vars).complete)
readline.parse_and_bind("tab: complete")
shell = code.InteractiveConsole(vars)
shell.interact()
</snippet></ROW><ROW><id>19755017</id><snippet>i=len(L)-1
while L != [1 for i in range(len(L))]:
</snippet></ROW><ROW><id>19755017</id><snippet>i</snippet></ROW><ROW><id>19755169</id><snippet>web</snippet></ROW><ROW><id>19755169</id><snippet>heroku ps:scale web=1
</snippet></ROW><ROW><id>19755169</id><snippet>heroku ps
</snippet></ROW><ROW><id>19755169</id><snippet>web</snippet></ROW><ROW><id>19755197</id><snippet>request.form</snippet></ROW><ROW><id>19755197</id><snippet>def encode(value):
    #Your logic for the new dict vals
    return 'foo!'

class MixInRequest(Request):
    max_content_length = 1024 * 1024 * 4

    @cached_property
    def lcl_data(self):
        if self.method in ['POST','PUT','PATCH']:
            fields = dict([(key, encode(val)) for (key,val) in self.form.items()])
            return ImmutableMultiDict(fields)
        return None
</snippet></ROW><ROW><id>19755197</id><snippet>lcl_data</snippet></ROW><ROW><id>19755197</id><snippet>request.form</snippet></ROW><ROW><id>19755220</id><snippet>ssia = str(taginfo).split("\\r\\n")[1]
                   .strip("()")
                   .split(",")[-1]
                   .strip()
                   .split("=")[1]
assert ssia == '-95'

ssib = str(taginfo).split("\\r\\n")[2]
                   .strip("()")
                   .split(",")[-1]
                   .strip()
                   .split("=")[1]    
assert ssib == '-99'
</snippet></ROW><ROW><id>19755287</id><snippet>NotImplementedError</snippet></ROW><ROW><id>19755306</id><snippet>iter(callable, sentinel)</snippet></ROW><ROW><id>19755306</id><snippet>def make_lines_reader(fobj, number_of_lines):
    def reader():
        return ''.join(fobj.readline() for _ in range(number_of_lines))
    return reader

with open('the-file.txt') as f:
    for chunk in iter(make_lines_reader(f, 25), ''):
        print(chunk, end='')
        input()    #assuming python3, in python2 use raw_input()
</snippet></ROW><ROW><id>19755306</id><snippet>the-file.txt</snippet></ROW><ROW><id>19755459</id><snippet>rescaled</snippet></ROW><ROW><id>19755459</id><snippet>rescaled[i,j]</snippet></ROW><ROW><id>19755459</id><snippet>im_1_check[j,i]</snippet></ROW><ROW><id>19755459</id><snippet>diff = ndarray((ran_x,ran_y),int)</snippet></ROW><ROW><id>19755459</id><snippet>for i in range(0, ran_x, 1):
    for j in range(0, ran_y, 1):
        diff[i,j] = rescaled[i,j] - im_1_check[j,i]
        print rescaled[i,j], im_1_check[j,i], diff[i,j] 
</snippet></ROW><ROW><id>19755459</id><snippet>diff</snippet></ROW><ROW><id>19755464</id><snippet>itertools.filterfalse</snippet></ROW><ROW><id>19755464</id><snippet>import itertools

r = list(itertools.filterfalse(lambda x: x in data1, data2))
  + list(itertools.filterfalse(lambda x: x in data2, data1))

assert r == [{'name': 'String 3'}]
</snippet></ROW><ROW><id>19755644</id><snippet>subprocess</snippet></ROW><ROW><id>19755644</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>19755644</id><snippet>os.fork</snippet></ROW><ROW><id>19755644</id><snippet>os.exec*</snippet></ROW><ROW><id>19755644</id><snippet>os.fork</snippet></ROW><ROW><id>19755681</id><snippet>datagramReceived</snippet></ROW><ROW><id>19755681</id><snippet>class HeartbeatSender(DatagramProtocol):
    ...
    def datagramReceived(self, data, (host, port)):
        print "received %r from %s:%d" % (data, host, port)
        if data.startswith("change name:"):
            self.name = data[len("change name:"):]
</snippet></ROW><ROW><id>19755681</id><snippet>HeartbeatSender</snippet></ROW><ROW><id>19755681</id><snippet>datagramReceived</snippet></ROW><ROW><id>19755681</id><snippet>name</snippet></ROW><ROW><id>19755773</id><snippet>javascript:void(0);</snippet></ROW><ROW><id>19755773</id><snippet>try except</snippet></ROW><ROW><id>19755773</id><snippet>jpg/gif/png</snippet></ROW><ROW><id>19755773</id><snippet>urllib</snippet></ROW><ROW><id>19755773</id><snippet>beautifulsoup</snippet></ROW><ROW><id>19755773</id><snippet>import urllib2
from bs4 import BeautifulSoup
import sys
from urllib import urlretrieve
reload(sys)


def imgGreb():
    site_url = "http://www.style.com"
    html = urllib2.urlopen(site_url).read()
    soup = BeautifulSoup(html)
    img=soup.findAll(['img'])
    for i in img:
        try:
            # built the complete URL using the domain and relative url you scraped
            url = site_url + i.get('src')
            # get the file name 
            name = "result_" + url.split('/')[-1] 
            # detect if that is a type of pictures you want
            type = name.split('.')[-1]
            if type in ['jpg', 'png', 'gif']:
                # if so, retrieve the pictures
                urlretrieve(url, name)
        except:
            pass

if __name__ == '__main__':
    imgGreb()
</snippet></ROW><ROW><id>19755916</id><snippet>GPIO.output(pin,GPIO.HIGH
</snippet></ROW><ROW><id>19756028</id><snippet>get_model</snippet></ROW><ROW><id>19756028</id><snippet>from django.db.models.loading import get_model

level_id = request.POST['level_id']
name = request.POST['name']
model = get_model('app_name', 'Level%s' % level_id) #replace app_name with the app this model resides in.

params = {"level%s_name" % level_id: name}
level_name = model.objects.filter(**params)
</snippet></ROW><ROW><id>19756028</id><snippet>class Level1():
    level1_name = CharField()
</snippet></ROW><ROW><id>19756028</id><snippet>class Level1():
    level_name = CharField()
</snippet></ROW><ROW><id>19756028</id><snippet>class Level()
    level_name = CharField()
    level_id = IntegerField()
</snippet></ROW><ROW><id>19756028</id><snippet>Level1</snippet></ROW><ROW><id>19756028</id><snippet>Level2</snippet></ROW><ROW><id>19756144</id><snippet>setattr(self, 'combo%d' % index, combo)
</snippet></ROW><ROW><id>19756144</id><snippet>    data1 = {
        'PHOTOSHOP': '6.5', 'NUKE': '7.0v9', 'MAYA': '2014',
        'TESTING': '1.28', 'KATANA': '1.7', 'MARI': '4.0',
        }
    data2 = {
        'PHOTOSHOP': '10.5', 'NUKE': '6.3v6', 'MAYA': '2012',
        'TESTING': '1.28', 'KATANA': '1.0', 'MARI': '1.0',
        }
    self.combos = []
    for index, (key, value) in enumerate(data1.items()):
        label = QtGui.QLabel(key, self)
        combo = QtGui.QComboBox(self)
        combo.addItem(value)
        combo.addItem(data2[key])
        self.combos.append(combo)
        # or setattr(self, 'combo%d' % index, combo)
        layout.addWidget(label, index, 0)
        layout.addWidget(combo, index, 1)
</snippet></ROW><ROW><id>19756301</id><snippet>&gt;&gt;&gt; a = np.array([[[1,2,3],[2,3,4,5], [2, 2]],[[3,4,5,6,7],[1],[2,3,10]]])
&gt;&gt;&gt; D = max(len(x) for x in y for y in a)
&gt;&gt;&gt; padded = [[x + [0] * (D-len(x)) for x in y] for y in a]
&gt;&gt;&gt; mask = [[[0] * len(x) + [1] * (D-len(x)) for x in y] for y in a]
&gt;&gt;&gt; result = np.ma.masked_array(padded, np.array(mask, dtype=np.bool))
&gt;&gt;&gt; result
masked_array(data =
 [[[1 2 3 -- --]
  [2 3 4 5 --]
  [2 2 -- -- --]]

 [[3 4 5 6 7]
  [1 -- -- -- --]
  [2 3 10 -- --]]],
             mask =
 [[[False False False  True  True]
  [False False False False  True]
  [False False  True  True  True]]

 [[False False False False False]
  [False  True  True  True  True]
  [False False False  True  True]]],
       fill_value = 999999)

&gt;&gt;&gt; np.sum(result, axis=-1)
masked_array(data =
 [[6 14 4]
 [25 1 15]],
             mask =
 [[False False False]
 [False False False]],
       fill_value = 999999)

&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19756355</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>19756355</id><snippet>beforeSend: function (request) {
   request.setRequestHeader("X-CSRFToken",
       $('input[name="csrfmiddlewaretoken"]').val());
   },
</snippet></ROW><ROW><id>19756373</id><snippet>import pygame

class MainClass:
    def __init__(self):
        self.someinstance = SomeSubclass()
    def check_events(self):
        for event in pygame.event.get():
            self.someinstance.somefunction2(event)
            if event.type == someevent:
                some code
    def mainloop(self):
        someinstance = somesubclass()
        while True:
            self.somefunction()

class SomeSubclass:
    def __init__(self):
        some declaration
    def somefunction2(self,event):
        if event.type == someevent
            somecode
</snippet></ROW><ROW><id>19756479</id><snippet>file.flush()
# typically the above line would do. however this is used to ensure that the file is written
os.fsync()
</snippet></ROW><ROW><id>19756493</id><snippet>"</snippet></ROW><ROW><id>19756493</id><snippet>'</snippet></ROW><ROW><id>19756493</id><snippet>runfile("C:/Program Files (x86)/Firaxis Games/Sid Meier's Pirates!/ModMan/MM.py", wdir=r"C:/Program Files (x86)/Firaxis Games/Sid Meier's Pirates!/ModMan")
</snippet></ROW><ROW><id>19756580</id><snippet>import maya.cmds as cmds
import os

def openFileAndRemapRefs():
    multipleFilters = "Maya Files (*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)"

    # Choose file to open
    filename = cmds.fileDialog2(fileFilter=multipleFilters, dialogStyle=2, fileMode=1)

    # Open file with no reference loaded
    cmds.file( filename[0], open=True, force=True );

    # Dir containing the references
    refDir = 'C:/References'

    # A list of any references found in the scene
    references = cmds.ls(type='reference')

    # For each reference found in scene, load it with the path leading up to it replaced
    for ref in references:
        refFilepath = cmds.referenceQuery(ref, f=True)
        refFilename = os.path.basename( refFilepath )       
        print 'Reference ' + ref + ' found at: ' + cmds.referenceQuery(ref, f=True)   
        cmds.file( os.path.join(refDir, refFilename), loadReference=ref, options='v=0;')

openFileAndRemapRefs()
</snippet></ROW><ROW><id>19756580</id><snippet>fileDialog2</snippet></ROW><ROW><id>19756580</id><snippet>file</snippet></ROW><ROW><id>19756752</id><snippet>str.strip</snippet></ROW><ROW><id>19756752</id><snippet>&gt;&gt;&gt; string
'\nHello World\n123\nHelloWorld\n'
&gt;&gt;&gt; string.strip()
'Hello World\n123\nHelloWorld'
</snippet></ROW><ROW><id>19756752</id><snippet>str.replace</snippet></ROW><ROW><id>19756752</id><snippet>&gt;&gt;&gt; string.replace('\n', ' ')
' Hello World 123 HelloWorld '
</snippet></ROW><ROW><id>19756932</id><snippet>QUIT</snippet></ROW><ROW><id>19756932</id><snippet>QUIT :Bye!
</snippet></ROW><ROW><id>19756947</id><snippet>echo</snippet></ROW><ROW><id>19756947</id><snippet>echo "Results from wordgame.py...&lt;br/&gt;";
passthru('python wordgame.py cat dog');
</snippet></ROW><ROW><id>19756947</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>19756947</id><snippet>&lt;pre/&gt;</snippet></ROW><ROW><id>19756947</id><snippet>echo "Results from wordgame.py...&lt;br/&gt;";
ob_start();
passthru('python wordgame.py cat dog');
echo "&lt;pre&gt;" . htmlspecialchars(ob_get_clean()) . "&lt;/pre&gt;";
</snippet></ROW><ROW><id>19756958</id><snippet>PyRun_SimpleString("import test\n"
                   "print('Hi!')\n"
                   "b = test.func(5)\n"   # &lt;--
                   "print(b)\n");
</snippet></ROW><ROW><id>19756958</id><snippet>int command;   // not "int *"
double sts;
if( !PyArg_ParseTuple(args, "i", &amp;command) )
</snippet></ROW><ROW><id>19756991</id><snippet>if</snippet></ROW><ROW><id>19756991</id><snippet>show_popup</snippet></ROW><ROW><id>19756991</id><snippet>text</snippet></ROW><ROW><id>19756991</id><snippet>Label</snippet></ROW><ROW><id>19756991</id><snippet>Label</snippet></ROW><ROW><id>19756991</id><snippet>self.search=='A'</snippet></ROW><ROW><id>19756991</id><snippet>self.search.text=='A'</snippet></ROW><ROW><id>19756991</id><snippet>__init__</snippet></ROW><ROW><id>19756991</id><snippet>show_popup</snippet></ROW><ROW><id>19756991</id><snippet>class Diction(GridLayout):

    def __init__(self, **kwargs):
        super(Diction, self).__init__(**kwargs)
        self.cols=2
        self.add_widget(Label(text="Search"))
        self.search=TextInput(multiline=False)
        self.add_widget(self.search)
        self.add_widget(Button(text="click",on_press=self.show_popup))

    def show_popup(self, b):
        if self.search.text=='A':
            print 'True'
        else:
            print 'False'
        p = CustomPopup()
        p.open()
</snippet></ROW><ROW><id>19756991</id><snippet>from kivy.app import App
from kivy.uix.gridlayout import GridLayout
# DON'T forget to import Label!!!
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from kivy.lang import Builder

Builder.load_string("""
&lt;CustomPopup@Popup&gt;:
    title: "My Custom Poput"    

&lt;Diction@GridLayout&gt;:
    cols: 2
    search: id_search
    Label:
        text: "Search"
    TextInput:
        id: id_search
    Button:
        text: "click"
        on_press: root.show_popup(self)
""")

class CustomPopup(Popup):
    pass

class Diction(GridLayout):    
    def show_popup(self, b):
        if self.search.text=='A':
            print 'True'
        else:
            print 'False'
    # You can send any content to the popup with the content attribute
    CustomPopup(content=Label(text=self.search.text)).open()

class MyApp(App):
    def build(self):
        return Diction()
</snippet></ROW><ROW><id>19756991</id><snippet>load_file</snippet></ROW><ROW><id>19756991</id><snippet>load_string</snippet></ROW><ROW><id>19757025</id><snippet>__all__</snippet></ROW><ROW><id>19757025</id><snippet>from module import *
</snippet></ROW><ROW><id>19757025</id><snippet>get_ipython().Completer.limit_to__all__ = True
</snippet></ROW><ROW><id>19757025</id><snippet>ipython_config.py</snippet></ROW><ROW><id>19757025</id><snippet>c.IPCompleter.limit_to__all__ = True
</snippet></ROW><ROW><id>19757092</id><snippet>&amp;</snippet></ROW><ROW><id>19757092</id><snippet>kill</snippet></ROW><ROW><id>19757092</id><snippet>$ python &amp;
[1] 5050
$ kill -15 5050
[1]+  Angehalten              python
</snippet></ROW><ROW><id>19757092</id><snippet>SIGTERM</snippet></ROW><ROW><id>19757092</id><snippet>-15</snippet></ROW><ROW><id>19757092</id><snippet>SIGKILL</snippet></ROW><ROW><id>19757092</id><snippet>-9</snippet></ROW><ROW><id>19757092</id><snippet>SIGTERM</snippet></ROW><ROW><id>19757092</id><snippet>SIGKILL</snippet></ROW><ROW><id>19757132</id><snippet>y^2</snippet></ROW><ROW><id>19757132</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    a = -1
    b = 1

    y, x = np.ogrid[-5:5:100j, -5:5:100j]
    plt.contour(x.ravel(), y.ravel(), pow(y, 2) - pow(x, 3) - x * a - b, [0])
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19757197</id><snippet>reverse.remove(rvrs)</snippet></ROW><ROW><id>19757197</id><snippet>rvrs</snippet></ROW><ROW><id>19757197</id><snippet>reverse</snippet></ROW><ROW><id>19757197</id><snippet>            remove_later = rvrs not in reverse
</snippet></ROW><ROW><id>19757197</id><snippet>            reverse.add(rvrs)
</snippet></ROW><ROW><id>19757197</id><snippet>            if remove_later:
                reverse.remove(rvrs)
</snippet></ROW><ROW><id>19757197</id><snippet>((1, 2), (1, 2), (1, 2))
((1, 2), (5, 2), (1, 2))
((3, 4), (1, 2), (1, 2))
((3, 4), (5, 2), (1, 2))
((3, 4), (5, 2), (2, 1))
</snippet></ROW><ROW><id>19757197</id><snippet>reverse_seq()</snippet></ROW><ROW><id>19757197</id><snippet>            rvrs = elt[::-1]
</snippet></ROW><ROW><id>19757345</id><snippet>sed -u --posix "
s/^\([^ ]*\) \{1,\}\(.*\)$/[\1,[,\2 ][/
:peer
s/,\([[:digit:]]\{1,\}\):\([[:digit:]]\{1,\}\) \(.*\)$/,\1,\3,\2/
t peer
s/\[,/[/g
s/,]/]/g
s/$/]/
" yourfile
</snippet></ROW><ROW><id>19757386</id><snippet>In [40]: df = DataFrame({ 'Score1' : [ 47,45,45,37,35,35], 
                          'Score2' : [50,60,40,50,60,40] },
              index=MultiIndex.from_tuples([ (r,t) for t in date_range('2010-1-1',periods=3,freq='QS')+pd.offsets.Day(14) 
                for r in ['R1','R2'] ], names=['region','date'])).sortlevel()

In [41]: df
Out[41]: 
                   Score1  Score2
region date                      
R1     2010-01-15      47      50
       2010-04-15      45      40
       2010-07-15      35      60
R2     2010-01-15      45      60
       2010-04-15      37      50
       2010-07-15      35      40
</snippet></ROW><ROW><id>19757386</id><snippet>In [5]: def f(x):
   ...:     print x
   ...:     return x
   ...: 

In [6]: df.groupby(level='region').apply(f)
                   Score1  Score2
region date                      
R1     2010-01-15      47      50
       2010-04-15      45      40
       2010-07-15      35      60
                   Score1  Score2
region date                      
R2     2010-01-15      45      60
       2010-04-15      37      50
       2010-07-15      35      40
Out[6]: 
                   Score1  Score2
region date                      
R1     2010-01-15      47      50
       2010-04-15      45      40
       2010-07-15      35      60
R2     2010-01-15      45      60
       2010-04-15      37      50
       2010-07-15      35      40
</snippet></ROW><ROW><id>19757386</id><snippet>In [16]: df.groupby(level='region').apply(lambda x: x.diff(2))
Out[16]: 
                   Score1  Score2
region date                      
R1     2010-01-15     NaN     NaN
       2010-04-15     NaN     NaN
       2010-07-15     -12      10
R2     2010-01-15     NaN     NaN
       2010-04-15     NaN     NaN
       2010-07-15     -10     -20
</snippet></ROW><ROW><id>19757386</id><snippet>In [17]: df.groupby(level='region').apply(lambda x: x.diff(2).iloc[-1])
Out[17]: 
        Score1  Score2
region                
R1         -12      10
R2         -10     -20
</snippet></ROW><ROW><id>19757492</id><snippet>Hash.new</snippet></ROW><ROW><id>19757492</id><snippet>d = Hash.new 0
d[:new_key] += 1
d[:new_key] #=&gt; 1
d[:foo]     #=&gt; 0
</snippet></ROW><ROW><id>19757492</id><snippet>h = Hash.new("Go Fish")
h[:unknown_key]         #=&gt; "Go Fish"
h[:unknown_key].upcase! #=&gt; "GO FISH"
h[:next_key]            #=&gt; "GO FISH"
</snippet></ROW><ROW><id>19757562</id><snippet>import matplotlib.pyplot as plt

# detect peaks somehow
i, j = detect_peaks(array2d)

# plot
fig, ax = plt.subplots()
ax.imshow(array2d)
ax.scatter(i, j)
plt.show()
</snippet></ROW><ROW><id>19757565</id><snippet>timezone.now()</snippet></ROW><ROW><id>19757565</id><snippet>datetime.now()</snippet></ROW><ROW><id>19757595</id><snippet>st.seed.widget.clamp_to_bounds = False
</snippet></ROW><ROW><id>19757595</id><snippet>ipython --pylab=qt
</snippet></ROW><ROW><id>19757595</id><snippet>%run streamlines.py
</snippet></ROW><ROW><id>19757621</id><snippet>&gt;&gt;&gt; lis = ['sender', 'message', 'rawtime']
&gt;&gt;&gt; sender, message, rawtime = lis
&gt;&gt;&gt; sender
'sender'
&gt;&gt;&gt; message
'message'
&gt;&gt;&gt; rawtime
'rawtime'
</snippet></ROW><ROW><id>19757621</id><snippet>&gt;&gt;&gt; lis = [('sender', 'message', 'rawtime')]
&gt;&gt;&gt; for x, y, z in lis:
...     print x, y, z
...     
sender message rawtime
</snippet></ROW><ROW><id>19757621</id><snippet>for sender, message, rawtime in notes.one(user.name):
        room.message("Note from %s: %s [%s] " % sender, message, self.LongTimeStampFull(rawtime))
</snippet></ROW><ROW><id>19757702</id><snippet>vectors</snippet></ROW><ROW><id>19757702</id><snippet>tile</snippet></ROW><ROW><id>19757702</id><snippet>tile(P[newaxis, newaxis, newaxis,
        ...,newaxis,newaxis], vectors[0])
</snippet></ROW><ROW><id>19757873</id><snippet>threading</snippet></ROW><ROW><id>19757873</id><snippet>#!/usr/bin/python3

def _spawn_background_interpreter(*args,**kwargs):
    from threading import Thread
    def _open_interp(locs):
        import code
        code.interact(local=locs)
    locs = args[0] if args else None
    t = Thread(target=_open_interp, args=(locs,))
    t.setDaemon(True) #pre-3.3 API
    t.start()
</snippet></ROW><ROW><id>19757873</id><snippet>_spawn_background_interpreter(locals())</snippet></ROW><ROW><id>19757873</id><snippet>multiprocessing</snippet></ROW><ROW><id>19757873</id><snippet>def _spawn_background_interpreter(*args,**kwargs):
    from multiprocessing import Process
    import sys, os
    def _open_interp(locs,stdin):
        import code
        sys.stdin = os.fdopen(stdin)
        code.interact(local=locs)
    locs = args[0] if args else None
    fileno = sys.stdin.fileno()
    p = Process(target=_open_interp, args=(locs,fileno))
    p.daemon = True
    p.start()
</snippet></ROW><ROW><id>19757873</id><snippet>multiprocessing</snippet></ROW><ROW><id>19757873</id><snippet>exit()</snippet></ROW><ROW><id>19757873</id><snippet>multiprocessing</snippet></ROW><ROW><id>19757873</id><snippet>multiprocessing</snippet></ROW><ROW><id>19757873</id><snippet>multiprocessing</snippet></ROW><ROW><id>19757894</id><snippet>Shape</snippet></ROW><ROW><id>19758323</id><snippet>from Tkinter import *

#----------------------------------------------------------------------

def test(x):    
    #print "I'm in event:", x
    if x == 1:            # if event on entry e1 
        print 'e1 event' # do some thing
    elif x == 2:            # also if event on entry e2    
        print 'e2 event'  # do some thing else
    else: 
        print 'no event' 

def test1(x):
    test(1)

def test2(x):
    test(2)

#----------------------------------------------------------------------

root=Tk()

e1=Entry(root)
e1.pack()

e2=Entry(root)
e2.pack()

root.bind_class(e1, "&lt;FocusOut&gt;", test1) #this can be some thing you suggest to me
root.bind_class(e2, "&lt;FocusOut&gt;", test2) # can be some thing you suggest to me   

root.mainloop()
</snippet></ROW><ROW><id>19758323</id><snippet>e1.bind("&lt;FocusOut&gt;", test1)
e2.bind("&lt;FocusOut&gt;", test2)
</snippet></ROW><ROW><id>19758323</id><snippet>def test1(x):
    print x # &lt;Tkinter.Event instance at 0xb74a6fcc&gt;
    test(1)
</snippet></ROW><ROW><id>19758323</id><snippet>from Tkinter import *

#----------------------------------------------------------------------

class MainWindow():

    def __init__(self, root):
        self.e1 = Entry(root)
        self.e1.pack()

        self.e2 = Entry(root)
        self.e2.pack()

        self.e1.bind("&lt;FocusOut&gt;", self.test1)
        self.e2.bind("&lt;FocusOut&gt;", self.test2)

    #-------------------

    def test(self, x):
        if x == 1:           
            print 'e1 event'
        elif x == 2:
            print 'e2 event'
        else:
            print 'no event' 

    #-------------------

    def test1(self, x):
        print x
        self.test(1)

    #-------------------

    def test2(self, x):
        self.test(2)

#----------------------------------------------------------------------

root = Tk()
MainWindow(root)
root.mainloop()
</snippet></ROW><ROW><id>19758323</id><snippet>from Tkinter import *

#----------------------------------------------------------------------

class MainWindow():

    def __init__(self, root):
        self.e1 = Entry(root)
        self.e1.pack()

        self.e2 = Entry(root)
        self.e2.pack()

        self.e1.bind("&lt;FocusOut&gt;", self.test)
        self.e2.bind("&lt;FocusOut&gt;", self.test)
        # or
        # root.bind_class("Entry", "&lt;FocusOut&gt;", self.test)

    #-------------------

    def test(self, event):
        if event.widget == self.e1:
            #print "e1:", event.widget.get()
            print "e1:", self.e1.get()

        if event.widget == self.e2:
            #print "e2:", event.widget.get()
            print "e2:", self.e2.get()

#----------------------------------------------------------------------

root = Tk()
MainWindow(root)
root.mainloop()
</snippet></ROW><ROW><id>19758326</id><snippet>SocketHandler</snippet></ROW><ROW><id>19758326</id><snippet>retryStart = 1.0
retryMax = 30.0
retryFactor = 2.0
</snippet></ROW><ROW><id>19758326</id><snippet>retryStart</snippet></ROW><ROW><id>19758326</id><snippet>retryFactor</snippet></ROW><ROW><id>19758326</id><snippet>retryMax</snippet></ROW><ROW><id>19758398</id><snippet>data.rename(columns={'gdp':'log(gdp)'}, inplace=True)
</snippet></ROW><ROW><id>19758439</id><snippet>if</snippet></ROW><ROW><id>19758439</id><snippet>if string is 'North' or 'n':
    movement = 'North'
elif string is 'East'or'e':
    movement = 'East'
elif string is 'South'or's':
    movement = 'South'
etc...
</snippet></ROW><ROW><id>19758439</id><snippet>is</snippet></ROW><ROW><id>19758439</id><snippet>==</snippet></ROW><ROW><id>19758439</id><snippet>if (string is 'North') or 'n':
    movement = 'North'
</snippet></ROW><ROW><id>19758439</id><snippet>'n'</snippet></ROW><ROW><id>19758439</id><snippet>True</snippet></ROW><ROW><id>19758439</id><snippet>movement</snippet></ROW><ROW><id>19758439</id><snippet>North</snippet></ROW><ROW><id>19758439</id><snippet>if string in ('North', 'n'):
    etc...
</snippet></ROW><ROW><id>19758464</id><snippet>form = QuestionForm(obj=my_obj)</snippet></ROW><ROW><id>19758464</id><snippet>form = QuestionForm(active=True)</snippet></ROW><ROW><id>19758465</id><snippet>def sum_words(data):
return sum(int(x, 16) for x in data.split())

data = "03 2F 00 00 02 12 01"
print(sum_words(data))
</snippet></ROW><ROW><id>19758535</id><snippet>outfilename1 = 'data1-{}.csv'.format(now_str)
out_file1 = open(outfilename1, 'w')

outfilename2 = 'data2-{}.csv'.format(now_str)
out_file2 = open(outfilename2, 'w')

out_file1.write(str1)
out_file2.write(str2)
</snippet></ROW><ROW><id>19758535</id><snippet>if str3:
    outfilename3 = 'data3-{}.csv'.format(now_str)
    out_file3 = open(outfilename3, 'w')
    out_file3.write(str3)
</snippet></ROW><ROW><id>19758595</id><snippet>~</snippet></ROW><ROW><id>19758595</id><snippet>&gt;&gt;&gt; with open('~/test', 'w') as f:
...     pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory: '~/test'
&gt;&gt;&gt; with open('/home/mihai/test', 'w') as f:
...     pass
... 
</snippet></ROW><ROW><id>19758740</id><snippet>test2()</snippet></ROW><ROW><id>19758740</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>19758740</id><snippet>array[index]</snippet></ROW><ROW><id>19758740</id><snippet>test1()</snippet></ROW><ROW><id>19758740</id><snippet>self.x</snippet></ROW><ROW><id>19758740</id><snippet>self.__dict__</snippet></ROW><ROW><id>19758826</id><snippet>list(set(some_iterable))</snippet></ROW><ROW><id>19758826</id><snippet>thelist = [{'name': 'a name', 'titles': [['foo','bar'],['foo','baz']]}]

print [
    {
        'name': d['name'],
        'titles': list(set(title for lst in d['titles'] for title in lst)) 
    }
    for d in thelist 
]
</snippet></ROW><ROW><id>19758826</id><snippet>[{'name': 'a name', 'titles': ['baz', 'foo', 'bar']}]
</snippet></ROW><ROW><id>19758906</id><snippet>ord()</snippet></ROW><ROW><id>19758906</id><snippet>"\x00"</snippet></ROW><ROW><id>19758906</id><snippet>&gt;&gt;&gt; ord("\x00")
0
</snippet></ROW><ROW><id>19758906</id><snippet>s</snippet></ROW><ROW><id>19758906</id><snippet>map(ord, s)
</snippet></ROW><ROW><id>19758975</id><snippet>for pig in p:
    pig.gainWeight(5)
</snippet></ROW><ROW><id>19758993</id><snippet>df.groupby(level='region').apply(lambda x: x.diff().iloc[-1])
</snippet></ROW><ROW><id>19758993</id><snippet>df.groupby(level='region').apply(lambda x: x.diff(4).iloc[-1])
</snippet></ROW><ROW><id>19759270</id><snippet>    show = db.relationship('Show',
                           backref=db.backref('episodes', cascade="all, delete-orphan"),
                           lazy='joined')
</snippet></ROW><ROW><id>19759342</id><snippet>if y % 100 &gt; 0:
    somevar = y % 100
</snippet></ROW><ROW><id>19759342</id><snippet>if y % 100:
    somevar = y % 100
</snippet></ROW><ROW><id>19759342</id><snippet>remainder = y % 100
if remainder:
    somevar = remainder
</snippet></ROW><ROW><id>19759342</id><snippet>%</snippet></ROW><ROW><id>19759342</id><snippet>int(str(y)[2:])</snippet></ROW><ROW><id>19759342</id><snippet>&gt;&gt;&gt; 2000 % 100
0
&gt;&gt;&gt; 2013 % 100
13
</snippet></ROW><ROW><id>19759366</id><snippet>form</snippet></ROW><ROW><id>19759366</id><snippet>"/peoples/"</snippet></ROW><ROW><id>19759366</id><snippet>action=""</snippet></ROW><ROW><id>19759366</id><snippet>form</snippet></ROW><ROW><id>19759366</id><snippet>if request.POST:
    form = PeopleForm(request.POST)
</snippet></ROW><ROW><id>19759366</id><snippet>form</snippet></ROW><ROW><id>19759366</id><snippet>POST</snippet></ROW><ROW><id>19759386</id><snippet>value</snippet></ROW><ROW><id>19759386</id><snippet>pig.runAndGainValue(5)</snippet></ROW><ROW><id>19759386</id><snippet>def runAndGainValue(self, value):
    self.value += value
</snippet></ROW><ROW><id>19759386</id><snippet>&gt;&gt;&gt; '10' + 5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't convert 'int' object to str implicitly
</snippet></ROW><ROW><id>19759386</id><snippet>Pig</snippet></ROW><ROW><id>19759386</id><snippet>value</snippet></ROW><ROW><id>19759386</id><snippet>def __init__(self, name, age, weight, value):
    self.name = name
    self.age = int(age)
    self.weight = int(weight)
    self.value = int(value)
</snippet></ROW><ROW><id>19759398</id><snippet>set(string)</snippet></ROW><ROW><id>19759398</id><snippet>acceptableChars</snippet></ROW><ROW><id>19759398</id><snippet>return set(string).issubset(set(acceptableChars))
</snippet></ROW><ROW><id>19759398</id><snippet>&gt;&gt;&gt; acceptableChars = ['a', 'b', 'c']
&gt;&gt;&gt; string1 = 'bacca'
&gt;&gt;&gt; string2 = 'barca'
&gt;&gt;&gt; set(string1)
set(['a', 'c', 'b'])
&gt;&gt;&gt; set(string2)
set(['a', 'r', 'b', 'c'])
&gt;&gt;&gt; set(string1).issubset(set(acceptableChars))
True
&gt;&gt;&gt; set(string2).issubset(set(acceptableChars))
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19759416</id><snippet>?:</snippet></ROW><ROW><id>19759416</id><snippet>((?:\s*\w+.\s*)+)
</snippet></ROW><ROW><id>19759416</id><snippet>m[1]</snippet></ROW><ROW><id>19759416</id><snippet>m[2]</snippet></ROW><ROW><id>19759416</id><snippet>m[0]</snippet></ROW><ROW><id>19759416</id><snippet>m[1]</snippet></ROW><ROW><id>19759456</id><snippet>l = [{'dist':56, 'responder':'n'}, {'dist':26, 'responder':'n'}, \
{'dist':86, 'responder':'n'}]

smallestTwo = sorted(l, key=lambda d: d['dist'])[:2]
</snippet></ROW><ROW><id>19759456</id><snippet>[{'responder': 'n', 'dist': 26}, {'responder': 'n', 'dist': 56}]
</snippet></ROW><ROW><id>19759572</id><snippet>people</snippet></ROW><ROW><id>19759572</id><snippet>people[0]</snippet></ROW><ROW><id>19759572</id><snippet>len</snippet></ROW><ROW><id>19759572</id><snippet>people</snippet></ROW><ROW><id>19759572</id><snippet>0</snippet></ROW><ROW><id>19759572</id><snippet>[0]</snippet></ROW><ROW><id>19759572</id><snippet>if len(people)!=0:
</snippet></ROW><ROW><id>19759572</id><snippet>people[0]</snippet></ROW><ROW><id>19759572</id><snippet>0</snippet></ROW><ROW><id>19759572</id><snippet>len</snippet></ROW><ROW><id>19759572</id><snippet>if people[0]!=0:
</snippet></ROW><ROW><id>19759623</id><snippet>%</snippet></ROW><ROW><id>19759623</id><snippet>&gt;&gt;&gt; 11 % 7
4
</snippet></ROW><ROW><id>19759790</id><snippet>zero = lambda l: next(i for i,v in enumerate(l) if v==0)
ending_zero = q + zero(mylist[q:])
starting_zero = q - zero(mylist[:q:-1])
return mylist[starting_zero:ending_zero]
</snippet></ROW><ROW><id>19759790</id><snippet>def two_directional_slice(original, condition, q):
    condition = lambda l: (i for i,v in enumerate(l) if condition(v)).next()
    ending_condition = q + condition(mylist[q:])
    starting_condition = q - condition(mylist[:q:-1])
    return mylist[starting_condition:ending_condition]
</snippet></ROW><ROW><id>19759790</id><snippet>return two_directional_slice(mylist, lambda x: x==0, 7)
</snippet></ROW><ROW><id>19759921</id><snippet>template = loader.get_template('base.html', wikiform)
</snippet></ROW><ROW><id>19759921</id><snippet>get_template(template_name[, dirs])
</snippet></ROW><ROW><id>19759921</id><snippet>wikiform</snippet></ROW><ROW><id>19759921</id><snippet>wikiform = WikiForm()
template = loader.get_template('base.html')
context = RequestContext(request, {'form': wikiform})
</snippet></ROW><ROW><id>19759926</id><snippet>_</snippet></ROW><ROW><id>19759926</id><snippet>&gt;&gt;&gt; 1+1
2
&gt;&gt;&gt; _
2
&gt;&gt;&gt; def f(x): 
...     return x+1
... 
&gt;&gt;&gt; f(3)
4
&gt;&gt;&gt; _
4
</snippet></ROW><ROW><id>19759975</id><snippet>latlist</snippet></ROW><ROW><id>19759975</id><snippet>longlist</snippet></ROW><ROW><id>19759975</id><snippet>splitData</snippet></ROW><ROW><id>19759975</id><snippet>if (betweenDates (splitData[0],date1,date2)):
    latList.append(float(splitData[2]))
    longList.append(float(splitData[3]))
</snippet></ROW><ROW><id>19759975</id><snippet>    magList.append(float(splitData[4]))
    depthList.append(float(splitData[5]))
</snippet></ROW><ROW><id>19759979</id><snippet># Main Inventory
Inventory = createInventory()

# Populating given inventory aray with items to be used throughout the game.
def createItems(inv):
    items = inv
    items[1] = "Axe"
    items[2] = "Gas"
    items[3] = "keys"
    items[4] = "gun"
    items[5] = "note"
    items[9] = "full"

# Check if the item passed to it is still in the inventory array
def checkItems(item):
    items = Inventory
    for i in range(len(items)):
        if items[i] == item:
            return "yes"
    return "no"

def createInventory():
    inv = range(11)
    inv[10] = "made"
    return inv

def stockInventory(item):
    inv = Inventory
    for i in range (11):
        if inv[i] == 0:
            inv[i] = item
            break
    return inv

def checkInventory(item):
    inv = Inventory
    for i in range(0, 11):
        if item == inv[i]:
            return "yes"
    return "no"
</snippet></ROW><ROW><id>19759982</id><snippet>class MyClass:
    result = None

    def a(self):
        # do things and store in self.result
        self.result = ...
        return self

    def b(self, value):
        # do things and store in self.result
        self.result = ...
        return self
</snippet></ROW><ROW><id>19759982</id><snippet>cl().a().b("test").c()</snippet></ROW><ROW><id>19759982</id><snippet>instance.result</snippet></ROW><ROW><id>19759994</id><snippet>#!/usr/local/cpython-3.3/bin/python

with open('/etc/crontab', 'r') as infile, open('output.txt', 'w') as outfile:
    seen = set()
    for line in infile:
        for word in line.split():
            if word not in seen:
                seen.add(word)
                outfile.write('{}\n'.format(word))
</snippet></ROW><ROW><id>19760041</id><snippet>django-project-template</snippet></ROW><ROW><id>19760041</id><snippet>socket.gethostname().lower()</snippet></ROW><ROW><id>19760118</id><snippet>import numpy as np

def wc(weights):
    cs = np.cumsum(weights)
    idx = cs.searchsorted(np.random.random() * cs[-1], 'right')
    return np.unravel_index(idx, weights.shape)
</snippet></ROW><ROW><id>19760137</id><snippet>View</snippet></ROW><ROW><id>19760137</id><snippet>class ICalDownload(View):
    def get(self, *args, **kwargs):
        # return your response just like you would in a function view.
</snippet></ROW><ROW><id>19760137</id><snippet>method_decorator</snippet></ROW><ROW><id>19760137</id><snippet>@method_decorator(auth_required)
def dispatch(self, *args, **kwargs):
    return super(ICalDownload, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>19760183</id><snippet>import csv

SDict = {'T1': 'A', 'T2': 'B', 'T4': 'D'}

with open('file.csv', 'r+b') as f:
    header = next(csv.reader(f))
    dict_writer = csv.DictWriter(f, header, -999)
    dict_writer.writerow(SDict)
</snippet></ROW><ROW><id>19760183</id><snippet>7,8,9,10,11A,B,-999,D,-999</snippet></ROW><ROW><id>19760239</id><snippet>PropertyTaxItem</snippet></ROW><ROW><id>19760239</id><snippet>Property</snippet></ROW><ROW><id>19760239</id><snippet>Citizen</snippet></ROW><ROW><id>19760239</id><snippet>s and prefetch the</snippet></ROW><ROW><id>19760239</id><snippet>items = PropertyTaxItem.objects.filter(i_status='active').select_related('property').prefetch_related('property__citizens')
</snippet></ROW><ROW><id>19760239</id><snippet>for i in items:
    citizens = i.property.citizens.all() # now you have a queryset of citizens. 
    # To get a list of dictionaries, you can call `.values()` on the queryset.
    pp.pprint(citizens.values())
</snippet></ROW><ROW><id>19760239</id><snippet>citizens</snippet></ROW><ROW><id>19760239</id><snippet>ManyToManyField</snippet></ROW><ROW><id>19760286</id><snippet>Validate()</snippet></ROW><ROW><id>19760286</id><snippet>wxEVT_CHAR</snippet></ROW><ROW><id>19760344</id><snippet>'w'</snippet></ROW><ROW><id>19760344</id><snippet>'a'</snippet></ROW><ROW><id>19760344</id><snippet>with open("in.txt") as in_file, open("tokens.txt", "w") as out_file:
   for line in in_file:
       words = line.split()
       for word in words:
           out_file.write(word)
           out_file.write("\n")
</snippet></ROW><ROW><id>19760461</id><snippet>x</snippet></ROW><ROW><id>19760461</id><snippet>x[:x.index(min(x)) + 1]
</snippet></ROW><ROW><id>19760461</id><snippet>&gt;&gt;&gt; x = [15021,14999,14888,0,-1000,-14000,-15431,-14000,-2000,0,1000,7000,15890]
&gt;&gt;&gt; x[:x.index(min(x)) + 1]
[15021, 14999, 14888, 0, -1000, -14000, -15431]
</snippet></ROW><ROW><id>19760463</id><snippet>n</snippet></ROW><ROW><id>19760463</id><snippet>rows</snippet></ROW><ROW><id>19760463</id><snippet>for col in range(n)</snippet></ROW><ROW><id>19760463</id><snippet>for col in range(rows+1)</snippet></ROW><ROW><id>19760463</id><snippet>def pascal(n):
    answer = ""
    for rows in range(n):
        answer = str(rows) + "|"
        for col in range(rows+1):
            answer = answer + str(col)
        print(answer)

pascal(5)
</snippet></ROW><ROW><id>19760658</id><snippet>newstate</snippet></ROW><ROW><id>19760658</id><snippet>newState != 'F2'</snippet></ROW><ROW><id>19760658</id><snippet>if (not(newState == 'F1' or newState == 'F2' or newState == 'F3' or newState == 'error')):
</snippet></ROW><ROW><id>19760658</id><snippet>if !A or !B or ...
</snippet></ROW><ROW><id>19760658</id><snippet>if !(A or B or...)
</snippet></ROW><ROW><id>19760658</id><snippet>if (!A and !B and ...)
</snippet></ROW><ROW><id>19760669</id><snippet>targetX = random.randint(startX, endX)  
targetY = random.randint(startY, endY)
for count in range (0, count):
    for sourceX in range(0, getWidth(pic)):   
        for sourceY in range(0, getHeight(pic)):
            color = getColor(getPixel(pic, sourceX, sourceY))
            setColor(getPixel(canv, targetX+sourceX, targetY+sourceY), color)
</snippet></ROW><ROW><id>19760706</id><snippet>column = [row[0] for row in matrix]
</snippet></ROW><ROW><id>19761006</id><snippet>importlib.import_module</snippet></ROW><ROW><id>19761006</id><snippet>import importlib

fileName = ['a','b','c']
for file in fileName:
    module = importlib.import_module(file)
    data.append(module.variableName)
</snippet></ROW><ROW><id>19761006</id><snippet>from a import variableName
from b import variableName
from c import variableName
</snippet></ROW><ROW><id>19761012</id><snippet>x = x[::-1]
y = y[::-1]
</snippet></ROW><ROW><id>19761084</id><snippet>mirrored = {'b': 'd', 'd': 'b', 'v': 'v', ...}
</snippet></ROW><ROW><id>19761084</id><snippet>given_string = input()
valid = True
for char in given_string:
    if not mirrored[char] in given_string:
        valid = False
        break
if valid:
    # generate mirrored string
</snippet></ROW><ROW><id>19761084</id><snippet>for</snippet></ROW><ROW><id>19761084</id><snippet>else</snippet></ROW><ROW><id>19761084</id><snippet>given_string = input()
valid = True
for char in given_string:
    if not mirrored[char] in given_string:
        break
else:
    # generate mirrored string
</snippet></ROW><ROW><id>19761110</id><snippet>setup.py</snippet></ROW><ROW><id>19761115</id><snippet>hours</snippet></ROW><ROW><id>19761115</id><snippet>main()</snippet></ROW><ROW><id>19761115</id><snippet>hours</snippet></ROW><ROW><id>19761115</id><snippet>getinput()</snippet></ROW><ROW><id>19761115</id><snippet>hours</snippet></ROW><ROW><id>19761115</id><snippet>calculate_hours()</snippet></ROW><ROW><id>19761115</id><snippet>calculate_payregular()</snippet></ROW><ROW><id>19761115</id><snippet>hours</snippet></ROW><ROW><id>19761115</id><snippet>calculate_hours()</snippet></ROW><ROW><id>19761115</id><snippet>strtime</snippet></ROW><ROW><id>19761115</id><snippet>regular, totalpay  = calculate_payregular (hours, rate, overtime)
</snippet></ROW><ROW><id>19761115</id><snippet>regular, totalpay  = calculate_payregular (strtime, rate, overtime)
</snippet></ROW><ROW><id>19761171</id><snippet>__import__</snippet></ROW><ROW><id>19761171</id><snippet>__import__(data)
</snippet></ROW><ROW><id>19761171</id><snippet>globals()[data] = __import__(data)
</snippet></ROW><ROW><id>19761302</id><snippet>enter code heredef pumpkin():
win = GraphWin("My Circle", 800,600)
c = Circle(Point(400,400),200)
c.setFill("Orange")
c.draw(win)
eye= Polygon(Point(500,270), Point(430,400), Point(550,400))
eye.setOutline("yellow")
eye.setFill("Red")
eye.draw(win)  #lesgoleft,#les=up,lessgoleft
reye= Polygon(Point(250,280), Point(230,400), Point(350,400))
reye.setOutline("yellow")
reye.setFill("Red")
reye.draw(win)#moreright
moth=Polygon(Point(250,500), Point(450,540), Point(370,500))
moth.setOutline("yellow")
moth.setFill("Red")
moth.draw(win)                             #moregoright
nose=Polygon(Point(380,400), Point(340,480), Point(500,480))
nose.setOutline("yellow")
nose.setFill("Red")
nose.draw(win)
up= Rectangle(Point(360,200),Point(430,100))
up.setFill("dark green")
up.draw(win)
win.getMouse()
win.close()
</snippet></ROW><ROW><id>19761459</id><snippet>p = []
while len(l) &gt; 0:
  p.append(min(l))
  l.remove(min(l))
</snippet></ROW><ROW><id>19761459</id><snippet>while</snippet></ROW><ROW><id>19761459</id><snippet>for</snippet></ROW><ROW><id>19761686</id><snippet># app1/models.py
class App1User(common_models.ApiUser):
    objects = common_models.ApiUser.objects.filter(channel='app1')

    class Meta:
        proxy = True
</snippet></ROW><ROW><id>19761793</id><snippet>citizens.objects.get(ownership__date_started)</snippet></ROW><ROW><id>19762013</id><snippet>exit()</snippet></ROW><ROW><id>19762013</id><snippet>site</snippet></ROW><ROW><id>19762013</id><snippet>quit(code=None) 
exit(code=None) 
    Objects that when printed, print a message like “Use quit() or
    Ctrl-D (i.e. EOF) to exit”, and when called, raise SystemExit with
    the specified exit code
</snippet></ROW><ROW><id>19762013</id><snippet>exit()</snippet></ROW><ROW><id>19762013</id><snippet>exit(None)</snippet></ROW><ROW><id>19762013</id><snippet>None</snippet></ROW><ROW><id>19762013</id><snippet>quit</snippet></ROW><ROW><id>19762013</id><snippet>exit</snippet></ROW><ROW><id>19762013</id><snippet>Quitter</snippet></ROW><ROW><id>19762013</id><snippet>Lib/_sitebuiltins.py</snippet></ROW><ROW><id>19762013</id><snippet>__call__</snippet></ROW><ROW><id>19762013</id><snippet>def __call__(self, code=None):
    # Shells like IDLE catch the SystemExit, but listen when their
    # stdin wrapper is closed.
    try:
        sys.stdin.close()
    except:
        pass
    raise SystemExit(code)
</snippet></ROW><ROW><id>19762013</id><snippet>sys.stdin</snippet></ROW><ROW><id>19762269</id><snippet>subPanel_right = wx.Panel(subPanel_top,-1,size=(560,300))
</snippet></ROW><ROW><id>19762269</id><snippet>subPanel_right.SetMinSize(560,300)
</snippet></ROW><ROW><id>19762489</id><snippet>file.readlines()</snippet></ROW><ROW><id>19762489</id><snippet>print</snippet></ROW><ROW><id>19762489</id><snippet>str.rstrip</snippet></ROW><ROW><id>19762489</id><snippet>print i.rstrip('\n')
</snippet></ROW><ROW><id>19762489</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>19762489</id><snippet>sys.stdout.write(i)
</snippet></ROW><ROW><id>19762489</id><snippet>file.readlines</snippet></ROW><ROW><id>19762489</id><snippet>with open("test.txt") as f:
    for i in f:
        print i.rstrip('\n')
        ...
</snippet></ROW><ROW><id>19762489</id><snippet>print</snippet></ROW><ROW><id>19762489</id><snippet>print(i, end='')</snippet></ROW><ROW><id>19762489</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>19762489</id><snippet>&gt;&gt; ' \r\n\t\v'.isspace()
True
</snippet></ROW><ROW><id>19762514</id><snippet>what = add(age, subtract(height, multiply(weight, divide(iq, 2))))
</snippet></ROW><ROW><id>19762514</id><snippet>age + (height - (weight * (iq / 2)))
</snippet></ROW><ROW><id>19762514</id><snippet>age + height - weight * iq / 2
</snippet></ROW><ROW><id>19762514</id><snippet>Age plus Height subtract Weight times half of IQ
</snippet></ROW><ROW><id>19762514</id><snippet>add(
    age, subtract(
        height, multiply(
            weight, divide(
                iq, 2
            )
        )
    )
)
</snippet></ROW><ROW><id>19762514</id><snippet>add(
    age, subtract(
        height, multiply(
            weight, (iq / 2)
        )
    )
)
</snippet></ROW><ROW><id>19762514</id><snippet>add(
    age, subtract(
        height, (weight * (iq / 2))
    )
)
</snippet></ROW><ROW><id>19762514</id><snippet>add(
    age, (height - (weight * (iq / 2)))
)
</snippet></ROW><ROW><id>19762514</id><snippet>age + (height - (weight * (iq / 2)))
</snippet></ROW><ROW><id>19762514</id><snippet>multiply(x, y) is equivalent to x * y
add(x, y) is equivalent to x + y
subtract(x, y) is equivalent to x - y
divide(x, y) is equivalent to x / y
</snippet></ROW><ROW><id>19762514</id><snippet>multiply(x, add(y, z)) is equivalent to multiply(x, (y + z)), and  x * (y + z)
</snippet></ROW><ROW><id>19762514</id><snippet>(y + z)</snippet></ROW><ROW><id>19762598</id><snippet>redirect(to[, permanent=False], *args, **kwargs)</snippet></ROW><ROW><id>19762598</id><snippet>url(r'^home/$', home, name='home_view')
...
</snippet></ROW><ROW><id>19762598</id><snippet>def logout(request):
    ...
    redirect('home_view')
</snippet></ROW><ROW><id>19762708</id><snippet>def add(a, b):
    print "ADDING %d + %d" % (a, b)
    return a + b

print "Let's do some math with just functions!"

def getf(prompt_mesg):
    s = raw_input(prompt_mesg)
    return float(s)

age = add(getf("Add this:"), getf("To this:"))
</snippet></ROW><ROW><id>19762708</id><snippet>def getf(prompt_mesg):
    while True:
        try:
            s = raw_input(prompt_mesg)
            return float(s)
        except ValueError:
            print("Could not convert that input.  Please enter a number.")
</snippet></ROW></DATA>