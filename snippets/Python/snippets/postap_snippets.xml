<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>3907636</id><snippet>import tempfile
import Image
import itertools

COLUMNS=5
ROWS=5
VSEP=20
HSEP=40
IMAGE_SIZE=(100,100)

def draw():
    image=Image.new("RGB",
                    ((IMAGE_SIZE[0]+HSEP)*COLUMNS+HSEP,
                     (IMAGE_SIZE[1]+VSEP)*ROWS+VSEP),
                    (255,255,255))
    for row,column in itertools.product(range(ROWS),range(COLUMNS)):
        # print(row,column)  # uncomment this to see what itertools.product does
        paste_x=HSEP+column*(IMAGE_SIZE[0]+HSEP)
        paste_y=VSEP+row*(IMAGE_SIZE[1]+VSEP)
        image.paste(Image.new("RGB",IMAGE_SIZE,(0,0,0)),(paste_x,paste_y))
    out=tempfile.NamedTemporaryFile(delete=False)
    path=out.name
    image.save(out, "PNG")
    out.close()
    print path

draw()
</snippet></ROW><ROW><id>3907636</id><snippet>paste_y</snippet></ROW><ROW><id>3907636</id><snippet>paste_y</snippet></ROW><ROW><id>3907636</id><snippet>image</snippet></ROW><ROW><id>3907636</id><snippet>paste_y=-IMAGE_SIZE[1]</snippet></ROW><ROW><id>3907636</id><snippet>j=0</snippet></ROW><ROW><id>3907872</id><snippet>copyfileobj</snippet></ROW><ROW><id>3907872</id><snippet> picture_file = open(i.makePath(), 'w')
</snippet></ROW><ROW><id>3907872</id><snippet>picture_file = i</snippet></ROW><ROW><id>3907872</id><snippet>ImageHandler</snippet></ROW><ROW><id>3907872</id><snippet> shutil.copyfileobj(request.POST['picture'].file, picture_file)
</snippet></ROW><ROW><id>3907910</id><snippet>login()</snippet></ROW><ROW><id>3907910</id><snippet>ftp.prot_p()
</snippet></ROW><ROW><id>3908086</id><snippet>tempfile = request.POST['file']
file_path = 'uploaded_files/' + tempfile.filename # for the original filename
permanent_file = open( file_path, 'wb')
shutil.copyfileobj(tempfile.file, permanent_file)
</snippet></ROW><ROW><id>3908179</id><snippet>subprocess</snippet></ROW><ROW><id>3908179</id><snippet>subprocess</snippet></ROW><ROW><id>3908179</id><snippet>popen</snippet></ROW><ROW><id>3908179</id><snippet>popen2</snippet></ROW><ROW><id>3908258</id><snippet>from django.db.models import Avg
Table.objects.extra(select={'month':"strftime('%m',date)"}).values('month').annotate(Avg('value'))
</snippet></ROW><ROW><id>3908258</id><snippet>strftime('%m',date)</snippet></ROW><ROW><id>3908258</id><snippet>month(date)</snippet></ROW><ROW><id>3908398</id><snippet>replaceWith</snippet></ROW><ROW><id>3908398</id><snippet>replaceWith</snippet></ROW><ROW><id>3908398</id><snippet>replaceWith</snippet></ROW><ROW><id>3908768</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; pat="(.+)\.(avi|rar|zip|txt)"
&gt;&gt;&gt; re.search(pat, "abcdefg.zip", re.IGNORECASE).groups()
('abcdefg', 'zip')
&gt;&gt;&gt; re.search(pat, "abcdefg.ZIP", re.IGNORECASE).groups()
('abcdefg', 'ZIP')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3908770</id><snippet>if key not in request.session:
    # Set it.
</snippet></ROW><ROW><id>3908770</id><snippet>if 'cart' not in request.session:
    # Set it.
</snippet></ROW><ROW><id>3908770</id><snippet>key not in</snippet></ROW><ROW><id>3908770</id><snippet>not key in</snippet></ROW><ROW><id>3909031</id><snippet>import subone
print subone.a
</snippet></ROW><ROW><id>3909031</id><snippet>print dir()
import subone
print dir()
print subone.a
</snippet></ROW><ROW><id>3909031</id><snippet>print "Before importing subone : ", dir()
import subone
print "After importing subone and before importing subtwo: ",  dir()
import subtwo
print "After importing subone and subtwo: ", dir()
</snippet></ROW><ROW><id>3909031</id><snippet>a = 'abc'
</snippet></ROW><ROW><id>3909031</id><snippet>print dir()
import subone
print "module level print: ", subone.a
print dir()
def printX():
    print subone.a
</snippet></ROW><ROW><id>3909031</id><snippet>Before importing subone :  ['__builtins__', '__doc__', '__file__', '__name__', '__package__']
After importing subone and before importing subtwo:  ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone']
['__builtins__', '__doc__', '__file__', '__name__', '__package__']
module level print:  abc
['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone']
After importing subone and subtwo:  ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'subone', 'subtwo']
</snippet></ROW><ROW><id>3909907</id><snippet>','</snippet></ROW><ROW><id>3909907</id><snippet>locale</snippet></ROW><ROW><id>3909907</id><snippet>print format(1234, ",d")   # 1,234
print "{:,d}".format(1234) # 1,234
</snippet></ROW><ROW><id>3909907</id><snippet>locale</snippet></ROW><ROW><id>3909907</id><snippet>import locale
locale.setlocale(locale.LC_ALL, '') # empty string for platform's default setting
</snippet></ROW><ROW><id>3909907</id><snippet>'n'</snippet></ROW><ROW><id>3909907</id><snippet>print format(1234, "n")   # 1,234
print "{:n}".format(1234) # 1,234
</snippet></ROW><ROW><id>3909907</id><snippet>print format(1234, "n")   # 1.234
print "{:n}".format(1234) # 1.234
</snippet></ROW><ROW><id>3909907</id><snippet>'d'</snippet></ROW><ROW><id>3909907</id><snippet>',d'</snippet></ROW><ROW><id>3909907</id><snippet>setlocale()</snippet></ROW><ROW><id>3909907</id><snippet>'d'</snippet></ROW><ROW><id>3909907</id><snippet>locale.format()</snippet></ROW><ROW><id>3909907</id><snippet>locale.format_string()</snippet></ROW><ROW><id>3910170</id><snippet>cmd.Cmd</snippet></ROW><ROW><id>3910961</id><snippet>ndarray</snippet></ROW><ROW><id>3911072</id><snippet>def connect(self):
    return getattr(self, "connect_%s" % self.type)()

def connect_aol(self):
    pass # AOL stuff

def connect_yahoo(self):
    pass # Yahoo! stuff
</snippet></ROW><ROW><id>3911072</id><snippet>type</snippet></ROW><ROW><id>3911112</id><snippet>bind_and_activate=True</snippet></ROW><ROW><id>3911112</id><snippet>server.allow_reuse_address=True</snippet></ROW><ROW><id>3911112</id><snippet>def serve_thread(host, port):
    if port == 1858 :
        server = SocketServer.TCPServer((host, port), Serverhttp,bind_and_activate=True)
    elif port == 1958 :
        server = SocketServer.TCPServer((host, port), Serversmtp,bind_and_activate=True)
    server.allow_reuse_address=True
    server.server_bind()
    server.server_activate()
    server.serve_forever()
</snippet></ROW><ROW><id>3911112</id><snippet>class ReuseAddrServer(SocketServer.TCPServer):
    def __init__(self, (host, port)):
        SocketServer.TCPServer.__init__(self, (host, port), bind_and_activate=False)
        self.allow_reuse_address = True
        self.server_bind()
        self.server_activate()
</snippet></ROW><ROW><id>3911263</id><snippet>blist</snippet></ROW><ROW><id>3911359</id><snippet>a = [(1, 2), (1, 8), (2, 3), (2, 7), (2, 8), (2, 9), (3, 1), (3, 2), (3, 5), (3, 6),  (3, 7), (3, 7), (3, 9)]

x1=None  # here we keep track of the last x we saw
ys=None  # here we keep track of all ys we've seen for this x1

result = [] 

for x,y in a:
    if x != x1:  # this is an x we haven't seen before
        if ys:   # do we have results for the last x?
            result.append( ys ) 
        ys = [ x, '', y ] # initialize the next set of results
        x1 = x
    else:
        ys.append( y ) # add this to the results we are buliding

if ys:
    result.append( ys )  # add the last set of results

print result
</snippet></ROW><ROW><id>3911567</id><snippet># foo.py
setting1 = 0
setting2 = 'foo'

def configure(config1, config2):
    global setting1, setting2

    setting1 = config1
    setting2 = config2
</snippet></ROW><ROW><id>3911567</id><snippet>import foo

foo.configure(42, 'bar')
</snippet></ROW><ROW><id>3911670</id><snippet>import re

def index(longstr, pat):
    rx = re.compile(r'(?P&lt;pre&gt;.*?)({0})'.format(pat))
    match = rx.match(longstr)
    return match and len(match.groupdict()['pre'])
</snippet></ROW><ROW><id>3911670</id><snippet>&gt;&gt;&gt; index('bar', 'foo') is None
True
&gt;&gt;&gt; index('barfoo', 'foo')
3
&gt;&gt;&gt; index('\xbarfoo', 'foo')
2
</snippet></ROW><ROW><id>3911750</id><snippet>=</snippet></ROW><ROW><id>3911750</id><snippet>==</snippet></ROW><ROW><id>3911750</id><snippet>a = 5  # assigns the variable a to 5
a == 5 # returns true
a == 4 # returns false
a = 4 # a is now 4
a == 4 # returns true
</snippet></ROW><ROW><id>3911763</id><snippet>sl = slice(0,4)
</snippet></ROW><ROW><id>3911763</id><snippet>&gt;&gt;&gt; s = "ABCDEFGHIJKL"
&gt;&gt;&gt; sl = slice(0,4)
&gt;&gt;&gt; print s[sl]
'ABCD'
</snippet></ROW><ROW><id>3911763</id><snippet>data = """\
0010GEORGE JETSON    12345 SPACESHIP ST   HOUSTON       TX
0020WILE E COYOTE    312 ACME BLVD        TUCSON        AZ
0030FRED FLINTSTONE  246 GRANITE LANE     BEDROCK       CA
0040JONNY QUEST      31416 SCIENCE AVE    PALO ALTO     CA""".splitlines()


fieldslices = [slice(*fielddef) for fielddef in [
    (0,4), (4, 21), (21,42), (42,56), (56,58),
    ]]
fields = "id name address city state".split()

for rec in data:
    for field,sl in zip(fields, fieldslices):
        print field, ':', rec[sl]
    print
</snippet></ROW><ROW><id>3911763</id><snippet>id : 0010
name : GEORGE JETSON    
address : 12345 SPACESHIP ST   
city : HOUSTON       
state : TX

id : 0020
name : WILE E COYOTE    
address : 312 ACME BLVD        
city : TUCSON        
state : AZ

id : 0030
name : FRED FLINTSTONE  
address : 246 GRANITE LANE     
city : BEDROCK       
state : CA

id : 0040
name : JONNY QUEST      
address : 31416 SCIENCE AVE    
city : PALO ALTO     
state : CA
</snippet></ROW><ROW><id>3911830</id><snippet>rec_fn()</snippet></ROW><ROW><id>3911830</id><snippet>rec_fn</snippet></ROW><ROW><id>3911830</id><snippet>()</snippet></ROW><ROW><id>3911830</id><snippet>def func1():
   print "func1"

func2 = func1

func2()       # prints "func1"
</snippet></ROW><ROW><id>3911830</id><snippet>func3 = lambda x: x+1
</snippet></ROW><ROW><id>3911830</id><snippet>func2 = func1</snippet></ROW><ROW><id>3911830</id><snippet>lambda: 3</snippet></ROW><ROW><id>3911830</id><snippet>lambda x, y: x+y</snippet></ROW><ROW><id>3911830</id><snippet>or</snippet></ROW><ROW><id>3911830</id><snippet>or</snippet></ROW><ROW><id>3911830</id><snippet>True</snippet></ROW><ROW><id>3911830</id><snippet>True</snippet></ROW><ROW><id>3911830</id><snippet>if not 10==11: rec_fn()</snippet></ROW><ROW><id>3911830</id><snippet>and</snippet></ROW><ROW><id>3911830</id><snippet>False</snippet></ROW><ROW><id>3911830</id><snippet>False</snippet></ROW><ROW><id>3912698</id><snippet>/home/ygamretuta/dev/site1</snippet></ROW><ROW><id>3912698</id><snippet>sys.path</snippet></ROW><ROW><id>3913185</id><snippet>f.func_closure</snippet></ROW><ROW><id>3913185</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>3913185</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>3913185</id><snippet>types.FunctionType</snippet></ROW><ROW><id>3913185</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>3913185</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>3913185</id><snippet>types.FunctionType</snippet></ROW><ROW><id>3913185</id><snippet>import types
import opcode

# Opcode constants used for comparison and replacecment
LOAD_FAST = opcode.opmap['LOAD_FAST']
LOAD_GLOBAL = opcode.opmap['LOAD_GLOBAL']
STORE_FAST = opcode.opmap['STORE_FAST']

DEBUGGING = True

def append_arguments(code_obj, new_locals):
    co_varnames = code_obj.co_varnames   # Old locals
    co_names = code_obj.co_names      # Old globals
    co_argcount = code_obj.co_argcount     # Argument count
    co_code = code_obj.co_code         # The actual bytecode as a string

    # Make one pass over the bytecode to identify names that should be
    # left in code_obj.co_names.
    not_removed = set(opcode.hasname) - set([LOAD_GLOBAL])
    saved_names = set()
    for inst in instructions(co_code):
        if inst[0] in not_removed:
            saved_names.add(co_names[inst[1]])

    # Build co_names for the new code object. This should consist of 
    # globals that were only accessed via LOAD_GLOBAL
    names = tuple(name for name in co_names
                  if name not in set(new_locals) - saved_names)

    # Build a dictionary that maps the indices of the entries in co_names
    # to their entry in the new co_names
    name_translations = dict((co_names.index(name), i)
                             for i, name in enumerate(names))

    # Build co_varnames for the new code object. This should consist of
    # the entirety of co_varnames with new_locals spliced in after the
    # arguments
    new_locals_len = len(new_locals)
    varnames = (co_varnames[:co_argcount] + new_locals +
                co_varnames[co_argcount:])

    # Build the dictionary that maps indices of entries in the old co_varnames
    # to their indices in the new co_varnames
    range1, range2 = xrange(co_argcount), xrange(co_argcount, len(co_varnames))
    varname_translations = dict((i, i) for i in range1)
    varname_translations.update((i, i + new_locals_len) for i in range2)

    # Build the dictionary that maps indices of deleted entries of co_names
    # to their indices in the new co_varnames
    names_to_varnames = dict((co_names.index(name), varnames.index(name))
                             for name in new_locals)

    if DEBUGGING:
        print "injecting: {0}".format(new_locals)
        print "names: {0} -&gt; {1}".format(co_names, names)
        print "varnames: {0} -&gt; {1}".format(co_varnames, varnames)
        print "names_to_varnames: {0}".format(names_to_varnames)
        print "varname_translations: {0}".format(varname_translations)
        print "name_translations: {0}".format(name_translations)


    # Now we modify the actual bytecode
    modified = []
    for inst in instructions(code_obj.co_code):
        # If the instruction is a LOAD_GLOBAL, we have to check to see if
        # it's one of the globals that we are replacing. Either way,
        # update its arg using the appropriate dict.
        if inst[0] == LOAD_GLOBAL:
            print "LOAD_GLOBAL: {0}".format(inst[1])
            if inst[1] in names_to_varnames:
                print "replacing with {0}: ".format(names_to_varnames[inst[1]])
                inst[0] = LOAD_FAST
                inst[1] = names_to_varnames[inst[1]]
            elif inst[1] in name_translations:    
                inst[1] = name_translations[inst[1]]
            else:
                raise ValueError("a name was lost in translation")
        # If it accesses co_varnames or co_names then update its argument.
        elif inst[0] in opcode.haslocal:
            inst[1] = varname_translations[inst[1]]
        elif inst[0] in opcode.hasname:
            inst[1] = name_translations[inst[1]]
        modified.extend(write_instruction(inst))

    code = ''.join(modified)
    # Done modifying codestring - make the code object

    return types.CodeType(co_argcount + new_locals_len,
                          code_obj.co_nlocals + new_locals_len,
                          code_obj.co_stacksize,
                          code_obj.co_flags,
                          code,
                          code_obj.co_consts,
                          names,
                          varnames,
                          code_obj.co_filename,
                          code_obj.co_name,
                          code_obj.co_firstlineno,
                          code_obj.co_lnotab)


def instructions(code):
    code = map(ord, code)
    i, L = 0, len(code)
    extended_arg = 0
    while i &lt; L:
        op = code[i]
        i+= 1
        if op &lt; opcode.HAVE_ARGUMENT:
            yield [op, None]
            continue
        oparg = code[i] + (code[i+1] &lt;&lt; 8) + extended_arg
        extended_arg = 0
        i += 2
        if op == opcode.EXTENDED_ARG:
            extended_arg = oparg &lt;&lt; 16
            continue
        yield [op, oparg]

def write_instruction(inst):
    op, oparg = inst
    if oparg is None:
        return [chr(op)]
    elif oparg &lt;= 65536L:
        return [chr(op), chr(oparg &amp; 255), chr((oparg &gt;&gt; 8) &amp; 255)]
    elif oparg &lt;= 4294967296L:
        return [chr(opcode.EXTENDED_ARG),
                chr((oparg &gt;&gt; 16) &amp; 255),
                chr((oparg &gt;&gt; 24) &amp; 255),
                chr(op),
                chr(oparg &amp; 255),
                chr((oparg &gt;&gt; 8) &amp; 255)]
    else:
        raise ValueError("Invalid oparg: {0} is too large".format(oparg))



if __name__=='__main__':
    import dis

    class Foo(object):
        y = 1

    z = 1
    def test(x):
        foo = Foo()
        foo.y = 1
        foo = x + y + z + foo.y
        print foo

    code_obj = append_arguments(test.func_code, ('y',))
    f = types.FunctionType(code_obj, test.func_globals, argdefs=(1,))
    if DEBUGGING:
        dis.dis(test)
        print '-'*20
        dis.dis(f)
    f(1)
</snippet></ROW><ROW><id>3913185</id><snippet>EXTENDED_ARG</snippet></ROW><ROW><id>3913488</id><snippet>global</snippet></ROW><ROW><id>3913488</id><snippet>nonlocal</snippet></ROW><ROW><id>3913760</id><snippet>from Tkinter import *
from PIL import Image, ImageTk

root=Tk()

root.title("My Image")

w = Canvas(root, width=50, height=250)
image = Image.open("blog0.bmp")
w.create_image((25, 125), image=ImageTk.PhotoImage(image))

w.pack()

root.mainloop()
</snippet></ROW><ROW><id>3913881</id><snippet>\r\n</snippet></ROW><ROW><id>3913881</id><snippet>\n</snippet></ROW><ROW><id>3913881</id><snippet>\r\n</snippet></ROW><ROW><id>3913881</id><snippet>\n</snippet></ROW><ROW><id>3913881</id><snippet>lines = r.splitlines()
</snippet></ROW><ROW><id>3914098</id><snippet>from django.utils.datastructures import SortedDict</snippet></ROW><ROW><id>3914516</id><snippet># MetaProject v 0.21
# -*- coding: utf-8 -*-
import socket
import sys
import re
import base64
import binascii
import time
import zlib
import sys
import StringIO
import contextlib
import smtplib
import threading
import SocketServer
SocketServer.TCPServer.allow_reuse_address = True 

"""
Thanks to :
People from irc :
Flox,Luyt
People from stack Overflow (http://stackoverflow.com/):
Philippe Leybaert,Platinum Azure,methodin,Suresh Kumar,S.Lott,MatTheCat,
kevpie,Ignacio Vazquez-Abrams,adamk,Frédéric Hamidi,THC4k,THC4k,Blam,bstpierre
"""

def sendmail(exp,dest,msg):
    server = dest.split("@")[1]
    s = smtplib.SMTP("localhost")
    s.sendmail(exp,dest,msg)



@contextlib.contextmanager
def stdoutIO(stdout=None):
    old = sys.stdout
    if stdout is None:
        stdout = StringIO.StringIO()
    sys.stdout = stdout
    yield stdout
    sys.stdout = old





class Serversmtp(SocketServer.BaseRequestHandler):
    def handle(self):
        self.data = self.request.recv(1024)
        socket = self.request
        print "%s wrote:" % self.client_address[0]
        self.data = self.traitement(self.data)
        socket.sendto(self.data, self.client_address)

    def traitement(self,data):
        return "toto"


class Pages :
    def __init__(self):
        self.balisep = re.compile("&lt;\?.*\?&gt;",re.DOTALL)
    def root(self,cgi=None):
        return self.decompress_html("""eNqzySjJzbHjsknKT6m04yrJhECbpCKgWGZuukJxUbKtUlpiWWZyfp4ekFCyg8jZcxUUZeaVKCiV
5JfkK2krgUSVuOztuLhs9CFm2eiDjQYAG5wecg==""")

    def faviconico(self):
        return self.decompress_img("""eNqdk39MVWUYx99zDrZkJJc/dGtqsVZKFmttFhcuF0wXC1bTZmq0qVuWa8t+/NXPW1MQCk3FMBKs
LNauoq6AAr2zsFLLHAN1YQXJryzJewXuhV29HO759JyX//uj9933vOe8e7/f5/k+73OUMmR6PEqe
meq5FKXmKKWyBLIlO9P7/zUiEzaB02GWt43ycHOUx2St6YwTtxP0DZ6n+LV5LH5DURgwWRJQ5L+p
eEi+Xa4zZbP+aD9pByLMaR5jdkuUuV9NcNuhKIFTI4DD0bON3P+Kha/coLDMouAtRYHwl72u6IvE
mNvwG57QddJCUdJbY6S3jGmN+w5fYTwhCnackor55FZK3AqTfFmXbDbxSx4T9g1ygh2or0cxTzuk
nrSZ2R5HHbpKSVMvjuPAlMOq3XexuErh26HwC3/ZlhmShwFJOPfPON6mTlKb+lGtf2J+McSixov8
Hom6VAaGf6Ww8hZyq8X7exb+KpOCCvGwRXHueJDkSFj77B6bpOnSMLVdfVwdv4477KlJXggWs2iH
gbdG4otG7nbx8K5oicbO4jv4eJ2XlrdX8131i4z0dIlSUqZDOBbm+YNFZAs3v1a4NdPw7xJsE2xV
NJQu5PNV8/ik5Gb2PpJBdLhfe74cGeTx+gVk75F4H5r4BF55970vddtl4JccvFKPg6tn89FyD8GX
ltLesFX7tSXvn3tOcPurJg/sU+TUCeol3z2GhteNv92g4B2D/esWcrH9CI7UMREbpe/Ep1wb6tEe
6o5VcG+ZxKy3yNtrkSMecgV5u6UPxMdS4V8b7NW1i0eHad2UxfEnFKG1s7jcFdL7+5rryHx5Pjkf
SMxaS/t/sGom2c/mkX7PNvf6NC40lhFaqTj7TArfPmlyprpU58ANyLr7J2669QcyFjSTkdnGDI/0
izmIMrqF7PYHtAd8/LhWeBtNTj1l0rlzja6DO1asvESKmpDzYKmkrOPS+39hmT3Td2zbtG26kzMb
FF0bFd+XKi58We6mr3uvqGgAQyVQ1hSGkRCNMdEIi0a/2yDa57HyFYTWKDo2mHzz9Cxif/+h76L7
lzipaVfkbBLLcITnxo9LPhHxMKD/QeQfHOrtILg+k88eTeH8kUqxlGQ0miCv8KT2aZqTWsNU03yl
RjR3s6H+93C5/wIoQoi6""")




    def toto(self):
        return self.decompress_html("""eNqzySjJzbHjsknKT6m04yrLLy1WSC1JLVZIVCjJL8nnstGHSNjog9UBAGolDzo=""")

    def p404(self):
        return self.decompress_html("""eNqzySjJzbHjsknKT6m04zIxMFFIScwrVihJVEhLTE5VUOSy0YdI2eiDVQIAZBgOeA==""")

    def decompress_img(self,img):
        img = zlib.decompress(base64.decodestring(img))
        return img

    def decompress_html(self,html) :
        page = "HTTP/1.0 200 OK\r\nContent-type:text/html;charset=utf8\r\n\r\n"
        page+=zlib.decompress(base64.decodestring(html))
        commands = self.balisep.findall(page)
        print commands
        for c in commands :
            command = c.replace("&lt;? ","")
            command = c.replace("&lt;?","")
            command = command.replace(" ?&gt;","")
            command = command.replace("?&gt;","")
            print command
            with stdoutIO() as s:
                exec(command)
            page = page.replace(c,s.getvalue())
        return page

class Serverhttp(SocketServer.BaseRequestHandler):
    def handle(self):
        self.Pages = Pages()
        self.GET = re.compile("GET.*?HTTP")
        self.POST = re.compile("POST.*?HTTP")
        self.data = self.request.recv(1024)
        socket = self.request
        print "%s wrote:" % self.client_address[0]
        self.data = self.traitement(self.data)
        socket.sendto(self.data, self.client_address)             

    def traitement(self,data):
        url = self.POST.findall(data)
        url = self.GET.findall(data)
        url = url[0].replace("GET","")
        url = url.replace("POST","")
        url = url.replace("HTTP","")
        url = url.replace(" ","")
        url = re.sub(r"^/","",url)
        url = re.sub(r"\.","",url)
        if url != "":
            urls = url.split("/")
            if len(urls) != 0 :
                print urls
                url = urls[0]
        print "url %s"%url
        if url == "" :
            return self.Pages.root()
        elif url in dir(self.Pages) and url != "":
            return getattr(self.Pages,url)()
        else :
            return self.Pages.p404()

def serve_thread(host, port):
    if port == 4242 :
        server = SocketServer.TCPServer((host, port), Serverhttp,bind_and_activate=True)
    elif port == 25 :
        server = SocketServer.TCPServer((host, port), Serversmtp,bind_and_activate=True)
    server.serve_forever()





if __name__ == "__main__":
    threading.Thread(target=serve_thread,args=('localhost', 4242)).start()
    threading.Thread(target=serve_thread,args=('localhost', 25)).start()
    print "toto"
</snippet></ROW><ROW><id>3914686</id><snippet>x or y</snippet></ROW><ROW><id>3914686</id><snippet>x</snippet></ROW><ROW><id>3914686</id><snippet>x</snippet></ROW><ROW><id>3914686</id><snippet>y</snippet></ROW><ROW><id>3914686</id><snippet>x</snippet></ROW><ROW><id>3914686</id><snippet>True</snippet></ROW><ROW><id>3914686</id><snippet>False</snippet></ROW><ROW><id>3914686</id><snippet>if</snippet></ROW><ROW><id>3914686</id><snippet>False</snippet></ROW><ROW><id>3914686</id><snippet>None</snippet></ROW><ROW><id>3914686</id><snippet>0</snippet></ROW><ROW><id>3914686</id><snippet>[]</snippet></ROW><ROW><id>3914713</id><snippet>&gt;&gt;&gt; a="aaaa#b:c:"
&gt;&gt;&gt; a.split(":",2)[0].split("#")[-1]
'b'
</snippet></ROW><ROW><id>3914732</id><snippet>from pyparsing import Regex, Optional

number = Regex(r"\d+(\.\d*)?").setParseAction(lambda t: float(t[0]))

fraction = number("numerator") + "/" + number("denominator")
fraction.setParseAction(lambda t: t.numerator / t.denominator)
</snippet></ROW><ROW><id>3914732</id><snippet>tests = """\
1
1.0
1/2
1.0/2.0
1 1/2
1.0 1/2
1.0 1.0/2.0""".splitlines()

for t in tests:
    print t, fractExpr.parseString(t)
</snippet></ROW><ROW><id>3914732</id><snippet>fractExpr = Optional(number) + Optional(fraction)
</snippet></ROW><ROW><id>3914732</id><snippet>fractExpr.setParseAction(lambda t: sum(t))
</snippet></ROW><ROW><id>3914732</id><snippet>1 [1.0]
1.0 [1.0]
1/2 [1.0]
1.0/2.0 [1.0]
1 1/2 [1.5]
1.0 1/2 [1.5]
1.0 1.0/2.0 [1.5]
</snippet></ROW><ROW><id>3914732</id><snippet>1/2</snippet></ROW><ROW><id>3914732</id><snippet>Optional(number)</snippet></ROW><ROW><id>3914732</id><snippet>Optional(fraction)</snippet></ROW><ROW><id>3914732</id><snippet>fractExpr = fraction | number + Optional(fraction)
</snippet></ROW><ROW><id>3914732</id><snippet>1 [1.0]
1.0 [1.0]
1/2 [0.5]
1.0/2.0 [0.5]
1 1/2 [1.5]
1.0 1/2 [1.5]
1.0 1.0/2.0 [1.5]
</snippet></ROW><ROW><id>3914795</id><snippet>"%.2f" % 1.2399 # returns "1.24"
"%.3f" % 1.2399 # returns "1.240"
"%.2f" % 1.2 # returns "1.20"
</snippet></ROW><ROW><id>3914795</id><snippet>Decimal</snippet></ROW><ROW><id>3914795</id><snippet>decimal</snippet></ROW><ROW><id>3914861</id><snippet>urllib.unquote</snippet></ROW><ROW><id>3914861</id><snippet>&gt;&gt;&gt; from urllib import unquote
&gt;&gt;&gt; unquote("%DD%F2%EE%20%F2%E5%F1%F2")
</snippet></ROW><ROW><id>3914861</id><snippet>unicode</snippet></ROW><ROW><id>3914861</id><snippet>encode</snippet></ROW><ROW><id>3914861</id><snippet>unicode</snippet></ROW><ROW><id>3914861</id><snippet>&gt;&gt;&gt; from urllib import unquote, quote
&gt;&gt;&gt; import json, urllib2, pprint
&gt;&gt;&gt; decoded = unicode(unquote("%DD%F2%EE%20%F2%E5%F1%F2"), "windows-1251")
&gt;&gt;&gt; print decoded
Это тест
&gt;&gt;&gt; recoded = decoded.encode("utf-8")
</snippet></ROW><ROW><id>3914861</id><snippet>&gt;&gt;&gt; recoded
'\xd0\xad\xd1\x82\xd0\xbe \xd1\x82\xd0\xb5\xd1\x81\xd1\x82'
</snippet></ROW><ROW><id>3914861</id><snippet>urllib.quote</snippet></ROW><ROW><id>3914861</id><snippet>&gt;&gt;&gt; url = "http://ajax.googleapis.com/ajax/services/language/detect?v=1.0&amp;q=%s" % quote(recoded)
&gt;&gt;&gt; data = json.loads(urllib2.urlopen(url).read())
&gt;&gt;&gt; pprint.pprint(data)
{u'responseData': {u'confidence': 0.094033934,
                   u'isReliable': False,
                   u'language': u'ru'},
 u'responseDetails': None,
 u'responseStatus': 200}
</snippet></ROW><ROW><id>3915056</id><snippet>sum</snippet></ROW><ROW><id>3915056</id><snippet>sum.func_code.co_argcount</snippet></ROW><ROW><id>3915082</id><snippet>type</snippet></ROW><ROW><id>3915082</id><snippet>CommentForm = type("CommentForm", (Form,), { 
    'name': forms.CharField(),
    ...
})
</snippet></ROW><ROW><id>3915400</id><snippet>for line in mylistings:
    out = line + [None] * (4 - len(line)) # pad the list with None to 4 elements
    cursor.execute("INSERT INTO LoadData VALUES (%s, %s, %s, %s)", out)
</snippet></ROW><ROW><id>3915474</id><snippet>sys.path</snippet></ROW><ROW><id>3915474</id><snippet>"."</snippet></ROW><ROW><id>3915615</id><snippet>root.mainloop</snippet></ROW><ROW><id>3916403</id><snippet>django.template.defaultfilters</snippet></ROW><ROW><id>3916403</id><snippet>dateformat</snippet></ROW><ROW><id>3916403</id><snippet>dateformat</snippet></ROW><ROW><id>3916403</id><snippet>time</snippet></ROW><ROW><id>3916633</id><snippet>__init__</snippet></ROW><ROW><id>3916633</id><snippet>self.fields</snippet></ROW><ROW><id>3916977</id><snippet>From:</snippet></ROW><ROW><id>3916977</id><snippet>sendmail()</snippet></ROW><ROW><id>3916977</id><snippet>From</snippet></ROW><ROW><id>3916977</id><snippet>To</snippet></ROW><ROW><id>3916977</id><snippet>Subject</snippet></ROW><ROW><id>3916977</id><snippet>MIME-Version</snippet></ROW><ROW><id>3916977</id><snippet>Content-Type</snippet></ROW><ROW><id>3916977</id><snippet>From: hi@sender.com</snippet></ROW><ROW><id>3916977</id><snippet>smtpObj = smtplib.SMTP('mail.server.com')</snippet></ROW><ROW><id>3916977</id><snippet>@</snippet></ROW><ROW><id>3917071</id><snippet>gtk.gdk.screen_get_default()</snippet></ROW><ROW><id>3917551</id><snippet>tarfile.getnames</snippet></ROW><ROW><id>3917604</id><snippet>from twisted.web import proxy
from twisted.internet import reactor
from twisted.internet import protocol
from twisted.internet.protocol import ReconnectingClientFactory 
from twisted.protocols import basic
from twisted.python import log
import sys
log.startLogging(sys.stdout)
</snippet></ROW><ROW><id>3917604</id><snippet>class MyProtocol(basic.LineReceiver):

    #def makeConnection(self, transport):
    #    print transport       

    def connectionLost(self, reason):
        print reason
        self.sendData = False

    def connectionMade(self):
        print "connection made"
        self.delimiter = "\n"
        self.sendData = True
        print self.transport
        self.sendFromQueue()

    def sendFromQueue(self):
        while self.sendData:
            msg = dataQueue.get()
            self.sendLine(msg)
            # you need to handle empty queue
            # Have another function to resume 
</snippet></ROW><ROW><id>3917604</id><snippet>class myProtocolFactory():
    protocol = MyProtocol

    def doStart(self):
        pass

    def startedConnecting(self, connectorInstance):
        print connectorInstance

    def buildProtocol(self, address):
        print address
        return self.protocol()

    def clientConnectionLost(self, connection, reason):
        print reason
        print connection

    def clientConnectionFailed(self, connection, reason):
        print connection
        print reason

    def doStop(self):
        pass
</snippet></ROW><ROW><id>3917604</id><snippet>reactor.connectTCP('localhost', 50000, myProtocolFactory())
reactor.run()
</snippet></ROW><ROW><id>3917604</id><snippet>1286906080.08   82     INFO 140735087148064 __main__ conn_made: client_address=127.0.0.1:50277
1286906080.08   83    DEBUG 140735087148064 __main__ created handler; waiting for loop
1286906080.08   83    DEBUG 140735087148064 __main__ handle_read
1286906080.08   83    DEBUG 140735087148064 __main__ after recv
'www\n'

Recieved: 4
</snippet></ROW><ROW><id>3917604</id><snippet>class myProtocolFactory(ReconnectingClientFactory):
    protocol = MyProtocol

    def buildProtocol(self, address):
        print address
        return self.protocol()
</snippet></ROW><ROW><id>3917632</id><snippet>...&gt;python -m timeit --setup="x = [None]*1000" "x[500]"
10000000 loops, best of 3: 0.0579 usec per loop

...&gt;python -m timeit --setup="x = [None]*1000" "x[0]"
10000000 loops, best of 3: 0.0566 usec per loop
</snippet></ROW><ROW><id>3917660</id><snippet>holder.ondrop = function(e) {
        e.preventDefault();

        var file = e.dataTransfer.files[0];
        var request = new XMLHttpRequest();

        request.open("POST",  upload_url, true); // open asynchronous post request
        request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        request.send(file);        
    };
</snippet></ROW><ROW><id>3917787</id><snippet>deferred</snippet></ROW><ROW><id>3917787</id><snippet>DeadlineExceeded</snippet></ROW><ROW><id>3917787</id><snippet>deferred</snippet></ROW><ROW><id>3917913</id><snippet>groupy</snippet></ROW><ROW><id>3917913</id><snippet>isa_group_separator(line)</snippet></ROW><ROW><id>3917913</id><snippet>line</snippet></ROW><ROW><id>3917913</id><snippet>isa_group_separator</snippet></ROW><ROW><id>3917913</id><snippet>key</snippet></ROW><ROW><id>3917913</id><snippet>itertools.groupby</snippet></ROW><ROW><id>3917913</id><snippet>import itertools

def isa_group_separator(line):
    return line=='\n'

with open('data_file') as f:
    for key,group in itertools.groupby(f,isa_group_separator):
        # print(key,list(group))  # uncomment to see what itertools.groupby does.
        if not key:
            data={}
            for item in group:
                field,value=item.split(':')
                value=value.strip()
                data[field]=value
            print('{FamilyN} {Name} {Age}'.format(**data))

# Y X 20
# F H 23
# Y S 13
# Z M 25
</snippet></ROW><ROW><id>3917963</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>3917963</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>3917963</id><snippet>x &lt;&lt; 1</snippet></ROW><ROW><id>3917963</id><snippet>x</snippet></ROW><ROW><id>3917963</id><snippet>x &lt;&lt; n</snippet></ROW><ROW><id>3917963</id><snippet>3         0000011 =  3
3 &lt;&lt; 1    0000110 =  6
3 &lt;&lt; 2    0001100 = 12
3 &lt;&lt; 3    0011000 = 24
</snippet></ROW><ROW><id>3917963</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>3917963</id><snippet>58        0111010 = 58
58 &gt;&gt; 1   0011101 = 29
58 &gt;&gt; 2   0001110 = 14
58 &gt;&gt; 3   0000111 = 7
58 &gt;&gt; 4   0000011 = 3
58 &gt;&gt; 5   0000001 = 1
58 &gt;&gt; 6   0000000 = 0
</snippet></ROW><ROW><id>3918111</id><snippet>dict([(x, 3) for x in [_id, _if, _while, _lbrace, _println]] + [(_variable, 2)])
</snippet></ROW><ROW><id>3918111</id><snippet>{ x : 2 if x == _variable else 3
  for x in [_id, _if, _while, _lbrace, _println, _variable] }
</snippet></ROW><ROW><id>3918201</id><snippet>MAXLEN = 15
def title_limit(title, limit):
    if len(title) &gt; limit:
        title = title[:limit-3] + "..."
    return title

blah = "blah blah blah blah blah"
title_limit(blah) # returns 'blah blah bla...'
</snippet></ROW><ROW><id>3918201</id><snippet>def find_rev(str,target,start):
    str = str[::-1]
    index = str.find(target,len(str) - start)
    if index != -1:
        index = len(str) - index
    return index

def title_limit(title, limit):
    if len(title) &lt;= limit: return title
    cut = find_rev(title, ' ', limit - 3 + 1)
    if cut != -1:
        title = title[:cut-1] + "..."
    else:
        title = title[:limit-3] + "..."
    return title

print title_limit('The many Adventures of Bob', 10) # The...
print title_limit('The many Adventures of Bob', 20) # The many...
print title_limit('The many Adventures of Bob', 30) # The many Adventures of Bob
</snippet></ROW><ROW><id>3918416</id><snippet>  class SubclassA(AbstractBase):
     def method(arg1, arg2, argIgnored):
        # Do stuff using arg1 and arg2
</snippet></ROW><ROW><id>3918416</id><snippet># in base class only this
def method(arg1, arg2, arg3=None)
</snippet></ROW><ROW><id>3918457</id><snippet>f = open('some_file_that_might_not_exist.txt', 'w')
f.write(data)
</snippet></ROW><ROW><id>3918457</id><snippet>IOError</snippet></ROW><ROW><id>3918734</id><snippet>total_cents = 100 * total;
base_amount = Floor(total_cents / num_people);
cents_short = total_cents - base_amount * num_people;
while (cents_short &gt; 0)
{
    // add one cent to a random person
    cents_short--;
}
</snippet></ROW><ROW><id>3918760</id><snippet>datestr=datetime.strptime( datetime[:-1], "%Y-%m-%dT%H:%M:%S" )

&gt;&gt;&gt; test = "2010-08-17T19:00:00Z"
&gt;&gt;&gt; test[:-1]
'2010-08-17T19:00:00'
</snippet></ROW><ROW><id>3918786</id><snippet>c.__class__.a</snippet></ROW><ROW><id>3918786</id><snippet>type(c).a</snippet></ROW><ROW><id>3918786</id><snippet>type()</snippet></ROW><ROW><id>3918786</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>3918786</id><snippet>__class__</snippet></ROW><ROW><id>3918786</id><snippet>type()</snippet></ROW><ROW><id>3918786</id><snippet>__class__</snippet></ROW><ROW><id>3918829</id><snippet>dict((k, v.split(',')) for k,v in (x.split(':') for x in s.split('::')))
</snippet></ROW><ROW><id>3919069</id><snippet>ipython --pylab</snippet></ROW><ROW><id>3919441</id><snippet>r+</snippet></ROW><ROW><id>3919441</id><snippet>file = open('path', 'r+')
config = file.read()
## all the code inbetween works fine
## config is .split()-ed, hence the list
if config == ['']:
    config = ''
file.seek(0)    # rewind the file
file.write(config)
file.close()
</snippet></ROW><ROW><id>3919443</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

def main():
    #-- Generate some data ----------------------------------------------------
    nx = 10
    x = np.linspace(0, 2*np.pi, 10)
    y = 2 * np.sin(x)

    groups = [('GroupA', (x[0], x[nx//3])),
              ('GroupB', (x[-2*nx//3], x[2*nx//3])),
              ('GroupC', (x[-nx//3], x[-1]))]

    #-- Plot the results ------------------------------------------------------
    fig = plt.figure()
    ax = fig.add_subplot(111)

    # Give ourselves a bit more room at the bottom
    plt.subplots_adjust(bottom=0.2)

    ax.plot(x,y, 'k^')

    # Drop the bottom spine by 40 pts
    ax.spines['bottom'].set_position(('outward', 40))

    # Make a second bottom spine in the position of the original bottom spine
    make_second_bottom_spine(label='Treatment')

    # Annotate the groups
    for name, xspan in groups:
        annotate_group(name, xspan)

    plt.xlabel('Dose')
    plt.ylabel('Response')
    plt.title('Experimental Data')

    plt.show()


def annotate_group(name, xspan, ax=None):
    """Annotates a span of the x-axis"""
    def annotate(ax, name, left, right, y, pad):
        arrow = ax.annotate(name,
                xy=(left, y), xycoords='data',
                xytext=(right, y-pad), textcoords='data',
                annotation_clip=False, verticalalignment='top',
                horizontalalignment='center', linespacing=2.0,
                arrowprops=dict(arrowstyle='-', shrinkA=0, shrinkB=0,
                        connectionstyle='angle,angleB=90,angleA=0,rad=5')
                )
        return arrow
    if ax is None:
        ax = plt.gca()
    ymin = ax.get_ylim()[0]
    ypad = 0.01 * np.ptp(ax.get_ylim())
    xcenter = np.mean(xspan)
    left_arrow = annotate(ax, name, xspan[0], xcenter, ymin, ypad)
    right_arrow = annotate(ax, name, xspan[1], xcenter, ymin, ypad)
    return left_arrow, right_arrow

def make_second_bottom_spine(ax=None, label=None, offset=0, labeloffset=20):
    """Makes a second bottom spine"""
    if ax is None:
        ax = plt.gca()
    second_bottom = mpl.spines.Spine(ax, 'bottom', ax.spines['bottom']._path)
    second_bottom.set_position(('outward', offset))
    ax.spines['second_bottom'] = second_bottom

    if label is not None:
        # Make a new xlabel
        ax.annotate(label, 
                xy=(0.5, 0), xycoords='axes fraction', 
                xytext=(0, -labeloffset), textcoords='offset points', 
                verticalalignment='top', horizontalalignment='center')

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3919756</id><snippet>from datetime import datetime, timedelta
time_start = datetime.now()
time_taken = datetime.now() - time_start
</snippet></ROW><ROW><id>3919756</id><snippet>ten_seconds = timedelta(seconds=10)
if time_taken &gt; ten_seconds:
    ....do something quick.
</snippet></ROW><ROW><id>3919756</id><snippet>nobranches=TreeNode.all().fetch(100)
</snippet></ROW><ROW><id>3920159</id><snippet>cmd</snippet></ROW><ROW><id>3920159</id><snippet>CMD</snippet></ROW><ROW><id>3920159</id><snippet>PATH</snippet></ROW><ROW><id>3920159</id><snippet>python.exe</snippet></ROW><ROW><id>3920159</id><snippet>set PATH=%PATH%;C:\path\to\python\install</snippet></ROW><ROW><id>3920159</id><snippet>C:\Python27</snippet></ROW><ROW><id>3920159</id><snippet>set PATH=%PATH%;C:\Python27</snippet></ROW><ROW><id>3920159</id><snippet>PATH</snippet></ROW><ROW><id>3920159</id><snippet>PATH</snippet></ROW><ROW><id>3920182</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>3920182</id><snippet>data == []</snippet></ROW><ROW><id>3920182</id><snippet>data == ''</snippet></ROW><ROW><id>3920182</id><snippet>except:</snippet></ROW><ROW><id>3920182</id><snippet>cgi</snippet></ROW><ROW><id>3920222</id><snippet>numpy.unique</snippet></ROW><ROW><id>3920222</id><snippet>numpy.bincount</snippet></ROW><ROW><id>3920222</id><snippet>import numpy as np
x = (np.random.random(100) * 5).astype(np.int)
unique_vals, indicies = np.unique(x, return_inverse=True)
counts = np.bincount(indicies)

print unique_vals, counts
</snippet></ROW><ROW><id>3920222</id><snippet>import numpy as np
numrows, numcols = 10,3
x = np.random.random((numrows, numcols)) &gt; 0.5
x = x.view(','.join(numcols * ['i1'])) # &lt;- View the rows as a 1D structured array...

unique_vals, indicies = np.unique(x, return_inverse=True)
counts = np.bincount(indicies)

print unique_vals, counts
</snippet></ROW><ROW><id>3920222</id><snippet>def unique_rows(data):
    unique = dict()
    for row in data:
        row = tuple(row)
        if row in unique:
            unique[row] += 1
        else:
            unique[row] = 1
    return unique
</snippet></ROW><ROW><id>3920222</id><snippet>from collections import defaultdict
def unique_rows(data):
    unique = defaultdict(int)
    for row in data:
        unique[tuple(row)] += 1
    return unique
</snippet></ROW><ROW><id>3920521</id><snippet>b_string = "1100101"
ib_string = ""

for bit in b_string:
  if bit == "1":
    ib_string += "0"
  else:
    ib_string += "1"

print ib_string
</snippet></ROW><ROW><id>3920521</id><snippet>string.translate</snippet></ROW><ROW><id>3920521</id><snippet>maketrans</snippet></ROW><ROW><id>3920633</id><snippet>@cost_time
def dbdump_all():
    "导出数据库所有数据至当前目录下以年月日命名的sql文件"
    filename=datetime.datetime.now().strftime("%Y-%m-%d")+".sql"
    cmd="""mysqldump -u root -pzhoubt --opt --quick --database search &gt;./%s"""%filename
    print cmd
    p=subprocess.Popen(cmd,shell=True,cwd=os.getcwd())
    sts = os.waitpid(p.pid, 0)[1]
    print "返回状态%s"%sts
    print "已将数据库表结构和数据导出到%s"%filename
</snippet></ROW><ROW><id>3920674</id><snippet>-tt</snippet></ROW><ROW><id>3920674</id><snippet>'list'</snippet></ROW><ROW><id>3920747</id><snippet>UserString</snippet></ROW><ROW><id>3920747</id><snippet>MutableString</snippet></ROW><ROW><id>3920747</id><snippet>print</snippet></ROW><ROW><id>3920747</id><snippet>str</snippet></ROW><ROW><id>3920747</id><snippet>UserString</snippet></ROW><ROW><id>3920747</id><snippet>bytearray</snippet></ROW><ROW><id>3920747</id><snippet>splitlines()</snippet></ROW><ROW><id>3920747</id><snippet>import sys
from contextlib import contextmanager

@contextmanager
def capturinglines(output=None):
    "Captures lines of output to a list."
    from cStringIO import StringIO

    try:
        output = [] if output is None else output
        stringio = StringIO()
        out, err = sys.stdout, sys.stderr
        sys.stdout, sys.stderr = stringio, stringio
        yield output
    finally:
        sys.stdout, sys.stderr = out, err
        output.extend(stringio.getvalue().splitlines())
        stringio.close()
</snippet></ROW><ROW><id>3920747</id><snippet>with capturinglines() as output:
    print "foo"
    print "bar"

print output
['foo', 'bar']

with capturinglines(output):   # append to existing list
    print "baz"

print output
['foo', 'bar', 'baz']
</snippet></ROW><ROW><id>3920857</id><snippet>Time</snippet></ROW><ROW><id>3920857</id><snippet>&gt;&gt;&gt; t1 = time.localtime()
&gt;&gt;&gt; t1
time.struct_time(tm_year=2010, tm_mon=10, tm_mday=13, tm_hour=10, tm_min=12, tm_sec=27, tm_wday=2, tm_yday=286, tm_isdst=0)
&gt;&gt;&gt; t2 = time.gmtime()
&gt;&gt;&gt; t2
time.struct_time(tm_year=2010, tm_mon=10, tm_mday=13, tm_hour=4, tm_min=42, tm_sec=37, tm_wday=2, tm_yday=286, tm_isdst=0)

&gt;&gt;&gt; (time.mktime(t1) - time.mktime(t2)) / 60
329.83333333333331
</snippet></ROW><ROW><id>3921078</id><snippet>type</snippet></ROW><ROW><id>3921078</id><snippet>for animal in animals:
   if (animal.type == "cat"): 
      animal_proxy = # make me a cat
</snippet></ROW><ROW><id>3921078</id><snippet>Dog.objects</snippet></ROW><ROW><id>3921078</id><snippet>Animal</snippet></ROW><ROW><id>3921078</id><snippet>type="dog"</snippet></ROW><ROW><id>3921078</id><snippet>Cat.objects</snippet></ROW><ROW><id>3921078</id><snippet>Animal</snippet></ROW><ROW><id>3921078</id><snippet>type="cat"</snippet></ROW><ROW><id>3921078</id><snippet>class TypeAwareManager(models.Manager):
    def __init__(self, type, *args, **kwargs):
        super(TypeAwareManager, self).__init__(*args, **kwargs)
        self.type = type

    def get_query_set(self):
        return super(TypeAwareManager, self).get_query_set().filter(
              type = self.type)

class Dog(Animal):
    objects = TypeAwareManager('dog')
    ...

class Cat(Animal):
    objects = TypeAwareManager('cat')
    ...
</snippet></ROW><ROW><id>3921078</id><snippet>itertools.chain</snippet></ROW><ROW><id>3921078</id><snippet>Querysets</snippet></ROW><ROW><id>3921078</id><snippet>from itertools import chain
q1 = Cat.objects.all() # [&lt;Cat: Daisy [cat]&gt;]

q2 = Dog.objects.all() # [&lt;Dog: Bruno [dog]&gt;]

for each in chain(q1, q2): 
    each.make_noise() 

# Meow Meow
# Woof Woof
</snippet></ROW><ROW><id>3921100</id><snippet>MySQLdb</snippet></ROW><ROW><id>3921100</id><snippet>cursor.execute("""SELECT * FROM LINKS WHERE link = %s LIMIT 1""",
    (item['link'].encode("utf-8"),)
)
</snippet></ROW><ROW><id>3921100</id><snippet>execute()</snippet></ROW><ROW><id>3921100</id><snippet>execute()</snippet></ROW><ROW><id>3921100</id><snippet>cursor.execute("""SELECT * FROM LINKS WHERE link = %(link)s LIMIT 1""",
    {'link': item['link'].encode("utf-8")}
)
</snippet></ROW><ROW><id>3921141</id><snippet>ValuesListQuerySet</snippet></ROW><ROW><id>3921141</id><snippet>QuerySet</snippet></ROW><ROW><id>3921476</id><snippet>with open(filename,"r") as infile:
    cursor.execute("insert into mytable (file_contents) values (%s)", (infile.read(), ))
</snippet></ROW><ROW><id>3921663</id><snippet>linalg.solve</snippet></ROW><ROW><id>3921663</id><snippet>numpy.linalg.lstsq</snippet></ROW><ROW><id>3921785</id><snippet>model</snippet></ROW><ROW><id>3921785</id><snippet>mymodelinstance</snippet></ROW><ROW><id>3921785</id><snippet>mymodelinstance.my_custom_method()</snippet></ROW><ROW><id>3921785</id><snippet>@classmethod</snippet></ROW><ROW><id>3921785</id><snippet>cls</snippet></ROW><ROW><id>3921785</id><snippet>self</snippet></ROW><ROW><id>3921785</id><snippet>objects.filter()</snippet></ROW><ROW><id>3921785</id><snippet>objects.get()</snippet></ROW><ROW><id>3921785</id><snippet>model.objects.my_custom_method()</snippet></ROW><ROW><id>3922357</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; s=u"Rückwärts"
&gt;&gt;&gt; s
u'R\xfcckw\xe4rts'
&gt;&gt;&gt; b=base64.b64encode(s.encode("utf-8"))
&gt;&gt;&gt; b
'UsO8Y2t3w6RydHM='
&gt;&gt;&gt; d=base64.b64decode(b)
&gt;&gt;&gt; d
'R\xc3\xbcckw\xc3\xa4rts'
&gt;&gt;&gt; d.decode("utf-8")
u'R\xfcckw\xe4rts'
&gt;&gt;&gt; print d.decode("utf-8")
Rückwärts
</snippet></ROW><ROW><id>3922675</id><snippet>oldest = min(datetimes)
</snippet></ROW><ROW><id>3922675</id><snippet>now = datetime.datetime.now(pytz.utc)
youngest = max(dt for dt in datetimes if dt &lt; now)
</snippet></ROW><ROW><id>3922760</id><snippet>from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app

# Pagina principal
class MainPage(webapp.RequestHandler):
    def get(self):
        if users.get_current_user():
            url = users.create_logout_url(self.request.uri)
            url_linktext = "Bem Vindo: "+ str(users.get_current_user()) + ".  Logout "
        else:
            url = users.create_login_url(self.request.uri)
            url_linktext = ' Entrar '
        values = {
                  'url': url,
                  'url_linktext': url_linktext,
                  }
        self.response.out.write(template.render('templates/index.html', values))

application = webapp.WSGIApplication([
                                      ('/', MainPage),                                      
                                      ],debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3922760</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;link href="styles/style.css" rel="stylesheet" type="text/css" /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="mainContainer"&gt;
      &lt;!--menu--&gt;
      &lt;div id="menu"&gt;
        &lt;ul id="menuUl"&gt;
          &lt;li class="selected"&gt;&lt;a href="/"&gt; Inicio &lt;/a&gt; &lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Sobre&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Else&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Contacto&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
      &lt;!--End menu--&gt;

    &lt;/div&gt;
     &lt;hr /&gt;
    &lt;!--End Navigation--&gt;
    &lt;div id="header" &gt;

{% block header %} {% endblock %}

    &lt;/div&gt;
    &lt;div id="contentContainer"&gt;
      &lt;!--content--&gt;
      &lt;div id="content"&gt;

{% block main %} {% endblock %}


      &lt;/div&gt;

      &lt;div id="contentBottom" &gt;
        &lt;div id="contentBottomLeft"&gt;&lt;/div&gt;
        &lt;div id="contentBottomRight"&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="footer"&gt;
      &lt;div id="footerMenu"&gt;
        &lt;ul&gt;
          &lt;li class="selected"&gt;&lt;a href="/"&gt; Inicio &lt;/a&gt; &lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Sobre&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Ipca&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#"&gt;Contacto&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
      &lt;p&gt;Copyright © 2010 Martin . Todos os direitos reservados.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;
</snippet></ROW><ROW><id>3922760</id><snippet>{% extends "base.html" %}

{% block header %}
    &lt;div class="hello"&gt;
       &lt;a href="{{ url }}"&gt;{{ url_linktext }}&lt;/a&gt;    
    &lt;/div&gt;

{% endblock %}

{% block main %}
        &lt;h1&gt;Um pouco de palha&lt;/h1&gt;
        &lt;p class="smallSubtitle"&gt;Isto e mais palha .......&lt;/p&gt;

{% endblock %}
</snippet></ROW><ROW><id>3923044</id><snippet>from Tkinter import *

master = Tk()
def vscale_cb(value):
    print('vertical: {v}'.format(v=value))
def hscale_cb(value):
    print('horizontal: {v}'.format(v=value))

w = Scale(master, from_=0, to=100, command=vscale_cb)
w.pack()

w = Scale(master, from_=0, to=200, orient=HORIZONTAL, command=hscale_cb)
w.pack()

mainloop()
</snippet></ROW><ROW><id>3923235</id><snippet>- property: __key__
  import_template: "%(first_name)s %(last_name)s"
</snippet></ROW><ROW><id>3923850</id><snippet>#include &lt;iostream&gt;
class Base {};
class Derived : public Base
{
    public:
        void f() const { std::cout &lt;&lt; "In Derived::f()" &lt;&lt; std::endl; }
};
class Container {
  public:
    const Base&amp; GetBase() const {
      return derived_;
    }
  private:
    Derived derived_;
};
</snippet></ROW><ROW><id>3923850</id><snippet>%module c

%{
#define SWIG_FILE_WITH_INIT
#include "c.h"
%}

%inline %{
  Derived* CastToDerived(Base* base) {
    return static_cast&lt;Derived*&gt;(base);
  }
%}
class Base
{
};

class Derived : public Base
{
    public:
        void f() const;
};

class Container {
  public:
    const Base&amp; GetBase() const;
};
</snippet></ROW><ROW><id>3923850</id><snippet>import c

container = c.Container()
b = container.GetBase()
d = c.CastToDerived(b)
d.f()
print "ok"
</snippet></ROW><ROW><id>3923850</id><snippet>$ swig -c++ -python c.i
$ g++ -fPIC -I/usr/include/python2.6 -c -g c_wrap.cxx
$ g++ -shared -o _c.so c_wrap.o
$ python ctest.py 
In Derived::f()
ok
</snippet></ROW><ROW><id>3924187</id><snippet>data_files</snippet></ROW><ROW><id>3924187</id><snippet>os.environ['PATH'] = '%s;%s' % (os.environ['PATH'], os.path.abspath('./driver/i386'))
os.environ['PATH'] = '%s;%s' % (os.environ['PATH'], os.path.abspath('./driver/amd64'))
</snippet></ROW><ROW><id>3924253</id><snippet>tf = tempfile.NamedTemporaryFile(delete=False)
</snippet></ROW><ROW><id>3924273</id><snippet>import mailbox
import sys
import email
import os
import errno
import mimetypes


mdir = mailbox.Maildir(sys.argv [1], email.message_from_file)


for mdir_msg in mdir:
    counter = 1
    msg = email.message_from_string(str(mdir_msg))
    for part in msg.walk():
        # multipart/* are just containers
        if part.get_content_maintype() == 'multipart':
            continue
        # Applications should really sanitize the given filename so that an
        # email message can't be used to overwrite important files
        filename = part.get_filename()
        if not filename:
            ext = mimetypes.guess_extension(part.get_content_type())
            if not ext:
                # Use a generic bag-of-bits extension
                ext = '.bin'
            filename = 'part-%03d%s' % (counter, ext)
        counter += 1
        fp = open(os.path.join('kupa', filename), 'wb')
        fp.write(part.get_payload(decode=True))
        fp.close()
        #photomodel imported from yourapp.models
        photo = PhotoModel()
        photo.name = os.path.join('kupa', filename)
        photo.email = ....
        photo.save()
</snippet></ROW><ROW><id>3924302</id><snippet>unicode</snippet></ROW><ROW><id>3924302</id><snippet>string</snippet></ROW><ROW><id>3924302</id><snippet>unicode</snippet></ROW><ROW><id>3924302</id><snippet>utf-8</snippet></ROW><ROW><id>3924302</id><snippet>encode</snippet></ROW><ROW><id>3924302</id><snippet>print row[0].encode('utf-8')
</snippet></ROW><ROW><id>3924302</id><snippet>2006-01-05
</snippet></ROW><ROW><id>3924302</id><snippet>for row in c:
    print tuple(x.encode('utf-8') for x in row)
</snippet></ROW><ROW><id>3924302</id><snippet>u</snippet></ROW><ROW><id>3924485</id><snippet>search_dic = {'id': '0c871320cf5111df87da000c29196d3d'}

id_list = ({'id': '0c871320cf5111df87da000c29196d3d'}, 
           {'id': '2eeeb9f4cf5111df87da000c29196d3d'}, 
           {'id': '3b982384cf5111df87da000c29196d3d'}, 
           {'id': '3f6f3fcecf5111df87da000c29196d3d'}, 
           {'id': '44762370cf5111df87da000c29196d3d'}, 
           {'id': '4ba0d294cf5111df87da000c29196d3d'})


if search_dic in id_list:
    print 'yes'
</snippet></ROW><ROW><id>3924601</id><snippet>&lt;div id="fb-root"&gt;&lt;/div&gt;
&lt;script&gt;
  window.fbAsyncInit = function() {
    FB.init({appId: 'your app id', status: true, cookie: true,
             xfbml: true});
  };
  (function() {
    var e = document.createElement('script'); e.async = true;
    e.src = document.location.protocol +
      '//connect.facebook.net/en_US/all.js';
    document.getElementById('fb-root').appendChild(e);
  }());
&lt;/script&gt;
</snippet></ROW><ROW><id>3924601</id><snippet>&lt;a href="#" onclick="javascript:FB.logout(function(response) {window.location.href = '/';})"&gt;Logout&lt;/a&gt;
</snippet></ROW><ROW><id>3924661</id><snippet>multiprocessing</snippet></ROW><ROW><id>3924661</id><snippet>threading</snippet></ROW><ROW><id>3924797</id><snippet>import formencode

class CommaSepList(formencode.validators.FancyValidator):

    def _to_python(self, value, state):
        return value.split(",")

    def validate_python(self, value, state):
        for elem in value:
            if elem == "": 
                raise formencode.Invalid("an element of the list is empty", value, state) 

&gt;&gt;&gt; CommaSepList.to_python("1,2,3")
['1', '2', '3']
&gt;&gt;&gt; CommaSepList.to_python("1,,")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.5/site-packages/FormEncode-1.2.3dev-py2.5.egg/formencode/api.py", line 416, in to_python
    vp(value, state)
  File "myValidator.py", line 17, in validate_python
    raise formencode.Invalid("an element of the list is empty", value, state)
</snippet></ROW><ROW><id>3924814</id><snippet>metadata.create_all()</snippet></ROW><ROW><id>3924814</id><snippet>sqlalchemy.ext.declarative</snippet></ROW><ROW><id>3924814</id><snippet>declarative_base()</snippet></ROW><ROW><id>3924814</id><snippet>metaclass</snippet></ROW><ROW><id>3924814</id><snippet>DeclarativeMeta</snippet></ROW><ROW><id>3924814</id><snippet>._creation_order</snippet></ROW><ROW><id>3924814</id><snippet>._creation_order</snippet></ROW><ROW><id>3925147</id><snippet>os.path.normpath</snippet></ROW><ROW><id>3925147</id><snippet>os.path.basename</snippet></ROW><ROW><id>3925147</id><snippet>&gt;&gt;&gt; os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))
'folderD'
</snippet></ROW><ROW><id>3925147</id><snippet>basename</snippet></ROW><ROW><id>3925147</id><snippet>''</snippet></ROW><ROW><id>3925311</id><snippet>traceback.print_stack()</snippet></ROW><ROW><id>3925311</id><snippet>&gt;&gt;&gt; def f():
...   def g():
...     traceback.print_stack()
...   g()
...
&gt;&gt;&gt; f()
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in f
  File "&lt;stdin&gt;", line 3, in g
</snippet></ROW><ROW><id>3925311</id><snippet>stack[5:]</snippet></ROW><ROW><id>3925311</id><snippet>'\n'.join(traceback.format_list(...))</snippet></ROW><ROW><id>3925492</id><snippet>[y for x in range(3) for y in [x, x]]
</snippet></ROW><ROW><id>3925612</id><snippet>.vim/plugin</snippet></ROW><ROW><id>3925612</id><snippet>pathogen.vim</snippet></ROW><ROW><id>3925612</id><snippet>.vim/bundle/autotag/plugin</snippet></ROW><ROW><id>3925680</id><snippet>str.splitlines()</snippet></ROW><ROW><id>3925680</id><snippet>\r\n</snippet></ROW><ROW><id>3926105</id><snippet>itertools</snippet></ROW><ROW><id>3926105</id><snippet>(x.foo for ...)</snippet></ROW><ROW><id>3926105</id><snippet>(... if x.bar &gt; 5)</snippet></ROW><ROW><id>3926105</id><snippet>((x_item, next(y_item for y_item in y if x_item.foo == y_item.bar)) for  x_item in x)</snippet></ROW><ROW><id>3926105</id><snippet>__dict__</snippet></ROW><ROW><id>3926105</id><snippet>class Anonymous(object):
    def __init__(self, **kwargs):
        self.__dict__ = kwargs
</snippet></ROW><ROW><id>3926105</id><snippet>(Anonymous(x=x, y=y) for ...)</snippet></ROW><ROW><id>3926105</id><snippet>x</snippet></ROW><ROW><id>3926105</id><snippet>y</snippet></ROW><ROW><id>3926105</id><snippet>from collections import defaultdict

def group_by(iterable, group_func):
    groups = defaultdict(list)
    for item in iterable:
        groups[group_func(item)].append(item)
    return groups
</snippet></ROW><ROW><id>3926105</id><snippet>&gt;&gt;&gt; from operator import attrgetter
&gt;&gt;&gt; group_by((x.foo for x in ...), attrgetter('bar'))
defaultdict(&lt;class 'list'&gt;, {some_value_of_bar: [x.foo of all x where x.bar == some_value_of_bar], some_other_value_of_bar: [...], ...})
</snippet></ROW><ROW><id>3926105</id><snippet>.values()</snippet></ROW><ROW><id>3926105</id><snippet>list</snippet></ROW><ROW><id>3926105</id><snippet>sorted</snippet></ROW><ROW><id>3926105</id><snippet>sorted(x % 2 for x in range(10))</snippet></ROW><ROW><id>3926105</id><snippet>sorted(x for x in xs, key=attrgetter('foo'))</snippet></ROW><ROW><id>3926105</id><snippet>reverse</snippet></ROW><ROW><id>3926105</id><snippet>(x * 2 for x in iterable)
</snippet></ROW><ROW><id>3926105</id><snippet>def doubles(iterable):
    for x in iterable:
        times2 = x * 2
        yield times2
</snippet></ROW><ROW><id>3926105</id><snippet>(c for s in ("aa","bb") for c in s )</snippet></ROW><ROW><id>3926105</id><snippet>parser</snippet></ROW><ROW><id>3926105</id><snippet>ast</snippet></ROW><ROW><id>3926144</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

q = urllib2.urlopen('http://stackoverflow.com/questions/3884419/')
soup = BeautifulSoup(q.read())

for link in soup.findAll('a'):
    if link.has_key('href'):
        print str(link.string) + " -&gt; " + link['href']
    elif link.has_key('id'):
        print "ID: " + link['id']
    else:
        print "???"
</snippet></ROW><ROW><id>3926144</id><snippet>Stack Exchange -&gt; http://stackexchange.com
log in -&gt; /users/login?returnurl=%2fquestions%2f3884419%2f
careers -&gt; http://careers.stackoverflow.com
meta -&gt; http://meta.stackoverflow.com
...
ID: flag-post-3884419
None -&gt; /posts/3884419/revisions
...
</snippet></ROW><ROW><id>3926695</id><snippet>mariah:~ joet3ch$ /usr/bin/python
Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from _ctypes import Union, Structure, Array
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3926695</id><snippet>mariah:~ joet3ch$ /usr/bin/python
Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path
['', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python26.zip', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-darwin', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/plat-mac/lib-scriptpackages', '/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-tk', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-old', '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/lib-dynload', '/Library/Python/2.6/site-packages', '/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/PyObjC', '/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/wx-2.8-mac-unicode']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3926717</id><snippet>import win32gui
win32gui.SetWindowPos(hWnd, win32con.HWND_TOPMOST, 0,0,0,0,
win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)
</snippet></ROW><ROW><id>3926717</id><snippet>root = Tk()
root.wm_attributes("-topmost", 1)
</snippet></ROW><ROW><id>3927052</id><snippet>#!/bin/bash


echo "Here's a bit of bash-iness."

MYSCRIPT='
puts "Here I am, inside Tcl."
puts "See?  I can do calculations:  [expr 3 + 5]."
exit 0
'

tclsh &lt;&lt; HERE
$MYSCRIPT
HERE
</snippet></ROW><ROW><id>3927052</id><snippet>Here's a bit of bash-iness.
Here I am, inside Tcl.
See?  I can do calculations:  8.
</snippet></ROW><ROW><id>3927052</id><snippet>    ...
vmd -dispdev text -eofexit &lt;&lt; HERE &gt; output.log
$MYSCRIPT
HERE
</snippet></ROW><ROW><id>3927410</id><snippet>def __init__(self, time):
    #run subprocess to chek_espired elements
</snippet></ROW><ROW><id>3927410</id><snippet>class MyList(list):
    def __init__(self,elems,  expires_time):
        list.__init__(self, elems)
        self.created = time.time()
        self.expires_time = expires_time
    def __getitem__(self, index):
        t = time.time()
        print t -  self.created
        if t - self.created &gt; self.expires_time:
            self.created += self.expires_time
            self.pop(index)
            self.__getitem__(index)
        return list.__getitem__(self, index)
</snippet></ROW><ROW><id>3927493</id><snippet>import ctypes
from ctypes.wintypes import MAX_PATH

dll = ctypes.windll.shell32
buf = ctypes.create_unicode_buffer(MAX_PATH + 1)
if dll.SHGetSpecialFolderPathW(None, buf, 0x0005, False):
    print(buf.value)
else:
    print("Failure!")
</snippet></ROW><ROW><id>3927518</id><snippet>import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter

x = range(10)
plt.plot(x)

plt.gca().xaxis.set_major_formatter(FormatStrFormatter('%d km'))

plt.show()
</snippet></ROW><ROW><id>3927608</id><snippet>[lx for li in fieldlist for lx in li[1] if li[1]]
</snippet></ROW><ROW><id>3927671</id><snippet>File: pystone.py
Function: Proc2 at line 149
Total time: 0.606656 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   149                                           @profile
   150                                           def Proc2(IntParIO):
   151     50000        82003      1.6     13.5      IntLoc = IntParIO + 10
   152     50000        63162      1.3     10.4      while 1:
   153     50000        69065      1.4     11.4          if Char1Glob == 'A':
   154     50000        66354      1.3     10.9              IntLoc = IntLoc - 1
   155     50000        67263      1.3     11.1              IntParIO = IntLoc - IntGlob
   156     50000        65494      1.3     10.8              EnumLoc = Ident1
   157     50000        68001      1.4     11.2          if EnumLoc == Ident1:
   158     50000        63739      1.3     10.5              break
   159     50000        61575      1.2     10.1      return IntParIO
</snippet></ROW><ROW><id>3927691</id><snippet>import urllib, urllib2
url = 'http://db.systemsbiology.net/gestalt/cgi-pub/Kaviar.pl'
form_data = {'chr':'chr1', 'pos':'46743'} # the form takes 2 parameters: 'chr', and 'pos'
                                          # the values given in the dict are
                                          # just examples.
# the next line POSTs the form to url, and reads the resulting response (HTML
# in this case) into the variable response
response = urllib2.urlopen(url,urllib.urlencode(form_data)).read()
# now you can happily parse response.
</snippet></ROW><ROW><id>3927710</id><snippet>result = [x.decode('utf8') for x in proc.stdout.readlines()]
</snippet></ROW><ROW><id>3927710</id><snippet>x</snippet></ROW><ROW><id>3927710</id><snippet>decode()</snippet></ROW><ROW><id>3927710</id><snippet>x.decode('utf8')</snippet></ROW><ROW><id>3927710</id><snippet>unicode</snippet></ROW><ROW><id>3927804</id><snippet>#!/usr/bin/env python

import itertools
import re

# This algorithm only works if DATA is sorted.
DATA = ["image_0001", "image_0002", "image_0003",
        "image_0010", "image_0011",
        "image_0011-1", "image_0011-2", "image_0011-3",
        "image_0100", "image_9999"]

def extract_number(name):
    # Match the last number in the name and return it as a string,
    # including leading zeroes (that's important for formatting below).
    return re.findall(r"\d+$", name)[0]

def collapse_group(group):
    if len(group) == 1:
        return group[0][1]  # Unique names collapse to themselves.
    first = extract_number(group[0][1])  # Fetch range
    last = extract_number(group[-1][1])  # of this group.
    # Cheap way to compute the string length of the upper bound,
    # discarding leading zeroes.
    length = len(str(int(last)))
    # Now we have the length of the variable part of the names,
    # the rest is only formatting.
    return "%s[%s-%s]" % (group[0][1][:-length],
        first[-length:], last[-length:])

groups = [collapse_group(tuple(group)) \
    for key, group in itertools.groupby(enumerate(DATA),
        lambda(index, name): index - int(extract_number(name)))]

print groups
</snippet></ROW><ROW><id>3927804</id><snippet>['image_000[1-3]', 'image_00[10-11]', 'image_0011-[1-3]', 'image_0100', 'image_9999']</snippet></ROW><ROW><id>3927804</id><snippet>import glob
images = glob.glob("image_[0-9]*")
</snippet></ROW><ROW><id>3927804</id><snippet>images = [glob.glob(pattern) for pattern in ("image_000[1-3]*",
    "image_00[10-11]*", "image_0011-[1-3]*", "image_9999*")]
images = [image for seq in images for image in seq]  # flatten the list
</snippet></ROW><ROW><id>3927989</id><snippet>get_db_prep_value</snippet></ROW><ROW><id>3927989</id><snippet>to_python</snippet></ROW><ROW><id>3927989</id><snippet>StringIO</snippet></ROW><ROW><id>3927989</id><snippet>the_instance = StringIO.StringIO(value)</snippet></ROW><ROW><id>3927989</id><snippet>import StringIO</snippet></ROW><ROW><id>3928583</id><snippet>&gt;&gt;&gt; t = ('string 1', 1234.55555, 5.66666, 'string2')
&gt;&gt;&gt; t2 = (t[0], round(t[1], 2), round(t[2], 2), t[3])
&gt;&gt;&gt; t2
('string 1', 1234.56, 5.67, 'string2')
</snippet></ROW><ROW><id>3928583</id><snippet>&gt;&gt;&gt; t2 = tuple(map(lambda x: isinstance(x, float) and round(x, 2) or x, t))
&gt;&gt;&gt; t2
('string 1', 1234.56, 5.67, 'string2')
</snippet></ROW><ROW><id>3928677</id><snippet>
def wrapper(func_, *args, **kw):
    new_args = []
    new_kw = {}
    for arg in args:
        if type(arg)==functools.partial:
            arg = arg()
        new_args.append(arg)
    for key in kw:
        value = kw[key]
        if type(value)==functools.partial:
            value = value()
        new_kw[key]=value
     return func_(*new_args, **new_kw)

orig_str = 'object1.method1(arg1, arg2, 4, key=value)'
argstr = re.search('.+\((.+)\)', orig_str).group(1)
args = []
kw = {}
for x in argstr.split(','):
    if '=' in x:
        key, value = x.strip().split('=')
    else:
        value = x.strip()
        key = None            
    value = functools.partial(eval, value)
    if key:
        kw[key]=value
    else:
        args.append(value)

what_you_want = functools.partial(wrapper, func, *args, **kw)
</snippet></ROW><ROW><id>3928934</id><snippet>[ABC]</snippet></ROW><ROW><id>3929020</id><snippet>import time
time.strptime("01/01/09 12:23", "%d/%m/%y %H:%M")
</snippet></ROW><ROW><id>3929020</id><snippet>time.strptime("01/01/09 12:234", "%d/%m/%y %H:%M")
time.strptime("01-01-09 12:23", "%d/%m/%y %H:%M")
</snippet></ROW><ROW><id>3929057</id><snippet> for current, last in zip(entries[1:], entries):
     diff = current - last
</snippet></ROW><ROW><id>3929057</id><snippet>import itertools as it

items = it.izip(it.islice(entries, 1, None), entries)
for current, last in items:
    diff = current - last
</snippet></ROW><ROW><id>3929057</id><snippet>entry_iter = iter(entries)
entry_iter.next() # Throw away the first version
for i, entry in enumerate(entry_iter):
    diff = entry - entries[i]
</snippet></ROW><ROW><id>3929057</id><snippet>for i in xrange(len(entries) - 1):
    diff = entries[i+1] - entries[i]
</snippet></ROW><ROW><id>3929057</id><snippet>entries</snippet></ROW><ROW><id>3929057</id><snippet>enumerate</snippet></ROW><ROW><id>3929057</id><snippet>diffs = (current - last for current, last in 
         it.izip(it.islice(entries, 1, None), entries))
</snippet></ROW><ROW><id>3929244</id><snippet>&gt;&gt;&gt; abc = {}
&gt;&gt;&gt; abc[1] = 2
&gt;&gt;&gt; abc
{1: 2}
&gt;&gt;&gt; abc = {1:2, 3:4}
&gt;&gt;&gt; abc
{1: 2, 3: 4}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3929244</id><snippet>abc[int: anotherint]
</snippet></ROW><ROW><id>3929244</id><snippet>abc = [int: anotherint]
</snippet></ROW><ROW><id>3929244</id><snippet>abc = {int: anotherint}
</snippet></ROW><ROW><id>3929285</id><snippet>|</snippet></ROW><ROW><id>3929285</id><snippet>|=</snippet></ROW><ROW><id>3929285</id><snippet>|</snippet></ROW><ROW><id>3929285</id><snippet>+=</snippet></ROW><ROW><id>3929285</id><snippet>+</snippet></ROW><ROW><id>3929308</id><snippet>ps aux</snippet></ROW><ROW><id>3929308</id><snippet>import os
import stat
import pwd
import collections
import operator

os.chdir('/proc')
dirnames=(dirname for dirname in os.listdir('.') if dirname.isdigit())
statinfos=(os.stat(dirname) for dirname in dirnames)
uids=(statinfo[stat.ST_UID] for statinfo in statinfos)
names=(pwd.getpwuid(uid).pw_name for uid in uids)
counter=collections.defaultdict(int)
for name in names:
    counter[name]+=1
count=counter.items()
count.sort(key=operator.itemgetter(1),reverse=True)
print('\n'.join(map(str,count[:10])))
</snippet></ROW><ROW><id>3929308</id><snippet>('root', 130)
('unutbu', 55)
('www-data', 7)
('avahi', 2)
('haldaemon', 2)
('daemon', 1)
('messagebus', 1)
('syslog', 1)
('Debian-exim', 1)
('mysql', 1)
</snippet></ROW><ROW><id>3929323</id><snippet>from pack1.mod2</snippet></ROW><ROW><id>3929323</id><snippet>from lib.pack1.mod2</snippet></ROW><ROW><id>3929323</id><snippet>p</snippet></ROW><ROW><id>3929323</id><snippet>lib/p</snippet></ROW><ROW><id>3929323</id><snippet>lib.p</snippet></ROW><ROW><id>3929323</id><snippet>lib</snippet></ROW><ROW><id>3929323</id><snippet>__init__.py</snippet></ROW><ROW><id>3929323</id><snippet>lib</snippet></ROW><ROW><id>3929323</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3929323</id><snippet>sys.path</snippet></ROW><ROW><id>3929323</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>3929323</id><snippet>sys.metapath</snippet></ROW><ROW><id>3929323</id><snippet>lib</snippet></ROW><ROW><id>3929337</id><snippet>def my_decorator(f):
     def wrapper(*args, **kwargs):
         return f(*args, **kwargs)
     wrapper.decorators = [wrapper]
     if hasattr(f, 'decorators'):
         wrapper.decorators.extend[f.decorators]
     return wrapper
</snippet></ROW><ROW><id>3929337</id><snippet>def my_decorator(f):
       def wrapper(args):
           return f(args)
      wrapper.decorated = f
      return wrapper
</snippet></ROW><ROW><id>3929337</id><snippet>@my_other_decorator # another decorator following the same pattern
@my_decorator
def foo(args):
    print args

foo.decorated(args) # calls the function with the inner decorated function (my_decorator)
foo.decorated.decorated(args) # original function
</snippet></ROW><ROW><id>3929337</id><snippet>def reversable(decorator):
    def wrapper(func):
        ret = decorator(func) # manually apply the decorator
        ret.decorated = func # save the original function
        return ret
    return wrapper
</snippet></ROW><ROW><id>3929337</id><snippet>@reversable
def my_decorator(f):
    def wrapper(x):
        return f(x + 1)
    return wrapper
</snippet></ROW><ROW><id>3929374</id><snippet>export</snippet></ROW><ROW><id>3929374</id><snippet>bash</snippet></ROW><ROW><id>3929374</id><snippet>sh</snippet></ROW><ROW><id>3929374</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>3929374</id><snippet>export</snippet></ROW><ROW><id>3929374</id><snippet>Popen</snippet></ROW><ROW><id>3929374</id><snippet>os.execvp()</snippet></ROW><ROW><id>3929374</id><snippet>Popen</snippet></ROW><ROW><id>3929374</id><snippet>shell=True</snippet></ROW><ROW><id>3929374</id><snippet>class subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</snippet></ROW><ROW><id>3929374</id><snippet>Popen(['/bin/sh', '-c', args[0], args[1], ...])</snippet></ROW><ROW><id>3929378</id><snippet>json.dumps({ 'compressedData' : base64.b64encode(zString) })
</snippet></ROW><ROW><id>3929441</id><snippet>dict</snippet></ROW><ROW><id>3929441</id><snippet>setdefault()</snippet></ROW><ROW><id>3929441</id><snippet>request.session</snippet></ROW><ROW><id>3929441</id><snippet>dict</snippet></ROW><ROW><id>3929441</id><snippet>request.session.setdefault('thing_for_purpose', 5)
</snippet></ROW><ROW><id>3929473</id><snippet>stdout</snippet></ROW><ROW><id>3929473</id><snippet>PIPE</snippet></ROW><ROW><id>3929473</id><snippet>p= subprocess.Popen(['mplayer', url], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout:
    if line.startswith('ICY Info:'):
        info = line.split(':', 1)[1].strip()
        attrs = dict(re.findall("(\w+)='([^']*)'", info))
        print 'Stream title: '+attrs.get('StreamTitle', '(none)')
</snippet></ROW><ROW><id>3929609</id><snippet>u'\u2019'</snippet></ROW><ROW><id>3929609</id><snippet>â€™</snippet></ROW><ROW><id>3929609</id><snippet>’</snippet></ROW><ROW><id>3929609</id><snippet>’</snippet></ROW><ROW><id>3929609</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>3929609</id><snippet>ignore</snippet></ROW><ROW><id>3929609</id><snippet>replace</snippet></ROW><ROW><id>3929609</id><snippet>dmessage= contact.message.encode('cp1252', 'ignore')
</snippet></ROW><ROW><id>3929609</id><snippet>dmessage= contact.message.encode('ascii', 'ignore')
</snippet></ROW><ROW><id>3929648</id><snippet>__this_class__</snippet></ROW><ROW><id>3929648</id><snippet>__this_func__</snippet></ROW><ROW><id>3929648</id><snippet>class SomeObject:
    def __init__(self, values):
        self.values = values
    ...

SomeObject.columns = [
    (lambda x: x['type'], 'Type'),
    (lambda x: 'http://localhost/view?id=%s' % x['id'], 'Link'),
    (SomeObject.helper_function, 'Data'),
]
</snippet></ROW><ROW><id>3929887</id><snippet>def tryway():
    alist = range(1000)
    try:
        while True:
            alist.pop()
    except IndexError:
        pass

def ifway():
    alist = range(1000)
    while True:
        if alist == []:
            break
        else:
            alist.pop()
if __name__=='__main__':
    from timeit import Timer
    print "Testing Try"
    tr = Timer("tryway()","from __main__ import tryway")
    print tr.timeit(10000)
    print "Testing If"
    ir = Timer("ifway()","from __main__ import ifway")
    print ir.timeit(10000)

&gt;&gt;&gt; Testing Try
&gt;&gt;&gt; 2.09539294243
&gt;&gt;&gt; Testing If
&gt;&gt;&gt; 2.84440898895
</snippet></ROW><ROW><id>3930374</id><snippet>None</snippet></ROW><ROW><id>3930374</id><snippet>None</snippet></ROW><ROW><id>3930819</id><snippet>django/forms/forms.py</snippet></ROW><ROW><id>3930819</id><snippet>class BaseForm</snippet></ROW><ROW><id>3930819</id><snippet>class Form</snippet></ROW><ROW><id>3930819</id><snippet>class DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>3930819</id><snippet>def get_declared_fields</snippet></ROW><ROW><id>3930819</id><snippet>get_declared_fields</snippet></ROW><ROW><id>3930819</id><snippet>DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>3930819</id><snippet>OrderedDict</snippet></ROW><ROW><id>3930819</id><snippet>DeclarativeFieldsMetaclass</snippet></ROW><ROW><id>3930819</id><snippet>base_fields</snippet></ROW><ROW><id>3930819</id><snippet>type</snippet></ROW><ROW><id>3930819</id><snippet>media_property</snippet></ROW><ROW><id>3930819</id><snippet>widgets.py</snippet></ROW><ROW><id>3930819</id><snippet>media</snippet></ROW><ROW><id>3930819</id><snippet>media_property</snippet></ROW><ROW><id>3930819</id><snippet>Media</snippet></ROW><ROW><id>3930819</id><snippet>Media</snippet></ROW><ROW><id>3930819</id><snippet>base_fields</snippet></ROW><ROW><id>3930819</id><snippet>ContactForm.another_field = forms.CharField(...)
ContactForm.base_fields['another_field'] = ContactForm.another_field
</snippet></ROW><ROW><id>3930819</id><snippet>deepcopy</snippet></ROW><ROW><id>3930819</id><snippet>base_fields</snippet></ROW><ROW><id>3930819</id><snippet>form_instance.fields</snippet></ROW><ROW><id>3930819</id><snippet>__init__</snippet></ROW><ROW><id>3930819</id><snippet>BaseForm</snippet></ROW><ROW><id>3930913</id><snippet>z = {'data':{'id':1,'title':'home','address':{'street':'some road','city':'anycity','postal':'somepostal'}}}

def printItems(dictObj, indent):
    print '  '*indent + '&lt;ul&gt;\n'
    for k,v in dictObj.iteritems():
        if isinstance(v, dict):
            print '  '*indent , '&lt;li&gt;', k, ':', '&lt;/li&gt;'
            printItems(v, indent+1)
        else:
            print ' '*indent , '&lt;li&gt;', k, ':', v, '&lt;/li&gt;'
    print '  '*indent + '&lt;/ul&gt;\n'

printItems(z,0)
</snippet></ROW><ROW><id>3930913</id><snippet>import pprint
z = {'data':{'id':1,'title':'home','address':{'street':'some road','city':'anycity','postal':'somepostal'}}}

print '&lt;pre&gt;', pprint.pformat(z), '&lt;/pre&gt;'
</snippet></ROW><ROW><id>3930913</id><snippet>{'data': {'address': {'city': 'anycity',
                      'postal': 'somepostal',
                      'street': 'some road'},
          'id': 1,
          'title': 'home'}}
</snippet></ROW><ROW><id>3931205</id><snippet>class Settings(object):
    var1 = None
    var2 = None
    var3 = None

    def configure_superduper(self, superduper):
        superduper.var1 = self.var1
        # etc

class FromString(Settings):
    def __init__(self, string):
        #parse strings and set var1, etc.

class SuperDuper(object):
    def __init__(self, settings): # dependency injection  
        settings.configure_superduper(self)  # inversion of control
        # other initialization stuff

sup = SuperDuper(object, FromString(some_string))
</snippet></ROW><ROW><id>3931505</id><snippet>self</snippet></ROW><ROW><id>3931505</id><snippet>__init__()</snippet></ROW><ROW><id>3931505</id><snippet>class C(object):
  def __init__(self, val):
    self.val = val
</snippet></ROW><ROW><id>3931903</id><snippet>def trace(*args):
    def _trace(func):
        def wrapper(*args, **kwargs):
            print enter_string
            func(*args, **kwargs)
            print exit_string
        return wrapper
    if len(args) == 1 and callable(args[0]):
        # No arguments, this is the decorator
        # Set default values for the arguments
        enter_string = 'entering'
        exit_string = 'exiting'
        return _trace(args[0])
    else:
        # This is just returning the decorator
        enter_string, exit_string = args
        return _trace
</snippet></ROW><ROW><id>3931978</id><snippet>a</snippet></ROW><ROW><id>3931978</id><snippet>b</snippet></ROW><ROW><id>3931978</id><snippet>msg</snippet></ROW><ROW><id>3931978</id><snippet>'bb'</snippet></ROW><ROW><id>3932055</id><snippet>connection.autocommit()</snippet></ROW><ROW><id>3932212</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.product('ab', repeat=3))
[('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'b', 'a'), ('a', 'b', 'b'), ('b', 'a', 'a'), ('b', 'a', 'b'), ('b', 'b', 'a'), ('b', 'b', 'b')]
</snippet></ROW><ROW><id>3932745</id><snippet>scala&gt; import collection.IterableLike
import collection.IterableLike

scala&gt; implicit def pythonicSlice[A, Repr](coll: IterableLike[A, Repr]) = new {
     |   def apply(subrange: (Int, Int)): Repr = coll.slice(subrange._1, subrange._2)
     | }
pythonicSlice: [A,Repr](coll: scala.collection.IterableLike[A,Repr])java.lang.Object{def apply(subrange: (Int, Int)): Repr}

scala&gt; val list = List(3, 4, 11, 78, 3, 9)
list: List[Int] = List(3, 4, 11, 78, 3, 9)

scala&gt; list(2 -&gt; 5)
res4: List[Int] = List(11, 78, 3)
</snippet></ROW><ROW><id>3932745</id><snippet>scala&gt; case class PRange(start: Int, end: Int, step: Int = 1)
defined class PRange

scala&gt; implicit def intWithTildyArrow(i: Int) = new {
     |   def ~&gt;(j: Int) = PRange(i, j)
     | }
intWithTildyArrow: (i: Int)java.lang.Object{def ~&gt;(j: Int): PRange}

scala&gt; implicit def prangeWithTildyArrow(p: PRange) = new {
     |   def ~&gt;(step: Int) = p.copy(step = step)
     | }
prangeWithTildyArrow: (p: PRange)java.lang.Object{def ~&gt;(step: Int): PRange}

scala&gt; implicit def pSlice[A](coll: List[A]) = new {
     |   def apply(prange: PRange) = {
     |     import prange._
     |     coll.slice(start, end).grouped(step).toList.map(_.head)
     |   }
     | }
pSlice: [A](coll: List[A])java.lang.Object{def apply(prange: PRange): List[A]}

scala&gt; val xs = List.range(1, 10)
xs: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9)

scala&gt; xs(3 ~&gt; 9)
res32: List[Int] = List(4, 5, 6, 7, 8, 9)

scala&gt; xs(3 ~&gt; 9 ~&gt; 2)
res33: List[Int] = List(4, 6, 8)
</snippet></ROW><ROW><id>3932808</id><snippet>rects = ax.bar(ind, num, width, color=colors)

rect = rects[-1]
height = int(rect.get_height())

if height &lt; 5:
    yloc = height + 2
else:
    yloc = height / 2.0

clr = '#182866'
p = 'H37Rv'
xloc = rect.get_x() + (rect.get_width() / 2.0)
ax.text(xloc, yloc, p, horizontalalignment='center', verticalalignment='center', color=clr, weight='bold')
</snippet></ROW><ROW><id>3932808</id><snippet>rects = ax.bar(ind, num, width, color=colors)

for i in range(len(colors):
    if colors[i] == purple: # or however you specified "purple" in your colors list
       labelled_rects.append(i)

for i in labelled_rects:
    rect = rects[i]
    height = int(rect.get_height())

    if height &lt; 5:
        yloc = height + 2
    else:
        yloc = height / 2.0

    clr = '#182866'
    p = 'H37Rv'
    xloc = rect.get_x() + (rect.get_width() / 2.0)
    ax.text(xloc, yloc, p, horizontalalignment='center', verticalalignment='center', color=clr, weight='bold')
</snippet></ROW><ROW><id>3932820</id><snippet>re.sub(r'((?&lt;=&gt;\n)\t{2,}(?=&lt;))', lambda m: (len(m.group(0))-1)*2*" ", string)
</snippet></ROW><ROW><id>3932820</id><snippet>lambda m: (len(m.group(0))-1)*2*" "</snippet></ROW><ROW><id>3933056</id><snippet>def add_file(request, article_id):            
    if request.method == 'POST':  
        form = FileForm(request.POST, request.FILES)  
        if form.is_valid():  
            file = form.save(commit=False)  
            article = Article.objects.get(id=article_id)  
            file.article = article  
            file.save()  
            file.title = article.name + ' ' + file.id  
            file.save()  
            redirect_to = 'redirect to url'  
            return HttpResponseRedirect(redirect_to)      
</snippet></ROW><ROW><id>3933062</id><snippet>__get__</snippet></ROW><ROW><id>3933062</id><snippet>__get__</snippet></ROW><ROW><id>3933062</id><snippet>&gt;&gt;&gt; Foo.aTuple[0].__get__(None, Foo)()
'aStaticMethod'
</snippet></ROW><ROW><id>3933062</id><snippet>None</snippet></ROW><ROW><id>3933062</id><snippet>instance</snippet></ROW><ROW><id>3933062</id><snippet>Foo</snippet></ROW><ROW><id>3933062</id><snippet>owner</snippet></ROW><ROW><id>3933062</id><snippet>&gt;&gt;&gt; Foo.aTuple[0].__get__(None, Foo)
&lt;function aStaticMethod at 0xb776daac&gt;
</snippet></ROW><ROW><id>3933094</id><snippet>def func(x=None):
    x = x or []
    x.append('hello')

mylist = []
func(mylist)
print mylist[0] # doesn't work
</snippet></ROW><ROW><id>3933094</id><snippet>None</snippet></ROW><ROW><id>3933094</id><snippet>[]</snippet></ROW><ROW><id>3933094</id><snippet>()</snippet></ROW><ROW><id>3933094</id><snippet>{}</snippet></ROW><ROW><id>3933094</id><snippet>0</snippet></ROW><ROW><id>3933094</id><snippet>False</snippet></ROW><ROW><id>3933094</id><snippet>is None</snippet></ROW><ROW><id>3933094</id><snippet>== None</snippet></ROW><ROW><id>3933210</id><snippet>x = y = z = 0
</snippet></ROW><ROW><id>3933251</id><snippet>list(fh)</snippet></ROW><ROW><id>3933251</id><snippet>set(fh)</snippet></ROW><ROW><id>3933251</id><snippet>tuple(fh)</snippet></ROW><ROW><id>3933279</id><snippet>&lt;div id='login'&gt;&lt;a href="#" id='facebook-login' onclick='fblogin();'&gt;&lt;img src="your image url here" /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/a&gt;
&lt;script&gt;
    function fblogin(){
        FB.login(function(response) {
            if (response.session) {
                if (response.perms) {
                    // user is logged in and granted some permissions.
                    // perms is a comma separated list of granted permissions
                    window.location.reload();
                } else {
                    // user is logged in, but did not grant any permissions
                    window.location.reload();
                }
            } else {
                // user is not logged in
                window.location.reload();
            }
        }, {perms:'email'});
        return false;
    }
&lt;/script&gt;
</snippet></ROW><ROW><id>3933302</id><snippet>import libxml2

txt = '\n&lt;Data&gt;\n  &lt;R&gt;&lt;F&gt;Key&lt;/F&gt;&lt;F&gt;Val&lt;/F&gt;&lt;F&gt;Flag&lt;/F&gt;&lt;/R&gt;\n  &lt;R&gt;&lt;F&gt;01&lt;/F&gt;&lt;F&gt;AAA&lt;/F&gt;&lt;F&gt;Y&lt;/F&gt;&lt;/R&gt;\n  &lt;R&gt;&lt;F&gt;02&lt;/F&gt;&lt;F&gt;BBB&lt;/F&gt;&lt;F&gt;N&lt;/F&gt;&lt;/R&gt;\n&lt;/Data&gt;\n'

rows = []
for elem in libxml2.parseDoc(txt):
    if elem.name == 'R':
        curRow = []
        rows.append(curRow)
    elif elem.name == 'F':
        curRow.append(elem.get_content())
</snippet></ROW><ROW><id>3933302</id><snippet>rows = [['Key', 'Val', 'Flag'], ['01', 'AAA', 'Y'], ['02', 'BBB', 'N']] 
</snippet></ROW><ROW><id>3933534</id><snippet>result[0][u'from_user']
</snippet></ROW><ROW><id>3933534</id><snippet>u</snippet></ROW><ROW><id>3933534</id><snippet>unicode</snippet></ROW><ROW><id>3933534</id><snippet>str</snippet></ROW><ROW><id>3933818</id><snippet>import Tkinter as tk

class App:
    def __init__(self):
        self.root = tk.Tk()
        # this will be the container for a row of buttons
        # a background color has been added just to make
        # it stand out.
        container = tk.Frame(self.root, background="#ffd3d3")

        # these are the buttons. If you want, you can make these
        # children of the container and avoid the use of "in_" 
        # in the pack command, but I find it easier to maintain
        # code by keeping my widget hierarchy shallow.
        b1 = tk.Button(text="Button 1")
        b2 = tk.Button(text="Button 2")
        b3 = tk.Button(text="Button 3")

        # pack the buttons in the container. Since the buttons
        # are children of the root we need to use the in_ parameter.
        b1.pack(in_=container, side="left")
        b2.pack(in_=container, side="left")
        b3.pack(in_=container, side="left")

        # finally, pack the container in the root window
        container.pack(side="top", fill="x")

        self.root.mainloop()

if __name__ == "__main__":
    app=App()
</snippet></ROW><ROW><id>3934305</id><snippet>re</snippet></ROW><ROW><id>3934305</id><snippet># -*- coding: utf-8 -*-

# imaginary csv file. pretend that we do not know the column order.
Header = [u'col1', u'col2']
Line1 = [u'A',u'X']
Line2 = [u'B',u'Y']
fileLines = [Line1,Line2]

# dicts to translate lines
D1a = {u'A':u'a'}
D1b = {u'B':u'b'}
D2 = {u'X':u'x',u'Y':u'y'}

# dict to correspond header names with the correct dictionary
refD = {u'col1':[D1a,D1b],u'col2':[D2]}

# now let's have some fun...

for line in fileLines:
    for i, (param, word) in enumerate(zip(Header, line)):
        for minitranslator in refD[param]:
            if word in minitranslator:
                line[i] = minitranslator[word]
</snippet></ROW><ROW><id>3934305</id><snippet>[[u'a', u'x'], [u'b', u'y']]
</snippet></ROW><ROW><id>3934647</id><snippet>self.showAll = tk.BooleanVar()
self.showDone = tk.BooleanVar()
self.showNotDone = tk.BooleanVar()

viewMenu.add_checkbutton(label="Show All", onvalue=True, offvalue=False, variable=self.showAll)
viewMenu.add_checkbutton(label="Show Done", onvalue=True, offvalue=False, variable=self.showDone)
viewMenu.add_checkbutton(label="Show Not Done", onvalue=1, offvalue=False, variable=self.showNotDone)

self.showAll.set(True)
</snippet></ROW><ROW><id>3934762</id><snippet>try:
    from camelot import Integer, Numeric, ...
except ImportError:
    from elixir import Integer, Numeric, ...
</snippet></ROW><ROW><id>3934762</id><snippet>from dataProxy import Integer
</snippet></ROW><ROW><id>3934762</id><snippet>settings.py</snippet></ROW><ROW><id>3934874</id><snippet>Map&lt;Integer, Integer&gt; memoizator = new HashMap&lt;Integer, Integer&gt;();

public Integer memoizedMethod(Integer param) {

    if (!memoizator.containsKey(param)) {
        memoizator.put(param, method(param));
    } 

    return memoizator.get(param);
}
</snippet></ROW><ROW><id>3935313</id><snippet>find</snippet></ROW><ROW><id>3935313</id><snippet>findAll</snippet></ROW><ROW><id>3935372</id><snippet>var
  OldControlWord: Word;
begin
  OldControlWord := Get8087CW();
  Set8087CW($133F);
  try
    // perform your Python code here
  finally
    Set8087CW(OldControlWord);      
  end;
end;
</snippet></ROW><ROW><id>3935372</id><snippet>T8087Precision</snippet></ROW><ROW><id>3935372</id><snippet>Jcl8087</snippet></ROW><ROW><id>3935643</id><snippet>try:
  raise Exception("a")
except:
  try:
    raise Exception("b")
  except:
    pass
  finally:
    raise
</snippet></ROW><ROW><id>3935643</id><snippet>Traceback (most recent call last):
  File "test.py", line 5, in &lt;module&gt;
    raise Exception("b")
Exception: b
</snippet></ROW><ROW><id>3935643</id><snippet>try:
  raise Exception("a")
except:
  try:
    raise Exception("b")
  except:
    raise
</snippet></ROW><ROW><id>3935643</id><snippet>Traceback (most recent call last):
  File "test.py", line 7, in &lt;module&gt;
    raise Exception("b")
Exception: b
</snippet></ROW><ROW><id>3935657</id><snippet>pip</snippet></ROW><ROW><id>3935657</id><snippet>sudo apt-get -y install build-essential
wget http://python-distribute.org/distribute_setup.py &amp;&amp; sudo python ./distribute_setup.py
sudo easy_install pip
sudo pip install numpy
</snippet></ROW><ROW><id>3935657</id><snippet>easy_install</snippet></ROW><ROW><id>3935657</id><snippet>pip</snippet></ROW><ROW><id>3935657</id><snippet>pip</snippet></ROW><ROW><id>3935657</id><snippet>numpy</snippet></ROW><ROW><id>3935701</id><snippet>&gt;&gt;&gt; from decimal import Decimal, ROUND_HALF_UP
&gt;&gt;&gt; x = Decimal('2.47')
&gt;&gt;&gt; x.quantize(Decimal('1'), rounding=ROUND_HALF_UP).quantize(Decimal('0.01'))
Decimal('2.00')
</snippet></ROW><ROW><id>3935701</id><snippet>x.quantize(Decimal('1'), rounding=ROUND_HALF_UP)</snippet></ROW><ROW><id>3935701</id><snippet>x</snippet></ROW><ROW><id>3935701</id><snippet>Decimal('1')</snippet></ROW><ROW><id>3935701</id><snippet>Decimal('0.1')</snippet></ROW><ROW><id>3935701</id><snippet>Decimal('1e1')</snippet></ROW><ROW><id>3935701</id><snippet>10</snippet></ROW><ROW><id>3935701</id><snippet>quantize</snippet></ROW><ROW><id>3935701</id><snippet>Decimal('2.00')</snippet></ROW><ROW><id>3935701</id><snippet>Decimal(2)</snippet></ROW><ROW><id>3935701</id><snippet>to_integral_value</snippet></ROW><ROW><id>3935701</id><snippet>&gt;&gt;&gt; x.to_integral_value(rounding=ROUND_HALF_UP).quantize(Decimal('0.01'))
Decimal('2.00')
</snippet></ROW><ROW><id>3936698</id><snippet>++</snippet></ROW><ROW><id>3936698</id><snippet>+</snippet></ROW><ROW><id>3936933</id><snippet>lxml.html.parse</snippet></ROW><ROW><id>3936933</id><snippet>iterdescendants</snippet></ROW><ROW><id>3936933</id><snippet>lxml.html.clean</snippet></ROW><ROW><id>3936933</id><snippet>lxml.html.clean</snippet></ROW><ROW><id>3936933</id><snippet>lxml</snippet></ROW><ROW><id>3936933</id><snippet>_substitute_whitespace</snippet></ROW><ROW><id>3936994</id><snippet>values</snippet></ROW><ROW><id>3936994</id><snippet>(1,2,3)</snippet></ROW><ROW><id>3936994</id><snippet>'1,2,3'</snippet></ROW><ROW><id>3936994</id><snippet>query = """SELECT id, name, image_id
           FROM users
           WHERE id IN %s
           """    
values = uids
results = dbc.getAll(query, [values])
</snippet></ROW><ROW><id>3937384</id><snippet>&gt;&gt;&gt; a = ['agency[15]','assignment72,','you’11','america’s']
&gt;&gt;&gt; import re
&gt;&gt;&gt; b = re.compile('\w+')
&gt;&gt;&gt; for item in a:
...     print b.search(item).group(0)
...
agency
assignment72
you
america
&gt;&gt;&gt; b = re.compile('[a-z]+')
&gt;&gt;&gt; for item in a:
...     print b.search(item).group(0)
...
agency
assignment
you
america
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3937384</id><snippet>&gt;&gt;&gt; a = "I-have-hyphens-yo!"
&gt;&gt;&gt; re.findall('[a-z]+',a)
['have', 'hyphens', 'yo']
&gt;&gt;&gt; re.findall('[a-z-]+',a)
['-have-hyphens-yo']
&gt;&gt;&gt; re.findall('[a-zA-Z-]+',a)
['I-have-hyphens-yo']
&gt;&gt;&gt; re.findall('\w+',a)
['I', 'have', 'hyphens', 'yo']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3937417</id><snippet>&gt;&gt;&gt; list(expQuestions("?flcopt?"))
['flcopt', 'flcopt@', 'flcopt@@', 'flcopt@@@', '@flcopt', '@flcopt@', '@flcopt@@', '@flcopt@@@', '@@flcopt', '@@flcopt@', '@@flcopt@@', '@@flcopt@@@', '@@@flcopt', '@@@flcopt@', '@@@flcopt@@', '@@@flcopt@@@']
</snippet></ROW><ROW><id>3937417</id><snippet>matchats</snippet></ROW><ROW><id>3937417</id><snippet>def matchOCR(l, r):
    for expl in expQuestions(l):
        for expr in expQuestions(r):
            if matchats(expl, expr):
                return True
    return False
</snippet></ROW><ROW><id>3937417</id><snippet>&gt;&gt;&gt; matchOCR("Ro?co?er", "?flcopt?")
True
&gt;&gt;&gt; matchOCR("Ro?co?er", "?flcopt?z")
False
&gt;&gt;&gt; matchOCR("Ro?co?er", "?flc?pt?")
True
&gt;&gt;&gt; matchOCR("Ro?co?e?", "?flc?pt?")
True
</snippet></ROW><ROW><id>3937417</id><snippet>def matchats(l, r):
    """Match two strings with @ representing exactly 1 char"""
    if len(l) != len(r): return False
    for i, c1 in enumerate(l):
        c2 = r[i]
        if c1 == "@" or c2 == "@": continue
        if c1 != c2: return False
    return True
</snippet></ROW><ROW><id>3937417</id><snippet>cartesian_product</snippet></ROW><ROW><id>3937417</id><snippet>def expQuestions(s):
    """For OCR w/ a questionmark in them, expand questions with
    @s for all possibilities"""
    numqs = s.count("?")

    blah = list(s)
    for expqs in cartesian_product([(0,1,2,3)]*numqs):
        newblah = blah[:]
        qi = 0
        for i,c in enumerate(newblah):
            if newblah[i] == '?':
                newblah[i] = '@'*expqs[qi]
                qi += 1
        yield "".join(newblah)
</snippet></ROW><ROW><id>3937484</id><snippet>main</snippet></ROW><ROW><id>3937484</id><snippet>main()</snippet></ROW><ROW><id>3937484</id><snippet>def main():
    print 'doing stuff'
    foo()
    bar()

def foo():
    print 'inside foo'

def bar():
    print 'inside bar'

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3937484</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>3937484</id><snippet>main()</snippet></ROW><ROW><id>3937484</id><snippet>__main__</snippet></ROW><ROW><id>3937484</id><snippet>do_stuff</snippet></ROW><ROW><id>3937484</id><snippet>if __name__ == '__main__': do_stuff()</snippet></ROW><ROW><id>3937484</id><snippet>main</snippet></ROW><ROW><id>3937926</id><snippet>if</snippet></ROW><ROW><id>3937926</id><snippet>.pip_installed</snippet></ROW><ROW><id>3937926</id><snippet>pip -f http://localhost/packages/
</snippet></ROW><ROW><id>3937970</id><snippet>IOError: Write failed, client closed connection.</snippet></ROW><ROW><id>3938238</id><snippet>import</snippet></ROW><ROW><id>3938238</id><snippet>eval(code, {"__builtins__":None}, {safe_functions})
</snippet></ROW><ROW><id>3938238</id><snippet>{"name": func}</snippet></ROW><ROW><id>3938238</id><snippet>globals</snippet></ROW><ROW><id>3938548</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>3938548</id><snippet>y = A * exp(K * t)</snippet></ROW><ROW><id>3938548</id><snippet>y = log(A * exp(K * t)) = K * t + log(A)</snippet></ROW><ROW><id>3938548</id><snippet>y = A*exp(K*t) + C</snippet></ROW><ROW><id>3938548</id><snippet>y - C = K*t + log(A)</snippet></ROW><ROW><id>3938548</id><snippet>y</snippet></ROW><ROW><id>3938548</id><snippet>C</snippet></ROW><ROW><id>3938548</id><snippet>C</snippet></ROW><ROW><id>3938548</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
import scipy.optimize


def main():
    # Actual parameters
    A0, K0, C0 = 2.5, -4.0, 2.0

    # Generate some data based on these
    tmin, tmax = 0, 0.5
    num = 20
    t = np.linspace(tmin, tmax, num)
    y = model_func(t, A0, K0, C0)

    # Add noise
    noisy_y = y + 0.5 * (np.random.random(num) - 0.5)

    fig = plt.figure()
    ax1 = fig.add_subplot(2,1,1)
    ax2 = fig.add_subplot(2,1,2)

    # Non-linear Fit
    A, K, C = fit_exp_nonlinear(t, noisy_y)
    fit_y = model_func(t, A, K, C)
    plot(ax1, t, y, noisy_y, fit_y, (A0, K0, C0), (A, K, C0))
    ax1.set_title('Non-linear Fit')

    # Linear Fit (Note that we have to provide the y-offset ("C") value!!
    A, K = fit_exp_linear(t, y, C0)
    fit_y = model_func(t, A, K, C0)
    plot(ax2, t, y, noisy_y, fit_y, (A0, K0, C0), (A, K, 0))
    ax2.set_title('Linear Fit')

    plt.show()

def model_func(t, A, K, C):
    return A * np.exp(K * t) + C

def fit_exp_linear(t, y, C=0):
    y = y - C
    y = np.log(y)
    K, A_log = np.polyfit(t, y, 1)
    A = np.exp(A_log)
    return A, K

def fit_exp_nonlinear(t, y):
    opt_parms, parm_cov = sp.optimize.curve_fit(model_func, t, y, maxfev=1000)
    A, K, C = opt_parms
    return A, K, C

def plot(ax, t, y, noisy_y, fit_y, orig_parms, fit_parms):
    A0, K0, C0 = orig_parms
    A, K, C = fit_parms

    real_data = ax.plot(t, y, 'k--')
    obs_data = ax.plot(t, noisy_y, 'ro')
    fit_data = ax.plot(t, fit_y, 'b-')
    ax.legend((real_data, fit_data),
            ['Actual Function:\n $y = %0.2f e^{%0.2f t} + %0.2f$' % (A0, K0, C0), 
             'Fitted Function:\n $y = %0.2f e^{%0.2f t} + %0.2f$' % (A, K, C)], 
            bbox_to_anchor=(1.05, 1.1), fancybox=True, shadow=True)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3938830</id><snippet>&gt;&gt;&gt; ''.join( "%"+i+s[n+1] for n,i in enumerate(s)  if n%2==0 )
'%e6%b6%93%e6%a0%ab%e6%99%ab'
</snippet></ROW><ROW><id>3938830</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub("(..)","%\\1",s)
'%e6%b6%93%e6%a0%ab%e6%99%ab'
</snippet></ROW><ROW><id>3938897</id><snippet>from django.template.defaultfilters import date as defaultfilters_date, time as defaultfilters_time

# FORCE {{...|date}} to be equivalent to {{...|date:"DATE_FORMAT"}} so it localizes properly, ditto for time and TIME_FORMAT

@register.filter(name="date")
def date_localized(val, arg=None):
    return defaultfilters_date(val, arg or "DATE_FORMAT")

@register.filter(name="time")
def time_localized(val, arg=None):
    return defaultfilters_time(val, arg or "TIME_FORMAT")
</snippet></ROW><ROW><id>3938962</id><snippet>x = Counter(3,8)
for i in x:
    print i
</snippet></ROW><ROW><id>3938962</id><snippet>x = Counter(3,8)
for i in x:
    print x
</snippet></ROW><ROW><id>3938971</id><snippet>self.response.out.write(...)</snippet></ROW><ROW><id>3938971</id><snippet>import yaml

users = model.Users.all().fetch(10)
users = [{'user': {'name': user.name,
                   'address': user.address,
                   'phone': user.phone,
                   'city': user.city}}
          for user in users]

self.response.out.write(yaml.dump(users, default_flow_style=False))
</snippet></ROW><ROW><id>3939081</id><snippet>import sys
import os
the_name= sys.argv[1]
count=0
for r,d,f in os.walk("/mypath"):
    for file in f:
        if the_name in file:
            count+=1
</snippet></ROW><ROW><id>3939081</id><snippet>for r,d,f in os.walk("/mypath"):
    for file in f:
        for line in open(os.path.join(r,file)) :
            if the_name in line:  
                count+=line.count(the_name)
</snippet></ROW><ROW><id>3939226</id><snippet>#!/bin/bash
for i in 1 2 3 4 5
do
  python program.py $i rfile
done
</snippet></ROW><ROW><id>3939226</id><snippet>chmod +x</snippet></ROW><ROW><id>3939226</id><snippet>python program.py 1 rfile
python program.py 2 rfile
python program.py 3 rfile
python program.py 4 rfile
python program.py 5 rfile
</snippet></ROW><ROW><id>3939381</id><snippet>line.replace(...)</snippet></ROW><ROW><id>3939381</id><snippet>line</snippet></ROW><ROW><id>3939381</id><snippet>str.translate</snippet></ROW><ROW><id>3939381</id><snippet>line = line.translate(None, '!@#$')
</snippet></ROW><ROW><id>3939381</id><snippet>re.sub</snippet></ROW><ROW><id>3939381</id><snippet>import re
line = re.sub('[!@#$]', '', line)
</snippet></ROW><ROW><id>3939381</id><snippet>line</snippet></ROW><ROW><id>3939381</id><snippet>sub</snippet></ROW><ROW><id>3939381</id><snippet>None</snippet></ROW><ROW><id>3939381</id><snippet>import string
line = line.translate(string.maketrans('', ''), '!@#$')
</snippet></ROW><ROW><id>3939381</id><snippet>string.maketrans</snippet></ROW><ROW><id>3939381</id><snippet>str.translate</snippet></ROW><ROW><id>3939381</id><snippet>translate</snippet></ROW><ROW><id>3939381</id><snippet>None</snippet></ROW><ROW><id>3939381</id><snippet>string.maketrans</snippet></ROW><ROW><id>3939381</id><snippet>ord</snippet></ROW><ROW><id>3939381</id><snippet>None</snippet></ROW><ROW><id>3939381</id><snippet>translation_table = dict.fromkeys(map(ord, '!@#$'), None)
unicode_line = unicode_line.translate(translation_table)
</snippet></ROW><ROW><id>3939381</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>3939381</id><snippet>map</snippet></ROW><ROW><id>3939381</id><snippet>{ord('!'): None, ord('@'): None, ...}
</snippet></ROW><ROW><id>3939511</id><snippet>os.system('cls' if os.name=='nt' else 'clear')</snippet></ROW><ROW><id>3939604</id><snippet>import pylab, numpy
from StringIO import StringIO
from PIL import Image

# plot a histogram
pylab.hist(numpy.random.rand(100))

buf = StringIO()
pylab.savefig(buf, format='png')

buf.seek(0)
im = Image.open(buf)
im.show()
</snippet></ROW><ROW><id>3939992</id><snippet>class Photo(db.Model): 
  album = db.ReferenceProperty(Album) 
  album_private = db.BooleanProperty()
  title = db.StringProperty() 
</snippet></ROW><ROW><id>3939992</id><snippet>public_photos = Photos.all().filter('album_private = ', False)
</snippet></ROW><ROW><id>3940000</id><snippet>def f(lst):
  flt = filter(lambda x : x is not None and x != 0, lst)
  try:
    return min(flt)
  except ValueError:
    return None
</snippet></ROW><ROW><id>3940000</id><snippet>min</snippet></ROW><ROW><id>3940000</id><snippet>ValueError</snippet></ROW><ROW><id>3940000</id><snippet>from functools import reduce
def f(lst):
  flt = filter(lambda x : x is not None and x != 0, lst)
  m = next(flt, None)
  if m is None:
    return None
  return reduce(min, flt, m)
</snippet></ROW><ROW><id>3940092</id><snippet># original
filtered = filter(lambda x : x is not None and x != 0, c)

# list comp
filtered = [x for x in c if x is not None and x != 0]
</snippet></ROW><ROW><id>3940144</id><snippet>reversed</snippet></ROW><ROW><id>3940144</id><snippet>&gt;&gt;&gt; array=[0,10,20,40]
&gt;&gt;&gt; for i in reversed(array):
...     print i
</snippet></ROW><ROW><id>3940755</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; [''.join(g) for k, g in groupby('AAAABBBCCD')]
['AAAA', 'BBB', 'CC', 'D']
</snippet></ROW><ROW><id>3940755</id><snippet>&gt;&gt;&gt; a=[];S="";p=""
&gt;&gt;&gt; s
'AAABBBCDEEEEBBBAA'
&gt;&gt;&gt; for c in s:
...     if c != p: a.append(S);S=""
...     S=S+c
...     p=c
...
&gt;&gt;&gt; a.append(S)
&gt;&gt;&gt; a
['', 'AAA', 'BBB', 'C', 'D', 'EEEE', 'BBB', 'AA']
&gt;&gt;&gt; filter(None,a)
['AAA', 'BBB', 'C', 'D', 'EEEE', 'BBB', 'AA']
</snippet></ROW><ROW><id>3941154</id><snippet>DATE_NAME_PATTERN = re.compile("((.*?)(-[0-9]{8})?)\\.txt")
</snippet></ROW><ROW><id>3941171</id><snippet>parseString</snippet></ROW><ROW><id>3941171</id><snippet>_Document</snippet></ROW><ROW><id>3941171</id><snippet>__str__</snippet></ROW><ROW><id>3941171</id><snippet>HtmlLib.Reader().fromString</snippet></ROW><ROW><id>3941171</id><snippet>StringIO</snippet></ROW><ROW><id>3941171</id><snippet>doc = reader.fromString(tidy.parseString("&lt;Html&gt;Bad Html.", **options))
</snippet></ROW><ROW><id>3941171</id><snippet>doc = reader.fromString(str(tidy.parseString("&lt;Html&gt;Bad Html.", **options)))
</snippet></ROW><ROW><id>3941450</id><snippet>x, (y, (w, z)), r
</snippet></ROW><ROW><id>3941459</id><snippet>dd = {}
referrer = None

for line in open('hosts.txt'):
    if line.startswith('Host'):
        host = line.split(': ')[1].strip('\n')
    elif line.startswith('Referer'):
        referrer = line.split(': ')[1].strip('\n')

    if referrer is not None:
        dd.setdefault(referrer, set()).add(host)
        referrer = None

for k, v in dd.iteritems():
    print k, len(v)
</snippet></ROW><ROW><id>3941529</id><snippet>timeseries_list = [timeseries1 timeseries2 ...]
r = scikits.timeseries.lib.reportlib.Report(*timeseries_list)
</snippet></ROW><ROW><id>3941529</id><snippet>*</snippet></ROW><ROW><id>3941529</id><snippet>timeseries_list</snippet></ROW><ROW><id>3941823</id><snippet>max_allowed_packet=128M
</snippet></ROW><ROW><id>3941828</id><snippet>visudo</snippet></ROW><ROW><id>3941828</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>3941828</id><snippet>/etc/init.d/tomcat6</snippet></ROW><ROW><id>3941952</id><snippet>__init__</snippet></ROW><ROW><id>3941967</id><snippet>primes_sieve</snippet></ROW><ROW><id>3941967</id><snippet>primes_sieve1</snippet></ROW><ROW><id>3941967</id><snippet>def primes_sieve2(limit):
    a = [True] * limit                          # Initialize the primality list
    a[0] = a[1] = False

    for (i, isprime) in enumerate(a):
        if isprime:
            yield i
            for n in xrange(i*i, limit, i):     # Mark factors non-prime
                a[n] = False
</snippet></ROW><ROW><id>3941967</id><snippet>i*i</snippet></ROW><ROW><id>3942321</id><snippet>__hash__()</snippet></ROW><ROW><id>3942321</id><snippet>Item</snippet></ROW><ROW><id>3942601</id><snippet>dir</snippet></ROW><ROW><id>3942601</id><snippet>get_special_paths</snippet></ROW><ROW><id>3942601</id><snippet>dir = os.getcwd()</snippet></ROW><ROW><id>3942780</id><snippet>
class Test_data():
    def testNumbers():
        numbers = [0,11,222,33,44,555,6,77,8,9999]
        for i in numbers:
            yield checkNumber, num

def checkNumber(num):
    assert num == 33
</snippet></ROW><ROW><id>3942780</id><snippet>nosetests filename</snippet></ROW><ROW><id>3943139</id><snippet>&gt;&gt;&gt; u'He said \u201CHello\u201D'.encode('iso-8859-1')
UnicodeEncodeError
&gt;&gt;&gt; u'He said \u201CHello\u201D'.encode('cp1252')
'He said \x93Hello\x94'
</snippet></ROW><ROW><id>3943139</id><snippet>“</snippet></ROW><ROW><id>3943139</id><snippet>encode(..., 'ignore')</snippet></ROW><ROW><id>3943174</id><snippet>ord</snippet></ROW><ROW><id>3943174</id><snippet>int</snippet></ROW><ROW><id>3943174</id><snippet>if (ord(byte) &amp; 0x01) == 0x01:
</snippet></ROW><ROW><id>3943320</id><snippet>list</snippet></ROW><ROW><id>3943320</id><snippet>__setitem__</snippet></ROW><ROW><id>3943320</id><snippet>class freezablelist(list):
    def __init__(self,*args,**kwargs):
        list.__init__(self, *args)
        self.frozen = kwargs.get('frozen',False)

    def __setitem__(self,i, y):
        if not self.frozen:
            list.__setitem__(self, i, y)
        else:
            raise TypeError("can't modify frozen list")

    def __setslice__(self, i, j, y):
        if not self.frozen:
            list.__setslice__(self, i, j, y)
        else:
            raise TypeError("can't modify frozen list")

    def freeze(self): self.frozen = True
    def thaw(self):   self.frozen = False
</snippet></ROW><ROW><id>3943320</id><snippet>&gt;&gt;&gt; from freeze import freezablelist as fl
&gt;&gt;&gt; a = fl([1,2,3])
&gt;&gt;&gt; a[1] = 'chicken'
&gt;&gt;&gt; a.freeze()
&gt;&gt;&gt; a[1] = 'tuna'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "freeze.py", line 10, in __setitem__
    raise TypeError("can't modify frozen list")
TypeError: can't modify frozen list
&gt;&gt;&gt; a[1:1] = 'tuna'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "freeze.py", line 16, in __setslice__
    raise TypeError("can't modify frozen list")
TypeError: can't modify frozen list
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3943374</id><snippet>import unittest

import re

# Verbose regular expression!  http://docs.python.org/library/re.html#re.X
p = r"""

(?P&lt;name&gt;[^(]+)         # Match the pre-open-paren name.
\(                      # Open paren
(?P&lt;fields&gt;             # Comma-separated fields
    (?:
        [a-zA-Z0-9_-]+
        (?:,\ )         # Subsequent fields must separated by space and comma
    )*
    [a-zA-Z0-9_-]+       # At least one field. No trailing comma or space allowed.
)

\)                      # Close-paren
"""

# Compiled for speed!
cp = re.compile(p, re.VERBOSE)

class Foo(object):
    pass


def validateAndBuild(s):
    """Validate a string and return a built object.
    """
    match = cp.search(s)
    if match is None:
        raise ValueError('Bad schema: %s' % s)

    schema = match.groupdict()
    foo = Foo()
    foo.name = schema['name']
    foo.fields = schema['fields'].split(', ')

    return foo



class ValidationTest(unittest.TestCase):
    def testValidString(self):
        s = "schema(field1, field2, field3, field4, fieldn)"

        obj = validateAndBuild(s)

        self.assertEqual(obj.name, 'schema')

        self.assertEqual(obj.fields, ['field1', 'field2', 'field3', 'field4', 'fieldn'])

    invalid = [
        'schema field1 field2',
        'schema(field1',
        'schema(field1 field2)',
        ]

    def testInvalidString(self):
        for s in self.invalid:
            self.assertRaises(ValueError, validateAndBuild, s)


if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>3943697</id><snippet>assertMultiLineEqual</snippet></ROW><ROW><id>3943697</id><snippet>    def assertMultiLineEqual(self, first, second, msg=None):
        """Assert that two multi-line strings are equal.

        If they aren't, show a nice diff.

        """
        self.assertTrue(isinstance(first, str),
                'First argument is not a string')
        self.assertTrue(isinstance(second, str),
                'Second argument is not a string')

        if first != second:
            message = ''.join(difflib.ndiff(first.splitlines(True),
                                                second.splitlines(True)))
            if msg:
                message += " : " + msg
            self.fail("Multi-line strings are unequal:\n" + message)
</snippet></ROW><ROW><id>3943790</id><snippet>name = db.StringProperty
</snippet></ROW><ROW><id>3943790</id><snippet>name = db.StringProperty()
</snippet></ROW><ROW><id>3944404</id><snippet>SELECT * FROM events WHERE summary ILIKE E'%%test%%' AND start_time &gt; %(begin)s 
</snippet></ROW><ROW><id>3944481</id><snippet>class Distance(object):

    METER = 1
    FOOT = 0.3048
    MILE = 1609.344
    INCH = 0.0254
    UNITS = {'meters': METER,
         'mts': METER,
         'mt': METER,
         'feet': FOOT,
         'foot': FOOT,
         'ft': FOOT,
         'miles': MILE,
         'mls': MILE,
         'ml': MILE,
         'inch': INCH,
         }
    def __init__(self, s):
        self.number, unit = s.split()
        self._convert(unit)

    def _convert(self, unit):
        self.number = float(self.number)
        if self.UNITS[unit] != 1:
            self.number *= self.UNITS[unit]

    @ property
    def meters(self):
        return self.number

    @ meters.setter
    def meters(self, v):
        self.number = float(v)

    @ property
    def miles(self):
        return self.number / self.MILE

    @ miles.setter
    def miles(self, v):
        self.number = v
        self._convert('miles')

    @ property
    def feet(self):
        return self.number / self.FOOT

    @ feet.setter
    def feet(self, v):
        self.number = v
        self._convert('feet')

    @ property
    def inch(self):
        return self.number / self.INCH

    @ inch.setter
    def inch(self, v):
        self.number = v
        self._convert('inch')
</snippet></ROW><ROW><id>3944481</id><snippet>&gt;&gt;&gt; d = Distance('1302.09029321 mts')
&gt;&gt;&gt; d.meters
1302.09029321
&gt;&gt;&gt; d.feet
4271.949780872703
&gt;&gt;&gt; d.inch
51263.39737047244
&gt;&gt;&gt; d.miles
0.8090813978925575
&gt;&gt;&gt; d.miles = 1
&gt;&gt;&gt; d.meters
1609.344
&gt;&gt;&gt; d.feet
5280.0
&gt;&gt;&gt; d.inch = .0002
&gt;&gt;&gt; d.inch
0.00019999999999999998
&gt;&gt;&gt; d.feet
1.6666666666666664e-05
&gt;&gt;&gt; d.meters
5.08e-06
&gt;&gt;&gt; d.miles
3.156565656565656e-09
&gt;&gt;&gt; d.feet = 1
&gt;&gt;&gt; d.meters
0.3048
&gt;&gt;&gt; d.miles
0.0001893939393939394
</snippet></ROW><ROW><id>3944531</id><snippet>urllib2</snippet></ROW><ROW><id>3944531</id><snippet>urllib2</snippet></ROW><ROW><id>3944531</id><snippet>sock.recv(maxbytes)</snippet></ROW><ROW><id>3944531</id><snippet>conn.fp._sock.recv(maxbytes)</snippet></ROW><ROW><id>3944531</id><snippet>conn.read(bytes)</snippet></ROW><ROW><id>3944531</id><snippet>urllib2</snippet></ROW><ROW><id>3944668</id><snippet>if guess in cars:
    ...
</snippet></ROW><ROW><id>3944668</id><snippet>cars_set = set(cars)
....
if guess in cars_set:
    ...
</snippet></ROW><ROW><id>3944668</id><snippet>cars[0]</snippet></ROW><ROW><id>3944668</id><snippet>cars[1:]</snippet></ROW><ROW><id>3944668</id><snippet>cars</snippet></ROW><ROW><id>3944897</id><snippet>x = 1
y = "foo" + str(x)
</snippet></ROW><ROW><id>3944987</id><snippet>//td[contains(@id, "subject_")]</snippet></ROW><ROW><id>3944987</id><snippet>subject_</snippet></ROW><ROW><id>3944987</id><snippet>var tds = document.evaluate("//td[contains(@id, \"subject_\")]", document, null,
        XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null); 
for ( var i = 0; i &lt; tds.snapshotLength; i++) {
   var td = tds.snapshotItem(i);
   // get text using td.textContent and add it to array or whatever...
   // and return it
}

return ...
</snippet></ROW><ROW><id>3944987</id><snippet>findElementsBy</snippet></ROW><ROW><id>3944987</id><snippet>//td[contains(@id, "subject_")]</snippet></ROW><ROW><id>3945056</id><snippet>out_file = open("output.txt", "w")
for line in open("input.txt", "r"):
    out_file.write(line)
    out_file.write("\n")
</snippet></ROW><ROW><id>3945056</id><snippet>from shutil import copy
copy("input.txt", "output.txt")
</snippet></ROW><ROW><id>3945056</id><snippet>read()</snippet></ROW><ROW><id>3945056</id><snippet>file_data = open("input.txt", "r").read()
# manipulate the data ...
output = open("output.txt", "w")
output.write(file_data)
output.close()
</snippet></ROW><ROW><id>3945056</id><snippet>\n</snippet></ROW><ROW><id>3945056</id><snippet>readlines()</snippet></ROW><ROW><id>3945056</id><snippet>for j in range(len(orig[i])):
        curr = orig[i][j]
        if ord(curr) == 10:  
            enctextCC.write(curr)
        else:
            enctextCC.write(transformed(curr))
</snippet></ROW><ROW><id>3945251</id><snippet>doc_has_word = [ (index[word].keys(),word) for word in wordlist ]
</snippet></ROW><ROW><id>3945251</id><snippet>from collections import defaultdict
doc_words = defaultdict(list)
for d, w in doc_has_word:
    doc_words[tuple(d.items())].append(w)
</snippet></ROW><ROW><id>3945374</id><snippet>setup.py</snippet></ROW><ROW><id>3945374</id><snippet>init.tcl</snippet></ROW><ROW><id>3945374</id><snippet>data_files</snippet></ROW><ROW><id>3945374</id><snippet>windows</snippet></ROW><ROW><id>3945374</id><snippet>setup(windows=[r'C:\Python26\Random Password Generator.py'])
</snippet></ROW><ROW><id>3945374</id><snippet>init.tcl</snippet></ROW><ROW><id>3945374</id><snippet>setup(data_files=['C:\Python26\tcl\tcl8.5\init.tcl'],
      windows=[r'C:\Python26\Random Password Generator.py'])
</snippet></ROW><ROW><id>3945764</id><snippet>soup = BeautifulSoup(htmlstring)
soup.findAll('div', style="width=300px;")
</snippet></ROW><ROW><id>3945815</id><snippet>for i,j in izip( mylistA, mylistB ):
    print i + j
</snippet></ROW><ROW><id>3945883</id><snippet>x = "(1,2,3)"
t = tuple(int(v) for v in re.findall("[0-9]+", x))
</snippet></ROW><ROW><id>3945955</id><snippet>${ to_json( dict( a = 1, b = 2 ) ) }
</snippet></ROW><ROW><id>3945955</id><snippet>${ to_json( dict( a = 1, b = 2 ) ) | n }
</snippet></ROW><ROW><id>3946190</id><snippet>from Tkinter import Frame, Label</snippet></ROW><ROW><id>3946190</id><snippet>import Tkinter as tk</snippet></ROW><ROW><id>3946190</id><snippet>Frame</snippet></ROW><ROW><id>3946416</id><snippet>def segment(text): 
    "Return a list of words that is the best segmentation of text." 
    if not text: return [] 
    candidates = ([first]+segment(rem) for first,rem in splits(text)) 
    return max(candidates, key=Pwords) 
</snippet></ROW><ROW><id>3946416</id><snippet>static IEnumerable&lt;string&gt; segment(string text)</snippet></ROW><ROW><id>3946416</id><snippet>text</snippet></ROW><ROW><id>3946416</id><snippet>static IEnumerable&lt;string&gt; segment(string text)
{
    if (text == "") return new string[0]; // C# idiom for empty list of strings
    var candidates = from pair in splits(text)
                     select new[] {pair.Item1}.Concat(segment(pair.Item2));
    return candidates.OrderBy(Pwords).First();
}
</snippet></ROW><ROW><id>3946416</id><snippet>splits</snippet></ROW><ROW><id>3946416</id><snippet>static IEnumerable&lt;Tuple&lt;string, string&gt;&gt; splits(string text, int L = 20)
{
    return from i in Enumerable.Range(1, Math.Min(text.Length, L))
           select Tuple.Create(text.Substring(0, i), text.Substring(i));
}
</snippet></ROW><ROW><id>3946416</id><snippet>Pwords</snippet></ROW><ROW><id>3946416</id><snippet>product</snippet></ROW><ROW><id>3946416</id><snippet>Pw</snippet></ROW><ROW><id>3946416</id><snippet>static double Pwords(IEnumerable&lt;string&gt; words)
{
    return product(from w in words select Pw(w));
}
</snippet></ROW><ROW><id>3946416</id><snippet>product</snippet></ROW><ROW><id>3946416</id><snippet>static double product(IEnumerable&lt;double&gt; nums)
{
    return nums.Aggregate((a, b) =&gt; a * b);
}
</snippet></ROW><ROW><id>3946416</id><snippet>segment</snippet></ROW><ROW><id>3946416</id><snippet>static Dictionary&lt;string, IEnumerable&lt;string&gt;&gt; segmentTable =
   new Dictionary&lt;string, IEnumerable&lt;string&gt;&gt;();

static IEnumerable&lt;string&gt; segment(string text)
{
    if (text == "") return new string[0]; // C# idiom for empty list of strings
    if (!segmentTable.ContainsKey(text))
    {
        var candidates = from pair in splits(text)
                         select new[] {pair.Item1}.Concat(segment(pair.Item2));
        segmentTable[text] = candidates.OrderBy(Pwords).First().ToList();
    }
    return segmentTable[text];
}
</snippet></ROW><ROW><id>3946461</id><snippet>for root, dirs, files in os.walk(basedir):
    ... do you stuff ..
</snippet></ROW><ROW><id>3946461</id><snippet>&gt;&gt;&gt; os.path.splitext('/d/c/as.jpeg')
('/d/c/as', '.jpeg')
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3946512</id><snippet>pairs = angles.iteritems()
</snippet></ROW><ROW><id>3946512</id><snippet>filtered = [(name, value) for name, value in pairs if value &gt; 30]
</snippet></ROW><ROW><id>3946512</id><snippet>if filtered:
</snippet></ROW><ROW><id>3946512</id><snippet>    from random import choice
    name, value = choice(filtered)
</snippet></ROW><ROW><id>3946512</id><snippet>name</snippet></ROW><ROW><id>3946512</id><snippet>def thing1(name, value):
    # do stuff...
def thing2(name, value):
    # do different stuff...
</snippet></ROW><ROW><id>3946512</id><snippet>routes = {'A': thing1,
          'B': thing2,
          'C': thing1}
</snippet></ROW><ROW><id>3946512</id><snippet>def route(pair):
    name, value = pair
    return routes[name](name, value)
</snippet></ROW><ROW><id>3946512</id><snippet>route</snippet></ROW><ROW><id>3946512</id><snippet>choice</snippet></ROW><ROW><id>3946512</id><snippet>result = route(choice(filtered))
</snippet></ROW><ROW><id>3946542</id><snippet>xdata = pylab.arange(1961, 2031, 1)
pylab.figure(num=None, figsize=(20.48, 10.24), dpi=100, facecolor='w', edgecolor='k')
pylab.plot(xdata, ydata, linewidth=3.0)
pylab.xlabel(xlabel)
pylab.ylabel(ylabel)
pylab.title(title)
pylab.grid(True)

ram = cStringIO.StringIO()
pylab.savefig(ram, format='png')

import Image
im = Image.open(ram.read())
</snippet></ROW><ROW><id>3946652</id><snippet>def func1():
    pass
</snippet></ROW><ROW><id>3946652</id><snippet>import foo
class tata:
   def method1(self):
      func1=foo.func1
</snippet></ROW><ROW><id>3946763</id><snippet>list</snippet></ROW><ROW><id>3946763</id><snippet>self.append</snippet></ROW><ROW><id>3946763</id><snippet>self.foos.append</snippet></ROW><ROW><id>3946763</id><snippet>self[4]</snippet></ROW><ROW><id>3946763</id><snippet>self.foos[4]</snippet></ROW><ROW><id>3946763</id><snippet>object</snippet></ROW><ROW><id>3946792</id><snippet>strptime</snippet></ROW><ROW><id>3946792</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>3946828</id><snippet>fprintf(stderr, format_string, args ...);
</snippet></ROW><ROW><id>3946828</id><snippet>stderr</snippet></ROW><ROW><id>3946828</id><snippet>stderr</snippet></ROW><ROW><id>3946828</id><snippet>old_stderr = os.dup(sys.stderr.fileno()) # keep a copy
fd = os.open('path/to/mylog', os.O_CREAT | os.O_WRONLY)
os.dup2(fd, sys.stderr.fileno())
# Now, stderr output, including NSLog output, should go to 'path/to/mylog'
...
os.dup2(old_stderr, sys.stderr.fileno())
#stderr restored to its old state
</snippet></ROW><ROW><id>3946828</id><snippet>fd</snippet></ROW><ROW><id>3946828</id><snippet>StreamHandler</snippet></ROW><ROW><id>3946997</id><snippet>import os
import glob
import operator
os.chdir("/mypath")
for file in glob.glob("*.csv"):
    data=open(file).readlines()
    data=[i.strip().split(";") for i in data if i[:3] in ["637","638","639"]]
    # data=[i.strip().split(";") for i in data if i[:3] in ["637","638","639"] and isinstance(float(i[:6]),float) ]
    sortedlist = sorted(data, key=operator.itemgetter(1), reverse=True)
    print "Highest for file %s: %s" % (file,sortedlist[0])
</snippet></ROW><ROW><id>3946997</id><snippet>find . -type f -name '*.csv' |while read -r FILE
do
 grep -a "63[789]\...;" "$FILE" | sort -n -r -t ';' -k 2 | head -1  &gt;&gt; output.txt
done
</snippet></ROW><ROW><id>3947224</id><snippet>p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True).communicate()[0]
</snippet></ROW><ROW><id>3947241</id><snippet>from StringIO import StringIO
import gzip

request = urllib2.Request('http://example.com/')
request.add_header('Accept-encoding', 'gzip')
response = urllib2.urlopen(request)
if response.info().get('Content-Encoding') == 'gzip':
    buf = StringIO( response.read())
    f = gzip.GzipFile(fileobj=buf)
    data = f.read()
</snippet></ROW><ROW><id>3947307</id><snippet>reader.next() # read next line so header will be accessed
rfd_header = reader.fieldnames
</snippet></ROW><ROW><id>3947307</id><snippet>rfd_header = reader.next()
</snippet></ROW><ROW><id>3947323</id><snippet>import os, os.path

for root, _, files in os.walk(dirtocheck):
    for f in files:
        fullpath = os.path.join(root, f)
        if os.path.getsize(fullpath) &lt; 200 * 1024:
            os.remove(fullpath)
</snippet></ROW><ROW><id>3947323</id><snippet>import os, os.path

fileiter = (os.path.join(root, f)
    for root, _, files in os.walk(dirtocheck)
    for f in files)
smallfileiter = (f for f in fileiter if os.path.getsize(f) &lt; 200 * 1024)
for small in smallfileiter:
    os.remove(small)
</snippet></ROW><ROW><id>3947354</id><snippet>def grouper(n, iterable):
    args = [iter(iterable)] * n
    return zip(*args)

t = (2, 2, 10, 10, 344, 344, 45, 43, 2, 2, 10, 10, 12, 8, 2, 10)
print grouper(4, t)
</snippet></ROW><ROW><id>3947354</id><snippet>parts = (t[0:4], t[4:8], t[8:12], t[12:16])

# or as a function
def grouper2(n, lst):
    return [t[i:i+n] for i in range(0, len(t), n)]
</snippet></ROW><ROW><id>3947374</id><snippet>import Tkinter as tk
import sys

def exit():
    sys.exit(0)

root = tk.Tk()
root.wm_withdraw()
for i in range (10):
    top = tk.Toplevel(root)
    top.title("Window %s" % i)
    label = tk.Label(top, text="This is toplevel #%s" % i)
    button = tk.Button(top, text="exit", command=exit)
    label.pack()
    button.pack()

root.mainloop()
</snippet></ROW><ROW><id>3947666</id><snippet>L4 = [ n for n in L1 if (n not in L2) and (n not in L3) ]  # parens for clarity

tmpset = set( L2 + L3 )
L4 = [ n for n in L1 if n not in tmpset ]
</snippet></ROW><ROW><id>3947666</id><snippet>L2 + L3</snippet></ROW><ROW><id>3947666</id><snippet>tmpset = set(L2)
tmpset.update(L3)
L4 = [ n for n in L1 if n not in tmpset ]
</snippet></ROW><ROW><id>3947666</id><snippet>L2</snippet></ROW><ROW><id>3947666</id><snippet>L3</snippet></ROW><ROW><id>3947666</id><snippet>$ python -m timeit \
  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2)' \
  'ts = set(L2); ts.update(L3); L4 = [ n for n in L1 if n not in ts ]'
10000 loops, best of 3: 39.7 usec per loop
</snippet></ROW><ROW><id>3947666</id><snippet>set()</snippet></ROW><ROW><id>3947666</id><snippet>$ python -m timeit \
  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2)' \
  'unwanted = frozenset(item for lst in (L2, L3) for item in lst); L4 = [ n for n in L1 if n not in unwanted ]'
10000 loops, best of 3: 46.4 usec per loop
</snippet></ROW><ROW><id>3947666</id><snippet>$ python -m timeit \
  -s 'L1=range(300);L2=range(30,70,2);L3=range(120,220,2);from itertools import ifilterfalse, chain' \
  'L4 = list(ifilterfalse(frozenset(chain(L2, L3)).__contains__, L1))' 
10000 loops, best of 3: 47.1 usec per loop
</snippet></ROW><ROW><id>3947666</id><snippet>L1</snippet></ROW><ROW><id>3948262</id><snippet>&gt;&gt;&gt; eval('-1*2')
-2
</snippet></ROW><ROW><id>3948362</id><snippet>#! /usr/bin/python

import sys

def read_input_from(file):
    print file.read(),

if __name__ == "__main__":
    if len(sys.argv) &gt; 1:
        # filename supplied, so read input from that
        filename = sys.argv[1]
        file = open(filename)
    else:
        # no filename supplied, so read from stdin
        file = sys.stdin
    read_input_from(file)
</snippet></ROW><ROW><id>3948362</id><snippet>foo.py</snippet></ROW><ROW><id>3948362</id><snippet>foo.py</snippet></ROW><ROW><id>3948362</id><snippet>#! /usr/bin/python

import foo

file = open("testfile", "rb")
foo.read_input_from(file)
</snippet></ROW><ROW><id>3948365</id><snippet>tuple = (foovar, barvar)
cursor.execute("QUERY WHERE foo = ? AND bar = ?", tuple)
</snippet></ROW><ROW><id>3948365</id><snippet>tuple = (onevar,)</snippet></ROW><ROW><id>3948365</id><snippet>cursor_.execute("update posts set comment_count = comment_count + ? where id = ?",
                (cursor_.rowcount, postid))
</snippet></ROW><ROW><id>3948365</id><snippet>cursor_.execute("update posts set comment_count = comment_count + :count where id = :id",
                {"count": cursor_.rowcount, "id": postid})
</snippet></ROW><ROW><id>3948365</id><snippet>"key": value</snippet></ROW><ROW><id>3948766</id><snippet>def someview(request):
    # ... etc ...
    out = HttpResponse(outputstring,
        mimetype="text/html",
        status_code="302",
        )
    out['Content-Disposition'] = "attachment; filename=download.html"
    # fill in all your favorite HTTP headers here
    return out
</snippet></ROW><ROW><id>3948821</id><snippet>apps</snippet></ROW><ROW><id>3948821</id><snippet>settings.py</snippet></ROW><ROW><id>3948821</id><snippet>import os
import sys

PROJECT_ROOT = os.path.dirname(__file__)
sys.path.insert(0, os.path.join(PROJECT_ROOT, 'apps'))
</snippet></ROW><ROW><id>3948847</id><snippet>dst</snippet></ROW><ROW><id>3948847</id><snippet>copy()</snippet></ROW><ROW><id>3948847</id><snippet>src</snippet></ROW><ROW><id>3948847</id><snippet>dst</snippet></ROW><ROW><id>3948859</id><snippet>[vc@vc ~]$ yum whatprovides */twisted/mail/smtp.py 
Loaded plugins: downloadonly, fastestmirror 
Excluding Packages in global exclude list 
Finished 
addons/filelists                       |  195 B     00:00      
base/filelists_db                      | 3.4 MB     00:01      
extras/filelists_db                    | 197 kB     00:00      
updates/filelists_db                   | 2.9 MB     00:01      
No Matches found
</snippet></ROW><ROW><id>3949004</id><snippet>class Final(type):
    def __new__(cls, name, bases, classdict):
        for b in bases:
            if isinstance(b, Final):
                raise TypeError("type '{0}' is not an acceptable base type".format(b.__name__))
        return type.__new__(cls, name, bases, dict(classdict))

class C(metaclass=Final): pass

class D(C): pass
</snippet></ROW><ROW><id>3949048</id><snippet>if v in (None, '', 1.0) or v is False:
</snippet></ROW><ROW><id>3949116</id><snippet>aboutdialog.run()
</snippet></ROW><ROW><id>3949116</id><snippet>aboutdialog.destroy()
</snippet></ROW><ROW><id>3949210</id><snippet>__reversed__</snippet></ROW><ROW><id>3949210</id><snippet>reversed</snippet></ROW><ROW><id>3949210</id><snippet>dict</snippet></ROW><ROW><id>3949244</id><snippet># myhandler.py
session_class = gmemsess.Session

class Handler(webapp.Request
    def _getsession(self):
        if not self._session:
            self._session = session_class(self)
        return self._session
</snippet></ROW><ROW><id>3949244</id><snippet>import myhandler

if testing:
    myhandler.session_class = MyTestingSession
</snippet></ROW><ROW><id>3949350</id><snippet>set</snippet></ROW><ROW><id>3949350</id><snippet>dict</snippet></ROW><ROW><id>3949760</id><snippet>import urllib2
user_agent = 'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_4; en-US) AppleWebKit/534.3 (KHTML, like Gecko) Chrome/6.0.472.63 Safari/534.3'
headers = { 'User-Agent' : user_agent }
req = urllib2.Request('http://www.google.com', None, headers)
response = urllib2.urlopen(req)
page = response.read()
</snippet></ROW><ROW><id>3949760</id><snippet>import sys
import pycurl

class ContentCallback:
        def __init__(self):
                self.contents = ''

        def content_callback(self, buf):
                self.contents = self.contents + buf

t = ContentCallback()
curlObj = pycurl.Curl()
curlObj.setopt(curlObj.URL, 'http://www.google.com')
curlObj.setopt(curlObj.WRITEFUNCTION, t.content_callback)
curlObj.perform()
curlObj.close()
print t.contents
</snippet></ROW><ROW><id>3949812</id><snippet>__import__</snippet></ROW><ROW><id>3949812</id><snippet>import</snippet></ROW><ROW><id>3949812</id><snippet>__import__</snippet></ROW><ROW><id>3949812</id><snippet>src = """
print '!!!'
import os
"""

obj = compile(src, '', 'exec')
eval(obj, {'__builtins__': {'__import__':__builtins__.__import__}})
</snippet></ROW><ROW><id>3949983</id><snippet>import Tkinter

root = Tkinter.Tk()

screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight() 
</snippet></ROW><ROW><id>3950042</id><snippet>
import tkFileDialog

def open_it():
    filename = tkFileDialog.askopenfilename()
    print filename  # test

def save_it():
    filename = tkFileDialog.askopenfilename()
    print filename  # test

def save_as():
    filename = tkFileDialog.asksaveasfilename()
    print filename  # test
</snippet></ROW><ROW><id>3950103</id><snippet>mylist = [1, 2, 3, 4, 5, 6, 7, 8, 9] 
print [mylist[i:i+4] for i in range(0, len(mylist), 4)]
# Prints [[1, 2, 3, 4], [5, 6, 7, 8], [9]]
</snippet></ROW><ROW><id>3950214</id><snippet>resolve(request.path)</snippet></ROW><ROW><id>3950214</id><snippet>app_name</snippet></ROW><ROW><id>3950303</id><snippet>ldd &lt;path&gt;/python</snippet></ROW><ROW><id>3950303</id><snippet>otool -L &lt;path&gt;/python</snippet></ROW><ROW><id>3950536</id><snippet>try:
  do_something()
except Exception as e:
  print e

try:
  do_something_else()
except Exception as e:
  print e
</snippet></ROW><ROW><id>3950536</id><snippet>while True:
  cmd = get_command()
  if cmd == 'quit': break
  try:
    run_command(cmd)
  except Exception as e:
    print "Error running " + cmd + ":"
    print e
</snippet></ROW><ROW><id>3950630</id><snippet>threading</snippet></ROW><ROW><id>3950630</id><snippet>thread</snippet></ROW><ROW><id>3950630</id><snippet>threading</snippet></ROW><ROW><id>3950630</id><snippet>thread</snippet></ROW><ROW><id>3950630</id><snippet>multiprocessing</snippet></ROW><ROW><id>3950630</id><snippet>multiprocessing</snippet></ROW><ROW><id>3950630</id><snippet>multiprocessing</snippet></ROW><ROW><id>3950630</id><snippet>threading</snippet></ROW><ROW><id>3950630</id><snippet>multiprocessing</snippet></ROW><ROW><id>3950630</id><snippet>asyncore</snippet></ROW><ROW><id>3950695</id><snippet>class ImageViewer(QtGui.QMainWindow, ImageViewerUI.Ui_MainWindow):
</snippet></ROW><ROW><id>3950758</id><snippet>PR(A) = (1-d) + d * (PR(T1) / C(T1) + ... + PR(Tn) / C(Tn))
</snippet></ROW><ROW><id>3950758</id><snippet>   A &lt;--&gt; B
   ^     /
    \   v
      C
</snippet></ROW><ROW><id>3950766</id><snippet>somewidget.winfo_width()</snippet></ROW><ROW><id>3950766</id><snippet>somewidget.winfo_height()</snippet></ROW><ROW><id>3950766</id><snippet>somewidget['width']</snippet></ROW><ROW><id>3950876</id><snippet>gettext</snippet></ROW><ROW><id>3950876</id><snippet>locale</snippet></ROW><ROW><id>3950912</id><snippet>self.canvas.xview_moveto(float(scroll_x+1)/img_width)
self.canvas.yview_moveto(float(scroll_y+1)/img_height)
</snippet></ROW><ROW><id>3950912</id><snippet>img_width</snippet></ROW><ROW><id>3950912</id><snippet>img_height</snippet></ROW><ROW><id>3950912</id><snippet>scroll_x</snippet></ROW><ROW><id>3950912</id><snippet>scroll_y</snippet></ROW><ROW><id>3950912</id><snippet>+1</snippet></ROW><ROW><id>3950912</id><snippet>scroll_x/y</snippet></ROW><ROW><id>3950912</id><snippet>scroll_x/y</snippet></ROW><ROW><id>3950912</id><snippet>offset_x = +1 if scroll_x &gt;= 0 else 0
offset_y = +1 if scroll_y &gt;= 0 else 0
self.canvas.xview_moveto(float(scroll_x + offset_x)/new_width)
self.canvas.yview_moveto(float(scroll_y + offset_y)/new_height)
</snippet></ROW><ROW><id>3950960</id><snippet>(n + d // 2) // d</snippet></ROW><ROW><id>3950960</id><snippet>n</snippet></ROW><ROW><id>3950960</id><snippet>d</snippet></ROW><ROW><id>3950960</id><snippet>(((n &lt;&lt; 1) // d) + 1) &gt;&gt; 1</snippet></ROW><ROW><id>3950960</id><snippet>(((n * 2) // d) + 1) // 2</snippet></ROW><ROW><id>3950960</id><snippet>int</snippet></ROW><ROW><id>3950960</id><snippet>long</snippet></ROW><ROW><id>3951014</id><snippet>draw_networkx</snippet></ROW><ROW><id>3951014</id><snippet>for</snippet></ROW><ROW><id>3951014</id><snippet>pos=networkx.spring_layout(G)
for i in range(len(P)):
    networkx.draw_networkx_edges(G,pos,
                edgelist=[list(P[i]), list(Q[perms[0][i]]), list(R[perms[1][i]])],edge_color=color_map[i], width="8")
</snippet></ROW><ROW><id>3951068</id><snippet>C:\path\to\python.exe -m idlelib.idle</snippet></ROW><ROW><id>3951095</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as bs
&gt;&gt;&gt; html = '''
... &lt;div&gt;&lt;a href="/link1"&gt;link1 contents&lt;/a&gt;&lt;/div&gt;
... &lt;div&gt;&lt;a href="/link2"&gt;link2 contents&lt;/a&gt;&lt;/div&gt;
... '''
&gt;&gt;&gt; soup = bs(html)
&gt;&gt;&gt; for anchor_tag in soup.findAll('a'):
...   print anchor_tag.contents[0]
... 
link1 contents
link2 contents
</snippet></ROW><ROW><id>3951095</id><snippet>defaultdict</snippet></ROW><ROW><id>3951095</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for anchor_tag in soup.findAll('a'):
...   d[anchor_tag.contents[0]] += 1
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {u'link1 contents': 1, u'link2 contents': 1})
</snippet></ROW><ROW><id>3951177</id><snippet>/System/Library/...</snippet></ROW><ROW><id>3951177</id><snippet>/Library/...</snippet></ROW><ROW><id>3951193</id><snippet>--no_cookies</snippet></ROW><ROW><id>3951193</id><snippet>python2.5 /path/to/google_appengine/appcfg.py --no_cookies update myapp
</snippet></ROW><ROW><id>3951269</id><snippet>import twisted.application
application = twisted.application.service.Application("Scotty's UDP server")
twisted.application.internet.UDPServer(PORT, BaseThreadedUDPServer()).setServiceParent(application)
</snippet></ROW><ROW><id>3951457</id><snippet>PyObject* foo(PyObject *self, PyObject *args);
</snippet></ROW><ROW><id>3951457</id><snippet>static PyMethodDef MyMethods[] =
{
    {"mymethod", foo, METH_VARARGS, "What my method does"},
    {NULL, NULL, 0, NULL}
};
</snippet></ROW><ROW><id>3951457</id><snippet>Py_InitModule("modulename", MyMethods);
</snippet></ROW><ROW><id>3951616</id><snippet>PATH</snippet></ROW><ROW><id>3951649</id><snippet>fabric.contrib.files</snippet></ROW><ROW><id>3951813</id><snippet>walk</snippet></ROW><ROW><id>3951813</id><snippet>os</snippet></ROW><ROW><id>3951813</id><snippet>this_stye_of_function_naming()</snippet></ROW><ROW><id>3951813</id><snippet>if __name__ == '__main__': ...</snippet></ROW><ROW><id>3951850</id><snippet>obj = MyClass()
try:
    func = getattr(obj, "dostuff")
    func()
except AttributeError:
    print "dostuff not found"
</snippet></ROW><ROW><id>3951940</id><snippet>easy_install autumn</snippet></ROW><ROW><id>3951940</id><snippet>easy_install pip</snippet></ROW><ROW><id>3951940</id><snippet>pip install cheetah</snippet></ROW><ROW><id>3951982</id><snippet>date = re.compile(r"\d{1,2}([/.-])\d{1,2}\1\d{2}")
</snippet></ROW><ROW><id>3951982</id><snippet>\1</snippet></ROW><ROW><id>3951982</id><snippet>re.compile(r"(\d{1,2})([/.-])(\d{1,2})\2(\d{2})")
</snippet></ROW><ROW><id>3952148</id><snippet>&gt;&gt;&gt; l = "big long list of space separated words"
&gt;&gt;&gt; re.split(r'[ ,|;"]+', l)
['big', 'long', 'list', 'of', 'space', 'separated', 'words']
</snippet></ROW><ROW><id>3952364</id><snippet>class DNAFeature(Range):

    def __init__(self, start, end):
        self.setStart(start)
        self.setEnd(end)
        self.strand = None
        self.sequencename = None

    def setStrand(self, s):
        self.strand = s

    def getStrand(self):
        if self.sequenceName == 'plus':
            return 1
        elif self.sequenceName == 'minus':
            return -1
        else:
            return 0

    def setSequenceName(self, s):
        self.sequencename = s

    def getSequenceName(self, s):
        return self.sequenceName
</snippet></ROW><ROW><id>3952550</id><snippet>args</snippet></ROW><ROW><id>3952550</id><snippet>cursor.execute(sql,args)
</snippet></ROW><ROW><id>3952550</id><snippet>cursor.execute('INSERT INTO foo VALUES (?, ?)', ("It's okay", "No escaping necessary")
</snippet></ROW><ROW><id>3952570</id><snippet>help()</snippet></ROW><ROW><id>3952570</id><snippet>To get a list of available modules, keywords, or topics, type "modules",
"keywords", or "topics".  Each module also comes with a one-line summary
of what it does; to list the modules whose summaries contain a given word
such as "spam", type "modules spam".                                     

help&gt; modules 
</snippet></ROW><ROW><id>3953245</id><snippet>print</snippet></ROW><ROW><id>3953245</id><snippet>"hello alice!!!"</snippet></ROW><ROW><id>3953245</id><snippet>hello</snippet></ROW><ROW><id>3953245</id><snippet>hello</snippet></ROW><ROW><id>3953245</id><snippet>hello</snippet></ROW><ROW><id>3953245</id><snippet>return</snippet></ROW><ROW><id>3953245</id><snippet>None</snippet></ROW><ROW><id>3953245</id><snippet>print</snippet></ROW><ROW><id>3953245</id><snippet>main</snippet></ROW><ROW><id>3953245</id><snippet>None</snippet></ROW><ROW><id>3953249</id><snippet>import re

for s in reversed(re.findall('abcd.', 'abcd1_abcd2')):
    print s
</snippet></ROW><ROW><id>3953348</id><snippet>socket.connect</snippet></ROW><ROW><id>3953348</id><snippet>inet.py</snippet></ROW><ROW><id>3953348</id><snippet>scanner.py</snippet></ROW><ROW><id>3953412</id><snippet>def needs_privilege(privilege, project=None):
    """Check whether the logged-in user is authorised based on the
    given privilege

    @type privilege: Privilege object, id, or str
    @param privilege: The requested privilege"""

    def validate(func, self, *args, **kwargs):
        """Validator of needs_privillige"""
        try: check(self.user, privilege, project)
        except AccessDenied:
            return abort(status_code=401)
        else:
            return func(self, *args, **kwargs)
    validate.privelege = privelege
    return decorator(validate)
</snippet></ROW><ROW><id>3953412</id><snippet>def needs_privilege(privilege, project=None):
    def validate(func):
        def new_func(self, *args, **kwargs):
            try: 
                check(self.user, privilege, project)
            except AccessDenied:
                return abort(status_code=401)
            else:
                return func(self, *args, **kwargs)
        new_func.privilege = privilege
        return new_func
    return validate
</snippet></ROW><ROW><id>3953869</id><snippet>ftp://examples.oreilly.com/pub/examples/9780735615366/
</snippet></ROW><ROW><id>3953939</id><snippet>.first</snippet></ROW><ROW><id>3953939</id><snippet>.last</snippet></ROW><ROW><id>3953939</id><snippet>list</snippet></ROW><ROW><id>3953939</id><snippet>.first</snippet></ROW><ROW><id>3953939</id><snippet>[0]</snippet></ROW><ROW><id>3953939</id><snippet>.last</snippet></ROW><ROW><id>3953939</id><snippet>[-1]</snippet></ROW><ROW><id>3953939</id><snippet>slice</snippet></ROW><ROW><id>3953939</id><snippet>Sequence</snippet></ROW><ROW><id>3953939</id><snippet>from collections import Sequence

class SlicedList(Sequence):
    def __init__(self, iterable, size):
        self.seq = list(iterable)
        self.slices = [slice(i,i+size) for i in range(0,len(self.seq), size)]

    def __contains__(self, item):
        # checks if a item is in this sequence
        return item in self.seq

    def __iter__(self):
        """ iterates over all slices """
        return (self.seq[slice] for slice in self.slices)

    def __len__(self):
        """ implements len( .. ) """
        return len(self.slices)

    def __getitem__(self, n):
        # two forms of getitem ..
        if isinstance(n, slice):
            # implements sliced[a:b]
            return [self.seq[x] for x in self.slices[n]]
        else:
            # implements sliced[a]
            return self.seq[self.slices[n]]

s = SlicedList(range(100), 5)

# length
print len(s) # 20

#iteration
print list(s) # [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], ... , [95, 96, 97, 98, 99]]
# explicit iteration:
it = iter(s)
print next(it) # [0, 1, 2, 3, 4]

# we can slice it too
print s[0], s[-1] # [0, 1, 2, 3, 4] [95, 96, 97, 98, 99]
# get the first two
print s[0:2] # [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]
# every other item
print s[::2] # [[0, 1, 2, 3, 4], [10, 11, 12, 13, 14], [20, 21, 22, 23, 24], ... ]
</snippet></ROW><ROW><id>3953939</id><snippet>.start</snippet></ROW><ROW><id>3953939</id><snippet>[0]</snippet></ROW><ROW><id>3953939</id><snippet>class Navigator(object):    
    def __init__(self, seq):
        self.c = 0
        self.seq = seq

    def next(self):
        self.c +=1
        return self.seq[self.c]

    def prev(self):
        self.c -=1
        return self.seq[self.c]

    def start(self):
        self.c = 0
        return self.seq[self.c]

    def end(self):
        self.c = len(self.seq)-1
        return self.seq[self.c]

n = Navigator(SlicedList(range(100), 5))

print n.start(), n.next(), n.prev(), n.end()
</snippet></ROW><ROW><id>3954192</id><snippet>import struct

data = "45 00 00 47 73 88 40 00 40 06 a2 c4 83 9f 0e 85 83 9f 0e a1"

def carry_around_add(a, b):
    c = a + b
    return (c &amp; 0xffff) + (c &gt;&gt; 16)

def checksum(msg):
    s = 0
    for i in range(0, len(msg), 2):
        w = ord(msg[i]) + (ord(msg[i+1]) &lt;&lt; 8)
        s = carry_around_add(s, w)
    return ~s &amp; 0xffff

data = data.split()
data = map(lambda x: int(x,16), data)
data = struct.pack("%dB" % len(data), *data)

print ' '.join('%02X' % ord(x) for x in data)
print "Checksum: 0x%04x" % checksum(data)
</snippet></ROW><ROW><id>3954192</id><snippet>45 00 00 47 73 88 40 00 40 06 A2 C4 83 9F 0E 85 83 9F 0E A1
Checksum: 0x0000
</snippet></ROW><ROW><id>3954334</id><snippet>import random
b = list(a)
random.shuffle(b)
</snippet></ROW><ROW><id>3954393</id><snippet>test = test.strip("\n")
</snippet></ROW><ROW><id>3954393</id><snippet>strip()</snippet></ROW><ROW><id>3954523</id><snippet>&lt;directory&gt;</snippet></ROW><ROW><id>3954523</id><snippet>&lt;location&gt;</snippet></ROW><ROW><id>3954523</id><snippet>&lt;Location "/legacy"&gt;
    SetHandler None
&lt;/Location&gt;
</snippet></ROW><ROW><id>3954543</id><snippet>bg='#FF0000'

and not bg=#FF0000
</snippet></ROW><ROW><id>3954578</id><snippet>heapq</snippet></ROW><ROW><id>3954578</id><snippet>list.sort</snippet></ROW><ROW><id>3954578</id><snippet>__cmp__()</snippet></ROW><ROW><id>3954578</id><snippet>def __cmp__(self, other):
    return cmp(self.intAttribute, other.intAttribute)
</snippet></ROW><ROW><id>3954578</id><snippet>def __lt__(self, other):
    return self.intAttribute &lt; other.intAttribute
</snippet></ROW><ROW><id>3954590</id><snippet>var_list</snippet></ROW><ROW><id>3954590</id><snippet>itertools.islice</snippet></ROW><ROW><id>3954590</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; infgen = itertools.cycle([1,4,9])
&gt;&gt;&gt; a,b,c,d = itertools.islice(infgen, 4)
&gt;&gt;&gt; a,b,c,d
(1, 4, 9, 1)
</snippet></ROW><ROW><id>3954590</id><snippet>&gt;&gt;&gt; lst = [0]*20
&gt;&gt;&gt; lst[2:10:2] = itertools.islice(infgen, 4)
&gt;&gt;&gt; lst
[0, 0, 4, 0, 9, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>3954617</id><snippet>clib = ctypes.cdll.LoadLibrary('some.so')
c_foo = clib.c_foo
c_foo.restype = ctypes.py_object
</snippet></ROW><ROW><id>3954788</id><snippet>class GenoModel(DNAFeature):

    def __init__(self, start, end):
        self.setStart(start)
        self.setEnd(end)
        self.strand = None
        self.sequencename = None
        self.exons = []
        self.translStart = None
        self.translStop = None
        self.displayId = None

    def getFeats(self):
        self.exons.sort(cmp=self.start)
        return self.exons

    def addFeat(self, f):

        if type(f) == DNAFeature:
            self.exons.append(f)
        else:
            raise TypeError("Cannot add feature as it is not of type DNAFeature")

    def setTranslStart(self, i):

        if type(i) != int:
            raise TypeError("Cannot set translStart as it is not of type int")
        elif i &lt; 0:
            raise ValueError("Cannot set tanslStart to a negative int")
        else:
            self.translStart = i

    def getTranslStart(self):
        return self.translStart

    def setTranslStop(self, i):

        if type(i) != int:
            raise TypeError("Cannot set translStop as it is not of type int")
        elif i &lt;= 0:
            raise ValueError("Cannot set tanslStop to anything less than 1")
        else:
            self.translStop = i

    def getTranslStop(self):
        return self.translStop

    def setDisplayId(self, s):

        if type(s) != str:
            raise TypeError("Cannot set desiplayId as it is not of type string")
        else:
            self.displayId = s

    def getDisplayId(self):
        return self.displayId
</snippet></ROW><ROW><id>3954918</id><snippet>def whatYouWantToMeasure():
    pass

if __name__=='__main__':
    from timeit import Timer
    t = Timer("whatYouWantToMeasure()", "from __main__ import test")
    print t.timeit(number=1)
</snippet></ROW><ROW><id>3955193</id><snippet>install.packages("raster",repos="http://r-forge.r-project.org")
require(raster)
</snippet></ROW><ROW><id>3955193</id><snippet>#from file
r &lt;- raster(system.file("external/test.grd", package="raster"))
logo &lt;- raster(system.file("external/rlogo.grd", package="raster"), values=TRUE) 
plot(logo)
</snippet></ROW><ROW><id>3955193</id><snippet>?raster # and go to index of the package for an overview of all the options for image analysis.
</snippet></ROW><ROW><id>3955199</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack("&gt;h",'\x41\x42')
(16706,)
&gt;&gt;&gt; struct.unpack("&gt;h",'\x41\x42')[0]
16706
</snippet></ROW><ROW><id>3955292</id><snippet>import cPickle

def readBed(filepath):
    with open(filepath, 'r') as f:
        data = cPickle.load(f)
        return data

def writeBed(models, filepath):
    with open(filepath, 'w') as f:
        cPickle.dump(models, f)
</snippet></ROW><ROW><id>3955374</id><snippet>br.response()</snippet></ROW><ROW><id>3955374</id><snippet>&gt;&gt;&gt; r = browser.open("http://google.com")
&gt;&gt;&gt; r
&lt;response_seek_wrapper at 0x9bb116c whose wrapped object = &lt;closeable_response at 0x9bb426c whose fp = &lt;socket._fileobject object at 0x9ba306c&gt;&gt;&gt;
&gt;&gt;&gt; r.info().headers
# see the response headers
</snippet></ROW><ROW><id>3955374</id><snippet>&gt;&gt;&gt; browser.open("http://google.com")
&gt;&gt;&gt; browser.response()
&lt;response_seek_wrapper at 0x9c229cc whose wrapped object = &lt;closeable_response at 0x9bb426c whose fp = &lt;socket._fileobject object at 0x9ba306c&gt;&gt;&gt;
&gt;&gt;&gt; browser.response().info().headers
# see the response headers
</snippet></ROW><ROW><id>3955630</id><snippet>bar.py</snippet></ROW><ROW><id>3955630</id><snippet>joined</snippet></ROW><ROW><id>3955630</id><snippet>joined</snippet></ROW><ROW><id>3955630</id><snippet>pybash.sh</snippet></ROW><ROW><id>3955630</id><snippet>#!/bin/bash

declare -a list1
declare -a list2

list1=("Hello" "there" "honey")
list2=("More" "strings" "here")

declare -a joined

joined=($(./pytest.py ${list1[@]} ${list2[@]}))
echo ${joined[@]}
</snippet></ROW><ROW><id>3955630</id><snippet>pytest.py</snippet></ROW><ROW><id>3955630</id><snippet>#!/usr/bin/python

import sys

for i in sys.argv:
    print "hi"
</snippet></ROW><ROW><id>3956026</id><snippet>urllib.request</snippet></ROW><ROW><id>3956026</id><snippet>python --version</snippet></ROW><ROW><id>3956026</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>3956026</id><snippet>python3</snippet></ROW><ROW><id>3956026</id><snippet>python3.1</snippet></ROW><ROW><id>3956026</id><snippet>export PATH=$PATH:/Library/Frameworks/Python.framework/Versions/3.1/bin</snippet></ROW><ROW><id>3956026</id><snippet>python</snippet></ROW><ROW><id>3956038</id><snippet>team</snippet></ROW><ROW><id>3956038</id><snippet>user</snippet></ROW><ROW><id>3956038</id><snippet>user</snippet></ROW><ROW><id>3956038</id><snippet>team</snippet></ROW><ROW><id>3956038</id><snippet>from module import member</snippet></ROW><ROW><id>3956038</id><snippet>team</snippet></ROW><ROW><id>3956038</id><snippet>user</snippet></ROW><ROW><id>3956038</id><snippet>user</snippet></ROW><ROW><id>3956038</id><snippet>team</snippet></ROW><ROW><id>3956038</id><snippet>team</snippet></ROW><ROW><id>3956038</id><snippet>team.py</snippet></ROW><ROW><id>3956038</id><snippet>user.py</snippet></ROW><ROW><id>3956038</id><snippet>import test.teams

class User:
    def setTeam(self, t):
        if isinstance(t, test.teams.Team):
            self.team = t
</snippet></ROW><ROW><id>3956038</id><snippet>import test.users

class Team:
    def setLeader(self, u):
        if isinstance(u, test.users.User):
            self.leader = u
</snippet></ROW><ROW><id>3956038</id><snippet>from test import teams</snippet></ROW><ROW><id>3956038</id><snippet>teams.Team</snippet></ROW><ROW><id>3956038</id><snippet>test</snippet></ROW><ROW><id>3956038</id><snippet>Team</snippet></ROW><ROW><id>3956038</id><snippet>User</snippet></ROW><ROW><id>3956038</id><snippet>isinstance</snippet></ROW><ROW><id>3956038</id><snippet>set</snippet></ROW><ROW><id>3956038</id><snippet>@property</snippet></ROW><ROW><id>3956188</id><snippet>''.join(func(c) for s in somelist for c in s)
</snippet></ROW><ROW><id>3956223</id><snippet>from collections import Counter
a = [10, 10, 10, 20, 20, 20, 30]
c = Counter(a)
# Counter({10: 3, 20: 3, 30: 1})
</snippet></ROW><ROW><id>3956223</id><snippet>dict((str(k), v) for k, v in c.iteritems())
</snippet></ROW><ROW><id>3956223</id><snippet>from collections import defaultdict
def count(it):
    d = defaultdict(int)
    for j in it:
        d[j] += 1
    return d
</snippet></ROW><ROW><id>3956290</id><snippet>try {

    // do stuff ...

} catch (Exception $e) {

    print($e-&gt;getMessage());

}
</snippet></ROW><ROW><id>3956414</id><snippet>browser.select_form(nr=0)</snippet></ROW><ROW><id>3956414</id><snippet>req.select_form(nr=0)</snippet></ROW><ROW><id>3956771</id><snippet>(posX - delayed_posX)/t</snippet></ROW><ROW><id>3956771</id><snippet>(posY-delayed_posY)/t</snippet></ROW><ROW><id>3956771</id><snippet>t</snippet></ROW><ROW><id>3956771</id><snippet>time.sleep</snippet></ROW><ROW><id>3956812</id><snippet>template.render(**parameters)
</snippet></ROW><ROW><id>3956993</id><snippet>txn.execute("... %s, %s ..." % ("xxx", "yyy"))</snippet></ROW><ROW><id>3956993</id><snippet>txn.execute("... %s, %s ...", ("xxx", "yyy"))</snippet></ROW><ROW><id>3956993</id><snippet>?</snippet></ROW><ROW><id>3956993</id><snippet>:1, :2, :3</snippet></ROW><ROW><id>3956993</id><snippet>:foo:, :bar:, :baz:</snippet></ROW><ROW><id>3957370</id><snippet>(?(id/name)yes-pattern|no-pattern)</snippet></ROW><ROW><id>3957370</id><snippet>r'(?P&lt;prefix&gt;A)?(?P&lt;key&gt;\S+)(?(prefix)|B)'
</snippet></ROW><ROW><id>3957370</id><snippet>&gt;&gt;&gt;re.sub(r'(?P&lt;prefix&gt;A)?(?P&lt;key&gt;\S+)(?(prefix)|B)','\g&lt;key&gt;',"Aanything")
</snippet></ROW><ROW><id>3957370</id><snippet>&gt;&gt;&gt;re.sub(r'(?P&lt;prefix&gt;A)?(?P&lt;key&gt;\S+)(?(prefix)|B)','\g&lt;key&gt;',"anythingB")
</snippet></ROW><ROW><id>3957370</id><snippet>AanythingB</snippet></ROW><ROW><id>3957370</id><snippet>anythingB</snippet></ROW><ROW><id>3957370</id><snippet>&gt;&gt;&gt;re.sub(r'(?P&lt;prefix&gt;A)?(?P&lt;key&gt;\S+)(?(prefix)|B)','\g&lt;key&gt;',"AanythingB")
</snippet></ROW><ROW><id>3957420</id><snippet>tee</snippet></ROW><ROW><id>3957420</id><snippet>copy</snippet></ROW><ROW><id>3957420</id><snippet>import copy, itertools
it = [1,2,3,4]
a, b = itertools.tee(it)
c = copy.copy(a)
</snippet></ROW><ROW><id>3957420</id><snippet>a.__copy__()</snippet></ROW><ROW><id>3957420</id><snippet>tee</snippet></ROW><ROW><id>3957420</id><snippet>a = [1,2,3,4]
b, c = itertools.tee(a)
next(b)
</snippet></ROW><ROW><id>3957420</id><snippet>b</snippet></ROW><ROW><id>3957420</id><snippet>c</snippet></ROW><ROW><id>3957420</id><snippet>1</snippet></ROW><ROW><id>3957420</id><snippet>c</snippet></ROW><ROW><id>3957745</id><snippet>chmod +x filename
</snippet></ROW><ROW><id>3957745</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3957745</id><snippet>./myprogram.py
</snippet></ROW><ROW><id>3957752</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>3957752</id><snippet>os.path.join(os.path.dirname(__file__), 'content_includes', pageName + '.inc')</snippet></ROW><ROW><id>3957908</id><snippet>key.get_contents_as_string()</snippet></ROW><ROW><id>3957912</id><snippet>cPickle.dump</snippet></ROW><ROW><id>3957912</id><snippet>cPickle.dumps</snippet></ROW><ROW><id>3957912</id><snippet>cPickle.Pickler.__doc__</snippet></ROW><ROW><id>3957979</id><snippet>currentCount &gt;= n*0.95</snippet></ROW><ROW><id>3957979</id><snippet>currentCount = 0
currentValue = lst[0]
for val in lst:
   if val == currentValue:
      currentCount += 1
   else:
      currentCount -= 1

   if currentCount == 0:
      currentValue = val
      currentCount = 1
</snippet></ROW><ROW><id>3958178</id><snippet>"yyyy"</snippet></ROW><ROW><id>3958178</id><snippet>'yyyy'</snippet></ROW><ROW><id>3958275</id><snippet>a[j]</snippet></ROW><ROW><id>3958275</id><snippet>a[j]</snippet></ROW><ROW><id>3958275</id><snippet>a[j]</snippet></ROW><ROW><id>3958275</id><snippet>f[n]</snippet></ROW><ROW><id>3958275</id><snippet>from __future__ import division
def f(n):
  v = n // 5
  q = v // 20
  r = v % 20
  return sum(binomial(q+5-j, 5) * a[r+20*j] for j in range(5))
</snippet></ROW><ROW><id>3958275</id><snippet>binomial</snippet></ROW><ROW><id>3958281</id><snippet>for term in terms.all()</snippet></ROW><ROW><id>3958281</id><snippet>all</snippet></ROW><ROW><id>3958281</id><snippet>permalink</snippet></ROW><ROW><id>3958281</id><snippet>all</snippet></ROW><ROW><id>3958281</id><snippet>for term in terms:</snippet></ROW><ROW><id>3958790</id><snippet>mysqlimport [options] db_name textfile1 [textfile2 ...]
</snippet></ROW><ROW><id>3959113</id><snippet>&gt;&gt; oWinning = {
 1: Square('X'),
 3: Square('O'), 4: Square('X'),
 6: Square('O'), 8: Square('X'),
}
&gt;&gt; nb = Board(oWinning)
&gt;&gt; nb.complete
True
&gt;&gt; nb.tied
True
</snippet></ROW><ROW><id>3959113</id><snippet>def available_combos(self, player):
    return self.available_moves + self.get_squares(player)

@property
def complete(self):
    for player in ('X', 'O'):
        for combo in self.winning_combos:
            combo_available = True
            for pos in combo:
                if not pos in self.available_combos(player):
                   combo_available = False
            if combo_available:
                return self.winner is not None
    return True
</snippet></ROW><ROW><id>3959113</id><snippet>&gt;&gt;&gt; nb.minimax(nb, 'O')
-1
&gt;&gt;&gt; nb.minimax(nb, 'X')
1
</snippet></ROW><ROW><id>3959385</id><snippet>import urllib2, BeautifulSoup

query = 'http://myexample.file.com/file.xml'
f = urllib2.urlopen(query)
content = f.read()
print len(content)
soup = BeautifulSoup.BeautifulStoneSoup(content)
</snippet></ROW><ROW><id>3959492</id><snippet>bytes</snippet></ROW><ROW><id>3959492</id><snippet>bytearray</snippet></ROW><ROW><id>3959492</id><snippet>&gt;&gt;&gt; your_data = b'\x00\x12abc'
&gt;&gt;&gt; b = bytearray(your_data)
&gt;&gt;&gt; b[0]
0
&gt;&gt;&gt; b[1]
18
</snippet></ROW><ROW><id>3959492</id><snippet>ord</snippet></ROW><ROW><id>3959492</id><snippet>&gt;&gt;&gt; ord(your_data[1])
18
</snippet></ROW><ROW><id>3959492</id><snippet>struct</snippet></ROW><ROW><id>3960267</id><snippet>FilePager</snippet></ROW><ROW><id>3960267</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>3960267</id><snippet>twisted.internet.threads.blockingCallFromThread</snippet></ROW><ROW><id>3960267</id><snippet>callFromThread</snippet></ROW><ROW><id>3960502</id><snippet>% sudo apt-get install python-dev
</snippet></ROW><ROW><id>3960502</id><snippet>% pip install MySQL-python
</snippet></ROW><ROW><id>3960603</id><snippet>f1=open("first.txt","a")
f2=open("second.txt","a")
for line in open("file"):
    s=line.split("=",1)
    f1.write(s[0]+"\n")
    f2.write(s[-1])
f1.close()
f2.close()
</snippet></ROW><ROW><id>3960623</id><snippet>    cta_form = cta_form_class(request.POST,  error_class='error')
</snippet></ROW><ROW><id>3960623</id><snippet>    cta_form = cta_form_class(request.POST,  error_class=['error'])
</snippet></ROW><ROW><id>3960623</id><snippet>    import forms 
    [...]
    cta_form = cta_form_class(request.POST,  error_class=forms.ValidationError("error"))
</snippet></ROW><ROW><id>3960623</id><snippet>    cta_form = cta_form_class(request.POST,  error_class=forms.ValidationError)
</snippet></ROW><ROW><id>3960896</id><snippet>setup</snippet></ROW><ROW><id>3960896</id><snippet>t = Timer(foo.runAlgorithm)
</snippet></ROW><ROW><id>3960896</id><snippet>functools.partial</snippet></ROW><ROW><id>3960896</id><snippet>class C:
    def printargs(self, a, b):
        print a, b

from functools import partial
foo = C()
t = Timer(partial(foo.printargs, 1, 2))
</snippet></ROW><ROW><id>3960933</id><snippet>net time \\&lt;remote-ip address&gt;</snippet></ROW><ROW><id>3960933</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(r"net time \\172.21.5.135")
Current time at \\172.21.5.135 is 10/18/2010 12:32 PM

The command completed successfully.

0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3960976</id><snippet>__name__</snippet></ROW><ROW><id>3960976</id><snippet>"__main__"</snippet></ROW><ROW><id>3960976</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>3961058</id><snippet>def someFunc(*args)
    for x in args
        print x
</snippet></ROW><ROW><id>3961058</id><snippet>def someFunc(myList = [], *args)
    for x in myList:
        print x
</snippet></ROW><ROW><id>3961058</id><snippet>items = [1,2,3,4,5]

someFunc(items)
</snippet></ROW><ROW><id>3961058</id><snippet>def someFunc(arg1, arg2, arg3, *args, **kwargs)
    for x in args
        print x
</snippet></ROW><ROW><id>3961095</id><snippet>c:\python\scripts\easy_install.exe</snippet></ROW><ROW><id>3961095</id><snippet>easy_install</snippet></ROW><ROW><id>3961095</id><snippet>scripts</snippet></ROW><ROW><id>3961095</id><snippet>easy_install</snippet></ROW><ROW><id>3961121</id><snippet>None</snippet></ROW><ROW><id>3961121</id><snippet>True</snippet></ROW><ROW><id>3961121</id><snippet>False</snippet></ROW><ROW><id>3961121</id><snippet>None</snippet></ROW><ROW><id>3961121</id><snippet>def sleep_in(weekday, vacation):
    return (not weekday or vacation)
</snippet></ROW><ROW><id>3961374</id><snippet>lookup = 'the dog barked'

with open(filename) as myFile:
    for num, line in enumerate(myFile, 1):
        if lookup in line:
            print 'found at line:', num
</snippet></ROW><ROW><id>3961569</id><snippet>obj1 = obj2.reference

if not obj1:
    # Referenced entity was deleted.
</snippet></ROW><ROW><id>3961569</id><snippet>a = A()
a.put()

b = B();
b.a_reference = a.key()

b.put()

orginial_key = b.a_reference.get_value_for_datastore()
</snippet></ROW><ROW><id>3961585</id><snippet>pygtk</snippet></ROW><ROW><id>3961585</id><snippet>python-gobject</snippet></ROW><ROW><id>3961585</id><snippet>gtk</snippet></ROW><ROW><id>3961585</id><snippet>python-gtk2</snippet></ROW><ROW><id>3961585</id><snippet>pygtk</snippet></ROW><ROW><id>3961585</id><snippet>pygtk.require</snippet></ROW><ROW><id>3961585</id><snippet>import pygtk
pygtk.require('2.0')
</snippet></ROW><ROW><id>3961585</id><snippet>gtk</snippet></ROW><ROW><id>3961739</id><snippet>import time
time.ctime() # 'Mon Oct 18 13:35:29 2010'
time.strftime('%l:%M%p %Z on %b %d, %Y') # ' 1:36PM EDT on Oct 18, 2010'
time.strftime('%l:%M%p %z on %b %d, %Y') # ' 1:36PM EST on Oct 18, 2010'
</snippet></ROW><ROW><id>3962377</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
import urllib2

class MainWin:

    def destroy(self, widget, data=None):
        print "destroy signal occurred"
        gtk.main_quit()

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)
        self.image=gtk.Image()
        response=urllib2.urlopen(
            'http://www.dailygalaxy.com/photos/uncategorized/2007/05/05/planet_x.jpg')
        loader=gtk.gdk.PixbufLoader()
        loader.write(response.read())
        loader.close()        
        self.image.set_from_pixbuf(loader.get_pixbuf())
        # This does the same thing, but by saving to a file
        # fname='/tmp/planet_x.jpg'
        # with open(fname,'w') as f:
        #     f.write(response.read())
        # self.image.set_from_file(fname)
        self.window.add(self.image)
        self.image.show()
        self.window.show()

    def main(self):
        gtk.main()

if __name__ == "__main__":
    MainWin().main()
</snippet></ROW><ROW><id>3962414</id><snippet>from lib2to3.refactor import RefactoringTool, get_fixers_from_package
"""assume `files` to a be a list of all filenames you want to convert"""
r = RefactoringTool(get_fixers_from_package('lib2to3.fixes'))
r.refactor(files, write=True)
</snippet></ROW><ROW><id>3962455</id><snippet>logging.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>3962726</id><snippet>frm.pack_forget()</snippet></ROW><ROW><id>3962726</id><snippet>frm.grid_forget()</snippet></ROW><ROW><id>3962726</id><snippet>frm.destroy()</snippet></ROW><ROW><id>3962824</id><snippet>&gt;&gt;&gt; words = ('hello', 'good\-bye', 'red', 'blue')
&gt;&gt;&gt; pattern = re.compile('(' + '|'.join(words) + ')', re.IGNORECASE)
&gt;&gt;&gt; sentence = 'SAY HeLLo TO reD, good-bye to Blue.'
&gt;&gt;&gt; print pattern.findall(sentence)
['HeLLo', 'reD', 'good-bye', 'Blue']
</snippet></ROW><ROW><id>3962880</id><snippet>        glRotatef(45,1,0,0) # rotate 45 deg about x axis (thru the world origin)
</snippet></ROW><ROW><id>3962943</id><snippet>for word in file('myfile.txt').read().split():
    if 'x' in word and 'z' in word:
        print word
</snippet></ROW><ROW><id>3963170</id><snippet>elif choice in ("m", "M"):
</snippet></ROW><ROW><id>3963170</id><snippet>elif choice in "mM":                       # false positive if choice == ''
</snippet></ROW><ROW><id>3963170</id><snippet>elif choice == 'm' or choice == 'M':
</snippet></ROW><ROW><id>3963170</id><snippet>elif choice.lower() == 'm':
</snippet></ROW><ROW><id>3963170</id><snippet>'m'</snippet></ROW><ROW><id>3963170</id><snippet>timeit</snippet></ROW><ROW><id>3963193</id><snippet>SO_RECVBUF</snippet></ROW><ROW><id>3963193</id><snippet>netstat -s</snippet></ROW><ROW><id>3963327</id><snippet>askForm = $('askForm');
</snippet></ROW><ROW><id>3963327</id><snippet>var askForm = $('askForm');
</snippet></ROW><ROW><id>3963363</id><snippet>cursor=100</snippet></ROW><ROW><id>3963363</id><snippet>self.slider.set(100)</snippet></ROW><ROW><id>3963562</id><snippet>class Thing(db.Model):
  ...

class User(db.Model):
  things = db.ListProperty(db.Key)
  ...
</snippet></ROW><ROW><id>3963562</id><snippet>user = User.get_or_insert(my_facebook_id)

thing = Thing()
thing.put()

user.things.append(thing.key())
user.put()
</snippet></ROW><ROW><id>3963562</id><snippet>friends = User.get_by_key_name(friend_ids)
thing_keys = []

for friend in friends:
  thing_keys.extend(friend.things)

things = db.get(thing_keys)
</snippet></ROW><ROW><id>3963929</id><snippet>i</snippet></ROW><ROW><id>3963929</id><snippet>&gt;&gt;&gt; k = []
&gt;&gt;&gt; for i in range(5):
...     k.append(lambda: i)
&gt;&gt;&gt; k[0]()
4
&gt;&gt;&gt; [f() for f in k]
[4, 4, 4, 4, 4]
</snippet></ROW><ROW><id>3964140</id><snippet>compiler.parse</snippet></ROW><ROW><id>3964140</id><snippet>compile</snippet></ROW><ROW><id>3964140</id><snippet>eval</snippet></ROW><ROW><id>3964140</id><snippet>exec</snippet></ROW><ROW><id>3964140</id><snippet>compile</snippet></ROW><ROW><id>3964140</id><snippet>compiler.parse</snippet></ROW><ROW><id>3964243</id><snippet>from google.appengine.api import users
from google.appengine.api.namespace_manager import set_namespace

class ClientClass(webapp.RequestHandler):
  def get(self):
    # For this example let's assume the user_id is your unique id.
    # You could just as easily use a parameter you are passed.
    user = users.get_current_user()
    if user:
       # If there is a user, use their queue.  Otherwise the global queue.
       set_namespace(user.user_id())

    item = QueueItem.pop()
    self.response.out.write(str(item))

    QueueItem.push('The next task.')
</snippet></ROW><ROW><id>3964285</id><snippet>import binascii
filename = 'test.dat'
with open(filename, 'rb') as f:
    content = f.read()
print(binascii.hexlify(content))
</snippet></ROW><ROW><id>3964360</id><snippet>foo/
    foo/
        __main__.py
        ...
    scripts/
        foo
</snippet></ROW><ROW><id>3964360</id><snippet>scripts/foo</snippet></ROW><ROW><id>3964360</id><snippet>#!/bin/sh
exec python foo "$@"
</snippet></ROW><ROW><id>3964360</id><snippet>python path/to/foo</snippet></ROW><ROW><id>3964471</id><snippet>import win32file
import win32api
win32file.MoveFileEx("/path/to/lockedfile.ext", None ,
                 win32file.MOVEFILE_DELAY_UNTIL_REBOOT)
</snippet></ROW><ROW><id>3964644</id><snippet>photos = json.loads(parsed_photos[0])
</snippet></ROW><ROW><id>3964644</id><snippet>eval</snippet></ROW><ROW><id>3964691</id><snippet>glob</snippet></ROW><ROW><id>3964691</id><snippet>import glob
import os
os.chdir("/mydir")
for files in glob.glob("*.txt"):
    print files
</snippet></ROW><ROW><id>3964691</id><snippet>os.listdir</snippet></ROW><ROW><id>3964691</id><snippet>import os
for files in os.listdir("/mydir"):
    if files.endswith(".txt"):
        print files
</snippet></ROW><ROW><id>3964691</id><snippet>import os
for root, dirs, files in os.walk("/mydir"):
    for file in files:
        if file.endswith(".txt"):
             print os.path.join(root, file)
</snippet></ROW><ROW><id>3964914</id><snippet>__getstate__</snippet></ROW><ROW><id>3964914</id><snippet>__setstate__</snippet></ROW><ROW><id>3964914</id><snippet>dict</snippet></ROW><ROW><id>3964914</id><snippet>__getstate__</snippet></ROW><ROW><id>3964914</id><snippet>__setstate__</snippet></ROW><ROW><id>3964914</id><snippet>__getstate__</snippet></ROW><ROW><id>3964914</id><snippet>dict</snippet></ROW><ROW><id>3964914</id><snippet>import pickle

class Example:
    def __init__(self):
        self.list1 = [1]
        self.list2 = [2]

    def __getstate__(self):
        return {'list1': self.list1, 'list2': self.list2}

    def __setstate__(self, state):
        self.list1 = state['list1']
        self.list2 = state['list2']

ex = Example()
s = pickle.dumps(ex)
ex2 = pickle.loads(s)
print ex.list1, ex.list2
</snippet></ROW><ROW><id>3964954</id><snippet>octave-3.2.3:1&gt; A=1/sqrt(3)
   A =  0.57735
octave-3.2.3:2&gt; K=1/sqrt(3)/(sqrt(3)-1)
   K =  0.78868
octave-3.2.3:3&gt; W = [A A A; A 1-K -K; A -K 1-K]
   W =

     0.57735   0.57735   0.57735
     0.57735   0.21132  -0.78868
     0.57735  -0.78868   0.21132
</snippet></ROW><ROW><id>3964975</id><snippet>l = [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,2,2]
answer = []
for key, iter in itertools.groupby(l):
    answer.append((key, len(list(iter))))

# answer is [(0, 6), (1, 6), (0, 4), (2, 3)]
</snippet></ROW><ROW><id>3964975</id><snippet>def length(l):
    if hasattr(l, '__len__'):
        return len(l)
    else:
        i = 0
        for _ in l:
            i += 1
        return i

l = [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,2,2]
answer = []
for key, iter in itertools.groupby(l):
    answer.append((key, length(iter)))

# answer is [(0, 6), (1, 6), (0, 4), (2, 3)]
</snippet></ROW><ROW><id>3964980</id><snippet>temp=board</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>temp[i][j]</snippet></ROW><ROW><id>3964980</id><snippet>board[i][j]</snippet></ROW><ROW><id>3964980</id><snippet>import copy
temp=copy.deepcopy(board)
</snippet></ROW><ROW><id>3964980</id><snippet>temp=board[:]</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>In [158]: board=[[1,2],[3,4]]    
In [159]: temp=board[:]    
</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>In [161]: temp[1][0]=100    
In [162]: temp
Out[162]: [[1, 2], [100, 4]]    
In [163]: board
Out[163]: [[1, 2], [100, 4]]
</snippet></ROW><ROW><id>3964980</id><snippet>id</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>In [172]: id(temp)
Out[172]: 176446508

In [173]: id(board)
Out[173]: 178068780   # The ids don't match
</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>In [174]: id(temp[1])
Out[174]: 178827948

In [175]: id(board[1])
Out[175]: 178827948    # The ids are the same
</snippet></ROW><ROW><id>3964980</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>3964980</id><snippet>temp</snippet></ROW><ROW><id>3964980</id><snippet>board</snippet></ROW><ROW><id>3964980</id><snippet>In [164]: import copy    
In [165]: board=[[1,2],[3,4]]    
In [166]: temp=copy.deepcopy(board)    
In [167]: temp[1][0]=100    
In [168]: temp
Out[168]: [[1, 2], [100, 4]]    
In [169]: board
Out[169]: [[1, 2], [3, 4]]
</snippet></ROW><ROW><id>3965052</id><snippet>saveimage</snippet></ROW><ROW><id>3965052</id><snippet>import sympy
x, y, z = sympy.symbols('xyz')
p = sympy.Plot(x * y ** 3 - y * x ** 3)
p.saveimage('/tmp/plot.png', format='png')
</snippet></ROW><ROW><id>3965058</id><snippet>file</snippet></ROW><ROW><id>3965129</id><snippet>if val is not None:
    # ...
</snippet></ROW><ROW><id>3965129</id><snippet>None</snippet></ROW><ROW><id>3965129</id><snippet>is</snippet></ROW><ROW><id>3965129</id><snippet>None</snippet></ROW><ROW><id>3965129</id><snippet>is</snippet></ROW><ROW><id>3965129</id><snippet>if not (val is None):
    # ...
</snippet></ROW><ROW><id>3965193</id><snippet>name</snippet></ROW><ROW><id>3965193</id><snippet>SELECT DISTINCT
       x.id,
       x.name 
  FROM main_table x
  JOIN ANOTHER_TABLE y ON y.name = x.name
                      AND y.attribute IN ('foo', 'bar', 'baz')
</snippet></ROW><ROW><id>3965193</id><snippet>ANOTHER_TABLE</snippet></ROW><ROW><id>3965193</id><snippet>MAIN_TABLE</snippet></ROW><ROW><id>3965193</id><snippet>SELECT x.id,
       x.name 
  FROM main_table x
 WHERE EXISTS(SELECT NULL
                FROM ANOTHER_TABLE y 
               WHERE y.name = x.name
                 AND y.attribute IN ('foo', 'bar', 'baz'))
</snippet></ROW><ROW><id>3965448</id><snippet>C = self.matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x - self.carCenterX   , y - self.carCenterY,   z - self.carCenterZ, 1)
</snippet></ROW><ROW><id>3965448</id><snippet>C = self.matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -x   , -y,   -z, 1)
</snippet></ROW><ROW><id>3965448</id><snippet>x - self.carCenterX</snippet></ROW><ROW><id>3965448</id><snippet>-(x,y,z) = (-x,-y,-z)</snippet></ROW><ROW><id>3965515</id><snippet>import numpy as np
from scipy.optimize import leastsq

def f(var,xs):
    return var[0]*np.exp(-var[1]*xs)+var[2]

def func(var, xs, ys):
    return f(var,xs) - ys

def dfunc(var,xs,ys):
    v = np.exp(-var[1]*xs)
    return [v,-var[0]*xs*v,np.ones(len(xs))]

xs = np.linspace(0,4,50)
ys = f([2.5,1.3,0.5],xs)
yn = ys + 0.2*np.random.normal(size=len(xs))
fit = leastsq(func,[10,10,10],args=(xs,yn),Dfun=dfunc,col_deriv=1)
</snippet></ROW><ROW><id>3965515</id><snippet>col_deriv=0</snippet></ROW><ROW><id>3965584</id><snippet>list[0] = 1323L
list[1] = 123123L
list[2] = 4444L
list[3] = 12312312L
</snippet></ROW><ROW><id>3965584</id><snippet>list[0]</snippet></ROW><ROW><id>3965584</id><snippet>list[2]</snippet></ROW><ROW><id>3965906</id><snippet>&gt;&gt;&gt; s = "AbcD"
&gt;&gt;&gt; s.lower()
'abcd'
</snippet></ROW><ROW><id>3966225</id><snippet>&gt;&gt;&gt; [x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; def foo(): print 'foo'
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; [foo() for x in range(10)]
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
[None, None, None, None, None, None, None, None, None, None]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3966225</id><snippet>&gt;&gt;&gt; results = ( foo() for _ in xrange(10) )
&gt;&gt;&gt; results
&lt;generator object &lt;genexpr&gt; at 0x10041f960&gt;
&gt;&gt;&gt; list(results)
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
[None, None, None, None, None, None, None, None, None, None]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3966491</id><snippet>x.tk
</snippet></ROW><ROW><id>3966491</id><snippet>x = ....
</snippet></ROW><ROW><id>3966941</id><snippet>shutil.copytree</snippet></ROW><ROW><id>3966941</id><snippet>def copytree(src, dst, symlinks=False, ignore=None):
    """Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -&gt; ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    """
    names = os.listdir(src)
    if ignore is not None:
        ignored_names = ignore(src, names)
    else:
        ignored_names = set()

    os.makedirs(dst)
    errors = []
    for name in names:
        if name in ignored_names:
            continue
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks, ignore)
            else:
                copy2(srcname, dstname)
            # XXX What about devices, sockets etc.?
        except (IOError, os.error), why:
            errors.append((srcname, dstname, str(why)))
        # catch the Error from the recursive copytree so that we can
        # continue with other files
        except Error, err:
            errors.extend(err.args[0])
    try:
        copystat(src, dst)
    except OSError, why:
        if WindowsError is not None and isinstance(why, WindowsError):
            # Copying file access times may fail on Windows
            pass
        else:
            errors.extend((src, dst, str(why)))
    if errors:
        raise Error, errors
</snippet></ROW><ROW><id>3967229</id><snippet>{1: 'one', 2: 'two'}
</snippet></ROW><ROW><id>3967229</id><snippet>int key, value;

if (s &gt;&gt; c &amp;&amp; c == '{')
    while (s &gt;&gt; key)
    {
        if (s &gt;&gt; c &amp;&amp; c == ':' &amp;&amp; s &gt;&gt; value)
            my_map[key] = value;
        if (s &gt;&gt; c &amp;&amp; c != ',')
            break;
    }
</snippet></ROW><ROW><id>3967260</id><snippet>_</snippet></ROW><ROW><id>3967945</id><snippet>from PIL import Image</snippet></ROW><ROW><id>3967945</id><snippet>import Image</snippet></ROW><ROW><id>3968166</id><snippet>import sys
print(sys.argv)
</snippet></ROW><ROW><id>3968166</id><snippet>import subprocess
import shlex

cmd="test.py 'some string' 'some string2' '' "
proc=subprocess.Popen(shlex.split(cmd))
</snippet></ROW><ROW><id>3968166</id><snippet>['test.py', 'some string', 'some string2', '']
</snippet></ROW><ROW><id>3968517</id><snippet>import Tkinter as tk

#create window &amp; frames
class App:
    def __init__(self):
        self.root = tk.Tk()
        self._job = None
        self.slider = tk.Scale(self.root, from_=0, to=256, 
                               orient="horizontal", 
                               command=self.updateValue)
        self.slider.pack()
        self.root.mainloop()

    def updateValue(self, event):
        if self._job:
            self.root.after_cancel(self._job)
        self._job = self.root.after(500, self._do_something)

    def _do_something(self):
        self._job = None
        print "new value:", self.slider.get()

app=App()
</snippet></ROW><ROW><id>3968554</id><snippet>cdef extern from "math.h":
    double sin(double)

def pysin(x):
    return sin(x)
</snippet></ROW><ROW><id>3968554</id><snippet>pysin</snippet></ROW><ROW><id>3968555</id><snippet>raw()</snippet></ROW><ROW><id>3968555</id><snippet>data = {
    'posts': Post._meta.db_table,
    'relations': TermRelation._meta.db_table,
    'terms': Term._meta.db_table,
    'tag_id': tag.id
}

posts = Post.objects.raw('SELECT %(posts)s.* FROM %(posts)s JOIN %(relations)s ON %(posts)s.id = %(relations)s.object_id JOIN %(terms)s ON %(relations)s.term_id = %(terms)s.id WHERE %(terms)s.id = %(tag_id)s ORDER BY %(posts)s.published DESC' % data)
</snippet></ROW><ROW><id>3968555</id><snippet>@staticmethod
def get_objects_by_term_id(model=None, taxonomy=None, term_id=None, order_by='NULL'):
    data = {
        'objects': model._meta.db_table,
        'content_type': ContentType.objects.get_for_model(model).id,
        'relations': TermRelation._meta.db_table,
        'terms': Term._meta.db_table,
        'term_id': term_id,
        'order_by': ' ORDER BY %s ' % order_by
    }

    return model.objects.raw('SELECT %(objects)s.* FROM %(objects)s JOIN %(relations)s ON %(objects)s.id = %(relations)s.object_id AND %(relations)s.content_type_id = %(content_type)s JOIN %(terms)s ON %(relations)s.term_id = %(terms)s.id WHERE %(terms)s.id = %(term_id)s %(order_by)s' % data)
</snippet></ROW><ROW><id>3969308</id><snippet>import lxml.etree as le
with open('data.xml') as f:
    doc=le.parse( f )
patientID="SKU55527"
studyInstanceUID="25.2.9.2.1107.5.1.4.49339.30000007010207164403100000013"
xpath='''\
    /PatientsTree
        /Patient[@PatientID="{p}"]
            /Study[@StudyInstanceUID="{s}"]
                /Series'''.format(p=patientID,s=studyInstanceUID)
seriesInstanceUID=doc.xpath(xpath)
for node in seriesInstanceUID:
    print(node.attrib)
    # {'SeriesInstanceUID': '2.16.840.1.113669.1919.1198835358'}
</snippet></ROW><ROW><id>3969343</id><snippet>rpt.ParameterFields.GetItemByName("RowDate").AddCurrentValue(datetime.datetime.strptime('2010-03-19', "%Y-%m-%d").date())
</snippet></ROW><ROW><id>3969655</id><snippet>re.subn</snippet></ROW><ROW><id>3969655</id><snippet>text2, numReplacements = re.subn(pattern, repl, text1)
if numReplacements:
    # did match
else:
    # did not match
</snippet></ROW><ROW><id>3969700</id><snippet>&lt;td&gt;{{ p.status_set.select_related }}&lt;/td&gt;
</snippet></ROW><ROW><id>3969700</id><snippet>select_related</snippet></ROW><ROW><id>3969700</id><snippet>p.status_set.all</snippet></ROW><ROW><id>3969772</id><snippet>handler = SysLogHandler(address='/dev/log')
</snippet></ROW><ROW><id>3969772</id><snippet>import logging
import logging.handlers

my_logger = logging.getLogger('MyLogger')
my_logger.setLevel(logging.DEBUG)

handler = logging.handlers.SysLogHandler(address = '/dev/log')

my_logger.addHandler(handler)

my_logger.debug('this is debug')
my_logger.critical('this is critical')
</snippet></ROW><ROW><id>3969809</id><snippet>import urllib.request
with urllib.request.urlopen("http://www.python.org") as url:
    s = url.read()
#I'm guessing this would output the html source code?
print(s)
</snippet></ROW><ROW><id>3969904</id><snippet>from subprocess import  Popen, PIPE

def svn_co(url):
    return run_program('svn', 'co', url)

def run_program(*args):
    popen_obj = Popen(args, stderr=PIPE)
    _, errors = popen_obj.communicate()
    if popen_obj.returncode:
        print errors

# This will get all the files in myproject's tagged version
# named tagname into the current directory
svn_co('http://svn.myserver.net/myproject/tags/tagname')
</snippet></ROW><ROW><id>3969953</id><snippet>from google.appengine.ext.webapp import Request
from google.appengine.ext.webapp import Response
from StringIO import StringIO
form = 'msg=hello'
handler.response = Response()
handler.request = Request({
    'REQUEST_METHOD': 'POST',
    'PATH_INFO': '/',
    'wsgi.input': StringIO(form),
    'CONTENT_LENGTH': len(form),
    'SERVER_NAME': 'hi',
    'SERVER_PORT': '80',
    'wsgi.url_scheme': 'http',
})
handler.post()
</snippet></ROW><ROW><id>3969953</id><snippet>&gt;&gt;&gt; form = {
...     'first_name': 'Per',
...     'last_name': 'Thulin',
... }
&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; urlencode(form)
'first_name=Per&amp;last_name=Thulin'
</snippet></ROW><ROW><id>3969953</id><snippet>&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; form_inputs = [
...     {'someparam': 'aaa'},
...     {'someparam': 'bbb'},
...     {'someparam': 'ccc'},
... ]
&gt;&gt;&gt; '&amp;'.join([urlencode(d) for d in form_inputs])
'someparam=aaa&amp;someparam=bbb&amp;someparam=ccc'
</snippet></ROW><ROW><id>3970090</id><snippet>def addButton_click(event):
    print 'button clicked'
self.addButton.bind("&lt;Button-1&gt;", addButton_click)
</snippet></ROW><ROW><id>3970090</id><snippet>class X:
    def addButton_click(self, event):
        print 'button clicked'
...
inst = X()
self.addButton.bind("&lt;Button-1&gt;", inst.addButton_click)
</snippet></ROW><ROW><id>3970640</id><snippet>watch "tac file.log"
</snippet></ROW><ROW><id>3970640</id><snippet>watch -n 0.3 "tac file.log"
</snippet></ROW><ROW><id>3970751</id><snippet>&gt;&gt;&gt; class s:
    courses = ["CourseX", "CourseX", "CourseY"]
    times   = ["01:00",  "02:00", "01:00"]
    abandoned = [False, False, True]
    horses = ["X1", "X2", "X3", "X4", "X5", "X6", "Y1", "Y2", "Y3", "Y4"]
    positions = ["1","2","3","1","2","3","","","",""]

&gt;&gt;&gt; def races(courses, times, abandoned, horses, positions):
    z = zip(horses, positions)
    for course, time, stopped in zip(courses, times, abandoned):
        for _ in range(4 if stopped else 3):
            horse, pos = next(z)
            yield course, time, stopped, horse, pos


&gt;&gt;&gt; print(*races(s.courses, s.times, s.abandoned, s.horses, s.positions), sep='\n')
('CourseX', '01:00', False, 'X1', '1')
('CourseX', '01:00', False, 'X2', '2')
('CourseX', '01:00', False, 'X3', '3')
('CourseX', '02:00', False, 'X4', '1')
('CourseX', '02:00', False, 'X5', '2')
('CourseX', '02:00', False, 'X6', '3')
('CourseY', '01:00', True, 'Y1', '')
('CourseY', '01:00', True, 'Y2', '')
('CourseY', '01:00', True, 'Y3', '')
('CourseY', '01:00', True, 'Y4', '')
</snippet></ROW><ROW><id>3970786</id><snippet>re.search(r"(?&lt;![x)])\)+", text)

&gt;&gt;&gt; re.search(r"(?&lt;![x)])\)+", " hello)))))")
&lt;_sre.SRE_Match object at 0xb75c0c98&gt;
&gt;&gt;&gt; _.group()
')))))'
&gt;&gt;&gt; re.search(r"(?&lt;![x)])\)+", " hellox)))))")
&gt;&gt;&gt;
</snippet></ROW><ROW><id>3970870</id><snippet>initialTimeMain = 0

if __name__ == '__main__':
    from EvolutionaryAlgorithm import EvolutionaryAlgorithm
    evolutionaryAlgorithm= EvolutionaryAlgorithm()
</snippet></ROW><ROW><id>3970870</id><snippet>initialTimeMain</snippet></ROW><ROW><id>3970870</id><snippet>EvolutionaryAlgorithm.py</snippet></ROW><ROW><id>3970870</id><snippet>Main.py</snippet></ROW><ROW><id>3970870</id><snippet>a.py:

globalvar = 1
print(globalvar)             # prints 1
if __name__ == '__main__':
    print(globalvar)         # prints 1

b.py:

import a
print(a.globalvar)           # prints 1
</snippet></ROW><ROW><id>3971100</id><snippet># assuming you have something such as this:
class User(Document):
    email = TextField()

# you can use the .load() method of the User class
users = [User.load(db, uid) for uid in db]

# now you can do this:
for user in users:
    print user.id, user.email  

# but you're using it in flask so, in your view you can send 
# this list of users to your template using something like this:

from flask import render_template
@app.route("/users")
def show_users():
    return render_template('users.html', users=users)
</snippet></ROW><ROW><id>3971100</id><snippet>&lt;select&gt;
{% for user in users %}
    &lt;option value="{{ user.id }}"&gt;{{ user.email }}&lt;/option&gt;
{% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>3971596</id><snippet>brokenlist = sorted(range(1, 44), key=str)
brokenmap = [x[0] for x in sorted(enumerate(sorted(range(1, 44), key=str)), key=lambda x: x[1])]
fixedlist = [brokenlist[x] for x in brokenmap]
</snippet></ROW><ROW><id>3971633</id><snippet>getpixel</snippet></ROW><ROW><id>3971633</id><snippet>getdata</snippet></ROW><ROW><id>3971935</id><snippet>public class Dog {
  protected String whatISay = "Woof!";
  public void speak(){
    System.out.println(whatISay);
  }
}


public class Poodle extends Dog {
  public Poodle(){
    whatISay = "Yap!";
  }
}


public class Main {
  public static void main(String[] args){
    Poodle fluffy = new Poodle();
    fluffy.speak();
    Dog dog = new Dog();
    dog.speak();
  }
}
</snippet></ROW><ROW><id>3971935</id><snippet>Yap!</snippet></ROW><ROW><id>3971935</id><snippet>Woof!</snippet></ROW><ROW><id>3972112</id><snippet>import numpy as np
import random
import itertools
import colorsys
hue, saturation, value = np.arange(0.0,1,0.05), np.arange(0.3,1.01,0.345), np.arange(0.3,1.01,0.345)
rlist= [colorsys.hsv_to_rgb(hue, saturation, value) for hue, saturation, value in
        itertools.product(random.sample(hue,len(hue)), random.sample(saturation, len(saturation)), random.sample(value, len(value)))]
print rlist
</snippet></ROW><ROW><id>3972112</id><snippet># without itertools
import numpy as np
import random
from pprint import pprint
import colorsys
hues, saturations, values = np.arange(0.0,1,0.05), np.arange(0.3,1.01,0.345), np.arange(0.3,1.01,0.345)
rlist= [colorsys.hsv_to_rgb(hue, saturation, value)
        for hue in random.sample(hues,len(hues))
        for saturation in random.sample(saturations, len(saturations))
        for value in random.sample(values, len(values))]
pprint(rlist)
</snippet></ROW><ROW><id>3972112</id><snippet>product = None
from itertools import *
if not product:
    def product(*args, **kwds):
        # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
        # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
        pools = map(tuple, args) * kwds.get('repeat', 1)
        result = [[]]
        for pool in pools:
            result = [x+[y] for x in result for y in pool]
        for prod in result:
            yield tuple(prod)
</snippet></ROW><ROW><id>3972112</id><snippet>import itertools as it
</snippet></ROW><ROW><id>3972112</id><snippet>import it
</snippet></ROW><ROW><id>3972170</id><snippet>import email.utils
map(email.utils.parseaddr, email_list)
</snippet></ROW><ROW><id>3972305</id><snippet>project.status_set</snippet></ROW><ROW><id>3972305</id><snippet>project.status</snippet></ROW><ROW><id>3972426</id><snippet>decorator.decorator</snippet></ROW><ROW><id>3972426</id><snippet>import inspect
import decorator

@decorator.decorator
def decor(my_func,*args,**kw):
    result=my_func(*args,**kw)
    return result

@decor
def my_func(key=1, value=False):
    pass
decorated_argspec = inspect.getargspec(my_func)
print(decorated_argspec)
# ArgSpec(args=['key', 'value'], varargs=None, keywords=None, defaults=(1, False))
</snippet></ROW><ROW><id>3972971</id><snippet>... "2,0":1, "0,1":0, "1,1":1, "1,2":0, "2,0":0  ...
     ^^^                                 ^^^
</snippet></ROW><ROW><id>3972971</id><snippet>trainingSet = {
    "0,0" : 0, "1,0" : 1, "2,0" : 1,
    "0,1" : 0, "1,1" : 1, "2,1" : 0,
    "0,2" : 0, "1,2" : 0, "2,2" : 1
}
</snippet></ROW><ROW><id>3972978</id><snippet>for i in ('apple', 'banana', 'carrot'):
    fruitdict[i] = locals()[i]
</snippet></ROW><ROW><id>3973287</id><snippet>find_all_paths()</snippet></ROW><ROW><id>3973287</id><snippet>def adjlist_find_paths(a, n, m, path=[]):
  "Find paths from node index n to m using adjacency list a."
  path = path + [n]
  if n == m:
    return [path]
  paths = []
  for child in a[n]:
    if child not in path:
      child_paths = adjlist_find_paths(a, child, m, path)
      for child_path in child_paths:
        paths.append(child_path)
  return paths

def paths_from_to(graph, source, dest):
  "Find paths in graph from vertex source to vertex dest."
  a = graph.get_adjlist()
  n = source.index
  m = dest.index
  return adjlist_find_paths(a, n, m)
</snippet></ROW><ROW><id>3973323</id><snippet>easy_thumbnails</snippet></ROW><ROW><id>3973323</id><snippet>render_to_string</snippet></ROW><ROW><id>3973487</id><snippet> class User(models.Model):
     name = models.CharField(max_length=50)

 class Countries(models.Model):
     user = models.ForeignKey(User)
</snippet></ROW><ROW><id>3973487</id><snippet>from django.contrib.auth.models import User

class Countries(models.Model):
    user = models.ForeignKey(User)
</snippet></ROW><ROW><id>3973611</id><snippet>inspect</snippet></ROW><ROW><id>3973611</id><snippet>def my_dec(fn):
    print dir(fn) # Has "func_code" and "func_name"
    return fn

class A(object):
    @my_dec
    def test(self):
        pass

print dir(A.test) # Has "im_class" and "im_self"
</snippet></ROW><ROW><id>3973893</id><snippet>Linguas = ["en","pt","fr","es"]

if Setting["Language"] in Linguas:
    f.m_radioBox3.SetSelection(Linguas.index(Setting["Language"]))
</snippet></ROW><ROW><id>3973893</id><snippet>Linguas = {"en":0,"pt":1,"fr":2,"es":3}

if Setting["Language"] in Linguas:
    f.m_radioBox3.SetSelection(Linguas[Setting["Language"]])
</snippet></ROW><ROW><id>3973906</id><snippet># Create a symbol-to-value table.
SY2VA = {'0': 0,
         '1': 1,
         '2': 2,
         '3': 3,
         '4': 4,
         '5': 5,
         '6': 6,
         '7': 7,
         '8': 8,
         '9': 9,
         'A': 10,
         'B': 11,
         'C': 12,
         'D': 13,
         'E': 14,
         'F': 15,
         'G': 16,
         'H': 17,
         'I': 18,
         'J': 19,
         'K': 20,
         'L': 21,
         'M': 22,
         'N': 23,
         'O': 24,
         'P': 25,
         'Q': 26,
         'R': 27,
         'S': 28,
         'T': 29,
         'U': 30,
         'V': 31,
         'W': 32,
         'X': 33,
         'Y': 34,
         'Z': 35,
         'a': 36,
         'b': 37,
         'c': 38,
         'd': 39,
         'e': 40,
         'f': 41,
         'g': 42,
         'h': 43,
         'i': 44,
         'j': 45,
         'k': 46,
         'l': 47,
         'm': 48,
         'n': 49,
         'o': 50,
         'p': 51,
         'q': 52,
         'r': 53,
         's': 54,
         't': 55,
         'u': 56,
         'v': 57,
         'w': 58,
         'x': 59,
         'y': 60,
         'z': 61,
         '!': 62,
         '"': 63,
         '#': 64,
         '$': 65,
         '%': 66,
         '&amp;': 67,
         "'": 68,
         '(': 69,
         ')': 70,
         '*': 71,
         '+': 72,
         ',': 73,
         '-': 74,
         '.': 75,
         '/': 76,
         ':': 77,
         ';': 78,
         '&lt;': 79,
         '=': 80,
         '&gt;': 81,
         '?': 82,
         '@': 83,
         '[': 84,
         '\\': 85,
         ']': 86,
         '^': 87,
         '_': 88,
         '`': 89,
         '{': 90,
         '|': 91,
         '}': 92,
         '~': 93}

# Take a string and base to convert to.
# Allocate space to store your number.
# For each character in your string:
#     Ensure character is in your table.
#     Find the value of your character.
#     Ensure value is within your base.
#     Self-multiply your number with the base.
#     Self-add your number with the digit's value.
# Return the number.

def str2int(string, base):
    integer = 0
    for character in string:
        assert character in SY2VA, 'Found unknown character!'
        value = SY2VA[character]
        assert value &lt; base, 'Found digit outside base!'
        integer *= base
        integer += value
    return integer
</snippet></ROW><ROW><id>3973906</id><snippet># Create a value-to-symbol table.
VA2SY = dict(map(reversed, SY2VA.items()))

# Take a integer and base to convert to.
# Create an array to store the digits in.
# While the integer is not zero:
#     Divide the integer by the base to:
#         (1) Find the "last" digit in your number (value).
#         (2) Store remaining number not "chopped" (integer).
#     Save the digit in your storage array.
# Return your joined digits after putting them in the right order.

def int2str(integer, base):
    array = []
    while integer:
        integer, value = divmod(integer, base)
        array.append(VA2SY[value])
    return ''.join(reversed(array))
</snippet></ROW><ROW><id>3973906</id><snippet>innitvar = raw_input("Please enter a number: ")
basevar = int(raw_input("Please enter the base that your number is in: "))
convertvar = int(raw_input("Please enter the base that you would like to convert to: "))

# Create a symbol-to-value table.
SY2VA = {'0': 0,
         '1': 1,
         '2': 2,
         '3': 3,
         '4': 4,
         '5': 5,
         '6': 6,
         '7': 7,
         '8': 8,
         '9': 9,
         'A': 10,
         'B': 11,
         'C': 12,
         'D': 13,
         'E': 14,
         'F': 15,
         'G': 16,
         'H': 17,
         'I': 18,
         'J': 19,
         'K': 20,
         'L': 21,
         'M': 22,
         'N': 23,
         'O': 24,
         'P': 25,
         'Q': 26,
         'R': 27,
         'S': 28,
         'T': 29,
         'U': 30,
         'V': 31,
         'W': 32,
         'X': 33,
         'Y': 34,
         'Z': 35,
         'a': 36,
         'b': 37,
         'c': 38,
         'd': 39,
         'e': 40,
         'f': 41,
         'g': 42,
         'h': 43,
         'i': 44,
         'j': 45,
         'k': 46,
         'l': 47,
         'm': 48,
         'n': 49,
         'o': 50,
         'p': 51,
         'q': 52,
         'r': 53,
         's': 54,
         't': 55,
         'u': 56,
         'v': 57,
         'w': 58,
         'x': 59,
         'y': 60,
         'z': 61,
         '!': 62,
         '"': 63,
         '#': 64,
         '$': 65,
         '%': 66,
         '&amp;': 67,
         "'": 68,
         '(': 69,
         ')': 70,
         '*': 71,
         '+': 72,
         ',': 73,
         '-': 74,
         '.': 75,
         '/': 76,
         ':': 77,
         ';': 78,
         '&lt;': 79,
         '=': 80,
         '&gt;': 81,
         '?': 82,
         '@': 83,
         '[': 84,
         '\\': 85,
         ']': 86,
         '^': 87,
         '_': 88,
         '`': 89,
         '{': 90,
         '|': 91,
         '}': 92,
         '~': 93}

# Take a string and base to convert to.
# Allocate space to store your number.
# For each character in your string:
#     Ensure character is in your table.
#     Find the value of your character.
#     Ensure value is within your base.
#     Self-multiply your number with the base.
#     Self-add your number with the digit's value.
# Return the number.

integer = 0
for character in innitvar:
    assert character in SY2VA, 'Found unknown character!'
    value = SY2VA[character]
    assert value &lt; basevar, 'Found digit outside base!'
    integer *= basevar
    integer += value

# Create a value-to-symbol table.
VA2SY = dict(map(reversed, SY2VA.items()))

# Take a integer and base to convert to.
# Create an array to store the digits in.
# While the integer is not zero:
#     Divide the integer by the base to:
#         (1) Find the "last" digit in your number (value).
#         (2) Store remaining number not "chopped" (integer).
#     Save the digit in your storage array.
# Return your joined digits after putting them in the right order.

array = []
while integer:
    integer, value = divmod(integer, convertvar)
    array.append(VA2SY[value])
answer = ''.join(reversed(array))

# Display the results of the calculations.
print answer
</snippet></ROW><ROW><id>3974065</id><snippet># list all values for a key
try:
    count = 0
    while 1:
        name, value, type = _winreg.EnumValue(t, count)
        print repr(name),
        count = count + 1
except WindowsError:
    pass
</snippet></ROW><ROW><id>3974112</id><snippet>from lxml import etree
xml_str = "&lt;parent&gt;&lt;child&gt;text&lt;/child&gt;&lt;child&gt;other text&lt;/child&gt;&lt;/parent&gt;"
root = etree.fromstring(xml_str)
print etree.tostring(root, pretty_print=True)
</snippet></ROW><ROW><id>3974112</id><snippet>&lt;parent&gt;
  &lt;child&gt;text&lt;/child&gt;
  &lt;child&gt;other text&lt;/child&gt;
&lt;/parent&gt;
</snippet></ROW><ROW><id>3974208</id><snippet>BEGIN{
   id="628251 173511 223401 138276 673278 698450 629138 449040 901575"
   m=split(id,ID," ")
   for(i=1;i&lt;ARGC;i++){
       while( (getline line&lt;ARGV[i] ) &gt; 0 ){
           n=split(line,LINE," ")
           for ( o=1; o&lt;=n; o++){
                for(num in ID){
                   if ( num == LINE[o] ){
                     print line
                   }
                }
           }
       }
   }
}
</snippet></ROW><ROW><id>3974208</id><snippet>myscript.awk</snippet></ROW><ROW><id>3974208</id><snippet>#!/bin/bash
ROOT = "/Users/Zero/Documents/MyProgram.app/Contents/TempFiles"
cd $ROOT
awk -f myscript.awk file* #do for files that start with "file"
</snippet></ROW><ROW><id>3974494</id><snippet>skip</snippet></ROW><ROW><id>3974494</id><snippet>def split_with_phrases(sentence, phrase_list):
    words = sentence.split(" ")
    phrases = set(tuple(s.split(" ")) for s in phrase_list)
    print phrases
    max_phrase_length = max(len(p) for p in phrases)

    # Find a phrase within words starting at the specified index.  Return the
    # phrase as a tuple, or None if no phrase starts at that index.
    def find_phrase(start_idx):
        # Iterate backwards, so we'll always find longer phrases before shorter ones.
        # Otherwise, if we have a phrase set like "hello world" and "hello world two",
        # we'll never match the longer phrase because we'll always match the shorter
        # one first.
        for phrase_length in xrange(max_phrase_length, 0, -1):
            test_word = tuple(words[idx:idx+phrase_length])
            if test_word in phrases:
                return test_word
        return None

    skip = 0
    for idx in xrange(len(words)):
        if skip:
            # This word was returned as part of a previous phrase; skip it.
            skip -= 1
            continue

        phrase = find_phrase(idx)
        if phrase is not None:
            skip = len(phrase)
            yield " ".join(phrase)
            continue

        yield words[idx]

print [s for s in split_with_phrases('i would like a blood orange',
    ["blood orange", "loan shark"])]
</snippet></ROW><ROW><id>3974543</id><snippet>from lxml import etree

doc = etree.fromstring(xml)

node = doc.find('Number')
print node.text # 0

node = doc.xpath('//ConnectedTerminal/Number')[0]
print node.text # 1
</snippet></ROW><ROW><id>3974603</id><snippet>import math

test=r"dir(math)"

eval(test)
</snippet></ROW><ROW><id>3974603</id><snippet>['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'exp', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'hypot', 'isinf', 'isnan', 'ldexp', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
</snippet></ROW><ROW><id>3974682</id><snippet>PyErr_CheckSignals()</snippet></ROW><ROW><id>3975067</id><snippet>from pyparsing import nestedExpr

text = '(BODYSTRUCTURE ("text" "plain" ("charset" "ISO-8859-1") NIL NIL "quotedprintable" 1207 50 NIL NIL NIL NIL))'

print nestedExpr().parseString(text)
</snippet></ROW><ROW><id>3975067</id><snippet>[['BODYSTRUCTURE', ['"text"', '"plain"', ['"charset"', '"ISO-8859-1"'], 'NIL', 'NIL', '"quoted printable"', '1207', '50', 'NIL', 'NIL', 'NIL', 'NIL']]]
</snippet></ROW><ROW><id>3975067</id><snippet>from pyparsing import (nestedExpr, Literal, Word, alphanums, 
    quotedString, replaceWith, nums, removeQuotes)

NIL = Literal("NIL").setParseAction(replaceWith(None))
integer = Word(nums).setParseAction(lambda t:int(t[0]))
quotedString.setParseAction(removeQuotes)
content = (NIL | integer | Word(alphanums))

print nestedExpr(content=content, ignoreExpr=quotedString).parseString(text)
</snippet></ROW><ROW><id>3975067</id><snippet>[['BODYSTRUCTURE', ['text', 'plain', ['charset', 'ISO-8859-1'], None, None, 'quoted-printable', 1207, 50, None, None, None, None]]]
</snippet></ROW><ROW><id>3975388</id><snippet>&gt;&gt;&gt; a = {1: [1,2,3]}
&gt;&gt;&gt; b = a.copy()
&gt;&gt;&gt; a, b
({1: [1, 2, 3]}, {1: [1, 2, 3]})
&gt;&gt;&gt; a[1].append(4)
&gt;&gt;&gt; a, b
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
</snippet></ROW><ROW><id>3975388</id><snippet>&gt;&gt;&gt; c = copy.deepcopy(a)
&gt;&gt;&gt; a, c
({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})
&gt;&gt;&gt; a[1].append(5)
&gt;&gt;&gt; a, c
({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})
</snippet></ROW><ROW><id>3975388</id><snippet>a = b</snippet></ROW><ROW><id>3975388</id><snippet>a</snippet></ROW><ROW><id>3975388</id><snippet>b</snippet></ROW><ROW><id>3975388</id><snippet>a ---,
     v
     {1: L}
     ^   |
b ---'   '----&gt; [1,2,3]
</snippet></ROW><ROW><id>3975388</id><snippet>a = b.copy()</snippet></ROW><ROW><id>3975388</id><snippet>a</snippet></ROW><ROW><id>3975388</id><snippet>b</snippet></ROW><ROW><id>3975388</id><snippet>a ---&gt; {1: L}
           |             
           &gt;---&gt; [1,2,3]
           |
b ---&gt; {1: M}
</snippet></ROW><ROW><id>3975388</id><snippet>a = copy.deepcopy(b)</snippet></ROW><ROW><id>3975388</id><snippet>a</snippet></ROW><ROW><id>3975388</id><snippet>b</snippet></ROW><ROW><id>3975388</id><snippet>a ---&gt; {1: L}
           ‘-----&gt; [1,2,3]
b ---&gt; {1: M}
           ‘-----&gt; [1,2,3]
</snippet></ROW><ROW><id>3975961</id><snippet>.text_content()</snippet></ROW><ROW><id>3975961</id><snippet>lxml.html.clean</snippet></ROW><ROW><id>3975961</id><snippet>from lxml import html
from lxml.html.clean import clean_html

tree = html.parse('http://www.example.com')
tree = clean_html(tree)

text = tree.getroot().text_content()
</snippet></ROW><ROW><id>3976479</id><snippet>from collections import defaultdict
def counter(STRING):
  h=defaultdict(int)
  for i in STRING:
    if i in "stn":
       h[i]+=1
  return h
for s in ['description','statements']:
    k=counter(s)
    print k + " for " + s
</snippet></ROW><ROW><id>3976765</id><snippet>with open('myfile.csv','wb') as myfile:
    wrtr = csv.writer(myfile, delimiter=',', quotechar='"')
    for row in rows:
        wrtr.writerow([row.field1,row.field2,row.field3])
        myfile.flush() # whenever you want
</snippet></ROW><ROW><id>3976765</id><snippet>myfile = open('myfile.csv','wb')
wrtr = csv.writer(myfile, delimiter=',', quotechar='"')
for row in rows:
    wrtr.writerow([row.field1,row.field2,row.field3])
    myfile.flush() # whenever you want, and/or
myfile.close() # when you're done.
</snippet></ROW><ROW><id>3976816</id><snippet>size_of_filtered_list = sum(1 for item in my_list if item % 2 == 0)
</snippet></ROW><ROW><id>3976845</id><snippet>os.environ</snippet></ROW><ROW><id>3976845</id><snippet>CURRENT_VERSION_ID</snippet></ROW><ROW><id>3976845</id><snippet>version</snippet></ROW><ROW><id>3976845</id><snippet>api_version</snippet></ROW><ROW><id>3976845</id><snippet>version</snippet></ROW><ROW><id>3976845</id><snippet>42.1</snippet></ROW><ROW><id>3976845</id><snippet>api_version</snippet></ROW><ROW><id>3977081</id><snippet>vendor</snippet></ROW><ROW><id>3977081</id><snippet>class Foo(models.Model):
    name = models.CharField(max_length=255)
    vendor = models.CharField(max_length=50)

    def vendor_fedex(self, arg):
        blah blah

    def vendor_ups(self, arg):
        blah blah

    def vendor_usps(self, arg):
        blah blah

    def do_instance_specific_stuff(self, arg):
        fn = getattr(self, "vendor_"+self.vendor, None)
        if not fn:
            raise Exception("Uh-oh, bad vendor")
        fn(arg)
</snippet></ROW><ROW><id>3977081</id><snippet>id</snippet></ROW><ROW><id>3977081</id><snippet>getattr</snippet></ROW><ROW><id>3977194</id><snippet>import sqlitedbx

def main():
    db = sqlitedbx.SqliteDBzz()
    db.connect()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>3977259</id><snippet>QuestionBox = vizinfo.add("") #Add the vizinfo object
#Create an invisible Radio button to be the default selected one, so that one of the visible ones must be chosen by the user
invisibleRadio = QuestionBox.add(viz.RADIO, 0, "")  
invisibleRadio.visible(0) #invisible
</snippet></ROW><ROW><id>3977278</id><snippet>def sorted_paths(filename):
    with open(filename) as f:
       gen = (matches(line) for line in f)
       s = set(match.group(1) for match in gen if match)
    return sorted(s)
</snippet></ROW><ROW><id>3977315</id><snippet>time.time()</snippet></ROW><ROW><id>3977315</id><snippet>import time
endtime = time.time() + 60
while time.time() &lt; endtime:
    # do something
</snippet></ROW><ROW><id>3977315</id><snippet>time.clock()</snippet></ROW><ROW><id>3977446</id><snippet>def debug_info ( self ):
    for ( key, value ) in self.__dict__.items():
        print( key, '=', value )
</snippet></ROW><ROW><id>3977470</id><snippet>struct</snippet></ROW><ROW><id>3977470</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('&lt;HBB', 12345, 97, 66)
'90aB'
</snippet></ROW><ROW><id>3977729</id><snippet>&gt;&gt;&gt; from collections import defaultdict    
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for user, *items in mylist:
    d[user] += items,


&gt;&gt;&gt; d
defaultdict(&lt;class 'list'&gt;, {'user5': [[4, 4]], 'user2': [[34, 45], [56, 56]], 'user3': [[34, 34]], 'user1': [[23, 32], [23, 34], [45, 23]]})
</snippet></ROW><ROW><id>3977797</id><snippet>conn = sqlite3.connect('databaza.db')
c = conn.cursor()
conn.text_factory = str    
data3 = str(input('Please enter name: '))
query = "DELETE FROM Zoznam WHERE Name = '%s';" % data3.strip()
print(query)
mydata = c.execute(query)
</snippet></ROW><ROW><id>3977924</id><snippet>open(filename, 'ab')</snippet></ROW><ROW><id>3977924</id><snippet>import os
my_file = open("data.csv", "ab")
my_file.seek(0, os.SEEK_END)
</snippet></ROW><ROW><id>3977991</id><snippet>file</snippet></ROW><ROW><id>3977991</id><snippet>file = open('C:/Test.txt', 'r')
for line in file.readlines(): print line,
</snippet></ROW><ROW><id>3978057</id><snippet>IRAPIDevice</snippet></ROW><ROW><id>3978057</id><snippet>IRAPISession</snippet></ROW><ROW><id>3978057</id><snippet>IRAPISession::CeCreateFile</snippet></ROW><ROW><id>3978057</id><snippet>CreateFile</snippet></ROW><ROW><id>3978159</id><snippet>aWgt = 0.3
bWgt = 0.7

print (np.where(a1.mask, 0., a1.data * aWgt) +
       np.where(b1.mask, 0., b1.data * bWgt)) / (np.where(a1.mask, 0., aWgt) +
                                                 np.where(b1.mask, 0., bWgt))

# array([ 3.1,  2. ,  5. ,  5.1])
</snippet></ROW><ROW><id>3978159</id><snippet>def weightedAvg(weightedTimeseries):
    sumA = np.sum((np.where(ts.mask, 0., ts.data * weight) for ts, weight in weightedTimeseries), axis=0)
    sumB = np.sum((np.where(ts.mask, 0., weight) for ts, weight in weightedTimeseries), axis=0)
    return np.divide(sumA, sumB)

weightedAvg(((a1, 0.3), (bb, 0.7)))
# array([ 3.1,  2. ,  5. ,  5.1])
</snippet></ROW><ROW><id>3978171</id><snippet>from_float</snippet></ROW><ROW><id>3978171</id><snippet>&gt;&gt;&gt; fractions.Fraction.from_float(1.05204948186e+12)
Fraction(1052049481860, 1)
</snippet></ROW><ROW><id>3978376</id><snippet>EventHandlers</snippet></ROW><ROW><id>3978376</id><snippet>WatchManager</snippet></ROW><ROW><id>3978376</id><snippet>ThreadedNotifier.loop()</snippet></ROW><ROW><id>3978376</id><snippet>threading.current_thread()</snippet></ROW><ROW><id>3978594</id><snippet>&gt;&gt;&gt; s
'10.254.254.28 - - [06/Aug/2007:00:12:20 -0700] "GET /keyser/22300/ HTTP/1.0" 302 528 "-" "Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4"'

&gt;&gt;&gt; s.split("HTTP")[0]
'10.254.254.28 - - [06/Aug/2007:00:12:20 -0700] "GET /keyser/22300/ '

&gt;&gt;&gt; if "puzzle" in s.split("HTTP")[0].split("GET")[-1]:
...   print "found puzzle"
...
</snippet></ROW><ROW><id>3978742</id><snippet>def AddRecordHandler():
        print("added")
def DeleteRecordHandler():
        print("deleted")
def CreateDatabaseHandler():
        print("done")
def FlushToDiskHandler():
        print("i feel flushed")
def SearchHandler():
        print("not found")
def CleanupAndQuit():
        print("byez")

menuchoices = {'a':AddRecordHandler, 'd':DeleteRecordHandler, 'c':CreateDatabaseHandler, 'f':FlushToDiskHandler, 's':SearchHandler, 'q':CleanupAndQuit}
ret = menuchoices[input()]()
if ret is None:
    print("Something went wrong! Call the police!")
menuchoices['q']()
</snippet></ROW><ROW><id>3978761</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>3978761</id><snippet>&lt;b&gt;</snippet></ROW><ROW><id>3978761</id><snippet>import re    
sometext = 'blah blah 1 2 3&lt;b&gt;abcd efg-123&lt;/b&gt;word word2 word3 blah blah'
result = re.findall(
      r'(((?:(?:^|\s)+\w+){3}\s*)'            # Match 3 words before
      r'&lt;b&gt;([^&lt;]*|&lt;[^/]|&lt;/[^b]|&lt;/b[^&gt;])&lt;/b&gt;'  # Match &lt;b&gt;...&lt;/b&gt;
      r'(\s*(?:\w+(?:\s+|$)){3}))', sometext) # Match 3 words after

result == [(' 1 2 3&lt;b&gt;abcd efg-123&lt;/b&gt;word word2 word3 ',
    ' 1 2 3',
    'abcd efg-123',
    'word word2 word3 ')]
</snippet></ROW><ROW><id>3978804</id><snippet>def Addition(a, b):
    return a + b

def Subtraction(a, b):
    return a - b

def Multiplication(a, b):
    return a * b

def Division(a, b):
    return a / b

keepProgramRunning = True

while keepProgramRunning:
    print "Welcome to the Calculator!"
    print "Please choose what you'd like to do:"

    print "0: Addition"
    print "1: Subtraction"
    print "2: Multiplication"
    print "3: Division"    


    #Capture the menu choice.
    choice = raw_input()

    #Capture the numbers you want to work with.
    numberA = raw_input("Enter your first number: ")
    numberB = raw_input("Enter your second number: ")

    if choice == "0":
        print "Your result is:"
        print Addition(numberA, numberB)
    elif choice == "1":
        print "Your result is:"
        print Subtraction(numberA, numberB)
    elif choice == "2":
        print "Your result is:"
        print Multiplication(numberA, numberB)
    elif choice == "3":
        print "Your result is:"
        print Division(numberA, numberB)
    else:
        print "Please choose a valid option."
</snippet></ROW><ROW><id>3978804</id><snippet>def main():
    keepProgramRunning = True

    while keepProgramRunning:
        print "Welcome to the Calculator!"
        print "Please choose what you'd like to do:"

        print "0: Addition"
        print "1: Subtraction"
        print "2: Multiplication"
        print "3: Division"    


        #Capture the menu choice.
        choice = raw_input()

        #Capture the numbers you want to work with.
        numberA = raw_input("Enter your first number: ")
        numberB = raw_input("Enter your second number: ")

        if choice == "0":
            print "Your result is:"
            print Addition(numberA, numberB)
        elif choice == "1":
            print "Your result is:"
            print Subtraction(numberA, numberB)
        elif choice == "2":
            print "Your result is:"
            print Multiplication(numberA, numberB)
        elif choice == "3":
            print "Your result is:"
            print Division(numberA, numberB)
        else:
            print "Please choose a valid option."

def Addition(a, b):
    return a + b

def Subtraction(a, b):
    return a - b

def Multiplication(a, b):
    return a * b

def Division(a, b):
    return a / b

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>3978955</id><snippet>elif choice.lower() == "m":
    break
    loop = 0

elif choice.lower() == "m":
     loop = 0
     break
</snippet></ROW><ROW><id>3978955</id><snippet>loop</snippet></ROW><ROW><id>3979149</id><snippet>1.5, 0.03</snippet></ROW><ROW><id>3979149</id><snippet>def convertStr(s):
    """Convert string to either int or float."""
    try:
        ret = int(s)
    except ValueError:
        #Try float.
        ret = float(s)
    return ret
</snippet></ROW><ROW><id>3979149</id><snippet>division</snippet></ROW><ROW><id>3979149</id><snippet>10/2</snippet></ROW><ROW><id>3979149</id><snippet>2.5</snippet></ROW><ROW><id>3979149</id><snippet>2</snippet></ROW><ROW><id>3979149</id><snippet>from __future__ import division</snippet></ROW><ROW><id>3979149</id><snippet>def division(a, b):
    return float(a) / float(b)
</snippet></ROW><ROW><id>3979396</id><snippet>import os
os.system('example.js arg1 arg2')
</snippet></ROW><ROW><id>3979396</id><snippet>start</snippet></ROW><ROW><id>3979396</id><snippet>os.system('start example.js arg1 arg2') 
</snippet></ROW><ROW><id>3979396</id><snippet>shell=True</snippet></ROW><ROW><id>3979396</id><snippet>from subprocess import Popen
p = Popen('example.js arg1 arg2', shell=True)
# you can also do pass the filename and arguments separately:
# p = Popen(['example.js', 'arg1', 'arg2'], shell=True)
stdoutdata, stderrdata = p.communicate()
</snippet></ROW><ROW><id>3979430</id><snippet>another_func.__doc__ = "My documentation"
</snippet></ROW><ROW><id>3979708</id><snippet>self.wfile</snippet></ROW><ROW><id>3979708</id><snippet>from cStringIO import StringIO

class Page(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        out = StringIO()
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        if self.path == '/':
            out.write("&lt;html&gt;&lt;body&gt;&lt;a href='/run'&gt;Run&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;\n")
        elif self.path == '/run':
            self.proc = MyProc()
            print 'Starting..'
            self.proc.start()
            print 'After start.'
            out.write("&lt;html&gt;&lt;body&gt;&lt;h1&gt;Process started&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n")
        text = out.getvalue()
        self.send_header("Content-Length", str(len(text)))
        self.end_headers()
        self.wfile.write(text)
</snippet></ROW><ROW><id>3979895</id><snippet>d</snippet></ROW><ROW><id>3979895</id><snippet>word</snippet></ROW><ROW><id>3979895</id><snippet>from lxml import etree

tree1 = etree.parse('example1.xml')
tree2 = etree.parse('example2.xml')

print set(tree1.getroot().itertext()) == set(tree2.getroot().itertext())
</snippet></ROW><ROW><id>3979895</id><snippet>set(i for i in tree.getroot().itertext() if i.strip())
</snippet></ROW><ROW><id>3979895</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>3979895</id><snippet>collections.Counter</snippet></ROW><ROW><id>3979895</id><snippet>a</snippet></ROW><ROW><id>3979895</id><snippet>from lxml import etree

tree1 = etree.parse('example1.xml')
tree2 = etree.parse('example2.xml')

set1 = set(etree.tostring(i, method='c14n') for i in tree1.getroot())
set2 = set(etree.tostring(i, method='c14n') for i in tree2.getroot())

print set1 == set2
</snippet></ROW><ROW><id>3979895</id><snippet>method='c14n'</snippet></ROW><ROW><id>3979895</id><snippet>etree.tostring()</snippet></ROW><ROW><id>3979895</id><snippet>c14n()</snippet></ROW><ROW><id>3979895</id><snippet>StringIO()</snippet></ROW><ROW><id>3979919</id><snippet>l=[[name_d, 5], [name_e, 10], [name_a, 5]]
sorted(l,key=lambda x: (x[1]*-1,x[0]))
</snippet></ROW><ROW><id>3980080</id><snippet>import subprocess
f = open(r'c:\temp\temp.txt','w')
subprocess.call(['dir', r'c:\temp'], shell=True, stdout=f)
f.close()
</snippet></ROW><ROW><id>3980277</id><snippet>&gt;&gt;&gt; s = """#commented out block
uncommented block
#   commented block
""".splitlines()
&gt;&gt;&gt; for line in s:
    not line.lstrip().startswith('#')


False
True
False
</snippet></ROW><ROW><id>3980390</id><snippet>class Hello(object):
    def __init__(self):
        self.x = None
        self.y = None
        self.z = None
    def is_all_set(self):
        return all(getattr(self, attr) is not None for attr in self.__dict__)
</snippet></ROW><ROW><id>3980924</id><snippet>from BeautifulSoup import BeautifulSoup

doc = ['&lt;html&gt;&lt;script type="text/javascript"&gt;document.write("Hello World!")',
       '&lt;/script&gt;&lt;head&gt;&lt;title&gt;Page title&lt;/title&gt;&lt;/head&gt;',
       '&lt;body&gt;&lt;p id="firstpara" align="center"&gt;This is paragraph &lt;b&gt;one&lt;/b&gt;.',
       '&lt;p id="secondpara" align="blah"&gt;This is paragraph &lt;b&gt;two&lt;/b&gt;.',
       '&lt;/html&gt;']
soup = BeautifulSoup(''.join(doc))


for tag in soup.findAll('script'):
    # Use extract to remove the tag
    tag.extract()
    # use simple insert
    soup.body.insert(len(soup.body.contents), tag)

print soup.prettify()
</snippet></ROW><ROW><id>3980924</id><snippet>&lt;html&gt;
 &lt;head&gt;
  &lt;title&gt;
   Page title
  &lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
  &lt;p id="firstpara" align="center"&gt;
   This is paragraph
   &lt;b&gt;
    one
   &lt;/b&gt;
   .
  &lt;/p&gt;
  &lt;p id="secondpara" align="blah"&gt;
   This is paragraph
   &lt;b&gt;
    two
   &lt;/b&gt;
   .
  &lt;/p&gt;
  &lt;script type="text/javascript"&gt;
   document.write("Hello World!")
  &lt;/script&gt;
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>3981026</id><snippet>start</snippet></ROW><ROW><id>3981026</id><snippet>end</snippet></ROW><ROW><id>3981026</id><snippet>u = u'áiuê©'
try:
  l = u.encode('latin-1')
  print repr(l)
  l.decode('utf-8')
except UnicodeDecodeError, e:
  print e
  print e.start, e.end
</snippet></ROW><ROW><id>3981079</id><snippet>sys.path.append</snippet></ROW><ROW><id>3981401</id><snippet>execfile()</snippet></ROW><ROW><id>3981696</id><snippet>cProfile.runctx</snippet></ROW><ROW><id>3981696</id><snippet>cProfile.runctx("doProfile()", globals(), locals(), "profile.log")
</snippet></ROW><ROW><id>3981942</id><snippet>http://translate.google.com/translate_t</snippet></ROW><ROW><id>3981942</id><snippet>translatedText</snippet></ROW><ROW><id>3981942</id><snippet>json</snippet></ROW><ROW><id>3981942</id><snippet>ajax.googleapis.com</snippet></ROW><ROW><id>3981942</id><snippet>import urllib2
import urllib
import sys
import json

LANG={
    "arabic":"ar", "bulgarian":"bg", "chinese":"zh-CN",
    "croatian":"hr", "czech":"cs", "danish":"da", "dutch":"nl",
    "english":"en", "finnish":"fi", "french":"fr", "german":"de",
    "greek":"el", "hindi":"hi", "italian":"it", "japanese":"ja",
    "korean":"ko", "norwegian":"no", "polish":"pl", "portugese":"pt",
    "romanian":"ro", "russian":"ru", "spanish":"es", "swedish":"sv" }

def translate(text,lang1,lang2):
    base_url='http://ajax.googleapis.com/ajax/services/language/translate?'    
    langpair='%s|%s'%(LANG.get(lang1.lower(),lang1),
                      LANG.get(lang2.lower(),lang2))
    params=urllib.urlencode( (('v',1.0),
                       ('q',text.encode('utf-8')),
                       ('langpair',langpair),) )
    url=base_url+params
    content=urllib2.urlopen(url).read()
    try: trans_dict=json.loads(content)
    except AttributeError:
        try: trans_dict=json.load(content)    
        except AttributeError: trans_dict=json.read(content)
    return trans_dict['responseData']['translatedText']

print translate("Good morning to you friend!", "English", "German")
print translate("Good morning to you friend!", "English", "Italian")
print translate("Good morning to you friend!", "English", "Spanish")
</snippet></ROW><ROW><id>3981942</id><snippet>Guten Morgen, du Freund!
Buongiorno a te amico!
Buenos días a ti amigo!
</snippet></ROW><ROW><id>3982149</id><snippet>ZipFile.open()</snippet></ROW><ROW><id>3982149</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>3982322</id><snippet>lastItem = box.items.order('-date').get()</snippet></ROW><ROW><id>3982322</id><snippet>lastItem</snippet></ROW><ROW><id>3982322</id><snippet>Box</snippet></ROW><ROW><id>3982322</id><snippet>Box ID</snippet></ROW><ROW><id>3982322</id><snippet>Item</snippet></ROW><ROW><id>3982588</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>3982588</id><snippet>select()</snippet></ROW><ROW><id>3982588</id><snippet>select()</snippet></ROW><ROW><id>3982683</id><snippet>f = open("outputFile","wb")
subprocess.call(argsArray,stdout=f)
</snippet></ROW><ROW><id>3982683</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>3982683</id><snippet>#!/usr/bin/env python

import os
import subprocess

RTMPDUMP="./rtmpdump"
assert os.path.isfile(RTMPDUMP)
command = [RTMPDUMP,'-r','rtmp://oxy.videolectures.net/video/',
        '-y','2007/pascal/bootcamp07_vilanova/keller_mikaela/bootcamp07_keller_bss_01',
        '-a','video','-s',
        'http://media.videolectures.net/jw-player/player.swf',
        '-w','ffa4f0c469cfbe1f449ec42462e8c3ba16600f5a4b311980bb626893ca81f388'
        ,'-x','53910','-o','test.flv']


stdout = open("stdout.txt","wb")
stderr = open("stderr.txt","wb")
subprocess.call(command,stdout=stdout,stderr=stderr)
</snippet></ROW><ROW><id>3983369</id><snippet>&gt;&gt;&gt; file="someJunk20101022.doc"
&gt;&gt;&gt; file[-12:]
'20101022.doc'
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.rename(file, file[-12:]
</snippet></ROW><ROW><id>3983369</id><snippet>file[-12:-3]</snippet></ROW><ROW><id>3983369</id><snippet>time</snippet></ROW><ROW><id>3983369</id><snippet>datetime</snippet></ROW><ROW><id>3983369</id><snippet>import os
import glob
import datetime,time #as required
os.chdir("/mypath")
for files in glob.glob("*.doc"):
    newfilename = files[-12:]
    # here to check date if desired
    try:
       os.rename(files,newfilename)
    except OSError,e:
       print e
    else: print "ok"
</snippet></ROW><ROW><id>3983420</id><snippet>__init__</snippet></ROW><ROW><id>3983420</id><snippet>object.__new__</snippet></ROW><ROW><id>3983420</id><snippet>cls.__call__(*args, **kwargs)</snippet></ROW><ROW><id>3983420</id><snippet>cls(*args, **kwargs)</snippet></ROW><ROW><id>3983420</id><snippet>__new__</snippet></ROW><ROW><id>3983420</id><snippet>__new__</snippet></ROW><ROW><id>3983420</id><snippet>__init__</snippet></ROW><ROW><id>3983420</id><snippet>__call__</snippet></ROW><ROW><id>3983420</id><snippet>super</snippet></ROW><ROW><id>3983420</id><snippet>__new__</snippet></ROW><ROW><id>3983515</id><snippet>RequestContext</snippet></ROW><ROW><id>3983515</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>3983515</id><snippet># The {% csrf_token %} tag requires information from the request object, which is 
# not normally accessible from within the template context. To fix this, 
# a small adjustment needs to be made to the detail view, so that it looks 
# like the following:
#
from django.template import RequestContext
# ...
def detail(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    return render_to_response('polls/detail.html', {'poll': p},
                           context_instance=RequestContext(request))
</snippet></ROW><ROW><id>3983515</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>3984091</id><snippet>xdotool</snippet></ROW><ROW><id>3984091</id><snippet>xdotool getactivewindow</snippet></ROW><ROW><id>3984264</id><snippet>i_file=open("input.csv","r")
o_file=open("output.csv","w")

for line in i_file:
    tokens=line.split(",")
    count=0
    new_line=""
    for element in tokens:
        if count == 3:
            new_line = new_line + '"' + element + '"'
            break
        else:
            new_line = new_line + element + ","
            count=count+1

    o_file.write(new_line + "\n")
    print(line, " -&gt; ", new_line)

i_file.close()
o_file.close()
</snippet></ROW><ROW><id>3984264</id><snippet>with</snippet></ROW><ROW><id>3984264</id><snippet>close()</snippet></ROW><ROW><id>3984264</id><snippet>with open("input.csv","r") as i_file, open("output.csv","w") as o_file:
    for line in i_file:
        tokens = line.split(",", 3)
        if len(tokens) &gt; 3:
            o_file.write(','.join(tokens[0:3]))
            o_file.write('"{0}"'.format(tokens[-1].rstrip('\n')))
</snippet></ROW><ROW><id>3984446</id><snippet>parse_string = ("http://www.google.pl/search?q=%s&amp;restofurl" % 
               '%2C'.join(tag.strip() for tag in tags_list))
</snippet></ROW><ROW><id>3984446</id><snippet>&gt;&gt;&gt; parse_string = ("http://www.google.pl/search?q=%s&amp;restofurl" %
...                '%2C'.join(tag.strip() for tag in tags_list))
&gt;&gt;&gt; parse_string
'http://www.google.pl/search?q=tag1%2Ctag2&amp;restofurl'
</snippet></ROW><ROW><id>3984446</id><snippet>format()</snippet></ROW><ROW><id>3984446</id><snippet>&gt;&gt;&gt; parse_string = "http://www.google.pl/search?q={0}&amp;restofurl".format(
...                '%2C'.join(tag.strip() for tag in tags_list))
&gt;&gt;&gt; parse_string
'http://www.google.pl/search?q=tag1%2Ctag2&amp;restofurl'
</snippet></ROW><ROW><id>3984568</id><snippet>def hit(bx, by, r, px, py, h):
    if by &gt;= py and by &lt;= py + h:
        print "Y satisfied."
        if bx &lt;= px + r:
            print "HIT"
            return True
        print "X not satisfied."
    print "not hit."
    return False
</snippet></ROW><ROW><id>3984591</id><snippet>extern "C" { ... }</snippet></ROW><ROW><id>3984615</id><snippet>^</snippet></ROW><ROW><id>3984615</id><snippet>r = re.compile(r"^\s+", re.MULTILINE)
r.sub("", "a\n b\n c") # "a\nb\nc"

# or without compiling (only possible for Python 2.7+ because the flags option
# didn't exist in earlier versions of re.sub)

re.sub(r"^\s+", "", "a\n b\n c", flags = re.MULTILINE)

# but mind that \s includes newlines:
r.sub("", "a\n\n\n\n b\n c") # "a\nb\nc"
</snippet></ROW><ROW><id>3984615</id><snippet>re.sub(r"(?m)^\s+", "", "a\n b\n c")
</snippet></ROW><ROW><id>3984786</id><snippet>bytes(ar)</snippet></ROW><ROW><id>3984786</id><snippet>ar.tostring()</snippet></ROW><ROW><id>3984786</id><snippet>array.fromstring</snippet></ROW><ROW><id>3984786</id><snippet>.fromstring(...)</snippet></ROW><ROW><id>3984928</id><snippet>split()</snippet></ROW><ROW><id>3984928</id><snippet>f = open('your_file')
for line in f:
    for word in line.split():
        # do something
</snippet></ROW><ROW><id>3984928</id><snippet>f = open('your_file')
for line in f:
    for word in line.split():
        word = word.strip('.,?!')
        # do something
</snippet></ROW><ROW><id>3984960</id><snippet>Message-Id</snippet></ROW><ROW><id>3984960</id><snippet>Message-Id</snippet></ROW><ROW><id>3984960</id><snippet>SEARCH</snippet></ROW><ROW><id>3984960</id><snippet>All Mail</snippet></ROW><ROW><id>3984960</id><snippet>uid</snippet></ROW><ROW><id>3984992</id><snippet># our production setup includes a caching load balancer in front.
# we tell the load balancer to cache for 5 minutes.
# we can use the commented out lines to tell it to not cache,
# which is useful if we're updating.
&lt;FilesMatch "\.(html|js|png|jpg|css)$"&gt;
ExpiresDefault "access plus 5 minutes"
ExpiresActive On
#Header unset cache-control:
#Header append cache-control: "no-cache, must-revalidate"
&lt;/FilesMatch&gt;
</snippet></ROW><ROW><id>3985003</id><snippet>=</snippet></ROW><ROW><id>3985003</id><snippet>the_same_re = re.compile(r'^(\S+)=(\1)$')
</snippet></ROW><ROW><id>3985003</id><snippet>the_same_re = re.compile(r'^(\S+)=(\S+)$')
</snippet></ROW><ROW><id>3985003</id><snippet>^</snippet></ROW><ROW><id>3985003</id><snippet>$</snippet></ROW><ROW><id>3985003</id><snippet>\S+</snippet></ROW><ROW><id>3985003</id><snippet>\1</snippet></ROW><ROW><id>3985003</id><snippet>r</snippet></ROW><ROW><id>3985287</id><snippet>class TransformTable:
    target_dict = {}

    def productid(self, value):
        ...
    def name(self, value):
        validity_check(value)
        self.target_dict['Product'] = value.strip().capitalize()
    def description(self, value):
        ...

    def _default(self, value):
        sys.stderr.write('Unknown key!\n')

    def __call__(self, fieldname, value):
        getattr(self, fieldname, self._default)(value)

transformtable = TransformTable() # create callable instance

transformtable(fieldname, value) # use it
</snippet></ROW><ROW><id>3985476</id><snippet>Samples.objects.filter(when__year = mydate.year, when__month = mydate.month, when__day = mydate.day)
</snippet></ROW><ROW><id>3985481</id><snippet>combobox.SetSelection(0)  # select first item
</snippet></ROW><ROW><id>3985578</id><snippet>None</snippet></ROW><ROW><id>3985578</id><snippet>class Node(object):

    depth = 4

    def __init__(self, parent, contents):
        self.parent = parent
        self.contents = contents
        self.children = []


def create_node(trees, parent, contents):
    """Adds a leaf to a specified node in the set of trees.

    Note that it has to have access to the container that holds all of the trees so
    that it can delete the appropriate parent node and add its children as independent 
    trees. Passing it in seems a little ugly. The container of trees could be a class
    with this as a method or you could use a global list. Or something completely
    different. The important thing is that if you don't delete every reference to the
    old root, you'll leak memory.
    """
    parent.children.append(Node(parent, contents))

    i = 0:
    L = Node.depth - 1
    while i &lt; L:
        parent = parent.parent
        if not parent:
            break
        i += 1
    else:
        for node in parent.children:
            node.parent = None
        trees.extend(parent.children)
        i = trees.find(parent)
        del trees[i]
</snippet></ROW><ROW><id>3985630</id><snippet>import math

def sigmoid(x):
  return 1 / (1 + math.exp(-x))
</snippet></ROW><ROW><id>3985630</id><snippet>&gt;&gt;&gt; sigmoid(0.458)
0.61253961344091512
</snippet></ROW><ROW><id>3985633</id><snippet>--alias</snippet></ROW><ROW><id>3985668</id><snippet>something = {'foo': 'bar',
             'foo2': 'bar2',
             'foo3': 'bar3',
             ...
             'fooN': 'barN'}
</snippet></ROW><ROW><id>3985696</id><snippet>import sys
from pdfminer.pdfparser import PDFParser, PDFDocument
from pdfminer.pdftypes import resolve1

filename = sys.argv[1]
fp = open(filename, 'rb')

parser = PDFParser(fp)
doc = PDFDocument()
parser.set_document(doc)
doc.set_parser(parser)
doc.initialize()

fields = resolve1(doc.catalog['AcroForm'])['Fields']
for i in fields:
    field = resolve1(i)
    name, value = field.get('T'), field.get('V')
    print '{0}: {1}'.format(name, value)
</snippet></ROW><ROW><id>3985696</id><snippet>doc.initialize()</snippet></ROW><ROW><id>3985856</id><snippet>p=""
q=""
for line in open("file"):
    line=line.rstrip()
    if "Work Phone" in line:
       p="|"+p
    if p: print p
    p,q=q,line
print p
print q
</snippet></ROW><ROW><id>3985856</id><snippet>$ python test.py
First Name last name #
secone name
|Address Line 1
Address Line 2
Work Phone:
Home Phone:
Status:
</snippet></ROW><ROW><id>3986239</id><snippet>matrix = [
['56','23','4'],
['45','5','67'],
['1','52','22']
]

list_A = ['0','1','2']
list_B = ['2','0','1']

for x in zip(list_A,list_B):
    a,b=map(int,x)
    print(matrix[a][b])
# 4
# 45
# 52
</snippet></ROW><ROW><id>3986324</id><snippet>{% ifchanged %}</snippet></ROW><ROW><id>3986324</id><snippet>{% for item in items %}
    {% ifchanged item.name.0 %}
        {{ item.name.0 }}
    {% endifchanged %}
{% endfor %}
</snippet></ROW><ROW><id>3986568</id><snippet>old = {change.get(k,k):v for k,v in old.items()}
</snippet></ROW><ROW><id>3986876</id><snippet>import numpy as np
import scipy.ndimage.filters as filters
import scipy.ndimage.morphology as morphology

def detect_local_minima(arr):
    # http://stackoverflow.com/questions/3684484/peak-detection-in-a-2d-array/3689710#3689710
    """
    Takes an array and detects the troughs using the local maximum filter.
    Returns a boolean mask of the troughs (i.e. 1 when
    the pixel's value is the neighborhood maximum, 0 otherwise)
    """
    # define an connected neighborhood
    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.morphology.html#generate_binary_structure
    neighborhood = morphology.generate_binary_structure(len(arr.shape),2)
    # apply the local minimum filter; all locations of minimum value 
    # in their neighborhood are set to 1
    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.filters.html#minimum_filter
    local_min = (filters.minimum_filter(arr, footprint=neighborhood)==arr)
    # local_min is a mask that contains the peaks we are 
    # looking for, but also the background.
    # In order to isolate the peaks we must remove the background from the mask.
    # 
    # we create the mask of the background
    background = (arr==0)
    # 
    # a little technicality: we must erode the background in order to 
    # successfully subtract it from local_min, otherwise a line will 
    # appear along the background border (artifact of the local minimum filter)
    # http://www.scipy.org/doc/api_docs/SciPy.ndimage.morphology.html#binary_erosion
    eroded_background = morphology.binary_erosion(
        background, structure=neighborhood, border_value=1)
    # 
    # we obtain the final mask, containing only peaks, 
    # by removing the background from the local_min mask
    detected_minima = local_min - eroded_background
    return np.where(detected_minima)       
</snippet></ROW><ROW><id>3986876</id><snippet>arr=np.array([[[0,0,0,-1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[-1,0,0,0]],
              [[0,0,0,0],[0,-1,0,0],[0,0,0,0],[0,0,0,-1],[0,0,0,0]]])
local_minima_locations = detect_local_minima(arr)
print(arr)
# [[[ 0  0  0 -1]
#   [ 0  0  0  0]
#   [ 0  0  0  0]
#   [ 0  0  0  0]
#   [-1  0  0  0]]

#  [[ 0  0  0  0]
#   [ 0 -1  0  0]
#   [ 0  0  0  0]
#   [ 0  0  0 -1]
#   [ 0  0  0  0]]]
</snippet></ROW><ROW><id>3986876</id><snippet>print(local_minima_locations)
# (array([0, 0, 1, 1]), array([0, 4, 1, 3]), array([3, 0, 1, 3]))
print(arr[local_minima_locations])
# [-1 -1 -1 -1]
</snippet></ROW><ROW><id>3987113</id><snippet>-c</snippet></ROW><ROW><id>3987113</id><snippet>foo.py</snippet></ROW><ROW><id>3987113</id><snippet>$ python -c 'import foo; print foo.hello()'
</snippet></ROW><ROW><id>3987113</id><snippet>$ python -c 'from foo import *; print hello()'
</snippet></ROW><ROW><id>3987113</id><snippet>$ python -c 'from foo import hello; print hello()'
</snippet></ROW><ROW><id>3987220</id><snippet>class myClass:
    """
      This is some documentation for the class.
      method1()
      method2()
    """
    def method1(p1):
        ....
        ...
        ...
    def method2():
        ...
        ...

v = myClass
</snippet></ROW><ROW><id>3987220</id><snippet>v.__doc__
</snippet></ROW><ROW><id>3987220</id><snippet>help(myClass)
</snippet></ROW><ROW><id>3987797</id><snippet>t.contents[1].contents[0]</snippet></ROW><ROW><id>3987797</id><snippet>[u'\n', &lt;a href="more.asp"&gt;FOO&lt;/a&gt;, u'\n']</snippet></ROW><ROW><id>3987797</id><snippet>contents[1]</snippet></ROW><ROW><id>3987797</id><snippet>contents[0]</snippet></ROW><ROW><id>3987797</id><snippet>find()</snippet></ROW><ROW><id>3987797</id><snippet>t.find('a')</snippet></ROW><ROW><id>3987797</id><snippet>t.find('a').contents[0]</snippet></ROW><ROW><id>3987797</id><snippet>t.find('a').contents</snippet></ROW><ROW><id>3988203</id><snippet>for i in listOfVars:
    cur.execute('''ALTER TABLE testTable ADD COLUMN %s TEXT''' % i)
</snippet></ROW><ROW><id>3988326</id><snippet>class BaseEncryptedField(models.CharField):

    __metaclass__ = models.SubfieldBase

    ... etc ...
</snippet></ROW><ROW><id>3988326</id><snippet>to_python</snippet></ROW><ROW><id>3988442</id><snippet>value = models.CharField(max_length=20, choices=STATUS_CHOICES, verbose_name='Status', unique=True)
</snippet></ROW><ROW><id>3988457</id><snippet>class Account(Base):
    ...
    # please note added *backref*, which is needed to build the 
    #query in Account.get_other_collections(...)
    collections = relation("Collection", secondary=account_to_collection_map, backref="accounts")

    def get_other_collections(self, maxrows=None):
        """ Returns the collections this Account does not have yet.  """
        q = Session.object_session(self).query(Collection)
        q = q.filter(~Collection.accounts.any(id=self.id))
        # note: you might also want to order the results
        return q[:maxrows] if maxrows else q.all()
...
</snippet></ROW><ROW><id>3988678</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>3988678</id><snippet>env</snippet></ROW><ROW><id>3988678</id><snippet>#!/usr/bin/env python2.5
</snippet></ROW><ROW><id>3988714</id><snippet>&gt;&gt;&gt; s="ABC(a =2,b=3,c=5,d=5,e=Something)"
&gt;&gt;&gt; ','.join(s.split(",")[:-2])+")"
'ABC(a =2,b=3,c=5)'
</snippet></ROW><ROW><id>3988714</id><snippet>&gt;&gt;&gt; s="ABC(a =2,b=3,c=5,d=5,e=6,f=7,g=Something)"
&gt;&gt;&gt; re.sub("(.*)(,.[^,]*,.[^,]*)\Z","\\1)",s)
'ABC(a =2,b=3,c=5,d=5,e=6)'

&gt;&gt;&gt; s="ABC(a =2,b=3,c=5,d=5,e=Something)"
&gt;&gt;&gt; re.sub("(.*)(,.[^,]*,.[^,]*)\Z","\\1)",s)
'ABC(a =2,b=3,c=5)'
</snippet></ROW><ROW><id>3988714</id><snippet>&gt;&gt;&gt; s="ABC(a =2,b=3,c=5,d=5,e=Something)"
&gt;&gt;&gt; re.sub("([^,]+,[^,]+,[^,]+)(,.*)","\\1)",s)
'ABC(a =2,b=3,c=5)'

&gt;&gt;&gt; s="ABC(q =2,z=3,d=5,d=5,e=Something)"
&gt;&gt;&gt; re.sub("([^,]+,[^,]+,[^,]+)(,.*)","\\1)",s)
'ABC(q =2,z=3,d=5)'
</snippet></ROW><ROW><id>3988768</id><snippet>os.path.join(sys.prefix, 'share', 'myconfig.conf')
</snippet></ROW><ROW><id>3988768</id><snippet>/usr/share</snippet></ROW><ROW><id>3988768</id><snippet>/usr/local/share</snippet></ROW><ROW><id>3988768</id><snippet>'/usr/share/myconfig.conf'</snippet></ROW><ROW><id>3988803</id><snippet>pynotify</snippet></ROW><ROW><id>3988803</id><snippet>python-notify</snippet></ROW><ROW><id>3988810</id><snippet>self.idealValue</snippet></ROW><ROW><id>3988810</id><snippet>import os
import math

"""
A simple backprop neural network. It has 3 layers:
    Input layer: 2 neurons
    Hidden layer: 2 neurons
    Output layer: 1 neuron
"""

class Weight:
    """
    Class representing a weight between two neurons
    """
    def __init__(self, value, from_neuron, to_neuron):
        self.value = value
        self.from_neuron = from_neuron
        from_neuron.outputWeights.append(self)
        self.to_neuron = to_neuron
        to_neuron.inputWeights.append(self)

        # delta value, this will accumulate and after each training cycle
        # will be used to adjust the weight value
        self.delta = 0.0

class Neuron:
    """
    Class representing a neuron.
    """
    def __init__(self):
        self.value = 0.0        # the output
        self.idealValue = 0.0   # the ideal output
        self.error = 0.0        # error between output and ideal output
        self.inputWeights = []    # weights that end in the neuron
        self.outputWeights = []  # weights that starts in the neuron

    def activate(self):
        """
        Calculate an activation function of a neuron which is 
        a sum of all input weights * neurons where those weights start
        """
        x = 0.0;
        for weight in self.inputWeights:
            x += weight.value * weight.from_neuron.value
        # sigmoid function
        self.value = 1 / (1 + math.exp(-x))

class Network:
    """
    Class representing a whole neural network. Contains layers.
    """
    def __init__(self, layers, learningRate, weights):
        self.layers = layers
        self.learningRate = learningRate    # the rate at which the network learns
        self.weights = weights

    def training(self, entries, expectedOutput):
        for i in range(len(entries)):
            self.layers[0][i].value = entries[i]
        for i in range(len(expectedOutput)):
            self.layers[2][i].idealValue = expectedOutput[i]
        for layer in self.layers[1:]:
            for n in layer:
                n.activate()
        for n in self.layers[2]:
            error = (n.idealValue - n.value) * n.value * (1 - n.value)
            n.error = error
        for n in self.layers[1]:
            error = 0.0
            for w in n.outputWeights:
                error += w.to_neuron.error * w.value
            n.error = error
        for w in self.weights:
            w.delta += w.from_neuron.value * w.to_neuron.error

    def updateWeights(self):
        for w in self.weights:
            w.value += self.learningRate * w.delta

    def calculateSingleOutput(self, entries):
        """
        Calculate a single output for input values.
        This will be used to debug the already learned network after training.
        """
        for i in range(len(entries)):
            self.layers[0][i].value = entries[i]
        # activation function for output layer
        for layer in self.layers[1:]:
            for n in layer:
                n.activate()
        print self.layers[2][0].value


#------------------------------ initialize objects etc

neurons = [Neuron() for n in range(5)]

w1 = Weight(-0.79, neurons[0], neurons[2])
w2 = Weight( 0.51, neurons[0], neurons[3])
w3 = Weight( 0.27, neurons[1], neurons[2])
w4 = Weight(-0.48, neurons[1], neurons[3])
w5 = Weight(-0.33, neurons[2], neurons[4])
w6 = Weight( 0.09, neurons[3], neurons[4])

weights = [w1, w2, w3, w4, w5, w6]
inputLayer  = [neurons[0], neurons[1]]
hiddenLayer = [neurons[2], neurons[3]]
outputLayer = [neurons[4]]
learningRate = 0.3
network = Network([inputLayer, hiddenLayer, outputLayer], learningRate, weights)

# just for debugging, the real training set is much larger
trainingSet = [([0.0,0.0],[0.0]),
               ([1.0,0.0],[1.0]),
               ([2.0,0.0],[1.0]),
               ([0.0,1.0],[0.0]),
               ([1.0,1.0],[1.0]),
               ([2.0,1.0],[0.0]),
               ([0.0,2.0],[0.0]),
               ([1.0,2.0],[0.0]),
               ([2.0,2.0],[1.0])]

#------------------------------ let's train
for i in range(100): # training iterations
    for entries, expectedOutput in trainingSet:
        network.training(entries, expectedOutput)
    network.updateWeights()

#network has learned, let's check
network.calculateSingleOutput((1, 0)) # this should be close to 1
network.calculateSingleOutput((0, 0)) # this should be close to 0
</snippet></ROW><ROW><id>3988810</id><snippet>math.exp()</snippet></ROW><ROW><id>3988830</id><snippet>axis</snippet></ROW><ROW><id>3988830</id><snippet>plt.plot(z,x,'-',lw=3)
plt.plot(z,y,'--',lw=3)
plt.axis([2,20,100,500])
plt.show()
</snippet></ROW><ROW><id>3988830</id><snippet>ylim</snippet></ROW><ROW><id>3988830</id><snippet>plt.ylim([100,500])
</snippet></ROW><ROW><id>3989032</id><snippet>&gt;&gt;&gt; m = max(a)
&gt;&gt;&gt; [i for i, j in enumerate(a) if j == m]
[9, 12]
</snippet></ROW><ROW><id>3989063</id><snippet>{% avatar_itself_url actor.avatar_set.all.0 200 %}</snippet></ROW><ROW><id>3989063</id><snippet>&lt;img ...</snippet></ROW><ROW><id>3989063</id><snippet>python manage.py shell</snippet></ROW><ROW><id>3989063</id><snippet>&lt;img src="/this/is/a/very/long/path/which/exceeds/255/characters/something.png" /&gt;
</snippet></ROW><ROW><id>3989063</id><snippet>avatar_itself_url</snippet></ROW><ROW><id>3989063</id><snippet>Avatar</snippet></ROW><ROW><id>3989063</id><snippet>long_filename = 'a' * 256
fp = open(long_filename, 'w')
fp.close()
</snippet></ROW><ROW><id>3989063</id><snippet>IOError: [Errno 36] File name too long:</snippet></ROW><ROW><id>3989063</id><snippet>{% avatar_itself_url actor.avatar_set.all.0 200 %}</snippet></ROW><ROW><id>3989187</id><snippet>a = "ACdA(a = %b, ccc= 2r2)"
b = "\ewfsd\ss.jpg"
print a[:-1] + ', b_holder = ' + b + ')'
</snippet></ROW><ROW><id>3989187</id><snippet>print '%s, b_holder = %s)' % (a[:-1], b)
</snippet></ROW><ROW><id>3989367</id><snippet>sets</snippet></ROW><ROW><id>3989367</id><snippet>__eq__</snippet></ROW><ROW><id>3989367</id><snippet>__hash__</snippet></ROW><ROW><id>3989367</id><snippet>django.db.models.base.Model</snippet></ROW><ROW><id>3989367</id><snippet>    def __eq__(self, other):
        return isinstance(other, self.__class__) and self._get_pk_val() == other._get_pk_val()

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash(self._get_pk_val())
</snippet></ROW><ROW><id>3989367</id><snippet>None</snippet></ROW><ROW><id>3989368</id><snippet>F=open('C:\T\list1.txt','r')
B=open('C:\T\list2.txt','w')
for l in F: #for each line in list1.txt
    if l.strip() == 'John Smith':  #l includes newline, so strip it
        break
    B.write(l)

F.close()
B.close()
</snippet></ROW><ROW><id>3989998</id><snippet>line = 'xxxx'
CONFIG = default_deconfig

if line == 'AAA':
    CONFIG =  AAA_defconfig
elif line == 'CCC':
    CONFIG =  CCC_defconfig
...
</snippet></ROW><ROW><id>3989998</id><snippet># Simple , crude solution

f = open('file1', 'r')
manipulated_lines = []
readFirstLine = False
config = ''
configComma = ''
uncommentLine = 0
for line in f:
    tokens = line.split()

    if uncommentLine == 1:
        # this is comment line
        if tokens[0] == '#export':
            manipulated_lines.append(line[1:])
            uncommentLine = uncommentLine + 1
            continue
    elif uncommentLine &gt; 1:
        manipulated_lines.append(line)
        continue

    if not readFirstLine: 
        config = line.rstrip('\n')
        configComma = config + ','
        readFirstLine = True

    # Process additional lines 
    manipulated_lines.append(line)

    if len(tokens) &gt; 0 and tokens[0] == '#':
        if tokens[1] == 'for':
            if config in tokens or configComma in tokens:
                uncommentLine = uncommentLine + 1
                continue

print manipulated_lines
f.close()
fw = open('file2', 'w')
fw.writelines(manipulated_lines)
fw.close()
</snippet></ROW><ROW><id>3989998</id><snippet>CCC
# for AAA
#export CONFIG = AAA_defconfig

# for BBB, BbB, Bbb, BBb3
#export CONFIG = BBB_defconfig

# for CCC, CcC, Ccc, Ccc1
#export CONFIG = CCC_defconfig
   ...
</snippet></ROW><ROW><id>3989998</id><snippet>CCC
# for AAA
#export CONFIG = AAA_defconfig

# for BBB, BbB, Bbb, BBb3
#export CONFIG = BBB_defconfig

# for CCC, CcC, Ccc, Ccc1
export CONFIG = CCC_defconfig
   ...
</snippet></ROW><ROW><id>3990161</id><snippet>socket.setblocking(0)
</snippet></ROW><ROW><id>3990161</id><snippet>socket.settimeout(value)
</snippet></ROW><ROW><id>3990585</id><snippet>NameX.__name__</snippet></ROW><ROW><id>3990866</id><snippet>insert_query = '''INSERT INTO testTable ({0}) VALUES ({1})'''.format(
               (','.join(listOfVars)), ','.join('?'*len(listOfVars)))
cur.executemany(insert_query, tupleForm)
</snippet></ROW><ROW><id>3990866</id><snippet>executemany</snippet></ROW><ROW><id>3990980</id><snippet>in1d</snippet></ROW><ROW><id>3990980</id><snippet>&gt;&gt;&gt; A = numpy.array([1,2,3,4,5])
&gt;&gt;&gt; B = [1,3,5]
&gt;&gt;&gt; numpy.in1d(A,crit)
array([ True, False,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>3990980</id><snippet>in1d(a, b)</snippet></ROW><ROW><id>3990980</id><snippet>np.array([item in b for item in a])</snippet></ROW><ROW><id>3990980</id><snippet>B[B.searchsorted(A)] == A
</snippet></ROW><ROW><id>3990980</id><snippet>inds = B.searchsorted(A)
inds[inds == len(B)] = 0
mask = B[inds] == A
</snippet></ROW><ROW><id>3991048</id><snippet>self.save()</snippet></ROW><ROW><id>3991048</id><snippet>super(Event, self).save()</snippet></ROW><ROW><id>3991048</id><snippet>def save(self, *args, **kwargs):
    #... other code here
    super(Event, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>3991302</id><snippet> for line in samtoolsin.stdout:
        if(line.startswith("@")):
            samtoolsout.stdin.write(line)
        else:
            linesplit = line.split("\t")
            if(linesplit[10]=="*"):
                linesplit[9]="*"
            samtoolsout.stdin.write("\t".join(linesplit))
</snippet></ROW><ROW><id>3991490</id><snippet>number = models.AutoField()
</snippet></ROW><ROW><id>3991490</id><snippet>yourmodel.id</snippet></ROW><ROW><id>3991490</id><snippet>MyModel.business</snippet></ROW><ROW><id>3991490</id><snippet>id</snippet></ROW><ROW><id>3991728</id><snippet>gtk.Window.set_decorated(False)
</snippet></ROW><ROW><id>3991734</id><snippet>False</snippet></ROW><ROW><id>3991734</id><snippet>Application.Documents.Open</snippet></ROW><ROW><id>3991734</id><snippet>import win32com.client, pythoncom, time

def word(wordfile):
    pythoncom.CoInitializeEx(pythoncom.COINIT_APARTMENTTHREADED)
    myWord = win32com.client.DispatchEx('Word.Application')
    myDoc = myWord.Documents.Open(wordfile, False, False, False)

    ...

    myDoc.Close()
    myWord.Quit()
    del myDoc
    del myWord
    pythoncom.CoUninitialize()
</snippet></ROW><ROW><id>3991899</id><snippet>quickstart</snippet></ROW><ROW><id>3991899</id><snippet>quickstart</snippet></ROW><ROW><id>3991899</id><snippet>cherrypy.config.update(conffile)
cherrypy.config.update(confdict)

app = cherrypy.tree.mount(HelloWorld(), '/', conffile)
app.merge(confdict)

if hasattr(cherrypy.engine, "signal_handler"):
    cherrypy.engine.signal_handler.subscribe()
if hasattr(cherrypy.engine, "console_control_handler"):
    cherrypy.engine.console_control_handler.subscribe()
cherrypy.engine.start()
cherrypy.engine.block()
</snippet></ROW><ROW><id>3991899</id><snippet>config.update</snippet></ROW><ROW><id>3991899</id><snippet>app.merge(confdict)</snippet></ROW><ROW><id>3991899</id><snippet>HelloWorld._cp_config</snippet></ROW><ROW><id>3992113</id><snippet>import tempfile
import os

def produce(text):
    with tempfile.NamedTemporaryFile(suffix=".txt", delete=False) as f:
        f.write(text)
        return f.name

def consume(filename):
    try:
        with open(filename) as f:
            return f.read()
    finally:
        os.remove(filename)

if __name__ == '__main__':

    filename = produce('Hello, world')
    print('Filename is: {0}'.format(filename))
    text = consume(filename)
    print('Text is: {0}'.format(text))
    assert not os.path.exists(filename)
</snippet></ROW><ROW><id>3992113</id><snippet>Filename is: /tmp/tmpp_iSrw.txt
Text is: Hello, world
</snippet></ROW><ROW><id>3992700</id><snippet>numpy.vectorize</snippet></ROW><ROW><id>3992700</id><snippet>...
    vfunc_curry = vectorize(functools.partial(func, y=n))
    result = vfunc_curry(a)
...
</snippet></ROW><ROW><id>3992765</id><snippet>grouper</snippet></ROW><ROW><id>3992765</id><snippet>itertools</snippet></ROW><ROW><id>3992765</id><snippet>def grouper(n, iterable, fillvalue=None):
  "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
  args = [iter(iterable)] * n
  return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>3992855</id><snippet>print db['han'].__dict__
</snippet></ROW><ROW><id>3992924</id><snippet>ok_words = set(["a", "b", "c", "e"])

def filter_words(words):
    return [word for word in words if word in ok_words]
</snippet></ROW><ROW><id>3992964</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.path
&gt;&gt;&gt; sys.path.append('C:\\Users\\Cube\\Documents\\Python')
&gt;&gt;&gt; import reduc
</snippet></ROW><ROW><id>3993133</id><snippet>winservice.py</snippet></ROW><ROW><id>3993133</id><snippet>winservice_test.py</snippet></ROW><ROW><id>3993133</id><snippet>winservice.py</snippet></ROW><ROW><id>3993133</id><snippet>winservice_test.py</snippet></ROW><ROW><id>3993133</id><snippet>python winservice_test.py
</snippet></ROW><ROW><id>3993133</id><snippet>services.msc</snippet></ROW><ROW><id>3993156</id><snippet>:</snippet></ROW><ROW><id>3993156</id><snippet>:</snippet></ROW><ROW><id>3993244</id><snippet>is</snippet></ROW><ROW><id>3993244</id><snippet>and</snippet></ROW><ROW><id>3993244</id><snippet>or</snippet></ROW><ROW><id>3993441</id><snippet>messagebox</snippet></ROW><ROW><id>3993441</id><snippet>colorchooser</snippet></ROW><ROW><id>3993441</id><snippet>TopLevel</snippet></ROW><ROW><id>3993441</id><snippet>colorchooser</snippet></ROW><ROW><id>3994036</id><snippet>'##(.*?)##'
</snippet></ROW><ROW><id>3994036</id><snippet>##</snippet></ROW><ROW><id>3994036</id><snippet>()</snippet></ROW><ROW><id>3994036</id><snippet>.*?</snippet></ROW><ROW><id>3994036</id><snippet>.+?</snippet></ROW><ROW><id>3994036</id><snippet>[##]()[##]</snippet></ROW><ROW><id>3994036</id><snippet>[ab]</snippet></ROW><ROW><id>3994036</id><snippet>a</snippet></ROW><ROW><id>3994036</id><snippet>b</snippet></ROW><ROW><id>3994036</id><snippet>[##]</snippet></ROW><ROW><id>3994036</id><snippet>##</snippet></ROW><ROW><id>3994036</id><snippet>[##]</snippet></ROW><ROW><id>3994036</id><snippet>[#]</snippet></ROW><ROW><id>3994036</id><snippet>#</snippet></ROW><ROW><id>3994036</id><snippet>'\#{2}()\#{2}'</snippet></ROW><ROW><id>3994036</id><snippet>#</snippet></ROW><ROW><id>3994036</id><snippet>.</snippet></ROW><ROW><id>3994036</id><snippet>+</snippet></ROW><ROW><id>3994036</id><snippet>*</snippet></ROW><ROW><id>3994036</id><snippet>\</snippet></ROW><ROW><id>3994036</id><snippet>\#</snippet></ROW><ROW><id>3994078</id><snippet>import re

indicators = ["therefore", "for", "since"]
phrase = "... therefore, I conclude I am awesome."

indicators_in_phrase = set(re.findall(r'\b(%s)\b' % '|'.join(indicators), phrase.lower()))
</snippet></ROW><ROW><id>3994507</id><snippet>\d+</snippet></ROW><ROW><id>3994507</id><snippet>78</snippet></ROW><ROW><id>3994507</id><snippet>^\d+$</snippet></ROW><ROW><id>3994507</id><snippet>"78.46.92.168:8000".isdigit()</snippet></ROW><ROW><id>3994744</id><snippet>QSpinBox</snippet></ROW><ROW><id>3994744</id><snippet>int</snippet></ROW><ROW><id>3994744</id><snippet>sys.maxint</snippet></ROW><ROW><id>3994882</id><snippet>array={}
for line in open(file):
  result=prog.match(line)
  array[result.group(1)] = result.group(2)
</snippet></ROW><ROW><id>3994882</id><snippet>array={result.group(1) : result.group(2)}
array={'x':1}
array={'y':1}
array={'z':1}
....
</snippet></ROW><ROW><id>3994944</id><snippet>&gt;&gt;&gt; print your_list
[u'foo', u'bar']
</snippet></ROW><ROW><id>3994944</id><snippet>&gt;&gt;&gt; print '\n'.join(your_list)
foo
bar
</snippet></ROW><ROW><id>3994944</id><snippet>', '</snippet></ROW><ROW><id>3994944</id><snippet>'\n'</snippet></ROW><ROW><id>3994944</id><snippet>print '\n'.join(x.encode('ascii', 'ignore') for x in your_list)
</snippet></ROW><ROW><id>3995061</id><snippet>word = 'two'
re.compile(r'\b%s\b' % word, re.I)
</snippet></ROW><ROW><id>3995061</id><snippet>&gt;&gt;&gt; word = 'two'
&gt;&gt;&gt; k = re.compile(r'\b%s\b' % word, re.I)
&gt;&gt;&gt; x = 'one two three'
&gt;&gt;&gt; y = k.search( x)
&gt;&gt;&gt; y
&lt;_sre.SRE_Match object at 0x100418850&gt;
</snippet></ROW><ROW><id>3995061</id><snippet>&gt;&gt;&gt; x = 'one two three'
&gt;&gt;&gt; y = re.search(r"\btwo\b", x)
&gt;&gt;&gt; y
&lt;_sre.SRE_Match object at 0x100418a58&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>3995811</id><snippet>Foo.VAGUE</snippet></ROW><ROW><id>3995811</id><snippet>self.VAGUE</snippet></ROW><ROW><id>3995811</id><snippet>self</snippet></ROW><ROW><id>3995811</id><snippet>self.VAGUE</snippet></ROW><ROW><id>3996108</id><snippet>cancel</snippet></ROW><ROW><id>3996380</id><snippet>with open(file) as f:</snippet></ROW><ROW><id>3996380</id><snippet>finally:</snippet></ROW><ROW><id>3996380</id><snippet>NameError</snippet></ROW><ROW><id>3996380</id><snippet>f</snippet></ROW><ROW><id>3996380</id><snippet>with</snippet></ROW><ROW><id>3996380</id><snippet>try:
    with open("myfile.txt") as f:
        do_Stuff()  # even if this raises an exception, f will be closed.
except IOError:
    print "Couldn't open/read myfile.txt"
</snippet></ROW><ROW><id>3996448</id><snippet>&gt;&gt;&gt; regex = re.compile(r'(?:(?P&lt;lastyear&gt;[\dBFUPR]+)/)?(?:(?P&lt;lastseason&gt;[\dBFUPR]+)-)?(?P&lt;thisseason&gt;[\dBFUPR]+)?')
&gt;&gt;&gt; regex.match("1234/123-12").groupdict()
{'thisseason': '12', 'lastyear': '1234', 'lastseason': '123'}
&gt;&gt;&gt; regex.match("00999F").groupdict()
{'thisseason': '00999F', 'lastyear': None, 'lastseason': None}
&gt;&gt;&gt; regex.match("12-").groupdict()
{'thisseason': None, 'lastyear': None, 'lastseason': '12'}
&gt;&gt;&gt; regex.match("12-3456").groupdict()
{'thisseason': '3456', 'lastyear': None, 'lastseason': '12'}
</snippet></ROW><ROW><id>3996588</id><snippet>aggregate</snippet></ROW><ROW><id>3996588</id><snippet>get_feed_xyz()</snippet></ROW><ROW><id>3996588</id><snippet>index()</snippet></ROW><ROW><id>3996832</id><snippet>SEARCHED_LOCATION = db.GeoPt("48.8566667, 2.3509871") # Location of Paris.
DISTANCE = 50000 #Between 10000 and 150000.
MAX_RESULTS = 300

# Resolution '4' is about 150 kilometers i suppose it's a good compromise.                                                                                                                            
bbox = geocell.compute_box(geocell.compute(SEARCHED_LOCATION, resolution=4))
cell = geocell.best_bbox_search_cells(bbox, geomodel.default_cost_function)

query.filter('location_geocells IN', cell)

# Python filters
def _func(x):
  """Private method used to set the distance of the model to the searched location
  and return this distance.
  """
  x.dist = geomath.distance(SEARCHED_LOCATION, x.location)
  return x.dist

results = sorted(query.fetch(MAX_RESULTS), key=_func) # Order the result by distance
results = [x for x in results if x.dist &lt;= DISTANCE]  # Filter the result
</snippet></ROW><ROW><id>3996930</id><snippet>from random import randrange
print randrange(10)
</snippet></ROW><ROW><id>3997027</id><snippet>from urllib import urlencode
print 'http://www.test.com/?' + urlencode({'q': 'testæøå'})
</snippet></ROW><ROW><id>3997091</id><snippet>parser</snippet></ROW><ROW><id>3997091</id><snippet>from Parser import parser

print parser().fromHTML("Hello my lady!", "English", "Italian")
</snippet></ROW><ROW><id>3997091</id><snippet>from Parser import parser

p = parser()
p.fromHTML(...)
</snippet></ROW><ROW><id>3997091</id><snippet>fromHTML</snippet></ROW><ROW><id>3997091</id><snippet>class parser(object):   # you should probably use new-style classes
    ...
    @staticmethod
    def fromHTML(...):
        ...
</snippet></ROW><ROW><id>3997091</id><snippet>from Parser import parser

print parser.fromHTML(...)
</snippet></ROW><ROW><id>3997538</id><snippet>GeneratorExit</snippet></ROW><ROW><id>3997538</id><snippet>class YieldOne:
  def __iter__(self):
    try:
      yield 1
    except RuntimeError:
        print "you won't see this"
    except GeneratorExit:
      print 'this is what you saw before'
      # raise

for i in YieldOne():
  raise RuntimeError
</snippet></ROW><ROW><id>3997538</id><snippet>class YieldOne:
  def __iter__(self):
    try:
      yield 1
    except Exception as e:
      print "Got a", repr(e)
      yield 2
      # raise

gen = iter(YieldOne())

for row in gen:
    print row # we are at `yield 1`
    print gen.throw(Exception) # throw there and go to `yield 2` 
</snippet></ROW><ROW><id>3997538</id><snippet>generator.throw</snippet></ROW><ROW><id>3997562</id><snippet>\1</snippet></ROW><ROW><id>3997562</id><snippet>output = re.sub(r'(&lt;textarea.*&gt;).*(&lt;/textarea&gt;)', r'\1Bar\2', s)
</snippet></ROW><ROW><id>3997853</id><snippet>import numpy as np
cimport numpy as np
cdef class Base(object):
    cdef int fun(self):
        return -1

cdef class A(Base):
    cdef int fun(self):
        return 3


cdef class B(Base):
    cdef int fun(self):
        return 2

def test():
    bbb = np.array([[A(), B()], [B(), A()]], dtype=np.object_)
    cdef np.ndarray[dtype=object, ndim=2] a = bbb

    cdef int i, x, y
    cdef int s = 0
    cdef Base u

    for i in xrange(1000):
        for x in xrange(2):
            for y in xrange(2):
                u = a[x,y]                
                s += u.fun()
    return s
</snippet></ROW><ROW><id>3997853</id><snippet>u = &lt;Base&gt;a[x,y]
</snippet></ROW><ROW><id>3998043</id><snippet>def save(self):
    today = datetime.date.today()
    self.quote = "%s-%s" % (str(today.year)[2:4], self.quote)
</snippet></ROW><ROW><id>3998087</id><snippet>class UserLikes(db.Model):
    food = db.StringListProperty()
</snippet></ROW><ROW><id>3998087</id><snippet>likes = UserLikes(parent=user)
</snippet></ROW><ROW><id>3998087</id><snippet>like_apples_keys = UserLikes.all(keys_only=True).filter(food='apples')
user_keys = [key.parent() for key in like_apples_keys]
users_who_like_apples = db.get(user_keys)
</snippet></ROW><ROW><id>3998087</id><snippet>class WhoLikes(db.Model):
    users = db.StringListProperty()
</snippet></ROW><ROW><id>3998087</id><snippet>food_i_like = WhoLikes(key_name='apples')
</snippet></ROW><ROW><id>3998087</id><snippet>apple_lover_key_names = WhoLikes.get_by_key_name('apples')
apple_lovers = UserModel.get_by_key_names(apple_lover_key_names.users)
</snippet></ROW><ROW><id>3998087</id><snippet>same_likes = WhoLikes.all().filter('users', current_user_key_name)
like_the_same_keys = set()
for keys in same_likes:
   like_the_same_keys.union(keys.users)
same_like_users = UserModel.get_by_key_names(like_the_same_keys)
</snippet></ROW><ROW><id>3998799</id><snippet>#!/usr/bin/env python

import os, os.path
import stat

def traverse_path(start_dir='.'):
    for root, dirs, files in os.walk(start_dir, topdown=False):
        for f in files:
            complete_path = os.path.join(root, f)
            try:
                m = os.stat(complete_path)[stat.ST_MODE]
                if stat.S_ISREG(m):
                    yield complete_path[len(start_dir):]
            except OSError, err:
                print 'Skipping', complete_path
            except IOError, err:
                print 'Skipping', complete_path

if __name__ == '__main__':
    s = set(traverse_path('/home/hughdbrown'))
    t = set(traverse_path('/home.backup/hughdbrown'))
    for e in s - t:
        print e
    print '-' * 25
    for e in t - s:
        print e
</snippet></ROW><ROW><id>3998932</id><snippet>#vars
sidWorld = win32security.CreateWellKnownSid(win32security.WinWorldSid, None)
worldRights = win32file.FILE_ALL_ACCESS
flags = win32security.OBJECT_INHERIT_ACE| \
    win32security.CONTAINER_INHERIT_ACE

#get DACL
fileSecDesc = win32security.GetNamedSecurityInfo( \
    f, win32security.SE_FILE_OBJECT, win32security.DACL_SECURITY_INFORMATION)
fileDacl = fileSecDesc.GetSecurityDescriptorDacl()

#add rights
fileDacl.AddAccessAllowedAceEx( \
    win32security.ACL_REVISION_DS, \
    flags, \
    worldRights, \
    sidWorld)

win32security.SetNamedSecurityInfo( \
    f, win32security.SE_FILE_OBJECT, win32security.DACL_SECURITY_INFORMATION, \
    None, None, fileDacl, None )
</snippet></ROW><ROW><id>3998951</id><snippet>import random
print random.choice([dog, cat])
</snippet></ROW><ROW><id>3998951</id><snippet>choice()</snippet></ROW><ROW><id>3999002</id><snippet>    list_a = [a, b, c]
    list_b = ["a", "b", "c"]
    [i.SetBitmap(wx.Bitmap(VarFiles[list_b[list_a.index(i)]])) for i in list_a]
</snippet></ROW><ROW><id>3999010</id><snippet>appname_modelname</snippet></ROW><ROW><id>3999010</id><snippet>Post</snippet></ROW><ROW><id>3999010</id><snippet>blog</snippet></ROW><ROW><id>3999010</id><snippet>Post</snippet></ROW><ROW><id>3999010</id><snippet>messages</snippet></ROW><ROW><id>3999010</id><snippet>blog_post</snippet></ROW><ROW><id>3999010</id><snippet>messages_post</snippet></ROW><ROW><id>3999010</id><snippet>project.blog.models.Post</snippet></ROW><ROW><id>3999010</id><snippet>project.messages.models.Post</snippet></ROW><ROW><id>3999010</id><snippet>import blog.models.Post as BlogPost
import messages.models.Post as MessagesPost
</snippet></ROW><ROW><id>3999085</id><snippet>&gt;&gt;&gt; f=open('test.txt','w')
&gt;&gt;&gt; f.write(10*'a')
&gt;&gt;&gt; f.tell()
10L
&gt;&gt;&gt; f.write(100*'a')
&gt;&gt;&gt; f.tell()
110L
</snippet></ROW><ROW><id>3999165</id><snippet>types_list = Type.objects.raw('SELECT * FROM equipment_type
    LEFT JOIN (                                            
        SELECT type_id, SUM(quantity) AS qty               
        FROM equipment_item                                
        GROUP BY type_id                                   
    ) T1                                                   
    ON id = T1.type_id                                     
    WHERE hide=0 AND deleted=0 AND (T1.qty &gt; 0 OR stock=0) 
    ')
</snippet></ROW><ROW><id>3999179</id><snippet>"#%02X%02X%02X" % (self.r, self.g, self.b)</snippet></ROW><ROW><id>3999179</id><snippet>"%03d"</snippet></ROW><ROW><id>3999311</id><snippet>def onColWidthChange(col, width):
    # Note that "width" is a GParamInt object, not an integer
    ...

col.connect("notify::width", onColWidthChange)
</snippet></ROW><ROW><id>3999311</id><snippet>col</snippet></ROW><ROW><id>3999311</id><snippet>gtk.TreeViewColumn</snippet></ROW><ROW><id>3999311</id><snippet>gtk.TreeView.get_column</snippet></ROW><ROW><id>3999646</id><snippet>get_employees_and_print()</snippet></ROW><ROW><id>3999646</id><snippet>print_employees(get_employees())</snippet></ROW><ROW><id>3999646</id><snippet>print_employee(get_by_name())</snippet></ROW><ROW><id>3999646</id><snippet>print_employee(get_by_id())</snippet></ROW><ROW><id>3999695</id><snippet>$ (echo "foo" | ./pipe.py) 3&lt;&amp;0
</snippet></ROW><ROW><id>3999695</id><snippet>foo</snippet></ROW><ROW><id>3999695</id><snippet>pipe.py</snippet></ROW><ROW><id>3999695</id><snippet>stdin</snippet></ROW><ROW><id>3999695</id><snippet>#!/usr/bin/env python

import sys, os
import curses

output = sys.stdin.readline(100)

# We're finished with stdin. Duplicate inherited fd 3,
# which contains a duplicate of the parent process' stdin,
# into our stdin, at the OS level (assigning os.fdopen(3)
# to sys.stdin or sys.__stdin__ does not work).
os.dup2(3, 0)

# Now curses can initialize.
screen = curses.initscr()
screen.border(0)
screen.addstr(12, 25, output)
screen.refresh()
screen.getch()
curses.endwin()
</snippet></ROW><ROW><id>3999695</id><snippet>$ exec 3&lt;&amp;0  # spawn subshell
$ echo "foo" | ./pipe.py  # works
$ echo "bar" | ./pipe.py  # still works
</snippet></ROW><ROW><id>3999695</id><snippet>bash</snippet></ROW><ROW><id>4000142</id><snippet>#FFFFFF</snippet></ROW><ROW><id>4000142</id><snippet>0..F</snippet></ROW><ROW><id>4000142</id><snippet>0..15</snippet></ROW><ROW><id>4000142</id><snippet>0..(16*16-1) -&gt; 0-255</snippet></ROW><ROW><id>4000142</id><snippet>#AABBCC</snippet></ROW><ROW><id>4000142</id><snippet>AA BB CC</snippet></ROW><ROW><id>4000142</id><snippet>0</snippet></ROW><ROW><id>4000142</id><snippet>255</snippet></ROW><ROW><id>4000142</id><snippet>0</snippet></ROW><ROW><id>4000142</id><snippet>FF</snippet></ROW><ROW><id>4000142</id><snippet>0.0</snippet></ROW><ROW><id>4000142</id><snippet>1.0</snippet></ROW><ROW><id>4000142</id><snippet>12 -&gt; 1*16 + 2 = .. (result in range 0-255)
34 -&gt; 3*16 + 4 = ..
56 -&gt; 5*16 + 6 = ..
</snippet></ROW><ROW><id>4000142</id><snippet>XY</snippet></ROW><ROW><id>4000142</id><snippet>X</snippet></ROW><ROW><id>4000142</id><snippet>Y</snippet></ROW><ROW><id>4000142</id><snippet>AC</snippet></ROW><ROW><id>4000142</id><snippet>A*16 + C = 10*16 + 12</snippet></ROW><ROW><id>4000165</id><snippet>multiprocessing</snippet></ROW><ROW><id>4000395</id><snippet>copy_of_A = A[:]
</snippet></ROW><ROW><id>4000395</id><snippet>copy_of_A = list(A)
</snippet></ROW><ROW><id>4000395</id><snippet>from copy import copy
copy_of_A = copy(A)
</snippet></ROW><ROW><id>4000465</id><snippet>weapons.py</snippet></ROW><ROW><id>4000465</id><snippet>WeaponBase</snippet></ROW><ROW><id>4000465</id><snippet>Axe</snippet></ROW><ROW><id>4000465</id><snippet>Broadsword</snippet></ROW><ROW><id>4000465</id><snippet>WeaponsBase</snippet></ROW><ROW><id>4000465</id><snippet>import weapons
</snippet></ROW><ROW><id>4000465</id><snippet>weapons.Axe</snippet></ROW><ROW><id>4000465</id><snippet>Axe</snippet></ROW><ROW><id>4000465</id><snippet>weapons.Broadsword</snippet></ROW><ROW><id>4000465</id><snippet>Broadsword</snippet></ROW><ROW><id>4000465</id><snippet>from weapons import Axe, Broadsword
</snippet></ROW><ROW><id>4000465</id><snippet>Axe</snippet></ROW><ROW><id>4000465</id><snippet>Broadsword</snippet></ROW><ROW><id>4000465</id><snippet>from weapons import *
</snippet></ROW><ROW><id>4000465</id><snippet>WeaponsBase</snippet></ROW><ROW><id>4000465</id><snippet>weapons</snippet></ROW><ROW><id>4000465</id><snippet>import</snippet></ROW><ROW><id>4000465</id><snippet>__init__.py</snippet></ROW><ROW><id>4000706</id><snippet>def inplace_unique_latest(L, key=None):
  if key is None:
    def key(x):
      return x
  seen = set()
  n = iter(xrange(len(L) - 1, -2, -1))
  for x in xrange(len(L) - 1, -1, -1):
    item = L[x]
    k = key(item)
    if k not in seen:
      seen.add(k)
      L[next(n)] = item
  L[:next(n) + 1] = []
</snippet></ROW><ROW><id>4000879</id><snippet>key-press-event</snippet></ROW><ROW><id>4000879</id><snippet>def on_dialog_key_press(dialog, event):
    if event.string == ' ':
        dialog.response(gtk.RESPONSE_OK)
        return True
    return False

dialog = gtk.MessageDialog(message_format='Some message', buttons=gtk.BUTTONS_OK_CANCEL)
dialog.add_events(gtk.gdk.KEY_PRESS_MASK)
dialog.connect('key-press-event', on_dialog_key_press)
dialog.run()
</snippet></ROW><ROW><id>4001097</id><snippet>sum()</snippet></ROW><ROW><id>4001097</id><snippet>max()</snippet></ROW><ROW><id>4001097</id><snippet>x = arr[7].max()   # Maximum in row 7
y = arr[29].sum()  # Sum of the values in row 29
</snippet></ROW><ROW><id>4001097</id><snippet>z = arr[:, 5].sum()  # Sum up all values in column 5.
</snippet></ROW><ROW><id>4001238</id><snippet>  File "time.py", line 4, in &lt;module&gt;
</snippet></ROW><ROW><id>4001238</id><snippet>In [1]: import time    
In [2]: time.__file__   
</snippet></ROW><ROW><id>4001238</id><snippet>In [3]: time     # This shows the path as part of the repr
</snippet></ROW><ROW><id>4001305</id><snippet>def remove_duplicates(seq):
    found = set()
    for item in seq:
        if item in found:
            continue
        found.add(item)
        yield item
</snippet></ROW><ROW><id>4001305</id><snippet>&gt;&gt;&gt; print "\n".join(remove_duplicates(["aa", "bb", "cc", "aa"]))
aa
bb
cc
</snippet></ROW><ROW><id>4001305</id><snippet>def is_line_ok(line):
    if "bad text1" in line:
        return False
    if "bad text2" in line:
        return False
    return True
</snippet></ROW><ROW><id>4001305</id><snippet>&gt;&gt;&gt; is_line_ok("this line contains bad text2.")
False
&gt;&gt;&gt; is_line_ok("this line's ok.")
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4001305</id><snippet>remove_duplicates</snippet></ROW><ROW><id>4001305</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>4001305</id><snippet>&gt;&gt;&gt; seq = ["OK", "bad text2", "OK", "Also OK"]
&gt;&gt;&gt; print "\n".join(remove_duplicates(ifilter(is_line_ok, seq)))
OK
Also OK
</snippet></ROW><ROW><id>4001305</id><snippet>with open(input_file, 'r') as f_in:
    with open(output_file, 'w') as f_out:
       f_out.writelines(remove_duplicates(ifilter(is_line_ok, f_in)))
</snippet></ROW><ROW><id>4001500</id><snippet>s = '"' + json.dumps(mydict).replace('\\', r'\\').replace('"', r'\"') + '"'
</snippet></ROW><ROW><id>4001500</id><snippet>def c_string(s):
    all_chars = (chr(x) for x in range(256))
    trans_table = dict((c, c) for c in all_chars)
    trans_table.update({'"': r'\"', '\\': r'\\'})
    return "".join(trans_table[c] for c in s)

def dwarf_string(d):
    import json
    return '"' + c_string(json.dumps(d)) + '"'
</snippet></ROW><ROW><id>4001500</id><snippet>string.maketrans()</snippet></ROW><ROW><id>4001689</id><snippet>class Test(webapp.RequestHandler):
    def get(self):
        s = self.request.get('sentence')
        try:
            self.myList.append(s)
        except NameError:
            self.myList= [s]
        htmlcode1 = HTML.table(self.myList)
</snippet></ROW><ROW><id>4001689</id><snippet>list</snippet></ROW><ROW><id>4001689</id><snippet>list</snippet></ROW><ROW><id>4001689</id><snippet>class Test(webapp.RequestHandler):
    def get(self):
        s = self.request.get('sentence')
        if not hasattr(self, 'myList'):
            self.myList = []
        self.myList.append(s)
        htmlcode1 = HTML.table(self.myList)
</snippet></ROW><ROW><id>4001689</id><snippet>class Test(webapp.RequestHandler):
    myList = []
    def get(self):
        s = self.request.get('sentence')
        self.myList.append(s)
        htmlcode1 = HTML.table(self.myList)
</snippet></ROW><ROW><id>4001853</id><snippet>get_authors()</snippet></ROW><ROW><id>4001853</id><snippet>Author: {{ aitem.get_authors|join:", " }}
</snippet></ROW><ROW><id>4001853</id><snippet>{% if "[" == aitem.Author|pprint|slice:":1" %}
    Author: {{ aitem.Author|join:", " }}
{% else %}
    Author: {{ aitem.Author }}
{% endif %}
</snippet></ROW><ROW><id>4001987</id><snippet>pattern='##+(.*?)##+'
</snippet></ROW><ROW><id>4002149</id><snippet>import itertools as it

index = it.count(0) 
processed_data = [[h, w, a[next(index)]] 
                 for h in xrange(0, rows - 1)
                 for w in xrange(0, cols - 1)]
</snippet></ROW><ROW><id>4002149</id><snippet>index = ite.count(0)
indices = it.product(xrange(0, rows-1), xrange(0, cols-1))
processed_data = [[h, w, a[next(index)]] for h, w in indices]
</snippet></ROW><ROW><id>4002149</id><snippet>for</snippet></ROW><ROW><id>4002149</id><snippet>append</snippet></ROW><ROW><id>4002149</id><snippet>for</snippet></ROW><ROW><id>4002149</id><snippet>append</snippet></ROW><ROW><id>4002192</id><snippet>.</snippet></ROW><ROW><id>4002192</id><snippet>#</snippet></ROW><ROW><id>4002192</id><snippet>###hey##</snippet></ROW><ROW><id>4002192</id><snippet>(.*?)</snippet></ROW><ROW><id>4002192</id><snippet>#hey</snippet></ROW><ROW><id>4002192</id><snippet>#</snippet></ROW><ROW><id>4002192</id><snippet>prog = re.compile(r'##([^#]*)##')
</snippet></ROW><ROW><id>4002192</id><snippet>r''</snippet></ROW><ROW><id>4002192</id><snippet>#</snippet></ROW><ROW><id>4002192</id><snippet>###</snippet></ROW><ROW><id>4002291</id><snippet>tcomment.vim</snippet></ROW><ROW><id>4002291</id><snippet>call tcomment#DefineType('aap',              '# %s'             )
call tcomment#DefineType('ada',              '-- %s'            )
call tcomment#DefineType('apache',           '# %s'             )
</snippet></ROW><ROW><id>4002291</id><snippet>call tcomment#DefineType('dosini',           '; %s'             )
</snippet></ROW><ROW><id>4002291</id><snippet>call tcomment#DefineType('dosini',           '# %s'             )
</snippet></ROW><ROW><id>4002291</id><snippet>au BufRead,BufNewFile, *.ini   set filetype=pythonini
call tcomment#DefineType('pythonini',           '# %s'             )
</snippet></ROW><ROW><id>4002291</id><snippet>pythonini</snippet></ROW><ROW><id>4002291</id><snippet>if exists('loaded_tcomment')
    au BufRead,BufNewFile, *.ini   set filetype=pythonini
    call tcomment#DefineType('pythonini',           '# %s'             )
endif
</snippet></ROW><ROW><id>4002456</id><snippet>class uniform_gen(rv_continuous):
    def _rvs(self):
        return mtrand.uniform(0.0,1.0,self._size)
</snippet></ROW><ROW><id>4002456</id><snippet>&gt;&gt;&gt; rvs = stats.uniform.rvs(size=(10000, 1000))
&gt;&gt;&gt; rvs.shape
(10000, 1000)
</snippet></ROW><ROW><id>4002681</id><snippet>grid[y, orig_x]</snippet></ROW><ROW><id>4002681</id><snippet>while x != orig_x:
    height_needed = shadow_map[( (x - orig_x) % x_len)]
</snippet></ROW><ROW><id>4002681</id><snippet>for i in xrange(x_len-1,0,-1):
    height_needed = shadow_map[i]
</snippet></ROW><ROW><id>4002681</id><snippet>    if grid[y, x] - grid[y, orig_x] &gt;= shadow_map[i]:
</snippet></ROW><ROW><id>4002705</id><snippet>TO_DAYS('2008-10-07')</snippet></ROW><ROW><id>4002705</id><snippet>datetime(2008,10,7).toordinal()</snippet></ROW><ROW><id>4002705</id><snippet>from datetime import datetime

query = '2008-10-07'
nbOfDays = datetime.strptime(query, '%Y-%m-%d').toordinal() + 365
</snippet></ROW><ROW><id>4002877</id><snippet>k, v = next(d.items())
</snippet></ROW><ROW><id>4002929</id><snippet>~/.ipython/ipythonrc</snippet></ROW><ROW><id>4003008</id><snippet>// area_codes.php
$area_codes['205'] = 'AL';
$area_codes['251'] = 'AL';
$area_codes['256'] = 'AL';
$area_codes['334'] = 'AL';
$area_codes['907'] = 'AK';

// etc.
</snippet></ROW><ROW><id>4003008</id><snippet>include('area_codes.php');
$area_code = '205';
echo $area_codes[$area_code]; // Output: 'AL'
</snippet></ROW><ROW><id>4003140</id><snippet>The-Evil-MacBook:~ ivucica$ cat test.py
#!/usr/bin/env python
import sys
import os
print sys.argv[0] + " with argcount " + str(len(sys.argv))
if len(sys.argv) &lt; 2 or sys.argv[1] != "2":
    print "doing recursion"
    os.system(sys.argv[0] + " 2");
else:
    print "not doing recursion"

exit(0)
The-Evil-MacBook:~ ivucica$ ./test.py
./test.py with argcount 1
doing recursion
./test.py with argcount 2
not doing recursion
The-Evil-MacBook:~ ivucica$ 
</snippet></ROW><ROW><id>4003140</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>4003140</id><snippet>os.system()</snippet></ROW><ROW><id>4003140</id><snippet>exit(some_return_code_here)</snippet></ROW><ROW><id>4003140</id><snippet>python test.py</snippet></ROW><ROW><id>4003140</id><snippet>system()</snippet></ROW><ROW><id>4003140</id><snippet>system()</snippet></ROW><ROW><id>4003140</id><snippet>    os.system(sys.argv[0] + " 2 &amp;");
</snippet></ROW><ROW><id>4003290</id><snippet>packages</snippet></ROW><ROW><id>4003290</id><snippet>options = dict(optimize=2,
           bundle_files=2,
           compressed=True,
           packages=["oracle"],
           dll_excludes=['oci.dll'])

setup_dict['options'] = {"py2exe":options}
</snippet></ROW><ROW><id>4003719</id><snippet>import cmd

completions = [
    'Mage Slayer (Alara Reborn)',
    'Magefire Wings (Alara Reborn)',
    'Sages of the Anima (Alara Reborn)',
    'Sanctum Plowbeast (Alara Reborn)',
    'Sangrite Backlash (Alara Reborn)',
    'Sanity Gnawers (Alara Reborn)',
    'Sen Triplets (Alara Reborn)'
]

class mycmd(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)

    def do_quit(self, s):
        return True

    def do_add(self, s):
        pass

    def complete_add(self, text, line, begidx, endidx):
        mline = line.partition(' ')[2]
        offs = len(mline) - len(text)
        return [s[offs:] for s in completions if s.startswith(mline)]

if __name__ == '__main__':
    mycmd().cmdloop()
</snippet></ROW><ROW><id>4003781</id><snippet>regex = re.compile(r"\bFILEVERSION \d+,\d+,\d+,\d+\b", re.MULTILINE)
</snippet></ROW><ROW><id>4003781</id><snippet>FILEVERSION</snippet></ROW><ROW><id>4003781</id><snippet>version = "FILEVERSION 2,3,4,5"
modified_str = re.sub(regex, version, str_text)
</snippet></ROW><ROW><id>4003781</id><snippet>FILEVERSION</snippet></ROW><ROW><id>4003781</id><snippet>regex = re.compile(r"\b(FILEVERSION|FileVersion|PRODUCTVERSION|ProductVersion) \d+,\d+,\d+,\d+\b", re.MULTILINE)
</snippet></ROW><ROW><id>4003781</id><snippet>\1</snippet></ROW><ROW><id>4003781</id><snippet>version = r"\1 2,3,4,5"
modified_str = re.sub(regex, version, str_text)
</snippet></ROW><ROW><id>4003944</id><snippet>k = len(x_values)</snippet></ROW><ROW><id>4003944</id><snippet>k = len(x_values) - 1</snippet></ROW><ROW><id>4004028</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>4004028</id><snippet>daemon</snippet></ROW><ROW><id>4004028</id><snippet>threading.Thread</snippet></ROW><ROW><id>4004028</id><snippet>non-daemon</snippet></ROW><ROW><id>4004028</id><snippet>.setDaemon</snippet></ROW><ROW><id>4004028</id><snippet>my_thread = threading.Thread(target=main_func, args=args, kwargs=kwargs)
my_thread.setDaemon(True)
my_thread.start()
</snippet></ROW><ROW><id>4004378</id><snippet>tags_list = [re.sub(r"\s+", "+", tag) for tag in tags_list]
</snippet></ROW><ROW><id>4004378</id><snippet>r</snippet></ROW><ROW><id>4004378</id><snippet>replace whitespaces within each element of the list with "+"</snippet></ROW><ROW><id>4004378</id><snippet>+</snippet></ROW><ROW><id>4004378</id><snippet>r"\s"</snippet></ROW><ROW><id>4004378</id><snippet>r"\s+"</snippet></ROW><ROW><id>4004439</id><snippet>&gt;&gt;&gt; print 'test \\u0259'.decode('unicode-escape')
test ə
</snippet></ROW><ROW><id>4004453</id><snippet>&gt;&gt;&gt; alist = [[1,2,(3,4)],[5,6,(7,8)],[9,10,(11,12)]]
&gt;&gt;&gt; [x[:-1] for x in alist]       # &lt;-------------
[[1, 2], [5, 6], [9, 10]]
</snippet></ROW><ROW><id>4004453</id><snippet>&gt;&gt;&gt; alist = [[1,2,(3,4)],[5,6,(7,8)],[9,10,(11,12)]]
&gt;&gt;&gt; for x in alist: del x[-1]       # &lt;-------------
... 
&gt;&gt;&gt; alist
[[1, 2], [5, 6], [9, 10]]
</snippet></ROW><ROW><id>4004869</id><snippet>Groups</snippet></ROW><ROW><id>4004869</id><snippet>GroupTags</snippet></ROW><ROW><id>4004869</id><snippet>Topics</snippet></ROW><ROW><id>4004869</id><snippet>TopicTags</snippet></ROW><ROW><id>4004869</id><snippet>Tag</snippet></ROW><ROW><id>4004869</id><snippet>Tag</snippet></ROW><ROW><id>4004869</id><snippet>Group</snippet></ROW><ROW><id>4004869</id><snippet>Topic</snippet></ROW><ROW><id>4004869</id><snippet>Tag</snippet></ROW><ROW><id>4004869</id><snippet>topics</snippet></ROW><ROW><id>4004869</id><snippet>Topic</snippet></ROW><ROW><id>4004869</id><snippet>group</snippet></ROW><ROW><id>4004869</id><snippet>Group</snippet></ROW><ROW><id>4004869</id><snippet>Group</snippet></ROW><ROW><id>4004869</id><snippet>tags</snippet></ROW><ROW><id>4004869</id><snippet>GroupsTags</snippet></ROW><ROW><id>4004869</id><snippet>Tag</snippet></ROW><ROW><id>4004869</id><snippet>Tag</snippet></ROW><ROW><id>4004869</id><snippet>groups</snippet></ROW><ROW><id>4004869</id><snippet>topics</snippet></ROW><ROW><id>4004869</id><snippet>class Group(db.Model):
    # All of my group-specific data here.

class Topic(db.Model):
    title = db.StringProperty(required=True)
    group = db.ReferenceProperty(Group, collection='topics')
    # other topic-specific data here.

class Tag(db.Model):
    text = db.StringProperty(required=True)

class GroupTags(db.Model):
    group = db.ReferenceProperty(Group, collection='tags')
    tag = db.ReferenceProperty(Tag, collection='groups')

class TopicTags(db.Model):
    topic = db.ReferenceProperty(Topic, collection='tags')
    tag = db.ReferenceProperty(Tag, collection='topics')
</snippet></ROW><ROW><id>4005194</id><snippet>def clip(v):
    # Clip to 0-255
    v = max(v, 0)
    v = min(v, 255)
    return v

def yuvToRgb(y, u, v):
    c = y - 16
    d = u - 128
    e = v - 128
    R = (298 * c) + (409 * e) + 128
    G = (298 * c) - (100 * d) - (208 * e) + 128
    B = (298 * c) + (516 * d) + 128
    R &gt;&gt;= 8
    G &gt;&gt;= 8
    B &gt;&gt;= 8
    return (clip(R), clip(G), clip(B))

b = bytearray('\x84K\x7f\x86K\x7f\x86G\x7f~K\x7f~I}\x85K}\x85') # etc...
RGB = []
for i in xrange(0, len(b), 3):
    RGB.append(yuvToRgb(b[3*i], b[3*i+1], b[3*i+2]))
</snippet></ROW><ROW><id>4005331</id><snippet>def recursivelyMark(nodeID, nodes):
    (connections, visited) = nodes[nodeID]
    if visited:
        return
    nodes[nodeID][1] = True
    for connectedNodeID in connections:
        recursivelyMark(connectedNodeID, nodes)

def main():
    nodes = [[[1], False], [[0], False], [[3], False], [[2], False], [[], False], [[], False]]
    componentsCount = 0
    for (nodeID, (connections, visited)) in enumerate(nodes):
        if visited == False:
            componentsCount += 1
            recursivelyMark(nodeID, nodes)
    print(componentsCount)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4005370</id><snippet> /**
 * notify_init:
 * @app_name: The name of the application initializing libnotify.
 *
 * Initialized libnotify. This must be called before any other functions.
 *
 * Returns: %TRUE if successful, or %FALSE on error.
 */
gboolean
notify_init(const char *app_name)
{
    GError *error = NULL;
    DBusGConnection *bus = NULL;

    g_return_val_if_fail(app_name != NULL, FALSE);
    g_return_val_if_fail(*app_name != '\0', FALSE);

    if (_initted)
        return TRUE;

    _app_name = g_strdup(app_name);

    g_type_init();

    bus = dbus_g_bus_get(DBUS_BUS_SESSION, &amp;error);

    if (error != NULL)
    {
        g_message("Unable to get session bus: %s", error-&gt;message);
        g_error_free(error);
        return FALSE;
    }

    _proxy = dbus_g_proxy_new_for_name(bus,
                                       NOTIFY_DBUS_NAME,
                                       NOTIFY_DBUS_CORE_OBJECT,
                                       NOTIFY_DBUS_CORE_INTERFACE);
    dbus_g_connection_unref(bus);

    dbus_g_object_register_marshaller(notify_marshal_VOID__UINT_STRING,
                                      G_TYPE_NONE,
                                      G_TYPE_UINT,
                                      G_TYPE_STRING, G_TYPE_INVALID);

    dbus_g_proxy_add_signal(_proxy, "NotificationClosed",
                            G_TYPE_UINT, G_TYPE_INVALID);
    dbus_g_proxy_add_signal(_proxy, "ActionInvoked",
                            G_TYPE_UINT, G_TYPE_STRING,
                            G_TYPE_INVALID);

    _initted = TRUE;

    return TRUE;
}
</snippet></ROW><ROW><id>4005373</id><snippet>loc = Location.objects.get(pk=1)
obj.location = loc
obj.save()
</snippet></ROW><ROW><id>4005373</id><snippet>obj</snippet></ROW><ROW><id>4005412</id><snippet>__hash__</snippet></ROW><ROW><id>4005412</id><snippet>return 0</snippet></ROW><ROW><id>4005412</id><snippet>__eq__</snippet></ROW><ROW><id>4005412</id><snippet>tuplehash</snippet></ROW><ROW><id>4005412</id><snippet>tupleobject.c</snippet></ROW><ROW><id>4005527</id><snippet>checkinstall</snippet></ROW><ROW><id>4005527</id><snippet>cd &lt;PACKAGE_NAME&gt;
</snippet></ROW><ROW><id>4005527</id><snippet>sudo checkinstall -D --fstrans=no python setup.py install
</snippet></ROW><ROW><id>4005527</id><snippet>sudo dpkg -r &lt;PACKAGE_NAME&gt;
</snippet></ROW><ROW><id>4005527</id><snippet>checkinstall</snippet></ROW><ROW><id>4005800</id><snippet>&gt;&gt;&gt; myList = [1, 'from form', [1,2]]
&gt;&gt;&gt; myList[1]
'from form'
&gt;&gt;&gt; myList[2]
[1, 2]
&gt;&gt;&gt; myList[2].append('t')
&gt;&gt;&gt; myList
[1, 'from form', [1, 2, 't']]
&gt;&gt;&gt; myList[1].append('t')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'append'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4005909</id><snippet>import os
fp = os.path.join(request.folder,'private','tables.pkl')    
</snippet></ROW><ROW><id>4005978</id><snippet>encoding = open(__file__).encoding</snippet></ROW><ROW><id>4006044</id><snippet>unittest.TestLoader.sortTestMethodsUsing</snippet></ROW><ROW><id>4006044</id><snippet>cmp</snippet></ROW><ROW><id>4006044</id><snippet>import unittest
unittest.TestLoader.sortTestMethodsUsing = lambda _, x, y: cmp(y, x)
</snippet></ROW><ROW><id>4006070</id><snippet>from random import sample

sample(range(0, 100), 10)
</snippet></ROW><ROW><id>4006127</id><snippet>BaseSync</snippet></ROW><ROW><id>4006127</id><snippet>BaseSync</snippet></ROW><ROW><id>4006127</id><snippet>PluginA</snippet></ROW><ROW><id>4006127</id><snippet>import sys
class BaseSync(object):
    def __init__(self):
        path=sys.modules[self.__module__].__file__
</snippet></ROW><ROW><id>4006127</id><snippet>path</snippet></ROW><ROW><id>4006264</id><snippet>db.connect  
</snippet></ROW><ROW><id>4006264</id><snippet>db.connect()
</snippet></ROW><ROW><id>4006456</id><snippet>for line in r.readlines():
    line = line.rstrip()      # Remove trailing whitespace.
    if line:                  # Only process non-empty lines.
        ref = line.split();
        print ref[0], ref[1]
</snippet></ROW><ROW><id>4006524</id><snippet>Test.myList
</snippet></ROW><ROW><id>4006685</id><snippet>etree.tostring(div)
</snippet></ROW><ROW><id>4006735</id><snippet>import winsound
winsound.PlaySound('alert.wav')
</snippet></ROW><ROW><id>4006735</id><snippet>popen</snippet></ROW><ROW><id>4006735</id><snippet>import pygame
pygame.init()

pygame.mixer.music.load("alert.ogg")
pygame.mixer.music.play()
pygame.event.wait()
</snippet></ROW><ROW><id>4006735</id><snippet>popen</snippet></ROW><ROW><id>4006735</id><snippet>from os import popen
cmd = "mplayer alert.ogg"
popen(cmd)
</snippet></ROW><ROW><id>4006781</id><snippet>import os
print os.getenv("SystemDrive")
</snippet></ROW><ROW><id>4006827</id><snippet>course_name = line[16:45].strip()
</snippet></ROW><ROW><id>4007052</id><snippet>import zipfile

zf = zipfile.ZipFile('test.zip')

uncompress_size = sum((file.file_size for file in zf.infolist()))

extracted_size = 0

for file in zf.infolist():
    extracted_size += file.file_size
    print "%s %%" % (extracted_size * 100/uncompress_size)
    zf.extract(file)
</snippet></ROW><ROW><id>4007052</id><snippet> print "%s %%\r" % (extracted_size * 100/uncompress_size),
</snippet></ROW><ROW><id>4007310</id><snippet>from __future__ import barry_as_FLUFL</snippet></ROW><ROW><id>4007310</id><snippet>!=</snippet></ROW><ROW><id>4007310</id><snippet>&lt;&gt;</snippet></ROW><ROW><id>4007352</id><snippet>Tk</snippet></ROW><ROW><id>4007412</id><snippet>&gt;&gt;&gt; print 'number is ' + str(3)
number is 3
</snippet></ROW><ROW><id>4007412</id><snippet>"Value of obj: " + obj</snippet></ROW><ROW><id>4007412</id><snippet>obj</snippet></ROW><ROW><id>4007412</id><snippet>echo "&lt;p&gt;Hello ".$username."!&lt;/p&gt;";</snippet></ROW><ROW><id>4007412</id><snippet>print "Value of obj: %r" % obj</snippet></ROW><ROW><id>4007412</id><snippet>&gt;&gt;&gt; "number is {0}".format(3)
'number is 3'
</snippet></ROW><ROW><id>4007412</id><snippet>&gt;&gt;&gt; print 'number is %(number)s' % dict(number=3)
number is 3
</snippet></ROW><ROW><id>4007412</id><snippet>&gt;&gt;&gt; "number is {number}".format(number=3)
'number is 3'
</snippet></ROW><ROW><id>4007412</id><snippet>%</snippet></ROW><ROW><id>4007526</id><snippet>def main():
    application = webapp.WSGIApplication([
         ('/rechnungsdatencontainer/([a-z0-9_-]+)', RechnungsdatencontainerHandler),
         ('/empfaenger/([A-Za-z0-9_-]+)/rechnungen/([A-Za-z0-9_-]+)\.?(json|pdf|xml|invoic|html)?', RechnungslisteHandler),
         ('/admin/credentials', CredentialsHandler),
         ('/', Homepage)],
        debug=True)
    util.run_wsgi_app(application)
</snippet></ROW><ROW><id>4007526</id><snippet>RechnungsdatencontainerHandler.get()</snippet></ROW><ROW><id>4007526</id><snippet>RechnungslisteHandler().get()</snippet></ROW><ROW><id>4007526</id><snippet>CredentialsHandler</snippet></ROW><ROW><id>4007526</id><snippet>Homepage</snippet></ROW><ROW><id>4007526</id><snippet>class RechnungsdatencontainerHandler(webapp.RequestHandler):
    def get(containerid):
        ....

class RechnungslisteHandler(webapp.RequestHandler):
    def get(empfaenger, rechung, fmt):
        ....
</snippet></ROW><ROW><id>4007526</id><snippet>(?P&lt;kundennr&gt;[A-Za-z0-9_-]+)</snippet></ROW><ROW><id>4007526</id><snippet>kwargs</snippet></ROW><ROW><id>4007695</id><snippet>DB</snippet></ROW><ROW><id>4007695</id><snippet>#!/usr/bin/python

import shelve                   #Module:Shelve is imported to achieve persistence


Accounts = 0

Victor = {'Name':'Victor Hughes','Acctype':'Savings'} #???
Xavier = {'Name':'Xavier Bosco','Acctype':'Savings'}
Louis = {'Name':'Louis Philip','Acctype':'Current'}
Beverly = {'Name':'Beverly Dsilva','Acctype':'Current'}


def open_shelf(name='shelfile.shl'):
    global Accounts
    Accounts = shelve.open(name)          #Accounts = {}
    # why are you adding this every time? is this just debugging code?
    Accounts['Louis']= Louis
    Accounts['Beverly']= Beverly
    Accounts['Xavier']= Xavier
    Accounts['Victor']= Victor


def close_shelf():
    Accounts.close()
</snippet></ROW><ROW><id>4007695</id><snippet>DB.open_shelf()</snippet></ROW><ROW><id>4007695</id><snippet>DB.close_shelf</snippet></ROW><ROW><id>4007695</id><snippet>shelve</snippet></ROW><ROW><id>4007695</id><snippet>DB</snippet></ROW><ROW><id>4007695</id><snippet>shelve</snippet></ROW><ROW><id>4007771</id><snippet>import pickle

friend = {}
with open('friends.txt') as f:
    while 1:
        try:
            friend.update(pickle.load(f))
        except EOFError:
            break # no more data in the file

for person in friend.values():
    print '{Name}\t{Email}\t{Phone}'.format(**person)
</snippet></ROW><ROW><id>4007871</id><snippet>lxml.etree.iterparse(path, tag=tag)
</snippet></ROW><ROW><id>4007945</id><snippet>(xmin, ymin, xmax, ymax)</snippet></ROW><ROW><id>4007945</id><snippet>[xmin, ymin, xmax, ymax]</snippet></ROW><ROW><id>4007945</id><snippet>[(min(t[0] for t in lst),
  min(t[1] for t in lst),
  max(t[0] for t in lst),
  max(t[1] for t in lst))
 for lst in a]
</snippet></ROW><ROW><id>4008074</id><snippet>line</snippet></ROW><ROW><id>4008074</id><snippet>from optparse import OptionParser

args = line.split()

parser = OptionParser()
parser.add_option("-t", "--track", dest="track_number", type="int",
                  help="track number")
parser.add_option("-n", "--cdname", dest="cd_name", type="string",
                  help="CD name")

# args[0] contains the actual command ("addcd" in this example).
(options, positional_args) = add_cd_parser.parse_args(args[1:])

if options.track_number != None and options.cd_name != None:
    cd_obj= CD()
    cd_obj.addCD(options.track_number, options.cd_name)
    print "add CD (track %d, name %s)" % (options.track_number, options.cd_name)
</snippet></ROW><ROW><id>4008074</id><snippet>OptionParser</snippet></ROW><ROW><id>4008074</id><snippet>(options, args) = parsers[args[0]].parse_args(args[1:])
</snippet></ROW><ROW><id>4008078</id><snippet>nums = iter(numbers.split())
grid = [[next(nums) for col in range(20)] for row in range(20)]
</snippet></ROW><ROW><id>4008078</id><snippet>for</snippet></ROW><ROW><id>4008078</id><snippet>grid = [[0]*20 for row in range(20)]
nums = iter(numbers.split())
for i in xrange(20):
    for j in xrange(20):
        grid[i][j] = next(nums)
</snippet></ROW><ROW><id>4008078</id><snippet>next</snippet></ROW><ROW><id>4008078</id><snippet>next</snippet></ROW><ROW><id>4008078</id><snippet>def items(numbers):
    for x in range(0, len(numbers), 3):
        yield numbers[x:x+2]

 nums = items(numbers)
 for i in xrange(20):
     for j in xrange(20):
         grid[i][j] = next(nums)
</snippet></ROW><ROW><id>4008103</id><snippet>unquote</snippet></ROW><ROW><id>4008103</id><snippet>old</snippet></ROW><ROW><id>4008103</id><snippet>None</snippet></ROW><ROW><id>4008103</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>4008103</id><snippet>href</snippet></ROW><ROW><id>4008103</id><snippet>old</snippet></ROW><ROW><id>4008182</id><snippet>&gt;&gt;&gt; import operator

&gt;&gt;&gt; li = [(1106257, (255, 255, 255)), (1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (9, (249, 249, 249)), (1, (64, 64, 126)), (406, (247, 247, 251))]
&gt;&gt;&gt; li.sort(key=operator.itemgetter(0))
&gt;&gt;&gt; li
[(1, (16, 16, 118)), (1, (32, 32, 128)), (1, (48, 48, 122)), (1, (64, 64, 126)),
 (9, (249, 249, 249)), (406, (247, 247, 251)), (1106257, (255, 255, 255))]
</snippet></ROW><ROW><id>4008182</id><snippet>operator.itemgetter(2, 1)</snippet></ROW><ROW><id>4008182</id><snippet>key</snippet></ROW><ROW><id>4008562</id><snippet>In [18]: '{s:{c}^{n}}'.format(s='dog',n=5,c='x')
Out[18]: 'xdogx'
</snippet></ROW><ROW><id>4008605</id><snippet> php -l filename
</snippet></ROW><ROW><id>4008706</id><snippet>def is_member(value, array):
    if len(array) == 0:
        return False
    return value == array[0] or is_member(value, array[1:])
</snippet></ROW><ROW><id>4008785</id><snippet>{%if%}</snippet></ROW><ROW><id>4008785</id><snippet>{%for%}</snippet></ROW><ROW><id>4008785</id><snippet>string.Template</snippet></ROW><ROW><id>4008785</id><snippet>str()</snippet></ROW><ROW><id>4008785</id><snippet>format()</snippet></ROW><ROW><id>4008785</id><snippet>string.Template</snippet></ROW><ROW><id>4008785</id><snippet>&lt;html&gt;&lt;head&gt;&lt;title&gt;Getting worked up over Python indentations&lt;/title&gt;&lt;/head&gt;&lt;body&gt;
&lt;table&gt;&lt;tbody&gt;
{%for object in objects%}
    &lt;tr class="{%cycle 'even' 'odd'%}"&gt;&lt;td&gt;Row: {{object}}&lt;/td&gt;&lt;/tr&gt;
{%endfor%}
&lt;/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>4008785</id><snippet>def myview( request ):
    render_to_response( 'my_template.html',
         { 'objects':range(10) }
    )
</snippet></ROW><ROW><id>4008955</id><snippet>def min_of_two(x, y):
    if x &gt;= y: return x
    else: return y

def min_in_list(numbers):
    return reduce(min_of_two, numbers)
</snippet></ROW><ROW><id>4008955</id><snippet>reduce</snippet></ROW><ROW><id>4008955</id><snippet>reduce</snippet></ROW><ROW><id>4009284</id><snippet>a = "this is the right string"
b = "this is right the string"

sum([1 for i,v in zip(a.split(), b.split()) if i == v])
</snippet></ROW><ROW><id>4009344</id><snippet>&gt;&gt;&gt; lst = [(['c', 'a', 'b'], 10), (['c', 'a', 'b'], 9),(['h','b'],2)]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for i, j in lst:
    d[tuple(i)] = max(d[tuple(i)], j)          # assuming positive numbers


&gt;&gt;&gt; d
defaultdict(&lt;class 'int'&gt;, {('h', 'b'): 2, ('c', 'a', 'b'): 10})
</snippet></ROW><ROW><id>4009396</id><snippet>urllib.urlopen(url[, data[, proxies]])
</snippet></ROW><ROW><id>4009396</id><snippet>proxies={}</snippet></ROW><ROW><id>4009493</id><snippet>&lt;?
    $rowData = array( 
        0=&gt; array('index'=&gt;1, 'Score'=&gt;"level 1", 'amount'=&gt;12.24), 
        1=&gt; array('index'=&gt;3, 'Score'=&gt;"level 4", 'amount'=&gt;14.61),
        2=&gt; array('index'=&gt;9, 'Score'=&gt;"level 10", 'amount'=&gt;42.35),
        3=&gt; array('index'=&gt;15, 'Score'=&gt;"level 2", 'amount'=&gt;-8.12),
        4=&gt; array('index'=&gt;12, 'Score'=&gt;"level 10", 'amount'=&gt;16.5)
        // example Raw Data with non-unique levels
    );
    $numOfScores = 15; // Predefined Score Level Max
    foreach($rowData as $c){
        $cols[] = $c['index']; //Create index row
        $score = str_replace("level ","",$c['Score']); // split the score so it is only numeric
        $levels[$score][] = $c; //create a 2-D array based on the level
    }
    echo "&lt;table&gt;&lt;tr&gt;&lt;th colspan=".(sizeof($cols)+1)."&gt;Scores:&lt;/th&gt;&lt;/tr&gt;";
    for($ii = 1; $ii &lt; $numOfScores; $ii++){ // Go through the levels
        echo "&lt;tr&gt;&lt;td&gt;Level ".$ii."&lt;/td&gt;";
        for($i = 0; $i &lt; sizeof($cols); $i++){
            echo "&lt;td&gt;";
            if(isset($levels[$ii])){ // If I have a level, let's print it in the right column
                foreach($levels[$ii] as $lvl)
                    if($cols[$i] == $lvl['index']) echo $lvl['amount'];
            }
            echo "&lt;/td&gt;";
        }
        echo "&lt;tr&gt;";
    }
    echo "&lt;td&gt;Index:&lt;/td&gt;";
    foreach($cols as $c){
        echo "&lt;td&gt;$c&lt;/td&gt;";
    }
    echo "&lt;/table&gt;";
    ?&gt;
</snippet></ROW><ROW><id>4009493</id><snippet>Scores:
Level 1 12.24               
Level 2             -8.12   
Level 3                 
Level 4     14.61           
Level 5                 
Level 6                 
Level 7                 
Level 8                 
Level 9                 
Level 10        42.35       16.5
Level 11                    
Level 12                    
Level 13                    
Level 14                    
Index:  1   3   9   15  12
</snippet></ROW><ROW><id>4009576</id><snippet>def recurse_tree(node):
    tree = {}
    for element in node:
        name = element.get('name')
        tree[name] = recurse_tree(element)
    if tree:
        return tree
    else:
        return 'No children.'
</snippet></ROW><ROW><id>4009681</id><snippet>,</snippet></ROW><ROW><id>4009681</id><snippet>print</snippet></ROW><ROW><id>4009681</id><snippet>"Hi"</snippet></ROW><ROW><id>4009709</id><snippet>QListWidget</snippet></ROW><ROW><id>4009709</id><snippet>setSelectionMode()</snippet></ROW><ROW><id>4009709</id><snippet>QAbstractItemView::ExtendedSelection</snippet></ROW><ROW><id>4009709</id><snippet>itemSelectionChanged()</snippet></ROW><ROW><id>4009709</id><snippet>selectedItems()</snippet></ROW><ROW><id>4009709</id><snippet>QList</snippet></ROW><ROW><id>4009709</id><snippet>QListWidgetItem</snippet></ROW><ROW><id>4009726</id><snippet>(server, directory, file_name)</snippet></ROW><ROW><id>4009726</id><snippet>(server, full_file_name_including_directory)</snippet></ROW><ROW><id>4009726</id><snippet>intern()</snippet></ROW><ROW><id>4009807</id><snippet>h[1] &gt;&gt;&gt; print x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'x' is not defined
</snippet></ROW><ROW><id>4009807</id><snippet>db.connect</snippet></ROW><ROW><id>4009807</id><snippet>h[1] &gt;&gt;&gt; def hello(): pass
     ... 
h[1] &gt;&gt;&gt; x = hello
h[1] &gt;&gt;&gt; print x
&lt;function hello at 0x100461c80&gt;
</snippet></ROW><ROW><id>4009872</id><snippet>urlopen('http://www.exmaple.com/', timeout=5)
</snippet></ROW><ROW><id>4009942</id><snippet>def processRecords():
    print ("grade report\n").center(60).upper()
    print "name".upper(),"course".rjust(22).upper(),"grade".rjust(32).upper()
    print "-" * 60

    rec_count = 0
    for line in open("grades.txt","r"):
        name   = line[0:20]
        course = line[20:50]
        grade  = line[50:51]
        print name, course.rjust(3), grade.rjust(3)
        rec_count += 1
    return rec_count
</snippet></ROW><ROW><id>4009942</id><snippet>globals</snippet></ROW><ROW><id>4010153</id><snippet>HKEY_LOCAL_MACHINE/Software/YourSoftware</snippet></ROW><ROW><id>4010153</id><snippet>HKEY_CURRENT_USER/Software/YourSoftware</snippet></ROW><ROW><id>4010153</id><snippet>HKLM</snippet></ROW><ROW><id>4010153</id><snippet>HKLM</snippet></ROW><ROW><id>4010213</id><snippet>python -c "import MythDB.MythTV"
</snippet></ROW><ROW><id>4010280</id><snippet>def overlapping(a,b):
    for char1 in a:
        for char2 in b:
            if char1 == char2: return True
    return False
</snippet></ROW><ROW><id>4010305</id><snippet>CFG["AlwOnTop"] = 1 - CFG["AlwOnTop"]
</snippet></ROW><ROW><id>4010305</id><snippet>CFG["AlwOnTop"] = not CFG["AlwOnTop"]
</snippet></ROW><ROW><id>4010305</id><snippet>def Mwindow_stayontop(self, event):
    CFG["AlwOnTop"] = 1 - CFG["AlwOnTop"]
    self.SetWindowStyle(wx.DEFAULT_FRAME_STYLE | CFG["AlwOnTop"]*wx.STAY_ON_TOP)
</snippet></ROW><ROW><id>4010333</id><snippet>import operator
sorted_x = sorted(x, key=operator.attrgetter('score'))
</snippet></ROW><ROW><id>4010333</id><snippet>x.sort(key=operator.attrgetter('score'))
</snippet></ROW><ROW><id>4010794</id><snippet>  def readRecord():
     global name, course, grade, eof

     studentRecord = gradeFile.readline()  # &lt;----- HERE

     if studentRecord == "":
        eof = True
     else:
        name = studentRecord[0:20]
        course = studentRecord[20:50]
        grade = studentRecord[50:51]
        eof = False
</snippet></ROW><ROW><id>4010952</id><snippet>//use socket to construct a QDataStream object, like before
QDataStream in(&amp;socket); 
//in.setVersion(QDataStream::Qt_4_0);
char buffer[1024] = {0};
//readRawData takes a char to dump to and the length, 
//so I'm sure there is a better way to do this. It worked for my example.
in.readRawData(buffer, socket.bytesAvailable()); 
QString result;
result = buffer;
ui-&gt;resultLabel-&gt;setText(result);
</snippet></ROW><ROW><id>4011224</id><snippet>new_list = set(LISTA) -  set(LISTB) # if you don't have duplicate
for i in new_list:
   print i
</snippet></ROW><ROW><id>4011224</id><snippet>for i in LISTA:
   if i in LISTB:
      continue
   print i
</snippet></ROW><ROW><id>4011305</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; def find_fwd_iter(S, i):
...     j = bisect.bisect_left(S, i)
...     for k in xrange(j, len(S)):
...         yield S[k]
...
&gt;&gt;&gt; def find_bkwd_iter(S, i):
...     j = bisect.bisect_left(S, i)
...     for k in xrange(j, -1, -1):
...         yield S[k]
...
&gt;&gt;&gt; L = [100, 150, 200, 300, 400]
&gt;&gt;&gt; list(find_fwd_iter(L, 200))
[200, 300, 400]
&gt;&gt;&gt; list(find_bkwd_iter(L, 200))
[200, 150, 100]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4011336</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"\s*problem\s*=\s*None\s*,?\s*", "", "abc( problem = None , )")
'abc()'
&gt;&gt;&gt; re.sub(r"\s*problem\s*=\s*None\s*,?\s*", "", "abc( problem = None  )")
'abc()'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>4011566</id><snippet>_contents()</snippet></ROW><ROW><id>4011566</id><snippet>def _contents(items, laplace=False):
    # count occurrences of values
    counts = {}
    for item in items:
        counts[item] = counts.get(item,0) + 1.0
    # normalize
    for k in counts:
        if laplace:
            counts[k] += 1.0
            counts[k] /= (len(items)+len(counts))
        else:
            counts[k] /= len(items)
    return counts
</snippet></ROW><ROW><id>4011566</id><snippet>Line 194</snippet></ROW><ROW><id>4011566</id><snippet># Estimate P(value|class,dim)
nb.p_conditional[i][j] = _contents(values, True)
</snippet></ROW><ROW><id>4011566</id><snippet>True</snippet></ROW><ROW><id>4011566</id><snippet>False</snippet></ROW><ROW><id>4011566</id><snippet># without
&gt;&gt;&gt; carmodel.p_conditional
[[{'Red': 0.40000000000000002, 'Yellow': 0.59999999999999998},
  {'SUV': 0.59999999999999998, 'Sports': 0.40000000000000002},
  {'Domestic': 0.59999999999999998, 'Imported': 0.40000000000000002}],
 [{'Red': 0.59999999999999998, 'Yellow': 0.40000000000000002},
  {'SUV': 0.20000000000000001, 'Sports': 0.80000000000000004},
  {'Domestic': 0.40000000000000002, 'Imported': 0.59999999999999998}]]

# with
&gt;&gt;&gt; carmodel.p_conditional
[[{'Red': 0.42857142857142855, 'Yellow': 0.5714285714285714},
  {'SUV': 0.5714285714285714, 'Sports': 0.42857142857142855},
  {'Domestic': 0.5714285714285714, 'Imported': 0.42857142857142855}],
 [{'Red': 0.5714285714285714, 'Yellow': 0.42857142857142855},
  {'SUV': 0.2857142857142857, 'Sports': 0.7142857142857143},
  {'Domestic': 0.42857142857142855, 'Imported': 0.5714285714285714}]]
</snippet></ROW><ROW><id>4011566</id><snippet>_contents()</snippet></ROW><ROW><id>4011756</id><snippet>import dateutil.parser as dparser
import parsedatetime.parsedatetime as pdt
import parsedatetime.parsedatetime_consts as pdc
import time
import datetime
import re
import pprint
pdt_parser = pdt.Calendar(pdc.Constants())   
record_time_pat=re.compile(r'^(.+)\s+:')
sex_pat=re.compile(r'\b(he|she)\b',re.IGNORECASE)
death_time_pat=re.compile(r'died\s+(.+hours later).*$',re.IGNORECASE)
symptom_pat=re.compile(r'[,-]')

def parse_record(astr):    
    match=record_time_pat.match(astr)
    if match:
        record_time=dparser.parse(match.group(1))
        astr,_=record_time_pat.subn('',astr,1)
    else: sys.exit('Can not find record time')
    match=sex_pat.search(astr)    
    if match:
        sex=match.group(1)
        sex='Female' if sex.lower().startswith('s') else 'Male'
        astr,_=sex_pat.subn('',astr,1)
    else: sys.exit('Can not find sex')
    match=death_time_pat.search(astr)
    if match:
        death_time,date_type=pdt_parser.parse(match.group(1),record_time)
        if date_type==2:
            death_time=datetime.datetime.fromtimestamp(
                time.mktime(death_time))
        astr,_=death_time_pat.subn('',astr,1)
        is_dead=True
    else:
        death_time=None
        is_dead=False
    astr=astr.replace('and','')    
    symptoms=[s.strip() for s in symptom_pat.split(astr)]
    return {'Record Time': record_time,
            'Sex': sex,
            'Death Time':death_time,
            'Symptoms': symptoms,
            'Death':is_dead}


if __name__=='__main__':
    tests=[('11/11/2010 - 09:00am : He got nausea, vomiting and died 4 hours later',
            {'Sex':'Male',
             'Symptoms':['got nausea', 'vomiting'],
             'Death':True,
             'Death Time':datetime.datetime(2010, 11, 11, 13, 0),
             'Record Time':datetime.datetime(2010, 11, 11, 9, 0)}),
           ('11/11/2010 - 09:00am : She got heart burn, vomiting of blood and died 1 hours later in the operation room',
           {'Sex':'Female',
             'Symptoms':['got heart burn', 'vomiting of blood'],
             'Death':True,
             'Death Time':datetime.datetime(2010, 11, 11, 10, 0),
             'Record Time':datetime.datetime(2010, 11, 11, 9, 0)})
           ]

    for record,answer in tests:
        result=parse_record(record)
        pprint.pprint(result)
        assert result==answer
        print
</snippet></ROW><ROW><id>4011756</id><snippet>{'Death': True,
 'Death Time': datetime.datetime(2010, 11, 11, 13, 0),
 'Record Time': datetime.datetime(2010, 11, 11, 9, 0),
 'Sex': 'Male',
 'Symptoms': ['got nausea', 'vomiting']}

{'Death': True,
 'Death Time': datetime.datetime(2010, 11, 11, 10, 0),
 'Record Time': datetime.datetime(2010, 11, 11, 9, 0),
 'Sex': 'Female',
 'Symptoms': ['got heart burn', 'vomiting of blood']}
</snippet></ROW><ROW><id>4011871</id><snippet>\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b
</snippet></ROW><ROW><id>4012063</id><snippet>viewBox="0 -500 2752.766 2537.631"</snippet></ROW><ROW><id>4012063</id><snippet>height="476.7276" width="634.26801"</snippet></ROW><ROW><id>4012063</id><snippet>viewBox="1000 -500 1000 1000"</snippet></ROW><ROW><id>4012063</id><snippet>stroke-width:0.99986893;</snippet></ROW><ROW><id>4012063</id><snippet>viewBox="1200 -5 450 450"</snippet></ROW><ROW><id>4012063</id><snippet>&lt;g class="land fr" id="fr" 
 transform="matrix(1.229834,0,0,1.1888568,-278.10861,-149.0924)" 
 style="fill-opacity:1;stroke:#ffffff;stroke-width:10;
       stroke-miterlimit:3.97446823;stroke-dasharray:none;stroke-opacity:1;
       fill:#00ff00"&gt;
</snippet></ROW><ROW><id>4012063</id><snippet>&lt;path d="M 2218.0062,810.62352 C 2217.5173,811.14292 2217.698,811.38357
         2218.5472,811.34547 C 2218.3665,811.10481 2218.1868,810.86417 
         2218.0062,810.62352" 
 id="path2404" 
 style="fill-opacity:1;stroke:#ffffff;stroke-width:0.99986994;
       stroke-miterlimit:3.97446823;stroke-dasharray:none;stroke-opacity:1;
       fill:#6BAED6"&gt;
</snippet></ROW><ROW><id>4012063</id><snippet>&lt;path d="M 2218.0062,810.62352 C 2217.5173,811.14292 2217.698,811.38357 
         2218.5472,811.34547 C 2218.3665,811.10481 2218.1868,810.86417 
         2218.0062,810.62352" id="path2404"&gt;
</snippet></ROW><ROW><id>4012297</id><snippet>from collections import Counter

c = Counter()
for s in (listOfLists):
    c.update(s)

for item, nbItems in c.iteritems():
    if nbItems == 3:
        print '%s belongs to three lists.' % item
</snippet></ROW><ROW><id>4012297</id><snippet>counter = {}

for s in (listOfLists):
    for elem in s:
        counter[elem] = counter.get(elem, 0) + 1

for item, nbItems in counter.iteritems():
    if nbItems == 3:
        print '%s belongs to three lists.' % item
</snippet></ROW><ROW><id>4012311</id><snippet>P.figure(figsize=(i,j))
</snippet></ROW><ROW><id>4012688</id><snippet>&lt;% import cherrypy %&gt;</snippet></ROW><ROW><id>4012688</id><snippet>&lt;%! import cherrypy %&gt;</snippet></ROW><ROW><id>4012700</id><snippet>md5$&lt;salt&gt;$&lt;hash&gt;
</snippet></ROW><ROW><id>4012700</id><snippet>md5$$&lt;hash&gt;</snippet></ROW><ROW><id>4013246</id><snippet>import sys
sys.getsizeof(s)

# getsizeof(object, default) -&gt; int
# Return the size of object in bytes.
</snippet></ROW><ROW><id>4013246</id><snippet>len(s)</snippet></ROW><ROW><id>4013490</id><snippet>import shelve

#Create shelve
s = shelve.open('test_shelf.db')
try:
    s['key1'] = { 'int': 10, 'float':9.5, 'string':'Sample data' }
finally:
    s.close()

#Access shelve
s = shelve.open('test_shelf.db')
try:
    existing = s['key1']
finally:
    s.close()
print existing
</snippet></ROW><ROW><id>4013490</id><snippet>pickle</snippet></ROW><ROW><id>4013490</id><snippet>pickle</snippet></ROW><ROW><id>4013490</id><snippet>pickle.dump(x, f)
</snippet></ROW><ROW><id>4013490</id><snippet>x = pickle.load(f)
</snippet></ROW><ROW><id>4013490</id><snippet>cPickle</snippet></ROW><ROW><id>4013490</id><snippet>pickle</snippet></ROW><ROW><id>4013709</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>4013768</id><snippet>import itertools
site_range=[0,1,2]
[x for x in itertools.product(site_range, repeat=len(site_range))]
</snippet></ROW><ROW><id>4013814</id><snippet>CellRenderer</snippet></ROW><ROW><id>4013814</id><snippet>Builder()</snippet></ROW><ROW><id>4014164</id><snippet>import urllib

def recursive_urlencode(d):
    """URL-encode a multidimensional dictionary.

    &gt;&gt;&gt; data = {'a': 'b&amp;c', 'd': {'e': {'f&amp;g': 'h*i'}}, 'j': 'k'}
    &gt;&gt;&gt; recursive_urlencode(data)
    u'a=b%26c&amp;j=k&amp;d[e][f%26g]=h%2Ai'
    """
    def recursion(d, base=[]):
        pairs = []

        for key, value in d.items():
            new_base = base + [key]
            if hasattr(value, 'values'):
                pairs += recursion(value, new_base)
            else:
                new_pair = None
                if len(new_base) &gt; 1:
                    first = urllib.quote(new_base.pop(0))
                    rest = map(lambda x: urllib.quote(x), new_base)
                    new_pair = "%s[%s]=%s" % (first, ']['.join(rest), urllib.quote(unicode(value)))
                else:
                    new_pair = "%s=%s" % (urllib.quote(unicode(key)), urllib.quote(unicode(value)))
                pairs.append(new_pair)
        return pairs

    return '&amp;'.join(recursion(d))

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>4014314</id><snippet>optparse</snippet></ROW><ROW><id>4014314</id><snippet>optparse</snippet></ROW><ROW><id>4014314</id><snippet>exit()</snippet></ROW><ROW><id>4014314</id><snippet>error()</snippet></ROW><ROW><id>4014314</id><snippet>SystemExit</snippet></ROW><ROW><id>4014314</id><snippet>optparse</snippet></ROW><ROW><id>4014314</id><snippet>try:    
    (options, positional_args) = parser.parse_args(args[0:])
except SystemExit:
    return

cd_obj= CD()
cd_obj.addCD(options.track_number, options.cd_name)
</snippet></ROW><ROW><id>4014314</id><snippet>import optparse

class OptionParsingError(RuntimeError):
    def __init__(self, msg):
        self.msg = msg

class OptionParsingExit(Exception):
    def __init__(self, status, msg):
        self.msg = msg
        self.status = status

class ModifiedOptionParser(optparse.OptionParser):
    def error(self, msg):
        raise OptionParsingError(msg)

    def exit(self, status=0, msg=None):
        raise OptionParsingExit(status, msg)
</snippet></ROW><ROW><id>4014314</id><snippet>try:
    parser = ModifiedOptionParser()
    parser.add_option("-t", "--track", dest="track_number", type="int",
        help="track number")
    (options, positional_args) = parser.parse_args(args[0:])
except OptionParsingError, e:
    print 'There was a parsing error: %s' % e.msg
    return
except OptionParsingExit, e:
    print 'The option parser exited with message %s and result code %s' % (e.msg, e.status)
    return

cd_obj= CD()
cd_obj.addCD(options.track_number, options.cd_name)
</snippet></ROW><ROW><id>4014532</id><snippet>&gt;&gt;&gt; import Tkinter as tk
&gt;&gt;&gt; r=tk.Tk()
&gt;&gt;&gt; r.title('hello')
''
&gt;&gt;&gt; l= tk.Label(r, name='lbl', width=20, text='reduce the window width')
&gt;&gt;&gt; l.pack(fill=tk.BOTH) # or tk.X, depends; check interactive resizing now
&gt;&gt;&gt; l['text']= "This is a long text, window size should remain the same"
</snippet></ROW><ROW><id>4014660</id><snippet>add</snippet></ROW><ROW><id>4014660</id><snippet>self</snippet></ROW><ROW><id>4014824</id><snippet>print myvar2['encoding']
</snippet></ROW><ROW><id>4014824</id><snippet>chardet</snippet></ROW><ROW><id>4014824</id><snippet>chardet</snippet></ROW><ROW><id>4014824</id><snippet>chardet</snippet></ROW><ROW><id>4015095</id><snippet>def append(self, item):
    self.list.append(item)
def extend(self, item):
    self.list.extend(item)
</snippet></ROW><ROW><id>4015095</id><snippet>def append(self, *items):
    self.list.extend(items)
</snippet></ROW><ROW><id>4015095</id><snippet>x.append('single item')
</snippet></ROW><ROW><id>4015095</id><snippet>x.append(*list_of_items)
</snippet></ROW><ROW><id>4015387</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt;
&gt;&gt;&gt; data = """
... &lt;h1 class="title"&gt;Title One&lt;/h1&gt;&lt;p&gt;&lt;a href="#"&gt;40.5&lt;/a&gt;&lt;a href="#"&gt;31.3&lt;/a&gt;&lt;/p&gt;
... &lt;h1 class="title alternate"&gt;Title Two&lt;/h1&gt;&lt;p&gt;&lt;a href="#"&gt;12.1&lt;/a&gt;&lt;a href="#"&gt;82.0&lt;/a&gt;&lt;/p&gt;
... """
&gt;&gt;&gt;
&gt;&gt;&gt; d = etree.HTML(data)
&gt;&gt;&gt; d.xpath('//h1/following-sibling::p[1]/a/text()')
['40.5', '31.3', '12.1', '82.0']
</snippet></ROW><ROW><id>4015387</id><snippet>lxml.etree</snippet></ROW><ROW><id>4015387</id><snippet>xpath</snippet></ROW><ROW><id>4015387</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt;
&gt;&gt;&gt; data = """
... &lt;h1 class="title"&gt;Title One&lt;/h1&gt;&lt;p&gt;&lt;a href="#"&gt;40.5&lt;/a&gt;&lt;a href="#"&gt;31.3&lt;/a&gt;&lt;/p&gt;
... &lt;h1 class="title alternate"&gt;Title Two&lt;/h1&gt;&lt;p&gt;&lt;a href="#"&gt;12.1&lt;/a&gt;&lt;a href="#"&gt;82.0&lt;/a&gt;&lt;/p&gt;
... """
&gt;&gt;&gt;
&gt;&gt;&gt; d = etree.HTML(data)
&gt;&gt;&gt; #d.xpath('//h1[following-sibling::*[1][local-name()="p"]]') 
...
&gt;&gt;&gt; results = {}
&gt;&gt;&gt; for h in d.xpath('//h1[following-sibling::*[1][local-name()="p"]]'):
...   r = results.setdefault(str(h.text),[])
...   r += [ str(x) for x in h.xpath('./following-sibling::*[1][local-name()="p"]/a/text()') ]
...
&gt;&gt;&gt; pprint(results)
{'Title One': ['40.5', '31.3'], 'Title Two': ['12.1', '82.0']}
</snippet></ROW><ROW><id>4015387</id><snippet>&lt;h1&gt;</snippet></ROW><ROW><id>4015387</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>4015387</id><snippet>tag.text</snippet></ROW><ROW><id>4015540</id><snippet>link_callback</snippet></ROW><ROW><id>4015540</id><snippet>def link_callback(uri, rel):
    if uri.find('chart.apis.google.com') != -1:
        return uri
    return os.path.join(settings.MEDIA_ROOT, uri.replace(settings.MEDIA_URL, ""))
</snippet></ROW><ROW><id>4015589</id><snippet>g = globals() # get a reference to the globals dict
g[raw_input("Name Please")] = raw_input("Value Please")
print foo
</snippet></ROW><ROW><id>4015733</id><snippet>Sentence 1
Sentence 3
Sentence 1
Sentence 1
Sentence 2
Sentence 2
</snippet></ROW><ROW><id>4015733</id><snippet>Sentence 1 | Sentence 3 | Sentence 2
Sentence 1 |            | Sentence 2
Sentence 1 |            |
</snippet></ROW><ROW><id>4015733</id><snippet>L = [("Hello World", 3), ("Hello Universe", 5)]</snippet></ROW><ROW><id>4015733</id><snippet>def AddString(str):
try:
    idx = map(lambda (s, v): ('N', 'Y')[s == str], L).index('Y')
except:
    L.append( (str, 1) )
else:
    L[idx] = (str, L[idx][1] + 1)
</snippet></ROW><ROW><id>4015733</id><snippet>def PrintChart():
try:
    max = reduce(lambda x, y: [x, y][x[1] &lt; y[1]], L)[1]
except:
    print "&lt;td&gt;&lt;/td&gt;"
else:
    for i in range(max):
        print "&lt;tr&gt;"
        for (s, c) in L:
            if i+1 &lt;= c:
                print "  &lt;td" + s + "&lt;/td&gt;"
            else:
                print "  &lt;td&gt;&lt;/td&gt;"
        print "&lt;/tr&gt;"
</snippet></ROW><ROW><id>4016137</id><snippet>ImportError: No module named suds.client
</snippet></ROW><ROW><id>4016310</id><snippet>~/.hgrc</snippet></ROW><ROW><id>4016310</id><snippet>[ui]
username=You &lt;you@somewhere&gt;

%include .hgrc-boilerplate
</snippet></ROW><ROW><id>4016577</id><snippet>class CRM(rdb.Model):
        """Set up crm table in the database"""
        rdb.metadata(metadata)
        rdb.tablename("crms")

        id = Column("id", Integer, ForeignKey("screens.id"), primary_key=True)
        screen_id = Column("screen_id", Integer, )

        ....

from CRMContactInformation import CRMContactInformation
CRM.contactInformation = relationship(CRMContactInformation, userlist=False, backref="crms")
</snippet></ROW><ROW><id>4016833</id><snippet>celery.app</snippet></ROW><ROW><id>4016865</id><snippet>Tools/</snippet></ROW><ROW><id>4017481</id><snippet>pg_config</snippet></ROW><ROW><id>4017481</id><snippet>/usr/local/pgsql/</snippet></ROW><ROW><id>4017481</id><snippet>which pg_config</snippet></ROW><ROW><id>4017481</id><snippet>/usr/bin/pg_config/</snippet></ROW><ROW><id>4017481</id><snippet>setup.cfg</snippet></ROW><ROW><id>4017481</id><snippet>pg_config</snippet></ROW><ROW><id>4017481</id><snippet>pg_config=/usr/local/pgsql/bin/pg_config
</snippet></ROW><ROW><id>4017529</id><snippet>runas /user:domain\username cmd.exe | sanur mysekritpassword</snippet></ROW><ROW><id>4017629</id><snippet>"r"</snippet></ROW><ROW><id>4017629</id><snippet>"rb"</snippet></ROW><ROW><id>4017629</id><snippet>import time
import Image
image_data = [160, 120, 3, 10, 1287848024, 96181, 'really long string from http://richardknop.com/log.txt']
imageWidth = image_data[0]
imageHeight = image_data[1]
imageByteArray = image_data[6]
fout = open("image_data.txt", "wb")
fout.write(imageByteArray)
fout.close()
fin = open("image_data.txt", 'rb')
image_string = fin.read()
fin.close()
im = Image.fromstring("YCbCr",(imageWidth,imageHeight),image_string)
fileName = str(time.time())+".jpg"
im.save(fileName, "JPEG")
</snippet></ROW><ROW><id>4017629</id><snippet>read</snippet></ROW><ROW><id>4017629</id><snippet>readline</snippet></ROW><ROW><id>4017629</id><snippet>read</snippet></ROW><ROW><id>4017629</id><snippet>data = f.readline()</snippet></ROW><ROW><id>4017629</id><snippet>data = f.read()</snippet></ROW><ROW><id>4017629</id><snippet>read</snippet></ROW><ROW><id>4017629</id><snippet>readline</snippet></ROW><ROW><id>4017638</id><snippet>__setattr__</snippet></ROW><ROW><id>4017638</id><snippet>__getattr__</snippet></ROW><ROW><id>4017638</id><snippet>class Dummy(object):
    aliases = {
        'xValue': 'x',
        'another': 'x',
        }

    def __init__(self):
        self.x = 17

    def __setattr__(self, name, value):
        name = self.aliases.get(name, name)
        object.__setattr__(self, name, value)

    def __getattr__(self, name):
        if name == "aliases":
            raise AttributeError  # http://nedbatchelder.com/blog/201010/surprising_getattr_recursion.html
        name = self.aliases.get(name, name)
        #return getattr(self, name) #Causes infinite recursion on non-existent attribute
        return object.__getattribute__(self, name)


d = Dummy()
assert d.x == 17
assert d.xValue == 17
d.x = 23
assert d.xValue == 23
d.xValue = 1492
assert d.x == 1492
</snippet></ROW><ROW><id>4018200</id><snippet>function( ['this', 'is', 'a', 'list', 'of', 'words'] )
</snippet></ROW><ROW><id>4018335</id><snippet>C:</snippet></ROW><ROW><id>4018335</id><snippet>D:</snippet></ROW><ROW><id>4018452</id><snippet>Accounts</snippet></ROW><ROW><id>4018452</id><snippet>def open_shelf(name='shelfile.shl'):
    Accounts = shelve.open(name)          #Accounts = {}
    ...
    return Accounts

def close_shelf(Accounts):
    Accounts.close()


def Deposit(Accounts):
    ...   

if __name__ == '__main__':
    Accounts = open_shelf()
    Deposit(Accounts)
    close_shelf(Accounts)
</snippet></ROW><ROW><id>4018452</id><snippet>Deposit()</snippet></ROW><ROW><id>4018452</id><snippet>raw_input</snippet></ROW><ROW><id>4018452</id><snippet>input</snippet></ROW><ROW><id>4018452</id><snippet>input = raw_input('\nEnter the A/c type: ')
</snippet></ROW><ROW><id>4018452</id><snippet>input</snippet></ROW><ROW><id>4018452</id><snippet>amt = input('\nAmount of Deposit: ')
</snippet></ROW><ROW><id>4018452</id><snippet>input</snippet></ROW><ROW><id>4018452</id><snippet>for key, acct in Accounts.iteritems():  # grab a shelved item
    if val['Acctype'].find(input) != -1:
        amt = input('\nAmount of Deposit: ')
        flag+=1
        acct['Deposit'] += amt          # mutate the item
        Accounts[key] = acct            # write item back to shelf
</snippet></ROW><ROW><id>4018792</id><snippet>locale</snippet></ROW><ROW><id>4018792</id><snippet>localization</snippet></ROW><ROW><id>4018972</id><snippet>def do_this():
    print "In do_this"

def do_that():
    print "In do_that"

dct = [do_this, do_that]
dct[0]()
</snippet></ROW><ROW><id>4018972</id><snippet>dct = ['do_this', 'do_that']
globals()[dct[0]]()
</snippet></ROW><ROW><id>4018972</id><snippet>&gt;&gt;&gt; import this</snippet></ROW><ROW><id>4019182</id><snippet>import sqlite3

new_db = sqlite3.connect(':memory:') # create a memory database

old_db = sqlite3.connect('test.db')

query = "".join(line for line in old_db.iterdump())

# Dump old database in the new one. 
new_db.executescript(query)
</snippet></ROW><ROW><id>4019182</id><snippet>name_table = "test_table"  # name of the table that you want to get.

for line in old_db.iterdump():
    if name_table in line:
        query = line
        break
</snippet></ROW><ROW><id>4019648</id><snippet>help(dict)</snippet></ROW><ROW><id>4019648</id><snippet>keys = dictionary.keys()
values = dictionary.values()
</snippet></ROW><ROW><id>4019753</id><snippet>views.py</snippet></ROW><ROW><id>4019753</id><snippet>request.REQUEST</snippet></ROW><ROW><id>4019753</id><snippet>request.POST</snippet></ROW><ROW><id>4019753</id><snippet>from forms.py import SearchForm

def cdr(request, form_class=SearchForm):
  queryset = CdrView.objects.all()
  search_form = SearchForm(request.REQUEST)
  if search_form.is_valid():
      search_src = search_form.cleaned_data.get('search_src',None)
      search_dest = search_form.cleaned_data.get('search_dest',None)
      if search_src:
          queryset = queryset.filter(src__icontains=search_src)
      if search_dest:
          queryset = queryset.filter(dest__icontains=search_dest)
  return object_list(request, 
                     queryset = queryset,
                     template_name = "reports/cdrview_list.html",
                     extra_context = {'search_form': search_form },
                     paginate_by = 200,
                     page = request.GET.get('page', 1)
                     )
</snippet></ROW><ROW><id>4019753</id><snippet>forms.py</snippet></ROW><ROW><id>4019753</id><snippet>from django import forms

class SearchForm(forms.Form):
    search_src = forms.CharField(max_length=20, required=False)
    search_dest = forms.CharField(max_length=20, required=False)
</snippet></ROW><ROW><id>4019753</id><snippet>&lt;form method="get" action=""&gt;
&lt;ul&gt;{{ search_form.as_ul }}&lt;/ul&gt;
&lt;input type="submit" value="Search" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>4019756</id><snippet>hash_obj.digest()[:4]
</snippet></ROW><ROW><id>4019756</id><snippet>hash_obj.hexdigest()[:8]
</snippet></ROW><ROW><id>4019897</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; class DecimalEncoder(json.JSONEncoder):
...     def default(self, obj):
...         if isinstance(obj, Decimal):
...             return "%.2f" % obj
...         return json.JSONEncoder.default(self, obj)
...
</snippet></ROW><ROW><id>4020107</id><snippet>class Foo(object):
    childs = []
</snippet></ROW><ROW><id>4020107</id><snippet>class Foo(object)
    def __init__(self):
        self.childs = []
</snippet></ROW><ROW><id>4020346</id><snippet>Class</snippet></ROW><ROW><id>4020363</id><snippet>deque</snippet></ROW><ROW><id>4020363</id><snippet>collections.deque</snippet></ROW><ROW><id>4020363</id><snippet>import collections

class deque(collections.deque):
    def __init__(self, iterable=(), maxlen=None):
        super(deque, self).__init__(iterable, maxlen)
        self._maxlen = maxlen
    @property
    def maxlen(self):
        return self._maxlen
</snippet></ROW><ROW><id>4020363</id><snippet>&gt;&gt;&gt; d = deque()
&gt;&gt;&gt; print d
deque([])
&gt;&gt;&gt; print d.maxlen
None
&gt;&gt;&gt; d = deque(maxlen=3)
&gt;&gt;&gt; print d
deque([], maxlen=3)
&gt;&gt;&gt; print d.maxlen
3
&gt;&gt;&gt; d = deque(range(5))
&gt;&gt;&gt; print d
deque([0, 1, 2, 3, 4])
&gt;&gt;&gt; print d.maxlen
None
&gt;&gt;&gt; d = deque(range(5), maxlen=3)
&gt;&gt;&gt; print d
deque([2, 3, 4], maxlen=3)
&gt;&gt;&gt; print d.maxlen
3
</snippet></ROW><ROW><id>4020443</id><snippet>def make_printer(msg):
    def printer():
        print msg
    return printer

printer = make_printer('Foo!')
printer()
</snippet></ROW><ROW><id>4020443</id><snippet>make_printer</snippet></ROW><ROW><id>4020443</id><snippet>printer</snippet></ROW><ROW><id>4020443</id><snippet>msg</snippet></ROW><ROW><id>4020443</id><snippet>printer</snippet></ROW><ROW><id>4020443</id><snippet>msg</snippet></ROW><ROW><id>4020443</id><snippet>make_printer</snippet></ROW><ROW><id>4020443</id><snippet>def make_printer(msg):
    def printer(msg=msg):
        print msg
    return printer

printer = make_printer("Foo!")
printer()  #Output: Foo!
</snippet></ROW><ROW><id>4020443</id><snippet>printer</snippet></ROW><ROW><id>4020443</id><snippet>msg</snippet></ROW><ROW><id>4020443</id><snippet>printer</snippet></ROW><ROW><id>4020443</id><snippet>make_printer</snippet></ROW><ROW><id>4020443</id><snippet>msg</snippet></ROW><ROW><id>4020443</id><snippet>printer</snippet></ROW><ROW><id>4020696</id><snippet>def compose(f, g):
    return lambda *x: f(g(*x))
</snippet></ROW><ROW><id>4020696</id><snippet>ra = compose(rangeset_001, algo_001)
ra(lsrc)
</snippet></ROW><ROW><id>4020696</id><snippet>rangesets = [rangeset_001, rangeset_002, rangeset_003]
</snippet></ROW><ROW><id>4020696</id><snippet>for r in rangesets:
    ra = compose(r, algo_001)
    ra(lsrc)
</snippet></ROW><ROW><id>4020696</id><snippet>algo_xxx</snippet></ROW><ROW><id>4020824</id><snippet>&gt;&gt;&gt; myString = "spam\\neggs"
&gt;&gt;&gt; decoded_string = bytes(myString, "utf-8").decode("unicode_escape") # python3 
&gt;&gt;&gt; decoded_string = myString.decode('string_escape') # python2
&gt;&gt;&gt; print(decoded_string)
spam
eggs
</snippet></ROW><ROW><id>4020843</id><snippet>engine = create_engine('sqlite://', echo = True)
</snippet></ROW><ROW><id>4020843</id><snippet>...
After:
xxxx-xx-xx xx:xx:xx,xxx INFO sqlalchemy.engine.base.Engine.0x...d3d0 UPDATE users SET age=? WHERE users.id = ?
xxxx-xx-xx xx:xx:xx,xxx INFO sqlalchemy.engine.base.Engine.0x...d3d0 (10, 1)
...
</snippet></ROW><ROW><id>4020843</id><snippet>engine = create_engine('sqlite:///db.sqlite', echo = True)
</snippet></ROW><ROW><id>4020843</id><snippet>&lt;User(name='A', age=10)&gt;
&lt;User(name='B', age=20)&gt;
&lt;User(name='C', age=30)&gt;
</snippet></ROW><ROW><id>4020843</id><snippet>$ sqlite3 db.sqlite "select * from users"
1|A|0
2|B|0
3|C|0
</snippet></ROW><ROW><id>4020843</id><snippet>s = get_session()
s.rollback()
print '\nAfter rollback:'
list_users()
</snippet></ROW><ROW><id>4021165</id><snippet>&gt;&gt;&gt; tup.index('string2')
1
</snippet></ROW><ROW><id>4021165</id><snippet>index()</snippet></ROW><ROW><id>4021376</id><snippet>import</snippet></ROW><ROW><id>4021764</id><snippet>def execu(lst, seq, raw_para):
  return reduce(lambda x, y: y(x), reversed(operator.itemgetter(*seq)(lst)), raw_para)
</snippet></ROW><ROW><id>4021840</id><snippet>def get_str():
  x = some_complex_computation()
  if x is None:
    raise ValueError("because it's wrong!!")
  return x
</snippet></ROW><ROW><id>4021840</id><snippet>  str = get_str()
  if 'foo' in str:
    print "Looks okay!"
</snippet></ROW><ROW><id>4021935</id><snippet>def iteritems(self):
    return iter([(x[0], x) for x in "alpha bravo charlie".split()])
</snippet></ROW><ROW><id>4022570</id><snippet>averages = {}
counts = {}
for name, value in zip(names, result_values):
    if name in averages:
        averages[name] += value
        counts[name] += 1
    else:
        averages[name] = value
        counts[name] = 1
for name in averages:
    averages[name] = averages[name]/float(counts[name]) 
</snippet></ROW><ROW><id>4022570</id><snippet>zip</snippet></ROW><ROW><id>4022570</id><snippet>izip</snippet></ROW><ROW><id>4022656</id><snippet>addcd s 11
</snippet></ROW><ROW><id>4022656</id><snippet>addcd s a 
</snippet></ROW><ROW><id>4022656</id><snippet>optparse</snippet></ROW><ROW><id>4022656</id><snippet>positional_args</snippet></ROW><ROW><id>4022656</id><snippet>    return
    if len(args) != 4:
        print "wrong number of inputs"
        return
</snippet></ROW><ROW><id>4022656</id><snippet>return</snippet></ROW><ROW><id>4022656</id><snippet>return</snippet></ROW><ROW><id>4022656</id><snippet>args</snippet></ROW><ROW><id>4022656</id><snippet>args</snippet></ROW><ROW><id>4022729</id><snippet>request</snippet></ROW><ROW><id>4022729</id><snippet>from flask import request
</snippet></ROW><ROW><id>4022729</id><snippet>@app.route('/')
def hello_world():
    return "Hello World!"
</snippet></ROW><ROW><id>4022748</id><snippet>send</snippet></ROW><ROW><id>4022748</id><snippet>send</snippet></ROW><ROW><id>4023031</id><snippet>class OrderedCallSequence(object):
    def __init__(self, test_case):
        self._expectation_count = 0
        self._evaluated = 0
        self._test_case = test_case

    def assertOrder(self):
        self._expectation_count += 1
        expected_position = self._expectation_count

        def side_effect(*args, **kwargs):
            self._evaluated += 1
            self._test_case.assertEquals(self._evaluated, expected_position,
                                         msg="Invoked in incorrect sequence")
        return side_effect
</snippet></ROW><ROW><id>4023031</id><snippet>class ReadModifyUpdateTest(mox.MoxTestBase):
    def test_modify(self):
        mock_record = self.mox.CreateMockAnthing()
        mock_store = self.mox.CreateMockAnything()
        mock_modifier = self.mox.CreateMockAnything()

        sequence = OrderedCallSequence(self)
        mock_store.read("test_key").WithSideEffects(sequence.assertOrder()).AndReturn(mock_record)
        mock_modifier.modify(mock_record).WithSideEffects(sequence.assertOrder())
        mock_store.update("test_key", mock_record).WithSideEffects(sequence.assertOrder())
        self.mox.ReplayAll()

        updater = ReadModifyUpdate(mock_store, mock_modifier)
        updater.modify("test_key")
</snippet></ROW><ROW><id>4023106</id><snippet>os.putenv('PATH', dir + ";" + otherdir)
</snippet></ROW><ROW><id>4023175</id><snippet>svn</snippet></ROW><ROW><id>4023175</id><snippet>join()</snippet></ROW><ROW><id>4023175</id><snippet>subprocess</snippet></ROW><ROW><id>4023620</id><snippet>def halfs(shape=()):
    if isinstance(shape, tuple):
        return 0.5 * numpy.ones((2,) + shape)
    else:
        return 0.5 * numpy.ones((2, shape))



a = numpy.arange(5)
# array([0, 1, 2, 3, 4])


halfs(a.shape)
#array([[ 0.5,  0.5,  0.5,  0.5,  0.5],
#       [ 0.5,  0.5,  0.5,  0.5,  0.5]])

halfs(3)
#array([[ 0.5,  0.5,  0.5],
#       [ 0.5,  0.5,  0.5]])
</snippet></ROW><ROW><id>4023781</id><snippet>files</snippet></ROW><ROW><id>4023781</id><snippet>noTxtFiles</snippet></ROW><ROW><id>4023781</id><snippet>files</snippet></ROW><ROW><id>4023781</id><snippet>files = os.listdir(os.getcwd())
noTxtFiles = [ element for element in files if 'txt' not in element ]
</snippet></ROW><ROW><id>4023781</id><snippet>list</snippet></ROW><ROW><id>4023934</id><snippet>np.savetxt</snippet></ROW><ROW><id>4023934</id><snippet>np.savez</snippet></ROW><ROW><id>4023934</id><snippet>np.loadtxt</snippet></ROW><ROW><id>4023934</id><snippet>np.load</snippet></ROW><ROW><id>4023934</id><snippet>.npz</snippet></ROW><ROW><id>4023934</id><snippet>import sqlite3
import numpy as np

db = sqlite3.connect(':memory:')
cursor = db.cursor()
cursor.execute('''CREATE TABLE foo
                  (row INTEGER,
                   col INTEGER,
                   value FLOAT,
                   PRIMARY KEY (row,col))''')
ROWS=4
COLUMNS=6
matrix = np.random.random((ROWS,COLUMNS))
print(matrix)
# [[ 0.87050721  0.22395398  0.19473001  0.14597821  0.02363803  0.20299432]
#  [ 0.11744885  0.61332597  0.19860043  0.91995295  0.84857095  0.53863863]
#  [ 0.80123759  0.52689885  0.05861043  0.71784406  0.20222138  0.63094807]
#  [ 0.01309897  0.45391578  0.04950273  0.93040381  0.41150517  0.66263562]]

# Store matrix in table foo
cursor.executemany('INSERT INTO foo(row, col, value) VALUES (?,?,?) ',
                   ((r,c,value) for r,row in enumerate(matrix) 
                                for c,value in enumerate(row)))

# Retrieve matrix from table foo
cursor.execute('SELECT value FROM foo ORDER BY row,col')
data=zip(*cursor.fetchall())[0]
matrix2 = np.fromiter(data,dtype=np.float).reshape((ROWS,COLUMNS))
print(matrix2)
# [[ 0.87050721  0.22395398  0.19473001  0.14597821  0.02363803  0.20299432]
#  [ 0.11744885  0.61332597  0.19860043  0.91995295  0.84857095  0.53863863]
#  [ 0.80123759  0.52689885  0.05861043  0.71784406  0.20222138  0.63094807]
#  [ 0.01309897  0.45391578  0.04950273  0.93040381  0.41150517  0.66263562]]
</snippet></ROW><ROW><id>4024166</id><snippet>os.path.join(*mylist)
</snippet></ROW><ROW><id>4024383</id><snippet>+=</snippet></ROW><ROW><id>4024383</id><snippet>a.extend(b)</snippet></ROW><ROW><id>4024383</id><snippet>a</snippet></ROW><ROW><id>4024383</id><snippet>c = a.extend(b)</snippet></ROW><ROW><id>4024383</id><snippet>c</snippet></ROW><ROW><id>4024383</id><snippet>out = list1[:-1] + [ list1[-1] + list2[0] ] + list2[1:]
</snippet></ROW><ROW><id>4024383</id><snippet>list1[:-1]</snippet></ROW><ROW><id>4024383</id><snippet>list1[-1]</snippet></ROW><ROW><id>4024383</id><snippet>list2[0]</snippet></ROW><ROW><id>4024383</id><snippet>list1[-1] + list2[0]</snippet></ROW><ROW><id>4024383</id><snippet>[ list1[-1] + list2[0] ]</snippet></ROW><ROW><id>4024383</id><snippet>list2[1:]</snippet></ROW><ROW><id>4025573</id><snippet>update_status()</snippet></ROW><ROW><id>4025573</id><snippet>api.update_status('uptime: %s / mem: %i%%' % (time, mem))
</snippet></ROW><ROW><id>4025573</id><snippet>time = uptime()
mem = psutil.Process(2360).get_memory_percent()
</snippet></ROW><ROW><id>4025767</id><snippet>tempfile</snippet></ROW><ROW><id>4025767</id><snippet>&gt;&gt;&gt; with tempfile.NamedTemporaryFile(mode="wb") as jpg:
...     jpg.write(b"Hello World!")
...     print jpg.name
...
c:\users\&lt;...&gt;\appdata\local\temp\tmpv7hy__
</snippet></ROW><ROW><id>4025767</id><snippet>jpg</snippet></ROW><ROW><id>4025767</id><snippet>with</snippet></ROW><ROW><id>4025767</id><snippet>delete</snippet></ROW><ROW><id>4025923</id><snippet>class MyClass:
    def __init__(self):   
        self._private1 = "Whatever1"

    @property
    def private1(self):
        return self._private1

    @private1.setter
    def private1(self, value):
        self._private1 = value
</snippet></ROW><ROW><id>4025923</id><snippet>private</snippet></ROW><ROW><id>4025988</id><snippet>\n</snippet></ROW><ROW><id>4025988</id><snippet>os.linesep</snippet></ROW><ROW><id>4025988</id><snippet>os.linesep</snippet></ROW><ROW><id>4025988</id><snippet>\r\n</snippet></ROW><ROW><id>4025988</id><snippet>\n</snippet></ROW><ROW><id>4025988</id><snippet>\r\r\n</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__new__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__new__</snippet></ROW><ROW><id>4026017</id><snippet>operator new</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__init__</snippet></ROW><ROW><id>4026017</id><snippet>__del__</snippet></ROW><ROW><id>4026017</id><snippet>__new__</snippet></ROW><ROW><id>4026254</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; single = ['key1', 'value1', 'key2', 'value2', 'key3', 'value3']
&gt;&gt;&gt; si = iter(single)
&gt;&gt;&gt; dict(izip(si, si))
{'key3': 'value3', 'key2': 'value2', 'key1': 'value1'}
</snippet></ROW><ROW><id>4026284</id><snippet>MyObject.image="/photo_path/photo_name.jpg"
MyObject.save()
</snippet></ROW><ROW><id>4026353</id><snippet>def normal(sent):
    return ".".join(" " + s if i &gt; 0 and s[0].isalpha() else s for i, s in enumerate(sent.split(".")))
</snippet></ROW><ROW><id>4026353</id><snippet>def normal(sent):
    sent = sent.split(".")
    result = sent[:1]
    for item in sent[1:]:
        if item[0].isalpha():
            item = " " + item
        result.append(item)
    return ".".join(result)
</snippet></ROW><ROW><id>4026548</id><snippet>buildout.cfg</snippet></ROW><ROW><id>4026548</id><snippet>withpostgres.cfg</snippet></ROW><ROW><id>4026548</id><snippet>[buildout]
parts +=
    postgre
    psycopg2

[postgres]
... your existing one ...

[psycopg2]
... your existing one ...
</snippet></ROW><ROW><id>4026548</id><snippet>bin/buildout -c withpostres.cfg</snippet></ROW><ROW><id>4026819</id><snippet>through</snippet></ROW><ROW><id>4026819</id><snippet>...
publication = form.save()
#assuming that these records are in order! They may not be
order_idx = 0
for author in request.POST.getlist('authors'): 
    authorship = Authorship(author=author, publication=publication, ordering=order_idx)
    authorship.save()
    order_idx += 1
</snippet></ROW><ROW><id>4026819</id><snippet>save</snippet></ROW><ROW><id>4027007</id><snippet>__init__</snippet></ROW><ROW><id>4027007</id><snippet>    def __init__(self, **kwargs):
        current_user = kwargs.pop ('user')
        super(FormName, self).__init__(attrs)
</snippet></ROW><ROW><id>4027007</id><snippet>self.fields['skills'].initial = skill_list.objects.filter(user='void')
</snippet></ROW><ROW><id>4027069</id><snippet>import wx

class FadeMixin(object):
    ''' FadeMixin provides one public method: DeleteItem. It is meant to
    be mixed in with a ListCtrl to 'fade out' items before they are
    really deleted. Mixin like this:

    Assumption: the background colour of the control is wx.WHITE

    class MyListCtrl(FadeMixin, wx.ListCtrl):
        ...
    '''
    def __init__(self, *args, **kwargs):
        self.__bgColour = wx.WHITE
        super(FadeMixin, self).__init__(*args, **kwargs)

    def DeleteItem(self, index, fadeStep=10, fadeSpeed=50):
        if self.IsEnabled():
            self.__startDeleteItem(index)
        fgColour, bgColour, transparentColour = self.__getColours(index)
        if fgColour == bgColour == transparentColour:
            self.__finishDeleteItem(index)
        else:
            for colour, setColour in [(fgColour, self.SetItemTextColour), 
                                      (bgColour, self.SetItemBackgroundColour)]:
                fadedColour = self.__fadeColour(colour, transparentColour, 
                                                fadeStep)
                setColour(index, fadedColour)
            wx.FutureCall(50, self.DeleteItem, index, fadeStep, fadeSpeed)

    def SetBackgroundColour(self, colour):
        self.__bgColour = colour
        super(FadeMixin, self).SetBackgroundColour(colour)

    def GetBackgroundColour(self):
        return self.__bgColour

    def __startDeleteItem(self, index):
        # Prevent user input during deletion. Things could get messy if
        # the user deletes another item when we're still busy fading out the 
        # first one:
        self.Disable()
        # Unselect the item that is to be deleted to make the fading visible:
        currentState = self.GetItemState(index, wx.LIST_STATE_SELECTED)
        self.SetItemState(index, ~currentState, wx.LIST_STATE_SELECTED)

    def __finishDeleteItem(self, index):
        super(FadeMixin, self).DeleteItem(index)
        self.Enable()

    def __getColours(self, index):
        fgColour = self.GetItemTextColour(index)
        bgColour = self.GetItemBackgroundColour(index)
        transparentColour = self.GetBackgroundColour()
        if not bgColour:
            bgColour = transparentColour
        return fgColour, bgColour, transparentColour

    def __fadeColour(self, colour, transparentColour, fadeStep):
        newColour = []
        for GetIntensity in wx.Colour.Red, wx.Colour.Green, wx.Colour.Blue:
            currentIntensity = GetIntensity(colour) 
            transparentIntensity = GetIntensity(transparentColour)
            if currentIntensity &lt; transparentIntensity:
                newIntensity = min(transparentIntensity,
                                   currentIntensity + fadeStep)
            elif currentIntensity &gt; transparentIntensity:
                newIntensity = max(transparentIntensity, 
                                currentIntensity - fadeStep)
            else:
                newIntensity = transparentIntensity
            newColour.append(newIntensity)
        return wx.Colour(*newColour)


class ListCtrl(FadeMixin, wx.ListCtrl):
    pass


class Frame(wx.Frame):
    def __init__(self, *args, **kwargs):
        super(Frame, self).__init__(*args, **kwargs)
        self.list = ListCtrl(self, style=wx.LC_REPORT)
        self.list.InsertColumn(0, 'Column 0')
        self.list.InsertColumn(1, 'Column 1')
        self.fillList()
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.onSelected)
        self.Bind(wx.EVT_LIST_DELETE_ITEM, self.onDeleted)

    def onSelected(self, event):
        self.list.DeleteItem(event.GetIndex())

    def onDeleted(self, event):
        if self.list.GetItemCount() == 1:
            wx.CallAfter(self.fillList, False)

    def fillList(self, firstTime=True):
        for row in range(10):
            self.list.InsertStringItem(row, 'Item %d, Column 0'%row)
            self.list.SetStringItem(row, 1, 'Item %d, Column 1'%row)
        self.list.SetItemBackgroundColour(1, wx.BLUE)
        self.list.SetItemTextColour(2, wx.BLUE)
        self.list.SetItemBackgroundColour(3, wx.GREEN)
        self.list.SetItemTextColour(4, wx.GREEN)
        self.list.SetItemBackgroundColour(5, wx.RED)
        self.list.SetItemTextColour(6, wx.RED)
        self.list.SetItemBackgroundColour(7, wx.BLACK)
        self.list.SetItemTextColour(7, wx.WHITE)
        self.list.SetItemBackgroundColour(8, wx.WHITE)
        self.list.SetItemTextColour(8, wx.BLACK)
        if not firstTime:
            self.list.SetBackgroundColour(wx.BLUE)


app = wx.App(False)
frame = Frame(None, title='Select an item to fade it out')
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>4027126</id><snippet>lista[0:4:2]</snippet></ROW><ROW><id>4027126</id><snippet>[99, "Una Lista"]</snippet></ROW><ROW><id>4027126</id><snippet>&gt;&gt;&gt; x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x[::2] = ['a', 'b', 'c', 'd', 'e']   # Assign to index 0, 2, 4, 6, 8
&gt;&gt;&gt; x
['a', 1, 'b', 3, 'c', 5, 'd', 7, 'e', 9]
&gt;&gt;&gt; del x[:5]                            # Remove the first 5 elements
&gt;&gt;&gt; x
[5, 'd', 7, 'e', 9]
</snippet></ROW><ROW><id>4027297</id><snippet>fill</snippet></ROW><ROW><id>4027297</id><snippet>pack</snippet></ROW><ROW><id>4027297</id><snippet>import Tkinter as tk
import ttk

root=tk.Tk()
pb = ttk.Progressbar(mode="indeterminate")
pb.pack(side="bottom", fill="x")
pb.start()
root.wm_geometry("300x300")
root.mainloop()
</snippet></ROW><ROW><id>4027353</id><snippet>sys.platform</snippet></ROW><ROW><id>4027353</id><snippet>sys.platform</snippet></ROW><ROW><id>4027353</id><snippet>subprocess</snippet></ROW><ROW><id>4027567</id><snippet>import "sift/sift_descriptors.proto"</snippet></ROW><ROW><id>4027567</id><snippet>filtered_descriptors.proto</snippet></ROW><ROW><id>4027567</id><snippet>protoc</snippet></ROW><ROW><id>4027567</id><snippet>--proto_path=../</snippet></ROW><ROW><id>4027567</id><snippet>--proto_path=../sift</snippet></ROW><ROW><id>4027567</id><snippet>import sift.sift_descriptors_pb2</snippet></ROW><ROW><id>4027624</id><snippet>return None</snippet></ROW><ROW><id>4027624</id><snippet>return None</snippet></ROW><ROW><id>4027694</id><snippet>/Library/Frameworks/</snippet></ROW><ROW><id>4027830</id><snippet>is</snippet></ROW><ROW><id>4027830</id><snippet>if SQLParameters[i] is True:
    SQLParameters[i] = 'T'                
elif SQLParameters[i] is False:
    SQLParameters[i] = 'F'
</snippet></ROW><ROW><id>4028092</id><snippet>//</snippet></ROW><ROW><id>4028092</id><snippet>number_required = y * z
container_holds = x
reqd_containers = (number_required + container_holds - 1) // container_holds
</snippet></ROW><ROW><id>4028092</id><snippet>n=(y*z+(x-1))//x;
</snippet></ROW><ROW><id>4028092</id><snippet>n=(y*z+x-1)//x
</snippet></ROW><ROW><id>4028092</id><snippet>10 / 3 -&gt; 3</snippet></ROW><ROW><id>4028092</id><snippet>10 / 3 -&gt; 3.3333333333333335</snippet></ROW><ROW><id>4028092</id><snippet># wrong in Python 3; works with Python 2.3 to 2.7
# int overflow with Pythons up to 2.2
&gt;&gt;&gt; int((100000000000000000 + 2)/3)
33333333333333332 # last digit should be 4

# wrong with Python 2.3 onwards; int overflow with earlier versions
&gt;&gt;&gt; import math
&gt;&gt;&gt; int(math.ceil(float(100000000000000000) / 3))
33333333333333332L
</snippet></ROW><ROW><id>4028332</id><snippet>def beta_ml_fraction(beta):
        a = beta[0]
        b = beta[1]
   return a / (a + b)

arr=np.array([(2,3),(3,3)],dtype=np.float) 
print(beta_ml_fraction(arr.transpose()))
# [ 0.4  0.5]
</snippet></ROW><ROW><id>4028332</id><snippet>x = np.arange(18,dtype=np.float).reshape(2,3,3)
print(x)
#array([[[  0.,   1.,   2.],
#        [  3.,   4.,   5.],
#        [  6.,   7.,   8.]],
#
#       [[  9.,  10.,  11.],
#        [ 12.,  13.,  14.],
#        [ 15.,  16.,  17.]]])
print(beta_ml_fraction(x))
#array([[ 0.        ,  0.09090909,  0.15384615],
#       [ 0.2       ,  0.23529412,  0.26315789],
#       [ 0.28571429,  0.30434783,  0.32      ]])
</snippet></ROW><ROW><id>4028337</id><snippet>&gt;&gt;&gt; a='00010100011011101101110100010111'
&gt;&gt;&gt; [a[i:i+5] for i in range(0, len(a), 5)]
['00010', '10001', '10111', '01101', '11010', '00101', '11']
</snippet></ROW><ROW><id>4028415</id><snippet>__new__</snippet></ROW><ROW><id>4028415</id><snippet>object.__new__</snippet></ROW><ROW><id>4028415</id><snippet>__new__</snippet></ROW><ROW><id>4028415</id><snippet>object.__init__</snippet></ROW><ROW><id>4028415</id><snippet>object</snippet></ROW><ROW><id>4028415</id><snippet>__new__</snippet></ROW><ROW><id>4028415</id><snippet>__init__</snippet></ROW><ROW><id>4028415</id><snippet>object</snippet></ROW><ROW><id>4028415</id><snippet>super()</snippet></ROW><ROW><id>4028423</id><snippet>let</snippet></ROW><ROW><id>4028423</id><snippet>g:python_normal_text_width</snippet></ROW><ROW><id>4028423</id><snippet>g:python_comment_text_width</snippet></ROW><ROW><id>4028423</id><snippet>function! GetPythonTextWidth()
    if !exists('g:python_normal_text_width')
        let normal_text_width = 79
    else
        let normal_text_width = g:python_normal_text_width
    endif

    if !exists('g:python_comment_text_width')
        let comment_text_width = 72
    else
        let comment_text_width = g:python_comment_text_width
    endif

    let cur_syntax = synIDattr(synIDtrans(synID(line("."), col("."), 0)), "name")
    if cur_syntax == "Comment"
        return comment_text_width
    elseif cur_syntax == "String"
        " Check to see if we're in a docstring
        let lnum = line(".")
        while lnum &gt;= 1 &amp;&amp; (synIDattr(synIDtrans(synID(lnum, col([lnum, "$"]) - 1, 0)), "name") == "String" || match(getline(lnum), '\v^\s*$') &gt; -1)
            if match(getline(lnum), "\\('''\\|\"\"\"\\)") &gt; -1
                " Assume that any longstring is a docstring
                return comment_text_width
            endif
            let lnum -= 1
        endwhile
    endif

    return normal_text_width
endfunction

augroup pep8
    au!
    autocmd CursorMoved,CursorMovedI * :if &amp;ft == 'python' | :exe 'setlocal textwidth='.GetPythonTextWidth() | :endif
augroup END
</snippet></ROW><ROW><id>4028479</id><snippet>import matplotlib.pyplot as plt
a = '\\frac{a}{b}'  #notice escaped slash
plt.plot;plt.text(0.5,0.5,'$%s$'%a)
</snippet></ROW><ROW><id>4028725</id><snippet>import itertools as it
import re 

three_pat=re.compile(r'\w{3}')
text = "Hello world. It is a nice day today. Don't you think so?"
for key,group in it.groupby(text.split(),lambda x: bool(three_pat.match(x))):
    if key:
        group=list(group)       
        for i in range(0,len(group)-1):
            print(' '.join(group[i:i+2]))

# Hello world.
# nice day
# day today.
# today. Don't
# Don't you
# you think
</snippet></ROW><ROW><id>4028794</id><snippet>QStackedWidget</snippet></ROW><ROW><id>4028794</id><snippet>QStackedWidget</snippet></ROW><ROW><id>4028884</id><snippet>@,48-57,_,192-255</snippet></ROW><ROW><id>4028885</id><snippet>    ail::read_lines(python_script, string_vector);

    if(!ail::read_file(python_script, content))
    {
        error("Failed to load Python script \"" + python_script + "\"");
        return false;
    }

    if(prompt_mode)
        initialise_console();

    content = ail::replace_string(content, "\r", "");

    Py_Initialize();
    initialise_module();

    std::string script_directory;
    if(get_base_name(python_script, script_directory))
        PyRun_SimpleString(("import sys\nsys.path.append('" + script_directory + "')\n").c_str());

    for(int i = 0; i &lt; string_vector.size(); i++)
    {
        string_vector[i] = ail::replace_string(string_vector[i], "\r", "");
        PyRun_SimpleString(string_vector[i].c_str());
    }

    return true;
</snippet></ROW><ROW><id>4028894</id><snippet>with</snippet></ROW><ROW><id>4028894</id><snippet>urlopen</snippet></ROW><ROW><id>4028894</id><snippet>import os
from urllib2 import urlopen, URLError, HTTPError


def dlfile(url):
    # Open the url
    try:
        f = urlopen(url)
        print "downloading " + url

        # Open our local file for writing
        with open(os.path.basename(url), "wb") as local_file:
            local_file.write(f.read())

    #handle errors
    except HTTPError, e:
        print "HTTP Error:", e.code, url
    except URLError, e:
        print "URL Error:", e.reason, url


def main():
    # Iterate over image ranges
    for index in range(150, 151):
        url = ("http://www.archive.org/download/"
               "Cory_Doctorow_Podcast_%d/"
               "Cory_Doctorow_Podcast_%d_64kb_mp3.zip" %
               (index, index))
        dlfile(url)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4028943</id><snippet>from os.path import expanduser
home = expanduser("~")
</snippet></ROW><ROW><id>4028950</id><snippet>fives = 0
twos = 0
for i in range(10, 201):
   while i % 5 == 0:
      fives = fives + 1
      i /= 5
   while i % 2 == 0:
      twos = twos + 1
      i /= 2
print(min(fives, twos))
</snippet></ROW><ROW><id>4029141</id><snippet>scalify</snippet></ROW><ROW><id>4029141</id><snippet>def scalify(l):
    return l if len(l) &gt; 1 else l[0]
</snippet></ROW><ROW><id>4029141</id><snippet>def foo(*args):
    return scalify([a + 1 for a in args])
</snippet></ROW><ROW><id>4029355</id><snippet>//server/acme/app    /home/joe/.wine/drive_c/App    cifs    guest,rw,iocharset=utf8,nocase,file_mode=0777,dir_mode=0777    0    0
</snippet></ROW><ROW><id>4029681</id><snippet>object</snippet></ROW><ROW><id>4029681</id><snippet>MixinClass.__init__</snippet></ROW><ROW><id>4029681</id><snippet>BaseClass.__init__</snippet></ROW><ROW><id>4029681</id><snippet>super</snippet></ROW><ROW><id>4029681</id><snippet>super</snippet></ROW><ROW><id>4029681</id><snippet>super</snippet></ROW><ROW><id>4029681</id><snippet>__init__</snippet></ROW><ROW><id>4029681</id><snippet>__init__</snippet></ROW><ROW><id>4029790</id><snippet>dlurl = "http://safebrowsing.clients.google.com/safebrowsing/downloads?client=api&amp;apikey=" + api_key + "&amp;appver=1.0&amp;pver=2.2"
</snippet></ROW><ROW><id>4030162</id><snippet>is</snippet></ROW><ROW><id>4030162</id><snippet>and</snippet></ROW><ROW><id>4030162</id><snippet>or</snippet></ROW><ROW><id>4030559</id><snippet>&gt;&gt;&gt; addrinfo = getaddrinfo('fe80::225:ff:fecd:5aa0%en0', 2001, AF_INET6, SOCK_STREAM)
&gt;&gt;&gt; addrinfo
[(30, 1, 6, '', ('fe80::225:ff:fecd:5aa0%en0', 2001, 0, 4))]
&gt;&gt;&gt; (family, socktype, proto, canonname, sockaddr) = addrinfo[0]
&gt;&gt;&gt; s = socket(family, socktype, proto)
&gt;&gt;&gt; s.connect(sockaddr)
</snippet></ROW><ROW><id>4030559</id><snippet>getaddrinfo()</snippet></ROW><ROW><id>4030638</id><snippet>for i in range(n):
    tablename = "shard_"+str(i)
    print 'ALTER TABLE tablename ...'
</snippet></ROW><ROW><id>4030638</id><snippet>./sqlgenscript.py | mysql -u username -p
</snippet></ROW><ROW><id>4030839</id><snippet>import flickrapi
api_key = 'API KEY YYYYYYYYYY' # you will need a key
api_password = 'your secret'
flickrClient = flickrapi.FlickrAPI(api_key, api_password)
# now you could use the methods on this client
# flickrClient.methodname(param)
favourites = flickrClient.favorites_getPublicList(user_id='userid')
# Get the title of the photos
for photo in favourites.photos[0].photo:
    print photo['title']
</snippet></ROW><ROW><id>4031043</id><snippet>get_class = lambda x: globals()[x]
</snippet></ROW><ROW><id>4031043</id><snippet>getattr</snippet></ROW><ROW><id>4031043</id><snippet>import urllib2
handlerClass = getattr(urllib2, 'HTTPHandler')
</snippet></ROW><ROW><id>4031442</id><snippet>write_short</snippet></ROW><ROW><id>4031442</id><snippet>write</snippet></ROW><ROW><id>4031442</id><snippet>self.midi_out.write_short(0xb0, 17, 123)
</snippet></ROW><ROW><id>4031608</id><snippet>delete</snippet></ROW><ROW><id>4031608</id><snippet>splice</snippet></ROW><ROW><id>4031608</id><snippet>        my @graphu = @{ $graph{$u} };  # This is line 54.
        my ($index) = grep $graphu[$_] eq $v, 0 .. $#graphu;
        splice @{ $graph{$u} }, $index, 1;
        splice @{ $graph{$v} }, 0, 1;
</snippet></ROW><ROW><id>4031608</id><snippet>    my $v = $stack[-1];

    if ( $graph{$v} ) {
        my $u = ( @{ $graph{$v} } )[0];
</snippet></ROW><ROW><id>4031608</id><snippet>$graph{$v}</snippet></ROW><ROW><id>4031608</id><snippet>if graph[v]:</snippet></ROW><ROW><id>4031608</id><snippet>graph[v]</snippet></ROW><ROW><id>4031608</id><snippet>    my $v = $stack[-1];

    if ( @{$graph{$v}} ) {
        my $u = ( @{ $graph{$v} } )[0];
</snippet></ROW><ROW><id>4031608</id><snippet>eulerPath</snippet></ROW><ROW><id>4031608</id><snippet>@graph</snippet></ROW><ROW><id>4031608</id><snippet>@stack</snippet></ROW><ROW><id>4031608</id><snippet>$v</snippet></ROW><ROW><id>4031608</id><snippet>$u</snippet></ROW><ROW><id>4031608</id><snippet>delete</snippet></ROW><ROW><id>4031608</id><snippet>splice</snippet></ROW><ROW><id>4031912</id><snippet>UPDATES</snippet></ROW><ROW><id>4031912</id><snippet>UPDATE</snippet></ROW><ROW><id>4031912</id><snippet>INSERT</snippet></ROW><ROW><id>4031912</id><snippet>INSERT ... ON DUPLICATE KEY UPDATE</snippet></ROW><ROW><id>4031912</id><snippet>REPLACE</snippet></ROW><ROW><id>4031912</id><snippet>UPDATE</snippet></ROW><ROW><id>4031912</id><snippet>DELETE / INSERT</snippet></ROW><ROW><id>4031912</id><snippet>INSERT INTO table (a,b,c) VALUES (1,2,3) ON DUPLICATE KEY UPDATE c=c+1;</snippet></ROW><ROW><id>4031912</id><snippet>UPDATES</snippet></ROW><ROW><id>4031912</id><snippet>UPDATE</snippet></ROW><ROW><id>4031912</id><snippet>SQL</snippet></ROW><ROW><id>4031912</id><snippet>TABLE</snippet></ROW><ROW><id>4031912</id><snippet>INDEXES</snippet></ROW><ROW><id>4031912</id><snippet>INNODB or MYISAM</snippet></ROW><ROW><id>4031912</id><snippet>slow_query_log</snippet></ROW><ROW><id>4032125</id><snippet>self.connect(dial, SIGNAL("valueChanged(int)"), spinbox.setValue)
</snippet></ROW><ROW><id>4032125</id><snippet>dial.valueChanged.connect(spinbox.setValue)
</snippet></ROW><ROW><id>4032736</id><snippet>hmac</snippet></ROW><ROW><id>4032736</id><snippet># Right
import hmac
# Note that hmac.new defaults to using MD5
hmac.new("password", "message").hexdigest() # 'f37438341e3d22aa11b4b2e838120dcf'

# Wrong
from hashlib import md5
md5("message"+"password").hexdigest() # 'd0647ee3be62a57c9475541c378b1fac'
md5("password"+"message").hexdigest() # 'c494404d2dd827b05e27bd1f30a763d2'
</snippet></ROW><ROW><id>4032940</id><snippet>C:\workspaces\hg_hooks</snippet></ROW><ROW><id>4032940</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>4032940</id><snippet>[hooks]
precommit.branch_check = python:next_hooks.precommit_bad_branch
</snippet></ROW><ROW><id>4032940</id><snippet>import hook_utils
</snippet></ROW><ROW><id>4032940</id><snippet>next_hooks.py</snippet></ROW><ROW><id>4032940</id><snippet>sys.path</snippet></ROW><ROW><id>4032940</id><snippet>next_hooks.py</snippet></ROW><ROW><id>4032940</id><snippet>import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import hook_utils
</snippet></ROW><ROW><id>4032952</id><snippet>english_set = set(E)
russian_set = set(R)
common_words = english_set.intersection(russian_set)
</snippet></ROW><ROW><id>4033013</id><snippet>&gt;&gt;&gt; from spiteat.djangosrz import DjangoModelSrz #you should actually put spiteat in your path first
&gt;&gt;&gt; Model1Srz = DjangoModelSrz.factory(Model1)
&gt;&gt;&gt; srz_instance = Model1Srz(some_obj_you_want_to_serialize)
&gt;&gt;&gt; srz_instance.spit()
... {
...    'pk': &lt;a_pk&gt;,
...    'id': &lt;an_id&gt;,
...    'name': &lt;a_name&gt;,
...    'child': {
...        'pk': &lt;another_pk&gt;,
...        'id': &lt;another_id&gt;,
...        'field1': &lt;a_value&gt;,
...        'field2': &lt;another_value&gt;
...    }
... }
</snippet></ROW><ROW><id>4033013</id><snippet>json</snippet></ROW><ROW><id>4033013</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json_srz = json.dumps(srz_instance.spit())
</snippet></ROW><ROW><id>4033064</id><snippet>reference.broker.transport.loseConnection()</snippet></ROW><ROW><id>4033064</id><snippet>RemoteReference</snippet></ROW><ROW><id>4033064</id><snippet>broker</snippet></ROW><ROW><id>4033064</id><snippet>broker</snippet></ROW><ROW><id>4033064</id><snippet>transport</snippet></ROW><ROW><id>4033064</id><snippet>loseConnection</snippet></ROW><ROW><id>4033275</id><snippet>twistd</snippet></ROW><ROW><id>4033275</id><snippet>kill -INT 3726
</snippet></ROW><ROW><id>4033275</id><snippet>twistd.log</snippet></ROW><ROW><id>4033275</id><snippet>twistd.pid</snippet></ROW><ROW><id>4033275</id><snippet>kill -INT `cat twistd.pid`
</snippet></ROW><ROW><id>4033740</id><snippet>j = re.sub(r"{\s*(\w)", r'{"\1', j)
j = re.sub(r",\s*(\w)", r',"\1', j)
j = re.sub(r"(\w):", r'\1":', j)
</snippet></ROW><ROW><id>4033743</id><snippet>import sys

print(sys.argv)
</snippet></ROW><ROW><id>4033806</id><snippet>perl -e 'alarm shift @ARGV; exec @ARGV' &lt;timeout&gt; &lt;your_command&gt;
</snippet></ROW><ROW><id>4033806</id><snippet>&lt;your_command&gt;</snippet></ROW><ROW><id>4033806</id><snippet>&lt;timeout&gt;</snippet></ROW><ROW><id>4033806</id><snippet># set time out to 5, so that the command will be killed after 5 second 
command = ['perl', '-e', "'alarm shift @ARGV; exec @ARGV'", "5"]

command += ["ping", "www.google.com"]

exec_proc = subprocess.Popen(command)
</snippet></ROW><ROW><id>4034458</id><snippet>__unicode__</snippet></ROW><ROW><id>4034458</id><snippet>def __unicode__(self):
  return self.name
</snippet></ROW><ROW><id>4034582</id><snippet>DistanceFrom()</snippet></ROW><ROW><id>4034582</id><snippet>&gt;&gt;&gt; def DistanceFrom(origin):
...     def f(x):
...         retval = abs(x - origin)
...         print "f(%s) = %s"%(x, retval)
...         return retval
...     return f
... 
&gt;&gt;&gt; nums = [1, 37, 42, 101, 13, 9, -20]
&gt;&gt;&gt; nums.sort(key=DistanceFrom(10))
f(1) = 9
f(37) = 27
f(42) = 32
f(101) = 91
f(13) = 3
f(9) = 1
f(-20) = 30
&gt;&gt;&gt; nums
[9, 13, 1, 37, -20, 42, 101]
</snippet></ROW><ROW><id>4034582</id><snippet>DistanceFrom</snippet></ROW><ROW><id>4034582</id><snippet>nums</snippet></ROW><ROW><id>4034582</id><snippet>nums</snippet></ROW><ROW><id>4034632</id><snippet>for d in data:
    jsonstring = json.dumps(d)
</snippet></ROW><ROW><id>4034990</id><snippet>oauth_verifier</snippet></ROW><ROW><id>4035193</id><snippet>int</snippet></ROW><ROW><id>4036093</id><snippet>query = "ALTER TABLE segment_table ADD %s VARCHAR(40)" % (key)
cursor.execute( query )
</snippet></ROW><ROW><id>4036202</id><snippet>k in d.keys()</snippet></ROW><ROW><id>4036202</id><snippet>k in d</snippet></ROW><ROW><id>4036202</id><snippet>__hash__</snippet></ROW><ROW><id>4036202</id><snippet>__hash__</snippet></ROW><ROW><id>4036541</id><snippet>collections.Counter</snippet></ROW><ROW><id>4036541</id><snippet>Counter</snippet></ROW><ROW><id>4036541</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>4036541</id><snippet>from collections import Counter
count = Counter(x[3] for x in my_csv_reader)
</snippet></ROW><ROW><id>4036541</id><snippet>collections.Counter</snippet></ROW><ROW><id>4036541</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>4036541</id><snippet>defaultdict</snippet></ROW><ROW><id>4036541</id><snippet>from collections import defaultdict
count = defaultdict(int)
for x in my_csv_reader:
    count[x[3]] += 1
</snippet></ROW><ROW><id>4037148</id><snippet>sortmode</snippet></ROW><ROW><id>4037148</id><snippet>search     = SphinxSearch(
                index    = 'trial_data trial_datastemmed',
                weights  = {'name': 100,},
                mode     = 'SPH_MATCH_ALL',
                rankmode = 'SPH_RANK_BM25',
                sortmode = 'SPH_SORT_RELEVANCE', # this was added
                )
</snippet></ROW><ROW><id>4037148</id><snippet>res = trial_data.search.query('godfather').order_by('@relevance')
</snippet></ROW><ROW><id>4037371</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([(0,0,1), (1,1,1), (1,1,1), (1,0,1)])
&gt;&gt;&gt; c
Counter({(1, 1, 1): 2, (0, 0, 1): 1, (1, 0, 1): 1})</snippet></ROW><ROW><id>4037580</id><snippet>import time

class Foo(object):
    def __init__(self):
        self._bar = None

    @property
    def bar(self):
        if self._bar is None:
            print "starting long calculation"
            time.sleep(5)
            self._bar = 2*2
            print "finished long caclulation"
        return self._bar

foo=Foo()
print "Accessing foo.bar"
print foo.bar
print "Accessing foo.bar"
print foo.bar
</snippet></ROW><ROW><id>4037587</id><snippet>&gt;&gt;&gt; TEMPLATE_DIRS = ( "home/kevin/first/tutorial/temps" )
&gt;&gt;&gt; print TEMPLATE_DIRS
home/kevin/first/tutorial/temps
&gt;&gt;&gt; type(TEMPLATE_DIRS)
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>4037587</id><snippet>TEMPLATE_DIRS = ( "home/kevin/first/tutorial/temps", )
</snippet></ROW><ROW><id>4037680</id><snippet>[^est()]</snippet></ROW><ROW><id>4037680</id><snippet>application = webapp.WSGIApplication(
                                     [
                                        ('test', TestPage)
                                        ('.+', MainPage),
                                     ],
                                     debug=True)
</snippet></ROW><ROW><id>4037788</id><snippet>class ImageMetadataMixin(object):
    """Mixin can be added to any image file"""
    @property
    def iptc(self):
        """Or something like this"""

class ImageWithMetadataFieldFile(ImageMetadataMixin, ImageFieldFile):
    pass

class ImageWithMetadataField(ImageField):
    attr_class = ImageWithMetadataFieldFile
</snippet></ROW><ROW><id>4037788</id><snippet>descriptor_class</snippet></ROW><ROW><id>4037933</id><snippet>urllib</snippet></ROW><ROW><id>4037933</id><snippet>from urllib import urlretrieve
urlretrieve('http://www.mysite.com/myscript.py', '/home/me/script.py')
import script
</snippet></ROW><ROW><id>4038276</id><snippet>wxCheckListBox</snippet></ROW><ROW><id>4038276</id><snippet>wxHtmlWindow</snippet></ROW><ROW><id>4038276</id><snippet>wxpTag</snippet></ROW><ROW><id>4038276</id><snippet>import wx
import wx.lib.wxpTag


class HtmlCheckListBox(wx.html.HtmlWindow):
    def __init__(self, parent, choices=None):
        wx.html.HtmlWindow.__init__(self, parent)

        check_box = """
        &lt;wxp module="wx" class="CheckBox"&gt;
            &lt;param name="id" value="%d"&gt;
        &lt;/wxp&gt;
        """

        self._ids = dict()

        if choices:
            items = list()
            for c, choice in enumerate(choices):
                i = wx.NewId()
                self._ids[i] = c
                items.append((check_box % i) + choice)
            self.SetPage("&lt;hr&gt;".join(items))

        self.Bind(wx.EVT_CHECKBOX, self.OnCheck)

    def OnCheck(self, event):
        print "item:", self._ids[event.Id], "checked:", event.Checked()


class TestFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.options = HtmlCheckListBox(
            self,
            [
                "&lt;i&gt;one&lt;/i&gt;",
                "&lt;b&gt;two&lt;/b&gt;",
                "&lt;u&gt;three&lt;/u&gt;"
            ]
        )


app = wx.PySimpleApp()
app.TopWindow = TestFrame()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>4038286</id><snippet>Bar</snippet></ROW><ROW><id>4038286</id><snippet>class Foo:
    def __init__(self):
        self.bars = []

    def append_bar(self, *args, **kwargs):
        self.bars.append(Bar(*args, **kwargs))

class Bar:
    def __init__(self, a, b, c, d):
        self.a = a
        self.b = b
        self.c = c
        self.d = d

f=Foo()
f.append_bar(1,2,3,4)
</snippet></ROW><ROW><id>4038286</id><snippet>append_bar</snippet></ROW><ROW><id>4038502</id><snippet>&gt;&gt;&gt; x = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; y = [1, 2, 3, 4]
&gt;&gt;&gt; z = zip(x,y)
&gt;&gt;&gt; z
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]
&gt;&gt;&gt; for l in z: print l[0], l[1]
... 
a 1
b 2
c 3
d 4
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4038717</id><snippet>NumberValueRangeProcessor</snippet></ROW><ROW><id>4038717</id><snippet>QueryParser</snippet></ROW><ROW><id>4038717</id><snippet>Indexer._get_query_parser</snippet></ROW><ROW><id>4038717</id><snippet>from djapian import Indexer
from xapian import NumberValueRangeProcessor

class RangeIndexer(Indexer)
    def _get_query_parser(self, *args, **kwargs):
        query_parser = Indexer._get_query_parser(self, *args, **kwargs)
        valno = self.free_values_start_number + 0
        nvrp = NumberValueRangeProcessor(valno, 'value_range:', True)
        query_parser.add_valuerangeprocessor(nvrp)
        return query_parser
</snippet></ROW><ROW><id>4038717</id><snippet>valno = self.free_values_start_number + 0
</snippet></ROW><ROW><id>4038717</id><snippet>self.free_values_start_number</snippet></ROW><ROW><id>4038717</id><snippet>int</snippet></ROW><ROW><id>4038717</id><snippet>0</snippet></ROW><ROW><id>4038717</id><snippet>nvrp = NumberValueRangeProcessor(valno, 'value_range:', True)
</snippet></ROW><ROW><id>4038717</id><snippet>valno</snippet></ROW><ROW><id>4038717</id><snippet>'value_range:'</snippet></ROW><ROW><id>4038717</id><snippet>True</snippet></ROW><ROW><id>4038717</id><snippet>query_parser.add_valuerangeprocessor(nvrp)
</snippet></ROW><ROW><id>4038717</id><snippet>NumberValueRangeProcessor</snippet></ROW><ROW><id>4038717</id><snippet>QueryParser</snippet></ROW><ROW><id>4038717</id><snippet>NumberValueRangeProcessor</snippet></ROW><ROW><id>4038732</id><snippet>decimal</snippet></ROW><ROW><id>4038732</id><snippet>float</snippet></ROW><ROW><id>4038732</id><snippet>s = "1,000"
float(s.replace(",", "")) # = 1000.0
</snippet></ROW><ROW><id>4038870</id><snippet>&gt;&gt;&gt; import dateutil.parser

&gt;&gt;&gt; x = dateutil.parser.parse('Wed, 27 Oct 2010 22:17:00 GMT')
datetime.datetime(2010, 10, 27, 22, 17, tzinfo=tzutc())
&gt;&gt;&gt; str(x)
'2010-10-27 22:17:00+00:00'
&gt;&gt;&gt; x.strftime('%a, %d %b %Y %H:%M:%S %Z')
'Wed, 27 Oct 2010 22:17:00 UTC'
</snippet></ROW><ROW><id>4039091</id><snippet>conn = psycopg2.connect(database="test", host="localhost", port=&lt;forward_port&gt;)
</snippet></ROW><ROW><id>4039115</id><snippet>print(repr(self.log.handlers))
</snippet></ROW><ROW><id>4039115</id><snippet>info</snippet></ROW><ROW><id>4039115</id><snippet>self.log.info('%s %s%s%s', method, url, formstr, headerstr)
</snippet></ROW><ROW><id>4039121</id><snippet>def comparefiles(file1, file2):
    for row in file1:
        for row in file2:
             #check all of your lines, break if condition is met
        else:
             #no matches
</snippet></ROW><ROW><id>4039259</id><snippet>Point._make</snippet></ROW><ROW><id>4039259</id><snippet>map</snippet></ROW><ROW><id>4039259</id><snippet>[Point._make((3, 4)), Point._make((5, 6))]</snippet></ROW><ROW><id>4039259</id><snippet>[Point(*t) for t in [(3, 4), (5, 6)]]</snippet></ROW><ROW><id>4039272</id><snippet>shipments = [{
    'shipment':s,
    'pickup_address': s.pickup_address, 
    'dropoff_address': s.dropoff_address, 
    'billing_address': s.billing_address,
} for s in shipments]

return HttpResponse(simplejson.dumps(shipments, ensure_ascii=False, default=json_formatter), mimetype='application/json')
</snippet></ROW><ROW><id>4039361</id><snippet>is_verbose</snippet></ROW><ROW><id>4039597</id><snippet>def find_odds(numbers):
  if not numbers:
    return []
  if numbers[0] % 2 == 1:
    return [numbers[0]] + find_odds(numbers[1:])
  return find_odds(numbers[1:])
</snippet></ROW><ROW><id>4040128</id><snippet>quopri.decodestring</snippet></ROW><ROW><id>4040150</id><snippet>if ($fileString =~ m!^($perlCmt|$cCmt)?#\!\s*.*?/perl|^($perlCmt|$cCmt)?#\!\s*.*?/sh|^($perlCmt|$cCmt)?#\!\s*.*?/python!)
</snippet></ROW><ROW><id>4040204</id><snippet>dt1, dt2 = dateRange
start_month=dt1.month
end_months=(dt2.year-dt1.year)*12 + dt2.month+1
dates=[datetime.datetime(year=yr, month=mn, day=1) for (yr, mn) in (
          ((m - 1) / 12 + dt1.year, (m - 1) % 12 + 1) for m in range(start_month, end_months)
      )]
</snippet></ROW><ROW><id>4040204</id><snippet>dates=[datetime.datetime(year=dt1.year, month=mn, day=1) for mn in range(dt1.month, dt2.month + 1)]
</snippet></ROW><ROW><id>4040207</id><snippet>?</snippet></ROW><ROW><id>4040207</id><snippet>+</snippet></ROW><ROW><id>4040207</id><snippet>++</snippet></ROW><ROW><id>4040207</id><snippet>for tgt in self.links:
    for link in (self.mal_list + self.phish_list):
        if link in tgt: print link
</snippet></ROW><ROW><id>4040207</id><snippet>==</snippet></ROW><ROW><id>4040207</id><snippet>in</snippet></ROW><ROW><id>4040376</id><snippet>from a5_import import *
import sys

sep = "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-."

print sep

print " Sudoku Verifier! "

print sep

rows = []

for rowNum in range(1, 9):
    rowInput = int(raw_input("Enter Row %s: "% rowNum)) ## This is the same as int(raw_input("Enter Row +rowNum+": "))
    rows.append(rowInput) ##add the input to the list of rows

for row in rows:
    if not check9(row):
        print "Row %s is not valid"% rows[rows.index(row)] ##Prints the row position number

print sep
</snippet></ROW><ROW><id>4040709</id><snippet>getmembers</snippet></ROW><ROW><id>4040709</id><snippet>isfunction</snippet></ROW><ROW><id>4040709</id><snippet> import inspect

 all_functions = inspect.getmembers(module, inspect.isfunction)
</snippet></ROW><ROW><id>4040709</id><snippet>all_functions</snippet></ROW><ROW><id>4041227</id><snippet>a  = 0xff = 0000 0000 1111 1111
~a = -256 = 1111 1111 0000 0000

b  = 1&lt;&lt;8 = 0000 0001 0000 0000
~b = -257 = 1111 1110 1111 1111

-256 = 1111 1111 0000 0000
-257 = 1111 1110 1111 1111
--------------------------  &amp;
-512 = 1111 1110 0000 0000
</snippet></ROW><ROW><id>4041514</id><snippet>import urllib2

try:
    urllib2.urlopen(url)
    return True         # URL Exist
except ValueError, ex:
    return False        # URL not well formatted
except urllib2.URLError, ex:
    return False        # URL don't seem to be alive
</snippet></ROW><ROW><id>4041514</id><snippet>import httplib

try:
    a = httplib.HTTPConnection('google.com')
    a.connect()
except httplib.HTTPException as ex:
    print "not connected"
</snippet></ROW><ROW><id>4041514</id><snippet>import socket

try:
    socket.gethostbyname('www.google.com')
except socket.gaierror as ex:
    print "not existe"
</snippet></ROW><ROW><id>4041688</id><snippet>__init__()</snippet></ROW><ROW><id>4041688</id><snippet>MyClass</snippet></ROW><ROW><id>4041688</id><snippet>MyClass.__DefaultName</snippet></ROW><ROW><id>4041688</id><snippet>__init__()</snippet></ROW><ROW><id>4041688</id><snippet>None</snippet></ROW><ROW><id>4041688</id><snippet>def __init__(self, name=None):
    if name is None:
        name = MyClass.__DefaultName
    .
    .
    .
</snippet></ROW><ROW><id>4042173</id><snippet>functools</snippet></ROW><ROW><id>4042173</id><snippet>partial</snippet></ROW><ROW><id>4042173</id><snippet>import functools

def a(p):
    return p+1

def b(func, p):
    return functools.partial(func, p)

c = b(a,10)
print c() # &gt;&gt;  11
</snippet></ROW><ROW><id>4042173</id><snippet>def add(a,b):
    return a+b

add2 = functools.partial(add, 2)
print add2(10)  # &gt;&gt; 12
</snippet></ROW><ROW><id>4042238</id><snippet>import re

def number_suffix(s):
    """Return the number from the end of the string. """
    match = re.search(r"\d+$", s)
    if match:
        num = int(match.group(0))
    else:
        num = 0
    return num

print number_suffix("AS1001")    # 1001
print number_suffix("AS1")       # 1
print number_suffix("AS")        # 0
</snippet></ROW><ROW><id>4042238</id><snippet>idlist.append(number_suffix(Accounts[key]['Accno']))
</snippet></ROW><ROW><id>4042578</id><snippet>__init__.py</snippet></ROW><ROW><id>4042578</id><snippet>def settings(request):
    """
    Put selected settings variables into the default template context
    """
    from django.conf import settings
    return {
        'DOMAIN':     settings.DOMAIN,
        'GOOGLEMAPS_API_KEY': settings.GOOGLEMAPS_API_KEY,
    }
</snippet></ROW><ROW><id>4042578</id><snippet>from django.conf import settings

...
# do stuff with settings.MIN_TIME_TEST as you wish

render_to_response("the_template.html", { 
    "MIN_TIME_TEST": settings.MIN_TIME_TEST 
}, context_instance=RequestContext(request)
</snippet></ROW><ROW><id>4042717</id><snippet>import os
import sys

# Remove the global Python modules from the PYTHONPATH.
path = os.environ['PYTHONPATH'].split(os.pathsep)
if os.environ['GLOB_PY_MODULES'] in path: 
    path.remove(os.environ['GLOB_PY_MODULES'])

# Construct the new path and print it. 
path = ':'.join(path)
print path
</snippet></ROW><ROW><id>4042717</id><snippet>PYTHONPATH=`python get_mod_py_path.py`   
nosetests --verbosity=1 --with-gae --where="../tests/unit" --gae-application="../app" 
</snippet></ROW><ROW><id>4042790</id><snippet>logging.basicConfig(level=logging.WARNING)
</snippet></ROW><ROW><id>4042861</id><snippet>error</snippet></ROW><ROW><id>4042861</id><snippet>import argparse
import sys

class MyParser(argparse.ArgumentParser):
    def error(self, message):
        sys.stderr.write('error: %s\n' % message)
        self.print_help()
        sys.exit(2)

parser=MyParser()
parser.add_argument('foo', nargs='+')
args=parser.parse_args()
</snippet></ROW><ROW><id>4042861</id><snippet>error</snippet></ROW><ROW><id>4042861</id><snippet>test.py --blah</snippet></ROW><ROW><id>4042861</id><snippet>--blah</snippet></ROW><ROW><id>4042861</id><snippet>import argparse
import sys

parser=argparse.ArgumentParser()
parser.add_argument('foo', nargs='+')
if len(sys.argv)==1:
    parser.print_help()
    sys.exit(1)
args=parser.parse_args()
</snippet></ROW><ROW><id>4043007</id><snippet>$ python my_program.py
</snippet></ROW><ROW><id>4043007</id><snippet>__main__.py</snippet></ROW><ROW><id>4043007</id><snippet>__main__.py</snippet></ROW><ROW><id>4043007</id><snippet>$ python my_program_dir
$ python my_program.zip
</snippet></ROW><ROW><id>4043047</id><snippet>with</snippet></ROW><ROW><id>4043047</id><snippet>with</snippet></ROW><ROW><id>4043050</id><snippet>def title_changed(widget, frame, title):
    print title

browser.connect('title-changed', title_changed)
</snippet></ROW><ROW><id>4043173</id><snippet>while keep_testing:
    signal.pause()
</snippet></ROW><ROW><id>4043277</id><snippet>self.root.minsize(self.root.winfo_reqwidth(), self.root.winfo_reqheight())
self.root.maxsize(self.root.winfo_reqwidth(), self.root.winfo_reqheight())
</snippet></ROW><ROW><id>4043277</id><snippet>__init__</snippet></ROW><ROW><id>4043277</id><snippet>self.root.overrideredirect(True)</snippet></ROW><ROW><id>4043762</id><snippet>Queue</snippet></ROW><ROW><id>4043762</id><snippet>Queue</snippet></ROW><ROW><id>4044008</id><snippet>plt.xlabel("$n_1$")</snippet></ROW><ROW><id>4044084</id><snippet>int dimensions[ ImageDimension ];
</snippet></ROW><ROW><id>4044084</id><snippet>npy_intp dimensions[ ImageDimension ];
</snippet></ROW><ROW><id>4044097</id><snippet>asyncore</snippet></ROW><ROW><id>4044822</id><snippet>def f2x(self, par1, par2, par3):
</snippet></ROW><ROW><id>4044822</id><snippet>&gt;&gt;&gt; class qw:
...     def f2x(self, p1, p2, p3):
...             print p1,p2,p3
... 
&gt;&gt;&gt; o = qw()
&gt;&gt;&gt; o.f2x(1,2,3)
1 2 3
</snippet></ROW><ROW><id>4044841</id><snippet>%</snippet></ROW><ROW><id>4044841</id><snippet>url = 'http://%s/Altiris/NS/Agent/GetClientPolicies.aspx?xml=%%3Crequest%%20configVersion=%%222%%22%%20guid=%%22{%s}%%22' % (ns, guid)
</snippet></ROW><ROW><id>4044841</id><snippet>.format()</snippet></ROW><ROW><id>4044841</id><snippet>url = 'http://{hostname}/Altiris/NS/Agent/GetClientPolicies.aspx?xml=%3Crequest%20configVersion=%222%22%20guid=%22{id}%%2''.format(hostname=ns, id=guid)
</snippet></ROW><ROW><id>4044882</id><snippet>sequence[0]</snippet></ROW><ROW><id>4044882</id><snippet>lineage_1[0][0] = 'L1_A'
lineage_1[1][0] = 'L1_B'
lineage_2[0][0] = 'L2_A'
lineage_2[1][0] = 'L2_B'
</snippet></ROW><ROW><id>4044882</id><snippet>lineage_X</snippet></ROW><ROW><id>4044882</id><snippet>sequence[0]</snippet></ROW><ROW><id>4044882</id><snippet>import copy
for i in sequence:
    lineage_1.append(copy.copy(i))
for k in sequence:
    lineage_2.append(copy.copy(k))
</snippet></ROW><ROW><id>4044882</id><snippet>sequence</snippet></ROW><ROW><id>4044882</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>4044882</id><snippet>copy.copy</snippet></ROW><ROW><id>4045168</id><snippet>dateutil</snippet></ROW><ROW><id>4045168</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; dt = parse('19981024103115+0100')
&gt;&gt;&gt; dt
datetime.datetime(1998, 10, 24, 10, 31, 15, tzinfo=tzoffset(None, 3600))
&gt;&gt;&gt; dt.utctimetuple()
time.struct_time(tm_year=1998, tm_mon=10, tm_mday=24, tm_hour=9, tm_min=31, tm_sec=15, tm_wday=5, tm_yday=297, tm_isdst=0)
</snippet></ROW><ROW><id>4045174</id><snippet>looping...
&lt;ser.inWaiting() val&gt;
</snippet></ROW><ROW><id>4045174</id><snippet>print ser.readline()
</snippet></ROW><ROW><id>4045391</id><snippet>  os.system('mysql &lt; etc')
</snippet></ROW><ROW><id>4045441</id><snippet>__init__</snippet></ROW><ROW><id>4045505</id><snippet>set</snippet></ROW><ROW><id>4045505</id><snippet>&gt;&gt;&gt; foo = set(range(0, 4))
&gt;&gt;&gt; foo
set([0, 1, 2, 3])
&gt;&gt;&gt; foo.update(range(2, 6))
&gt;&gt;&gt; foo
set([0, 1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>4045533</id><snippet>self.rHours</snippet></ROW><ROW><id>4045533</id><snippet>connect</snippet></ROW><ROW><id>4045533</id><snippet>clicked</snippet></ROW><ROW><id>4045533</id><snippet>self.rHours</snippet></ROW><ROW><id>4045533</id><snippet>self.rHours</snippet></ROW><ROW><id>4045533</id><snippet>eggTimer</snippet></ROW><ROW><id>4045533</id><snippet>prepare_timer</snippet></ROW><ROW><id>4045533</id><snippet>self.rHours</snippet></ROW><ROW><id>4045533</id><snippet>...
def prepare_timer(widget):
    self.timer = eggTimer(
        spinnerH.get_value_as_int(),
        spinnerM.get_value_as_int(),
        spinnerS.get_value_as_int(),
        "Title", "Text")
button.connect("clicked", prepare_timer)
...
</snippet></ROW><ROW><id>4045608</id><snippet>import Tkinter as tk
import re

class CustomText(tk.Text):
    '''A text widget with a new method, HighlightPattern 

    example:

    text = CustomText()
    text.tag_configure("red",foreground="#ff0000")
    text.HighlightPattern("this should be red", "red")

    The HighlightPattern method is a simplified python 
    version of the tcl code at http://wiki.tcl.tk/3246
    '''
    def __init__(self, *args, **kwargs):
        tk.Text.__init__(self, *args, **kwargs)

    def HighlightPattern(self, pattern, tag, start="1.0", end="end", regexp=True):
        '''Apply the given tag to all text that matches the given pattern'''

        start = self.index(start)
        end = self.index(end)
        self.mark_set("matchStart",start)
        self.mark_set("matchEnd",end)
        self.mark_set("searchLimit", end)

        count = tk.IntVar()
        while True:
            index = self.search(pattern, "matchEnd","searchLimit",count=count, regexp=regexp)
            if index == "": break
            self.mark_set("matchStart", index)
            self.mark_set("matchEnd", "%s+%sc" % (index,count.get()))
            self.tag_add(tag, "matchStart","matchEnd")

def aboutF():
     win = tk.Toplevel()
     win.title("About")
     about = '''Top/bottom 3 - Reports only the top/bottom 3 rows for a param you will later specify.
        Set noise threshold - Filters results with deltas below the specified noise threshold in ps.
        Sort output - Sorts by test,pre,post,unit,delta,abs(delta).
        Top 2 IDD2P/IDD6 registers - Reports only the top 2 IDD2P/IDD6 registers.
        Only critical registers - Reports only critical registers.
        Use tilda output format - Converts the output file from csv to tilda.
        Use html output format - Converts the output file from csv to html.'''
     about = re.sub("\n\s*", "\n", about) # remove leading whitespace from each line
     t=CustomText(win, wrap="word", width=100, height=10, borderwidth=0)
     t.tag_configure("blue", foreground="blue")
     t.pack(sid="top",fill="both",expand=True)
     t.insert("1.0", about)
     t.HighlightPattern("^.*? - ", "blue")
     tk.Button(win, text='OK', command=win.destroy).pack()

root=tk.Tk()
aboutF()
root.mainloop()
</snippet></ROW><ROW><id>4045619</id><snippet>def __init__(self):</snippet></ROW><ROW><id>4045619</id><snippet>def</snippet></ROW><ROW><id>4046219</id><snippet>command=self.updateValues()
</snippet></ROW><ROW><id>4046219</id><snippet>self.updateValues</snippet></ROW><ROW><id>4046219</id><snippet>()</snippet></ROW><ROW><id>4046219</id><snippet>()</snippet></ROW><ROW><id>4046219</id><snippet>command</snippet></ROW><ROW><id>4046233</id><snippet>bbox_inches='tight'</snippet></ROW><ROW><id>4046233</id><snippet>import matplotlib.pyplot as plt
import numpy as np
data = np.arange(3000).reshape((100,30))
plt.imshow(data)
plt.savefig('test.png', bbox_inches='tight')
</snippet></ROW><ROW><id>4046327</id><snippet># args[0] is always the executable's name
if len(args) &gt; 1:
    parser.parse_args(args, options)
else:
    #open file
</snippet></ROW><ROW><id>4046522</id><snippet>return render_to_response('xxxx.html', 
                          {'queryset': queryset,
                           'filter_form': filter_form,
                           'call_logs': call_logs,,
                           'magic_url': request.get_full_path(),
                           })
</snippet></ROW><ROW><id>4046648</id><snippet>url='file://path/to/file'</snippet></ROW><ROW><id>4047122</id><snippet>key = db.Key.from_path('food', 'apple')
reviews = FoodReview.all().filter("reviews =", key)
</snippet></ROW><ROW><id>4047303</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>4047303</id><snippet>b'...'</snippet></ROW><ROW><id>4047303</id><snippet>unicode_literals</snippet></ROW><ROW><id>4047303</id><snippet>-U</snippet></ROW><ROW><id>4047303</id><snippet>b'...'</snippet></ROW><ROW><id>4047303</id><snippet>u'...'</snippet></ROW><ROW><id>4047303</id><snippet>'...'</snippet></ROW><ROW><id>4047341</id><snippet>my_doctest_runner.py</snippet></ROW><ROW><id>4047341</id><snippet>if __name__ == "__main__":
    import doctest
    import example
    doctest.testmod(example)
</snippet></ROW><ROW><id>4047341</id><snippet>my_doctest_runner.py</snippet></ROW><ROW><id>4047341</id><snippet>example/__init__.py</snippet></ROW><ROW><id>4047341</id><snippet>$ python2.7 my_doctest_runner.py
**********************************************************************
File "/tmp/example/__init__.py", line 4, in example
Failed example:
    arnold.talk()
Expected:
    I am an aaardvark.
Got:
    I am an aardvark.
**********************************************************************
1 items had failures:
   1 of   2 in example
***Test Failed*** 1 failures.
</snippet></ROW><ROW><id>4047415</id><snippet>import threading
import time
import random

class ActivePool(object):
    def __init__(self):
        super(ActivePool, self).__init__()
        self.active=[]
        self.lock=threading.Lock()
    def makeActive(self, name):
        with self.lock:
            self.active.append(name)
    def makeInactive(self, name):
        with self.lock:
            self.active.remove(name)
    def numActive(self):
        with self.lock:
            return len(self.active)
    def __str__(self):
        with self.lock:
            return str(self.active)
def worker(pool):
    name=threading.current_thread().name
    pool.makeActive(name)
    print 'Now running: %s' % str(pool)
    time.sleep(random.randint(1,3))
    pool.makeInactive(name)

if __name__=='__main__':
    poolA=ActivePool()
    poolB=ActivePool()    
    jobs=[]
    for i in range(5):
        jobs.append(
            threading.Thread(target=worker, name='A{0}'.format(i),
                             args=(poolA,)))
        jobs.append(
            threading.Thread(target=worker, name='B{0}'.format(i),
                             args=(poolB,)))
    for j in jobs:
        j.daemon=True
        j.start()
    while threading.activeCount()&gt;1:
        for j in jobs:
            j.join(1)
            print 'A-threads active: {0}, B-threads active: {1}'.format(
                poolA.numActive(),poolB.numActive())
</snippet></ROW><ROW><id>4047415</id><snippet>Now running: ['A0']
Now running: ['B0']
Now running: ['A0', 'A1']
Now running: ['B0', 'B1']
 Now running: ['A0', 'A1', 'A2']
 Now running: ['B0', 'B1', 'B2']
Now running: ['A0', 'A1', 'A2', 'A3']
Now running: ['B0', 'B1', 'B2', 'B3']
Now running: ['A0', 'A1', 'A2', 'A3', 'A4']
Now running: ['B0', 'B1', 'B2', 'B3', 'B4']
A-threads active: 4, B-threads active: 5
A-threads active: 2, B-threads active: 5
A-threads active: 0, B-threads active: 3
A-threads active: 0, B-threads active: 3
A-threads active: 0, B-threads active: 3
A-threads active: 0, B-threads active: 3
A-threads active: 0, B-threads active: 3
A-threads active: 0, B-threads active: 0
A-threads active: 0, B-threads active: 0
A-threads active: 0, B-threads active: 0
</snippet></ROW><ROW><id>4047583</id><snippet>zlibc</snippet></ROW><ROW><id>4047583</id><snippet>zlib1g</snippet></ROW><ROW><id>4047583</id><snippet>zlib1g-dev</snippet></ROW><ROW><id>4047583</id><snippet>-dev</snippet></ROW><ROW><id>4047583</id><snippet>libexpat1-dev</snippet></ROW><ROW><id>4047583</id><snippet>libdb4.8-dev</snippet></ROW><ROW><id>4047583</id><snippet>libncurses5-dev</snippet></ROW><ROW><id>4047583</id><snippet>libreadline6-dev</snippet></ROW><ROW><id>4047673</id><snippet>client.py</snippet></ROW><ROW><id>4047673</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>4047673</id><snippet>sys.argv</snippet></ROW><ROW><id>4047673</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>4047700</id><snippet>O = viz.pick(1, viz.WORLD)

BackSetts = ["set_b1b", "set_b2a", "set_b1a",  "set_b2b"]
LeftSetts = ["set_l1a", "set_l1b", "set_l2a", "set_l1b"]
NormSetts = ["set_nr_a", "set_nr_b"]
Maps = ["MapA","MapB"]
anyset = []

if O.name in BackSetts:
    anyset = set(BackSetts)|set(Maps)

elif O.name in LeftSetts:
    anyset = set(LeftSetts)|set(Maps)

elif O.name in NormSetts:
    anyset = NormSetts

for i in anyset:
    WORLD[i].alpha(abs(WORLD[i].getAlpha()-1))
</snippet></ROW><ROW><id>4047709</id><snippet>if Action():
    lots of code
    return True
return False
</snippet></ROW><ROW><id>4047709</id><snippet>def check(isbn):
    check_digit = int(isbn[-1])
    match = re.search(r'(\d)-(\d{3})-(\d{5})', isbn[:-1])

    if not match:
        return False

    digits = match.group(1) + match.group(2) + match.group(3)
    result = 0

    for i, digit in enumerate(digits):
      result += (i + 1) * int(digit)

    return True if (result % 11) == check_digit else False
</snippet></ROW><ROW><id>4047709</id><snippet>def check(isbn):
    isbn = isbn.replace("-", "").replace(" ", "");
    check_digit = int(isbn[-1])
    match = re.search(r'^(\d{9})$', isbn[:-1])
    if not match:
        return False

    digits = match.group(1)

    result = 0
    for i, digit in enumerate(digits):
      result += (i + 1) * int(digit)

    return True if (result % 11) == check_digit else False
</snippet></ROW><ROW><id>4047709</id><snippet>def check(isbn):
    isbn = isbn.replace("-", "").replace(" ", "").upper();
    match = re.search(r'^(\d{9})(\d|X)$', isbn)
    if not match:
        return False

    digits = match.group(1)
    check_digit = 10 if match.group(2) == 'X' else int(match.group(2))

    result = 0
    for i, digit in enumerate(digits):
      result += (i + 1) * int(digit)

    return True if (result % 11) == check_digit else False
</snippet></ROW><ROW><id>4047709</id><snippet>max</snippet></ROW><ROW><id>4047709</id><snippet>def check(isbn):
    isbn = isbn.replace("-", "").replace(" ", "").upper();
    match = re.search(r'^(\d{9})(\d|X)$', isbn)
    if not match:
        return False

    digits = match.group(1)
    check_digit = 10 if match.group(2) == 'X' else int(match.group(2))

    result = sum((i + 1) * int(digit) for i, digit in enumerate(digits))
    return (result % 11) == check_digit
</snippet></ROW><ROW><id>4047755</id><snippet>ValueError</snippet></ROW><ROW><id>4047755</id><snippet>TypeError</snippet></ROW><ROW><id>4047840</id><snippet>multiprocessing</snippet></ROW><ROW><id>4047840</id><snippet>def worker(lines):
    """Make a dict out of the parsed, supplied lines"""
    result = {}
    for line in lines.split('\n'):
        k, v = parse(line)
        result[k] = v
    return result

if __name__ == '__main__':
    # configurable options.  different values may work better.
    numthreads = 8
    numlines = 100

    lines = open('input.txt').readlines()

    # create the process pool
    pool = multiprocessing.Pool(processes=numthreads)

    # map the list of lines into a list of result dicts
    result_list = pool.map(worker, 
        (lines[line:line+numlines] for line in xrange(0,len(lines),numlines) ) )

    # reduce the result dicts into a single dict
    result = {}
    map(result.update, result_list)
</snippet></ROW><ROW><id>4047955</id><snippet>FieldStorage</snippet></ROW><ROW><id>4047955</id><snippet>multipart/form-data</snippet></ROW><ROW><id>4047955</id><snippet>cgi.py</snippet></ROW><ROW><id>4047955</id><snippet>LONGBLOB</snippet></ROW><ROW><id>4047955</id><snippet>BLOB</snippet></ROW><ROW><id>4047955</id><snippet>SHOW CREATE TABLE x</snippet></ROW><ROW><id>4047980</id><snippet>str('%.2f'%(POS))
</snippet></ROW><ROW><id>4047980</id><snippet>'%.2f' % POS
</snippet></ROW><ROW><id>4047980</id><snippet>[Griditema[i].alpha(POS) for i in Griditema]
</snippet></ROW><ROW><id>4047980</id><snippet>for item in Griditema.itervalues():
   item.alpha(POS)
</snippet></ROW><ROW><id>4048115</id><snippet>^\d+;(\d+-\d+,?)+
</snippet></ROW><ROW><id>4048127</id><snippet>&gt;&gt;&gt; L = [u'a\r\nb\r\nc\r\nd\r\ne']
&gt;&gt;&gt; L[0].split('\r\n')
[u'a', u'b', u'c', u'd', u'e']
</snippet></ROW><ROW><id>4048398</id><snippet>def init_model(engine):
    sm = orm.sessionmaker(autoflush=False, autocommit=False, expire_on_commit=False, bind=engine)
    meta.engine = engine
    meta.Session = orm.scoped_session(sm)

def index(self):
    rows = Session.execute('SELECT ...')
</snippet></ROW><ROW><id>4048398</id><snippet>class Globals(...):
    def init_model(self, config):
        self.some_persistent_db_object = Session.execute('...')

def load_environment(...):
    ...
    config['pylons.app_globals'].init_model(config)
    return config
</snippet></ROW><ROW><id>4048456</id><snippet>firstvar = random.choice('A23456789XJQK') 
secondvar = random.choice('sdhc') 
newvar = (firstvar + secondvar) if firstvar != 'X' else ('10' + secondvar)
</snippet></ROW><ROW><id>4048456</id><snippet>firstvar = random.choice(['A', '2', '3', ..., '10', ...])
</snippet></ROW><ROW><id>4048456</id><snippet>replace</snippet></ROW><ROW><id>4048456</id><snippet>newvar = firstvar.replace('X', '10') + secondvar
</snippet></ROW><ROW><id>4048644</id><snippet>optparse</snippet></ROW><ROW><id>4048644</id><snippet>config.py</snippet></ROW><ROW><id>4048644</id><snippet>config</snippet></ROW><ROW><id>4048644</id><snippet>config</snippet></ROW><ROW><id>4048644</id><snippet>.py</snippet></ROW><ROW><id>4048644</id><snippet>optparse</snippet></ROW><ROW><id>4048781</id><snippet>class Test(webapp.RequestHandler):
    def err_user_not_found(self):
        self.redirect(users.create_login_url(self.request.uri))
    def get(self):      
        user = users.get_current_user()
        # error path
        if not user:
            self.err_user_not_found()
            return

        # happy path
        greeting = ('Hello, ' + user.nickname())
        ...
        template_values = {"greeting": greeting,}
</snippet></ROW><ROW><id>4048847</id><snippet>stripped_iter = (x.strip() for x in l.split(','))
non_empty_iter = (x for x in stripped_iter if x)
</snippet></ROW><ROW><id>4048866</id><snippet>def infinite_producer(queue):
    while True:
        queue.put('hello, stream')

class MainController(Process):
    def __init__(self):
        self.queue_stream   = Queue()
        self.queue_language = Queue()
        self.queue_expander = Queue()
        self.self.control_stream = Process(target=infinite_producer,self.queue_stream)

    def run(self):
        self.control_stream.start()

 #... etc you get the idea.

if __name__ == '__main__':
    print 'Launching System...'
    control_main = MainController()
    control_main.start()
</snippet></ROW><ROW><id>4049039</id><snippet>class SimpleServer(gevent.server.StreamServer):

    def handle(self, socket, address):
        socket.sendall('hello and goodbye!')

class Test(unittest.TestCase):      

    def test(self):
        server = SimpleServer(('127.0.0.1', 0))
        server.start()
        client = gevent.socket.create_connection(('127.0.0.1', server.server_port))
        response = client.makefile().read()
        assert response == 'hello and goodbye!'
        server.stop()
</snippet></ROW><ROW><id>4049039</id><snippet>0</snippet></ROW><ROW><id>4049039</id><snippet>bind</snippet></ROW><ROW><id>4049039</id><snippet>server_port</snippet></ROW><ROW><id>4049039</id><snippet>StreamServer</snippet></ROW><ROW><id>4049039</id><snippet>keyfile</snippet></ROW><ROW><id>4049039</id><snippet>certfile</snippet></ROW><ROW><id>4049039</id><snippet>SSLObject</snippet></ROW><ROW><id>4049039</id><snippet>StreamServer</snippet></ROW><ROW><id>4049043</id><snippet>print(*list, sep='\t')
</snippet></ROW><ROW><id>4049043</id><snippet>list</snippet></ROW><ROW><id>4049757</id><snippet> for tgt in links:
      if tgt in mal_links:
          # you know that it's a bad link
      else:
          crawl(tgt)
</snippet></ROW><ROW><id>4049757</id><snippet>next</snippet></ROW><ROW><id>4049757</id><snippet>self.iter</snippet></ROW><ROW><id>4049757</id><snippet>tgt</snippet></ROW><ROW><id>4049757</id><snippet>next</snippet></ROW><ROW><id>4049857</id><snippet>datetime.combine(date.today(), time()) + timedelta(hours=2)
</snippet></ROW><ROW><id>4049857</id><snippet>&gt;&gt;&gt; timedelta(hours=3) 
datetime.timedelta(0, 10800)
&gt;&gt;&gt; timedelta(hours=2)
datetime.timedelta(0, 7200)
&gt;&gt;&gt;
&gt;&gt;&gt; timedelta(hours=3) + timedelta(hours=2)
datetime.timedelta(0, 18000)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4050118</id><snippet>class Stream(object):

    host = 'stream.twitter.com'

    def __init__(self, auth, listener, **options):
        self.auth = auth
        self.listener = listener
</snippet></ROW><ROW><id>4050118</id><snippet>auth = tweepy.BasicAuthHandler(username, password)
</snippet></ROW><ROW><id>4050118</id><snippet>username="abc"
password="abc"
listener = StreamWatcherListener()
auth = tweepy.BasicAuthHandler(username, password)
stream=tweepy.Stream(auth,listener)
</snippet></ROW><ROW><id>4050211</id><snippet>get</snippet></ROW><ROW><id>4050211</id><snippet>seconds</snippet></ROW><ROW><id>4050211</id><snippet>@lru_cache(maxsize=20)
def my_expensive_function(x, y):
    # my expensive logic here
    return result
</snippet></ROW><ROW><id>4050214</id><snippet>class StreamWatcherListener(tweepy.StreamListener):
    status_wrapper = TextWrapper(width=60, initial_indent='    ', subsequent_indent='    ')

    def __init__(self, api=None):
        self.file = open("myNewFile")
        super(StreamWatcherListener, self).__init__(api)

    ....
</snippet></ROW><ROW><id>4050483</id><snippet>import jsonpickle
import sqlalchemy.types as types

class JsonType(types.MutableType, types.TypeDecorator):    
    impl = types.Unicode

    def process_bind_param(self, value, engine):
        return unicode(jsonpickle.encode(value))

    def process_result_value(self, value, engine):
        if value:
            return jsonpickle.decode(value)
        else:
            # default can also be a list
            return {}
</snippet></ROW><ROW><id>4050483</id><snippet>from elixir import *
class MyTable(Entity):
    using_options(tablename='my_table')
    foo = Field(String, primary_key=True)
    content = Field(JsonType())
    active = Field(Boolean, default=True)
</snippet></ROW><ROW><id>4050515</id><snippet>lbl=Label(root, text="toto", cursor="@toto.cur")</snippet></ROW><ROW><id>4050558</id><snippet>/usr/lib/python2.6/anydbm.py</snippet></ROW><ROW><id>4050558</id><snippet>/usr/lib/python2.6/anydbm.py</snippet></ROW><ROW><id>4050558</id><snippet>python2.6_2.6.5-1ubuntu6</snippet></ROW><ROW><id>4050622</id><snippet>round(random.uniform(num1, num2), 6)
</snippet></ROW><ROW><id>4050622</id><snippet>...0001</snippet></ROW><ROW><id>4050622</id><snippet>...9999</snippet></ROW><ROW><id>4050955</id><snippet>foo</snippet></ROW><ROW><id>4050955</id><snippet>foo = [i for i in range(10) if i == x]</snippet></ROW><ROW><id>4050955</id><snippet>foo</snippet></ROW><ROW><id>4050955</id><snippet>[]</snippet></ROW><ROW><id>4050955</id><snippet>foo == []</snippet></ROW><ROW><id>4050955</id><snippet>not foo</snippet></ROW><ROW><id>4050955</id><snippet>foo == []</snippet></ROW><ROW><id>4050955</id><snippet>foo == False</snippet></ROW><ROW><id>4050955</id><snippet>not foo</snippet></ROW><ROW><id>4050955</id><snippet>not foo</snippet></ROW><ROW><id>4050955</id><snippet>foo</snippet></ROW><ROW><id>4050955</id><snippet>foo == False</snippet></ROW><ROW><id>4050955</id><snippet>foo</snippet></ROW><ROW><id>4050955</id><snippet>False</snippet></ROW><ROW><id>4051112</id><snippet># l = [x0y0z0, ...]
def bucketsofun(l, sp=16):
  r = [[] for x in range(sp)]
  for b, e in itertools.izip(itertools.cycle(r), l):
    b.append(e)
  return r
</snippet></ROW><ROW><id>4051298</id><snippet>with open('somefile.txt', 'w') as fp:
  for i, s in enumerate(X):
    print &gt;&gt;fp, '%d. %s' % (i + 1, ' '.join(s))
</snippet></ROW><ROW><id>4051333</id><snippet>d = {}
col_label_set = set()
row_label_set = set()
input =  open("input.txt")
output = open("output.txt","w")
for line in input:
    line = line.strip()
    splat = line.split(',')
    if len(splat) != 3:
        break # error message???
    k1, k2, v = splat
    try:
        subdict = d[k1]
    except KeyError:
        subdict = {}
        d[k1] = subdict
    subdict[k2] = v
    row_label_set.add(k1)
    col_label_set.add(k2)
col_labels = sorted(col_label_set)
row_labels = sorted(row_label_set
output.write("\t")
for v in col_labels::
    output.write(v + "\t")
output.write("\n")
for r in row_labels:
    output.write(r + "\t")
    for c in col_labels:
        output.write(d[r].get(c, "") + "\t")
    output.write("\n")
</snippet></ROW><ROW><id>4051333</id><snippet>class SparseTable(object):

    def __init__(self, iterable):
        d = {}
        col_label_set = set()
        for row_label, col_label, value in iterable:
            try:
                subdict = d[row_label]
            except KeyError:
                subdict = {}
                d[row_label] = subdict
            subdict[col_label] = value
            col_label_set.add(col_label)
        self.d = d
        self.col_label_set = col_label_set

    def tabulate(self, row_writer, corner_label=u"", missing=u""):
        d = self.d
        col_labels = sorted(self.col_label_set)
        row_labels = sorted(d.iterkeys())
        orow = [corner_label] + col_labels
        row_writer(orow)
        for row_label in row_labels:
            orow = [row_label]
            subdict = d[row_label]
            for col_label in col_labels:
                orow.append(subdict.get(col_label, missing))
            row_writer(orow)

if __name__ == "__main__":

    import sys

    test_data = u"""
    3277,4733,54.1
    3278,4741,51.0
    3278,4750,28.4
    3278,4768,36.0
    3278,4776,50.1
    3278,4784,51.4
    3279,4792,82.6
    3279,4806,78.2
    3279,4814,36.4
    """.splitlines(True)

    def my_writer(row):
        sys.stdout.write(u"\t".join(row))
        sys.stdout.write(u"\n")

    def my_reader(iterable):
        for line in iterable:
            line = line.strip()
            if not line: continue
            splat = line.split(u",")
            if len(splat) != 3:
                raise ValueError(u"expected 3 fields, found %d" % len(splat))
            yield splat

    table = SparseTable(my_reader(test_data))
    table.tabulate(my_writer, u"A/B", u"....")
</snippet></ROW><ROW><id>4051333</id><snippet>A/B     4733    4741    4750    4768    4776    4784    4792    4806    4814
3277    54.1    ....    ....    ....    ....    ....    ....    ....    ....
3278    ....    51.0    28.4    36.0    50.1    51.4    ....    ....    ....
3279    ....    ....    ....    ....    ....    ....    82.6    78.2    36.4
</snippet></ROW><ROW><id>4051531</id><snippet>max_allowed_packet</snippet></ROW><ROW><id>4051531</id><snippet>[client]</snippet></ROW><ROW><id>4051531</id><snippet>my.cnf</snippet></ROW><ROW><id>4051531</id><snippet>mysqldb.connect</snippet></ROW><ROW><id>4052003</id><snippet>db.create_index('row_locks', ['table_name','locked_row_id'], unique=True)
</snippet></ROW><ROW><id>4052335</id><snippet>list</snippet></ROW><ROW><id>4052335</id><snippet>int</snippet></ROW><ROW><id>4052335</id><snippet>"%x"%value</snippet></ROW><ROW><id>4052335</id><snippet>hex</snippet></ROW><ROW><id>4052335</id><snippet>int</snippet></ROW><ROW><id>4052335</id><snippet>int</snippet></ROW><ROW><id>4052335</id><snippet>&gt;&gt;&gt; int('0x'+'2a',16)
42
&gt;&gt;&gt; packet=["2a","19","00","00"]
&gt;&gt;&gt; packet=[int(p,16) for p in packet]
&gt;&gt;&gt; packet
[42, 25, 0, 0]
&gt;&gt;&gt; print ", ".join(map(hex,packet))
0x2a, 0x19, 0x0, 0x0
</snippet></ROW><ROW><id>4052423</id><snippet>print "mysqldump database",
for i in range(n):
    print "shard_"+str(2*i),
</snippet></ROW><ROW><id>4053611</id><snippet>newlist = [sublist[:2] for sublist in mylist]
</snippet></ROW><ROW><id>4053612</id><snippet>Models</snippet></ROW><ROW><id>4053612</id><snippet>class Route(models.Model):
    #bunch of stuff
    pass
class Stop(models.Model):
    #bunch of stuff
    stop_times = models.ManyToManyField(through=StopTime)
class StopTime(models.Model):
    trip = models.ForeignKey(Trip)
    stop = models.ForeignKey(Stop)
    # bunch of additional meta about this M2M table
    pass
class Trip(models.Model):
    route = models.ForeignKey(Route)
    # bunch of stuff
</snippet></ROW><ROW><id>4053612</id><snippet>Route.objects.filter(trip__stop__id=my_stop_id)
</snippet></ROW><ROW><id>4053612</id><snippet>Route</snippet></ROW><ROW><id>4053612</id><snippet>Stop</snippet></ROW><ROW><id>4053612</id><snippet>id</snippet></ROW><ROW><id>4053612</id><snippet>my_stop_id</snippet></ROW><ROW><id>4053612</id><snippet>related_name</snippet></ROW><ROW><id>4053790</id><snippet>Mapping</snippet></ROW><ROW><id>4053790</id><snippet>MuteableMapping</snippet></ROW><ROW><id>4053790</id><snippet>dict</snippet></ROW><ROW><id>4053790</id><snippet>import collections
class MinimalMapping(collections.Mapping):
    def __init__(self, *items ):
        self.elements = dict(items)
    def __getitem__(self, key):
        return self.elements[key]
    def __len__(self):
        return len(self.elements)
    def __iter__(self):
        return iter(self.elements)

t = MinimalMapping()
print (t.iteritems, t.keys, t.itervalues, t.get)
</snippet></ROW><ROW><id>4053872</id><snippet>*.so</snippet></ROW><ROW><id>4053872</id><snippet>/usr/lib32/wine/advapi32.dll.so</snippet></ROW><ROW><id>4054042</id><snippet>x</snippet></ROW><ROW><id>4054340</id><snippet>from random import randint
from time import sleep

sleep(randint(10,100))
</snippet></ROW><ROW><id>4054622</id><snippet>function(doc) {
 if (doc.type == "user") {
  emit([doc._id,0],null);
 } else if(doc.type == "project") {
  emit([doc.username,doc._id],null);
 }
}
</snippet></ROW><ROW><id>4054660</id><snippet>IF NOT EXISTS CREATE TABLE</snippet></ROW><ROW><id>4054660</id><snippet>CREATE TABLE IF NOT EXISTS [tablename]
</snippet></ROW><ROW><id>4054706</id><snippet>r",([A-Z\s]+),(LA|RO|MU|FE|AV|CA),(ML|FE|MN|FS|UN)?,(\d+/\d+/\d{4})?"
#  ^        ^ 
</snippet></ROW><ROW><id>4054706</id><snippet>csv</snippet></ROW><ROW><id>4055188</id><snippet>rows</snippet></ROW><ROW><id>4055188</id><snippet>from BeautifulSoup import BeautifulSoup

f = open('path_to_file','r')
lines = [i for i in f.readlines()]
soup = BeautifulSoup(''.join(lines))
rows = soup.findAll('tr')
allArticles = []
for row in rows:
    l =[]
    for r in row.findAll('td'):
        l += [r.string]
    allArticles+=[l]
</snippet></ROW><ROW><id>4055447</id><snippet>insert</snippet></ROW><ROW><id>4055447</id><snippet>get</snippet></ROW><ROW><id>4055485</id><snippet>create table parent (
  id           int PK,
  otherField   whatever
)

create table child (
  id           int PK,
  parent_id    int Fk,
  otherField   whatever
)
</snippet></ROW><ROW><id>4055485</id><snippet>create table child (
  id           int PK,
  parent_id    int Fk,
  birth_order  int,
  otherField   whatever
)
</snippet></ROW><ROW><id>4055612</id><snippet>import Tkinter as tk
import tkFileDialog 

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.floater = FloatingWindow(self)

class FloatingWindow(tk.Toplevel):
    def __init__(self, *args, **kwargs):
        tk.Toplevel.__init__(self, *args, **kwargs)
        self.overrideredirect(True)

        self.label = tk.Label(self, text="Click on the grip to move")
        self.grip = tk.Label(self, bitmap="gray25")
        self.grip.pack(side="left", fill="y")
        self.label.pack(side="right", fill="both", expand=True)

        self.grip.bind("&lt;ButtonPress-1&gt;", self.StartMove)
        self.grip.bind("&lt;ButtonRelease-1&gt;", self.StopMove)
        self.grip.bind("&lt;B1-Motion&gt;", self.OnMotion)

    def StartMove(self, event):
        self.x = event.x
        self.y = event.y

    def StopMove(self, event):
        self.x = None
        self.y = None

    def OnMotion(self, event):
        deltax = event.x - self.x
        deltay = event.y - self.y
        x = self.winfo_x() + deltax
        y = self.winfo_y() + deltay
        self.geometry("+%s+%s" % (x, y))



app=App()
app.mainloop()
</snippet></ROW><ROW><id>4055783</id><snippet>class Value(object):
    """ Generic container of values. """
    def __init__(self, type_, val):
        self.type = type_   # using 'type_' to avoid hiding built-in
        self.val = val

def myfunc(val):
    # Look ma, no type-checking!
    cmdline = 'magicprogram {obj.type} {obj.val}'.format(obj=val)
    print 'Popen({!r}, ... blah blah)'.format(cmdline)
    # ...

val1 = Value('i', 42)
val2 = Value('s', 'foobar')

myfunc(val1)  # Popen('magicprogram i 42', ... blah blah)
myfunc(val2)  # Popen('magicprogram s foobar', ... blah blah)
</snippet></ROW><ROW><id>4055783</id><snippet>Value</snippet></ROW><ROW><id>4055783</id><snippet>Value</snippet></ROW><ROW><id>4055783</id><snippet>myfunc()</snippet></ROW><ROW><id>4055783</id><snippet>myfunc()</snippet></ROW><ROW><id>4056362</id><snippet>def process(q):
    for item, count in q:
        item.count = count
        yield count
</snippet></ROW><ROW><id>4056362</id><snippet>from sqlalchemy.orm.query import Query

class AnnotateQuery(Query):
    _annotations = ()

    def annotate(self, key, expr):
        q = self.add_column(expr)
        q._annotations = self._annotations + (key, )
        return q

    def __iter__(self):
        if not self._annotations:
            return super(AnnotateQuery, self).__iter__()
        else:
            for row in super(AnnotateQuery, self):
                item, remaining = row[0], row[1:]
                for i, key in enumerate(self._annotations):
                    setattr(item, key, remaining[i])
                yield item


# session usage:

Session = sessionmaker(query_cls=AnnotateQuery)

# query usage:
q = Session.query(Item).outerjoin(...).annotate('count', Item.count)
</snippet></ROW><ROW><id>4056362</id><snippet>column_property()</snippet></ROW><ROW><id>4056588</id><snippet>url_template = 'http://somewhere.com/relatedqueries?limit={limit}&amp;query={seedterm}'
url = url_template.format(limit=2, seedterm='seedterm')
</snippet></ROW><ROW><id>4056588</id><snippet>%</snippet></ROW><ROW><id>4056588</id><snippet>url_template = 'http://somewhere.com/relatedqueries?limit=%(limit)d&amp;query=%(seedterm)s'
url = url_template % dict(limit=2, seedterm='seedterm')
</snippet></ROW><ROW><id>4056588</id><snippet>import urllib.request
data = urllib.request.urlopen(url) # url from previous section
</snippet></ROW><ROW><id>4056588</id><snippet>data</snippet></ROW><ROW><id>4056588</id><snippet>with urllib.request.urlopen(url) as data:
    # do processing here
</snippet></ROW><ROW><id>4056588</id><snippet>urllib2</snippet></ROW><ROW><id>4056588</id><snippet>urllib.request</snippet></ROW><ROW><id>4056588</id><snippet>oo.visualization.Query.setResponse</snippet></ROW><ROW><id>4056588</id><snippet>result = data.read()

prefix = 'oo.visualization.Query.setResponse('
suffix = ');'

if result.startswith(prefix) and result.endswith(suffix):
    result = result[len(prefix):-len(suffix)]
</snippet></ROW><ROW><id>4056588</id><snippet>result</snippet></ROW><ROW><id>4056588</id><snippet>import json

result_object = json.loads(result)
</snippet></ROW><ROW><id>4056588</id><snippet>result_object</snippet></ROW><ROW><id>4056588</id><snippet>dict</snippet></ROW><ROW><id>4056588</id><snippet>version</snippet></ROW><ROW><id>4056588</id><snippet>reqId</snippet></ROW><ROW><id>4056588</id><snippet># Get the rows in the table, then get the second column's value for
# each row
terms = [row['c'][2]['v'] for row in result_object['table']['rows']]
</snippet></ROW><ROW><id>4056588</id><snippet>#!/usr/bin/env python3

"""A script for retrieving and parsing results from requests to
somewhere.com.

This script works as either a standalone script or as a library. To use
it as a standalone script, run it as `python3 scriptname.py`. To use it
as a library, use the `retrieve_terms` function."""

import urllib.request
import json
import sys

E_OPERATION_ERROR = 1
E_INVALID_PARAMS = 2

def parse_result(result):
    """Parse a JSONP result string and return a list of terms"""
    prefix = 'oo.visualization.Query.setResponse('
    suffix = ');'

    # Strip JSONP function wrapper
    if result.startswith(prefix) and result.endswith(suffix):
        result = result[len(prefix):-len(suffix)]

    # Deserialize JSON to Python objects
    result_object = json.loads(result)

    # Get the rows in the table, then get the second column's value
    # for each row
    return [row['c'][2]['v'] for row in result_object['table']['rows']]

def retrieve_terms(limit, seedterm):
    """Retrieves and parses data and returns a list of terms"""
    url_template = 'http://somewhere.com/relatedqueries?limit={limit}&amp;query={seedterm}'
    url = url_template.format(limit=limit, seedterm=seedterm)

    try:
        with urllib.request.urlopen(url) as data:
            data = perform_request(limit, seedterm)
            result = data.read()
    except:
        print('Could not request data from server', file=sys.stderr)
        exit(E_OPERATION_ERROR)

    terms = parse_result(result)
    print(terms)

def main(limit, seedterm):
    """Retrieves and parses data and prints each term to standard output"""
    terms = retrieve_terms(limit, seedterm)
    for term in terms:
        print(term)

if __name__ == '__main__'
    try:
        limit = int(sys.argv[1])
        seedterm = sys.argv[2]
    except:
        error_message = '''{} limit seedterm

limit must be an integer'''.format(sys.argv[0])
        print(error_message, file=sys.stderr)
        exit(2)

    exit(main(limit, seedterm))
</snippet></ROW><ROW><id>4056588</id><snippet>#!/usr/bin/env python2.7

"""A script for retrieving and parsing results from requests to
somewhere.com.

This script works as either a standalone script or as a library. To use
it as a standalone script, run it as `python2.7 scriptname.py`. To use it
as a library, use the `retrieve_terms` function."""

import urllib2
import json
import sys

E_OPERATION_ERROR = 1
E_INVALID_PARAMS = 2

def parse_result(result):
    """Parse a JSONP result string and return a list of terms"""
    prefix = 'oo.visualization.Query.setResponse('
    suffix = ');'

    # Strip JSONP function wrapper
    if result.startswith(prefix) and result.endswith(suffix):
        result = result[len(prefix):-len(suffix)]

    # Deserialize JSON to Python objects
    result_object = json.loads(result)

    # Get the rows in the table, then get the second column's value
    # for each row
    return [row['c'][2]['v'] for row in result_object['table']['rows']]

def retrieve_terms(limit, seedterm):
    """Retrieves and parses data and returns a list of terms"""
    url_template = 'http://somewhere.com/relatedqueries?limit=%(limit)d&amp;query=%(seedterm)s'
    url = url_template % dict(limit=2, seedterm='seedterm')

    try:
        with urllib2.urlopen(url) as data:
            data = perform_request(limit, seedterm)
            result = data.read()
    except:
        sys.stderr.write('%s\n' % 'Could not request data from server')
        exit(E_OPERATION_ERROR)

    terms = parse_result(result)
    print terms

def main(limit, seedterm):
    """Retrieves and parses data and prints each term to standard output"""
    terms = retrieve_terms(limit, seedterm)
    for term in terms:
        print term

if __name__ == '__main__'
    try:
        limit = int(sys.argv[1])
        seedterm = sys.argv[2]
    except:
        error_message = '''{} limit seedterm

limit must be an integer'''.format(sys.argv[0])
        sys.stderr.write('%s\n' % error_message)
        exit(2)

    exit(main(limit, seedterm))
</snippet></ROW><ROW><id>4056757</id><snippet>s</snippet></ROW><ROW><id>4056757</id><snippet>s = '2010-10-29'
</snippet></ROW><ROW><id>4056757</id><snippet>s.split('-')</snippet></ROW><ROW><id>4056757</id><snippet>date</snippet></ROW><ROW><id>4056757</id><snippet>d = datetime.date(2010, 10, 29)
</snippet></ROW><ROW><id>4056757</id><snippet>d.strftime('%B')</snippet></ROW><ROW><id>4056782</id><snippet>buckets = [0] * 100
</snippet></ROW><ROW><id>4056848</id><snippet>ext_modules = []
if '--add-this' in sys.argv:
    ext_modules.append(Extension(...))
    sys.argv.remove('--add-this')
setup(...
      ext_modules = ext_modules
)
</snippet></ROW><ROW><id>4056848</id><snippet>--with-modules</snippet></ROW><ROW><id>4056853</id><snippet>on_draw</snippet></ROW><ROW><id>4056853</id><snippet>import matplotlib.pyplot as plt

def main():
    fig = plt.figure()
    plt.axis([0, 10, 0, 10])

    t = "This is a really long string that I'd rather have wrapped so that it"\
    " doesn't go outside of the figure, but if it's long enough it will go"\
    " off the top or bottom!"
    plt.text(4, 1, t, ha='left', rotation=15)
    plt.text(5, 3.5, t, ha='right', rotation=-15)
    plt.text(5, 10, t, fontsize=18, ha='center', va='top')
    plt.text(3, 0, t, family='serif', style='italic', ha='right')
    plt.title("This is a really long title that I want to have wrapped so it"\
             " does not go outside the figure boundaries", ha='center')

    # Now make the text auto-wrap...
    fig.canvas.mpl_connect('draw_event', on_draw)
    plt.show()

def on_draw(event):
    """Auto-wraps all text objects in a figure at draw-time"""
    import matplotlib as mpl
    fig = event.canvas.figure

    # Cycle through all artists in all the axes in the figure
    for ax in fig.axes:
        for artist in ax.get_children():
            # If it's a text artist, wrap it...
            if isinstance(artist, mpl.text.Text):
                autowrap_text(artist, event.renderer)

    # Temporarily disconnect any callbacks to the draw event...
    # (To avoid recursion)
    func_handles = fig.canvas.callbacks.callbacks[event.name]
    fig.canvas.callbacks.callbacks[event.name] = {}
    # Re-draw the figure..
    fig.canvas.draw()
    # Reset the draw event callbacks
    fig.canvas.callbacks.callbacks[event.name] = func_handles

def autowrap_text(textobj, renderer):
    """Wraps the given matplotlib text object so that it exceed the boundaries
    of the axis it is plotted in."""
    import textwrap
    # Get the starting position of the text in pixels...
    x0, y0 = textobj.get_transform().transform(textobj.get_position())
    # Get the extents of the current axis in pixels...
    clip = textobj.get_axes().get_window_extent()
    # Set the text to rotate about the left edge (doesn't make sense otherwise)
    textobj.set_rotation_mode('anchor')

    # Get the amount of space in the direction of rotation to the left and 
    # right of x0, y0 (left and right are relative to the rotation, as well)
    rotation = textobj.get_rotation()
    right_space = min_dist_inside((x0, y0), rotation, clip)
    left_space = min_dist_inside((x0, y0), rotation - 180, clip)

    # Use either the left or right distance depending on the horiz alignment.
    alignment = textobj.get_horizontalalignment()
    if alignment is 'left':
        new_width = right_space 
    elif alignment is 'right':
        new_width = left_space
    else:
        new_width = 2 * min(left_space, right_space)

    # Estimate the width of the new size in characters...
    aspect_ratio = 0.5 # This varies with the font!! 
    fontsize = textobj.get_size()
    pixels_per_char = aspect_ratio * renderer.points_to_pixels(fontsize)

    # If wrap_width is &lt; 1, just make it 1 character
    wrap_width = max(1, new_width // pixels_per_char)
    try:
        wrapped_text = textwrap.fill(textobj.get_text(), wrap_width)
    except TypeError:
        # This appears to be a single word
        wrapped_text = textobj.get_text()
    textobj.set_text(wrapped_text)

def min_dist_inside(point, rotation, box):
    """Gets the space in a given direction from "point" to the boundaries of
    "box" (where box is an object with x0, y0, x1, &amp; y1 attributes, point is a
    tuple of x,y, and rotation is the angle in degrees)"""
    from math import sin, cos, radians
    x0, y0 = point
    rotation = radians(rotation)
    distances = []
    threshold = 0.0001 
    if cos(rotation) &gt; threshold: 
        # Intersects the right axis
        distances.append((box.x1 - x0) / cos(rotation))
    if cos(rotation) &lt; -threshold: 
        # Intersects the left axis
        distances.append((box.x0 - x0) / cos(rotation))
    if sin(rotation) &gt; threshold: 
        # Intersects the top axis
        distances.append((box.y1 - y0) / sin(rotation))
    if sin(rotation) &lt; -threshold: 
        # Intersects the bottom axis
        distances.append((box.y0 - y0) / sin(rotation))
    return min(distances)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4056994</id><snippet>end = Literal("\n").suppress()
firstLine = Literal("ABC") + SkipTo(end)
secondLine = Literal("DEF") + SkipTo(end)
line = ~secondLine + SkipTo(end)
test = firstLine + OneOrMore(line) + secondLine

test.searchString(myText)
</snippet></ROW><ROW><id>4057029</id><snippet>type</snippet></ROW><ROW><id>4057029</id><snippet>def make_testcase(filename, myfunc, docstring):
    def test_something(self):
        data = loadmat(filename)
        result = myfunc(data)
        self.assertTrue(result &gt; 0)

    clsdict = {'test_something': test_something,
               '__doc__': docstring}
    return type('ATest', (unittest.TestCase,), clsdict)

MyTest = makeTestCase('some_filename', my_func, 'This is a docstring')
</snippet></ROW><ROW><id>4057096</id><snippet>import re
my_regex = re.compile(r'@\S+')
</snippet></ROW><ROW><id>4057096</id><snippet>\S</snippet></ROW><ROW><id>4057096</id><snippet>\w</snippet></ROW><ROW><id>4057096</id><snippet>for match in my_regex.finditer(string_to_search):
    # Do something with the MatchObject in 'match'
</snippet></ROW><ROW><id>4057096</id><snippet>finditer</snippet></ROW><ROW><id>4057112</id><snippet>{{c.title|safe}}</snippet></ROW><ROW><id>4057170</id><snippet>read_buff = ctypes.c_uint()
kernel32.ReadProcessMemory(hproc, lpbaseaddr, ctypes.byref(read_buff),
                           ctypes.sizeof(read_buff), ctypes.byref(bytread))
print read_buff.value
</snippet></ROW><ROW><id>4057189</id><snippet>def spaced(s):
    text = "hello"
    textLength = len(text)
    lineLength = textLength + 2 * (2 + 1)
    height = 5

    # at this point we know the first and fifth lines are the same and
    # we know the first and fourth are the same.  (reflected against the x-axis)

    hBorder = ""
    for c in range(lineLength):
        if c % 2:
            hBorder = hBorder + '.'
        else:
            hBorder = hBorder + '-'
    spacer = "." + " " * (lineLength - 2) + "."
    fancyText = "-  " + text + "  -"
    return (hBorder, spacer, fancyText, spacer, hBorder)

textTuple = spaced("hello world")
for line in textTuple:
    print line
</snippet></ROW><ROW><id>4057235</id><snippet>SELECT * from person
WHERE PersonID IN 
  (SELECT PersonId FROM appointments
   GROUP BY PersonId
   HAVING COUNT(*) &gt;= 5)
AND dob &gt; 25
</snippet></ROW><ROW><id>4057638</id><snippet>PyObject* PyObject_CallFunctionObjArgs(PyObject *callable, ..., NULL)
    Return value: New reference.
</snippet></ROW><ROW><id>4057699</id><snippet>try:
  map(subprocess.check_call, script_list)
except Exception, e:
  # failed script
</snippet></ROW><ROW><id>4057699</id><snippet>run</snippet></ROW><ROW><id>4057699</id><snippet>run</snippet></ROW><ROW><id>4057945</id><snippet>import operator
class Poly:
    def __init__(self, *koeff):
        self.koeff = koeff
        self.degree = len(koeff)-1

    def __call__(self, val):
        res = 0
        x = 1
        for k in self.koeff:
            res += x*k
            x *= val
        return res

def durand_kerner(poly, start=complex(.4, .9), epsilon=10**-16):#float('-inf')):
    roots = []
    for e in xrange(poly.degree):
        roots.append(start ** e)
    while True:
        new = []
        for i, r in enumerate(roots):
            new_r = r - (poly(r))/(reduce(operator.mul, [(r - r_1) 
                                     for j, r_1 in enumerate(roots) if i != j]))
            new.append(new_r)
        if all((n == roots[i] or abs(n - roots[i]) &lt; epsilon) for i, n in enumerate(new)):
            return new
        roots = new

print durand_kerner(Poly(-5,3,-3,1))
</snippet></ROW><ROW><id>4057945</id><snippet>[(0.20629947401590026+1.3747296369986026j), 
 (0.20629947401590026-1.3747296369986026j), 
 (2.5874010519681994+8.6361685550944446e-78j)]
</snippet></ROW><ROW><id>4058093</id><snippet>or</snippet></ROW><ROW><id>4058093</id><snippet>||</snippet></ROW><ROW><id>4058093</id><snippet>if string == 'left' or string == 'right':
##                  ^^
</snippet></ROW><ROW><id>4058093</id><snippet>if string in ('left', 'right'):

## in Python ≥3.1, also possible with set literal
## if string in {'left', 'right'}:
</snippet></ROW><ROW><id>4058093</id><snippet>str</snippet></ROW><ROW><id>4058236</id><snippet>if __name__ == "__main__":
    import mamapackage
    mamapackage.register("thisdriver", 
               os.path.abspath(__file__), 
               "A description of this driver")
</snippet></ROW><ROW><id>4058461</id><snippet>def sortkey(x):
    try:
        return (1, int(x))
    except:
        return (0, x)

sorted(get, key=sortkey)
</snippet></ROW><ROW><id>4058605</id><snippet>RawConfigParser.write</snippet></ROW><ROW><id>4058605</id><snippet>ConfigParser.py</snippet></ROW><ROW><id>4058605</id><snippet>import ConfigParser
class MyConfigParser(ConfigParser.ConfigParser):
    def write(self, fp):
        """Write an .ini-format representation of the configuration state."""
        if self._defaults:
            fp.write("[%s]\n" % DEFAULTSECT)
            for (key, value) in self._defaults.items():
                fp.write("%s : %s\n" % (key, str(value).replace('\n', '\n\t')))
            fp.write("\n")
        for section in self._sections:
            fp.write("[%s]\n" % section)
            for (key, value) in self._sections[section].items():
                if key != "__name__":
                    fp.write("%s : %s\n" %
                             (key, str(value).replace('\n', '\n\t')))
            fp.write("\n")

filename='/tmp/testconfig'    
with open(filename,'w') as f:
    parser=MyConfigParser()
    parser.add_section('test')
    parser.set('test','option','Spam spam spam!')
    parser.set('test','more options',"Really? I can't believe it's not butter!")
    parser.write(f)
</snippet></ROW><ROW><id>4058605</id><snippet>[test]
more options : Really? I can't believe it's not butter!
option : Spam spam spam!
</snippet></ROW><ROW><id>4058676</id><snippet>subprocess.call(("explorer", "/select,", file_path))
</snippet></ROW><ROW><id>4058687</id><snippet>import collections
result=collections.defaultdict(list)
with open('data','r') as f:
    for line in f:
        line=line.split()
        key=line[0]
        value=float(line[1])
        result[key].append(value)
for key,values in result.iteritems():
    print(key,sum(values))
</snippet></ROW><ROW><id>4058687</id><snippet>('s', 160.15817391900003)
('r', 80.058963809000005)
('D', 80.195127232999994)
</snippet></ROW><ROW><id>4058836</id><snippet>BaseHTTPServer</snippet></ROW><ROW><id>4058836</id><snippet>BaseHTTPRequestHandler</snippet></ROW><ROW><id>4058836</id><snippet>do_POST</snippet></ROW><ROW><id>4058836</id><snippet>do_POST</snippet></ROW><ROW><id>4058976</id><snippet>&gt;&gt;&gt; message = "blabla df qdsf dqsf \"fqdfdqsfsdf  fdqs fqdsf\""
&gt;&gt;&gt; pattern = "(\w+|'.*[^']'|\".*[^\"]\")"
&gt;&gt;&gt; re.findall(pattern, message)
['blabla', 'df', 'qdsf', 'dqsf', '"fqdfdqsfsdf  fdqs fqdsf"']
</snippet></ROW><ROW><id>4059017</id><snippet>import collections

alphabet = collections.defaultdict(list)
for word in words:
    alphabet[word[0].upper()].append(word)
</snippet></ROW><ROW><id>4059048</id><snippet>menu</snippet></ROW><ROW><id>4059048</id><snippet>weight</snippet></ROW><ROW><id>4059048</id><snippet>pack</snippet></ROW><ROW><id>4059048</id><snippet>pack</snippet></ROW><ROW><id>4059099</id><snippet>import pylab
import numpy as np
import multiprocessing as mp
import os

def display():
    os.setsid()
    pylab.show()

mu, sigma = 2, 0.5
v = np.random.normal(mu,sigma,10000)
(n, bins) = np.histogram(v, bins=50, normed=True)
pylab.plot(bins[:-1], n)
p=mp.Process(target=display)
p.start()
</snippet></ROW><ROW><id>4059343</id><snippet>Add(self, item, proportion=0, flag=0, border=0, userData=None)
</snippet></ROW><ROW><id>4059448</id><snippet>print 1</snippet></ROW><ROW><id>4059448</id><snippet>print(1)</snippet></ROW><ROW><id>4059588</id><snippet>from itertools import combinations
print list(combinations(["hel", "lo", "bye"], 2))
</snippet></ROW><ROW><id>4059588</id><snippet>print ["".join(a) for a in combinations(["hel", "lo", "bye"], 2)]
</snippet></ROW><ROW><id>4059919</id><snippet>import os
import socket
import sys

import cherrypy

app_roots = {
                # Sean's laptop dev environment.
                "mylaptop": "/home/src/local-mydomain.com/py",

                # Hosted dev environment.  
                "mydomain.com" : "/home/dev/src/py"
            }


hostname = socket.gethostname()
if hostname not in app_roots:
    cherrypy.log("The hostname %r does not have an app_root entry in "
                 "raspberry.py.  Exiting early." % hostname)
    sys.exit()

sys.path.append(app_roots[hostname])
os.chdir(app_root)

cherrypy.config.update({
    'environment': 'embedded',
    'log.access_file': "{0}/raspberry.access.log".format(app_roots[hostname]),
    'log.error_file': "{0}/raspberry.error.log".format(app_roots[hostname]),
    })

from web.controllers.root import RaspberryRequestHandler
application = cherrypy.tree.mount(RaspberryRequestHandler(), '/')
# Insert log changes here
cherrypy.engine.start()
</snippet></ROW><ROW><id>4059919</id><snippet>application = cherrypy.tree.mount(RaspberryRequestHandler(), '/')

log = application.log
log.error_file = ""

# Make a new RotatingFileHandler for the error log.
fname = "{0}/raspberry.error.log".format(app_roots[hostname])
h = handlers.RotatingFileHandler(fname, 'a', 10000000, 1000)
h.setLevel(DEBUG)
h.setFormatter(_cplogging.logfmt)
log.error_log.addHandler(h)

cherrypy.engine.start()
</snippet></ROW><ROW><id>4060093</id><snippet>&gt;&gt;&gt; '2' &gt; 3
True
</snippet></ROW><ROW><id>4060093</id><snippet>TypeError</snippet></ROW><ROW><id>4060327</id><snippet>self.do_nothing()
</snippet></ROW><ROW><id>4060327</id><snippet>self.do_nothing
</snippet></ROW><ROW><id>4060851</id><snippet>int main()
{
#if _WIN32
    // Standard I/O is in text mode by default; since we intend
    // to send binary image data to standard output, we have to
    // set it to binary mode.
    // Error handling is tricky to say the least, so we have none.
    _fmode = _O_BINARY;
    if (_setmode(_fileno(stdin), _fmode) == -1) {}
    if (_setmode(_fileno(stdout), _fmode) == -1) {}
#endif
</snippet></ROW><ROW><id>4060851</id><snippet>import sys

if sys.platform == "win32":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
</snippet></ROW><ROW><id>4060851</id><snippet>def make_streams_binary():
    sys.stdin = sys.stdin.detach()
    sys.stdout = sys.stdout.detach()
</snippet></ROW><ROW><id>4060862</id><snippet>zlib</snippet></ROW><ROW><id>4060862</id><snippet>zlib.so</snippet></ROW><ROW><id>4060862</id><snippet>simplejson</snippet></ROW><ROW><id>4060862</id><snippet>$ wget http://pypi.python.org/packages/source/s/simplejson/simplejson-2.1.1.tar.gz
$ tar xvfz simplejson-2.1.1.tar.gz
$ cd simplejson-2.1.1
$ cp -r simplejson /usr/lib/python2.4/site-packages
</snippet></ROW><ROW><id>4060862</id><snippet>wget</snippet></ROW><ROW><id>4060862</id><snippet>simplejson</snippet></ROW><ROW><id>4060862</id><snippet>.tar.gz</snippet></ROW><ROW><id>4060862</id><snippet>site-packages</snippet></ROW><ROW><id>4060956</id><snippet>~/.gnome2/stickynotes_applet</snippet></ROW><ROW><id>4060956</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;stickynotes version="2.30.0"&gt;
    &lt;note title="10/31/2010" x="658" y="176" w="477" h="418"&gt;Some text&lt;/note&gt;
&lt;/stickynotes&gt;
</snippet></ROW><ROW><id>4060956</id><snippet>x</snippet></ROW><ROW><id>4060956</id><snippet>y</snippet></ROW><ROW><id>4060956</id><snippet>w</snippet></ROW><ROW><id>4060956</id><snippet>h</snippet></ROW><ROW><id>4060963</id><snippet>import simplejson as json
result_object = json.loads(input_json_string)
</snippet></ROW><ROW><id>4061031</id><snippet>template_values = {'list': **list**(Person.all())}
</snippet></ROW><ROW><id>4061031</id><snippet>{% for person in list %}
&lt;form&gt;
  &lt;p&gt;{{ person.name}}&lt;/p&gt;
  &lt;button type="button" name="**{{ person.key }}**"&gt;Delete!&lt;/button&gt;
&lt;/form&gt;
{% endfor %}
</snippet></ROW><ROW><id>4061088</id><snippet>\bwent\b</snippet></ROW><ROW><id>4061122</id><snippet>NUM_ANSWERS = 4
NUM_COMBOS = 2**NUM_ANSWERS
NO,YES = 'no','yes'

def index(answers):
    """ Convert a list of yes/no answers into binary number. """
    binstr = ''.join([('1' if a is 'yes' else '0') for a in answers])
    return int(binstr, 2)

def answers(index):
    """ Convert binary value of number into list of yes/no answers. """
    masks = [2**p for p in range(NUM_ANSWERS-1, -1, -1)]
    bits = [((index &amp; m) / m) for m in masks]
    return [[NO,YES][b] for b in bits]

# condition expressions
cond_expr1 = lambda a1,a2,a3,a4: a1 is YES and a2 is NO  # a3,a4 ignored
cond_expr2 = lambda a1,a2,a3,a4: (
                ( a1 is YES and a2 is NO ) or ( a3 is YES and a4 is NO )
             )
# build tables for each condition
cond1 = []
cond2 = []
for i in range(NUM_COMBOS):
    ans_combo = answers(i)
    cond1.append( cond_expr1(*ans_combo) )
    cond2.append( cond_expr2(*ans_combo) )

# once tables are built, you can lookup the corresponding conditional
print cond1[ index(['yes', 'no', 'no', 'yes']) ]  # True
print cond2[ index(['yes', 'no', 'yes', 'no']) ]  # True
</snippet></ROW><ROW><id>4061259</id><snippet>import cPickle
import shelve
import os

class PickleManager(object):
    def store(self,name,value):
        with open(name,'w') as f:
            cPickle.dump(value,f)
    def load(self,name):
        with open(name,'r') as f:
            return cPickle.load(f)

class ShelveManager(object):
    def __enter__(self):
        if os.path.exists(self.fname):
            self.shelf=shelve.open(self.fname)
        else:
            self.shelf=shelve.open(self.fname,'n')
        return self
    def __exit__(self,ext_type,exc_value,traceback):
        self.shelf.close()
    def __init__(self,fname):
        self.fname=fname
    def store(self,name,value):
        self.shelf[name]=value        
    def load(self,name):
        return self.shelf[name]

def write(manager):                
    for i in range(100):
        fname='/tmp/{i}.dat'.format(i=i)
        data='The sky is so blue'*100
        manager.store(fname,data)
def read(manager):        
    for i in range(100):
        fname='/tmp/{i}.dat'.format(i=i)        
        manager.load(fname)
</snippet></ROW><ROW><id>4061259</id><snippet>manager=PickleManager()
manager.load(...)
manager.store(...)
</snippet></ROW><ROW><id>4061259</id><snippet>with ShelveManager('/tmp/shelve.dat') as manager:        
    manager.load(...)
    manager.store(...)
</snippet></ROW><ROW><id>4061259</id><snippet>python -mtimeit -s'import test' 'with test.ShelveManager("/tmp/shelve.dat") as s: test.read(s)'
python -mtimeit -s'import test' 'test.read(test.PickleManager())'
python -mtimeit -s'import test' 'with test.ShelveManager("/tmp/shelve.dat") as s: test.write(s)'
python -mtimeit -s'import test' 'test.write(test.PickleManager())'
</snippet></ROW><ROW><id>4061259</id><snippet>                  read (ms)     write (ms)
PickleManager     9.26          7.92 
ShelveManager     5.32          30.9 
</snippet></ROW><ROW><id>4061259</id><snippet>write</snippet></ROW><ROW><id>4061259</id><snippet>read</snippet></ROW><ROW><id>4061364</id><snippet>for img in doc.cssselect('a img'):
</snippet></ROW><ROW><id>4061364</id><snippet>for img in doc.xpath('a//img'):
</snippet></ROW><ROW><id>4061478</id><snippet>def foo():
    valid = True
    if valid:
        return True
    return False
</snippet></ROW><ROW><id>4061798</id><snippet>def reST2HTML( str ):
    parts = core.publish_parts(
    source = str,
    writer_name = 'html',
    settings_overrides={'report_level':'quiet'},
    )
    return parts['body_pre_docinfo'] + parts['fragment']
</snippet></ROW><ROW><id>4062476</id><snippet>import urllib2
import urllib

values = dict(foo="hello", bar="world") # examine form for actual vars
try:
    req = urllib2.Request("http://example.com/search.php",
                          urllib.urlencode(values))
    response_page = urllib2.urlopen(req).read()
except urllib2.HTTPError, details:
    pass #do something with the error here...
</snippet></ROW><ROW><id>4062553</id><snippet>InvertedIndex[term].count(doc)</snippet></ROW><ROW><id>4062553</id><snippet>doc</snippet></ROW><ROW><id>4062587</id><snippet>sum(a-b)/sum(a)</snippet></ROW><ROW><id>4062587</id><snippet>sum((a-b)/a)</snippet></ROW><ROW><id>4062587</id><snippet>a=[1,0]</snippet></ROW><ROW><id>4062587</id><snippet>b=[-1,1]</snippet></ROW><ROW><id>4062587</id><snippet>sum(a/b) == sum([-1,0]) == -1</snippet></ROW><ROW><id>4062587</id><snippet>sum(a)/(sum(b) == 1/0</snippet></ROW><ROW><id>4062596</id><snippet>def get(self):                                                                        
   text = self.request.query
   url = "http://ajax.googleapis.com/ajax/services/language/detect?v=1.0&amp;q=" + text

   try:
      data = json.loads(urllib2.urlopen(url).read())                                
      redirectUrl = "http://www.google.com/search?q=" + text                        
      if data["responseData"]["language"] == 'ru':
          redirectUrl = "http://yandex.ru/yandsearch?text=" + text          
      self.redirect(redirectUrl)                                                           
    except urllib2.HTTPError, e:
      self.response.out.write( "HTTP error: %d" % e.code )
    except urllib2.URLError, e:
      self.response.out.write( "Network error: %s" % e.reason.args[1])
</snippet></ROW><ROW><id>4062599</id><snippet>for pos, item in enumerate(values):
    try:
        diffs.append(values[pos+1] - item)
    except IndexError:
        pass
</snippet></ROW><ROW><id>4062599</id><snippet>for item,nextitem in zip(values, values[1:]):
    diffs.append(nextitem-item)
</snippet></ROW><ROW><id>4062599</id><snippet>diffs = [nextitem-item for item,nextitem in zip(values, values[1:])]
</snippet></ROW><ROW><id>4062863</id><snippet>alus = []
with open('alus.txt', 'r') as f:
    for rida in f:
        rida=rida.rstrip()
        if rida: alus.append(rida)
        else: break
</snippet></ROW><ROW><id>4062863</id><snippet>if not rida:
</snippet></ROW><ROW><id>4062863</id><snippet>if (rida == ''):
</snippet></ROW><ROW><id>4062863</id><snippet>if...else</snippet></ROW><ROW><id>4062863</id><snippet>if rida:
</snippet></ROW><ROW><id>4062863</id><snippet>break</snippet></ROW><ROW><id>4062863</id><snippet>break</snippet></ROW><ROW><id>4062863</id><snippet>continue</snippet></ROW><ROW><id>4062863</id><snippet>break</snippet></ROW><ROW><id>4062863</id><snippet>rstrip</snippet></ROW><ROW><id>4062863</id><snippet>rstrip</snippet></ROW><ROW><id>4062863</id><snippet>rida = rida.rstrip(r'\r\n')
</snippet></ROW><ROW><id>4062900</id><snippet>python</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject *</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>ssize_t</snippet></ROW><ROW><id>4062900</id><snippet>PyTupleObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyTupleObject</snippet></ROW><ROW><id>4062900</id><snippet>PyStringObject</snippet></ROW><ROW><id>4062900</id><snippet>PyListObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject **</snippet></ROW><ROW><id>4062900</id><snippet>ssize_t</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyDictObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject *</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>PyObject *</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>PyObject *</snippet></ROW><ROW><id>4062900</id><snippet>weakref</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>__slots__</snippet></ROW><ROW><id>4062900</id><snippet>__dict__</snippet></ROW><ROW><id>4062900</id><snippet>__slots__</snippet></ROW><ROW><id>4062900</id><snippet>PyObject</snippet></ROW><ROW><id>4062900</id><snippet>__slots__</snippet></ROW><ROW><id>4062900</id><snippet>PyObject *</snippet></ROW><ROW><id>4062900</id><snippet>Include/&lt;type&gt;object.h</snippet></ROW><ROW><id>4062900</id><snippet>Objects/&lt;type&gt;object.c</snippet></ROW><ROW><id>4062900</id><snippet>Include/object.h</snippet></ROW><ROW><id>4063069</id><snippet>tuple</snippet></ROW><ROW><id>4063069</id><snippet>list</snippet></ROW><ROW><id>4063069</id><snippet>import re

if __name__=='__main__':
    myString = "[name = john adams, family = candy, age = 72],[ name = jeff, family = Thomson, age = 24]"
    answers=re.findall("\\[\\s*name = ([^,]+), family = (\\w+), age = (\\d+)\\]",myString)
    names=[x[0] for x in answers]
    families=[x[1] for x in answers]
    ages=map(int,(x[2] for x in answers))

    print "names: ",names
    print "families: ", families
    print "ages: ", ages 
</snippet></ROW><ROW><id>4063665</id><snippet>* Dictionary lookup
* Attribute lookup
* Method call
* List-index lookup
</snippet></ROW><ROW><id>4063925</id><snippet>decode</snippet></ROW><ROW><id>4063925</id><snippet>encode</snippet></ROW><ROW><id>4063925</id><snippet>text.decode(encoding['encoding'], 'ignore').encode(sys.getdefaultencoding(), 'ignore')
</snippet></ROW><ROW><id>4063925</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>4063925</id><snippet>'ascii'</snippet></ROW><ROW><id>4064215</id><snippet>sre_parse</snippet></ROW><ROW><id>4064215</id><snippet>import sre_parse

def get_regex_max_match_len(regex):
    minlen, maxlen = sre_parse.parse(regex).getwidth()
    if maxlen &gt;= sre_parse.MAXREPEAT: raise ValueError('unbounded regex')
    return maxlen
</snippet></ROW><ROW><id>4064215</id><snippet>&gt;&gt;&gt; get_regex_max_match_len('foo((bar){2,3}|potato)')
12
&gt;&gt;&gt; get_regex_max_match_len('.*')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in get_regex_max_match_len
ValueError: unbounded regex
</snippet></ROW><ROW><id>4064558</id><snippet>self.mal_set = set(self.mal_list)</snippet></ROW><ROW><id>4064558</id><snippet>make_mal_list()</snippet></ROW><ROW><id>4064558</id><snippet>self.mal_list</snippet></ROW><ROW><id>4064558</id><snippet>self.queue</snippet></ROW><ROW><id>4064558</id><snippet>import threading
import Queue
import sys
import urllib2
import url
from urlparse import urlparse

THREAD_NUMBER = 10


class Crawler(threading.Thread):

    def __init__(self, queue, mal_urls):
        self.queue = queue
        self.mal_list = mal_urls
        threading.Thread.__init__(self) # i forgot , thanks seriyPS :)

    def run(self):

        while True:
             # Grabs url to fetch from queue.
             url = self.queue.get()
             if url not in self.mal_list:
                 self.crawl(url)
             else:
                 print "Malicious Link Found: {0}".format(url)
             # Signals to queue job is done
             self.queue.task_done()

     def crawl(self, tgt):
         try:
             url = urlparse(tgt)
             print("Crawling {0}".format(tgt))
             request = urllib2.Request(tgt)
             request.add_header("User-Agent", "Mozilla/5,0")
             opener = urllib2.build_opener()
             data = opener.open(request)
         except: # TODO: write explicit exceptions the URLError, ValueERROR ...
             return

         doc = parse(data).getroot()
         for tag in doc.xpath("//a[@href]"):
             old = tag.get('href')
             fixed = urllib.unquote(old)

             # I don't think you need this, but maybe i'm mistaken.
             # self.links.append(fixed) 

             # Add more URL to the queue.
             self.queue_links(fixed, url)


    def queue_links(self, link, url):
        """I guess this method allow recursive download of urls that will
        be fetched from the web pages ????
        """

        #for link in links:  # i changed the argument so now links it just one url.
        if link.startswith('/'):
            link = "http://" + url.netloc + "/" + link

        elif link.startswith('#'):
            continue

        elif link.startswith('http'):
            link = 'http://' + url.netloc + '/' + link

        # Add urls extracted from the HTML text to the queue to fetche them
        if link.decode('utf-8') not in self.crawled_set:
            self.queue.put(link)


def get_make_mal_list():
    """Open various malware and phishing related blacklists and create a list 
    of URLS from which to compare to the crawled links
    """

    hosts1 = "hosts.txt"
    hosts2 = "MH-sitelist.txt"
    hosts3 = "urls.txt"

    mal_list = []

    with open(hosts1) as first:
        for line1 in first:
            link = "http://" + line1.strip()
            mal_list.append(link)

    with open(hosts2) as second:
        for line2 in second:
            link = "http://" + line2.strip()
            mal_list.append(link)

    with open(hosts3) as third:
        for line3 in third:
            link = "http://" + line3.strip()
            mal_list.append(link)

    return mal_list

def main():

    queue = Queue.Queue()

    # Get malicious URLs.
    mal_urls = set(get_make_mal_list())

    # Create a THREAD_NUMBER thread and start them.
    for i in xrange(THREAD_NUMBER):
        cr = Crawler(queue, mal_urls)
        cr.start()

    # Get all url that you want to fetch and put them in the queue.
    for url in sys.argv[1:]:
        queue.put(url)

    # Wait on the queue until everything has been processed.
    queue.join()


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>4064754</id><snippet>lipo</snippet></ROW><ROW><id>4064754</id><snippet>$ lipo -info /Library/Frameworks/Python.framework/Versions/2.7/bin/python
Architectures in the fat file: /Library/Frameworks/Python.framework/Versions/2.7/bin/python are: ppc i386

$ lipo -info /usr/lib/libtidy.dylib
Non-fat file: /usr/lib/libtidy.dylib is architecture: x86_64</snippet></ROW><ROW><id>4064754</id><snippet>cvs -z3 -d:pserver:anonymous@tidy.cvs.sourceforge.net:/cvsroot/tidy co -P tidy
cd tidy
sh build/gnuauto/setup.sh
./configure --prefix=/usr CFLAGS="-arch i386"
make &amp;&amp; sudo make install
</snippet></ROW><ROW><id>4064798</id><snippet>import re
import itertools as it

with open('zipcode','r') as z:
    zipcode_pat=re.compile('({0})'.format('|'.join(line.rstrip() for line in z)),
                        re.IGNORECASE)
with open('city','r') as c:
    city_pat=re.compile('({0})'.format('|'.join(line.rstrip() for line in c)),
                      re.IGNORECASE)

def gitone(seq):
    for match in seq:
        if match:
            yield match.group(1)
        else:
            yield 'Missing'

with open('address','r') as f:
    f1,f2=it.tee(f,2)
    zipcodes=gitone(zipcode_pat.search(line) for line in f1)
    cities=gitone(city_pat.search(line) for line in f2)
    for city,zipcode in it.izip(cities,zipcodes):
        print('{c} {z}'.format(c=city,z=zipcode))

# Riverside 12034
# Santa clara 93453
# Missing Missing
# O'Fallon Missing
</snippet></ROW><ROW><id>4065184</id><snippet>image_blob.py</snippet></ROW><ROW><id>4065184</id><snippet>image.py</snippet></ROW><ROW><id>4065184</id><snippet>from app.models.item import Item</snippet></ROW><ROW><id>4065184</id><snippet>class Image</snippet></ROW><ROW><id>4065184</id><snippet>image</snippet></ROW><ROW><id>4065184</id><snippet>ImageBlob</snippet></ROW><ROW><id>4065184</id><snippet>ImageBlob</snippet></ROW><ROW><id>4065184</id><snippet>Image</snippet></ROW><ROW><id>4065184</id><snippet>ImageBlob</snippet></ROW><ROW><id>4065184</id><snippet>Image</snippet></ROW><ROW><id>4065309</id><snippet>None</snippet></ROW><ROW><id>4065309</id><snippet>if x:</snippet></ROW><ROW><id>4065309</id><snippet>if x is None:</snippet></ROW><ROW><id>4065309</id><snippet>x</snippet></ROW><ROW><id>4065309</id><snippet>False</snippet></ROW><ROW><id>4065309</id><snippet>x is None</snippet></ROW><ROW><id>4065309</id><snippet>True</snippet></ROW><ROW><id>4065309</id><snippet>x</snippet></ROW><ROW><id>4065309</id><snippet>None</snippet></ROW><ROW><id>4065309</id><snippet>None</snippet></ROW><ROW><id>4065309</id><snippet>AttributeError: 'NoneType' object has no attribute '...'</snippet></ROW><ROW><id>4065309</id><snippet>null</snippet></ROW><ROW><id>4065309</id><snippet>UserProfile</snippet></ROW><ROW><id>4065309</id><snippet>null</snippet></ROW><ROW><id>4065485</id><snippet>self.memcursor.executemany("INSERT OR REPLACE INTO main VALUES (?,?,?,?,?)",self.blocklist)
</snippet></ROW><ROW><id>4065741</id><snippet>import httplib
import xml.dom.minidom

data = """
&lt;spellrequest textalreadyclipped="0" ignoredups="0" ignoredigits="1" ignoreallcaps="1"&gt;
    &lt;text&gt; %s &lt;/text&gt;
&lt;/spellrequest&gt;
"""

word_to_spell = "gooooooogle"

con = httplib.HTTPSConnection("www.google.com")
con.request("POST", "/tbproxy/spell?lang=en", data % word_to_spell)
response = con.getresponse()

dom = xml.dom.minidom.parseString(response.read())
dom_data = dom.getElementsByTagName('spellresult')[0]

for child_node in dom_data.childNodes:
    result = child_node.firstChild.data.split()

print result
</snippet></ROW><ROW><id>4065756</id><snippet>gtk.ComboBox</snippet></ROW><ROW><id>4065756</id><snippet>gtk.Combo</snippet></ROW><ROW><id>4065756</id><snippet>liststore = gtk.ListStore(gobject.TYPE_STRING)
for key in self.keys:
    liststore.append((key,))
combobox = gtk.ComboBox(liststore)
cell = gtk.CellRendererText()
combobox.pack_start(cell, True)
combobox.add_attribute(cell, 'text', 0)
</snippet></ROW><ROW><id>4065756</id><snippet>changed</snippet></ROW><ROW><id>4065756</id><snippet>combobox</snippet></ROW><ROW><id>4065756</id><snippet>get_active()</snippet></ROW><ROW><id>4065756</id><snippet>gtk.Menu</snippet></ROW><ROW><id>4065789</id><snippet>from twisted.internet import reactor
import twisted.names.client

def do_lookup(domain):
    d = twisted.names.client.getHostByName(domain)
    d.addBoth(lookup_done)

def lookup_done(result):
    print 'result:', result
    reactor.stop()

domain = 'twistedmatrix.com'
reactor.callLater(0, do_lookup, domain)
reactor.run()
</snippet></ROW><ROW><id>4065789</id><snippet>$ python so-example.py 
result: 66.35.39.65
</snippet></ROW><ROW><id>4065831</id><snippet>#!/usr/bin/python
import wx

class BoExplorerPanel(wx.Frame):
  def __init__(self):
     wx.Frame.__init__(self, None)

     self.initComponents() # initialize Window components

  def initComponents(self):
     print "Inizializzo i controlli"
     # controls
     resizeBox = wx.BoxSizer(wx.VERTICAL)

     self.dirBrowser = wx.GenericDirCtrl(self, wx.ID_ANY, style = wx.DIRCTRL_DIR_ONLY)

     resizeBox.Add(self.dirBrowser, 1, wx.EXPAND | wx.ALL)

     self.SetSizerAndFit(resizeBox)

     # events
     tree = self.dirBrowser.GetTreeCtrl()
     self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.dirBrowser_OnItemSelected, tree)
     self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.dirBrowser_OnRightClick, tree)
     self.Bind(wx.EVT_TREE_SEL_CHANGED, self.dirBrowser_OnSelectionChanged, tree)

     # panel's properties

  def dirBrowser_OnItemSelected(self, event):
     print "CLicked"
     event.Skip()

  def dirBrowser_OnRightClick(self, event):
     print "Right Click"
     event.Skip()

  def dirBrowser_OnSelectionChanged(self, event):
     print "Selection Changed"
     event.Skip()


app = wx.App(False)
f = BoExplorerPanel()
f.Show()
app.MainLoop
</snippet></ROW><ROW><id>4065851</id><snippet>w</snippet></ROW><ROW><id>4065851</id><snippet>w.winfo_height()
w.winfo_width()
</snippet></ROW><ROW><id>4065851</id><snippet>w.winfo_reqheight()
w.winfo_reqwidth()
</snippet></ROW><ROW><id>4065899</id><snippet>threading</snippet></ROW><ROW><id>4065899</id><snippet>threading</snippet></ROW><ROW><id>4065899</id><snippet>import threading
t = threading.Thread(target = tornado.ioloop.IOLoop.instance().start)
t.start()
</snippet></ROW><ROW><id>4065938</id><snippet>import os

pid = os.getppid()
with open("/proc/%s/cmdline" % pid) as f:
    print f.readline()
</snippet></ROW><ROW><id>4065959</id><snippet>10</snippet></ROW><ROW><id>4065959</id><snippet>sys.argv[2]</snippet></ROW><ROW><id>4065959</id><snippet>sys.argv</snippet></ROW><ROW><id>4065959</id><snippet>"10"</snippet></ROW><ROW><id>4065959</id><snippet>int(sys.argv[2])</snippet></ROW><ROW><id>4065991</id><snippet>def f(): 
    a = 1 
    b = 2 
    list_ = ['a', 'b'] 
    locals_ = locals()
    dict_ = dict((x, locals_[x]) for x in list_)
</snippet></ROW><ROW><id>4065991</id><snippet>locals()</snippet></ROW><ROW><id>4066084</id><snippet>bits_per_sample()</snippet></ROW><ROW><id>4066084</id><snippet>Returns the number of bits-per-sample in this audio file as a positive integer.</snippet></ROW><ROW><id>4066090</id><snippet>N</snippet></ROW><ROW><id>4066090</id><snippet>N</snippet></ROW><ROW><id>4066090</id><snippet>123 456 789
456 789 123
789 123 456

234 567 891
567 891 234
891 234 567

345 678 912
678 912 345
912 345 678
</snippet></ROW><ROW><id>4066114</id><snippet>Rep().replist = L                                    
Rep().put()                               
mylist = list(Rep().all().fetch(50)) 
P = mylist.pop() 
self.response.out.write(len(P)) 
</snippet></ROW><ROW><id>4066114</id><snippet>r = Rep()
r.replist = L                                    
r.put()                               
mylist = Rep.all().fetch(50)
P = mylist.pop() 
self.response.out.write(len(P.replist)) 
</snippet></ROW><ROW><id>4066114</id><snippet>Rep().replist = L                                    
Rep().put()                               
</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>replist</snippet></ROW><ROW><id>4066114</id><snippet>L</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>put()</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>mylist = list(Rep().all().fetch(50)) 
</snippet></ROW><ROW><id>4066114</id><snippet>all()</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>list()</snippet></ROW><ROW><id>4066114</id><snippet>fetch()</snippet></ROW><ROW><id>4066114</id><snippet>self.response.out.write(len(P)) 
</snippet></ROW><ROW><id>4066114</id><snippet>P</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>P</snippet></ROW><ROW><id>4066114</id><snippet>replist</snippet></ROW><ROW><id>4066114</id><snippet>r = Rep()
</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>r =</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>r.replist = L
</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>L</snippet></ROW><ROW><id>4066114</id><snippet>r = Rep(replist = L)
</snippet></ROW><ROW><id>4066114</id><snippet>L</snippet></ROW><ROW><id>4066114</id><snippet>__init__</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>replist</snippet></ROW><ROW><id>4066114</id><snippet>__init__</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>db.Model</snippet></ROW><ROW><id>4066114</id><snippet>L</snippet></ROW><ROW><id>4066114</id><snippet>replist</snippet></ROW><ROW><id>4066114</id><snippet>r = Rep()
</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep</snippet></ROW><ROW><id>4066114</id><snippet>r</snippet></ROW><ROW><id>4066114</id><snippet>Rep()</snippet></ROW><ROW><id>4066263</id><snippet>convert</snippet></ROW><ROW><id>4066263</id><snippet>format:-</snippet></ROW><ROW><id>4066263</id><snippet>cmd = ["convert", "test.bmp", "jpg:-"]
output_stream = subprocess.Popen(cmd, stdout=subprocess.PIPE).stdout
</snippet></ROW><ROW><id>4066264</id><snippet>image = Image.open(Image_Location)
image = image.resize((250, 250), Image.ANTIALIAS) #The (250, 250) is (height, width)
self.pw.pic = ImageTk.PhotoImage(image)
</snippet></ROW><ROW><id>4066264</id><snippet>from Tkinter import *
import tkFont
import Image #This is the PIL Image library
</snippet></ROW><ROW><id>4066264</id><snippet>im_temp = Image.open(Path-To-Photo)
im_temp = im_temp.resize((250, 250), Image.ANTIALIAS)
im_temp.save("ArtWrk.ppm", "ppm") ## The only reason I included this was to convert
#The image into a format that Tkinter woulden't complain about
self.photo = PhotoImage(file="artwrk.ppm")##Open the image as a tkinter.PhotoImage class()
self.Artwork.destroy() #erase the last drawn picture (in the program the picture I used was changing)
self.Artwork = Label(self.frame, image=self.photo) #Sets the image too the label
self.Artwork.photo = self.photo ##Make the image actually display (If I dont include this it won't display an image)
self.Artwork.pack() ##repack the image
</snippet></ROW><ROW><id>4066387</id><snippet>Episode.objects.filter(series=some_series,number__gte=epnum-2, number__lte=epnum+2)
</snippet></ROW><ROW><id>4066387</id><snippet>epnum</snippet></ROW><ROW><id>4066387</id><snippet>epnum-2&lt;=0</snippet></ROW><ROW><id>4066387</id><snippet>epnum+2&gt;Episode.object.filter(series=some_series).order_by('-number')[0].number</snippet></ROW><ROW><id>4066535</id><snippet>def fetch(url):
    g = gevent.spawn(urllib2.urlopen, url)
    return g.get().read()
</snippet></ROW><ROW><id>4066535</id><snippet>def fetch(url):
    return urllib2.urlopen(url).read()
</snippet></ROW><ROW><id>4066535</id><snippet>class SimpleXMLRPCServer(SocketServer.TCPServer,
                         SimpleXMLRPCDispatcher):
</snippet></ROW><ROW><id>4066535</id><snippet>SimpleXMLRPCServer</snippet></ROW><ROW><id>4066535</id><snippet>ThreadingTCPServer</snippet></ROW><ROW><id>4066535</id><snippet>TCPServer</snippet></ROW><ROW><id>4066535</id><snippet>monkey.patch_all()</snippet></ROW><ROW><id>4066535</id><snippet>threading</snippet></ROW><ROW><id>4066624</id><snippet>import dns
import dns.name
import dns.query
import dns.resolver

def get_authoritative_nameserver(domain, log=lambda msg: None):
    n = dns.name.from_text(domain)

    depth = 2
    default = dns.resolver.get_default_resolver()
    nameserver = default.nameservers[0]

    last = False
    while not last:
        s = n.split(depth)

        last = s[0].to_unicode() == u'@'
        sub = s[1]

        log('Looking up %s on %s' % (sub, nameserver))
        query = dns.message.make_query(sub, dns.rdatatype.NS)
        response = dns.query.udp(query, nameserver)

        rcode = response.rcode()
        if rcode != dns.rcode.NOERROR:
            if rcode == dns.rcode.NXDOMAIN:
                raise Exception('%s does not exist.' % sub)
            else:
                raise Exception('Error %s' % dns.rcode.to_text(rcode))

        rrset = None
        if len(response.authority) &gt; 0:
            rrset = response.authority[0]
        else:
            rrset = response.answer[0]

        rr = rrset[0]
        if rr.rdtype == dns.rdatatype.SOA:
            log('Same server is authoritative for %s' % sub)
        else:
            authority = rr.target
            log('%s is authoritative for %s' % (authority, sub))
            nameserver = default.query(authority).rrset[0].to_text()

        depth += 1

    return nameserver


import sys

def log(msg):
    print msg

print get_authoritative_nameserver(sys.argv[1], log)
</snippet></ROW><ROW><id>4066624</id><snippet>Looking up com. on 192.168.255.10
l.gtld-servers.net. is authoritative for com.
Looking up stackoverflow.com. on 192.41.162.30
ns1.p19.dynect.net. is authoritative for stackoverflow.com.
Looking up meta.stackoverflow.com. on 208.78.70.19
Same server is authoritative for meta.stackoverflow.com.
208.78.70.19
</snippet></ROW><ROW><id>4066807</id><snippet>sum(1&lt;&lt;i for i, b in enumerate(x) if b)
</snippet></ROW><ROW><id>4066959</id><snippet>n</snippet></ROW><ROW><id>4066959</id><snippet>n = int(raw_input('Input numver: '))
fib(n)
</snippet></ROW><ROW><id>4066959</id><snippet>n = int(n)</snippet></ROW><ROW><id>4066959</id><snippet>n</snippet></ROW><ROW><id>4066959</id><snippet>n</snippet></ROW><ROW><id>4066959</id><snippet>raw_input</snippet></ROW><ROW><id>4066959</id><snippet>n</snippet></ROW><ROW><id>4067079</id><snippet>str.split()</snippet></ROW><ROW><id>4067079</id><snippet>split()</snippet></ROW><ROW><id>4067079</id><snippet>&gt;&gt;&gt; lin="a b c d"
&gt;&gt;&gt; lin.split()
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>4067156</id><snippet>import inspect
import sys
inspect.getmembers(sys.modules[__name__], inspect.isfunction)
</snippet></ROW><ROW><id>4067546</id><snippet>class Columns:
    pass

def f(row_number):
    c = Columns()
    c.power = retrieve_avg_power(row_number) * 2.5
    c.speed = math.sqrt(power) / 2
    return c.__dict__
</snippet></ROW><ROW><id>4067572</id><snippet>def contact(request, sender=None, append_message=None, context=None):

   if not sender:
       sender = settings.DEFAULT_FROM_EMAIL  # i hope that you can access settings here

   # The context arg is a dictionary where you can put all the others argument and 
   # you can use it like so :

   subj_tmpl = context.get('subj_tmpl', 'contato/subject.txt')
   # ....
</snippet></ROW><ROW><id>4067891</id><snippet>find-links</snippet></ROW><ROW><id>4067891</id><snippet>[buildout]
...
find-links =
    ...
    http://username:password@dist.example.com/projectname
</snippet></ROW><ROW><id>4067891</id><snippet>find-links</snippet></ROW><ROW><id>4067973</id><snippet>thread.isAlive()</snippet></ROW><ROW><id>4067973</id><snippet>for t in my_threads:
    if not t.isAlive():
        # get results from thtead
        t.handled = True
my_threads = [t for t in my_threads if not t.handled]
</snippet></ROW><ROW><id>4068222</id><snippet>def main():
    i = 0
    a = 0
    while i &lt; 6553500:
        i += 1
        if i != 6553500:
           a = i
        else:
            print("o")
    print(a)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>4068222</id><snippet>dict</snippet></ROW><ROW><id>4068275</id><snippet>&lt;MouseWheel&gt;</snippet></ROW><ROW><id>4068275</id><snippet>&lt;Button-4&gt;</snippet></ROW><ROW><id>4068275</id><snippet>&lt;Button-5&gt;</snippet></ROW><ROW><id>4068275</id><snippet>import Tkinter as tk

class App:
    def __init__(self):
        self.root=tk.Tk()
        self.vsb = tk.Scrollbar(orient="vertical", command=self.OnVsb)
        self.lb1 = tk.Listbox(self.root, yscrollcommand=self.vsb.set)
        self.lb2 = tk.Listbox(self.root, yscrollcommand=self.vsb.set)
        self.vsb.pack(side="right",fill="y")
        self.lb1.pack(side="left",fill="x", expand=True)
        self.lb2.pack(side="left",fill="x", expand=True)
        self.lb1.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
        self.lb2.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
        for i in range(100):
            self.lb1.insert("end","item %s" % i)
            self.lb2.insert("end","item %s" % i)
        self.root.mainloop()

    def OnVsb(self, *args):
        self.lb1.yview(*args)
        self.lb2.yview(*args)

    def OnMouseWheel(self, event):
        self.lb1.yview("scroll", event.delta,"units")
        self.lb2.yview("scroll",event.delta,"units")
        # this prevents default bindings from firing, which
        # would end up scrolling the widget twice
        return "break"

app=App()
</snippet></ROW><ROW><id>4068795</id><snippet>pp = self.foobar(arg1, arg2)
</snippet></ROW><ROW><id>4069404</id><snippet>anim1.__add__(anim2)</snippet></ROW><ROW><id>4069404</id><snippet>__add__</snippet></ROW><ROW><id>4069412</id><snippet>def bin(x):
    """
    bin(number) -&gt; string

    Stringifies an int or long in base 2.
    """
    if x &lt; 0: 
        return '-' + bin(-x)
    out = []
    if x == 0: 
        out.append('0')
    while x &gt; 0:
        out.append('01'[x &amp; 1])
        x &gt;&gt;= 1
        pass
    try: 
        return '0b' + ''.join(reversed(out))
    except NameError, ne2: 
        out.reverse()
    return '0b' + ''.join(out)
</snippet></ROW><ROW><id>4069496</id><snippet>import datetime

with open('file.csv','w') as outputfile:
    wrtr = csv.writer(outputfile, delimiter=',', quotechar='"')
    a = (datetime.datetime.now().strftime('%Y-%m-%d'),0,6058.7,False,1913736200,0,False)
    wrtr.writerow(a)  # pass an iterable here

    # outputfile.close() you don't have to call close() because you use with
</snippet></ROW><ROW><id>4069496</id><snippet>2010-11-01,0,6058.7,False,1913736200,0,False
</snippet></ROW><ROW><id>4069610</id><snippet>import sys, os, select, fcntl

f = os.open(sys.argv[1], os.O_RDONLY | os.O_NONBLOCK)

flags = fcntl.fcntl(f, fcntl.F_GETFL, 0)
fcntl.fcntl(f, fcntl.F_SETFL, flags &amp; ~os.O_NONBLOCK)

r, w, e = select.select([f], [], [], 2.0)

if r == [f]:
    print 'ready'
    print os.read(f, 100)
else:
    print 'unready'

os.close(f)
</snippet></ROW><ROW><id>4069610</id><snippet>mkfifo /tmp/fifo
python &lt;code_above.py&gt; /tmp/fifo (1st terminal)
echo abcd &gt; /tmp/fifo (2nd terminal)
</snippet></ROW><ROW><id>4070253</id><snippet>Product.objects.filter(category__in=...)</snippet></ROW><ROW><id>4071200</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'database.sqlite',
        'TEST_NAME': 'test_database.sqlite',
    }
}
</snippet></ROW><ROW><id>4071228</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>4071228</id><snippet>import itertools

under10 = itertools.takewhile(lambda n: n &lt; 10, Fibonacci.series())
</snippet></ROW><ROW><id>4071407</id><snippet>for</snippet></ROW><ROW><id>4071407</id><snippet>my_string = "blah, lots  ,  of ,  spaces, here "
[x.strip() for x in my_string.split(',')]
</snippet></ROW><ROW><id>4071580</id><snippet>__getattr__</snippet></ROW><ROW><id>4071580</id><snippet>import hashlib

class shad_256(object):
    """
    Double SHA - sha256(sha256(data).digest())
    Less susceptible to length extension attacks than sha256 alone.

    &gt;&gt;&gt; s = shad_256('hello world')
    &gt;&gt;&gt; s.digest_size
    32
    &gt;&gt;&gt; s.block_size
    64
    &gt;&gt;&gt; s.sha256.hexdigest()
    'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'
    &gt;&gt;&gt; s.hexdigest()
    'bc62d4b80d9e36da29c16c5d4d9f11731f36052c72401a76c23c0fb5a9b74423'
    &gt;&gt;&gt; s.nonexistant()
    Traceback (most recent call last):
    ...
    AttributeError: '_hashlib.HASH' object has no attribute 'nonexistant'
    &gt;&gt;&gt; s2 = s.copy()
    &gt;&gt;&gt; s2.digest() == s.digest()
    True
    &gt;&gt;&gt; s2.update("text")
    &gt;&gt;&gt; s2.digest() == s.digest()
    False
    """
    def __init__(self, data=None):
        self.sha256 = hashlib.sha256()
        if data is not None:
            self.update(data)

    def __getattr__(self, key):
        return getattr(self.sha256, key)

    def _get_final_sha256(self):
        return hashlib.sha256(self.sha256.digest())

    def digest(self):
        return self._get_final_sha256().digest()

    def hexdigest(self):
        return self._get_final_sha256().hexdigest()

    def copy(self):
        result = shad_256()
        result.sha256 = self.sha256.copy()
        return result

if __name__ == "__main__":
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>4071580</id><snippet>update</snippet></ROW><ROW><id>4071580</id><snippet>__init__</snippet></ROW><ROW><id>4071580</id><snippet>copy</snippet></ROW><ROW><id>4071580</id><snippet>self.update = self.sha256.update
</snippet></ROW><ROW><id>4071580</id><snippet>__getattr__</snippet></ROW><ROW><id>4071580</id><snippet>update</snippet></ROW><ROW><id>4071580</id><snippet>a = "hello"
b = a.upper
b()
</snippet></ROW><ROW><id>4071580</id><snippet>__getattr__</snippet></ROW><ROW><id>4071580</id><snippet>self.sha256.update</snippet></ROW><ROW><id>4071580</id><snippet>self.sha256</snippet></ROW><ROW><id>4071580</id><snippet>self</snippet></ROW><ROW><id>4071768</id><snippet>parenting</snippet></ROW><ROW><id>4071963</id><snippet>session.query(ActionType).filter(ActionType.actions.any()).all()
</snippet></ROW><ROW><id>4071963</id><snippet>any()</snippet></ROW><ROW><id>4072048</id><snippet>import datetime
</snippet></ROW><ROW><id>4072048</id><snippet>class EST(datetime.tzinfo):
    def utcoffset(self, dt):
      return datetime.timedelta(hours=-5)

    def dst(self, dt):
        return datetime.timedelta(0)
</snippet></ROW><ROW><id>4072048</id><snippet>print datetime.datetime.now(EST()) 
</snippet></ROW><ROW><id>4072048</id><snippet>2010-11-01 13:44:20.231259-05:00 
</snippet></ROW><ROW><id>4072107</id><snippet># MyPlugin.py
from myapp.plugin import Plugin # a base class you define

def create():
    return MyPlugin()

class MyPlugin(Plugin):
    ...
</snippet></ROW><ROW><id>4072107</id><snippet>import imp, os.path
filename=os.path.split(pathname)[-1]
modulename = os.path.splitext(filename)[0]
try:
    module = imp.load_source(modulename, pathname)
    plugin = module.create()
except ImportError, e:
    print "Error importing plugin '%s': %s" % (filename, str(e))
</snippet></ROW><ROW><id>4072107</id><snippet>plugin</snippet></ROW><ROW><id>4072269</id><snippet>LIMIT</snippet></ROW><ROW><id>4072269</id><snippet>OFFSET</snippet></ROW><ROW><id>4072269</id><snippet>str()</snippet></ROW><ROW><id>4072269</id><snippet>.query</snippet></ROW><ROW><id>4072269</id><snippet>    print MyModel.objects.all().query
    print MyModel.objects.all()[50:100].query
</snippet></ROW><ROW><id>4072269</id><snippet>EXPLAIN</snippet></ROW><ROW><id>4072269</id><snippet>EXPLAIN QUERY PLAN</snippet></ROW><ROW><id>4072424</id><snippet>args</snippet></ROW><ROW><id>4072424</id><snippet>args=(2,1)</snippet></ROW><ROW><id>4072424</id><snippet>msg</snippet></ROW><ROW><id>4072424</id><snippet>(2,1)</snippet></ROW><ROW><id>4072424</id><snippet>2</snippet></ROW><ROW><id>4072424</id><snippet>1</snippet></ROW><ROW><id>4072424</id><snippet>args=((2,1),)</snippet></ROW><ROW><id>4072544</id><snippet>&gt;&gt;&gt; def insert_between(iterable, fill, cond):
...     iterable = iter(iterable)
...     prev = next(iterable)
...     yield prev
...     for cur in iterable:
...             if cond(prev, cur):
...                     yield fill
...             yield cur
...             prev = cur
...
&gt;&gt;&gt;
&gt;&gt;&gt; list(insert_between([1,2,3,4,7,8,9,15,16], 0, lambda x,y: x + 1 != y))
[1, 2, 3, 4, 0, 7, 8, 9, 0, 15, 16]
</snippet></ROW><ROW><id>4072650</id><snippet>get_recent_posts()</snippet></ROW><ROW><id>4072650</id><snippet>get_page_list()</snippet></ROW><ROW><id>4072650</id><snippet>from datetime import datetime, timedelta

this_month_start = datetime.now().date().replace(day=1)
prev_month_start = (this_month_start - timedelta(days=1)).replace(day=1)

pages = blog.get_page_list()
last_month_pages = [
  p for p in pages
  if prev_month_start &lt;= p['dateCreated'] &lt; this_month_start]
last_month_approved_comment_count = sum(
  blog.get_comment_count(page['page_id'])['approved']
  for page in last_month_pages)

print "number of last month's pages:", len(last_month_pages)
print "number of approved comments for last month's pages:",
print last_month_approved_comment_count
</snippet></ROW><ROW><id>4072884</id><snippet>if (self.hystInt.get().isdigit() and (200 &lt;= int(self.hystInt.get()) &lt;= 500)):
</snippet></ROW><ROW><id>4073005</id><snippet>import xml.etree.cElementTree as ET

ET.iterparse(sourcefile) # sourcefile being a cStringIO.StringIO instance holding your worksheet XML document

element.clear() # leave only scorched earth behind you
</snippet></ROW><ROW><id>4073005</id><snippet>iterparse</snippet></ROW><ROW><id>4073005</id><snippet>clear</snippet></ROW><ROW><id>4073024</id><snippet>import numpy as np
import scipy as sp
import scipy.interpolate
import matplotlib.pyplot as plt

# Generate some random data
y = (np.random.random(10) - 0.5).cumsum()
x = np.arange(y.size)

# Interpolate the data using a cubic spline to "new_length" samples
new_length = 50
new_x = np.linspace(x.min(), x.max(), new_length)
new_y = sp.interpolate.interp1d(x, y, kind='cubic')(new_x)

# Plot the results
plt.figure()
plt.subplot(2,1,1)
plt.plot(x, y, 'bo-')
plt.title('Using 1D Cubic Spline Interpolation')

plt.subplot(2,1,2)
plt.plot(new_x, new_y, 'ro-')

plt.show()
</snippet></ROW><ROW><id>4073037</id><snippet>.config()</snippet></ROW><ROW><id>4073037</id><snippet>import Tkinter as tk
import tkFont

class App:
    def __init__(self):
        root=tk.Tk()
        # create a custom font
        self.customFont = tkFont.Font(family="Helvetica", size=12)

        # create a couple widgets that use that font
        buttonframe = tk.Frame()
        label = tk.Label(root, text="Hello, world", font=self.customFont)
        text = tk.Text(root, width=20, height=2, font=self.customFont)
        buttonframe.pack(side="top", fill="x")
        label.pack()
        text.pack()
        text.insert("end","press +/- buttons to change\nfont size")

        # create buttons to adjust the font
        bigger = tk.Button(root, text="+", command=self.OnBigger)
        smaller = tk.Button(root, text="-", command=self.OnSmaller)
        bigger.pack(in_=buttonframe, side="left")
        smaller.pack(in_=buttonframe, side="left")

        root.mainloop()

    def OnBigger(self):
        '''Make the font 2 points bigger'''
        size = self.customFont['size']
        self.customFont.configure(size=size+2)

    def OnSmaller(self):
        '''Make the font 2 points smaller'''
        size = self.customFont['size']
        self.customFont.configure(size=size-2)

app=App()
</snippet></ROW><ROW><id>4073037</id><snippet>font_actual</snippet></ROW><ROW><id>4073037</id><snippet>import Tkinter as tk
import tkFont
root=tk.Tk()
label = tk.Label(root, text="Hello, world")
font = tkFont.Font(font=label['font'])
print font.actual()
</snippet></ROW><ROW><id>4073037</id><snippet>{'family': 'Lucida Grande', 'weight': 'normal', 'slant': 'roman', 'overstrike': False, 'underline': False, 'size': 13}
</snippet></ROW><ROW><id>4073488</id><snippet>runserver</snippet></ROW><ROW><id>4073612</id><snippet>content = text.selection_get()
</snippet></ROW><ROW><id>4073785</id><snippet>def loadList():
    # Fill all the list first , make the readRecord() return eof (True or False).
    while readRecord():
        pass

    # than process data (check for zip code) this will run it only one time
    # but you can put it in a loop to repeat the action.
    processRecords()
</snippet></ROW><ROW><id>4073785</id><snippet>def processRecords():
        userInput = raw_input(USERPROMPT)
        # Check if a user has entered a text or not
        if userInput:
            # check the index from zipcode   

            if userInput in zipcode:
                # the index of the zipcode in the zipcode list is the same 
                # to get related cities and states.
                index_ = zipcode.index(userInput) 
                print "The city is %s and the state is %s " % \
                      (city[index_], state[index_])
            else:
                print "\nThe zip code does not exist."
        else:
            print "Please enter a data"
</snippet></ROW><ROW><id>4073921</id><snippet>def my_view(request, exportCSV):
    # ... Figure out `queryset` here ...

    if exportCSV:
        response = HttpResponse(mimetype='text/csv')
        response['Content-Disposition'] = 'attachment;filename=export.csv'
        writer = csv.writer(response)
        for cdr in queryset:
            writer.writerow([cdr['calldate'], cdr['src'], cdr['dst'], ])
        return response
    else:
        return render_to_response('templateX.html', {'queryset': queryset,
            'filter_form': filter_form, 'validated': validated},
            context_instance = RequestContext(request))
</snippet></ROW><ROW><id>4073921</id><snippet>urls.py</snippet></ROW><ROW><id>4073921</id><snippet>urlpatterns</snippet></ROW><ROW><id>4073921</id><snippet>url(r'^form', 'my_view', {"exportCSV": False}, name="form"),
url(r'^csv', 'my_view', {"exportCSV": True}, name="export"),
</snippet></ROW><ROW><id>4073971</id><snippet>SELECT t3.*,
      x.count,
      x.amount
 FROM TABLE3 t3
 JOIN (SELECT t2.cus_id
              COUNT(*) AS count,
              SUM(t2.amount) AS total
         FROM TABLE2 t2
        WHERE EXISTS(SELECT NULL
                       FROM TABLE1 t1
                      WHERE t1.own_id = t2.own_id)
     GROUP BY t2.cus_id) x ON x.cus_id = t3.id
</snippet></ROW><ROW><id>4073993</id><snippet>manage.py runserver 0.0.0.0:8080
</snippet></ROW><ROW><id>4073993</id><snippet>0.0.0.0</snippet></ROW><ROW><id>4074078</id><snippet>pt_ids = Profile_Tag.objects.values_list('profile', flat=True)
</snippet></ROW><ROW><id>4074078</id><snippet>pts = Profile_Tag.objects.all()
for pt in pts:
    print pt.profile_id
</snippet></ROW><ROW><id>4074381</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import SIGNAL

class Widget(QWidget): 
    def __init__(self, parent=None): 
        QWidget.__init__(self) 

        self.textedit = QTextEdit()
        self.clip = QApplication.clipboard()
        self.button = QPushButton("Bold")         
        self.connect(self.button, SIGNAL("clicked()"), self.addBold)

        layout = QVBoxLayout()
        layout.addWidget(self.textedit) 
        layout.addWidget(self.button)
        self.setLayout(layout)

    def addBold(self):
        self.clip.clear()
        self.textedit.copy()
        currentText = self.clip.text()
        self.textedit.insertPlainText("'''%s'''" % currentText)

app = QApplication([])
widget = Widget() 
widget.show() 
app.exec_()
</snippet></ROW><ROW><id>4075163</id><snippet>var = self.model.objects.get(site_id__exact=current_site.id)
context[self.varname] = var.__dict__[self.field]#this will get the field's value dynamically, which is what I was looking for
</snippet></ROW><ROW><id>4075713</id><snippet>
pip install munkres
</snippet></ROW><ROW><id>4075832</id><snippet>import urllib2
import urllib

values = dict(state="CA", city="SF") # examine form for actual vars
try:
    req = urllib2.Request("http://example.com/post.php",
                          urllib.urlencode(values))
    response_page = urllib2.urlopen(req).read()
except urllib2.HTTPError, details:
    pass #do something with the error here...
</snippet></ROW><ROW><id>4076005</id><snippet>reload()</snippet></ROW><ROW><id>4076005</id><snippet>In [1]: import foo
  # make some changes to the foo.py
In [2]: reload(foo)
</snippet></ROW><ROW><id>4076180</id><snippet>labels/nodelist</snippet></ROW><ROW><id>4076180</id><snippet>node_sizes</snippet></ROW><ROW><id>4076180</id><snippet>#basically a stripped down rewrite of Phylo.draw_graphviz
import networkx, pylab
from Bio import Phylo


#taken from draw_graphviz
def get_label_mapping(G, selection): 
    for node in G.nodes(): 
        if (selection is None) or (node in selection): 
            try: 
                label = str(node) 
                if label not in (None, node.__class__.__name__): 
                    yield (node, label) 
            except (LookupError, AttributeError, ValueError): 
                pass


kwargs={}
tree = Phylo.read('tree.dnd', 'newick')
G = Phylo.to_networkx(tree)
Gi = networkx.convert_node_labels_to_integers(G, discard_old_labels=False)

node_sizes = []
labels = dict(get_label_mapping(G, None))
kwargs['nodelist'] = labels.keys()

#create our node sizes based on our labels because the labels are used for the node_list
#this way they should be correct
for label in labels.keys():
    if str(label) != "Clade":
        num = label.name.split('-')
        #the times 50 is just a guess on what would look best
        size = int(num[-1]) * 50
        node_sizes.append(size)

kwargs['node_size'] = node_sizes
posi = networkx.pygraphviz_layout(Gi, 'neato', args='') 
posn = dict((n, posi[Gi.node_labels[n]]) for n in G) 

networkx.draw(G, posn, labels=labels, node_color='#c0deff', **kwargs)

pylab.show()
</snippet></ROW><ROW><id>4076351</id><snippet>.distinct()</snippet></ROW><ROW><id>4076383</id><snippet>&gt;&gt;&gt; from igraph import Graph
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; g = Graph.GRG(100, 0.2)        # generate a geometric random graph
&gt;&gt;&gt; g.es["capacity"] = [randint(0, 1000) for i in xrange(g.ecount())]
&gt;&gt;&gt; cut = g.maxflow(0, 99, "capacity")
</snippet></ROW><ROW><id>4076383</id><snippet>cut.membership</snippet></ROW><ROW><id>4076383</id><snippet>cut[0]</snippet></ROW><ROW><id>4076383</id><snippet>cut[1]</snippet></ROW><ROW><id>4076383</id><snippet>cut.value</snippet></ROW><ROW><id>4076484</id><snippet>page_content</snippet></ROW><ROW><id>4076484</id><snippet>page_id</snippet></ROW><ROW><id>4076484</id><snippet>content</snippet></ROW><ROW><id>4076484</id><snippet>timestamp</snippet></ROW><ROW><id>4076484</id><snippet>page_content</snippet></ROW><ROW><id>4076484</id><snippet>page_id</snippet></ROW><ROW><id>4076484</id><snippet>timestamp</snippet></ROW><ROW><id>4076802</id><snippet>myString.strip()</snippet></ROW><ROW><id>4077309</id><snippet>&gt;&gt;&gt; words = ['xoo', 'dsd', 'xdd']
&gt;&gt;&gt; sorted(words, key=lambda x: (x[0] != 'x', x))
['xdd', 'xoo', 'dsd']
</snippet></ROW><ROW><id>4077309</id><snippet>False</snippet></ROW><ROW><id>4077309</id><snippet>True</snippet></ROW><ROW><id>4077309</id><snippet>'x'</snippet></ROW><ROW><id>4077309</id><snippet>False</snippet></ROW><ROW><id>4077309</id><snippet>True</snippet></ROW><ROW><id>4077309</id><snippet>'x'</snippet></ROW><ROW><id>4077309</id><snippet>'x'</snippet></ROW><ROW><id>4077309</id><snippet>'x'</snippet></ROW><ROW><id>4077424</id><snippet>dataPlot.get_tk_widget().pack(side=TOP, fill=BOTH, expand=1)</snippet></ROW><ROW><id>4077424</id><snippet>fill=BOTH</snippet></ROW><ROW><id>4077424</id><snippet>expand=1</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>master</snippet></ROW><ROW><id>4077424</id><snippet>toolbar = tk.Frame(master)
button = tk.Button(toolbar, text="Push me")
button.pack(side="left") # left side of parent, the toolbar frame
toolbar.pack(side=TOP, fill="x") # top of parent, the master window
</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>TOP</snippet></ROW><ROW><id>4077424</id><snippet>BOTTOM</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>TOP</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>grid</snippet></ROW><ROW><id>4077424</id><snippet>pack</snippet></ROW><ROW><id>4077424</id><snippet>grid</snippet></ROW><ROW><id>4077424</id><snippet>toolbar.grid(row=1, column=1, sticky="ew")
dataPlot.get_tk_widget().grid(row=1, column=1, sticky="nsew")
master.grid_rowconfigure(0, weight=0)
master.grid_rowconfigure(1, weight=1)
master.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>4077789</id><snippet>open</snippet></ROW><ROW><id>4077789</id><snippet>import mymod
import os.path

def chroot_open(filename,*args):
    filename = os.path.join("/home/you/fakeroot",filename)
    return open(filename,*args)

mymod.open = chroot_open
</snippet></ROW><ROW><id>4077960</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('02/11/2010', '%d/%m/%Y').strftime('%Y-%m-%d')
'2010-11-02'
</snippet></ROW><ROW><id>4077960</id><snippet>&gt;&gt;&gt; '-'.join('02/11/2010'.split('/')[::-1])
'2010-11-02'
&gt;&gt;&gt; '-'.join(reversed('02/11/2010'.split('/')))
'2010-11-02'
</snippet></ROW><ROW><id>4078679</id><snippet>2to3</snippet></ROW><ROW><id>4078679</id><snippet>unicode()</snippet></ROW><ROW><id>4078679</id><snippet>str()</snippet></ROW><ROW><id>4078679</id><snippet>dict.has_key()</snippet></ROW><ROW><id>4078679</id><snippet>dict.in</snippet></ROW><ROW><id>4078679</id><snippet>cStringIO</snippet></ROW><ROW><id>4078679</id><snippet>io</snippet></ROW><ROW><id>4078679</id><snippet>StringIO.next</snippet></ROW><ROW><id>4078679</id><snippet>StringIO.__next__</snippet></ROW><ROW><id>4078776</id><snippet>EmailListField</snippet></ROW><ROW><id>4078791</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>4078791</id><snippet>id</snippet></ROW><ROW><id>4078791</id><snippet>__deepcopy__</snippet></ROW><ROW><id>4078791</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>4078791</id><snippet>memo</snippet></ROW><ROW><id>4078791</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>4078791</id><snippet>id</snippet></ROW><ROW><id>4078791</id><snippet>id</snippet></ROW><ROW><id>4079319</id><snippet>&gt;&gt;&gt; tup = (125, 255, 255, 125, 255, 255, 125, 255)
&gt;&gt;&gt; "".join('%02x' % i for i in tup)
'7dffff7dffff7dff'
</snippet></ROW><ROW><id>4079319</id><snippet>struct.unpack</snippet></ROW><ROW><id>4079319</id><snippet>"".join()</snippet></ROW><ROW><id>4079319</id><snippet>'}\xff\xff}\xff\xff}\xff'</snippet></ROW><ROW><id>4079319</id><snippet>&gt;&gt;&gt; s = '}\xff\xff}\xff\xff}\xff'
&gt;&gt;&gt; "".join('%02x' % ord(c) for c in s)
'7dffff7dffff7dff'
</snippet></ROW><ROW><id>4079534</id><snippet>gc</snippet></ROW><ROW><id>4079534</id><snippet>gc</snippet></ROW><ROW><id>4079680</id><snippet>qualified=True</snippet></ROW><ROW><id>4079680</id><snippet>url()</snippet></ROW><ROW><id>4079680</id><snippet>print url("blog", id=123, qualified=True)  
# depending on routing configuration,
# would print something like "http://somehost/blog/123"
</snippet></ROW><ROW><id>4079680</id><snippet>host</snippet></ROW><ROW><id>4079680</id><snippet>print url("blog", id=123, qualified=True, host="example.com")  
# ==&gt; "http://example.com/blog/123"
</snippet></ROW><ROW><id>4079745</id><snippet>&gt;&gt;&gt; from time import sleep
&gt;&gt;&gt; from multiprocessing import Process, Pipe
&gt;&gt;&gt; 
&gt;&gt;&gt; def test_proc(name, conn):
...     x = 0
...     while True:
...             #print x
...             x += 1
...             conn.poll()
... 
&gt;&gt;&gt; def main():
...     proc_name= ['a', 'b', 'c']
...     procs = [Process(target=test_proc, args=Pipe()) for p in proc_name]
...     for p in procs:
...             p.start()
...     while True:
...             print [(p.is_alive(), 'Pid %s' %(p.pid)) for p in procs]
...             sleep(1)
... 
&gt;&gt;&gt; main()
[(True, 'Pid 423'), (True, 'Pid 424'), (True, 'Pid 425')]
[(True, 'Pid 423'), (True, 'Pid 424'), (True, 'Pid 425')]
[(True, 'Pid 423'), (True, 'Pid 424'), (True, 'Pid 425')]
[(True, 'Pid 423'), (True, 'Pid 424'), (True, 'Pid 425')]
...
</snippet></ROW><ROW><id>4079745</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>4079745</id><snippet>main()</snippet></ROW><ROW><id>4079745</id><snippet>&gt;&gt;&gt; main()
[(True, 'Pid 940'), (True, 'Pid 941'), (True, 'Pid 942')]
[(True, 'Pid 940'), (True, 'Pid 941'), (True, 'Pid 942')]
[(True, 'Pid 940'), (True, 'Pid 941'), (True, 'Pid 942')]
[(True, 'Pid 940'), (True, 'Pid 941'), (True, 'Pid 942')]
[(True, 'Pid 940'), (True, 'Pid 941'), (True, 'Pid 942')]
</snippet></ROW><ROW><id>4079745</id><snippet>  PID TTY          TIME CMD
  911 pts/6    00:00:00 python
  940 pts/6    00:00:29 python
  941 pts/6    00:00:29 python
  942 pts/6    00:00:37 python
  944 pts/5    00:00:00 ps
</snippet></ROW><ROW><id>4079745</id><snippet>  PID TTY          TIME CMD
  911 pts/6    00:00:00 python
  940 pts/6    00:00:42 python &lt;defunct&gt;
  941 pts/6    00:00:50 python &lt;defunct&gt;
  942 pts/6    00:00:51 python &lt;defunct&gt;
  946 pts/5    00:00:00 ps
</snippet></ROW><ROW><id>4079782</id><snippet>import wx
from wx.lib.scrolledpanel import ScrolledPanel

app = wx.PySimpleApp()
frame = wx.Frame(None, id=wx.ID_ANY, name="Just one child", size=(100,100))
scrollablePanel = ScrolledPanel(parent=frame, id=wx.ID_ANY, name="scrolledPanel", style=wx.ALWAYS_SHOW_SB)
scrollablePanel.SetupScrolling()
scrollablePanel.SetBackgroundColour(wx.Colour(128,128,128))
innerPanel = wx.Panel(parent=scrollablePanel, id=wx.ID_ANY, name="innerPanel", size=(250,100), style=wx.SIMPLE_BORDER)
innerPanel.SetBackgroundColour(wx.Colour(255,255,255))
vSizer = wx.BoxSizer(wx.VERTICAL)
vSizer.Add(innerPanel, proportion=0, flag=wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, border=8)
hSizer = wx.BoxSizer(wx.HORIZONTAL)
hSizer.Add(vSizer, proportion=1, flag=wx.ALIGN_CENTER_VERTICAL)
scrollablePanel.SetSizer(hSizer)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>4079945</id><snippet>threading.Thread.setDaemon</snippet></ROW><ROW><id>4079976</id><snippet>fruits = [{"name": name, "color": color} for name, color in zip(names, colors)]
</snippet></ROW><ROW><id>4080021</id><snippet>month_abbreviations = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,
                       'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,
                       'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
year = int(line[7:11])
month = month_abbreviations[line[3:6]]
day = int(line[0:2])
hour = int(line[12:14])
minute = int(line[15:17])
second = int(line[18:20])
new_entry['time'] = datetime.datetime(year, month, day, hour, minute, second)
</snippet></ROW><ROW><id>4080039</id><snippet>import socket
socket.settimeout(10) # or whatever timeout you want
</snippet></ROW><ROW><id>4080221</id><snippet>abandoned,adj</snippet></ROW><ROW><id>4080221</id><snippet>word, pos</snippet></ROW><ROW><id>4080221</id><snippet>pos, word = line.split(",")</snippet></ROW><ROW><id>4080221</id><snippet>pos == 'abandoned'</snippet></ROW><ROW><id>4080221</id><snippet>word == 'adj'</snippet></ROW><ROW><id>4080292</id><snippet>-rw-rw-r-- 1 unutbu unutbu 25334 2010-10-31 12:55 foo
</snippet></ROW><ROW><id>4080292</id><snippet>% sudo tune2fs -l /dev/mapper/vg1-OS1
...
Block size:               4096
...
</snippet></ROW><ROW><id>4080292</id><snippet>% du -B1 foo
28672   foo
</snippet></ROW><ROW><id>4080292</id><snippet>% du foo
28  foo
</snippet></ROW><ROW><id>4080292</id><snippet>du</snippet></ROW><ROW><id>4080371</id><snippet>names = [child['institution_name'] for child in inst_array[0]['children']]
</snippet></ROW><ROW><id>4080471</id><snippet>create_window</snippet></ROW><ROW><id>4080536</id><snippet>COUNT_help.months(months = month)</snippet></ROW><ROW><id>4080536</id><snippet>datetime</snippet></ROW><ROW><id>4080536</id><snippet>if correctcheck == "3": 
    months = COUNT_help.months(months = month) 
    print month 
    print months 
</snippet></ROW><ROW><id>4080834</id><snippet>.bashrc</snippet></ROW><ROW><id>4080834</id><snippet>alias python3='python3 ~/py/shellreplace.py'
alias python='python ~/py/shellreplace.py'
alias python27='python27 ~/py/shellreplace.py'
</snippet></ROW><ROW><id>4080834</id><snippet>LoadingInteractiveConsole</snippet></ROW><ROW><id>4080834</id><snippet>~/py/shellreplace.py</snippet></ROW><ROW><id>4081037</id><snippet>&gt;&gt;&gt; masses = {'C': 12}
&gt;&gt;&gt; element = input('element symbol:')
element symbol:C
&gt;&gt;&gt; masses[element]
12
&gt;&gt;&gt; multiplier = input('how many?')
how many?5
&gt;&gt;&gt; multiplier
'5'                                          # string
&gt;&gt;&gt; masses[element] * int(multiplier)
60
</snippet></ROW><ROW><id>4081119</id><snippet>sleep()</snippet></ROW><ROW><id>4081119</id><snippet>select((sys.stdin, ), (), (), saveInterval*60)</snippet></ROW><ROW><id>4081119</id><snippet>select</snippet></ROW><ROW><id>4081119</id><snippet>select</snippet></ROW><ROW><id>4081234</id><snippet>a = [1, 3, 5]
b = a
a[:] = [x + 2 for x in a]
print b
</snippet></ROW><ROW><id>4081323</id><snippet>del</snippet></ROW><ROW><id>4081323</id><snippet>$ python
&gt;&gt;&gt; _ = 3
&gt;&gt;&gt; _
3
&gt;&gt;&gt; 5
5
&gt;&gt;&gt; _
3
&gt;&gt;&gt; del _
&gt;&gt;&gt; 6
6
&gt;&gt;&gt; _
6
</snippet></ROW><ROW><id>4081406</id><snippet>USER=joe
HOME=/home/joe
SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/some/other/path
PYTHONPATH=/home/joe/pybin
MAILTO=joe
LANG=en_US.UTF-8

#min hr    day   mon dow
*/5  12    *     *   *     reminder.py 'Eat lunch'
</snippet></ROW><ROW><id>4081587</id><snippet>list</snippet></ROW><ROW><id>4081587</id><snippet>list[:]</snippet></ROW><ROW><id>4081587</id><snippet>list</snippet></ROW><ROW><id>4081587</id><snippet>list[:]</snippet></ROW><ROW><id>4081587</id><snippet>list</snippet></ROW><ROW><id>4081693</id><snippet>list = ["word1", "word2", "word3"]
try:
   print list.index("word1")
except ValueError:
   print "word1 not in list."
</snippet></ROW><ROW><id>4081693</id><snippet>0</snippet></ROW><ROW><id>4081693</id><snippet>"word1"</snippet></ROW><ROW><id>4081738</id><snippet>qty / (cost * ppl)</snippet></ROW><ROW><id>4081738</id><snippet>qty</snippet></ROW><ROW><id>4081738</id><snippet>cost</snippet></ROW><ROW><id>4081738</id><snippet>ppl</snippet></ROW><ROW><id>4081738</id><snippet>def cmp(a, b):
    return (a["qty"] / (a["cost"] * a["ppl"])) - (b["qty"] / (b["cost"] * b["ppl"]))

list = sorted(list, cmp)
</snippet></ROW><ROW><id>4081738</id><snippet>qty</snippet></ROW><ROW><id>4081738</id><snippet>cost * ppl</snippet></ROW><ROW><id>4081738</id><snippet>a/x &gt; b&gt;x</snippet></ROW><ROW><id>4081738</id><snippet>a &gt; b</snippet></ROW><ROW><id>4081738</id><snippet>x/a &gt; x/b</snippet></ROW><ROW><id>4081738</id><snippet>a &lt; b</snippet></ROW><ROW><id>4081738</id><snippet>cost</snippet></ROW><ROW><id>4081738</id><snippet>ppl</snippet></ROW><ROW><id>4081911</id><snippet>inspect.isclass</snippet></ROW><ROW><id>4081911</id><snippet>__bases__</snippet></ROW><ROW><id>4081911</id><snippet>Dummy</snippet></ROW><ROW><id>4081911</id><snippet>__getattr__</snippet></ROW><ROW><id>4081911</id><snippet>Dummy</snippet></ROW><ROW><id>4081911</id><snippet>None</snippet></ROW><ROW><id>4081911</id><snippet>inspect.isclass</snippet></ROW><ROW><id>4081911</id><snippet>foo</snippet></ROW><ROW><id>4081911</id><snippet>__getattr__</snippet></ROW><ROW><id>4081911</id><snippet>AttributeError</snippet></ROW><ROW><id>4081911</id><snippet>None</snippet></ROW><ROW><id>4081917</id><snippet>quiet</snippet></ROW><ROW><id>4081917</id><snippet>ui</snippet></ROW><ROW><id>4081917</id><snippet>ui.setconfig('ui', 'quiet', True)
commands.pull(ui, repo)
</snippet></ROW><ROW><id>4081959</id><snippet>from twisted.internet.threads import deferToThread
deferredObj = threads.deferToThread(run_app, self.appDataReceived)
</snippet></ROW><ROW><id>4081959</id><snippet>class Echo(Protocol):
    def connectionLost(self, reason):
        print reason
        # which is crude, there should be a more elegant answer
        reactor.stop() 
</snippet></ROW><ROW><id>4082245</id><snippet>re.match(r'.*&gt;([^&lt;&gt;]*)&lt;/font&gt;.*', s).group(1)
</snippet></ROW><ROW><id>4082821</id><snippet>&amp;rsz=large</snippet></ROW><ROW><id>4082821</id><snippet>&amp;start=8</snippet></ROW><ROW><id>4082868</id><snippet>forum.post_set.all()
</snippet></ROW><ROW><id>4082983</id><snippet>def weekdays(day):
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    i=days.index(day) # get the index of the selected day
    d1=days[i:] #get the list from an including this index
    d1.extend(days[:i]) # append the list form the beginning to this index
    return d1
</snippet></ROW><ROW><id>4082983</id><snippet>def test_weekdays():
    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    for day in days:
        print weekdays(day)
</snippet></ROW><ROW><id>4083113</id><snippet>sum(1 for word in words if len(word) &gt;= 2 and word[0] == word[-1])
</snippet></ROW><ROW><id>4083165</id><snippet> import random

 # Getting the number of rows in the table it's equivalent to do SELECT COUNT(*).
 count_record = Table.objects.count() 

 # Choose 10 (at most) number from the list of all ids. 
 random_pks = random.sample(range(1, count_record) , min(count_record, 10))

 random_list = Table.objects.filter(pk__in=random_pks)
</snippet></ROW><ROW><id>4083165</id><snippet>query = """SELECT * FROM table
ORDER BY RAND()
LIMIT 10""")

table.objects.raw(query)
</snippet></ROW><ROW><id>4083431</id><snippet>-0.0 == +0.0 == 0
</snippet></ROW><ROW><id>4083431</id><snippet>&gt;&gt;&gt; a = 3.4
&gt;&gt;&gt; b =4.4
&gt;&gt;&gt; c = -0.0
&gt;&gt;&gt; d = +0.0
&gt;&gt;&gt; a*c
-0.0
&gt;&gt;&gt; b*d
0.0
&gt;&gt;&gt; a*c == b*d
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4083431</id><snippet>&gt;&gt;&gt; divmod(-0.0,100)
(-0.0, 0.0)
&gt;&gt;&gt; divmod(+0.0,100)
(0.0, 0.0)

&gt;&gt;&gt; math.atan2(0.0, 0.0) == math.atan2(-0.0, 0.0)
True 
&gt;&gt;&gt; math.atan2(0.0, -0.0) == math.atan2(-0.0, -0.0)
False
</snippet></ROW><ROW><id>4084254</id><snippet>(1)</snippet></ROW><ROW><id>4084254</id><snippet>int</snippet></ROW><ROW><id>4084254</id><snippet>(1,)</snippet></ROW><ROW><id>4084254</id><snippet>tuple</snippet></ROW><ROW><id>4084394</id><snippet>token = Session.query(AuthToken).options(eagerload('user')).filter(...).one()
user = token.user
</snippet></ROW><ROW><id>4084428</id><snippet>L2 = ['A','B','C','D','A','B']
L3 = [3,2,1,2,2,1]

L4 = zip(L2, L3)

L5 = []
L6 = []
def freduce(l):
    for x, y in l:
        print x , y
        if x in L5:
            k = L5.index(x)
            L6[k] += y
        else:
            L5.append(x)
            L6.append(y)

freduce(L4)  
print L5
print L6
</snippet></ROW><ROW><id>4084428</id><snippet>['A', 'B', 'C', 'D']
[5, 3, 1, 2]
</snippet></ROW><ROW><id>4084428</id><snippet>&gt;&gt;&gt; L3 = [3,2,1,2,2,1]
&gt;&gt;&gt; L2 = ['A','B','C','D','A','B']
&gt;&gt;&gt; range(0, len(L2))
[0, 1, 2, 3, 4, 5]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4084428</id><snippet>key = L2[i]
num = L3[i]
</snippet></ROW><ROW><id>4084428</id><snippet>l2_sum[key] = l2_sum.get(key, 0) + num
</snippet></ROW><ROW><id>4084630</id><snippet>inspect.getmro</snippet></ROW><ROW><id>4084630</id><snippet>import inspect

@property
d(self):
    res = {}
    subclasses = inspect.getmro(type(self))
    for cls in reversed(subclasses):
        res.update(gettattr(cls, 'd', {}))
    return res 
</snippet></ROW><ROW><id>4084767</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>4084767</id><snippet>fromkeys(...)
    dict.fromkeys(S[,v]) -&gt; New dict with keys from S and values equal to v.
    v defaults to None.
</snippet></ROW><ROW><id>4084767</id><snippet>&gt;&gt;&gt; x = dict.fromkeys(range(0, 10), 0)
&gt;&gt;&gt; x
{0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}
</snippet></ROW><ROW><id>4085218</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; l = '23:30:43.170344 IP (tos 0x0, ttl 64, id 55731, offset 0, flags [DF], proto TCP (6), length 443)'
&gt;&gt;&gt; k = re.compile(r'^([0-9:]+\.[0-9]+) IP \(.* id ([0-9]+), offset ([0-9]+).*\)')
&gt;&gt;&gt; x = k.match(l)
&gt;&gt;&gt; x.groups()
('23:30:43.170344', '55731', '0')
&gt;&gt;&gt; x.groups()[0]
'23:30:43.170344'
&gt;&gt;&gt; x.groups()[1]
'55731'
&gt;&gt;&gt; x.groups()[2]
'0'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4085218</id><snippet>&gt;&gt;&gt; l = '192.168.98.138.49341 &gt; 201.20.49.239.80: Flags [P.], seq 562034569:562034972, ack 364925832, win 5840, length 403'
&gt;&gt;&gt; k = re.compile(r'^([0-9.]+) &gt; ([0-9.]+): .* seq ([0-9:]+), ack ([0-9]+).*')
&gt;&gt;&gt; x = k.match(l)
&gt;&gt;&gt; for y in x.groups(): print y
... 
192.168.98.138.49341
201.20.49.239.80
562034569:562034972
364925832
</snippet></ROW><ROW><id>4085268</id><snippet>self</snippet></ROW><ROW><id>4085268</id><snippet>self.__class__</snippet></ROW><ROW><id>4085317</id><snippet>JSONEncoder</snippet></ROW><ROW><id>4085317</id><snippet>default</snippet></ROW><ROW><id>4085323</id><snippet>#!/usr/bin/env python
#

import os
import urllib

from google.appengine.ext import blobstore
from google.appengine.ext import webapp
from google.appengine.ext.webapp import blobstore_handlers
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app

class MainHandler(webapp.RequestHandler):
    def get(self):
        upload_url = blobstore.create_upload_url('/upload')
        self.response.out.write('&lt;html&gt;&lt;body&gt;')
        self.response.out.write('&lt;form action="%s" method="POST" enctype="multipart/form-data"&gt;' % upload_url)
        self.response.out.write("""Upload File: &lt;input type="file" name="file"&gt;&lt;br&gt; &lt;input type="submit" 
            name="submit" value="Submit"&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;""")

class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):
    def post(self):
        upload_files = self.get_uploads('file') 
        blob_info = upload_files[0]
        self.redirect('/serve/%s' % blob_info.key())

class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self, resource):
        resource = str(urllib.unquote(resource))
        blob_info = blobstore.BlobInfo.get(resource)
        self.send_blob(blob_info)

def main():
    application = webapp.WSGIApplication(
          [('/', MainHandler),
           ('/upload', UploadHandler),
           ('/serve/([^/]+)?', ServeHandler),
          ], debug=True)
    run_wsgi_app(application)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>4085323</id><snippet>class Photo(db.Model):
 imageblob = db.BlobProperty()
</snippet></ROW><ROW><id>4085323</id><snippet>webapp.RequestHandler</snippet></ROW><ROW><id>4085323</id><snippet>class Upload(webapp.RequestHandler):
    def post(self):
        image = self.request.get("Filedata")
        photo = Photo()
        photo.imageblob = db.Blob(image) 
        photo.put()
</snippet></ROW><ROW><id>4085323</id><snippet>class DownloadImage(webapp.RequestHandler):
    def get(self):
        photo= db.get(self.request.get("photo_id"))
        if photo:
            self.response.headers['Content-Type'] = "image/jpeg"
            self.response.out.write(photo.imageblob)
        else:
            self.response.out.write("Image not available")
</snippet></ROW><ROW><id>4085323</id><snippet>application = webapp.WSGIApplication([
    ...
    ('/i', DownloadImage),
    ...
], debug=True)
</snippet></ROW><ROW><id>4085323</id><snippet>yourapp/i?photo_id = photo_key
</snippet></ROW><ROW><id>4085323</id><snippet>www.mysite.com/i/photo_key.jpg</snippet></ROW><ROW><id>4085323</id><snippet>class Download(webapp.RequestHandler):
        def get(self, photo_id):
            photo= db.get(db.Key(photo_id))
            if photo:
                self.response.headers['Content-Type'] = "image/jpeg"
                self.response.out.write(photo.imageblob)
            else:
                self.response.out.write("Image not available")
</snippet></ROW><ROW><id>4085323</id><snippet>application = webapp.WSGIApplication([
        ...
        ('/i/(\d+)\.jpg', DownloadImage),
        ...
    ], debug=True)
</snippet></ROW><ROW><id>4085394</id><snippet>1 #!/usr/bin/env python
2 
3 if __name__ == "__main__":
4   inputs = []
5   while True:
6     inp = raw_input("Enter number|`quit': ")
7     if inp.lower() == "quit":
8       break
9     try: inp = float(inp)
10     except:
11       print "Not a number, ignored"
12       continue
13     print inp
14     inputs.append(inp)
15   for i in inputs: print i
</snippet></ROW><ROW><id>4085427</id><snippet>stack[-1]
</snippet></ROW><ROW><id>4085765</id><snippet>application = webapp.WSGIApplication(
[
  ('/(en|fr|de)/', IndexController),
]
</snippet></ROW><ROW><id>4086052</id><snippet>from twisted.internet import reactor
reactor.listenTCP(4321, FirstProtocolFactory())
reactor.listenTCP(5432, SecondProtocolFactory())
reactor.listenTCP(6543, ThirdProtocolFactory())
reactor.run()
</snippet></ROW><ROW><id>4086052</id><snippet>listenTCP</snippet></ROW><ROW><id>4086052</id><snippet>Service</snippet></ROW><ROW><id>4086052</id><snippet>twisted.application.internet</snippet></ROW><ROW><id>4086052</id><snippet>twistd</snippet></ROW><ROW><id>4086052</id><snippet>.tac</snippet></ROW><ROW><id>4086052</id><snippet>twistd</snippet></ROW><ROW><id>4086052</id><snippet>reactor.run()</snippet></ROW><ROW><id>4086052</id><snippet>twistd</snippet></ROW><ROW><id>4086052</id><snippet>FirstProtocolFactory</snippet></ROW><ROW><id>4086052</id><snippet>SecondProtocolFactory</snippet></ROW><ROW><id>4086052</id><snippet>ThirdProtocolFactory</snippet></ROW><ROW><id>4086200</id><snippet>bulkloader.yaml</snippet></ROW><ROW><id>4086200</id><snippet>import_transform</snippet></ROW><ROW><id>4086200</id><snippet>none_if_empty</snippet></ROW><ROW><id>4086200</id><snippet>- property: fooproperty
  external_name: fooproperty
  import_transform: transform.none_if_empty(foopropertytype)
</snippet></ROW><ROW><id>4086200</id><snippet>def none_if_empty(fn):
  """A wrapper for a value to return None if it's empty. Useful on import.

  Can be used in config files (e.g. "transform.none_if_empty(int)" or
  as a decorator.

  Args:
    fn: Single argument transform function.

  Returns:
    Wrapped function.
  """

  def wrapper(value):
    if value == '' or value is None:
      return None
    return fn(value)

  return wrapper
</snippet></ROW><ROW><id>4086384</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>4086426</id><snippet>subprocess</snippet></ROW><ROW><id>4086426</id><snippet>select</snippet></ROW><ROW><id>4086426</id><snippet>fnctl</snippet></ROW><ROW><id>4086426</id><snippet>subprocess.Popen.communicate</snippet></ROW><ROW><id>4086964</id><snippet>logging.handlers.SocketHandler</snippet></ROW><ROW><id>4087278</id><snippet>* The major dynamic languages, such as Python, Perl, Tcl, and Ruby,
</snippet></ROW><ROW><id>4087278</id><snippet> import ctypes libc = ctypes.CDLL('/lib/libc.so.6' )   # under Linux/Unix
 t = libc.time(None) # equivalent C code: t = time(NULL)
 print t
</snippet></ROW><ROW><id>4087540</id><snippet>stat</snippet></ROW><ROW><id>4087540</id><snippet>os.stat</snippet></ROW><ROW><id>4087714</id><snippet>pp</snippet></ROW><ROW><id>4087714</id><snippet>__future__</snippet></ROW><ROW><id>4087714</id><snippet>pp</snippet></ROW><ROW><id>4087714</id><snippet>pp</snippet></ROW><ROW><id>4087714</id><snippet>pp</snippet></ROW><ROW><id>4087714</id><snippet>pp</snippet></ROW><ROW><id>4087751</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; ff = {'colors': ['yellow', 'pink', 'green'], 'names': ['banana', 'grapefruit', 'apple'], 'blah': ['a','b','c']}

&gt;&gt;&gt; [dict(izip(ff.iterkeys(), v)) for v in izip(*ff.itervalues())]
[{'blah': 'a', 'colors': 'yellow', 'names': 'banana'},
 {'blah': 'b', 'colors': 'pink', 'names': 'grapefruit'},
 {'blah': 'c', 'colors': 'green', 'names': 'apple'}]
</snippet></ROW><ROW><id>4087751</id><snippet>keys</snippet></ROW><ROW><id>4087751</id><snippet>values</snippet></ROW><ROW><id>4087761</id><snippet>{{ some_date|date:"j-M" }}</snippet></ROW><ROW><id>4087941</id><snippet>void GetNodeList()
{
    var connection = this.doc.Descendants("Connections").First();
    var cons = connection.Elements("Connection");

    foreach (var con in cons)
    {
        var id = (string)con.Attribute("ID");
    }
}
</snippet></ROW><ROW><id>4088149</id><snippet>set</snippet></ROW><ROW><id>4088149</id><snippet>import set
os_list = os.listdir(sys.argv[1].strip() + "/")
for file in set(os_list) &amp; set(filelist):
    #...
</snippet></ROW><ROW><id>4088149</id><snippet>import random
import timeit

l = [random.randint(1,10000) for i in range(1000)]
l2 = [random.randint(1,10000) for i in range(1000)]

def f1():
    l3 = []
    for i in l:
        if i in l2:
            l3.append(i)
    return l3

def f2():
    l3 = []
    for i in set(l) &amp; set(l2):
        l3.append(i)
    return l3

t1 = timeit.Timer('f1()', 'from __main__ import f1')
print t1.timeit(100) #2.0850549985

t2 = timeit.Timer('f2()', 'from __main__ import f2')
print t2.timeit(100) #0.0162533142857
</snippet></ROW><ROW><id>4088233</id><snippet>if (x % 5 == 3 and y % 5 &gt; 1) or (y % 5 == 3 and x % 5 &gt; 1): 
</snippet></ROW><ROW><id>4088333</id><snippet>&gt;&gt;&gt; d = { "foo": 4, "bar": 2, "quux": 3 }
&gt;&gt;&gt; sorted(d.items(), key=lambda item: item[1])
</snippet></ROW><ROW><id>4088333</id><snippet>[('bar', 2), ('quux', 3), ('foo', 4)]
</snippet></ROW><ROW><id>4088333</id><snippet>&gt;&gt;&gt; [pair[0] for pair in sorted(d.items(), key=lambda item: item[1])]
</snippet></ROW><ROW><id>4088333</id><snippet>['bar', 'quux', 'foo']
</snippet></ROW><ROW><id>4088567</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>4088567</id><snippet>print datetime.strptime(pages[1]['dateCreated'],'%Y%m%dT%H:%M:%S')
</snippet></ROW><ROW><id>4088580</id><snippet>import random
from pylab import *
from datetime import *
N = 60
t0 = datetime.combine(date.today(), time(7,0,0))
delta_t = timedelta(minutes=1)
x_axis = t0 + arange(N)*delta_t
plot(x_axis, random(N))
show()
</snippet></ROW><ROW><id>4088616</id><snippet>for key in dict1.keys():
    for a,b in zip(dict1[key],dict2[key]):
        if a.some_function() == b.some_function():
           #do something
</snippet></ROW><ROW><id>4088616</id><snippet>zip</snippet></ROW><ROW><id>4088616</id><snippet>izip</snippet></ROW><ROW><id>4088616</id><snippet>collections</snippet></ROW><ROW><id>4088706</id><snippet>input</snippet></ROW><ROW><id>4088742</id><snippet>import itertools

a = [(1, 'a'), (1, 'b'), (2, 'c')]

# groupby need sorted value so sorted in case
a.sort(key=lambda x:x[0])

for i, j in itertools.groupby(a, key=lambda x:x[0]):
    print i, [k[1] for k in j]
</snippet></ROW><ROW><id>4088742</id><snippet>1 ['a', 'b']
2 ['c']
</snippet></ROW><ROW><id>4088755</id><snippet>__iadd__</snippet></ROW><ROW><id>4088755</id><snippet>a += 5
</snippet></ROW><ROW><id>4088755</id><snippet>a = a + 5
</snippet></ROW><ROW><id>4088755</id><snippet>__iadd__</snippet></ROW><ROW><id>4088755</id><snippet>a = a.__add__( 5 )
</snippet></ROW><ROW><id>4088755</id><snippet>__add__</snippet></ROW><ROW><id>4089097</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>4089097</id><snippet>minidom</snippet></ROW><ROW><id>4089097</id><snippet>dict</snippet></ROW><ROW><id>4089097</id><snippet>root = {
    "foo1": { "bar1": "spam", "bar2": "ham"},
    "foo2": { "baz1": "spam", "baz2": "ham"},
}
</snippet></ROW><ROW><id>4089097</id><snippet>BaseNode</snippet></ROW><ROW><id>4089097</id><snippet>BaseNode.serialise</snippet></ROW><ROW><id>4089097</id><snippet>serialise</snippet></ROW><ROW><id>4089097</id><snippet>json</snippet></ROW><ROW><id>4089097</id><snippet>JSONEncoder</snippet></ROW><ROW><id>4089097</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; class ComplexEncoder(json.JSONEncoder):
...     def default(self, obj):
...         if isinstance(obj, complex):
...             return [obj.real, obj.imag]
...         return json.JSONEncoder.default(self, obj)
...
&gt;&gt;&gt; dumps(2 + 1j, cls=ComplexEncoder)
'[2.0, 1.0]'
&gt;&gt;&gt; ComplexEncoder().encode(2 + 1j)
'[2.0, 1.0]'
&gt;&gt;&gt; list(ComplexEncoder().iterencode(2 + 1j))
['[', '2.0', ', ', '1.0', ']']
</snippet></ROW><ROW><id>4089779</id><snippet>frame1 = Frame(master); frame1.grid(row=0,columnspan=3)
</snippet></ROW><ROW><id>4090115</id><snippet>&gt;&gt;&gt; dt=numpy.dtype([('outer','(3,)&lt;i4'),
...                 ('outer2',[('inner','(10,)&lt;i4'),('inner2','f8')])])
&gt;&gt;&gt; a=numpy.array([((1,2,3),((10,11,12,13,14,15,16,17,18,19),3.14)),
...                ((4,5,6),((-1,-2,-3,-4,-5,-6,-7,-8,-9,-20),6.28))],dt)
&gt;&gt;&gt; numpy.save('1.npy', a)
</snippet></ROW><ROW><id>4090115</id><snippet>93 4E 55 4D 50 59                      magic ("\x93NUMPY")
01                                     major version (1)
00                                     minor version (0)

96 00                                  HEADER_LEN (0x0096 = 150)
7B 27 64 65 73 63 72 27 
3A 20 5B 28 27 6F 75 74 
65 72 27 2C 20 27 3C 69 
34 27 2C 20 28 33 2C 29 
29 2C 20 28 27 6F 75 74 
65 72 32 27 2C 20 5B 28 
27 69 6E 6E 65 72 27 2C 
20 27 3C 69 34 27 2C 20 
28 31 30 2C 29 29 2C 20 
28 27 69 6E 6E 65 72 32                Header, describing the data structure
27 2C 20 27 3C 66 38 27                "{'descr': [('outer', '&lt;i4', (3,)),
29 5D 29 5D 2C 20 27 66                            ('outer2', [
6F 72 74 72 61 6E 5F 6F                               ('inner', '&lt;i4', (10,)), 
72 64 65 72 27 3A 20 46                               ('inner2', '&lt;f8')]
61 6C 73 65 2C 20 27 73                            )],
68 61 70 65 27 3A 20 28                  'fortran_order': False,
32 2C 29 2C 20 7D 20 20                  'shape': (2,), }"
20 20 20 20 20 20 20 20 
20 20 20 20 20 0A 

01 00 00 00 02 00 00 00 03 00 00 00    (1,2,3)
0A 00 00 00 0B 00 00 00 0C 00 00 00
0D 00 00 00 0E 00 00 00 0F 00 00 00
10 00 00 00 11 00 00 00 12 00 00 00
13 00 00 00                            (10,11,12,13,14,15,16,17,18,19)
1F 85 EB 51 B8 1E 09 40                3.14

04 00 00 00 05 00 00 00 06 00 00 00    (4,5,6)
FF FF FF FF FE FF FF FF FD FF FF FF
FC FF FF FF FB FF FF FF FA FF FF FF
F9 FF FF FF F8 FF FF FF F7 FF FF FF 
EC FF FF FF                            (-1,-2,-3,-4,-5,-6,-7,-8,-9,-20)
1F 85 EB 51 B8 1E 19 40                6.28
</snippet></ROW><ROW><id>4090163</id><snippet>import httplib
from httplib import HTTP
from urlparse import urlparse

def checkUrl(url):
    p = urlparse(url)
    h = HTTP(p[1])
    h.putrequest('HEAD', p[2])
    h.endheaders()
    return h.getreply()[0] == httplib.OK
</snippet></ROW><ROW><id>4090275</id><snippet>        cn = pyodbc.connect("DSN=myDBName")
        cn.autocommit = True
        cr = cn.cursor()
        cr.execute("set nocount on")
        cr.execute("exec myStoredProc")
        ...
        cr.close()
        cn.close()
</snippet></ROW><ROW><id>4090443</id><snippet>def __init__(self, user):
    self.user = user
    super(BaseForm, self).__init__()
</snippet></ROW><ROW><id>4090443</id><snippet>user</snippet></ROW><ROW><id>4090443</id><snippet>self.user</snippet></ROW><ROW><id>4090443</id><snippet>active = forms.BooleanField(widget=forms.HiddenInput)
</snippet></ROW><ROW><id>4090443</id><snippet>def save (self):
    super(BaseForm, self).save()
    if user.is_admin():
        self.instance.active=True
    super(BaseForm, self).save()
</snippet></ROW><ROW><id>4090710</id><snippet>(dolist (hook (list 'c-mode-common-hook
            'emacs-lisp-mode-hook
            'java-mode-hook
            'lisp-mode-hook
            'perl-mode-hook
            'sh-mode-hook))
  (add-hook hook 'my-hideshow-hook))

(defun my-hideshow-hook ()
  "thisandthat."
  (interactive)
  (progn (require 'hideshow-org)
     (global-set-key (kbd "C-c h") 'hs-org/minor-mode)
     (hs-org/minor-mode)))

(defadvice goto-line (after expand-after-goto-line activate compile)
  "hideshow-expand affected block when using goto-line in a collapsed buffer"
  (save-excursion
    (hs-show-block)))
</snippet></ROW><ROW><id>4090749</id><snippet>'break'</snippet></ROW><ROW><id>4090749</id><snippet>def my_tab_handler(event):
    ... # handle tab event
    return 'break' # interrupts event propagation to default handlers
</snippet></ROW><ROW><id>4090948</id><snippet>Class User(Base):
    name = Column(String, info={verbose_name: 'Enter your username',})
    password = Column(String, info={verbose_name: 'Enter your password',})
</snippet></ROW><ROW><id>4090974</id><snippet>class MyProtocol(DatagramProtocol):
    def datagramReceived(self, datagram, addr):
        # use self.transport.write to send stuff
        some_where = ('192.168.0.1',5001)
        self.transport.write( datagram, some_where )
</snippet></ROW><ROW><id>4091021</id><snippet>class B(gtk.Window):
   def __init__(self, callback):
      gtk.Window.__init__(self)

      self.callback = callback
      # Create components:
      # self.entry, self.ok_button ...

      self.ok_button.connect("clicked", self.clicked)

   def clicked(self, button):
      self.callback(self.entry.get_text())

class A(gtk.Window):
   def create_popup(self):
      popup = B(self.popup_callback)
      popup.show()

   def popup_callback(self, text):
       # Update menu with new text
       # ...
</snippet></ROW><ROW><id>4091084</id><snippet>def your_function(*args):
    # 'args' is now a list that contains all of the arguments
    ...do stuff...

input_args = user_string.split()
your_function(*input_args) # Convert a list into the arguments to a function
</snippet></ROW><ROW><id>4091168</id><snippet>.update_idletasks()</snippet></ROW><ROW><id>4091264</id><snippet>plt.plot(dates,values)</snippet></ROW><ROW><id>4091264</id><snippet>dates</snippet></ROW><ROW><id>4091264</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4091264</id><snippet>'%Y-%m-%d'</snippet></ROW><ROW><id>4091264</id><snippet>ax=plt.gca()
xfmt = md.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
</snippet></ROW><ROW><id>4091264</id><snippet>datetime.datetime</snippet></ROW><ROW><id>4091264</id><snippet>plt.plot</snippet></ROW><ROW><id>4091264</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
import datetime as dt
import time

n=20
duration=1000
now=time.mktime(time.localtime())
timestamps=np.linspace(now,now+duration,n)
dates=[dt.datetime.fromtimestamp(ts) for ts in timestamps]
values=np.sin((timestamps-now)/duration*2*np.pi)
plt.subplots_adjust(bottom=0.2)
plt.xticks( rotation=25 )
ax=plt.gca()
xfmt = md.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
plt.plot(dates,values)
plt.show()
</snippet></ROW><ROW><id>4091264</id><snippet>plt.plot</snippet></ROW><ROW><id>4091264</id><snippet>matplotlib.dates.date2num</snippet></ROW><ROW><id>4091264</id><snippet>import matplotlib.pyplot as plt
import matplotlib.dates as md
import numpy as np
import datetime as dt
import time

n=20
duration=1000
now=time.mktime(time.localtime())
timestamps=np.linspace(now,now+duration,n)
dates=[dt.datetime.fromtimestamp(ts) for ts in timestamps]
datenums=md.date2num(dates)
values=np.sin((timestamps-now)/duration*2*np.pi)
plt.subplots_adjust(bottom=0.2)
plt.xticks( rotation=25 )
ax=plt.gca()
xfmt = md.DateFormatter('%Y-%m-%d %H:%M:%S')
ax.xaxis.set_major_formatter(xfmt)
plt.plot(datenums,values)
plt.show()
</snippet></ROW><ROW><id>4091270</id><snippet>shell=True</snippet></ROW><ROW><id>4091364</id><snippet>import threading, sys, socket, signal, time

def startserver():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', 12345))
    s.listen(1)
    while True:
        csock, caddr = s.accept()
        csock.sendall('Get off my lawn kids...\n')
        csock.close()

if __name__ == '__main__':
    try:
        t = threading.Thread(target=startserver)
        t.start()

        # Wait forever, so we can receive KeyboardInterrupt.
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print "^C received"
        sys.exit(1)

    # We never get here.
    raise RuntimeError, "not reached"
</snippet></ROW><ROW><id>4091453</id><snippet>setFontFamily</snippet></ROW><ROW><id>4091453</id><snippet>    except:
        if text=='': self.browser.clear()
</snippet></ROW><ROW><id>4091453</id><snippet>except:</snippet></ROW><ROW><id>4091453</id><snippet>BaseException</snippet></ROW><ROW><id>4091453</id><snippet>SystemExit</snippet></ROW><ROW><id>4091453</id><snippet>except Exception:</snippet></ROW><ROW><id>4091453</id><snippet>Exception</snippet></ROW><ROW><id>4091453</id><snippet>if text==''</snippet></ROW><ROW><id>4091453</id><snippet>if not text</snippet></ROW><ROW><id>4091495</id><snippet>numpy.fromstring</snippet></ROW><ROW><id>4091495</id><snippet>import numpy as np
s = '\x01\x05\x03\xff'
a = np.fromstring(s, dtype='uint8')
</snippet></ROW><ROW><id>4091495</id><snippet>a</snippet></ROW><ROW><id>4091495</id><snippet>array([ 1, 5, 3, 255])</snippet></ROW><ROW><id>4091609</id><snippet>with myLock:
    doSomething()
</snippet></ROW><ROW><id>4091618</id><snippet>def save(self, *args, **kwargs):
    if not self.quote_year and not self.quote_id:
        self.quote_year = datetime.date.today().year % 100
        quote_ids = self.objects.filter(quote_year = self.quote_year).order_by('-quote_id')
        self.quote_id = 1
        if quote_ids.exists():
            self.quote_id = quote_ids[0].quote_id + 1
    super(Project, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>4091618</id><snippet>@property
def quote(self):
    return '%02d-%05d' % (self.quote_year, self.quote_id)
</snippet></ROW><ROW><id>4091685</id><snippet>print()</snippet></ROW><ROW><id>4091685</id><snippet>print()</snippet></ROW><ROW><id>4091685</id><snippet>def print(*args)</snippet></ROW><ROW><id>4091685</id><snippet>__builtins__.print()</snippet></ROW><ROW><id>4091685</id><snippet>print()</snippet></ROW><ROW><id>4091743</id><snippet>defaultdict</snippet></ROW><ROW><id>4091743</id><snippet>import collections

result = collections.defaultdict(list)

for d in dict_list:
    result[d['event']].append(d)

result_list = result.values()
</snippet></ROW><ROW><id>4091743</id><snippet>dict</snippet></ROW><ROW><id>4091743</id><snippet>dict(d)</snippet></ROW><ROW><id>4091743</id><snippet>eval</snippet></ROW><ROW><id>4092125</id><snippet>.join()</snippet></ROW><ROW><id>4092125</id><snippet>.start()</snippet></ROW><ROW><id>4092160</id><snippet>def find_paws(data, smooth_radius=5, threshold=0.0001):
    data = sp.ndimage.uniform_filter(data, smooth_radius)
    thresh = data &gt; threshold
    filled = sp.ndimage.morphology.binary_fill_holes(thresh)
    coded_paws, num_paws = sp.ndimage.label(filled)
    data_slices = sp.ndimage.find_objects(coded_paws)
    return object_slices
</snippet></ROW><ROW><id>4092160</id><snippet>structure</snippet></ROW><ROW><id>4092160</id><snippet>scipy.ndimage.morphology</snippet></ROW><ROW><id>4092160</id><snippet>thresh = data &gt; value</snippet></ROW><ROW><id>4092160</id><snippet>filled = sp.ndimage.morphology.binary_fill_holes(thresh)</snippet></ROW><ROW><id>4092160</id><snippet>coded_paws, num_paws = sp.ndimage.label(filled)</snippet></ROW><ROW><id>4092160</id><snippet>data_slices = sp.ndimage.find_objects(coded_paws)</snippet></ROW><ROW><id>4092160</id><snippet>slice</snippet></ROW><ROW><id>4092160</id><snippet>[data[x] for x in data_slices]</snippet></ROW><ROW><id>4092160</id><snippet>import numpy as np
import scipy as sp
import scipy.ndimage

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

def animate(input_filename):
    """Detects paws and animates the position and raw data of each frame
    in the input file"""
    # With matplotlib, it's much, much faster to just update the properties
    # of a display object than it is to create a new one, so we'll just update
    # the data and position of the same objects throughout this animation...

    infile = paw_file(input_filename)

    # Since we're making an animation with matplotlib, we need 
    # ion() instead of show()...
    plt.ion()
    fig = plt.figure()
    ax = fig.add_subplot(111)
    fig.suptitle(input_filename)

    # Make an image based on the first frame that we'll update later
    # (The first frame is never actually displayed)
    im = ax.imshow(infile.next()[1])

    # Make 4 rectangles that we can later move to the position of each paw
    rects = [Rectangle((0,0), 1,1, fc='none', ec='red') for i in range(4)]
    [ax.add_patch(rect) for rect in rects]

    title = ax.set_title('Time 0.0 ms')

    # Process and display each frame
    for time, frame in infile:
        paw_slices = find_paws(frame)

        # Hide any rectangles that might be visible
        [rect.set_visible(False) for rect in rects]

        # Set the position and size of a rectangle for each paw and display it
        for slice, rect in zip(paw_slices, rects):
            dy, dx = slice
            rect.set_xy((dx.start, dy.start))
            rect.set_width(dx.stop - dx.start + 1)
            rect.set_height(dy.stop - dy.start + 1)
            rect.set_visible(True)

        # Update the image data and title of the plot
        title.set_text('Time %0.2f ms' % time)
        im.set_data(frame)
        im.set_clim([frame.min(), frame.max()])
        fig.canvas.draw()

def find_paws(data, smooth_radius=5, threshold=0.0001):
    """Detects and isolates contiguous regions in the input array"""
    # Blur the input data a bit so the paws have a continous footprint 
    data = sp.ndimage.uniform_filter(data, smooth_radius)
    # Threshold the blurred data (this needs to be a bit &gt; 0 due to the blur)
    thresh = data &gt; threshold
    # Fill any interior holes in the paws to get cleaner regions...
    filled = sp.ndimage.morphology.binary_fill_holes(thresh)
    # Label each contiguous paw
    coded_paws, num_paws = sp.ndimage.label(filled)
    # Isolate the extent of each paw
    data_slices = sp.ndimage.find_objects(coded_paws)
    return data_slices

def paw_file(filename):
    """Returns a iterator that yields the time and data in each frame
    The infile is an ascii file of timesteps formatted similar to this:

    Frame 0 (0.00 ms)
    0.0 0.0 0.0
    0.0 0.0 0.0

    Frame 1 (0.53 ms)
    0.0 0.0 0.0
    0.0 0.0 0.0
    ...
    """
    with open(filename) as infile:
        while True:
            try:
                time, data = read_frame(infile)
                yield time, data
            except StopIteration:
                break

def read_frame(infile):
    """Reads a frame from the infile."""
    frame_header = infile.next().strip().split()
    time = float(frame_header[-2][1:])
    data = []
    while True:
        line = infile.next().strip().split()
        if line == []:
            break
        data.append(line)
    return time, np.array(data, dtype=np.float)

if __name__ == '__main__':
    animate('Overlapping paws.bin')
    animate('Grouped up paws.bin')
    animate('Normal measurement.bin')
</snippet></ROW><ROW><id>4092160</id><snippet># This uses functions (and imports) in the previous code example!!
def paw_regions(infile):
    # Read in and stack all data together into a 3D array
    data, time = [], []
    for t, frame in paw_file(infile):
        time.append(t)
        data.append(frame)
    data = np.dstack(data)
    time = np.asarray(time)

    # Find and label the paw impacts
    data_slices, coded_paws = find_paws(data, smooth_radius=4)

    # Sort by time of initial paw impact... This way we can determine which
    # paws are which relative to the first paw with a simple modulo 4.
    # (Assuming a 4-legged dog, where all 4 paws contacted the sensor)
    data_slices.sort(key=lambda dat_slice: dat_slice[2].start)

    # Plot up a simple analysis
    fig = plt.figure()
    ax1 = fig.add_subplot(2,1,1)
    annotate_paw_prints(time, data, data_slices, ax=ax1)
    ax2 = fig.add_subplot(2,1,2)
    plot_paw_impacts(time, data_slices, ax=ax2)
    fig.suptitle(infile)

def plot_paw_impacts(time, data_slices, ax=None):
    if ax is None:
        ax = plt.gca()

    # Group impacts by paw...
    for i, dat_slice in enumerate(data_slices):
        dx, dy, dt = dat_slice
        paw = i%4 + 1
        # Draw a bar over the time interval where each paw is in contact
        ax.barh(bottom=paw, width=time[dt].ptp(), height=0.2, 
                left=time[dt].min(), align='center', color='red')
    ax.set_yticks(range(1, 5))
    ax.set_yticklabels(['Paw 1', 'Paw 2', 'Paw 3', 'Paw 4'])
    ax.set_xlabel('Time (ms) Since Beginning of Experiment')
    ax.yaxis.grid(True)
    ax.set_title('Periods of Paw Contact')

def annotate_paw_prints(time, data, data_slices, ax=None):
    if ax is None:
        ax = plt.gca()

    # Display all paw impacts (sum over time)
    ax.imshow(data.sum(axis=2).T)

    # Annotate each impact with which paw it is
    # (Relative to the first paw to hit the sensor)
    x, y = [], []
    for i, region in enumerate(data_slices):
        dx, dy, dz = region
        # Get x,y center of slice...
        x0 = 0.5 * (dx.start + dx.stop)
        y0 = 0.5 * (dy.start + dy.stop)
        x.append(x0); y.append(y0)

        # Annotate the paw impacts         
        ax.annotate('Paw %i' % (i%4 +1), (x0, y0),  
            color='red', ha='center', va='bottom')

    # Plot line connecting paw impacts
    ax.plot(x,y, '-wo')
    ax.axis('image')
    ax.set_title('Order of Steps')
</snippet></ROW><ROW><id>4092249</id><snippet>def tag_chain(tag, known=[]):
  # ...
</snippet></ROW><ROW><id>4092249</id><snippet>known=[]</snippet></ROW><ROW><id>4092249</id><snippet>def tag_chain(tag, known=None):
    if known is None:
        known = []
    # ...
</snippet></ROW><ROW><id>4092249</id><snippet>known</snippet></ROW><ROW><id>4092550</id><snippet>new_index = max(0, min(new_index, len(mylist)-1))
</snippet></ROW><ROW><id>4092666</id><snippet>arch</snippet></ROW><ROW><id>4092666</id><snippet>/usr/bin/arch</snippet></ROW><ROW><id>4092666</id><snippet>#!/usr/bin/arch -x86_64 /usr/bin/python2.6
</snippet></ROW><ROW><id>4092666</id><snippet>env</snippet></ROW><ROW><id>4092666</id><snippet>/usr/bin</snippet></ROW><ROW><id>4092666</id><snippet>#!/usr/bin/env arch -x86_64 /usr/bin/python2.6
</snippet></ROW><ROW><id>4092675</id><snippet>setFillAlpha</snippet></ROW><ROW><id>4092675</id><snippet>setStrokeAlpha</snippet></ROW><ROW><id>4092675</id><snippet>pdfdoc.py</snippet></ROW><ROW><id>4092675</id><snippet>PDF_VERSION_DEFAULT = (1, 3)
</snippet></ROW><ROW><id>4092675</id><snippet>PDF_VERSION_DEFAULT = (1, 4)
</snippet></ROW><ROW><id>4092728</id><snippet>toString(enc)</snippet></ROW><ROW><id>4092728</id><snippet>enc</snippet></ROW><ROW><id>4092799</id><snippet>float</snippet></ROW><ROW><id>4092799</id><snippet>floats</snippet></ROW><ROW><id>4092799</id><snippet>prettyfloats</snippet></ROW><ROW><id>4092799</id><snippet># Perform all our computations using standard floats.
results = compute_huge_numbers(42)
# Switch to prettyfloats for printing.
print(map(prettyfloat, results))
</snippet></ROW><ROW><id>4092799</id><snippet>prettyfloat</snippet></ROW><ROW><id>4092799</id><snippet>float</snippet></ROW><ROW><id>4092799</id><snippet>float</snippet></ROW><ROW><id>4092799</id><snippet>def prettyfloat(number):
    return "%0.2f" % number  # Works the same.
</snippet></ROW><ROW><id>4092894</id><snippet>article
    id
    title_id
    content

title
    id
    title
</snippet></ROW><ROW><id>4092894</id><snippet>INNER JOIN</snippet></ROW><ROW><id>4092894</id><snippet>SELECT
    article.id,
    title.title,
    article.content
FROM article 
INNER JOIN title ON
    title.id = article.title_id
</snippet></ROW><ROW><id>4093011</id><snippet>str.startswith('/')
</snippet></ROW><ROW><id>4093011</id><snippet>str[0] == '/'
</snippet></ROW><ROW><id>4093011</id><snippet>import os.path
os.path.exists(str)
</snippet></ROW><ROW><id>4093011</id><snippet>import os.path

for val in table.values():
    if val.startswith('/') and not os.path.exists(val):
        print "BAD FILE!!! ", val
</snippet></ROW><ROW><id>4093020</id><snippet>localFile = open(url.split('/')[-1], 'wb')
</snippet></ROW><ROW><id>4093037</id><snippet>super()</snippet></ROW><ROW><id>4093037</id><snippet>class MyList(list):
    def __getitem__(self, key):
        return list.__getitem__(self, key-1)
</snippet></ROW><ROW><id>4093037</id><snippet>class MyList(list):
    def __getitem__(self, key):
        return super(MyList, self).__getitem__(key-1)
</snippet></ROW><ROW><id>4093164</id><snippet>ORDER BY</snippet></ROW><ROW><id>4093164</id><snippet>SELECT p.id, p.title, p.time_submitted, SUM(v.score) as num_votes 
  FROM posts p, votes v
 WHERE v.postid = p.id
GROUP BY p.id
ORDER BY 
   (SUM(v.score) - 1) / POW(TIMESTAMPDIFF(HOUR,p.time_submitted,NOW()) + INTERVAL 2 HOUR, 1.8) DESC
LIMIT 100
</snippet></ROW><ROW><id>4093404</id><snippet>import socket
import urllib2

# timeout in seconds
timeout = 10
socket.setdefaulttimeout(timeout)

# this call to urllib2.urlopen now uses the default timeout
# we have set in the socket module
req = urllib2.Request('http://www.voidspace.org.uk')
response = urllib2.urlopen(req)
</snippet></ROW><ROW><id>4093585</id><snippet>def __init__(self, transl_start=None, transl_stop=None, display_id = None, **kwargs)
</snippet></ROW><ROW><id>4093585</id><snippet>None</snippet></ROW><ROW><id>4093585</id><snippet>Range</snippet></ROW><ROW><id>4093585</id><snippet>def __init__(self, start, end):
</snippet></ROW><ROW><id>4093585</id><snippet>DNAFeature</snippet></ROW><ROW><id>4093585</id><snippet>Range</snippet></ROW><ROW><id>4093585</id><snippet>Range.__init__(self, **kwargs)
</snippet></ROW><ROW><id>4093585</id><snippet>p1.GeneModel()</snippet></ROW><ROW><id>4093585</id><snippet>def __init__(self, start, end):
</snippet></ROW><ROW><id>4093585</id><snippet>def __init__(self, start=0, end=10000):
</snippet></ROW><ROW><id>4093585</id><snippet>range</snippet></ROW><ROW><id>4093585</id><snippet>self.start = 0
self.end = 10000
</snippet></ROW><ROW><id>4093586</id><snippet>try:
    input= raw_input
except NameError:
    pass
</snippet></ROW><ROW><id>4093586</id><snippet>raw_input</snippet></ROW><ROW><id>4093586</id><snippet>input</snippet></ROW><ROW><id>4093643</id><snippet>__class__</snippet></ROW><ROW><id>4093643</id><snippet>__dir__</snippet></ROW><ROW><id>4093643</id><snippet>class Foo(object):
    def __init__(self, arg=None):
        self.arg = arg
        print dir(self.__class__) + dir()

    def __dir__(self):
        return [self.arg()]


def dirfoo():
    return ["new thing"]

foo = Foo(dirfoo)

print dir(foo)
</snippet></ROW><ROW><id>4093682</id><snippet>'for' ... I '=' N=103
</snippet></ROW><ROW><id>4093682</id><snippet>F
</snippet></ROW><ROW><id>4093682</id><snippet>F&gt;3.14&lt;3.16
</snippet></ROW><ROW><id>4093940</id><snippet>import sys
from BeautifulSoup import BeautifulSoup as Soup

def parseLog(file):
    file = sys.argv[1]
    handler = open(file).read()
    soup = Soup(handler)
    for message in soup.findAll('message'):
        msg_attrs = dict(message.attrs)
        f_user = message.find('from').user
        f_user_dict = dict(f_user.attrs)
        print "%s: %s [%s @ %s]" % (f_user_dict[u'friendlyname'],
                                    message.find('text').decodeContents(),
                                    msg_attrs[u'date'],
                                    msg_attrs[u'time'])


if __name__ == "__main__":
    parseLog(sys.argv[1])
</snippet></ROW><ROW><id>4094100</id><snippet>import os
target_dir = r"C:\full\path\to\where\you\want\it"

fullname = os.path.join(target_dir,filename)
with open(fullname,"w") as f:
   f.write("&lt;html&gt;....&lt;/html&gt;")

import webbrowser

url = "file://"+fullname.replace("\\","/")
webbrowser.open(url,True,True)
</snippet></ROW><ROW><id>4094174</id><snippet>ls -laZ /var/www
</snippet></ROW><ROW><id>4094174</id><snippet>ls -laZ /home/usr/www
</snippet></ROW><ROW><id>4094174</id><snippet>chcon -R --reference=/var/www /home/usr/www
chmod og+x /home/usr /home/usr/www
</snippet></ROW><ROW><id>4094199</id><snippet>_tmp_attr = { }
</snippet></ROW><ROW><id>4094569</id><snippet>return self.bucket.connection.make_request('PUT', self.bucket.name,......
AttributeError: 'str' object has no attribute 'connection'
</snippet></ROW><ROW><id>4094569</id><snippet>def upload_thumbnail(thumbnail_name,thumbnail_data=None,thumbnail_path=None,bucket=cache_bucket
(),conn=_conn(),notes=None,image_id=None)
</snippet></ROW><ROW><id>4094569</id><snippet>imgpath = s3.upload_thumbnail(thumbnail_name=tools.randomString(10), thumbnail_data=tdata,bucket="fabletest")
</snippet></ROW><ROW><id>4094569</id><snippet>import S3
connection = S3.AWSAuthConnection('your access key', 'your secret key')
buck = connection.create_bucket('mybucketname')
tdata = tools.download("http://farm5.static.flickr.com/4148/5124630813_c11b05e6da_z.jpg")
imgpath = s3.upload_thumbnail(thumbnail_name=tools.randomString(10), thumbnail_data=tdata,bucket=buck, conn=connection)
print imgpath
</snippet></ROW><ROW><id>4094654</id><snippet>inspect.getmro</snippet></ROW><ROW><id>4094654</id><snippet>import inspect
for base_class in inspect.getmro(foo):
    # do something
</snippet></ROW><ROW><id>4094679</id><snippet>
type(object) #gives you the type
</snippet></ROW><ROW><id>4094679</id><snippet>
import types
class foo(object):
    pass
</snippet></ROW><ROW><id>4094802</id><snippet>port install pkgconfig
</snippet></ROW><ROW><id>4094853</id><snippet>def letterbox(f,aspect_ratio=1):
    try:
        im = Image.open(StringIO(f))
        imagex = int(im.size[0])
        imagey = int(im.size[1])
        width = min(imagex, imagey*aspect_ratio)
        height = min(imagex/aspect_ratio, imagey)
        left =(imagex - width)/2
        top = (imagey - height)/2
        box = (left,top,left+width,top+height)
        im = im.crop(box)
        new_file = StringIO()
        im.save(new_file,'JPEG')
        new_file.seek(0)
    except Exception, e:
        pass
    return new_file
</snippet></ROW><ROW><id>4094865</id><snippet>self.request.host</snippet></ROW><ROW><id>4094865</id><snippet>self.request.host_url</snippet></ROW><ROW><id>4095120</id><snippet>import re
a = ["A:30 B: 40 TS:1/1/1990 22:22:22", "A:30 TS:1/1/1990 22:22:22", "A:30 B: 40"]
regex = re.compile(r"^\s*(?:(A)\s*:\s*(\d+))?\s*(?:(B)\s*:\s*(\d+))?\s*(?:(TS)\s*:\s*(.*))?$")
for item in a:
    matches = regex.search(item).groups()
    print {k:v for k,v in zip(matches[::2], matches[1::2]) if k}
</snippet></ROW><ROW><id>4095120</id><snippet>{'A': '30', 'B': '40', 'TS': '1/1/1990 22:22:22'}
{'A': '30', 'TS': '1/1/1990 22:22:22'}
{'A': '30', 'B': '40'}
</snippet></ROW><ROW><id>4095120</id><snippet>^\s*      # match start of string, optional whitespace
(?:       # match the following (optionally, see below)
 (A)      # identifier A --&gt; backreference 1
 \s*:\s*  # optional whitespace, :, optional whitespace
 (\d+)    # any number --&gt; backreference 2
)?        # end of optional group
\s*       # optional whitespace
(?:(B)\s*:\s*(\d+))?\s*  # same with identifier B and number --&gt; backrefs 3 and 4
(?:(TS)\s*:\s*(.*))?     # same with id. TS and anything that follows --&gt; 5 and 6
$         # end of string
</snippet></ROW><ROW><id>4095375</id><snippet>Message.walk()</snippet></ROW><ROW><id>4095375</id><snippet>if msg.is_multipart():
    for part in msg.walk():
        ...
</snippet></ROW><ROW><id>4095375</id><snippet>part.get_payload()</snippet></ROW><ROW><id>4095375</id><snippet>part.get_content_type()</snippet></ROW><ROW><id>4095375</id><snippet>email</snippet></ROW><ROW><id>4095561</id><snippet>print '''
This uses the "here document" syntax to output
multiple lines
'''
</snippet></ROW><ROW><id>4095561</id><snippet>r</snippet></ROW><ROW><id>4095561</id><snippet>r'''....'''</snippet></ROW><ROW><id>4095667</id><snippet>split</snippet></ROW><ROW><id>4095667</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; song = "I     am      the      Walrus"
&gt;&gt;&gt; string.join(string.split(song))
'I am the Walrus'
</snippet></ROW><ROW><id>4095667</id><snippet>&gt;&gt;&gt; string.join(string.split(song,' '))
'I   am    the    Walrus'
</snippet></ROW><ROW><id>4096011</id><snippet>import projA_settings
</snippet></ROW><ROW><id>4096011</id><snippet>import projB_settings
</snippet></ROW><ROW><id>4096029</id><snippet>import collections as co
import itertools as it

def unique(list_):
    return len(set(list_)) == len(list_)

def get_combos(branches):
    by_parent = co.defaultdict(list)

    for branch in branches:
        by_parent[branch.p].append(branch)

    combos = it.product(*by_parent.values())

    return it.ifilter(lambda x: unique([b.c for b in x]), combos)
</snippet></ROW><ROW><id>4096119</id><snippet>name = 'Bob'    
return render.index(name)
</snippet></ROW><ROW><id>4096119</id><snippet>index</snippet></ROW><ROW><id>4096149</id><snippet>time.sleep()</snippet></ROW><ROW><id>4096453</id><snippet>TypeError</snippet></ROW><ROW><id>4096453</id><snippet>ValueError</snippet></ROW><ROW><id>4096453</id><snippet>ApplicationException</snippet></ROW><ROW><id>4096453</id><snippet>RuntimeError</snippet></ROW><ROW><id>4096453</id><snippet>ArgumentNullException</snippet></ROW><ROW><id>4096453</id><snippet>AttributeError</snippet></ROW><ROW><id>4096453</id><snippet>AttributeOutOfRange</snippet></ROW><ROW><id>4096453</id><snippet>ValueError</snippet></ROW><ROW><id>4096453</id><snippet>InvalidOperationException</snippet></ROW><ROW><id>4096687</id><snippet>new.instancemethod</snippet></ROW><ROW><id>4096687</id><snippet>socket._socketobject</snippet></ROW><ROW><id>4096687</id><snippet>__dict__</snippet></ROW><ROW><id>4096687</id><snippet>class Connection:
    def __init__(self, socket, protocol):
        self.socket = socket
        self.protocol = protocol

    def doRead(self):
        try:
            data = self.socket.recv(self.bufferSize)
        except socket.error, se:
            if se.args[0] == EWOULDBLOCK:
                return
            else:
                return main.CONNECTION_LOST
        if not data:
            return main.CONNECTION_DONE
        return self.protocol.dataReceived(data)
</snippet></ROW><ROW><id>4097096</id><snippet>import urllib2
import base64

req = urllib2.Request('http://api.foursquare.com/v1/venue.json?vid=%s' % self.venue_id)
req.add_header('Authorization: Basic ',base64.b64encode('email:password'))
res = urllib2.urlopen(req)
</snippet></ROW><ROW><id>4097151</id><snippet>&gt;&gt;&gt; def index(lst_words, word):
       find = lst_words.index(word)
       return find

&gt;&gt;&gt; x = ['hello', 'foo', 'bar']
&gt;&gt;&gt; index(x, 'bar')
2
</snippet></ROW><ROW><id>4097151</id><snippet>bar</snippet></ROW><ROW><id>4097151</id><snippet>bar</snippet></ROW><ROW><id>4097151</id><snippet>&gt;&gt;&gt; x = ['bar']
&gt;&gt;&gt; type(x)
&lt;type 'list'&gt;
&gt;&gt;&gt; x = 'bar'
&gt;&gt;&gt; type(x)
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>4097151</id><snippet>&gt;&gt;&gt; x = ['hello', 'foo', ['bar']]
&gt;&gt;&gt; index(x, ['bar'])         # since bar is a list not a string
2
</snippet></ROW><ROW><id>4097193</id><snippet>@userreg.route('/mypics',methods=['GET','POST'])
def mypics():    
   if request.method=='POST':
      mydata=MyPics()
      mydata.name=request.form['myname']
      file=request.files['file']
      filedata=file.read()
      if file:
         mydata.pic=db.Blob(filedata)
      mydata.put()
      return redirect(url_for('home'))
   return render_template('mypicform.html')
</snippet></ROW><ROW><id>4097193</id><snippet>@userreg.route('/pic/&lt;name&gt;')
def getpic(name):
     qu=db.Query(MyPics).filter('name =',name).get()
     if qu.pic is None:
         return "hello"
     else:
         mimetype = 'image/png'
         return current_app.response_class(qu.pic,mimetype=mimetype,direct_passthrough=False)
</snippet></ROW><ROW><id>4097219</id><snippet>.get()</snippet></ROW><ROW><id>4097219</id><snippet>.fetch(limit, offset=0)</snippet></ROW><ROW><id>4097280</id><snippet>import pkg_resources
my_data = pkg_resources.resource_string(__name__, "foo.dat")
</snippet></ROW><ROW><id>4097321</id><snippet>from os import urandom

from zope.interface import implements

from twisted.internet.interfaces import IPullProducer

class RandomProducer(object):
    implements(IPullProducer)

    def __init__(self, consumer):
        self.consumer = consumer


    def resumeProducing(self):
        self.consumer.write(urandom(2 ** 16))


    def stopProducing(self):
        pass
</snippet></ROW><ROW><id>4097321</id><snippet>from twisted.internet.protocol import Protocol

class RandomProtocol(Protocol):
    def connectionMade(self):
        self.transport.registerProducer(RandomProducer(self.transport), False)
</snippet></ROW><ROW><id>4097494</id><snippet>try:
    ...
except ValueError as e:
    print(e)
</snippet></ROW><ROW><id>4097608</id><snippet>words</snippet></ROW><ROW><id>4097608</id><snippet>nasty</snippet></ROW><ROW><id>4097608</id><snippet>'CENSORED'</snippet></ROW><ROW><id>4097720</id><snippet>Is this really the best way?
</snippet></ROW><ROW><id>4097720</id><snippet>def normfilter(vecs, min_norm):
    for x,y in vecs:
        n = (x**2.+y**2.)**-0.5
        if min_norm &lt; n:
            yield (x*n,y*n)

normalized = list(normfilter(vectors, 0.4))
</snippet></ROW><ROW><id>4097765</id><snippet>import subprocess
subprocess.Popen(['wget', '-O', MYFILENAME+'.png', 'http://images.websnapr.com/?url='+MYURL+'&amp;size=s&amp;nocache=82']).wait()
</snippet></ROW><ROW><id>4097877</id><snippet>def findAllCapsUrls2(page_contents):
    """ returns a list of URLs that have ALL CAPS text, given
    the HTML from a page. Uses a combo of RE and BeautifulSoup
    to handle malformed pages.
    """
    # get all anchors on page using regex
    p = r'&lt;a\s+href\s*=\s*"([^"]*)"[^&gt;]*&gt;(.*?(?=&lt;/a&gt;))&lt;/a&gt;'
    re_urls = re.compile(p, re.DOTALL)
    all_a = re_urls.findall(page_contents)

    # if the text for the anchor is ALL CAPS then add the link to good_urls
    good_urls = []
    for a in all_a:
        href = a[0]
        a_content = a[1]
        a_soup = BeautifulSoup.BeautifulSoup(a_content)
        text = ''.join([s.strip() for s in a_soup.findAll(text=True) if s])
        if text and text.upper() == text:
            good_urls.append(href)

    return good_urls
</snippet></ROW><ROW><id>4098289</id><snippet>python setup.py fetch --all build --enable-all-extensions install</snippet></ROW><ROW><id>4098294</id><snippet>?</snippet></ROW><ROW><id>4098294</id><snippet>SELECT * FROM table WHERE id = ?</snippet></ROW><ROW><id>4098294</id><snippet>query = "CREATE TABLE IF NOT EXISTS %s (uid INTEGER PRIMARY KEY, title TEXT NOT NULL, duedate INTEGER NOT NULL, description TEXT, archived INTEGER)" % table_name

conn.execute(query)
</snippet></ROW><ROW><id>4098417</id><snippet>print</snippet></ROW><ROW><id>4098445</id><snippet>ip[i][2] == ip[0][2]</snippet></ROW><ROW><id>4098445</id><snippet>result = [ d for d in ip if d[2] == ip[0][2] ]
</snippet></ROW><ROW><id>4098522</id><snippet>update foo
set a = 1,
b = 2
where type = 0
</snippet></ROW><ROW><id>4098522</id><snippet>update foo
set a = 1,
b = 2,
where type = 0
</snippet></ROW><ROW><id>4098528</id><snippet>uri = 'sftp://foo.example.org/a/b/c'</snippet></ROW><ROW><id>4098528</id><snippet>gvfs-mount</snippet></ROW><ROW><id>4098528</id><snippet>f = gio.File(uri)</snippet></ROW><ROW><id>4098528</id><snippet>mount(f)</snippet></ROW><ROW><id>4098528</id><snippet>file_chooser.set_current_folder_uri(uri)</snippet></ROW><ROW><id>4098560</id><snippet>a is b</snippet></ROW><ROW><id>4098560</id><snippet>a</snippet></ROW><ROW><id>4098560</id><snippet>b</snippet></ROW><ROW><id>4098560</id><snippet>a = "x"</snippet></ROW><ROW><id>4098560</id><snippet>"x"</snippet></ROW><ROW><id>4098560</id><snippet>a</snippet></ROW><ROW><id>4098560</id><snippet>a = "a"; b = "a"</snippet></ROW><ROW><id>4098560</id><snippet>a = "a"; b = a</snippet></ROW><ROW><id>4098560</id><snippet>"a"</snippet></ROW><ROW><id>4098560</id><snippet>a is b</snippet></ROW><ROW><id>4098560</id><snippet>a = "x" * 2</snippet></ROW><ROW><id>4098560</id><snippet>a = "xx"</snippet></ROW><ROW><id>4098560</id><snippet>"xx'</snippet></ROW><ROW><id>4098560</id><snippet>a is b</snippet></ROW><ROW><id>4098560</id><snippet>a = "x" * n</snippet></ROW><ROW><id>4098560</id><snippet>"x"</snippet></ROW><ROW><id>4098560</id><snippet>"x"</snippet></ROW><ROW><id>4098560</id><snippet>"xx"</snippet></ROW><ROW><id>4098560</id><snippet>"xx"</snippet></ROW><ROW><id>4098560</id><snippet>a is b</snippet></ROW><ROW><id>4098560</id><snippet>def a1():
    a = "x"
def a2():
    a = "x" * 2
def a3():
    n = 2
    a = "x" * n


import dis
print "a1:"
dis.dis(a1)

print "a2:"
dis.dis(a2)

print "a3:"
dis.dis(a3)
</snippet></ROW><ROW><id>4098560</id><snippet>a1:
  4           0 LOAD_CONST               1 ('x')
              3 STORE_FAST               0 (a)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE
a2:
  6           0 LOAD_CONST               3 ('xx')
              3 STORE_FAST               0 (a)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE
a3:
  8           0 LOAD_CONST               1 (2)
              3 STORE_FAST               0 (n)

  9           6 LOAD_CONST               2 ('x')
              9 LOAD_FAST                0 (n)
             12 BINARY_MULTIPLY
             13 STORE_FAST               1 (a)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</snippet></ROW><ROW><id>4098560</id><snippet>a = intern(a); b = intern(b)</snippet></ROW><ROW><id>4098560</id><snippet>a is b</snippet></ROW><ROW><id>4098560</id><snippet>a == b</snippet></ROW><ROW><id>4098603</id><snippet>ax.xaxis.set_visible(False)</snippet></ROW><ROW><id>4098603</id><snippet>ax</snippet></ROW><ROW><id>4098603</id><snippet>vdsvgsPlot</snippet></ROW><ROW><id>4098603</id><snippet>[]</snippet></ROW><ROW><id>4098603</id><snippet>ax.set_xticklabels([])</snippet></ROW><ROW><id>4098603</id><snippet>set_yticklabels</snippet></ROW><ROW><id>4098603</id><snippet>ax.set_xticks([])</snippet></ROW><ROW><id>4098603</id><snippet>ax.set_yticks([])</snippet></ROW><ROW><id>4098603</id><snippet>suptitle</snippet></ROW><ROW><id>4098603</id><snippet>fig.suptitle('whatever')</snippet></ROW><ROW><id>4098603</id><snippet>f.suptitle...</snippet></ROW><ROW><id>4098603</id><snippet>suptitle</snippet></ROW><ROW><id>4098603</id><snippet>fig.suptitle('This is a title', size=20, horizontalalignment='left', font='Times', color='red')</snippet></ROW><ROW><id>4098890</id><snippet>HTTP/1.1 302 Found
Location: http://www.bad.org.uk/DesktopDefault.aspx
Set-Cookie: Esperantus_Language_bad=en-GB; path=/
Set-Cookie: Esperantus_Language_rainbow=en-GB; path=/
Set-Cookie: PortalAlias=rainbow; path=/
Set-Cookie: refreshed=true; expires=Thu, 04-Nov-2010 16:21:23 GMT; path=/
Set-Cookie: .ASPXAUTH=; expires=Mon, 11-Oct-1999 23:00:00 GMT; path=/; HttpOnly
Set-Cookie: portalroles=; expires=Mon, 11-Oct-1999 23:00:00 GMT; path=/
</snippet></ROW><ROW><id>4098890</id><snippet>urllib2</snippet></ROW><ROW><id>4098890</id><snippet>import urllib2
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
response = opener.open('http://www.bad.org.uk')
print response.read()
</snippet></ROW><ROW><id>4098914</id><snippet>def ls(directory): 
    """full-featured solution, via wrapping find"""
    import os
    files = os.popen4('find %s' % directory)[1].read().rstrip().split('\n')
    files.remove(directory)
    n = len(directory)
    if directory[-1] != os.path.sep:
        n += 1
    files = [f[n:] for f in files] # remove dir prefix
    return [f for f in files if os.path.sep not in f] # remove files in sub-directories
</snippet></ROW><ROW><id>4098938</id><snippet>graph1.clear()</snippet></ROW><ROW><id>4098938</id><snippet>graph2.clear()</snippet></ROW><ROW><id>4098938</id><snippet>import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 6*np.pi, 100)
y = np.sin(x)

# You probably won't need this if you're embedding things in a tkinter plot...
plt.ion()

fig = plt.figure()
ax = fig.add_subplot(111)
line1, = ax.plot(x, y, 'r-') # Returns a tuple of line objects, thus the comma

for phase in np.linspace(0, 10*np.pi, 500):
    line1.set_ydata(np.sin(x + phase))
    fig.canvas.draw()
</snippet></ROW><ROW><id>4099031</id><snippet>katrielalex</snippet></ROW><ROW><id>4099031</id><snippet>import collections
import bisect

class FastTable:

    def __init__(self):
        self.__deque = collections.deque()

    def __len__(self):
        return len(self.__deque)

    def head(self):
        return self.__deque.popleft()

    def tail(self):
        return self.__deque.pop()

    def peek(self):
        obj = self.__deque.pop()
        self.__deque.append(obj)
        return obj

    def insert(self, obj):
        index = bisect.bisect_left(self.__deque, obj)
        self.__deque.rotate(-index)
        self.__deque.appendleft(obj)
        self.__deque.rotate(index)
</snippet></ROW><ROW><id>4099321</id><snippet>lsthours = list()
eName = "start" # initialize to something to start the loop
while eName:
    eName = raw_input("\nPlease enter the employees' first and last name. ")
    if not eName:
        break #loop will exit also when blank name is inserted
    hWork = raw_input("How many hours did they work this week? ")
    hoursWork = int(hWork)
    if hoursWork &lt; 1 or hoursWork &gt; 60:
        print "Employees' can't work less than 1 hour or more than 60 hours!"
        continue #skip

    pRate = raw_input("What is their hourly rate? ")
    payRate = int(pRate)
    if payRate &lt; 6 or payRate &gt; 20:
        print "Employees' wages can't be lower than $6.00 or greater than $20.00!"
        continue #skip
    if hoursWork &lt;= 40:
        grossPay = hoursWork * payRate
    else:
        grossPay = ((hoursWork - 40) * (payRate * 1.5)) + (40 * payRate)
    lsthours.append(grossPay)
    print grossPay
    print lsthours
    ePass = raw_input("Type DONE when finished with employees' information. ")
    if ePass.upper() == "DONE":
        break
</snippet></ROW><ROW><id>4099335</id><snippet>import re
def syllables(word):
    word = word.lower()
    if word.endswith('e'):
        word = word[:-1]
    count = len(re.findall('[aeiou]+', word))
    return count

for word in ('honour', 'decode', 'decodes', 'oiseau', 'pie'):
    print word, syllables(word)
</snippet></ROW><ROW><id>4099335</id><snippet>honour 2
decode 2
decodes 3
oiseau 2
pie 1
</snippet></ROW><ROW><id>4099459</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>4099459</id><snippet>print</snippet></ROW><ROW><id>4099459</id><snippet>for letter in str:
    sys.stdout.write(letter)
    time.sleep(.1)
</snippet></ROW><ROW><id>4099459</id><snippet>end</snippet></ROW><ROW><id>4099459</id><snippet>print(letter, end='')
</snippet></ROW><ROW><id>4100596</id><snippet>from twisted.internet.protocol import Protocol
class Echo(Protocol):
    def dataReceived(self, data):
        self.transport.write(data)
</snippet></ROW><ROW><id>4100596</id><snippet>from twisted.internet.protocol import Factory
from twisted.protocols.portforward import ProxyServer, ProxyFactory
class Balancer(Factory):
    def __init__(self, hostports):
        self.factories = []
        for (host, port) in hostports:
            self.factories.append(ProxyFactory(host, port))
    def buildProtocol(self, addr):
        nextFactory = self.factories.pop(0)
        self.factories.append(nextFactory)
        return nextFactory.buildProtocol(addr)
</snippet></ROW><ROW><id>4100618</id><snippet>apache</snippet></ROW><ROW><id>4100618</id><snippet>chmod a+w django.osqa.log</snippet></ROW><ROW><id>4100618</id><snippet>chown &lt;apache-user&gt; django.osqa.log</snippet></ROW><ROW><id>4100618</id><snippet>chown</snippet></ROW><ROW><id>4100618</id><snippet>www-data</snippet></ROW><ROW><id>4100722</id><snippet>subprocess.call</snippet></ROW><ROW><id>4101247</id><snippet>elif isinstance(offset, (tuple, list)):
    offsets=', '.join(offset)
    self.memcursor.execute('''select all id,matbefore,matafter,name,date 
                                       from main as main where name IN (?)''', [offsets])
</snippet></ROW><ROW><id>4101420</id><snippet>__call__</snippet></ROW><ROW><id>4101420</id><snippet>__add__</snippet></ROW><ROW><id>4101420</id><snippet>&gt;&gt;&gt; class FunctionalFunction(object):
...     def __init__(self, func):
...             self.func = func
...
...     def __call__(self, *args, **kwargs):
...             return self.func(*args, **kwargs)
...
...     def __add__(self, other):
...             def summed(*args, **kwargs):
...                     return self(*args, **kwargs) + other(*args, **kwargs)
...             return summed
...
...     def __mul__(self, other):
...             def composed(*args, **kwargs):
...                     return self(other(*args, **kwargs))
...             return composed
...
&gt;&gt;&gt; triple = FunctionalFunction(lambda x: 3 * x)
&gt;&gt;&gt; times_six = triple + triple
&gt;&gt;&gt; times_six(2)
12
&gt;&gt;&gt; times_nine = triple * triple
&gt;&gt;&gt; times_nine(3)
27
</snippet></ROW><ROW><id>4101420</id><snippet>+</snippet></ROW><ROW><id>4101420</id><snippet>*</snippet></ROW><ROW><id>4101420</id><snippet>&gt;&gt;&gt; from types import MethodType, FunctionType
&gt;&gt;&gt; f = lambda: None
&gt;&gt;&gt; f.__add__ = MethodType(lambda self, other: "summed!", f, FunctionType)
&gt;&gt;&gt; f.__add__(f)
'summed!'
&gt;&gt;&gt; f + f
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'function' and 'function'
</snippet></ROW><ROW><id>4101634</id><snippet>def f():
    x = {'a':'b', 'c':'d', 'e':'d'}
    for l in x:
        if x[l] != 'd': continue
        print x

def f1():
    x = {'a':'b', 'c':'d', 'e':'d'}
    for l in x:
        if x[l] == 'd':
            print x       

import dis
print dis.dis(f)   
print dis.dis(f1)  
</snippet></ROW><ROW><id>4101634</id><snippet>56 POP_TOP             
57 JUMP_ABSOLUTE           34
60 JUMP_FORWARD             1 (to 64)
63 POP_TOP             

64 LOAD_FAST                0 (x)
67 PRINT_ITEM          
68 PRINT_NEWLINE       
69 JUMP_ABSOLUTE           34
72 POP_BLOCK           
73 LOAD_CONST               0 (None)
76 RETURN_VALUE  
</snippet></ROW><ROW><id>4101634</id><snippet>56 POP_TOP             

57 LOAD_FAST                0 (x)
60 PRINT_ITEM          
61 PRINT_NEWLINE       
62 JUMP_ABSOLUTE           34
65 POP_TOP             
66 JUMP_ABSOLUTE           34
69 POP_BLOCK           
70 LOAD_CONST               0 (None)
73 RETURN_VALUE 
</snippet></ROW><ROW><id>4101646</id><snippet>Book</snippet></ROW><ROW><id>4101646</id><snippet>bookdescription</snippet></ROW><ROW><id>4101646</id><snippet>StringProperty</snippet></ROW><ROW><id>4101646</id><snippet>StringProperty.validate()</snippet></ROW><ROW><id>4101646</id><snippet>Book</snippet></ROW><ROW><id>4101731</id><snippet>&gt;&gt;&gt; import fractions
&gt;&gt;&gt; fractions.Fraction("1")
Fraction(1, 1)
&gt;&gt;&gt; fractions.Fraction("1/2")
Fraction(1, 2)
</snippet></ROW><ROW><id>4101731</id><snippet>fraction</snippet></ROW><ROW><id>4101731</id><snippet>float</snippet></ROW><ROW><id>4101777</id><snippet>input = ((c_char * 4) * 2)()
input[0].value = "str"
input[0][0] == "s"
input[0][1] == "t" # and so on...
</snippet></ROW><ROW><id>4101777</id><snippet>&gt;&gt;&gt; a =((c_char * 4) * 2)()
&gt;&gt;&gt; a
&lt;__main__.c_char_Array_4_Array_2 object at 0x9348d1c&gt;
&gt;&gt;&gt; a[0]
&lt;__main__.c_char_Array_4 object at 0x9348c8c&gt;
&gt;&gt;&gt; a[0].raw
'\x00\x00\x00\x00'
&gt;&gt;&gt; a[0].value
''
&gt;&gt;&gt; a[0].value = "str"
&gt;&gt;&gt; a[0]
&lt;__main__.c_char_Array_4 object at 0x9348c8c&gt;
&gt;&gt;&gt; a[0].value
'str'
&gt;&gt;&gt; a[0].raw
'str\x00'
&gt;&gt;&gt; a[1].value
''
&gt;&gt;&gt; a[0][0]
's'
&gt;&gt;&gt; a[0][0] = 'x'
&gt;&gt;&gt; a[0].value
'xtr'
</snippet></ROW><ROW><id>4101840</id><snippet>websocket.py</snippet></ROW><ROW><id>4101840</id><snippet>websocket</snippet></ROW><ROW><id>4101840</id><snippet>websocket.pyc</snippet></ROW><ROW><id>4102276</id><snippet>import</snippet></ROW><ROW><id>4102276</id><snippet>import sys, traceback

class ImportDebugger:
    def find_module(self, fullname, path=None):
        print "Attempting to import %s:" % fullname
        traceback.print_stack()

sys.meta_path.insert(0, ImportDebugger())
</snippet></ROW><ROW><id>4102354</id><snippet>function</snippet></ROW><ROW><id>4102354</id><snippet>(Pdb) objgraph.at(3510928)
&lt;cell at 0x359290: dict object at 0x3849c0&gt;
</snippet></ROW><ROW><id>4102354</id><snippet>(Pdb) objgraph.at(0x3849c0)

     {(&lt;frame object at 0x97a288&gt;, '/lib/python26.zip/logging/__init__.py'): &lt;module 'logging' from '/lib/python26.zip/logging/__init__.py'&gt;,
     (&lt;frame object at 0x896288&gt;, '/lib/python26.zip/logging/__init__.py'): &lt;module 'logging' from '/lib/python26.zip/logging/__init__.py'&gt;,
     (&lt;frame object at 0xa621b0&gt;, '/lib/python26.zip/logging/__init__.py'): &lt;module 'logging' from '/lib/python26.zip/logging/__init__.py'&gt;,
     (&lt;frame object at 0x11266e8&gt;, '/lib/python26.zip/logging/__init__.py'): &lt;module 'logging' from '/lib/python26.zip/logging/__init__.py'&gt;,
    ...}
</snippet></ROW><ROW><id>4102354</id><snippet>(Pdb) inspect.getouterframes(objgraph.at(0x97a288))
[(&lt;frame object at 0x97a288&gt;, '/lib/python26.zip/logging/__init__.py', 1028, 'debug', ['            self._log(DEBUG, msg, args, **kwargs)\n'], 0),
 (&lt;frame object at 0x794040&gt;, '/lib/python26.zip/logging/__init__.py', 1505, 'debug', ['    root.debug(*((msg,)+args), **kwargs)\n'], 0),
 (&lt;frame object at 0x794e58&gt;, '/mmc/src/core/controller/main.py', 1046, '__startCharge', ['            self.chargeLock.release()\n'], 0),
 (&lt;frame object at 0x5c4260&gt;, '/mmc/src/core/controller/main.py', 1420, 'watchScheduleStartChargeCondition', ['                        ret = self.__startCharge(0, eventCode=eventCode)\n'], 0),
 (&lt;frame object at 0x5c0dd0&gt;, '/home/ephibian/Python2/_install/lib/python2.6/threading.py', 484, 'run', None, None),
 (&lt;frame object at 0x5c3b48&gt;, '/home/ephibian/Python2/_install/lib/python2.6/threading.py', 532, '__bootstrap_inner', None, None),
 (&lt;frame object at 0x218170&gt;, '/home/ephibian/Python2/_install/lib/python2.6/threading.py', 504, '__bootstrap', None, None)]
</snippet></ROW><ROW><id>4102360</id><snippet>glib.timeout_add</snippet></ROW><ROW><id>4102481</id><snippet>set ANSI_NULLS ON
set QUOTED_IDENTIFIER ON
go

alter procedure [dbo].[TEST0]
    @FIELD0             varchar(200) 
as
begin
    set nocount on &lt;=============================add this
    declare @exist varchar(MAX)

    set @exist = (select top 1 [FIELD0] from [TABLE] where [FIELD0] = @FIELD0)

    if @exist is null
    begin
        insert into [TABLE] ([FIELD0],[FIELD1],[FIELD2]) values (@FIELD0,'FIELD1','FIELD2')

        select top 1 [FIELD0] from [TABLE]
        where 
            [FIELD0] = @FIELD0
    end
    else
        select top 1 [FIELD0] from [TABLE] where [FIELD0] = @FIELD0 
    set nocount off &lt;=============================add this
end
</snippet></ROW><ROW><id>4102525</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = """$$
foo
bar
$$"""
&gt;&gt;&gt; re.sub(r"\$\$([^\$]+)\$\$", r"&lt;% tex \1 %&gt;", t, re.M)
'&lt;% tex \nfoo\nbar\n %&gt;'
</snippet></ROW><ROW><id>4102600</id><snippet>nose</snippet></ROW><ROW><id>4102600</id><snippet>nose.tools.assert_almost_equal</snippet></ROW><ROW><id>4102600</id><snippet>numpy</snippet></ROW><ROW><id>4102600</id><snippet>numpy.allclose</snippet></ROW><ROW><id>4102625</id><snippet>:</snippet></ROW><ROW><id>4102625</id><snippet>import sys, os, glob

dir_path = sys.argv[1]
if dir_path[-1] != os.sep: dir_path+=os.sep

file_list = glob.glob(dir_path+'*.txt') #use standard *NIX wildcards to get your file names, in this case, all the files with a .txt extension

with open('out_file.csv', 'w') as out_file:
    for filename in file_list:
        with open(filename, 'r') as in_file:
            for line in in_file:
                if 'STRING=SOME_STRING' in line:
                    out_file.write(line.split(':')[0]+'\n') 
</snippet></ROW><ROW><id>4102625</id><snippet>python extract_paths.py path/to/directory</snippet></ROW><ROW><id>4102625</id><snippet>out_file.csv</snippet></ROW><ROW><id>4102953</id><snippet>try:
    open(filename, 'w')
except OSError:
    # handle error here
</snippet></ROW><ROW><id>4103059</id><snippet>temp_variable</snippet></ROW><ROW><id>4103059</id><snippet>tmp</snippet></ROW><ROW><id>4103059</id><snippet>temp</snippet></ROW><ROW><id>4103454</id><snippet>pickle</snippet></ROW><ROW><id>4103454</id><snippet>shelve</snippet></ROW><ROW><id>4103454</id><snippet>pickle</snippet></ROW><ROW><id>4103564</id><snippet>settings.py</snippet></ROW><ROW><id>4103564</id><snippet>import socket

try:
    HOSTNAME = socket.gethostname()
except:
    HOSTNAME = 'localhost'
</snippet></ROW><ROW><id>4103579</id><snippet>abc | pqr |</snippet></ROW><ROW><id>4103579</id><snippet>import re
import ast

m = re.match(r"abc \| pqr \| (\[[-0-9,]*\])", inString)
if m is not None:
    theList = ast.literal_eval(m.group(1))
</snippet></ROW><ROW><id>4103579</id><snippet>search</snippet></ROW><ROW><id>4103579</id><snippet>match</snippet></ROW><ROW><id>4103602</id><snippet>conn = yield MongoConnectionPool()</snippet></ROW><ROW><id>4103638</id><snippet>struct</snippet></ROW><ROW><id>4103638</id><snippet>&gt;&gt;&gt; struct.pack('&gt;Q', 12345678901234567890)
'\xabT\xa9\x8c\xeb\x1f\n\xd2'
</snippet></ROW><ROW><id>4103669</id><snippet>foo = "True" if test else "False"
</snippet></ROW><ROW><id>4103782</id><snippet>Container</snippet></ROW><ROW><id>4103782</id><snippet>Emitter</snippet></ROW><ROW><id>4103782</id><snippet>parachute.py</snippet></ROW><ROW><id>4103782</id><snippet>from parachute import Container, Emitter
</snippet></ROW><ROW><id>4103782</id><snippet>import parachute

container = parachute.Container()
</snippet></ROW><ROW><id>4103828</id><snippet>smtplib.SMTP()</snippet></ROW><ROW><id>4103828</id><snippet>SMTP</snippet></ROW><ROW><id>4103828</id><snippet>server = smtplib.SMTP('smtp.live.com:25')</snippet></ROW><ROW><id>4103828</id><snippet>server = smtplib.SMTP('smtp.live.com', 25)</snippet></ROW><ROW><id>4103828</id><snippet>server.login(user, password)</snippet></ROW><ROW><id>4104188</id><snippet>def run_once(f):
    def wrapper(*args, **kwargs):
        if not wrapper.has_run:
            wrapper.has_run = True
            return f(*args, **kwargs)
    wrapper.has_run = False
    return wrapper


@run_once
def my_function(foo, bar):
    return foo+bar
</snippet></ROW><ROW><id>4104188</id><snippet>my_function</snippet></ROW><ROW><id>4104188</id><snippet>None</snippet></ROW><ROW><id>4104188</id><snippet>else</snippet></ROW><ROW><id>4104188</id><snippet>if</snippet></ROW><ROW><id>4104188</id><snippet>action = run_once(my_function)
while 1:
    if predicate:
        action()
</snippet></ROW><ROW><id>4104188</id><snippet>my_function</snippet></ROW><ROW><id>4104188</id><snippet>action = run_once(my_function)
action() # run once the first time

action.has_run = False
action() # run once the second time
</snippet></ROW><ROW><id>4104341</id><snippet>unique_items</snippet></ROW><ROW><id>4104341</id><snippet>senderDupSend = unique_items(ip, 4, True)
</snippet></ROW><ROW><id>4104341</id><snippet>for item in foundUnique:
    print item
</snippet></ROW><ROW><id>4104341</id><snippet>foundUnique</snippet></ROW><ROW><id>4104341</id><snippet>for item in senderDupSend: # This is what actually fills the list.
    print item
for item in foundUnique:
    print item
</snippet></ROW><ROW><id>4104341</id><snippet>found_unique = set(item[index] for item in sequence)
</snippet></ROW><ROW><id>4104341</id><snippet>found_unique = set(item[4] for item in ip)
</snippet></ROW><ROW><id>4104341</id><snippet>found_unique.union(item[4] for item in other_ip_list) 
</snippet></ROW><ROW><id>4104530</id><snippet>import os
import sys

sys.path.append('/home/youraccount/webapps/django') # Path to your custom django.
from django.core.handlers.wsgi import WSGIHandler

os.environ['DJANGO_SETTINGS_MODULE'] = 'myapp.settings' 
application = WSGIHandler()
</snippet></ROW><ROW><id>4104666</id><snippet>decode</snippet></ROW><ROW><id>4104666</id><snippet>encode</snippet></ROW><ROW><id>4104666</id><snippet>self._write_buffer = b''
</snippet></ROW><ROW><id>4104826</id><snippet>pickle</snippet></ROW><ROW><id>4104829</id><snippet>------&gt; print(mechanize.__version__)
(0, 2, 1, None, None)

&gt;python -V
Python 2.6.5
</snippet></ROW><ROW><id>4104914</id><snippet>&gt;&gt;&gt; def digest(constr):
...     c = apply(constr)
...     print c.__class__.__name__
...     print constr.__class__.__name__
</snippet></ROW><ROW><id>4104914</id><snippet>apply</snippet></ROW><ROW><id>4104914</id><snippet>Two</snippet></ROW><ROW><id>4104914</id><snippet>&gt;&gt;&gt; class Two(object): pass
... 
&gt;&gt;&gt; type(Two)
&lt;type 'type'&gt;
</snippet></ROW><ROW><id>4104914</id><snippet>type</snippet></ROW><ROW><id>4104914</id><snippet>&gt;&gt;&gt; two = Two()
&gt;&gt;&gt; type(two)
&lt;class '__main__.Two'&gt;
</snippet></ROW><ROW><id>4104914</id><snippet>type</snippet></ROW><ROW><id>4104914</id><snippet>&gt;&gt;&gt; Three = type('Three', (Two, ), {'foo': 'bar'})
&gt;&gt;&gt; type(Three)
&lt;type 'type'&gt;
&gt;&gt;&gt; three = Three()
&gt;&gt;&gt; type(three)
&lt;class '__main__.Three'&gt;
</snippet></ROW><ROW><id>4104914</id><snippet>type</snippet></ROW><ROW><id>4104914</id><snippet>type</snippet></ROW><ROW><id>4104914</id><snippet>type</snippet></ROW><ROW><id>4105009</id><snippet>(name, author)</snippet></ROW><ROW><id>4105009</id><snippet>def remove_duplicates(d):
    encountered_entries = set()
    for key, entry in d.items():
        if (entry['name'], entry['author']) in encountered_entries:
            del d[key]
        else:
            encountered_entries.add((entry['name'], entry['author']))
</snippet></ROW><ROW><id>4105246</id><snippet>enumerate()</snippet></ROW><ROW><id>4105246</id><snippet>"abc".Where((x,i) =&gt; true).Select((x, i) =&gt; string.Format("{0}: {1}", i, x))

0: a
1: b
2: c
</snippet></ROW><ROW><id>4105246</id><snippet>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;Foo&gt; extract = from foo in fooList where foo.Bar &gt; 10 select Foo.Name.ToUpper();
</snippet></ROW><ROW><id>4105861</id><snippet>Python: 2.6</snippet></ROW><ROW><id>4105861</id><snippet>BeautiSoup: 3.0.8.1</snippet></ROW><ROW><id>4105861</id><snippet>3.0 series</snippet></ROW><ROW><id>4105861</id><snippet>Python 2.6</snippet></ROW><ROW><id>4105861</id><snippet>3.1 series</snippet></ROW><ROW><id>4105861</id><snippet>Python 3</snippet></ROW><ROW><id>4105861</id><snippet>http://www.crummy.com/software/BeautifulSoup/#Download</snippet></ROW><ROW><id>4105879</id><snippet>from random import random
lines = [line for line in open("/some/file") if random() &gt;= .5]
</snippet></ROW><ROW><id>4106211</id><snippet>:vimgrep</snippet></ROW><ROW><id>4106211</id><snippet>:vimgrep TODO **/*.py
</snippet></ROW><ROW><id>4106211</id><snippet>:cw
</snippet></ROW><ROW><id>4106309</id><snippet>Content-MD5</snippet></ROW><ROW><id>4106309</id><snippet>Content-Type</snippet></ROW><ROW><id>4106309</id><snippet>Date</snippet></ROW><ROW><id>4106340</id><snippet>Also would it be safer to use /usr/sbin/sendmail rather than smtplib?</snippet></ROW><ROW><id>4106340</id><snippet>Any thoughts on how to proceed debugging this?</snippet></ROW><ROW><id>4106341</id><snippet>datetime</snippet></ROW><ROW><id>4106341</id><snippet>loader.now</snippet></ROW><ROW><id>4106341</id><snippet>repr</snippet></ROW><ROW><id>4106341</id><snippet>print loader.now</snippet></ROW><ROW><id>4106341</id><snippet>str</snippet></ROW><ROW><id>4106610</id><snippet>from jinja2 import Template

my_template = Template("""
&lt;html&gt;
&lt;body&gt;
&lt;table border="0"&gt;
&lt;tr&gt;
{% for url in urls %}
&lt;td&gt;&lt;a href="{{ url }}"&gt;{{ url }}&lt;/td&gt;
{% endfor %}
&lt;/tr&gt;
&lt;/table&gt;
""")

urls = ["http://.....jpg","http://.....jpg","http://.....jpg","http://.....jpg"]
rendered_html = my_template.render(urls=urls)
</snippet></ROW><ROW><id>4106693</id><snippet>duration</snippet></ROW><ROW><id>4106693</id><snippet>duration</snippet></ROW><ROW><id>4106693</id><snippet>MyModel</snippet></ROW><ROW><id>4106693</id><snippet>duration</snippet></ROW><ROW><id>4106693</id><snippet>entities = MyModel.all()
for entity in entities :
  if not entity.duration :
    entity.duration = None
    entity.put()
</snippet></ROW><ROW><id>4107104</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>4107104</id><snippet>list</snippet></ROW><ROW><id>4107104</id><snippet>data.values()</snippet></ROW><ROW><id>4107104</id><snippet>pack(... ,*data.values())</snippet></ROW><ROW><id>4107143</id><snippet>fd = open('file.csv','a')
fd.write(yourCsvRowWithNewIP)
fd.close()
</snippet></ROW><ROW><id>4107152</id><snippet>import logging
import logging.handlers as handlers

logger = logging.getLogger('myapp')
hdlr = logging.FileHandler('/tmp/myapp.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.WARNING)

logger.debug('debug!')
logger.info('info!')
logger.warning('warning!')
logger.error('error!')
logger.critical('critical!')
</snippet></ROW><ROW><id>4107152</id><snippet>magun@~: cat /tmp/myapp.log
2010-11-05 12:27:25,359 WARNING: warning!
2010-11-05 12:27:25,362 ERROR: error!
2010-11-05 12:27:26,071 CRITICAL: critical!
magun@~:
</snippet></ROW><ROW><id>4107152</id><snippet>import logging
import logging.handlers as handlers

logger = logging.getLogger('myapp')
hdlr = handlers.RotatingFileHandler('/tmp/log/myapp.log', maxBytes=100, backupCount=5)
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.WARNING)

for i in range(20):
    logger.debug('debug%i!'%i)
    logger.info('info%i!'%i)
    logger.warning('warning%i!'%i)
    logger.error('error%i!'%i)
    logger.critical('critical%i!'%i)
</snippet></ROW><ROW><id>4107152</id><snippet>magun@~: ls /tmp/log/
myapp.log  myapp.log.1  myapp.log.2  myapp.log.3  myapp.log.4  myapp.log.5
magun@~: cat /tmp/log/myapp.log
2010-11-05 12:33:52,369 ERROR: error19!
2010-11-05 12:33:52,376 CRITICAL: critical19!
magun@~: cat /tmp/log/myapp.log.1
2010-11-05 12:33:52,362 CRITICAL: critical18!
2010-11-05 12:33:52,369 WARNING: warning19!
magun@~: cat /tmp/log/myapp.log.2
2010-11-05 12:33:52,355 WARNING: warning18!
2010-11-05 12:33:52,362 ERROR: error18!
magun@~: cat /tmp/log/myapp.log.3
2010-11-05 12:33:52,348 ERROR: error17!
2010-11-05 12:33:52,355 CRITICAL: critical17!
magun@~: cat /tmp/log/myapp.log.4
2010-11-05 12:33:52,340 CRITICAL: critical16!
2010-11-05 12:33:52,348 WARNING: warning17!
magun@~: cat /tmp/log/myapp.log.5
2010-11-05 12:33:52,333 WARNING: warning16!
2010-11-05 12:33:52,340 ERROR: error16!
magun@~:
</snippet></ROW><ROW><id>4107303</id><snippet>Data</snippet></ROW><ROW><id>4107303</id><snippet>def Run(self)
    self.Data()
    client = Client(wsdl)
    ...
</snippet></ROW><ROW><id>4107514</id><snippet>self.assertEqual("http://example.com/users/john/", response._headers.get("location")[1])
AssertionError: 'http://example.com/users/john/' != '/users/john/'
</snippet></ROW><ROW><id>4107514</id><snippet>self.assertEqual("/users/john/", response._headers.get("location")[1])
</snippet></ROW><ROW><id>4107787</id><snippet>&gt;&gt;&gt; class Node(object):
...     def __init__(self, id_):
...             self.id_ = id_
... 
&gt;&gt;&gt; class Atom(Node):
...     def __init__(self, symbol, id_):
...             super(Atom, self).__init__(id_)
...             self.symbol = symbol
... 
&gt;&gt;&gt; a = Atom("FE", 1)
&gt;&gt;&gt; a.symbol
'FE'
&gt;&gt;&gt; a.id_
1
&gt;&gt;&gt; type(a)
&lt;class '__main__.Atom'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>4107792</id><snippet>categories</snippet></ROW><ROW><id>4107792</id><snippet>City</snippet></ROW><ROW><id>4107792</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>4107792</id><snippet>Category</snippet></ROW><ROW><id>4107792</id><snippet>class Category(db.Model)
    name = db.StringProperty(required=True)
    city = db.ReferenceProperty(City, collection_name = 'categories')
</snippet></ROW><ROW><id>4107792</id><snippet>categories</snippet></ROW><ROW><id>4107792</id><snippet>City</snippet></ROW><ROW><id>4108078</id><snippet>dir(b)</snippet></ROW><ROW><id>4108251</id><snippet>class Vehicule(object):
    def __init__(self):
        self._spatials = 1
    def _getSpatials(self):
        print("Calling Vehicule's spatials getter")
        return self._spatials
    def _setSpatials(self,value):
        print("Calling Vehicule's spatials setter")        
        self._spatials=value
    spatials=property(_getSpatials,_setSpatials)

class Car(Vehicule):
    def __init__(self):
        super(Car,self).__init__()
    def _getSpatials(self):
        print("Calling Car's spatials getter")
        return super(Car,self).spatials
    spatials=property(_getSpatials)

v=Vehicule()
c=Car()
print(c.spatials)
# Calling Car's spatials getter
# Calling Vehicule's spatials getter
# 1
</snippet></ROW><ROW><id>4108251</id><snippet>class Car(Vehicule):
    def __init__(self):
        super(Car,self).__init__()
    def _getSpatials(self):
        print("Calling Car's spatials getter")
        return super(Car,self).spatials
    def _setSpatials(self,value):
        print("Calling Car's spatials setter")
        super(Car,self).spatials=value
    spatials=property(_getSpatials,_setSpatials)

v=Vehicule()
c=Car()
print(c.spatials)
c.spatials = 10
AttributeError: 'super' object has no attribute 'spatials'
</snippet></ROW><ROW><id>4108251</id><snippet>super(Car,self)._setSpatials</snippet></ROW><ROW><id>4108251</id><snippet>class Car(Vehicule):
    def __init__(self):
        super(Car,self).__init__()
    def _getSpatials(self):
        print("Calling Car's spatials getter")
        return super(Car,self).spatials
    def _setSpatials(self,value):
        print("Calling Car's spatials setter")
        super(Car,self)._setSpatials(value)
    spatials=property(_getSpatials,_setSpatials)

v=Vehicule()
c=Car()
print(c.spatials)
# Calling Car's spatials getter
# Calling Vehicule's spatials getter
# 1
c.spatials = 10
# Calling Car's spatials setter
# Calling Vehicule's spatials setter
print(c.spatials)
# Calling Car's spatials getter
# Calling Vehicule's spatials getter
# 10
</snippet></ROW><ROW><id>4108318</id><snippet>obj = Object(index=id, **fields)
obj.save()
</snippet></ROW><ROW><id>4108359</id><snippet>range()</snippet></ROW><ROW><id>4108628</id><snippet>re.compile(r"[^a-zA-Z0-9-]")
</snippet></ROW><ROW><id>4108628</id><snippet>&gt;&gt;&gt; r = re.compile(r"[^a-zA-Z0-9-]")
&gt;&gt;&gt; s = "some#%te_xt&amp;with--##%--5 hy-phens  *#"
&gt;&gt;&gt; r.sub("",s)
'sometextwith----5hy-phens'
</snippet></ROW><ROW><id>4108628</id><snippet>re.compile(r"[^a-zA-Z0-9-]+")
</snippet></ROW><ROW><id>4108628</id><snippet>+</snippet></ROW><ROW><id>4108649</id><snippet>(?&gt;...)</snippet></ROW><ROW><id>4108649</id><snippet>++</snippet></ROW><ROW><id>4108649</id><snippet>*+</snippet></ROW><ROW><id>4108649</id><snippet>?+</snippet></ROW><ROW><id>4108649</id><snippet>r"..."</snippet></ROW><ROW><id>4108668</id><snippet>gql = "SELECT * FROM Shout WHERE when = DATETIME('2010-11-05 16:57:45')"
</snippet></ROW><ROW><id>4108668</id><snippet>DATETIME()</snippet></ROW><ROW><id>4108668</id><snippet>DATE()</snippet></ROW><ROW><id>4108668</id><snippet>TIME()</snippet></ROW><ROW><id>4108668</id><snippet>SELECT * FROM Shout WHERE when = DATETIME(2010,11,5,16,57,45)
</snippet></ROW><ROW><id>4108698</id><snippet>*</snippet></ROW><ROW><id>4108698</id><snippet>?</snippet></ROW><ROW><id>4108698</id><snippet>r'({[%|{](.*?)[}|%]})'
</snippet></ROW><ROW><id>4108698</id><snippet>[a|b]</snippet></ROW><ROW><id>4108698</id><snippet>a</snippet></ROW><ROW><id>4108698</id><snippet>b</snippet></ROW><ROW><id>4108698</id><snippet>a</snippet></ROW><ROW><id>4108698</id><snippet>|</snippet></ROW><ROW><id>4108698</id><snippet>b</snippet></ROW><ROW><id>4108698</id><snippet>|</snippet></ROW><ROW><id>4108775</id><snippet>print 'Hello'</snippet></ROW><ROW><id>4108775</id><snippet>print "Hello"</snippet></ROW><ROW><id>4108775</id><snippet>"""</snippet></ROW><ROW><id>4108775</id><snippet>'''</snippet></ROW><ROW><id>4108775</id><snippet>&gt;&gt;&gt; print """First
Second
Third"""

First
Second
Third
</snippet></ROW><ROW><id>4108925</id><snippet>_meta</snippet></ROW><ROW><id>4108925</id><snippet>ModelBase</snippet></ROW><ROW><id>4108925</id><snippet>django/db/models/base.py</snippet></ROW><ROW><id>4108925</id><snippet>__new__</snippet></ROW><ROW><id>4108925</id><snippet>_meta</snippet></ROW><ROW><id>4108925</id><snippet>_meta</snippet></ROW><ROW><id>4108925</id><snippet>Meta</snippet></ROW><ROW><id>4108925</id><snippet>print SomeModel._meta</snippet></ROW><ROW><id>4108925</id><snippet>print SomeModel._meta.fields</snippet></ROW><ROW><id>4108978</id><snippet>set([1,2]) == set([2,1])</snippet></ROW><ROW><id>4108978</id><snippet>list = [set([1,2]),set([3,4]),set([4,5]),set([6,7])]
set([2,1]) in list
</snippet></ROW><ROW><id>4109123</id><snippet>{{ form.DELETE }}
</snippet></ROW><ROW><id>4109195</id><snippet>selenium.getEval("this.browserbot.getCurrentWindow().moveTo((" + h + "),(" + v + "))");
selenium.getEval("this.browserbot.getCurrentWindow().resizeTo(" + w + "," + h + ")");
</snippet></ROW><ROW><id>4109275</id><snippet>pip install python-dateutil
</snippet></ROW><ROW><id>4109275</id><snippet>pip</snippet></ROW><ROW><id>4109275</id><snippet>import dateutil</snippet></ROW><ROW><id>4109275</id><snippet>import dateutil
</snippet></ROW><ROW><id>4109342</id><snippet>def forwards(self, orm):
    from django.core.management import call_command
    call_command("loaddata", "my_fixture.json")
</snippet></ROW><ROW><id>4109513</id><snippet>repr</snippet></ROW><ROW><id>4109513</id><snippet>&gt;&gt;&gt; s= {u'hello': u"Hi, i'm here"}
&gt;&gt;&gt; simplejson.dumps(s)
'{"hello": "Hi, i\'m here"}'
&gt;&gt;&gt; print simplejson.dumps(s)
{"hello": "Hi, i'm here"}
</snippet></ROW><ROW><id>4109513</id><snippet>repr</snippet></ROW><ROW><id>4109513</id><snippet>dumps</snippet></ROW><ROW><id>4109523</id><snippet>when</snippet></ROW><ROW><id>4109523</id><snippet>shouts = db.GqlQuery("""SELECT * 
                          FROM Shout 
                         WHERE when &gt;= DATE('2010-11-05')
                           AND when &lt; DATE('2010-11-06')""")
</snippet></ROW><ROW><id>4109575</id><snippet>object</snippet></ROW><ROW><id>4109619</id><snippet>def grph():
    graph1 = f.add_subplot(111)
    graph1.plot([1,2,3])
    canvas.draw()
</snippet></ROW><ROW><id>4109729</id><snippet>update</snippet></ROW><ROW><id>4109729</id><snippet>i</snippet></ROW><ROW><id>4109729</id><snippet>def mergeDict(object):
    dict1 = {}
    for i in range(len(object)):
        dict1[i] = {'id': object[i].id, 'name': object[i].name, 'age': object[i].age, 'location': object[i].location}
    return dict1
merged_dict = mergeDict(details_sorted)
</snippet></ROW><ROW><id>4109729</id><snippet>update</snippet></ROW><ROW><id>4109729</id><snippet>id</snippet></ROW><ROW><id>4109729</id><snippet>name</snippet></ROW><ROW><id>4109729</id><snippet>age</snippet></ROW><ROW><id>4109729</id><snippet>location</snippet></ROW><ROW><id>4109729</id><snippet>dict1</snippet></ROW><ROW><id>4109729</id><snippet>id</snippet></ROW><ROW><id>4109729</id><snippet>dict1</snippet></ROW><ROW><id>4109729</id><snippet>id</snippet></ROW><ROW><id>4109729</id><snippet>name</snippet></ROW><ROW><id>4109729</id><snippet>age</snippet></ROW><ROW><id>4109729</id><snippet>location</snippet></ROW><ROW><id>4109814</id><snippet>if re.match(
    r"""^             # match start of the string
    (?=.*-)           # assert that there is a dash
    (?!.*\.(?:jpg|gif|png|css|js))  # assert that these words can't be matched
    [a-z0-9/-]{4,30}  # match 4-30 of the allowed characters
    $                 # match the end of the string""", 
    subject, re.VERBOSE):
    # Successful match at the start of the string
else:
    # Match attempt failed
</snippet></ROW><ROW><id>4109814</id><snippet>.</snippet></ROW><ROW><id>4110218</id><snippet>import pickle
class PicklableFile(object):
    def __init__(self, fileobj):
        self.fileobj = fileobj

    def __getattr__(self, key):
        return getattr(self.fileobj, key)

    def __getstate__(self):
        ret = self.__dict__.copy()
        ret['_file_name'] = self.fileobj.name
        ret['_file_mode'] = self.fileobj.mode
        ret['_file_pos'] = self.fileobj.tell()
        del ret['fileobj']
        return ret

    def __setstate__(self, dict):
        self.fileobj = open(dict['_file_name'], dict['_file_mode'])
        self.fileobj.seek(dict['_file_pos'])
        del dict['_file_name']
        del dict['_file_mode']
        del dict['_file_pos']
        self.__dict__.update(dict)

f = PicklableFile(open("/tmp/blah"))
print f.readline()
data = pickle.dumps(f)
f2 = pickle.loads(data)
print f2.read()
</snippet></ROW><ROW><id>4110218</id><snippet>open</snippet></ROW><ROW><id>4110218</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>4110218</id><snippet>file</snippet></ROW><ROW><id>4110218</id><snippet>file</snippet></ROW><ROW><id>4110218</id><snippet>file</snippet></ROW><ROW><id>4110510</id><snippet>def login():
    for i in range(3):
        password = raw_input('Please enter a password: ')
        if password != 'SecretPassword':
            print 'You have entered invalid password {0} times.'.format(i + 1)
        else:
            print 'Access Granted'
            return True
    print 'Access Denied'
    return False
</snippet></ROW><ROW><id>4110571</id><snippet>python SQLgeneratingScript.py parameters|psql -d my_database
</snippet></ROW><ROW><id>4110611</id><snippet>for x in collection: assert x in collection</snippet></ROW><ROW><id>4110611</id><snippet>(key, value) in d</snippet></ROW><ROW><id>4110611</id><snippet>key in d</snippet></ROW><ROW><id>4110611</id><snippet>def iter_values(it):
    if hasattr(it, 'itervalues'):
        return it.itervalues()
    return iter(x)
</snippet></ROW><ROW><id>4110707</id><snippet>archivo = models.FileField(upload_to = 'path/%Y/%M/%D/')
</snippet></ROW><ROW><id>4110707</id><snippet>def get_file_path(instance, filename):
    ext = filename.split('.')[-1]
    filename = "%s.%s" % (uuid.uuid4(), ext)
    return os.path.join(instance.directory_string_var, filename)

class Archivo(models.Model):
    archivo = models.FileField(upload_to = get_file_path)
    directory_string_var = 'default_directory_string_var'
</snippet></ROW><ROW><id>4110711</id><snippet>key</snippet></ROW><ROW><id>4110711</id><snippet>sorted()</snippet></ROW><ROW><id>4110711</id><snippet>sorted(your_list, key=lambda x: (your_dict[x]['downloads'], your_dict[x]['date']))
</snippet></ROW><ROW><id>4110750</id><snippet>ElementTree</snippet></ROW><ROW><id>4110750</id><snippet>items = root.findall(namespace+'searchResult/'+namespace+'item')
for item in items: 
     item.find(namespace+'itemId').text
     item.find(namespace+'title').text
</snippet></ROW><ROW><id>4110750</id><snippet>root.find(namespace+'searchResult/'+namespace+'item/'+namespace+'itemId')
</snippet></ROW><ROW><id>4110753</id><snippet>time.strptime()</snippet></ROW><ROW><id>4110753</id><snippet>time.strftime()</snippet></ROW><ROW><id>4110775</id><snippet>python setup.py install
</snippet></ROW><ROW><id>4110775</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>4110775</id><snippet>setup.py install</snippet></ROW><ROW><id>4110775</id><snippet>setup.py install</snippet></ROW><ROW><id>4110775</id><snippet>setup.py develop</snippet></ROW><ROW><id>4111142</id><snippet>pattern:RegExp = /select.+?from/gis;</snippet></ROW><ROW><id>4111157</id><snippet>reduce(set.intersection, map(set , bigstringlist))
</snippet></ROW><ROW><id>4111220</id><snippet>repr()</snippet></ROW><ROW><id>4111220</id><snippet>'\x00'</snippet></ROW><ROW><id>4111220</id><snippet>\xff\xfe</snippet></ROW><ROW><id>4111220</id><snippet>\xfe\xff</snippet></ROW><ROW><id>4111220</id><snippet>decode</snippet></ROW><ROW><id>4111220</id><snippet>cStringIO</snippet></ROW><ROW><id>4111220</id><snippet>cStringIO.StringIO(text).readline</snippet></ROW><ROW><id>4111290</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; x = [(1,2), (3,4), (7,4), (5,4)]
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for v,k in x:
...   d[k] = max(d[k],v) 
... 
&gt;&gt;&gt; y=[(k,v) for v,k in d.items()]
&gt;&gt;&gt; y
[(1, 2), (7, 4)]
</snippet></ROW><ROW><id>4111290</id><snippet>&gt;&gt;&gt; y = [(k,v) for k,v in x if d[v]==k]
&gt;&gt;&gt; y
[(1, 2), (7, 4)]
</snippet></ROW><ROW><id>4111290</id><snippet>&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k,v in x:
...   d[v].append(k)
... 
&gt;&gt;&gt; y = [(max(k),v) for v,k in d.items()]
&gt;&gt;&gt; y
[(1, 2), (7, 4)]
</snippet></ROW><ROW><id>4111290</id><snippet>&gt;&gt;&gt; y = [(k,v) for k,v in x if max(d[v])==k]
&gt;&gt;&gt; y
[(1, 2), (7, 4)]
</snippet></ROW><ROW><id>4111329</id><snippet>wait</snippet></ROW><ROW><id>4111329</id><snippet>system()</snippet></ROW><ROW><id>4111417</id><snippet>[i for i, e in enumerate(a) if e != 0]
</snippet></ROW><ROW><id>4111572</id><snippet>    Digraph {
graph [label="Problem Frame\nmapping editor\n",labelloc=t,fontsize=18,compound=true];
node[shape = record,fontsize = 10];
edge[arrowtail=none,arrowhead=none,arrowsize=0.8,color=ivory4,fontsize=8];

subgraph "cluster0" {
graph [label = "Model Fragment"];
A01 [label = "{Domain|class::marking\lisTemplate::boolean default false\lname::name\ltype::domain type\l}"];
A02 [label = "{Requirement|isTemplate::boolean default false\lname::name\l}"];
A03 [label = "{Requirement Reference\n\&lt;\&lt;associative\&gt;\&gt;|content::name\lis template::boolean default false\ltype::requirement reference type\l}",shape=Mrecord,style=dotted];
A04 [label = "{Shared Phenomena Set\n\&lt;\&lt;associative\&gt;\&gt;|content::name\lis template::boolean default false\ltype::phenomena type\l}",shape=Mrecord,style=dotted];

/* 1:1-0:M */
edge[dir=both,arrowhead=crowodot,arrowtail=none];
A01 -&gt; A03 [style=dashed];
A01 -&gt; A04 [style = dashed];
A01 -&gt; A04 [style = dashed];
A02 -&gt; A03 [style = dashed];
}

subgraph "cluster1" {
graph [label = "\&gt;\&gt;\&gt;",fontsize = 24];
B01 [label = "{Domain}"];
B02 [label = "{Requirement}"];
B03 [label = "{Requirement\nReference\n}",shape=Mrecord,style=dotted];
B04 [label = "{Shared\nPhenomena\nSet\n}",shape=Mrecord,style=dotted];
F01 [label = "{C0001|if \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F02 [label = "{C0002|if not \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F03 [label = "{C0003|if \[-\&gt; controls -\&gt; describes.type = designed\]\l}"];
F04 [label = "{C0004|if \[-\&gt; controls -\&gt; describes.type = given\]\l}"];
F05 [label = "{C0005|if \[-\&gt; controls -\&gt; describes.type = machine\]\l}"];
F06 [label = "{C0006|if \[-\&gt; controls -\&gt; describes.marking = biddable\]\l}"];
F07 [label = "{C0007|if \[-\&gt; controls -\&gt; describes.marking = causal\]\l}"];
F08 [label = "{C0008|if \[-\&gt; controls -\&gt; describes.marking = lexical\]\l}"];
F09 [label = "{C0009|if \[-\&gt; controls -\&gt; describes.marking = null\]\l}"];
F10 [label = "{C0010|if \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F11 [label = "{C0011|if not \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F12 [label = "{C0012|if \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F13 [label = "{C0013|if not \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F14 [label = "{C0014|if \[-\&gt; controls -\&gt; describes.type = non-constraining\]\l}"];
F15 [label = "{C0015|if not \[-\&gt; controls -\&gt; describes.type = constraining\]\l}"];
F16 [label = "{C0016|if \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F17 [label = "{C0017|if not \[-\&gt; controls -\&gt; describes.isTemplate\]\l}"];
F18 [label = "{C0018|if \[-\&gt; controls -\&gt; describes.type = causal\]\l}"];
F19 [label = "{C0019|if \[-\&gt; controls -\&gt; describes.type = event\]\l}"];
F20 [label = "{C0020|if \[-\&gt; controls -\&gt; describes.type = symbolic\]\l}"];

edge [style = solid];
B01 -&gt; F01 -&gt; F02 -&gt; F03 -&gt; F04 -&gt; F05 -&gt; F06 -&gt; F07 -&gt; F08 -&gt; F09;
B02 -&gt; F10 -&gt; F11;
B03 -&gt; F12 -&gt; F13 -&gt; F14 -&gt; F15;
B04 -&gt; F16 -&gt; F17 -&gt; F18 -&gt; F19 -&gt; F20;

edge [style = invis];
B01 -&gt; B02 -&gt; B03 -&gt; B04;
}

subgraph "cluster2" {
graph [label = "\&lt;\&lt;\&lt;",fontsize = 24];
C01 [label = "{Edge|name := Constraining Reference\larrowtail := normal\ldir := both\lpermitted node1 := domain icon\lpermitted node2 := requirement icon\lstyle := dotted\l}"];
D02 [label = "{Attribute|name::oName\lvalue::-\&gt; describes\l-\&gt; described by.content\l}"];
C02 [label = "{Diagram|name := Frame Diagram\l}"];
C03 [label = "{Node|name := Domain Icon\lcolor = gray\lfillcolor = gold\lfontsize := 12\llabel := describes.preLabel\l + oName + describes.postLabel\lshape := Mrecord\lstyle := filled\l}"];
D03 [label = "{Attribute|name::oClass\lvalue :=-\&gt; describes\l-\&gt; described by.class\l}"];
D04 [label = "{Attribute|name::oName\lvalue := -\&gt; describes\l-\&gt; described by.name\l}"];
D05 [label = "{Attribute|name::postlabel\lvalue := \}\"\l}"];
D06 [label = "{Attribute|name::postlabel\lvalue := \|\{\|b\}\}\"\l}"];
D07 [label = "{Attribute|name::postlabel\lvalue := \|\{\|c\}\}\"\l}"];
D08 [label = "{Attribute|name::postlabel\lvalue := \|\{\|x\}\}\"\l}"];
D09 [label = "{Attribute|name::prelabel\lvalue := \"\{\|\l}"];
D10 [label = "{Attribute|name::prelabel\lvalue := \"\{\l}"];
D11 [label = "{Attribute|name::prelabel\lvalue := \"\{\|\|\l}"];
D12 [label = "{Attribute|name::oType\lvalue := -\&gt; describes \l-\&gt; described by.type\l}"];
C04 [label = "{Holding Box|name := Domain Template\lcolor := slategray\lfillcolor := white\lfontcolor := slategray\lfontsize := 9\llabel := oName\lreadonly := true\l}"];
D13 [label = "{Attribute|name::oName\lvalue := -\&gt; describes \l-\&gt; described by.name\l}"];
C05 [label = "{Edge|name := Edge Template\lcolor := white\llabel = oName\lstyle := invis\l}"];
D14 [label = "{Attribute|name::oName\lvalue := -\&gt; describes \l-\&gt; described by.contents\l}"];
C06 [label = "{Node|name := Phenomena\l}"];
D15 [label = "{Attribute|name::oName\lvalue::-\&gt; describes\l\-\&gt; described by.contents\l}"];
C07 [label = "{Edge|name := Reference\l}"];
D16 [label = "{Attribute|name::oName\lvalue := -\&gt; describes \l-\&gt; described by.contents\l}"];
C08 [label = "{Node|name := Requirement Icon\l}"];
D17 [label = "{Attribute|name::oName\lvalue := -\&gt; describes \l-\&gt; described by.name\l}"];
C09 [label = "{Edge|name := Shared Phenomena\l}"];
D18 [label = "{Attribute|name::oName\lvalue := -\&gt; describes \l-\&gt; described by.contents\l}"];
D19 [label = "{Attribute|name::oType\lvalue := C\l}"];
D20 [label = "{Attribute|name::oType\lvalue := E\l}"];
D21 [label = "{Attribute|name::oType\lvalue := Y\l}"];

C01 -&gt; D02;
C03 -&gt; D03 -&gt; D04 -&gt; D05 -&gt; D06 -&gt; D07 -&gt; D08 -&gt; D09 -&gt; D10 -&gt; D11 -&gt; D12;
C04 -&gt; D13;
C05 -&gt; D14;
C06 -&gt; D15;
C07 -&gt; D16;
C08 -&gt; D17;
C09 -&gt; D18 -&gt; D19 -&gt; D20 -&gt; D21;

edge[style="invis"];
C01 -&gt; C02 -&gt; C03 -&gt; C04 -&gt; C05 -&gt; C06 -&gt; C07 -&gt; C08 -&gt; C09;
}

subgraph "cluster5" {
graph [label = "Editor Elements"];
E01 [label = "{Node\n|color::color\lfillcolor::fillcolor\lfontname::font\lfontsize::fontsize\llabel::name\lname::name\lreadonly::boolean default false\lshape::shape\lstyle::style\l}"];
E02 [label = "{Edge\n|arrowtail::edge end\ldir::dir\lname::name\lpermitted node1::name\lpermitted node2::name\lstyle::style\l}"];
E03 [label = "{Attribute\n|name::name\lvalue::text\l}"];
E04 [label = "{Diagram\n|defaults::attributes\ledge defaults::attributes\lname::name\lnode attributes::attributes\l}"];
E05 [label = "{Holding Box|color::color\lfillcolor::fillcolor\lfontname::font\lfontsize::fontsize\llabel::name\lname::name\lreadonly::boolean default false\lshape::shape\lstyle::style\l}"];

/* 0:1-N:M */
E01 -&gt; E02 [arrowhead = crowodot, label = "links", taillabel = " 2:2"];

/* 1:1-0:M  */
edge[dir=both,arrowtail=none,arrowhead=crowodot];
E04 -&gt; E01 [label = nodes];
E04 -&gt; E02 [label = edges];
E04 -&gt; E05 [label = "holding boxes"];

/* 0:1-0:M  */
edge[dir=both,arrowtail=odot,arrowhead=crowodot];
E05 -&gt; E01 [label = "contained nodes"];
E05 -&gt; E02 [label = "contained edges"];
E05 -&gt; E05 [label = contains];

/* 0:1-0:M  */
edge[dir=both,arrowtail=odot,arrowhead=crowodot];
E01 -&gt; E03 [label = characteristics];
E02 -&gt; E03 [label = parameters];
E04 -&gt; E03 [label = attributes];
E04 -&gt; E03 [label = attributes];
E04 -&gt; E03 [label = attributes];
}

{rank = min B01 C01}

edge[style="solid"];
F01 -&gt; C04 [ltail = cluster1];
F02 -&gt; C03 [ltail = cluster1];
F03 -&gt; D09 [ltail = cluster1];
F04 -&gt; D10 [ltail = cluster1];
F05 -&gt; D11 [ltail = cluster1];
F06 -&gt; D06 [ltail = cluster1];
F07 -&gt; D07 [ltail = cluster1];
F08 -&gt; D08 [ltail = cluster1];
F09 -&gt; D05 [ltail = cluster1];
F10 -&gt; C04 [ltail = cluster1];
F11 -&gt; C06 [ltail = cluster1];
F11 -&gt; C08 [ltail = cluster1];
F12 -&gt; C05 [ltail = cluster1];
F14 -&gt; C07 [ltail = cluster1];
F15 -&gt; C01 [ltail = cluster1];
F16 -&gt; C05 [ltail = cluster1];
F17 -&gt; C06 [ltail = cluster1];
F17 -&gt; C09 [ltail = cluster1];
F18 -&gt; D19 [ltail = cluster1];
F19 -&gt; D20 [ltail = cluster1];
F20 -&gt; D21 [ltail = cluster1]; 
}
</snippet></ROW><ROW><id>4111649</id><snippet>import struct

def u2s(v):
    return struct.unpack("i", struct.pack("I", v))[0]

def s2u(v):
    return struct.unpack("I", struct.pack("i", v))[0]
</snippet></ROW><ROW><id>4111649</id><snippet>import struct

def u2s(v, width=32):
    fmt = {8: "B", 16: "H", 32: "I", 64: "Q"}[width]
    return struct.unpack(fmt.lower(), struct.pack(fmt, v))[0]

def s2u(v, width=32):
    fmt = {8: "B", 16: "H", 32: "I", 64: "Q"}[width]
    return struct.unpack(fmt, struct.pack(fmt.lower(), v))[0]
</snippet></ROW><ROW><id>4111649</id><snippet>import struct

def u2s(v, width=32):
    return struct.unpack("q",struct.pack("Q",v&lt;&lt;(64-width)))[0]&gt;&gt;(64-width)

def s2u(v, width=32):
    return struct.unpack("Q",struct.pack("q",v&lt;&lt;(64-width)))[0]&gt;&gt;(64-width)
</snippet></ROW><ROW><id>4111649</id><snippet>def u2s(v, width=32):
    return v if v &lt; (1L&lt;&lt;(width-1)) else v - (1L&lt;&lt;width)

def s2u(v, width=32):
    return v if v &gt;= 0 else v + (1L&lt;&lt;width)
</snippet></ROW><ROW><id>4111670</id><snippet>foo = reload(foo)
</snippet></ROW><ROW><id>4111811</id><snippet>#!/bin/sh

cd ~

# Downloads python setuptools for 2.6
curl -o setuptools-0.6c11-py2.6.egg http://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg#md5=bfa92100bd772d5a213eedd356d64086

# installs it, will probably prompt you for password
sudo sh setuptools-0.6c11-py2.6.egg

# clean up and delete egg
rm setuptools-0.6c11-py2.6.egg
</snippet></ROW><ROW><id>4111811</id><snippet>&gt; cd ~/Downloads
&gt; sudo sh setuptools-0.6c11-py2.6.egg 
Password:
Processing setuptools-0.6c11-py2.6.egg
Removing /Library/Python/2.6/site-packages/setuptools-0.6c11-py2.6.egg
Copying setuptools-0.6c11-py2.6.egg to /Library/Python/2.6/site-packages
setuptools 0.6c11 is already the active version in easy-install.pth
Installing easy_install script to /usr/local/bin
Installing easy_install-2.6 script to /usr/local/bin

Installed /Library/Python/2.6/site-packages/setuptools-0.6c11-py2.6.egg
Processing dependencies for setuptools==0.6c11
Finished processing dependencies for setuptools==0.6c11
</snippet></ROW><ROW><id>4112056</id><snippet>Imports

- Imports should usually be on separate lines, e.g.:

    Yes: import os
         import sys

    No:  import sys, os

  it's okay to say this though:

    from subprocess import Popen, PIPE

- Imports are always put at the top of the file, just after any module
  comments and docstrings, and before module globals and constants.

  Imports should be grouped in the following order:

  1. standard library imports
  2. related third party imports
  3. local application/library specific imports
</snippet></ROW><ROW><id>4112200</id><snippet>&gt;&gt;&gt; from string import lowercase
&gt;&gt;&gt; dict((j,i) for i,j in enumerate(lowercase, 1)) 
{'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4, 'g': 7, 'f': 6, 'i': 9, 'h': 8, 'k': 11, 'j': 10, 'm': 13, 'l': 12, 'o': 15, 'n': 14, 'q': 17, 'p': 16, 's': 19, 'r': 18, 'u': 21, 't': 20, 'w': 23, 'v': 22, 'y': 25, 'x': 24, 'z': 26}
</snippet></ROW><ROW><id>4112200</id><snippet>enumerate(lowercase)</snippet></ROW><ROW><id>4112200</id><snippet>(0, 'a'), (1, 'b'), (2, 'c'),...</snippet></ROW><ROW><id>4112200</id><snippet>enumerate(lowercase, 1)</snippet></ROW><ROW><id>4112200</id><snippet>(1, 'a'), (2, 'b'), (3, 'c'),...</snippet></ROW><ROW><id>4112200</id><snippet>&gt;&gt;&gt; dict((j,i+1) for i,j in enumerate(lowercase)) 
</snippet></ROW><ROW><id>4112208</id><snippet>_, sep, rest = mystr.partition(",")
mystr = rest + sep + latestValue
</snippet></ROW><ROW><id>4112208</id><snippet>mystr</snippet></ROW><ROW><id>4112208</id><snippet>str.partition</snippet></ROW><ROW><id>4112208</id><snippet>sep</snippet></ROW><ROW><id>4112208</id><snippet>sep</snippet></ROW><ROW><id>4112208</id><snippet>mystr</snippet></ROW><ROW><id>4112208</id><snippet>mystr.rstrip(",")</snippet></ROW><ROW><id>4112208</id><snippet>partition()</snippet></ROW><ROW><id>4112208</id><snippet>mystr</snippet></ROW><ROW><id>4112271</id><snippet>&gt;&gt;&gt; zip(*[[1,2], [3,4], [5,6]])
[(1, 3, 5), (2, 4, 6)]
</snippet></ROW><ROW><id>4112271</id><snippet>&gt;&gt;&gt; range(3, 6)             # normal call with separate arguments
[3, 4, 5]
&gt;&gt;&gt; args = [3, 6]
&gt;&gt;&gt; range(*args)            # call with arguments unpacked from a list
[3, 4, 5]
</snippet></ROW><ROW><id>4112290</id><snippet>from django.db.models import get_models

for model in get_models():
   # Do something with your model here
   print model.__name__, [x.name for x in model._meta.fields]
</snippet></ROW><ROW><id>4112300</id><snippet>/etc/resolv.conf</snippet></ROW><ROW><id>4112402</id><snippet>session.query(Object).filter(Object.column.op('regexp')(REGEX))
</snippet></ROW><ROW><id>4112635</id><snippet>staticmethod</snippet></ROW><ROW><id>4112635</id><snippet>class A(object):
    @staticmethod
    def a():
        return 'A.a'
</snippet></ROW><ROW><id>4112635</id><snippet>classmethod</snippet></ROW><ROW><id>4112635</id><snippet>class A(object):
    @classmethod
    def a(cls):
        return '%s.a' % cls.__name__
</snippet></ROW><ROW><id>4112635</id><snippet>A.a()</snippet></ROW><ROW><id>4112761</id><snippet>//The node class should be held by std::auto_ptr
class_&lt;Node, std::auto_ptr&lt;Node&gt; &gt;("Node")
</snippet></ROW><ROW><id>4112761</id><snippet>void node_add_child(Node&amp; n, std::auto_ptr&lt;Node&gt; child) {
   n.add_child(child.get());
   child.release();
}
</snippet></ROW><ROW><id>4112761</id><snippet>//The node class should be held by std::auto_ptr
class_&lt;Node, std::auto_ptr&lt;Node&gt; &gt;("Node")
//expose the thin wrapper function as node.add_child()
.def("addChild", &amp;node_add_child)
;
</snippet></ROW><ROW><id>4112897</id><snippet>file('file2.txt','w').write( file('file.txt').read().encode('utf-8') )
</snippet></ROW><ROW><id>4112897</id><snippet>data = file('file.txt').read()
... process data ...
data = data.encode('utf-8')
file('file2.txt','w').write( data )
</snippet></ROW><ROW><id>4112897</id><snippet>codecs.getwriter('utf-8')(file('/tmp/bla3','w')).write(data)
</snippet></ROW><ROW><id>4112909</id><snippet>map()</snippet></ROW><ROW><id>4112909</id><snippet>map()</snippet></ROW><ROW><id>4112909</id><snippet>children</snippet></ROW><ROW><id>4112909</id><snippet>xml_to_dict(child)</snippet></ROW><ROW><id>4112909</id><snippet>import collections
from lxml import etree

tree = etree.parse('file.xml')
root = tree.getroot()

def xml_to_dict(el):
    d={}
    if el.text:
        print '***write tag as string'
        d[el.tag] = el.text
    child_dicts = collections.defaultdict(list)
    for child in el.getchildren():
        child_dicts[child.tag].append(xml_to_dict(child))
    if child_dicts:
        d[el.tag] = child_dicts
    return d

xml_to_dict(root)
</snippet></ROW><ROW><id>4112909</id><snippet>d[el.tag] = dict(child_dicts)</snippet></ROW><ROW><id>4112909</id><snippet>xml_to_dict</snippet></ROW><ROW><id>4112909</id><snippet>import collections
from lxml import etree

tree = etree.parse('file.xml')
root = tree.getroot()

def xml_to_item(el):
    if el.text:
        print '***write tag as string'
        item = el.text
    child_dicts = collections.defaultdict(list)
    for child in el.getchildren():
        child_dicts[child.tag].append(xml_to_item(child))
    return dict(child_dicts) or item

def xml_to_dict(el):
    return {el.tag: xml_to_item(el)}

print xml_to_dict(root)
</snippet></ROW><ROW><id>4112909</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>4112909</id><snippet>***write tag as string
***write tag as string
***write tag as string
***write tag as string
***write tag as string
***write tag as string
{'root': {'a': ['1', {'b': ['2', '2']}], 'aa': ['1a']}}
</snippet></ROW><ROW><id>4112909</id><snippet>b</snippet></ROW><ROW><id>4113033</id><snippet>self.request.POST.getall('ids[]')</snippet></ROW><ROW><id>4113037</id><snippet>g++</snippet></ROW><ROW><id>4113037</id><snippet>void initmyModule()</snippet></ROW><ROW><id>4113037</id><snippet>_Z12initmyModulev</snippet></ROW><ROW><id>4113037</id><snippet>#ifdef __cplusplus
extern "C" {
#endif 

#include &lt;Python.h&gt;

/*
 * Function to be called from Python
 */
static PyObject* py_myFunction(PyObject* self, PyObject* args)
{
    char *s = "Hello from C!";
    return Py_BuildValue("s", s);
}

/*
 * Bind Python function names to our C functions
 */
static PyMethodDef myModule_methods[] = {
    {"myFunction", py_myFunction, METH_VARARGS},
    {NULL, NULL}
};

/*
 * Python calls this to let us initialize our module
 */
void initmyModule()
{
    (void) Py_InitModule("myModule", myModule_methods);
}

#ifdef __cplusplus
}  // extern "C"
#endif 
</snippet></ROW><ROW><id>4113159</id><snippet>raw_function()</snippet></ROW><ROW><id>4113159</id><snippet>void</snippet></ROW><ROW><id>4113159</id><snippet>None</snippet></ROW><ROW><id>4113159</id><snippet>#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/raw_function.hpp&gt;

using namespace boost::python;

namespace
{
  object entry_point(tuple args, dict kwargs) 
  {  
    return object();
  } 
}

BOOST_PYTHON_MODULE(foo)
{
  def("entry_point", raw_function(&amp;entry_point));
}
</snippet></ROW><ROW><id>4113308</id><snippet>dispatcher.connect(self.spider_opened, signals.spider_opened)
dispatcher.connect(self.spider_closed, signals.spider_closed)
</snippet></ROW><ROW><id>4113308</id><snippet>__init__</snippet></ROW><ROW><id>4113485</id><snippet>if(OUT){
    if(file_exists) update_file
    else if(file_size==0) delete_file
    else create_file
}
</snippet></ROW><ROW><id>4113516</id><snippet>import random
import bisect
import collections

def cdf(weights):
    total=sum(weights)
    result=[]
    cumsum=0
    for w in weights:
        cumsum+=w
        result.append(cumsum/total)
    return result

def choice(population,weights):
    assert len(population) == len(weights)
    cdf_vals=cdf(weights)
    x=random.random()
    idx=bisect.bisect(cdf_vals,x)
    return population[idx]

weights=[0.3,0.4,0.3]
population='ABC'
counts=collections.defaultdict(int)
for i in range(10000):
    counts[choice(population,weights)]+=1
print(counts)

# % test.py
# defaultdict(&lt;type 'int'&gt;, {'A': 3066, 'C': 2964, 'B': 3970})
</snippet></ROW><ROW><id>4113582</id><snippet>challenge = re.search(r"challenge *: *'(\S+)'", x).group(1)
</snippet></ROW><ROW><id>4113606</id><snippet>¿</snippet></ROW><ROW><id>4113606</id><snippet>¡</snippet></ROW><ROW><id>4113606</id><snippet>unicode</snippet></ROW><ROW><id>4113606</id><snippet>str</snippet></ROW><ROW><id>4113771</id><snippet>string.strip()</snippet></ROW><ROW><id>4113771</id><snippet>&gt;&gt;&gt; s1 = '== foo bar =='
&gt;&gt;&gt; s1.strip('=')
' foo bar '
&gt;&gt;&gt; s2 = '* foo bar'
&gt;&gt;&gt; s2.lstrip('*')
' foo bar'
</snippet></ROW><ROW><id>4113771</id><snippet>strip</snippet></ROW><ROW><id>4113771</id><snippet>ltrip</snippet></ROW><ROW><id>4113771</id><snippet>rstrip</snippet></ROW><ROW><id>4113771</id><snippet>clean = re.sub(r'(^={2,})|(={2,}$)', '', clean)
clean = re.sub(r'^\*+', '', clean)
</snippet></ROW><ROW><id>4113771</id><snippet>strip</snippet></ROW><ROW><id>4113771</id><snippet>lstrip</snippet></ROW><ROW><id>4113771</id><snippet>rstrip</snippet></ROW><ROW><id>4113771</id><snippet>clean = clean.lstrip('*').strip('= ')
</snippet></ROW><ROW><id>4113771</id><snippet>.strip('= ')</snippet></ROW><ROW><id>4113904</id><snippet>cumsumpi = t(apply(pi, 1, cumsum));
u = runif(nrow(cumsumpi));

max.col((cumsumpi &gt; u) * 1, "first")
</snippet></ROW><ROW><id>4113922</id><snippet>cur.execute('INSERT INTO src_event (location_id, catname, title, name) VALUES (%s, %s, %s, %s)', (1441, 'concert', item['title'], item['artists']))
</snippet></ROW><ROW><id>4113922</id><snippet>%s</snippet></ROW><ROW><id>4114295</id><snippet>pip install django-haystack==1.0.1-final

easy_install "Whoosh==1.0.0.b11"
</snippet></ROW><ROW><id>4114323</id><snippet>if len(urlparse.urlparse(baseurl).path) &gt; 1:
</snippet></ROW><ROW><id>4114323</id><snippet>start_offset = (len(urlparse.urlparse(baseurl).path) &lt;= 1) and 2 or 0
img_url = urlparse.urljoin("http://www.example.com/", "../test.png"[start_offset:])
</snippet></ROW><ROW><id>4114756</id><snippet>&gt;&gt;&gt; import cmath
&gt;&gt;&gt; cmath.exp(1.3 * cmath.log(-1.07))
(-0.6418264288034731-0.8833982926856789j)
</snippet></ROW><ROW><id>4114756</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; def pow_with_nan(x, y):
...   try:
...     return math.pow(x, y)
...   except ValueError:
...     return float('nan')
...
&gt;&gt;&gt; pow_with_nan(1.3, -1.07)   # 1.3 ** -1.07
0.755232399659047
&gt;&gt;&gt; pow_with_nan(-1.07, 1.3)   # (-1.07) ** 1.3
nan
</snippet></ROW><ROW><id>4114756</id><snippet>a ** b</snippet></ROW><ROW><id>4114756</id><snippet>math.pow(a, b)</snippet></ROW><ROW><id>4114756</id><snippet>&gt;&gt;&gt; 1.3 ** -1.07
0.755232399659047
&gt;&gt;&gt; (-1.07) ** 1.3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: negative number cannot be raised to a fractional power
&gt;&gt;&gt; (-1.07+0j) ** 1.3
(-0.6418264288034731-0.8833982926856789j)
</snippet></ROW><ROW><id>4114792</id><snippet>ephem</snippet></ROW><ROW><id>4114792</id><snippet>&gt;&gt;&gt; import ephem
&gt;&gt;&gt; o = ephem.Observer()
&gt;&gt;&gt; o.lat, o.long = '37.0625', '-95.677068'
&gt;&gt;&gt; sun = ephem.Sun()
&gt;&gt;&gt; sunrise = o.previous_rising(sun, start=ephem.now())
&gt;&gt;&gt; noon = o.next_transit(sun, start=sunrise)
&gt;&gt;&gt; sunset = o.next_setting(sun, start=noon)
&gt;&gt;&gt; noon
2010/11/6 18:06:21
&gt;&gt;&gt; ephem.date((sunrise + sunset) / 2)
2010/11/6 18:06:08
</snippet></ROW><ROW><id>4114792</id><snippet>ephem.date((sunrise + sunset) / 2)</snippet></ROW><ROW><id>4114792</id><snippet>ephem</snippet></ROW><ROW><id>4114879</id><snippet>html</snippet></ROW><ROW><id>4114879</id><snippet>lxml</snippet></ROW><ROW><id>4114879</id><snippet>&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; doc = """&lt;html&gt;
... &lt;head&gt;
...   &lt;title&gt; Meh
... &lt;/head&gt;
... &lt;body&gt;
... Look at this interesting use of &lt;p&gt;
... rather than using &lt;br /&gt; tags as line breaks &lt;p&gt;
... &lt;/body&gt;"""
&gt;&gt;&gt; html.document_fromstring(doc)
&lt;Element html at ...&gt;
</snippet></ROW><ROW><id>4114900</id><snippet>import lxml.etree as le
import cStringIO
content='''\
&lt;font face="verdana" color="#ffffff" size="2"&gt;&lt;a href="url"&gt;inside&lt;/a&gt; something&lt;/font&gt;
'''
doc=le.parse(cStringIO.StringIO(content))

xpath='//font[@face="verdana" and @color="#ffffff" and @size="2"]/child::*'
x=doc.xpath(xpath)
print(map(le.tostring,x))
# ['&lt;a href="url"&gt;inside&lt;/a&gt; something']
</snippet></ROW><ROW><id>4114952</id><snippet>email.message.Message</snippet></ROW><ROW><id>4114952</id><snippet>get_payload</snippet></ROW><ROW><id>4114952</id><snippet>Message</snippet></ROW><ROW><id>4114952</id><snippet>get_content_type</snippet></ROW><ROW><id>4114952</id><snippet>get_filename</snippet></ROW><ROW><id>4114952</id><snippet>get_payload(decode=True)</snippet></ROW><ROW><id>4114952</id><snippet>&gt;&gt;&gt; import email
&gt;&gt;&gt; msg = email.message_from_file(open('message.txt'))
&gt;&gt;&gt; len(msg.get_payload())
2
&gt;&gt;&gt; attachment = msg.get_payload()[1]
&gt;&gt;&gt; attachment.get_content_type()
'image/png'
&gt;&gt;&gt; open('attachment.png', 'wb').write(attachment.get_payload(decode=True))
</snippet></ROW><ROW><id>4114952</id><snippet>get_filename</snippet></ROW><ROW><id>4114962</id><snippet>import math

def magnitude(v):
    return math.sqrt(sum(v[i]*v[i] for i in range(len(v))))

def add(u, v):
    return [ u[i]+v[i] for i in range(len(u)) ]

def sub(u, v):
    return [ u[i]-v[i] for i in range(len(u)) ]

def dot(u, v):
    return sum(u[i]*v[i] for i in range(len(u)))

def normalize(v):
    vmag = magnitude(v)
    return [ v[i]/vmag  for i in range(len(v)) ]

if __name__ == '__main__':
    l = [1, 1, 1]
    v = [0, 0, 0]

    h = normalize(add(l, v))
    print h
</snippet></ROW><ROW><id>4114963</id><snippet>append()</snippet></ROW><ROW><id>4114963</id><snippet>upload_template()</snippet></ROW><ROW><id>4114964</id><snippet>def get_txt(l,tag,classname):
    try:
        txt=l.find(tag, {'class':classname}).text
    except AttributeError:
        txt=None
    return txt

for line in lines:
    code = get_txt(l,'span','boldHeader')
    coded = get_txt(l,'div','Description')
    defn = get_txt(l,'ul','definitions')
    print code, coded, defn
</snippet></ROW><ROW><id>4114964</id><snippet>def</snippet></ROW><ROW><id>4114964</id><snippet>defn</snippet></ROW><ROW><id>4114964</id><snippet>def</snippet></ROW><ROW><id>4114964</id><snippet>try:
    ....
except:
    ...
</snippet></ROW><ROW><id>4114964</id><snippet>try:
    ...
except AttributeError as err:
    ...
</snippet></ROW><ROW><id>4115176</id><snippet>Temporary</snippet></ROW><ROW><id>4115176</id><snippet>Module</snippet></ROW><ROW><id>4115176</id><snippet>Temporary</snippet></ROW><ROW><id>4115176</id><snippet>Attribute</snippet></ROW><ROW><id>4115176</id><snippet>x</snippet></ROW><ROW><id>4115176</id><snippet>DownValue</snippet></ROW><ROW><id>4115176</id><snippet>x</snippet></ROW><ROW><id>4115176</id><snippet>y</snippet></ROW><ROW><id>4115176</id><snippet>x$...</snippet></ROW><ROW><id>4115176</id><snippet>Out[]</snippet></ROW><ROW><id>4115176</id><snippet>Unprotect[In, Out]; Clear[In, Out]; Protect[In, Out];</snippet></ROW><ROW><id>4115176</id><snippet>Module</snippet></ROW><ROW><id>4115176</id><snippet>$HistoryLength</snippet></ROW><ROW><id>4115176</id><snippet>object1 = new[Object1][];</snippet></ROW><ROW><id>4115292</id><snippet>date=int(raw_input("Date:"))
ammount=int(raw_input("Ammount:"))
desc=str(raw_input("Description:"))
account=str(raw_input("Account:"))

def addEntry(date, ammount, desc, account):
    transact=open("transactions.txt", "w")
    transact.write('%s, %s, %s , %s' % (date, ammount, desc, account))
    transact.close()

addEntry(date, ammount, desc, account)
</snippet></ROW><ROW><id>4115347</id><snippet>import argparse
import sys

class AddressAction(argparse.Action):
    def __call__(self, parser, args, values, option = None):
        args.address=values
        if args.query_type=='odam' and not args.address:
            args.address=[
                'master1.odamex.net:15000',
                'master2.odamex.net:15000',
                ]        
        if not args.address:
            parser.error("If you are making a server query, you must pass an address.")

p = argparse.ArgumentParser()
g = p.add_mutually_exclusive_group(required=True)
g.add_argument('--odam', dest='query_type', action='store_const',
        const='odam', help="Odamex Master query.")
g.add_argument('--odas', dest='query_type', action='store_const',
        const='odas', help="Odamex Server query.")
p.add_argument('address', nargs='*', action=AddressAction)
args = p.parse_args()
</snippet></ROW><ROW><id>4115347</id><snippet>% test.py --odas
If you are making a server query, you must pass an address.
% test.py --odam
Namespace(address=['master1.odamex.net:15000', 'master2.odamex.net:15000'], query_type='odam')
% test.py --odam 1 2 3
Namespace(address=['1', '2', '3'], query_type='odam')
</snippet></ROW><ROW><id>4115672</id><snippet>sorted(range(len(aa)), key=lambda a: -aa[a])
</snippet></ROW><ROW><id>4115672</id><snippet>range(len(aa)</snippet></ROW><ROW><id>4115672</id><snippet>[0, 1, 2]</snippet></ROW><ROW><id>4115672</id><snippet>-aa[0], -aa[1], -aa[2]</snippet></ROW><ROW><id>4115672</id><snippet>range(len(aa))   0   1   2    &lt;-- values
aa[a]           10   5  20
-aa[a]         -10  -5 -20    &lt;-- proxy values
</snippet></ROW><ROW><id>4115672</id><snippet>-aa[2]</snippet></ROW><ROW><id>4115672</id><snippet>-aa[0]</snippet></ROW><ROW><id>4115672</id><snippet>-aa[1]</snippet></ROW><ROW><id>4115672</id><snippet>sorted(range(len(aa)), key=lambda a: -aa[a])</snippet></ROW><ROW><id>4115672</id><snippet>[2, 0, 1]</snippet></ROW><ROW><id>4115815</id><snippet>re1 = re.compile(r'\[(http[^\s]*)\s(.*)\]')
re2 = re.compile(r'\[(http[^\s]*)\]')
with codecs.open(filename, encoding='utf-8') as F:
    text = F.read()
    pre_filter = re1.sub('\g&lt;2&gt;', text)
    result = re2.sub('\g&lt;1&gt;', pre_filter)
</snippet></ROW><ROW><id>4115848</id><snippet>__init__.py</snippet></ROW><ROW><id>4115848</id><snippet>/Users/brian/src/SampleApp/src/SampleApp/main/</snippet></ROW><ROW><id>4115848</id><snippet>main</snippet></ROW><ROW><id>4115848</id><snippet>__init__.py</snippet></ROW><ROW><id>4115848</id><snippet>Main</snippet></ROW><ROW><id>4115848</id><snippet>import main.models</snippet></ROW><ROW><id>4116117</id><snippet>test = __import__('os',globals(),locals())
for k in dir(test):
    globals()[k] = test.__dict__[k]
</snippet></ROW><ROW><id>4116117</id><snippet>test = __import__('urllib2',globals(),locals())
cls = None
if 'Request' in dir(test):
    cls = test.__dict__['Request']
    # you found the class now you can use it!
    cls('http://test.com')
</snippet></ROW><ROW><id>4116145</id><snippet>get_revoked()</snippet></ROW><ROW><id>4116145</id><snippet>M2Crypto</snippet></ROW><ROW><id>4116163</id><snippet>text</snippet></ROW><ROW><id>4116163</id><snippet>text1</snippet></ROW><ROW><id>4116163</id><snippet>Text()</snippet></ROW><ROW><id>4116163</id><snippet>Text(win1)</snippet></ROW><ROW><id>4116163</id><snippet>Text(frame)</snippet></ROW><ROW><id>4116292</id><snippet>master = Tk()
files = askopenfilenames(initialdir="C:\\Users\\BVCAP\\Videos", title="Select files")
files = master.tk.splitlist(files) #Possible workaround
self.num_files.set(len(files))
</snippet></ROW><ROW><id>4116490</id><snippet>&lt;ul&gt;
{% for item in items %}
    &lt;li&gt;&lt;a href="{{ item.get_absolute_url }}"&gt;{{ item.name }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;ul&gt;

$("a").click(function(){
    // I just reuse the url attribute from the element clicked
    // li does not have an url attribute
    var url = $(this).attr('href');
    $.getJSON(url, function(data) {
        if (data.success) {
            $("#details").html(data.html);
        } else {
            $("#details").html("Something went wrong");
        }
    });
    return false;
});

def details(request, item_id):
    item = Items.objects.get(pk=item_id)
    # Just render a view with the details, and return the view
    if request.is_ajax():
        html = render_to_string("items/_details.html", {'item': item})
        return HttResponse(simplejson.dumps({'success': True, 'html': html}), mimetype="application/json")
    else:
        #non ajax request rendering complete html
        return render_to_response("items/detail.html", {'item': item})
</snippet></ROW><ROW><id>4116618</id><snippet>function calcNumEntropyBits($s) {
        if (strlen($s) &lt;= 0) return 0.0;
        $symCount = array();
        foreach (str_split($s) as $c) {
                if (!in_array($c,$symCount)) $symCount[$c] = 1;
                else $symCount[$c] ++;
        }
        $entropy = 0.0;
        foreach ($symCount as $c=&gt;$n) {
                $prob = $n / (float)strlen($s);
                $entropy += $prob * log($prob)/log(2);
        }
        if ($entropy &gt;= 0.0) return 0.0;
        else return -($entropy*strlen($s));
}

function testEntropy($s):
        printf("Bits of entropy in '%s' is %.2f",$s,calcNumEntropyBits($s));

testEntropy('hello world');
testEntropy('bubba dubba');
testEntropy('aaaaaaaaaaa');
testEntropy('aaaaabaaaaa');
testEntropy('abcdefghijk');
</snippet></ROW><ROW><id>4116618</id><snippet>return ($entropy &gt;= 0.0)? 0.0: -($entropy*strlen($s));
</snippet></ROW><ROW><id>4116899</id><snippet>numpy</snippet></ROW><ROW><id>4116899</id><snippet>def appendSpherical_np(xyz):
    ptsnew = np.hstack((xyz, np.zeros(xyz.shape)))
    xy = xyz[:,0]**2 + xyz[:,1]**2
    ptsnew[:,3] = np.sqrt(xy + xyz[:,2]**2)
    ptsnew[:,4] = np.arctan2(np.sqrt(xy), xyz[:,2]) # for elevation angle defined from Z-axis down
    #ptsnew[:,4] = np.arctan2(xyz[:,2], np.sqrt(xy)) # for elevation angle defined from XY-plane up
    ptsnew[:,5] = np.arctan2(xyz[:,1], xyz[:,0])
    return ptsnew
</snippet></ROW><ROW><id>4116899</id><snippet>pts = np.random.rand(3000000, 3)</snippet></ROW><ROW><id>4117016</id><snippet># ...
infile.close()

channels = {'color':'diffColor', 'specular':'specAmount', 'normalmap':'normal'}
re_dis = re.compile(r'displacement\s[-+]?[0-9]*\.?[0-9]+')

for material, values in materials.items():
    lx.eval('select.item {Matr: %s} set textureLayer' % material)
    uvmap = materials[material]['uvmap']
    for v in values:
        m = re_dis.match(v)
        if m or v in channels.keys():
            lx.eval('shader.create constant')
            lx.eval('item.setType imageMap textureLayer')
            imagepath = materials[material][v]
            imagename = os.path.splitext(os.path.basename(imagepath))[0]
            lx.eval('clip.addStill {%s}' % imagepath)
            lx.eval('texture.setIMap {%s}' % imagename)
            if m:
                # we can't auto map to the channels dict
                lx.eval('shader.setEffect %s' % 'displace')
            else:
                lx.eval('shader.setEffect %s' % channels[v])
</snippet></ROW><ROW><id>4117016</id><snippet>import re</snippet></ROW><ROW><id>4117069</id><snippet>[...]</snippet></ROW><ROW><id>4117069</id><snippet>self</snippet></ROW><ROW><id>4117069</id><snippet>UserDict</snippet></ROW><ROW><id>4117135</id><snippet>D2 = dict((x['id'], x['val']) for x in D)
L2 = [D2[x] for x in L]
</snippet></ROW><ROW><id>4117165</id><snippet>import re

def foo(doc, re_xx=re.compile("required-pattern")):
    # use re_xx
    yield 1, 1

del re
</snippet></ROW><ROW><id>4117451</id><snippet>php -a
</snippet></ROW><ROW><id>4117451</id><snippet>php -r 'print_r(get_defined_constants());'
</snippet></ROW><ROW><id>4117482</id><snippet>import pytz
local_tz = pytz.timezone(timezone_name)
return timestamp_utc.replace(tzinfo=pytz.utc).astimezone(local_tz).replace(tzinfo=None)
</snippet></ROW><ROW><id>4117482</id><snippet>timestamp_utc</snippet></ROW><ROW><id>4117594</id><snippet>next(os.walk(...))
</snippet></ROW><ROW><id>4117717</id><snippet>-framework</snippet></ROW><ROW><id>4117717</id><snippet>AudioUnit</snippet></ROW><ROW><id>4117941</id><snippet>GetMinOs2</snippet></ROW><ROW><id>4117941</id><snippet>Ol</snippet></ROW><ROW><id>4117941</id><snippet>Os</snippet></ROW><ROW><id>4117941</id><snippet>l</snippet></ROW><ROW><id>4117941</id><snippet>Ol</snippet></ROW><ROW><id>4117941</id><snippet>Ol[l]</snippet></ROW><ROW><id>4117941</id><snippet>l</snippet></ROW><ROW><id>4117941</id><snippet>Ol</snippet></ROW><ROW><id>4117941</id><snippet>GetMinOs2</snippet></ROW><ROW><id>4117941</id><snippet>f</snippet></ROW><ROW><id>4117941</id><snippet>f</snippet></ROW><ROW><id>4117941</id><snippet>def f(O1,O2):
    if O1%4==3 or O2%4==3: return 2
    return cmp(O1,O2)

def GetMinOs(Os):
    Mn=set([])
    NotMn=set([])
    for O1 in Os:
       for O2 in Os:
           rel=f(O1,O2)
           if rel==1:       NotMn|=set([O1])
           elif rel==-1:    NotMn|=set([O2])
    Mn=Os-NotMn
    return Mn

def GetMinOs2(Os):
    Ol=list(Os)
    l=len(Ol)
    i=0
    j=1
    while i&lt;l:
        while j&lt;l:
            rel=f(Ol[i],Ol[j])
            if rel==1:
                l-=1
                Ol[i]=Ol[l]
                j=i+1
                break
            elif rel==-1:
                l-=1
                Ol[j]=Ol[l]
            else:
                j+=1
        else:
            i+=1
            j=i+1
    return set(Ol[:l])


Os=set(range(1000))

if __name__=='__main__':
    answer=GetMinOs(Os)
    result=GetMinOs2(Os)
    assert answer==result
</snippet></ROW><ROW><id>4117941</id><snippet>% python -mtimeit -s'import test' 'test.GetMinOs2(test.Os)'
1000 loops, best of 3: 22.7 msec per loop
% python -mtimeit -s'import test' 'test.GetMinOs(test.Os)'
10 loops, best of 3: 1.23 sec per loop
</snippet></ROW><ROW><id>4117941</id><snippet>set(range(1000))</snippet></ROW><ROW><id>4118133</id><snippet>sys.argv</snippet></ROW><ROW><id>4118133</id><snippet>len</snippet></ROW><ROW><id>4118133</id><snippet>from __future__ import print_function
import sys
print(sys.argv, len(sys.argv))
</snippet></ROW><ROW><id>4118133</id><snippet>print_args.py</snippet></ROW><ROW><id>4118133</id><snippet>&gt; python print_args.py
['print_args.py'] 1

&gt; python print_args.py foo and bar
['print_args.py', 'foo', 'and', 'bar'] 4

&gt; python print_args.py "foo and bar"
['print_args.py', 'foo and bar'] 2

&gt; python print_args.py "foo and bar" and baz
['print_args.py', 'foo and bar', 'and', 'baz'] 4
</snippet></ROW><ROW><id>4118133</id><snippet>sys.executable</snippet></ROW><ROW><id>4118133</id><snippet>script_name = sys.argv[0] # this will always work.
</snippet></ROW><ROW><id>4118133</id><snippet>filename = sys.argv[1]
</snippet></ROW><ROW><id>4118133</id><snippet>user_args = sys.argv[1:] # get everything after the script name
</snippet></ROW><ROW><id>4118133</id><snippet>user_args = sys.argv[1:]
fun, games = user_args # len(user_args) had better be 2
</snippet></ROW><ROW><id>4118133</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>4118133</id><snippet>string</snippet></ROW><ROW><id>4118244</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(['gksudo','python that_file.py'])
</snippet></ROW><ROW><id>4118361</id><snippet>class InterestForm(ModelForm):
    pub_date = DateField(label='Publication date')

    class Meta:
        model = Interest
        exclude = ('userid',)


InterestFormSet = modelformset_factory(Interest, form=InterestForm, extra=2)
</snippet></ROW><ROW><id>4118401</id><snippet>I tried this but it doesn't work.

`t = item.findtext('.//span[@class="python"]//a[2]')`
</snippet></ROW><ROW><id>4118401</id><snippet>//</snippet></ROW><ROW><id>4118401</id><snippet>.//a[2]</snippet></ROW><ROW><id>4118401</id><snippet>a</snippet></ROW><ROW><id>4118401</id><snippet>a</snippet></ROW><ROW><id>4118401</id><snippet>[]</snippet></ROW><ROW><id>4118401</id><snippet>//</snippet></ROW><ROW><id>4118401</id><snippet>(.//a)[2]</snippet></ROW><ROW><id>4118401</id><snippet>a</snippet></ROW><ROW><id>4118401</id><snippet>(.//span[@class="python"]//a)[2]
</snippet></ROW><ROW><id>4118401</id><snippet>(.//span[@class="python"]//a)[2]/text()
</snippet></ROW><ROW><id>4118442</id><snippet>iterparse</snippet></ROW><ROW><id>4118444</id><snippet>and</snippet></ROW><ROW><id>4118444</id><snippet>or</snippet></ROW><ROW><id>4118444</id><snippet>and</snippet></ROW><ROW><id>4118444</id><snippet>or</snippet></ROW><ROW><id>4118444</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>4118444</id><snippet>||</snippet></ROW><ROW><id>4118444</id><snippet>q and r</snippet></ROW><ROW><id>4118444</id><snippet>true</snippet></ROW><ROW><id>4118444</id><snippet>if</snippet></ROW><ROW><id>4118444</id><snippet>if</snippet></ROW><ROW><id>4118571</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; hours = ['19:30', '20:10', '20:30', '21:00', '22:00']
&gt;&gt;&gt; now = datetime.datetime.strptime("20:18", "%H:%M")
&gt;&gt;&gt; min(hours, key=lambda t: abs(now - datetime.datetime.strptime(t, "%H:%M")))
'20:10'
</snippet></ROW><ROW><id>4118699</id><snippet>itertools</snippet></ROW><ROW><id>4118699</id><snippet>&gt;&gt;&gt; lookup = map(chr, range(32, 127))
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.permutations(lookup, 10)
&lt;itertools.permutations object at 0x023C8AE0&gt;
</snippet></ROW><ROW><id>4118699</id><snippet>permutations</snippet></ROW><ROW><id>4118699</id><snippet>combinations</snippet></ROW><ROW><id>4118786</id><snippet>print s[s.index("[")+1:s.index("]")].replace(",", "\n")
</snippet></ROW><ROW><id>4118786</id><snippet>print s[1:-1].replace(",", "\n")
</snippet></ROW><ROW><id>4119176</id><snippet>os.path</snippet></ROW><ROW><id>4119223</id><snippet>mUNIQUE</snippet></ROW><ROW><id>4119223</id><snippet>mUNIQUE</snippet></ROW><ROW><id>4119223</id><snippet>db.TextProperty</snippet></ROW><ROW><id>4119223</id><snippet>mUNIQUE</snippet></ROW><ROW><id>4119223</id><snippet>db.StringProperty</snippet></ROW><ROW><id>4119223</id><snippet>Rep</snippet></ROW><ROW><id>4119223</id><snippet>COUNTS[i]</snippet></ROW><ROW><id>4119223</id><snippet>S = db.Text(UNIQUES[i])</snippet></ROW><ROW><id>4119223</id><snippet>S = UNIQUES[i]</snippet></ROW><ROW><id>4119255</id><snippet>if not any(y.name == a.name for y in x):
  ...
</snippet></ROW><ROW><id>4119255</id><snippet>event_list = [Event(name='California Wine Mixer'), ...]

event_dict = dict((b.name, b) for b in event_list)
# ignore event_list from now on.

....

a = Event(name='California Wine Mixer')
event_dict.setdefault(a.name, a)
</snippet></ROW><ROW><id>4119506</id><snippet>get_common_words([['hi', 'hello'], ['bye', 'hi']])</snippet></ROW><ROW><id>4119506</id><snippet>['hi']</snippet></ROW><ROW><id>4119506</id><snippet>def get_common_words(places):
    common_words = []
    for word in places[0]:
        is_common = all(word in place for place in places[1:]) #check to see that this word is in all places
        if is_common:
            common_words.append(word)
    return common_words
</snippet></ROW><ROW><id>4119506</id><snippet>get_common_words = lambda places: [word for word in places[0] if all(word in place for place in places[1:])]
</snippet></ROW><ROW><id>4119634</id><snippet>match = re.match(r"^(\w+):(.*)", "des1: op1   op2")
</snippet></ROW><ROW><id>4119634</id><snippet>ops = re.split(r"\s+", match.groups()[1])[1:]
</snippet></ROW><ROW><id>4119970</id><snippet>self.ui.MyQTree.clicked.connect(self.MyDataMapper.setCurrentIndex)
</snippet></ROW><ROW><id>4119975</id><snippet>import multiprocessing
import cStringIO

import matplotlib.pyplot as plt
import numpy as np

import itertools

def main():
    """Generates 1000 random plots and saves them as .png's in RAM"""
    pool = multiprocessing.Pool()
    same_title = itertools.repeat('Plot %i')
    fig_files = pool.map(plot, itertools.izip(xrange(1000), same_title))

def plot(args):
    """Make a random plot"""
    # Unfortunately, pool.map (and imap) only support a single argument to
    # the function, so you'll have to unpack a tuple of arguments...
    i, titlestring = args

    outfile = cStringIO.StringIO()

    x = np.cumsum(np.random.random(100) - 0.5)

    fig = plt.figure()
    plt.plot(x)
    fig.savefig(outfile, format='png', bbox_inches='tight')
    plt.title(titlestring % i)
    plt.close()

    # cStringIO files aren't pickelable, so we'll return the string instead...
    outfile.seek(0)
    return outfile.read()

main()
</snippet></ROW><ROW><id>4120019</id><snippet>config</snippet></ROW><ROW><id>4120019</id><snippet>env</snippet></ROW><ROW><id>4120019</id><snippet>fabfile</snippet></ROW><ROW><id>4120019</id><snippet>config</snippet></ROW><ROW><id>4120204</id><snippet>class Blog(SQLObject):
    class sqlmeta:
        table = 'blogtable'

    author = StringCol()
    keyword = StringCol()

Blog.select(Blog.q.keyword=='dust', distinct=True)
</snippet></ROW><ROW><id>4120204</id><snippet>select = Select(
    [Blog.q.author],
    Blog.q.keyword=='dust',
    distinct=True,
)

sql = connection.sqlrepr(select)

for author in connection.queryAll(sql):
    print author
</snippet></ROW><ROW><id>4120208</id><snippet>self.host</snippet></ROW><ROW><id>4121024</id><snippet>target = open('target.jpg','rb')
</snippet></ROW><ROW><id>4121024</id><snippet>read</snippet></ROW><ROW><id>4121154</id><snippet>class User(db.Model):
    "usual properties like name, etc"

class Message(db.Model):

    # list of users that have this message
    users = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>4121154</id><snippet>class UserMessage(db.Model):

    user = db.ReferenceProperty(User)
    message = db.ReferenceProperty(Message)
</snippet></ROW><ROW><id>4121281</id><snippet>re.sub(r"path=\'([^\']*)\'", "path='\1'", str)
</snippet></ROW><ROW><id>4121305</id><snippet>self.name = value</snippet></ROW><ROW><id>4121982</id><snippet>create_text()</snippet></ROW><ROW><id>4121982</id><snippet>canvas.create_text(x, y, width=80)
</snippet></ROW><ROW><id>4121982</id><snippet>create_text()</snippet></ROW><ROW><id>4121988</id><snippet>destroy()</snippet></ROW><ROW><id>4121988</id><snippet>map(lambda x: _.pack_start(x, False, False, 0), self.obs)</snippet></ROW><ROW><id>4121988</id><snippet>for x in self.obs: _.pack_start(x, False, False)</snippet></ROW><ROW><id>4121988</id><snippet>map(lambda x: x[1].set_text(x[0]), zip(("Filename", "Name in Menu", "Icon", "Command", "Categories (; Delimited)"), self.obs))</snippet></ROW><ROW><id>4121988</id><snippet>for txt, x in zip(("Filename", "Name in Menu", "Icon", "Command", "Categories (; Delimited)"), self.obs)): x.set_text(txt)</snippet></ROW><ROW><id>4121988</id><snippet>show</snippet></ROW><ROW><id>4121988</id><snippet>show_all</snippet></ROW><ROW><id>4122077</id><snippet>class hlist(list):
"Hashable list"
    def __hash__(self):
        return id(self)
    def __eq__(self, other):
        return self is other
    def __ne__{self, other}:
        return self is not other

in1 = hlist([1,2,3])
in2 = hlist([4,5,6])
outer = set([in1, in2])
</snippet></ROW><ROW><id>4122098</id><snippet>/namegrabber</snippet></ROW><ROW><id>4122098</id><snippet>request.POST</snippet></ROW><ROW><id>4122098</id><snippet>cleaned_data</snippet></ROW><ROW><id>4122098</id><snippet>forms.CharField</snippet></ROW><ROW><id>4122126</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>4122126</id><snippet>MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)
</snippet></ROW><ROW><id>4122405</id><snippet>try...except</snippet></ROW><ROW><id>4122405</id><snippet>except</snippet></ROW><ROW><id>4122405</id><snippet>traceback</snippet></ROW><ROW><id>4122666</id><snippet>List&lt;String&gt; items = Arrays.asList("a","b","c");

// Using Guava
String guavaVersion = Joiner.on(", ").join(items);

// Using Commons / Lang
String commonsLangVersion = StringUtils.join(items, ", ");

// both versions produce equal output
assertEquals(guavaVersion, commonsLangVersion);
</snippet></ROW><ROW><id>4122666</id><snippet>Joiner.on(String)</snippet></ROW><ROW><id>4122666</id><snippet>Joiner.join(Iterable&lt;T&gt;)</snippet></ROW><ROW><id>4122666</id><snippet>StringUtils.join(Collection, String)</snippet></ROW><ROW><id>4122782</id><snippet>return 100 if i &lt; 10 else pass</snippet></ROW><ROW><id>4122782</id><snippet>return (100 if i &lt; 10 else pass)</snippet></ROW><ROW><id>4122782</id><snippet>pass</snippet></ROW><ROW><id>4122845</id><snippet>def yad(decorators):
    def decorator(f):
        for d in reversed(decorators):
            f = d(f)
        return f
    return decorator
</snippet></ROW><ROW><id>4122845</id><snippet> list_of_decorators = [foo, bar]

@yad(list_of_decorators)
def foo():
    print 'foo'
</snippet></ROW><ROW><id>4122845</id><snippet> func = yad(list_of_decorators)(func)
</snippet></ROW><ROW><id>4122845</id><snippet> dec = yad(list_of_decorators)

 func1 = dec(func1)

 @dec
 def func2():
     pass
</snippet></ROW><ROW><id>4122845</id><snippet>yad</snippet></ROW><ROW><id>4122845</id><snippet>*decorators</snippet></ROW><ROW><id>4122845</id><snippet>decorators</snippet></ROW><ROW><id>4122980</id><snippet>open('file.csv', 'w')</snippet></ROW><ROW><id>4122980</id><snippet>open('file.csv', 'wb')</snippet></ROW><ROW><id>4123108</id><snippet>result = int(float(s) * 100)
</snippet></ROW><ROW><id>4123177</id><snippet>In [1]: import networkx as nx

In [2]: G=nx.balanced_tree(2,3,create_using=nx.DiGraph()) # tree rooted at 0

In [3]: [n for n,d in G.in_degree().items() if d==0] 
Out[3]: [0]
</snippet></ROW><ROW><id>4123177</id><snippet>In [4]: nx.topological_sort(G)
Out[4]: [0, 1, 3, 8, 7, 4, 9, 10, 2, 5, 11, 12, 6, 13, 14]
</snippet></ROW><ROW><id>4123205</id><snippet>render_to_response</snippet></ROW><ROW><id>4123205</id><snippet>HttpResponse</snippet></ROW><ROW><id>4123205</id><snippet> from django.http import HttpResponse
 return HttpResponse('')
</snippet></ROW><ROW><id>4123205</id><snippet>HttpResponseBadRequest</snippet></ROW><ROW><id>4123289</id><snippet>collections</snippet></ROW><ROW><id>4123345</id><snippet>lambda x=x: func(x)
</snippet></ROW><ROW><id>4123345</id><snippet>x</snippet></ROW><ROW><id>4123345</id><snippet>x</snippet></ROW><ROW><id>4123345</id><snippet>for x in range(len(l)):
   l[x][1]()
</snippet></ROW><ROW><id>4123345</id><snippet>lambda p, x=x: func(p, x)
</snippet></ROW><ROW><id>4123614</id><snippet>a = 1337
b = [1,3,3,7]
print b[0] # prints 1
print a[0] # raises your exception
</snippet></ROW><ROW><id>4124087</id><snippet>*** The _imaging C module is not installed
</snippet></ROW><ROW><id>4124087</id><snippet>sudo python setup.py build_ext -f
</snippet></ROW><ROW><id>4124087</id><snippet>_imaging.c:3017: warning: initialization from incompatible pointer type
_imaging.c:3077: warning: initialization from incompatible pointer type
libImaging/Quant.c: In function 'rehash_collide':
libImaging/Quant.c:154: warning: cast to pointer from integer of different size
</snippet></ROW><ROW><id>4124087</id><snippet>sudo apt-get install python-imaging
</snippet></ROW><ROW><id>4124289</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>4124289</id><snippet>MyAuthenticationForm</snippet></ROW><ROW><id>4124289</id><snippet>class MyAuthenticationForm(AuthenticationForm):
    username = forms.CharField(label=_("Username"), max_length=64)
</snippet></ROW><ROW><id>4124289</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>4124698</id><snippet>class_re = re.compile(r'(?&lt;=class=["\'])(.*)(?=["\'])')
@register.filter
def add_class(value, css_class):
    string = unicode(value)
    match = class_re.search(string)
    if match:
        m = re.search(r'^%s$|^%s\s|\s%s\s|\s%s$' % (css_class, css_class, 
                                                    css_class, css_class), 
                                                    match.group(1))
        print match.group(1)
        if not m:
            return mark_safe(class_re.sub(match.group(1) + " " + css_class, 
                                          string))
    else:
        return mark_safe(string.replace('&gt;', ' class="%s"&gt;' % css_class))
    return value
</snippet></ROW><ROW><id>4124799</id><snippet>False</snippet></ROW><ROW><id>4124799</id><snippet>(), [], ""</snippet></ROW><ROW><id>4124799</id><snippet>{}</snippet></ROW><ROW><id>4124799</id><snippet>None</snippet></ROW><ROW><id>4125758</id><snippet>umask</snippet></ROW><ROW><id>4125758</id><snippet>0027</snippet></ROW><ROW><id>4125758</id><snippet>% umask
027
% sudo touch /tmp/foo
% ls -l /tmp/foo
-rw-r-----  1 root  wheel  0 Nov  8 08:19 /tmp/foo
% umask 002
% touch /tmp/bar
% ls -al /tmp/bar
-rw-r--r--  1 root  wheel  0 Nov  8 08:23 /tmp/bar
</snippet></ROW><ROW><id>4125914</id><snippet>f = anotherdecorator(lambda x: return x * 2)
</snippet></ROW><ROW><id>4125987</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>4125987</id><snippet>im.save(tf2.name, "JPEG")
</snippet></ROW><ROW><id>4125987</id><snippet>save</snippet></ROW><ROW><id>4125987</id><snippet>save</snippet></ROW><ROW><id>4125987</id><snippet>im.save(tf2, "JPEG")
</snippet></ROW><ROW><id>4126026</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/media/css/dashboard.css" /&gt; 
&lt;!--[if lte IE 7]&gt;&lt;link rel="stylesheet" type="text/css" href="/media/css/ie.css" /&gt;&lt;![endif]--&gt;{% spaceless %}
{% block extrahead %}

{% endblock %} 
{% endspaceless %}
&lt;meta name="robots" content="NONE,NOARCHIVE" /&gt; 
&lt;/head&gt;
</snippet></ROW><ROW><id>4126026</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/referring_md/media/css/dashboard.css" /&gt; 
&lt;!--[if lte IE 7]&gt;&lt;link rel="stylesheet" type="text/css" href="/media/css/ie.css" /&gt;&lt;![endif]--&gt; 
&lt;meta name="robots" content="NONE,NOARCHIVE" /&gt; 
&lt;/head&gt;
</snippet></ROW><ROW><id>4126270</id><snippet>(a[0][0],a[0,2])
           ^^^
</snippet></ROW><ROW><id>4126270</id><snippet>(a[0][0],a[(0,2)])
</snippet></ROW><ROW><id>4126270</id><snippet>b.append((a[0][0],a[0][2]))
</snippet></ROW><ROW><id>4126369</id><snippet>([A-Za-z.]+) ?([A-Z]\.?)? ?([A-Za-z]+)</snippet></ROW><ROW><id>4126415</id><snippet>launchd</snippet></ROW><ROW><id>4126415</id><snippet>launchd</snippet></ROW><ROW><id>4126576</id><snippet>self</snippet></ROW><ROW><id>4126576</id><snippet>__init__</snippet></ROW><ROW><id>4126576</id><snippet>self</snippet></ROW><ROW><id>4126576</id><snippet>A is a B</snippet></ROW><ROW><id>4126761</id><snippet>re.findall('(?:Mc|Mac|O|Van|Von|De)?[A-Z][^A-Z]*', name) 
</snippet></ROW><ROW><id>4126761</id><snippet>(?:Mc)?[A-Z][^A-Z]*</snippet></ROW><ROW><id>4126781</id><snippet>import csv
import time
import tkFileDialog

filename = tkFileDialog.askopenfilename(defaultextension = ".csv")

reader = csv.reader(open(filename, "rb"), delimiter = ',')

headders = reader.next()

pool_dict = {}

for row in reader:
    if not pool_dict.has_key(row[1]):
        pool_dict[row[1]] = []
    pool_dict[row[1]].append(row)

for key, val in pool_dict.items():
    wp = csv.writer(open('pool ' +key+ ' '+time.strftime("%Y%m%d")+'.csv','wb'),)
    wp.writerow(headders)
    wp.writerows(val)
</snippet></ROW><ROW><id>4126785</id><snippet>pip</snippet></ROW><ROW><id>4126785</id><snippet>chromium-browser</snippet></ROW><ROW><id>4126785</id><snippet>apt-get install chromium</snippet></ROW><ROW><id>4126786</id><snippet>def Info():
    targetip = socket.gethostbyname_ex(text1.get("1.0", END))
    text.insert(END, targetip)
</snippet></ROW><ROW><id>4126786</id><snippet>END</snippet></ROW><ROW><id>4126786</id><snippet>"end-1c"</snippet></ROW><ROW><id>4127355</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>4127355</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval('{' + s + '}')
{128: 128, 125: 126, 126: 126, 127: 128}
</snippet></ROW><ROW><id>4127355</id><snippet>','</snippet></ROW><ROW><id>4127355</id><snippet>':'</snippet></ROW><ROW><id>4127355</id><snippet>dict</snippet></ROW><ROW><id>4127355</id><snippet>&gt;&gt;&gt; dict(map(int, x.split(':')) for x in s.split(','))
{128: 128, 125: 126, 126: 126, 127: 128}
</snippet></ROW><ROW><id>4127355</id><snippet>s</snippet></ROW><ROW><id>4127355</id><snippet>&gt;&gt;&gt; s = '125:126, 126:126, 127:128, 128:128'
</snippet></ROW><ROW><id>4127426</id><snippet>OrderedDict</snippet></ROW><ROW><id>4127426</id><snippet>dict</snippet></ROW><ROW><id>4127426</id><snippet>collections</snippet></ROW><ROW><id>4127426</id><snippet>Ordered</snippet></ROW><ROW><id>4127426</id><snippet>defaultdict</snippet></ROW><ROW><id>4127426</id><snippet>OrderedDict</snippet></ROW><ROW><id>4127426</id><snippet>import collections

class OrderedDefaultdict(collections.OrderedDict):
    def __init__(self, *args, **kwargs):
        if not args:
            self.default_factory = None
        else:
            if not (args[0] is None or callable(args[0])):
                raise TypeError('first argument must be callable or None')
            self.default_factory = args[0]
            args = args[1:]
        super(OrderedDefaultdict, self).__init__(*args, **kwargs)

    def __missing__ (self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = default = self.default_factory()
        return default

    def __reduce__(self):  # optional, for pickle support
        args = (self.default_factory,) if self.default_factory else tuple()
        return self.__class__, args, None, None, self.iteritems()

def simplexml_load_file(file):
    from lxml import etree

    tree = etree.parse(file)
    root = tree.getroot()

    def xml_to_item(el):
        item = el.text or None
        child_dicts = OrderedDefaultdict(list)
        for child in el.getchildren():
            child_dicts[child.tag].append(xml_to_item(child))
        return collections.OrderedDict(child_dicts) or item

    def xml_to_dict(el):
        return {el.tag: xml_to_item(el)}

    return xml_to_dict(root)

x = simplexml_load_file('routines/test.xml')

print x

for y in x['root']:
    print y
</snippet></ROW><ROW><id>4127426</id><snippet>{'root': 
    OrderedDict(
        [('a', ['1']), 
         ('aa', [OrderedDict([('b', [OrderedDict([('c', ['2'])]), '2'])])]), 
         ('aaa', ['3']), 
         ('aaaa', [OrderedDict([('bb', ['4'])])]), 
         ('aaaaa', ['5'])
        ]
    )
}

a
aa
aaa
aaaa
aaaaa
</snippet></ROW><ROW><id>4127426</id><snippet>__reduce__()</snippet></ROW><ROW><id>4127546</id><snippet>IconView</snippet></ROW><ROW><id>4127546</id><snippet>def force_ctrl(iv, ev): ev.state |= gtk.gdk.CONTROL_MASK
iconview.connect('key-press-event', force_ctrl)
iconview.connect('button-press-event', force_ctrl)
</snippet></ROW><ROW><id>4127546</id><snippet>def clicked(iv, ev):
    p = iv.get_path_at_pos(int(ev.x), int(ev.y))
    if not p is None:
        if iv.path_is_selected(p):
            iv.unselect_path(p)
        else:
            iv.select_path(p)
    return True # make the IconView ignore this click
iconview.connect('button-press-event', clicked)
</snippet></ROW><ROW><id>4127598</id><snippet>some_text</snippet></ROW><ROW><id>4127598</id><snippet>reprs</snippet></ROW><ROW><id>4127598</id><snippet>print(u''.join(some_text))
</snippet></ROW><ROW><id>4127598</id><snippet>some_text</snippet></ROW><ROW><id>4127598</id><snippet>u''</snippet></ROW><ROW><id>4127799</id><snippet>&lt;py:choose ...&gt;
  &lt;py:when test="..."&gt;
    ${c.row.currency.upper()}
  &lt;/py:when&gt;
  &lt;py:otherwise&gt;
   ${c.row.currency.upper()}
  &lt;/py:otherwise&gt;
&lt;/py:choose&gt;
</snippet></ROW><ROW><id>4127832</id><snippet>&lt;instance of TypeA&gt; + &lt;instance of TypeB&gt;</snippet></ROW><ROW><id>4127832</id><snippet>&lt;instance of TypeC&gt;</snippet></ROW><ROW><id>4127832</id><snippet>combine</snippet></ROW><ROW><id>4128026</id><snippet>reload</snippet></ROW><ROW><id>4128026</id><snippet>&gt;&gt;&gt; reload(package)
</snippet></ROW><ROW><id>4128026</id><snippet>&gt;&gt;&gt; reload(package.nrrd)
&gt;&gt;&gt; reload(package.sm)
&gt;&gt;&gt; reload(package.tensPP)
</snippet></ROW><ROW><id>4128396</id><snippet>\w</snippet></ROW><ROW><id>4128396</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>4128396</id><snippet>.</snippet></ROW><ROW><id>4128396</id><snippet>.</snippet></ROW><ROW><id>4128396</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; part_number = '18-TX25-37.25 DMDFC PS'
&gt;&gt;&gt; re.findall(r"[\w.]+", part_number)
['18', 'TX25', '37.25', 'DMDFC', 'PS']
</snippet></ROW><ROW><id>4128396</id><snippet>.</snippet></ROW><ROW><id>4128396</id><snippet>[]</snippet></ROW><ROW><id>4128446</id><snippet>format</snippet></ROW><ROW><id>4128446</id><snippet>"".join(...)</snippet></ROW><ROW><id>4128446</id><snippet>StringIO</snippet></ROW><ROW><id>4128446</id><snippet>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; foo = StringIO()
&gt;&gt;&gt; for letter in map(chr, range(128)):
...     foo.write(letter)
...
&gt;&gt;&gt; foo.seek(0)
0
&gt;&gt;&gt; foo.read()
'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\
x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&amp;\'()*+,-./0123456789:;&lt;=&gt;?@ABC
DEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f'
</snippet></ROW><ROW><id>4128668</id><snippet>itertools.tee</snippet></ROW><ROW><id>4128668</id><snippet>itertools.cycle</snippet></ROW><ROW><id>4128668</id><snippet>class izip_cycle(object):
    def __init__(self, *iterables ):
        self.remains = len(iterables)
        self.items = izip(*[self._gen(it) for it in iterables])

    def __iter__(self):
        return self.items

    def _gen(self, src):
        q = []
        for item in src:
            yield item
            q.append(item)

        # done with this src
        self.remains -=1
        # if there are any other sources then cycle this one
        # the last souce remaining stops here and thus stops the izip
        if self.remains:
            while True:
                for item in q:
                    yield item
</snippet></ROW><ROW><id>4128692</id><snippet>class CustomField(models.Model):
    name = models.CharField(max_length=32)

class Book(models.Model):
    ... fields

class CustomValue(models.Model):
    field = models.ForeignKey(CustomField)
    value = models.CharField(max_length=255)
    book = models.ForeignKey(Book)
</snippet></ROW><ROW><id>4128692</id><snippet># taken and modified from django online tutorial
class CustomValueInline(admin.StackedInline):
    model = CustomValue
    extra = 3

class BookAdmin(admin.ModelAdmin):
    fieldsets = [
       # your fields in here
    ]
    inlines = [CustomValueInline]

admin.site.register(Book, BookAdmin)
</snippet></ROW><ROW><id>4128792</id><snippet>curs1 = conn1.cursor()
# the following returns list of tuples
excel_results = curs1.execute('select [a_column]
                               from [Sheet1$]').fetchall()
</snippet></ROW><ROW><id>4128792</id><snippet>curs.executemany('insert into mytable (mycolumn) values (?)', excel_results)
conn.commit()
</snippet></ROW><ROW><id>4128792</id><snippet>for row in curs1.tables():
    print row.table_name
</snippet></ROW><ROW><id>4128964</id><snippet>.tar.gz</snippet></ROW><ROW><id>4128964</id><snippet>dist</snippet></ROW><ROW><id>4128964</id><snippet>distutils</snippet></ROW><ROW><id>4128964</id><snippet>python setup.py sdist upload
</snippet></ROW><ROW><id>4129026</id><snippet>nltk.collocations.BigramCollocationFinder</snippet></ROW><ROW><id>4129026</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; def tokenize(sentences):
...     for sent in nltk.sent_tokenize(sentences.lower()):
...         for word in nltk.word_tokenize(sent):
...             yield word
... 

&gt;&gt;&gt; nltk.Text(tkn for tkn in tokenize('mary had a little lamb.'))
&lt;Text: mary had a little lamb ....&gt;
&gt;&gt;&gt; text = nltk.Text(tkn for tkn in tokenize('mary had a little lamb.'))
</snippet></ROW><ROW><id>4129026</id><snippet>&gt;&gt;&gt; text.collocations(num=20)
Building collocations list
</snippet></ROW><ROW><id>4129198</id><snippet>a = numpy.random.randn(10, 2, 2)
</snippet></ROW><ROW><id>4129198</id><snippet>a.argmax(axis=0)
</snippet></ROW><ROW><id>4129416</id><snippet>import gobject</snippet></ROW><ROW><id>4129416</id><snippet>gobject.MainLoop().run()</snippet></ROW><ROW><id>4129416</id><snippet>MainLoop</snippet></ROW><ROW><id>4129416</id><snippet>DBusGMainLoop</snippet></ROW><ROW><id>4129635</id><snippet>class BaseHandler(webapp.RequestHandler):
    def __init__(self):
        pass

    def render(self, template_filename, template_args):
        nick = users.get_current_user().nickname()
        template_args['nick'] = nick

        self.response.out.write(
            template.render(
                self.template_path(template_filename), template_args))
</snippet></ROW><ROW><id>4129838</id><snippet>class QuotesView(webapp.RequestHandler):
    """Super class for quotes that can accommodate common functionality"""
    pass

class QuotesViewSingle(QuotesView):
    def get(self):
        ...

class QuotesViewRandom(QuotesView):
    def get(self):
        ...

class QuotesViewAll(QuotesView):
    def get(self):
        ...

def main():
    application = webapp.WSGIApplication([('/quote/new',NewQuote),
                                          (r'/quotes/single',QuotesViewSingle),
                                          (r'/quotes/all',QuotesViewAll),
                                          (r'/quotes/random',QuotesViewRandom),
                                          ...
                                          ('/', MainHandler)],
                                         debug=True)
</snippet></ROW><ROW><id>4129838</id><snippet>class Quote(db.Model):
    author = db.StringProperty()
    string = db.StringProperty()


class MainHandler(webapp.RequestHandler):
    def get(self):
        user = users.get_current_user()


        quotes = Quote.all()
        path = os.path.join(os.path.dirname(__file__),'quotery.html')
        template_values = {'quotes':quotes,'user':user,'login_url':users.create_login_url('/')}
        self.response.out.write(template.render(path, template_values))


class QuoteHandler(webapp.RequestHandler):

    def __init__(self):
        self.actions = {'fetch':self.fetch, 'random':self.fetch_random}

        #Memcache the number of quotes in the datastore, to minimize datastore calls
        self.quote_count = memcache.get('quote_count')
        if not self.quote_count:
            self.quote_count = self.cache_quote_count()

    def cache_quote_count(self):
        count = Quote.all().count()
        memcache.add(key='quote_count', value=count, time=3600)
        return count


    def get(self, key):
        if key in self.actions:
            action = self.actions[key]
            action()




    def fetch(self):
        for quote in Quote.all():
            print 'Quote!'
            print 'Author: ',quote.author
            print 'String: ',quote.string
            print


    def fetch_random(self):
        max_offset = self.quote_count-1
        random_offset = random.randint(0,max_offset)
        '''self.response.out.write(max_offset)
        self.response.out.write('\n&lt;br/&gt;')
        self.response.out.write(random_offset)'''
        try:
            query = db.GqlQuery("SELECT * FROM Quote")
            quotes = query.fetch(1,random_offset)
            return quotes
            '''for quote in quotes:
                self.response.out.write(quote.author)
                self.response.out.write('\n')
                self.response.out.write(quote.string)'''
        except BaseException:
            raise


class NewQuote(webapp.RequestHandler):

    def post(self):
        author = self.request.get('quote_author')
        string = self.request.get('quote_string')

        if not author or not string:
            return False        
        quote = Quote()
        quote.author = author
        quote.string = string
        quote.put()
        QuoteHandler().cache_quote_count()
        self.redirect("/")
        #return True


class QuotesView(webapp.RequestHandler):

    def __init__(self):
        self.actions = {'all':self.view_all,'random':self.view_random,'get':self.view_single}

    def get(self, key):
        if not key or key not in self.actions:
            self.view_all()
        if key in self.actions:
            action = self.actions[key]
            action()

    def view_all(self):
        print 'view all'

    def view_random(self):
        quotes = QuoteHandler().fetch_random()
        template_data = {}

        for quote in quotes:
            template_data['quote'] = quote

        template_path = os.path.join(os.path.dirname(__file__),'base_view.html')
        self.response.out.write(template.render(template_path, template_data))


    def view_single(self):
        print 'view single'


def main():
    application = webapp.WSGIApplication([('/quote/new',NewQuote),(r'/quotes/(.*)',QuotesView),(r'/quote/(.*)',QuoteHandler),('/', MainHandler)],
                                         debug=True)
    util.run_wsgi_app(application)
</snippet></ROW><ROW><id>4129987</id><snippet>pyfoo.Bar()</snippet></ROW><ROW><id>4129987</id><snippet>_</snippet></ROW><ROW><id>4129987</id><snippet>class X:
    def __del__(self):
        print 'deleted'
</snippet></ROW><ROW><id>4129987</id><snippet> &gt;&gt;&gt;a = X()
 &gt;&gt;&gt;a = None
 deleted
 &gt;&gt;&gt;X()
 &lt;__main__.X instance at 0x7f391bb066c8&gt; 
 &gt;&gt;&gt; _
 &lt;__main__.X instance at 0x7f391bb066c8&gt;
 &gt;&gt;&gt; 3 # causes _ to be reassigned
 deleted
 3
</snippet></ROW><ROW><id>4129987</id><snippet>_</snippet></ROW><ROW><id>4129987</id><snippet>X</snippet></ROW><ROW><id>4130011</id><snippet>import numpy as np
import matplotlib.pyplot as plt

plt.ion()
mu, sigma = 100, 15
fig = plt.figure()
x = mu + sigma*np.random.randn(10000)
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='green', alpha=0.75)
for i in range(50):
    x = mu + sigma*np.random.randn(10000)
    n, bins = np.histogram(x, bins, normed=True)
    for rect,h in zip(patches,n):
        rect.set_height(h)
    fig.canvas.draw()
</snippet></ROW><ROW><id>4130011</id><snippet>plt.hist</snippet></ROW><ROW><id>4130011</id><snippet>matplotlib.patches.Rectangle</snippet></ROW><ROW><id>4130011</id><snippet>patches</snippet></ROW><ROW><id>4130011</id><snippet>fig.canvas.draw()</snippet></ROW><ROW><id>4130011</id><snippet>import numpy as np
import matplotlib.pyplot as plt

plt.ion()
mu, sigma = 100, 15
for i in range(50):
    x = mu + sigma*np.random.randn(10000)
    n, bins, patches = plt.hist(x, 50, normed=1, facecolor='green', alpha=0.75)
    plt.draw()
    plt.clf()
</snippet></ROW><ROW><id>4130537</id><snippet>import threading

sem = threading.Semaphore(0)

hostThread = threading.Thread(target=uploadToHost, args=(sem,))
backupThread = threading.Thread(target=uploadToBackup, args=(sem,))

sem.acquire() # Wait for one of them to finish
sem.acquire() # Wait for the other to finish
</snippet></ROW><ROW><id>4130537</id><snippet>sem.release</snippet></ROW><ROW><id>4131105</id><snippet>Fetcher</snippet></ROW><ROW><id>4131105</id><snippet>WSGIApplication</snippet></ROW><ROW><id>4131105</id><snippet>request</snippet></ROW><ROW><id>4131105</id><snippet>response</snippet></ROW><ROW><id>4131105</id><snippet>MainHandler</snippet></ROW><ROW><id>4131105</id><snippet>ViewQuoteHandler</snippet></ROW><ROW><id>4131105</id><snippet>fetcher = Fetcher()
fetcher.initialize(self.request, self.response)
quotes = fetcher.fetch_quotes()
</snippet></ROW><ROW><id>4131105</id><snippet>RequestHandler</snippet></ROW><ROW><id>4131114</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import calendar
&gt;&gt;&gt;
&gt;&gt;&gt; def add_months(sourcedate,months):
...     month = sourcedate.month - 1 + months
...     year = sourcedate.year + month / 12
...     month = month % 12 + 1
...     day = min(sourcedate.day,calendar.monthrange(year,month)[1])
...     return datetime.date(year,month,day)
...
&gt;&gt;&gt; somedate = datetime.date.today()
&gt;&gt;&gt; somedate
datetime.date(2010, 11, 9)
&gt;&gt;&gt; add_months(somedate,1)
datetime.date(2010, 12, 9)
&gt;&gt;&gt; add_months(somedate,23)
datetime.date(2012, 10, 9)
&gt;&gt;&gt; otherdate = datetime.date(2010,10,31)
&gt;&gt;&gt; add_months(otherdate,1)
datetime.date(2010, 11, 30)
</snippet></ROW><ROW><id>4131114</id><snippet>date</snippet></ROW><ROW><id>4131114</id><snippet>datetime</snippet></ROW><ROW><id>4131114</id><snippet>datetime</snippet></ROW><ROW><id>4131173</id><snippet>Counter</snippet></ROW><ROW><id>4131173</id><snippet>import collections
s = "helloworld"
print(collections.Counter(s).most_common(1)[0])
</snippet></ROW><ROW><id>4131173</id><snippet>defaultdict</snippet></ROW><ROW><id>4131173</id><snippet>d = collections.defaultdict(int)
for c in s:
    d[c] += 1
print(sorted(d.items(), key=lambda x: x[1], reverse=True)[0])
</snippet></ROW><ROW><id>4131453</id><snippet>Stop.objects.filter(approved_ts__isnull=False).order_by('line')
</snippet></ROW><ROW><id>4131695</id><snippet>Available versions:
current none python26 python26-apple
</snippet></ROW><ROW><id>4131695</id><snippet>sudo port install python27 
sudo port install python_select
sudo python_select python27
</snippet></ROW><ROW><id>4131711</id><snippet>print</snippet></ROW><ROW><id>4131726</id><snippet>framework</snippet></ROW><ROW><id>4131726</id><snippet>include</snippet></ROW><ROW><id>4131726</id><snippet>lib</snippet></ROW><ROW><id>4131726</id><snippet>bin</snippet></ROW><ROW><id>4131726</id><snippet>Fink</snippet></ROW><ROW><id>4131726</id><snippet>python.org</snippet></ROW><ROW><id>4131726</id><snippet>MacPorts</snippet></ROW><ROW><id>4131726</id><snippet>framework</snippet></ROW><ROW><id>4131726</id><snippet>port py27-matplotlib</snippet></ROW><ROW><id>4131726</id><snippet>Fink</snippet></ROW><ROW><id>4131726</id><snippet>MacPorts</snippet></ROW><ROW><id>4131821</id><snippet>__repr__</snippet></ROW><ROW><id>4131821</id><snippet>def __repr__(self):
   return '%s %s'%(self.amount,self.currency)
</snippet></ROW><ROW><id>4131877</id><snippet>myString = "fullName( name = 'Joe', family = 'Brand' )"
result = eval(myString)
</snippet></ROW><ROW><id>4131877</id><snippet>eval()</snippet></ROW><ROW><id>4131916</id><snippet>Plan.objects.filter(editors=request.user)
</snippet></ROW><ROW><id>4131983</id><snippet>split()</snippet></ROW><ROW><id>4131983</id><snippet>#!/usr/bin/env python
# -*- coding: utf8 -*-

import re
RE_TXT = re.compile(r'\|\s*X:(\S+)\s*\|\s*N\D*(\d+):\s*(.*)$')
txt = '|              |   | X:720                      | N°227: Done'
rx = RE_TXT.search(txt)
if rx:
    print(rx.group(1))
    print(rx.group(2))
    print(rx.group(3))

print('-' * 20)

# other way without regex, but with more complicated logic:
arr = [s.strip() for s in txt.split('|')]
if arr[3].startswith('X:'):
    print(arr[3].split(':')[1])
    N, state = arr[4].split(':')
    N = N[3:]
    state = state.strip()
    print(N)
    print(state)
</snippet></ROW><ROW><id>4131983</id><snippet>\s*</snippet></ROW><ROW><id>4131983</id><snippet>\S+</snippet></ROW><ROW><id>4131983</id><snippet>\d</snippet></ROW><ROW><id>4131983</id><snippet>\D</snippet></ROW><ROW><id>4131983</id><snippet>.</snippet></ROW><ROW><id>4131983</id><snippet>r</snippet></ROW><ROW><id>4132043</id><snippet>norm = sum(e**2 for e in y)**0.5
</snippet></ROW><ROW><id>4132227</id><snippet>Counter</snippet></ROW><ROW><id>4132227</id><snippet>from collections import defaultdict
d=defaultdict(int)
a = map(int,[x**0.5 for x in range(20)])
for i in a:
    d[i]+=1

print d
</snippet></ROW><ROW><id>4132751</id><snippet>for i in read:
    # the string.replace() function don't do the change at place
    # it's return a new string with the new changes.
    a = i.replace(" - ",",")  
    output.write(a)
</snippet></ROW><ROW><id>4132974</id><snippet>import array

BITS_PER_ITEM = array.array('I').itemsize * 8

def make_bit_array(num_bits, initially=0):
    num_items = (num_bits + BITS_PER_ITEM - 1) // BITS_PER_ITEM
    return array.array('I', [initially]) * num_items

def set_bit(bit_array, offset):
    item_index = offset // BITS_PER_ITEM
    bit_index = offset % BITS_PER_ITEM
    bit_array[item_index] |= 1 &lt;&lt; bit_index

def clear_bit(bit_array, offset):
    item_index = offset // BITS_PER_ITEM
    bit_index = offset % BITS_PER_ITEM
    bit_array[item_index] &amp;= ~(1 &lt;&lt; bit_index)

def get_bit(bit_array, offset):
    item_index = offset // BITS_PER_ITEM
    bit_index = offset % BITS_PER_ITEM
    return (bit_array[item_index] &gt;&gt; bit_index) &amp; 1
</snippet></ROW><ROW><id>4133655</id><snippet>.values()</snippet></ROW><ROW><id>4134241</id><snippet>$ bin/hadoop dfs -copyFromLocal /local/file/system/module.py module.py
</snippet></ROW><ROW><id>4134241</id><snippet>$ ./bin/hadoop jar /local/file/system/hadoop-0.21.0/mapred/contrib/streaming/hadoop-0.21.0-streaming.jar \
-file /local/file/system/data/data.txt \
-file /local/file/system/mapper.py \
-file /local/file/system/reducer.py \
-cacheFile hdfs://localhost:9000/user/you/module.py#module.py \
-input data.txt \
-output output/ \
-mapper mapper.py \
-reducer reducer.py \
-verbose
</snippet></ROW><ROW><id>4134241</id><snippet>import sys 
sys.path.append('.')
import module
</snippet></ROW><ROW><id>4134241</id><snippet>cli = "./binary %s" % (argument)
cli_parts = shlex.split(cli)
mp = Popen(cli_parts, stdin=PIPE, stderr=PIPE, stdout=PIPE)
mp.communicate()[0]
</snippet></ROW><ROW><id>4134523</id><snippet>find_packages()</snippet></ROW><ROW><id>4134523</id><snippet>setup(name='package',
      version='0.0dev1',
      description='blalal',
      author='me',
      packages=['package', 'package.sub_package', 'package.sub_package2'])
</snippet></ROW><ROW><id>4134575</id><snippet>numpy.place()</snippet></ROW><ROW><id>4134575</id><snippet>mask</snippet></ROW><ROW><id>4134575</id><snippet>True</snippet></ROW><ROW><id>4134575</id><snippet>==True</snippet></ROW><ROW><id>4134575</id><snippet>condit</snippet></ROW><ROW><id>4134609</id><snippet>markup.py</snippet></ROW><ROW><id>4134609</id><snippet>// well, this might come from somewhere else, but I guess you have such a list somewhere
features = [ 'AM/FM Radio', 'Air Conditioning', 'Anti-Lock Brakes (ABS)', 'Alarm', 'CD Player', 'Air Bags', 'Air Bags', 'Anti-Lock Brakes (ABS)', 'Alarm', 'Air Bags', 'Alarm', 'Air Bags' ]

// write the XML
markup.features.open()
markup.feature( features )
markup.features.close()
</snippet></ROW><ROW><id>4134609</id><snippet>set</snippet></ROW><ROW><id>4134609</id><snippet>// write the XML
markup.features.open()
markup.feature( set( features ) )
markup.features.close()
</snippet></ROW><ROW><id>4134609</id><snippet>list1 = [...]
list2 = [...]
list3 = [...]
features = set( list1 + list2 + list3 )
</snippet></ROW><ROW><id>4134793</id><snippet>except ProgrammingError as ex:
    if cursor:
        print "\n".join(cursor.messages) 
        # You can show only the last error like this.
        # print cursor.messages[-1]
    else:
        print "\n".join(self.db.messages)
        # Same here you can also do.
        # print self.db.messages[-1]
</snippet></ROW><ROW><id>4135148</id><snippet>def s_equation(a):
    left, right = a.split('=')
    return eval(left) == eval(right)
</snippet></ROW><ROW><id>4135148</id><snippet>&gt;&gt;&gt; s_equation('1+1+1=3')
True
&gt;&gt;&gt; s_equation('2*2=8')
False
</snippet></ROW><ROW><id>4135643</id><snippet>symmetrical=False</snippet></ROW><ROW><id>4135907</id><snippet>asyncore</snippet></ROW><ROW><id>4136230</id><snippet>return findWinner(remainingContestants)
</snippet></ROW><ROW><id>4136230</id><snippet>def findWinner(contestants):
    if (len(contestants) != 1):
        remainingContestants = []
        for i, contestant in enumerate(contestants, 1):
            if (isEven(i)):
                remainingContestants.append(contestant)
        return findWinner(remainingContestants) # here the value must be return
    return contestants # without the return above, it will just return this value(original)
</snippet></ROW><ROW><id>4136452</id><snippet>.9^10 = 0.34867844 = probability of 0 events
.1 * .9^9 * (10 choose 1) = .1 * .9^9 * 10 = 0.387420489 = probability of 1 event
</snippet></ROW><ROW><id>4136452</id><snippet>.1 * .9^10 * (10 choose 1) = 0.34867844 = incorrect probability of 1 event
</snippet></ROW><ROW><id>4136964</id><snippet>class IsStaffNode(Node):
    def __init__(self, var):
        self.var = var

    def render(self, context):
        if context['user'].is_staff():
            return var.resolve(context)
        return ""


@register.tag
def is_staff(parser, token):
    var = parser.compile_filter(token.split_contents()[1])
    return IsStaffNode(var)
</snippet></ROW><ROW><id>4136964</id><snippet>{% isstaff myvar %}&lt;td&gt;{{ myvar }}&lt;/td&gt;{% endisstaff %}
</snippet></ROW><ROW><id>4137129</id><snippet>Characters = {
    'A': MethodA,
    'B': MethodB,
    # ...
}
</snippet></ROW><ROW><id>4137129</id><snippet>s</snippet></ROW><ROW><id>4137129</id><snippet>s = "Pizza"
for c in s:
    c = c.upper() # to fold lowercase into upper case
    if c in Characters:
        Characters[c](width)
</snippet></ROW><ROW><id>4137129</id><snippet>Characters[c]</snippet></ROW><ROW><id>4137129</id><snippet>(width)</snippet></ROW><ROW><id>4137129</id><snippet>width</snippet></ROW><ROW><id>4137360</id><snippet>&gt;&gt;&gt; match = re.search(r"(?&lt;=').*?(?=')", "a 'quoted' string. 'second' quote")
&gt;&gt;&gt; print match.group(0)
quoted
</snippet></ROW><ROW><id>4137482</id><snippet>class CustomFileField(models.CharField):
    def to_python(self, value):
        ...
        return CustomFileResource(value)


class CustomFileResource:
    def __init__(self, *args, **kwargs):
        ....

    def uri(usr):
       #this method then gets the uri selectively based on the user . 
</snippet></ROW><ROW><id>4137838</id><snippet>range</snippet></ROW><ROW><id>4137838</id><snippet>def range(start, stop=None):
    if stop is None: # only one arg, treat stop as start ...
        stop = start
        start = 0
    ...
</snippet></ROW><ROW><id>4138087</id><snippet>$mytokenarray = explode($mydelimiter, $mystring)[1];
</snippet></ROW><ROW><id>4138087</id><snippet>Parse error: syntax error, unexpected '['</snippet></ROW><ROW><id>4138087</id><snippet>statement</snippet></ROW><ROW><id>4138087</id><snippet>expression</snippet></ROW><ROW><id>4138087</id><snippet>trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME</snippet></ROW><ROW><id>4138087</id><snippet>trailer</snippet></ROW><ROW><id>4138087</id><snippet>atom</snippet></ROW><ROW><id>4138087</id><snippet>[</snippet></ROW><ROW><id>4138155</id><snippet>None</snippet></ROW><ROW><id>4138155</id><snippet>request.session.get('user', None)</snippet></ROW><ROW><id>4138203</id><snippet>ipython -i -c "%run test.py 1 2 3 4"
</snippet></ROW><ROW><id>4138301</id><snippet>import re

p = re.compile('\d+(\.\d+)?')

a = raw_input('How much is 1 share in that company? ')

while p.match(a) == None:
    print "You need to write a number!\n"
    a = raw_input('How much is 1 share in that company? ')
</snippet></ROW><ROW><id>4138335</id><snippet>list()</snippet></ROW><ROW><id>4138586</id><snippet>form = forms[0]
form["searchcontents"] = "keyword"
</snippet></ROW><ROW><id>4138917</id><snippet>def collect_folders(start, depth=-1)
    """ negative depths means unlimited recursion """
    folder_ids = []

    # recursive function that collects all the ids in `acc`
    def recurse(current, depth):
        folder_ids.append(current.id)
        if depth != 0:
            for folder in getChildFolders(current.id):
                # recursive call for each subfolder
                recurse(folder, depth-1)

    recurse(start, depth) # starts the recursion
    return folder_ids
</snippet></ROW><ROW><id>4139226</id><snippet>addr = ("0.0.0.0", 8765)
</snippet></ROW><ROW><id>4139226</id><snippet>import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler

addr = ("0.0.0.0", 8765)

serv = BaseHTTPServer.HTTPServer(addr, SimpleHTTPRequestHandler)

serv.serve_forever()
</snippet></ROW><ROW><id>4139226</id><snippet>192.168.1.2 - - [09/Nov/2010 22:26:09] "GET / HTTP/1.1" 200 -
</snippet></ROW><ROW><id>4139278</id><snippet>def isAjax(request):
    return request.environ.get('HTTP_X_REQUEST_WITH') == 'XMLHttpRequest'
</snippet></ROW><ROW><id>4139462</id><snippet>basicConfig()</snippet></ROW><ROW><id>4139462</id><snippet>import logging

logger = logging.getLogger(__name__)
configured = False

def configure_logging():
    global configured
    if not configured:
        logger.setLevel(logging.DEBUG) # or whatever
        console = logging.StreamHandler()
        file = logging.FileHandler('/path/to/file')
        #set a level on the handlers if you want;
        #if you do, they will only output events that are &gt;= that level
        logger.addHandler(console)
        logger.addHandler(file)
        configured = True
</snippet></ROW><ROW><id>4139756</id><snippet>jsonResult = interp.ResultData().Print(SI_FORMAT_ECMA);
</snippet></ROW><ROW><id>4139756</id><snippet>  char* badFunction(void)
  {
     char test[100];
     strcpy(test,"This is really clever"); // oh, yeah?
     return test; // returns pointer to data that's out of scope
  }
</snippet></ROW><ROW><id>4139964</id><snippet>import threading
def launch_server():
    server = SocketServer.UDPServer((HOST, PORT), MyUDPHandler)
    print("working")
    server.serve_forever()

#carry on with your other code here.


#this belongs at the _bottom_ of your file! not the middle!
if __name__ == '__main__':
    server_thread = threading.Thread(target=launch_server, args=())
    server_thread.start()
</snippet></ROW><ROW><id>4140021</id><snippet>&gt;&gt;&gt; def f():
        return 1
&gt;&gt;&gt; a = defaultdict(f)
&gt;&gt;&gt; a[1]
1
</snippet></ROW><ROW><id>4140021</id><snippet>&gt;&gt;&gt; a = defaultdict(lambda: 1)
</snippet></ROW><ROW><id>4140759</id><snippet>#!/usr/bin/env python

import os

# A dict with keys being the old filenames and values being the new filenames
mapping = {}

# Read through the mapping file line-by-line and populate 'mapping'
with open('mapping.txt') as mapping_file:
    for line in mapping_file:
        # Split the line along whitespace
        # Note: this fails if your filenames have whitespace
        new_name, old_name = line.split()
        mapping[old_name] = new_name

suffix = '_full'

# List the files in the current directory
for filename in os.listdir('.'):
    root, extension = os.path.splitext(filename)
    if not root.endswith(suffix):
        # File doesn't end with this suffix; ignore it
        continue
    # Strip off the number of characters that make up suffix
    stripped_root = root[:-len(suffix)]
    if stripped_root in mapping:
        os.rename(filename, ''.join(mapping[stripped_root] + suffix + extension))
</snippet></ROW><ROW><id>4140759</id><snippet>mapping.txt</snippet></ROW><ROW><id>4140759</id><snippet>_full</snippet></ROW><ROW><id>4140759</id><snippet>sys.argv</snippet></ROW><ROW><id>4140836</id><snippet>from pyPdf import PdfFileWriter, PdfFileReader
from pdfnup import generateNup

output = PdfFileWriter()
input1 = PdfFileReader(file("in.pdf", "rb"))

page1 = input1.getPage(0)
page2 = input1.getPage(1)

output.addPage(page1)
output.addPage(page2)

outputStream = file("out.pdf", "wb")
output.write(outputStream)
outputStream.close()

generateNup("out.pdf", 2)
</snippet></ROW><ROW><id>4140849</id><snippet>from __future__ import with_statement
import random
import os

with open('File1', 'r') as f1:
    beginnings = [word.rstrip() for word in f1]

with open('File2', 'r') as f2:
    endings = [word.rstrip() for word in f2]

with open('File3', 'w') as f3:
    for beginning in beginnings:
        f3.write('%s %s' % (beginning, random.choice(endings)))
        f3.write(os.linesep)
</snippet></ROW><ROW><id>4140874</id><snippet>eval()</snippet></ROW><ROW><id>4140874</id><snippet># The typical person's notation for x-squared isn't valid Python
x^2 + x - 3
# 3x means 3 * x to us, but to python it means nothing
3x + 4
# Some people use % to represent division, but that's a modulo operator to Python
3 % 4x
# Python doesn't understand the distributive property
3(4 - x)
# People might use some functions in a way Python doesn't understand
cos x
# Square brackets are used synonymously with parentheses
x[(x^2 - 5)(x^3 - 5x)]
</snippet></ROW><ROW><id>4140952</id><snippet>h = int(raw_input("Please enter the height of the triangle: "))
for i in mytri(h):
    print " " * (h * 2), i
    h -= 1
</snippet></ROW><ROW><id>4140980</id><snippet>import time
value = time.time()
</snippet></ROW><ROW><id>4140988</id><snippet>import Tkinter as tk

class MyApp():
    def __init__(self):
        self.root = tk.Tk()

        # valid percent substitutions (from the Tk entry man page)
        # %d = Type of action (1=insert, 0=delete, -1 for others)
        # %i = index of char string to be inserted/deleted, or -1
        # %P = value of the entry if the edit is allowed
        # %s = value of entry prior to editing
        # %S = the text string being inserted or deleted, if any
        # %v = the type of validation that is currently set
        # %V = the type of validation that triggered the callback
        #      (key, focusin, focusout, forced)
        # %W = the tk name of the widget
        vcmd = (self.root.register(self.OnValidate), 
                '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')
        self.entry = tk.Entry(self.root, validate="key", 
                              validatecommand=vcmd)
        self.entry.pack()
        self.root.mainloop()

    def OnValidate(self, d, i, P, s, S, v, V, W):
        print "OnValidate:"
        print "d='%s'" % d
        print "i='%s'" % i
        print "P='%s'" % P
        print "s='%s'" % s
        print "S='%s'" % S
        print "v='%s'" % v
        print "V='%s'" % V
        print "W='%s'" % W
        # only allow if the string is lowercase
        return (S.lower() == S)

app=MyApp()
</snippet></ROW><ROW><id>4141064</id><snippet>scope &lt;&lt; (scope_header + ZeroOrMore((wire_map | scope)) + scope_footer)
</snippet></ROW><ROW><id>4141738</id><snippet>row1 = unicode( list_of_text_line[j] , errors='ignore') 
</snippet></ROW><ROW><id>4142178</id><snippet>__init__.py</snippet></ROW><ROW><id>4142178</id><snippet>from user import User
from dir import Dir
</snippet></ROW><ROW><id>4142178</id><snippet>__init__.py</snippet></ROW><ROW><id>4142178</id><snippet>from classes.user import User
from classes.dir import Dir
</snippet></ROW><ROW><id>4142280</id><snippet>from threading import Thread
class Worker(Thread):
    def __init__(self):
        Thread.__init__(self) #Runs the thread's constructor

    #Method that is run when the new thread starts
    def run(self):
        #Whatever data processing you have to do can go here
        while True:
            print "Hello from Worker"

w = Worker()
w.start() #Starts a new thread which executes the object's run function
</snippet></ROW><ROW><id>4142283</id><snippet>sock = httplib.HTTPConnection('server.com', 80)
data = "op=a_login_attempt"
headers = { "Host":"server.com",
            "Content-Type":"application/x-www-form-urlencoded; charset=UTF=8",
            "Referer":"server2.com",
            "Cookie":"session=12345678",}
sock.request("POST", '/login.php', data, headers)
</snippet></ROW><ROW><id>4142283</id><snippet>headers</snippet></ROW><ROW><id>4142283</id><snippet>data</snippet></ROW><ROW><id>4142283</id><snippet>request()</snippet></ROW><ROW><id>4142306</id><snippet>&gt;&gt;&gt; nums = (1, 2, 3, 4)
&gt;&gt;&gt; print "debug: %r" % (nums, )
debug: (1, 2, 3, 4)
&gt;&gt;&gt; print "debug: %r" % nums
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>4142490</id><snippet>[]</snippet></ROW><ROW><id>4142490</id><snippet>__getitem__</snippet></ROW><ROW><id>4142490</id><snippet>instance.__getitem__(...)</snippet></ROW><ROW><id>4142490</id><snippet>&gt;&gt;&gt; class Foo:
...     def __getitem__(self, value):
...             return value
...
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo["1"]
'1'
&gt;&gt;&gt; foo[0]
0
</snippet></ROW><ROW><id>4142490</id><snippet>0</snippet></ROW><ROW><id>4142490</id><snippet>index</snippet></ROW><ROW><id>4142490</id><snippet>__setitem__</snippet></ROW><ROW><id>4142490</id><snippet>__contains__</snippet></ROW><ROW><id>4142813</id><snippet>In [12]: class a1(object):
   ...:     pass

In [13]: def class_changer(cls_path, attr, val):
   ....:     try:
   ....:         obj = eval(cls_path)
   ....:         setattr(obj, attr, val)
   ....:     except:
   ....:         raise 
   ....:     
In [14]: def getGender(self):
   ...:     return True


In [15]: class_changer('a1','getGender', getGender)

In [16]: a1().getGender()
Out[16]: True
</snippet></ROW><ROW><id>4143103</id><snippet>class NameMixinMeta(type):
    def _get_name(self):
        return getattr(self, '_name', self.__name__)

    def _set_name(self, name):
        self._name = name

    name = property(_get_name, _set_name)

class NameMixin(object):
    __metaclass__ = NameMixinMeta
    def _get_name(self):
        return getattr(self, '_name', self.__class__.__name__)

    def _set_name(self, name):
        self._name = name

    name = property(_get_name, _set_name)

class A(NameMixin):
    _name = 'Class A'

class B(NameMixin):
    pass
</snippet></ROW><ROW><id>4143512</id><snippet>def mixer(*args):
    """Decorator for mixing mixins"""
    def inner(cls):
        for a,k in ((a,k) for a in args for k,v in vars(a).items() if callable(v)):
            setattr(cls, k, getattr(a, k).im_func)
        return cls
    return inner

class Mixin(object):
    def b(self): print "b()"
    def c(self): print "c()"

class Mixin2(object):
    def d(self): print "d()"
    def e(self): print "e()"


@mixer(Mixin, Mixin2)
class Foo(object):
    # Somehow mix in the behavior of the Mixin class,
    # so that all of the methods below will run and
    # the issubclass() test will be False.

    def a(self): print "a()"

f = Foo()
f.a()
f.b()
f.c()
f.d()
f.e()
print issubclass(Foo, Mixin)
</snippet></ROW><ROW><id>4143512</id><snippet>a()
b()
c()
d()
e()
False
</snippet></ROW><ROW><id>4143577</id><snippet>&gt;&gt;&gt; '  2    20  164 "guid" Some name^7            0 ip.a.dd.res:port    -21630 25000'.split()
['2', '20', '164', '"guid"', 'Some', 'name^7', '0', 'ip.a.dd.res:port', '-21630', '25000']
</snippet></ROW><ROW><id>4143744</id><snippet>0.01</snippet></ROW><ROW><id>4143744</id><snippet>0.0001100110011...</snippet></ROW><ROW><id>4143744</id><snippet>0.3333333333...</snippet></ROW><ROW><id>4143744</id><snippet>print(12.45-12)
</snippet></ROW><ROW><id>4143744</id><snippet>0.45
</snippet></ROW><ROW><id>4143744</id><snippet>print</snippet></ROW><ROW><id>4143755</id><snippet>&gt;&gt;&gt; s_id=11
&gt;&gt;&gt; [i for i in d['school'] if i['s_id'] == str(s_id)]
[{'s_id': '11', 'city': 'yy'}]
</snippet></ROW><ROW><id>4143774</id><snippet>try:
    [some code]
except MySQLdb.Warning:
    [exception handling code]
</snippet></ROW><ROW><id>4143837</id><snippet>defaultdict</snippet></ROW><ROW><id>4143837</id><snippet>setdefault</snippet></ROW><ROW><id>4143837</id><snippet> result = {}
 for widget_type, app in widgets:
     result.setdefault(widget_type, []).append(app)
</snippet></ROW><ROW><id>4144060</id><snippet>l</snippet></ROW><ROW><id>4144060</id><snippet>while</snippet></ROW><ROW><id>4144060</id><snippet>l</snippet></ROW><ROW><id>4144088</id><snippet>class MyAdmin(admin.ModelAdmin):
     def has_add_permission(self, request):
        return False
</snippet></ROW><ROW><id>4144333</id><snippet>echo "password" | scp me@localhost:test .
</snippet></ROW><ROW><id>4144672</id><snippet>Process.Start(
    "dpan.exe", 
    string.Format(
        "-np -Lwork_{0}.lib -Owork_{1}.lib \"{2}\" \"{3}.an\"", 
        option1, option2, sourceFile, destinationFile
    )
);
</snippet></ROW><ROW><id>4144675</id><snippet>if (...) {
|  if (...) {
|  |
|  }
} else {
|
|
}
</snippet></ROW><ROW><id>4144978</id><snippet>_mysql</snippet></ROW><ROW><id>4144978</id><snippet>MySQLdb</snippet></ROW><ROW><id>4145183</id><snippet>pythoncom</snippet></ROW><ROW><id>4145349</id><snippet>move</snippet></ROW><ROW><id>4145349</id><snippet>cmd</snippet></ROW><ROW><id>4145349</id><snippet>shutil.move()</snippet></ROW><ROW><id>4145411</id><snippet>MyPythonFile.py</snippet></ROW><ROW><id>4145411</id><snippet>* * * * * cd ~/desktop/WebProgramming ; python MyPythonScript.py
</snippet></ROW><ROW><id>4145486</id><snippet>repl</snippet></ROW><ROW><id>4145486</id><snippet>MatchObject</snippet></ROW><ROW><id>4145486</id><snippet>.group(1)</snippet></ROW><ROW><id>4145486</id><snippet>import re
s = 'start TT end'
callback = lambda pat: pat.group(1).lower()
re.sub(r'([A-Z]){2}', callback, s)
</snippet></ROW><ROW><id>4145486</id><snippet>([A-Z])\1</snippet></ROW><ROW><id>4145486</id><snippet>([A-Z]){2}</snippet></ROW><ROW><id>4145486</id><snippet>AZ</snippet></ROW><ROW><id>4145486</id><snippet>import re
s = 'start TT end'
re.sub(r'([A-Z])\1', lambda pat: pat.group(1).lower(), s) # Inline
</snippet></ROW><ROW><id>4145486</id><snippet>'start t end'
</snippet></ROW><ROW><id>4145859</id><snippet>import ctypes
arr = (ctypes.c_int * len(pyarr))(*pyarr)
</snippet></ROW><ROW><id>4146052</id><snippet>fruit_list = ['raspberry', 'apple', 'strawberry']
[ i for i, word in enumerate(fruit_list) if word.endswith('berry') ]
</snippet></ROW><ROW><id>4146052</id><snippet>[0, 2]
</snippet></ROW><ROW><id>4146052</id><snippet>endswith</snippet></ROW><ROW><id>4146343</id><snippet>__enter__</snippet></ROW><ROW><id>4146343</id><snippet>x[i] is roughly equivalent to ... type(x).__getitem__(x, i) for new-style classes</snippet></ROW><ROW><id>4146343</id><snippet>class foo(object):
    def __iadd__(self, i):
        print i
a = foo()
a += 1

class foo2(object):
    def __getattr__(self, key):
        print key
        raise AttributeError
b = foo2()
b += 1

class foo3(object):
    pass
def func(self, i):
    print i
c = foo3()
c.__iadd__ = func
c += 1
</snippet></ROW><ROW><id>4146343</id><snippet>__enter__</snippet></ROW><ROW><id>4146343</id><snippet>__exit__</snippet></ROW><ROW><id>4146343</id><snippet>__getattribute__</snippet></ROW><ROW><id>4146439</id><snippet>Optional kwargs control the Collection properties; in particular:

    edgecolors:
        The string ‘none’ to plot faces with no outlines
    facecolors:
        The string ‘none’ to plot unfilled outlines
</snippet></ROW><ROW><id>4146439</id><snippet>import matplotlib.pyplot as plt 
import numpy as np 

x = np.random.randn(60) 
y = np.random.randn(60)

plt.scatter(x, y, s=80, facecolors='none', edgecolors='r')
plt.show()
</snippet></ROW><ROW><id>4146737</id><snippet>class HypotheticalBranch(object):
  def __init__(self, r, p, c):
    self.r=r
    self.p=p
    self.c=c
  def __repr__(self):
    return "HypotheticalBranch(%d,%d,%d)" % (self.r,self.p,self.c)
</snippet></ROW><ROW><id>4146737</id><snippet>b=[ HypotheticalBranch(0,0,0),
  HypotheticalBranch(0,1,1),
  HypotheticalBranch(1,2,1),
  HypotheticalBranch(1,3,2),
  HypotheticalBranch(1,4,2) ]
</snippet></ROW><ROW><id>4146737</id><snippet>import collections, itertools

def get_combos(branches):
  rc=collections.defaultdict(list)
  for b in branches:
    rc[b.r,b.c].append(b)
  return itertools.product(*rc.values())
</snippet></ROW><ROW><id>4146737</id><snippet>for combo in get_combos(b):
  print "Combo:"
  for branch in combo:
    print "  %r" % (branch,)
</snippet></ROW><ROW><id>4146737</id><snippet>Combo:
  HypotheticalBranch(0,1,1)
  HypotheticalBranch(1,3,2)
  HypotheticalBranch(0,0,0)
  HypotheticalBranch(1,2,1)
Combo:
  HypotheticalBranch(0,1,1)
  HypotheticalBranch(1,4,2)
  HypotheticalBranch(0,0,0)
  HypotheticalBranch(1,2,1)
</snippet></ROW></DATA>