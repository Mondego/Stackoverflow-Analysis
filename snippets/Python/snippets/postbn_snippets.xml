<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>9331375</id><snippet>for day in Schedule:</snippet></ROW><ROW><id>9331375</id><snippet>day</snippet></ROW><ROW><id>9331375</id><snippet>len(Schedule)</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>Schedule.pop()</snippet></ROW><ROW><id>9331375</id><snippet>day</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>Schedule.key()[0]</snippet></ROW><ROW><id>9331375</id><snippet>day</snippet></ROW><ROW><id>9331375</id><snippet>Schedule</snippet></ROW><ROW><id>9331375</id><snippet>day</snippet></ROW><ROW><id>9331375</id><snippet>Schedule[0]</snippet></ROW><ROW><id>9331481</id><snippet>MySQLdb.connect(..., use_unicode=1,charset="utf8")</snippet></ROW><ROW><id>9331481</id><snippet>cur = db.cursor()
</snippet></ROW><ROW><id>9331481</id><snippet>risk = m['Text']
sql = """INSERT INTO posts(nmbr, msg, tel, sts) \
         VALUES (%s, %s, %s, %s)"""
values = (number, risk, 'smart', 'u')
cur.execute(sql,values)  #use comma to separate sql and values, this will ensure values are escaped/sanitized
cur.commit()
</snippet></ROW><ROW><id>9331481</id><snippet>msg = risk.encode('utf8')
text = db.escape_string(msg)
</snippet></ROW><ROW><id>9331709</id><snippet>try</snippet></ROW><ROW><id>9331709</id><snippet>IOError</snippet></ROW><ROW><id>9331709</id><snippet>Exception</snippet></ROW><ROW><id>9331709</id><snippet>except Exception:
</snippet></ROW><ROW><id>9331709</id><snippet>except</snippet></ROW><ROW><id>9331709</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>9331709</id><snippet>SystemExit</snippet></ROW><ROW><id>9332043</id><snippet>names_to_remove = set([r.rel.through._meta.object_name for r in m2m_links if not r.rel.through._meta.auto_created])
filtered_list = [r for r in o2m_links if r.rel.through._meta.object_name in names_to_remove]
</snippet></ROW><ROW><id>9332201</id><snippet>[lst.__setitem__(i, lst[i] + lst[i - c]) 
 for c in coins for i in range(c, maxi+1)]
</snippet></ROW><ROW><id>9332201</id><snippet>None</snippet></ROW><ROW><id>9332201</id><snippet>lst</snippet></ROW><ROW><id>9332201</id><snippet>lst = [1] + [0] * (maxi + 4)
</snippet></ROW><ROW><id>9332688</id><snippet>v[b1 &amp; b2]
</snippet></ROW><ROW><id>9332784</id><snippet>merged = {}

for item in original:
    key = (item['price'], item['tickettypecode'], item['oneway'])
    if key in merged:
        for mergekey in ['inboundJourneys','outboundJourneys']:
            # assign extended copy rather than using list.extend()
            merged[key][mergekey] = merged[key][mergekey] + item[mergekey]
    else:
        merged[key] = item.copy()

mergedlist = merged.values()
</snippet></ROW><ROW><id>9332805</id><snippet>Writer.getInfo()</snippet></ROW><ROW><id>9332805</id><snippet>self.getInfo()</snippet></ROW><ROW><id>9333260</id><snippet>print('The enemey gets hit for %d hitpoints' % damage)
</snippet></ROW><ROW><id>9333260</id><snippet>%</snippet></ROW><ROW><id>9333260</id><snippet>str.format</snippet></ROW><ROW><id>9333260</id><snippet>print('The enemey gets hit for {} hitpoints'.format(damage))
</snippet></ROW><ROW><id>9333260</id><snippet>damage</snippet></ROW><ROW><id>9333260</id><snippet>+</snippet></ROW><ROW><id>9333260</id><snippet>print('The enemey gets hit for ' + str(damage) + ' hitpoints')
</snippet></ROW><ROW><id>9333620</id><snippet>.xls</snippet></ROW><ROW><id>9333620</id><snippet>.xlsx</snippet></ROW><ROW><id>9333620</id><snippet>.csv</snippet></ROW><ROW><id>9333620</id><snippet>csv</snippet></ROW><ROW><id>9333620</id><snippet>csv</snippet></ROW><ROW><id>9334024</id><snippet>save_calendar</snippet></ROW><ROW><id>9334024</id><snippet>None</snippet></ROW><ROW><id>9334024</id><snippet>None</snippet></ROW><ROW><id>9334044</id><snippet>re.sub</snippet></ROW><ROW><id>9334044</id><snippet>re.sub</snippet></ROW><ROW><id>9334216</id><snippet># I prefer to importing django.forms
# but import the fields etc individually
# if you prefer 
from django import forms

class BooklogForm(forms.ModelForm):
    book_comment = forms.CharField(widget=forms.Textarea, label='')

    class Meta: 
        model = Booklog
        exclude = ('Author',)
</snippet></ROW><ROW><id>9334372</id><snippet>StdinCommand</snippet></ROW><ROW><id>9334372</id><snippet>Popen()</snippet></ROW><ROW><id>9334372</id><snippet>p = Popen(['/vol/thchem/x86_64-linux/bin/molpro'], shell = False, stdout = None, stderr = STDOUT, stdin = PIPE)
p.communicate(input = StdinCommand)
</snippet></ROW><ROW><id>9334562</id><snippet>stdin</snippet></ROW><ROW><id>9334562</id><snippet>$ python hello.py
asfasfasf
asfasfasfasfasf
&lt;TYPE CONTROL-D TO END STREAM&gt;
</snippet></ROW><ROW><id>9334562</id><snippet>&lt;</snippet></ROW><ROW><id>9334562</id><snippet>$ python hello.py &lt; inputfile.txt
</snippet></ROW><ROW><id>9334562</id><snippet>$ cat inputfile.txt | grep oranges | python hello.py
</snippet></ROW><ROW><id>9334562</id><snippet>stdin</snippet></ROW><ROW><id>9334562</id><snippet>sys.stdin = open('inputfile.txt')</snippet></ROW><ROW><id>9334562</id><snippet>print</snippet></ROW><ROW><id>9334849</id><snippet>rating = node.xpath('//t:rating', namespaces = {'t':'http://example/namespace'})
print rating[0].attrib['system']
</snippet></ROW><ROW><id>9334860</id><snippet>__call__</snippet></ROW><ROW><id>9334860</id><snippet>imports types
class F(types.FunctionType):
    pass
</snippet></ROW><ROW><id>9334860</id><snippet>type 'function' is not an acceptable base type
</snippet></ROW><ROW><id>9334860</id><snippet>class MyCallable(object):
    def __init__(self):
        self.message = "Look ma, I got called!"

    def __call__(self, *args, **kwargs):
        self.print_message()

    def print_message(self):
        print(self.message)


class CallableChild(object):
    def __call__(self, *args, **kwargs):
        super(CallableChild, self).__call__(*args, **kwargs)
        print "...as a child, too!"
</snippet></ROW><ROW><id>9334881</id><snippet>start</snippet></ROW><ROW><id>9334881</id><snippet>&lt;feature&gt;</snippet></ROW><ROW><id>9334881</id><snippet>root.clear()</snippet></ROW><ROW><id>9334881</id><snippet>import xml.etree.cElementTree as et
# Produces identical answers with import lxml.etree as et
import cStringIO

def normtext(t):
    return repr("" if t is None else t.strip())

def dump(el):
    print el.tag, normtext(el.text), normtext(el.tail), el.attrib

def my_filtered_elements(source, skip_parent_tag="feature"):
    # get an iterable
    context = et.iterparse(source, events=("start", "end"))
    # turn it into an iterator
    context = iter(context)
    # get the root element
    event, root = context.next()
    tag_stack = [None, root.tag]
    for event, elem in context:
        # print event, elem.tag, tag_stack
        if event == "start":
            tag_stack.append(elem.tag)
        else:
            assert event == "end"
            my_tag = tag_stack.pop()
            assert my_tag == elem.tag
            parent_tag = tag_stack[-1]
            if parent_tag is not None and parent_tag != skip_parent_tag:
                dump(elem)
                # yield elem
            root.clear()

def other_filtered_elements(source, skip_parent_tag="feature"):            
    in_feature_tag = False
    for event, element in et.iterparse(source, events=('start', 'end')):
        if element.tag == skip_parent_tag:
            in_feature_tag = event == 'start'
        if event == 'end' and not in_feature_tag:
            dump(element)            

test_input = """
&lt;top&gt;
    &lt;lev1 guff="1111"&gt;
        &lt;lev2&gt;aaaaa&lt;/lev2&gt;
        &lt;lev2&gt;bbbbb&lt;/lev2&gt;
    &lt;/lev1&gt;
    &lt;feature&gt;
        feat text 1
        &lt;fchild&gt;fcfcfcfc
            &lt;fgchild&gt;ggggg&lt;/fgchild&gt;    
        &lt;/fchild&gt;
        feat text 2
    &lt;/feature&gt;
    &lt;lev1 guff="2222"&gt;
        &lt;lev2&gt;ccccc&lt;/lev2&gt;c-tail
        &lt;lev2&gt;ddddd&lt;/lev2&gt;d-tail
        &lt;notext1&gt;&lt;/notext1&gt;e-tail
        &lt;notext2 /&gt;f-tail
     &lt;/lev1&gt;g-tail
&lt;/top&gt;
"""

print "=== me ==="
my_filtered_elements(cStringIO.StringIO(test_input))
print "=== other ==="
other_filtered_elements(cStringIO.StringIO(test_input))
</snippet></ROW><ROW><id>9334881</id><snippet>lev1</snippet></ROW><ROW><id>9334881</id><snippet>root.clear()</snippet></ROW><ROW><id>9334881</id><snippet>=== me ===
lev2 'aaaaa' '' {}
lev2 'bbbbb' '' {}
lev1 '' '' {'guff': '1111'}
fgchild 'ggggg' '' {}          &lt;&lt;&lt;=== do you want this?
feature 'feat text 1' '' {}
lev2 'ccccc' 'c-tail' {}
lev2 'ddddd' 'd-tail' {}
notext1 '' 'e-tail' {}
notext2 '' 'f-tail' {}
lev1 '' 'g-tail' {'guff': '2222'}
=== other ===
lev2 'aaaaa' '' {}
lev2 'bbbbb' '' {}
lev1 '' '' {'guff': '1111'}
feature 'feat text 1' '' {}
lev2 'ccccc' 'c-tail' {}
lev2 'ddddd' 'd-tail' {}
notext1 '' 'e-tail' {}
notext2 '' 'f-tail' {}
lev1 '' 'g-tail' {'guff': '2222'}
top '' '' {}                           &lt;&lt;&lt;=== do you want this?
</snippet></ROW><ROW><id>9334925</id><snippet>self.board</snippet></ROW><ROW><id>9334925</id><snippet>self.board = [['0']*7 for i in range(6)]
</snippet></ROW><ROW><id>9335128</id><snippet>object</snippet></ROW><ROW><id>9335128</id><snippet>class Animal(object):

  def __init__(self, color):
    self.color = color

  @classmethod
  def make_baby(cls):
    return cls(rand_color)   # randomly-chosen color
</snippet></ROW><ROW><id>9335128</id><snippet>Animal.make_baby()</snippet></ROW><ROW><id>9335128</id><snippet>Dog.make_baby()</snippet></ROW><ROW><id>9335136</id><snippet>Popen</snippet></ROW><ROW><id>9335136</id><snippet>current_session = Popen(["/usr/bin/ssh", x.address], stdin=PIPE, stdout=PIPE)
</snippet></ROW><ROW><id>9335288</id><snippet>"//*[contains(text(),'%s')]" % ('Sorry')
</snippet></ROW><ROW><id>9335288</id><snippet>import contextlib
import selenium.webdriver as webdriver
import selenium.webdriver.support.ui as ui

with contextlib.closing(webdriver.Firefox()) as driver:
    ...
    # Set up a WebDriverWait instance that will poll for up to 10 seconds
    wait = ui.WebDriverWait(driver, 10)
    # wait.until returns the value of the callback
    elt = wait.until(
        lambda driver: driver.find_element_by_xpath(
            "//*[contains(text(),'%s')]" % ('Sorry')
            ))
</snippet></ROW><ROW><id>9335288</id><snippet>find_element_by_xpath</snippet></ROW><ROW><id>9335288</id><snippet>def is_text_present(self, text):
    with open('/tmp/debug.html', 'w') as f:
        time.sleep(5)  # crude, but perhaps effective enough for debugging here. 
        f.write(driver.page_source)
    try:
        self.driver.find_element_by_xpath('//*[contains(text(), "%s")]' % (text))
    except NoSuchElementException, e:
        return False
    return True
</snippet></ROW><ROW><id>9335790</id><snippet>newList = list(set(a).difference(b))
</snippet></ROW><ROW><id>9335790</id><snippet>list(set(a) - set(b))
</snippet></ROW><ROW><id>9335901</id><snippet>toInteger()</snippet></ROW><ROW><id>9335901</id><snippet>int(entry[])</snippet></ROW><ROW><id>9336030</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

for opp in range(opp1,oppn+1):
    oppurl =  (www.myhomepage.com)
    response = urllib2.urlopen(oppurl)
    html = response.read()


    soup = BeautifulSoup(html)

    if soup.head.title == "Record doesn't exist":
            continue
        else:
            oppfilename = 'work/opptest'+str(opp)+'.htm'
            oppfile = open(oppfilename,'w')
            opp.write(opphtml)
            print 'Wrote ',oppfile
            votefile.close()
</snippet></ROW><ROW><id>9336030</id><snippet>HTMLParser</snippet></ROW><ROW><id>9336030</id><snippet>from HTMLParser import HTMLParser

def titleFinder(html):
    class MyHTMLParser(HTMLParser):
        def handle_starttag(self, tag, attrs):
            self.intitle = tag == "title"
        def handle_data(self, data):
            if self.intitle:
                self.title = data

    parser = MyHTMLParser()
    parser.feed(html)
    return parser.title

&gt;&gt;&gt; print titleFinder('&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;'
                '&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;')
Test
</snippet></ROW><ROW><id>9336030</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>9336030</id><snippet>import xml.dom.minidom
html = '&lt;html&gt;&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Parse me!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;'

title = ''.join(node.data for node in xml.dom.minidom.parseString(html).getElementsByTagName("title")[0].childNodes if node.nodeType == node.TEXT_NODE)

&gt;&gt;&gt; print title
Test
</snippet></ROW><ROW><id>9336038</id><snippet>COLUMN_VARIABLES = ['provider', 'language','subtype']
data = {}

for variable in COLUMN_VARIABLES:
    data[variable] = node.xpath("//%s/text()"%variable)[0] 
</snippet></ROW><ROW><id>9336099</id><snippet>allow_no_value</snippet></ROW><ROW><id>9336099</id><snippet>true</snippet></ROW><ROW><id>9336099</id><snippet>False</snippet></ROW><ROW><id>9336099</id><snippet>None</snippet></ROW><ROW><id>9336306</id><snippet>$ python -v stub_module.py
</snippet></ROW><ROW><id>9336306</id><snippet>logilab.astng.nodes.From</snippet></ROW><ROW><id>9336306</id><snippet>logilab.astng.nodes.Import</snippet></ROW><ROW><id>9336427</id><snippet>qmarks = ', '.join('?' * len(myDict))
qry = "Insert Into Table (%s) Values (%s)" % (qmarks, qmarks)
cursor.execute(qry, myDict.keys() + myDict.values())
</snippet></ROW><ROW><id>9336472</id><snippet>nargs='+'</snippet></ROW><ROW><id>9336472</id><snippet>nargs='*'</snippet></ROW><ROW><id>9336472</id><snippet>import argparse
the_parser = argparse.ArgumentParser()
the_parser.add_argument('--input_files',nargs='+')
args = the_parser.parse_args()
</snippet></ROW><ROW><id>9336472</id><snippet>subprocess</snippet></ROW><ROW><id>9336472</id><snippet>import subprocess
the_files = ['to_merge_1.txt', 'to_merge_2.txt']
cmdlnargs = ['python','argparse_example.py','--input_files']
cmdlnargs.extend(the_files)

subp = subprocess.Popen(cmdlnargs,
                        stdout=subprocess.PIPE, 
                        stdin=subprocess.PIPE,
                        stderr=subprocess.STDOUT)    
stdout, stderr = subp.communicate()
print stdout
</snippet></ROW><ROW><id>9336523</id><snippet>'\x81'</snippet></ROW><ROW><id>9336523</id><snippet>chr(129)</snippet></ROW><ROW><id>9336523</id><snippet>0x81</snippet></ROW><ROW><id>9336523</id><snippet>129</snippet></ROW><ROW><id>9336868</id><snippet>__dict__</snippet></ROW><ROW><id>9336868</id><snippet>__dict__</snippet></ROW><ROW><id>9336868</id><snippet>__dict__</snippet></ROW><ROW><id>9336868</id><snippet>import random
import multiprocessing
import functools

class my_decorator(object):
    def __init__(self, target):
        self.target = target
        try:
            functools.update_wrapper(self, target)
        except:
            pass

    def __call__(self, candidates, args):
        f = []
        for candidate in candidates:
            f.append(self.target([candidate], args)[0])
        return f

def old_my_func(candidates, args):
    f = []
    for c in candidates:
        f.append(sum(c))
    return f

my_func = my_decorator(old_my_func)

if __name__ == '__main__':
    candidates = [[random.randint(0, 9) for _ in range(5)] for _ in range(10)]
    pool = multiprocessing.Pool(processes=4)
    results = [pool.apply_async(my_func, ([c], {})) for c in candidates]
    pool.close()
    f = [r.get()[0] for r in results]
    print(f)
</snippet></ROW><ROW><id>9336868</id><snippet>functools.wraps</snippet></ROW><ROW><id>9336879</id><snippet>def records(textfile):
    record_lines = []
    for line in textfile:
        if line != '\n':
            record_lines.append(line)
        else:
            yield ''.join(record_lines)
            record_lines = []
    yield ''.join(record_lines)


for record in records(the_file):
    process(record)
</snippet></ROW><ROW><id>9336930</id><snippet># First example
if T[s - c * x, i]:
    T[s, i+1] = True
    # Key is (s, i+1)

# Second example
elif cursor.rowcount == 1:
    cursor.execute (""" UPDATE data_table SET state=True WHERE value = '%s'""" % ([s - c * x, i]))
    # Key is (s - c * x, i)
</snippet></ROW><ROW><id>9336930</id><snippet>(s, i+1)</snippet></ROW><ROW><id>9336930</id><snippet>(0, 0)</snippet></ROW><ROW><id>9336930</id><snippet>cursor.execute (""" INSERT INTO data_table (value, state) VALUES ('%s', True)""" % ([0, 0]))
conn.commit()
# Inserted the (0,0) case
for i, x in enumerate(data):
    for s in range(target_sum + 1):
        for c in range(s / x + 1):  
            cursor.execute(""" SELECT value, state FROM data_table WHERE value='%s' """ % ([s - c * x, i]))
            if cursor.rowcount == 0:
                cursor.execute (""" INSERT INTO data_table (value, state) VALUES ('%s', False)""" % ([s - c * x, i]))
            elif cursor.rowcount == 1:
                (value, state) = cursor.fetchone() # Gets the state
                if state: # equivalent to your if in the first example
                    insertOrUpdate(conn, [s, i+1])
    conn.commit()
</snippet></ROW><ROW><id>9336930</id><snippet>if</snippet></ROW><ROW><id>9336930</id><snippet>def insertOrUpdate(conn, key):
    cursor.execute(""" SELECT value, state FROM data_table WHERE value='%s' """ % key)
        if cursor.rowcount == 0:
            # Insert as True if not exists
            cursor.execute (""" INSERT INTO data_table (value, state) VALUES ('%s', True)""" % key)
        elif cursor.rowcount == 1:
            (value, state) = cursor.fetchone()
            if !state:
                # Update as True, if it was False
                cursor.execute (""" UPDATE data_table SET state=True WHERE value = '%s'""" % key)
</snippet></ROW><ROW><id>9336930</id><snippet>cursor = conn.cursor ()
cursor.execute ("DROP TABLE IF EXISTS data_table")
cursor.execute ("""
    CREATE TABLE data_table(
        value     CHAR(80)
    )
""")

cursor.execute (""" INSERT INTO data_table (value) VALUES ('%s')""" % [0, 0])
conn.commit()

for i, x in enumerate(data):    # i is index, x is data[i]
    for s in range(target_sum + 1): #set the range of one higher than sum to include sum itself
        for c in range(s / x + 1):  
            cursor.execute(""" SELECT value FROM data_table WHERE value='%s' """ % ([s - c * x, i]))
            if cursor.rowcount == 1:
                cursor.execute(""" SELECT value FROM data_table WHERE value='%s' """ % [s, i+1])
                if cursor.rowcount == 0:
                    cursor.execute (""" INSERT INTO data_table (value) VALUES ('%s')""" % [s, i+1])
    conn.commit()
</snippet></ROW><ROW><id>9337164</id><snippet>WSGIResource</snippet></ROW><ROW><id>9337164</id><snippet>mod_wsgi</snippet></ROW><ROW><id>9337164</id><snippet>WSGIResource</snippet></ROW><ROW><id>9337186</id><snippet>%s</snippet></ROW><ROW><id>9337186</id><snippet>?</snippet></ROW><ROW><id>9337186</id><snippet>%s</snippet></ROW><ROW><id>9337186</id><snippet># data = {...}
columns = ', '.join(data.keys())
format = ', '.join(['%s'] * len(data))
query = "INSERT INTO title (%s) VALUES (%s)" % (columns, format)
cursor.execute(query, data.values())
</snippet></ROW><ROW><id>9337549</id><snippet>RANGE_SIZE = 255-100
for index in range(256):
     array[index] = 100 + int( RANGE_SIZE * float(index) / 255.0 )
</snippet></ROW><ROW><id>9337766</id><snippet>import threading
def run(): print("Running")
for x in [threading.Thread(target=run) for i in range(1000)]:
    x.start()
</snippet></ROW><ROW><id>9337766</id><snippet>print</snippet></ROW><ROW><id>9337766</id><snippet>import threading,sys
def run(): sys.stdout.write("Running\n")
for x in [threading.Thread(target=run) for i in range(1000)]:
    x.start()
</snippet></ROW><ROW><id>9337766</id><snippet>write</snippet></ROW><ROW><id>9337988</id><snippet>The script is called: ex13.py
Your first variable is: cheese
Your second variable is: apples
You entered the following data: foo bar baz
</snippet></ROW><ROW><id>9338170</id><snippet>method2(**kwargs)
</snippet></ROW><ROW><id>9338516</id><snippet>float(i)</snippet></ROW><ROW><id>9338516</id><snippet>decimal.Decimal(i)</snippet></ROW><ROW><id>9338516</id><snippet>float</snippet></ROW><ROW><id>9338516</id><snippet>Decimal</snippet></ROW><ROW><id>9338516</id><snippet>readlines()</snippet></ROW><ROW><id>9338516</id><snippet>data = [float(number) \
        for number in line.split() \
        for line in open('data.txt', 'r')]
</snippet></ROW><ROW><id>9338516</id><snippet>int(float(number))</snippet></ROW><ROW><id>9339019</id><snippet>tab</snippet></ROW><ROW><id>9339019</id><snippet>space</snippet></ROW><ROW><id>9339019</id><snippet>space</snippet></ROW><ROW><id>9339019</id><snippet>tab</snippet></ROW><ROW><id>9339019</id><snippet>space</snippet></ROW><ROW><id>9339019</id><snippet>:set expandtab
:ret!
</snippet></ROW><ROW><id>9339019</id><snippet>.vimrc</snippet></ROW><ROW><id>9339019</id><snippet>set expandtab softtabstop=4 tabstop=4 shiftwidth=4
</snippet></ROW><ROW><id>9339246</id><snippet>STATICFILES_DIRS = ("/css")</snippet></ROW><ROW><id>9339246</id><snippet>STATICFILES_DIRS = ("/path/to/your/css", )</snippet></ROW><ROW><id>9339246</id><snippet>(eggs)</snippet></ROW><ROW><id>9339246</id><snippet>eggs</snippet></ROW><ROW><id>9339450</id><snippet>id(foo)</snippet></ROW><ROW><id>9339450</id><snippet>foo</snippet></ROW><ROW><id>9339450</id><snippet>repr(instance.__dict__)</snippet></ROW><ROW><id>9339450</id><snippet>repr</snippet></ROW><ROW><id>9339501</id><snippet>&gt;&gt;&gt; df.pivot('A', 'B', 'C')
  B  11  12  13
A              
10   a   b   c 
20   d   e   f 
</snippet></ROW><ROW><id>9339501</id><snippet>df</snippet></ROW><ROW><id>9339501</id><snippet>&gt;&gt;&gt; df = DataFrame(dict(A=[10]*3+[20]*3, B=range(11, 14)*2, C=list('abcdef')))
&gt;&gt;&gt; df
   A   B   C
0  10  11  a
1  10  12  b
2  10  13  c
3  20  11  d
4  20  12  e
5  20  13  f
</snippet></ROW><ROW><id>9339509</id><snippet>value.box.item</snippet></ROW><ROW><id>9339509</id><snippet>item</snippet></ROW><ROW><id>9339509</id><snippet>some_user.a_set.all()</snippet></ROW><ROW><id>9339509</id><snippet>a_set</snippet></ROW><ROW><id>9339509</id><snippet>&lt;model_name&gt;_set</snippet></ROW><ROW><id>9339509</id><snippet>some_user</snippet></ROW><ROW><id>9339509</id><snippet>&lt;model_name&gt;</snippet></ROW><ROW><id>9339509</id><snippet>some_B_object.box</snippet></ROW><ROW><id>9339509</id><snippet>value.box.a_set.all()</snippet></ROW><ROW><id>9339785</id><snippet>while true; do
    # Execute python script here
    echo "Web app monitoring script disrupted ... Restarting script."
done
</snippet></ROW><ROW><id>9339805</id><snippet>for file_chunk in uploaded_file.chunks():
    saved_file.write(file_chunk)
</snippet></ROW><ROW><id>9340069</id><snippet>get_defining_frame(bar)
</snippet></ROW><ROW><id>9340069</id><snippet>bar</snippet></ROW><ROW><id>9340162</id><snippet>datetime</snippet></ROW><ROW><id>9340162</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2012, 2, 18, 20, 38, 53, 271145)
</snippet></ROW><ROW><id>9340162</id><snippet>datetime.datetime.weekday</snippet></ROW><ROW><id>9340162</id><snippet>&gt;&gt;&gt; now.weekday()
5
</snippet></ROW><ROW><id>9340162</id><snippet>datetime.time</snippet></ROW><ROW><id>9340162</id><snippet>strptime</snippet></ROW><ROW><id>9340162</id><snippet>&gt;&gt;&gt; opening_time = datetime.time(11, 0, 0, 0)
&gt;&gt;&gt; closing_time = datetime.time(14, 0, 0, 0)
</snippet></ROW><ROW><id>9340162</id><snippet>&gt;&gt;&gt; opening_time &lt; now.time() &lt; closing_time
False
</snippet></ROW><ROW><id>9340191</id><snippet>\</snippet></ROW><ROW><id>9340191</id><snippet>r</snippet></ROW><ROW><id>9340191</id><snippet>s = r'\n'
print(s)
# -&gt; \n
</snippet></ROW><ROW><id>9340191</id><snippet>ord(s) == 10</snippet></ROW><ROW><id>9340191</id><snippet>s = '\n'
s = s.encode('unicode-escape').decode()
print(s)
# -&gt; \n
</snippet></ROW><ROW><id>9340279</id><snippet>name</snippet></ROW><ROW><id>9340279</id><snippet>io.StringIO</snippet></ROW><ROW><id>9340279</id><snippet>io</snippet></ROW><ROW><id>9340279</id><snippet>name</snippet></ROW><ROW><id>9340279</id><snippet>io.StringIO</snippet></ROW><ROW><id>9340279</id><snippet>setattr()</snippet></ROW><ROW><id>9340279</id><snippet>settattr()</snippet></ROW><ROW><id>9340279</id><snippet>class MockFile(StringIO):
    name = None
    def __init__(self, name, buffer_ = None):
        super(MockFile, self).__init__(buffer_)
        self.name = name     
</snippet></ROW><ROW><id>9340386</id><snippet>scipy.linsolve</snippet></ROW><ROW><id>9340386</id><snippet>from scipy import sparse
import scipy.sparse.linalg.dsolve as linsolve
</snippet></ROW><ROW><id>9340386</id><snippet>sparse</snippet></ROW><ROW><id>9340386</id><snippet>linsolve</snippet></ROW><ROW><id>9340914</id><snippet>x</snippet></ROW><ROW><id>9340914</id><snippet>for</snippet></ROW><ROW><id>9340914</id><snippet>[x for x in daterange(start_date, end_date) if x.date.weekday() in range(0,7)]
</snippet></ROW><ROW><id>9340987</id><snippet>keys</snippet></ROW><ROW><id>9341087</id><snippet>TextControl</snippet></ROW><ROW><id>9341247</id><snippet>sys.path</snippet></ROW><ROW><id>9341247</id><snippet>pty</snippet></ROW><ROW><id>9341580</id><snippet>su</snippet></ROW><ROW><id>9341580</id><snippet>sudo</snippet></ROW><ROW><id>9341580</id><snippet>sudo</snippet></ROW><ROW><id>9341859</id><snippet>from PyQt4.QtGui import *
import sys

class MainWindow(QMainWindow):
  def __init__(self):
    super(MainWindow, self).__init__()

    self.tray = QSystemTrayIcon(QApplication.style().standardIcon(QStyle.SP_DriveDVDIcon), self)
    m = QMenu()
    m.addAction('First')
    m.addAction('Second')
    self.tray.setContextMenu(m)
    self.tray.show()

    p = QPushButton("test", self)
    self.setCentralWidget(p)
    p.clicked.connect(self.onClick)

  def onClick(self):
    new_m = QMenu()
    new_m.addAction('First')
    new_m.addAction('Third')
    self.tray.setContextMenu(new_m)

app = QApplication(sys.argv)
w = MainWindow()
w.show();
sys.exit(app.exec_())
</snippet></ROW><ROW><id>9341859</id><snippet>QSystemTrayIcon</snippet></ROW><ROW><id>9341859</id><snippet>self.tray</snippet></ROW><ROW><id>9341859</id><snippet>tray</snippet></ROW><ROW><id>9342142</id><snippet>lettuce --with-xunit --xunit-file=test_results.xml</snippet></ROW><ROW><id>9342391</id><snippet>for recd in whitelist: 
    # if input domain doesn't match record read next record (continue)
    if recd.lower().rstrip() != domain.lower():  
        continue
    else: # otherwise if match set match indicator
        match = 1
    break # after setting indicator stop reading records
</snippet></ROW><ROW><id>9342391</id><snippet>for recd in whitelist:
    if recd.lower().rstrip() == domain.lower():
        match = 1
        break
</snippet></ROW><ROW><id>9342391</id><snippet>True</snippet></ROW><ROW><id>9342391</id><snippet>False</snippet></ROW><ROW><id>9342391</id><snippet>set</snippet></ROW><ROW><id>9342391</id><snippet>with open("whitelist.txt") as f:
    whitelist = set(ln.rstrip() for ln in f)
</snippet></ROW><ROW><id>9342391</id><snippet>while True:
    domain = input('Enter a domain or press return to exit: ')
    if not domain:
        break

    if domain in whitelist:
        print('Match on domain: ', domain)                
    else:   
        print('No match on: ', domain)
</snippet></ROW><ROW><id>9342391</id><snippet>while True</snippet></ROW><ROW><id>9342391</id><snippet>not domain</snippet></ROW><ROW><id>9342417</id><snippet>[ k for k in list if int(k['value']) != x ]
</snippet></ROW><ROW><id>9342417</id><snippet>filter</snippet></ROW><ROW><id>9342417</id><snippet>filter(lambda p: int(p['value']) != x, list)
</snippet></ROW><ROW><id>9342771</id><snippet>lambda</snippet></ROW><ROW><id>9342771</id><snippet>def</snippet></ROW><ROW><id>9342771</id><snippet>lambda</snippet></ROW><ROW><id>9342771</id><snippet>(lambda a: alert(1 if a == 1 else 0))(1)
</snippet></ROW><ROW><id>9342771</id><snippet>(lambda a: alert(a) if a == 1 else alert(0))(1)
</snippet></ROW><ROW><id>9343296</id><snippet>statuses</snippet></ROW><ROW><id>9343402</id><snippet>after</snippet></ROW><ROW><id>9343402</id><snippet>def blink(rect, canvas):
    current_color = canvas.itemcget(rect, "fill")
    new_color = "red" if current_color == "white" else "white"
    canvas.itemconfigure(rect, fill=new_color)
</snippet></ROW><ROW><id>9343402</id><snippet>root.after(1000, blink, rect, canv)
root.after(2000, blink, rect, canv)
root.after(3000, blink, rect, canv)
</snippet></ROW><ROW><id>9343402</id><snippet>blink</snippet></ROW><ROW><id>9343402</id><snippet>blink</snippet></ROW><ROW><id>9343402</id><snippet>blink</snippet></ROW><ROW><id>9343402</id><snippet>def blink(rect, canvas):
    ...
    # call this function again in a second to
    # blink forever. If you don't want to blink
    # forever, use some sort of flag or computation
    # to decide whether to call blink again
    canvas.after(1000, blink, rect, canvas)
</snippet></ROW><ROW><id>9343402</id><snippet>from tkinter import *

class MyApp(Tk):
    def __init__(self):
        Tk.__init__(self)
        fr = Frame(self)
        fr.pack()
        self.canvas  = Canvas(fr, height = 100, width = 100)
        self.canvas.pack()
        self.rect = self.canvas.create_rectangle(25, 25, 75, 75, fill = "white")
        self.do_blink = False
        start_button = Button(self, text="start blinking", 
                              command=self.start_blinking)
        stop_button = Button(self, text="stop blinking", 
                              command=self.stop_blinking)
        start_button.pack()
        stop_button.pack()

    def start_blinking(self):
        self.do_blink = True
        self.blink()

    def stop_blinking(self):
        self.do_blink = False

    def blink(self):
        if self.do_blink:
            current_color = self.canvas.itemcget(self.rect, "fill")
            new_color = "red" if current_color == "white" else "white"
            self.canvas.itemconfigure(self.rect, fill=new_color)
            self.after(1000, self.blink)


if __name__ == "__main__":
    root = MyApp()
    root.mainloop()
</snippet></ROW><ROW><id>9343460</id><snippet>&gt;&gt;&gt; from sympy import var, Wild, exp
&gt;&gt;&gt; s = var("s")
&gt;&gt;&gt; t = var("t")
&gt;&gt;&gt; a = Wild("a")
&gt;&gt;&gt; b = Wild("b")
&gt;&gt;&gt; U = 3/(7+s)
</snippet></ROW><ROW><id>9343460</id><snippet>.match</snippet></ROW><ROW><id>9343460</id><snippet>&gt;&gt;&gt; U.match(b/(a+s))
{b_: 3, a_: 7}
&gt;&gt;&gt; m = U.match(b/(a+s))
</snippet></ROW><ROW><id>9343460</id><snippet>.subs</snippet></ROW><ROW><id>9343460</id><snippet>&gt;&gt;&gt; target = b*exp(-a*t)
&gt;&gt;&gt; target
b_*exp(-t*a_)
&gt;&gt;&gt; target.subs(m)
3*exp(-7*t)
</snippet></ROW><ROW><id>9343539</id><snippet>Strict=False</snippet></ROW><ROW><id>9343902</id><snippet>csv</snippet></ROW><ROW><id>9343902</id><snippet>csv</snippet></ROW><ROW><id>9343902</id><snippet>import glob
import os
import csv
import zipfile
import StringIO

for name in glob.glob('C:/Projects/abase/*.zip'):
    base = os.path.basename(name)
    filename = os.path.splitext(base)[0]


    datadirectory = 'C:/Projects/abase/'
    dataFile = filename
    archive = '.'.join([dataFile, 'zip'])
    fullpath = ''.join([datadirectory, archive])
    csv_file = '.'.join([dataFile, 'csv']) #all fixed


    filehandle = open(fullpath, 'rb')
    zfile = zipfile.ZipFile(filehandle)
    data = StringIO.StringIO(zfile.read(csv_file)) #don't forget this line!
    reader = csv.reader(data)

    for row in reader:
        print row
</snippet></ROW><ROW><id>9343941</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="node()|@*"&gt;
  &lt;xsl:copy&gt;
   &lt;xsl:apply-templates select="node()|@*"/&gt;
  &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;

 &lt;xsl:template match="*[not(normalize-space(.))]"/&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>9343941</id><snippet>&lt;html&gt;
 &lt;body&gt;
   Welcome.
   &lt;p style="text-align: justify;"&gt;&lt;i&gt; &lt;/i&gt;&lt;/p&gt;
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9343941</id><snippet>&lt;html&gt;

   &lt;body&gt;
      Welcome.


   &lt;/body&gt;

&lt;/html&gt;
</snippet></ROW><ROW><id>9344043</id><snippet>from stemming.porter2 import stem

documents = ["Human machine interface for lab abc computer applications",
             "A survey of user opinion of computer system response time",
             "The EPS user interface management system",
             "System and human system engineering testing of EPS",
             "Relation of user perceived response time to error measurement",
             "The generation of random binary unordered trees",
             "The intersection graph of paths in trees",
             "Graph minors IV Widths of trees and well quasi ordering",
             "Graph minors A survey"]

documents = [[stem(word) for word in sentence.split(" ")] for sentence in documents]
</snippet></ROW><ROW><id>9344043</id><snippet>documents = [stem(word) for sentence in documents for word in sentence.split(" ")]
</snippet></ROW><ROW><id>9344043</id><snippet>documents = [" ".join(sentence) for sentence in documents]
</snippet></ROW><ROW><id>9344043</id><snippet>documents = [" ".join([stem(word) for word in sentence.split(" ")]) for sentence in documents]
</snippet></ROW><ROW><id>9344043</id><snippet>documents = " ".join(documents)
</snippet></ROW><ROW><id>9344323</id><snippet>loaded</snippet></ROW><ROW><id>9344323</id><snippet>saved</snippet></ROW><ROW><id>9344323</id><snippet>class FooPlugin(GObject.Object, Gedit.WindowActivatable):

    __gtype_name__ = 'Foo'
    ...

    def do_activate(self):
        self._add_ui()
        self.window.connect('tab-added', self.on_tab_added)
        ...
        return

    def on_tab_added(self, window, tab, data=None):
        doc = tab.get_document()
        doc.connect('saved', self.on_document_saved)
        doc.connect('loaded', self.on_document_loaded)
        return

    def on_document_loaded(self, document, data=None):
        # do something here...
        return

    def on_document_saved(self, document, data=None):
        # do something here...
        return
</snippet></ROW><ROW><id>9344394</id><snippet>if number in numbers: print number
</snippet></ROW><ROW><id>9344394</id><snippet>if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
</snippet></ROW><ROW><id>9344394</id><snippet>if foo == 'blah': do_blah_thing()
do_one(); do_two(); do_three()
</snippet></ROW><ROW><id>9344547</id><snippet>@echo off
setlocal
if "%~1" neq "" goto :test

:: Initialize
set log="myLog.log"
2&gt;nul del %log%
2&gt;nul del "test*.marker"
set procCount=5
set testCount=10

:: Launch %procCount% processes that write to the same log
for /l %%n in (1 1 %procCount%) do start "" /b "%~f0" %%n

:wait for child processes to finish
2&gt;nul dir /b "test*.marker" | find /c "test" | &gt;nul findstr /x "%procCount%" || goto :wait

:: Verify log results
for /l %%n in (1 1 %procCount%) do (
  &lt;nul set /p "=Proc %%n log count = "
  find /c "Proc %%n: " &lt;%log%
)

:: Cleanup
del "test*.marker"
exit /b

==============================================================================
:: code below is the process that writes to the log file

:test
set instance=%1
for /l %%n in (1 1 %testCount%) do (
  call :log echo Proc %instance% says hello!
  call :log dir "%~f0"
)
echo done &gt;"test%1.marker"
exit

:log command args...
2&gt;nul (
  &gt;&gt;%log% (
    echo ***********************************************************
    echo Proc %instance%: %date% %time%
    %*
    (call ) %= This odd syntax guarantees the inner block ends with success  =%
            %= We only want to loop back and try again if redirection failed =%
  )
) || goto :log
exit /b
</snippet></ROW><ROW><id>9344547</id><snippet>Proc 1 log count = 20
Proc 2 log count = 20
Proc 3 log count = 20
Proc 4 log count = 20
Proc 5 log count = 20
</snippet></ROW><ROW><id>9344547</id><snippet>:log command args...
&gt;&gt;%log% (
  echo ***********************************************************
  echo Proc %instance%: %date% %time%
  %*
)
exit /b
</snippet></ROW><ROW><id>9344547</id><snippet>The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
The process cannot access the file because it is being used by another process.
Proc 1 log count = 12
Proc 2 log count = 16
Proc 3 log count = 13
Proc 4 log count = 18
Proc 5 log count = 14
</snippet></ROW><ROW><id>9344689</id><snippet>ndenumerate</snippet></ROW><ROW><id>9344689</id><snippet>vectorize</snippet></ROW><ROW><id>9344689</id><snippet>ndenumerate</snippet></ROW><ROW><id>9344689</id><snippet>scipy.ndimage.label</snippet></ROW><ROW><id>9344883</id><snippet>action</snippet></ROW><ROW><id>9344883</id><snippet>choices</snippet></ROW><ROW><id>9344883</id><snippet>class LoggedAction(models.Model):
    ACTIONS = (
       ('I', 'logged in'),
       ('O', 'logged out')
    )
    user = models.ForeignKey(User)
    timestamp = models.DateTimeField(auto_now_add=True)
    action = models.CharField(max_length=1, choices=ACTIONS)

    def __unicode__(self):
        return u"%s: %s %s" % (self.timestamp, self.user, self.get_action_display())
</snippet></ROW><ROW><id>9344883</id><snippet>get_action_display()</snippet></ROW><ROW><id>9345000</id><snippet>redirect</snippet></ROW><ROW><id>9345000</id><snippet>return redirect("/inputs/listdelivriedsupplierrequest/")
</snippet></ROW><ROW><id>9345059</id><snippet>def rk(p,q,h):
    pass # your code here

if __name__ == '__main__':
    rk(1,2,1)
</snippet></ROW><ROW><id>9345059</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>9345059</id><snippet>def rk(p,q,h):
    pass # your code here

if __name__ == '__main__':
    import argparse
    the_parser = argparse.ArgumentParser()
    the_parser.add_argument('integers', type=int, nargs=3)
    args = the_parser.parse_args()
    p,q,h = args.integers
    rk(p,q,h)
</snippet></ROW><ROW><id>9345064</id><snippet>class ModelControllerMetaclass(type):
  def __init__(cls, name, bases, dct):
    if 'options' not in dct or not hasattr(dct['options'], 'model'):
      raise RuntimeError('You accidentally the model!')
    dct['_model'] = dct['options'].model
    # Some more manipulation of dct['options']
    del dct['options']
    type.__init__(cls, name, bases, dct)

class ModelController(object):
  __metaclass__ = ModelControllerMetaclass
  class options:
    model = None

class ArticleModelController(ModelController):
  class options:
    model = 'Some model goes here'

class InvalidModelController(ModelController):
  pass
</snippet></ROW><ROW><id>9345064</id><snippet>$ python t.py
Traceback (most recent call last):
  File "t.py", line 19, in &lt;module&gt;
    class InvalidModelController(ModelController):
  File "t.py", line 4, in __init__
    raise RuntimeError('You accidentally the model!')
RuntimeError: You accidentally the model!
</snippet></ROW><ROW><id>9345277</id><snippet>lambda</snippet></ROW><ROW><id>9345277</id><snippet>print</snippet></ROW><ROW><id>9345277</id><snippet>from __future__ import print_function
x in l and print('foo')
</snippet></ROW><ROW><id>9345277</id><snippet>x in l and print('foo') or print('bar')
</snippet></ROW><ROW><id>9345277</id><snippet>None</snippet></ROW><ROW><id>9345277</id><snippet>and</snippet></ROW><ROW><id>9345277</id><snippet>print</snippet></ROW><ROW><id>9345277</id><snippet>and</snippet></ROW><ROW><id>9345277</id><snippet>or</snippet></ROW><ROW><id>9345277</id><snippet>print('foo') if x in l else print('bar')
</snippet></ROW><ROW><id>9345277</id><snippet>if-else</snippet></ROW><ROW><id>9345447</id><snippet>date_in_history = date.today() - timedelta(days=(p_year * 365)
</snippet></ROW><ROW><id>9345447</id><snippet>date_in_history = date.today() - timedelta(days=(p_year * 365))
                                                              ^
                                                              |
                                                       it was this one :)
</snippet></ROW><ROW><id>9345447</id><snippet>timedelta</snippet></ROW><ROW><id>9345447</id><snippet>+100</snippet></ROW><ROW><id>9345447</id><snippet>(p_year * 365)</snippet></ROW><ROW><id>9345447</id><snippet>&gt;&gt;&gt; t = ('one', 'two',
...      'three'
... def f(): pass
  File "&lt;stdin&gt;", line 3
    def f(): pass
      ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>9345447</id><snippet>'fourth'</snippet></ROW><ROW><id>9345447</id><snippet>&gt;&gt;&gt; t = ('one', 'two',
...      'three'
...      'fourth')
&gt;&gt;&gt; 
&gt;&gt;&gt; t
('one', 'two', 'threefourth')
</snippet></ROW><ROW><id>9345447</id><snippet>return True</snippet></ROW><ROW><id>9345590</id><snippet>import os, sys, pygst
pygst.require('0.10')
import gst, gobject
gobject.threads_init()

def get_peaks(filename):
    global do_run

    pipeline_txt = (
        'filesrc location="%s" ! decodebin ! audioconvert ! '
        'audio/x-raw-int,channels=1,rate=44100,endianness=1234,'
        'width=32,depth=32,signed=(bool)True !'
        'level name=level interval=1000000000 !'
        'fakesink' % filename)
    pipeline = gst.parse_launch(pipeline_txt)

    level = pipeline.get_by_name('level')
    bus = pipeline.get_bus()
    bus.add_signal_watch()

    peaks = []
    do_run = True

    def show_peak(bus, message):
        global do_run
        if message.type == gst.MESSAGE_EOS:
            pipeline.set_state(gst.STATE_NULL)
            do_run = False
            return
        # filter only on level messages
        if message.src is not level or \
           not message.structure.has_key('peak'):
            return
        peaks.append(message.structure['peak'][0])

    # connect the callback
    bus.connect('message', show_peak)

    # run the pipeline until we got eos
    pipeline.set_state(gst.STATE_PLAYING)
    ctx = gobject.gobject.main_context_default()
    while ctx and do_run:
        ctx.iteration()

    return peaks

def normalize(peaks):
    _min = min(peaks)
    _max = max(peaks)
    d = _max - _min
    return [(x - _min) / d for x in peaks]

if __name__ == '__main__':
    filename = os.path.realpath(sys.argv[1])
    peaks = get_peaks(filename)

    print 'Sample is %d seconds' % len(peaks)
    print 'Minimum is', min(peaks)
    print 'Maximum is', max(peaks)

    peaks = normalize(peaks)
    print peaks
</snippet></ROW><ROW><id>9345590</id><snippet>$ python gstreamerpeak.py 01\ Tron\ Legacy\ Track\ 1.mp3 
Sample is 182 seconds
Minimum is -349.999999922
Maximum is -2.10678956719
[0.0, 0.0, 0.9274581631597019, 0.9528318436488018, 0.9492396611762614,
0.9523404330322813, 0.9471685835966183, 0.9537281219301242, 0.9473486577135167,
0.9479292126411365, 0.9538221105563514, 0.9483845795252251, 0.9536790832823281,
0.9477264933378022, 0.9480077366961968, ...
</snippet></ROW><ROW><id>9345955</id><snippet>and</snippet></ROW><ROW><id>9345955</id><snippet>&amp;&amp;</snippet></ROW><ROW><id>9345955</id><snippet>is</snippet></ROW><ROW><id>9345955</id><snippet>is not</snippet></ROW><ROW><id>9345955</id><snippet>if p is not None and (self.running is None or self.running &lt; p):
    self.preempt(p)
</snippet></ROW><ROW><id>9346042</id><snippet>dict</snippet></ROW><ROW><id>9346042</id><snippet>class myset(MutableSet):
    def __init__(self, iterable=()):
        self.dictset = {}
        self.dictset.update(iterable)

    def __bomb__(s, *a, **k): raise NotImplementedError
    add = discard = __contains__ = __iter__ = __len__ = __bomb__
</snippet></ROW><ROW><id>9346042</id><snippet>set: 10 10
frozenset: 10 10
Set: 10 20
myset: 10 10
</snippet></ROW><ROW><id>9346042</id><snippet>update</snippet></ROW><ROW><id>9346042</id><snippet>iterable</snippet></ROW><ROW><id>9346042</id><snippet>dict(mapping)</snippet></ROW><ROW><id>9346042</id><snippet>dict.fromkeys(mapping, default_val)</snippet></ROW><ROW><id>9346042</id><snippet>__hash__</snippet></ROW><ROW><id>9346042</id><snippet>dict</snippet></ROW><ROW><id>9346042</id><snippet>dict</snippet></ROW><ROW><id>9346042</id><snippet>fromkeys</snippet></ROW><ROW><id>9346042</id><snippet>fromkeys</snippet></ROW><ROW><id>9346042</id><snippet>&gt;&gt;&gt; a = dict((hash_counting_int(x), []) for x in range(10))
&gt;&gt;&gt; [x.count for x in a.keys()]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; b = dict(a)
&gt;&gt;&gt; [x.count for x in a.keys()]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; for n, v in enumerate(b.itervalues()):
...     v.append(n)
... 
&gt;&gt;&gt; [x.count for x in a.keys()]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
&gt;&gt;&gt; b
{0: [0], 1: [1], 2: [2], 3: [3], 4: [4], 5: [5], 6: [6], 7: [7], 8: [8], 9: [9]}
</snippet></ROW><ROW><id>9346042</id><snippet>dict</snippet></ROW><ROW><id>9346119</id><snippet>import numpy as np
import scipy.optimize

mat = np.random.randn(5, 7)

def F(x):
    y = np.dot(mat, x)
    return np.resize(np.array([ y[0]**2 + y[1]**3 + 12, y[2] + 17]), 7)

while True:    
    x0 = np.random.randn(7)
    r = scipy.optimize.leastsq(F, x0)
    err = F(r[0])
    norm =  np.dot(err, err)
    if norm &lt; 1e-6:
        break

print err
</snippet></ROW><ROW><id>9346159</id><snippet>from decimal import *
getcontext().prec = 6
Decimal(1) / Decimal(7)
Decimal('0.142857')
getcontext().prec = 28
Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
</snippet></ROW><ROW><id>9346229</id><snippet>import HTMLParser     # html.parser in Python 3
h = HTMLParser.HTMLParser()
h.unescape('Bayern München')
</snippet></ROW><ROW><id>9346297</id><snippet>newRow</snippet></ROW><ROW><id>9346297</id><snippet>matrix = []                                      newRow = [] &lt;- the same array
for i in range(0,3):                             matrix = []
    newRow = [] &lt;- a new array                   for i in range(0,3):
    for j in range(0,5):         instead of          for j in range(0,5):
        newRow.append(j)                                 newRow.append(j)
    matrix.append(newRow)                            matrix.append(newRow)
</snippet></ROW><ROW><id>9346299</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'flammenmeer_test',
        'USER': 'flammenmeer_test',
        'PASSWORD': 'blahblahblah',
        'HOST': '',
        'PORT': '',
    }
}
</snippet></ROW><ROW><id>9346334</id><snippet>int(answer) != entryWidget.get().strip()
</snippet></ROW><ROW><id>9346334</id><snippet>int(answer) != int(entryWidget.get().strip())
</snippet></ROW><ROW><id>9346416</id><snippet>&lt;p&gt;...&lt;/p&gt;</snippet></ROW><ROW><id>9346416</id><snippet>c</snippet></ROW><ROW><id>9346416</id><snippet>more contents</snippet></ROW><ROW><id>9346416</id><snippet># position in element tree, bounding box, tag, text:
(0, 0) [0, 0, 75, 165] HTML - u'c\nr1 c1\tr1 c2\nrow2 c2\nmore contents'
(1, 1) [8, 8, 67, 157] BODY - u'c\nr1 c1\tr1 c2\nrow2 c2\nmore contents'
(2, 0) [8, 27, 75, 119] TABLE - u'r1 c1\tr1 c2\nrow2 c2'
(3, 0) [9, 28, 74, 118] TBODY - u'r1 c1\tr1 c2\nrow2 c2'
(4, 0) [9, 30, 74, 72] TR - u'r1 c1\tr1 c2'
(5, 0) [11, 30, 32, 72] TD - u'r1 c1'
(5, 1) [34, 30, 72, 72] TD - u'r1 c2'
(4, 1) [9, 74, 74, 116] TR - u'row2 c2'
(5, 1) [34, 74, 72, 116] TD - u'row2 c2'
</snippet></ROW><ROW><id>9346416</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *

class WebPage(QObject):
    finished = Signal()
    def __init__(self, data, parent=None):
        super(WebPage, self).__init__(parent)
        self.output = []
        self.data = data
        self.page = QWebPage()
        self.page.loadFinished.connect(self.process)

    def start(self):
        self.page.mainFrame().setHtml(self.data)

    @Slot(bool)
    def process(self, something=False):
        self.page.setViewportSize(self.page.mainFrame().contentsSize())
        frame = self.page.currentFrame()
        elem = frame.documentElement()
        self.gather_info(elem)
        self.finished.emit()

    def gather_info(self, elem, i=0):
        if i &gt; 200: return
        cnt = 0
        while cnt &lt; 100:
            s = elem.toPlainText()
            rect = elem.geometry()
            name = elem.tagName()
            dim = [rect.x(), rect.y(), 
                rect.x() + rect.width(), rect.y() + rect.height()]
            if s: self.output.append(dict(pos=(i, cnt), dim=dim, tag=name, text=s))
            child = elem.firstChild()
            if not child.isNull():
                self.gather_info(child, i+1)
            elem = elem.nextSibling()
            if elem.isNull(): 
                break
            cnt += 1

webpage = None

def print_strings():
    for s in webpage.output:
        print s['pos'], s['dim'], s['tag'], '-',  repr(s['text'])

if __name__ == '__main__':
    app = QApplication(sys.argv)
    data = open(sys.argv[1]).read()
    webpage = WebPage(data)
    webpage.finished.connect(print_strings)
    webpage.start()
</snippet></ROW><ROW><id>9346416</id><snippet>QWebPage</snippet></ROW><ROW><id>9346416</id><snippet>webpage.currentFrame().documentElement().toPlainText()</snippet></ROW><ROW><id>9346416</id><snippet>QWebElement</snippet></ROW><ROW><id>9346416</id><snippet>X</snippet></ROW><ROW><id>9346416</id><snippet>&lt;span class="Nd92KSx3u2"&gt;X&lt;/span&gt;</snippet></ROW><ROW><id>9346416</id><snippet>findAllElements('span[class="Nd92KSx3u2"]')</snippet></ROW><ROW><id>9346416</id><snippet>import sys, cgi, re
from bs4 import BeautifulSoup, element
magical_class = "Nd92KSx3u2"
restricted_tags="title script object embed".split()
re_my_span = re.compile(r'&lt;span class="%s"&gt;(.+?)&lt;/span&gt;' % magical_class)

def no_nl(s): return str(s).replace("\r", "").replace("\n", " ")

if len(sys.argv) != 3:
    print "Usage: %s &lt;input_html_file&gt; &lt;output_html_file&gt;" % sys.argv[0]
    sys.exit(1)

def process(elem):
    for x in elem.children:
        if isinstance(x, element.Comment): continue
        if isinstance(x, element.Tag):
            if x.name in restricted_tags:
                continue
        if isinstance(x, element.NavigableString):
            if not len(no_nl(x.string).strip()):
                continue  # it's just empty space
            print '[', no_nl(x.string).strip(), ']',  # debug output of found strings
            s = ""
            for c in x.string:
                if c in (' ', '\r', '\n', '\t'): s += c
                else: s += '&lt;span class="%s"&gt;%s&lt;/span&gt;' % (magical_class, c)
            x.replace_with(s)
            continue
        process(x)

soup = BeautifulSoup(open(sys.argv[1]))
process(soup)
output = re_my_span.sub(r'&lt;span class="%s"&gt;\1&lt;/span&gt;' % magical_class, str(soup))
with open(sys.argv[2], 'w') as f:
    f.write(output)
</snippet></ROW><ROW><id>9346416</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *
magical_class = "Nd92KSx3u2"

class WebPage(QObject):
    def __init__(self, data, parent=None):
        super(WebPage, self).__init__(parent)
        self.output = []
        self.data = data
        self.page = QWebPage()
        self.page.loadFinished.connect(self.process)

    def start(self):
        self.page.mainFrame().setHtml(self.data)

    @Slot(bool)
    def process(self, something=False):
        self.page.setViewportSize(self.page.mainFrame().contentsSize())
        frame = self.page.currentFrame()
        elements = frame.findAllElements('span[class="%s"]' % magical_class)
        for e in elements:
            s = e.toPlainText()
            rect = e.geometry()
            dim = [rect.x(), rect.y(), 
                rect.x() + rect.width(), rect.y() + rect.height()]
            if s and rect.width() &gt; 0 and rect.height() &gt; 0: print dim, s

if __name__ == '__main__':
    app = QApplication(sys.argv)
    data = open(sys.argv[1]).read()
    webpage = WebPage(data)
    webpage.start()
</snippet></ROW><ROW><id>9346416</id><snippet>a&lt;span&gt;b&lt;span&gt;c&lt;/span&gt;&lt;/span&gt;
&lt;table border="1"&gt;
&lt;tr&gt;&lt;td&gt;r1 &lt;font&gt;c1&lt;/font&gt;  &lt;/td&gt;&lt;td&gt;r1 c2&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;row2 &amp; c2&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
more &lt;b&gt;contents&lt;/b&gt;
</snippet></ROW><ROW><id>9346416</id><snippet>$ python parser.py input.html temp.html
[ a ] [ b ] [ c ] [ r1 ] [ c1 ] [ r1 c2 ] [ row2 &amp; c2 ] [ more ] [ contents ]
$ charpos.py temp.html
[8, 8, 17, 26] a
[17, 8, 26, 26] b
[26, 8, 34, 26] c
[13, 48, 18, 66] r
[18, 48, 27, 66] 1
[13, 67, 21, 85] c
[21, 67, 30, 85] 1
[36, 48, 41, 66] r
[41, 48, 50, 66] 1
[36, 67, 44, 85] c
[44, 67, 53, 85] 2
[36, 92, 41, 110] r
[41, 92, 50, 110] o
[50, 92, 61, 110] w
[61, 92, 70, 110] 2
[36, 111, 47, 129] &amp;
[51, 111, 59, 129] c
[59, 111, 68, 129] 2
[8, 135, 21, 153] m
[21, 135, 30, 153] o
[30, 135, 35, 153] r
[35, 135, 44, 153] e
[8, 154, 17, 173] c
[17, 154, 27, 173] o
[27, 154, 37, 173] n
[37, 154, 42, 173] t
[42, 154, 51, 173] e
[51, 154, 61, 173] n
[61, 154, 66, 173] t
[66, 154, 75, 173] s
</snippet></ROW><ROW><id>9346481</id><snippet>earth.p = vector(0, earth.mass*earth.velocity, 0)</snippet></ROW><ROW><id>9346481</id><snippet>earth.mass*earth.velocity</snippet></ROW><ROW><id>9346481</id><snippet>typeof(earth.mass*earth.velocity)</snippet></ROW><ROW><id>9346481</id><snippet>earth.p = vector(0, earth.mass*mag(earth.velocity), 0)</snippet></ROW><ROW><id>9346481</id><snippet>earth.p = vector(0, earth.mass*earth.velocity.y, 0)</snippet></ROW><ROW><id>9346647</id><snippet>NUL</snippet></ROW><ROW><id>9346647</id><snippet>DEL</snippet></ROW><ROW><id>9346647</id><snippet>NUL</snippet></ROW><ROW><id>9346651</id><snippet>#!/usr/bin/env python

from lxml import etree, html
from urlparse import urljoin
import time

t = time.time()
base = 'http://scoutmob.com/'
main = html.parse(base)
cities = [x.split('?')[0] for x in main.xpath("//a[starts-with(@class, 'cities-')]/@href")]
urls = [urljoin(base, x + '/today') for x in cities]
docs = [html.parse(url) for url in urls]
feeds = [doc.xpath("//link[@rel='alternate']/@href")[0] for doc in docs]
# filter out the "coming soon" feeds
feeds = [x for x in feeds if x != 'http://feeds.feedburner.com/scoutmob']
print time.time() - t
print len(cities), cities
print len(feeds), feeds

t = time.time()
items = [etree.parse(x).xpath("//item") for x in feeds]
print time.time() - t
count = sum(map(len, items))
print count
</snippet></ROW><ROW><id>9346651</id><snippet>7.79690480232
20 ['/atlanta', '/new-york', '/san-francisco', '/washington-dc', '/charlotte', '/miami', '/philadelphia', '/houston', '/minneapolis', '/phoenix', '/san-diego', '/nashville', '/austin', '/boston', '/chicago', '/dallas', '/denver', '/los-angeles', '/seattle', '/portland']
13 ['http://feeds.feedburner.com/scoutmob/atl', 'http://feeds.feedburner.com/scoutmob/nyc', 'http://feeds.feedburner.com/scoutmob/sf', 'http://scoutmob.com/washington-dc.rss', 'http://scoutmob.com/nashville.rss', 'http://scoutmob.com/austin.rss', 'http://scoutmob.com/boston.rss', 'http://scoutmob.com/chicago.rss', 'http://scoutmob.com/dallas.rss', 'http://scoutmob.com/denver.rss', 'http://scoutmob.com/los-angeles.rss', 'http://scoutmob.com/seattle.rss', 'http://scoutmob.com/portland.rss']
4.76977992058
310
</snippet></ROW><ROW><id>9346744</id><snippet>class Permutations :
    def __init__( self , blist ) :
        self.alist=blist
        self.permut_list = []
        self.permutation(len(self.alist))

    def swap(self , blist , i , j ) :
        blist[i], blist[j] = blist[j] ,blist[i]

    def permutation(self, taille):
        if taille == 1 :
            self.tmp = self.alist[:]
            self.permut_list.append(self.tmp)
        else :
            for i in range(taille) :
                self.swap(self. alist , i , taille −1)
                self.permutation(taille −1)
                self.swap(self.alist , i , taille −1)

    def __repr__(self):
        repre = """"""
        for i in self.permut_list:
             repre += ''.join(i)+"\n"
        return repre
</snippet></ROW><ROW><id>9346744</id><snippet>text = "abc"
text_list = []
for i in range(len(text)):
    text_list.append(text[i])
permu_text = Permutations(text_list)
print permu_text
</snippet></ROW><ROW><id>9347016</id><snippet>stdout</snippet></ROW><ROW><id>9347016</id><snippet>subprocess.call</snippet></ROW><ROW><id>9347016</id><snippet>with open('out-file.txt', 'w') as f:
    subprocess.call(['program'], stdout=f)
</snippet></ROW><ROW><id>9347136</id><snippet>setvirtualenvproject /home/bill/.virtualenvs/selectable /home/bill/workspace/boatsite
</snippet></ROW><ROW><id>9347136</id><snippet>setvirtualenvproject [/home/bill/.virtualenvs/selectable /home/bill/workspace/boatsite]
</snippet></ROW><ROW><id>9347261</id><snippet>fork()</snippet></ROW><ROW><id>9347261</id><snippet>fork()</snippet></ROW><ROW><id>9347261</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>9347261</id><snippet>my_awesome_function</snippet></ROW><ROW><id>9347483</id><snippet>class B(A):
    def f(self,num): 
        return 7 * A.f(self,num)
</snippet></ROW><ROW><id>9347731</id><snippet>.load()</snippet></ROW><ROW><id>9347731</id><snippet>$.post()</snippet></ROW><ROW><id>9347731</id><snippet> $.post("/search/loadBottomLooks/", 
 { pageNum: "2" },
 function(responseText, responseStatus){ 
      alert('got into the callback!'); 
      $("#garbage").html(responseText);
 });
</snippet></ROW><ROW><id>9347944</id><snippet>cursor.execute("INSERT INTO Test (column1, column2) VALUES (?, ?)", "It's all right", 45)
</snippet></ROW><ROW><id>9347956</id><snippet>libpypy-c.lib</snippet></ROW><ROW><id>9347956</id><snippet>PyPy\libpypy-c.dll</snippet></ROW><ROW><id>9347956</id><snippet>PyPy\lib-python\modified-2.7\distutils\command\build_ext.py</snippet></ROW><ROW><id>9347956</id><snippet>return ext.libraries + ['libpypy-c']</snippet></ROW><ROW><id>9347956</id><snippet>libpypy-c.lib</snippet></ROW><ROW><id>9347965</id><snippet>groups()</snippet></ROW><ROW><id>9347965</id><snippet>(</snippet></ROW><ROW><id>9347965</id><snippet>)</snippet></ROW><ROW><id>9347965</id><snippet>group(0)</snippet></ROW><ROW><id>9347965</id><snippet>group(1)</snippet></ROW><ROW><id>9347965</id><snippet>search</snippet></ROW><ROW><id>9347965</id><snippet>search()</snippet></ROW><ROW><id>9348144</id><snippet>lambda e: log_event(handler.handle, e)</snippet></ROW><ROW><id>9348144</id><snippet>handler.handle</snippet></ROW><ROW><id>9348144</id><snippet>log_event</snippet></ROW><ROW><id>9348144</id><snippet>log_event</snippet></ROW><ROW><id>9348144</id><snippet>class EventHandler:
    def handle(self, event):
        pass

def wrap_handler(handler):
    proc = handler.handle
    def log_event(e):
        print e
        proc(e)
    handler.handle = log_event

handler = EventHandler()
wrap_handler(handler)
handler.handle('event')
</snippet></ROW><ROW><id>9348144</id><snippet>def logging(function):
    def wrapper(*args, **kwargs):
        print "Calling %s with:" % function.__name__, args, kwargs
        return function(*args, **kwargs)
    return wrapper

class EventHandler:
    @ logging
    def handle(self, event):
        pass

    def __repr__(self):
        return "EventHandler instance"

handler = EventHandler()
handler.handle('event')
</snippet></ROW><ROW><id>9348391</id><snippet>hours</snippet></ROW><ROW><id>9348391</id><snippet>minutes</snippet></ROW><ROW><id>9348391</id><snippet>seconds</snippet></ROW><ROW><id>9348391</id><snippet>&gt;&gt;&gt; t1.hours
5
</snippet></ROW><ROW><id>9348391</id><snippet>property</snippet></ROW><ROW><id>9348391</id><snippet>class MyTime:
    def __init__(self, hrs=0, mins=0, secs=0):
       self.totalsecs = hrs*3600 + mins*60 + secs

    @property
    def hours(self):
       return self.totalsecs // 3600

    @property
    def minutes(self):
        return self._get_leftoversecs() // 60

    @property
    def seconds(self):
        return self._get_leftoversecs() % 60

    def _get_leftoversecs(self):
        return self.totalsecs % 3600

    def increment(self, t):
        self.totalsecs += t
</snippet></ROW><ROW><id>9348391</id><snippet>&gt;&gt;&gt; t1 = MyTime(5,5,5)
&gt;&gt;&gt; t1.hours
5
&gt;&gt;&gt; t1.hours()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not callable
&gt;&gt;&gt; t1.seconds
5
&gt;&gt;&gt; t1.totalsecs
18305
&gt;&gt;&gt; t1.increment(10)
&gt;&gt;&gt; t1.seconds
15
&gt;&gt;&gt; t1.totalsecs
18315
</snippet></ROW><ROW><id>9348391</id><snippet>increment</snippet></ROW><ROW><id>9348391</id><snippet>&gt;&gt;&gt; t1.totalsecs += 10
&gt;&gt;&gt; t1.totalsecs
18325
</snippet></ROW><ROW><id>9348391</id><snippet>property</snippet></ROW><ROW><id>9348391</id><snippet>totalsecs</snippet></ROW><ROW><id>9348391</id><snippet>totalsecs</snippet></ROW><ROW><id>9348391</id><snippet>MyTime</snippet></ROW><ROW><id>9348391</id><snippet>increment()</snippet></ROW><ROW><id>9349135</id><snippet># adding a pie chart to the drawing   
self._add(self,Pie(),name='pie',validate=None,desc=None)
</snippet></ROW><ROW><id>9349543</id><snippet>sendMessage</snippet></ROW><ROW><id>9349543</id><snippet># main.py
import socket
from functions import *

sock = socket.socket ()
sock.connect ((config['server']['host'], config['server']['poort']))
sendMessage (sock, receiver, config['nick'] + ' is here!')
</snippet></ROW><ROW><id>9349543</id><snippet># functions.py ; not .php
def sendMessage(sock, receiver, message):
    sock.send ('PRIVMSG ' + ontvanger + ' :' + message + '\n')
</snippet></ROW><ROW><id>9349633</id><snippet>time.sleep</snippet></ROW><ROW><id>9349633</id><snippet>import time
interval = 5
next_run = 0
while True:
   time.sleep(max(0, next_run - time.time()))

   next_run = time.time() + interval
   action_print()
</snippet></ROW><ROW><id>9349633</id><snippet>import time,threading
interval = 5
next_run = 0
interruptEvent = threading.Event()
while True:
   interruptEvent.wait(max(0, next_run - time.time()))
   interruptEvent.clear()

   next_run = time.time() + interval
   action_print()
</snippet></ROW><ROW><id>9349633</id><snippet>interruptEvent.set()</snippet></ROW><ROW><id>9349633</id><snippet>threading</snippet></ROW><ROW><id>9349633</id><snippet>multiprocessing</snippet></ROW><ROW><id>9349908</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>9349908</id><snippet>rm /usr/local/bin/python
ln -s /usr/local/bin/python2.6 /usr/local/bin/python
</snippet></ROW><ROW><id>9349996</id><snippet>db</snippet></ROW><ROW><id>9349996</id><snippet>@property</snippet></ROW><ROW><id>9349996</id><snippet>self.db</snippet></ROW><ROW><id>9349996</id><snippet>self.db()</snippet></ROW><ROW><id>9349996</id><snippet>TypeError: 'Database' object is not callable. If you meant to call the 'meowth' method on a 'Connection' object it is failing because no such method exists.
</snippet></ROW><ROW><id>9349996</id><snippet>File "/home/aveline/Meowth/web/handlers/base.py", line 19, in init_session
    self.session_id = self.db().meowth_sessions.save(
</snippet></ROW><ROW><id>9349996</id><snippet>self.db</snippet></ROW><ROW><id>9349996</id><snippet>self.application.mongo</snippet></ROW><ROW><id>9349996</id><snippet>self.session_id = self.application.mongo().meowth_sessions.save(
</snippet></ROW><ROW><id>9350090</id><snippet>&gt;&gt;&gt; %timeit (3, 8) in d.keys()  # Slow, indeed
100000 loops, best of 3: 9.58 us per loop

&gt;&gt;&gt; %timeit 8 in t[3].keys()  # Faster
1000000 loops, best of 3: 246 ns per loop

&gt;&gt;&gt; %timeit (3, 8) in d  # Even faster!
10000000 loops, best of 3: 117 ns per loop

&gt;&gt;&gt; %timeit 8 in t[3]  # Slightly slower
10000000 loops, best of 3: 127 ns per loop
</snippet></ROW><ROW><id>9350090</id><snippet>(3, 8) in d</snippet></ROW><ROW><id>9350090</id><snippet>.keys()</snippet></ROW><ROW><id>9350090</id><snippet>8 in t[3]</snippet></ROW><ROW><id>9350090</id><snippet>8 in t[3].keys()</snippet></ROW><ROW><id>9350090</id><snippet>.keys</snippet></ROW><ROW><id>9350090</id><snippet>.keys</snippet></ROW><ROW><id>9350090</id><snippet>(3, 8) in d.keys()</snippet></ROW><ROW><id>9350090</id><snippet>(3, 8)</snippet></ROW><ROW><id>9350090</id><snippet>(3, 8)</snippet></ROW><ROW><id>9350090</id><snippet>d</snippet></ROW><ROW><id>9350090</id><snippet>keys()</snippet></ROW><ROW><id>9350090</id><snippet>in</snippet></ROW><ROW><id>9350090</id><snippet>keys()</snippet></ROW><ROW><id>9350090</id><snippet>in</snippet></ROW><ROW><id>9350090</id><snippet>d.keys()</snippet></ROW><ROW><id>9350090</id><snippet>t[3].keys()</snippet></ROW><ROW><id>9350090</id><snippet>%timeit</snippet></ROW><ROW><id>9350090</id><snippet>%run prog.py</snippet></ROW><ROW><id>9350195</id><snippet>f(*args)</snippet></ROW><ROW><id>9350195</id><snippet>cursor.execute(*sql)
</snippet></ROW><ROW><id>9350195</id><snippet>'?'</snippet></ROW><ROW><id>9350195</id><snippet>conn.execute('insert into sometable values (?,?,?)', (a,b,c))
</snippet></ROW><ROW><id>9350195</id><snippet>raw_input()</snippet></ROW><ROW><id>9350195</id><snippet>a = str(a)</snippet></ROW><ROW><id>9350210</id><snippet>Flask-SQLAlchemy</snippet></ROW><ROW><id>9350210</id><snippet>Modelclass.query</snippet></ROW><ROW><id>9350210</id><snippet>db.session.query(Modelclass)</snippet></ROW><ROW><id>9350277</id><snippet>libmysqlclient.18.dylib</snippet></ROW><ROW><id>9350277</id><snippet>DYLD_LIBRARY_PATH</snippet></ROW><ROW><id>9350414</id><snippet>list_name.append(f)
</snippet></ROW><ROW><id>9350414</id><snippet>append</snippet></ROW><ROW><id>9350414</id><snippet>__getitem__</snippet></ROW><ROW><id>9350449</id><snippet>\xHH</snippet></ROW><ROW><id>9350449</id><snippet>binascii</snippet></ROW><ROW><id>9350449</id><snippet>In [12]: binascii.hexlify('\r\x9eq\xce')
Out[12]: '0d9e71ce'
</snippet></ROW><ROW><id>9350449</id><snippet>\r</snippet></ROW><ROW><id>9350449</id><snippet>\x0d</snippet></ROW><ROW><id>9350449</id><snippet>q</snippet></ROW><ROW><id>9350449</id><snippet>\x71</snippet></ROW><ROW><id>9350613</id><snippet>self.button</snippet></ROW><ROW><id>9350613</id><snippet>import wx
from wx.lib.agw import thumbnailctrl as tn

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, style=wx.DEFAULT_FRAME_STYLE)
        self.button = wx.Button(self, -1, "Select dir")
        self.Bind(wx.EVT_BUTTON, self.ButtonPress, self.button)
        self.tn = tn.ThumbnailCtrl(self)    
        self.tn.Bind(tn.EVT_THUMBNAILS_DCLICK, self.TnClick)

        box = wx.BoxSizer(wx.VERTICAL)
        box.Add(self.tn, 1, wx.EXPAND, 0)
        box.Add(self.button, 0, wx.ADJUST_MINSIZE, 0)
        self.SetSizer(box)
        box.Fit(self)
        self.Layout()

    def ButtonPress(self, evt):
        dlg = wx.DirDialog(self, 'Get dir')
        if dlg.ShowModal() == wx.ID_OK:
        path = dlg.GetPath()
        dlg.Destroy()
        self.tn.ShowDir(path)

    def TnClick(self, evt):
        sel = self.tn.GetSelection()
        wx.MessageBox(self.tn.GetThumbInfo(sel))

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    frame = MyFrame(None, -1, "")
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>9350809</id><snippet>while</snippet></ROW><ROW><id>9350809</id><snippet>cnt_total = 1234 # init appropriately
cnt_changed = cnt_total
p = 0.001

while (cnt_changed  &gt; cnt_total*p):
  # your code here
  # remember to update the cnt_changed variable
</snippet></ROW><ROW><id>9351024</id><snippet>os.startfile</snippet></ROW><ROW><id>9351024</id><snippet>os.startfile(magnet_link)
</snippet></ROW><ROW><id>9351024</id><snippet>osascript</snippet></ROW><ROW><id>9351024</id><snippet>xdg-open</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351070</id><snippet>cmd /c python.exe Go.py</snippet></ROW><ROW><id>9351070</id><snippet>python.exe</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351070</id><snippet>Go.py</snippet></ROW><ROW><id>9351070</id><snippet>System.Diagnostics.Process()</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351070</id><snippet>ProcessStartInfo</snippet></ROW><ROW><id>9351070</id><snippet>Shell</snippet></ROW><ROW><id>9351183</id><snippet>Queue</snippet></ROW><ROW><id>9351183</id><snippet>queue = taskqueue.Queue(name="files-processor")
while tasks:
    queue.add(taskqueue.Task(...) for k,v in (tasks.popitem() for _ in range(min(len(tasks),100))))
</snippet></ROW><ROW><id>9351183</id><snippet>tasks</snippet></ROW><ROW><id>9351543</id><snippet>return re.sub('\(.*?\)','', myResultStats.text)
</snippet></ROW><ROW><id>9351564</id><snippet>numpy.seterr(over='ignore')</snippet></ROW><ROW><id>9351847</id><snippet>request.tmpl_context</snippet></ROW><ROW><id>9351847</id><snippet>request</snippet></ROW><ROW><id>9351847</id><snippet>context</snippet></ROW><ROW><id>9351847</id><snippet>mako.runtime.Context</snippet></ROW><ROW><id>9351847</id><snippet>MyPKG.Root</snippet></ROW><ROW><id>9351847</id><snippet>context</snippet></ROW><ROW><id>9351847</id><snippet>context</snippet></ROW><ROW><id>9351847</id><snippet>_context</snippet></ROW><ROW><id>9351984</id><snippet>self.myLabel.setScaledContents(True)
</snippet></ROW><ROW><id>9351984</id><snippet>QPixmap</snippet></ROW><ROW><id>9351984</id><snippet>scaled</snippet></ROW><ROW><id>9351984</id><snippet>QPixmap QPixmap.scaled (self, 
                        int width, 
                        int height, 
                        Qt.AspectRatioMode aspectRatioMode = Qt.IgnoreAspectRatio,
                        Qt.TransformationMode transformMode = Qt.FastTransformation)
</snippet></ROW><ROW><id>9351984</id><snippet>QPixmap</snippet></ROW><ROW><id>9351984</id><snippet>width</snippet></ROW><ROW><id>9351984</id><snippet>height</snippet></ROW><ROW><id>9351984</id><snippet>aspectRatioMode</snippet></ROW><ROW><id>9351984</id><snippet>transformMode</snippet></ROW><ROW><id>9351984</id><snippet>Qt</snippet></ROW><ROW><id>9351984</id><snippet>QtCore</snippet></ROW><ROW><id>9351984</id><snippet># substitute the width and height to desired values
self.myLabel.setPixmap(QtGui.QPixmap(_fromUtf8(directory + '\\' + tempName)).scaled(width, height, QtCore.Qt.KeepAspectRatio))
</snippet></ROW><ROW><id>9351984</id><snippet>QLabel</snippet></ROW><ROW><id>9351984</id><snippet>.size()</snippet></ROW><ROW><id>9351984</id><snippet>self.myLabel.setPixmap(QtGui.QPixmap(_fromUtf8(directory + '\\' + tempName)).scaled(self.myLabel.size(), QtCore.Qt.KeepAspectRatio))
</snippet></ROW><ROW><id>9351984</id><snippet>os.path.join(directory, tempName)</snippet></ROW><ROW><id>9351984</id><snippet>directory + '\\' + tempName</snippet></ROW><ROW><id>9352121</id><snippet>from contextlib import closing
with closing( conn.cursor() ) as cursor:
    cursor.execute("INSERT INTO...")
</snippet></ROW><ROW><id>9352581</id><snippet>ALTER</snippet></ROW><ROW><id>9352581</id><snippet>charset</snippet></ROW><ROW><id>9352581</id><snippet>utf8</snippet></ROW><ROW><id>9352581</id><snippet>ALTER TABLE title MODIFY 
    column VARCHAR (100)
    CHARACTER SET utf8
    COLLATE utf8_unicode_ci;
</snippet></ROW><ROW><id>9352596</id><snippet>del lst[4:]
</snippet></ROW><ROW><id>9352596</id><snippet>for i, value in enumerate(lst):
    if i &gt;= 4:
        break
    do_something_with(lst, i, value)
</snippet></ROW><ROW><id>9352717</id><snippet>def splitRoute():
  route = []

  for line in open('route.txt', 'r'):
    route.append(line.strip().split('&gt;')) 

  return route
</snippet></ROW><ROW><id>9352800</id><snippet>print fbf().parseString(entrada, parseAll=True)
</snippet></ROW><ROW><id>9352840</id><snippet>a=[[] for i in xrange(10)]
</snippet></ROW><ROW><id>9352840</id><snippet>&gt;&gt;&gt; a=[[]] * 5
&gt;&gt;&gt; for i in a: print id(i)
... 
155302636
155302636
155302636
155302636
155302636
&gt;&gt;&gt; a=[[] for i in xrange(5)]
&gt;&gt;&gt; for i in a: print id(i)
... 
155302668
155302732
155302924
155303020
155303052
</snippet></ROW><ROW><id>9352840</id><snippet>a</snippet></ROW><ROW><id>9353259</id><snippet>#print c, i
cursor.execute(""" SELECT value FROM data_table WHERE value='%s' """ % ([s - c * x, i]))
if cursor.rowcount == 1:
    cursor.execute(""" SELECT value FROM data_table WHERE value='%s' """ % [s, i+1])
    if cursor.rowcount == 0:
        cursor.execute (""" INSERT INTO data_table (value) VALUES ('%s')""" % [s, i+1])
</snippet></ROW><ROW><id>9353259</id><snippet>#print c, i
cursor.execute ("""
    INSERT INTO data_table (value) 
       SELECT  '%s'
       FROM dual
       WHERE ( SELECT COUNT(*) FROM data_table WHERE value='%s' )
             = 1
         AND NOT EXISTS
             ( SELECT * FROM data_table WHERE value='%s' )
               """ % ([s, i+1], [s - c * x, i], [s, i+1]))
</snippet></ROW><ROW><id>9353419</id><snippet>line_count</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>current_line</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>def print_a_line_2(line_count=3, f=None):
    if f is not None:
        print line_count, f.readline()
</snippet></ROW><ROW><id>9353419</id><snippet>def print_a_line_2(line_count, f, append_newline=True):
    if append_newline:
        print line_count, f.readline()
    else:
        print line_count, f.readline(),
</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>line_count</snippet></ROW><ROW><id>9353419</id><snippet>f</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>name=expression</snippet></ROW><ROW><id>9353419</id><snippet>expression</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line_2</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line_2(line_count=3, f=current_file)
</snippet></ROW><ROW><id>9353419</id><snippet>line_count(current_line, current_file)</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line(current_line, current_file)
</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>current_line</snippet></ROW><ROW><id>9353419</id><snippet>current_file</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>current_line</snippet></ROW><ROW><id>9353419</id><snippet>current_file</snippet></ROW><ROW><id>9353419</id><snippet>f</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>line_count</snippet></ROW><ROW><id>9353419</id><snippet>f</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>print line_count, f.readline()
</snippet></ROW><ROW><id>9353419</id><snippet>print</snippet></ROW><ROW><id>9353419</id><snippet>f.readline()</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353419</id><snippet>line_count</snippet></ROW><ROW><id>9353419</id><snippet>f</snippet></ROW><ROW><id>9353419</id><snippet>print_a_line</snippet></ROW><ROW><id>9353487</id><snippet>a = "foo"
def func_1():
 b = "bar"
 print a,b
 return b     # Took out parenthasis
returned_b = func_1()  # Added variable to hold the returned "b"
print returned_b 
</snippet></ROW><ROW><id>9353487</id><snippet>a = "foo"</snippet></ROW><ROW><id>9353487</id><snippet>b</snippet></ROW><ROW><id>9353487</id><snippet>func_1()</snippet></ROW><ROW><id>9353487</id><snippet>b</snippet></ROW><ROW><id>9353487</id><snippet>def main():                 # Calling main() "runs" the program
   a = add(1,2)
   print a

def add(first, second):     # functions are normally declared outside of other functions, 
   result = first + second  #  that way, they can be used anywhere
   return result
</snippet></ROW><ROW><id>9353665</id><snippet>start_times = node.xpath("//t:chapter/start_time/text()", 
                   namespaces={'t':'http://example.com/namespace'})
</snippet></ROW><ROW><id>9353866</id><snippet>__file__</snippet></ROW><ROW><id>9353866</id><snippet>import os
// ...
data_dir = os.path.join(os.path.dirname(__file__), 'data')
</snippet></ROW><ROW><id>9353958</id><snippet>def merge_lists(l):
        s=map(set, l)
        i, n=0, len(s)
        while i &lt; n-1:
                for j in xrange(i+1, n):
                        if s[i].intersection(s[j]):
                                s[i].update(s[j])
                                del s[j]
                                n-=1
                                break
                else:
                        i+=1
        return [sorted(i) for i in s]
</snippet></ROW><ROW><id>9354111</id><snippet>d['key']['key3'] = []
</snippet></ROW><ROW><id>9354262</id><snippet>[getattr(func.__code__,s) 
 for s in ['co_argcount', 'co_cellvars', 'co_code', 'co_consts', 
           'co_filename', 'co_firstlineno', 'co_flags', 'co_freevars',
           'co_lnotab', 'co_name', 'co_names', 'co_nlocals', 'co_stacksize',
           'co_varnames']
]
</snippet></ROW><ROW><id>9354341</id><snippet>&gt;&gt;&gt; open("test.dat","w")
&lt;open file 'test.dat', mode 'w' at 0x1004b20c0&gt;
&gt;&gt;&gt; from os import *
&gt;&gt;&gt; open("test.dat","w")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: an integer is required
</snippet></ROW><ROW><id>9354341</id><snippet>from os import open</snippet></ROW><ROW><id>9354341</id><snippet>global</snippet></ROW><ROW><id>9354366</id><snippet>quoting=csv.QUOTE_NONNUMERIC</snippet></ROW><ROW><id>9354366</id><snippet>int</snippet></ROW><ROW><id>9354366</id><snippet>float</snippet></ROW><ROW><id>9354366</id><snippet>csv.reader</snippet></ROW><ROW><id>9354366</id><snippet>list</snippet></ROW><ROW><id>9354366</id><snippet>csv.writer</snippet></ROW><ROW><id>9354420</id><snippet>cursor.execute(
    'SELECT * FROM %s where %s = %s'
    % ("my_table", "colum_name", "%s"), #1
    ("'some;perverse'string;--drop table foobar")) #2
</snippet></ROW><ROW><id>9354420</id><snippet>#1</snippet></ROW><ROW><id>9354420</id><snippet>#2</snippet></ROW><ROW><id>9354480</id><snippet>[@type="full"]</snippet></ROW><ROW><id>9354480</id><snippet>t:asset</snippet></ROW><ROW><id>9354480</id><snippet>node.xpath("//t:assets/t:asset[@type='full']/t:file_name/text()", 
        namespaces={'t':'http://apple.com/itunes/importer'})
</snippet></ROW><ROW><id>9354516</id><snippet>order_by('?')</snippet></ROW><ROW><id>9354516</id><snippet>import random

random_idx = random.randint(0, Model.objects.count() - 1)
random_obj = Model.objects.all()[random_idx]
</snippet></ROW><ROW><id>9354950</id><snippet>def stringify(x):
  if x // 10 % 10 == 1:
    return str(x) + 'th'
  else:
    return str(x) + { 1:'st', 2:'nd', 3:'rd' }.get(x % 10, 'th')
</snippet></ROW><ROW><id>9354950</id><snippet>return str(x) + { 1:'st', 2:'nd', 3:'rd' }.get(x//10%10 != 1 and x%10, 'th')
</snippet></ROW><ROW><id>9355054</id><snippet>threads = [node1, node2, node3, node4]
[thread.start() for thread in threads]
</snippet></ROW><ROW><id>9355054</id><snippet>firstrun()</snippet></ROW><ROW><id>9355054</id><snippet>class initnode</snippet></ROW><ROW><id>9355270</id><snippet>nonlocal</snippet></ROW><ROW><id>9355270</id><snippet>def fib_gen2():
    a = b = 1
    def next():
        nonlocal a, b
        a, b = b, a + b
        return b - a
    return next
</snippet></ROW><ROW><id>9355270</id><snippet>def fib_gen2():
    ab = [1, 1]
    def next():
        ab[:] = ab[1], ab[0] + ab[1]
        return ab[1] - ab[0]
    return next
</snippet></ROW><ROW><id>9355270</id><snippet>nonlocal</snippet></ROW><ROW><id>9355270</id><snippet>global</snippet></ROW><ROW><id>9355270</id><snippet>nonlocal</snippet></ROW><ROW><id>9355270</id><snippet>ab</snippet></ROW><ROW><id>9355277</id><snippet>/usr/lib/python*</snippet></ROW><ROW><id>9355277</id><snippet>$ python2.7
Python 2.7.2 (v2.7.2:8527427914a2, Jun 11 2011, 15:22:34) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sysconfig
&gt;&gt;&gt; sysconfig.get_path('stdlib')
'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7'
&gt;&gt;&gt; sysconfig.get_path('purelib')
'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'
</snippet></ROW><ROW><id>9355480</id><snippet>settings.MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>9355538</id><snippet>y=zeta(x,q) returns the Riemann zeta function of two arguments:
sum((k+q)**(-x),k=0..inf)
</snippet></ROW><ROW><id>9355538</id><snippet>In [3]: zeta(1.5, 1)
Out[3]: 2.6123753486854882

In [4]: zeta(2, 1)
Out[4]: 1.6449340668482266

In [5]: zeta(3, 1)
Out[5]: 1.202056903159594

In [6]: zeta(4,1)
Out[6]: 1.0823232337111381

In [7]: np.pi**4 / 90
Out[7]: 1.082323233711138
</snippet></ROW><ROW><id>9355605</id><snippet>multiprocessing.cpu_count</snippet></ROW><ROW><id>9355754</id><snippet>import org.python.util.*;
</snippet></ROW><ROW><id>9355754</id><snippet>import org.python.util.TemplateAntTask;
</snippet></ROW><ROW><id>9355848</id><snippet>-lGL</snippet></ROW><ROW><id>9355848</id><snippet>-lGLU</snippet></ROW><ROW><id>9355848</id><snippet>gcc filename.c -lglut -lGL -lGLU
</snippet></ROW><ROW><id>9355848</id><snippet>gcc -lglut -lGL -lGLU filename.c 
</snippet></ROW><ROW><id>9355873</id><snippet>return</snippet></ROW><ROW><id>9355873</id><snippet>subtotal</snippet></ROW><ROW><id>9355873</id><snippet>cost</snippet></ROW><ROW><id>9355873</id><snippet>def quantity():
    count=raw_input("How many gearboxes would you like to order? ")
    return int(count)



def subtotal(count):
    if count&lt;=10:
        cost=count*100.0
        return cost
    elif count&gt;10 and count&lt;20:
        cost=(count-10)*80.0+1000.0
        return cost
    elif count&gt;20:
        cost=(count-20)*70.0+1000.0+800.0
        return cost

def summary(count, cost):
    print "="*80
    print "%60s %20f %20f" % ("motors",count,cost)
    print "="*80

def menu():
    items = quantity()
    sub = subtotal(items)
    summary(items, sub)

if __name__ == '__main__':
    menu()
</snippet></ROW><ROW><id>9355933</id><snippet>myLists = dict()
for x in range(22):
    myLists[ 'list%d' % x ] = [0,0,0,0,0]
</snippet></ROW><ROW><id>9355933</id><snippet>myLists = list()
for x in range(22):
    myLists.append( [0,0,0,0,0] )
</snippet></ROW><ROW><id>9356177</id><snippet>--traceback</snippet></ROW><ROW><id>9356177</id><snippet>DEBUG=False</snippet></ROW><ROW><id>9356177</id><snippet>settings.py</snippet></ROW><ROW><id>9356440</id><snippet>django-admin.py startproject mysite</snippet></ROW><ROW><id>9356711</id><snippet>for k1 in mydict:
    for k2 in mydict:
        if k1 != k2:
            do_comparison(mydict[k1], mydict[k2])
</snippet></ROW><ROW><id>9357034</id><snippet>1 &lt; "a"</snippet></ROW><ROW><id>9357034</id><snippet>int</snippet></ROW><ROW><id>9357034</id><snippet>string</snippet></ROW><ROW><id>9357034</id><snippet>TypeError</snippet></ROW><ROW><id>9357096</id><snippet>(//p[img])[1]/following-sibling::table[1]
</snippet></ROW><ROW><id>9357096</id><snippet>table</snippet></ROW><ROW><id>9357096</id><snippet>table</snippet></ROW><ROW><id>9357096</id><snippet>p</snippet></ROW><ROW><id>9357096</id><snippet>img</snippet></ROW><ROW><id>9357721</id><snippet>/app1</snippet></ROW><ROW><id>9357721</id><snippet>/</snippet></ROW><ROW><id>9357721</id><snippet>WSGISocketPrefix /var/www/wsgi
&lt;VirtualHost *:80&gt;
        ServerAdmin name@email.com
        ServerName  domain.com
        ServerAlias www.domain.com
        DocumentRoot /var/www/
        LogLevel warn
        WSGIDaemonProcess apache processes=2 maximum-requests=500 threads=1
        WSGIProcessGroup apache
        Alias /media /var/www/media/
        WSGIScriptAlias /app1 /var/www/flaskapps/app.wsgi
        WSGIScriptAlias / /var/www/djangoapps/django.wsgi

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>9357748</id><snippet>darwin_reset_device()</snippet></ROW><ROW><id>9357748</id><snippet>dev_handle</snippet></ROW><ROW><id>9357748</id><snippet>dev_handle-&gt;dev</snippet></ROW><ROW><id>9357748</id><snippet>darwin_reset_device()</snippet></ROW><ROW><id>9357834</id><snippet>import time
import numpy as np
import cv2

gray = cv2.imread('lena_full.jpg',0)
height, width = gray.shape
h = np.empty((height,width,3), np.uint8)

t = time.time()
for i in xrange(height):
    for j in xrange(width):
        k = gray.item(i, j)
        if k == 127:
            h.itemset(i, j, 0, 255)
            h.itemset(i, j, 1, 255)
            h.itemset(i, j, 2, 255)
        elif k &gt; 127:
            h.itemset(i, j, 0, 0)
            h.itemset(i, j, 1, 0)
            h.itemset(i, j, 2, 255-k)
        else:
            h.itemset(i, j, 0, k)
            h.itemset(i, j, 1, 0)
            h.itemset(i, j, 2, 0)
print time.time()-t
</snippet></ROW><ROW><id>9357834</id><snippet>t = time.time()
palette = []
for i in xrange(256):
    if i == 127:
        palette.append((255, 255, 255))
    elif i &gt; 127:
        palette.append((0,0,255-i))
    else:
        palette.append((i, 0, 0))
palette = np.array(palette, np.uint8)

h2 = palette[gray]

print time.time() - t

print np.all(h==h2)
</snippet></ROW><ROW><id>9357834</id><snippet>0.453000068665
0.0309998989105
True
</snippet></ROW><ROW><id>9357834</id><snippet>0.468999862671
</snippet></ROW><ROW><id>9358189</id><snippet>class Item(models.Model):
    parent = models.ForeignKey('self')
</snippet></ROW><ROW><id>9358189</id><snippet>class Item(models.Model):
    parent = models.ForeignKey('self', related_name='children')
</snippet></ROW><ROW><id>9358189</id><snippet>class Item(models.Model):
    parent = models.ForeignKey('self', related_name='children', null=True, blank=True)
</snippet></ROW><ROW><id>9358189</id><snippet>item.children
</snippet></ROW><ROW><id>9358189</id><snippet>from mptt.models import MPTTModel, TreeForeignKey

class Item(MPTTModel):
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')
</snippet></ROW><ROW><id>9358593</id><snippet>python manage.py migrate DrHub --fake
</snippet></ROW><ROW><id>9358849</id><snippet>from itertools import groupby

for video, group in groupby(sorted(data, key=lambda x: x[1]), key=lambda x: x[1]):
    times = [x[2] for x in group]
    print 'Video: %s, interval: %f' % (video, max(times) - min(times))
</snippet></ROW><ROW><id>9358941</id><snippet>&lt;projectname&gt;.&lt;classname&gt;</snippet></ROW><ROW><id>9358941</id><snippet>BusinessLib.Formulae</snippet></ROW><ROW><id>9359011</id><snippet>host = connectionDetails.get('host','someDefault')
</snippet></ROW><ROW><id>9359182</id><snippet>for i in reversed(range(4)):
    print i
</snippet></ROW><ROW><id>9359182</id><snippet>3
2
1
0
</snippet></ROW><ROW><id>9359182</id><snippet>a=[5,2,1,4,3]
for i in reversed(a):
    print i
</snippet></ROW><ROW><id>9359182</id><snippet>3
4
1
2
5
</snippet></ROW><ROW><id>9359359</id><snippet>.pyd</snippet></ROW><ROW><id>9359359</id><snippet>.so</snippet></ROW><ROW><id>9359815</id><snippet>my_url = 'http://www.mysite.com/subdir/subdir2/index.html'
home = ''
home = reduce(lambda x,y : x + y + '/',my_url.split('/')[:3])

my_url.split('/')[:3] #=&gt; ['http:', '', 'www.mysite.com']

'http:' + '' + '/' #=&gt; 'http:/'
'http:/' + 'www.mysite.com' + '/' #=&gt; 'http:/www.mysite.com/'
</snippet></ROW><ROW><id>9359815</id><snippet>scanl</snippet></ROW><ROW><id>9359815</id><snippet>functional</snippet></ROW><ROW><id>9359815</id><snippet>In [11]: home = scanl(lambda x,y : '%s%s/'%(x,y),my_url.split('/')[0],my_url.split('/')[1:3])

In [12]: home
Out[12]: &lt;generator object _scanl at 0x0000000003DEC828&gt;

In [13]: list(home)
Out[13]: ['http:', 'http:/', 'http:/www.mysite.com/']
</snippet></ROW><ROW><id>9359815</id><snippet>str.join</snippet></ROW><ROW><id>9359815</id><snippet>In [16]: '/'.join(my_url.split('/'))
Out[16]: 'http://www.mysite.com/subdir/subdir2/index.html'
</snippet></ROW><ROW><id>9359815</id><snippet>In [22]: reduce(lambda x,y : '%s/%s'%(x,y),my_url.split('/'))
Out[22]: 'http://www.mysite.com/subdir/subdir2/index.html'
</snippet></ROW><ROW><id>9359860</id><snippet>feedparser</snippet></ROW><ROW><id>9359860</id><snippet>feedparser</snippet></ROW><ROW><id>9359860</id><snippet>feedparser</snippet></ROW><ROW><id>9360197</id><snippet>join</snippet></ROW><ROW><id>9360197</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5]
&gt;&gt;&gt; ' '.join(map(str, a))
"1 2 3 4 5"
</snippet></ROW><ROW><id>9360293</id><snippet>set</snippet></ROW><ROW><id>9360293</id><snippet>&gt;&gt;&gt; larry = [(1,'a'), (2, 'b')]
&gt;&gt;&gt; moe = [(2, 'b'), (1, 'a')]
&gt;&gt;&gt; set(larry) == set(moe)
True
</snippet></ROW><ROW><id>9360293</id><snippet>dict</snippet></ROW><ROW><id>9360293</id><snippet>{1: 'a', 2: 'b'}</snippet></ROW><ROW><id>9360293</id><snippet>dict(larry) == dict(moe)</snippet></ROW><ROW><id>9360549</id><snippet>Video.objects.filter(translations__language='en').order_by('translations__name')
</snippet></ROW><ROW><id>9360759</id><snippet>\x94</snippet></ROW><ROW><id>9361542</id><snippet>object</snippet></ROW><ROW><id>9361542</id><snippet>fields</snippet></ROW><ROW><id>9361542</id><snippet>callback_url</snippet></ROW><ROW><id>9361542</id><snippet>verify_token</snippet></ROW><ROW><id>9361629</id><snippet>momSNP = set()
for line in MomGenome:
    snp, rest = line.split(None, 1) # Split into two pieces only
    momSNP.add(snp)

for line in MyGenome:
    snp, rest = line.split(None, 1)
    if snp in momSNP:
        print line
</snippet></ROW><ROW><id>9361942</id><snippet>time.strftime</snippet></ROW><ROW><id>9361942</id><snippet>time.strptime</snippet></ROW><ROW><id>9361942</id><snippet>time.strftime(format)</snippet></ROW><ROW><id>9361942</id><snippet>time.strptime(string)</snippet></ROW><ROW><id>9361942</id><snippet>string</snippet></ROW><ROW><id>9361942</id><snippet>format</snippet></ROW><ROW><id>9362082</id><snippet>yes</snippet></ROW><ROW><id>9362082</id><snippet>yes w | pip install -r requirements.txt
</snippet></ROW><ROW><id>9362102</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as bs
&gt;&gt;&gt; text = """&lt;div&gt;
...     &lt;table&gt;
...        &lt;tbody&gt;
...           &lt;tr&gt;
...             &lt;td&gt;stuff&lt;/td&gt;
...           &lt;/tr&gt;
...           &lt;tr&gt;
...             &lt;td&gt;
...               &lt;div&gt;The content I want&lt;/div&gt; 
...            &lt;/td&gt;
...            &lt;/tr&gt;
...         &lt;/tbody&gt;
...       &lt;/table&gt;
... &lt;/div&gt;"""
&gt;&gt;&gt; a = bs(text)
</snippet></ROW><ROW><id>9362102</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9362102</id><snippet>a.text</snippet></ROW><ROW><id>9362102</id><snippet>&gt;&gt;&gt; a.table.tbody.findAll("tr")[1].div.text
u'The content I want'
</snippet></ROW><ROW><id>9362102</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>9362102</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>9362102</id><snippet>&gt;&gt;&gt; a.table.tbody.div.text
u'The content I want'
</snippet></ROW><ROW><id>9362102</id><snippet>&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; t = html.fromstring(text)
&gt;&gt;&gt; t.xpath("table/tbody/tr[2]/td/div")[0].text
'The content I want'
</snippet></ROW><ROW><id>9362203</id><snippet>printf()</snippet></ROW><ROW><id>9362203</id><snippet>assert(0)</snippet></ROW><ROW><id>9362203</id><snippet>gdb --args python yourfile.py

# type "run" to start the program
# if you put assert() in your code, gdb will stop at the assert, or you can put 
# manual breakpoint by using "b filename:lineno" before "run"
</snippet></ROW><ROW><id>9362326</id><snippet>site-packages</snippet></ROW><ROW><id>9362326</id><snippet>python setup.py bdist</snippet></ROW><ROW><id>9362407</id><snippet># Echo server program
import socket,os

s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
try:
    os.remove("/tmp/socketname")
except OSError:
    pass
s.bind("/tmp/socketname")
s.listen(1)
conn, addr = s.accept()
while 1:
    data = conn.recv(1024)
    if not data: break
    conn.send(data)
conn.close()


# Echo client program
import socket

s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
s.connect("/tmp/socketname")
s.send('Hello, world')
data = s.recv(1024)
s.close()
print 'Received', repr(data)
</snippet></ROW><ROW><id>9362591</id><snippet>python manage.py runserver 0.0.0.0:8080</snippet></ROW><ROW><id>9362591</id><snippet>settings.py</snippet></ROW><ROW><id>9362759</id><snippet>Word(printables)</snippet></ROW><ROW><id>9362759</id><snippet>text = ~any_section_header + everything_up_to_the_end_of_the_line
</snippet></ROW><ROW><id>9362759</id><snippet>from pyparsing import ParserElement, LineEnd, Literal, restOfLine, ZeroOrMore, Group, StringEnd

test = """
section header 1:
 some words can be anything
 more words could be anything at all
 etc etc lala 

some other header:
 as before could be anything
 hey isnt this fun
"""
ParserElement.defaultWhitespaceChars=(" \t")
NL = LineEnd().suppress()
END = StringEnd()

header_1=Literal('section header 1:') 
header_2=Literal('some other header:')
any_header = (header_1 | header_2)
# text isn't just anything! don't accept header line, and stop at the end of the input string
text=Group(~any_header + ~END + restOfLine) 

overall_structure = ZeroOrMore(Group(any_header +
                                     Group(ZeroOrMore(text))))
overall_structure.ignore(NL)

from pprint import pprint
print(overall_structure.parseString(test).asList())
</snippet></ROW><ROW><id>9363397</id><snippet>from django.db.models import signals

def delete_user(sender, instance=None, **kwargs):
    try:
        instance.user
    except User.DoesNotExist:
        pass
    else:
        instance.user.delete()
signals.post_delete.connect(delete_user, sender=UserProfile)
</snippet></ROW><ROW><id>9363397</id><snippet>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()

In [2]: user=User(username='foo'); user.save()

In [3]: profile=UserProfile(user=user); profile.save()

In [4]: UserProfile.objects.all().delete()

In [5]: User.objects.all()
Out[5]: []
</snippet></ROW><ROW><id>9363397</id><snippet>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()

In [2]: user=User(username='foo'); user.save()

In [3]: profile=UserProfile(user=user); profile.save()

In [4]: profile.delete()

In [5]: User.objects.all()
Out[5]: []
</snippet></ROW><ROW><id>9363397</id><snippet>In [1]: from django.contrib.auth.models import User; from testapp.models import UserProfile; User.objects.all().delete(); UserProfile.objects.all().delete()

In [2]: user=User(username='foo'); user.save()

In [3]: profile=UserProfile(user=user); profile.save()

In [4]: user.delete()

In [5]: User.objects.all()
Out[5]: []

In [6]: UserProfile.objects.all()
Out[6]: []
</snippet></ROW><ROW><id>9363568</id><snippet>In [17]: [q.user.userdata.access_token for q in Question.objects.all()]
DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id" FROM "testapp_question"; args=()
DEBUG (0.000) SELECT "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "auth_user" WHERE "auth_user"."id" = 1 ; args=(1,)
DEBUG (0.000) SELECT "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_userdata" WHERE "testapp_userdata"."user_id" = 1 ; args=(1,)
Out[17]: [u'1']

In [18]: [q.user.userdata.access_token for q in Question.objects.all().select_related()]
DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined" FROM "testapp_question" INNER JOIN "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id"); args=()
DEBUG (0.000) SELECT "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_userdata" WHERE "testapp_userdata"."user_id" = 1 ; args=(1,)
Out[18]: [u'1']

In [19]: [q.user.userdata.access_token for q in Question.objects.all().select_related('user__userdata')]
DEBUG (0.000) SELECT "testapp_question"."id", "testapp_question"."description", "testapp_question"."pub_date", "testapp_question"."image_url", "testapp_question"."user_id", "auth_user"."id", "auth_user"."username", "auth_user"."first_name", "auth_user"."last_name", "auth_user"."email", "auth_user"."password", "auth_user"."is_staff", "auth_user"."is_active", "auth_user"."is_superuser", "auth_user"."last_login", "auth_user"."date_joined", "testapp_userdata"."id", "testapp_userdata"."user_id", "testapp_userdata"."access_token", "testapp_userdata"."profile_image_url" FROM "testapp_question" INNER JOIN "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id") LEFT OUTER JOIN "testapp_userdata" ON ("auth_user"."id" = "testapp_userdata"."user_id"); args=()
Out[19]: [u'1']
</snippet></ROW><ROW><id>9363568</id><snippet>('user', 'user__userdata')</snippet></ROW><ROW><id>9363568</id><snippet>user__userdata</snippet></ROW><ROW><id>9363568</id><snippet>SELECT 
    "testapp_question"."id", "testapp_question"."description" [...]
    "auth_user"."id", "auth_user"."username" [...]
    "testapp_userdata"."id", "testapp_userdata"."user_id"  [...]
FROM
    "testapp_question" INNER JOIN 
    "auth_user" ON ("testapp_question"."user_id" = "auth_user"."id") LEFT OUTER JOIN 
    "testapp_userdata" ON ("auth_user"."id" = "testapp_userdata"."user_id")
</snippet></ROW><ROW><id>9363805</id><snippet>src = open(srcp, 'r')
dst = open(dstp, 'w+b')
</snippet></ROW><ROW><id>9363805</id><snippet>'rb'</snippet></ROW><ROW><id>9363905</id><snippet>apt-get install libsqlite3-dev</snippet></ROW><ROW><id>9363905</id><snippet>sqlite-devel</snippet></ROW><ROW><id>9363933</id><snippet>class exampleClass():
    'this is just an example'
</snippet></ROW><ROW><id>9363933</id><snippet>class exampleClass:
    'this is just an example'
</snippet></ROW><ROW><id>9363933</id><snippet>class exampleClass(object): # or `dict' etc
    'this is just an example'
</snippet></ROW><ROW><id>9364282</id><snippet>DoThis</snippet></ROW><ROW><id>9364282</id><snippet>import Tkinter as tk

class MyApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.entry = tk.Entry(self)
        self.entry.pack()
        close_button = tk.Button(self, text="Close", command=self.close)
        close_button.pack()
        self.string = ""

    def close(self):
        global result
        self.string = self.entry.get()
        self.destroy()

    def mainloop(self):
        tk.Tk.mainloop(self)
        return self.string

print "enter a string in the GUI"
app = MyApp()
result = app.mainloop()
print "you entered:", result
</snippet></ROW><ROW><id>9364541</id><snippet>def some_decorator(func):
    @functools.wraps(func)
    def decorated(*args, **kwargs):
        res = func(*args, **kwargs)
        # Your code here
        return res
    return decorated
</snippet></ROW><ROW><id>9364541</id><snippet>@some_decorator
@staticmethod
def bar(**kwargs):
    pass
</snippet></ROW><ROW><id>9364541</id><snippet>staticmethod</snippet></ROW><ROW><id>9364894</id><snippet>group = QtGui.QGroupBox()
group.setTitle("FOO")
</snippet></ROW><ROW><id>9364894</id><snippet>class ButtonGroupBox(QtGui.QWidget):

    def __init__(self, parent=None):
        super(ButtonGroupBox, self).__init__(parent=parent)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.setContentsMargins(0,24,0,0)
        self.groupBox = QtGui.QGroupBox(self)
        self.button = QtGui.QPushButton("FOO", parent=self)
        self.layout.addWidget(self.groupBox)

        self.button.move(0, -4) 
</snippet></ROW><ROW><id>9365052</id><snippet>br@ymir:~/sweethome/temp$ python
Python 2.6.5 (r265:79063, Apr 16 2010, 13:57:41) 
[GCC 4.4.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; plt.ion()
&gt;&gt;&gt; l,=plt.plot([1,2,3],[4,5,6],'bo-')      # a figure pops up
&gt;&gt;&gt; l.remove()                              # nothing happens
&gt;&gt;&gt; plt.draw()                              # don't forget to redraw
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9365052</id><snippet>set_ydata(...)</snippet></ROW><ROW><id>9365052</id><snippet>draw()</snippet></ROW><ROW><id>9365208</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>9365208</id><snippet>virtualenv</snippet></ROW><ROW><id>9365363</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>9365363</id><snippet>u'hélas'</snippet></ROW><ROW><id>9365540</id><snippet>request.GET</snippet></ROW><ROW><id>9365540</id><snippet>header_mapping = {
    'site': 'Site Name',
    'startdate': 'Start Date'.
    ....
}
headers = [header_mapping[k] for k, v in request.GET.items() if v]
</snippet></ROW><ROW><id>9365542</id><snippet>bar = treeWidget.verticalScrollBar()
yScroll = bar.value()
# repopulate here ...
treeWidget.scrollContentsBy(0, yScroll)
</snippet></ROW><ROW><id>9365542</id><snippet>item = treeWidget.currentItem() # one way
item = treeWidget.itemAt(centerOfTree) # another way

# either save the text value or whatever the custom 
# identifying value is of your item
text = item.text()
</snippet></ROW><ROW><id>9365542</id><snippet># this is assuming the item is both present, 
# and referencing it by its string value
newItem = treeWidget.findItems(text)[0]
treeWidget.scrollToItem(newItem)
</snippet></ROW><ROW><id>9365632</id><snippet>(r'^blog/(?P&lt;day&gt;\d{2})-(?P&lt;month&gt;\w{3})-(?P&lt;year&gt;\d{4})/(?P&lt;slug&gt;[-\w]+)/$','blog.views.single_post'),
</snippet></ROW><ROW><id>9365686</id><snippet>  QRect desktopRect = QApplication::desktop()-&gt;availableGeometry(this);
  QPoint center = desktopRect.center();

  move(center.x() - width() * 0.5, center.y() - height());
</snippet></ROW><ROW><id>9365841</id><snippet>&lt;form enctype="multipart/form-data" method="post" action=""&gt;</snippet></ROW><ROW><id>9365841</id><snippet>form = form_class(request.POST, request.FILES)</snippet></ROW><ROW><id>9365842</id><snippet>function2</snippet></ROW><ROW><id>9365842</id><snippet>def function2():
    # set the values of startNode and endNode here
    # e.g.
    startNode = 1
    endNode = 5
    return (startNode, endNode)
</snippet></ROW><ROW><id>9365842</id><snippet>function2</snippet></ROW><ROW><id>9365842</id><snippet>if __name__ == "__main__":
    startNode, endNode = function2()
    createFile(startNode, endNode)
</snippet></ROW><ROW><id>9365959</id><snippet>nodeTable.append(Node)
</snippet></ROW><ROW><id>9365959</id><snippet>nodeTable.append(Node())
</snippet></ROW><ROW><id>9365989</id><snippet>Test</snippet></ROW><ROW><id>9365989</id><snippet>Test</snippet></ROW><ROW><id>9365989</id><snippet>Test</snippet></ROW><ROW><id>9365989</id><snippet>from Test import Test</snippet></ROW><ROW><id>9365989</id><snippet>Test.Test</snippet></ROW><ROW><id>9365989</id><snippet>unbound method set_name()</snippet></ROW><ROW><id>9365989</id><snippet>set_name</snippet></ROW><ROW><id>9365989</id><snippet>Test().set_name("Sean")</snippet></ROW><ROW><id>9365989</id><snippet>()</snippet></ROW><ROW><id>9365989</id><snippet>Test</snippet></ROW><ROW><id>9365989</id><snippet>Test</snippet></ROW><ROW><id>9365989</id><snippet>self</snippet></ROW><ROW><id>9365995</id><snippet>import pipes
p = os.popen("/usr/bin/passwd " + pipes.quote(username), 'w')
</snippet></ROW><ROW><id>9365995</id><snippet>os.popen</snippet></ROW><ROW><id>9365995</id><snippet>pipes.quote</snippet></ROW><ROW><id>9365995</id><snippet>subprocess</snippet></ROW><ROW><id>9365995</id><snippet>import subprocess
p = subprocess.Popen(["/usr/bin/passwd", username])
</snippet></ROW><ROW><id>9366084</id><snippet>WORKON_HOME=/home/pawesome/envs/pinax072/
. $WORKON_HOME/bin/activate</snippet></ROW><ROW><id>9366084</id><snippet>#WSGIScriptAlias / /home/pawesome/webapps/qtsocial/myproject.wsgi</snippet></ROW><ROW><id>9366084</id><snippet>WSGIScriptAlias / /home/pawesome/webapps/qtsocial/myproject/deploy/pinax.wsgi</snippet></ROW><ROW><id>9366349</id><snippet>for line in open('tmp.txt'):
  print '&lt;li&gt;' + line.rstrip() +'&lt;/li&gt;'
</snippet></ROW><ROW><id>9366406</id><snippet>data = list(csv.DictReader(open(file, 'rU')))
print "keys", data[0].keys()
</snippet></ROW><ROW><id>9366759</id><snippet>&gt;&gt;&gt; original = 'a,1,b,2,c,3'
&gt;&gt;&gt; s = original.split(',')
&gt;&gt;&gt; s
['a', '1', 'b', '2', 'c', '3']
&gt;&gt;&gt; alternate = map(''.join, zip(s[::2], s[1::2]))
&gt;&gt;&gt; alternate
['a1', 'b2', 'c3']
</snippet></ROW><ROW><id>9366785</id><snippet>map(lambda (i,v) : A[i].update(v), enumerate(map((lambda i: {'x':i['x'] + 1}), A)))
</snippet></ROW><ROW><id>9367086</id><snippet>&gt;&gt;&gt; list.append
&lt;method 'append' of 'list' objects&gt;
</snippet></ROW><ROW><id>9367086</id><snippet>append</snippet></ROW><ROW><id>9367086</id><snippet>list</snippet></ROW><ROW><id>9367086</id><snippet>docstats = []
for doc in response.results:
    docstats.append(json.loads(doc['status']))
</snippet></ROW><ROW><id>9367086</id><snippet>docstats = [json.loads(doc['status']) for doc in response.results]
</snippet></ROW><ROW><id>9367201</id><snippet>__new__()</snippet></ROW><ROW><id>9367201</id><snippet>__init__()</snippet></ROW><ROW><id>9367201</id><snippet>__new__()</snippet></ROW><ROW><id>9367201</id><snippet>__init__()</snippet></ROW><ROW><id>9367416</id><snippet>defaultdict</snippet></ROW><ROW><id>9367416</id><snippet>defaultdict</snippet></ROW><ROW><id>9367416</id><snippet>from collections import defaultdict

class BetterDefaultDict(defaultdict):
  def __missing__(self, key):
    return self.setdefault(key, self.default_factory(key))
</snippet></ROW><ROW><id>9367416</id><snippet>&gt;&gt;&gt; files = BetterDefaultDict(lambda key: open(key, 'w'))
&gt;&gt;&gt; files['/tmp/test.py']
&lt;open file '/tmp/test.py', mode 'w' at 0x7ff552ad6db0&gt;
</snippet></ROW><ROW><id>9367416</id><snippet>finally:
  for f in files.values(): f.close()
</snippet></ROW><ROW><id>9367538</id><snippet>or</snippet></ROW><ROW><id>9367538</id><snippet>a or b</snippet></ROW><ROW><id>9367538</id><snippet>a</snippet></ROW><ROW><id>9367538</id><snippet>b</snippet></ROW><ROW><id>9367538</id><snippet>if intex in "abcdefghijklmnopqr":
    ...
</snippet></ROW><ROW><id>9367538</id><snippet>a</snippet></ROW><ROW><id>9367538</id><snippet>1</snippet></ROW><ROW><id>9367538</id><snippet>ord()</snippet></ROW><ROW><id>9367538</id><snippet>counter += ord(intex) - ord("a") + 1
</snippet></ROW><ROW><id>9367831</id><snippet>import sys

def function_four():
    # Does Stuff
    return function_one

def function_three():
    # Does Stuff
    return function_two

def function_one():
    usr_input = input("Options: '1') function_three | '2') Quit\nOption: ")
    if usr_input == '1':
        return function_three
    elif usr_input == '2':
        return None
    else:
        print("Did not recognise command. Try again.")
        return function_one

def function_two():
    usr_input = input("Options: '1') function_four | '2') function_three | '3') Quit\nOption: ")
    if usr_input == '1':
        return function_four
    elif usr_input == '2':
        return function_three
    elif usr_input == '3':
        return None
    else:
        print("Did not recognise command. Try again.")
        return function_two

state = function_one
while state is not None:
    state = state()
</snippet></ROW><ROW><id>9367849</id><snippet>self.room</snippet></ROW><ROW><id>9367849</id><snippet>self.room[self.x][self.y-1]
</snippet></ROW><ROW><id>9367849</id><snippet>self.x, self.y-1</snippet></ROW><ROW><id>9368029</id><snippet>f_words = [(word, freq) for (word, freq) in the_list if word.startswith('f')]
</snippet></ROW><ROW><id>9368029</id><snippet>f_words[:25]</snippet></ROW><ROW><id>9368751</id><snippet>'&lt;1&gt;'</snippet></ROW><ROW><id>9368751</id><snippet>'1'</snippet></ROW><ROW><id>9368751</id><snippet>buttonPressFactory</snippet></ROW><ROW><id>9368751</id><snippet>def buttonPressFactory(self, button):
    def buttonPress(*args):
        self.press(button)
    eventname = '&lt;' + button + '&gt;' if len(button) &gt; 1 else button
    root.bind(eventname, buttonPress)
    return buttonPress
</snippet></ROW><ROW><id>9369202</id><snippet>Imputer</snippet></ROW><ROW><id>9369219</id><snippet>&lt;</snippet></ROW><ROW><id>9369219</id><snippet>&gt;</snippet></ROW><ROW><id>9369219</id><snippet>t</snippet></ROW><ROW><id>9369219</id><snippet>d</snippet></ROW><ROW><id>9369219</id><snippet>&gt;&gt;&gt; '&lt;p&gt;some test&lt;/p&gt;'.strip('&lt;td&gt;')
'p&gt;some test&lt;/p'
</snippet></ROW><ROW><id>9369219</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>9369219</id><snippet>replace</snippet></ROW><ROW><id>9369219</id><snippet>&gt;&gt;&gt; '&lt;td&gt;some test&lt;/td&gt;'.replace('&lt;td&gt;', '')
'some test&lt;/td&gt;'
</snippet></ROW><ROW><id>9369219</id><snippet>&gt;&gt;&gt; '&lt;td&lt;td&gt;&gt;some test&lt;/td&gt;'.replace('&lt;td&gt;', '')
'&lt;td&gt;some test&lt;/td&gt;'
</snippet></ROW><ROW><id>9369219</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>9369219</id><snippet>lxml</snippet></ROW><ROW><id>9369313</id><snippet>some_class.__name__
</snippet></ROW><ROW><id>9369313</id><snippet>linked_models = [m2m.related.parent_model.__name__ for m2m in mymodel._meta.many_to_many]
</snippet></ROW><ROW><id>9369313</id><snippet>linked_models = [(m2m.related.parent_model.__name__, m2m.related.parent_model._meta.verbose_name) for m2m in mymodel._meta.many_to_many]
</snippet></ROW><ROW><id>9369313</id><snippet>{% for class_name, verbose_name in linked_models %}
    {{ class_name }} {{ verbose_name }}
{% endfor %}
</snippet></ROW><ROW><id>9369313</id><snippet>linked_models = [{'class_name': m2m.related.parent_model.__name__, 'verbose_name': m2m.related.parent_model._meta.verbose_name} for m2m in mymodel._meta.many_to_many]
</snippet></ROW><ROW><id>9369313</id><snippet>{% for model in linked_models %}
    {{ model.class_name }} {{ model.verbose_name }}
{% endfor %}
</snippet></ROW><ROW><id>9369320</id><snippet>socket.error</snippet></ROW><ROW><id>9369326</id><snippet>get_hat</snippet></ROW><ROW><id>9369326</id><snippet>&gt;&gt;&gt; [(x,y) for x in [-1,0,1] for y in [-1,0,1]]
[(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]
</snippet></ROW><ROW><id>9369414</id><snippet>timer = QTimer()
connect(timer, SIGNAL(timeout()), this, SLOT(update()))
timer.start(1000)
</snippet></ROW><ROW><id>9369414</id><snippet>update()</snippet></ROW><ROW><id>9369414</id><snippet>timer.stop()</snippet></ROW><ROW><id>9369436</id><snippet>query = None
for tag in F:
    if query is None:
        query = Q(tags=tag)
    else:
        query &amp;= Q(tags=tag)

PhotoSet.objects.filter(query)
</snippet></ROW><ROW><id>9369639</id><snippet>import urllib2

class BottomPipeResult :

    AGENT_ID   = "Mozilla/5.0 (X11; Linux x86_64; rv:7.0.1) Gecko/20100101 Firefox/7.0.1"
    BOTTOMPIPE_URL = "http://boilerpipe-web.appspot.com/extract?url={0}&amp;extractor=LargestContentExtractor&amp;output=text"
    _myBPPage = ""

    # scrape and get results from bottompipe
    def scrapeResult(self, theURL, user_agent=AGENT_ID) :
        request = urllib2.Request(self.BOTTOMPIPE_URL.format(theURL))
        if user_agent:
            request.add_header("User-Agent", user_agent)
            pagefile = urllib2.urlopen(request)
            realurl = pagefile.geturl()
            f = pagefile
            self._myBPPAge = f.read()
        return(self._myBPPAge) 


bpr = BottomPipeResult()
myLinkResult = 'http://result.com'

f = open('out.html', 'a')
f.write(bpr.scrapeResult(myLinkResult))
f.close()
</snippet></ROW><ROW><id>9369639</id><snippet>Result-Expand.flv
We want to help your company grow. Our Result offices around the world can help you expand your business faster and more cost efficiently. And at the same time bring the experience of having expanded more than 150 companies during the past ten years.
Result can help you grow in your local market, regionally, or globally through our team of experienced business builders, our industry know-how and our know-who.
Our services range from well designed expansion strategies to assuming operational responsibility for turning these strategies into successful business.
We donâ€™t see ourselves as mere consultantsÂ  who give you a strategy presentation and then leave you to your own devices. We prefer to be considered as an extended, entirely practical arm of your management team. Weâ€™re hands-on and heads-on. Weâ€™re business builders.
Weâ€™re co-entrepreneurs. This is also reflected in our compensation structure â€“ a significant part of our compensation is result Â based.
</snippet></ROW><ROW><id>9369639</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>9369639</id><snippet>output = BottomPipeResult.scrapeResult(myLinkResult) 
f.write('\n'.join(['&lt;p&gt;' + x + '&lt;/p&gt;' for x in output.split('\n')]))
</snippet></ROW><ROW><id>9369869</id><snippet>LDSHARED=/usr/bin/ld python setup.py build_ext
</snippet></ROW><ROW><id>9369894</id><snippet>ctypes.c_uint(0xFFFFFFFF)</snippet></ROW><ROW><id>9369894</id><snippet>POINTER</snippet></ROW><ROW><id>9369894</id><snippet>pointer</snippet></ROW><ROW><id>9369894</id><snippet>__init__</snippet></ROW><ROW><id>9369894</id><snippet>__init__</snippet></ROW><ROW><id>9369894</id><snippet>__init__</snippet></ROW><ROW><id>9369936</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>9369936</id><snippet>&gt;&gt;&gt; 1/0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</snippet></ROW><ROW><id>9369936</id><snippet>Python 2.3.5 (#62, Feb  8 2005, 16:23:02) [MSC v.1200 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.

    ****************************************************************
    Personal firewall software may warn about the connection IDLE
    makes to its subprocess using this computer's internal loopback
    interface.  This connection is not visible on any external
    interface and no data is sent to or received from the Internet.
    ****************************************************************

IDLE 1.0.5      
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getwindowsversion()
(4, 10, 67766446, 1, ' A ')
&gt;&gt;&gt; sys.version_info
(2, 3, 5, 'final', 0)
&gt;&gt;&gt; 1/0

Traceback (most recent call last):
  File "&lt;pyshell#3&gt;", line 1, in -toplevel-
    1/0
ZeroDivisionError: integer division or modulo by zero
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9370075</id><snippet>and</snippet></ROW><ROW><id>9370075</id><snippet>all</snippet></ROW><ROW><id>9370075</id><snippet>def defined(dct, keys):
    return zip(*[([k] + [v[m] for m in keys])
                 for k, v in dct.iteritems()
                 if all(m in v for m in keys)])
</snippet></ROW><ROW><id>9370201</id><snippet>import numpy as np

def main():
    np.random.seed(1) # For reproducibility
    data = generate_data((10, 6))

    indices = rightmost_min_col(data)
    new_data = pop_col(data, indices)

    print 'Original data...'
    print data
    print 'Modified data...'
    print new_data

def generate_data(shape):
    return np.random.randint(0, 10, shape)

def rightmost_min_col(data):
    nrows, ncols = data.shape[:2]
    min_indices = np.fliplr(data).argmin(axis=1)
    min_indices = (ncols - 1) - min_indices
    return min_indices

def pop_col(data, col_indices):
    nrows, ncols = data.shape[:2]
    col_indices = col_indices[:, np.newaxis]
    row_indices = np.arange(ncols)[np.newaxis, :]
    mask = col_indices != row_indices
    return data[mask].reshape((nrows, ncols-1))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9370201</id><snippet>Original data...
[[5 8 9 5 0 0]
 [1 7 6 9 2 4]
 [5 2 4 2 4 7]
 [7 9 1 7 0 6]
 [9 9 7 6 9 1]
 [0 1 8 8 3 9]
 [8 7 3 6 5 1]
 [9 3 4 8 1 4]
 [0 3 9 2 0 4]
 [9 2 7 7 9 8]]
Modified data...
[[5 8 9 5 0]
 [7 6 9 2 4]
 [5 2 4 4 7]
 [7 9 1 7 6]
 [9 9 7 6 9]
 [1 8 8 3 9]
 [8 7 3 6 5]
 [9 3 4 8 4]
 [0 3 9 2 4]
 [9 7 7 9 8]]
</snippet></ROW><ROW><id>9370201</id><snippet>import numpy as np
a = np.array([[1, 2, 3]])
b = np.array([[1],[2],[3]])
print a == b
</snippet></ROW><ROW><id>9370201</id><snippet>array([[ True, False, False],
       [False,  True, False],
       [False, False,  True]], dtype=bool)
</snippet></ROW><ROW><id>9370201</id><snippet>pop_col</snippet></ROW><ROW><id>9370235</id><snippet>ipdb&gt; request.GET
&lt;QueryDict: {u'x': [u'1']}&gt;
ipdb&gt; request.POST
&lt;QueryDict: {}&gt;
ipdb&gt; request.REQUEST
MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)
ipdb&gt; new_post = request.POST.copy()
ipdb&gt; new_post.update(request.GET)
ipdb&gt; request.POST = new_post
ipdb&gt; request.POST
&lt;QueryDict: {u'x': [u'1']}&gt;
ipdb&gt; request.GET
&lt;QueryDict: {u'x': [u'1']}&gt;
ipdb&gt; request.REQUEST
MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)
</snippet></ROW><ROW><id>9370235</id><snippet>ipdb&gt; request.REQUEST
MergeDict(&lt;QueryDict: {}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)
ipdb&gt; request.REQUEST.dicts = (request.POST, request.GET)
ipdb&gt; request.REQUEST
MergeDict(&lt;QueryDict: {u'x': [u'1']}&gt;, &lt;QueryDict: {u'x': [u'1']}&gt;)
</snippet></ROW><ROW><id>9370235</id><snippet>self._request = datastructures.MergeDict(self.POST, self.GET)</snippet></ROW><ROW><id>9370250</id><snippet>select *</snippet></ROW><ROW><id>9370271</id><snippet>{k: v for ...}
</snippet></ROW><ROW><id>9370271</id><snippet>k</snippet></ROW><ROW><id>9370271</id><snippet>v</snippet></ROW><ROW><id>9370271</id><snippet>{dpidx:d[dpidx] if dpidx in d else dpidx for dpidx in range(N)}
</snippet></ROW><ROW><id>9370271</id><snippet>k: v</snippet></ROW><ROW><id>9370271</id><snippet>{dpidx:d.get(dpidx, dpidx) for dpidx in range(N)}
</snippet></ROW><ROW><id>9370371</id><snippet>itertools.product</snippet></ROW><ROW><id>9370371</id><snippet>zip</snippet></ROW><ROW><id>9370371</id><snippet>allzeniths, allazimuths = zip(*itertools.product(zeniths, azimuths))
</snippet></ROW><ROW><id>9370371</id><snippet>amr = dview.map(f, allzeniths, allazimuths)
</snippet></ROW><ROW><id>9370371</id><snippet>zeniths = range(1,4)
azimuths = range(6,8)

product = list(itertools.product(zeniths, azimuths))
# [(1, 6), (1, 7), (2, 6), (2, 7), (3, 6), (3, 7)]
</snippet></ROW><ROW><id>9370371</id><snippet>zip(*product)</snippet></ROW><ROW><id>9370371</id><snippet>allzeniths, allazimuths = zip(*itertools.product(zeniths, azimuths))

print allzeniths
# (1, 1, 2, 2, 3, 3)
print allazimuths
# (6, 7, 6, 7, 6, 7)
</snippet></ROW><ROW><id>9370371</id><snippet>def f(z,a):
    return z*a

view.map(f, allzeniths, allazimuths)
</snippet></ROW><ROW><id>9370555</id><snippet>'page-reordered'</snippet></ROW><ROW><id>9370555</id><snippet>import gtk

 def on_reorder(notebook, child, number, user_data):
     if number == 0:
         notebook.reorder_child(user_data, 0)

 def main():
     mainwin = gtk.Window()
     notebook = gtk.Notebook()
     mainwin.add(notebook)
     mainwin.set_default_size(200,200)
     for label in ['Search', 'Row#6', 'Row#9']:
         child = gtk.VBox()
         notebook.append_page(child, gtk.Label(label))
         if label != 'Search':
             notebook.set_tab_reorderable(child, True)
         else:
             notebook.set_tab_reorderable(child, False)
     searchtab = notebook.get_nth_page(0)
     notebook.connect('page-reordered', on_reorder, searchtab)

     mainwin.show_all()
     mainwin.connect('destroy', gtk.main_quit)
     gtk.main()

 if __name__ == "__main__":
     main()   
</snippet></ROW><ROW><id>9370579</id><snippet>[s.strip().title() for s in my_list]
</snippet></ROW><ROW><id>9370982</id><snippet>&gt;&gt;&gt; import Levenshtein
&gt;&gt;&gt; s = "spam ham and eggs"
&gt;&gt;&gt; t = "ram"
&gt;&gt;&gt; for i,_ in enumerate(s): 
...   s_ = s[i:i+len(t)]
...   if Levenshtein.distance(s_, t) == 1:
...     print s_
... 
pam
ham
</snippet></ROW><ROW><id>9371088</id><snippet>#!/usr/bin/env python

import StringIO
import zipfile
from google.appengine.api import files
from google.appengine.ext import blobstore
from google.appengine.ext import webapp
from google.appengine.ext.webapp import blobstore_handlers
from google.appengine.ext.webapp import util

def zipit():
    zipstream = StringIO.StringIO()
    zfile = zipfile.ZipFile(file=zipstream, mode='w')
    bytes = "lorem ipsum dolor sit amet"
    zfile.writestr('loremipsum', bytes, compress_type=zipfile.ZIP_STORED)
    zfile.close()
    zipstream.seek(0)
    return zipstream.getvalue()

class MainHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self):
        k = self.request.get('key')
        if k:
            self.send_blob(k)
            return

        zip_file = files.blobstore.create(mime_type='application/zip')
        zip_data = zipit()

        with files.open(zip_file, 'a') as f:
            f.write(zip_data)
        files.finalize(zip_file)
        blob_key = files.blobstore.get_blob_key(zip_file)

        self.response.out.write('&lt;a href="/getzip?key=%s"&gt;get zip&lt;/a&gt;' % blob_key)


application = webapp.WSGIApplication([('/getzip', MainHandler)])

def main():
    util.run_wsgi_app(application)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9371105</id><snippet>random.shuffle()</snippet></ROW><ROW><id>9371143</id><snippet>any()</snippet></ROW><ROW><id>9371143</id><snippet>True</snippet></ROW><ROW><id>9371143</id><snippet>any(x.name == "t2" for x in l)
</snippet></ROW><ROW><id>9371151</id><snippet>sftp.put(filepath, localpath)
</snippet></ROW><ROW><id>9371151</id><snippet>sftp.put(localpath, filepath)
</snippet></ROW><ROW><id>9371194</id><snippet>if all(toTest[i] == toTest[-i] for i in range(len(toTest)/2)):
    print("It's a palindrome!")
</snippet></ROW><ROW><id>9371194</id><snippet>if toTest == toTest[::-1]:
    print("It's a palindrome!")
</snippet></ROW><ROW><id>9371489</id><snippet>collections.deque(chan, maxlen=0)
</snippet></ROW><ROW><id>9371489</id><snippet>_</snippet></ROW><ROW><id>9371489</id><snippet>_</snippet></ROW><ROW><id>9371489</id><snippet>gettext</snippet></ROW><ROW><id>9371489</id><snippet>In [1]: import collections

In [2]: a = range(100000)

In [3]: timeit reduce(lambda _, __: None, a)
100 loops, best of 3: 13.5 ms per loop

In [4]: timeit for dummy in a: pass
1000 loops, best of 3: 1.75 ms per loop

In [5]: timeit collections.deque(a, maxlen=0)
1000 loops, best of 3: 1.51 ms per loop
</snippet></ROW><ROW><id>9371534</id><snippet>collections.Counter</snippet></ROW><ROW><id>9371534</id><snippet>def rem(iterable):
    c = collections.Counter(iterable)
    for k in c:
        c[k] -= 1
    return sorted(c.elements())
</snippet></ROW><ROW><id>9371534</id><snippet>collections.Counter</snippet></ROW><ROW><id>9371534</id><snippet>def rem(iterable):
   result = []
   seen = set()
   for x in iterable:
       if x in seen:
           result.append(x)
       else:
           seen.add(x)
   result.sort()
   return result
</snippet></ROW><ROW><id>9371659</id><snippet>import numpy as np
array_a = np.random.rand(10,2)
array_b = np.random.permutation(range(10))

array_c = np.empty(array_a.shape, array_a.dtype)
for i in range(10):
  array_c[array_b[i], 0] = array_a[i, 0]
  array_c[array_b[i], 1] = array_a[i, 1]
</snippet></ROW><ROW><id>9371717</id><snippet>cin</snippet></ROW><ROW><id>9371717</id><snippet>cin.sync_with_stdio(false);
</snippet></ROW><ROW><id>9371717</id><snippet>int myvalue1;
cin &gt;&gt; myvalue1;
int myvalue2;
scanf("%d",&amp;myvalue2);
</snippet></ROW><ROW><id>9371774</id><snippet>res</snippet></ROW><ROW><id>9371774</id><snippet>res.result[u'network'][u'altitude']</snippet></ROW><ROW><id>9371943</id><snippet>bool ? true_value : false_value
</snippet></ROW><ROW><id>9371943</id><snippet>c and c == d or True
</snippet></ROW><ROW><id>9371943</id><snippet>result = x if a &gt; b else y
</snippet></ROW><ROW><id>9371943</id><snippet>result = (y, x)[a&gt;b]
</snippet></ROW><ROW><id>9371983</id><snippet>self.setTabOrder(self.textboxA, self.textboxB)
self.setTabOrder(self.textboxB, self.textboxC)
self.setTabOrder(self.textboxC, self.textboxD)
</snippet></ROW><ROW><id>9372074</id><snippet>defaultdict</snippet></ROW><ROW><id>9372074</id><snippet>dict</snippet></ROW><ROW><id>9372074</id><snippet>test</snippet></ROW><ROW><id>9372074</id><snippet>if T[s - c * x, i]:
</snippet></ROW><ROW><id>9372074</id><snippet>if T.get((s - c * x, i), False):
</snippet></ROW><ROW><id>9372074</id><snippet>i</snippet></ROW><ROW><id>9372074</id><snippet>i + 1</snippet></ROW><ROW><id>9372074</id><snippet>from multiprocessing import Pool
from multiprocessing.managers import BaseManager, DictProxy, ListProxy
from collections import defaultdict

class MyManager(BaseManager):
    pass

MyManager.register('defaultdict', defaultdict, DictProxy)
MyManager.register('list', list, ListProxy)

def test(i,x,T, order):
    target_sum = 100
    # T[x, i] is True if 'x' can be solved
    # by a linear combination of data[:i+1]
    #T = defaultdict(bool)          # all values are False by default
    T[0, 0] = True                  # base case
    for s in range(target_sum + 1): # set the range of one higher 
                                    # than sum to include sum itself
        for c in range(s / x + 1):
            if T[s - c * x, i]:
                T[s, i + 1] = True
                order.append(i)

def setup():
    mgr = MyManager()
    mgr.start()
    run_order = mgr.list()
    T = mgr.defaultdict(bool)
    T[0, 0] = True
    data = [2,5,8]
    return data, T, run_order

def async_loop(data, func, output, run_order, wait=False):
    pool = Pool(processes=6)
    for i, x in enumerate(data):    # i is index, x is data[i]
        p=pool.apply_async(func, (i, x, output, run_order))
        if wait:
            p.wait()
    pool.close()
    pool.join()
    pool.terminate()

def output_size(output, run_order, wait):
    wait = 'out' if wait else ''
    print 'size of Table (with{0} multiprocesing) is: {1}'.format(
        wait, len(output))
    count_of_true = []
    for (x, result) in output.items():
        if output[x] == True:
            count_of_true.append(x)
    print 'total number of true (with{0} multiprocesing) is: {1}'.format(
        wait, len(count_of_true))
    print 'run order is: {0}'.format(run_order)

data, table, run_order = setup()
async_loop(data, test, table, run_order, wait=True)
output_size(table, run_order, True)
data, table, run_order = setup()
async_loop(data, test, table, run_order, wait=False)
output_size(table, run_order, false)
</snippet></ROW><ROW><id>9372074</id><snippet>size of Table (without multiprocesing) is: 402
total number of true (without multiprocesing) is: 250
run order is: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
size of Table (with multiprocesing) is: 402
total number of true (with multiprocesing) is: 250
run order is: [0, 0, 0, 1, 1, 0, 1, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 0, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 0, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 0, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 0, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 0, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 0, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>9372074</id><snippet>p.wait()</snippet></ROW><ROW><id>9372074</id><snippet>i = 0</snippet></ROW><ROW><id>9372074</id><snippet>i = 1</snippet></ROW><ROW><id>9372074</id><snippet>i = 2</snippet></ROW><ROW><id>9372074</id><snippet>i = 0</snippet></ROW><ROW><id>9372074</id><snippet>i = 1</snippet></ROW><ROW><id>9372074</id><snippet>i = 1</snippet></ROW><ROW><id>9372074</id><snippet>order</snippet></ROW><ROW><id>9372080</id><snippet>/</snippet></ROW><ROW><id>9372080</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>9372120</id><snippet>&gt;&gt;&gt; def binary(n):
...   if n &lt; 2:
...     print n
...   else:
...     binary(n / 2)
...     print n % 2
... 
&gt;&gt;&gt; binary(0)
0
&gt;&gt;&gt; binary(1)
1
&gt;&gt;&gt; binary(3)
1
1
&gt;&gt;&gt; binary(9)
1
0
0
1
&gt;&gt;&gt; binary(10)
1
0
1
0
</snippet></ROW><ROW><id>9372120</id><snippet>&gt;&gt;&gt; def binary(n):
...   if n &lt; 2:
...     return [n]
...   else:
...     return binary(n / 2) + [n % 2]
... 
&gt;&gt;&gt; binary(0)
[0]
&gt;&gt;&gt; binary(1)
[1]
&gt;&gt;&gt; binary(3)
[1, 1]
&gt;&gt;&gt; binary(9)
[1, 0, 0, 1]
&gt;&gt;&gt; binary(10)
[1, 0, 1, 0]
</snippet></ROW><ROW><id>9372120</id><snippet>&gt;&gt;&gt; ''.join(map(str, binary(10)))
'1010'
</snippet></ROW><ROW><id>9372120</id><snippet>&gt;&gt;&gt; bin(10)[2:]
'1010'
</snippet></ROW><ROW><id>9372167</id><snippet>def xor_orig(data, key):
    return bool(data) ^ bool(key)
</snippet></ROW><ROW><id>9372167</id><snippet>^</snippet></ROW><ROW><id>9372167</id><snippet>def xor_orig(data, key):
    return int(data,2) ^ int(key,2)


In [1]: data = '1010'
In [2]: key = '0101'    
In [3]: int(data,2) ^ int(key,2)
Out[3]: 15
In [4]: data = '10'    
In [5]: key = '01'    
In [6]: int(data,2) ^ int(key,2)
Out[6]: 3
In [7]: data = '10'    
In [8]: key = '10'    
In [9]: int(data,2) ^ int(key,2)
Out[9]: 0
</snippet></ROW><ROW><id>9372326</id><snippet>add</snippet></ROW><ROW><id>9372326</id><snippet>ms = (time.time() - start)*1000
bid_response = realtime_bidding_pb2.BidResponse()
bid_response.processing_time_ms = int(ms)
ad = bid_response.ad.add()
ad.html_snippet = """&lt;img src='http://cdn.test.com/test.gif' /&gt;"""
ad.click_through_url = """test.com"""

adslot = ad.adslot.add()
adslot.id = adslots_id[0]             
adslot.max_cpm_micros=150000000
</snippet></ROW><ROW><id>9372488</id><snippet>([, ]+)</snippet></ROW><ROW><id>9372488</id><snippet>([, ])+</snippet></ROW><ROW><id>9372502</id><snippet>bar</snippet></ROW><ROW><id>9372502</id><snippet>def bar():
    print x

x = 10
if __name__ == '__main__':
    bar()
</snippet></ROW><ROW><id>9372502</id><snippet>x</snippet></ROW><ROW><id>9372502</id><snippet>del</snippet></ROW><ROW><id>9372502</id><snippet>x</snippet></ROW><ROW><id>9372502</id><snippet>bar</snippet></ROW><ROW><id>9372502</id><snippet>bar</snippet></ROW><ROW><id>9372502</id><snippet>None</snippet></ROW><ROW><id>9372502</id><snippet>import</snippet></ROW><ROW><id>9372659</id><snippet>ll = [ 1, 2, 3, [4, 5, [6, 7, 8]]]

def flatten(input_list):
    output_list = []
    for element in input_list:
        if type(element) == list:
            output_list.extend(flatten(element))
        else:
            output_list.append(element)
    return output_list

print (flatten(ll)) #prints [1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>9372676</id><snippet>from PIL import ImageDraw, ImageFont, Image

im = Image.new('RGBA', (700, 1600), (0, 0, 0, 0)) 
fSize = 1
yVal = 1

while fSize &lt;= 50:
    font = ImageFont.truetype('arial.ttf', fSize)
    fString = "This line is in Arial font size " + str(fSize)
    size = font.getsize(fString)
    draw = ImageDraw.Draw(im)
    draw.text((5, yVal), fString, font=font, fill=None)
    fSize += 1
    yVal += fSize + 5
</snippet></ROW><ROW><id>9372731</id><snippet>csv</snippet></ROW><ROW><id>9372731</id><snippet>csvwriter.writerows()</snippet></ROW><ROW><id>9372830</id><snippet>strace</snippet></ROW><ROW><id>9372889</id><snippet>f(num+1, ...)</snippet></ROW><ROW><id>9372889</id><snippet>f()</snippet></ROW><ROW><id>9372889</id><snippet>num</snippet></ROW><ROW><id>9373130</id><snippet>gaussian_kde</snippet></ROW><ROW><id>9373130</id><snippet>import numpy as np  
from scipy import stats  
import matplotlib.pylab as plt

valid=[0,1,2,3,4,5,6,7,10,11]
matrix=np.loadtxt('data.txt',skiprows=1,usecols=valid)
kdeData = np.array(matrix).T  
print kdeData
gkde = stats.gaussian_kde(kdeData)
ind = np.linspace(-13,13,512)
kdepdf = gkde.evaluate(kdeData)
plt.figure()
plt.plot(ind, stats.norm.pdf(ind), color="r", label='DGP normal')
plt.plot(ind, kdepdf, label='kde', color="g")
plt.title('Kernel Density Estimation')
plt.legend()
plt.show()
</snippet></ROW><ROW><id>9373749</id><snippet>/.*</snippet></ROW><ROW><id>9373749</id><snippet>http://localhost:10000</snippet></ROW><ROW><id>9373749</id><snippet>app.yaml</snippet></ROW><ROW><id>9373749</id><snippet>handlers:
- url: /hello
  script: helloworld.py

- url: /test
  script: test.py
</snippet></ROW><ROW><id>9373749</id><snippet>http://localhost:10000/test</snippet></ROW><ROW><id>9374665</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9374665</id><snippet>exec bash</snippet></ROW><ROW><id>9374665</id><snippet>echo $PYTHONPATH
</snippet></ROW><ROW><id>9374665</id><snippet>~</snippet></ROW><ROW><id>9374665</id><snippet>$HOME</snippet></ROW><ROW><id>9374665</id><snippet>bash</snippet></ROW><ROW><id>9374665</id><snippet>.bashrc</snippet></ROW><ROW><id>9374877</id><snippet>Car</snippet></ROW><ROW><id>9374877</id><snippet>random.seed()</snippet></ROW><ROW><id>9374877</id><snippet>hashlib</snippet></ROW><ROW><id>9374877</id><snippet>class Car:
    # ...
    def __hash__(self):
        md5 = hashlib.md5()
        for i in ('brand', 'model', 'price', 'year'):
            attr = getattr(self, i)
            md5.update(str(attr).lowercase())
        return int(md5.hexdigest(), 16)
</snippet></ROW><ROW><id>9375030</id><snippet>random.choice</snippet></ROW><ROW><id>9375030</id><snippet>import random</snippet></ROW><ROW><id>9375030</id><snippet>numpy.random.choice</snippet></ROW><ROW><id>9375030</id><snippet>numpy.random.sample</snippet></ROW><ROW><id>9375030</id><snippet>pydoc numpy.random</snippet></ROW><ROW><id>9375822</id><snippet>secret = "secret"
secret.encode()
</snippet></ROW><ROW><id>9376047</id><snippet>  from library import lib1

  from library/lib2 import x
</snippet></ROW><ROW><id>9376306</id><snippet>currency_style = xlwt.XFStyle()</snippet></ROW><ROW><id>9376306</id><snippet>currency_style.num_format_str = "[$$-409]#,##0.00;-[$$-409]#,##0.00"</snippet></ROW><ROW><id>9376306</id><snippet>sheet.write(row+2, col, val, style=currency_style)</snippet></ROW><ROW><id>9376419</id><snippet>sorted(unsorted, key=lambda element: (element[1], element[2]))
</snippet></ROW><ROW><id>9376954</id><snippet>from email.header import decode_header
    def get_attachments(email_message_instance):
        attachments = []
        for part in email_message_instance.walk():

            if part.get_content_maintype() not in ['image', 'video', 'audio']:
                continue

            if part.get('Content-Disposition') is None:
                continue

            data = part.get_payload(decode=True)
            if not data:
                continue

            filename = part.get_filename()      
            filename =  u' '.join(w.decode(e or 'ascii') for w,e in decode_header(filename))        
            attachments.append((filename, data))

        return attachments
</snippet></ROW><ROW><id>9377273</id><snippet>myDict.pop(key, None)
</snippet></ROW><ROW><id>9377686</id><snippet>argparse</snippet></ROW><ROW><id>9377686</id><snippet>argparse.Action</snippet></ROW><ROW><id>9377686</id><snippet>set</snippet></ROW><ROW><id>9377686</id><snippet>import argparse

class UniqueAppendAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        unique_values = set(values)
        setattr(namespace, self.dest, unique_values)

servers = ["ApaServer", "BananServer", "GulServer", "SolServer",
           "RymdServer", "SkeppServer", "HavsServer", "SovServer" ]
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--only', nargs='*', choices=servers, action=UniqueAppendAction,
                    help='Space separated list of case sensitive server names to process')
print parser.parse_args()
</snippet></ROW><ROW><id>9377686</id><snippet>$ python test.py -o ApaServer ApaServer
Namespace(only=set(['ApaServer']))
</snippet></ROW><ROW><id>9377745</id><snippet>&lt;td&gt;
    {% if form.instance.pk %}{# if this is the form of an existing book #}
        {% for author in form.instance.authors.all %}
            {# then you can iterate over the authors of the book #}
            {{ author.first_name }}
        {% endfor %}
    {% endif %}
&lt;/td&gt;
</snippet></ROW><ROW><id>9378116</id><snippet>only = set(args.onlyTheseServers or availableServers)
</snippet></ROW><ROW><id>9378492</id><snippet>data["key"]["subkey"]</snippet></ROW><ROW><id>9378492</id><snippet>(data["key"])["subkey"]</snippet></ROW><ROW><id>9378492</id><snippet>__getitem__</snippet></ROW><ROW><id>9378492</id><snippet>__getitem__</snippet></ROW><ROW><id>9378492</id><snippet>data["key", "subkey"]</snippet></ROW><ROW><id>9378492</id><snippet>__getitem__</snippet></ROW><ROW><id>9378492</id><snippet>__getitem__</snippet></ROW><ROW><id>9378492</id><snippet>__getitem__</snippet></ROW><ROW><id>9378519</id><snippet>#!/usr/bin/env python
import re
import pprint
raw = """'01bpar( 2)=  0.23103878E-01  half_life=  0.3000133E+02  relax_time=  0.4328278E+02',
'01bpar( 3)=  0.00000000E+00',
'02epar( 1)=  0.49998963E+02',
'02epar( 2)=  0.23103878E-01  half_life=  0.3000133E+02  relax_time=  0.4328278E+02',
'02epar( 3)=  0.00000000E+00',
'02epar( 4)=  0.17862340E-01  half_life=  0.3880495E+02  relax_time=  0.5598371E+02',
'02bpar( 1)=  0.49998962E+02',
'02bpar( 2)=  0.23103878E-01  half_life=  0.3000133E+02  relax_time=  0.4328278E+02',"""

datastruct = {}
pattern = re.compile(r"""\D(?P&lt;digits&gt;\d+)(?P&lt;field&gt;[eb]par)[^=]+=\D+(?P&lt;number&gt;\d+\.\d+E[+-]\d+)""")
for line in raw.splitlines():
    result = pattern.search(line)
    parts = result.groupdict()
    if not parts['digits'] in datastruct:
        datastruct[parts['digits']] = {'epar':[], 'bpar':[]}
    datastruct[parts['digits']][parts['field']].append(parts['number'])

pprint.pprint(datastruct, depth=4)
</snippet></ROW><ROW><id>9378519</id><snippet>{'01': {'bpar': ['0.23103878E-01', '0.00000000E+00'], 'epar': []},
 '02': {'bpar': ['0.49998962E+02', '0.23103878E-01'],
        'epar': ['0.49998963E+02',
                 '0.23103878E-01',
                 '0.00000000E+00',
                 '0.17862340E-01']}}
</snippet></ROW><ROW><id>9378519</id><snippet>pattern = re.compile(r"""\D(?P&lt;digits&gt;\d+)(?P&lt;field&gt;[eb]par)[^=]+=\D+(?P&lt;number&gt;\d+\.\d+E[+-]\d+)""")

default = lambda : dict((('epar',[]), ('bpar',[])))
datastruct = defaultdict( default)

for line in raw.splitlines():
    result = pattern.search(line)
    parts = result.groupdict()
    datastruct[parts['digits']][parts['field']].append(parts['number'])

pprint.pprint(datastruct.items())
</snippet></ROW><ROW><id>9378519</id><snippet>[('02',
  {'bpar': ['0.49998962E+02', '0.23103878E-01'],
   'epar': ['0.49998963E+02',
            '0.23103878E-01',
            '0.00000000E+00',
            '0.17862340E-01']}),
 ('01', {'bpar': ['0.23103878E-01', '0.00000000E+00'], 'epar': []})]
</snippet></ROW><ROW><id>9378751</id><snippet>&gt;&gt;&gt; 2 ** 2 ** numpy.arange(5)
array([    2,     4,    16,   256, 65536])
</snippet></ROW><ROW><id>9378940</id><snippet>Lost = 0 (0% loss)</snippet></ROW><ROW><id>9378940</id><snippet>\d</snippet></ROW><ROW><id>9378940</id><snippet>out</snippet></ROW><ROW><id>9379203</id><snippet>std::string</snippet></ROW><ROW><id>9379203</id><snippet>std::string</snippet></ROW><ROW><id>9379203</id><snippet>#include &lt;iostream&gt;                                                              
#include &lt;string&gt;
#include &lt;sstream&gt;
#include &lt;time.h&gt;
#include &lt;vector&gt;

using namespace std;

class StringRef
{
private:
    char const*     begin_;
    int             size_;

public:
    int size() const { return size_; }
    char const* begin() const { return begin_; }
    char const* end() const { return begin_ + size_; }

    StringRef( char const* const begin, int const size )
        : begin_( begin )
        , size_( size )
    {}
};

vector&lt;StringRef&gt; split3( string const&amp; str, char delimiter = ' ' )
{
    vector&lt;StringRef&gt;   result;

    enum State { inSpace, inToken };

    State state = inSpace;
    char const*     pTokenBegin = 0;    // Init to satisfy compiler.
    for( auto it = str.begin(); it != str.end(); ++it )
    {
        State const newState = (*it == delimiter? inSpace : inToken);
        if( newState != state )
        {
            switch( newState )
            {
            case inSpace:
                result.push_back( StringRef( pTokenBegin, &amp;*it - pTokenBegin ) );
                break;
            case inToken:
                pTokenBegin = &amp;*it;
            }
        }
        state = newState;
    }
    if( state == inToken )
    {
        result.push_back( StringRef( pTokenBegin, &amp;str.back() - pTokenBegin ) );
    }
    return result;
}

int main() {
    string input_line;
    vector&lt;string&gt; spline;
    long count = 0;
    int sec, lps;
    time_t start = time(NULL);

    cin.sync_with_stdio(false); //disable synchronous IO

    while(cin) {
        getline(cin, input_line);
        //spline.clear(); //empty the vector for the next line to parse

        //I'm trying one of the two implementations, per compilation, obviously:
//        split1(spline, input_line);  
        //split2(spline, input_line);

        vector&lt;StringRef&gt; const v = split3( input_line );
        count++;
    };

    count--; //subtract for final over-read
    sec = (int) time(NULL) - start;
    cerr &lt;&lt; "C++   : Saw " &lt;&lt; count &lt;&lt; " lines in " &lt;&lt; sec &lt;&lt; " seconds." ;
    if (sec &gt; 0) {
        lps = count / sec;
        cerr &lt;&lt; "  Crunch speed: " &lt;&lt; lps &lt;&lt; endl;
    } else
        cerr &lt;&lt; endl;
    return 0;
}

//compiled with: g++ -Wall -O3 -o split1 split_1.cpp -std=c++0x
</snippet></ROW><ROW><id>9379383</id><snippet>pip freeze &gt; requirements.txt</snippet></ROW><ROW><id>9379383</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>9379432</id><snippet>cumsum</snippet></ROW><ROW><id>9379432</id><snippet>numpy</snippet></ROW><ROW><id>9379432</id><snippet>import numpy as np
from pylab import *

# Create some test data
dx = .01
X  = np.arange(-2,2,dx)
Y  = exp(-X**2)

# Normalize the data to a proper PDF
Y /= (dx*Y).sum()

# Compute the CDF
CY = np.cumsum(Y*dx)

# Plot both
plot(X,Y)
plot(X,CY,'r--')

show()
</snippet></ROW><ROW><id>9379614</id><snippet>@tornado.web.authenticated
@tornado.web.asynchronous
def post(self):
    async_fetch(..., self._on_fetch_response)

def _on_fetch_response(self, response):
    async_mail(response, self._on_mail_response)

def _on_mail_response(self, response):
    self.render(...) # render() automatically calls self.finish()
</snippet></ROW><ROW><id>9379614</id><snippet>@asynchronous
@gen.engine
def post(self):
    fetch_response = yield gen.Task(async_fetch, ...)
    mail_response = yield gen.Task(async_mail, ...)
    self.render(...)
</snippet></ROW><ROW><id>9379709</id><snippet>{% extends 'admin/change_form.html' %}

{% block content %}
    &lt;style type="text/css"&gt;
    fieldset.module td.original p { display:none; }
    &lt;/style&gt;
    {{ block.super }}
{% endblock %}
</snippet></ROW><ROW><id>9379783</id><snippet>td.delete input { display: none; }
</snippet></ROW><ROW><id>9379783</id><snippet>$('td.delete input[type=checkbox]').hide()
</snippet></ROW><ROW><id>9379783</id><snippet>django.jQuery('td.delete input[type=checkbox]').hide()
</snippet></ROW><ROW><id>9379811</id><snippet>findtext</snippet></ROW><ROW><id>9379811</id><snippet>xpath</snippet></ROW><ROW><id>9379811</id><snippet>&gt;&gt;&gt; tree.xpath("/rss/channel/item/title")
[&lt;Element title at 107c2b8&gt;]
&gt;&gt;&gt; tree.xpath("/rss/channel/item/pubDate")
[&lt;Element pubDate at 107c3c0&gt;]
</snippet></ROW><ROW><id>9379811</id><snippet>[]</snippet></ROW><ROW><id>9379811</id><snippet>xpath</snippet></ROW><ROW><id>9379939</id><snippet>flask.send_from_directory</snippet></ROW><ROW><id>9379939</id><snippet>as_attachment=True</snippet></ROW><ROW><id>9379939</id><snippet>Content-Disposition: attachment</snippet></ROW><ROW><id>9380090</id><snippet>for i, x in enumerate(data):
    for s in range(target_sum + 1):
        for c in range(s / x + 1):  
            if T1[s - c * x, i]:
                T1[s, i + 1] = True
</snippet></ROW><ROW><id>9380090</id><snippet>def test(i,x, T):
    target_sum = 1000
    T[0, 0] = True
    for s in range(target_sum + 1):
        for c in range(s / x + 1):  
            if T[s - c * x, i]:
                T[s, i + 1] = True

# [...]

for i, x in enumerate(data):
    pool.apply_async(test, (i,x, T))
</snippet></ROW><ROW><id>9380090</id><snippet>RecursivelyListAllThatWork()</snippet></ROW><ROW><id>9380090</id><snippet>for x in T.items():
    if T[x] == True:
       count_of_true.append(x)
</snippet></ROW><ROW><id>9380090</id><snippet>for x in T:
    if T[x] == True:
       count_of_true.append(x)
</snippet></ROW><ROW><id>9380090</id><snippet>True</snippet></ROW><ROW><id>9380090</id><snippet>is</snippet></ROW><ROW><id>9380090</id><snippet>==</snippet></ROW><ROW><id>9380090</id><snippet>for x in T:
    if T[x]:
       count_of_true.append(x)
</snippet></ROW><ROW><id>9380090</id><snippet>defaultdict</snippet></ROW><ROW><id>9380459</id><snippet>[celery:service]
service_name = CeleryService
service_display_name = Celery Service
service_description = WSCGI Windows Celery Service
service_logfile = celeryd.log
</snippet></ROW><ROW><id>9380459</id><snippet>"""
The most basic (working) Windows service possible.
Requires Mark Hammond's pywin32 package.  
Most of the code was taken from a  CherryPy 2.2 example of how to set up a service
"""
import pkg_resources
import win32serviceutil
from paste.script.serve import ServeCommand as Server
import os, sys
import ConfigParser

import win32service
import win32event

SCRIPT_DIR          = os.path.abspath(os.path.dirname(__file__))
INI_FILE            = 'celeryd.ini'
SERV_SECTION        = 'celery:service'
SERV_NAME           = 'service_name'
SERV_DISPLAY_NAME   = 'service_display_name'
SERV_DESC           = 'service_description'
SERV_LOG_FILE       = 'service_logfile'
SERV_APPLICATION    = 'celeryd'
SERV_LOG_FILE_VAR   = 'CELERYD_LOG_FILE'

# Default Values
SERV_NAME_DEFAULT           = 'CeleryService'
SERV_DISPLAY_NAME_DEFAULT   = 'Celery Service'
SERV_DESC_DEFAULT           = 'WSCGI Windows Celery Service'
SERV_LOG_FILE_DEFAULT       = r'D:\logs\celery.log'

class DefaultSettings(object):
    def __init__(self):
        if SCRIPT_DIR:
            os.chdir(SCRIPT_DIR)
        # find the ini file
        self.ini = os.path.join(SCRIPT_DIR,INI_FILE)
        # create a config parser opject and populate it with the ini file
        c = ConfigParser.SafeConfigParser()
        c.read(self.ini)
        self.c = c

    def getDefaults(self):
        '''
        Check for and get the default settings
        '''
        if (
            (not self.c.has_section(SERV_SECTION)) or
            (not self.c.has_option(SERV_SECTION, SERV_NAME)) or
            (not self.c.has_option(SERV_SECTION, SERV_DISPLAY_NAME)) or
            (not self.c.has_option(SERV_SECTION, SERV_DESC)) or
            (not self.c.has_option(SERV_SECTION, SERV_LOG_FILE))
            ):
            print 'setting defaults'
            self.setDefaults()
        service_name = self.c.get(SERV_SECTION, SERV_NAME)
        service_display_name = self.c.get(SERV_SECTION, SERV_DISPLAY_NAME)
        service_description = self.c.get(SERV_SECTION, SERV_DESC)
        iniFile = self.ini
        service_logfile = self.c.get(SERV_SECTION, SERV_LOG_FILE)
        return service_name, service_display_name, service_description, iniFile, service_logfile

    def setDefaults(self):
        '''
        set and add the default setting to the ini file
        '''
        if not self.c.has_section(SERV_SECTION):
            self.c.add_section(SERV_SECTION)
        self.c.set(SERV_SECTION, SERV_NAME, SERV_NAME_DEFAULT)
        self.c.set(SERV_SECTION, SERV_DISPLAY_NAME, SERV_DISPLAY_NAME_DEFAULT)
        self.c.set(SERV_SECTION, SERV_DESC, SERV_DESC_DEFAULT)
        self.c.set(SERV_SECTION, SERV_LOG_FILE, SERV_LOG_FILE_DEFAULT)
        cfg = file(self.ini, 'wr')
        self.c.write(cfg)
        cfg.close()
        print '''
you must set the celery:service section service_name, service_display_name,
and service_description options to define the service 
in the %s file
''' % self.ini
        sys.exit()


class CeleryService(win32serviceutil.ServiceFramework):
    """NT Service."""

    d = DefaultSettings()
    service_name, service_display_name, service_description, iniFile, logFile = d.getDefaults()

    _svc_name_ = service_name
    _svc_display_name_ = service_display_name
    _svc_description_ = service_description

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        # create an event that SvcDoRun can wait on and SvcStop
        # can set.
        self.stop_event = win32event.CreateEvent(None, 0, 0, None)

    def SvcDoRun(self):
        os.chdir(SCRIPT_DIR)
        s = Server(SERV_APPLICATION)
        os.environ[SERV_LOG_FILE_VAR] = self.logFile
        s.run([self.iniFile])
        win32event.WaitForSingleObject(self.stop_event, win32event.INFINITE)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        #win32event.SetEvent(self.stop_event)
        self.ReportServiceStatus(win32service.SERVICE_STOPPED)
        sys.exit()

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(CeleryService)
</snippet></ROW><ROW><id>9380459</id><snippet>python CeleryService.py install</snippet></ROW><ROW><id>9380459</id><snippet>python CeleryService.py start</snippet></ROW><ROW><id>9380459</id><snippet>python CeleryService.py remove</snippet></ROW><ROW><id>9380702</id><snippet>plot</snippet></ROW><ROW><id>9380702</id><snippet>contourf</snippet></ROW><ROW><id>9380702</id><snippet>import matplotlib.pyplot as plt
import numpy as np

plt.imshow(np.random.random((10,10)))
plt.plot([7], [7], 'ro')
plt.show()
</snippet></ROW><ROW><id>9380702</id><snippet>ax.axis('image')</snippet></ROW><ROW><id>9380702</id><snippet>ax.axis('tight')</snippet></ROW><ROW><id>9380702</id><snippet>scalex=False</snippet></ROW><ROW><id>9380702</id><snippet>scaley=False</snippet></ROW><ROW><id>9380702</id><snippet>plot</snippet></ROW><ROW><id>9380702</id><snippet>ax.axis('tight')</snippet></ROW><ROW><id>9381163</id><snippet>paste.deploy.config.PrefixMiddleware</snippet></ROW><ROW><id>9381163</id><snippet>use = egg:PasteDeploy#prefix</snippet></ROW><ROW><id>9381163</id><snippet>X-Forwarded-For</snippet></ROW><ROW><id>9381163</id><snippet>REMOTE_ADDR</snippet></ROW><ROW><id>9381163</id><snippet>X-Forwarded-Proto</snippet></ROW><ROW><id>9381163</id><snippet>wsgi.url_scheme</snippet></ROW><ROW><id>9381317</id><snippet>v = b'\x8c\x00'
print(' '.join(['{:02x}'.format(i) for i in v]))
</snippet></ROW><ROW><id>9381317</id><snippet>8c 00
</snippet></ROW><ROW><id>9382004</id><snippet>email.parser</snippet></ROW><ROW><id>9382076</id><snippet>eval</snippet></ROW><ROW><id>9382076</id><snippet>interpreter.execfile("/path/to/python_file.py");
PyDictionary result = interpreter.eval("myPythonClass().abc()");
</snippet></ROW><ROW><id>9382076</id><snippet>PyObject str = interpreter.eval("repr(myPythonClass().abc())");
System.out.println(str.toString());
</snippet></ROW><ROW><id>9382076</id><snippet>set</snippet></ROW><ROW><id>9382076</id><snippet>interpreter.set("myvariable", Integer(21));
PyObject answer = interpreter.eval("'the answer is: %s' % (2*myvariable)");
System.out.println(answer.toString());
</snippet></ROW><ROW><id>9382107</id><snippet>__version__</snippet></ROW><ROW><id>9382107</id><snippet>__version__</snippet></ROW><ROW><id>9382107</id><snippet>from .versionno import __version__</snippet></ROW><ROW><id>9382116</id><snippet>sc, address = s.accept()</snippet></ROW><ROW><id>9382116</id><snippet>sc.close()</snippet></ROW><ROW><id>9382116</id><snippet>import socket
import sys
s = socket.socket()
s.bind(("localhost",9999))
s.listen(10) # Acepta hasta 10 conexiones entrantes.

while True:
    sc, address = s.accept()

    print address
    i=1
    f = open('file_'+ str(i)+".pdf",'wb') #open in binary
    i=i+1
    while (True):       
    # recibimos y escribimos en el fichero
        l = sc.recv(1024)
        while (l):
                f.write(l)
                l = sc.recv(1024)
    f.close()


    sc.close()

s.close()
</snippet></ROW><ROW><id>9382116</id><snippet>s.listen(10)</snippet></ROW><ROW><id>9382176</id><snippet>alert()</snippet></ROW><ROW><id>9382376</id><snippet>&gt;&gt;&gt; 0b110 * 0b11
18
&gt;&gt;&gt; bin(0b110 * 0b11)
'0b10010'
</snippet></ROW><ROW><id>9382442</id><snippet>/dev/port</snippet></ROW><ROW><id>9382442</id><snippet>drivers/char/mem.c</snippet></ROW><ROW><id>9382442</id><snippet>struct file_operations</snippet></ROW><ROW><id>9382442</id><snippet>770 #ifdef CONFIG_DEVPORT
771 static const struct file_operations port_fops = {
772         .llseek         = memory_lseek,
773         .read           = read_port,
774         .write          = write_port,
775         .open           = open_port,
776 };
777 #endif
</snippet></ROW><ROW><id>9382462</id><snippet>xterm</snippet></ROW><ROW><id>9382462</id><snippet>emacs -nw</snippet></ROW><ROW><id>9382462</id><snippet>xterm</snippet></ROW><ROW><id>9382551</id><snippet>__new__</snippet></ROW><ROW><id>9382727</id><snippet>locs,label = plt.yticks()
</snippet></ROW><ROW><id>9382727</id><snippet>plt.yticks</snippet></ROW><ROW><id>9382727</id><snippet>map</snippet></ROW><ROW><id>9382727</id><snippet>plt.yticks(LOCS, map(lambda x: "%.2f" % x, LOCS))</snippet></ROW><ROW><id>9382745</id><snippet>networkx.simple_cycles</snippet></ROW><ROW><id>9382745</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.DiGraph()
&gt;&gt;&gt; G.add_edge('A', 'B')
&gt;&gt;&gt; G.add_edge('B', 'C')
&gt;&gt;&gt; G.add_edge('C', 'D')
&gt;&gt;&gt; G.add_edge('C', 'A')
&gt;&gt;&gt; nx.simple_cycles(G)
[['A', 'B', 'C', 'A']]
</snippet></ROW><ROW><id>9382878</id><snippet>plt.xticks(ticks)
</snippet></ROW><ROW><id>9382878</id><snippet>plt.yticks()</snippet></ROW><ROW><id>9382878</id><snippet>plt.xticks(ticks, fontsize=9)</snippet></ROW><ROW><id>9383165</id><snippet>dictionary</snippet></ROW><ROW><id>9383165</id><snippet>load</snippet></ROW><ROW><id>9383165</id><snippet>putdata</snippet></ROW><ROW><id>9383165</id><snippet>for</snippet></ROW><ROW><id>9383165</id><snippet>while</snippet></ROW><ROW><id>9383165</id><snippet>for xx in range(0, width):
    for yy in range(0, height):
        if random.randint(0,1) == 1:
            newim[xx,yy] = im1[xx,yy]
        else:
            newim[xx,yy] = im2[xx,yy]
</snippet></ROW><ROW><id>9383165</id><snippet>xx</snippet></ROW><ROW><id>9383165</id><snippet>yy</snippet></ROW><ROW><id>9383165</id><snippet>itertools.product</snippet></ROW><ROW><id>9383165</id><snippet>for xx, yy in itertools.product(range(0, width), range(0, height)):
    if random.randint(0,1) == 1:
        newim[xx,yy] = im1[xx,yy]
    else:
        newim[xx,yy] = im2[xx,yy]
</snippet></ROW><ROW><id>9383187</id><snippet>dpkg -s psycopg2
</snippet></ROW><ROW><id>9383187</id><snippet>pip</snippet></ROW><ROW><id>9383187</id><snippet>pip freeze | grep psycopg2
</snippet></ROW><ROW><id>9383187</id><snippet>python -c "import psycopg2; print(psycopg2.__version__)"
</snippet></ROW><ROW><id>9383187</id><snippet>λ &gt; pip freeze | grep psycopg2
psycopg2==2.4.4

λ &gt; python -c "import psycopg2; print(psycopg2.__version__)"
2.4.4 (dt dec pq3 ext)
</snippet></ROW><ROW><id>9383261</id><snippet>class Employee(Base):
  __tablename__ = 'employee'
  id = Column(Integer, primary_key=True)
  name = Column(String(64), nullable=False)
Employee.manager_id = Column(Integer, ForeignKey(Employee.id))
Employee.manager = relationship(Employee, backref='subordinates',
    remote_side=Employee.id)
</snippet></ROW><ROW><id>9383261</id><snippet>backref</snippet></ROW><ROW><id>9383295</id><snippet>SomeObject</snippet></ROW><ROW><id>9383295</id><snippet>import SomeObject
</snippet></ROW><ROW><id>9383295</id><snippet>from ..myapp import SomeObject
</snippet></ROW><ROW><id>9383295</id><snippet>python TestCase.py</snippet></ROW><ROW><id>9383295</id><snippet>import sys
sys.path.append("..")
from myapp import SomeObject
</snippet></ROW><ROW><id>9383295</id><snippet>python setup.py install</snippet></ROW><ROW><id>9383760</id><snippet>sys.exit()</snippet></ROW><ROW><id>9383760</id><snippet>filename = "yourfilename.typ"</snippet></ROW><ROW><id>9383764</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; eval('x + 1')
2
&gt;&gt;&gt; eval('x')
1
</snippet></ROW><ROW><id>9384328</id><snippet>resizeEvent</snippet></ROW><ROW><id>9384328</id><snippet>QTableView</snippet></ROW><ROW><id>9384328</id><snippet>QRect</snippet></ROW><ROW><id>9384328</id><snippet>import sys
from PySide.QtCore import *
from PySide.QtGui import *

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setMinimumSize(640, 480)
        self.container_widget = QWidget()
        self.container_layout = QVBoxLayout()
        self.container_widget.setLayout(self.container_layout)
        self.setCentralWidget(self.container_widget)
        self.grid_scrollarea = ScrollArea(self)
        self.test_group = QGroupBox("Results")
        self.test_layout = QVBoxLayout()
        self.test_group.setLayout(self.test_layout)
        self.test_layout.addWidget(self.grid_scrollarea)
        self.container_layout.addWidget(self.test_group)

class ScrollArea(QScrollArea):
    def __init__(self, parent=None):
        QScrollArea.__init__(self, parent)
        self.grid_widget = QWidget()
        self.grid_layout = QGridLayout()
        self.grid_widget.setLayout(self.grid_layout)
        self.setWidgetResizable(True)
        self.setWidget(self.grid_widget)
        # save the margin values
        self.margins = QMargins(0, 30, 0, 0)
        self.setViewportMargins(self.margins)
        self.headings_widget = QWidget(self)
        self.headings_layout = QGridLayout()
        self.headings_widget.setLayout(self.headings_layout)
        self.headings_layout.setContentsMargins(1,1,0,0)
        self.heading_label1 = QLabel("Column 1")
        self.heading_label1.setContentsMargins(16,0,0,0)
        self.heading_label2 = QLabel("Col 2")
        self.heading_label2.setAlignment(Qt.AlignCenter)
        self.heading_label2.setMaximumWidth(65)
        self.heading_label3 = QLabel("Column 3")
        self.heading_label3.setContentsMargins(8,0,0,0)
        self.headings_layout.addWidget(self.heading_label1,0,0)
        self.headings_layout.addWidget(self.heading_label2,0,1)
        self.headings_layout.addWidget(self.heading_label3,0,2)
        self.headings_widget.setStyleSheet(
            "background: green; border-bottom: 1px solid black;" )
        rows_to_add = 10
        for i in range(rows_to_add):
            col1 = QLineEdit()
            col2 = QLineEdit()
            col2.setMaximumWidth(65)
            col3 = QLineEdit()
            row = self.grid_layout.rowCount()
            self.grid_layout.addWidget(col1,row,0)
            self.grid_layout.addWidget(col2,row,1)
            self.grid_layout.addWidget(col3,row,2)

    def resizeEvent(self, event):
        rect = self.viewport().geometry()
        self.headings_widget.setGeometry(
            rect.x(), rect.y() - self.margins.top(),
            rect.width() - 1, self.margins.top())
        QScrollArea.resizeEvent(self, event)

if __name__ == '__main__':

    app = QApplication(sys.argv)
    form = MainWindow()
    form.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9384512</id><snippet>|</snippet></ROW><ROW><id>9384512</id><snippet>piston</snippet></ROW><ROW><id>9384512</id><snippet>piston ring</snippet></ROW><ROW><id>9384512</id><snippet>(^|)(piston( ring)?)( |$)
</snippet></ROW><ROW><id>9384512</id><snippet>'piston'</snippet></ROW><ROW><id>9384512</id><snippet>' ring'</snippet></ROW><ROW><id>9384512</id><snippet>?</snippet></ROW><ROW><id>9384512</id><snippet>\b</snippet></ROW><ROW><id>9384512</id><snippet>(^|)</snippet></ROW><ROW><id>9384512</id><snippet>( |$)</snippet></ROW><ROW><id>9384565</id><snippet>import sys, string, csv

#Creating a dictionary of FID: LU_Codes from external txt file
text_file = open("H:\SWAT\NC\FID_Whole_Copy.txt", "rb")
#Lines = text_file.readlines()
FID_GC_dict =  dict()
reader = csv.reader(text_file, delimiter='\t')
for line in reader:
    FID_GC_dict[line[0]] = int(line[1])
text_file.close()

#Importing neighbor list file for each FID value
Neighbors_file = open("H:\SWAT\NC\Pro_NL_Copy.txt","rb")
Entries = Neighbors_file.readlines()
Neighbors_file.close()
Neighbors_List = map(string.split, Entries)
#print Neighbors_List

#creates a list of the current FID
FID = [x[0] for x in Neighbors_List]
#print FID

#Calculate when to end the simulations (neglible change in land use)
tot_cells = len(FID)
end_sim = tot_cells
p = 0.0001

#Performs cellular automata rules on land use grid codes
while (end_sim &gt; tot_cells*p):
    gridList = []
    for nlist in Neighbors_List:
        row = []
        for item in nlist:
            row.append(FID_GC_dict[item])
        gridList.append(row)
    #print gridList

    i = iter(FID)
    count = 0
    for glist in gridList:
        Cur_FID = i.next()
        Cur_GC = glist[0]
        glist.sort()
        lr_Value = glist[-1]
        if lr_Value &lt; 6:
            tie_LR = glist.count(lr_Value)
            if tie_LR &gt;= 4 and lr_Value &gt; Cur_GC:
                FID_GC_dict[Cur_FID] = lr_Value
                print "The updated gridcode for FID ", Cur_FID, "is ", FID_GC_dict[Cur_FID]
                count += 1
    end_sim = count            
    print count
</snippet></ROW><ROW><id>9385116</id><snippet>self.initPt=self.initPt.append(self.fun(self.initPt))
</snippet></ROW><ROW><id>9385116</id><snippet>append</snippet></ROW><ROW><id>9385116</id><snippet>None</snippet></ROW><ROW><id>9385116</id><snippet>self.initPt</snippet></ROW><ROW><id>9385116</id><snippet>None</snippet></ROW><ROW><id>9385116</id><snippet>self.initPt.append(self.fun(self.initPt)) 
</snippet></ROW><ROW><id>9385136</id><snippet>^(.+?)(?:\s(.*?)(?:\s;(.*))?)?$
</snippet></ROW><ROW><id>9385136</id><snippet>^                # start of string
(.+?)            # put text1 in group 1
(?:              # start an optional non-capturing group
  \s(.*?)        # space followed by text2, put text2 in group 2
  (?:            # start an optional non-capturing group
    \s;(.*)      # space and semicolon, followed by text3, put text3 in group 3
  )?             # end of optional non-capturing group
)?               # end of optional non-capturing group
$                # end of string
</snippet></ROW><ROW><id>9385630</id><snippet>&gt;&gt;&gt; from __future__ import absolute_import
</snippet></ROW><ROW><id>9385630</id><snippet>&gt;&gt;&gt; import string as the_builtin_string_module
&gt;&gt;&gt; from . import string as my_package_string_module
</snippet></ROW><ROW><id>9385679</id><snippet>import re

sourceText = 'System\.out\.println\(("[^"]+")\);'

replaceText = \
r'''if (logger.isInfoEnabled()) {
    logger.info(\1);
}'''

re.sub(sourceText, replaceText, open(fileName).read())
</snippet></ROW><ROW><id>9385679</id><snippet>\"</snippet></ROW><ROW><id>9385918</id><snippet>CDATA</snippet></ROW><ROW><id>9385944</id><snippet>accept</snippet></ROW><ROW><id>9385944</id><snippet>self.gate.listen(10)
while True:
    add = self.gate.accept()
    self.reciveFileName() # which calls self.gate.recv()
</snippet></ROW><ROW><id>9385944</id><snippet>reciveFilename</snippet></ROW><ROW><id>9385944</id><snippet>reciveFile</snippet></ROW><ROW><id>9385944</id><snippet>receive</snippet></ROW><ROW><id>9385944</id><snippet>def listen(self):
    self.gate.listen(10)
    while True:
        conn,address = self.gate.accept()
        self.receiveFilename(conn)

def receiveFilename(self, sock):
    buf = sock.recv(1024)
    print('First bytes I got: ' + buf)
</snippet></ROW><ROW><id>9385944</id><snippet>reciveFilename</snippet></ROW><ROW><id>9385944</id><snippet>b'\0'</snippet></ROW><ROW><id>9386078</id><snippet>\r\n</snippet></ROW><ROW><id>9386078</id><snippet>\r\n</snippet></ROW><ROW><id>9386078</id><snippet>print ['test\n']
print 'test\n'
</snippet></ROW><ROW><id>9386078</id><snippet>i</snippet></ROW><ROW><id>9386078</id><snippet>print(Data[0][0][1])
</snippet></ROW><ROW><id>9386078</id><snippet>Data</snippet></ROW><ROW><id>9386078</id><snippet>import quopri
print quopri.decodestring(Data[0][0][1])
</snippet></ROW><ROW><id>9386265</id><snippet>/etc/path</snippet></ROW><ROW><id>9386265</id><snippet>python-python-command</snippet></ROW><ROW><id>9386265</id><snippet>py-python-command</snippet></ROW><ROW><id>9386265</id><snippet>(setenv "PYMACS_PYTHON" "python2.7")</snippet></ROW><ROW><id>9386564</id><snippet>sorted(res, key=lambda x: (x[0] == "", x[0].lower()))
</snippet></ROW><ROW><id>9386564</id><snippet>'\xff' * 100</snippet></ROW><ROW><id>9386604</id><snippet>def handleError(function):
    def handleProblems():
        try:
            function()
        except Exception:
            print "Oh noes"
    return handleProblems


@handleError
def example():
   raise Exception("Boom!")
</snippet></ROW><ROW><id>9386767</id><snippet>$ python -m pydoc -p 8080
</snippet></ROW><ROW><id>9386767</id><snippet>python -m pydoc</snippet></ROW><ROW><id>9386767</id><snippet>pydoc</snippet></ROW><ROW><id>9386932</id><snippet>tsocks.conf</snippet></ROW><ROW><id>9386932</id><snippet>server = 127.0.0.1
server_type = 5
server_port = 1080
</snippet></ROW><ROW><id>9386932</id><snippet>TSOCKS_CONF_FILE=tsocks.conf tsocks sudo easy_install -U docutils
</snippet></ROW><ROW><id>9386932</id><snippet>ssh -D 1080 myserver.com
</snippet></ROW><ROW><id>9386947</id><snippet>/*/TABLE//TD//text()
</snippet></ROW><ROW><id>9386947</id><snippet>//TABLE//TD//text()
</snippet></ROW><ROW><id>9386947</id><snippet>&lt;html&gt;
    &lt;p align="center"&gt;
        &lt;img src="some_image.gif" alt="Some Title"/&gt;
    &lt;/p&gt;
    &lt;TABLE WIDTH="500" BORDER="1" class="textwhite" ALIGN="center" CELLPADDING="0" CELLSPACING="0"&gt;
        &lt;TR&gt;
            &lt;TD colspan="4" ALIGN="center"&gt;
                &lt;b&gt;Title&lt;/b&gt;
            &lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
            &lt;TD ALIGN="center"&gt;Title&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;date&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;value&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;value&lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
            &lt;TD ALIGN="center"&gt;Title2&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;
                &lt;div class="redtext"&gt;----&lt;/div&gt;
            &lt;/TD&gt;
            &lt;TD&gt; &lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
            &lt;TD ALIGN="center"&gt;Title3&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;
                &lt;div class="yellowtext"&gt;value&lt;/div&gt;
            &lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;
                &lt;div class="redtext"&gt;value&lt;/div&gt;
            &lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;value
                &lt;SUP&gt;6&lt;/SUP&gt;
            &lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
            &lt;TD ALIGN="center"&gt;Title4&lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;
                &lt;div class="bluetext"&gt;value&lt;/div&gt;
            &lt;/TD&gt;
            &lt;TD ALIGN="center"&gt;
                &lt;div class="redtext"&gt;value&lt;/div&gt;
            &lt;/TD&gt;
            &lt;TD&gt; &lt;/TD&gt;
        &lt;/TR&gt;
    &lt;/TABLE&gt;
    &lt;blockquote&gt;
        &lt;p class="textstyle"&gt;         Text.     &lt;/p&gt;
    &lt;/blockquote&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9387070</id><snippet>new</snippet></ROW><ROW><id>9387070</id><snippet>types</snippet></ROW><ROW><id>9387070</id><snippet>&lt;func&gt;.__code__.co_name</snippet></ROW><ROW><id>9387070</id><snippet>import functools
import types

def metadec(func):

    @functools.wraps(func)
    def wrapper(*args, **kwargs):   
        # do stuff
        return func(*args, **kwargs)

    c = wrapper.func_code
    fname = "%s__%s" % (func.__name__, wrapper.__name__)

    code = types.CodeType(
                c.co_argcount, 
                c.co_nlocals,
                c.co_stacksize,
                c.co_flags,  
                c.co_code,        
                c.co_consts,         
                c.co_names,
                c.co_varnames,
                c.co_filename,
                fname, # change the name
                c.co_firstlineno,
                c.co_lnotab,
                c.co_freevars,
                c.co_cellvars,
            )

    return types.FunctionType(
            code, # Use our updated code object
            wrapper.func_globals,
            fname, # Use the updated name
            wrapper.func_defaults,
            wrapper.func_closure,
        )
</snippet></ROW><ROW><id>9387070</id><snippet>functools.wraps</snippet></ROW><ROW><id>9387070</id><snippet>In [1]: from metadec import metadec

In [2]: @metadec
   ...: def foobar(x):
   ...:     print(x)
   ...:     
   ...:     

In [3]: foobar.__name__
Out[3]: 'foobar__wrapper'

In [4]: foobar(1)
1
</snippet></ROW><ROW><id>9387215</id><snippet>google.appengine.ext.ndb.model.StructuredProperty</snippet></ROW><ROW><id>9387398</id><snippet>for</snippet></ROW><ROW><id>9387644</id><snippet>env.hosts</snippet></ROW><ROW><id>9387644</id><snippet>from fabric.api import env

def staging():
    env.hosts = ['XXX.XXX.XXX.XXX', ]

def production():
    env.hosts = ['YYY.YYY.YYY.YYY', 'ZZZ.ZZZ.ZZZ.ZZZ', ]

def deploy():
   # Do something...
</snippet></ROW><ROW><id>9387644</id><snippet>fab staging deploy</snippet></ROW><ROW><id>9387644</id><snippet>fab production deploy</snippet></ROW><ROW><id>9387819</id><snippet>PyObject obj = interpreter.eval("True");
boolean i = ((PyInteger) obj).asInt() != 0;
</snippet></ROW><ROW><id>9387896</id><snippet>from selenium import webdriver

# initiate
driver = webdriver.Firefox() # initiate a driver, in this case Firefox
driver.get("http://example.com") # go to the url

# log in
username_field = driver.find_element_by_name(...)) # get the username field
password_field = driver.find_element_by_name(...)) # get the password field
username_field.send_keys("username") # enter in your username
password_field.send_keys("password") # enter in your password
password_field.submit() # submit it

# print HTML
html = driver.page_source
print html
</snippet></ROW><ROW><id>9388115</id><snippet>/usr/lib/python2.7/dist-packages
</snippet></ROW><ROW><id>9388115</id><snippet>easy_install</snippet></ROW><ROW><id>9388115</id><snippet>pip</snippet></ROW><ROW><id>9388115</id><snippet>/usr/local/lib/python2.7/dist-packages
</snippet></ROW><ROW><id>9388433</id><snippet>if not j == alumni.last_names.count() - 1:
</snippet></ROW><ROW><id>9388555</id><snippet>/etc/path</snippet></ROW><ROW><id>9388555</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>9389009</id><snippet>Books.objects.values('author').distinct()</snippet></ROW><ROW><id>9389074</id><snippet>text</snippet></ROW><ROW><id>9389074</id><snippet>html</snippet></ROW><ROW><id>9389074</id><snippet>// Change
$('div#' + messageid).text(data.result)
// to
$('div#' + messageid).html(data.result)
                      ^^^^
</snippet></ROW><ROW><id>9389074</id><snippet>delegate</snippet></ROW><ROW><id>9389074</id><snippet>on</snippet></ROW><ROW><id>9389074</id><snippet>ul.messages</snippet></ROW><ROW><id>9389166</id><snippet>self.file_name.insert(0.0, self.filename)
</snippet></ROW><ROW><id>9389166</id><snippet>with open(self.filename, 'r') as inp_file:
    self.file_name.insert(0.0, inp_file.read())
</snippet></ROW><ROW><id>9389322</id><snippet>mongoimport</snippet></ROW><ROW><id>9389406</id><snippet>handleSave</snippet></ROW><ROW><id>9389406</id><snippet>f = open(self.filename)
reader = csv.reader(f, delimiter = ',', quotechar = '"')

assetName, efficiencyRating = self.getValues(reader)

f.seek(0) # rewind file
reader = csv.reader(f, delimiter = ',', quotechar = '"')

self.handleSave(assetName, reader)
</snippet></ROW><ROW><id>9389406</id><snippet>rows = list(reader)
</snippet></ROW><ROW><id>9389406</id><snippet>rows</snippet></ROW><ROW><id>9389406</id><snippet>reader</snippet></ROW><ROW><id>9389406</id><snippet>get_values</snippet></ROW><ROW><id>9389406</id><snippet>getValues</snippet></ROW><ROW><id>9389406</id><snippet>handle_save</snippet></ROW><ROW><id>9389406</id><snippet>handleSave</snippet></ROW><ROW><id>9389419</id><snippet>@memoize
def some_function(spam, eggs):
    # This would use the boundless cache.
    pass
</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>@memoize(200)  # or @memoize(maxlen=200)
def some_function(spam, eggs):
    # This would use the bounded cache of size 200.
    pass
</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>def memoize(func=None, maxlen=None):
    if func:
        # act as decorator
    else:
        # act as decorator factory
</snippet></ROW><ROW><id>9389419</id><snippet>func</snippet></ROW><ROW><id>9389419</id><snippet>@memoize(200)</snippet></ROW><ROW><id>9389419</id><snippet>func</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>bounded_memoize</snippet></ROW><ROW><id>9389419</id><snippet>memoize</snippet></ROW><ROW><id>9389419</id><snippet>bounded_memoize</snippet></ROW><ROW><id>9389419</id><snippet>maxlen</snippet></ROW><ROW><id>9389419</id><snippet>None</snippet></ROW><ROW><id>9389419</id><snippet>@memoize()</snippet></ROW><ROW><id>9389725</id><snippet>mcvs = csv.writer(open('file.csv', 'wb'), quoting=csv.QUOTE_ALL)
</snippet></ROW><ROW><id>9389750</id><snippet>self.client_address[0]</snippet></ROW><ROW><id>9390135</id><snippet>import numpy as np

t = np.array([ 147, 5729, 5794, 5806, 6798, 8756, 8772, 8776, 9976])
dt  = np.diff(t)
pos = np.where(dt &gt; 100)[0] + 1
print np.split(t, pos)
</snippet></ROW><ROW><id>9390135</id><snippet>[array([147]), 
array([5729, 5794, 5806]), 
array([6798]), 
array([8756, 8772, 8776]), 
array([9976])]
</snippet></ROW><ROW><id>9390225</id><snippet>x_exists = 'x' in locals() or 'x' in globals()
</snippet></ROW><ROW><id>9390225</id><snippet>try:
  x
except NameError:
  x_exists = False
else:
  x_exists = True
</snippet></ROW><ROW><id>9390225</id><snippet>&gt;&gt;&gt; 'x' in locals() or 'x' in globals()
False
&gt;&gt;&gt; x = None
&gt;&gt;&gt; 'x' in locals() or 'x' in globals()
True
&gt;&gt;&gt; del x
&gt;&gt;&gt; 'x' in locals() or 'x' in globals()
False
</snippet></ROW><ROW><id>9390225</id><snippet>&gt;&gt;&gt; try:
...   x
... except NameError:
...   print False
... else:
...   print True
... 
False
&gt;&gt;&gt; x = None
&gt;&gt;&gt; try:
...   x
... except NameError:
...   print False
... else:
...   print True
... 
True
&gt;&gt;&gt; del x
&gt;&gt;&gt; try:
...   x
... except NameError:
...   print False
... else:
...   print True
... 
False
</snippet></ROW><ROW><id>9390274</id><snippet>frame.Show()</snippet></ROW><ROW><id>9390274</id><snippet>frame.Center()</snippet></ROW><ROW><id>9390274</id><snippet>parent=None</snippet></ROW><ROW><id>9390274</id><snippet>app = wx.App(0)
imagePath = "my_splash_image.png"
bitmap = wx.Bitmap(imagePath, wx.BITMAP_TYPE_PNG)
shadow = wx.WHITE
splash = AS.AdvancedSplash(None, bitmap=bitmap, timeout=5000,
                           agwStyle=AS.AS_TIMEOUT |
                           AS.AS_CENTER_ON_PARENT |
                           AS.AS_SHADOW_BITMAP,
                           shadowcolour=shadow)
frame = wx.Frame(None, -1, "AdvancedSplash Test")
frame.Center()
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>9390426</id><snippet>print '\n'.join('{}. {}'.format(i, d[k]) for (i,k) in enumerate(sorted(d, key=d.get), 1))
1. apple
2. cat
3. dog
</snippet></ROW><ROW><id>9390426</id><snippet>&gt;&gt;&gt; print '\n'.join('{}. {}'.format(i, d[k]) for (i,k) in enumerate(sorted(d), 1))
1. apple
2. cat
3. dog
</snippet></ROW><ROW><id>9390426</id><snippet>dict</snippet></ROW><ROW><id>9390426</id><snippet>&gt;&gt;&gt; print '\n'.join('{}. {}'.format(i, v) for (i,v) in enumerate(d.itervalues(), 1))
1. apple
2. cat
3. dog
</snippet></ROW><ROW><id>9390461</id><snippet>4 abcd
3 bcd
2 bc
1 d
</snippet></ROW><ROW><id>9390461</id><snippet>10 abcabxdabe
1 abe
</snippet></ROW><ROW><id>9390461</id><snippet>10 abcabxdabe
11 abe
16 abxdabe
...
</snippet></ROW><ROW><id>9390731</id><snippet>from threading import Thread
tkinterThread= Thread(target=Tk.mainloop, args=[root])#spawn a new Thread object
tkinterThread.start()#make the thread execute the tkinter mainloop
#please note: I'm not sure if the two lines above actually work; I can't test them because Tkinter won't work for me.

def listenToClient(sc, address):
    recibido1 = sc.recv(1024)
    recibido2 = sc.recv(1024)
    print  "login:", recibido1, "password:",  recibido2
    salida = (str(recibido1)+" "+str(recibido2)+"\n")
    archivo = open("passwordlist.txt", "r") 
    while True:
        linea = archivo.readline()  #Leo del archivo
        if (salida==linea):
            log_ok ="login ok"
            sc.send(log_ok)      
            break
        if (len(linea))==0:
            error= "Error Check user &amp; Password"
            sc.send(error)
            break
    f = open('print_'+ str(i)+".pdf",'wb') #abierto en escritura binaria
    i=i+1   
# recibimos y escribimos en el fichero
    nombre_archivo = sc.recv(1024)
    cadena = "On Impresion Queue.."+nombre_archivo+"\n"
    text.insert(INSERT, cadena)
    print "On impresion Queue.."+nombre_archivo
    l = sc.recv(1024)
    while (l):
        f.write(l)
        l = sc.recv(1024)
        if not l: 
            notification= "Complete transfer"
            sc.send(notification)
            break
    f.close() 
    sc.close()

while (True):
    sc, address = s.accept()
    print "Connection from: ", address
    clientThread= Thread(target=listenToClient, args=[sc,address])#spawn a new thread object
    clientThread.start()#start the thread; it'll execute the "listenToClient" function, passing it "sc" and "address" as arguments
</snippet></ROW><ROW><id>9390772</id><snippet>b,g,r = img[:,:,0].copy(), img[:,:,1].copy(), img[:,:,2].copy()
</snippet></ROW><ROW><id>9390772</id><snippet>import cv2
import numpy as np

img = cv2.imread('zzzyj.jpg')
h = np.zeros((300,256,3))

bins = np.arange(256).reshape(256,1)
color = [ (255,0,0),(0,255,0),(0,0,255) ]

for ch, col in enumerate(color):
    hist_item = cv2.calcHist([img],[ch],None,[256],[0,255])
    cv2.normalize(hist_item,hist_item,0,255,cv2.NORM_MINMAX)
    hist=np.int32(np.around(hist_item))
    pts = np.column_stack((bins,hist))
    cv2.polylines(h,[pts],False,col)

h=np.flipud(h)

cv2.imshow('colorhist',h)
cv2.waitKey(0)
</snippet></ROW><ROW><id>9391228</id><snippet>    from django.contrib.staticfiles import finders

    result = finders.find(path, all=options['all'])

    path = smart_unicode(path)
    if result:
        if not isinstance(result, (list, tuple)):
            result = [result]
        output = u'\n  '.join(
            (smart_unicode(os.path.realpath(path)) for path in result))
        self.stdout.write(
            smart_str(u"Found '%s' here:\n  %s\n" % (path, output)))
</snippet></ROW><ROW><id>9391236</id><snippet>AttributeError: A instance has no attribute 'xxxx'</snippet></ROW><ROW><id>9391236</id><snippet>met1</snippet></ROW><ROW><id>9391236</id><snippet>met4</snippet></ROW><ROW><id>9391236</id><snippet>class A():
   def met1(self):
      print self.met4()

   def met2(self):
      self.met3()

   def met4():
      print 'x'


 a = A()
 a.met1()
 &gt;&gt;&gt; x
 a.met2()
 &gt;&gt;&gt; AttributeError: A instance has no attribute 'met3'
</snippet></ROW><ROW><id>9391767</id><snippet>#!/usr/bin/env python
import imaplib
from re import findall

MAXSIZE = 1000
MINSIZE = 1

m = imaplib.IMAP4_SSL('imap.gmail.com')
m.login('example@gmail.com','testPassword')
m.select()
typ, data = m.search(None, 'ALL')
typ, data = m.search(None,'(SMALLER %d) (LARGER %d)' % (MAXSIZE * 1000,MINSIZE * 1000))
for num in data[0].split():
    typ, data = m.fetch(num, '(RFC822)')
    print 'Message %s\n%s\n' % (num, len(data[0][1]))
m.close()
m.logout()
</snippet></ROW><ROW><id>9391955</id><snippet>conn.execute("INSERT INTO users(name, fullname, password) VALUES ('john','smith john','23')")
</snippet></ROW><ROW><id>9392000</id><snippet>x</snippet></ROW><ROW><id>9392000</id><snippet>__mul__</snippet></ROW><ROW><id>9392000</id><snippet>x * 10 * 10</snippet></ROW><ROW><id>9392000</id><snippet>__mul__</snippet></ROW><ROW><id>9392000</id><snippet>x * 100</snippet></ROW><ROW><id>9392000</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__ (self):
...             self.val = 5
...     def __mul__ (self, other):
...             print "Called __mul__: %s" % (other)
...             self.val = self.val * other
...             return self
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a * 10 * 10
Called __mul__: 10
Called __mul__: 10
&lt;__main__.Foo object at 0x1017c4990&gt;
</snippet></ROW><ROW><id>9392000</id><snippet>__mul__</snippet></ROW><ROW><id>9392000</id><snippet>&gt;&gt;&gt; def f1(x):
...     return 10 * 10 * x
... 
&gt;&gt;&gt; dis.dis(f1)
  2           0 LOAD_CONST               2 (100)
              3 LOAD_FAST                0 (x)
              6 BINARY_MULTIPLY     
              7 RETURN_VALUE 
</snippet></ROW><ROW><id>9392576</id><snippet>on_heroku = false
if 'YOUR_ENV_VAR' in os.environ:
  on_heroku = true
</snippet></ROW><ROW><id>9392612</id><snippet>def extract_number(s,notfound='NOT_FOUND'):
    regex=r'[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?'
    return re.findall(regex,s)
</snippet></ROW><ROW><id>9392653</id><snippet>session1 = SessionSRC()
session1.add(item)
session1.commit()

new_item = Datum(item.Key, item.Value)
session2 = SessionDST()
session2.add(new_item)
session2.commit()

print new_item in session2 # &gt;&gt;&gt; True
print session2.query(Datum).all() # &gt;&gt;&gt; [&lt;__main__.Datum object at 0x.......&gt;]
session2.close()
session1.close()
</snippet></ROW><ROW><id>9392653</id><snippet>session1</snippet></ROW><ROW><id>9392661</id><snippet>def script_running(self, script):
    """Check if the script is running."""
</snippet></ROW><ROW><id>9392661</id><snippet>True</snippet></ROW><ROW><id>9392661</id><snippet>False</snippet></ROW><ROW><id>9392661</id><snippet>def script_running(self, script):
    """Return True if the script is running, False otherwise."""
</snippet></ROW><ROW><id>9392661</id><snippet>def check_running(self, script):
    """Return True if the script is running, False otherwise."""
</snippet></ROW><ROW><id>9392661</id><snippet>def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):
    """Fetches rows from a Bigtable.

    Retrieves rows pertaining to the given keys from the Table instance
    represented by big_table.  Silly things may happen if
    other_silly_variable is not None.

    Args:
        big_table: An open Bigtable Table instance.
        keys: A sequence of strings representing the key of each table row
            to fetch.
        other_silly_variable: Another optional variable, that has a much
            longer name than the other args, and which does nothing.

    Returns:
        A dict mapping keys to the corresponding table row data
        fetched. Each row is represented as a tuple of strings. For
        example:

        {'Serak': ('Rigel VII', 'Preparer'),
         'Zim': ('Irk', 'Invader'),
         'Lrrr': ('Omicron Persei 8', 'Emperor')}

        If a key from the keys argument is missing from the dictionary,
        then that row was not found in the table.

    Raises:
        IOError: An error occurred accessing the bigtable.Table object.
    """
</snippet></ROW><ROW><id>9392661</id><snippet>--------------------------------------------------------------------------------
</snippet></ROW><ROW><id>9392661</id><snippet>def my_long_doc_function(arg1, arg2):
    """This docstring is long, it's a little looonger than the 80 charachters
    limit.

    """
</snippet></ROW><ROW><id>9392746</id><snippet>Freeze()</snippet></ROW><ROW><id>9392746</id><snippet>Thaw()</snippet></ROW><ROW><id>9392746</id><snippet>wxTextCtrl</snippet></ROW><ROW><id>9393223</id><snippet>socket.setdefaulttimeout()</snippet></ROW><ROW><id>9393223</id><snippet>import socket
socket.setdefaulttimeout(30)
</snippet></ROW><ROW><id>9393536</id><snippet>p2 = subprocess.Popen(["grep", "-c", "test"], stdin=p1.stdout, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>9394126</id><snippet>&gt;&gt;&gt; a = [[1,2,3],[4,5,6]]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map(itemgetter(0,2), a)
[(1, 3), (4, 6)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9394126</id><snippet>&gt;&gt;&gt; [itemgetter(0,2)(i) for i in a]
[(1, 3), (4, 6)]
</snippet></ROW><ROW><id>9394450</id><snippet>selectQ ="""SELECT * FROM  %s WHERE %s = %%s;""" % (self.table,self.columnSpecName)
self.db.execute(selectQ,(idKey,))
return self.db.store_result()
</snippet></ROW><ROW><id>9394450</id><snippet>%</snippet></ROW><ROW><id>9394477</id><snippet>myList</snippet></ROW><ROW><id>9394477</id><snippet>class testclass:
    def __init__(self): 
        print "new instance"
        self.myList = []
</snippet></ROW><ROW><id>9394477</id><snippet>&gt;&gt;&gt; t1 = testclass()
new instance
&gt;&gt;&gt; t2 = testclass()
new instance
&gt;&gt;&gt; t1.myList.append(1)
&gt;&gt;&gt; t2.myList.append(2)
&gt;&gt;&gt; t1.myList
[1]
&gt;&gt;&gt; t2.myList
[2]
</snippet></ROW><ROW><id>9394542</id><snippet>long</snippet></ROW><ROW><id>9394765</id><snippet>__all__</snippet></ROW><ROW><id>9394765</id><snippet>foo.py</snippet></ROW><ROW><id>9394765</id><snippet>__all__ = [f for f in globals().keys() if f.startswith('func_')]
</snippet></ROW><ROW><id>9394765</id><snippet>__all__</snippet></ROW><ROW><id>9394765</id><snippet>foo</snippet></ROW><ROW><id>9394765</id><snippet>from foo import *</snippet></ROW><ROW><id>9394765</id><snippet>__all__</snippet></ROW><ROW><id>9394765</id><snippet>func_</snippet></ROW><ROW><id>9394765</id><snippet>__all__ = [f for f in globals() if f.startswith('func_')]</snippet></ROW><ROW><id>9394765</id><snippet>globals()</snippet></ROW><ROW><id>9394841</id><snippet>import itertools
for x, y in itertools.product([1,2,3], [1,2,3]):
    print x, y
</snippet></ROW><ROW><id>9394841</id><snippet>1 1
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
</snippet></ROW><ROW><id>9394841</id><snippet>x</snippet></ROW><ROW><id>9394841</id><snippet>y</snippet></ROW><ROW><id>9394841</id><snippet>repeat</snippet></ROW><ROW><id>9394841</id><snippet>import itertools
for x, y in itertools.product([1,2,3], repeat=2):
    print x, y
</snippet></ROW><ROW><id>9394881</id><snippet>enc = AES.new(password, mode)
encrypted = enc.encrypt(text)
print "ORIGINAL: " + text
print "ENCRYPTED: " + str(encrypted)
dec = AES.new(password, mode)
print "DECRYPTED: " + str(dec.decrypt(encrypted))
</snippet></ROW><ROW><id>9394933</id><snippet>&gt;&gt;&gt; from binascii import crc32
&gt;&gt;&gt; with open(filename, "rb") as f:
...     data = f.read()
...
&gt;&gt;&gt; crc32(data)
361260080
</snippet></ROW><ROW><id>9395115</id><snippet>In [9]: from scipy.integrate import quad

In [10]: a = 0

In [11]: b = 1

In [12]: [quad(lambda x, d: x/(d**2)-x**2, a, b, args=d) for d in range(2, 5)]
Out[12]: 
[(-0.20833333333333334, 2.3717550132075781e-15),
 (-0.27777777777777773, 3.0886887822595405e-15),
 (-0.30208333333333337, 3.3546344203581545e-15)]
</snippet></ROW><ROW><id>9395115</id><snippet>for d in range(2, 5)</snippet></ROW><ROW><id>9395130</id><snippet>,)'</snippet></ROW><ROW><id>9395130</id><snippet>selectQ ="""SELECT * FROM  %s WHERE %s = %%s order by RAND() limit %s""" % (self.table,self.columnSpecName,limit),
self.db.execute(str(selectQ),(idKey))
</snippet></ROW><ROW><id>9395130</id><snippet>str(selectQ)</snippet></ROW><ROW><id>9395470</id><snippet>to_dict</snippet></ROW><ROW><id>9395470</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; d = {'id':8126, 'title':u'1 בדצמבר', 'ip':'147.237.70.106'}
&gt;&gt;&gt; json.dumps(d)
'{"ip": "147.237.70.106", "id": 8126, "title": "1 \\u05d1\\u05d3\\u05e6\\u05de\\u05d1\\u05e8"}'
</snippet></ROW><ROW><id>9395646</id><snippet>sess:sessionId</snippet></ROW><ROW><id>9395646</id><snippet>sessionId</snippet></ROW><ROW><id>9395646</id><snippet>encode</snippet></ROW><ROW><id>9395646</id><snippet>decode</snippet></ROW><ROW><id>9395646</id><snippet>_get_session_key</snippet></ROW><ROW><id>9395646</id><snippet>_set_session_key</snippet></ROW><ROW><id>9395791</id><snippet>nbytes</snippet></ROW><ROW><id>9395791</id><snippet>itemsize</snippet></ROW><ROW><id>9395791</id><snippet>&gt;&gt;&gt; a = numpy.arange(1000.0)
&gt;&gt;&gt; a.nbytes
8000
&gt;&gt;&gt; a.itemsize
8
</snippet></ROW><ROW><id>9396249</id><snippet>MySQLdb.cursors</snippet></ROW><ROW><id>9396249</id><snippet>CursorUseResultMixIn</snippet></ROW><ROW><id>9396249</id><snippet>class SSCursor(CursorUseResultMixIn, CursorTupleRowsMixIn,
               BaseCursor):

    """This is a Cursor class that returns rows as tuples and stores
    the result set in the server."""
</snippet></ROW><ROW><id>9396249</id><snippet>SSCursor</snippet></ROW><ROW><id>9396249</id><snippet>SSCursor</snippet></ROW><ROW><id>9396249</id><snippet>import MySQLdb.cursors as cursors
con = MySQLdb.connect(host = 'localhost', user = 'test', passwd = 'xx', 
                           db = 'yy', cursorclass = cursors.SSCursor)
</snippet></ROW><ROW><id>9396249</id><snippet>cursors.SSDictCursor</snippet></ROW><ROW><id>9396249</id><snippet>MySQLdb.cursors</snippet></ROW><ROW><id>9396249</id><snippet>/usr/lib/pymodules/python2.7/MySQLdb/cursors.py</snippet></ROW><ROW><id>9396326</id><snippet>color_picker</snippet></ROW><ROW><id>9396326</id><snippet>()</snippet></ROW><ROW><id>9396326</id><snippet>command</snippet></ROW><ROW><id>9396326</id><snippet>add_command(label="Czerwony", command=color_picker)</snippet></ROW><ROW><id>9396326</id><snippet>'red'</snippet></ROW><ROW><id>9396326</id><snippet>functools</snippet></ROW><ROW><id>9396326</id><snippet>from functools import partial
pick_red = partial(color_picker, "red")
kolory.add_command(label="Czerwony", command=pick_red)
</snippet></ROW><ROW><id>9396326</id><snippet>Tkinter</snippet></ROW><ROW><id>9396326</id><snippet>bind()</snippet></ROW><ROW><id>9396326</id><snippet>event</snippet></ROW><ROW><id>9396326</id><snippet>def pick_red_with_event(event):
    # We really do nothing with event for now but we always get it...
    color_picker("red")

okno.bind("1", pick_red_with_event)
</snippet></ROW><ROW><id>9396326</id><snippet>okno.bind</snippet></ROW><ROW><id>9396326</id><snippet>pick_red</snippet></ROW><ROW><id>9396326</id><snippet>okno.bind("1", pick_red)
</snippet></ROW><ROW><id>9396328</id><snippet>x.replace()</snippet></ROW><ROW><id>9396328</id><snippet>for tag in tags:
    x = x.replace(tag, '')
print x
</snippet></ROW><ROW><id>9396328</id><snippet>LOL</snippet></ROW><ROW><id>9396328</id><snippet>RUN LOLA RUN</snippet></ROW><ROW><id>9396328</id><snippet>r'\b'</snippet></ROW><ROW><id>9396328</id><snippet>r'\b'</snippet></ROW><ROW><id>9396328</id><snippet>for tag in tags:
    x = re.sub(r'\b' + tag + r'\b', '', x)
</snippet></ROW><ROW><id>9396396</id><snippet>if request.POST:
    request.SESSION['select_menu_value'] = request.POST.get('select_menu_value')
</snippet></ROW><ROW><id>9396725</id><snippet>urlresolvers</snippet></ROW><ROW><id>9396725</id><snippet>urlresolvers</snippet></ROW><ROW><id>9396725</id><snippet>reload</snippet></ROW><ROW><id>9396725</id><snippet>RegexURLPattern</snippet></ROW><ROW><id>9396725</id><snippet>RegexURLPattern</snippet></ROW><ROW><id>9396725</id><snippet>RegexURLPattern</snippet></ROW><ROW><id>9396733</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; d = difflib.Differ()
&gt;&gt;&gt; l = list(d.compare("hello", "heXXo"))
&gt;&gt;&gt; l
['  h', '  e', '- l', '- l', '+ X', '+ X', '  o']
</snippet></ROW><ROW><id>9396733</id><snippet>"  "</snippet></ROW><ROW><id>9396733</id><snippet>"- "</snippet></ROW><ROW><id>9396733</id><snippet>"+ "</snippet></ROW><ROW><id>9396745</id><snippet>dict</snippet></ROW><ROW><id>9396745</id><snippet>&gt;&gt;&gt; dct = {'pasta': [1,2,3]}
&gt;&gt;&gt; x = 'pas' + 'ta'
&gt;&gt;&gt; dct[x]
[1, 2, 3]
</snippet></ROW><ROW><id>9396745</id><snippet>locals()</snippet></ROW><ROW><id>9396745</id><snippet>locals()</snippet></ROW><ROW><id>9396745</id><snippet>eval()</snippet></ROW><ROW><id>9396745</id><snippet>InteractiveInterpreter</snippet></ROW><ROW><id>9397339</id><snippet>sys.maxint</snippet></ROW><ROW><id>9397339</id><snippet>r = random.random()
if sys.maxint ** (1.0/bias) &lt; r:
    print "overflow imminent"
elif sys.maxint/float(scale) &lt; r ** bias:
    print "overflow imminent"
else:
    print "overflow unlikely. To infinity, and beyond..."
</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.on</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.on</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.off</snippet></ROW><ROW><id>9397624</id><snippet>a.reply</snippet></ROW><ROW><id>9397624</id><snippet>$(document.body).on('click', 'a.reply', function() { /* ... */ });
</snippet></ROW><ROW><id>9397624</id><snippet>$('body').on('click', 'a.reply', function() { /* ... */ });
</snippet></ROW><ROW><id>9397624</id><snippet>$('body')</snippet></ROW><ROW><id>9397624</id><snippet>body</snippet></ROW><ROW><id>9397624</id><snippet>click</snippet></ROW><ROW><id>9397624</id><snippet>a.reply</snippet></ROW><ROW><id>9397624</id><snippet>$('a.reply').on('click', function() { /* ... */ });
</snippet></ROW><ROW><id>9397624</id><snippet>a.reply</snippet></ROW><ROW><id>9397624</id><snippet>on</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.live</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.live</snippet></ROW><ROW><id>9397624</id><snippet>jQuery.on</snippet></ROW><ROW><id>9397661</id><snippet>collections</snippet></ROW><ROW><id>9397661</id><snippet>collections.py</snippet></ROW><ROW><id>9397661</id><snippet>collections</snippet></ROW><ROW><id>9397661</id><snippet>__init__.py</snippet></ROW><ROW><id>9397661</id><snippet>collections</snippet></ROW><ROW><id>9397661</id><snippet>python26 -c 'import sys; print sys.path'</snippet></ROW><ROW><id>9397717</id><snippet>request</snippet></ROW><ROW><id>9397717</id><snippet>args[0]</snippet></ROW><ROW><id>9397717</id><snippet>def foo_decorator(function):
    @wraps(function)
    def decorator(*args, **kwargs):
        print args[0]
        return function(*args, kwargs)

    return decorator
</snippet></ROW><ROW><id>9397717</id><snippet>request</snippet></ROW><ROW><id>9397717</id><snippet>def foo_decorator(function):
    @wraps(function)
    def decorator(request, *args, **kwargs):
        print request
        return function(request, *args, kwargs)

    return decorator
</snippet></ROW><ROW><id>9397883</id><snippet>d = {}
for k, v in data:
    d.setdefault(k, []).append(v)
print d
</snippet></ROW><ROW><id>9397883</id><snippet>{'A': [11, 22], 'C': [23, 31], 'B': [14, 12]}
</snippet></ROW><ROW><id>9397883</id><snippet>d.keys()</snippet></ROW><ROW><id>9397883</id><snippet>data</snippet></ROW><ROW><id>9397883</id><snippet>defaultdict</snippet></ROW><ROW><id>9397883</id><snippet>dict</snippet></ROW><ROW><id>9398245</id><snippet>argparse</snippet></ROW><ROW><id>9398245</id><snippet>type=int</snippet></ROW><ROW><id>9398245</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-a', '--arg', nargs='+', type=int)
print parser.parse_args()
</snippet></ROW><ROW><id>9398245</id><snippet>$ python test.py -a 1 2 3
Namespace(arg=[1, 2, 3])
</snippet></ROW><ROW><id>9398245</id><snippet>argh</snippet></ROW><ROW><id>9398245</id><snippet>argparse</snippet></ROW><ROW><id>9398245</id><snippet>import argh

@argh.arg('-a', '--arg', nargs='+', type=int)
def main(args):
    print args

parser = argh.ArghParser()
parser.add_commands([main])
parser.dispatch()
</snippet></ROW><ROW><id>9398245</id><snippet>$ python test.py main -a 1 2 3
Namespace(arg=[1, 2, 3], function=&lt;function main at 0x.......&gt;)
</snippet></ROW><ROW><id>9398422</id><snippet>numpy</snippet></ROW><ROW><id>9398422</id><snippet>(255,255,255)</snippet></ROW><ROW><id>9398422</id><snippet>from PIL import Image
import numpy as np

im = Image.open("test.png")
pix = np.asarray(im)

pix = pix[:,:,0:3] # Drop the alpha channel
idx = np.where(pix-255)[0:2] # Drop the color when finding edges
box = map(min,idx)[::-1] + map(max,idx)[::-1]

region = im.crop(box)
region_pix = np.asarray(region)
</snippet></ROW><ROW><id>9398422</id><snippet>box</snippet></ROW><ROW><id>9398422</id><snippet>from pylab import *

subplot(121)
imshow(pix)
subplot(122)
imshow(region_pix)
show()
</snippet></ROW><ROW><id>9398845</id><snippet>- List.tabulate(10, fn x =&gt; x)
val it = [0,1,2,3,4,5,6,7,8,9] : int list
</snippet></ROW><ROW><id>9398922</id><snippet>enumerate()</snippet></ROW><ROW><id>9398922</id><snippet>for index, obj in enumerate(objects):
    print index
</snippet></ROW><ROW><id>9398922</id><snippet>object</snippet></ROW><ROW><id>9398922</id><snippet>obj</snippet></ROW><ROW><id>9399130</id><snippet>Python 2.5.1 (r251:54863, Aug 25 2008, 20:50:04) 
[GCC 4.1.2 20071124 (Red Hat 4.1.2-42)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import zmq.core
&gt;&gt;&gt; context=zmq.Context()
&gt;&gt;&gt; socket = context.socket(zmq.PULL)
&gt;&gt;&gt; socket.setsockopt(zmq.RCVBUF, 256)
&gt;&gt;&gt; socket.setsockopt(zmq.HWM, 1)
&gt;&gt;&gt; socket.bind("tcp://127.0.0.1:12345")
</snippet></ROW><ROW><id>9399357</id><snippet>en_GB</snippet></ROW><ROW><id>9399357</id><snippet>en-gb</snippet></ROW><ROW><id>9399359</id><snippet>def MyView(request):</snippet></ROW><ROW><id>9399359</id><snippet>request.META.get('REMOTE_ADDR')</snippet></ROW><ROW><id>9399376</id><snippet>itertools.groupby</snippet></ROW><ROW><id>9399376</id><snippet>import csv
import itertools

with open('VI(12).csv') as input, open('VI_avg(12).csv','w') as output:
    reader = csv.reader(input)
    writer = csv.writer(output)
    for current, row in itertools.groupby(reader, lambda x: x[1]):
        biaslist = [float(x[0]) for x in row]
        biasavg = float(sum(biaslist))/len(biaslist)
        writer.writerow([biasavg, current])
</snippet></ROW><ROW><id>9399747</id><snippet>A</snippet></ROW><ROW><id>9399747</id><snippet>self.animal</snippet></ROW><ROW><id>9399747</id><snippet>    A={}
    A=self.animal
</snippet></ROW><ROW><id>9399747</id><snippet>B</snippet></ROW><ROW><id>9399747</id><snippet>    B = [(A[0], "%.2f" % (reduce(mul,A[3:])*A[2][i]/sigma*A[2][i])) for A in A]
</snippet></ROW><ROW><id>9399747</id><snippet>A</snippet></ROW><ROW><id>9399747</id><snippet>3</snippet></ROW><ROW><id>9399747</id><snippet>self.animal</snippet></ROW><ROW><id>9399747</id><snippet>2</snippet></ROW><ROW><id>9399747</id><snippet>A</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; a = range(10)
&gt;&gt;&gt; [a for a in a]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; a
9
</snippet></ROW><ROW><id>9399747</id><snippet>a</snippet></ROW><ROW><id>9399747</id><snippet>a</snippet></ROW><ROW><id>9399747</id><snippet>    sigma = float(sum(reduce(mul,item[3:]) for item in A))
    B = [(item[0], "%.2f" % (reduce(mul,item[3:])/sigma)) for item in A] 
</snippet></ROW><ROW><id>9399747</id><snippet>get</snippet></ROW><ROW><id>9399747</id><snippet>self.animal</snippet></ROW><ROW><id>9399747</id><snippet>self.soil.get()</snippet></ROW><ROW><id>9399747</id><snippet>('Odocoileous virginiana','White-tailed Deer',self.soil.get(),0.99,0.01,0.99)
</snippet></ROW><ROW><id>9399747</id><snippet>self.soil.get()</snippet></ROW><ROW><id>9399747</id><snippet>self.soil.get()</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; l = ('Odocoileous virginiana','White-tailed Deer',
...      self.soil.get(), 0.99, 0.01, 0.99)
&gt;&gt;&gt; l[3:]
(0.98999999999999999, 0.01, 0.98999999999999999)
</snippet></ROW><ROW><id>9399747</id><snippet>0</snippet></ROW><ROW><id>9399747</id><snippet>l</snippet></ROW><ROW><id>9399747</id><snippet>l[0] == 'Odocoileous virginiana'</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; l[2:]
(0.55000000000000004, 0.98999999999999999, 0.01, 0.98999999999999999)
</snippet></ROW><ROW><id>9399747</id><snippet>self.soil.get()</snippet></ROW><ROW><id>9399747</id><snippet>self.animal</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; l = ('Odocoileous virginiana','White-tailed Deer',
...      self.soil.get, 0.99, 0.01, 0.99)
</snippet></ROW><ROW><id>9399747</id><snippet>()</snippet></ROW><ROW><id>9399747</id><snippet>self.soil.get</snippet></ROW><ROW><id>9399747</id><snippet>lambda</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; l = ('Odocoileous virginiana','White-tailed Deer',
...      lambda: self.soil.get() * self.water.get(), 0.99, 0.01, 0.99)
</snippet></ROW><ROW><id>9399747</id><snippet>l[2]</snippet></ROW><ROW><id>9399747</id><snippet>&gt;&gt;&gt; l[2]()
0.30250000000000005
</snippet></ROW><ROW><id>9399747</id><snippet>l[2]</snippet></ROW><ROW><id>9400291</id><snippet>import request, route, run

@route('/user-agent')
def user_agent():
    return request.environ.get('HTTP_USER_AGENT')
run()
</snippet></ROW><ROW><id>9400363</id><snippet>__init__</snippet></ROW><ROW><id>9400363</id><snippet>def __init__(self, host, user='', pw='', log=''):
    """Initializes a connection to a remote log."""

    self.client = paramiko.SSHClient()
    self.client.load_system_host_keys()
    self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    self.client.connect(hostname=host, username=user, password=pw)
    self.sftp = self.client.open_sftp()
    self.log = self.sftp.open(log, mode='r', bufsize=1)
</snippet></ROW><ROW><id>9400363</id><snippet>test.log.readline()</snippet></ROW><ROW><id>9400363</id><snippet>test.readline()</snippet></ROW><ROW><id>9400363</id><snippet>close()</snippet></ROW><ROW><id>9400837</id><snippet>newname= u"%s" % self.name.GetValue()
</snippet></ROW><ROW><id>9401152</id><snippet>collections.Counter</snippet></ROW><ROW><id>9401152</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = {'a':3, 'b':9, 'c':88, 'd': 3}
&gt;&gt;&gt; Counter(d.values()).most_common()
[(3, 2), (88, 1), (9, 1)]
</snippet></ROW><ROW><id>9401216</id><snippet>__iter__</snippet></ROW><ROW><id>9401216</id><snippet>next</snippet></ROW><ROW><id>9401216</id><snippet>class Example():

    def __iter__(self):
        lst = [1,2,3]
        for i in reversed(lst):
            yield i
        yield "one last time"
</snippet></ROW><ROW><id>9401283</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; l = [(1,2,3),(4,5,6)]
&gt;&gt;&gt; list(chain.from_iterable(l))
[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>9401557</id><snippet>docAnnotations = ZeroOrMore( Group( ZeroOrMore(Suppress("*")) +   Suppress(Literal("@")) + Suppress(Literal("vo")) + Suppress(lparen) + param + Literal("=") + text  + Suppress(rparen ) ))
print docAnnotations.parseString(""" @vo{$bow=BowVo}""")

def extractDoco(t):
    """ Helper parse action for parsing the content of a comment block
    """
    ret = t[0]
    ret = ret.replace('/**','')
    ret = ret.replace('*\n','')
    ret = ret.replace('*\n','\n')
    ret = ret.replace('*/','')
    print ret
    return docAnnotations.parseString(ret)  

phpCustomComment = pyparsing.javaStyleComment
</snippet></ROW><ROW><id>9401557</id><snippet>print commentedFuncDef.parseString(
                                   """
                                   /**
                                   * @vo{$bow=BowVo}
                                   * @vo{$sddfs=UserAccount}
                                   */
                                   private function doggyWithCustomComment($bow,$sddfs){ $dog="dave" }"""
                                   )
</snippet></ROW><ROW><id>9401557</id><snippet>[['$bow', '=', 'BowVo'], ['$sddfs', '=', 'UserAccount'], ['private', 'function', 'doggyWithCustomComment'], '(', ['$bow', '$sddfs'], ')', ['{', ' $dog="dave" ', '}']]
</snippet></ROW><ROW><id>9401707</id><snippet>fs</snippet></ROW><ROW><id>9401707</id><snippet>[0, fs]</snippet></ROW><ROW><id>9401707</id><snippet>[-fs/2, fs/2]</snippet></ROW><ROW><id>9401707</id><snippet>fftshift</snippet></ROW><ROW><id>9401707</id><snippet>scipy.fftpack.fft</snippet></ROW><ROW><id>9401813</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>9401813</id><snippet>communicate()</snippet></ROW><ROW><id>9401813</id><snippet>import subprocess

proc = subprocess.Popen('./test', stdin=subprocess.PIPE, stdout=subprocess.PIPE)

outdata = proc.stdout.readline()
print outdata
outdata, errdata = proc.communicate('output was ' + outdata)
print outdata
</snippet></ROW><ROW><id>9402036</id><snippet>set</snippet></ROW><ROW><id>9402110</id><snippet>allIDRows = list(clientItemsCursor.fetchall())</snippet></ROW><ROW><id>9402357</id><snippet>import matplotlib.pyplot as plt
# or from matplotlib import pyplot
</snippet></ROW><ROW><id>9402357</id><snippet>plt.title("Analysis of Tsunamis in Southeast Asia")
# or pyplot.title("Analysis of Tsunamis in Southeast Asia")
</snippet></ROW><ROW><id>9402466</id><snippet>sudo pip install git+git://github.com/myuser/myproject.git#egg=myproject
</snippet></ROW><ROW><id>9402897</id><snippet>&gt;&gt;&gt; 1.0/5.0
0.20000000000000001
</snippet></ROW><ROW><id>9402897</id><snippet>1.0/5.0</snippet></ROW><ROW><id>9402897</id><snippet>18014398509481984</snippet></ROW><ROW><id>9402897</id><snippet>20000000000000001/100000000000000000 == 3602879701896397/18014398509481984</snippet></ROW><ROW><id>9403079</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'mydatabase', 
        'USER': 'username',     
        'PASSWORD': 'password', 
        'HOST': 'apple',
        'PORT': '',     
    }
 }
</snippet></ROW><ROW><id>9403193</id><snippet>&gt;&gt;&gt; (100,)   # this is a tuple because of the trailing comma
(100,)
&gt;&gt;&gt; (100)    # this is just the value 100
100
</snippet></ROW><ROW><id>9403300</id><snippet>re.findall</snippet></ROW><ROW><id>9403300</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = "[xy][abc]"
&gt;&gt;&gt; re.findall(r'\[([^]]*)\]',sample)
['xy', 'abc']
</snippet></ROW><ROW><id>9403478</id><snippet>get_queryset</snippet></ROW><ROW><id>9403478</id><snippet>def get_queryset(self)
    qs = super(MyView, self).get_queryset()
    return qs.filter(person__user=self.request.user)
</snippet></ROW><ROW><id>9403502</id><snippet>E.item()</snippet></ROW><ROW><id>9403502</id><snippet>E.magnitude</snippet></ROW><ROW><id>9403502</id><snippet>quantities</snippet></ROW><ROW><id>9404356</id><snippet>result = []
for ta, tb in zip(list1, list2):
     t =tuple(a+b for a, b in zip(ta, tb))
     result.append(t)

print result
&gt;&gt; [(1,3,5),(7,9,11),(13,15,17)]
</snippet></ROW><ROW><id>9404356</id><snippet>result = [tuple(a+b for a, b in zip(ta, tb)) for ta, tb in zip(list1, list2)]
print result
&gt;&gt; [(1,3,5),(7,9,11),(13,15,17)]
</snippet></ROW><ROW><id>9404356</id><snippet>result = (tuple(a+b for a, b in zip(ta, tb)) for ta, tb in zip(list1, list2))
</snippet></ROW><ROW><id>9404412</id><snippet>QProgressBar</snippet></ROW><ROW><id>9404412</id><snippet>qProgressBar.setRange(0, 100);
</snippet></ROW><ROW><id>9404412</id><snippet>pctValue = abs(dataInserted*100/dataSize);
qProgressBar.setValue(pctValue);
</snippet></ROW><ROW><id>9404495</id><snippet>handle_starttag()</snippet></ROW><ROW><id>9404495</id><snippet>self.lasttag</snippet></ROW><ROW><id>9404495</id><snippet>handle_data()</snippet></ROW><ROW><id>9404495</id><snippet>self.lasttag</snippet></ROW><ROW><id>9404495</id><snippet>'a'</snippet></ROW><ROW><id>9404495</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):

    lasttag = None

    def handle_starttag(self, tag, attr):
        self.lasttag = tag.lower()

    def handle_data(self, data):
        if self.lasttag == "a" and data.strip():
            print data
</snippet></ROW><ROW><id>9404495</id><snippet>&lt;a...&gt; ... &lt;/a&gt;</snippet></ROW><ROW><id>9404495</id><snippet>href=</snippet></ROW><ROW><id>9404495</id><snippet>from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):

    inlink = False
    data   = []

    def handle_starttag(self, tag, attr):
        if tag.lower() == "a" and "href" in (k.lower() for k, v in attr):
           self.inlink = True
           self.data   = []

    def handle_endtag(self, tag):
        if tag.lower() == "a":
            self.inlink = False
            print "".join(self.data)

    def handle_data(self, data):
        if self.inlink:
            self.data.append(data)
</snippet></ROW><ROW><id>9404597</id><snippet>'module' object has no attribute 'local'</snippet></ROW><ROW><id>9404597</id><snippet>import threading</snippet></ROW><ROW><id>9404597</id><snippet>C:\pd\GDSII\threading.py</snippet></ROW><ROW><id>9404597</id><snippet>C:\Python26\lib\threading.py</snippet></ROW><ROW><id>9404597</id><snippet>subprocess</snippet></ROW><ROW><id>9404597</id><snippet>import threading</snippet></ROW><ROW><id>9404597</id><snippet>threading</snippet></ROW><ROW><id>9404597</id><snippet>threading</snippet></ROW><ROW><id>9404597</id><snippet>C:\pd\GDSII\threading.py</snippet></ROW><ROW><id>9404597</id><snippet>Thread module emulating a subset of Java's threading model</snippet></ROW><ROW><id>9404597</id><snippet>C:\Python26\lib\threading.py</snippet></ROW><ROW><id>9404597</id><snippet>local</snippet></ROW><ROW><id>9404597</id><snippet>threading.pyc</snippet></ROW><ROW><id>9404784</id><snippet>ftp = ftputil.FTPHost('ftp.site.com','user','pass')
try:
    recursive = ftp.walk("/path/dir1",topdown=True,onerror=None)
    for root,dirs,files in recursive:
         for name in files:
               print name
except Error e:
   print "Error: %s occurred" % (e)
ftp.close
</snippet></ROW><ROW><id>9404784</id><snippet>import ftputil.ftp_error.PermanentError as PermanentError
ftp = ftputil.FTPHost('ftp.site.com','user','pass')
try:
    recursive = ftp.walk("/path/dir1",topdown=True,onerror=None)
    for root,dirs,files in recursive:
         for name in files:
              print name
except PermanentError e:
   print "Permanent Error: %s occurred" % (e)
ftp.close
</snippet></ROW><ROW><id>9404816</id><snippet>GET</snippet></ROW><ROW><id>9404816</id><snippet>POST</snippet></ROW><ROW><id>9404816</id><snippet>urrllib2</snippet></ROW><ROW><id>9404816</id><snippet>POST</snippet></ROW><ROW><id>9404816</id><snippet>GET</snippet></ROW><ROW><id>9404816</id><snippet>request = urllib2.Request('http://www.translate.google.com', urllib.urlencode(data))</snippet></ROW><ROW><id>9404816</id><snippet>querystring = urllib.urlencode(data)
request = urllib2.Request('http://www.translate.google.com' + '?' + querystring )
</snippet></ROW><ROW><id>9404816</id><snippet>&lt;span id="result_box" class="short_text"&gt;
    &lt;span title="word" onmouseover="this.style.backgroundColor='#ebeff9'" onmouseout="this.style.backgroundColor='#fff'"&gt;
        parola
    &lt;/span&gt;
&lt;/span&gt;
</snippet></ROW><ROW><id>9404816</id><snippet>requests</snippet></ROW><ROW><id>9404816</id><snippet>requests</snippet></ROW><ROW><id>9404816</id><snippet>HTTP</snippet></ROW><ROW><id>9405029</id><snippet>int</snippet></ROW><ROW><id>9405029</id><snippet>&gt;&gt;&gt; int(3.1415)
3
</snippet></ROW><ROW><id>9405085</id><snippet>{{ vote_dict }}</snippet></ROW><ROW><id>9405085</id><snippet>__str__</snippet></ROW><ROW><id>9405085</id><snippet>{key_repr:value_repr}</snippet></ROW><ROW><id>9405085</id><snippet>{% for key, value in vote_dict.items %}
    {{ key }} : {{ value }}
{% endfor %}
</snippet></ROW><ROW><id>9405085</id><snippet>L</snippet></ROW><ROW><id>9405085</id><snippet>alert({{vote_dict}})</snippet></ROW><ROW><id>9405085</id><snippet>alert</snippet></ROW><ROW><id>9405085</id><snippet>list</snippet></ROW><ROW><id>9405085</id><snippet>def js_list(iterable):
    return '[%s]' % ', '.join(str(item) for item in iterable)
</snippet></ROW><ROW><id>9405108</id><snippet>import math
x1,y1 = obj.pos
x2,y2 = obj.lastpos

x = x2 - x1
y = y2 - y1

angle = math.degrees(math.atan2(y,x))
if angle &lt; 0:  angle += 360
print(angle)
#now you have the angle from it was heading
</snippet></ROW><ROW><id>9405108</id><snippet>angle = obj.get_angle()
angle += 180
while angle&gt;360: angle += -360
print(angle)
#now you have the angle from it collides.
</snippet></ROW><ROW><id>9405418</id><snippet>tuple = ('a','b','c')
list = ['a','b','c']
dict = {'a':1, 'b': true, 'c': "name"}

list.append('d') #will ad 'd' to the list
list[0] #will get the first item 'a'

list.pop(2) # will remove items by postion, remove the 2nd item
list.remove('b') # will remove items by value, remove the first item of value 'b'
</snippet></ROW><ROW><id>9405590</id><snippet>scatter</snippet></ROW><ROW><id>9405590</id><snippet>myBaseMap.plot(x_values, y_values, alpha=0.7, c=(1.,0,0), zorder=0)
myBaseMap.scatter(x_values, y_values, marker='x', color=(1.,0,0), zorder=1)
</snippet></ROW><ROW><id>9405590</id><snippet>zorder</snippet></ROW><ROW><id>9405590</id><snippet>import matplotlib.pyplot as plt
plt.plot([1,2,3],[3,2,1],alpha=0.25,c=(1.,0,0),zorder=0)
plt.scatter([1,2,3],[3,2,1],marker='x',color=(1.,0,0),zorder=1,s=75,alpha=1.0)
</snippet></ROW><ROW><id>9405613</id><snippet>cProfile</snippet></ROW><ROW><id>9405613</id><snippet>python -m cProfile myscript.py
</snippet></ROW><ROW><id>9405613</id><snippet>me@mine $ python -m cProfile mersenne.twister.py 
True
True
1000000
         1003236 function calls in 2.163 CPU seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    2.163    2.163 &lt;string&gt;:1(&lt;module&gt;)
        1    0.001    0.001    2.162    2.162 mersenne.twister.py:1(&lt;module&gt;)
        3    0.001    0.000    0.001    0.000 mersenne.twister.py:10(init_gen)
  1000014    1.039    0.000    1.821    0.000 mersenne.twister.py:19(extract_number)
        1    0.000    0.000    0.000    0.000 mersenne.twister.py:3(Twister)
     1603    0.766    0.000    0.782    0.000 mersenne.twister.py:33(generate_numbers)
        1    0.000    0.000    0.000    0.000 mersenne.twister.py:4(__init__)
        1    0.317    0.317    2.161    2.161 mersenne.twister.py:42(_test)
        1    0.001    0.001    2.163    2.163 {execfile}
        1    0.000    0.000    0.000    0.000 {len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
     1608    0.038    0.000    0.038    0.000 {range}
</snippet></ROW><ROW><id>9405613</id><snippet>ncalls</snippet></ROW><ROW><id>9405613</id><snippet>tottime</snippet></ROW><ROW><id>9405613</id><snippet>percall</snippet></ROW><ROW><id>9405613</id><snippet>tottime / ncalls</snippet></ROW><ROW><id>9405613</id><snippet>cumtime</snippet></ROW><ROW><id>9405613</id><snippet>filename:lineno(func_name)</snippet></ROW><ROW><id>9405613</id><snippet>ncalls</snippet></ROW><ROW><id>9405613</id><snippet>tottime</snippet></ROW><ROW><id>9405613</id><snippet>extract_number</snippet></ROW><ROW><id>9405613</id><snippet>extract_number</snippet></ROW><ROW><id>9405613</id><snippet>extract_number</snippet></ROW><ROW><id>9405613</id><snippet>generate_numbers</snippet></ROW><ROW><id>9405613</id><snippet>tottime</snippet></ROW><ROW><id>9405793</id><snippet>% tree .
.
├── the_king
│   └── text.txt
├── the_knight
│   └── text.txt
├── the_peasant
│   └── text.txt
└── wart.py
3 directories, 4 files
</snippet></ROW><ROW><id>9405793</id><snippet>% find . -name 'text.txt' -print -exec cat {} \;       
./the_king/text.txt
has a wart    
was dressed up like a witch     
has a false nose
./the_knight/text.txt
has a wart    
was dressed up like a witch     
has a false nose
./the_peasant/text.txt
has a wart    
was dressed up like a witch     
has a false nose
</snippet></ROW><ROW><id>9405793</id><snippet>#!/usr/bin/env python

import os

text_file = 'text.txt'
cwd = os.path.curdir # '.'

# Walk thru each directory starting at '.' and if the directory contains
# 'text.txt', print each line of the file prefixed by the name containing
# directory.
for root, dirs, files in os.walk(cwd):
    if text_file in files: # We only care IF the file is in this directory.
        print 'Found %s!' % root
        filepath = os.path.join(root, text_file) # './the_peasant/text.txt'
        root_base = os.path.basename(root)       # './the_peasant' =&gt; 'the_peasant'
        output = ''
        with open(filepath, 'r') as reader:      # Open file for read/write
            for line in reader:                  # Iterate the lines of the file
                new_line = "%s %s" % (root_base, line)
                print new_line,
                output += new_line               # Append to the output

        with open(filepath, 'w') as writer:
            writer.write(output)                 # Write to the file

        print
</snippet></ROW><ROW><id>9405793</id><snippet>Found ./the_king!
the_king has a wart    
the_king was dressed up like a witch     
the_king has a false nose

Found ./the_knight!
the_knight has a wart    
the_knight was dressed up like a witch     
the_knight has a false nose

Found ./the_peasant!
the_peasant has a wart    
the_peasant was dressed up like a witch     
the_peasant has a false nose
</snippet></ROW><ROW><id>9405793</id><snippet>% find . -name 'text.txt' -print -exec cat {} \;
./the_king/text.txt
the_king has a wart    
the_king was dressed up like a witch     
the_king has a false nose
./the_knight/text.txt
the_knight has a wart    
the_knight was dressed up like a witch     
the_knight has a false nose
./the_peasant/text.txt
the_peasant has a wart    
the_peasant was dressed up like a witch     
the_peasant has a false nose
</snippet></ROW><ROW><id>9406259</id><snippet>-y | --yes</snippet></ROW><ROW><id>9406259</id><snippet>% pip freeze | grep pyobjc-framework | xargs pip uninstall -y</snippet></ROW><ROW><id>9406278</id><snippet>from PIL import Image
import numpy as np

im = Image.open("dummytext.png")
pix = np.asarray(im)
pix = pix[:,:,0:3] # Drop the alpha channel
pix = 255 - pix  # Invert the image
H =  pix.sum(axis=2).sum(axis=1) # Sum the colors, then the y-axis
</snippet></ROW><ROW><id>9406324</id><snippet> python_executable_name -m easy_install packagename
</snippet></ROW><ROW><id>9406352</id><snippet>class PerformanceTestCase(TestCase):
    def setUp(self):
        self.begin_time = datetime.datetime.now()

    def tearDown(self):
        delta = datetime.datetime.now() - self.begin_time
        print 'Time taken', delta.seconds

        from django.db import connection
        print 'SQL queries', len(connection.queries)
</snippet></ROW><ROW><id>9406377</id><snippet>strptime</snippet></ROW><ROW><id>9406377</id><snippet>from datetime import datetime
print datetime.strptime("21-Feb-12", "%d-%b-%y")
#datetime.datetime(2012, 2, 21, 0, 0)
</snippet></ROW><ROW><id>9406390</id><snippet>@timeout(timeout=2)
def return_later():
    time.sleep(3)
    return 'later'
</snippet></ROW><ROW><id>9406390</id><snippet>Traceback (most recent call last):
    ...
TimeoutException
</snippet></ROW><ROW><id>9406390</id><snippet>signal.alarm()</snippet></ROW><ROW><id>9406390</id><snippet>int</snippet></ROW><ROW><id>9406390</id><snippet>signal.setitimer()</snippet></ROW><ROW><id>9406390</id><snippet>signal</snippet></ROW><ROW><id>9406390</id><snippet>ualarm()</snippet></ROW><ROW><id>9406390</id><snippet>setitimer()</snippet></ROW><ROW><id>9406468</id><snippet>a= ['a', 'b', 'c', 'd', 'e']
b= []

b.append(a.pop())
b.append(a.pop())
b.append(a.pop())

print 'ListA =', a
print 'ListB =', b



Python 2.6.5 (r265:79063, Jun 12 2010, 17:07:01)
[GCC 4.3.4 20090804 (release) 1] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
&gt;&gt;&gt; a = ['a','b','c']
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b.append(a.pop())
&gt;&gt;&gt; b.append(a.pop())
&gt;&gt;&gt; b.append(a.pop())
&gt;&gt;&gt; print "a =", a
a = []
&gt;&gt;&gt; print "b =", b
b = ['c', 'b', 'a']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9406905</id><snippet>get_cmap</snippet></ROW><ROW><id>9406905</id><snippet>from pylab import imshow, show, get_cmap
from numpy import random

Z = random.random((50,50))   # Test data

imshow(Z, cmap=get_cmap("Spectral"), interpolation='nearest')
show()
</snippet></ROW><ROW><id>9406905</id><snippet>from pylab import cm
print cm.datad.keys()
</snippet></ROW><ROW><id>9406905</id><snippet>"Spectral"</snippet></ROW><ROW><id>9406905</id><snippet>['Spectral', 'summer', 'RdBu', 'Set1', 'Set2', 'Set3', 'brg_r', 'Dark2', 'hot', 'PuOr_r', 'afmhot_r', 'terrain_r', 'PuBuGn_r', 'RdPu', 'gist_ncar_r', 'gist_yarg_r', 'Dark2_r', 'YlGnBu', 'RdYlBu', 'hot_r', 'gist_rainbow_r', 'gist_stern', 'gnuplot_r', 'cool_r', 'cool', 'gray', 'copper_r', 'Greens_r', 'GnBu', 'gist_ncar', 'spring_r', 'gist_rainbow', 'RdYlBu_r', 'gist_heat_r', 'OrRd_r', 'bone', 'gist_stern_r', 'RdYlGn', 'Pastel2_r', 'spring', 'terrain', 'YlOrRd_r', 'Set2_r', 'winter_r', 'PuBu', 'RdGy_r', 'spectral', 'flag_r', 'jet_r', 'RdPu_r', 'Purples_r', 'gist_yarg', 'BuGn', 'Paired_r', 'hsv_r', 'bwr', 'YlOrRd', 'Greens', 'PRGn', 'gist_heat', 'spectral_r', 'Paired', 'hsv', 'Oranges_r', 'prism_r', 'Pastel2', 'Pastel1_r', 'Pastel1', 'gray_r', 'PuRd_r', 'Spectral_r', 'gnuplot2_r', 'BuPu', 'YlGnBu_r', 'copper', 'gist_earth_r', 'Set3_r', 'OrRd', 'PuBu_r', 'ocean_r', 'brg', 'gnuplot2', 'jet', 'bone_r', 'gist_earth', 'Oranges', 'RdYlGn_r', 'PiYG', 'YlGn', 'binary_r', 'gist_gray_r', 'Accent', 'BuPu_r', 'gist_gray', 'flag', 'seismic_r', 'RdBu_r', 'BrBG', 'Reds', 'BuGn_r', 'summer_r', 'GnBu_r', 'BrBG_r', 'Reds_r', 'RdGy', 'PuRd', 'Accent_r', 'Blues', 'Greys', 'autumn', 'PRGn_r', 'Greys_r', 'pink', 'binary', 'winter', 'gnuplot', 'pink_r', 'prism', 'YlOrBr', 'rainbow_r', 'rainbow', 'PiYG_r', 'YlGn_r', 'Blues_r', 'YlOrBr_r', 'seismic', 'Purples', 'bwr_r', 'autumn_r', 'ocean', 'Set1_r', 'PuOr', 'PuBuGn', 'afmhot']
</snippet></ROW><ROW><id>9406985</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.nextafter(1, 0)
0.99999999999999989
</snippet></ROW><ROW><id>9406985</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; 1-sys.float_info.epsilon
0.9999999999999998
&gt;&gt;&gt; numpy.nextafter(1, 0) - (1-sys.float_info.epsilon)
1.1102230246251565e-16
&gt;&gt;&gt; numpy.nextafter(1, 0) &gt; (1-sys.float_info.epsilon)
True
</snippet></ROW><ROW><id>9406985</id><snippet>&gt;&gt;&gt; import random, numpy
&gt;&gt;&gt; numpy.nextafter(0,1)
4.9406564584124654e-324
&gt;&gt;&gt; random.uniform(0, numpy.nextafter(0,1))
0.0
&gt;&gt;&gt; random.uniform(0, numpy.nextafter(0,1))
0.0
&gt;&gt;&gt; random.uniform(0, numpy.nextafter(0,1))
4.9406564584124654e-324
</snippet></ROW><ROW><id>9407009</id><snippet>del msg['To']</snippet></ROW><ROW><id>9407009</id><snippet>__setitem__</snippet></ROW><ROW><id>9407068</id><snippet>len(words)</snippet></ROW><ROW><id>9407068</id><snippet>words</snippet></ROW><ROW><id>9407068</id><snippet>words = []
while len(words) != 5:
  words = raw_input("Enter a 5 worded sentence: ").split()
  if len(words) &gt; 5:
    print 'Try again. Word exceeded 5 word limit'
  elif len(words) &lt; 5:
    print 'Try again. Too little words!'
</snippet></ROW><ROW><id>9407068</id><snippet>raw_input()</snippet></ROW><ROW><id>9407292</id><snippet>f</snippet></ROW><ROW><id>9407292</id><snippet>script, input_file = argv
#...
current_file = open(input_file) 
#...
#here, the body of current_file is executed, 
#with f replaced by the value of current_file
print_all(current_file)
</snippet></ROW><ROW><id>9407292</id><snippet>argv</snippet></ROW><ROW><id>9407292</id><snippet>sys</snippet></ROW><ROW><id>9407292</id><snippet>["ex20.py", "test.txt"]</snippet></ROW><ROW><id>9407593</id><snippet>x</snippet></ROW><ROW><id>9407593</id><snippet>x2</snippet></ROW><ROW><id>9407667</id><snippet>__future__.division</snippet></ROW><ROW><id>9407667</id><snippet>compile()</snippet></ROW><ROW><id>9407667</id><snippet>eval()</snippet></ROW><ROW><id>9407667</id><snippet>&gt;&gt;&gt; import __future__
&gt;&gt;&gt; eval(compile('1/3', '&lt;string&gt;', 'eval', __future__.division.compiler_flag))
0.33333333333333331
</snippet></ROW><ROW><id>9407681</id><snippet>overrideredirect(1)</snippet></ROW><ROW><id>9407681</id><snippet>import tkMessageBox
from Tkinter import *

class App():
    def __init__(self):
        self.root = Tk()
        self.root.overrideredirect(1)
        self.frame = Frame(self.root, width=320, height=200,
                           borderwidth=2, relief=RAISED)
        self.frame.pack_propagate(False)
        self.frame.pack()
        self.bQuit = Button(self.frame, text="Quit",
                            command=self.root.quit)
        self.bQuit.pack(pady=20)
        self.bHello = Button(self.frame, text="Hello",
                             command=self.hello)
        self.bHello.pack(pady=20)

    def hello(self):
        tkMessageBox.showinfo("Popup", "Hello!")

app = App()
app.root.mainloop()
</snippet></ROW><ROW><id>9408176</id><snippet>fallocate</snippet></ROW><ROW><id>9408176</id><snippet>fallocate64</snippet></ROW><ROW><id>9408176</id><snippet>fallocate</snippet></ROW><ROW><id>9408436</id><snippet>myapp</snippet></ROW><ROW><id>9408436</id><snippet>helloworld/app.yaml</snippet></ROW><ROW><id>9408436</id><snippet>application: helloworld
version: 1
runtime: python
api_version: 1

handlers:
- url: /.*
  script: helloworld.py
</snippet></ROW><ROW><id>9408436</id><snippet>helloworld/helloworld.py</snippet></ROW><ROW><id>9408436</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class MainPage(webapp.RequestHandler):
    def get(self, url=None):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Happy New Year '+str(url))

#application = webapp.WSGIApplication(
#                                     [('/', MainPage)],
#                                     debug=True)

application = webapp.WSGIApplication([
                                    (r'/myapp/(?P&lt;url&gt;\d{4})/$', MainPage)
                                    ],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9408436</id><snippet>/myapp/year/</snippet></ROW><ROW><id>9408436</id><snippet>/myapp/</snippet></ROW><ROW><id>9408483</id><snippet>url_for</snippet></ROW><ROW><id>9408483</id><snippet>myview</snippet></ROW><ROW><id>9408483</id><snippet>&lt;a href="{{ url_for('myview', var1=db.name, var2=record.name) }}"&gt;
</snippet></ROW><ROW><id>9408489</id><snippet>i=w.create_text(*textSet, text=i[3], font=("Helvetica", 16))
r=w.create_rectangle(w.bbox(i),fill="white")
w.tag_lower(r,i)
</snippet></ROW><ROW><id>9408509</id><snippet>import logging
import random
import os
class myFileHandler(logging.FileHandler):
    def __init__(self,path,fileName,mode):
        r = random.randint(1,100000)
        path = path+"/log_"+str(r)
        os.mkdir(path)
        super(myFileHandler,self).__init__(path+"/"+fileName,mode)
</snippet></ROW><ROW><id>9408509</id><snippet>class: myHandler.myFileHandler
args = ('/var/tmp','client.log','a')
</snippet></ROW><ROW><id>9409008</id><snippet>class Mammal(object):

    def __init__(self):
        self.blood_sample = 42
        self.dna_sequence = None

    def get_dna_sequence(self):
        if self.dna_sequence == None:
            self.generate_dna_sequence(self.blood_sample)
        return self.dna_sequence

    def generate_dna_sequence(self, blood_sample=None):
        self.dna_sequence = stuff_to_generate_sequence(blood_sample)

class Human(Mammal):
    def __init__(self):
          super(Mammal, self).__init__()
          self.blood_sample = 43
</snippet></ROW><ROW><id>9409097</id><snippet>class AttrDict(dict):
    """A dictionary with attribute-style access. It maps attribute access to
    the real dictionary.  """
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)

    def __getstate__(self):
        return self.__dict__.items()

    def __setstate__(self, items):
        for key, val in items:
            self.__dict__[key] = val

    def __repr__(self):
        return "%s(%s)" % (self.__class__.__name__, dict.__repr__(self))

    def __setitem__(self, key, value):
        return super(AttrDict, self).__setitem__(key, value)

    def __getitem__(self, name):
        return super(AttrDict, self).__getitem__(name)

    def __delitem__(self, name):
        return super(AttrDict, self).__delitem__(name)

    __getattr__ = __getitem__
    __setattr__ = __setitem__

    def copy(self):
        return AttrDict(self)
</snippet></ROW><ROW><id>9409493</id><snippet>c1 = "St. Louis       12             Cardinals"
words = [w.strip() for w in c1.split('  ') if w]
# words == ['St. Louis', '12', 'Cardinals']
</snippet></ROW><ROW><id>9409562</id><snippet>import lxml.html, lxml.etree

url_cooking = 'http://cooking.stackexchange.com/feeds'

#lxml.etree version
data = lxml.etree.parse(url_cooking)
summary_nodes = data.xpath('.//feed/entry/summary')
print('Found ' + str(len(summary_nodes)) + ' summary nodes')

#lxml.html version
data = lxml.html.parse(url_cooking)
summary_nodes = data.xpath('.//feed/entry/summary')
print('Found ' + str(len(summary_nodes)) + ' summary nodes')
</snippet></ROW><ROW><id>9409562</id><snippet>lxml.html</snippet></ROW><ROW><id>9409562</id><snippet>etree</snippet></ROW><ROW><id>9409562</id><snippet>html</snippet></ROW><ROW><id>9409562</id><snippet>print(data.getroot())</snippet></ROW><ROW><id>9409562</id><snippet>&lt;Element {http://www.w3.org/2005/Atom}feed at 0x22d1620&gt;</snippet></ROW><ROW><id>9409562</id><snippet>http://www.w3.org/2005/Atom</snippet></ROW><ROW><id>9409562</id><snippet>import lxml.html, lxml.etree

url_cooking = 'http://cooking.stackexchange.com/feeds'

ns = 'http://www.w3.org/2005/Atom'
ns_map = {'ns': ns}

data = lxml.etree.parse(url_cooking)
summary_nodes = data.xpath('//ns:feed/ns:entry/ns:summary', namespaces=ns_map)
print('Found ' + str(len(summary_nodes)) + ' summary nodes')
</snippet></ROW><ROW><id>9409635</id><snippet>socket.connect_ex()</snippet></ROW><ROW><id>9409635</id><snippet>import socket
from time import sleep
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
while s.connect_ex(("10.0.0.1", 80)) != 0:
    sleep(10)
</snippet></ROW><ROW><id>9409789</id><snippet>check()</snippet></ROW><ROW><id>9409789</id><snippet>class Constraint:
    def __init__(self, table, column, constraint, error_or_warning):
        """
        examples:
            Constraint('Lib_Cable','kV', '&gt; 0', 'error')
            Constraint('Lib_Cable','Insulation', '!= 0', 'warning')

        """
        self.table, self.column, self.constraint, self.error_or_warning = \
        table, column, constraint, error_or_warning

    def check (self, db_conn):
        c = db_conn.cursor()
        c.row_factory = sqlite3.Row

        query = "SELECT * FROM %(table)s WHERE NOT (%(column)s %(constraint)s)" % \
                {'table'      : self.table,
                 'column'     : self.column,
                 'constraint' : self.constraint }
        # [FIXME] start a transaction here - guard against novice SQL injections?
        res = c.execute(query)

        for row in res:
            print ( "%(error_or_warning)s: Row with key %(key)s in table %(table)s violates constraint %(column)s %(constraint)s)." % \
                {'key'        : row['KeyName'],
                 'table'      : self.table,
                 'column'     : self.column,
                 'constraint' : self.constraint,
                 'error_or_warning' : self.error_or_warning} )

        # [FIXME] discard transaction

Constraint_1 = Constraint('Lib_Cable', 'Insulation', '!= 0', 'error')        
Constraint_1.check(db_conn)
</snippet></ROW><ROW><id>9409833</id><snippet>python -i</snippet></ROW><ROW><id>9409833</id><snippet>import foo
import baz
l = [1,2,3,4]
</snippet></ROW><ROW><id>9409833</id><snippet>$ python -i script.py
&gt;&gt;&gt; print l
[1, 2, 3, 4]
</snippet></ROW><ROW><id>9409833</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>9410649</id><snippet>[d for d in DIRLIST if d.split('_')[1] == '16203']
</snippet></ROW><ROW><id>9410649</id><snippet>if '16203' in dir</snippet></ROW><ROW><id>9410649</id><snippet>201008162030_15201_NC_GZ</snippet></ROW><ROW><id>9410723</id><snippet>raw_input</snippet></ROW><ROW><id>9410723</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>9410757</id><snippet>h2py.py</snippet></ROW><ROW><id>9411339</id><snippet>Summerdale/np</snippet></ROW><ROW><id>9411339</id><snippet>/</snippet></ROW><ROW><id>9411339</id><snippet>np</snippet></ROW><ROW><id>9411339</id><snippet>def noun(word):
    nouns = []
    for word in sentence.split():
      word, tag = word.split('/')
      if (tag.lower() == 'np'):
        nouns.append(word);
    return nouns

if __name__ == '__main__':
    nouns = []
    with open('tesu.txt', 'r') as file_p:
         for sentence in file_p.read().split('\n\n'): 
              result = noun(sentence)
              if result:
                   nouns.extend(result)
    print nouns
</snippet></ROW><ROW><id>9411339</id><snippet>['Summerdale', 'Bellows', 'Parsons', 'Alan', 'Clements']
</snippet></ROW><ROW><id>9411339</id><snippet>nouns = []
with open('tesu.txt', 'r') as file_p:
  for word in file_p.read().split(): 
    word, tag = word.split('/')
    if (tag.lower() == 'np'):
      nouns.append(word)
print nouns
</snippet></ROW><ROW><id>9411339</id><snippet>.lower()</snippet></ROW><ROW><id>9411482</id><snippet>Player</snippet></ROW><ROW><id>9411482</id><snippet>class Player(models.Model):
    name = models.CharField(max_length=200)
</snippet></ROW><ROW><id>9411482</id><snippet>Group.objects.filter(player__name__in=['Player1','Player2'])
</snippet></ROW><ROW><id>9411482</id><snippet>player</snippet></ROW><ROW><id>9411482</id><snippet>p1 = Player.objects.get(name='Player1')
p2 = Player.objects.get(name='Player2')
groups = Group.objects.filter(player=p1).filter(player=p2)
</snippet></ROW><ROW><id>9412038</id><snippet>multiprocessing</snippet></ROW><ROW><id>9412038</id><snippet>multiprocessing</snippet></ROW><ROW><id>9412269</id><snippet>&gt;&gt; python setup.py register
</snippet></ROW><ROW><id>9412269</id><snippet>#!/usr/bin/env python

from distutils.core import setup

 setup(name='Distutils',
  version='1.0',
  description='Python Distribution Utilities',
  author='Greg Ward',
  author_email='gward@python.net',
  url='http://www.python.org/sigs/distutils-sig/',
  packages=['distutils', 'distutils.command'],
 )
</snippet></ROW><ROW><id>9412269</id><snippet>&gt;&gt; python setup.py install
</snippet></ROW><ROW><id>9412482</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>9412552</id><snippet>|</snippet></ROW><ROW><id>9412552</id><snippet>[  ]</snippet></ROW><ROW><id>9412552</id><snippet>ans=re.search(r"\w+[\\.]*\w+", txt1)
</snippet></ROW><ROW><id>9412686</id><snippet>d</snippet></ROW><ROW><id>9412686</id><snippet>f</snippet></ROW><ROW><id>9412686</id><snippet>starmap</snippet></ROW><ROW><id>9412686</id><snippet>from itertools import starmap
starmap(f, d.iteritems())
</snippet></ROW><ROW><id>9412686</id><snippet>starmap(my_class, dict.iteritems())</snippet></ROW><ROW><id>9412686</id><snippet>return list(starmap(my_class, dict.iteritems))
</snippet></ROW><ROW><id>9413477</id><snippet>min()</snippet></ROW><ROW><id>9413477</id><snippet>O(1)</snippet></ROW><ROW><id>9413477</id><snippet>min()</snippet></ROW><ROW><id>9413535</id><snippet>s + "," + i+1</snippet></ROW><ROW><id>9413535</id><snippet>String result_to_add = s + "," + (i+1);</snippet></ROW><ROW><id>9413627</id><snippet>from blimp.models import ...
</snippet></ROW><ROW><id>9413627</id><snippet>blimp/blimp/models.py</snippet></ROW><ROW><id>9413627</id><snippet>add2virtualenv directory1 directory2 directory3
</snippet></ROW><ROW><id>9413808</id><snippet>ZipFile</snippet></ROW><ROW><id>9413808</id><snippet>shutil.make_archive</snippet></ROW><ROW><id>9413808</id><snippet>import shutil

zip_file_path = shutil.make_archive(zip_file_build_path, 'zip', root_dir = dist_dir);
</snippet></ROW><ROW><id>9414006</id><snippet>lambda done: self.functionB(done, valueA)
</snippet></ROW><ROW><id>9414006</id><snippet>def functionA(self):
  self.http=QHttp()
  ...
  self.valueA="valueA"
  self.connect(self.http, SIGNAL("done (bool)"), self.functionB)
  self.get("/myurl.html")

def functionB(self, done, valueA=None):
  if valueA is None: 
      valueA = self.valueA
  ...
</snippet></ROW><ROW><id>9414210</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9414210</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>9414210</id><snippet>.*</snippet></ROW><ROW><id>9414210</id><snippet>^</snippet></ROW><ROW><id>9414210</id><snippet>$</snippet></ROW><ROW><id>9414210</id><snippet>^.*?$</snippet></ROW><ROW><id>9414210</id><snippet>import re

source = """one
two
three
four
five
six
seven
eight
nine
ten"""

print re.search('^three.*six.*?^.*?$', source, re.DOTALL|re.MULTILINE).group(0)
</snippet></ROW><ROW><id>9414277</id><snippet>sandbox/ping.py</snippet></ROW><ROW><id>9414277</id><snippet>from txnet.icmp import ICMP, Packet, ECHO_REQUEST
</snippet></ROW><ROW><id>9414277</id><snippet>ICMP</snippet></ROW><ROW><id>9414277</id><snippet>Pinger</snippet></ROW><ROW><id>9414277</id><snippet>ping.py</snippet></ROW><ROW><id>9414482</id><snippet>for obj in myList:</snippet></ROW><ROW><id>9414482</id><snippet>obj</snippet></ROW><ROW><id>9414482</id><snippet>myList</snippet></ROW><ROW><id>9414482</id><snippet>obj</snippet></ROW><ROW><id>9414482</id><snippet>myList</snippet></ROW><ROW><id>9414482</id><snippet>for my $obj (@myList) {}</snippet></ROW><ROW><id>9414800</id><snippet>from urlparse import urljoin

def resource_url(page, resource):
  if not resource.startswith(page):
    # doesn't start with http://example.com
    resource = urljoin(page, resource)
  return resource
</snippet></ROW><ROW><id>9414997</id><snippet>from django.forms.formsets import INITIAL_FORM_COUNT
if formset.initial_form_count() &lt; formset.total_form_count():
    manform = formset.management_form
    prefixed_name = manform.add_prefix(INITIAL_FORM_COUNT)
    manform.data[prefixed_name] = formset.total_form_count()
</snippet></ROW><ROW><id>9415412</id><snippet>display</snippet></ROW><ROW><id>9415412</id><snippet>self.data</snippet></ROW><ROW><id>9415412</id><snippet>xxx</snippet></ROW><ROW><id>9415412</id><snippet>display</snippet></ROW><ROW><id>9415412</id><snippet>&gt;&gt;&gt; X.data = [3,4,9]
&gt;&gt;&gt; X.display()
X is  =&gt; [3, 4, 9]
</snippet></ROW><ROW><id>9415556</id><snippet>def get(self, *args, **kwargs):
    return self.get_query_set().get(*args, **kwargs)
</snippet></ROW><ROW><id>9415887</id><snippet>Pattern = Pattern.replace("\\",r"\\").replace("^",r"\^")
</snippet></ROW><ROW><id>9415970</id><snippet>%</snippet></ROW><ROW><id>9415970</id><snippet>In [3]: val = 1./3

In [4]: print('%.15f' % val)
0.333333333333333
</snippet></ROW><ROW><id>9415970</id><snippet>str.format()</snippet></ROW><ROW><id>9415970</id><snippet>In [8]: print(str.format('{0:.15f}', val))
Out[8]: '0.333333333333333'
</snippet></ROW><ROW><id>9416020</id><snippet>range</snippet></ROW><ROW><id>9416020</id><snippet>setdefault</snippet></ROW><ROW><id>9416020</id><snippet>super_dict = {}
for d in dicts:
    for k, v in d.iteritems():
        super_dict.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>9416020</id><snippet>defaultdict</snippet></ROW><ROW><id>9416020</id><snippet>setdefault</snippet></ROW><ROW><id>9416020</id><snippet>import collections
super_dict = collections.defaultdict(list)
for d in dicts:
    for k, v in d.iteritems():
        super_dict[k].append(v)
</snippet></ROW><ROW><id>9416020</id><snippet>set</snippet></ROW><ROW><id>9416020</id><snippet>import collections
super_dict = collections.defaultdict(set)
for d in dicts:
    for k, v in d.iteritmes():
        super_dict[k].add(v)
</snippet></ROW><ROW><id>9416131</id><snippet>extraAccessions=('MS:1000505',['value','unitName'])
for accession, fieldIdentifiers in extraAccessions:
    ...
</snippet></ROW><ROW><id>9416131</id><snippet>extraAccessions</snippet></ROW><ROW><id>9416131</id><snippet>'MS:1000505'</snippet></ROW><ROW><id>9416131</id><snippet>['value','unitName']</snippet></ROW><ROW><id>9416131</id><snippet>accession, fieldIdentifiers = extraAccessions
</snippet></ROW><ROW><id>9416131</id><snippet>accession</snippet></ROW><ROW><id>9416131</id><snippet>'MS:1000505'</snippet></ROW><ROW><id>9416131</id><snippet>fieldIdentifiers</snippet></ROW><ROW><id>9416131</id><snippet>['value','unitName']</snippet></ROW><ROW><id>9416656</id><snippet>fileinput</snippet></ROW><ROW><id>9416656</id><snippet>import fileinput

for line in fileinput.input("myfile.txt", inplace = 1):
    if line == "$menu_items['gojo_project']                    =&gt; array('http://www.gojo.net/community/plugin-inventory/ops-gojo/gojo', 'gojo',3),":
        line = '//' + line
    print line,
</snippet></ROW><ROW><id>9416888</id><snippet>str.replace</snippet></ROW><ROW><id>9416888</id><snippet>&gt;&gt;&gt; "abc".replace("b","44")
'a44c'
</snippet></ROW><ROW><id>9416888</id><snippet>qString.replace(indexNum+4,"-")</snippet></ROW><ROW><id>9416888</id><snippet>q = q + ...</snippet></ROW><ROW><id>9416888</id><snippet>pieces = []
for something in some_things:
    pieces.append(make_piece_of_string(something))
s = ''.join(pieces)
</snippet></ROW><ROW><id>9416888</id><snippet>import string</snippet></ROW><ROW><id>9416888</id><snippet>str.find</snippet></ROW><ROW><id>9416888</id><snippet>if result == -1</snippet></ROW><ROW><id>9416888</id><snippet>str.index</snippet></ROW><ROW><id>9416888</id><snippet>if x == True</snippet></ROW><ROW><id>9416888</id><snippet>if x</snippet></ROW><ROW><id>9416888</id><snippet>if j.islower()</snippet></ROW><ROW><id>9417088</id><snippet>__call__()</snippet></ROW><ROW><id>9417088</id><snippet>class MyDecorator(object):
    def __init__(self, argument):
        self.arg = argument

    def __call__(self, fn):
        @functools.wraps(fn)
        def decorated(*args, **kwargs):
            print "In my decorator before call, with arg %s" % self.arg
            fn(*args, **kwargs)
            print "In my decorator after call, with arg %s" % self.arg
        return decorated
</snippet></ROW><ROW><id>9417088</id><snippet>@MyDecorator("some other func!")
def some_other_function():
    print "in some other function!"
</snippet></ROW><ROW><id>9417088</id><snippet>MyDecorator</snippet></ROW><ROW><id>9417088</id><snippet>"some other func!"</snippet></ROW><ROW><id>9417088</id><snippet>__init__()</snippet></ROW><ROW><id>9417088</id><snippet>my_decorator</snippet></ROW><ROW><id>9417088</id><snippet>bare_func</snippet></ROW><ROW><id>9417088</id><snippet>my_decorator(bare_func)</snippet></ROW><ROW><id>9417088</id><snippet>MyDecorator.__call__()</snippet></ROW><ROW><id>9417088</id><snippet>some_other_function</snippet></ROW><ROW><id>9417577</id><snippet># regular class
class ClassOne(Base):
    __tablename__ = 'one'
    id = Column(Integer, primary_key=True)

class ClassTwo(Base):
    __tablename__ = 'two'
    id = Column(Integer, primary_key=True)

def map_to_alt_tb(cls, metadata, schemaname):
    m = class_mapper(cls)
    cls2 = type(
        "AltClass",
        (object, ),
        {}
    )
    table = m.local_table.tometadata(metadata, schemaname)
    mapper(cls2, table)
    return cls2

alt_cls = map_to_alt_db(ClassTwo, somemetadata, "alt_schema")
</snippet></ROW><ROW><id>9417577</id><snippet>map_to_alt_db()</snippet></ROW><ROW><id>9417577</id><snippet>ClassTwo</snippet></ROW><ROW><id>9417577</id><snippet>ClassTwo</snippet></ROW><ROW><id>9417798</id><snippet>scipy.ndimage.map_coordinates</snippet></ROW><ROW><id>9417798</id><snippet># rest as before
from scipy import ndimage
tic = time.time()
new_result = np.zeros(im.shape)
coords = np.array([yy,xx,np.zeros(im.shape[:2])])
for d in range(im.shape[2]):
    new_result[:,:,d] = ndimage.map_coordinates(im,coords,order=1)
    coords[2] += 1
toc = time.time()
print "interpolation time:",toc-tic
</snippet></ROW><ROW><id>9417798</id><snippet>tic = time.time()
new_result = np.zeros(im.shape)
coords = np.array([yy,xx])
for d in range(im.shape[2]):
    ndimage.map_coordinates(im[:,:,d],
                            coords,order=1,
                            prefilter=False,
                            output=new_result[:,:,d] )
toc = time.time()

print "interpolation time:",toc-tic
</snippet></ROW><ROW><id>9417798</id><snippet> original version: 0.463063955307
   better version: 0.204537153244
     best version: 0.121845006943
</snippet></ROW><ROW><id>9417968</id><snippet>scipy.spatial.distance.euclidean</snippet></ROW><ROW><id>9418276</id><snippet>&lt;input type=”hidden” name=”next” value=”"{% url
      django.contrib.comments.views.comments.comment_done %}" /&gt;
</snippet></ROW><ROW><id>9418276</id><snippet>{% url comments-comment-done %}</snippet></ROW><ROW><id>9418276</id><snippet>{% url django.contrib.comments.views.comments.comment_done %}</snippet></ROW><ROW><id>9418276</id><snippet>&lt;input type="hidden" name="next" value="{{ form.instance.content_object.get_absolute_url }}" /&gt;
</snippet></ROW><ROW><id>9418276</id><snippet>&lt;input type="hidden" name="next" value="{{ request.path }}" /&gt;
</snippet></ROW><ROW><id>9418276</id><snippet>&lt;input type="hidden" name="next" value="{{ request.META.HTTP_REFERER }}" /&gt;
</snippet></ROW><ROW><id>9418401</id><snippet># base.txt
somelib1
somelib2
</snippet></ROW><ROW><id>9418401</id><snippet># py26.txt
-r base.txt
importlib
</snippet></ROW><ROW><id>9418401</id><snippet># py27.txt
-r base.txt
</snippet></ROW><ROW><id>9418401</id><snippet># setup.py
from setuptools import setup
install_requires = ['somelib1', 'somelib2']

try:
    import importlib
except ImportError:
    install_requires.append('importlib')

setup(
    ...
    install_requires=install_requires,
    ...
)
</snippet></ROW><ROW><id>9419208</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>9419208</id><snippet>read()</snippet></ROW><ROW><id>9419208</id><snippet>zipfile</snippet></ROW><ROW><id>9419217</id><snippet>str</snippet></ROW><ROW><id>9419217</id><snippet>movecounter</snippet></ROW><ROW><id>9419217</id><snippet>input("This is your " + str(movecounter) + 
    " move, type the number you want to move north")
</snippet></ROW><ROW><id>9419217</id><snippet>input</snippet></ROW><ROW><id>9419217</id><snippet>str.format</snippet></ROW><ROW><id>9419217</id><snippet>input("This is your {0:d} move, type the number you want to move north".format(
    movecounter))
</snippet></ROW><ROW><id>9419217</id><snippet>%</snippet></ROW><ROW><id>9419217</id><snippet>str.format</snippet></ROW><ROW><id>9419217</id><snippet>%</snippet></ROW><ROW><id>9419233</id><snippet>import os, shutil

dir1 = r'/path/to/dir/1'
dir2 = r'/path/to/dir/2'
copy_dest = r'/path/to/copy/dirs/to'

dir1_folders = [dir for dir in os.listdir(dir1) if os.path.isdir(os.path.join(dir1, dir))]
dir2_folders = [dir for dir in os.listdir(dir2) if os.path.isdir(os.path.join(dir2, dir))]

for dir in dir1_folders:
    if dir in dir2_folders:
        shutil.copytree(os.path.join(dir1, dir), os.path.join(copy_dest, dir))
</snippet></ROW><ROW><id>9419450</id><snippet>ValueError: Cannot assign "[&lt;Location: somename&gt;]": "Event.location" must be a "Location" instance.
</snippet></ROW><ROW><id>9419450</id><snippet>[&lt;Location: somename&gt;]</snippet></ROW><ROW><id>9419450</id><snippet>l</snippet></ROW><ROW><id>9419450</id><snippet>l=Location.objects.filter(name=location)
</snippet></ROW><ROW><id>9419450</id><snippet>l = Location(name=location)
</snippet></ROW><ROW><id>9419450</id><snippet>l</snippet></ROW><ROW><id>9419450</id><snippet>    l=Location.objects.filter(name=location)
    if not l:
        l = Location(name=location)
        l.save()
    else:
        l = l[0]
</snippet></ROW><ROW><id>9419450</id><snippet>get()</snippet></ROW><ROW><id>9419450</id><snippet>filter()</snippet></ROW><ROW><id>9419450</id><snippet>try:
    l = Location.objects.get(name=location)
except Location.DoesNotExist:
    l = Location(name=location)
    l.save()
</snippet></ROW><ROW><id>9419450</id><snippet>get_or_create()</snippet></ROW><ROW><id>9419450</id><snippet>l, created = Location.objects.get_or_create(name=location)
</snippet></ROW><ROW><id>9419462</id><snippet>numpy.version.version</snippet></ROW><ROW><id>9419657</id><snippet>or</snippet></ROW><ROW><id>9419657</id><snippet>in</snippet></ROW><ROW><id>9419657</id><snippet>'d' or 'e' in a</snippet></ROW><ROW><id>9419657</id><snippet>'d' or ('e' in a)</snippet></ROW><ROW><id>9419657</id><snippet>or</snippet></ROW><ROW><id>9419657</id><snippet>'d'</snippet></ROW><ROW><id>9419657</id><snippet>('e' in a)</snippet></ROW><ROW><id>9419657</id><snippet>d</snippet></ROW><ROW><id>9419657</id><snippet>or</snippet></ROW><ROW><id>9419657</id><snippet>'d'</snippet></ROW><ROW><id>9419657</id><snippet>or</snippet></ROW><ROW><id>9419657</id><snippet>print any(c in a for c in 'da')</snippet></ROW><ROW><id>9419657</id><snippet>print any((c in a) for c in 'da')</snippet></ROW><ROW><id>9419657</id><snippet>'da'</snippet></ROW><ROW><id>9419657</id><snippet>a</snippet></ROW><ROW><id>9419657</id><snippet>&lt;generator object &lt;genexpr&gt; at 0x011E4300&gt;</snippet></ROW><ROW><id>9419657</id><snippet>[(c in a) for c in 'da']
</snippet></ROW><ROW><id>9419657</id><snippet>if '\\'or '^' or '.' in Pattern:</snippet></ROW><ROW><id>9419657</id><snippet>if ('\\' or '^') or ('.' in Pattern:)</snippet></ROW><ROW><id>9419657</id><snippet>'\\'</snippet></ROW><ROW><id>9419709</id><snippet>sorted()</snippet></ROW><ROW><id>9419709</id><snippet>&gt;&gt;&gt; a = sorted(list('hello'))
&gt;&gt;&gt; a
['e', 'h', 'l', 'l', 'o']
</snippet></ROW><ROW><id>9419709</id><snippet>list()</snippet></ROW><ROW><id>9419709</id><snippet>&gt;&gt;&gt; sorted('hello')
['e', 'h', 'l', 'l', 'o']
</snippet></ROW><ROW><id>9419709</id><snippet>basesalts</snippet></ROW><ROW><id>9419709</id><snippet>result = sorted(random.choice(basesalts))
</snippet></ROW><ROW><id>9419851</id><snippet>import cgi
import feedparser

d = feedparser.parse('http://rss.slashdot.org/Slashdot/slashdot')

# iterate through entries. If the type is not text/html, HTML clean it
for entry in d.entries:
    if entry.summary_detail.type != 'text/html':
        print cgi.escape(entry.summary)
else:
    print entry.summary
</snippet></ROW><ROW><id>9420024</id><snippet>import Gnuplot

g = Gnuplot.Gnuplot(debug=1)

g.plot(Gnuplot.File('immigration.dat', using="2:xtic(1) ti col, '' u 3 ti col, '' u 4 ti col, '' u 5 ti col"))
</snippet></ROW><ROW><id>9420466</id><snippet>C:</snippet></ROW><ROW><id>9420466</id><snippet>&gt;&gt;&gt; os.listdir(r'{0}'.format(input('directory:')))
directory:"C:\Users"
['All Users', 'Default', 'Default User', 'desktop.ini', 'Public', 'RanRag']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9420466</id><snippet>raw_input</snippet></ROW><ROW><id>9420466</id><snippet>&gt;&gt;&gt; os.listdir(r'{0}'.format(raw_input('directory:')))
directory:C:\Users
['All Users', 'Default', 'Default User', 'desktop.ini', 'Public', 'RanRag']
</snippet></ROW><ROW><id>9420466</id><snippet>python3</snippet></ROW><ROW><id>9420466</id><snippet>raw_input</snippet></ROW><ROW><id>9420466</id><snippet>input</snippet></ROW><ROW><id>9420466</id><snippet>&gt;&gt;&gt; os.listdir(r'{0}'.format(input('directory:')))
directory:C:\Users
['All Users', 'Default', 'Default User', 'desktop.ini', 'Public', 'RanRag']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9420513</id><snippet>address</snippet></ROW><ROW><id>9420513</id><snippet>&lt;p class="secondary"&gt;
              Some address and street
              &lt;br /&gt;
              City, State, ZIP
              (some) phone-number
             &lt;/p&gt;
</snippet></ROW><ROW><id>9420513</id><snippet>address.find("br").replaceWith(",")
addressComponents = address.text.split(",")
</snippet></ROW><ROW><id>9420513</id><snippet>addressComponents</snippet></ROW><ROW><id>9420513</id><snippet>addressSplit = addressComponents[3].split("\n")
print addressSplit[0] # Zip code
print addressSplit[1].strip() # Phone number
</snippet></ROW><ROW><id>9420600</id><snippet>lib2to3</snippet></ROW><ROW><id>9420600</id><snippet>lib2to3</snippet></ROW><ROW><id>9420612</id><snippet>FileInputStream</snippet></ROW><ROW><id>9420612</id><snippet>Cipher</snippet></ROW><ROW><id>9421025</id><snippet>str.replace</snippet></ROW><ROW><id>9421025</id><snippet>string = 'Hello %*&amp; World'
repl = ['%','*','&amp;'], ['pct','star','and']
for a, b in zip(*repl):
    string = string.replace(a, b)
</snippet></ROW><ROW><id>9421025</id><snippet>repl = {'*': 'star', '%': 'pct', '&amp;': 'and'}
for a, b in repl.items():
    string = string.replace(a, b)
</snippet></ROW><ROW><id>9421025</id><snippet>str.translate</snippet></ROW><ROW><id>9421025</id><snippet>repl = {'*': 'star', '%': 'pct', '&amp;': 'and'}
repl = str.maketrans(repl)
string = string.translate(repl)
</snippet></ROW><ROW><id>9421120</id><snippet>range(a, b)</snippet></ROW><ROW><id>9421120</id><snippet>a</snippet></ROW><ROW><id>9421120</id><snippet>b-1</snippet></ROW><ROW><id>9421120</id><snippet>b</snippet></ROW><ROW><id>9421120</id><snippet>a:b</snippet></ROW><ROW><id>9421120</id><snippet>a</snippet></ROW><ROW><id>9421120</id><snippet>b</snippet></ROW><ROW><id>9421120</id><snippet>b-a</snippet></ROW><ROW><id>9421120</id><snippet>a-b+1</snippet></ROW><ROW><id>9421120</id><snippet>class FakeArray(object):
    def __getitem__(self, idx):
        return "You can't change the original FakeArray through me"
    def __setitem__(self, idx, val):
        print("We could set elements %r to %r here" % (idx, val))
</snippet></ROW><ROW><id>9421120</id><snippet>&gt;&gt;&gt; A = FakeArray()
&gt;&gt;&gt; A[1:2]
"You can't change the original FakeArray through me"
&gt;&gt;&gt; A[1:2] = 'ham'
We could set elements slice(1, 2, None) to 'ham'
</snippet></ROW><ROW><id>9421120</id><snippet>A[1:2]</snippet></ROW><ROW><id>9421120</id><snippet>A.__getitem__(slice(1, 2, None))</snippet></ROW><ROW><id>9421120</id><snippet>A[1:2] = 'ham'</snippet></ROW><ROW><id>9421120</id><snippet>A.__setitem__(slice(1, 2, None), 'ham')</snippet></ROW><ROW><id>9421120</id><snippet>slice</snippet></ROW><ROW><id>9421120</id><snippet>tuple</snippet></ROW><ROW><id>9421515</id><snippet>&lt;Key&gt;</snippet></ROW><ROW><id>9421515</id><snippet>import Tkinter as tk

class MyApp(object):
    def __init__(self, master):
        self.text = tk.Text(master)
        self.text.bind('&lt;Key&gt;', self.callback)
        self.text.pack()
        self.text.focus()

    def callback(self, event):
        print('{k!r}'.format(k = event.char))

root = tk.Tk()
app = MyApp(root)
root.mainloop()
</snippet></ROW><ROW><id>9421515</id><snippet>tk.Text</snippet></ROW><ROW><id>9421515</id><snippet>tk.Entry</snippet></ROW><ROW><id>9421571</id><snippet>process_request</snippet></ROW><ROW><id>9421571</id><snippet>request.META.get('SERVER_NAME')</snippet></ROW><ROW><id>9421580</id><snippet>ewma(df, span=21)</snippet></ROW><ROW><id>9421580</id><snippet>In [23]: smoothed = DataFrame(ewma(df, span = 21).values, index=df.index, columns = ['smooth1','smooth2'])
In [24]: smoothed.head()
Out[24]: 
    smooth1   smooth2
0  0.218350  0.877693
1  0.400214  0.813499
2  0.308564  0.739426
3  0.433341  0.641891
4  0.525260  0.620541
</snippet></ROW><ROW><id>9421580</id><snippet>smoothed = ewma(df, span=21)
smoothed.columns = ['smooth1', 'smooth2']
</snippet></ROW><ROW><id>9421636</id><snippet>w.postscript()</snippet></ROW><ROW><id>9421636</id><snippet>mainloop()</snippet></ROW><ROW><id>9421636</id><snippet>w.postscript()</snippet></ROW><ROW><id>9422113</id><snippet>def profile_view(request):
    if request.user.get_profile().type == 'foo':
        template = 'path/to/foo_profile.html'
    elif request.user.get_profile().type == 'bar':
        template = 'path/to/bar_profile.html'
    else:
        template = 'path/to/generic_profile.html' # if you want a default

    return render_to_response(template, {'data': 'data'}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9422113</id><snippet>class MyView(View):
    def get_template_names(self):
        if self.request.user.get_profile().type == 'foo':
            return ['path/to/foo_profile.html']
        elif self.request.user.get_profile().type == 'bar':
            return ['path/to/bar_profile.html']
        else:
            return ['path/to/generic_profile.html']
</snippet></ROW><ROW><id>9422113</id><snippet> template = 'path/to/%s_profile.html' % request.user.get_profile().type
</snippet></ROW><ROW><id>9422160</id><snippet>task.seq_file.read()
</snippet></ROW><ROW><id>9422160</id><snippet>if not os.path.isfile(task.seq_file.path):
    ....
</snippet></ROW><ROW><id>9422166</id><snippet>moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]
</snippet></ROW><ROW><id>9422166</id><snippet>grid_size = 11
x = grid_size // 2
y = grid_size // 2
</snippet></ROW><ROW><id>9422166</id><snippet># Displacement:
dx, dy = random.choice(moves)

# Update position:
x += dx
y += dy
</snippet></ROW><ROW><id>9422166</id><snippet>try:
    # Update counter.
    times[x][y] += 1
except IndexError:
    # Exit the simulation loop.
    break
</snippet></ROW><ROW><id>9422166</id><snippet>moves = [(0, 1, 'up'), (1, 0, 'right'), (0, -1, 'down'), (-1, 0, 'left')]
</snippet></ROW><ROW><id>9422166</id><snippet>dx, dy, direction = random.choice(moves)
print('He moved', direction)
</snippet></ROW><ROW><id>9422166</id><snippet>while True:
    ...
</snippet></ROW><ROW><id>9422166</id><snippet>grid_size = 11
times = [0] * grid_size
    for i in range(grid_size):
        times[i] = [0] * grid_size
</snippet></ROW><ROW><id>9422276</id><snippet>ValueError: mutually exclusive arguments must be optional</snippet></ROW><ROW><id>9422276</id><snippet>integer</snippet></ROW><ROW><id>9422276</id><snippet>interactive</snippet></ROW><ROW><id>9422276</id><snippet>integer</snippet></ROW><ROW><id>9422276</id><snippet>mutually_exclusive_group</snippet></ROW><ROW><id>9422276</id><snippet>interactive</snippet></ROW><ROW><id>9422276</id><snippet>integer</snippet></ROW><ROW><id>9422276</id><snippet>#!/usr/bin/env python

import argparse

def get_parser():
    parser = argparse.ArgumentParser(prog='tempus.py')
    ex_group = parser.add_mutually_exclusive_group(required=True)
    parser.add_argument('--mode', type=str, choices=['html', 'xml', 'text', 'console'], required=True)
    parser.add_argument('-v', '--verbose', action='store_true')
    ex_group.add_argument('--interactive', action='store_true')
    ex_group.add_argument('--integer', metavar='I', type=float, help='percentage to use')
    return parser

def main():
    aparser = get_parser()
    args = aparser.parse_args()

    print('mode: %s' % args.mode)
    print('integer: %s' % args.integer)
    print('interactive: %s' % args.interactive)
    print('verbose: %s' % args.verbose)

# Only used in Python 2.x
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9422276</id><snippet>+&gt; python .\tempus.py
usage: tempus.py [-h] --mode {html,xml,text,console} [-v]
                 (--interactive | --integer I)
tempus.py: error: argument --mode is required

+&gt; python .\tempus.py --mode html
usage: tempus.py [-h] --mode {html,xml,text,console} [-v]
                 (--interactive | --integer I)
tempus.py: error: one of the arguments --interactive --integer is required

+&gt; python .\tempus.py --mode html --integer
usage: tempus.py [-h] --mode {html,xml,text,console} [-v]
                 (--interactive | --integer I)
tempus.py: error: argument --integer: expected one argument

+&gt; python .\tempus.py --mode html --integer 12
mode: html
integer: 12.0
interactive: False
verbose: False
</snippet></ROW><ROW><id>9422332</id><snippet>import logging

class LoggerWriter:
    def __init__(self, logger, level):
        self.logger = logger
        self.level = level

    def write(self, message):
        if message != '\n':
            self.logger.log(self.level, message)

def main():
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger("demo")
    info_fp = LoggerWriter(logger, logging.INFO)
    debug_fp = LoggerWriter(logger, logging.DEBUG)
    print &gt;&gt; info_fp, "An INFO message"
    print &gt;&gt; debug_fp, "A DEBUG message"

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9422332</id><snippet>INFO:demo:An INFO message
DEBUG:demo:An DEBUG message
</snippet></ROW><ROW><id>9422552</id><snippet>urllib2</snippet></ROW><ROW><id>9422552</id><snippet>urllib</snippet></ROW><ROW><id>9422552</id><snippet>curl --http1.0 -I "http://www.crutchfield.com/S-pqvJFyfA8KG/p_15410415/Dynamat-10415-Xtreme-Speaker-Kit.html"
</snippet></ROW><ROW><id>9422552</id><snippet>curl: (52) Empty reply from server</snippet></ROW><ROW><id>9422552</id><snippet>urllib</snippet></ROW><ROW><id>9422555</id><snippet>class api(tornado.web.RequestHandler):
    def initialize(self, *args, **kwargs):
        self.remote_ip = self.request.headers.get('X-Forwarded-For', self.request.headers.get('X-Real-Ip', self.request.remote_ip))
        self.using_ssl = (self.request.headers.get('X-Scheme', 'http') == 'https')
    def get(self):
        self.write("Hello " + ("s" if self.using_ssl else "") + " " + self.remote_ip)
</snippet></ROW><ROW><id>9422804</id><snippet>files = {f: np.loadtxt(f) for f in glob.glob("*.txt")}
</snippet></ROW><ROW><id>9422835</id><snippet>prune</snippet></ROW><ROW><id>9422835</id><snippet>import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import numpy as np
xx = np.arange(0,5, .5)
yy = np.random.random( len(xx) )
plt.plot(xx,yy)
plt.gca().xaxis.set_major_locator(MaxNLocator(prune='lower'))
plt.show()
</snippet></ROW><ROW><id>9422917</id><snippet>@route('/locations/:lat/:lng', method='GET')
def get_location(lat,lng):
    response.content_type = 'application/json'
    objdb = db.locations.find({'coordinate2d': {'$near': [lat,lng]}}, {'coordinate2d':bool(1)}).skip(0).limit(3)
    entries = [entry for entry in objdb]
    return MongoEncoder().encode(entries)
</snippet></ROW><ROW><id>9422917</id><snippet>[
    {
        "_id": "4f4201bb7e720d1dca000005",
        "coordinate2d": [
            33.02032100000006,
            -117.19483074631853
        ]
    },
    {
        "_id": "4f4201587e720d1dca000002",
        "coordinate2d": [
            33.158092999999994,
            -117.350594
        ]
    },
    {
        "_id": "4f42018b7e720d1dca000003",
        "coordinate2d": [
            33.195870000000006,
            -117.379483
        ]
    }
]
</snippet></ROW><ROW><id>9422950</id><snippet>collections.Counter</snippet></ROW><ROW><id>9422950</id><snippet>base_seq = "atcgtgagt"
codons = [base_seq[i:i + 3] for i in range(0, len(base_seq), 3)]
amino_acid_counts = collections.Counter(aaDict[c] for c in codons)
</snippet></ROW><ROW><id>9422950</id><snippet>(aaDict[c] for c in codons)</snippet></ROW><ROW><id>9422950</id><snippet>amino_acid_counts = dict.fromkeys(aaDict.values(), 0)
for c in codons:
    amino_acid_counts[aaDict[c]] += 1
</snippet></ROW><ROW><id>9422999</id><snippet>#imports elided

class IFoo(Interface):
    bar = schema.Object(schema=Interface)

class IBar(Interface):
    foo = schema.Object(schema=IFoo)

IFoo['bar'].schema = IBar
</snippet></ROW><ROW><id>9423450</id><snippet>id = glGenTextures(1)
glPixelStorei(GL_UNPACK_ALIGNMENT,1)
glBindTexture(GL_TEXTURE_2D, id)
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img.size[0], img.size[1], 0, GL_RGB, GL_UNSIGNED_BYTE, img_data)
</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423514</id><snippet>exec</snippet></ROW><ROW><id>9423514</id><snippet>return</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423514</id><snippet>def foo(val):    # circuitously returns value passed in
    locals["b"] = val
    return b
    exec ""
</snippet></ROW><ROW><id>9423514</id><snippet>def foo(a):   # can't define this function
    def bar():
       return a
    return bar
    exec ""
</snippet></ROW><ROW><id>9423514</id><snippet>locals()</snippet></ROW><ROW><id>9423550</id><snippet>self.left/right.</snippet></ROW><ROW><id>9423550</id><snippet>in</snippet></ROW><ROW><id>9423550</id><snippet>_order_list()</snippet></ROW><ROW><id>9423550</id><snippet>self.left/right.</snippet></ROW><ROW><id>9423550</id><snippet>pre</snippet></ROW><ROW><id>9423550</id><snippet>_order_list()</snippet></ROW><ROW><id>9423550</id><snippet>class Tree(object):
    ...
    def in_order(self):
        if self.left is not None:
            for value in self.left.in_order():
                yield value
        yield self.value  #  &lt;-- yielding the value of the node, not the node itself
        if self.right is not None:
            for value in self.right.in_order():
                yield value

...

tree = Tree(...)

in_order_values = list(tree.in_order())
</snippet></ROW><ROW><id>9423550</id><snippet>for value in tree.in_order():
    ...
</snippet></ROW><ROW><id>9423550</id><snippet>self.left/right is None</snippet></ROW><ROW><id>9423550</id><snippet>self.left/right.in_order()</snippet></ROW><ROW><id>9423550</id><snippet>in_order()</snippet></ROW><ROW><id>9423550</id><snippet>class Tree(object):
    ...
    def in_order(self):
        if self.left is not None:
            for node in self.left.in_order():
                yield node
        yield self  #  &lt;-- yielding the node itself
        if self.right is not None:
            for node in self.right.in_order():
                yield node
</snippet></ROW><ROW><id>9423550</id><snippet>for node in tree.in_order():
    do_something_with(node.value)
</snippet></ROW><ROW><id>9423550</id><snippet>for node in tree.in_order():
    whatever(node.some_other_attribute)
</snippet></ROW><ROW><id>9423888</id><snippet>COPY</snippet></ROW><ROW><id>9423888</id><snippet>\copy</snippet></ROW><ROW><id>9423888</id><snippet>psql</snippet></ROW><ROW><id>9423888</id><snippet>COPY tbl FROM '/absolute/path/to/file' FORMAT csv;
</snippet></ROW><ROW><id>9423888</id><snippet>SET LOCAL temp_buffers='128MB';
</snippet></ROW><ROW><id>9423888</id><snippet>select pg_size_pretty(pg_total_relation_size('tmp_x'));
</snippet></ROW><ROW><id>9423888</id><snippet>CREATE TEMP TABLE tmp_x (id int, val_a int, val_b text);
</snippet></ROW><ROW><id>9423888</id><snippet>CREATE TEMP TABLE tmp_x AS SELECT * FROM tbl LIMIT 0;
</snippet></ROW><ROW><id>9423888</id><snippet>COPY tmp_x FROM '/absolute/path/to/file' FORMAT csv;
</snippet></ROW><ROW><id>9423888</id><snippet>ANALYZE</snippet></ROW><ROW><id>9423888</id><snippet>ANALYZE tmp_x;
</snippet></ROW><ROW><id>9423888</id><snippet>id</snippet></ROW><ROW><id>9423888</id><snippet>UPDATE tbl
SET    col_a = tmp_x.col_a
USING  tmp_x
WHERE  tbl.id = tmp_x.id;
</snippet></ROW><ROW><id>9423888</id><snippet>DROP TABLE tmp_x;
</snippet></ROW><ROW><id>9424010</id><snippet>print</snippet></ROW><ROW><id>9424010</id><snippet>range()</snippet></ROW><ROW><id>9424035</id><snippet>scipy</snippet></ROW><ROW><id>9424035</id><snippet>R</snippet></ROW><ROW><id>9424035</id><snippet>V</snippet></ROW><ROW><id>9424035</id><snippet>from scipy.interpolate import griddata
import numpy as np

# Create some test data, 3D gaussian, 200 points
dx, pts = 2, 100j

N = 500
R = np.random.random((N,3))*2*dx - dx
V = np.exp(-( (R**2).sum(axis=1)) )

# Create the grid to interpolate on
X,Y,Z = np.mgrid[-dx:dx:pts, -dx:dx:pts, -dx:dx:pts]

# Interpolate the data
F = griddata(R, V, (X,Y,Z))
</snippet></ROW><ROW><id>9424035</id><snippet>from mayavi.mlab import *
contour3d(F,contours=8,opacity=.2 )
</snippet></ROW><ROW><id>9424205</id><snippet>Child.another_method()</snippet></ROW><ROW><id>9424205</id><snippet>__dict__</snippet></ROW><ROW><id>9424205</id><snippet>self</snippet></ROW><ROW><id>9424205</id><snippet>Child</snippet></ROW><ROW><id>9424205</id><snippet>Base</snippet></ROW><ROW><id>9424205</id><snippet>print_methods()</snippet></ROW><ROW><id>9424205</id><snippet>print_methods</snippet></ROW><ROW><id>9424205</id><snippet>dir()</snippet></ROW><ROW><id>9424205</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>9424205</id><snippet>callable()</snippet></ROW><ROW><id>9424504</id><snippet>Test2.py</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>wanted_value</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>__init__</snippet></ROW><ROW><id>9424504</id><snippet>Dx</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>Dx.__init__</snippet></ROW><ROW><id>9424504</id><snippet>self</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>__init__</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>Dx.__init__</snippet></ROW><ROW><id>9424504</id><snippet>Dx</snippet></ROW><ROW><id>9424504</id><snippet>def __init__</snippet></ROW><ROW><id>9424504</id><snippet>D.__init__ = __init__</snippet></ROW><ROW><id>9424504</id><snippet>class Foo(object):
    def __init__(self, apple='orange'):
        self.apple = apple

f = Foo()
print f.apple     # orange

Foo.__init__.im_func.func_defaults = ('octopus',)
f = Foo()
print f.apple     # octopus
</snippet></ROW><ROW><id>9424504</id><snippet>D</snippet></ROW><ROW><id>9424504</id><snippet>B</snippet></ROW><ROW><id>9424504</id><snippet>def specialB():
    # save original value of __init__ or func_defaults
    try:
        # hack for D goes here
        b = B()
    finally:
        # restore original value of __init__ or func_defaults
    return b
</snippet></ROW><ROW><id>9424748</id><snippet>__repr__</snippet></ROW><ROW><id>9424748</id><snippet>class Test:
    def __repr__(self):
        return "I am a Test"

&gt;&gt;&gt; a = Test()
&gt;&gt;&gt; a
I am a Test
</snippet></ROW><ROW><id>9424748</id><snippet>__repr__</snippet></ROW><ROW><id>9424952</id><snippet>width(:|=)"?\w{3}
</snippet></ROW><ROW><id>9425039</id><snippet>from PyQt4 import QtGui, QtCore
from PyQt4.QtCore import pyqtSignal
import os,sys


class Main(QtGui.QWidget):

    def __init__(self, parent=None):
        super(Main, self).__init__(parent)

        layout = QtGui.QVBoxLayout(self) # layout of main widget

        button =  HoverButton(self) 
        button.setIconSize(QtCore.QSize(200,200))

        layout.addWidget(button) # set your button to the widgets layout
                                 # this will size the button nicely


class HoverButton(QtGui.QToolButton):

    def __init__(self, parent=None):
        super(HoverButton, self).__init__(parent)
        self.setMouseTracking(True)

    def enterEvent(self,event):
        print("Enter")
        self.setStyleSheet("background-color:#45b545;")

    def leaveEvent(self,event):
        self.setStyleSheet("background-color:yellow;")
        print("Leave")

app = QtGui.QApplication(sys.argv)
main = Main()
main.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>9425039</id><snippet>QLayout</snippet></ROW><ROW><id>9426054</id><snippet>exit(0)</snippet></ROW><ROW><id>9426054</id><snippet>exit(1)</snippet></ROW><ROW><id>9426109</id><snippet>&gt;</snippet></ROW><ROW><id>9426109</id><snippet>&lt;</snippet></ROW><ROW><id>9426109</id><snippet>import re
s = '&lt;td style="width:40px;"&gt;705214&lt;/td&gt;'
m = re.search(r'&gt;(\d{6})&lt;', s)
l = m.groups()[0]
</snippet></ROW><ROW><id>9426109</id><snippet>(</snippet></ROW><ROW><id>9426109</id><snippet>)</snippet></ROW><ROW><id>9426127</id><snippet>if pdForm.is_valid():
    cleanform = pdForm.save(commit = False).
    cleanform.resource = rd
    cleanform.save()
</snippet></ROW><ROW><id>9426643</id><snippet>(x,y)</snippet></ROW><ROW><id>9426643</id><snippet>y/x</snippet></ROW><ROW><id>9426643</id><snippet>h/w</snippet></ROW><ROW><id>9426643</id><snippet>(0,0)</snippet></ROW><ROW><id>9426643</id><snippet>y/x &gt; h/w</snippet></ROW><ROW><id>9426643</id><snippet>(0.5*h*x/y,0.5*h)</snippet></ROW><ROW><id>9426643</id><snippet>y/x &lt; h/w</snippet></ROW><ROW><id>9426643</id><snippet>(0.5*w,0.5*w*y/x)</snippet></ROW><ROW><id>9426643</id><snippet>y*w</snippet></ROW><ROW><id>9426643</id><snippet>x*h</snippet></ROW><ROW><id>9426643</id><snippet>x</snippet></ROW><ROW><id>9426643</id><snippet>y</snippet></ROW><ROW><id>9426643</id><snippet>def intersect_perimeter(x, y, w, h):
    if abs(y*w) &gt; abs(x*h):
        return (0.5*h*x/abs(y), 0.5*h*sign(y))
    else:
        return (0.5*w*sign(x), 0.5*w*y/abs(x))
</snippet></ROW><ROW><id>9426643</id><snippet>x</snippet></ROW><ROW><id>9426643</id><snippet>y</snippet></ROW><ROW><id>9426643</id><snippet>w</snippet></ROW><ROW><id>9426643</id><snippet>(0,0)</snippet></ROW><ROW><id>9426777</id><snippet>In [2]: words = ['word1', 'word2', 'word3', 'word4', 'word5', 'word6', 'word7']

In [3]: phrase1 = 'bla bla word1 bla word2 bla word7'

In [4]: phrase2 = 'bla bla word1 bla word2 bla word7 word6, word4 word3'

In [5]: def match(phrase):
   ...:     n_matches = 0
   ...:     for w in words:
   ...:         if w in phrase:
   ...:             n_matches += 1
   ...:     return n_matches == 6
   ...: 

In [6]: match(phrase1)
Out[6]: False

In [7]: match(phrase2)
Out[7]: True
</snippet></ROW><ROW><id>9426777</id><snippet>In [8]: phrase3 = 'bla bla word1 bla word2 bla word7 word6, word4 word3failed'

In [9]: match(phrase3)
Out[9]: True
</snippet></ROW><ROW><id>9426777</id><snippet>In [22]: import re
In [25]: tokenize_words = re.compile(r'\w+')
In [30]: def match(phrase):
   ....:     n_matches = 0
   ....:     phrase_words = tokenize_words.findall(phrase)
   ....:     for w in words:
   ....:         if w in phrase_words:
   ....:             n_matches += 1
   ....:     return n_matches == 6
   ....: 

In [31]: match(phrase2)
Out[31]: True

In [32]: match(phrase3)
Out[32]: False

In [33]: match(phrase1)
Out[33]: False
</snippet></ROW><ROW><id>9426887</id><snippet>&gt;&gt;&gt; words = ['the', 'counter', 'starts', 'the', 'starts', 'for']
&gt;&gt;&gt; uniq = set()
&gt;&gt;&gt; result = []
&gt;&gt;&gt; for i, word in enumerate(words, 1):
        uniq.add(word)
        result.append((i, len(uniq)))

&gt;&gt;&gt; result
[(1, 1), (2, 2), (3, 3), (4, 3), (5, 3), (6, 4)]
</snippet></ROW><ROW><id>9427043</id><snippet>from __future__ import with_statement # Only required for Python 2.5
with open(destination, 'w') as dest:
   with open(origin) as orig:
        dest.write(orig.read())
</snippet></ROW><ROW><id>9427195</id><snippet>sys.path</snippet></ROW><ROW><id>9427195</id><snippet>os.environ["PATH"]</snippet></ROW><ROW><id>9427195</id><snippet>import os, sys
sys.path.insert(0, os.path.abspath(".."))
import aa
</snippet></ROW><ROW><id>9427195</id><snippet>aa</snippet></ROW><ROW><id>9427195</id><snippet>aa.myfunc()</snippet></ROW><ROW><id>9427216</id><snippet>[dict(t) for t in set([tuple(d.items()) for d in l])]
</snippet></ROW><ROW><id>9427216</id><snippet>set</snippet></ROW><ROW><id>9427216</id><snippet>dict</snippet></ROW><ROW><id>9427216</id><snippet>l</snippet></ROW><ROW><id>9427216</id><snippet>d</snippet></ROW><ROW><id>9427216</id><snippet>t</snippet></ROW><ROW><id>9427216</id><snippet>set</snippet></ROW><ROW><id>9427216</id><snippet>l = [{'a': 123, 'b': 1234},
        {'a': 3222, 'b': 1234},
        {'a': 123, 'b': 1234}]

seen = set()
new_l = []
for d in l:
    t = tuple(d.items())
    if t not in seen:
        seen.add(t)
        new_l.append(d)

print new_l
</snippet></ROW><ROW><id>9427216</id><snippet>[{'a': 123, 'b': 1234}, {'a': 3222, 'b': 1234}]
</snippet></ROW><ROW><id>9427216</id><snippet>d.items()</snippet></ROW><ROW><id>9427560</id><snippet>ctypes.c_char_p( liba.say_hi() )
</snippet></ROW><ROW><id>9427621</id><snippet>.qsize()</snippet></ROW><ROW><id>9427621</id><snippet>page_queue.qsize() &gt; 0</snippet></ROW><ROW><id>9427621</id><snippet>while True: .. page_queue.get() ..</snippet></ROW><ROW><id>9427621</id><snippet>queue.task_done()</snippet></ROW><ROW><id>9427621</id><snippet>queue.join()</snippet></ROW><ROW><id>9427621</id><snippet>.run()</snippet></ROW><ROW><id>9427621</id><snippet>.activeCount()</snippet></ROW><ROW><id>9427621</id><snippet>n</snippet></ROW><ROW><id>9427621</id><snippet>n</snippet></ROW><ROW><id>9427621</id><snippet>multiprocessing</snippet></ROW><ROW><id>9428255</id><snippet>&gt;&gt;&gt; [x for x in listTest if x.split('_')[1] not in dico]
['S02_ahah']
</snippet></ROW><ROW><id>9428255</id><snippet>filter()</snippet></ROW><ROW><id>9428255</id><snippet>&gt;&gt;&gt; dico = [ 'test', 'blabla' ]
&gt;&gt;&gt; listTest = [ 'S01_test', 'S02_ahah', 'S03_blabla' ]
&gt;&gt;&gt; filter(lambda x: x.split('_')[1] not in dico, listTest)
['S02_ahah']
</snippet></ROW><ROW><id>9428255</id><snippet>python-3.x</snippet></ROW><ROW><id>9428255</id><snippet>filter()</snippet></ROW><ROW><id>9428255</id><snippet>list()</snippet></ROW><ROW><id>9428255</id><snippet>&gt;&gt;&gt; f = filter(lambda x: x.split('_')[1] not in dico, listTest)
&gt;&gt;&gt; list(f)
['S02_ahah']
</snippet></ROW><ROW><id>9428255</id><snippet>filter()</snippet></ROW><ROW><id>9428255</id><snippet>lambda</snippet></ROW><ROW><id>9428273</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9428273</id><snippet>os.popen</snippet></ROW><ROW><id>9428273</id><snippet>shell=True</snippet></ROW><ROW><id>9428273</id><snippet>stdout</snippet></ROW><ROW><id>9428273</id><snippet>stderr</snippet></ROW><ROW><id>9428273</id><snippet>p = subprocess.Popen(command, shell=True,
                     stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
output = p.communicate()[0]
</snippet></ROW><ROW><id>9428273</id><snippet>command</snippet></ROW><ROW><id>9428464</id><snippet>for usersocialauth in request.user.usersocialauth_set.all():
    print usersocialauth.provider
</snippet></ROW><ROW><id>9428464</id><snippet>request.user.usersocialauth_set.values_list('provider')
</snippet></ROW><ROW><id>9428475</id><snippet>__contains__</snippet></ROW><ROW><id>9428475</id><snippet>object.__contains__(self, item)</snippet></ROW><ROW><id>9428475</id><snippet>__contains__()</snippet></ROW><ROW><id>9428475</id><snippet>__iter__()</snippet></ROW><ROW><id>9428475</id><snippet>__getitem__()</snippet></ROW><ROW><id>9428475</id><snippet>&gt;&gt;&gt; class Bar:
...     def __init__(self, iterable):
...         self.list = list(iterable)
...     def __contains__(self, item):
...         return item in self.list
&gt;&gt;&gt;     
&gt;&gt;&gt; b = Bar([1,2,3])
&gt;&gt;&gt; b.list
[1, 2, 3]
&gt;&gt;&gt; 4 in b
False
&gt;&gt;&gt; 2 in b
True
</snippet></ROW><ROW><id>9429547</id><snippet>re.search()</snippet></ROW><ROW><id>9429547</id><snippet>re.findall()</snippet></ROW><ROW><id>9429670</id><snippet>from my_standard_package import *

(MY_DSL_FOO_FUNCTION, params, (ANOTHER_DSL_FUNCTION, ), expression_in_python, more_expressions_in_python)
</snippet></ROW><ROW><id>9429670</id><snippet>( MY_DSL_FOO_FUNCTION(params), ANOTHER_DSL_FUNCTION(), expression_in_python, more_expressions_in_python )
</snippet></ROW><ROW><id>9429670</id><snippet>from functools import partial
( partial(MY_DSL_FOO_FUNCTION, params), ANOTHER_DSL_FUNCTION, lambda: expression_in_python, lambda: more_expressions_in_python )
</snippet></ROW><ROW><id>9429831</id><snippet>chcp 65001</snippet></ROW><ROW><id>9429963</id><snippet>nm libx.so</snippet></ROW><ROW><id>9430904</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)

a = [1,2,3]
b = [4,2,9]

line = ax.plot(a,b)

def onclick(event):
    print "clicked"
    a = [7,8,9]
    b = [1,9,20]
    fig2 = plt.figure()
    ax_single = fig2.add_subplot(111)
    line2 = ax_single.plot(a,b)
    fig2.show()

cid = fig.canvas.mpl_connect('button_press_event',onclick)
plt.show()
</snippet></ROW><ROW><id>9431080</id><snippet>pixmapItem.pos()</snippet></ROW><ROW><id>9431080</id><snippet>pixmapItem.x()</snippet></ROW><ROW><id>9431080</id><snippet>pixmapItem.y()</snippet></ROW><ROW><id>9431080</id><snippet>QGraphicsPixmapItem</snippet></ROW><ROW><id>9431080</id><snippet>QGraphicsItem.ItemSendsGeometryChanges</snippet></ROW><ROW><id>9431080</id><snippet>itemChange</snippet></ROW><ROW><id>9431080</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
from PyQt4 import QtCore, QtGui


class MovablePixmapItem(QtGui.QGraphicsPixmapItem):
    def __init__(self, pixmap, *args, **kwargs):
        QtGui.QGraphicsPixmapItem.__init__(self, pixmap, *args, **kwargs)
        self.setFlags(QtGui.QGraphicsItem.ItemIsMovable |
                      QtGui.QGraphicsItem.ItemSendsGeometryChanges)

    def itemChange(self, change, value):
        if change == QtGui.QGraphicsItem.ItemPositionHasChanged:
            print value.toPointF()
            # do other work, or emit signal
        return QtGui.QGraphicsPixmapItem.itemChange(self, change, value)


class MainWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.pixmapItem = MovablePixmapItem(QtGui.QPixmap('image.png'))
        self.scene = QtGui.QGraphicsScene()
        self.scene.addItem(self.pixmapItem)
        self.view = QtGui.QGraphicsView(self.scene)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.view)
        self.setLayout(layout)

    def do_test(self):
        pass


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    widget = MainWidget()
    widget.resize(640, 480)
    widget.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9431345</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>9431345</id><snippet>eval</snippet></ROW><ROW><id>9431416</id><snippet>view = A[:,(1,2)]</snippet></ROW><ROW><id>9431416</id><snippet>(1,2)</snippet></ROW><ROW><id>9431416</id><snippet>obj</snippet></ROW><ROW><id>9431416</id><snippet>(slice(None), (1,2))</snippet></ROW><ROW><id>9431416</id><snippet>A[(slice(None), (1,2))]</snippet></ROW><ROW><id>9431416</id><snippet>A[:,(1,2)]</snippet></ROW><ROW><id>9431416</id><snippet>__getitem__</snippet></ROW><ROW><id>9431416</id><snippet>__setitem__</snippet></ROW><ROW><id>9431420</id><snippet>import networkx as nx
G=nx.Graph()
G.add_nodes_from([1,2,3,4])
G.add_edge(1,2)
G.add_edge(3,4)
try:
    n=nx.shortest_path_length(G,1,4)
    print n
except nx.NetworkXNoPath:
    print 'No path'
</snippet></ROW><ROW><id>9431736</id><snippet>c_char_p("a")</snippet></ROW><ROW><id>9431736</id><snippet>create</snippet></ROW><ROW><id>9431736</id><snippet>create</snippet></ROW><ROW><id>9431736</id><snippet>create</snippet></ROW><ROW><id>9431736</id><snippet>use</snippet></ROW><ROW><id>9431736</id><snippet>libx.create.restype = c_void_p</snippet></ROW><ROW><id>9431736</id><snippet>destroy</snippet></ROW><ROW><id>9431736</id><snippet>create</snippet></ROW><ROW><id>9431736</id><snippet>Tag *create(int n, char *s)
{
    Tag *t = malloc(sizeof(Tag));
    t-&gt;num = n;
    t-&gt;name = strdup(s);
    return t;
}

void destroy(Tag *t)
{
    free(t-&gt;name);
    free(t);
}
</snippet></ROW><ROW><id>9431736</id><snippet>libx = ctypes.CDLL("./libx.so")
libx.create.restype = c_void_p
res = libx.create(c_int(1), c_char_p("a"))
libx.use(res)
libx.destroy(res)
</snippet></ROW><ROW><id>9431803</id><snippet>SOURCES.txt</snippet></ROW><ROW><id>9431803</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>9431803</id><snippet>include_package_data = True,</snippet></ROW><ROW><id>9431803</id><snippet>include_package_data</snippet></ROW><ROW><id>9431903</id><snippet>import rarfile
import os.path

extracted_dir_name = "samples/sample"    # Directory with extracted files
file = rarfile.RarFile("samples/sample.rar", "r")

# list file information
for info in file.infolist():
     print info.filename, info.date_time, info.file_size

     # Compare with extracted file here
     extracted_file = os.path.join(extracted_dir_name, info.filename)
     if info.file_size != os.path.getsize(extracted_file):
         print "Different size!"
</snippet></ROW><ROW><id>9432077</id><snippet>self.test_dict = ...
</snippet></ROW><ROW><id>9432077</id><snippet>self.__dict__["test_dict"] = ...
</snippet></ROW><ROW><id>9432163</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9432163</id><snippet>ModelAdmin</snippet></ROW><ROW><id>9432163</id><snippet>save_form</snippet></ROW><ROW><id>9432163</id><snippet>save_form</snippet></ROW><ROW><id>9432163</id><snippet>self</snippet></ROW><ROW><id>9432163</id><snippet>request, form, change</snippet></ROW><ROW><id>9432163</id><snippet>def save_form(self, request, form, change):
    instance = super(MyModelAdmin, self).save_form(request, form, change)
    if instance.published and not user.has_perm('mark_published'):
        instance.published = False #You could be displaying a message here.
    return instance
</snippet></ROW><ROW><id>9432163</id><snippet>True</snippet></ROW><ROW><id>9432163</id><snippet>published</snippet></ROW><ROW><id>9432292</id><snippet>iter()</snippet></ROW><ROW><id>9432292</id><snippet>range()</snippet></ROW><ROW><id>9432292</id><snippet>enumerate()</snippet></ROW><ROW><id>9432292</id><snippet>for row_count, row in enumerate(csv_input):
    columns = iter(row)
    style = next(columns)
    for col_count, col in enumerate(columns, start=1):
        sheet.write(
            row_count,
            col_count,
            float(col) if is_number(col) else col,
            style
        )
</snippet></ROW><ROW><id>9432315</id><snippet>import zipfile

fh = open('test.zip', 'rb')
z = zipfile.ZipFile(fh)
for name in z.namelist():
    outpath = "C:\\"
    z.extract(name, outpath)
fh.close()
</snippet></ROW><ROW><id>9432315</id><snippet>import zipfile

with zipfile.ZipFile('test.zip', "r") as z:
    z.extractall("C:\\")
</snippet></ROW><ROW><id>9432506</id><snippet># What you are doing
random_array[[2, 3, 3]]  # semantics: [arr[2], arr[3], arr[3]]

# What you want to be doing
random_array[(2, 3, 3)]  # semantics: arr[2][3][3], same as arr[2,3,3]
</snippet></ROW><ROW><id>9432506</id><snippet>list(...)</snippet></ROW><ROW><id>9432689</id><snippet>for</snippet></ROW><ROW><id>9432689</id><snippet>for i in range(len(p)):
    p[i] = [ p[i][j-1]*c1 + p[i][j] * c2 for j in range(len(p[0])) ]
</snippet></ROW><ROW><id>9432689</id><snippet>row[i- 1%len(row)] == row[i-1]</snippet></ROW><ROW><id>9432844</id><snippet>list</snippet></ROW><ROW><id>9432844</id><snippet>__init__()</snippet></ROW><ROW><id>9432844</id><snippet>__new__()</snippet></ROW><ROW><id>9432844</id><snippet>__new__()</snippet></ROW><ROW><id>9432844</id><snippet>__init__()</snippet></ROW><ROW><id>9432844</id><snippet>class MyList(list):
    def __init__(self, *args):
        list.__init__(self, *args)
        self.append('FirstMen')
        self.name = 'Westeros'
</snippet></ROW><ROW><id>9432844</id><snippet>super()</snippet></ROW><ROW><id>9432844</id><snippet>list.__init__()</snippet></ROW><ROW><id>9432955</id><snippet>('Trachemys scripta','Red-eared Slider',lambda:1-(1-self.soil.get())*(1-self.water.get()),0.99,0.01,0.99)]
</snippet></ROW><ROW><id>9433133</id><snippet>numpy</snippet></ROW><ROW><id>9433133</id><snippet>scipy</snippet></ROW><ROW><id>9433338</id><snippet>'abc'.join('9')
</snippet></ROW><ROW><id>9433338</id><snippet>'9'</snippet></ROW><ROW><id>9433338</id><snippet>join</snippet></ROW><ROW><id>9433338</id><snippet>'abc'.join('31')
</snippet></ROW><ROW><id>9433338</id><snippet>'31'</snippet></ROW><ROW><id>9433338</id><snippet>['3', '1']</snippet></ROW><ROW><id>9433338</id><snippet>'3abc1'</snippet></ROW><ROW><id>9433369</id><snippet>**</snippet></ROW><ROW><id>9433369</id><snippet>some_func(**mydict)
</snippet></ROW><ROW><id>9433727</id><snippet>Parameters (I'm using OAuth in the parameters for this call)
oauth_body_hash=2jmj7l5rSw0yVb%2FvlWAYkK%2FYBwk%3D
oauth_nonce=41358038
oauth_timestamp=1330098205
oauth_consumer_key=xxx
oauth_signature_method=HMAC-SHA1
facet=network%2CO
oauth_version=1.0
oauth_token=xxx
keywords=Schneider+Electric
oauth_signature=xxx

Response includes:
&lt;person&gt;
  &lt;distance&gt;-1&lt;/distance&gt;
  &lt;id&gt;UBAQYFeiHo&lt;/id&gt;
  &lt;first-name&gt;&lt;/first-name&gt;
  &lt;last-name&gt;Private&lt;/last-name&gt;
  &lt;headline&gt;Assistant Engineer at Schneider Electric&lt;/headline&gt;
  &lt;api-standard-profile-request&gt;
    &lt;url&gt;http://api.linkedin.com/v1/people/UBAQYFeiHo&lt;/url&gt;
    &lt;headers total="1"&gt;
      &lt;http-header&gt;
        &lt;name&gt;x-li-auth-token&lt;/name&gt;
        &lt;value&gt;OUT_OF_NETWORK:wHti&lt;/value&gt;
      &lt;/http-header&gt;
    &lt;/headers&gt;
  &lt;/api-standard-profile-request&gt;
 &lt;/person&gt;
</snippet></ROW><ROW><id>9433727</id><snippet>Request headers:
Host: api.linkedin.com
x-li-auth-token: OUT_OF_NETWORK:wHti
accept-encoding: gzip, deflate
user-agent: Python-httplib2/$Rev$

Response:
{'status': '200', 'content-length': '158', 'content-location': u'http://api.linkedin.com/v1/people/UBAQYFeiHo:(id,first-name,last-name)?oauth_body_hash=2jmj7l5rSw0yVb%2FvlWAYkK%2FYBwk%3D&amp;oauth_nonce=27886786&amp;oauth_timestamp=1330098212&amp;oauth_consumer_key=xxx&amp;oauth_signature_method=HMAC-SHA1&amp;oauth_version=1.0&amp;oauth_token=xxx&amp;oauth_signature=xxx', 'transfer-encoding': 'chunked', 'vary': '*', 'server': 'Apache-Coyote/1.1', '-content-encoding': 'gzip', 'date': 'Fri, 24 Feb 2012 15:43:34 GMT', 'x-li-request-id': 'N368G241EA', 'x-li-format': 'xml', 'content-type': 'text/xml;charset=UTF-8'}
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;person&gt;
  &lt;id&gt;UBAQYFeiHo&lt;/id&gt;
  &lt;first-name&gt;&lt;/first-name&gt;
  &lt;last-name&gt;Private&lt;/last-name&gt;
&lt;/person&gt;
</snippet></ROW><ROW><id>9433727</id><snippet>import oauth2 as oauth
import time

url = "http://api.linkedin.com/v1/people/UBAQYFeiHo:(id,first-name,last-name)"
consumer = oauth.Consumer(
key="xxx",
secret="xxx")

token = oauth.Token(
key="xxx", 
secret="xxx")

client = oauth.Client(consumer, token)

resp, content = client.request(url, headers={'x-li-auth-token':'OUT_OF_NETWORK:wHti'})
print resp
print content
</snippet></ROW><ROW><id>9433759</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; names = namedtuple( 'names', ['a','b','c'] )

&gt;&gt;&gt; thing= names(3,2,1)
&gt;&gt;&gt; thing.a
3
&gt;&gt;&gt; thing.b
2
&gt;&gt;&gt; thing.c
1
</snippet></ROW><ROW><id>9433793</id><snippet>Button_Array=[]
for i in List1:
    New_Button=wx.Button(panel,-1,label=i)
    Button_Array.append(New_Button)
</snippet></ROW><ROW><id>9433845</id><snippet>xx</snippet></ROW><ROW><id>9433845</id><snippet>from matplotlib import pyplot as plt
import numpy as np
xx = np.arange(10)
np.random.seed(101)
yy = np.random.random( 10 )
plt.plot(xx, yy, 'o' )
xticks, xticklabels = plt.xticks()
# shift half a step to the left
# x0 - (x1 - x0) / 2 = (3 * x0 - x1) / 2
xmin = (3*xticks[0] - xticks[1])/2.
# shaft half a step to the right
xmax = (3*xticks[-1] - xticks[-2])/2.
plt.xlim(xmin, xmax)
plt.xticks(xticks)
plt.show()
</snippet></ROW><ROW><id>9433845</id><snippet>clip_on</snippet></ROW><ROW><id>9433845</id><snippet>plt.plot(xx, yy, 'o', clip_on=False)</snippet></ROW><ROW><id>9433907</id><snippet>%M</snippet></ROW><ROW><id>9433907</id><snippet>%m</snippet></ROW><ROW><id>9433958</id><snippet>HTTPQuery</snippet></ROW><ROW><id>9433958</id><snippet>SmartDownload</snippet></ROW><ROW><id>9433958</id><snippet># SmartDownload.py
def download(url):
    from HTTPQuery import Is_ServerSupportHTTPRange
    ...
</snippet></ROW><ROW><id>9433958</id><snippet>HTTPQuery</snippet></ROW><ROW><id>9433958</id><snippet>SmartDownload</snippet></ROW><ROW><id>9434037</id><snippet>0.5</snippet></ROW><ROW><id>9434037</id><snippet>1.5</snippet></ROW><ROW><id>9434037</id><snippet>Decimal</snippet></ROW><ROW><id>9434067</id><snippet>=</snippet></ROW><ROW><id>9434264</id><snippet>QTreeWidget</snippet></ROW><ROW><id>9434264</id><snippet>setItemWidget</snippet></ROW><ROW><id>9434421</id><snippet>list</snippet></ROW><ROW><id>9434421</id><snippet>isinstance</snippet></ROW><ROW><id>9434421</id><snippet>filter</snippet></ROW><ROW><id>9434421</id><snippet>filter</snippet></ROW><ROW><id>9434485</id><snippet>None</snippet></ROW><ROW><id>9434485</id><snippet>def chunks(l, n):
    # http://stackoverflow.com/a/312464/190597
    """ Yield successive n-sized chunks from l.
    """
    for i in xrange(0, len(l), n):
        yield l[i:i+n]

for i,group in enumerate(dynamic_grouper(iterable, chunk_sizes)):
    for item in chunks(group, 5):
        print "Group %i" % i
        print "Items %s" % list(item)
</snippet></ROW><ROW><id>9434495</id><snippet>def parse_place(place):
    """This returns an object how we want it returned."""
    location.formatted_address = place.get('formatted_address')
    location.latitude = place['geometry']['location']['lat']
    location.longitude = place['geometry']['location']['lng']

    latitude = place['geometry']['location']['lat']
    longitude = place['geometry']['location']['lng']
    return (location, (latitude, longitude))

class GoogleV3Place(GoogleV3):
    """Simply extends the GoogleV3 to bucket the object into a place"""

    def parse_json(self, page, exactly_one=True, parse_place_fn = parse_place):
        """Returns location, (latitude, longitude) from json feed."""
        if not isinstance(page, basestring):
            page = util.decode_page(page)
        self.doc = json.loads(page)
        places = self.doc.get('results', [])

        if not places:
            check_status(self.doc.get('status'))
            return None
        elif exactly_one and len(places) != 1:
            raise ValueError(
                "Didn't find exactly one placemark! (Found %d)" % len(places))

        if exactly_one:
            return parse_place_fn(places[0])
        else:
            return [parse_place_fn(place) for place in places]
</snippet></ROW><ROW><id>9434515</id><snippet># sign extend b low bits in x
# from "Bit Twiddling Hacks"
def SIGNEXT(x, b):
  m = 1 &lt;&lt; (b - 1)
  x = x &amp; ((1 &lt;&lt; b) - 1)
  return (x ^ m) - m
</snippet></ROW><ROW><id>9435141</id><snippet>fields_that_reference = [[m._meta.object_name.lower()+'__'+f.name for f in m._meta.fields if not isinstance(f,related.ForeignKey) ] for m in models_that_reference]

for i in fields_that_reference:
    fields +=i
</snippet></ROW><ROW><id>9435141</id><snippet>all_objects = get_model('appname',model_name).objects.select_related().values(*fields)
</snippet></ROW><ROW><id>9435197</id><snippet>&gt;&gt;&gt; from neo4jrestclient.client import GraphDatabase

&gt;&gt;&gt; gdb = GraphDatabase("http://localhost:7474/db/data/")

&gt;&gt;&gt; idx =  gdb.nodes.indexes.create("urltags")

&gt;&gt;&gt; url_node = gdb.nodes.create(url="http://foo.bar", type="URL")

&gt;&gt;&gt; tag_node = gdb.nodes.create(tag="foobar", type="TAG")
</snippet></ROW><ROW><id>9435197</id><snippet>count</snippet></ROW><ROW><id>9435197</id><snippet>"http://foo.bar"</snippet></ROW><ROW><id>9435197</id><snippet>foobar</snippet></ROW><ROW><id>9435197</id><snippet>&gt;&gt;&gt; url_node.relationships.create(tag_node["tag"], tag_node, count=1)
</snippet></ROW><ROW><id>9435197</id><snippet>&gt;&gt;&gt; idx["url"][url_node["url"]] = url_node
</snippet></ROW><ROW><id>9435197</id><snippet>&gt;&gt;&gt; new_url = "http://foo.bar2"

&gt;&gt;&gt; nodes = idx["url"][new_url]

&gt;&gt;&gt; if len(nodes):
...     rel = nodes[0].relationships.all(types=[tag_node["tag"]])[0]
...     rel["count"] += 1
... else:
...     new_url_node = gdb.nodes.create(url=new_url, type="URL")
...     new_url_node.relationships.create(tag_node["tag"], tag_node, count=1)
...     idx["url"][new_url_node["url"]] = new_url_node
</snippet></ROW><ROW><id>9435290</id><snippet>from oauth2client.file import Storage
from oauth2client.client import AccessTokenRefreshError
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.tools import run
import httplib2

FLOW = OAuth2WebServerFlow(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    scope='https://www.googleapis.com/auth/analytics.readonly')
storage = Storage('file_name.dat')
credentials = storage.get()
if credentials is None or credentials.invalid:
    credentials = run(FLOW, storage)
http = credentials.authorize(httplib2.Http())
</snippet></ROW><ROW><id>9435290</id><snippet>from apiclient.discovery import build
service = build('analytics', 'v3', http=http)
</snippet></ROW><ROW><id>9435290</id><snippet>query = service.data().ga().get(ids='ga:%d' % PROFILE_ID, start_date=START_DATE, end_date=END_DATE,metrics='ga:pageviews')
results = query.execute()
</snippet></ROW><ROW><id>9435847</id><snippet>&gt;&gt;&gt; import lxml.html as lh
&gt;&gt;&gt; data = lh.parse('http://query.nictusa.com/cgi-bin/can_ind/2011_P80003338/1/A')
&gt;&gt;&gt; name = data.xpath('/html/body/table[2]/tr[5]/td[1]/a/text()')
&gt;&gt;&gt; name
[' AABY, TRYGVE']
&gt;&gt;&gt; name = data.xpath('//table[2]/*/td[1]/a/text()')
&gt;&gt;&gt; len(name)
500
&gt;&gt;&gt; name[499]
' AHMED, ASHFAQ'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9435847</id><snippet>xpath expression</snippet></ROW><ROW><id>9435885</id><snippet>wxSPLASH_NO_TIMEOUT</snippet></ROW><ROW><id>9435885</id><snippet>wxSPLASH_NO_TIMEOUT</snippet></ROW><ROW><id>9435885</id><snippet>from wx._windows import SPLASH_NO_TIMEOUT
</snippet></ROW><ROW><id>9435885</id><snippet>mySplash = SplashScreen(myBitmap, SPLASH_NO_TIMEOUT, -1, myParent)
</snippet></ROW><ROW><id>9435885</id><snippet>mySplash.Destroy()</snippet></ROW><ROW><id>9435890</id><snippet>def setattr_wrapper(cls):
    def watcher_setattr(self, attr, val):
        super(cls, self).__setattr__(attr, val)
        watched = cls.__dict__["_watched_attrs"]
        if attr in watched:
            for method in watched[attr]:
                getattr(self, method)(attr, val)
    return watcher_setattr

class AttrNotifier(type):
    def __new__(metacls, name, bases, dct):
        dct["_watched_attrs"] = {}
        for key, value in dct.items():
            if hasattr(value, "_watched_attrs"):
                for attr in getattr(value, "_watched_attrs"):
                    if not attr in dct["_watched_attrs"]:
                        dct["_watched_attrs"][attr] = set()
                    dct["_watched_attrs"][attr].add(key)
        cls = type.__new__(metacls, name, bases, dct)
        cls.__setattr__ = setattr_wrapper(cls)
        return cls


def on_change(*args):
    def decorator(meth):
        our_args = args
        #ensure that this decorator is stackable
        if hasattr(meth, "_watched_attrs"):
            our_args = getattr(meth, "_watched_attrs") + our_args
        setattr(meth, "_watched_attrs", our_args)
        return meth
    return decorator

# from here on, example of use:
class A(metaclass=AttrNotifier):
    @on_change("bacon")
    def bacon_changed(self, attr, val):
        print ("%s changed in %s to %s" % (attr, self.__class__.__name__, val)) 


class Spam(A):
    @on_change("bacon", "pepper")
    def changed(self, attr, val):
        print ("%s changed in %s to %s" % (attr, self.__class__.__name__, val)) 

a = A()
a.bacon = 5

b = Spam()
b.pepper = 10
b.bacon = 20
</snippet></ROW><ROW><id>9435890</id><snippet>_watched_attrs</snippet></ROW><ROW><id>9435890</id><snippet>__setattr__</snippet></ROW><ROW><id>9435890</id><snippet>__setattr__</snippet></ROW><ROW><id>9435890</id><snippet>_wacthed_attrs</snippet></ROW><ROW><id>9435890</id><snippet>watcher_setattr</snippet></ROW><ROW><id>9435890</id><snippet>__setattr__</snippet></ROW><ROW><id>9435890</id><snippet>_watched_attrs</snippet></ROW><ROW><id>9435890</id><snippet>_watched_attrs</snippet></ROW><ROW><id>9436208</id><snippet>&gt;&gt;&gt; s = "ascii text 123 £ 456 go go"
&gt;&gt;&gt; t = filter(lambda x: x.isalnum(), s)
&gt;&gt;&gt; print t
"ascii text 123  456 go go"
</snippet></ROW><ROW><id>9436208</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.printable
'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
&gt;&gt;&gt; t = filter(lambda x: x in string.printable, s)
&gt;&gt;&gt; print t
'ascii text 123  456 go go'
</snippet></ROW><ROW><id>9436411</id><snippet>folder</snippet></ROW><ROW><id>9436411</id><snippet>entry_point.py</snippet></ROW><ROW><id>9436411</id><snippet>folder</snippet></ROW><ROW><id>9436411</id><snippet>entry_point.py</snippet></ROW><ROW><id>9436411</id><snippet>from folder.hello import say_hello

if __name__ == "__main__":
    say_hello()
</snippet></ROW><ROW><id>9436496</id><snippet>{{ request.get_host }}</snippet></ROW><ROW><id>9436496</id><snippet>context_instance=RequestContext(request)</snippet></ROW><ROW><id>9436496</id><snippet>render</snippet></ROW><ROW><id>9436496</id><snippet>127.0.0.1    mydomain.com
</snippet></ROW><ROW><id>9436496</id><snippet>/etc/hosts</snippet></ROW><ROW><id>9436496</id><snippet>C:\Windows\System32\drivers\etc\hosts</snippet></ROW><ROW><id>9436730</id><snippet>def SQLQueryDaily(currency,start,end):
    sql = '''
        SELECT buy, AVG(sell)
        FROM {t}
        WHERE (datetime &gt; ? AND datetime &lt; ?)
        GROUP BY strftime('%Y-%m-%d %H',date)
        '''.format(t = currency)
    c.execute(sql, [start, end])
    for row in c:
        print (row)    
</snippet></ROW><ROW><id>9436730</id><snippet>sql = '''
    SELECT buy, AVG(sell)
    FROM {t}
    WHERE (datetime &gt; ? AND datetime &lt; ?)
    GROUP BY strftime('%s', date)/(15*60)
    '''.format(t = currency)
</snippet></ROW><ROW><id>9436730</id><snippet>sql = '''
    SELECT f.date, f.sell, t.minp, t.maxp, t.avgp
    FROM {t} f
    INNER JOIN (
        SELECT MIN(date) mindate, MAX(date) maxdate,
               MIN(sell) minp, MAX(sell) maxp, AVG(sell) avgp
        FROM {t}
        GROUP BY strftime('%s', date)/(15*60)
        ) t
        ON f.date = t.mindate or f.date = t.maxdate
    '''.format(t = currency)
</snippet></ROW><ROW><id>9436793</id><snippet>import pdb; pdb.set_trace()</snippet></ROW><ROW><id>9436793</id><snippet>''.join(var_four)</snippet></ROW><ROW><id>9436793</id><snippet>var_four</snippet></ROW><ROW><id>9436793</id><snippet>var_four</snippet></ROW><ROW><id>9436793</id><snippet>subprocess</snippet></ROW><ROW><id>9436793</id><snippet>os.system</snippet></ROW><ROW><id>9436800</id><snippet>&gt;&gt;&gt; fn1 = lambda bool: self.functionC(bool)
&gt;&gt;&gt; fn2 = lambda bool: self.functionC(bool)
&gt;&gt;&gt; print fn1, fn2
&lt;function &lt;lambda&gt; at 0x1004a9320&gt; &lt;function &lt;lambda&gt; at 0x1004a9398&gt;
&gt;&gt;&gt; fn1 == fn2
False
&gt;&gt;&gt; fn1 is fn2
False
</snippet></ROW><ROW><id>9436822</id><snippet>class Struct:
def __init__(self, **entries): 
    self.__dict__.update(entries)
</snippet></ROW><ROW><id>9436822</id><snippet>adictionary = {'dest':'ination', 'bla':2}
options = Struct(**adictionary)
options.dest
options.bla
</snippet></ROW><ROW><id>9436866</id><snippet>manager.list()</snippet></ROW><ROW><id>9436866</id><snippet>manager.list()</snippet></ROW><ROW><id>9436866</id><snippet>import multiprocessing
import time

def f(ns, ls, di):
    ns.x += 1
    ns.y[0] += 1
    ns_z = ns.z
    ns_z[0] += 1
    ns.z = ns_z

    ls[0] += 1
    ls[1][0] += 1
    ls_2 = ls[2]
    ls_2[0] += 1
    ls[2] = ls_2

    di[0] += 1
    di[1][0] += 1
    di_2 = di[2]
    di_2[0] += 1
    di[2] = di_2

if __name__ == '__main__':
    manager = multiprocessing.Manager()
    ns = manager.Namespace()
    ns.x = 1
    ns.y = [1]
    ns.z = [1]
    ls = manager.list([1, [1], [1]])
    di = manager.dict({0: 1, 1: [1], 2:[1]})

    print 'before', ns, ls, di
    p = multiprocessing.Process(target=f, args=(ns, ls, di))
    p.start()
    p.join()
    print 'after', ns, ls, di
</snippet></ROW><ROW><id>9436866</id><snippet>before Namespace(x=1, y=[1], z=[1]) [1, [1], [1]] {0: 1, 1: [1], 2: [1]}
after Namespace(x=2, y=[1], z=[2]) [2, [1], [2]] {0: 2, 1: [1], 2: [2]}
</snippet></ROW><ROW><id>9437294</id><snippet>def override(method):
  method.is_overridden = True
  return method

class Super:
   def __init__(self):
      if hasattr(self.method, 'is_overridden'):
         print 'different'
      else:
         print 'same'
   @classmethod
   def method(cls):
      pass

class Sub1(Super):
   @override
   def method(self):
      print 'hi'

class Sub2(Super):
   pass

Super() # should be same
Sub1() # should be different
Sub2() # should be same

&gt;&gt;&gt; same
&gt;&gt;&gt; different
&gt;&gt;&gt; same
</snippet></ROW><ROW><id>9437404</id><snippet>re.sub()</snippet></ROW><ROW><id>9437404</id><snippet>import re

dct = {'country': 'Italy', 'sales': 100, 'cost': 50}
formula = 'margin = (sales-cost)/sales'

res_name,operation = formula.split('=')
num_formula = re.sub(r'([a-zA-Z]+)', r'{d[\1]}', operation.strip()).format(d=dct)
num_formula  # '(100-50)/100'

dct[res_name.strip()] = eval(num_formula.format(d=dct))
</snippet></ROW><ROW><id>9437404</id><snippet>{'country': 'Italy', 'cost': 50, 'margin': 0.5, 'sales': 100}
</snippet></ROW><ROW><id>9437404</id><snippet>eval()</snippet></ROW><ROW><id>9437404</id><snippet>eval()</snippet></ROW><ROW><id>9437404</id><snippet>eval()</snippet></ROW><ROW><id>9437404</id><snippet>re.sub()</snippet></ROW><ROW><id>9437404</id><snippet>&gt;&gt;&gt; re.sub(r'([a-zA-Z]+)', r'{d[\1]}', '(sales-cost)/sales')
'({d[sales]}-{d[cost]})/{d[sales]}'
</snippet></ROW><ROW><id>9437404</id><snippet>r'([a-zA-Z]+)'</snippet></ROW><ROW><id>9437404</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>9437404</id><snippet>+</snippet></ROW><ROW><id>9437404</id><snippet>r'{d[\1]}'</snippet></ROW><ROW><id>9437404</id><snippet>\1</snippet></ROW><ROW><id>9437404</id><snippet>{d[</snippet></ROW><ROW><id>9437404</id><snippet>]}</snippet></ROW><ROW><id>9437404</id><snippet>&gt;&gt;&gt; '{d[first]} + {d[second]}'.format(d=dct)
'1 + 2'
</snippet></ROW><ROW><id>9437404</id><snippet>strip()</snippet></ROW><ROW><id>9437470</id><snippet>def shift_jis2unicode(charcode): # charcode is an integer
    if charcode &lt;= 0xFF:
        shift_jis_string = chr(charcode)
    else:
        shift_jis_string = chr(charcode &gt;&gt; 8) + chr(charcode &amp; 0xFF)

    unicode_string = shift_jis_string.decode('shift-jis')

    assert len(unicode_string) == 1
    return ord(unicode_string)

print "U+%04X" % shift_jis2unicode(0x8144)
print "U+%04X" % shift_jis2unicode(0x51)
</snippet></ROW><ROW><id>9437532</id><snippet>record_types = {SEN_RECORD: sen_record,
                DSP_RECORD: dsp_record,
                USO_RECORD: uso_record,
                SDM_RECORD: sdm_record,
                DOC_RECORD: doc_record,
                DAT_RECORD: dat_record,
                LAT_RECORD: lat_record,
                SWI_RECORD: swi_record,
                FTL_RECORD: ftl_record}
</snippet></ROW><ROW><id>9437532</id><snippet>new_record = record_types[record_type](record_data)
</snippet></ROW><ROW><id>9437629</id><snippet>awk '
    $1 == "*" {
        if (entry) {
            print subject
            print entry
            entry = ""
        }
        subject = $0
        next
    }
    $1 == "Bug:" {
        sub(/\*/, "* issue " $NF, subject)
        next
    }
    {entry = entry "\n" $0}
    END {print subject; print entry}
'
</snippet></ROW><ROW><id>9437799</id><snippet>&gt;&gt;&gt; a = 5
&gt;&gt;&gt; globals()['a']
5
</snippet></ROW><ROW><id>9437818</id><snippet>        for drink_preferred in customer:
            # find a malted preference
            if drink_preferred[1] == 1 and milkshake_menu[drink_preferred[0]] != 1:
                # he needs a malted one
                milkshake_menu[drink_preferred[0]] = 1
                # but then we have to test previous customers, reset i
                i = 0
                break
            impossible = True
</snippet></ROW><ROW><id>9437818</id><snippet>        for drink_preferred in customer:
            # find a malted preference
            if drink_preferred[1] == 1 and milkshake_menu[drink_preferred[0]] != 1:
                # he needs a malted one
                milkshake_menu[drink_preferred[0]] = 1
                # but then we have to test previous customers, reset i
                i = 0
                break
        else:
            impossible = True
</snippet></ROW><ROW><id>9437855</id><snippet>if int(next) in range(50):
</snippet></ROW><ROW><id>9438448</id><snippet>import numpy as np
import matplotlib.pyplot as plt
data = np.random.random((10,10))
data[[2, 5, 7], [5, 8, 1]] = np.nan

plt.imshow(data)
plt.show()
</snippet></ROW><ROW><id>9438448</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

# Generate some data...
data = np.random.random((10,10))
data[[2, 5, 7], [5, 8, 1]] = np.nan

# Convert it to a masked array instead of just using nan's..
data = np.ma.masked_invalid(data)

# Plot a version with the invalid data replaced with the mean...
plt.imshow(data.filled(data.mean()))

# Now plot a white (or whatever color you'd like), nearest-interpolated array
# over the invalid values...
bad_data = np.ma.masked_where(~data.mask, data.mask)
plt.imshow(bad_data, interpolation='nearest', cmap=mpl.cm.gray_r)

plt.show()
</snippet></ROW><ROW><id>9438448</id><snippet>data.filled(data.mean())</snippet></ROW><ROW><id>9438633</id><snippet>tree = html.fromstring(someString)
table_tops = set(tree.xpath('//table'))-set(tree.xpath('//table//table'))
</snippet></ROW><ROW><id>9438633</id><snippet>myTree=html.fromstring(someString)
table_tops = set(myTree.cssselect('table'))-set(myTree.cssselect('table table'))
</snippet></ROW><ROW><id>9438813</id><snippet>testzip</snippet></ROW><ROW><id>9438813</id><snippet>testzip</snippet></ROW><ROW><id>9438813</id><snippet>linux_zipfile_executable -t your_created_archive.zip</snippet></ROW><ROW><id>9438813</id><snippet>testzip</snippet></ROW><ROW><id>9438813</id><snippet>mode='wb'</snippet></ROW><ROW><id>9438813</id><snippet>open</snippet></ROW><ROW><id>9438813</id><snippet>r</snippet></ROW><ROW><id>9438813</id><snippet>w</snippet></ROW><ROW><id>9438813</id><snippet>a</snippet></ROW><ROW><id>9438813</id><snippet>RuntimeError: ZipFile() requires mode "r", "w", or "a"</snippet></ROW><ROW><id>9438813</id><snippet>b</snippet></ROW><ROW><id>9438813</id><snippet>open</snippet></ROW><ROW><id>9439116</id><snippet>Alias</snippet></ROW><ROW><id>9439116</id><snippet>Alias /media/ /usr/local/www/documents/media/              # Static files, e.g. http://example.com/media
WSGIScriptAlias / /usr/local/www/wsgi-scripts/myapp.wsgi   # WSGI app mounted at the root of site, e.g. http://example.com
</snippet></ROW><ROW><id>9439219</id><snippet>('completion', self.gf('core.tools.IntegerRangeField')(default=0, blank=True)),
</snippet></ROW><ROW><id>9439287</id><snippet>gtk.notebook_set_window_creation_hook</snippet></ROW><ROW><id>9439287</id><snippet>def notebook_creation_hook_callback( notebook, page, x, y ):
    new_notebook = gtk.Notebook
    new_notebook.set_group_id(notebook.get_group_id()) #Id must be the same as original notebook
    window = gtk.Window( gtk.WINDOW_TOPLEVEL )
    window.add( new_notebook)
    window.show_all()
    window.move( x,y )
    return new_notebook #Return the new notebook on success
</snippet></ROW><ROW><id>9439301</id><snippet>re.compile('(?&lt;=}})\s+(?={{)')
</snippet></ROW><ROW><id>9439464</id><snippet>readlines()</snippet></ROW><ROW><id>9439464</id><snippet>#!/bin/sh
cat &gt;&gt; /tmp/testrsyslogomoutput.txt
</snippet></ROW><ROW><id>9439464</id><snippet>cat</snippet></ROW><ROW><id>9439464</id><snippet>readlines()</snippet></ROW><ROW><id>9439464</id><snippet>read()</snippet></ROW><ROW><id>9439464</id><snippet>split("\n")</snippet></ROW><ROW><id>9439464</id><snippet>import fcntl, os

# Add O_NONBLOCK to the stdin descriptor flags 
flags = fcntl.fcntl(0, fcntl.F_GETFL)
fcntl.fcntl(0, fcntl.F_SETFL, fl | os.O_NONBLOCK)

message = sys.stdin.read().split("\n")  # Read what's waiting, in one go
fd = open('/tmp/testrsyslogomoutput.txt', 'a')
fd.write("Receiving log message : \n%s\n" % ('-'.join(message)))
fd.close()
</snippet></ROW><ROW><id>9439464</id><snippet>python -u</snippet></ROW><ROW><id>9439522</id><snippet>from urllib import request, parse, error
</snippet></ROW><ROW><id>9439522</id><snippet>import urllib.request, urllib.parse, urllib.error
</snippet></ROW><ROW><id>9439617</id><snippet>spammodule</snippet></ROW><ROW><id>9439617</id><snippet>static struct PyModuleDef spammodule = {
   PyModuleDef_HEAD_INIT,
   "spam",   /* name of module */
   spam_doc, /* module documentation, may be NULL */
   -1,       /* size of per-interpreter state of the module,
                or -1 if the module keeps state in global variables. */
   SpamMethods
};
</snippet></ROW><ROW><id>9439856</id><snippet>VBA</snippet></ROW><ROW><id>9439856</id><snippet>.xlsx</snippet></ROW><ROW><id>9439856</id><snippet>Sub FormatCSVs()
    Dim fso As FileSystemObject
    Dim pth As String
    Dim fl As File
    Dim wb As Workbook

    Set fso = New FileSystemObject
    pth = "C:\Test" ' &lt;-- replace with your path, or add a folder selection dialog
    For Each fl In fso.GetFolder(pth).Files
       If StrComp(fso.GetExtensionName(fl.Path), "csv", vbTextCompare) = 0 Then
            Set wb = Workbooks.Open(fl.Path)
            With wb.Sheets(1)
                .UsedRange.EntireColumn.AutoFit
                .Rows(1).Font.Bold = True
                .Rows(1).Interior.ColorIndex = 3
            End With
            wb.SaveAs pth &amp; "\" &amp; fso.GetBaseName(fl.Path), xlOpenXMLWorkbook
               ' or use xlExcel8 for .xls
            wb.Close
        End If
    Next

    Set fl = Nothing
    Set fso = Nothing
End Sub
</snippet></ROW><ROW><id>9439973</id><snippet>page.alias</snippet></ROW><ROW><id>9439973</id><snippet># urls.py
urlpatterns += patterns('',
   (r'^(?P&lt;page_alias&gt;.+?)/$', 'views.static_page'),
)

# views.py
def static_page(request, page_alias):    # page_alias holds the part of the url
    try:
        active = Page.objects.get(page_alias=page_alias)
    except Page.DoesNotExist:
        raise Http404("Page does not exist")
</snippet></ROW><ROW><id>9440378</id><snippet>b = a[:]</snippet></ROW><ROW><id>9440378</id><snippet>b = list(a)</snippet></ROW><ROW><id>9440378</id><snippet>tuple(a)</snippet></ROW><ROW><id>9440378</id><snippet>modify</snippet></ROW><ROW><id>9440378</id><snippet>b = modify(a[:])</snippet></ROW><ROW><id>9440615</id><snippet>x = 'abc'
result = x[1] + x[0] + x[2:]
</snippet></ROW><ROW><id>9440615</id><snippet>import re
re.sub('(.)(.)', r'\2\1','abc')
</snippet></ROW><ROW><id>9440615</id><snippet>from UserString import MutableString
x = MutableString('abc')
x[1], x[0] = x[0], x[1]
&gt;&gt;&gt;&gt;'bac'
</snippet></ROW><ROW><id>9440633</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; sympy.__version__
'0.7.1-git'
&gt;&gt;&gt; from sympy import S, Eq, solve
&gt;&gt;&gt; 
&gt;&gt;&gt; vf, d, a, vi, t = S('vf d a vi t'.split())
&gt;&gt;&gt; equations = [
...     Eq(vf, vi+a*t),
...     Eq(d, vi*t + a*t**2/2),
...     Eq(a, 10),
...     Eq(d, 60),
...     Eq(vi, 5)]
&gt;&gt;&gt; 
&gt;&gt;&gt; solve(equations)
[{vf: -35, t: -4, a: 10, vi: 5, d: 60}, {vf: 35, t: 3, a: 10, vi: 5, d: 60}]
&gt;&gt;&gt; solve(equations, [a, t, vi, vf, d])
[(10, -4, 5, -35, 60), (10, 3, 5, 35, 60)]
</snippet></ROW><ROW><id>9440679</id><snippet>from PIL import Image
import numpy as np

size = image1.size
size = [i//2 for i in size]
array1 = np.asarray(image1)
array2 = array1[:size[1], :size[0]]
image2 = Image.fromarray(array2)
</snippet></ROW><ROW><id>9440679</id><snippet>image2.fromstring(array2.tostring())
</snippet></ROW><ROW><id>9440679</id><snippet>sequence</snippet></ROW><ROW><id>9440679</id><snippet>seq_in = list(sequence)</snippet></ROW><ROW><id>9440679</id><snippet>image1 = Image.open("img1.jpg")
array1 = np.asarray(image1)
array2 = np.fft.fftn(array1)
array2_uint = (np.log(np.abs(array2)) * 14).astype('uint8')
image2 = Image.fromarray(array2_uint)
array3 = np.fft.ifftn(array2).astype('uint8')
image3 = Image.fromarray(array3)
</snippet></ROW><ROW><id>9440964</id><snippet>&gt;&gt;&gt; def clean_string(s):
...     return ''.join(c for c in s if c != '7')
... 
&gt;&gt;&gt; class Court(object):
...     def __init__(self):
...         self.docket_numbers = ["a1", "b277"]
...         self.dispositions = ["happy", "sad77"]
...     def clean(self):
...         for item in [self.docket_numbers, self.dispositions]:
...             if item is not None:
...                 item[:] = [clean_string(sub_item) for sub_item in item]
... 
&gt;&gt;&gt; C = Court()
&gt;&gt;&gt; vars(C)
{'dispositions': ['happy', 'sad77'], 'docket_numbers': ['a1', 'b277']}
&gt;&gt;&gt; C.clean()
&gt;&gt;&gt; vars(C)
{'dispositions': ['happy', 'sad'], 'docket_numbers': ['a1', 'b2']}
</snippet></ROW><ROW><id>9440978</id><snippet>#include &lt;boost/python.hpp&gt;

BOOST_PYTHON_MODULE(my_module)
{
    boost::python::def("function_name", function, boost::python::args("start", "length", "offset", "boundry", "byte", "data", "variable" ), "docstring");
}
</snippet></ROW><ROW><id>9441143</id><snippet>if words in getTranslatedMessage('decrypt', message, key).split():
</snippet></ROW><ROW><id>9441143</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [2,3,4]
&gt;&gt;&gt; if a in b:
...     print ("yep!")
... 
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9441143</id><snippet>if words in somelist</snippet></ROW><ROW><id>9441143</id><snippet>&gt;&gt;&gt; a in b
False
&gt;&gt;&gt; a in [[1,2,3],4,5]
True
</snippet></ROW><ROW><id>9441143</id><snippet>&gt;&gt;&gt; if set(a).intersection(b):
...     print("yep!")
... 
yep!
&gt;&gt;&gt; if any(i in b for i in a):
...     print("also yep, but slow")
... 
also yep, but slow
&gt;&gt;&gt; bset = set(b)
&gt;&gt;&gt; if any(i in bset for i in a):
...     print("still yep, not so bad")
... 
still yep, not so bad
</snippet></ROW><ROW><id>9441143</id><snippet>&gt;&gt;&gt; m = getTranslatedMessage("d", "this may work", 17)
&gt;&gt;&gt; print(m)
cqrb vjh fxat
&gt;&gt;&gt; brute(m)
this may work
</snippet></ROW><ROW><id>9441427</id><snippet>&gt;&gt;&gt; re.match("&gt;", "a&gt;b")
&gt;&gt;&gt; re.search("&gt;", "a&gt;b")
&lt;_sre.SRE_Match object at 0x7f4dd577e3d8&gt;
</snippet></ROW><ROW><id>9441427</id><snippet>&gt;&gt;&gt; re.match(".*&gt;", "a&gt;b")
&lt;_sre.SRE_Match object at 0x7f4dd577e440&gt;
</snippet></ROW><ROW><id>9441457</id><snippet>labels, numL = label(array)
label_indices = [(labels == i).nonzero() for i in xrange(1, numL+1)]
</snippet></ROW><ROW><id>9441671</id><snippet>min</snippet></ROW><ROW><id>9441671</id><snippet>min(ProdPrice.objects.filter(product=x['id']).aggregate(Min('price'))['price__min'] for x in c)
</snippet></ROW><ROW><id>9441775</id><snippet>for loc in (self.room, self.floor, self.building):
    if loc is not None:
        location.append(loc)
        break
</snippet></ROW><ROW><id>9441775</id><snippet>location = [l for l in (self.room, self.floor, self.building) if l is not None][:1]
</snippet></ROW><ROW><id>9441775</id><snippet>options = (self.room, self.floor, self.building)
location = [l for l in options if l is not None][:1]
</snippet></ROW><ROW><id>9441775</id><snippet>property</snippet></ROW><ROW><id>9441775</id><snippet>&gt;&gt;&gt; property
&lt;type 'property'&gt;

class property(object)
 |  property(fget=None, fset=None, fdel=None, doc=None) -&gt; property attribute
 |  
 |  fget is a function to be used for getting an attribute value, and likewise
 |  fset is a function for setting, and fdel a function for del'ing, an
 |  attribute.  Typical use is to define a managed attribute x:
</snippet></ROW><ROW><id>9441775</id><snippet>locations = [l for l in (self.room, self.floor, self.building) if l is not None]
</snippet></ROW><ROW><id>9441775</id><snippet>locations = filter(None, [self.room, self.floor, self.building])
</snippet></ROW><ROW><id>9442031</id><snippet>class Order(DirtyFieldsMixin, models.Model):
    ...

def order_pre_save(sender, instance):
    if "status" in instance.get_dirty_fields():
        instance.t_status = datetime.datetime.now()

pre_save.connect(order_pre_save, sender=Order)
</snippet></ROW><ROW><id>9442067</id><snippet>def insertion_sort(A):
    for j in range(1, len(A)):
        key = A[j]
        i = j - 1
        while (i &gt;= 0) and (A[i] &gt; key):
            A[i+1] = A[i]
            i = i-1
        A[i+1] = key

    return A
</snippet></ROW><ROW><id>9442274</id><snippet>import turtle
class TurtleGTX(turtle.Turtle):
    """My own version of turtle"""
    def __init__(self,*args,**kwargs):
        super(TurtleGTX,self).__init__(*args,**kwargs)
        print("Time for my GTX turtle!")

my_turtle = TurtleGTX()
my_turtle.forward(100)
</snippet></ROW><ROW><id>9442384</id><snippet>sys.argv</snippet></ROW><ROW><id>9442384</id><snippet>if len(sys.argv) == 2:
  do X
else:
  do Y
</snippet></ROW><ROW><id>9442777</id><snippet>A if test else B</snippet></ROW><ROW><id>9442777</id><snippet>{ (some_key if condition else default_key):(something_if_true if condition 
          else something_if_false) for key, value in dict_.items() }
</snippet></ROW><ROW><id>9442777</id><snippet>if</snippet></ROW><ROW><id>9442805</id><snippet>class_dict= defaultdict(lambda: defaultdict(lambda: defaultdict(str)))
for (section, stu, sub) in zip(sections, students, subjects):
    l = len(class_dict[section][stu])
    class_dict[section][stu][l+1] = sub
</snippet></ROW><ROW><id>9443305</id><snippet>file.read()</snippet></ROW><ROW><id>9443305</id><snippet>buffer</snippet></ROW><ROW><id>9443349</id><snippet>set()</snippet></ROW><ROW><id>9443349</id><snippet>wordlist = ['mississippi','miss','lake','que']

letters = set('aqk')

for word in wordlist:
    if letters &amp; set(word):
        print word
</snippet></ROW><ROW><id>9443349</id><snippet>lake
que
</snippet></ROW><ROW><id>9443349</id><snippet>&amp;</snippet></ROW><ROW><id>9443486</id><snippet>None</snippet></ROW><ROW><id>9443486</id><snippet>return</snippet></ROW><ROW><id>9443486</id><snippet>def subStringMatchExact(target,key,matches=(),base=0):
    if find(target,key) != -1:
        matches += (find(target,key)+base,)
        base += find(target,key)+len(key)
        return subStringMatchExact(target[find(target,key)+len(key):],key,matches,base)
    else:
        print matches
        return matches
</snippet></ROW><ROW><id>9443635</id><snippet>os.system()</snippet></ROW><ROW><id>9443679</id><snippet>data/macro
</snippet></ROW><ROW><id>9443679</id><snippet>from MoinMoin.util import pysupport

modules = pysupport.getPackageModules(__file__)
</snippet></ROW><ROW><id>9443679</id><snippet>touch PyShell.py
</snippet></ROW><ROW><id>9443679</id><snippet>import StringIO
import sys

def macro_PyShell(macro, code):
  code_out = StringIO.StringIO()
  sys.stdout = code_out
  exec code.strip("'").strip('"')
  sys.stdout = sys.__stdout__
  return macro.request.formatter.text(code_out.getvalue())
</snippet></ROW><ROW><id>9443679</id><snippet>&lt;&lt;PyShell("for i in [1,2,3]:\n  print i")&gt;&gt;
</snippet></ROW><ROW><id>9443727</id><snippet>pymssql</snippet></ROW><ROW><id>9443727</id><snippet>Cython</snippet></ROW><ROW><id>9443727</id><snippet>setup_requires</snippet></ROW><ROW><id>9443727</id><snippet>distutils</snippet></ROW><ROW><id>9443727</id><snippet>setup_requires</snippet></ROW><ROW><id>9443727</id><snippet>pymssql</snippet></ROW><ROW><id>9443727</id><snippet>setup.py</snippet></ROW><ROW><id>9443727</id><snippet>Cython</snippet></ROW><ROW><id>9443727</id><snippet>setup_requires</snippet></ROW><ROW><id>9443727</id><snippet>build_cmd</snippet></ROW><ROW><id>9443727</id><snippet>Cython</snippet></ROW><ROW><id>9443727</id><snippet>Cython</snippet></ROW><ROW><id>9443727</id><snippet>pymssql</snippet></ROW><ROW><id>9443727</id><snippet>Cython</snippet></ROW><ROW><id>9443727</id><snippet>pymssql</snippet></ROW><ROW><id>9443739</id><snippet>show()</snippet></ROW><ROW><id>9443739</id><snippet>hide()</snippet></ROW><ROW><id>9443739</id><snippet>setVisible(is_visible)</snippet></ROW><ROW><id>9443739</id><snippet>QWidget</snippet></ROW><ROW><id>9443739</id><snippet>self.calendarWidget.hide()</snippet></ROW><ROW><id>9443739</id><snippet>self.calendarWidget.show()</snippet></ROW><ROW><id>9443739</id><snippet>self.calendarWidget.setVisible(True)</snippet></ROW><ROW><id>9443739</id><snippet>toggled(bool)</snippet></ROW><ROW><id>9443739</id><snippet>QWidget.setVisible(bool)</snippet></ROW><ROW><id>9443775</id><snippet>QTextBlock</snippet></ROW><ROW><id>9443775</id><snippet>QTextCursor</snippet></ROW><ROW><id>9443775</id><snippet>def setLineFormat(self, lineNumber, format):
    cursor = QTextCursor(self.textEdit.document().findBlockByNumber(lineNumber))
    cursor.setBlockFormat(format)     

# with
format = QTextBlockFormat()
format.setBackground(Qt.yellow)
# or
format.clearBackground() 
</snippet></ROW><ROW><id>9443775</id><snippet>QSyntaxHighlighter</snippet></ROW><ROW><id>9443775</id><snippet>QTextBlock</snippet></ROW><ROW><id>9443775</id><snippet>QTextBlock.setUserState()</snippet></ROW><ROW><id>9443775</id><snippet>setUserData</snippet></ROW><ROW><id>9443775</id><snippet>QSyntaxHighlighter.highlightBlock()</snippet></ROW><ROW><id>9443775</id><snippet>QSyntaxHighlighter.rehighlightBlock()</snippet></ROW><ROW><id>9444187</id><snippet>*</snippet></ROW><ROW><id>9444187</id><snippet>print('String' * 500)
</snippet></ROW><ROW><id>9444194</id><snippet>usr_input</snippet></ROW><ROW><id>9444194</id><snippet>input</snippet></ROW><ROW><id>9444194</id><snippet>a</snippet></ROW><ROW><id>9444194</id><snippet>b</snippet></ROW><ROW><id>9444194</id><snippet>not in ['1', '2']</snippet></ROW><ROW><id>9444194</id><snippet>usr_input = ''
while usr_input not in ['1', '2']:
    usr_input = input("Input: ")
    ... etc... 
</snippet></ROW><ROW><id>9445244</id><snippet>intern</snippet></ROW><ROW><id>9445244</id><snippet>intern</snippet></ROW><ROW><id>9445244</id><snippet>intern</snippet></ROW><ROW><id>9445244</id><snippet>&gt;&gt;&gt; sys.getsizeof('')
40
&gt;&gt;&gt; sys.getsizeof('a')
41
&gt;&gt;&gt; sys.getsizeof('ab')
42
&gt;&gt;&gt; sys.getsizeof('abc')
43
</snippet></ROW><ROW><id>9445260</id><snippet>class xy:
  def __init__(self):
    self.x = 0
    self.y = 0
    self.jump = 0

actor = xy()
inp = xy()
</snippet></ROW><ROW><id>9445477</id><snippet>global</snippet></ROW><ROW><id>9445477</id><snippet>nonlocal</snippet></ROW><ROW><id>9445477</id><snippet>tuple</snippet></ROW><ROW><id>9445477</id><snippet>tuple</snippet></ROW><ROW><id>9445477</id><snippet>&gt;&gt;&gt; def A(a, b, c):
        return (a*2, b*4, c*8)

&gt;&gt;&gt; d = A(2, 4, 8)
&gt;&gt;&gt; sum(d)
84
&gt;&gt;&gt; d[-1] #or whatever index you'd need...this may serve best as a constant
64
</snippet></ROW><ROW><id>9445500</id><snippet>static npy_intp
incr_slot_(double x, double *bins, npy_intp lbins)
{
    npy_intp i;

    for ( i = 0; i &lt; lbins; i ++ ) {
        if ( x &lt; bins [i] ) {
            return i;
        }
    }
    return lbins;
}

static npy_intp
decr_slot_(double x, double * bins, npy_intp lbins)
{
    npy_intp i;

    for ( i = lbins - 1; i &gt;= 0; i -- ) {
        if (x &lt; bins [i]) {
            return i + 1;
        }
    }
    return 0;
}
</snippet></ROW><ROW><id>9445581</id><snippet>QTabBar</snippet></ROW><ROW><id>9445581</id><snippet>QTabWidget.tabBar()</snippet></ROW><ROW><id>9445581</id><snippet>QTabBar</snippet></ROW><ROW><id>9445581</id><snippet>mousePressEvent</snippet></ROW><ROW><id>9445581</id><snippet>mouseReleaseEvent</snippet></ROW><ROW><id>9445581</id><snippet>QTabBar</snippet></ROW><ROW><id>9445581</id><snippet>QTabWidget</snippet></ROW><ROW><id>9445581</id><snippet>QTabWidget.setTabBar()</snippet></ROW><ROW><id>9445581</id><snippet>class MainWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow,self).__init__()
        self.tabWidget = QTabWidget(self)
        self.setCentralWidget(self.tabWidget)
        self.tabWidget.tabBar().installEventFilter(self)
        self.tabWidget.tabBar().previousMiddleIndex = -1           

    def eventFilter(self, object, event):
        if object == self.tabWidget.tabBar() and \
            event.type() in [QEvent.MouseButtonPress, 
                             QEvent.MouseButtonRelease] and \
            event.button() == Qt.MidButton: 
            tabIndex = object.tabAt(event.pos())
            if event.type() == QEvent.MouseButtonPress:
                object.previousMiddleIndex = tabIndex
            else:   
                if tabIndex != -1 and tabIndex == object.previousMiddleIndex:
                    self.onTabMiddleClick(tabIndex)                    
                object.previousMiddleIndex = -1                        
            return True               
        return False

    # function called with the index of the clicked Tab
    def onTabMiddleClick(self, index):
        pass
</snippet></ROW><ROW><id>9445581</id><snippet>class TabBar(QTabBar):
    middleClicked = pyqtSignal(int)

    def __init__(self):
        super(QTabBar, self).__init__()
        self.previousMiddleIndex = -1

    def mousePressEvent(self, mouseEvent):
        if mouseEvent.button() == Qt.MidButton:
            self.previousIndex = self.tabAt(mouseEvent.pos())
        QTabBar.mousePressEvent(self, mouseEvent)

    def mouseReleaseEvent(self, mouseEvent):
        if mouseEvent.button() == Qt.MidButton and \
            self.previousIndex == self.tabAt(mouseEvent.pos()):
            self.middleClicked.emit(self.previousIndex)
        self.previousIndex = -1
        QTabBar.mouseReleaseEvent(self, mouseEvent)


class MainWindow(QMainWindow):
    def __init__(self):
        super(QMainWindow,self).__init__()
        self.tabWidget = QTabWidget(self)
        self.setCentralWidget(self.tabWidget)

        self.tabBar = TabBar()
        self.tabWidget.setTabBar(self.tabBar)
        self.tabBar.middleClicked.connect(self.onTabMiddleClick)

    # function called with the index of the clicked Tab
    def onTabMiddleClick(self, index):
        pass
</snippet></ROW><ROW><id>9445805</id><snippet>z = models.Zomg.objects.get(foo__id=1, bar__id=1)</snippet></ROW><ROW><id>9445958</id><snippet>#!/usr/bin/env python

def main():
    do_stuff()

if __name__ == '__main__':
</snippet></ROW><ROW><id>9445958</id><snippet>__name__</snippet></ROW><ROW><id>9445958</id><snippet>__main__</snippet></ROW><ROW><id>9445958</id><snippet>__init__.py</snippet></ROW><ROW><id>9445958</id><snippet>folder</snippet></ROW><ROW><id>9445958</id><snippet>from folder import first, second, third

first.main()
second.main()
third.main()
</snippet></ROW><ROW><id>9445989</id><snippet>import requests
url="http://localhost/testing/posting.php"
data= {
    'subject': 'Alice-subject',
    'addbbcode18': '%23444444',
    'addbbcode20': '0',
    'helpbox': 'Close all open bbCode tags',
    'message': 'alice-body',
    'poll_title': '',
    'add_poll_option_text': '',
    'poll_length': '',
    'mode': 'newtopic',
    'sid': '5b2e663a3d724cc873053e7ca0f59bd0',
    'f': '1',
    'post': 'Submit',
    }
 cookies = {'phpbb2mysql_data': 'a%3A2%3A%7Bs%3A11%3A%22autologinid%22%3Bs%3A0%3A%22%22%3Bs%3A6%3A%22userid%22%3Bs%3A1%3A%223%22%3B%7D',
    'phpbb2mysql_t': 'a%3A9%3A%7Bi%3A3%3Bi%3A1330156986%3Bi%3A1%3Bi%3A1330160737%3Bi%3A5%3Bi%3A1330161702%3Bi%3A6%3Bi%3A1330179284%3Bi%3A2%3Bi%3A1330160743%3Bi%3A7%3Bi%3A1330163187%3Bi%3A8%3Bi%3A1330164442%3Bi%3A9%3Bi%3A1330164739%3Bi%3A10%3Bi%3A1330176335%3B%7D', 
    'phpbb2mysql_sid': '5b2e663a3d724cc873053e7ca0f59bd0',
    }
print requests.get(url, data=data, cookies=cookies).text
</snippet></ROW><ROW><id>9446126</id><snippet>Employee</snippet></ROW><ROW><id>9446126</id><snippet>class Employee(object):
  locations = []
  def __init__(self, ldap, name, location, salary, status):
    self.ldap = ldap
    self.name = name
    self.location = location
    self.locations.append(location)
    self.salary = salary
    self.status = status

employee1 = Employee('axlr', 'Axl Rose', 'Dublin', 50000, 'active')
employee2 = Employee('slash', 'Slash', 'Dublin', 50000, 'active')
employee3 = Employee('peterp', 'Peter Pan', 'New York', 50000, 'active')
print Employee.locations
</snippet></ROW><ROW><id>9446277</id><snippet>re.search("\\$.", str(souped))</snippet></ROW><ROW><id>9446418</id><snippet>windows = {"bartlett": numpy.bartlett,
           "blackman": numpy.blackman,
           "hamming": numpy.hamming,
           "hanning": numpy.hanning,
           "kaiser": numpy.kaiser}
</snippet></ROW><ROW><id>9446418</id><snippet>eval()</snippet></ROW><ROW><id>9446418</id><snippet>w = vars(numpy)[window](11)
</snippet></ROW><ROW><id>9446418</id><snippet>eval()</snippet></ROW><ROW><id>9446418</id><snippet>getattr()</snippet></ROW><ROW><id>9446421</id><snippet>[message isEqualToString:@"1"]</snippet></ROW><ROW><id>9446566</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'djsite.settings'
</snippet></ROW><ROW><id>9446566</id><snippet>/path/to/my/djsite</snippet></ROW><ROW><id>9446566</id><snippet>/path/to/my</snippet></ROW><ROW><id>9446566</id><snippet>source bin/activate</snippet></ROW><ROW><id>9446566</id><snippet>args = ['manage.py', 'runserver', '--settings=/path/to/my/djsite/settings.py']
djsite.manage.execute_manager(djsite.manage.settings, args)
</snippet></ROW><ROW><id>9446601</id><snippet>__add__()</snippet></ROW><ROW><id>9446601</id><snippet>a + b
</snippet></ROW><ROW><id>9446601</id><snippet>type(a).__add__(a, b)
</snippet></ROW><ROW><id>9446601</id><snippet>__add__</snippet></ROW><ROW><id>9446601</id><snippet>a.__add__(b)</snippet></ROW><ROW><id>9446601</id><snippet>_define_arithmetic_attributes()</snippet></ROW><ROW><id>9446601</id><snippet>self.threshold</snippet></ROW><ROW><id>9446601</id><snippet>operation_wrapper()</snippet></ROW><ROW><id>9446601</id><snippet>_arithmetic_threshold</snippet></ROW><ROW><id>9446601</id><snippet>self.threshold</snippet></ROW><ROW><id>9446765</id><snippet>@retry(urllib2.URLError, tries=4, delay=3, backoff=2)
def urlopen_with_retry():
    return urllib2.urlopen("http://example.com")
</snippet></ROW><ROW><id>9446765</id><snippet>URLError</snippet></ROW><ROW><id>9446813</id><snippet>threading.local</snippet></ROW><ROW><id>9446813</id><snippet>local()</snippet></ROW><ROW><id>9446813</id><snippet>loc.parent</snippet></ROW><ROW><id>9446813</id><snippet>__init__</snippet></ROW><ROW><id>9446813</id><snippet>run()</snippet></ROW><ROW><id>9446875</id><snippet>find()</snippet></ROW><ROW><id>9446875</id><snippet># html is your input string
start = html.find( '&lt;td class="ml_subject"&gt;&lt;a href="?tab=inbox&gt;' )
end = html.find( '&lt;/a&gt;&lt;/td&gt;', start )
result = html[start:end]
</snippet></ROW><ROW><id>9447060</id><snippet>sudo apt-get remove python3
sudo apt-get install python3
</snippet></ROW><ROW><id>9447060</id><snippet>sudo apt-get --reinstall install python3
</snippet></ROW><ROW><id>9447152</id><snippet> class House_Type(models.Model):
      name = models.CharField(...)


 class House_Option(models.Model):
      name = models.CharField(...)
      type = models.ForeignKey(House_Type)

 class Order(models.Model):
      ...
      choices = models.ManyToManyField(House_Option, through='Order_options')
      ...

 class Order_options(models.Model):
      class Meta:
          unique_together = ('order', 'option__type')

      ...
      order = models.ForeignKey(Order)
      option = models.ForeignKey(House_Option)
      ...
</snippet></ROW><ROW><id>9447152</id><snippet>from django.core.exceptions import ValidationError, NON_FIELD_ERRORS

class Order_options(models.Model):
    ...
    def validate_unique(self, exclude = None):
        super(Order_options, self).validate_unique(exclude)

        options = { 'order__id' : self.order.id, 'option__type' : 'self.option.type' }
        objs = Order_options.objects.exclude(id=self.id) if self.id else Order_options.objects
        if objs.filter(**options).exists():
            raise ValidationError({NON_FIELD_ERRORS: ['Error: {0} option type already exists'.format(self.option.type)]})
    ...
</snippet></ROW><ROW><id>9447205</id><snippet>global</snippet></ROW><ROW><id>9447205</id><snippet>foo3()</snippet></ROW><ROW><id>9447205</id><snippet>a</snippet></ROW><ROW><id>9447205</id><snippet>b</snippet></ROW><ROW><id>9447205</id><snippet>a = b</snippet></ROW><ROW><id>9447205</id><snippet>b</snippet></ROW><ROW><id>9447205</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>9447726</id><snippet>%</snippet></ROW><ROW><id>9447726</id><snippet>__getitem__()</snippet></ROW><ROW><id>9447726</id><snippet>class Mapper(object):
    def __getitem__(self, item):
        return item   

print 'Hello, %(first-name)s!' % Mapper()
</snippet></ROW><ROW><id>9447726</id><snippet>Hello, first-name!
</snippet></ROW><ROW><id>9447770</id><snippet>from operator import itemgetter

list_to_sort=[('89372', 2), ('89373', 1), ('89374', 1), ('89375', 1), ('89376', 1),     ('89377', 1), ('228055', 1), ('228054', 1), ('228057', 2), ('228056', 1), ('228051', 1), ('228050', 1),('228053', 1), ('203184', 6), ('228059', 1), ('228058', 1), ('89370', 2), ('89371', 3), ('89372', 2), ('89373', 1), ('89374', 1), ('89375', 1), ('89376', 1), ('89377', 1)]
print list_to_sort

list_to_sort.sort()
print list_to_sort # badly sorted as described

list_to_sort.sort(key=itemgetter(0))
print list_to_sort # badly sorted as described (same as above)

list_to_sort.sort(key=lambda x: int(x[0]))
print list_to_sort # sorted well

list_to_sort.sort(key=lambda x: int(x[0]), reverse=True)
print list_to_sort # sorted well in reverse
</snippet></ROW><ROW><id>9447770</id><snippet>iteritems()</snippet></ROW><ROW><id>9447770</id><snippet>dict_List = [(x, FID_GC_dict[x]) for x in FID_GC_dict.keys()]

dict_List = [(k,v) for k,v in FID_GC_dict.iteritems()]
</snippet></ROW><ROW><id>9447775</id><snippet>pymongo</snippet></ROW><ROW><id>9447775</id><snippet>pymongo</snippet></ROW><ROW><id>9447775</id><snippet>from werkzeug.wrappers import Response
from werkzeug.exceptions import NotFound

Users = pymongo.Connection("localhost", 27017)["mydb"]["users"]


class User(Resource):

    def GET(self, request, username):
        spec = {
            "_id": username,
            "_meta.active": True
        }
        # this is a simple call to pymongo - really, do
        # we need anything else?
        doc = Users.find_one(spec)
        if not doc:
            return NotFound(username)
        payload, mimetype = representation(doc, request.accept)
        return Response(payload, mimetype=mimetype, status=200)

    def PUT(self, request, username):
        spec = {
            "_id": username,
            "_meta.active": True
        }
        operation = {
            "$set": request.json,
        }
        # this call to pymongo will return the updated document (implies safe=True)
        doc = Users.update(spec, operation, new=True)
        if not doc:
            return NotFound(username)
        payload, mimetype = representation(doc, request.accept)
        return Response(payload, mimetype=mimetype, status=200)
</snippet></ROW><ROW><id>9447775</id><snippet>Resource</snippet></ROW><ROW><id>9447775</id><snippet>class Resource(object):

    def GET(self, request, **kwargs):
        return NotImplemented()

    def HEAD(self, request, **kwargs):
        return NotImplemented()

    def POST(self, request, **kwargs):
        return NotImplemented()

    def DELETE(self, request, **kwargs):
        return NotImplemented()

    def PUT(self, request, **kwargs):
        return NotImplemented()

    def __call__(self, request, **kwargs):
        handler = getattr(self, request.method)
        return handler(request, **kwargs)
</snippet></ROW><ROW><id>9447775</id><snippet>WSGI</snippet></ROW><ROW><id>9447775</id><snippet>Werkzeug</snippet></ROW><ROW><id>9447775</id><snippet>Flask</snippet></ROW><ROW><id>9447775</id><snippet>Werkzeug</snippet></ROW><ROW><id>9447775</id><snippet>representation</snippet></ROW><ROW><id>9447775</id><snippet>Accept</snippet></ROW><ROW><id>9447775</id><snippet>application/json</snippet></ROW><ROW><id>9447775</id><snippet>text/html</snippet></ROW><ROW><id>9447775</id><snippet>Last-Modified</snippet></ROW><ROW><id>9447784</id><snippet>(x1y2 + x2y3 + x3y1 – y1x2 –y2x3 – y3x1) / 2</snippet></ROW><ROW><id>9447784</id><snippet>def area_of_triangle(points):
    (x1, y1), (x2, y2), (x3, y3) = points
    return abs(x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1) / 2
</snippet></ROW><ROW><id>9447784</id><snippet>def lop_triangle(points):
    triangle = [points[0], points[-1], points[-2]]
    polygon = points[:-1]
    return triangle, polygon
</snippet></ROW><ROW><id>9447784</id><snippet>def area_of_polygon(points):
    if len(points) == 3:
        return area_of_triangle(points)
    else:
        triangle, polygon = lop_triangle(points)
        return area_of_triangle(triangle) + area_of_polygon(polygon)
</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>area_of_polygon</snippet></ROW><ROW><id>9447784</id><snippet>def area_of_polygon(vertices):
    pairs = zip(vertices, vertices[1:] + vertices[0:1])
    return sum(x1 * y2 - y1 * x2 for (x1, y1), (x2, y2) in pairs) / 2
</snippet></ROW><ROW><id>9447821</id><snippet>&gt;&gt;&gt; f = (2, 3, 4, 5)
&gt;&gt;&gt; zip(f[:-1], f[1:])
[(2, 3), (3, 4), (4, 5)]
</snippet></ROW><ROW><id>9447821</id><snippet>&gt;&gt;&gt; from itertools import tee, izip
&gt;&gt;&gt; def pairwise(iterable):
...     "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
...     a, b = tee(iterable)
...     next(b, None)
...     return izip(a, b)
... 
&gt;&gt;&gt; tuple(pairwise(f))
((2, 3), (3, 4), (4, 5))
</snippet></ROW><ROW><id>9447838</id><snippet>Traceback (most recent call last):
  File "test.py", line 29, in &lt;module&gt;
    for thread in threading.enumerate():
NameError: name 'threading' is not defined
</snippet></ROW><ROW><id>9447838</id><snippet>import threading</snippet></ROW><ROW><id>9447838</id><snippet>Time for 1 thread: 1.0224820000000001
time for 10 threads: 1.421281
</snippet></ROW><ROW><id>9447968</id><snippet>&gt;&gt;&gt; finger_names, finger_lengths
(('pointer', 'ring', 'pinky', 'middle', 'thumb'), (12, 13, 6, 15, 7))
&gt;&gt;&gt; s_tuples = sorted(zip(finger_names, finger_lengths), key=lambda x: x[1])
&gt;&gt;&gt; finger_names, finger_lengths = zip(*s_tuples)
&gt;&gt;&gt; finger_names, finger_lengths
(('pinky', 'thumb', 'pointer', 'ring', 'middle'), (6, 7, 12, 13, 15))
</snippet></ROW><ROW><id>9447968</id><snippet>key</snippet></ROW><ROW><id>9447968</id><snippet>zip(*s_tuples)</snippet></ROW><ROW><id>9447968</id><snippet>finger_lengths, finger_names = zip(*sorted(zip(finger_lengths, finger_names)))
</snippet></ROW><ROW><id>9447968</id><snippet>s_tuples = zip(finger_lengths, finger_names)
s_tuples.sort()
finger_lengths, finger_names = zip(*temp)
</snippet></ROW><ROW><id>9448055</id><snippet>list</snippet></ROW><ROW><id>9448055</id><snippet>__iter__()</snippet></ROW><ROW><id>9448055</id><snippet>iter()</snippet></ROW><ROW><id>9448055</id><snippet>def __iter__(self):
    return iter(self.list)
</snippet></ROW><ROW><id>9448055</id><snippet>X</snippet></ROW><ROW><id>9448055</id><snippet>list</snippet></ROW><ROW><id>9448055</id><snippet>object</snippet></ROW><ROW><id>9448324</id><snippet>cdf(x)</snippet></ROW><ROW><id>9448324</id><snippet>1 - cdf(x)</snippet></ROW><ROW><id>9448324</id><snippet>cdf(x) - cdf(y)</snippet></ROW><ROW><id>9448324</id><snippet>import math
print 0.5 * (1 + math.erf((x - mean)/math.sqrt(2 * standard_dev**2)))
</snippet></ROW><ROW><id>9448324</id><snippet>mean</snippet></ROW><ROW><id>9448324</id><snippet>standard_dev</snippet></ROW><ROW><id>9448324</id><snippet>cdf(x)</snippet></ROW><ROW><id>9448324</id><snippet>1 - cdf(x)</snippet></ROW><ROW><id>9448409</id><snippet>for key in sorted(d):
</snippet></ROW><ROW><id>9448648</id><snippet>sys.stdin.fileno()</snippet></ROW><ROW><id>9448648</id><snippet>poller = zmq.Poller()
poller.register(sys.stdin, zmq.POLLIN)
poller.register(mysocket, zmq.POLLIN)
evts = dict(poller.poll(1000))
stdin_ready = evts.get(sys.stdin.fileno(), False)
socket_ready = evts.get(mysocket, False)
</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls import pattern</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls.defaults import pattern</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls import pattern</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls.defaults import pattern</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls import...</snippet></ROW><ROW><id>9448661</id><snippet>urls.py</snippet></ROW><ROW><id>9448661</id><snippet>django-admin.py startproject</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls.defaults import...</snippet></ROW><ROW><id>9448661</id><snippet>polls/urls.py</snippet></ROW><ROW><id>9448661</id><snippet>from django.conf.urls import...</snippet></ROW><ROW><id>9448663</id><snippet>return result 
</snippet></ROW><ROW><id>9449025</id><snippet>help(sio.savemat)</snippet></ROW><ROW><id>9449025</id><snippet>savemat(file_name, mdict, appendmat=True, format='5', long_field_names=False, do_compression=False, oned_as=None)
    Save a dictionary of names and arrays into a MATLAB-style .mat file.
[...]
    mdict : dict
        Dictionary from which to save matfile variables.
</snippet></ROW><ROW><id>9449025</id><snippet>.items()</snippet></ROW><ROW><id>9449025</id><snippet>&gt;&gt;&gt; from numpy import zeros
&gt;&gt;&gt; from scipy import io as sio
&gt;&gt;&gt; 
&gt;&gt;&gt; R = zeros([8,8,530],float)
&gt;&gt;&gt; R += 12.3
&gt;&gt;&gt; 
&gt;&gt;&gt; sio.savemat('R.mat', {'R': R})
&gt;&gt;&gt; 
&gt;&gt;&gt; S = sio.loadmat('R.mat')
&gt;&gt;&gt; S
{'R': array([[[ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        ..., 

        ..., 
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3]]]), '__version__': '1.0', '__header__': 'MATLAB 5.0 MAT-file Platform: posix, Created on: Sat Feb 25 18:16:02 2012', '__globals__': []}
&gt;&gt;&gt; S['R']
array([[[ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        ..., 

        ..., 
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3],
        [ 12.3,  12.3,  12.3, ...,  12.3,  12.3,  12.3]]])
</snippet></ROW><ROW><id>9449081</id><snippet>reduce</snippet></ROW><ROW><id>9449119</id><snippet>&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; 
&gt;&gt;&gt; d = defaultdict(set)
&gt;&gt;&gt; 
&gt;&gt;&gt; for i in range(10):
...     el = randint(0, 5)
...     d[el].add(randint(0,10))
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'set'&gt;, {0: set([2]), 1: set([7]), 2: set([8, 9, 5, 7]), 
3: set([1]), 4: set([1, 3, 4])})
&gt;&gt;&gt; d[0]
set([2])
&gt;&gt;&gt; d[2]
set([8, 9, 5, 7])
</snippet></ROW><ROW><id>9449188</id><snippet>for downline in User.query(User.sponsor == distributor.key).fetch(99999999):
    logging.info('downline: %s' %str(downline))
    for person in downline:
        downlinestack.append(User.query(User.sponsor == person.key).fetch(99999999))
        logging.info('person: %s' %str(person.key.id()))
</snippet></ROW><ROW><id>9449194</id><snippet>\xA0</snippet></ROW><ROW><id>9449194</id><snippet>\xA0</snippet></ROW><ROW><id>9449194</id><snippet>.decode('cp1252')</snippet></ROW><ROW><id>9449194</id><snippet>'utf-8'</snippet></ROW><ROW><id>9449194</id><snippet>&lt;meta http-equiv="Content-Type"&gt;</snippet></ROW><ROW><id>9449226</id><snippet>union_set = set()
union_set.update(*l)
</snippet></ROW><ROW><id>9449226</id><snippet>union_set = set.union(*l)
</snippet></ROW><ROW><id>9449301</id><snippet>jsonData = json.JSONDecoder('latin1').decode(html)
</snippet></ROW><ROW><id>9449301</id><snippet>html</snippet></ROW><ROW><id>9449438</id><snippet>lower_a.T</snippet></ROW><ROW><id>9449438</id><snippet>lower_a</snippet></ROW><ROW><id>9449438</id><snippet>zeros()</snippet></ROW><ROW><id>9449438</id><snippet>from numpy import *</snippet></ROW><ROW><id>9449438</id><snippet>from raveler import *</snippet></ROW><ROW><id>9449506</id><snippet>gc</snippet></ROW><ROW><id>9449516</id><snippet>*</snippet></ROW><ROW><id>9449600</id><snippet>&gt;&gt;&gt; patt = re.compile("foo (?P&lt;name&gt;[0-9]+)?")
&gt;&gt;&gt; patt.search("blah foo 999 bar").groupdict()
{'name': '999'}
&gt;&gt;&gt; patt.search("blah foo bar").groupdict()
{'name': None}
</snippet></ROW><ROW><id>9449600</id><snippet>prefix (?P&lt;optional1&gt;\[.*?\])? same-words \((?P&lt;date&gt;.*?)\)(?P&lt;optional2&gt; \[.*?\])?: \((?P&lt;g3&gt;.*?)\) END
</snippet></ROW><ROW><id>9449600</id><snippet>d = patt.search(str).groupdict()
g2 = d["optional1"] if d["optional1"] is not None else d["optional2"]
</snippet></ROW><ROW><id>9449684</id><snippet>class Country:
    def __init__(self, population, literacy, firms, area, populationDensity):
        (self.population, self.literacy, self.firms, self.area, self.populationDensity) = (population, literacy, firms, area, populationDensity)
</snippet></ROW><ROW><id>9449713</id><snippet>outfile.record(*row)
</snippet></ROW><ROW><id>9449713</id><snippet>functiontakingkeywordarguments(**mydict)
</snippet></ROW><ROW><id>9449738</id><snippet>python -i -c ""</snippet></ROW><ROW><id>9449738</id><snippet>python -i ~/.pythonrc.py</snippet></ROW><ROW><id>9449783</id><snippet>string.py</snippet></ROW><ROW><id>9449783</id><snippet>string.py</snippet></ROW><ROW><id>9449783</id><snippet>import string
print string
</snippet></ROW><ROW><id>9449783</id><snippet>csvimport_orig.py</snippet></ROW><ROW><id>9449783</id><snippet>&lt;module 'string' from '/usr/lib/python2.7/string.pyc'&gt;
</snippet></ROW><ROW><id>9449783</id><snippet>/Library/Frameworks/etc.</snippet></ROW><ROW><id>9449783</id><snippet>&lt;module 'string' from 'string.py'&gt;
</snippet></ROW><ROW><id>9449783</id><snippet>string.py</snippet></ROW><ROW><id>9449783</id><snippet>string.py</snippet></ROW><ROW><id>9449852</id><snippet>class PersistentList(list):
    def __init__(self, *args, **kwargs):
        for attr in ('append', 'extend', 'insert', 'pop', 'remove', 'reverse', 'sort'):
            setattr(self, attr, self._autosave(getattr(self, attr))
        list.__init__(self, *args, **kwargs)
    def _autosave(self, func):
        @wraps(func)
        def _func(*args, **kwargs):
            ret = func(*args, **kwargs)
            self._save()
            return ret 
        return _func
</snippet></ROW><ROW><id>9449865</id><snippet>'''why am I not like this?'''
for coord2 in circleCoordCenter:
    if distance(midpoint(coord),coord2) &lt; BALL_DIAMETER():
        coord = randomCircleCoord()
        return checkCircleCoord(coord)
        ^^^^^^
</snippet></ROW><ROW><id>9450036</id><snippet>urllib2</snippet></ROW><ROW><id>9450036</id><snippet>httplib</snippet></ROW><ROW><id>9450036</id><snippet>class httplib.HTTPConnection(host[, port[, strict[, timeout[, source_address]]]])</snippet></ROW><ROW><id>9450036</id><snippet>source_address</snippet></ROW><ROW><id>9450036</id><snippet>urllib2</snippet></ROW><ROW><id>9450036</id><snippet>HTTPHandler</snippet></ROW><ROW><id>9450036</id><snippet>urllib2.py</snippet></ROW><ROW><id>9450036</id><snippet>AbstractHTTPHandler</snippet></ROW><ROW><id>9450036</id><snippet>class AbstractHTTPHandler(BaseHandler):
    # ...
    def do_open(self, http_class, req):
        # ...
        h = http_class(host, timeout=req.timeout) # will parse host:port
</snippet></ROW><ROW><id>9450036</id><snippet>http_class</snippet></ROW><ROW><id>9450036</id><snippet>httplib.HTTPConnection</snippet></ROW><ROW><id>9450036</id><snippet>urllib2.py</snippet></ROW><ROW><id>9450036</id><snippet>        h = http_class(host, timeout=req.timeout, source_address=(req.origin_req_host,0))
</snippet></ROW><ROW><id>9450068</id><snippet># M is a connected IMAP4 instance...
typ, msgnums = M.search(None, 'FROM', '"LDJ"')
</snippet></ROW><ROW><id>9450068</id><snippet>print(type(typ))
print(dir(typ))
print(type(msgnums))
print(dir(msgnums))
</snippet></ROW><ROW><id>9450254</id><snippet> from scipy import eye
 from scipy.integrate import ode

 y0, t0 = [1.0j, 2.0], 0

 def f(t, y, arg1):
     return [1j*arg1*y[0] + y[1], -arg1*y[1]**2]
 def jac(t, y, arg1):
     return [[1j*arg1, 1], [0, -arg1*2*y[1]]]
 r = ode(f, jac).set_integrator('zvode', method='bdf', with_jacobian=True)
 r.set_initial_value(y0, t0).set_f_params(2.0).set_jac_params(2.0)
 t1 = 10
 dt = 1
 while r.successful() and r.t &lt; t1:
     r.integrate(r.t+dt)
     print r.t, r.y
</snippet></ROW><ROW><id>9450254</id><snippet>ydot = f(t,y)</snippet></ROW><ROW><id>9450254</id><snippet>def derv()</snippet></ROW><ROW><id>9450254</id><snippet>derv(t,y)</snippet></ROW><ROW><id>9450254</id><snippet>y</snippet></ROW><ROW><id>9450254</id><snippet>derv(t,y)</snippet></ROW><ROW><id>9450254</id><snippet>Y = numpy.reshape(y,(num_rows,num_cols));
</snippet></ROW><ROW><id>9450254</id><snippet>num_rows*num_cols = 8</snippet></ROW><ROW><id>9450254</id><snippet>out = numpy.reshape(Y,(8,1));
</snippet></ROW><ROW><id>9450593</id><snippet>pyramid.debug_authorization</snippet></ROW><ROW><id>9450593</id><snippet>pyramid.security.effective_principals(request)</snippet></ROW><ROW><id>9450593</id><snippet>from pyramid.httpexceptions import HTTPSeeOther
from pyramid.security import authenticated_userid
from pyramid.view import forbidden_view_config

@forbidden_view_config()
def forbidden_view(request):
    if authenticated_userid(request):
        # user is already logged in, they are really forbidden
        return request.context # the forbidden 403 response

    url = request.route_url('login', _query={'came_from': request.path})
    return HTTPSeeOther(url)
</snippet></ROW><ROW><id>9450593</id><snippet>came_from</snippet></ROW><ROW><id>9450593</id><snippet>request.GET['came_from']</snippet></ROW><ROW><id>9450666</id><snippet>handle_data</snippet></ROW><ROW><id>9450666</id><snippet>def handle_data(self, data):
    tag = self.get_starttag_text().replace("&lt;","").replace("&gt;","")
    tag_words = tag.split(" ")
    if len(tag_words) &gt; 0 and tag_words[0].endswith("title"):
        print data
</snippet></ROW><ROW><id>9450673</id><snippet>5.3.4 Calls</snippet></ROW><ROW><id>9450673</id><snippet>7.6 Function definitions</snippet></ROW><ROW><id>9450673</id><snippet>def fn (a, b, c = 1):
    return a + b + c

print fn (1, 2)                # returns 4, positional and default.
print fn (1, 2, 3)             # returns 6, positional.
print fn (c = 7, b = 2, a = 0) # returns 9, named.
print fn (b = 2, a = 0)        # returns 3, named and default.
print fn (5, c = 2, b = 0)     # returns 7, positional and named.
print fn (8, b = 0)            # returns 9, positional, named and default.
</snippet></ROW><ROW><id>9450673</id><snippet>=</snippet></ROW><ROW><id>9450740</id><snippet>def in_dictionary(word):
  for line in open('words', 'r').readlines():
    if word == line.strip():
      return True

  return False
</snippet></ROW><ROW><id>9450740</id><snippet>in</snippet></ROW><ROW><id>9450740</id><snippet>==</snippet></ROW><ROW><id>9450740</id><snippet>.strip()</snippet></ROW><ROW><id>9450740</id><snippet>hello</snippet></ROW><ROW><id>9450740</id><snippet>{space}hello</snippet></ROW><ROW><id>9450760</id><snippet>for</snippet></ROW><ROW><id>9450760</id><snippet>for</snippet></ROW><ROW><id>9450760</id><snippet>while</snippet></ROW><ROW><id>9450760</id><snippet>i = 0
while i &lt; 7:
    if someCondition(i):
        i = 5
    i += 1
</snippet></ROW><ROW><id>9450760</id><snippet>continue</snippet></ROW><ROW><id>9450760</id><snippet>continue</snippet></ROW><ROW><id>9450760</id><snippet>for</snippet></ROW><ROW><id>9450760</id><snippet>continue</snippet></ROW><ROW><id>9450760</id><snippet>try</snippet></ROW><ROW><id>9450760</id><snippet>finally</snippet></ROW><ROW><id>9450760</id><snippet>i = 0
while i &lt; 7:
    try:
        if someCondition(i):
            i = 5
        elif otherCondition(i):
            continue
        print 'i = %d' % i
    finally:
        i += 1
</snippet></ROW><ROW><id>9450951</id><snippet>&gt;&gt;&gt; print(1.0/10)
0.1
</snippet></ROW><ROW><id>9451056</id><snippet>test.py 're.sub("e", "E", "hello"))'
</snippet></ROW><ROW><id>9451056</id><snippet>test.py</snippet></ROW><ROW><id>9451056</id><snippet>import re
import XXX
import YYY
import sys

exec sys.argv[1]
</snippet></ROW><ROW><id>9451135</id><snippet>Keyword</snippet></ROW><ROW><id>9451135</id><snippet>list1</snippet></ROW><ROW><id>9451135</id><snippet>list2</snippet></ROW><ROW><id>9451135</id><snippet>list1</snippet></ROW><ROW><id>9451135</id><snippet>list2</snippet></ROW><ROW><id>9451135</id><snippet>Keyword</snippet></ROW><ROW><id>9451135</id><snippet>common = list((set(list1) | set(list2)) &amp; set(Keyword))
</snippet></ROW><ROW><id>9451135</id><snippet>lists = [list1, list2, list3, list4, list5, list6, list7, list8, list9, list10]
common = list(set().union(*lists).intersection(Keyword))
</snippet></ROW><ROW><id>9451158</id><snippet>node.left</snippet></ROW><ROW><id>9451158</id><snippet>node.right</snippet></ROW><ROW><id>9451158</id><snippet>right</snippet></ROW><ROW><id>9451158</id><snippet>left</snippet></ROW><ROW><id>9451158</id><snippet>node.left</snippet></ROW><ROW><id>9451158</id><snippet>node.right</snippet></ROW><ROW><id>9451373</id><snippet>Class User(Base)
    ...

# Initialize database schema (create tables)
Base.metadata.create_all(engine)
</snippet></ROW><ROW><id>9451466</id><snippet>&lt;input id="myTextField" name="myTextField" type="text" size="50" value="Enter a new keyword for rosebud to crawl!"&gt;
</snippet></ROW><ROW><id>9451466</id><snippet>var value = $("myTextField").value;
</snippet></ROW><ROW><id>9451466</id><snippet>$_GET['myTextField']
</snippet></ROW><ROW><id>9451776</id><snippet>import numpy as np
import matplotlib as mpl
from matplotlib import pyplot
data = np.floor(np.random.random((10,10)) * 6)
cmap = mpl.colors.ListedColormap(['w', 'b', 'g', 'y', '#ff8c00', 'r'])
norm = mpl.colors.BoundaryNorm([0,1,2,3,4,5,6], cmap.N)
pyplot.imshow(data, cmap=cmap, norm=norm, interpolation='none')
pyplot.colorbar()
pyplot.show()
</snippet></ROW><ROW><id>9451873</id><snippet>''</snippet></ROW><ROW><id>9451947</id><snippet>.start()</snippet></ROW><ROW><id>9451947</id><snippet>.run()</snippet></ROW><ROW><id>9451947</id><snippet>.__init__()</snippet></ROW><ROW><id>9451947</id><snippet>Thread</snippet></ROW><ROW><id>9451947</id><snippet>#!/usr/bin/env python3
import sys
import time
from threading import Thread

def task(tid):
    print("P({}) sleeping".format(tid))
    time.sleep(5)
    print("P({}) entering CS".format(tid))
    # CS
    print("P({}) exiting CS".format(tid))

# Scan command line arguments
thread_count = int(sys.argv[1])

threads = [Thread(target=task, args=(tid,)) for tid in range(thread_count)]
for t in threads:
    t.daemon = True # die if the program exits
    t.start() # start the thread

# wait for completion
for t in threads: t.join()
</snippet></ROW><ROW><id>9451947</id><snippet>P(0) sleeping
P(1) sleeping
P(2) sleeping
P(2) entering CS
P(2) exiting CS
P(0) entering CS
P(0) exiting CS
P(1) entering CS
P(1) exiting CS
</snippet></ROW><ROW><id>9451947</id><snippet>task()</snippet></ROW><ROW><id>9451947</id><snippet>from multiprocessing import Process as Thread</snippet></ROW><ROW><id>9452040</id><snippet>'Hello'</snippet></ROW><ROW><id>9452040</id><snippet>['A', 'B']</snippet></ROW><ROW><id>9452040</id><snippet>'AHelloB'</snippet></ROW><ROW><id>9452040</id><snippet>' '.join(['Hello', 'world'])</snippet></ROW><ROW><id>9452116</id><snippet>/?link=http://a-link.com
</snippet></ROW><ROW><id>9452116</id><snippet>/?link=http%3A%2F%2Fa-link.com
</snippet></ROW><ROW><id>9452122</id><snippet>str.replace()</snippet></ROW><ROW><id>9452333</id><snippet>__str__</snippet></ROW><ROW><id>9452370</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; I, J = np.array(list(combinations([0,1,2], 2))).T
&gt;&gt;&gt; result = np.logical_and(np_data[:, I], np_data[:, J])
&gt;&gt;&gt; result
array([[False, False,  True],
       [False,  True, False],
       [False,  True, False]], dtype=bool)
&gt;&gt;&gt; result.T
array([[False, False, False],
       [False,  True,  True],
       [ True, False, False]], dtype=bool)
</snippet></ROW><ROW><id>9452378</id><snippet>Entry</snippet></ROW><ROW><id>9452378</id><snippet>show</snippet></ROW><ROW><id>9452378</id><snippet>*</snippet></ROW><ROW><id>9452378</id><snippet>*</snippet></ROW><ROW><id>9452378</id><snippet>•</snippet></ROW><ROW><id>9452378</id><snippet>"\u2022"</snippet></ROW><ROW><id>9452665</id><snippet>DateField</snippet></ROW><ROW><id>9452665</id><snippet>datetime</snippet></ROW><ROW><id>9452665</id><snippet>from django.db import connection

cursor = connection.cursor()
cursor.execute(" SELECT WEEK(`time`) AS 'week', COUNT(*) AS 'count' FROM %s GROUP BY WEEK(`time`) ORDER BY WEEK(`time`)" % EventOccurrence._meta.db_table, [])

data = []
results = cursor.fetchall()
for i, row in enumerate(results[:-1]):
    data.append(row)

    week = row[0] + 1
    next_week = results[i+1][0]
    while week &lt; next_week:
        data.append( (week, 0) )
        week += 1
data.append( results[-1] )

print data
</snippet></ROW><ROW><id>9453031</id><snippet>ans^(1/2)
</snippet></ROW><ROW><id>9453031</id><snippet>^</snippet></ROW><ROW><id>9453031</id><snippet>**</snippet></ROW><ROW><id>9453031</id><snippet>1/2</snippet></ROW><ROW><id>9453031</id><snippet>0</snippet></ROW><ROW><id>9453031</id><snippet>ans ** 0.5
</snippet></ROW><ROW><id>9453031</id><snippet>math.hypot</snippet></ROW><ROW><id>9453031</id><snippet>import math

def distance(a, b):
    return math.hypot(b[0] - a[0], b[1] - a[1])
</snippet></ROW><ROW><id>9453116</id><snippet>a = [100, 200, 300, 400]
## The a bit more formatting is used because the list contains integers, i.e., the join with string casting
stmt = 'select * from books where number_of_pages in ({0})'.format(', '.join([str(v) for v in a]))

print stmt
&gt;&gt;&gt; select * from books where number_of_pages in (100, 200, 300, 400)
</snippet></ROW><ROW><id>9453295</id><snippet>urlopen().read()</snippet></ROW><ROW><id>9453295</id><snippet>text = urllib.request.urlopen(prefix + nothing).read().decode() #note: utf-8
</snippet></ROW><ROW><id>9453295</id><snippet>Content-Type</snippet></ROW><ROW><id>9453295</id><snippet>&lt;meta&gt;</snippet></ROW><ROW><id>9453295</id><snippet>text/html</snippet></ROW><ROW><id>9453481</id><snippet>def uploadmodel_file_upload_to(instance, filename):
    return 'uploads/%s/%s' % (instance.user.username, filename)

class UploadModel(models.Model):
    user = models.ForeignKey('auth.user')
    file = models.FileField(upload_to=uploadmodel_file_upload_to)
</snippet></ROW><ROW><id>9453517</id><snippet>.serve_forever()</snippet></ROW><ROW><id>9453517</id><snippet>SocketServer</snippet></ROW><ROW><id>9453517</id><snippet>.shutdown()</snippet></ROW><ROW><id>9453517</id><snippet>quit</snippet></ROW><ROW><id>9453650</id><snippet>zip</snippet></ROW><ROW><id>9453650</id><snippet>zip([1, 2, 3], [4, 5, 6]) == [(1, 4), (2, 5), (3, 6)]</snippet></ROW><ROW><id>9453650</id><snippet>domesticated = ['cow', 'sheep', 'pig']
pets = ['cat', 'dog']
wildlife = ['giraffe', 'lion', 'panda']

masterList = zip([domesticated, pets, wildlife],  ['off', 'on', 'on'])

def currentLists():
    activeList = []
    for e in masterList:
        if e[1] == 'on':
            activeList += e[0]

    return activeList
</snippet></ROW><ROW><id>9453774</id><snippet>field</snippet></ROW><ROW><id>9453774</id><snippet>{% for field in f.visible_fields %}
</snippet></ROW><ROW><id>9453774</id><snippet>boundfield.field.to_python(boundfield.value())
</snippet></ROW><ROW><id>9453774</id><snippet>from django import template

register = template.Library()

@register.filter
def to_python(boundfield):
    return boundfield.field.to_python(boundfield.value())
</snippet></ROW><ROW><id>9453774</id><snippet>{% load your_template_tags %}

{% for field in form.visible_fields %} 
    &lt;tr&gt;
        &lt;td&gt;{{ field.label_tag }}&lt;/td&gt;
        &lt;td&gt;{{ field|to_python }}&lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>9453840</id><snippet>&gt;&gt;&gt; s = 'abc{0}efg'.format('d')
&gt;&gt;&gt; s
'abcdefg'
</snippet></ROW><ROW><id>9453840</id><snippet>&gt;&gt;&gt; s = 'abc' + 'd' + 'efg'
&gt;&gt;&gt; s
'abcdefg'
</snippet></ROW><ROW><id>9453840</id><snippet>&gt;&gt;&gt; s = 'abc0efg'
&gt;&gt;&gt; s.replace('0', 'd')
'abcdefg'
</snippet></ROW><ROW><id>9453840</id><snippet>bytearray</snippet></ROW><ROW><id>9453840</id><snippet>&gt;&gt;&gt; b = bytearray('abc0efg')
&gt;&gt;&gt; b[3] = 'd'
&gt;&gt;&gt; b
bytearray(b'abcdefg')
</snippet></ROW><ROW><id>9453840</id><snippet>&gt;&gt;&gt; l = list('abc0efg')
&gt;&gt;&gt; l[3] = 'd'
&gt;&gt;&gt; l
['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; ''.join(l)
'abcdefg'
</snippet></ROW><ROW><id>9453840</id><snippet>re</snippet></ROW><ROW><id>9454036</id><snippet>Customer.objects.annotate(buy_count=Count('invoice')).all()
</snippet></ROW><ROW><id>9454067</id><snippet>offset = len(lines) / 2

if offset % 2 != 0:
    # ensure that the second col does not contain more than the first one
    offset += 1

lines_col0 = lines[:offset]
lines_col1 = lines[offset:]
</snippet></ROW><ROW><id>9454218</id><snippet>itertools.product</snippet></ROW><ROW><id>9454218</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for tup in itertools.product(range(5), repeat=2):
...     d[tup] = tup
... 
&gt;&gt;&gt; d
{(1, 3): (1, 3), (3, 0): (3, 0), (2, 1): (2, 1), (0, 3): (0, 3), (4, 0): (4, 0), 
 (1, 2): (1, 2), (3, 3): (3, 3), (4, 4): (4, 4), (2, 2): (2, 2), (4, 1): (4, 1), 
 (1, 1): (1, 1), (3, 2): (3, 2), (0, 0): (0, 0), (0, 4): (0, 4), (1, 4): (1, 4), 
 (2, 3): (2, 3), (4, 2): (4, 2), (1, 0): (1, 0), (0, 1): (0, 1), (3, 1): (3, 1), 
 (2, 4): (2, 4), (2, 0): (2, 0), (4, 3): (4, 3), (3, 4): (3, 4), (0, 2): (0, 2)}
</snippet></ROW><ROW><id>9454218</id><snippet>scipy</snippet></ROW><ROW><id>9454218</id><snippet>&gt;&gt;&gt; for tup in itertools.product(range(5), repeat=2):
...     if tup[0] == tup[1]:
...         d[tup] = tup
... 
&gt;&gt;&gt; d
{(3, 3): (3, 3), (0, 0): (0, 0), (1, 1): (1, 1), (4, 4): (4, 4), (2, 2): (2, 2)}

&gt;&gt;&gt; for tup in itertools.product(range(5), range(2)):
...     print d.get(tup)
... 
(0, 0)
None
None
(1, 1)
None
None
None
None
None
None
</snippet></ROW><ROW><id>9454218</id><snippet>itertools.product</snippet></ROW><ROW><id>9454218</id><snippet>&gt;&gt;&gt; for tup in itertools.product(range(3), [2], range(3)):
...     print tup
... 
(0, 2, 0)
(0, 2, 1)
(0, 2, 2)
(1, 2, 0)
(1, 2, 1)
(1, 2, 2)
(2, 2, 0)
(2, 2, 1)
(2, 2, 2)
</snippet></ROW><ROW><id>9454336</id><snippet>class FooModelResource(ModelResource):
    file = fields.FileField()

    class Meta:
        queryset = FooModel.objects.all()

    def override_urls(self):
        return [
            url(r"^(?P&lt;resource_name&gt;%s)/(?P&lt;pk&gt;\w[\w/-]*)/download%s$" % (self._meta.resource_name, trailing_slash()), self.wrap_view('download_detail'), name="api_download_detail"),
            ]

    def download_detail(self, request, **kwargs):
        """
        Send a file through TastyPie without loading the whole file into
        memory at once. The FileWrapper will turn the file object into an
        iterator for chunks of 8KB.

        No need to build a bundle here only to return a file, lets look into the DB directly
        """
        filename = self._meta.queryset.get(pk=kwargs[pk]).file
        wrapper = FileWrapper(file(filename))
        response = HttpResponse(wrapper, content_type='text/plain') #or whatever type you want there
        response['Content-Length'] = os.path.getsize(filename)
        return response
</snippet></ROW><ROW><id>9454336</id><snippet>resource_uri</snippet></ROW><ROW><id>9454369</id><snippet>pytz</snippet></ROW><ROW><id>9454369</id><snippet>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; pytz.all_timezones ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara',
'Africa/Asmera'....
</snippet></ROW><ROW><id>9454369</id><snippet>CharField</snippet></ROW><ROW><id>9454381</id><snippet>locals()</snippet></ROW><ROW><id>9454381</id><snippet>globals()</snippet></ROW><ROW><id>9454381</id><snippet>class Test:
    @staticmethod
    def method():
        return 'called static method'

assert locals()['Test'].method() == 'called static method'
</snippet></ROW><ROW><id>9454412</id><snippet>#!/usr/bin/env python3

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtNetwork import *

PORT = 9999
SIZEOF_UINT32 = 4

class ServerDlg(QPushButton):

    def __init__(self, parent=None):
        super(ServerDlg, self).__init__(
                "&amp;Close Server", parent)
        self.setWindowFlags(Qt.WindowStaysOnTopHint)

        self.tcpServer = QTcpServer(self)               
        self.tcpServer.listen(QHostAddress("0.0.0.0"), PORT)
        self.connect(self.tcpServer, SIGNAL("newConnection()"), 
                    self.addConnection)
        self.connections = []

        self.connect(self, SIGNAL("clicked()"), self.close)
        font = self.font()
        font.setPointSize(24)
        self.setFont(font)
        self.setWindowTitle("Server")

    def addConnection(self):
        clientConnection = self.tcpServer.nextPendingConnection()
        clientConnection.nextBlockSize = 0
        self.connections.append(clientConnection)

        self.connect(clientConnection, SIGNAL("readyRead()"), 
                self.receiveMessage)
        self.connect(clientConnection, SIGNAL("disconnected()"), 
                self.removeConnection)
        self.connect(clientConnection, SIGNAL("error()"), 
                self.socketError)

    def receiveMessage(self):
        for s in self.connections:
            if s.bytesAvailable() &gt; 0:
                stream = QDataStream(s)
                stream.setVersion(QDataStream.Qt_4_2)

                if s.nextBlockSize == 0:
                    if s.bytesAvailable() &lt; SIZEOF_UINT32:
                        return
                    s.nextBlockSize = stream.readUInt32()
                if s.bytesAvailable() &lt; s.nextBlockSize:
                    return

                textFromClient = stream.readQString()
                s.nextBlockSize = 0
                self.sendMessage(textFromClient, 
                                 s.socketDescriptor())
                s.nextBlockSize = 0

    def sendMessage(self, text, socketId):
        for s in self.connections:
            if s.socketDescriptor() == socketId:
                message = "You&gt; {}".format(text)
            else:
                message = "{}&gt; {}".format(socketId, text)
            reply = QByteArray()
            stream = QDataStream(reply, QIODevice.WriteOnly)
            stream.setVersion(QDataStream.Qt_4_2)
            stream.writeUInt32(0)
            stream.writeQString(message)
            stream.device().seek(0)
            stream.writeUInt32(reply.size() - SIZEOF_UINT32)
            s.write(reply)

    def removeConnection(self):
        pass

    def socketError(self):
        pass


app = QApplication(sys.argv)
form = ServerDlg()
form.show()
form.move(0, 0)
app.exec_()
</snippet></ROW><ROW><id>9454412</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtNetwork import *

PORTS = (9998, 9999)
PORT = 9999
SIZEOF_UINT32 = 4

class Form(QDialog):

    def __init__(self, parent=None):
        super(Form, self).__init__(parent)

        # Ititialize socket
        self.socket = QTcpSocket()

        # Initialize data IO variables
        self.nextBlockSize = 0
        self.request = None

        # Create widgets/layout
        self.browser = QTextBrowser()
        self.lineedit = QLineEdit("Enter text here, dummy")
        self.lineedit.selectAll()
        self.connectButton = QPushButton("Connect")
        self.connectButton.setEnabled(True)
        layout = QVBoxLayout()
        layout.addWidget(self.browser)
        layout.addWidget(self.lineedit)
        layout.addWidget(self.connectButton)
        self.setLayout(layout)
        self.lineedit.setFocus()

        # Signals and slots for line edit and connect button
        self.lineedit.returnPressed.connect(self.issueRequest)
        self.connectButton.clicked.connect(self.connectToServer)

        self.setWindowTitle("Client")
        # Signals and slots for networking
        self.socket.readyRead.connect(self.readFromServer)
        self.socket.disconnected.connect(self.serverHasStopped)
        self.connect(self.socket,
                     SIGNAL("error(QAbstractSocket::SocketError)"),
                     self.serverHasError)

    # Update GUI
    def updateUi(self, text):
        self.browser.append(text)

    # Create connection to server
    def connectToServer(self):
        self.connectButton.setEnabled(False)
        self.socket.connectToHost("localhost", PORT)

    def issueRequest(self):
        self.request = QByteArray()
        stream = QDataStream(self.request, QIODevice.WriteOnly)
        stream.setVersion(QDataStream.Qt_4_2)
        stream.writeUInt32(0)
        stream.writeQString(self.lineedit.text())
        stream.device().seek(0)
        stream.writeUInt32(self.request.size() - SIZEOF_UINT32)
        self.socket.write(self.request)
        self.nextBlockSize = 0
        self.request = None
        self.lineedit.setText("")

    def readFromServer(self):
        stream = QDataStream(self.socket)
        stream.setVersion(QDataStream.Qt_4_2)

        while True:
            if self.nextBlockSize == 0:
                if self.socket.bytesAvailable() &lt; SIZEOF_UINT32:
                    break
                self.nextBlockSize = stream.readUInt32()
            if self.socket.bytesAvailable() &lt; self.nextBlockSize:
                break
            textFromServer = stream.readQString()
            self.updateUi(textFromServer)
            self.nextBlockSize = 0

    def serverHasStopped(self):
        self.socket.close()
        self.connectButton.setEnabled(True)

    def serverHasError(self):
        self.updateUi("Error: {}".format(
                self.socket.errorString()))
        self.socket.close()
        self.connectButton.setEnabled(True)


app = QApplication(sys.argv)
form = Form()
form.show()
app.exec_()
</snippet></ROW><ROW><id>9454456</id><snippet>-m &lt;module-name&gt;
     Search sys.path for the named module and execute its contents as the __main__ module.
</snippet></ROW><ROW><id>9454637</id><snippet>dict(zip(categories, series))
</snippet></ROW><ROW><id>9454637</id><snippet>{'A': 3, 'B': 5, 'C': 4}</snippet></ROW><ROW><id>9454637</id><snippet>categoriesMap = {}
for k, v in zip(categories, series):
    categoriesMap.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>9454637</id><snippet>{'A': [1, 3], 'B': [2, 5], 'C': [3]}</snippet></ROW><ROW><id>9454654</id><snippet>templates</snippet></ROW><ROW><id>9454654</id><snippet>templates_path = ["templates"]
</snippet></ROW><ROW><id>9454654</id><snippet>templates</snippet></ROW><ROW><id>9454654</id><snippet>layout.html</snippet></ROW><ROW><id>9454654</id><snippet>{% extends "!layout.html" %}

{%- block extrahead %} 
 &lt;script type="text/javascript"&gt;
       MathJax.Hub.Config({
           "HTML-CSS": {
               scale: 90
           }
       });
  &lt;/script&gt;      
{% endblock %}
</snippet></ROW><ROW><id>9454654</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>9454654</id><snippet>&lt;head&gt;</snippet></ROW><ROW><id>9454654</id><snippet>extrahead</snippet></ROW><ROW><id>9454659</id><snippet>import os.path
PROJECT_ROOT=os.path.abspath(os.path.dirname(__file__))
PROTECTED_MEDIA_ROOT=os.path.join(PROJECT_ROOT, 'protected_uploads')
</snippet></ROW><ROW><id>9454659</id><snippet>def uploadmodel_file_upload_to(instance, filename):
    return '%s/%s/%s' % (settings.PROTECTED_MEDIA_ROOT, instance.user.username,
        filename)
</snippet></ROW><ROW><id>9454659</id><snippet>import os 
import mimetypes

from django import shortcuts
from django import http
from django.conf import settings
from django.views.static import was_modified_since
from django.utils.http import http_date

from .models import *

def serve_upload(request, upload_id):
    upload = shortcuts.get_object_or_404(UploadModel, pk=upload_id)
    fullpath = upload.file.path

    if request.user != upload.user:
        return http.HttpResponseForbidden()

    statobj = os.stat(fullpath)
    mimetype, encoding = mimetypes.guess_type(fullpath)
    mimetype = mimetype or 'application/octet-stream'
    if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'),
                              statobj.st_mtime, statobj.st_size):
        return http.HttpResponseNotModified(mimetype=mimetype)
    response = http.HttpResponse(open(fullpath, 'rb').read(), mimetype=mimetype)
    response["Last-Modified"] = http_date(statobj.st_mtime)
    response["Content-Length"] = statobj.st_size
    if encoding:
        response["Content-Encoding"] = encoding
    return response
</snippet></ROW><ROW><id>9454659</id><snippet>url(r'serve_upload/(?P&lt;upload_id&gt;\d+)/$', 'serve_upload'),
</snippet></ROW><ROW><id>9454912</id><snippet>import pygame
from pygame.locals import *

import numpy
import numpy.linalg

from OpenGL.GL import *
from OpenGL.GL.shaders import *

RESOLUTION = (800,600)

POSITIONS = numpy.array([[-1.0, -1.0], [+1.0, -1.0], [-1.0, +1.0], [+1.0, +1.0]], dtype=numpy.float32)
TEXCOORDS = numpy.array([[0.0, 1.0], [1.0, 1.0], [0.0, 0.0], [1.0, 0.0]], dtype=numpy.float32)

from PIL import Image

tex0 = 0
tex1 = 0

def loadTexture(path):
    img = Image.open(path)
    img = img.convert("RGBA") 
    img_data = numpy.array(list(img.getdata()), numpy.int8)

    texture = glGenTextures(1)
    glPixelStorei(GL_UNPACK_ALIGNMENT,1)
    glBindTexture(GL_TEXTURE_2D, texture)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, img.size[0], img.size[1], 0, GL_RGBA, GL_UNSIGNED_BYTE, img_data)

    return texture

def init():
    global tex0
    global tex1

    tex0 = loadTexture("texture0.png")
    tex1 = loadTexture("texture1.png")

    glViewport(0, 0, *RESOLUTION)

    aspect = RESOLUTION[0]/float(RESOLUTION[1])

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-aspect, +aspect, -1.0, +1.0, -1.0, +1.0);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    glClearColor(0.0, 0.0, 0.0, 1.0);

    glVertexPointer(2, GL_FLOAT, 0, POSITIONS);
    glEnableClientState(GL_VERTEX_ARRAY);

    glClientActiveTexture(GL_TEXTURE0);
    glTexCoordPointer(2, GL_FLOAT, 0, TEXCOORDS); 
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);

    glClientActiveTexture(GL_TEXTURE1);
    glTexCoordPointer(2, GL_FLOAT, 0, TEXCOORDS);
    glEnableClientState(GL_TEXTURE_COORD_ARRAY);

def draw():
    glClear(GL_COLOR_BUFFER_BIT);

    glActiveTexture(GL_TEXTURE0);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, tex0);
    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);

    glActiveTexture(GL_TEXTURE1);
    glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, tex1);
    glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);

    glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

def main():
    pygame.init()

    screen = pygame.display.set_mode(RESOLUTION, OPENGL | DOUBLEBUF)

    init()

    while True:
        for event in pygame.event.get():
            if event.type == QUIT: return

        draw()

        pygame.display.flip()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9454999</id><snippet>print</snippet></ROW><ROW><id>9455202</id><snippet>python testcode.py arg1 arg2 arg3 arg4 and so on ...
</snippet></ROW><ROW><id>9455202</id><snippet>Omega_a = 'arg1'
Omega_b = 'arg2'
Delta_a = 'arg3'
Delta_b = 'arg4'
init_pop_a = 'and'
init_pop_b = 'so'
tstep = 'on'
tfinal = '...'
</snippet></ROW><ROW><id>9455202</id><snippet>input()</snippet></ROW><ROW><id>9455214</id><snippet>meta.Session.query(model.Theme).filter(model.Theme.id == model.Vote.post_id)
</snippet></ROW><ROW><id>9455214</id><snippet>model.Theme.id == model.VoteWarn.post_id</snippet></ROW><ROW><id>9455214</id><snippet>WHERE theme.id = vote.post_id</snippet></ROW><ROW><id>9455214</id><snippet>WHERE theme.id &lt;&gt; vote.post_id</snippet></ROW><ROW><id>9455395</id><snippet>for</snippet></ROW><ROW><id>9455395</id><snippet>range</snippet></ROW><ROW><id>9455395</id><snippet>for i in range(0, len(a)-2):</snippet></ROW><ROW><id>9455395</id><snippet>for i in (0, 1, 2)</snippet></ROW><ROW><id>9455442</id><snippet>def func(self):
    print "func"

class MyClass(object):
    myMethod = func
</snippet></ROW><ROW><id>9455442</id><snippet>class MyClass(object):
    pass

def func(self):
    print "func"

MyClass.myMethod = func
</snippet></ROW><ROW><id>9455557</id><snippet>open</snippet></ROW><ROW><id>9455557</id><snippet>None</snippet></ROW><ROW><id>9455557</id><snippet>open</snippet></ROW><ROW><id>9455557</id><snippet>_mech_open</snippet></ROW><ROW><id>9455557</id><snippet>class MechanizeSubclass(mechanize.Browser):
    ...
    def open(self, url, data=None,
             timeout=mechanize._sockettimeout._GLOBAL_DEFAULT_TIMEOUT):
        return mechanize.Browser.open(self, url, data, timeout=timeout)
</snippet></ROW><ROW><id>9455573</id><snippet>&gt;&gt;&gt; "%(a)s and %%(b)s" % {'a': 1}
'1 and %(b)s'
&gt;&gt;&gt; _ % {'b': 2}
'1 and 2'
</snippet></ROW><ROW><id>9455611</id><snippet>&gt;&gt;&gt; substitutions = ['ONE', 'TWO', 'THREE']
&gt;&gt;&gt; re.sub('@', lambda _: substitutions.pop(0), some_text)
'xxxxxxxONEyyyyyyyyyTWOzzzzzzzzzTHREE'
</snippet></ROW><ROW><id>9455611</id><snippet>&gt;&gt;&gt; substitutions = ['ONE', 'TWO', 'THREE']
&gt;&gt;&gt; subs = iter(substitutions)
&gt;&gt;&gt; re.sub('@', lambda _: next(subs), some_text)
'xxxxxxxONEyyyyyyyyyTWOzzzzzzzzzTHREE'
</snippet></ROW><ROW><id>9455640</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.randint(0,10)
1
</snippet></ROW><ROW><id>9455640</id><snippet>&gt;&gt;&gt; random.randint((0, 10))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: randint() takes exactly 3 arguments (2 given)
</snippet></ROW><ROW><id>9455640</id><snippet>&gt;&gt;&gt; queendamagenum = 1, 20
&gt;&gt;&gt; random.randint(*queendamagenum)
8
</snippet></ROW><ROW><id>9455773</id><snippet>set</snippet></ROW><ROW><id>9455773</id><snippet>str</snippet></ROW><ROW><id>9455773</id><snippet>list</snippet></ROW><ROW><id>9455773</id><snippet>&gt;&gt;&gt; sorted(raw_input("Type letters: "))
Type letters: foobar
['a', 'b', 'f', 'o', 'o', 'r']
</snippet></ROW><ROW><id>9455773</id><snippet>collections.Counter</snippet></ROW><ROW><id>9455773</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(raw_input("Type letters: "))
&gt;&gt;&gt; c
Counter({'o': 2, 'a': 1, 'r': 1, 'b': 1, 'f': 1})
&gt;&gt;&gt; sorted(c.elements())
['a', 'b', 'f', 'o', 'o', 'r']
</snippet></ROW><ROW><id>9455780</id><snippet>if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    Dialog = QtGui.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>9455780</id><snippet>main()</snippet></ROW><ROW><id>9455780</id><snippet>show()</snippet></ROW><ROW><id>9455780</id><snippet>class Dialog(QDialog)
    def __init__(self, parent):
        super(Dialog, self).__init__(parent)
        self.otherDialog = QDialog(parent=self)

        self.otherDialog.show()


if __name__ == "__main__":
    app = QApplication([])
    dialog = Dialog()
    dialog.show()
    app.exec_()
</snippet></ROW><ROW><id>9455780</id><snippet>exec_()</snippet></ROW><ROW><id>9455780</id><snippet>def add_host(self):
    x=add_host.Ui_Dialog1()
    x.main()
</snippet></ROW><ROW><id>9455780</id><snippet>main()</snippet></ROW><ROW><id>9455780</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>9456046</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# Generate some data...
x, y = np.mgrid[:141, :101]
z = np.cos(np.hypot(x, y))

# Plot the figure...
plt.pcolormesh(x, y, z, cmap=mpl.cm.Reds)

plt.show()
</snippet></ROW><ROW><id>9456046</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

# Generate some data...
x, y = np.mgrid[:141, :101]
z = np.cos(np.hypot(x, y))

# Plot the figure...
plt.pcolormesh(x, y, z, cmap=mpl.cm.Reds)

# Set the ticks and labels...
ticks = np.arange(x.min(), x.max(), 6)
labels = range(ticks.size)
plt.xticks(ticks, labels)
plt.xlabel('Hours')

plt.show()
</snippet></ROW><ROW><id>9456046</id><snippet>import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np

def main():
    # Generate some data...
    x, y = np.mgrid[:141, :101]
    z = np.cos(np.hypot(x, y))

    # Plot the figure...
    fig, ax = plt.subplots()
    ax.pcolormesh(x, y, z, cmap=mpl.cm.Reds)
    ax.set_xlabel('Hours')

    ax.xaxis.set_major_locator(ScaledLocator(dx=6))
    ax.xaxis.set_major_formatter(ScaledFormatter(dx=6))

    plt.show()

class ScaledLocator(mpl.ticker.MaxNLocator):
    """
    Locates regular intervals along an axis scaled by *dx* and shifted by
    *x0*. For example, this would locate minutes on an axis plotted in seconds
    if dx=60.  This differs from MultipleLocator in that an approriate interval
    of dx units will be chosen similar to the default MaxNLocator.
    """
    def __init__(self, dx=1.0, x0=0.0):
        self.dx = dx
        self.x0 = x0
        mpl.ticker.MaxNLocator.__init__(self, nbins=9, steps=[1, 2, 5, 10])

    def rescale(self, x):
        return x / self.dx + self.x0
    def inv_rescale(self, x):
        return  (x - self.x0) * self.dx

    def __call__(self): 
        vmin, vmax = self.axis.get_view_interval()
        vmin, vmax = self.rescale(vmin), self.rescale(vmax)
        vmin, vmax = mpl.transforms.nonsingular(vmin, vmax, expander = 0.05)
        locs = self.bin_boundaries(vmin, vmax)
        locs = self.inv_rescale(locs)
        prune = self._prune
        if prune=='lower':
            locs = locs[1:]
        elif prune=='upper':
            locs = locs[:-1]
        elif prune=='both':
            locs = locs[1:-1]
        return self.raise_if_exceeds(locs)

class ScaledFormatter(mpl.ticker.OldScalarFormatter):
    """Formats tick labels scaled by *dx* and shifted by *x0*."""
    def __init__(self, dx=1.0, x0=0.0, **kwargs):
        self.dx, self.x0 = dx, x0

    def rescale(self, x):
        return x / self.dx + self.x0

    def __call__(self, x, pos=None):
        xmin, xmax = self.axis.get_view_interval()
        xmin, xmax = self.rescale(xmin), self.rescale(xmax)
        d = abs(xmax - xmin)
        x = self.rescale(x)
        s = self.pprint_val(x, d)
        return s

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>9456061</id><snippet>QTabWidget.widget(index)</snippet></ROW><ROW><id>9456071</id><snippet>foo</snippet></ROW><ROW><id>9456071</id><snippet>get</snippet></ROW><ROW><id>9456071</id><snippet>import multiprocessing as mp
import time
import sys

def foo(x):
    time.sleep(x)
    return x*x

pool = mp.Pool(1)

for x in (0.01, 1.0):
    try:
        result = pool.apply_async(foo, args = (x,)).get(timeout = 0.1)
    except KeyboardInterrupt:
        pool.terminate()
        sys.exit("Cancelled")
    except mp.TimeoutError:
        print('Timed out')
    else:
        print "Result: {r}".format(r = result)
</snippet></ROW><ROW><id>9456071</id><snippet>Command</snippet></ROW><ROW><id>9456315</id><snippet>d = {'secondly': 2, 'pardon': 6, 'saves': 1, 'knelt': 1}
a = sorted(d.iteritems(), key=lambda x:x[1], reverse=True)
</snippet></ROW><ROW><id>9456315</id><snippet>a</snippet></ROW><ROW><id>9456315</id><snippet>[('pardon', 6), ('secondly', 2), ('saves', 1), ('knelt', 1)]
</snippet></ROW><ROW><id>9456315</id><snippet>a[:50]</snippet></ROW><ROW><id>9456392</id><snippet>PROCESSOR_ARCHITECTURE</snippet></ROW><ROW><id>9456392</id><snippet>os.environ</snippet></ROW><ROW><id>9456392</id><snippet>x86</snippet></ROW><ROW><id>9456392</id><snippet>platorm.architecture()</snippet></ROW><ROW><id>9456449</id><snippet>sum</snippet></ROW><ROW><id>9456449</id><snippet>__radd__</snippet></ROW><ROW><id>9456449</id><snippet>int</snippet></ROW><ROW><id>9456449</id><snippet>Foo(1)</snippet></ROW><ROW><id>9456449</id><snippet>class Foo(object):
    def __init__(self, val):
        self.val = val
    def __add__(self, other):
        return self.val + other.val
    def __radd__(self, other):
        return other + self.val

A = Foo(1)
B = Foo(2)
L = [A,B]
print(A+B)
# 3

print(sum(L))
# 3
</snippet></ROW><ROW><id>9456497</id><snippet>.exe</snippet></ROW><ROW><id>9456497</id><snippet>.cpp</snippet></ROW><ROW><id>9456497</id><snippet>"path/to/example.cpp"</snippet></ROW><ROW><id>9456497</id><snippet>build</snippet></ROW><ROW><id>9456497</id><snippet>Debug</snippet></ROW><ROW><id>9456497</id><snippet>&lt;</snippet></ROW><ROW><id>9456605</id><snippet>fonts = [f.get_name() for f in layout.get_context().list_families()]
</snippet></ROW><ROW><id>9456605</id><snippet>mono</snippet></ROW><ROW><id>9456605</id><snippet>space</snippet></ROW><ROW><id>9456605</id><snippet>mono_fonts = filter(re.compile(r'(?i)mono|space').search, fonts)
</snippet></ROW><ROW><id>9456605</id><snippet>+</snippet></ROW><ROW><id>9456605</id><snippet>markup += '&lt;span font="{}" size="{}" letter_spacing="{}"&gt;{}&lt;/span&gt;'.format(
                       item, size, spacing, text)
</snippet></ROW><ROW><id>9456605</id><snippet>font</snippet></ROW><ROW><id>9456605</id><snippet>&gt;&gt;&gt; import cairo
&gt;&gt;&gt; import pango
&gt;&gt;&gt; cairo.version
'1.8.8'
&gt;&gt;&gt; pango.version_string()
'1.29.3'
</snippet></ROW><ROW><id>9456664</id><snippet>socket.makefile</snippet></ROW><ROW><id>9456664</id><snippet>buffering</snippet></ROW><ROW><id>9456949</id><snippet>checked</snippet></ROW><ROW><id>9456949</id><snippet>(board.shape[0], board.shape[1])</snippet></ROW><ROW><id>9456949</id><snippet>checked</snippet></ROW><ROW><id>9456949</id><snippet>np.zeros</snippet></ROW><ROW><id>9456949</id><snippet>float64</snippet></ROW><ROW><id>9456949</id><snippet>int32</snippet></ROW><ROW><id>9456949</id><snippet>def score(np.ndarray[int, ndim=2] board):

    cdef np.ndarray[np.int32_t, ndim = 2] checked
    checked = np.zeros((board.shape[0], board.shape[1]), dtype='i4')

    for i in xrange(len(board)):
        for j in xrange(len(board)):
            if checked[i,j] == 0 and board[i,j] !=0:
                ... do stuff
</snippet></ROW><ROW><id>9456949</id><snippet>np.get_include()</snippet></ROW><ROW><id>9456949</id><snippet>import numpy as np
from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

setup(
      cmdclass={'build_ext': build_ext},
      ext_modules = [
              Extension("new_gox",
                        ["new_gox.pyx"],
                        include_dirs=[np.get_include()])
                    ]
     )
</snippet></ROW><ROW><id>9456949</id><snippet>i4</snippet></ROW><ROW><id>9456949</id><snippet>np.int32</snippet></ROW><ROW><id>9456949</id><snippet>def</snippet></ROW><ROW><id>9456949</id><snippet>cpdef</snippet></ROW><ROW><id>9456949</id><snippet>cdef</snippet></ROW><ROW><id>9456999</id><snippet>0</snippet></ROW><ROW><id>9456999</id><snippet>l = [1, 2, 3, 4, 5]

print(l[0]) # 1
print(l[1]) # 2
</snippet></ROW><ROW><id>9456999</id><snippet>1</snippet></ROW><ROW><id>9456999</id><snippet>for i in range(len(oldlist)):
    newlist[i] = 'literal' + oldlist[i]
</snippet></ROW><ROW><id>9456999</id><snippet>newlist = ['literal' + olditem for olditem in oldlist]
</snippet></ROW><ROW><id>9457064</id><snippet>Manager</snippet></ROW><ROW><id>9457064</id><snippet>Proxy</snippet></ROW><ROW><id>9457064</id><snippet>dict</snippet></ROW><ROW><id>9457064</id><snippet>Manager</snippet></ROW><ROW><id>9457302</id><snippet>def to_1d(array):
    """prepares an array into a 1d real vector"""
    return array.astype(np.float64).ravel()
</snippet></ROW><ROW><id>9457302</id><snippet>array</snippet></ROW><ROW><id>9457302</id><snippet>a.dtype = 'float64'</snippet></ROW><ROW><id>9457302</id><snippet>a = a.view('float64')</snippet></ROW><ROW><id>9457302</id><snippet>numpy.complex128</snippet></ROW><ROW><id>9457302</id><snippet>np.array([0.5+1j, 9.0+1.33j])</snippet></ROW><ROW><id>9457302</id><snippet>np.array([0.5, 1.0, 9.0, 1.33])</snippet></ROW><ROW><id>9457302</id><snippet>def complex_to_iterleaved_real(array):
     """prepares a complex array into an "interleaved" 1d real vector"""
    return array.copy().view('float64').ravel()
</snippet></ROW><ROW><id>9457302</id><snippet>y = x.T</snippet></ROW><ROW><id>9457302</id><snippet>y = x[::2]</snippet></ROW><ROW><id>9457302</id><snippet>x</snippet></ROW><ROW><id>9457302</id><snippet>import numpy as np
x = np.array([1,2,3,4,5,6,7,8,9,10])
</snippet></ROW><ROW><id>9457302</id><snippet>x = x.reshape((2, 5))
</snippet></ROW><ROW><id>9457302</id><snippet>x.shape = (2, 5)
</snippet></ROW><ROW><id>9457302</id><snippet>x.dtype</snippet></ROW><ROW><id>9457302</id><snippet>x.view(...)</snippet></ROW><ROW><id>9457302</id><snippet>import numpy as np
x = np.array([1,2,3], dtype=np.int)

print 'The original array'
print x

print '\n...Viewed as unsigned 8-bit integers (notice the length change!)'
y = x.view(np.uint8)
print y

print '\n...Doing the same thing by setting the dtype'
x.dtype = np.uint8
print x

print '\n...And we can set the dtype again and go back to the original.'
x.dtype = np.int
print x
</snippet></ROW><ROW><id>9457302</id><snippet>The original array
[1 2 3]

...Viewed as unsigned 8-bit integers (notice the length change!)
[1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0]

...Doing the same thing by setting the dtype
[1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0]

...And we can set the dtype again and go back to the original.
[1 2 3]
</snippet></ROW><ROW><id>9457302</id><snippet>import numpy as np
x = np.arange(10, dtype=np.int)

print 'An integer array:', x
print 'But if we view it as a float:', x.view(np.float)
print "...It's probably not what we expected..."
</snippet></ROW><ROW><id>9457302</id><snippet>An integer array: [0 1 2 3 4 5 6 7 8 9]
But if we view it as a float: [  0.00000000e+000   4.94065646e-324   
   9.88131292e-324   1.48219694e-323   1.97626258e-323   
   2.47032823e-323   2.96439388e-323   3.45845952e-323
   3.95252517e-323   4.44659081e-323]
...It's probably not what we expected...
</snippet></ROW><ROW><id>9457302</id><snippet>import numpy as np
x = np.array([0.5+1j, 1.0+2j, 3.0+0j])
</snippet></ROW><ROW><id>9457302</id><snippet>x.real</snippet></ROW><ROW><id>9457302</id><snippet>x.imag</snippet></ROW><ROW><id>9457302</id><snippet>print x.real
print x.astype(float)
</snippet></ROW><ROW><id>9457302</id><snippet>astype</snippet></ROW><ROW><id>9457302</id><snippet>item1.real, item1.imag, item2.real, item2.imag, ...</snippet></ROW><ROW><id>9457302</id><snippet>print x
print x.view(float)
</snippet></ROW><ROW><id>9457302</id><snippet>[ 0.5+1.j  1.0+2.j  3.0+0.j]
[ 0.5  1.   1.   2.   3.   0. ]
</snippet></ROW><ROW><id>9457554</id><snippet>label_value = r'\w=-?\d{1,3}(\.\d{1,2})?'
line = r'^C:{0}:{0}:{0};$'.format( label_value )
line_pat= re.compile( line )
</snippet></ROW><ROW><id>9457554</id><snippet>label_value = r'(\w)=(-?\d{1,3}(?:\.\d{1,2})?)'
line = r'^C:{0}:{0}:{0};$'.format( label_value )
line_pat= re.compile( line )
</snippet></ROW><ROW><id>9457554</id><snippet>value = r'(-?\d{1,3}(?:\.\d{1,2})?)'
line = r'^C:x={0}:y={0}:z={0};$'.format( value )
line_pat= re.compile( line )
</snippet></ROW><ROW><id>9457781</id><snippet>&gt;&gt;&gt; s = "Nima Python: how are you?"
&gt;&gt;&gt; s.replace("Nima Python: ", "") # replace with empty string to remove
'how are you?'
</snippet></ROW><ROW><id>9457843</id><snippet>event_generate</snippet></ROW><ROW><id>9457843</id><snippet>event_generate</snippet></ROW><ROW><id>9457843</id><snippet>tail</snippet></ROW><ROW><id>9457843</id><snippet>when</snippet></ROW><ROW><id>9457872</id><snippet>import time
from threading import Thread

class Monitor(object):

    def __init__(self):
        self._stop = False

    def run(self, inputFile, secs=3):
        self._stop = False

        with open(inputFile) as monitor:

            while True:
                line = monitor.readline().strip()
                if line.isdigit():

                    # this is where you would notify somehow
                    print int(line)

                time.sleep(secs)

                if self._stop:
                    return

    def stop(self):
        self._stop = True


if __name__ == "__main__":

    inputFile = "write.txt"

    monitor = Monitor()

    monitorThread = Thread(target=monitor.run, args=(inputFile, 1))
    monitorThread.start()

    try:
        while True:
            time.sleep(.25)

    except:
        monitor.stop()
</snippet></ROW><ROW><id>9457872</id><snippet>&gt;&gt;&gt; f = open("write.txt", 'w+', 10)</snippet></ROW><ROW><id>9457872</id><snippet>&gt;&gt;&gt; f.write('50\n'); f.flush()</snippet></ROW><ROW><id>9457872</id><snippet>monitor.seek(0)</snippet></ROW><ROW><id>9457872</id><snippet>class VideoNotifier(pyglet.event.EventDispatcher):

    def updateIndex(self, value):
        self.dispatch_events('on_update_index', value)

VideoNotifier.register_event('on_update_index')


videoNotifier = VideoNotifier()

@videoNotifier.event
def on_update_index(newIndex):
    # thread has notified of an update
    # Change the video here
    pass
</snippet></ROW><ROW><id>9457872</id><snippet>class Monitor(object):

    def __init__(self, dispatcher):
        self._stop = False
        self._dispatcher = dispatcher

    def run(self, inputFile, secs=3):
        ...
        ...

        # should notify video of new value
        line = int(line_from_file)
        self._dispatcher.updateIndex(line)

        ...
        ...
</snippet></ROW><ROW><id>9458144</id><snippet>InsertStringItem</snippet></ROW><ROW><id>9458144</id><snippet>import wx
import sys

class Frame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent, size=(380, 230))

        dl = wx.ListCtrl(self, -1, style=wx.LC_REPORT)
        dl.InsertColumn(0, 'File')
        dl.InsertColumn(1, 'Progress')
        dl.InsertColumn(2, 'State')

        for row in range(3):
            labels = [l+str(row) for l in "FILE PERCENT STATE".split()]
            # sys.maxint inserts at the end of the list
            index = dl.InsertStringItem(sys.maxint, labels[0])
            dl.SetStringItem(index, 1, labels[1])
            dl.SetStringItem(index, 2, labels[2])

        self.Show(True)

app = wx.App()
Frame(None)
app.MainLoop()
</snippet></ROW><ROW><id>9458386</id><snippet>def curry(x, argc=None):
    if argc is None:
        argc = x.func_code.co_argcount
    def p(*a):
        if len(a) == argc:
            return x(*a)
        def q(*b):
            return x(*(a + b))
        return curry(q, argc - len(a))
    return p

@curry
def myfun(a,b,c):
    print '%d-%d-%d' % (a,b,c)



myfun(11,22,33)
myfun(44,55)(66)
myfun(77)(88)(99)
</snippet></ROW><ROW><id>9458433</id><snippet>template = 'errors.html'
data = {
    'error_messages': error_messages,
}
return render_to_response(template, data,
    context_instance = RequestContext(request))
</snippet></ROW><ROW><id>9458433</id><snippet>&lt;ul&gt;
{% for message in error_messages %}
    &lt;li&gt;{{ message }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>9458803</id><snippet>import scipy
import scipy.fftpack
import pylab
from scipy import pi
t = scipy.linspace(0,120,4000)
acc = lambda t: 10*scipy.sin(2*pi*2.0*t) + 5*scipy.sin(2*pi*8.0*t) + 2*scipy.random.random(len(t))

signal = acc(t)

FFT = abs(scipy.fft(signal))
freqs = scipy.fftpack.fftfreq(signal.size, t[1]-t[0])

pylab.subplot(211)
pylab.plot(t, signal)
pylab.subplot(212)
pylab.plot(freqs,20*scipy.log10(FFT),'x')
pylab.show()
</snippet></ROW><ROW><id>9459199</id><snippet>TreeForeignKey</snippet></ROW><ROW><id>9459199</id><snippet>MPTTModel</snippet></ROW><ROW><id>9459199</id><snippet>MPTTModel</snippet></ROW><ROW><id>9459199</id><snippet>class Project(models.Model):
    name = models.CharField(max_length=255)
    category = TreeForeignKey('Category')
</snippet></ROW><ROW><id>9459199</id><snippet>mptt.forms.TreeNodeChoiceField</snippet></ROW><ROW><id>9459199</id><snippet>mptt.forms.TreeNodeMultipleChoiceField</snippet></ROW><ROW><id>9459203</id><snippet>import threading
import time
import sys

mess = 'foo'

def other_stuff():
  while True:
    sys.stdout.write('mess == {}\n'.format(mess))
    time.sleep(1)

t = threading.Thread(target=other_stuff)
t.daemon=True
t.start()

while True:
  mess = raw_input('Type: ')
</snippet></ROW><ROW><id>9459203</id><snippet>mess</snippet></ROW><ROW><id>9459203</id><snippet>Queue</snippet></ROW><ROW><id>9459343</id><snippet>q = [[None]*5]*4
</snippet></ROW><ROW><id>9459343</id><snippet>list</snippet></ROW><ROW><id>9459343</id><snippet>[None]</snippet></ROW><ROW><id>9459343</id><snippet>[[None]*5]</snippet></ROW><ROW><id>9459343</id><snippet>q = [ [ None for i in range(5) ] for j in range(4) ]
</snippet></ROW><ROW><id>9459343</id><snippet>q = {}
q[0,0]= 5
</snippet></ROW><ROW><id>9459343</id><snippet>None</snippet></ROW><ROW><id>9459343</id><snippet>q = { (i,j):0 for i in range(5) for j in range(4) }
</snippet></ROW><ROW><id>9459343</id><snippet>{(0, 1): 0, (1, 2): 0, (3, 2): 0, (0, 0): 0, (3, 3): 0, (3, 0): 0, (3, 1): 0, (2, 1): 0, (0, 2): 0, (2, 0): 0, (1, 3): 0, (2, 3): 0, (4, 3): 0, (2, 2): 0, (1, 0): 0, (4, 2): 0, (0, 3): 0, (4, 1): 0, (1, 1): 0, (4, 0): 0}
</snippet></ROW><ROW><id>9459572</id><snippet>import this</snippet></ROW><ROW><id>9459572</id><snippet>wait</snippet></ROW><ROW><id>9459705</id><snippet>cm3</snippet></ROW><ROW><id>9459705</id><snippet>cm4</snippet></ROW><ROW><id>9459705</id><snippet>cm5</snippet></ROW><ROW><id>9459705</id><snippet>cm1</snippet></ROW><ROW><id>9459705</id><snippet>cm2</snippet></ROW><ROW><id>9459705</id><snippet>id</snippet></ROW><ROW><id>9459705</id><snippet>def cm4(self):
    self=self[::-1]
    print 'DEBUG', id(self)

...

m1.cm4()
print 'DEBUG', id(self)
</snippet></ROW><ROW><id>9459705</id><snippet>id</snippet></ROW><ROW><id>9459705</id><snippet>self[:] = ...
</snippet></ROW><ROW><id>9459705</id><snippet>self[:] = self[::-1]
</snippet></ROW><ROW><id>9459723</id><snippet>*</snippet></ROW><ROW><id>9459723</id><snippet>zip</snippet></ROW><ROW><id>9459723</id><snippet>&gt;&gt;&gt; asdf
[[1, 2], [3, 4], [5, 6]]


&gt;&gt;&gt; zip(*asdf)
[(1, 3, 5), (2, 4, 6)]
</snippet></ROW><ROW><id>9459723</id><snippet>handle = open(file,'r')
lines = [line.split() for line in handle if line[:4] not in ('time', 'Step')]
Xvals, Yvals = zip(*lines)
</snippet></ROW><ROW><id>9459723</id><snippet>list</snippet></ROW><ROW><id>9459723</id><snippet>Xvals, Yvals = [list(block) for block in zip(*lines)]
</snippet></ROW><ROW><id>9459819</id><snippet>tasks = [a.request for a in self.types["social"]]
#        ^^^^^^^^^
grabbers = executeChainResults(tasks, [(query, 0)] * len(tasks))
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>9459819</id><snippet>from abc import ABCMeta
from functools import wraps

def virtualmethod(method):
    method.__isabstractmethod__ = True
    @wraps(method)
    def wrapper(self, *args, **kwargs):
        return getattr(self, method.__name__)(*args, **kwargs)
    return wrapper

class IBase(object):
    __metaclass__ = ABCMeta
    @virtualmethod
    def my_method(self, x, y):
        pass

class AddImpl(IBase):
    def my_method(self, x, y):
        return x + y

class MulImpl(IBase):
    def my_method(self, x, y):
        return x * y

items = [AddImpl(), MulImpl()]

for each in items:
    print IBase.my_method(each, 3, 4)

b = IBase()  #  &lt;-- crash
</snippet></ROW><ROW><id>9459819</id><snippet>7
12
Traceback (most recent call last):
  File "testvirtual.py", line 30, in &lt;module&gt;
    b = IBase()
TypeError: Can't instantiate abstract class IBase with abstract methods my_method
</snippet></ROW><ROW><id>9459819</id><snippet>abc</snippet></ROW><ROW><id>9459819</id><snippet>abc.abstractmethod()</snippet></ROW><ROW><id>9459819</id><snippet>virtualmethod()</snippet></ROW><ROW><id>9459819</id><snippet>abc.abstratmethod()</snippet></ROW><ROW><id>9459819</id><snippet>abc</snippet></ROW><ROW><id>9460339</id><snippet>cur.execute("""
(
SELECT `PUID`,`DROID_V`,`SIG_V`,`SPEED`,
COUNT(distinct IF(sourcelist.hasExtension=1,NAME,NULL)) as Ext,
COUNT(distinct IF(sourcelist.hasExtension=0,NAME,NULL)) as NoExt,
COUNT(distinct NAME) as `All`
FROM sourcelist, main_small
WHERE sourcelist.SourcePUID = %s AND main_small.NAME = sourcelist.SourceFileName
GROUP BY `PUID`,`DROID_V`,`SIG_V`,`SPEED` ORDER BY `DROID_V` ASC, `SIG_V`
 )
""",(int(targetPUID),)) 
</snippet></ROW><ROW><id>9460540</id><snippet>            cur.executemany("INSERT INTO TWEETS(?, ?, ?)", (status.text, 
                                                        status.author.screen_name, 
                                                        status.created_at, 
                                                        status.source)
</snippet></ROW><ROW><id>9460549</id><snippet>for</snippet></ROW><ROW><id>9460549</id><snippet>for</snippet></ROW><ROW><id>9460549</id><snippet>if</snippet></ROW><ROW><id>9461081</id><snippet>x = self.db._exec_sql(c, "select distinct (station) from station  ").fetchall()

y = [p for p in x if p[0] in station_list]
</snippet></ROW><ROW><id>9461187</id><snippet>str.upper()</snippet></ROW><ROW><id>9461187</id><snippet>str</snippet></ROW><ROW><id>9461187</id><snippet>&gt;&gt;&gt; name = "xyz"
&gt;&gt;&gt; name.upper()
'XYZ'
&gt;&gt;&gt; print name
xyz  # Notice that it's still in lower case.
&gt;&gt;&gt; name_upper = name.upper()
&gt;&gt;&gt; print name_upper
XYZ
</snippet></ROW><ROW><id>9461187</id><snippet>fragment.upper()</snippet></ROW><ROW><id>9461187</id><snippet>new_variable = fragment.upper()</snippet></ROW><ROW><id>9461187</id><snippet>new_variable</snippet></ROW><ROW><id>9461440</id><snippet>CR</snippet></ROW><ROW><id>9461440</id><snippet>LF</snippet></ROW><ROW><id>9461440</id><snippet>CRLF</snippet></ROW><ROW><id>9461440</id><snippet>\r\n</snippet></ROW><ROW><id>9461614</id><snippet>if not mastercard_percent[0]: print 'empty'</snippet></ROW><ROW><id>9461764</id><snippet>re.findall</snippet></ROW><ROW><id>9461764</id><snippet>(0-9)</snippet></ROW><ROW><id>9461764</id><snippet>(...)</snippet></ROW><ROW><id>9461764</id><snippet>+</snippet></ROW><ROW><id>9461764</id><snippet>*</snippet></ROW><ROW><id>9461764</id><snippet>{m,n}</snippet></ROW><ROW><id>9461986</id><snippet>&lt;form action="/contact/" method="post"&gt;{% csrf_token %}
{{ form.as_p }}
&lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9461986</id><snippet>{% extends 'head-plain.html' %}
{% block title %}{% endblock %}
{% block headstuff %}{% endblock %}
{% block content %}   
&lt;form action="" method="post"&gt;
{% csrf_token %}{{ form.as_p }}
&lt;input type="submit" value="Submit" /&gt; &lt;/form&gt;    
{% endblock %}
</snippet></ROW><ROW><id>9461986</id><snippet>{{ action }}</snippet></ROW><ROW><id>9461986</id><snippet>(r'^brand_create2$',    BrandCreate.as_view()),
</snippet></ROW><ROW><id>9461986</id><snippet>(r'^brand_create2$',    BrandCreate.as_view(), name='band_create'),
</snippet></ROW><ROW><id>9461986</id><snippet>action="{% url band_create %}"</snippet></ROW><ROW><id>9461986</id><snippet>&lt;form action="/contact/" method="post"&gt;
    {% csrf_token %}
    {{ form.non_field_errors }}
    &lt;div class="fieldWrapper"&gt;
        {{ form.subject.errors }}
        &lt;label for="id_subject"&gt;Email subject:&lt;/label&gt;
        {{ form.subject }}
    &lt;/div&gt;
    &lt;div class="fieldWrapper"&gt;
        {{ form.message.errors }}
        &lt;label for="id_message"&gt;Your message:&lt;/label&gt;
        {{ form.message }}
    &lt;/div&gt;
    &lt;div class="fieldWrapper"&gt;
        {{ form.sender.errors }}
        &lt;label for="id_sender"&gt;Your email address:&lt;/label&gt;
        {{ form.sender }}
    &lt;/div&gt;
    &lt;div class="fieldWrapper"&gt;
        {{ form.cc_myself.errors }}
        &lt;label for="id_cc_myself"&gt;CC yourself?&lt;/label&gt;
        {{ form.cc_myself }}
    &lt;/div&gt;
    &lt;p&gt;&lt;input type="submit" value="Send message" /&gt;&lt;/p&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>9462162</id><snippet>def constructor(self, book, book_key):
    for k, v in book.iteritems():
        if k==book_Key:
            yield v

...

for value in obj.constructor(book ,book_key):
    # Do whatever you need with value
</snippet></ROW><ROW><id>9462162</id><snippet>def constructor(self, book, book_key):
    return next(v for k, v in book.iteritems() if k==book_key, None)

...

value = obj.constructor(book ,book_key)
if value is not None:
    # Do whatever you need with value
</snippet></ROW><ROW><id>9462162</id><snippet>next</snippet></ROW><ROW><id>9462162</id><snippet>None</snippet></ROW><ROW><id>9462280</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>9462280</id><snippet>directory in sys.path</snippet></ROW><ROW><id>9462280</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>9462280</id><snippet>echo $PYTHONPATH</snippet></ROW><ROW><id>9463053</id><snippet>list:refernce</snippet></ROW><ROW><id>9463053</id><snippet>ValueError</snippet></ROW><ROW><id>9463053</id><snippet>session.user</snippet></ROW><ROW><id>9463053</id><snippet>session.user.id</snippet></ROW><ROW><id>9463053</id><snippet>&gt;&gt;&gt; db.define_table('tag',Field('name'),format='%(name)s')
&gt;&gt;&gt; db.define_table('product',
        Field('name'),
        Field('tags','list:reference tag'))
&gt;&gt;&gt; a = db.tag.insert(name='red')
&gt;&gt;&gt; b = db.tag.insert(name='green')
&gt;&gt;&gt; c = db.tag.insert(name='blue')
&gt;&gt;&gt; db.product.insert(name='Toy Car',tags=[a, b, c])
&gt;&gt;&gt; products = db(db.product.tags.contains(b)).select()
&gt;&gt;&gt; for item in products:
        print item.name, item.tags
Toy Car [1, 2, 3]
&gt;&gt;&gt; for item in products:
        print item.name, db.product.tags.represent(item.tags)
Toy Car red, green, blue
</snippet></ROW><ROW><id>9463053</id><snippet>insert</snippet></ROW><ROW><id>9463572</id><snippet>i = open('BGBiasRE_IM3_wCSrescaled.txt', 'r')

Xnames, Ynames = [], []

count = 0
for line in i:
    if count &gt; 0:
        line_tmp = line.split()
        if line_tmp[0] == 'Step':
            step = (line_tmp[2].split('='))[1]
            varnameX = 'Temp' + str(step) +'_Xvals'
            varnameY = 'Temp' + str(step) +'_Yvals'
            globals()[varnameX] = []
            globals()[varnameY] = []
            Xnames.append(varnameX)
            Ynames.append(varnameY)
        else:
            globals()[varnameX].append(float(line_tmp[0]))
            globals()[varnameY].append(float(line_tmp[1]))
    count += 1
i.close()

for name in Xnames:
    print name + ' = ' + str(eval(name))

for name in Ynames:
    print name + ' = ' + str(eval(name))
</snippet></ROW><ROW><id>9463594</id><snippet>event.Skip()</snippet></ROW><ROW><id>9463594</id><snippet>def OnKeyDown(self, event):         
    now = time.time()  
    keyCode = event.GetKeyCode()
    if (keyCode &gt;= 65 and keyCode &lt;= 90) or ( keyCode &gt;= 48 and keyCode &lt;= 57):
        if self.searchString == "":
            self.searchString = chr(event.GetKeyCode())
        elif (now - self.lastKeyDown) &lt; 2:
            self.searchString += str(chr(event.GetKeyCode()))
        else:
            self.searchString = str(chr(event.GetKeyCode()))
    else:
        event.Skip()
        return
    self.lastKeyDown = now
    self.GetItem(self.searchString, self.GetRootItem())
</snippet></ROW><ROW><id>9463609</id><snippet>Pyparsing</snippet></ROW><ROW><id>9463661</id><snippet>class Scenario(object):
  def __init__(self, w, x, y, z):
    self.val = {}
    self.val['w'] = self.value(w,10,50)
    self.val['x'] = self.value(x,5,15)
    self.val['y'] = self.value(y,25,75)
    self.val['z'] = self.value(z,3,7)
  def value(self, v, l, u):
    if (v &lt; l):
      return "low"
    if (u &gt; v &gt;= l ):
      return "med"
    if (v &gt;= u):
      return "high"
  def __str__(self):
    return "scenario = w: " + self.val['w'] + " x: " + self.val['x'] + " y: " + self.val['y'] + " z: " + self.val['z']
</snippet></ROW><ROW><id>9463661</id><snippet>s = Scenario(15,945,2,18)</snippet></ROW><ROW><id>9463661</id><snippet>print s</snippet></ROW><ROW><id>9463959</id><snippet>query</snippet></ROW><ROW><id>9463959</id><snippet>class User(object):
    query = Session.query_property()
</snippet></ROW><ROW><id>9464033</id><snippet>ModelForm</snippet></ROW><ROW><id>9464033</id><snippet>class hostCreateForm(forms.ModelForm):
    class Meta:
        model = filled
        widgets = {
            'user': forms.HiddenInput()
        }
    # additional hidden field
    datetime = forms.DatetimeField(widget=forms.HiddenInput)
</snippet></ROW><ROW><id>9464141</id><snippet>def group(l, window, size):
    return [l[index:index + size] for index in xrange(0, len(l) - 1, window)]
</snippet></ROW><ROW><id>9464262</id><snippet>CUSTOM_DATE=$(date "+%Y-%m-%d_%H_%M_%S")
</snippet></ROW><ROW><id>9464262</id><snippet>#!/bin/bash

CUSTOM_DATE=$(date "+%Y-%m-%d_%H_%M_%S")
mysqldump -u admin -p password database table1 table2 &gt;/path/to/backups/mysqldump.${CUSTOM_DATE}.db
</snippet></ROW><ROW><id>9464391</id><snippet>ax.bar3d(xpos,ypos,zpos, dx, dy, dz, color='b', alpha=0.5)
</snippet></ROW><ROW><id>9464391</id><snippet>#ax.w_xaxis.set_ticklabels(column_names)
#ax.w_yaxis.set_ticklabels(row_names)

ticksx = np.arange(0.5, 5, 1)
plt.xticks(ticksx, column_names)

ticksy = np.arange(0.6, 7, 1)
plt.yticks(ticksy, row_names)
</snippet></ROW><ROW><id>9464413</id><snippet>#!/usr/bin/python

import re

words={}

for line in open("cmudict.0.7a",'ro').readlines():
    split_idx = line.find(' ')
    words[line[0:split_idx]] = line[split_idx+1:-1]

user_input = raw_input("Words: ")

print
for word in user_input.split(' '):
    try:
        print "%25s %s" % (word, words[word.upper()])
    except:
        print "%25s %s" % (word, 'unable to find phonems for word')
</snippet></ROW><ROW><id>9464413</id><snippet>Words: I support hip hop from the underground up

                    I  AY1
              support  S AH0 P AO1 R T
                  hip  HH IH1 P
                  hop  HH AA1 P
                 from  F R AH1 M
                  the  DH AH0
          underground  AH1 N D ER0 G R AW2 N D
                   up  AH1 P
</snippet></ROW><ROW><id>9464413</id><snippet>in'</snippet></ROW><ROW><id>9464413</id><snippet>NG</snippet></ROW><ROW><id>9464413</id><snippet>                  Yes  Y EH1 S
                  the  DH AH0
               rhythm  R IH1 DH AH0 M
                  the  DH AH0
                rebel  R EH1 B AH0 L
              Without  W IH0 TH AW1 T
                    a  AH0
                pause  P AO1 Z
                  I'm  AY1 M
             lowering  L OW1 ER0 IH0 NG
                   my  M AY1
                level  L EH1 V AH0 L
                  The  DH AH0
                 hard  HH AA1 R D
               rhymer  R AY1 M ER0
                where  W EH1 R
                  you  Y UW1
                never  N EH1 V ER0
                 been  B IH1 N
                  I'm  AY1 M
                   in  IH0 N
                  You  Y UW1
                 want  W AA1 N T
              styling  S T AY1 L IH0 NG
                  you  Y UW1
                 know  N OW1
                 it's  IH1 T S
                 time  T AY1 M
                again  AH0 G EH1 N
                    D  D IY1
                  the  DH AH0
                enemy  EH1 N AH0 M IY0
               tellin unable to find phonems for word
                  you  Y UW1
                   to  T UW1
                 hear  HH IY1 R
                   it  IH1 T
                 They  DH EY1
              praised  P R EY1 Z D
              etc...
</snippet></ROW><ROW><id>9464527</id><snippet>self</snippet></ROW><ROW><id>9464527</id><snippet>example</snippet></ROW><ROW><id>9464527</id><snippet>class example:    
 def funz1(self,q,b):
    self.queue = []
    self.queue += [q]
    self.queue += [a]

 def funz2(self):
    return str(self.queue.pop())
</snippet></ROW><ROW><id>9464527</id><snippet>array += [item]</snippet></ROW><ROW><id>9464527</id><snippet>array.append(item)</snippet></ROW><ROW><id>9464920</id><snippet>bash</snippet></ROW><ROW><id>9464920</id><snippet>ksh</snippet></ROW><ROW><id>9464920</id><snippet>sh</snippet></ROW><ROW><id>9464920</id><snippet>.</snippet></ROW><ROW><id>9464920</id><snippet>str.endswith()</snippet></ROW><ROW><id>9464920</id><snippet>def count_files(path, extensions):
    counter = 0
    for root, dirs, files in os.walk(path):
        for file in files:
            counter += file.endswith(extensions)
    return counter

path = os.getenv("scripts")
print count_files(path, '.py')
print count_files(path, '.sql')
print count_files(path, ('.ksh', '.sh', '.bash'))
</snippet></ROW><ROW><id>9465303</id><snippet>wget http://peak.telecommunity.com/dist/ez_setup.py
python2.7 ez_setup.py
</snippet></ROW><ROW><id>9465305</id><snippet>EXTH</snippet></ROW><ROW><id>9465305</id><snippet>104</snippet></ROW><ROW><id>9465305</id><snippet>&gt;&gt;&gt; from kiehinen.ebook import Book
&gt;&gt;&gt; b = Book("hobbit.mobi")
&gt;&gt;&gt; b.exth['isbn'][0]
'9780618260300'
</snippet></ROW><ROW><id>9466078</id><snippet>defaultdict</snippet></ROW><ROW><id>9466078</id><snippet>import re
from collections import defaultdict

files = ['s1.txt', 'ai1.txt', 's2.txt', 'ai3.txt']

def get_key(fname):
   return int(re.findall(r'\d+', fname)[0])

d = defaultdict(list)
for f in files:
   d[get_key(f)].append(f)

out = [d[k] for k in sorted(d.keys())]
print(out)
</snippet></ROW><ROW><id>9466078</id><snippet>[['s1.txt', 'ai1.txt'], ['s2.txt'], ['ai3.txt']]
</snippet></ROW><ROW><id>9466312</id><snippet>distutils</snippet></ROW><ROW><id>9466312</id><snippet>&gt;&gt;&gt; from distutils.version import LooseVersion  # or StrictVersion
&gt;&gt;&gt; LooseVersion("1.0-SNAPSHOT") &lt; LooseVersion("1.1-SNAPSHOT")
True
&gt;&gt;&gt; v = LooseVersion("1.0.1-SNAPSHOT")
&gt;&gt;&gt; v.version
[1, 0, 1, '-SNAPSHOT']
</snippet></ROW><ROW><id>9466505</id><snippet>sudo apt-get install cheese
</snippet></ROW><ROW><id>9466846</id><snippet>def orde(i, s):
    t = sorted(s)
    return t[:t.index(i)]

s = ['A','B','C']
orde("B", s)
</snippet></ROW><ROW><id>9467496</id><snippet>&gt;&gt;&gt; def match_commit(s):
    r = re.compile(r'((\w+*)+\w+:)')
    return re.match(r, s) is not None

&gt;&gt;&gt; match_commit("Signed-off-by:")
True
&gt;&gt;&gt; match_commit("Signed-off+by:")
False
&gt;&gt;&gt; match_commit("Signed--by:")
False
&gt;&gt;&gt; match_commit("Bug:")
True
&gt;&gt;&gt; match_commit("Bug-:")
False
</snippet></ROW><ROW><id>9467496</id><snippet>(\w+-)*</snippet></ROW><ROW><id>9467496</id><snippet>\w+:</snippet></ROW><ROW><id>9467833</id><snippet>class Person(object):
    def __init__(self, name):
        self.name = name

    def speak(self):
        print "Hi! My name is {self.name}.".format(self=self)
</snippet></ROW><ROW><id>9467833</id><snippet>Person</snippet></ROW><ROW><id>9467833</id><snippet>&gt;&gt;&gt; basil = Person("Basil")
&gt;&gt;&gt; polly = Person("Polly")
&gt;&gt;&gt; 
&gt;&gt;&gt; basil.speak()
Hi! My name is Basil.
&gt;&gt;&gt; polly.speak()
Hi! My name is Polly.
&gt;&gt;&gt; basil == polly
False
</snippet></ROW><ROW><id>9467833</id><snippet>HealthPotion</snippet></ROW><ROW><id>9467833</id><snippet>HealthPotion</snippet></ROW><ROW><id>9467833</id><snippet>Potion</snippet></ROW><ROW><id>9469400</id><snippet>ProxyFactory</snippet></ROW><ROW><id>9469400</id><snippet>ProxyClient.handle*()</snippet></ROW><ROW><id>9469400</id><snippet>from twisted.python import log
from twisted.web import http, proxy

class ProxyClient(proxy.ProxyClient):
    """Mange returned header, content here.

    Use `self.father` methods to modify request directly.
    """
    def handleHeader(self, key, value):
        # change response header here
        log.msg("Header: %s: %s" % (key, value))
        proxy.ProxyClient.handleHeader(self, key, value)

    def handleResponsePart(self, buffer):
        # change response part here
        log.msg("Content: %s" % (buffer[:50],))
        # make all content upper case
        proxy.ProxyClient.handleResponsePart(self, buffer.upper())

class ProxyClientFactory(proxy.ProxyClientFactory):
    protocol = ProxyClient

class ProxyRequest(proxy.ProxyRequest):
    protocols = dict(http=ProxyClientFactory)

class Proxy(proxy.Proxy):
    requestFactory = ProxyRequest

class ProxyFactory(http.HTTPFactory):
    protocol = Proxy
</snippet></ROW><ROW><id>9469400</id><snippet>twisted.web.proxy</snippet></ROW><ROW><id>9469400</id><snippet>twistd</snippet></ROW><ROW><id>9469400</id><snippet>portstr = "tcp:8080:interface=localhost" # serve on localhost:8080

if __name__ == '__main__': # $ python proxy_modify_request.py
    import sys
    from twisted.internet import endpoints, reactor

    def shutdown(reason, reactor, stopping=[]):
        """Stop the reactor."""
        if stopping: return
        stopping.append(True)
        if reason:
            log.msg(reason.value)
        reactor.callWhenRunning(reactor.stop)

    log.startLogging(sys.stdout)
    endpoint = endpoints.serverFromString(reactor, portstr)
    d = endpoint.listen(ProxyFactory())
    d.addErrback(shutdown, reactor)
    reactor.run()
else: # $ twistd -ny proxy_modify_request.py
    from twisted.application import service, strports

    application = service.Application("proxy_modify_request")
    strports.service(portstr, ProxyFactory()).setServiceParent(application)
</snippet></ROW><ROW><id>9469400</id><snippet>$ twistd -ny proxy_modify_request.py
</snippet></ROW><ROW><id>9469400</id><snippet>$ curl -x localhost:8080 http://example.com
</snippet></ROW><ROW><id>9469431</id><snippet>concat(
//div[@class='pTitle']/span[@class='small itemByline'],
substring('UNKNOWN', 
          1 + 7*(boolean(//div[@class='pTitle']/span[@class='small itemByline'])
          )
       )
</snippet></ROW><ROW><id>9469431</id><snippet>//div[@class='pTitle']/span[@class='small itemByline']</snippet></ROW><ROW><id>9469431</id><snippet>//div[@class='pTitle']/span[@class='small itemByline']</snippet></ROW><ROW><id>9469431</id><snippet>'UNKNOWN'</snippet></ROW><ROW><id>9469431</id><snippet>substring('UNKNOWN', 1+0</snippet></ROW><ROW><id>9469431</id><snippet>   number(true()) = 1
</snippet></ROW><ROW><id>9469431</id><snippet>   number(false()) = 0
</snippet></ROW><ROW><id>9469431</id><snippet>&lt;xsl:stylesheet version="1.0"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:for-each select="(//node())[not(position() &gt; count(//p))]"&gt;
   &lt;xsl:variable name="vPos" select="position()"/&gt;
   &lt;xsl:value-of select=
     "concat((//p)[position() = $vPos]/span,
             substring('UNKNOWN',
                       1 +7*boolean((//p)[position() = $vPos]/span)
                       )
             )
     "/&gt;

     &lt;xsl:text&gt;
&lt;/xsl:text&gt;
  &lt;/xsl:for-each&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>9469431</id><snippet>&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Title&lt;/h1&gt;
        &lt;p&gt;First Paragraph&lt;/p&gt;
        &lt;p&gt;Second paragraph: 
            &lt;span&gt;value&lt;/span&gt;
        &lt;/p&gt;
        &lt;p&gt;Third paragraph: 
            &lt;span&gt;value&lt;/span&gt;
        &lt;/p&gt;
        &lt;p&gt;Forth paragraph:&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>9469431</id><snippet>UNKNOWN
value
value
UNKNOWN
</snippet></ROW><ROW><id>9469495</id><snippet>%typemap(in,numinputs=0, noblock=1) int *err {
   int myerr = 0;
   $1 = &amp;myerr;
};
</snippet></ROW><ROW><id>9469677</id><snippet>Connection refused</snippet></ROW><ROW><id>9469699</id><snippet>startElement()</snippet></ROW><ROW><id>9469699</id><snippet>&lt;parent&gt;</snippet></ROW><ROW><id>9469699</id><snippet>endElement()</snippet></ROW><ROW><id>9469699</id><snippet>startElement()</snippet></ROW><ROW><id>9469699</id><snippet>class parserSAXHandler(handler.ContentHandler):

    def __init__(self):
        self.parentflag = False
        self.childlist  = []

    def startElement(self, name, attrs):
        if name == "parent":
           self.parentflag = True
        elif self.parentflag:
           self.childlist.append(name)

    def endElement(self,name):
        if name == "parent":
            self.parentflag = False
</snippet></ROW><ROW><id>9469699</id><snippet>childlist</snippet></ROW><ROW><id>9469699</id><snippet>&lt;child&gt;</snippet></ROW><ROW><id>9469699</id><snippet>&lt;parent&gt;</snippet></ROW><ROW><id>9469699</id><snippet>parent</snippet></ROW><ROW><id>9469699</id><snippet>class parserSAXHandler(handler.ContentHandler):

    def __init__(self):
        self.tagstack   = []
        self.childlist  = []

    def startElement(self, name, attrs):
        if self.tagstack[-1] == "parent":
           self.childlist.append(name)
        self.tagstack.append(name)

    def endElement(self,name):
        if name == self.tagstack[-1]:
            self.tagstack.pop()
        else:
            raise SAXParseException("tag closed without being open")
</snippet></ROW><ROW><id>9469699</id><snippet>xml.dom.minidom</snippet></ROW><ROW><id>9469699</id><snippet>lxml</snippet></ROW><ROW><id>9469699</id><snippet>from xml.dom.minidom import parseString

xml = """
    &lt;root&gt;
        &lt;parent&gt;
            &lt;child1&gt;X&lt;/child1&gt;
            &lt;child2&gt;Y&lt;/child2&gt;
        &lt;/parent&gt;
    &lt;/root&gt;
"""

dom = parseString(xml)
children = [c.localName for p in dom.getElementsByTagName("parent")
            for c in p.childNodes if c.nodeType == c.ELEMENT_NODE]
</snippet></ROW><ROW><id>9469699</id><snippet>minidom</snippet></ROW><ROW><id>9469733</id><snippet>key</snippet></ROW><ROW><id>9469733</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; G = nx.MultiGraph()
&gt;&gt;&gt; G.add_edge(1, 2, key='xyz', weight=2)
&gt;&gt;&gt; G.add_edge(1, 2, key='abc', weight=1)
&gt;&gt;&gt; G.edges(data=True)
[(1, 2, {'weight': 2}), (1, 2, {'weight': 1})]
</snippet></ROW><ROW><id>9469733</id><snippet>xyz</snippet></ROW><ROW><id>9469733</id><snippet>&gt;&gt;&gt; G.add_edge(1, 2, key='xyz', weight=7)
&gt;&gt;&gt; G.edges(data=True)
[(1, 2, {'weight': 7}), (1, 2, {'weight': 1})]
</snippet></ROW><ROW><id>9469733</id><snippet>&gt;&gt;&gt; G.get_edge_data(1, 2, key='xyz')
{'weight': 7}
</snippet></ROW><ROW><id>9469834</id><snippet>if hasattr(cls, 'objects'):
    if cls.objects.__class__ == models.Manager:
        # default manager, override
        cls.add_to_class('objects', TranslationManager()
    else:
        # there is a custom manager, don't override
        class CombinedManager(cls.objects.__class__, TranslationManager):
            pass
        cls.add_to_class('objects', CombinedManager())
</snippet></ROW><ROW><id>9469834</id><snippet>TranslationManager</snippet></ROW><ROW><id>9469834</id><snippet>TranslationManager</snippet></ROW><ROW><id>9469834</id><snippet>TranslationManager</snippet></ROW><ROW><id>9469834</id><snippet>TranslationManager</snippet></ROW><ROW><id>9470092</id><snippet>map()</snippet></ROW><ROW><id>9470092</id><snippet>def _replaceitem(x):
    if x == '?':
        return 'i'
    elif x == 'x':
       return 10
    else:
        return x

a = map(_replaceitem, a)
</snippet></ROW><ROW><id>9470092</id><snippet>for i in xrange(len(a)):</snippet></ROW><ROW><id>9470092</id><snippet>a[i]</snippet></ROW><ROW><id>9470092</id><snippet>(index, value)</snippet></ROW><ROW><id>9470092</id><snippet>enumerate(a)</snippet></ROW><ROW><id>9470092</id><snippet>a.index('?')</snippet></ROW><ROW><id>9470209</id><snippet>unicode</snippet></ROW><ROW><id>9470225</id><snippet>In [11]: re.sub(r'\[.*?\]', '', 'abcd[e]yth[ac]ytwec')
Out[11]: 'abcdythytwec'
</snippet></ROW><ROW><id>9470323</id><snippet>import time
import subprocess
from multiprocessing import Process

cmd1 = ['nice', 'time', 'java', '-Xmx6G', '-jar', '/comparison/old_picard/MarkDuplicates.jar', 'I=/comparison/old.bam', 'O=/comparison/old_picard/markdups/old.dupsFlagged.bam', 'M=/comparison/old_picard/markdups/old.metrics.txt', 'TMP_DIR=/comparison', 'VALIDATION_STRINGENCY=LENIENT', 'ASSUME_SORTED=true']
cmd2 = ['nice', 'time', 'java', '-Xmx6G', '-jar', '/comparison/new_picard/MarkDuplicates.jar', 'I=/comparison/new.bam', 'O=/comparison/new_picard/markdups/new.dupsFlagged.bam', 'M=/comparison/new_picard/markdups/new.metrics.txt', 'TMP_DIR=/comparison', 'VALIDATION_STRINGENCY=LENIENT', 'ASSUME_SORTED=true']

def timeit(cmd):
    print cmd
    past = time.time()
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    results = [p.communicate()]
    present = time.time()
    total = present - past
    results.append(total)
    return results

p1 = Process(target=timeit, args=(cmd1,))
p2 = Process(target=timeit, args=(cmd2,))

for p in (p1, p2):
    p.start()
for p in (p1, p2):
    p.join()
</snippet></ROW><ROW><id>9470572</id><snippet>def default_float_format( x):
    return '{:.2%}'.format(x)

class A:

  def __init__(self, params):
    # ...
    # by default printing all float values as percentages with 2 decimals
    self.format_functions = {float: default_float_format}
  def __str__(self):
    # uses self.format_functions to format output
    pass

a = A(1)
pickle.dumps(a)
</snippet></ROW><ROW><id>9470692</id><snippet>tags = [Tag('a1'),Tag('a2')]
</snippet></ROW><ROW><id>9470692</id><snippet>new_post = Post('a great new post',post_tags=tags)
db.session.merge(new_post)
db.session.commit()
</snippet></ROW><ROW><id>9470865</id><snippet> f = lambda x : x+1
 g = lambda x : 2*x
 d = { f : 7, g : 3 }
 print(d)
 d[f]=8
 print(d)
 def app (d,x): return  np.sum([ v * k(x) for k,v in d.items() ] )
 print(app(d,0))
</snippet></ROW><ROW><id>9470865</id><snippet>{&lt;function &lt;lambda&gt; at 0x115e7dc08&gt;: 7, &lt;function &lt;lambda&gt; at 0x115e7de60&gt;: 3}
{&lt;function &lt;lambda&gt; at 0x115e7dc08&gt;: 8, &lt;function &lt;lambda&gt; at 0x115e7de60&gt;: 3}
8
</snippet></ROW><ROW><id>9471386</id><snippet>a = [4, 2, 1, 5]
a.sort()
print [x - i for i, x in enumerate(a)]
</snippet></ROW><ROW><id>9471386</id><snippet>[1, 1, 2, 2]
</snippet></ROW><ROW><id>9471386</id><snippet>a</snippet></ROW><ROW><id>9471386</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>9471386</id><snippet>from itertools import groupby

def sub(x):
    return x[1] - x[0]

a = [5, 3, 7, 4, 1, 2, 9, 10]
ranges = []
for k, iterable in groupby(enumerate(sorted(a)), sub):
     rng = list(iterable)
     if len(rng) == 1:
         s = str(rng[0][1])
     else:
         s = "%s-%s" % (rng[0][1], rng[-1][1])
     ranges.append(s)
print ranges
</snippet></ROW><ROW><id>9471386</id><snippet>['1-5', '7', '9-10']
</snippet></ROW><ROW><id>9471536</id><snippet>t</snippet></ROW><ROW><id>9471536</id><snippet>etree</snippet></ROW><ROW><id>9471536</id><snippet>t.xpath('//a[@href = "http://exact url"]')[0]
</snippet></ROW><ROW><id>9471536</id><snippet>table</snippet></ROW><ROW><id>9471536</id><snippet>ancestor</snippet></ROW><ROW><id>9471536</id><snippet>t.xpath('//a[@href = "http://exact url"]/ancestor::table')[-1]
</snippet></ROW><ROW><id>9471668</id><snippet>safe</snippet></ROW><ROW><id>9471719</id><snippet>from PIL import Image 

im = Image.open("cat2.png")
px=im.load()
im2 = im.copy()
px2=im2.load()
sx,sy=im.size
def turnpixel(Nix,Niy):
    for ix in range(sx):
        for iy in range(sy):
            r2=(Nix-ix)**2+(Niy-iy)**2
            if r2&lt;5:
                if sum(px[ix,iy])&gt;100: # rgb sum&gt;100 is considered ON.
                    px2[Nix,Niy]=(255,255,255)                            
                    return
                    # we turned a pixel on, so we are done with it.

for Nix in range(sx):
    for Niy in range(sy):
        px2[Nix,Niy]=(0,0,0)
        turnpixel(Nix,Niy)

im.show()
im2.show()
</snippet></ROW><ROW><id>9471719</id><snippet>import math
def turnpixel(Nix,Niy):
    for ix in range(sx):
        for iy in range(sy):
            r=int(math.sqrt((Nix-ix)**2+(Niy-iy)**2))
            def convfunc(o,v):
                return o+int(v/(r*20+1))
            px2[Nix,Niy]=tuple(map(convfunc,px2[Nix,Niy],px[ix,iy]))
            if sum(px2[Nix,Niy])&gt;=3*250:
                return
</snippet></ROW><ROW><id>9471719</id><snippet>        inv2sigma2=1.0/(2*3)
        r2=(Nix-ix)**2+(Niy-iy)**2
        fact=inv2sigma2/(math.pi)*math.exp(-r2*inv2sigma2)
        def convfunc(o,v):
            return o+int(v*fact)
</snippet></ROW><ROW><id>9471722</id><snippet>\xe2\x80\x99</snippet></ROW><ROW><id>9471722</id><snippet>&gt;&gt;&gt; print 'What\xe2\x80\x99s Up: Balloon to the Rescue!'.decode('utf-8')
What’s Up: Balloon to the Rescue!
</snippet></ROW><ROW><id>9472245</id><snippet>urlparse</snippet></ROW><ROW><id>9472357</id><snippet>value</snippet></ROW><ROW><id>9472357</id><snippet>cpe_vendor=cpe%3A%2F%3Aa-a-s_application_access_server</snippet></ROW><ROW><id>9472357</id><snippet>=</snippet></ROW><ROW><id>9472357</id><snippet>%3A</snippet></ROW><ROW><id>9472357</id><snippet>cpe_vendor</snippet></ROW><ROW><id>9472357</id><snippet>cpe:/:a-a-s_application_access_server</snippet></ROW><ROW><id>9472448</id><snippet>print(str(2)+str(1))
</snippet></ROW><ROW><id>9472535</id><snippet>python setup.py install</snippet></ROW><ROW><id>9472535</id><snippet>0.99</snippet></ROW><ROW><id>9472897</id><snippet>executemany</snippet></ROW><ROW><id>9472897</id><snippet>executemany</snippet></ROW><ROW><id>9472897</id><snippet>cur.execute("INSERT INTO TWEETS(?, ?, ?, ?)", (status.text, 
                                               status.author.screen_name, 
                                               status.created_at, 
                                               status.source))
</snippet></ROW><ROW><id>9472897</id><snippet>INSERT INTO TWEETS VALUES(?, ?, ?, ?)
</snippet></ROW><ROW><id>9472941</id><snippet>StringVar</snippet></ROW><ROW><id>9472941</id><snippet>import Tkinter as tk

class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        button = tk.Button(text="Save", command=self.save)
        button.pack(side="top")
        self.widgets = []
        for line in ["one","two","three","four"]:
            widget = tk.Entry(self)
            widget.insert(0, line)
            widget.pack(side="top", fill="x")
            self.widgets.append(widget)

    def save(self):
        for widget in self.widgets:
            print widget.get()

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>9473373</id><snippet>def save(self, activity = Activity()):
</snippet></ROW><ROW><id>9473373</id><snippet>save</snippet></ROW><ROW><id>9473373</id><snippet>Activity</snippet></ROW><ROW><id>9473373</id><snippet>Activity</snippet></ROW><ROW><id>9473373</id><snippet>save</snippet></ROW><ROW><id>9473373</id><snippet>def save(self, activity=None):
    if activity is None:
        activity = Activity()
    # Rest of the method
</snippet></ROW><ROW><id>9473373</id><snippet>Activity</snippet></ROW><ROW><id>9473472</id><snippet>__init__()</snippet></ROW><ROW><id>9473472</id><snippet>__init__()</snippet></ROW><ROW><id>9473472</id><snippet>B</snippet></ROW><ROW><id>9473472</id><snippet>class A(object):
    __metaclass__ = ABCMeta
    def __init__(self):
        self._internal = ['initialized']
    ...

class B(A):   
    def __init__(self):
        A.__init__(self)
        self.local = 'OK'
    ...
</snippet></ROW><ROW><id>9473472</id><snippet>class TestCase(unittest.TestCase):

    def test_implementation(self): 
        self.assertEqual(['initialized'], B().get_a() )  # this passes but for wrong reason
        b_used = B()
        b_used.set_a('used') 
        b_unused = B()
        ...
</snippet></ROW><ROW><id>9473504</id><snippet>def getColumn(filename, column):
    results = csv.reader(open(filename), delimiter="\t")
    return [result[column] for result in results]
</snippet></ROW><ROW><id>9473504</id><snippet>time = getColumn("filename",0)
volt = getColumn("filaname",1)

plt.figure("Time/Volt")
plt.xlabel("Time(ms)")
plt.ylabel("Volt(mV)")
plt.plot(time,volt)
</snippet></ROW><ROW><id>9473524</id><snippet>expose-event</snippet></ROW><ROW><id>9473576</id><snippet>AWSAccessKeyId</snippet></ROW><ROW><id>9473576</id><snippet>00000000000000000000</snippet></ROW><ROW><id>9473576</id><snippet>AKIAI44QH8DHBEXAMPLE</snippet></ROW><ROW><id>9473576</id><snippet>Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg=</snippet></ROW><ROW><id>9473576</id><snippet>import hmac
from base64 import b64encode
from hashlib import sha256

secret_key = '1234567890'

to_sign = """GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponseGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06"""

print b64encode(hmac.new(secret_key, to_sign, sha256).digest())
</snippet></ROW><ROW><id>9473783</id><snippet>string(normalize-space(//table/tr[@id = 'something']))
</snippet></ROW><ROW><id>9474043</id><snippet>sed</snippet></ROW><ROW><id>9474043</id><snippet>sed -i -e '4 s/(dB)//' -e '4 s/Best Unit/Best_Unit/' -e '1,3 d' yourfile.whatever
</snippet></ROW><ROW><id>9474043</id><snippet>-i</snippet></ROW><ROW><id>9474043</id><snippet>-e</snippet></ROW><ROW><id>9474043</id><snippet>'4 s/(dB)//'</snippet></ROW><ROW><id>9474043</id><snippet>4</snippet></ROW><ROW><id>9474043</id><snippet>''</snippet></ROW><ROW><id>9474043</id><snippet>'(dB)'</snippet></ROW><ROW><id>9474043</id><snippet>'4 s/Best Unit/Best_Unit/'</snippet></ROW><ROW><id>9474043</id><snippet>'1,3 d'</snippet></ROW><ROW><id>9474043</id><snippet>sed</snippet></ROW><ROW><id>9474369</id><snippet>class SjsuSpider(CrawlSpider):

    name = 'sjsu'
    allowed_domains = ['sjsu.edu']
    start_urls = ['http://cs.sjsu.edu/']
    # allow=() is used to match all links
    rules = [Rule(SgmlLinkExtractor(allow=()), callback='parse_item')]

    def parse_item(self, response):
        x = HtmlXPathSelector(response)

        filename = "sjsupages"
        # open a file to append binary data
        open(filename, 'ab').write(response.body)
</snippet></ROW><ROW><id>9474369</id><snippet>rules = [
    Rule(SgmlLinkExtractor(allow=()), follow=True),
    Rule(SgmlLinkExtractor(allow=()), callback='parse_item')
]
</snippet></ROW><ROW><id>9474435</id><snippet>reduce()</snippet></ROW><ROW><id>9474435</id><snippet>result = reduce(function, iterable, start)
</snippet></ROW><ROW><id>9474435</id><snippet>result = start
for x in iterable:
    result = function(result, x)
</snippet></ROW><ROW><id>9474528</id><snippet>run</snippet></ROW><ROW><id>9474528</id><snippet>threading.Thread</snippet></ROW><ROW><id>9474528</id><snippet>start</snippet></ROW><ROW><id>9474528</id><snippet>import threading
import time

class myBot(JabberBot, threading.Thread):
  def __init__( self, jid, password, res = none):
    threading.Thread.__init__(self)

  def run(self):
    while True:
      self.autoNotify()
      time.sleep(5) # wait 4 seconds

  def autoNotify(self):
    self.send('someuser@jabber.example.com','cooool message text!')
</snippet></ROW><ROW><id>9474528</id><snippet> myBot(...).start()
</snippet></ROW><ROW><id>9474528</id><snippet>class myBot(JabberBot):
  def start(self):
    threading.Thread(target=self.autoNotifyLoop).start()

  def autoNotifyLoop(self):
    while True:
      self.autoNotify()
      time.sleep(5) # wait 4 seconds

  def autoNotify(self):
    self.send('someuser@jabber.example.com','cooool message text!')
</snippet></ROW><ROW><id>9474528</id><snippet>def call_async(func, *args, **kw):
  threading.Thread(target=func, args=args, kwargs=kw).start()

def do_something(msg):
  print msg

call_async(do_something, "Don't overuse threads!")
</snippet></ROW><ROW><id>9474556</id><snippet>(0, 1)"no()"
</snippet></ROW><ROW><id>9474556</id><snippet>(0, 2)"no()"</snippet></ROW><ROW><id>9474556</id><snippet>(0, 3)"no()"</snippet></ROW><ROW><id>9474601</id><snippet>def custom_split(s):
    def int_range_expand(s):
        try:
            return [int(s)]
        except ValueError:
            try:
                start, end = map(int, s.split('-'))
                return range(start, end+1)
            except Exception:
                pass
        return [s]
    return sum(map(int_range_expand, s.split('.')), [])

&gt;&gt;&gt; custom_split('Oreo.12.37-40.Apple.78')
['Oreo', 12, 37, 38, 39, 40, 'Apple', 78]
</snippet></ROW><ROW><id>9474601</id><snippet>1. custom_split('Oreo.12.37-40.Apple.78')
2. s &lt;= 'Oreo.12.37-40.Apple.78'
3. s.split('.') =&gt; ['Oreo', '12', '37-40', 'Apple', '78']
4. map(int_range_expand, ['Oreo', '12', '37-40', 'Apple', '78'])
       =&gt; [['Oreo'], [12], [37, 38, 39, 40], ['Apple'], [78]]
5. sum([['Oreo'], [12], [37, 38, 39, 40], ['Apple'], [78]], [])
       =&gt; ['Oreo', 12, 37, 38, 39, 40, 'Apple', 78]
</snippet></ROW><ROW><id>9474601</id><snippet>int_range_expand()</snippet></ROW><ROW><id>9474601</id><snippet>37-40</snippet></ROW><ROW><id>9474601</id><snippet>itertools.chain</snippet></ROW><ROW><id>9474645</id><snippet>nltk.tokenize</snippet></ROW><ROW><id>9474645</id><snippet>&gt;&gt;&gt; from nltk import tokenize
&gt;&gt;&gt; p = "Good morning Dr. Adams. The patient is waiting for you in room number 3."
&gt;&gt;&gt; tokenize.sent_tokenize(p)
['Good morning Dr. Adams.', 'The patient is waiting for you in room number 3.']
</snippet></ROW><ROW><id>9474781</id><snippet>locale.atoi()</snippet></ROW><ROW><id>9474781</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_NUMERIC, 'en_US')
'en_US'
&gt;&gt;&gt; locale.atoi('123,456,789')
123456789
</snippet></ROW><ROW><id>9474815</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>9474815</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array(range(1, 28)).reshape((3, 3, 3))
&gt;&gt;&gt; x
array([[[ 1,  2,  3],
        [ 4,  5,  6],
        [ 7,  8,  9]],

       [[10, 11, 12],
        [13, 14, 15],
        [16, 17, 18]],

       [[19, 20, 21],
        [22, 23, 24],
        [25, 26, 27]]])
&gt;&gt;&gt; x[:,0,0]
array([ 1, 10, 19])
&gt;&gt;&gt; x[0,:,0]
array([1, 4, 7])
&gt;&gt;&gt; x[0,0,:]
array([1, 2, 3])
</snippet></ROW><ROW><id>9474894</id><snippet>from settings import *
ROOT_URLCONF='management_urls.py'
</snippet></ROW><ROW><id>9474894</id><snippet>from settings import *
ROOT_URLCONF='public_urls.py'
</snippet></ROW><ROW><id>9474894</id><snippet># run public
./manage.py runserver --settings public_settings
# run management
./manage.py runserver --settings management_settings
</snippet></ROW><ROW><id>9474916</id><snippet>Popen</snippet></ROW><ROW><id>9474916</id><snippet>from subprocess import Popen

# start program
p = Popen(["program.exe", "arg1"])
# do other stuff here
# ...
# at the end wait for the program to exit
returncode = p.wait()
# run final step here
</snippet></ROW><ROW><id>9475124</id><snippet>def func(a, b=None):
    if b is None:
        b = 100
    return a + b
</snippet></ROW><ROW><id>9475483</id><snippet>'cs.sjsu.edu'</snippet></ROW><ROW><id>9475483</id><snippet>rules = [Rule(SgmlLinkExtractor(), follow=True, callback='parse_item')]
</snippet></ROW><ROW><id>9475484</id><snippet>fork()</snippet></ROW><ROW><id>9475575</id><snippet>filledArray(initHeight, filledArray(initWidth, 0))</snippet></ROW><ROW><id>9475575</id><snippet>filledArray</snippet></ROW><ROW><id>9475575</id><snippet>value</snippet></ROW><ROW><id>9475575</id><snippet>if type(value) == list:
   value = list(value)
</snippet></ROW><ROW><id>9475575</id><snippet>type(value)(value)
</snippet></ROW><ROW><id>9475625</id><snippet>/</snippet></ROW><ROW><id>9475625</id><snippet>//</snippet></ROW><ROW><id>9475625</id><snippet>for d in range(len(r) // 2):
</snippet></ROW><ROW><id>9475625</id><snippet>range(int(len(r))/2)</snippet></ROW><ROW><id>9475918</id><snippet>w</snippet></ROW><ROW><id>9475918</id><snippet>b</snippet></ROW><ROW><id>9475918</id><snippet>:help 'iskeyword'</snippet></ROW><ROW><id>9475918</id><snippet>:verbose set iskeyword?</snippet></ROW><ROW><id>9475949</id><snippet>&gt;&gt;&gt; m = {}
&gt;&gt;&gt; m[1] = 1
&gt;&gt;&gt; m[1,2] = 12
&gt;&gt;&gt; m[1,2,"three",4.5] = 12345
&gt;&gt;&gt; sum(m.values()) #better use m.itervalues() in python 2.* 
12358
</snippet></ROW><ROW><id>9475950</id><snippet>id()</snippet></ROW><ROW><id>9475990</id><snippet>L[:]</snippet></ROW><ROW><id>9476132</id><snippet>import csv

file_1_tuples = []

with open("file_1.csv") as fh:
    csv_reader = csv.reader ( fh )
    for row in csv_reader:
        file_1_tuples.append(  tuple(row)  )

with open("file_2.csv") as fh:
    csv_reader = csv.reader ( fh )
    for row in csv_reader:
        if tuple(row[0:3]) in file_1_tuples:
            print ( row[3:6] )
</snippet></ROW><ROW><id>9476132</id><snippet>file_1.csv</snippet></ROW><ROW><id>9476132</id><snippet>person, john, smith
person, anne, frank
person, bob, macdonald
fruit, orange, banana
fruit, strawberry, fields
fruit, ringring, banana
</snippet></ROW><ROW><id>9476132</id><snippet>file_2.csv</snippet></ROW><ROW><id>9476132</id><snippet>person, john, smith, 1, 2, 3
person, anne, frank, 4, 5, 6
person, bob, macdonald, 7, 8, 9
</snippet></ROW><ROW><id>9476132</id><snippet>[' 1', ' 2', ' 3']
[' 4', ' 5', ' 6']
[' 7', ' 8', ' 9']
</snippet></ROW><ROW><id>9476132</id><snippet>import csv, pprint

with open("file_1.csv") as fh:
    csv_reader = csv.reader ( fh )
    file_1_tuples = { tuple(row) for row in csv_reader }

with open("file_2.csv") as fh:
    csv_reader = csv.reader ( fh )
    matched_rows = [ row for row in csv_reader if (tuple(row[:3]) in file_1_tuples)]

pprint.pprint (matched_rows)
</snippet></ROW><ROW><id>9476132</id><snippet>row = [element.strip(' ') for element in row]</snippet></ROW><ROW><id>9476152</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>9476152</id><snippet>numpy.float64</snippet></ROW><ROW><id>9476298</id><snippet>recurrence.save()</snippet></ROW><ROW><id>9476298</id><snippet>recurrence.repeat_on = (EVENT_DAY_CHOICES[1][0], EVENT_DAY_CHOICES[3][0], EVENT_DAY_CHOICES[5][0])
</snippet></ROW><ROW><id>9476311</id><snippet>for row in csv_doc:
     for cell in row:
          csv_array.append(cell)
</snippet></ROW><ROW><id>9476701</id><snippet>use_reloader=False</snippet></ROW><ROW><id>9476701</id><snippet>app.run</snippet></ROW><ROW><id>9476701</id><snippet>app.run(debug=True, use_reloader=False)</snippet></ROW><ROW><id>9476854</id><snippet>import random

theirNumbers=[5,24,67]

def checkNumbers(theirNumbers):
    lottoNumbers = []
    for count in range(3)
            lottoNumbers.append(random.randint(0,100)
    winning = True
    for number in theirNumbers:
    if not each in lottoNumbers: winning=False
    if winning == True: print("Winner!")
</snippet></ROW><ROW><id>9476865</id><snippet>b = np.array([ ['h','e','l','l','o'],['s','n','a','k','e'],['p','l','a','t','e'] ])
</snippet></ROW><ROW><id>9476865</id><snippet>a</snippet></ROW><ROW><id>9476865</id><snippet>list('hello') == ['h','e','l','l','o']
</snippet></ROW><ROW><id>9476865</id><snippet>b = np.array([ list(word) for word in a ])
</snippet></ROW><ROW><id>9476865</id><snippet>a</snippet></ROW><ROW><id>9476865</id><snippet>['snakes','on','a','plane']</snippet></ROW><ROW><id>9476865</id><snippet>wid = max(len(w) for w in a)
b = np.array([ list(w.center(wid)) for w in a])
</snippet></ROW><ROW><id>9476865</id><snippet>string.center(width)</snippet></ROW><ROW><id>9476865</id><snippet>rjust</snippet></ROW><ROW><id>9476865</id><snippet>ljust</snippet></ROW><ROW><id>9477105</id><snippet>try:
    (emailuser, domain) = row[0].split('@')
except ValueError:
    continue
</snippet></ROW><ROW><id>9477161</id><snippet>'abc' == 'abc123' # false
</snippet></ROW><ROW><id>9477161</id><snippet>'abc' in ['cde','fdabc','abc123']</snippet></ROW><ROW><id>9477161</id><snippet>'abc' in ['cde','fdabc','abc123'] # False
</snippet></ROW><ROW><id>9477161</id><snippet>'abc' in 'abc123'</snippet></ROW><ROW><id>9477161</id><snippet>x in y</snippet></ROW><ROW><id>9477161</id><snippet>x</snippet></ROW><ROW><id>9477161</id><snippet>y</snippet></ROW><ROW><id>9477161</id><snippet>y.find(x) != -1</snippet></ROW><ROW><id>9477161</id><snippet>in</snippet></ROW><ROW><id>9477161</id><snippet>'abc' in ['abc123']</snippet></ROW><ROW><id>9477161</id><snippet>in</snippet></ROW><ROW><id>9477161</id><snippet>y</snippet></ROW><ROW><id>9477287</id><snippet>c.execute('''select modified from changes where modified &gt; ?''', (last_run,))
</snippet></ROW><ROW><id>9477301</id><snippet>webapp2</snippet></ROW><ROW><id>9477301</id><snippet>protorpc</snippet></ROW><ROW><id>9477301</id><snippet>protorpc</snippet></ROW><ROW><id>9477301</id><snippet>webapp</snippet></ROW><ROW><id>9477301</id><snippet>webapp2</snippet></ROW><ROW><id>9477301</id><snippet>threadsafe</snippet></ROW><ROW><id>9477301</id><snippet>app.yaml</snippet></ROW><ROW><id>9477301</id><snippet># -- snip --   
runtime: python25
threadsafe: false
# -- /snip --
</snippet></ROW><ROW><id>9477301</id><snippet>webapp2</snippet></ROW><ROW><id>9477470</id><snippet>from collections import defaultdict

friends = defaultdict(set)
friendpairs =  [[0,1], [0,4], [0,3], [0,432], [1,232], [1,2], [2,444], [2,12]]

for f1,f2 in friendpairs : friends[f1].add(f2)

friendOfFriends = dict( (guy,fr.copy()) for guy,fr in friends.iteritems())

for f1 in friendOfFriends:
    for f2 in friends[f1]:
        friendOfFriends[f1].update(friends[f2])
</snippet></ROW><ROW><id>9477470</id><snippet>        friendOfFriends[f1].update(friends.get(f2,()))
</snippet></ROW><ROW><id>9477470</id><snippet>friends</snippet></ROW><ROW><id>9477634</id><snippet>pip install readline</snippet></ROW><ROW><id>9477634</id><snippet>easy_install readline</snippet></ROW><ROW><id>9477666</id><snippet>L = [['fmt/10', 3L, 5L, Decimal('9500')], 
     ['fmt/353', 1L, 1L, Decimal('500')], 
     ['fmt/7', 3L, 5L, Decimal('9500')], 
     ['fmt/8', 3L, 5L, Decimal('9500')], 
     ['fmt/9', 3L, 5L, Decimal('9500')]]
</snippet></ROW><ROW><id>9477666</id><snippet>zip(*L)</snippet></ROW><ROW><id>9477666</id><snippet>[('fmt/10', 'fmt/353', 'fmt/7', 'fmt/8', 'fmt/9'),
 (3L, 1L, 3L, 3L, 3L),
 (5L, 1L, 5L, 5L, 5L),
 (Decimal('9500'), Decimal('500'), Decimal('9500'), Decimal('9500'), Decimal('9500'))]
</snippet></ROW><ROW><id>9477666</id><snippet>A, B, C, D = zip(*L)
</snippet></ROW><ROW><id>9478492</id><snippet>app = web.application(urls, globals())
</snippet></ROW><ROW><id>9478492</id><snippet>app</snippet></ROW><ROW><id>9478492</id><snippet>web.application()</snippet></ROW><ROW><id>9478492</id><snippet>app</snippet></ROW><ROW><id>9478492</id><snippet>form = web.input(name="Nobody", greet=None)
</snippet></ROW><ROW><id>9478492</id><snippet>name</snippet></ROW><ROW><id>9478492</id><snippet>greet</snippet></ROW><ROW><id>9478513</id><snippet>if keycode == wx.WXK_ESCAPE and event.GetEventObject() in ESC_list:
#                                                   ^^ HERE
</snippet></ROW><ROW><id>9478513</id><snippet>ESC_list</snippet></ROW><ROW><id>9478647</id><snippet>10 ** (len(t) / len(word))</snippet></ROW><ROW><id>9478647</id><snippet>def similarity(haystack, needle):

    if needle not in haystack:
        return 0

    words = haystack.lower().split()

    if needle in words:
        return 10

    for word in words:
        if word.startswith(needle):
            return 10 ** (len(needle) / len(word))

    return 1
</snippet></ROW><ROW><id>9478655</id><snippet>inpaint()</snippet></ROW><ROW><id>9478781</id><snippet>from bigfloat import *
def logit(p):
    with precision(100000):
        return log(p)- log(1 -BigFloat(p))

def inv_logit(p):
    with precision(100000):
        return exp(p) / (1 + exp(p))

int(round(logit(inv_logit(12422.0))))
# gives 12422
int(round(logit(inv_logit(-12422.0))))
# gives -12422
</snippet></ROW><ROW><id>9478781</id><snippet>wget http://pypi.python.org/packages/source/b/bigfloat/bigfloat-0.3.0a2.tar.gz
tar xvzf bigfloat-0.3.0a2.tar.gz 
cd bigfloat-0.3.0a2
as root:
python setup.py install
</snippet></ROW><ROW><id>9478781</id><snippet>&gt;&gt;&gt; float(inv_logit(-15))
3.059022269256247e-07

&gt;&gt;&gt; float(inv_logit(15))
0.9999996940977731
</snippet></ROW><ROW><id>9478781</id><snippet>from sympy import *
def inv_logit(p):
    return exp(p) / (1 + exp(p))
def logit(p):
    return log(p)- log(1 -p)

x=Symbol('x')
expr=logit(inv_logit(x))
# expr is now:
# -log(1 - exp(x)/(1 + exp(x))) + log(exp(x)/(1 + exp(x)))
# rewrite it: (there are many other ways to do this. read the doc)
# you may want to make an expansion (of some suitable kind) instead.
expr=cancel(powsimp(expr)).expand()
# it is now 'x'

# just evaluate any expression like this:    
result=expr.subs(x,123.231)

# result is now an equation containing: 123.231
# to get the float: 
result.evalf()
</snippet></ROW><ROW><id>9479284</id><snippet>commands.getoutput("ls –lR") 
</snippet></ROW><ROW><id>9479284</id><snippet>subprocess.check_output("ls -lR")
</snippet></ROW><ROW><id>9479284</id><snippet>lslr = commands.getoutput("ls –lR") 
print lslr
</snippet></ROW><ROW><id>9479616</id><snippet>p = UserProfile.objects.get(id=1)
contacts = p.mutual_contacts()
positions = Position.objects.filter(positiontimestamp__profile__in=contacts)
</snippet></ROW><ROW><id>9479621</id><snippet>&gt;&gt;&gt; from scipy.linalg import blas as FB
&gt;&gt;&gt; vx = FB.dgemm(alpha=1., a=v1, b=v2, trans_b=True)
</snippet></ROW><ROW><id>9479621</id><snippet>&gt;&gt;&gt; c = NP.ones((4, 3))
&gt;&gt;&gt; c.flags
      C_CONTIGUOUS : True          # refers to C-contiguous order
      F_CONTIGUOUS : False         # fortran-contiguous
      OWNDATA : True
      MASKNA : False
      OWNMASKNA : False
      WRITEABLE : True
      ALIGNED : True
      UPDATEIFCOPY : False
</snippet></ROW><ROW><id>9479621</id><snippet>&gt;&gt;&gt; c = NP.array(c, order="F")

&gt;&gt;&gt; c.flags
      C_CONTIGUOUS : False
      F_CONTIGUOUS : True
      OWNDATA : True
      MASKNA : False
      OWNMASKNA : False
      WRITEABLE : True
      ALIGNED : True
      UPDATEIFCOPY : False
</snippet></ROW><ROW><id>9479621</id><snippet>&gt;&gt;&gt; import scipy.linalg.blas as FB
&gt;&gt;&gt; vx = FB.dgemm(alpha=1.0, a=A.T, b=A.T, trans_b=True)
</snippet></ROW><ROW><id>9479621</id><snippet>&gt;&gt;&gt; super_dot = lambda v, w: FB.dgemm(alpha=1., a=v.T, b=w.T, trans_b=True)
</snippet></ROW><ROW><id>9479676</id><snippet>FreeTDS</snippet></ROW><ROW><id>9479676</id><snippet>SQL Server Native Client 10.0</snippet></ROW><ROW><id>9479991</id><snippet>lxml.html</snippet></ROW><ROW><id>9479991</id><snippet>from lxml import html
t = html.fromstring(text)
tds = t.xpath("table/tbody/tr[2]/td")
for td in tds:
    if tds.text.startswith("0."):
        td.getparent().remove(td)
text = html.tostring(t)
</snippet></ROW><ROW><id>9480192</id><snippet>class MetaX(type):

    def __add__(cls, other):
        name = '{}+{}'.format(cls.__name__, other.__name__)
        return type(cls)(name, (cls, other), dict())


class X(object):    # metaclass=MetaX in py3k

    __metaclass__ = MetaX

    def __add__(self, other):
        cls = type(self) + type(other)
        return cls
</snippet></ROW><ROW><id>9480192</id><snippet>X</snippet></ROW><ROW><id>9480192</id><snippet>class A(X):
    def func_a(self):
        print "I'm in func_a"

class B(X):
    def func_b(self):
        print "I'm in func_b"

class C(X):
    def func_c(self):
        print "I'm in func_c"

L = A + B
l = L()
l.func_a()  # -&gt; I'm in func_a
l.func_b()  # -&gt; I'm in func_b

P = A + C
p = P()
p.func_a()  # -&gt; I'm in func_a
p.func_c()  # -&gt; I'm in func_c
</snippet></ROW><ROW><id>9480192</id><snippet>def get_enhanced_A(typ)   # you can't use type as a keyword here
    dct = {'B': B, 'C': C}
    return type('A+{}'.format(typ), (A,dct[typ]), dict())
</snippet></ROW><ROW><id>9480703</id><snippet>str.isalnum()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isalpha()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isdecimal()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isdigit()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isidentifier()
</snippet></ROW><ROW><id>9480703</id><snippet>str.islower()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isnumeric()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isprintable()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isspace()
</snippet></ROW><ROW><id>9480703</id><snippet>str.istitle()
</snippet></ROW><ROW><id>9480703</id><snippet>str.isupper()
</snippet></ROW><ROW><id>9481233</id><snippet>urllib.py</snippet></ROW><ROW><id>9481233</id><snippet>import</snippet></ROW><ROW><id>9481305</id><snippet>calendar.monthrange(year, month)</snippet></ROW><ROW><id>9481305</id><snippet>year</snippet></ROW><ROW><id>9481305</id><snippet>month</snippet></ROW><ROW><id>9481305</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; print calendar.monthrange(2012,1)[1]
31
&gt;&gt;&gt; calendar.monthrange(2012,2)[1]
29
</snippet></ROW><ROW><id>9481305</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; print calendar.monthrange(now.year, now.month)[1]
29
</snippet></ROW><ROW><id>9481600</id><snippet>import time
import cPickle
import random

random.seed()
l = [ random.random()*1000 for i in xrange(100000) ]

t0 = time.time()
s1 = ','.join(map(str,l))
t1 = time.time() - t0

t0 = time.time()
s2 = cPickle.dumps(l, -1)
t2 = time.time() - t0

print 's1: len1=%s t1=%s' % (len(s1), t1)
print 's2: len2=%s t2=%s' % (len(s2), t2)
print 's2/s1: len2/len1=%s t2/t1=%s' % (float(len(s2))/len(s1), t2/t1)
</snippet></ROW><ROW><id>9481600</id><snippet>s1: len1=1389129 t1=0.281008005142
s2: len2=900206 t2=0.0193469524384
s2/s1: len2/len1=0.648036287487 t2/t1=0.0688484031925
</snippet></ROW><ROW><id>9481600</id><snippet>l = cPickle.loads(s2)
</snippet></ROW><ROW><id>9482099</id><snippet>my_dir = os.path.dirname(sys.argv[0])
data_file_path = os.path.join(my_dir, data_filename)
</snippet></ROW><ROW><id>9482099</id><snippet>/some/path/script.py</snippet></ROW><ROW><id>9482099</id><snippet>data_filename</snippet></ROW><ROW><id>9482099</id><snippet>myfile</snippet></ROW><ROW><id>9482099</id><snippet>/some/path/myfile</snippet></ROW><ROW><id>9482149</id><snippet>from collections import OrderedDict
class TestCase(OrderedDict):
    def run(self, test_cases=None):
        if test_cases is None:
            test_cases = default_all_test_cases # add all your default test cases here
        for test_case in test_cases:
            test_case.run()
</snippet></ROW><ROW><id>9482149</id><snippet>None</snippet></ROW><ROW><id>9482429</id><snippet>service</snippet></ROW><ROW><id>9482429</id><snippet>Client</snippet></ROW><ROW><id>9482429</id><snippet>&gt;&gt;&gt; from suds.client import Client
&gt;&gt;&gt; c = Client('https://www.e-conomic.com/secure/api1/EconomicWebService.asmx?WSDL')
&gt;&gt;&gt; c.service.Account_Create(10, '20', 'ProfitAndLoss')
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 240, in __call__
    return target.call(*args, **kwargs)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 379, in call
    return method(*args, **kwargs)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 240, in __call__
    return target.call(*args, **kwargs)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 422, in call
    return client.invoke(args, kwargs)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 480, in invoke
    result = self.send(msg)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 511, in send
    result = self.failed(binding, e)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/client.py", line 562, in failed
    r, p = binding.get_fault(reply)
  File "/usr/lib/python2.7/site-packages/suds-0.3.6-py2.7.egg/suds/bindings/binding.py", line 226, in get_fault
    raise WebFault(p, faultroot)
WebFault: Server raised fault: 'Economic.Api.Exceptions.AuthenticationException(E02250): User is not authenticated. Access denied. {id=131496672}'
</snippet></ROW><ROW><id>9483120</id><snippet>optcomplete-test</snippet></ROW><ROW><id>9483120</id><snippet>optcomplete-simple</snippet></ROW><ROW><id>9483120</id><snippet>source /etc/bash_completion.d/optcomplete
complete -F _optcomplete optcomplete-simple
</snippet></ROW><ROW><id>9483120</id><snippet>$PATH</snippet></ROW><ROW><id>9483120</id><snippet>./optcomplete-simple</snippet></ROW><ROW><id>9483120</id><snippet>$PATH</snippet></ROW><ROW><id>9483120</id><snippet>export PATH=/new/directory:$PATH
</snippet></ROW><ROW><id>9483128</id><snippet>=</snippet></ROW><ROW><id>9483128</id><snippet>==</snippet></ROW><ROW><id>9483128</id><snippet>dictreader2 = list(dictreader2)</snippet></ROW><ROW><id>9483128</id><snippet>matchedlist.append((dictline1, dictline2))</snippet></ROW><ROW><id>9483128</id><snippet>else: continue</snippet></ROW><ROW><id>9483128</id><snippet>&gt;&gt;&gt; def test(dictreader1, dictreader2):
        dictreader2 = list(dictreader2)
        matchedlist = []
        for dictline1 in dictreader1:
            for dictline2 in dictreader2:
                if dictline1['member'] == dictline2['member']:
                    matchedlist.append((dictline1, dictline2))
        return matchedlist

&gt;&gt;&gt; dr1 = [{'member': 2, 'value':'abc'}, {'member':3, 'value':'def'}]
&gt;&gt;&gt; dr2 = [{'member': 4, 'tag':'t4'}, {'member':3, 'tag':'t3'}]
&gt;&gt;&gt; test(dr1, dr2)
[({'member': 3, 'value': 'def'}, {'member': 3, 'tag': 't3'})]
</snippet></ROW><ROW><id>9483128</id><snippet>&gt;&gt;&gt; def test(dictreader1, dictreader2):
        dictreader2 = list(dictreader2)
        matchedlist = []
        for dictline1 in dictreader1:
            for dictline2 in dictreader2:
                if dictline1['member'] == dictline2['member']:
                    entry = dictline1.copy()
                    entry.update(dictline2)
                    matchedlist.append(entry)
        return matchedlist

&gt;&gt;&gt; test(dr1, dr2)
[{'member': 3, 'tag': 't3', 'value': 'def'}]
</snippet></ROW><ROW><id>9483459</id><snippet>subprocess.call(['mv', 'at*', './output20'])
</snippet></ROW><ROW><id>9483459</id><snippet>$ mv at* ./output20
</snippet></ROW><ROW><id>9483459</id><snippet>at*</snippet></ROW><ROW><id>9483459</id><snippet>mv</snippet></ROW><ROW><id>9483459</id><snippet>['mv', 'at0_l0_l0', 'at0_l1_l-1', './output20']
</snippet></ROW><ROW><id>9483459</id><snippet>glob</snippet></ROW><ROW><id>9483459</id><snippet>os.rename</snippet></ROW><ROW><id>9483459</id><snippet>shell=True</snippet></ROW><ROW><id>9483459</id><snippet>exp_fit</snippet></ROW><ROW><id>9483553</id><snippet>print</snippet></ROW><ROW><id>9483553</id><snippet>for x in texts:
    for y in texts:
        print round(similarity(x,y),2),
    print
</snippet></ROW><ROW><id>9483931</id><snippet>&lt;a href="/{{line.get_absolute_url }}" &gt;</snippet></ROW><ROW><id>9483931</id><snippet>@pemarlink</snippet></ROW><ROW><id>9483931</id><snippet>get_absolute_url</snippet></ROW><ROW><id>9483964</id><snippet>numpy.unravel_index()</snippet></ROW><ROW><id>9483964</id><snippet>numpy.argmax()</snippet></ROW><ROW><id>9483964</id><snippet>&gt;&gt;&gt; a = numpy.random.random((10, 10))
&gt;&gt;&gt; numpy.unravel_index(a.argmax(), a.shape)
(6, 7)
&gt;&gt;&gt; a[6, 7] == a.max()
True
</snippet></ROW><ROW><id>9483992</id><snippet>if os.name == "posix":
    log = open("//".join([logdir,logfile]), 'w')                      
else :
    log = open("\\".join([logdir,logfile]), 'w')
...
    for filename in [f for f in filenames]:
        if os.name == "posix":
            log.write(str(dirpath)+ "//" + str(filename) + "\n")    
        else:
            log.write(str(dirpath)+ "\\" + str(filename) + "\n")    
</snippet></ROW><ROW><id>9483992</id><snippet>log=open(os.path.join(logdir, logfile), 'w')
...
    for filename in filenames:
        log.write(os.path.join(dirpath, filename)+'\n')
</snippet></ROW><ROW><id>9483992</id><snippet>logfilename=os.path.join(logdir, logfile)
log=open(logfilename, 'w')

...

print "Your logfile", logfilename, "has been created."
</snippet></ROW><ROW><id>9483992</id><snippet>with open(logfilename, 'w') as log:
    ...
</snippet></ROW><ROW><id>9484008</id><snippet>pass</snippet></ROW><ROW><id>9484008</id><snippet>continue</snippet></ROW><ROW><id>9484008</id><snippet>if</snippet></ROW><ROW><id>9484008</id><snippet>pass</snippet></ROW><ROW><id>9484008</id><snippet>continue</snippet></ROW><ROW><id>9484008</id><snippet>&gt;&gt;&gt; a = [0, 1, 2]
&gt;&gt;&gt; for element in a:
...     if not element:
...         pass
...     print element
... 
0
1
2
&gt;&gt;&gt; for element in a:
...     if not element:
...         continue
...     print element
... 
1
2
</snippet></ROW><ROW><id>9484198</id><snippet>dict</snippet></ROW><ROW><id>9484198</id><snippet>heads = {
  'ServerHostID': 'ServerHostID',
  'SERVER_NAME': 'Server Name',
   ...
}
</snippet></ROW><ROW><id>9484579</id><snippet>super</snippet></ROW><ROW><id>9484579</id><snippet>self</snippet></ROW><ROW><id>9484579</id><snippet>super</snippet></ROW><ROW><id>9484579</id><snippet>super(TaggedItem, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>9484778</id><snippet>setResponse</snippet></ROW><ROW><id>9484778</id><snippet>boost::python::object</snippet></ROW><ROW><id>9484778</id><snippet>bp::object</snippet></ROW><ROW><id>9484778</id><snippet>listener</snippet></ROW><ROW><id>9484778</id><snippet>setResponse</snippet></ROW><ROW><id>9484778</id><snippet>bp::object</snippet></ROW><ROW><id>9484786</id><snippet>lst</snippet></ROW><ROW><id>9484786</id><snippet>indexes_samples = sorted(random.sample(range(len(lst)), 30))

for i in indexes_samples:
    lst[i]  # do what you want
</snippet></ROW><ROW><id>9484786</id><snippet>idx = sorted(random.sample(range(len(lst)), 30))

j = 0
for i,num in enumerate(lst):
    if j &lt;= len(idx) and i == idx[j]:
        msg = 'line {} in sample'
        j += 1
    else:
        msg = 'line {} not in sample'

    print(msg.format(num))   # out.write() or whatever
</snippet></ROW><ROW><id>9485018</id><snippet>from django.db.models import Q

Track.objects.filter(Q(genre__genre='Rock') | Q(genre__parent__genre='Rock')).distinct()
</snippet></ROW><ROW><id>9485018</id><snippet>Track.objects.filter(Q(genre__genre__in=['Rock', 'Pop']) | Q(genre__parent__genre__in=['Rock', 'Pop'])).distinct()
</snippet></ROW><ROW><id>9485018</id><snippet>has_rock_genres = Q(genre__genre='Rock') | Q(genre__parent__genre='Rock')
has_pop_genres = Q(genre__genre='Pop') | Q(genre__parent__genre='Pop')

Track.objects.filter(has_rock_genres &amp; has_pop_genres).distinct()
</snippet></ROW><ROW><id>9485018</id><snippet>query = None
for genre in genres:
    if query is None:
        query = Q(genre__genre=genre) | Q(genre__parent__genre=genre)
    else:
        query = query &amp; (Q(genre__genre=genre) | Q(genre__parent__genre=genre))

    Track.objects.filter(query).distinct()
</snippet></ROW><ROW><id>9485204</id><snippet>csv.py</snippet></ROW><ROW><id>9485204</id><snippet>import</snippet></ROW><ROW><id>9485467</id><snippet>&gt;&gt;&gt; x = ["a", 1, "b", 2, "c", 3]
&gt;&gt;&gt; i = iter(x)
&gt;&gt;&gt; dict(zip(i, i))
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>9486008</id><snippet>strftime</snippet></ROW><ROW><id>9486008</id><snippet>&gt;&gt;&gt; s = "*** DATA REFRESH FOR STREETWORKS DATA EXECUTED ON "\
...     "%d/%b/%y AT %H:%M:%S ***\n\n"
&gt;&gt;&gt; datetime.datetime.now().strftime(s)
'*** DATA REFRESH FOR STREETWORKS DATA EXECUTED ON 28/Feb/12 AT 11:44:03 ***\n\n'
</snippet></ROW><ROW><id>9486008</id><snippet>&gt;&gt;&gt; s = "*** DATA REFRESH FOR STREETWORKS DATA EXECUTED ON "\
...     "{0:%d/%b/%y} AT {0:%H:%M:%S} ***\n\n"
&gt;&gt;&gt; s.format(datetime.datetime.now())
'*** DATA REFRESH FOR STREETWORKS DATA EXECUTED ON 28/Feb/12 AT 13:41:10 ***\n\n'
</snippet></ROW><ROW><id>9486008</id><snippet>format</snippet></ROW><ROW><id>9486008</id><snippet>__format__</snippet></ROW><ROW><id>9486008</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9486008</id><snippet>&gt;&gt;&gt; datetime.datetime.now().__format__('The current month is %B')
'The current month is February'
</snippet></ROW><ROW><id>9486008</id><snippet>&gt;&gt;&gt; (16).__format__('x')
'10'
</snippet></ROW><ROW><id>9486008</id><snippet>__format__</snippet></ROW><ROW><id>9486146</id><snippet>dict()</snippet></ROW><ROW><id>9486146</id><snippet>updated_dict = dict(old_dict, **extra_dict)
</snippet></ROW><ROW><id>9486388</id><snippet>curses</snippet></ROW><ROW><id>9486472</id><snippet>.copy()</snippet></ROW><ROW><id>9486472</id><snippet>last_vec =</snippet></ROW><ROW><id>9486472</id><snippet>last_vec</snippet></ROW><ROW><id>9486472</id><snippet>last_vec</snippet></ROW><ROW><id>9486619</id><snippet>{}</snippet></ROW><ROW><id>9486619</id><snippet>pprint.pprint</snippet></ROW><ROW><id>9486640</id><snippet>files = [f for f in files if not f.endswith(('.pdf', '.mpeg'))]
</snippet></ROW><ROW><id>9486816</id><snippet>intersection = list_of_sets[0]
for s in list_of_sets[1:]:
    intersection = list_of_sets[0].intersection(intersection, s)
</snippet></ROW><ROW><id>9486816</id><snippet>intersection = list_of_sets[0]
for s in list_of_sets[1:]:
    intersection = set.intersection(intersection, s)
</snippet></ROW><ROW><id>9486816</id><snippet>intersection = list_of_sets[0]
for s in list_of_sets[1:]:
    intersection.intersection_update(s)
</snippet></ROW><ROW><id>9486838</id><snippet>run_wsgi_app</snippet></ROW><ROW><id>9486838</id><snippet>app.yaml</snippet></ROW><ROW><id>9486866</id><snippet>           || mvt            | mvc            | mvc
==========================================================================
model      || sqlalchemy     | sqlalchemy     | sqlalchemy
view       || views/handlers | templates      | views/handlers + templates
controller ||                | views/handlers | dispatch/routing
template   || templates      |                |
</snippet></ROW><ROW><id>9487143</id><snippet>RE2</snippet></ROW><ROW><id>9487143</id><snippet>regex</snippet></ROW><ROW><id>9487210</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; html = lxml.html.fromstring("&lt;html&gt;&lt;body&gt;&lt;p&gt;/mytext,&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;")
&gt;&gt;&gt; lxml.html.tostring(html)
'&lt;html&gt;&lt;body&gt;&lt;p&gt;/mytext,&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>9487214</id><snippet>def isIntLessThanSeventeen(listlong):
    try:
        listlong = int(listlong) # throws exception if not an int
        if listlong &gt;= 17:
            raise ValueError
        return True
    except:
        return False

print isIntLessThanSeventeen(16) # True
print isIntLessThanSeventeen("abc") # False
</snippet></ROW><ROW><id>9487271</id><snippet>addMeeting</snippet></ROW><ROW><id>9487271</id><snippet>render_to_response</snippet></ROW><ROW><id>9487271</id><snippet>return render_to_response('MeetingHub/addmeeting.html', 
    {'meetingform': meetingform, 'message':message,
    'meeting': meeting, 'participants': participants,
    #... and anything else that might be helpful to show on the page
    },
    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9487424</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; for i in l:
...     l.remove(i)
... 
&gt;&gt;&gt; l
[1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>9487424</id><snippet>&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; for i in l:
...     if i in [2, 3, 5, 6, 8, 9]:
...         l.remove(i)
... 
&gt;&gt;&gt; l
[0, 1, 3, 4, 6, 7, 9]
&gt;&gt;&gt; [i for i in range(10) if not i in [2, 3, 5, 6, 8, 9]]
[0, 1, 4, 7]
</snippet></ROW><ROW><id>9487532</id><snippet>global</snippet></ROW><ROW><id>9487532</id><snippet>global</snippet></ROW><ROW><id>9487800</id><snippet>    conn = pyodbc.connect(driver = '{SQL Server Native Client 10.0}', server = '(local)',            database = 'Inventory', uid = 'sa', pwd = 'p@$$w0rd123',autocommit=True)  
</snippet></ROW><ROW><id>9488622</id><snippet>merge</snippet></ROW><ROW><id>9488622</id><snippet>find</snippet></ROW><ROW><id>9488622</id><snippet>def find(node):
    if node.parent != node:
        node.parent = find(node.parent)
    return node.parent
</snippet></ROW><ROW><id>9489139</id><snippet>os.dup2()</snippet></ROW><ROW><id>9489139</id><snippet>os.pipe()</snippet></ROW><ROW><id>9489139</id><snippet>select.select()</snippet></ROW><ROW><id>9489139</id><snippet>import os, sys, select

# the pipe would fail for some reason if I didn't write to stdout at some point
# so I write a space, then backspace (will show as empty in a normal terminal)
sys.stdout.write(' \b')
pipe_out, pipe_in = os.pipe()
# save a copy of stdout
stdout = os.dup(1)
# replace stdout with our write pipe
os.dup2(pipe_in, 1)

# check if we have more to read from the pipe
def more_data():
        r, _, _ = select.select([pipe_out], [], [], 0)
        return bool(r)

# read the whole pipe
def read_pipe():
        out = ''
        while more_data():
                out += os.read(pipe_out, 1024)

        return out

# testing print methods
import ctypes
libc = ctypes.CDLL('libc.so.6')

print 'This text gets captured by myStdOut'
libc.printf('This text fails to be captured by myStdOut\n')

# put stdout back in place 
os.dup2(stdout, 1)
print 'Contents of our stdout pipe:'
print read_pipe()
</snippet></ROW><ROW><id>9489242</id><snippet>group_id</snippet></ROW><ROW><id>9489242</id><snippet>import csv
from itertools import groupby

for key, rows in groupby(csv.reader(open("foo.csv")),
                         lambda row: row[0]):
    with open("%s.txt" % key, "w") as output:
        for row in rows:
            output.write(",".join(row) + "\n")
</snippet></ROW><ROW><id>9489307</id><snippet>redirect</snippet></ROW><ROW><id>9489307</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>9489307</id><snippet>reverse</snippet></ROW><ROW><id>9489307</id><snippet>reverse</snippet></ROW><ROW><id>9489338</id><snippet>initial</snippet></ROW><ROW><id>9489338</id><snippet>if self.instance:
    self.initial['my_text_field'] = self.instance.my_text_field
</snippet></ROW><ROW><id>9489382</id><snippet>name = "what"</snippet></ROW><ROW><id>9489382</id><snippet>web.input</snippet></ROW><ROW><id>9489382</id><snippet>name</snippet></ROW><ROW><id>9489382</id><snippet>"what"</snippet></ROW><ROW><id>9489382</id><snippet>render.index(greeting = greeting)</snippet></ROW><ROW><id>9489382</id><snippet>greeting</snippet></ROW><ROW><id>9489382</id><snippet>greeting</snippet></ROW><ROW><id>9489382</id><snippet>return</snippet></ROW><ROW><id>9489382</id><snippet>return render.index(greeting)</snippet></ROW><ROW><id>9489382</id><snippet>render.index(greeting = greeting)</snippet></ROW><ROW><id>9489382</id><snippet># Default Values
def multiprint(n=5, txt=""):
    i = 0
    while i &lt; n:
        print txt
        i++
</snippet></ROW><ROW><id>9489382</id><snippet>&gt;&gt;&gt; multiprint()






&gt;&gt;&gt; multiprint(1)


&gt;&gt;&gt; multiprint(1,"hi")
hi

&gt;&gt;&gt; multiprint(txt="hi")
hi
hi
hi
hi
hi
</snippet></ROW><ROW><id>9489382</id><snippet>n</snippet></ROW><ROW><id>9489382</id><snippet>txt</snippet></ROW><ROW><id>9489382</id><snippet>greeting = greeting</snippet></ROW><ROW><id>9489382</id><snippet>greeting</snippet></ROW><ROW><id>9489382</id><snippet>txt</snippet></ROW><ROW><id>9489382</id><snippet>greeting</snippet></ROW><ROW><id>9489382</id><snippet>render.index(greeting = myGreetingText)</snippet></ROW><ROW><id>9490406</id><snippet>def_block_parser()</snippet></ROW><ROW><id>9490406</id><snippet>from markdown import blockprocessors as bp
def build_block_parser(md_instance, **kwargs):
    """ Build the default block parser used by Markdown. """
    parser = bp.BlockParser(md_instance)
    parser.blockprocessors['empty'] = bp.EmptyBlockProcessor(parser)
    parser.blockprocessors['indent'] = bp.ListIndentProcessor(parser)
    # parser.blockprocessors['code'] = bp.CodeBlockProcessor(parser)
    parser.blockprocessors['hashheader'] = bp.HashHeaderProcessor(parser)
    parser.blockprocessors['setextheader'] = bp.SetextHeaderProcessor(parser)
    parser.blockprocessors['hr'] = bp.HRProcessor(parser)
    parser.blockprocessors['olist'] = bp.OListProcessor(parser)
    parser.blockprocessors['ulist'] = bp.UListProcessor(parser)
    parser.blockprocessors['quote'] = bp.BlockQuoteProcessor(parser)
    parser.blockprocessors['paragraph'] = bp.ParagraphProcessor(parser)
    return parser
bp.build_block_parser = build_block_parser
</snippet></ROW><ROW><id>9490406</id><snippet>build_block_processor()</snippet></ROW><ROW><id>9490406</id><snippet>blockprocessors.py</snippet></ROW><ROW><id>9490406</id><snippet>bp.</snippet></ROW><ROW><id>9490406</id><snippet>inlinepatterns.py</snippet></ROW><ROW><id>9490406</id><snippet>treeprocessor.py</snippet></ROW><ROW><id>9490406</id><snippet>preprocessor.py</snippet></ROW><ROW><id>9490406</id><snippet>postprocessor.py</snippet></ROW><ROW><id>9490406</id><snippet>from markdown import blockprocessors as bp
class NoProcessing(bp.BlockProcessor):
    def test(self, parent, block):
        return False   # never invoke this processor

bp.CodeBlockProcessor = NoProcessing
</snippet></ROW><ROW><id>9490406</id><snippet>python-markdown</snippet></ROW><ROW><id>9490518</id><snippet>CU!</snippet></ROW><ROW><id>9490518</id><snippet>import re
s = '(CU!DIVD:WEXP:DIVD-:DIVD+:RWEXP:RDIVD:RECL:RLOSS:MISCDI:WEXP-:INT:RGAIN:DIVOP:RRGAIN:DIVOP-:RDIVOP:RRECL:RBRECL:INT -:RRLOSS:INT +:RINT:RDIVD-:RECL-:RWXPOR:WEXPOR:MISCRE:WEXP+:RWEXP-:RBWEXP:RECL+:RRECL-:RBDIVD)'

prefix = '(' + re.search(r'\w+(!?[=&lt;&gt;]|!)', s).group(0)
maxlen = 64 - len(prefix)  # max line length of 65, prefix and ')' will be added
regex = re.compile(r'(.{1,%d})(?:$|:)' % maxlen)
lines = [prefix + line + ')' for line in regex.findall(s[len(prefix):-1])]

&gt;&gt;&gt; print '\n'.join(lines)
(CU!DIVD:WEXP:DIVD-:DIVD+:RWEXP:RDIVD:RECL:RLOSS:MISCDI:WEXP-)
(CU!INT:RGAIN:DIVOP:RRGAIN:DIVOP-:RDIVOP:RRECL:RBRECL:INT -)
(CU!RRLOSS:INT +:RINT:RDIVD-:RECL-:RWXPOR:WEXPOR:MISCRE:WEXP+)
(CU!RWEXP-:RBWEXP:RECL+:RRECL-:RBDIVD)
</snippet></ROW><ROW><id>9490518</id><snippet>re.search().group(0)</snippet></ROW><ROW><id>9490518</id><snippet>maxlen</snippet></ROW><ROW><id>9490518</id><snippet>64 - len(prefix)</snippet></ROW><ROW><id>9490518</id><snippet>(.{1,&lt;maxlen&gt;)</snippet></ROW><ROW><id>9490518</id><snippet>(?:$|:)</snippet></ROW><ROW><id>9490518</id><snippet>regex.findall()</snippet></ROW><ROW><id>9490518</id><snippet>&gt;&gt;&gt; pprint.pprint(regex.findall(s[len(prefix):-1]))
['DIVD:WEXP:DIVD-:DIVD+:RWEXP:RDIVD:RECL:RLOSS:MISCDI:WEXP-',
 'INT:RGAIN:DIVOP:RRGAIN:DIVOP-:RDIVOP:RRECL:RBRECL:INT -',
 'RRLOSS:INT +:RINT:RDIVD-:RECL-:RWXPOR:WEXPOR:MISCRE:WEXP+',
 'RWEXP-:RBWEXP:RECL+:RRECL-:RBDIVD']
</snippet></ROW><ROW><id>9490518</id><snippet>)</snippet></ROW><ROW><id>9490518</id><snippet>s</snippet></ROW><ROW><id>9490518</id><snippet>)</snippet></ROW><ROW><id>9490518</id><snippet>regex.findall()</snippet></ROW><ROW><id>9490734</id><snippet>import matplotlib.pyplot as plt</snippet></ROW><ROW><id>9490734</id><snippet>def handleCommandLine():
    p = argparse.ArgumentParser()
    p.add_argument('--backend', '-b', default=None, help='Specify plotting backend')
    args = p.parse_args()

    if args.backend != None:
        matplotlib.use(args.backend)  #Must occur before importing pyplot

    global plt  #Style choice: Can also be placed at the top of the function
    import matplotlib.pyplot as plt  #Must occur after setting backend
    return args
</snippet></ROW><ROW><id>9490734</id><snippet>def main():
    plt, args = handleCommandLine()   # CHANGED HERE
    fig, ax = plt.subplots(1)
    # ...    

def handleCommandLine():
    p = argparse.ArgumentParser()
    p.add_argument('--backend', '-b', default=None, help='Specify plotting backend')
    args = p.parse_args()

    if args.backend != None:
        matplotlib.use(args.backend)  #Must occur before importing pyplot

    import matplotlib.pyplot as plt   #Must occur after setting backend, if desired
    return plt, args   # CHANGED HERE
</snippet></ROW><ROW><id>9490756</id><snippet>array</snippet></ROW><ROW><id>9490756</id><snippet>values[j*width + i]</snippet></ROW><ROW><id>9490756</id><snippet>dict</snippet></ROW><ROW><id>9490804</id><snippet>bitarray</snippet></ROW><ROW><id>9490804</id><snippet>bitarray</snippet></ROW><ROW><id>9490804</id><snippet>bitarray</snippet></ROW><ROW><id>9490804</id><snippet>&gt;&gt;&gt; bitarray.bitarray([1, 1, 0, 1])
bitarray('1101')
&gt;&gt;&gt; bitarray.bitarray([True, True, False, True])
bitarray('1101')
&gt;&gt;&gt; bitarray.bitarray([range(3), [5.829048], [], ['can', 'I', 'help', 'you?']])
bitarray('1101')
</snippet></ROW><ROW><id>9490804</id><snippet>bitarray</snippet></ROW><ROW><id>9490804</id><snippet>bitarray</snippet></ROW><ROW><id>9490804</id><snippet>int(''.join(bs))</snippet></ROW><ROW><id>9490804</id><snippet>int(''.join(bs))</snippet></ROW><ROW><id>9490804</id><snippet>shift</snippet></ROW><ROW><id>9490804</id><snippet>a</snippet></ROW><ROW><id>9490804</id><snippet>a</snippet></ROW><ROW><id>9490804</id><snippet>len(a)</snippet></ROW><ROW><id>9490804</id><snippet>shift</snippet></ROW><ROW><id>9490804</id><snippet>''.join()</snippet></ROW><ROW><id>9490804</id><snippet>shift</snippet></ROW><ROW><id>9490804</id><snippet>''.join()</snippet></ROW><ROW><id>9490804</id><snippet>''.join()</snippet></ROW><ROW><id>9490804</id><snippet>'0b'</snippet></ROW><ROW><id>9490804</id><snippet>int(bitstring, 2)</snippet></ROW><ROW><id>9490804</id><snippet>2</snippet></ROW><ROW><id>9490804</id><snippet>'0b'</snippet></ROW><ROW><id>9490804</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; import random
&gt;&gt;&gt; import bitarray
&gt;&gt;&gt; 
&gt;&gt;&gt;        #### Definitions: ####
&gt;&gt;&gt; 
&gt;&gt;&gt; def a_mask_join(a):
.....     d = dict()
.....     for i in set(a):
.....         d[i] = int(''.join([str(int(i is b)) for b in a]), 2)
.....     return d
..... 
&gt;&gt;&gt; def mask(values, x):
.....     m = 0
.....     for v in values:
.....         m = (m &lt;&lt; 1) + (v == x)
.....     return m
..... 
&gt;&gt;&gt; def a_mask_shift(a):
.....     d = dict()
.....     for i in set(a):
.....         d[i] = mask(a, i)
.....     return d
..... 
&gt;&gt;&gt; def a_mask_bitarray1(a):
.....     d = dict()
.....     for i in set(a):
.....         d[i] = bitarray.bitarray([int(i is b) for b in a])
.....     return d
..... 
&gt;&gt;&gt; def a_mask_bitarray2(a):
.....     d = dict()
.....     for i in set(a):
.....         d[i] = int(bitarray.bitarray([int(i is b) for b in a]).to01(), 2)
.....     return d
..... 
&gt;&gt;&gt; a = array.array('B', [4,5,13,4,4,9,12,13])
&gt;&gt;&gt; 
&gt;&gt;&gt;        #### Test: ####
&gt;&gt;&gt; 
&gt;&gt;&gt; dicts = (f(a) for f in (a_mask_join, a_mask_shift1, a_mask_shift2, a_mask_bitarray2))
&gt;&gt;&gt; sorted_results = (sorted(int(v) for v in d.values()) for d in dicts)
&gt;&gt;&gt; all(r == sorted(a_mask1(a).values()) for r in sorted_results)
True
&gt;&gt;&gt; 
&gt;&gt;&gt;        #### Timing: ####
&gt;&gt;&gt; 
&gt;&gt;&gt; for size in (int(10 ** (e / 2.0)) for e in range(2, 11)):
.....     print size
.....     a = array.array('B', [random.randrange(0, 30) for _ in range(size)])
.....     %timeit a_mask_join(a)
.....     %timeit a_mask_shift(a)
.....     %timeit a_mask_bitarray1(a)
.....     %timeit a_mask_bitarray2(a)
..... 
10
10000 loops, best of 3: 61.2 us per loop
100000 loops, best of 3: 17.5 us per loop
10000 loops, best of 3: 38.4 us per loop
10000 loops, best of 3: 46.7 us per loop
31
1000 loops, best of 3: 343 us per loop
10000 loops, best of 3: 97.9 us per loop
1000 loops, best of 3: 212 us per loop
1000 loops, best of 3: 242 us per loop
100
1000 loops, best of 3: 1.45 ms per loop
1000 loops, best of 3: 486 us per loop
1000 loops, best of 3: 825 us per loop
1000 loops, best of 3: 870 us per loop
316
100 loops, best of 3: 4.53 ms per loop
100 loops, best of 3: 2.46 ms per loop
100 loops, best of 3: 2.53 ms per loop
100 loops, best of 3: 2.65 ms per loop
1000
100 loops, best of 3: 14.5 ms per loop
100 loops, best of 3: 10.8 ms per loop
100 loops, best of 3: 7.78 ms per loop
100 loops, best of 3: 8.04 ms per loop
3162
10 loops, best of 3: 47.4 ms per loop
10 loops, best of 3: 71.8 ms per loop
10 loops, best of 3: 24.1 ms per loop
10 loops, best of 3: 25.6 ms per loop
10000
10 loops, best of 3: 137 ms per loop
1 loops, best of 3: 425 ms per loop
10 loops, best of 3: 75.7 ms per loop
10 loops, best of 3: 78 ms per loop
31622
1 loops, best of 3: 430 ms per loop
1 loops, best of 3: 3.25 s per loop
1 loops, best of 3: 241 ms per loop
1 loops, best of 3: 246 ms per loop
100000
1 loops, best of 3: 1.37 s per loop
1 loops, best of 3: 29.7 s per loop
1 loops, best of 3: 805 ms per loop
1 loops, best of 3: 800 ms per loop
</snippet></ROW><ROW><id>9490988</id><snippet>del</snippet></ROW><ROW><id>9490988</id><snippet>someClass</snippet></ROW><ROW><id>9490988</id><snippet>someInstance = someClass()
</snippet></ROW><ROW><id>9490988</id><snippet>someClass</snippet></ROW><ROW><id>9490988</id><snippet>del</snippet></ROW><ROW><id>9490988</id><snippet>global</snippet></ROW><ROW><id>9490988</id><snippet>def someFunction():
    global someClass
    ...
    del someClass
</snippet></ROW><ROW><id>9491015</id><snippet>eval</snippet></ROW><ROW><id>9491015</id><snippet>sentence</snippet></ROW><ROW><id>9491015</id><snippet>hellosentence</snippet></ROW><ROW><id>9491015</id><snippet>eval</snippet></ROW><ROW><id>9491015</id><snippet>print eval(usrinput+'sentence')
</snippet></ROW><ROW><id>9491015</id><snippet>eval</snippet></ROW><ROW><id>9491015</id><snippet>selection = {'hello': hellosentence, 'question': questionsentence}
print selection[usrinput]
</snippet></ROW><ROW><id>9491110</id><snippet>exit</snippet></ROW><ROW><id>9491110</id><snippet>exit()</snippet></ROW><ROW><id>9491110</id><snippet>exit</snippet></ROW><ROW><id>9491110</id><snippet>exit = False
while not exit:
    option = raw_input("What would you like to do?")
    if option == "exit":
        exit = True
</snippet></ROW><ROW><id>9491110</id><snippet>while True:
    option = raw_input("What would you like to do?")
    if option == "exit":
        break
</snippet></ROW><ROW><id>9491110</id><snippet>True</snippet></ROW><ROW><id>9491110</id><snippet>False</snippet></ROW><ROW><id>9491110</id><snippet>1</snippet></ROW><ROW><id>9491110</id><snippet>0</snippet></ROW><ROW><id>9491110</id><snippet>"exit"</snippet></ROW><ROW><id>9491110</id><snippet>exit</snippet></ROW><ROW><id>9491110</id><snippet>class Doer: #Naturally, give it a real name based on it's purpose.
    def __init__(self):
        self.exit = False
        while not self.exit:
            option = raw_input("What would you like to do?")
            if option == "exit":
                self.exit()

    def exit(self):
        self.exit = True
</snippet></ROW><ROW><id>9491110</id><snippet>exit</snippet></ROW><ROW><id>9491110</id><snippet>self</snippet></ROW><ROW><id>9491177</id><snippet>str</snippet></ROW><ROW><id>9491177</id><snippet>str</snippet></ROW><ROW><id>9491177</id><snippet>struct</snippet></ROW><ROW><id>9491177</id><snippet>cpickle</snippet></ROW><ROW><id>9491177</id><snippet>str</snippet></ROW><ROW><id>9491514</id><snippet>QLineEdit</snippet></ROW><ROW><id>9491514</id><snippet>`QKeyEvent</snippet></ROW><ROW><id>9491514</id><snippet>QLineEdit</snippet></ROW><ROW><id>9491514</id><snippet>QTextEdit</snippet></ROW><ROW><id>9491514</id><snippet>virtual void keyPressEvent(QKeyEvent* e)</snippet></ROW><ROW><id>9491514</id><snippet>BaseClass::keyPressEvent(e);</snippet></ROW><ROW><id>9491575</id><snippet>cv.GetMat()</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array</snippet></ROW><ROW><id>9491575</id><snippet>3</snippet></ROW><ROW><id>9491575</id><snippet>non_black_coords_array</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array</snippet></ROW><ROW><id>9491575</id><snippet>x</snippet></ROW><ROW><id>9491575</id><snippet>y</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array[y][x]</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array &gt; 3</snippet></ROW><ROW><id>9491575</id><snippet>grey_image_as_array</snippet></ROW><ROW><id>9491575</id><snippet>numpy.where()</snippet></ROW><ROW><id>9491575</id><snippet>True</snippet></ROW><ROW><id>9491575</id><snippet>zip()</snippet></ROW><ROW><id>9491575</id><snippet>numpy.where()</snippet></ROW><ROW><id>9491647</id><snippet>subprocess.Popen(['X:\\apps\\Nuke6.1v5\\Nuke6.1.exe', '-t', 'X:\\apps\\Scripts\NUKE\\nukeExternalControl\\server.py'])</snippet></ROW><ROW><id>9491647</id><snippet>nuke -t &lt;script.py&gt;</snippet></ROW><ROW><id>9491647</id><snippet>To start a command sever whenever Nuke is launched, add the following lines
to your Nuke menu.py:
---------------------------
import nukeExternalControl.server
nukeExternalControl.server.nuke_command_server()
---------------------------
</snippet></ROW><ROW><id>9491647</id><snippet>X:\apps\Nuke6.1v5\Nuke6.1.exe -t X:\apps\Scripts\NUKE\nukeExternalControl\server.py</snippet></ROW><ROW><id>9491647</id><snippet>time.sleep(2)</snippet></ROW><ROW><id>9491647</id><snippet>server.py</snippet></ROW><ROW><id>9491779</id><snippet>allow_no_value</snippet></ROW><ROW><id>9491779</id><snippet>False</snippet></ROW><ROW><id>9491859</id><snippet>-e</snippet></ROW><ROW><id>9491859</id><snippet>python setup.py develop</snippet></ROW><ROW><id>9491859</id><snippet>&lt;PACKAGE_NAME_LOWERCASE&gt;</snippet></ROW><ROW><id>9491859</id><snippet>site-packages</snippet></ROW><ROW><id>9491859</id><snippet>setup.py</snippet></ROW><ROW><id>9491859</id><snippet>srcdir = join(dirname(__file__), 'src')
setup(...,
      package_dir      = {'': srcdir})
</snippet></ROW><ROW><id>9491859</id><snippet>src</snippet></ROW><ROW><id>9491859</id><snippet>spiffworkflow</snippet></ROW><ROW><id>9491859</id><snippet>-e</snippet></ROW><ROW><id>9491859</id><snippet>pip install git+git://github.com/knipknap/SpiffWorkflow.git@master#egg=SpiffWorkflow-dev
</snippet></ROW><ROW><id>9491981</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata

# with this way you can load your csv-file really easy -- maybe you should change
# the last 'dtype' to 'int', because you said you have int for the last column
data = np.genfromtxt('output.csv', dtype=[('x',float),('y',float),('z',float)],
                     comments='"', delimiter='|')

# just an assigning for better look in the plot routines
x = data['x']
y = data['y']
z = data['z']

# just an arbitrary number for grid point
ngrid = 500

# create an array with same difference between the entries
# you could use x.min()/x.max() for creating xi and y.min()/y.max() for yi
xi = np.linspace(-1,1,ngrid)
yi = np.linspace(-1,1,ngrid)

# create the grid data for the contour plot
zi = griddata(x,y,z,xi,yi)

# plot the contour and a scatter plot for checking if everything went right
plt.contour(xi,yi,zi,20,linewidths=1)
plt.scatter(x,y,c=z,s=20)
plt.xlim(-1,1)
plt.ylim(-1,1)
plt.show()
</snippet></ROW><ROW><id>9491981</id><snippet>griddata</snippet></ROW><ROW><id>9491981</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.mlab import griddata
import csv

data = np.genfromtxt('example.csv', dtype=[('x',float),('y',float),('z',float)],
                     comments='"', delimiter=',')

sample_pts = 500
con_levels = 20

x = data['x']
xmin = x.min()
xmax = x.max()

y = data['y']
ymin = y.min()
ymax = y.max()

z = data['z']

xi = np.linspace(xmin,xmax,sample_pts)
yi = np.linspace(ymin,ymax,sample_pts)

zi = griddata(x,y,z,xi,yi)

plt.contour(xi,yi,zi,con_levels,linewidths=1)
plt.scatter(x,y,c=z,s=20)
plt.xlim(xmin,xmax)
plt.ylim(ymin,ymax)
plt.show()
</snippet></ROW><ROW><id>9491981</id><snippet>|</snippet></ROW><ROW><id>9491981</id><snippet>,</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>item</snippet></ROW><ROW><id>9492233</id><snippet>item</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>def myfunc(item):
  if item == 2:
    item = 1
  return item
</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>myfunc</snippet></ROW><ROW><id>9492233</id><snippet>mylist = [1,2,3]
for idx, item in enumerate(mylist):
    mylist[idx] = myfunc(item)
</snippet></ROW><ROW><id>9492233</id><snippet>def inplace_map(items, func):
    for i, item in enumerate(items):
        items[i] = func(item)
</snippet></ROW><ROW><id>9492233</id><snippet>inplace_map</snippet></ROW><ROW><id>9492406</id><snippet>if abs(number1 - number2) &lt; 1e-8:
    # Do something
</snippet></ROW><ROW><id>9492413</id><snippet>class index:
    def POST(self):
        yield pPbuffer
        r.set('a','b')
</snippet></ROW><ROW><id>9492432</id><snippet>for d in data1:
    chart.plot(d[0],d[1])
</snippet></ROW><ROW><id>9492478</id><snippet>.vim/indent/python.vim</snippet></ROW><ROW><id>9492587</id><snippet>ImageField</snippet></ROW><ROW><id>9492587</id><snippet>FileField</snippet></ROW><ROW><id>9492587</id><snippet>request</snippet></ROW><ROW><id>9492656</id><snippet>list.index</snippet></ROW><ROW><id>9492656</id><snippet>l = ['foo', 'bar', 'baz']
i = l.index('bar')
# i is 1, because l[1] == 'bar'
</snippet></ROW><ROW><id>9492656</id><snippet># using i from above
if i == 0:
    # it's the first item
elif i == len(l) - 1:
    # it's the last item
else:
    # it's neither first nor last
</snippet></ROW><ROW><id>9492656</id><snippet>enumerate</snippet></ROW><ROW><id>9492656</id><snippet>for i, x in enumerate(mylist):
    if i == 0:
        # x is the first item
    elif i == len(mylist)-1:
        # x is the last item
    else:
        # x is in the middle
</snippet></ROW><ROW><id>9492845</id><snippet>xpath()</snippet></ROW><ROW><id>9492845</id><snippet>&gt;&gt;&gt; doc = html5lib.parse('&lt;!doctype html&gt;&lt;html&gt;&lt;x /&gt;&lt;/html&gt;', treebuilder='lxml')

&gt;&gt;&gt; doc.xpath('.//*')
    [&lt;Element {http://www.w3.org/1999/xhtml}head at 0x102c04a50&gt;,
 &lt;Element {http://www.w3.org/1999/xhtml}body at 0x102c04aa0&gt;,
 &lt;Element {http://www.w3.org/1999/xhtml}x at 0x102c04af0&gt;]

&gt;&gt;&gt; doc.xpath('.//html:x', namespaces={'html':'http://www.w3.org/1999/xhtml'})
    [&lt;Element {http://www.w3.org/1999/xhtml}x at 0x102c04af0&gt;]
</snippet></ROW><ROW><id>9492845</id><snippet>html5lib</snippet></ROW><ROW><id>9492994</id><snippet>random.shuffle</snippet></ROW><ROW><id>9492994</id><snippet>random.sample</snippet></ROW><ROW><id>9492994</id><snippet>from random import randrange

def shuffle(items):  # mutates input list
    i = len(items)
    while i &gt; 1:
        j = randrange(i)  # 0 &lt;= j &lt;= i
        items[j], items[i] = items[i], items[j]
        i = i - 1
    return
</snippet></ROW><ROW><id>9492994</id><snippet>from random import random

def shuffle(items):  # returns new list
    return [t[1] for t in
            sorted((random(), i) for i in items)]
</snippet></ROW><ROW><id>9492994</id><snippet>random.seed</snippet></ROW><ROW><id>9492994</id><snippet>random.seed</snippet></ROW><ROW><id>9492994</id><snippet>print</snippet></ROW><ROW><id>9492994</id><snippet>from random import seed, random

# should all be the same value, whatever that is.
seed(1)
print(random())
seed(1)
print(random())
seed(1)
print(random())

# should be two different values (and different from above)
print(random())
print(random())

# should be same as first three values
seed(1)
print(random())
</snippet></ROW><ROW><id>9493147</id><snippet>def main(url, out_folder="C:\asdf\"):
</snippet></ROW><ROW><id>9493147</id><snippet>def main(url, out_folder="C:\\asdf\\"):
</snippet></ROW><ROW><id>9493306</id><snippet>symbols</snippet></ROW><ROW><id>9493306</id><snippet>In [1]: symbols('a0:3')
Out[1]: (a₀, a₁, a₂)

In [2]: numEquations = 15

In [3]: symbols('a0:%d'%numEquations)
Out[3]: (a₀, a₁, a₂, a₃, a₄, a₅, a₆, a₇, a₈, a₉, a₁₀, a₁₁, a₁₂, a₁₃, a₁₄)
</snippet></ROW><ROW><id>9493583</id><snippet>cursor.execute()</snippet></ROW><ROW><id>9493583</id><snippet>dict</snippet></ROW><ROW><id>9493583</id><snippet>queries = { 0: "SELECT * FROM tab1 WHERE Name=?",
            1: "SELECT * FROM tab1 WHERE Age=?",
            2: "SELECT * FROM tab1 WHERE Date=?",
            3: "SELECT * FROM tab1 WHERE Condition=?" }
results = cur.execute ( queries[index], [namen] )
</snippet></ROW><ROW><id>9493583</id><snippet>match_by = {0: 'Name', 1: 'Age', 2: 'Date', 3: 'Condition'}
query = "SELECT * FROM tab1 WHERE %s=?" % match_by[index]
results = cur.execute(query,[namen])
</snippet></ROW><ROW><id>9493583</id><snippet>query = "SELECT * FROM tab1 WHERE %s=?" % {0: 'Name', 1: 'Age', 2: 'Date', 3: 'Condition'}[index]
results = cur.execute(query,[namen])
</snippet></ROW><ROW><id>9493583</id><snippet>results = cur.execute("SELECT * FROM tab1 WHERE %s=?" % {0: 'Name', 1: 'Age', 2: 'Date', 3: 'Condition'}[index] ,[namen])
</snippet></ROW><ROW><id>9493664</id><snippet>connect</snippet></ROW><ROW><id>9493664</id><snippet>sftp_connect</snippet></ROW><ROW><id>9493664</id><snippet>import ssh_module

class server():

    def host(self):
       ip='127.0.0.1'
       passwd='xyz'
       connection = ssh_module.ssh_connection('abc',passwd,22,ip)
       print "Connec:"
       connection.connect()
       print 'Connected'
       connection.close()
       self.set_directory(ip,passwd)

    def set_directory(self,ip,passwd):
      connection1 = ssh_module.ssh_connection('abc',passwd,22,ip)
      connection1.connect() # Connect before use.
      connection1.execute('x.txt')
      connection1.close()
main=server()
main.host()
</snippet></ROW><ROW><id>9493706</id><snippet>proxy = bus.get_object('org.mpris.MediaPlayer2.rhythmbox','/org/mpris/MediaPlayer2')
properties_manager = dbus.Interface(proxy, 'org.freedesktop.DBus.Properties')
properties_manager.Set('org.mpris.MediaPlayer2.Player', 'Volume', 100.0)
curr_volume = properties_manager.Get('org.mpris.MediaPlayer2.Player', 'Volume')
</snippet></ROW><ROW><id>9493764</id><snippet>dbNavigator = frmDua['TDBNavigator']
dbNavigator.SetFocus()
SendKeys.SendKeys("""{LEFT 10}""") #Move Cursor To Most LeftButton
SendKeys.SendKeys("""{RIGHT 4}""") #Move Cursor To InsertButton
SendKeys.SendKeys("""{SPACE}""")   #Perform Click On Insert Button
</snippet></ROW><ROW><id>9493840</id><snippet>    numericalBlockRegEx = r'chr\d+:(?P&lt;firstNumBlock&gt;\d+)-(?P&lt;secondNumBlock&gt;\d+)'
</snippet></ROW><ROW><id>9493840</id><snippet>    x = match.group('firstNumBlock') #Gets first number block matched
    y = match.group('secondNumBlock') #Gets second number block matched
</snippet></ROW><ROW><id>9493970</id><snippet>property</snippet></ROW><ROW><id>9493970</id><snippet>__get__</snippet></ROW><ROW><id>9493970</id><snippet>class MyProperty( property ): pass

class Test( object ):
    def __init__( self ):
        self._x = 10

    def get_x( self ):
        return self._x

    @MyProperty
    def x( self ):
        return self.get_x()

test = Test()
</snippet></ROW><ROW><id>9493970</id><snippet>__get__</snippet></ROW><ROW><id>9493970</id><snippet>test.x</snippet></ROW><ROW><id>9493970</id><snippet>MyProperty.__get__(Test.x, test, Test)</snippet></ROW><ROW><id>9493970</id><snippet>MyProperty.__get__ = lambda self,instance,owner: ""the x attribute"
</snippet></ROW><ROW><id>9493970</id><snippet>MyProperty.__get__ = lambda self,instance,owner: self.get(instance,owner)
</snippet></ROW><ROW><id>9493970</id><snippet>class MyProperty( property ):
    def __get__(self,instance,owner) :
        if not instance: return self
        else: return self.get(instance,owner)

class Test( object ):
    def __init__( self ):
        self._x = 10

    def get_x( self ):
        return self._x

    @MyProperty
    def x( self ): pass

    @MyProperty
    def y(self): pass

    x.get = lambda self,clazz: self.get_x()
    y.get = lambda self,clazz: "the y property of " + clazz.__name__ + " object"

&gt;&gt;&gt; test = Test()
&gt;&gt;&gt; test.x
10
&gt;&gt;&gt; test.y
'the y property of Test object'
</snippet></ROW><ROW><id>9493998</id><snippet>BoundField</snippet></ROW><ROW><id>9493998</id><snippet>cleaned_data</snippet></ROW><ROW><id>9493998</id><snippet>somekey_clean</snippet></ROW><ROW><id>9493998</id><snippet>clean</snippet></ROW><ROW><id>9493998</id><snippet>__init__</snippet></ROW><ROW><id>9493998</id><snippet>form.fields['somekey'].initial = value
</snippet></ROW><ROW><id>9493998</id><snippet>class MyForm(forms.Form):
# ...

    def clean(self):
        cleaned_data = super(MyForm, self).clean()

        # get "some info from the form"
        part1 = cleaned_data.get('part1_field', '')
        part2 = cleaned_data.get('part2_field', '')

        # "manipulate it to fill another filed"
        cleaned_data['another_field'] = part1 + part2

        return cleaned_data
</snippet></ROW><ROW><id>9494312</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9494312</id><snippet>.</snippet></ROW><ROW><id>9494312</id><snippet>doc</snippet></ROW><ROW><id>9494312</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>9494312</id><snippet>re.findall('^def(.*?)^end',doc,re.DOTALL|re.MULTILINE)
</snippet></ROW><ROW><id>9494360</id><snippet>'s</snippet></ROW><ROW><id>9494360</id><snippet>&gt;&gt;&gt; txt ="it's tail was big"
&gt;&gt;&gt; txt.replace("'s", '').split()
['it', 'tail', 'was', 'big']
</snippet></ROW><ROW><id>9494370</id><snippet>setSceneRect</snippet></ROW><ROW><id>9494370</id><snippet>scenRect</snippet></ROW><ROW><id>9494370</id><snippet>sceneRect</snippet></ROW><ROW><id>9494371</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import cv2


filename = "pills.png"
im = cv2.imread(filename)

h,w = im.shape[:2]

mask = np.zeros((h,w),dtype='uint8')
rect = (150,70,170,220)
tmp1 = np.zeros((1, 13 * 5))
tmp2 = np.zeros((1, 13 * 5))

cv2.grabCut(im,mask,rect,tmp1,tmp2,10,mode=cv2.GC_INIT_WITH_RECT)

plt.figure()
plt.imshow(mask)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>9494560</id><snippet>urllib2</snippet></ROW><ROW><id>9494560</id><snippet>HTTPBasicAuthHandler</snippet></ROW><ROW><id>9494560</id><snippet>csv</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>if x == True</snippet></ROW><ROW><id>9494887</id><snippet>if x == True</snippet></ROW><ROW><id>9494887</id><snippet>==</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>if condition</snippet></ROW><ROW><id>9494887</id><snippet>condition</snippet></ROW><ROW><id>9494887</id><snippet>if x == True</snippet></ROW><ROW><id>9494887</id><snippet>x == True</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>if x</snippet></ROW><ROW><id>9494887</id><snippet>x == False</snippet></ROW><ROW><id>9494887</id><snippet>not x</snippet></ROW><ROW><id>9494887</id><snippet>x == True</snippet></ROW><ROW><id>9494887</id><snippet>if</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>if x == True</snippet></ROW><ROW><id>9494887</id><snippet>== True</snippet></ROW><ROW><id>9494887</id><snippet>x is True</snippet></ROW><ROW><id>9494887</id><snippet>is</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>==</snippet></ROW><ROW><id>9494887</id><snippet>is</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>False</snippet></ROW><ROW><id>9494887</id><snippet>'foo' is 'foo'</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>&gt;&gt;&gt; stars1 = ''.join('*' for _ in xrange(100))
&gt;&gt;&gt; stars2 = '*' * 100
&gt;&gt;&gt; stars1 is stars2
False
&gt;&gt;&gt; stars1 == stars2
True
</snippet></ROW><ROW><id>9494887</id><snippet>&gt;&gt;&gt; True is 1
False
&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; True == 2
False
&gt;&gt;&gt; False is 0
False
&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; False == 0.0
True
</snippet></ROW><ROW><id>9494887</id><snippet>True = 1</snippet></ROW><ROW><id>9494887</id><snippet>False = 0</snippet></ROW><ROW><id>9494887</id><snippet>is</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>1</snippet></ROW><ROW><id>9494887</id><snippet>bool</snippet></ROW><ROW><id>9494887</id><snippet>int</snippet></ROW><ROW><id>9494887</id><snippet>bool</snippet></ROW><ROW><id>9494887</id><snippet>str</snippet></ROW><ROW><id>9494887</id><snippet>repr</snippet></ROW><ROW><id>9494887</id><snippet>bool</snippet></ROW><ROW><id>9494887</id><snippet>int</snippet></ROW><ROW><id>9494887</id><snippet>True == 1</snippet></ROW><ROW><id>9494887</id><snippet>x is True</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>&gt;&gt;&gt; a = 1L
&gt;&gt;&gt; b = 1L
&gt;&gt;&gt; c = 1
&gt;&gt;&gt; d = 1.0
&gt;&gt;&gt; a == True, b == True, c == True, d == True
(True, True, True, True)
&gt;&gt;&gt; a is b, a is c, a is d, c is d
(False, False, False, False)
</snippet></ROW><ROW><id>9494887</id><snippet>x == True</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>x == True and type(x) is bool</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>x is True</snippet></ROW><ROW><id>9494887</id><snippet>x</snippet></ROW><ROW><id>9494887</id><snippet>True</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>if x is None</snippet></ROW><ROW><id>9494887</id><snippet>if not x</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>if</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>if x is None</snippet></ROW><ROW><id>9494887</id><snippet>==</snippet></ROW><ROW><id>9494887</id><snippet>is</snippet></ROW><ROW><id>9494887</id><snippet>if x == None</snippet></ROW><ROW><id>9494887</id><snippet>if x is None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>is</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>get_attr</snippet></ROW><ROW><id>9494887</id><snippet>do_something_with(get_attr(file))</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>see_if_matching_file_exists</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>if x</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9494887</id><snippet>None</snippet></ROW><ROW><id>9495315</id><snippet>def create_dict_from_variables(first_name, second_name):
    return something_from(first_name, second_name)
</snippet></ROW><ROW><id>9495315</id><snippet>create_dict_from_variables('abcd', 'efgh')
</snippet></ROW><ROW><id>9495315</id><snippet>'abcd'</snippet></ROW><ROW><id>9495315</id><snippet>'efgh'</snippet></ROW><ROW><id>9495682</id><snippet>import hashlib
m = hashlib.sha256()
m.update(file_contents)
this_files_hash_value=m.digest()
</snippet></ROW><ROW><id>9495682</id><snippet>difflib.SequenceMatcher</snippet></ROW><ROW><id>9495992</id><snippet>Arr= [("Forename","Paul"),("Surname","Dinh")]
for Key,Value in Arr: 
    print Key,"=",Value

Forename = Paul
Surname = Dinh
</snippet></ROW><ROW><id>9495992</id><snippet>Dictionary=dict(Arr)
</snippet></ROW><ROW><id>9495992</id><snippet>keys = [k for k,v in Arr]
</snippet></ROW><ROW><id>9495992</id><snippet>for k in keys: print k,Dictionary[k]
</snippet></ROW><ROW><id>9495992</id><snippet>od=collections.OrderedDict(Arr)
for k in od: print k,od[k]
</snippet></ROW><ROW><id>9496190</id><snippet>username</snippet></ROW><ROW><id>9496190</id><snippet>password</snippet></ROW><ROW><id>9496190</id><snippet>def authenticate(self, username=None, email=None, password=None):
        """ Authenticate a user based on email address as the user name. """
        if username:
            might_be_email = username
        elif email:
            might_be_email = email
</snippet></ROW><ROW><id>9496190</id><snippet>might_be_email</snippet></ROW><ROW><id>9496367</id><snippet>403 Forbidden</snippet></ROW><ROW><id>9496367</id><snippet>/fb_subscriptions</snippet></ROW><ROW><id>9496549</id><snippet>&gt;&gt;&gt; {k: v for k,v in d.iteritems() if k.startswith('extra_')}
{u'extra_test1': [u'jknj'], u'extra_test2': [u'jnjl']}
</snippet></ROW><ROW><id>9496593</id><snippet>suds</snippet></ROW><ROW><id>9496593</id><snippet>{uri:external.query.name.availability.asic.gov.au}</snippet></ROW><ROW><id>9496593</id><snippet>{uri:business.document.header.types.asic.gov.au}</snippet></ROW><ROW><id>9496593</id><snippet>businessDocumentHeader</snippet></ROW><ROW><id>9496593</id><snippet>suds.plugin</snippet></ROW><ROW><id>9496593</id><snippet>from suds.plugin import MessagePlugin

class NsHeaderPlugin(MessagePlugin):
    def sending(self, context):
        context.envelope = context.envelope.replace('ns1:businessDocumentHeader',
                                                    'ns0:businessDocumentHeader')
</snippet></ROW><ROW><id>9496593</id><snippet>class NsHeaderPlugin(MessagePlugin):
    def marshalled(self, context):
        hdr = context.envelope.childAtPath('Body/request/businessDocumentHeader')
        hdr.setPrefix('hdr', 'uri:business.document.header.types.asic.gov.au')
</snippet></ROW><ROW><id>9496593</id><snippet>ns3:requestDataType</snippet></ROW><ROW><id>9496593</id><snippet>ns3:businessDocumentBody</snippet></ROW><ROW><id>9496593</id><snippet>from suds.client import Client # pip install suds

#XXX: change envelope namespace
from suds.bindings import binding
binding.envns = (binding.envns[0], 'http://www.w3.org/2003/05/soap-envelope')
del binding

# change content type
headers = {'Content-Type': 'application/soap+xml; charset="UTF-8"'}
client = Client(wsdl_url, headers=headers, plugins=[NsHeaderPlugin()])

header = client.factory.create('{uri:business.document.header.types.asic.gov.au}'
                               'businessDocumentHeaderType')
header.messageType = "queryNameAvailability"
header.messageReferenceNumber = 1
header.messageVersion = 2
header.senderId = 192
header.senderType = "REGA"

body = client.factory.create('{uri:external.query.name.availability.asic.gov.au}'
                             'requestDataType')
body.proposedName = 'TEST'
body.bnNameAvailabilityCheck = 'true' 

# make the call
result = client.service.externalQueryNameAvailability(header, body)
print result # for debugging, to find out what attributes are available
</snippet></ROW><ROW><id>9496593</id><snippet>ImportDoctor</snippet></ROW><ROW><id>9496593</id><snippet>xs:string</snippet></ROW><ROW><id>9496593</id><snippet>'http://schemas.xmlsoap.org/soap/encoding/'</snippet></ROW><ROW><id>9496593</id><snippet>from suds.xsd.doctor import Import, ImportDoctor

imp = Import('http://schemas.xmlsoap.org/soap/encoding/')
# add namespaces where the type is used (call `imp.filter.add` multiple times)
imp.filter.add("http://asic.gov.au/wsdl/name/availability/external") 
doctor = ImportDoctor(imp)

client = Client(wsdl_url, doctor=doctor)
</snippet></ROW><ROW><id>9496866</id><snippet>newImg1  = resizeImg(self.img1, (75, 112))
self.img1_thumb = newImg1
</snippet></ROW><ROW><id>9497129</id><snippet>keywdarg_methods[]</snippet></ROW><ROW><id>9497129</id><snippet>keywdarg_parrot</snippet></ROW><ROW><id>9497295</id><snippet>&gt;&gt;&gt; {str(k): str(v[0]) for k,v in t.iteritems() if k.startswith('extra_')}
{'extra_charged': '200.0', 'extra_test1': 'jknj', 'extra_test2': 'jnjl'}
</snippet></ROW><ROW><id>9497409</id><snippet>setup(console=['hello.py'])
</snippet></ROW><ROW><id>9497409</id><snippet>import sys

for arg in sys.argv:
    print arg
print "Hello World!"
</snippet></ROW><ROW><id>9497409</id><snippet>from distutils.core import setup
import py2exe

setup(console=['hello.py'])
</snippet></ROW><ROW><id>9497409</id><snippet>python setup.py py2exe
</snippet></ROW><ROW><id>9497409</id><snippet>hello.exe foo bar
</snippet></ROW><ROW><id>9497409</id><snippet>hello.exe
foo
bar
Hello World!
</snippet></ROW><ROW><id>9497450</id><snippet>## just examples for you ##

player_dict_info = {'x':0, 'y':0, 'ammo':0}
enemy_dict_info = {'x':0, 'y':0, 'ammo':0}
information_state = {'player': player_dict_info, 'enemy': enemy_dict_info}
</snippet></ROW><ROW><id>9497507</id><snippet>sum(map(sum, my_list))
</snippet></ROW><ROW><id>9497507</id><snippet>sum(sum(x) for x in my_list))
</snippet></ROW><ROW><id>9497507</id><snippet>map()</snippet></ROW><ROW><id>9497507</id><snippet>import numpy as np

my_list = np.array([[1,2,3,4], [2,4,5,6]])
np.sum(my_list)
</snippet></ROW><ROW><id>9497884</id><snippet>rd = {}
for rowx in xrange(1, sheet.nrows):
    cell = sheet.cell(rowx, 0)
    if cell.ctype != xlrd.XL_CELL_TEXT: continue
    cv = cell.value.strip()
    if not cv: continue
    if cv in rd:
        complain_about_duplicate_row_names()
    rd[cv] = sheet.row_values(rowx)
</snippet></ROW><ROW><id>9498836</id><snippet>dict</snippet></ROW><ROW><id>9498836</id><snippet>vocab = ["foo", "bar", "baz"]
s = "foo bar baz bar quux foo bla bla"

wordcount = dict((x,0) for x in vocab)
for w in re.findall(r"\w+", s):
    if w in wordcount:
        wordcount[w] += 1
</snippet></ROW><ROW><id>9498836</id><snippet>from collections import Counter

vocab = ["foo bar", "baz"]
r = re.compile("|".join(r"\b%s\b" % w for w in vocab))
wordcount = Counter(re.findall(r, s))
</snippet></ROW><ROW><id>9498836</id><snippet>r'\bfoo bar\b|\bbaz\b'</snippet></ROW><ROW><id>9498836</id><snippet>findall</snippet></ROW><ROW><id>9498836</id><snippet>['baz', 'foo bar']</snippet></ROW><ROW><id>9498836</id><snippet>Counter</snippet></ROW><ROW><id>9498836</id><snippet>()[]\</snippet></ROW><ROW><id>9499089</id><snippet>do_virtual_method</snippet></ROW><ROW><id>9499089</id><snippet>from gi.repository import Gtk
class Patch(Gtk.DrawingArea):
  def __init__(self):
    super(Patch,self).__init__()

  def do_get_preferred_width(self):
    print("test")
    return 100, 100

  def do_get_preferred_height(self):
    print("test")
    return 100, 100

win = Gtk.Window()
win.add(Patch())
win.connect('destroy', Gtk.main_quit)
win.show_all()
Gtk.main()
</snippet></ROW><ROW><id>9499349</id><snippet>from Products.ATVocabularyManager import NamedVocabulary

def get_car_types(self):        

        car_types = []        
        car_vocab = NamedVocabulary('my.package.car_models')
        car_terms = car_vocab.getDisplayList(self).items()

        for term in car_terms:
            car_types.append( (term[0], term[1]) )

        return car_types
</snippet></ROW><ROW><id>9499393</id><snippet>find()</snippet></ROW><ROW><id>9499393</id><snippet>for item in db1.index.find(): create_barrel(item)</snippet></ROW><ROW><id>9499393</id><snippet>create_barrel</snippet></ROW><ROW><id>9499393</id><snippet>db1.index.find().limit(100)
</snippet></ROW><ROW><id>9499462</id><snippet>for wclass in word_class_dict[most_ambigious_word]:
    for sent in brown_sents:
        if (most_ambigious_word.lower(), wclass) in ((word[0].lower(),word[1]) for word in sent) :
            print most_ambigious_word,"-",wclass
            print " ".join(tuple[0] for tuple in sent)
            break
</snippet></ROW><ROW><id>9499524</id><snippet>Location: &lt;url&gt;</snippet></ROW><ROW><id>9500200</id><snippet>import os.path

# import global settings
from settings import *

# this is barely just the name of the client dir, you might want to use that
SITE_NAME = __file__.split('/')[-2]
# this is the directory of the client website
CLIENT_ROOT = os.path.abspath(os.path.dirname(__file__))

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': SITE_NAME,
        'USER': SITE_NAME,
        'PASSWORD': 'some random password',
    }  
}

# you might want this too so that each client have his own MEDIA_ROOT
MEDIA_ROOT = os.path.join(CLIENT_ROOT, 'upload')
</snippet></ROW><ROW><id>9500200</id><snippet>./manage.py syncdb --settings=clients.demo.site_settings
</snippet></ROW><ROW><id>9500200</id><snippet>HAYSTACK_WHOOSH_PATH = os.path.join(CLIENT_ROOT, 'whoosh')
</snippet></ROW><ROW><id>9500200</id><snippet>ZTASKD_URL = 'ipc:///tmp/%s_ztask.sock' % SITE_NAME
</snippet></ROW><ROW><id>9500200</id><snippet>JOHNNY_MIDDLEWARE_KEY_PREFIX=SITE_NAME
</snippet></ROW><ROW><id>9500249</id><snippet>logging.getLogger([name])</snippet></ROW><ROW><id>9500523</id><snippet>re.match</snippet></ROW><ROW><id>9500523</id><snippet>re.search</snippet></ROW><ROW><id>9500562</id><snippet>class MType(type):
    instances = []    #list of instances of the metaclass

    def __init__(cls, name, bases, dct):
            MType.instances.append(cls)    #append to list of instances
            super(MType, cls).__init__(name, bases, dct)

class MClass(object):
    __metaclass__ = MType
</snippet></ROW><ROW><id>9500562</id><snippet>MType.instances</snippet></ROW><ROW><id>9500562</id><snippet>[&lt;class '__main__.MClass'&gt;]</snippet></ROW><ROW><id>9500562</id><snippet>isinstance</snippet></ROW><ROW><id>9500562</id><snippet>MType</snippet></ROW><ROW><id>9500783</id><snippet>source = 'C:\\Documents and Settings\\Some directory\\My file.txt'
</snippet></ROW><ROW><id>9500783</id><snippet>r</snippet></ROW><ROW><id>9500783</id><snippet>source = r'C:\Documents and Settings\Some directory\My file.txt'
</snippet></ROW><ROW><id>9500806</id><snippet>"""
Simulation of a train network
"""
from SimPy.Simulation import *
from math import sqrt
from random import randint
from itertools import cycle

def timeTo(A, maxV, d):
    """
    Given a trapezoidal velocity envelope defined by
    A       constant acceleration, m/s/s
    maxV    maximumum velocity, m/s
    return time in seconds required to travel
    d       distance, m
    """
    tA = float(maxV)/A          # time to accelerate to maxV
    dA = A*tA*tA                # distance traveled during acceleration from 0 to maxV and back to 0
    if (d &lt; dA):                # train never reaches full speed?
        return sqrt(4.0*d/A)        # time needed to accelerate to half-way point then decelerate to destination
    else:
        return 2*tA + (d-dA)/maxV   # time to accelerate to maxV plus travel at maxV plus decelerate to destination

class Train(Process):
    def __init__(self, name, sim, accel=1.0, maxV=50.0, passengers=0, maxPassengers=400):
        super(Train, self).__init__(name, sim)
        self.accel = accel
        self.maxV  = maxV
        self.p     = passengers
        self.maxP  = maxPassengers

    def roll(self, route):
        here = route.next()     # starting location
        for dest in route:
            # travel to next station
            print "{:.1f}s: {} leaving {} for {}".format(self.sim.now(), self.name, here, dest)
            yield hold, self, timeTo(self.accel, self.maxV, here.distanceTo[dest])
            # arrive at next station
            here = dest
            print "{:.1f}s: {} at {}".format(self.sim.now(), self.name, here)
            yield hold, self, here.arrive(self)

    def getOff(self, num):
        if self.p &gt;= num:
            print "  {} passengers got off".format(num)
            self.p -= num
        else:
            num = self.p
            print "  train is empty - only {} passengers got off".format(num)
            self.p = 0

    def getOn(self, num):
        if (self.maxP is None) or (self.p + num &lt;= self.maxP):
            print "  {} passengers got on".format(num)
            self.p += num
        else:
            num = self.maxp - self.p
            print "  train is full - only {} passengers got on".format(num)
            self.p = self.maxp

class TrackNode(object):
    def __init__(self, name, delay=5.0):
        self.name = name
        self.delay = delay
        self.distanceTo = {}
    def arrive(self, train):
        pass
    def __str__(self):
        return self.name

class Station(TrackNode):
    def arrive(self, train):
        train.getOff(randint(1,15))
        train.getOn(randint(1,15))
        return self.delay

class Switch(TrackNode):
    def arrive(self, train):
        print("  switching tracks")
        return self.delay

class SampleRailroad(Simulation):
    def run(self, maxTime=100.0):
        self.initialize()
        # create places
        x = Switch("switch x", 20.0)
        A = Station("Station A", 24.0)
        B = Station("Station B", 27.0)
        C = Station("Station C", 25.0)
        y = Switch("switch y", 18.0)
        # distances between places
        x.distanceTo[A] = 50.0
        A.distanceTo[B] = 5000.0
        B.distanceTo[C] = 2000.0
        C.distanceTo[y] = 80.0
        y.distanceTo[C] = 80.0
        C.distanceTo[B] = 2000.0
        B.distanceTo[A] = 5000.0
        A.distanceTo[x] = 50.0
        # set up first train
        sf = Train("Santa Fe 219", self)
        self.activate(sf, sf.roll(cycle([A,B,C,y,C,B,A,x])), at=0.0)
        # set up second train
        cn = Train("Canadian National 41", self, maxPassengers=200)
        self.activate(cn, cn.roll(cycle([C,B,A,x,A,B,C,y])), at=5.0)
        # start simulating!
        self.simulate(until=maxTime)

def main():
    rr = SampleRailroad()
    rr.run(800.0)

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>9500849</id><snippet>LANGUAGES = (
     ('zh-tw', gettext('Traditional Chinese')), # &lt;= add a comma here
)
</snippet></ROW><ROW><id>9500866</id><snippet>Alias /media/ "/usr/lib/python2.6/site-packages/django/contrib/admin/media"
</snippet></ROW><ROW><id>9500866</id><snippet>Alias /static/admin/ "/usr/lib/python2.6/site-packages/django/contrib/admin/media"
</snippet></ROW><ROW><id>9500866</id><snippet>ADMIN_MEDIA_PREFIX = '/static/admin/'
</snippet></ROW><ROW><id>9500973</id><snippet>country = self.request.headers.get('X-AppEngine-Country')
</snippet></ROW><ROW><id>9501094</id><snippet>sql = '''
    SELECT DISTINCT
        f.dm,
        f1.price AS first,
        f.maxp AS max,
        f.minp AS min, 
        f2.price AS last
    FROM (
        SELECT datetime, strftime("%Y-%m-%d %H:%M",datetime) dm,
               MIN(datetime) mindate, MAX(datetime) maxdate,
               MIN(price) minp, MAX(price) maxp
        FROM {c} 
        WHERE datetime &gt;= ? AND datetime &lt; ?
        GROUP BY dm
        ) f
    INNER JOIN {c} f1
    ON f1.datetime = f.mindate
    INNER JOIN {c} f2
    ON f2.datetime = f.maxdate
    '''.format(c = currency)
</snippet></ROW><ROW><id>9501094</id><snippet>dm</snippet></ROW><ROW><id>9501094</id><snippet>datetime</snippet></ROW><ROW><id>9501094</id><snippet>SELECT DISTINCT</snippet></ROW><ROW><id>9501437</id><snippet>needle_element &gt; array[mid]</snippet></ROW><ROW><id>9501437</id><snippet>array[mid:]</snippet></ROW><ROW><id>9501437</id><snippet>array[mid]</snippet></ROW><ROW><id>9501437</id><snippet>array[mid+1:]</snippet></ROW><ROW><id>9501493</id><snippet>cmd = 'python /opt/fake.py'
my_env = os.environ
my_env["PYTHONPATH"] = '/usr/lib/python2.7/'
proc = subprocess.Popen(cmd ,bufsize=0, executable=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=None, close_fds=True, shell=True, env=my_env)
out = str(proc.communicate(proc.stdout))
</snippet></ROW><ROW><id>9501688</id><snippet>numpy</snippet></ROW><ROW><id>9501688</id><snippet>sklearn</snippet></ROW><ROW><id>9501688</id><snippet>pylab</snippet></ROW><ROW><id>9501688</id><snippet>import numpy as np
from pylab import *
from sklearn import mixture

# Create some sample data
def G(mu, cov, pts):
    return np.random.multivariate_normal(mu,cov,500)

# Three multivariate Gaussians with means and cov listed below
MU  = [[5,3], [0,0], [-2,3]]
COV = [[[4,2],[0,1]], [[1,0],[0,1]], [[1,2],[2,1]]]

A = [G(mu,cov,500) for mu,cov in zip(MU,COV)]
PTS = np.concatenate(A) # Join them together

# Use a Gaussian Mixture model to fit
g = mixture.GMM(n_components=len(A))
g.fit(PTS)

# Returns an index list of which cluster they belong to
C = g.predict(PTS)

# Plot the original points
X,Y = map(array, zip(*PTS))
subplot(211)
scatter(X,Y)

# Plot the points and color according to the cluster
subplot(212)
color_mask = ['k','b','g']
for n in xrange(len(A)):
    idx = (C==n)
    scatter(X[idx],Y[idx],color=color_mask[n])
show()
</snippet></ROW><ROW><id>9502280</id><snippet>yield from</snippet></ROW><ROW><id>9502280</id><snippet>def gz():
    """this should defer to gx and gy to
       generate [1, 2, 3, 11, 12, 13]"""
    yield from gx()
    yield from gy()
</snippet></ROW><ROW><id>9502599</id><snippet>property</snippet></ROW><ROW><id>9502599</id><snippet>class Foo(object):
    @property
    def property(self):
        return "ham"

    @property
    def other_property(self):
        return "spam"
</snippet></ROW><ROW><id>9502599</id><snippet>property</snippet></ROW><ROW><id>9502599</id><snippet>property</snippet></ROW><ROW><id>9502865</id><snippet>numpy.histogram</snippet></ROW><ROW><id>9502865</id><snippet>plot</snippet></ROW><ROW><id>9502865</id><snippet>scatter</snippet></ROW><ROW><id>9502865</id><snippet>hist</snippet></ROW><ROW><id>9502865</id><snippet>hist</snippet></ROW><ROW><id>9502865</id><snippet>hist</snippet></ROW><ROW><id>9502865</id><snippet>histtype='step'</snippet></ROW><ROW><id>9502865</id><snippet>import numpy as np
import matplotlib.pyplot as plt

np.random.seed(101)
a = np.random.normal(size=1000)
b = np.random.normal(size=1000)
c = np.random.normal(size=1000)

common_params = dict(bins=20, 
                     range=(-5, 5), 
                     normed=True)

plt.subplots_adjust(hspace=.4)
plt.subplot(311)
plt.title('Default')
plt.hist(a, **common_params)
plt.hist(b, **common_params)
plt.hist(c, **common_params)
plt.subplot(312)
plt.title('Skinny shift - 3 at a time')
plt.hist((a, b, c), **common_params)
plt.subplot(313)
common_params['histtype'] = 'step'
plt.title('With steps')
plt.hist(a, **common_params)
plt.hist(b, **common_params)
plt.hist(c, **common_params)

plt.savefig('3hist.png')
plt.show()
</snippet></ROW><ROW><id>9502885</id><snippet>traveltime</snippet></ROW><ROW><id>9502897</id><snippet>import unittest
import time

class SomeTest(unittest.TestCase):
    def setUp(self):
        self.startTime = time.time()

    def tearDown(self):
        t = time.time() - self.startTime
        print "%s: %.3f" % (self.id(), t)

    def testOne(self):
        time.sleep(1)
        self.assertEquals(int('42'), 42)

    def testTwo(self):
        time.sleep(2)
        self.assertEquals(str(42), '42')

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(SomeTest)
    unittest.TextTestRunner(verbosity=0).run(suite)
</snippet></ROW><ROW><id>9502897</id><snippet>__main__.SomeTest.testOne: 1.001
__main__.SomeTest.testTwo: 2.002
----------------------------------------------------------------------
Ran 2 tests in 3.003s

OK
</snippet></ROW><ROW><id>9502960</id><snippet>DEBUG_TRACE_LEVEL = 3 
DEBUG_TRACE_BREAKPOINTS = 3
</snippet></ROW><ROW><id>9502960</id><snippet>import sys
print 'current trace function', sys.gettrace()
</snippet></ROW><ROW><id>9502960</id><snippet>&lt;bound method PyDB.trace_dispatch of &lt;__main__.PyDB instance at 0x01D44878&gt;&gt;</snippet></ROW><ROW><id>9502960</id><snippet>import sys

def trace_func(frame, event, arg):
    print 'Context: ', frame.f_code.co_name, '\tFile:', frame.f_code.co_filename, '\tLine:', frame.f_lineno, '\tEvent:', event
    return trace_func

sys.settrace(trace_func)
</snippet></ROW><ROW><id>9502960</id><snippet>import pydevd;pydevd.settrace()
</snippet></ROW><ROW><id>9502993</id><snippet>class DecisionProtocol(Protocol):
    def connectionMade(self):
        self.state = "undecided"

    def makeProgressTowardsDecision(self, bytes):
        # Do some stuff, eventually return ProtoA() or ProtoB()

    def dataReceived(self, bytes):
        if self.state == "undecided":
            proto, extra = self.makeProgressTowardsDecision(bytes)
            if proto is not None:
                self.decidedOnProtocol = proto
                self.decidedOnProtocol.makeConnection(self.transport)
                if extra:
                    self.decidedOnProtocol.dataReceived(extra)
                self.state = "decided"
        else:
            self.decidedOnProtocol.dataReceived(bytes)

    def connectionLost(self, reason):
        if self.state == "decided":
            self.decidedOnProtocol.connectionLost(reason)
</snippet></ROW><ROW><id>9503111</id><snippet>url('notification/', include('notification.urls')),
</snippet></ROW><ROW><id>9503313</id><snippet>pip</snippet></ROW><ROW><id>9503313</id><snippet>.exe</snippet></ROW><ROW><id>9503313</id><snippet>.exe</snippet></ROW><ROW><id>9504174</id><snippet>[0]</snippet></ROW><ROW><id>9504174</id><snippet>counter</snippet></ROW><ROW><id>9504174</id><snippet>0</snippet></ROW><ROW><id>9504174</id><snippet>foo.func_defaults[0][0]=0</snippet></ROW><ROW><id>9504174</id><snippet>class Foo(object):
  def __init__(self):
     self.counter = 0 
  def __call__(self):
    self.counter += 1 
    print("Counter is %i." % self.counter)
</snippet></ROW><ROW><id>9504174</id><snippet>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo()
Counter is 1.
&gt;&gt;&gt; foo()
Counter is 2.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9504226</id><snippet>if</snippet></ROW><ROW><id>9504226</id><snippet>elif</snippet></ROW><ROW><id>9504226</id><snippet>&gt;&gt;&gt; for i in range(5):
...  if i%2==0:
...   x = i
...   print(x)
...  else:
...   print(x)
... 
0
0
2
2
4
</snippet></ROW><ROW><id>9504226</id><snippet>name=</snippet></ROW><ROW><id>9504226</id><snippet>if</snippet></ROW><ROW><id>9504226</id><snippet>elif</snippet></ROW><ROW><id>9504226</id><snippet> This is a header
 blah blah blah
 **************
 16 624 24 57 32
 352 73 47 76 3
 25 6 78 80 21 331
 **************
 234 234 4 64 7
 **************
 **************
 86 57 2 5 14
 4 8 3 634 7
</snippet></ROW><ROW><id>9504226</id><snippet>def isSeparatorLine(line):
    return line[0] = '*'
def isValidLine(line):
    return len(line.split())==5

groupNum = 0
outputFile = None
with open('original file.txt') as original:
    for line in original:
        if isSeparatorLine(line):
            groupNum += 1
            outputFilename = 'original file_{}.txt'.format(groupNum)
            if outputFile:
                outputFile.close()
            outputFile = open(outputFilename, 'w')
            outputFile.write('New file with group {}'.format(groupNum))
        elif group&gt;0 and isValidLine(line):
            outputFile.write(line)
</snippet></ROW><ROW><id>9504226</id><snippet>from itertools import *

FILENAME = 'original file.txt'
FILENAME_TEMPLATE = 'stanza-{}.txt'

def isSeparatorLine(line):
    return all(c=='*' for c in line)
def isValidLine(line):
    return len(line.split())==5
def extractStanzas(text):
    """
        Yields: [stanza0:line0,line1,...], [stanza1:lineN,lineN+1,...], [stanza2:...]
        where each stanza is separated by a separator line, as defined above
    """
    for isSeparator,stanza in groupby(text.splitlines(), isSeparatorLine):
        if not isSeparator:
            yield stanza

with open(FILENAME) as f:
    stanzas = list(extractStanzas(f.read()))

for i,stanza in enumerate(stanzas[1:]):
    assert all(isValidLine(line) for line in stanza), 'invalid line somewhere: {}'.format(stanza)
    with open(FILENAME_TEMPLATE.format(i), 'w') as output:
        output.write('\n'.join(stanza))
</snippet></ROW><ROW><id>9504358</id><snippet>True</snippet></ROW><ROW><id>9504358</id><snippet>False</snippet></ROW><ROW><id>9504358</id><snippet>None</snippet></ROW><ROW><id>9504358</id><snippet>__nonzero__()</snippet></ROW><ROW><id>9504358</id><snippet>__bool__()</snippet></ROW><ROW><id>9504358</id><snippet>in</snippet></ROW><ROW><id>9504358</id><snippet>==</snippet></ROW><ROW><id>9504358</id><snippet>!=</snippet></ROW><ROW><id>9504358</id><snippet>True</snippet></ROW><ROW><id>9504358</id><snippet>False</snippet></ROW><ROW><id>9504358</id><snippet>None</snippet></ROW><ROW><id>9504358</id><snippet>class Tristate(object):
    def __init__(self, value=None):
       if any(value is v for v in (True, False, None)):
          self.value = value
       else:
           raise ValueError("Tristate value must be True, False, or None")

    def __eq__(self, other):
       return self.value is other
    def __ne__(self, other):
       return self.value is not other
    def __nonzero__(self):   # Python 3: __bool__()
       raise TypeError("Tristate value may not be used as implicit Boolean")

    def __str__(self):
        return str(self.value)
    def __repr__(self):
        return "Tristate(%s)" % self.value
</snippet></ROW><ROW><id>9504358</id><snippet>t = Tristate(True)
t == True           # True
t != False          # True
t in (True, False)  # True
bool(t)             # Exception!
if t: print "woo"   # Exception!
</snippet></ROW><ROW><id>9504358</id><snippet>Tristate</snippet></ROW><ROW><id>9504358</id><snippet>foo == True or bar != None</snippet></ROW><ROW><id>9504358</id><snippet>foo in (False, None)</snippet></ROW><ROW><id>9504358</id><snippet>in</snippet></ROW><ROW><id>9504358</id><snippet>!=</snippet></ROW><ROW><id>9504358</id><snippet>not</snippet></ROW><ROW><id>9504358</id><snippet>and</snippet></ROW><ROW><id>9504358</id><snippet>or</snippet></ROW><ROW><id>9504358</id><snippet>id()</snippet></ROW><ROW><id>9504358</id><snippet>Tristate(None) is None</snippet></ROW><ROW><id>9504358</id><snippet>False</snippet></ROW><ROW><id>9504358</id><snippet>is</snippet></ROW><ROW><id>9504410</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>9504410</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('2012-02-10' , '%Y-%m-%d')
datetime.datetime(2012, 2, 10, 0, 0)
&gt;&gt;&gt; _.isoweekday()
5
</snippet></ROW><ROW><id>9504410</id><snippet>strptime</snippet></ROW><ROW><id>9504410</id><snippet>.isweekday() == 6</snippet></ROW><ROW><id>9504410</id><snippet>timedelta()</snippet></ROW><ROW><id>9504410</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date = datetime.datetime.strptime('2012-02-11' , '%Y-%m-%d')
&gt;&gt;&gt; if date.isoweekday() == 6:
...     date += datetime.timedelta(days=2)
... 
&gt;&gt;&gt; date
datetime.datetime(2012, 2, 13, 0, 0)
&gt;&gt;&gt; date.strftime('%Y-%m-%d')   # if you want a string again
'2012-02-13'
</snippet></ROW><ROW><id>9504461</id><snippet># This is not a full working example, just a starting point
# for downloading images in different formats.

import subprocess
import Image

def image_as_png_pdf(request):
  output_format = request.GET.get('format')
  im = Image.open(path_to_image) # any Image object should work
  if output_format == 'png':
    response = HttpResponse(mimetype='image/png')
    response['Content-Disposition'] = 'attachment; filename=%s.png' % filename
    im.save(response, 'png') # will call response.write()
  else:
    # Temporary disk space, server process needs write access
    tmp_path = '/tmp/'
    # Full path to ImageMagick convert binary
    convert_bin = '/usr/bin/convert' 
    im.save(tmp_path+filename+'.png', 'png')
    response = HttpResponse(mimetype='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=%s.pdf' % filename
    ret = subprocess.Popen([ convert_bin, 
                            "%s%s.png"%(tmp_path,filename), "pdf:-" ],
                            stdout=subprocess.PIPE)
    response.write(ret.stdout.read())
  return response
</snippet></ROW><ROW><id>9504474</id><snippet>//a[@id='infgHeader']/@text
</snippet></ROW><ROW><id>9504474</id><snippet>$echo '&lt;div id="test" text="foo"&gt;Hello&lt;/div&gt;' | xpath '//div[@id="test"]/@text' 
Found 1 nodes:
-- NODE --
 text="foo"
</snippet></ROW><ROW><id>9504603</id><snippet>reportProcess</snippet></ROW><ROW><id>9504603</id><snippet>lastTime = time.time()
while True:
    data = f.read(1024)
    if not data:
      break
    self.readBytes += len(data)
    if time.time() - lastTime &gt; 5:
        self.reportProcess()
        lastTime = time.time()
</snippet></ROW><ROW><id>9504603</id><snippet>class FileScanner:
  def __init__(self):
      self.readBytes = 0
      self.lastReadBytes = 0
</snippet></ROW><ROW><id>9504613</id><snippet>dirs</snippet></ROW><ROW><id>9504613</id><snippet>for</snippet></ROW><ROW><id>9504613</id><snippet>dirs</snippet></ROW><ROW><id>9504613</id><snippet>if os.path.isdir(top):
    for root, dirs, files in os.walk(top, topdown = True):
        dirs_to_ignore = []
        for dirname in dirs:
            print 'Dirname = ', os.path.join(root, dirname)
            if dirname.startswith('.'):
                dirs_to_ignore.append(dirname)
        for dirname in dirs_to_ignore:
            dirs.remove(dirname)
</snippet></ROW><ROW><id>9504674</id><snippet>== True</snippet></ROW><ROW><id>9504674</id><snippet>== False</snippet></ROW><ROW><id>9504674</id><snippet>if not (var1 or var2 or var3 or var4):
</snippet></ROW><ROW><id>9504674</id><snippet>any</snippet></ROW><ROW><id>9504674</id><snippet>all</snippet></ROW><ROW><id>9504674</id><snippet>if not any((var1, var2, var3, var4)):
</snippet></ROW><ROW><id>9504674</id><snippet>if var1 == var2 == var3 == var4 == False:
</snippet></ROW><ROW><id>9504716</id><snippet>klass = type('Form', (forms.Form,), fields)
form = klass()
return form
</snippet></ROW><ROW><id>9505451</id><snippet>obj.foo(arg)</snippet></ROW><ROW><id>9505451</id><snippet>ObjClass.foo(obj, arg)</snippet></ROW><ROW><id>9505451</id><snippet>class MyClass(object):
    def foo(self, arg):
        ...

obj = MyClass()
print obj.foo(3) == MyClass.foo(obj, 3) # True
</snippet></ROW><ROW><id>9505464</id><snippet>from django.forms import form_for_model
</snippet></ROW><ROW><id>9505464</id><snippet>form_for_model</snippet></ROW><ROW><id>9505464</id><snippet>forms</snippet></ROW><ROW><id>9505464</id><snippet>import django.forms
</snippet></ROW><ROW><id>9505464</id><snippet>django.forms</snippet></ROW><ROW><id>9505464</id><snippet>forms</snippet></ROW><ROW><id>9505472</id><snippet>class HumanizeTests(TestCase):

    def humanize_tester(self, test_list, result_list, method):
        # Using max below ensures we go through both lists
        # However, if the lists are not equal length, this raises an exception
        for test_content, result in zip(test_list, result_list):
            t = Template('{%% load humanize %%}{{ test_content|%s }}' % method)
            rendered = t.render(Context(locals())).strip()
            self.assertEqual(rendered, escape(result),
                         msg="%s test failed, produced '%s', should've produced '%s'" %     (method, rendered, result))
</snippet></ROW><ROW><id>9505510</id><snippet>cimport libc.stdlib     as stdlib

cdef extern from "Python.h":
    char* PyString_AsString(object)

cdef extern from "yourPOSTagger.c":

    # note the syntax, to Cython the POSTagger class will be available
    # as cPOSTagger using this construct
    cppclass cPOSTagger "POSTagger":
        # we only need the POSTagger type to be available to cython
        # but no attributes, so we leave to ``pass``
        pass

    cPOSTagger* initTagger(char*, bint, double, bint, int)
    void        getTags(cPOSTagger*, char**, int, char**)
    void        destroyTagger(cPOSTagger*)

cdef class POSTagger:
    """ Wraps the POSTagger.h ``POSTagger`` class. """

    cdef cPOSTagger*    tagger

    def __init__(self, char* fileName, bint Normalize, double BeamTreshold,
                       bint SentStartHeuristic, int MaxBeamSize):
        self.tagger = initTagger( fileName, Normalize, BeamTreshold,
                                  SentStartHeuristic, MaxBeamSize )
        if self.tagger == NULL:
            raise MemoryError()

    def __del__(self):
        destroyTagger(self.tagger)

    def getTags(self, tuple words, int sentLen):
        if not words:
            raise ValueError("'words' can not be None.")

        cdef char** _words = &lt;char**&gt; stdlib.malloc(sizeof(char*) * len(words))
        cdef int    i      = 0
        for item in words:
            if not isinstance(item, basestring):
                stdlib.free(_words)
                raise TypeError( "Element in tuple 'words' must be of type "
                                 "``basestring``." )
            _words[i] = PyString_AsString(item)
            i += 1

        cdef int nTags   = len(words)   # Really? Dunno..
        cdef char** tags = &lt;char**&gt; stdlib.malloc(sizeof(char*) * len(words))

        getTags(self.tagger, _words, sentLen, tags)

        cdef list reval = []
        cdef str  temp
        for 0 &lt;= i &lt; nTags:
            temp = tags[i]
            reval.append(temp)
            stdlib.free(tags[i])

        stdlib.free(tags)

        return reval
</snippet></ROW><ROW><id>9505510</id><snippet>--cplus</snippet></ROW><ROW><id>9505566</id><snippet>itertools.groupby</snippet></ROW><ROW><id>9505566</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; s = 'aaabbccccabbb'
&gt;&gt;&gt; [''.join(y) for _,y in groupby(s)]
['aaa', 'bb', 'cccc', 'a', 'bbb']
</snippet></ROW><ROW><id>9505868</id><snippet>"Hi, how are you?" → "Hubi, hubow ubare yubou?"
</snippet></ROW><ROW><id>9505868</id><snippet>e</snippet></ROW><ROW><id>9505868</id><snippet>are</snippet></ROW><ROW><id>9505868</id><snippet>nltk.corpus.cmudict</snippet></ROW><ROW><id>9505879</id><snippet>urlpatterns = patterns('',
    (r'^$', 'views.home'),     # ^$ means, beginning of string followed by end of string, in other words match on exactly empty string and nothing else
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>9505879</id><snippet>views.py</snippet></ROW><ROW><id>9505879</id><snippet>from django.http import HttpResponse

def home(request):
    return HttpResponse('Hello World')
</snippet></ROW><ROW><id>9506077</id><snippet>&gt;&gt;&gt; b = u'Like pie?\tI love it\tomnomnom'.encode('utf-16le')
&gt;&gt;&gt; s = ('\n' + b + '\0').decode('utf-16le')
&gt;&gt;&gt; print s
䰊椀欀攀 瀀椀攀㼀ऀ䤀 氀漀瘀攀 椀琀ऀ漀洀渀漀洀渀漀洀
</snippet></ROW><ROW><id>9506080</id><snippet>self</snippet></ROW><ROW><id>9506080</id><snippet>self</snippet></ROW><ROW><id>9506080</id><snippet>self</snippet></ROW><ROW><id>9506080</id><snippet>this</snippet></ROW><ROW><id>9506138</id><snippet>import json

f = open('my.json')  
data = json.load(f)
f.close()

for key in data.keys():
    print data[key]["description"]
</snippet></ROW><ROW><id>9506185</id><snippet>L=[]
L.append(L1 + L2[0])
L.append(L1 + L2[1])
...
</snippet></ROW><ROW><id>9506185</id><snippet>L = [ L1+item for item in L2 ]
</snippet></ROW><ROW><id>9506185</id><snippet>L1 = [list1, list2, ..., listk]</snippet></ROW><ROW><id>9506185</id><snippet>In [43]: L1 = [[1,2],[2,3]]
</snippet></ROW><ROW><id>9506185</id><snippet>list1 + list2 + ... + listk</snippet></ROW><ROW><id>9506185</id><snippet>sum(L1, [])</snippet></ROW><ROW><id>9506185</id><snippet>In [44]: sum(L1,[])
Out[44]: [1, 2, 2, 3]

In [45]: [1,2]+[2,3]
Out[45]: [1, 2, 2, 3]
</snippet></ROW><ROW><id>9506185</id><snippet>L1_sum = sum(L1, [])
L = [ L1_sum+item for item in L2 ]
</snippet></ROW><ROW><id>9506185</id><snippet>L = [ sum(L1, [])+item for item in L2 ]</snippet></ROW><ROW><id>9506185</id><snippet>sum(L1, [])</snippet></ROW><ROW><id>9506185</id><snippet>L2</snippet></ROW><ROW><id>9506208</id><snippet>PersistentMapping</snippet></ROW><ROW><id>9506208</id><snippet>dict</snippet></ROW><ROW><id>9506208</id><snippet>UserDict</snippet></ROW><ROW><id>9506208</id><snippet>_p_changed</snippet></ROW><ROW><id>9506208</id><snippet>Persistent</snippet></ROW><ROW><id>9506208</id><snippet>mapping</snippet></ROW><ROW><id>9506208</id><snippet>Folder</snippet></ROW><ROW><id>9506208</id><snippet>Folder</snippet></ROW><ROW><id>9506208</id><snippet>PersistentMapping</snippet></ROW><ROW><id>9506208</id><snippet>dict</snippet></ROW><ROW><id>9506208</id><snippet>__dict__</snippet></ROW><ROW><id>9506208</id><snippet>OOBTree</snippet></ROW><ROW><id>9506208</id><snippet>Folder</snippet></ROW><ROW><id>9506208</id><snippet>BTree</snippet></ROW><ROW><id>9506208</id><snippet>Folder</snippet></ROW><ROW><id>9506208</id><snippet>OOBTree</snippet></ROW><ROW><id>9506255</id><snippet>parser.error</snippet></ROW><ROW><id>9506255</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--action', choices=['upload', 'dump'], default='dump')
parser.add_argument('--dump-format')
args = parser.parse_args()
if args.action != 'dump' and args.dump_format:
    parser.error('--dump-format can only be set when --action=dump.')
</snippet></ROW><ROW><id>9506329</id><snippet>/srv/http/share/</snippet></ROW><ROW><id>9506329</id><snippet>/usr/local/share/</snippet></ROW><ROW><id>9506481</id><snippet>shell = True</snippet></ROW><ROW><id>9506481</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9506481</id><snippet>p = subprocess.Popen('gphoto2', shell=True, ...)
</snippet></ROW><ROW><id>9506481</id><snippet>shell = True</snippet></ROW><ROW><id>9506481</id><snippet>p = subprocess.Popen(['gphoto2'], ...)
</snippet></ROW><ROW><id>9506481</id><snippet>shell = False</snippet></ROW><ROW><id>9506481</id><snippet>shell</snippet></ROW><ROW><id>9506512</id><snippet>super()</snippet></ROW><ROW><id>9506512</id><snippet>class A(object):
    @property
    def prop(self):
        return 'A.prop'

class B(A):
    @property
    def prop(self):
        return '%s - %s' % (super(B, self).prop, 'B.prop')

&gt;&gt;&gt; b = B()
&gt;&gt;&gt; b.prop
'A.prop - B.prop'
</snippet></ROW><ROW><id>9506715</id><snippet>this 
is 
a 
bunch 
of 
lines
</snippet></ROW><ROW><id>9506715</id><snippet>this 
is 
a 
different
bunch 
of 
other
lines
</snippet></ROW><ROW><id>9506715</id><snippet>import difflib

fileA = open("a.txt", "rt").readlines()
fileB = open("b.txt", "rt").readlines()

d = difflib.Differ()
diffs = d.compare(fileA, fileB)
lineNum = 0

for line in diffs:
   # split off the code
   code = line[:2]
   # if the  line is in both files or just b, increment the line number.
   if code in ("  ", "+ "):
      lineNum += 1
   # if this line is only in b, print the line number and the text on the line
   if code == "+ ":
      print "%d: %s" % (lineNum, line[2:].strip())
</snippet></ROW><ROW><id>9506715</id><snippet>bgporter@varese ~/temp:python diffy.py 
4: different
7: other
</snippet></ROW><ROW><id>9506715</id><snippet>"? "</snippet></ROW><ROW><id>9506724</id><snippet>if date_string.find('Z'):
    date_string = date_string[:len(date_string)-1]
</snippet></ROW><ROW><id>9506724</id><snippet>string.find()</snippet></ROW><ROW><id>9506724</id><snippet>-1</snippet></ROW><ROW><id>9506724</id><snippet>if</snippet></ROW><ROW><id>9506724</id><snippet>Z</snippet></ROW><ROW><id>9506724</id><snippet>utc_date</snippet></ROW><ROW><id>9506724</id><snippet>local_date</snippet></ROW><ROW><id>9506724</id><snippet>if date_string.endswith('Z'):
    date_string = date_string[:-1]
</snippet></ROW><ROW><id>9506790</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>9506790</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; lst = [{'value': 9.99, 'key': 'price'}, {'value': '1.1.1', 'key': 'version'}]
&gt;&gt;&gt;
&gt;&gt;&gt; getter = itemgetter('key','value')
&gt;&gt;&gt; dict(getter(dct) for dct in lst)
{'price': 9.99, 'version': '1.1.1'}
</snippet></ROW><ROW><id>9506790</id><snippet>map()</snippet></ROW><ROW><id>9506790</id><snippet>imap()</snippet></ROW><ROW><id>9506790</id><snippet>&gt;&gt;&gt; dict(map(getter, lst))
{'price': 9.99, 'version': '1.1.1'}
</snippet></ROW><ROW><id>9506960</id><snippet>import Image 
image_file = Image.open("convert_image.png") # open colour image
image_file = image_file.convert('1') # convert image to black and white
image_file.save('result.png')
</snippet></ROW><ROW><id>9507125</id><snippet>Pool.map_async()</snippet></ROW><ROW><id>9507125</id><snippet>Pool.imap()</snippet></ROW><ROW><id>9507192</id><snippet>x</snippet></ROW><ROW><id>9507192</id><snippet>y</snippet></ROW><ROW><id>9507192</id><snippet>p = Bunch(x=x, y=y)
</snippet></ROW><ROW><id>9507192</id><snippet>**argname</snippet></ROW><ROW><id>9507192</id><snippet>argname</snippet></ROW><ROW><id>9507192</id><snippet>&gt;&gt;&gt; class Bunch(object):
...     def __init__(self, **kwargs):
...         self.__dict__.update(kwargs)
...         print kwargs
... 
&gt;&gt;&gt; x, y = 5, 6
&gt;&gt;&gt; p = Bunch(x=x, y=y)
{'y': 6, 'x': 5}
&gt;&gt;&gt; p.x
5
&gt;&gt;&gt; p.y
6
</snippet></ROW><ROW><id>9507192</id><snippet>**kwargs</snippet></ROW><ROW><id>9507365</id><snippet>"""</snippet></ROW><ROW><id>9507365</id><snippet>r</snippet></ROW><ROW><id>9507365</id><snippet>my_str = r"""This string would "really "suck"" to write if I didn't
 know how to tell Python to parse it as "raw" text with the 'r' character and
 triple " quotes. Especially since I want \n to show up as a backlash followed
 by n. I don't want \0 to be the null byte either!"""
</snippet></ROW><ROW><id>9507365</id><snippet>r</snippet></ROW><ROW><id>9507365</id><snippet>"""</snippet></ROW><ROW><id>9507365</id><snippet>\0</snippet></ROW><ROW><id>9507365</id><snippet>\n</snippet></ROW><ROW><id>9507365</id><snippet>\</snippet></ROW><ROW><id>9507365</id><snippet>\n</snippet></ROW><ROW><id>9507365</id><snippet>\</snippet></ROW><ROW><id>9507365</id><snippet>n</snippet></ROW><ROW><id>9507365</id><snippet>\\n</snippet></ROW><ROW><id>9507530</id><snippet>package/__init__.py</snippet></ROW><ROW><id>9507530</id><snippet>from .SomeClass import SomeClass
</snippet></ROW><ROW><id>9507663</id><snippet># help functions
def valid_text(start, end):
    if not start or not end:
        return False
    if start.get_line_offset() &gt; end.get_line_offset():
        (start, end) = (end, start) # swap
    text = doc.get_text(start, end, False)
    for char in text:
        if not re.match("\w", char):
            return False
    return True
def increment(index, incr):
    newindex = index.copy()
    newindex.set_line_offset(index.get_line_offset() + incr)
    return newindex
def find_word_bound(index, step):
    condition = lambda x: not index.get_line_offset() == 0 if step &lt; 0 else lambda x: not x.ends_line()
    while condition(index):
        newindex = increment(index, step)
        # newindex contains word?
        if not valid_text(newindex, index):
            break
        # save new index
        index = newindex
    return index
# get vars
cursor = doc.get_iter_at_mark(doc.get_insert())
start = find_word_bound(cursor, -1)
end = find_word_bound(cursor, +1)
word = doc.get_text(start, end, False)
</snippet></ROW><ROW><id>9507663</id><snippet>doc.delete(begin, end)</snippet></ROW><ROW><id>9507663</id><snippet>doc.place_cursor(place)</snippet></ROW><ROW><id>9507663</id><snippet>doc.insert_at_cursor(str)</snippet></ROW><ROW><id>9507845</id><snippet>qtwi.backgroundColor()</snippet></ROW><ROW><id>9507845</id><snippet>print qtwi.backgroundColor()
print qtwi.backgroundColor()
</snippet></ROW><ROW><id>9507845</id><snippet>&lt;PyQt4.QtGui.QColor object at 0x7f02c61f9ad0&gt;
&lt;PyQt4.QtGui.QColor object at 0x7f02c61f9a60&gt;
</snippet></ROW><ROW><id>9507845</id><snippet>qtwi.backgroundColor()</snippet></ROW><ROW><id>9507845</id><snippet>from PyQt4 import QtGui

clr = QtGui.QColor('yellow')
qtwi = QtGui.QTableWidgetItem()
qtwi.setBackgroundColor(clr)

print 'Colors are the same object: %s' % (clr == qtwi.backgroundColor())

print 'Alpha before is: %s' % clr.alpha()
clr.setAlpha(67)
print 'Alpha after is: %s' % clr.alpha()

qtwibg = qtwi.backgroundColor()
print 'Alpha before is: %s' % qtwibg.alpha()
qtwibg.setAlpha(171)
print 'Alpha after is: %s' % qtwibg.alpha()

print 'Colors are the same object: %s' % (clr == qtwibg)
</snippet></ROW><ROW><id>9507991</id><snippet>import utils.Class1
import utils.Class2

if __name__ == '__main__':
    c1 = utils.Class1.Class1()
    c2 = utils.Class2.Class2()
</snippet></ROW><ROW><id>9507991</id><snippet>base -&gt;
    utils -&gt;
        resources.py
</snippet></ROW><ROW><id>9507991</id><snippet>import utils.resources


c1 = utils.resources.Class1()
</snippet></ROW><ROW><id>9508065</id><snippet>re.findall(r'a*?bc*?', 'aabcc', re.DOTALL)
</snippet></ROW><ROW><id>9508065</id><snippet>'aab'</snippet></ROW><ROW><id>9508442</id><snippet>mymath.MyMath</snippet></ROW><ROW><id>9508442</id><snippet>mymath.mymath</snippet></ROW><ROW><id>9508442</id><snippet>__init__.py</snippet></ROW><ROW><id>9508442</id><snippet>__init__.py</snippet></ROW><ROW><id>9508442</id><snippet>import mymath.mymath</snippet></ROW><ROW><id>9508442</id><snippet>mymath</snippet></ROW><ROW><id>9508442</id><snippet>mymath.mymath.MyMath</snippet></ROW><ROW><id>9508442</id><snippet>from mymath.mymath import MyMath
</snippet></ROW><ROW><id>9508641</id><snippet>from myapp.myapp_utils import *
</snippet></ROW><ROW><id>9508641</id><snippet>__init__.py</snippet></ROW><ROW><id>9508892</id><snippet>&gt;&gt;&gt; st = '{{ link.description | default text }}'
&gt;&gt;&gt; re.findall(r'\|\s*(.*?)\s*}',st)
['default text']
&gt;&gt;&gt; st1  = '{{ link.description | default text }}'
&gt;&gt;&gt; re.findall(r'\|\s*(.*?)\s*}',st1)
['default text']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9508892</id><snippet>|[ ]*(.*?)[ ]*}}</snippet></ROW><ROW><id>9508892</id><snippet>|</snippet></ROW><ROW><id>9508892</id><snippet>\s*</snippet></ROW><ROW><id>9508892</id><snippet>white-space</snippet></ROW><ROW><id>9509005</id><snippet>osascript</snippet></ROW><ROW><id>9509005</id><snippet>from subprocess import Popen, PIPE

cmd = """osascript \
    -e 'tell application "System Events"' \
    -e 'set app_name to name of the first process whose frontmost is true' \
    -e 'end tell' """
v = Popen(cmd, shell=True, stdout=PIPE).stdout.read()
</snippet></ROW><ROW><id>9509005</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.company.test&lt;/string&gt;
    &lt;key&gt;Nice&lt;/key&gt;
    &lt;integer&gt;1&lt;/integer&gt;
    &lt;key&gt;OnDemand&lt;/key&gt;
    &lt;false/&gt;
    &lt;key&gt;Program&lt;/key&gt;
    &lt;string&gt;/path/to/script.py&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</snippet></ROW><ROW><id>9509005</id><snippet>script.py</snippet></ROW><ROW><id>9509005</id><snippet>from appscript import app, its
activeApp = app('System Events').processes[its.frontmost == True].first()
print activeApp

#result
app(u'/System/Library/CoreServices/System Events.app').application_processes[u'Terminal']
</snippet></ROW><ROW><id>9509005</id><snippet>activeApp</snippet></ROW><ROW><id>9509609</id><snippet>.replace()</snippet></ROW><ROW><id>9509609</id><snippet>data = str(val).replace("extra_","").upper() + ' = ' + key[val] + ','
</snippet></ROW><ROW><id>9509660</id><snippet>from urllib import unquote

def unquote_u(source):
    result = unquote(source)
    if '%u' in result:
        result = result.replace('%u','\\u').decode('unicode_escape')
    return result

print unquote_u('Tan%u0131m')
</snippet></ROW><ROW><id>9509718</id><snippet>&gt;&gt;&gt; charset.add_charset('utf-8', charset.QP, charset.QP)
&gt;&gt;&gt; m = MIMEText("This is utf-8 text: á", _charset='utf-8')
&gt;&gt;&gt; str(m)
'Content-Type: text/plain; charset="utf-8"\nMIME-Version: 1.0\nContent-Transfer-Encoding: quoted-printable\n\nThis is utf-8 text: =E1'
</snippet></ROW><ROW><id>9509749</id><snippet>BaseHTTPRequestHandler</snippet></ROW><ROW><id>9509749</id><snippet>upload_json_report</snippet></ROW><ROW><id>9509749</id><snippet>do_POST</snippet></ROW><ROW><id>9509749</id><snippet>    print urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>9509749</id><snippet>upload_json_report</snippet></ROW><ROW><id>9509749</id><snippet>do_POST</snippet></ROW><ROW><id>9509749</id><snippet>do_POST</snippet></ROW><ROW><id>9509749</id><snippet>upload_json_report</snippet></ROW><ROW><id>9509761</id><snippet>while true; do
    python myprogram.py
    sleep 900
done
</snippet></ROW><ROW><id>9509765</id><snippet>str.split()</snippet></ROW><ROW><id>9509765</id><snippet>&gt;&gt;&gt; thingies = ['link.description', 'button.text]] &lt;/li&gt;']
&gt;&gt;&gt; different_thingies = [thingy.split(']')[0] for thingy in thingies]
&gt;&gt;&gt; different_thingies
['link.description', 'button.text']
</snippet></ROW><ROW><id>9509843</id><snippet>answer = Questions()
</snippet></ROW><ROW><id>9509843</id><snippet>from Tkinter import*
import time
import tkMessageBox
import random

def Questions():    
    number1 = random.randrange(1,25)
    number2 = random.randrange(1,50)
    answer = number1 + number2
    prompt = ("Add " + str(number1) + " and " + str(number2))
    label1 = Label(root, text=prompt, width=len(prompt), bg='yellow')
    label1.pack()
    return answer

def start():
    global count_flag 
    global answer
    answer = Questions()
    count_flag = True
    count = 0.0
    while True:
        if count_flag == False:
            break
        # put the count value into the label
        label['text'] = str(count)
        # wait for 0.1 seconds
        time.sleep(0.1)
        # needed with time.sleep()
        root.update()
        # increase count
        count += 0.1

def Submit(answer, entryWidget):
     """ Display the Entry text value. """
     global count_flag

     count_flag = False
     print answer

     if entryWidget.get().strip() == "":
         tkMessageBox.showerror("Tkinter Entry Widget", "Please enter a number.")

     if answer != int(entryWidget.get().strip()):
         tkMessageBox.showinfo("Answer", "INCORRECT!")
     else:
         tkMessageBox.showinfo("Answer", "CORRECT!")



# create a Tkinter window
root = Tk()

root.title("Math Quiz")
root["padx"] = 40
root["pady"] = 20   

# Create a text frame to hold the text Label and the Entry widget
textFrame = Frame(root)

#Create a Label in textFrame
entryLabel = Label(textFrame)
entryLabel["text"] = "Answer:"
entryLabel.pack(side=LEFT)

# Create an Entry Widget in textFrame
entryWidget = Entry(textFrame)
entryWidget["width"] = 50
entryWidget.pack(side=LEFT)

textFrame.pack()

#directions     
directions = ('Click start to begin. You will be asked a series of questions.')
instructions = Label(root, text=directions, width=len(directions), bg='orange')
instructions.pack()

# this will be a global flag
count_flag = True


Sub = lambda: Submit(answer, entryWidget)
#stopwatch = lambda: start(answer)

# create needed widgets
label = Label(root, text='0.0')
btn_submit = Button(root, text="Submit", command = Sub)
btn_start = Button(root, text="Start", command = start)
btn_submit.pack()
btn_start.pack()
label.pack()


# start the event loop
root.mainloop()
</snippet></ROW><ROW><id>9509860</id><snippet>(\G|\n) </snippet></ROW><ROW><id>9509860</id><snippet>$1 </snippet></ROW><ROW><id>9509860</id><snippet>(?&lt;=\n {0,30}) </snippet></ROW><ROW><id>9509860</id><snippet> </snippet></ROW><ROW><id>9509860</id><snippet>((?&lt;=\n)|(?&lt;=\n )|(?&lt;=\n {2})|(?&lt;=\n {3})|(?&lt;=\n {4})|(?&lt;=\n {5})|...|(?&lt;=\n {30})) </snippet></ROW><ROW><id>9509860</id><snippet> </snippet></ROW><ROW><id>9509860</id><snippet>  </snippet></ROW><ROW><id>9509860</id><snippet>  </snippet></ROW><ROW><id>9510316</id><snippet>&gt;&gt; my_list
[1, 2, 3, 4]
&gt;&gt;&gt; numpy.asarray([my_list])
array([[1, 2, 3, 4]])
&gt;&gt;&gt; numpy.asarray([my_list]).shape
(1, 4)
</snippet></ROW><ROW><id>9510316</id><snippet>&gt;&gt;&gt; my_list = [1,2,3,4]
&gt;&gt;&gt; d = numpy.ones((3,4))
&gt;&gt;&gt; d
array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
&gt;&gt;&gt; d[0,:] = my_list
&gt;&gt;&gt; d[1,:] = numpy.asarray(my_list)
&gt;&gt;&gt; d[2,:] = numpy.asarray([my_list])
&gt;&gt;&gt; d
array([[ 1.,  2.,  3.,  4.],
       [ 1.,  2.,  3.,  4.],
       [ 1.,  2.,  3.,  4.]])
</snippet></ROW><ROW><id>9510316</id><snippet>&gt;&gt;&gt; d[1,:] = (3*numpy.asarray(my_list)).T
&gt;&gt;&gt; d
array([[  1.,   2.,   3.,   4.],
       [  3.,   6.,   9.,  12.],
       [  1.,   2.,   3.,   4.]])
</snippet></ROW><ROW><id>9510377</id><snippet>re.findall('^[^a-zA-Z]*(.*)', str)
</snippet></ROW><ROW><id>9510610</id><snippet>pip install --ignore-installed</snippet></ROW><ROW><id>9510610</id><snippet>~/.pip/cache/</snippet></ROW><ROW><id>9510610</id><snippet>$PWD/build/</snippet></ROW><ROW><id>9511655</id><snippet>render_template()</snippet></ROW><ROW><id>9511655</id><snippet>extra_files</snippet></ROW><ROW><id>9511655</id><snippet>Flask().run()</snippet></ROW><ROW><id>9511655</id><snippet>extra_dirs = ['directory/to/watch',]
extra_files = extra_dirs[:]
for extra_dir in extra_dirs:
    for dirname, dirs, files in os.walk(extra_dir):
        for filename in files:
            filename = path.join(dirname, filename)
            if path.isfile(filename):
                extra_files.append(filename)
app.run(extra_files=extra_files)
</snippet></ROW><ROW><id>9511853</id><snippet>import os

while True:
  os.system('python run.py')
</snippet></ROW><ROW><id>9512105</id><snippet>import shlex
filelines = [' '.join(shlex.split(line,True)) for line in file]
</snippet></ROW><ROW><id>9512225</id><snippet>pygame.time.delay(10)</snippet></ROW><ROW><id>9512225</id><snippet>10+render_time</snippet></ROW><ROW><id>9512225</id><snippet>pygame.time.Clock</snippet></ROW><ROW><id>9512225</id><snippet>.tick(framerate)</snippet></ROW><ROW><id>9512410</id><snippet>pattern = "_([^_]*)_"
re.sub(pattern, r'&lt;b&gt;\1&lt;/b&gt;', text)
</snippet></ROW><ROW><id>9512913</id><snippet>: present</snippet></ROW><ROW><id>9512913</id><snippet>: not present</snippet></ROW><ROW><id>9512913</id><snippet>for line in lines:
    m = re.match('^Name[^:]*: present', line)
    if m:
        print re.sub(': present', ': not present', line)
    else:
       print line
</snippet></ROW><ROW><id>9513057</id><snippet>readlines()</snippet></ROW><ROW><id>9513057</id><snippet>file.readline()</snippet></ROW><ROW><id>9513057</id><snippet>if not line.endswith("\n"): break</snippet></ROW><ROW><id>9513057</id><snippet>len(line) &lt; 1</snippet></ROW><ROW><id>9513057</id><snippet>with open("filename") as f:
    for i, line in enumerate(f):
        print("Line: %s" % line)
        if i &gt; 5 or not line:
            break
</snippet></ROW><ROW><id>9513057</id><snippet>print("Line: %s" % line.rstrip("\n"))
</snippet></ROW><ROW><id>9513183</id><snippet>$.ajax({
    url:"/testPage",
    type:'GET',
    success: function(html){ 
        $('body').append(html);
    }
});
</snippet></ROW><ROW><id>9513183</id><snippet>body</snippet></ROW><ROW><id>9513552</id><snippet>syncdb</snippet></ROW><ROW><id>9513683</id><snippet>from django.db.models import signals

class Post(models.Model):
    title = models.CharField(max_length=240)
    last_comment_date = models.DateField(null=True, blank=True)

def post_last_comment_date(sender, instance=None, **kwargs):
    try:
        last_comment_date = self.comment_set.order_by('-date')[0].date
    except Comment.DoesNotExist:
        return

    if last_comment_date != comment.post.last_comment_date:
        comment.post.last_comment_date = last_comment_date
        comment.post.save()

signals.post_save.connect(post_last_comment_date, sender=Comment)
</snippet></ROW><ROW><id>9513683</id><snippet>Comment.objects.order_by('post__last_comment_date', '-date')</snippet></ROW><ROW><id>9514942</id><snippet>lambda</snippet></ROW><ROW><id>9514942</id><snippet>map</snippet></ROW><ROW><id>9514942</id><snippet>map(lambda x: (lambda a,b,c,d,*e: list((c,a,d,b) + e))(*x.split('|')), open('test.txt', 'r').readlines())
</snippet></ROW><ROW><id>9515496</id><snippet>l = list(range(10))
for i in l:
    print i
    try:
        del l[i]
    except (RuntimeError,IndexError), e:
        print e

print l
</snippet></ROW><ROW><id>9515496</id><snippet>0
2
4
5
7
list assignment index out of range
9
list assignment index out of range
[1, 2, 4, 5, 7, 9]
</snippet></ROW><ROW><id>9515496</id><snippet>iter(l)</snippet></ROW><ROW><id>9515518</id><snippet>numpy.ix_</snippet></ROW><ROW><id>9515518</id><snippet>m = matrix([[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]])

d = [0,2]
print m[ix_(d,d)]
</snippet></ROW><ROW><id>9515518</id><snippet>[[1 3]
 [7 9]]
</snippet></ROW><ROW><id>9515698</id><snippet>MERGE INTO LastPriceUpdate as lpu
USING (
        SELECT getdate() as LastPriceUpdate,
               1501845 as EventID
      ) AS src
ON lpu.EventID = src.EventID
WHEN MATCHED THEN
  UPDATE SET LastPriceUpdate = src.LastPriceUpdate
WHEN NOT MATCHED BY TARGET THEN
  INSERT (EventID, LastPriceUpdate) 
    VALUES (src.EventID, src.LastPriceUpdate);  
</snippet></ROW><ROW><id>9516258</id><snippet>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_RAW)
s.sendto('\xff'*6 + '\x00\x50\xe4\x59\xd9\x30'*16, ('168.1.0.0', 4444))
</snippet></ROW><ROW><id>9516258</id><snippet>socket</snippet></ROW><ROW><id>9516358</id><snippet>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse("Fri Sep 25 18:09:49 -0500 2009")
datetime.datetime(2009, 9, 25, 18, 9, 49, tzinfo=tzoffset(None, -18000))
&gt;&gt;&gt; parse("2008-06-29T00:42:18.000Z")
datetime.datetime(2008, 6, 29, 0, 42, 18, tzinfo=tzutc())
&gt;&gt;&gt; parse("2011-07-16T21:46:39Z")
datetime.datetime(2011, 7, 16, 21, 46, 39, tzinfo=tzutc())
</snippet></ROW><ROW><id>9516358</id><snippet>datetime.datetime</snippet></ROW><ROW><id>9516358</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.utcfromtimestamp(float("1294989360"))
datetime.datetime(2011, 1, 14, 7, 16)
</snippet></ROW><ROW><id>9516358</id><snippet>from dateutil.parser import parse
from datetime import datetime

def parse_time(s):
    try:
        ret = parse(s)
    except ValueError:
        ret = datetime.utcfromtimestamp(s)
    return ret
</snippet></ROW><ROW><id>9516784</id><snippet>s = '"-1"'
</snippet></ROW><ROW><id>9516784</id><snippet>s = '"-1"'
int(s.replace('"', ''))
</snippet></ROW><ROW><id>9516907</id><snippet>   1   0   0      617.09        0.00        9.38 l   0.0000E+00
   2   0   0     7169.00     6978.44       94.10 o   0.1913E-05
   3   0   0      366.08      371.91       14.06 o   0.6503E-03
   4   0   0     5948.04     5586.09       52.95 o   0.2804E-05
   5   0   0     3756.34     3944.63       50.69 o   0.6960E-05
 -11   1   0      147.27       93.02       23.25 o   0.1320E-02
 -10   1   0       -2.31        5.71        9.57 o   0.2533E-02
</snippet></ROW><ROW><id>9516907</id><snippet>split</snippet></ROW><ROW><id>9516907</id><snippet>def to_float(item):
    try:
        return float(item)
    except ValueError:
        return item

def formatter(lines):
    for line in lines:
        if not line.strip(): continue
        yield [to_float(item) for item in line.split()]

dct = {}
with open('data') as f:
    for row in formatter(f):
        dct[tuple(row[:3])] = row[5:7]

print(dct)
</snippet></ROW><ROW><id>9516907</id><snippet>{(-11.0, 1.0, 0.0): [23.25, 'o'], (4.0, 0.0, 0.0): [52.95, 'o'], (1.0, 0.0, 0.0): [9.38, 'l'], (-10.0, 1.0, 0.0): [9.57, 'o'], (3.0, 0.0, 0.0): [14.06, 'o'], (5.0, 0.0, 0.0): [50.69, 'o'], (2.0, 0.0, 0.0): [94.1, 'o']}
</snippet></ROW><ROW><id>9516907</id><snippet>genfromtxt</snippet></ROW><ROW><id>9516907</id><snippet>dtype</snippet></ROW><ROW><id>9516907</id><snippet>None</snippet></ROW><ROW><id>9516907</id><snippet>genfromtxt</snippet></ROW><ROW><id>9516907</id><snippet>dtype</snippet></ROW><ROW><id>9516907</id><snippet>import numpy as np
arr = np.genfromtxt('data', dtype = None)
dct = {tuple(row[:3]):row[5:7] for row in arr}
</snippet></ROW><ROW><id>9516907</id><snippet>data</snippet></ROW><ROW><id>9516907</id><snippet>1 2 3 4 5 6 7 8 9 10
1 2 4 4 5 6 7 8 9 10
1 2 5 4 5 6 7 8 9 10
</snippet></ROW><ROW><id>9516907</id><snippet>dct</snippet></ROW><ROW><id>9516907</id><snippet>{(1, 2, 5): array([6, 7]), (1, 2, 4): array([6, 7]), (1, 2, 3): array([6, 7])}
</snippet></ROW><ROW><id>9517110</id><snippet>python</snippet></ROW><ROW><id>9517110</id><snippet>random.choice()</snippet></ROW><ROW><id>9517110</id><snippet>$ python
&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice([['10','32','66'], ['78','501','23'], ['15','48', '698']])
['10', '32', '66']
</snippet></ROW><ROW><id>9517150</id><snippet>[handler_fileHandler]
  &lt;snip&gt;
args=(os.path.join(sys.path[0],'echi_export.log'), 'a',)
</snippet></ROW><ROW><id>9517150</id><snippet>os.path.dirname(__file__)</snippet></ROW><ROW><id>9517150</id><snippet>/usr/lib/python2.7/logging/</snippet></ROW><ROW><id>9517235</id><snippet>cgi-bin</snippet></ROW><ROW><id>9517235</id><snippet>cgi-bin</snippet></ROW><ROW><id>9517235</id><snippet>cgi.conf</snippet></ROW><ROW><id>9517235</id><snippet>$HTTP["url"] =~ "^/cgi-bin" { (...) }</snippet></ROW><ROW><id>9517563</id><snippet>while True:
    rlist, wlist, xlist = select.select([client, proc.stdout], [], [])
</snippet></ROW><ROW><id>9517563</id><snippet>select.select</snippet></ROW><ROW><id>9517563</id><snippet>client</snippet></ROW><ROW><id>9517563</id><snippet>proc.stdout</snippet></ROW><ROW><id>9517563</id><snippet>rlist</snippet></ROW><ROW><id>9517563</id><snippet>[client.stdin, proc.stdout]</snippet></ROW><ROW><id>9518255</id><snippet>ArtistAnimation</snippet></ROW><ROW><id>9518255</id><snippet>class SnapShotAnimation(ArtistAnimation):
    def __init__(self, fig, artists, snapshot_delay, *args, **kwargs):
        self._snapshot_delay = snapshot_delay
        self._time_to_snapshot = snapshot_delay
        ArtistAnimation.__init__(self, fig, artists, *args, **kwargs)

    def _step(self, *args):
        if self._time_to_snapshot &lt;= 0:
            do_snapshot() 
            self._time_to_snapshot = self._snap_shot_delay #reset timer
        else:
            self._time_to_snapshot -= self._interval
        ArtistAnimation._step(*args) #ancestor method maybe better at start

    def do_snapshot(self):
        """Your actual snapshot code comes here - basically saving to a output"""
        fname = 'snapshot.png'
        self._fig.savefig(fname)
</snippet></ROW><ROW><id>9518255</id><snippet>snapshot_delay = 1000 # time in ms
</snippet></ROW><ROW><id>9518255</id><snippet>ani=SnapShotAnimation(fig,result,snapshot_delay, interval=10,repeat=False)
</snippet></ROW><ROW><id>9518288</id><snippet>table.py</snippet></ROW><ROW><id>9518288</id><snippet>import operator
import itertools
import re
import math
import functools
import logging
logger = logging.getLogger(__name__)

zip_longest = itertools.izip_longest

def tableinfo(rows,
              sep = u'─',
              corner = u'·',
              delim = None,
              corner_delim = None,
              prefix = u'│ ',
              postfix = u' │',
              colsep = u' │ ',
              has_header = False,
              header = None,
              separate_rows = False,
              framed = (True, True),
              separate_empty_lines = True,
              justify = 'right',
              wrapfunc = lambda x:x,
              width = None,
              phantom = None,
              **kw):
    # Based on: http://code.activestate.com/recipes/267662-table-indentation/
    # Author: http://code.activestate.com/recipes/users/2591466/ (George Sakkis)
    def row_wrapper(row):
        try:
            new_rows = [wrapper(item).split('\n') for (item, wrapper)
                        in zip(row, wrapfunc)]
        except TypeError:
            # This happens if wrapfunc is not an iterator
            # TypeError: zip argument #2 must support iteration
            new_rows = [wrapfunc(item).split('\n') for item in row]
        return list(zip_longest(*new_rows, fillvalue = u''))
    if header:
        has_header = True
        rows = itertools.chain(normalize([header]), rows)
    logical_rows = [row_wrapper(row) for row in rows]
    columns = zip(*functools.reduce(operator.add, logical_rows))
    max_width = (
        [max(len(item) for item in column) for column in columns]
        if width is None else width )
    if phantom is not None:
        max_width = [max(x) for x in zip(phantom, max_width)]
    lcorner = corner + sep*(len(prefix)-1) if len(prefix) &gt;= 1 else u''
    rcorner = sep*(len(postfix)-1) + corner if len(postfix) &gt;= 1 else u''

    delim = itertools.repeat(colsep) if delim is None else itertools.cycle(delim)
    corner_delim = (delim_to_corner(delim, sep, corner)
                  if corner_delim is None else itertools.cycle(corner_delim))    
    row_separator = (sep*w for w in max_width)
    row_separator = (lcorner
                     +''.join(list(iterjoin(corner_delim, row_separator)))
                     +rcorner)
    dispatch = {'center':unicode.center, 'right':unicode.rjust, 'left':unicode.ljust}
    try: justify = itertools.cycle([dispatch[item] for item in justify])
    except KeyError: justify = itertools.repeat(dispatch[justify.lower()])
    result = []
    for physical_rows in logical_rows:
        row_result = []
        for row in physical_rows:
            if separate_empty_lines and not ''.join(row).strip():
                row_result.append(row_separator)
            else:
                pieces = [justifier(item, w) for (item, w, justifier)
                        in zip(row, max_width, justify)]
                row_result.append(
                    prefix
                    + u''.join(list(iterjoin(delim, pieces)))
                    + postfix )                
        result.append(u'\n'.join(row_result))
        if has_header and not separate_rows:
            result.insert(1, row_separator)
            has_header = False
    joiner = u'\n'+row_separator+u'\n' if separate_rows else u'\n'
    result = joiner.join(result)
    top_framed, bottom_framed = framed
    if top_framed: result = row_separator+u'\n'+result
    if bottom_framed: result = result+u'\n'+row_separator
    return result, max_width

def iterjoin(sep, it):
    sep = itertools.cycle(sep)
    it = iter(it)
    yield next(it)
    for a, b in zip(it, sep):
        yield b
        yield a

def normalize(rows):
    new_rows = []
    for row in rows:
        new_rows.append([unicode(elt).expandtabs() for elt in row])
    return new_rows

def delim_to_corner(delim, sep, corner):
    for d in delim:
        d = d.replace(u'│', corner).replace(u'|', corner)
        for c in '&lt; &gt;': d = d.replace(c, sep)
        yield d

def wrap_onspace(text, width):
    # written by Mike Brown
    # http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/148061
    '''
    A word-wrap function that preserves existing line breaks
    and most spaces in the text. Expects that existing line
    breaks are posix newlines (\n).
    '''
    words = iter(text.split(' '))
    line = next(words)
    for word in words:
        contemplated_width = (len(line[line.rfind('\n')+1:]) +
                              len(word.split('\n', 1)[0]))
        if contemplated_width &gt;= width:
            line += '\n'+word
        else:
            line += ' '+word
    return line

def wrap_onspace_strict(text, width):
    '''Similar to wrap_onspace, but enforces the width constraint:
       words longer than width are split.'''
    word_pat = re.compile(r'\S{'+unicode(width)+r',}')
    return wrap_onspace(word_pat.sub(lambda m: wrap_always(m.group(), width), text),
                        width)

def wrap_always(text, width):
    '''A simple word-wrap function that wraps text on exactly width characters.
       It doesn\'t split the text in words.'''
    return '\n'.join( text[width*i:width*(i+1)]
                       for i in xrange(int(math.ceil(1.*len(text)/width))) )

def onspace(width):
    return functools.partial(wrap_onspace, width = width)

def strict(width):
    return functools.partial(wrap_onspace_strict, width = width)

def always(width):
    return functools.partial(wrap_always, width = width)

def table(rows,
          sep = u'─',
          corner = u'·',
          delim = None,
          corner_delim = None,
          prefix = u'│ ',
          postfix = u' │',
          has_header = False,
          header = None,
          separate_rows = False,
          framed = (True, True),
          separate_empty_lines = True,
          justify = 'right',
          wrapfunc = lambda x:x,
          width = None,
          **kw):
    '''
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │                 rows │ A sequence of sequences of items, one sequence per row. │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │               framed │ row separator on top and bottom                         │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │                  sep │ Character to be used for the row separator line (if     │
    │                      │ has_header==True or separate_rows==True).               │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │                delim │ A sequence of column delimiters. The delimiters are     │
    │                      │ repeated in a cycle                                     │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │         corner_delim │ A sequence of column delimiters used in row separators, │
    │                      │ repeated in a cycle.                                    │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │               prefix │ A string prepended to each printed row.                 │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │              postfix │ A string appended to each printed row.                  │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │           has_header │ True if there is a row separator between the first and  │
    │                      │ second row                                              │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │        separate_rows │ True if all rows are to be separated                    │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │               framed │ True if top (and/or bottom) have a row separator        │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │ separate_empty_lines │ replace empty lines with a row separator                │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │              justify │ Determines how the data is justified in each column.    │
    │                      │ Valid values are 'left','right' and 'center', or a list │
    │                      │ of such values (one element per column).                │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │             wrapfunc │ A function f(text), or list of functions, for wrapping  │
    │                      │ text; each element in the table is first wrapped by     │
    │                      │ this function. If wrapfunc is a list of functions, then │
    │                      │ table will apply one function per column.               │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    │               width  │ A list of column widths. If None, the widths will be    │
    │                      │ calculated.                                             │
    ·──────────────────────·─────────────────────────────────────────────────────────·
    '''
    result, max_width = tableinfo(
        normalize(rows), sep = sep, corner = corner, delim = delim,
        corner_delim = corner_delim,
        prefix = prefix, postfix = postfix, has_header = has_header, header = header,
        separate_rows = separate_rows, framed = framed,
        separate_empty_lines = separate_empty_lines, justify = justify,
        wrapfunc = wrapfunc, width = width)
    return result

def ascii_table(rows,
          sep = '-',
          corner = '+',
          delim = [' | '],
          corner_delim = None,
          prefix = u'| ',
          postfix = u' |',
          has_header = False,
          header = None,
          separate_rows = False,
          framed = (True, True),
          separate_empty_lines = True,
          justify = 'right',
          wrapfunc = lambda x:x,
          width = None,
          **kw):
    result, max_width = tableinfo(
        normalize(rows), sep = sep, corner = corner, delim = delim,
        corner_delim = corner_delim,
        prefix = prefix, postfix = postfix, has_header = has_header, header = header,
        separate_rows = separate_rows, framed = framed,
        separate_empty_lines = separate_empty_lines, justify = justify,
        wrapfunc = wrapfunc, width = width)
    return result
</snippet></ROW><ROW><id>9518288</id><snippet>import table

data = [
    ('id', 'now()', 'aaa'),
    ('28', '2012-03-01 14:24:02', u'To \N{INFINITY} and beyond'),
    ('77', '2012-03-01 14:24:02', u"All with me's meet"),
    ('89', '2012-03-01 14:24:02', u' that I can fashion fit \N{BLACK SMILING FACE}'),
    ('114', '2012-03-01 14:24:02', u'\N{LATIN CAPITAL LETTER OU}'),
    ('116', '2012-03-01 14:24:02', u'An extra wide unicode: \N{COMBINING CYRILLIC HUNDRED THOUSANDS SIGN}'),
    ('252', '2012-03-01 14:24:02', u'\N{THEREFORE}'),
    ]

print(table.ascii_table(data, has_header = True))
</snippet></ROW><ROW><id>9518288</id><snippet>+-----+---------------------+---------------------------+
|  id |               now() |                       aaa |
+-----+---------------------+---------------------------+
|  28 | 2012-03-01 14:24:02 |           To ∞ and beyond |
|  77 | 2012-03-01 14:24:02 |        All with me's meet |
|  89 | 2012-03-01 14:24:02 |  that I can fashion fit ☻ |
| 114 | 2012-03-01 14:24:02 |                         Ȣ |
| 116 | 2012-03-01 14:24:02 |  An extra wide unicode: ҈ |
| 252 | 2012-03-01 14:24:02 |                         ∴ |
+-----+---------------------+---------------------------+
</snippet></ROW><ROW><id>9518288</id><snippet>table.table</snippet></ROW><ROW><id>9518462</id><snippet># Iterate through array2</snippet></ROW><ROW><id>9518462</id><snippet>AX</snippet></ROW><ROW><id>9518462</id><snippet>arrayX</snippet></ROW><ROW><id>9518462</id><snippet># Iterate through A2

idx  = (A2==1) &amp; (A3==0)
idx2 = (~idx)  &amp; (A3&gt;0)
A3[idx ]  = 1
A3[idx2] += 1
A1[A3==5] = 8
</snippet></ROW><ROW><id>9518462</id><snippet>a</snippet></ROW><ROW><id>9518462</id><snippet>b</snippet></ROW><ROW><id>9518462</id><snippet>numpy</snippet></ROW><ROW><id>9518467</id><snippet>lottonumber1</snippet></ROW><ROW><id>9518467</id><snippet>lottery</snippet></ROW><ROW><id>9518467</id><snippet>if userChoice1 == lottonumber1:</snippet></ROW><ROW><id>9518467</id><snippet>lottery</snippet></ROW><ROW><id>9518467</id><snippet>if</snippet></ROW><ROW><id>9518467</id><snippet>lottoNumber1,lottoNumber2,lottoNumber3</snippet></ROW><ROW><id>9518467</id><snippet>for</snippet></ROW><ROW><id>9518467</id><snippet>range</snippet></ROW><ROW><id>9518467</id><snippet>import random

def lottery():                          # no parameters!
    lottoNumber1 = random.randint(1,50)
    print(lottoNumber1)
    lottoNumber2 = random.randint(1,50)
    print(lottoNumber2)
    lottoNumber3 = random.randint(1,50)
    print(lottoNumber3)
    return lottoNumber1,lottoNumber2,lottoNumber3

userChoice1 = int(input('Choose a number between 1 and 50: '))
userChoice2 = int(input('Choose a number between 1 and 50: '))
userChoice3 = int(input('Choose a number between 1 and 50: '))

lottoNumber1, lottoNumber2, lottoNumber3 = lottery()

if userChoice1 == lottoNumber1:
    print('You win $1,000')
else:
    print('You effing suck')
</snippet></ROW><ROW><id>9518467</id><snippet>lottery</snippet></ROW><ROW><id>9518467</id><snippet>n</snippet></ROW><ROW><id>9518467</id><snippet>min_value</snippet></ROW><ROW><id>9518467</id><snippet>max_value</snippet></ROW><ROW><id>9518467</id><snippet>def lottery(n=3, min_value=1, max_value=50):
    return [random.randint(min_value, max_value) for i in range(n)]
</snippet></ROW><ROW><id>9518691</id><snippet>curve_fit</snippet></ROW><ROW><id>9518691</id><snippet>def logistic(x, y0, k, d, a, b):
    if b &gt; 0 and a &gt; 0:
        y = (k * pow(1 + np.exp(d - (a * b * x) ), (-1/b) )) + y0
    elif b &gt;= -1 or b &lt; 0 or a &lt; 0:
        y = (k * pow(1 - np.exp(d - (a * b * x) ), (-1/b) )) + y0
    else:
        y = 1e10
    return y
</snippet></ROW><ROW><id>9518792</id><snippet>"select * from Throughput where DeviceName='%s'" % data['DeviceName']
</snippet></ROW><ROW><id>9519016</id><snippet>from shutil import copyfileobj

with open('bigInputfile.txt', 'rb') as input:
    with bz2.BZ2File('bigInputfile.txt.bz2', 'wb', compresslevel=9) as output:
        copyfileobj(input, output)
</snippet></ROW><ROW><id>9519113</id><snippet>distinct</snippet></ROW><ROW><id>9519113</id><snippet>order_by</snippet></ROW><ROW><id>9519113</id><snippet>distinct</snippet></ROW><ROW><id>9519113</id><snippet>distinct</snippet></ROW><ROW><id>9519304</id><snippet>str()</snippet></ROW><ROW><id>9519304</id><snippet>print('Number of Elephants less than %s: %s' % (floatB, len(myList)))
</snippet></ROW><ROW><id>9519304</id><snippet>%s</snippet></ROW><ROW><id>9519304</id><snippet>str()</snippet></ROW><ROW><id>9519304</id><snippet>%s</snippet></ROW><ROW><id>9519304</id><snippet>%d</snippet></ROW><ROW><id>9519304</id><snippet>%e</snippet></ROW><ROW><id>9519304</id><snippet>%E</snippet></ROW><ROW><id>9519304</id><snippet>%f</snippet></ROW><ROW><id>9519304</id><snippet>%F</snippet></ROW><ROW><id>9519304</id><snippet>%g</snippet></ROW><ROW><id>9519304</id><snippet>%G</snippet></ROW><ROW><id>9519489</id><snippet>SIGINT</snippet></ROW><ROW><id>9519489</id><snippet>$ python -c'import time; time.sleep(300)'
^CTraceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
KeyboardInterrupt
</snippet></ROW><ROW><id>9519878</id><snippet>nosetest p1.py &gt; text.txt 2&gt;&amp;1
</snippet></ROW><ROW><id>9519934</id><snippet>def doit(text):      
  import re
  matches=re.findall(r'\"(.+?)\"',text)
  # matches is now ['String 1', 'String 2', 'String3']
  return ",".join(matches)

doit('Regex should return "String 1" or "String 2" or "String3" ')
# result:
'String 1,String 2,String3'
</snippet></ROW><ROW><id>9519934</id><snippet>.+?</snippet></ROW><ROW><id>9519934</id><snippet>.+</snippet></ROW><ROW><id>9519934</id><snippet>.+</snippet></ROW><ROW><id>9519934</id><snippet>1" or "String 2" or "String 3</snippet></ROW><ROW><id>9519934</id><snippet>.+?</snippet></ROW><ROW><id>9519934</id><snippet>.+</snippet></ROW><ROW><id>9519934</id><snippet>.*</snippet></ROW><ROW><id>9520411</id><snippet>setup.py</snippet></ROW><ROW><id>9520411</id><snippet>setup.py</snippet></ROW><ROW><id>9520626</id><snippet>google_appengine</snippet></ROW><ROW><id>9520626</id><snippet>C:\Program Files\Google\google_appengine\</snippet></ROW><ROW><id>9520626</id><snippet>C:\Program Files\Google\google_appengine\lib\</snippet></ROW><ROW><id>9520819</id><snippet>0x1a</snippet></ROW><ROW><id>9520819</id><snippet>f = open(filename, 'rb')
</snippet></ROW><ROW><id>9520819</id><snippet>lines = f.read().split('\r\n')  # assuming Windows line endings
</snippet></ROW><ROW><id>9520937</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>9520937</id><snippet>.bashrc</snippet></ROW><ROW><id>9520937</id><snippet>.profile</snippet></ROW><ROW><id>9520937</id><snippet>export WORKON_HOME=$HOME/.virtualenvs 
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh
</snippet></ROW><ROW><id>9520937</id><snippet>source ~/.bashrc</snippet></ROW><ROW><id>9521162</id><snippet>python</snippet></ROW><ROW><id>9521162</id><snippet>which</snippet></ROW><ROW><id>9521162</id><snippet>proc = subprocess.Popen(['/usr/bin/python', 'test3.py'], stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>9521322</id><snippet>/Developer/usr/bin</snippet></ROW><ROW><id>9521322</id><snippet>$ cat ~/.bash_devenv

ARCHFLAGS="-isysroot /Developer/SDKs/MacOSX10.7.sdk -mmacosx-version-min=10.7"
LDFLAGS="-L/Developer/SDKs/MacOSX10.7.sdk/usr/lib -L/usr/lib"
CFLAGS="-I/Developer/SDKs/MacOSX10.7.sdk/usr/include -I/usr/include -O2 -pipe -fomit-frame-pointer"
CPPFLAGS="-I/usr/include/ -I/Developer/SDKs/MacOSX10.7.sdk/usr/include"
LD_LIBRARY_PATH="/Developer/SDKs/MacOSX10.7.sdk/usr/lib/gcc/i686-apple-darwin11/4.2.1/x86_64/:$LD_LIBRARY_PATH"

case $1 in
    32)
        export LDFLAGS="-arch i386 -arch x86_64 $LDFLAGS"
        export FFLAGS="-m i386 -m x86_64"
        export CFLAGS="-arch i386 -arch x86_64 $CFLAGS"
        export CPPFLAGS="-arch i386 -arch x86_64 $CPPFLAGS"
        export LD_LIBRARY_PATH="/Developer/SDKs/MacOSX10.7.sdk/usr/lib/gcc/i686-apple-darwin11/4.2.1/:$LD_LIBRARY_PATH"
    ;;
    64)
        export LDFLAGS="-arch x86_64 $LDFLAGS"
        export FFLAGS="-m x86_64"
        export CFLAGS="-arch x86_64 $CFLAGS"
        export CPPFLAGS="$CPPFLAGS"
        export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/Developer/SDKs/MacOSX10.7.sdk/usr/lib/gcc/i686-apple-darwin11/4.2.1/"
    ;;
    *)
        export LDFLAGS="$LDFLAGS"
        export FFLAGS="-m x86_64"
        export CFLAGS="-L/Developer/SDKs/MacOSX10.7.sdk/usr/lib -L/usr/lib -arch x86_64 $CFLAGS"
        export CPPFLAGS="$CPPFLAGS"
        export LD_LIBRARY_PATH="/usr/lib:/Developer/SDKs/MacOSX10.7.sdk/usr/lib:$LD_LIBRARY_PATH"
    ;;
esac    

### GLOBALS ###

export PATH="/Developer/usr/bin:/Developer/usr/local/bin:$PATH"
</snippet></ROW><ROW><id>9521322</id><snippet>source ~/.bash_devenv</snippet></ROW><ROW><id>9521322</id><snippet>CPPFLAGS+=" -I/usr/local/include"</snippet></ROW><ROW><id>9521657</id><snippet>python -c 'import sysconfig, pprint; pprint.pprint(sysconfig.get_config_vars())'
</snippet></ROW><ROW><id>9521781</id><snippet># lines = lines parsed out of file
line_store = {}
for line in lines:
    tokens = line.split('\t')
    if len(tokens) in line_store:
        line_store[len(tokens)].append(line)
    else:
        line_store[len(tokens)] = [line]
most = []
for line_group in line_store.values():
    if len(line_group) &gt; len(most):
        most = line_group
</snippet></ROW><ROW><id>9521781</id><snippet>most</snippet></ROW><ROW><id>9521781</id><snippet># lines = lines parsed out of file
tokens_in_last_line = len(lines[-1].split('\t'))
lines_with_correct_number_of_tokens = []
for line in lines[:-2]:
    if len(line.split('\t')) == tokens_in_last_line
        lines_with_correct_number_of_tokens.append(line)
lines_with_correct_number_of_tokens.append(lines[-1])
</snippet></ROW><ROW><id>9521925</id><snippet>import socket
import struct

username = "username_value"
verification_key = "verification_key"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # boilerplate
s.connect(("example.com", 1234))  # adjust accordingly

# now for the packet
# note that the String type is specified as having a length of 64, we'll pad that

packet = ""

packet += struct.pack("B", 1)  # packet type
packet += struct.pack("B", 7)  # protocol version
packet += "%-64s" % username  # magic!
packet += "%-64s" % verification_key
packet += struct.pack("B", 0)  # that unused byte, assuming a NULL byte here

# send what we've crafted
s.send(packet)
</snippet></ROW><ROW><id>9521925</id><snippet>print "%s" % 5
</snippet></ROW><ROW><id>9521925</id><snippet>print "%10s" % 5
</snippet></ROW><ROW><id>9521925</id><snippet>-</snippet></ROW><ROW><id>9521925</id><snippet>print "%-10s" % s, "&lt;this will be 9 spaces away from the '5'&gt;"
</snippet></ROW><ROW><id>9522339</id><snippet>serverSocketLock</snippet></ROW><ROW><id>9522339</id><snippet>listenToClient</snippet></ROW><ROW><id>9522339</id><snippet>def listenToClient(self, c):
    while self.server_running:
        try:
            recvd_data = c.client.recv(self.size)
            print "received:", c, recvd_data
            if recvd_data == "" or recvd_data == "close\n":
                print "Client " + str(c.address) + (" disconnected...")
                return

            print recvd_data

        except socket.error, (value, message):
            if value == 35:
                continue 
            else:
                print "Error:", value, message  
</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>int()</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>"15"</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>15</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>12.059</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>12</snippet></ROW><ROW><id>9522600</id><snippet>float()</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>"10.5"</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>10.5</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>12</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>12.0</snippet></ROW><ROW><id>9522600</id><snippet>price</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>int()</snippet></ROW><ROW><id>9522600</id><snippet>price = int(float(input())
</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>"0.6"</snippet></ROW><ROW><id>9522600</id><snippet>price</snippet></ROW><ROW><id>9522600</id><snippet>0</snippet></ROW><ROW><id>9522600</id><snippet>round()</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>price = int(round(float(input()))
</snippet></ROW><ROW><id>9522600</id><snippet>int</snippet></ROW><ROW><id>9522600</id><snippet>float</snippet></ROW><ROW><id>9522600</id><snippet>2</snippet></ROW><ROW><id>9522600</id><snippet>price = round(float(input()),2)
</snippet></ROW><ROW><id>9522600</id><snippet>decimal</snippet></ROW><ROW><id>9522660</id><snippet>getattr(myobj, 'str')</snippet></ROW><ROW><id>9522660</id><snippet>import __builtin__
my_str = getattr(__builtin__, "str")
</snippet></ROW><ROW><id>9522660</id><snippet>import builtins</snippet></ROW><ROW><id>9522848</id><snippet>abc</snippet></ROW><ROW><id>9522848</id><snippet>cba</snippet></ROW><ROW><id>9522848</id><snippet>bca</snippet></ROW><ROW><id>9522848</id><snippet>abcd</snippet></ROW><ROW><id>9522848</id><snippet>abcc</snippet></ROW><ROW><id>9522848</id><snippet>from collections import defaultdict

def make_letter_dict(word):
  letters = defaultdict(int)
  for c in word:
    letters[c] += 1

letters = make_letter_dict(raw_input("Letters: "))
words = (w for w in wordlist if make_letter_dict(w) == letters)
</snippet></ROW><ROW><id>9523030</id><snippet>#!/usr/bin/env python
import os
import time

while True:
  os.system('echo " foo" &gt;&gt; /Users/bob/foostore.txt')
  time.sleep(1)
</snippet></ROW><ROW><id>9523030</id><snippet>~/Library/LaunchAgents/com.bobbob.osx.test.plist</snippet></ROW><ROW><id>9523030</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC -//Apple Computer//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.dtd &gt;
&lt;plist version="1.0"&gt;
  &lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.bobbob.osx.test&lt;/string&gt;
    &lt;key&gt;Program&lt;/key&gt;
    &lt;string&gt;/Users/bob/pyfoo.py&lt;/string&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
  &lt;/dict&gt;
&lt;/plist&gt;
</snippet></ROW><ROW><id>9523030</id><snippet>launchctl</snippet></ROW><ROW><id>9523030</id><snippet>launchctl load ~/Library/LaunchAgents/com.bobbob.osx.test.plist
</snippet></ROW><ROW><id>9523030</id><snippet>&lt;string&gt;</snippet></ROW><ROW><id>9523030</id><snippet>&lt;key&gt;Program&lt;/key&gt;</snippet></ROW><ROW><id>9523030</id><snippet>&lt;ProgramArguments&gt;</snippet></ROW><ROW><id>9523030</id><snippet>&lt;string&gt;</snippet></ROW><ROW><id>9523030</id><snippet>launchctl</snippet></ROW><ROW><id>9523030</id><snippet>launchctl unload ~/Library/LaunchAgents/com.bobbob.osx.test.plist
</snippet></ROW><ROW><id>9523611</id><snippet>os.urandom</snippet></ROW><ROW><id>9523611</id><snippet>random.shuffle</snippet></ROW><ROW><id>9523752</id><snippet>emails = []
for participant in participants:
    emails.append(participant.email)
</snippet></ROW><ROW><id>9523752</id><snippet>emails = [p.email for p in participants]
</snippet></ROW><ROW><id>9523810</id><snippet>previous_managers = dict()
for line in csv:
    name = line.name
    project = line.project
    manager = line .manager

    if project == 'SICK':
        manager = previous_managers[person] or 'NULL'
    else:
        previous_managers[person] = manager

    write(name, project, manager)
</snippet></ROW><ROW><id>9523833</id><snippet>from django.db.models import Count
Article.objects.annotate(num_comments=Count('comment')).filter(num_comments__gt=10)
</snippet></ROW><ROW><id>9523891</id><snippet>counter</snippet></ROW><ROW><id>9523891</id><snippet>counter</snippet></ROW><ROW><id>9523891</id><snippet>__init__</snippet></ROW><ROW><id>9523891</id><snippet>functools.partial</snippet></ROW><ROW><id>9523891</id><snippet>class foo(object):
    ...
    def bar(self, _counter=[0]):
        _counter[0] += 1
        return _counter[0]
</snippet></ROW><ROW><id>9523891</id><snippet>class MutableDefault(object):
    def __init__(self, start=0):
        self.value = start
    def __iadd__(self, other):
        self.value += other
        return self
    def value(self):
        return self.value
</snippet></ROW><ROW><id>9523891</id><snippet>class foo(object):
    def bar(self, _counter=MutableDefault()):
        _counter += 1
        return _counter.value
</snippet></ROW><ROW><id>9523891</id><snippet>from functools import partial

class foo(object):
    def __init__(self):
        def bar(self, _counter=MutableDefault(1)):   # create new 'bar' each time
            value = _counter.value
            _counter += 1
            return value
        self.bar = partial(bar, self)
</snippet></ROW><ROW><id>9523891</id><snippet>counter</snippet></ROW><ROW><id>9523891</id><snippet>counter</snippet></ROW><ROW><id>9523891</id><snippet>bar</snippet></ROW><ROW><id>9523891</id><snippet>bar</snippet></ROW><ROW><id>9523891</id><snippet>foo</snippet></ROW><ROW><id>9523891</id><snippet>class foo(object):
    def __init__(self):
        self.bar_counter = 0
    def bar(self):
        self.bar_counter += 1
        return self.bar_counter
</snippet></ROW><ROW><id>9523982</id><snippet>winner = int(value)
</snippet></ROW><ROW><id>9523982</id><snippet>"1"</snippet></ROW><ROW><id>9523982</id><snippet>1</snippet></ROW><ROW><id>9523982</id><snippet>for key, value in sorted(match.iteritems(), reverse=True):
    #...
</snippet></ROW><ROW><id>9523982</id><snippet>{"matches":[
     {"player1":"0","player2":"2","winner":"0"},
     {"player1":"1","player2":"3","winner":"3"},
</snippet></ROW><ROW><id>9523982</id><snippet>winner = value
</snippet></ROW><ROW><id>9523982</id><snippet>winnerName = jsonData['players'][winner].get('name')
</snippet></ROW><ROW><id>9523982</id><snippet>TypeError: list indices must be integers, not unicode
</snippet></ROW><ROW><id>9523982</id><snippet>x = list["4"]
</snippet></ROW><ROW><id>9523982</id><snippet>x = list[4]
</snippet></ROW><ROW><id>9524070</id><snippet>dt += 1
</snippet></ROW><ROW><id>9524070</id><snippet>dt</snippet></ROW><ROW><id>9524070</id><snippet>t += dt
</snippet></ROW><ROW><id>9524070</id><snippet>dt += 1</snippet></ROW><ROW><id>9524105</id><snippet>outlist=[]
added_keys = set()

for row in parsed_in:
    # We use tuples because they are hashable
    lookup = tuple(row[:3])    
    if lookup not in added_keys:
        outlist.append(row)
        added_keys.add(lookup)
</snippet></ROW><ROW><id>9524419</id><snippet>import shlex
if 'win' in system:
    safe_arg='"%s"'%foo
    assert len(shlex.split(safe_arg)) == 1, "Injection attempt detected"
    cmd = 'echo %s | CLIP' % (safe_arg,)
</snippet></ROW><ROW><id>9524419</id><snippet>foo = str(foo.strip('"').strip())
safe_arg = '"%s"'%foo
if '"' in foo:
    if (len(shlex.split(safe_arg, False, False)) != 1): ...
</snippet></ROW><ROW><id>9524570</id><snippet>Egov_ch-v2-0.xsd</snippet></ROW><ROW><id>9524570</id><snippet>&lt;xs:any namespace="##any" minOccurs="0"/&gt;</snippet></ROW><ROW><id>9524570</id><snippet>xsd:any</snippet></ROW><ROW><id>9524570</id><snippet>processContents</snippet></ROW><ROW><id>9524570</id><snippet>strict</snippet></ROW><ROW><id>9524570</id><snippet>Egov_ch-v2-0.xsd</snippet></ROW><ROW><id>9524570</id><snippet>CompanyIncorporation-v1-2.xsd</snippet></ROW><ROW><id>9524570</id><snippet>CompanyIncorporation</snippet></ROW><ROW><id>9524570</id><snippet>xsd:import</snippet></ROW><ROW><id>9524570</id><snippet>Egov_ch-v2-0.xsd</snippet></ROW><ROW><id>9524570</id><snippet>xsd = lxml.etree.parse('http://xmlgw.companieshouse.gov.uk/v2-1/schema/Egov_ch-v2-0.xsd')
newimport = lxml.etree.Element('{http://www.w3.org/2001/XMLSchema}import',
    namespace="http://xmlgw.companieshouse.gov.uk",
    schemaLocation="http://xmlgw.companieshouse.gov.uk/v1-1/schema/forms/CompanyIncorporation-v1-2.xsd")
xsd.getroot().append(newimport)

validator = lxml.etree.XMLSchema(xsd)
</snippet></ROW><ROW><id>9524570</id><snippet>xsd:import</snippet></ROW><ROW><id>9524570</id><snippet>namespace</snippet></ROW><ROW><id>9524570</id><snippet>schemaLocation</snippet></ROW><ROW><id>9524570</id><snippet>targetNamespace</snippet></ROW><ROW><id>9524766</id><snippet>source_urls</snippet></ROW><ROW><id>9524766</id><snippet>"[u'http://www.google.com', u'http://www.yahoo.com', u'http://www.facebook.com']"
</snippet></ROW><ROW><id>9524766</id><snippet>import ast
urls = ast.literal_eval(source_urls)
</snippet></ROW><ROW><id>9524841</id><snippet>pyd_function(num.asarray(arr).astype('float64'))
</snippet></ROW><ROW><id>9524841</id><snippet>a=num.asarray(arr).astype('float64')
pyd_function(a)
</snippet></ROW><ROW><id>9524866</id><snippet>class Course(models.Model):
    # auto_now_add for convenience when testing
    start_date = models.DateTimeField(auto_now_add=True)
</snippet></ROW><ROW><id>9524866</id><snippet>&gt;&gt;&gt; c = Course.objects.create()
</snippet></ROW><ROW><id>9524866</id><snippet>&gt;&gt;&gt; mydict = {}
</snippet></ROW><ROW><id>9524866</id><snippet>start_date</snippet></ROW><ROW><id>9524866</id><snippet>&gt;&gt;&gt; mydict['date'] = c.start_date
</snippet></ROW><ROW><id>9524866</id><snippet>datetime</snippet></ROW><ROW><id>9524866</id><snippet>&gt;&gt;&gt; mydict['date']
datetime.datetime(2012, 3, 1, 16, 55, 49, 723208)
</snippet></ROW><ROW><id>9524866</id><snippet>datetime</snippet></ROW><ROW><id>9524866</id><snippet>&gt;&gt;&gt; datetime.datetime.today() &gt; mydict['date']
True
</snippet></ROW><ROW><id>9525055</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>9525055</id><snippet>f = attrgetter('date.month')</snippet></ROW><ROW><id>9525055</id><snippet>f(b)</snippet></ROW><ROW><id>9525055</id><snippet>b.date.month</snippet></ROW><ROW><id>9525055</id><snippet>def get_nested_attr(vars_dict, attrs):
    inst = vars_dict[attrs[0]]
    return operator.attrgetter('.'.join(attrs[1:]))(inst)

def set_nested_attr(vars_dict, attrs, value):
    setattr(get_nested_attr(vars_dict, attrs[0:-1]), attrs[-1], value)
</snippet></ROW><ROW><id>9525055</id><snippet>import operator

class MyNestedClass(object):
    def __init__(self):
        self.att1 = 5.

class MyClass(object):
    def __init__(self):
        self.my_nested_inst = MyNestedClass()

def get_nested_attr(vars_dict, attrs):
    inst = vars_dict[attrs[0]]
    return operator.attrgetter('.'.join(attrs[1:]))(inst)

def set_nested_attr(vars_dict, attrs, value):
    setattr(get_nested_attr(vars_dict, attrs[0:-1]), attrs[-1], value)


my_inst = MyClass()
my_list = ['my_inst','my_nested_inst','att1']

assert(my_inst.my_nested_inst.att1 == 5.)
set_nested_attr(vars(), my_list, 10.)
assert(my_inst.my_nested_inst.att1 == 10.)
</snippet></ROW><ROW><id>9525108</id><snippet>def drawCircles(MasterList,buildlist):
master = Tk()
w = Canvas(master, width=1000, height=1000)
w.config(bg='white')
coordsMain = MasterList[6:]
textMain = MasterList[0:2]
w.pack()
w.create_oval(*coordsMain, width=3, fill = "ivory3")
masterLabel = "Source PUID\n" + str(MasterList[3]) + "\nFiles = " + str(MasterList[4])
w.create_text(*textMain, text=masterLabel, justify = "center", font=("Helvetica", 16))
for i in buildlist:
 coordsSet = i[6:10]
 w.create_oval(*coordsSet, width=3, fill = i[5])
 set_label = i[3] + "\n" + str(i[4]) + "%"
 l=w.create_text(4,4, text=set_label, justify = "center", fill="white", font=("Helvetica", 16))
 a,b,c,d= (w.bbox(l))
 bboxArea =(c-a)*(d-b)   
 a,b,c,d = i[6:10]
 circleArea = (c-a)*(d-b)
 if bboxArea&gt;circleArea:
  textSet = i[10:]
  j=w.create_text(*textSet, text=set_label, justify = "center", font=("Helvetica", 16))
  r=w.create_rectangle(w.bbox(j),fill="white", width=0)
 else:
  textSet = i[:2]
  j=w.create_text(*textSet, text=set_label, justify = "center", font=("Helvetica", 16))
  r=w.create_rectangle(w.bbox(j),fill=i[5], width=0) 
 w.tag_lower(r,j)
 PUID = str(MasterList[3])
 PUID = PUID.replace('/', '-')
 filename = "\images\\" + PUID + ".PS"
 w.update()
mainloop()
</snippet></ROW><ROW><id>9525447</id><snippet>5 * iCount</snippet></ROW><ROW><id>9525447</id><snippet>Dim sqln As UInt64 = 13173942528351756918UL
Dim sqlid as string = ""
Dim alphabet as String = "0123456789abcdfghjkmnpqrstuvwxyz"
For iCount As Integer = 0 To 12
  sqlid = alphabet((sqln &gt;&gt; (iCount * 5)) Mod 32) + sqlid
Next iCount
Console.WriteLine(sqlid)
</snippet></ROW><ROW><id>9525447</id><snippet>bdntyxtax2smq
</snippet></ROW><ROW><id>9525517</id><snippet>&gt;&gt;&gt; s = "Tuple: " + str(tup)
&gt;&gt;&gt; s
"Tuple: (2, 'a', 5)"
</snippet></ROW><ROW><id>9525572</id><snippet>&lt;link rel="stylesheet" type="text/css" href="static/prettify.css" /&gt;
</snippet></ROW><ROW><id>9525572</id><snippet>http://192.168.1.3/temp/</snippet></ROW><ROW><id>9525572</id><snippet>http://192.168.1.3/temp/static/prettify.css</snippet></ROW><ROW><id>9525572</id><snippet>http://192.168.1.3/temp</snippet></ROW><ROW><id>9525572</id><snippet>http://192.168.1.3/static/prettify.css</snippet></ROW><ROW><id>9525572</id><snippet>temp</snippet></ROW><ROW><id>9525572</id><snippet>/article/some-name</snippet></ROW><ROW><id>9525572</id><snippet>/view/content/566</snippet></ROW><ROW><id>9525572</id><snippet>/</snippet></ROW><ROW><id>9525572</id><snippet>/temp/static/prettify.css</snippet></ROW><ROW><id>9525572</id><snippet>myapp.example.com/</snippet></ROW><ROW><id>9525572</id><snippet>example.com/myapp/</snippet></ROW><ROW><id>9525572</id><snippet>template.tpl</snippet></ROW><ROW><id>9525572</id><snippet>get_url</snippet></ROW><ROW><id>9525572</id><snippet>&lt;link rel="stylesheet" type="text/css" 
      href="{{ get_url('static', filename='prettify.css') }}" /&gt;
</snippet></ROW><ROW><id>9525572</id><snippet>routes.py</snippet></ROW><ROW><id>9525572</id><snippet>get_url</snippet></ROW><ROW><id>9525572</id><snippet>from bottle import Bottle, run, route, static_file, view, template, 
                   post, request, get_url
</snippet></ROW><ROW><id>9525572</id><snippet>get_url</snippet></ROW><ROW><id>9525572</id><snippet>@app.route('/static/&lt;filename&gt;', name='static')
def server_static(filename):
    return static_file(filename, root='static')
</snippet></ROW><ROW><id>9525572</id><snippet>get_url</snippet></ROW><ROW><id>9525572</id><snippet>@app.route('/') 
def index(): 
    return template('template', text='This is index page!', get_url=get_url)
</snippet></ROW><ROW><id>9525572</id><snippet>get_url</snippet></ROW><ROW><id>9525572</id><snippet>index.py</snippet></ROW><ROW><id>9525572</id><snippet>from Bottle import SimpleTemplate
SimpleTemplate.defaults["get_url"] = app.get_url
</snippet></ROW><ROW><id>9525644</id><snippet>if cond_1 and not cond_2:
    do something 
elif cond_1 and cond_2:
    do something else 
elif not cond_1 and cond_2:
    do this 
</snippet></ROW><ROW><id>9525644</id><snippet>if cond_1:
    if cond_2:
        Do something
    else:
        Do something 
else:
    if cond_2:
        Do something
    else:
        Do something 
</snippet></ROW><ROW><id>9525644</id><snippet>def __init__(self):
    self.actions = {
      (False, False): action_1,
      (False, True ): action_2,
      ...
    }

def action_1(self):
    some action

def action_2(self):
    some action

....
</snippet></ROW><ROW><id>9525644</id><snippet>self.actions[(cond_1, cond_2)]()
</snippet></ROW><ROW><id>9525655</id><snippet>#!/usr/bin/python
# coding: us-ascii

print "Hello World"    

# Local Variables:
# mode: python
# coding: us-ascii-unix
# End:
</snippet></ROW><ROW><id>9525703</id><snippet>re.split</snippet></ROW><ROW><id>9525770</id><snippet>s1</snippet></ROW><ROW><id>9525770</id><snippet>s2</snippet></ROW><ROW><id>9525770</id><snippet>s1 = "('element1', 'element2', 'element3')"
s2 = "(1A, 2A, 3A)"
</snippet></ROW><ROW><id>9525770</id><snippet>s1</snippet></ROW><ROW><id>9525770</id><snippet>s1 = s1.replace("'", "")
</snippet></ROW><ROW><id>9525770</id><snippet>A</snippet></ROW><ROW><id>9525770</id><snippet>s2</snippet></ROW><ROW><id>9525770</id><snippet>s2 = s2.replace("A", "")
</snippet></ROW><ROW><id>9525770</id><snippet>str.replace()</snippet></ROW><ROW><id>9526003</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>9526003</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>9526003</id><snippet>s = mydatetime.strftime('%m/%d/%Y %I:%M%p').lstrip("0").replace(" 0", " ")
</snippet></ROW><ROW><id>9526027</id><snippet>([A-Z][a-z]+(?=\s[A-Z])(?:\s[A-Z][a-z]+)+)
</snippet></ROW><ROW><id>9526027</id><snippet>(                # begin capture
  [A-Z]            # one uppercase letter  \ First Word
  [a-z]+           # 1+ lowercase letters  /
  (?=\s[A-Z])      # must have a space and uppercase letter following it
  (?:                # non-capturing group
    \s               # space
    [A-Z]            # uppercase letter   \ Additional Word(s)
    [a-z]+           # lowercase letter   /
  )+              # group can be repeated (more words)
)               #end capture
</snippet></ROW><ROW><id>9526259</id><snippet>{'first-name':lambda x: validate-str( x, 64 ), ...
</snippet></ROW><ROW><id>9526320</id><snippet>update</snippet></ROW><ROW><id>9526320</id><snippet>preview</snippet></ROW><ROW><id>9526320</id><snippet>def generate_diff(f, other parameters...):
    # ... Do computations ...
    # Whenever command "c" needs to be previewed/executed, do:
    f(c)
    # ... More computations...
</snippet></ROW><ROW><id>9526320</id><snippet>def _previewMode(command):
    print command

def _updateMode(command):
    exec(command)
</snippet></ROW><ROW><id>9526320</id><snippet>def preview(other parameters...):
    return generate_diff(_previewMode, other parameters...)

def update(other parameters...):
    return generate_diff(_updateMode, other parameters...)
</snippet></ROW><ROW><id>9526320</id><snippet>def _interactiveMode(command):
    if raw_input('Execute command ' + command + '?').lower() in ('yes', 'y'):
        print 'Command returned:', exec(command)

def interactive(other parameters...):
    return generate_diff(_interactiveMode, other parameters...)
</snippet></ROW><ROW><id>9526320</id><snippet>preview</snippet></ROW><ROW><id>9526320</id><snippet>update</snippet></ROW><ROW><id>9526320</id><snippet>update</snippet></ROW><ROW><id>9526320</id><snippet>preview</snippet></ROW><ROW><id>9526320</id><snippet>preview</snippet></ROW><ROW><id>9526320</id><snippet>update</snippet></ROW><ROW><id>9526320</id><snippet>def buildCommandList(other parameters...):
    commandList = []
    generate_diff(commandList.append, other parameters...)
    return commandList
</snippet></ROW><ROW><id>9526434</id><snippet>(?&lt;!\()\b([A-Z][a-z]+)\b(?!\))
</snippet></ROW><ROW><id>9526480</id><snippet>None</snippet></ROW><ROW><id>9526480</id><snippet>def func(items=None):
    if items is None:
        items = []
    print items
</snippet></ROW><ROW><id>9526665</id><snippet>ta.content_object = ta.tag.appliable_to
</snippet></ROW><ROW><id>9526665</id><snippet>ta.content_object = Company.objects.get(id=1).id
</snippet></ROW><ROW><id>9527074</id><snippet>import boto

rds = boto.connect_rds()
instances = rds.get_all_dbinstances()
instances[0].status
</snippet></ROW><ROW><id>9527140</id><snippet>&gt;&gt;&gt; class A:
    def x():
        pass
    def y():
        pass


&gt;&gt;&gt; globals().update(A.__dict__)
&gt;&gt;&gt; x
&lt;function x at 0x02AF1CB0&gt;
&gt;&gt;&gt; y
&lt;function y at 0x022D8230&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9527261</id><snippet>form.cleaned_data['autocomplete']</snippet></ROW><ROW><id>9527261</id><snippet>ModelForm</snippet></ROW><ROW><id>9527261</id><snippet>class CattestForm(forms.ModelForm):

    class Meta:
        model = Cattest
        fields = ('category', 'info', )
        widgets = {
            'category': selectable.AutoCompleteSelectWidget(CategoryLookup)
        }


def cattest(request):
    if request.method == 'POST':
        form = CattestForm(request.POST)
        if form.is_valid():
            cattest = form.save()
            # Always redirect after a POST
            return http.HttpResponseRedirect('/bsmain/login_customer')            
    else:
        initial = request.GET or None
        form = CattestForm(initial=initial)
    return render_to_response('bsmain/form.html', {'form': form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>9527450</id><snippet>&gt;&gt;&gt; def original():pass

&gt;&gt;&gt; classmethod(original).__func__ == original
True
&gt;&gt;&gt; staticmethod(original).__func__ == original
True
&gt;&gt;&gt; property(original).fget == original
True
</snippet></ROW><ROW><id>9527450</id><snippet>import decorator

def mydecorator(f, *d_args, **d_kwargs):
    if (isinstance(f, classmethod)):
        return classmethod(mydecorator(f.__func__))
    elif (isinstance(f, staticmethod)):
        return staticmethod(mydecorator(f.__func__))
    elif (isinstance(f, property)):
        return property(mydecorator(f.fget))
    else:
        return decorator.decorator(f)
</snippet></ROW><ROW><id>9527450</id><snippet>import decorator
def mydecorator(f, *d_args, **d_kwargs):
    if (isinstance(f, classmethod)):
        return classmethod(mydecorator(f.__get__(True).im_func))
    elif (isinstance(f, staticmethod)):
        return staticmethod(mydecorator(f.__get__(True)))
    elif (isinstance(f, property)):
        return property(mydecorator(f.fget))
    else:
        return decorator.decorator(f)
</snippet></ROW><ROW><id>9527450</id><snippet>True</snippet></ROW><ROW><id>9527450</id><snippet>f.__get__(True).im_func</snippet></ROW><ROW><id>9527450</id><snippet>None</snippet></ROW><ROW><id>9527525</id><snippet>print f.errors</snippet></ROW><ROW><id>9527525</id><snippet>&lt;ul class="errorlist"&gt;&lt;li&gt;done&lt;ul class="errorlist"&gt;&lt;li&gt;This field is required.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</snippet></ROW><ROW><id>9527525</id><snippet>'done':1</snippet></ROW><ROW><id>9527525</id><snippet>data</snippet></ROW><ROW><id>9527529</id><snippet>find_paws</snippet></ROW><ROW><id>9527529</id><snippet>import numpy as np
import scipy.ndimage as ndimage
import scipy.spatial as spatial
import scipy.misc as misc
import matplotlib.pyplot as plt
import matplotlib.patches as patches

class BBox(object):
    def __init__(self, x1, y1, x2, y2):
        '''
        (x1, y1) is the upper left corner,
        (x2, y2) is the lower right corner,
        with (0, 0) being in the upper left corner.
        '''
        if x1 &gt; x2: x1, x2 = x2, x1
        if y1 &gt; y2: y1, y2 = y2, y1
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
    def taxicab_diagonal(self):
        '''
        Return the taxicab distance from (x1,y1) to (x2,y2)
        '''
        return self.x2 - self.x1 + self.y2 - self.y1
    def overlaps(self, other):
        '''
        Return True iff self and other overlap.
        '''
        return not ((self.x1 &gt; other.x2)
                    or (self.x2 &lt; other.x1)
                    or (self.y1 &gt; other.y2)
                    or (self.y2 &lt; other.y1))
    def __eq__(self, other):
        return (self.x1 == other.x1
                and self.y1 == other.y1
                and self.x2 == other.x2
                and self.y2 == other.y2)

def find_paws(data, smooth_radius = 5, threshold = 0.0001):
    # http://stackoverflow.com/questions/4087919/how-can-i-improve-my-paw-detection
    """Detects and isolates contiguous regions in the input array"""
    # Blur the input data a bit so the paws have a continous footprint 
    data = ndimage.uniform_filter(data, smooth_radius)
    # Threshold the blurred data (this needs to be a bit &gt; 0 due to the blur)
    thresh = data &gt; threshold
    # Fill any interior holes in the paws to get cleaner regions...
    filled = ndimage.morphology.binary_fill_holes(thresh)
    # Label each contiguous paw
    coded_paws, num_paws = ndimage.label(filled)
    # Isolate the extent of each paw
    # find_objects returns a list of 2-tuples: (slice(...), slice(...))
    # which represents a rectangular box around the object
    data_slices = ndimage.find_objects(coded_paws)
    return data_slices

def slice_to_bbox(slices):
    for s in slices:
        dy, dx = s[:2]
        yield BBox(dx.start, dy.start, dx.stop+1, dy.stop+1)

def remove_overlaps(bboxes):
    '''
    Return a set of BBoxes which contain the given BBoxes.
    When two BBoxes overlap, replace both with the minimal BBox that contains both.
    '''
    # list upper left and lower right corners of the Bboxes
    corners = []

    # list upper left corners of the Bboxes
    ulcorners = []

    # dict mapping corners to Bboxes.
    bbox_map = {}

    for bbox in bboxes:
        ul = (bbox.x1, bbox.y1)
        lr = (bbox.x2, bbox.y2)
        bbox_map[ul] = bbox
        bbox_map[lr] = bbox
        ulcorners.append(ul)
        corners.append(ul)
        corners.append(lr)        

    # Use a KDTree so we can find corners that are nearby efficiently.
    tree = spatial.KDTree(corners)
    new_corners = []
    for corner in ulcorners:
        bbox = bbox_map[corner]
        # Find all points which are within a taxicab distance of corner
        indices = tree.query_ball_point(
            corner, bbox_map[corner].taxicab_diagonal(), p = 1)
        for near_corner in tree.data[indices]:
            near_bbox = bbox_map[tuple(near_corner)]
            if bbox != near_bbox and bbox.overlaps(near_bbox):
                # Expand both bboxes.
                # Since we mutate the bbox, all references to this bbox in
                # bbox_map are updated simultaneously.
                bbox.x1 = near_bbox.x1 = min(bbox.x1, near_bbox.x1)
                bbox.y1 = near_bbox.y1 = min(bbox.y1, near_bbox.y1) 
                bbox.x2 = near_bbox.x2 = max(bbox.x2, near_bbox.x2)
                bbox.y2 = near_bbox.y2 = max(bbox.y2, near_bbox.y2) 
    return set(bbox_map.values())

if __name__ == '__main__':
    fig = plt.figure()
    ax = fig.add_subplot(111)

    data = misc.imread('image.png')
    im = ax.imshow(data)    
    data_slices = find_paws(255-data, smooth_radius = 20, threshold = 22)

    bboxes = remove_overlaps(slice_to_bbox(data_slices))
    for bbox in bboxes:
        xwidth = bbox.x2 - bbox.x1
        ywidth = bbox.y2 - bbox.y1
        p = patches.Rectangle((bbox.x1, bbox.y1), xwidth, ywidth,
                              fc = 'none', ec = 'red')
        ax.add_patch(p)

    plt.show()
</snippet></ROW><ROW><id>9527563</id><snippet>echo=True</snippet></ROW><ROW><id>9527964</id><snippet>from google.appengine.ext.ndb import model

class User(model.Model):
   name = model.StringProperty()

users, cursor, more = User.query(User.name == "Jon").fetch_page(25)

if more: 
    # Do next page logic
    next_users = User.query(User.name == "Jon").fetch_page(25, start_cursor=cursor)
</snippet></ROW><ROW><id>9528020</id><snippet>&gt;&gt;&gt; for i in xrange(10):
...     '{0:04}'.format(i)
... 
'0000'
'0001'
'0002'
'0003'
'0004'
'0005'
'0006'
'0007'
'0008'
'0009'
</snippet></ROW><ROW><id>9528020</id><snippet>print "\n".join(['{0:04}'.format(num) for num in xrange(0, 10000)])
</snippet></ROW><ROW><id>9528298</id><snippet>for c in phrase:
  ascii_codes = ord(c) # find ascii codes for each charcter in phrase
  ascii_codes = ascii_codes + shift_value # add an integer (shift value) to ascii codes
  phrase_rest = chr(ascii_codes) # convert ascii codes back to characters
  encoded_phrase = encoded_phrase + phrase_rest # stores the phrase character in a new variable
</snippet></ROW><ROW><id>9528298</id><snippet>cypher = {'a': 'x', 'b': 'y', ... }
encoded = ''
for c in phrase:
  encoded += cypher[c]
</snippet></ROW><ROW><id>9528486</id><snippet>sys.float_info</snippet></ROW><ROW><id>9528486</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.float_info.epsilon
2.220446049250313e-16
</snippet></ROW><ROW><id>9528738</id><snippet>list()</snippet></ROW><ROW><id>9528738</id><snippet>class RobsNumbers(object):
    def __init__(self, numbers, min, max):
        self._numbers = numbers
        self._min = min
        self._max = max
        self._filters = []

    def bigger(self, x):
        new_obj = RobsNumbers(self._numbers, x, self._max)
        new_obj._filters = self._filters + [GreaterThanFilter(x)]
        return new_obj

    # Other filter methods simply add a filter to the _filters list of the object

    def __iter__(self):
        # Here is the complicated optimization logic to reorder and execute the filters
        pass
</snippet></ROW><ROW><id>9528738</id><snippet>RobsNumbers</snippet></ROW><ROW><id>9528769</id><snippet>SELECT * FROM mytable
WHERE (id, user_id, follow, active) IN (
    SELECT id, likeable, user_id, follow, active FROM mytable mt
    WHERE mt.user_id = mytable.user_id
    AND mt.user_id IN (1, 2)
    ORDER BY user_id LIMIT 5)
ORDER BY likeable
</snippet></ROW><ROW><id>9528850</id><snippet>import pylab
from pylab import *
import numpy as np

manXnames = np.array(range(0,120))
Ynames = (8.3333333333333331e-05)*manXnames + 0.01
Vt_X = manXnames
Vt_Y = (12.0/1000.0)*np.exp(-0.01*(120-manXnames))
Vterror = Ynames + randn(size(Ynames))

fig_base = pylab.figure()
fig1 = fig_base.add_subplot(111)
lns1 = fig1.plot(manXnames, Ynames, marker='s', color='g',label='Plain Line')
lns2 = fig1.plot(Vt_X, Vt_Y, marker='^', color='r',label='V_t')

# yticks on left
locs,labels = yticks()
pylab.yticks(locs, map(lambda x: "%g" % x, locs*1e3))

#axis labels
pylab.xlabel('Temperature (C)') 
pylab.ylabel('Emitter Voltage (mV)', labelpad=20)
pylab.xticks(rotation=45)

fig2 = fig1.twinx()
lns3 = fig2.plot(manXnames, Vterror, marker='o', linestyle='-',label='V_terror') 

# xticks
locs,labels = xticks()
pylab.xticks(locs, map(lambda x: "%g" % x, locs))

# yticks on right
locs,labels = yticks()
pylab.yticks(locs, map(lambda x: "%g" % x, locs))

#2nd axis labels    
pylab.ylabel('Percentage Error %', labelpad=20)

pylab.legend((lns1, lns2, lns3), ('Plain Line', 'V_t', 'V_t Error'))
pylab.show()
</snippet></ROW><ROW><id>9528961</id><snippet>&gt;&gt;&gt; g = ['1', '', '2', '', '3', '', '4', '']
&gt;&gt;&gt; g[::2]
['1', '2', '3', '4']
&gt;&gt;&gt; g[1::2]
['', '', '', '']
&gt;&gt;&gt; del g[1::2]  #  &lt;-- magic happens here.
&gt;&gt;&gt; g
['1', '2', '3', '4']
</snippet></ROW><ROW><id>9529005</id><snippet>{% include "foo/bar.html" %}
</snippet></ROW><ROW><id>9529005</id><snippet>{% include template_name %}
</snippet></ROW><ROW><id>9529145</id><snippet>from django.db.models import Count

School.objects.annotate(post_count=Count('userprofile__post'))
</snippet></ROW><ROW><id>9529145</id><snippet>SELECT "testapp_school"."id", "testapp_school"."name", COUNT("testapp_post"."id") AS "post_count" FROM "testapp_school" LEFT OUTER JOIN "testapp_userprofile" ON ("testapp_school"."id" = "testapp_userprofile"."school_id") LEFT OUTER JOIN "testapp_post" ON ("testapp_userprofile"."id" = "testapp_post"."profile_id") GROUP BY "testapp_school"."id", "testapp_school"."name", "testapp_school"."id", "testapp_school"."name" LIMIT 21;
</snippet></ROW><ROW><id>9529160</id><snippet>django-tables2</snippet></ROW><ROW><id>9529160</id><snippet>django.forms</snippet></ROW><ROW><id>9529195</id><snippet>&gt;&gt;&gt; L = [0, 0, 1, 3, 0, 3]
&gt;&gt;&gt; import collections
&gt;&gt;&gt; d = collections.defaultdict(list)
&gt;&gt;&gt; for index, item in enumerate(L):
...   d[item].append(index)
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {0: [0, 1, 4], 1: [2], 3: [3, 5]})
&gt;&gt;&gt; [d[i] for i in xrange(1 + max(d))]
[[0, 1, 4], [2], [], [3, 5]]
</snippet></ROW><ROW><id>9529415</id><snippet>inline =</snippet></ROW><ROW><id>9529415</id><snippet>inlines =</snippet></ROW><ROW><id>9529415</id><snippet>inlines =</snippet></ROW><ROW><id>9529514</id><snippet>determine_winner()</snippet></ROW><ROW><id>9529514</id><snippet>win</snippet></ROW><ROW><id>9529514</id><snippet>tie</snippet></ROW><ROW><id>9529514</id><snippet>lose</snippet></ROW><ROW><id>9529514</id><snippet>main()</snippet></ROW><ROW><id>9529514</id><snippet>win +=1</snippet></ROW><ROW><id>9529514</id><snippet>main()</snippet></ROW><ROW><id>9529514</id><snippet>win += 1</snippet></ROW><ROW><id>9529514</id><snippet>win</snippet></ROW><ROW><id>9529514</id><snippet>tie</snippet></ROW><ROW><id>9529514</id><snippet>lose</snippet></ROW><ROW><id>9529514</id><snippet>determine_winner()</snippet></ROW><ROW><id>9529514</id><snippet>def determine_winner(computer_choice, player_choice):
    #if its a tie, add 1 to tie variable and display message
    if computer_choice == player_choice:
        print("It's a tie!")
        return 0

    #if its a win, add to win variable and display message
    elif computer_choice == 'SCISSORS' and player_choice == 'ROCK':
        print('ROCK crushes SCISSORS! You win!')
        return 1
    elif computer_choice == 'PAPER' and player_choice == 'SCISSORS':
        print('SCISSORS cut PAPER! You win!')
        return 1
    elif computer_choice == 'ROCK' and player_choice == 'PAPER':
        print('PAPER covers ROCK! You win!')
        return 1

    #if it does not match any of the win criteria then add 1 to lose and
    #display lose message
    else:
        print('You lose!')
        return -1
</snippet></ROW><ROW><id>9529514</id><snippet>result = determine_winner(computer_choice, player_choice)
if result == -1:
    lose += 1
elif result == 0:
    tie += 1
else:
    win += 1
</snippet></ROW><ROW><id>9529566</id><snippet>replace()</snippet></ROW><ROW><id>9529566</id><snippet>&gt;&gt;&gt; s = "hello, world!"
&gt;&gt;&gt; s1 = s.replace("l", "k")
&gt;&gt;&gt; print s1
hekko, workd!
</snippet></ROW><ROW><id>9529584</id><snippet>&gt;&gt;&gt; strings = ["one two", "three four", "five six"]
&gt;&gt;&gt; [value for s in strings for value in s.split()]
['one', 'two', 'three', 'four', 'five', 'six']
</snippet></ROW><ROW><id>9529603</id><snippet>Ctrl-Z</snippet></ROW><ROW><id>9529603</id><snippet>Ctrl-C</snippet></ROW><ROW><id>9529615</id><snippet>item</snippet></ROW><ROW><id>9529615</id><snippet>filtered_list = [item for item in customers if 'S2' in item[1]]
for item in filtered_list:
    print('%s %s') % (item[1], item[0])
</snippet></ROW><ROW><id>9529650</id><snippet>for contact in participant.person.mailcontact_set.all():
</snippet></ROW><ROW><id>9529742</id><snippet>dlg = DlgQueryBuilder(self.db, self.iface)
</snippet></ROW><ROW><id>9529746</id><snippet>n</snippet></ROW><ROW><id>9529746</id><snippet>f(n)</snippet></ROW><ROW><id>9529746</id><snippet>f</snippet></ROW><ROW><id>9529746</id><snippet>f(1) &lt; k*log(1)                 for some constant k.

f(2) &lt; k*log(1) + k*log(2)      for some constant k

...

f(n) &lt; k * [log(1) + log(2) + ... + log(n)]   for some constant k.
</snippet></ROW><ROW><id>9529746</id><snippet>log(1) + ... + log(n)</snippet></ROW><ROW><id>9529746</id><snippet>f(n) &lt; k * [log(1*2*3*...*n)]     for some constant k

f(n) &lt; k * log(n!)                for some constant k
</snippet></ROW><ROW><id>9529746</id><snippet>log(n!)</snippet></ROW><ROW><id>9529746</id><snippet>for n in (5000, 50000, 500000):
    startTime = ...
    ## .. make a fresh tree
    ## insert n elements into the tree
    stopTime = ...
    ## record the tuple (n, stopTime - startTime) for plotting
</snippet></ROW><ROW><id>9529746</id><snippet>for n in range(50000):
    startTime = ...
    ## insert an element into the tree
    stopTime = ...
    ## record the tuple (n, stopTime - startTime) for plotting
</snippet></ROW><ROW><id>9529746</id><snippet>f(n)/n</snippet></ROW><ROW><id>9529746</id><snippet>log(n!)</snippet></ROW><ROW><id>9529746</id><snippet>n*log(n)</snippet></ROW><ROW><id>9529746</id><snippet>f(n) &lt; k * log(n!)                for some constant k
</snippet></ROW><ROW><id>9529746</id><snippet>f(n) &lt; k * n * log(n)             for some constant k
</snippet></ROW><ROW><id>9529746</id><snippet>f(n)</snippet></ROW><ROW><id>9529746</id><snippet>n</snippet></ROW><ROW><id>9530026</id><snippet>cdef numpy.ndarray[DTYPE_t, ndim=2, mode='c'] somearray
</snippet></ROW><ROW><id>9530234</id><snippet>&gt;&gt;&gt; class C(object):
...     def __init__(self, value):
...         self.value = value
...         
&gt;&gt;&gt; 
&gt;&gt;&gt; C(12) == C(12)
False
</snippet></ROW><ROW><id>9530234</id><snippet>__eq__()</snippet></ROW><ROW><id>9530234</id><snippet>__ne__()</snippet></ROW><ROW><id>9530234</id><snippet>&gt;&gt;&gt; class C(object):
...     # ...
...     def __eq__(self, other):
...         return self.value == other.value
...     def __ne__(self, other):
...         return not self == other  # More general than self.value != other.value
...     
&gt;&gt;&gt; C(12) == C(12)  # __eq__() is called
True
&gt;&gt;&gt; C(12) != C(12)  # __ne__() is called
False
</snippet></ROW><ROW><id>9530258</id><snippet>range()</snippet></ROW><ROW><id>9530258</id><snippet>for i in (10**x for x in range(1,6)):
</snippet></ROW><ROW><id>9530844</id><snippet>bzip2-devel</snippet></ROW><ROW><id>9530844</id><snippet>./configure</snippet></ROW><ROW><id>9530844</id><snippet>./configure --prefix=/home/deploy/.virtualenv/sentry
</snippet></ROW><ROW><id>9530844</id><snippet>make
make install
</snippet></ROW><ROW><id>9531074</id><snippet>&gt;&gt;&gt; r[u'b'] = r[u'b'].split(',')
&gt;&gt;&gt; r
    {u'a': 'john', u'c': 'give', u'b': ['ABA Design House ', ' Developing Minds Foundation ', ' Food Network South Beach Wine &amp; Food Festival']}
</snippet></ROW><ROW><id>9531074</id><snippet>&gt;&gt;&gt; r[u'b']=[x.strip() for x in r[u'b'].split(',')]
&gt;&gt;&gt; r
{u'a': 'john', u'c': 'give', u'b': ['ABA Design House', 'Developing Minds Foundation', 'Food Network South Beach Wine &amp; Food Festival']}
</snippet></ROW><ROW><id>9531173</id><snippet>def heat(number):
    return 12 if number == "r" else (24 if number == "b" else 0.0)
</snippet></ROW><ROW><id>9531173</id><snippet>def heat(number):
    m = { "r" : 12,
          "b" : 24 }

    return m[number] if number in m else 0.0
</snippet></ROW><ROW><id>9531189</id><snippet>p = '(?:http.*://)?(?P&lt;host&gt;[^:/ ]+).?(?P&lt;port&gt;[0-9]*).*'

m = re.search(p,'http://www.abc.com:123/test')
m.group('host') # 'www.abc.com'
m.group('port') # '123'
</snippet></ROW><ROW><id>9531189</id><snippet>m = re.search(p,'http://www.abc.com/test')
m.group('host') # 'www.abc.com'
m.group('port') # '' i.e. you'll have to treat this as '80'
</snippet></ROW><ROW><id>9531293</id><snippet>int(c)</snippet></ROW><ROW><id>9531293</id><snippet>c</snippet></ROW><ROW><id>9531293</id><snippet>c</snippet></ROW><ROW><id>9531293</id><snippet>    c = int(c)
</snippet></ROW><ROW><id>9531293</id><snippet>    f = open("txtfiles/c.txt", "r")
    c = float(f.read())
    ca = float(input("Enter Cash to Add: "))
    cn = c + ca
    print cn
</snippet></ROW><ROW><id>9531841</id><snippet>PATH</snippet></ROW><ROW><id>9531841</id><snippet>pygraphviz.test()</snippet></ROW><ROW><id>9531941</id><snippet>crawlprocess</snippet></ROW><ROW><id>9531941</id><snippet>from scrapy.crawler import CrawlerProcess
from scrapy.conf import settings


settings.overrides.update({}) # your settings

crawlerProcess = CrawlerProcess(settings)
crawlerProcess.install()
crawlerProcess.configure()

crawlerProcess.crawl(spider) # your spider here
</snippet></ROW><ROW><id>9532379</id><snippet>shell=True</snippet></ROW><ROW><id>9532379</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call('dir', shell=True)
0
</snippet></ROW><ROW><id>9532379</id><snippet>dir</snippet></ROW><ROW><id>9532379</id><snippet>&gt;&gt;&gt; subprocess.call('date', shell=True)
</snippet></ROW><ROW><id>9532379</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>9532379</id><snippet>type</snippet></ROW><ROW><id>9532379</id><snippet>info2.txt</snippet></ROW><ROW><id>9532379</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; path = r'd:\info2.txt'
&gt;&gt;&gt; output = subprocess.check_output(['type', path], shell=True)
&gt;&gt;&gt; print output
Vinu
</snippet></ROW><ROW><id>9532379</id><snippet>subprocess</snippet></ROW><ROW><id>9532410</id><snippet>threading</snippet></ROW><ROW><id>9532410</id><snippet>Thread</snippet></ROW><ROW><id>9532410</id><snippet>thread</snippet></ROW><ROW><id>9532410</id><snippet>join</snippet></ROW><ROW><id>9532410</id><snippet>import threading

class print_out(threading.Thread):

    def __init__ (self, m1, m2):
        threading.Thread.__init__(self)
        self.m1 = m1
        self.m2 = m2

    def run(self):
        print self.m1
        print self.m2
        print "\n"

threads = []
for num in range(0, 10):
    thread = print_out('a', 'b')
    thread.start()
    threads.append(thread)

for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>9532445</id><snippet>from django.conf import settings; print settings.APPEND_SLASH</snippet></ROW><ROW><id>9532445</id><snippet>url(r'foo' ...)</snippet></ROW><ROW><id>9532445</id><snippet>url(r'foo/' ...</snippet></ROW><ROW><id>9532445</id><snippet>url(r'foo/$' ...</snippet></ROW><ROW><id>9532445</id><snippet>MetaInfo.objects.exclude(url__endswith='/')</snippet></ROW><ROW><id>9532729</id><snippet>a = (1, 2, 3, 4, 5)
idxs = [0, 3, 4]
a1, b1, c1 = (a[i] for i in idxs)
</snippet></ROW><ROW><id>9532808</id><snippet>a = {'aaa': 1, 'bbb': 2, 'ccc': 3}
b = ['aaa', 'bbb', 'ddd', 'eee']
c = dict([(x, a.get(x, 0)) for x in a])

print "%(aaa)s %(bbb)s %(ccc)s" % c
</snippet></ROW><ROW><id>9532819</id><snippet>easy_install</snippet></ROW><ROW><id>9532819</id><snippet>% which easy_install
/usr/bin/easy_install
</snippet></ROW><ROW><id>9532819</id><snippet>easy_install</snippet></ROW><ROW><id>9532819</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>9532819</id><snippet>% head -n1 /usr/bin/easy_install
#! /usr/bin/python
</snippet></ROW><ROW><id>9532819</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>9532819</id><snippet>Homebrew</snippet></ROW><ROW><id>9532819</id><snippet>easy_install</snippet></ROW><ROW><id>9532819</id><snippet>Homebrew</snippet></ROW><ROW><id>9532870</id><snippet>python3-tk</snippet></ROW><ROW><id>9533747</id><snippet>activateWindow</snippet></ROW><ROW><id>9533747</id><snippet>raise</snippet></ROW><ROW><id>9533747</id><snippet>setFocus</snippet></ROW><ROW><id>9533747</id><snippet>raise</snippet></ROW><ROW><id>9533747</id><snippet>raise_</snippet></ROW><ROW><id>9534008</id><snippet>file_field</snippet></ROW><ROW><id>9534008</id><snippet>file_field</snippet></ROW><ROW><id>9534008</id><snippet>class MyAdminForm(forms.ModelForm):
    new_field = forms.FileField()
    # Rest of the form goes here
</snippet></ROW><ROW><id>9534152</id><snippet>message items {
    message require {
        optional bool require_sex = 1; //
        repeated int32 fate = 2 [packed = true];
    }
    optional int32 sub_type = 1;
    repeated int32 levels = 2 [packed = true];
    required require sub = 3;
}
</snippet></ROW><ROW><id>9534152</id><snippet>raw.sub.fate.append(1)
</snippet></ROW><ROW><id>9534240</id><snippet>collective.eggproxy</snippet></ROW><ROW><id>9534240</id><snippet>collective.eggproxy</snippet></ROW><ROW><id>9534240</id><snippet>easy_install</snippet></ROW><ROW><id>9534240</id><snippet>collective.eggproxy</snippet></ROW><ROW><id>9534240</id><snippet>easy_install</snippet></ROW><ROW><id>9534240</id><snippet>collective.eggproxy</snippet></ROW><ROW><id>9534354</id><snippet>from django.core.management import execute_manager
</snippet></ROW><ROW><id>9534354</id><snippet>ImportError: No module named django</snippet></ROW><ROW><id>9534354</id><snippet>__init__.py</snippet></ROW><ROW><id>9534354</id><snippet>/Users/cassiomelo/code/jython/Lib/site-packages/django/__init__.py</snippet></ROW><ROW><id>9534354</id><snippet>/Users/cassiomelo/code/jython/Lib/site-packages</snippet></ROW><ROW><id>9534354</id><snippet>__init__.py</snippet></ROW><ROW><id>9534359</id><snippet>python-tk</snippet></ROW><ROW><id>9534446</id><snippet>urllib2.urlopen(urllib2.Request(url))</snippet></ROW><ROW><id>9534446</id><snippet>         100792 function calls (98867 primitive calls) in 2.076 CPU seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
      512    0.719    0.001    0.719    0.001 {method 'recv' of '_socket.socket' objects}
        1    0.464    0.464    0.473    0.473 {_socket.getaddrinfo}
        1    0.352    0.352    0.352    0.352 &lt;string&gt;:1(connect)
        1    0.248    0.248    0.348    0.348 common_functions.py:1(&lt;module&gt;)
        1    0.022    0.022    0.075    0.075 __init__.py:2(&lt;module&gt;)
        1    0.017    0.017    0.030    0.030 urllib.py:1442(getproxies_macosx_sysconf)
   330/67    0.012    0.000    0.031    0.000 sre_parse.py:385(_parse)


real    0m2.255s
user    0m0.352s
sys 0m0.093s
</snippet></ROW><ROW><id>9534446</id><snippet>_socket.socket</snippet></ROW><ROW><id>9534446</id><snippet>_socket.getaddrinfo</snippet></ROW><ROW><id>9534564</id><snippet>:param ________</snippet></ROW><ROW><id>9534636</id><snippet>and</snippet></ROW><ROW><id>9534636</id><snippet>for</snippet></ROW><ROW><id>9534636</id><snippet>g_markerList = [ (marker1,marker2) for marker1 in marker1List
                                   for marker2 in marker2List
                                   if marker1.type == marker2.type ]
</snippet></ROW><ROW><id>9534644</id><snippet>sys.modules['path.to.module'].__file__</snippet></ROW><ROW><id>9534644</id><snippet>Python 2.7.2+ (default, Oct  4 2011, 20:06:09) 
[GCC 4.6.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import collections
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['collections'].__file__
'/usr/lib/python2.7/collections.pyc'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>9534653</id><snippet>a['nameofcolumn']</snippet></ROW><ROW><id>9534653</id><snippet>a['Julian_Day']</snippet></ROW><ROW><id>9534653</id><snippet>genfromtxt</snippet></ROW><ROW><id>9534653</id><snippet>dtype</snippet></ROW><ROW><id>9534653</id><snippet>names</snippet></ROW><ROW><id>9534653</id><snippet>skip_header</snippet></ROW><ROW><id>9534653</id><snippet>a2 = np.genfromtxt("input.txt", delimiter=',', skip_header=3, names = True, dtype = None,
                  usecols=[0, 1] + radii_indices, converters={0: date_conv, 1: time_conv})
</snippet></ROW><ROW><id>9534653</id><snippet>&gt;&gt;&gt; a2['Dateddmmyyyy']
array(['06/03/2006', '06/03/2006', '18/03/2006', '19/03/2006',
       '19/03/2006', '19/03/2006', '19/03/2006', '19/03/2006',
       '19/03/2006', '19/03/2006'], 
      dtype='|S10')
</snippet></ROW><ROW><id>9534822</id><snippet>7078 / 100000 = 0
</snippet></ROW><ROW><id>9534822</id><snippet>np.random.seed( seed )
</snippet></ROW><ROW><id>9534822</id><snippet>np.random.seed</snippet></ROW><ROW><id>9534822</id><snippet>2/5=0.4</snippet></ROW><ROW><id>9534822</id><snippet>2/5=0</snippet></ROW><ROW><id>9534822</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>9534822</id><snippet>np.random</snippet></ROW><ROW><id>9534822</id><snippet>random</snippet></ROW><ROW><id>9534847</id><snippet>not</snippet></ROW><ROW><id>9534847</id><snippet>while not is_int(1):
</snippet></ROW><ROW><id>9534847</id><snippet>is_int</snippet></ROW><ROW><id>9534927</id><snippet>for row in cursor.execute(selectQuery)
</snippet></ROW><ROW><id>9534960</id><snippet>class MyTest(unittest.TestCase):
    def setUp(self):
        self.stream = StringIO()
        self.handler = logging.StreamHandler(self.stream)
        self.log = logging.getLogger('mylogger')
        self.log.setLevel(logging.INFO)
        for handler in self.log.handlers: 
            self.log.removeHandler(handler)
        self.log.addHandler(self.handler)
    def testLog(self):
        self.log.info("test")
        self.handler.flush()
        print '[', self.stream.getvalue(), ']'
        self.assertTrue(self.stream.getvalue(), 'test')

    def tearDown(self):
        self.log.removeHandler(self.handler)
        self.handler.close()

if __name__=='__main__':
    unittest.main()
</snippet></ROW><ROW><id>9535307</id><snippet>&gt;&gt;&gt; def append():
...   l = []
...   for i in range(3):
...     l.append(str(i))
...   return l
...
&gt;&gt;&gt; l = append()
&gt;&gt;&gt; l
['0', '1', '2']
</snippet></ROW><ROW><id>9535307</id><snippet>&gt;&gt;&gt; def append(l):
...   for i in range(3):
...     l.append(str(i))
...
&gt;&gt;&gt; l = []
&gt;&gt;&gt; append(l)
&gt;&gt;&gt; l
['0', '1', '2']
</snippet></ROW><ROW><id>9535678</id><snippet>.*?</snippet></ROW><ROW><id>9535678</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"a.*?b","ab","acbacbacb")
'ababab'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>9535678</id><snippet>*</snippet></ROW><ROW><id>9535678</id><snippet>+</snippet></ROW><ROW><id>9535678</id><snippet>?</snippet></ROW><ROW><id>9535678</id><snippet>&lt;.*&gt;</snippet></ROW><ROW><id>9535678</id><snippet>'&lt;H1&gt;title&lt;/H1&gt;'</snippet></ROW><ROW><id>9535678</id><snippet>'&lt;H1&gt;'</snippet></ROW><ROW><id>9535678</id><snippet>?</snippet></ROW><ROW><id>9535678</id><snippet>.*?</snippet></ROW><ROW><id>9535678</id><snippet>'&lt;H1&gt;'</snippet></ROW><ROW><id>9535736</id><snippet>VARCHAR</snippet></ROW><ROW><id>9535736</id><snippet>VARBINARY</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.constants.FIELD_TYPE.VAR_STRING</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.constants.FLAG.BINARY</snippet></ROW><ROW><id>9535736</id><snippet>VARBINARY</snippet></ROW><ROW><id>9535736</id><snippet>*_bin</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.constants.FIELD_TYPE.VARCHAR</snippet></ROW><ROW><id>9535736</id><snippet>VARCHAR</snippet></ROW><ROW><id>9535736</id><snippet>FIELD_TYPE.VAR_STRING</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.converters.conversions</snippet></ROW><ROW><id>9535736</id><snippet>FLAG.BINARY</snippet></ROW><ROW><id>9535736</id><snippet>charset</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.connect</snippet></ROW><ROW><id>9535736</id><snippet>use_unicode=1</snippet></ROW><ROW><id>9535736</id><snippet>&gt;&gt;&gt; con = MySQLdb.connect(**params)
&gt;&gt;&gt; con.converter[FIELD_TYPE.VAR_STRING]
[(128, &lt;type 'str'&gt;), (None, &lt;function string_decoder at 0x01FFA130&gt;)]
&gt;&gt;&gt; con.converter[FIELD_TYPE.VAR_STRING] = [(None, con.string_decoder)]
&gt;&gt;&gt; c = con.cursor()
&gt;&gt;&gt; c.execute("SELECT %s COLLATE utf8_bin", u'м')
1L
&gt;&gt;&gt; c.fetchone()
(u'\u043c',)
</snippet></ROW><ROW><id>9535736</id><snippet>FIELD_TYPE.STRING</snippet></ROW><ROW><id>9535736</id><snippet>use_unicode=0</snippet></ROW><ROW><id>9535736</id><snippet>MySQLdb.connect</snippet></ROW><ROW><id>9536084</id><snippet>row_format ="{:&gt;15}" * (len(teams_list) + 1)
print row_format.format("", *teams_list)
for team, row in zip(teams_list, data):
    print row_format.format(team, *row)
</snippet></ROW><ROW><id>9536084</id><snippet>str.format()</snippet></ROW><ROW><id>9536185</id><snippet>Py_Initialize();    
</snippet></ROW><ROW><id>9536185</id><snippet>script = "f = open('file_for_this_thread','w')\n"   
         "print f.fileno()\n"
         "f.write('111')\n"                     
         "print f.fileno()\n"
</snippet></ROW><ROW><id>9536185</id><snippet>f</snippet></ROW><ROW><id>9536185</id><snippet>print f.fileno()</snippet></ROW><ROW><id>9536185</id><snippet>f</snippet></ROW><ROW><id>9536185</id><snippet>f</snippet></ROW><ROW><id>9536185</id><snippet>f</snippet></ROW><ROW><id>9536185</id><snippet>PyRun_SimpleString(
   "def myfunc(thread_no):\n"
   "    f = open('file_for_thread_%d' % thread_no,'w')\n"
   "    print f.fileno()\n"
   "    f.write('111')\n"               
   "    print f.fileno()\n"
 );
</snippet></ROW><ROW><id>9536185</id><snippet>PyRun_SimpleString(QString("myfunc(%d)\n",current_thread_no));
</snippet></ROW><ROW><id>9536185</id><snippet>f</snippet></ROW><ROW><id>9536240</id><snippet>&lt;input type="text" class="input-small" placeholder="{{ field.html_name }}"&gt;
</snippet></ROW><ROW><id>9536240</id><snippet>&lt;input type="text" class="input-small" placeholder="{{ field.html_name }}" name="{{ field.html_name }}"&gt;
</snippet></ROW><ROW><id>9536240</id><snippet>form.data['field_name']</snippet></ROW><ROW><id>9536240</id><snippet>__init__.py</snippet></ROW><ROW><id>9536240</id><snippet>from django import template

register = template.Library()

@register.filter
def get_field_value(field):
    return field.form.data.get(field.name, '')
</snippet></ROW><ROW><id>9536240</id><snippet>&lt;input type="text" class="input-small" placeholder="{{ field.html_name }}" name="{{ field.html_name }}" value="{{ field|get_field_value }}"&gt;
</snippet></ROW><ROW><id>9536240</id><snippet>{% load yourapp_tags %}</snippet></ROW><ROW><id>9536530</id><snippet> b = [[0.0]*len(a[0])]*len(a)
 # or in two steps
 x = [0.0] * len(a[0]) # one list
 b = [x] * len(a)      # lots of references to that same list 
</snippet></ROW><ROW><id>9536530</id><snippet># makes a new inner list for every m
b = [[0.0]*len(a[0]) for m in xrange(len(a))]
</snippet></ROW><ROW><id>9536586</id><snippet>bind_sockets</snippet></ROW><ROW><id>9536586</id><snippet>import tornado.httpserver
import tornado.ioloop
import tornado.netutil
import tornado.web

app = tornado.web.Application()
sockets = tornado.netutil.bind_sockets(0, '')
server = tornado.httpserver.HTTPServer(app)
server.add_sockets(sockets)

for s in sockets:
    print('Listening on %s, port %d' % s.getsockname()[:2])
tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>9536586</id><snippet>sockets</snippet></ROW><ROW><id>9536587</id><snippet>File "/usr/lib/python2.6/distutils/command/build_ext.py",
</snippet></ROW><ROW><id>9537551</id><snippet>connection_db</snippet></ROW><ROW><id>9537551</id><snippet>QtSql.QSqlDatabase.addDatabase("QSQLITE", "Base")</snippet></ROW><ROW><id>9537551</id><snippet>QSqlQuery</snippet></ROW><ROW><id>9537551</id><snippet>QSqlQuery</snippet></ROW><ROW><id>9537551</id><snippet>query = QtSql.QSqlQuery()</snippet></ROW><ROW><id>9537551</id><snippet>query = QtSql.QSqlQuery(db)</snippet></ROW><ROW><id>9537551</id><snippet>connection_db</snippet></ROW><ROW><id>9537551</id><snippet>QSqlQuery</snippet></ROW><ROW><id>9537766</id><snippet>ind = np.where(~np.isnan(a))[0]
first, last = ind[0], ind[-1]
a[:first] = a[first]
a[last + 1:] = a[last]
</snippet></ROW><ROW><id>9537766</id><snippet>numpy</snippet></ROW><ROW><id>9538087</id><snippet>result = oRS.GetRows(1)
</snippet></ROW><ROW><id>9538087</id><snippet>result = zip(*oRS.GetRows(1))
</snippet></ROW><ROW><id>9538336</id><snippet>a = [[1,2,3],[2,3,1],[3,2,1],[1,3,2]]
a.sort()
</snippet></ROW><ROW><id>9538336</id><snippet>[[1,2,3],[1,3,2],[2,3,1],[3,2,1]]
</snippet></ROW><ROW><id>9538336</id><snippet>sorted(a.tolist())[0]
</snippet></ROW><ROW><id>9538336</id><snippet>min(a.tolist())</snippet></ROW><ROW><id>9538785</id><snippet>def import_by_path(path):
  if '.' not in path:
    return __import__(path, globals(), locals())

  path, module = path.rsplit('.', 1)
  mod = __import__(path, globals(), locals(), [module])

  try:
    return getattr(mod, module)
  except AttributeError:
    raise ImportError, "Could not import %s" % path
</snippet></ROW><ROW><id>9538785</id><snippet>mod = import_by_name("itertools")
</snippet></ROW><ROW><id>9538785</id><snippet>for mod in map(import_by_name, imported):
  mod.run()
</snippet></ROW><ROW><id>9538936</id><snippet>((X*Y).mean(axis=1) - X.mean()*Y.mean(axis=1)) / ((X**2).mean() - (X.mean())**2)
</snippet></ROW><ROW><id>9539030</id><snippet>match = re.search(r'&lt;span class="dailyPrice"&gt;( d+.? d+)&lt;/span&gt;', html)
#                                              ^    ^
</snippet></ROW><ROW><id>9539030</id><snippet>d</snippet></ROW><ROW><id>9539030</id><snippet>d</snippet></ROW><ROW><id>9539030</id><snippet>\d</snippet></ROW><ROW><id>9539038</id><snippet>&gt;&gt;&gt; x = numpy.array([1.34684766e-05, 6.45989985e+02])
&gt;&gt;&gt; s = numpy.array(["col1", "col2"])
&gt;&gt;&gt; numpy.row_stack((x,s))
array([['1.346847', '645.9899'],
       ['col1', 'col2']], 
      dtype='|S8')
</snippet></ROW><ROW><id>9539038</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; t = numpy.array([[  5.16535888e-06,   4.38980952e+02],
... [  1.34684766e-05,   3.37237262e+02],
... [  7.95903202e-06,   6.45989985e+02],
... [  8.35716563e-06,   3.66632398e+02],
... [  9.39419622e-06,   7.14825200e+01]])
&gt;&gt;&gt; komponents = numpy.array([["col1", "col2"]])
&gt;&gt;&gt;
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; s = StringIO.StringIO()
&gt;&gt;&gt; numpy.savetxt(s, komponents, fmt="%s", delimiter="\t")
&gt;&gt;&gt; numpy.savetxt(s, x, delimiter="\t")
&gt;&gt;&gt; print s.getvalue()
col1    col2
5.165358879999999622e-06    4.389809520000000020e+02
1.346847660000000055e-05    3.372372619999999870e+02
7.959032020000000055e-06    6.459899850000000470e+02
8.357165630000000265e-06    3.666323980000000233e+02
9.394196219999999191e-06    7.148251999999999384e+01
</snippet></ROW><ROW><id>9539079</id><snippet>struct</snippet></ROW><ROW><id>9539079</id><snippet>inet_aton()</snippet></ROW><ROW><id>9539079</id><snippet>import struct, socket

# x.x.x.x string -&gt; integer
ip2int = lambda ipstr: struct.unpack('!I', socket.inet_aton(ipstr))[0]
print(ip2int("192.168.0.4"))
# -&gt; 3232235524
</snippet></ROW><ROW><id>9539079</id><snippet>int2ip = lambda n: socket.inet_ntoa(struct.pack('!I', n))
print(int2ip(3232235525))
# -&gt; '192.168.0.5'
</snippet></ROW><ROW><id>9539181</id><snippet>set_name()</snippet></ROW><ROW><id>9539181</id><snippet>def set_name(self, n):
    self.name = n
</snippet></ROW><ROW><id>9539181</id><snippet>this</snippet></ROW><ROW><id>9539181</id><snippet>name = n</snippet></ROW><ROW><id>9539181</id><snippet>name</snippet></ROW><ROW><id>9539181</id><snippet>self.name</snippet></ROW><ROW><id>9539181</id><snippet>set</snippet></ROW><ROW><id>9539181</id><snippet>get</snippet></ROW><ROW><id>9539181</id><snippet>__init__()</snippet></ROW><ROW><id>9539181</id><snippet>class Student:

    def __init__(self, name, id, address, cgpa):
        self.name    = name
        self.id      = id
        self.address = address
        self.cgpa    = cgpa

herman = Student("Herman Munster", 12345, "1313 Mockingbird Lane", 4.0)
</snippet></ROW><ROW><id>9539396</id><snippet>subprocess</snippet></ROW><ROW><id>9539396</id><snippet>/bin/sh</snippet></ROW><ROW><id>9539396</id><snippet>COMSPEC</snippet></ROW><ROW><id>9539396</id><snippet>shell=True</snippet></ROW><ROW><id>9539396</id><snippet>/bin/sh</snippet></ROW><ROW><id>9539396</id><snippet>cmd</snippet></ROW><ROW><id>9539396</id><snippet>command.bat</snippet></ROW><ROW><id>9539396</id><snippet>popen</snippet></ROW><ROW><id>9539396</id><snippet>shell=True</snippet></ROW><ROW><id>9539396</id><snippet>shell=True</snippet></ROW><ROW><id>9539396</id><snippet>&gt;&gt;&gt;
&gt;&gt;&gt; from subprocess import call
&gt;&gt;&gt; filename = input("What file would you like to display?\n")
What file would you like to display?
non_existent; rm -rf / #
&gt;&gt;&gt; call("cat " + filename, shell=True) # Uh-oh. This will end badly...
</snippet></ROW><ROW><id>9539396</id><snippet>shell=False</snippet></ROW><ROW><id>9539486</id><snippet>from django.core import management
management.call_command( ... )
</snippet></ROW><ROW><id>9539758</id><snippet>site-packages\py2exe\samples\extending</snippet></ROW><ROW><id>9539770</id><snippet>for i in range(1, len(my_list)+1):
    print i
</snippet></ROW><ROW><id>9539770</id><snippet>len(my_list)</snippet></ROW><ROW><id>9539770</id><snippet>for x in my_list:
    print x
</snippet></ROW><ROW><id>9539770</id><snippet>list</snippet></ROW><ROW><id>9539770</id><snippet>my_list</snippet></ROW><ROW><id>9539945</id><snippet>obj.some_function( '1', 2, '3', g="foo", h="bar" )</snippet></ROW><ROW><id>9540059</id><snippet>class NoResultsType(object): pass

NoResults = NoResultsType()

def give_me_data(self) 
    if self.detached_func.is_done():        # function completed and didnt die
        return [self.detached_func.output]
    else:                                   # something went wrong or function is still running
        return NoResults
</snippet></ROW><ROW><id>9540059</id><snippet>ret = foo.give_me_data()
if ret in [NoResultsYet, FunctionFailed]:
   # do something
</snippet></ROW><ROW><id>9540059</id><snippet>class Result(object):
    def __init__(self):
         self.finished = False
         self.success = False
         self.error = ""
         self.result = None

res = foo.give_me_data()
if res.success:
    print res.result
</snippet></ROW><ROW><id>9540280</id><snippet>var express = require('express');
var app = express.createServer();
var nowjs = require("now");
var everyone = nowjs.initialize(app);
app.use(express.bodyParser()); //If you want nice JSON parsing

app.post('/sendNotification', function(req, res){
  console.log(req.params) //Look at the POST params
  console.log(req.body) //Look at the POST body

  everyone.now.receiveMessage(req.body.dataYouCareAbout); 

  res.send('Notification Sent!');
});
</snippet></ROW><ROW><id>9540303</id><snippet>- url: /files/page
  static_dir: files/page
</snippet></ROW><ROW><id>9540425</id><snippet>capybara-webkit</snippet></ROW><ROW><id>9540430</id><snippet>cat $1 |cut -d "," -f 7 | sort | uniq -c
</snippet></ROW><ROW><id>9540430</id><snippet>| awk -F " *" '{print $3, $2}'
</snippet></ROW><ROW><id>9540554</id><snippet>dicts['zip code':row[0]]</snippet></ROW><ROW><id>9540554</id><snippet>some_list[2:5]</snippet></ROW><ROW><id>9540554</id><snippet>some_list</snippet></ROW><ROW><id>9540554</id><snippet>'zip code'</snippet></ROW><ROW><id>9540554</id><snippet>dicts = {}
</snippet></ROW><ROW><id>9540554</id><snippet>dicts</snippet></ROW><ROW><id>9540554</id><snippet>{}</snippet></ROW><ROW><id>9540554</id><snippet>     dicts[row[0]] = {'latitude': row[2], 'longitude': row[3]}
</snippet></ROW><ROW><id>9540554</id><snippet>     zip_code = row[0]
     dicts[zip_code] = {'zip code': zip_code, 'latitude': row[2], 'longitude': row[3]}
</snippet></ROW><ROW><id>9540554</id><snippet>dicts['91010']</snippet></ROW><ROW><id>9540554</id><snippet>&gt;&gt;&gt; print dicts['91010']['latitude']
'-34.12N'
</snippet></ROW><ROW><id>9541120</id><snippet>class B(A):
    pass
</snippet></ROW><ROW><id>9541189</id><snippet>db.mytable.myfield &gt; 'A'
</snippet></ROW><ROW><id>9541189</id><snippet>db.mytable.myfield</snippet></ROW><ROW><id>9541189</id><snippet>Field</snippet></ROW><ROW><id>9541189</id><snippet>Expression</snippet></ROW><ROW><id>9541189</id><snippet>Expression</snippet></ROW><ROW><id>9541189</id><snippet>==</snippet></ROW><ROW><id>9541189</id><snippet>&lt;</snippet></ROW><ROW><id>9541189</id><snippet>&gt;</snippet></ROW><ROW><id>9541189</id><snippet>Expression</snippet></ROW><ROW><id>9541189</id><snippet>Field</snippet></ROW><ROW><id>9541189</id><snippet>Query</snippet></ROW><ROW><id>9541189</id><snippet>&gt;</snippet></ROW><ROW><id>9541189</id><snippet>__gt__</snippet></ROW><ROW><id>9541236</id><snippet>  @view_config(context=Product, permission="view")
  def view_product(context, request):
      pass # would do stuff  
</snippet></ROW><ROW><id>9541236</id><snippet>/product/1
</snippet></ROW><ROW><id>9541236</id><snippet>  class ProductContainer(object):
      """
      container = ProductContainer()
      container[1]
      &gt;&gt;&gt; &lt;Product(1)&gt;
      """
      def __init__(self, request, name="product", parent=None):
          self.__name__ = name
          self.__parent__ = parent
          self._request = request

      def __getitem__(self, key):
          p = db.get_product(id=key)

          if not p:
              raise KeyError(key)
          else:
              p.__acl__ = [(Allow, Everyone,"view")]
              p.__name__ = key
              p.__parent__ = self
              return p
</snippet></ROW><ROW><id>9541236</id><snippet>  config = Configurator()
  config.add_route(name="product",
                   path="/product/*traverse",
                   factory=ProductContainer)
  config.scan()
  application = config.make_wsgi_app()
</snippet></ROW><ROW><id>9541236</id><snippet>  class RootFactory(object):
      def __init__(self, request):
          self._request = request
          self.__acl__ = [(Allow, Everyone, "view")]  # todo: add more acls


  @view_config(permission="view", route_name="orders")
  def view_product(context, request):
      order_id, product_id = request.matchdict["order_id"], request.matchdict["product_id"]
      pass # do what you need to with the input, the security check already happened

  config = Configurator(root_factory=RootFactory)

  config.add_route(name="orders",
                   path="/order/{order_id}/products/{product_id}")

  config.scan()
  application = config.make_wsgi_app()
</snippet></ROW><ROW><id>9541298</id><snippet>bottle</snippet></ROW><ROW><id>9541298</id><snippet>break-sentence.py</snippet></ROW><ROW><id>9541298</id><snippet>#!/usr/bin/env python
from bottle import request, route, run, view

@route('/', method=['GET', 'POST'])
@view('form_template')
def index():
    return dict(parts=request.forms.sentence.split(), # split on whitespace
                show_form=request.method=='GET') # show form for get requests

run(host='localhost', port=8080)
</snippet></ROW><ROW><id>9541298</id><snippet>form_template.tpl</snippet></ROW><ROW><id>9541298</id><snippet>index()</snippet></ROW><ROW><id>9541298</id><snippet>&lt;!DOCTYPE html&gt;
&lt;title&gt;Break up sentence&lt;/title&gt;
%if show_form:
&lt;form action="/" method="post"&gt;
  &lt;label for="sentence"&gt;Input a sentence to break up&lt;/label&gt;
  &lt;input type="text" name="sentence" /&gt;
&lt;/form&gt;
%else:
Sentence parts:&lt;ol&gt;
%for part in parts:
     &lt;li&gt; {{ part }}
%end
&lt;/ol&gt;
%end
</snippet></ROW><ROW><id>9541298</id><snippet>request.forms.sentence</snippet></ROW><ROW><id>9541298</id><snippet>&lt;input name="sentence"/&gt;</snippet></ROW><ROW><id>9541298</id><snippet>$ python break-sentence.py 
Bottle server starting up (using WSGIRefServer())...
Listening on http://localhost:8080/
Hit Ctrl-C to quit.
</snippet></ROW><ROW><id>9541298</id><snippet>http://localhost:8080/</snippet></ROW><ROW><id>9541411</id><snippet>PyRun_InteractiveLoop()</snippet></ROW><ROW><id>9541411</id><snippet>#include &lt;Python.h&gt;

int main()
{
    Py_Initialize();
    PyRun_InteractiveLoop(stdin, "&lt;stdin&gt;");
    Py_Finalize();
}
</snippet></ROW><ROW><id>9541411</id><snippet>PyRun_String()</snippet></ROW><ROW><id>9541411</id><snippet>Py_single_input</snippet></ROW><ROW><id>9541411</id><snippet>None</snippet></ROW><ROW><id>9541411</id><snippet>#include &lt;Python.h&gt;

int main()
{
    PyObject *main, *d;
    Py_Initialize();
    main = PyImport_AddModule("__main__");
    d = PyModule_GetDict(main);
    PyRun_String("a = (1, 2, 3)", Py_single_input, d, d);
    PyRun_String("a", Py_single_input, d, d);
    Py_Finalize();
}
</snippet></ROW><ROW><id>9541411</id><snippet>(1, 2, 3)</snippet></ROW><ROW><id>9541532</id><snippet>self.assertTrue(r.ok)</snippet></ROW><ROW><id>9541532</id><snippet>self.assertTrue(r.ok)</snippet></ROW><ROW><id>9541532</id><snippet>def test_scm_permission(self):
                         ^
                         |
         and wrote something here that's not self
</snippet></ROW><ROW><id>9541532</id><snippet># test.py
class MyClass:

    def func(sel):    # typo error here
        self.name = 10


obj = MyClass()
obj.func()
</snippet></ROW><ROW><id>9541532</id><snippet>$ python3 test.py 
Traceback (most recent call last):
  File "test.py", line 8, in &lt;module&gt;
    obj.func()
  File "test.py", line 4, in func
    self.name = 10
NameError: global name 'self' is not defined
</snippet></ROW><ROW><id>9541532</id><snippet>self.assertTrue(r.ok)</snippet></ROW><ROW><id>9541560</id><snippet>__mro__</snippet></ROW><ROW><id>9541560</id><snippet>__mro__</snippet></ROW><ROW><id>9541560</id><snippet>Person</snippet></ROW><ROW><id>9541560</id><snippet>setattr(Person, '__mro__', (Person, Friendly, object))
</snippet></ROW><ROW><id>9541560</id><snippet>__mro__</snippet></ROW><ROW><id>9541560</id><snippet>def ModifyPersonToBeFriendly():
    # so that we're modifying the global identifier 'Person'
    global Person

    # now just redefine the class using type(), specifying that the new
    # class should inherit from Friendly and have all attributes from
    # our old Person class
    Person = type('Person', (Friendly,), dict(Person.__dict__)) 

def main():
    ModifyPersonToBeFriendly()
    p = Person()
    p.hello()  # works!
</snippet></ROW><ROW><id>9541560</id><snippet>Person</snippet></ROW><ROW><id>9541560</id><snippet>hello()</snippet></ROW><ROW><id>9541560</id><snippet>main()</snippet></ROW><ROW><id>9541560</id><snippet>def main():
    oldperson = Person()
    ModifyPersonToBeFriendly()
    p = Person()
    p.hello()  
    # works!  But:
    oldperson.hello()
    # does not
</snippet></ROW><ROW><id>9541560</id><snippet>type</snippet></ROW><ROW><id>9541563</id><snippet>txt = open(source).read()
for lig in open(values):
    name, age = lig.split(',')
    rpl = txt.replace('Ben', name.strip())
    rpl = rpl.replace('50', age.strip())
    out = open(name), 'w')
    out.write(rpl)
    out.close()
</snippet></ROW><ROW><id>9541734</id><snippet>import struct

data = {'user':u'JackBeePeeBot','host':u'smp.project-vanilla.com','port':2224}
stringfmt = u'%(user)s;%(host)s:%(port)d'
string = stringfmt % data
structfmt = '&gt;bh'
# 1 byte header, 2 byte *character* (not byte) string length
# and ucs-2/utf-16 BE encoded string
packetbytes = struct.pack(structfmt, 2, len(string))+string.encode('utf-16BE')
</snippet></ROW><ROW><id>9541734</id><snippet>packetbytes</snippet></ROW><ROW><id>9541945</id><snippet>msg.attach</snippet></ROW><ROW><id>9541945</id><snippet>from email.MIMEText import MIMEText

filename = "text.txt"
f = file(filename)
attachment = MIMEText(f.read())
attachment.add_header('Content-Disposition', 'attachment', filename=filename)           
msg.attach(attachment)
</snippet></ROW><ROW><id>9541979</id><snippet>~/coding$ python pcount.py 
How many primes? 1000
0.0194370746613
~/coding$ python pcount.py 
How many primes? 2000
0.0495121479034
~/coding$ python pcount.py 
How many primes? 5000
0.172223091125
~/coding$ python pcount.py 
How many primes? 10000 
0.449481010437
</snippet></ROW><ROW><id>9541979</id><snippet>start = time()
</snippet></ROW><ROW><id>9542138</id><snippet>for line in input</snippet></ROW><ROW><id>9542138</id><snippet>input</snippet></ROW><ROW><id>9542147</id><snippet>&gt;&gt;&gt; label = ["first","second"]
&gt;&gt;&gt; lists = [[1,2],[11,22]]
&gt;&gt;&gt; [dict(zip(label, l)) for l in lists]
[{'second': 2, 'first': 1}, {'second': 22, 'first': 11}]
</snippet></ROW><ROW><id>9542240</id><snippet>#! /usr/bin/env python
# -*- coding: utf-8 -*-

from gi.repository import Gtk

PEOPLE =    [
            "Frank",
            "Martha",
            "Jim Bob",
            "Francis"
            ]

class TreeCombo(object):
    def __init__(self):
        self.win = Gtk.Window(title="Combo with liststore")
        self.win.connect('delete-event', Gtk.main_quit)

        self.store = Gtk.ListStore(str)
        for person in PEOPLE:
            self.store.append([person])

        # self.combo = Gtk.ComboBox.new_with_model(self.store)
        self.combo = Gtk.ComboBox()

        self.tree = Gtk.TreeView(self.store)
        self.selector = self.tree.get_selection()
        self.selector.set_mode(Gtk.SelectionMode.MULTIPLE)

        self.combo_cell_text = Gtk.CellRendererText()

        self.column_text = Gtk.TreeViewColumn("Text", self.combo_cell_text, text=0)

        self.tree.append_column(self.column_text)

        self.combo.add(self.tree)

        self.win.add(self.combo)

        self.win.show_all()




def main():
    prog = TreeCombo()
    Gtk.main()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>9542376</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; a = 'ABCDE'
&gt;&gt;&gt; b = 'xy'
&gt;&gt;&gt; 
&gt;&gt;&gt; list(itertools.izip_longest(a, b, fillvalue='-'))
[('A', 'x'), ('B', 'y'), ('C', '-'), ('D', '-'), ('E', '-')]
&gt;&gt;&gt; list(itertools.izip(a, itertools.cycle(b)))
[('A', 'x'), ('B', 'y'), ('C', 'x'), ('D', 'y'), ('E', 'x')]
</snippet></ROW><ROW><id>9542376</id><snippet>&gt;&gt;&gt; a = 'ABCDE'
&gt;&gt;&gt; bs = ['xy', (1,2,3), ['apple']]
&gt;&gt;&gt; it = itertools.izip(*([a] + [itertools.cycle(b) for b in bs]))
&gt;&gt;&gt; list(it)
[('A', 'x', 1, 'apple'), ('B', 'y', 2, 'apple'), ('C', 'x', 3, 'apple'), 
('D', 'y', 1, 'apple'), ('E', 'x', 2, 'apple')]
</snippet></ROW><ROW><id>9542447</id><snippet>grep_cmd.extend([grep, '2345$', 'file.txt'])
</snippet></ROW><ROW><id>9542447</id><snippet>shell=True</snippet></ROW><ROW><id>9542447</id><snippet>shell=True</snippet></ROW><ROW><id>9542447</id><snippet>shell=True</snippet></ROW><ROW><id>9542447</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>9542447</id><snippet>p = subprocess.Popen(grep + ' "2345$" file.txt', stdout=..., shell_True)
</snippet></ROW><ROW><id>9542458</id><snippet>name</snippet></ROW><ROW><id>9542458</id><snippet>f</snippet></ROW><ROW><id>9542458</id><snippet>&gt;&gt;&gt; f = open('/Users/Desktop/febROSTER2012.xls')
&gt;&gt;&gt; f.name
'/Users/Desktop/febROSTER2012.xls'
</snippet></ROW><ROW><id>9542542</id><snippet>Artist.objects.annotate(played=Count('song__songplay')).order_by('-played')[:10]
Song.objects.annotate(played=Count('songplay')).order_by('-played')[:10]
</snippet></ROW><ROW><id>9542573</id><snippet>pipe = Popen(command_2, shell=True, stdin=PIPE, stdout=PIPE)
pipe.stdin.write(result_1)
pipe.communicate()
</snippet></ROW><ROW><id>9542768</id><snippet>item</snippet></ROW><ROW><id>9542768</id><snippet>myList</snippet></ROW><ROW><id>9542768</id><snippet>in</snippet></ROW><ROW><id>9542768</id><snippet>3 in [1, 2, 3] # =&gt; True
</snippet></ROW><ROW><id>9542768</id><snippet>matches = [x for x in lst if fulfills_some_condition(x)]
matches = (x for x in lst if x &gt; 6)
</snippet></ROW><ROW><id>9542768</id><snippet>matches = filter(fulfills_some_condition, lst)
</snippet></ROW><ROW><id>9542768</id><snippet>filter</snippet></ROW><ROW><id>9542768</id><snippet>else</snippet></ROW><ROW><id>9542768</id><snippet>next(x for x in lst if ...)
</snippet></ROW><ROW><id>9542768</id><snippet>StopIteration</snippet></ROW><ROW><id>9542768</id><snippet>next((x for x in lst if ...), [default value])
</snippet></ROW><ROW><id>9542768</id><snippet>index</snippet></ROW><ROW><id>9542768</id><snippet>[1,2,3].index(2) # =&gt; 1
[1,2,3].index(4) # =&gt; ValueError
</snippet></ROW><ROW><id>9542774</id><snippet>createPDF.savefig()</snippet></ROW><ROW><id>9542997</id><snippet>[uid for uid, attrs in users.items() if attrs['name'] == name_you_are_looking_for]
</snippet></ROW><ROW><id>9543233</id><snippet>list_1_sorted, list_2_sorted = zip(*sorted(zip(list_1, list_2),
  key=operator.itemgetter(0), reverse=True))
</snippet></ROW><ROW><id>9543326</id><snippet>super_list = []
for i in xrange(100):
    short_list = []
    for j in xrange(5):
        short_list.append(MyClass())
    super_list.append(short_list)
</snippet></ROW><ROW><id>9543326</id><snippet>super_list = [[MyClass() for j in xrange(5)] for i in xrange(100)]
</snippet></ROW><ROW><id>9543490</id><snippet>python manage convert_to_south myapp</snippet></ROW><ROW><id>9543490</id><snippet>manage.py schemamigration myapp --initial</snippet></ROW><ROW><id>9543490</id><snippet>python manage migrate myapp --fake</snippet></ROW><ROW><id>9543490</id><snippet>python manage schemamigration myapp --auto</snippet></ROW><ROW><id>9543490</id><snippet>python manage migrate myapp</snippet></ROW><ROW><id>9543490</id><snippet>manage.py reset myapp</snippet></ROW><ROW><id>9543490</id><snippet>python manage.py sqlall myapp</snippet></ROW><ROW><id>9543490</id><snippet>python manage.py dbshell</snippet></ROW><ROW><id>9543532</id><snippet>argparse</snippet></ROW><ROW><id>9543532</id><snippet>python manage.py createdb --user=some_user --db_name=some_name
</snippet></ROW><ROW><id>9543532</id><snippet>args</snippet></ROW><ROW><id>9543532</id><snippet>parse_args()</snippet></ROW><ROW><id>9544144</id><snippet>re.DOTALL</snippet></ROW><ROW><id>9544144</id><snippet>re.compile(..., re.VERBOSE|re.DOTALL)</snippet></ROW><ROW><id>9544144</id><snippet>re.S 
re.DOTALL 

Make the '.' special character match any character at all, including a newline;
without this flag, '.' will match anything except a newline.
</snippet></ROW><ROW><id>9544326</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>9544326</id><snippet>images/gcs_banner.jpg</snippet></ROW><ROW><id>9544326</id><snippet>{{ STATIC_URL }}</snippet></ROW><ROW><id>9544326</id><snippet>from django import shortcuts 
# ....
    return shortcuts.render_to_response(template_name, context)
</snippet></ROW><ROW><id>9544326</id><snippet>from django import shortcuts 
from django import template
# ....
    return shortcuts.render_to_response(template_name, context, 
        context_instance=template.RequestContext(request))
</snippet></ROW><ROW><id>9544326</id><snippet>from django import shortcuts 
# ....
    return shortcuts.render(request, template_name, context)
</snippet></ROW><ROW><id>9544442</id><snippet>from django.contrib.contenttypes.models import ContentType
model_type = ContentType.objects.get_for_model(modelA.field1)
model_type.model_class().objects.all() # this will get you all objects of the foreign key model
</snippet></ROW><ROW><id>9544495</id><snippet>&gt;&gt;&gt; print(MyClass.__dict__)
{'__module__': '__main__', '__str__': &lt;function __str__ at 0x106d50398&gt;, '__dict__':
&lt;attribute '__dict__' of 'MyClass' objects&gt;, '__weakref__': &lt;attribute '__weakref__' of 
'MyClass' objects&gt;, '__doc__': None, '__init__': &lt;function __init__ at 0x106d4b848&gt;}

&gt;&gt;&gt; mapper(MyClass, my_class_table)
Mapper|MyClass|my_class
&gt;&gt;&gt; print(MyClass.__dict__)
{'__module__': '__main__', '_sa_class_manager': &lt;ClassManager of &lt;class 
'__main__.MyClass'&gt; at 7febea6a7f40&gt;, 'title': 
&lt;sqlalchemy.orm.attributes.InstrumentedAttribute object at 0x10fba4f90&gt;, '__str__': 
&lt;function __str__ at 0x10fbab398&gt;, 'id': &lt;sqlalchemy.orm.attributes.InstrumentedAttribute 
object at 0x10fba4e90&gt;, '__dict__': &lt;attribute '__dict__' of 'MyClass' objects&gt;, 
'__weakref__': &lt;attribute '__weakref__' of 'MyClass' objects&gt;, '__doc__': None, '__init__':
 &lt;function __init__ at 0x10fbab410&gt;}
</snippet></ROW><ROW><id>9544495</id><snippet>MyClass</snippet></ROW><ROW><id>9544495</id><snippet>MyClass</snippet></ROW><ROW><id>9544495</id><snippet>&gt;&gt;&gt; prem = MyClass('premapper')
&gt;&gt;&gt; mapper(MyClass, my_class_table)
Mapper|MyClass|my_class
&gt;&gt;&gt; postm = MyClass('postmapper')
&gt;&gt;&gt; print prem
{'title': 'premapper'}
&gt;&gt;&gt; print postm
{'_sa_instance_state': &lt;sqlalchemy.orm.state.InstanceState object at 0x10e5b6d50&gt;, 'title': 'postmapper'}
</snippet></ROW><ROW><id>9544495</id><snippet>NoneType</snippet></ROW><ROW><id>9544495</id><snippet>MyClass.title</snippet></ROW><ROW><id>9544495</id><snippet>InstrumentedAttribute</snippet></ROW><ROW><id>9544495</id><snippet>_sa_instance_state</snippet></ROW><ROW><id>9544495</id><snippet>instance_state(instance)</snippet></ROW><ROW><id>9544495</id><snippet>_sa_instance_state</snippet></ROW><ROW><id>9544495</id><snippet>MyClass</snippet></ROW><ROW><id>9544495</id><snippet>MyClass</snippet></ROW><ROW><id>9544495</id><snippet>MyClass</snippet></ROW><ROW><id>9544495</id><snippet>_sa_instance_state</snippet></ROW><ROW><id>9544495</id><snippet>mapper()</snippet></ROW><ROW><id>9544495</id><snippet>pickle</snippet></ROW><ROW><id>9544495</id><snippet>unpickle</snippet></ROW><ROW><id>9544495</id><snippet>sqlalchemy.orm</snippet></ROW><ROW><id>9544954</id><snippet>request(request, success_url=None, form_class=RegistrationForm, profile_callback=None, template_name='registration/registration_form.html', extra_context=None)</snippet></ROW><ROW><id>9544954</id><snippet>from django import forms

from registration.forms import RegistrationForm

class ProjectSpecificRegistrationForm(RegistrationForm):
    keywords = forms.ModelMultipleChoiceField(queryset=Keyword.objects.all())
    first_name =forms.CharField(widget=forms.TextInput(attrs=attrs_dict),label=_(u'First Name')) 
    last_name =forms.CharField(widget=forms.TextInput(attrs=attrs_dict),label=_(u'Last Name'))
</snippet></ROW><ROW><id>9544954</id><snippet>urlpatterns = patterns('',
    url(r'registration/', include('registration.urls'),
)
</snippet></ROW><ROW><id>9544954</id><snippet>/registration/register/</snippet></ROW><ROW><id>9544954</id><snippet>import forms

urlpatterns = patterns('',
    url(r'^registration/register/$', 'views.registration.register', {
        'form_class': forms.ProjectSpecificRegistrationForm}, 'registration_register'),
    url(r'^registration/', include('registration.urls'),
)
</snippet></ROW><ROW><id>9544954</id><snippet>url(regex, view, kwargs=None, name=None, prefix='')</snippet></ROW><ROW><id>9544954</id><snippet>    url(r'^registration/register/$', 'views.registration.register', {
        'form_class': forms.ProjectSpecificRegistrationForm,
        # provided that you imported SomeModel
        'extra_context':  {'models': SomeModel.objects.all()}}, 'registration_register'),
</snippet></ROW><ROW><id>9544954</id><snippet>/registration/register/</snippet></ROW><ROW><id>9545015</id><snippet>import foo.bar.baz 
</snippet></ROW><ROW><id>9545015</id><snippet>foo</snippet></ROW><ROW><id>9545015</id><snippet>baz</snippet></ROW><ROW><id>9545015</id><snippet>__import__</snippet></ROW><ROW><id>9545015</id><snippet>foo</snippet></ROW><ROW><id>9545015</id><snippet>foo = __import__('foo.bar.baz')
</snippet></ROW><ROW><id>9545015</id><snippet>from foo.bar.baz import a, b
</snippet></ROW><ROW><id>9545015</id><snippet>_tmp_baz = __import__('foo.bar.baz', fromlist=['a', 'b'])
a = _tmp_baz.a
b = _tmp_baz.b
</snippet></ROW><ROW><id>9545015</id><snippet>__import__</snippet></ROW><ROW><id>9545015</id><snippet>a</snippet></ROW><ROW><id>9545015</id><snippet>b</snippet></ROW><ROW><id>9545015</id><snippet>baz</snippet></ROW><ROW><id>9545015</id><snippet>__import__</snippet></ROW><ROW><id>9545015</id><snippet>getattr</snippet></ROW><ROW><id>9545015</id><snippet>yotta = getattr(__import__('scipy.constants.constants', 
                           fromlist=['yotta']), 
                'yotta')
</snippet></ROW></DATA>