<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>6015572</id><snippet>import subprocess
subprocess.Popen(["python", r"C:\code\old_start_training_generic_depth.py", "-i", "10", "-l", "2"])
</snippet></ROW><ROW><id>6015847</id><snippet>path = "/home/user/puppet/modules/impuls-test/templates"
components = path.split(os.sep)
print str.join(os.sep, components[:components.index("modules")+2])
</snippet></ROW><ROW><id>6015847</id><snippet>/home/user/puppet/modules/impuls-test
</snippet></ROW><ROW><id>6015853</id><snippet>multiprocessing</snippet></ROW><ROW><id>6015853</id><snippet>threading</snippet></ROW><ROW><id>6016047</id><snippet>.master-default {
    color: black;
}
.master-default .bordered {
    border: green;
}
.master-blue {
    color: blue;
}
.master-blue .bordered
    border: yellow;
}
</snippet></ROW><ROW><id>6016047</id><snippet>&lt;div id="master" class="{{ userprofile.master_style }}"&gt;
    &lt;div class="bordered"&gt;Border colour will vary according to master style&lt;/a&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>6016264</id><snippet>user_id=6 and type=6 and food_id=2</snippet></ROW><ROW><id>6016264</id><snippet>UserMapper.objects.filter(user_id=6, type=6, food_id=2)
</snippet></ROW><ROW><id>6016264</id><snippet>user_id=6</snippet></ROW><ROW><id>6016264</id><snippet>or</snippet></ROW><ROW><id>6016264</id><snippet>type=6 and food_id=2</snippet></ROW><ROW><id>6016264</id><snippet>Q</snippet></ROW><ROW><id>6016264</id><snippet>from django.db.models import Q
UserMapper.objects.filter(Q(user_id=6) | Q(type=6, food_id=2))
</snippet></ROW><ROW><id>6016264</id><snippet>Q</snippet></ROW><ROW><id>6016449</id><snippet>mimetypes.guess_type</snippet></ROW><ROW><id>6016449</id><snippet>PK</snippet></ROW><ROW><id>6016449</id><snippet>Rar!</snippet></ROW><ROW><id>6016449</id><snippet>%PDF</snippet></ROW><ROW><id>6016449</id><snippet>\x89PNG</snippet></ROW><ROW><id>6016510</id><snippet>from django.template import RequestContext
from django.shortcuts import render_to_response
def index(request):
    return render_to_response('help_content.html',
                      context_instance=RequestContext(request))
</snippet></ROW><ROW><id>6016510</id><snippet>{% extends 'help_content.html' %}
</snippet></ROW><ROW><id>6016510</id><snippet>&lt;/body&gt;</snippet></ROW><ROW><id>6016944</id><snippet>'a'</snippet></ROW><ROW><id>6016944</id><snippet>'w'</snippet></ROW><ROW><id>6016944</id><snippet>'w'</snippet></ROW><ROW><id>6017141</id><snippet>x = [5,] + a[1:]</snippet></ROW><ROW><id>6017543</id><snippet>django</snippet></ROW><ROW><id>6017543</id><snippet>tagging</snippet></ROW><ROW><id>6017620</id><snippet>strftime</snippet></ROW><ROW><id>6017620</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now().strftime('%b-%d-%I%M%p-%G')
'May-16-0245PM-2011'
</snippet></ROW><ROW><id>6017693</id><snippet>import numpy as np
np.isnan(np.nan) # returns True
</snippet></ROW><ROW><id>6017888</id><snippet>import itertools
with open('out.txt', 'w') as f:
    for variation in itertools.product('abc', repeat=3):
        f.write(str.join("", variation) + "\n")
</snippet></ROW><ROW><id>6018158</id><snippet>GL_CLAMP</snippet></ROW><ROW><id>6018158</id><snippet>glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, CL_CLAMP )
glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP )
</snippet></ROW><ROW><id>6018242</id><snippet>options.remove(current_option)
options.append(False)
return options[0]
</snippet></ROW><ROW><id>6018242</id><snippet>options</snippet></ROW><ROW><id>6018242</id><snippet>return (options + [False])[current_option == options[0]]
</snippet></ROW><ROW><id>6018325</id><snippet>   __kernel void eMul(
                       __global float* C,
                       __global float* A,
                       __global float* B,
                        int width, int height)
    {
        // ID
        int x = get_global_id(0);
        int y = get_global_id(1);

        // Multiplying
        C[y * height + x ] = A[y * height + x] * B[y * height + x];
    }
</snippet></ROW><ROW><id>6018450</id><snippet>findall</snippet></ROW><ROW><id>6018450</id><snippet>&gt;&gt;&gt; re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')
[('de', '123'), ('de', '123')]
</snippet></ROW><ROW><id>6018467</id><snippet>memoize</snippet></ROW><ROW><id>6018467</id><snippet>max_hits</snippet></ROW><ROW><id>6018467</id><snippet>@memoize()
def func(x):
    [...]

@memoize(max_hits=7)
def func(x):
    [...]
</snippet></ROW><ROW><id>6018467</id><snippet>def memoize(max_hits=None):
    """Returns a decorator to cache previosly seen function inputs.

    usage:
    @memoize()
    def some_func(..
    """
    class decorator:
        def __init__(self, function):
            self.max_hits = max_hits
            self.function = function
            self.memoized = {}

        def __call__(self, *args, **kwargs):
            key = (args,tuple(kwargs.items()))
            try:
                return self.memoized[key]
            except KeyError:
                self.memoized[key] = self.function(*args,**kwargs)
            return self.memoized[key]

    return decorator
</snippet></ROW><ROW><id>6018467</id><snippet>@memoize()</snippet></ROW><ROW><id>6018467</id><snippet>@memoize</snippet></ROW><ROW><id>6018467</id><snippet>@memoize</snippet></ROW><ROW><id>6018467</id><snippet>memoize</snippet></ROW><ROW><id>6018467</id><snippet>max_hits</snippet></ROW><ROW><id>6018467</id><snippet>memoize</snippet></ROW><ROW><id>6018467</id><snippet>def memoize(max_hits=None):
    if callable(max_hits):
        # For sake of readability...
        func = max_hits
        decorator = memoize(max_hits=None)
        return decorator(func)
    [...original implementation follows here...]
</snippet></ROW><ROW><id>6018930</id><snippet>[max(len(str(x)) for x in line) for line in zip(*foo)]
</snippet></ROW><ROW><id>6019156</id><snippet>package_dir</snippet></ROW><ROW><id>6019156</id><snippet>from setuptools import setup

setup(
    name = 'umbrella',
    packages = [
        'umbrella.common_utils'
        ],
    package_dir = {
        'umbrella.common_utils': './common_utils'
        }
    )
</snippet></ROW><ROW><id>6019156</id><snippet>% python setup.py build
..
creating build/lib/umbrella
creating build/lib/umbrella/common_utils
copying ./common_utils/__init__.py -&gt; build/lib/umbrella/common_utils
</snippet></ROW><ROW><id>6019156</id><snippet>python setup.py develop</snippet></ROW><ROW><id>6019156</id><snippet>site-packages/easy-install.pth</snippet></ROW><ROW><id>6019156</id><snippet>develop</snippet></ROW><ROW><id>6019156</id><snippet>#!/usr/bin/env python

import os
from distutils import sysconfig

root = os.path.abspath(os.path.dirname(__file__))
pkg = os.path.join(sysconfig.get_python_lib(), 'umbrella')
if not os.path.exists(pkg):
    os.makedirs(pkg)
open(os.path.join(pkg, '__init__.py'), 'wb').write('\n')
for name in ('common_utils',):
    dst = os.path.join(pkg, name)
    if not os.path.exists(dst):
        os.symlink(os.path.join(root, name), dst)


(virt)% chmod 755 ./develop
(virt)% ./develop
(virt)% python -c 'from umbrella import common_utils; print common_utils'
&lt;module 'umbrella.common_utils' from 
   '/home/pat/virt/lib/python2.6/site-packages/umbrella/common_utils/__init__.pyc'&gt;
</snippet></ROW><ROW><id>6019216</id><snippet>pip</snippet></ROW><ROW><id>6019216</id><snippet>virtualenv</snippet></ROW><ROW><id>6019262</id><snippet> INSERT INTO some_table 
 (ts_column) 
 VALUES 
 (TIMESTAMP '2011-05-16 15:36:38');
</snippet></ROW><ROW><id>6019262</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>6019262</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>6019262</id><snippet>to_timestamp()</snippet></ROW><ROW><id>6019262</id><snippet> INSERT INTO some_table 
 (ts_column) 
 VALUES 
 (to_timestamp('16-05-2011 15:36:38', 'dd-mm-yyyy hh24:mi:ss'));
</snippet></ROW><ROW><id>6019460</id><snippet>import signal
def SigIntHand(SIG, FRM):
    print("Please Right click-copy. Ctrl-C does not work on the cmd prompt")

signal.signal(signal.SIGINT, SigIntHand)
</snippet></ROW><ROW><id>6019460</id><snippet>import signal
signal.signal(signal.SIGINT, signal.SIG_IGN)
</snippet></ROW><ROW><id>6019587</id><snippet>UserCoupons.objects.get(user=myuser, coupon=mycoupon)
</snippet></ROW><ROW><id>6019587</id><snippet>mycoupon.usercoupon_set.get(user=myuser)
</snippet></ROW><ROW><id>6019587</id><snippet>_set</snippet></ROW><ROW><id>6019587</id><snippet>Coupon</snippet></ROW><ROW><id>6019587</id><snippet>userprofile_set</snippet></ROW><ROW><id>6019587</id><snippet>usercoupons_set</snippet></ROW><ROW><id>6019656</id><snippet>self.x</snippet></ROW><ROW><id>6019656</id><snippet>x</snippet></ROW><ROW><id>6019656</id><snippet>this</snippet></ROW><ROW><id>6019656</id><snippet>self</snippet></ROW><ROW><id>6019656</id><snippet>self</snippet></ROW><ROW><id>6019876</id><snippet>def post(self):
   #[...]
   if isvalid(username) == False:
       print "Invalid Username"
       self.redirect("/badusername")
       return

   print "User Is OK"
</snippet></ROW><ROW><id>6020427</id><snippet>%reset</snippet></ROW><ROW><id>6020427</id><snippet>%xdel obj</snippet></ROW><ROW><id>6020665</id><snippet>django-auth-ldap</snippet></ROW><ROW><id>6020909</id><snippet>def outer(x=1):
    def inner(y=2):
        return x+y
</snippet></ROW><ROW><id>6020909</id><snippet>compile()</snippet></ROW><ROW><id>6020909</id><snippet>outer()</snippet></ROW><ROW><id>6020909</id><snippet>inner()</snippet></ROW><ROW><id>6020909</id><snippet>outer()</snippet></ROW><ROW><id>6020909</id><snippet>inner()</snippet></ROW><ROW><id>6020909</id><snippet>outer()</snippet></ROW><ROW><id>6020909</id><snippet>outer</snippet></ROW><ROW><id>6020909</id><snippet>inner()</snippet></ROW><ROW><id>6020909</id><snippet>outer()</snippet></ROW><ROW><id>6020909</id><snippet>inner()</snippet></ROW><ROW><id>6020909</id><snippet>x</snippet></ROW><ROW><id>6021050</id><snippet>dict</snippet></ROW><ROW><id>6021050</id><snippet>None</snippet></ROW><ROW><id>6021050</id><snippet>if values is None:
    self.values = {}
else:
    self.values = values
</snippet></ROW><ROW><id>6021121</id><snippet>for news in soup.findAll('news'):
    posttitle = news['post_title']
    postdate = news['post_date']
    postcontent = news['post_content']
    print "&lt;item&gt;"
    print "&lt;pubDate&gt;"
    print postdate
    print "&lt;/pubDate&gt;"
    print "&lt;title&gt;"
    print posttitle
    print "&lt;/title&gt;"
    print "&lt;content:encoded&gt;"
    print postcontent
    print "&lt;/content:encoded&gt;"
    print "&lt;/item&gt;"
</snippet></ROW><ROW><id>6021268</id><snippet>lambda</snippet></ROW><ROW><id>6021268</id><snippet>bisect</snippet></ROW><ROW><id>6021268</id><snippet>==</snippet></ROW><ROW><id>6021268</id><snippet>switch</snippet></ROW><ROW><id>6021407</id><snippet>set_b = set(list_b)
result = [x for x in list_a if (x[1], x[2]) in set_b]
</snippet></ROW><ROW><id>6021766</id><snippet>MemoryError</snippet></ROW><ROW><id>6021766</id><snippet>free -m</snippet></ROW><ROW><id>6021766</id><snippet>numpy.zeros(20,20,20,30,30,30, dtype='float32')
</snippet></ROW><ROW><id>6021909</id><snippet>M2Crypto.X509.load_cert()</snippet></ROW><ROW><id>6021909</id><snippet>cert.get_pubkey()</snippet></ROW><ROW><id>6022061</id><snippet>min(room_options, key=lambda x: x.price)</snippet></ROW><ROW><id>6022178</id><snippet>def joinfile(filename) :
   sarray = []
   with open(filename) as fd :
       for line in fd :
           if line.startswith('&gt;from') or line.startswith('*'):
               continue
          sarray.append(line.rstrip('\n'))
   return ''.join(sarray)
</snippet></ROW><ROW><id>6022178</id><snippet>fd = open(filename)
str = ''.join([line.rstrip('\n') for line in fd if not (line.startswith('&gt;from') or line.startswith('*'))])
</snippet></ROW><ROW><id>6022473</id><snippet>for x in k:
    print(','.join(x))
</snippet></ROW><ROW><id>6022473</id><snippet>for x,y in l:
    print('%.8f,%s' % (x[0], y))
</snippet></ROW><ROW><id>6022548</id><snippet>/proc/&lt;PID&gt;</snippet></ROW><ROW><id>6022548</id><snippet>open(os.path.join('/proc', str(pid), 'stat')).readline().split()[2]=='T'
</snippet></ROW><ROW><id>6022548</id><snippet>re.sub(r'\(.*\)', '()', open(os.path.join('/proc', str(pid), 'stat')).readline()).split()[2]=='T'
</snippet></ROW><ROW><id>6022807</id><snippet>import vte
import os
v = vte.Terminal()
vPid = v.fork_command()
workingDir = os.readlink('/proc/%s/cwd' % vPid)
</snippet></ROW><ROW><id>6022811</id><snippet>for item in list(somelist):
  ...
  somelist.remove(item)
</snippet></ROW><ROW><id>6022888</id><snippet>cert = X509.load_cert("signer.pem")
decrypted = cert.get_pubkey().get_rsa().public_decrypt(StringSignature, 1)
</snippet></ROW><ROW><id>6022888</id><snippet>decrypted</snippet></ROW><ROW><id>6022888</id><snippet>from Crypto.Util import asn1
seq = asn1.DerSequence()
seq.decode(decrypted)
obj = asn1.DerObject()
obj.decode(seq[1])
# now this is the original message digest that was signed
original_message_md = obj.payload
</snippet></ROW><ROW><id>6023342</id><snippet>class enrolForm(forms.Form):
    CHOICES = [('male','male'),('female','female')]
    students = forms.ChoiceField(choices = CHOICES)
</snippet></ROW><ROW><id>6023342</id><snippet>if form.is_valid():
    print "creating student"
    exam = models.Exam.objects.get(name=examName)
    ...
else:
    print 'ERRORS:', form.errors
</snippet></ROW><ROW><id>6023550</id><snippet>r_old = old_w / old_h
r_new = new_w / new_h

if (r_old &gt; r_new) then
   w = new_w              // width of mapped rect
   h = w / r_old          // height of mapped rect
   x = 0                  // x-coord of mapped rect
   y = (new_h - h) / 2    // y-coord of centered mapped rect
else
   h = new_h
   w = h * r_old
   y = 0
   x = (new_w - w) / 2
endif
</snippet></ROW><ROW><id>6023563</id><snippet>ModelForm</snippet></ROW><ROW><id>6023563</id><snippet>instance</snippet></ROW><ROW><id>6023563</id><snippet>MyModel</snippet></ROW><ROW><id>6023563</id><snippet>MyModelForm</snippet></ROW><ROW><id>6023563</id><snippet>django.forms.ModelForm</snippet></ROW><ROW><id>6023563</id><snippet>my_record = MyModel.objects.get(id=XXX)
form = MyModelForm(instance=my_record)
</snippet></ROW><ROW><id>6023563</id><snippet>form = MyModelForm(request.POST, instance=my_record)
</snippet></ROW><ROW><id>6023566</id><snippet>pythoncom.PumpMessages()</snippet></ROW><ROW><id>6023566</id><snippet>ctypes.windll.user32.PostQuitMessage(0)
</snippet></ROW><ROW><id>6023724</id><snippet>sh</snippet></ROW><ROW><id>6023724</id><snippet>bash</snippet></ROW><ROW><id>6023724</id><snippet>for f in *_passive.sss; do mv -v $f `basename $f _passive.sss`.sss; done
</snippet></ROW><ROW><id>6023767</id><snippet>def pytest_funcarg__api(request):
    api = myclass()
    #do some initialisation...
    mp = request.getfuncargvalue("monkeypatch")
    mp.setattr(api,"get_external_stuff", Mock())
    mp.setattr(api,"morestuff", Mock())
    return api
</snippet></ROW><ROW><id>6024019</id><snippet>subscriber.bind("tcp://localhost:5555")
</snippet></ROW><ROW><id>6024019</id><snippet>subscriber.bind("tcp://127.0.0.1:5555")
</snippet></ROW><ROW><id>6024107</id><snippet># socket setup

(buffer, sockaddress) = mysocket.recvfrom(6)
if len(buffer)== 6:
    i1,i2,i3,i4, port = struct.unpack('!BBBBH', buffer)
</snippet></ROW><ROW><id>6024166</id><snippet>sys.stdin.isatty</snippet></ROW><ROW><id>6024166</id><snippet>if sys.stdin.isatty():
    message = raw_input('Enter your message ')
else:
    message = sys.stdin.read()
</snippet></ROW><ROW><id>6024244</id><snippet>'*'</snippet></ROW><ROW><id>6024244</id><snippet>*</snippet></ROW><ROW><id>6024244</id><snippet>*</snippet></ROW><ROW><id>6024244</id><snippet>ls *</snippet></ROW><ROW><id>6024322</id><snippet>perl -pe 'print "$ARGV,"' a b c
</snippet></ROW><ROW><id>6024347</id><snippet>config.py</snippet></ROW><ROW><id>6024648</id><snippet>show()</snippet></ROW><ROW><id>6024648</id><snippet>get_backend()</snippet></ROW><ROW><id>6024648</id><snippet>matplotlib.use('TkAgg')</snippet></ROW><ROW><id>6024656</id><snippet>class CallWrapper(object):
    def __init__(self, fn):
        self.fn = fn

    def __call__(self, *args, **kwargs):
        self.args   = args
        self.kwargs = kwargs
        return self

    def invoke_with_value(self, value):
        return self.fn(value, *self.args, **self.kwargs)

class ConfigDict(dict):
    def __init__(self, ldic):
        myvars = globals()
        for name in dir(self):
            attr = getattr(self, name)
            if callable(attr) and not name.startswith('_'):
                myvars[name] = CallWrapper(attr)

        wrapped_dic = eval(ldic.func_code, myvars)

        dic = {}
        for key, value in wrapped_dic.iteritems():
            # Check if value is a tuple with call wrappers
            if isinstance(value, tuple) and len(value) &gt; 1 and \
                        isinstance(value[1], CallWrapper):
                wrappers = value[1:]
                value = value[0]
                for wrapper in wrappers:
                    # Run wrappers
                    result = wrapper.invoke_with_value(value)
                    if result:
                        value = result # Wrapper modified value

            dic[key] = value # No wrappers

        super(ConfigDict, self).__init__(dic)

    def prefix(self, value, pref):
        print 'prefix called for value: ', value
        return pref + '_' + value

    def required(self, value, keys_array):
        print 'required called for value: ', value
        print 'with keys: ', keys_array

    def valid(self, value):
        print 'valid called for value: ', value

cfg = ConfigDict(lambda: {'A': ('a', required(['test']), valid()),
                          'B': ('b', prefix('hello')),
                          'C': 'c'})
print cfg
</snippet></ROW><ROW><id>6024656</id><snippet>required called for value:  a
with keys:  ['test']
valid called for value:  a
prefix called for value:  b
{'A': 'a', 'C': 'c', 'B': 'hello_b'}
</snippet></ROW><ROW><id>6024816</id><snippet>django orm</snippet></ROW><ROW><id>6024816</id><snippet>django orm</snippet></ROW><ROW><id>6024847</id><snippet>reload()</snippet></ROW><ROW><id>6024847</id><snippet>import mymodule

while mymodule.go():
    reload(mymodule)
</snippet></ROW><ROW><id>6024847</id><snippet>True</snippet></ROW><ROW><id>6024847</id><snippet>go()</snippet></ROW><ROW><id>6024847</id><snippet>False</snippet></ROW><ROW><id>6024893</id><snippet>models.ManyToManyField</snippet></ROW><ROW><id>6024893</id><snippet>models.ForeignKey</snippet></ROW><ROW><id>6024893</id><snippet>Category</snippet></ROW><ROW><id>6024893</id><snippet>Community</snippet></ROW><ROW><id>6024893</id><snippet>Community</snippet></ROW><ROW><id>6024893</id><snippet>Category</snippet></ROW><ROW><id>6024893</id><snippet>ForeignKey</snippet></ROW><ROW><id>6024893</id><snippet>ManyToManyField</snippet></ROW><ROW><id>6024893</id><snippet>Community</snippet></ROW><ROW><id>6024893</id><snippet>Category</snippet></ROW><ROW><id>6024996</id><snippet>easy_install pyreadline</snippet></ROW><ROW><id>6024996</id><snippet>pip install pyreadline</snippet></ROW><ROW><id>6024996</id><snippet>try:
  import pyreadline as readline
except ImportError:
  import readline
</snippet></ROW><ROW><id>6025078</id><snippet>self.button.clicked.connect(self.method)
</snippet></ROW><ROW><id>6025078</id><snippet>def do_stuff(arg)
     #do stuff with arg
</snippet></ROW><ROW><id>6025078</id><snippet>self.button1.clicked.connect(lambda : do_stuff('btn one'))
self.button2.clicked.connect(lambda : do_stuff('btn two'))
</snippet></ROW><ROW><id>6025123</id><snippet>matplotlib.pyplot.bar3d</snippet></ROW><ROW><id>6025123</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x0, x1, x2 = [np.random.normal(loc=loc, size=100) for loc in [1, 2, 3]]

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

yspacing = 1
for i, measurement in enumerate([x0, x1, x2]):
    hist, bin_edges = np.histogram(measurement, bins=10)
    dx = np.diff(bin_edges)
    dy = np.ones_like(hist)
    y = i * (1 + yspacing) * np.ones_like(hist)
    z = np.zeros_like(hist)
    ax.bar3d(bin_edges[:-1], y, z, dx, dy, hist, color='b', 
            zsort='average', alpha=0.5)

plt.show()
</snippet></ROW><ROW><id>6025486</id><snippet>None</snippet></ROW><ROW><id>6025486</id><snippet>somelist.sort()</snippet></ROW><ROW><id>6025486</id><snippet>c = sorted(a + xs)</snippet></ROW><ROW><id>6025486</id><snippet>sorted</snippet></ROW><ROW><id>6025692</id><snippet>update</snippet></ROW><ROW><id>6025692</id><snippet>Review</snippet></ROW><ROW><id>6025692</id><snippet>Artist</snippet></ROW><ROW><id>6025692</id><snippet>Review.id</snippet></ROW><ROW><id>6025692</id><snippet>conn = session.connection()
conn.execute(Review.__table__
                .update()
                .values(artist_id=artist_id)
                .where(Review.id.in_(review_ids))
            )
</snippet></ROW><ROW><id>6025694</id><snippet>{</snippet></ROW><ROW><id>6025694</id><snippet>}</snippet></ROW><ROW><id>6025694</id><snippet>[</snippet></ROW><ROW><id>6025694</id><snippet>]</snippet></ROW><ROW><id>6025694</id><snippet>cards</snippet></ROW><ROW><id>6025694</id><snippet>set</snippet></ROW><ROW><id>6025694</id><snippet>set</snippet></ROW><ROW><id>6025694</id><snippet>random.choice</snippet></ROW><ROW><id>6025694</id><snippet>random.choice(cards)
</snippet></ROW><ROW><id>6025694</id><snippet>random.choice(list(cards))
</snippet></ROW><ROW><id>6025807</id><snippet>class C(object):
    def __init__(self, x, y, z, etc):
        self.__dict__.update(locals())
</snippet></ROW><ROW><id>6025807</id><snippet>self.__dict__.pop('self')</snippet></ROW><ROW><id>6025807</id><snippet>__dict__</snippet></ROW><ROW><id>6025807</id><snippet>{'member1': value, 'member2': value}</snippet></ROW><ROW><id>6025807</id><snippet>locals()</snippet></ROW><ROW><id>6026379</id><snippet>import crypt
def hashPassword(salt, password, rounds=5000):
    return crypt.crypt(password, '$6$rounds={:d}${}$'.format(rounds, salt))
</snippet></ROW><ROW><id>6026634</id><snippet>&gt; db.places.ensureIndex({loc: "2d"})
&gt; db.places.save({name: "AK", loc: {long: -152.2683, lat: 61.3850}})
&gt; db.places.save({name: "AL", loc: {long: -86.8073, lat: 32.7990}})
&gt; db.places.save({name: "AR", loc: {long: -92.3809, lat: 34.9513}})
&gt; db.places.save({name: "AS", loc: {long: -170.7197, lat: 14.2417}})
&gt; ...
</snippet></ROW><ROW><id>6026634</id><snippet>&gt; db.places.find({loc: { $near: {long: -90, lat: 50}}}).limit(6)
{"name" : "WI", "loc" : { "long" : -89.6385, "lat" : 44.2563 } }
{"name" : "MN", "loc" : { "long" : -93.9196, "lat" : 45.7326 } }
{"name" : "MI", "loc" : { "long" : -84.5603, "lat" : 43.3504 } }
{"name" : "IA", "loc" : { "long" : -93.214, "lat" : 42.0046 } }
{"name" : "IL", "loc" : { "long" : -89.0022, "lat" : 40.3363 } }
{"name" : "ND", "loc" : { "long" : -99.793, "lat" : 47.5362 } }
</snippet></ROW><ROW><id>6026634</id><snippet>&gt; db.places.find({loc: { $near: {long: -90, lat: 50}, $maxDistance: 8}})
{"name" : "WI", "loc" : { "long" : -89.6385, "lat" : 44.2563 } }
{"name" : "MN", "loc" : { "long" : -93.9196, "lat" : 45.7326 } }
</snippet></ROW><ROW><id>6026634</id><snippet>$maxDistance: 0.08999</snippet></ROW><ROW><id>6026634</id><snippet>maxDistance</snippet></ROW><ROW><id>6026634</id><snippet>&gt; db.runCommand({geoNear: "places", near: [-90, 50], spherical: true, 
                 maxDistance: 800/6378});
(summarizing results as they're too verbose to include)
"MN"  dis: 0.087..
"WI"  dis: 0.100..
"ND"  dis: 0.120..
</snippet></ROW><ROW><id>6026864</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>6026864</id><snippet>os.system</snippet></ROW><ROW><id>6026864</id><snippet>import subprocess
taskname = '...'
task = 'taskkill /im ' + taskname + ' /f'
subprocess.check_call(task, shell=True)
</snippet></ROW><ROW><id>6026957</id><snippet>_sqlite3.so</snippet></ROW><ROW><id>6026957</id><snippet>sqlite3</snippet></ROW><ROW><id>6026957</id><snippet>sqlite3-devel</snippet></ROW><ROW><id>6026957</id><snippet>libsqlite3-0</snippet></ROW><ROW><id>6026957</id><snippet>libsqlite3-dev</snippet></ROW><ROW><id>6026957</id><snippet>_sqlite3.so</snippet></ROW><ROW><id>6026957</id><snippet>% ldd /usr/lib/python2.6/lib-dynload/_sqlite3.so | grep sqlite3
    libsqlite3.so.0 =&gt; /usr/lib/libsqlite3.so.0 (0x00007f29ef3be000)
% dpkg -S /usr/lib/libsqlite3.so.0
    libsqlite3-0: /usr/lib/libsqlite3.so.0
</snippet></ROW><ROW><id>6028029</id><snippet>
import os, mypackage
template = os.path.join(mypackage.__path__[0], 'templates', 'temp_file')
</snippet></ROW><ROW><id>6028076</id><snippet>__future__</snippet></ROW><ROW><id>6028525</id><snippet>URLFetchers</snippet></ROW><ROW><id>6028525</id><snippet>AnchorInserters</snippet></ROW><ROW><id>6028525</id><snippet>while True:
   element = queue.get(block=True, timeout=None)
   #do worker's task
</snippet></ROW><ROW><id>6028525</id><snippet>queue.get</snippet></ROW><ROW><id>6029029</id><snippet>storage = {} # initialize
# ...
if !storage.has_key(token):
  storage[token] = 1
else:
  storage[token] += 1
</snippet></ROW><ROW><id>6029029</id><snippet>Counter</snippet></ROW><ROW><id>6029175</id><snippet>flattend = [f for sublist in ((c.real, c.imag) for c in complex_list) for f in sublist]
</snippet></ROW><ROW><id>6029756</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>6029948</id><snippet>system("python xxx.py -yyy -zzz")</snippet></ROW><ROW><id>6030118</id><snippet>isdigit</snippet></ROW><ROW><id>6030118</id><snippet>&gt;&gt;&gt; ls = ['1a', 'b3', '1']
&gt;&gt;&gt; cleaned = [ x for x in ls if x.isdigit() ]
&gt;&gt;&gt; cleaned
['1']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6030193</id><snippet>plt.boxplot</snippet></ROW><ROW><id>6030193</id><snippet>boxplot</snippet></ROW><ROW><id>6030193</id><snippet>z = [[y for y in row if y] for row in x.T]
</snippet></ROW><ROW><id>6030193</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig=plt.figure()

N=20
M=10

x = np.random.random((M,N))
mask=np.random.random_integers(0,1,N*M).reshape((M,N))
x = np.ma.array(x,mask=mask)
ax1=fig.add_subplot(2,1,1)
ax1.boxplot(x)

z = [[y for y in row if y] for row in x.T]
ax2=fig.add_subplot(2,1,2)
ax2.boxplot(z)
plt.show()
</snippet></ROW><ROW><id>6030193</id><snippet>x</snippet></ROW><ROW><id>6030532</id><snippet>conditions_string = ' '.join(["\t\tWHEN %s THEN %s\n" % (x, y) for x, y in logs_age_list])
</snippet></ROW><ROW><id>6030532</id><snippet>where_string = ', '.join([duo[0] for duo inlogs_age_list])
</snippet></ROW><ROW><id>6030532</id><snippet>sql = '''
UPDATE SURV_SCF_ID_STATUS
SET AGE_STATUS = CASE NAME
%s
END
WHERE NAME IN (%s)
''' % (conditions_string, where_string)
</snippet></ROW><ROW><id>6030532</id><snippet># Never do this -- insecure!
symbol = 'IBM'
c.execute("... where symbol = '%s'" % symbol)

# Do this instead
t = (symbol,)
c.execute('select * from stocks where symbol=?', t)
</snippet></ROW><ROW><id>6030605</id><snippet>/etc/apache2/mods-enabled/reqtimeout.conf</snippet></ROW><ROW><id>6030748</id><snippet>#!/usr/bin/env python

"""Send the contents of a directory as a MIME message."""

import os
import sys
import smtplib
# For guessing MIME type based on file name extension
import mimetypes

from optparse import OptionParser

from email import encoders
from email.message import Message
from email.mime.audio import MIMEAudio
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

COMMASPACE = ', '


def main():
parser = OptionParser(usage="""\
Send the contents of a directory as a MIME message.

Usage: %prog [options]

Unless the -o option is given, the email is sent by forwarding to your local
SMTP server, which then does the normal delivery process. Your local machine
must be running an SMTP server.
""")
parser.add_option('-d','--directory',
type='string', action='store')
parser.add_option('-o', '--output',
type='string', action='store', metavar='FILE',
help="""Print the composed message to FILE instead of
sending the message to the SMTP server.""")
parser.add_option('-s', '--sender',
type='string', action='store', metavar='SENDER',
help='The value of the From: header (required)')
parser.add_option('-r', '--recipient',
type='string', action='append', metavar='RECIPIENT',
default=[], dest='recipients'),
parser.add_option('-f', '--recipientfile',
type='string', action='store', metavar='RECIPIENT_FILE',
dest='recipient_file', default="",
help='A To: header value (a file containing this)')

opts, args = parser.parse_args()
if not opts.sender or not (opts.recipient_file or opts.recipients):
    parser.print_help()
    sys.exit(1)
directory = opts.directory
if not directory:
    directory = '.'
# Create the enclosing (outer) message

try:
    rec_file = open(opts.recipient_file)
    recipients = rec_file.read()
    rec_file.close()
except IOError:
    print "/!\ Bad file. Falling back to recipent option"
    recipients = COMMASPACE.join(opts.recipients)

outer = MIMEMultipart()
outer['Subject'] = 'Malware submission'
outer['To'] = recipients
outer['From'] = opts.sender
outer.preamble = 'You will not see this in a MIME-aware mail reader.\n'

for filename in os.listdir(directory):
    path = os.path.join(directory, filename)
    if not os.path.isfile(path):
        continue
    # Guess the content type based on the file's extension. Encoding
    # will be ignored, although we should check for simple things like
    # gzip'd or compressed files.
    ctype, encoding = mimetypes.guess_type(path)
    if ctype is None or encoding is not None:
    # No guess could be made, or the file is encoded (compressed), so
    # use a generic bag-of-bits type.
        ctype = 'application/octet-stream'
        maintype, subtype = ctype.split('/', 1)
    if maintype == 'text':
        fp = open(path)
    # Note: we should handle calculating the charset
        msg = MIMEText(fp.read(), _subtype=subtype)
        fp.close()
    elif maintype == 'image':
        fp = open(path, 'rb')
        msg = MIMEImage(fp.read(), _subtype=subtype)
        fp.close()
    elif maintype == 'audio':
        fp = open(path, 'rb')
        msg = MIMEAudio(fp.read(), _subtype=subtype)
        fp.close()
    else:
        fp = open(path, 'rb')
        msg = MIMEBase(maintype, subtype)
        msg.set_payload(fp.read())
        fp.close()
    # Encode the payload using Base64
    encoders.encode_base64(msg)
# Set the filename parameter
msg.add_header('Content-Disposition', 'attachment', filename=filename)
outer.attach(msg)
# Now send or store the message
composed = outer.as_string()
if opts.output:
    fp = open(opts.output, 'w')
    fp.write(composed)
    fp.close()
else:
    s = smtplib.SMTP('localhost')
    s.sendmail(opts.sender, recipients, composed)
    s.quit()

if __name__ == '__main__':
main()
</snippet></ROW><ROW><id>6030841</id><snippet>pyplot.plot(x, y, color='#112233')
</snippet></ROW><ROW><id>6030856</id><snippet>auth</snippet></ROW><ROW><id>6030856</id><snippet>print repr(mydict); print; print repr(auth)</snippet></ROW><ROW><id>6030856</id><snippet>tags</snippet></ROW><ROW><id>6030856</id><snippet>def fast_iter(context, cursor):
    mydict = {} # represents a paper with all its tags.
    auth = [] # a list of authors who have written the paper "together".
    counter = 0 # counts the papers
    tagset1 = set(['article', 'inproceedings', 'proceedings', 'book', 'incollection'])
    tagset2 = set(["title", "booktitle", "year", "journal"])
    for event, elem in context:
        tag = elem.tag
        if tag in tagset2:
            if elem.text:
                mydict[tag] = elem.text
        elif tag == "author":
            if elem.text:
                auth.append(elem.text)
        elif tag in tagset1:
            counter += 1
            print counter
            mydict["element"] = tag
            mydict["mdate"] = elem.get("mdate")
            mydict["dblpkey"] = elem.get("key")
            #populate_database(mydict, auth, cursor)
            mydict.clear() # Why not just do mydict = {} ??
            auth = []
            # etc etc
</snippet></ROW><ROW><id>6030856</id><snippet>tag in tagset1</snippet></ROW><ROW><id>6031096</id><snippet>dstack</snippet></ROW><ROW><id>6031096</id><snippet>first3 = numpy.dstack(firstmatrices)
</snippet></ROW><ROW><id>6031096</id><snippet>numpy.array(firstmatrices)</snippet></ROW><ROW><id>6031096</id><snippet>timeit numpy.dstack(firstmatrices)
10 loops, best of 3: 47.1 ms per loop


timeit numpy.array(firstmatrices)
1 loops, best of 3: 750 ms per loop
</snippet></ROW><ROW><id>6031096</id><snippet>vstack</snippet></ROW><ROW><id>6031096</id><snippet>timeit numpy.vstack(firstmatrices)
100 loops, best of 3: 18.2 ms per loop
</snippet></ROW><ROW><id>6031113</id><snippet>import pexpect
import sys

child = pexpect.spawn('ftp ftp.openbsd.org')
child.expect('(?i)name .*: ')
child.sendline('anonymous')
child.expect('(?i)password')
child.sendline('pexpect@sourceforge.net')
child.expect('ftp&gt; ')
child.sendline('cd /pub/OpenBSD/3.7/packages/i386')
child.expect('ftp&gt; ')
child.sendline('bin')
child.expect('ftp&gt; ')
child.sendline('prompt')
child.expect('ftp&gt; ')
child.sendline('pwd')
child.expect('ftp&gt; ')
print("Escape character is '^]'.\n")
sys.stdout.write (child.after)
sys.stdout.flush()
child.interact() # Escape character defaults to ^]
# At this point this script blocks until the user presses the escape character
# or until the child exits. The human user and the child should be talking
# to each other now.

# At this point the script is running again.
print 'Left interactve mode.'

# The rest is not strictly necessary. This just demonstrates a few functions.
# This makes sure the child is dead; although it would be killed when Python exits.
if child.isalive():
    child.sendline('bye') # Try to ask ftp child to exit.
    child.close()
# Print the final state of the child. Normally isalive() should be FALSE.
if child.isalive():
    print 'Child did not exit gracefully.'
else:
    print 'Child exited gracefully.'
</snippet></ROW><ROW><id>6031134</id><snippet>lib_dirs</snippet></ROW><ROW><id>6031134</id><snippet>lib_dirs = self.compiler.library_dirs + [
    '/lib64', '/usr/lib64',
    '/lib', '/usr/lib', '/usr/lib/x86_64-linux-gnu',
    ]
</snippet></ROW><ROW><id>6032023</id><snippet>def import_non_local(name, custom_name=None):
    import imp, sys

    custom_name = custom_name or name

    f, pathname, desc = imp.find_module(name, sys.path[1:])
    module = imp.load_module(custom_name, f, pathname, desc)
    f.close()

    return module

# Import non-local module, use a custom name to differentiate it from local
# This name is only used internally for identifying the module. We decide
# the name in the local scope by assigning it to the variable calendar.
calendar = import_non_local('calendar','std_calendar')

# import local module normally, as calendar_local
import calendar as calendar_local

print calendar.Calendar
print calendar_local
</snippet></ROW><ROW><id>6032083</id><snippet>p.set_clim([5, 50])</snippet></ROW><ROW><id>6032083</id><snippet>get_clim</snippet></ROW><ROW><id>6032083</id><snippet>set_clim</snippet></ROW><ROW><id>6032083</id><snippet>import matplotlib
import matplotlib.pyplot as plt
from matplotlib.collections import PatchCollection
from matplotlib.patches import Circle
import numpy as np

# (modified from one of the matplotlib gallery examples)
resolution = 50 # the number of vertices
N = 100
x       = np.random.random(N)
y       = np.random.random(N)
radii   = 0.1*np.random.random(N)
patches = []
for x1,y1,r in zip(x, y, radii):
    circle = Circle((x1,y1), r)
    patches.append(circle)

fig = plt.figure()
ax = fig.add_subplot(111)

colors = 100*np.random.random(N)
p = PatchCollection(patches, cmap=matplotlib.cm.jet, alpha=0.4)
p.set_array(colors)
ax.add_collection(p)
plt.colorbar(p)

plt.show()
</snippet></ROW><ROW><id>6032083</id><snippet>p.set_clim([5, 50])</snippet></ROW><ROW><id>6032083</id><snippet>p</snippet></ROW><ROW><id>6032083</id><snippet>plt.show(...)</snippet></ROW><ROW><id>6032694</id><snippet>open</snippet></ROW><ROW><id>6032763</id><snippet>my_turtles = []
for i in range(num_turtles):
    x = ...
    y = ...
    h = ...
    my_turtles.append(Turtle(x, y, h))
</snippet></ROW><ROW><id>6032763</id><snippet>my_turtles = [Turtle(..., ..., ...) for i in range(num_turtles)]
</snippet></ROW><ROW><id>6033534</id><snippet>import os

root = '/foo/'

for directory, subdirectories, files in os.walk(root):
  for file in files:
     if os.path.splitext(file)[-1].lower() == '.sh':
       os.system('sh ' + os.path.join(directory, file))
</snippet></ROW><ROW><id>6033651</id><snippet>a = "01000111000011"
a = a.replace("1", "%s")
b = "ORANGE"
print a % tuple(b)
</snippet></ROW><ROW><id>6033651</id><snippet>print "01000111000011".replace("1", "%s") % tuple("ORANGE")
</snippet></ROW><ROW><id>6033981</id><snippet>import readline

defaultText = 'I am the default value'
readline.set_startup_hook(lambda: readline.insert_text(defaultText))
res = raw_input('Edit this:')
print res
</snippet></ROW><ROW><id>6034978</id><snippet>pyc</snippet></ROW><ROW><id>6034978</id><snippet>ImportError: Bad magic number in /home/mostafa/python/list.pyc
</snippet></ROW><ROW><id>6034978</id><snippet>list.py</snippet></ROW><ROW><id>6034978</id><snippet>/home/mostafa/python/list.pyc</snippet></ROW><ROW><id>6034978</id><snippet>list</snippet></ROW><ROW><id>6034978</id><snippet>list.pyc</snippet></ROW><ROW><id>6034978</id><snippet>list.py</snippet></ROW><ROW><id>6035518</id><snippet>index=0
while True:
    cursor.execute('select * from verylargetable LIMIT %s,%s', (index, index+10000))
    records = cursor.fetchall()
    if len(records)==0:
          break
    file.write(records)
    index+=10000
file.close()
</snippet></ROW><ROW><id>6035530</id><snippet>newContent = re.compile(varRegEx, re.VERBOSE).sub(r'\1%s'%valStr.replace('\\', '\\\\'), cmdFileContent)
</snippet></ROW><ROW><id>6035864</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>6035864</id><snippet>distutils\cygwinccompiler.py</snippet></ROW><ROW><id>6035864</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>6035865</id><snippet>def main():
    files = [r'C:\_local\test.txt', r'C:\_local\junk.txt']
    funcs = []
    for f in files:
        # create a new lambda and store the current `f` as default to `path`
        funcs.append(lambda path=f: os.stat(path))
    print funcs

    # calling the lambda without a parameter uses the default value
    funcs[0]() 
    funcs[1]()
</snippet></ROW><ROW><id>6035865</id><snippet>f</snippet></ROW><ROW><id>6035865</id><snippet>def make_statfunc(f):
    return lambda: os.stat(f)

for f in files:
    # pass the current f to another function
    funcs.append(make_statfunc(f))
</snippet></ROW><ROW><id>6035865</id><snippet>from functools import partial
for f in files:
    # create a partially applied function
    funcs.append(partial(os.stat, f))
</snippet></ROW><ROW><id>6036156</id><snippet>os.path</snippet></ROW><ROW><id>6036156</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join('app', 'subdir', 'dir', 'filename.foo')
'app/subdir/dir/filename.foo'
</snippet></ROW><ROW><id>6036521</id><snippet>import MySQLdb
sql_dump = open('builtcode.sql', 'r').read()

conn = MySQLdb.connect(db='soans', passwd='*****')
cur = conn.cursor()

cur.execute(sql_dump)

cur.connection.close()
</snippet></ROW><ROW><id>6036521</id><snippet>mysql&gt; show tables;
+-----------------+
| Tables_in_soans |
+-----------------+
| anamnesis_main  |
| averagecontact  |
</snippet></ROW><ROW><id>6036987</id><snippet>dates = dict() // key is filename, value is date
for  subdir,dirs, files in os.walk(startdir):
if filename ends with "dwg":
     if filename contains "FINAL":
          date = getDate from filename 
          if dates contains filename
              prev = dates(filename)
          else 
              prev = zero date // a value so next line tests true always
          if date &gt; prev:
             dates(filename) = date
          // else previous is younger, so skip
    // else draft or as built and skip
// else filename not dwg and skip
for dates.values as v
    print v
</snippet></ROW><ROW><id>6037133</id><snippet># increment
p = (x, y)
counts[p] = counts.get(p, 0) + 1

# list
for (p, count) in counts.iteritems():
    x, y = p
    print x, y, count
</snippet></ROW><ROW><id>6037142</id><snippet>manage.py</snippet></ROW><ROW><id>6037142</id><snippet>settings.py</snippet></ROW><ROW><id>6037142</id><snippet>manage.py</snippet></ROW><ROW><id>6037142</id><snippet>manage.py</snippet></ROW><ROW><id>6037142</id><snippet>#!/usr/bin/env python
from django.core.management import execute_manager
try:
    import settings # Assumed to be in the same directory.
except ImportError:
    import sys
    sys.stderr.write("Error: Can't find the file 'settings.py' in the directory containing %r. It appears you've customized things.\nYou'll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it's causing an ImportError somehow.)\n" % __file__)
    sys.exit(1)

if __name__ == "__main__":
    execute_manager(settings)
</snippet></ROW><ROW><id>6037142</id><snippet>#!/usr/bin/env python
from django.core.management import execute_manager
import settings # Assumed to be in the same directory.

if __name__ == "__main__":
    execute_manager(settings)
</snippet></ROW><ROW><id>6037142</id><snippet>$ python manage.py runserver</snippet></ROW><ROW><id>6037400</id><snippet>current_active.sort(key=lambda x: x.assigned_tech)
</snippet></ROW><ROW><id>6037400</id><snippet>assigned_tech</snippet></ROW><ROW><id>6037643</id><snippet>re_generator = re.compile('&lt;meta name="generator" content="(.*?)" /?&gt;', re.IGNORECASE)
</snippet></ROW><ROW><id>6037657</id><snippet>def unflatten(dictionary):
    resultDict = dict()
    for key, value in dictionary.iteritems():
        parts = key.split(".")
        d = resultDict
        for part in parts[:-1]:
            if part not in d:
                d[part] = dict()
            d = d[part]
        d[parts[-1]] = value
    return resultDict
</snippet></ROW><ROW><id>6037758</id><snippet>list_of_lists = [[header0,  header1,  header2 ],
                 [r1c0data, r1c1data, r1c2data],
                 [r2c0data, r2c1data, r2c2data]]
</snippet></ROW><ROW><id>6037758</id><snippet>list_of_lists.append(new_list)</snippet></ROW><ROW><id>6037758</id><snippet>c4data = [header3, r1c3data, r2c3data]
for i, row in enumerate(list_of_lists):
    row.append(c4data[i])
</snippet></ROW><ROW><id>6037758</id><snippet>numpy.array</snippet></ROW><ROW><id>6037758</id><snippet>list_of_dicts = [{'column0':r0c0data, 'column1':r0c1data, 'column2':r0c2data},
                 {'column0':r1c0data, 'column1':r1c1data, 'column2':r1c2data}]
</snippet></ROW><ROW><id>6037758</id><snippet>tuple_key_dict = {(0, 0):r0c0data, (0, 1):r0c1data, (0, 2):r0c2data,
                  (0, 1):r0c1data, (1, 1):r1c1data, (1, 2):r1c2data}
</snippet></ROW><ROW><id>6037758</id><snippet>&gt;&gt;&gt; char_list = [''.join(set((a, b))) for a, b in zip('apfelbaum', 'appletree')]
&gt;&gt;&gt; char_list
['a', 'p', 'pf', 'el', 'el', 'bt', 'ar', 'eu', 'em']
</snippet></ROW><ROW><id>6037758</id><snippet>char_list</snippet></ROW><ROW><id>6037758</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; password_list = [''.join(tup) for tup in itertools.product(*char_list)]
&gt;&gt;&gt; print 'appletree' in password_list
True
&gt;&gt;&gt; print 'apfelbaum' in password_list
True
&gt;&gt;&gt; print 'apfletrum' in password_list
True
</snippet></ROW><ROW><id>6037914</id><snippet>from lxml.html import fromstring
from lxml import etree

html = '''
&lt;script&gt;bad_thing();&lt;/script&gt;
&lt;style&gt;* { background: #000; }&lt;/style&gt;
&lt;h1&gt;Hello world&lt;script&gt;bad_thing();&lt;/script&gt;&lt;/h1&gt;
Lorem ipsum
&lt;script&gt;bad_thing();&lt;/script&gt;
&lt;b&gt;Bold Text&lt;/b&gt;
'''

l = []
doc = fromstring(html)
for el in doc.xpath(".//h1|.//b"):
    i = etree.Element(el.tag)
    i.text, i.tail = el.text, el.tail
    l.append(etree.tostring(i))

print ''.join(l)
</snippet></ROW><ROW><id>6037914</id><snippet>&lt;h1&gt;Hello world&lt;/h1&gt;
Lorem ipsum
&lt;b&gt;Bold Text&lt;/b&gt;
</snippet></ROW><ROW><id>6037997</id><snippet>from mutagen.mp3 import MP3
audio = MP3("example.mp3")
print audio.info.length
</snippet></ROW><ROW><id>6038042</id><snippet>CLASSPATH</snippet></ROW><ROW><id>6038067</id><snippet>unicode</snippet></ROW><ROW><id>6038067</id><snippet>email_document = Template(u"""
 ...
</snippet></ROW><ROW><id>6038571</id><snippet>math.factorial(21)</snippet></ROW><ROW><id>6038571</id><snippet>dtype=object</snippet></ROW><ROW><id>6038571</id><snippet>np.log(np.array([x], dtype=object)) &lt;-&gt; np.array([x.log()], dtype=object)
</snippet></ROW><ROW><id>6038571</id><snippet>.log()</snippet></ROW><ROW><id>6038571</id><snippet>AttributeError</snippet></ROW><ROW><id>6038751</id><snippet>from numpy import array, dtype
from h5py import File
from operator import itemgetter

# Dummy data

d = dtype([('a', int),('b', int),('c', int)])
a = array([(1, 6, 4), (5, 7, 1), (9, 7, 8), (3, 1, 2), (2, 1, 6)],dtype=d)

hdf = File('tmp.hdf','a')
hdf.create_dataset('data',data=a)
hdf.flush()

# Extract data

dat = hdf.get('data',default=0)

sub = ['a','c']
get = itemgetter(*sub)

print get(dat)
</snippet></ROW><ROW><id>6038751</id><snippet>(array([1, 5, 9, 3, 2]), array([4, 1, 8, 2, 6]))
</snippet></ROW><ROW><id>6038942</id><snippet>import struct, collections

class CStruct(object):

    def __init__(self, typename, format_defn, lead_char="!"):
        self.names = []
        fmts = [lead_char]
        for line in format_defn.splitlines():
            name, fmt = line.split()
            self.names.append(name)
            fmts.append(fmt)
        self.formatstr = ''.join(fmts)
        self.struct = struct.Struct(self.formatstr)
        self.named_tuple_class = collections.namedtuple(typename, self.names)

    def object_from_bytes(self, byte_str):
        atuple = self.struct.unpack(byte_str)
        return self.named_tuple_class._make(atuple)

if __name__ == "__main__":
    # do this once
    pkt_def = """\
        u1 B
        u2 H
        u4 I"""
    cs = CStruct("Packet1", pkt_def)
    # do this once per incoming packet
    o = cs.object_from_bytes(b"\xF1\x00\xF2\x00\x00\x00\xF4")
    print(o)
    print(o.u4)
</snippet></ROW><ROW><id>6038942</id><snippet>Packet1(u1=241, u2=242, u4=244)
244
</snippet></ROW><ROW><id>6038993</id><snippet>reload()</snippet></ROW><ROW><id>6038993</id><snippet>try:
    reloading
except NameError:
    reloading = False # means the module is being imported
else:
    reloading = True # means the module is being reloaded
</snippet></ROW><ROW><id>6038993</id><snippet>import</snippet></ROW><ROW><id>6038993</id><snippet>reload()</snippet></ROW><ROW><id>6038993</id><snippet>import</snippet></ROW><ROW><id>6038993</id><snippet>import</snippet></ROW><ROW><id>6038993</id><snippet>reload()</snippet></ROW><ROW><id>6038993</id><snippet>imp</snippet></ROW><ROW><id>6039035</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6]
&gt;&gt;&gt; b = [3,5,7,9]
&gt;&gt;&gt; list(set(a).intersection(b))
[3, 5]
</snippet></ROW><ROW><id>6039411</id><snippet>import serial
s = serial.Serial(port='/dev/tty.usbmodemfa141', baudrate=9600)

s.write('text')
s.read()
s.readline()
</snippet></ROW><ROW><id>6039411</id><snippet>b'text'</snippet></ROW><ROW><id>6039516</id><snippet>mylist = [10, 2, 20, 5, 50]
found = (i for i in mylist if predicate(i)).next()
</snippet></ROW><ROW><id>6039623</id><snippet>global str

str = str(mar)
</snippet></ROW><ROW><id>6039623</id><snippet>str()</snippet></ROW><ROW><id>6039623</id><snippet>str</snippet></ROW><ROW><id>6039623</id><snippet>global</snippet></ROW><ROW><id>6039715</id><snippet>def __init__(self, user, passwd):
    self.__user = user
    self.__passwd = passwd
    urllib.FancyURLopener.__init__(self)
</snippet></ROW><ROW><id>6040041</id><snippet>resp, content = client.request(request_token_url, "POST",body=urllib.urlencode({'oauth_callback':my_callback_url}))</snippet></ROW><ROW><id>6040050</id><snippet>QNetworkReply::request()</snippet></ROW><ROW><id>6040050</id><snippet>QNetworkRequest</snippet></ROW><ROW><id>6040050</id><snippet>QNetworkRequest::url()</snippet></ROW><ROW><id>6040163</id><snippet>threading.Event</snippet></ROW><ROW><id>6040163</id><snippet>join</snippet></ROW><ROW><id>6040163</id><snippet>threading.Thread.join</snippet></ROW><ROW><id>6040163</id><snippet>Thread.join</snippet></ROW><ROW><id>6040163</id><snippet>Queue</snippet></ROW><ROW><id>6040163</id><snippet>class SocketClientThread(threading.Thread):
    """ Implements the threading.Thread interface (start, join, etc.) and
        can be controlled via the cmd_q Queue attribute. Replies are placed in
        the reply_q Queue attribute.
    """
    def __init__(self, cmd_q=Queue.Queue(), reply_q=Queue.Queue()):
        super(SocketClientThread, self).__init__()
        self.cmd_q = cmd_q
        self.reply_q = reply_q
        self.alive = threading.Event()
        self.alive.set()
        self.socket = None

        self.handlers = {
            ClientCommand.CONNECT: self._handle_CONNECT,
            ClientCommand.CLOSE: self._handle_CLOSE,
            ClientCommand.SEND: self._handle_SEND,
            ClientCommand.RECEIVE: self._handle_RECEIVE,
        }

    def run(self):
        while self.alive.isSet():
            try:
                # Queue.get with timeout to allow checking self.alive
                cmd = self.cmd_q.get(True, 0.1)
                self.handlers[cmd.type](cmd)
            except Queue.Empty as e:
                continue

    def join(self, timeout=None):
        self.alive.clear()
        threading.Thread.join(self, timeout)
</snippet></ROW><ROW><id>6040163</id><snippet>self.alive</snippet></ROW><ROW><id>6040163</id><snippet>run</snippet></ROW><ROW><id>6040207</id><snippet>i = "\n" + level*"  "
TypeError: object cannot be interpreted as an index
</snippet></ROW><ROW><id>6040207</id><snippet>print repr(elem), repr(level)</snippet></ROW><ROW><id>6040207</id><snippet>for elem in elem</snippet></ROW><ROW><id>6040207</id><snippet>indent(root)</snippet></ROW><ROW><id>6040207</id><snippet>def indent(self, elem, level=0)</snippet></ROW><ROW><id>6040207</id><snippet>[Python 2.6.6]
&gt;&gt;&gt; import xml.etree.ElementTree as et
&gt;&gt;&gt; et.Element('atag') * "   "
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: object cannot be interpreted as an index
</snippet></ROW><ROW><id>6040207</id><snippet>TypeError: can't multiply sequence by non-int of type 'Element'
</snippet></ROW><ROW><id>6040217</id><snippet>from collections import Sequence
from itertools import chain, count

def depth(seq):
    for level in count():
        if not seq:
            return level
        seq = list(chain.from_iterable(s for s in seq if isinstance(s, Sequence)))
</snippet></ROW><ROW><id>6040217</id><snippet>from collections import Sequence
from itertools import chain, count

def depth(seq):
    seq = iter(seq)
    try:
        for level in count():
            seq = chain([next(seq)], seq)
            seq = chain.from_iterable(s for s in seq if isinstance(s, Sequence))
    except StopIteration:
        return level
</snippet></ROW><ROW><id>6040648</id><snippet>xmpp/features.py</snippet></ROW><ROW><id>6040648</id><snippet>for i in discoverItems(conn, jid.getDomain()):
    (ids, features) = discoverInfo(conn, i.jid)
    if NS_MUC in features:
        print i.jid
</snippet></ROW><ROW><id>6040752</id><snippet># Python - it's so readable, the code basically just writes itself ;-)
#
with open('infile') as infile:
  with open('outfile', 'w') as outfile:
    for line in infile:
      fields = line.split('\t')
      outfile.write(','.join(fields))
</snippet></ROW><ROW><id>6040922</id><snippet>dot.write_png('filename.png')</snippet></ROW><ROW><id>6040922</id><snippet>neato</snippet></ROW><ROW><id>6040922</id><snippet>-n</snippet></ROW><ROW><id>6041035</id><snippet> out = [set(range(x, y))]
 for in_set in input:
    out_diff = [out_set - in_set for out_set in out]
    out_union = [out_set &amp; in_set for out_set in out]
    out = out_diff + out_union
</snippet></ROW><ROW><id>6041645</id><snippet>&gt;&gt;&gt; s = StringIO()
&gt;&gt;&gt; pickle.dump([], s)
&gt;&gt;&gt; s.getvalue()
'(l.'
</snippet></ROW><ROW><id>6041645</id><snippet>'(d.'</snippet></ROW><ROW><id>6041645</id><snippet>dict</snippet></ROW><ROW><id>6041645</id><snippet>sizeof</snippet></ROW><ROW><id>6041645</id><snippet>dict</snippet></ROW><ROW><id>6041645</id><snippet>list</snippet></ROW><ROW><id>6041645</id><snippet>dict</snippet></ROW><ROW><id>6041645</id><snippet>malloc</snippet></ROW><ROW><id>6042088</id><snippet>l = [{'name':'Bernard','age':7},{'name':'George','age':4},{'name':'Reginald','age':6}]
d = dict((i['name'], i['age']) for i in l)
</snippet></ROW><ROW><id>6042088</id><snippet>d</snippet></ROW><ROW><id>6042088</id><snippet>{'Bernard': 7, 'George': 4, 'Reginald': 6}
</snippet></ROW><ROW><id>6042088</id><snippet>'Harold' in d   -&gt; False
'George' in d   -&gt; True
</snippet></ROW><ROW><id>6042127</id><snippet>m = f.readline()</snippet></ROW><ROW><id>6042127</id><snippet>1000</snippet></ROW><ROW><id>6042407</id><snippet>In [5]: webbrowser.get('/usr/bin/google-chrome %s').open('http://google.com')
Created new window in existing browser session.
Out[5]: True

In [6]: webbrowser.get('firefox %s').open('http://google.com')
Out[6]: True
</snippet></ROW><ROW><id>6042505</id><snippet>scipy.linalg.solve</snippet></ROW><ROW><id>6042505</id><snippet>doptri</snippet></ROW><ROW><id>6042505</id><snippet>scipy.linalg</snippet></ROW><ROW><id>6042910</id><snippet>&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2011, 5, 18, 10, 59, 42, 518352)
</snippet></ROW><ROW><id>6042925</id><snippet>[^\S\r\n]
</snippet></ROW><ROW><id>6043273</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; start_time = datetime.now()
&gt;&gt;&gt; start_time
datetime.datetime(2011, 5, 18, 20, 38, 55, 546000)
&gt;&gt;&gt; first = start_time.replace(minute=0, second=0, microsecond=0)+timedelta(hours=1)
&gt;&gt;&gt; first
datetime.datetime(2011, 5, 18, 21, 0)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6043667</id><snippet>with open('seq.txt', mode='r', encoding='utf-8') as infile:
    with open('seqpar.txt', mode='w', encoding='utf-8') as outfile:
        for line in infile:
            outfile.write(line.strip("\n"))
        # Or alternatively -- more efficient, but perhaps less pythonic:
        # outfile.write(infile.read().replace("\n", ""))
</snippet></ROW><ROW><id>6043673</id><snippet>\r\n</snippet></ROW><ROW><id>6043673</id><snippet>\n</snippet></ROW><ROW><id>6043673</id><snippet>input = open('c:/text.txt', 'rb')
</snippet></ROW><ROW><id>6043797</id><snippet>def split_utf8(s, n):
    """Split UTF-8 s into chunks of maximum length n."""
    while len(s) &gt; n:
        k = n
        while (ord(s[k]) &amp; 0xc0) == 0x80:
            k -= 1
        yield s[:k]
        s = s[k:]
    yield s
</snippet></ROW><ROW><id>6043797</id><snippet>"é"</snippet></ROW><ROW><id>6043797</id><snippet>"e"</snippet></ROW><ROW><id>6043797</id><snippet>"´"</snippet></ROW><ROW><id>6044172</id><snippet>package.subpackage</snippet></ROW><ROW><id>6044172</id><snippet>/package/subpackage/__init__.py</snippet></ROW><ROW><id>6044172</id><snippet>from .. import file</snippet></ROW><ROW><id>6044172</id><snippet>file</snippet></ROW><ROW><id>6044172</id><snippet>package.subpackage</snippet></ROW><ROW><id>6044172</id><snippet>package.file</snippet></ROW><ROW><id>6044908</id><snippet>date</snippet></ROW><ROW><id>6044908</id><snippet>time.strftime</snippet></ROW><ROW><id>6044908</id><snippet>glob.glob</snippet></ROW><ROW><id>6044908</id><snippet>cat</snippet></ROW><ROW><id>6044908</id><snippet>bzip2</snippet></ROW><ROW><id>6044908</id><snippet>bz2</snippet></ROW><ROW><id>6044908</id><snippet>p.communicate</snippet></ROW><ROW><id>6044908</id><snippet>select.select</snippet></ROW><ROW><id>6044908</id><snippet>import sys
import bz2
import glob
import time
import threading
import subprocess

output_filename = '../whatever.bz2'
input_filenames = glob.glob(time.strftime("xyz_%F_*.log"))
p = subprocess.Popen(['filter', 'args'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
output = open(output_filename, 'wb')
output_compressor = bz2.BZ2Compressor()

def data_reader():
    for filename in input_filenames:
        f = open(filename, 'rb')
        p.stdin.writelines(iter(lambda: f.read(8192), ''))
    p.stdin.close()

input_thread = threading.Thread(target=data_reader)
input_thread.start()

with output:
    for chunk in iter(lambda: p.stdout.read(8192), ''):
        output.write(output_compressor.compress(chunk))

    output.write(output_compressor.flush())

input_thread.join()
p.wait()
</snippet></ROW><ROW><id>6044908</id><snippet>magic</snippet></ROW><ROW><id>6044908</id><snippet>open_autodecompress</snippet></ROW><ROW><id>6044908</id><snippet>import os
import gzip
import bz2
try:
    import magic
except ImportError:
    has_magic = False
else:
    has_magic = True


mime_openers = {
    'application/x-bzip2': bz2.BZ2File,
    'application/x-gzip': gzip.GzipFile,
}

ext_openers = {
    '.bz2': bz2.BZ2File,
    '.gz': gzip.GzipFile,
}


def open_autodecompress(filename, mode='r'):
    if has_magic:
        ms = magic.open(magic.MAGIC_MIME_TYPE)
        ms.load()
        mimetype = ms.file(filename)
        opener = mime_openers.get(mimetype, open)
    else:
        basepart, ext = os.path.splitext(filename)
        opener = ext_openers.get(ext, open)
    return opener(filename, mode)
</snippet></ROW><ROW><id>6044925</id><snippet>def myview(request):
    session = DBsession()
    session.add(model)
</snippet></ROW><ROW><id>6045074</id><snippet>category = forms.ModelChoiceField(queryset=Category.objects.all(), 
                                  empty_label="(Nothing)")
</snippet></ROW><ROW><id>6045155</id><snippet>subprocess</snippet></ROW><ROW><id>6045155</id><snippet>stdout</snippet></ROW><ROW><id>6045155</id><snippet>sys.stdin</snippet></ROW><ROW><id>6045260</id><snippet>import lxml.etree

TEST="&lt;html&gt;&lt;h1&gt;...&lt;/html&gt;"

def insert_section(root):
    tables = root.findall(".//table")
    for table in tables:
        section = ET.Element("section")
        table.addprevious(section)
        section.insert(0, table)   # this moves the table

root = ET.fromstring(TEST)
insert_section(root)
print ET.tostring(root)
</snippet></ROW><ROW><id>6045587</id><snippet>import numpy
nplats = numpy.array(lats)
nplons = numpy.array(lons)

# this part is 20x faster than using the built-in python functions
index = numpy.argmin(nplats)

print nplats[index], nplons[index]
</snippet></ROW><ROW><id>6045647</id><snippet>(?:[0-9]{1,3}\.){3}[0-9]{1,3}
</snippet></ROW><ROW><id>6045727</id><snippet>f.close</snippet></ROW><ROW><id>6045727</id><snippet>f = open('wunder-data.txt', 'w')</snippet></ROW><ROW><id>6045835</id><snippet>def openFile(file):
    if sys.platform == 'linux2':
        subprocess.call(["xdg-open", file])
    else:
        os.startfile(file)
</snippet></ROW><ROW><id>6045835</id><snippet>widget.connect(button, QtCore.SIGNAL('clicked()'), openFile(file))
</snippet></ROW><ROW><id>6045930</id><snippet>MAKE_STANDARD_CONNECTION()
SEND_DATA('01','02','03','04','05')
</snippet></ROW><ROW><id>6045930</id><snippet>values = [somefunc(i) for i in range(5)]
MAKE_STANDARD_CONNECTION()
SEND_DATA(*values)
</snippet></ROW><ROW><id>6045930</id><snippet>somefunc</snippet></ROW><ROW><id>6046151</id><snippet>dict1 = {"a":0.6, "b":0.3, "c":0.9, "d":1.2, "e":0.2}
dict2 = {"a":1.4, "b":7.7, "c":9.0, "d":2.5, "e":2.0}
k1 = sorted(dict1, key=dict1.get)
k2 = sorted(dict2, key=dict2.get)
diffs = dict((k, k2.index(k) - k1.index(k)) for k in dict1)
</snippet></ROW><ROW><id>6046151</id><snippet>ranks1 = dict(map(reversed, enumerate(sorted(dict1, key=dict1.get))))
ranks2 = dict(map(reversed, enumerate(sorted(dict2, key=dict2.get))))
diffs = dict((k, ranks2[k] - ranks1[k]) for k in dict1)
</snippet></ROW><ROW><id>6046423</id><snippet>openFile('C:\file.txt')</snippet></ROW><ROW><id>6046423</id><snippet>openFile('C:\file.txt')</snippet></ROW><ROW><id>6046423</id><snippet> widget.connect(button, QtCore.SIGNAL('clicked()'), lambda: openFile('C:\file.txt'))
</snippet></ROW><ROW><id>6046591</id><snippet>C:\&gt;python
Python 2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open(r"U:\foo.txt")
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6046591</id><snippet>import os
import sys

path = sys.argv[1]
basepath, fname = os.path.split(path)
print "directory:", basepath
if os.path.exists(basepath):
    print "directory exists"
else:
    print "directory does not exist!"
    sys.exit()

if not fname:
    print "no filename provided!"
    sys.exit()
print "filename:", fname
if os.path.exists(path):
    print "filename exists"
else:
    print "filename not found!"
    print "directory contents:"
    for fn in os.listdir(basepath):
        print fn
</snippet></ROW><ROW><id>6046831</id><snippet>render</snippet></ROW><ROW><id>6046831</id><snippet>return HttpResponse(open('myxmlfile.xml').read())
</snippet></ROW><ROW><id>6046866</id><snippet>p1.stdout</snippet></ROW><ROW><id>6046866</id><snippet>SIGPIPE</snippet></ROW><ROW><id>6046866</id><snippet>SIGPIPE</snippet></ROW><ROW><id>6046907</id><snippet>from django.db import models
</snippet></ROW><ROW><id>6047078</id><snippet>python -tt</snippet></ROW><ROW><id>6047082</id><snippet>xlrd</snippet></ROW><ROW><id>6047143</id><snippet>Model.get_by_id(ids)</snippet></ROW><ROW><id>6047439</id><snippet>for number in range(1, 301, 100):
    low = number
    high = low + 100
</snippet></ROW><ROW><id>6047897</id><snippet>Django&gt;=1.3,&lt;1.4
</snippet></ROW><ROW><id>6047897</id><snippet>Django&gt;=1.3,&lt;1.3.99
</snippet></ROW><ROW><id>6048073</id><snippet>xidx = (raw[:,0]-xrange[0]).astype(int)
yidx = (raw[:,1]-yrange[0]).astype(int)

Z[xidx, yidx] = raw[:,2]
</snippet></ROW><ROW><id>6048198</id><snippet>"w+r"</snippet></ROW><ROW><id>6048198</id><snippet>f = open("log.txt", "r")
log = f.read()
if "200 COMPLETE" in log:
    # Do something
</snippet></ROW><ROW><id>6048203</id><snippet>foo = u'Δ, Й, ק, ‎ م, ๗, あ, 叶, 葉, and 말.'
f = open('test', 'w')
f.write(foo.encode('utf8'))
f.close()
</snippet></ROW><ROW><id>6048203</id><snippet>f = file('test', 'r')
print f.read().decode('utf8')
</snippet></ROW><ROW><id>6048566</id><snippet>if (Serial.available()){
    delay(100); // Wait for all data.
    while (Serial.available()) {
        char d = Serial.read();
        str.concat(d);
    }
}
</snippet></ROW><ROW><id>6048566</id><snippet>Serial.read()</snippet></ROW><ROW><id>6048639</id><snippet>import hashlib
import time

hash = hashlib.sha1()
hash.update(str(time.time()))
print hash.hexdigest()
print hash.hexdigest()[:10]
</snippet></ROW><ROW><id>6048789</id><snippet>django.conf.settings</snippet></ROW><ROW><id>6048816</id><snippet>from urllib import urlopen
import re
p = re.compile(r'&lt;h2&gt;&lt;a\s.*?href="(.*?)"&gt;(.*?)&lt;/a&gt;')
text = urlopen('http://python.org/community/jobs').read()
print text
for url, name in p.findall(text):
    print '%s (%s)' % (name, url)
</snippet></ROW><ROW><id>6048833</id><snippet>['copy', exe_file_path, temp_loc]</snippet></ROW><ROW><id>6048833</id><snippet>exe_file_path</snippet></ROW><ROW><id>6048833</id><snippet>temp_loc</snippet></ROW><ROW><id>6048833</id><snippet>exe_file_path</snippet></ROW><ROW><id>6048833</id><snippet>os.path.join</snippet></ROW><ROW><id>6050009</id><snippet>% tree .
.
|-- foo
|   |-- __init__.py
|   `-- __init__.pyc
`-- foo.py
</snippet></ROW><ROW><id>6050009</id><snippet>foo.py</snippet></ROW><ROW><id>6050009</id><snippet>% cat foo.py 
print 'you have imported foo.py'
</snippet></ROW><ROW><id>6050009</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>6050009</id><snippet>% cat foo/__init__.py
print 'you have imported foo/__init__.py'
</snippet></ROW><ROW><id>6050009</id><snippet>&gt;&gt;&gt; import foo
you have imported foo/__init__.py
</snippet></ROW><ROW><id>6050072</id><snippet>s.unpack('H*')[0].to_i(16).to_s 36
</snippet></ROW><ROW><id>6050072</id><snippet>[s36.to_i(36).to_s(16)].pack 'H*'
</snippet></ROW><ROW><id>6050457</id><snippet>        control = getattr(self, "btnProduct%s" % (str(buttonNo)))
        control.SetLabel("")
</snippet></ROW><ROW><id>6050722</id><snippet>proc</snippet></ROW><ROW><id>6050722</id><snippet>os.open</snippet></ROW><ROW><id>6050722</id><snippet>import subprocess
import shlex
import os

fd=os.open('passphrase.txt',os.O_RDONLY)
cmd='gpg --passphrase-fd {fd} -c'.format(fd=fd)
with open('filename.txt','r') as stdin_fh:
    with open('filename.gpg','w') as stdout_fh:        
        proc=subprocess.Popen(shlex.split(cmd),
                              stdin=stdin_fh,
                              stdout=stdout_fh)        
        proc.communicate()
os.close(fd)
</snippet></ROW><ROW><id>6050722</id><snippet>os.pipe</snippet></ROW><ROW><id>6050722</id><snippet>import subprocess
import shlex
import os

PASSPHRASE='...'

in_fd,out_fd=os.pipe()
os.write(out_fd,PASSPHRASE)
os.close(out_fd)
cmd='gpg --passphrase-fd {fd} -c'.format(fd=in_fd)
with open('filename.txt','r') as stdin_fh:
    with open('filename.gpg','w') as stdout_fh:        
        proc=subprocess.Popen(shlex.split(cmd),
                              stdin=stdin_fh,
                              stdout=stdout_fh )        
        proc.communicate()
os.close(in_fd)
</snippet></ROW><ROW><id>6050985</id><snippet>setattr(sys.modules["P"], "S", sys.modules["P.S"])</snippet></ROW><ROW><id>6051070</id><snippet>HOST</snippet></ROW><ROW><id>6051779</id><snippet>alter table yourTableName DEFAULT CHARACTER SET utf8;
</snippet></ROW><ROW><id>6052349</id><snippet>for i in [1,2,3]:
    try:
        z.append(i/(i-1))
    except ZeroDivisionError:
        z.append("error")
</snippet></ROW><ROW><id>6052378</id><snippet>file_format = {'year' : (0, 3, int), 'price' : (4, 10, float)}

def build_value(v):
    try:
        return v[2](line[v[0]:v[1]])
    except ValueError:
        print("cannot parse line {}".format(lineno))

for lineno, line in enumerate(input_file):
    fields = {k : build_value(v) for k, v in file_format.items()}
</snippet></ROW><ROW><id>6052666</id><snippet>def remove_section(alist, start, end):
    return alist[:start] + alist[end+1:]
</snippet></ROW><ROW><id>6052801</id><snippet>python-2.6.6-macosx10.3.dmg</snippet></ROW><ROW><id>6052854</id><snippet>+</snippet></ROW><ROW><id>6052854</id><snippet>logfile.write(str(count) + "\n")
logfile.write(str(count) + "\n")
</snippet></ROW><ROW><id>6052854</id><snippet>while</snippet></ROW><ROW><id>6052854</id><snippet>count</snippet></ROW><ROW><id>6052854</id><snippet>for x in range(0, end + 1):
    logfile.write((str(x) + "\n") * 2)
    print(x)
</snippet></ROW><ROW><id>6052976</id><snippet>class SomeMixin(object):
    def __init__(self, *args, **kwargs):
        super(SomeMixin, self).__init__(*args, **kwargs)
        for name, field in self.fields.iteritems():
            field.widget = field.hidden_widget()
            field.required = False
</snippet></ROW><ROW><id>6052976</id><snippet>super</snippet></ROW><ROW><id>6052976</id><snippet>super</snippet></ROW><ROW><id>6052976</id><snippet>class HiddenSlideForm(SomeMixin, SlideForm):
    pass

class HiddenDeckForm(SomeMixin, DeckForm):
    pass
</snippet></ROW><ROW><id>6052976</id><snippet>*Form</snippet></ROW><ROW><id>6052976</id><snippet>__init__</snippet></ROW><ROW><id>6052976</id><snippet>class HiddenSlideForm(SomeMixin, SlideForm):
    def __init__(self, *args, **kwargs):
        super(HiddenSlideForm, self).__init__(*args, **kwargs)
        do_something_special()
</snippet></ROW><ROW><id>6052976</id><snippet>object</snippet></ROW><ROW><id>6053296</id><snippet>delayedDoSomethings()</snippet></ROW><ROW><id>6053296</id><snippet>delayedDoSomething()</snippet></ROW><ROW><id>6053296</id><snippet>def delayedDoSomethings():
    def work():
        for i in rance(1, 10000000):
            print 'hi',i
    import thread
    thread.start_new_thread(separateThread, ()) #run the work function in a separate thread.
</snippet></ROW><ROW><id>6053350</id><snippet>import libtorrent as lt
import time

ses = lt.session()
params = { 'save_path': '/home/downloads/'}
link = "magnet:?xt=urn:btih:4MR6HU7SIHXAXQQFXFJTNLTYSREDR5EI&amp;tr=http://tracker.vodo.net:6970/announce"
handle = lt.add_magnet_uri(ses, link, params)

print 'downloading metadata...'
while (not handle.has_metadata()): time.sleep(1)
print 'got metadata, starting torrent download...'
while (handle.status().state != lt.torrent_status.seeding):
    print '%d %% done' % (handle.status().progress*100)
    time.sleep(1)
</snippet></ROW><ROW><id>6053639</id><snippet>https://login.yahoo.com/config/login?</snippet></ROW><ROW><id>6053639</id><snippet>http://example.com/login.php</snippet></ROW><ROW><id>6053639</id><snippet>/login.php</snippet></ROW><ROW><id>6053639</id><snippet>login.php</snippet></ROW><ROW><id>6053639</id><snippet>example.com</snippet></ROW><ROW><id>6053639</id><snippet>/config/login?</snippet></ROW><ROW><id>6053767</id><snippet>web.template</snippet></ROW><ROW><id>6053767</id><snippet>select</snippet></ROW><ROW><id>6053767</id><snippet>import web

TEMPLATE = '''$def with (rows, cols)
&lt;html&gt;&lt;body&gt;
&lt;h2&gt;Results:&lt;/h2&gt;
&lt;table&gt;
&lt;tr&gt;
$for col in cols:
    &lt;th&gt;$col&lt;/th&gt;
&lt;/tr&gt;
$for row in rows:
    &lt;tr&gt;
    $for col in cols:
        &lt;td&gt;$row[col]&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;'''

class query:
    def GET(self, arg):
        res = db.select('player', what='id,name')
        cols = []
        rows = res.list()
        if rows:
            cols = rows[0].keys()
        return tmpl(rows, cols)

db = web.database(dbn='mysql')
tmpl = web.template.Template(TEMPLATE)
urls = ('/(.*)', 'query')

if __name__ == '__main__':
    app = web.application(urls, globals())
    app.run()
</snippet></ROW><ROW><id>6053767</id><snippet>&lt;html&gt;&lt;body&gt;
&lt;h2&gt;Results:&lt;/h2&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;/tr&gt; 
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt; &lt;td&gt;Joe&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gary&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt; &lt;td&gt;3&lt;/td&gt;&lt;td&gt;Fred&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>6054398</id><snippet>_winreg.OpenKey</snippet></ROW><ROW><id>6054398</id><snippet>_winreg.EnumKey</snippet></ROW><ROW><id>6054398</id><snippet>_winreg.HKEY_CLASSES_ROOT</snippet></ROW><ROW><id>6054567</id><snippet>Deck</snippet></ROW><ROW><id>6054567</id><snippet>formset</snippet></ROW><ROW><id>6054665</id><snippet>read()</snippet></ROW><ROW><id>6054665</id><snippet>os.stat()</snippet></ROW><ROW><id>6054665</id><snippet>st_size</snippet></ROW><ROW><id>6054675</id><snippet>HTTPError</snippet></ROW><ROW><id>6054675</id><snippet>cherrypy.response.headers</snippet></ROW><ROW><id>6054675</id><snippet>cherrypy.response.status</snippet></ROW><ROW><id>6054675</id><snippet>import cherrypy

class Root:
    def index(self):
        cherrypy.response.headers['Retry-After'] = 60
        cherrypy.response.status = 503
        # Feel free to return a better error page than the following
        return "&lt;h1&gt;Service Unavailable&lt;/h1&gt;"
    index.exposed = True

cherrypy.quickstart(Root())
</snippet></ROW><ROW><id>6054887</id><snippet>In [1]: set('harpy') &amp; set('happy')
Out[1]: set(['a', 'h', 'p', 'y'])
</snippet></ROW><ROW><id>6054887</id><snippet>In [17]: [l in 'happy' for l in 'harpy']
Out[17]: [True, True, False, True, True]
</snippet></ROW><ROW><id>6054887</id><snippet>In [2]: [l==r for l,r in zip('happy','harpy')]
Out[2]: [True, True, False, True, True]
</snippet></ROW><ROW><id>6054887</id><snippet>In [49]: real='lasts'

In [50]: guess='brass'

In [51]: exact=[l==r for l,r in zip(real,guess)]

In [52]: approx=[l in real for l in guess]

In [53]: chars=[[' ','~'],['!','!']]

In [54]: print guess, '\n', ''.join(chars[e][a] for e,a in zip(exact,approx))
brass 
  ~~!
</snippet></ROW><ROW><id>6055738</id><snippet>input()</snippet></ROW><ROW><id>6055738</id><snippet>"s\r"</snippet></ROW><ROW><id>6055892</id><snippet>inputs = ["abc def", ...]
inputs_map = zip(inputs, [i.replace(' ', '') for i in inputs])

user_input = get_user_input()

user_input = inputs_map.get(user_input, user_input)
</snippet></ROW><ROW><id>6056313</id><snippet>models.GeoManager</snippet></ROW><ROW><id>6056313</id><snippet>class TestModel(models.Model):
    name = models.CharField(max_length=10)
    location = models.PointField()

    objects = models.GeoManager()
</snippet></ROW><ROW><id>6056453</id><snippet>u"php"</snippet></ROW><ROW><id>6056453</id><snippet>repr()</snippet></ROW><ROW><id>6056453</id><snippet>json.dumps([unicode(t) for t in tags_found])</snippet></ROW><ROW><id>6056453</id><snippet>json.dumps(map(unicode, tags_found))</snippet></ROW><ROW><id>6056570</id><snippet>a</snippet></ROW><ROW><id>6056570</id><snippet>b</snippet></ROW><ROW><id>6056570</id><snippet>c</snippet></ROW><ROW><id>6056570</id><snippet>from numpy import recarray

desc = {'names': ('a', 'b'), 'formats': ('S4', 'f4')}
c = recarray((10,),dtype=desc)

a = list('abcdefghij'); b = range(10)

c['a'] = a
c['b'] = b

print r
</snippet></ROW><ROW><id>6056570</id><snippet>[('a', 0.0) ('b', 1.0) ('c', 2.0) ('d', 3.0) ('e', 4.0) ('f', 5.0)
 ('g', 6.0) ('h', 7.0) ('i', 8.0) ('j', 9.0)]
</snippet></ROW><ROW><id>6056611</id><snippet>query = A.all()
query._keys_only = True 
</snippet></ROW><ROW><id>6056619</id><snippet>from django.views.generic import TemplateView

urlpatterns = patterns('',
    url(r'^path/to/something/$', TemplateView.as_view(template_name="your_temlate.html"), name="something" ),
    url(r'^path/to/something/else/$', TemplateView.as_view(template_name="your_temlate_else.html"), name="something_else" ),
)
</snippet></ROW><ROW><id>6056619</id><snippet>&lt;a href="{% url something %}"&gt;Link to something&lt;/a&gt;
&lt;a href="{% url something_else %}"&gt;Link to something else&lt;/a&gt;
</snippet></ROW><ROW><id>6056768</id><snippet>#!/usr/bin/perl -l
use strict;
use warnings;

my $string = "The moon is made of cheese";
my $search = 'de of ch';
my $pos = index($string, $search);
if ($pos != -1) {
    my $substr = substr($string, 0, $pos);
    my @words = split /\s+/, $substr;
    print "found in word #", $#words, "\n";
} else {
    print "not found\n";
}
</snippet></ROW><ROW><id>6056768</id><snippet>found in word #3
</snippet></ROW><ROW><id>6056944</id><snippet># File Name RandonProteinSequences.py
# standard library
import os
import random

# biopython
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC
from Bio.SeqRecord import SeqRecord
import Bio.writers.SeqRecord.fasta
from Bio import SeqIO
from sys import *

residueList1 = ["C","D","E","F","G","H","I"]
residueList2 = ["A","K","L","M","N","S"]
residueList3 = ["P","Q","R","T","V","W","Y"]
residueList4 = ["C","A","G","U"]
def getProteinSeqRecord(residue, seqcount):
    strSeq = ""
    for i in range(0,100,1):
        index = random.randint(0, len(residue)-1)
        strSeq += residue[index]

    sequence = Seq(strSeq, IUPAC.IUPACProtein)
    seqRec = SeqRecord(sequence, id = 'randSeq' + str(seqcount), description= 'A random sequence using Amino acid residues.')
    return seqRec

def getProteinSequence(residue):
    strSeq = ""
    for i in range(0,100,1):
        index = random.randint(0, len(residue)-1)
        strSeq += residue[index]

    sequence = Seq(strSeq, IUPAC.IUPACProtein)
    return sequence

def randomProteinSeqRecord(index):
    if(index%2)==0:
        return getProteinSeqRecord(residueList1, index)
    elif(index%3)==0:
        return getProteinSeqRecord(residueList2, index)
    else:
        return getProteinSeqRecord(residueList3, index)

#information
print '--- This is python based program to generate random sequences ---'
print '--- Provide number of random sequences to generate. Default 10 ---'
print '--- Inorder to save to a file provide file path or filename ---'
print '--- If none or invalid filepath is provided then results will be displayed to console ---'
print '--- The file will be created in fasta format ---'
print

filepathProvided = False
#raw_input received the user input as string
try:
    filepath = raw_input('Enter filepath to save sequences ... ')
    filepath = filepath + '.fasta'
    handle = open(filepath, "w")
    handle.close()

    filepathProvided = True
except IOError:
    print 'Invalid or No File provided will print results to console'
print
ranSeqCount = 10
try:
    ranSeqCount = int(raw_input('Enter number of random sequences to generate ... '))
except ValueError:
    ranSeqCount = 10
pass

if(filepathProvided):
    handle = open(filepath, "w")

if(filepathProvided):
    fasta_writer = Bio.writers.SeqRecord.fasta.WriteFasta(handle)
else:
    fasta_writer = Bio.writers.SeqRecord.fasta.WriteFasta(stdout)
print 'Sequence Count : '
print ranSeqCount

for i in range(0,ranSeqCount,1):
    fasta_writer.write(randomProteinSeqRecord(i+1))
if(filepathProvided):
    handle.close()
print 'File created at : ' + filepath

print
raw_input('Press any key to exit ...')
print
</snippet></ROW><ROW><id>6056955</id><snippet>from pykml.factory import KML_ElementMaker as K
from lxml import etree

#line_points here comes from a geojson object
data = json.loads(open('tib.json').read())
line_points = data['features'][0]['geometry']['coordinates']

_doc = K.kml()

doc = etree.SubElement(_doc, 'Document')

for i, item in enumerate(line_points):
    doc.append(K.Placemark(
        K.name('pl'+str(i+1)),
        K.Point(
            K.coordinates(
                str(item).strip('[]').replace(' ', '')
                )
        )
    )
)

doc.append(K.Placemark(
    K.name('path'),
    K.LineStyle(
        K.color('#00FFFF'),
        K.width(10)
    ),
    K.LineString(
        K.coordinates(
            ' '.join([str(item).strip('[]').replace(' ', '') for item in line_points])
        )
    )
))

s = etree.tostring(_doc)

print s
</snippet></ROW><ROW><id>6056955</id><snippet>line_points</snippet></ROW><ROW><id>6056955</id><snippet>[[-134.15611799999999, 34.783318000000001, 0],
 [-134.713527, 34.435267000000003, 0],
 [-133.726201, 36.646867, 0],
 [-132.383655, 35.598272999999999, 0],
 [-132.48034200000001, 36.876308999999999, 0],
 [-131.489846, 36.565426000000002, 0],...
</snippet></ROW><ROW><id>6057065</id><snippet>def __getitem__(self, i):
    funcs = self._months[i]
    if isinstance(i, slice):
        return [f(self.format) for f in funcs]
    else:
        return funcs(self.format)
</snippet></ROW><ROW><id>6057065</id><snippet>isinstance</snippet></ROW><ROW><id>6057454</id><snippet>minute = now % 60
seconds = now / 60
</snippet></ROW><ROW><id>6057551</id><snippet>a3</snippet></ROW><ROW><id>6057551</id><snippet>'h3:contains(u"\xa3")'
</snippet></ROW><ROW><id>6057551</id><snippet>u'h3:contains("\u00a3")'
</snippet></ROW><ROW><id>6058013</id><snippet>row</snippet></ROW><ROW><id>6058013</id><snippet>[]</snippet></ROW><ROW><id>6058013</id><snippet>row[0]</snippet></ROW><ROW><id>6058013</id><snippet>if not row: continue
row = [x.strip() for x in row] # remove leading and trailing whitespace from all fields
if not row[0] or row[0] == "xxx": continue
if row[0] == "type":
    # code to write headings goes here
else:
    # code to write data goes here
row_count += 1 # pass_count is pointless
</snippet></ROW><ROW><id>6058013</id><snippet>xlwt</snippet></ROW><ROW><id>6058013</id><snippet>Attempt to overwrite cell: sheetname=u'x' rowx=0 colx=0</snippet></ROW><ROW><id>6058013</id><snippet>workbook.add_sheet(u'Some Sheet Name', cell_overwrite_ok=True)</snippet></ROW><ROW><id>6058013</id><snippet>str()</snippet></ROW><ROW><id>6058013</id><snippet>ws = wb.add_sheet(str(f_short_name))</snippet></ROW><ROW><id>6058013</id><snippet>unicode</snippet></ROW><ROW><id>6058184</id><snippet>sh: mysql_config: not found
</snippet></ROW><ROW><id>6058464</id><snippet>reactor.callFromThread</snippet></ROW><ROW><id>6058464</id><snippet>def process_IN_CREATE(self, event):
    reactor.callFromThread(
        SerialPort, Handler(), "/dev/ttyACM1", reactor, baudrate='9600')
</snippet></ROW><ROW><id>6058464</id><snippet>pyinotify</snippet></ROW><ROW><id>6058464</id><snippet>twisted.internet.inotify</snippet></ROW><ROW><id>6058464</id><snippet>from twisted.python.filepath import FilePath
from twisted.internet.inotify import IN_CREATE, INotify
from twisted.internet import reactor

def created(ignored, path, mask):
    SerialPort(
        Handler(),
        "/dev/ttyACM1", # Or... use `path` here?
        reactor, baudrate='9600')

notifier = INotify()
notifier.watch(FilePath("/some/directory"), IN_CREATE, callbacks=[created])
notifier.startReading()

reactor.run()
</snippet></ROW><ROW><id>6058506</id><snippet>glibc</snippet></ROW><ROW><id>6058506</id><snippet>crypt.crypt</snippet></ROW><ROW><id>6058506</id><snippet>man crypt</snippet></ROW><ROW><id>6058506</id><snippet>import crypt
encrypted = crypt.crypt(password, '$6$' + salt + '$')
</snippet></ROW><ROW><id>6058506</id><snippet>$6$</snippet></ROW><ROW><id>6058506</id><snippet>crypt.crypt</snippet></ROW><ROW><id>6058506</id><snippet>subprocess</snippet></ROW><ROW><id>6058691</id><snippet>response = HttpResponse(mimetype='audio/mpeg')
response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(file_name)
response['Accept-Ranges'] = 'bytes'
response['X-Sendfile'] = smart_str(path_to_file)
return response
</snippet></ROW><ROW><id>6059074</id><snippet>python xmp.py -o root=/home/chris /tmp/fs
</snippet></ROW><ROW><id>6059074</id><snippet>--o</snippet></ROW><ROW><id>6059389</id><snippet>for i in range(0,5):
  lst.append(lambda x, z=i: f(x,z))
</snippet></ROW><ROW><id>6059458</id><snippet>import os, sys, tarfile

def extract(tar_url, extract_path='.'):
    print tar_url
    tar = tarfile.open(tar_url, 'r')
    for item in tar:
        tar.extract(item, extract_path)
        if item.name.find(".tgz") != -1 or item.name.find(".tar") != -1:
            extract(item.name, "./" + item.name[:item.name.rfind('/')])
try:

    extract(sys.argv[1] + '.tgz')
    print 'Done.'
except:
    name = os.path.basename(sys.argv[0])
    print name[:name.rfind('.')], '&lt;filename&gt;'
</snippet></ROW><ROW><id>6059660</id><snippet>re.compile</snippet></ROW><ROW><id>6059729</id><snippet>&gt;=</snippet></ROW><ROW><id>6059729</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'settings'

from google.appengine.dist import use_library
use_library('django', '1.2')
</snippet></ROW><ROW><id>6059963</id><snippet>&gt;&gt;&gt; class foo(dict): pass
&gt;&gt;&gt; isinstance(foo(), dict)
... True
</snippet></ROW><ROW><id>6059963</id><snippet>x = property(lambda: AttributeError)</snippet></ROW><ROW><id>6060545</id><snippet>os.mkdir(resultado+'/'+en1.get())
</snippet></ROW><ROW><id>6060545</id><snippet>os.mkdir(resultado+'/')
</snippet></ROW><ROW><id>6060545</id><snippet>en1.get()</snippet></ROW><ROW><id>6060545</id><snippet>resultado</snippet></ROW><ROW><id>6060545</id><snippet>en1.get()</snippet></ROW><ROW><id>6060545</id><snippet>os.path.join</snippet></ROW><ROW><id>6060711</id><snippet>get_FOO_display()</snippet></ROW><ROW><id>6060711</id><snippet>{{ petition.get_status_display }}</snippet></ROW><ROW><id>6060768</id><snippet>code_lookup = ('PL', 'DE', 'FR')
return lookup.index('PL') 
</snippet></ROW><ROW><id>6060768</id><snippet>code_lookup = {'PL':0, 'FR':2, 'DE':3}
return code_lookup['PL']  
</snippet></ROW><ROW><id>6060768</id><snippet>namedtuple</snippet></ROW><ROW><id>6060768</id><snippet>import collections
Nationalities = collections.namedtuple('Nationalities', 
                                       ['Poland', 'France', 'Germany'])
nat = Nationalities('PL', 'FR', 'DE')
print nat.Poland
print nat.index(nat.Germany)
</snippet></ROW><ROW><id>6060938</id><snippet>try:
    cacheobject = cachecontainer.get_object('file.jpg')
except cloudfiles.errors.NoSuchObject as objectname:
    raise tornado.web.HTTPError(404)
</snippet></ROW><ROW><id>6061254</id><snippet>__init__</snippet></ROW><ROW><id>6061254</id><snippet>class Foo(object):
  velocity = 1  
  """Foo's initial velocity"""

  def __init__(self, args):
    self.location = 0.0 
    """Foo's initial location"
</snippet></ROW><ROW><id>6061329</id><snippet>return</snippet></ROW><ROW><id>6061329</id><snippet>return x</snippet></ROW><ROW><id>6061395</id><snippet>OrderedDict</snippet></ROW><ROW><id>6061820</id><snippet>inspect.getargvalues()</snippet></ROW><ROW><id>6061820</id><snippet> inspect.getargvalues(traceback.tb_frame)
</snippet></ROW><ROW><id>6061820</id><snippet>inspect.getouterframes()</snippet></ROW><ROW><id>6062799</id><snippet>foo()</snippet></ROW><ROW><id>6062799</id><snippet>bar()</snippet></ROW><ROW><id>6062799</id><snippet>def foo():
   try:
       raise IOError('Stuff')
   except:
       raise

def bar(arg1):
    try:
       foo()
    except Exception as e:
       raise type(e)(e.message + ' happens at %s' % arg1)

bar('arg1')
</snippet></ROW><ROW><id>6062799</id><snippet>Traceback (most recent call last):
  File "test.py", line 13, in &lt;module&gt;
    bar('arg1')
  File "test.py", line 11, in bar
    raise type(e)(e.message + ' happens at %s' % arg1)
IOError: Stuff happens at arg1
</snippet></ROW><ROW><id>6062799</id><snippet>...
def bar(arg1):
    try:
       foo()
    except Exception as e:
        import sys
        raise type(e), type(e)(e.message + 
                               ' happens at %s' % arg1), sys.exc_info()[2]

bar('arg1')
</snippet></ROW><ROW><id>6062799</id><snippet>Traceback (most recent call last):
  File "test.py", line 16, in &lt;module&gt;
    bar('arg1')
  File "test.py", line 11, in bar
    foo()
  File "test.py", line 5, in foo
    raise IOError('Stuff')
IOError: Stuff happens at arg1
</snippet></ROW><ROW><id>6062838</id><snippet>fr = open('/home/name/db/str/dir/numbers/str.phy')
fw = open('/home/name/db/str/dir/numbers/str.phy.parsed', 'w') # Name this whatever makes sense

for line in fr:
    if line.startswith('ENS'):
        linepars = re.sub ('ENS([A-Z]+)0+([0-9]{6})','\\1\\2',line)
        fw.write(linepars)
    else:
        fw.write(line)

fw.close()
fr.close()
</snippet></ROW><ROW><id>6062838</id><snippet>readlines()</snippet></ROW><ROW><id>6062838</id><snippet>with</snippet></ROW><ROW><id>6062838</id><snippet>fw = open('/home/name/db/str/dir/numbers/str.phy.parsed', 'w') # Name this whatever makes sense

with open('/home/name/db/str/dir/numbers/str.phy') as fr:
    for line in fr:
        if line.startswith('ENS'):
            linepars = re.sub ('ENS([A-Z]+)0+([0-9]{6})','\\1\\2',line)
            fw.write(linepars)
        else:
             fw.write(line)

fw.close()
</snippet></ROW><ROW><id>6062987</id><snippet>str</snippet></ROW><ROW><id>6062987</id><snippet>
    text = str(combobox1.currentText())
</snippet></ROW><ROW><id>6062987</id><snippet>
    text = unicode(combobox1.currentText())
</snippet></ROW><ROW><id>6063009</id><snippet>mysql</snippet></ROW><ROW><id>6063041</id><snippet>def splittedname(s):
    return tuple(int(x) for x in s.split('.'))

splittedname(s1) &gt; splittedname(s2)
</snippet></ROW><ROW><id>6063041</id><snippet>ValueError</snippet></ROW><ROW><id>6063041</id><snippet>import re

def tryint(x):
    try:
        return int(x)
    except ValueError:
        return x

def splittedname(s):
    return tuple(tryint(x) for x in re.split('([0-9]+)', s))
</snippet></ROW><ROW><id>6063041</id><snippet>splittedname</snippet></ROW><ROW><id>6063041</id><snippet>sorted</snippet></ROW><ROW><id>6063041</id><snippet>&gt;&gt;&gt; names = ['YT4.11', '4.3', 'YT4.2', '4.10', 'PT2.19', 'PT2.9']
&gt;&gt;&gt; sorted(names, key=splittedname)
['4.3', '4.10', 'PT2.9', 'PT2.19', 'YT4.2', 'YT4.11']
</snippet></ROW><ROW><id>6063861</id><snippet>import os
from google.appengine.api import namespace_manager

namespace_manager.set_namespace(os.environ['CURRENT_VERSION_ID'])
</snippet></ROW><ROW><id>6064304</id><snippet>QMimeData</snippet></ROW><ROW><id>6064304</id><snippet>from PyQt4 import QtCore, QtGui

app = QtGui.QApplication([])

data = QtCore.QMimeData()
url = QtCore.QUrl.fromLocalFile('c:\\foo.file')
data.setUrls([url])

app.clipboard().setMimeData(data)
</snippet></ROW><ROW><id>6064376</id><snippet>with open ('comparation', 'a') as write_file:
  for path, dirs, files in os.walk(os.getcwd()):
    for filename in [f for f in files if f == "graph.txt"]:
      filepath = os.path.abspath(os.path.join(path, filename))
      with open(filepath) as f:
        for line in f:
          if " 4.49" in line:
            last = line
        write_file.write("File: %s, Line: %s\n" % (filepath, last[0:4]))        
</snippet></ROW><ROW><id>6064701</id><snippet>save</snippet></ROW><ROW><id>6064701</id><snippet>commit=False</snippet></ROW><ROW><id>6064701</id><snippet>put()</snippet></ROW><ROW><id>6064701</id><snippet>def post(self):
  ...
  # This code is after the code above
  if data.is_valid():
    entity=data.save(commit=False)
    entity.company_lat=lat
    entity.company_lng=lng
    entity.put()
</snippet></ROW><ROW><id>6064712</id><snippet>0.0.0.0</snippet></ROW><ROW><id>6064792</id><snippet>htmlComment</snippet></ROW><ROW><id>6064792</id><snippet>from pyparsing import makeHTMLTags, oneOf, withAttribute, Word, nums, Group, htmlComment
import calendar

# have pyparsing define tag start/end expressions for the 
# tags we want to look for inside the comments
span,spanEnd = makeHTMLTags("span")
i,iEnd = makeHTMLTags("i")

# only want spans with class=titlefont
span.addParseAction(withAttribute(**{'class':'titlefont'}))

# define what specifically we are looking for in this comment
weekdayname = oneOf(list(calendar.day_name))
integer = Word(nums)
dateExpr = Group(weekdayname("day") + integer("daynum"))
commentBody = '&lt;!--' + span + i + dateExpr("date") + iEnd

# define a parse action to attach to the standard htmlComment expression,
# to extract only what we want (or raise a ParseException in case 
# this is not one of the comments we're looking for)
def grabCommentContents(tokens):
    return commentBody.parseString(tokens[0])
htmlComment.addParseAction(grabCommentContents)


# let's try it
htmlsource = """
want to match this one
&lt;!-- &lt;span class="titlefont"&gt; &lt;i&gt;Wednesday 110518&lt;/i&gt;(05:00PM)&lt;br /&gt;&lt;/span&gt; --&gt;

don't want the next one, wrong span class
&lt;!-- &lt;span class="bodyfont"&gt; &lt;i&gt;Wednesday 110519&lt;/i&gt;(05:00PM)&lt;br /&gt;&lt;/span&gt; --&gt;

not even a span tag!
&lt;!-- some other text with a date in italics &lt;i&gt;Wednesday 110520&lt;/i&gt;(05:00PM)&lt;br /&gt;&lt;/span&gt; --&gt;

another matching comment, on a different day
&lt;!-- &lt;span class="titlefont"&gt; &lt;i&gt;Thursday 110521&lt;/i&gt;(05:00PM)&lt;br /&gt;&lt;/span&gt; --&gt;
"""

for comment in htmlComment.searchString(htmlsource):
    parsedDate = comment.date
    # date info can be accessed like elements in a list
    print parsedDate[0], parsedDate[1]
    # because we named the expressions within the dateExpr Group
    # we can also get at them by name (this is much more robust, and 
    # easier to maintain/update later)
    print parsedDate.day
    print parsedDate.daynum
    print
</snippet></ROW><ROW><id>6064792</id><snippet>Wednesday 110518
Wednesday
110518

Thursday 110521
Thursday
110521
</snippet></ROW><ROW><id>6065296</id><snippet>enable-file-access-from-file-uris</snippet></ROW><ROW><id>6065296</id><snippet>WebView</snippet></ROW><ROW><id>6065296</id><snippet>view = webkit.WebView()
settings = view.get_settings()
settings.set_property('enable-file-access-from-file-uris', 1)
view.open('file://./foo.html')
</snippet></ROW><ROW><id>6065296</id><snippet>foo.html</snippet></ROW><ROW><id>6065296</id><snippet>file://./bar.html</snippet></ROW><ROW><id>6065296</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;script type="text/javascript" src="jquery-1.4.4.js"&gt;&lt;/script&gt;&lt;/head&gt;
&lt;body&gt;&lt;script&gt;
$.ajax({url: 'file://./bar.html', success: function(data) {
    document.write(data);
    }
});
&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>6065470</id><snippet>r'c:\myfile.txt'</snippet></ROW><ROW><id>6065470</id><snippet>&gt;&gt;&gt; s = r'c:\boot.ini'
&gt;&gt;&gt; s
'c:\\boot.ini'
&gt;&gt;&gt; repr(s)
"'c:\\\\boot.ini'"
&gt;&gt;&gt; print s
c:\boot.ini
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6065481</id><snippet>[None if p == 'None' else int(p) for p in parts]
</snippet></ROW><ROW><id>6065493</id><snippet>import matplotlib.pyplot as plt
cm = plt.cm.get_cmap('RdYlBu')
xy = range(20)
z = xy
sc = plt.scatter(xy, xy, c=z, vmin=0, vmax=20, s=35, cmap=cm)
plt.colorbar(sc)
plt.show()
</snippet></ROW><ROW><id>6065594</id><snippet>utf8_encode()</snippet></ROW><ROW><id>6065594</id><snippet>utf8_decode()</snippet></ROW><ROW><id>6065819</id><snippet>To</snippet></ROW><ROW><id>6065819</id><snippet>recipients = 'foo, bar'
outer['To'] = recipients
</snippet></ROW><ROW><id>6065819</id><snippet>sendmail()</snippet></ROW><ROW><id>6065819</id><snippet>rcpts = [r.strip() for r in recipients.split(',') if r]
s.sendmail(sender, rcpts, composed)
</snippet></ROW><ROW><id>6065977</id><snippet>srunner.exe</snippet></ROW><ROW><id>6065977</id><snippet>C:\Program Files\MyApp\python.exe</snippet></ROW><ROW><id>6065977</id><snippet>C:\PROGRA~1\MyApp\python.exe</snippet></ROW><ROW><id>6065991</id><snippet>mr.developer</snippet></ROW><ROW><id>6065991</id><snippet>[buildout]
auto-checkout = my.package
…
[sources]
my.package = hg https://url.to/my.package
</snippet></ROW><ROW><id>6065991</id><snippet>plone.recipe.zope2instance</snippet></ROW><ROW><id>6065991</id><snippet>[instance]
eggs =
    Plone
    my.package
</snippet></ROW><ROW><id>6065991</id><snippet>[buildout]
…
develop = src/my.package
</snippet></ROW><ROW><id>6066135</id><snippet>from bisect import bisect_left
def f3(t, x):
    i = bisect_left(t, x)
    if t[i] - x &gt; 0.5:
        i-=1
    return i
</snippet></ROW><ROW><id>6066135</id><snippet>[   10    11    12 ..., 99997 99998 99999]
37854.22200356027
37844
37844
37844
37854
37854
37854
f1 0.332725
f2 1.387974
f3 0.085864
</snippet></ROW><ROW><id>6066371</id><snippet>import numpy
import matplotlib.pyplot as plt

def adjust_borders(fig, targets):
    "Translate desired pixel sizes into percentages based on figure size."
    dpi = fig.get_dpi()
    width, height = [float(v * dpi) for v in fig.get_size_inches()]
    conversions = {
        'top': lambda v: 1.0 - (v / height),
        'bottom': lambda v: v / height,
        'right': lambda v: 1.0 - (v / width),
        'left': lambda v: v / width,
        'hspace': lambda v: v / height,
        'wspace': lambda v: v / width,
        }
    opts = dict((k, conversions[k](v)) for k, v in targets.items())
    fig.subplots_adjust(**opts)

fig = plt.figure(figsize=(7, 5))
for i in range(4):
    ax = fig.add_subplot(2, 2, i+1)
    ax.plot([1,2,3], [4,5,1])
    ax.set_xticks([])
    ax.set_yticks([])

# target sizes in pixels.
targets = dict(left=10, right=10, top=10, bottom=30, hspace=30, wspace=30)
# hook up a function to adjust the borders when the window is resized
fig.canvas.mpl_connect('resize_event', lambda e: adjust_borders(fig, targets))
adjust_borders(fig, targets)
plt.show()
</snippet></ROW><ROW><id>6066729</id><snippet>('item',)</snippet></ROW><ROW><id>6066729</id><snippet>('item')</snippet></ROW><ROW><id>6066729</id><snippet>for info in infolist:
    result = cursor.execute('SELECT COUNT(DISTINCT col1) 
                               FROM tablename 
                              WHERE col2 = ?', (info,))
</snippet></ROW><ROW><id>6066927</id><snippet>models.Model</snippet></ROW><ROW><id>6067036</id><snippet>main</snippet></ROW><ROW><id>6067161</id><snippet>application: myapp
version: 1
runtime: python
api_version: 1

handlers:
- url: /
  script: home.py

- url: /index\.html
  script: home.py

- url: /stylesheets
  static_dir: stylesheets

- url: /(.*\.(gif|png|jpg))
  static_files: static/\1
  upload: static/(.*\.(gif|png|jpg))

- url: /admin/.*
  script: admin.py
  login: admin

- url: /.*
  script: not_found.py
</snippet></ROW><ROW><id>6067202</id><snippet>/bin/bash -c "your-command-stuff"</snippet></ROW><ROW><id>6067217</id><snippet>(1000)</snippet></ROW><ROW><id>6067217</id><snippet>5 + (1000) + 4</snippet></ROW><ROW><id>6067217</id><snippet>1009</snippet></ROW><ROW><id>6067217</id><snippet>p = multiprocessing.Process(target=time.sleep, args=1000)
</snippet></ROW><ROW><id>6067217</id><snippet>args</snippet></ROW><ROW><id>6067217</id><snippet>(1000,)</snippet></ROW><ROW><id>6067303</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Item(Base):
    __tablename__ = 'item'

    id = Column(Integer, primary_key=True)
    description_id = Column(Integer, ForeignKey('item_description.id'))

class ItemDescription(Base):
    __tablename__ = 'item_description'

    id = Column(Integer, primary_key=True)

    any_item_id = column_property(
        select(
            [Item.id],
            id == Item.description_id,
            limit=1,
        ).label('any_item_id'),
        deferred=True,
    )

e = create_engine('sqlite://', echo=True)
Base.metadata.create_all(e)

s = Session(e)

descriptions = [
    ItemDescription(id=1),
    ItemDescription(id=2),
    ItemDescription(id=3),
]

s.add_all(descriptions)

items = [
    Item(id=1, description_id=1),
    Item(id=2, description_id=1),
    Item(id=3, description_id=1),
    Item(id=4, description_id=2),
    Item(id=5, description_id=2),
    Item(id=6, description_id=3),
    Item(id=7, description_id=3),
    Item(id=8, description_id=3),
]

s.add_all(items)

query = s.query(ItemDescription).options(undefer('any_item_id'))
for description in query:
    print description.any_item_id, description.id

# alternative way without using column_property
query = s.query(
    select(
        [Item.id],
        ItemDescription.id == Item.description_id,
        limit=1,
    ).label('any_item_id'),
    ItemDescription,
)
for item_id, description in query:
    print item_id, description.id
</snippet></ROW><ROW><id>6067633</id><snippet>9.1 GB</snippet></ROW><ROW><id>6067633</id><snippet>import sys
def sizeof(lst):
    return sys.getsizeof(lst) + sum(sys.getsizeof(v) for v in lst)

GIG = 1024**3
file_size = 1.5 * GIG
lines = 31164015
num_cols = 4
avg_line_len = int(file_size / float(lines))

val = 'a' * (avg_line_len / num_cols)
lst = [val] * num_cols

line_size = sizeof(lst)
print 'avg line size: %d bytes' % line_size
print 'approx. memory needed: %.1f GB' % ((line_size * lines) / float(GIG))
</snippet></ROW><ROW><id>6067633</id><snippet>avg line size: 312 bytes
approx. memory needed: 9.1 GB
</snippet></ROW><ROW><id>6067711</id><snippet>words.lower()</snippet></ROW><ROW><id>6067711</id><snippet>words</snippet></ROW><ROW><id>6067711</id><snippet>string.lowercase</snippet></ROW><ROW><id>6067711</id><snippet>import string</snippet></ROW><ROW><id>6067711</id><snippet>lower</snippet></ROW><ROW><id>6067711</id><snippet>import string</snippet></ROW><ROW><id>6067711</id><snippet>string.lower('STRING with CAPS')</snippet></ROW><ROW><id>6067711</id><snippet>import string

def isLower(ch):
    return string.find(string.lowercase, ch) != -1


words = "GreatTimes"

lowercase_letters = ""
for ch in words:
    print ch, '-&gt;', isLower(ch)

    if isLower(ch):
        lowercase_letters += ch

print "Lowercase letters were:", lowercase_letters
</snippet></ROW><ROW><id>6067711</id><snippet>G -&gt; False
r -&gt; True
e -&gt; True
a -&gt; True
t -&gt; True
T -&gt; False
i -&gt; True
m -&gt; True
e -&gt; True
s -&gt; True
Lowercase letters were: reatimes
</snippet></ROW><ROW><id>6068652</id><snippet>import sys
in_console = sys.__stdin__.isatty()
</snippet></ROW><ROW><id>6068652</id><snippet>in_console</snippet></ROW><ROW><id>6068652</id><snippet>stdin</snippet></ROW><ROW><id>6068661</id><snippet>r"\noindent $V_2 = {0:.5} \text{{V}}$".format(voltage)
</snippet></ROW><ROW><id>6068661</id><snippet>\text V
</snippet></ROW><ROW><id>6068661</id><snippet>\mathrm V
</snippet></ROW><ROW><id>6068682</id><snippet>multiprocessing</snippet></ROW><ROW><id>6068682</id><snippet>import multiprocessing
import Queue

TIMEOUT = 5

def big_loop(bob):
    import time
    time.sleep(4)
    return bob*2

def wrapper(queue, bob):
    result = big_loop(bob)
    queue.put(result)
    queue.close()

def run_loop_with_timeout():
    bob = 21 # Whatever sensible value you need
    queue = multiprocessing.Queue(1) # Maximum size is 1
    proc = multiprocessing.Process(target=wrapper, args=(queue, bob))
    proc.start()

    # Wait for TIMEOUT seconds
    try:
        result = queue.get(True, TIMEOUT)
    except Queue.Empty:
        # Deal with lack of data somehow
        result = None
    finally:
        proc.terminate()

    # Process data here, not in try block above, otherwise your process keeps running
    print result

if __name__ == "__main__":
    run_loop_with_timeout()
</snippet></ROW><ROW><id>6068682</id><snippet>Pipe</snippet></ROW><ROW><id>6068682</id><snippet>Connection</snippet></ROW><ROW><id>6068682</id><snippet>TIMEOUT</snippet></ROW><ROW><id>6069128</id><snippet>&gt;&gt;&gt; data = [['a',[10]], ['b',[1]], ['c',[5,10]], ['d',[5,1,-10]], ['e',[5,1,-1]]
&gt;&gt;&gt; sorted(data, reverse = True, key = lambda pair: pair[1])
[['a', [10]], ['c', [5, 10]], ['e', [5, 1, -1]], ['d', [5, 1, -10]], ['b', [1]]]
</snippet></ROW><ROW><id>6069144</id><snippet>_fields_</snippet></ROW><ROW><id>6069144</id><snippet>&gt;&gt;&gt; for f,t in A._fields_:
...  a = getattr(A,f)
...  print a,a.offset,a.size,t
...
&lt;Field type=c_long, ofs=0, size=4&gt; 0 4 &lt;class 'ctypes.c_long'&gt;
&lt;Field type=c_char, ofs=4, size=1&gt; 4 1 &lt;class 'ctypes.c_char'&gt;
&lt;Field type=c_byte, ofs=5, size=1&gt; 5 1 &lt;class 'ctypes.c_byte'&gt;
</snippet></ROW><ROW><id>6069586</id><snippet>&gt;&gt;&gt; import gi
&gt;&gt;&gt; help(gi)

Help on package gi:

NAME
    gi

FILE
    /usr/lib/pymodules/python2.6/gtk-2.0/gi/__init__.py

DESCRIPTION
...
</snippet></ROW><ROW><id>6070016</id><snippet>rboxPick = ["Default", "Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"]
labels = ["One", "Two", "Three", "Four"]            
self.rollRbs = dict()

#create  the radioBoxes..
for row, label in enumerate(labels):
    lbl = wx.StaticText(panelControl)       
    rbox = wx.RadioBox(panelControl, label="Roll %s"%(label), 
                       choices=rboxPick)              
    sizerControl.Add(rbox ,pos = (row, 1),span=(1,5),
                     flag=wx.EXPAND|wx.LEFT|wx.RIGHT,border = 2)

    self.rollRbs[rbox.GetLabel()] = rbox

#changing the label...
self.rollRbs["Roll One"].SetLabel("blah")
</snippet></ROW><ROW><id>6070016</id><snippet>RadioBoxes</snippet></ROW><ROW><id>6070016</id><snippet>RadioBoxes</snippet></ROW><ROW><id>6070016</id><snippet>import wx

class GUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(700, 400))

        panelControl = wx.Panel(self, 1, style=wx.MAXIMIZE) 
        sizerControl = wx.GridBagSizer(hgap=4,vgap = 4)

        lblTitle = wx.StaticText(panelControl, label="Pick Scores")             
        self.btnRoll = wx.Button(panelControl, label="Roll!")

        sizerControl.Add(lblTitle, pos=(0,0), 
                         flag=wx.ALIGN_CENTER|wx.TOP|wx.LEFT|wx.BOTTOM, border=5) 
        sizerControl.Add(self.btnRoll, pos=(0,1), 
                         span=(1,5), flag=wx.EXPAND|wx.LEFT|wx.RIGHT, border=5)

        rboxPick = ["Default", "Strength", "Dexterity", "Constitution", 
                    "Intelligence", "Wisdom", "Charisma"
                    ]
        labels = ["One", "Two", "Three", "Four"]

        #Create, layout and bind the RadioBoxes
        for row, label in enumerate(labels):
            lbl = wx.StaticText(panelControl)       
            rbox = wx.RadioBox(panelControl, label="Roll %s"%(label), choices=rboxPick)
            self.Bind(wx.EVT_RADIOBOX, self.onRadioBox, rbox)              
            sizerControl.Add(rbox, pos=(row+1, 1), span=(1,5), 
                             flag=wx.EXPAND|wx.LEFT|wx.RIGHT,border=2)

        sizerMain = wx.BoxSizer()
        sizerMain.Add(sizerControl)
        panelControl.SetSizerAndFit(sizerMain)

    def onRadioBox(self, evt):
        """Event handler for RadioBox.."""

        rbox = evt.GetEventObject()#Get a reference to the RadioBox
        rboxLbl = rbox.GetLabel()   #We can identify the RadioBox with its label
        selection = rbox.GetSelection()

        print rboxLbl
        print selection

        if rboxLbl == "Roll One":
            #do something
            pass     
        elif rboxLbl == "Roll Two":
             #do something else
            pass


if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = GUI(None, -1, "") 
    frame.Show(1)
    app.MainLoop()
</snippet></ROW><ROW><id>6070016</id><snippet>import wx
import  wx.lib.newevent

class LblRadBox(wx.Panel):
    """
    Simple example of a composite widget 
    Add methods as required to improve functionality...
    """
    def __init__(self, parent, stLbl="", rbLbl="", choices=[]):
        wx.Panel.__init__(self, parent)
        self.stLbl = wx.StaticText(self, label=stLbl)       
        self.rbox = wx.RadioBox(self, label=rbLbl, choices=choices)

        sizer =  wx.BoxSizer()
        sizer.Add(self.stLbl)
        sizer.Add(self.rbox)
        self.SetSizerAndFit(sizer)

    def SetSTLabel(self, lbl):
        self.stLbl.SetLabel(lbl)

    def GetLabel(self):
        return self.rbox.GetLabel()

    def GetSelection(self, lbl):
        return self.rbox.GetSelection()

class GUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(700, 400))

        panelControl = wx.Panel(self, 1, style=wx.MAXIMIZE) 
        sizerControl = wx.GridBagSizer(hgap=4,vgap = 4)

        lblTitle = wx.StaticText(panelControl, label="Pick Scores")             
        self.btnRoll = wx.Button(panelControl, label="Roll!")

        sizerControl.Add(lblTitle, pos=(0,0), 
                         flag=wx.ALIGN_CENTER|wx.TOP|wx.LEFT|wx.BOTTOM, border=5) 
        sizerControl.Add(self.btnRoll, pos=(0,1), 
                         span=(1,5), flag=wx.EXPAND|wx.LEFT|wx.RIGHT, border=5)

        rboxPick = ["Default", "Strength", "Dexterity", "Constitution", 
                    "Intelligence", "Wisdom", "Charisma"
                    ]
        labels = ["One", "Two", "Three", "Four"]

        #Create, layout and bind the RadioBoxes
        for row, label in enumerate(labels):        
            rbox = LblRadBox(panelControl, rbLbl="Roll %s"%(label), choices=rboxPick) 
            #if u want to be able to access the rboxes outside of onRadioBox() 
            #then add references of them to a dictionary like in method 1..

            sizerControl.Add(rbox, pos=(row+1, 1), span=(1,5), 
                             flag=wx.EXPAND|wx.LEFT|wx.RIGHT,border=2)

        panelControl.Bind(wx.EVT_RADIOBOX, self.onRadioBox)    

        sizerMain = wx.BoxSizer()
        sizerMain.Add(sizerControl)
        panelControl.SetSizerAndFit(sizerMain)

    def onRadioBox(self, evt):
        """Event handler for RadioBox.."""
        rbox = evt.GetEventObject()#Get a reference to the RadioBox
        rboxLbl = rbox.GetLabel()   #We can identify the RadioBox with its label
        selection = rbox.GetSelection()

        print rboxLbl
        print selection

        if rboxLbl == "Roll One":
            #do something
            pass     
        elif rboxLbl == "Roll Two":
             #do something else
            pass


if __name__ == "__main__":
    app = wx.PySimpleApp()
    frame = GUI(None, -1, "") 
    frame.Show(1)
    app.MainLoop()
</snippet></ROW><ROW><id>6070685</id><snippet>super</snippet></ROW><ROW><id>6070685</id><snippet>getattr()</snippet></ROW><ROW><id>6070685</id><snippet>super</snippet></ROW><ROW><id>6070685</id><snippet>object</snippet></ROW><ROW><id>6070685</id><snippet>super</snippet></ROW><ROW><id>6070685</id><snippet>super()</snippet></ROW><ROW><id>6070709</id><snippet>In []: R= arange(12).reshape(4, 3)
In []: R
Out[]: 
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
In []: i= 1
In []: row= R[i, ]
In []: row
Out[]: array([3, 4, 5])
In []: j= nonzero(row== max(row))[0][0]
In []: j
Out[]: 2
</snippet></ROW><ROW><id>6070709</id><snippet>j</snippet></ROW><ROW><id>6070709</id><snippet>i</snippet></ROW><ROW><id>6070709</id><snippet>R</snippet></ROW><ROW><id>6070709</id><snippet>In []: R[i, j]
Out[]: 5
</snippet></ROW><ROW><id>6070738</id><snippet>numpy.log()</snippet></ROW><ROW><id>6070738</id><snippet>e</snippet></ROW><ROW><id>6070738</id><snippet>from pyplot import *</snippet></ROW><ROW><id>6070738</id><snippet>mu</snippet></ROW><ROW><id>6070738</id><snippet>mu</snippet></ROW><ROW><id>6070738</id><snippet>numpy</snippet></ROW><ROW><id>6070738</id><snippet>scipy.optimize.leastsq</snippet></ROW><ROW><id>6070904</id><snippet>eqnarray</snippet></ROW><ROW><id>6070904</id><snippet>#!/usr/bin/python
import matplotlib.pyplot as plt
from matplotlib import rc

rc('text', usetex=True)
rc('font', family='serif')

r = 1
v = 2
i = 3

plt.plot([1,2,3],[2,3,4],'ro-')

plt.text(2,2,r"\begin{eqnarray*}R_L&amp;= 0\\ V_2&amp;= 1\\ I_2&amp;= 2\end{eqnarray*}")

#notes = r"\noindent$$R_L = {0}\\ V_2 = {1}\\ I_2 = {2}$$".format(r, v, i)
#plt.annotate(notes, xy=(5,5), xytext=(7,7))
plt.show()
</snippet></ROW><ROW><id>6071174</id><snippet>continue</snippet></ROW><ROW><id>6071174</id><snippet>for i in range(10):
    try:
        r = 1.0 / (i % 2)
    except Exception, e:
        print(e)
    else:
        print(r)
</snippet></ROW><ROW><id>6071174</id><snippet>#!/usr/bin/env python

def something_that_may_raise(i):
    return 1.0 / (i % 2)

def handle(e):
    print("Exception: " + str(e))

def do_something_with(result):
    print("No exception: " + str(result))

def wrap_process(i):
    try:
        result = something_that_may_raise(i)
    except ZeroDivisionError, e:
        handle(e)
    except OverflowError, e:
        handle(e) # Realistically, this will be a different handler...
    else:
        do_something_with(result)

for i in range(10):
    wrap_process(i)
</snippet></ROW><ROW><id>6071174</id><snippet>except:</snippet></ROW><ROW><id>6071174</id><snippet>handle(e)</snippet></ROW><ROW><id>6071174</id><snippet>pass</snippet></ROW><ROW><id>6071174</id><snippet>wrap_process()</snippet></ROW><ROW><id>6071174</id><snippet>else:</snippet></ROW><ROW><id>6071174</id><snippet>for</snippet></ROW><ROW><id>6071920</id><snippet>tmp.html</snippet></ROW><ROW><id>6072061</id><snippet>cp1252</snippet></ROW><ROW><id>6072061</id><snippet>windows-1252</snippet></ROW><ROW><id>6072061</id><snippet>xlrd</snippet></ROW><ROW><id>6072061</id><snippet>print data.biff_version, data.codepage, data.encoding
</snippet></ROW><ROW><id>6072061</id><snippet>80 1200 utf_16_le
</snippet></ROW><ROW><id>6072061</id><snippet>encoding_override</snippet></ROW><ROW><id>6072061</id><snippet>unicode</snippet></ROW><ROW><id>6072061</id><snippet>unicode</snippet></ROW><ROW><id>6072061</id><snippet>str</snippet></ROW><ROW><id>6072061</id><snippet>print unicode_object.decode('shift-jis')</snippet></ROW><ROW><id>6072061</id><snippet>text = a.rowvalues(i)[1]
print i, repr(text)
print repr(text.decode('shift-jis'))
</snippet></ROW><ROW><id>6072061</id><snippet>print sys.stdout.encoding
import locale
print locale.getpreferredencoding()
</snippet></ROW><ROW><id>6072088</id><snippet>from django.db import models  

class Member(models.Model):
    name = models.CharField(max_length=100)
    active = models.BooleanField()

    def __unicode__(self):
        return self.name


class Profile(models.Model):
    member = models.OneToOneField(Member)
    age = models.PositiveIntegerField()

    def __unicode__(self):
        return str(self.age)
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; m1 = Member(name='John', active=True)
&gt;&gt;&gt; m1.save()
&gt;&gt;&gt; p1 = Profile(member=m1, age=18)
&gt;&gt;&gt; p1.save()
&gt;&gt;&gt; m2 = Member(name='Phil', active=False)
&gt;&gt;&gt; m2.save()
&gt;&gt;&gt; p2 = Profile(member=m2, age=35)
&gt;&gt;&gt; p2.save()
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; p = Profile.objects.get(id=1)
&gt;&gt;&gt; p.__dict__
{'age': 18, '_state': &lt;django.db.models.base.ModelState object at 0x95d054c&gt;, 'id': 1, 'member_id': 1}
</snippet></ROW><ROW><id>6072088</id><snippet>member</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; p.member
&lt;Member: John&gt;
&gt;&gt;&gt; p.__dict__
{'age': 18, '_member_cache': &lt;Member: John&gt;, '_state': &lt;django.db.models.base.ModelState object at 0x95d054c&gt;, 'id': 1, 'member_id': 1}
</snippet></ROW><ROW><id>6072088</id><snippet>class ActiveManager(models.Manager):
    def get_query_set(self):
        return super(ActiveManager, self).get_query_set().filter(active=True)
</snippet></ROW><ROW><id>6072088</id><snippet>dumpdata</snippet></ROW><ROW><id>6072088</id><snippet>class Member(models.Model):
    name = models.CharField(max_length=100)
    active = models.BooleanField()

    objects = ActiveManager()

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; Member.objects.all()
[&lt;Member: John&gt;]
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; Profile.objects.all()
[&lt;Profile: 18&gt;, &lt;Profile: 35&gt;]
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; p = Profile.objects.get(id=2)
&gt;&gt;&gt; p.member
&lt;Member: Phil&gt;
</snippet></ROW><ROW><id>6072088</id><snippet>use_for_related_fields</snippet></ROW><ROW><id>6072088</id><snippet>class ActiveManager(models.Manager):
    use_for_related_fields = True

    def get_query_set(self):
        return super(ActiveManager, self).get_query_set().filter(active=True)
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; p = Profile.objects.get(id=2)
&gt;&gt;&gt; p.member
---------------------------------------------------------------------------
DoesNotExist                              Traceback (most recent call last)

/home/blair/&lt;ipython console&gt; in &lt;module&gt;()

/usr/lib/pymodules/python2.6/django/db/models/fields/related.pyc in __get__(self, instance, instance_type)
    298             db = router.db_for_read(self.field.rel.to, instance=instance)
    299             if getattr(rel_mgr, 'use_for_related_fields', False):
--&gt; 300                 rel_obj = rel_mgr.using(db).get(**params)
    301             else:
    302                 rel_obj = QuerySet(self.field.rel.to).using(db).get(**params)

/usr/lib/pymodules/python2.6/django/db/models/query.pyc in get(self, *args, **kwargs)
    339         if not num:
    340             raise self.model.DoesNotExist("%s matching query does not exist."
--&gt; 341                     % self.model._meta.object_name)
    342         raise self.model.MultipleObjectsReturned("get() returned more than one %s -- it returned %s! Lookup parameters were %s"
    343                 % (self.model._meta.object_name, num, kwargs))

DoesNotExist: Member matching query does not exist.
</snippet></ROW><ROW><id>6072088</id><snippet>class Member(models.Model):
    name = models.CharField(max_length=100)
    active = models.BooleanField()

    objects = models.Manager()
    active_members = ActiveManager()

    def __unicode__(self):
        return self.name
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; Member.objects.all()
[&lt;Member: John&gt;, &lt;Member: Phil&gt;]
&gt;&gt;&gt; Member.active_members.all()
[&lt;Member: John&gt;]
</snippet></ROW><ROW><id>6072088</id><snippet>&gt;&gt;&gt; Profile.objects.get(id=2)
&gt;&gt;&gt; p.member
&lt;Member: Phil&gt;
</snippet></ROW><ROW><id>6072088</id><snippet>use_for_related_fields</snippet></ROW><ROW><id>6072199</id><snippet>import mdp, numpy
mdp.nodes.FANode()(numpy.array(matrix))
</snippet></ROW><ROW><id>6072233</id><snippet>&gt;&gt;&gt; text = """show the (name) of the (person)
...
... calc the sqrt of (+ (* (2 4) 3))"""
&gt;&gt;&gt; import pyparsing
&gt;&gt;&gt; for match in pyparsing.nestedExpr('(',')').searchString(text):
...   print match[0]
...
['name']
['person']
['+', ['*', ['2', '4'], '3']]
</snippet></ROW><ROW><id>6072233</id><snippet>&gt;&gt;&gt; for match in pyparsing.originalTextFor(pyparsing.nestedExpr('(',')')).searchString(text):
...   print match[0]
...
(name)
(person)
(+ (* (2 4) 3))
</snippet></ROW><ROW><id>6072492</id><snippet>&gt;&gt;&gt; l = [('a', 1), ('b', 2)]
&gt;&gt;&gt; d = dict(l)
&gt;&gt;&gt; d['a']
1 
</snippet></ROW><ROW><id>6072625</id><snippet>AF_NETLINK</snippet></ROW><ROW><id>6072625</id><snippet>IFF_PROMISC</snippet></ROW><ROW><id>6072625</id><snippet>AF_NETLINK</snippet></ROW><ROW><id>6072625</id><snippet>&gt;&gt;&gt; from socket import AF_NETLINK, SOCK_DGRAM, socket 
&gt;&gt;&gt; s = socket(AF_NETLINK, SOCK_DGRAM)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6072625</id><snippet>ctypes</snippet></ROW><ROW><id>6072625</id><snippet>struct</snippet></ROW><ROW><id>6072625</id><snippet>sendmsg</snippet></ROW><ROW><id>6072625</id><snippet>recvmsg</snippet></ROW><ROW><id>6072625</id><snippet>ioctl</snippet></ROW><ROW><id>6072625</id><snippet>import ctypes

class ifreq(ctypes.Structure):
    _fields_ = [("ifr_ifrn", ctypes.c_char * 16),
                ("ifr_flags", ctypes.c_short)]
</snippet></ROW><ROW><id>6072625</id><snippet>ioctl</snippet></ROW><ROW><id>6072625</id><snippet>import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
</snippet></ROW><ROW><id>6072625</id><snippet>IFF_PROMISC = 0x100
SIOCGIFFLAGS = 0x8913
SIOCSIFFLAGS = 0x8914
</snippet></ROW><ROW><id>6072625</id><snippet>ifr = ifreq()
ifr.ifr_ifrn = "eth4"
</snippet></ROW><ROW><id>6072625</id><snippet>ifr_flags</snippet></ROW><ROW><id>6072625</id><snippet>ioctl</snippet></ROW><ROW><id>6072625</id><snippet>import fcntl

fcntl.ioctl(s.fileno(), SIOCGIFFLAGS, ifr) # G for Get
</snippet></ROW><ROW><id>6072625</id><snippet>ifr.ifr_flags |= IFF_PROMISC
</snippet></ROW><ROW><id>6072625</id><snippet>fcntl.ioctl(s.fileno(), SIOCSIFFLAGS, ifr) # S for Set
</snippet></ROW><ROW><id>6072625</id><snippet>ifr.ifr_flags &amp;= ~IFF_PROMISC
fcntl.ioctl(s.fileno(), SIOCSIFFLAGS, ifr)
</snippet></ROW><ROW><id>6073267</id><snippet>os.path.isfile('one')</snippet></ROW><ROW><id>6073267</id><snippet>os.path.isdir('one')</snippet></ROW><ROW><id>6073267</id><snippet>os.chdir</snippet></ROW><ROW><id>6073267</id><snippet>os.path.isdir('/home/vmware/tobackup/one')</snippet></ROW><ROW><id>6073267</id><snippet>#!/usr/bin/env python
import datetime, os
from time import gmtime, strftime
import subprocess

to_backup = "/home/vmware/tobackup"
var1 = datetime.datetime.now().strftime('%b-%d-%I%p')

os.chdir(to_backup)
# os.listdir(to_backup) = ['one', 'two', 'three', 'four', 'five']
for f in os.listdir(to_backup):
    if(os.path.isfile(f)):
        print f + " is a file"
    if(os.path.isdir(f)):
        print f + " is a directory"
</snippet></ROW><ROW><id>6073267</id><snippet>to_backup = "/home/vmware/tobackup"
var1 = datetime.datetime.now().strftime('%b-%d-%I%p')
# os.listdir(to_backup) = ['one', 'two', 'three', 'four', 'five']
for f in os.listdir(to_backup):
    if(os.path.isfile(os.path.join(to_backup,f))):
        print f + " is a file"
    if(os.path.isdir(os.path.join(to_backup,f))):
        print f + " is a directory"
</snippet></ROW><ROW><id>6073267</id><snippet>walk</snippet></ROW><ROW><id>6073267</id><snippet>to_backup = "/home/vmware/tobackup"
var1 = datetime.datetime.now().strftime('%b-%d-%I%p')

root, dirs, files in os.walk(to_backup).next()
for file in files:
    print f + " is a file in " + root
for dir in dirs:
    print f + " is a directory"
</snippet></ROW><ROW><id>6073267</id><snippet>/home/user/bin/your_script.py
/home/vmware/tobackup/
/home/vmware/tobackup/one
/home/vmware/tobackup/two
...
</snippet></ROW><ROW><id>6073267</id><snippet>python your_script.py</snippet></ROW><ROW><id>6073267</id><snippet>os.listdir('/home/vmware/tobackup')</snippet></ROW><ROW><id>6073267</id><snippet>['one','two', ...]</snippet></ROW><ROW><id>6073267</id><snippet>os.path.isfile('one')</snippet></ROW><ROW><id>6073267</id><snippet>/home/user/bin/one</snippet></ROW><ROW><id>6073267</id><snippet>/home/user/bin/one</snippet></ROW><ROW><id>6073671</id><snippet>int</snippet></ROW><ROW><id>6073671</id><snippet>int</snippet></ROW><ROW><id>6073671</id><snippet>None</snippet></ROW><ROW><id>6073671</id><snippet>dll.voidFunct.restype = None
</snippet></ROW><ROW><id>6073932</id><snippet>options = {'group':Group, 'host':Host, 'location':Location, 'exchange':Exchange}
for key, modelclass in options.items():
    value = request.POST.get(key, None)
    if value:
        initial[key] = value
        obj = modelclass.objects.get(pk=value)
        filter = {}
        filter[key] = obj
        selectForm.fields['job'].queryset = selectForm.fields['job'].queryset.filter(**filter)
</snippet></ROW><ROW><id>6073964</id><snippet>Range.Address</snippet></ROW><ROW><id>6073964</id><snippet>range.GetAddress(RowAbsolute=False,ColumnAbsolute=False)
</snippet></ROW><ROW><id>6073964</id><snippet>range.GetAddress()
range.Address
</snippet></ROW><ROW><id>6074117</id><snippet>0 &lt; x &lt;= 5</snippet></ROW><ROW><id>6074117</id><snippet>(0 &lt; x) and (x &lt;= 5)</snippet></ROW><ROW><id>6074117</id><snippet>True</snippet></ROW><ROW><id>6074117</id><snippet>False</snippet></ROW><ROW><id>6074291</id><snippet>&lt;connections&gt;
  &lt;connection name="name_1"&gt;
    &lt;parameter name="user" value="user_value_1"/&gt;
    &lt;parameter name="password" value="psw_1"/&gt;
  &lt;/connection&gt;

  &lt;connection name="name_2"&gt;
    &lt;parameter name="user" value="user_value_2"/&gt;
    &lt;parameter name="password" value="psw_2"/&gt;
  &lt;/connection&gt;

  &lt;connection name="name_n"&gt;
    &lt;parameter name="user" value="user_value_n"/&gt;
    &lt;parameter name="password" value="psw_n"/&gt;
  &lt;/connection&gt;
&lt;/connections&gt;
</snippet></ROW><ROW><id>6074291</id><snippet>minidom</snippet></ROW><ROW><id>6074291</id><snippet>from xml.dom.minidom import parseString

document = parseString('''
&lt;?xml version="1.0"?&gt;
&lt;connections&gt;
  &lt;connection name="name_1"&gt;
    &lt;parameter name="user" value="user_value_1"/&gt;
    &lt;parameter name="password" value="psw_1"/&gt;
  &lt;/connection&gt;

  &lt;connection name="name_2"&gt;
    &lt;parameter name="user" value="user_value_2"/&gt;
    &lt;parameter name="password" value="psw_2"/&gt;
  &lt;/connection&gt;

  &lt;connection name="name_n"&gt;
    &lt;parameter name="user" value="user_value_n"/&gt;
    &lt;parameter name="password" value="psw_n"/&gt;
  &lt;/connection&gt;
&lt;/connections&gt;''')

names = {'connection names': []}

for connection in document.getElementsByTagName('connection'):
  names['connection names'].append(connection.getAttribute('name'))

print names
</snippet></ROW><ROW><id>6074291</id><snippet> {'connection names': [u'name_1', u'name_2', u'name_n']}
</snippet></ROW><ROW><id>6074349</id><snippet># -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

import gobject
import gtk
from egg import trayicon

label = gtk.Label("Over here")

def callback(widget, ev):
    label.set_text("You found me")

def timeout():
    label.set_text("What are you waiting for?")

tray = trayicon.TrayIcon("TrayIcon")
box = gtk.EventBox()
box.add(label)
tray.add(box)
tray.show_all()

box.connect("button-press-event", callback)

gobject.timeout_add(3000L, timeout)

gtk.main()
</snippet></ROW><ROW><id>6075403</id><snippet>make_archive</snippet></ROW><ROW><id>6075773</id><snippet>__init__</snippet></ROW><ROW><id>6075773</id><snippet>some_var</snippet></ROW><ROW><id>6075773</id><snippet>self</snippet></ROW><ROW><id>6075773</id><snippet>__init__</snippet></ROW><ROW><id>6075773</id><snippet>self.some_var</snippet></ROW><ROW><id>6075773</id><snippet>super</snippet></ROW><ROW><id>6076020</id><snippet>&lt;tr&gt;
  % for col in user_cols:
    ${getattr(self, col)()}
  % endfor
&lt;/tr&gt;
</snippet></ROW><ROW><id>6076042</id><snippet>PE</snippet></ROW><ROW><id>6076042</id><snippet>Basic headers information will be available in the attributes:

DOS_HEADER  
NT_HEADERS  
FILE_HEADER  
OPTIONAL_HEADER

All of them will contain among their attributes the members of the  
corresponding structures as defined in WINNT.H
</snippet></ROW><ROW><id>6076215</id><snippet>def quit():
    root.destroy()
</snippet></ROW><ROW><id>6076304</id><snippet>[(lambda x: x*x)(x) for x in range(10)]
</snippet></ROW><ROW><id>6076304</id><snippet>[x*x for x in range(10)]
</snippet></ROW><ROW><id>6076528</id><snippet>Popen</snippet></ROW><ROW><id>6076528</id><snippet>multiprocessing</snippet></ROW><ROW><id>6076528</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>6076528</id><snippet>multiprocessing</snippet></ROW><ROW><id>6076703</id><snippet>class NoneWrapper(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, name):
        value = getattr(self.wrapped, name)
        if value is None:
            return ''
        else:
            return value

mydb = NoneWrapper(database)
color = mydb.color
size = mydb.size
shape = mydb.shape
name = mydb.name

# All of these will be set to an empty string if their
# original value in the database is none
</snippet></ROW><ROW><id>6076703</id><snippet>NoneWrapper</snippet></ROW><ROW><id>6076703</id><snippet>__init__()</snippet></ROW><ROW><id>6076703</id><snippet>__getattr__()</snippet></ROW><ROW><id>6076703</id><snippet>database</snippet></ROW><ROW><id>6076771</id><snippet>Popen</snippet></ROW><ROW><id>6076771</id><snippet>sp.wait()</snippet></ROW><ROW><id>6076771</id><snippet>call</snippet></ROW><ROW><id>6076779</id><snippet>nargs='?'</snippet></ROW><ROW><id>6076779</id><snippet>-v</snippet></ROW><ROW><id>6076779</id><snippet>import argparse

class VAction(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print 'values: {v!r}'.format(v=values)
        if values==None:
            values='1'
        try:
            values=int(values)
        except ValueError:
            values=values.count('v')+1
        setattr(args, self.dest, values)

parser=argparse.ArgumentParser()
parser.add_argument('-v', nargs='?', action=VAction, dest='verbose')
args=parser.parse_args(['-v'])
print(args)
# Namespace(verbose=1)

args=parser.parse_args(['-v -v'])
print(args)
# Namespace(verbose=2)

args=parser.parse_args(['-v -v -v'])
print(args)
# Namespace(verbose=3)

args=parser.parse_args(['-vv'])
print(args)
# Namespace(verbose=2)

args=parser.parse_args(['-vvv'])
print(args)
# Namespace(verbose=3)

args=parser.parse_args(['-v 2'])
print(args)
# Namespace(verbose=2)
</snippet></ROW><ROW><id>6076779</id><snippet>VAction</snippet></ROW><ROW><id>6076821</id><snippet>def _recurse_tree(parent, depth, source):
    last_line = source.readline().rstrip()
    while last_line:
        tabs = last_line.count('\t')
        if tabs &lt; depth:
            break
        node = last_line.strip()
        if tabs &gt;= depth:
            if parent is not None:
                print "%s: %s" %(parent, node)
            last_line = _recurse_tree(node, tabs+1, source)
    return last_line

inFile = open("test.txt")
_recurse_tree(None, 0, inFile)
</snippet></ROW><ROW><id>6076821</id><snippet>source</snippet></ROW><ROW><id>6076821</id><snippet>last_line</snippet></ROW><ROW><id>6076903</id><snippet>../site-packages/</snippet></ROW><ROW><id>6076903</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/</snippet></ROW><ROW><id>6076903</id><snippet>../site-packages/</snippet></ROW><ROW><id>6077117</id><snippet>import __builtin__
from types import ModuleType

class DummyModule(ModuleType):
    def __getattr__(self, key):
        return None
    __all__ = []   # support wildcard imports

def tryimport(name, globals={}, locals={}, fromlist=[], level=-1):
    try:
        return realimport(name, globals, locals, fromlist, level)
    except ImportError:
        return DummyModule(name)

realimport, __builtin__.__import__ = __builtin__.__import__, tryimport

import sys   # works as usual
import foo   # no error

from bar import baz     # also no error
from quux import *      # ditto
</snippet></ROW><ROW><id>6077117</id><snippet>sys.modules</snippet></ROW><ROW><id>6077261</id><snippet>start c:\blank.txt:ads.exe</snippet></ROW><ROW><id>6077261</id><snippet>del c:\blank.txt</snippet></ROW><ROW><id>6077261</id><snippet>start</snippet></ROW><ROW><id>6077261</id><snippet>import subprocess, time
subprocess.call(r'echo Nothing special. &gt; c:\blank.txt', shell=True)
subprocess.call(r'type pause.exe &gt; c:\blank.txt:ads.exe', shell=True)
subprocess.call(r'start c:\blank.txt:ads.exe', shell=True)
time.sleep(42)  # 42 seconds is overkill, but the delay isn't predictable
subprocess.call(r'del c:\blank.txt', shell=True)
</snippet></ROW><ROW><id>6077520</id><snippet>-*-</snippet></ROW><ROW><id>6077684</id><snippet>item</snippet></ROW><ROW><id>6077684</id><snippet>gravatar_id</snippet></ROW><ROW><id>6077684</id><snippet>data</snippet></ROW><ROW><id>6077684</id><snippet>data</snippet></ROW><ROW><id>6077791</id><snippet>class Cls2(object):
    def __init__(self):
        self.var = 1
</snippet></ROW><ROW><id>6077791</id><snippet>.var</snippet></ROW><ROW><id>6077791</id><snippet>Cls2.var</snippet></ROW><ROW><id>6077791</id><snippet>        Cls2.var = 2
</snippet></ROW><ROW><id>6077791</id><snippet>self.var</snippet></ROW><ROW><id>6077791</id><snippet>Cls2</snippet></ROW><ROW><id>6077791</id><snippet>class Cls2(object):
    default= 1
    def __init__(self):
        self.var = Cls2.default
</snippet></ROW><ROW><id>6077791</id><snippet>Cls2.default= 2
</snippet></ROW><ROW><id>6078470</id><snippet>autocommit</snippet></ROW><ROW><id>6078470</id><snippet>0</snippet></ROW><ROW><id>6078470</id><snippet>commit()</snippet></ROW><ROW><id>6078470</id><snippet>execute("COMMIT")</snippet></ROW><ROW><id>6078528</id><snippet>os.walk</snippet></ROW><ROW><id>6078528</id><snippet>def zippy(path, archive):
    paths = os.listdir(path)
    for p in paths:
        p = os.path.join(path, p) # Make the path relative
        if os.path.isdir(p): # Recursive case
            zippy(p, archive)
        else:
            archive.write(p) # Write the file to the zipfile
    return

def zipit(path, archname):
    # Create a ZipFile Object primed to write
    archive = ZipFile(archname, "w", ZIP_DEFLATED) # "a" to append, "r" to read
    # Recurse or not, depending on what path is
    if os.path.isdir(path):
        zippy(path, archive)
    else:
        archive.write(path)
    archive.close()
    return "Compression of \""+path+"\" was successful!"
</snippet></ROW><ROW><id>6079039</id><snippet>import wx
import numpy as np
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.widgets import Cursor
from matplotlib.backends.backend_wxagg import \
   FigureCanvasWxAgg as FigCanvas, \
   NavigationToolbar2WxAgg as NavigationToolbar

class wxPlotting(wx.Frame):
   title = 'Test'
   def __init__(self):
      wx.Frame.__init__(self, None, -1, self.title)
      self.time = np.arange(10000)
      self.data = np.random.random(10000)
      self.sb = self.CreateStatusBar()
      self.create_main_panel()
      self.axes.plot(self.time, self.data)
      self.background = self.canvas.copy_from_bbox(self.fig.bbox)
      self.canvas.draw()

   def create_main_panel(self):
      self.panel = wx.Panel(self)
      self.fig = Figure((5.0, 4.0), dpi=100)
      self.canvas = FigCanvas(self.panel, -1, self.fig)
      self.axes = self.fig.add_subplot(111)
      self.text = self.axes.text(0., 1.005, '', transform = self.axes.transAxes, animated=True)
      self.cursor = Cursor(self.axes, useblit=True, color='red')
      self.canvas.mpl_connect('motion_notify_event', self.cbUpdateCursor)
      self.vbox = wx.BoxSizer(wx.VERTICAL)
      self.vbox.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
      self.panel.SetSizer(self.vbox)
      self.vbox.Fit(self)

   def cbUpdateCursor(self, event):
      if event.inaxes:
         text = 'x = %5.4f, y = %5.4f' % (event.xdata, event.ydata)
         self.sb.SetStatusText(text)

         self.canvas.restore_region(self.background)
         self.text.set_text(text)
         self.axes.draw_artist(self.text)
         self.canvas.blit(self.text.get_window_extent())

if __name__ == '__main__':
   app = wx.PySimpleApp()
   app.frame = wxPlotting()
   app.frame.Show()
   app.MainLoop()
</snippet></ROW><ROW><id>6079433</id><snippet>('i was returned')</snippet></ROW><ROW><id>6079433</id><snippet>(3+2)</snippet></ROW><ROW><id>6079433</id><snippet>do_this(*('i was returned'))</snippet></ROW><ROW><id>6079433</id><snippet>'i was returned'</snippet></ROW><ROW><id>6079433</id><snippet>do_this('i', ' ', 'w', 'a', 's', ' ', 'r', 'e', 't', 'u', 'r', 'n', 'e', 'd')
</snippet></ROW><ROW><id>6079433</id><snippet>('i was returned',)</snippet></ROW><ROW><id>6079436</id><snippet>\x00c\x00o..</snippet></ROW><ROW><id>6079436</id><snippet>import codecs, sys
for encoding in ('utf-8', 'cp1252'):
    out = codecs.open('%s.txt' % encoding, 'w', encoding)
    out.write('# coding = %s\n' % encoding)
    out.write(u'\u201chello se\u00f1nor\u201d')
    out.close()
</snippet></ROW><ROW><id>6079436</id><snippet>import codecs, re

def open_detect(path):
    fin = open(path, 'rb')
    prefix = fin.read(80)
    encs = re.findall('#\s*coding\s*=\s*([\w\d\-]+)\s+', prefix)
    encoding = encs[0] if encs else 'utf-8'
    fin.seek(0)
    return codecs.EncodedFile(fin, 'utf-8', encoding)

for path in ('utf-8.txt','cp1252.txt'):
    fin = open_detect(path)
    print repr(fin.readlines())
</snippet></ROW><ROW><id>6079436</id><snippet>['# coding = utf-8\n', '\xe2\x80\x9chello se\xc3\xb1nor\xe2\x80\x9d']
['# coding = cp1252\n', '\xe2\x80\x9chello se\xc3\xb1nor\xe2\x80\x9d']
</snippet></ROW><ROW><id>6080058</id><snippet>r"([aeiou][bcdfghjklmnpqrstvwxz])+"
</snippet></ROW><ROW><id>6080058</id><snippet>r"([bcdfghjklmnpqrstvwxz][aeiou])+"
</snippet></ROW><ROW><id>6080058</id><snippet>r"([aeiou]+[bcdfghjklmnpqrstvwxz]+)+"
</snippet></ROW><ROW><id>6080085</id><snippet>get_object_or_404</snippet></ROW><ROW><id>6080085</id><snippet>YourModel.DoesNotExist</snippet></ROW><ROW><id>6080085</id><snippet>Http404</snippet></ROW><ROW><id>6080085</id><snippet>DoesNotExist</snippet></ROW><ROW><id>6080085</id><snippet>ADMINS</snippet></ROW><ROW><id>6080085</id><snippet>settings.py</snippet></ROW><ROW><id>6080085</id><snippet>from django.shortcuts import get_object_or_404

post_id = 1
post = get_object_or_404(Post, id=post_id)

# or catch the exception and do something with it

from django.http import Http404
try:
    post = Post.objects.get(id=post_id)
except Post.DoesNotExist:
    # id doesnt exist... do extra things here
    raise Http404
</snippet></ROW><ROW><id>6080504</id><snippet>os.path.getsize</snippet></ROW><ROW><id>6080504</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.getsize('flickrapi-1.2.tar.gz')
35382L
</snippet></ROW><ROW><id>6080504</id><snippet>os.path.getsize('large.tar.gz') &gt;&gt; 20
</snippet></ROW><ROW><id>6080504</id><snippet>(1024*1024.0)</snippet></ROW><ROW><id>6080504</id><snippet>.0</snippet></ROW><ROW><id>6080530</id><snippet>WSGIApplicationGroup %{GLOBAL}
</snippet></ROW><ROW><id>6080819</id><snippet>def wordIterator(dictionaryFilename):
    with open(dictionaryFilename,'r') as f:
        for line in f:
            word = line.strip()
            yield word

def largestAnagram(words):
    import collections
    d = collections.defaultdict(list)
    for word in words:
        sortedWord = str(sorted(word))
        d[ hash(sortedWord) ].append(word)
    maxKey = max( d.keys(), key = lambda k : len(d[k]) )
    return d[maxKey]

iter = wordIterator( 'C:\\Python32\\megalist.txt' )
#iter = ( word for word in iter if len(word) == 5 )
print largestAnagram(iter)
</snippet></ROW><ROW><id>6080819</id><snippet>hash(sortedWord)</snippet></ROW><ROW><id>6080819</id><snippet>sortedWord</snippet></ROW><ROW><id>6080819</id><snippet>key</snippet></ROW><ROW><id>6080819</id><snippet>max</snippet></ROW><ROW><id>6080819</id><snippet>maxKey = max( d.keys(), key = lambda k : len(d[k]) )</snippet></ROW><ROW><id>6080819</id><snippet>max</snippet></ROW><ROW><id>6080819</id><snippet>valueWithMaximumLength(d)</snippet></ROW><ROW><id>6080819</id><snippet>def valueWithMaximumLength( dictionary ):
    maxKey = None
    for k, v in dictionary.items():
        if not maxKey or len(dictionary[maxKey]) &lt; len(v):
            maxKey = k
    return maxKey
</snippet></ROW><ROW><id>6080855</id><snippet>import MySQLdb

def insert_values(db, values):
    cursor = db.cursor()
    try:
        try:
            cursor.execute("""
            insert into pythontest (name1,name2,name3)
            values (%s, %s, %s)""", *values)
        except:
            db.rollback()
            raise
        else:
            db.commit()
    finally:
        cursor.close()

db = MySQLdb.connect("localhost","root","root","python" )

vars = ('name1','name2','name3')
insert_values(db, vars)

db.close()
</snippet></ROW><ROW><id>6080922</id><snippet>import sys

if sys.version_info &lt; (2 , 6):
    REQUIRES = ['gevent', 'ssl', 'configobj', 'simplejson', 'mechanize'],
else:
    REQUIRES = ['gevent', 'configobj', 'simplejson', 'mechanize'],

setup(
# [...]
    install_requires=REQUIRES,
# [...]
)
</snippet></ROW><ROW><id>6081043</id><snippet>import numpy
a = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])
numpy.savetxt("foo.csv", a, delimiter=",")
</snippet></ROW><ROW><id>6081181</id><snippet>var = [var1, var2, var3, ('a3', 'b4', 'c5'), var5]
</snippet></ROW><ROW><id>6081181</id><snippet>var = [locals()['var' + str(i)] for i in range(6)]
</snippet></ROW><ROW><id>6081181</id><snippet>var = []
for i in range(6):
    var.append(locals()['var' + str(i)])
</snippet></ROW><ROW><id>6081973</id><snippet>new.append(line.strip('*\n'))
new.append('*')
</snippet></ROW><ROW><id>6081973</id><snippet>new.append(line[:-2] + "\n")  # slice as you just checked line.endswith("*\n")
new.append("*\n")
</snippet></ROW><ROW><id>6082265</id><snippet>$PATH</snippet></ROW><ROW><id>6082265</id><snippet>sys.path</snippet></ROW><ROW><id>6082265</id><snippet>os.environ['PATH']</snippet></ROW><ROW><id>6082265</id><snippet>/usr/texbin</snippet></ROW><ROW><id>6082630</id><snippet>$ arp-scan --interface=eth0 --localnet
Interface: eth0, datalink type: EN10MB (Ethernet)
Starting arp-scan 1.5.2 with 256 hosts (http://www.nta-monitor.com/tools/arp-scan/)
192.168.1.1     00:c0:9f:09:b8:db       QUANTA COMPUTER, INC.
192.168.1.4     00:02:b3:bb:5c:09       Intel Corporation
192.168.1.3     00:02:b3:bb:66:98       Intel Corporation
192.168.1.5     00:02:a5:90:c3:e6       Compaq Computer Corporation
192.168.1.6     00:c0:9f:0b:91:d1       QUANTA COMPUTER, INC.
192.168.1.8     00:02:b3:3d:13:5e       Intel Corporation
...

34 packets received by filter, 0 packets dropped by kernel
Ending arp-scan 1.5.2: 256 hosts scanned in 1.717 seconds (149.10 hosts/sec).  33 responded
</snippet></ROW><ROW><id>6082652</id><snippet>__slots__</snippet></ROW><ROW><id>6082652</id><snippet>__setattr__</snippet></ROW><ROW><id>6082652</id><snippet>__setattr__</snippet></ROW><ROW><id>6082652</id><snippet>AttributeError</snippet></ROW><ROW><id>6082652</id><snippet>class AttrWrapper(object):
  def __init__(self, wrapped):
    self._wrapped = wrapped
  def __getattr__(self, n):
    return getattr(self._wrapped, n)
conn = AttrWrapper(sqlite3.connect(filepath))
</snippet></ROW><ROW><id>6082805</id><snippet>re.sub(r'&lt;[^&gt;]*?&gt;', '', val)</snippet></ROW><ROW><id>6083138</id><snippet>ls</snippet></ROW><ROW><id>6083138</id><snippet>stat(2)</snippet></ROW><ROW><id>6083138</id><snippet>find(1)</snippet></ROW><ROW><id>6083138</id><snippet>readdir</snippet></ROW><ROW><id>6083138</id><snippet>find dir -maxdepth 1|wc -l</snippet></ROW><ROW><id>6083538</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>6083538</id><snippet>.items()</snippet></ROW><ROW><id>6083538</id><snippet>OrderedDict</snippet></ROW><ROW><id>6083538</id><snippet>&gt;&gt;&gt; od = OrderedDict((('a', 'first'), ('b', 'second')))
&gt;&gt;&gt; od
OrderedDict([('a', 'first'), ('b', 'second')])
&gt;&gt;&gt; items = od.items()
&gt;&gt;&gt; items.reverse()
&gt;&gt;&gt; OrderedDict(items)
OrderedDict([('b', 'second'), ('a', 'first')])
</snippet></ROW><ROW><id>6083874</id><snippet>class Descriptor(object):
    pass

class Meta(type):
    def __new__(cls, name, bases, attrs):
        obj = type.__new__(cls, name, bases, attrs)
        # obj is now a type instance

        # this loop looks for Descriptor subclasses
        # and instantiates them, passing the type as the first argument
        for name, attr in attrs.iteritems():
            if isinstance(attr, type) and issubclass(attr, Descriptor):
                setattr(obj, name, attr(obj))

        return obj

class FooDescriptor(Descriptor):
    def __init__(self, owner):
        owner.foo = 42

class BarClass(object):
    __metaclass__ = Meta
    foo_attribute = FooDescriptor # will be instantiated by the metaclass

print BarClass.foo
</snippet></ROW><ROW><id>6083874</id><snippet>(class, args)</snippet></ROW><ROW><id>6083874</id><snippet>FooDescriptor</snippet></ROW><ROW><id>6084205</id><snippet>from gaesessions import get_current_session
session = get_current_session()
if session.is_active():
    c = session.get('counter', 0)
    session['counter'] = c + 1
    session['blah'] = 325
    del session.blah  # remove 'blah' from the session
</snippet></ROW><ROW><id>6084205</id><snippet>localStorage</snippet></ROW><ROW><id>6084368</id><snippet>from django.forms import Modelform
from django.forms.widgets import HiddenInput

class SomeForm(ModelForm):

    def __init__(self, *args, **kwargs):
        # call constructor to set up the fields. If you don't do this 
        # first you can't modify fields.
        super(SomeForm, self).__init__(*args, **kwargs)

        try:
            # make somefunc return something True
            # if you can change the driver.
            # might make sense in a model?
            canchangedriver = self.instance.somefunc()                          
        except AttributeError:
            # unbound form, what do you want to do here?
            canchangedriver = True # for example?

        # if the driver can't be changed, use a input=hidden
        # input field.
        if not canchangedriver:
            self.fields["Drivers"].widget = HiddenInput()

    class Meta:
        model = SomeModel
</snippet></ROW><ROW><id>6084368</id><snippet>self.instance</snippet></ROW><ROW><id>6084368</id><snippet>kwargs</snippet></ROW><ROW><id>6084368</id><snippet>self.instance</snippet></ROW><ROW><id>6084368</id><snippet>&lt;input type="hidden" .../&gt;</snippet></ROW><ROW><id>6084368</id><snippet>__init__</snippet></ROW><ROW><id>6084368</id><snippet>self.instance.olddrivers = instance.drivers.all()
</snippet></ROW><ROW><id>6084368</id><snippet>def clean(self):
    # validate parent. Do this first because this method
    # will transform field values into model field values.
    # i.e. instance will reflect the form changes.
    super(SomeForm, self).clean()

    # can we modify drivers?
    canchangedriver = self.instance.somefunc() 

    # either we can change the driver, or if not, we require 
    # that the two lists are, when sorted, equal (to allow for 
    # potential non equal ordering of identical elements).

    # Wrapped code here for niceness
    if (canchangedriver or 
                   (sorted(self.instance.drivers.all()) == 
                    sorted(self.instance.olddrivers))):  
        return True
    else:
        raise ValidationError() # customise this to your liking.
</snippet></ROW><ROW><id>6084409</id><snippet>dic = {'a':'111', 'b':'222', 'c':'333'}

def create_connect(x):
    return lambda: doit(x)

for key in dic:
    btn = QPushButton(key, self)
    btn.clicked.connect(create_connect(dic[key]))
    vbox.addWidget(btn)
</snippet></ROW><ROW><id>6084552</id><snippet>from collections import defaultdict
from functools import partial

results = defaultdict(partial(defaultdict, int))
for main, month, tot in list_data:
    results[main][month] += tot
    results[main]["total"] += tot
    results[u"grandtotal"][month] += tot
result_output = dict((k, dict(v)) for k, v in results.items())
</snippet></ROW><ROW><id>6084608</id><snippet>math.fmod</snippet></ROW><ROW><id>6084608</id><snippet>def cmod(x, y):
    return abs(x) % abs(y) * (1 if x &gt; 0 else -1)
</snippet></ROW><ROW><id>6084608</id><snippet>def cdiv(x, y):
    return abs(x) / abs(y) * cmp(x, 0) * cmp(y, 0)
</snippet></ROW><ROW><id>6084608</id><snippet>/</snippet></ROW><ROW><id>6084608</id><snippet>%</snippet></ROW><ROW><id>6084608</id><snippet>__div__</snippet></ROW><ROW><id>6084608</id><snippet>__mod__</snippet></ROW><ROW><id>6084672</id><snippet>MCs = [[x[0]] for x in MCs]
</snippet></ROW><ROW><id>6084672</id><snippet>list(iterable)</snippet></ROW><ROW><id>6084801</id><snippet>DEBUG_LEAK</snippet></ROW><ROW><id>6084801</id><snippet>gc.garbage</snippet></ROW><ROW><id>6084801</id><snippet>DEBUG_LEAK</snippet></ROW><ROW><id>6084801</id><snippet>gc.garbage</snippet></ROW><ROW><id>6084917</id><snippet># Load the words into a dictionary
words = dict((x.strip(), set()) for x in open("/usr/share/dict/words"))

# For each word, remove each letter and see if the remaining word is still
# in the dictionary. If so, add it to the set of shorter words associated with
# that word in the dictionary.
# For example, bear -&gt; {ear, bar, ber}
for w in words:
    for i in range(len(w)):
        shorter = w[:i] + w[i+1:]
        if shorter in words:
            words[w].add(shorter)

# Sort the words by length so we process the shortest ones first
sortedwords = sorted(words, key=len)

# For each word, the maximum chain length is:
#  - the maximum of the chain lengths of each shorter word, if any
#  - or 0 if there are no shorter words for this word
# Note that because sortedwords is sorted by length, we will always
# have maxlength[x] already available for each shorter word x
maxlength = {}
for w in sortedwords:
    if words[w]:
        maxlength[w] = 1 + max(maxlength[x] for x in words[w])
    else:
        maxlength[w] = 0

# Print the words in all chains for each of the top 10 words
toshow = sorted(words, key=lambda x: maxlength[x], reverse=True)[:10]
while toshow:
    w = toshow[0]
    print(w, [(x, maxlength[x]) for x in words[w]])
    toshow = toshow[1:] + list(x for x in words[w] if x not in toshow)
</snippet></ROW><ROW><id>6085158</id><snippet>python-psycopg2</snippet></ROW><ROW><id>6085158</id><snippet>python2.5 setup.py install
</snippet></ROW><ROW><id>6085158</id><snippet>python2.5</snippet></ROW><ROW><id>6085324</id><snippet>mytemplate.render(hi = "world")
</snippet></ROW><ROW><id>6085324</id><snippet>hi</snippet></ROW><ROW><id>6085324</id><snippet>"world"</snippet></ROW><ROW><id>6085482</id><snippet>from operator import attrgetter
min_num = min(li,key=attrgetter('number'))
</snippet></ROW><ROW><id>6085482</id><snippet>&gt;&gt;&gt; li = [SpecialNumber(1), SpecialNumber(3), SpecialNumber(2)]
&gt;&gt;&gt; [i.number for i in li]
[1, 3, 2]
&gt;&gt;&gt; min_num = min(li,key=attrgetter('number'))
&gt;&gt;&gt; print min_num.number
1
</snippet></ROW><ROW><id>6085639</id><snippet>defaults write com.apple.CrashReporter DialogType server
</snippet></ROW><ROW><id>6085737</id><snippet>def derivs(l):
  return [l[i + 1] - l[i] for i in range(len(l) - 1)]
</snippet></ROW><ROW><id>6085808</id><snippet>class profileForm(ModelForm):
    first_name = forms.CharField(max_length=30, required=False)
    last_name  = forms.CharField(max_length=30, required=False)
    class Meta:
        model = UserProfile

    def save(self, commit=True):
        m = super(customerForm, self).save(commit=False)
        # Update and save user model here
        if commit:
            m.save()
        return m
</snippet></ROW><ROW><id>6085958</id><snippet>download</snippet></ROW><ROW><id>6086063</id><snippet>proc = subprocess.Popen(['python', 'printbob.py',  'arg1 arg2 arg3 arg4'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
print proc.communicate()[0]
</snippet></ROW><ROW><id>6086273</id><snippet>'NAME': '/home/vmplanet/code/blog', # Or path to database file if using sqlite3.
</snippet></ROW><ROW><id>6086273</id><snippet>/home/vmplanet/code/blog/blog.db</snippet></ROW><ROW><id>6086722</id><snippet>from contextlib import closing
with closing(tarfile.open('/dir/dir/dir.tar.gz', 'w:gz')) as fl:
    fl.add('/dir/dir/dir/', arcname = '/')
</snippet></ROW><ROW><id>6086722</id><snippet>page.close()</snippet></ROW><ROW><id>6086722</id><snippet>contextlib.closing</snippet></ROW><ROW><id>6086877</id><snippet>hasattr</snippet></ROW><ROW><id>6086877</id><snippet>callable</snippet></ROW><ROW><id>6086877</id><snippet>class Fun:
    def hello(self):
        print 'Hello'

hasattr(Fun, 'hello')   # -&gt; True
callable(Fun.hello)     # -&gt; True
</snippet></ROW><ROW><id>6086877</id><snippet>callable(Fun.hello)</snippet></ROW><ROW><id>6086877</id><snippet>try:
    callable(Fun.goodbye)
except AttributeError, e:
    return False
</snippet></ROW><ROW><id>6087253</id><snippet>- url: /mapreduce(/.*)?
  script: $PYTHON_LIB/google/appengine/ext/mapreduce/main.py
</snippet></ROW><ROW><id>6087253</id><snippet>- url: /mapred_.*
  script: mapred.py
</snippet></ROW><ROW><id>6087253</id><snippet>mapreduce:
- name: Color_Counter
  params:
  - name: done_callback
    value: /mapred_update
  mapper:
    input_reader: google.appengine.ext.mapreduce.input_readers.DatastoreInputReader
    handler: mapred.process
    params:
    - name: entity_kind
      default: models.Car
</snippet></ROW><ROW><id>6087253</id><snippet>from models import CarsByColor
from google.appengine.ext import db
from google.appengine.ext.mapreduce import operation as op
from google.appengine.ext.mapreduce.model import MapreduceState

from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

def process(entity):
    """Process individual Car"""
    color = entity.color
    if color:
        yield op.counters.Increment('car_color_%s' % color)

class UpdateCounters(webapp.RequestHandler):
    """Create stats models CarsByColor based on the data 
    gathered by mapreduce counters"""
    def post(self):
        """Called after mapreduce operation are finished"""
        # Finished mapreduce job id is passed in request headers
        job_id = self.request.headers['Mapreduce-Id']
        state = MapreduceState.get_by_job_id(job_id)
        to_put = []
        counters = state.counters_map.counters
        # Remove counter not needed for stats
        del counters['mapper_calls']
        for counter in counters.keys():
            stat = CarsByColor.get_by_key_name(counter)
            if not stat:
                stat = CarsByColor(key_name=counter,
                                name=counter)
            stat.value = counters[counter]
            to_put.append(stat)
        db.put(to_put)

        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Updated.')


application = webapp.WSGIApplication(
                                     [('/mapred_update', UpdateCounters)],
                                     debug=True)
def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()            
</snippet></ROW><ROW><id>6087266</id><snippet>url(r'^(?P&lt;params_list&gt;(\w+)\+?)+)/$');
</snippet></ROW><ROW><id>6087266</id><snippet>def my_view(request, params):
  if not validate_params(params): # validate as you wish
    raise Http404()

  # continue with your view
</snippet></ROW><ROW><id>6087351</id><snippet>soup = BeautifulSoup(url)
</snippet></ROW><ROW><id>6087446</id><snippet>&gt;&gt;&gt; from os import chdir
&gt;&gt;&gt; chdir("C:/myOtherWork")
</snippet></ROW><ROW><id>6087446</id><snippet>&gt;&gt;&gt; from os.path import abspath
&gt;&gt;&gt; abspath('.')
</snippet></ROW><ROW><id>6087446</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.append('.')
</snippet></ROW><ROW><id>6087515</id><snippet>pygame.image.save</snippet></ROW><ROW><id>6087515</id><snippet>window = pygame.display.set_mode(...)

...

pygame.image.save(window, "screenshot.jpeg")
</snippet></ROW><ROW><id>6087775</id><snippet>difference</snippet></ROW><ROW><id>6087775</id><snippet>set_difference</snippet></ROW><ROW><id>6087775</id><snippet>template &lt;typename T, typename Compare, typename Allocator&gt;
void my_set_difference( std::set&lt;T,Compare,Allocator&gt;&amp; lhs, std::set&lt;T,Compare,Allocator&gt; const &amp; rhs )
{
    typedef std::set&lt;T,Comapre,Allocator&gt; set_t;
    typedef typename set_t::iterator iterator;
    typedef typename set_t::const_iterator const_iterator;

    const_iterator rit = rhs.begin(), rend = rhs.end();
    iterator it = lhs.begin(), end = lhs.end();
    while ( it != end &amp;&amp; rit != rend )
    {
        if ( lhs.key_comp( *it, *rit ) ) {
            ++it;
        } else if ( lhs.key_comp( *rit, *it ) ) {
            ++rit;
        } else {
            ++rit;
            lhs.erase( it++ );
        }
    }
}
</snippet></ROW><ROW><id>6088048</id><snippet>get_name</snippet></ROW><ROW><id>6088048</id><snippet>strftime</snippet></ROW><ROW><id>6088048</id><snippet>foo = 1
</snippet></ROW><ROW><id>6088048</id><snippet>foo</snippet></ROW><ROW><id>6088048</id><snippet>foo</snippet></ROW><ROW><id>6088048</id><snippet>foo</snippet></ROW><ROW><id>6088048</id><snippet>foo</snippet></ROW><ROW><id>6088048</id><snippet>foo = 2</snippet></ROW><ROW><id>6088048</id><snippet>1</snippet></ROW><ROW><id>6088051</id><snippet>10 ** 100</snippet></ROW><ROW><id>6088051</id><snippet>3 * 10 ** 46</snippet></ROW><ROW><id>6088051</id><snippet>xrange</snippet></ROW><ROW><id>6088051</id><snippet>range</snippet></ROW><ROW><id>6088051</id><snippet>OverflowError</snippet></ROW><ROW><id>6088051</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; from math import factorial, cos, e
&gt;&gt;&gt; for t in [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1]:
...     summables = ((4 ** (2 * n) * cos(2 * n * t)) / (e ** 16 * factorial(n)) 
...                  for n in itertools.count())
...     print 0.5 * (1 + sum(itertools.takewhile(lambda x: abs(x) &gt; 1e-80, summables)))
... 
1.0
0.973104754771
0.89599816753
0.77928588758
0.65382602277
0.569532373683
0.529115621076
0.512624956755
0.505673516974
0.502777962546
0.501396442319
</snippet></ROW><ROW><id>6088051</id><snippet>(e ** 16) * factorial(n)</snippet></ROW><ROW><id>6088051</id><snippet>e ** (16 * factorial(n))</snippet></ROW><ROW><id>6088092</id><snippet>&gt;&gt;&gt; random.uniform(1.5, 1.9)
1.8733202628557872
</snippet></ROW><ROW><id>6088197</id><snippet>showNormal()</snippet></ROW><ROW><id>6088197</id><snippet>showMinimized()</snippet></ROW><ROW><id>6088294</id><snippet>base_dir</snippet></ROW><ROW><id>6088294</id><snippet>shutil.make_archive('public_html_backup', 'zip', '/home/john', '/home/john/public_html')
</snippet></ROW><ROW><id>6088442</id><snippet>import Tkinter as tk
root = tk.Tk()
</snippet></ROW><ROW><id>6088442</id><snippet>import urllib
URL = "http://www.smellymonkey.com/monkeys/images/ill-monkey.gif"
u = urllib.urlopen(URL)
raw_data = u.read()
u.close()
</snippet></ROW><ROW><id>6088442</id><snippet>raw_data</snippet></ROW><ROW><id>6088442</id><snippet>data</snippet></ROW><ROW><id>6088442</id><snippet>import base64
b64_data = base64.encodestring(raw_data)
image = tk.PhotoImage(data=b64_data)
</snippet></ROW><ROW><id>6088442</id><snippet>label = tk.Label(image=image)
label.pack()
</snippet></ROW><ROW><id>6088442</id><snippet>PhotoImage</snippet></ROW><ROW><id>6088442</id><snippet>PhotoImage</snippet></ROW><ROW><id>6088532</id><snippet>class Form(forms.Form):
    def __init__(self, gender_choices, *args, **kwargs):
        super(Form, self).__init__(*args, **kwargs)
        self.fields['gender'] = forms.ChoiceField(choices=gender_choices)
</snippet></ROW><ROW><id>6088532</id><snippet>&gt;&gt;&gt; choices = (('m', 'Male'), ('f', 'Female'))

&gt;&gt;&gt; f = Form(choices)

&gt;&gt;&gt; print f
&lt;tr&gt;&lt;th&gt;&lt;label for="id_gender"&gt;Gender:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;select name="gender" id="id_gender"&gt;
&lt;option value="m"&gt;Male&lt;/option&gt;
&lt;option value="f"&gt;Female&lt;/option&gt;
&lt;/select&gt;&lt;/td&gt;&lt;/tr&gt;
</snippet></ROW><ROW><id>6088673</id><snippet>buildProtocol</snippet></ROW><ROW><id>6088673</id><snippet>class MyFactory(ClientFactory):
    protocol = MyProtocol

    ...

    def buildProtocol(self, address):
        proto = ClientFactory.buildProtocol(self, address)
        self.connectedProtocol = proto
        return proto
</snippet></ROW><ROW><id>6088673</id><snippet>buildProtocol</snippet></ROW><ROW><id>6088673</id><snippet>connectedProtocol</snippet></ROW><ROW><id>6088673</id><snippet>factory = MyFactory()
reactor.connectTCP(host, port, factory)
factory.connectedProtocol.send_message(...)
</snippet></ROW><ROW><id>6088673</id><snippet>AttributeError</snippet></ROW><ROW><id>6088673</id><snippet>from twisted.internet.protocol import ClientCreator

cc = ClientCreator(reactor, MyProtocol)
whenConnected = cc.connectTCP(host, port)

# Or the equivalent with endpoints
#  from twisted.internet.endpoints import TCP4ClientEndpoint
#  from twisted.internet.protocol import ClientFactory
#  endpoint = TCP4ClientEndpoint(reactor, host, port)
#  factory = ClientFactory()
#  factory.protocol = MyProtocol
#  whenConnected = endpoint.connect(factory)

def cbConnected(connectedProtocol):
    connectedProtocol.send_message(...)

def ebConnectError(reason):
    # Connection attempt failed, perhaps retry
    ...

whenConnected.addCallbacks(cbConnected, ebConnectError)
</snippet></ROW><ROW><id>6088673</id><snippet>connectedProtocol</snippet></ROW><ROW><id>6088673</id><snippet>cbConnected</snippet></ROW><ROW><id>6088673</id><snippet>cbConnected</snippet></ROW><ROW><id>6088751</id><snippet>[x for x in q_list if x[2] == 'John Dee']
</snippet></ROW><ROW><id>6088751</id><snippet>filter</snippet></ROW><ROW><id>6088751</id><snippet>filter(lambda x: x[2] == 'John Dee', q_list)
</snippet></ROW><ROW><id>6088751</id><snippet>q_dict</snippet></ROW><ROW><id>6088751</id><snippet>[x for x in q_list if [x[2].lower().replace(' ', ''), x[7]] == q_dict.values()]
</snippet></ROW><ROW><id>6088751</id><snippet>namedtuple</snippet></ROW><ROW><id>6088751</id><snippet>fields =  ['field1', 'field2', 'username', 'field4', 'field5', 'field6', 'field7', 'queue', 'field9', 'field10']
Item = namedtuple('Item', fields)
</snippet></ROW><ROW><id>6088751</id><snippet>q_namedtuple = [Item(*x) for x in q_list]
</snippet></ROW><ROW><id>6088751</id><snippet>[item for item in q_namedtuple if all(getattr(item, k) == v for k, v in q_dict.iteritems())]
</snippet></ROW><ROW><id>6088751</id><snippet>q_dict</snippet></ROW><ROW><id>6088751</id><snippet>q_list_of_dicts = [dict(zip(fields, x)) for x in q_list]
</snippet></ROW><ROW><id>6088751</id><snippet>{'field1': '102.vmtest2',
 ...etc
 'queue': 'short',
 'username': 'John Dee'}
</snippet></ROW><ROW><id>6088751</id><snippet>[item for item in q_list_of_dicts if all(item.get(k) == v for k, v in q_dict.iteritems())]
</snippet></ROW><ROW><id>6088751</id><snippet>results = []
for item in q_list:
    d = dict(zip(fields, item))
    # use some other logic to filter
    if all(d.get(k) == v for k, v in q_dict.iteritems()):
         results.append(d)
</snippet></ROW><ROW><id>6088911</id><snippet>&gt;&gt;&gt; import tidy
&gt;&gt;&gt; print tidy.parseString("&lt;IceCream&gt;Ben&amp;Jerry&lt;/IceCream&gt;", input_xml=True)
&lt;IceCream&gt;Ben&amp;Jerry&lt;/IceCream&gt;
</snippet></ROW><ROW><id>6089035</id><snippet>x, y = N.meshgrid(N.arange(img.shape[1]), N.arange(img.shape[0]))
</snippet></ROW><ROW><id>6089035</id><snippet>pts</snippet></ROW><ROW><id>6089035</id><snippet>pts = N.column_stack((x.ravel(), y.ravel()))
</snippet></ROW><ROW><id>6089035</id><snippet>xx, yy = N.mgrid[0.:float(img.shape[1]):1/float(colscale),
        0.:float(img.shape[0]):1/float(rowscale)]
</snippet></ROW><ROW><id>6089035</id><snippet>pts</snippet></ROW><ROW><id>6089035</id><snippet>large = scipy.interpolate.griddata(pts, img.flatten(), (xx, yy), method).T
</snippet></ROW><ROW><id>6089035</id><snippet>large[-1,:] = large[-2,:]
large[:,-1] = large[:,-2]
return large
</snippet></ROW><ROW><id>6089477</id><snippet>etree.tostrng()</snippet></ROW><ROW><id>6089477</id><snippet>re.sub('html:', '', thetext)</snippet></ROW><ROW><id>6089897</id><snippet>conn.commit()
</snippet></ROW><ROW><id>6089897</id><snippet>autocommit</snippet></ROW><ROW><id>6090129</id><snippet>from collections import defaultdict
import csv

reader = csv.reader(open('data.file', 'rb'), delimiter='\t')
data_of_category = defaultdict(list)
lines = [line for line in reader]
mask =  [i for i, n in enumerate(lines[1]) if gettype(n)!="float"]
for line in lines[1:]:
    category = ','.join([line[i] for i in mask])
    data_of_category[category].append(line)
</snippet></ROW><ROW><id>6090294</id><snippet>import gtk
icon_theme = gtk.icon_theme_get_default()
icon_info = icon_theme.lookup_icon("my-icon-name", 48, 0)
print icon_info.get_filename()
</snippet></ROW><ROW><id>6090359</id><snippet>mod_wsgi</snippet></ROW><ROW><id>6090400</id><snippet>StringIO</snippet></ROW><ROW><id>6090536</id><snippet>import numpy as np

arr=np.arange(36).reshape(6,6)
print(arr)
# [[ 0  1  2  3  4  5]
#  [ 6  7  8  9 10 11]
#  [12 13 14 15 16 17]
#  [18 19 20 21 22 23]
#  [24 25 26 27 28 29]
#  [30 31 32 33 34 35]]
arr2=arr.reshape(-1,2)
print(arr2)
# [[ 0  1]
#  [ 2  3]
#  [ 4  5]
#  [ 6  7]
#  [ 8  9]
#  [10 11]
#  [12 13]
#  [14 15]
#  [16 17]
#  [18 19]
#  [20 21]
#  [22 23]
#  [24 25]
#  [26 27]
#  [28 29]
#  [30 31]
#  [32 33]
#  [34 35]]
</snippet></ROW><ROW><id>6090536</id><snippet>means=arr2.mean(axis=1)
print(means)
# [  0.5   2.5   4.5   6.5   8.5  10.5  12.5  14.5  16.5  18.5  20.5  22.5
#   24.5  26.5  28.5  30.5  32.5  34.5]
</snippet></ROW><ROW><id>6090536</id><snippet>means=means.reshape(6,-1)
print(means)
# [[  0.5   2.5   4.5]
#  [  6.5   8.5  10.5]
#  [ 12.5  14.5  16.5]
#  [ 18.5  20.5  22.5]
#  [ 24.5  26.5  28.5]
#  [ 30.5  32.5  34.5]]
</snippet></ROW><ROW><id>6090536</id><snippet>means=arr.reshape(-1,2).mean(axis=1).reshape(6,-1)
</snippet></ROW><ROW><id>6090536</id><snippet>mean</snippet></ROW><ROW><id>6090682</id><snippet>def annotate(gen):
    prev_i, prev_val = 0, gen.next()
    for i, val in enumerate(gen, start=1):
        yield prev_i, prev_val
        prev_i, prev_val = i, val
    yield '-1', prev_val
</snippet></ROW><ROW><id>6090682</id><snippet>gen = iter(gen)</snippet></ROW><ROW><id>6090918</id><snippet># File Name RandonProteinSequences.py
# standard library
import os
import random

# biopython
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
from sys import *

residueList1 = ["C","D","E","F","G","H","I"]
residueList2 = ["A","K","L","M","N","S"]
residueList3 = ["P","Q","R","T","V","W","Y"]
residueList4 = ["C","A","G","U"]

def getProteinSeqRecord(residue, seqcount):
    strSeq = ""
    for i in range(0,100,1):
        index = random.randint(0, len(residue)-1)
        strSeq += residue[index]

    sequence = Seq(strSeq, IUPAC.IUPACProtein)
    seqRec = SeqRecord(sequence, id = 'randSeq' + str(seqcount), description= 'A random sequence using Amino acid residues.')
    return seqRec

def getProteinSequence(residue):
    strSeq = ""
    for i in range(0,100,1):
        index = random.randint(0, len(residue)-1)
        strSeq += residue[index]

    sequence = Seq(strSeq, IUPAC.IUPACProtein)
    return sequence

def randomProteinSeqRecord(index):
    if(index%2)==0:
        return getProteinSeqRecord(residueList1, index)
    elif(index%3)==0:
        return getProteinSeqRecord(residueList2, index)
    else:
        return getProteinSeqRecord(residueList3, index)

#information
print '--- This is python based program to generate random sequences ---'
print '--- Provide number of random sequences to generate. Default 10 ---'
print '--- Inorder to save to a file provide file path or filename ---'
print '--- If none or invalid filepath is provided then results will be displayed to console ---'
print '--- The file will be created in fasta format ---'
print

filepathProvided = False
#raw_input received the user input as string
try:
    filepath = raw_input('Enter filepath to save sequences ... ')
    filepath = filepath + '.fasta'
    #handle = open(filepath, "w")
    #handle.close()

    filepathProvided = True
except IOError:
    print 'Invalid or No File provided will print results to console'
print
ranSeqCount = 10
try:
    ranSeqCount = int(raw_input('Enter number of random sequences to generate ... '))
except ValueError:
    ranSeqCount = 10
    pass

print 'Sequence Count : '
print ranSeqCount

records = []
for i in range(0,ranSeqCount,1):
    records.append(randomProteinSeqRecord(i+1))

if(filepathProvided):
    SeqIO.write(records, filepath, "fasta")
    print 'File created at : ' + filepath

else:
    print 'Writing to console is actually not supported!  :/'

print
raw_input('Press any key to exit ...')
print
</snippet></ROW><ROW><id>6091033</id><snippet>if __name__ == '__main__':
     # put your line of code here
     # add this to file1.py
</snippet></ROW><ROW><id>6091050</id><snippet>class B(A):
    def __init__(self, obj):
        self.__dict__.update(obj.__dict__)
</snippet></ROW><ROW><id>6091119</id><snippet>ctags</snippet></ROW><ROW><id>6091119</id><snippet>--append</snippet></ROW><ROW><id>6091119</id><snippet>ctags -R
ctags --append -R /path/to/python-source
</snippet></ROW><ROW><id>6091119</id><snippet>Lib/</snippet></ROW><ROW><id>6091119</id><snippet>ctags -R
ctags --append -R /path/to/python-source/Lib
</snippet></ROW><ROW><id>6091119</id><snippet>cscope</snippet></ROW><ROW><id>6091119</id><snippet>gid</snippet></ROW><ROW><id>6091119</id><snippet>ctags</snippet></ROW><ROW><id>6091119</id><snippet>ctags</snippet></ROW><ROW><id>6091119</id><snippet>vim</snippet></ROW><ROW><id>6091119</id><snippet>gid</snippet></ROW><ROW><id>6091159</id><snippet>at</snippet></ROW><ROW><id>6091159</id><snippet>batch</snippet></ROW><ROW><id>6091159</id><snippet>import os

os.system("batch &lt;&lt;&lt; '/home/some_user/do_the_due.py'")
# or if you don't want to wait for system idle, 
#   os.system("at now &lt;&lt;&lt; '/home/some_user/do_the_due.py'")

print 'Content-type: text/html\n'
print 'Done!'
</snippet></ROW><ROW><id>6091159</id><snippet>at</snippet></ROW><ROW><id>6091159</id><snippet>/etc/at.deny</snippet></ROW><ROW><id>6091179</id><snippet>In [1]: import gi  
In [2]: gi.require_version("Gdk", "3.0")   
In [3]: from gi.repository import Gdk    
In [4]: Gdk.__path__
Out[4]: '/usr/lib64/girepository-1.0/Gdk-3.0.typelib'    
In [5]: Gdk.atom_intern
Out[5]: &lt;function atom_intern at 0x152f140&gt;    
In [6]: Gdk.atom_intern_static_string
Out[6]: &lt;function atom_intern_static_string at 0x152f398&gt;
</snippet></ROW><ROW><id>6091179</id><snippet>sudo apt-get install gir1.2-gtk-3.0</snippet></ROW><ROW><id>6091201</id><snippet>std::string</snippet></ROW><ROW><id>6091201</id><snippet>%include "std_string.i"</snippet></ROW><ROW><id>6091201</id><snippet>%module example
%include "std_string.i"

std::string foo();
void        bar(const std::string &amp;x);
</snippet></ROW><ROW><id>6091530</id><snippet>medfilt2</snippet></ROW><ROW><id>6091530</id><snippet>The sample median is the middle array value in a sorted list of neighborhood values
</snippet></ROW><ROW><id>6091530</id><snippet>1,1</snippet></ROW><ROW><id>6091530</id><snippet>1 2 3
3 4 2
1 7 3
</snippet></ROW><ROW><id>6091530</id><snippet>1 1 2 2 3 3 3 4 7
</snippet></ROW><ROW><id>6091530</id><snippet>3</snippet></ROW><ROW><id>6091967</id><snippet>v</snippet></ROW><ROW><id>6091967</id><snippet>(v,) = the_set
</snippet></ROW><ROW><id>6091967</id><snippet>the_set</snippet></ROW><ROW><id>6092016</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>6092016</id><snippet>&gt;&gt;&gt; sys.getsizeof({1:2})
280
&gt;&gt;&gt; sys.getsizeof({'a_really_long_string_that_takes_up_lots_of_space':'foo'})
280
</snippet></ROW><ROW><id>6092079</id><snippet>start</snippet></ROW><ROW><id>6092079</id><snippet>name</snippet></ROW><ROW><id>6092079</id><snippet>tags</snippet></ROW><ROW><id>6092079</id><snippet>start</snippet></ROW><ROW><id>6092079</id><snippet>name</snippet></ROW><ROW><id>6092079</id><snippet>tags</snippet></ROW><ROW><id>6092079</id><snippet>/&lt;name="(\d+)"[^&lt;]+?&lt;tags="([^"]+?)" model="c"&gt;/s
</snippet></ROW><ROW><id>6092079</id><snippet>&lt;</snippet></ROW><ROW><id>6092079</id><snippet>tags</snippet></ROW><ROW><id>6092079</id><snippet>&lt;tags&gt;</snippet></ROW><ROW><id>6092079</id><snippet>&lt;start&gt;</snippet></ROW><ROW><id>6092079</id><snippet>/&lt;name="(\d+)"[^&lt;]+?&lt;tags="([^"]+?)" model="c"&gt;[^&lt;]*(?!&lt;start)/s
</snippet></ROW><ROW><id>6092079</id><snippet>/&lt;name="(\d+)"(?:(?!&lt;start).)+&lt;tags="([^"]+?)" model="c"&gt;/s
</snippet></ROW><ROW><id>6092079</id><snippet>((?!str).)+</snippet></ROW><ROW><id>6092079</id><snippet>&lt;start</snippet></ROW><ROW><id>6092079</id><snippet>start</snippet></ROW><ROW><id>6092079</id><snippet>(?&lt;!start)</snippet></ROW><ROW><id>6092079</id><snippet>(?!&lt;start)</snippet></ROW><ROW><id>6092079</id><snippet>(?!(&lt;start))</snippet></ROW><ROW><id>6092079</id><snippet>(?&lt;!(start))</snippet></ROW><ROW><id>6092079</id><snippet>(?: )</snippet></ROW><ROW><id>6092188</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; collection = [(1, 200, 9),
...               (2, 300, 8),
...               (3, 400, 7)]
&gt;&gt;&gt; collection = np.array(collection)
&gt;&gt;&gt; def f(d, c, v):
...     # d: collection, c: column, v: value
...     if np.any(d[:, c]==v): return d[d[:, c]==v]
...     return 'None'
...
&gt;&gt;&gt; f(collection, 0, 1)
array([[  1, 200,   9]])
&gt;&gt;&gt; f(collection, 1, 300)
array([[  2, 300,   8]])
&gt;&gt;&gt; f(collection, 2, 250)
'None'
</snippet></ROW><ROW><id>6092236</id><snippet>def accountReader():

    while True:
        chargeInput = (raw_input ("Enter a charge account to be validated: "))
        if chargeInput == '':
            break
            sys.exit
</snippet></ROW><ROW><id>6092236</id><snippet>        else:
            chargeAccount = open('charge_accounts.txt', 'r')
            line = chargeAccount.readline()
</snippet></ROW><ROW><id>6092236</id><snippet>readline</snippet></ROW><ROW><id>6092236</id><snippet>chargeAccount</snippet></ROW><ROW><id>6092236</id><snippet>line</snippet></ROW><ROW><id>6092236</id><snippet>            while line != '':
                if chargeInput == line:
                    print chargeInput, 'was found in list.'
</snippet></ROW><ROW><id>6092236</id><snippet>chargeInput == line</snippet></ROW><ROW><id>6092236</id><snippet>\n</snippet></ROW><ROW><id>6092236</id><snippet>chargeInput == line</snippet></ROW><ROW><id>6092236</id><snippet>.strip()</snippet></ROW><ROW><id>6092236</id><snippet>if chargeInput in line</snippet></ROW><ROW><id>6092236</id><snippet>                else:
                    print chargeInput, 'not found in list.'
                    break           


    chargeFile.close  
</snippet></ROW><ROW><id>6092236</id><snippet>chargeAccount</snippet></ROW><ROW><id>6092236</id><snippet>line = chargeAccount.readline()</snippet></ROW><ROW><id>6092399</id><snippet>a = numpy.matrix(a)
b = numpy.matrix(b)
c = a+b
d = a*b
</snippet></ROW><ROW><id>6092399</id><snippet>a = numpy.array(a)
b = numpy.array(b)
c = a+b
d = a*b
</snippet></ROW><ROW><id>6092622</id><snippet>is_employee</snippet></ROW><ROW><id>6092622</id><snippet>class Person(models.Model):
    # your existing code goes here

    @property
    def is_employee(self):
         try:
              self.employee # try to get the associated Employee object
              return True
         except Employee.DoesNotExist:
              return False


class PersonSearchIndex(SearchIndex):
    # your existing code goes here
    is_employee = BooleanField(model_attr='is_employee')
</snippet></ROW><ROW><id>6092622</id><snippet>query = SearchQuerySet().filter(is_employee=False)
</snippet></ROW><ROW><id>6092622</id><snippet>person_type</snippet></ROW><ROW><id>6092747</id><snippet>docs_to_dump = Document.objects.all().order_by('court').iterator()
</snippet></ROW><ROW><id>6092772</id><snippet>computer_move</snippet></ROW><ROW><id>6092772</id><snippet>computer</snippet></ROW><ROW><id>6092772</id><snippet>board</snippet></ROW><ROW><id>6092772</id><snippet>human</snippet></ROW><ROW><id>6092772</id><snippet>computer_move</snippet></ROW><ROW><id>6092772</id><snippet>board</snippet></ROW><ROW><id>6092772</id><snippet>computer</snippet></ROW><ROW><id>6092772</id><snippet>human</snippet></ROW><ROW><id>6092772</id><snippet>&gt;&gt;&gt; "foo"[2] == "o"
True
</snippet></ROW><ROW><id>6092772</id><snippet>computer_move</snippet></ROW><ROW><id>6092772</id><snippet>board[i] = EMPTY</snippet></ROW><ROW><id>6092772</id><snippet>board = EMPTY</snippet></ROW><ROW><id>6092780</id><snippet>Point</snippet></ROW><ROW><id>6092780</id><snippet>property</snippet></ROW><ROW><id>6092780</id><snippet>Point = collections.namedtuple('Point', 'x y')
</snippet></ROW><ROW><id>6092780</id><snippet>__get__</snippet></ROW><ROW><id>6092780</id><snippet>__set__</snippet></ROW><ROW><id>6092780</id><snippet>class PointColumnProxy(object):
    def __init__(self, x, y):
        ''' these x and y's are the actual sqlalchemy columns '''
        self.x, self.y = x, y

    def __eq__(self, pos):
        return sqlalchemy.and_(self.x == pos.x,
                               self.y == pos.y)
</snippet></ROW><ROW><id>6092780</id><snippet>class PointProperty(object):
    def __init__(self, x, y):
        ''' x and y are the names of the coordinate attributes '''
        self.x = x
        self.y = y

    def __set__(self, instance, value):
        assert type(value) == Point
        setattr(instance, self.x, value.x)
        setattr(instance, self.y, value.y)


    def __get__(self, instance, owner):
        if instance is not None:
            return Point(x=getattr(instance, self.x),
                         y=getattr(instance, self.y))
        else: # called on the Class
            return PointColumnProxy(getattr(owner, self.x),
                                    getattr(owner, self.y))
</snippet></ROW><ROW><id>6092780</id><snippet>Base = sqlalchemy.ext.declarative.declarative_base()
class MyObject(Base):
    x = Column(Float)
    y = Column(Float)

    pos = PointProperty('x', 'y')
</snippet></ROW><ROW><id>6092897</id><snippet>import matplotlib.dates as mdates
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import datetime as dt
import sys

def main( datafile ):
    np_rec_array = mlab.csv2rec( datafile, delimiter='\t' )
    np_rec_array.sort() # in-place sort
    # a `figure` is a starting point for MPL visualizations
    fig = plt.figure( figsize=(8,6) ) 
    # add a set of `axes` to above `figure`
    ax = fig.add_subplot(111)
    x = np_rec_array.visit_time
    y = np_rec_array.total_visits
    # `plot_date` is like `plot` but allows for easier x-axis formatting
    ax.plot_date(x, y, 'o-', color='g') 
    # show time every 30 minutes
    ax.xaxis.set_major_locator( mdates.MinuteLocator(interval=30) )
    # specify time format
    ax.xaxis.set_major_formatter( mdates.DateFormatter("%H:%M") )
    # set x-axis label rotation (otherwise they can overlap)
    for l in ax.get_xticklabels():
        l.set_rotation(60)
    plt.title( 'Website Visits' )
    plt.show()

if __name__ == '__main__':
    if len( sys.argv ) == 1:
        sys.stderr.write( 'need a filename, exiting...' )
        sys.exit(-1)
    main( sys.argv[1] )
</snippet></ROW><ROW><id>6093037</id><snippet>instanceof</snippet></ROW><ROW><id>6093037</id><snippet>catch</snippet></ROW><ROW><id>6093037</id><snippet>IOException</snippet></ROW><ROW><id>6093037</id><snippet>open</snippet></ROW><ROW><id>6093145</id><snippet>python</snippet></ROW><ROW><id>6093145</id><snippet>import apsw
import StringIO as io
output=io.StringIO()
conn = apsw.Connection('dbTest.dat')
shell=apsw.Shell(stdout=output, db=conn)
# How to execute a dot command
shell.process_command(".mode html")
# continue
</snippet></ROW><ROW><id>6093145</id><snippet>Python 3.2 (r32:88445, Feb 20 2011, 21:29:02) [MSC v.1500 32 bit (Intel)] on win32
Type "copyright", "credits" or "license()" for more information.
&gt;&gt;&gt; import io
&gt;&gt;&gt; import apsw
&gt;&gt;&gt; output = io.StringIO()
&gt;&gt;&gt; conn = apsw.Connection(":memory:")
&gt;&gt;&gt; shell = apsw.Shell(stdout=output, db=conn)
&gt;&gt;&gt; shell.process_command(".mode html")
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6093419</id><snippet>session_settings::stop_tracker_timeout</snippet></ROW><ROW><id>6093526</id><snippet>struct temp_storage : storage_interface
{
   temp_storage(file_storage const&amp; fs) : m_files(fs) {}
   virtual bool initialize(bool allocate_files) { return false; }
   virtual bool has_any_file() { return false; }
   virtual int read(char* buf, int slot, int offset, int size)
   {
      std::map&lt;int, std::vector&lt;char&gt; &gt;::const_iterator i = m_file_data.find(slot);
      if (i == m_file_data.end()) return 0;
      int available = i-&gt;second.size() - offset;
      if (available &lt;= 0) return 0;
      if (available &gt; size) available = size;
      memcpy(buf, &amp;i-&gt;second[offset], available);
      return available;
   }
   virtual int write(const char* buf, int slot, int offset, int size)
   {
      std::vector&lt;char&gt;&amp; data = m_file_data[slot];
      if (data.size() &lt; offset + size) data.resize(offset + size);
      std::memcpy(&amp;data[offset], buf, size);
      return size;
   }
   virtual bool rename_file(int file, std::string const&amp; new_name) { assert(false); return false; }
   virtual bool move_storage(std::string const&amp; save_path) { return false; }
   virtual bool verify_resume_data(lazy_entry const&amp; rd, error_code&amp; error) { return false; }
   virtual bool write_resume_data(entry&amp; rd) const { return false; }
   virtual bool move_slot(int src_slot, int dst_slot) { assert(false); return false; }
   virtual bool swap_slots(int slot1, int slot2) { assert(false); return false; }
   virtual bool swap_slots3(int slot1, int slot2, int slot3) { assert(false); return false; }
   virtual size_type physical_offset(int slot, int offset) { return slot * m_files.piece_length() + offset; };
   virtual sha1_hash hash_for_slot(int slot, partial_hash&amp; ph, int piece_size)
   {
      int left = piece_size - ph.offset;
      TORRENT_ASSERT(left &gt;= 0);
      if (left &gt; 0)
      {
         std::vector&lt;char&gt;&amp; data = m_file_data[slot];
         // if there are padding files, those blocks will be considered
         // completed even though they haven't been written to the storage.
         // in this case, just extend the piece buffer to its full size
         // and fill it with zeroes.
         if (data.size() &lt; piece_size) data.resize(piece_size, 0);
         ph.h.update(&amp;data[ph.offset], left);
      }
      return ph.h.final();
   }
   virtual bool release_files() { return false; }
   virtual bool delete_files() { return false; }

   std::map&lt;int, std::vector&lt;char&gt; &gt; m_file_data;
   file_storage m_files;
};
</snippet></ROW><ROW><id>6093526</id><snippet>add_torrent_params</snippet></ROW><ROW><id>6093526</id><snippet>storage_interface* temp_storage_constructor(
   file_storage const&amp; fs, file_storage const* mapped
   , std::string const&amp; path, file_pool&amp; fp
   , std::vector&lt;boost::uint8_t&gt; const&amp; prio)
{
   return new temp_storage(fs);
}
</snippet></ROW><ROW><id>6093923</id><snippet>class Val(object):
    def __init__(self):
        self.this_val = 123

class ValDesc(object):
    def __init__(self):
        self.cls_lookup = {}

    def __get__(self, obj, objtype=None):
        return self.cls_lookup.setdefault(objtype, Val())

class A(object):
    foo = ValDesc()

class B(A):
    pass
class C(A):
    pass
</snippet></ROW><ROW><id>6093923</id><snippet>b = B()
c = C()
cc = C()
c.foo.this_val = 456
print c.foo.this_val   # 456
print cc.foo.this_val  # 456
print b.foo.this_val   # 123
</snippet></ROW><ROW><id>6093923</id><snippet>__get__</snippet></ROW><ROW><id>6093923</id><snippet>objtype</snippet></ROW><ROW><id>6093923</id><snippet>obj.__class__</snippet></ROW><ROW><id>6093923</id><snippet>print B.foo.this_val   # 123
print C.foo.this_val   # 456
</snippet></ROW><ROW><id>6094113</id><snippet>DEFAULT_FROM_USER</snippet></ROW><ROW><id>6094113</id><snippet>DEFAULT_FROM_EMAIL</snippet></ROW><ROW><id>6094155</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>6094155</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>6094564</id><snippet>shutil.copy</snippet></ROW><ROW><id>6094564</id><snippet>os.system</snippet></ROW><ROW><id>6094564</id><snippet>os.mkdir</snippet></ROW><ROW><id>6094680</id><snippet>exec("python pythonscript.py someparams");</snippet></ROW><ROW><id>6094680</id><snippet>exec("python mypythonscript.py someparams",$output);
var_dump($output);
</snippet></ROW><ROW><id>6094870</id><snippet>round()</snippet></ROW><ROW><id>6094870</id><snippet>&gt;&gt;&gt; 2/3
0
</snippet></ROW><ROW><id>6094870</id><snippet>/</snippet></ROW><ROW><id>6094870</id><snippet>round()</snippet></ROW><ROW><id>6094870</id><snippet>round()</snippet></ROW><ROW><id>6094870</id><snippet>2/3</snippet></ROW><ROW><id>6094870</id><snippet>2.0/3</snippet></ROW><ROW><id>6094870</id><snippet>2//3</snippet></ROW><ROW><id>6094870</id><snippet>2.0</snippet></ROW><ROW><id>6094870</id><snippet>2.0/3</snippet></ROW><ROW><id>6094870</id><snippet>&gt;&gt;&gt; 2.0/3
0.6666666666666666
</snippet></ROW><ROW><id>6095055</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>6095055</id><snippet>print</snippet></ROW><ROW><id>6095055</id><snippet>infobasecorpus = PlaintextCorpusReader(corpus_root, '.*\.txt')
for fileid in infobasecorpus.fileids():
    fileid = fileid.decode('utf8') ## fileid is now a unicode object
    print fileid.encode('utf8')
</snippet></ROW><ROW><id>6095055</id><snippet>utf8</snippet></ROW><ROW><id>6095099</id><snippet>exec</snippet></ROW><ROW><id>6095099</id><snippet>$PATH</snippet></ROW><ROW><id>6095099</id><snippet>Popen</snippet></ROW><ROW><id>6095107</id><snippet>@patch('myapp.views.render_to_response')
</snippet></ROW><ROW><id>6095333</id><snippet>issubclass</snippet></ROW><ROW><id>6095333</id><snippet>def get_subclass(module, base_class):
    for name in dir(module):
        obj = getattr(module, name)
        try:
            if issubclass(obj, base_class):
                return obj
        except TypeError:  # If 'obj' is not a class
            pass
    return None
</snippet></ROW><ROW><id>6095406</id><snippet>Issue.objects.filter(warehouse__park=park)</snippet></ROW><ROW><id>6095782</id><snippet>try:
   ...
except FirstException:
   handle_first_one()

except SecondException:
   handle_second_one()

except (ThirdException, FourthException, FifthException):
   handle_either_of_3rd_4th_or_5th()

except:
   handle_all_other_exceptions()
</snippet></ROW><ROW><id>6096077</id><snippet>class Foo(object):
    def __init__(self):
        pass

import new

def some_func(self):
    print "foobar"

Foo.my_method = new.instancemethod(some_func, None, Foo)
</snippet></ROW><ROW><id>6096077</id><snippet>class Foo(object):
    def __init__(self):
        pass
    def my_method(self):
        print "foobar"
</snippet></ROW><ROW><id>6096200</id><snippet>c=a[:,1]
</snippet></ROW><ROW><id>6096200</id><snippet>c</snippet></ROW><ROW><id>6096200</id><snippet>array([4, 8])
</snippet></ROW><ROW><id>6096200</id><snippet>c = a[:,1:2]
</snippet></ROW><ROW><id>6096200</id><snippet>array([[4],
       [8]])
</snippet></ROW><ROW><id>6096694</id><snippet>sorted()</snippet></ROW><ROW><id>6096694</id><snippet>list = ['a', 'b', 'c']
list[0] # This is a subscript
</snippet></ROW><ROW><id>6096694</id><snippet>list = MyModel.objects.all()
list[0] # This subscript will fail: a queryset doesn't support the operation
</snippet></ROW><ROW><id>6096694</id><snippet>qs = myevent.people.order_by('-score')
mylist = list(qs.all())
....do up date....
cache.set(cache_key, mylist)
</snippet></ROW><ROW><id>6097318</id><snippet>python -W all</snippet></ROW><ROW><id>6097318</id><snippet>env</snippet></ROW><ROW><id>6097318</id><snippet>env</snippet></ROW><ROW><id>6097351</id><snippet>[/css]
tools.staticdir.on = True
tools.staticdir.dir = "static"
</snippet></ROW><ROW><id>6097351</id><snippet>site.config</snippet></ROW><ROW><id>6097929</id><snippet>.args</snippet></ROW><ROW><id>6097929</id><snippet>inspect</snippet></ROW><ROW><id>6097929</id><snippet>.func</snippet></ROW><ROW><id>6097929</id><snippet>dir</snippet></ROW><ROW><id>6097929</id><snippet>&gt;&gt;&gt; dir(x)
['__call__', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'args', 'func', 'keywords']
</snippet></ROW><ROW><id>6098306</id><snippet>spam_list = [spam_list[i] for i in spam_order]
</snippet></ROW><ROW><id>6098443</id><snippet>logging.StreamHandler</snippet></ROW><ROW><id>6098443</id><snippet>logging.StreamHandler(sys.stdout)</snippet></ROW><ROW><id>6098443</id><snippet>proc_err</snippet></ROW><ROW><id>6098443</id><snippet>proc_out</snippet></ROW><ROW><id>6098443</id><snippet>proc = subprocess.Popen(['python BooFoo.py'], bufsize=512, stdin = None, 
     stdout = subprocess.PIPE, stderr = subprocess.STDOUT, shell=True)
proc_out, proc_err = proc.communicate()
print proc_out
</snippet></ROW><ROW><id>6098507</id><snippet>C:\root\workspace\mysite\src\mysite\common
</snippet></ROW><ROW><id>6098507</id><snippet>STATIC_ROOT = 'C:/root/workspace/mysite/src/mysite/static/'
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    "C:/root/workspace/mysite/src/mysite/common/static",
)
</snippet></ROW><ROW><id>6098736</id><snippet>d = {}
exec "def f(x): return x" in d
</snippet></ROW><ROW><id>6098736</id><snippet>d = {'a':7}
exec "def f(x): return x + a" in d
</snippet></ROW><ROW><id>6098917</id><snippet>reverse</snippet></ROW><ROW><id>6098917</id><snippet>models.permalink</snippet></ROW><ROW><id>6098917</id><snippet>get_absolute_url</snippet></ROW><ROW><id>6098917</id><snippet>{% url %}</snippet></ROW><ROW><id>6098917</id><snippet>&lt;link rel="canonical" href="http://domain.com/archive/2011/5/3/" /&gt;
</snippet></ROW><ROW><id>6099284</id><snippet>def computer_move (computer, board, human):
    best = (4,0,8,2,6,1,3,5,7)
    board = board [:]
    for i in legal_moves(board):
        board[i] = computer
        if winner(board) == computer:
            return i
        board = EMPTY
</snippet></ROW><ROW><id>6099284</id><snippet>EMPTY</snippet></ROW><ROW><id>6099284</id><snippet>board</snippet></ROW><ROW><id>6099284</id><snippet>EMPTY</snippet></ROW><ROW><id>6099284</id><snippet>board[i] = EMPTY</snippet></ROW><ROW><id>6099373</id><snippet>Jamroot</snippet></ROW><ROW><id>6099373</id><snippet>project
  : requirements &lt;library&gt;libboost_python ;
</snippet></ROW><ROW><id>6099373</id><snippet>project
  : requirements &lt;library&gt;/usr/lib/libboost_python.so ;
</snippet></ROW><ROW><id>6099401</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    "django.contrib.auth.context_processors.auth",
    "django.core.context_processors.debug",
    "django.core.context_processors.i18n",
    "django.core.context_processors.media",
    "django.core.context_processors.static",
    "django.contrib.messages.context_processors.messages",
    "Store.views.items_in_cart",
)
</snippet></ROW><ROW><id>6100328</id><snippet>==</snippet></ROW><ROW><id>6100328</id><snippet>not</snippet></ROW><ROW><id>6100328</id><snippet>True == (not False)
</snippet></ROW><ROW><id>6100328</id><snippet>not</snippet></ROW><ROW><id>6100328</id><snippet>not</snippet></ROW><ROW><id>6100563</id><snippet>while True:
    foo()
    time.sleep(1800)
    foo_kill()
    bar()
    time.sleep(1800)
    bar_kill()
</snippet></ROW><ROW><id>6100563</id><snippet>functions = [(foo, foo_kill), (bar, bar_kill), ] # Just append more as needed
while True:
    for f, kf in functions:
        f()
        time.sleep(1800)
        kf()
</snippet></ROW><ROW><id>6100676</id><snippet>Control-C</snippet></ROW><ROW><id>6100676</id><snippet>SIGINT</snippet></ROW><ROW><id>6100918</id><snippet>def index (req): return "&lt;html&gt;&lt;body&gt;Hello World!&lt;/body&gt;&lt;/html&gt;"
</snippet></ROW><ROW><id>6100918</id><snippet>&lt;form id="form2" name="form2" method="post" action="test.py"&gt;
</snippet></ROW><ROW><id>6100918</id><snippet>    AddHandler mod_python .py
    PythonHandler mod_python.publisher
    PythonDebug On
</snippet></ROW><ROW><id>6101048</id><snippet>class MainWindow(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        self.vbox = QVBoxLayout()
        self.buttons = []

        for i in range(3):
            button = QPushButton(str(i), self)
            self.vbox.addWidget(button)
            self.buttons += [button]

        self.setLayout(self.vbox)
</snippet></ROW><ROW><id>6101453</id><snippet>int</snippet></ROW><ROW><id>6101453</id><snippet>$ python
Python 3.2 (r32:88445, Apr 15 2011, 11:09:05) 
[GCC 4.5.2 20110127 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; x = 300
&gt;&gt;&gt; id(x)
140570345270544
&gt;&gt;&gt; id(100+200)
140570372179568
&gt;&gt;&gt; id(x*2)
140570345270512
&gt;&gt;&gt; id(600)
140570345270576
</snippet></ROW><ROW><id>6101647</id><snippet>gobject.threads_init()</snippet></ROW><ROW><id>6101946</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>6101946</id><snippet>numpy.float64</snippet></ROW><ROW><id>6101946</id><snippet>return 0.5*(1 + sum( (a**(2*n)*cos(2*sqrt(1 + n)*t))/(e**a**2*factorial(n))
</snippet></ROW><ROW><id>6101959</id><snippet>values = valBD.ReadAsArray()
JArray(float, values.ndim)(values.tolist())
</snippet></ROW><ROW><id>6102100</id><snippet>type</snippet></ROW><ROW><id>6102100</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; retype = type(re.compile('hello, world'))
&gt;&gt;&gt; isinstance(re.compile('goodbye'), retype)
True
&gt;&gt;&gt; isinstance(12, retype)
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6102100</id><snippet>type</snippet></ROW><ROW><id>6102208</id><snippet>initial_data.json</snippet></ROW><ROW><id>6102208</id><snippet>./manage.py migrate --no-initial-data
</snippet></ROW><ROW><id>6102616</id><snippet>   Pixel1 = (120, 203, 391)
   Pixel2 = (121, ..., ...)
   ...
   Pixel8 = (128, ..., ...)
</snippet></ROW><ROW><id>6102616</id><snippet>   Pixel1 = (01111000, ..., ...)
   Pixel2 = (01111001, ..., ...)
   ...
   Pixel8 = (10000000, ..., ...)
</snippet></ROW><ROW><id>6102616</id><snippet>   63 = 00011111
   # Encrypting from right to left, by writing the data to the minor bit
   Pixel1 = (0111100[0], ..., ...) -&gt; 120
   Pixel2 = (0111100[0], ..., ...) -&gt; 120
   Pixel3 = (0111101[0], ..., ...) -&gt; 122
   Pixel4 = (0111101[1], ..., ...) -&gt; 123
   Pixel5 = (0111110[1], ..., ...) -&gt; 125
   ...
   Pixel8 = (1000000[1], ..., ...) -&gt; 129
</snippet></ROW><ROW><id>6102759</id><snippet>event.x</snippet></ROW><ROW><id>6102759</id><snippet>event.y</snippet></ROW><ROW><id>6102759</id><snippet>grid_info</snippet></ROW><ROW><id>6102759</id><snippet>def mouse(event):
    grid_info = event.widget.grid_info()
    print "row:", grid_info["row"], "column:", grid_info["column"]
</snippet></ROW><ROW><id>6102805</id><snippet>b''.join(pieces)</snippet></ROW><ROW><id>6102931</id><snippet>originalCase = Case.objects.get(queue_num = swap)
</snippet></ROW><ROW><id>6102931</id><snippet>originalCase = Case.objects.get(queue_num = 99)
</snippet></ROW><ROW><id>6102931</id><snippet>cases = Case.objects.all()
for case in cases:
    if case.queue_num == original:
        case.queue_num = swap
    elif case.queue_num == swap:
        case.queue_num = original

    case.save()
</snippet></ROW><ROW><id>6102931</id><snippet>Case.objects.filter(queue_num=original).update(queue_num=99)
Case.objects.filter(queue_num=swap).update(queue_num=original)
Case.objects.filter(queue_num=99).update(queue_num=swap)
</snippet></ROW><ROW><id>6103041</id><snippet>try:
    x.prop = 42
except AttributeError:
    pass
</snippet></ROW><ROW><id>6103090</id><snippet>import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'library')))

import utils
</snippet></ROW><ROW><id>6103090</id><snippet>$ python the_file.py
$ python ../the_file.py
$ python /somewhere/over/the_file.py
</snippet></ROW><ROW><id>6103924</id><snippet>PyInt_Check(obj)</snippet></ROW><ROW><id>6103924</id><snippet>PyList_Check(obj)</snippet></ROW><ROW><id>6103924</id><snippet>PyLong_FromLong</snippet></ROW><ROW><id>6103924</id><snippet>PyInt_AsLong</snippet></ROW><ROW><id>6103983</id><snippet>with self.assertRaises(TypeError):
    self.testListNone[:1]
</snippet></ROW><ROW><id>6104224</id><snippet>gdb.execute()</snippet></ROW><ROW><id>6104224</id><snippet>"$eax"</snippet></ROW><ROW><id>6104224</id><snippet>gdb.parse_and_eval()</snippet></ROW><ROW><id>6104224</id><snippet>(gdb) p $rbx
$23 = 140737488348072
(gdb) python print type(gdb.parse_and_eval("$rbx")), gdb.parse_and_eval("$rbx")
&lt;type 'gdb.Value'&gt; 140737488348072
</snippet></ROW><ROW><id>6104224</id><snippet>gdb</snippet></ROW><ROW><id>6104255</id><snippet>try:
    something()
except AttributeError:
    pass
</snippet></ROW><ROW><id>6104255</id><snippet>try:
    something()
except Exception:
    pass
</snippet></ROW><ROW><id>6104255</id><snippet>myDict = {}

for item in ["Name", "Email", "Phone"]:
    try:
        myDict[item] = soup.find('td', text=re.compile(r'^%s$' % item)).parent.nextSibling.string
    except Attribute
        myDict[item] = "Not found"

for item in ["Name", "Email", "Phone"]:
    print "%s: %s" % (item, myDict[item])
</snippet></ROW><ROW><id>6104313</id><snippet>p.stdin.write('a\n')
p.stdin.write('b\n')
</snippet></ROW><ROW><id>6104406</id><snippet>display</snippet></ROW><ROW><id>6104406</id><snippet>set_mode</snippet></ROW><ROW><id>6104406</id><snippet>pygame.Surface</snippet></ROW><ROW><id>6104550</id><snippet>from sqlalchemy import Integer, Boolean, String, Column, create_engine, \
    ForeignKey
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm.collections import attribute_mapped_collection

Base = declarative_base()

class SomeClass(Base):
    __tablename__ = 'sometable'

    id = Column(Integer, primary_key=True)
    tuple_elements = relationship(
                "TupleAssociation", 
                collection_class=attribute_mapped_collection("name"),
                cascade="all, delete-orphan"
            )
    items = association_proxy("tuple_elements", "as_tuple")

class TupleAssociation(Base):
    __tablename__ = 'tuple_association'
    parent_id = Column(Integer, ForeignKey('sometable.id'), primary_key=True)
    tuple_id = Column(Integer, ForeignKey("tuple_data.id"), primary_key=True)
    name = Column(String)

    tuple_element = relationship("TupleElement")

    def __init__(self, key, tup):
        self.name = key
        self.tuple_element = TupleElement(tup)

    @property
    def as_tuple(self):
        return self.tuple_element.as_tuple

class TupleElement(Base):
    __tablename__ = 'tuple_data'

    id = Column(Integer, primary_key=True)
    col1 = Column(Integer)
    col2 = Column(Boolean)

    def __init__(self, tup):
        self.col1, self.col2 = tup

    @property
    def as_tuple(self):
        return self.col1, self.col2


e = create_engine('sqlite://')
Base.metadata.create_all(e)
s = Session(e)

collection = SomeClass()
collection.items["item name 1"] = (3, True)
collection.items["item name 2"] = (1, False)
print collection.items

s.add(collection)
s.commit()

collection = s.query(SomeClass).first()
print collection.items
</snippet></ROW><ROW><id>6104550</id><snippet>from sqlalchemy import Integer, Boolean, String, Column, create_engine, \
    ForeignKey
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm.collections import attribute_mapped_collection

Base = declarative_base()

class SomeClass(Base):
    __tablename__ = 'sometable'

    id = Column(Integer, primary_key=True)
    tuple_elements = relationship(
                "TupleAssociation", 
                collection_class=attribute_mapped_collection("name"),
                cascade="all, delete-orphan"
            )
    items = association_proxy("tuple_elements", "as_tuple")

class TupleAssociation(Base):
    __tablename__ = 'tuple_association'
    parent_id = Column(Integer, ForeignKey('sometable.id'), primary_key=True)
    name_id = Column(Integer, ForeignKey("name_data.id"), primary_key=True)

    col1 = Column(Integer)
    col2 = Column(Boolean)

    name_element = relationship("NameElement")

    def __init__(self, key, tup):
        self.name_element = NameElement(name=key)
        self.col1, self.col2 = tup

    @property
    def name(self):
        return self.name_element.name

    @property
    def as_tuple(self):
        return self.col1, self.col2

class NameElement(Base):
    __tablename__ = 'name_data'

    id = Column(Integer, primary_key=True)
    name = Column(String)


e = create_engine('sqlite://', echo=True)
Base.metadata.create_all(e)
s = Session(e)

collection = SomeClass()
collection.items["item name 1"] = (3, True)
collection.items["item name 2"] = (1, False)
print collection.items

s.add(collection)
s.commit()

collection = s.query(SomeClass).first()
print collection.items
</snippet></ROW><ROW><id>6104550</id><snippet>tuple_()</snippet></ROW><ROW><id>6104550</id><snippet>as_tuple</snippet></ROW><ROW><id>6104550</id><snippet>from sqlalchemy import Integer, Boolean, String, Column, create_engine, \
    ForeignKey
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm.collections import attribute_mapped_collection
from sqlalchemy.ext import hybrid
from sqlalchemy.sql import tuple_

Base = declarative_base()

class SomeClass(Base):
    __tablename__ = 'sometable'

    id = Column(Integer, primary_key=True)
    tuple_elements = relationship(
                "TupleElement", 
                collection_class=attribute_mapped_collection("name"),
                cascade="all, delete-orphan"
            )
    items = association_proxy("tuple_elements", "as_tuple")

class TupleElement(Base):
    __tablename__ = 'tuple_data'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('sometable.id'), nullable=False)
    name = Column(String)
    col1 = Column(Integer)
    col2 = Column(Boolean)

    def __init__(self, key, tup):
        self.name = key
        self.col1, self.col2 = tup

    @hybrid.hybrid_property
    def as_tuple(self):
        return self.col1, self.col2

    @as_tuple.expression
    def as_tuple(self):
        return tuple_(self.col1, self.col2)

e = create_engine('postgresql://scott:tiger@localhost/test', echo=True)
Base.metadata.drop_all(e)
Base.metadata.create_all(e)
s = Session(e)

collection = SomeClass()
collection.items["item name 1"] = (3, True)
collection.items["item name 2"] = (1, False)
print collection.items

s.add(collection)
s.commit()

q = s.query(SomeClass).join(SomeClass.tuple_elements)
assert q.filter(TupleElement.as_tuple == (3, True)).first() is collection
assert q.filter(TupleElement.as_tuple == (5, False)).first() is None
print s.query(TupleElement.as_tuple).all()
</snippet></ROW><ROW><id>6104747</id><snippet>set_value</snippet></ROW><ROW><id>6104747</id><snippet>import pygtk, gtk
win = gtk.Window(gtk.WINDOW_TOPLEVEL)
win.connect('destroy', lambda w: gtk.main_quit())

def _add_spinner():
    adj = gtk.Adjustment(0.0, -100.0, 100.0, 1.0, 2.0, 0.0)
    spin = gtk.SpinButton(adj, 0, 1)
    spin.set_wrap(True)
    hbox.pack_start(spin, True, True, 10)
    return spin

vbox = gtk.VBox(True, 10)
hbox = gtk.HBox(True, 10)
vbox.pack_start(hbox, True, True, 10)
spin1 = _add_spinner()
spin2 = _add_spinner()
win.add(vbox)

def set_spin(src, dst):
    # ensure that calling `set_value` does not fire events
    hid = handlers.get(dst)
    dst.handler_block(hid)
    dst.set_value(src.get_value() + 1.5)
    dst.handler_unblock(hid)

# when 'spinN' is changed, call 'set_spin'
hid1 = spin1.connect('value-changed', set_spin, spin2)
hid2 = spin2.connect('value-changed', set_spin, spin1)
handlers = {spin1: hid1, spin2: hid2}
win.show_all()
gtk.main()
</snippet></ROW><ROW><id>6104947</id><snippet>def semi_heap_sort(items, top_k=L):
    lst = []
    heap_store = items[:top_k]
</snippet></ROW><ROW><id>6104947</id><snippet>    for item in items[top_k:]:
</snippet></ROW><ROW><id>6104947</id><snippet>        lst.append(heapq.heappushpop(heap_store, item))
    return heap_store + lst
</snippet></ROW><ROW><id>6104947</id><snippet>def mod_heap_sorta(items, top_k=L):
    heap_store = items[:top_k]
    heapq.heapify(heap_store)
    remaining = itertools.islice(items, top_k, None)
    leftovers = [heapq.heappushpop(heap_store, item) for item in remaining]
    return heap_store + leftovers
</snippet></ROW><ROW><id>6104952</id><snippet>print(html.toUtf8())
</snippet></ROW><ROW><id>6105439</id><snippet>import textwrap
from nltk.corpus import wordnet as wn

POS = {
    'v': 'verb', 'a': 'adjective', 's': 'satellite adjective', 
    'n': 'noun', 'r': 'adverb'}

def info(word, pos=None):
    for i, syn in enumerate(wn.synsets(word, pos)):
        syns = [n.replace('_', ' ') for n in syn.lemma_names]
        ants = [a for m in syn.lemmas for a in m.antonyms()]
        ind = ' '*12
        defn= textwrap.wrap(syn.definition, 64)
        print 'sense %d (%s)' % (i + 1, POS[syn.pos])
        print 'definition: ' + ('\n' + ind).join(defn)
        print '  synonyms:', ', '.join(syns)
        if ants:
            print '  antonyms:', ', '.join(a.name for a in ants)
        if syn.examples:
            print '  examples: ' + ('\n' + ind).join(syn.examples)
        print

info('near')
</snippet></ROW><ROW><id>6105439</id><snippet>sense 1 (verb)
definition: move towards
  synonyms: approach, near, come on, go up, draw near, draw close, come near
  examples: We were approaching our destination
            They are drawing near
            The enemy army came nearer and nearer

sense 2 (adjective)
definition: not far distant in time or space or degree or circumstances
  synonyms: near, close, nigh
  antonyms: far
  examples: near neighbors
            in the near future
            they are near equals
...
</snippet></ROW><ROW><id>6105546</id><snippet>scalar_field</snippet></ROW><ROW><id>6105546</id><snippet>from enthought.mayavi import mlab
import numpy as np

s=64
x,y,z = np.ogrid[0:s,0:s,0:s/2]

volume = np.sqrt((x-s/2)**2 + (y-s/2)**2 + (2*z-s/2)**2)

grid = mlab.pipeline.scalar_field(data)
grid.spacing = [1.0, 1.0, 2.0]

contours = mlab.pipeline.contour_surface(grid, 
                         contours=[5,15,25], transparent=True)
mlab.show()
</snippet></ROW><ROW><id>6105826</id><snippet>first_list = [['Test.doc', '1a1a1a', 1111], 
              ['Test2.doc', '2b2b2b', 2222], 
              ['Test3.doc', '3c3c3c', 3333]]
secnd_list = [['Test.doc', '1a1a1a', 1111], 
              ['Test2.doc', '2b2b2b', 2222], 
              ['Test3.doc', '8p8p8p', 9999], 
              ['Test4.doc', '4d4d4d', 4444]]
</snippet></ROW><ROW><id>6105826</id><snippet>first_tuple_list = [tuple(lst) for lst in first_list]
secnd_tuple_list = [tuple(lst) for lst in secnd_list]
</snippet></ROW><ROW><id>6105826</id><snippet>first_set = set(first_tuple_list)
secnd_set = set(secnd_tuple_list)
</snippet></ROW><ROW><id>6105826</id><snippet>first_set = set(map(tuple, first_list))
secnd_set = set(map(tuple, secnd_list))
</snippet></ROW><ROW><id>6105826</id><snippet>map</snippet></ROW><ROW><id>6105826</id><snippet>tuple</snippet></ROW><ROW><id>6105826</id><snippet>&gt;&gt;&gt; first_set.symmetric_difference(secnd_set) 
set([('Test3.doc', '3c3c3c', 3333),
     ('Test3.doc', '8p8p8p', 9999),
     ('Test4.doc', '4d4d4d', 4444)])
</snippet></ROW><ROW><id>6105826</id><snippet>first_set ^ secnd_set</snippet></ROW><ROW><id>6105826</id><snippet>symmetric_difference</snippet></ROW><ROW><id>6105826</id><snippet>&gt;&gt;&gt; [x for x in first_list if x not in secnd_list] + [x for x in secnd_list if x not in first_list]
[['Test3.doc', '3c3c3c', 3333],
 ['Test3.doc', '8p8p8p', 9999],
 ['Test4.doc', '4d4d4d', 4444]]
</snippet></ROW><ROW><id>6105826</id><snippet>filter</snippet></ROW><ROW><id>6105826</id><snippet>lambda</snippet></ROW><ROW><id>6105826</id><snippet>&gt;&gt;&gt; filter(lambda x: x not in secnd_list, first_list) + filter(lambda x: x not in first_list, secnd_list)

[['Test3.doc', '3c3c3c', 3333],
 ['Test3.doc', '8p8p8p', 9999],
 ['Test4.doc', '4d4d4d', 4444]]
</snippet></ROW><ROW><id>6106092</id><snippet>let rec selection_sort = function
    | [] -&gt; []
    | l -&gt; let min = List.min l in                         (* find the minimum *)
           let rest = List.filter (fun i -&gt; i &lt;&gt; min) l in (* find the rest *)
           let sorted_rest = selection_sort rest in        (* sort the rest *)
           min :: sorted_rest                              (* put everything together *)
</snippet></ROW><ROW><id>6106344</id><snippet>import csv

def read_input(filename):
    f = open(filename)
    return csv.DictReader(f, delimiter = ',')

def search_filter(src, term):
    term = term.lower()
    for s in src:
        if term in map(str.lower, s.values()):
            yield s

def query(src, terms):
    terms = terms.split()
    for t in terms:
        src = search_filter(src, t)
    return src

def print_query(q):    
    for row in q:
        print row
</snippet></ROW><ROW><id>6106344</id><snippet>read_input</snippet></ROW><ROW><id>6106344</id><snippet>dicts</snippet></ROW><ROW><id>6106344</id><snippet>search_filter</snippet></ROW><ROW><id>6106344</id><snippet>query</snippet></ROW><ROW><id>6106344</id><snippet>search_filter</snippet></ROW><ROW><id>6106344</id><snippet>def search_filter(src, term):
    term = term.lower()
    for s in src:
        if any(term in v.lower() for v in s.values()):
            yield s</snippet></ROW><ROW><id>6106504</id><snippet>import sys
for line in sys.stdin:
    print line
</snippet></ROW><ROW><id>6106769</id><snippet>{% for d in dicts %}
  {% set template = d.type + '.html' %} {% include template %}
{% endfor %}
</snippet></ROW><ROW><id>6106769</id><snippet>{{ d.content }}
</snippet></ROW><ROW><id>6107220</id><snippet>    stat = os.stat(myfile)
    // your code - rename access and modify your file
    os.utime(my_new_file, (stat.st_atime, stat.st_mtime))
</snippet></ROW><ROW><id>6107377</id><snippet>defaults</snippet></ROW><ROW><id>6107377</id><snippet># class ConfigParser.SafeConfigParser([defaults[, dict_type]]) 
#
config = ConfigParser.SafeConfigParser({'nothingThere': 'lalalalala'})
...
...
# If the job section has no "nothingThere", "lalalalala" will be returned
# 
config.get(jobSection, 'nothingThere')
</snippet></ROW><ROW><id>6107475</id><snippet>admin.py</snippet></ROW><ROW><id>6107475</id><snippet>from django.contrib import admin
from myapp.models import Program, Course, Grade

admin.site.register(Program)
admin.site.register(Course)
admin.site.register(Grade)
</snippet></ROW><ROW><id>6107475</id><snippet>class GradeInline(admin.TabularInline):
    model = Grade
    extra = 1
</snippet></ROW><ROW><id>6107475</id><snippet>admin.TabularInline</snippet></ROW><ROW><id>6107475</id><snippet>admin.StackedInline</snippet></ROW><ROW><id>6107475</id><snippet>TabularInline</snippet></ROW><ROW><id>6107475</id><snippet>extra</snippet></ROW><ROW><id>6107475</id><snippet>class CourseAdmin(admin.ModelAdmin):
    model = Course
    inlines = (GradeInline,)
</snippet></ROW><ROW><id>6107475</id><snippet>admin.py</snippet></ROW><ROW><id>6107475</id><snippet>from django.contrib import admin
from myapp.models import Program, Course, Grade

class GradeInline(admin.TabularInline):
    model = Grade
    extra = 1

class CourseAdmin(admin.ModelAdmin):
    model = Course
    inlines = (GradeInline,)

admin.site.register(Program)
admin.site.register(Course, CourseAdmin)
</snippet></ROW><ROW><id>6107523</id><snippet>audiere</snippet></ROW><ROW><id>6107523</id><snippet>import audiere
ds = audiere.open_device()
os = ds.open_array(input, fs)
os.play()
</snippet></ROW><ROW><id>6107523</id><snippet>input</snippet></ROW><ROW><id>6107523</id><snippet>fs</snippet></ROW><ROW><id>6107523</id><snippet>os.play()</snippet></ROW><ROW><id>6107523</id><snippet>def wave_unpack(fname):
  """
  input: wave filename as string 
  output: left, right, params

  unpacks a wave file and return left and right channels as arrays
  (in case of a mono file, left and right channels will be copies)

  params returns a tuple containing:
  -number of audio channels (1 for mono, 2 for stereo)
  -sample width in bytes
  -sampling frequency in Hz
  -number of audio frames
  -compression type
  -compression name
  """
  import sndhdr, os, wave, struct
  from scipy import array
      assert os.path.isfile(fname), "file location must be valid"
  assert sndhdr.what(fname)[0] == 'wav', "file must have valid header"
  try:
    wav = wave.open(fname)
    params = (nchannels,sampwidth,rate,nframes,comp,compname) = wav.getparams()
    frames = wav.readframes(nframes*nchannels)
  finally:
    wav.close()
  out = struct.unpack_from ("%dh" % nframes*nchannels, frames)
  if nchannels == 2:
    left = array(out[0::2])
    right = array(out[1::2])
  elif nchannels == 1:
    right = left = array(out)
  else:
    assert 0, "number of channels must be 1 or 2"
  return left, right, params
</snippet></ROW><ROW><id>6107523</id><snippet>input</snippet></ROW><ROW><id>6107523</id><snippet>fs</snippet></ROW><ROW><id>6107523</id><snippet>from scipy import c_
left, right, params = wave_unpack(fn)
fs = params[2]
left_float  =  left.astype('f')/2**15
right_float = right.astype('f')/2**15
stereo = c_[left_float, right_float]
input = mono = stereo.mean(1)
</snippet></ROW><ROW><id>6107523</id><snippet>audiere</snippet></ROW><ROW><id>6107651</id><snippet>nltk</snippet></ROW><ROW><id>6107651</id><snippet>re</snippet></ROW><ROW><id>6107651</id><snippet>from nltk.stem import PorterStemmer
import re
</snippet></ROW><ROW><id>6107651</id><snippet>nltk.stem</snippet></ROW><ROW><id>6107651</id><snippet>master_list = [
    'There are many types of intrusion detection devices in production today.',
    'The CTO approved a rewrite of the system',
    'The CTO is about to approve a complete rewrite of the system',
    'The CTO approved a rewriting',
    'Breaching of Firewalls'
]

terms = [
    'Intrusion Detection',
    'Approved rewrite',
    'Firewall'
]

stemmer = PorterStemmer()

# for each term, split it into words (could be just one word) and stem each word
stemmed_terms = ((stemmer.stem(word) for word in s.split()) for s in terms)

# add 'match anything after it' expression to each of the stemmed words
# join result into a pattern string
regex_patterns = [''.join(stem + '.*' for stem in term) for term in stemmed_terms]
print(regex_patterns)
print('')

for sentence in master_list:
    match_obs = (re.search(pattern, sentence, flags=re.IGNORECASE) for pattern in regex_patterns)
    matches = [m.group(0) for m in match_obs if m]
    print(matches)
</snippet></ROW><ROW><id>6107651</id><snippet>['Intrus.*Detect.*', 'Approv.*rewrit.*', 'Firewal.*']

['intrusion detection devices in production today.']
['approved a rewrite of the system']
['approve a complete rewrite of the system']
['approved a rewriting']
['Firewalls']
</snippet></ROW><ROW><id>6107651</id><snippet>terms</snippet></ROW><ROW><id>6107651</id><snippet>for sentence in master_list:
    # regex_patterns maps directly onto terms (strictly speaking it's one-to-one and onto)
    for term, pattern in zip(terms, regex_patterns):
        if re.search(pattern, sentence, flags=re.IGNORECASE):
            # process term (put it in the db)
            print('TERM: {0} FOUND IN: {1}'.format(term, sentence))
</snippet></ROW><ROW><id>6107651</id><snippet>TERM: Intrusion Detection FOUND IN: There are many types of intrusion detection devices in production today.
TERM: Approved rewrite FOUND IN: The CTO approved a rewrite of the system
TERM: Approved rewrite FOUND IN: The CTO is about to approve a complete rewrite of the system
TERM: Approved rewrite FOUND IN: The CTO approved a rewriting
TERM: Firewall FOUND IN: Breaching of Firewalls
</snippet></ROW><ROW><id>6107897</id><snippet>random.shuffle</snippet></ROW><ROW><id>6107897</id><snippet>import random
keys = my_dict.keys()
random.shuffle(keys)
for key in keys:
    print key, my_dict[key]
</snippet></ROW><ROW><id>6107982</id><snippet>sys.maxsize</snippet></ROW><ROW><id>6107982</id><snippet>import sys
is_64bits = sys.maxsize &gt; 2**32
</snippet></ROW><ROW><id>6107982</id><snippet>file</snippet></ROW><ROW><id>6107982</id><snippet>file -L $(python -c 'import sys; print(sys.executable)')
</snippet></ROW><ROW><id>6107982</id><snippet>/usr/bin/python: Mach-O universal binary with 3 architectures
/usr/bin/python (for architecture x86_64):  Mach-O 64-bit executable x86_64
/usr/bin/python (for architecture i386):    Mach-O executable i386
/usr/bin/python (for architecture ppc7400): Mach-O executable ppc
</snippet></ROW><ROW><id>6107982</id><snippet>/usr/bin/python: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, stripped
</snippet></ROW><ROW><id>6107982</id><snippet>platform</snippet></ROW><ROW><id>6107982</id><snippet>$ arch -x86_64 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit True
$ arch -i386 /usr/bin/python2.6 -c 'import sys,platform; print platform.architecture()[0], sys.maxsize &gt; 2**32'
64bit False
</snippet></ROW><ROW><id>6108042</id><snippet>'south'</snippet></ROW><ROW><id>6108042</id><snippet>south_migrations</snippet></ROW><ROW><id>6108467</id><snippet>try ... except TypError</snippet></ROW><ROW><id>6108467</id><snippet>_ArityNormalizer</snippet></ROW><ROW><id>6108467</id><snippet>def check(self, value, domain_object):          
    pass
</snippet></ROW><ROW><id>6108467</id><snippet>constraint.check(value, domain_object)
</snippet></ROW><ROW><id>6108504</id><snippet>import os, sys
if os.isatty(sys.stdout.fileno()):
    ...
</snippet></ROW><ROW><id>6108815</id><snippet>*</snippet></ROW><ROW><id>6108815</id><snippet>?</snippet></ROW><ROW><id>6108815</id><snippet>grep -E 'ba(na)* split' *.txt
</snippet></ROW><ROW><id>6108815</id><snippet>ba split</snippet></ROW><ROW><id>6108815</id><snippet>bana split</snippet></ROW><ROW><id>6108815</id><snippet>.txt</snippet></ROW><ROW><id>6108815</id><snippet>$</snippet></ROW><ROW><id>6108815</id><snippet>`</snippet></ROW><ROW><id>6108815</id><snippet>\</snippet></ROW><ROW><id>6108815</id><snippet>grep</snippet></ROW><ROW><id>6108815</id><snippet>grep -E "ba(na)* split" *.txt
grep -E ba\(na\)\*\ split *.txt
</snippet></ROW><ROW><id>6108815</id><snippet>grep b[an]*a *.txt
</snippet></ROW><ROW><id>6108815</id><snippet>b</snippet></ROW><ROW><id>6108815</id><snippet>b[an]*a</snippet></ROW><ROW><id>6108815</id><snippet>*.txt</snippet></ROW><ROW><id>6108815</id><snippet>baclava</snippet></ROW><ROW><id>6108815</id><snippet>bnm</snippet></ROW><ROW><id>6108815</id><snippet>hello.txt</snippet></ROW><ROW><id>6108815</id><snippet>grep baclava bnm hello.txt</snippet></ROW><ROW><id>6108815</id><snippet>baclava</snippet></ROW><ROW><id>6108815</id><snippet>bnm</snippet></ROW><ROW><id>6108815</id><snippet>hello.txt</snippet></ROW><ROW><id>6108815</id><snippet>ack .*</snippet></ROW><ROW><id>6108815</id><snippet>ack . ..</snippet></ROW><ROW><id>6108815</id><snippet>ack</snippet></ROW><ROW><id>6108815</id><snippet>.</snippet></ROW><ROW><id>6108815</id><snippet>..</snippet></ROW><ROW><id>6108815</id><snippet>ack '.*'</snippet></ROW><ROW><id>6108815</id><snippet>.*</snippet></ROW><ROW><id>6108815</id><snippet>ack</snippet></ROW><ROW><id>6109260</id><snippet>def get_repeated_values(sessions):
    known = set()
    already_repeated = set()
    for lst in sessions.itervalues():
        session_set = set(tuple(x) for x in lst)
        repeated = (known &amp; session_set) - already_repeated
        already_repeated |= repeated
        known |= session_set
        for val in repeated:
            yield val

sessions = {1:[[100,0],[22,1],[23,2]],10:[[100,0],[232,0],[10,2],[11,2]],22:[[5,2],[23,2]]}
for x in get_repeated_values(sessions):
    print x
</snippet></ROW><ROW><id>6109524</id><snippet>from . import SomeClass
</snippet></ROW><ROW><id>6109524</id><snippet>SomeClass.Text()
</snippet></ROW><ROW><id>6109524</id><snippet>Test()</snippet></ROW><ROW><id>6109987</id><snippet>localhost</snippet></ROW><ROW><id>6109987</id><snippet>127.0.0.1</snippet></ROW><ROW><id>6109987</id><snippet>python manage.py runserver 12345
</snippet></ROW><ROW><id>6109987</id><snippet>http://127.0.0.1:12345
</snippet></ROW><ROW><id>6110244</id><snippet>writeSomeData</snippet></ROW><ROW><id>6110244</id><snippet>write</snippet></ROW><ROW><id>6110244</id><snippet>ProcessProtocol</snippet></ROW><ROW><id>6110244</id><snippet>class NotchianProcessProtocol(protocol.ProcessProtocol):
    ...
    def listPlayers(self):
        self.transport.write("list")
        self._waiting.append(Deferred())
        return self._waiting[-1]

    def outReceived(self, bytes):
        outbuffer = self.outbuffer + bytes
        lines, leftover = parseLines(outbuffer)
        self.outbuffer = leftover

        for line in lines:
            if line.startswith('[INFO] Connected players: '):
                self._waiting.pop(0).callback(line)
</snippet></ROW><ROW><id>6110244</id><snippet>NotchianProcessProtocol</snippet></ROW><ROW><id>6110244</id><snippet>listPlayers</snippet></ROW><ROW><id>6110244</id><snippet>Deferred</snippet></ROW><ROW><id>6110659</id><snippet>and</snippet></ROW><ROW><id>6110659</id><snippet>if (int(one[1]) == solution) and (int(two[1]) == solution):
    print "Hello, world"
</snippet></ROW><ROW><id>6110659</id><snippet>or</snippet></ROW><ROW><id>6110659</id><snippet>if (int(one[1]) == solution) or (int(two[1]) == solution):
    print "Hello, world" 
</snippet></ROW><ROW><id>6110659</id><snippet>elif</snippet></ROW><ROW><id>6110659</id><snippet>elif</snippet></ROW><ROW><id>6110659</id><snippet>if</snippet></ROW><ROW><id>6110659</id><snippet>if spam:
    do_eggs() # We arrive here if spam is true
elif ham:
    do_sausages() # Here if spam was false but ham is true
else:
    print "Camelot!" # And here if both were false
</snippet></ROW><ROW><id>6110659</id><snippet>if spam:
    do_eggs()
elif ham:
    do_eggs()
</snippet></ROW><ROW><id>6110659</id><snippet>if spam or ham: do_eggs()</snippet></ROW><ROW><id>6110988</id><snippet>print dict(item for item in l1)
</snippet></ROW><ROW><id>6110988</id><snippet>print dict((item[1], item[4]) for item in l1)
</snippet></ROW><ROW><id>6111693</id><snippet>def foo():
    print a
</snippet></ROW><ROW><id>6111693</id><snippet>def bar():
    a = 1
    print a
</snippet></ROW><ROW><id>6111693</id><snippet>def baz():
    print a
    a = 1
</snippet></ROW><ROW><id>6111728</id><snippet>results = []
for item in dirlist:
  newsML = ET.parse(item)
  NewsLines = newsML.getroot()
  HeadLine = NewsLines.getiterator("HeadLine")
  results.append(HeadLine)
</snippet></ROW><ROW><id>6111728</id><snippet>results.append(list(HeadLine))</snippet></ROW><ROW><id>6111898</id><snippet>PyTuple_SET_ITEM</snippet></ROW><ROW><id>6111898</id><snippet>PyTuple_SetItem</snippet></ROW><ROW><id>6111898</id><snippet>PyTuple_SET_ITEM</snippet></ROW><ROW><id>6111898</id><snippet>tupleobject.h</snippet></ROW><ROW><id>6111898</id><snippet>#define PyTuple_SET_ITEM(op, i, v) (((PyTupleObject*)(op))-&gt;ob_item[i] = v
</snippet></ROW><ROW><id>6111898</id><snippet>op</snippet></ROW><ROW><id>6111898</id><snippet>i</snippet></ROW><ROW><id>6111898</id><snippet>v</snippet></ROW><ROW><id>6111898</id><snippet>PyTuple_SET_ITEM</snippet></ROW><ROW><id>6111898</id><snippet>PyTuple_SET_ITEM</snippet></ROW><ROW><id>6112106</id><snippet>0xFFFF</snippet></ROW><ROW><id>6112106</id><snippet>0xFFFFFFFF</snippet></ROW><ROW><id>6112106</id><snippet>// omits error handling
FileInputStream fis = ...;
DataInputStream stream = new DataInputStream(fis);
int short_value = 0xFFFF &amp; stream.readShort();
long long_value = 0xFFFFFFFF &amp; stream.readInt();
</snippet></ROW><ROW><id>6112140</id><snippet>from some_lib import runThatProgram

infile = '/tmp/test'
outfile = '/tmp/testout 2&gt;&amp;1'
runThatProgram(infile, outfile)
</snippet></ROW><ROW><id>6112140</id><snippet>thatProgram /tmp/test &gt; /tmp/testout 2&gt;&amp;1
</snippet></ROW><ROW><id>6112331</id><snippet>print_et_list()</snippet></ROW><ROW><id>6112331</id><snippet>function</snippet></ROW><ROW><id>6112331</id><snippet>file_handle</snippet></ROW><ROW><id>6112331</id><snippet>import sys

def print_et_list (file_handle):
    answer_list = []
    #Question
    question = file_handle.readline()
    print question
    #Choices
    one = file_handle.readline()
    two = file_handle.readline()
    answer_list.append(one)
    answer_list.append (two)
    for item in answer_list:
        print item
    #Solution
    solution = None
    try:
        result = file_handle.readline()
        result.replace("\n","")
        solution = int(result)
    except:
        print "There's an error in the answer"

    ##for the blank line
    file_handle.readline()
    return question, one, two, solution

  ##file_handle for prompting the user for an answer, comparing an answer, keeping score        and printing score.
def hey_user (solution, score=0):
    user_answer = int(raw_input ("Enter what you think the answer is, user.\n"))
    print "you answered '%s'"%user_answer
    if user_answer == solution:
        print "You've got it right!"
        score += 1
    elif user_answer == 0:
        sys.exit()
    else:
        print "You've got it wrong."
    return score

def main ():
        file_handle = open ("modStory.txt","r")
        question, one, two, solution = print_et_list(file_handle)
        scoresofar = hey_user(solution)
        print "\nYour score is now", scoresofar
        while question:
            question, one, two, solution = print_et_list(file_handle)
            if question:
                scoresofar = hey_user(solution, scoresofar)
                print "\nYour score is now", scoresofar
        file_handle.close()

main ()


raw_input ("Hit enter to exit.")
</snippet></ROW><ROW><id>6112792</id><snippet>/data/buildout_&lt;date1&gt;
/data/buildout_&lt;date2&gt;
/data/current
</snippet></ROW><ROW><id>6113152</id><snippet>cget</snippet></ROW><ROW><id>6113152</id><snippet>text</snippet></ROW><ROW><id>6113152</id><snippet>l = tk.Label(text="hello, world")
...
print "the label is", l.cget("text")
</snippet></ROW><ROW><id>6113152</id><snippet>l["text"]</snippet></ROW><ROW><id>6113154</id><snippet>Implementation</snippet></ROW><ROW><id>6113154</id><snippet>BaseClassProxy = Implementation
</snippet></ROW><ROW><id>6113237</id><snippet>dbConnection.commit()</snippet></ROW><ROW><id>6113325</id><snippet>.chksum</snippet></ROW><ROW><id>6113325</id><snippet>show2()</snippet></ROW><ROW><id>6113325</id><snippet>scapy</snippet></ROW><ROW><id>6113502</id><snippet>print_et_list</snippet></ROW><ROW><id>6113502</id><snippet>readline</snippet></ROW><ROW><id>6113502</id><snippet>print_et_list</snippet></ROW><ROW><id>6113502</id><snippet>question</snippet></ROW><ROW><id>6113502</id><snippet>main</snippet></ROW><ROW><id>6113536</id><snippet>&gt;&gt;&gt; example = 1,
&gt;&gt;&gt; print example
(1,)
</snippet></ROW><ROW><id>6113613</id><snippet>class PostDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.ui = Ui_Dialog() #code from designer!!
        self.ui.setupUi(self)

        self.ui.plainTextEdit.installEventFilter(self)

    def eventFilter(self, event):
        if event.type() == QtCore.QEvent.KeyPress:
            # do some stuff ...
            return True # means stop event propagation
        else:
            return QtGui.QDialog.eventFilter(self, event)
</snippet></ROW><ROW><id>6114166</id><snippet>sizer.AddGrowableRow(row)</snippet></ROW><ROW><id>6114166</id><snippet>sizer.AddGrowableCol(col)</snippet></ROW><ROW><id>6114166</id><snippet>gridbagsizer_4.AddGrowableCol(2)</snippet></ROW><ROW><id>6114174</id><snippet>$ sudo apt-get install python-pip
$ sudo pip install libxml2dom
</snippet></ROW><ROW><id>6114411</id><snippet>import imp
m = imp.find_module('file1')
file1 = imp.load_module('__main__', *m)
</snippet></ROW><ROW><id>6114411</id><snippet>file1.py</snippet></ROW><ROW><id>6114802</id><snippet>if 'someData' in request.POST:</snippet></ROW><ROW><id>6114903</id><snippet>%</snippet></ROW><ROW><id>6114903</id><snippet>Map</snippet></ROW><ROW><id>6114903</id><snippet>vals</snippet></ROW><ROW><id>6114951</id><snippet>form.some_radio_buttons</snippet></ROW><ROW><id>6115065</id><snippet>using boost::python;
BOOST_PYTHON_MODULE(foo)
{
  // This will enable user-defined docstrings and python signatures,
  // while disabling the C++ signatures
  docstring_options local_docstring_options(true, true, false);

  class&lt;Bar&gt;("Bar", init&lt;&gt;(), "Bar class" /* class docstring here */ )
    .def("foobar", &amp;Bar::foobar, "foobar function" /* function docstring here */);
}
</snippet></ROW><ROW><id>6115246</id><snippet>from collections import defaultdict


_linked = defaultdict(set)


class Linkable(object):

    def link(self, *others):
        _linked[self].update(others)
        for each in others:
            _linked[each].add(self)

    def unlink(self, *others):
        _linked[self].difference_update(others)
        for each in others:
            _linked[each].discard(self)

    def links(self):
        return set(_linked[self])


class NameHierarchy(object):

    def __init__(self, name, parent=None):
        self.name = name
        self.parent = parent or self
        self.path = parent.path + [self] if parent else [self]

    def __str__(self):
        return '.'.join(each.name for each in self.path)

    def add(self, name):
        if name not in self.__dict__:
            setattr(self, name, self.__class__(name, self))


class LinkedNameHierarchy(Linkable, NameHierarchy):
    pass


Category = LinkedNameHierarchy('Category')

Category.add('MyComponent')
Category.MyComponent.add('Useful')

Category.add('Data')
Category.Data.add('All')
Category.Data.add('Count')

Event = LinkedNameHierarchy('Event')

Event.add('MyComponent')
Event.MyComponent.add('ComponentEvent')
Event.MyComponent.add('ComponentEventWCategory')

Event.MyComponent.ComponentEventWCategory.link(Category.MyComponent.Useful)

Event.add('Data')
Event.Data.add('Created')
Event.Data.add('Updated')
Event.Data.add('Deleted')

Event.Data.Created.link(Category.Data.All, Category.Data.Count)
Event.Data.Updated.link(Category.Data.All)
Event.Data.Deleted.link(Category.Data.All, Category.Data.Count)


def show_links():
    print
    print '----8&lt;--------8&lt;--------8&lt;--------8&lt;--------8&lt;--------8&lt;----'
    for k, v in sorted(_linked.iteritems(), key=lambda x:str(x[0])):
        print
        print k
        for each in sorted(v, key=str):
            print '        ', each

show_links()

Event.Data.Created.unlink(Category.Data.Count)

show_links()
</snippet></ROW><ROW><id>6115258</id><snippet>gc</snippet></ROW><ROW><id>6115258</id><snippet>gc</snippet></ROW><ROW><id>6115258</id><snippet>In [1]: import gc

In [2]: gc.set_debug(gc.DEBUG_STATS)

In [3]: gc.collect()
gc: collecting generation 2...
gc: objects in each generation: 159 2655 7538
gc: done, 10 unreachable, 0 uncollectable, 0.0020s elapsed.
</snippet></ROW><ROW><id>6115429</id><snippet>&gt;&gt;&gt; print 'She\x92s Out of My League'.decode('cp1252')
She’s Out of My League
</snippet></ROW><ROW><id>6115528</id><snippet>print "paste quote:"
emptycount = 0
lines = []

while emptycount &lt; 2:
    t = raw_input()
    if len(t) == 0:
        emptycount +=1
    else:
        emptycount=0
        lines.append(t)
        lines.append("\n")

print " ".join(lines[:-1])
</snippet></ROW><ROW><id>6116137</id><snippet>class Media( models.Model ):
    @property
    def clean_band_name( self ):
        if self.bandname_alt[:4] == 'The ':
            return self.bandname_alt[4:] + ', The'
        else:
            return self.bandname_alt
</snippet></ROW><ROW><id>6116137</id><snippet>sorted( list(results), key=lambda x: x.clean_band_name() )</snippet></ROW><ROW><id>6116137</id><snippet>data = [ (cleanup(item.bandname_alt), item) for item in m ]
</snippet></ROW><ROW><id>6116137</id><snippet>data.sort()
</snippet></ROW><ROW><id>6116415</id><snippet>__del__</snippet></ROW><ROW><id>6116415</id><snippet>self.cursor</snippet></ROW><ROW><id>6116415</id><snippet>self.conn</snippet></ROW><ROW><id>6116415</id><snippet>MySQLdb.Connect</snippet></ROW><ROW><id>6116415</id><snippet>class MySQL( object ):

    def __init__( self ):

        self.conn   = None
        self.cursor = None

        self.host   = config.get("mysql","host")
        self.port   = config.get("mysql","port")
        self.user   = config.get("mysql","user")
        self.passwd = config.get("mysql","passwd")
        self.db     = config.get("mysql","db")
        self.unix_socket = config.get("mysql","unix_socket")

        self.conn   = MySQLdb.Connect(self.host,
                                      self.port,
                                      self.user,
                                      self.passwd,
                                      self.db,
                                      self.unix_socket)

        self.cursor = self.conn.cursor ( MySQLdb.cursors.DictCursor )

    def __del__( self ):
        if self.cursor is not None:
            self.cursor.close()
        if self.conn is not None:
            self.conn.close()
</snippet></ROW><ROW><id>6116415</id><snippet>Connect</snippet></ROW><ROW><id>6116415</id><snippet>Connection.__init__</snippet></ROW><ROW><id>6116415</id><snippet>    Create a connection to the database. It is strongly recommended
    that you only use keyword parameters. Consult the MySQL C API
    documentation for more information.

    host
      string, host to connect

    user
      string, user to connect as

    passwd
      string, password to use

    db
      string, database to use

    port
      integer, TCP/IP port to connect to

    unix_socket
      string, location of unix_socket to use

    ...
</snippet></ROW><ROW><id>6116415</id><snippet>MySQLdb.Connect</snippet></ROW><ROW><id>6116415</id><snippet>port</snippet></ROW><ROW><id>6116415</id><snippet>int</snippet></ROW><ROW><id>6116953</id><snippet>:set textwidth=80
</snippet></ROW><ROW><id>6116953</id><snippet>gq</snippet></ROW><ROW><id>6116953</id><snippet>In those days spirits were brave, the stakes were high, men were real men, women were real women and small furry creatures from Alpha Centauri were real small furry creatures from Alpha Centauri.
</snippet></ROW><ROW><id>6116953</id><snippet>tw=30</snippet></ROW><ROW><id>6116953</id><snippet>gq</snippet></ROW><ROW><id>6116953</id><snippet>In those days spirits were
brave, the stakes were high,
men were real men, women were
real women and small furry
creatures from Alpha Centauri
were real small furry
creatures from Alpha Centauri.
</snippet></ROW><ROW><id>6117042</id><snippet>text</snippet></ROW><ROW><id>6117042</id><snippet>dic</snippet></ROW><ROW><id>6117042</id><snippet>def replace_all(text, dic):
    for i, j in dic.iteritems():
        text = text.replace(i, j)
    return text
</snippet></ROW><ROW><id>6117246</id><snippet>sed -i '18 d' filename
</snippet></ROW><ROW><id>6117387</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>6117387</id><snippet>scipy.filter</snippet></ROW><ROW><id>6117387</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from scipy import ndimage
import Image

def plot(data, title):
    plot.i += 1
    plt.subplot(2,2,plot.i)
    plt.imshow(data)
    plt.gray()
    plt.title(title)
plot.i = 0

# Load the data...
im = Image.open('lena.png')
data = np.array(im, dtype=float)
plot(data, 'Original')

# A very simple and very narrow highpass filter
kernel = np.array([[-1, -1, -1],
                   [-1,  8, -1],
                   [-1, -1, -1]])
highpass_3x3 = ndimage.convolve(data, kernel)
plot(highpass_3x3, 'Simple 3x3 Highpass')

# A slightly "wider", but sill very simple highpass filter 
kernel = np.array([[-1, -1, -1, -1, -1],
                   [-1,  1,  2,  1, -1],
                   [-1,  2,  4,  2, -1],
                   [-1,  1,  2,  1, -1],
                   [-1, -1, -1, -1, -1]])
highpass_5x5 = ndimage.convolve(data, kernel)
plot(highpass_5x5, 'Simple 5x5 Highpass')

# Another way of making a highpass filter is to simply subtract a lowpass
# filtered image from the original. Here, we'll use a simple gaussian filter
# to "blur" (i.e. a lowpass filter) the original.
lowpass = ndimage.gaussian_filter(data, 3)
gauss_highpass = data - lowpass
plot(gauss_highpass, r'Gaussian Highpass, $\sigma = 3 pixels$')

plt.show()
</snippet></ROW><ROW><id>6117540</id><snippet>f.seek(0)
</snippet></ROW><ROW><id>6117762</id><snippet>not</snippet></ROW><ROW><id>6117762</id><snippet>!</snippet></ROW><ROW><id>6117762</id><snippet>not</snippet></ROW><ROW><id>6117762</id><snippet>if not os.path.exists("/usr/share/sounds/blues") :
    proc = subprocess.Popen(["mkdir", "/usr/share/sounds/blues"])
    proc.wait()
</snippet></ROW><ROW><id>6117762</id><snippet>subprocess</snippet></ROW><ROW><id>6117762</id><snippet>os.mkdir()</snippet></ROW><ROW><id>6117762</id><snippet>blues_sounds_path = "/usr/share/sounds/blues"
if not os.path.exists(blues_sounds_path):
    try:
        os.mkdir(blues_sounds_path)
    except OSError:
        # Handle the case where the directory could not be created.
</snippet></ROW><ROW><id>6118058</id><snippet>writenames = "test,QC,Plate,Sample".split(",") # example
reader = csv.reader(input_file_handle)
writer = csv.writer(output_file_handle)
# don't forget to open both files in binary mode (2.x)
# or with `newline=''` (3.x)
readnames = reader.next()
name2index = dict((name, index) for index, name in enumerate(readnames))
writeindices = [name2index[name] for name in writenames]
reorderfunc = operator.itemgetter(*writeindices)
writer.writerow(writenames)
for row in reader:
    writer.writerow(reorderfunc(row))
</snippet></ROW><ROW><id>6118188</id><snippet>f=open( 'myfile.txt', 'r')
for line in f.readlines():
    # suppose line is '["a","b","c"]'
    a = line.split( ',' )
    # a is now the list [ '["a"', '"b"', '"c"]' ]

    # To strip away the brackets use this instead:
    a = line.strip('[]').split( '[]' )
    # a is now the list [ '"a"', '"b"', '"c"' ]

    # To strip away the spurious quote marks use this instead:
    a = [ s.strip('"') for s in line.strip('[]').split(',') ]
    # a is now the list [ 'a', 'b', 'c' ]
</snippet></ROW><ROW><id>6118188</id><snippet>lines = [ s.strip('"') for s in l.strip('[]').split(',') for l in open( 'myfile.txt', 'r' ).readlines() ]
</snippet></ROW><ROW><id>6118489</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; webpage = urllib2.urlopen('http://www.dmx.com/about/our-clients')
&gt;&gt;&gt; webpage_text = webpage.read()
&gt;&gt;&gt; webpage.close()
&gt;&gt;&gt; for name in ['Caribou Coffee', 'Express', 'Sears']:
...     if name in webpage_text:
...         print name, "found!"
... 
Caribou Coffee found!
Express found!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6118489</id><snippet>&gt;&gt;&gt; webpage_text = webpage_text.upper()
&gt;&gt;&gt; for name in ['CARIBOU COFFEE', 'EXPRESS', 'SEARS']:
...     if name in webpage_text:
...         print name, 'found!'
... 
CARIBOU COFFEE found!
EXPRESS found!
</snippet></ROW><ROW><id>6118510</id><snippet>isPrime</snippet></ROW><ROW><id>6118510</id><snippet>cooperate</snippet></ROW><ROW><id>6118510</id><snippet>deferToThread</snippet></ROW><ROW><id>6118510</id><snippet>Deferred</snippet></ROW><ROW><id>6118510</id><snippet>Failure</snippet></ROW><ROW><id>6118510</id><snippet>getPage</snippet></ROW><ROW><id>6118510</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>6118510</id><snippet>deferToThread</snippet></ROW><ROW><id>6118510</id><snippet>deferToAMPProcess</snippet></ROW><ROW><id>6118555</id><snippet>file.close()
</snippet></ROW><ROW><id>6118555</id><snippet>for</snippet></ROW><ROW><id>6118681</id><snippet>import types
class C:
    pass

def f(self):
    print self

a = C()
a.f = types.MethodType(f,a)
a.f()
</snippet></ROW><ROW><id>6118691</id><snippet>typedef std::map&lt;std::string, double&gt; MyMap;

class myClass {
public:
    // Constructors - set a-f to default values.

    void SetParameters(MyMap &amp;);
private:
    double a, b, c, d, e, f;
};
</snippet></ROW><ROW><id>6118691</id><snippet>#include &lt;boost/python/suite/indexing/map_indexing_suite.hpp&gt;

using boost::python;

BOOST_PYTHON_MODULE(mymodule)
{
    class_&lt;std::map&lt;std::string, double&gt; &gt;("MyMap")
        .def(map_indexing_suite&lt;std::map&lt;std::wstring, double&gt; &gt;() );

    class_&lt;myClass&gt;("myClass")
        .def("SetParameters", &amp;myClass::SetParameters);
}
</snippet></ROW><ROW><id>6118691</id><snippet>using namespace boost::python;

object SetParameters(tuple args, dict kwargs)
{
    myClass&amp; self = extract&lt;myClass&amp;&gt;(args[0]);

    list keys = kwargs.keys();

    MyMap outMap;
    for(int i = 0; i &lt; len(keys); ++i) {
        object curArg = kwargs[keys[i]];
        if(curArg) {
            outMap[extract&lt;std::string&gt;(keys[i])] = extract&lt;double&gt;(kwargs[keys[i]]);
        }               
    }
    self.SetParameters(outMap);

    return object();
}

BOOST_PYTHON_MODULE(mymodule)
{
    class_&lt;myClass&gt;("myClass")
        .def("SetParameters", raw_function(&amp;SetParameters, 1));
}
</snippet></ROW><ROW><id>6118691</id><snippet>A.SetParameters(a = 2.2, d = 4.3, b = 9.3)
</snippet></ROW><ROW><id>6119080</id><snippet>command &lt;&lt; HERE
text that someone types in
more text
HERE
</snippet></ROW><ROW><id>6119312</id><snippet>#!/usr/bin/perl

sub test_re {
    $arg    = $_[0];
    $INSULTSTR = $_[1];
    $INSULTSTR =~ /(?:^|\.\s*)(?:(?![^.]*?$arg[^.]*\.))([^.]*\.)/;
    if ($1) {
        print "neg-lookahead($arg) MATCHED: '$1'\n";
    } else {
        print "Unable to match: neg-lookahead($arg) in '$INSULTSTR'\n";
    }
}

$INSULT = 'Yomama is ugly.  And, she smells like an wet dog.';
test_re('Yomama', $INSULT);
test_re('ugly', $INSULT);
test_re('looks', $INSULT);
test_re('And', $INSULT);
test_re('And,', $INSULT);
test_re('smells', $INSULT);
test_re('dog', $INSULT);
</snippet></ROW><ROW><id>6119312</id><snippet>neg-lookahead(Yomama) MATCHED: 'And, she smells like an wet dog.'
neg-lookahead(ugly) MATCHED: 'And, she smells like an wet dog.'
neg-lookahead(looks) MATCHED: 'Yomama is ugly.'
neg-lookahead(And) MATCHED: 'Yomama is ugly.'
neg-lookahead(And,) MATCHED: 'Yomama is ugly.'
neg-lookahead(smells) MATCHED: 'Yomama is ugly.'
neg-lookahead(dog) MATCHED: 'Yomama is ugly.'
</snippet></ROW><ROW><id>6119813</id><snippet>dict</snippet></ROW><ROW><id>6119813</id><snippet>&gt;&gt;&gt; lists = {}
&gt;&gt;&gt; lists['homework'] = [40, 60, 70]
&gt;&gt;&gt; lists['tests'] = [35, 99, 20]
&gt;&gt;&gt; lists
{'tests': [35, 99, 20], 'homework': [40, 60, 70]}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6119813</id><snippet>input</snippet></ROW><ROW><id>6119813</id><snippet>raw_input</snippet></ROW><ROW><id>6119817</id><snippet>player_list = list with Player objects
participant_list = list with Participant objects

for player in player_list:
    for participant in participant_list:
        if player == participant.player:
            print participant.status
            break
</snippet></ROW><ROW><id>6120853</id><snippet>import random

a = [12,2,3,4,5,33,14,124,55,233,565]

b = a[:]
random.shuffle(b)

# b: [55, 12, 33, 5, 565, 3, 233, 2, 124, 4, 14]
</snippet></ROW><ROW><id>6120853</id><snippet>a</snippet></ROW><ROW><id>6120853</id><snippet>a</snippet></ROW><ROW><id>6120853</id><snippet>random.shuffle(a)</snippet></ROW><ROW><id>6121367</id><snippet>import urllib
import string
import random
import os

filename_charset = string.ascii_letters + string.digits
filename_length = 10
file_save_dir = '/home/user/download/'

filename = ''.join(random.choice(filename_charset)
                   for s in range(filename_length))

urllib.urlretrieve ("http://www.example.com/image.png", 
                    os.path.join(file_save_dir, filename + '.png'))
</snippet></ROW><ROW><id>6121584</id><snippet>synchronous</snippet></ROW><ROW><id>6121584</id><snippet>page_size</snippet></ROW><ROW><id>6121610</id><snippet>a= [['A', 'B', 'C', 3], ['P', 'Q', 'R', 4]]
b=[['K',1,1,1,1,1], ['L',1,1,1,1,1], ['M', 1,1,0,1,1], ['J', 0,0,0,0,0], ['A', 0,0,0,1,1], ['P',0,1,0,1,1 ]]
src = [y[0] for y in b]; # I moved this out here so that it is only calculated once
Output = []
for i in range(len(a)):  # You have Test here instead??? Not sure why
     ai  = src.index( a[ i ][ 0 ] )
     Output.append( b[ ai ][:] )
</snippet></ROW><ROW><id>6121811</id><snippet>from suds.client import Client
url = 'http://localhost:7080/webservices/WebServiceTestBean?wsdl'
client = Client(url)
</snippet></ROW><ROW><id>6121811</id><snippet>result = client.service.getPercentBodyFat('jeff', 68, 170)
print result
</snippet></ROW><ROW><id>6121835</id><snippet>shell=True</snippet></ROW><ROW><id>6121835</id><snippet>Popen()</snippet></ROW><ROW><id>6121835</id><snippet>.communicate()</snippet></ROW><ROW><id>6121835</id><snippet>os.fork()</snippet></ROW><ROW><id>6121835</id><snippet>os.pipe()</snippet></ROW><ROW><id>6121835</id><snippet>os.dup2()</snippet></ROW><ROW><id>6121835</id><snippet>os.fcntl()</snippet></ROW><ROW><id>6121835</id><snippet>os.exec*</snippet></ROW><ROW><id>6121835</id><snippet>subprocess</snippet></ROW><ROW><id>6121835</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6121835</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>6121918</id><snippet>BeautifulStoneSoup</snippet></ROW><ROW><id>6121918</id><snippet>soup.findAll('p', limit=3)
</snippet></ROW><ROW><id>6122336</id><snippet>filename</snippet></ROW><ROW><id>6122336</id><snippet>showDialog</snippet></ROW><ROW><id>6122336</id><snippet>self.filename</snippet></ROW><ROW><id>6122336</id><snippet>OpenFile</snippet></ROW><ROW><id>6122336</id><snippet>openfile = OpenFile()
</snippet></ROW><ROW><id>6122336</id><snippet>openfile.filename
</snippet></ROW><ROW><id>6122583</id><snippet>def func(arg: Param(type = 'int', unit = 'MB')):
   pass
</snippet></ROW><ROW><id>6122583</id><snippet>func.__annotations__</snippet></ROW><ROW><id>6122893</id><snippet>import importlib
def introspect(foo, bar):
    imported_module = importlib.import_module(foo)
    imported_object = getattr(imported_module, bar)
    for item in inspect.getmembers(imported_object):
        if callable(getattr(imported_object, item[0]):
           print item

if __name__ == '__main__':
    introspect(somemodule, someobject)
</snippet></ROW><ROW><id>6123242</id><snippet>EHLO</snippet></ROW><ROW><id>6123242</id><snippet>AUTH</snippet></ROW><ROW><id>6123242</id><snippet>250 AUTH GSSAPI DIGEST-MD5 PLAIN
</snippet></ROW><ROW><id>6123242</id><snippet>EHLO</snippet></ROW><ROW><id>6123242</id><snippet>STARTTLS</snippet></ROW><ROW><id>6123242</id><snippet>AUTH</snippet></ROW><ROW><id>6123242</id><snippet>AUTH</snippet></ROW><ROW><id>6123242</id><snippet>AUTH</snippet></ROW><ROW><id>6123242</id><snippet>smtp.starttls()
smtp.ehlo()
# Pretend the SMTP server supports some forms of authentication.
smtp.esmtp_features['auth'] = 'LOGIN DIGEST-MD5 PLAIN'
</snippet></ROW><ROW><id>6123758</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; t = etree.parse(StringIO("""&lt;body&gt;
... &lt;h1&gt;A title&lt;/h1&gt;
... &lt;p&gt;Some text&lt;/p&gt;
... &lt;/body&gt;"""))
&gt;&gt;&gt; root = t.getroot()
&gt;&gt;&gt; for child in root.iterdescendants(),:
...  print etree.tostring(child)
...
&lt;h1&gt;A title&lt;/h1&gt;

&lt;p&gt;Some text&lt;/p&gt;
</snippet></ROW><ROW><id>6123758</id><snippet>print ''.join([etree.tostring(child) for child in root.iterdescendants()])
</snippet></ROW><ROW><id>6123780</id><snippet>surname</snippet></ROW><ROW><id>6123780</id><snippet>surname = "%atton%"
cur.execute("select id from singers where surname like :surname",
    dict(surname=surname))
</snippet></ROW><ROW><id>6124315</id><snippet>gzip</snippet></ROW><ROW><id>6124315</id><snippet>zlib</snippet></ROW><ROW><id>6124315</id><snippet>gzip</snippet></ROW><ROW><id>6124315</id><snippet>zlib</snippet></ROW><ROW><id>6124315</id><snippet>&gt;&gt;&gt; import gzip, zlib
&gt;&gt;&gt; f = gzip.open('foo.gz', 'wb')
&gt;&gt;&gt; f.write(b"hello world")
11
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; c = open('foo.gz', 'rb').read()
&gt;&gt;&gt; c
'\x1f\x8b\x08\x08\x14\xf4\xdcM\x02\xfffoo\x00\xcbH\xcd\xc9\xc9W(\xcf/\xcaI\x01\x00\x85\x11J\r\x0b\x00\x00\x00'
&gt;&gt;&gt; ba = bytearray(c)
&gt;&gt;&gt; ba
bytearray(b'\x1f\x8b\x08\x08\x14\xf4\xdcM\x02\xfffoo\x00\xcbH\xcd\xc9\xc9W(\xcf/\xcaI\x01\x00\x85\x11J\r\x0b\x00\x00\x00')
&gt;&gt;&gt; zlib.decompress(ba, 15+32)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be string or read-only buffer, not bytearray
&gt;&gt;&gt; zlib.decompress(bytes(ba), 15+32)
'hello world'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6124315</id><snippet>foo.gz</snippet></ROW><ROW><id>6124315</id><snippet>Python 2.2.3 (#42, May 30 2003, 18:12:08) [MSC 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; strobj = open('foo.gz', 'rb').read()
&gt;&gt;&gt; strobj
'\x1f\x8b\x08\x08\x14\xf4\xdcM\x02\xfffoo\x00\xcbH\xcd\xc9\xc9W(\xcf/\xcaI\x01\x00\x85\x11J\r\x0b\x00\x00\x00'
&gt;&gt;&gt; import zlib
&gt;&gt;&gt; zlib.decompress(strobj, 15+32)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
zlib.error: Error -2 while preparing to decompress data
&gt;&gt;&gt; zlib.decompress(strobj, 15+16)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
zlib.error: Error -2 while preparing to decompress data

# OK, we can't use the back door method. Plan B: use the 
# documented approach i.e. gzip.GzipFile with a file-like object.

&gt;&gt;&gt; import gzip, cStringIO
&gt;&gt;&gt; fileobj = cStringIO.StringIO(strobj)
&gt;&gt;&gt; gzf = gzip.GzipFile('dummy-name', 'rb', 9, fileobj)
&gt;&gt;&gt; gzf.read()
'hello world'

# Success. Now let's assume you have an array.array object-- which requires
# premeditation; they aren't created accidentally!
# The following code assumes subtype 'B' but should work for any subtype.

&gt;&gt;&gt; import array, sys
&gt;&gt;&gt; aaB = array.array('B')
&gt;&gt;&gt; aaB.fromfile(open('foo.gz', 'rb'), sys.maxint)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
EOFError: not enough items in file
#### Don't panic, just read the fine manual
&gt;&gt;&gt; aaB
array('B', [31, 139, 8, 8, 20, 244, 220, 77, 2, 255, 102, 111, 111, 0, 203, 72, 205, 201, 201, 87, 40, 207, 47, 202, 73, 1, 0, 133, 17, 74, 13, 11, 0, 0, 0])
&gt;&gt;&gt; strobj2 = aaB.tostring()
&gt;&gt;&gt; strobj2 == strobj
1 #### means True 
# You can make a str object and use that as above.

# ... or you can plug it directly into StringIO:
&gt;&gt;&gt; gzip.GzipFile('dummy-name', 'rb', 9, cStringIO.StringIO(aaB)).read()
'hello world'
</snippet></ROW><ROW><id>6124393</id><snippet>url = 'http://ratings.food.gov.uk/QuickSearch.aspx?q=po30'
br = mechanize.Browser()
br.set_handle_robots(False)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')]
br.open(url)
response = br.response().read()
</snippet></ROW><ROW><id>6124393</id><snippet>br.select_form(nr=0) #Select the first (and only) form - it has no name so we reference by number
</snippet></ROW><ROW><id>6124393</id><snippet>response = br.submit(name='ctl00$ContentPlaceHolder1$uxResults$uxNext').read()  #"Press" the next submit button
</snippet></ROW><ROW><id>6124393</id><snippet>ctl00$uxLanguageSwitch # Switch language to Welsh
ctl00$ContentPlaceHolder1$uxResults$Button1 # Search submit button
ctl00$ContentPlaceHolder1$uxResults$uxFirst # First result page
ctl00$ContentPlaceHolder1$uxResults$uxPrevious # Previous result page
ctl00$ContentPlaceHolder1$uxResults$uxLast # Last result page
</snippet></ROW><ROW><id>6124393</id><snippet>for form in br.forms():
    print form
</snippet></ROW><ROW><id>6124551</id><snippet>a |= b</snippet></ROW><ROW><id>6124551</id><snippet>a = a.union(b)</snippet></ROW><ROW><id>6124551</id><snippet>popleft()</snippet></ROW><ROW><id>6124551</id><snippet>new</snippet></ROW><ROW><id>6124656</id><snippet>x.append(y)</snippet></ROW><ROW><id>6124656</id><snippet>x+[y]</snippet></ROW><ROW><id>6124656</id><snippet>append</snippet></ROW><ROW><id>6124656</id><snippet>x+[y]</snippet></ROW><ROW><id>6124707</id><snippet>UPDATE t_student
SET studentScore = CASE
 WHEN studentID=1    THEN 12.76
 WHEN studentID=123  THEN 73.2
 WHEN studentID=33   THEN 83.893
 WHEN studentID=5524 THEN 92.3
 ELSE studentScore END
WHERE studentID IN (1, 123, 33, 5524, 425653)
</snippet></ROW><ROW><id>6124707</id><snippet>UPDATE t_student SET studentScore = 12.76  WHERE studentID = 1;
UPDATE t_student SET studentScore = 73.2   WHERE studentID = 123;
UPDATE t_student SET studentScore = 83.893 WHERE studentID = 33;
UPDATE t_student SET studentScore = 92.3   WHERE studentID = 5524;
</snippet></ROW><ROW><id>6124763</id><snippet>rules = {}
for id, rule in read_rules_file():
    rules[id] = rule
for id, isUsed in read_pairs_file():
    if isUsed:
       write_rule(id, rules[id])
    else:
       write_commented_rule(id, rules[id])
</snippet></ROW><ROW><id>6124763</id><snippet>def read_pairs_file():
   pairFd = open(pairFile, 'r')
   for line in pairFd.readLines():
      id, isUsed = line.split(',')
      yield (id, isUsed)
   pairFd.Close()
</snippet></ROW><ROW><id>6124972</id><snippet>str.decode()</snippet></ROW><ROW><id>6124972</id><snippet> &gt;&gt;&gt; s.decode("ascii", "ignore")
 u'ad-ven-ture'
</snippet></ROW><ROW><id>6125654</id><snippet>#manager.py [unchanged from original]
def FetchReports(links,Username,Password,VendorID):
    import Fetch
    import multiprocessing

    pool = multiprocessing.Pool(processes=4, initializer=Fetch._ProcessStart, initargs=(SiteBase,DataPath,Username,Password,VendorID,))
    pool.map(Fetch.DownloadJob,_SplitLinksArray(links))
    pool.close()
    pool.join()


#worker.py
import mechanize
from multiprocessing import current_process

def _ProcessStart(_SiteBase,_DataPath,User,Password,VendorID):
    global cookies
    cookies = mechanize.LWPCookieJar()
    opener = mechanize.build_opener(mechanize.HTTPCookieProcessor(cookies))

    Login(User,Password,opener)

    global SiteBase
    SiteBase = _SiteBase

    global DataPath
    DataPath = _DataPath

    cookies.save(DataPath+'\\'+current_process().name+'cookies.txt',True,True)

def DownloadJob(link):
    cj = mechanize.LWPCookieJar()
    cj.revert(filename=DataPath+'\\'+current_process().name+'cookies.txt',True,True)
    opener = mechanize.build_opener(mechanize.HTTPCookieProcessor(cj))

    mechanize.urlretrieve(url=mechanize.urljoin(SiteBase, link),filename=DataPath+'\\'+filename,data=data)
</snippet></ROW><ROW><id>6125782</id><snippet>cur_class()</snippet></ROW><ROW><id>6125782</id><snippet>In [1]: class C(object): pass
   ...: 

In [2]: cur_class = C

In [3]: obj = cur_class()

In [4]: obj
Out[4]: &lt;__main__.C object at 0x1953c50&gt;
</snippet></ROW><ROW><id>6125848</id><snippet>node = api.item_lookup('B001OXUIIG', ResponseGroup='Medium')
</snippet></ROW><ROW><id>6126113</id><snippet>class Translation(db.Model):
    origin = db.ReferenceProperty(Expression, required=True, collection_name='translation_origins')
    target = db.ReferenceProperty(Expression, required=True, collection_name='translation_targets')
</snippet></ROW><ROW><id>6126136</id><snippet>try:
    # stuff
except Exception, e:
  return 'exception %s' % type(e)
</snippet></ROW><ROW><id>6126637</id><snippet>parse</snippet></ROW><ROW><id>6126694</id><snippet>returned = Person.objects.filter( carusage__end__isnull=True ).annotate(Max('carusage__start'))
not_returned = Person.objects.filter( carusage__end__isnull=False ).annotate(Max('carusage__end'))
</snippet></ROW><ROW><id>6126815</id><snippet>from ...utils.filesystem import getAbsPath
</snippet></ROW><ROW><id>6126815</id><snippet>from . import …</snippet></ROW><ROW><id>6126815</id><snippet>STARTDIR/module/submodule/</snippet></ROW><ROW><id>6126815</id><snippet>from .. import …</snippet></ROW><ROW><id>6126815</id><snippet>STARTDIR/module/</snippet></ROW><ROW><id>6126815</id><snippet>from ... import …</snippet></ROW><ROW><id>6126815</id><snippet>STARTDIR/</snippet></ROW><ROW><id>6126846</id><snippet>find</snippet></ROW><ROW><id>6126846</id><snippet>findall</snippet></ROW><ROW><id>6126846</id><snippet>ElementTree</snippet></ROW><ROW><id>6126846</id><snippet>cElementTree</snippet></ROW><ROW><id>6126846</id><snippet>xpath</snippet></ROW><ROW><id>6126846</id><snippet>print customer.xpath('./@NAME')[0]
</snippet></ROW><ROW><id>6126846</id><snippet>attrib</snippet></ROW><ROW><id>6126846</id><snippet>print customer.attrib['NAME']
</snippet></ROW><ROW><id>6127034</id><snippet>set_from_file</snippet></ROW><ROW><id>6127034</id><snippet>pack_end</snippet></ROW><ROW><id>6127523</id><snippet>clr</snippet></ROW><ROW><id>6127523</id><snippet>import clr
clr.AddReference('Microsoft.DirectX.AudioVideoPlayback')
from Microsoft.DirectX import AudioVideoPlayback
mp3 = AudioVideoPlayback.Audio("C:\\myreallyfunky.mp3")
mp3.Play()
</snippet></ROW><ROW><id>6127533</id><snippet>set</snippet></ROW><ROW><id>6127533</id><snippet>list</snippet></ROW><ROW><id>6127645</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>6127645</id><snippet>$</snippet></ROW><ROW><id>6127645</id><snippet>^</snippet></ROW><ROW><id>6127645</id><snippet>$^</snippet></ROW><ROW><id>6127645</id><snippet>&gt;&gt;&gt; re.search("^(.*)$^.*$", multiline_string, re.M)    # won't match
&gt;&gt;&gt; re.search("^(.*)$\n^.*$", multiline_string, re.M)  # will match
&lt;_sre.SRE_Match object at 0xb7f3e5e0&gt;
</snippet></ROW><ROW><id>6127645</id><snippet>$</snippet></ROW><ROW><id>6127645</id><snippet>^</snippet></ROW><ROW><id>6127719</id><snippet>LoadImageM</snippet></ROW><ROW><id>6127719</id><snippet>cvmat</snippet></ROW><ROW><id>6127719</id><snippet>import cv

path = 'stack.png'
mat = cv.LoadImageM(path, cv.CV_LOAD_IMAGE_UNCHANGED)
x, y = 42, 6
print type(mat)
print mat[y, x]
</snippet></ROW><ROW><id>6127719</id><snippet>&lt;type 'cv.cvmat'&gt;
(21.0, 122.0, 254.0)
</snippet></ROW><ROW><id>6127719</id><snippet>0.5</snippet></ROW><ROW><id>6127719</id><snippet>for x in xrange(mat.cols):
    for y in xrange(mat.rows):
        # multiply all 3 components by 0.5
        mat[y, x] = tuple(c*0.5 for c in mat[y, x])

        # or multiply only the red component by 0.5
        b, g, r = mat[y, x]
        mat[y, x] = (b, g, r * 0.5)
</snippet></ROW><ROW><id>6127737</id><snippet>decode('base64')</snippet></ROW><ROW><id>6127737</id><snippet>socket.inet_ntoa</snippet></ROW><ROW><id>6127737</id><snippet>&gt;&gt;&gt; socket.inet_ntoa('zAvIAQ=='.decode('base64'))
'204.11.200.1'
</snippet></ROW><ROW><id>6127792</id><snippet>(.*?)(\d+)
</snippet></ROW><ROW><id>6127976</id><snippet>Position</snippet></ROW><ROW><id>6127976</id><snippet>class Position(models.Model):
    label = models.CharField(max_length=100)

    def __unicode__(self):
        return self.label

class UserProfile(models.Model):
    [...]
    positions = models.ManyToManyField(Position)
</snippet></ROW><ROW><id>6128480</id><snippet>im.set_clim(vmin, vmax)</snippet></ROW><ROW><id>6128480</id><snippet>3</snippet></ROW><ROW><id>6128480</id><snippet>max_nodes</snippet></ROW><ROW><id>6128480</id><snippet>im.set_clim(0, 13)</snippet></ROW><ROW><id>6128480</id><snippet>num_modes</snippet></ROW><ROW><id>6128480</id><snippet>import numpy
from pylab import *

def read_ascii_pgm(fname):
    lines = open(fname).read().strip().split('\n')
    assert lines[0] == 'P2'
    width, height = map(int, lines[1].split(' '))
    num_modes = int(lines[2])
    pgm = numpy.zeros((height, width), dtype=numpy.uint8)
    for i in range(height):
        cols = lines[3+i].split(' ')
        for j in range(width):
            pgm[i,j] = int(cols[j])
    return pgm, num_modes + 1

if __name__ == '__main__':
    import sys
    assert len(sys.argv) &gt; 1
    fname = sys.argv[1]
    pgm, num_modes = read_ascii_pgm(fname)
    labels = range(num_modes)
    cmap = cm.get_cmap('spectral', num_modes)
    im = imshow(pgm, cmap=cmap, interpolation='nearest')
    im.set_clim(0, num_modes)
    ticks = [(i + 0.5) for i in range(num_modes)]
    cb = colorbar(ticks=ticks)
    cb.ax.set_yticklabels(map(str, labels))
    savefig('imshow_new.png')
</snippet></ROW><ROW><id>6128480</id><snippet>num_modes</snippet></ROW><ROW><id>6128480</id><snippet>P2
5 3
10
0 1 0 2 0
3 0 2 0 1
0 1 0 2 0
</snippet></ROW><ROW><id>6128955</id><snippet>IPShellEmbed(argv=[])()</snippet></ROW><ROW><id>6129106</id><snippet>def get_groups(lst):
    slices = [i+1 for i, v in enumerate(zip(lst, l[1:])) if v[0] != v[1]-1] 
    slices = [0] + slices + [len(lst)]
    for start, end in zip(slices, slices[1:]):
        yield lst[start:end]

&gt;&gt;&gt; list(get_groups([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 21, 22, 23, 999, 1000, 1001]))
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [19], [21, 22, 23], [999, 1000, 1001]]
</snippet></ROW><ROW><id>6129106</id><snippet>def get_ranges(lst):
    slices = [i+1 for i, v in enumerate(zip(lst, l[1:])) if v[0] != v[1]-1]
    slices = [0] + slices + [len(lst)]
    for start, end in zip(slices, slices[1:]):
        yield "%d-%d" % (lst[start], lst[end-1])

&gt;&gt;&gt; list(get_ranges([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 19, 21, 22, 23, 999, 1000, 1001]))
['1-13', '19-19', '21-23', '999-1001']
</snippet></ROW><ROW><id>6129503</id><snippet>matplotlib.widgets</snippet></ROW><ROW><id>6129503</id><snippet>rpy2</snippet></ROW><ROW><id>6129600</id><snippet>TemporaryDirectory</snippet></ROW><ROW><id>6129600</id><snippet>with tempfile.TemporaryDirectory() as dir:
   do_stuff_with(dir)
</snippet></ROW><ROW><id>6129600</id><snippet>with</snippet></ROW><ROW><id>6129600</id><snippet>mkdtemp</snippet></ROW><ROW><id>6129742</id><snippet>abc</snippet></ROW><ROW><id>6129850</id><snippet>items = ..
iteration = ..
cb = functools.partial(self.resp, items, iteration)
</snippet></ROW><ROW><id>6129850</id><snippet>cb = lambda : self.resp(items, iteration)
</snippet></ROW><ROW><id>6130068</id><snippet>***
TRY
***

My try
======

sin
:py:func:`math.cos`

pop
:py:meth:`dict.pop`

dict
:py:meth:`dict.items`

zipfile
:py:class:`zipfile.ZipFile`
</snippet></ROW><ROW><id>6130113</id><snippet>SIT_FULL_S</snippet></ROW><ROW><id>6130113</id><snippet>Name = ' '.join(row.GetValue('SIT_FULL_S').split())
</snippet></ROW><ROW><id>6130184</id><snippet>    ...
    self.foo = StringVar()
    self.foo.set("test")
    self.nac = IntVar()
    ...
</snippet></ROW><ROW><id>6130184</id><snippet>    def naccheck(self):
        if self.nac == 1:
            ent.configure(state='disabled')
            self.nac = 0
        else:
            ent.configure(state='normal')
            self.nac = 1
</snippet></ROW><ROW><id>6130251</id><snippet>for idx, item in enumerate(list):
   if 'foo' in item:
       item = replace_all(...)
       list[idx] = item
</snippet></ROW><ROW><id>6130259</id><snippet>class Person(models.Model):
    name = models.CharField(max_length=40)
    birthday = models.DateTimeField() # their next birthday
</snippet></ROW><ROW><id>6130259</id><snippet>from datetime import datetime, timedelta
import operator

from django.db.models import Q

def birthdays_within(days):

    now = datetime.now()
    then = now + timedelta(days)

    # Build the list of month/day tuples.
    monthdays = [(now.month, now.day)]
    while now &lt;= then:
        monthdays.append((now.month, now.day))
        now += timedelta(days=1)

    # Tranform each into queryset keyword args.
    monthdays = (dict(zip(("birthday__month", "birthday__day"), t)) 
                 for t in monthdays)


    # Compose the djano.db.models.Q objects together for a single query.
    query = reduce(operator.or_, (Q(**d) for d in monthdays))

    # Run the query.
    return Person.objects.filter(query)
</snippet></ROW><ROW><id>6130391</id><snippet>set()</snippet></ROW><ROW><id>6130454</id><snippet>if __name__ == "__main__":
    for info in listDirectory("derp/", [".mp3"]):
        print "\n".join(["%s=%s" % (k, v) for k, v in info.items()])
        print
</snippet></ROW><ROW><id>6130454</id><snippet>info</snippet></ROW><ROW><id>6130454</id><snippet>class MP3FileInfo(FileInfo):
    ...
    def __setitem__(self, key, item):
        if key == "name" and item:
            self.__parse(item)
        FileInfo.__setitem__(self, key, item)
</snippet></ROW><ROW><id>6130533</id><snippet>with open(file, 'rb') as myfile:
    strings = myfile.readlines()

# do your stuff to strings
filestring = ''.join(strings)
</snippet></ROW><ROW><id>6130683</id><snippet>__new__</snippet></ROW><ROW><id>6130683</id><snippet>__init__</snippet></ROW><ROW><id>6130736</id><snippet>A.method(self, arg)
</snippet></ROW><ROW><id>6130785</id><snippet>"developers":{"item":["some1@email.com","some2@email.com"]}</snippet></ROW><ROW><id>6130800</id><snippet>get()</snippet></ROW><ROW><id>6130800</id><snippet>value = d.get(key)
</snippet></ROW><ROW><id>6130800</id><snippet>None</snippet></ROW><ROW><id>6130800</id><snippet>key is not in d</snippet></ROW><ROW><id>6130800</id><snippet>value = d.get(key, "empty")
</snippet></ROW><ROW><id>6130868</id><snippet>fakeFile= StringIO.StringOI( plistString )
plist_data = plistlib.readPlist(fakeFile)
</snippet></ROW><ROW><id>6130868</id><snippet>plistlib.readPlist</snippet></ROW><ROW><id>6131164</id><snippet>urls = html.xpath('//a/@href')
</snippet></ROW><ROW><id>6131223</id><snippet>Thread.join()</snippet></ROW><ROW><id>6131223</id><snippet>import functools
import time
import threading
import logging

import tornado.web
import tornado.websocket
import tornado.locale
import tornado.ioloop

class Handler(tornado.web.RequestHandler):
    def perform(self, callback):
        #do something cuz hey, we're in a thread!
        time.sleep(5)
        output = 'foo'
        tornado.ioloop.IOLoop.instance().add_callback(functools.partial(callback, output))

    def initialize(self):
        self.thread = None

    @tornado.web.asynchronous
    def get(self):
        self.thread = threading.Thread(target=self.perform, args=(self.on_callback,))
        self.thread.start()

        self.write('In the request')
        self.flush()

    def on_callback(self, output):
        logging.info('In on_callback()')
        self.write("Thread output: %s" % output)
        self.finish()

application = tornado.web.Application([
    (r"/", Handler),
])

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>6131223</id><snippet>curl --no-buffer localhost:8888</snippet></ROW><ROW><id>6131325</id><snippet>import MyMod
obj = MyMod.MyClass(param1, param2)
</snippet></ROW><ROW><id>6131627</id><snippet>configure</snippet></ROW><ROW><id>6131627</id><snippet>--prefix=[dest]</snippet></ROW><ROW><id>6131627</id><snippet>py26</snippet></ROW><ROW><id>6131627</id><snippet>% ./configure --prefix=$HOME/py26
..
% make install
% $HOME/py26/bin/python
</snippet></ROW><ROW><id>6131627</id><snippet>$HOME/bin</snippet></ROW><ROW><id>6131627</id><snippet>PATH</snippet></ROW><ROW><id>6131627</id><snippet>~/.bashrc</snippet></ROW><ROW><id>6131627</id><snippet>% which python
/home/user/py26/bin/python
</snippet></ROW><ROW><id>6131627</id><snippet>--prefix</snippet></ROW><ROW><id>6131627</id><snippet>PATH</snippet></ROW><ROW><id>6131627</id><snippet>% which python
/usr/bin/python

% ls -1 $HOME/py26/bin/python*
/home/user/py26/bin/python
/home/user/py26/bin/python2.6
/home/user/py26/bin/python2.6-config
/home/user/py26/bin/python-config

% export PATH=$HOME/py26/bin:$PATH
% which python
/home/user/py26/bin/python
</snippet></ROW><ROW><id>6131753</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>6131753</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>6131756</id><snippet>appScan()</snippet></ROW><ROW><id>6131756</id><snippet>appScan()</snippet></ROW><ROW><id>6131756</id><snippet>None</snippet></ROW><ROW><id>6131756</id><snippet>proc.communicate(input=appScan())</snippet></ROW><ROW><id>6131756</id><snippet>proc.communicate(input=None)</snippet></ROW><ROW><id>6131756</id><snippet>appScan</snippet></ROW><ROW><id>6131756</id><snippet>def appScan():
    os.system("system_profiler -xml SPApplicationsDataType &gt; apps.xml")
    appList = plistlib.readPlist("apps.xml")
    output_str = 'Delimiters="^"\nstring50 string50\nName^Version\n'
    appDict = appList[0]['_items']
    for x in appDict:
        if 'version' in x:
           output_str = output_str + x['_name'] + "^" + x['version'] + "^"
        else:
           output_str = output_str + x['_name'] + "^" + "no version found" + "^"
    return output_str

proc = subprocess.Popen(["/opt/altiris/notification/inventory/lib/helpers/aex-     sendcustominv","-t","-"], shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
proc.communicate(input=appScan())
</snippet></ROW><ROW><id>6131936</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>6131936</id><snippet>cgi-bin</snippet></ROW><ROW><id>6131936</id><snippet>py</snippet></ROW><ROW><id>6131936</id><snippet>import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), 
    os.pardir, os.pardir)))
import py.xml.XmlDocumentCreator
</snippet></ROW><ROW><id>6131936</id><snippet>cgi-bin</snippet></ROW><ROW><id>6131936</id><snippet>.htaccess</snippet></ROW><ROW><id>6132062</id><snippet>&gt;&gt;&gt; '-'*5
'-----'
</snippet></ROW><ROW><id>6132075</id><snippet>form.add_file(open("NAME/LOCATION OF FILE"), "MIME TYPE", "NAME OF FILE")</snippet></ROW><ROW><id>6132075</id><snippet>br.form.add_file(open("file.txt"), "text/plain", "file.txt")
</snippet></ROW><ROW><id>6132168</id><snippet>void StatusEffectWrapper::TickCharacter(Game::Character::BaseCharacter* character, Game::Battles::BattleField *field, int ticks)
{
    call_method&lt;void&gt;(self, "TickCharacter", character, field, ticks);
}
</snippet></ROW><ROW><id>6132168</id><snippet>void StatusEffectWrapper::TickCharacter(Game::Character::BaseCharacter* character, Game::Battles::BattleField *field, int ticks)
{
    call_method&lt;void&gt;(self, "TickCharacter", ptr(character), ptr(field), ticks);
}
</snippet></ROW><ROW><id>6132480</id><snippet>from scrapy.cmdline import execute
execute()
</snippet></ROW><ROW><id>6132480</id><snippet>\python26_32bit\python.exe scrapy.py startproject tutorial</snippet></ROW><ROW><id>6132544</id><snippet>print(row[0]+"--&gt;"+row[1])</snippet></ROW><ROW><id>6132638</id><snippet>.replace('-9.0','0.1')</snippet></ROW><ROW><id>6132638</id><snippet>.replace()</snippet></ROW><ROW><id>6132638</id><snippet>import re
new_string = re.sub(r'-\d+\.\d+', '0.1', your_string)
</snippet></ROW><ROW><id>6132876</id><snippet>from tkinter import *

class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()
        self.master.title("Grid Manager")

        for r in range(6):
            self.master.rowconfigure(r, weight=1)    
        for c in range(5):
            self.master.columnconfigure(c, weight=1)
            Button(master, text="Button {0}".format(c)).grid(row=6,column=c,sticky=E+W)

        Frame1 = Frame(master, bg="red")
        Frame1.grid(row = 0, column = 0, rowspan = 3, columnspan = 2, sticky = W+E+N+S) 
        Frame2 = Frame(master, bg="blue")
        Frame2.grid(row = 3, column = 0, rowspan = 3, columnspan = 2, sticky = W+E+N+S)
        Frame3 = Frame(master, bg="green")
        Frame3.grid(row = 0, column = 2, rowspan = 6, columnspan = 3, sticky = W+E+N+S)

root = Tk()
app = Application(master=root)
app.mainloop()
</snippet></ROW><ROW><id>6133245</id><snippet> try:
   import settings_local
 except ImportError:
   pass  # Ignore when file doesn't exist
</snippet></ROW><ROW><id>6133245</id><snippet>settings_local.py</snippet></ROW><ROW><id>6133245</id><snippet>settings.py</snippet></ROW><ROW><id>6133486</id><snippet>weekly = [ sum(visitors[x:x+7]) for x in range(0, len(daily), 7)]
</snippet></ROW><ROW><id>6133486</id><snippet>weekly = []
for x in range(0, len(daily), 7):
     weekly.append( sum(visitors[x:x+7]) )
</snippet></ROW><ROW><id>6133486</id><snippet>by_week = numpy.reshape(visitors, (7, -1))
weekly = numpy.sum( by_week, axis = 1)
</snippet></ROW><ROW><id>6133486</id><snippet>def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.izip_longest(fillvalue=fillvalue, *args)

weekly = map(sum, grouper(7, visitors, 0))
</snippet></ROW><ROW><id>6133795</id><snippet>range()</snippet></ROW><ROW><id>6133795</id><snippet>for</snippet></ROW><ROW><id>6133795</id><snippet>main</snippet></ROW><ROW><id>6133795</id><snippet>if __name__ == '__main__':
    ...
</snippet></ROW><ROW><id>6133858</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label="Test")

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>6133887</id><snippet>&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; try:
...     item = next(dropwhile(lambda x: x!="the one I'm looking for", items))
...     found = True
... except:
...     found = False
</snippet></ROW><ROW><id>6133887</id><snippet>&gt;&gt;&gt; from itertools import dropwhile
&gt;&gt;&gt; try:
...     item = next(dropwhile("the one I'm looking for".__ne__, items))
...     found = True
... except:
...     found = False
</snippet></ROW><ROW><id>6133887</id><snippet>found = any(item=="the one I'm looking for" for item in items)
</snippet></ROW><ROW><id>6134545</id><snippet>jcomeau@intrepid:/tmp$ python
Python 2.6.6 (r266:84292, Apr 20 2011, 11:58:30) 
[GCC 4.5.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlopen('http://latest/temp.csv')
&lt;addinfourl at 160617676 whose fp = &lt;socket._fileobject object at 0x9872aec&gt;&gt;
&gt;&gt;&gt; input=_
&gt;&gt;&gt; input.read(128)
'gene,species,C_frame,start_exon1,end_exon1,start_exon2,end_exon2,start_exon3,end_exon3,start_exon4,end_exon4,intron1,intron2,int'
&gt;&gt;&gt; input.close()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6134587</id><snippet>TIMEOUT</snippet></ROW><ROW><id>6134587</id><snippet>spawn</snippet></ROW><ROW><id>6134587</id><snippet>re.DOTALL</snippet></ROW><ROW><id>6134587</id><snippet>.*</snippet></ROW><ROW><id>6134587</id><snippet>USBSERIAL_DEVICE_NAME</snippet></ROW><ROW><id>6134587</id><snippet>expect</snippet></ROW><ROW><id>6134587</id><snippet>re.DOTALL</snippet></ROW><ROW><id>6134587</id><snippet>.*</snippet></ROW><ROW><id>6134587</id><snippet>\S*</snippet></ROW><ROW><id>6134587</id><snippet>expect</snippet></ROW><ROW><id>6134620</id><snippet>'django.db.backends.mysql'</snippet></ROW><ROW><id>6135064</id><snippet>session.close()</snippet></ROW><ROW><id>6135064</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.pool import NullPool

to_engine = create_engine('sqlite:///%s' % temp_file_name, poolclass=NullPool)
</snippet></ROW><ROW><id>6135101</id><snippet>&gt;&gt;&gt; re.findall(r'^(un|ir)(.*)$', 'undo')
[('un', 'do')]
</snippet></ROW><ROW><id>6135300</id><snippet>196605[10] = 101111111111111111[2]
101111111111111111[2] &gt;&gt; 16[10] = 10[2] = 2[10]
</snippet></ROW><ROW><id>6135300</id><snippet>101111111111111111[2] + 1000000000000000[2] &gt;&gt; 16[10] = 110111111111111111[2] &gt;&gt; 16[10] = 11[2] = 3[10]
</snippet></ROW><ROW><id>6135606</id><snippet>import os
import wx
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg, NavigationToolbar2WxAgg
from matplotlib.backends.backend_wx import _load_bitmap
import matplotlib as mpl


app = wx.PySimpleApp()
f = wx.Frame(None)
fig = mpl.figure.Figure()
p = FigureCanvasWxAgg(f, -1, fig)

toolbar = NavigationToolbar2WxAgg(p)
toolbar.Hide()

#toolbar constants
TBFLAGS = (wx.TB_HORIZONTAL|wx.TB_TEXT)      
tsize = (24,24)
tb = f.CreateToolBar(TBFLAGS)

_NTB2_HOME = wx.NewId()
_NTB2_BACK = wx.NewId()
_NTB2_FORWARD = wx.NewId()
_NTB2_PAN = wx.NewId()
_NTB2_ZOOM = wx.NewId()
_NTB2_SAVE = wx.NewId()
_NTB2_SUBPLOT = wx.NewId()

tb.AddSimpleTool(_NTB2_HOME, _load_bitmap('home.png'), 'Home', 'Reset original view')
tb.AddSimpleTool(_NTB2_BACK, _load_bitmap('back.png'), 'Back', 'Back navigation view')
tb.AddSimpleTool(_NTB2_FORWARD, _load_bitmap('forward.png'), 'Forward', 'Forward navigation view')

tb.AddCheckTool(_NTB2_PAN, _load_bitmap('move.png'), shortHelp='Pan', longHelp='Pan with left, zoom with right')
tb.AddCheckTool(_NTB2_ZOOM, _load_bitmap('zoom_to_rect.png'), shortHelp='Zoom', longHelp='Zoom to rectangle')

tb.AddSeparator()
tb.AddSimpleTool(_NTB2_SUBPLOT, _load_bitmap('subplots.png'), 'Configure subplots', 'Configure subplot parameters')
tb.AddSimpleTool(_NTB2_SAVE, _load_bitmap('filesave.png'), 'Save', 'Save plot contents to file')

f.Bind(wx.EVT_TOOL, toolbar.home, id=_NTB2_HOME)
f.Bind(wx.EVT_TOOL, toolbar.forward, id=_NTB2_FORWARD)
f.Bind(wx.EVT_TOOL, toolbar.back, id=_NTB2_BACK)
f.Bind(wx.EVT_TOOL, toolbar.zoom, id=_NTB2_ZOOM)
f.Bind(wx.EVT_TOOL, toolbar.pan, id=_NTB2_PAN)
f.Bind(wx.EVT_TOOL, toolbar.configure_subplot, id=_NTB2_SUBPLOT)
f.Bind(wx.EVT_TOOL, toolbar.save, id=_NTB2_SAVE)

tb.Realize()  

tb.Realize()
f.Show()
app.MainLoop()
</snippet></ROW><ROW><id>6135622</id><snippet>from network model import Node
</snippet></ROW><ROW><id>6135622</id><snippet>from .. import model
print "Model", model

from ..model import Node
print "Node", Node

from network.model import Node
print "Absolute", Node
</snippet></ROW><ROW><id>6135622</id><snippet>Model &lt;module 'network.model' from '/tmp/network/model.pyc'&gt;
Node &lt;class 'network.model.Node'&gt;
Absolute &lt;class 'network.model.Node'&gt;
</snippet></ROW><ROW><id>6135652</id><snippet>configure</snippet></ROW><ROW><id>6135652</id><snippet>expose-event</snippet></ROW><ROW><id>6135652</id><snippet>gtk.Image</snippet></ROW><ROW><id>6135673</id><snippet>sys.stdout</snippet></ROW><ROW><id>6135673</id><snippet>dis</snippet></ROW><ROW><id>6135673</id><snippet>sys.stdout = dis_output_file
dis.dis(method1)
dis.dis(method2)
sys.stdout = sys.__stdout__
</snippet></ROW><ROW><id>6135673</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>6135802</id><snippet>strr = "UPDATE fileinfo SET file_name = '{0}' WHERE md5sum = '{1}'".format(rec[0], rec[1])
cr.execute(strr)
</snippet></ROW><ROW><id>6135802</id><snippet>'</snippet></ROW><ROW><id>6135827</id><snippet>for item in seqs[0]
</snippet></ROW><ROW><id>6135827</id><snippet>gen1</snippet></ROW><ROW><id>6135827</id><snippet>gen2</snippet></ROW><ROW><id>6135827</id><snippet>gen2</snippet></ROW><ROW><id>6135957</id><snippet>&gt;&gt;&gt; msvcrt.get_osfhandle(a.fileno())
1956 # valid HANDLE
</snippet></ROW><ROW><id>6135988</id><snippet>if isinstance(self._expected_methods, str):
  self._expected_methods = self._expected_methods.split("\n")
</snippet></ROW><ROW><id>6136042</id><snippet>def recApply(func, n):
    if n &gt; 1:
        rec_func = recApply(func, n - 1)
        return lambda x: func(rec_func(x))
    return func
</snippet></ROW><ROW><id>6136042</id><snippet>&gt;&gt;&gt;&gt; print recApply(lambda x: x+1,10)(100)
110
</snippet></ROW><ROW><id>6136462</id><snippet>csv.reader(input, quotechar='"', delimiter=';')</snippet></ROW><ROW><id>6136627</id><snippet>set</snippet></ROW><ROW><id>6136627</id><snippet>&gt;&gt;&gt; foo = [1,1,1,2,2,3,3,4,1,4,3,6,5,6]
&gt;&gt;&gt; set(foo)
set([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>6136627</id><snippet>set</snippet></ROW><ROW><id>6136833</id><snippet>def frob(l):
    downcount = 0
    for ele in l:
        if downcount &gt;= 2 and ele[0] == 'up' and ele[1] &lt; 0.0095:
                return True
        downcount = (downcount + 1) if ele[0] == 'down' else 0
    return False
</snippet></ROW><ROW><id>6137842</id><snippet>suggestion_list = pyenchant_function(document_filled_with_typos)
number_of_suggestions = len(suggestion_list)
MAX_SUGGESTIONS = 3 # you choose what you like
if number_of_suggestions &gt; MAX_SUGGESTIONS:
    answer = suggestion_list[0:(MAX_Suggestions-1)] # python lists are indexed to 0
else:
    answer = suggestion_list
</snippet></ROW><ROW><id>6138214</id><snippet>session.query(Foo).filter(Foo.bars1.contains(bar)|Foo.bars2.contains(bar))</snippet></ROW><ROW><id>6138214</id><snippet>SELECT "Foo".id AS "Foo_id" 
FROM "Foo", foos_to_bars1 AS foos_to_bars1_1, foos_to_bars2 AS foos_to_bars2_1 
WHERE "Foo".id = foos_to_bars1_1.foo AND ? = foos_to_bars1_1.bar OR 
"Foo".id = foos_to_bars2_1.foo AND ? = foos_to_bars2_1.bar
</snippet></ROW><ROW><id>6138214</id><snippet>secondary</snippet></ROW><ROW><id>6138214</id><snippet>contains()</snippet></ROW><ROW><id>6138214</id><snippet>any()</snippet></ROW><ROW><id>6138214</id><snippet>session.query(Foo).filter(Foo.bars1.any(id=bar.id)|Foo.bars2.any(id=bar.id))
</snippet></ROW><ROW><id>6138214</id><snippet>Bar1 = aliased(Bar)
Bar2 = aliased(Bar)
session.query(Foo).outerjoin((Bar1, Foo.bars1)).outerjoin((Bar2, Foo.bars2))\
    .filter((Bar1.id==bar.id)|(Bar2.id==bar.id))
</snippet></ROW><ROW><id>6138606</id><snippet>filetypes.python</snippet></ROW><ROW><id>6138606</id><snippet>~/.config/geany/filedefs</snippet></ROW><ROW><id>6138606</id><snippet>[build-menu]
FT_00_LB=pep8
FT_00_CM=pep8 --repeat --count "%f"
FT_00_WD=
FT_01_LB=PyLint (basic)
FT_01_CM=PYTHONPATH=${PYTHONPATH}:"%d" pylint --output-format=parseable --reports=n --errors-only "%f"
FT_01_WD=
FT_02_LB=PyLint (full)
FT_02_CM=PYTHONPATH=${PYTHONPATH}:"%d" pylint --output-format=parseable "%f"
FT_02_WD=
error_regex=^([^:]+?):([0-9]+):.+
</snippet></ROW><ROW><id>6138606</id><snippet>--output-format=pareseable</snippet></ROW><ROW><id>6138606</id><snippet>error_regex</snippet></ROW><ROW><id>6138606</id><snippet>pep8</snippet></ROW><ROW><id>6138606</id><snippet>PYTHONPATH=${PYTHONPATH}:"%d"</snippet></ROW><ROW><id>6138637</id><snippet>distutils.core.setup(**KWARGS)
</snippet></ROW><ROW><id>6138637</id><snippet>if __name__ == '__main__':
    distutils.core.setup(**KWARGS)
</snippet></ROW><ROW><id>6139458</id><snippet>import tornado.websocket

  class EchoWebSocket(tornado.websocket.WebSocketHandler):
      def open(self):
          print "WebSocket opened"

      def on_message(self, message):
          self.write_message(u"You said: " + message)

      def on_close(self):
          print "WebSocket closed"
</snippet></ROW><ROW><id>6139458</id><snippet>  var ws = new WebSocket("ws://localhost:8888/websocket");
  ws.onopen = function() {
     ws.send("Hello, world");
  };
  ws.onmessage = function (evt) {
     alert(evt.data);
  };
</snippet></ROW><ROW><id>6139933</id><snippet>python</snippet></ROW><ROW><id>6139933</id><snippet>import MySQLdb</snippet></ROW><ROW><id>6139933</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>6140013</id><snippet>import pygame, sys
from PIL import Image
pygame.init()

def displayImage(screen, px, topleft, prior):
    # ensure that the rect always has positive width, height
    x, y = topleft
    width =  pygame.mouse.get_pos()[0] - topleft[0]
    height = pygame.mouse.get_pos()[1] - topleft[1]
    if width &lt; 0:
        x += width
        width = abs(width)
    if height &lt; 0:
        y += height
        height = abs(height)

    # eliminate redundant drawing cycles (when mouse isn't moving)
    current = x, y, width, height
    if not (width and height):
        return current
    if current == prior:
        return current

    # draw transparent box and blit it onto canvas
    screen.blit(px, px.get_rect())
    im = pygame.Surface((width, height))
    im.fill((128, 128, 128))
    pygame.draw.rect(im, (32, 32, 32), im.get_rect(), 1)
    im.set_alpha(128)
    screen.blit(im, (x, y))
    pygame.display.flip()

    # return current box extents
    return (x, y, width, height)
</snippet></ROW><ROW><id>6140013</id><snippet>def setup(path):
    px = pygame.image.load(path)
    screen = pygame.display.set_mode( px.get_rect()[2:] )
    screen.blit(px, px.get_rect())
    pygame.display.flip()
    return screen, px

def mainLoop(screen, px):
    topleft = bottomright = prior = None
    n=0
    while n!=1:
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONUP:
                if not topleft:
                    topleft = event.pos
                else:
                    bottomright = event.pos
                    n=1
        if topleft:
            prior = displayImage(screen, px, topleft, prior)
    return ( topleft + bottomright )

if __name__ == "__main__":
    input_loc = 'stack.png'
    output_loc = 'out.png'
    screen, px = setup(input_loc)
    left, upper, right, lower = mainLoop(screen, px)

    # ensure output rect always has positive width, height
    if right &lt; left:
        left, right = right, left
    if lower &lt; upper:
        lower, upper = upper, lower
    im = Image.open(input_loc)
    im = im.crop(( left, upper, right, lower))
    pygame.display.quit()
    im.save(output_loc)
</snippet></ROW><ROW><id>6140521</id><snippet>from tipfyext import jinja2
</snippet></ROW><ROW><id>6140641</id><snippet>request.cookies</snippet></ROW><ROW><id>6140641</id><snippet>value=request.cookies("mycookie").value 
</snippet></ROW><ROW><id>6140641</id><snippet>request.cookies</snippet></ROW><ROW><id>6140641</id><snippet>value=request.cookies["mycookie"].value 
</snippet></ROW><ROW><id>6140660</id><snippet>import Defaults
Defaults.integral_method = somefunc
</snippet></ROW><ROW><id>6140660</id><snippet>integral_method</snippet></ROW><ROW><id>6140660</id><snippet>Defaults</snippet></ROW><ROW><id>6140660</id><snippet>somefunc</snippet></ROW><ROW><id>6141024</id><snippet>from urllib2 import urlopen, HTTPError

try:
    f = urlopen(url)
except HTTPError, e:
    print(e.read())
</snippet></ROW><ROW><id>6141244</id><snippet>item = self.listWidget.currentItem()
value = item.text()
</snippet></ROW><ROW><id>6141244</id><snippet>value = self.listWidget.currentItem().text()
</snippet></ROW><ROW><id>6141333</id><snippet>else</snippet></ROW><ROW><id>6141333</id><snippet>try</snippet></ROW><ROW><id>6141333</id><snippet>else</snippet></ROW><ROW><id>6141333</id><snippet>except</snippet></ROW><ROW><id>6141633</id><snippet>$ python -c 'import sys; print(sys.version_info[:])'
(2, 6, 5, 'final', 0)
</snippet></ROW><ROW><id>6141633</id><snippet>$?</snippet></ROW><ROW><id>6141633</id><snippet>python</snippet></ROW><ROW><id>6141658</id><snippet>putmask(x,mask,y)</snippet></ROW><ROW><id>6141658</id><snippet>x.flat[n] = y[n]</snippet></ROW><ROW><id>6141658</id><snippet>n</snippet></ROW><ROW><id>6141658</id><snippet>mask.flat[n]</snippet></ROW><ROW><id>6141658</id><snippet>In [17]: list(x.flat)
Out[17]: [21.0, 2.0, 22.0, 4.0, 23.0, 6.0, 24.0, 8.0, 25.0, 10.0]

In [18]: list(mask.flat)
Out[18]: [True, False, True, False, True, False, True, False, True, False]
</snippet></ROW><ROW><id>6141658</id><snippet>mask.flat</snippet></ROW><ROW><id>6141658</id><snippet>True</snippet></ROW><ROW><id>6141658</id><snippet>False</snippet></ROW><ROW><id>6141658</id><snippet>x.flat</snippet></ROW><ROW><id>6141658</id><snippet>y</snippet></ROW><ROW><id>6141658</id><snippet>y</snippet></ROW><ROW><id>6141658</id><snippet>x</snippet></ROW><ROW><id>6141658</id><snippet>y</snippet></ROW><ROW><id>6141658</id><snippet>x</snippet></ROW><ROW><id>6141658</id><snippet>putmask(x,mask,y)</snippet></ROW><ROW><id>6141658</id><snippet>x</snippet></ROW><ROW><id>6141658</id><snippet>mask</snippet></ROW><ROW><id>6141658</id><snippet>x[mask]=y
</snippet></ROW><ROW><id>6141658</id><snippet>import numpy as np
x = np.array([[  1.,   2.],
        [  3.,   4.],
        [  5.,   6.],
        [  7.,   8.],
        [  9.,  10.]])
mask = np.array([[ True, False],
           [ True, False],
           [ True, False],
           [ True, False],
           [ True, False]])
y = np.array([ 21.,  22.,  23.,  24.,  25.])
x[mask]=y
print(x)
# [[ 21.   2.]
#  [ 22.   4.]
#  [ 23.   6.]
#  [ 24.   8.]
#  [ 25.  10.]]
</snippet></ROW><ROW><id>6141929</id><snippet>array</snippet></ROW><ROW><id>6141929</id><snippet>list</snippet></ROW><ROW><id>6141929</id><snippet>&gt;&gt;&gt; class Foo:
...  pass
... 
&gt;&gt;&gt; x = numpy.array([Foo(), Foo()])
&gt;&gt;&gt; x.append(Foo())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'numpy.ndarray' object has no attribute 'append'
</snippet></ROW><ROW><id>6141929</id><snippet>numpy.concatenate</snippet></ROW><ROW><id>6141929</id><snippet>list</snippet></ROW><ROW><id>6141929</id><snippet>object</snippet></ROW><ROW><id>6141929</id><snippet>dtype=object</snippet></ROW><ROW><id>6141929</id><snippet>&gt;&gt;&gt; numpy.array(['hello', 'world!'])
array(['hello', 'world!'], 
      dtype='|S6')
&gt;&gt;&gt; numpy.array(['hello', 'world!'], dtype=object)
array(['hello', 'world!'], dtype=object)
</snippet></ROW><ROW><id>6142363</id><snippet># note: untested example. may contain errors
import os
import fnmatch

# list of known dirs and expected output for each script
rc_gold = { 
    "/base/path/some/dir/path": "200_REVISION",
    "/base/path/another/dir/path": "400_FAILURE",
    # ...
}

# recursively search for scripts in /base/path
for path, dirs, files in os.walk("/base/path"):
    if path not in rc_gold:
        print "unknown directory %s. Skipping"
        # or however you wish to handle unexpected dirs
    else:
        expected_rc = rc_gold[path]              
        for f in files: 
            # only deal with someprefix_*.sh files
            if fnmatch.fnmatch(f, "someprefix_*.sh")
                target = os.path.join(path, f)
                rc = run_your_script(target)
                if rc == expected_rc:
                    print "%s: OK" % (target,)
                else:
                    print "%s : FAIL (expected %s, got %s)" % (target, expected_rc, rc)
</snippet></ROW><ROW><id>6142665</id><snippet>title = "Test title " + str(i)
author = "wliao"
summary = "this is a test " + str(i)
content = "this is the content of the article"

article = models.model.Article(title=title, author=author,
                               summary=summary, content=content)
</snippet></ROW><ROW><id>6142715</id><snippet>f =  sum</snippet></ROW><ROW><id>6142715</id><snippet>In [32]: np.bincount(ind,A)
Out[32]: array([ 10.,   7.,  14.])
</snippet></ROW><ROW><id>6142715</id><snippet>f</snippet></ROW><ROW><id>6142715</id><snippet>len(A) x len(A)</snippet></ROW><ROW><id>6142715</id><snippet>B</snippet></ROW><ROW><id>6142715</id><snippet>B=np.zeros((len(A),max(ind)+1))
</snippet></ROW><ROW><id>6142715</id><snippet>B</snippet></ROW><ROW><id>6142715</id><snippet>A</snippet></ROW><ROW><id>6142715</id><snippet>B</snippet></ROW><ROW><id>6142715</id><snippet>A</snippet></ROW><ROW><id>6142715</id><snippet>ind == 0</snippet></ROW><ROW><id>6142715</id><snippet>B</snippet></ROW><ROW><id>6142715</id><snippet>A</snippet></ROW><ROW><id>6142715</id><snippet>ind == 1</snippet></ROW><ROW><id>6142715</id><snippet>B[zip(*enumerate(ind))]=A
</snippet></ROW><ROW><id>6142715</id><snippet>[[ 6.  0.  0.]
 [ 4.  0.  0.]
 [ 0.  0.  5.]
 [ 0.  7.  0.]
 [ 0.  0.  9.]]
</snippet></ROW><ROW><id>6142715</id><snippet>f</snippet></ROW><ROW><id>6142715</id><snippet>B</snippet></ROW><ROW><id>6142715</id><snippet>import numpy as np

A = np.array([ 6, 4, 5, 7, 9 ])
ind = np.array([ 0, 0, 2, 1, 2 ])

N=100
M=10
A2 = np.array([np.random.randint(M) for i in range(N)])
ind2 = np.array([np.random.randint(M) for i in range(N)])

def use_extra_axis(A,ind,f):
    B=np.zeros((len(A),max(ind)+1))
    B[zip(*enumerate(ind))]=A
    return f(B)

def use_loop(A,ind,f):
    n=max(ind)+1
    B=np.empty(n)
    for i in range(n):
        B[i]=f(A[ind==i])
    return B

def fmax(arr):
    return np.max(arr,axis=0)

if __name__=='__main__':
    print(use_extra_axis(A,ind,fmax))
    print(use_loop(A,ind,fmax))
</snippet></ROW><ROW><id>6142715</id><snippet>M</snippet></ROW><ROW><id>6142715</id><snippet>N</snippet></ROW><ROW><id>6142715</id><snippet>% python -mtimeit -s'import test,numpy' 'test.use_extra_axis(test.A2,test.ind2,test.fmax)'
10000 loops, best of 3: 162 usec per loop

% python -mtimeit -s'import test,numpy' 'test.use_loop(test.A2,test.ind2,test.fmax)'
1000 loops, best of 3: 222 usec per loop
</snippet></ROW><ROW><id>6142715</id><snippet>% python -mtimeit -s'import test,numpy' 'test.use_extra_axis(test.A2,test.ind2,test.fmax)'
100 loops, best of 3: 13.9 msec per loop
% python -mtimeit -s'import test,numpy' 'test.use_loop(test.A2,test.ind2,test.fmax)'
100 loops, best of 3: 4.4 msec per loop
</snippet></ROW><ROW><id>6142715</id><snippet>def use_sparse_extra_axis(A,ind,f):
    B=scipy.sparse.coo_matrix((A, (range(len(A)), ind))).toarray()
    return f(B)

def use_sparse(A,ind,f):
    return [f(v) for v in scipy.sparse.coo_matrix((A, (ind, range(len(A))))).tolil().data]
</snippet></ROW><ROW><id>6142715</id><snippet>N</snippet></ROW><ROW><id>6142715</id><snippet>M</snippet></ROW><ROW><id>6142715</id><snippet>N=1000, M=100
·───────────────────────·────────────────────·
│ use_sparse_extra_axis │ 1.15 msec per loop │
│        use_extra_axis │ 2.79 msec per loop │
│              use_loop │ 3.47 msec per loop │
│            use_sparse │ 5.25 msec per loop │
·───────────────────────·────────────────────·

N=100000, M=10
·───────────────────────·────────────────────·
│ use_sparse_extra_axis │ 35.6 msec per loop │
│              use_loop │ 43.3 msec per loop │
│            use_sparse │ 91.5 msec per loop │
│        use_extra_axis │  150 msec per loop │
·───────────────────────·────────────────────·

N=100000, M=50
·───────────────────────·────────────────────·
│            use_sparse │ 94.1 msec per loop │
│              use_loop │  107 msec per loop │
│ use_sparse_extra_axis │  170 msec per loop │
│        use_extra_axis │  272 msec per loop │
·───────────────────────·────────────────────·

N=10000, M=50
·───────────────────────·────────────────────·
│              use_loop │ 10.9 msec per loop │
│            use_sparse │ 11.7 msec per loop │
│ use_sparse_extra_axis │ 15.1 msec per loop │
│        use_extra_axis │ 25.4 msec per loop │
·───────────────────────·────────────────────·
</snippet></ROW><ROW><id>6142805</id><snippet>tuple_ = (a,b,c)
"\n".join( foo(i) for i in tuple_ )
</snippet></ROW><ROW><id>6142805</id><snippet>tuple_ = (a,b,c)
"\n".join( str(foo(i)) for i in tuple_ )
</snippet></ROW><ROW><id>6142805</id><snippet>tuple_ = (a,b,c)
"\n".join([ str(foo(i)) for i in tuple_ ])
</snippet></ROW><ROW><id>6142889</id><snippet>os.environ</snippet></ROW><ROW><id>6142889</id><snippet>os.environ['var'] = "foo_bar"
subprocess.call(['echo $var'], shell=True)
</snippet></ROW><ROW><id>6142991</id><snippet>class myClass():
  def __init__(self, *args):
    # something here that actually uses the arguments.

data = [['a', 'b'], ['c', 'd']]

objects = [myClass(*vals) for vals in data]
</snippet></ROW><ROW><id>6143427</id><snippet>import csv
import collections

with open('foo.csv','rb') as f:
    r = csv.reader(f)
    od = collections.OrderedDict(r)
</snippet></ROW><ROW><id>6143427</id><snippet>key, value1, value2, value3</snippet></ROW><ROW><id>6143427</id><snippet>with open('foo.csv','rb') as f:
    r = csv.reader(f)
    od = collections.OrderedDict((row[0], row[1:]) for row in r)
</snippet></ROW><ROW><id>6143562</id><snippet>x = (datetime.datetime(2010, 11, 25, 14, 30, 47),)
</snippet></ROW><ROW><id>6143562</id><snippet>dt = x[0]
</snippet></ROW><ROW><id>6143562</id><snippet>dt.year
</snippet></ROW><ROW><id>6143744</id><snippet>__init__</snippet></ROW><ROW><id>6143744</id><snippet>__init__</snippet></ROW><ROW><id>6143744</id><snippet>def __init__(self):
    super(Score, self).__init__()
</snippet></ROW><ROW><id>6143744</id><snippet>super()</snippet></ROW><ROW><id>6143744</id><snippet>super()</snippet></ROW><ROW><id>6143744</id><snippet>Play</snippet></ROW><ROW><id>6143744</id><snippet>object</snippet></ROW><ROW><id>6143744</id><snippet>class Play(object)
</snippet></ROW><ROW><id>6143744</id><snippet>def __init__(self):
    Play.__init__(self)
</snippet></ROW><ROW><id>6143780</id><snippet>&lt;text id="foo" xml:space="preserve"&gt;foo &lt;/text&gt;
</snippet></ROW><ROW><id>6144031</id><snippet>exec</snippet></ROW><ROW><id>6144031</id><snippet>def foo():
    print bar

exec foo.func_code in {"bar": "baz"}
</snippet></ROW><ROW><id>6144031</id><snippet>foo</snippet></ROW><ROW><id>6144031</id><snippet>def foo():
    import os
    os.system("rm -rf /")
</snippet></ROW><ROW><id>6144031</id><snippet>os</snippet></ROW><ROW><id>6144257</id><snippet>temp1 = set([])
temp2 = set([])

dict1 = dict()
dict2 = dict()

for key, value in zip([tuple(l[1:3]) for l in list1], list1):
    dict1.setdefault(key, list()).append(value)

for key, value in zip([tuple(l[1:3]) for l in list2], list2):
    dict2.setdefault(key, list()).append(value)

for key in dict1:
    if key in dict2:
        temp1.update(dict1[key])
        temp2.update(dict2[key])
</snippet></ROW><ROW><id>6144458</id><snippet>\W+</snippet></ROW><ROW><id>6144458</id><snippet>+</snippet></ROW><ROW><id>6144458</id><snippet>&gt;&gt;&gt; re.sub(r'\[.*?\]|\(.*?\)|\W', ' ', 'T.N.T. (live) [nyc]')
'T N T     '
</snippet></ROW><ROW><id>6144468</id><snippet>request.environ['REQUEST_METHOD'] = 'something'
</snippet></ROW><ROW><id>6144468</id><snippet>request.method</snippet></ROW><ROW><id>6144493</id><snippet>let lines = 
  File.ReadAllLines("tclscript.do")
  |&gt; Seq.map (fun line -&gt;
      let newLine = line.Replace("{", "{{").Replace("}", "}}")
      // Implement additional string processing here
      newLine )

File.WriteAllLines("tclscript.txt", lines)
</snippet></ROW><ROW><id>6144493</id><snippet>ReadAllLines</snippet></ROW><ROW><id>6144493</id><snippet>Seq.map</snippet></ROW><ROW><id>6144493</id><snippet>WriteAllLines</snippet></ROW><ROW><id>6145068</id><snippet>def generate_lattice(image_shape, lattice_vectors) :
    center_pix = numpy.array(image_shape) // 2
    # Get the lower limit on the cell size.
    dx_cell = max(abs(lattice_vectors[0][0]), abs(lattice_vectors[1][0]))
    dy_cell = max(abs(lattice_vectors[0][1]), abs(lattice_vectors[1][1]))
    # Get an over estimate of how many cells across and up.
    nx = image_shape[0]//dx_cell
    ny = image_shape[1]//dy_cell
    # Generate a square lattice, with too many points.
    # Here I generate a factor of 4 more points than I need, which ensures 
    # coverage for highly sheared lattices.  If your lattice is not highly
    # sheared, than you can generate fewer points.
    x_sq = np.arange(-nx, nx, dtype=float)
    y_sq = np.arange(-ny, nx, dtype=float)
    x_sq.shape = x_sq.shape + (1,)
    y_sq.shape = (1,) + y_sq.shape
    # Now shear the whole thing using the lattice vectors
    x_lattice = lattice_vectors[0][0]*x_sq + lattice_vectors[1][0]*y_sq
    y_lattice = lattice_vectors[0][1]*x_sq + lattice_vectors[1][1]*y_sq
    # Trim to fit in box.
    mask = ((x_lattice &lt; image_shape[0]/2.0)
             &amp; (x_lattice &gt; -image_shape[0]/2.0))
    mask = mask &amp; ((y_lattice &lt; image_shape[1]/2.0)
                    &amp; (y_lattice &gt; -image_shape[1]/2.0))
    x_lattice = x_lattice[mask]
    y_lattice = y_lattice[mask]
    # Translate to the centre pix.
    x_lattice += center_pix[0]
    y_lattice += center_pix[1]
    # Make output compatible with original version.
    out = np.empty((len(x_lattice), 2), dtype=float)
    out[:, 0] = y_lattice
    out[:, 1] = x_lattice
    return out
</snippet></ROW><ROW><id>6145273</id><snippet>code</snippet></ROW><ROW><id>6145273</id><snippet>ffi_call()</snippet></ROW><ROW><id>6145273</id><snippet>ffi_call_unix64()</snippet></ROW><ROW><id>6145273</id><snippet>%r11</snippet></ROW><ROW><id>6145273</id><snippet>57   movq    %r8, %r11               /* Save a copy of the target fn.
</snippet></ROW><ROW><id>6145273</id><snippet>%r11</snippet></ROW><ROW><id>6145273</id><snippet>(gdb) x/5b $r11
0x7ffff7f186d0: -108    24      -122    0       0
</snippet></ROW><ROW><id>6145273</id><snippet>raw = b"\x55\x89\xe5\x5d\xc3"
code = create_string_buffer(raw)
addr = addressof(code)
</snippet></ROW><ROW><id>6145273</id><snippet>(gdb) x/5b $r11
0x7ffff7f186d0: 0x55    0x89    0xe5    0x5d    0xc3
</snippet></ROW><ROW><id>6145384</id><snippet>[ord(i) for i in 'some string']
</snippet></ROW><ROW><id>6145384</id><snippet>(ord(i) for i in 'some string')
</snippet></ROW><ROW><id>6145615</id><snippet>liori@marvin:~$ zip34() { while read word3 &lt;&amp;3; do read word4 &lt;&amp;4 ; echo $word3 $word4 ; done }
liori@marvin:~$ zip34 3&lt;a 4&lt;b
alpha one
beta two
gamma three
delta four
epsilon five
liori@marvin:~$
</snippet></ROW><ROW><id>6145615</id><snippet>join</snippet></ROW><ROW><id>6145615</id><snippet>liori:~% cat a
alpha
beta
gamma
delta
epsilon
liori:~% cat b
one
two
three
four
five
liori:~% join =(cat -n a) =(cat -n b)
1 alpha one
2 beta two
3 gamma three
4 delta four
5 epsilon five
</snippet></ROW><ROW><id>6145615</id><snippet>=()</snippet></ROW><ROW><id>6145615</id><snippet>zsh</snippet></ROW><ROW><id>6145799</id><snippet>examples\08-physics\07-graph</snippet></ROW><ROW><id>6145799</id><snippet>nodebox.graphics.physics.Graph</snippet></ROW><ROW><id>6145799</id><snippet>nodebox</snippet></ROW><ROW><id>6145799</id><snippet>pyglet</snippet></ROW><ROW><id>6145799</id><snippet>site-packages</snippet></ROW><ROW><id>6145799</id><snippet>07-graph.py</snippet></ROW><ROW><id>6145824</id><snippet>with open(file_path, 'r') as fh:
  for line in fh:
    process(line)
</snippet></ROW><ROW><id>6146351</id><snippet>import threading
import time

class GpsPoller(threading.Thread):

   def __init__(self)
       threading.Thread.__init__(self)
       self.session = gps(mode=WATCH_ENABLE)
       self.current_value = None

   def get_current_value(self):
       return self.current_value

   def run(self):
       try:
            while True:
                self.current_value = session.next()
                time.sleep(0.2) # tune this, you might not get values that quickly
       except StopIteration:
            pass

if __name__ == '__main__':

   gpsp = GpsPoller()
   gpsp.start()
   # gpsp now polls every .2 seconds for new data, storing it in self.current_value
   while 1:
       # In the main thread, every 5 seconds print the current value
       time.sleep(5)
       print gpsp.get_current_value() 
</snippet></ROW><ROW><id>6146459</id><snippet>Data = ####</snippet></ROW><ROW><id>6146459</id><snippet>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;regex&gt;
#include &lt;fstream&gt;

int main(int argc, char **argv) { 
    if (argc &lt; 2) {
        std::cerr &lt;&lt; "Usage: searched &lt;filename&gt;\n";
        return 1;
    }

    std::ifstream in(argv[1]);
    std::string line;
    std::regex pat("Data = [0-9]+");

    while (std::getline(line, in))
        if (std::regex_search(line, pat))
            std::cout &lt;&lt; line &lt;&lt; "\n";
    return 0;
}
</snippet></ROW><ROW><id>6146459</id><snippet>Data = #</snippet></ROW><ROW><id>6146459</id><snippet>regex_search</snippet></ROW><ROW><id>6146459</id><snippet>regex_match</snippet></ROW><ROW><id>6146459</id><snippet>std::tr1::regex</snippet></ROW><ROW><id>6146553</id><snippet>words_text = codecs.open(filename, 'r', 'utf-8-sig')
</snippet></ROW><ROW><id>6146553</id><snippet>user_reply = raw_input('%s: ' % (gr_en_dict[key])).decode(sys.stdout.encoding)
</snippet></ROW><ROW><id>6146553</id><snippet>user_reply = raw_input('%s: ' % (gr_en_dict[key])).decode(sys.stdin.encoding)
</snippet></ROW><ROW><id>6146553</id><snippet>print</snippet></ROW><ROW><id>6146553</id><snippet>C:\&gt;chcp
Active code page: 437

C:\&gt;python
Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp437'
&gt;&gt;&gt; print 'η αγελάδα - cow'
? α?ε??δα - cow
</snippet></ROW><ROW><id>6146553</id><snippet>C:\&gt;chcp 869
Active code page: 869

C:\&gt;python
Python 2.7.1 (r271:86832, Nov 27 2010, 18:30:46) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp869'
&gt;&gt;&gt; print 'η αγελάδα - cow'
η αγελάδα - cow
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6146871</id><snippet>legend(numpoints=1)
</snippet></ROW><ROW><id>6146871</id><snippet>legend.numpoints     : 1      # the number of points in the legend line
</snippet></ROW><ROW><id>6146908</id><snippet>fcntl</snippet></ROW><ROW><id>6146908</id><snippet>NameError</snippet></ROW><ROW><id>6146908</id><snippet>import errno

try:
    fcntl.lock(...)
except IOError, e:
    if e.errno == errno.EAGAIN:
        sys.stderr.write(...)
        sys.exit(-1)
    raise
</snippet></ROW><ROW><id>6147100</id><snippet>del list_item[4]
del dictionary["alpha"]
</snippet></ROW><ROW><id>6147100</id><snippet>   del foo
   foo = None
</snippet></ROW><ROW><id>6147100</id><snippet>del foo</snippet></ROW><ROW><id>6147100</id><snippet>foo = None</snippet></ROW><ROW><id>6147100</id><snippet>foo = None</snippet></ROW><ROW><id>6147100</id><snippet>del foo</snippet></ROW><ROW><id>6147103</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>6147103</id><snippet>/opt/local/bin/python2.7
</snippet></ROW><ROW><id>6147154</id><snippet>from matplotlib import pyplot as plt
from numpy import arange, sin, cos

xx = arange(100)
cut = (xx &gt; 0) &amp; (xx % 17 == 0)
y1 = sin(xx)
y2 = (xx**2) % 2.0+cos(xx+0.5)

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax1.plot(xx, y1, c="blue",zorder=1)
ax1.scatter(xx[cut], y1[cut], c="red",zorder=2)
ax2 = fig.add_subplot(212)
ax2.plot(xx, y2, c="green",zorder=1)
ax2.scatter(xx[cut], y2[cut], c="red",zorder=2)

for x in xx[cut]:
    ax1.axvline(x=x,ymin=-1.2,ymax=1,c="red",linewidth=2,zorder=0, clip_on=False)
    ax2.axvline(x=x,ymin=0,ymax=1.2,c="red",linewidth=2, zorder=0,clip_on=False)

plt.draw()
fig.savefig('pic.png')
</snippet></ROW><ROW><id>6147417</id><snippet>select</snippet></ROW><ROW><id>6147417</id><snippet>IBESNA~US</snippet></ROW><ROW><id>6147417</id><snippet>br.select('option[value="IBESNA~US"]')</snippet></ROW><ROW><id>6147430</id><snippet>PATH</snippet></ROW><ROW><id>6147430</id><snippet>C:\jdk-install\;C:\python-install</snippet></ROW><ROW><id>6147553</id><snippet>testproject</snippet></ROW><ROW><id>6147553</id><snippet>sys.path</snippet></ROW><ROW><id>6147553</id><snippet>/foo/bar/testproject/models.py</snippet></ROW><ROW><id>6147553</id><snippet>/foo/bar</snippet></ROW><ROW><id>6147553</id><snippet>sys.path</snippet></ROW><ROW><id>6147553</id><snippet>testproject</snippet></ROW><ROW><id>6147553</id><snippet>__init__.py</snippet></ROW><ROW><id>6147560</id><snippet>facebook</snippet></ROW><ROW><id>6147589</id><snippet>[A-Z0-9&amp;][a-zA-Z0-9]*[\s,:-]*</snippet></ROW><ROW><id>6147589</id><snippet>+</snippet></ROW><ROW><id>6147589</id><snippet>'Dr.'</snippet></ROW><ROW><id>6147589</id><snippet>'Dr'</snippet></ROW><ROW><id>6147589</id><snippet>{0}</snippet></ROW><ROW><id>6147589</id><snippet>TITLE_RE = re.compile(r"""(?P&lt;title&gt;({0}|[A-Z0-9&amp;][a-zA-Z0-9]*[\s,:-]*)+\s*)""".format(non_capped_words_re))
</snippet></ROW><ROW><id>6147589</id><snippet>&gt;&gt;&gt; TITLE_RE.findall('Dr. Joe Smith');
[('Dr. Joe Smith', 'Smith')]
</snippet></ROW><ROW><id>6147589</id><snippet>[\s:,]+</snippet></ROW><ROW><id>6147589</id><snippet>'|'.join(IRREGULAR_WORDS)
TITLE_RE = re.compile(r"""(?P&lt;title&gt;((?:{0})[\s:,]+|[A-Z0-9&amp;][a-zA-Z0-9]*[\s,:-]*)+\s*)""".format(non_capped_words_re))
</snippet></ROW><ROW><id>6147836</id><snippet>django-socialregistration</snippet></ROW><ROW><id>6148109</id><snippet>decoded[0]['c']</snippet></ROW><ROW><id>6148109</id><snippet>data = {u'a': u'A', u'c': 3, u'b': [2, 4]}</snippet></ROW><ROW><id>6148315</id><snippet>&gt;&gt;&gt; x = [1,2,3,4]
&gt;&gt;&gt; y = [3,5,7,9] 
&gt;&gt;&gt; 
&gt;&gt;&gt; m,b = polyfit(x, y, 1)
&gt;&gt;&gt; m
2.0000000000000009
&gt;&gt;&gt; b
0.99999999999999833
</snippet></ROW><ROW><id>6148315</id><snippet>x = [1,2,3,4]
y = [3,5,7,10] # 10, not 9, so the fit isn't perfect

fit = polyfit(x,y,1)
fit_fn = poly1d(fit) # fit_fn is now a function which takes in x and returns an estimate for y

plot(x,y, 'yo', x, fit_fn(x), '--k')
xlim(0, 5)
ylim(0, 12)
</snippet></ROW><ROW><id>6148636</id><snippet>for item in list[2:]:
    # do stuff
</snippet></ROW><ROW><id>6148668</id><snippet>&lt;pre&gt;&lt;/pre&gt;</snippet></ROW><ROW><id>6148668</id><snippet>{% block content %}
     &lt;pre&gt;{{ data1 }}&lt;/pre&gt;
{% block content %}
</snippet></ROW><ROW><id>6148668</id><snippet>data_file = open('/var/log/secure', 'r') 

variables = RequestContext(request, {
        'data_file': data_file,
        'var2': 'test'
})
return render_to_response('logfiles.html', variables)
</snippet></ROW><ROW><id>6148668</id><snippet>{% block content %}
    &lt;pre&gt;{{ data_file.read }}&lt;/pre&gt; 
{% endblock %}
</snippet></ROW><ROW><id>6149026</id><snippet>&gt;&gt;&gt; '%.2f' % 1.234
'1.23'
&gt;&gt;&gt; '%.2f' % 5.0
'5.00'
</snippet></ROW><ROW><id>6149103</id><snippet>im.save('/var/www/_uploads/myphoto.jpg', 'JPEG')
</snippet></ROW><ROW><id>6149103</id><snippet>im.save(settings.UPLOAD_DIRECTORY + 'myphoto.jpg', 'JPEG')
</snippet></ROW><ROW><id>6149371</id><snippet>string = "how to dye my brunet hair to blonde? "
list = ['how', 'how to',"bananas"]
list.sort(key=len,reverse=True)  # sort by decreasing length

for sample in string, "bananas taste swell", "how do you do?":
  for beginning in list:
    if sample.startswith(beginning):
      print sample[len(beginning):]
      break
  else:   # None of the beginnings matched
    print sample
</snippet></ROW><ROW><id>6149373</id><snippet>pylab.title('Minimal Energy Configuration of %s Charges on Disc W = %s'%(N, W))
</snippet></ROW><ROW><id>6149487</id><snippet>TarFile.extractfile()</snippet></ROW><ROW><id>6149648</id><snippet>&gt;&gt;&gt; text = 'sassy'
&gt;&gt;&gt; for (regexp,subst) in [ (r'(?&lt;=.)s', '5'),(r'^s', '$') ]:
...   text = re.sub(regexp,subst,text)
... 
&gt;&gt;&gt; text
'$a55y'
</snippet></ROW><ROW><id>6149918</id><snippet>from django.db import connections
cursor = connections['my_db_alias'].cursor()
</snippet></ROW><ROW><id>6149918</id><snippet>my_db_alias</snippet></ROW><ROW><id>6150052</id><snippet>Py_eval_input</snippet></ROW><ROW><id>6150052</id><snippet>Py_single_input</snippet></ROW><ROW><id>6150052</id><snippet>eval</snippet></ROW><ROW><id>6150052</id><snippet>exec</snippet></ROW><ROW><id>6150052</id><snippet>eval</snippet></ROW><ROW><id>6150052</id><snippet>exec</snippet></ROW><ROW><id>6150052</id><snippet>exec</snippet></ROW><ROW><id>6150231</id><snippet>extends=
http://good-py.appspot.com/release/dexterity/1.0?plone=3.3.5
</snippet></ROW><ROW><id>6150349</id><snippet>from bisect import bisect_left

class discrete_cdf:
    def __init__(data):
        self._data = data # must be sorted
        self._data_len = float(len(data))

    def __call__(point):
        return (len(self._data[:bisect_left(self._data, point)]) / 
                self._data_len)
</snippet></ROW><ROW><id>6150349</id><snippet>from scipy.stats import norm
import matplotlib.pyplot as plt

cdf = discrete_cdf(your_data)
xvalues = range(0, max(your_data))
yvalues = [cdf(point) for point in xvalues]
plt.plot(xvalues, yvalues)
</snippet></ROW><ROW><id>6150349</id><snippet>arange</snippet></ROW><ROW><id>6150447</id><snippet>print "Content-type: text/html; image/jpeg"
</snippet></ROW><ROW><id>6150447</id><snippet>print "Content-type: text/html"
</snippet></ROW><ROW><id>6150447</id><snippet>print "Content-type: text/html; charset=utf-8"
</snippet></ROW><ROW><id>6150447</id><snippet>print """&lt;html&gt; 
</snippet></ROW><ROW><id>6150447</id><snippet>&lt;img src="cat.jpeg" alt="cat" width="304" height="228"/&gt; 
</snippet></ROW><ROW><id>6150447</id><snippet>""</snippet></ROW><ROW><id>6150463</id><snippet>In [1]: line = '-5.487648393E-01-5.476736110E-01-5.447693831E-01-5.405765060E-01-5.353610408E-01'

In [2]: [float(line[i:i+16]) for i in xrange(0, len(line), 16)]
Out[2]: 
[-0.54876483929999997,
 -0.547673611,
 -0.5447693831,
 -0.54057650599999996,
 -0.53536104080000002]
</snippet></ROW><ROW><id>6150463</id><snippet>str.rstrip</snippet></ROW><ROW><id>6150463</id><snippet>n</snippet></ROW><ROW><id>6150463</id><snippet>n = 33
arr = []
for line in open('data.txt'):
  line = line.rstrip('\n')
  arr.extend(float(line[i:i+16]) for i in xrange(0, len(line), 16))
  if len(arr) &gt;= n:
    print arr[:n]
    arr = arr[n:]
</snippet></ROW><ROW><id>6150952</id><snippet>PyImport_ImportModule</snippet></ROW><ROW><id>6150952</id><snippet>globals</snippet></ROW><ROW><id>6150952</id><snippet>random</snippet></ROW><ROW><id>6150952</id><snippet>PyMapping_SetItemString(globals, "random", PyImport_ImportModule("random"));
</snippet></ROW><ROW><id>6151079</id><snippet>count</snippet></ROW><ROW><id>6151079</id><snippet>&gt;&gt;&gt; list
[('Car', 'Cadillac','Blue'), ('Car', 'Aston Martin','Black'), ('Car', 'Cadillac', 'Blue'), ...]
&gt;&gt;&gt; list.count(('Car', 'Cadillac', 'Blue'))
1
</snippet></ROW><ROW><id>6151329</id><snippet>import numpy as np
from itertools import count

data = [line.split() for line in inputfile.readlines()]
rows = dict(zip(sorted(set(line[0] for line in data)), count()))
cols = dict(zip(sorted(set(line[1] for line in data)), count()))
array = np.zeros((len(rows), len(cols)))

for row, col, val in data:
    index = (rows[row], cols[col])
    array[index] = val
</snippet></ROW><ROW><id>6151329</id><snippet>rows_reverse = dict((v, k) for k, v in rows)
cols_reverse = dict((v, k) for k, v in cols)
</snippet></ROW><ROW><id>6151514</id><snippet>import myapp.models</snippet></ROW><ROW><id>6151514</id><snippet>from django.conf import settings</snippet></ROW><ROW><id>6151658</id><snippet>/Developer/SDKs/MacOSX10.6.sdk/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h</snippet></ROW><ROW><id>6151658</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.6/include/python2.6/Python.h</snippet></ROW><ROW><id>6152171</id><snippet>import wx
from wx import ImageFromStream, BitmapFromImage, EmptyIcon
import cStringIO, zlib

# ================================ ICON ======================================
def getData():
    return zlib.decompress(
'x\xda\x01\x97\x03h\xfc\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x03NIDAT8\x8dm\xd2ML\x9bu\x00\xc7\xf1\xef\xf3\
&lt;\xed\xda&gt;&lt;\xa3@\xcb\x8a\x0cp\xac8\x15\x87\x89/ \x11\xd1d&amp;:5&amp;#n\xc9\\\xa2\
\xc6\xc3b\xe2\xd1y0Y2\xa3q^\xcc\xb8\x9a\xb9\xf9rQc\xc6\x0es\xa4\xd1\x91\xe98\
\xc8\x96\xb98H\xc3\x8b\xc0\xc6\x00\x91\xd2\xb2\xa7}\xda\xe7\xa5\xcf\xd3\xf6\
\xf9{0\xa2\x07\xbf\xf7_\xf29\xfc$\x00\xf1&gt;\xb2\xd9\xc7\tI0$\xc0\xd5d\x06\xa5\
\x17q\xf9O\xa5\x0b$$\x85KB\xa2\xec\xcb\xbc\x1e}\x81\xdf\x01$q\x9a`&gt;\xce\xc9`\
\xc7\x91#\xa1\xce\xa3;\xed\xdbg\xb3s\x19c\xe1\x9cz\xbe*A\x0f\x80\x80\xf4A\
\xeb\xb0\xfcPG\xa2;\x10\x8aI\xe5\xd9\x93\x8bB\xe6`l\x88U)\xf3-\xc7\xc3\xbb_{\
;r\xef\xe1Vci\xa4\xb0\xbc:\x17\xb8\xdczQ\xd3B5"A\x1f\x00\xa7"\xe39\x16\xfb\
\xd6_\xb1wu\x1f@\xa9\x15-k\xe6\xd4j\xa2D\xbf\xec\x95\x91\xe5PGX_\x18),.\xcei\
W\xdb\xbf\xd3:\xb7{49\x0e\xeem\x1dkAG+Z\xb4l\xdf\xc6o-\xc3\xea\x9fK\xbf\x84\
\xe5\xa6\xfe&amp;\xa1&gt;\xa8\xad)\xec\x96n}\xc6`E\xa8g7\x95d\xdbD\xf2\x82\xda\xae\
\x06\x08\xd95\x1e\xeej\xa2\xa1^F \xa1\x1b5\xae\xcf\xe5\xa8D\x14\xea\xf4\xf3\
\xdco\x9es\xb7\x9933\xe1Z\xe9U\t\xe0\xd8\xe7\x17?\t4\xecz7\x99\xd0hp\x05\x87\
\xf6u\x927\x0c6-\x87\xf6\xd6\x16\x00\xaa\x02\xbeN\xdd\xc2\xd7\x04\x99\xec:9K\
\xf9\xf8\xd37\x07\x8e\xcb\x00\x99\xca=\xbd\xbe\x00\xbf\xe4\xb1wO\x0c\xbb*\
\x08\x06\x83\x8c\xfd\xf8\x03E\xc3\xa0\xe2\xba\\\x1a\xfb\x99\xee=q\x8c\xac\
\x83#7RtC\x03\x00\x01\x80r\xd9\xea\xa9z2\x86\xeb\x13\x8bEpk\x82:U\xe5\x8f\
\x95\x15\xc6~\x1a\'=5\xc9\xb3\xcf\xef\xa7q\x87Jn\xd3A4\x04)\x97\xad\x1e\x00\
\x19\xc0\xb3-,\xbb\x82\xe3\xf9\xb85\xa8\xf8\x905J\xd4i\x1a\xe9\xa9I^:0\xc4#\
\xbd}\xb8U\xa8x&gt;\x96]\xc1\xb3-\xb6\x04^\xd9N\x17K\x91gv\xc6\x03,el\xeek\x8b\
\x82\x1c\xe6\xd1\xc7\xfby\xa0g/j\xb4\x1e\xd3\x85\xd5\x8cE0"\x91+\xd9xe;\xfd\
\xaf\xc0\xb1\xae\x14\r\x03\xbd\xecr\xf5\xe6\x06\xc1\x10\xd4\x85\x83&lt;5\xf8$\
\xf1\xc6zB\x80\x16\x86_of\xf1\xf0(\x1a\x06\x9ec]\xd9\x12\xb8\xb63\xea:\xe6\
\xa1\xd9\x9a\xd2-\xb7U\xf9bD\xf0\\o\x82\xaeD\x1d\x08X\xc9Z\x8c^\xcbP4\xd6\
\x99\xdf\xb00\xf3k3\x08e\x14@\xfa\xe7\xeb}GO\xbd\xf5Xr\xc7\xf0BAS[\xe3\x1a\
\xb1P\x08\xc5\x97\xa9\xf9\x82\x8aT\xc5\xf0\\\xaa\xd5*\xaa\xb8k\xa7\xefl\xbes\
\xfd\xcc\xb1\xd3[\x02\x80\xe17\x9e\x98\x8fF\xa3jv3_;12\xaf\xccJ*\xb2\x12\x06\
\xc0\xaf\x95iV+\xbc\xf7rR\xc8rcD\xa2kv\xe0\xcc\xdf;\x19 \x95J5\x17\n\x85\xef\
\xc3\xe10f\xa9`\x98\xf9;\x1f\xda\xb9\xe9qk\xe3\x86nm\xdc\xd0\xed\xdc\xf4\xf8\
\xf2\xf2\xfc\x07\x85B\xdel\x8e\xc7%]\xd7/\xa7R\xa9\xe4\x96\xc04M\xc7q\x9c\
\xb5\x89\x89\x89N!\xc4\xd3S\xdf|4\xcd\xfftw\xff\x97_]\xd3\xf5I\xc0\xf2}\xdf\
\x02\xf8\x0b\xc1.\x9e\xd8Y.\x85\x85\x00\x00\x00\x00IEND\xaeB`\x822\x86\xba\
\xb3' )

def getBitmap():
    return BitmapFromImage(getImage())

def getImage():
    stream = cStringIO.StringIO(getData())
    return ImageFromStream(stream)

def getIcon():
    icon = EmptyIcon()
    icon.CopyFromBitmap(getBitmap())
    return icon

# ============================================================================
class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.number = 0
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label="Test")
        self.button.Bind(wx.EVT_BUTTON, self.OnButton)
        self.tbicon = wx.TaskBarIcon()
        self.tbicon.SetIcon(getIcon(), "Test")
        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)
        self.panel.SetSizerAndFit(self.sizer)
        self.Show()

#   --------------------------------------------------------------------------
    def OnClose(self, e):
        self.tbicon.Destroy()
        self.Destroy()
        wx.Exit()

#   --------------------------------------------------------------------------
    def OnButton(self, e):
        # HERE WE GO!
        self.number += 1

        bitmap = getBitmap()

        # Find unused color
        image = bitmap.ConvertToImage()
        my_solid_color = wx.Color(*image.FindFirstUnusedColour(0, 0, 0)[1:])

        # Use the unused *unique* color to draw
        dc = wx.MemoryDC()
        dc.SetTextForeground(my_solid_color)
        dc.SelectObject(bitmap)
        dc.DrawText(str(self.number), 0, 0)
        dc.SelectObject(wx.NullBitmap)

        # Convert the bitmap to Image again 
        # and fix the alpha of pixels with that color 
        image = bitmap.ConvertToImage()
        for x in range(image.GetWidth()):
            for y in range(image.GetHeight()):
                p = wx.Colour(image.GetRed(x, y),
                              image.GetGreen(x, y),
                              image.GetBlue(x, y))
                if p == my_solid_color:
                    image.SetAlpha(x, y, 255)   # Clear the alpha
                    image.SetRGB(x, y, 0, 0, 0) # Set the color that we want

        # Convert back to Bitmap and save to Icon
        bitmap = image.ConvertToBitmap() 
        icon = wx.IconFromBitmap(bitmap)
        self.tbicon.SetIcon(icon, "Test")

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
</snippet></ROW><ROW><id>6152296</id><snippet>def save(self, *args, **kwargs):
        queryset = FacebookFeed.objects.all()
        if(queryset):
            return
        else:
            #super(FacebookFeed, self).save()
            super(FacebookFeed, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>6152296</id><snippet>if(queryset)</snippet></ROW><ROW><id>6152296</id><snippet>True</snippet></ROW><ROW><id>6152296</id><snippet>queryset.count() == 0</snippet></ROW><ROW><id>6152862</id><snippet>没有\ 空格_\就对了。
我觉得\ `中文和 RST`_\不够兼容。

.. _空格: http://a-link-with-pure-zh-te.xt
.. _`中文和 RST`: http://a-link-with-mixed-zh-and.en
</snippet></ROW><ROW><id>6153669</id><snippet>while</snippet></ROW><ROW><id>6153669</id><snippet>def assign(ini,mov):    
   """The first is passenger no. and the second is the final seat he gets. So I keep on chaning the mov variable if the seat that he randomly picked was occupied too. 
   """
   while cio(rand[mov][2])== 1:
      mov = random.randint(0,99)

   assert cio(rand[mov][2])== 0
   rand[mov][2] = 1
   rand[mov][1] = ini
</snippet></ROW><ROW><id>6153669</id><snippet>def</snippet></ROW><ROW><id>6153799</id><snippet>SITE_ID</snippet></ROW><ROW><id>6153799</id><snippet>Site</snippet></ROW><ROW><id>6153799</id><snippet>id</snippet></ROW><ROW><id>6153799</id><snippet>SITE_ID</snippet></ROW><ROW><id>6154065</id><snippet>from django.db.models.signals import pre_save
from myapp.models import MyModel
import logging

def my_callback(sender, **kwargs):
    logging.debug("======================================")
pre_save.connect(my_callback, sender=MyModel)
</snippet></ROW><ROW><id>6154065</id><snippet># Inside your models.py
from django.db import models
from django.db.models.signals import pre_save
from django.dispatch import receiver

class MyModel(models.Model):
    field1 = models.TextField()
    field2 = models.IntegerField()

@receiver(pre_save, sender=MyModel)
def mymodel_save_handler(sender, **kwargs):
    logging.debug("======================================")
</snippet></ROW><ROW><id>6154102</id><snippet>.csv</snippet></ROW><ROW><id>6154102</id><snippet>glob</snippet></ROW><ROW><id>6154102</id><snippet>glob.glob()</snippet></ROW><ROW><id>6154102</id><snippet>.csv</snippet></ROW><ROW><id>6154102</id><snippet>*.csv</snippet></ROW><ROW><id>6154102</id><snippet>import glob
import os

for csvFilename in glob.glob("C:\\path-to-folder-with-csv\\*.csv"):
    # csvFilename now contains the full path to the next CSV in the folder

    # This will give us the basename of the file without the extension
    worksheet = os.path.basename(os.path.splitext(csvFilename)[0])

    if worksheet.lower() == "waitrose":
        # Parse Waitrose CSV...

    elif worksheet.lower() == "tesco":
        # Parse Tesco CSV...

    elif worksheet.lower() == "asda":
        # Parse Asda CSV...
</snippet></ROW><ROW><id>6154251</id><snippet>os.chdir()</snippet></ROW><ROW><id>6154251</id><snippet>subprocess.Popen(...)</snippet></ROW><ROW><id>6154251</id><snippet>cwd=None</snippet></ROW><ROW><id>6154446</id><snippet>split_data = ping_data.split(',')
</snippet></ROW><ROW><id>6154446</id><snippet>split_data</snippet></ROW><ROW><id>6154446</id><snippet>['4', '25']</snippet></ROW><ROW><id>6154446</id><snippet>first_val = split_data[0]
second_val = split_data[1]
</snippet></ROW><ROW><id>6155847</id><snippet>Create all attributes in `__init__`.
When it comes time to be dynamic, delete the unwanted attributes.
</snippet></ROW><ROW><id>6155865</id><snippet>def set_mac(self, newmac):
    ''' Set the device's mac address. Device must be down for this to
        succeed. '''
    macbytes = [int(i, 16) for i in newmac.split(':')]
    ifreq = struct.pack('16sH6B8x', self.name, AF_UNIX, *macbytes)
    fcntl.ioctl(sockfd, SIOCSIFHWADDR, ifreq)
</snippet></ROW><ROW><id>6155887</id><snippet>&gt;&gt;&gt; a = numpy.zeros((3, 3, 3))
&gt;&gt;&gt; a += numpy.array((1, 3, 2)).reshape((3, 1, 1))
&gt;&gt;&gt; b = numpy.arange(3*3*3).reshape((3, 3, 3))
&gt;&gt;&gt; sort_indices = numpy.argsort(a, axis=0)
&gt;&gt;&gt; static_indices = numpy.indices((3, 3, 3))
&gt;&gt;&gt; b[sort_indices, static_indices[1], static_indices[2]]
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]]])
</snippet></ROW><ROW><id>6155887</id><snippet>numpy.indices</snippet></ROW><ROW><id>6155887</id><snippet>&gt;&gt;&gt; static_indices
array([[[[0, 0, 0],
         [0, 0, 0],
         [0, 0, 0]],

        [[1, 1, 1],
         [1, 1, 1],
         [1, 1, 1]],

        [[2, 2, 2],
         [2, 2, 2],
         [2, 2, 2]]],


       [[[0, 0, 0],
         [1, 1, 1],
         [2, 2, 2]],

        [[0, 0, 0],
         [1, 1, 1],
         [2, 2, 2]],

        [[0, 0, 0],
         [1, 1, 1],
         [2, 2, 2]]],


       [[[0, 1, 2],
         [0, 1, 2],
         [0, 1, 2]],

        [[0, 1, 2],
         [0, 1, 2],
         [0, 1, 2]],

        [[0, 1, 2],
         [0, 1, 2],
         [0, 1, 2]]]])
</snippet></ROW><ROW><id>6155887</id><snippet>&gt;&gt;&gt; b[static_indices[0], static_indices[1], static_indices[2]]
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])
</snippet></ROW><ROW><id>6155887</id><snippet>numpy.indices</snippet></ROW><ROW><id>6155887</id><snippet>numpy.ogrid</snippet></ROW><ROW><id>6155887</id><snippet>ogrid</snippet></ROW><ROW><id>6155887</id><snippet>&gt;&gt;&gt; static_indices = numpy.ogrid[0:a.shape[0], 0:a.shape[1], 0:a.shape[2]]
&gt;&gt;&gt; a[sort_indices, static_indices[1], static_indices[2]]
array([[[ 1.,  1.,  1.],
        [ 1.,  1.,  1.],
        [ 1.,  1.,  1.]],

       [[ 2.,  2.,  2.],
        [ 2.,  2.,  2.],
        [ 2.,  2.,  2.]],

       [[ 3.,  3.,  3.],
        [ 3.,  3.,  3.],
        [ 3.,  3.,  3.]]])
</snippet></ROW><ROW><id>6156057</id><snippet>QTabWidget.setUsesScrollButtons(bool)</snippet></ROW><ROW><id>6156057</id><snippet>import sys
from PyQt4.QtGui import *

class MainWindow(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        # making tabs
        tabs = QTabWidget()
        tabs.setUsesScrollButtons(False) #here is

        tabs.addTab(QWidget(), '111111')
        tabs.addTab(QWidget(), '222222')
        tabs.addTab(QWidget(), '333333')
        tabs.addTab(QWidget(), '444444')
        # inserting in vbox
        vbox = QVBoxLayout(self)
        vbox.addWidget(tabs)

app = QApplication(sys.argv)
myapp = MainWindow()
myapp.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>6156239</id><snippet>Status: 303 See other
Location: http://lalala.com/themainpage
</snippet></ROW><ROW><id>6156606</id><snippet>win32api</snippet></ROW><ROW><id>6156606</id><snippet>ctypes</snippet></ROW><ROW><id>6156606</id><snippet>win32api</snippet></ROW><ROW><id>6156606</id><snippet>GetSystemPowerStatus()</snippet></ROW><ROW><id>6156606</id><snippet>SYSTEM_POWER_STATUS</snippet></ROW><ROW><id>6156606</id><snippet># Get power status of the system using ctypes to call GetSystemPowerStatus

import ctypes
from ctypes import wintypes

class SYSTEM_POWER_STATUS(ctypes.Structure):
    _fields_ = [
        ('ACLineStatus', wintypes.BYTE),
        ('BatteryFlag', wintypes.BYTE),
        ('BatteryLifePercent', wintypes.BYTE),
        ('Reserved1', wintypes.BYTE),
        ('BatteryLifeTime', wintypes.DWORD),
        ('BatteryFullLifeTime', wintypes.DWORD),
    ]

SYSTEM_POWER_STATUS_P = ctypes.POINTER(SYSTEM_POWER_STATUS)

GetSystemPowerStatus = ctypes.windll.kernel32.GetSystemPowerStatus
GetSystemPowerStatus.argtypes = [SYSTEM_POWER_STATUS_P]
GetSystemPowerStatus.restype = wintypes.BOOL

status = SYSTEM_POWER_STATUS()
if not GetSystemPowerStatus(ctypes.pointer(status)):
    raise ctypes.WinError()
print 'ACLineStatus', status.ACLineStatus
print 'BatteryFlag', status.BatteryFlag
print 'BatteryLifePercent', status.BatteryLifePercent
print 'BatteryLifeTime', status.BatteryLifeTime
print 'BatteryFullLifeTime', status.BatteryFullLifeTime
</snippet></ROW><ROW><id>6156606</id><snippet>ACLineStatus 1
BatteryFlag -128
BatteryLifePercent -1
BatteryLifeTime 4294967295
BatteryFullLifeTime 4294967295
</snippet></ROW><ROW><id>6157260</id><snippet>+python</snippet></ROW><ROW><id>6157260</id><snippet>if_python.c</snippet></ROW><ROW><id>6157260</id><snippet>changeset:   2641:b803b2776880
tag:         v7-3-062
user:        Bram Moolenaar &lt;bram@vim.org&gt;
date:        Tue Nov 16 19:26:02 2010 +0100
files:       src/auto/configure src/configure.in src/if_python.c src/if_python3.c src/version.c
description:
updated for version 7.3.062
Problem:    Python doesn't work properly when installed in another directory
        than expected.
Solution:   Figure out home directory in configure and use Py_SetPythonHome()
        at runtime. (Roland Puntaier)
</snippet></ROW><ROW><id>6157354</id><snippet>import os
PROJECT_PATH = os.path.dirname(os.path.abspath(__file__))
</snippet></ROW><ROW><id>6157354</id><snippet>SQLITE_3 = os.path.join(PROJECT_PATH, 'YOUR DATABASE.DB')
</snippet></ROW><ROW><id>6157646</id><snippet>args1 = [u's3://us-east-1.elasticmapreduce/libs/hive/hive-script',
         u'--base-path',
         u's3://us-east-1.elasticmapreduce/libs/hive/',
         u'--install-hive',
         u'--hive-versions',
         u'0.7']
args2 = [u's3://us-east-1.elasticmapreduce/libs/hive/hive-script',
         u'--base-path',
         u's3://us-east-1.elasticmapreduce/libs/hive/',
         u'--hive-versions',
         u'0.7',
         u'--run-hive-script',
         u'--args',
         u'-f',
         s3_query_file_uri]
steps = []
for name, args in zip(('Setup Hive','Run Hive Script'),(args1,args2)):
    step = JarStep(name,
                   's3://us-east-1.elasticmapreduce/libs/script-runner/script-runner.jar',
                   step_args=args,
                   #action_on_failure="CANCEL_AND_WAIT"
                   )
    #should be inside loop
    steps.append(step)
# Kick off the job
jobid = EmrConnection().run_jobflow(name, s3_log_uri,
                                   steps=steps,
                                   master_instance_type=master_instance_type,
                                   slave_instance_type=slave_instance_type,
                                   num_instances=num_instances,
                                   hadoop_version="0.20")
</snippet></ROW><ROW><id>6157736</id><snippet>(?:...)</snippet></ROW><ROW><id>6157736</id><snippet>'''
\[\[            #the first [[
[^:]*?          #no :s are allowed
.*?             #a bunch of chars
(?:             #non-capturing group
\|              #either go until a |
|\]\]           #or the last ]]
)
                '''
</snippet></ROW><ROW><id>6157981</id><snippet>http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(8000)
tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>6157997</id><snippet>scipy.​signal.​signaltools.correlate(A, B)
</snippet></ROW><ROW><id>6157997</id><snippet>import numpy, scipy
from scipy.signal import correlate

# Load datasets, taking mean of 100 values in each table row
A = numpy.loadtxt("vb-sync-XReport.txt")[:,1:].mean(axis=1)
B = numpy.loadtxt("vb-sync-YReport.txt")[:,1:].mean(axis=1)

nsamples = A.size

# regularize datasets by subtracting mean and dividing by s.d.
A -= A.mean(); A /= A.std()
B -= B.mean(); B /= B.std()

# Put in an artificial time shift between the two datasets
time_shift = 20
A = numpy.roll(A, time_shift)

# Find cross-correlation
xcorr = correlate(A, B)

# delta time array to match xcorr
dt = numpy.arange(1-nsamples, nsamples)

recovered_time_shift = dt[xcorr.argmax()]

print "Added time shift: %d" % (time_shift)
print "Recovered time shift: %d" % (recovered_time_shift)

# SAMPLE OUTPUT:
# Added time shift: 20
# Recovered time shift: 20
</snippet></ROW><ROW><id>6157997</id><snippet>import numpy, scipy
from scipy.signal import square, sawtooth, correlate
from numpy import pi, random

period = 1.0                            # period of oscillations (seconds)
tmax = 10.0                             # length of time series (seconds)
nsamples = 1000
noise_amplitude = 0.6

phase_shift = 0.6*pi                   # in radians

# construct time array
t = numpy.linspace(0.0, tmax, nsamples, endpoint=False)

# Signal A is a square wave (plus some noise)
A = square(2.0*pi*t/period) + noise_amplitude*random.normal(size=(nsamples,))

# Signal B is a phase-shifted saw wave with the same period
B = -sawtooth(phase_shift + 2.0*pi*t/period) + noise_amplitude*random.normal(size=(nsamples,))

# calculate cross correlation of the two signals
xcorr = correlate(A, B)

# The peak of the cross-correlation gives the shift between the two signals
# The xcorr array goes from -nsamples to nsamples
dt = numpy.linspace(-t[-1], t[-1], 2*nsamples-1)
recovered_time_shift = dt[xcorr.argmax()]

# force the phase shift to be in [-pi:pi]
recovered_phase_shift = 2*pi*(((0.5 + recovered_time_shift/period) % 1.0) - 0.5)

relative_error = (recovered_phase_shift - phase_shift)/(2*pi)

print "Original phase shift: %.2f pi" % (phase_shift/pi)
print "Recovered phase shift: %.2f pi" % (recovered_phase_shift/pi)
print "Relative error: %.4f" % (relative_error)

# OUTPUT:
# Original phase shift: 0.25 pi
# Recovered phase shift: 0.24 pi
# Relative error: -0.0050

# Now graph the signals and the cross-correlation

from pyx import canvas, graph, text, color, style, trafo, unit
from pyx.graph import axis, key

text.set(mode="latex")
text.preamble(r"\usepackage{txfonts}")
figwidth = 12
gkey = key.key(pos=None, hpos=0.05, vpos=0.8)
xaxis = axis.linear(title=r"Time, \(t\)")
yaxis = axis.linear(title="Signal", min=-5, max=17)
g = graph.graphxy(width=figwidth, x=xaxis, y=yaxis, key=gkey)
plotdata = [graph.data.values(x=t, y=signal+offset, title=label) for label, signal, offset in (r"\(A(t) = \mathrm{square}(2\pi t/T)\)", A, 2.5), (r"\(B(t) = \mathrm{sawtooth}(\phi + 2 \pi t/T)\)", B, -2.5)]
linestyles = [style.linestyle.solid, style.linejoin.round, style.linewidth.Thick, color.gradient.Rainbow, color.transparency(0.5)]
plotstyles = [graph.style.line(linestyles)]
g.plot(plotdata, plotstyles)
g.text(10*unit.x_pt, 0.56*figwidth, r"\textbf{Cross correlation of noisy anharmonic signals}")
g.text(10*unit.x_pt, 0.33*figwidth, "Phase shift: input \(\phi = %.2f \,\pi\), recovered \(\phi = %.2f \,\pi\)" % (phase_shift/pi, recovered_phase_shift/pi))
xxaxis = axis.linear(title=r"Time Lag, \(\Delta t\)", min=-1.5, max=1.5)
yyaxis = axis.linear(title=r"\(A(t) \star B(t)\)")
gg = graph.graphxy(width=0.2*figwidth, x=xxaxis, y=yyaxis)
plotstyles = [graph.style.line(linestyles + [color.rgb(0.2,0.5,0.2)])]
gg.plot(graph.data.values(x=dt, y=xcorr), plotstyles)
gg.stroke(gg.xgridpath(recovered_time_shift), [style.linewidth.THIck, color.gray(0.5), color.transparency(0.7)])
ggtrafos = [trafo.translate(0.75*figwidth, 0.45*figwidth)]
g.insert(gg, ggtrafos)
g.writePDFfile("so-xcorr-pyx")
</snippet></ROW><ROW><id>6158254</id><snippet>while true:
    for event in pygame.event.get():
        #manage your events
    #update your sprites
    screen.blit(...) #draw to screen
    pygame.display.flip()
    clock.tick(30)
</snippet></ROW><ROW><id>6158658</id><snippet>class ObjectWithEvents(object):
    callbacks = None

    def on(self, event_name, callback):
        if self.callbacks is None:
            self.callbacks = {}

        if event_name not in self.callbacks:
            self.callbacks[event_name] = [callback]
        else:
            self.callbacks[event_name].append(callback)

    def trigger(self, event_name):
        if self.callbacks is not None and event_name in self.callbacks:
            for callback in self.callbacks[event_name]:
                callback(self)

class MyClass(ObjectWithEvents):
    def __init__(self, contents):
        self.contents = contents

    def __str__(self):
        return "MyClass containing " + repr(self.contents)

def echo(value): # because "print" isn't a function...
    print value

o = MyClass("hello world")
o.on("example_event", echo)
o.on("example_event", echo)
o.trigger("example_event") # prints "MyClass containing \"Hello World\"" twice
</snippet></ROW><ROW><id>6158741</id><snippet>&gt;&gt;&gt; [ord(c) for c in '\x0f\x07UUU']
[15, 7, 85, 85, 85]
</snippet></ROW><ROW><id>6158917</id><snippet>In [2]: import urllib2
In [3]: resp = urllib2.urlopen('http://www.usmc.mil/units/hqmc/')
In [4]: resp.geturl()
Out[4]: 'http://www.marines.mil/units/hqmc/default.aspx
</snippet></ROW><ROW><id>6158918</id><snippet>tuple</snippet></ROW><ROW><id>6158918</id><snippet>frozenset</snippet></ROW><ROW><id>6158918</id><snippet>&gt;&gt;&gt; t = 1, 2, 3
&gt;&gt;&gt; t[1] = 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</snippet></ROW><ROW><id>6159120</id><snippet>i</snippet></ROW><ROW><id>6159120</id><snippet>btn.clicked.connect( lambda throw_away=0, i=i: label.setText("button " + str(i)) )
</snippet></ROW><ROW><id>6159178</id><snippet>python_select</snippet></ROW><ROW><id>6159183</id><snippet>expand = 1</snippet></ROW><ROW><id>6159183</id><snippet>pack()</snippet></ROW><ROW><id>6159183</id><snippet>self.frame.pack(fill = "both", expand = 1)
...
self.canvas.pack(fill = "both", expand = 1)
</snippet></ROW><ROW><id>6159329</id><snippet>&gt;&gt;&gt; all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])
True
</snippet></ROW><ROW><id>6159329</id><snippet>&gt;&gt;&gt; 'a', 'b'
('a', 'b')
&gt;&gt;&gt; 'a', 5 + 2
('a', 7)
&gt;&gt;&gt; 'a', 'x' in 'xerxes'
('a', True)
</snippet></ROW><ROW><id>6159527</id><snippet>def OfsToHour(targetHour = 7):
    import datetime
    t = datetime.datetime.utcnow() #or your favored UTC call
    return (((targetHour - t.hour) + 12) % 24) - 12
</snippet></ROW><ROW><id>6159530</id><snippet>root = api.item_search('All', Keywords=searchWord, ResponseGroup='Large', ItemPage=pageNo, MerchantId='All')
</snippet></ROW><ROW><id>6159530</id><snippet>AWS_KEY = '...'
SECRET_KEY = '...'
searchWord = "Lenovo"
pageNo = "1"

api = API(AWS_KEY, SECRET_KEY, 'us')

result = api.item_search('All', Keywords=searchWord, ResponseGroup='Large', ItemPage=pageNo, MerchantId='All')
for item in result.Items.Item:
    print item.ItemAttributes.Title
</snippet></ROW><ROW><id>6159718</id><snippet>(S)etup</snippet></ROW><ROW><id>6159718</id><snippet>(C)onfig</snippet></ROW><ROW><id>6159718</id><snippet>keywords</snippet></ROW><ROW><id>6159718</id><snippet>import imaplib
im = imaplib.IMAP4(hostname)
im.login(user, password)
im.select('INBOX')

# you can use im.search() to obtain message ids
msg_ids = '1, 4, 7'
labels = ['foo', 'bar', 'baz']

# add the flags to the message
im.store(msg_ids, '+FLAGS', '(%s)' % ' '.join(labels))

# fetch and print to verify the flags
print im.fetch(ids, '(FLAGS)')

im.close()
im.logout()
</snippet></ROW><ROW><id>6159718</id><snippet>+FLAGS (foo bar)</snippet></ROW><ROW><id>6159718</id><snippet>foo</snippet></ROW><ROW><id>6159718</id><snippet>bar</snippet></ROW><ROW><id>6159718</id><snippet>abc 123</snippet></ROW><ROW><id>6159718</id><snippet>123</snippet></ROW><ROW><id>6159718</id><snippet>abc</snippet></ROW><ROW><id>6159877</id><snippet>xml.py</snippet></ROW><ROW><id>6159877</id><snippet>import xml.anything</snippet></ROW><ROW><id>6159877</id><snippet>Traceback (most recent call last):
  File "xml.py", line 4, in &lt;module&gt;
    import xml.etree.ElementTree as et
  File "C:\junk\xml.py", line 4, in &lt;module&gt; #### here's the culprit ####
    import xml.etree.ElementTree as et
ImportError: No module named etree.ElementTree
</snippet></ROW><ROW><id>6159877</id><snippet>import sys
print sys.version
print sys.path
import xml.etree.ElementTree as et
print et.__file__
import xml.etree.ElementTree as xml
print xml.__file__
</snippet></ROW><ROW><id>6159877</id><snippet>C:\junk&gt;\python26\python
Python 2.6.6 (r266:84297, Aug 24 2010, 18:46:32) [MSC v.1500 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import xml.etree.ElementTree as et
&gt;&gt;&gt; print et.__file__
C:\python26\lib\xml\etree\ElementTree.pyc
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6159912</id><snippet>from __future__ import print_function
print("hi there", file=f)
</snippet></ROW><ROW><id>6159912</id><snippet>f = open('myfile','w')
f.write('hi there\n') # python will convert \n to os.linesep
f.close() # you can omit in most cases as the destructor will call if
</snippet></ROW><ROW><id>6159912</id><snippet>''</snippet></ROW><ROW><id>6160222</id><snippet>time_before = time.time()
sock.connect((self.host, self.port))
result = time.time() - time_before
sock.close()
</snippet></ROW><ROW><id>6160295</id><snippet>import xml.dom.minidom</snippet></ROW><ROW><id>6160295</id><snippet>&gt;&gt;&gt; xml.dom.minidom.Document()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'xml' is not defined
&gt;&gt;&gt; import xml.dom.minidom
&gt;&gt;&gt; xml.dom.minidom.Document()
&lt;xml.dom.minidom.Document instance at 0x7f73ae601a28&gt;
</snippet></ROW><ROW><id>6160296</id><snippet>wx.Timer</snippet></ROW><ROW><id>6160296</id><snippet>wx.EVT_TIMER</snippet></ROW><ROW><id>6160296</id><snippet>wx.DateTime_Now()</snippet></ROW><ROW><id>6160296</id><snippet>import  wx
import  wx.calendar

class MyCalendar(wx.Frame):
    def __init__(self, *args, **kargs):
        wx.Frame.__init__(self, *args, **kargs)
        self.cal = wx.calendar.CalendarCtrl(self, -1, wx.DateTime_Now())
        self.timer = wx.Timer(self)
        self.timer.Start(1000)
        self.Bind(wx.EVT_TIMER, self.update_date)

    def update_date(self, evt):
        date = wx.DateTime_Now()
        self.cal.SetDate(date)    

if __name__ == '__main__':  
    app = wx.PySimpleApp()
    frame = MyCalendar(None)
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>6160349</id><snippet>bytes</snippet></ROW><ROW><id>6160349</id><snippet>data = b"\x42\x43\x44\x45"
print(data[0:2], data[2:4])
</snippet></ROW><ROW><id>6160349</id><snippet>readframes</snippet></ROW><ROW><id>6160349</id><snippet>data = bytes(obj)</snippet></ROW><ROW><id>6160404</id><snippet>__getitem__</snippet></ROW><ROW><id>6160404</id><snippet>def __getitem__(self, key):
  return super(ObjectIdDict, self).__getitem__(id(key))
  #^^^^^
</snippet></ROW><ROW><id>6160404</id><snippet>return</snippet></ROW><ROW><id>6160404</id><snippet>None</snippet></ROW><ROW><id>6160404</id><snippet>oiddict[key] is None</snippet></ROW><ROW><id>6160742</id><snippet>id</snippet></ROW><ROW><id>6160742</id><snippet>class newbot(object):
    def __init__(self):
        self.id = randomid()

bot1 = newbot() 
bot2 = newbot()   

# The two ids should be different, depending on your implementation of randomid().
print bot1.id
print bot2.id  
</snippet></ROW><ROW><id>6160816</id><snippet>(?&lt;=.)s</snippet></ROW><ROW><id>6160816</id><snippet>s</snippet></ROW><ROW><id>6160816</id><snippet>.</snippet></ROW><ROW><id>6160949</id><snippet>sudo rm /usr/local/bin/pip</snippet></ROW><ROW><id>6160949</id><snippet>which pip</snippet></ROW><ROW><id>6160949</id><snippet>/opt/local/bin/pip</snippet></ROW><ROW><id>6160949</id><snippet>which python</snippet></ROW><ROW><id>6160949</id><snippet>/opt/local</snippet></ROW><ROW><id>6160949</id><snippet>PATH</snippet></ROW><ROW><id>6160969</id><snippet>G</snippet></ROW><ROW><id>6160969</id><snippet>L</snippet></ROW><ROW><id>6160969</id><snippet>from OpenGL.GL import *
</snippet></ROW><ROW><id>6161073</id><snippet>x in y</snippet></ROW><ROW><id>6161073</id><snippet>line.endswith()</snippet></ROW><ROW><id>6161074</id><snippet>import re

# Unique-ify list, preserving order
def uniquify(l):
    return reduce(lambda s, e: s + ([] if e in s else [e]), l, [])

# Replace all keys in replacements with corresponding values in str
def replace_all(str, replacements):
    for old, new in replacements.iteritems():
        str = str.replace(old, new)
    return str

class Expression:
    units = ["m", "s"]

    def __init__(self, exp):
        self.exp = exp

    # Returns a list of symbols in the expression that are preceded
    # by the given unit, ordered by first appearance. Assumes the
    # symbol and unit are separated by a space. For example:
    # Expression("A m * B s / (A m + C m)").symbols_for_unit("m")
    # returns ['A', 'C']
    def symbols_for_unit(self, unit):
        sym_re = re.compile("(.) %s" % unit)
        symbols = sym_re.findall(self.exp)
        return uniquify(symbols)

    # Returns a string with all symbols that have units other than
    # unit "muted", that is replaced with the empty string. Example:
    # Expression("A m * B s / (A m + C m)").mute_symbols_for_other_units("m")
    # returns "A m *  s / (A m + C m)"
    def mute_symbols_for_other_units(self, unit):
        other_units = "".join(set(self.units) - set(unit))
        return re.sub("(.) ([%s])" % "".join(other_units), " \g&lt;2&gt;", self.exp)

    # Returns a string with all symbols that have the given unit
    # replaced with tokens of the form $0, $1, ..., by order of their
    # first appearance in the string, and all other symbols muted. 
    # For example:
    # Expression("A m * B s / (A m + C m)").canonical_form("m")
    # returns "$0 m *  s / ($0 m + $1 m)"
    def canonical_form(self, unit):
        symbols = self.symbols_for_unit(unit)
        muted_self = self.mute_symbols_for_other_units(unit)
        for i, sym in enumerate(symbols):
            muted_self = muted_self.replace("%s %s" % (sym, unit), "$%s %s" % (i, unit))
        return muted_self

    # Define a permutation, represented as a dictionary, according to
    # the following rule: replace $i with the ith distinct symbol
    # occurring in the expression with the given unit. For example:
    # Expression("C m * B s / (C m + A m)").permutation("m")
    # returns {'$0':'C', '$1':'A'}
    def permutation(self, unit):
        enum = enumerate(self.symbols_for_unit(unit))
        return dict(("$%s" % i, sym) for i, sym in enum)

    # Return a string produced from the expression by first converting it
    # into canonical form, and then performing the replacements defined
    # by the given permutation. For example:
    # Expression("A m * B s / (A m + C m)").permute("m", {"$0":"C", "$1":"A"})
    # returns "C m *  s / (C m + A m)"
    def permute(self, unit, permutation):
        new_exp = self.canonical_form(unit)
        return replace_all(new_exp, permutation) 

    # Test for equality under permutation and muting of all other symbols 
    # than the unit provided. 
    def eq_under_permutation(self, unit, other_exp):
        muted_self = self.mute_symbols_for_other_units(unit)        
        other_permuted_str = other_exp.permute(unit, self.permutation(unit))
        return muted_self == other_permuted_str    

    # Test for equality under permutation. This is done for each of
    # the possible units using eq_under_permutation
    def __eq__(self, other):
        return all([self.eq_under_permutation(unit, other) for unit in self.units])

e1 = Expression("A m * B s / (A m + C m)")
e2 = Expression("C m * B s / (C m + A m)")
e3 = Expression("A s * B s / (A m + C m)")

f1 = Expression("A s * (B s + D s) / (A m + C m)")
f2 = Expression("A s * (D s + B s) / (C m + A m)")
f3 = Expression("D s")

print "e1 == e2: ", e1 == e2 # True
print "e1 == e3: ", e1 == e3 # False
print "e2 == e3: ", e2 == e3 # False

print "f1 == f2: ", f1 == f2 # True
print "f1 == f3: ", f1 == f3 # False
</snippet></ROW><ROW><id>6161143</id><snippet>Wave_read.getframerate()</snippet></ROW><ROW><id>6161143</id><snippet>Wave_read.getsampwidth()</snippet></ROW><ROW><id>6161143</id><snippet>Wave_read.getnchannels()</snippet></ROW><ROW><id>6161143</id><snippet>Wave_read.getframes(N)</snippet></ROW><ROW><id>6161143</id><snippet>N * sample_width * n_channels</snippet></ROW><ROW><id>6161723</id><snippet>cursor.executemany('''INSERT INTO popularity
      VALUES (%s, %s, $s)''', entries_list)
</snippet></ROW><ROW><id>6161723</id><snippet>cursor.executemany('''INSERT INTO popularity
      VALUES (%s, %s, %s)''', entries_list)
</snippet></ROW><ROW><id>6162263</id><snippet>&gt;&gt;&gt; a = numpy.zeros((3, 3, 3))
&gt;&gt;&gt; a += numpy.array((1, 3, 2)).reshape((3, 1, 1))
&gt;&gt;&gt; b = numpy.arange(3*3*3).reshape((3, 3, 3))
&gt;&gt;&gt; c = numpy.array(zip(a.flatten(), b.flatten()), dtype=[('f', float), ('i', int)]).reshape(3, 3, 3)
&gt;&gt;&gt; c.sort(axis=0)
&gt;&gt;&gt; c['i']
array([[[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]]])
</snippet></ROW><ROW><id>6162263</id><snippet>&gt;&gt;&gt; c = numpy.rec.fromarrays([a, b], dtype=[('f', float), ('i', int)])
</snippet></ROW><ROW><id>6162263</id><snippet>&gt;&gt;&gt; c = numpy.rec.fromarrays([a, b], names='f, i')
</snippet></ROW><ROW><id>6162753</id><snippet>Team</snippet></ROW><ROW><id>6162753</id><snippet>Team</snippet></ROW><ROW><id>6162837</id><snippet>key=lambda x: x[0][1]</snippet></ROW><ROW><id>6162863</id><snippet>C:\</snippet></ROW><ROW><id>6162863</id><snippet>urllib</snippet></ROW><ROW><id>6162863</id><snippet>urllib</snippet></ROW><ROW><id>6162863</id><snippet>import x</snippet></ROW><ROW><id>6162863</id><snippet>urllib</snippet></ROW><ROW><id>6162863</id><snippet>urlopen</snippet></ROW><ROW><id>6163109</id><snippet>.bashrc</snippet></ROW><ROW><id>6163109</id><snippet>PATH=$PATH:/dir/to/the/script
</snippet></ROW><ROW><id>6163109</id><snippet>chmod +x myscript.py
</snippet></ROW><ROW><id>6163109</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>6163109</id><snippet>myscript.py
</snippet></ROW><ROW><id>6163109</id><snippet>app</snippet></ROW><ROW><id>6163157</id><snippet>math.nextafter(x,y)</snippet></ROW><ROW><id>6163157</id><snippet>nextafter()</snippet></ROW><ROW><id>6163157</id><snippet>nextafter()</snippet></ROW><ROW><id>6163157</id><snippet>nextafter()</snippet></ROW><ROW><id>6163157</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.nextafter(0,1)
4.9406564584124654e-324
&gt;&gt;&gt; numpy.nextafter(.1, 1)
0.10000000000000002
&gt;&gt;&gt; numpy.nextafter(1e6, -1)
999999.99999999988
&gt;&gt;&gt; numpy.nextafter(-.1, 1)
-0.099999999999999992
</snippet></ROW><ROW><id>6163157</id><snippet>import ctypes
import sys
from sys import platform as _platform

if _platform == "linux" or _platform == "linux2":
    _libm = ctypes.cdll.LoadLibrary('libm.so.6')
    _funcname = 'nextafter'
elif _platform == "darwin":
    _libm = ctypes.cdll.LoadLibrary('libSystem.dylib')
    _funcname = 'nextafter'
elif _platform == "win32":
    _libm = ctypes.cdll.LoadLibrary('msvcrt.dll')
    _funcname = '_nextafter'
else:
    # these are the ones I have access to...
    # fill in library and function name for your system math dll
    print "Platform", repr(_platform), "is not supported"
    sys.exit(0)

_nextafter = getattr(_libm, _funcname)
_nextafter.restype = ctypes.c_double
_nextafter.argtypes = [ctypes.c_double, ctypes.c_double]

def nextafter(x, y):
    "Returns the next floating-point number after x in the direction of y."
    return _nextafter(x, y)

assert nextafter(0, 1) - nextafter(0, 1) == 0
assert 0.0 + nextafter(0, 1) &gt; 0.0
</snippet></ROW><ROW><id>6163157</id><snippet># handles edge cases correctly on MY computer 
# not extensively QA'd...
import math
# 'double' means IEEE 754 double precision -- c 'double'
epsilon  = math.ldexp(1.0, -53) # smallest double that 0.5+epsilon != 0.5
maxDouble = float(2**1024 - 2**971)  # From the IEEE 754 standard
minDouble  = math.ldexp(1.0, -1022) # min positive normalized double
smallEpsilon  = math.ldexp(1.0, -1074) # smallest increment for doubles &lt; minFloat
infinity = math.ldexp(1.0, 1023) * 2

def nextafter(x,y):    
    """returns the next IEEE double after x in the direction of y if possible"""
    if y==x:
       return y         #if x==y, no increment

    # handle NaN
    if x!=x or y!=y:
        return x + y       

    if x &gt;= infinity:
        return infinity

    if x &lt;= -infinity:
        return -infinity

    if -minDouble &lt; x &lt; minDouble:
        if y &gt; x:
            return x + smallEpsilon
        else:
            return x - smallEpsilon  

    m, e = math.frexp(x)        
    if y &gt; x:
        m += epsilon
    else:
        m -= epsilon

    return math.ldexp(m,e)
</snippet></ROW><ROW><id>6163403</id><snippet>numpy.digitize()</snippet></ROW><ROW><id>6163403</id><snippet>import numpy
data = numpy.random.random(100)
bins = numpy.linspace(0, 1, 10)
digitized = numpy.digitize(data, bins)
bin_means = [data[digitized == i].mean() for i in range(1, len(bins))]
</snippet></ROW><ROW><id>6163403</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>6163403</id><snippet>bin_means = (numpy.histogram(data, bins, weights=data)[0] /
             numpy.histogram(data, bins)[0])
</snippet></ROW><ROW><id>6163480</id><snippet>extern template&lt;&gt;
    CL_Slot connect&lt;SomeClass&gt; (SomeClass *instance, void(InstanceClass::*function)(Param1, Param2));
</snippet></ROW><ROW><id>6163480</id><snippet>template&lt;&gt;</snippet></ROW><ROW><id>6163619</id><snippet>test1</snippet></ROW><ROW><id>6163619</id><snippet>status</snippet></ROW><ROW><id>6163619</id><snippet>for w in words:
    if w['case']:
        r = re.compile("(^|\s)#?%s" % w['word'], re.IGNORECASE|re.MULTILINE)
    else:
        r = re.compile("(^|\s)#?%s" % w['word'], re.MULTILINE)
    if r.search(status):
        print "Found word %s" % w['word']
</snippet></ROW><ROW><id>6164055</id><snippet>"_id"</snippet></ROW><ROW><id>6164055</id><snippet>myForeignModel_id</snippet></ROW><ROW><id>6164318</id><snippet>#/etc/ld.so.conf.d/python2.6.conf
/foo/python2.6/lib
</snippet></ROW><ROW><id>6164318</id><snippet>ldconfig</snippet></ROW><ROW><id>6164318</id><snippet>[~]# ldconfig -p | grep python
libpython2.6.so.1.0 (libc6,x86-64) =&gt; /foo/python26/lib/libpython2.6.so.1.0
libpython2.6.so (libc6,x86-64) =&gt; /foo/python26/lib/libpython2.6.so
libpython2.4.so.1.0 (libc6,x86-64) =&gt; /usr/lib64/libpython2.4.so.1.0
libpython2.4.so (libc6,x86-64) =&gt; /usr/lib64/libpython2.4.so

[/foo/python26/bin]# ldd python2.6
libpython2.6.so.1.0 =&gt; /foo/python26/lib/libpython2.6.so.1.0 (0x00002b351dc1a000)
libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00002b351dfca000)
</snippet></ROW><ROW><id>6164322</id><snippet>&gt;&gt;&gt; [list(x[1]) for x in itertools.groupby(['|', u'MOM', u'DAD', '|', u'GRAND', '|', u'MOM', u'MAX', u'JULES', '|'], lambda x: x=='|') if not x[0]]
[[u'MOM', u'DAD'], [u'GRAND'], [u'MOM', u'MAX', u'JULES']]
</snippet></ROW><ROW><id>6164412</id><snippet>self</snippet></ROW><ROW><id>6164412</id><snippet>def print_timing(func):
    import time
    def wrapper(*args, **kwargs):
        t1 = time.time()
        res = func(*args, **kwargs)
        t2 = time.time()
        funcname = func.__name__
        # Special case; a "name" instance has a "name" attribute we want to use instead.
        if len(args) &gt;= 1 and isinstance(args[0], name):
            funcname = args[0].name
        print '%s took %0.3f s ~ %0.0f min and %0.1f sec' % (funcname, t2-t1, int(t2 - t1)/60, (t2-t1) % 60 )
        return res
    return wrapper
</snippet></ROW><ROW><id>6164412</id><snippet>func.__name__</snippet></ROW><ROW><id>6164412</id><snippet>name</snippet></ROW><ROW><id>6164412</id><snippet>name</snippet></ROW><ROW><id>6164412</id><snippet>isinstance</snippet></ROW><ROW><id>6164412</id><snippet>name</snippet></ROW><ROW><id>6164412</id><snippet>if hasattr(args[0], 'name')</snippet></ROW><ROW><id>6164412</id><snippet>name</snippet></ROW><ROW><id>6164481</id><snippet>all</snippet></ROW><ROW><id>6164481</id><snippet>&gt;&gt;&gt; all([1,2,3,4])
True
&gt;&gt;&gt; all([1,2,3,False])
False
</snippet></ROW><ROW><id>6164481</id><snippet>&gt;&gt;&gt; input = [1,2,3,4]
&gt;&gt;&gt; tested = [i for i in input if i &gt; 2]
&gt;&gt;&gt; len(tested) == len(input)
False
</snippet></ROW><ROW><id>6164481</id><snippet>for</snippet></ROW><ROW><id>6164481</id><snippet>&gt;&gt;&gt; def test(input):
...     for i in input:
...         if not i &gt; 2:
...             return False
...         do_something_with_i(i)
...     return True
</snippet></ROW><ROW><id>6164481</id><snippet>test</snippet></ROW><ROW><id>6164622</id><snippet>profile.playlists</snippet></ROW><ROW><id>6164622</id><snippet>.order('videos_num')</snippet></ROW><ROW><id>6164662</id><snippet>&gt;&gt;&gt; print any(x['foo']=='1252015' for x in yourJson['data'])
True
</snippet></ROW><ROW><id>6164662</id><snippet>any</snippet></ROW><ROW><id>6164662</id><snippet>g=&lt;generator&gt;</snippet></ROW><ROW><id>6164662</id><snippet>g[0] or g[1] or g[2] or ... or g[N]</snippet></ROW><ROW><id>6164662</id><snippet>yourJson['data']</snippet></ROW><ROW><id>6164764</id><snippet>NvAPI_Initialize</snippet></ROW><ROW><id>6165040</id><snippet>tview = gtk.TextView()
#background
tview.modify_base(gtk.STATE_NORMAL,gtk.gdk.color_parse('#000000'))
#foreground
tview.modify_text(gtk.STATE_NORMAL,gtk.gdk.color_parse('#FFFFFF'))
#bonus font
tview.modify_font(pango.FontDescription('Monospace 11'))
</snippet></ROW><ROW><id>6165050</id><snippet>In [23]: d = collections.OrderedDict([
   ....:   ("ALIVE", (1, 4, False)),
   ....:   ("DEAD", (2, 1, True)),
   ....: ])

In [25]: d["ALIVE"]
Out[25]: (1, 4, False)

In [26]: d.values()[0]
Out[26]: (1, 4, False)

In [27]: d.values()[1]
Out[27]: (2, 1, True)
</snippet></ROW><ROW><id>6165303</id><snippet>import numpy as np

lst = [3.18,10.57,14.95]
arr = np.array(lst)

diff = np.diff(arr)

&gt;&gt;&gt; diff
array([ 7.39,  4.38])
</snippet></ROW><ROW><id>6165303</id><snippet>diff_list = list(diff)
</snippet></ROW><ROW><id>6165303</id><snippet>for item in diff: 
    print(item)

7.39
4.38
</snippet></ROW><ROW><id>6165303</id><snippet>t = timeit.Timer("[b - a for a, b in zip(l, l[1:])]", "l = range(int(1e6))")
print(t.timeit(1))
&gt;&gt;&gt; 0.523894071579

t = timeit.Timer("list(np.diff(np.array(l)))", "import numpy as np; l = range(int(1e6))")
print(t.timeit(1))
&gt;&gt;&gt; 0.484916915894

t = timeit.Timer("diffs = [l[x + 1] - l[x] for x in range(len(l) - 1)]", "l = range(int(1e6))")
print(t.timeit(1))
&gt;&gt;&gt; 0.363043069839

t = timeit.Timer("[(x, y, y - x) for (x, y) in itertools.izip(l, it)]", "l = range(int(1e6)); it = iter(l); it.next()")
print(t.timeit(1))
&gt;&gt;&gt; 0.54354596138

# pairwise solution
t = timeit.Timer("a, b = itertools.tee(l); next(b, None); [(x, y) for x, y in itertools.izip(a, b)]", "l = range(int(1e6));")
print(t.timeit(1))
&gt;&gt;&gt; 0.477301120758
</snippet></ROW><ROW><id>6165450</id><snippet>print [ord(i) for i in section[0:2]]
</snippet></ROW><ROW><id>6165450</id><snippet>print [hex(ord(i)) for i in section[0:2]]
</snippet></ROW><ROW><id>6165533</id><snippet>import types, weakref

class Dummy():
    def __init__(self, name):
        self.name = name
    def __del__(self):
        print "delete",self.name

d2 = Dummy("d2")
def func(self):
    print "func called"
d2.func = types.MethodType(func, weakref.ref(d2)) #This works
#d2.func = func.__get__(weakref.ref(d2), Dummy) #This works too
d2.func()
del d2
d2 = None
print "after d2"
</snippet></ROW><ROW><id>6165800</id><snippet>    proxy = "YOUR_PROXY_GOES_HERE"
    proxies = {"http":"http://%s" % proxy}
    headers={'User-agent' : 'Mozilla/5.0'}
    proxy_support = urllib2.ProxyHandler(proxies)
    opener = urllib2.build_opener(proxy_support, urllib2.HTTPHandler(debuglevel=1))
    urllib2.install_opener(opener)

    req = urllib2.Request(url, None, headers)
    html = urllib2.urlopen(req).read()
    print html
</snippet></ROW><ROW><id>6165812</id><snippet>nvapi_QueryInterface</snippet></ROW><ROW><id>6165812</id><snippet>nvapi_QueryInterface</snippet></ROW><ROW><id>6165812</id><snippet>NvAPI_GPU_GetUsages</snippet></ROW><ROW><id>6165812</id><snippet>NvAPI_GPU_GetDynamicPstatesInfoEx</snippet></ROW><ROW><id>6165812</id><snippet>NV_GPU_DYNAMIC_PSTATES_INFO_EX</snippet></ROW><ROW><id>6165812</id><snippet>NV_GPU_DYNAMIC_PSTATES_INFO_EX</snippet></ROW><ROW><id>6165812</id><snippet>NvAPI_GPU_GetDynamicPstatesInfoEx</snippet></ROW><ROW><id>6165812</id><snippet>Enter()
NvAPI_GPU_GetDynamicPstatesInfoEx(array_of_structs)
Exit()
</snippet></ROW><ROW><id>6166042</id><snippet>http://mywebsite.com?user=blah&amp;mystring=I_am_happy_%26_sad
</snippet></ROW><ROW><id>6166068</id><snippet>timeit</snippet></ROW><ROW><id>6166068</id><snippet>$ python -m timeit 'sum = 0
&gt; for i in xrange(0, 300):
&gt;     sum += i'
10000 loops, best of 3: 21.8 usec per loop

$ python -m timeit 'sum = 0
&gt; for i in xrange(0, 100):
&gt;     sum += i
&gt; for i in xrange(100, 200):
&gt;     sum += i
&gt; for i in xrange(200, 300):
&gt;     sum += i'
10000 loops, best of 3: 22.8 usec per loop
</snippet></ROW><ROW><id>6166068</id><snippet>$ python -m timeit 'sum(xrange(300))'
100000 loops, best of 3: 5.34 usec per loop
</snippet></ROW><ROW><id>6166068</id><snippet>&gt;&gt;&gt; for index, item in enumerate(vect):
...     results = do_stuff_with(item)
...     if index % 100 == 0 and should_we_stop(results):
...         break
</snippet></ROW><ROW><id>6166068</id><snippet>do_stuff_with()</snippet></ROW><ROW><id>6166068</id><snippet>tuple</snippet></ROW><ROW><id>6166068</id><snippet>&gt;&gt;&gt; for item in vect:
...     finished, results = do_stuff_with(item)
...     if finished:
...         break
</snippet></ROW><ROW><id>6166123</id><snippet>youtube-dl "http://www.youtube.com/watch?v=dvsdgyuv" -o "%(title)s-%(id)s.%(ext)s."
</snippet></ROW><ROW><id>6166164</id><snippet>layout</snippet></ROW><ROW><id>6166164</id><snippet>widget</snippet></ROW><ROW><id>6166164</id><snippet>widget</snippet></ROW><ROW><id>6166219</id><snippet>var i = 1
while (i &lt; 10) {
  println("I like side effects, this is number "+i)
  i += 1
}
case class C(var i: Int, var set: Boolean = false)
def setMe(c: C) = { if (!c.set) { c.set = true; c.i += 1 }; c }
setMe(C(5))
</snippet></ROW><ROW><id>6166219</id><snippet>for (i &lt;- 1 to 10) println("Sometimes side effects are a necessary evil; this is number"+i)
case class C(i: Int, set: Boolean = false)
def setIt(c: C, f: Int=&gt;Int) = C(f(c.i), true)
setIt(C(5), _+1)
</snippet></ROW><ROW><id>6166219</id><snippet>def x(a: Int, b: Int) = a + b
def y = Function.curried(x _)(1)
</snippet></ROW><ROW><id>6166219</id><snippet>def x(a: Int)(b: Int) = a + b
val y = x(1) _
</snippet></ROW><ROW><id>6166530</id><snippet>sys.platform</snippet></ROW><ROW><id>6166530</id><snippet>import sys
if sys.platform == 'win32':
    print("win")
else:
    print("winner!")
</snippet></ROW><ROW><id>6166530</id><snippet>win32</snippet></ROW><ROW><id>6166585</id><snippet>adjustSize()</snippet></ROW><ROW><id>6166585</id><snippet>MainWindow</snippet></ROW><ROW><id>6166585</id><snippet>QWidget *w = &lt;the widget you resized&gt;-&gt;parentWidget();
while (w) {
  w-&gt;adjustSize();
  w = w-&gt;parentWidget();
}
</snippet></ROW><ROW><id>6166995</id><snippet>currentIndex</snippet></ROW><ROW><id>6166995</id><snippet>tabs.currentChanged.connect(lambda index: foo(index));
</snippet></ROW><ROW><id>6167005</id><snippet>product_id</snippet></ROW><ROW><id>6167005</id><snippet>product</snippet></ROW><ROW><id>6167005</id><snippet>detail</snippet></ROW><ROW><id>6167005</id><snippet>product_id</snippet></ROW><ROW><id>6167005</id><snippet>question</snippet></ROW><ROW><id>6167005</id><snippet>POST</snippet></ROW><ROW><id>6167005</id><snippet>question</snippet></ROW><ROW><id>6167005</id><snippet>product_id</snippet></ROW><ROW><id>6167005</id><snippet>detail</snippet></ROW><ROW><id>6167005</id><snippet>action</snippet></ROW><ROW><id>6167005</id><snippet>url</snippet></ROW><ROW><id>6167005</id><snippet>action</snippet></ROW><ROW><id>6167005</id><snippet>product_id</snippet></ROW><ROW><id>6167005</id><snippet>question</snippet></ROW><ROW><id>6167005</id><snippet>product</snippet></ROW><ROW><id>6167005</id><snippet>QuestionForm</snippet></ROW><ROW><id>6167005</id><snippet>question</snippet></ROW><ROW><id>6167005</id><snippet>Question</snippet></ROW><ROW><id>6167005</id><snippet>url</snippet></ROW><ROW><id>6167005</id><snippet>products/detail.html</snippet></ROW><ROW><id>6167005</id><snippet>&lt;form action="{% url question product.pk %}" method="post"&gt;
 .... 
&lt;/form&gt;
</snippet></ROW><ROW><id>6167005</id><snippet>reverse</snippet></ROW><ROW><id>6167005</id><snippet>detail</snippet></ROW><ROW><id>6167005</id><snippet>def detail(request, product_id):
    p = get_object_or_404(Product, pk=product_id)
    f = QuestionForm()
    return render_to_response('products/detail.html', {
        'title' : p.title, 
        'product': p, 
        'action': reverse("question", args=[p.pk,]),
        'form' : f},
    context_instance = RequestContext(request))
</snippet></ROW><ROW><id>6167005</id><snippet>&lt;form action="{{ action }}" method="post"&gt;
 .... 
&lt;/form&gt;
</snippet></ROW><ROW><id>6167005</id><snippet>question</snippet></ROW><ROW><id>6167005</id><snippet>Question</snippet></ROW><ROW><id>6167005</id><snippet>def question(request, product_id):
    ...
    new_question.product = p
</snippet></ROW><ROW><id>6167086</id><snippet>&gt;&gt;&gt; re.sub("([0-9]+:[0-9]+)", "\\1.0", ':: 1:62 2:31 :: 3:4 4:32')
':: 1:62.0 2:31.0 :: 3:4.0 4:32.0'
</snippet></ROW><ROW><id>6167246</id><snippet>population</snippet></ROW><ROW><id>6167246</id><snippet>population</snippet></ROW><ROW><id>6167246</id><snippet>tuple</snippet></ROW><ROW><id>6167246</id><snippet>str</snippet></ROW><ROW><id>6167246</id><snippet>[:]</snippet></ROW><ROW><id>6167290</id><snippet>from django.shortcuts import render_to_response

from sqlalchemy import *
from sqlalchemy.orm import *

import formencode
from formencode import validators, htmlfill

engine = create_engine("mysql+mysqldb://root:@localhost/testdb",echo = True)
#create database link

metadata = MetaData(engine)
session = create_session()

#database table 
person_table = Table('person', metadata,
                     Column('id', Integer, primary_key = True),
                     Column('name', String(40)),
                     Column('age', Integer),
                     Column('about', String(100))
                     )

metadata.create_all(engine)#create database if not exist

class Person(object):#create a class for mapping
    def __init__(self,name,age,about):
        self.name = name
        self.age = age
        self.about = about
    def __repr__(self):
        return self.name, self.age, self.about

mapper(Person, person_table) #define map

class PersonValid(formencode.Schema):#for validation
    name = validators.String(not_empty=True, min = 3, max = 40)
    age = validators.Int(not_empty = True, min=1, max=120)
    about = validators.String(not_empty=True, min = 5, max = 100)


def insert_d(request): #insert def

 #for template page
    out = """

    &lt;table&gt;
      &lt;tr&gt;
      &lt;td&gt;Name:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" name = "name"/&gt;
      &lt;form:error name = "name"/&gt;
      &lt;!--form:iferror name="name"&gt;Horrible horror message&lt;/form:iferror--&gt;
      &lt;td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;Age:&lt;/td&gt;
      &lt;td&gt;&lt;input type="text" name="age"/&gt;
      &lt;form:error name="age" /&gt;
      &lt;!--form:iferror name="age"&gt;Horrible horror message&lt;/form:iferror--&gt;
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
      &lt;td&gt;About&lt;/td&gt;
      &lt;td&gt;&lt;textarea name="about"&gt;&lt;/textarea&gt;
      &lt;form:error name="about" /&gt;
      &lt;!--form:iferror name="about"&gt;Horrible horror message&lt;/form:iferror--&gt;
      &lt;td&gt;
      &lt;/tr&gt;
      &lt;table&gt;
      &lt;input type = "submit" value = "Submit"&gt;

    """

    if request.method == 'POST':
        inp = {'name': request.POST['name'],
               'age': request.POST['age'],
               'about': request.POST['about']
               }
        try:
            PersonValid.to_python(inp)

            a_person = Person(['name'],
                              inp['age'],
                              inp['about']
                              )

            session.add(a_person)
            session.flush()
            return render_to_response('formencode/htmlfill.html',
                                      {'out': htmlfill.render(out,{} ),
                                       'text':"Saved OK"}
                                      )


        except validators.Invalid, e:

            val = htmlfill.render(out, e.error_dict or {})

    else:
        return render_to_response('formencode/htmlfill.html',
                                  {'out':out,'text':"POST NOT START"}
                                  )


    #html form

    #the htmlfill.html locate in "templete/formencode/" 
     directory contain the page below

&lt;form name="out" method="POST" action="/fcode_alch/"&gt;

{%autoescape off%}    
{{text}}
{{out}}    
{%endautoescape%}
</snippet></ROW><ROW><id>6167332</id><snippet>vim_django</snippet></ROW><ROW><id>6167332</id><snippet>/usr/bin</snippet></ROW><ROW><id>6167332</id><snippet>vim_django</snippet></ROW><ROW><id>6167332</id><snippet>#!/bin/bash</snippet></ROW><ROW><id>6167332</id><snippet>PROJECT=`python -c "import os; print os.getcwd().partition('Solutions')[2].split(os.sep)[1]"`
export PYTHONPATH="${PYTHONPATH}:/path/to/django-projects-parent/"
DJANGO_SETTINGS_MODULE=$PROJECT.settings vim $@
</snippet></ROW><ROW><id>6167332</id><snippet>vim_django urls.py(or other files)</snippet></ROW><ROW><id>6167332</id><snippet>Ctrl-x &amp; Ctrl-o</snippet></ROW><ROW><id>6167332</id><snippet>PROJECT</snippet></ROW><ROW><id>6167332</id><snippet>Solutions</snippet></ROW><ROW><id>6167353</id><snippet>for i in range(10): print "foo"; print "bar"
</snippet></ROW><ROW><id>6167353</id><snippet>if</snippet></ROW><ROW><id>6167353</id><snippet>for i in range(10): print "i equals 9" if i==9 else None
</snippet></ROW><ROW><id>6167353</id><snippet>try ... except</snippet></ROW><ROW><id>6167353</id><snippet>except</snippet></ROW><ROW><id>6167353</id><snippet>try</snippet></ROW><ROW><id>6167353</id><snippet>try</snippet></ROW><ROW><id>6167353</id><snippet>pass</snippet></ROW><ROW><id>6167379</id><snippet>s = s.replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '') 
</snippet></ROW><ROW><id>6167432</id><snippet>from BeautifulSoup import BeautifulSoup as bs
root=lh.tostring(sliderRoot) #convert the generated HTML to a string
soup=bs(root)                #make BeautifulSoup
prettyHTML=soup.prettify()   #prettify the html
</snippet></ROW><ROW><id>6167611</id><snippet>cur = con.cursor    # sets `cur` to a method
</snippet></ROW><ROW><id>6167611</id><snippet>cur = con.cursor()  # calls the method and sets `cur` to the return value
</snippet></ROW><ROW><id>6167611</id><snippet>cur</snippet></ROW><ROW><id>6167611</id><snippet>execute</snippet></ROW><ROW><id>6168732</id><snippet>sqlite3_changes</snippet></ROW><ROW><id>6168815</id><snippet>random.sample(l, random.randint(1, len(l)))
</snippet></ROW><ROW><id>6169015</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>6169015</id><snippet>sys.path</snippet></ROW><ROW><id>6169099</id><snippet>w.connect(action, QtCore.SIGNAL("activated()"), aTest)
</snippet></ROW><ROW><id>6169099</id><snippet>w.connect(action, QtCore.SIGNAL("triggered()"), aTest)
</snippet></ROW><ROW><id>6169099</id><snippet>changed()</snippet></ROW><ROW><id>6169099</id><snippet>hovered()</snippet></ROW><ROW><id>6169099</id><snippet>toggled()</snippet></ROW><ROW><id>6169099</id><snippet>triggered()</snippet></ROW><ROW><id>6169274</id><snippet>"\r"</snippet></ROW><ROW><id>6169274</id><snippet>sys.stdout.write("\rDoing thing %i" % i)
sys.stdout.flush()
</snippet></ROW><ROW><id>6169274</id><snippet>def startProgress(title):
    global progress_x
    sys.stdout.write(title + ": [" + "-"*40 + "]" + chr(8)*41)
    sys.stdout.flush()
    progress_x = 0

def progress(x):
    global progress_x
    x = int(x * 40 // 100)
    sys.stdout.write("#" * (x - progress_x))
    sys.stdout.flush()
    progress_x = x

def endProgress():
    sys.stdout.write("#" * (40 - progress_x) + "]\n")
    sys.stdout.flush()
</snippet></ROW><ROW><id>6169274</id><snippet>startProgress</snippet></ROW><ROW><id>6169274</id><snippet>progress(x)</snippet></ROW><ROW><id>6169274</id><snippet>x</snippet></ROW><ROW><id>6169274</id><snippet>endProgress()</snippet></ROW><ROW><id>6169323</id><snippet>try:
    ftp.cwd(name)
except ftplib.error_perm as detail:
    print("It's probably not a directory:", detail)
</snippet></ROW><ROW><id>6169363</id><snippet>result = mystring.rpartition(':')[2]
</snippet></ROW><ROW><id>6169363</id><snippet>:</snippet></ROW><ROW><id>6169363</id><snippet>result = mystring.split(':')[-1]
</snippet></ROW><ROW><id>6169429</id><snippet>r'^/rss/(?P&lt;anynumber&gt;\d+)/(?P&lt;anystring&gt;.+)/$'
</snippet></ROW><ROW><id>6169429</id><snippet>&lt;...&gt;</snippet></ROW><ROW><id>6169429</id><snippet>anynumber</snippet></ROW><ROW><id>6169429</id><snippet>anynumber</snippet></ROW><ROW><id>6169429</id><snippet>anystring</snippet></ROW><ROW><id>6169429</id><snippet>\d+</snippet></ROW><ROW><id>6169429</id><snippet>\d{1,4}</snippet></ROW><ROW><id>6169429</id><snippet>(?P&lt;anystring&gt;.+)</snippet></ROW><ROW><id>6169429</id><snippet>'letters/moreletters'</snippet></ROW><ROW><id>6169429</id><snippet>\w</snippet></ROW><ROW><id>6169429</id><snippet>(?P&lt;anystring&gt;\w+)</snippet></ROW><ROW><id>6169429</id><snippet>(?P&lt;anystring&gt;[a-zA-Z1-9:;_{}\[\]]</snippet></ROW><ROW><id>6169429</id><snippet>url</snippet></ROW><ROW><id>6169429</id><snippet>{% url view-name arg1 arg2 %}</snippet></ROW><ROW><id>6169429</id><snippet>def makerss(request, anystring=None, anynumber=None):
</snippet></ROW><ROW><id>6169429</id><snippet>anystring</snippet></ROW><ROW><id>6169429</id><snippet>anystring</snippet></ROW><ROW><id>6169429</id><snippet>anynumber</snippet></ROW><ROW><id>6169429</id><snippet>urlpatterns = patterns('',
    url(r'^rss/(?P&lt;anystring&gt;\w+)/$', 'rss.rssama.views.makerss', name='rss-anystring'),
    url(r'^rss/(?P&lt;anynumber&gt;\d+)/(?P&lt;anystring&gt;\w+)/$', 'rss.rssama.views.makerss', name='rss-number-string'),
    url(r'^$', 'rss.rssama.views.home'),    
)
</snippet></ROW><ROW><id>6169429</id><snippet>def makerss(request, anystring=None, anynumber=None):
    if anystring:
        if anynumber:
            #Do something with the string and the number
        else:
            #Do something with just the string
</snippet></ROW><ROW><id>6169902</id><snippet>sudo apt-get install zlib1g-dev</snippet></ROW><ROW><id>6169902</id><snippet>configure</snippet></ROW><ROW><id>6169902</id><snippet>make</snippet></ROW><ROW><id>6169902</id><snippet>make install</snippet></ROW><ROW><id>6169902</id><snippet>--prefix</snippet></ROW><ROW><id>6169902</id><snippet>./configure --prefix=/opt/python2.7 + other options
make
make install
</snippet></ROW><ROW><id>6169902</id><snippet>./configure --help</snippet></ROW><ROW><id>6169902</id><snippet>python -c "import sysconfig; print sysconfig.get_config_var('CONFIG_ARGS')"
</snippet></ROW><ROW><id>6169902</id><snippet>zlib</snippet></ROW><ROW><id>6169902</id><snippet>sqlite3</snippet></ROW><ROW><id>6170306</id><snippet>forloop.parentloop.first</snippet></ROW><ROW><id>6170306</id><snippet>{% if forloop.parentloop.first %}     
   I am in the first loop of the parent
{% else %}
{% if forloop.first %}  
    &lt;div class='side_header' id='dark_gamelink_side'&gt;
        &lt;a class='actionheader' href=""&gt;&lt;/a&gt;
    &lt;/div&gt;
{% endif %}
{% endif %}
</snippet></ROW><ROW><id>6170354</id><snippet>autopct</snippet></ROW><ROW><id>6170354</id><snippet>autopct='%.2f'</snippet></ROW><ROW><id>6170354</id><snippet>'%.2f'</snippet></ROW><ROW><id>6170354</id><snippet>pct</snippet></ROW><ROW><id>6170354</id><snippet>'%.2f'%pct</snippet></ROW><ROW><id>6170354</id><snippet>import matplotlib.pyplot as plt
plt.figure()
values = [3, 12, 5, 8] 
labels = ['a', 'b', 'c', 'd'] 
plt.pie(values, labels=labels, autopct='%.2f')
plt.show()
</snippet></ROW><ROW><id>6170354</id><snippet>autopct</snippet></ROW><ROW><id>6170354</id><snippet>import matplotlib.pyplot as plt

plt.figure()
values = [3, 12, 5, 8] 
labels = ['a', 'b', 'c', 'd'] 

def my_autopct(pct):
    total=sum(values)
    val=int(pct*total/100.0)
    return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)

plt.pie(values, labels=labels, autopct=my_autopct)
plt.show()
</snippet></ROW><ROW><id>6170354</id><snippet>pct</snippet></ROW><ROW><id>6170354</id><snippet>my_autopct</snippet></ROW><ROW><id>6170354</id><snippet>my_autopct(pct)</snippet></ROW><ROW><id>6170695</id><snippet>numpy.argmax()</snippet></ROW><ROW><id>6170695</id><snippet>max()</snippet></ROW><ROW><id>6170695</id><snippet>index = max(range(len(my_list)), key=lambda i: my_list[i].id)
</snippet></ROW><ROW><id>6170695</id><snippet>index = max(enumerate(my_list), key=lambda x: x[1].id)[0]
</snippet></ROW><ROW><id>6170695</id><snippet>id</snippet></ROW><ROW><id>6170697</id><snippet>python</snippet></ROW><ROW><id>6170697</id><snippet>python3</snippet></ROW><ROW><id>6170697</id><snippet>python2</snippet></ROW><ROW><id>6170697</id><snippet>python2.7</snippet></ROW><ROW><id>6170697</id><snippet>python2.6</snippet></ROW><ROW><id>6170697</id><snippet>python2.6 file.py
</snippet></ROW><ROW><id>6170760</id><snippet>from core.models import Variable</snippet></ROW><ROW><id>6170760</id><snippet>Variables</snippet></ROW><ROW><id>6170760</id><snippet>Variable</snippet></ROW><ROW><id>6170760</id><snippet>models</snippet></ROW><ROW><id>6170760</id><snippet>models.storage</snippet></ROW><ROW><id>6170760</id><snippet>__init__.py</snippet></ROW><ROW><id>6170760</id><snippet>models</snippet></ROW><ROW><id>6170760</id><snippet>settings.py</snippet></ROW><ROW><id>6170760</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>6171353</id><snippet>import subprocess

#simple caller, disguard output

subprocess.call("php /path/to/my/old/script.php")

# if you want output

proc = subprocess.Popen("php /path/to/my/script.php", shell=True,
stdout=subprocess.PIPE)

script_response = proc.stdout.read()
</snippet></ROW><ROW><id>6171476</id><snippet>class p(Protocol):
    factory = None
    ...
class f(Factory):
    protocol = p
    data = None
    def buildProtocol(self, addr):
        returnValue = p()
        returnValue.factory = self
        return returnValue
</snippet></ROW><ROW><id>6171511</id><snippet>1. Get the .tar.gz file into your own home directory.
2. tar zxvf Py*.tar.gz
3. cd Py*1
4. ./configure --prefix=/home/python27
5. make
6. make install
</snippet></ROW><ROW><id>6171511</id><snippet>a. sudo apt-get install something-dev
b. make
</snippet></ROW><ROW><id>6171511</id><snippet>a. make clean
b. ./configure --prefix=/home/python27
c. make
</snippet></ROW><ROW><id>6171511</id><snippet>./configure --help |less</snippet></ROW><ROW><id>6171511</id><snippet>make clean</snippet></ROW><ROW><id>6171511</id><snippet>make &gt;make.out 2&gt;&amp;1</snippet></ROW><ROW><id>6171511</id><snippet>less</snippet></ROW><ROW><id>6171511</id><snippet>gcc</snippet></ROW><ROW><id>6171511</id><snippet>setup.py</snippet></ROW><ROW><id>6171697</id><snippet>def read_the_socket():
    sendSocket.send ( 'request posit' )
    data = sendSocket.recv( 100 )
    gui.after(5000, read_the_socket)


gui.after_idle(read_the_socket)
</snippet></ROW><ROW><id>6171750</id><snippet>name = property (get_name, set_name)</snippet></ROW><ROW><id>6171750</id><snippet>class Critter (object):
    def __init__ (self, name):
        print "A new critter has been born."
        self.__name = name

    def get_name (self):
        return self.__name

    def set_name (self, new_name):
        if new_name == "":
            print "The name can't be blank. Ass."
        else:
            self.__name = new_name
            print "Namt change successful."

    name = property (get_name, set_name)

crit = Critter ("Pooch Dog")
print crit.name
crit.name = "Mad Dog"
print crit.name
</snippet></ROW><ROW><id>6172058</id><snippet>d = ['aatt','aaga','aaac','gtag']
</snippet></ROW><ROW><id>6172058</id><snippet>maxLen = max(map(len,l))
</snippet></ROW><ROW><id>6172058</id><snippet>freqDict = dict([(i,{'a':0.0,'t':0.0,'c':0.0,'g':0.0}) for i in xrange(maxLen)])
</snippet></ROW><ROW><id>6172058</id><snippet>for s in l:
  for i,b in enumerate(s):
    freqDict[i][b] += 1
</snippet></ROW><ROW><id>6172058</id><snippet>In [26]: freqDict
Out[26]: 
{0: {'a': 3.0, 'c': 0.0, 'g': 1.0, 't': 0.0},
 1: {'a': 3.0, 'c': 0.0, 'g': 0.0, 't': 1.0},
 2: {'a': 2.0, 'c': 0.0, 'g': 1.0, 't': 1.0},
 3: {'a': 1.0, 'c': 1.0, 'g': 1.0, 't': 1.0}}
</snippet></ROW><ROW><id>6172058</id><snippet>for i in freqDict:
  vs = freqDict[i]
  sumvs = sum(vs.values())
  print '%d\t%s' % (i,'\t'.join(['%s:%.1f' % (b[0],b[1]*100/sumvs) for b in vs.items()]))
</snippet></ROW><ROW><id>6172058</id><snippet>0   a:75.0  c:0.0   t:0.0   g:25.0
1   a:75.0  c:0.0   t:25.0  g:0.0
2   a:50.0  c:0.0   t:25.0  g:25.0
3   a:25.0  c:25.0  t:25.0  g:25.0
</snippet></ROW><ROW><id>6172332</id><snippet>Input text:     DODOD987654321
First match:    DODOD987654321
Second match:     DOD987654321 # Not found by re.finditer()
</snippet></ROW><ROW><id>6172368</id><snippet>long long</snippet></ROW><ROW><id>6172368</id><snippet>array</snippet></ROW><ROW><id>6172426</id><snippet>join</snippet></ROW><ROW><id>6172426</id><snippet>splitlines</snippet></ROW><ROW><id>6172426</id><snippet>&gt;&gt;&gt; string = '''
... this line number 1
... line 2
... line 3
... line 4
... '''
&gt;&gt;&gt; ''.join(string.splitlines())
'this line number 1line 2line 3line 4'
</snippet></ROW><ROW><id>6172426</id><snippet>.replace("\n", "")</snippet></ROW><ROW><id>6172426</id><snippet>\r\n</snippet></ROW><ROW><id>6172426</id><snippet>\n</snippet></ROW><ROW><id>6172426</id><snippet>&gt;&gt;&gt; "".join("a\r\nb\nc".splitlines())
'abc'
&gt;&gt;&gt; "a\r\nb\nc".replace("\n", "")
'a\rbc'
</snippet></ROW><ROW><id>6172810</id><snippet>day</snippet></ROW><ROW><id>6172810</id><snippet>datetime.date</snippet></ROW><ROW><id>6172810</id><snippet>datetime.datetime</snippet></ROW><ROW><id>6172810</id><snippet>datetime</snippet></ROW><ROW><id>6172810</id><snippet>date</snippet></ROW><ROW><id>6172810</id><snippet>friday = day - timedelta(days=day.weekday()) + timedelta(days=4, weeks=-1)
</snippet></ROW><ROW><id>6172810</id><snippet>timedelta(days=day.weekday())</snippet></ROW><ROW><id>6172810</id><snippet>day</snippet></ROW><ROW><id>6172810</id><snippet>+4d -1w = -3d</snippet></ROW><ROW><id>6172810</id><snippet>friday = day - timedelta(days=day.weekday() + 3)
</snippet></ROW><ROW><id>6172810</id><snippet>timedelta</snippet></ROW><ROW><id>6172810</id><snippet>from datetime import timedelta</snippet></ROW><ROW><id>6172810</id><snippet>import datetime</snippet></ROW><ROW><id>6172810</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>6173175</id><snippet>#</snippet></ROW><ROW><id>6173176</id><snippet>from mutagen import File

file = File('some.mp3') # mutagen can automatically detect format and type of tags
artwork = file.tags['APIC:'].data # access APIC frame and grab the image
with open('image.jpg', 'wb') as img:
   img.write(artwork) # write artwork to new image
</snippet></ROW><ROW><id>6174245</id><snippet>def validate(func):    
    def wrapped(self, *args, **kwargs):
        self.valid = True
        func(self, *args, **kwargs)
    return wrapped

class TestClass(object):
    @validate
    def do_some_work(self):
        print "some work done"

tc = TestClass()
tc.do_some_work()
print tc.valid
</snippet></ROW><ROW><id>6174796</id><snippet>e.msg</snippet></ROW><ROW><id>6174796</id><snippet>e.message</snippet></ROW><ROW><id>6174796</id><snippet>from urllib2 import urlopen, HTTPError

url = 'http://www.red-dove.com/frob'

try:
    data = urlopen(url)
except HTTPError, e:  # Python 2.5 syntax
    if e.code == 404:
        e.msg = 'data not found on remote: %s' % e.msg
    raise
</snippet></ROW><ROW><id>6174796</id><snippet>Traceback (most recent call last):
  File "c:\temp\test404.py", line 6, in &lt;module&gt;
    data = urlopen(url)
  File "C:\Python\Lib\urllib2.py", line 124, in urlopen
    return _opener.open(url, data)
  File "C:\Python\Lib\urllib2.py", line 387, in open
    response = meth(req, response)
  File "C:\Python\Lib\urllib2.py", line 498, in http_response
    'http', request, response, code, msg, hdrs)
  File "C:\Python\Lib\urllib2.py", line 425, in error
    return self._call_chain(*args)
  File "C:\Python\Lib\urllib2.py", line 360, in _call_chain
    result = func(*args)
  File "C:\Python\Lib\urllib2.py", line 506, in http_error_default
    raise HTTPError(req.get_full_url(), code, msg, hdrs, fp)
urllib2.HTTPError: HTTP Error 404: data not found on remote: Not Found
</snippet></ROW><ROW><id>6174796</id><snippet>from urllib2 import urlopen, HTTPError

url = 'http://www.red-dove.com/frob'

try:
    try:
        data = urlopen(url)
    except HTTPError, e:  # Python 2.5 syntax
        if e.code == 404:
            e.msg = 'data not found on remote: %s' % e.msg
        raise
except HTTPError, e:
    print e
</snippet></ROW><ROW><id>6174796</id><snippet>HTTP Error 404: data not found on remote: Not Found
</snippet></ROW><ROW><id>6174796</id><snippet>e.__dict__</snippet></ROW><ROW><id>6174796</id><snippet>{'__iter__': &lt;bound method _fileobject.__iter__ of &lt;socket._fileobject object at   0x00AF2EF0&gt;&gt;,
 'code': 404,
 'fileno': &lt;bound method _fileobject.fileno of &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'fp': &lt;addinfourl at 12003088 whose fp = &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'hdrs': &lt;httplib.HTTPMessage instance at 0x00B727B0&gt;,
 'headers': &lt;httplib.HTTPMessage instance at 0x00B727B0&gt;,
 'msg': 'data not found on remote: Not Found',
 'next': &lt;bound method _fileobject.next of &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'read': &lt;bound method _fileobject.read of &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'readline': &lt;bound method _fileobject.readline of &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'readlines': &lt;bound method _fileobject.readlines of &lt;socket._fileobject object at 0x00AF2EF0&gt;&gt;,
 'url': 'http://www.red-dove.com/frob'}
</snippet></ROW><ROW><id>6174842</id><snippet>self.client.login(username,password)
</snippet></ROW><ROW><id>6174845</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopq'
&gt;&gt;&gt; string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq'
&gt;&gt;&gt; string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopqrs'    
</snippet></ROW><ROW><id>6174845</id><snippet>itertools</snippet></ROW><ROW><id>6174845</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; from itertools import islice, cycle
&gt;&gt;&gt; def randstr():
...     return ''.join(islice(cycle(string.ascii_lowercase),
...                           random.randint(1, 50))).title()
...
&gt;&gt;&gt; randstr()
'Abcdefghijklmnopq'
&gt;&gt;&gt; randstr()
'Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq'
&gt;&gt;&gt; randstr()
'Abcdefghijklmnopqrs'    
</snippet></ROW><ROW><id>6174891</id><snippet>find()</snippet></ROW><ROW><id>6174891</id><snippet>findAll()</snippet></ROW><ROW><id>6174891</id><snippet>links = soup.findAll(href=re.compile("\.txt$"))
</snippet></ROW><ROW><id>6175144</id><snippet>cache_size</snippet></ROW><ROW><id>6175422</id><snippet>os.environ</snippet></ROW><ROW><id>6175422</id><snippet>tearDown</snippet></ROW><ROW><id>6175422</id><snippet>import os

def setCurrentUser(email, user_id, is_admin=False):
    os.environ['USER_EMAIL'] = email or ''
    os.environ['USER_ID'] = user_id or ''
    os.environ['USER_IS_ADMIN'] = '1' if is_admin else '0'

def logoutCurrentUser():
    setCurrentUser(None, None)
</snippet></ROW><ROW><id>6175438</id><snippet>number_of_infants</snippet></ROW><ROW><id>6175438</id><snippet>number_of_infants = number_of_passengers - number_of_adults - number_of_youths - number_of_children
</snippet></ROW><ROW><id>6175438</id><snippet>random</snippet></ROW><ROW><id>6175438</id><snippet>0</snippet></ROW><ROW><id>6175438</id><snippet>number_of_passengers - number_of_adults - number_of_youths - number_of_children</snippet></ROW><ROW><id>6175438</id><snippet>number_of_infants</snippet></ROW><ROW><id>6175438</id><snippet>random()</snippet></ROW><ROW><id>6175438</id><snippet>for (x,y) in enumerate(numbers_of_paxes):
    print(y)
</snippet></ROW><ROW><id>6175438</id><snippet>for (x,y) in enumerate(numbers_of_paxes):
    print(x, y)
</snippet></ROW><ROW><id>6175438</id><snippet>for y in numbers_of_paxes:
    print(y)
</snippet></ROW><ROW><id>6175573</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>6175573</id><snippet>results = htmlPage.xpath("/html/body//a")
</snippet></ROW><ROW><id>6175573</id><snippet>text_content()</snippet></ROW><ROW><id>6175573</id><snippet>for a_tag in results:
    print a_tag.text_content() # prints bthe whol string: "This is a sentence with some italic text-formatting I want to parse."
</snippet></ROW><ROW><id>6176034</id><snippet>theme.use_color = True</snippet></ROW><ROW><id>6176133</id><snippet>Load</snippet></ROW><ROW><id>6176133</id><snippet>class XmlReportGenerator(object):
    def __init__(self):
    # __init__, add_flight_row, and Save

    def load(self, path='Flights.xml'):
        try:
            self.doc = etree.ElementTree()
            self.root = self.doc.parse(path)
        except IOError:
            pass
</snippet></ROW><ROW><id>6176133</id><snippet># day 1
x=XmlReportGenerator()
x.load('test.xml') # Silently catches the error if the file does not exit yet
x.test_test("a","b")
x.Save('test.xml')

# day2
x=XmlReportGenerator()
x.load('test.xml')
x.test_test("c","d")
x.Save("test.xml")
</snippet></ROW><ROW><id>6176498</id><snippet>rowconfigure</snippet></ROW><ROW><id>6176498</id><snippet>columnconfigure</snippet></ROW><ROW><id>6176498</id><snippet>weight</snippet></ROW><ROW><id>6176642</id><snippet>IterationError</snippet></ROW><ROW><id>6176642</id><snippet>EnvironmentError</snippet></ROW><ROW><id>6176827</id><snippet>totals = [0] * 12
for widget in widgets:
    totals[widget.datetime.month - 1] += 1
</snippet></ROW><ROW><id>6176827</id><snippet>totals</snippet></ROW><ROW><id>6176827</id><snippet>- 1</snippet></ROW><ROW><id>6176827</id><snippet>from collections import Counter
totals = Counter(widget.datetime.month for widget in widgets)
</snippet></ROW><ROW><id>6176830</id><snippet>create_window</snippet></ROW><ROW><id>6177241</id><snippet>import re
bad_words = ["stupid", "idiot"]
regex = re.compile("|".join(re.escape(word) for word in bad_words), re.IGNORECASE)
print regex.search('youareanidiot').group()

# prints "idiot"
</snippet></ROW><ROW><id>6177769</id><snippet>image = image.resize(THUMB_SIZE, Image.ANTIALIAS)        
thumb_fn = fn + '-thumb' + ext
tf = NamedTemporaryFile()
image.save(tf.name, 'JPEG')
</snippet></ROW><ROW><id>6178200</id><snippet>import webbrowser
webbrowser.open("file.txt")
</snippet></ROW><ROW><id>6178200</id><snippet>osCommandString = "notepad.exe file.txt"
os.system(osCommandString)
</snippet></ROW><ROW><id>6178200</id><snippet>import subprocess as sp
programName = "notepad.exe"
fileName = "file.txt"
sp.Popen([programName, fileName])
</snippet></ROW><ROW><id>6178339</id><snippet>$movie-&gt;getTitle()
$movie-&gt;getArtist()
$movie-&gt;getTrackNumber()
$movie-&gt;getYear()
$movie-&gt;getFrameHeight()
$movie-&gt;getFrameWidth()
$movie-&gt;getPixelFormat()
$movie-&gt;getBitRate()
</snippet></ROW><ROW><id>6178707</id><snippet>getattr()</snippet></ROW><ROW><id>6178707</id><snippet>def get_monthly_totals(year, attr):
    queryset = Widget.objects.filter(**{attr + "__year": year})
    totals = [0] * 12
    for widget in queryset:
            totals[getattr(widget, attr).month -1] += 1
    return totals

totals_manufactured = gtotalset_monthly_totals(year, "manufactured")
totals_sold = get_monthly_totals(year, "sold")
</snippet></ROW><ROW><id>6179214</id><snippet>self.__class__.iMenuNumber</snippet></ROW><ROW><id>6179214</id><snippet>baseMENUS.iMenuNumber</snippet></ROW><ROW><id>6179214</id><snippet>self.iMenuNumber</snippet></ROW><ROW><id>6179369</id><snippet>    if unhappiness &lt; 5:
        mood = "happy"
    elif 5 &lt;= unhappiness &lt;= 10:
        mood = "okay"
    elif 11 &lt;= unhappiness &lt;= 15:
        mood = "frustrated"
    else:
        mood = "mad"
</snippet></ROW><ROW><id>6179672</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>6179672</id><snippet>print 'Русский'.encode("cp866")
</snippet></ROW><ROW><id>6179750</id><snippet>import sys
from select import select

print "Press any key to configure or wait 5 seconds..."
timeout = 5
rlist, wlist, xlist = select([sys.stdin], [], [], timeout)

if rlist:
    print "Config selected..."
else:
    print "Timed out..."
</snippet></ROW><ROW><id>6179750</id><snippet>import sys, time, msvcrt

timeout = 5
startTime = time.time()
inp = None

print "Press any key to configure or wait 5 seconds... "
while True:
    if msvcrt.kbhit():
        inp = msvcrt.getch()
        break
    elif time.time() - startTime &gt; timeout:
        break

if inp:
    print "Config selected..."
else:
    print "Timed out..."
</snippet></ROW><ROW><id>6179863</id><snippet>itemconfigure</snippet></ROW><ROW><id>6179863</id><snippet>self.pip1</snippet></ROW><ROW><id>6179863</id><snippet>None</snippet></ROW><ROW><id>6179863</id><snippet>None</snippet></ROW><ROW><id>6179863</id><snippet>None</snippet></ROW><ROW><id>6179863</id><snippet>return pip</snippet></ROW><ROW><id>6179863</id><snippet>pips</snippet></ROW><ROW><id>6179863</id><snippet>def pips(self, x, y):
    pip = self.canvas.create_oval(x, y, x+9, y+9, fill='black', width=0)
    return pip
</snippet></ROW><ROW><id>6180019</id><snippet>    form = UploadFileForm(request.POST, request.FILES)
</snippet></ROW><ROW><id>6180075</id><snippet>%typemap (in,numinputs=0) element * (element temp) {
  $1 = &amp;temp;
}

%typemap (argout) element * {
  /* weight */
  {
    npy_intp dims[1] = { $1-&gt;ngi };
    PyObject * array = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)($1-&gt;weight));
    if (!array) SWIG_fail;
    $result = SWIG_Python_AppendOutput($result,array);
  }
  /* l */
  {
    npy_intp dims[2] = { $1-&gt;ngi, $1-&gt;dim };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)($1-&gt;l));
    if (!array) SWIG_fail;
    $result = SWIG_Python_AppendOutput($result,array);
  }
  /* n */
  {
    npy_intp dims[2] = { $1-&gt;ngi, $1-&gt;vertices };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)($1-&gt;n));
    if (!array) SWIG_fail;
    $result = SWIG_Python_AppendOutput($result,array);
  }
  /* dn */
  {
    npy_intp dims[3] = { $1-&gt;ngi, $1-&gt;vertices, $1-&gt;dim };
    PyObject * array = PyArray_SimpleNewFromData(3, dims, NPY_DOUBLE, (void*)($1-&gt;dn));
    if (!array) SWIG_fail;
    $result = SWIG_Python_AppendOutput($result,array);
  }
}
</snippet></ROW><ROW><id>6180075</id><snippet>element</snippet></ROW><ROW><id>6180075</id><snippet>element</snippet></ROW><ROW><id>6180075</id><snippet>element</snippet></ROW><ROW><id>6180075</id><snippet>weight, l, n, dn = get_element(dim, vertices, quadrature_degree, polynomial_degree)
</snippet></ROW><ROW><id>6180127</id><snippet>jsonify</snippet></ROW><ROW><id>6180127</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dumps({"results": [{"id":1, "username":"john"},{"id":2,"username":"doe"}]})
'{"results": [{"username": "john", "id": 1}, {"username": "doe", "id": 2}]}'
</snippet></ROW><ROW><id>6180127</id><snippet>jsonify</snippet></ROW><ROW><id>6180127</id><snippet>json.dumps</snippet></ROW><ROW><id>6180127</id><snippet>flask.jsonify</snippet></ROW><ROW><id>6180127</id><snippet>flask</snippet></ROW><ROW><id>6180127</id><snippet>jsonify</snippet></ROW><ROW><id>6180231</id><snippet>Exception</snippet></ROW><ROW><id>6180231</id><snippet>class ErrorWithCode(Exception):
    def __init__(self, code):
        self.code = code
    def __str__(self):
        return repr(self.code)

try:
    raise ErrorWithCode(1000)
except ErrorWithCode as e:
    print "Received error with code:", e.code
</snippet></ROW><ROW><id>6180231</id><snippet>args</snippet></ROW><ROW><id>6180231</id><snippet>class ErrorWithArgs(Exception):
    def __init__(self, *args):
        # *args is used to get a list of the parameters passed in
        self.args = [a for a in args]

try:
    raise ErrorWithArgs(1, "text", "some more text")
except ErrorWithArgs as e:
    print "%d: %s - %s" % (e.args[0], e.args[1], e.args[2])
</snippet></ROW><ROW><id>6180234</id><snippet>[d['jim'] for d in l]
</snippet></ROW><ROW><id>6180234</id><snippet>dict</snippet></ROW><ROW><id>6180234</id><snippet>dict()</snippet></ROW><ROW><id>6180238</id><snippet>from django.shortcuts import redirect
return redirect('some-view-name', reviewID=id)
</snippet></ROW><ROW><id>6180432</id><snippet>def foo(a, b):
    """
    Take your arguments back, I don't want them!

    a -- int
    b -- str
    """

    return a, b
</snippet></ROW><ROW><id>6180432</id><snippet>def foo(a: int, b: str):
    """Take your arguments back, I don't want them!"""

    return a, b
</snippet></ROW><ROW><id>6180643</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

association_table = Table('edges', Base.metadata,
    Column('predecessor', Integer, 
           ForeignKey('nodes.id'), primary_key=True),
    Column('successor', Integer, 
           ForeignKey('nodes.id'), primary_key=True))

path_table = Table('paths', Base.metadata,
    Column('predecessor', Integer, 
           ForeignKey('nodes.id'), primary_key=True),
    Column('successor', Integer, 
           ForeignKey('nodes.id'), primary_key=True))

class Node(Base):
    __tablename__ = 'nodes'
    id = Column(Integer, primary_key=True)
    # extra columns

    def __repr__(self):
        return '&lt;Node #%r&gt;' % (self.id,)

    successors = relationship('Node', backref='predecessors',
        secondary=association_table,
        primaryjoin=id == association_table.c.predecessor,
        secondaryjoin=id == association_table.c.successor)

    before = relationship('Node', backref='after',
        secondary=path_table,
        primaryjoin=id == path_table.c.predecessor,
        secondaryjoin=id == path_table.c.successor)

    def __lt__(self, other):
        return other in self.before

    def add_successor(self, other):
        if other in self.successors:
            return
        self.successors.append(other)
        self.before.append(other)
        for descendent in other.before:
            if descendent not in self.before:
                self.before.append(descendent)
        for ancestor in self.after:
            if ancestor not in other.after:
                other.after.append(ancestor)

    def del_successor(self, other):
        if not self &lt; other:
            # nodes are not connected, do nothing!
            return
        if not other in self.successors:
            # nodes aren't adjacent, but this *could*
            # be a warning...
            return

        self.successors.remove(other)

        # we buld up a set of nodes that will be affected by the removal
        # we just did.  
        ancestors = set(other.after)
        descendents = set(self.before)

        # we also need to build up a list of nodes that will determine
        # where the paths may be.  basically, we're looking for every 
        # node that is both before some node in the descendents and
        # ALSO after the ancestors.  Such nodes might not be comparable
        # to self or other, but may still be part of a path between
        # the nodes in ancestors and the nodes in descendents.
        ancestors_descendents = set()
        for ancestor in ancestors:
            ancestors_descendents.add(ancestor)
            for descendent in ancestor.before:
                ancestors_descendents.add(descendent)

        descendents_ancestors = set()
        for descendent in descendents:
            descendents_ancestors.add(descendent)
            for ancestor in descendent.after:
                descendents_ancestors.add(ancestor)
        search_set = ancestors_descendents &amp; descendents_ancestors

        known_good = set() # This is the 'paths' from the 
                           # original algorithm.  

        # as before, we need to initialize it with the paths we 
        # know are good.  this is just the successor edges in
        # the search set.
        for predecessor in search_set:
            for successor in search_set:
                if successor in predecessor.successors:
                    known_good.add((predecessor, successor))

        # We now can work our way through floyd_warshall to resolve
        # all adjacencies:
        for ancestor in ancestors:
            for descendent in descendents:
                if (ancestor, descendent) in known_good:
                    # already got this one, so we don't need to look for an
                    # intermediate.  
                    continue
                for intermediate in search_set:
                    if (ancestor, intermediate) in known_good \
                            and (intermediate, descendent) in known_good:
                        known_good.add((ancestor, descendent))
                        break # don't need to look any further for an
                              # intermediate, we can move on to the next
                              # descendent.  


        # sift through the bad nodes and update the links
        for ancestor in ancestors:
            for descendent in descendents:
                if descendent in ancestor.before \
                        and (ancestor, descendent) not in known_good:
                    ancestor.before.remove(descendent)
</snippet></ROW><ROW><id>6180817</id><snippet>Mike: Plane
Car
Paula: Plane
Train
Boat
Car
Bill: Boat
Train
Scott: Car
</snippet></ROW><ROW><id>6180817</id><snippet>import sys
from collections import defaultdict
import csv

# see http://stackoverflow.com/questions/6180609/group-and-check-mark-using-python
def main():
    # files = ["group.txt"]
    files = sys.argv[1:]
    if len(files) &lt; 1:
        print "usage: ./python_checkmark.py file1 [file2 ... filen]"

    name_map = defaultdict(set)

    for f in files:
        file_handle = open(f, "r")
        process_file(file_handle, name_map)
        file_handle.close()

    print_csv(sys.stdout, name_map) 

def process_file(input_file, name_map):
    cur_name = ""
    for line in input_file:
        if ":" in line:
            cur_name, item = [x.strip() for x in line.split(":")]
        else:
            item = line.strip()
        name_map[cur_name].add(item)


def print_csv(output_file, name_map):
    names = name_map.keys()
    items = set([])
    for item_set in name_map.values():
        items = items.union(item_set)

    writer = csv.writer(output_file, quoting=csv.QUOTE_MINIMAL)
    writer.writerow( [""] + names )
    for item in sorted(items):
        row_contents = map(lambda name:"X" if item in name_map[name] else "", names)
        row = [item] + row_contents
        writer.writerow( row )


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>6180817</id><snippet>,Mike,Bill,Scott,Paula 
Boat,,X,,X 
Car,X,,X,X 
Plane,X,,,X 
Train,,X,,X 
</snippet></ROW><ROW><id>6180822</id><snippet>  settings = dict()
  if request.env.http_host == 'http://127.0.0.1:8000'
       settings['development']=True
  else:
       settings['development']=False
  if settings['development']:
       db = DAL('sqlite://....')
  else:
       db = DAL('mysql://....')
</snippet></ROW><ROW><id>6180830</id><snippet>import rdflib
from rdflib.Graph import Graph
g = Graph()
g.parse("http://www.w3.org/2000/10/rdf-tests/rdfcore/ntriples/test.nt", 
        format="nt")
g.serialize("test.rdf", format="rdf/xml")
</snippet></ROW><ROW><id>6180905</id><snippet>class DoubleExample(Example):
    @Example.value.getter
    def value(self):
        return self.v * 2

o = Example()
o.value = 1
print o.value # prints "1"

p = DoubleExample()
p.value = 1
print p.value # prints "2"
</snippet></ROW><ROW><id>6180905</id><snippet>Example</snippet></ROW><ROW><id>6180905</id><snippet>class Example(object):</snippet></ROW><ROW><id>6180905</id><snippet>class Example:</snippet></ROW><ROW><id>6180905</id><snippet>class Foo(Bar, Baz)</snippet></ROW><ROW><id>6181013</id><snippet>gprof</snippet></ROW><ROW><id>6181133</id><snippet>bbox</snippet></ROW><ROW><id>6181133</id><snippet>winfo</snippet></ROW><ROW><id>6181210</id><snippet>i = getattr(target, fieldname)
</snippet></ROW><ROW><id>6181253</id><snippet>a</snippet></ROW><ROW><id>6181253</id><snippet>b</snippet></ROW><ROW><id>6181253</id><snippet>sqrt(a)+1</snippet></ROW><ROW><id>6181253</id><snippet>a</snippet></ROW><ROW><id>6181253</id><snippet>b</snippet></ROW><ROW><id>6181253</id><snippet>a - 1</snippet></ROW><ROW><id>6181253</id><snippet>if a - 3 == b</snippet></ROW><ROW><id>6181253</id><snippet>a / 2</snippet></ROW><ROW><id>6181343</id><snippet>&gt;&gt;&gt; from random import shuffle

&gt;&gt;&gt; def shuffle_word(word):
...    word = list(word)
...    shuffle(word)
...    return ''.join(word)
</snippet></ROW><ROW><id>6181343</id><snippet>&gt;&gt;&gt; L = ['foo', 'biology', 'sequence']
&gt;&gt;&gt; [shuffle_word(word) for word in L]
['ofo', 'lbyooil', 'qceaenes']
</snippet></ROW><ROW><id>6181406</id><snippet>splinter</snippet></ROW><ROW><id>6181406</id><snippet>from splinter.browser import Browser
browser = Browser()
browser.visit('http://google.com')
</snippet></ROW><ROW><id>6181406</id><snippet>splinter</snippet></ROW><ROW><id>6181406</id><snippet>splinter</snippet></ROW><ROW><id>6181406</id><snippet>browser.execute_script("$('body').empty()")
browser.evaluate_script("4+4") == 8
</snippet></ROW><ROW><id>6181483</id><snippet>lxml.html.text_content()</snippet></ROW><ROW><id>6181483</id><snippet>import lxml.html
t = lxml.html.fromstring("...")
t.text_content()
</snippet></ROW><ROW><id>6181483</id><snippet>lxml.etree.strip_tags()</snippet></ROW><ROW><id>6181537</id><snippet>value = mydict.get('index', 1024)
</snippet></ROW><ROW><id>6181537</id><snippet>1024</snippet></ROW><ROW><id>6181537</id><snippet>index</snippet></ROW><ROW><id>6181537</id><snippet>1024</snippet></ROW><ROW><id>6181537</id><snippet>index</snippet></ROW><ROW><id>6181656</id><snippet>def test_does_not_raise_on_valid_input(self):
    raised = False
    try:
        do_something(42)
    except:
        raised = True
    self.assertFalse(raised, 'Exception raised')
</snippet></ROW><ROW><id>6181656</id><snippet>Exception</snippet></ROW><ROW><id>6181656</id><snippet>def test_does_raise_on_invalid_input(self):
    self.assertRaises(OutOfCheese, do_something, 43)
</snippet></ROW><ROW><id>6181656</id><snippet>def test_what_is_42(self):
    self.assertEquals(do_something(42), 'Meaning of life')
</snippet></ROW><ROW><id>6181774</id><snippet>import sys
import urllib    

def application(environ, start_response):
   page_text = urllib.urlopen("http://www.google.com/").read()
   start_response('200 OK', [
     ('Content-Type', 'text/html'),
     ('Content-Length', str(len(page_text))),
   ])
   yield page_text
</snippet></ROW><ROW><id>6181784</id><snippet>import re

mystr = 'This is a string, with words!'
wordList = re.sub("[^\w]", " ",  mystr).split()
</snippet></ROW><ROW><id>6181956</id><snippet>python.vim</snippet></ROW><ROW><id>6181956</id><snippet>syn keyword pythonStatement def class nextgroup=pythonFunction skipwhite
</snippet></ROW><ROW><id>6181956</id><snippet>def</snippet></ROW><ROW><id>6181956</id><snippet>class</snippet></ROW><ROW><id>6181956</id><snippet>pythonStatement</snippet></ROW><ROW><id>6181956</id><snippet>pythonFunction</snippet></ROW><ROW><id>6181956</id><snippet>syn keyword pythonStatement def nextgroup=pythonFunction skipwhite
syn keyword pythonStatement class nextgroup=pythonClass skipwhite
</snippet></ROW><ROW><id>6181956</id><snippet>pythonClass</snippet></ROW><ROW><id>6181956</id><snippet>:hi</snippet></ROW><ROW><id>6181956</id><snippet>HiLink pythonClass Special
</snippet></ROW><ROW><id>6181956</id><snippet>blah</snippet></ROW><ROW><id>6181956</id><snippet>__blah__</snippet></ROW><ROW><id>6181956</id><snippet>pythonFunction</snippet></ROW><ROW><id>6181956</id><snippet>:hi pythonFunction cterm=underline ctermfg=217 ctermbg=16
</snippet></ROW><ROW><id>6181956</id><snippet>__blah__</snippet></ROW><ROW><id>6181956</id><snippet>blah</snippet></ROW><ROW><id>6181956</id><snippet>python.vim</snippet></ROW><ROW><id>6181978</id><snippet>d={}
for x in range(1,10):
        d["string{0}".format(x)]="Hello"

In [7]: d["string5"]
Out[7]: 'Hello'

In [8]: d
Out[8]: 
{'string1': 'Hello',
 'string2': 'Hello',
 'string3': 'Hello',
 'string4': 'Hello',
 'string5': 'Hello',
 'string6': 'Hello',
 'string7': 'Hello',
 'string8': 'Hello',
 'string9': 'Hello'}
</snippet></ROW><ROW><id>6182114</id><snippet>pid = subprocess.Popen(["vlc", "-vvv", 
    "rtsp://%s" % target_nvc.ip_address + ":554/ch0_multicast_one", 
    "--sout=#transcode{acodec=none}:duplicate{dst=rtp{sdp=rtsp://:5544/user_hash.sdp},dst=display}", 
    ":no-sout-rtp-sap", ":no-sout-standard-sap", 
    ":ttl=1", ":sout-keep" ], stdout=subprocess.PIPE, 
    stderr=subprocess.PIPE, stdin=subprocess.PIPE)
</snippet></ROW><ROW><id>6182349</id><snippet>accept()</snippet></ROW><ROW><id>6182382</id><snippet>Key</snippet></ROW><ROW><id>6182382</id><snippet>KeyPress</snippet></ROW><ROW><id>6182382</id><snippet>KeyRelease</snippet></ROW><ROW><id>6182382</id><snippet>Entry</snippet></ROW><ROW><id>6182382</id><snippet>Text</snippet></ROW><ROW><id>6182382</id><snippet>ValidatingEntry</snippet></ROW><ROW><id>6182382</id><snippet>MaxLengthEntry</snippet></ROW><ROW><id>6182382</id><snippet>from Tkinter import *

root = Tk()
entry = MaxLengthEntry(root, maxlength=10)
entry.pack(side=LEFT)
root.mainloop()
</snippet></ROW><ROW><id>6182778</id><snippet>if problem_test():
    SendEmail()
    raise Exception
</snippet></ROW><ROW><id>6182778</id><snippet>raise_email</snippet></ROW><ROW><id>6182778</id><snippet>def raise_email(self, e):
    SendEmail()
    raise e
</snippet></ROW><ROW><id>6182955</id><snippet>X11Forwarding yes</snippet></ROW><ROW><id>6182955</id><snippet>ForwardX11 yes</snippet></ROW><ROW><id>6183002</id><snippet>print</snippet></ROW><ROW><id>6183002</id><snippet>lambda x: print x</snippet></ROW><ROW><id>6183002</id><snippet>(expr)</snippet></ROW><ROW><id>6183002</id><snippet>expr</snippet></ROW><ROW><id>6183002</id><snippet>,</snippet></ROW><ROW><id>6183002</id><snippet>print (x)</snippet></ROW><ROW><id>6183002</id><snippet>print (x, y)</snippet></ROW><ROW><id>6183002</id><snippet>(1)   # 1 -- no tuple Mister!
(1,)  # (1)
(1,2) # (1,2)
1,2   # (1,2) -- and no parenthesis :) [See below for print caveat.]
</snippet></ROW><ROW><id>6183002</id><snippet>print</snippet></ROW><ROW><id>6183002</id><snippet>,</snippet></ROW><ROW><id>6183002</id><snippet>print</snippet></ROW><ROW><id>6183002</id><snippet>,</snippet></ROW><ROW><id>6183002</id><snippet>print</snippet></ROW><ROW><id>6183002</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>6183007</id><snippet>class SomeClass {}
$s = 'SomeClass';
$someClassInstance = new $s();
</snippet></ROW><ROW><id>6183321</id><snippet>xhost +</snippet></ROW><ROW><id>6183321</id><snippet>export DISPLAY=:0.0 
</snippet></ROW><ROW><id>6183743</id><snippet>from django.core.cache import cache

# set cached data
cache.set('data', data)
# get cached data
cache.get('data')
</snippet></ROW><ROW><id>6184067</id><snippet>self.entry_type</snippet></ROW><ROW><id>6184067</id><snippet>if self.entry_type == self.PAGE:
    return '/%s/' % (self.slug)
</snippet></ROW><ROW><id>6184186</id><snippet>/etc/logrotate.conf</snippet></ROW><ROW><id>6184434</id><snippet>id()</snippet></ROW><ROW><id>6184515</id><snippet>sys.modules</snippet></ROW><ROW><id>6184515</id><snippet>gc.get_referrers()</snippet></ROW><ROW><id>6186337</id><snippet>close</snippet></ROW><ROW><id>6186337</id><snippet>fd.close()</snippet></ROW><ROW><id>6186337</id><snippet>with</snippet></ROW><ROW><id>6186337</id><snippet>with open("__q", "w") as fd:
    fd.write(t)
# will automatically be closed here
</snippet></ROW><ROW><id>6186450</id><snippet>Ellipsis</snippet></ROW><ROW><id>6186979</id><snippet>from time import strptime
</snippet></ROW><ROW><id>6187064</id><snippet>__init__</snippet></ROW><ROW><id>6187064</id><snippet>class B(A):
    def __init__(self):
        A.__init__(self)
#       ^^^^^^^^^^^^^^^^ this have to be explicitly added
        print "Class B"
</snippet></ROW><ROW><id>6187064</id><snippet>super().__init__()</snippet></ROW><ROW><id>6187064</id><snippet>A.__init__(self)</snippet></ROW><ROW><id>6187064</id><snippet>__init__</snippet></ROW><ROW><id>6187136</id><snippet>import sys
from PyQt4.QtCore import QSettings
from PyQt4.QtGui import (QApplication, QWidget, QCheckBox, QPushButton,
                         QVBoxLayout)

RUN_PATH = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"

class MainWidget(QWidget):

    def __init__(self,parent=None):
        super(MainWidget, self).__init__(parent)
        self.settings = QSettings(RUN_PATH, QSettings.NativeFormat)
        self.setupUi()       
        # Check if value exists in registry
        self.checkbox.setChecked(self.settings.contains("MainWidget"))

    def setupUi(self):
        self.checkbox = QCheckBox("Boot at Startup", self)
        button = QPushButton("Close", self)
        button.clicked.connect(self.close)
        layout = QVBoxLayout(self)
        layout.addWidget(self.checkbox)
        layout.addWidget(button)

    def closeEvent(self, event):
        if self.checkbox.isChecked():
            self.settings.setValue("MainWidget",sys.argv[0]);
        else:
            self.settings.remove("MainWidget");
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    w = MainWidget()
    w.show()
    app.exec_()
</snippet></ROW><ROW><id>6187258</id><snippet>&gt;&gt;&gt; s = "This is a very long string with many many many many and many more sentences and there is not one character that i can use to split by, just by number of words"
&gt;&gt;&gt; l = s.split()
&gt;&gt;&gt; n = 5
&gt;&gt;&gt; [' '.join(l[x:x+n]) for x in xrange(0, len(l), n)]
['This is a very long',
 'string with many many many',
 'many and many more sentences',
 'and there is not one',
 'character that i can use',
 'to split by, just by',
 'number of words']
</snippet></ROW><ROW><id>6187378</id><snippet>inspect.getmodule()</snippet></ROW><ROW><id>6187378</id><snippet>str(inspect.getmodule(frm[0]))
</snippet></ROW><ROW><id>6187378</id><snippet>inspect.getmodule(frm[0]).__name__
</snippet></ROW><ROW><id>6187378</id><snippet>inspect.getmodule()</snippet></ROW><ROW><id>6187378</id><snippet>None</snippet></ROW><ROW><id>6187500</id><snippet>data</snippet></ROW><ROW><id>6187500</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>6187500</id><snippet>href</snippet></ROW><ROW><id>6187500</id><snippet>wt</snippet></ROW><ROW><id>6187500</id><snippet>r</snippet></ROW><ROW><id>6187500</id><snippet>f.write('\n'.join(urlList))</snippet></ROW><ROW><id>6187680</id><snippet>(extent/100)</snippet></ROW><ROW><id>6187680</id><snippet>extent/100.0
</snippet></ROW><ROW><id>6187680</id><snippet>float(extent)/a_hundred
</snippet></ROW><ROW><id>6187680</id><snippet>/</snippet></ROW><ROW><id>6187680</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>6187680</id><snippet>__future__</snippet></ROW><ROW><id>6187680</id><snippet>python -Qnew
</snippet></ROW><ROW><id>6187680</id><snippet>//</snippet></ROW><ROW><id>6187986</id><snippet>__getitem__</snippet></ROW><ROW><id>6187986</id><snippet>type</snippet></ROW><ROW><id>6187986</id><snippet>__getitem__</snippet></ROW><ROW><id>6187986</id><snippet>type</snippet></ROW><ROW><id>6187986</id><snippet>class MetaA(type):
    def __getitem__(cls,val):
        return "It works"

class A(object):
    __metaclass__=MetaA
    pass

print(A[0])
# It works
</snippet></ROW><ROW><id>6187986</id><snippet>class A(object, metaclass=MetaA):
    pass
</snippet></ROW><ROW><id>6188017</id><snippet>&gt;&gt;&gt; [hex(0x12345678 &gt;&gt; i &amp; 0xff) for i in (24,16,8,0)]
['0x12', '0x34', '0x56', '0x78']
</snippet></ROW><ROW><id>6188495</id><snippet>itertools</snippet></ROW><ROW><id>6188495</id><snippet>itertools.islice()</snippet></ROW><ROW><id>6188499</id><snippet>self</snippet></ROW><ROW><id>6188522</id><snippet>testbutton.setStyleSheet('QPushButton {color: blue}')
</snippet></ROW><ROW><id>6189244</id><snippet>io</snippet></ROW><ROW><id>6189244</id><snippet>StringIO</snippet></ROW><ROW><id>6189244</id><snippet>io</snippet></ROW><ROW><id>6189244</id><snippet>StringIO</snippet></ROW><ROW><id>6189676</id><snippet>import pxssh
s = pxssh.pxssh()
if not s.login ('localhost', 'myusername', 'mypassword'):
    print "SSH session failed on login."
    print str(s)
else:
    print "SSH session login successful"
    s.sendline ('ls -l')
    s.prompt()         # match the prompt
    print s.before     # print everything before the prompt.
    s.logout()
</snippet></ROW><ROW><id>6189840</id><snippet>class Foo(models.Model):
    # all model attributes here

class ForwardFooManager(models.Manager):
    def get_query_set(self, *args, **kwargs):
        qs = super(ForwardFooManager, self).get_query_set(*args, **kwargs)
        return qs.filter(forward=True)

class ForwardFoo(Foo):
    class Meta:
        proxy = True

    objects = ForwardsFooManager()

    # methods for forward model

class BackwardFooManager(models.Manager):
    def get_query_set(self, *args, **kwargs):
        qs = super(BackwardFooManager, self).get_query_set(*args, **kwargs)
        return qs.filter(forward=False)

class BackwardFoo(Foo):
    class Meta:
        proxy = True

    objects = BackwardFooManager()

    # methods for backward model
</snippet></ROW><ROW><id>6190203</id><snippet>?</snippet></ROW><ROW><id>6190203</id><snippet>&gt;&gt;&gt; Person?
Type:       ModelBase
Base Class: &lt;class 'django.db.models.base.ModelBase'&gt;
String Form:    &lt;class 'foo.bar.models.Person'&gt;
Namespace:  Interactive
File:       /home/zk/ve/django/foo/bar/models.py
Docstring:
    Person(id, first_name, last_name)
</snippet></ROW><ROW><id>6190203</id><snippet>help()</snippet></ROW><ROW><id>6190203</id><snippet>__dict__</snippet></ROW><ROW><id>6190203</id><snippet>&gt;&gt;&gt; [x for x in Person().__dict__.keys() if not x.startswith('_')]
&lt;&lt;&lt; ['first_name', 'last_name', 'id']
</snippet></ROW><ROW><id>6190255</id><snippet>contrib.staticfiles</snippet></ROW><ROW><id>6190255</id><snippet>collectstatic</snippet></ROW><ROW><id>6190291</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>6190291</id><snippet>as_tuple</snippet></ROW><ROW><id>6190291</id><snippet>sign</snippet></ROW><ROW><id>6190291</id><snippet>digits</snippet></ROW><ROW><id>6190291</id><snippet>exponent</snippet></ROW><ROW><id>6190291</id><snippet>&gt;&gt;&gt; d = decimal.Decimal('56.4325')
&gt;&gt;&gt; d.as_tuple().exponent
-4
&gt;&gt;&gt; d = decimal.Decimal('56.43256436')
&gt;&gt;&gt; d.as_tuple().exponent
-8
</snippet></ROW><ROW><id>6190291</id><snippet>0</snippet></ROW><ROW><id>6190499</id><snippet>json.loads(unicode(opener.open(...), "ISO-8859-1"))
</snippet></ROW><ROW><id>6190500</id><snippet>from collections import OrderedDict, Callable

class DefaultOrderedDict(OrderedDict):
    def __init__(self, default_factory=None, *a, **kw):
        if (default_factory is not None and
            not isinstance(default_factory, Callable)):
            raise TypeError('first argument must be callable')
        OrderedDict.__init__(self, *a, **kw)
        self.default_factory = default_factory

    def __getitem__(self, key):
        try:
            return OrderedDict.__getitem__(self, key)
        except KeyError:
            return self.__missing__(key)

    def __missing__(self, key):
        if self.default_factory is None:
            raise KeyError(key)
        self[key] = value = self.default_factory()
        return value

    def __reduce__(self):
        if self.default_factory is None:
            args = tuple()
        else:
            args = self.default_factory,
        return type(self), args, None, None, self.items()

    def copy(self):
        return self.__copy__()

    def __copy__(self):
        return type(self)(self.default_factory, self)

    def __deepcopy__(self, memo):
        import copy
        return type(self)(self.default_factory,
                          copy.deepcopy(self.items()))
    def __repr__(self):
        return 'OrderedDefaultDict(%s, %s)' % (self.default_factory,
                                        OrderedDict.__repr__(self))
</snippet></ROW><ROW><id>6190698</id><snippet>exec</snippet></ROW><ROW><id>6190698</id><snippet>s = """
for i in range(5):
    print(i)
"""
exec s
</snippet></ROW><ROW><id>6190698</id><snippet>0
1
2
3
4
</snippet></ROW><ROW><id>6190698</id><snippet>eval()</snippet></ROW><ROW><id>6190698</id><snippet>exec</snippet></ROW><ROW><id>6190752</id><snippet>man ldconfig</snippet></ROW><ROW><id>6190752</id><snippet>ctypes.util.find_library()</snippet></ROW><ROW><id>6190752</id><snippet>cdll()</snippet></ROW><ROW><id>6190752</id><snippet>from ctypes import CDLL
import Foo
try:
    MyLib = CDLL(Foo.__path__[0] + '/lib/libwhatever.so')
except OSError:
    from Foo import bar as MyLib
</snippet></ROW><ROW><id>6190798</id><snippet>return
</snippet></ROW><ROW><id>6190798</id><snippet>return None
</snippet></ROW><ROW><id>6190798</id><snippet>None</snippet></ROW><ROW><id>6190798</id><snippet>return</snippet></ROW><ROW><id>6190798</id><snippet>None</snippet></ROW><ROW><id>6190888</id><snippet>d = dict(zip(l, t))
</snippet></ROW><ROW><id>6190888</id><snippet>izip()</snippet></ROW><ROW><id>6190888</id><snippet>zip()</snippet></ROW><ROW><id>6190932</id><snippet>a = [[1,2,3],[4,5,6],[7,8,9]]
ar = array(a)

import csv

fl = open('filename.csv', 'w')

writer = csv.writer(fl)
writer.writerow(['label1', 'label2', 'label3']) #if needed
for values in ar:
    writer.writerow(values)

fl.close()    
</snippet></ROW><ROW><id>6190979</id><snippet>myworkbook.SaveAs('results.csv', 24)
</snippet></ROW><ROW><id>6190988</id><snippet>Undefined</snippet></ROW><ROW><id>6190988</id><snippet>__getattr__</snippet></ROW><ROW><id>6191067</id><snippet>__init__</snippet></ROW><ROW><id>6191067</id><snippet>def validatable(cls):

    # merge constraints from derived class and base classes here ...

    original_init = cls.__init__
    def init_to_insert(self, *args, **keywords):
        self.errors = {}
        original_init(self, *args, **keywords)   
    cls.__init__ = init_to_insert
    return cls
</snippet></ROW><ROW><id>6191293</id><snippet>gcc -c -fPIC -m64 -std=c99 -lm -D_GNU_SOURCE -Wall -pedantic -fopenmp -o foo.o foo.c
gcc -m64 -shared -Wl,-soname,libfoo.so -o libfoo.so foo.o
</snippet></ROW><ROW><id>6191644</id><snippet>n</snippet></ROW><ROW><id>6191644</id><snippet>m</snippet></ROW><ROW><id>6191644</id><snippet>n != m</snippet></ROW><ROW><id>6191644</id><snippet>if args: raise TypeError(...)</snippet></ROW><ROW><id>6191644</id><snippet>*</snippet></ROW><ROW><id>6191644</id><snippet>*</snippet></ROW><ROW><id>6191644</id><snippet>TypeError</snippet></ROW><ROW><id>6191644</id><snippet>TypeError</snippet></ROW><ROW><id>6191644</id><snippet>not isinstance(x, expected)</snippet></ROW><ROW><id>6191644</id><snippet>*</snippet></ROW><ROW><id>6191644</id><snippet>**</snippet></ROW><ROW><id>6191644</id><snippet>type(f)</snippet></ROW><ROW><id>6191644</id><snippet>function</snippet></ROW><ROW><id>6191751</id><snippet>pg_config</snippet></ROW><ROW><id>6191751</id><snippet>find /opt /usr -name pg_config
# Take note of path
env PATH=${PATH}:/opt/local/lib/postgresql91/bin python setup.py build
</snippet></ROW><ROW><id>6191751</id><snippet>PostgreSQL</snippet></ROW><ROW><id>6191751</id><snippet>pg_config</snippet></ROW><ROW><id>6191780</id><snippet>&gt;&gt;&gt; d1 = {"yes": [1,2,3], "no": [4]}
</snippet></ROW><ROW><id>6191780</id><snippet>&gt;&gt;&gt; d2 = {value:key for key in d1 for value in d1[key]}
&gt;&gt;&gt; d2
{1: 'yes', 2: 'yes', 3: 'yes', 4: 'no'}
</snippet></ROW><ROW><id>6191881</id><snippet>import scipy.interpolate as interp
z = arange(0,4)
x = np.array([1,2,4,3])
f = interp.interp1d(z, x)
newx = f(np.linspace(z[0],z[-1],7))
</snippet></ROW><ROW><id>6191881</id><snippet>In [40]: print z
[0 1 2 3]

In [41]: print x
[1 2 4 3]

In [42]: print newx
[ 1.   1.5  2.   3.   4.   3.5  3. ]
</snippet></ROW><ROW><id>6192082</id><snippet>test</snippet></ROW><ROW><id>6192082</id><snippet>test</snippet></ROW><ROW><id>6192082</id><snippet>data = {'someKey':"test"}
mdc.add(data)
</snippet></ROW><ROW><id>6192082</id><snippet>data['someKey'] = "this should change"
</snippet></ROW><ROW><id>6192244</id><snippet>======= The .txt files to play with
------- file1.txt
"AC";"AM"
40000;-19083,00
40100;20000,00
40200;350004,00
40300;3498,99

------- file2.txt
"AC";"AM"
40000;-19083,00
40300;3498,99
40105;-234567,00
40200;350,00

======= Some diagnostic SQL
------- &lt;NULL&gt; indicates: In F1 but not in F2 (LEFT JOIN)
SELECT T1.AC, T1.AM, T2.AM FROM [file1.txt] AS T1 LEFT JOIN [file2.txt] AS T2 ON (T1.AC =
T2.AC)
------- Result
AC      File1   File2
40000   -19083  -19083
40100   20000   &lt;NULL&gt;
40200   350004  350
40300   3498,99 3498,99

------- &lt;NULL&gt; indicates: Not in the other file (LEFT JOIN, UNION)
SELECT T1.AC, T1.AM, T2.AM FROM [file1.txt] AS T1 LEFT JOIN [file2.txt] AS T2 ON (T1.AC =
T2.AC) UNION SELECT T2.AC, T1.AM, T2.AM FROM [file2.txt] AS T2 LEFT JOIN [file1.txt] AS T1
 ON (T1.AC = T2.AC)
------- Result
AC      File1   File2
40000   -19083  -19083
40100   20000   &lt;NULL&gt;
40105   &lt;NULL&gt;  -234567
40200   350004  350
40300   3498,99 3498,99

------- the problems: missing, different values
SELECT T1.AC, T1.AM, T2.AM FROM [file1.txt] AS T1 LEFT JOIN [file2.txt] AS T2 ON (T1.AC =
T2.AC) WHERE T2.AM IS NULL OR T1.AM &lt;&gt; T2.AM UNION SELECT T2.AC, T1.AM, T2.AM FROM [file2.
txt] AS T2 LEFT JOIN [file1.txt] AS T1 ON (T1.AC = T2.AC) WHERE T1.AM IS NULL OR T1.AM &lt;&gt;
T2.AM
------- Result
AC      File1   File2
40100   20000   &lt;NULL&gt;
40105   &lt;NULL&gt;  -234567
40200   350004  350
</snippet></ROW><ROW><id>6192244</id><snippet>  Const adClipString = 2

  Dim oFS  : Set oFS = CreateObject( "Scripting.FileSystemObject" )
  Dim sDir : sDir    = oFS.GetAbsolutePathName( ".\txt" )
  Dim oDB  : Set oDb = CreateObject( "ADODB.Connection" )
  oDB.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" &amp; sDir &amp; ";Extended Properties=""text"""
  Dim sSQL
  Dim sFiNa
  WScript.Echo "=======", "The .txt files to play with"
  For Each sFiNa In Array( "file1.txt", "file2.txt"  )
      WScript.Echo "-------", sFiNa
      WScript.Echo oFS.OpenTextFile( "txt\" &amp; sFiNa ).ReadAll()
  Next

  WScript.Echo "=======", "Some diagnostic SQL"
  Dim aSQL
  For Each aSQL In Array( _
       Array(   "&lt;NULL&gt; indicates: In F1 but not in F2 (LEFT JOIN)" _
              , Join( Array( _
                     "SELECT T1.AC, T1.AM, T2.AM FROM" _
                   , "[file1.txt] AS T1" _
                   , "LEFT JOIN [file2.txt] AS T2 ON (T1.AC = T2.AC)" _
                ), " " ) ) _
     , Array(   "&lt;NULL&gt; indicates: Not in the other file (LEFT JOIN, UNION)" _
              , Join( Array( _
                     "SELECT T1.AC, T1.AM, T2.AM FROM" _
                   , "[file1.txt] AS T1" _
                   , "LEFT JOIN [file2.txt] AS T2 ON (T1.AC = T2.AC)" _
                   , "UNION" _
                   , "SELECT T2.AC, T1.AM, T2.AM FROM" _
                   , "[file2.txt] AS T2" _
                   , "LEFT JOIN [file1.txt] AS T1 ON (T1.AC = T2.AC)" _
                ), " " ) ) _
     , Array(   "the problems: missing, different value" _
              , Join( Array( _
                     "SELECT T1.AC, T1.AM, T2.AM FROM" _
                   , "[file1.txt] AS T1" _
                   , "LEFT JOIN [file2.txt] AS T2 ON (T1.AC = T2.AC)" _
                   , "WHERE T2.AM IS NULL OR T1.AM &lt;&gt; T2.AM" _
                   , "UNION" _
                   , "SELECT T2.AC, T1.AM, T2.AM FROM" _
                   , "[file2.txt] AS T2" _
                   , "LEFT JOIN [file1.txt] AS T1 ON (T1.AC = T2.AC)" _
                   , "WHERE T1.AM IS NULL OR T1.AM &lt;&gt; T2.AM" _
                ), " " ) ) _
     )
     sSQL = aSQL( 1 )
     WScript.Echo "-------", aSQL( 0 )
     WScript.Echo sSQL
     Dim oRS : Set oRS = oDB.Execute( sSQL )
     WScript.Echo "------- Result"
     WScript.Echo Join( Array( "AC", "File1", "File2" ), vbTab )
     WScript.Echo oRS.GetString( adClipString, , vbTab, vbCrLf, "&lt;NULL&gt;" )
  Next
  oDB.Close
</snippet></ROW><ROW><id>6192244</id><snippet>  Dim oDB  : Set oDb = CreateObject( "ADODB.Connection" )
  oDB.Open "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" &amp; sDir &amp; ";Extended Properties=""text"""
  sSQL = "..."
  Dim oRS : Set oRS = oDB.Execute( sSQL )
  WScript.Echo oRS.GetString( adClipString, , vbTab, vbCrLf, "&lt;NULL&gt;" )
  oDB.Close
</snippet></ROW><ROW><id>6192244</id><snippet>  oFS.CreateTextFile( ... ).WriteLine oRS.GetString( _
    adClipString, , ",", vbCrLf, ""
  )
</snippet></ROW><ROW><id>6192244</id><snippet>Num0    Num1    Num2    Num3    Num4
7,6     6,1     3,8     0,9     8,9
0,9     9,4     4,7     8,8     9,9
</snippet></ROW><ROW><id>6192244</id><snippet>Num0    Num1    Num2    Num3    Num4    Spot
7,6     6,1     3,8     0,9     8,9     1
0,9     9,4     4,7     8,8     9,9     2
</snippet></ROW><ROW><id>6192244</id><snippet>[expected.txt]
ColNameHeader=True
CharacterSet=1252
Format=Delimited(;)
Col1=Num0 Float
Col2=Num1 Float
Col3=Num2 Float
Col4=Num3 Float
Col5=Num4 Float
Col6=Spot Integer
</snippet></ROW><ROW><id>6192244</id><snippet>Num0    Num1    Num2    Num3    Num4
7,1     1,1     3,8     0,9     8,9
0,9     9,4     4,7     8,8     9,9
</snippet></ROW><ROW><id>6192244</id><snippet>Num0    Num1    Num2    Num3    Num4    Spot
7,1     1,1     3,8     0,9     8,9     1
0,9     9,4     4,7     8,8     9,9     2
</snippet></ROW><ROW><id>6192244</id><snippet>  sSQL = Join( Array( _
         "SELECT E.Num0 - M.Num0 AS Dif0" _
      ,       ", E.Num1 - M.Num1 AS Dif1" _
      ,       ", E.Num2 - M.Num2 AS Dif2" _
      ,       ", E.Num3 - M.Num3 AS Dif3" _
      ,       ", E.Num4 - M.Num4 AS Dif4" _
      ,       ", E.Spot          AS Spot" _
      ,  "FROM [expected.txt] AS E" _
      ,  "INNER JOIN [measured.txt] AS M" _
      ,  "ON E.Spot = M.Spot" _
  ), " " )
</snippet></ROW><ROW><id>6192244</id><snippet>Num0    Num1    Num2    Num3    Num4    Spot
0,5     5       0       0       0       1
0       0       0       0       0       2
</snippet></ROW><ROW><id>6192298</id><snippet>class GlobalWealth(object):
    def __init__(self):
        self._global_wealth = 10.0
        self._observers = []

    def get_wealth(self):
        return self._global_wealth

    def set_wealth(self, value):
        self._global_wealth = value
        for callback in self._observers:
            print 'anouncing change'
            callback(self._global_wealth)

    global_wealth = property(get_wealth, set_wealth)

    def bind_to(self, callback):
        print 'bound'
        self._observers.append(callback)


class Person(object):
    def __init__(self, data):
        self.wealth = 1.0
        self.data = data
        self.data.bind_to(self.update_how_happy)
        self.happiness = self.wealth / self.data.global_wealth

    def update_how_happy(self, global_wealth):
        self.happiness = self.wealth / global_wealth


if __name__ == '__main__':
    data = GlobalWealth()
    p = Person(data)
    print p.happiness
    data.global_wealth = 1.0
    print p.happiness
</snippet></ROW><ROW><id>6192308</id><snippet>menu_links</snippet></ROW><ROW><id>6192308</id><snippet>UndefinedSilently</snippet></ROW><ROW><id>6192308</id><snippet>__getattr__</snippet></ROW><ROW><id>6192308</id><snippet>items</snippet></ROW><ROW><id>6192308</id><snippet>()</snippet></ROW><ROW><id>6192308</id><snippet>menu_links.items()</snippet></ROW><ROW><id>6192308</id><snippet>menu_links.items() # becomes
UndefinedSilently().items() # becomes
UndefinedSilently().u''() # from UndefinedSilently.__getattr__
</snippet></ROW><ROW><id>6192308</id><snippet>__str__</snippet></ROW><ROW><id>6192308</id><snippet>__unicode__</snippet></ROW><ROW><id>6192308</id><snippet>def silently(*args, **kwargs):
    return u''

return_new = lambda *args, **kwargs: UndefinedSilently()

class UndefinedSilently(Undefined):
    __unicode__ = silently
    __str__ = silently
    __call__ = return_new
    __getattr__ = return_new
</snippet></ROW><ROW><id>6192676</id><snippet>http://stackoverflow.com/questions/6192655/whats-the-advantage-or-benefit-of-slug-field-in-django</snippet></ROW><ROW><id>6192795</id><snippet>clicked = []
foo = Button(root, text='bar', command=lambda self:clicked.append(self))
</snippet></ROW><ROW><id>6192830</id><snippet>def iter_preorder(self):
    yield self
    # check for folderishness here if a non-folderish
    # node may have children as well
    for x in self.children:
        for y in x.iter_preorder():
            yield y
</snippet></ROW><ROW><id>6192830</id><snippet>for x in tree.iter_preorder():
    do_action(x)
</snippet></ROW><ROW><id>6192952</id><snippet>from libsbml import *
ast = readMathMLFromString(xmlString)
f = FunctionDefinition(2,4)
f.setMath(ast)
kl = KineticLaw(2,4)
kl.setMath(f.getBody())
kl.getFormula()
</snippet></ROW><ROW><id>6193082</id><snippet>get_task_logger()</snippet></ROW><ROW><id>6193082</id><snippet>@celery.task()
def add(x, y):
    logger = add.get_logger()
    logger.info("Adding %s + %s" % (x, y))
    return x + y
</snippet></ROW><ROW><id>6193082</id><snippet>CELERY_HIJACK_ROOT_LOGGER</snippet></ROW><ROW><id>6193082</id><snippet>.get_logger()</snippet></ROW><ROW><id>6193082</id><snippet>logfile</snippet></ROW><ROW><id>6193082</id><snippet>@celery.task()
def add(x, y):
    logger = add.get_logger(logfile='tasks.log')
    logger.info("Adding %s + %s" % (x, y))
    return x + y 
</snippet></ROW><ROW><id>6193082</id><snippet>celery.signals.after_setup_task_logger</snippet></ROW><ROW><id>6193082</id><snippet>foo.tasks</snippet></ROW><ROW><id>6193082</id><snippet>foo.tasks.email</snippet></ROW><ROW><id>6193082</id><snippet>foo.tasks.scaling</snippet></ROW><ROW><id>6193082</id><snippet>from celery.signals import after_setup_task_logger
import logging

def foo_tasks_setup_logging(**kw):
    logger = logging.getLogger('foo.tasks')
    if not logger.handlers:
        handler = logging.FileHandler('tasks.log')
        formatter = logging.Formatter(logging.BASIC_FORMAT) # you may want to customize this.
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.propagate = False

after_setup_task_logger.connect(foo_tasks_setup_logging)
</snippet></ROW><ROW><id>6193082</id><snippet>foo.tasks</snippet></ROW><ROW><id>6193082</id><snippet>tasks.log</snippet></ROW><ROW><id>6193082</id><snippet>.propagate</snippet></ROW><ROW><id>6193195</id><snippet>unicode_string.encode('utf-8')
</snippet></ROW><ROW><id>6193448</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print os.ttyname(sys.stdin.fileno())
'/dev/pts/0'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>6193448</id><snippet>raise</snippet></ROW><ROW><id>6193448</id><snippet>OSError: [Errno 22] Invalid argument</snippet></ROW><ROW><id>6193448</id><snippet>isatty()</snippet></ROW><ROW><id>6193521</id><snippet>index, value = max(enumerate(my_list), key=operator.itemgetter(1))
</snippet></ROW><ROW><id>6193656</id><snippet>Hello.foo</snippet></ROW><ROW><id>6193656</id><snippet>__get__(self, instance, owner)</snippet></ROW><ROW><id>6193656</id><snippet>owner</snippet></ROW><ROW><id>6193656</id><snippet>instance</snippet></ROW><ROW><id>6193656</id><snippet>owner</snippet></ROW><ROW><id>6193656</id><snippet>property</snippet></ROW><ROW><id>6193656</id><snippet>self</snippet></ROW><ROW><id>6193678</id><snippet>reliab = numpy.int32(numpy.random.rand(N,N) &lt; 0.6)
</snippet></ROW><ROW><id>6193710</id><snippet>sortedList=sorted(reader, key=lambda t: int( t[1] ))
</snippet></ROW><ROW><id>6193710</id><snippet>sortedList=sorted(reader, key=lambda t: float( t[1] ))
</snippet></ROW><ROW><id>6193710</id><snippet>reader</snippet></ROW><ROW><id>6193800</id><snippet>os.fdopen()</snippet></ROW><ROW><id>6193800</id><snippet>import os
readEnd, writeEnd = os.pipe()
readFile = os.fdopen(readEnd)
firstLine = readFile.readline()
</snippet></ROW><ROW><id>6194077</id><snippet>def my_view(request, params):
    ... do something ...
    response = render_to_response('my_template.html', {'foo': bar'})
    ... do something after rendering ...
    return response
</snippet></ROW><ROW><id>6194077</id><snippet>def my_decorator(view):
    def my_func(request, params):
        response = view(request, params)
        ... do something after rendering ...
        return response
    return my_func
</snippet></ROW><ROW><id>6194077</id><snippet>@my_decorator</snippet></ROW><ROW><id>6194077</id><snippet>process-response</snippet></ROW><ROW><id>6194177</id><snippet>return render_to_response,('index.html', {"latest_list", latest_list})
</snippet></ROW><ROW><id>6194219</id><snippet>int(index.split('.')[-1])
</snippet></ROW><ROW><id>6194219</id><snippet>int(str(index).split('.')[-1])
</snippet></ROW><ROW><id>6194304</id><snippet>import sys
from BeautifulSoup import BeautifulSoup

# where so_soup.txt is your html
f = open ("so_soup.txt", "r")
data = f.readlines ()
f.close ()

soup = BeautifulSoup ("".join (data))

cells = soup.findAll('td', {"class" : "lft lm"})
for cell in cells:
    # You can compare cell.string against "Accounts Payable" 
    print (cell.string)
</snippet></ROW><ROW><id>6194304</id><snippet>if (cell.string.strip () == "Accounts Payable"):
    sibling = cell.findNextSibling ()
    while (sibling):
        print ("\t" + sibling.string)
        sibling = sibling.findNextSibling ()
</snippet></ROW><ROW><id>6194304</id><snippet>lines = ["&lt;tr&gt;"]
for cell in cells:
    lines.append (cell.prettify().decode('ascii'))
    if (cell.string.strip () == "Accounts Payable"):
        sibling = cell.findNextSibling ()
        while (sibling):
            lines.append (sibling.prettify().decode('ascii'))
            sibling = sibling.findNextSibling ()
lines.append ("&lt;/tr&gt;")

f = open ("so_soup_out.txt", "wt")
f.writelines (lines)
f.close ()
</snippet></ROW><ROW><id>6194512</id><snippet>os.system("cd /directory/path/here; run the commands")
</snippet></ROW><ROW><id>6194512</id><snippet>subprocess</snippet></ROW><ROW><id>6194512</id><snippet>from subprocess import Popen
Popen("run the commands", shell=True, cwd="/directory/path/here")
</snippet></ROW><ROW><id>6194938</id><snippet>INSTALLED_APPS = {
    ...
    'django.contrib.humanize',
}
</snippet></ROW><ROW><id>6194938</id><snippet>{% load humanize %}
{{ model.timefield|naturaltime }}
</snippet></ROW><ROW><id>6194978</id><snippet>% pydoc -p 8080
# then navigate to http://localhost:8080/mutagen.html to see the docs
</snippet></ROW><ROW><id>6195014</id><snippet>''</snippet></ROW><ROW><id>6195014</id><snippet>def validate_not_spaces(value):
    if value.strip() == '':
        raise ValidationError(u"You must provide more than just whitespace.")

class Message(models.Model):
    msg = models.CharField(max_length=150, blank=False,
                           validators=[validate_not_spaces])
</snippet></ROW><ROW><id>6195072</id><snippet>setup.cfg</snippet></ROW><ROW><id>6195072</id><snippet>bdist --install-lib=/</snippet></ROW><ROW><id>6195072</id><snippet>install-lib</snippet></ROW><ROW><id>6195072</id><snippet>install</snippet></ROW><ROW><id>6195072</id><snippet>bdist</snippet></ROW><ROW><id>6195072</id><snippet>bdist_dumb</snippet></ROW><ROW><id>6195072</id><snippet>install</snippet></ROW><ROW><id>6195072</id><snippet>from distutils.core import setup
from distutils.command.bdist_dumb import bdist_dumb

class custom_bdist_dumb(bdist_dumb):

    def reinitialize_command(self, name, **kw):
        cmd = bdist_dumb.reinitialize_command(self, name, **kw)
        if name == 'install':
            cmd.install_lib = '/'
        return cmd

if __name__ == '__main__':
    setup(
        # our custom class override
        cmdclass = {'bdist_dumb': custom_bdist_dumb},
        name='my_package',
        py_modules = ['__main__'],
        packages = ['module1', 'module2'],
        package_dir = {'': 'src'}
    )
</snippet></ROW><ROW><id>6195072</id><snippet>% python setup.py bdist --format=zip
% unzip -l dist/my_package-0.0.0.linux-x86_64.zip
Archive:  dist/my_package-0.0.0.linux-x86_64.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
      184  2011-05-31 20:34   my_package-0.0.0.egg-info
       30  2011-05-31 20:34   __main__.py
      128  2011-05-31 20:34   __main__.pyc
      107  2011-05-31 20:34   module1/__init__.pyc
        0  2011-05-31 20:27   module1/__init__.py
      107  2011-05-31 20:34   module2/__init__.pyc
        0  2011-05-31 20:27   module2/__init__.py
---------                     -------
      556                     7 files

% python dist/my_package-0.0.0.linux-x86_64.zip
my_package working.
</snippet></ROW><ROW><id>6195104</id><snippet>self.list_widget = QListWidget()
files = glob.glob('YourDirectory/*.jpg') #Get all jpegs in your directory
for i in files:
    self.list_widget.addItem(QListWidgetItem(QIcon(i),'your text here'))
self.list_widget.setIconSize(QSize(400,300)) #Set your image size
</snippet></ROW><ROW><id>6195117</id><snippet>\n</snippet></ROW><ROW><id>6195117</id><snippet>\r\n</snippet></ROW><ROW><id>6195117</id><snippet>\n</snippet></ROW><ROW><id>6195117</id><snippet>(\r\n|\r|\n)</snippet></ROW><ROW><id>6195249</id><snippet>return</snippet></ROW><ROW><id>6195249</id><snippet>__str__</snippet></ROW><ROW><id>6195249</id><snippet>aj@localhost:~/so/python# cat date2.py
from datetime import date

class Year(date):
    def __new__(cls, year):
        return super(Year, cls).__new__(cls, year, 1, 1)
    def __str__(self):
        return self.strftime('%Y')

y=Year(2011)
print str(y)
aj@localhost:~/so/python# python date2.py
2011
</snippet></ROW><ROW><id>6195300</id><snippet>setUp</snippet></ROW><ROW><id>6195300</id><snippet>tearDown</snippet></ROW><ROW><id>6195300</id><snippet>class TestFoo(unittest2.TestCase):

    a = inject.attr('a', A)

    def __init__(self, *n, **kw):
        unittest2.TestCase.__init__(self, *n, **kw)
        self.unit_scope = inject.reqscope

    def setUp(self):
        self.foo = Foo()
        self.unit_scope.register()

    def tearDown(self):
        self.unit_scope.unregister()

    ...
</snippet></ROW><ROW><id>6195300</id><snippet>A</snippet></ROW><ROW><id>6195300</id><snippet>inject.reqscope</snippet></ROW><ROW><id>6195300</id><snippet>injector = inject.Injector()
injector.bind(A, scope=inject.reqscope)
</snippet></ROW><ROW><id>6195364</id><snippet> try/except</snippet></ROW><ROW><id>6195364</id><snippet>try:
    os.getcwd()
except OSError:
    os.chdir("..")
    os.getcwd()
</snippet></ROW><ROW><id>6195393</id><snippet>&gt;&gt;&gt; S = [0, 1, 2]
&gt;&gt;&gt; F = [S[0:i] + S[i+1:] for i in range(len(S))]
&gt;&gt;&gt; print F
[[1, 2], [0, 2], [0, 1]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>6195393</id><snippet>&gt;&gt;&gt; S = set(range(3))
&gt;&gt;&gt; F = [S - set((i,)) for i in S]
&gt;&gt;&gt; F
[set([1, 2]), set([0, 2]), set([0, 1])]
</snippet></ROW><ROW><id>6195447</id><snippet>class Settings(model.Model):
    receive_newsletter = model.BooleanField()
    ...
</snippet></ROW><ROW><id>6195447</id><snippet>class SettingsForm(forms.ModelForm):
    receive_newsletter = forms.BooleanField()

    class Meta:
        model = Settings
</snippet></ROW><ROW><id>6195447</id><snippet>class SettingsForm(forms.ModelForm):

    receive_newsletter = forms.BooleanField()

    def __init__(self):
        if check_something():
            self.fields['receieve_newsletter'].initial  = True

    class Meta:
        model = Settings
</snippet></ROW><ROW><id>6195558</id><snippet>Func&lt;int, int&gt;</snippet></ROW><ROW><id>6195558</id><snippet>int addone(int x)
{
    return x + 1;
}
</snippet></ROW><ROW><id>6195558</id><snippet>Func&lt;int, int&gt; myFunc = new Func&lt;int, int&gt;(addone);
myFunc(5); // to use it, you can pass it as you like
</snippet></ROW><ROW><id>6195558</id><snippet>static int add_one(int x)
{
    return x + 1;
}
static int double_it(int x)
{
    return x * 2;
}
static int do_maths(List&lt;Func&lt;int, int&gt;&gt; math_rules, int x)
{
    foreach(var func in math_rules)
        x = func(x);
    return x;
}
static void Main(string[] Args)
{
    List&lt;Func&lt;int, int&gt;&gt; math_rules = new List&lt;Func&lt;int, int&gt;&gt;();
    math_rules.Add(new Func&lt;int, int&gt;(add_one));
    math_rules.Add(new Func&lt;int, int&gt;(double_it));
    Console.WriteLine(do_maths(math_rules, 9)); // 20
}
</snippet></ROW><ROW><id>6195558</id><snippet>static int do_maths(List&lt;Func&lt;int, int&gt;&gt; math_rules, int x)
{
    foreach(var func in math_rules)
        x = func(x);
    return x;
}
static void Main(string[] Args)
{
    List&lt;Func&lt;int, int&gt;&gt; math_rules = new List&lt;Func&lt;int, int&gt;&gt;();
    math_rules.Add(new Func&lt;int, int&gt;((x) =&gt; (x + 1)));
    math_rules.Add(new Func&lt;int, int&gt;((x) =&gt; (x * 2)));
    Console.WriteLine(do_maths(math_rules, 9)); // 20
}
</snippet></ROW><ROW><id>6195723</id><snippet>    @staticmethod
    def staticMethod (): print "I am static"
</snippet></ROW><ROW><id>6195723</id><snippet>    def staticMethod (): print "I am static"
    cls.staticMethod = staticmethod(staticMethod)
</snippet></ROW><ROW><id>6195771</id><snippet>&gt;&gt;&gt; libc = CDLL('libc.so.6', use_errno=True)
</snippet></ROW><ROW><id>6195771</id><snippet>get_errno()</snippet></ROW><ROW><id>6195771</id><snippet>void *</snippet></ROW><ROW><id>6195771</id><snippet>None</snippet></ROW><ROW><id>6195771</id><snippet>c_void_p(None)</snippet></ROW><ROW><id>6195771</id><snippet>reboot(0x1234567)</snippet></ROW><ROW><id>6195799</id><snippet>show()</snippet></ROW><ROW><id>6195799</id><snippet>1.0.1</snippet></ROW><ROW><id>6195799</id><snippet>0.99.3</snippet></ROW><ROW><id>6195799</id><snippet>v1.0.1</snippet></ROW><ROW><id>6195799</id><snippet>libfreetype6-dev tk-dev tk8.5-dev tcl8.5-dev python-gtk2-dev</snippet></ROW><ROW><id>6195799</id><snippet>matplotlib.__version__ == 1.0.1</snippet></ROW><ROW><id>6195799</id><snippet>import matplotlib.pyplot as p
from scipy import eye
p.imshow(eye(3))
p.show()
print 'a' 
p.imshow(eye(6))
p.show()
print 'b' 
p.imshow(eye(9))
p.show()
print 'c' 
</snippet></ROW><ROW><id>6195804</id><snippet>wchar_t</snippet></ROW><ROW><id>6195804</id><snippet>Py_UNICODE</snippet></ROW><ROW><id>6195804</id><snippet>Py_UNICODE</snippet></ROW><ROW><id>6195804</id><snippet>wchar_t</snippet></ROW><ROW><id>6195804</id><snippet>unicodeobject.h</snippet></ROW><ROW><id>6195804</id><snippet>T_OBJECT</snippet></ROW><ROW><id>6195804</id><snippet>static struct PyMemberDef attr_members[] = {
  { "wtext", T_OBJECT, offsetof(PyAttrObject, wtext), READONLY, "wide string"}
  ...
</snippet></ROW><ROW><id>6195804</id><snippet>...
if (!PyUnicode_CheckExact(arg)) {
    PyErr_Format(PyExc_ValueError, "arg must be a unicode string");
    return NULL;
}
Py_INCREF(arg);
self-&gt;wtext = arg;
...
</snippet></ROW><ROW><id>6195804</id><snippet>Py_UNICODE *</snippet></ROW><ROW><id>6195804</id><snippet>int i = 0;
Py_ssize_t size = PyUnicode_GetSize(self-&gt;wtext);
Py_UNICODE *chars = PyUnicode_AS_UNICODE(self-&gt;wtext);
for (i = 0; i &lt; size; i++) {
    // use chars[i]
    ...
</snippet></ROW><ROW><id>6195978</id><snippet>package_data</snippet></ROW><ROW><id>6195978</id><snippet>% mv lib64/mhelper.so module/
</snippet></ROW><ROW><id>6195978</id><snippet>package_data</snippet></ROW><ROW><id>6195978</id><snippet>package_data = {'mtester': ['mhelper.so']}
...
</snippet></ROW><ROW><id>6195978</id><snippet>% python setup.py bdist
% tar tf dist/mtester-0.1.linux-x86_64.tar.gz | grep mhelper
./usr/local/lib/python2.5/dist-packages/mtester/mhelper.so
</snippet></ROW><ROW><id>6195999</id><snippet>MySQLdb</snippet></ROW><ROW><id>6195999</id><snippet>cursor.execute(sql)
for row in cursor:
    print row
    ...
</snippet></ROW><ROW><id>6195999</id><snippet>def __iter__(self):
    return iter(self.fetchone, None)
</snippet></ROW><ROW><id>6196055</id><snippet>def Secondwindow():
    firstframe.destroy()
    secondframe = Frame(root)
    secondframe.pack()
    secondcontent = Label(secondframe, text = 'second window content').pack()
    secondbutton = Button(secondframe, text = 'Next -&gt;', command = Thirdwindow).pack()
def Thirdwindow():
    secondframe.destroy()
    thirdframe = Frame(root)
    thirdframe.pack()
    thirdcontent = Label(thirdframe, text = 'third window content').pack()
    thirdbutton = Button(thirdframe, text = 'Next -&gt;', command = Fourthwindow).pack()
</snippet></ROW><ROW><id>6196055</id><snippet>def Secondwindow():
    firstframe.destroy()
</snippet></ROW><ROW><id>6196055</id><snippet>firstframe</snippet></ROW><ROW><id>6196055</id><snippet>    secondframe = Frame(root)
    secondframe.pack()
    secondcontent = Label(secondframe, text = 'second window content').pack()
    secondbutton = Button(secondframe, text = 'Next -&gt;', command = Thirdwindow).pack()
</snippet></ROW><ROW><id>6196055</id><snippet>Secondwindow</snippet></ROW><ROW><id>6196055</id><snippet>Secondwindow</snippet></ROW><ROW><id>6196055</id><snippet>Secondwindow</snippet></ROW><ROW><id>6196055</id><snippet>def Thirdwindow():
    secondframe.destroy()
</snippet></ROW><ROW><id>6196055</id><snippet>secondframe</snippet></ROW><ROW><id>6196055</id><snippet>secondframe</snippet></ROW><ROW><id>6196055</id><snippet>Secondwindow</snippet></ROW><ROW><id>6196055</id><snippet>NameError</snippet></ROW><ROW><id>6196055</id><snippet>    thirdframe = Frame(root)
    thirdframe.pack()
    thirdcontent = Label(thirdframe, text = 'third window content').pack()
    thirdbutton = Button(thirdframe, text = 'Next -&gt;', command = Fourthwindow).pack()
</snippet></ROW><ROW><id>6196055</id><snippet>ThirdWindow</snippet></ROW><ROW><id>6196055</id><snippet>global secondframe
secondframe = Frame(root)
</snippet></ROW><ROW><id>6196055</id><snippet>global secondframe</snippet></ROW><ROW><id>6196055</id><snippet>return secondframe</snippet></ROW><ROW><id>6196055</id><snippet>def Thirdwindow(secondframe)</snippet></ROW><ROW><id>6196055</id><snippet>Secondwindow</snippet></ROW><ROW><id>6196055</id><snippet>lambda</snippet></ROW><ROW><id>6196055</id><snippet>from Tkinter import *
root=Tk()

def Secondwindow(firstframe):
    firstframe.destroy()
    secondframe = Frame(root)
    secondframe.pack()
    secondcontent = Label(secondframe, text = 'second window content').pack()
    secondbutton = Button(secondframe, text = 'Next -&gt;', command = lambda: Thirdwindow(secondframe)).pack()
def Thirdwindow(secondframe):
    secondframe.destroy()
    thirdframe = Frame(root)
    thirdframe.pack()
    thirdcontent = Label(thirdframe, text = 'third window content').pack()
    thirdbutton = Button(thirdframe, text = 'Next -&gt;', command = lambda: Fourthwindow(thirdframe)).pack()
def Fourthwindow(thirdframe):
    thirdframe.destroy()
    fourthframe = Frame(root)
    fourthframe.pack()
    fourthcontent = Label(fourthframe, text = 'fourth window content').pack()

firstframe = Frame(root)
firstframe.pack()
firstcontent = Label(firstframe, text = 'first window content').pack()
firstbutton = Button(firstframe, text = 'Next -&gt;', command = lambda: Secondwindow(firstframe)).pack()

root.mainloop()
</snippet></ROW><ROW><id>6196055</id><snippet>from Tkinter import *
root=Tk()

class FrameRepeater(object):
    def __init__(self, start=0, end=4):
        self.frame = None
        self.number = start
        self.end = end

    def new_frame(self):
        if self.frame:
            self.frame.destroy()
        self.frame = Frame(root)
        self.frame.pack()
        self.content = Label(self.frame, text = 'window ' + str(self.number) + ' content')
        self.content.pack()
        self.button = Button(self.frame, text = 'Next -&gt;', command = self.replace)
        self.button.pack()
        self.number += 1

    def replace(self):
        if self.number &lt; self.end:
            self.new_frame()
        elif self.number &gt;= self.end:
            self.content.config(text='Press button again to quit')
            self.button.config(command=self.quit)

    def quit(self):
        self.frame.destroy()
        root.destroy()
        exit()

FrameRepeater().new_frame()
root.mainloop()
</snippet></ROW><ROW><id>6196055</id><snippet>thirdcontent = Label(thirdframe, text = 'third window content').pack()
</snippet></ROW><ROW><id>6196055</id><snippet>None</snippet></ROW><ROW><id>6196055</id><snippet>thirdcontent</snippet></ROW><ROW><id>6196055</id><snippet>pack()</snippet></ROW><ROW><id>6196055</id><snippet>Label</snippet></ROW><ROW><id>6196055</id><snippet>pack()</snippet></ROW><ROW><id>6196055</id><snippet>new_frame</snippet></ROW><ROW><id>6196055</id><snippet>replace</snippet></ROW><ROW><id>6196098</id><snippet>template.html</snippet></ROW><ROW><id>6196098</id><snippet>Environment</snippet></ROW><ROW><id>6196098</id><snippet>page.html</snippet></ROW><ROW><id>6196098</id><snippet>template.html</snippet></ROW><ROW><id>6196098</id><snippet>from jinja import FileSystemLoader
from jinja.environment import Environment

env = Environment()
env.loader = FileSystemLoader('.')
tmpl = env.get_template('page.html')
print tmpl.render(parser.vars)
</snippet></ROW><ROW><id>6196098</id><snippet>DictLoader</snippet></ROW><ROW><id>6196098</id><snippet>template.html</snippet></ROW><ROW><id>6196098</id><snippet>dict()</snippet></ROW><ROW><id>6196098</id><snippet>DictLoader</snippet></ROW><ROW><id>6196098</id><snippet>pages = ('template.html', 'page.html')
templates = dict((name, open(name, 'rb').read()) for name in pages)
env.loader = DictLoader(templates)
</snippet></ROW><ROW><id>6196098</id><snippet>{% extends "template.html" %}
</snippet></ROW><ROW><id>6196103</id><snippet>#!/usr/bin/python2

import sys

def colorize(stdoutColor, stderrColor):
  defaultColor = '\033[0;0m'

  def applyColorize(f):
    class colorWrapper(object):
      def __init__(self, wrapee, color):
        self.wrapee = wrapee
        self.color = color
      def __getattr__(self, attr):
        if attr == 'write' and self.wrapee.isatty():
          return lambda x: self.wrapee.write(self.color + x + defaultColor)
        else:
          return getattr(self.wrapee, attr)

    def wrapper(*args, **kwds):
      oldStdout = sys.stdout
      oldStderr = sys.stderr
      sys.stdout = colorWrapper(oldStdout, stdoutColor)
      sys.stderr = colorWrapper(oldStderr, stderrColor)
      try:
        f(*args, **kwds)
      finally:
        sys.stdout = oldStdout
        sys.stderr = oldStderr

    return wrapper

  return applyColorize


greenColor = '\033[01;32m'
redColor = '\033[01;31m'

def foo():
  print "I'm ordinary and boring!"
  print &gt;&gt; sys.stderr, 'Writing to stderr!'

@colorize(greenColor, redColor)
def colorFoo():
  print "I'm colorful and exciting!"
  print &gt;&gt; sys.stderr, 'Writing to stderr!'

if __name__ == '__main__':
  foo()
  colorFoo()
  foo()
</snippet></ROW><ROW><id>6196180</id><snippet>class FSImagesStoreChangeableDirectory(FSImagesStore):

    def persist_image(self, key, image, buf, info,append_path):

        absolute_path = self._get_filesystem_path(append_path+'/'+key)
        self._mkdir(os.path.dirname(absolute_path), info)
        image.save(absolute_path)

class ProjectPipeline(ImagesPipeline):

    def __init__(self):
        super(ImagesPipeline, self).__init__()
        store_uri = settings.IMAGES_STORE
        if not store_uri:
            raise NotConfigured
        self.store = FSImagesStoreChangeableDirectory(store_uri)
</snippet></ROW><ROW><id>6196406</id><snippet>/etc/cron.d</snippet></ROW><ROW><id>6196406</id><snippet>*/15 9-16 * * 1-5 user /your/script/here
</snippet></ROW><ROW><id>6196406</id><snippet>/etc/cron.d/</snippet></ROW><ROW><id>6196406</id><snippet>init.d</snippet></ROW><ROW><id>6196406</id><snippet>upstart</snippet></ROW><ROW><id>6196460</id><snippet>threading</snippet></ROW><ROW><id>6196460</id><snippet>thread</snippet></ROW><ROW><id>6196460</id><snippet>while 1</snippet></ROW><ROW><id>6196460</id><snippet>join()</snippet></ROW><ROW><id>6196460</id><snippet>import threading
import time
import traceback

def worker():
    try:
        for i in range(5):
            print i
            time.sleep(0.5)
        assert 0, 'bad'
    except:
        traceback.print_exc()

t = threading.Thread(target=worker)

t.start()
t.join()

print 'completed'
</snippet></ROW><ROW><id>6196723</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; [k for k,v in Counter(['a', 'b', 'c', 'a', 'b', 'a', 'd']).most_common() for i in xrange(v)]
['a', 'a', 'a', 'b', 'b', 'c', 'd']
</snippet></ROW><ROW><id>6196723</id><snippet>&gt;&gt;&gt; counter = Counter(['a', 'b', 'c', 'a', 'b', 'a', 'd'])
&gt;&gt;&gt; sorted(counter.elements(), key=counter.get, reverse=True)
['a', 'a', 'a', 'b', 'b', 'c', 'd']
</snippet></ROW><ROW><id>6196812</id><snippet>def to_percents(data):
    total = float(sum(v for _, v in data))
    data[:] = [(k, v / total) for k, v in data]
    return data

data = to_percents([("foo", 1), ("bar", 3), ("baz", 5), ("ao", 7)])
print data
</snippet></ROW><ROW><id>6196812</id><snippet>[('foo', 0.0625), ('bar', 0.1875), ('baz', 0.3125), ('ao', 0.4375)]
</snippet></ROW><ROW><id>6197075</id><snippet>""" A wire between input and output. """
import pyaudio
import sys
import webbrowser

# open the page
webbrowser.open(AUTOPLAY_URL)

chunk = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100
RECORD_SECONDS = 5

p = pyaudio.PyAudio()

stream = p.open(format = FORMAT,
            channels = CHANNELS,
            rate = RATE,
            input = True,
            output = True,
            frames_per_buffer = chunk)

print "* recording"
for i in range(0, 44100 / chunk * RECORD_SECONDS):
    data = stream.read(chunk)
    stream.write(data, chunk)
print "* done"

stream.stop_stream()
stream.close()
p.terminate()
</snippet></ROW><ROW><id>6197105</id><snippet>l = [\
        {'a':25, 'b':0, 'c':25, 'd':66, 'e':41, 'f':47, 'g':40, 'h':12, 'i':69, 'j':76, 'k':1},\
        {'a':25, 'b':0, 'c':25, 'd':66, 'e':41, 'f':47, 'g':40, 'h':12, 'i':69, 'j':76, 'k':1}\
]
r = ['a=g=i', 'a=b', 'a=c']
res = []

# test all given rules
for n in range(0, len(r)):
        # i'm assuming equality here - you'd have to change this to accept other operators if needed
        c = r[n].split('=')
        vals = []
        # build up a list of values given our current rule
        for e in c:
                vals.append(l[0][e])
        # using len(set(v)) gives us the number of distinct values
        res.append({'rangeID': 0, 'ruleID':n, 'violation':'Y' if len(set(vals)) == 1 else 'N'})

print res
</snippet></ROW><ROW><id>6197105</id><snippet>[{'violation': 'N', 'ruleID': 0, 'rangeID': 0}, {'violation': 'N', 'ruleID': 1, 'rangeID': 0}, {'violation': 'Y', 'ruleID': 2, 'rangeID': 0}]</snippet></ROW><ROW><id>6197105</id><snippet>list</snippet></ROW><ROW><id>6197105</id><snippet>dict</snippet></ROW><ROW><id>6197105</id><snippet>l</snippet></ROW><ROW><id>6197105</id><snippet>for</snippet></ROW><ROW><id>6197105</id><snippet>0</snippet></ROW><ROW><id>6197281</id><snippet>from itertools import groupby
from operator import itemgetter
dict(((u, sum(row['score'] for row in rows)) for u, rows in
    groupby(sorted(d, key=itemgetter('alias')), key=itemgetter('alias'))))
# {'2133232': 158, 'u234243': 416}
</snippet></ROW><ROW><id>6197402</id><snippet>&gt;&gt;&gt; class Obj(object):
...     pass
... 
&gt;&gt;&gt; obj = Obj()
&gt;&gt;&gt; for key, value in {'var1':5, 'var2':6}.iteritems():
...     setattr(obj, key, value)
... 
&gt;&gt;&gt; obj.var1
5
&gt;&gt;&gt; obj.var2
6
</snippet></ROW><ROW><id>6197453</id><snippet>load</snippet></ROW><ROW><id>6197453</id><snippet>save</snippet></ROW><ROW><id>6197453</id><snippet>&lt;node id="mynicelycrafteduniqueid"&gt;
    &lt;data&gt;...&lt;/data&gt;
    &lt;leftChild&gt;childuniqueId&lt;/leftChild&gt;
    &lt;rightChild/&gt; &lt;!-- no right child --&gt;
&lt;/node&gt;
</snippet></ROW><ROW><id>6197522</id><snippet>from collections import OrderedDict

l = ['a', 'a', 'a', 'b', 'b', 'c', 'd']
d = OrderedDict()

for x in l:
    d[x] = True

# prints a b c d
for x in d:
    print x,
print
</snippet></ROW><ROW><id>6197734</id><snippet>from django.db.models import Count, Sum

num_taken = 5  # modify this if you want more/less than 5
query = Car.objects.values('manufacturer').annotate(num_cars=Count('manufacturer')).order_by('-num_cars')
top_cars = query[:num_taken]
others = query[num_taken:].aggregate(total=Sum('num_cars'))['total']
car_nums = [entry['num_cars'] for entry in top_cars] + [others]
car_manufactureres = [entry['manufacturerer'] for entry in top_cars] + ['Others']
</snippet></ROW><ROW><id>6198393</id><snippet>weakref.WeakValueDictionary</snippet></ROW><ROW><id>6198393</id><snippet>weakref.WeakKeyDictionary</snippet></ROW><ROW><id>6198393</id><snippet>class A(object):
    _instances = weakref.WeakValueDictionary()
    _next_id = functools.partial(next, itertools.count())

    def __init__(self):
        self._instances[self._next_id()] = self
</snippet></ROW><ROW><id>6198433</id><snippet>from BeautifulSoup import BeautifulSoup
    html = """
      &lt;body&gt;
        &lt;div class="mydiv"&gt;
          &lt;p&gt;i want got it&lt;/p&gt;
          &lt;div&gt;
            &lt;p&gt; good &lt;/p&gt;
            &lt;a&gt; boy  &lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/body&gt;
    """

    soup = BeautifulSoup(html)
    result = soup.findAll('div', {'class': 'mydiv'})
    tag = result[0]
    print tag.contents
    [u'\n', &lt;p&gt;i want got it&lt;/p&gt;, u'\n', &lt;div&gt;
    &lt;p&gt; good &lt;/p&gt;
    &lt;a&gt; boy  &lt;/a&gt;
    &lt;/div&gt;, u'\n']
</snippet></ROW><ROW><id>6198753</id><snippet>nonlocal</snippet></ROW><ROW><id>6198753</id><snippet>nested</snippet></ROW><ROW><id>6198753</id><snippet>count</snippet></ROW><ROW><id>6198753</id><snippet>nesting</snippet></ROW><ROW><id>6198753</id><snippet>count</snippet></ROW><ROW><id>6198753</id><snippet>nesting</snippet></ROW><ROW><id>6198753</id><snippet>nested</snippet></ROW><ROW><id>6198753</id><snippet>def nesting():
    count = [0]
    def nested():
        count[0] += 1

    for i in range(10):
        nested()
    print count[0]
</snippet></ROW><ROW><id>6198824</id><snippet>zipfile.ZipFile.open</snippet></ROW><ROW><id>6198889</id><snippet>sorted(list, key=lambda d: int(d[2:]))</snippet></ROW><ROW><id>6199071</id><snippet>for line in lines:
  if line.startswith('a.setSystemFile'):
    f.write(line.replace('D:/test/f.xml','C:/try/X.xml'))
  else:
    f.write(line)
</snippet></ROW><ROW><id>6199319</id><snippet>curses</snippet></ROW><ROW><id>6199319</id><snippet>curses.tiget*()</snippet></ROW><ROW><id>6199942</id><snippet>try:
  X.foo()
except X.FooError:
  pass
except X.BaseError:
  pass
</snippet></ROW><ROW><id>6199963</id><snippet>for</snippet></ROW><ROW><id>6199963</id><snippet>boost::numeric::array</snippet></ROW><ROW><id>6200016</id><snippet>url.get()</snippet></ROW><ROW><id>6200016</id><snippet>.endswith()</snippet></ROW><ROW><id>6200016</id><snippet>get()</snippet></ROW><ROW><id>6200016</id><snippet>.attrib</snippet></ROW><ROW><id>6200016</id><snippet>if i.get('Href', '').endswith('.jpg'):
    result.append(i.attrib)
</snippet></ROW><ROW><id>6200143</id><snippet>True</snippet></ROW><ROW><id>6200143</id><snippet>del</snippet></ROW><ROW><id>6200143</id><snippet>walk()</snippet></ROW><ROW><id>6200143</id><snippet>walk()</snippet></ROW><ROW><id>6200143</id><snippet>walk()</snippet></ROW><ROW><id>6200303</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>6200303</id><snippet>lxml.etree.parse()</snippet></ROW><ROW><id>6200396</id><snippet>def dump_args(func):
    "This decorator dumps out the arguments passed to a function before calling it"
    argnames = func.func_code.co_varnames[:func.func_code.co_argcount]
    fname = func.func_name
    def echo_func(*args,**kwargs):
        print fname, "(", ', '.join(
            '%s=%r' % entry
            for entry in zip(argnames,args[:len(argnames)])+[("args",list(args[len(argnames):]))]+[("kwargs",kwargs)]) +")"
    return echo_func

@dump_args
def test(a, b = 4, c = 'blah-blah', *args, **kwargs):
    pass
</snippet></ROW><ROW><id>6200451</id><snippet>class StoreAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        if obj.copy_holidays_from:
            form.cleaned_data['holidays'] = obj.copy_holidays_from.holidays.all()

        super(StoreAdmin, self).save_model(request, obj, form, change)
</snippet></ROW><ROW><id>6200914</id><snippet>deferToThread</snippet></ROW><ROW><id>6201054</id><snippet>__init__</snippet></ROW><ROW><id>6201054</id><snippet>from numpy import *
</snippet></ROW><ROW><id>6201054</id><snippet>ufunc</snippet></ROW><ROW><id>6201054</id><snippet>numpy.lib</snippet></ROW><ROW><id>6201054</id><snippet>ufunc</snippet></ROW><ROW><id>6201054</id><snippet>__init__</snippet></ROW><ROW><id>6201054</id><snippet># Import numpy symbols to scipy name space
import numpy as _num
from numpy import oldnumeric
from numpy import *
from numpy.random import rand, randn
from numpy.fft import fft, ifft
from numpy.lib.scimath import *
</snippet></ROW><ROW><id>6201054</id><snippet>"""
Wrapper functions to more user-friendly calling of certain math functions
whose output data-type is different than the input data-type in certain
domains of the input.

For example, for functions like log() with branch cuts, the versions in this
module provide the mathematically valid answers in the complex plane:

&gt;&gt;&gt; import math
&gt;&gt;&gt; from numpy.lib import scimath
&gt;&gt;&gt; scimath.log(-math.exp(1)) == (1+1j*math.pi)
True

Similarly, sqrt(), other base logarithms, power() and trig functions are
correctly handled.  See their respective docstrings for specific examples.
"""
</snippet></ROW><ROW><id>6201693</id><snippet>header&lt;TAB&gt;
</snippet></ROW><ROW><id>6201693</id><snippet># Module Docstring
snippet docs
    '''
    File: ${1:`Filename('$1.py', 'foo.py')`}
    Author: ${2:`g:snips_author`}
    Description: ${3}
    '''
</snippet></ROW><ROW><id>6201693</id><snippet>`system("date +%Y-%m-%d")`
</snippet></ROW><ROW><id>6202928</id><snippet>None</snippet></ROW><ROW><id>6202928</id><snippet>list = []
</snippet></ROW><ROW><id>6202928</id><snippet>list</snippet></ROW><ROW><id>6202928</id><snippet>my_list = []</snippet></ROW><ROW><id>6202928</id><snippet>my_list = list()</snippet></ROW><ROW><id>6202928</id><snippet>orc_list</snippet></ROW><ROW><id>6202928</id><snippet>for i in range (4):
    orc_list[i] = orc_list.append(...)
</snippet></ROW><ROW><id>6202928</id><snippet>orc_list.append</snippet></ROW><ROW><id>6202928</id><snippet>i</snippet></ROW><ROW><id>6202928</id><snippet>append</snippet></ROW><ROW><id>6202928</id><snippet>None</snippet></ROW><ROW><id>6202928</id><snippet>i</snippet></ROW><ROW><id>6202928</id><snippet>i</snippet></ROW><ROW><id>6202928</id><snippet>orc_list.append(...)</snippet></ROW><ROW><id>6202928</id><snippet>Orc.get_score(Orc())
</snippet></ROW><ROW><id>6202928</id><snippet>self</snippet></ROW><ROW><id>6202928</id><snippet>self</snippet></ROW><ROW><id>6202928</id><snippet>Orc().get_score()
</snippet></ROW><ROW><id>6202928</id><snippet>Orc</snippet></ROW><ROW><id>6202928</id><snippet>get_score</snippet></ROW><ROW><id>6202928</id><snippet>Orc</snippet></ROW><ROW><id>6202928</id><snippet>get_score</snippet></ROW><ROW><id>6202928</id><snippet>orc_list.append(Orc().get_score())
</snippet></ROW><ROW><id>6202928</id><snippet>score = Orc().get_score()
orc_list.append(score)
</snippet></ROW><ROW><id>6202928</id><snippet>return</snippet></ROW><ROW><id>6202928</id><snippet>get_score</snippet></ROW><ROW><id>6202928</id><snippet>None</snippet></ROW><ROW><id>6202928</id><snippet>None</snippet></ROW><ROW><id>6202928</id><snippet>def get_score(self):
    print "The number of orcs the orc factory has made is", Orc.total
    return Orc.total
</snippet></ROW><ROW><id>6202928</id><snippet>Orc</snippet></ROW><ROW><id>6202928</id><snippet>@staticmethod
def get_score():
    print "The number of orcs the orc factory has made is", Orc.total
</snippet></ROW><ROW><id>6202928</id><snippet>Orc.get_score()</snippet></ROW><ROW><id>6203133</id><snippet># You can manipulate the beats in a song as a native python list
beats = audio_file.analysis.beats
beats.reverse()
</snippet></ROW><ROW><id>6203665</id><snippet>from contextlib import contextmanager

@contextmanager
def context():
    print "entering"
    try:
        yield
    finally:
        print "exiting"

def test():
    with context():
        for x in range(10):
            yield x

for x in test():
    if x == 5:
        break  # or raise
</snippet></ROW><ROW><id>6203678</id><snippet>imp = Import('http://domain2.com/url')
imp.filter.add('http://domain3.com/url')
imp.filter.add('http://domain4.com/url')
imp.filter.add('http://domain5.com/url')
d = ImportDoctor(imp)

oc = ObjectCache()
oc.setduration(days=360)

url = "http://domain.com/wsdl"
client = Client(url, doctor=d, cache=oc, timeout=30)
</snippet></ROW><ROW><id>6203877</id><snippet>cd tmp</snippet></ROW><ROW><id>6203877</id><snippet>ls</snippet></ROW><ROW><id>6203877</id><snippet>exit</snippet></ROW><ROW><id>6203877</id><snippet>import sys
sys.stderr = open('/dev/null')       # Silence silly warnings from paramiko
import paramiko as pm
sys.stderr = sys.__stderr__
import os

class AllowAllKeys(pm.MissingHostKeyPolicy):
    def missing_host_key(self, client, hostname, key):
        return

HOST = '127.0.0.1'
USER = ''
PASSWORD = ''

client = pm.SSHClient()
client.load_system_host_keys()
client.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))
client.set_missing_host_key_policy(AllowAllKeys())
client.connect(HOST, username=USER, password=PASSWORD)

channel = client.invoke_shell()
stdin = channel.makefile('wb')
stdout = channel.makefile('rb')

stdin.write('''
cd tmp
ls
exit
''')
print stdout.read()

stdout.close()
stdin.close()
client.close()
</snippet></ROW><ROW><id>6204100</id><snippet>dict</snippet></ROW><ROW><id>6204100</id><snippet>foo.__dict__</snippet></ROW><ROW><id>6204100</id><snippet>foo.__dict__</snippet></ROW><ROW><id>6204100</id><snippet>class Employee: pass
def foo(self): pass
Employee.foo = foo
</snippet></ROW><ROW><id>6204100</id><snippet>self</snippet></ROW><ROW><id>6204532</id><snippet>postVars</snippet></ROW><ROW><id>6204532</id><snippet>postVars</snippet></ROW><ROW><id>6204532</id><snippet>do_POST</snippet></ROW><ROW><id>6204532</id><snippet>def do_POST(s):
  global postVars
  s.send_response(200)
  s.end_headers()
  varLen = int(s.headers['Content-Length'])
  postVars = s.rfile.read(varLen)
</snippet></ROW><ROW><id>6204607</id><snippet>return [final_img]
</snippet></ROW><ROW><id>6204607</id><snippet>return final_img
</snippet></ROW><ROW><id>6204653</id><snippet>dbm</snippet></ROW><ROW><id>6204653</id><snippet>shelve</snippet></ROW><ROW><id>6204810</id><snippet>&gt;&gt;&gt; import signal
&gt;&gt;&gt; class SignalHandler(object):
...     def __init__(self):
...         self.retval = None
...     def handle(self, sig, frm):
...         self.retval = sig
... 
&gt;&gt;&gt; s = SignalHandler()
&gt;&gt;&gt; s.retval
&gt;&gt;&gt; signal.signal(signal.SIGALRM, s.handle)
0
&gt;&gt;&gt; signal.alarm(1)
0
&gt;&gt;&gt; s.retval
14
</snippet></ROW><ROW><id>6204857</id><snippet>youtube-dl -g http://www.youtube.com/watch?v=ZYffV7qhvTc
</snippet></ROW><ROW><id>6204857</id><snippet>download</snippet></ROW><ROW><id>6205136</id><snippet>&gt;&gt;&gt; db = c.foo
&gt;&gt;&gt; for doc in db.things.find(): print doc
... 
{u'_id': ObjectId('4de671821121812a0087101b'), u'foo': u'bar'}
{u'_id': ObjectId('4de671ea1121812a0087101c'), u'buzz': u'baz'}

&gt;&gt;&gt; db.command('count', 'things', query={'foo': 'bar'})
{u'ok': 1.0, u'n': 1.0}
</snippet></ROW><ROW><id>6205193</id><snippet>import sys
sys.path.append(r'C:\Program Files\IronPython 2.7\Lib')
sys.path.append(r'C:\Program Files\IronPython 2.7')
import clr

clr.AddReference('IronPython')
clr.AddReference('IronPython.Modules')
clr.AddReference('Microsoft.Scripting.Metadata')
clr.AddReference('Microsoft.Scripting')
clr.AddReference('Microsoft.Dynamic')
clr.AddReference('mscorlib')
clr.AddReference('System')
clr.AddReference('System.Data')

#
# adapted from os-path-walk-example-3.py

import os, glob
import fnmatch
import pyc

def doscopy(filename1):
    print filename1
    os.system ("copy %s .\\bin\Debug\%s" % (filename1, filename1))

class GlobDirectoryWalker:
    # a forward iterator that traverses a directory tree

    def __init__(self, directory, pattern="*"):
        self.stack = [directory]
        self.pattern = pattern
        self.files = []
        self.index = 0

    def __getitem__(self, index):
        while 1:
            try:
                file = self.files[self.index]
                self.index = self.index + 1
            except IndexError:
                # pop next directory from stack
                self.directory = self.stack.pop()
                self.files = os.listdir(self.directory)
                self.index = 0
            else:
                # got a filename
                fullname = os.path.join(self.directory, file)
                if os.path.isdir(fullname) and not os.path.islink(fullname) and fullname[-4:]&lt;&gt;'.svn':
                    self.stack.append(fullname)
                if fnmatch.fnmatch(file, self.pattern):
                    return fullname

#Build StdLib.DLL
gb = glob.glob(r".\Lib\*.py")
gb.append("/out:StdLib")    

#print ["/target:dll",]+gb

pyc.Main(["/target:dll"]+gb)

#Build EXE
gb=["/main:FredMain.py","FredSOAP.py","/target:exe","/out:Fred_Download_Tool"]
pyc.Main(gb)


#CopyFiles to Release Directory
doscopy("StdLib.dll")
doscopy("Fred_Download_Tool.exe")
doscopy("Fred_Download_.dll")


#Copy DLLs to Release Directory
fl = ["IronPython.dll","IronPython.Modules.dll","Microsoft.Dynamic.dll","Microsoft.Scripting.Debugging.dll","Microsoft.Scripting.dll","Microsoft.Scripting.ExtensionAttribute.dll","Microsoft.Scripting.Core.dll"]
for f in fl:

doscopy(f)
</snippet></ROW><ROW><id>6205193</id><snippet>#References to created DLL of python modules
clr.AddReference('StdLib')
</snippet></ROW><ROW><id>6205237</id><snippet>bool_</snippet></ROW><ROW><id>6205237</id><snippet>int_</snippet></ROW><ROW><id>6205237</id><snippet>complex_</snippet></ROW><ROW><id>6205237</id><snippet>float_</snippet></ROW><ROW><id>6205237</id><snippet>object_</snippet></ROW><ROW><id>6205237</id><snippet>unicode_</snippet></ROW><ROW><id>6205237</id><snippet>str_</snippet></ROW><ROW><id>6205237</id><snippet>bool_</snippet></ROW><ROW><id>6205237</id><snippet>object_</snippet></ROW><ROW><id>6205362</id><snippet>logging.Formatter</snippet></ROW><ROW><id>6205362</id><snippet>formatException</snippet></ROW><ROW><id>6205362</id><snippet>exc_text</snippet></ROW><ROW><id>6205362</id><snippet>formatException()</snippet></ROW><ROW><id>6205362</id><snippet>format()</snippet></ROW><ROW><id>6205362</id><snippet>record.exc_text</snippet></ROW><ROW><id>6205362</id><snippet>format()</snippet></ROW><ROW><id>6205362</id><snippet>formatException()</snippet></ROW><ROW><id>6205362</id><snippet>class NoExceptionFormatter(logging.Formatter):
    def format(self, record):
        record.exc_text = '' # ensure formatException gets called
        super(NoExceptionFormatter, self).format(record)

    def formatException(self, record):
        return ''
</snippet></ROW><ROW><id>6205482</id><snippet>from Tkinter import *
class GraphicsInterface:

    def __init__(self):
        self.window = Tk()
        self.window.geometry("720x500")

        self.clicked=[]
        button1 = Button(self.window, text="Dice 1", width=13)
        button2 = Button(self.window, text="Dice 2", width=13)
        button1.pack()
        button2.pack()

        button1.configure(command=lambda btn=button1: self.OnClick(btn))
        button2.configure(command=lambda btn=button2: self.OnClick(btn))

        self.window.mainloop()

    def OnClick(self, btn):
        text = btn.cget("text")
        self.clicked.append(text)
        print "clicked:", self.clicked

app = GraphicsInterface()
</snippet></ROW><ROW><id>6205487</id><snippet>0.1</snippet></ROW><ROW><id>6205487</id><snippet>step % 10</snippet></ROW><ROW><id>6205529</id><snippet>now = datetime.datetime.now()
now_plus_10 = now + datetime.timedelta(minutes = 10)
</snippet></ROW><ROW><id>6205973</id><snippet>&lt;browser:page
 for="**INTERFACE**"
 name="**name**"
 class="**class**"
 attribute="**method**"
 permission="zope2.View"
 /&gt;
</snippet></ROW><ROW><id>6205973</id><snippet>http://path-to-object/@@name</snippet></ROW><ROW><id>6205973</id><snippet>&lt;browser:page
 for="Products.VirtualDataCentre.interfaces.IDDCode"
 name="getTableColumns"
 class="Products.VirtualDataCentre.browser.DDActions.DDActions"
 attribute="getTableColumns"
 permission="zope2.View"
 /&gt;
</snippet></ROW><ROW><id>6205973</id><snippet>from Products.Five import BrowserView
from plone.app.kss.plonekssview import PloneKSSView
class DDActions(PloneKSSView):
    def getTableColumns(self, table, currValue, currLabel):
        columns = self.context.getColumnNames(table)
        for (field, curr) in [('valueColumn', currValue), ('labelColumn',currLabel)]:
            self.replaceSelect(field, columns, (curr or self.context[field]))
</snippet></ROW><ROW><id>6206011</id><snippet>from networkx import Graph
from networkx.algorithms.components.connected import connected_components

# see aliases as the edges between nodes in a graph
aliases = [('A', 'B'), ('B', 'C'), ('D','E')]

g = Graph( aliases )

# connected components are alias groups
print connected_components(g) # [['A', 'C', 'B'], ['E', 'D']]
</snippet></ROW><ROW><id>6206011</id><snippet>networkx</snippet></ROW><ROW><id>6206131</id><snippet>pip install</snippet></ROW><ROW><id>6206131</id><snippet>pip</snippet></ROW><ROW><id>6206131</id><snippet>$ pip install -e
Usage: /usr/local/bin/pip install [OPTIONS] PACKAGE_NAMES...

/usr/local/bin/pip install: error: -e option requires an argument
</snippet></ROW><ROW><id>6206154</id><snippet>class Rule( object ):
    def __init__( self, text ):
        self.text= text
    def test( self, A, B, C, D, E, F, G ):
        return eval( self.text )

r1= Rule( "A==B" )
r2= Rule( "A==B and B==C" )
r3= Rule( "A in {listname!s}".format( listname=someList ) )
</snippet></ROW><ROW><id>6206154</id><snippet>&gt;&gt;&gt; r1.test( 89,  92,  18,  7,   90,  35, 60 )
False
</snippet></ROW><ROW><id>6206154</id><snippet>r4= Rule( "re.match( r'[2-5][0-2]', str(A) )" )
r5= Rule( "myfoo(A) &gt; 100" )
r6= Rule( "A in myfoo(B)" )
</snippet></ROW><ROW><id>6206183</id><snippet>@public 
def foo():
    pass 

@public 
class bar():
    pass

class helper(): # not part of the modules public interface! 
    pass
</snippet></ROW><ROW><id>6206183</id><snippet>helper</snippet></ROW><ROW><id>6206183</id><snippet>modulename.helper</snippet></ROW><ROW><id>6206183</id><snippet>from modulename import *</snippet></ROW><ROW><id>6206189</id><snippet>class DataSHAExtension(MapperExtension):
    def before_insert(self, mapper, connection, instance):
        instance.checksum = hashlib.sha1(instance.data).hexdigest()
    ...
</snippet></ROW><ROW><id>6206189</id><snippet>Class Something(Base):
    __tablename__ = 'something'
    __mapper_args__ = {
        'extension': DataSHAExtension()
    }
</snippet></ROW><ROW><id>6206220</id><snippet>myimports.py</snippet></ROW><ROW><id>6206220</id><snippet>from myimports import *</snippet></ROW><ROW><id>6206311</id><snippet>class CommentForm(ModelForm):
    def __init__(self, doc_id=None, *args, **kwargs):
        if doc_id:
            self.fields['section'].queryset = Section.objects.filter(document__id=doc_id)
</snippet></ROW><ROW><id>6206311</id><snippet>def my_view(request):
    ...
    doc = Document.objects(...)
    form = CommentForm(doc_id = doc.id)
</snippet></ROW><ROW><id>6206393</id><snippet>import unittest

class MyError(Exception):
    pass

def raiseError():
    raise MyError(100)

class TestStuff(unittest.TestCase):
    def testError(self):
        self.assertRaisesRegexp(MyError, '100', raiseError)

unittest.main()    
</snippet></ROW><ROW><id>6206393</id><snippet>try:
    &lt;code&gt;
except MyError, message:
    self.failUnlessEqual(message.args, &lt;expected args&gt;)
else:
    self.fail('MyError not raised')
</snippet></ROW><ROW><id>6206559</id><snippet>class NoOpHandler(urllib2.HTTPRedirectHandler):
    def redirect_request(self, req, fp, code, msg, headers, newUrl):
        return None

passmanager = urllib2.HTTPPasswordMgrWithDefaultRealm()
passmanager.add_password(None, baseurl, username, password)
auth_handler = urllib2.HTTPBasicAuthHandler(passmanager)
opener = urllib2.build_opener(auth_handler, NoOpHandler())
</snippet></ROW><ROW><id>6206877</id><snippet>&gt;&gt;&gt; print 'Hello, %(your_name)s, my name is %(my_name)s' % {'your_name': 'Blender', 'my_name': 'Ken'}
Hello, Blender, my name is Ken
</snippet></ROW><ROW><id>6206877</id><snippet>&gt;&gt;&gt; vars = {'search': 'replace',
...  'foo':    'bar'}
&gt;&gt;&gt; mystring = "Foo bar %foo% % search %."
&gt;&gt;&gt; for k, v in vars.items():
...     mystring = mystring.replace('%%%s%%' % k, v)
... 
&gt;&gt;&gt; print mystring
Foo bar bar % search %.
</snippet></ROW><ROW><id>6207007</id><snippet>find</snippet></ROW><ROW><id>6207007</id><snippet>text</snippet></ROW><ROW><id>6207007</id><snippet>text</snippet></ROW><ROW><id>6207007</id><snippet>pattern</snippet></ROW><ROW><id>6207007</id><snippet>def my_find(text, pattern):
    '''Find the start index of a pattern string in a text.
    Return -1 if not found, and assume that pattern is not empty'''

    found = False
    current_start_index = text.find(pattern[0])
    index_text = current_start_index
    index_pattern = 0

    while not found and index_text + len(pattern) - 1 &lt; len(text) and \
            current_start_index != -1:

        index_text += 1
        index_pattern += 1

        while index_text &lt; len(text) and \
                index_pattern &lt; len(pattern) and \
                text[index_text] == pattern[index_pattern]:

            if index_pattern == len(pattern) - 1:
                found = True
                break
            else:
                index_text += 1
                index_pattern += 1

        if not found:
            current_start_index = text.find(pattern[0],current_start_index + 1)
            index_text = current_start_index

    if found:
        return current_start_index
    else:
        -1
</snippet></ROW><ROW><id>6207746</id><snippet>Person.objects.exclude(pets=None)
</snippet></ROW><ROW><id>6207746</id><snippet>for person in Person.objects.annotate(has_pet=Count('pets')):
     if person.has_pet: # if has_pet is &gt; 0 this is True, no extra query
</snippet></ROW><ROW><id>6207746</id><snippet>Exists</snippet></ROW><ROW><id>6207746</id><snippet>has_pets</snippet></ROW><ROW><id>6207844</id><snippet>with open('file.csv') as f:
    f.readline() # ignore first line (header)
    mydict = dict(csv.reader(f, delimiter=','))

print mydict
</snippet></ROW><ROW><id>6207866</id><snippet>raw_input</snippet></ROW><ROW><id>6208017</id><snippet>def exchange_team(modeladmin, request, queryset):
    if queryset.count() == 2:
        #your interchange code...
</snippet></ROW><ROW><id>6208017</id><snippet>class TeamAdmin(admin.ModelAdmin):
    ...
    actions = ['exchange_team']

admin.register(Team, TeamAdmin)
</snippet></ROW><ROW><id>6208073</id><snippet>re.sub(r'(?&lt;=abc)\d{1,3}', '456', string)
</snippet></ROW><ROW><id>6208103</id><snippet>def tick():
  for box in randomBoxes:
    box.relocate()

  specialBlock1.relocate()

  specialBlock2.relocate()

  specialBlock3.relocate()
</snippet></ROW><ROW><id>6208103</id><snippet>def worker():
  while True:
    tick()

    sleep(0.1)
</snippet></ROW><ROW><id>6208103</id><snippet>from threading import Thread

t = Thread(target = worker, name = "Grid Worker")

t.daemon = True # Useful when this thread is not the main thread.

t.start()
</snippet></ROW><ROW><id>6208103</id><snippet>tick()</snippet></ROW><ROW><id>6208294</id><snippet>crontab(5)</snippet></ROW><ROW><id>6208327</id><snippet>from Queue import Queue, Empty
def signal_safe_sleep(delay):
  q = Queue()
  try: q.get(True, delay)
  except Empty: pass
</snippet></ROW><ROW><id>6208405</id><snippet>markdown</snippet></ROW><ROW><id>6208405</id><snippet>site-packages/</snippet></ROW><ROW><id>6208410</id><snippet>replacements = {
  's1': 'r1',
  's2': 'r2'
  ...
}

with open('input.txt') as fhi, open('output.txt', 'w') as fho:
  for line in fhi:
    words = line.split(' ')

    fho.write(' '.join(map(lambda w: replacements.get(w, w), words))

    # Or as a list comprehension from the comments.
    fho.write(' '.join([replacements.get(w, w) for w in words]))
</snippet></ROW><ROW><id>6208410</id><snippet>dict.get(key[, default])</snippet></ROW><ROW><id>6208506</id><snippet>class Map(object):

 def __init__(self):

    self.quips = [
        "You died. You suck at this.",
        "Your mom would be proud, if she were smarter",
        "Such a luser.",
        "I have a small puppy that's better at this."
    ]

 def death(self): 
    print self.quips[randint (0, len(self.quips)-1)]
    exit(1)

 def princess_lives_here(self):
    print "You see a beautiful Princess with a shiny crown."
    print "She offers you some cake."

    eat_it = raw_input("&gt;")

    if eat_it == "eat it":
        print "You explode like a pinata full of frogs."
        print "The Princess cackles and eats the frogs. Yum!"
        return 'death'

    elif eat_it == "do not eat it":
        print "She throws the cake at you and it cuts off your head."
        print "The last thing you see is her munching on your face. Yum!"
        return 'death'

    elif eat_it == "make her eat it":
        print "The Princess screams as you cram the cake in her mouth."
        print "Then she smiles and cries and thank you for saving her."
        print "She points to a tiny door and says, 'The Koi needs cake too.'"
        print "She gives you the very last bit of cake and shoves you in."
        return 'gold_koi_pond'

    else:
        print "The Princess looks at you confused and just points at the cake."
        return 'princess_lives_here'

class Engine(object):

 def __init__(self, map, start):
    self.quips = [
        "You died. You suck at this.",
        "Your mom would be proud, if she were smarter",
        "Such a luser.",
        "I have a small puppy that's better at this."
    ]
    self.map = map
    self.start = start

 def play(self):
    next = self.start

    while True:
        print "\n-----"
        room = getattr(self.map, next)
    next = room()
</snippet></ROW><ROW><id>6208544</id><snippet>   startImgPos = post.find('&lt;img', 0, len(post)) + 4
    if(startImgPos &gt; -1):
        endImgPos = post.find('&gt;', startImgPos, len(post))
        imageTag = post[startImgPos:endImgPos]
        startSrcPos = imageTag.find('src="', 0, len(post)) +5
        endSrcPos = imageTag.find('"', startSrcPos , len(post)) 
        linkTag = imageTag[startSrcPos:endSrcPos]
        r['linktag'] = linkTag
</snippet></ROW><ROW><id>6208573</id><snippet>list3 = [sum(i) for i in zip(list1, list2)]
</snippet></ROW><ROW><id>6208573</id><snippet>list3 = map(sum, zip(list1, list2))
</snippet></ROW><ROW><id>6208654</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>6208687</id><snippet>import xlrd
wb = xlrd.open_workbook("file.xls")

wb.sheet_names()

sh = wb.sheet_by_index(0)

for item in sh.col(0):
    value = unicode(item.value)
    if value.startswith("cheap"):
        print value
</snippet></ROW><ROW><id>6208862</id><snippet>host, aliaslist, lan_ip = socket.gethostbyname_ex(socket.gethostname())
print host
print aliaslist
print lan_ip[0]
</snippet></ROW><ROW><id>6209038</id><snippet>def equal_float(a, b):
    #return abs(a - b) &lt;= sys.float_info.epsilon
    return abs(a - b) &lt;= chosen_value #see edit below for more info
</snippet></ROW><ROW><id>6209146</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>6209146</id><snippet>eval</snippet></ROW><ROW><id>6209146</id><snippet>&gt;&gt;&gt; literal_eval("{'key': 10}")
{'key': 10}
</snippet></ROW><ROW><id>6209146</id><snippet>&gt;&gt;&gt; literal_eval("import os; os.system('rm -rf somepath')")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.6/ast.py", line 49, in literal_eval
    node_or_string = parse(node_or_string, mode='eval')
  File "/usr/lib64/python2.6/ast.py", line 37, in parse
    return compile(expr, filename, mode, PyCF_ONLY_AST)
  File "&lt;unknown&gt;", line 1
    import os; os.system('rm -rf somepath')
         ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>6209167</id><snippet>UserForm</snippet></ROW><ROW><id>6209167</id><snippet>request.form</snippet></ROW><ROW><id>6209167</id><snippet>form = UserForm(request.form, obj=user)
</snippet></ROW><ROW><id>6209184</id><snippet>$script.sh "/my/path with/spaces"
</snippet></ROW><ROW><id>6209184</id><snippet>#!/bin/bash
python /path/to/script "$1"
</snippet></ROW><ROW><id>6209259</id><snippet>mylist = [ ( ('12', '47', '4', '574862', '58', '7856'), 'AGGREGATE_VALUE1'),
           ( ('2', '75', '757', '8233', '838', '47775272785'), 'AGGREG2'),
           ( ('4144', '78', '78965', '778', '78578', '2'), 'AGGREGATE_VALUE3')]

longg = dict.fromkeys((0,1,2,3,4,5,6),0)

for tu,x in mylist:
    for i,el in enumerate(tu):
        longg[i] = max(longg[i],len(str(el)))
    longg[6] = max(longg[6],len(str(x)))

fofo = '  '.join('%'+str(longg[i])+'s' for i in xrange(0,7))
print '\n'.join(fofo % (a,b,c,d,e,f,g) for (a,b,c,d,e,f),g in mylist)
</snippet></ROW><ROW><id>6209259</id><snippet>  12  47      4  574862     58         7856  AGGREGATE_VALUE1
   2  75    757    8233    838  47775272785           AGGREG2
4144  78  78965     778  78578            2  AGGREGATE_VALUE3
</snippet></ROW><ROW><id>6209259</id><snippet>longg = dict.fromkeys((0,1,2,3,4,5,),0)

for tu,x in mylist:
    for i,el in enumerate(tu):
        longg[i] = max(longg[i],len(str(el)))

fofo = '  '.join('%'+str(longg[i])+'s' for i in xrange(0,6)) + '  %s'
print '\n'.join(fofo % (a,b,c,d,e,f,g) for (a,b,c,d,e,f),g in mylist)
</snippet></ROW><ROW><id>6209259</id><snippet>mylist = [ ( (12, 47, 4, 574862, 58, 7856), 'AGGREGATE_VALUE1'),
           ( (2, 75, 757, 8233, 838, 47775272785), 'AGGREG2'),
           ( (4144, 78, 78965, 778, 78578, 2), 'AGGREGATE_VALUE3')]

longg = dict.fromkeys((0,1,2,3,4,5),0)

for tu,_ in mylist:
    longg.update(( i, max(longg[i],len(str(el))) ) for i,el in enumerate(tu))

fofo = '  '.join('%%%ss' % longg[i] for i in xrange(0,6)) + '  %s'
print '\n'.join(fofo % (a,b,c,d,e,f,g) for (a,b,c,d,e,f),g in mylist)
</snippet></ROW><ROW><id>6209259</id><snippet>mylist = [ ( (12, 47, 4, 574862, 58, 7856), 'AGGREGATE_VALUE1'),
           ( (2, 75, 757, 8233, 838, 47775272785), 'AGGREG2'),
           ( (4144, 78, 78965, 778, 78578, 2), 'AGGREGATE_VALUE3')]

header = ('Price1','Price2','reference','XYD','code','resp','AGGREG values')

longg = dict(zip((0,1,2,3,4,5,6),(len(str(x)) for x in header)))

for tu,x in mylist:
    longg.update(( i, max(longg[i],len(str(el))) ) for i,el in enumerate(tu))
    longg[6] = max(longg[6],len(str(x)))
fofo = ' | '.join('%%-%ss' % longg[i] for i in xrange(0,7))

print '\n'.join((fofo % header,
                 '-|-'.join( longg[i]*'-' for i in xrange(7)),
                 '\n'.join(fofo % (a,b,c,d,e,f,g) for (a,b,c,d,e,f),g in mylist)))
</snippet></ROW><ROW><id>6209259</id><snippet>Price1 | Price2 | reference | XYD    | code  | resp        | AGGREG values   
-------|--------|-----------|--------|-------|-------------|-----------------
12     | 47     | 4         | 574862 | 58    | 7856        | AGGREGATE_VALUE1
2      | 75     | 757       | 8233   | 838   | 47775272785 | AGGREG2         
4144   | 78     | 78965     | 778    | 78578 | 2           | AGGREGATE_VALUE3
</snippet></ROW><ROW><id>6209687</id><snippet>from email.parser import HeaderParser
data = conn.fetch(message, '(BODY[HEADER.FIELDS (SUBJECT FROM)])')
header_data = data[1][0][1]
parser = HeaderParser()
msg = parser.parsestr(header_data)
</snippet></ROW><ROW><id>6209687</id><snippet>msg</snippet></ROW><ROW><id>6209945</id><snippet>len(value)</snippet></ROW><ROW><id>6209945</id><snippet>len(value.strip())</snippet></ROW><ROW><id>6209946</id><snippet>"Rocky J. Squirrel" &lt;rocky.squirrel@gmail.com&gt;
</snippet></ROW><ROW><id>6209946</id><snippet>Rocky J. Squirrel</snippet></ROW><ROW><id>6209946</id><snippet>"Rocky J. Squirrel"</snippet></ROW><ROW><id>6209946</id><snippet>rocky.squirrel@gmail.com (Rocky J. Squirrel)
</snippet></ROW><ROW><id>6209946</id><snippet>&gt;&gt;&gt; import email.utils
&gt;&gt;&gt; email.utils.parseaddr("John Smith &lt;jsmith@gmail.com&gt;")
('John Smith', 'jsmith@gmail.com')
</snippet></ROW><ROW><id>6210150</id><snippet>dlg = wx.ColourDialog().SetChooseFull(1)</snippet></ROW><ROW><id>6210150</id><snippet>SetChooseFull</snippet></ROW><ROW><id>6210150</id><snippet>wx.ColourData</snippet></ROW><ROW><id>6210150</id><snippet>def OnCC(self, evt):
    data = wx.ColourData()
    data.SetChooseFull(True)

    # set the first custom color (index 0)
    data.SetCustomColour(0, (255, 170, 128))
    # set indexes 1-N here if you like.

    # set the default color in the chooser
    data.SetColour(wx.Colour(128, 255, 170))

    # construct the chooser
    dlg = wx.ColourDialog(self, data)

    if dlg.ShowModal() == wx.ID_OK:
        # set the panel background color
        color = dlg.GetColourData().Colour
        self.panel.SetBackgroundColour(color)
    dlg.Destroy()
</snippet></ROW><ROW><id>6210150</id><snippet>data.SetCustomColor(index, color)</snippet></ROW><ROW><id>6210150</id><snippet>N</snippet></ROW><ROW><id>6210150</id><snippet>0</snippet></ROW><ROW><id>6211433</id><snippet>$ git clone https://github.com/rg3/youtube-dl.git
$ ./youtube-dl  http://www.youtube.com/watch?v=VHkPiU9YAQk
</snippet></ROW><ROW><id>6211433</id><snippet>$ ./youtube-dl --playlist-start=1 --playlist-end=1 http://www.youtube.com/my_playlists?p=AA0F3A8E116E1219
</snippet></ROW><ROW><id>6211630</id><snippet>t = Session.query(
    Posts.user_id,
    func.max(Posts.post_time).label('max_post_time'),
).group_by(Posts.user_id).subquery('t')

query = Session.query(User, Posts).filter(and_(
    User.user_id == Posts.user_id,
    User.user_id == t.c.user_id,
    Posts.post_time == t.c.max_post_time,
))

for user, post in query:
    print user.user_id, post.post_id
</snippet></ROW><ROW><id>6211808</id><snippet>enumerate</snippet></ROW><ROW><id>6211808</id><snippet>array1 = arr1.split(',')
array2 = arr2.split(',')
for i,value in enumerate(array1):
   print value, array2[i]
</snippet></ROW><ROW><id>6211808</id><snippet>25 A
26 B
</snippet></ROW><ROW><id>6211888</id><snippet>pygame.image.fromstring()</snippet></ROW><ROW><id>6211958</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>6211958</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>6212191</id><snippet>import socket
s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
s.bind("/path/to/socket")
s.listen(100)
while True:
    conn, addr = s.accept()
    do_something(conn, addr)
</snippet></ROW><ROW><id>6212191</id><snippet>s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
s.connect("/path/to/socket")
</snippet></ROW><ROW><id>6212281</id><snippet>"%.3f" % math.pi
</snippet></ROW><ROW><id>6212508</id><snippet>class A(object):
    foo = 20
    bar = 30
    def build_b(self):
        class B(object):
            foo = self.foo
            bar = self.bar
        return B()
</snippet></ROW><ROW><id>6212508</id><snippet>&gt;&gt;&gt; b_obj = A().build_b()

&gt;&gt;&gt; b_obj.foo, b_obj.bar
&lt;&lt;&lt; (20, 30)
</snippet></ROW><ROW><id>6212508</id><snippet>B</snippet></ROW><ROW><id>6212508</id><snippet>A</snippet></ROW><ROW><id>6212508</id><snippet>__init__</snippet></ROW><ROW><id>6212569</id><snippet>self.filter_ids</snippet></ROW><ROW><id>6212569</id><snippet>self.filter_ids.all().values_list('id', flat=True)</snippet></ROW><ROW><id>6212569</id><snippet>[1,2,3]</snippet></ROW><ROW><id>6212770</id><snippet>upgrade-app</snippet></ROW><ROW><id>6212770</id><snippet>paster --plugin=appname upgrade-app /path/to/production.ini appname</snippet></ROW><ROW><id>6213056</id><snippet>p1,p2 = instr.split('(',1)
lc = '%s(%s' % (p1.lower(), p2)
</snippet></ROW><ROW><id>6213132</id><snippet>next()</snippet></ROW><ROW><id>6213132</id><snippet>readlines()</snippet></ROW><ROW><id>6213132</id><snippet>filne = "in"
f = open(filne, 'r+')

lines = f.readlines()
for i in range(0, len(lines)):
    line = lines[i]
    print line
    if (line[:5] == "anim "):
        ne = lines[i + 1] # you may want to check that i &lt; len(lines)
        print ' ne ',ne,'\n'
        break

f.close()
</snippet></ROW><ROW><id>6213293</id><snippet>celery</snippet></ROW><ROW><id>6213416</id><snippet>arrays = []
for line in open(your_file): # no need to use readlines if you don't want to store them
    # use a list comprehension to build your array on the fly
    new_array = np.array((array.float(i) for i in line.split(' '))) 
    arrays.append(new_array)
</snippet></ROW><ROW><id>6213416</id><snippet>import csv

arrays = []
# declare the format of you csv file and Python will turn line into
# lists for you 
parser = csv.reader(open(your_file), delimiter=' '))
for l in parser: 
    arrays.append(np.array((array.float(i) for i in l)))
</snippet></ROW><ROW><id>6213416</id><snippet>import csv

parser = csv.reader(open(your_file), delimiter=' '))
make_array = lambda row : np.array((array.float(i) for i in row)) 
arrays = [make_array(row) for row in parser]
</snippet></ROW><ROW><id>6213416</id><snippet>arrays = [np.array((array.float(i) for i in r)) for r in csv.reader(open(your_file), delimiter=' '))]
</snippet></ROW><ROW><id>6213416</id><snippet>csv</snippet></ROW><ROW><id>6213416</id><snippet>arrays = [np.array((array.float(i) for i in l.split())) for l in open(your_file))]
</snippet></ROW><ROW><id>6213427</id><snippet>Traceback (most recent call last):
  File "D:\py\usb.py", line 1, in &lt;module&gt;
</snippet></ROW><ROW><id>6213427</id><snippet>usb.py</snippet></ROW><ROW><id>6213427</id><snippet>PATH</snippet></ROW><ROW><id>6213427</id><snippet>.</snippet></ROW><ROW><id>6213427</id><snippet>D:\py\</snippet></ROW><ROW><id>6213427</id><snippet>usb.py</snippet></ROW><ROW><id>6213427</id><snippet>C:\Python27\</snippet></ROW><ROW><id>6213427</id><snippet>&lt;python_path&gt;\lib\site-packages\usb\core.py</snippet></ROW><ROW><id>6213739</id><snippet>self.diceList</snippet></ROW><ROW><id>6213739</id><snippet>self.diceList</snippet></ROW><ROW><id>6213739</id><snippet>chooseDice</snippet></ROW><ROW><id>6213739</id><snippet>self.button1.configure(command=lambda btn=self.button1: self.chooseDice(btn, 1))
</snippet></ROW><ROW><id>6213739</id><snippet>chooseDice</snippet></ROW><ROW><id>6213739</id><snippet>from Tkinter import *

class GraphicsInterface:

    def __init__(self):
        self.window = Tk()
        self.window.geometry("720x500")
        self.clicked=[] 
        self.buttons = []

        for n in range(1, 3):
            btn = Button(text="Button " + str(n))
            btn.configure(command=lambda btn=btn, n=n: self.chooseDice(btn, n))
            btn.pack()
            self.buttons.append(btn)

        btn = Button(text="Go!", command=self.go)
        btn.pack()
        self.window.mainloop()


    def go(self):
        print "buttons:", self.clicked
        self.reset()

    def reset(self):
        '''Reset all the buttons'''
        self.clicked = []
        for button in self.buttons:
            button.configure(state="normal")

    def chooseDice(self, widget, number):
        self.clicked.append(number)
        widget.configure(state="disabled")

app = GraphicsInterface()
</snippet></ROW><ROW><id>6213739</id><snippet>place</snippet></ROW><ROW><id>6213739</id><snippet>pack</snippet></ROW><ROW><id>6213739</id><snippet>grid</snippet></ROW><ROW><id>6213898</id><snippet>numpy.seterr</snippet></ROW><ROW><id>6214404</id><snippet>curl --no-buffer localhost:8888 &amp; curl --no-buffer localhost:8888
</snippet></ROW><ROW><id>6214541</id><snippet>    GQL does not have an OR operator. However, it does have an IN operator, 
which provides a limited form of OR.
</snippet></ROW><ROW><id>6214541</id><snippet>  vendors=vendor.all()
  pub_vendors = vendors.filter("access = ","public")
  vendors=vendor.all()
  org_vendors = vendors.filter("organisation_id = ",orgid)
  results = pub_vendors.extend(org_vendors)
</snippet></ROW><ROW><id>6214551</id><snippet>fruit</snippet></ROW><ROW><id>6214551</id><snippet>0</snippet></ROW><ROW><id>6214551</id><snippet>[]</snippet></ROW><ROW><id>6214551</id><snippet>import collections
result = collections.defaultdict(int)
def count():
    fruit = input("What fruit are you getting at the store? ")
    result[fruit] += 1
</snippet></ROW><ROW><id>6214551</id><snippet>collections.Counter</snippet></ROW><ROW><id>6214551</id><snippet>collections.defaultdict(int)</snippet></ROW><ROW><id>6214551</id><snippet>collections</snippet></ROW><ROW><id>6214551</id><snippet>defaultdict</snippet></ROW><ROW><id>6214551</id><snippet>result = {}
def count():
    fruit = input("What fruit are you getting at the store? ")
    if fruit not in result:
        result[fruit] = 0 # Create a new entry in the dictionary. 0 == int()
    result[fruit] += 1
</snippet></ROW><ROW><id>6214554</id><snippet>class ThreadsafeTestMiddleware(object):

    def process_request(self, request):
        request.thread_safe_variable = some_dynamic_value_from_request

    def process_response(self, request, response):
        #... do something with request.thread_safe_variable here ...
</snippet></ROW><ROW><id>6214673</id><snippet>retcode = subprocess.call(args, shell=True)
</snippet></ROW><ROW><id>6214673</id><snippet>retcode = subprocess.call(' '.join(args), shell=True)
</snippet></ROW><ROW><id>6214847</id><snippet>Widget.objects.extra(select={'year': "EXTRACT(year FROM sold)", 'month': "EXTRACT(month from sold)"}).values('year', 'month').annotate(Sum('price'))
</snippet></ROW><ROW><id>6214847</id><snippet>[{'price__sum': 1111, 'year': 2010L, 'month': 6L}...]
</snippet></ROW><ROW><id>6214847</id><snippet>for date in Widget.objects.all().dates('sold','month'):
    values["%s_%s" % (date.year,date.month)] = Widget.objects.filter(sold__month=date.month,sold__year=date.year).aggregate(Sum('price'))
</snippet></ROW><ROW><id>6215284</id><snippet>concurrent.futures</snippet></ROW><ROW><id>6215284</id><snippet>import math, time
from concurrent import futures

PRIMES = [112272535095293, 112582705942171, 112272535095293, 115280095190773, 115797848077099, 1099726899285419, 112272535095293, 112582705942171, 112272535095293, 115280095190773, 115797848077099, 1099726899285419]

def is_prime(n):
    if n % 2 == 0:
        return False

    sqrt_n = int(math.floor(math.sqrt(n)))
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def bench(f):
    start = time.time()
    f()
    elapsed = time.time() - start
    print("Completed in {} seconds".format(elapsed))

def concurrent():
    with futures.ProcessPoolExecutor() as executor:
        values = list(executor.map(is_prime, PRIMES))

def listcomp():
    values = [is_prime(x) for x in PRIMES]
</snippet></ROW><ROW><id>6215284</id><snippet>&gt;&gt;&gt; bench(listcomp)
Completed in 14.463825941085815 seconds
&gt;&gt;&gt; bench(concurrent)
Completed in 3.818351984024048 seconds
</snippet></ROW><ROW><id>6215323</id><snippet>try:
  db_cursor.execute('some hopefully valid SQL;')
except sqlite3.Error, msg:
  print msg
</snippet></ROW><ROW><id>6215365</id><snippet>for obj in self.things:
    self.choiceCar.Append(obj.name, obj)
</snippet></ROW><ROW><id>6215365</id><snippet>obj = self.choiceCar.GetClientData(self.choiceCar.GetSelection())
</snippet></ROW><ROW><id>6215375</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>6215375</id><snippet>/etc/group-</snippet></ROW><ROW><id>6215375</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>6215375</id><snippet>/etc/group-</snippet></ROW><ROW><id>6215375</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>6215375</id><snippet>fork()</snippet></ROW><ROW><id>6215375</id><snippet>/etc/group-</snippet></ROW><ROW><id>6215375</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>6215375</id><snippet>os.setgid( NEW_GID )
os.setuid( NEW_UID )
</snippet></ROW><ROW><id>6215375</id><snippet>/proc/self/status</snippet></ROW><ROW><id>6215755</id><snippet>uuid</snippet></ROW><ROW><id>6215755</id><snippet>collections.Counter(map(uuid, open("log.txt")))
</snippet></ROW><ROW><id>6215935</id><snippet>zc.buildout</snippet></ROW><ROW><id>6216463</id><snippet>T(i+1, j+1)</snippet></ROW><ROW><id>6216463</id><snippet>T( i+1,j+1 )</snippet></ROW><ROW><id>6216463</id><snippet>memo[i,j]</snippet></ROW><ROW><id>6216463</id><snippet>memo[(i,j)]</snippet></ROW><ROW><id>6216463</id><snippet>self.diff(i+1, j+1)</snippet></ROW><ROW><id>6216463</id><snippet>T(i+1,j+1)</snippet></ROW><ROW><id>6216651</id><snippet>%s</snippet></ROW><ROW><id>6216651</id><snippet>execute()</snippet></ROW><ROW><id>6216651</id><snippet>software_id_string = (1,2,4)
qry = '''SELECT md5 
           FROM software 
          WHERE software_id IN (%s)''' % ','.join(['%s']*len(software_id_string))
# // 'SELECT md5 FROM software WHERE software_id IN (%s,%s,%s)'
cursor.execute(qry, software_id_string)
</snippet></ROW><ROW><id>6216835</id><snippet>cfg</snippet></ROW><ROW><id>6216835</id><snippet>__getitem__</snippet></ROW><ROW><id>6216835</id><snippet>cfg</snippet></ROW><ROW><id>6216835</id><snippet>__getitem__</snippet></ROW><ROW><id>6216835</id><snippet>__getitem__</snippet></ROW><ROW><id>6216835</id><snippet>interface_number = cfg[0].bInterfaceNumber
</snippet></ROW><ROW><id>6216835</id><snippet>cfg</snippet></ROW><ROW><id>6216835</id><snippet>__getitem__</snippet></ROW><ROW><id>6216835</id><snippet>cfg</snippet></ROW><ROW><id>6216835</id><snippet>__getitem__</snippet></ROW><ROW><id>6216835</id><snippet>index</snippet></ROW><ROW><id>6216835</id><snippet>index[0], index[1]</snippet></ROW><ROW><id>6216835</id><snippet>cfg</snippet></ROW><ROW><id>6216835</id><snippet>&gt;&gt;&gt; # access the second configuration
&gt;&gt;&gt; cfg = dev[1]
&gt;&gt;&gt; # access the first interface
&gt;&gt;&gt; intf = cfg[(0,0)]
&gt;&gt;&gt; # third endpoint
&gt;&gt;&gt; ep = intf[2] 
</snippet></ROW><ROW><id>6217168</id><snippet>AttributeError: 'NoneType' object has no attribute 'stop'
</snippet></ROW><ROW><id>6217168</id><snippet>prog = ttk.Progressbar(mainframe, mode='indeterminate')
prog.grid(column=1, row=100, sticky=W)
</snippet></ROW><ROW><id>6217168</id><snippet>prog.start()
</snippet></ROW><ROW><id>6217446</id><snippet>gray = (.5,.5,.5)
orange = (1.0, 0.647, 0.0)
red = (1.0, 0.0, 0.0)

clrs = [gray for xx in bins]

idxs = pdf.argsort()
idxs = idxs[::-1]
oranges = idxs[(cumsum(pdf[idxs])*binwidth &lt; 0.8).nonzero()]
reds = idxs[(cumsum(pdf[idxs])*binwidth &lt; 0.6).nonzero()]

for idx in oranges:
    clrs[idx] = orange

for idx in reds:
    clrs[idx] = red

bar(left=bins,height=pdf,width=binwidth,color=clrs)
</snippet></ROW><ROW><id>6217668</id><snippet>&gt;&gt;&gt; testlist = list()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'mlist' object is not callable
</snippet></ROW><ROW><id>6217668</id><snippet>&gt;&gt;&gt; type([])
&lt;type 'list'&gt;
&gt;&gt;&gt; type(list)
&lt;class '__main__.mlist'&gt;
&gt;&gt;&gt; type(testlist)
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>6217668</id><snippet>[]</snippet></ROW><ROW><id>6217668</id><snippet>list</snippet></ROW><ROW><id>6217668</id><snippet>mlist</snippet></ROW><ROW><id>6217668</id><snippet>dis</snippet></ROW><ROW><id>6217668</id><snippet>&gt;&gt;&gt; import dis # python's disassembler

&gt;&gt;&gt; def code1():
...     return []
...
&gt;&gt;&gt; dis.dis(code1)
  2           0 BUILD_LIST               0
              3 RETURN_VALUE

&gt;&gt;&gt; def code2():
...     return list()
...
&gt;&gt;&gt; dis.dis(code2)
  2           0 LOAD_GLOBAL              0 (list)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE
</snippet></ROW><ROW><id>6217668</id><snippet>list</snippet></ROW><ROW><id>6217668</id><snippet>[]</snippet></ROW><ROW><id>6217668</id><snippet>BUILD_LIST</snippet></ROW><ROW><id>6217668</id><snippet>[]</snippet></ROW><ROW><id>6217668</id><snippet>list</snippet></ROW><ROW><id>6217668</id><snippet>[]</snippet></ROW><ROW><id>6217668</id><snippet>&gt;&gt;&gt; class NewList(list):
...     pass
...
&gt;&gt;&gt; a = NewList()
&gt;&gt;&gt; a.append(23)
&gt;&gt;&gt; a[0]
23
&gt;&gt;&gt; def double_getitem(self, key):
...     return list.__getitem__(self, key) * 2
...
&gt;&gt;&gt; NewList.__getitem__ = double_getitem
&gt;&gt;&gt; a[0]
46
</snippet></ROW><ROW><id>6217668</id><snippet>&gt;&gt;&gt; list.__getitem__ = double_getitem
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'list'
</snippet></ROW><ROW><id>6217832</id><snippet>os.remove(infile)</snippet></ROW><ROW><id>6217832</id><snippet>subprocess.call()</snippet></ROW><ROW><id>6217832</id><snippet>wait()</snippet></ROW><ROW><id>6217832</id><snippet>p = subprocess.Popen(opensslCmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, close_fds=True)
p.wait()
os.remove(infile)
</snippet></ROW><ROW><id>6218463</id><snippet>follows = models.ManyToManyField('self', related_name='follows', symmetrical=False)
</snippet></ROW><ROW><id>6218975</id><snippet>#!/usr/bin/python
import sys

print "enter val: ",
sys.stdout.flush()
val = raw_input()
print val
</snippet></ROW><ROW><id>6218975</id><snippet>#!/usr/bin/python
import sys

sys.stdout = sys.stderr
val = raw_input("enter val: ")
sys.stdout = sys.__stdout__
print val
</snippet></ROW><ROW><id>6219468</id><snippet>id</snippet></ROW><ROW><id>6219468</id><snippet>&gt;&gt;&gt; f = (x for x in [1,2,3])
&gt;&gt;&gt; print f
&lt;generator object &lt;genexpr&gt; at 0x1004d22d0&gt;
&gt;&gt;&gt; '%x' % id(f)
'1004d22d0'
</snippet></ROW><ROW><id>6219468</id><snippet>__repr__</snippet></ROW><ROW><id>6219468</id><snippet>__str__</snippet></ROW><ROW><id>6219468</id><snippet>&gt;&gt;&gt; class Foo:
...     def __str__(self): return "Foo instance"
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; print a
Foo instance
&gt;&gt;&gt; print repr(a)
&lt;__main__.Foo instance at 0x1004d1c68&gt;
</snippet></ROW><ROW><id>6219468</id><snippet>id</snippet></ROW><ROW><id>6219468</id><snippet>id</snippet></ROW><ROW><id>6219468</id><snippet>id</snippet></ROW><ROW><id>6219468</id><snippet>__repr__</snippet></ROW><ROW><id>6219468</id><snippet>id</snippet></ROW><ROW><id>6219468</id><snippet>__repr__</snippet></ROW><ROW><id>6219468</id><snippet>__repr__</snippet></ROW><ROW><id>6219468</id><snippet>__repr__</snippet></ROW><ROW><id>6219468</id><snippet>&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; '%x' % id(a)
'1004d1fc8'
&gt;&gt;&gt; '%x' % id(a.__str__)
'1004745a0'
&gt;&gt;&gt; '%x' % id(Foo.__str__)
'1004745a0'
&gt;&gt;&gt; repr(a.__str__)
'&lt;bound method Foo.__str__ of &lt;__main__.Foo instance at 0x1004d1fc8&gt;&gt;'
</snippet></ROW><ROW><id>6219842</id><snippet>QThread</snippet></ROW><ROW><id>6219842</id><snippet>class MyThread(QtCore.QThread):
    def run(self):
    ''' reinplemented from parent '''
        # make thread sleep to make sure
        # QApplication is running before doing something
        self.sleep(2)
        do_something()

class MyWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.attr = 'foo'
        self.thread = MyThread(self)
        self.thread.start()

def main():
    app = QtGui.QApplication(sys.argv)
    w = MyWidget()
    w.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>6219842</id><snippet>QApplication</snippet></ROW><ROW><id>6219842</id><snippet>QApplication</snippet></ROW><ROW><id>6219842</id><snippet>MyWidget()</snippet></ROW><ROW><id>6219842</id><snippet>QApplication</snippet></ROW><ROW><id>6219842</id><snippet>app</snippet></ROW><ROW><id>6219842</id><snippet>w</snippet></ROW><ROW><id>6219858</id><snippet>numpy</snippet></ROW><ROW><id>6219943</id><snippet>set</snippet></ROW><ROW><id>6220255</id><snippet># code

if __name__ == "__main__": exec("""

# main code

#""")
</snippet></ROW><ROW><id>6220530</id><snippet>geturl()</snippet></ROW><ROW><id>6220530</id><snippet>urllib2.urlopen()</snippet></ROW><ROW><id>6220530</id><snippet>geturl()</snippet></ROW><ROW><id>6220530</id><snippet>#!/usr/bin/env python
# coding: utf-8

import urllib2

url1 = 'http://www.independent.co.uk/life-style/gadgets-and-tech/news/chinese-blamed-for-gmail-hacking-2292113.html'
url2 = 'http://www.independent.co.uk/life-style/gadgets-and-tech/news/2292113.html'

for url in [url1, url2]:
    result = urllib2.urlopen(url)
    print result.geturl()
</snippet></ROW><ROW><id>6220530</id><snippet>http://www.independent.co.uk/life-style/gadgets-and-tech/news/chinese-blamed-for-gmail-hacking-2292113.html
http://www.independent.co.uk/life-style/gadgets-and-tech/news/chinese-blamed-for-gmail-hacking-2292113.html
</snippet></ROW><ROW><id>6220687</id><snippet>setup.cfg</snippet></ROW><ROW><id>6220687</id><snippet>[install]
install-lib=/usr/local/lib/python2.7/site-packages
</snippet></ROW><ROW><id>6220687</id><snippet>% python setup.py bdist_rpm
% rpm -qpl dist/foo-0.0.0-1.noarch.rpm | grep foo

/usr/local/lib/python2.7/site-packages/foo/__init__.py
/usr/local/lib/python2.7/site-packages/foo/__init__.pyc
</snippet></ROW><ROW><id>6220881</id><snippet>python2.6 setup.py install
</snippet></ROW><ROW><id>6220881</id><snippet>easy_install-2.6 some_module
</snippet></ROW><ROW><id>6220881</id><snippet>$ python -V
Python 2.5.4
$ mkvirtualenv --python=python2.6 foo
foo $ python -V
Python 2.6.1
foo $ pip install some_mod # installs module in foo's library, rather
                           # than site wide
foo $ deactivate # leave the virtual env
$ python -m some_mod
/path/to/python: No module named some_mod
</snippet></ROW><ROW><id>6220881</id><snippet>workon</snippet></ROW><ROW><id>6220881</id><snippet>$ workon foo
foo $ python -m some_mod # no error, apns available within the env
foo $ 
</snippet></ROW><ROW><id>6220955</id><snippet>[bob], [red]</snippet></ROW><ROW><id>6220955</id><snippet>[bob], [green, red]</snippet></ROW><ROW><id>6221016</id><snippet>os.system</snippet></ROW><ROW><id>6221016</id><snippet>subprocess.call</snippet></ROW><ROW><id>6221016</id><snippet>shell=True</snippet></ROW><ROW><id>6221293</id><snippet>StringIO</snippet></ROW><ROW><id>6221293</id><snippet>#!/usr/bin/env python
# coding: utf-8

from StringIO import StringIO

# for this example, each "file" has 3 lines instead of 100000
f1 = '1\t10\n2\t11\n3\t12'
f2 = '1\t13\n2\t14\n3\t15'
f3 = '1\t16\n2\t17\n3\t18'

files = [f1, f2, f3]

# data is a list of dictionaries mapping population to average age
# i.e. data[0][10000] contains the average age in location 0 (files[0]) with
# population of 10000.
data = []

for i,filename in enumerate(files):
    f = StringIO(filename)
    # f = open(filename, 'r')
    data.append(dict())

    for line in f:
        population, average_age = (int(s) for s in line.split('\t'))
        data[i][population] = average_age

print data

# gather custom statistics on the data

# i.e. here's how to calculate the average age across all locations where
# population is 2:
num_locations = len(data)
pop2_avg = sum((data[loc][2] for loc in xrange(num_locations)))/num_locations
print 'Average age with population 2 is', pop2_avg, 'years old'
</snippet></ROW><ROW><id>6221293</id><snippet>[{1: 10, 2: 11, 3: 12}, {1: 13, 2: 14, 3: 15}, {1: 16, 2: 17, 3: 18}]
Average age with population 2 is 14 years old
</snippet></ROW><ROW><id>6221295</id><snippet>&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; from PIL import Image

&gt;&gt;&gt; im = Image.open(StringIO(image_string))

&gt;&gt;&gt; im.size, im.bits
&lt;&lt;&lt; ((1654, 1279), 8)
</snippet></ROW><ROW><id>6221307</id><snippet>select * from html where url="google.com" and xpath='//title'
</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>draw-the-entire-part-of-the-widget-that's-visible-Event()</snippet></ROW><ROW><id>6221402</id><snippet>QLabel</snippet></ROW><ROW><id>6221402</id><snippet>QLabel::paintEvent(e)</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>update()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221402</id><snippet>paintEvent()</snippet></ROW><ROW><id>6221565</id><snippet>sub_info = {i.tag: i.text for i in tag}
</snippet></ROW><ROW><id>6221575</id><snippet>update</snippet></ROW><ROW><id>6221593</id><snippet>PyObject*</snippet></ROW><ROW><id>6221593</id><snippet>TypeError</snippet></ROW><ROW><id>6221836</id><snippet>python2.7</snippet></ROW><ROW><id>6221836</id><snippet>python2.7.1</snippet></ROW><ROW><id>6221836</id><snippet>/usr/bin/</snippet></ROW><ROW><id>6221836</id><snippet>sudo ln -s /usr/bin/python2.7.1 /usr/bin/python2.7</snippet></ROW><ROW><id>6221900</id><snippet>sys/utsname.h</snippet></ROW><ROW><id>6221900</id><snippet>c_char * n</snippet></ROW><ROW><id>6221900</id><snippet>sys/utsname.h</snippet></ROW><ROW><id>6221900</id><snippet>print gnar.raw</snippet></ROW><ROW><id>6221911</id><snippet>__cmp__</snippet></ROW><ROW><id>6221911</id><snippet>__eq__</snippet></ROW><ROW><id>6221911</id><snippet>__cmp__</snippet></ROW><ROW><id>6221911</id><snippet>&gt;&gt;&gt; c = Card(0,2)
&gt;&gt;&gt; str(c)
'2 of Clubs'
&gt;&gt;&gt; c in [c]
True
&gt;&gt;&gt; c in Deck().cards
False
</snippet></ROW><ROW><id>6221911</id><snippet>__eq__</snippet></ROW><ROW><id>6221911</id><snippet>from functools import total_ordering

@total_ordering
class Card(object):
    """Represents a standard playing card."""
    suit_names = ["Clubs", "Diamonds", "Hearts", "Spades"]
    rank_names = [None, "Ace", "2", "3", "4", "5", "6", "7", 
              "8", "9", "10", "Jack", "Queen", "King"]
    def __init__(self, suit=0, rank=2):
        self.suit = suit
        self.rank = rank
    def __str__(self):
        return '%s of %s' % (Card.rank_names[self.rank],
                             Card.suit_names[self.suit])
    def __repr__(self): return str(self)
    def __lt__(self, other):
        t1 = self.suit, self.rank
        t2 = other.suit, other.rank
        return t1 &lt; t2
    def __eq__(self, other):
        t1 = self.suit, self.rank
        t2 = other.suit, other.rank
        return t1 == t2


&gt;&gt;&gt; c = Card(2,3)
&gt;&gt;&gt; c
3 of Hearts
&gt;&gt;&gt; c in Deck().cards
True
</snippet></ROW><ROW><id>6223663</id><snippet>None</snippet></ROW><ROW><id>6224225</id><snippet>import os, sys

child_pid = os.fork()
if child_pid == 0:
  print 'in child'
  os._exit(os.EX_OK)
  print 'hm... wasn''t supposed to get here'
else:
  print 'in parent'
</snippet></ROW><ROW><id>6224225</id><snippet>os._exit()</snippet></ROW><ROW><id>6224225</id><snippet>sys.exit()</snippet></ROW><ROW><id>6224225</id><snippet>sys.exit(n)</snippet></ROW><ROW><id>6224225</id><snippet>_exit()</snippet></ROW><ROW><id>6224384</id><snippet>&gt;&gt;&gt; b'\xcf\x84o\xcf\x81\xce\xbdo\xcf\x82'.decode('utf-16')
'蓏콯캁澽苏'
&gt;&gt;&gt; b'\xcf\x84o\xcf\x81\xce\xbdo\xcf\x82'.decode('utf-8')
'τoρνoς'
</snippet></ROW><ROW><id>6224384</id><snippet>.decode()</snippet></ROW><ROW><id>6224384</id><snippet>.encode()</snippet></ROW><ROW><id>6224384</id><snippet>&gt;&gt;&gt; 'τoρνoς'.encode('utf-8')
b'\xcf\x84o\xcf\x81\xce\xbdo\xcf\x82'
</snippet></ROW><ROW><id>6224590</id><snippet>log = logging.getLogger(__name__)</snippet></ROW><ROW><id>6224735</id><snippet>import itertools

arguments = ('A', 'B', 'C', 'D')
funcs_ = [f1, f2, f3, f4]
logic_ = ["and","or"]
op_ = ["&gt;","&lt;","="]
vol_lmt_ = [200, 300]

num_func = len(funcs_)

assert num_func == len(arguments), ("The number of argument should be the same as "
                                    "the number of function.")

operands = itertools.product(["funcs_[%d]" % i for i in range(num_func)],
                             arguments,
                             op_,
                             vol_lmt_)

def comp(operands):
    templ = "{func}({arg}){op}{val}"
    for operand in operands:
        yield templ.format(func=operand[0], arg=operand[1],
                           op=operand[2], val=operand[3])

new_operands = map(comp, itertools.tee(operands, num_func))

# construct the argument to pass to itertools.product.
args = []
for operand in new_operands:
    args.append(operand)
    args.append(logic_)

args.pop() # Remove the last logic operator.

res = itertools.product(*args)

print " ".join(res.next())
# funcs_[0](A)&gt;200 and funcs_[0](A)&gt;200 and funcs_[0](A)&gt;200 and funcs_[0](A)&gt;200

...
</snippet></ROW><ROW><id>6224735</id><snippet>vars_</snippet></ROW><ROW><id>6224735</id><snippet>vars_</snippet></ROW><ROW><id>6224735</id><snippet>funcs_</snippet></ROW><ROW><id>6224735</id><snippet>def get_name(obj):
    """Get the name of an object (variable) from the globals dict.

    Argument:
       - obj : The variable that we want to get the name of. 

    Return:
       - A string representing the name of the object if it was found else return None.

    """

    for name, value in globals().items():
         if value is obj:
             return name
</snippet></ROW><ROW><id>6224857</id><snippet>import sys
if sys.hexversion &lt; 0x02060000:
    sys.exit("Python 2.6 or newer is required to run this program.")

import module_requiring_26
</snippet></ROW><ROW><id>6224857</id><snippet>__init__</snippet></ROW><ROW><id>6225121</id><snippet>def no_repeat_product(*seq):
    previous = (None,)*len(seq)
    for vals in itertools.product(*seq):
        out = list(vals)
        for i,x in enumerate(out):
            if previous[i] == x:
                out[i] = None
        previous = vals
        yield(tuple(out))   
</snippet></ROW><ROW><id>6225121</id><snippet>def no_repeat_product(*seq):
    previous = (None,)*len(seq)
    for vals in itertools.product(*seq):
        out = tuple((y,None)[x==y] for x,y in itertools.izip(previous, vals))
        previous = vals
        yield(out)       
</snippet></ROW><ROW><id>6225121</id><snippet>for x in no_repeat_product((1,2,3), (5,6), (7,8)): 
    print x 
</snippet></ROW><ROW><id>6225121</id><snippet>(1, 5, 7)
(None, None, 8)
(None, 6, 7)
(None, None, 8)
(2, 5, 7)
(None, None, 8)
(None, 6, 7)
(None, None, 8)
(3, 5, 7)
(None, None, 8)
(None, 6, 7)
(None, None, 8)
</snippet></ROW><ROW><id>6225121</id><snippet>books = ("Book 1", "Book 2")
chapters = ("Chapter 1", "Chapter 2")
pages = ("Page 1", "Page 2", "Page 3")

s1 = max(map(len, books)) + 2  # size of col 1
s2 = max(map(len, chapters)) + 2  # size of col 2
x = lambda s, L: (s, "")[s == None].ljust(L)  # Left justify, handle None

for book, chapter, page in no_repeat_product(books, chapters, pages):
    print x(book, s1), x(chapter, s2), page
</snippet></ROW><ROW><id>6225121</id><snippet>Book 1   Chapter 1   Page 1
                     Page 2
                     Page 3
         Chapter 2   Page 1
                     Page 2
                     Page 3
Book 2   Chapter 1   Page 1
                     Page 2
                     Page 3
         Chapter 2   Page 1
                     Page 2
                     Page 3
</snippet></ROW><ROW><id>6225658</id><snippet>if __name__ == "__main__":
    x = count_line_occurrences(["a","b","c"],["c","c","b","a"])
    print x
</snippet></ROW><ROW><id>6225658</id><snippet>found a
found b
found c
found c
{'a': 1, 'c': 2, 'b': 1}
</snippet></ROW><ROW><id>6225658</id><snippet>\t\n</snippet></ROW><ROW><id>6225658</id><snippet>def count_line_occurrences(ref_list,input_list):
  line_counter = {}

  ref_list = map(lambda x: x.strip(" \t\n"),ref_list)
  input_list = map(lambda x: x.strip(" \t\n"),input_list)

  # Initialization
  for ref_line in ref_list:
    line_counter[ref_line] = 0

  for ref_line in ref_list:
    #print ref_line
    for input_line in input_list:
      #print input_line
      if str(input_line).find(str(ref_line)) != -1:
        print 'found ' + ref_line
        line_counter[ref_line] += 1
  return line_counter
</snippet></ROW><ROW><id>6225658</id><snippet>ref_list = map(lambda x: x.strip(" \t\n"),ref_list)
input_list = map(lambda x: x.strip(" \t\n"),input_list)
</snippet></ROW><ROW><id>6225658</id><snippet>string.strip</snippet></ROW><ROW><id>6225658</id><snippet>    ref_list = ['.Net Framework\n', '7-Zip\n', 'ACT DCP \n', 'ActivePerl \n', 'ActiveState Komodo Edit\n', 'ActiveTCL \n', 'Adobe Flash Player\n']
    input_list = ['7-Zip 4.57\t\n', 'WebEx\t\n', 'Adobe Acrobat Reader 8.0.0\t\n', 'Adobe Flash Player 10 ActiveX\t10.0.32.18\n']
    x = count_line_occurrences(ref_list,input_list)
    print x
</snippet></ROW><ROW><id>6225658</id><snippet>{'ActiveState Komodo Edit': 0, '.Net Framework': 0, 'ACT DCP': 0, 'ActivePerl': 0, 'Adobe Flash Player': 1, '7-Zip': 1, 'ActiveTCL': 0}
</snippet></ROW><ROW><id>6225707</id><snippet>.tar.gz</snippet></ROW><ROW><id>6225707</id><snippet>.egg</snippet></ROW><ROW><id>6225707</id><snippet>setup.py sdist</snippet></ROW><ROW><id>6225951</id><snippet>class MyClass:
      pass

def test(x, y, z=external_function(MyClass):
      pass

MyClass.test = staticmethod(test)
del test
</snippet></ROW><ROW><id>6225951</id><snippet>new</snippet></ROW><ROW><id>6225951</id><snippet>if z is None</snippet></ROW><ROW><id>6226171</id><snippet>build_ext</snippet></ROW><ROW><id>6226171</id><snippet>install</snippet></ROW><ROW><id>6226171</id><snippet>--home</snippet></ROW><ROW><id>6226171</id><snippet>--prefix</snippet></ROW><ROW><id>6226171</id><snippet>/opt</snippet></ROW><ROW><id>6226410</id><snippet>&gt;&gt;&gt; from configobj import ConfigObj

&gt;&gt;&gt; config = ConfigObj('your_config_filename')

&gt;&gt;&gt; config.keys()
&lt;&lt;&lt; ['default', 'section1', 'section2']

&gt;&gt;&gt; config['default']
&lt;&lt;&lt; {'PROP1': '12345', 'PROP2': 'abcde'}
</snippet></ROW><ROW><id>6226444</id><snippet>class Book(Base):
    __tablename__ = 'books'

    book_id = Column(Integer, primary_key=True)
    title = Column(String(200), nullable=False)
    summary = Column(String(2000))
    excerpt = deferred(Column(Text))
    photo = deferred(Column(Binary))
</snippet></ROW><ROW><id>6226456</id><snippet>src = cv.LoadImageM('src.png', cv.CV_LOAD_IMAGE_GRAYSCALE)
dest = cv.CreateMat(src.height, src.width, cv.CV_16S)
cv.Sobel(src, dest, 1, 1)
</snippet></ROW><ROW><id>6226496</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>6226496</id><snippet>counts = numpy.histogram(data[:,2], bins=range(3))[0]
sums0 = numpy.histogram(data[:,2], bins=range(3), weights=data[:,0])[0]
sums1 = numpy.histogram(data[:,2], bins=range(3), weights=data[:,1])[0]
</snippet></ROW><ROW><id>6226496</id><snippet>bins</snippet></ROW><ROW><id>6226867</id><snippet>sendButton.setMinimumSize()
</snippet></ROW><ROW><id>6226867</id><snippet>mainLayout.setRowMinimumHeight()
</snippet></ROW><ROW><id>6227151</id><snippet>multiprocessing</snippet></ROW><ROW><id>6227151</id><snippet>fork</snippet></ROW><ROW><id>6227151</id><snippet>mmap.mmap(-1, length)</snippet></ROW><ROW><id>6227151</id><snippet>pickle</snippet></ROW><ROW><id>6227151</id><snippet>length</snippet></ROW><ROW><id>6227233</id><snippet>for t in threads:
    t.join()
</snippet></ROW><ROW><id>6227233</id><snippet>threads</snippet></ROW><ROW><id>6227260</id><snippet>txn = svn.repos.fs_begin_txn_for_commit(repos_ptr, headrev, SVN_COMMIT_USER, SVN_COMMIT_MESSAGE)
root = svn.fs.txn_root(txn)
</snippet></ROW><ROW><id>6227280</id><snippet>re._pattern_type</snippet></ROW><ROW><id>6227280</id><snippet>&gt;&gt;&gt; isinstance(re.compile(''), re._pattern_type)
True
</snippet></ROW><ROW><id>6227280</id><snippet>type(re.compile(''))</snippet></ROW><ROW><id>6227280</id><snippet>try:
     rex.match(my_string)
except AttributeError:
     # rex is not an re
else:
     # rex is an re
</snippet></ROW><ROW><id>6227355</id><snippet>d^2/(dx dy)</snippet></ROW><ROW><id>6227355</id><snippet>1, 0</snippet></ROW><ROW><id>6227355</id><snippet>0, 1</snippet></ROW><ROW><id>6227623</id><snippet>os.path.expanduser(path)</snippet></ROW><ROW><id>6227623</id><snippet>expanduser('~/filename')</snippet></ROW><ROW><id>6228006</id><snippet>os.path.exists(os.path.join(user,'whatever.txt'))
</snippet></ROW><ROW><id>6228006</id><snippet>r'\whatever.txt'</snippet></ROW><ROW><id>6228006</id><snippet>os.path.join(user,r'\whatever.txt')</snippet></ROW><ROW><id>6228006</id><snippet>r'\whatever.txt'</snippet></ROW><ROW><id>6228006</id><snippet>user</snippet></ROW><ROW><id>6228006</id><snippet>whatever.txt</snippet></ROW><ROW><id>6228006</id><snippet>user</snippet></ROW><ROW><id>6228006</id><snippet>'\t'</snippet></ROW><ROW><id>6228006</id><snippet>r'~\AppData\Local\Temp'</snippet></ROW><ROW><id>6228006</id><snippet>'~/AppData/Local/Temp'</snippet></ROW><ROW><id>6228166</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>6228166</id><snippet>cwd</snippet></ROW><ROW><id>6228166</id><snippet>Popen(["cmd.exe"], cwd=mypath)
</snippet></ROW><ROW><id>6228435</id><snippet>request.method</snippet></ROW><ROW><id>6228435</id><snippet>"GET"</snippet></ROW><ROW><id>6228435</id><snippet>"POST"</snippet></ROW><ROW><id>6228435</id><snippet>HttpResponseBadRequest</snippet></ROW><ROW><id>6228435</id><snippet># untested code, use with care
def require_GET(view_func):
    def wrap(request, *args, **kwargs):
        if request.method != "GET":
            return HttpResponseBadRequest("Expecting GET request")
        return view_func(request, *args, **kwargs)
    wrap.__doc__ = view_func.__doc__
    wrap.__dict__ = view_func.__dict__
    wrap.__name__ = view_func.__name__
    return wrap
</snippet></ROW><ROW><id>6228435</id><snippet>@require_GET</snippet></ROW><ROW><id>6228435</id><snippet>@require_GET
def your_view(request):
    # ...
</snippet></ROW><ROW><id>6228435</id><snippet># again, untested so use with care.
def require_POST(view_func, required_fields=None):
    def wrap(request, *args, **kwargs):
        if request.method != "POST":
            return HttpResponseBadRequest("Expecting POST request")
        if required_fields:
            for f in required_fields:
                if f not in request.POST:
                    return HttpResponseBadRequest("Expecting field %s" % f)
        return view_func(request, *args, **kwargs)
    wrap.__doc__ = view_func.__doc__
    wrap.__dict__ = view_func.__dict__
    wrap.__name__ = view_func.__name__
    return wrap
</snippet></ROW><ROW><id>6228435</id><snippet>@require_POST
def another_view(request):
    # ...
</snippet></ROW><ROW><id>6228435</id><snippet>@require_POST(required_fields=("username", "password"))
def custom_login_view(request):
    # ...
</snippet></ROW><ROW><id>6228435</id><snippet>@require_GET</snippet></ROW><ROW><id>6228435</id><snippet>@require_POST</snippet></ROW><ROW><id>6228648</id><snippet>import functools
def runoverridden(f):
    @functools.wraps(f)
    def wrapper(self, *args, **kw):
        if getattr(self, f.__name__).im_func != wrapper:
            return f(self, *args, **kw)
    return wrapper

class A(object):
    @runoverridden
    def run(self):
        print('Running in A')

class B(A):
    def run(self):
        super(B, self).run()
        print('Running in B')

class C(A):
    pass

b = B()
c = C() 
b.run()
c.run()
</snippet></ROW><ROW><id>6228769</id><snippet>orm['hr_manager.Employee']
</snippet></ROW><ROW><id>6228769</id><snippet>Model</snippet></ROW><ROW><id>6228769</id><snippet>orm['hr_manager.Employee'].objects.all()
orm['hr_manager.Employee'].objects.get(...)
...
</snippet></ROW><ROW><id>6228971</id><snippet>dct = {}
datas = data.objects.all()

for data1 in datas:
    for data2 in datas:
        # if dict is empty
        if not dct and data1.person == data2.person and data1.place != data2.place:
            dct[(data1.place, data2.place)] = 1
        elif data1.person == data2.person and data1.place != data2.place:
            if (data1.place, data2.place) in dct:
                 dct[(data1.place, data2.place)] += 1
            elif (data2.place, data1.place) in dct:
                 dct[(data2.place, data1.place)] += 1
            else:
                 dct[(data1.place, data2.place)] = 1
        else:
            dct[(data1.place, data2.place)] = 1
</snippet></ROW><ROW><id>6229030</id><snippet>final = []
for rowx in xrange(sh.nrows):
    final.extend(sh.row_values(rowx))
</snippet></ROW><ROW><id>6229030</id><snippet>book = xlrd.open_workbook(r'c:\excelTry\Papineau.csv.xls')</snippet></ROW><ROW><id>6229030</id><snippet>book = xlrd.open_workbook('c:/excelTry/Papineau.csv.xls')</snippet></ROW><ROW><id>6229030</id><snippet>os.path.join</snippet></ROW><ROW><id>6229030</id><snippet>book = xlrd.open_workbook(os.path.join('c:','excelTry','Papineau.csv.xls'))</snippet></ROW><ROW><id>6229058</id><snippet>def compat5(L1, L2):
    z = zip(L1, L2)
    return not any(j1&lt;k1 and j2&gt;k2 for j1,j2 in z for k1,k2 in z)
</snippet></ROW><ROW><id>6229253</id><snippet>dict</snippet></ROW><ROW><id>6229253</id><snippet>__missing__</snippet></ROW><ROW><id>6229253</id><snippet>class smart_dict(dict):
    def __missing__(self, key):
        return key
</snippet></ROW><ROW><id>6229308</id><snippet>zip()</snippet></ROW><ROW><id>6229308</id><snippet>for a, b in zip(list_a, list_b):
     # whatever
</snippet></ROW><ROW><id>6229308</id><snippet>itertools.izip()</snippet></ROW><ROW><id>6229574</id><snippet>self</snippet></ROW><ROW><id>6229574</id><snippet>print self
</snippet></ROW><ROW><id>6229574</id><snippet>self.uiobj=oraconn()</snippet></ROW><ROW><id>6229574</id><snippet>class OraDialog(QtGui.QDialog):
    uiobj = oraconn()
    def __init__() [...]
</snippet></ROW><ROW><id>6229574</id><snippet>uiobj</snippet></ROW><ROW><id>6229576</id><snippet>tcpdumpers</snippet></ROW><ROW><id>6229576</id><snippet>tcpdumpers</snippet></ROW><ROW><id>6229576</id><snippet>/etc/sudoers</snippet></ROW><ROW><id>6229576</id><snippet># Command alias for tcpdump
Cmnd_Alias      TCPDUMP = /usr/sbin/tcpdump

# This is the group that is allowed to run tcpdump as root with no password prompt
%tcpdumpers     ALL=(ALL) NOPASSWD: TCPDUMP
</snippet></ROW><ROW><id>6229576</id><snippet>tcpdumpers</snippet></ROW><ROW><id>6229576</id><snippet>% sudo tcpdump 
</snippet></ROW><ROW><id>6229665</id><snippet>&gt;&gt;&gt; A = np.array([[1,2,3,4],[5,6,7,8]])
&gt;&gt;&gt; (A*A).sum(axis=0)
array([26, 40, 58, 80])
</snippet></ROW><ROW><id>6229665</id><snippet>&gt;&gt;&gt; from numpy.core.umath_tests import inner1d
&gt;&gt;&gt; A = np.array([[1,2,3,4],[5,6,7,8]])
&gt;&gt;&gt; inner1d(A.T, A.T)
array([26, 40, 58, 80])
</snippet></ROW><ROW><id>6229665</id><snippet>np.einsum</snippet></ROW><ROW><id>6229665</id><snippet>&gt;&gt;&gt; A = np.array([[1,2,3,4],[5,6,7,8]])
&gt;&gt;&gt; np.einsum('ij,ij-&gt;j', A, A)
array([26, 40, 58, 80])
&gt;&gt;&gt; timeit np.einsum('ij,ij-&gt;j', A, A)
100000 loops, best of 3: 3.65 us per loop
&gt;&gt;&gt; timeit inner1d(A.T, A.T)
100000 loops, best of 3: 5.02 us per loop
&gt;&gt;&gt; A = np.random.randint(0, 100, (2, 100000))
&gt;&gt;&gt; timeit np.einsum('ij,ij-&gt;j', A, A)
1000 loops, best of 3: 363 us per loop
&gt;&gt;&gt; timeit inner1d(A.T, A.T)
1000 loops, best of 3: 848 us per loop
&gt;&gt;&gt; (np.einsum('ij,ij-&gt;j', A, A) == inner1d(A.T, A.T)).all()
True
</snippet></ROW><ROW><id>6229675</id><snippet>ctypes</snippet></ROW><ROW><id>6229675</id><snippet>buf = ctypes.create_string_buffer(upper_limt)
</snippet></ROW><ROW><id>6229705</id><snippet>test = "I have one {fruit} on the {place}.".format(**dic)
</snippet></ROW><ROW><id>6229705</id><snippet>**</snippet></ROW><ROW><id>6229705</id><snippet>format()</snippet></ROW><ROW><id>6229751</id><snippet>import base64
base64.b16encode(base64.b32decode("&lt;your hash goes here&gt;"))
</snippet></ROW><ROW><id>6229771</id><snippet>PATH</snippet></ROW><ROW><id>6229771</id><snippet>PATH</snippet></ROW><ROW><id>6229771</id><snippet>path_helper(8)</snippet></ROW><ROW><id>6229771</id><snippet>PATH</snippet></ROW><ROW><id>6229771</id><snippet>/etc/paths.d/</snippet></ROW><ROW><id>6229771</id><snippet>/usr/X11/bin</snippet></ROW><ROW><id>6229771</id><snippet>PATH</snippet></ROW><ROW><id>6229771</id><snippet>/etc/paths.d</snippet></ROW><ROW><id>6229771</id><snippet>/usr/X11/bin</snippet></ROW><ROW><id>6229771</id><snippet>PATH</snippet></ROW><ROW><id>6229771</id><snippet>&gt;&gt;&gt; os.environ['PATH']
'/usr/bin:/bin:/usr/sbin:/sbin'
</snippet></ROW><ROW><id>6229771</id><snippet>xterm</snippet></ROW><ROW><id>6229771</id><snippet>import subprocess
subprocess.Popen(['/usr/X11/bin/xterm'])
</snippet></ROW><ROW><id>6229955</id><snippet>__class__</snippet></ROW><ROW><id>6229955</id><snippet>class C(object):
    def __init__(self, cond):
        if cond ==True:
           self.__class__ = A
        else:
           self.__class__ = B
        self.__class__.__init__(self)
</snippet></ROW><ROW><id>6230015</id><snippet>foo
bar
</snippet></ROW><ROW><id>6230015</id><snippet>"foo\n"</snippet></ROW><ROW><id>6230015</id><snippet>"bar\n"</snippet></ROW><ROW><id>6230015</id><snippet>strip()</snippet></ROW><ROW><id>6230083</id><snippet>&gt;&gt;&gt; os.environ['USER_EMAIL'] = 'a@b.c'
&gt;&gt;&gt; os.environ['USER_ID'] = '123'
&gt;&gt;&gt; users.get_current_user()
users.User(email='a@b.c',_user_id='123')
</snippet></ROW><ROW><id>6230083</id><snippet>/google/appengine/api/users.py:115 - AssertionError: assert _auth_domain</snippet></ROW><ROW><id>6230083</id><snippet>&gt;&gt;&gt; os.environ['AUTH_DOMAIN'] = 'testbed'
</snippet></ROW><ROW><id>6230083</id><snippet>&gt;&gt;&gt; os.environ['USER_IS_ADMIN'] = '1'
</snippet></ROW><ROW><id>6230229</id><snippet>&amp;</snippet></ROW><ROW><id>6230229</id><snippet>|</snippet></ROW><ROW><id>6230229</id><snippet>AND</snippet></ROW><ROW><id>6230229</id><snippet>OR</snippet></ROW><ROW><id>6230377</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>6230377</id><snippet>eval</snippet></ROW><ROW><id>6230559</id><snippet>[^,;]+</snippet></ROW><ROW><id>6230559</id><snippet>baaaaaaaz</snippet></ROW><ROW><id>6230559</id><snippet>baaz,,,</snippet></ROW><ROW><id>6230559</id><snippet>baaz,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>baa</snippet></ROW><ROW><id>6230559</id><snippet>z,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>ba</snippet></ROW><ROW><id>6230559</id><snippet>az,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>ba</snippet></ROW><ROW><id>6230559</id><snippet>a</snippet></ROW><ROW><id>6230559</id><snippet>z,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>b</snippet></ROW><ROW><id>6230559</id><snippet>aaz,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>b</snippet></ROW><ROW><id>6230559</id><snippet>aa</snippet></ROW><ROW><id>6230559</id><snippet>z,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>b</snippet></ROW><ROW><id>6230559</id><snippet>a</snippet></ROW><ROW><id>6230559</id><snippet>az,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>b</snippet></ROW><ROW><id>6230559</id><snippet>a</snippet></ROW><ROW><id>6230559</id><snippet>a</snippet></ROW><ROW><id>6230559</id><snippet>z,,&lt;failure&gt;</snippet></ROW><ROW><id>6230559</id><snippet>if ",,," in mystring or ";;;" in mystring:
    fail()
</snippet></ROW><ROW><id>6230559</id><snippet>,;,</snippet></ROW><ROW><id>6230720</id><snippet>&gt;&gt;&gt; def foo():
...     print "Yay!"
... 
&gt;&gt;&gt; if True and foo() is None:
...     print "indeed"
... 
Yay!
indeed
&gt;&gt;&gt; if False and foo() is None:
...     print "nope"
... 
</snippet></ROW><ROW><id>6230993</id><snippet>def larger_axlim( axlim ):
    """ argument axlim expects 2-tuple 
        returns slightly larger 2-tuple """
    axmin,axmax = axlim
    axrng = axmax - axmin
    new_min = axmin - 0.1 * axrng
    new_max = axmax + 0.1 * axrng
    return new_min,new_max
...
ax.set_ylim( larger_axlim( ax.get_ylim() ) )
...
</snippet></ROW><ROW><id>6230993</id><snippet>get_ylim()</snippet></ROW><ROW><id>6231031</id><snippet>class Answer(models.Models):
    question = models.ForeignKey(Question, related_name='answer')
</snippet></ROW><ROW><id>6231031</id><snippet>'answer',</snippet></ROW><ROW><id>6231031</id><snippet>values</snippet></ROW><ROW><id>6231045</id><snippet>tree.find</snippet></ROW><ROW><id>6231045</id><snippet>tree.xpath</snippet></ROW><ROW><id>6231045</id><snippet>find</snippet></ROW><ROW><id>6231045</id><snippet>findall</snippet></ROW><ROW><id>6231045</id><snippet>xpath</snippet></ROW><ROW><id>6231045</id><snippet>XPath</snippet></ROW><ROW><id>6231045</id><snippet>XPathEvaluator</snippet></ROW><ROW><id>6231045</id><snippet>import io
import lxml.etree as ET

content='''\
&lt;ACORD&gt;
  &lt;InsuranceSvcRq&gt;
    &lt;HomePolicyQuoteInqRq&gt;
      &lt;PersPolicy&gt;
        &lt;PersApplicationInfo&gt;
            &lt;InsuredOrPrincipal&gt;
                &lt;InsuredOrPrincipalInfo&gt;
                    &lt;InsuredOrPrincipalRoleCd&gt;AN&lt;/InsuredOrPrincipalRoleCd&gt;
                &lt;/InsuredOrPrincipalInfo&gt;
                &lt;GeneralPartyInfo&gt;
                    &lt;Addr&gt;
                        &lt;Addr1&gt;&lt;/Addr1&gt;
                    &lt;/Addr&gt;
                &lt;/GeneralPartyInfo&gt;
            &lt;/InsuredOrPrincipal&gt;
        &lt;/PersApplicationInfo&gt;
      &lt;/PersPolicy&gt;
    &lt;/HomePolicyQuoteInqRq&gt;
  &lt;/InsuranceSvcRq&gt;
&lt;/ACORD&gt;
'''
tree=ET.parse(io.BytesIO(content))
path='//PersApplicationInfo/InsuredOrPrincipal[InsuredOrPrincipalInfo/InsuredOrPrincipalRoleCd="AN"]/GeneralPartyInfo'
result=tree.xpath(path)
print(result)
</snippet></ROW><ROW><id>6231045</id><snippet>[&lt;Element GeneralPartyInfo at b75a8194&gt;]
</snippet></ROW><ROW><id>6231045</id><snippet>tree.find</snippet></ROW><ROW><id>6231045</id><snippet>SyntaxError: invalid node predicate
</snippet></ROW><ROW><id>6231425</id><snippet>plt.figure(figsize=(x,y))</snippet></ROW><ROW><id>6231425</id><snippet>x</snippet></ROW><ROW><id>6231425</id><snippet>y</snippet></ROW><ROW><id>6231425</id><snippet>plt.bar</snippet></ROW><ROW><id>6231425</id><snippet>xticks</snippet></ROW><ROW><id>6231425</id><snippet>plt.xticks(range(1, len(labels)+1), labels, size='small')</snippet></ROW><ROW><id>6231440</id><snippet>dict.has_key('datepicker')
</snippet></ROW><ROW><id>6231693</id><snippet>results = [item for item in iterator]
</snippet></ROW><ROW><id>6231693</id><snippet>results = list(iterator)
</snippet></ROW><ROW><id>6231762</id><snippet>from mapreduce import control

mapreduce_id = control.start_map(
    "My Mapper",
    "main.my_mapper",
    "mapreduce.input_readers.DatastoreInputReader",
    {"entity_kind": "models.MyEntity"},
    shard_count=10)
</snippet></ROW><ROW><id>6232216</id><snippet>from django.http import HttpResponseRedirect

def getting_started_view(request):
    if request.user.is_authenticated():
        return HttpResponseRedirect(reverse('home_view'))
</snippet></ROW><ROW><id>6232216</id><snippet>url("...","someapp.views.viewname", name="home_view"),
...
</snippet></ROW><ROW><id>6232228</id><snippet>if request.method == 'POST':
    from django.core.files.uploadedfile import SimpleUploadedFile
    object = Model.objects.get(pk=1)
    file_contents = SimpleUploadedFile("%s.mp3" % "myfile", request.raw_post_data, "audio/mp3")
    object.audio.save("%s.mp3" % "myfile", upfile, True)
</snippet></ROW><ROW><id>6232326</id><snippet>Target.objects.filter( store__user_profile__user=request.user )
</snippet></ROW><ROW><id>6232433</id><snippet>Tag</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>ReferenceProperty</snippet></ROW><ROW><id>6232433</id><snippet>tag_entity.key().parent()</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>tag_entity.parent()</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>ListProperty</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>ListProperty</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232433</id><snippet>Group</snippet></ROW><ROW><id>6232612</id><snippet>cron</snippet></ROW><ROW><id>6232612</id><snippet>nohup</snippet></ROW><ROW><id>6232612</id><snippet>screen</snippet></ROW><ROW><id>6232612</id><snippet>screen -rD</snippet></ROW><ROW><id>6232612</id><snippet>/etc/rc.d/</snippet></ROW><ROW><id>6233347</id><snippet>str()</snippet></ROW><ROW><id>6233347</id><snippet>str</snippet></ROW><ROW><id>6233347</id><snippet>ascii</snippet></ROW><ROW><id>6233347</id><snippet>__unicode__</snippet></ROW><ROW><id>6233347</id><snippet>python unicode</snippet></ROW><ROW><id>6233347</id><snippet>unicode()</snippet></ROW><ROW><id>6233347</id><snippet>str</snippet></ROW><ROW><id>6233512</id><snippet>yum install python-devel</snippet></ROW><ROW><id>6233512</id><snippet>yum</snippet></ROW><ROW><id>6233512</id><snippet>apt-get install python-dev</snippet></ROW><ROW><id>6233691</id><snippet>main_method()</snippet></ROW><ROW><id>6233691</id><snippet>method_one()</snippet></ROW><ROW><id>6233691</id><snippet>class Foo(object):
    def method_one(self, query):
        # Big nasty query that hits the database really hard!!
        return query.all()
</snippet></ROW><ROW><id>6233691</id><snippet>all()</snippet></ROW><ROW><id>6233691</id><snippet>class MockQuery(object):
    def all(self):
        return [1,2]
</snippet></ROW><ROW><id>6233691</id><snippet>f = Foo()
q = MockQuery()
assert f.method_one(q) == [1,2]
</snippet></ROW><ROW><id>6233691</id><snippet>all()</snippet></ROW><ROW><id>6233691</id><snippet>method_one()</snippet></ROW><ROW><id>6233691</id><snippet>MockQuery</snippet></ROW><ROW><id>6233691</id><snippet>method_one()</snippet></ROW><ROW><id>6233691</id><snippet>MockFoo</snippet></ROW><ROW><id>6233691</id><snippet>method_one()</snippet></ROW><ROW><id>6233691</id><snippet>method_two()</snippet></ROW><ROW><id>6233865</id><snippet>def recursive_search(tags, results_queryset):
    if len(tags) &gt; 0:
        result_qs = result_queryset.filter(tags_name=tags[0])
        if result_queryset.exists():
            return filter_recursion(tags[1:],result_queryset)
        else:
            return None
    return result_queryset

tags = ["comedy", "80s", "action", "thriller"]  # This can be variable
result_queryset = Item.objects.filter(brands__in=brands) # Could be Item.objects.all()
print recursive_search(tags, result_queryset)
</snippet></ROW><ROW><id>6233865</id><snippet>list = []
for item in itertools.chain(q1, q2):
    list.append(item)
</snippet></ROW><ROW><id>6233865</id><snippet># list of tags = ['comedy','80s']
qs = Item.objects.all( Q(brand__iexact="brand name") | Q(tags__name__in=[tag for tag in list_of_tags]) )
</snippet></ROW><ROW><id>6234412</id><snippet>mydata = simplejson.loads(json_file)

def foo(request):
    ...
    return render(request, 'template.html', {"mydata": mydata},
        content_type="application/xhtml+xml")
</snippet></ROW><ROW><id>6234417</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; 
&gt;&gt;&gt; password = 'Dude123' 
&gt;&gt;&gt; charList = ['d8','vV','','D8','','',''] 
&gt;&gt;&gt; 
&gt;&gt;&gt; finalString = [''.join(set((a, b))) for a, b in zip(password, charList)] 
&gt;&gt;&gt; 
&gt;&gt;&gt; possibles = list(''.join(poss) for poss in itertools.product(*finalString))
&gt;&gt;&gt; possibles
['Dude123', 'DudD123', 'Dud8123', 'Dvde123', 'DvdD123', 'Dvd8123', 'DVde123', 'DVdD123', 'DVd8123', 'dude123', 'dudD123', 'dud8123', 'dvde123', 'dvdD123', 'dvd8123', 'dVde123', 'dVdD123', 'dVd8123', '8ude123', '8udD123', '8ud8123', '8vde123', '8vdD123', '8vd8123', '8Vde123', '8VdD123', '8Vd8123']
</snippet></ROW><ROW><id>6234432</id><snippet>&gt;&gt;&gt; from greetings import *</snippet></ROW><ROW><id>6234432</id><snippet>&gt;&gt;&gt; reload(greetings)</snippet></ROW><ROW><id>6234432</id><snippet>&gt;&gt;&gt; import greetings
&gt;&gt;&gt; greetings.hello()
hello!
</snippet></ROW><ROW><id>6234432</id><snippet>&gt;&gt;&gt; reload(greetings)
&lt;module 'greetings' from 'greetings.py'&gt;
&gt;&gt;&gt; greetings.hello()
world!
</snippet></ROW><ROW><id>6234491</id><snippet>sys.excepthook</snippet></ROW><ROW><id>6234491</id><snippet>sys.excepthook</snippet></ROW><ROW><id>6234491</id><snippet>logging.exception</snippet></ROW><ROW><id>6234491</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; def foo(type, value, traceback):
...     print 'My Error Information'
...     print 'Type:', type
...     print 'Value:', value
...     print 'Traceback:', traceback
... 
</snippet></ROW><ROW><id>6234491</id><snippet>sys.excepthook</snippet></ROW><ROW><id>6234491</id><snippet>&gt;&gt;&gt; sys.excepthook = foo
</snippet></ROW><ROW><id>6234491</id><snippet>&gt;&gt;&gt; def bar(a, b)
My Error Information
Type: &lt;type 'exceptions.SyntaxError'&gt;
Value: invalid syntax (&lt;stdin&gt;, line 1)
Traceback: None
</snippet></ROW><ROW><id>6234491</id><snippet>sys.excepthook</snippet></ROW><ROW><id>6234683</id><snippet>import marshal
import pickle

marshaled_bytecode = marshal.dumps(your_function.func_code)
# In this process, other function things are lost, so they have to be sent separated.
pickled_name = pickle.dumps(your_function.func_name)
pickled_arguments = pickle.dumps(your_function.func_defaults)
pickled_closure = pickle.dumps(your_function.func_closure)
# Send the marshaled bytecode and the other function things through a socket (they are byte strings).
send_through_a_socket((marshaled_bytecode, pickled_name, pickled_arguments, pickled_closure))
</snippet></ROW><ROW><id>6234683</id><snippet>import marshal
import pickle
import types

# Receive the marshaled bytecode and the other function things.
marshaled_bytecode, pickled_name, pickled_arguments, pickled_closure = receive_from_a_socket()
your_function = types.FunctionType(marshal.loads(marshaled_bytecode), globals(), pickle.loads(pickled_name), pickle.loads(pickled_arguments), pickle.loads(pickled_closure))
</snippet></ROW><ROW><id>6234683</id><snippet>__code__</snippet></ROW><ROW><id>6234683</id><snippet>__name__</snippet></ROW><ROW><id>6234683</id><snippet>__defaults__</snippet></ROW><ROW><id>6234683</id><snippet>__closure__</snippet></ROW><ROW><id>6234683</id><snippet>send_through_a_socket</snippet></ROW><ROW><id>6234683</id><snippet>receive_from_a_socket</snippet></ROW><ROW><id>6234723</id><snippet>ipitself = ag.read()
</snippet></ROW><ROW><id>6235133</id><snippet>Seq</snippet></ROW><ROW><id>6235133</id><snippet>class Seq(object):
    def __init__(self, seq):
        self.seq = seq
    def __repr__(self):
        return repr(self.seq)
    def __str__(self):
        return str(self.seq)
    def all(self):
        return Seq(self.seq[:])
    def head(self, count):
        return Seq(self.seq[:count])
    def tail(self, count):
        return Seq(self.seq[-count:])
    def odd(self):
        return Seq(self.seq[1::2])
    def even(self):
        return Seq(self.seq[::2])
    def reverse(self):
        return Seq(self.seq[::-1])
</snippet></ROW><ROW><id>6235133</id><snippet>&gt;&gt;&gt; s = Seq(range(0, 100))
&gt;&gt;&gt; print s.head(10).odd().even().reverse()
[9, 5, 1]
</snippet></ROW><ROW><id>6235203</id><snippet>def readImports(path):
    with open(path) as f:
        for line in f:
            # lines of form "import ___,___"
            # assuming not of form "from ___ import ___ [as ___]"
            if 'import' in line:
                modules = line.split('import')[1]
                for module in modules.split(','):
                    yield module.strip()

linesInExclusion = set(readImports('exclusionlist.txt'))
linesInLibraries = set(readImports('libraries.txt'))

print(linesInExclusion.intersection(linesInLibraries))
</snippet></ROW><ROW><id>6235203</id><snippet>return (line.strip() for line in f if line.strip()!='')</snippet></ROW><ROW><id>6235318</id><snippet>from django.contrib.auth.decorators import login_required
</snippet></ROW><ROW><id>6235318</id><snippet>@login_required 
</snippet></ROW><ROW><id>6235318</id><snippet>user.get_profile().location. 
</snippet></ROW><ROW><id>6235592</id><snippet>(1, u'x' ,u'x' ,u'x')</snippet></ROW><ROW><id>6235592</id><snippet>u</snippet></ROW><ROW><id>6235592</id><snippet>print result[1]</snippet></ROW><ROW><id>6235592</id><snippet>x</snippet></ROW><ROW><id>6235592</id><snippet>u</snippet></ROW><ROW><id>6235697</id><snippet>is</snippet></ROW><ROW><id>6235697</id><snippet>None</snippet></ROW><ROW><id>6235697</id><snippet>if foo is None:
    # do stuff
</snippet></ROW><ROW><id>6235699</id><snippet>from stat import S_ISREG, ST_CTIME, ST_MODE
import os, sys, time, glob
search_dir = r"e:\test"
files = filter(os.path.isfile, glob.glob(search_dir + "\\*.bas"))
file_date_tuple_list = []
for x in files:
    d = os.path.getmtime(x)
    #tuple with file and date, add it in a list
    file_date_tuple = (x,d)
    file_date_tuple_list.append(file_date_tuple)
#sort the tuple list by the second element which is the date
file_date_tuple_list.sort(key=lambda x: x[1])
</snippet></ROW><ROW><id>6235699</id><snippet>file_date_tuple_list = [(x,os.path.getmtime(x)) for x in files]
file_date_tuple_list.sort(key=lambda x: x[1])
</snippet></ROW><ROW><id>6235699</id><snippet>for</snippet></ROW><ROW><id>6235699</id><snippet>from datetime import date
</snippet></ROW><ROW><id>6235699</id><snippet>file_date_string_list = ["%s %s"%(x[0],date.fromtimestamp(x[1])) \
                                             for x in file_date_tuple_list]
</snippet></ROW><ROW><id>6235699</id><snippet>reverse</snippet></ROW><ROW><id>6235699</id><snippet>sort</snippet></ROW><ROW><id>6235699</id><snippet>file_date_tuple_list.sort(key=lambda x: x[1],reverse=True)
</snippet></ROW><ROW><id>6235699</id><snippet>datetime</snippet></ROW><ROW><id>6235699</id><snippet>from datetime import datetime
limit = datetime(2011,01,05,17,0,0) #5pm , Jun 5 2011 
file_date_string_list = ["%s %s"%(x[0],date.fromtimestamp(x[1])) \
                                       for x in file_date_tuple_list \
                                       if datetime.fromtimestamp(x[1]) &gt; limit ]
</snippet></ROW><ROW><id>6235699</id><snippet>if</snippet></ROW><ROW><id>6235753</id><snippet>for</snippet></ROW><ROW><id>6235753</id><snippet>all(ord(ch) &lt; 128 for item in dict.items() for s in item.text() for ch in s)
</snippet></ROW><ROW><id>6235797</id><snippet>dir(Myclass)
</snippet></ROW><ROW><id>6235797</id><snippet>_</snippet></ROW><ROW><id>6235797</id><snippet>Myclass</snippet></ROW><ROW><id>6235797</id><snippet>__module__</snippet></ROW><ROW><id>6235797</id><snippet>__doc__</snippet></ROW><ROW><id>6235797</id><snippet>filter(lambda aname: not aname.startswith('_'), dir(Myclass))
</snippet></ROW><ROW><id>6236041</id><snippet>import this</snippet></ROW><ROW><id>6236041</id><snippet>use_value</snippet></ROW><ROW><id>6236257</id><snippet>obj</snippet></ROW><ROW><id>6236257</id><snippet>In [21]: dict((k, list(g)) for k, g in groupby(range(10), lambda x : x &gt; 5))
Out[21]: {False: [0, 1, 2, 3, 4, 5], True: [6, 7, 8, 9]}
</snippet></ROW><ROW><id>6237193</id><snippet>ax.spines['left'].set_zorder(2)
</snippet></ROW><ROW><id>6237193</id><snippet>ax.spines['left'].set_zorder(ax.yaxis.get_label().get_zorder()-1)
</snippet></ROW><ROW><id>6237438</id><snippet>Person</snippet></ROW><ROW><id>6237438</id><snippet>type</snippet></ROW><ROW><id>6237438</id><snippet>class Foo(object)</snippet></ROW><ROW><id>6237438</id><snippet>Foo.__class__ is type</snippet></ROW><ROW><id>6237438</id><snippet>type</snippet></ROW><ROW><id>6237842</id><snippet>import sqlite3

def insert_or_replace():
    # https://sqlite.org/lang_insert.html
    connection=sqlite3.connect(':memory:')
    cursor=connection.cursor()
    cursor.execute('CREATE TABLE foo (bar INTEGER UNIQUE, baz INTEGER)')
    cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))
    cursor.execute('INSERT OR REPLACE INTO foo (bar,baz) VALUES (?, ?)',(1,3))
    cursor.execute('SELECT * from foo')
    data=cursor.fetchall()
    print(data)
    # [(1, 3)]


def on_conflict():
    # https://sqlite.org/lang_insert.html
    connection=sqlite3.connect(':memory:')
    cursor=connection.cursor()
    cursor.execute('CREATE TABLE foo (bar INTEGER UNIQUE, baz INTEGER)')
    cursor.execute('INSERT INTO foo (bar,baz) VALUES (?, ?)',(1,2))
    cursor.execute('INSERT OR IGNORE INTO foo (bar,baz) VALUES (?, ?)',(1,3))
    cursor.execute('SELECT * from foo')
    data=cursor.fetchall()
    print(data)
    # [(1, 2)]    

insert_or_replace()
on_conflict()
</snippet></ROW><ROW><id>6237842</id><snippet>timeit</snippet></ROW><ROW><id>6237842</id><snippet>python -mtimeit -s'import test' 'test.insert_or_replace()'
</snippet></ROW><ROW><id>6237842</id><snippet>python -mtimeit -s'import test' 'test.filter_nonunique_rows_in_Python()'
</snippet></ROW><ROW><id>6237842</id><snippet>python -mtimeit -s'import test' 'test.insert_with_try_catch_blocks()'
</snippet></ROW><ROW><id>6237888</id><snippet>SocketServer.StreamRequestHandler</snippet></ROW><ROW><id>6237888</id><snippet>handle</snippet></ROW><ROW><id>6237888</id><snippet>recv</snippet></ROW><ROW><id>6237888</id><snippet>send</snippet></ROW><ROW><id>6237888</id><snippet>sendall</snippet></ROW><ROW><id>6238011</id><snippet>root = lxml.html.fromstring(s)
anchors = root.cssselect("a")
links = [a.get("href") for a in anchors]
</snippet></ROW><ROW><id>6238089</id><snippet>self.request.headers
</snippet></ROW><ROW><id>6238130</id><snippet>gdata</snippet></ROW><ROW><id>6238226</id><snippet>sip.setapi</snippet></ROW><ROW><id>6238226</id><snippet>import sip
sip.setapi('QString', 2)
</snippet></ROW><ROW><id>6238226</id><snippet>QDate v1, v2
QDateTime v1, v2
QString v1, v2
QTextStream v1, v2
QTime v1, v2
QUrl v1, v2
QVariant v1, v2
</snippet></ROW><ROW><id>6238298</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>6238660</id><snippet>ValueError: insecure string pickle</snippet></ROW><ROW><id>6238660</id><snippet>sock.recv()</snippet></ROW><ROW><id>6238660</id><snippet>Socket</snippet></ROW><ROW><id>6238660</id><snippet> class Socket:
    def recv(self, bufsize):
        return self.sock.recv(bufsize)
</snippet></ROW><ROW><id>6238660</id><snippet>import struct

struct.pack('Q', len(pickled_list))
# Send it, and then send the pickled list.
</snippet></ROW><ROW><id>6238660</id><snippet>import struct

length = struct.unpack('Q', sock.recv(struct.calcsize('Q')))[0]
pickled_list = sock.recv(length)
</snippet></ROW><ROW><id>6238660</id><snippet>unsigned long long</snippet></ROW><ROW><id>6238859</id><snippet>scipy.ndimage.map_coordinates</snippet></ROW><ROW><id>6238859</id><snippet>import numpy as np
from scipy import ndimage
import matplotlib.pyplot as plt

# Note that the output interpolated coords will be the same dtype as your input
# data.  If we have an array of ints, and we want floating point precision in
# the output interpolated points, we need to cast the array as floats
data = np.arange(40).reshape((8,5)).astype(np.float)

# I'm writing these as row, column pairs for clarity...
coords = np.array([[1.2, 3.5], [6.7, 2.5], [7.9, 3.5], [3.5, 3.5]])
# However, map_coordinates expects the transpose of this
coords = coords.T

# The "mode" kwarg here just controls how the boundaries are treated
# mode='nearest' is _not_ nearest neighbor interpolation, it just uses the
# value of the nearest cell if the point lies outside the grid.  The default is
# to treat the values outside the grid as zero, which can cause some edge
# effects if you're interpolating points near the edge
# The "order" kwarg controls the order of the splines used. The default is 
# cubic splines, order=3
zi = ndimage.map_coordinates(data, coords, order=3, mode='nearest')

row, column = coords
nrows, ncols = data.shape
im = plt.imshow(data, interpolation='nearest', extent=[0, ncols, nrows, 0])
plt.colorbar(im)
plt.scatter(column, row, c=zi, vmin=data.min(), vmax=data.max())
for r, c, z in zip(row, column, zi):
    plt.annotate('%0.3f' % z, (c,r), xytext=(-10,10), textcoords='offset points',
            arrowprops=dict(arrowstyle='-&gt;'), ha='right')
plt.show()
</snippet></ROW><ROW><id>6238859</id><snippet>import numpy as np
from scipy import ndimage

data = np.arange(3*5*9).reshape((3,5,9)).astype(np.float)
coords = np.array([[1.2, 3.5, 7.8], [0.5, 0.5, 6.8]])
zi = ndimage.map_coordinates(data, coords.T)
</snippet></ROW><ROW><id>6238859</id><snippet>map_coordinates</snippet></ROW><ROW><id>6238859</id><snippet>prefilter=False</snippet></ROW><ROW><id>6238859</id><snippet>order=1</snippet></ROW><ROW><id>6238859</id><snippet>ndimage.spline_filter</snippet></ROW><ROW><id>6238859</id><snippet>prefilter=False</snippet></ROW><ROW><id>6238989</id><snippet>__getitem__</snippet></ROW><ROW><id>6238989</id><snippet>__setitem__</snippet></ROW><ROW><id>6238989</id><snippet>class MyClass(object):
    def __init__(self):
        self.storage = {}

    def __getitem__(self, key):
        return self.storage[key]

    def __setitem__(self, key, value):
        self.storage[key] = value
</snippet></ROW><ROW><id>6238989</id><snippet>__getitem__</snippet></ROW><ROW><id>6238989</id><snippet>__setitem__</snippet></ROW><ROW><id>6238989</id><snippet>%extend</snippet></ROW><ROW><id>6238989</id><snippet>[]</snippet></ROW><ROW><id>6239360</id><snippet>gpsbabel</snippet></ROW><ROW><id>6239360</id><snippet>gpsbabel</snippet></ROW><ROW><id>6239474</id><snippet>shell=True</snippet></ROW><ROW><id>6239474</id><snippet>import subprocess
subprocess.Popen(['haml', 'hello.haml', 'hello.html'], shell=True)

% cat hello.html
&lt;strong class='code' id='message'&gt;Hello, World!&lt;/strong&gt;
</snippet></ROW><ROW><id>6239576</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>6239576</id><snippet>alt</snippet></ROW><ROW><id>6239576</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>6239576</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>6239576</id><snippet>&lt;/div&gt;</snippet></ROW><ROW><id>6239725</id><snippet>xlwt</snippet></ROW><ROW><id>6239725</id><snippet>xlwt</snippet></ROW><ROW><id>6239725</id><snippet>xlwt</snippet></ROW><ROW><id>6239725</id><snippet>xlwt</snippet></ROW><ROW><id>6239799</id><snippet>import os
import os.path

for (dirpath, dirnames, filenames) in os.walk('C:/My Music/'):
    for idx in range(len(dirnames)):
        newname = dirnames[idx].replace('_', ' ')
        os.rename(os.path.join(dirpath, dirnames[idx]), os.path.join(dirpath, newname))
        dirnames[idx] = newname
</snippet></ROW><ROW><id>6239799</id><snippet>os.walk</snippet></ROW><ROW><id>6239983</id><snippet>if x % 3 == 0:
    print 'x is divisible by 3'
</snippet></ROW><ROW><id>6240095</id><snippet>cropped = pygame.Surface((80, 80))
cropped.blit(buttonStates, (0, 0), (30, 30, 80, 80))
</snippet></ROW><ROW><id>6240156</id><snippet># assuming sensible bases:
class DB(object):
    ...

class Transformation(object):
    def transform(self, obj):
        ...

    def get(self, id):
        return self.transform(super(Transformation, self).get(id))

class Cache(object):
    def __init__(self, *args, **kwargs):
        self.cache = Cache()
        super(Cache, self).__init__(*args, **kwargs)
    def get(self, id):
        if id in self.cache:
            return self.cache.get(id)
        else:
            self.cache.set(id, super(Cache, self).get(id))
            return self.cache.get(id)

class DBwithTransformation(Transformation, DB):
    # empty body
    pass
</snippet></ROW><ROW><id>6240156</id><snippet>type</snippet></ROW><ROW><id>6240156</id><snippet>class DBwithTransformation(Transformation, DB):
    pass

db = DBwithTransformation(arg1, arg2, ...)
</snippet></ROW><ROW><id>6240156</id><snippet>db = type("DB", (Transformation, DB), {})(arg1, arg2, ...)
</snippet></ROW><ROW><id>6240156</id><snippet>DB</snippet></ROW><ROW><id>6240156</id><snippet>object</snippet></ROW><ROW><id>6240195</id><snippet>window.setWindowFlags(Qt.Tool | Qt.FramelessWindowHint)</snippet></ROW><ROW><id>6240234</id><snippet>import turtle

turtle.forward(100)
turtle.left(90)
turtle.forward(100)
# etc.

turtle.getscreen()._root.mainloop()  # &lt;-- run the Tkinter main loop
</snippet></ROW><ROW><id>6240234</id><snippet>turtle.done()</snippet></ROW><ROW><id>6240499</id><snippet>stringifiedKey = str(key)
reconstitutedKey = db.Key(stringifiedKey)
</snippet></ROW><ROW><id>6240740</id><snippet>window.lower(belowThis=None)
</snippet></ROW><ROW><id>6240775</id><snippet>socket_sendall</snippet></ROW><ROW><id>6240775</id><snippet>internal_select</snippet></ROW><ROW><id>6240915</id><snippet>tiles = ['/one.bmp', '/two.bmp', '/three.bmp']
tilelist = [pygame.img.load(tile) for tile in tiles]
</snippet></ROW><ROW><id>6240915</id><snippet>tilelist = map(pygame.img.load, tiles)</snippet></ROW><ROW><id>6240917</id><snippet>    public void findVariables(int[] constants, int sum, 
                              int[] variables, int n, int result) {
        if (n == constants.length) { //your end condition for the recursion
            if (result == sum) {
                printArrayAsList(variables);
            }
        } else if (result &lt;= sum){ //keep going
            for (int i = 0; result + constants[n]*i &lt;= sum; i++) {
                variables[n] = i;
                findVariables(constants, sum, variables, n+1, result+constants[n]*i);
            }
        }
    }
</snippet></ROW><ROW><id>6240917</id><snippet>    findVariables(new int[] {20, 5, 20}, 100, new int[] {0,0,0}, 0, 0)
</snippet></ROW><ROW><id>6240945</id><snippet>add_to_db</snippet></ROW><ROW><id>6240945</id><snippet>add_to_db</snippet></ROW><ROW><id>6240945</id><snippet>from myfuncs import add_to_db</snippet></ROW><ROW><id>6240994</id><snippet>property_name</snippet></ROW><ROW><id>6240994</id><snippet>value</snippet></ROW><ROW><id>6240994</id><snippet>values</snippet></ROW><ROW><id>6240994</id><snippet>class Value(object):
    def __init__(self,
                 number=None,
                 text=None,
                 url=None):
        self.number = number
        self.text = text
        self.url = url

class Specification(object):
    def __init__(self, propertyName):
        self.propertyName = propertyName
        self.values = []

spec1 = Specification("Spec1")
spec1.values = [Value(number=3,
                      url="http://www.google.com"),
                Value(text="Hello, World!",
                      url="http://www.jasonfruit.com")]

spec2 = Specification("Spec2")
spec2.values = [Value(number=27,
                      text="I can haz cheezburger?",
                      url="http://stackoverflow.com"),
                Value(text="Running out of ideas.",
                      url="http://news.google.com")]
</snippet></ROW><ROW><id>6240997</id><snippet>while not br.geturl().endswith("#"):
    ...
</snippet></ROW><ROW><id>6241136</id><snippet>cherrypy.Tool(...)</snippet></ROW><ROW><id>6241136</id><snippet>def print_path(multiplier=1):
    ...
cherrypy.tools.print_path = cherrypy.Tool('on_start_resource', print_path)
</snippet></ROW><ROW><id>6241136</id><snippet>[/]
tools.print_path.on: True
tools.print_path.multiplier: 23
</snippet></ROW><ROW><id>6241262</id><snippet>files.append(os.path.realpath(x)
                                ^
</snippet></ROW><ROW><id>6241262</id><snippet>True:</snippet></ROW><ROW><id>6241262</id><snippet>(x if condition else y)
</snippet></ROW><ROW><id>6241262</id><snippet>== True</snippet></ROW><ROW><id>6241262</id><snippet>if x:
    do_something
if not y:
    do_something_else
</snippet></ROW><ROW><id>6241288</id><snippet>os.open()</snippet></ROW><ROW><id>6241288</id><snippet>os.O_NONBLOCK</snippet></ROW><ROW><id>6241361</id><snippet>def chain_method(from_method, to_method):
    def inner(arg):
        return to_method(from_method(arg))
    return inner

possible_funcs = []
log_strings = []
for possible_combo in itertools.product([Seq.head,Seq.odd,Seq.even,Seq.reverse], repeat=4):
    meta_method = possible_combo[0]
    for method in possible_combo[1:]:
        meta_method = chain_method(meta_method, method)
    log_string = []
    for method in possible_combo:
        log_string.extend(['.', method.__name__, '()'])
    possible_funcs.append(meta_method)
    log_strings.append("".join(log_string))
</snippet></ROW><ROW><id>6241483</id><snippet>lift()</snippet></ROW><ROW><id>6241483</id><snippet>tag_raise()</snippet></ROW><ROW><id>6241483</id><snippet>Tkinter.py</snippet></ROW><ROW><id>6241483</id><snippet># lower, tkraise/lift hide Misc.lower, Misc.tkraise/lift,
# so the preferred name for them is tag_lower, tag_raise
# (similar to tag_bind, and similar to the Text widget);
# unfortunately can't delete the old ones yet (maybe in 1.6)
</snippet></ROW><ROW><id>6241483</id><snippet>a.lift(aboveThis=None)</snippet></ROW><ROW><id>6241483</id><snippet>Tk.Misc.lift(a, aboveThis=None)</snippet></ROW><ROW><id>6241505</id><snippet>from datetime import datetime
import time
import functools

def t_access(method):
    @functools.wraps(method)
    def wrapper(self):
        self.timestamp = datetime.now()
        method(self)
    return wrapper

class Foo(object):
    @t_access
    def bar(self):
        print "method bar() called"

f = Foo()
f.bar()
print f.timestamp
time.sleep(5)
f.bar()
print f.timestamp
</snippet></ROW><ROW><id>6241505</id><snippet>functools.wraps</snippet></ROW><ROW><id>6241519</id><snippet>print()</snippet></ROW><ROW><id>6241519</id><snippet>print</snippet></ROW><ROW><id>6241519</id><snippet>[print(x) for x in range(10)]
</snippet></ROW><ROW><id>6241729</id><snippet>def distance(self, tile1, tile2):
    self.xDist = abs(tile1.col * TILE_SIZE - tile2.col * TILE_SIZE)
    self.yDist = abs(tile1.row * TILE_SIZE - tile2.row * TILE_SIZE)
    self.totalDist = self.diagCost * math.sqrt(self.xDist*self.xDist + self.yDist*self.yDist)
                     # or it might be self.straightCost, depending on their values.
                     # self.diagCost is probably right, though.
    return self.totalDist
</snippet></ROW></DATA>