<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>13676817</id><snippet>Point.__init__</snippet></ROW><ROW><id>13676817</id><snippet>    super(Point, self).__init__(point, srid=srid)
</snippet></ROW><ROW><id>13676817</id><snippet>GEOSGeometry.__init__</snippet></ROW><ROW><id>13676817</id><snippet>    self._post_init(srid)
</snippet></ROW><ROW><id>13676817</id><snippet>    self.__class__ = GEOS_CLASSES[self.geom_typeid]
</snippet></ROW><ROW><id>13676817</id><snippet>self</snippet></ROW><ROW><id>13676817</id><snippet>Point</snippet></ROW><ROW><id>13676817</id><snippet>class LLPoint(Point):
    def __init__(self, *args, **kwargs):
        ...
        super(LLPoint, self).__init__(lng, lat)   # this changes self.__class__ to Point
        ...
        self.__class__ = LLPoint
</snippet></ROW><ROW><id>13677360</id><snippet>floor division</snippet></ROW><ROW><id>13677360</id><snippet>//</snippet></ROW><ROW><id>13677360</id><snippet>&gt;&gt;&gt; 10 / 3
3.3333333333333335
&gt;&gt;&gt; 10 // 3
3
</snippet></ROW><ROW><id>13677360</id><snippet>from __future__ import division</snippet></ROW><ROW><id>13677360</id><snippet>In [1]: 10 / 3
Out[1]: 3

In [2]: 10 // 3
Out[2]: 3

In [3]: from __future__ import division

In [4]: 10 / 3
Out[4]: 3.3333333333333335

In [5]: 10 // 3
Out[5]: 3
</snippet></ROW><ROW><id>13677360</id><snippet>n //= 10</snippet></ROW><ROW><id>13677360</id><snippet>+=</snippet></ROW><ROW><id>13677360</id><snippet>-=</snippet></ROW><ROW><id>13677360</id><snippet>*=</snippet></ROW><ROW><id>13677360</id><snippet>n</snippet></ROW><ROW><id>13677360</id><snippet>n</snippet></ROW><ROW><id>13677360</id><snippet>In [6]: n = 50

In [7]: n += 10

In [8]: n
Out[8]: 60

In [9]: n -= 20

In [10]: n
Out[10]: 40

In [11]: n //= 10

In [12]: n
Out[12]: 4
</snippet></ROW><ROW><id>13677461</id><snippet>html_str = "&lt;html&gt;&lt;head&gt;This is header&lt;/head&gt;&lt;body&gt;This is body&lt;/body&gt;&lt;/html&gt;"
f = open("yourpage.html","w")
f.write(html_str)
f.close()
</snippet></ROW><ROW><id>13677541</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                        ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
</snippet></ROW><ROW><id>13677719</id><snippet>sortedlist = [x[1] for x in sorted(zip(Numbers, Fruits))]
</snippet></ROW><ROW><id>13677974</id><snippet>object.path</snippet></ROW><ROW><id>13677974</id><snippet>url(r'^download/(?P&lt;object_id&gt;\d+)/$', "yourapp.views.make_downloadable_link", name="downloadable")
</snippet></ROW><ROW><id>13677974</id><snippet>def make_downloadable_link(object_id):

    # get object from object_id
    object = ObjectModel.objects.get(id=object_id)
    mypath = object.path

    #prepare to serve the file
    wrapper      = FileWrapper(open(mypath))
    response     = HttpResponse(wrapper,'application/pdf')
    response['Content-Length']      = os.path.getsize(mypath)  
    fname = mypath.split('/')[-1]  
    response['Content-Disposition'] = 'attachment; filename= fname'
    return response
</snippet></ROW><ROW><id>13678226</id><snippet>cwd</snippet></ROW><ROW><id>13678226</id><snippet>import multiprocessing, subprocess

def run(c):
    exe = os.path.join("&lt;location&gt;","folder",str(c),"program.exe")
    run = os.path.join("&lt;location&gt;","folder",str(c),"run.dat")
    subprocess.check_call([exe,run],cwd=os.path.join("&lt;location&gt;","folder"),creationflags = subprocess.CREATE_NEW_CONSOLE)

def main():
    pool = multiprocessing.Pool(3)
    for c in range(10):
        pool.apply_async(run,(str(c),))
    pool.close()
    pool.join()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13678497</id><snippet>csv</snippet></ROW><ROW><id>13678497</id><snippet>gen_list = open('genelist.csv').read().splitlines()
</snippet></ROW><ROW><id>13678497</id><snippet>csv</snippet></ROW><ROW><id>13678497</id><snippet>csv</snippet></ROW><ROW><id>13678497</id><snippet>gene_list = [g[0] for g in csv.reader(open("genelist.csv"))]
</snippet></ROW><ROW><id>13678497</id><snippet>csv.reader()</snippet></ROW><ROW><id>13678543</id><snippet>@app.route('/', defaults={'path': ''})
@app.route('/&lt;path:path&gt;')
def catch_all(path):
    return 'You want path: %s' % path
</snippet></ROW><ROW><id>13678543</id><snippet>% curl 127.0.0.1:5000          # Matches the first rule
You want path:  
% curl 127.0.0.1:5000/foo/bar  # Matches the second rule
You want path: foo/bar
</snippet></ROW><ROW><id>13678966</id><snippet>model</snippet></ROW><ROW><id>13678966</id><snippet>url()</snippet></ROW><ROW><id>13678966</id><snippet>kwargs</snippet></ROW><ROW><id>13678966</id><snippet>url(r'^download/template/(?P&lt;object_id&gt;\d+)/$', views.myview().myfunction, 
    kwargs=dict(model=models.userModel), name="sample")
</snippet></ROW><ROW><id>13679450</id><snippet>with open("/opt/CLiMB/Storage1/log/vsftp.log") as f:
     f.seek(-1000, os.SEEK_END)
     print f.read()
</snippet></ROW><ROW><id>13679548</id><snippet>ax.set_xlim</snippet></ROW><ROW><id>13679548</id><snippet>ax.plot</snippet></ROW><ROW><id>13679548</id><snippet>import numpy as np
import matplotlib.pyplot as plt

a = np.arange(10)

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(a-5,a)
ax.set_xlim(xmin = -1.)
plt.show()
</snippet></ROW><ROW><id>13679604</id><snippet>def __truediv__(self, other):
  if callable(other):
      return Function(lambda x:self(x)/other(x))
  else:
      return Function(lambda x:self(x)/other)
</snippet></ROW><ROW><id>13680107</id><snippet>handle_data</snippet></ROW><ROW><id>13680107</id><snippet>handle_starttag</snippet></ROW><ROW><id>13680107</id><snippet>intitle</snippet></ROW><ROW><id>13680107</id><snippet>intitle = False</snippet></ROW><ROW><id>13680107</id><snippet>class MyHTMLParser(HTMLParser):
    intitle = False

    # your methods
</snippet></ROW><ROW><id>13680107</id><snippet>handle_data</snippet></ROW><ROW><id>13680107</id><snippet>handle_starttag</snippet></ROW><ROW><id>13680131</id><snippet>$ cd 
$ virtualenv --no-site-packages --distribute ENV
$ source ENV/bin/activate 
$ pip install django 
$ pip install all_the_packages_you_need
</snippet></ROW><ROW><id>13680673</id><snippet>qrcode</snippet></ROW><ROW><id>13680673</id><snippet>fit</snippet></ROW><ROW><id>13680673</id><snippet>False</snippet></ROW><ROW><id>13680673</id><snippet>version</snippet></ROW><ROW><id>13680673</id><snippet>box_size</snippet></ROW><ROW><id>13681241</id><snippet>__init__</snippet></ROW><ROW><id>13681241</id><snippet>self.current_Time</snippet></ROW><ROW><id>13681241</id><snippet>class PostTable(tables.Table):
    def __init__(self, *args, **kwargs):
        super(PostTable, self).__init__(*args, **kwargs)
        self.current_Time =  datetime.utcnow().replace(tzinfo=utc)

    def render_published(self, value,record):
        tdelta = self.current_Time - record.published
</snippet></ROW><ROW><id>13681266</id><snippet>from itertools import groupby

def block_start(line, start=[None]):
    if 'Rank' in line:
       start[0] = not start[0]
    return start[0]

with open(filename) as file:
     block_sizes = [sum(1 for line in block) # find number of lines in a block
                    for _, block in groupby(file, key=block_start)] # group
print(block_sizes)
# -&gt; [4, 4, 1]
</snippet></ROW><ROW><id>13681266</id><snippet>'Rank'</snippet></ROW><ROW><id>13681266</id><snippet>count = None
with open(filename) as file:
     for line in file:
         if 'Rank' in line:
             if count is None: # found the start of the 1st block
                count = 1
             else: # found the start of the 2nd block
                break
         elif count is not None: # inside the 1st block
             count += 1
print(count) # -&gt; 4
</snippet></ROW><ROW><id>13681313</id><snippet>flags=re.UNICODE</snippet></ROW><ROW><id>13681313</id><snippet>def titlecase(s):
    return re.sub(re.compile(r"[\w]+('[\w]+)?", flags=re.UNICODE),
                  lambda mo: mo.group(0)[0].upper() +
                             mo.group(0)[1:].lower(),
                  s)
</snippet></ROW><ROW><id>13681313</id><snippet>&gt;&gt;&gt; print titlecase(u"börek")
Börek
</snippet></ROW><ROW><id>13682381</id><snippet>data['result'] = data['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))
</snippet></ROW><ROW><id>13682843</id><snippet>wsgiref</snippet></ROW><ROW><id>13682843</id><snippet>from wsgiref.simple_server import make_server
import datetime

def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')])
    retval = [
            str(environ),
            "\n",
            "Hello world!\n",
            str(datetime.datetime.now())
            ]
    return retval

make_server('localhost', 6548, application).serve_forever()
</snippet></ROW><ROW><id>13682843</id><snippet>http://localhost:6548</snippet></ROW><ROW><id>13682939</id><snippet>def rolling_window(arr, window):
    """Very basic multi dimensional rolling window. window should be the shape of
    of the desired subarrays. Window is either a scalar or a tuple of same size
    as `arr.shape`.
    """
    shape = np.array(arr.shape*2)
    strides = np.array(arr.strides*2)
    window = np.asarray(window)
    shape[arr.ndim:] = window # new dimensions size
    shape[:arr.ndim] -= window - 1
    if np.any(shape &lt; 1):
        raise ValueError('window size is too large')
    return np.lib.stride_tricks.as_strided(arr, shape=shape, strides=strides)

# Now:
slices = rolling_window(arr, 2)
# Slices will be 4-d not 3-d as you wanted. You can reshape
# but it may need to copy (not if you have done no slicing, etc. with the array):
slices = slices.reshape(-1,slices.shape[2:])
</snippet></ROW><ROW><id>13682991</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13682991</id><snippet>os.path.dirname()</snippet></ROW><ROW><id>13682991</id><snippet>import sys, os
print os.dirname(sys.argv[0])
</snippet></ROW><ROW><id>13682991</id><snippet>__file__</snippet></ROW><ROW><id>13682991</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>13682991</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>13682991</id><snippet>print os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
</snippet></ROW><ROW><id>13683115</id><snippet>parser = etree.XMLParser(remove_blank_text=True)
pom = etree.parse("pom.xml",parser)
</snippet></ROW><ROW><id>13683499</id><snippet>activate</snippet></ROW><ROW><id>13683499</id><snippet>manage.py</snippet></ROW><ROW><id>13683499</id><snippet>$ python manage.py
</snippet></ROW><ROW><id>13683499</id><snippet>$ ./manage.py
</snippet></ROW><ROW><id>13683499</id><snippet>django-admin.py</snippet></ROW><ROW><id>13683894</id><snippet>while True</snippet></ROW><ROW><id>13683894</id><snippet>swapped</snippet></ROW><ROW><id>13683894</id><snippet>myList=[43,21,12,80,3,2,35]
end=len(myList)-1
while True:
    swapped=-1
    for i in range(0,end):
        if myList[i]&gt;myList[i+1]:
            temp=myList[i]
            myList[i]=myList[i+1]
            myList[i+1]=temp
            swapped=i
    if swapped == -1:
        break
print(myList)
</snippet></ROW><ROW><id>13683894</id><snippet>while True:</snippet></ROW><ROW><id>13683894</id><snippet>while False:</snippet></ROW><ROW><id>13684010</id><snippet>collections.Counter()</snippet></ROW><ROW><id>13684010</id><snippet>import collections

counts = collections.Counter()
for row in my_reader:
    counts[row[3]] += 1
</snippet></ROW><ROW><id>13684010</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13684010</id><snippet>counts = collections.defaultdict(int)
for row in my_reader:
    counts[row[3]] += 1
</snippet></ROW><ROW><id>13684010</id><snippet>dict</snippet></ROW><ROW><id>13684010</id><snippet>counts = {}
for row in my_reader:
    counts[row[3]] = counts.get(row[3], 0) + 1
</snippet></ROW><ROW><id>13684107</id><snippet>*</snippet></ROW><ROW><id>13684107</id><snippet>&gt;&gt;&gt; b = array([1,2,3])
&gt;&gt;&gt; C = arange(9).reshape(3,3)
&gt;&gt;&gt; dot(diag(b), C)
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
&gt;&gt;&gt; atleast_2d(b).T * C
array([[ 0,  1,  2],
       [ 6,  8, 10],
       [18, 21, 24]])
</snippet></ROW><ROW><id>13684107</id><snippet>atleast_2d(b).T</snippet></ROW><ROW><id>13684107</id><snippet>b.reshape(-1,1)</snippet></ROW><ROW><id>13684107</id><snippet>b</snippet></ROW><ROW><id>13684220</id><snippet>__init__</snippet></ROW><ROW><id>13684526</id><snippet>boost::python::list</snippet></ROW><ROW><id>13684526</id><snippet>data</snippet></ROW><ROW><id>13684526</id><snippet>std::string</snippet></ROW><ROW><id>13684526</id><snippet>std::vector&lt;char&gt;</snippet></ROW><ROW><id>13684526</id><snippet>data</snippet></ROW><ROW><id>13684526</id><snippet>std::string</snippet></ROW><ROW><id>13684526</id><snippet>#include &lt;boost/python.hpp&gt;
#include &lt;boost/python/list.hpp&gt;
#include &lt;boost/python/suite/indexing/vector_indexing_suite.hpp&gt;
#include &lt;vector&gt;

using namespace boost::python;

class Buffer {
public:
    unsigned char* m_pBuff;
    int m_iWidth;
    int m_iHeight;


    Buffer( const int p_iWidth, const int p_iHeight ) {
        m_pBuff = new unsigned char[p_iWidth * p_iHeight];

        m_iWidth  = p_iWidth;
        m_iHeight = p_iHeight;
    }

    ~Buffer() { delete[] m_pBuff; }

    /* Class Functions */

    list getList ( void ) {
        list l;
        l.append(m_iWidth);
        l.append(m_iHeight);

        std::vector&lt;char&gt; data(m_iWidth*m_iHeight);

        unsigned char* pBuff = m_pBuff;
        for ( int i = 0; i &lt; m_iWidth * m_iHeight; ++i, ++pBuff ) {
            data[i] = (char) *pBuff;
        }

        l.append(data);

        return l;
    }
};

BOOST_PYTHON_MODULE(BufferMethods)
{

    class_&lt;std::vector&lt;char&gt; &gt;("CharVec")
            .def(vector_indexing_suite&lt;std::vector&lt;char&gt; &gt;());


    class_&lt;Buffer&gt;("Buffer", init&lt;const int, const int&gt;()) 
        .add_property("width", &amp;Buffer::m_iWidth)
        .add_property("height", &amp;Buffer::m_iHeight)
        /* Other functions */
        .def("getList", &amp;Buffer::getList)
    ;
}
</snippet></ROW><ROW><id>13684526</id><snippet>In [1]: from BufferMethods import *

In [2]: Buff = Buffer(800,600)

In [3]: dataList = Buff.getList()

In [4]: dataList[2]
Out[4]: &lt;BufferMethods.CharVec at 0x18172d0&gt;

In [5]: dataList[2][2]
Out[5]: '\x00'
</snippet></ROW><ROW><id>13684764</id><snippet>mark = Dog()
</snippet></ROW><ROW><id>13684764</id><snippet>mark = Dog(Animal)</snippet></ROW><ROW><id>13684764</id><snippet>implimented</snippet></ROW><ROW><id>13684764</id><snippet>import abc
class Animal(object):
    __metaclass__ = abc.ABCMeta

    def speak(self):
        ...
</snippet></ROW><ROW><id>13684784</id><snippet>regex = r'(lease\s*[0-9\.]+\s*\{[^\{\}]*%s[^\{\}]*(.*"[^\{\}]*\}|\}))' % mac #mac comes as parameter
m = re.findall(regex,lines)
</snippet></ROW><ROW><id>13685747</id><snippet>foo = Bar()
(foo.setSomething(something1)
     .setStatus('vertical')
     .setAttributes(attributes))
</snippet></ROW><ROW><id>13686031</id><snippet>&gt;&gt;&gt; from geopy import geocoders  
&gt;&gt;&gt; gn = geocoders.GeoNames()

&gt;&gt;&gt; print gn.geocode("Cleveland, OH 44106")
(u'Cleveland, OH, US', (41.4994954, -81.6954088))

&gt;&gt;&gt; gn.geocode("Cleveland, OH", exactly_one=False)[0]
(u'Cleveland, OH, US', (41.4994954, -81.6954088))
</snippet></ROW><ROW><id>13686060</id><snippet>from subprocess import Popen, check_output
import time

def call_timeout(cmd, timeout):
    start = time.time()
    p = Popen(cmd)
    while time.time() - start &lt; timeout:
        if p.poll() is not None:
            return
        time.sleep(0.1)
    p.kill()
    raise OSError('command timed out')
</snippet></ROW><ROW><id>13686060</id><snippet>call_timeout(["sleep", "1"], 0.5)
</snippet></ROW><ROW><id>13686060</id><snippet>call_timeout(["sleep", "1"], 1.5)
</snippet></ROW><ROW><id>13686060</id><snippet>call_timeout(["ls", "/path/to/mountpoint"], 5.0)
</snippet></ROW><ROW><id>13686384</id><snippet>conn = pyodbc.connect(...)
for n in nfiles:
    ...
    cursor = conn.cursor()
    cursor.execute("exec SP_my_Dailyfiles('n')")
    conn.commit()
</snippet></ROW><ROW><id>13686500</id><snippet>urllib.unquote</snippet></ROW><ROW><id>13686500</id><snippet>json</snippet></ROW><ROW><id>13686500</id><snippet>csv</snippet></ROW><ROW><id>13686500</id><snippet>In [1]: import csv

In [2]: import json

In [3]: import urllib

In [4]: json_resp = urllib.quote('[{"name": "John Doe", "age": 35}, {"name": "Jane Doe", "age": 33}]')

In [5]: json_resp # What I believe your response looks like
Out[5]: '%5B%7B%22name%22%3A%20%22John%20Doe%22%2C%20%22age%22%3A%2035%7D%2C%20%7B%22name%22%3A%20%22Jane%20Doe%22%2C%20%22age%22%3A%2033%7D%5D'

In [6]: resp = urllib.unquote(json_resp) #'Unquote' the response

In [7]: resp
Out[7]: '[{"name": "John Doe", "age": 35}, {"name": "Jane Doe", "age": 33}]'

In [8]: content = json.loads(resp) # Turn the resp into a Python object

In [9]: fieldnames = ('name', 'age') # Specify the order in which to write fields

In [10]: with open('mycsv.csv', 'wb') as f:
   ....:     writer = csv.DictWriter(f, fieldnames)
   ....:     writer.writeheader() # Python 2.7+
   ....:     for item in content:
   ....:         writer.writerow(item)
   ....:
   ....:
</snippet></ROW><ROW><id>13686500</id><snippet>name,age
John Doe,35
Jane Doe,33
</snippet></ROW><ROW><id>13686511</id><snippet>newdict = {k, v[:] for k, v in olddict.iteritems()}
</snippet></ROW><ROW><id>13686944</id><snippet>Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    player1.deck.cards
NameError: name 'player1' is not defined
</snippet></ROW><ROW><id>13686944</id><snippet>player1.deck.cards</snippet></ROW><ROW><id>13686944</id><snippet>initializeGame()

# and then do something with
player1.deck.cards
</snippet></ROW><ROW><id>13686944</id><snippet>player1</snippet></ROW><ROW><id>13686944</id><snippet>player2</snippet></ROW><ROW><id>13686944</id><snippet>initializeGame</snippet></ROW><ROW><id>13686944</id><snippet>initializeGame</snippet></ROW><ROW><id>13686944</id><snippet>def initializeGame():
    player1 = player()
    player1.shuffleDeck()
    player2 = player()
    player2.shuffleDeck()
    return player1, player2
</snippet></ROW><ROW><id>13686944</id><snippet>player1, player2 = initializeGame()
</snippet></ROW><ROW><id>13686944</id><snippet>class Game:
    def __init__ (self):
        self.player1 = player()
        self.player1.shuffleDeck()
        self.player2 = player()
        self.player2.shuffleDeck()
</snippet></ROW><ROW><id>13686944</id><snippet>Game</snippet></ROW><ROW><id>13686944</id><snippet>game.player1</snippet></ROW><ROW><id>13686944</id><snippet>game.player2</snippet></ROW><ROW><id>13687129</id><snippet>f = open("datafile")
for line in f:
  #Catch everything that has a non-number/space in it
  if re.search("[^-0-9.\s]",line): 
     continue
  # Catch empty lines
  if len(line.strip()) == 0:
     continue
  # Keep the rest
  print(line)

f.close()
</snippet></ROW><ROW><id>13687145</id><snippet>def foo(*args, **kwargs):
    do_something = kwargs.pop("do_something", False)
</snippet></ROW><ROW><id>13687145</id><snippet>metadict</snippet></ROW><ROW><id>13687347</id><snippet>startswith</snippet></ROW><ROW><id>13687347</id><snippet>re.match</snippet></ROW><ROW><id>13687347</id><snippet>import string; line.startswith(tuple(string.digits))</snippet></ROW><ROW><id>13687544</id><snippet>$ telnet localhost 6379
</snippet></ROW><ROW><id>13687730</id><snippet>run(reloader=False).  
</snippet></ROW><ROW><id>13687772</id><snippet>query = 'select count(*) from registrants where email=%s'
cursor.execute(query, emailvar)
if next(cursor, None) is None:
    # whatever
</snippet></ROW><ROW><id>13687772</id><snippet>.fetchone()</snippet></ROW><ROW><id>13687772</id><snippet>EXISTS</snippet></ROW><ROW><id>13688057</id><snippet>django.views.static.serve</snippet></ROW><ROW><id>13688057</id><snippet>/usr/local/lib/python2.7/dist-packages/django/contrib/admin/static/admin/;
</snippet></ROW><ROW><id>13688057</id><snippet>/media/admin</snippet></ROW><ROW><id>13688057</id><snippet>[my_django_location]/contrib/admin/static/admin/
</snippet></ROW><ROW><id>13688057</id><snippet>urls.py</snippet></ROW><ROW><id>13688057</id><snippet>(r'^admin/static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', '/path/to/your/admin/files/'),
</snippet></ROW><ROW><id>13688108</id><snippet>def nested_set(dic, keys, value):
    for key in keys[:-1]:
        dic = dic.setdefault(key, {})
    dic[keys[-1]] = value
</snippet></ROW><ROW><id>13688108</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; nested_set(d, ['person', 'address', 'city'], 'New York')
&gt;&gt;&gt; d
{'person': {'address': {'city': 'New York'}}}
</snippet></ROW><ROW><id>13688153</id><snippet>import Tkinter as tk

class App(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.frame_Light = tk.Frame(self, background="bisque")
        self.frame_Light.pack(side="top", fill="both", expand=True)
        self.light_on = True
        self.canvas = tk.Canvas(self.frame_Light)
        self.canvas.create_oval(10, 10, 30, 30, fill="yellow", tags="light")
        self.canvas.pack(side="top", fill="both", expand=True)
        self.draw_light()

    def draw_light(self):

        if self.light_on:
            self.canvas.itemconfig("light", fill="blue")
            self.light_on = False
            print "on"
        else:
            self.canvas.itemconfig("light", fill="red")
            self.light_on = True
            print "of"

        self.after(1000, self.draw_light)

app = App()
app.mainloop()
</snippet></ROW><ROW><id>13688241</id><snippet>def __init__(...):
    ...
    self.canvas = tk.Canvas(...)
    b = tk.Button(..., command=self.create_image)
    ...
def create_image(self):
    self.canvas.create_image(...)
</snippet></ROW><ROW><id>13688241</id><snippet>def __init__(...):
    ...
    self.images = []
    ...
    photo1 = PhotoImage(file="Images/p1.gif")
    self.images.append(photo1)
    ...
</snippet></ROW><ROW><id>13688241</id><snippet>move</snippet></ROW><ROW><id>13688241</id><snippet>self.canvas.update()</snippet></ROW><ROW><id>13688241</id><snippet>lambda</snippet></ROW><ROW><id>13688241</id><snippet>functools.partial</snippet></ROW><ROW><id>13688392</id><snippet>Counter()</snippet></ROW><ROW><id>13688392</id><snippet>update()</snippet></ROW><ROW><id>13688392</id><snippet>city_counter</snippet></ROW><ROW><id>13688392</id><snippet>city_counter.update([clusters([loc])])</snippet></ROW><ROW><id>13688460</id><snippet>sleep</snippet></ROW><ROW><id>13688460</id><snippet>time</snippet></ROW><ROW><id>13688460</id><snippet>import time

# Change data.txt to the name of your file
data_file = open("data.txt", "r")

# Get rid of blank lines (often the last line of the file)
vals = [i for i in data_file.read().split('\n') if i]

data_file.close()

for i in vals:
    i = i.split(',')
    i[1] = i[1][1:]
    time.sleep(float(i[0]))

    print i[1]
</snippet></ROW><ROW><id>13688655</id><snippet>@login_required</snippet></ROW><ROW><id>13688655</id><snippet>/bookmarks/</snippet></ROW><ROW><id>13688655</id><snippet>bookmarks</snippet></ROW><ROW><id>13688655</id><snippet>@loggin_required
def bookmarks():
  # only fetch book makrs for this user
  bookmarks = Bookmarks.objects.filter(user=request.user)
</snippet></ROW><ROW><id>13688655</id><snippet>bookmarks/{{ bookmark_id }}/edit</snippet></ROW><ROW><id>13688655</id><snippet>edit_bookmark</snippet></ROW><ROW><id>13688655</id><snippet>@login_required
def edit_bookmark(bookmark_id):
   # user is guarenteed to be logged in so request.user is available
   # your permission system will depend on how you authenticate whether a user can edit
   # a bookmark or not
   # CHECK if user has permission to edit bookmark
   pass
</snippet></ROW><ROW><id>13688663</id><snippet>def send(self, queue, fd):
    non_blank_lines = (line.strip() for line in fd if line.strip())
    for line in non_blank_lines:
        queue.write(json.loads(data))
</snippet></ROW><ROW><id>13688663</id><snippet>non_blank_lines = (line.strip() for line in fd if line.strip())
print(*non_blank_lines, file='foo')
</snippet></ROW><ROW><id>13688663</id><snippet>stripped_lines = (line.strip() for line in fd)
non_blank_lines = (line for line in stripped_lines if line)
</snippet></ROW><ROW><id>13688841</id><snippet>&gt;&gt;&gt; 'foo'[1:0]
''
</snippet></ROW><ROW><id>13688878</id><snippet>data = {}

with open('filename') as f:
    for line in f:
        row = line.split()
        data[row[0]] = row[1]
</snippet></ROW><ROW><id>13688878</id><snippet>data[value]</snippet></ROW><ROW><id>13688878</id><snippet>&gt;&gt;&gt; print data['8.12.']
921
</snippet></ROW><ROW><id>13688878</id><snippet>from collections import defaultdict

data = defaultdict(list)

with open('filename') as f:
    for line in f:
        row = line.split()
        data[row[0]].append(row[1])
</snippet></ROW><ROW><id>13688878</id><snippet>1.1. 10
2.1. 11
1.1. 12
</snippet></ROW><ROW><id>13688878</id><snippet>data['1.1']</snippet></ROW><ROW><id>13688878</id><snippet>["10", "12"]</snippet></ROW><ROW><id>13688878</id><snippet>data[row[0]] = int(row[1])
</snippet></ROW><ROW><id>13688878</id><snippet>data[row[0]] = float(row[1])
</snippet></ROW><ROW><id>13688889</id><snippet>sudo</snippet></ROW><ROW><id>13688889</id><snippet>setup.py</snippet></ROW><ROW><id>13688891</id><snippet>for element in i['counts']:
    ...
    x.append(element['extra'])
</snippet></ROW><ROW><id>13688891</id><snippet>while a &lt; len(i['counts']):
</snippet></ROW><ROW><id>13688977</id><snippet>         311748 function calls in 15.363 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001   15.363   15.363 &lt;string&gt;:1(&lt;module&gt;)
        1   15.322   15.322   15.362   15.362 merge.py:3(merge1)
   221309    0.030    0.000    0.030    0.000 {len}
    90436    0.010    0.000    0.010    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>13688977</id><snippet>         250004 function calls in 0.104 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.001    0.001    0.104    0.104 &lt;string&gt;:1(&lt;module&gt;)
        1    0.074    0.074    0.103    0.103 merge.py:20(merge2)
    50000    0.005    0.000    0.005    0.000 {len}
   100000    0.010    0.000    0.010    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
   100000    0.014    0.000    0.014    0.000 {method 'pop' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}
</snippet></ROW><ROW><id>13688977</id><snippet>len</snippet></ROW><ROW><id>13688977</id><snippet>append</snippet></ROW><ROW><id>13688977</id><snippet>len</snippet></ROW><ROW><id>13688977</id><snippet>append</snippet></ROW><ROW><id>13688977</id><snippet>pop</snippet></ROW><ROW><id>13688977</id><snippet>len</snippet></ROW><ROW><id>13688977</id><snippet>append</snippet></ROW><ROW><id>13688977</id><snippet>pop</snippet></ROW><ROW><id>13688977</id><snippet>inv += len(left[i:])
</snippet></ROW><ROW><id>13688977</id><snippet>inv += 1</snippet></ROW><ROW><id>13688977</id><snippet>merge2</snippet></ROW><ROW><id>13688977</id><snippet>inv += len(left) - i
</snippet></ROW><ROW><id>13688977</id><snippet>def merge3(left, right):
    i = j = inv = 0
    merged = []
    while i &lt; len(left) and j &lt; len(right):
        if left[i] &lt;= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inv += len(left) - i

    merged += left[i:]
    merged += right[j:]
    return merged, inv
</snippet></ROW><ROW><id>13689195</id><snippet>common</snippet></ROW><ROW><id>13689195</id><snippet>common</snippet></ROW><ROW><id>13689195</id><snippet>models.py</snippet></ROW><ROW><id>13689195</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>13689247</id><snippet>cp1253</snippet></ROW><ROW><id>13689247</id><snippet>r</snippet></ROW><ROW><id>13689247</id><snippet>rb</snippet></ROW><ROW><id>13689297</id><snippet>.tar.gz</snippet></ROW><ROW><id>13689607</id><snippet>diff</snippet></ROW><ROW><id>13689607</id><snippet>In [3]: s = pd.Series(np.arange(10))

In [4]: s.diff()
Out[4]:
0   NaN
1     1
2     1
3     1
4     1
5     1
6     1
7     1
8     1
9     1
</snippet></ROW><ROW><id>13689607</id><snippet>np.diff</snippet></ROW><ROW><id>13689607</id><snippet>In [7]: np.diff(s.values)
Out[7]: array([1, 1, 1, 1, 1, 1, 1, 1, 1])

In [8]: np.diff(np.array(s))
Out[8]: array([1, 1, 1, 1, 1, 1, 1, 1, 1])
</snippet></ROW><ROW><id>13689607</id><snippet>np.diff(s)</snippet></ROW><ROW><id>13689607</id><snippet>np.asanyarray()</snippet></ROW><ROW><id>13689607</id><snippet>diff</snippet></ROW><ROW><id>13689607</id><snippet>In [25]: a = np.asanyarray(s)

In [26]: a 
Out[26]:
0    0
1    1
2    2
3    3
4    4
5    5
6    6
7    7
8    8
9    9

In [27]: np.diff(a)
Out[27]:
0   NaN
1     0
2     0
3     0
4     0
5     0
6     0
7     0
8     0
9   NaN
</snippet></ROW><ROW><id>13690015</id><snippet>htons</snippet></ROW><ROW><id>13690015</id><snippet>bytearray</snippet></ROW><ROW><id>13690015</id><snippet>list</snippet></ROW><ROW><id>13690015</id><snippet># like C's memcpy(buf+i, foo, 2)
buf[i:i+2] = foo
</snippet></ROW><ROW><id>13690015</id><snippet>foo</snippet></ROW><ROW><id>13690015</id><snippet>&amp;</snippet></ROW><ROW><id>13690015</id><snippet>struct</snippet></ROW><ROW><id>13690015</id><snippet>t = socket.htons(int(port))
buf[i:i+2] = struct.pack('h', t)
</snippet></ROW><ROW><id>13690015</id><snippet>struct</snippet></ROW><ROW><id>13690015</id><snippet>t = int(port)
buf[i:i+2] = struct.pack('!h', t)
</snippet></ROW><ROW><id>13690015</id><snippet>struct</snippet></ROW><ROW><id>13690015</id><snippet>buf = bytearray(6)
i = 0
addrbytes = [int(part) for part in addr.split('.')]
buf[i:i+4] = struct.pack('4B', addrbytes[0], addrbytes[1], addrbytes[2], addrbytes[3])
i += 4
portshort = int(port)
buf[i:i+2] = struct.pack('!h', portshort)
</snippet></ROW><ROW><id>13690015</id><snippet>addrbytes = [int(part) for part in addr.split('.')]
portshort = int(port)
buf = struct.pack('!4Bh', addrbytes[0], addrbytes[1], addrbytes[2], addrbytes[3], portshort)
</snippet></ROW><ROW><id>13690015</id><snippet>class ADDRPORT(ctypes.BigEndianStructure):
    _fields_ = [("addr", ctypes.c_char*4),
                ("port", ctypes.c_short)]

addrport = ADDRPORT(addrbytes, portshort)
</snippet></ROW><ROW><id>13690015</id><snippet>struct</snippet></ROW><ROW><id>13690243</id><snippet>del x</snippet></ROW><ROW><id>13690243</id><snippet>foo</snippet></ROW><ROW><id>13690243</id><snippet>NameError</snippet></ROW><ROW><id>13690243</id><snippet>del foo</snippet></ROW><ROW><id>13690299</id><snippet>print</snippet></ROW><ROW><id>13690299</id><snippet>.app</snippet></ROW><ROW><id>13690299</id><snippet>cmd</snippet></ROW><ROW><id>13690299</id><snippet>logging</snippet></ROW><ROW><id>13690299</id><snippet>traceback.print_stack()
</snippet></ROW><ROW><id>13690299</id><snippet>def tracify(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        traceback.print_stack()
        func(*args, **kwargs)
    return wrapper
</snippet></ROW><ROW><id>13690299</id><snippet>InterestingClass.interestingMethod = tracify(InterestingClass.interestingMethod)
</snippet></ROW><ROW><id>13690299</id><snippet>tracify</snippet></ROW><ROW><id>13690299</id><snippet>traceback.print_stack()</snippet></ROW><ROW><id>13690299</id><snippet>for attr in dir(InterestingClass):
    if not attr.startswith('_'):
        method = getattr(InterestingClass, attr)
        if isinstance(method, instancemethod):
            setattr(InterestingClass, tracify(method))
</snippet></ROW><ROW><id>13690299</id><snippet>dir</snippet></ROW><ROW><id>13690299</id><snippet>inspect</snippet></ROW><ROW><id>13690299</id><snippet>inspect</snippet></ROW><ROW><id>13690303</id><snippet>gc</snippet></ROW><ROW><id>13690321</id><snippet>visit</snippet></ROW><ROW><id>13690321</id><snippet>parent</snippet></ROW><ROW><id>13690321</id><snippet>isinstance</snippet></ROW><ROW><id>13690321</id><snippet>visit</snippet></ROW><ROW><id>13690321</id><snippet>import pydot

menu = {'dinner':
            {'chicken':'good',
             'beef':'average',
             'vegetarian':{
                   'tofu':'good',
                   'salad':{
                            'caeser':'bad',
                            'italian':'average'}
                   },
             'pork':'bad'}
        }

def draw(parent_name, child_name):
    edge = pydot.Edge(parent_name, child_name)
    graph.add_edge(edge)

def visit(node, parent=None):
    for k,v in node.iteritems():
        if isinstance(v, dict):
            # We start with the root node whose parent is None
            # we don't want to graph the None node
            if parent:
                draw(parent, k)
            visit(v, k)
        else:
            draw(parent, k)
            # drawing the label using a distinct name
            draw(k, k+'_'+v)

graph = pydot.Dot(graph_type='graph')
visit(menu)
graph.write_png('example1_graph.png')
</snippet></ROW><ROW><id>13690395</id><snippet>&gt;&gt;&gt; path = '/path/to/file.txt'
&gt;&gt;&gt; with open(path, 'r') as f:
...     lines = [l for l in f]
</snippet></ROW><ROW><id>13690395</id><snippet>lines</snippet></ROW><ROW><id>13690411</id><snippet>:memory:</snippet></ROW><ROW><id>13690579</id><snippet>restruct = Struct()</snippet></ROW><ROW><id>13690579</id><snippet>restruct = Struct()</snippet></ROW><ROW><id>13690579</id><snippet>obj.attr</snippet></ROW><ROW><id>13690579</id><snippet>obj</snippet></ROW><ROW><id>13690579</id><snippet>global</snippet></ROW><ROW><id>13690579</id><snippet>restruct</snippet></ROW><ROW><id>13690579</id><snippet>restruct</snippet></ROW><ROW><id>13690695</id><snippet>while</snippet></ROW><ROW><id>13690695</id><snippet>len(str_exp)</snippet></ROW><ROW><id>13691053</id><snippet>eval</snippet></ROW><ROW><id>13691053</id><snippet>globals</snippet></ROW><ROW><id>13691053</id><snippet>locals</snippet></ROW><ROW><id>13691053</id><snippet>eval</snippet></ROW><ROW><id>13691053</id><snippet>foo(dir())</snippet></ROW><ROW><id>13691053</id><snippet>eval</snippet></ROW><ROW><id>13691053</id><snippet>eval</snippet></ROW><ROW><id>13691053</id><snippet>getattr</snippet></ROW><ROW><id>13691053</id><snippet>dir</snippet></ROW><ROW><id>13691053</id><snippet>inspect</snippet></ROW><ROW><id>13691273</id><snippet>variable = d.get("the key", "something")
</snippet></ROW><ROW><id>13691273</id><snippet>"something"</snippet></ROW><ROW><id>13691273</id><snippet>in</snippet></ROW><ROW><id>13691273</id><snippet>has_key</snippet></ROW><ROW><id>13691273</id><snippet>variable = d["the key"] if "the key" in d else expensiveComputation()
</snippet></ROW><ROW><id>13691273</id><snippet>if</snippet></ROW><ROW><id>13691273</id><snippet>expensiveComputation</snippet></ROW><ROW><id>13691273</id><snippet>if "the_key" in d:
    variable = d["the key"]
else:
    variable = expensiveComputation()
</snippet></ROW><ROW><id>13691273</id><snippet>try:
    variable = d["the key"]
except KeyError:
    variable = expensiveComputation()
</snippet></ROW><ROW><id>13691273</id><snippet>sentinel = object()
variable = d.get(sentinel)
if variable == sentinel:
    variable = expensiveComputation()
</snippet></ROW><ROW><id>13691273</id><snippet>d = collections.defaultdict(expensiveComputation)
</snippet></ROW><ROW><id>13691273</id><snippet>variable = d["the key"]
</snippet></ROW><ROW><id>13691273</id><snippet>d["the key"]</snippet></ROW><ROW><id>13691273</id><snippet>expensiveComputation()</snippet></ROW><ROW><id>13691273</id><snippet>d["the key"]</snippet></ROW><ROW><id>13691273</id><snippet>dict.__missing__</snippet></ROW><ROW><id>13691273</id><snippet>defaultdict</snippet></ROW><ROW><id>13691273</id><snippet>class MyDict(dict):
    def __missing__(self, key):
        return expensiveComputation()
</snippet></ROW><ROW><id>13691273</id><snippet>variable = d["the key"]
</snippet></ROW><ROW><id>13691350</id><snippet>from bson import json_util
json_util.dumps(MyDoc._collection_obj.find(MyDoc.objects()._query))
</snippet></ROW><ROW><id>13691893</id><snippet>timeseries = []
for point in  points: 
    timeseries.append(
        min((distance between point and segment) 
             for segment in segments))
</snippet></ROW><ROW><id>13691970</id><snippet>\t</snippet></ROW><ROW><id>13691970</id><snippet>Regular expression</snippet></ROW><ROW><id>13691970</id><snippet>\t</snippet></ROW><ROW><id>13691970</id><snippet>Find:</snippet></ROW><ROW><id>13691970</id><snippet>Replace:</snippet></ROW><ROW><id>13691970</id><snippet>Format</snippet></ROW><ROW><id>13691970</id><snippet>Untabify Region</snippet></ROW><ROW><id>13691970</id><snippet>New Indent Width</snippet></ROW><ROW><id>13691970</id><snippet>Untabify Region</snippet></ROW><ROW><id>13691970</id><snippet>untabify-region</snippet></ROW><ROW><id>13691970</id><snippet>python-mode.el</snippet></ROW><ROW><id>13692117</id><snippet>"First Name: %s\nLast Name: %s" % (first_name, last_name)  
</snippet></ROW><ROW><id>13692288</id><snippet>words</snippet></ROW><ROW><id>13692288</id><snippet>word[index]</snippet></ROW><ROW><id>13692288</id><snippet>if words == 'ano' and translation == 'um':
</snippet></ROW><ROW><id>13692288</id><snippet>if</snippet></ROW><ROW><id>13692288</id><snippet>Incorrect</snippet></ROW><ROW><id>13692288</id><snippet>import random

dictionary = {'ano': 'um', 'ima': 'now', ...}
words = list(dictionary.items())
random.shuffle(words)

for word, translation in words:
    print(word)
    answer = input('Enter the translation: ')

    if answer == translation:
        print('Correct!')
    else:
        print('Incorrect.')
        print('The correct answer is: %s.' % translation)
</snippet></ROW><ROW><id>13692555</id><snippet>any</snippet></ROW><ROW><id>13692555</id><snippet>def in_fragment(phrase, fragments):
    return any(x in phrase for x in fragments)
</snippet></ROW><ROW><id>13692565</id><snippet>python a.py</snippet></ROW><ROW><id>13692565</id><snippet>python b.py</snippet></ROW><ROW><id>13692565</id><snippet>#!/usr/bin/env bash
python a.py &amp;&amp; python b.py
</snippet></ROW><ROW><id>13692565</id><snippet>python a.py</snippet></ROW><ROW><id>13692565</id><snippet>python a.py</snippet></ROW><ROW><id>13692565</id><snippet>#!/usr/bin/env bash
python a.py || python b.py
</snippet></ROW><ROW><id>13692565</id><snippet>#!/usr/bin/env bash
python a.py &amp;
python b.py &amp;
</snippet></ROW><ROW><id>13692565</id><snippet>python a.py &amp;&amp; python b.py &amp;&amp; python c.py &amp;&amp; python d.py 
</snippet></ROW><ROW><id>13692715</id><snippet>openssl pkcs12 -nocerts -out PushKey.pem -in PushKey.cer</snippet></ROW><ROW><id>13692715</id><snippet>openssl rsa -in PushKey.pem -out newPushKey.pem</snippet></ROW><ROW><id>13692715</id><snippet>openssl x509 -in aps_developer_identity.cer -inform der 
-out PushCert.pem</snippet></ROW><ROW><id>13692715</id><snippet>cat PushCert.pem newPushKey.pem &gt; push.pem</snippet></ROW><ROW><id>13692715</id><snippet>push.pem</snippet></ROW><ROW><id>13692784</id><snippet>append</snippet></ROW><ROW><id>13692784</id><snippet>baseList[x][y].append(values[count])
</snippet></ROW><ROW><id>13692784</id><snippet>baseList[x].append(values[count])
</snippet></ROW><ROW><id>13692784</id><snippet>[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]]
</snippet></ROW><ROW><id>13693342</id><snippet>result = []
for x in seq:
    if bar(x):
        result.append(foo(x))
</snippet></ROW><ROW><id>13693342</id><snippet>result = [foo(x) for f in seq if bar(x)]
</snippet></ROW><ROW><id>13693342</id><snippet>None</snippet></ROW><ROW><id>13693342</id><snippet>for x in seq:
    x.foo()    # Modify x
    x.bar()    # Modify x again
</snippet></ROW><ROW><id>13693342</id><snippet>for x in seq:
    if x.foo():
        break
    else:
        x.bar()
</snippet></ROW><ROW><id>13693392</id><snippet>#Start your middleware class
class ProxyMiddleware(object):

# overwrite process request
def process_request(self, request, spider):

    # Set the location of the proxy
    request.meta['proxy'] = "http://123.456.789.012"

    # Use the following lines if your proxy requires authentication
    proxy_user_pass = "USER_AND_PASS"

    # setup basic authentication for the proxy
    encoded_user_pass = base64.encodestring(proxy_user_pass)
    request.headers['Proxy-Authorization'] = 'Basic ' + encoded_user_pass
</snippet></ROW><ROW><id>13693412</id><snippet>list_of_tuples = [(0, 0), (0, -1), (1, -1), (1, -2), (1, -3), (1, -4), (0, -4), (0, -3), (-1, -3), (-2, -3), (-2, -2), (-2, -1), (-1, -1), (-1, -2), (0, -2)]
to_add = min(list_of_tuples)[0]
if to_add &lt; 0:
    list_of_tuples = [(a[0]-to_add, a[1]) for a in list_of_tuples]

# [(2, 0), (2, -1), (3, -1), (3, -2), (3, -3), (3, -4), (2, -4), (2, -3), (1, -3), (0, -3), (0, -2), (0, -1), (1, -1), (1, -2), (2, -2)]
</snippet></ROW><ROW><id>13693600</id><snippet>tag_found</snippet></ROW><ROW><id>13693600</id><snippet>False</snippet></ROW><ROW><id>13693600</id><snippet>True</snippet></ROW><ROW><id>13693600</id><snippet>True</snippet></ROW><ROW><id>13693600</id><snippet>TAG = '&lt;Report name="test" xmlns:cm="http://www.domain.org/cm"&gt;'

tag_found = False
with open('tag_input.txt') as in_file:
    with open('tag_output.txt', 'w') as out_file:
        for line in in_file:
            if not tag_found:
                if line.strip() == TAG:
                    tag_found = True
            else:
                out_file.write(line)
</snippet></ROW><ROW><id>13693600</id><snippet>with open(filename) as in_file:</snippet></ROW><ROW><id>13693600</id><snippet>with:</snippet></ROW><ROW><id>13693600</id><snippet>my_file.close()</snippet></ROW><ROW><id>13693986</id><snippet>db.stuff.update({'id':i['id'], 'counts.name':element['name']}, {'$set': {'counts.$.newfield':total}})
</snippet></ROW><ROW><id>13694028</id><snippet>FileMenu = wx.Menu()
item = FileMenu.Append(wx.ID_EXIT, "&amp;Quit")
self.Bind(wx.EVT_MENU, self.OnQuit, item)
</snippet></ROW><ROW><id>13694079</id><snippet>if itemTo not in item:
    print("%s doesn't exist." % (itemTo))
elif item[itemTo] &gt; 0:
    print("You have %i of %s." % (item[itemTo]))
else:
    print("You don't have a %s." % (itemTo))
</snippet></ROW><ROW><id>13694262</id><snippet>Manager</snippet></ROW><ROW><id>13694262</id><snippet>with concurrent.futures.ProcessPoolExecutor() as e:
    @functools.lru_cache
    def work(*args, **kwargs):
        return e.submit(slow_work, *args, **kwargs)
</snippet></ROW><ROW><id>13694262</id><snippet>work</snippet></ROW><ROW><id>13694262</id><snippet>Future</snippet></ROW><ROW><id>13694262</id><snippet>lru_cache</snippet></ROW><ROW><id>13694262</id><snippet>concurrent.futures</snippet></ROW><ROW><id>13694262</id><snippet>functools.lru_cache</snippet></ROW><ROW><id>13694296</id><snippet>while</snippet></ROW><ROW><id>13694296</id><snippet>while True:
    try:
        num = int(input("Give me an integer between 1 and 100:"))
        if num &gt; 100 or num &lt; 1:
            print ("Sorry, that is not an integer between 1 and 100. Try again.")
            continue
    except ValueError:
        print ("Sorry, that is not an integer between 1 and 100. Try again.")
    else:
        print ("Thank you for your input")
        break
</snippet></ROW><ROW><id>13694296</id><snippet>else</snippet></ROW><ROW><id>13694296</id><snippet>while True:
    try:
        num = int(input("Give me an integer between 1 and 100:"))
        if num &gt; 100 or num &lt; 1:
            raise ValueError
        print ("Thank you for your input")
        break
    except ValueError:
        print ("Sorry, that is not an integer between 1 and 100. Try again.")
</snippet></ROW><ROW><id>13694860</id><snippet>result = [each[2] for each in people]
print(result)
</snippet></ROW><ROW><id>13695030</id><snippet>questions.json</snippet></ROW><ROW><id>13695030</id><snippet>import json
import random

# read data from JSON file
questions = json.load(open("questions.json"))

# pick a random question
question = random.choice(questions.keys())

# get the list of possible answers and correct answer for this question
answers = questions[question]['answers']
correct_answer = questions[question]['correct_answer']

# display question and list of possible answers    
print question
for n, answer in enumerate(answers):
    print "%d) %s" % (n + 1, answer)

# ask user for answer and check if it's the correct answer for this question
resp = raw_input('answer: ')
if resp == str(correct_answer):
    print "correct!"
else:   
    print "sorry, the correct answer was %s" % correct_answer
</snippet></ROW><ROW><id>13695137</id><snippet># -*- coding: utf-8 -*-
import re

raw_string = "YO1Â£ 10.01Free"
string = raw_string.decode('utf-8')
patternPostCode = re.compile(u"^(\w{3}.*)\s+(\d+\.?\d*)(\w+)$",flags=re.UNICODE)
postCode = patternPostCode.findall(string)

print postCode
print u'; '.join(postCode[0])
</snippet></ROW><ROW><id>13695137</id><snippet>[(u'YO1\xc2\xa3', u'10.01', u'Free')]
YO1Â£; 10.01; Free
</snippet></ROW><ROW><id>13695137</id><snippet>u"^(\w{3}.*)\s+(\d+\.?\d*)(\w+)$"
</snippet></ROW><ROW><id>13695182</id><snippet>data = dict(line.lower().rstrip().rsplit(' ', 1) for line in inFile)
</snippet></ROW><ROW><id>13695182</id><snippet>dict()</snippet></ROW><ROW><id>13695182</id><snippet>line.lower().rstrip().rsplit(' ', 1)</snippet></ROW><ROW><id>13695182</id><snippet>for line in inFile:</snippet></ROW><ROW><id>13695182</id><snippet>while inFile: line = inFile.readline()</snippet></ROW><ROW><id>13695217</id><snippet>logging.Filter</snippet></ROW><ROW><id>13695217</id><snippet>import logging

class ContextFilter(logging.Filter):
    def filter(self, record):
        record.count = counter
        return True

logging.basicConfig(
    level = logging.DEBUG,
    format = '%(levelname)-8s: %(count)s: %(message)s')
logger = logging.getLogger(__name__)
logger.addFilter(ContextFilter())

counter = 5
logger.debug('First Event')
counter += 2
logger.warning('Second Event')
</snippet></ROW><ROW><id>13695217</id><snippet>DEBUG   : 5: First Event
WARNING : 7: Second Event
</snippet></ROW><ROW><id>13695260</id><snippet>import utils</snippet></ROW><ROW><id>13695260</id><snippet>projects</snippet></ROW><ROW><id>13695260</id><snippet>projects.utils</snippet></ROW><ROW><id>13695260</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>13695260</id><snippet>import utils</snippet></ROW><ROW><id>13695260</id><snippet>from . import utils
</snippet></ROW><ROW><id>13695354</id><snippet>csv</snippet></ROW><ROW><id>13695572</id><snippet>import numpy as np
i = 10.0
a = np.empty((64,48))
a.fill(i)
a += np.arange(0,6.4,0.1)[:,np.newaxis]

Out[12]: 
array([[ 10. ,  10. ,  10. , ...,  10. ,  10. ,  10. ],
       [ 10.1,  10.1,  10.1, ...,  10.1,  10.1,  10.1],
       [ 10.2,  10.2,  10.2, ...,  10.2,  10.2,  10.2],
       ..., 
       [ 16.1,  16.1,  16.1, ...,  16.1,  16.1,  16.1],
       [ 16.2,  16.2,  16.2, ...,  16.2,  16.2,  16.2],
       [ 16.3,  16.3,  16.3, ...,  16.3,  16.3,  16.3]])
</snippet></ROW><ROW><id>13695663</id><snippet>[tuple([x] + y) for x, y in zip(a, b)]
</snippet></ROW><ROW><id>13695668</id><snippet>#!/usr/bin/python

f = open("blah.txt");       # open file
for line in f:              # iterate over lines in file
  line = line.strip()       # strip leading and trailing white space
  print ("," + line + ",")  # print line between commas
f.close() # close file      # close file when done
</snippet></ROW><ROW><id>13695752</id><snippet>decimal</snippet></ROW><ROW><id>13695752</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext()
Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999999, Emax=999999999,
    capitals=1, flags=[], traps=[Overflow, DivisionByZero,
    InvalidOperation])

&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal('3.0')
Decimal('3.0')
&gt;&gt;&gt; Decimal('3.1415926535')
Decimal('3.1415926535')
&gt;&gt;&gt; Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85987')
&gt;&gt;&gt; getcontext().rounding = ROUND_UP
&gt;&gt;&gt; Decimal('3.1415926535') + Decimal('2.7182818285')
Decimal('5.85988')
</snippet></ROW><ROW><id>13695752</id><snippet>Decimals</snippet></ROW><ROW><id>13695752</id><snippet>prec</snippet></ROW><ROW><id>13695752</id><snippet>locale</snippet></ROW><ROW><id>13695752</id><snippet>Decimal</snippet></ROW><ROW><id>13695752</id><snippet>Decimal</snippet></ROW><ROW><id>13695752</id><snippet>quantize</snippet></ROW><ROW><id>13695752</id><snippet>Decimal</snippet></ROW><ROW><id>13695752</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, '')
'en_AU.UTF-8'
&gt;&gt;&gt; getcontext().rounding = ROUND_DOWN
&gt;&gt;&gt; TWOPLACES = Decimal(10) ** -2
&gt;&gt;&gt; var = Decimal('5.74536541')
Decimal('5.74536541')
&gt;&gt;&gt; var.quantize(TWOPLACES)
Decimal('5.74')
&gt;&gt;&gt; locale.currency(var.quantize(TWOPLACES))
'$5.74'
</snippet></ROW><ROW><id>13696124</id><snippet># If you set this to False, Django will not use timezone-aware datetimes.
USE_TZ = True
</snippet></ROW><ROW><id>13696124</id><snippet>USE_TZ = False
</snippet></ROW><ROW><id>13696169</id><snippet>func_code</snippet></ROW><ROW><id>13696169</id><snippet>lst = [
    (calculate urls, ()),
    (join_urls_with_ids, (args[0])),
    (bucket_urls, ())
]
</snippet></ROW><ROW><id>13696169</id><snippet>intermediate.execute</snippet></ROW><ROW><id>13696169</id><snippet>def execute(lst):
    result = ()
    for func, args in list:
        args = result + args
        result = func(*args)
</snippet></ROW><ROW><id>13696169</id><snippet>calculate_urls</snippet></ROW><ROW><id>13696169</id><snippet>inspect.getsource</snippet></ROW><ROW><id>13696169</id><snippet>func_code</snippet></ROW><ROW><id>13696311</id><snippet>n = raw_input("'p' = pause, 'u' = unpause, 'p' = play 's' = stop, 'q' = quit")
</snippet></ROW><ROW><id>13696311</id><snippet>while True:
    n = raw_input("'p' = pause, 'u' = unpause, 'pl' = play 's' = stop, 'q' = quit").strip().lower()
    if n == 'p':
        mp3.pause()
    elif n == 'u':
        mp3.unpause()
    elif n == 'pl':
        mp3.play()
    elif n == 's':
        mp3.stop()
    elif n == 'q':
        break
    else:
        break
</snippet></ROW><ROW><id>13696407</id><snippet>&gt;&gt;&gt; mylist = ['ham and eggs', 'spam and legs', "it's time to die, mr bond!"]
&gt;&gt;&gt; import difflib
&gt;&gt;&gt; close_matches = difflib.get_close_matches('spam and eggs', mylist)
&gt;&gt;&gt; close_matches
['spam and legs', 'ham and eggs']
&gt;&gt;&gt; set(mylist) - set(close_matches)
set(["it's time to die, mr bond!"])
</snippet></ROW><ROW><id>13696626</id><snippet>t = "/home/username/ok/ok.txt"
for i,j in enumerate(t.split("/")):
    print i * " " + j

 home
  username
   ok
    ok.txt
</snippet></ROW><ROW><id>13696626</id><snippet>"a" * 3
output: 'aaa'
</snippet></ROW><ROW><id>13696626</id><snippet>for i in enumerate(t.split("/")):
    print i


output: (0, '')
output: (1, 'home')
output: (2, 'username')
output: (3, 'ok')
output: (4, 'ok.txt')
</snippet></ROW><ROW><id>13696785</id><snippet>&lt;form method="GET" action="{{ url_for('myapp.affiliate') }}"&gt;
    &lt;input type="hidden" name="idnum" value="{{ golfelement.key().id() }} /&gt;
    &lt;input type="submit" value="1net" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>13696785</id><snippet>def affiliate(request, idnum=None):
    idnum = int(idnum or request.args.get('idnum'))
    golfe = Golf.get_by_id(idnum)
    return render_to_response('myapp/affiliate.html',{'affiliate': golfe}) 
</snippet></ROW><ROW><id>13696795</id><snippet>pandas</snippet></ROW><ROW><id>13696795</id><snippet>numpy</snippet></ROW><ROW><id>13696795</id><snippet>numpy</snippet></ROW><ROW><id>13696795</id><snippet>pandas</snippet></ROW><ROW><id>13696795</id><snippet>&gt;&gt;&gt; from pandas import DataFrame
&gt;&gt;&gt; df = DataFrame({"first": ["John", "Jane"], "last": ["Smith", "Jones"]})
&gt;&gt;&gt; df
  first   last
0  John  Smith
1  Jane  Jones
&gt;&gt;&gt; df["first"] + " " + df["last"]
0    John Smith
1    Jane Jones
</snippet></ROW><ROW><id>13696795</id><snippet>numpy</snippet></ROW><ROW><id>13696795</id><snippet>dtype</snippet></ROW><ROW><id>13696795</id><snippet>object</snippet></ROW><ROW><id>13696795</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([["John", "Smith"], ["Jane", "Jones"]])
&gt;&gt;&gt; a = a.astype(object)
&gt;&gt;&gt; a[:,0] += " " + a[:,1]
&gt;&gt;&gt; a = a[:,:1]
&gt;&gt;&gt; a
array([[John Smith],
       [Jane Jones]], dtype=object)
</snippet></ROW><ROW><id>13696926</id><snippet>numpy.genfromtxt()</snippet></ROW><ROW><id>13696926</id><snippet>file.seek()</snippet></ROW><ROW><id>13696926</id><snippet>os.stat()</snippet></ROW><ROW><id>13696926</id><snippet>numpy.genfromtxt()</snippet></ROW><ROW><id>13696926</id><snippet>skip_header</snippet></ROW><ROW><id>13696926</id><snippet>minutesOld</snippet></ROW><ROW><id>13696926</id><snippet>skip_header = minutesOld - 360</snippet></ROW><ROW><id>13696926</id><snippet>genfromtxt()</snippet></ROW><ROW><id>13696926</id><snippet>data = numpy.genfromtxt(t_in, dtype=None, usecols=(0,1), skip_header = minutesOld - 360)
</snippet></ROW><ROW><id>13696926</id><snippet>usecols</snippet></ROW><ROW><id>13696926</id><snippet>dtype</snippet></ROW><ROW><id>13696926</id><snippet>from numpy import genfromtxt
from itertools import islice
from time import localtime, time

toKeep = 20
with open('temperature_logging') as fin:
    start = genfromtxt(islice(fin,1), dtype=None, usecols=(0,1))
    hf, mf = map(int, start.tolist()[0].split(':'))
    ti = localtime(time())
    hn, mn = ti.tm_hour, ti.tm_min
    print 'File start: {:02d}:{:02d},  Time Now: {:02d}:{:02d}'.format(hf, mf, hn, mn)
    minutesOld = (hn-hf)*60 + mn-mf
    if minutesOld &lt; 0: minutesOld += 24*60
    data = genfromtxt(fin, dtype=None, usecols=(0,1), skip_header = minutesOld - toKeep)

print data
</snippet></ROW><ROW><id>13696926</id><snippet>File start: 03:43,  Time Now: 00:16
[('23:57', 66.3) ('23:58', 66.8) ('23:59', 66.7) ('24:00', 67.1)
 ('24:01', 66.7) ('24:02', 67.1) ('24:03', 66.8) ('24:04', 67.2)
 ('24:05', 67.4) ('24:06', 67.7) ('24:07', 67.3) ('24:08', 67.1)
 ('24:09', 66.8) ('24:10', 67.3) ('24:11', 67.8) ('24:12', 67.3)
 ('24:13', 67.6) ('24:14', 67.6) ('24:15', 67.7) ('24:16', 67.3)]
</snippet></ROW><ROW><id>13697179</id><snippet>virtualenv</snippet></ROW><ROW><id>13697284</id><snippet>Database_to_use</snippet></ROW><ROW><id>13697284</id><snippet>"dummy string forces this variable into the global namespace"</snippet></ROW><ROW><id>13697284</id><snippet>Database_to_use</snippet></ROW><ROW><id>13697284</id><snippet>SelectSqlDatabase.Database_to_use</snippet></ROW><ROW><id>13697284</id><snippet>Database_to_use = LanguageInUse.Database_to_use
</snippet></ROW><ROW><id>13697284</id><snippet>LanguageInUse.Database_to_use</snippet></ROW><ROW><id>13697284</id><snippet>configuraion = {}</snippet></ROW><ROW><id>13697284</id><snippet>__init__.py</snippet></ROW><ROW><id>13697284</id><snippet>from mainmodule import configuration

def somefuction():
    configuration['database'] = "mysql:blahblahblah"
</snippet></ROW><ROW><id>13697284</id><snippet>from mainmodule import configuration
configuration['database'] = "mysql:blahblahblah"

def somefuction():
    databaseopener(cofiguration['database'])
</snippet></ROW><ROW><id>13697416</id><snippet>BaseException.__bases__</snippet></ROW><ROW><id>13697416</id><snippet>__bases__</snippet></ROW><ROW><id>13697416</id><snippet>object</snippet></ROW><ROW><id>13697515</id><snippet>&gt;&gt;&gt; from networkx.algorithms import isomorphism
&gt;&gt;&gt; G1 = nx.path_graph(4)
&gt;&gt;&gt; G2 = nx.path_graph(4)
&gt;&gt;&gt; GM = isomorphism.GraphMatcher(G1,G2)
&gt;&gt;&gt; GM.is_isomorphic()
True
&gt;&gt;&gt; GM.mapping
{0: 0, 1: 1, 2: 2, 3: 3}
</snippet></ROW><ROW><id>13697792</id><snippet>from __future__ import absolute_import
import json
</snippet></ROW><ROW><id>13697792</id><snippet>json</snippet></ROW><ROW><id>13697792</id><snippet>from . import json
</snippet></ROW><ROW><id>13697925</id><snippet>&gt;&gt;&gt; for elem in soup.findAll():
    path = '.'.join(reversed([p.name for p in elem.parentGenerator() if p]))
    print "{:10}|{:60}|{:10}".format(elem.name,elem.attrs, path)


html      |[]                                                          |[document]
head      |[]                                                          |[document].html
title     |[]                                                          |[document].html.head
body      |[]                                                          |[document].html
div       |[(u'id', u'abc')]                                           |[document].html.body
ol        |[(u'id', u'def')]                                           |[document].html.body.div
li        |[(u'class', u'testItem')]                                   |[document].html.body.div.ol
a         |[(u'href', u'http://testpage.html')]                        |[document].html.body.div.ol.li
li        |[(u'class', u'testItem')]                                   |[document].html.body.div.ol
table     |[(u'id', u'testTable')]                                     |[document].html.body.div.ol.li
tr        |[]                                                          |[document].html.body.div.ol.li.table
td        |[]                                                          |[document].html.body.div.ol.li.table.tr
div       |[(u'id', u'testDiv')]                                       |[document].html.body.div.ol.li.table.tr.td
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13697968</id><snippet>.append()</snippet></ROW><ROW><id>13697968</id><snippet>L.append(x)
</snippet></ROW><ROW><id>13697968</id><snippet>L = [None for _ in xrange(nIterations)]
</snippet></ROW><ROW><id>13698079</id><snippet>warning: install_lib: 'build\lib' does not exist -- no Python modules to install
</snippet></ROW><ROW><id>13698079</id><snippet>setup.py</snippet></ROW><ROW><id>13698079</id><snippet>cd inst\vcs
d:\pyth27\inst\vcs&gt;python setup.py install
</snippet></ROW><ROW><id>13698079</id><snippet>setup.py</snippet></ROW><ROW><id>13698137</id><snippet>body = u'\n'.join(lines[2:])
</snippet></ROW><ROW><id>13698137</id><snippet>body = '\n'.join(lines[2:])
</snippet></ROW><ROW><id>13698137</id><snippet>import codecs
f=codecs.open('captions.srt',encoding='utf-8')
l=f.readlines()
f.close()
type(l[0]) # will be unicode object rather than string object
</snippet></ROW><ROW><id>13698285</id><snippet>:</snippet></ROW><ROW><id>13698285</id><snippet>if</snippet></ROW><ROW><id>13698285</id><snippet>pax&gt; cat good.py 
for plugh in (1,2,3):
    print plugh

pax&gt; python good.py 
1
2
3

pax&gt; cat bad.py 
for plugh in (1,2,3)
    print plugh

pax&gt; python bad.py 
  File "bad.py", line 1
    for plugh in (1,2,3)
                       ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>13698285</id><snippet>if</snippet></ROW><ROW><id>13698524</id><snippet>[i for i, z in enumerate(x) if z == 1]
</snippet></ROW><ROW><id>13698524</id><snippet>&gt;&gt;&gt; x = [1, 2, 3, 1, 5, 1, 8]
&gt;&gt;&gt; [i for i, z in enumerate(x) if z == 1]
[0, 3, 5]
</snippet></ROW><ROW><id>13699193</id><snippet>django.template.loaders.app_directories.Loader</snippet></ROW><ROW><id>13699193</id><snippet>TEMPLATE_LOADERS</snippet></ROW><ROW><id>13699193</id><snippet>settings.py</snippet></ROW><ROW><id>13699193</id><snippet>templates</snippet></ROW><ROW><id>13699193</id><snippet>TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)
</snippet></ROW><ROW><id>13699217</id><snippet>map(sum, zip(*a))
</snippet></ROW><ROW><id>13699217</id><snippet>from collections import Counter
output = [Counter(col) for col in zip(*a)]
</snippet></ROW><ROW><id>13699217</id><snippet>output = map(Counter, zip(*a))
</snippet></ROW><ROW><id>13699329</id><snippet>inspect</snippet></ROW><ROW><id>13699329</id><snippet>frame = inspect.stack()[1]
module = inspect.getmodule(frame[0])
# Use module.__name__
</snippet></ROW><ROW><id>13699381</id><snippet>import Image
import math

def ScaleRotateTranslate(image, angle, center = None, new_center = None, scale = None, resample=Image.NEAREST):
    if (scale is None) and (center is None):
        return image.rotate(angle=angle, resample=resample)
    nx,ny = x,y = center
    sx=sy=1.0
    if new_center:
        (nx,ny) = new_center
    if scale:
        (sx,sy) = (scale, scale)
    cosine = math.cos(angle)
    sine = math.sin(angle)
    a = cosine/sx
    b = sine/sx
    c = x-nx*a-ny*b
    d = -sine/sy
    e = cosine/sy
    f = y-nx*d-ny*e
    return image.transform(image.size, Image.AFFINE, (a,b,c,d,e,f), resample=resample)

def Distance(p1,p2):
    dx = p2[0] - p1[0]
    dy = p2[1] - p1[1]
    return math.sqrt(dx*dx+dy*dy)


pilIm = Image.open('/Users/carlos/Downloads/image.jpg').convert('RGB');
eye_left = (10,10)
eye_right = (40,30)
rotation = 0.3;

image_center = ((eye_left[0]+eye_right[0])/2,(eye_left[1]+eye_right[1])/2)
rotatedImg = ScaleRotateTranslate(pilIm,center=image_center,angle=rotation)
rotatedImg.save('out.jpg')
</snippet></ROW><ROW><id>13699615</id><snippet>request_finished</snippet></ROW><ROW><id>13699624</id><snippet>dpkg -i file_to_install.deb
</snippet></ROW><ROW><id>13700097</id><snippet>def DFS(gr, s):
    path = []
    DFS2(gr, s, path)
    return path
</snippet></ROW><ROW><id>13700097</id><snippet>DFS2</snippet></ROW><ROW><id>13700131</id><snippet>Foo</snippet></ROW><ROW><id>13700131</id><snippet>cmd</snippet></ROW><ROW><id>13700131</id><snippet>'sh forExample.sh'</snippet></ROW><ROW><id>13700131</id><snippet>cmd[a][0]</snippet></ROW><ROW><id>13700131</id><snippet>cmd={'Foo': ('sh forExample.sh'), 'blah': ('sh secExample.sh')}
</snippet></ROW><ROW><id>13700131</id><snippet>tuple</snippet></ROW><ROW><id>13700131</id><snippet>,</snippet></ROW><ROW><id>13700131</id><snippet>cmd={'Foo': ('sh forExample.sh',), 'blah': ('sh secExample.sh',)}
</snippet></ROW><ROW><id>13700131</id><snippet>cmd[a]</snippet></ROW><ROW><id>13700131</id><snippet>('sh forExample.sh',)</snippet></ROW><ROW><id>13700131</id><snippet>[0]</snippet></ROW><ROW><id>13700131</id><snippet>'sh forExample.sh'</snippet></ROW><ROW><id>13700220</id><snippet>import threading
class MyThreadClass(threading.Thread):
  def __init__(self, fruits):
    threading.Thread.__init__(self)
    self.fruits = fruits    

  def run(self):
    self.fruits.append('banana')  

list_fruit = ['apple', 'orange']    
print 'BEFORE:', list_fruit
thread = MyThreadClass(list_fruit)
thread.start() 
thread.join() #Wait for the thread to finish
print 'AFTER:', list_fruit
</snippet></ROW><ROW><id>13700220</id><snippet>BEFORE: ['apple', 'orange']
AFTER: ['apple', 'orange', 'banana']
</snippet></ROW><ROW><id>13700220</id><snippet>import threading
import time

class myThread (threading.Thread):

    def __init__(self, threadID):
        self.threadID = threadID
        self.count = 0
        threading.Thread.__init__(self)

    def run(self):
        for i in range(10):
            print "count is now: ", self.count, " for thread ", self.threadID, "\n"
            time.sleep(5)


def main():    
    # spawn one or more threads
    thread1 = myThread(1)
    thread1.start()

    for i in range(20):
        time.sleep(2)
        thread1.count = thread1.count + 1

    # wait for thread1 to finish
    thread1.join()
    print thread1.count

main()
</snippet></ROW><ROW><id>13700764</id><snippet>XYZ[1, :]</snippet></ROW><ROW><id>13700764</id><snippet>row_stack</snippet></ROW><ROW><id>13700764</id><snippet>&gt;&gt;&gt; A = np.row_stack((np.ones(len(XYZ[0])), XYZ[0, :], XYZ[1, :]))
&gt;&gt;&gt; np.linalg.lstsq(A.T, XYZ[2, :])[0]
array([  1.00000000e+00,  -7.85046229e-17,  -7.85046229e-17])
</snippet></ROW><ROW><id>13700806</id><snippet>sys.getsizeof(object[, default])
</snippet></ROW><ROW><id>13701747</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.set_aspect('equal')

X = np.random.rand(100)*10+5
Y = np.random.rand(100)*5+2.5
Z = np.random.rand(100)*50+25

scat = ax.scatter(X, Y, Z)

# Create cubic bounding box to simulate equal aspect ratio
max_range = np.array([X.max()-X.min(), Y.max()-Y.min(), Z.max()-Z.min()]).max()
Xb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][0].flatten() + 0.5*(X.max()+X.min())
Yb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][1].flatten() + 0.5*(Y.max()+Y.min())
Zb = 0.5*max_range*np.mgrid[-1:2:2,-1:2:2,-1:2:2][2].flatten() + 0.5*(Z.max()+Z.min())
# Comment or uncomment following both lines to test the fake bounding box:
for xb, yb, zb in zip(Xb, Yb, Zb):
   ax.plot([xb], [yb], [zb], 'w')

plt.grid()
plt.show()
</snippet></ROW><ROW><id>13701833</id><snippet>from sklearn.base import clone

lr1 = LogisticRegression()
lr2 = clone(lr1)
</snippet></ROW><ROW><id>13702349</id><snippet>pexpect.spawn</snippet></ROW><ROW><id>13702349</id><snippet>child = pexpect.spawn('/bin/bash')
child.sendline('echo hello | cat')
</snippet></ROW><ROW><id>13702367</id><snippet>settings.py</snippet></ROW><ROW><id>13702367</id><snippet>FORCE_SCRIPT_NAME</snippet></ROW><ROW><id>13702367</id><snippet>/</snippet></ROW><ROW><id>13702367</id><snippet>FORCE_SCRIPT_NAME = '/forum'
</snippet></ROW><ROW><id>13702514</id><snippet>:memory:</snippet></ROW><ROW><id>13702743</id><snippet>G.add_node('abc', dob=1185, pob='usa', dayob='monday')
</snippet></ROW><ROW><id>13702743</id><snippet>G.add_node('abc', {'dob': 1185, 'pob': 'usa', 'dayob': 'monday'})
</snippet></ROW><ROW><id>13702743</id><snippet>G.node['abc']['dob'] # 1185
G.node['abc']['pob'] # usa
G.node['abc']['dayob'] # monday
</snippet></ROW><ROW><id>13702743</id><snippet>for n1, n2 in G.edges_iter():
    print G.node[n1]['dob'], G.node[n2]['dob']
    print G.node[n1]['pob'], G.node[n2]['pob']
    # Etc.
</snippet></ROW><ROW><id>13703310</id><snippet>self.submenu2.setVisible(False)
</snippet></ROW><ROW><id>13703310</id><snippet>self.submenu2.menuAction().setVisible(False)
</snippet></ROW><ROW><id>13703660</id><snippet>&gt;&gt;&gt; a = [5, 2, 3, 4, 1]
&gt;&gt;&gt; b=  [3, 1, 5]
&gt;&gt;&gt; sorted(b, key=a.index)
[5, 3, 1]
</snippet></ROW><ROW><id>13703660</id><snippet>a.sort(...)</snippet></ROW><ROW><id>13703959</id><snippet>{{ form.non_field_errors }}
...
&lt;p&gt;
{{ form.username.label_tag }}
{{ form.username }}
{{ form.username.errors }}
&lt;/p&gt;
</snippet></ROW><ROW><id>13704307</id><snippet>numpy.datetime64</snippet></ROW><ROW><id>13704307</id><snippet>numpy-1.8</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; dt = datetime.utcnow()
&gt;&gt;&gt; dt
datetime.datetime(2012, 12, 4, 19, 51, 25, 362455)
&gt;&gt;&gt; dt64 = np.datetime64(dt)
&gt;&gt;&gt; ts = (dt64 - np.datetime64('1970-01-01T00:00:00Z')) / np.timedelta64(1, 's')
&gt;&gt;&gt; ts
1354650685.3624549
&gt;&gt;&gt; datetime.utcfromtimestamp(ts)
datetime.datetime(2012, 12, 4, 19, 51, 25, 362455)
&gt;&gt;&gt; np.__version__
'1.8.0.dev-7b75899'
</snippet></ROW><ROW><id>13704307</id><snippet>np.datetime64</snippet></ROW><ROW><id>13704307</id><snippet>numpy-1.6</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; np.datetime64(datetime.utcnow()).astype(datetime)
datetime.datetime(2012, 12, 4, 13, 34, 52, 827542)
</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import numpy 
&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)
datetime.datetime(2002, 6, 28, 0, 0)
&gt;&gt;&gt; numpy.__version__
'1.6.2' # current version available via pip install numpy
</snippet></ROW><ROW><id>13704307</id><snippet>long</snippet></ROW><ROW><id>13704307</id><snippet>numpy-1.8.0</snippet></ROW><ROW><id>13704307</id><snippet>pip install git+https://github.com/numpy/numpy.git#egg=numpy-dev
</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.datetime64('2002-06-28T01:00:00.000000000+0100').astype(datetime)
1025222400000000000L
&gt;&gt;&gt; numpy.__version__
'1.8.0.dev-7b75899'
</snippet></ROW><ROW><id>13704307</id><snippet>long</snippet></ROW><ROW><id>13704307</id><snippet>numpy.datetime64</snippet></ROW><ROW><id>13704307</id><snippet>.astype(datetime)</snippet></ROW><ROW><id>13704307</id><snippet>.astype(object)</snippet></ROW><ROW><id>13704307</id><snippet>long</snippet></ROW><ROW><id>13704307</id><snippet>numpy-1.8</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; dt64.dtype
dtype('&lt;M8[ns]')
&gt;&gt;&gt; ns = 1e-9 # number of seconds in a nanosecond
&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int) * ns)
datetime.datetime(2002, 6, 28, 0, 0)
</snippet></ROW><ROW><id>13704307</id><snippet>&gt;&gt;&gt; dt64 = numpy.datetime64('2002-06-28T01:00:00.000000000+0100', 's')
&gt;&gt;&gt; dt64.dtype
dtype('&lt;M8[s]')
&gt;&gt;&gt; datetime.utcfromtimestamp(dt64.astype(int))
datetime.datetime(2002, 6, 28, 0, 0)
</snippet></ROW><ROW><id>13704405</id><snippet>current_room</snippet></ROW><ROW><id>13704405</id><snippet>current_room</snippet></ROW><ROW><id>13704405</id><snippet>current_room</snippet></ROW><ROW><id>13704405</id><snippet>room = current_room</snippet></ROW><ROW><id>13704405</id><snippet>print room.__doc__
</snippet></ROW><ROW><id>13704405</id><snippet>central_corridor</snippet></ROW><ROW><id>13704405</id><snippet>room()</snippet></ROW><ROW><id>13704480</id><snippet>import Image
im = Image.load("image.png")
diff_colors = list(set(im.getdata()))
if len(diff_colors) == 1 and diff_colors[0] == (0, 0, 0):
    print "all black"
</snippet></ROW><ROW><id>13704480</id><snippet>import Image
im = Image.load("image.png")
if all(rgb == (0,0,0) for rgb in im.getdata()):
    print "all black"
</snippet></ROW><ROW><id>13704751</id><snippet>from mpl_toolkits.axes_grid1 import make_axes_locatable
import numpy as np
import matplotlib.pyplot as plt

velocity=np.random.rand(3,9)

fig, ax1 = plt.subplots(1,1,figsize=(16, 12), dpi=100, subplot_kw={'aspect': 'equal'})

ax1.set_yticks([int(j) for j in range(0,4)])
ax1.set_xticks([int(j) for j in range(-4,5)])

for label in ax1.get_xticklabels() + ax1.get_yticklabels():
    label.set_fontsize(15)
for tick in ax1.get_xticklines() + ax1.get_yticklines():
    tick.set_markeredgewidth(2)
    tick.set_markersize(6)

im = ax1.imshow(velocity, cmap=cm.jet,     interpolation='nearest',origin='lower',vmin=0,vmax=1.7, extent=[-4.50,4.50,0,3])
ax1.set_xlim(-4,4)

divider = make_axes_locatable(ax1)
cax = divider.append_axes("right", size="2.5%", pad=0.3)
cb=plt.colorbar(im,cax=cax)
cb.set_label('Speed [$m/s$]')

plt.savefig("speed_400.png")
plt.close(fig)
</snippet></ROW><ROW><id>13704903</id><snippet>zip()</snippet></ROW><ROW><id>13704903</id><snippet>In [1]: a = b = c = range(20)

In [2]: zip(a, b, c)
Out[2]: 
[(0, 0, 0),
 (1, 1, 1),
 ...
 (17, 17, 17),
 (18, 18, 18),
 (19, 19, 19)]
</snippet></ROW><ROW><id>13704903</id><snippet>In [3]: result = zip(a, b, c)

In [4]: len(result[0])
Out[4]: 3
</snippet></ROW><ROW><id>13705008</id><snippet>import sys
sys.path = [$'path_to_your_lib_folder_here'$] + sys.path
</snippet></ROW><ROW><id>13705258</id><snippet>guess</snippet></ROW><ROW><id>13705258</id><snippet>guess = improve_guess(guess, x)</snippet></ROW><ROW><id>13705258</id><snippet>improve_guess()</snippet></ROW><ROW><id>13705288</id><snippet>"Heres the number in base 64: " + base64encode(ntei)</snippet></ROW><ROW><id>13705288</id><snippet>\n</snippet></ROW><ROW><id>13705288</id><snippet>"Heres the number in base 64:\n" + base64encode(ntei)</snippet></ROW><ROW><id>13705288</id><snippet>print</snippet></ROW><ROW><id>13705288</id><snippet>easygui.msgbox</snippet></ROW><ROW><id>13705288</id><snippet>ntei.encode('base64')</snippet></ROW><ROW><id>13705288</id><snippet>import easygui as e

nte = e.enterbox(msg='Enter number to convert', title='', default='', strip=True)
e.msgbox(msg=('Heres the number in base 64: ' + nte.encode('base64')))
</snippet></ROW><ROW><id>13705601</id><snippet>bs4</snippet></ROW><ROW><id>13705601</id><snippet>C:\Python27\Lib\site-packages</snippet></ROW><ROW><id>13705642</id><snippet># Normalize the rows of ve.
row_sums = np.array(ve.sum(axis=1))[:,0]
row_indices, col_indices = ve.nonzero()
ve.data /= row_sums[row_indices]
</snippet></ROW><ROW><id>13705671</id><snippet>&gt;&gt;&gt; a = '123456'
&gt;&gt;&gt; print a.split('2', 1)[0]
1
&gt;&gt;&gt; print a.split('4', 1)[0]
123
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13705671</id><snippet>import csv
with open('some.csv') as fin:
    for row in csv.reader(fin):
        print int(row[0])
</snippet></ROW><ROW><id>13705863</id><snippet>import random
import math

class command_chooser():

    def __init__(self, commands, method=1, initial=10, increase=10):
        #commands is a dict with keys = commands, values = priority
        self.commands = commands
        self.priorities = {}
        self.range_max = None
        self.percision = 100 #multiplier for decimal percision/constant
        self.__give_priority_values(method, initial, increase)

    def __give_priority_values(self, method, initial, increase):
        previous_value = 0
        current_value = initial
        for key in reversed(sorted(self.commands.keys(), key=lambda k: self.commands[k])):
            self.priorities[key] = (previous_value, current_value)
            previous_value = current_value
            if method == 1:
                current_value += current_value + increase
            elif method == 2:
                current_value += current_value * increase
            else:
                raise ValueError('unknown method: %s' % method)
        self.range_max = previous_value

    def pick(self):
        while True:
            selection = random.randint(0, math.ceil(self.range_max)*self.percision)/float(self.percision)
            if not selection &lt;= self.range_max:
                continue
            for command, scope in self.priorities.items():
                if scope[0] &lt;= selection &lt;= scope[1]:
                    return command
</snippet></ROW><ROW><id>13705863</id><snippet>c = {'cmd1':1, 'cmd2':2, 'cmd3':3}
a = command_chooser(c)
b = command_chooser(c,2,1,1.1)
&gt;&gt;&gt; b.pick()
'cmd1'
&gt;&gt;&gt; b.pick()
'cmd3'
&gt;&gt;&gt; a.pick()
'cmd1'
&gt;&gt;&gt; a.pick()
'cmd2'
</snippet></ROW><ROW><id>13705940</id><snippet>numbers</snippet></ROW><ROW><id>13705940</id><snippet>n</snippet></ROW><ROW><id>13705940</id><snippet>append()</snippet></ROW><ROW><id>13705940</id><snippet>numbers = []
n = input("(Enter a empty string to quit) Enter a number: ")
while n != "":
    numbers.append(n)
    n = input("(Enter a empty string to quit) Enter a number; ")
print ("The list is", numbers)
</snippet></ROW><ROW><id>13705940</id><snippet>append()</snippet></ROW><ROW><id>13705940</id><snippet>    numbers.append(int(n))
</snippet></ROW><ROW><id>13705940</id><snippet>numbers = []
while True:
    n = input("(Enter a empty string to quit) Enter a number: ")
    if n == "": break
    numbers.append(n) # or int(n)
print ("The list is", numbers)
</snippet></ROW><ROW><id>13706115</id><snippet>random.shuffle</snippet></ROW><ROW><id>13706115</id><snippet>random.shuffle(b, lambda:random.gauss(0.5,0.1))
</snippet></ROW><ROW><id>13706115</id><snippet>random.shuffle(b, lambda: max(0.0, min(1.0, random.gauss(0.5,0.1))))
</snippet></ROW><ROW><id>13706115</id><snippet>random.shuffle</snippet></ROW><ROW><id>13706389</id><snippet>re.sub</snippet></ROW><ROW><id>13706389</id><snippet>re.sub(r'#\[(.+?)\]', lambda m:'&lt;a style="color:%s"&gt;' % colors[m.group(1)], s)
</snippet></ROW><ROW><id>13706430</id><snippet>stderr</snippet></ROW><ROW><id>13706437</id><snippet>class SliceMaker(object):
  def __getitem__(self, item):
    return item

make_slice = SliceMaker()

print make_slice[3]
print make_slice[0:]
print make_slice[:-1]
print make_slice[1:10:2,...]
</snippet></ROW><ROW><id>13706437</id><snippet>make_slice[]</snippet></ROW><ROW><id>13706437</id><snippet>slice</snippet></ROW><ROW><id>13706539</id><snippet>wget http://ftp.se.debian.org/debian/pool/main/p/python2.7/python2.7-minimal_2.7.3~rc2-2.1_amd64.deb
ar -x python2.7-minimal_2.7.3~rc2-2.1_amd64.deb
tar -xzf data.tar.gz
sudo cp usr/include/python2.7/pyconfig.h /usr/include/python2.7/pyconfig.h
</snippet></ROW><ROW><id>13706933</id><snippet>while guess != code and guesses &lt; 10:
        guess = raw_input("BZZZZEDDD! - try again?")
        guesses += 1
        guess = ''
</snippet></ROW><ROW><id>13706984</id><snippet>send_from_directory</snippet></ROW><ROW><id>13706984</id><snippet>@app.route('/pic/&lt;path:filename&gt;')
def send_pic(filename):
    return send_from_directory('/path/to/static/files', filename)
</snippet></ROW><ROW><id>13707531</id><snippet>Counter</snippet></ROW><ROW><id>13707531</id><snippet>collections</snippet></ROW><ROW><id>13707531</id><snippet>&gt;&gt;&gt; x = ['a','a','b','c','c','d']

&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; count = Counter(x)
&gt;&gt;&gt; count
Counter({'a': 2, 'c': 2, 'b': 1, 'd': 1})
&gt;&gt;&gt; count.most_common()
[('a', 2), ('c', 2), ('b', 1), ('d', 1)]
</snippet></ROW><ROW><id>13707531</id><snippet>&gt;&gt;&gt; count.most_common()[0]
('a', 2)
&gt;&gt;&gt; count.most_common()[1]
('c', 2)
</snippet></ROW><ROW><id>13707531</id><snippet>most_common()</snippet></ROW><ROW><id>13707531</id><snippet>most-common</snippet></ROW><ROW><id>13707531</id><snippet>&gt;&gt;&gt; count.most_common(2)
[('a', 2), ('c', 2)]
</snippet></ROW><ROW><id>13707531</id><snippet>max</snippet></ROW><ROW><id>13707531</id><snippet>most_common()</snippet></ROW><ROW><id>13707531</id><snippet>&gt;&gt;&gt; freq_list = count.values()
&gt;&gt;&gt; freq_list
[2, 2, 1, 1]
&gt;&gt;&gt; max_cnt = max(freq_list)
&gt;&gt;&gt; total = freq_list.count(max_cnt)

&gt;&gt;&gt; most_common = count.most_common(total)
[('a', 2), ('c', 2)]

&gt;&gt;&gt; [elem[0] for elem in most_common]
['a', 'c']
</snippet></ROW><ROW><id>13707774</id><snippet>import httplib2
if __name__ == "__main__":
    h = httplib2.Http(".cache", disable_ssl_certificate_validation=True)
    resp, content = h.request("https://site/whose/certificate/is/bad/", "GET")
</snippet></ROW><ROW><id>13707774</id><snippet>disable_ssl_certificate_validation=True</snippet></ROW><ROW><id>13708071</id><snippet>line</snippet></ROW><ROW><id>13708071</id><snippet>uploaded</snippet></ROW><ROW><id>13708071</id><snippet>line_date</snippet></ROW><ROW><id>13708071</id><snippet>CREATE TABLE data_lines (
    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    line VARCHAR(200),
    uploaded INT,
    line_date DATETIME
);
</snippet></ROW><ROW><id>13708071</id><snippet>&gt;&gt;&gt; line = "1,2 3\t4"
&gt;&gt;&gt; print line.replace(',', ' ').split()
['1', '2', '3', '4']
</snippet></ROW><ROW><id>13708487</id><snippet>i</snippet></ROW><ROW><id>13708487</id><snippet>lst[0:lst.index(i)]</snippet></ROW><ROW><id>13708487</id><snippet>lst[0:lst.index(i)]</snippet></ROW><ROW><id>13708487</id><snippet>[0, 1, 2, 4, 3]</snippet></ROW><ROW><id>13708487</id><snippet>0</snippet></ROW><ROW><id>13708487</id><snippet>3</snippet></ROW><ROW><id>13708586</id><snippet>from itertools import combinations

def subsets(s, placeholder = None):
    """
    Generate the subsets of `s` in order of size.
    Use `placeholder` for missing elements (default: None).
    """
    s = list(s)
    n = len(s)
    r = range(n)
    for i in range(n + 1):
        for c in combinations(r, i):
            result = [placeholder] * n
            for j in c:
                result[j] = s[j]
            yield result

&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(list(subsets([23, 'M', 'Delhi', 'Muslim'])))
[[None, None, None, None],
 [23, None, None, None],
 [None, 'M', None, None],
 [None, None, 'Delhi', None],
 [None, None, None, 'Muslim'],
 [23, 'M', None, None],
 [23, None, 'Delhi', None],
 [23, None, None, 'Muslim'],
 [None, 'M', 'Delhi', None],
 [None, 'M', None, 'Muslim'],
 [None, None, 'Delhi', 'Muslim'],
 [23, 'M', 'Delhi', None],
 [23, 'M', None, 'Muslim'],
 [23, None, 'Delhi', 'Muslim'],
 [None, 'M', 'Delhi', 'Muslim'],
 [23, 'M', 'Delhi', 'Muslim']]
</snippet></ROW><ROW><id>13708714</id><snippet>fibonacci(number-1) + fibonacci(number-2)</snippet></ROW><ROW><id>13709305</id><snippet>try:
    from local_settings import *
except ImportError:
    sys.exit("FATAL: No local settings file found.")
</snippet></ROW><ROW><id>13709305</id><snippet>import settings

settings.INSTALLED_APPS += ('django_extensions',)
</snippet></ROW><ROW><id>13709339</id><snippet>files</snippet></ROW><ROW><id>13709339</id><snippet>root</snippet></ROW><ROW><id>13709339</id><snippet>os.path.join</snippet></ROW><ROW><id>13709339</id><snippet>for root, dir, files in os.walk(str(sys.argv[1])):
    for fp in files:
        f = open(os.path.join(root, fp), 'rb')
</snippet></ROW><ROW><id>13709424</id><snippet>print('Good job, ' + myName + '! You guessed my number ' + str(guessesTaken) + ' guesses!')
</snippet></ROW><ROW><id>13709683</id><snippet>(r'/browse/article/([a-zA-Z0-9_-]+)(?:/([0-9]*))?', ArticleHandler),
</snippet></ROW><ROW><id>13709846</id><snippet>apply</snippet></ROW><ROW><id>13709846</id><snippet>(declare-const x Real)
(declare-const y Real)

(assert (forall ((n Real)) (or (&lt; x n) (&lt; n y))))
(assert (= (&lt; x y) (&lt; x 100.0)))

(apply (then qe nnf) :print false :print-benchmark true)
</snippet></ROW><ROW><id>13709846</id><snippet>:print-model-converter true</snippet></ROW><ROW><id>13710156</id><snippet>/var/processing/incoming/job1/ IN_CLOSE_WRITE /usr/local/bin/job1.bin $@/$#
</snippet></ROW><ROW><id>13710203</id><snippet>JoinableQueue</snippet></ROW><ROW><id>13710203</id><snippet>try:
    queue_data = result_queue.get_nowait()
except Queue.Empty:
    break
</snippet></ROW><ROW><id>13710203</id><snippet>Queue.Empty</snippet></ROW><ROW><id>13710203</id><snippet>get_nowait()</snippet></ROW><ROW><id>13710203</id><snippet>try:
    queue_data = result_queue.get_nowait()
except Queue.Empty:
    if result_queue.qsize() &lt; 1:
        break
</snippet></ROW><ROW><id>13710490</id><snippet>import os
os.chdir('../dir')
</snippet></ROW><ROW><id>13710490</id><snippet>raw_input</snippet></ROW><ROW><id>13710490</id><snippet>os.path</snippet></ROW><ROW><id>13710649</id><snippet>strip()</snippet></ROW><ROW><id>13710649</id><snippet>lstrip()</snippet></ROW><ROW><id>13710649</id><snippet>rstrip()</snippet></ROW><ROW><id>13710649</id><snippet>col2 = i[1].strip()
</snippet></ROW><ROW><id>13710667</id><snippet>return x or "default"
</snippet></ROW><ROW><id>13710746</id><snippet>enumerate()</snippet></ROW><ROW><id>13710746</id><snippet>d = {...}
for i, bit in enumerate(d):
    print i, bit
</snippet></ROW><ROW><id>13710746</id><snippet>dict</snippet></ROW><ROW><id>13710746</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13710746</id><snippet>dict</snippet></ROW><ROW><id>13710756</id><snippet>&lt;a href="</snippet></ROW><ROW><id>13710756</id><snippet>" class="nextpostslink"&gt;</snippet></ROW><ROW><id>13710756</id><snippet>from bs4 import BeautifulSoup as BS
soup = BS(html)
print soup.find("a", "nextpostslink").attrs['href']
# returns u'http://cinemassacre.com/category/avgn/page/2/'
</snippet></ROW><ROW><id>13710839</id><snippet>__file__</snippet></ROW><ROW><id>13710839</id><snippet>import urllib
import sys

print urllib.__file__
print sys.path
</snippet></ROW><ROW><id>13710840</id><snippet>In [46]: 012
Out[46]: 10

In [47]: 0123
Out[47]: 83

In [48]: 0010
Out[48]: 8
</snippet></ROW><ROW><id>13710840</id><snippet>def sumOfDigits(n):
   return 0 if n == 0 else sumOfDigits(n // 10) + n % 10
</snippet></ROW><ROW><id>13711077</id><snippet>existing = p['d']['a']

db.ProductData.update({'_id':p['_id']},{'$set':{'d.a': existing+1}},upsert=False, multi=False)
</snippet></ROW><ROW><id>13711077</id><snippet>db.ProductData.update({'_id':p['_id']},{'$inc':{'d.a': 1}},upsert=False, multi=False)
</snippet></ROW><ROW><id>13711097</id><snippet>f = open(filename, 'a')
</snippet></ROW><ROW><id>13711097</id><snippet>'w'</snippet></ROW><ROW><id>13711231</id><snippet>self.children</snippet></ROW><ROW><id>13711231</id><snippet>def findObjectByName(self, name):
    if self.name == name:
        return self
    else:
        for child in self.children:
            match = child.findObjectByName(name)
            if match:
                return match
</snippet></ROW><ROW><id>13711231</id><snippet>getattr()</snippet></ROW><ROW><id>13711231</id><snippet>def findObject(self, attr, value):
    if getattr(self, attr) == value:
        return self
    else:
        for child in self.children:
            match = child.findObject(attr, value)
            if match:
                return match
</snippet></ROW><ROW><id>13711231</id><snippet>root.findObjectByName("Sub Child!")</snippet></ROW><ROW><id>13711231</id><snippet>root.findObject("name", "Sub Child!")</snippet></ROW><ROW><id>13711507</id><snippet>QLineEdit.paste</snippet></ROW><ROW><id>13711507</id><snippet>class LineEdit(QtGui.QLineEdit):
    def sizeHint(self):
        if some_condition:
            # do something funky
            return QtCore.QSize(42, 42)
        # otherwise default to the base-class method
        return QtGui.QLineEdit.sizeHint(self)
</snippet></ROW><ROW><id>13711507</id><snippet>QLinedit.paste()</snippet></ROW><ROW><id>13711537</id><snippet>self.response.out.write</snippet></ROW><ROW><id>13711537</id><snippet>"""
      &lt;form action="/sign?%s" method="post"&gt;
       &lt;div id="dataImput"
        &lt;div&gt;&lt;textarea name="content" rows="1" cols="10"&gt;&lt;/textarea&gt;&lt;/div&gt;
        &lt;div&gt;&lt;textarea name="content2" rows="1" cols="10"&gt;&lt;/textarea&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="submit" value="Sign Guestbook"&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;/form&gt;
      &lt;hr&gt;
      &lt;form&gt;Guestbook name: &lt;input value="%s" name="guestbook_name"&gt;
      &lt;input type="submit" value="switch"&gt;&lt;/form&gt;
    &lt;/body&gt;
  &lt;/html&gt;""" % (urllib.urlencode({'guestbook_name': guestbook_name}),
                      cgi.escape(guestbook_name))
</snippet></ROW><ROW><id>13711537</id><snippet>myhtml.html</snippet></ROW><ROW><id>13711537</id><snippet>%s</snippet></ROW><ROW><id>13711537</id><snippet>%s</snippet></ROW><ROW><id>13711537</id><snippet>{{ }}</snippet></ROW><ROW><id>13711537</id><snippet>"""
      &lt;form action="/sign?{{ guestbook_name }}" method="post"&gt;
       &lt;div id="dataImput"
        &lt;div&gt;&lt;textarea name="content" rows="1" cols="10"&gt;&lt;/textarea&gt;&lt;/div&gt;
        &lt;div&gt;&lt;textarea name="content2" rows="1" cols="10"&gt;&lt;/textarea&gt;&lt;/div&gt;
        &lt;div&gt;&lt;input type="submit" value="Sign Guestbook"&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;/form&gt;
      &lt;hr&gt;
      &lt;form&gt;Guestbook name: &lt;input value="{{ guestbook_name|escape }}" name="guestbook_name"&gt;
      &lt;input type="submit" value="switch"&gt;&lt;/form&gt;
    &lt;/body&gt;
  &lt;/html&gt;"""
</snippet></ROW><ROW><id>13711537</id><snippet>escape</snippet></ROW><ROW><id>13711537</id><snippet>|</snippet></ROW><ROW><id>13711537</id><snippet>guestbook_name</snippet></ROW><ROW><id>13711537</id><snippet>self.response.out.write(template.render('myhtml.html', {'guestbook_name': guestbook_name}))
</snippet></ROW><ROW><id>13711902</id><snippet>for i in range(len(array)):
   [row1, row2, row3] = np.loadtxt(list.list[i],unpack=True,skiprows=1)
</snippet></ROW><ROW><id>13711902</id><snippet>filelist=['file1','file2']
for file in filelist:
    [row1, row2, row3] = np.loadtxt(file,unpack=True,skiprows=1)
    #Do Stuff
</snippet></ROW><ROW><id>13711920</id><snippet>export SAGE_ROOT=&lt;dir where sage archive was extracted, e.g. /home/daniel/sage&gt;
sage
</snippet></ROW><ROW><id>13711975</id><snippet>db.stuff.ensureIndex( { "i.elements.timestamp" : 1 });
</snippet></ROW><ROW><id>13711984</id><snippet>QObject</snippet></ROW><ROW><id>13711984</id><snippet>trigger = QtCore.pyqtSignal(str)
def __init__(self):
    super(Logger,self).__init__()
def send(self, string):
    self.trigger.emit(string)
</snippet></ROW><ROW><id>13711992</id><snippet>conn=MySQLdb.connect(hostname, username, password, database, charset='utf8')
</snippet></ROW><ROW><id>13712056</id><snippet>python code.py</snippet></ROW><ROW><id>13712056</id><snippet>import web


web.config.debug = False  # turns off the reloader


class subappcls:
    def GET(self):
        return "This will also be shown fine"

sub_mappings = (
    "/subpath", subappcls
)

#subclass web app
subwebapp = web.application(sub_mappings, globals())


#mapped class
class mapped_cls:
    def GET(self):
        return "this mapped sub app will not be found"


#Here I add mappings:
subwebapp.add_mapping("/mapped_sub_path", mapped_cls)


class appcls:
    def GET(self):
        return "main app"


main_mappings = (
    "/subapp", subwebapp,
    "/app", appcls,
)

mainwebapp = web.application(main_mappings, globals())


class indexcls:
    def GET(self):
        return "this will be shown just fine"

mainwebapp.add_mapping("/another", indexcls)


if __name__ == "__main__":
    mainwebapp.run()
else:
    application = mainwebapp.wsgifunc()
</snippet></ROW><ROW><id>13712056</id><snippet>curl http://localhost:8080/subapp/mapped_sub_path
this mapped sub app will not be found
</snippet></ROW><ROW><id>13712257</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>13712257</id><snippet>a = dict.fromkeys(a, 0)
</snippet></ROW><ROW><id>13712269</id><snippet>hours</snippet></ROW><ROW><id>13712269</id><snippet>datetime</snippet></ROW><ROW><id>13712269</id><snippet>list1</snippet></ROW><ROW><id>13712269</id><snippet>import datetime

d = datetime.datetime.now()
delta = datetime.timedelta(hours=1)
dates = [d]
for j in range(20):
    dates.append(dates[-1] + delta)

date_list = dates
list1 = rand(len(dates))
figure()
ax = gca()
ax.plot(date_list,list1)
ax.xaxis.set_major_locator(
    matplotlib.dates.HourLocator()
)
ax.xaxis.set_major_formatter(
    matplotlib.dates.DateFormatter('%H')
)
</snippet></ROW><ROW><id>13712411</id><snippet>time.strptime</snippet></ROW><ROW><id>13712411</id><snippet>struct_time</snippet></ROW><ROW><id>13712411</id><snippet>time.mktime</snippet></ROW><ROW><id>13712411</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.mktime(time.strptime('02-12-2012', '%d-%m-%Y'))
1354424400.0
</snippet></ROW><ROW><id>13712484</id><snippet>getsize</snippet></ROW><ROW><id>13712484</id><snippet>sorted</snippet></ROW><ROW><id>13712484</id><snippet>os.path</snippet></ROW><ROW><id>13712484</id><snippet>sorted_file = sorted(sort_file, key=os.path.getsize)
</snippet></ROW><ROW><id>13712484</id><snippet>from os.path import join, getsize
</snippet></ROW><ROW><id>13712484</id><snippet>from os.path import *
</snippet></ROW><ROW><id>13712484</id><snippet>sorted_file = sorted(sort_file, key=getsize)
</snippet></ROW><ROW><id>13712556</id><snippet>with open(yourfile) as f:
    rows = [l.split() for l in f]

names, firstnums, secondnums = zip(*rows)
</snippet></ROW><ROW><id>13712556</id><snippet>zip(*iterable)</snippet></ROW><ROW><id>13712932</id><snippet>self</snippet></ROW><ROW><id>13712932</id><snippet>self</snippet></ROW><ROW><id>13712932</id><snippet>&gt;&gt;&gt; ret, ret.__call__.__self__
(&lt;function ret at 0x10f17a050&gt;, &lt;function ret at 0x10f17a050&gt;)
&gt;&gt;&gt; ret.__call__, ret.__call__.__call__.__self__
(&lt;method-wrapper '__call__' of function object at 0x10f17a050&gt;, &lt;method-wrapper '__call__' of function object at 0x10f17a050&gt;)
</snippet></ROW><ROW><id>13712932</id><snippet>__self__</snippet></ROW><ROW><id>13712932</id><snippet>&gt;&gt;&gt; class Foo: 
...     def bar(self): return
... 
&gt;&gt;&gt; Foo().bar
&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x10f1798d0&gt;&gt;
&gt;&gt;&gt; Foo().bar, Foo().bar.__self__
(&lt;bound method Foo.bar of &lt;__main__.Foo object at 0x10f179710&gt;&gt;, &lt;__main__.Foo object at 0x10f179850&gt;)
</snippet></ROW><ROW><id>13712932</id><snippet>self</snippet></ROW><ROW><id>13713014</id><snippet>\n</snippet></ROW><ROW><id>13713014</id><snippet>\uXXXX</snippet></ROW><ROW><id>13713014</id><snippet>&gt;&gt;&gt; print x.decode('utf-16').decode('unicode_escape')
"WantedCropped/13.jpg"  " 

蘑,-'此四郡咸瀉] 郡〝"同樹之吟[』赦〝連仙〝如五嶽〝Z蟲
</snippet></ROW><ROW><id>13713014</id><snippet>&gt;&gt;&gt; y = x.decode('utf-16').decode('unicode_escape')
&gt;&gt;&gt; z = y.encode('utf-8')
</snippet></ROW><ROW><id>13713133</id><snippet>settings</snippet></ROW><ROW><id>13713133</id><snippet>warn_only</snippet></ROW><ROW><id>13713133</id><snippet>from fabric.context_managers import settings

with settings(warn_only=True):
    # some command we are all right with having fail
</snippet></ROW><ROW><id>13713133</id><snippet>capture</snippet></ROW><ROW><id>13713133</id><snippet>local</snippet></ROW><ROW><id>13713133</id><snippet>True</snippet></ROW><ROW><id>13713133</id><snippet>if 'myremote' in local('git remote', capture=True):
    print 'Remote \'myremote\' already exists.'
else:
    local('git remote add myremote git@myremote.com:myrepo.git')
</snippet></ROW><ROW><id>13713192</id><snippet>contextlib.contextmanager</snippet></ROW><ROW><id>13713192</id><snippet>with</snippet></ROW><ROW><id>13713192</id><snippet>class SomeDerivedClass(SomeClass):
    @contextlib.contextmanager
    def on_connection(self, target_terminal, source_terminal):
        with super().on_connection(target_terminal, source_terminal):
            ...
            yield
            ...
</snippet></ROW><ROW><id>13713285</id><snippet> def get(self):
    id = self.request.get('id')
</snippet></ROW><ROW><id>13713285</id><snippet>/play?id=some_id
</snippet></ROW><ROW><id>13713624</id><snippet>awk</snippet></ROW><ROW><id>13713624</id><snippet>awk 'FNR==NR { a[$1]=$0; next } $1 in a { print a[$1] }' table list
</snippet></ROW><ROW><id>13713624</id><snippet>awk 'FNR==NR { a[$1]=$0; next } $1 in a { print a[$1] }' table list | column -t
</snippet></ROW><ROW><id>13713624</id><snippet>Slc40a1  NM_016917               chr1  -  45870140  45870141
Myo1b    NM_001161817,NM_010863  chr1  -  51860519  51860520
Col5a2   NM_007737               chr1  -  45447828  45447829
Obfc2a   NM_028696               chr1  -  51422944  51422945
</snippet></ROW><ROW><id>13713774</id><snippet>regexp = re.compile(r'^group/(?P&lt;group&gt;[^/]+)$')
</snippet></ROW><ROW><id>13713774</id><snippet>/user</snippet></ROW><ROW><id>13713774</id><snippet>regexp = re.compile(r'^group/(?P&lt;group&gt;[^/]+)/users$')
</snippet></ROW><ROW><id>13713774</id><snippet>regexp = re.compile(r'^group/(?P&lt;group&gt;[^/]+)/users/(?P&lt;user&gt;[^/]+)$')
</snippet></ROW><ROW><id>13713774</id><snippet>match = regexp.match(url) # "group/soccer players/users/123"
if match:
    group = match.group("group") # "soccer players"
    user = match.group("user") # "123"
</snippet></ROW><ROW><id>13713802</id><snippet>texts = []
for your_element in your_cycle:
    do something
    t = ax.text(your_text_params)
    texts.append(t)
</snippet></ROW><ROW><id>13713802</id><snippet>plt.draw()
window_bbox = [t.get_window_extent()  for t in texts]
data_bbox =   [ b.transformed(ax.transData.inverted()) for b in window_bbox ]
data_coords = [ b.extents for b in data_bbox ]
</snippet></ROW><ROW><id>13713802</id><snippet>max_height = [ e[-1] for e in data_coords ]
top = max(max_height)
ax.set_ylim(ymax=top*1.05)
</snippet></ROW><ROW><id>13713842</id><snippet>i</snippet></ROW><ROW><id>13713842</id><snippet>d</snippet></ROW><ROW><id>13713842</id><snippet>arr.take([i], axis=d).sum()</snippet></ROW><ROW><id>13713977</id><snippet>def fact(x):
    count = 1
    sumi = 1
    while count &lt;= x:
        sumi =  count * sumi
        count = count + 1

    return sumi
</snippet></ROW><ROW><id>13713977</id><snippet>return</snippet></ROW><ROW><id>13714275</id><snippet>*</snippet></ROW><ROW><id>13714275</id><snippet>YYYYMMDD</snippet></ROW><ROW><id>13714363</id><snippet>app.run(debug=True, port=33507)
</snippet></ROW><ROW><id>13714363</id><snippet>heroku config:add PORT=33507
</snippet></ROW><ROW><id>13714363</id><snippet>port = int(os.environ.get('PORT', 5000))
</snippet></ROW><ROW><id>13714363</id><snippet>PORT</snippet></ROW><ROW><id>13714363</id><snippet>port = int(os.environ.get('PORT', 33507))
</snippet></ROW><ROW><id>13714714</id><snippet>def list_n(n):
    if n &lt; 2:
       return False
    list = []
    for x in range(n):
       list.append(random.randrange(1,5))
    return list
</snippet></ROW><ROW><id>13714714</id><snippet>def list_n(n):
    if n &lt; 2:
       return False
    return [random.randrange(1,5) for x in range(n)]
</snippet></ROW><ROW><id>13714719</id><snippet>&gt;&gt;&gt; import socks
&gt;&gt;&gt; s = socks.socksocket()
&gt;&gt;&gt; s.setproxy(socks.PROXY_TYPE_SOCKS5,"socks.example.com")
&gt;&gt;&gt; s.connect(("www.example.com",80))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13714999</id><snippet>for key in crucial.keys():
    if key in dishes.keys():
        print dishes[key]
</snippet></ROW><ROW><id>13714999</id><snippet>for key in crucial:
    if key in dishes:
        print dishes[key]
</snippet></ROW><ROW><id>13715153</id><snippet>loadFinished</snippet></ROW><ROW><id>13715153</id><snippet>QWebView</snippet></ROW><ROW><id>13715153</id><snippet>loadFinished</snippet></ROW><ROW><id>13715153</id><snippet>loadFinished</snippet></ROW><ROW><id>13715153</id><snippet>self.setPage(MyBrowser())
self.frame = self.page().mainFrame()
self.frame.loadFinished.connect(self.grab_first_name)
</snippet></ROW><ROW><id>13715193</id><snippet>jrange = np.arange(self.max_j - j_start)
joffset = np.round(jrange * discriminant).astype(int)
i = np.arange(self.max_i)

for j in jrange:
    new_i = i + joffset[j]
    in_range = new_i &lt; self.max_i
    self.grid[new_i[in_range], j+j_start] = standard[i[in_range]]
</snippet></ROW><ROW><id>13715626</id><snippet>from itertools import chain

def condense(*lists):
    # remember original positions
    positions = {}
    for pos, item in enumerate(chain(*lists)):
        if item not in positions:
            positions[item] = pos

    # condense disregarding order
    sets = condense_sets(map(set, lists))

    # restore order
    result = [sorted(s, key=positions.get) for s in sets]
    return result if len(result) != 1 else result[0]

def condense_sets(sets):
    result = []
    for candidate in sets:
        for current in result:
            if candidate &amp; current:   # found overlap
                current |= candidate  # combine (merge sets)

                # new items from candidate may create an overlap
                # between current set and the remaining result sets
                result = condense_sets(result) # merge such sets
                break
        else:  # no common elements found (or result is empty)
            result.append(candidate)
    return result
</snippet></ROW><ROW><id>13715626</id><snippet>&gt;&gt;&gt; condense([1,2,3], [10,5], [3,8,5])
[1, 2, 3, 10, 5, 8]
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [3,4]
&gt;&gt;&gt; i = [21,22]
&gt;&gt;&gt; c = [88,7,8]
&gt;&gt;&gt; e = [5,4]
&gt;&gt;&gt; d = [3, 50]
&gt;&gt;&gt; f = [8,9]
&gt;&gt;&gt; g=  [9,10]
&gt;&gt;&gt; h = [20,21]
&gt;&gt;&gt; condense(*[a,b,c,i,e,d,f,g,h,a,c,i]*1000)
[[1, 2, 3, 4, 5, 50], [88, 7, 8, 9, 10], [21, 22, 20]]
&gt;&gt;&gt; condense([1], [2, 3, 2])
[[1], [2, 3]]
</snippet></ROW><ROW><id>13715626</id><snippet>condense_*()</snippet></ROW><ROW><id>13715626</id><snippet>lst_OP</snippet></ROW><ROW><id>13715626</id><snippet>lst_BK</snippet></ROW><ROW><id>13715626</id><snippet>name                       time ratio comment
condense_hynekcer     5.79 msec  1.00 lst_OP
condense_hynekcer2     7.4 msec  1.28 lst_OP
condense_pillmuncher2 11.5 msec  1.99 lst_OP
condense_blckknght    16.8 msec  2.91 lst_OP
condense_jfs            26 msec  4.49 lst_OP
condense_BK           30.5 msec  5.28 lst_OP
condense_blckknght2   30.9 msec  5.34 lst_OP
condense_blckknght3   32.5 msec  5.62 lst_OP


name                       time  ratio comment
condense_blckknght     964 usec   1.00 lst_BK
condense_blckknght2   1.41 msec   1.47 lst_BK
condense_blckknght3   1.46 msec   1.51 lst_BK
condense_hynekcer2    1.95 msec   2.03 lst_BK
condense_pillmuncher2  2.1 msec   2.18 lst_BK
condense_hynekcer     2.12 msec   2.20 lst_BK
condense_BK           3.39 msec   3.52 lst_BK
condense_jfs           544 msec 563.66 lst_BK


name                       time ratio comment
condense_hynekcer     6.86 msec  1.00 lst_rnd
condense_jfs          16.8 msec  2.44 lst_rnd
condense_blckknght    28.6 msec  4.16 lst_rnd
condense_blckknght2   56.1 msec  8.18 lst_rnd
condense_blckknght3   56.3 msec  8.21 lst_rnd
condense_BK           70.2 msec 10.23 lst_rnd
condense_pillmuncher2  324 msec 47.22 lst_rnd
condense_hynekcer2     334 msec 48.61 lst_rnd
</snippet></ROW><ROW><id>13715626</id><snippet>measure-performance-condense-lists.py</snippet></ROW><ROW><id>13715640</id><snippet>data = []
for row in csv.reader(open('you_file.csv', 'rb'), delimiter=',')
    data.append(row)
</snippet></ROW><ROW><id>13715711</id><snippet>hats(c = 'something')
</snippet></ROW><ROW><id>13715711</id><snippet>a</snippet></ROW><ROW><id>13715711</id><snippet>b</snippet></ROW><ROW><id>13715838</id><snippet>connection.commit()</snippet></ROW><ROW><id>13715848</id><snippet>self.queue.get()</snippet></ROW><ROW><id>13715848</id><snippet>urlopen</snippet></ROW><ROW><id>13715848</id><snippet>read</snippet></ROW><ROW><id>13715925</id><snippet>def conditional(decorator):

    def conditional_decorator(fn):
        dec = decorator(fn)
        def wrapper(self, *args, **kw):
             if self.read_only:
                 return dec(self, *args, **kw)
             return fn(self, *args, **kw)
        return wrapper

    return conditional_decorator
</snippet></ROW><ROW><id>13715925</id><snippet>@conditional(cache_region('long_term'))
def get(self, arg):
    return arg + 1
</snippet></ROW><ROW><id>13715931</id><snippet>self.image = pygame.image.load(file)
</snippet></ROW><ROW><id>13715931</id><snippet>self.rect = self.image.get_rect()
</snippet></ROW><ROW><id>13715936</id><snippet>    import mechanize

    url = r'http://www.cpso.on.ca/docsearch/'
    request = mechanize.Request(url)
    response = mechanize.urlopen(request)
    forms = mechanize.ParseResponse(response, backwards_compat=False)
    response.close()

    form = forms[0]

    form['ctl00$ContentPlaceHolder1$MainContentControl1$ctl00$txtLastName']='Smith'
    form['ctl00$ContentPlaceHolder1$MainContentControl1$ctl00$txtPostalCode']='K1H'

    print mechanize.urlopen(form.click()).read()
</snippet></ROW><ROW><id>13716063</id><snippet>mysqlconn.insert_id()
</snippet></ROW><ROW><id>13716063</id><snippet>cursor.lastrowid
</snippet></ROW><ROW><id>13716170</id><snippet>def returnPegs(guess, answer):
    guesses = guess.split()
    answers = answer.split()

    pegs = []

    for answer, guess in zip(answers, guesses):
        if answer == guess:
            pegs.append('B')
        elif guess in answers:
            pegs.append('W')

    return ''.join(pegs)
</snippet></ROW><ROW><id>13716170</id><snippet>zip()</snippet></ROW><ROW><id>13716170</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; b = [5, 6, 7, 8]
&gt;&gt;&gt; zip(a, b)
[(1, 5), (2, 6), (3, 7), (4, 8)]
</snippet></ROW><ROW><id>13716220</id><snippet>from pykml import parser

root = parser.fromstring(open('BatchGeo.kml', 'r').read())
print root.Document.Placemark.Point.coordinates
</snippet></ROW><ROW><id>13716295</id><snippet>def similarity(alist):
  position = 0
  while position &lt; len(alist):
    item = alist[position]
    position += 1
    # code here that modifies alist
</snippet></ROW><ROW><id>13716295</id><snippet>True</snippet></ROW><ROW><id>13716295</id><snippet>False</snippet></ROW><ROW><id>13716295</id><snippet>for idx, item in enumerate(alist):
  # code here, where items are actual list entries, and 
  # idx is the 0-based index of the item in the list.
</snippet></ROW><ROW><id>13716295</id><snippet>idx</snippet></ROW><ROW><id>13716410</id><snippet>property()</snippet></ROW><ROW><id>13716410</id><snippet>class MetaFoo(type):
    _ro = "RO"
    _rw = "RW"

    def _get_ro(self):
        return self._ro
    def _get_rw(self):
        return self._rw
    def _set_ro(self, value):
        raise AttributeError("class 'Foo' attribute 'ro' is not writable!")
    def _set_rw(self, value):
        self._rw = value
    ro = property(_get_ro, _set_ro)
    rw = property(_get_rw, _set_rw)


class Foo(object):
    __metaclass__=MetaFoo


assert Foo.rw == "RW"
Foo.rw = 'NEW'
assert Foo.rw == "NEW"

assert Foo.ro == "RO"

try:
    Foo.ro = 'X'
except Exception as e:
    assert str(e) == "class 'Foo' attribute 'ro' is not writable!", str(e)
    assert type(e) == AttributeError
</snippet></ROW><ROW><id>13716520</id><snippet>message Message {
    optional uint64 utc_time = 1;
    required uint64 token = 2;
    optional string content = 3;
}
</snippet></ROW><ROW><id>13716520</id><snippet>#include &lt;Message.pb.h&gt;

Message msg;
msg.set_token(1);
msg.set_content("Hello world");
</snippet></ROW><ROW><id>13716520</id><snippet>std::string serialized = msg.SerializeAsString();
zmq::message_t reply(serialized.size());
memcpy(reply.data(), serialized.data(), serialized.size());
zmq_socket.send(reply);
</snippet></ROW><ROW><id>13716520</id><snippet>zmq::message_t request;
zmq_socket.recv(&amp;request); // blocking
Message recv_msg;
recv_msg.ParseFromArray(request.data(), request.size());
</snippet></ROW><ROW><id>13716633</id><snippet>from itertools import cycle

values = [10,0,0,14,14,123,235,0,0,0,0,0,12,12,1235,23,234,15,15,23,136,34,34,37,45]
splits = cycle([2,3])
bins = []
count = 0

while count &lt; len(values):
    splitby = splits.next()
    bins.append(values[count:count+splitby])
    count += splitby

print bins
</snippet></ROW><ROW><id>13716633</id><snippet>values = [10,0,0,14,14,123,235,0,0,0,0,0,12,12,1235,23,234,15,15,23,136,34,34,37,45]
number_bins = 10
bins_lower = int(floor(len(values) / float(number_bins)))
bins_upper = int(ceil(len(values) / float(number_bins)))

splits = cycle([bins_lower, bins_upper])
bins = []
count = 0

while count &lt; len(values):
    splitby = splits.next()
    bins.append(values[count:count+splitby])
    count += splitby

print bins
</snippet></ROW><ROW><id>13716633</id><snippet>splits</snippet></ROW><ROW><id>13716633</id><snippet>from itertools import cycle, islice
from math import floor, ceil

values = [10,0,0,14,14,123,235,0,0,0,0,0,12,12,1235,23,234,15,15,23,136,34,34,37,45]
number_bins = 10
bins_lower = int(floor(len(values) / float(number_bins)))
bins_upper = int(ceil(len(values) / float(number_bins)))

splits = cycle([bins_lower, bins_upper])

it = iter(values)
bins = [list(islice(it,next(splits))) for _ in range(10)] 
print bins
</snippet></ROW><ROW><id>13716644</id><snippet>send()</snippet></ROW><ROW><id>13716644</id><snippet>None</snippet></ROW><ROW><id>13716644</id><snippet>yield</snippet></ROW><ROW><id>13716644</id><snippet>g = f()

try:
    g.send(None)
    g.send('x')
    g.send('y')
except StopIteration:
    print 'Done'
</snippet></ROW><ROW><id>13716733</id><snippet>left</snippet></ROW><ROW><id>13716733</id><snippet>Guy class</snippet></ROW><ROW><id>13716733</id><snippet>move</snippet></ROW><ROW><id>13716733</id><snippet>class</snippet></ROW><ROW><id>13716733</id><snippet>def move():
    def left():
</snippet></ROW><ROW><id>13716733</id><snippet>left()</snippet></ROW><ROW><id>13716733</id><snippet>move</snippet></ROW><ROW><id>13716733</id><snippet>move</snippet></ROW><ROW><id>13716733</id><snippet>nested class</snippet></ROW><ROW><id>13716733</id><snippet>move</snippet></ROW><ROW><id>13716733</id><snippet>class</snippet></ROW><ROW><id>13716810</id><snippet>csv</snippet></ROW><ROW><id>13716810</id><snippet>import csv
import re
import sys

csvdictreader = csv.DictReader(sys.stdin, delimiter=',')
csvdictwriter = csv.DictWriter(sys.stdout, fieldnames=csvdictreader.fieldnames, delimiter=',')
csvdictwriter.writeheader()
targets = [name for name in csvdictreader.fieldnames if name.startswith('HLA-')]

for rowfields in csvdictreader:
    keep = True
    for field in targets:
        value = rowfields[field]
        if re.match(r'^DQB1\*\d\d$', value): # gene resolution too low?
            keep = False
            break # quit processing target fields
        else: # reduce gene resolution if too high
              # by only keeping first two alles if three are present
            rowfields[field] = re.sub(r'^DQB1\*(\d\d):(\d\d):(\d\d)$',
                                      r'DQB1*\1:\2', value)
    if keep:
        csvdictwriter.writerow(rowfields)
</snippet></ROW><ROW><id>13717435</id><snippet>myfile.name</snippet></ROW><ROW><id>13717435</id><snippet>tempfile</snippet></ROW><ROW><id>13717435</id><snippet>close()</snippet></ROW><ROW><id>13717435</id><snippet> tempfile.TemporaryFile([mode='w+b'[, bufsize=-1[, suffix=''[, 
    prefix='tmp'[, dir=None]]]]])
</snippet></ROW><ROW><id>13717585</id><snippet>f</snippet></ROW><ROW><id>13717585</id><snippet>f</snippet></ROW><ROW><id>13717585</id><snippet>def f(): pass

"foo"
</snippet></ROW><ROW><id>13717585</id><snippet>&gt;&gt;&gt; def f(): print("Foo!")
... 
&gt;&gt;&gt; f()
Foo!
&gt;&gt;&gt; f
&lt;function f at 0x10ebe9830&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13717700</id><snippet>dtype=str</snippet></ROW><ROW><id>13717700</id><snippet>my_array.dtype</snippet></ROW><ROW><id>13717700</id><snippet>my_array = numpy.empty([1, 2], dtype="S10")
</snippet></ROW><ROW><id>13717755</id><snippet>apt-get install python-apt
</snippet></ROW><ROW><id>13717778</id><snippet>import re

matcher = re.search('(\d+)', 'TY-4582KK')
print matcher.group(1)
</snippet></ROW><ROW><id>13717917</id><snippet>if os.path.isfile(object.pdf_file.url):
</snippet></ROW><ROW><id>13717917</id><snippet>if object.pdf_file:
    object.url = object.pdf_file.url
else:
    object.url = ""
</snippet></ROW><ROW><id>13718229</id><snippet>#!/usr/local/bin/python
# coding: UTF-8
import os, sys
from nltk.tokenize import word_tokenize # Tokenizer

if __name__ == "__main__":
    # If you want to read from a file instead of passing data
    #text = open(sys.argv[1]).read()

    # read the first argument passed to script
    text = sys.argv[1]

    tokens = word_tokenize(text)
    print tokens
</snippet></ROW><ROW><id>13718229</id><snippet>import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.File;

public class pythonfromjava{
    public static void main(String argv[]) {
        try{
            // for tilda expansion
            //if (filepath.startsWith("~" + File.separator)) {
                //filepath = System.getProperty("user.home") + filepath.substring(1);
            //}

            //ProcessBuilder builder = new ProcessBuilder("python", "-c", "import sys; import nltk; print \"whatever\"");
            ProcessBuilder builder = new ProcessBuilder("python", "testing.py", "four scores and seven years ago");
            builder.redirectErrorStream(true);
            Process p = builder.start();
            InputStream stdout = p.getInputStream();
            BufferedReader reader = new BufferedReader (new InputStreamReader(stdout));

            String line;
            while ((line = reader.readLine ()) != null) {
                System.out.println ("Stdout: " + line);
            }
        } catch (Exception e){
            e.printStackTrace();
        }
    }
}
</snippet></ROW><ROW><id>13718495</id><snippet>strptime</snippet></ROW><ROW><id>13718495</id><snippet>&gt;&gt;&gt; time.strptime('2012dec04','%Y%b%d')
time.struct_time(tm_year=2012, tm_mon=12, tm_mday=4, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=339, tm_isdst=-1)
&gt;&gt;&gt; time.strptime('2012/dec/04/test22/dec04','%Y%b%d')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_strptime.py", line 454, in _strptime_time
    return _strptime(data_string, format)[0]
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_strptime.py", line 325, in _strptime
    (data_string, format))
ValueError: time data '2012/dec/04/test22/dec04' does not match format '%Y%b%d'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13718495</id><snippet># yours
url(r'^weblog/(?P&lt;year&gt;\d{4}/(?P&lt;month&gt;\w{3})/(P&lt;day&gt;\d{2})/(P&lt;slug&gt;[-\w]+)/$)',"blogCategory.views.entry_detail"),

# change to
url(r'^weblog/(?P&lt;year&gt;\d{4})/(?P&lt;month&gt;\w{3})/(P&lt;day&gt;\d{2})/(P&lt;slug&gt;[-\w]+)/$',"blogCategory.views.entry_detail"),
</snippet></ROW><ROW><id>13718495</id><snippet>$</snippet></ROW><ROW><id>13718495</id><snippet>/</snippet></ROW><ROW><id>13718541</id><snippet>    allData.append([fil]+[wb.sheets()[0].name]+[wb.sheets()[0].row_values(row) for row in range(1,wb.sheets()[0].nrows)])
</snippet></ROW><ROW><id>13718541</id><snippet>rdir=r"d:\temp"
import xlrd,spss
fils=[fil for fil in os.listdir(rdir) if fil.endswith(".xls")]
allData=[]
for cnt,fil in enumerate(fils):
    wb=xlrd.open_workbook(os.path.join(rdir,fil))
    s1 = wb.sheets()[0]
    allData.append([fil]+[s1.name]+[s1.row_values(row) for row in range(1,s1.nrows)])
</snippet></ROW><ROW><id>13718541</id><snippet>rdir=r"d:\temp"
import xlrd,spss
fils=[fil for fil in os.listdir(rdir) if fil.endswith(".xls")]
allData=[]
for cnt,fil in enumerate(fils):
    wb=xlrd.open_workbook(os.path.join(rdir,fil))
    for sheet in wb.sheets():
        allData.append([fil]+[sheet.name]+[sheet.row_values(row) for row in range(1,sheet.nrows)])
</snippet></ROW><ROW><id>13718790</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; level1dict = { '1':[1,3], '2':2 }
&gt;&gt;&gt; level2dict = { '1':4, '3':[5,9], '2':10 }
&gt;&gt;&gt; level3dict = { '1':[6,8,11], '4':12, '2':13, '3':[14,15], '5':16, '9':17, '10':[18,19,20]}
&gt;&gt;&gt; G=nx.Graph()
&gt;&gt;&gt; for lvl in level:
    for key, value in lvl.items():
        key = int(key)
        try:
            for node in value:
                G.add_edge(key, node)
        except TypeError:
            G.add_edge(key, value)


&gt;&gt;&gt; for sg in nx.connected_component_subgraphs(G):
    print sg.nodes()


[1, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 17]
[2, 10, 13, 18, 19, 20]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13718790</id><snippet>&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; nx.draw(G)
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>13718936</id><snippet>- models
|- __init__.py
|- some_model.py
|- some_other_model.py
|- ...
</snippet></ROW><ROW><id>13718936</id><snippet>__init__.py</snippet></ROW><ROW><id>13718936</id><snippet>__init__.py</snippet></ROW><ROW><id>13718936</id><snippet>from some_model import SomeModel
from some_other_model import SomeOtherModel

__all__ = [ 
    'SomeModel',
    'SomeOtherModel',
]
</snippet></ROW><ROW><id>13718936</id><snippet>class SomeModel(models.Model):
    class Meta(object):
        app_label = 'yourapplabel'
        db_table = 'yourapplabel_somemodel'
</snippet></ROW><ROW><id>13719125</id><snippet>root:
  configuration:
    field_a: "aaaa"
    field_b: "bbbb"
  child:
    configuration:
        field_a: "aaa"
        field_b: "bbb"
</snippet></ROW><ROW><id>13719125</id><snippet>import yaml
import json

s = "yamlstr"  # your yaml str
data = yaml.load(s)
jsondata = json.dumps(data)
print jsondata
</snippet></ROW><ROW><id>13719125</id><snippet>root:
  - configuration:
    field_a: "aaaa"
    field_b: "bbbb"
  - child:
    - configuration:
        field_a: "aaa1"
        field_b: "bbb1"
  - child:
    - configuration:
        field_a: "aaa2"
        field_b: "bbb2"
</snippet></ROW><ROW><id>13719125</id><snippet>{'root': [{'configuration': None, 'field_b': 'bbbb', 'field_a': 'aaaa'}, {'child': [{'configuration': {'field_b': 'bbb1', 'field_a': 'aaa1'}}]}, {'child': [{'configuration': {'field_b': 'bbb2', 'field_a': 'aaa2'}}]}]}
</snippet></ROW><ROW><id>13719417</id><snippet>--no-site-packages</snippet></ROW><ROW><id>13719417</id><snippet>--system-site-packages</snippet></ROW><ROW><id>13719417</id><snippet>sys.path</snippet></ROW><ROW><id>13719417</id><snippet>site-packages</snippet></ROW><ROW><id>13719417</id><snippet>ln -s /usr/lib/python2.7/site-packages/lxml ./env/lib/python2.7/site-packages
</snippet></ROW><ROW><id>13719417</id><snippet>ln -s $(python -c 'import lxml, os.path; print(os.path.dirname(lxml.__file__)') ./env/lib/python2.7/site-packages
</snippet></ROW><ROW><id>13719491</id><snippet>myOut= cmds.outlinerPanel()
cmds.control(myOut, edit=True, parent="outlinerLayout")
</snippet></ROW><ROW><id>13719596</id><snippet>d = {}
l = [['0', '10'], ['0', '11'], ['0', '12'], ['1', '10'], ['1', '11']]
for p in l:
    if p[0] in d:
        d[p[0]].append(p[1])
    else:
        d[p[0]] = [p[1]]

&gt;&gt;&gt; d
{'1': ['10', '11'], '0': ['10', '11', '12']}
</snippet></ROW><ROW><id>13719596</id><snippet>from collections import defaultdict

d = defaultdict(list)
l = [['0', '10'], ['0', '11'], ['0', '12'], ['1', '10'], ['1', '11']]
for p in l:
    d[p[0]].append(p[1])
</snippet></ROW><ROW><id>13719596</id><snippet>&gt;&gt;&gt; dd = {key: [i[1] for i in l if i[0] == key] for (key, value) in l}
&gt;&gt;&gt; dd
{'1': ['10', '11'], '0': ['10', '11', '12']}
</snippet></ROW><ROW><id>13720266</id><snippet>class Defender(object):

    def spy_on_attacker(self, attacker):
        guns = attacker.guns
        weight = attacker.weight
</snippet></ROW><ROW><id>13720352</id><snippet>__requires__</snippet></ROW><ROW><id>13720352</id><snippet>setuptools</snippet></ROW><ROW><id>13720352</id><snippet>setuptools</snippet></ROW><ROW><id>13720352</id><snippet>flower</snippet></ROW><ROW><id>13720352</id><snippet>flower</snippet></ROW><ROW><id>13720352</id><snippet>setup.py</snippet></ROW><ROW><id>13720352</id><snippet>pkg_resources</snippet></ROW><ROW><id>13720352</id><snippet>__requires__</snippet></ROW><ROW><id>13720352</id><snippet>load_entry_point</snippet></ROW><ROW><id>13720352</id><snippet>pkg_resources</snippet></ROW><ROW><id>13720538</id><snippet>print re.sub(r'([a-zA-Z0-9\[\]\$\' ].*{).*(}[a-zA-Z\.,; ].*)',r'\1replace-string\2',line)

print re.sub(r'(.*{).*(}.*)', r'\1replace-string\2', line)
</snippet></ROW><ROW><id>13720538</id><snippet>import re
def repl(matchobj):
    global counter
    counter = counter+1
    if counter == 2: 
        return '{replace-string}' 
    else: 
        return matchobj.group(0)

counter = 0
line = "$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string} bercksichtigt'";
print re.sub(r'{.*?}',repl,line)
</snippet></ROW><ROW><id>13720538</id><snippet>import re
def repl(matchobj):
    global counter
    replacementFor = {'{search-string1}': '{replace-string1}',
                      '{search-string2}': '{replace-string2}',
                      '{search-string3}': '{replace-string3}'}

    counter = counter+1
    if counter == 2: 
        return replacementFor.get(matchobj.group(0), matchobj.group(0))
    else: 
        return matchobj.group(0)

counter = 0
line = "$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string1} bercksichtigt'";
print re.sub(r'{.*?}',repl,line)

counter = 0
line = "$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string3} bercksichtigt'";
print re.sub(r'{.*?}',repl,line)
</snippet></ROW><ROW><id>13720656</id><snippet>python-dev</snippet></ROW><ROW><id>13720656</id><snippet>apt-get install python-dev
</snippet></ROW><ROW><id>13720656</id><snippet>apt-get install python-devel
or
apt-get install python2.7-dev
</snippet></ROW><ROW><id>13720747</id><snippet>  def __init__(self):

    # Button Hacker
    button_rc = """
    pixmap_path "/var/tmp"

    ### Background &gt; Image 
    style "window" {    
      bg_pixmap[NORMAL] = "1.png"
    }

    ### Buttons 1
    style "deButton" {
      xthickness = 60
      ythickness = 30
      fg[PRELIGHT] = { 0, 1.0, 1.0 }
      bg[PRELIGHT] = { 0, 0, 1.0 }
      bg[ACTIVE] = { 1.0, 0, 0 }
      fg[ACTIVE] = { 0, 1.0, 0 }
      bg[NORMAL] = { 1.0, 1.0, 0 }
      fg[NORMAL] = { .99, 0, .99 }
      bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
      fg[INSENSITIVE] = { 1.0, 0, 1.0 }

      engine "pixmap" {
          image {
              function = BOX
              file     = "de.png"
              stretch  = TRUE
          }
      }
      bg_pixmap[NORMAL] = "de.png"
    }

    style "nlButton" {
      xthickness = 60
      ythickness = 30
      fg[PRELIGHT] = { 0, 1.0, 1.0 }
      bg[PRELIGHT] = { 0, 0, 1.0 }
      bg[ACTIVE] = { 1.0, 0, 0 }
      fg[ACTIVE] = { 0, 1.0, 0 }
      bg[NORMAL] = { 1.0, 1.0, 0 }
      fg[NORMAL] = { .99, 0, .99 }
      bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
      fg[INSENSITIVE] = { 1.0, 0, 1.0 }

      engine "pixmap" {
          image {
              function = BOX
              file     = "nl.png"
              stretch  = TRUE
          }
      }
      bg_pixmap[NORMAL] = "nl.png"
    }

    style "enButton" {
      xthickness = 60
      ythickness = 30
      fg[PRELIGHT] = { 0, 1.0, 1.0 }
      bg[PRELIGHT] = { 0, 0, 1.0 }
      bg[ACTIVE] = { 1.0, 0, 0 }
      fg[ACTIVE] = { 0, 1.0, 0 }
      bg[NORMAL] = { 1.0, 1.0, 0 }
      fg[NORMAL] = { .99, 0, .99 }
      bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
      fg[INSENSITIVE] = { 1.0, 0, 1.0 }

      engine "pixmap" {
          image {
              function = BOX
              file     = "en.png"
              stretch  = TRUE
          }
      }
      bg_pixmap[NORMAL] = "en.png"
    }


    style "callButton" {

      xthickness = 58
      ythickness = 48
      fg[PRELIGHT] = { 0, 1.0, 1.0 }
      bg[PRELIGHT] = { 0, 0, 1.0 }
      bg[ACTIVE] = { 1.0, 0, 0 }
      fg[ACTIVE] = { 0, 1.0, 0 }
      bg[NORMAL] = { 1.0, 1.0, 0 }
      fg[NORMAL] = { .99, 0, .99 }
      bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
      fg[INSENSITIVE] = { 1.0, 0, 1.0 }

      engine "pixmap" {
          image {
              function = BOX
              file     = "call_connect_icon_64x64.png"
              stretch  = TRUE
          }
      }
      bg_pixmap[NORMAL] = "call_connect_icon_64x64.png"
    }

    style "disconnectButton" {
      xthickness = 58
      ythickness = 48
      fg[PRELIGHT] = { 0, 1.0, 1.0 }
      bg[PRELIGHT] = { 0, 0, 1.0 }
      bg[ACTIVE] = { 1.0, 0, 0 }
      fg[ACTIVE] = { 0, 1.0, 0 }
      bg[NORMAL] = { 1.0, 1.0, 0 }
      fg[NORMAL] = { .99, 0, .99 }
      bg[INSENSITIVE] = { 1.0, 1.0, 1.0 }
      fg[INSENSITIVE] = { 1.0, 0, 1.0 }

      engine "pixmap" {
          image {
              function = BOX
              file     = "call_disconnect_icon_64x64.png"
              stretch  = TRUE
          }
      }
      bg_pixmap[NORMAL] = "call_disconnect_icon_64x64.png"
    }

    # imports
    widget "*.deButton" style "deButton"
    widget "*.nlButton" style "nlButton"
    widget "*.enButton" style "enButton"
    widget "*.callButton" style "callButton"
    widget "*.disconnectButton" style "disconnectButton"
    widget_class "GtkWindow" style "window"
    widget_class "*GtkButton*" style "button"
    widget "main window.*GtkButton*" style "main_button"
    """


    # main GTK
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    self.window.set_size_request(1024, 768)
    self.window.set_border_width(10)

    self.window.set_decorated(False)
    self.window.set_title("Test")
    #self.window.set_default_size(1024, 768)
    #color = gtk.gdk.color_parse('#234fdb')
    #self.window.modify_bg(gtk.STATE_NORMAL, color)
    self.window.connect("destroy", gtk.main_quit, "WM destroy")

    #window.set_name("foo")
    #gtk.rc_parse_string(pixmap_rc)

    self.window.set_name("main window")
    gtk.rc_parse_string(button_rc)

    self.vbox = gtk.VBox()
    self.window.add(self.vbox)    
    table = gtk.Table(rows=2, columns=2, homogeneous=True)
    self.hButton = gtk.HBox(False, 0)

    # Create gape
    align = gtk.Alignment(0.5)
    align.set_padding(500, 90, 0, 0)
    align.add(gtk.Label())
    align.show()
    self.vbox.pack_start(align, False)

    self.vbox.pack_start(self.hButton, False)    
    self.hButton.set_border_width(1)

    # Buttons 
    self.button_de = gtk.Button("Detuch")
    self.button_de.set_name("deButton")
    self.button_de.show()
    self.button_de.connect("clicked", self.deButton) 

    self.button_nl = gtk.Button("Nederlands")
    self.button_nl.set_name("nlButton")
    self.button_nl.show()
    self.button_nl.connect("clicked", self.nlButton) 

    self.button_en = gtk.Button("English")
    self.button_en.set_name("enButton")
    self.button_en.show()
    self.button_en.connect("clicked", self.enButton) 

    self.hButton.pack_start(self.button_de, False)
    self.hButton.pack_start(self.button_nl, False)
    self.hButton.pack_start(self.button_en, False)  


    table.attach(gtk.HBox(False, 0), 0, 1, 0, 1, 0,0,0,0)
    table.attach(self.hButton, 0, 1, 1, 2, 0,0,0,0)
    table.show()

    self.vbox.add(table)

    # Connect/disconnect  
    hbox = gtk.HBox(False, 0)
    self.vbox.pack_start(hbox, False)    
    hbox.set_border_width(10)
    hbox.pack_start(gtk.Label(), True, True, 0)

    # Connect
    self.button_call = gtk.Button("")
    self.button_call.set_name("callButton")
    self.button_call.connect("clicked", self.callButton)    
    #hbox.pack_start(self.button_call, False)
    align = gtk.Alignment(0.5)
    align.set_padding(0, 0, 44, 44)
    align.add(self.button_call)
    align.show()
    #hbox.pack_start(align, False)
    hbox.pack_start(align, False)

    # Disconnect
    self.button_disconnect = gtk.Button()
    self.button_disconnect.set_name("disconnectButton")
    self.button_disconnect.connect("clicked", self.exit)    
    hbox.pack_start(self.button_disconnect, False)   

    hbox.add(gtk.Label())    
    self.window.show_all()
    self.window.set_keep_above(True)
</snippet></ROW><ROW><id>13720747</id><snippet>Error like: GtkWarning: Unable to locate theme engine in module_path: "pixmap",
  gtk.rc_parse_string(button_rc)

Solution: 
sudo apt-get install gtk2-engines-pixbuf
</snippet></ROW><ROW><id>13720822</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; opener = urllib2.build_opener()
&gt;&gt;&gt; opener.addheaders = [('User-agent', 'Mozilla/5.0')]
&gt;&gt;&gt; url = "http://www.weatheronline.co.uk/weather/maps/current?LANG=en&amp;DATE=1354104000&amp;CONT=euro&amp;LAND=UK&amp;KEY=UK&amp;SORT=1&amp;INT=06&amp;TYP=sonne&amp;ART=tabelle&amp;RUBRIK=akt&amp;R=310&amp;CEL=C"
&gt;&gt;&gt; response = opener.open(url)
&gt;&gt;&gt; page = response.read()
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(page)
</snippet></ROW><ROW><id>13721065</id><snippet>sys.path[0]
</snippet></ROW><ROW><id>13721065</id><snippet>os.chdir(sys.path[0])
</snippet></ROW><ROW><id>13721065</id><snippet>os.system('start excel.exe "%s\\file.xls"' % (sys.path[0], ))
</snippet></ROW><ROW><id>13721065</id><snippet>cmd.exe</snippet></ROW><ROW><id>13721065</id><snippet>start</snippet></ROW><ROW><id>13721065</id><snippet>"</snippet></ROW><ROW><id>13721723</id><snippet>self.set_date(date_cursor.day)</snippet></ROW><ROW><id>13721723</id><snippet>self.set_date</snippet></ROW><ROW><id>13721723</id><snippet>self.populate_body</snippet></ROW><ROW><id>13721723</id><snippet>date_cursor.day</snippet></ROW><ROW><id>13721723</id><snippet>partial</snippet></ROW><ROW><id>13721723</id><snippet>functools</snippet></ROW><ROW><id>13721723</id><snippet>
self.date_label.bind(on_touch_down=partial(self.set_date, date_cursor.day))
</snippet></ROW><ROW><id>13721723</id><snippet>**args</snippet></ROW><ROW><id>13721723</id><snippet>set_date</snippet></ROW><ROW><id>13722236</id><snippet>monitor</snippet></ROW><ROW><id>13722236</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>13722236</id><snippet>/etc/init.d/</snippet></ROW><ROW><id>13722236</id><snippet>sudo -S chmod "a+x" "/etc/init.d/monitor"</snippet></ROW><ROW><id>13722236</id><snippet>sudo -S update-rc.d "monitor"  "defaults" "98"</snippet></ROW><ROW><id>13722236</id><snippet>monitor</snippet></ROW><ROW><id>13722236</id><snippet>tty</snippet></ROW><ROW><id>13722261</id><snippet>e</snippet></ROW><ROW><id>13722261</id><snippet>firste = None
for x in range(10):
    try:
        print x
        if x == 4:
            raise Exception('raise on 4')
        if x == 6:
            raise Exception('raise on 6')
    except Exception as e:
        if firste is None:
            firste = e
        continue

if firste is not None:
    raise firste
</snippet></ROW><ROW><id>13722261</id><snippet>firste</snippet></ROW><ROW><id>13722261</id><snippet>else</snippet></ROW><ROW><id>13722261</id><snippet>break</snippet></ROW><ROW><id>13722261</id><snippet>else</snippet></ROW><ROW><id>13722261</id><snippet>firste</snippet></ROW><ROW><id>13722261</id><snippet>for</snippet></ROW><ROW><id>13722261</id><snippet>else</snippet></ROW><ROW><id>13722721</id><snippet>CASE()</snippet></ROW><ROW><id>13722721</id><snippet>query.filter(func.substr(value, 1 if len(value) &gt; 7 else 1, 7) == '1050430')
</snippet></ROW><ROW><id>13722721</id><snippet>true_expr if test_expr else false_expr</snippet></ROW><ROW><id>13722721</id><snippet>true_expr</snippet></ROW><ROW><id>13722721</id><snippet>test_expr</snippet></ROW><ROW><id>13722721</id><snippet>false_expr</snippet></ROW><ROW><id>13722721</id><snippet>value</snippet></ROW><ROW><id>13722721</id><snippet>CASE()</snippet></ROW><ROW><id>13722721</id><snippet>sqlalchemy.sql.expression.case()</snippet></ROW><ROW><id>13722721</id><snippet>from sqlalchemy.sql.expression import case

query.filter(func.substr(value, case([(func.length(column) &gt; 7, func.length(column) - 7 + 1)], else_=1), 7) == '1050430')
</snippet></ROW><ROW><id>13722721</id><snippet>(</snippet></ROW><ROW><id>13722721</id><snippet>)</snippet></ROW><ROW><id>13722837</id><snippet>x = lambda times:' '*times
print "my message{0}my message 2".format(x(10))         
my message          my message 2
</snippet></ROW><ROW><id>13722842</id><snippet>&gt;&gt;&gt; units = 'munpf'
&gt;&gt;&gt; def f(match):
    num = match.group(0)
    exp = -3 * (units.index(num[-1]) + 1)
    return num[:-1] + '10e' + str(exp)

&gt;&gt;&gt; expr = "(10u*myvar1)+(2.5f*myvar2)/myvar3"

&gt;&gt;&gt; re.sub(r'\b\d+(\.\d*)?' + '[%s]' % units + r'\b', f, expr)
'(10e-6*myvar1)+(2.5e-15*myvar2)/myvar3'
</snippet></ROW><ROW><id>13722890</id><snippet>database=dbname</snippet></ROW><ROW><id>13722890</id><snippet>SELECT current_database()</snippet></ROW><ROW><id>13722890</id><snippet>SELECT * FROM pg_database</snippet></ROW><ROW><id>13722890</id><snippet>from psycopg2 import connect
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def show_query(title, qry):
    print('%s' % (title))
    cur.execute(qry)
    for row in cur.fetchall():
        print(row)
    print('')

dbname = 'db_name'
print('connecting to default database ...')
con = connect(user ='postgres', host = 'localhost', password = '*****', port=5492)
con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
cur = con.cursor()
show_query('current database', 'SELECT current_database()')
cur.execute('CREATE DATABASE ' + dbname)
show_query('available databases', 'SELECT * FROM pg_database')
cur.close()
con.close()

print('connecting to %s ...' % (dbname))
con = connect(user ='postgres', database=dbname, host = 'localhost', password = '*****', port=5492)
cur = con.cursor()
show_query('current database', 'SELECT current_database()')
cur.close()
con.close()
</snippet></ROW><ROW><id>13722984</id><snippet>if any(number &lt; 10 for number in numbers):
    print ("your list has numbers less than 10.")
if any(number &gt; 100 for number in numbers):
    print ("your list has numbers more than 100")
</snippet></ROW><ROW><id>13722984</id><snippet>if all(10 &lt; number &lt; 100 for number in numbers):
    #correct code goes here
</snippet></ROW><ROW><id>13723319</id><snippet>shutdown</snippet></ROW><ROW><id>13723319</id><snippet>threading.active_count() &gt; 1</snippet></ROW><ROW><id>13723319</id><snippet>stop</snippet></ROW><ROW><id>13723319</id><snippet>ThreadManager.getInstance</snippet></ROW><ROW><id>13723319</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>13723481</id><snippet>view.py</snippet></ROW><ROW><id>13723481</id><snippet>return HttpResponse("You're looking at Venue %s.", % venue_id)
</snippet></ROW><ROW><id>13723481</id><snippet>return HttpResponse("You're looking at events at venue %s.", % venue_id)
</snippet></ROW><ROW><id>13723481</id><snippet>%</snippet></ROW><ROW><id>13723481</id><snippet>%</snippet></ROW><ROW><id>13723530</id><snippet>cur.execute('CREATE TABLE count(value1 TEXT, value2 INTEGER)') 
                                                           ^
</snippet></ROW><ROW><id>13723844</id><snippet>layout = QtGui.QHBoxLayout(dialogWin)
</snippet></ROW><ROW><id>13723893</id><snippet>scale = [notes[(y+root_i)%len(notes)] for y in [0,2,4,5,7,9,11]]
</snippet></ROW><ROW><id>13723893</id><snippet>scale = [notes[(y+notes.index(root))%len(notes)] for y in [0,2,4,5,7,9,11]]
</snippet></ROW><ROW><id>13723905</id><snippet>sorted(L, key=lambda item: (item == "/", item.lower()))
</snippet></ROW><ROW><id>13723905</id><snippet>(True, "/")</snippet></ROW><ROW><id>13723905</id><snippet>(False, "...whatever...")</snippet></ROW><ROW><id>13724089</id><snippet>return</snippet></ROW><ROW><id>13724089</id><snippet>def importlines():
    with open('C:/scripts/nagios/filename.txt') as mf:
        return [l.split()[0] for l in mf]
</snippet></ROW><ROW><id>13724089</id><snippet>hosts</snippet></ROW><ROW><id>13724089</id><snippet>hosts = importlines()
</snippet></ROW><ROW><id>13724089</id><snippet>importlines()</snippet></ROW><ROW><id>13724089</id><snippet>None</snippet></ROW><ROW><id>13724403</id><snippet>reduce</snippet></ROW><ROW><id>13724403</id><snippet>from functools import reduce

print("The product of the list is", reduce(lambda x,y:x*y, numbertotal))
</snippet></ROW><ROW><id>13724403</id><snippet>from functools import reduce
import operator as op

print("The product of the list is", reduce(op.mul, numbertotal))
</snippet></ROW><ROW><id>13724403</id><snippet>functools</snippet></ROW><ROW><id>13724403</id><snippet>2to3</snippet></ROW><ROW><id>13724522</id><snippet>line</snippet></ROW><ROW><id>13724522</id><snippet>data = []
for f in frames:
    # do your calculation
    # line = [1, 2, 3, 4]
    data += line
data = np.array(data).reshape((-1,4))
</snippet></ROW><ROW><id>13724812</id><snippet>Structure     Time     Size
============= ======== =====
full dict     0.0236s  6284
list          0.0426s  13028
sparse dict   0.1079s  1676
array         0.2262s  12608
</snippet></ROW><ROW><id>13724812</id><snippet>key in dict</snippet></ROW><ROW><id>13724869</id><snippet>A</snippet></ROW><ROW><id>13724869</id><snippet>B</snippet></ROW><ROW><id>13724869</id><snippet>R</snippet></ROW><ROW><id>13724869</id><snippet>P</snippet></ROW><ROW><id>13724869</id><snippet>AB</snippet></ROW><ROW><id>13724869</id><snippet>AR</snippet></ROW><ROW><id>13724869</id><snippet>AB</snippet></ROW><ROW><id>13724869</id><snippet>AP</snippet></ROW><ROW><id>13725079</id><snippet>apt-get -f install
</snippet></ROW><ROW><id>13725411</id><snippet> result = dict(size_reader)
</snippet></ROW><ROW><id>13725411</id><snippet>size_reader</snippet></ROW><ROW><id>13725411</id><snippet>result = {k: int(v) for k, v in size_reader}
</snippet></ROW><ROW><id>13725585</id><snippet>from twisted.internet import defer 
from twisted.internet import reactor


def delayedFunction(dF):
    print('I was called')
    dF.success(True)

class Counter(object):
    def timeOffsetExecute(self,delay):
        dF = defer.Deferred()
        reactor.callLater(delay,delayedFunction,dF)
        return dF

def onAllResult(val):
    print 'All delayed functions called'
    reactor.stop()

cp = Counter()

dl = defer.DeferredList([cp.timeOffsetExecute(1), cp.timeOffsetExecute(3), cp.timeOffsetExecute(9)], consumeErrors=True)
dl.addCallback(onAllResult)

reactor.run()
</snippet></ROW><ROW><id>13725706</id><snippet>=HOUR(A1)&amp;":"&amp;MINUTE(A1)</snippet></ROW><ROW><id>13725720</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>13725720</id><snippet>href</snippet></ROW><ROW><id>13725720</id><snippet>[x['href'] for x in BeautifulSoup(data, parseOnlyThese=SoupStrainer('a')) if x.has_key('href')]
</snippet></ROW><ROW><id>13725720</id><snippet>&lt;a name="something" /&gt;</snippet></ROW><ROW><id>13725720</id><snippet>href</snippet></ROW><ROW><id>13725746</id><snippet>a</snippet></ROW><ROW><id>13725746</id><snippet>In [4]: range((a + c - 1) // c * c, b + 1, c)
Out[4]: [132, 165, 198, 231, 264, 297, 330, 363, 396, 429, 462, 495]
</snippet></ROW><ROW><id>13725746</id><snippet>a</snippet></ROW><ROW><id>13725746</id><snippet>a</snippet></ROW><ROW><id>13725746</id><snippet>c</snippet></ROW><ROW><id>13725746</id><snippet>b</snippet></ROW><ROW><id>13725746</id><snippet>In [15]: range((a + c - 1) // c * c, b + 1, c)
Out[15]: [66, 99, 132]
</snippet></ROW><ROW><id>13725757</id><snippet>replacing</snippet></ROW><ROW><id>13725757</id><snippet>\[\[.*?\]\](?=[^{]*\}\})
</snippet></ROW><ROW><id>13725757</id><snippet>.*?</snippet></ROW><ROW><id>13725757</id><snippet>]]</snippet></ROW><ROW><id>13725757</id><snippet>.*</snippet></ROW><ROW><id>13725757</id><snippet>]]</snippet></ROW><ROW><id>13725757</id><snippet>(?=[^{]*}})</snippet></ROW><ROW><id>13725757</id><snippet>lookahead</snippet></ROW><ROW><id>13725757</id><snippet>[[ ]]</snippet></ROW><ROW><id>13725757</id><snippet>{</snippet></ROW><ROW><id>13725757</id><snippet>}}</snippet></ROW><ROW><id>13725757</id><snippet>[[``]]</snippet></ROW><ROW><id>13725757</id><snippet>{{</snippet></ROW><ROW><id>13725757</id><snippet>}}</snippet></ROW><ROW><id>13725757</id><snippet>]]</snippet></ROW><ROW><id>13725757</id><snippet>{</snippet></ROW><ROW><id>13725757</id><snippet>}}</snippet></ROW><ROW><id>13725757</id><snippet>[[xyz]]&lt;-this would not match since { after it
{{
[[xyz]]&lt;-this would match since it is not followed by { and it reaches }}
[[xyz]]&lt;-this would match since it is not followed by { and it reaches }}
}}
</snippet></ROW><ROW><id>13725772</id><snippet>ModelForm</snippet></ROW><ROW><id>13725772</id><snippet>abc</snippet></ROW><ROW><id>13725772</id><snippet>ModelForm</snippet></ROW><ROW><id>13725772</id><snippet>zyx</snippet></ROW><ROW><id>13725772</id><snippet>Bar</snippet></ROW><ROW><id>13725772</id><snippet>ModelForm</snippet></ROW><ROW><id>13725772</id><snippet>POST</snippet></ROW><ROW><id>13725772</id><snippet>Bar</snippet></ROW><ROW><id>13725772</id><snippet>Foo</snippet></ROW><ROW><id>13725772</id><snippet>Bar</snippet></ROW><ROW><id>13725772</id><snippet>ModelForm.save</snippet></ROW><ROW><id>13725801</id><snippet>sudo ln -s /usr/bin/llvm-gcc-4.2 /usr/bin/gcc-4.2
</snippet></ROW><ROW><id>13725824</id><snippet>res = lambda x: all(test(v) for v in x) 
</snippet></ROW><ROW><id>13725824</id><snippet>res = lambda x: all(map(test, x))
</snippet></ROW><ROW><id>13725824</id><snippet>test</snippet></ROW><ROW><id>13725824</id><snippet>v</snippet></ROW><ROW><id>13725824</id><snippet>lambda v: all(map(v.test, List)) # You should not use List as a variable name!
</snippet></ROW><ROW><id>13725824</id><snippet>List</snippet></ROW><ROW><id>13725824</id><snippet>all</snippet></ROW><ROW><id>13725824</id><snippet>map</snippet></ROW><ROW><id>13725824</id><snippet>lambda</snippet></ROW><ROW><id>13725902</id><snippet>matplotlib</snippet></ROW><ROW><id>13725902</id><snippet>generate_data</snippet></ROW><ROW><id>13725902</id><snippet>import numpy as np
import matplotlib.pyplot as plt 
import matplotlib.animation as animation

def generate_data():
    X = np.arange(25)
    Y = X**2 * np.random.rand(25)
    return X,Y 

def update(data):
    mat[0].set_xdata(data[0])
    mat[0].set_ydata(data[1])
    return mat 

def data_gen():
    while True:
        yield generate_data()

fig, ax = plt.subplots()
X,Y = generate_data()
mat = ax.plot(X,Y,'o')
ani = animation.FuncAnimation(fig, update, data_gen, interval=500,
                              save_count=10)

ani.save('animation.mp4')
plt.show()
</snippet></ROW><ROW><id>13725976</id><snippet>idf = len(feat_vectors) / (feat_vectors != 0).sum(0)
</snippet></ROW><ROW><id>13725976</id><snippet>idf = float(len(feat_vectors)) / (feat_vectors != 0).sum(0)
</snippet></ROW><ROW><id>13725999</id><snippet>reader</snippet></ROW><ROW><id>13725999</id><snippet>reader</snippet></ROW><ROW><id>13726418</id><snippet>[OrderedSet() for _ in xrange(n)]</snippet></ROW><ROW><id>13726418</id><snippet>_(...)</snippet></ROW><ROW><id>13726418</id><snippet>_("string literal")</snippet></ROW><ROW><id>13726418</id><snippet>def my_callbacK_handler(a, b, *_):
  ...
</snippet></ROW><ROW><id>13726418</id><snippet>As you state " *_ to express no interest in any further arguments "
</snippet></ROW><ROW><id>13726657</id><snippet>class MyObject(object):
    def __init__(value, attrib=None):
        self.__value = value
        self.attrib {} if attrib is None else attrib

    def __str__(self):
        return __value

d = {}
d['1'] = MyObject("123", {"name": "val"})
print d['1']                     # prints "123"
print d['1'].attrib["name"]      # prints "val"
</snippet></ROW><ROW><id>13726657</id><snippet>__dict__</snippet></ROW><ROW><id>13726657</id><snippet>MyDict</snippet></ROW><ROW><id>13726657</id><snippet>dict</snippet></ROW><ROW><id>13726657</id><snippet>class MyDict(dict):
    ...
</snippet></ROW><ROW><id>13726657</id><snippet>super</snippet></ROW><ROW><id>13726657</id><snippet>dict.__init__(self)</snippet></ROW><ROW><id>13726657</id><snippet>super(MyDict, self).__init__()</snippet></ROW><ROW><id>13726657</id><snippet>dict.__getitem__(self, key)</snippet></ROW><ROW><id>13726657</id><snippet>super(MyDict, dict).__getitem__(key)</snippet></ROW><ROW><id>13726657</id><snippet>v.__get__(self, MyDict)</snippet></ROW><ROW><id>13726657</id><snippet>__get__</snippet></ROW><ROW><id>13726657</id><snippet>MyDescriptor</snippet></ROW><ROW><id>13726657</id><snippet>attrib</snippet></ROW><ROW><id>13726657</id><snippet>attrib</snippet></ROW><ROW><id>13726657</id><snippet>class MyString(str):
    def __init__(self, value, attrib=None):
        super(MyString, self).__init__(value)
        self.attrib = {} if attrib is None else attrib
</snippet></ROW><ROW><id>13726873</id><snippet>django-jython</snippet></ROW><ROW><id>13726873</id><snippet>'doj.backends.zxjdbc.mysql'</snippet></ROW><ROW><id>13726873</id><snippet>jython -J-classpath path/to/driver.jar manage.py runserver
</snippet></ROW><ROW><id>13726873</id><snippet>export CLASSPATH="$CLASSPATH:/path/to/driver.jar"
</snippet></ROW><ROW><id>13727060</id><snippet>import multiprocessing as mu

def worker(n):
        print "worker:", n
        n = int(1e4/2)
        for i in range(n):
                for j in range(n):
                        i*j
        return

if __name__ == '__main__':
        jobs = []
        for i in range(5):
                p = mu.Process(target=worker, args=(i,))
                jobs.append(p)

        running = []
        np = mu.cpu_count()

        for i in range(np):
                p = jobs.pop()
                running.append(p)
                p.start()

        while jobs != []:
                for r in running:
                        if r.exitcode == 0:
                                running.remove(r)
                                p = jobs.pop()
                                p.start()
                                running.append(p)
</snippet></ROW><ROW><id>13727175</id><snippet>requests</snippet></ROW><ROW><id>13727175</id><snippet>application/json</snippet></ROW><ROW><id>13727175</id><snippet>json</snippet></ROW><ROW><id>13727175</id><snippet>import json

r = client.post("http://api.imgur.com/2/account/albums.json", json.dumps(payload))
</snippet></ROW><ROW><id>13727175</id><snippet>http://httpbin/post</snippet></ROW><ROW><id>13727175</id><snippet>&gt;&gt;&gt; import json, requests, pprint
&gt;&gt;&gt; headers = {'content-type': 'application/json'}
&gt;&gt;&gt; payload = {"title":"album title"}
&gt;&gt;&gt; pprint.pprint(requests.post('http://httpbin.org/post', payload, headers=headers).json)
{u'args': {},
 u'data': u'title=album+title',
 u'files': {},
 u'form': {},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'keep-alive',
              u'Content-Length': u'17',
              u'Content-Type': u'application/json',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/0.14.2 CPython/2.7.3 Darwin/11.4.2'},
 u'json': None,
 u'origin': u'xx.xx.xx.xx',
 u'url': u'http://httpbin.org/post'}
&gt;&gt;&gt; pprint.pprint(requests.post('http://httpbin.org/post', json.dumps(payload), headers=headers).json)
{u'args': {},
 u'data': u'{"title": "album title"}',
 u'files': {},
 u'form': {},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'keep-alive',
              u'Content-Length': u'24',
              u'Content-Type': u'application/json',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/0.14.2 CPython/2.7.3 Darwin/11.4.2'},
 u'json': {u'title': u'album title'},
 u'origin': u'xx.xx.xx.xx',
 u'url': u'http://httpbin.org/post'}
</snippet></ROW><ROW><id>13727253</id><snippet>[ j for (i,j) in zip(a,x) if i &gt;= 4 ]
# a will be the list compare to 4
# x another list with same length

Explaination:
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; x
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j']
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; zip(a,x)
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f'), (7, 'g'), (8, 'h'), (9, 'j')]
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; [expression(element) for **element** in **list** if condition ]
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; [(i,j) for (i,j) in zip(a,x)]
[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f'), (7, 'g'), (8, 'h'), (9, 'j')]
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; [(i,j) for (i,j) in zip(a,x) if i &gt;= 4]
[(4, 'd'), (5, 'e'), (6, 'f'), (7, 'g'), (8, 'h'), (9, 'j')]
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; [ _ for _ in itertools.compress(d, map(lambda x: x&gt;=4,a)) ]
# a will be the list compare to 4
# d another list with same length
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; d = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j'] # another list with same length
&gt;&gt;&gt; map(lambda x: x&gt;=4, a)  # this will return a boolean list 
[False, False, False, True, True, True, True, True, True]


&gt;&gt;&gt; import itertools
&gt;&gt;&gt; itertools.compress(d, map(lambda x: x&gt;4, a)) # magic here !
&lt;itertools.compress object at 0xa1a764c&gt;     # compress will match pair from list a and the boolean list, if item in boolean list is true, then item in list a will be remain ,else will be dropped
#below single line is enough to solve your problem
&gt;&gt;&gt; [ _ for _ in itertools.compress(d, map(lambda x: x&gt;=4,a)) ] # iterate the result.
['d', 'e', 'f', 'g', 'h', 'j']
</snippet></ROW><ROW><id>13727253</id><snippet>&gt;&gt;&gt; [ _ for _ in itertools.compress([1,2,3,4,5],[False,True,True,False,True]) ]
[2, 3, 5]
</snippet></ROW><ROW><id>13727488</id><snippet>L</snippet></ROW><ROW><id>13727488</id><snippet>In [26]: L = [2, 2, 3, 4]

In [27]: sum(L) / float(len(L))
Out[27]: 2.75
</snippet></ROW><ROW><id>13727488</id><snippet>In [28]: numpy.mean(L)
Out[28]: 2.75
</snippet></ROW><ROW><id>13727488</id><snippet>x</snippet></ROW><ROW><id>13727488</id><snippet>f(x) = sum((x - L[i])**2)</snippet></ROW><ROW><id>13727488</id><snippet>i=0..n-1</snippet></ROW><ROW><id>13727488</id><snippet>f(x)</snippet></ROW><ROW><id>13727488</id><snippet>2*sum(x - L[i]) = 0
</snippet></ROW><ROW><id>13727488</id><snippet>x = sum(L[i]) / n
</snippet></ROW><ROW><id>13727488</id><snippet>L</snippet></ROW><ROW><id>13727692</id><snippet>\uxxxx</snippet></ROW><ROW><id>13727692</id><snippet>print(cursor.fetchall()[1])
</snippet></ROW><ROW><id>13727692</id><snippet>привет!
</snippet></ROW><ROW><id>13727692</id><snippet>&gt;&gt;&gt; print u'\u043f\u0440\u0438\u0432\u0435\u0442!'
привет!
</snippet></ROW><ROW><id>13727732</id><snippet>import py_compile
py_compile.compile('abc.py')
</snippet></ROW><ROW><id>13728056</id><snippet>&gt;&gt;&gt; def foo(some_list, fn = max):
    #Create a dictionary, default dict won;t help much as 
    #we have to refer back to the value for an existing key
    #The dictionary would have item[0] as key
    foo_dict = dict()
    #Iterate through the list
    for e in some_list:
            #Check if the key exist
        if e[0][0] in foo_dict:
                    #and if it does, find the max of the existing value and the 
                    #new element. The key here is the second item
            foo_dict[e[0][0]] = fn(foo_dict[e[0][0]], e, key = lambda e:e[2])
        else:
                    #else consider the new element as the current max
            foo_dict[e[0][0]] = e
    return foo_dict.values()

&gt;&gt;&gt; foo(somelist)
[[['a'], [24], 3124, 1], [['c'], [24], 34, 1], [['b'], [24], 312, 1]]
&gt;&gt;&gt; foo(somelist,min)
[[['a'], [24], 214, 1], [['c'], [24], 34, 1], [['b'], [24], 312, 1]]
</snippet></ROW><ROW><id>13728364</id><snippet>Series</snippet></ROW><ROW><id>13728364</id><snippet>DataFrame</snippet></ROW><ROW><id>13728364</id><snippet>serie_4</snippet></ROW><ROW><id>13728364</id><snippet>DataFrame</snippet></ROW><ROW><id>13728364</id><snippet>serie_3</snippet></ROW><ROW><id>13728364</id><snippet>Series</snippet></ROW><ROW><id>13728364</id><snippet>DataFrame</snippet></ROW><ROW><id>13728364</id><snippet>Series</snippet></ROW><ROW><id>13728364</id><snippet>serie_5 = pandas.concat([serie_1, serie_2, serie_3], join='outer', axis = 1)
</snippet></ROW><ROW><id>13728364</id><snippet>serie_3.name = 2
serie_5 = serie_4.join(serie_3, how = 'outer')
</snippet></ROW><ROW><id>13728374</id><snippet>iv</snippet></ROW><ROW><id>13728374</id><snippet>kv</snippet></ROW><ROW><id>13728374</id><snippet>mpmath</snippet></ROW><ROW><id>13728374</id><snippet>In [1]: import mpmath

In [2]: mpmath.besseli(0, 1714)
mpf('2.3156788070459683e+742')

In [3]: mpmath.besselk(0, 1714)
mpf('1.2597398974570405e-746')
</snippet></ROW><ROW><id>13728416</id><snippet>f &amp; 0xF0 == 0xF0</snippet></ROW><ROW><id>13728416</id><snippet>f &amp; 0xC0 == 0xC0</snippet></ROW><ROW><id>13728416</id><snippet>codepoint_length()</snippet></ROW><ROW><id>13728416</id><snippet>LENGTH_BY_PREFIX = [
  (0xFC, 6),
  (0xF8, 5),
  (0xF0, 4),
  (0xE0, 3), 
  (0xC0, 2), # first byte mask, total codepoint length
]
</snippet></ROW><ROW><id>13728428</id><snippet>row</snippet></ROW><ROW><id>13728428</id><snippet>row['F'] = '%s,%s' % (row['E'], row['B'])
</snippet></ROW><ROW><id>13728428</id><snippet>','.join()</snippet></ROW><ROW><id>13728428</id><snippet>row['F'] = ','.join([row['E'], row['B']])
</snippet></ROW><ROW><id>13728428</id><snippet>'F'</snippet></ROW><ROW><id>13728428</id><snippet>left_writer</snippet></ROW><ROW><id>13728428</id><snippet>left_writer = csv.DictWriter(left_file, fieldnames + ['F'], delimiter=",")
</snippet></ROW><ROW><id>13728428</id><snippet>coil_writer</snippet></ROW><ROW><id>13728428</id><snippet>row</snippet></ROW><ROW><id>13728428</id><snippet>coil_writer = csv.DictWriter(coil_file, fieldnames, delimiter=",", extrasaction='ignore')
</snippet></ROW><ROW><id>13728498</id><snippet>dt[index]</snippet></ROW><ROW><id>13728498</id><snippet>for row in dt.Rows:
    row["calc"] = row["count"] + 1
</snippet></ROW><ROW><id>13728498</id><snippet>dt</snippet></ROW><ROW><id>13728498</id><snippet>row</snippet></ROW><ROW><id>13728528</id><snippet>&gt;&gt;&gt; [sum(l[:i]) for i, _ in enumerate(l)]
[0, 0, 1, 3, 6, 10, 15, 21, 28, 36]
</snippet></ROW><ROW><id>13728528</id><snippet>reduce</snippet></ROW><ROW><id>13728528</id><snippet>reduce(
    lambda (sums, last), x: (sums+[x+last], x+last),
    l, ([], 0)
)[0]
</snippet></ROW><ROW><id>13728528</id><snippet>reduce(lambda sums,x: sums+[x+sums[-1]], l[1:], l[:1])
</snippet></ROW><ROW><id>13728558</id><snippet>data = {"outfit":{"shirt":"red","pants":{"jeans":"blue","trousers":"khaki"}}}
import json
from collections import OrderedDict

def node(name, children):
    n = OrderedDict()
    n['id'] = 'node' + name.capitalize()
    n['name'] = name
    n['data'] = {}
    n['children'] = children
    return n

def convert(d):
    if type(d) == dict:
        return [node(k, convert(v)) for k, v in d.items()]
    else:
        return [node(d, [])]

print(json.dumps(convert(data), indent=True))
</snippet></ROW><ROW><id>13728558</id><snippet>convert</snippet></ROW><ROW><id>13728558</id><snippet>list</snippet></ROW><ROW><id>13728558</id><snippet>dict</snippet></ROW><ROW><id>13728558</id><snippet>data</snippet></ROW><ROW><id>13728558</id><snippet>'outfit'</snippet></ROW><ROW><id>13728677</id><snippet>struct.calcsize('idi')</snippet></ROW><ROW><id>13728677</id><snippet>struct.calcsize('=idi')</snippet></ROW><ROW><id>13728677</id><snippet>struct</snippet></ROW><ROW><id>13728778</id><snippet>install_requires=['paramiko&gt;=1.10.0'],
</snippet></ROW><ROW><id>13728778</id><snippet>pip install fabric
</snippet></ROW><ROW><id>13728840</id><snippet>widget</snippet></ROW><ROW><id>13728840</id><snippet>main</snippet></ROW><ROW><id>13728840</id><snippet>widget = QtGui.QWidget(self)
</snippet></ROW><ROW><id>13728840</id><snippet>widget = QtGui.QWidget()
self.setCentralWidget(widget)
</snippet></ROW><ROW><id>13728917</id><snippet>indent</snippet></ROW><ROW><id>13728917</id><snippet>0</snippet></ROW><ROW><id>13728917</id><snippet>with open(p_out, 'wb') as fp:
    json.dump(my_dictionary, fp, indent=0)
</snippet></ROW><ROW><id>13728917</id><snippet>None</snippet></ROW><ROW><id>13728917</id><snippet>{
"variable_2": "something_else", 
"variable_1": "something"
}
</snippet></ROW><ROW><id>13728953</id><snippet>&lt;input type="text name=user" /&gt;
</snippet></ROW><ROW><id>13728953</id><snippet>&lt;input type="text" name="user" /&gt;
</snippet></ROW><ROW><id>13728953</id><snippet>&lt;sometag attribute1="a thing" attribute2="another thing" /&gt;
</snippet></ROW><ROW><id>13729370</id><snippet>score = 0
</snippet></ROW><ROW><id>13729370</id><snippet>    if (product==x*y):
       print ("Awesome! That is correct!")
       score += 1
    else:
       print ("Sorry, that is not correct, but let's try another one!")
</snippet></ROW><ROW><id>13729370</id><snippet>score += 1</snippet></ROW><ROW><id>13729370</id><snippet>score &gt; 5</snippet></ROW><ROW><id>13729375</id><snippet>x = np.concatenate((x, new_x))
</snippet></ROW><ROW><id>13729448</id><snippet>a.ix[a.index] = mset.ix[a.index]
</snippet></ROW><ROW><id>13729459</id><snippet>import numpy as np
import pylab
</snippet></ROW><ROW><id>13729459</id><snippet>r_a = 0.50
r_b = 0.75
circles = 6  
lines   = 50
origin = (0, 0)
</snippet></ROW><ROW><id>13729459</id><snippet>for r in np.linspace(r_a, r_b, circles):
    pylab.gca().add_patch(pylab.Circle(origin, radius=r, 
                                       fill=False, color='black'))
</snippet></ROW><ROW><id>13729459</id><snippet>r_ab = np.array([r_a, r_b])
for theta in np.linspace(0, 2 * np.pi, lines):
    pylab.plot(np.cos(theta) * r_ab,
               np.sin(theta) * r_ab, color='red')
</snippet></ROW><ROW><id>13729459</id><snippet>pylab.axis('scaled')
pylab.show()
</snippet></ROW><ROW><id>13729459</id><snippet>r,t   = np.meshgrid(np.linspace(r_a, r_b, circles),
                    np.linspace(0, 2 * np.pi, lines))
x = r * np.cos(t)
y = r * np.sin(t)
</snippet></ROW><ROW><id>13729459</id><snippet># Plot circles
pylab.plot(x, y)
# Plot lines (first and last x and y of each theta)
pylab.plot(np.vstack((x[:,0], x[:, -1])),
           np.vstack((y[:,0], y[:, -1])))
</snippet></ROW><ROW><id>13729459</id><snippet>pylab.axis('scaled')
pylab.show()
</snippet></ROW><ROW><id>13729579</id><snippet>elif items_in_line[0] == "back" or "backward":
</snippet></ROW><ROW><id>13729579</id><snippet>elif (items_in_line[0] == "back") or "backward":
</snippet></ROW><ROW><id>13729579</id><snippet>items_in_line[1]</snippet></ROW><ROW><id>13729579</id><snippet>IndexError</snippet></ROW><ROW><id>13729579</id><snippet>elif items_in_line[0] in ("back", "backward"):
</snippet></ROW><ROW><id>13729617</id><snippet>... href="/arch/favicon.ico"
</snippet></ROW><ROW><id>13729617</id><snippet>@route('/arch/&lt;filename&gt;')
def fileget(filename):
</snippet></ROW><ROW><id>13729747</id><snippet>a1</snippet></ROW><ROW><id>13729747</id><snippet>b1</snippet></ROW><ROW><id>13729747</id><snippet>a1=[1.234, 1.234];
a2=[1.234, 1.234];
&gt;&gt;&gt; a1[0]*a2[0]
1.522756

a3=[[1.234], [1.234]];

&gt;&gt;&gt; a1[0]*a3[0]
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't multiply sequence by non-int of type 'float'
</snippet></ROW><ROW><id>13729962</id><snippet>PyArray_RegisterDataType</snippet></ROW><ROW><id>13729962</id><snippet>ndarray</snippet></ROW><ROW><id>13729994</id><snippet>print "foo-bar"</snippet></ROW><ROW><id>13729994</id><snippet>print 'foo',</snippet></ROW><ROW><id>13729994</id><snippet>sys.stdout.write('.')</snippet></ROW><ROW><id>13729994</id><snippet>for n in …</snippet></ROW><ROW><id>13729994</id><snippet>n</snippet></ROW><ROW><id>13729994</id><snippet>len(something)</snippet></ROW><ROW><id>13729994</id><snippet>outfile.ftell()</snippet></ROW><ROW><id>13729994</id><snippet>counter += 1; if counter % 250 == 0: print 'foo'</snippet></ROW><ROW><id>13729994</id><snippet>print</snippet></ROW><ROW><id>13729994</id><snippet>\r</snippet></ROW><ROW><id>13729994</id><snippet>\n</snippet></ROW><ROW><id>13729994</id><snippet>curl</snippet></ROW><ROW><id>13729994</id><snippet>wget</snippet></ROW><ROW><id>13729994</id><snippet>scp</snippet></ROW><ROW><id>13729994</id><snippet>stderr</snippet></ROW><ROW><id>13729994</id><snippet>stdout</snippet></ROW><ROW><id>13730161</id><snippet>elif items_in_line[0] == ("back" or "backward"):
</snippet></ROW><ROW><id>13730161</id><snippet>"backward"</snippet></ROW><ROW><id>13730161</id><snippet>&gt;&gt;&gt; ("back" or "backward")
'back'
</snippet></ROW><ROW><id>13730161</id><snippet>("back" or "backward")</snippet></ROW><ROW><id>13730161</id><snippet>"back"</snippet></ROW><ROW><id>13730161</id><snippet>elif items_in_line[0] in ("back", "backward"):
</snippet></ROW><ROW><id>13730161</id><snippet>elif items_in_line[0] == "back" or items_in_line[0] == "backward":
</snippet></ROW><ROW><id>13730161</id><snippet>if isinstance(m,int) == True:
    turtle.forward(m)
</snippet></ROW><ROW><id>13730161</id><snippet>items_in_line</snippet></ROW><ROW><id>13730161</id><snippet>split</snippet></ROW><ROW><id>13730161</id><snippet>int</snippet></ROW><ROW><id>13730161</id><snippet>== True</snippet></ROW><ROW><id>13730161</id><snippet>True</snippet></ROW><ROW><id>13730161</id><snippet>try:
    amount_to_move = int(m)
except ValueError as e:
    print(&lt;some message about the error&gt;)
else:
    turtle.forward(amount_to_move)
</snippet></ROW><ROW><id>13730161</id><snippet>def comm(items_in_line):
    try:
        m = int(items_in_line[1])
    except ValueError:
        print(&lt;some message&gt;)
        return
    if items_in_line[0] == "forward":
        turtle.forward(m)
    if items_in_line[0] in ("backward", "back"):
        turtle.back(m)
</snippet></ROW><ROW><id>13730161</id><snippet>try</snippet></ROW><ROW><id>13730161</id><snippet>except</snippet></ROW><ROW><id>13730161</id><snippet>items_in_line</snippet></ROW><ROW><id>13730161</id><snippet>IndexError</snippet></ROW><ROW><id>13730161</id><snippet>"forward foo"</snippet></ROW><ROW><id>13730161</id><snippet>"forward"</snippet></ROW><ROW><id>13730161</id><snippet>def comm(items_in_line):
    m = int(items_in_line[1])
    if items_in_line[0] == "forward":
        turtle.forward(m)
    if items_in_line[0] in("backward", "back"):
        turtle.back(m)
</snippet></ROW><ROW><id>13730257</id><snippet>ls C:\* -rec | %{if($_.GetAccessControl().Owner -like '*USERNAME*'){'{0} - {1}' -f $_.Name, $_.Getaccesscontrol().owner}}
</snippet></ROW><ROW><id>13730257</id><snippet>$result = @()
$user = '*{0}*' -f $env:USERNAME
$searchRoot = 'G:\'
$files = Get-ChildItem $searchRoot -recurse | Where-Object{$_.GetAccessControl().Owner -like $user}
foreach ($file in $files){
    $temp = New-Object PSCustomObject -Prop @{'Name' = $file.Name;
                                              'Path' = $file.Directory;
                                              'Owner' = $file.GetAccessControl().Owner
    }
    $result += $temp
}
$result | Out-GridView
</snippet></ROW><ROW><id>13730284</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.button = QtGui.QPushButton('ShowTime!', self)
        self.button.clicked.connect(self.handleButton)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.button)
        self._dialog = None

    def handleButton(self):
        if self._dialog is None:
            self._dialog = QtGui.QMessageBox(self)
            self._dialog.setWindowTitle('Messages')
            self._dialog.setModal(False)
            pos = self.pos()
            pos.setX(pos.x() + self.width() + 10)
            self._dialog.move(pos)
        self._dialog.setText(
            'The time is: %s' % QtCore.QTime.currentTime().toString())
        self._dialog.show()

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13730337</id><snippet>log</snippet></ROW><ROW><id>13730337</id><snippet>fw.write('\n'.join(line_list) + '\n')
</snippet></ROW><ROW><id>13730337</id><snippet>fw.write(line + '\n' for line in line_list)
</snippet></ROW><ROW><id>13730337</id><snippet>line_list.append(new_line + "\n")
</snippet></ROW><ROW><id>13730337</id><snippet>fw</snippet></ROW><ROW><id>13730337</id><snippet>cw = csv.writer(fw, delimiter='|')
</snippet></ROW><ROW><id>13730337</id><snippet>new_line = d[looking_for]+'|'+'|'.join(columns[1:])
line_list.append(new_line)
</snippet></ROW><ROW><id>13730337</id><snippet>row_list.append(d[looking_for] + columns[1:])
</snippet></ROW><ROW><id>13730337</id><snippet>fw.writelines(line_list)
</snippet></ROW><ROW><id>13730337</id><snippet>cw.writerows(row_list)
</snippet></ROW><ROW><id>13730337</id><snippet>csv.writer</snippet></ROW><ROW><id>13730337</id><snippet>open</snippet></ROW><ROW><id>13730337</id><snippet>write</snippet></ROW><ROW><id>13730449</id><snippet>zip()</snippet></ROW><ROW><id>13730449</id><snippet>In [10]: rows = 3

In [11]: zip(*itertools.izip_longest(*(iter(data),)*rows))
Out[11]: [(1, 4, 7, 10), (2, 5, 8, None), (3, 6, 9, None)]
</snippet></ROW><ROW><id>13730506</id><snippet>In [12]: a = np.array([[1,2,3], [4,5,6]])

In [13]: b = a.ravel()

In [14]: b
Out[14]: array([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>13730506</id><snippet>ravel()</snippet></ROW><ROW><id>13730506</id><snippet>view</snippet></ROW><ROW><id>13730506</id><snippet>a</snippet></ROW><ROW><id>13730506</id><snippet>b</snippet></ROW><ROW><id>13730506</id><snippet>a</snippet></ROW><ROW><id>13730506</id><snippet>ravel()</snippet></ROW><ROW><id>13730506</id><snippet>view</snippet></ROW><ROW><id>13730506</id><snippet>copy</snippet></ROW><ROW><id>13730506</id><snippet>a</snippet></ROW><ROW><id>13730506</id><snippet>In [15]: c = a.flatten()
</snippet></ROW><ROW><id>13730506</id><snippet>np.flat</snippet></ROW><ROW><id>13730506</id><snippet>In [20]: d = a.flat

In [21]: d
Out[21]: &lt;numpy.flatiter object at 0x8ec2068&gt;

In [22]: list(d)
Out[22]: [1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>13730573</id><snippet>int getVal(Foo &amp;foo) {
    int val_io;
    foo.getVal(val_io);
    return val_io;
};

BOOST_PYTHON_MODULE(libBar) {
    boost::python::def("getVal", getVal);
    ...
}
</snippet></ROW><ROW><id>13730573</id><snippet>In [1]: import libBar

In [2]: f = libBar.Foo()

In [3]: f
Out[3]: &lt;libBar.Foo at 0x2b483c0

In [3]: libBar.getVal(f)
Out[3]: 5
</snippet></ROW><ROW><id>13730607</id><snippet>id</snippet></ROW><ROW><id>13730607</id><snippet>urls.py</snippet></ROW><ROW><id>13730607</id><snippet>#urls.py
from appname.views import some_view

urlpatterns = patterns('',
    url(r'^schedule/addbid/(?P&lt;id&gt;\d+)$', some_view),
    ...
)
</snippet></ROW><ROW><id>13730607</id><snippet>views.py</snippet></ROW><ROW><id>13730607</id><snippet>Bids</snippet></ROW><ROW><id>13730607</id><snippet>id</snippet></ROW><ROW><id>13730607</id><snippet>request.user</snippet></ROW><ROW><id>13730607</id><snippet>biddschedule</snippet></ROW><ROW><id>13730607</id><snippet>#views.py
def some_view(request, id):
    if request.user.is_authenticated():
        # get the biddschedule from your DB
        # ...
        bids = models.Bids(id=id, owner=request.user, biddedschedule=biddedschedule)
        bids.save()
        return HttpResponse("OK")
    return Http404()
</snippet></ROW><ROW><id>13730609</id><snippet>cursor.execute("INSERT INTO registrants VALUES( " + "'" + first_name.strip() + "'" + ", " + "'" + last_name.strip() + "'" + ");")
</snippet></ROW><ROW><id>13730652</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>13730652</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13730677</id><snippet>&gt;&gt;&gt; a = [[1,2],[3,4],[5,6],7,8,9]
&gt;&gt;&gt; any(2 in i for i in a)
True
</snippet></ROW><ROW><id>13730698</id><snippet>self.buttonBox</snippet></ROW><ROW><id>13730698</id><snippet>self.buttonGroup = QtGui.QButtonGroup(self)
for button in self.buttonBox.findChildren(QtGui.QAbstractButton):
    self.buttonGroup.addButton(button)
</snippet></ROW><ROW><id>13731025</id><snippet>import pygame as pg
from pygame.locals import *

SIZE = (800, 600)
BGCOL = (128, 128, 128)
STIMCOL = (80, 255, 80)

screen = pg.display.set_mode((SIZE), HWSURFACE | DOUBLEBUF)
screen.fill(BGCOL)

surf = pg.Surface((200, 200), flags=HWSURFACE)
surf.fill(BGCOL)

pg.draw.rect(surf, STIMCOL, (10, 20, 40, 50))
pg.draw.rect(surf, STIMCOL,  (60, 70, 80, 90))

screen.blit(surf, (100, 100))

pg.display.flip()

running = True
while running:
    surf = pg.transform.rotate(surf, -1) # updating rotation on the surface
    screen.blit(surf, (100, 100)) #bliting the resulting image every frame
    pg.display.flip()
</snippet></ROW><ROW><id>13731204</id><snippet>aList</snippet></ROW><ROW><id>13731204</id><snippet>aList.append(p)</snippet></ROW><ROW><id>13731204</id><snippet>aList.append(k)</snippet></ROW><ROW><id>13731204</id><snippet>aList = []
for p in anotherList:
  aList.append(p) # &lt;== should have gotten error here first!
  try:
    k=p.someMethod()
    aList.append(k) #getting error here
  except someException:
    continue
 return aList
</snippet></ROW><ROW><id>13731210</id><snippet>for c in username:
    if c.isupper() == True:
        numupper += 1

    if numupper &gt; 0:
        print ("You have at least 1 uppercase in this username.")
    else:
        print ("You have no uppercase in this username.")
</snippet></ROW><ROW><id>13731210</id><snippet>for c in username:
    if c.isupper() == True:
        numupper += 1

if numupper &gt; 0:
    print ("You have at least 1 uppercase in this username.")
else:
    print ("You have no uppercase in this username.")
</snippet></ROW><ROW><id>13731210</id><snippet>c</snippet></ROW><ROW><id>13731210</id><snippet>d</snippet></ROW><ROW><id>13731210</id><snippet>e</snippet></ROW><ROW><id>13731210</id><snippet>c</snippet></ROW><ROW><id>13731210</id><snippet>numupper, numlower, numdigit = 0, 0, 0

for c in username:
    if c.isupper():
        numupper += 1
    if c.islower():
        numlower +=1
    if e.isdigit():
        numdigit += 1

# and now check numupper, numlower and numdigit
</snippet></ROW><ROW><id>13731210</id><snippet>== True</snippet></ROW><ROW><id>13731210</id><snippet>if</snippet></ROW><ROW><id>13731210</id><snippet>username.lower() == username</snippet></ROW><ROW><id>13731210</id><snippet>username.upper() == username</snippet></ROW><ROW><id>13731383</id><snippet>[{
  "type": "/film/film",
  "name": "Inception",
  "mid":  null,
  "starring": [{
    "actor": null,
    "mid":   null
  }]
}]​
</snippet></ROW><ROW><id>13731486</id><snippet>redis</snippet></ROW><ROW><id>13731546</id><snippet>for k, v in na.items():
    la.setdefault(k, []).extend(v)
</snippet></ROW><ROW><id>13731546</id><snippet>&gt;&gt;&gt; la = {'a':[1,2,3],'b':[4,5,6]}
&gt;&gt;&gt; na = {'a':[7,8,9],'b':[1,2,3]}
&gt;&gt;&gt; for k, v in na.items():
...     la.setdefault(k, []).extend(v)
...
&gt;&gt;&gt; la
{'a': [1, 2, 3, 7, 8, 9], 'b': [4, 5, 6, 1, 2, 3]}
</snippet></ROW><ROW><id>13731577</id><snippet>data</snippet></ROW><ROW><id>13731577</id><snippet>models.py::send()</snippet></ROW><ROW><id>13731577</id><snippet>    # Multi-part file uploads.
    if self.files:
        (body, content_type) = self._encode_files(self.files)
</snippet></ROW><ROW><id>13731577</id><snippet>models.py::_encode_files()</snippet></ROW><ROW><id>13731577</id><snippet>    fields = to_key_val_list(self.data)
    files = to_key_val_list(files)
</snippet></ROW><ROW><id>13731577</id><snippet>utils.py::to_key_val_list()</snippet></ROW><ROW><id>13731577</id><snippet>if isinstance(value, (str, bytes, bool, int)):
    raise ValueError('cannot encode objects that are not 2-tuples')
</snippet></ROW><ROW><id>13731577</id><snippet>requests.post('http://localhost:8080',
              files={'spot[photo]': open('test.jpg', 'rb')},
              data={'spot': 'spot_description'})
</snippet></ROW><ROW><id>13731584</id><snippet>settings.beginGroup('layouts')
settings.beginGroup('layoutname1')
# set various layout values...
settings.endGroup()
settings.beginGroup('layoutname2')
# set various layout values...
settings.endGroup()
settings.endGroup()
</snippet></ROW><ROW><id>13731584</id><snippet>layouts/layoutname1/value1=true
layouts/layoutname1/value2=true
...
layouts/layoutname2/value1=false
layouts/layoutname2/value2=false
...
</snippet></ROW><ROW><id>13731622</id><snippet>r = itertools.product(*candidates_len)
z = itertools.product(*candidates_name)

min_dist = None
for item, names in itertools.izip(r, z):
  dist = 0
  for n in range(len(item)):
    for i in range(n, len(item)):
      dist += (item[n]-item[i])**2
  if min_dist is None or dist &lt; min_dist:
    min_dist = dist
    best = item, names

print(best)
</snippet></ROW><ROW><id>13731622</id><snippet>z</snippet></ROW><ROW><id>13731622</id><snippet>itertools</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731622</id><snippet>r</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731622</id><snippet>matrix(x, dtype=int) for x in itertools.product(*candidates_len)</snippet></ROW><ROW><id>13731622</id><snippet>item</snippet></ROW><ROW><id>13731622</id><snippet>item - item.T</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731622</id><snippet>PyObject</snippet></ROW><ROW><id>13731622</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>13731622</id><snippet>grouper</snippet></ROW><ROW><id>13731622</id><snippet>itertools</snippet></ROW><ROW><id>13731622</id><snippet>numpy</snippet></ROW><ROW><id>13731724</id><snippet>songs = Song.objects.all()
</snippet></ROW><ROW><id>13732111</id><snippet>[:-1]</snippet></ROW><ROW><id>13732111</id><snippet>a[3:-1]
</snippet></ROW><ROW><id>13732111</id><snippet>a[3:]
</snippet></ROW><ROW><id>13732259</id><snippet>line = iterator.next()
next1 = iterator.next()

for next2 in iterator:
    #do stuff
    line = next1
    next1 = next2
</snippet></ROW><ROW><id>13732261</id><snippet>os.chdir()</snippet></ROW><ROW><id>13732261</id><snippet>os.system()</snippet></ROW><ROW><id>13732496</id><snippet>from PyQt4 import QtGui
import sys

class Test(QtGui.QWidget):
    def __init__(self):
        super().__init__()
        layout = QtGui.QVBoxLayout(self)

        gBBackupFromIntExt = QtGui.QGroupBox()
        layout.addWidget(gBBackupFromIntExt)

        bGBackupFromIntExt = QtGui.QButtonGroup(self)

        self.rBBackupFromExt = QtGui.QRadioButton()
        bGBackupFromIntExt.addButton(self.rBBackupFromExt)
        layout.addWidget(self.rBBackupFromExt)

        self.rBBackupFromInt = QtGui.QRadioButton()
        bGBackupFromIntExt.addButton(self.rBBackupFromInt)
        layout.addWidget(self.rBBackupFromInt)

        gBBackupToIntExt = QtGui.QGroupBox()
        layout.addWidget(gBBackupToIntExt)

        bGBackupToIntExt = QtGui.QButtonGroup(self)

        self.rBBackupToExt = QtGui.QRadioButton()
        bGBackupToIntExt.addButton (self.rBBackupToExt)
        layout.addWidget(self.rBBackupToExt)

        self.rBBackupToInt = QtGui.QRadioButton()
        bGBackupToIntExt.addButton (self.rBBackupToInt)
        layout.addWidget(self.rBBackupToInt)

a = QtGui.QApplication(sys.argv)
t = Test()
t.show()
a.exec()
</snippet></ROW><ROW><id>13732733</id><snippet>A[0:1,0:1] = B
</snippet></ROW><ROW><id>13732733</id><snippet>A[0:2,0:2] = B
</snippet></ROW><ROW><id>13732733</id><snippet>[0:1]</snippet></ROW><ROW><id>13732733</id><snippet>[0, 1)</snippet></ROW><ROW><id>13732733</id><snippet>0</snippet></ROW><ROW><id>13732733</id><snippet>[0:2]</snippet></ROW><ROW><id>13732733</id><snippet>[0, 2)</snippet></ROW><ROW><id>13732733</id><snippet>0</snippet></ROW><ROW><id>13732733</id><snippet>1</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>wx</snippet></ROW><ROW><id>13733073</id><snippet>/usr/lib</snippet></ROW><ROW><id>13733073</id><snippet>wx</snippet></ROW><ROW><id>13733073</id><snippet>.app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>virtualenv</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>macholib</snippet></ROW><ROW><id>13733073</id><snippet>altgraph</snippet></ROW><ROW><id>13733073</id><snippet>py2app</snippet></ROW><ROW><id>13733073</id><snippet>p2app</snippet></ROW><ROW><id>13733457</id><snippet>sublist = [key for key in keys if key in sub_list]
</snippet></ROW><ROW><id>13733457</id><snippet>sub_set = set(sublist)
sub_list = [key for key in keys if key in sub_set]
</snippet></ROW><ROW><id>13733457</id><snippet>sublist = sorted(sub_list, key=keys)
</snippet></ROW><ROW><id>13733457</id><snippet>sublist = sorted(sub_list, key=keys.index)
</snippet></ROW><ROW><id>13733457</id><snippet>keys = dict(zip(keys, range(len(keys))))
sublist = sorted(sub_list, key=keys)
</snippet></ROW><ROW><id>13733487</id><snippet>library(XML)
&gt; url &lt;- "http://www.houstondynamo.com/stats/season?page=0"
&gt; tbl &lt;- readHTMLTable(url)
&gt; head(tbl[[1]])
           Player POS GP GS MINS  G  A SHTS SOG GWG PKG/A HmG RdG G/90min  SC%
1      Will Bruin   F 32 31 2510 12  4   78  35   0   0/0   6   6    0.43 15.4
2      Brad Davis   M 31 28 2523  8 12   53  22   3   3/4   5   3    0.29 15.1
3     Brian Ching   F 30 13 1385  5  5   35  15   1   2/2   2   3    0.32 14.3
4   Boniek Garcia   M 17 17 1530  4  6   30  12   1   0/0   3   1    0.24 13.3
5      Calen Carr   M 26 17 1512  4  2   29  11   2   0/0   3   1    0.24 13.8
6 Macoumba Kandji   F 29 21 1630  4  2   34  16   1   0/0   3   1    0.22 11.8
</snippet></ROW><ROW><id>13733863</id><snippet>import logging
logging.getLogger().addHandler(logging.StreamHandler())
</snippet></ROW><ROW><id>13733863</id><snippet>import logging
logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
rootLogger = logging.getLogger()

fileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)
</snippet></ROW><ROW><id>13733863</id><snippet>2012-12-05 16:58:26,618 [MainThread  ] [INFO ]  my message
</snippet></ROW><ROW><id>13734176</id><snippet>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; sympy.sympify("t**5 - t + 3")
t**5 - t + 3
&gt;&gt;&gt; sympy.sympify("t**5 - t + 3").subs({"t": 10})
99993
</snippet></ROW><ROW><id>13734176</id><snippet>import sympy

def definition_to_function(s):
    lhs, rhs = s.split("=", 1)
    rhs = rhs.rstrip('; ')
    args = sympy.sympify(lhs).args
    f = sympy.sympify(rhs)
    def f_func(*passed_args):
        argdict = dict(zip(args, passed_args))
        result = f.subs(argdict)
        return float(result)
    return f_func
</snippet></ROW><ROW><id>13734176</id><snippet>&gt;&gt;&gt; s = "f(t)=(2.128795454425367)+(208.54359721863273)*t+(26.098128487929266)*t^2+(3.34369909584111)*t^3+(-0.3450228278737971)*t^4+(-0.018630757967458885)*t^5+(0.0015029038553239819)*t^6;"
&gt;&gt;&gt; f = definition_to_function(s)
&gt;&gt;&gt; f(0)
2.128795454425367
&gt;&gt;&gt; f(10)
4230.6764921149115
&gt;&gt;&gt; f = definition_to_function("f(a,b,c) = sin(a)+3*b-4*c")
&gt;&gt;&gt; f(1,2,3)
-5.158529015192103
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.sin(1)+3*2-4*3
-5.158529015192103
</snippet></ROW><ROW><id>13734321</id><snippet>name</snippet></ROW><ROW><id>13734321</id><snippet>view_func=lambda: name  # &lt;- points at the *symbol*, which holds the *last* value
# in the case of a loop
</snippet></ROW><ROW><id>13734321</id><snippet>view_maker = lambda name: (lambda: name)

for name in ('/hi', '/bye'):
    endpoint = name.replace("/", "")
    app.add_url_rule(name, view_func=view_maker(name), endpoint=endpoint)
</snippet></ROW><ROW><id>13734321</id><snippet>add_url_rule</snippet></ROW><ROW><id>13734321</id><snippet>endpoint</snippet></ROW><ROW><id>13734321</id><snippet>__name__</snippet></ROW><ROW><id>13734321</id><snippet>endpoint</snippet></ROW><ROW><id>13734321</id><snippet>__name__</snippet></ROW><ROW><id>13734650</id><snippet>try:
    print 'foo'
    # A lot more code...
    print 'bar'
except:
    raise # was: pass
</snippet></ROW><ROW><id>13734815</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; def splitWithIndices(s, c=' '):
...  p = 0
...  for k, g in groupby(s, lambda x:x==c):
...   q = p + sum(1 for i in g)
...   if not k:
...    yield p, q # or p, q-1 if you are really sure you want that
...   p = q
...
&gt;&gt;&gt; a = "This is a sentence"
&gt;&gt;&gt; list(splitWithIndices(a))
[(0, 4), (5, 7), (8, 9), (10, 18)]

&gt;&gt;&gt; a[0:4]
'This'
&gt;&gt;&gt; a[5:7]
'is'
&gt;&gt;&gt; a[8:9]
'a'
&gt;&gt;&gt; a[10:18]
'sentence'
</snippet></ROW><ROW><id>13735021</id><snippet>RequestHandler.send_error</snippet></ROW><ROW><id>13735021</id><snippet>class MyHandler(tornado.web.RequestHandler):
    def get(self):
        self.clear()
        self.set_status(400)
        self.finish("&lt;html&gt;&lt;body&gt;My custom body&lt;/body&gt;&lt;/html&gt;")
</snippet></ROW><ROW><id>13735066</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; 'SomePage?%s' % urllib.urlencode({'param': u'が'.encode('utf-8')})
'SomePage?param=%E3%81%8C'
</snippet></ROW><ROW><id>13735134</id><snippet>session.clear()</snippet></ROW><ROW><id>13735134</id><snippet>save_cookie()</snippet></ROW><ROW><id>13735134</id><snippet>session_expires</snippet></ROW><ROW><id>13735155</id><snippet>In [47]: def RandomAlter(l, func, char):
    return [''.join([func(w[x]) if x == char else w[x] for x in xrange(len(w))]) for w in l]
   ....:

In [48]: RandomAlter(words, str.upper, 4)
Out[48]: ['housE', 'flowEr', 'tree']

In [49]: RandomAlter([str.upper(w) for w in words], str.lower, 2)
Out[49]: ['HOuSE', 'FLoWER', 'TReE']

In [50]: RandomAlter(words, lambda x: '_', 4)
Out[50]: ['hous_', 'flow_r', 'tree']
</snippet></ROW><ROW><id>13735155</id><snippet>RandomAlter</snippet></ROW><ROW><id>13735155</id><snippet>def RandomAlter(l, func, char):
    # For each word in our list
    main_list = []
    for w in l:
        # Create a container that is going to hold our new 'word'
        new_word = []
        # Iterate over a range that is equal to the number of chars in the word
        # xrange is a more memory efficient 'range' - same behavior
        for x in xrange(len(w)):
            # If the current position is the character we want to modify
            if x == char:
                # Apply the function to the character and append to our 'word'
                # This is a cool Python feature - you can pass around functions
                # just like any other variable
                new_word.append(func(w[x]))
            else:
                # Just append the normal letter
                new_word.append(w[x])

        # Now we append the 'word' to our main_list. However since the 'word' is
        # a list of letters, we need to 'join' them together to form a string
        main_list.append(''.join(new_word))

    # Now just return the main_list, which will be a list of altered words
    return main_list
</snippet></ROW><ROW><id>13735169</id><snippet>float (raw_input("What is the length and width? ")).split(',')
</snippet></ROW><ROW><id>13735169</id><snippet>split(',')</snippet></ROW><ROW><id>13735169</id><snippet>float</snippet></ROW><ROW><id>13735169</id><snippet>[float(x) for x in raw_input("What is the length and width? ")).split(',')]
</snippet></ROW><ROW><id>13735169</id><snippet>map</snippet></ROW><ROW><id>13735169</id><snippet>map(float, raw_input("What is the length and width? ")).split(','))
</snippet></ROW><ROW><id>13735169</id><snippet>x[2]</snippet></ROW><ROW><id>13735199</id><snippet>Location</snippet></ROW><ROW><id>13735199</id><snippet>geturl</snippet></ROW><ROW><id>13735199</id><snippet>urlopen</snippet></ROW><ROW><id>13735199</id><snippet>meta http-equiv="refresh"</snippet></ROW><ROW><id>13735297</id><snippet>import csv

with open('checkfile.csv', 'rb') as checkfile:
    product_result = {
        record['ProductCode']: record for record in csv.DictReader(checkfile)}

with open('infile.csv', 'rb') as infile:
    with open('outfile.csv', 'wb') as outfile:
        reader = csv.DictReader(infile)
        writer = csv.DictWriter(outfile, reader.fieldnames)
        writer.writeheader()
        for item in reader:
            record = product_result.get(item['SKU'], None)
            if record:
                item['ChannelProfileID'] = record[' Stock']  # ???
                item['CostPrice'] = record[' CostPrice']
            else:
                item['ChannelProfileID'] = None
                item['CostPrice'] = None
            writer.writerow(item)
</snippet></ROW><ROW><id>13735297</id><snippet>???</snippet></ROW><ROW><id>13735325</id><snippet>numberOfRows = 3
numberOfColumns = 4
z = 0

squares = range(numberOfRows * numberOfColumns)

row = [[] for _ in xrange(numberOfRows)]
for x in range(numberOfRows):
    for y in range(numberOfColumns):
        row[x].append(squares[y+z])
    z += 4

print row
</snippet></ROW><ROW><id>13735325</id><snippet>row</snippet></ROW><ROW><id>13735325</id><snippet>row = []
for x in range(numberOfRows):
    row.append([squares[y+z] for y in range(numberOfColumns)])
    z += numberOfColumns
</snippet></ROW><ROW><id>13735325</id><snippet>row</snippet></ROW><ROW><id>13735506</id><snippet>import sqlite3
cur = sqlite3.connect('filename.db').cursor()
query = db.execute('SELECT * FROM A_TABLE')
colname = [ d[0] for d in query.description ]
result_list = [ dict(zip(colname, r)) for r in query.fetchall() ]
cur.close()
cur.connection.close()
print result_list
</snippet></ROW><ROW><id>13735586</id><snippet>beaker</snippet></ROW><ROW><id>13735586</id><snippet>bottle</snippet></ROW><ROW><id>13735586</id><snippet>import bottle
from bottle import request, route, hook
import beaker.middleware

session_opts = {
    'session.type': 'file',
    'session.data_dir': './session/',
    'session.auto': True,
}

app = beaker.middleware.SessionMiddleware(bottle.app(), session_opts)
</snippet></ROW><ROW><id>13735586</id><snippet>bottle.run(app=app)
</snippet></ROW><ROW><id>13735586</id><snippet>request.environ['beaker_session']</snippet></ROW><ROW><id>13735586</id><snippet>@hook('before_request')
def setup_request():
    request.session = request.environ['beaker.session']
</snippet></ROW><ROW><id>13735586</id><snippet>setup_request</snippet></ROW><ROW><id>13735586</id><snippet>bottle.request</snippet></ROW><ROW><id>13735586</id><snippet>request.session</snippet></ROW><ROW><id>13735586</id><snippet>@route('/')
def index():
    if 'something' in request.session:
       return 'It worked!'

    request.session['something'] = 1
</snippet></ROW><ROW><id>13735606</id><snippet>:</snippet></ROW><ROW><id>13735606</id><snippet>if day &lt; 2999: # &lt;- need a colon here  
    tempvals[day+1]= T+dT
</snippet></ROW><ROW><id>13735606</id><snippet>dT =(((S*(1-A))-((epsilon_tow*sig*(tempvals[day]**4))/rho_c )*dt # missing parens
</snippet></ROW><ROW><id>13735606</id><snippet>dT = ((S*(1-A))-((epsilon_tow*sig*(tempvals[day]**4))/rho_c))*dt
</snippet></ROW><ROW><id>13735800</id><snippet>fmin_bfgs</snippet></ROW><ROW><id>13735800</id><snippet>fmin_l_bfgs_b</snippet></ROW><ROW><id>13735800</id><snippet>len(x) &gt; 7000</snippet></ROW><ROW><id>13735800</id><snippet>maxfun</snippet></ROW><ROW><id>13735800</id><snippet>l_bfgs_b</snippet></ROW><ROW><id>13735800</id><snippet>***
</snippet></ROW><ROW><id>13735800</id><snippet>pdb</snippet></ROW><ROW><id>13735800</id><snippet>python -m pdb your_script.py</snippet></ROW><ROW><id>13735863</id><snippet>if</snippet></ROW><ROW><id>13735863</id><snippet>if len(table) == 0: print('There are no cards on the table.')
</snippet></ROW><ROW><id>13735863</id><snippet>if len(table) == 0:
    print('There are no cards on the table.')
</snippet></ROW><ROW><id>13735863</id><snippet>else: for card in range(len(table)): print names[table[card][0]] + ' played a ' + str(table[card][1]) + '.' ?
</snippet></ROW><ROW><id>13735863</id><snippet>for line in range(50):

    def show_table():
        if len(table) == 0:
            print('There are no cards on the table.')
        else:
            for card in range(len(table)):
                print names[table[card][0]] + ' played a ' + str(table[card][1]) + '.' ?
</snippet></ROW><ROW><id>13735863</id><snippet>print names[table[card][0]] + ' played a ' + str(table[card][1]) + '.' ?
</snippet></ROW><ROW><id>13735863</id><snippet>print</snippet></ROW><ROW><id>13735863</id><snippet>?</snippet></ROW><ROW><id>13735863</id><snippet>print(names[table[card][0]] + ' played a ' + str(table[card][1]) + '.')
</snippet></ROW><ROW><id>13735863</id><snippet>for</snippet></ROW><ROW><id>13735863</id><snippet>def show_table():</snippet></ROW><ROW><id>13735863</id><snippet>pass</snippet></ROW><ROW><id>13735863</id><snippet>def show_table():
    pass
</snippet></ROW><ROW><id>13736053</id><snippet>add</snippet></ROW><ROW><id>13736053</id><snippet>extend</snippet></ROW><ROW><id>13736053</id><snippet>remove</snippet></ROW><ROW><id>13736053</id><snippet>sort</snippet></ROW><ROW><id>13736053</id><snippet>remove</snippet></ROW><ROW><id>13736053</id><snippet>foo.bars.remove(bar)
</snippet></ROW><ROW><id>13736053</id><snippet>foo</snippet></ROW><ROW><id>13736053</id><snippet>Original foo:
bars {
  i: 15
}
bars {
  i: 32
}

foo without bar:
bars {
  i: 32
}
</snippet></ROW><ROW><id>13736053</id><snippet>nth</snippet></ROW><ROW><id>13736053</id><snippet>del</snippet></ROW><ROW><id>13736053</id><snippet># Delete the second element
del foo.bars[1]
</snippet></ROW><ROW><id>13736053</id><snippet>Original foo:
bars {
  i: 15
}
bars {
  i: 32
}

Removing index position 1:
bars {
  i: 15
}
</snippet></ROW><ROW><id>13736127</id><snippet>static_file</snippet></ROW><ROW><id>13736127</id><snippet>from bottle import static_file    

@route('/download/&lt;filename:path&gt;')
def download(filename):
    return static_file(filename, root='/path/to/static/files', download=filename)
</snippet></ROW><ROW><id>13736453</id><snippet>a=2
s = np.random.zipf(a, 1000)
result = (s/float(max(s)))*1000

print min(s), max(s)
print min(result), max(result)
</snippet></ROW><ROW><id>13736571</id><snippet>float</snippet></ROW><ROW><id>13736571</id><snippet>&gt;&gt;&gt; from numpy import array
&gt;&gt;&gt; a = array([1, 2, 3, 4, 5])
&gt;&gt;&gt; new_max = 6 
&gt;&gt;&gt; a / max(a)            # This is probably what happens to you
array([0, 0, 0, 0, 1])
&gt;&gt;&gt; a / float(max(a))     # Convert that integer to a float and it'll work
array([ 0.2,  0.4,  0.6,  0.8,  1. ])
&gt;&gt;&gt; a / float(max(a)) * new_max
array([ 1.2,  2.4,  3.6,  4.8,  6. ])
</snippet></ROW><ROW><id>13736612</id><snippet>None</snippet></ROW><ROW><id>13736789</id><snippet>yesterday</snippet></ROW><ROW><id>13736789</id><snippet>datetime.date</snippet></ROW><ROW><id>13736789</id><snippet>from datetime import datetime, time, timedelta

yesterday = datetime.utcnow() - timedelta(days=1)
dt = datetime.combine(yesterday.date(), time(0, 0)) # midnight
rfc3339str = dt.isoformat() + "Z"
</snippet></ROW><ROW><id>13736815</id><snippet>self[something]
</snippet></ROW><ROW><id>13736862</id><snippet>FileType</snippet></ROW><ROW><id>13736862</id><snippet>stdin</snippet></ROW><ROW><id>13736862</id><snippet>stdout</snippet></ROW><ROW><id>13736888</id><snippet>urllib2.unquote</snippet></ROW><ROW><id>13736888</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; print urllib2.unquote('%B9%F3%D6%DD%C3%A9%CC%A8').decode('gbk')
贵州茅台
</snippet></ROW><ROW><id>13737185</id><snippet>&gt;&gt;&gt; u,s,v = linalg.svd(A)
&gt;&gt;&gt; s
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
        0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13737185</id><snippet>&gt;&gt;&gt; rows = range(10,15)
&gt;&gt;&gt; cols = range(5,8)
&gt;&gt;&gt; A[rows][:,cols]
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
</snippet></ROW><ROW><id>13737185</id><snippet>&gt;&gt;&gt; A[15:32, 2:7]
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13737219</id><snippet>Game 1:     2,000  (7-5)*1000
Game 2:     7,500  (7.5-5)*3000
Game 3:   546,000  (8.9-5)*140000
Game 4:        25  (10-5)*5
</snippet></ROW><ROW><id>13737269</id><snippet>fields</snippet></ROW><ROW><id>13737269</id><snippet>fields</snippet></ROW><ROW><id>13737269</id><snippet>auto_now</snippet></ROW><ROW><id>13737343</id><snippet>title = re.sub(r'^([a-z]\s)*', '', 'a b c d Wikipedia Reference')
</snippet></ROW><ROW><id>13737388</id><snippet>&gt;&gt;&gt; s = "a \tb     c\t\t\td"
&gt;&gt;&gt; s.split()
['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>13737410</id><snippet>while</snippet></ROW><ROW><id>13737410</id><snippet>Rate = 0
while (Rate &lt; 0.5) or (Rate &gt; 2.0):
    Rate = input ("Enter Desired Rate of Charge: ") #User will be prompted to enter the charge rate of the system
    if Rate &lt; 0.5:
    #If the charge rate entered is less than 0.5 kWhs
        print "Charge Rate Too Low: Please consider revision" #Tells the user the rate is too low
    elif Rate &gt; 2.0:
    #Also, if the charge rate entered is greater than 2.0 kWhs...
        print "Charge Rate Too High: Please consider revision" #Tells the user the rate is too high
    else:
    #Otherwise, for any number entered between the bounds of 0.5 and 2.0 kWhs...
        print '\n' #Page break for new conditions.
</snippet></ROW><ROW><id>13737807</id><snippet>float_value</snippet></ROW><ROW><id>13737807</id><snippet>Sum_DB.all()</snippet></ROW><ROW><id>13737807</id><snippet>float_value</snippet></ROW><ROW><id>13737807</id><snippet>class Sum_DB(db.Model):
    name_of_profile = db.StringProperty(required = True)
    float_value= db.FloatProperty()


class MainHandler(webapp2.RequestHandler):
  def get(self, *args, **kwargs):
    r = Sum_DB(name_of_profile='test1', float_value=float(1.2359))
    s = Sum_DB(name_of_profile='test2', float_value=float(2.2355))
    t = Sum_DB(name_of_profile='test3', float_value=float(4.2185))

    r.put()
    s.put()
    t.put()

    # Using the Query class
    query = Sum_DB.all()

    # You can now iterate over that 'query', with each element
    # representing an entity from your datastore. Each entity
    # will have the properties you defined in Sum_DB, so you 
    # can access them by name.
    sum_me_up = sum(result.float_value for result in query)

    # Or using GQL - the concept/result is the same
    query2 = db.GqlQuery('SELECT * from Sum_DB')
    sum_me_up2 = sum(result.float_value for result in query2)

    self.response.out.write('Query: {0} | GQL: {1}'.format(sum_me_up,
                                                           sum_me_up2))


app = webapp2.WSGIApplication([
                   ('/', MainHandler),
                   ],
                   debug=True)
</snippet></ROW><ROW><id>13738042</id><snippet>&gt;&gt;&gt; print x
%.2f\u00B0
&gt;&gt;&gt; print x.decode('unicode-escape')
%.2f°
</snippet></ROW><ROW><id>13738145</id><snippet>with</snippet></ROW><ROW><id>13738302</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'This is a good doll http://www.google.com/a/bs/jdd/etc/etc/a.py'
&gt;&gt;&gt; re.sub(r'(?:https?://)([^/]+)(?:\S+)', r"\1", s)
'This is a good doll www.google.com'
</snippet></ROW><ROW><id>13738369</id><snippet>delete_elastic_ip</snippet></ROW><ROW><id>13738369</id><snippet>url_for</snippet></ROW><ROW><id>13738369</id><snippet>from flask import url_for, redirect
.... your code ...
return url_for('delete_elastic_ip', region=None, ip=None)
</snippet></ROW><ROW><id>13738369</id><snippet>redirect</snippet></ROW><ROW><id>13738369</id><snippet>from flask import url_for, redirect
... your code...
return redirect(url_for('delete_elastic_ip', region=None, ip=None))
</snippet></ROW><ROW><id>13738631</id><snippet>print "There were " Remaining, " kWhs remaing from the last charge. 0 kWhs were charged."
print "There were " Remaining, " kWhs remaing from the last charge. " kWh, "kWhs were added to recharge battery."
</snippet></ROW><ROW><id>13738631</id><snippet>,</snippet></ROW><ROW><id>13738631</id><snippet>Remaining</snippet></ROW><ROW><id>13738631</id><snippet>kWh</snippet></ROW><ROW><id>13738631</id><snippet>print "There were", Remaining, "kWhs remaing from the last charge. 0 kWhs were charged."
print "There were", Remaining, "kWhs remaing from the last charge. ", kWh, "kWhs were added to recharge battery."
</snippet></ROW><ROW><id>13738631</id><snippet>print "Battery Fully Charged!"
print "There were", Remaining, "kWhs remaing from the last charge. ", # notice the ,
if kWh &lt;=0:
    print "0 kWhs were charged."
else:
    print "kWh, "kWhs were added to recharge battery."
print "Buckle up! The rewards of the journey far outweigh the risk of leaving the garage!"
</snippet></ROW><ROW><id>13738631</id><snippet>kWh</snippet></ROW><ROW><id>13738631</id><snippet>kWhs</snippet></ROW><ROW><id>13739220</id><snippet>\u00B0</snippet></ROW><ROW><id>13739220</id><snippet>o</snippet></ROW><ROW><id>13739220</id><snippet>print (fmt % (temp if not args.in_fahrenheit else temp * (9.0/5.0) + 32, )).encode('latin1')
</snippet></ROW><ROW><id>13739220</id><snippet>latin1</snippet></ROW><ROW><id>13739220</id><snippet>utf8</snippet></ROW><ROW><id>13739547</id><snippet>import itertools

l = [s.strip() for s in open('test.txt')]

for i in range(len(l)):
  print '\n'.join(map(' | '.join, itertools.combinations(l, i + 1)))
</snippet></ROW><ROW><id>13739547</id><snippet>Hello World
99 Bottles of Beer
Humpty Dumpty Sat on the wall
Hello World | 99 Bottles of Beer
Hello World | Humpty Dumpty Sat on the wall
99 Bottles of Beer | Humpty Dumpty Sat on the wall
Hello World | 99 Bottles of Beer | Humpty Dumpty Sat on the wall
</snippet></ROW><ROW><id>13739547</id><snippet>'\n'.join()</snippet></ROW><ROW><id>13739547</id><snippet>for i in range(len(l)):
  for c in map(' | '.join, itertools.combinations(l, i + 1)):
    print c
</snippet></ROW><ROW><id>13739695</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>13739695</id><snippet>class</snippet></ROW><ROW><id>13739695</id><snippet>#!/usr/bin/env python
from bs4 import BeautifulSoup # $ pip install beautifulsoup4

with open('input.xml', 'rb') as file:
    soup = BeautifulSoup(file)

elements = soup.find_all("div", class_="header name quantity".split())
print("\n".join("{} {}".format(el['class'], el.get_text()) for el in elements))
</snippet></ROW><ROW><id>13739695</id><snippet>['header']  content 
['name']  content 
['quantity']  content 
['name']  content 
['quantity']  content 
['header']  content2 
['name']  content2 
['quantity']  content2 
['name']  content2 
['quantity']  content2 
</snippet></ROW><ROW><id>13739851</id><snippet>is_alive()</snippet></ROW><ROW><id>13739851</id><snippet>ssh</snippet></ROW><ROW><id>13739851</id><snippet>ssh</snippet></ROW><ROW><id>13739851</id><snippet>-n</snippet></ROW><ROW><id>13739851</id><snippet>stdin</snippet></ROW><ROW><id>13739851</id><snippet>sp = subprocess.Popen(..., stdin=subprocess.PIPE)
sp.stdin.close()
</snippet></ROW><ROW><id>13740031</id><snippet>'</snippet></ROW><ROW><id>13740031</id><snippet>"</snippet></ROW><ROW><id>13740031</id><snippet>"</snippet></ROW><ROW><id>13740031</id><snippet>'</snippet></ROW><ROW><id>13740031</id><snippet>a == b</snippet></ROW><ROW><id>13740031</id><snippet>False</snippet></ROW><ROW><id>13740031</id><snippet>\</snippet></ROW><ROW><id>13740031</id><snippet>"</snippet></ROW><ROW><id>13740031</id><snippet>'</snippet></ROW><ROW><id>13740031</id><snippet>&gt;&gt;&gt; '\'"'
'\'"'
&gt;&gt;&gt; """Tripple quoted means you can use both without escaping them: "'"""
'Tripple quoted means you can use both without escaping them: "\''
</snippet></ROW><ROW><id>13740036</id><snippet>all()</snippet></ROW><ROW><id>13740036</id><snippet>all(A)</snippet></ROW><ROW><id>13740036</id><snippet>all(B)</snippet></ROW><ROW><id>13740036</id><snippet>all(A + B)</snippet></ROW><ROW><id>13740036</id><snippet>all({})</snippet></ROW><ROW><id>13740036</id><snippet>all([]) == True</snippet></ROW><ROW><id>13740036</id><snippet>all()</snippet></ROW><ROW><id>13740036</id><snippet>class Node:
    def isValid(self):
        return some_condition(self) and all(child.isValid for child in self.children)
</snippet></ROW><ROW><id>13740391</id><snippet>ipython --pylab</snippet></ROW><ROW><id>13740391</id><snippet>inp = normal(size=1000)
h = hist(inp)
</snippet></ROW><ROW><id>13740391</id><snippet>bar(h[1][:-1], h[0]/float(len(inp)), diff(h[1]))
</snippet></ROW><ROW><id>13740532</id><snippet>scipy.signal.filtfilt
scipy.signal.lfilter
</snippet></ROW><ROW><id>13740532</id><snippet>convolve</snippet></ROW><ROW><id>13740532</id><snippet>fftconvolve</snippet></ROW><ROW><id>13740532</id><snippet>b, a = scipy.signal.butter(N, Wn, 'low')
output_signal = scipy.signal.filtfilt(b, a, input_signal)
</snippet></ROW><ROW><id>13740532</id><snippet>Wn</snippet></ROW><ROW><id>13740532</id><snippet>Wn=0.5</snippet></ROW><ROW><id>13740532</id><snippet>filtfilt</snippet></ROW><ROW><id>13740532</id><snippet>lfilter</snippet></ROW><ROW><id>13740532</id><snippet>filter</snippet></ROW><ROW><id>13740532</id><snippet>lfilter</snippet></ROW><ROW><id>13740532</id><snippet>filtfilt</snippet></ROW><ROW><id>13740918</id><snippet>MAGIC_WORD = r'JPEG'  # it's example... just example
l = list(c for c in f.read(len(MAGIC_WORD)))
offset = 0
while True:
    if ''.join(l) == MAGIC_WORD:
        return offset
        offset += 1
        l.pop(0)
        l.append(f.read(1))
</snippet></ROW><ROW><id>13741263</id><snippet>std::map&lt;std::string, boost::python::object&gt;</snippet></ROW><ROW><id>13741263</id><snippet>__getattr__()</snippet></ROW><ROW><id>13741263</id><snippet>__setattr__()</snippet></ROW><ROW><id>13741263</id><snippet>boost::python::ptr()</snippet></ROW><ROW><id>13741263</id><snippet>__setattr__()</snippet></ROW><ROW><id>13741263</id><snippet>add_property()</snippet></ROW><ROW><id>13741263</id><snippet>__getattr__()</snippet></ROW><ROW><id>13741263</id><snippet>__setattr__()</snippet></ROW><ROW><id>13741263</id><snippet>boost::python::object PyMyModule_global;
</snippet></ROW><ROW><id>13741263</id><snippet>class MyClass
{
public:
   //Python checks the class attributes before it calls __getattr__ so we don't have to do anything special here.
   boost::python::object Py_GetAttr(std::string str)
   {
      if(dict.find(str) == dict.end())
      {
         PyErr_SetString(PyExc_AttributeError, JFormat::format("MyClass instance has no attribute '{0}'", str).c_str());
         throw boost::python::error_already_set();
      }
      return dict[str];
   }

   //However, with __setattr__, python doesn't do anything with the class attributes first, it just calls __setattr__.
   //Which means anything that's been defined as a class attribute won't be modified here - including things set with
   //add_property(), def_readwrite(), etc.
   void Py_SetAttr(std::string str, boost::python::object val)
   {
      try
      {
         //First we check to see if the class has an attribute by this name.
         boost::python::object obj = PyMyModule_global["MyClass"].attr(str.c_str());
         //If so, we call the old cached __setattr__ function.
         PyMyModule_global["MyClass"].attr("__setattr_old__")(ptr(this), str, val);
      }
      catch(boost::python::error_already_set &amp;e)
      {
         //If it threw an exception, that means that there is no such attribute.
         //Put it on the persistent dict.
         PyErr_Clear();
         dict[str] = val;
      }
   }
private:
   std::map&lt;std::string, boost::python::object&gt; dict;
};
</snippet></ROW><ROW><id>13741263</id><snippet>BOOST_PYTHON_MODULE(MyModule)
{
   boost::python::class_&lt;MyClass&gt;("MyClass", boost::python::no_init)
      .def("__getattr__", &amp;MyClass::Py_GetAttr)
      .def("__setattr_new__", &amp;MyClass::Py_SetAttr);
}
</snippet></ROW><ROW><id>13741263</id><snippet>void PyInit()
{
   //Initialize module
   PyImport_AppendInittab( "MyModule", &amp;initMyModule );
   //Initialize Python
   Py_Initialize();

   //Grab __main__ and its globals
   boost::python::object main = boost::python::import("__main__");
   boost::python::object global = main.attr("__dict__");

   //Import the module and grab its globals
   boost::python::object PyMyModule = boost::python::import("MyModule");
   global["MyModule"] = PyMyModule;
   PyMyModule_global = PyMyModule.attr("__dict__");

   //Overload MyClass's setattr, so that it will work with already defined attributes while persisting new ones
   PyMyModule_global["MyClass"].attr("__setattr_old__") = PyMyModule_global["MyClass"].attr("__setattr__");
   PyMyModule_global["MyClass"].attr("__setattr__") = PyMyModule_global["MyClass"].attr("__setattr_new__");
}
</snippet></ROW><ROW><id>13741263</id><snippet>dict</snippet></ROW><ROW><id>13741263</id><snippet>__dict__</snippet></ROW><ROW><id>13741439</id><snippet>data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())
</snippet></ROW><ROW><id>13741439</id><snippet>weekdays_only = data[data['weekday'] &lt; 5 ]
</snippet></ROW><ROW><id>13741543</id><snippet>from xml.dom import minidom
import pdb

def get_e(dom, tag):
    l=[]
    els=dom.getElementsByTagName(tag)
    for e in els:
        for child_el in e.childNodes:
            # if this was an element node get its children
            if child_el.nodeType == e.ELEMENT_NODE:
                l.extend(get_e(e, child_el.tagName))
            else:
                l.append(child_el)
    return l

def get_text(els):
    l=[]
    for e in els:
        if e.nodeType == e.TEXT_NODE:
            l.append(e.data)
    return l

dom = minidom.parse('s.xml')
print get_text(get_e(dom, 'td'))
</snippet></ROW><ROW><id>13741543</id><snippet>import xml.etree.ElementTree as ET
et = ET.parse('s.xml')
print [e.findtext('.') for e in et.findall('.//*')]
</snippet></ROW><ROW><id>13741865</id><snippet>import gobject

class XX(gobject.GObject):
    # define signal parameters
    __gsignals__ = { 'signal-name' : (gobject.SIGNAL_RUN_FIRST, gobject.SIGNAL_TYPE_NONE, ())}

    gobject.__init__(self)

    def __init__(self):
        # some code

    def function(self):
        # emit signal
        self.emit('signal-name')
</snippet></ROW><ROW><id>13741974</id><snippet>setuptools</snippet></ROW><ROW><id>13741974</id><snippet>pkg_resources</snippet></ROW><ROW><id>13742435</id><snippet>coo_matrix</snippet></ROW><ROW><id>13742435</id><snippet>X1.data</snippet></ROW><ROW><id>13742435</id><snippet>X2.data</snippet></ROW><ROW><id>13742435</id><snippet>indices</snippet></ROW><ROW><id>13742435</id><snippet>indptr</snippet></ROW><ROW><id>13742435</id><snippet>row</snippet></ROW><ROW><id>13742435</id><snippet>col</snippet></ROW><ROW><id>13742435</id><snippet>coo_matrix</snippet></ROW><ROW><id>13742435</id><snippet>csr_matrix</snippet></ROW><ROW><id>13742605</id><snippet>doRemove()
   fork()
   if child
      call huge remove
   else
      return
</snippet></ROW><ROW><id>13742662</id><snippet>&gt;&gt;&gt; a = """&lt;record&gt;
...     &lt;player_birthday&gt;1979-09-23&lt;/player_birthday&gt;
...     &lt;player_name&gt;Orene Ai'i&lt;/player_name&gt;
...     &lt;player_team&gt;Blues&lt;/player_team&gt;
...     &lt;player_id&gt;453&lt;/player_id&gt;
...     &lt;player_height&gt;170&lt;/player_height&gt;
...     &lt;player_position&gt;F&amp;W&lt;/player_position&gt;   &lt;---- a '&amp;' here.
...     &lt;player_weight&gt;75&lt;/player_weight&gt;
... &lt;/record&gt;"""
&gt;&gt;&gt; 
&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; x = ET.fromstring(a)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib64/python2.7/xml/etree/ElementTree.py", line 1282, in XML
    parser.feed(text)
  File "/usr/lib64/python2.7/xml/etree/ElementTree.py", line 1624, in feed
    self._raiseerror(v)
  File "/usr/lib64/python2.7/xml/etree/ElementTree.py", line 1488, in _raiseerror
    raise err
xml.etree.ElementTree.ParseError: not well-formed (invalid token): line 7, column 24
</snippet></ROW><ROW><id>13742754</id><snippet>import re

print(re.sub(r'''(?x)    # VERBOSE mode
                 [#]     # literal #
                 |       # or
                 \s*     # zero-or-more spaces
                 \w*     # zero-or-more alphanumeric characters 
                 [#]     # literal #
                 \w*     # zero-or-more alphanumeric characters 
                 $       # end of line
                 ''',
             '', # substitute matched text with an empty string
             'What a #great day #happy'))
</snippet></ROW><ROW><id>13742754</id><snippet>What a great day
</snippet></ROW><ROW><id>13742857</id><snippet>CO</snippet></ROW><ROW><id>13742857</id><snippet>CORP</snippet></ROW><ROW><id>13742857</id><snippet>.*?</snippet></ROW><ROW><id>13742857</id><snippet>.*?(?&lt;!..CO|CORP)\.
</snippet></ROW><ROW><id>13743316</id><snippet>__doc__</snippet></ROW><ROW><id>13743316</id><snippet>B.myfunction</snippet></ROW><ROW><id>13743316</id><snippet>A.myfunction</snippet></ROW><ROW><id>13743316</id><snippet>def copydoc(fromfunc, sep="\n"):
    """
    Decorator: Copy the docstring of `fromfunc`
    """
    def _decorator(func):
        sourcedoc = fromfunc.__doc__
        if func.__doc__ == None:
            func.__doc__ = sourcedoc
        else:
            func.__doc__ = sep.join([sourcedoc, func.__doc__])
        return func
    return _decorator

class A(object):
  def myfunction():
    """Documentation for A."""
    pass

class B(A):
  @copydoc(A.myfunction)
  def myfunction():
    """Extra details for B."""
    pass
</snippet></ROW><ROW><id>13743316</id><snippet>@copydoc(A.myfunction)</snippet></ROW><ROW><id>13743316</id><snippet>@copydoc(A)</snippet></ROW><ROW><id>13743592</id><snippet>request.GET.get('expr', [])[:1]
</snippet></ROW><ROW><id>13743676</id><snippet>links</snippet></ROW><ROW><id>13743676</id><snippet>for i, link in enumerate(links):
    links[i] = None
    ...
</snippet></ROW><ROW><id>13743676</id><snippet>memmove</snippet></ROW><ROW><id>13743676</id><snippet>while links:
    link = links.pop(0)
    ...
</snippet></ROW><ROW><id>13743728</id><snippet>from __future__ import division

self.nov_slovar = {}
for key, value in self.dict.iteritems():
    try:
        self.nov_slovar[key] = sum(value)/len(value)
    except TypeError:  # can't sum non-numbers; skip those
        pass
</snippet></ROW><ROW><id>13744159</id><snippet>out = open(sys.argv[2],'w')
out = messenger_rna.translate()
out.close()
</snippet></ROW><ROW><id>13744159</id><snippet>out.write(messenger_rna.translate())
</snippet></ROW><ROW><id>13744159</id><snippet>.translate()</snippet></ROW><ROW><id>13744159</id><snippet>#!/usr/bin/env python

import sys
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC

with open(sys.argv[1],'r') as infile: # for auto-closing
    messenger_rna = Seq(infile, IUPAC.unambiguous_rna)
    # if Seq() takes a string rather than a file, do infile.read() instead.

with open(sys.argv[2],'w') as outfile:
    outfile.write(messenger_rna.translate())
</snippet></ROW><ROW><id>13744430</id><snippet>%</snippet></ROW><ROW><id>13744430</id><snippet>i, j, k</snippet></ROW><ROW><id>13744430</id><snippet>i</snippet></ROW><ROW><id>13744430</id><snippet>j, k</snippet></ROW><ROW><id>13744430</id><snippet>hab</snippet></ROW><ROW><id>13744430</id><snippet>x_rel</snippet></ROW><ROW><id>13744430</id><snippet>y_rel</snippet></ROW><ROW><id>13744430</id><snippet>x_idx</snippet></ROW><ROW><id>13744430</id><snippet>y_idx</snippet></ROW><ROW><id>13744430</id><snippet>N</snippet></ROW><ROW><id>13744430</id><snippet>range</snippet></ROW><ROW><id>13744430</id><snippet>xrange</snippet></ROW><ROW><id>13744430</id><snippet>X = X + 1</snippet></ROW><ROW><id>13744430</id><snippet>+=</snippet></ROW><ROW><id>13744430</id><snippet>X += 1</snippet></ROW><ROW><id>13744430</id><snippet>N = len(allspec)
numspec = [0] * N
for i in xrange(N):
    for x_rel in xrange(-1, +1):
        for y_rel in xrange(-1, +1):
            x_idx = (x + xrel) % N
            y_idx = (y + yrel) % N
            if x_idx != x or y_idx != y:
                numspec[hab[x_idx][y_idx]] += 1
</snippet></ROW><ROW><id>13744486</id><snippet>nums = data[0].split()
for num in nums:
   print num
if not nums:
   print "No new emails found"
</snippet></ROW><ROW><id>13744563</id><snippet>import re
day_re = re.compile(r'((?:Mon|Tues|Wednes|Thurs|Fri|Sat|Sun)day \d{2}/\d{2}/\d{4}) (.*)')
shift_re = re.compile(r'([A-Z]{5,} [^A-Z]*(?:[A-Z]{1,4}[^A-Z]+)*)')

def appointments(lines):
    """
    Given iterator `lines` containing one or more appointments per day,
    generate individual appointments.
    """
    for line in lines:
        day, remainder = day_re.match(line).groups()
        shifts = shift_re.findall(remainder)
        if shifts:
            for shift in shifts:
                yield '{} {}'.format(day, shift.strip())
        else:
            yield '{} {}'.format(day, remainder.strip())
</snippet></ROW><ROW><id>13744637</id><snippet>Meta = type('Meta', (), {                                                   
    'model': ExampleModel,                                                                                                           
})                                                                                                                                                           

ExampleForm = type('ExampleForm', (), {                                                                             
    'Meta': Meta,                                                                                                              
})
</snippet></ROW><ROW><id>13744684</id><snippet>|</snippet></ROW><ROW><id>13744684</id><snippet>^</snippet></ROW><ROW><id>13744684</id><snippet>wx.DEFAULT_FRAME_STYLE | wx.NO_BORDER ^ wx.SYSTEM_MENU</snippet></ROW><ROW><id>13744754</id><snippet>subprocess</snippet></ROW><ROW><id>13744754</id><snippet>import subprocess
p = subprocess.Popen([command, argument1,...], cwd=working_directory)
p.wait()
</snippet></ROW><ROW><id>13744782</id><snippet>append()</snippet></ROW><ROW><id>13744782</id><snippet>lst = [1, 2]
lst.append(3)

lst
=&gt; [1, 2, 3]
</snippet></ROW><ROW><id>13744782</id><snippet>append()</snippet></ROW><ROW><id>13744782</id><snippet>(require scheme/mpair)

(define lst (mlist 1 2))
(mappend! lst (mlist 3))

lst
=&gt; (mlist 1 2 3)
</snippet></ROW><ROW><id>13744782</id><snippet>append</snippet></ROW><ROW><id>13744782</id><snippet>(define lst (list 1 2))
(append lst (list 3))   ; this returns the new list '(1 2 3)

lst
=&gt; (list 1 2)
</snippet></ROW><ROW><id>13744782</id><snippet>append</snippet></ROW><ROW><id>13744782</id><snippet>+</snippet></ROW><ROW><id>13744782</id><snippet>lst = [1, 2]
lst + [3]    # this returns the new list [1, 2, 3]

lst
=&gt; [1, 2]
</snippet></ROW><ROW><id>13744782</id><snippet>append()</snippet></ROW><ROW><id>13744782</id><snippet>add()</snippet></ROW><ROW><id>13744782</id><snippet>add()</snippet></ROW><ROW><id>13744782</id><snippet>List</snippet></ROW><ROW><id>13744808</id><snippet>&lt;li id="a-{{ac.id}}"&gt;
</snippet></ROW><ROW><id>13744808</id><snippet>&lt;li id="ver-{{ac.id}}"&gt;
</snippet></ROW><ROW><id>13744808</id><snippet>$('#'+cid).remove();
</snippet></ROW><ROW><id>13744846</id><snippet>d = {"A":10, "B":20, "C":30, "D":40, "E":50}
some_list = [int(d.get(x, x)) for x in some_list]
</snippet></ROW><ROW><id>13744846</id><snippet>some_list = [d.get(x) or int(x) for x in some_list]
some_list = [d[x] if x in d else int(x) for x in some_list]
</snippet></ROW><ROW><id>13745626</id><snippet>subprocess.call</snippet></ROW><ROW><id>13745626</id><snippet>&gt;&gt;&gt; import shlex, subprocess, os, os.path
&gt;&gt;&gt; cmd = "ls ~/Downloads"
&gt;&gt;&gt; print os.popen(cmd).read()
ubuntu-11.04-desktop-i386.iso
ubuntu-11.04-server-i386.iso

&gt;&gt;&gt; print subprocess.check_output(shlex.split(cmd))
ls: cannot access ~/Downloads: No such file or directory
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/subprocess.py", line 537, in check_output
    raise CalledProcessError(retcode, cmd, output=output)
subprocess.CalledProcessError: Command '['ls', '~/Downloads']' returned non-zero exit status 2
</snippet></ROW><ROW><id>13745626</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>13745626</id><snippet>subprocess.call</snippet></ROW><ROW><id>13745626</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>13745626</id><snippet>shell=True</snippet></ROW><ROW><id>13745626</id><snippet>check_output</snippet></ROW><ROW><id>13745626</id><snippet>call</snippet></ROW><ROW><id>13745626</id><snippet>import shlex, subprocess, os, os.path
cmd = 'ls ' + os.path.expanduser('~/Downloads')
print subprocess.check_output(shlex.split(cmd))

cmd = 'ls ~/Downloads'
print subprocess.check_output(cmd, shell=True)
</snippet></ROW><ROW><id>13745829</id><snippet>dbus-send --system ...
</snippet></ROW><ROW><id>13745829</id><snippet>bus = dbus.SessionBus()
</snippet></ROW><ROW><id>13745829</id><snippet>&gt;&gt;&gt; import dbus
&gt;&gt;&gt; bus = dbus.SystemBus()
&gt;&gt;&gt; obj = bus.get_object('org.freedesktop.NetworkManager', '/org/freedesktop/NetworkManager')
&gt;&gt;&gt; t = dbus.Interface(obj, "org.freedesktop.NetworkManager")
&gt;&gt;&gt; t.GetDevices()
dbus.Array([dbus.ObjectPath('/org/freedesktop/NetworkManager/Devices/0'), dbus.ObjectPath('/org/freedesktop/NetworkManager/Devices/1')], signature=dbus.Signature('o'))
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13746126</id><snippet>#!/usr/bin/python
import pygtk, gtk, gobject

class GTK_Main:

  def __init__(self):

    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

    # if i use set_size_request, the first launch is not running
    # in correct screen (while using dual screen)
    #self.window.set_size_request(1280, 720)
    # therefore by using default size it fix it
    self.window.set_default_size(1280, 720)

    self.window.connect("destroy", gtk.main_quit, "WM destroy")

    self.vbox = gtk.VBox()
    self.window.add(self.vbox)
    self.hbox = gtk.HBox(False, 0)
    self.vbox.pack_start(self.hbox, False)    
    self.hbox.set_border_width(10)
    self.hbox.pack_start(gtk.Label(), True, True, 0)
    self.button2 = gtk.Button("Quit")
    self.button2.connect("clicked", self.exit)    
    self.hbox.pack_start(self.button2, False)
    self.button3 = gtk.Button("Test")
    self.button3.connect("clicked", self.buttononTop)    
    self.hbox.pack_start(self.button3, False)    
    self.hbox.add(gtk.Label())
    self.window.show_all()
    # another.anon.coward: mentioned a great way solve it 
    if(self.window.get_window().get_state() == gtk.gdk.WINDOW_STATE_MAXIMIZED):
      print "unmaximize"
      self.window.unmaximize()

    self.window.move(0,0)

  def buttononTop(self, w):
    print "Buttons on top - redraw with different shapes includeing the window"
    self.window.remove(self.vbox)
    self.window.resize(1280, 100)
    # if i use set_size_request, the first launch is not running
    # in correct screen (while using dual screen)
    #self.window.set_size_request(1280, 720)
    # therefore by using default size it fix it
    self.window.set_default_size(1280, 100)

    # another.anon.coward: mentioned a great way solve it 
    if(self.window.get_window().get_state() == gtk.gdk.WINDOW_STATE_MAXIMIZED):
      print "unmaximize"
      self.window.unmaximize()

    self.window.move(0,0)
    self.window.show_all()

    # ------------------------------------------- [FAILS STARTS]
    self.vbox = gtk.VBox()
    self.window.add(self.vbox)
    self.hbox = gtk.HBox(False, 0)
    self.vbox.pack_start(self.hbox, False)    
    self.hbox.set_border_width(10)
    self.hbox.pack_start(gtk.Label(), True, True, 0)
    self.button2 = gtk.Button("Quit")
    self.button2.connect("clicked", self.exit)    
    self.hbox.pack_start(self.button2, False)
    self.button3 = gtk.Button("Test")
    self.button3.connect("clicked", self.buttononTop)    
    self.hbox.pack_start(self.button3, False)    
    self.hbox.add(gtk.Label())    
    # ------------------------------------------- [FAILS FIXED]    
    self.vbox.show_all()


  def exit(self, widget, data=None):
    gtk.main_quit()

GTK_Main()
gtk.gdk.threads_init()
gtk.main()
</snippet></ROW><ROW><id>13746232</id><snippet>QueryDict</snippet></ROW><ROW><id>13746232</id><snippet>import re
#...
except KeyError as e:
    m = re.search("'([^']*)'", e.message)
    key = m.group(1)
</snippet></ROW><ROW><id>13746279</id><snippet>In [1]: import re

In [2]: s = '....00.3276021,,,constString1=31;garbage=00:00:00.0090000;constString2=16;garbage2=00.00...'

In [3]: re.search('constString1=(\d+);', s).group(1)
Out[3]: '31'

In [4]: re.search('constString2=(\d+);', s).group(1)
Out[4]: '16'
</snippet></ROW><ROW><id>13746443</id><snippet># last value returned by decorated function is accessible as 'last' attribute
def save_last(f):
    def w(*args, **kwargs): # w is the 'wrapper' function
    w.last=f(*args, **kwargs)
        return w.last
    return w
</snippet></ROW><ROW><id>13746443</id><snippet>save_last</snippet></ROW><ROW><id>13746443</id><snippet>@save_last
def my_func(...):
    # function definition
</snippet></ROW><ROW><id>13746443</id><snippet>last</snippet></ROW><ROW><id>13746443</id><snippet>my_func</snippet></ROW><ROW><id>13746443</id><snippet>if my_func(x) == some_value:
    # do something with the value returned by my_func, saved in my_func.last
    # such as
    print my_func.last
    return my_func.last
</snippet></ROW><ROW><id>13746461</id><snippet>def merge():
  print ..
  etc etc
if __name__ == '__main__':
  merge()
</snippet></ROW><ROW><id>13746461</id><snippet>&gt;&gt;&gt; import script
&gt;&gt;&gt; script.merge()
</snippet></ROW><ROW><id>13746565</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13746565</id><snippet>collections.Counter</snippet></ROW><ROW><id>13746565</id><snippet>&gt;&gt;&gt; from collections import defaultdict, Counter
&gt;&gt;&gt; d = defaultdict(Counter)
&gt;&gt;&gt; d['red']['blue'] += 1
&gt;&gt;&gt; d['green']['brown'] += 1
&gt;&gt;&gt; d['red']['blue'] += 1
&gt;&gt;&gt; pprint.pprint(d)
{'green': Counter({'brown': 1}),
 'red': Counter({'blue': 2})}
</snippet></ROW><ROW><id>13746565</id><snippet>from collections import defaultdict, Counter
import xlrd

workbook = xlrd.open_workbook('filter_data.xlsx')
worksheet = workbook.sheet_by_name('filter_data')

first_col = 0
scnd_col = 1
third_col = 2

celldict = defaultdict(Counter)
for curr_row in range(1, worksheet.nrows): # start at 1 skips header row

    cell0_val = int(worksheet.cell_value(curr_row, first_col))
    cell1_val = worksheet.cell_value(curr_row, scnd_col)
    cell2_val = worksheet.cell_value(curr_row, third_col)

    if cell2_val == 'toSkip' and cell1_val[:3] in ('BL1', 'OUT'):
        continue

    celldict[cell0_val][cell1_val] += 1
</snippet></ROW><ROW><id>13746565</id><snippet>curr_row</snippet></ROW><ROW><id>13746622</id><snippet>&gt;&gt;&gt; tnode = root.xpath('/p')
&gt;&gt;&gt; content = tnode.xpath('text()')
&gt;&gt;&gt; print ''.join(content)

Glassware veteran

(


) has fallen on hard times lately. Is it time to give up on the stock, or will Corning have a banana and a comeback?
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13746622</id><snippet>//text()</snippet></ROW><ROW><id>13746622</id><snippet>text()</snippet></ROW><ROW><id>13746622</id><snippet>&gt;&gt;&gt; print ' '.join([x.strip() for x in ele.xpath('//text()')])
Glassware veteran Corning ( NYSE: GLW    ) has fallen on hard times lately. Is it time to give up on the stock, or will Corning have a banana and a comeback?
</snippet></ROW><ROW><id>13746634</id><snippet>while (line = readLine()) {
    String cmdString = null;
    if (line.beginsWith("create" || line.beginsWith("alter") ...) {
       String previousLine = line;
       while (line = readLine()) {
          if (line.equals("/") &amp;&amp; previousLine.endsWith(";")) {
            executeSQL(cmdString);
            break;
          }
          previousLine = line;
          cmdString = cmdString + line;
       }
    }
    if (line.beginsWith("insert" || line.beginsWith("update") ...) {
       String previousLine = line;
       while (line = readLine()) {
          if (line.equals("\n") &amp;&amp; previousLine.endsWith(";")) {
            executeSQL(cmdString);
            break;
          }
          previousLine = line;
          cmdString = cmdString + line;
       }
    }
    // skip others
}
</snippet></ROW><ROW><id>13746918</id><snippet>dataType:json</snippet></ROW><ROW><id>13746918</id><snippet>$.ajax</snippet></ROW><ROW><id>13746918</id><snippet> $.ajax({
         type:"GET",
         url:"/friends2/",  #the url /friends2/ points to friends2 in python
         data: {},
         dataType: json, //ADD THIS
         ...
         ...
</snippet></ROW><ROW><id>13746918</id><snippet>dataType</snippet></ROW><ROW><id>13746918</id><snippet>jQuery.parseJSON(b)</snippet></ROW><ROW><id>13746918</id><snippet>success: function(b) {
    var data = jQuery.parseJSON(b); //parse JSON string here
    ...
    ...

}
</snippet></ROW><ROW><id>13747039</id><snippet>*?</snippet></ROW><ROW><id>13747039</id><snippet>*</snippet></ROW><ROW><id>13747039</id><snippet>/egg</snippet></ROW><ROW><id>13747039</id><snippet>egg</snippet></ROW><ROW><id>13747039</id><snippet>(egg) (.*?) (egg)</snippet></ROW><ROW><id>13747039</id><snippet>(?&lt;=egg) (.*?) (?=egg)</snippet></ROW><ROW><id>13747039</id><snippet>['hashbrowns', 'bacon', 'fried milk']</snippet></ROW><ROW><id>13747437</id><snippet>def my_decorator(sublabel):
    sublabel = [sublabel]
    def duration_wrapper(f):

        print sublabel[0]
        if sublabel[0] is None:
            sublabel[0] = f.func_name

        def wrapped_function(*args, **kwargs):
            return f(*args, **kwargs)

        return wrapped_function

    return duration_wrapper
</snippet></ROW><ROW><id>13747437</id><snippet>nonlocal</snippet></ROW><ROW><id>13747437</id><snippet>sublabel</snippet></ROW><ROW><id>13747443</id><snippet>d=np.array(dataPoints.tolist())
</snippet></ROW><ROW><id>13747616</id><snippet>inputFile</snippet></ROW><ROW><id>13747616</id><snippet>...
    inputFile = open((x), "rb")
    byte1 = inputFile.read(1)
    byte2 = inputFile.read(1)
    inputFile.close()
</snippet></ROW><ROW><id>13747659</id><snippet>^</snippet></ROW><ROW><id>13747659</id><snippet>$</snippet></ROW><ROW><id>13747659</id><snippet>^(?:([A-Z]{1,2}) ?([0-9]{1,4})|([0-9]{1,4}) ?([A-Z]{1,2}))$
</snippet></ROW><ROW><id>13747659</id><snippet>^(?|([A-Z]{1,2}) ?([0-9]{1,4})|([0-9]{1,4}) ?([A-Z]{1,2}))$
</snippet></ROW><ROW><id>13747659</id><snippet>match.groups()</snippet></ROW><ROW><id>13747778</id><snippet>def squareEach(nums):
    answer = []
    for num in nums:
        answer.append(num*num)
    return answer

def sumList(nums):
    answer = 0
    for num in nums:
        answer += num
    return answer

def toNumbers(strList):
    answer = []
    for numStr in strList.split():
        try:
            num = int(numStr)
            answer.append(num)
        except:
            pass
    return answer

def main():
    print "** Program to find sum of squares from numbers in a file **"
    fileName = raw_input("What file are the numbers in? ")
    sum = 0
    with open(fileName, 'r') as infile:
        for line in infile:
            nums = toNumbers(line)
            squares = squareEach(nums)
            sum += sumList(squares)
        print sum
</snippet></ROW><ROW><id>13747778</id><snippet>print "the sum is", sum(int(num)**2 for line in open(raw_input("What file are the numbers in? ")) for num in line.strip()split())
</snippet></ROW><ROW><id>13747911</id><snippet>&gt;&gt;&gt; os.path.splitext("foo.txt")
('foo', '.txt')
&gt;&gt;&gt; ('foo', '.txt')[0]
'foo'
</snippet></ROW><ROW><id>13747936</id><snippet>readlines</snippet></ROW><ROW><id>13747936</id><snippet>readlines</snippet></ROW><ROW><id>13747936</id><snippet>lines = f.readlines()
lines1 = lines[4:24]
lines2 = lines[33:54]
</snippet></ROW><ROW><id>13747936</id><snippet>numpy</snippet></ROW><ROW><id>13748060</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>13748060</id><snippet>timeout</snippet></ROW><ROW><id>13748060</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>13748060</id><snippet>url_and_path_list</snippet></ROW><ROW><id>13748060</id><snippet>(url, path)</snippet></ROW><ROW><id>13748060</id><snippet>num_concurrent</snippet></ROW><ROW><id>13748060</id><snippet>skip_existing</snippet></ROW><ROW><id>13748060</id><snippet>def download_urls(url_and_path_list, num_concurrent, skip_existing):
    # prepare the queue
    queue = Queue.Queue()
    for url_and_path in url_and_path_list:
        queue.put(url_and_path)

    # start the requested number of download threads to download the files
    threads = []
    for _ in range(num_concurrent):
        t = DownloadThread(queue, skip_existing)
        t.daemon = True
        t.start()

    queue.join()

class DownloadThread(threading.Thread):
    def __init__(self, queue, skip_existing):
        super(DownloadThread, self).__init__()
        self.queue = queue
        self.skip_existing = skip_existing

    def run(self):
        while True:
            #grabs url from queue
            url, path = self.queue.get()

            if self.skip_existing and exists(path):
                # skip if requested
                self.queue.task_done()
                continue

            try:
                urllib.urlretrieve(url, path)
            except IOError:
                print "Error downloading url '%s'." % url

            #signals to queue job is done
            self.queue.task_done()
</snippet></ROW><ROW><id>13748190</id><snippet>mask = ((lower_x_limit &lt; array[0]) &amp; (array[0] &lt; upper_x_limit) &amp;
        (lower_y_limit &lt; array[1]) &amp; (array[1] &lt; upper_y_limit))
count = sum(mask)
</snippet></ROW><ROW><id>13748190</id><snippet>searchsorted</snippet></ROW><ROW><id>13748190</id><snippet>start = array[0].searchsorted(lower_x_limit, 'right')
end = array[0].searchsorted(upper_x_limit, 'left')
temp = array[1, start:end]
start = temp.searchsorted(lower_y_limit, 'right')
end = temp.searchsorted(upper_y_limit, 'left')
count = end - start
</snippet></ROW><ROW><id>13748360</id><snippet>try</snippet></ROW><ROW><id>13748360</id><snippet>filter</snippet></ROW><ROW><id>13748360</id><snippet>QuerySet</snippet></ROW><ROW><id>13748360</id><snippet>DoesNotExist</snippet></ROW><ROW><id>13748360</id><snippet>try:
    b = B.objects.filter(r=p_r)
except B.DoesNotExist:
    b = None
</snippet></ROW><ROW><id>13748360</id><snippet>b = B.objects.filter(r=p_r)
</snippet></ROW><ROW><id>13748360</id><snippet>QuerySet</snippet></ROW><ROW><id>13748360</id><snippet>count()</snippet></ROW><ROW><id>13748360</id><snippet>try:
    b = B.objects.filter(r=p_r)
except B.DoesNotExist:
    b = None

bu = {}
if b != None and len(b) &gt; 0:
    bu['count'] = len(b)
</snippet></ROW><ROW><id>13748360</id><snippet>b = B.objects.filter(r=p_r).count() # Will return 0 or more
</snippet></ROW><ROW><id>13748360</id><snippet>A</snippet></ROW><ROW><id>13748360</id><snippet>AR</snippet></ROW><ROW><id>13748360</id><snippet>B</snippet></ROW><ROW><id>13748360</id><snippet>C</snippet></ROW><ROW><id>13748360</id><snippet>S</snippet></ROW><ROW><id>13748360</id><snippet>P</snippet></ROW><ROW><id>13748360</id><snippet>select_related</snippet></ROW><ROW><id>13748360</id><snippet>P</snippet></ROW><ROW><id>13748360</id><snippet>p_r = P.objects.select_related().get(p_id=rec_id, f__f_id=f_id, d__n=d)
</snippet></ROW><ROW><id>13748360</id><snippet>&lt;p&gt;A quantity: {{ record.A_set.all.count }}&lt;/p&gt;
&lt;p&gt;B quantity: {{ record.B_set.all.count }}&lt;/p&gt;
&lt;p&gt;C quantity: {{ record.C_set.all.count }}&lt;/p&gt;
....
</snippet></ROW><ROW><id>13748360</id><snippet>try:
    p_e = []
    ev = E.objects.all()
    for e in ev:
      if e.r_o.p_id == rec_id and e.r_o.record.f.f_id == f_id:
      patient_events.append(e)
except E.DoesNotExist:
    ev = None
</snippet></ROW><ROW><id>13748360</id><snippet>filter</snippet></ROW><ROW><id>13748360</id><snippet>p_e = E.objects.filter(r_o__p__id=rec_id, r_o__record__f__f__id=f_id)
</snippet></ROW><ROW><id>13748360</id><snippet>p_r = P.objects.select_related().get(p_id=rec_id, f__f_id=f_id, d__n=d)
ph = E.objects.filter(r_o__p__id=rec_id, r_o__record__f__f__id=f_id).count()

Log().add(request, "View", "I", 'pr', p_r.id)
response_dict.update ({'record': p_r,
                     'ph': ph,
                     'p_id': rec_id,
                     'f_id': f_id,
                     'd': d_id,
                     })
return render_to_response('records/detail.html',response_dict, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13748363</id><snippet>ForeignKey</snippet></ROW><ROW><id>13748363</id><snippet>on_delete</snippet></ROW><ROW><id>13748363</id><snippet>on_delete</snippet></ROW><ROW><id>13748363</id><snippet>models.CASCADE</snippet></ROW><ROW><id>13748363</id><snippet>Foreignkey</snippet></ROW><ROW><id>13748363</id><snippet>Folder</snippet></ROW><ROW><id>13748363</id><snippet>Image</snippet></ROW><ROW><id>13748363</id><snippet>ImageRepresentation</snippet></ROW><ROW><id>13748372</id><snippet>import</snippet></ROW><ROW><id>13748372</id><snippet>X</snippet></ROW><ROW><id>13748372</id><snippet>X</snippet></ROW><ROW><id>13748372</id><snippet>X</snippet></ROW><ROW><id>13748372</id><snippet>from datetime import datetime # This isn't ignored, but the name is immediately rebound
                              # by the next line
import datetime               # Rebinds the name
</snippet></ROW><ROW><id>13748451</id><snippet>cp -a /usr/share/doc/openvpn/examples/easy-rsa/2.0 /etc/nginx/easyrsa
cd /etc/nginx/easyrsa &amp;&amp; source vars &amp;&amp; ./clean-all
</snippet></ROW><ROW><id>13748451</id><snippet>./build-ca
</snippet></ROW><ROW><id>13748451</id><snippet>./build-key --server server
</snippet></ROW><ROW><id>13748451</id><snippet>./build-key-pkcs12  client1
</snippet></ROW><ROW><id>13748451</id><snippet>cat keys/server.crt keys/ca.crt &gt; keys/server_and_ca.crt
</snippet></ROW><ROW><id>13748451</id><snippet>server {
    listen 443;

    location / {
        # Here we define the name and the contents of the WSGI variable to pass to service
        uwsgi_param SSL_CLIENT_ID $ssl_client_s_dn;
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:5000;
    }


    # SSL support
    ssl                 on;
    ssl_protocols       SSLv3 TLSv1;
    ssl_certificate     easyrsa/keys/ca_and_server.crt;
    ssl_certificate_key easyrsa/keys/server.key;

    # We don't accept anyone without correct client certificate
    ssl_verify_client on;
    # The CA we use to verify client certificates
    ssl_client_certificate easyrsa/keys/ca.crt;
}
</snippet></ROW><ROW><id>13748451</id><snippet>sample.py</snippet></ROW><ROW><id>13748451</id><snippet>from werkzeug.wrappers import Response

def application(environ, start_response):
    text = 'Hello, your certificate id is %s\n' % environ.get('SSL_CLIENT_ID', '(unknown)')
    response = Response(text, mimetype='text/plain')
    return response(environ, start_response)
</snippet></ROW><ROW><id>13748451</id><snippet>uwsgi -w sample:application --socket 127.0.0.1:5000</snippet></ROW><ROW><id>13748451</id><snippet>$ curl --cert keys/client1.crt --key keys/client1.key --cacert keys/ca.crt https://localhost/
Hello, your certificate id is /C=US/ST=CA/L=SanFrancisco/O=Fort-Funston/OU=changeme/CN=client1/name=changeme/emailAddress=mail@host.domain
</snippet></ROW><ROW><id>13748797</id><snippet>import numpy as np
import mpmath as mp
small_number = mp.besseli(400, 2)  # This is an mpf number
# Note that creating a list using `range` and then converting it
# to an array is not very efficient. Do this instead:
A = np.arange(600)
result = small_number * A  # Array of dtype object, ie, it contains mpf numbeers
</snippet></ROW><ROW><id>13748797</id><snippet>result * result
</snippet></ROW><ROW><id>13748797</id><snippet>np.frompyfunc</snippet></ROW><ROW><id>13748797</id><snippet>besseli_vec = np.frompyfunc(mp.besseli, 2, 1)
besseli_vec(0, A)
</snippet></ROW><ROW><id>13748823</id><snippet>|</snippet></ROW><ROW><id>13748823</id><snippet>[Uu]
</snippet></ROW><ROW><id>13748823</id><snippet>u</snippet></ROW><ROW><id>13748823</id><snippet>s</snippet></ROW><ROW><id>13748823</id><snippet>W</snippet></ROW><ROW><id>13748823</id><snippet>s</snippet></ROW><ROW><id>13748823</id><snippet>W</snippet></ROW><ROW><id>13748823</id><snippet>\W</snippet></ROW><ROW><id>13748823</id><snippet>\W</snippet></ROW><ROW><id>13748823</id><snippet>(^a-zA-Z)</snippet></ROW><ROW><id>13748823</id><snippet>^</snippet></ROW><ROW><id>13748823</id><snippet>(</snippet></ROW><ROW><id>13748823</id><snippet>)</snippet></ROW><ROW><id>13748823</id><snippet>[^a-zA-Z]</snippet></ROW><ROW><id>13748823</id><snippet>u</snippet></ROW><ROW><id>13748823</id><snippet>r'(?&lt;![a-zA-Z])[uU](?![a-zA-Z])'
</snippet></ROW><ROW><id>13748823</id><snippet>u</snippet></ROW><ROW><id>13748823</id><snippet>you</snippet></ROW><ROW><id>13748823</id><snippet>u</snippet></ROW><ROW><id>13748823</id><snippet>r'(?&lt;![a-zA-Z0-9])[uU](?![a-zA-Z0-9])'
</snippet></ROW><ROW><id>13748823</id><snippet>u</snippet></ROW><ROW><id>13748823</id><snippet>\w</snippet></ROW><ROW><id>13748823</id><snippet>r'(?&lt;!\w)[uU](?!\w)'
</snippet></ROW><ROW><id>13748823</id><snippet>r'\b[uU]\b'</snippet></ROW><ROW><id>13748823</id><snippet>re.sub(r'(?&lt;![a-z])u(?![a-z])', 'you', text, flags=re.I)
</snippet></ROW><ROW><id>13748823</id><snippet>re.sub(r'(?&lt;![a-z])u(?![a-z])', 'you', text, flags=re.IGNORECASE)
</snippet></ROW><ROW><id>13748949</id><snippet>import poppler, os.path

path = 'file://%s' % os.path.realpath('annotations.pdf')
doc = poppler.document_new_from_file(path, None)
pages = [doc.get_page(i) for i in range(doc.get_n_pages())]

for page_no, page in enumerate(pages):
    items = [i.annot.get_contents() for i in page.get_annot_mapping()]
    items = [i for i in items if i]
    print "page: %s comments: %s " % (page_no + 1, items)
</snippet></ROW><ROW><id>13748949</id><snippet>page: 1 comments: ['This is an annotation'] 
page: 2 comments: [' Please note ', ' Please note ', 'This is a comment in the text'] 
</snippet></ROW><ROW><id>13749064</id><snippet>close()</snippet></ROW><ROW><id>13749064</id><snippet>close()</snippet></ROW><ROW><id>13749064</id><snippet>import struct
s.setsockopt(socket.SOL_SOCKET, socket.SO_LINGER, struct.pack('ii', 1, 10))
</snippet></ROW><ROW><id>13749064</id><snippet>socket.sendall()</snippet></ROW><ROW><id>13749069</id><snippet>if winGame(mines):
        printWorld(gameMap)
        print 'You Win!'
        answer = raw_input('Would you like to play again?')
        if answer == 'y':
            return minesweeper()
        else:
            print 'Thanks for playing!'
            return
</snippet></ROW><ROW><id>13749069</id><snippet>None</snippet></ROW><ROW><id>13749069</id><snippet>None</snippet></ROW><ROW><id>13749069</id><snippet>return</snippet></ROW><ROW><id>13749317</id><snippet>def count(mylist):
    newlist = []
    newlist.append(mylist[0])
    stor = False
    for i in mylist:
        stor = False
        for j in newlist:
            if j == i:
                stor = True # stor == True test for equality
        if not stor:
            newlist.append(i)
    return len(newlist) # you do not want the list itself but its length
</snippet></ROW><ROW><id>13749317</id><snippet>stor</snippet></ROW><ROW><id>13749317</id><snippet>break</snippet></ROW><ROW><id>13749317</id><snippet>newlist</snippet></ROW><ROW><id>13749317</id><snippet>def count(mylist):
    newlist = []
    for i in mylist:
        stor = False
        for j in newlist:
            if j == i:
                stor = True
                break
        if not stor:
            newlist.append(i)
    return len(newlist)
</snippet></ROW><ROW><id>13749317</id><snippet>in</snippet></ROW><ROW><id>13749317</id><snippet>def count(mylist):
    newlist = []
    for i in mylist:
        if i not in newlist:
            newlist.append(i)
    return len(newlist)
</snippet></ROW><ROW><id>13749317</id><snippet>item in something_iterable</snippet></ROW><ROW><id>13749317</id><snippet>item</snippet></ROW><ROW><id>13749317</id><snippet>something_iterable</snippet></ROW><ROW><id>13749317</id><snippet>'a' in 'abc'</snippet></ROW><ROW><id>13749317</id><snippet>def count(mylist):
    return len(set(mylist))
</snippet></ROW><ROW><id>13749576</id><snippet>QtWebKit</snippet></ROW><ROW><id>13749576</id><snippet>import urllib2
import lxml.html as LH
from PyQt4 import QtGui, QtCore, QtWebKit
import sys

class Render(QtWebKit.QWebPage):
    def __init__(self, url):
        self.app = QtGui.QApplication(sys.argv)
        QtWebKit.QWebPage.__init__(self)
        self.loadFinished.connect(self._loadFinished)
        self.mainFrame().load(QtCore.QUrl(url))
        self.app.exec_()

    def _loadFinished(self, result):
        self.frame = self.mainFrame()
        self.app.quit()

def main():
    liste = []
    for k in range(2, 3):
        url = "http://www.spiegelfechter.com/wordpress/page/" + str(k)
        r = Render(url)
        content = unicode(r.frame.toHtml())
        doc = LH.fromstring(content)
        for span in doc.xpath('//span[@class="commentbutton"]'):
            a = span.xpath('a')[0]
            post = a.attrib['href']
            kommentare = a.text_content()
            # kommentare is expected to be a string such as '14 Kommentare'
            comments = int(kommentare.split()[0])

            iframe = span.xpath('iframe')[0]
            flattr_url = (iframe.attrib['src'])
            flattr_doc = LH.parse(flattr_url)
            span = flattr_doc.xpath('//span[@class="flattr-count"]')[0]
            flattr_count = int(span.text_content())
            liste.append((comments, flattr_count, post))
        for elt in sorted(liste):
            print(elt)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13749576</id><snippet>(14, 1, 'http://www.spiegelfechter.com/wordpress/8726/auswege-aus-der-sackgasse#comments')
(26, 1, 'http://www.spiegelfechter.com/wordpress/8722/die-asozialen-hinter-die-asozialen#comments')
(77, 4, 'http://www.spiegelfechter.com/wordpress/8717/in-gesetz-gegossene-verfassungswidrigkeit#comments')
(91, 1, 'http://www.spiegelfechter.com/wordpress/8714/the-same-procedure-as-every-year-europa-lugt-sich-selbst-in-die-tasche#comments')
(279, 2, 'http://www.spiegelfechter.com/wordpress/8709/konstruktionsfehler-des-grundeinkommens#comments')
</snippet></ROW><ROW><id>13749790</id><snippet>&gt;&gt;&gt; res = re.findall(r"b\+?='(.*?)'", html)
&gt;&gt;&gt; res
['person1', '@', 'email.com', 'person2', '@', 'email.com']
&gt;&gt;&gt; emails [''.join(group) for group in zip(*[iter(res)]*3)]
['person1@email.com', 'person2@email.com']
</snippet></ROW><ROW><id>13749790</id><snippet>&gt;&gt;&gt; names = [name.split('&gt;', 1)[1] for name in re.findall(r'href="people(.*?)&lt;/a&gt;', html)]
&gt;&gt;&gt; names
['person1', 'person2']
&gt;&gt;&gt; zip(names, emails)
[('person1', 'person1@email.com'), ('person2', 'person2@email.com')]
</snippet></ROW><ROW><id>13749946</id><snippet>PyEnsureGIL gil;
</snippet></ROW><ROW><id>13749946</id><snippet>return Py_BuildValue("(NN)", pyopencv_from(edgeGrad), pyopencv_from(edgeOri));
</snippet></ROW><ROW><id>13749946</id><snippet>return pyopencv_from(edgeGrad);
</snippet></ROW><ROW><id>13749946</id><snippet>static PyObject* pycvex_findEdgesCGTG(PyObject* , PyObject* args, PyObject* kw)
{
    PyObject* pyobj_source = NULL;
    Mat source;
    Mat edgeGrad;
    Mat edgeOri;
    const char* keywords[] = { "src", NULL };
    if( PyArg_ParseTupleAndKeywords(args, kw, "O:findEdgesCGTG", (char**)keywords, &amp;pyobj_source) &amp;&amp;
        pyopencv_to(pyobj_source, source));
    {
        ERRWRAP2(findEdgesCGTG(source,edgeGrad,edgeOri));
        return Py_BuildValue("(NN)", pyopencv_from(edgeGrad), pyopencv_from(edgeOri));
    }
    return NULL;
}
</snippet></ROW><ROW><id>13749952</id><snippet>c = db.cursor()
values_to_insert = [("a","b"),("c","d"),...]
c.execute_many("INSERT INTO table (val1,val2) VALUES (?,?)",values_to_insert  )
</snippet></ROW><ROW><id>13749963</id><snippet>&gt;&gt;&gt; x = 'this is a string'
&gt;&gt;&gt; step = 3
&gt;&gt;&gt; [x[i:i+step] for i in range(0, len(x), step)]
['thi', 's i', 's a', ' st', 'rin', 'g']
&gt;&gt;&gt; step = 5
&gt;&gt;&gt; [x[i:i+step] for i in range(0, len(x), step)]
['this ', 'is a ', 'strin', 'g']
</snippet></ROW><ROW><id>13749963</id><snippet>[x[i:i+step] for i in range(0, len(x), step)]
</snippet></ROW><ROW><id>13749963</id><snippet>range(0, len(x), step)</snippet></ROW><ROW><id>13749963</id><snippet>step</snippet></ROW><ROW><id>13749963</id><snippet>for i in</snippet></ROW><ROW><id>13749963</id><snippet>x[i:i+step]</snippet></ROW><ROW><id>13749963</id><snippet>x</snippet></ROW><ROW><id>13749963</id><snippet>i</snippet></ROW><ROW><id>13749963</id><snippet>step</snippet></ROW><ROW><id>13749963</id><snippet>a, b, c, d = [x[i:i+step] for i in range(0, len(x), step)]
</snippet></ROW><ROW><id>13749963</id><snippet>3 * step &lt; len(x) &lt;= 4 * step</snippet></ROW><ROW><id>13749963</id><snippet>ValueError</snippet></ROW><ROW><id>13749963</id><snippet>x_pieces = [x[i:i+step] for i in range(0, len(x), step)]
</snippet></ROW><ROW><id>13749963</id><snippet>a</snippet></ROW><ROW><id>13749963</id><snippet>x_pieces[0]</snippet></ROW><ROW><id>13749963</id><snippet>b</snippet></ROW><ROW><id>13749963</id><snippet>x_pieces[1]</snippet></ROW><ROW><id>13750159</id><snippet>BaseDocTemplate</snippet></ROW><ROW><id>13750159</id><snippet>Frame</snippet></ROW><ROW><id>13750159</id><snippet>from reportlab.platypus import BaseDocTemplate, Frame, Paragraph, PageBreak, PageTemplate
from reportlab.lib.styles import getSampleStyleSheet
import random

words = "lorem ipsum dolor sit amet consetetur sadipscing elitr sed diam nonumy eirmod tempor invidunt ut labore et".split()

styles=getSampleStyleSheet()
Elements=[]

doc = BaseDocTemplate('basedoc.pdf',showBoundary=1)

#Two Columns
frame1 = Frame(doc.leftMargin, doc.bottomMargin, doc.width/2-6, doc.height, id='col1')
frame2 = Frame(doc.leftMargin+doc.width/2+6, doc.bottomMargin, doc.width/2-6, doc.height, id='col2')

Elements.append(Paragraph(" ".join([random.choice(words) for i in range(1000)]),styles['Normal']))
doc.addPageTemplates([PageTemplate(id='TwoCol',frames=[frame1,frame2]), ])


#start the construction of the pdf
doc.build(Elements)
</snippet></ROW><ROW><id>13750280</id><snippet>else</snippet></ROW><ROW><id>13750280</id><snippet>while...else</snippet></ROW><ROW><id>13750280</id><snippet>if...else</snippet></ROW><ROW><id>13750280</id><snippet>while...else</snippet></ROW><ROW><id>13750280</id><snippet>else</snippet></ROW><ROW><id>13750280</id><snippet>while</snippet></ROW><ROW><id>13750280</id><snippet>False</snippet></ROW><ROW><id>13750280</id><snippet>break</snippet></ROW><ROW><id>13750280</id><snippet>else</snippet></ROW><ROW><id>13750280</id><snippet>xvalue &lt; Limit</snippet></ROW><ROW><id>13750280</id><snippet>while</snippet></ROW><ROW><id>13750280</id><snippet>else</snippet></ROW><ROW><id>13750280</id><snippet>continue</snippet></ROW><ROW><id>13750280</id><snippet>continue</snippet></ROW><ROW><id>13750280</id><snippet>xvalue = int(input...</snippet></ROW><ROW><id>13750280</id><snippet>continue</snippet></ROW><ROW><id>13750280</id><snippet>continue</snippet></ROW><ROW><id>13750280</id><snippet>xvalue = int(input("Enter a test value to see if it works: "))

while xvalue &gt;= Limit:
    print ("\a\a\a")
    xvalue = int(input("Please try another value: "))
</snippet></ROW><ROW><id>13750280</id><snippet>xvalue = int(input("Enter a test value to see if it works: "))

while xvalue &lt; Limit:                                     # Repeats until user gives a value above limit
    xvalue = int(input("Please try another value: "))
else:
    while True:                                           # Causes bell to ring infinitely
        print ("\a\a\a")
</snippet></ROW><ROW><id>13750308</id><snippet>some_string.split(' ', 1)[0]</snippet></ROW><ROW><id>13750308</id><snippet>some_string.partition(' ')[0]</snippet></ROW><ROW><id>13750502</id><snippet>webapp2.WSGIApplication</snippet></ROW><ROW><id>13750502</id><snippet>class</snippet></ROW><ROW><id>13750502</id><snippet>('/*', myclass)</snippet></ROW><ROW><id>13750502</id><snippet>import webapp2
newdomain = 'http://www.mynewdomain.com/'

class RedirectPage(webapp2.RequestHandler):
    def get(self, restofurl):
        return webapp2.redirect(newdomain + restofurl, permanent=True)

app = webapp2.WSGIApplication([webapp2.Route(r'/&lt;restofurl:.*&gt;', handler=RedirectPage, name='redirect_page')])
</snippet></ROW><ROW><id>13750519</id><snippet>NxM</snippet></ROW><ROW><id>13750519</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; items = np.random.random_sample((10,3))
</snippet></ROW><ROW><id>13750519</id><snippet>N</snippet></ROW><ROW><id>13750519</id><snippet>M</snippet></ROW><ROW><id>13750519</id><snippet>&gt;&gt;&gt; sq = [(np.subtract.outer(item,item) ** 2).sum() for item in items]
</snippet></ROW><ROW><id>13750519</id><snippet>&gt;&gt;&gt; best_index = np.argmin(sq)
</snippet></ROW><ROW><id>13750519</id><snippet>best = np.inf
best_index = None
for i,item in enumerate(items):
    ls = (np.subtract.outer(item,item) ** 2).sum()
    if ls &lt; best:
        best = ls
        best_index = i
</snippet></ROW><ROW><id>13750677</id><snippet>QDate.fromString</snippet></ROW><ROW><id>13750677</id><snippet>ddd MMM d yyyy (ShortDayName ShortMonthName ShortDayNumber LongYearNumber)
e.g. Thu Dec 6 2012
</snippet></ROW><ROW><id>13750677</id><snippet>fromString</snippet></ROW><ROW><id>13750677</id><snippet>date.isValid()</snippet></ROW><ROW><id>13750677</id><snippet>QDateEdit.setDate</snippet></ROW><ROW><id>13750821</id><snippet>'\n'.join(n.split()[0])
</snippet></ROW><ROW><id>13750871</id><snippet>d = {}
with open('data.txt') as f:
  for line in f:
    tok = line.split()
    d[tok[1]] = tok[3]
print(d)
</snippet></ROW><ROW><id>13750871</id><snippet>{'kja': 'blue', 'kjf': 'green', 'fdf': 'yellow', 'asd': 'green', 'fff': 'brown', 'dff': 'blue'}
</snippet></ROW><ROW><id>13750871</id><snippet>split()</snippet></ROW><ROW><id>13750871</id><snippet>tok[1]</snippet></ROW><ROW><id>13750871</id><snippet>tok[3]</snippet></ROW><ROW><id>13750871</id><snippet>d[key] = value</snippet></ROW><ROW><id>13751048</id><snippet>&lt;team.Team object at 0x000000000332A978&gt;</snippet></ROW><ROW><id>13751048</id><snippet>__repr__</snippet></ROW><ROW><id>13751048</id><snippet>__str__</snippet></ROW><ROW><id>13751048</id><snippet>__repr__</snippet></ROW><ROW><id>13751048</id><snippet>__str__</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>def __repr__(self):
    return 'Team("{}")'.format(self._name)
</snippet></ROW><ROW><id>13751048</id><snippet>league.addTeam('Dodgers')</snippet></ROW><ROW><id>13751048</id><snippet>print(l._table)</snippet></ROW><ROW><id>13751048</id><snippet>[Team("Dodgers")]</snippet></ROW><ROW><id>13751048</id><snippet>[&lt;team.Team object at 0x000000000332A978&gt;]</snippet></ROW><ROW><id>13751048</id><snippet>def removeTeam(self,team):
    self._table.remove(team)
def returnPosition(self,team):
    return self._table.index(team)
</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>_table</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>def __eq__(self, other):
    return self._name == other._name
</snippet></ROW><ROW><id>13751048</id><snippet>Team('Giants') == Team('Giants')</snippet></ROW><ROW><id>13751048</id><snippet>__eq__</snippet></ROW><ROW><id>13751048</id><snippet>index</snippet></ROW><ROW><id>13751048</id><snippet>remove</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>def removeTeam(self,team_name):
    self._table.remove(Team(team_name))
def returnPosition(self,team_name):
    return self._table.index(Team(team_name))
</snippet></ROW><ROW><id>13751048</id><snippet>def removeTeam(self,team_name):
    self._table = [team for team in self._table if team._name != team_name]
def returnPosition(self,team_name):
    return [team._name for team in self._table].index(team_name)
</snippet></ROW><ROW><id>13751048</id><snippet>self._table = [team for team in self._table if team._name != team_name]

temp = []
for team in self._table:
    if team._name != team_name:
        temp.append(team)
self._table = temp
</snippet></ROW><ROW><id>13751048</id><snippet>temp</snippet></ROW><ROW><id>13751048</id><snippet>self._table</snippet></ROW><ROW><id>13751048</id><snippet>filter</snippet></ROW><ROW><id>13751048</id><snippet>for i, value in enumerate(mylist):
    if value == value_to_remove:
        del mylist[i]
</snippet></ROW><ROW><id>13751048</id><snippet>def returnPosition(self,team_name):
    return [team._name for team in self._table].index(team_name)
</snippet></ROW><ROW><id>13751048</id><snippet>temp = []
for team in self._table:
    temp.append(team._name)
</snippet></ROW><ROW><id>13751048</id><snippet>index(team_name)</snippet></ROW><ROW><id>13751048</id><snippet>team</snippet></ROW><ROW><id>13751048</id><snippet>_tables</snippet></ROW><ROW><id>13751048</id><snippet>list</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>dict</snippet></ROW><ROW><id>13751048</id><snippet>Team</snippet></ROW><ROW><id>13751048</id><snippet>returnPosition</snippet></ROW><ROW><id>13751048</id><snippet>def __init__(self):
    self._table={}
def addTeam(self,name):
    self._table[name]=Team(name)
def removeTeam(self,team_name):
    del self._table[team_name]
def returnPosition(self,team_name):
    return team_name
def updateLeague(self,team1_name1,team_name2,score1,score2):
    if score1&gt;score2:
        self._table[team_name1].win()
        self._table[team_name2].loss()
    elif score1==score2:
        self._table[team_name1].draw()
        self._table[team_name2].draw()
    elif score1&lt;score2:
        self._table[team_name1].loss()
        self._table[team_name2].win()
</snippet></ROW><ROW><id>13751048</id><snippet>returnPosition</snippet></ROW><ROW><id>13751048</id><snippet>dict</snippet></ROW><ROW><id>13751048</id><snippet>list</snippet></ROW><ROW><id>13751048</id><snippet>returnPosition</snippet></ROW><ROW><id>13751048</id><snippet>returnPosition</snippet></ROW><ROW><id>13751048</id><snippet>displayList</snippet></ROW><ROW><id>13751048</id><snippet>saveList</snippet></ROW><ROW><id>13751048</id><snippet>self._table.values()</snippet></ROW><ROW><id>13751048</id><snippet>self._table</snippet></ROW><ROW><id>13751048</id><snippet>loadList</snippet></ROW><ROW><id>13751048</id><snippet>self._table.append(team)</snippet></ROW><ROW><id>13751048</id><snippet>self._table[a] = team</snippet></ROW><ROW><id>13751048</id><snippet>loadList</snippet></ROW><ROW><id>13751048</id><snippet>a</snippet></ROW><ROW><id>13751048</id><snippet>b</snippet></ROW><ROW><id>13751048</id><snippet>c</snippet></ROW><ROW><id>13751048</id><snippet>d</snippet></ROW><ROW><id>13751048</id><snippet>name</snippet></ROW><ROW><id>13751048</id><snippet>wins</snippet></ROW><ROW><id>13751048</id><snippet>losses</snippet></ROW><ROW><id>13751048</id><snippet>draws</snippet></ROW><ROW><id>13751048</id><snippet>name</snippet></ROW><ROW><id>13751048</id><snippet>wins</snippet></ROW><ROW><id>13751048</id><snippet>losses</snippet></ROW><ROW><id>13751048</id><snippet>@property</snippet></ROW><ROW><id>13751048</id><snippet>print("""""")</snippet></ROW><ROW><id>13751048</id><snippet>"</snippet></ROW><ROW><id>13751048</id><snippet>print()</snippet></ROW><ROW><id>13751048</id><snippet>while</snippet></ROW><ROW><id>13751048</id><snippet>while x!="q":</snippet></ROW><ROW><id>13751048</id><snippet>break</snippet></ROW><ROW><id>13751048</id><snippet>while True:</snippet></ROW><ROW><id>13751048</id><snippet>break</snippet></ROW><ROW><id>13751048</id><snippet>options("q")</snippet></ROW><ROW><id>13751048</id><snippet>print("Goodbye")</snippet></ROW><ROW><id>13751048</id><snippet>elif</snippet></ROW><ROW><id>13751048</id><snippet>dict</snippet></ROW><ROW><id>13751048</id><snippet>def addTeam():
    name=input("Enter the name of the team:")
    l.addTeam(name)
def removeTeam():
    teamToRemove=input("Enter the name of the team you want to remove:")
    l.removeTeam(teamToRemove)
def recordGame():
    team1=input("What is the name of the team?")
    ans1=int(input("Enter the number of goals for the first team:"))
    team2=input("What is the name of the team?")
    ans2=int(input("Enter the number of goals for the second time:"))
    l.updateLeague(team1,team2,ans1,ans2)
optionsdict = {
    "a": addTeam,
    "d": l.displayList,
    "s": l.saveList,
    "l": l.loadList,
    "r": removeTeam,
    "rec": recordGame,
}
def options(x):
    func = optionsdict.get(x)
    if func:
        func()
</snippet></ROW><ROW><id>13751199</id><snippet>subprocess.Popen(['C:\\python26\\python.exe ','main_plot.py','-n',1234])
</snippet></ROW><ROW><id>13751199</id><snippet>import matplotlib.pyplot as pyplot
def plot_function(NUMBER):
    '''some code that uses the argument NUMBER'''
    pyplot.figure()
    ---plot some data---
    pyplot.show()

import argparse
if __name__=="__main__":
    argp=argparse.ArgumentParser("plot my function")
    argp.add_argument("-n","--number",type=int,default=0,required=True,help="some argument NUMBER, change type and default accordingly")
    args=argp.parse_args()
    plot_function(args.number)
</snippet></ROW><ROW><id>13751254</id><snippet>cursor.fetchone()</snippet></ROW><ROW><id>13751254</id><snippet>fetchrow_array()</snippet></ROW><ROW><id>13751345</id><snippet>TypeError</snippet></ROW><ROW><id>13751345</id><snippet>AttributeError</snippet></ROW><ROW><id>13751467</id><snippet>s = open(filename).read()
reports = [x.strip() for x in s.split('=-=-=-=-=-=-=-=-=-=-=\n')]
</snippet></ROW><ROW><id>13751566</id><snippet>import operator as op


class FuzzyDict(object):
    def __init__(self, iterable=(), float_eq=op.eq):
        self._float_eq = float_eq
        self._dict = dict(iterable)

    def __getitem__(self, key):
        return self._dict[key]

    def __setitem__(self, key, val):
        self._dict[key] = val

    def __iter__(self):
        return iter(self._dict)

    def __len__(self):
        return len(self._dict)

    def __contains__(self, key):
        return key in self._dict

    def __eq__(self, other):
        def compare(a, b):
            if isinstance(a, float) and isinstance(b, float):
                return self._float_eq(a, b)
            else:
                return a == b
        try:
            if len(self) != len(other):
                return False
            for key in self:
                if not compare(self[key], other[key]):
                    return False
            return True
        except Exception:
            return False

    def __getattr__(self, attr):
        # free features borrowed from dict
        attr_val = getattr(self._dict, attr)
        if callable(attr_val):
            def wrapper(*args, **kwargs):
                result = attr_val(*args, **kwargs)
                if isinstance(result, dict):
                    return FuzzyDict(result, self._float_eq)
                return result
            return wrapper
        return attr_val
</snippet></ROW><ROW><id>13751566</id><snippet>&gt;&gt;&gt; def float_eq(a, b):
...     return abs(a - b) &lt; 0.01
... 
&gt;&gt;&gt; A = FuzzyDict(float_eq=float_eq)
&gt;&gt;&gt; B = FuzzyDict(float_eq=float_eq)
&gt;&gt;&gt; A['a'] = 2.345
&gt;&gt;&gt; A['b'] = 'a string'
&gt;&gt;&gt; B['a'] = 2.345
&gt;&gt;&gt; B['b'] = 'a string'
&gt;&gt;&gt; B['a'] = 2.3445
&gt;&gt;&gt; A == B
True
&gt;&gt;&gt; B['a'] = 234.55
&gt;&gt;&gt; A == B
False
&gt;&gt;&gt; B['a'] = 2.345
&gt;&gt;&gt; B['b'] = 'a strin'
&gt;&gt;&gt; A == B
False
</snippet></ROW><ROW><id>13751566</id><snippet>&gt;&gt;&gt; A['nested'] = FuzzyDict(float_eq=float_eq)
&gt;&gt;&gt; A['nested']['a'] = 17.32
&gt;&gt;&gt; B['nested'] = FuzzyDict(float_eq=float_eq)
&gt;&gt;&gt; B['nested']['a'] = 17.321
&gt;&gt;&gt; B['b'] = 'a string'   # changed before
&gt;&gt;&gt; A == B
True
&gt;&gt;&gt; B['nested']['a'] = 17.34
&gt;&gt;&gt; A == B
False
</snippet></ROW><ROW><id>13751566</id><snippet>dict</snippet></ROW><ROW><id>13751566</id><snippet>dict</snippet></ROW><ROW><id>13751566</id><snippet>copy</snippet></ROW><ROW><id>13751566</id><snippet>setdefault</snippet></ROW><ROW><id>13751566</id><snippet>get</snippet></ROW><ROW><id>13751566</id><snippet>update</snippet></ROW><ROW><id>13751566</id><snippet>list</snippet></ROW><ROW><id>13751566</id><snippet>list</snippet></ROW><ROW><id>13751566</id><snippet>__iadd__</snippet></ROW><ROW><id>13751566</id><snippet>__add__</snippet></ROW><ROW><id>13751566</id><snippet>__radd__</snippet></ROW><ROW><id>13751566</id><snippet>[1,2,3] + MyList([1,2,3])
</snippet></ROW><ROW><id>13751566</id><snippet>list</snippet></ROW><ROW><id>13751566</id><snippet>MyList</snippet></ROW><ROW><id>13751566</id><snippet>dict</snippet></ROW><ROW><id>13751566</id><snippet>dict</snippet></ROW><ROW><id>13751566</id><snippet>dict</snippet></ROW><ROW><id>13751697</id><snippet>conds.ini</snippet></ROW><ROW><id>13751697</id><snippet>[mysettings]
cond1: x &gt;= 10
cond2: y &lt; 5
cond3: x + y &gt;= 6
</snippet></ROW><ROW><id>13751697</id><snippet>import ConfigParser

cp = ConfigParser.ConfigParser()
cp.read('conds.ini')

conds = []
conds.append(cp.get('mysettings', 'cond1'))
conds.append(cp.get('mysettings', 'cond2'))
conds.append(cp.get('mysettings', 'cond3'))

x = 8
y = 3
for cond in conds:
    truthiness = eval('bool({})'.format(cond))
    print '{}: {}'.format(cond, truthiness)
</snippet></ROW><ROW><id>13751697</id><snippet>x &gt;= 10: False
y &lt; 5: True
x + y &gt;= 6: True
</snippet></ROW><ROW><id>13751728</id><snippet>def get_form(self, *args, **kwargs):
        f = super(CommentAdmin, self).get_form(*args, **kwargs)
        f.base_fields['categories'].initial = 1

        return f
</snippet></ROW><ROW><id>13751728</id><snippet>def __init__(self, *args, **kwargs):
        super(CommentForm, self).__init__(*args, **kwargs)

        self.fields['categories'].initial = self.instance.object_id
</snippet></ROW><ROW><id>13752207</id><snippet>textarea</snippet></ROW><ROW><id>13752207</id><snippet>textarea</snippet></ROW><ROW><id>13752207</id><snippet>&lt;textarea&gt;%(word)s&lt;/textarea&gt;
</snippet></ROW><ROW><id>13752289</id><snippet>    8. Nothing but quit!\n\'
</snippet></ROW><ROW><id>13752289</id><snippet>menu</snippet></ROW><ROW><id>13752289</id><snippet>\'</snippet></ROW><ROW><id>13752289</id><snippet>  File "calc.py", line 13
    8. Nothing but quit!\n\'
                           ^
SyntaxError: EOL while scanning string literal
</snippet></ROW><ROW><id>13752289</id><snippet>y=int(input(menu))</snippet></ROW><ROW><id>13752321</id><snippet>def some_action(self):
    # do something here
    # after it's done close app
    self.close()
</snippet></ROW><ROW><id>13752321</id><snippet>    app.quit()
</snippet></ROW><ROW><id>13752321</id><snippet>    QCoreApplication.instance().quit()
</snippet></ROW><ROW><id>13752355</id><snippet>209024.0</snippet></ROW><ROW><id>13752355</id><snippet>[20924.0 * r for r in montly_ratio]   
 ^^^^^
</snippet></ROW><ROW><id>13752394</id><snippet>IORegisterForSystemPower()</snippet></ROW><ROW><id>13752394</id><snippet>sleepwatcher</snippet></ROW><ROW><id>13752516</id><snippet>found = []
with open("/var/log/syslog", "r") as vpnfile:
    for line in vpnfile:
        if "failed CHAP" in line:
            found.append(line)
        # no need to check if "failed CHAP" is not in the line, since you
        # already know it's not there from the first test failing
if found:
    print(" ".join(found))
else:
    print("Nadda")
</snippet></ROW><ROW><id>13752562</id><snippet>print</snippet></ROW><ROW><id>13752562</id><snippet>print(data.split(':'))
</snippet></ROW><ROW><id>13752566</id><snippet>re.UNICODE</snippet></ROW><ROW><id>13752566</id><snippet>sub</snippet></ROW><ROW><id>13752566</id><snippet>val = re.sub(r'\b' + u_word + r'\b', unicode(new_word), u_text, flags=re.UNICODE)
</snippet></ROW><ROW><id>13752566</id><snippet>\b</snippet></ROW><ROW><id>13752566</id><snippet>re.UNICODE</snippet></ROW><ROW><id>13752566</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>13752566</id><snippet>αβ</snippet></ROW><ROW><id>13752566</id><snippet>re</snippet></ROW><ROW><id>13752566</id><snippet>\b</snippet></ROW><ROW><id>13752566</id><snippet>\w</snippet></ROW><ROW><id>13752566</id><snippet>re.UNICODE</snippet></ROW><ROW><id>13752566</id><snippet>new_word</snippet></ROW><ROW><id>13752566</id><snippet>unicode(new_word)</snippet></ROW><ROW><id>13752566</id><snippet>new_word</snippet></ROW><ROW><id>13752566</id><snippet>unicode()</snippet></ROW><ROW><id>13752595</id><snippet>for i in range( len( execlist ) ):
    if execlist[i][0] == mynumber
         execlist[i][1] = myctype
         execlist[i][2] = myx
         execlist[i][3] = myy
         execlist[i][4] = mydelay
</snippet></ROW><ROW><id>13752599</id><snippet>printf()</snippet></ROW><ROW><id>13752599</id><snippet>diff</snippet></ROW><ROW><id>13752599</id><snippet>faulthandler</snippet></ROW><ROW><id>13752599</id><snippet>malloc()</snippet></ROW><ROW><id>13752628</id><snippet>import re
try:
    # UCS-4
    highpoints = re.compile(u'[\U00010000-\U0010ffff]')
except re.error:
    # UCS-2
    highpoints = re.compile(u'[\uD800-\uDBFF][\uDC00-\uDFFF]')
# mytext = u'&lt;some string containing 4-byte chars&gt;'
mytext = highpoints.sub(u'\u25FD', mytext)
</snippet></ROW><ROW><id>13752628</id><snippet>WHITE MEDIUM SMALL SQUARE (U+25FD)</snippet></ROW><ROW><id>13752677</id><snippet>N = 10
map(lambda t: map(lambda s: s[:N], t), quotes)
</snippet></ROW><ROW><id>13752934</id><snippet>TagParser</snippet></ROW><ROW><id>13752934</id><snippet>endElement</snippet></ROW><ROW><id>13752934</id><snippet>self.tags</snippet></ROW><ROW><id>13752934</id><snippet>src</snippet></ROW><ROW><id>13752934</id><snippet>src = '''\
&lt;review type="review"&gt;&lt;link&gt;http://www.openlist.com/new-york-ny/mickey-mantles/27612417/?numReviews=178&lt;/link&gt;&lt;/review&gt;
'''
</snippet></ROW><ROW><id>13752934</id><snippet>&lt;review&gt;</snippet></ROW><ROW><id>13752934</id><snippet>&lt;/review&gt;</snippet></ROW><ROW><id>13752934</id><snippet>endElement</snippet></ROW><ROW><id>13752934</id><snippet>&lt;/review&gt;</snippet></ROW><ROW><id>13752934</id><snippet>src</snippet></ROW><ROW><id>13752934</id><snippet>src = '''\
&lt;review type="review"&gt;&lt;link&gt;http://www.openlist.com/new-york-ny/mickey-mantles/27612417/?numReviews=178&lt;/link&gt;&lt;/review&gt;
'''
</snippet></ROW><ROW><id>13752934</id><snippet>{u'link': u'http://www.openlist.com/new-york-ny/mickey-mantles/27612417/?numReviews=178'}
</snippet></ROW><ROW><id>13753041</id><snippet>~</snippet></ROW><ROW><id>13753041</id><snippet>~</snippet></ROW><ROW><id>13753041</id><snippet>~/code/stochastic/main_plot.py</snippet></ROW><ROW><id>13753041</id><snippet>~</snippet></ROW><ROW><id>13753041</id><snippet>subprocess.Popen(['python',
                  os.path.expanduser('~/code/stochastic/main_plot.py'),
                  '-n', str(number_of_cores),'-m', str(number_of_motors)])
</snippet></ROW><ROW><id>13753041</id><snippet>~</snippet></ROW><ROW><id>13753041</id><snippet>shell=True</snippet></ROW><ROW><id>13753041</id><snippet>~</snippet></ROW><ROW><id>13753041</id><snippet>expanduser</snippet></ROW><ROW><id>13753041</id><snippet>"${HOME}/foo"</snippet></ROW><ROW><id>13753041</id><snippet>os.path.expandvars("${HOME}/foo")</snippet></ROW><ROW><id>13753041</id><snippet>"foo$((1+1))bar"</snippet></ROW><ROW><id>13753041</id><snippet>"foo%sbar" % (1+1,)</snippet></ROW><ROW><id>13753155</id><snippet>usecols = (0,)</snippet></ROW><ROW><id>13753155</id><snippet>np.loadtxt</snippet></ROW><ROW><id>13753155</id><snippet>dtype</snippet></ROW><ROW><id>13753155</id><snippet>import numpy as np
symbols = np.loadtxt('filename.csv',
                     dtype={'names': ('ticker', ),
                            'formats': ('S10',)},
                     delimiter=',',
                     skiprows=1,
                     usecols=(0,)
                     )
print(symbols)
</snippet></ROW><ROW><id>13753155</id><snippet>filename.csv</snippet></ROW><ROW><id>13753155</id><snippet>ticker,year,month,day
GPD.TO,2010,8,16
HAO.V,2010,8,16
RDS.V,2010,8,16
MD.V,2010,8,16
</snippet></ROW><ROW><id>13753155</id><snippet>[('GPD.TO',) ('HAO.V',) ('RDS.V',) ('MD.V',)]
</snippet></ROW><ROW><id>13753155</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>13753155</id><snippet>dtype</snippet></ROW><ROW><id>13753155</id><snippet>symbols = np.genfromtxt('filename.csv',
                        dtype={'names': ('ticker', 'year', 'month','day'),
                               'formats': ('S10','i4','i2','i2')},                        
                        delimiter=',',
                        skiprows=1,
                        usecols=(0,)
                        )
</snippet></ROW><ROW><id>13753238</id><snippet>input</snippet></ROW><ROW><id>13753238</id><snippet>def find_anagrams():
    with open("dictionary.txt", "r") as fileInput:
        words = set(word.strip() for word in fileInput)

    while True:
        try:
            user_input = input("Word? ").strip()
        except:
            break  #you probably don't care for the type of exception here

        anagrams = [word for word in words if anagram(word, user_input)]
        print_results(anagrams)

def print_results(anagrams):
    if len(anagrams) == 0:
        print("there are no anagrams")
    elif len(anagrams) == 1:
        print("the only anagram is %s" % anagrams[0])
    else:
        print("there are %s anagrams: %s" % (len(anagrams), ', '.join(anagrams)))
</snippet></ROW><ROW><id>13753238</id><snippet>anagram</snippet></ROW><ROW><id>13753238</id><snippet>&gt;&gt;&gt; Counter("hello") == {"h":1, "e":1, "l":2, "o": 1}
True
</snippet></ROW><ROW><id>13753238</id><snippet>from collections import Counter

def anagram(word, check):
    return not word == check and Counter(word) == Counter(check)
</snippet></ROW><ROW><id>13753506</id><snippet>numpy.median</snippet></ROW><ROW><id>13753506</id><snippet>axis=0</snippet></ROW><ROW><id>13753506</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([[1,2,3],[4,5,6]])
&gt;&gt;&gt; b = numpy.array([[3,4,5],[6,7,8]])
&gt;&gt;&gt; c = numpy.array([[9,10,11],[12,1,2]])
&gt;&gt;&gt; d = numpy.array([a,b,c])
&gt;&gt;&gt; d
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12,  1,  2]]])
&gt;&gt;&gt; d.shape
(3, 2, 3)

&gt;&gt;&gt; numpy.median(d, axis=0)
array([[ 3.,  4.,  5.],
       [ 6.,  5.,  6.]])
</snippet></ROW><ROW><id>13753552</id><snippet>os.system()</snippet></ROW><ROW><id>13753552</id><snippet>db_dump = "mysqldump -u %s -p%s --socket=source_socket --databases %s | mysql -u %s -p%s   --socket=dest_socket" % (db_user, db_pass, ' '.join(db_list), db_user, db_pass)

result = os.system(db_dump)
if 0 == result:
    logging.info("database dump complete")
else:
    logging.error("databases did not dump; result code: %d" % result)
</snippet></ROW><ROW><id>13753552</id><snippet>subprocess</snippet></ROW><ROW><id>13753552</id><snippet>os.system()</snippet></ROW><ROW><id>13753552</id><snippet>os.system()</snippet></ROW><ROW><id>13753552</id><snippet>subprocess</snippet></ROW><ROW><id>13753560</id><snippet>sum(1)</snippet></ROW><ROW><id>13753560</id><snippet>axis = 1</snippet></ROW><ROW><id>13753560</id><snippet>numpy</snippet></ROW><ROW><id>13753560</id><snippet>numpy.argsort</snippet></ROW><ROW><id>13753560</id><snippet>In [72]: import numpy as np

In [73]: x = np.array([521, 3, 1, 2, 1, 1, 5])

In [74]: np.argsort(x)
Out[74]: array([2, 4, 5, 3, 1, 6, 0])
</snippet></ROW><ROW><id>13753560</id><snippet>np.argsort</snippet></ROW><ROW><id>13753560</id><snippet>x</snippet></ROW><ROW><id>13753560</id><snippet>x[2]</snippet></ROW><ROW><id>13753560</id><snippet>1</snippet></ROW><ROW><id>13753560</id><snippet>x[4]</snippet></ROW><ROW><id>13753560</id><snippet>totals = df.sum(1)
print(totals)
# tz                     521
# Africa/Cairo             3
# Africa/Casablanca        1
# Africa/Ceuta             2
# Africa/Johannesburg      1
# Africa/Lusaka            1
# America/Anchorage        5
</snippet></ROW><ROW><id>13753560</id><snippet>totals.argsort()</snippet></ROW><ROW><id>13753560</id><snippet>[521, 3, 1, 2, 1, 1, 5]</snippet></ROW><ROW><id>13753560</id><snippet>numpy.argsort</snippet></ROW><ROW><id>13753560</id><snippet>[2, 4, 5, 3, 1, 6, 0]
</snippet></ROW><ROW><id>13753560</id><snippet>Series</snippet></ROW><ROW><id>13753560</id><snippet>index</snippet></ROW><ROW><id>13753560</id><snippet>totals</snippet></ROW><ROW><id>13753560</id><snippet>print(totals.argsort())
# tz                     2
# Africa/Cairo           4
# Africa/Casablanca      5
# Africa/Ceuta           3
# Africa/Johannesburg    1
# Africa/Lusaka          6
# America/Anchorage      0
</snippet></ROW><ROW><id>13753560</id><snippet>totals.index</snippet></ROW><ROW><id>13753560</id><snippet>totals[totals.argsort()]</snippet></ROW><ROW><id>13753560</id><snippet>totals</snippet></ROW><ROW><id>13753560</id><snippet>print(totals[totals.argsort()])
# Africa/Casablanca        1
# Africa/Johannesburg      1
# Africa/Lusaka            1
# Africa/Ceuta             2
# Africa/Cairo             3
# America/Anchorage        5
# tz                     521
</snippet></ROW><ROW><id>13753787</id><snippet>~/.config/user-dirs.dirs</snippet></ROW><ROW><id>13753787</id><snippet>xdg-user-dir</snippet></ROW><ROW><id>13753787</id><snippet>import subprocess
subprocess.check_output(['xdg-user-dir', 'DESKTOP'])
</snippet></ROW><ROW><id>13753787</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>13754073</id><snippet>def dictelem(input):   
    parts   = input.split('&amp;')
    listing = [part.split('=') for part in parts]

    result = {}
    for entry in listing:
        head, tail = entry[0], ''.join(entry[1:])
        if ':' in tail:
            entries = tail.split(',')
            result.update({ head : dict(e.split(':') for e in entries) })
        else:
            result.update({head: tail})

    return result
</snippet></ROW><ROW><id>13754297</id><snippet>string.ascii_lowercase</snippet></ROW><ROW><id>13754297</id><snippet>zip()</snippet></ROW><ROW><id>13754297</id><snippet>import string
morse_alphabet = ".- -... -.-. -.. . ..-. --. .... .. .--- -.- .-.. -- -. --- .--. --.- .-. ... - ..- ...- .-- -..- -.-- --.."
morse_letters = dict(zip(string.ascii_lowercase, morse_alphabet.split()))

def t(code):
    return filter(None, (morse_letters.get(c.lower()) for c in code))
</snippet></ROW><ROW><id>13754297</id><snippet>t</snippet></ROW><ROW><id>13754297</id><snippet>filter()</snippet></ROW><ROW><id>13754297</id><snippet>morse_letters</snippet></ROW><ROW><id>13754297</id><snippet>filter()</snippet></ROW><ROW><id>13754297</id><snippet>None</snippet></ROW><ROW><id>13754297</id><snippet>&gt;&gt;&gt; t('S.O.S.')
['...', '---', '...']
&gt;&gt;&gt; t('Stack Overflow')
['...', '-', '.-', '-.-.', '-.-', '---', '...-', '.', '.-.', '..-.', '.-..', '---', '.--']
</snippet></ROW><ROW><id>13754312</id><snippet>_pytest/doctest.py</snippet></ROW><ROW><id>13754330</id><snippet>from gi.repository import cairo
</snippet></ROW><ROW><id>13755051</id><snippet>df.xs(2, level='B')</snippet></ROW><ROW><id>13755051</id><snippet>df[df.index.get_level_values('B') == val]</snippet></ROW><ROW><id>13755193</id><snippet>anagrams = []
for word in f:
    word = word.strip()
    if len(word)==len(inputted_word):
        if word == inputted_word:
            continue
        elif anagram(word, inputted_word):
            anagrams.append(word)
</snippet></ROW><ROW><id>13755193</id><snippet>anagrams</snippet></ROW><ROW><id>13755193</id><snippet>#try:
    #if word == 1:
    #print ('The only anagram for', user_input, 'is', word)
#elif word &gt; 1:
    #print ('The anagrams for', user_input, 'are', word)
#except TypeError:
    #pass
</snippet></ROW><ROW><id>13755193</id><snippet>word</snippet></ROW><ROW><id>13755193</id><snippet>1</snippet></ROW><ROW><id>13755193</id><snippet>1</snippet></ROW><ROW><id>13755193</id><snippet>if</snippet></ROW><ROW><id>13755285</id><snippet>numset2</snippet></ROW><ROW><id>13755285</id><snippet>numset1</snippet></ROW><ROW><id>13755285</id><snippet>numset2</snippet></ROW><ROW><id>13755285</id><snippet>import bisect
# your code here
numset2.sort()
L = len(numset2)
numPossibilities = sum([bisect.bisect_right(numset2,n1) &lt; L for n1 in numset1])
</snippet></ROW><ROW><id>13755285</id><snippet>numset1</snippet></ROW><ROW><id>13755285</id><snippet>numset2</snippet></ROW><ROW><id>13755285</id><snippet>numPossibilities = sum([L - bisect.bisect_right(numset2,n1) for n1 in numset1])
</snippet></ROW><ROW><id>13755455</id><snippet>module.main()</snippet></ROW><ROW><id>13755455</id><snippet>main</snippet></ROW><ROW><id>13755554</id><snippet>self.url().toString()
</snippet></ROW><ROW><id>13755554</id><snippet>    if 'example' in self.url().toString() \
    or self.url().toString().endswith('example') \ 
    or 'example' in self.url().toString().split("/"):
        pass
</snippet></ROW><ROW><id>13755691</id><snippet>v</snippet></ROW><ROW><id>13755691</id><snippet>C</snippet></ROW><ROW><id>13755691</id><snippet>S</snippet></ROW><ROW><id>13755691</id><snippet>union(S', c)</snippet></ROW><ROW><id>13755691</id><snippet>c</snippet></ROW><ROW><id>13755691</id><snippet>C</snippet></ROW><ROW><id>13755691</id><snippet>S'</snippet></ROW><ROW><id>13755691</id><snippet>v - value(c)</snippet></ROW><ROW><id>13755691</id><snippet>cents * size(C)</snippet></ROW><ROW><id>13755691</id><snippet>def dpMakeChange(coinValueList,change,minCoins):
   # Solve the problem for each number of cents less than the target
   for cents in range(change+1):

      # At worst, it takes all pennies, so make that the base solution
      coinCount = cents

      # Try all coin values less than the current number of cents
      for j in [c for c in coinValueList if c &lt;= cents]:

            # See if a solution to current number of cents minus the value
            # of the current coin, with one more coin added is the best 
            # solution so far  
            if minCoins[cents-j] + 1 &lt; coinCount:
               coinCount = minCoins[cents-j]+1

      # Memoize the solution for the current number of cents
      minCoins[cents] = coinCount

   # By the time we're here, we've built the solution to the overall problem, 
   # so return it
   return minCoins[change]
</snippet></ROW><ROW><id>13755856</id><snippet>’</snippet></ROW><ROW><id>13755856</id><snippet>'</snippet></ROW><ROW><id>13755856</id><snippet>grep</snippet></ROW><ROW><id>13755856</id><snippet>grep --color='auto' -P -n "[\x80-\xFF]" your_file.py
</snippet></ROW><ROW><id>13755856</id><snippet>main()</snippet></ROW><ROW><id>13755861</id><snippet>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(void) {
   FILE *fp = fopen("/etc/passwd", "r");
   char line[999];
   while (fgets(line, sizeof line, fp)) {
      char *user = strtok(line, ":");
      char *shell;
      int i;
      for (i = 0; i &lt; 4; i++)
         strtok(0, ":");
      shell = strtok(0, ":");
      printf("User %s has shell %s\n", user, shell);
   }
   fclose(fp);
   return 0;
}
</snippet></ROW><ROW><id>13755861</id><snippet>::</snippet></ROW><ROW><id>13755861</id><snippet>strtok</snippet></ROW><ROW><id>13755861</id><snippet>strsep</snippet></ROW><ROW><id>13755861</id><snippet>strchr</snippet></ROW><ROW><id>13755861</id><snippet>#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(void) {
   FILE *fp = fopen("/etc/passwd", "r");
   char line[999];
   while (fgets(line, sizeof line, fp)) {
      char *user = line;
      char *p = line;
      char *shell;
      int i;
      for (i = 0; i &lt; 6; i++)
         p = strchr(p + 1, ':');
      shell = p + 1;
      strchr(user, ':')[0] = 0;
      printf("User %s has shell %s", user, shell);
   }
   fclose(fp);
   return 0;
}
</snippet></ROW><ROW><id>13755861</id><snippet>news</snippet></ROW><ROW><id>13756066</id><snippet>class TransCodingFile(static.File):
    def render(self,request):
        return static.File.render(self,request)
</snippet></ROW><ROW><id>13756155</id><snippet>.pyc</snippet></ROW><ROW><id>13756155</id><snippet>.pyo</snippet></ROW><ROW><id>13756155</id><snippet>_PyObject_Dump(f); _PyObject_Dump(f-&gt;f_code);</snippet></ROW><ROW><id>13756566</id><snippet>0 1 0 1 0 1 0
2 3 2 3 2 3 2
1 0 1 0 1 0 1
</snippet></ROW><ROW><id>13756566</id><snippet>import random
rows = [[None] * 10 for i in xrange(10)] # or numpy matrix
for i, row in enumerate(rows):
    for j, _ in enumerate(row):
        available = set(xrange(256))
        if j &gt; 0:
            available.discard(row[j-1])
        if i &gt; 0:
            available.difference_update(rows[i-1][max(0,j-1):j+2])
        row[j] = random.choice(tuple(available))
print '\n'.join(map(str, rows))
</snippet></ROW><ROW><id>13756698</id><snippet>python web2py.py --ip 0.0.0.0
</snippet></ROW><ROW><id>13756698</id><snippet>please visit:
    http://0.0.0.0:8000
</snippet></ROW><ROW><id>13756801</id><snippet>DATABASES = {
'default': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': '/var/db/projectdb'
}
'db_app1': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': '/var/db/app1db'
}
'db_app2': {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': '/var/db/app2db'
}
</snippet></ROW><ROW><id>13756801</id><snippet># DB router for app1

class App1DBRouter(object):
    """
    A router to control app1 db operations
    """
    def db_for_read(self, model, **hints):
        "Point all operations on app1 models to 'db_app1'"
        from django.conf import settings
        if not settings.DATABASES.has_key('app1'):
            return None
        if model._meta.app_label == 'app1':
            return 'db_app1'
        return None

    def db_for_write(self, model, **hints):
        "Point all operations on app1 models to 'db_app1'"
        from django.conf import settings
        if not settings.DATABASES.has_key('app1'):
            return None
        if model._meta.app_label == 'app1':
            return 'db_app1'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        "Allow any relation if a model in app1 is involved"
        from django.conf import settings
        if not settings.DATABASES.has_key('app1'):
            return None
        if obj1._meta.app_label == 'app1' or obj2._meta.app_label == 'app1':
            return True
        return None

    def allow_syncdb(self, db, model):
        "Make sure the app1 app only appears on the 'app1' db"
        from django.conf import settings
        if not settings.DATABASES.has_key('app1'):
            return None
        if db == 'db_app1':
            return model._meta.app_label == 'app1'
        elif model._meta.app_label == 'app1':
            return False
        return None
</snippet></ROW><ROW><id>13756801</id><snippet>DATABASE_ROUTERS</snippet></ROW><ROW><id>13756801</id><snippet>DATABASE_ROUTERS = ['app1.dbRouter.App1DBRouter', 'app2.dbRouter.App2DBRouter']
</snippet></ROW><ROW><id>13757214</id><snippet>static</snippet></ROW><ROW><id>13757214</id><snippet>django/contrib/admin/static</snippet></ROW><ROW><id>13757214</id><snippet>{% load static from staticfiles %}
&lt;a href="{% static "template1/index.html" %}" /&gt;template1&lt;/a&gt;
</snippet></ROW><ROW><id>13757290</id><snippet>import string

s = "the qUiCk BROWN fox:: jumped. over , the lazy    dog."
s_correct = "The quick brown fox: jumped. Over, the lazy dog."


def chars_from_lines(lines):
    for line in lines:
        for ch in line:
            yield ch

start, in_sentence, saw_space = range(3)

punct = set(string.punctuation)
punct_non_repeat = punct - set(['.', '-'])
end_sentence_chars = set(['.', '!', '?'])

def edit_sentences(seq):
    state = start
    ch_punct_last = None

    for ch in seq:
        ch = ch.lower()

        if ch == ch_punct_last:
            # Don't pass repeated punctuation.
            continue
        elif ch in punct_non_repeat:
            ch_punct_last = ch
        else:
            # Not punctuation to worry about, so forget the last.
            ch_punct_last = None

        if state == start and ch.isspace():
            continue
        elif state == start:
            state = in_sentence
            yield ch.upper()

        elif state == in_sentence and ch in end_sentence_chars:
            state = start
            yield ch
            yield ' '
        elif state == in_sentence and not ch.isspace():
            yield ch
        elif state == in_sentence and ch.isspace():
            state = saw_space
            continue

        elif state == saw_space and ch.isspace():
            # stay in state saw_space
            continue
        elif state == saw_space and ch in punct:
            # stay in state saw_space
            yield ch
        elif state == saw_space and ch.isalnum():
            state = in_sentence
            yield ' '
            yield ch

#with open("input.txt") as f:
#    s_result = ''.join(ch for ch in edit_sentences(chars_from_lines(f)))

s_result = ''.join(ch for ch in edit_sentences(s))

print(s_result)
print(s_correct)
</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>soup = BeautifulSoup()</snippet></ROW><ROW><id>13757348</id><snippet>soupSetup</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>BeautifulSoup()</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>soup</snippet></ROW><ROW><id>13757348</id><snippet>def soupSetup(file_name, encode_type):
    global soup
    soup = BeautifulSoup(open("C:\\Python32\\html\\"+file_name+".html", encoding=encode_type))
</snippet></ROW><ROW><id>13757348</id><snippet>soup = BeautifulSoup()</snippet></ROW><ROW><id>13757348</id><snippet>soup = None
</snippet></ROW><ROW><id>13757348</id><snippet>import sys
from bs4 import BeautifulSoup

sys.setrecursionlimit(2000)

soup = None
def soupSetup(file_name, encode_type):
    global soup
    soup = BeautifulSoup(open("C:\\Python32\\html\\"+file_name+".html", encoding=encode_type))
</snippet></ROW><ROW><id>13757777</id><snippet>base_addr.value == base_addr_temp.value
</snippet></ROW><ROW><id>13757804</id><snippet>def my_func(lst):
    return ', '.join(lst[:-1])+' and '+lst[-1]
</snippet></ROW><ROW><id>13757804</id><snippet>f = lambda x: ', '.join(x[:-1]) + ' and '+x[-1]
</snippet></ROW><ROW><id>13757804</id><snippet>result = ', '.join(a[:-1]) + ' and ' + a[-1]
</snippet></ROW><ROW><id>13757807</id><snippet>__this__</snippet></ROW><ROW><id>13757807</id><snippet>[type(getattr(email, x)) for x in dir(email)]
</snippet></ROW><ROW><id>13757807</id><snippet>dir</snippet></ROW><ROW><id>13757807</id><snippet>CamelCase</snippet></ROW><ROW><id>13757807</id><snippet>lower_with_underscores</snippet></ROW><ROW><id>13757807</id><snippet>SHOUTY_CASE</snippet></ROW><ROW><id>13757807</id><snippet>_leading</snippet></ROW><ROW><id>13757807</id><snippet>__double</snippet></ROW><ROW><id>13757807</id><snippet>__underline__</snippet></ROW><ROW><id>13757996</id><snippet>reduce(lambda x,y: x+[y] if x==[] or x[-1] != y else x, your_list,[])
</snippet></ROW><ROW><id>13757996</id><snippet>reduce(lambda x,y: x+[y] if not y in x else x, your_list,[])
</snippet></ROW><ROW><id>13758041</id><snippet># not actual code
@identity_loaded.connect_via(app)
def on_identity_loaded(sender, identity):
  user = Person.query.filter(Person.username==identity.person.username).one()
  g.user = user
</snippet></ROW><ROW><id>13758041</id><snippet># This runs before every request
@app.before_request
def before_request():
    g.user = your_magic_user_function()
</snippet></ROW><ROW><id>13758209</id><snippet>echo foo</snippet></ROW><ROW><id>13758209</id><snippet>-n</snippet></ROW><ROW><id>13758209</id><snippet>$ echo -n foo | sha256sum
2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae  -
$ python
Python 2.7.3 (default, Sep 26 2012, 21:53:58) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.sha256('foo').hexdigest()
'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'
</snippet></ROW><ROW><id>13758236</id><snippet>from multiprocessing import Pool
import os

def gitSync(repo):
    print "I am", repo, "and my cwd is:", os.getcwd()
    os.chdir(repo)
    print "I am", repo, "and my cwd is:", os.getcwd()

if __name__ == '__main__':
    dir = os.getcwd()
    repos = [item for item in os.listdir(dir) if os.path.isdir(os.path.join(dir, item))]
    print repos
    pool = Pool(maxtasksperchild=1)
    pool.map(gitSync, repos)
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>13758236</id><snippet>maxtasksperchild=1</snippet></ROW><ROW><id>13758236</id><snippet>rebooted</snippet></ROW><ROW><id>13758236</id><snippet>john:captcrunch john$ python foo.py 
['.git', '.idea', 'fixtures', 'lib', 'obj', 'raw', 'tests']
I am .git and my cwd is: /Users/john/code/linz/src/captcrunch
I am .git and my cwd is: /Users/john/code/linz/src/captcrunch/.git
I am .idea and my cwd is: /Users/john/code/linz/src/captcrunch
I am .idea and my cwd is: /Users/john/code/linz/src/captcrunch/.idea
I am fixtures and my cwd is: /Users/john/code/linz/src/captcrunch
I am fixtures and my cwd is: /Users/john/code/linz/src/captcrunch/fixtures
I am lib and my cwd is: /Users/john/code/linz/src/captcrunch
I am lib and my cwd is: /Users/john/code/linz/src/captcrunch/lib
I am obj and my cwd is: /Users/john/code/linz/src/captcrunch
I am obj and my cwd is: /Users/john/code/linz/src/captcrunch/obj
I am raw and my cwd is: /Users/john/code/linz/src/captcrunch
I am raw and my cwd is: /Users/john/code/linz/src/captcrunch/raw
I am tests and my cwd is: /Users/john/code/linz/src/captcrunch
I am tests and my cwd is: /Users/john/code/linz/src/captcrunch/tests
</snippet></ROW><ROW><id>13758343</id><snippet>exec ( "/path/to/python/script.py $var1 $var2 $var3" );
</snippet></ROW><ROW><id>13758343</id><snippet>import sys

print sys.argv[1] # first parameter
print sys.argv[2] # second parameter
print sys.argv[3] # third parameter
</snippet></ROW><ROW><id>13758343</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13758343</id><snippet>1</snippet></ROW><ROW><id>13758614</id><snippet>tl = [('1','2','3'),('5','6','7')]
[tuple(int(x) for x in t) for t in tl]
# [(1, 2, 3), (5, 6, 7)]
</snippet></ROW><ROW><id>13758614</id><snippet>map</snippet></ROW><ROW><id>13758614</id><snippet>map(lambda t:tuple(map(int, t)), tl)
# [(1, 2, 3), (5, 6, 7)]
</snippet></ROW><ROW><id>13758741</id><snippet>x = 'â€œ There is considerable conjecture and debate as to how...

newx = ''.join(e for e in x.lower() if e.isalnum())

print newx

&gt;&gt;&gt; 'thereisconsiderableconjectureanddebateastohow'
</snippet></ROW><ROW><id>13758741</id><snippet>find</snippet></ROW><ROW><id>13758741</id><snippet>paragraph = 'The quick brown fox jumps over the lazy dog. I have two big dogs. Furry Dogs are the best. $%^Dogs love me.'
paragraph = ''.join(e for e in paragraph.lower() if e.isalnum() or e.isspace() or e=='.')
sentence_list = paragraph.split('.')
prev_word_list = []
for sentence in sentence_list:
    word_list = sentence.split()
    prev_word = ''
    for i,word in enumerate(word_list):
        if i == 0:
            pass
        else:
            if 'dog' in word.lower():
                prev_word = word_list[i-1]
                prev_word_list.append(prev_word)
</snippet></ROW><ROW><id>13758741</id><snippet>&gt;&gt;&gt; print prev_word_list
&gt;&gt;&gt; ['lazy', 'big', 'furry']
</snippet></ROW><ROW><id>13758875</id><snippet>^</snippet></ROW><ROW><id>13758875</id><snippet>(\d+)/$</snippet></ROW><ROW><id>13758875</id><snippet>/3/, foo/3/, foo/bar/baz/3</snippet></ROW><ROW><id>13758875</id><snippet>/$</snippet></ROW><ROW><id>13758875</id><snippet>url(r'^$', 'index'),
url(r'(?P&lt;department_id&gt;\d+)/$', 'courses'),
#   ^^^ needs ^
url(r'(?P&lt;department_id&gt;\d+)/(?P&lt;course_id&gt;\d+)/$', 'professors'),
</snippet></ROW><ROW><id>13758885</id><snippet>wx.MilliSleep(50)
</snippet></ROW><ROW><id>13758885</id><snippet>def show_loading(parent, title, message=None, maximum=100):
    if not message:
        message = title

    # A class for the return value.
    class LoadingObject(object):
        def __init__(self, dialog):
            self.dialog = dialog
            self.is_done = False

        def done(self):
            if not self.is_done:
                self.dialog.Destroy()
                self.is_done = True

        def pulse(self, message):
            self.dialog.Pulse(message)

        def progress(self, current, message=None):
            # Don't allow the progress to reach 100%, since it will freeze the
            # dialog.
            if current &gt;= maximum:
                current = current - 1

            if message is not None:
                self.dialog.Update(current, message)
            else:
                self.dialog.Update(current)

    # Create the progress dialog.
    dlg_style = wx.PD_APP_MODAL | wx.PD_ELAPSED_TIME | wx.PD_REMAINING_TIME
    dlg = wx.ProgressDialog(
        title, message, parent=parent, style=dlg_style, maximum=maximum
    )
    dlg.Pulse()

    # Wait just a little bit to allow the progress dialog to initialize.
    wx.MilliSleep(50)

    # Return an instance of the LoadingDialog with the progress dialog attached.
    return LoadingObject(dlg)
</snippet></ROW><ROW><id>13758885</id><snippet>def save(self, path=None):
    # Show a loading dialog while the document is staving.
    progress = shared.show_loading(self, 'Saving document')

    try:
        if not path:
            self.document.save()
        else:
            self.document.save_to_file(path)
    except IOError as e:
        message = 'Failed to save file:\n\n{}'.format(e.message)
        wx.MessageBox(message, 'Error', wx.OK | wx.ICON_ERROR)
    finally:
        progress.done()
</snippet></ROW><ROW><id>13759580</id><snippet>from bs4 import BeautifulSoup
import urllib2

f=urllib2.urlopen('http://yify-torrents.com/browse-movie')
html=f.read()
soup=BeautifulSoup(html)


In [25]: for i in soup.findAll("div",{"class":"browse-info"}):
    ...:     name=i.find('a').text
    ...:     for x in i.findAll('b'):
    ...:         if x.text=="Quality:":
    ...:             quality=x.parent.text
    ...:     link=i.find('a',{"class":"std-btn-small mleft torrentDwl"})['href']
    ...:     print [name,quality,link]
    ...:     
[u'James Bond: Casino Royale (2006)', u'Quality: 720p', 'http://yify-torrents.com/download/start/James_Bond_Casino_Royale_2006.torrent']
[u'Pitch Perfect (2012)', u'Quality: 720p', 'http://yify-torrents.com/download/start/Pitch_Perfect_2012.torrent']
...
</snippet></ROW><ROW><id>13759580</id><snippet>In [26]: for i in soup.findAll("div",{"class":"browse-info"}):
    ...:     name=i.find('a').text
    ...:     for x in i.findAll('b'):
    ...:         if x.text=="Quality:":
    ...:             quality=x.parent.find(text=True, recursive=False).strip()
    ...:     link=i.find('a',{"class":"std-btn-small mleft torrentDwl"})['href']
    ...:     print [name,quality,link]
</snippet></ROW><ROW><id>13759790</id><snippet>def complete(self,text,state):
try:
    tokens = readline.get_line_buffer().split()
    if not tokens or readline.get_line_buffer()[-1] == ' ':
        tokens.append(text)
</snippet></ROW><ROW><id>13759914</id><snippet>from django.db.models import get_models

for model in get_models():
    admin.site.register(model)
</snippet></ROW><ROW><id>13759914</id><snippet>unregister</snippet></ROW><ROW><id>13759944</id><snippet>import pyttsx

engine = pyttsx.init()
engine.say("Your Message")
engine.runAndWait()
</snippet></ROW><ROW><id>13759945</id><snippet>return</snippet></ROW><ROW><id>13759945</id><snippet>c</snippet></ROW><ROW><id>13759945</id><snippet>def equals_to(x,y):
    c = x + y           # c = x + y not a + b = c
    return c            # return the value of c 

def some_function(something):
    for i in something:
    ... 
    return 

sum = equals_to(1,2)     # set sum to the return value from the function 
some_function(sum)       # pass sum to some_function
</snippet></ROW><ROW><id>13759945</id><snippet>equals_to</snippet></ROW><ROW><id>13759945</id><snippet>x,y</snippet></ROW><ROW><id>13759945</id><snippet>a,b</snippet></ROW><ROW><id>13759945</id><snippet>c</snippet></ROW><ROW><id>13759945</id><snippet>x + y</snippet></ROW><ROW><id>13759945</id><snippet>a + b</snippet></ROW><ROW><id>13759945</id><snippet>c</snippet></ROW><ROW><id>13760241</id><snippet>urllib.unquote()</snippet></ROW><ROW><id>13760241</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.unquote('/media/music/k%C3%A1lm%C3%A1n balogh and the gipsy cimbalom band/aven shavale').decode('utf8')
u'/media/music/k\xe1lm\xe1n balogh and the gipsy cimbalom band/aven shavale'
&gt;&gt;&gt; print urllib.unquote('/media/music/k%C3%A1lm%C3%A1n balogh and the gipsy cimbalom band/aven shavale').decode('utf8')
/media/music/kálmán balogh and the gipsy cimbalom band/aven shavale
</snippet></ROW><ROW><id>13760241</id><snippet>urllib.parse.unquote()</snippet></ROW><ROW><id>13760725</id><snippet>LOW</snippet></ROW><ROW><id>13760725</id><snippet>MED</snippet></ROW><ROW><id>13760725</id><snippet>HIGH</snippet></ROW><ROW><id>13760725</id><snippet>0__________________L______________L+M_________________________L+M+H ( = 1)</snippet></ROW><ROW><id>13760725</id><snippet>x</snippet></ROW><ROW><id>13760725</id><snippet>x</snippet></ROW><ROW><id>13760735</id><snippet>import itertools

a = [2, 4, array([ 3.]), array([ 4.]), array([ 5.,  4.])]
list(itertools.chain.from_iterable(asarray(b).ravel() for b in a))
</snippet></ROW><ROW><id>13761086</id><snippet>json</snippet></ROW><ROW><id>13761086</id><snippet>import json
rs = json.dumps(dict(lst))
</snippet></ROW><ROW><id>13761086</id><snippet>dict()</snippet></ROW><ROW><id>13761086</id><snippet>json</snippet></ROW><ROW><id>13761086</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; lst = [("name", "value"), ("name2", "value2")]
&gt;&gt;&gt; rs = json.dumps(dict(lst))
&gt;&gt;&gt; print rs
{"name2": "value2", "name": "value"}
</snippet></ROW><ROW><id>13761143</id><snippet>itertools.count()</snippet></ROW><ROW><id>13761143</id><snippet>yourcounter = itertools.count()

next_counted_value = yourcounter.next()
</snippet></ROW><ROW><id>13761143</id><snippet>.next()</snippet></ROW><ROW><id>13761143</id><snippet>yourcounter = itertools.count().next

next_counted_value = yourcounter()
</snippet></ROW><ROW><id>13761238</id><snippet>lxml.html</snippet></ROW><ROW><id>13761238</id><snippet>&gt;&gt;&gt; tag = 'a'
&gt;&gt;&gt; attr = 'href'
&gt;&gt;&gt; xpq = '//{}/@{}'.format(tag, attr)
&gt;&gt;&gt; a = '&lt;a href="test-or-something"&gt;hello&lt;/a&gt;&lt;a&gt;No href here&lt;/a&gt;&lt;a href="something-else"&gt;blah&lt;/a&gt;'
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; lxml.html.fromstring(a).xpath(xpq)
['test-or-something', 'something-else']
</snippet></ROW><ROW><id>13761238</id><snippet>from HTMLParser import HTMLParser

class ListTags(HTMLParser):
    def __init__(self, tag, attr):
        HTMLParser.__init__(self)
        self.tag = tag
        self.attr = attr
        self.matches = []
    def handle_starttag(self, tag, attrs):
         if tag == self.tag:
            ad = dict(attrs)
            if self.attr in ad:
                self.matches.append(ad[self.attr])

&gt;&gt;&gt; lt = ListTags('a', 'href')
&gt;&gt;&gt; lt.feed(a)
&gt;&gt;&gt; lt.matches
['test-or-something', 'something-else']
</snippet></ROW><ROW><id>13761574</id><snippet>apply</snippet></ROW><ROW><id>13761574</id><snippet>merge</snippet></ROW><ROW><id>13761574</id><snippet>In [1]: from pandas import DataFrame

In [2]: df = DataFrame([[1,11,2012],[1,10,2012]], columns=['day','month','year'])

In [3]: df
Out[3]: 
   day month  year
0    1    11  2012
1    1    10  2012

In [4]: df.apply(lambda row: str(row['day'])+'/'+str(row['month'])+'/'+str(row['year']), axis=1)
Out[4]: 
0    1/11/2012
1    1/10/2012
</snippet></ROW><ROW><id>13761574</id><snippet>axis=1</snippet></ROW><ROW><id>13761574</id><snippet>In [5]: import datetime

In [6]: df.apply(lambda row: datetime.datetime(row['year'],row['month'],row['day']), axis=1)
Out[6]: 
0    2012-11-01 00:00:00
1    2012-10-01 00:00:00
</snippet></ROW><ROW><id>13761574</id><snippet>In [7]: df['new_date'] = df.apply(lambda row: str(row['day'])+'/'+str(row['month'])+'/'+str(row['year']), axis=1)

In [8]: df
Out[8]: 
   day month  year   new_date
0    1    11  2012  1/11/2012
1    1    10  2012  1/10/2012
</snippet></ROW><ROW><id>13761574</id><snippet>parse_dates</snippet></ROW><ROW><id>13761580</id><snippet>a = sorted(something, key=itemgetter(1), reverse=True)
a.sort(key=itemgetter(0))
</snippet></ROW><ROW><id>13761580</id><snippet>&gt;&gt;&gt; a = [ (1, 2), (0, 1), (2, 1), (2, 7) ]
&gt;&gt;&gt; a.sort(key=itemgetter(1), reverse=True)
&gt;&gt;&gt; a.sort(key=itemgetter(0))
&gt;&gt;&gt; a
[(0, 1), (1, 2), (2, 7), (2, 1)]
</snippet></ROW><ROW><id>13761580</id><snippet>sortedlist = sorted(reader, key=lambda L: dparser.parse(L[1]), reverse=True)
sortedlist.sort(key=itemgetter(0))
</snippet></ROW><ROW><id>13761662</id><snippet>inventory</snippet></ROW><ROW><id>13761662</id><snippet>inventory</snippet></ROW><ROW><id>13761662</id><snippet>items</snippet></ROW><ROW><id>13761662</id><snippet>emptyitems</snippet></ROW><ROW><id>13761662</id><snippet>items</snippet></ROW><ROW><id>13761662</id><snippet>emptyitems</snippet></ROW><ROW><id>13761662</id><snippet>inventory</snippet></ROW><ROW><id>13761662</id><snippet>key</snippet></ROW><ROW><id>13761662</id><snippet>for key in inventory</snippet></ROW><ROW><id>13761662</id><snippet>for value1, value2 in inventory.itervalues()</snippet></ROW><ROW><id>13761662</id><snippet>in inventory.values()</snippet></ROW><ROW><id>13761662</id><snippet>value1</snippet></ROW><ROW><id>13761662</id><snippet>inventory[key][0]</snippet></ROW><ROW><id>13761662</id><snippet>value2</snippet></ROW><ROW><id>13761662</id><snippet>inventory[key][1]</snippet></ROW><ROW><id>13761662</id><snippet>inventory[key][0]</snippet></ROW><ROW><id>13761662</id><snippet>inventory[key][1]</snippet></ROW><ROW><id>13761662</id><snippet>for quality, name in inventory.itervalues():
    try:
        if index_to_quality[str(quality)]=="":
            items.append(
                index_to_quality[str(quality)]
                +""+
                index_to_name[str(name)]
                )
        else:
            items.append(
                index_to_quality[str(quality)]
                +" "+
                index_to_name_no_the[str(name)]
                )
</snippet></ROW><ROW><id>13761776</id><snippet>DukeWann</snippet></ROW><ROW><id>13761776</id><snippet>regex = re.compile(r'''
Duke[ ] # First name followed by a space
Wann #Last Name
''', re.VERBOSE | re.IGNORECASE)
</snippet></ROW><ROW><id>13761955</id><snippet>from bottle import Bottle, run

app = Bottle()

@app.route('/')
def index():
    return 'Service Running'

run(
        app,                    # Run |app| Bottle() instance
        host     = '0.0.0.0',
        port     = 8080,
        reloader = True,        # restarts the server every time edit a module file
        debug    = True         # Comment out it before deploy
        )
</snippet></ROW><ROW><id>13761955</id><snippet>$ cd path/to/your/file
$ nohup python server.py &amp;
</snippet></ROW><ROW><id>13761955</id><snippet>/hello</snippet></ROW><ROW><id>13762023</id><snippet>chr = { v['chr'] for v in file_dict.itervalues() }
</snippet></ROW><ROW><id>13762023</id><snippet>chr = set(v['chr'] for v in file_dict.itervalues())
</snippet></ROW><ROW><id>13762023</id><snippet>.itervalues()</snippet></ROW><ROW><id>13762023</id><snippet>.values()</snippet></ROW><ROW><id>13762023</id><snippet>for key in file_dict:
    for other_key in file_dict:
        if key == other_key:
            continue

        if file_dict[key]['chr'] != file_dict[otherkey]['chr']:
            list_chr.append(filed_dict[key]['chr'])
</snippet></ROW><ROW><id>13762137</id><snippet>f.close()</snippet></ROW><ROW><id>13762137</id><snippet>f.flush()</snippet></ROW><ROW><id>13762137</id><snippet>os.fsync()</snippet></ROW><ROW><id>13762137</id><snippet>use_file</snippet></ROW><ROW><id>13762137</id><snippet>os.fsync()</snippet></ROW><ROW><id>13762137</id><snippet>f = open(...)
# write data to f
f.flush()
os.fsync(f.fileno())
f.close()

import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>13763200</id><snippet>_list = [[] for _ in xrange(7)]
</snippet></ROW><ROW><id>13763204</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>13763204</id><snippet>__dict__</snippet></ROW><ROW><id>13763204</id><snippet>__slots__</snippet></ROW><ROW><id>13763204</id><snippet>__slots__</snippet></ROW><ROW><id>13763422</id><snippet>python count.py hdfs://master-host/directory/*/*.txt &gt; result
</snippet></ROW><ROW><id>13763432</id><snippet>t = t + [x]
</snippet></ROW><ROW><id>13763432</id><snippet>t</snippet></ROW><ROW><id>13763432</id><snippet>[x]</snippet></ROW><ROW><id>13763432</id><snippet>t</snippet></ROW><ROW><id>13763432</id><snippet>__add__</snippet></ROW><ROW><id>13763432</id><snippet>t</snippet></ROW><ROW><id>13763432</id><snippet>t += [x]
</snippet></ROW><ROW><id>13763432</id><snippet>t</snippet></ROW><ROW><id>13763432</id><snippet>__iadd__</snippet></ROW><ROW><id>13763534</id><snippet>__new__()</snippet></ROW><ROW><id>13763534</id><snippet>class</snippet></ROW><ROW><id>13763534</id><snippet>class MyMetaClass(type):
    def __new__(cls, class_name, parents, attrs):
        if 'meta_args' in attrs:
            meta_args = attrs['meta_args']
            attrs['args'] = meta_args[0]
            attrs['to'] = meta_args[1]
            attrs['eggs'] = meta_args[2]
            del attrs['meta_args'] # clean up
        return type.__new__(cls, class_name, parents, attrs)

class MyClass(object):
    __metaclass__ = MyMetaClass
    meta_args = ['spam', 'and', 'eggs']

myobject = MyClass()

from pprint import pprint
pprint(dir(myobject))
print myobject.args, myobject.to, myobject.eggs
</snippet></ROW><ROW><id>13763534</id><snippet>['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__hash__',
 '__init__',
 '__metaclass__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'args',
 'eggs',
 'to']
spam and eggs
</snippet></ROW><ROW><id>13763790</id><snippet>def checkvars(*args):
    flags = [x.get() for x in (onevar, twovar, threevar)]

    # Generate a list containing the corresponding string representation of
    # each checked flag value.
    # For example: (True, False, True) gives ('one', 'three')
    num_strings = ('one', 'two', 'three')
    val_strings = [s for f, s in zip(flags, num_strings) if f]

    # Number of checked values correspond to the number of strings.
    checked_count = len(val_strings)
    if checked_count == 0:
        outvar.set('They are all false')
    elif checked_count == len(flags):
        outvar.set('All three are true')
    else:
        verb = 'is' if len(val_strings) == 1 else 'are'
        outvar.set('%s %s set to true' % (' and '.join(val_strings), verb))
</snippet></ROW><ROW><id>13763790</id><snippet>if</snippet></ROW><ROW><id>13763790</id><snippet>elif</snippet></ROW><ROW><id>13763798</id><snippet>useManKey == 'Y' or 'y'</snippet></ROW><ROW><id>13763798</id><snippet>useManKey in ('Y', 'y')</snippet></ROW><ROW><id>13763798</id><snippet>useManKey == 'Y'</snippet></ROW><ROW><id>13763798</id><snippet>'y'</snippet></ROW><ROW><id>13763798</id><snippet>if</snippet></ROW><ROW><id>13763798</id><snippet>True</snippet></ROW><ROW><id>13763798</id><snippet>upper()</snippet></ROW><ROW><id>13763798</id><snippet>lower()</snippet></ROW><ROW><id>13764019</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>13764019</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>13764019</id><snippet>./manage.py convert_to_south myapp</snippet></ROW><ROW><id>13764183</id><snippet>shst</snippet></ROW><ROW><id>13764183</id><snippet>self.</snippet></ROW><ROW><id>13764223</id><snippet>import sys
sys.path.append('path_to_package/')

from module import some_function
</snippet></ROW><ROW><id>13764242</id><snippet>df = a.append(b)
df.index = MultiIndex.from_arrays([a.index.tolist()*(len(b) + 1), 
                                   ["all"] + b.index.tolist()    ] )
df

                 25%    50%    75%    count      max    mean   min  std  
10m all          2.43   3.71   5.5    6.047e+05  25.92  4.189  0    2.432
    0.0_90.0     2.08   3.058  4.37   1.198e+05  14.37  3.342  0    1.715
    180.0_270.0  2.99   4.64   6.82   2.341e+05  25.92  5.113  0    2.819
    270.0_360.0  2.12   3.4    5.13   1.264e+05  19.55  3.794  0    2.191
    90.0_180.0   2.368  3.401  4.696  1.244e+05  14.93  3.67   0    1.833
</snippet></ROW><ROW><id>13764450</id><snippet>SITE_ID</snippet></ROW><ROW><id>13764450</id><snippet>RequestSite</snippet></ROW><ROW><id>13764450</id><snippet>from django.contrib.sites.models import RequestSite    
site_name = RequestSite(request).domain
</snippet></ROW><ROW><id>13764544</id><snippet>&gt;&gt;&gt;someDict = {'One': 1, 'Two': 2, 'Three': 3}
&gt;&gt;&gt;someList = list(someDict.keys())
&gt;&gt;&gt;print(someList)
['One', 'Two', 'Three']
</snippet></ROW><ROW><id>13764843</id><snippet>from sqlalchemy import Column, String, Integer, create_engine
from sqlalchemy.orm import Session
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Model(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    data = Column(String)

e = create_engine("sqlite:///somefile.db")

Base.metadata.create_all(e)

session = Session(e)

for index in xrange(10000000):
    session.add(Model(data="data %d" % index))

    if index % 1000 == 0:
        print "flushing... %d" % index
        session.flush()
        session.commit()
</snippet></ROW><ROW><id>13765499</id><snippet>import imdb
import re

ia = imdb.IMDb()
avatar = ia.get_movie("0120667")
ia.update(avatar, 'business')
opening_weekends = avatar['business']['opening weekend']

def parseDate(date):
    result = {}

    if re.match(".*\d{4}$", date):
        result['year'] = date[-4:]

    m = re.match(".*(?P&lt;month&gt;January|February|March|April|May|June|July|"
                "August|September|October|November|December).*", date, re.I)
    if m:
        result['month'] = m.group('month').lower()

        # try to grab date too then
        daymatch = re.match("^(?P&lt;day&gt;\d{1,2}).*", date)

        if daymatch:
            result['day'] = daymatch.group('day')       
    return result

def parseBudget(amount):
    """
    assumptions: 
    - currency is always before the number
    - no fractions
    """

    # find index first number
    for i in range(len(amount)):
        if amount[i] in "0123456789":
            amount_idx = i
            break

    currency = amount[:amount_idx].strip()
    amount = re.sub("\D", "", amount[amount_idx:])

    return amount, currency

def parseWeekendGross(gross_text):
    g = gross_text.split(' (')
    if not len(g) == 4:
        return ""
    amount, currency = parseBudget(g[0])
    country = g[1].lstrip('(').rstrip(')')
    date = parseDate(g[2].lstrip('(').rstrip(')'))
    day, month, year = date['day'], date['month'], date['year']
    screens = re.sub("\D", "", g[3])
    if not screens:
        screens = "''"

    return amount, currency, country, day, month, year, screens

for entry in opening_weekends:
    amount, currency, country, day, month, year, screens = parseWeekendGross(entry)
    if country == "USA":
        print("Country: %s" % country)
        print("Date: %s %s %s" % (day, month, year))
        print("Screens: %s" % screens)
        break
</snippet></ROW><ROW><id>13765499</id><snippet>Country: USA
Date: 10 july 2005
Screens: 3602
</snippet></ROW><ROW><id>13765619</id><snippet>import zipfile

archive = zipfile.ZipFile('archive.zip')

for file in archive.namelist():
    if file.startswith('foo/'):
        archive.extract(file, 'destination_path')
</snippet></ROW><ROW><id>13765857</id><snippet>Connection</snippet></ROW><ROW><id>13765857</id><snippet>Session</snippet></ROW><ROW><id>13765857</id><snippet>Connection</snippet></ROW><ROW><id>13765857</id><snippet>@event.listens_for(Comment, "after_insert")
def after_insert(mapper, connection, target):
    thread_table = Thread.__table__
    thread = target.thread
    connection.execute(
            thread_table.update().
             where(thread_table.c.id==thread.id).
             values(word_count=sum(c.word_count for c in thread.comments))
    )
    print "updated cached word count to", thread.word_count
</snippet></ROW><ROW><id>13765857</id><snippet>def _word_count(msg):
    return len(msg.split())

@event.listens_for(Comment.message, "set")
def set(target, value, oldvalue, initiator):
    if target.thread is not None:
        target.thread.word_count += (_word_count(value) - _word_count(oldvalue))

@event.listens_for(Comment.thread, "set")
def set(target, value, oldvalue, initiator):
    # the new Thread, if any
    if value is not None:
        value.word_count += _word_count(target.message)

    # the old Thread, if any
    if oldvalue is not None:
        oldvalue.word_count -= _word_count(target.message)
</snippet></ROW><ROW><id>13765857</id><snippet>@event.listens_for(Session, "before_flush")
def before_flush(session, flush_context, instances):
    for obj in session.new + session.dirty:
        if isinstance(obj, Thread):
            obj.word_count = sum(c.word_count for c in obj.comments)
        elif isinstance(obj, Comment):
            obj.thread.word_count = sum(c.word_count for c in obj.comments)
</snippet></ROW><ROW><id>13765883</id><snippet>/descendant::div[@class="artikeldiskussion-titel"]/child::text()[position()=last()]</snippet></ROW><ROW><id>13765883</id><snippet>/descendant::span[@class="anz-postings-user"]/following-sibling::text()[1]</snippet></ROW><ROW><id>13766010</id><snippet>table</snippet></ROW><ROW><id>13766010</id><snippet>def table():
    with open('C:\\Python27\\test.csv', 'rb') as f:
        lines = []
        reader = csv.reader(f)
        if reader:
            for row in reader:
                lines.append(row)
            return lines
        else:
            return []
</snippet></ROW><ROW><id>13766104</id><snippet>%</snippet></ROW><ROW><id>13766104</id><snippet>5</snippet></ROW><ROW><id>13766104</id><snippet>all()</snippet></ROW><ROW><id>13766104</id><snippet>all(x%5 == 0 for x in l)
</snippet></ROW><ROW><id>13766130</id><snippet>Entry</snippet></ROW><ROW><id>13766130</id><snippet>float</snippet></ROW><ROW><id>13766130</id><snippet>float(speed.get())

#...

float(angle.get())
</snippet></ROW><ROW><id>13766609</id><snippet>namedtuple()</snippet></ROW><ROW><id>13766609</id><snippet>self</snippet></ROW><ROW><id>13766609</id><snippet>self</snippet></ROW><ROW><id>13766609</id><snippet>from equations import *
from collections import namedtuple


Struct = namedtuple("struct", "name f1 f2")


class Test:
    def __init__(self, nr):
        self.obj = self.create(nr)
        print self.obj.name
        print self.obj.f1(2)

    def create(self, nr):
        obj = Struct(str(nr), *get_func(nr))
        return obj

test = Test(1)
</snippet></ROW><ROW><id>13766717</id><snippet>random.getstate()</snippet></ROW><ROW><id>13766717</id><snippet>random.setstate()</snippet></ROW><ROW><id>13766717</id><snippet>random</snippet></ROW><ROW><id>13766717</id><snippet>random.Random()</snippet></ROW><ROW><id>13766717</id><snippet>from itertools import islice
import collections
from random import Random

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)

class RewindRandom:
    def __init__(self):
        self._random = Random()
        self._state = self._random.getstate()
        self._count = 0

    def __iter__(self):
        while True:
            yield self._random.random()

    def __call__(self):
        self._count += 1
        return next(iter(self))

    def rollback(self, amount):
        self._random.setstate(self._state)
        consume(self, self._count-amount)
        self._count -= amount
</snippet></ROW><ROW><id>13766717</id><snippet>random = RewindRandom()

&gt;&gt;&gt; random()
0.31276818768213244
&gt;&gt;&gt; random()
0.7031210824422215
&gt;&gt;&gt; random()
0.7196351574136909
&gt;&gt;&gt; random.rollback(2)
&gt;&gt;&gt; random()
0.7031210824422215
&gt;&gt;&gt; random()
0.7196351574136909
&gt;&gt;&gt; random()
0.6582894948982371
</snippet></ROW><ROW><id>13766895</id><snippet>for p in practices:
    config = p.config

    config['alert']['emails'] = [
        '.{0}.fake'.format(x)
        for x in config['alert']['emails']
    ]

    p.config = config

    p.save()
</snippet></ROW><ROW><id>13767044</id><snippet>l = ['joe'] # this is a list
s = {'joe'} # this is a set
</snippet></ROW><ROW><id>13767044</id><snippet>raw_input</snippet></ROW><ROW><id>13767044</id><snippet>input</snippet></ROW><ROW><id>13767044</id><snippet>eval</snippet></ROW><ROW><id>13767044</id><snippet>input</snippet></ROW><ROW><id>13767044</id><snippet>raw_input</snippet></ROW><ROW><id>13767044</id><snippet>eval</snippet></ROW><ROW><id>13767044</id><snippet>raw_input</snippet></ROW><ROW><id>13767044</id><snippet>int(raw_input())</snippet></ROW><ROW><id>13767044</id><snippet>has_key</snippet></ROW><ROW><id>13767044</id><snippet>set</snippet></ROW><ROW><id>13767044</id><snippet>list</snippet></ROW><ROW><id>13767044</id><snippet>has_key</snippet></ROW><ROW><id>13767044</id><snippet>dict</snippet></ROW><ROW><id>13767044</id><snippet>something in A</snippet></ROW><ROW><id>13767044</id><snippet>set</snippet></ROW><ROW><id>13767044</id><snippet>list</snippet></ROW><ROW><id>13767044</id><snippet>append</snippet></ROW><ROW><id>13767044</id><snippet>add</snippet></ROW><ROW><id>13767261</id><snippet>    ListValue = []
    for x in range(5):  
        ListValue.append(Test(host))
    return ListValue
</snippet></ROW><ROW><id>13767261</id><snippet>return [Test(host) for x in range(5)]
</snippet></ROW><ROW><id>13767387</id><snippet>class Person(models.Model):
  name = models.CharField(max_length=30)

  class Meta:
    db_table = 'core_Person'
</snippet></ROW><ROW><id>13767562</id><snippet>from twisted.internet import reactor</snippet></ROW><ROW><id>13767562</id><snippet>reactor</snippet></ROW><ROW><id>13767849</id><snippet>#!/usr/bin/python

import urllib2, json

city = "etre4t5r5e4re"
root = "http://openweathermap.org/data/2.1/forecast/city?q=%s"
url  = root % city

response = urllib2.urlopen(url)
j = json.load(response)

# Solution 1
if j.get('url', '').split('/')[-1] == '7284885':
    print " ! This city seems to be THE Unknown city"

# Solution 2
if 'No station' in urllib2.urlopen(j.get('url')).read():
    print " ! Again.. This city seems to be THE Unknown city"
</snippet></ROW><ROW><id>13768006</id><snippet>my_list = []
while len(data) &lt; 3:
    data = input(text) # Valid for Python 3, use raw_input(text) in Python 2
    if data in ("one", "two", "three") and data not in my_list:
        my_list.append(data)
</snippet></ROW><ROW><id>13768006</id><snippet>for x in range(y)</snippet></ROW><ROW><id>13768006</id><snippet>my_list = ["", "", ""]</snippet></ROW><ROW><id>13768006</id><snippet>append</snippet></ROW><ROW><id>13768006</id><snippet>sys.exit</snippet></ROW><ROW><id>13768006</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>13768084</id><snippet>__getnewargs__</snippet></ROW><ROW><id>13768084</id><snippet>__new__</snippet></ROW><ROW><id>13768084</id><snippet>import uuid
import weakref


class Foo(object):
    ident_cache = weakref.WeakValueDictionary()

    def __new__(cls, identity=None, **kwargs):
        if identity is None:
            identity = uuid.uuid1()
        try:
            self = cls.ident_cache[identity]
        except KeyError:
            self = super(Foo, cls).__new__(cls)
            self.__identity = identity
            self.__init__(**kwargs)
            cls.ident_cache[identity] = self
        return self

    def __getnewargs__(self):
        return (self.__identity,)

    def __init__(self, foo):
        self.foo = foo
</snippet></ROW><ROW><id>13768084</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; a = Foo(foo=1)
&gt;&gt;&gt; b = pickle.loads(pickle.dumps(a, pickle.HIGHEST_PROTOCOL))
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>13768084</id><snippet>__new__</snippet></ROW><ROW><id>13768084</id><snippet>pickle.dumps</snippet></ROW><ROW><id>13768084</id><snippet>loads</snippet></ROW><ROW><id>13768161</id><snippet>join</snippet></ROW><ROW><id>13768161</id><snippet>from pandas import DataFrame
df1 = DataFrame([[1]], columns=['a'])
df2 = DataFrame([[3],[4]], columns=['b'])

In [4]: df1
Out[4]: 
   a
0  1

In [5]: df2
Out[5]: 
   b
0  3
1  4

In [6]: df1.join(df2)
Out[6]: 
   a  b
0  1  3

In [7]: df1.join(df2, how='outer')
Out[7]: 
    a  b
0   1  3
1 NaN  4
</snippet></ROW><ROW><id>13768252</id><snippet>int()</snippet></ROW><ROW><id>13768252</id><snippet>int(getLevel)</snippet></ROW><ROW><id>13768252</id><snippet>int.getLevel</snippet></ROW><ROW><id>13768252</id><snippet>getLevel</snippet></ROW><ROW><id>13768252</id><snippet>level</snippet></ROW><ROW><id>13768252</id><snippet>input()</snippet></ROW><ROW><id>13768252</id><snippet>raw_input()</snippet></ROW><ROW><id>13768252</id><snippet>getLevel</snippet></ROW><ROW><id>13768252</id><snippet>raw_input()</snippet></ROW><ROW><id>13768312</id><snippet>obj = l
for index in indices[:-1]:
    obj = obj[index]
del obj[indices[-1]]
</snippet></ROW><ROW><id>13768418</id><snippet>dirname</snippet></ROW><ROW><id>13768418</id><snippet>os.walk()</snippet></ROW><ROW><id>13768477</id><snippet>print()</snippet></ROW><ROW><id>13768477</id><snippet>.strip()</snippet></ROW><ROW><id>13768477</id><snippet>line[:-1]</snippet></ROW><ROW><id>13768477</id><snippet>line.rstrip('\n')</snippet></ROW><ROW><id>13768477</id><snippet>print()</snippet></ROW><ROW><id>13768477</id><snippet>print(line, end='')
</snippet></ROW><ROW><id>13768508</id><snippet>import umpy as np
import matplotlib.pyplot as plt 
mean, cov, n_samples = np.array([0.,0.]), np.array([[1.0,0.5],[0.5,1.0]]), 100
data=np.random.multivariate_normal(mean,cov,size=n_samples)
pdf = np.zeros(data.shape[0])
cons = 1./((2*np.pi)**(data.shape[1]/2.)*np.linalg.det(cov)**(-0.5))
X, Y = np.meshgrid(data.T[0], data.T[1])
def pdf(point):
  return cons*np.exp(-np.dot(np.dot((point-mean),np.linalg.inv(cov)),(point-mean).T)/2.)
zs = np.array([pdf(np.array(ponit)) for ponit in zip(np.ravel(X), np.ravel(Y))])
Z = zs.reshape(X.shape)
fig = plt.figure()
ax3D = fig.add_subplot(111, projection='3d')
surf = ax3D.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,linewidth=0, antialiased=Fals)
surf.show()
</snippet></ROW><ROW><id>13769199</id><snippet>.+</snippet></ROW><ROW><id>13769199</id><snippet>.+?</snippet></ROW><ROW><id>13769199</id><snippet>ElementTree</snippet></ROW><ROW><id>13769199</id><snippet>&gt;&gt;&gt; text='&lt;tr align="right"&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;John&lt;/td&gt; 
SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; text='&lt;tr align="right"&gt;&lt;td&gt;12&lt;/td&gt;&lt;td&gt;John&lt;/td&gt;'
&gt;&gt;&gt; re.findall(r'align.{13}(\d+).*([A-Z]\w+).*([A-Z]\w+)', text)
[]
&gt;&gt;&gt; re.findall(r'align.{13}(\d+).*([A-Z]\w+)', text)
[('12', 'John')]
&gt;&gt;&gt; re.findall(r'align.+(\d+).*([A-Z]\w+).*([A-Z]\w+)', text)
[]
&gt;&gt;&gt; re.findall(r'align.+(\d+).*([A-Z]\w+)', text)
[('2', 'John')]
</snippet></ROW><ROW><id>13769199</id><snippet>.+</snippet></ROW><ROW><id>13769199</id><snippet>1</snippet></ROW><ROW><id>13769199</id><snippet>+?</snippet></ROW><ROW><id>13769199</id><snippet>+</snippet></ROW><ROW><id>13769199</id><snippet>&gt;&gt;&gt; re.findall(r'align.+?(\d+).*([A-Z]\w+)', text)
[('12', 'John')]
</snippet></ROW><ROW><id>13769264</id><snippet>all</snippet></ROW><ROW><id>13769264</id><snippet>&gt;&gt;&gt; result = numpy.array([[1, 1], [2, 1], [2, 2], [1, 0]]) == [2, 1]
&gt;&gt;&gt; result.all(axis=1)
array([False,  True, False, False], dtype=bool)
</snippet></ROW><ROW><id>13769264</id><snippet>&gt;&gt;&gt; result.all(axis=1).nonzero()
(array([1]),)
</snippet></ROW><ROW><id>13769264</id><snippet>nonzero</snippet></ROW><ROW><id>13769264</id><snippet>where</snippet></ROW><ROW><id>13769264</id><snippet>where</snippet></ROW><ROW><id>13769264</id><snippet>where</snippet></ROW><ROW><id>13769264</id><snippet>nonzero</snippet></ROW><ROW><id>13769264</id><snippet>nonzero</snippet></ROW><ROW><id>13769444</id><snippet>{{ post.featured_image }}
</snippet></ROW><ROW><id>13769517</id><snippet>form = TestForm(instance = test_instance)
</snippet></ROW><ROW><id>13769517</id><snippet>form = TestForm(initial = {'field_name':field_value,...})
</snippet></ROW><ROW><id>13769663</id><snippet>class CellRendererAutoComplete(Gtk.CellRendererText):

    """ Text entry cell which accepts a Gtk.EntryCompletion object """

    __gtype_name__ = 'CellRendererAutoComplete'

    def __init__(self, completion):
        self.completion = completion
        Gtk.CellRendererText.__init__(self)

    def do_start_editing(
               self, event, treeview, path, background_area, cell_area, flags):
        if not self.get_property('editable'):
            return
        entry = Gtk.Entry()
        entry.set_completion(self.completion)
        entry.connect('editing-done', self.editing_done, path)
        entry.show()
        entry.grab_focus()
        return entry

    def editing_done(self, entry, path):
        self.emit('edited', path, entry.get_text())
</snippet></ROW><ROW><id>13769663</id><snippet>pygobject</snippet></ROW><ROW><id>13769901</id><snippet>pip</snippet></ROW><ROW><id>13769901</id><snippet>pip-3.3 install git+https://github.com/kennethreitz/requests
</snippet></ROW><ROW><id>13770230</id><snippet>QtGui.QApplication</snippet></ROW><ROW><id>13770305</id><snippet>answers.py</snippet></ROW><ROW><id>13770305</id><snippet>answers = {}
for i in range(1, 4):
    answers[i] = raw_input('Question %s:' % i)
print 'resuls:'
print answers
</snippet></ROW><ROW><id>13770305</id><snippet>import pexpect
child=pexpect.spawn('./questions.py', timeout=140)
for i in range(1, 4):
    index = child.expect('Question %s:' % i)
    child.sendline('answer%s' % i)

child.expect('resuls:')
print child.read()
</snippet></ROW><ROW><id>13770305</id><snippet>{1: 'answer1', 2: 'answer2', 3: 'answer3'}
</snippet></ROW><ROW><id>13770430</id><snippet>os.walk()</snippet></ROW><ROW><id>13770430</id><snippet>False</snippet></ROW><ROW><id>13770430</id><snippet>True</snippet></ROW><ROW><id>13770430</id><snippet>os.rmdir()</snippet></ROW><ROW><id>13770430</id><snippet>getOldDirs()</snippet></ROW><ROW><id>13770430</id><snippet>import os
import time

    def getOldDirs(self, dirPath, olderThanDays):
        """
        return a list of all subfolders under dirPath older than olderThanDays
        """
        olderThanDays *= 86400 # convert days to seconds
        present = time.time()
        directories = []
        for root, dirs, files in os.walk(dirPath, topdown=False):
            for name in dirs:
                subDirPath = os.path.join(root, name)
                if (present - os.path.getmtime(subDirPath)) &gt; olderThanDays:
                    directories.append(subDirPath)
        return directories
</snippet></ROW><ROW><id>13770592</id><snippet>.format()</snippet></ROW><ROW><id>13770592</id><snippet>sql += " WHERE provider IN ({}) GROUP BY date ORDER BY date ASC".format(', '.join(['%s'] * len(providers)))

cursor.execute(sql, providers)
</snippet></ROW><ROW><id>13770592</id><snippet>providers</snippet></ROW><ROW><id>13770592</id><snippet>in</snippet></ROW><ROW><id>13770592</id><snippet>WHERE provider in (%s, %s) ...</snippet></ROW><ROW><id>13770651</id><snippet>empty = [[0]*length]*len(usens)</snippet></ROW><ROW><id>13770651</id><snippet>len(usens)</snippet></ROW><ROW><id>13770651</id><snippet>len(usens)</snippet></ROW><ROW><id>13770651</id><snippet>empty = [[0]*length for i in range(len(usens))]</snippet></ROW><ROW><id>13770891</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>13770891</id><snippet>filename = raw_input("Please enter the name of the file: ")
execfile(filename)
</snippet></ROW><ROW><id>13770891</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>13770891</id><snippet>filename = raw_input("Please enter the name of the file: ").split(".")[0]
module = __import__(filename)
</snippet></ROW><ROW><id>13771119</id><snippet>root
  appname
    static
      css
      js
</snippet></ROW><ROW><id>13771119</id><snippet>root
  appname
    static
      admin
        img
          icon_success.gif
      css
      js
</snippet></ROW><ROW><id>13771136</id><snippet>foo = convert(foo)
</snippet></ROW><ROW><id>13771136</id><snippet>bool</snippet></ROW><ROW><id>13771136</id><snippet>foo.convert()
</snippet></ROW><ROW><id>13771136</id><snippet>convert(foo) # actually, just convert()
</snippet></ROW><ROW><id>13771136</id><snippet>global</snippet></ROW><ROW><id>13771136</id><snippet>convert</snippet></ROW><ROW><id>13771136</id><snippet>In [1]: foo = True

In [2]: def convert():
   ...:    global foo
   ...:    foo = 'on' if foo else 'off'
   ...:     

In [3]: convert()

In [4]: foo
Out[4]: 'on'
</snippet></ROW><ROW><id>13771221</id><snippet>urllib2.Request</snippet></ROW><ROW><id>13771221</id><snippet>jason.load</snippet></ROW><ROW><id>13771221</id><snippet>sttweets = urlfetch.fetch(tickerstringst, validate_certificate=False)
stcode = sttweets.status_code

if stcode == 200:
    stresults = json.loads(sttweets.content, 'utf-8')
</snippet></ROW><ROW><id>13771221</id><snippet>urlfetch.fetch</snippet></ROW><ROW><id>13771221</id><snippet>validate_certificate</snippet></ROW><ROW><id>13771221</id><snippet>True</snippet></ROW><ROW><id>13771227</id><snippet>from views import *</snippet></ROW><ROW><id>13771227</id><snippet>import views</snippet></ROW><ROW><id>13771227</id><snippet>sys.path.append</snippet></ROW><ROW><id>13771227</id><snippet>__init__.py</snippet></ROW><ROW><id>13771227</id><snippet>from server.views import *</snippet></ROW><ROW><id>13771252</id><snippet>collectstatic</snippet></ROW><ROW><id>13771411</id><snippet>value_rank = [(ordered_v.index(v)+1)+(ordered_v.count(v)-1)/2 for v in ordered_v]
</snippet></ROW><ROW><id>13771411</id><snippet>import collections

d = {'a':5,'b':5,'c':5,'d':1,'e':6}
my_d = collections.defaultdict(list)
for key, val in d.items():
    my_d[val].append(key)

ranked_key_list = [] 
n = v = 1
for _, my_list in sorted(my_d.items()):
    v = n + (len(my_list)-1)/2 
    for e in my_list:
        n += 1
        ranked_key_list.append((e, v))
</snippet></ROW><ROW><id>13771444</id><snippet>output.txt</snippet></ROW><ROW><id>13771444</id><snippet>output</snippet></ROW><ROW><id>13771444</id><snippet>open()</snippet></ROW><ROW><id>13771444</id><snippet>open()</snippet></ROW><ROW><id>13771444</id><snippet>open</snippet></ROW><ROW><id>13771444</id><snippet>txt</snippet></ROW><ROW><id>13771444</id><snippet>output = open('output.txt', 'w')
</snippet></ROW><ROW><id>13771706</id><snippet>def pop(self, index=None):
    if index is not None:
        #Do whatever your default behaviour should be
</snippet></ROW><ROW><id>13771706</id><snippet>None</snippet></ROW><ROW><id>13771706</id><snippet>0</snippet></ROW><ROW><id>13771706</id><snippet>def pop(self, index=0):
</snippet></ROW><ROW><id>13771843</id><snippet>/</snippet></ROW><ROW><id>13771843</id><snippet>.</snippet></ROW><ROW><id>13771843</id><snippet>table.xpath('tr')
# or
table.xpath('./tr')
</snippet></ROW><ROW><id>13772007</id><snippet>[True] * 5000
</snippet></ROW><ROW><id>13772007</id><snippet>&gt;&gt;&gt; [True] * 3
[True, True, True]
&gt;&gt;&gt; "abc" * 3
'abcabcabc'
</snippet></ROW><ROW><id>13772034</id><snippet>processor()</snippet></ROW><ROW><id>13772034</id><snippet>def processor():
    while not queue.empty():
        try:
            job = queue.get()
            ...
</snippet></ROW><ROW><id>13772034</id><snippet>multiprocessing</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>rlist, wlist, xlist = select.select( [listening_socket] + open_sockets, [], [] )
</snippet></ROW><ROW><id>13772218</id><snippet>    for i in rlist:
        if i is listening_socket:
</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>open_sockets</snippet></ROW><ROW><id>13772218</id><snippet>            new_socket, addr = listening_socket.accept()
            open_sockets.append(new_socket)
</snippet></ROW><ROW><id>13772218</id><snippet>listening_socket</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>recv</snippet></ROW><ROW><id>13772218</id><snippet>        else:
            data = i.recv(1024)
</snippet></ROW><ROW><id>13772218</id><snippet>open_sockets</snippet></ROW><ROW><id>13772218</id><snippet>            if data == "":
                i.close()
                open_sockets.remove(i)
                print "Connection closed"
</snippet></ROW><ROW><id>13772218</id><snippet>            else:
                i.send(data)
                print repr(data)
</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>print "About to call select"
rlist, wlist, xlist = select.select( [listening_socket] + open_sockets, [], [] )
print "Returned from select"
</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>listening_socket</snippet></ROW><ROW><id>13772218</id><snippet>open_sockets</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>open_sockets</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>listening_socket</snippet></ROW><ROW><id>13772218</id><snippet>open_sockets</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>i.recv</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>i.recv</snippet></ROW><ROW><id>13772218</id><snippet>select</snippet></ROW><ROW><id>13772218</id><snippet>rlist</snippet></ROW><ROW><id>13772218</id><snippet>i.recv</snippet></ROW><ROW><id>13772292</id><snippet>def fmt(msg, obj):
    return msg.format(**obj.__dict__)
</snippet></ROW><ROW><id>13772292</id><snippet>def fullname(self):
    return fmt("{mod}.{name}", self)
</snippet></ROW><ROW><id>13772584</id><snippet>render_template</snippet></ROW><ROW><id>13772664</id><snippet>master.bind(...)</snippet></ROW><ROW><id>13772664</id><snippet>__init__</snippet></ROW><ROW><id>13772664</id><snippet>def __init__(self, master):

    frame = Frame(master)
    frame.pack()
    master.bind('1', self.gpio25)
    master.bind('2', self.gpio24)
    master.bind('3', self.gpio23)
    ...
</snippet></ROW><ROW><id>13772664</id><snippet>master.bind('1', self.gpio25)</snippet></ROW><ROW><id>13772664</id><snippet>1</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25(event)</snippet></ROW><ROW><id>13772664</id><snippet>master.bind</snippet></ROW><ROW><id>13772664</id><snippet>event</snippet></ROW><ROW><id>13772664</id><snippet>def gpio25(self):
</snippet></ROW><ROW><id>13772664</id><snippet>def gpio25(self, event = None):
</snippet></ROW><ROW><id>13772664</id><snippet>bind</snippet></ROW><ROW><id>13772664</id><snippet>Event</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25</snippet></ROW><ROW><id>13772664</id><snippet>Buttons</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25</snippet></ROW><ROW><id>13772664</id><snippet>gpio25</snippet></ROW><ROW><id>13772664</id><snippet>def gpio25(self, event = None):
</snippet></ROW><ROW><id>13772664</id><snippet>self</snippet></ROW><ROW><id>13772664</id><snippet>App</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25</snippet></ROW><ROW><id>13772664</id><snippet>self</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25()</snippet></ROW><ROW><id>13772664</id><snippet>gpio25</snippet></ROW><ROW><id>13772664</id><snippet>self</snippet></ROW><ROW><id>13772664</id><snippet>event</snippet></ROW><ROW><id>13772664</id><snippet>None</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25(foo)</snippet></ROW><ROW><id>13772664</id><snippet>gpio25</snippet></ROW><ROW><id>13772664</id><snippet>self</snippet></ROW><ROW><id>13772664</id><snippet>foo</snippet></ROW><ROW><id>13772664</id><snippet>event</snippet></ROW><ROW><id>13772664</id><snippet>foo</snippet></ROW><ROW><id>13772664</id><snippet>event</snippet></ROW><ROW><id>13772664</id><snippet>event</snippet></ROW><ROW><id>13772664</id><snippet>gpio25</snippet></ROW><ROW><id>13772664</id><snippet>self.gpio25</snippet></ROW><ROW><id>13772721</id><snippet>k[pos_qu+1:]==selection[pos_qu+1:]</snippet></ROW><ROW><id>13772721</id><snippet>pos_qu!=1</snippet></ROW><ROW><id>13772721</id><snippet>pos_qu==1 or k[pos_qu+1:]==selection[pos_qu+1:]
</snippet></ROW><ROW><id>13772721</id><snippet>bigrams=[(k,v) for (k,v) in dict_bigrams.items()
         if k[:pos_qu]==selection[:pos_qu]
         and (pos_qu==1 or k[pos_qu+1:]==selection[pos_qu+1:])
         and k[pos_qu] not in alphabet.values()]
</snippet></ROW><ROW><id>13772838</id><snippet>import numpy
P=numpy.einsum('az,bz,cz,dz-&gt;abcd',A,B,C,D)
</snippet></ROW><ROW><id>13772838</id><snippet>def parafac(factors):
    ndims = len(factors)
    request=''
    for temp_dim in range(ndims):
        request+=string.lowercase[temp_dim]+'z,'
    request=request[:-1]+'-&gt;'+string.lowercase[:ndims]
    return einsum(request,*factors)
</snippet></ROW><ROW><id>13772844</id><snippet>*cmd* 'PASS asdasd\n'
*put* b'PASS asdasd\n'
</snippet></ROW><ROW><id>13772887</id><snippet>pre_delete</snippet></ROW><ROW><id>13773100</id><snippet>OptionStatus</snippet></ROW><ROW><id>13773100</id><snippet>save()</snippet></ROW><ROW><id>13773115</id><snippet>127.0.0.1</snippet></ROW><ROW><id>13773115</id><snippet>SO_REUSEADDR</snippet></ROW><ROW><id>13773115</id><snippet>Socket created
127.0.0.1
8934
You are connected to 127.0.0.1 with IP adress of 127.0.0.1
</snippet></ROW><ROW><id>13773115</id><snippet>send</snippet></ROW><ROW><id>13773115</id><snippet>recv</snippet></ROW><ROW><id>13773176</id><snippet>mylist[:5]</snippet></ROW><ROW><id>13773176</id><snippet>mylist</snippet></ROW><ROW><id>13773176</id><snippet>mylist</snippet></ROW><ROW><id>13773176</id><snippet>mylist[:5]</snippet></ROW><ROW><id>13773176</id><snippet>len(mylist)</snippet></ROW><ROW><id>13773236</id><snippet>do_all</snippet></ROW><ROW><id>13773236</id><snippet>def do_all(iterable, func):
    for i in iter(iterable):
       func(i)
</snippet></ROW><ROW><id>13773236</id><snippet>for</snippet></ROW><ROW><id>13773236</id><snippet>map</snippet></ROW><ROW><id>13773236</id><snippet>numpy</snippet></ROW><ROW><id>13773236</id><snippet>itertools.imap</snippet></ROW><ROW><id>13773236</id><snippet>map</snippet></ROW><ROW><id>13773236</id><snippet>dispose</snippet></ROW><ROW><id>13773236</id><snippet>def dispose(iterator):
    for i in iterator:
        pass
</snippet></ROW><ROW><id>13773236</id><snippet>dispose(itertools.imap(Sprite.draw, sprite_list))
</snippet></ROW><ROW><id>13773236</id><snippet>do_all</snippet></ROW><ROW><id>13773236</id><snippet>def do_all(iterable, func):
    dispose(itertools.imap(func, iterable))
</snippet></ROW><ROW><id>13773236</id><snippet>dispose</snippet></ROW><ROW><id>13773236</id><snippet>dispose</snippet></ROW><ROW><id>13773236</id><snippet>do_all</snippet></ROW><ROW><id>13773236</id><snippet>pip install more-itertools</snippet></ROW><ROW><id>13773236</id><snippet>more_itertools.consume</snippet></ROW><ROW><id>13773236</id><snippet>collections.deque(iterator, maxlen=0)</snippet></ROW><ROW><id>13773236</id><snippet>more-itertools</snippet></ROW><ROW><id>13773241</id><snippet>together</snippet></ROW><ROW><id>13773241</id><snippet>return super(Sub1, self).together() + self.v3
</snippet></ROW><ROW><id>13773246</id><snippet>image = '1.png'
watermark = '2.png'

wmark = Image.open(watermark)
img = Image.open(image)

ia, wa = None, None
if len(img.getbands()) == 4:
    ir, ig, ib, ia = img.split()
    img = Image.merge('RGB', (ir, ig, ib))
if len(wmark.getbands()) == 4:
    wa = wmark.split()[-1]

img.paste(wmark, (0, 0), wmark)
if ia:
    if wa:
        # XXX This seems to solve the contradiction, discard if unwanted.
        ia = max_alpha(wa, ia)
    img.putalpha(ia)

img.save('result.png')
</snippet></ROW><ROW><id>13773246</id><snippet>max_alpha</snippet></ROW><ROW><id>13773246</id><snippet>def max_alpha(a, b):
    # Assumption: 'a' and 'b' are of same size
    im_a = a.load()
    im_b = b.load()
    width, height = a.size

    alpha = Image.new('L', (width, height))
    im = alpha.load()
    for x in xrange(width):
        for y in xrange(height):
            im[x, y] = max(im_a[x, y], im_b[x, y])
    return alpha
</snippet></ROW><ROW><id>13773304</id><snippet>style.css</snippet></ROW><ROW><id>13773304</id><snippet>flask_project/stylesheets/</snippet></ROW><ROW><id>13773304</id><snippet>project_root/static/</snippet></ROW><ROW><id>13773304</id><snippet>stylesheets/style.css</snippet></ROW><ROW><id>13773304</id><snippet>project_root/static/stylesheets/style.css</snippet></ROW><ROW><id>13773304</id><snippet>&lt;link ... href="/stylesheets/style.css" /&gt;
</snippet></ROW><ROW><id>13773304</id><snippet>&lt;link ... href="{{ url_for('static', filename='stylesheets/style.css') }}" /&gt;
</snippet></ROW><ROW><id>13773304</id><snippet>static/</snippet></ROW><ROW><id>13773304</id><snippet>/static/stylesheets/style.css</snippet></ROW><ROW><id>13773304</id><snippet>url_for</snippet></ROW><ROW><id>13773602</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [4, 5, 6]
&gt;&gt;&gt; c = [7, 8, 9]
&gt;&gt;&gt; zipped = zip(a, b, c)
&gt;&gt;&gt; zipped
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>13773602</id><snippet>*</snippet></ROW><ROW><id>13773602</id><snippet>&gt;&gt;&gt; myListOfLists = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; zipped = zip(*myListOfLists)
&gt;&gt;&gt; zipped
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>13773606</id><snippet>$ mkvirtualenv -p /usr/bin/pypy biopy
$ workon biopy
$ cd biopython  # or wherever your biopython directory is
$ python setup.py install
$ python -c 'import Bio'
</snippet></ROW><ROW><id>13773629</id><snippet>opencv</snippet></ROW><ROW><id>13773629</id><snippet>cvCaptureFromCAM</snippet></ROW><ROW><id>13773730</id><snippet>if random.random() &gt; 0.5: 
    # your app does this 
    pass
else: 
    # your app does that
    pass
</snippet></ROW><ROW><id>13773842</id><snippet>dtype="S3"</snippet></ROW><ROW><id>13773842</id><snippet>dtype="S3"</snippet></ROW><ROW><id>13773842</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>13773842</id><snippet>array1 = numpy.genfromtxt('path_to_my_file.txt', usecols=0)
array2 = numpy.genfromtxt('path_to_my_file.txt', usecols=1)
</snippet></ROW><ROW><id>13773864</id><snippet>urlparse.parse_qsl</snippet></ROW><ROW><id>13773864</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>13773864</id><snippet>?</snippet></ROW><ROW><id>13773864</id><snippet>urlparse.urlparse</snippet></ROW><ROW><id>13773864</id><snippet>urlparse_qsl</snippet></ROW><ROW><id>13773864</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; myurl = urlparse.urlparse('https://localhost/?code=bork&amp;charlie=brown')
&gt;&gt;&gt; print myurl
ParseResult(scheme='https', netloc='localhost', path='/', params='', query='code=bork&amp;charlie=brown', fragment='')
&gt;&gt;&gt; print myurl.scheme
https
&gt;&gt;&gt; print urlparse.parse_qs(myurl.query)
{'charlie': ['brown'], 'code': ['bork']}
</snippet></ROW><ROW><id>13773873</id><snippet>float128</snippet></ROW><ROW><id>13773873</id><snippet>import numpy as np
strarray = ["535.","535.","534.68"]
floatarray = np.array(filter(None,strarray),dtype='|S10').astype(np.float128)
print floatarray
</snippet></ROW><ROW><id>13773873</id><snippet>[ 535.0  535.0  534.68]
</snippet></ROW><ROW><id>13773873</id><snippet>longdouble</snippet></ROW><ROW><id>13773873</id><snippet>import numpy as np
strarray = ["535.","535.","534.68"]
floatarray = np.array(filter(None,strarray),dtype='|S10').astype(np.longdouble)
print floatarray
</snippet></ROW><ROW><id>13773873</id><snippet>[ 535.0  535.0  534.68]
</snippet></ROW><ROW><id>13773913</id><snippet>__future__</snippet></ROW><ROW><id>13773913</id><snippet>import</snippet></ROW><ROW><id>13773913</id><snippet>imp</snippet></ROW><ROW><id>13773913</id><snippet>from __future__ import division</snippet></ROW><ROW><id>13773913</id><snippet>division</snippet></ROW><ROW><id>13773913</id><snippet>__future__</snippet></ROW><ROW><id>13773913</id><snippet>python -Qnew main.py
</snippet></ROW><ROW><id>13773913</id><snippet>from __future__ import division</snippet></ROW><ROW><id>13773913</id><snippet>#!</snippet></ROW><ROW><id>13773913</id><snippet>alias pyfuturediv='python -Qnew'</snippet></ROW><ROW><id>13773913</id><snippet>alias python='python -Qnew'</snippet></ROW><ROW><id>13773913</id><snippet>__future__</snippet></ROW><ROW><id>13773913</id><snippet>//</snippet></ROW><ROW><id>13773913</id><snippet>//</snippet></ROW><ROW><id>13773913</id><snippet>print</snippet></ROW><ROW><id>13773913</id><snippet>print_</snippet></ROW><ROW><id>13773913</id><snippet>u()</snippet></ROW><ROW><id>13773913</id><snippet>__future__</snippet></ROW><ROW><id>13773913</id><snippet>StringIO</snippet></ROW><ROW><id>13773913</id><snippet>BytesIO</snippet></ROW><ROW><id>13773913</id><snippet>exec</snippet></ROW><ROW><id>13773913</id><snippet>next</snippet></ROW><ROW><id>13773913</id><snippet>sed</snippet></ROW><ROW><id>13773913</id><snippet>3to2</snippet></ROW><ROW><id>13774056</id><snippet>validate_on_submit()</snippet></ROW><ROW><id>13774056</id><snippet>form.is_submitted() and form.validate()</snippet></ROW><ROW><id>13774088</id><snippet>re.findall</snippet></ROW><ROW><id>13774088</id><snippet>re.findall(r'(?:255\.){2}', '255.255.252.255.255.12')
</snippet></ROW><ROW><id>13774088</id><snippet>['255.255', '255.255']</snippet></ROW><ROW><id>13774088</id><snippet>['255.255.', '255.255.']</snippet></ROW><ROW><id>13774102</id><snippet>foo</snippet></ROW><ROW><id>13774102</id><snippet>bar</snippet></ROW><ROW><id>13774102</id><snippet>for year, state, county in foo:
    if (state, county) in bar:
        aFile.write(...)
</snippet></ROW><ROW><id>13774102</id><snippet>foo</snippet></ROW><ROW><id>13774102</id><snippet>for year, state, county in sorted(foo)</snippet></ROW><ROW><id>13774102</id><snippet>if</snippet></ROW><ROW><id>13774102</id><snippet>if (state, county) in bar and year &gt; 1990</snippet></ROW><ROW><id>13774325</id><snippet>np.vectorize</snippet></ROW><ROW><id>13774325</id><snippet>printer = np.vectorize(lambda x:'{0:5}'.format(x,))
print printer(b).astype(object)
</snippet></ROW><ROW><id>13774325</id><snippet>np.set_printoptions</snippet></ROW><ROW><id>13774325</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x=np.random.random(10)
&gt;&gt;&gt; x
array([ 0.72239823,  0.69938461,  0.85466846,  0.03294278,  0.06698482,
        0.04137562,  0.4223521 ,  0.81317235,  0.62221494,  0.6205595 ])
&gt;&gt;&gt; np.set_printoptions(precision=3)
&gt;&gt;&gt; print(x)
[ 0.722  0.699  0.855  0.033  0.067  0.041  0.422  0.813  0.622  0.621]
</snippet></ROW><ROW><id>13774416</id><snippet>row_2 = []</snippet></ROW><ROW><id>13774416</id><snippet>def update(self):
    for x in self.rows:
        for i in range(5):
            print("Lane {}: ".format(i), end='')
            if len(x):
                print(x[0])
            else:
                print()
</snippet></ROW><ROW><id>13774416</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>13774914</id><snippet>os.walk</snippet></ROW><ROW><id>13775043</id><snippet>u'f(x)'</snippet></ROW><ROW><id>13775043</id><snippet>from __future__ import unicode_literals, print_function</snippet></ROW><ROW><id>13775245</id><snippet>{% load i18n %}
</snippet></ROW><ROW><id>13775245</id><snippet>{% trans "Insert your text here" %}
</snippet></ROW><ROW><id>13775460</id><snippet># PyDev sets PYTHONPATH, use it
try:
    for p in os.environ['PYTHONPATH'].split(':'):
        if not p in sys.path:
            sys.path.append(p)
except:
    pass
</snippet></ROW><ROW><id>13775478</id><snippet>mydialog.setFixedSize(width, height)
</snippet></ROW><ROW><id>13775873</id><snippet>$.post</snippet></ROW><ROW><id>13775873</id><snippet>$.ajax</snippet></ROW><ROW><id>13775873</id><snippet>json</snippet></ROW><ROW><id>13775873</id><snippet>$.ajax</snippet></ROW><ROW><id>13775873</id><snippet>contentType</snippet></ROW><ROW><id>13775873</id><snippet>false</snippet></ROW><ROW><id>13775873</id><snippet>processData</snippet></ROW><ROW><id>13775873</id><snippet>false</snippet></ROW><ROW><id>13775873</id><snippet>cache</snippet></ROW><ROW><id>13775873</id><snippet>false</snippet></ROW><ROW><id>13775873</id><snippet>$.ajax({
    url: '/post',
    type: 'POST',
    data: {'photo' : formData, 'caption' : caption},
    cache: false,
    dataType: 'json',
    success: function () {
    }
});
</snippet></ROW><ROW><id>13775873</id><snippet>dataType</snippet></ROW><ROW><id>13775873</id><snippet>json</snippet></ROW><ROW><id>13775907</id><snippet>fid = fopen('exp.txt');
A = fscanf(fid, '%d|%d|%g', [3 inf]);
S = sparse(A(1,:), A(2,:), A(3,:))
</snippet></ROW><ROW><id>13776103</id><snippet>SyntaxError</snippet></ROW><ROW><id>13776103</id><snippet>exec</snippet></ROW><ROW><id>13776103</id><snippet>eval</snippet></ROW><ROW><id>13776103</id><snippet>&gt;&gt;&gt; try:
...     exec """
... this doesn't work  
... """
... except SyntaxError:
...     print "fail"
... 
fail
</snippet></ROW><ROW><id>13776103</id><snippet>try</snippet></ROW><ROW><id>13776103</id><snippet>except</snippet></ROW><ROW><id>13776103</id><snippet>import</snippet></ROW><ROW><id>13776242</id><snippet>is</snippet></ROW><ROW><id>13776242</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self, id):
...         self.id = id
...     def __eq__(self, o):
...         return self.id = o.id
... 
&gt;&gt;&gt; a = A(1)
&gt;&gt;&gt; b = A(1)
&gt;&gt;&gt; 
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = b
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>13776242</id><snippet>==</snippet></ROW><ROW><id>13776530</id><snippet>20</snippet></ROW><ROW><id>13776530</id><snippet>__getattr__</snippet></ROW><ROW><id>13776530</id><snippet>make_statement</snippet></ROW><ROW><id>13776530</id><snippet>20</snippet></ROW><ROW><id>13776530</id><snippet>()</snippet></ROW><ROW><id>13776530</id><snippet>20</snippet></ROW><ROW><id>13776530</id><snippet>&gt;&gt;&gt; person.make_statement
Calling __getattr__: make_statement
&lt;bound method Child.make_statement of &lt;__main__.Child instance at 0x10db5ed88&gt;&gt;
&gt;&gt;&gt; ms = person.make_statement
Calling __getattr__: make_statement
&gt;&gt;&gt; ms()
I am an instance of Child with age 10
</snippet></ROW><ROW><id>13776530</id><snippet>def __getattr__(self, attr):
    print("Calling __getattr__: "+attr)
    if hasattr(self.child, attr):
        def wrapper(*args, **kw):
            print('called with %r and %r' % (args, kw))
            return getattr(self.child, attr)(*args, **kw)
        return wrapper
    raise AttributeError(attr)
</snippet></ROW><ROW><id>13776530</id><snippet>&gt;&gt;&gt; person.make_statement(20)
Calling __getattr__: make_statement
called with (20,) and {}
I am an instance of Child with age 20
</snippet></ROW><ROW><id>13776535</id><snippet>val = round(float(sys.argv[1]))
</snippet></ROW><ROW><id>13776535</id><snippet>val = int(round(float(sys.argv[1])))
</snippet></ROW><ROW><id>13776535</id><snippet>val</snippet></ROW><ROW><id>13776628</id><snippet>^(?=.*id=123456)(?=.*discography=True)
</snippet></ROW><ROW><id>13776628</id><snippet>^</snippet></ROW><ROW><id>13776628</id><snippet>id=123456</snippet></ROW><ROW><id>13776628</id><snippet>.*</snippet></ROW><ROW><id>13776628</id><snippet>.*</snippet></ROW><ROW><id>13776628</id><snippet>re.S</snippet></ROW><ROW><id>13776628</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13776628</id><snippet>urlparse</snippet></ROW><ROW><id>13777193</id><snippet>process</snippet></ROW><ROW><id>13777193</id><snippet>#!/bin/bash

for file in A*; do
    pfile=processing.$file
    if mv "$file" "$pfile"; then
       process "$pfile"
       rm "$pfile"
    fi
done
</snippet></ROW><ROW><id>13777193</id><snippet>mv</snippet></ROW><ROW><id>13777408</id><snippet>item_count = 600
for i in range(0, item_count, 40):
    link = "http://www.flipkart.com/mobiles/pr?p%5B%5D=sort%3Dprice_asc&amp;sid=tyy%2C4io&amp;layout=grid&amp;ajax=true&amp;start=%d" % (i+1)

    // Do something with the link
    print link
</snippet></ROW><ROW><id>13777441</id><snippet>vstack</snippet></ROW><ROW><id>13777441</id><snippet>hstack</snippet></ROW><ROW><id>13777441</id><snippet>transpose</snippet></ROW><ROW><id>13777441</id><snippet>&gt;&gt;&gt; vstack([k,m]).transpose()
array([[ 1,  1],
       [ 2,  2],
       [ 3,  3],
       ...
       [98, 98],
       [99, 99]])
</snippet></ROW><ROW><id>13777853</id><snippet>line = line.replace('(', 'A')
</snippet></ROW><ROW><id>13777853</id><snippet>str.replace</snippet></ROW><ROW><id>13777853</id><snippet>re.sub</snippet></ROW><ROW><id>13777924</id><snippet>os.system(" curl " + link +"| egrep -o 'http:.*All\.ram'  &gt; final.txt  ")
</snippet></ROW><ROW><id>13777924</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
&gt;&gt;&gt; f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query?%s" % params)
&gt;&gt;&gt; print f.read()
</snippet></ROW><ROW><id>13777938</id><snippet>import sys
print(int(sys.argv[1]) + int(sys.argv[2]))
</snippet></ROW><ROW><id>13777938</id><snippet>import sys
print(sum(map(int, sys.argv[1:])))
</snippet></ROW><ROW><id>13778037</id><snippet>showImage</snippet></ROW><ROW><id>13778037</id><snippet>self.photo = ImageTk.PhotoImage(image)
</snippet></ROW><ROW><id>13778037</id><snippet>mainloop</snippet></ROW><ROW><id>13778037</id><snippet>showImage</snippet></ROW><ROW><id>13778037</id><snippet>mainloop</snippet></ROW><ROW><id>13778037</id><snippet>Tk</snippet></ROW><ROW><id>13778037</id><snippet>Frame</snippet></ROW><ROW><id>13778037</id><snippet>class MyApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        ...
        self.setupCanvas(...)
        ...
if __name__ == "__main__":
    app = MyApp()
    app.mainloop()
</snippet></ROW><ROW><id>13778092</id><snippet>doSomeOperation</snippet></ROW><ROW><id>13778092</id><snippet>scipy</snippet></ROW><ROW><id>13778117</id><snippet>time</snippet></ROW><ROW><id>13778117</id><snippet>strftime()</snippet></ROW><ROW><id>13778117</id><snippet>&gt;&gt;&gt; s = time.strftime('%Y-%m-%d-%H-%M-%S')
&gt;&gt;&gt; print s
2012-12-08-14-55-44
</snippet></ROW><ROW><id>13778121</id><snippet># run your simulation like usual
runSimulation()

#create a ordered grid of axes, not one in top of the others
axcolor = 'lightgoldenrodyellow'
fig = p.figure()
axdata = p.subplot2grid((7,4),(0,0),colspan=4,rowspan=4)
axpos = p.subplot2grid((7,4),(-2,0),colspan=4, axisbg=axcolor)
axvel = p.subplot2grid((7,4),(-1,0),colspan=4, axisbg=axcolor)

# create your plots in the global space.
# you are going to reference these lines, so you need to make them visible
# to the update functione, instead of creating them inside a function 
# (and thus losing them at the end of the function)
x = range(width)
lpos, = axdata.plot(x,yPosition,'r')
lvel, = axdata.plot(x,yVelocity,'g')
ltarget, = axdata.plot(x,yTarget,'k')
lforce, = axdata.plot(x,yForce,'b')

# same as usual
spos = Slider(axpos, 'Position Gain', 1.0, 20.0, valinit=1.5)
svel = Slider(axvel, 'Velocity Gain', 5.0, 500.0, valinit=60.0)


def update(val):
    # you don't need to declare the variables global, as if you don't
    # assign a value to them python will recognize them as global
    # without problem
    runSimulation(round(spos.val,2),round(svel.val,2))
    lpos.set_ydata(yPosition)
    lvel.set_ydata(yVelocity)
    ltarget.set_ydata(yTarget)
    lforce.set_ydata(yForce)
    # you need to update only the canvas of the figure
    fig.canvas.draw()

spos.on_changed(update)
svel.on_changed(update)
p.show()
</snippet></ROW><ROW><id>13778166</id><snippet>self.canvas.bind("&lt;B1-Motion&gt;", ...)</snippet></ROW><ROW><id>13778166</id><snippet>update</snippet></ROW><ROW><id>13778166</id><snippet>canvas_move</snippet></ROW><ROW><id>13778285</id><snippet>http.client</snippet></ROW><ROW><id>13778285</id><snippet>2to3</snippet></ROW><ROW><id>13778285</id><snippet>httplib</snippet></ROW><ROW><id>13778285</id><snippet>http.client</snippet></ROW><ROW><id>13778375</id><snippet>{
    'Hello': [1,5,10,8000]
    'World': [1,2,3,5,9]
    ...
}
</snippet></ROW><ROW><id>13778400</id><snippet>web = QWebView()</snippet></ROW><ROW><id>13778400</id><snippet>settings = web.settings()
settings.setAttribute(QWebSettings.PluginsEnabled, True)
</snippet></ROW><ROW><id>13778686</id><snippet>"r'{}'".format(regex.pattern)
</snippet></ROW><ROW><id>13778686</id><snippet>"\"</snippet></ROW><ROW><id>13778686</id><snippet>r"\"</snippet></ROW><ROW><id>13778686</id><snippet>r"\\"</snippet></ROW><ROW><id>13778686</id><snippet>"\\\\"</snippet></ROW><ROW><id>13778686</id><snippet>def rawstr(s):
    """
    Return the raw string representation (using r'') literals of the string
    *s* if it is available. If any invalid characters are encountered (or a
    string which cannot be represented as a rawstr), the default repr() result
    is returned.
    """
    if any(0 &lt;= ord(ch) &lt; 32 for ch in s):
        return repr(s)

    if (len(s) - len(s.rstrip("\\"))) % 2 == 1:
        return repr(s)

    pattern = "r'{0}'"
    if '"' in s:
        if "'" in s:
            return repr(s)
    elif "'" in s:
        pattern = 'r"{0}"'

    return pattern.format(s)
</snippet></ROW><ROW><id>13778686</id><snippet>&gt;&gt;&gt; test1 = "\\"
&gt;&gt;&gt; test2 = "foobar \n"
&gt;&gt;&gt; test3 = r"a \valid rawstring"
&gt;&gt;&gt; test4 = "foo \\\\\\"
&gt;&gt;&gt; test5 = r"foo \\"
&gt;&gt;&gt; test6 = r"'"
&gt;&gt;&gt; test7 = r'"'
&gt;&gt;&gt; print(rawstr(test1))
'\\'
&gt;&gt;&gt; print(rawstr(test2))
'foobar \n'
&gt;&gt;&gt; print(rawstr(test3))
r'a \valid rawstring'
&gt;&gt;&gt; print(rawstr(test4))
'foo \\\\\\'
&gt;&gt;&gt; print(rawstr(test5))
r'foo \\'
&gt;&gt;&gt; print(rawstr(test6))
r"'"
&gt;&gt;&gt; print(rawstr(test7))
r'"'
</snippet></ROW><ROW><id>13778840</id><snippet>tempfile.mktemp()</snippet></ROW><ROW><id>13778840</id><snippet>tempfile.mkstemp()</snippet></ROW><ROW><id>13778840</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>13778840</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>13778840</id><snippet>mkstemp()</snippet></ROW><ROW><id>13778940</id><snippet>unicode('abcdefö')</snippet></ROW><ROW><id>13778940</id><snippet>coding: utf-8</snippet></ROW><ROW><id>13778940</id><snippet>s = u'abcdefö'</snippet></ROW><ROW><id>13778940</id><snippet>s = unicode('abcdefö', 'utf8')</snippet></ROW><ROW><id>13778940</id><snippet>s = 'abcdefö'.decode('utf8')</snippet></ROW><ROW><id>13778940</id><snippet>print s</snippet></ROW><ROW><id>13779127</id><snippet>nonsense</snippet></ROW><ROW><id>13779127</id><snippet>for CHR in nonsense</snippet></ROW><ROW><id>13779127</id><snippet>print [CHR for CHR in nonsense]
#['f', 'a', 'x', 'o', 'y', 'k']
</snippet></ROW><ROW><id>13779127</id><snippet>['afokyx'.index(CHR) for CHR in nonsense]
[1, 0, 5, 2, 4, 3]
</snippet></ROW><ROW><id>13779127</id><snippet>CHR</snippet></ROW><ROW><id>13779127</id><snippet>CHR</snippet></ROW><ROW><id>13779127</id><snippet>CHR</snippet></ROW><ROW><id>13779127</id><snippet>"afokyx"</snippet></ROW><ROW><id>13779127</id><snippet>print [(CHR, 'afokyx'.index(CHR)) for CHR in nonsense]
# [('f', 1), ('a', 0), ('x', 5), ('o', 2), ('y', 4), ('k', 3)]
R = dict((CHR, 'afokyx'.index(CHR)) for CHR in nonsense)
</snippet></ROW><ROW><id>13779566</id><snippet>print [s for s in list if sub in s]
</snippet></ROW><ROW><id>13779566</id><snippet>print "\n".join([s for s in list if sub in s])
</snippet></ROW><ROW><id>13779725</id><snippet>s = 'date|o|h|l|c|e|f~07-12-2012 09:15|5934.0000|5945.5000|5934.0000|5938.6500|1749606|1749606~07-12-2012 09:16|5939.1000|5941.8000|5936.3500|5941.8000|1064557|2814163'

rows = s.split ('~')
d = {}
keys = rows [0].split ('|')
for key in keys: d [key] = []
for row in rows [1:]:
    for idx, value in enumerate (row.split ('|') ):
        d [keys [idx] ].append (value)

print (d)
</snippet></ROW><ROW><id>13779832</id><snippet>B = fields.ForeignKey('api.resources.B', 'B')
</snippet></ROW><ROW><id>13779923</id><snippet> &lt;form action="" method="get"&gt;
     {% for field in form %}
        {{ field }}
     {% endfor %}
 &lt;/form&gt;
</snippet></ROW><ROW><id>13780014</id><snippet>import maya.cmds as cmd

def func():
    print cmd.ls()

# we want this to execute on import
func()
</snippet></ROW><ROW><id>13780014</id><snippet>mayabatch -command "python(""import demo"") " -file filename.ma
</snippet></ROW><ROW><id>13780014</id><snippet>for %i in (*.ma) do mayabatch -command "python(""import demo"") " -file %i
</snippet></ROW><ROW><id>13780014</id><snippet>#init maya
import maya.standalone
maya.standalone.initialize( name='python' )
import maya.cmds as cmd
import glob

def func():
    print cmd.ls(shapes=True)

for file in glob.glob('*.m[ab]'):
    cmd.file( file, o=True )
    func()
</snippet></ROW><ROW><id>13780014</id><snippet>mayapy demo_driect.py
</snippet></ROW><ROW><id>13780130</id><snippet>class Matrix:
    def __init__ (self, columns):
        self.columns = columns
        self.rows = []

    def push (self, row):
        nRow = []
        row = dict (row)
        for key in self.columns:
            nRow.append (row [key] if key in row else 0)
        self.rows.append (nRow)

    def result (self): return self.rows

    def colNames (self): return self.columns

word_list = ["a", "b","c","d", "e"]
input1 = [("b",20),("a",10)]
input2 = [("c",9)]
input3 = [("d",70)]

m = Matrix (word_list)
m.push (input1)
m.push (input2)
m.push (input3)
print (m.result () )
print (m.colNames () )
</snippet></ROW><ROW><id>13780221</id><snippet>lstrip</snippet></ROW><ROW><id>13780221</id><snippet>In [25]: n = 0.12345
In [26]: '{:.3f}'.format(n).lstrip('0')
Out[26]: '.123'
</snippet></ROW><ROW><id>13780221</id><snippet>str(n)[1:]</snippet></ROW><ROW><id>13780221</id><snippet>n</snippet></ROW><ROW><id>13780478</id><snippet>def email_sort_key(email):
    """Find two pieces of info in the email, and return them as a tuple."""
    # ...search, search...
    return "location", "incident_date"
</snippet></ROW><ROW><id>13780478</id><snippet>emails.sort(key=email_sort_key)
</snippet></ROW><ROW><id>13780767</id><snippet>self.appExeCB=QtGui.QComboBox()
self.appExeCB.addItems(self.items.keys())
self.appExeCB.setCurrentIndex(self.items.keys().index('Maya Executable'))
</snippet></ROW><ROW><id>13781507</id><snippet>chkconfig mysql on
</snippet></ROW><ROW><id>13781507</id><snippet>mysql
use DB;
SELECT * FROM tbl1;
</snippet></ROW><ROW><id>13781507</id><snippet>netstat -tnlp | grep mysql
</snippet></ROW><ROW><id>13781521</id><snippet># indices 0 - 3 are for horizontal, 4 - 7 are for vertical
dij = [(0, 1), (1, 0), (0, -1), (-1, 0),
       (1, 1), (1, -1), (-1, 1), (-1, -1)]

def getSurroundingTiles(self, tile, horizontal = True, vertical = True):
    index = list(self.getTiles()).index(tile)
    maxtile = self.sqrtnum - 1 # Offset for 0 indexing

    i = int(math.floor(index / self.sqrtnum))
    j = int(index % self.sqrtnum)

    surroundingTiles = []

    startat = 0 if horizontal else 4
    stopat = 8 if vertical else 4

    for di, dj in dij[startat:stopat]:
        if 0 &lt;= i + di &lt;= maxtile and 0 &lt;= j + dj &lt;= maxtile:
            surroundingTiles.append(self[i + di][j + dj])

    return surroundingTiles
</snippet></ROW><ROW><id>13781521</id><snippet>out of bounds</snippet></ROW><ROW><id>13781521</id><snippet>horizontal</snippet></ROW><ROW><id>13781521</id><snippet>vertical</snippet></ROW><ROW><id>13781521</id><snippet>horizontally and vertically adjacent</snippet></ROW><ROW><id>13781521</id><snippet>diagonally adjacent</snippet></ROW><ROW><id>13781568</id><snippet>blockSignals(bool)</snippet></ROW><ROW><id>13781568</id><snippet>QObjects</snippet></ROW><ROW><id>13781568</id><snippet>QObject</snippet></ROW><ROW><id>13781568</id><snippet>updatesEnabled(bool)</snippet></ROW><ROW><id>13781568</id><snippet>mainWidget.setUpdatesEnabled(False)
# do a bunch of operations that would trigger expensive events
# like repaints
mainWidget.setUpdatesEnabled(True)
</snippet></ROW><ROW><id>13781568</id><snippet>updatesEnabled</snippet></ROW><ROW><id>13781745</id><snippet>from scipy.interpolate import griddata
import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(1.,10.,20)
y=np.linspace(1.,10.,20)
z=z = np.random.random(20)
xi=np.linspace(1.,10.,10)
yi=np.linspace(1.,10.,10)

X,Y= np.meshgrid(xi,yi)
Z = griddata((x, y), z, (X, Y),method='nearest')
plt.contourf(X,Y,Z)
</snippet></ROW><ROW><id>13781847</id><snippet>user_channel[0]</snippet></ROW><ROW><id>13781847</id><snippet>user_channel[0].video
</snippet></ROW><ROW><id>13782007</id><snippet>@app.route('/route')
def routename()
    form = SelectAThing()
    form.orgid.choices=get_joinable_orgs()
</snippet></ROW><ROW><id>13782036</id><snippet>items()</snippet></ROW><ROW><id>13782036</id><snippet>student_loan_portfolio.items()</snippet></ROW><ROW><id>13782036</id><snippet>[ ('loan1', dictOfLoan1), ('loan2', dictOfLoan2), ...]</snippet></ROW><ROW><id>13782036</id><snippet>dictOfLoan1['rate']</snippet></ROW><ROW><id>13782036</id><snippet>dictOfLoan2['rate']</snippet></ROW><ROW><id>13782036</id><snippet>lambda item: item[1]['rate']</snippet></ROW><ROW><id>13782036</id><snippet>item</snippet></ROW><ROW><id>13782036</id><snippet>(key, value)</snippet></ROW><ROW><id>13782036</id><snippet>item[1]</snippet></ROW><ROW><id>13782199</id><snippet>self.panel1.configure(image=new_image)</snippet></ROW><ROW><id>13782215</id><snippet>wave</snippet></ROW><ROW><id>13782232</id><snippet>from django import test
from django.core.urlresolvers import reverse
from page.urls import urlpatterns

class PageTest(test.TestCase):

   def test_responses(self):
       for url in urlpatterns:
           response = self.client.get(reverse(url.name))
           self.assertEqual(response.status_code, 200)
</snippet></ROW><ROW><id>13782235</id><snippet>&gt;&gt;&gt; if line.startswith('Best CV Model'):
...     re.findall(r'\d+\.{0,1}\d*', line)
... 
['15778', '2', '0', '0.7185', '0.466281']
</snippet></ROW><ROW><id>13782371</id><snippet>email.header</snippet></ROW><ROW><id>13782371</id><snippet>import email, email.header
m = email.message_from_string("Subject: math340-05 =?UTF-8?B?4oCTIEF1ZmdhYmUgNS4x?=")
raw_header = email.header.decode_header(m["Subject"])
header = email.header.make_header(raw_header)
print(str(header))
# or for py2: print(unicode(header))
</snippet></ROW><ROW><id>13782444</id><snippet># SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-12-08 19:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: templates/home/index.html:2
msgid "hello"
msgstr ""
</snippet></ROW><ROW><id>13782513</id><snippet>$ cd directory/containing/your/project
your/project$ python your_flask_app.py
* Running on 127.0.0.1:5000
</snippet></ROW><ROW><id>13782513</id><snippet>app.run</snippet></ROW><ROW><id>13782513</id><snippet>debug</snippet></ROW><ROW><id>13782513</id><snippet>True</snippet></ROW><ROW><id>13782513</id><snippet>app.run(debug=True)</snippet></ROW><ROW><id>13782513</id><snippet>ImportError</snippet></ROW><ROW><id>13782513</id><snippet># Linux / Mac
your/project$ virtualenv --distribute venv
your/project$ source venv/bin/activate  # Alternately, you can use the . command
(venv) your/project$ pip install -r requirements.txt
(venv) your/project$ python your_flask_app.py

# Windows
your/project&gt; virtualenv --distribute venv
your/project&gt; venv\Scripts\activate
(venv) your/project&gt; pip install -r requirements.txt
(venv) your/project&gt; python your_flask_app.py
</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; s1 = 'hello everybody'
&gt;&gt;&gt; s2 = 'hello everybody'
&gt;&gt;&gt; s3 = s1
</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; id(s1)
174699248
&gt;&gt;&gt; id(s2)
174699408
</snippet></ROW><ROW><id>13782527</id><snippet>s3</snippet></ROW><ROW><id>13782527</id><snippet>s1</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; id(s3)
174699248
</snippet></ROW><ROW><id>13782527</id><snippet>is</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; s1 is s2
False
&gt;&gt;&gt; s3 is s1
True
&gt;&gt;&gt; s3 is s2
False
</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; s1 == s2
True
&gt;&gt;&gt; s2 == s3
True
&gt;&gt;&gt; s3 == s1
True
</snippet></ROW><ROW><id>13782527</id><snippet>is</snippet></ROW><ROW><id>13782527</id><snippet>&gt;&gt;&gt; s4 = 'hello'
&gt;&gt;&gt; s5 = 'hello'
&gt;&gt;&gt; id(s4)
173899104
&gt;&gt;&gt; id(s5)
173899104
&gt;&gt;&gt; s4 is s5
True
</snippet></ROW><ROW><id>13782527</id><snippet>is</snippet></ROW><ROW><id>13782527</id><snippet>==</snippet></ROW><ROW><id>13782557</id><snippet>Clock.tick</snippet></ROW><ROW><id>13782557</id><snippet>&gt;&gt;&gt; import pygame
&gt;&gt;&gt; clock = pygame.time.Clock()
&gt;&gt;&gt; clock
&lt;Clock(fps=0.00)&gt;
&gt;&gt;&gt; clock.tick
&lt;built-in method tick of Clock object at 0xb402b408&gt;
&gt;&gt;&gt; clock.tick()
14487
&gt;&gt;&gt; clock.tick()
836
</snippet></ROW><ROW><id>13782557</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; for i in range(5):
...     print clock.tick()
...     time.sleep(0.17)
...     
22713
172
171
171
172
</snippet></ROW><ROW><id>13782665</id><snippet>nonlocal</snippet></ROW><ROW><id>13782665</id><snippet>myfunction():
    x = None
    def callback():
        nonlocal x    # Python 3 only 
        x = 5

    gtk.somefunction(callback)  # Executes callback()
    print "My callback returned", x
</snippet></ROW><ROW><id>13782665</id><snippet>def real_callback():
    return 11

def myfunction():
    x = 0 

    def wrapper():
        nonlocal x     # Python 3 only
        x = real_callback()

    gtk.somefunction(wrapper)
    print "my callback returned", x
</snippet></ROW><ROW><id>13782665</id><snippet>wrapper</snippet></ROW><ROW><id>13782665</id><snippet>nonlocal</snippet></ROW><ROW><id>13782665</id><snippet>nonlocal</snippet></ROW><ROW><id>13782665</id><snippet>global</snippet></ROW><ROW><id>13782665</id><snippet>locals()</snippet></ROW><ROW><id>13782665</id><snippet>locals()['x']</snippet></ROW><ROW><id>13782665</id><snippet>x</snippet></ROW><ROW><id>13782665</id><snippet>locals()</snippet></ROW><ROW><id>13782665</id><snippet>exec</snippet></ROW><ROW><id>13782665</id><snippet>locals()</snippet></ROW><ROW><id>13782665</id><snippet>exec "a = 0"</snippet></ROW><ROW><id>13782665</id><snippet>def wrapper(callback, context, varname):
    def _callback():
        context[varname] = callback()
    return _callback

def mycode():
    exec ""
    some_library_function(wrapper(real_callback, locals(), 'z'))
    print "The callback returned", z
</snippet></ROW><ROW><id>13782665</id><snippet>exec</snippet></ROW><ROW><id>13782764</id><snippet>c = ['a,b,c', 'a,b,c', 'a,b']
print (set (''.join (c).replace (',', '') ) )
</snippet></ROW><ROW><id>13782774</id><snippet>for &lt;element&gt; in &lt;container&gt;:</snippet></ROW><ROW><id>13782774</id><snippet>enumerate()</snippet></ROW><ROW><id>13782774</id><snippet>for &lt;index&gt;,&lt;element&gt; in enumerate(&lt;container&gt;):</snippet></ROW><ROW><id>13782774</id><snippet>g1 = [[0, 1, 1, 0],
      [1, 0, 0, 1],
      [1, 0, 0, 1],
      [0, 1, 1, 0]]

def inverse_graph(graph):
    """ invert zeroes and ones in a square graph
        but force diagonal elements to be zero
    """
    for i,row in enumerate(graph):
        for j,cell in enumerate(row):
            row[j] = 0 if cell or i == j else 1
    return graph

print(g1)
print(inverse_graph(g1))
</snippet></ROW><ROW><id>13782774</id><snippet>[[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]]
[[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]]
</snippet></ROW><ROW><id>13782774</id><snippet>list comprehension</snippet></ROW><ROW><id>13782774</id><snippet>def inverse_graph(graph):
    return [[0 if cell or i == j else 1
                for j,cell in enumerate(row)]
                    for i,row in enumerate(graph)]
</snippet></ROW><ROW><id>13783132</id><snippet>argsort</snippet></ROW><ROW><id>13783132</id><snippet>minidx = []
for cluster in sumErrors:
    minidx.append(np.argsort(cluster)[:3])
</snippet></ROW><ROW><id>13783227</id><snippet>lambda</snippet></ROW><ROW><id>13783227</id><snippet>repeat(lambda: bar(42))
</snippet></ROW><ROW><id>13783227</id><snippet>functools.partial</snippet></ROW><ROW><id>13783227</id><snippet>from functools import partial
repeat(partial(bar, 42))
</snippet></ROW><ROW><id>13783227</id><snippet>def repeat(times, f, *args):
    for _ in range(times):
        f(*args)
</snippet></ROW><ROW><id>13783227</id><snippet>*args</snippet></ROW><ROW><id>13783227</id><snippet>repeat(4, foo, "test")
</snippet></ROW><ROW><id>13783227</id><snippet>def inquisition(weapon1, weapon2, weapon3):
    print("Our weapons are {}, {} and {}".format(weapon1, weapon2, weapon3))

repeat(10, inquisition, "surprise", "fear", "ruthless efficiency")
</snippet></ROW><ROW><id>13783227</id><snippet>*args</snippet></ROW><ROW><id>13783227</id><snippet>**kwargs</snippet></ROW><ROW><id>13783363</id><snippet>In [9]: l = [[3,7,2],[1,4,5],[9,8,7]]

In [10]: [sum(i) for i in zip(*l)]
Out[10]: [13, 19, 14]
</snippet></ROW><ROW><id>13783363</id><snippet>zip</snippet></ROW><ROW><id>13783363</id><snippet>*</snippet></ROW><ROW><id>13783363</id><snippet>zip(*l)</snippet></ROW><ROW><id>13783363</id><snippet>In [13]: for i in zip(*l):
   ....:     print i
   ....:     
   ....:     
(3, 1, 9)
(7, 4, 8)
(2, 5, 7)
</snippet></ROW><ROW><id>13783363</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>13783363</id><snippet>fillvalue</snippet></ROW><ROW><id>13783363</id><snippet>0</snippet></ROW><ROW><id>13783363</id><snippet>0</snippet></ROW><ROW><id>13783363</id><snippet>In [1]: import itertools

In [2]: l = [[3,7,2],[1,4],[9,8,7,10]]

In [3]: [sum(i) for i in itertools.izip_longest(*l, fillvalue=0)]
Out[3]: [13, 19, 9, 10]
</snippet></ROW><ROW><id>13783363</id><snippet>izip_longest</snippet></ROW><ROW><id>13783363</id><snippet>In [4]: for i in itertools.izip_longest(*l, fillvalue=0):
   ...:     print i
   ...:     
(3, 1, 9)
(7, 4, 8)
(2, 0, 7)
(0, 0, 10)
</snippet></ROW><ROW><id>13783652</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt;
&gt;&gt;&gt; html = u"""
... &lt;html&gt;
... &lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;
... &lt;body&gt;
... &lt;p test="Málaga"&gt;Example&lt;/p&gt;
... &lt;/body&gt;
... &lt;/html&gt;
... """
&gt;&gt;&gt;
&gt;&gt;&gt; html = html.encode('utf-8')
&gt;&gt;&gt;
&gt;&gt;&gt; parser = etree.HTMLParser()
&gt;&gt;&gt; tree = etree.fromstring(html, parser)
&gt;&gt;&gt; print tree.xpath('//p/@test')[0]
MÃ¡laga
&gt;&gt;&gt;
&gt;&gt;&gt; parser = etree.HTMLParser(encoding='utf-8')
&gt;&gt;&gt; tree = etree.fromstring(html, parser)
&gt;&gt;&gt; print tree.xpath('//p/@test')[0]
Málaga
</snippet></ROW><ROW><id>13783851</id><snippet>QScrollArea</snippet></ROW><ROW><id>13783851</id><snippet>QWidget</snippet></ROW><ROW><id>13783851</id><snippet>setWidget()</snippet></ROW><ROW><id>13783851</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>13783851</id><snippet>    while self.tabWidget.widget(0):
        self.tabWidget.removeTab(0)
    for i in data['tabList']:
        self.log("Adding tab: '%s'" % i, DEBUG)
        self.data['tabDict'][i]['scrollarea'] = QScrollArea()
        self.data['tabDict'][i]['scrollarea'].setWidgetResizable(True)
        self.data['tabDict'][i]['widget'] = QWidget()
        self.data['tabDict'][i]['vbox'] = QVBoxLayout()
        for j in self.data['tabDict'][i]['groupList']:
            self.log("Adding group: '%s'" % j, DEBUG)
            self.data['tabDict'][i]['groupDict'][j]['groupbox'] = QGroupBox(j)
            self.data['tabDict'][i]['groupDict'][j]['formlo'] = QFormLayout()
            print self.data['tabDict'][i]['groupDict'][j]['formlo']
            for k in self.data['tabDict'][i]['groupDict'][j]['fields']:
                self.log("Adding field: '%s'" % k['name'])
                k['lineedit']  = QLineEdit(k['value'])
                k['lineedit'].setToolTip('&lt;b&gt;Type:&lt;/b&gt; %s&lt;br&gt;&lt;b&gt;TSDB path:&lt;/b&gt; %s&lt;br&gt;&lt;b&gt;Line:&lt;/b&gt; %d&lt;br&gt;&lt;b&gt;Comment:&lt;/b&gt; %s' % (k['type'],k['path'],k['row'], k['comment']))
                self.data['tabDict'][i]['groupDict'][j]['formlo'].addRow(k['name'], k['lineedit'])
            self.data['tabDict'][i]['groupDict'][j]['groupbox'].setLayout(self.data['tabDict'][i]['groupDict'][j]['formlo'])
            self.data['tabDict'][i]['vbox'].addWidget(self.data['tabDict'][i]['groupDict'][j]['groupbox'])
        self.data['tabDict'][i]['widget'].setLayout(self.data['tabDict'][i]['vbox'])
        self.data['tabDict'][i]['scrollarea'].setWidget(self.data['tabDict'][i]['widget'])
        self.tabWidget.addTab(self.data['tabDict'][i]['scrollarea'], i)
</snippet></ROW><ROW><id>13784019</id><snippet>&gt;&gt;&gt; text = '000 001 002 003 '
&gt;&gt;&gt; words = ['foo', 'bar', 'that', 'these']
&gt;&gt;&gt; [words[int(item)] for item in text.split()]
['foo', 'bar', 'that', 'these']
</snippet></ROW><ROW><id>13784019</id><snippet>def get(seq, item):
    try:
        return seq[int(item)]
    except ValueError:
        return item
</snippet></ROW><ROW><id>13784019</id><snippet>[get(words, item) for item in text.split()]</snippet></ROW><ROW><id>13784019</id><snippet>get()</snippet></ROW><ROW><id>13784019</id><snippet>enumerate()</snippet></ROW><ROW><id>13784019</id><snippet>y = -1
for w in text:
    y = y + 1
    ...
</snippet></ROW><ROW><id>13784019</id><snippet>for y, w in enumerate(text):
    ...
</snippet></ROW><ROW><id>13784019</id><snippet>w = {x:a}      
for i, j in w.iteritems():
    text = text.replace(i, j)
</snippet></ROW><ROW><id>13784019</id><snippet>text = text.replace(x, a)
</snippet></ROW><ROW><id>13784019</id><snippet>w</snippet></ROW><ROW><id>13784019</id><snippet>words_dict = {"{0:03d}".format(index): value for index, value in enumerate(words)}
for key, value in words_dict.items():
    text = test.replace(key, value)
</snippet></ROW><ROW><id>13784019</id><snippet>str.format()</snippet></ROW><ROW><id>13784019</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>13784019</id><snippet>dict()</snippet></ROW><ROW><id>13784026</id><snippet>def repeats(lst):
    i_0 = None
    n = -1 # will still work if lst starts with None
    for i in lst:
        if i == i_0:
            n += 1
        else:
            n = 0
        yield n
        i_0 = i
# list(repeats([1,1,1,2,2,3])) == [0,1,2,0,1,0]
</snippet></ROW><ROW><id>13784026</id><snippet>import numpy as np
df['rep'] = np.array(list(repeats(df['time'])))
</snippet></ROW><ROW><id>13784026</id><snippet>from collections import Counter
count = Counter(df['time'])
df['count'] = df['time'].apply(lambda x: count[x])
</snippet></ROW><ROW><id>13784026</id><snippet>df['time2'] = df.apply(lambda row: (row['time'] 
                                 + datetime.timedelta(0, 1) # 1s
                                     * row['rep'] 
                                     / row['count']),
                 axis=1)
</snippet></ROW><ROW><id>13784026</id><snippet>del df['rep']</snippet></ROW><ROW><id>13784026</id><snippet>del df['count']</snippet></ROW><ROW><id>13784026</id><snippet>shift</snippet></ROW><ROW><id>13784143</id><snippet>nonlocal</snippet></ROW><ROW><id>13784143</id><snippet>counter = -&gt; {
  x = 0
  -&gt;y {
    x += y
    puts x
  }
}

i = counter.()

i.(2)
# 2

i.(3)
# 5
</snippet></ROW><ROW><id>13784143</id><snippet>counter</snippet></ROW><ROW><id>13784143</id><snippet>def counter
  x = 0
  -&gt;y {
    x += y
    puts x
  }
end

i = counter

i.(2)
# 2

i.(3)
# 5
</snippet></ROW><ROW><id>13784297</id><snippet>mainloop</snippet></ROW><ROW><id>13784297</id><snippet>from Tkinter import Tk

def check():
    root.after(50, check) # 50 stands for 50 ms.

root = Tk()
root.after(50, check)
root.mainloop()
</snippet></ROW><ROW><id>13784523</id><snippet>list</snippet></ROW><ROW><id>13784523</id><snippet>x = [0.1]
</snippet></ROW><ROW><id>13784523</id><snippet>float</snippet></ROW><ROW><id>13784523</id><snippet>return 4.*a*x*(1.-x)
</snippet></ROW><ROW><id>13784523</id><snippet>x</snippet></ROW><ROW><id>13784523</id><snippet>array</snippet></ROW><ROW><id>13784523</id><snippet>list</snippet></ROW><ROW><id>13784523</id><snippet>x = array([0.1])
</snippet></ROW><ROW><id>13784523</id><snippet>[0] + [1] == [0, 1]
</snippet></ROW><ROW><id>13784523</id><snippet>[0] * 3 == [0, 0, 0]
</snippet></ROW><ROW><id>13784523</id><snippet>[0] * 3.0 #raises TypeError as you've seen
</snippet></ROW><ROW><id>13784529</id><snippet>exec()</snippet></ROW><ROW><id>13784529</id><snippet>exec()</snippet></ROW><ROW><id>13784529</id><snippet>exec()</snippet></ROW><ROW><id>13784529</id><snippet>xyz.txt</snippet></ROW><ROW><id>13784529</id><snippet>Process</snippet></ROW><ROW><id>13784644</id><snippet>scp</snippet></ROW><ROW><id>13784644</id><snippet>SSH</snippet></ROW><ROW><id>13784644</id><snippet>scp -c blowfish -C user@host:"\"/media/sdi1/home/data/bob's file\"" /storage/.../
</snippet></ROW><ROW><id>13784644</id><snippet>"""scp -c blowfish -C user@host:"\"/media/sdi1/home/data/bob's file\"" /storage/.../"""
</snippet></ROW><ROW><id>13784644</id><snippet>pipes.quote</snippet></ROW><ROW><id>13784644</id><snippet>fp = "/media/sdi1/home/data/bob's file.avi"
fp = "user@host:" + pipes.quote(pipes.quote(fp))

cmdline = "scp -c blowfish -C " + fp + " /storage/downloads/incoming/"
os.system(cmdline)
</snippet></ROW><ROW><id>13784644</id><snippet>pipes.quote</snippet></ROW><ROW><id>13784644</id><snippet>fp = "/media/sdi1/home/data/bob's file.avi"
# the filepath argument escaped for ssh/scp on the remote side
fp = pipes.quote(fp)
commandargs = ["scp", "-c", "blowfish", "-C", "user@host:"+fp, "/storage/downloads/incoming/"]
# escape all words for the local shell, and then concatenate space-separated
cmdline = " ".join(map(pipes.quote, commandargs))
os.system(cmdline)
</snippet></ROW><ROW><id>13784644</id><snippet>os.exec*</snippet></ROW><ROW><id>13784644</id><snippet>fp = pipes.quote("/media/sdi1/home/data/bob's file.avi")
commandargs = ["scp", "-c", "blowfish", "-C", "user@host:"+fp, "/storage/downloads/incoming/"]
if os.fork() == 0:
    os.execvp("scp", commandargs)
</snippet></ROW><ROW><id>13784871</id><snippet>func_defaults</snippet></ROW><ROW><id>13784879</id><snippet>str(myuuid)</snippet></ROW><ROW><id>13784879</id><snippet>42c151a8-b22b-4cd5-b103-21bdb882e489</snippet></ROW><ROW><id>13784879</id><snippet>myuuid.bytes</snippet></ROW><ROW><id>13784879</id><snippet>bytes_le</snippet></ROW><ROW><id>13784879</id><snippet>myuuid.hex</snippet></ROW><ROW><id>13785187</id><snippet>ERBFilterCoeffs</snippet></ROW><ROW><id>13785187</id><snippet>ERBFilterCoeffs.__doc__</snippet></ROW><ROW><id>13785187</id><snippet>class ERBFilterCoeffs(namedtuple('ERBFilterCoeffs','a b c')):
    """
    this is the doc string for ERBFilterCoeffs
    """
</snippet></ROW><ROW><id>13786256</id><snippet>import xmlrpclib, httplib, gzip

class LogTransport(xmlrpclib.Transport):
    def send_request(self, connection, handler, request_body):
        # log here.
        print handler, request_body
        if (self.accept_gzip_encoding and gzip):
            connection.putrequest("POST", handler, skip_accept_encoding=True)
            connection.putheader("Accept-Encoding", "gzip")
        else:
            connection.putrequest("POST", handler)

p = LogTransport()
server = xmlrpclib.Server('http://time.xmlrpc.com/RPC2', transport=p)
print server.currentTime.getCurrentTime()
</snippet></ROW><ROW><id>13786256</id><snippet>/RPC2 &lt;?xml version='1.0'?&gt;
&lt;methodCall&gt;
&lt;methodName&gt;currentTime.getCurrentTime&lt;/methodName&gt;
&lt;params&gt;
&lt;/params&gt;
&lt;/methodCall&gt;
</snippet></ROW><ROW><id>13786294</id><snippet>xlrd</snippet></ROW><ROW><id>13786294</id><snippet>xlwt</snippet></ROW><ROW><id>13786294</id><snippet>xlrd</snippet></ROW><ROW><id>13786294</id><snippet>xlwt</snippet></ROW><ROW><id>13786294</id><snippet>from xlutils.copy import copy
from xlrd import open_workbook

# open the file you're interested
rb = open_workbook('some_document.xlsx')

# copy it to a writable variant
wb = copy(rb)

# find the index of a sheet you wanna rename,
# let's say you wanna rename Sheet1
idx = rb.sheet_names().index('Sheet1')

# now rename the sheet in the writable copy
wb.get_sheet(idx).name = u'Renamed Sheet1'

# save the new spreadsheet
wb.save('new_some_document.xlsx')

# done
</snippet></ROW><ROW><id>13786318</id><snippet>import requests
from bs4 import BeautifulSoup

games_url = 'http://www.primarygames.com/mobile/category/all/'

def get_all_games():
    soup = BeautifulSoup(requests.get(games_url).text)

    for a in soup.find('div', {'class': 'catlist'}).find_all('a'):
        yield 'http://www.primarygames.com' + a['href']

def download_game(url):
    # You have to do this stuff. I'm lazy and won't do it.

if __name__ == '__main__':
    for game in get_all_games():
        download_game(url)
</snippet></ROW><ROW><id>13786318</id><snippet>download_game()</snippet></ROW><ROW><id>13786318</id><snippet>&lt;object&gt;</snippet></ROW><ROW><id>13786327</id><snippet>date_range</snippet></ROW><ROW><id>13786327</id><snippet>import datatime
import pandas as pd
import numpy as np

todays_date = datetime.datetime.now().date()
index = pd.date_range(todays_date-datetime.timedelta(10), periods=10, freq='D')

columns = ['A','B', 'C']
</snippet></ROW><ROW><id>13786327</id><snippet>NaN</snippet></ROW><ROW><id>13786327</id><snippet>df_ = pd.DataFrame(index=index, columns=columns)
df_ = df_.fillna(0) # with 0s rather than NaNs
</snippet></ROW><ROW><id>13786327</id><snippet>data = np.array([np.arange(10)]*3).T
</snippet></ROW><ROW><id>13786327</id><snippet>In [10]: df = pd.DataFrame(data, index=index, columns=columns)

In [11]: df
Out[11]: 
            A  B  C
2012-11-29  0  0  0
2012-11-30  1  1  1
2012-12-01  2  2  2
2012-12-02  3  3  3
2012-12-03  4  4  4
2012-12-04  5  5  5
2012-12-05  6  6  6
2012-12-06  7  7  7
2012-12-07  8  8  8
2012-12-08  9  9  9
</snippet></ROW><ROW><id>13786562</id><snippet>try:
    call('/usr/sbin/snif')
except OSError:
    print "It didn't execute"
</snippet></ROW><ROW><id>13786562</id><snippet>check_output</snippet></ROW><ROW><id>13786562</id><snippet>check_call</snippet></ROW><ROW><id>13786562</id><snippet>import subprocess:

try:
    subprocess.check_output('/usr/sbin/snif')
except OSError:
    print 'That file does not exist'
except subprocess.CalledProcessError:
    print 'Bad exit code'
</snippet></ROW><ROW><id>13786572</id><snippet>'''
Created on Dec 9, 2012

@author: Daniel Ng
'''

import urllib

def fetch_structure(structureid, filetype='pdb'):
  download_url = 'http://www.rcsb.org/pdb/download/downloadFile.do?fileFormat=%s&amp;compression=NO&amp;structureId=%s'
  filetypes = ['pdb','cif','xml']
  if (filetype not in filetypes):
    print "Invalid filetype...", filetype
  else:
    try:
      urllib.urlretrieve(download_url % (filetype,structureid), '%s.%s' % (structureid,filetype))
    except Exception, e:
      print "Download failed...", e
    else:
      print "Saved to", '%s.%s' % (structureid,filetype)

if __name__ == "__main__":
  fetch_structure('1AW0')
  fetch_structure('1AW0', filetype='xml')
  fetch_structure('1AW0', filetype='png')
</snippet></ROW><ROW><id>13786572</id><snippet>Saved to 1AW0.pdb
Saved to 1AW0.xml
Invalid filetype... png
</snippet></ROW><ROW><id>13786572</id><snippet>1AW0.pdb</snippet></ROW><ROW><id>13786572</id><snippet>1AW0.xml</snippet></ROW><ROW><id>13786692</id><snippet>builder</snippet></ROW><ROW><id>13786692</id><snippet>builder</snippet></ROW><ROW><id>13786824</id><snippet>the_database</snippet></ROW><ROW><id>13786824</id><snippet>databaseuser</snippet></ROW><ROW><id>13786824</id><snippet>P@ssw0rd</snippet></ROW><ROW><id>13786824</id><snippet>psql</snippet></ROW><ROW><id>13786824</id><snippet>$ psql -d template1 -U postgres
template1=# CREATE USER databaseuser WITH PASSWORD 'P@ssw0rd';
template1=# CREATE DATABASE the_database;
template1=# GRANT ALL PRIVILEGES ON DATABASE the_database to databaseuser;
template1=# \q
</snippet></ROW><ROW><id>13786824</id><snippet>db_conn = 'postgresql+psycopg2://databaseuser:P@ssw0rd@localhost/the_database' 
app = Flask(__name__) 
app.config['SQLALCHEMY_DATABASE_URI'] = db_conn
db = SQLAlchemy(app)
</snippet></ROW><ROW><id>13786947</id><snippet>which fits2ndf</snippet></ROW><ROW><id>13786947</id><snippet>~$ which mv
/bin/mv
</snippet></ROW><ROW><id>13786947</id><snippet>import subprocess

subprocess.call(["/bin/mv","/tmp/a","/tmp/b"])
</snippet></ROW><ROW><id>13787036</id><snippet>%files</snippet></ROW><ROW><id>13787036</id><snippet>%files</snippet></ROW><ROW><id>13787036</id><snippet>make install</snippet></ROW><ROW><id>13787036</id><snippet>DESTDIR</snippet></ROW><ROW><id>13787036</id><snippet>/usr/lib/python/foo</snippet></ROW><ROW><id>13787036</id><snippet>~/rpmbuild/BUILD/usr/lib/python/foo</snippet></ROW><ROW><id>13787036</id><snippet>%files</snippet></ROW><ROW><id>13787036</id><snippet>%install</snippet></ROW><ROW><id>13787036</id><snippet>%files</snippet></ROW><ROW><id>13787036</id><snippet>%files</snippet></ROW><ROW><id>13787169</id><snippet>(?&lt;=(int\s)|(void\s)|(string\s)|(double\s)|(float\s)|(char\s)).*?(?=\s?\()</snippet></ROW><ROW><id>13787169</id><snippet>re.findall(r'(?&lt;=(?&lt;=int\s)|(?&lt;=void\s)|(?&lt;=string\s)|(?&lt;=double\s)|(?&lt;=float\s‌​)|(?&lt;=char\s)).*?(?=\s?\()', string)</snippet></ROW><ROW><id>13787487</id><snippet>import datetime
import matplotlib.pyplot as plt
import statsmodels.api as sm
import pandas
from pandas.io.data import DataReader

sp500 = DataReader("AGG", "yahoo", start=datetime.datetime(2000, 1, 1)) # returns a DataFrame
sp500["regression"] = sm.OLS(sp500["Adj Close"],
    sm.add_constant(range(len(sp500.index)),
    prepend=True)).fit().fittedvalues
</snippet></ROW><ROW><id>13787487</id><snippet>pandas.ewma</snippet></ROW><ROW><id>13787598</id><snippet>error: Unable to find vcvarsall.bat</snippet></ROW><ROW><id>13787633</id><snippet>.</snippet></ROW><ROW><id>13787633</id><snippet>[]</snippet></ROW><ROW><id>13787633</id><snippet>.</snippet></ROW><ROW><id>13787633</id><snippet>[.\n]</snippet></ROW><ROW><id>13787633</id><snippet>.</snippet></ROW><ROW><id>13787633</id><snippet>[\s\S]</snippet></ROW><ROW><id>13787633</id><snippet>.</snippet></ROW><ROW><id>13787633</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13787633</id><snippet>.</snippet></ROW><ROW><id>13787633</id><snippet>\n</snippet></ROW><ROW><id>13787664</id><snippet>fruits = {'apple' : {'color', apple_color, 'weight' : apple_weight}, 'banana' : {'color' : banana_color, 'weight' : banana_weight}, 'grapes' : {'color' : grapes_color, 'weight' : grapes_weigh}} 

or if you use your already defined variables like  : apple_color = 'red'

fruit_names = ['apple', 'banana', 'grapes']
fruits = {}
for each in fruit_names :
    fruits[each] = {}
    fruits[each]['color'] = globals()['%s_%s' %(each, 'color')]
    fruits[each]['weight'] = globals()['%s_%s' %(each, 'weight')]
</snippet></ROW><ROW><id>13787664</id><snippet>{% for each in fruits %}
    {{ fruits[each].color }}
    {{ fruits[each].weight }}
{% endfor %}

or :

{% for key, value in fruits.items() %} 
    {{ key }}
    {{ value.color }} 
    {{ value.weight }} 
{% endfor %}
</snippet></ROW><ROW><id>13787718</id><snippet>new_lst</snippet></ROW><ROW><id>13787718</id><snippet>new_lst</snippet></ROW><ROW><id>13787718</id><snippet>lst</snippet></ROW><ROW><id>13787718</id><snippet>lst</snippet></ROW><ROW><id>13787718</id><snippet>new_lst</snippet></ROW><ROW><id>13787718</id><snippet>tuple()</snippet></ROW><ROW><id>13787718</id><snippet>dict</snippet></ROW><ROW><id>13787718</id><snippet>cache</snippet></ROW><ROW><id>13787718</id><snippet>cache</snippet></ROW><ROW><id>13787759</id><snippet>%</snippet></ROW><ROW><id>13787759</id><snippet>''.format()</snippet></ROW><ROW><id>13787759</id><snippet>&gt;&gt;&gt; yournumber = 87.28197
&gt;&gt;&gt; "{0:.3f}".format(yournumber)
'87.282'
&gt;&gt;&gt; "%.3f" % yournumber
'87.282'
</snippet></ROW><ROW><id>13787759</id><snippet>format()</snippet></ROW><ROW><id>13787759</id><snippet>{0:..}</snippet></ROW><ROW><id>13787759</id><snippet>&gt;&gt;&gt; format(yournumber, '.3f')
'87.282'
</snippet></ROW><ROW><id>13787874</id><snippet>savefig</snippet></ROW><ROW><id>13787874</id><snippet>bbox_inches = 'tight'</snippet></ROW><ROW><id>13787945</id><snippet>from gi.repository import Gdk as gdk

screen = gdk.Screen.get_default()

css_provider = gtk.CssProvider()
css_provider.load_from_path('/path/to/file.css')

context = gtk.StyleContext()
context.add_provider_for_screen( screen,
                                 css_provider,
                                 gtk.STYLE_PROVIDER_PRIORITY_USER
                                 )
</snippet></ROW><ROW><id>13787945</id><snippet>/path/to/file.css</snippet></ROW><ROW><id>13787945</id><snippet>/* Set background on GtkLabel
* and other types inheriting from
* it
*/
GtkLabel {
  background-color: red;
  font-weight:bold;
}
</snippet></ROW><ROW><id>13788423</id><snippet>f = [[0 for _ in range(21)] for _ in range(21)] 
</snippet></ROW><ROW><id>13788423</id><snippet>id()</snippet></ROW><ROW><id>13788423</id><snippet>&gt;&gt;&gt; f = [[0]*21]*21
&gt;&gt;&gt; for nested in f[:3]:
...     print id(nested)
... 
4523317152
4523317152
4523317152
&gt;&gt;&gt; f = [[0 for _ in range(21)] for _ in range(21)] 
&gt;&gt;&gt; for nested in f[:3]:
...     print id(nested)
... 
4523317512
4523317440
4523317656
</snippet></ROW><ROW><id>13788423</id><snippet>id()</snippet></ROW><ROW><id>13788490</id><snippet>cross_product</snippet></ROW><ROW><id>13788490</id><snippet>template &lt;typename InputIt1,
          typename InputIt2,
          typename OutputIt,
          typename F&gt;
void cross_product(InputIt1 begin1,
                   InputIt1 end1,
                   InputIt2 begin2,
                   InputIt2 end2,
                   OutputIt out,
                   F f) {
    for (auto i = begin1; i != end1; ++i)
        for (auto j = begin2; j != end2; ++j)
            *out++ = f(*i, *j);
}
</snippet></ROW><ROW><id>13788490</id><snippet>auto digits = "1234546789";
auto chars = "ABCDEFGHI";
vector&lt;string&gt; result;

cross_product(digits, digits + strlen(digits),
              chars, chars + strlen(chars),
              back_inserter(result),
              [](char a, char b) { return string() + a + b; });
</snippet></ROW><ROW><id>13788490</id><snippet>f</snippet></ROW><ROW><id>13788493</id><snippet>.vimrc</snippet></ROW><ROW><id>13788493</id><snippet>au BufNewFile *.py 0r /where/you/saved/your/header.template
</snippet></ROW><ROW><id>13788493</id><snippet>.py</snippet></ROW><ROW><id>13788571</id><snippet>request.build_absolute_uri()</snippet></ROW><ROW><id>13788571</id><snippet>redirect_uri</snippet></ROW><ROW><id>13788571</id><snippet>build_absolute_uri()</snippet></ROW><ROW><id>13788571</id><snippet>get_host()</snippet></ROW><ROW><id>13788571</id><snippet>HTTP_X_FORWARDED_HOST</snippet></ROW><ROW><id>13788571</id><snippet>HTTP_HOST</snippet></ROW><ROW><id>13788571</id><snippet>SERVER_NAME</snippet></ROW><ROW><id>13788571</id><snippet>proxy_set_header</snippet></ROW><ROW><id>13788703</id><snippet>heapq</snippet></ROW><ROW><id>13788703</id><snippet>heapify</snippet></ROW><ROW><id>13788703</id><snippet>heappush</snippet></ROW><ROW><id>13788703</id><snippet>heappop</snippet></ROW><ROW><id>13788703</id><snippet>heapq.nsmallest</snippet></ROW><ROW><id>13788703</id><snippet>nlargest</snippet></ROW><ROW><id>13788703</id><snippet>nlargest</snippet></ROW><ROW><id>13788703</id><snippet>def nlargest(n, l):
    # make a heap of the first n elements
    heap = l[:n]
    heapify(heap)

    # loop over the other len(l)-n elements of l
    for i in xrange(n, len(l)):
        # push the current element onto the heap, so its size becomes n+1
        heappush(heap, l[i])
        # pop the smallest element off, so that the heap will contain
        # the largest n elements of l seen so far
        heappop(heap)

    return sorted(heap, reverse=True)
</snippet></ROW><ROW><id>13788703</id><snippet>l</snippet></ROW><ROW><id>13788703</id><snippet>heapify</snippet></ROW><ROW><id>13788703</id><snippet>heappop</snippet></ROW><ROW><id>13788703</id><snippet>heappush</snippet></ROW><ROW><id>13788703</id><snippet>sorted(l)[:n]</snippet></ROW><ROW><id>13789001</id><snippet>import re
print dict(re.findall('TEXTSTART\[([^\]]+)\](.*?)TEXTEND', report, re.DOTALL))
</snippet></ROW><ROW><id>13789189</id><snippet>imgnumber</snippet></ROW><ROW><id>13789189</id><snippet>self.imgnumber</snippet></ROW><ROW><id>13789189</id><snippet>self.imgnumber</snippet></ROW><ROW><id>13789309</id><snippet>os.path.expandvars()</snippet></ROW><ROW><id>13789309</id><snippet>with open(os.path.expandvars(path), "r") as f:
    ...
</snippet></ROW><ROW><id>13789309</id><snippet>with</snippet></ROW><ROW><id>13789406</id><snippet>ps auxw | grep httpd | awk '{print"-p " $2}' | xargs strace
</snippet></ROW><ROW><id>13789409</id><snippet>width</snippet></ROW><ROW><id>13789409</id><snippet>distance</snippet></ROW><ROW><id>13789409</id><snippet>:</snippet></ROW><ROW><id>13789409</id><snippet>import re
import csv

lineformat = re.compile(
    r'^(?P&lt;count&gt;\d+)[\s:]*'
    r'test[\s:]*(?P&lt;test&gt;\d+)[\s:]*'
    r'width[\s:]*(?P&lt;width&gt;\d+)[\s:]*'
    r'distance[\s:]*(?P&lt;distance&gt;\d+)[\s:]*'
    r'time[\s:]*(?P&lt;time&gt;\d+)[\s:]*'
    r'x[\s:]*(?P&lt;x&gt;\d+\.\d+)[\s:]*'
    r'y[\s:]*(?P&lt;y&gt;\d+\.\d+)[\s:]*'
    r'target[\s:]*(?P&lt;target&gt;\d+-\d+)[\s:]*'
)
fields = ('count', 'test', 'width', 'distance', 'time', 'x', 'y', 'target')

with open(inputfile) as finput, open(outputfile) as foutput:
    csvout = csv.DictWriter(foutput, fields=fields)
    for line in finput:
        match = lineformat.search(line)
        if match is not None:
            csvout.writerow(match.groupdict())
</snippet></ROW><ROW><id>13789409</id><snippet>fields</snippet></ROW><ROW><id>13789420</id><snippet>point.connect()</snippet></ROW><ROW><id>13789420</id><snippet>lineReceived</snippet></ROW><ROW><id>13789420</id><snippet>endpoint.listen</snippet></ROW><ROW><id>13789420</id><snippet>point.connect</snippet></ROW><ROW><id>13789689</id><snippet>LOG_FILENAME = 'log_trial_%s.txt' % datetime.datetime.now().strftime('%m%d-%H%M%S')
</snippet></ROW><ROW><id>13790124</id><snippet>ndb</snippet></ROW><ROW><id>13790124</id><snippet>new_key = ndb.Key(urlsafe=string_value_of_key)
</snippet></ROW><ROW><id>13790124</id><snippet>__app</snippet></ROW><ROW><id>13790124</id><snippet>_Key__app</snippet></ROW><ROW><id>13790124</id><snippet>new_key._Key__app = 'new-app-id'
</snippet></ROW><ROW><id>13790124</id><snippet>db</snippet></ROW><ROW><id>13790124</id><snippet>old_key = db.Key(encoded=string_value_of_key)
</snippet></ROW><ROW><id>13790124</id><snippet>new_key = db.Key.from_path(*old_key.to_path(), 
                           _app='new-app-id',
                           parent=old_key.parent(), 
                           namespace=old_key.namespace())
</snippet></ROW><ROW><id>13790354</id><snippet>def make_duplicate_request(request):
    """
    Since werkzeug request objects are immutable, this is needed to create an
    identical request object with mutable values
    """
    class Req(object):
        method = 'GET'
        path = ''
        headers = []
        args = []
    r = Req()
    r.path = request.path
    r.headers = request.headers
    r.is_xhr = request.is_xhr
    r.args = request.args
    return r
</snippet></ROW><ROW><id>13790484</id><snippet>import time

device1 = '04/12/2012 14:17'
device2 = '14:16:13'
device3 = '134941'

time1 = time.strptime(device1, '%m/%d/%Y %H:%M')
time2 = time.strptime(device2, '%H:%M:%S')
time3 = time.strptime(device3, '%H%M%S')
</snippet></ROW><ROW><id>13790484</id><snippet>time2 = time.strptime('04/12/2012 ' + device2, '%m/%d/%Y %H:%M:%S')
</snippet></ROW><ROW><id>13790494</id><snippet>nose.run(argv=['me.py', '-V'])
</snippet></ROW><ROW><id>13790567</id><snippet>is</snippet></ROW><ROW><id>13790567</id><snippet>&gt;&gt;&gt; a = 12
&gt;&gt;&gt; a is a
True
</snippet></ROW><ROW><id>13790574</id><snippet>latest = max(keys)</snippet></ROW><ROW><id>13790574</id><snippet>latest.get_contents_to_filename(&lt;file_name&gt;)
</snippet></ROW><ROW><id>13790574</id><snippet>latest.get_contents_to_file(&lt;file&gt;)
</snippet></ROW><ROW><id>13790579</id><snippet>find . -type f -exec egrep -Hn 'function\(.*(\$string|\$_string).*\)' '{}' ';'
</snippet></ROW><ROW><id>13790579</id><snippet>man 3 regex</snippet></ROW><ROW><id>13790579</id><snippet>.            any character, in shell (sh/csh) this is '?'
.*           zero or more any characters
a*           zero or more a's
(alpha|beta) groups, either alpha or beta
^            beginning of string
$            end of string, that's why it needs to be escaped
</snippet></ROW><ROW><id>13790867</id><snippet>while</snippet></ROW><ROW><id>13790867</id><snippet>decision = "no"
while decision.lower() == "no":
    example = input("Blah blah blah: ")
    if 10 &lt; example &lt;= 20:
        decision = raw_input("Are you sure this is your answer?: ")
</snippet></ROW><ROW><id>13790867</id><snippet>decision.lower() == "no"</snippet></ROW><ROW><id>13790867</id><snippet>if example &lt;= 20 and &gt; 10:</snippet></ROW><ROW><id>13790867</id><snippet>if example &lt;= 20 and example &gt; 10:</snippet></ROW><ROW><id>13790867</id><snippet>10 &lt; example &lt;= 20</snippet></ROW><ROW><id>13791187</id><snippet>igraph_arpack.h</snippet></ROW><ROW><id>13791187</id><snippet>gcc</snippet></ROW><ROW><id>13791187</id><snippet>setup.py</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>make install</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config --cflags --libs igraph</snippet></ROW><ROW><id>13791187</id><snippet>python setup.py install</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>pkg-config</snippet></ROW><ROW><id>13791187</id><snippet>setup.cfg</snippet></ROW><ROW><id>13791187</id><snippet>include_dirs</snippet></ROW><ROW><id>13791187</id><snippet>library_dirs</snippet></ROW><ROW><id>13791187</id><snippet>/usr/local/include/igraph</snippet></ROW><ROW><id>13791187</id><snippet>/usr/include/igraph</snippet></ROW><ROW><id>13791187</id><snippet>libigraph.so</snippet></ROW><ROW><id>13791304</id><snippet>easy_install</snippet></ROW><ROW><id>13791304</id><snippet>/env/lib/python2.7/site-packages/South-0.7.6-py2.7.egg
</snippet></ROW><ROW><id>13791304</id><snippet>south</snippet></ROW><ROW><id>13791304</id><snippet>south</snippet></ROW><ROW><id>13791304</id><snippet>site-packages</snippet></ROW><ROW><id>13791387</id><snippet>for i in range(len(letters))</snippet></ROW><ROW><id>13791387</id><snippet>letters[0]</snippet></ROW><ROW><id>13791387</id><snippet>letters[1]</snippet></ROW><ROW><id>13791387</id><snippet>letters[len(letters)-1]</snippet></ROW><ROW><id>13791387</id><snippet>&gt;&gt;&gt; [letters[i] for i in range(len(letters))]
['d', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']
</snippet></ROW><ROW><id>13791387</id><snippet>&gt;&gt;&gt; [(i*i-1) for i in range(len(letters))]
[-1, 0, 3, 8, 15, 24, 35, 48, 63, 80, 99, 120]
</snippet></ROW><ROW><id>13791596</id><snippet>r'(?:\w+\W+){2}find(?:\W+\w+){2}'
</snippet></ROW><ROW><id>13791596</id><snippet>\w</snippet></ROW><ROW><id>13791596</id><snippet>\W</snippet></ROW><ROW><id>13791596</id><snippet>re.search</snippet></ROW><ROW><id>13791596</id><snippet>re.findall</snippet></ROW><ROW><id>13791596</id><snippet>r'(?:\w+\W+){0,2}find(?:\W+\w+){0,2}'
</snippet></ROW><ROW><id>13791596</id><snippet>find</snippet></ROW><ROW><id>13791596</id><snippet>n</snippet></ROW><ROW><id>13791596</id><snippet>find</snippet></ROW><ROW><id>13791596</id><snippet>find</snippet></ROW><ROW><id>13791596</id><snippet>n</snippet></ROW><ROW><id>13791596</id><snippet>find</snippet></ROW><ROW><id>13791596</id><snippet>r'(?:\S+\s+){0,2}find(?:\s+\S+){0,2}'
</snippet></ROW><ROW><id>13791615</id><snippet>for p1 in range(len(a)-1):
</snippet></ROW><ROW><id>13791615</id><snippet>range(len(a))</snippet></ROW><ROW><id>13791615</id><snippet>xrange</snippet></ROW><ROW><id>13791615</id><snippet>[-12,10]</snippet></ROW><ROW><id>13791615</id><snippet>def find_crossing_max(a, l, r, m):

    # left side
    # ls_r and ls_l indicate the right and left bound of the left subarray.
    # l_max_sum indicates the max sum of the left subarray
    # sub_sum indicates the sum of the current computing subarray      
    ls_l = 0
    ls_r = m-1
    l_max_sum = None
    sub_sum = 0
    for j in range(m+1)[::-1]:      # adding elements from right to left
</snippet></ROW><ROW><id>13791615</id><snippet>l</snippet></ROW><ROW><id>13791615</id><snippet>range</snippet></ROW><ROW><id>13791615</id><snippet>xrange(m,l-1,-1)</snippet></ROW><ROW><id>13791615</id><snippet>        sub_sum += a[j]
        if sub_sum &gt; l_max_sum:
            l_max_sum = sub_sum
            ls_l = j
</snippet></ROW><ROW><id>13791615</id><snippet>r</snippet></ROW><ROW><id>13791615</id><snippet>xrange(m+1,r+1)</snippet></ROW><ROW><id>13791615</id><snippet>a[m]</snippet></ROW><ROW><id>13791615</id><snippet>l_max_sum = None</snippet></ROW><ROW><id>13791615</id><snippet>l_max_sum = a[m]</snippet></ROW><ROW><id>13791615</id><snippet>j</snippet></ROW><ROW><id>13791615</id><snippet>m</snippet></ROW><ROW><id>13791615</id><snippet>ls_l</snippet></ROW><ROW><id>13791615</id><snippet>0</snippet></ROW><ROW><id>13791615</id><snippet>ls_r</snippet></ROW><ROW><id>13791615</id><snippet>m-1</snippet></ROW><ROW><id>13791615</id><snippet>ls_r</snippet></ROW><ROW><id>13791615</id><snippet>m</snippet></ROW><ROW><id>13791615</id><snippet>ls_l</snippet></ROW><ROW><id>13791615</id><snippet>m+1</snippet></ROW><ROW><id>13791615</id><snippet>l_max_sum</snippet></ROW><ROW><id>13791615</id><snippet>None</snippet></ROW><ROW><id>13791615</id><snippet>m</snippet></ROW><ROW><id>13791615</id><snippet>l_max_sum</snippet></ROW><ROW><id>13791615</id><snippet>a[m]</snippet></ROW><ROW><id>13791615</id><snippet>r_max_sum</snippet></ROW><ROW><id>13791615</id><snippet>rs_r</snippet></ROW><ROW><id>13791615</id><snippet>m</snippet></ROW><ROW><id>13791615</id><snippet>0</snippet></ROW><ROW><id>13791615</id><snippet>recursion</snippet></ROW><ROW><id>13791615</id><snippet>left = recursion(a,l,m)         # T(n/2)
</snippet></ROW><ROW><id>13791615</id><snippet>a[m]</snippet></ROW><ROW><id>13791615</id><snippet>find_crossing_max</snippet></ROW><ROW><id>13791615</id><snippet>left = recursion(a,l,m-1)
</snippet></ROW><ROW><id>13791615</id><snippet>r &lt; l</snippet></ROW><ROW><id>13791615</id><snippet>recursion</snippet></ROW><ROW><id>13791615</id><snippet>find_crossing_max</snippet></ROW><ROW><id>13791615</id><snippet>O(n)</snippet></ROW><ROW><id>13791615</id><snippet>O(n²)</snippet></ROW><ROW><id>13791615</id><snippet>find_crossing_max</snippet></ROW><ROW><id>13791615</id><snippet>[l,r]</snippet></ROW><ROW><id>13791615</id><snippet>2^k</snippet></ROW><ROW><id>13791615</id><snippet>n/2^k</snippet></ROW><ROW><id>13791615</id><snippet>0 &lt;= k &lt;= log_2 n</snippet></ROW><ROW><id>13791615</id><snippet>O(n*log n)</snippet></ROW><ROW><id>13791615</id><snippet>def find_maximum_subarray_bf(a):        #bf for brute force
    p1 = 0
    l = 0           # l for left
    r = 0           # r for right
    max_sum = 0
    for p1 in xrange(len(a)):
        sub_sum = 0
        for p2 in xrange(p1, len(a)):
            sub_sum += a[p2]
            if sub_sum &gt; max_sum:
                max_sum  = sub_sum
                l = p1
                r = p2
    return l, r, max_sum

def find_maximum_subarray_dc(a):        #dc for divide and conquer

    # subfunction
    # given an arrary and three indices which can split the array into a[l:m]
    # and a[m+1:r], find out a subarray a[i:j] where l \leq i \less m \less j \leq r".
    # according to the definition above, the target subarray must
    # be combined by two subarray, a[i:m] and a[m+1:j]
    # Growing Rate: theta(n)

    def find_crossing_max(a, l, r, m):

        # left side
        # ls_r and ls_l indicate the right and left bound of the left subarray.
        # l_max_sum indicates the max sum of the left subarray
        # sub_sum indicates the sum of the current computing subarray      
        ls_l = m+1
        ls_r = m
        l_max_sum = None
        sub_sum = 0
        for j in xrange(m,l-1,-1):      # adding elements from right to left
            sub_sum += a[j]
            if sub_sum &gt; l_max_sum:
                l_max_sum = sub_sum
                ls_l = j

        # right side
        # rs_r and rs_l indicate the right and left bound of the left subarray.
        # r_max_sum indicates the max sum of the left subarray
        # sub_sum indicates the sum of the current computing subarray                
        rs_l = m+1
        rs_r = m
        r_max_sum = 0
        sub_sum = 0
        for j in range(m+1,r+1):
            sub_sum += a[j]
            if sub_sum &gt; r_max_sum:
                r_max_sum = sub_sum
                rs_r = j

        #combine
        return (ls_l, rs_r, l_max_sum+r_max_sum)

    # subfunction
    # Growing Rate:  theta(nlgn)
    def recursion(a,l,r):           # T(n)
        if r == l:
            return (l,r,a[l])
        else:
            m = (l+r)//2                    # theta(1)
            left = recursion(a,l,m)         # T(n/2)
            right = recursion(a,m+1,r)      # T(n/2)
            crossing = find_crossing_max(a,l,r,m)   # theta(r-l+1)

            if left[2]&gt;=right[2] and left[2]&gt;=crossing[2]:
                return left
            elif right[2]&gt;=left[2] and right[2]&gt;=crossing[2]:
                return right
            else:
                return crossing

    #back to master function
    l = 0
    r = len(a)-1
    return recursion(a,l,r)

if __name__ == "__main__":

    from time import time
    from sys import argv
    from random import randint
    alen = 100
    if len(argv) &gt; 1:
        alen = int(argv[1])
    a = [randint(-100,100) for i in xrange(alen)]

    time0 = time()
    print find_maximum_subarray_bf(a)
    time1 = time()
    print find_maximum_subarray_dc(a)
    time2 = time()
    print "function 1:", time1-time0
    print "function 2:", time2-time1 
    print "ratio:", (time1-time0)/(time2-time1)
</snippet></ROW><ROW><id>13791615</id><snippet>$ python subarrays.py 50
(3, 48, 1131)
(3, 48, 1131)
function 1: 0.000184059143066
function 2: 0.00020382
ratio: 0.902923976608
$ python subarrays.py 100
(29, 61, 429)
(29, 61, 429)
function 1: 0.000745058059692
function 2: 0.000561952590942
ratio: 1.32583792957
$ python subarrays.py 500
(35, 350, 3049)
(35, 350, 3049)
function 1: 0.0115859508514
function 2: 0.00170588493347
ratio: 6.79175401817
$ python subarrays.py 1000
(313, 572, 3585)
(313, 572, 3585)
function 1: 0.0537149906158
function 2: 0.00334000587463
ratio: 16.082304233
$ python osubarrays.py 10000
(901, 2055, 4441)
(901, 2055, 4441)
function 1: 4.20316505432
function 2: 0.0381460189819
ratio: 110.186204655
</snippet></ROW><ROW><id>13791700</id><snippet>lxml.html</snippet></ROW><ROW><id>13791700</id><snippet>sub_root.xpath('//player_settings[@name="FLVPath"]/@value')
</snippet></ROW><ROW><id>13791700</id><snippet>lxml.etree</snippet></ROW><ROW><id>13791746</id><snippet>converted_image = image.convert_alpha()
</snippet></ROW><ROW><id>13791802</id><snippet>.flush()</snippet></ROW><ROW><id>13791802</id><snippet>__init__</snippet></ROW><ROW><id>13791802</id><snippet>User</snippet></ROW><ROW><id>13791802</id><snippet>class User(Base):
    __tablename__ = 'users'

    def __init__(self, **kwargs):
        if 'money' not in kwargs:
             kwargs['money'] = self.__table__.c.money.default.arg
        super(User, self).__init__(**kwargs)

    id = Column(Integer, primary_key=True)
    money = Column(Integer, default=100)
</snippet></ROW><ROW><id>13791802</id><snippet>money</snippet></ROW><ROW><id>13792005</id><snippet>from django.conf.urls import patterns, url
urlpatterns = patterns('',
    #...
    url(r'^article/(\d+)/$', 'news.views.article', name='article_by_id'),
    #...
)
</snippet></ROW><ROW><id>13792005</id><snippet>&lt;ul&gt;
{% for article in articles %}
&lt;li&gt;&lt;a href="{% url article_by_id article.pk %}"&gt;Article {{article.name}} &lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>13792230</id><snippet>p = {node:length for node, length in nx.single_source_shortest_path_length(G,ncenter).items()
     if length &lt; 5}
</snippet></ROW><ROW><id>13792230</id><snippet>ncenter</snippet></ROW><ROW><id>13792230</id><snippet>p = dict((node, length) for node, length in nx.single_source_shortest_path_length(G,ncenter).items()
     if length &lt; 5)
</snippet></ROW><ROW><id>13792230</id><snippet>dmin =1
ncenter =0
for n in pos:
    x,y = pos[n]
    d = (x-0.5)**2+(y-0.5)**2
    if d&lt;dmin:
        ncenter = n
        dmin = d
</snippet></ROW><ROW><id>13792230</id><snippet>ncenter, _ = min(pos.items(), key = lambda (node, (x,y)): (x-0.5)**2+(y-0.5)**2)
</snippet></ROW><ROW><id>13792230</id><snippet>ncenter</snippet></ROW><ROW><id>13792230</id><snippet>H = G.subgraph(p.keys())    
nx.draw_networkx_edges(H, pos, alpha = 0.4)
nx.draw_networkx_nodes(H, pos, node_size = 80, node_color = node_color,
                       cmap = plt.get_cmap('Reds_r'))
</snippet></ROW><ROW><id>13792230</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
G = nx.random_geometric_graph(1000, 0.1)

# position is stored as node attribute data for random_geometric_graph
pos = nx.get_node_attributes(G, 'pos')

# find node near center (0.5,0.5)
ncenter, _ = min(pos.items(), key = lambda (node, (x, y)): (x-0.5)**2+(y-0.5)**2)

# color by path length from node near center
p = {node:length
     for node, length in nx.single_source_shortest_path_length(G, ncenter).items()
     if length &lt; 5}

plt.figure(figsize = (8, 8))
node_color = p.values()
H = G.subgraph(p.keys())    
nx.draw_networkx_edges(H, pos, alpha = 0.4)
nx.draw_networkx_nodes(H, pos, node_size = 80, node_color = node_color,
                       cmap = plt.get_cmap('Reds_r'))

plt.xlim(-0.05, 1.05)
plt.ylim(-0.05, 1.05)
plt.axis('off')
plt.savefig('random_geometric_graph.png')
plt.show()
</snippet></ROW><ROW><id>13792250</id><snippet>print</snippet></ROW><ROW><id>13792250</id><snippet>print A, B, C</snippet></ROW><ROW><id>13792250</id><snippet>print A, # note, the trailing comma suppresses the newline
print B,
print C
</snippet></ROW><ROW><id>13792250</id><snippet>print</snippet></ROW><ROW><id>13792250</id><snippet>print</snippet></ROW><ROW><id>13792250</id><snippet>print</snippet></ROW><ROW><id>13792250</id><snippet>future</snippet></ROW><ROW><id>13792250</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>13792463</id><snippet>ps aux |grep Running Demo | awk '{print $3 $4}'</snippet></ROW><ROW><id>13792463</id><snippet>ps auxw | awk '/Running Demo/{print $3 $4}'</snippet></ROW><ROW><id>13792463</id><snippet>gnuplot</snippet></ROW><ROW><id>13792577</id><snippet>&gt;&gt;&gt; l = ['0b0', '0b0', '0b0', '0b0', '0b0', '0b0', '0b100', '0b1001100']
&gt;&gt;&gt; int("".join("%02x" % int(x,0) for x in l), 16)
1100
</snippet></ROW><ROW><id>13792577</id><snippet>0b0101</snippet></ROW><ROW><id>13792577</id><snippet>int('0b0101', 0)</snippet></ROW><ROW><id>13792579</id><snippet>ValueError: invalid literal for int() with base 10
</snippet></ROW><ROW><id>13792579</id><snippet>int()</snippet></ROW><ROW><id>13792579</id><snippet>price</snippet></ROW><ROW><id>13792579</id><snippet>def input_int(prompt):
    while True:
        data = input(prompt)
        try:
            return int(data)
        except ValueError:
            print("That's not a valid number. Try again.")
</snippet></ROW><ROW><id>13792615</id><snippet>x == y == z
x == y and y == z
</snippet></ROW><ROW><id>13792615</id><snippet>0 &lt; x &lt; 10
10 &gt;= z &gt;= 2
</snippet></ROW><ROW><id>13792615</id><snippet>a &lt; b == c is d   # Don't  do this
</snippet></ROW><ROW><id>13792615</id><snippet>a &lt; 100 is True   # Definitely don't do this!
</snippet></ROW><ROW><id>13792615</id><snippet>a &lt; 100 and 100 is True   # Now we see the violence inherent in the system!
</snippet></ROW><ROW><id>13792761</id><snippet>added</snippet></ROW><ROW><id>13792761</id><snippet>incident</snippet></ROW><ROW><id>13792761</id><snippet>incident</snippet></ROW><ROW><id>13792761</id><snippet>print(incident)
# [u'NORFINCH DR, NY', u'FINCH AVE W / HEPC', u'2012-12-09 17:32:57', u'F12118758', u'Medical - Other', u'0', u'142', u'\r\nP142, \r\n\r\n', '2012-12-09 17:46']
</snippet></ROW><ROW><id>13792761</id><snippet>incident</snippet></ROW><ROW><id>13792761</id><snippet>cursor.execute</snippet></ROW><ROW><id>13792761</id><snippet>u'\r\nP142, \r\n\r\n'</snippet></ROW><ROW><id>13792761</id><snippet>    to_db = [i.strip() for i in incident]
</snippet></ROW><ROW><id>13792761</id><snippet>for incident in incidents[1:num_inci]:
    incident.append(added)
    to_db = [i.strip() for i in incident]
    import ipdb; ipdb.set_trace()
    cursor.execute(
        """INSERT INTO incidents
           (prime_street, cross_street, dispatch_time, incident_number,
            incident_type, alarm_level, area, dispatched_units, date_added)
           VALUES (?,?,?,?,?,?,?,?,?)""", to_db)
    lid = cursor.lastrowid
</snippet></ROW><ROW><id>13792809</id><snippet>&gt;0</snippet></ROW><ROW><id>13792809</id><snippet>        for x in range(7):
            sales=-1
            while (sales&lt;0):
                sales = float(input("Sales for day {0}".format(x)))
                mylist[x] = sales
                if  sales &lt; 0:
                    print ("Sorry,invalid. Try again.")
</snippet></ROW><ROW><id>13792809</id><snippet>best = max(my_list)
worst = min(my_list)
</snippet></ROW><ROW><id>13792864</id><snippet>import re
import httplib

hcr = httplib.HTTPConnection(host='pastebin.com')
hcr.request('GET','/gma5qh0j')
text = hcr.getresponse().read()

regx = re.compile('\$i *= *(\d+); *\$imgExt\[\$i\] *= *"(.+?)&amp;quot')
imageFormatIndex = dict(regx.findall(text))

print imageFormatIndex
</snippet></ROW><ROW><id>13792864</id><snippet>{'20': 'bmp', '22': 'mov', '23': 'avi', '1': 'pic', '0': 'gif', '3': 'tif', '2': 'rla', '5': 'sgi', '4': 'tif', '7': 'iff', '6': 'als', '9': 'eps', '8': 'jpeg', '11': 'cin', '10': 'iff', '13': 'sgi', '12': 'yuv', '19': 'tga', '32': 'png', '31': 'psd', '30': 'pntg', '36': 'psd', '35': 'dds', '34': 'qtif', '33': 'pict'}
</snippet></ROW><ROW><id>13792878</id><snippet>scipy.stat</snippet></ROW><ROW><id>13792878</id><snippet>nanmean</snippet></ROW><ROW><id>13792878</id><snippet>import numpy as np
from scipy.stats import nanmean
s = np.array([[1.0, 2.0, 3.0], [5.0, np.nan, 7.0], [np.nan, 4.0, 2.0]])

In [4]: nanmean(s)
Out[4]: array([ 3.,  3.,  4.])
</snippet></ROW><ROW><id>13792878</id><snippet>bottleneck</snippet></ROW><ROW><id>13792878</id><snippet>nanmean</snippet></ROW><ROW><id>13792897</id><snippet>numpy.cos</snippet></ROW><ROW><id>13792897</id><snippet>math.cos</snippet></ROW><ROW><id>13792897</id><snippet>import numpy

def CosineMap(a,x):
    return a*numpy.cos(x/(2.*pi))
</snippet></ROW><ROW><id>13792897</id><snippet>from X import *</snippet></ROW><ROW><id>13792897</id><snippet>TentMap</snippet></ROW><ROW><id>13792897</id><snippet>def TentMap(a,x):
    return 2.*a*numpy.minimum(x, 1.-x)
</snippet></ROW><ROW><id>13792984</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>13792984</id><snippet>csv</snippet></ROW><ROW><id>13793112</id><snippet>thing = soup.find(id="start_dateid")
if thing:
  for option in thing.find_all('option'):
    # potato potato potato
</snippet></ROW><ROW><id>13793193</id><snippet>class AjaxPickerWidget(HiddenInput):
  search_text_suffix = "_picker_text"

  def __init__(self, **kwargs):
    super(AjaxPickerWidget, self).__init__(**kwargs)
    self.search_text = None

  def render(self, name, value, attrs=None):
    start = '&lt;div name="%s" class="ajax_picker"&gt;' % (name) + \
             '&lt;input class="search_box" name="%s%s" ' % (name, self.search_text_suffix)+ \
             'type="text" value="%s" /&gt;' % (self.search_text or "")
    end = super(AjaxPickerWidget, self).render(name, value, attrs=attrs) + '&lt;/div&gt;'
    return '%s%s' % (start, end)

class MyForm(Form):
  requestor = CharField(widget = AjaxPickerWidget())

  def __init__(self, *args, **kwargs):
    super(MyForm, self).__init__(*args, **kwargs)
    # find picker text in POST data and tell the corresponding widget about it
    for name in self.data:
      if name.endswith(AjaxPickerWidget.search_text_suffix):
        field_name = name.split(AjaxPickerWidget.search_text_suffix)[0]
        self.fields[field_name].widget.search_text = self.data[name]
</snippet></ROW><ROW><id>13793282</id><snippet>startDetached()</snippet></ROW><ROW><id>13793282</id><snippet>finished</snippet></ROW><ROW><id>13793302</id><snippet>self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)</snippet></ROW><ROW><id>13793302</id><snippet>import wx

class MainPanel(wx.Panel):
    def __init__(self, parent, bg_img='Logo4x3.png'):
        wx.Panel.__init__(self, parent=parent)
        self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
        self.bg = wx.Bitmap(bg_img)
        self._width, self._height = self.bg.GetSize()

        sizer = wx.BoxSizer(wx.VERTICAL)
        hSizer = wx.BoxSizer(wx.HORIZONTAL)

        for num in range(4):
            btn = wx.Button(self, label="Button %s" % num)
            sizer.Add(btn, 0, wx.ALL, 5)
        hSizer.Add((1,1), 1, wx.EXPAND)
        hSizer.Add(sizer, 0, wx.TOP, 100)
        hSizer.Add((1,1), 0, wx.ALL, 75)
        self.SetSizer(hSizer)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)

    def OnSize(self, size):
        self.Layout()
        self.Refresh()

    def OnEraseBackground(self, evt):
        pass

    def OnPaint(self, evt):
        dc = wx.BufferedPaintDC(self)
        self.Draw(dc)

    def Draw(self, dc):
        cliWidth, cliHeight = self.GetClientSize()
        if not cliWidth or not cliHeight:
            return
        dc.Clear()
        xPos = (cliWidth - self._width)/2
        yPos = (cliHeight - self._height)/2
        dc.DrawBitmap(self.bg, xPos, yPos)

app = wx.App()
frame = wx.Frame(None, size=(400,300))
panel = MainPanel(frame)
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>13793302</id><snippet>OnEraseBackground</snippet></ROW><ROW><id>13793305</id><snippet>csv</snippet></ROW><ROW><id>13793305</id><snippet>.csv</snippet></ROW><ROW><id>13793306</id><snippet>try .. except</snippet></ROW><ROW><id>13793306</id><snippet>def get_float(prompt):
    while True: 
        try:
            return float(input(prompt))
        except ValueError:
            print "invalid input, try again!"
</snippet></ROW><ROW><id>13793333</id><snippet>while True:</snippet></ROW><ROW><id>13793333</id><snippet>ThreadingTCPServer</snippet></ROW><ROW><id>13793333</id><snippet>SocketServer</snippet></ROW><ROW><id>13793441</id><snippet>SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' and table_name=%s LIMIT 1
</snippet></ROW><ROW><id>13793448</id><snippet>message = (chr(19) +
           "BitTorrent Protocol" +
           8 * chr(0) +               # &lt;--- here
           self.getInfoHash(torrentCont) +
           self.peer_id)

# in case of doubt...
assert len(self.getInfoHash(torrentCont)) == 20
assert len(self.peer_id) == 20
</snippet></ROW><ROW><id>13793482</id><snippet># config.py

database = {
  'username': 'production_username',
  'password': 'production_password'
}

try:
  from local_config import *
catch ImportError:
  pass





# local_config.py
 database = {
  'username': 'your_username',
  'password': 'your_password'
}

from config import *
engine = create_engine('postgresql+pg8000://{0}@localhost/helloworld'.format(database['username']))
</snippet></ROW><ROW><id>13793602</id><snippet>WSGI</snippet></ROW><ROW><id>13793602</id><snippet>Apache</snippet></ROW><ROW><id>13793602</id><snippet>mod_wsgi</snippet></ROW><ROW><id>13793602</id><snippet>WSGI</snippet></ROW><ROW><id>13793602</id><snippet>.htaccess</snippet></ROW><ROW><id>13793740</id><snippet>import os, sys

def main():
    HEADER = '''# Author: Rob
# Company: MadeupOne
# Copyright Owner: Rob
'''

    filelist = []
    for path, dir, files in os.walk(sys.argv[1]):
        for file in files:
            if file.endswith('.py'):
                filelist.append(path + os.sep + file)

        for filename in filelist:
            try:
                inbuffer = open(filename, 'U').readlines()
                outbuffer = [HEADER] + inbuffer

                open(filename, 'wb').writelines(outbuffer)
            except IOError:
                print 'Please check the files, there was an error when trying to open %s...' % filename
            except:
                print 'Unexpected error ocurred while processing files...'

if __name__ == '__main__': main()
</snippet></ROW><ROW><id>13793757</id><snippet>&gt;&gt;&gt; class Room(object):
...     def __init__(self, x, y):
...         self.x = x
...         self.y = y
...         
&gt;&gt;&gt; rooms = {}
&gt;&gt;&gt; names = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; locations = [[1,1], [1,2], [2,1], [2,2]]
&gt;&gt;&gt; for name, loc in zip(names, locations):
...     rooms[name] = Room(*loc)
...     
&gt;&gt;&gt; rooms
{'a': &lt;__main__.Room object at 0x8a0030c&gt;, 'c': &lt;__main__.Room object at 0x89b01cc&gt;, 'b': &lt;__main__.Room object at 0x89b074c&gt;, 'd': &lt;__main__.Room object at 0x89b02ec&gt;}
&gt;&gt;&gt; rooms['c']
&lt;__main__.Room object at 0x89b01cc&gt;
&gt;&gt;&gt; rooms['c'].x
2
&gt;&gt;&gt; rooms['c'].y
1
</snippet></ROW><ROW><id>13793757</id><snippet>&gt;&gt;&gt; for roomname, room in rooms.items():
...     print roomname, room.x, room.y
...     
a 1 1
c 2 1
b 1 2
d 2 2
</snippet></ROW><ROW><id>13793829</id><snippet>def divide(arr, depth, m):
    if len(complements) &lt;= depth:
        complements.append(2 ** (depth + 2) + 1)
    complement = complements[depth]
    for i in range(2):
        if complement - arr[i] &lt;= m:
            arr[i] = [arr[i], complement - arr[i]]
            divide(arr[i], depth + 1, m)

m = int(raw_input())

arr = [1, 2]
complements = []

divide(arr, 0, m)
print arr
</snippet></ROW><ROW><id>13793829</id><snippet>m &gt; 1</snippet></ROW><ROW><id>13793839</id><snippet>select = self.f3ListBox.delete(ACTIVE)
</snippet></ROW><ROW><id>13793839</id><snippet>select</snippet></ROW><ROW><id>13793839</id><snippet>select = lambda: self.f3ListBox.delete(ACTIVE)
</snippet></ROW><ROW><id>13793839</id><snippet>delete</snippet></ROW><ROW><id>13793839</id><snippet>select</snippet></ROW><ROW><id>13793850</id><snippet>alarm()</snippet></ROW><ROW><id>13793850</id><snippet>fork()</snippet></ROW><ROW><id>13793850</id><snippet>PriorityQueue</snippet></ROW><ROW><id>13793850</id><snippet>alarm()</snippet></ROW><ROW><id>13793850</id><snippet>crontab</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(item='laptop', 100,200,300)
</snippet></ROW><ROW><id>13793868</id><snippet>SyntaxError: non-keyword arg after keyword arg
</snippet></ROW><ROW><id>13793868</id><snippet>item='laptop'</snippet></ROW><ROW><id>13793868</id><snippet>100</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(100, 200, 300, item='laptop')</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(item='laptop', 100, 200, 300)</snippet></ROW><ROW><id>13793868</id><snippet>def shoppingcart(item, price):
    print item, price
</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart('laptop', 200)</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(price=200, item='laptop')</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>price</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(price=200, 'laptop')</snippet></ROW><ROW><id>13793868</id><snippet>laptop</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>price</snippet></ROW><ROW><id>13793868</id><snippet>SyntaxError: non-keyword arg after keyword arg</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>shoppingcart(100, 200, 300, item='computer')</snippet></ROW><ROW><id>13793868</id><snippet>*args</snippet></ROW><ROW><id>13793868</id><snippet>100, 200, 300</snippet></ROW><ROW><id>13793868</id><snippet>*args</snippet></ROW><ROW><id>13793868</id><snippet>**kwargs</snippet></ROW><ROW><id>13793868</id><snippet>*args</snippet></ROW><ROW><id>13793868</id><snippet>*args</snippet></ROW><ROW><id>13793868</id><snippet>list</snippet></ROW><ROW><id>13793868</id><snippet>**kwargs</snippet></ROW><ROW><id>13793868</id><snippet>dict</snippet></ROW><ROW><id>13793868</id><snippet>&gt;&gt;&gt; def shoppingcart(*args, **kwargs):
...    print args, kwargs
&gt;&gt;&gt; shoppingcart(100, 200, 300, item='laptop')
[100, 200, 300], {'item': 'laptop'}
</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>item = kwargs['item']
</snippet></ROW><ROW><id>13793868</id><snippet>item = kwargs.get('item', 'computer')
</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>&gt;&gt;&gt; def simplefunc(a, b, c):
...     print a, b, c
&gt;&gt;&gt; simplefunc(1, 2, 3, 4)
TypeError: simplefunc() takes exactly 3 arguments (4 given)
&gt;&gt;&gt; simplefunc(a=1, b=2, c=3, d=4, e=5)
TypeError: simplefunc() got an unexpected keyword argument 'd'
</snippet></ROW><ROW><id>13793868</id><snippet>**kwargs</snippet></ROW><ROW><id>13793868</id><snippet>dict</snippet></ROW><ROW><id>13793868</id><snippet>def shoppingcart(*prices, **kwargs):
    for key in kwargs:
        if key != 'item':
            raise TypeError("shoppingcart() got unexpected keyword argument(s) '%s' % kwargs.keys()[0]`)
    item = kwargs.get('item', 'computer')
    print item, prices
</snippet></ROW><ROW><id>13793868</id><snippet>dict.pop</snippet></ROW><ROW><id>13793868</id><snippet>dict.get</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>def shoppingcart(*args, **kwargs):
    item = kwargs.pop('item', 'computer')
    if kwargs: # Something else was in there besides item!
        raise TypeError("shoppingcart() got unexpected keyword argument(s) '%s' % kwargs.keys()[0]`)
</snippet></ROW><ROW><id>13793868</id><snippet>if</snippet></ROW><ROW><id>13793868</id><snippet>raise</snippet></ROW><ROW><id>13793868</id><snippet>assert not kwargs</snippet></ROW><ROW><id>13793868</id><snippet>AssertionError</snippet></ROW><ROW><id>13793868</id><snippet>TypeError</snippet></ROW><ROW><id>13793868</id><snippet>item</snippet></ROW><ROW><id>13793868</id><snippet>def shoppingcart(*prices):
    if prices and isinstance(prices[0], basestring):
        item = prices.pop(0)
    else:
        item = 'computer'
    print item
    for price in prices:
        print price
</snippet></ROW><ROW><id>13793868</id><snippet>&gt;&gt;&gt; shoppingcart(100, 200, 300)
computer
100
200
300
&gt;&gt;&gt; shoppingcart('laptop', 100, 200, 300) # notice no `item=` here
laptop
100
200
300
</snippet></ROW><ROW><id>13793868</id><snippet>slice(start=None, stop, step=None)</snippet></ROW><ROW><id>13793917</id><snippet>def foo(a, b):
    print a
    print b
</snippet></ROW><ROW><id>13793917</id><snippet>foo</snippet></ROW><ROW><id>13793917</id><snippet>x = 1
y = 2
foo(x, y)
</snippet></ROW><ROW><id>13793917</id><snippet>1
2
</snippet></ROW><ROW><id>13793917</id><snippet>a, b</snippet></ROW><ROW><id>13793917</id><snippet>foo(x, y)
</snippet></ROW><ROW><id>13793917</id><snippet>foo</snippet></ROW><ROW><id>13793917</id><snippet>x</snippet></ROW><ROW><id>13793917</id><snippet>a</snippet></ROW><ROW><id>13793917</id><snippet>y</snippet></ROW><ROW><id>13793917</id><snippet>b</snippet></ROW><ROW><id>13793917</id><snippet>def bar(a, b):
    a = a + 1
    b = b + 2
    print a

x = 0
y = 0
bar(x, y)
print x
print y
</snippet></ROW><ROW><id>13793917</id><snippet>1
2
0
0
</snippet></ROW><ROW><id>13794050</id><snippet>unicode_escape</snippet></ROW><ROW><id>13794050</id><snippet>t</snippet></ROW><ROW><id>13794050</id><snippet>bytes</snippet></ROW><ROW><id>13794050</id><snippet>&gt;&gt;&gt; print(t.decode('unicode_escape'))
Róisín
</snippet></ROW><ROW><id>13794050</id><snippet>t</snippet></ROW><ROW><id>13794050</id><snippet>bytes</snippet></ROW><ROW><id>13794050</id><snippet>decode</snippet></ROW><ROW><id>13794050</id><snippet>&gt;&gt;&gt; print(t.encode('unicode_escape').decode('unicode_escape')
Róisín
</snippet></ROW><ROW><id>13794050</id><snippet>sub</snippet></ROW><ROW><id>13794050</id><snippet>repl</snippet></ROW><ROW><id>13794050</id><snippet>int(hexstring, 16)</snippet></ROW><ROW><id>13794050</id><snippet>chr</snippet></ROW><ROW><id>13794050</id><snippet>unichr</snippet></ROW><ROW><id>13794050</id><snippet>&gt;&gt;&gt; re.sub(r'(\\u[0-9A-Fa-f]+)', lambda matchobj: chr(int(matchobj.group(0)[2:], 16)), t)
Róisín
</snippet></ROW><ROW><id>13794050</id><snippet>&gt;&gt;&gt; def unescapematch(matchobj):
...     escapesequence = matchobj.group(0)
...     digits = escapesequence[2:]
...     ordinal = int(escapesequence, 16)
...     char = chr(ordinal)
...     return char
&gt;&gt;&gt; re.sub(r'(\\u[0-9A-Fa-f]+)', unescapematch, t)
Róisín
</snippet></ROW><ROW><id>13794050</id><snippet>unicode_escape</snippet></ROW><ROW><id>13794050</id><snippet>\U</snippet></ROW><ROW><id>13794050</id><snippet>\x</snippet></ROW><ROW><id>13794050</id><snippet>\X</snippet></ROW><ROW><id>13794050</id><snippet>\066</snippet></ROW><ROW><id>13794050</id><snippet>\n</snippet></ROW><ROW><id>13794050</id><snippet>\u</snippet></ROW><ROW><id>13794050</id><snippet>\u</snippet></ROW><ROW><id>13794050</id><snippet>\U</snippet></ROW><ROW><id>13794050</id><snippet>r'\\u22222'</snippet></ROW><ROW><id>13794050</id><snippet>'∢2'</snippet></ROW><ROW><id>13794050</id><snippet>''</snippet></ROW><ROW><id>13794415</id><snippet> [x for x in itertools.takewhile(pred, examples)][-1]
</snippet></ROW><ROW><id>13794415</id><snippet>takewhile</snippet></ROW><ROW><id>13794415</id><snippet>[now-3, now-10, now-5, now+3, now-9, now-1, now+9]
</snippet></ROW><ROW><id>13794415</id><snippet>takewhile</snippet></ROW><ROW><id>13794415</id><snippet>now-3, now-10, now-5</snippet></ROW><ROW><id>13794415</id><snippet>pred(now+3)</snippet></ROW><ROW><id>13794415</id><snippet>now-5</snippet></ROW><ROW><id>13794415</id><snippet>[now-10, now-9, now-5, now-3, now-1, now+3, now+9]
</snippet></ROW><ROW><id>13794415</id><snippet>takewhile</snippet></ROW><ROW><id>13794415</id><snippet>now-1</snippet></ROW><ROW><id>13794415</id><snippet>&gt;&gt;&gt; import datetime, itertools, time
&gt;&gt;&gt; currentTimeMachine = datetime.datetime.now()
&gt;&gt;&gt; print [x for x in itertools.takewhile(lambda t: currentTimeMachine  &gt; datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S"), sorted(examples))][-1]
2012-12-10 02:06:45
</snippet></ROW><ROW><id>13794415</id><snippet>&gt;&gt;&gt; exampleDates = [datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S") for t in examples]
&gt;&gt;&gt; def beforeNow(t):
...     return currentTimeMachine &gt; t
&gt;&gt;&gt; print list(itertools.takewhile(beforeNow, sorted(exampleDates))[-1]
</snippet></ROW><ROW><id>13794415</id><snippet>&gt;&gt;&gt; print max(x for x in exampleDates if x &lt;= currentTimeMachine)
</snippet></ROW><ROW><id>13794415</id><snippet>&gt;&gt;&gt; examples = ['2012-12-10 02:06:45', '2012-12-10 02:02:43', '2012-12-10 01:58:53']
&gt;&gt;&gt; exampleDates = (datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S") for t in examples)
&gt;&gt;&gt; currentTimeMachine = datetime.datetime.now()
&gt;&gt;&gt; print max(t for t in exampleDates if t &lt;= currentTimeMachine)
2012-12-10 02:06:45
</snippet></ROW><ROW><id>13794415</id><snippet>exampleDates</snippet></ROW><ROW><id>13794415</id><snippet>&lt;</snippet></ROW><ROW><id>13794415</id><snippet>&lt;=</snippet></ROW><ROW><id>13794415</id><snippet>&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; currentTimeMachine = datetime.datetime.strftime(now, "%Y-%m-%d %H:%M:%S")
&gt;&gt;&gt; print max(t for t in examples if t &lt;= currentTimeMachine)
2012-12-10 02:06:45
</snippet></ROW><ROW><id>13794415</id><snippet>'2012-12-10 02:06:45'</snippet></ROW><ROW><id>13794415</id><snippet>'2012-12-10Z01:06:45'</snippet></ROW><ROW><id>13794570</id><snippet>application.listen(12345)</snippet></ROW><ROW><id>13794570</id><snippet>http://127.0.0.1:12345/</snippet></ROW><ROW><id>13794574</id><snippet>from pylab import *
subplot(3,1,1)
plot(arange(33))
subplot(3,1,2)
plot(arange(44))
subplot(3,1,3)
plot(arange(55),'r')
</snippet></ROW><ROW><id>13794721</id><snippet>import gtk</snippet></ROW><ROW><id>13794740</id><snippet>&gt;&gt;&gt; [div['class'] for div in soup.find_all('div')]
[['comment', 'form', 'new'], ['comment', 'comment-xxxx...']]
</snippet></ROW><ROW><id>13794740</id><snippet>['comment form new', 'comment comment-xxxx...']
</snippet></ROW><ROW><id>13794740</id><snippet>&gt;&gt;&gt; soup.find_all('div', class_=re.compile('comment-'))
[&lt;div class="comment comment-xxxx..."&gt;&lt;/div&gt;]
</snippet></ROW><ROW><id>13794740</id><snippet>re.search</snippet></ROW><ROW><id>13794740</id><snippet>re.match</snippet></ROW><ROW><id>13794740</id><snippet>'comment-.*'</snippet></ROW><ROW><id>13794740</id><snippet>'comment-12345'</snippet></ROW><ROW><id>13794740</id><snippet>'comment-of-another-kind</snippet></ROW><ROW><id>13794740</id><snippet>'comment-\d+'</snippet></ROW><ROW><id>13794904</id><snippet>news_list = huff_soup.find_all("div", {"class", "snp_most_popular_entry"})[0]
for news in news_list[0]:
</snippet></ROW><ROW><id>13794904</id><snippet>[0]</snippet></ROW><ROW><id>13794904</id><snippet>&gt;&gt;&gt; huff_soup = BeautifulSoup(urllib2.urlopen("http://www.huffingtonpost.com").read())
&gt;&gt;&gt; news_list = huff_soup.find_all("div", {"class", "snp_most_popular_entry"})
</snippet></ROW><ROW><id>13794941</id><snippet>python /path/to/script/myscript.py &gt; /path/to/output/myfile.txt
</snippet></ROW><ROW><id>13795126</id><snippet>def make_func(a, b):
    def f(n):
        return n**a + b
    return f
</snippet></ROW><ROW><id>13795126</id><snippet>def make_recursive_func(coefficients, baseval):
    def f(n):
        if n &lt; len(coefficients): return baseval[n]
        return sum(coefficient * f(n-i-1) for i, coefficient in enumerate(coefficients))
    return f
</snippet></ROW><ROW><id>13795126</id><snippet>eval_recursive_func(coefficients, baseval)</snippet></ROW><ROW><id>13795126</id><snippet>eval</snippet></ROW><ROW><id>13795126</id><snippet>exec</snippet></ROW><ROW><id>13795126</id><snippet>newcode = '''
def f(n):
    if n&lt;=3: return [0, 0, 6, 12][n]
    return 2*f(n-1) - 4*f(n-2) - 5*f(n-3) + 15*f(n-4)
'''
exec(newcode)
</snippet></ROW><ROW><id>13795126</id><snippet>f</snippet></ROW><ROW><id>13795126</id><snippet>def f(n):
    if n&lt;=3: return [0, 0, 6, 12][n]
    return 2*f(n-1) - 4*f(n-2) - 5*f(n-3) + 15*f(n-4)
</snippet></ROW><ROW><id>13795126</id><snippet>new</snippet></ROW><ROW><id>13795126</id><snippet>inspect</snippet></ROW><ROW><id>13795221</id><snippet>class Config(object):
    DB_STRING = 'some default value'
    ANOTHER_SETTING = 'another default'
    DEBUG = True

    def dostuff(self):
      print 'I did stuff to ',self.DEBUG

class ProductionConfig(Config):
    DEBUG = False # only turn of debugging

class DevelopmentConfig(Config):
    DB_STRING = 'localhost'

    def dostuff(self):
       print 'Warning! Development system ',self.DEBUG
</snippet></ROW><ROW><id>13795221</id><snippet>settings.py</snippet></ROW><ROW><id>13795221</id><snippet>from settings import Config as settings
# or from settings import ProductionConfig as settings

print settings.DEBUG # for example
</snippet></ROW><ROW><id>13795358</id><snippet>In [6]: a = "username@102.1.1.2:/home/hello/there"

In [7]: a.rpartition('/')[0]
Out[7]: 'username@102.1.1.2:/home/hello'
</snippet></ROW><ROW><id>13795426</id><snippet>GNU awk</snippet></ROW><ROW><id>13795426</id><snippet>awk -f script.awk file{,}
</snippet></ROW><ROW><id>13795426</id><snippet>script.awk</snippet></ROW><ROW><id>13795426</id><snippet>NR==1 {
    n = $5
}

FNR==NR &amp;&amp; $5 != n {
    a[c++]=$0
}

FNR!=NR &amp;&amp; $5 == n {
    for (i=0;i&lt;=c-1;i++) {
        split (a[i],b)
        dist = sqrt (($7-b[7])^2 + ($8-b[8])^2 + ($9-b[9])^2)
        if (dist &gt;= 5) {
            printf "%s-%s\t%.2f\n", $NF, b[NF], dist
        }
    }
}
</snippet></ROW><ROW><id>13795426</id><snippet>N-C 51.70
N-O 52.83
N-N 51.30
C-C 51.14
C-O 52.29
C-N 50.71
C-C 50.00
C-O 51.14
C-N 49.56
</snippet></ROW><ROW><id>13795426</id><snippet>awk 'NR==1 { n = $5 } FNR==NR &amp;&amp; $5 != n { a[c++]=$0 } FNR!=NR &amp;&amp; $5 == n { for (i=0;i&lt;=c-1;i++) { split (a[i],b); dist = sqrt (($7-b[7])^2 + ($8-b[8])^2 + ($9-b[9])^2); if (dist &gt;= 5) printf "%s-%s\t%.2f\n", $NF, b[NF], dist } }' file{,}
</snippet></ROW><ROW><id>13795426</id><snippet>for</snippet></ROW><ROW><id>13795426</id><snippet>awk</snippet></ROW><ROW><id>13795426</id><snippet>/path/to/folder/</snippet></ROW><ROW><id>13795426</id><snippet>for i in *; do awk 'NR==1 { n = $5 } FNR==NR &amp;&amp; $5 != n { a[c++]=$0 } FNR!=NR &amp;&amp; $5 == n { for (i=0;i&lt;=c-1;i++) { split (a[i],b); dist = sqrt (($7-b[7])^2 + ($8-b[8])^2 + ($9-b[9])^2); if (dist &gt;= 5) printf "%s-%s\t%.2f\n", $NF, b[NF], dist &gt; "/path/to/folder/" FILENAME } }' "$i"{,}; done
</snippet></ROW><ROW><id>13795531</id><snippet>def my_view(request):
    get_args = request.GET #dict of arguments from a get request (like your example)
    post_args = request.POST #dict of arguments from a post request
    all_args = requst.REQUEST #dict of arguments regardless of request type.
</snippet></ROW><ROW><id>13795531</id><snippet>#This method will throw an exception if the key is not in the dict.
get_args['var1'] #represents the value for that key, in this case '20'

#This method will return None if the key is not in the dict.
get_args.get('var2') #represents the value for that key, in this case '30'
</snippet></ROW><ROW><id>13795531</id><snippet>for key,val in get_args.items():
    do_something(val)
</snippet></ROW><ROW><id>13795593</id><snippet>adjList</snippet></ROW><ROW><id>13795593</id><snippet>class NodeCreate:

    def __init__(self, name):
        self.name = name
        self.adjList = []
</snippet></ROW><ROW><id>13795605</id><snippet>update</snippet></ROW><ROW><id>13795605</id><snippet>update</snippet></ROW><ROW><id>13795605</id><snippet>update</snippet></ROW><ROW><id>13795605</id><snippet>update_idletasks</snippet></ROW><ROW><id>13795605</id><snippet>raw_input</snippet></ROW><ROW><id>13795605</id><snippet>update_idletasks</snippet></ROW><ROW><id>13795605</id><snippet>update</snippet></ROW><ROW><id>13795605</id><snippet>update_idletasks</snippet></ROW><ROW><id>13795605</id><snippet>update_idletasks</snippet></ROW><ROW><id>13795826</id><snippet>C</snippet></ROW><ROW><id>13795826</id><snippet>ctypes</snippet></ROW><ROW><id>13795874</id><snippet>linalg.solve</snippet></ROW><ROW><id>13795874</id><snippet>linalg.lstsq</snippet></ROW><ROW><id>13795890</id><snippet>&gt;&gt;&gt; list1 = [('var1','aa'),('var2','bb'),('var3','cc')]
&gt;&gt;&gt; list2 = [('var2','22'),('var3','33'),('var5','23'),('var6','33'),('var7','23')]
&gt;&gt;&gt; dict1 = dict(list1)
&gt;&gt;&gt; list2 = [(k, dict1.get(k, v)) for k, v in list2]
&gt;&gt;&gt; list2
[('var2', 'bb'), ('var3', 'cc'), ('var5', '23'), ('var6', '33'), ('var7', '23')]
</snippet></ROW><ROW><id>13795890</id><snippet>list2</snippet></ROW><ROW><id>13796258</id><snippet>import os
f = open(os.path.join(app.root_path, 'foobar.txt'), 'w')
</snippet></ROW><ROW><id>13796258</id><snippet>import os
with open(os.path.join(app.root_path, 'foobar.txt'), 'w') as f:
    ...
</snippet></ROW><ROW><id>13796367</id><snippet>import matplotlib.pyplot as plt
import numpy as np

temperature = [['65', '65.5', '66', '66.5', '67', '67.5', '68', '68.5', '69', '69.5', '70', '70.5', '71', '71.5', '72', '72.5', '73', '73.5', '74', '74.5', '75', '75.5', '76', '76.5', '77', '77.5', '78', '78.5', '79', '79.5', '80', '80.5', '81', '81.5', '82', '82.5', '83', '83.5', '84', '84.5', '85', '85.5', '86', '86.5', '87', '87.5', '88', '88.5', '89', '89.5', '90', '90.5', '91', '91.5', '92', '92.5', '93', '93.5', '94', '94.5', '95'], ['65', '65.5', '66', '66.5', '67', '67.5', '68', '68.5', '69', '69.5', '70', '70.5', '71', '71.5', '72', '72.5', '73', '73.5', '74', '74.5', '75', '75.5', '76', '76.5', '77', '77.5', '78', '78.5', '79', '79.5', '80', '80.5', '81', '81.5', '82', '82.5', '83', '83.5', '84', '84.5', '85', '85.5', '86', '86.5', '87', '87.5', '88', '88.5', '89', '89.5', '90', '90.5', '91', '91.5', '92', '92.5', '93', '93.5', '94', '94.5', '95'], ['65', '65.5', '66', '66.5', '67', '67.5', '68', '68.5', '69', '69.5', '70', '70.5', '71', '71.5', '72', '72.5', '73', '73.5', '74', '74.5', '75', '75.5', '76', '76.5', '77', '77.5', '78', '78.5', '79', '79.5', '80', '80.5', '81', '81.5', '82', '82.5', '83', '83.5', '84', '84.5', '85', '85.5', '86', '86.5', '87', '87.5', '88', '88.5', '89', '89.5', '90', '90.5', '91', '91.5', '92', '92.5', '93', '93.5', '94', '94.5', '95']]
changes = [['94.566', '94.210', '93.836', '93.443', '93.030', '92.597', '92.145', '91.673', '91.181', '90.669', '90.137', '89.585', '89.011', '88.409', '87.760', '87.019', '86.063', '84.577', '81.806', '76.130', '65.071', '47.659', '28.454', '14.158', '6.305', '2.678', '1.128', '0.480', '0.210', '0.095', '0.045', '0.022', '0.012', '0.006', '0.004', '0.002', '0.002', '0.001', '0.001', '0.001', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000'], ['94.566', '94.210', '93.836', '93.443', '93.030', '92.597', '92.145', '91.673', '91.181', '90.669', '90.138', '89.588', '89.016', '88.420', '87.788', '87.088', '86.239', '85.028', '82.929', '78.744', '70.282', '55.446', '36.209', '19.361', '8.976', '3.874', '1.634', '0.691', '0.298', '0.132', '0.060', '0.029', '0.015', '0.008', '0.004', '0.003', '0.002', '0.001', '0.001', '0.001', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000'], ['94.566', '94.210', '93.836', '93.443', '93.030', '92.597', '92.145', '91.673', '91.181', '90.669', '90.138', '89.588', '89.016', '88.421', '87.790', '87.093', '86.255', '85.072', '83.059', '79.131', '71.434', '58.441', '41.784', '25.977', '14.170', '6.919', '3.146', '1.386', '0.608', '0.270', '0.122', '0.057', '0.028', '0.014', '0.007', '0.004', '0.003', '0.001', '0.001', '0.001', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000', '0.000']]

temperature = np.array(temperature, dtype=np.float32).transpose()
changes = np.array(changes, dtype=np.float32).transpose()

plt.figure()
plt.plot(temperature, changes)
plt.xlabel('temperature')
plt.ylabel('changes')
plt.show()

delta_t = temperature[1:]-temperature[:-1]
t_av = 0.5*(temperature[1:]+temperature[:-1])
dc_dt = (changes[1:]-changes[:-1])

plt.figure()
plt.plot(t_av, dc_dt)
plt.xlabel('temperature')
plt.ylabel('dc/dt')
plt.show()
</snippet></ROW><ROW><id>13796450</id><snippet>dict</snippet></ROW><ROW><id>13796450</id><snippet>def f(x=None):
    if x is None:
        x = {}
</snippet></ROW><ROW><id>13796450</id><snippet>dict</snippet></ROW><ROW><id>13796450</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>13796450</id><snippet>dict</snippet></ROW><ROW><id>13796710</id><snippet>instance.tag_id</snippet></ROW><ROW><id>13796710</id><snippet>instance.tag</snippet></ROW><ROW><id>13796710</id><snippet>t = Tag.objects.get(pk=instance.tag_id)
</snippet></ROW><ROW><id>13796710</id><snippet>t = instance.tag
</snippet></ROW><ROW><id>13796710</id><snippet>instance.tag</snippet></ROW><ROW><id>13796710</id><snippet>instance.tag_id</snippet></ROW><ROW><id>13796710</id><snippet># Delete the tags that are not used by any other object
from django.db.models.signals import post_delete

def after_deleting(sender, instance, **kwargs):
    if not TaggedItem.objects.filter(tag=instance.tag):
        print "Deleting tag", instance
        instance.tag.delete()

post_delete.connect(after_deleting, sender=TaggedItem)
</snippet></ROW><ROW><id>13796829</id><snippet>is_land(xpt, ypt)</snippet></ROW><ROW><id>13796829</id><snippet>True</snippet></ROW><ROW><id>13796829</id><snippet>False</snippet></ROW><ROW><id>13797336</id><snippet>Scrapy==0.16.2
Twisted==12.2.0
distribute==0.6.32
egenix-pyopenssl==0.13.0-1.0.0g-1
lxml==3.0.1
pyOpenSSL==0.9
pywin32==216
w3lib==1.2
zope.interface==3.8.0
</snippet></ROW><ROW><id>13797346</id><snippet>@classmethod
def cf_connect(cls, column_family):
    cf = pycassa.ColumnFamily(cls.pool, column_family)
    return cf
</snippet></ROW><ROW><id>13797346</id><snippet>user_name_cf</snippet></ROW><ROW><id>13797346</id><snippet>user_tweet_cf</snippet></ROW><ROW><id>13797346</id><snippet>class ks_refs():
    pool = ConnectionPool('TweetsKS')

    @classmethod
    def cf_connect(cls, column_family):
        cf = pycassa.ColumnFamily(cls.pool, column_family)
        return cf

user_name_cf = ks_refs.cf_connect('UserName')
user_tweet_cf = ks_refs.cf_connect('UserTweet')
</snippet></ROW><ROW><id>13797346</id><snippet>ks_refs.user_name_cf = ks_refs.cf_connect('UserName')
ks_refs.user_tweet_cf = ks_refs.cf_connect('UserTweet')
</snippet></ROW><ROW><id>13797449</id><snippet>parser = argparse.ArgumentParser(description="This script ... "
</snippet></ROW><ROW><id>13797878</id><snippet>row</snippet></ROW><ROW><id>13797878</id><snippet>typesFile</snippet></ROW><ROW><id>13797878</id><snippet>,</snippet></ROW><ROW><id>13797878</id><snippet>&gt;&gt;&gt; 'line without a comma'.split(',')
['line without a comma']
&gt;&gt;&gt; 'line without a comma'.split(',')[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>13797878</id><snippet>servinfo.txt</snippet></ROW><ROW><id>13797878</id><snippet>csv</snippet></ROW><ROW><id>13797878</id><snippet>import csv
csvreader = csv.reader(open('servinfo.txt', 'rb'))
dataTypes = dict(csvreader)
</snippet></ROW><ROW><id>13797943</id><snippet>import iris
import iris.plot as iplt
import cartopy.crs as ccrs
import matplotlib.pyplot as plt


fname = iris.sample_data_path('air_temp.pp')
air_temp = iris.load_cube(fname)

ax = plt.axes(projection=ccrs.Robinson())
iplt.contourf(air_temp, transform=ccrs.Robinson(central_longitude=180))
ax.coastlines()

plt.show()
</snippet></ROW><ROW><id>13797943</id><snippet>Traceback (most recent call last):
  File "using_custom_projections.py", line 11, in &lt;module&gt;
    iris.plot.contourf(air_temp, transform=ccrs.Robinson())
  File "lib/iris/plot.py", line 452, in contourf
    result = _draw_2d_from_points('contourf', None, cube, *args, **kwargs)
  File "lib/iris/plot.py", line 263, in _draw_2d_from_points
    result = _map_common(draw_method_name, arg_func, iris.coords.POINT_MODE, cube, data, *args, **kwargs)
  File "lib/iris/plot.py", line 406, in _map_common
    assert 'transform' not in kwargs, 'Transform keyword is not allowed.'
AssertionError: Transform keyword is not allowed.
</snippet></ROW><ROW><id>13797943</id><snippet>contourf</snippet></ROW><ROW><id>13797943</id><snippet>import iris
import iris.plot as iplt
import cartopy.crs as ccrs
import matplotlib.pyplot as plt


fname = iris.sample_data_path('air_temp.pp')
air_temp = iris.load_cube(fname)

ax = plt.axes(projection=ccrs.Robinson(central_longitude=180))
iplt.contourf(air_temp)
ax.coastlines()

plt.show()
</snippet></ROW><ROW><id>13798135</id><snippet>@app.after_request
def add_header(response):
    """
    Add headers to both force latest IE rendering engine or Chrome Frame,
    and also to cache the rendered page for 10 minutes.
    """
    response.headers['X-UA-Compatible'] = 'IE=Edge,chrome=1'
    response.headers['Cache-Control'] = 'public, max-age=0'
    return response
</snippet></ROW><ROW><id>13798177</id><snippet>import pylab as pl
import numpy as np
import Image

path = r'\path\to\image\file.jpg'

img = Image.open(path)

img.resize((200,200))

a = np.asarray(img)

pl.imshow(a)
pl.show()
</snippet></ROW><ROW><id>13798237</id><snippet>os.system</snippet></ROW><ROW><id>13798237</id><snippet>os.system('jar -xvf "' + pathvariable + '" js/pay.js)
</snippet></ROW><ROW><id>13798237</id><snippet>{}</snippet></ROW><ROW><id>13798237</id><snippet>%s</snippet></ROW><ROW><id>13798237</id><snippet>os.system</snippet></ROW><ROW><id>13798237</id><snippet>subprocess</snippet></ROW><ROW><id>13798237</id><snippet>subprocess.check_call(['jar', '-xvf', pathvariable, 'js/pay.js'])
</snippet></ROW><ROW><id>13798237</id><snippet>war</snippet></ROW><ROW><id>13798237</id><snippet>import zipfile
with zipfile.ZipFile(pathvariable, 'r') as zf:
    zf.extract('js/pay.js', destinationpathvariable)
</snippet></ROW><ROW><id>13798237</id><snippet>ZipFile</snippet></ROW><ROW><id>13798237</id><snippet>with</snippet></ROW><ROW><id>13798237</id><snippet>from contextlib import closing
import zipfile
with closing(zipfile.ZipFile(pathvariable, 'r')) as zf:
    zf.extract('js/pay.js', destinationpathvariable)
</snippet></ROW><ROW><id>13798237</id><snippet>import zipfile
zf = zipfile.ZipFile(pathvariable, 'r')
zf.extract('js/pay.js', destinationpathvariable)
</snippet></ROW><ROW><id>13798237</id><snippet>with</snippet></ROW><ROW><id>13798428</id><snippet>category = Category.objects.get(pk=10)
products = category.product_set.all()  # note that this is a queryset
</snippet></ROW><ROW><id>13798506</id><snippet>bdate_range</snippet></ROW><ROW><id>13798506</id><snippet>bdate_range</snippet></ROW><ROW><id>13798631</id><snippet>def somefunction():
    global url_request
    url_request+=1
</snippet></ROW><ROW><id>13798631</id><snippet>global</snippet></ROW><ROW><id>13798708</id><snippet>__call__</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13798708</id><snippet>__init__</snippet></ROW><ROW><id>13798708</id><snippet>__new__</snippet></ROW><ROW><id>13798708</id><snippet>__call__</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13798708</id><snippet>from outer_library import Outer

outer = Outer()

@outer.get("/")
…
</snippet></ROW><ROW><id>13798708</id><snippet>Outer.__init__</snippet></ROW><ROW><id>13798708</id><snippet>__init__</snippet></ROW><ROW><id>13798708</id><snippet>__new__</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13798708</id><snippet>Outer</snippet></ROW><ROW><id>13799083</id><snippet>print</snippet></ROW><ROW><id>13799083</id><snippet>print</snippet></ROW><ROW><id>13799083</id><snippet>print</snippet></ROW><ROW><id>13799243</id><snippet>AssertionError: This event is already used by another greenlet: (&lt;Greenlet 
at 0x7f3e758722d0: &lt;bound method socket.sendall of &lt;socket at 0x7f3e7587719
0 fileno=8 sock=127.0.0.1:1234 peer=127.0.0.1:51042&gt;&gt;('11111111111111111111
11111111111111111111111111111)&gt;, timeout('timed out',))
</snippet></ROW><ROW><id>13799243</id><snippet>gevent.coros.RLock</snippet></ROW><ROW><id>13799457</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>13799663</id><snippet>my_images</snippet></ROW><ROW><id>13799663</id><snippet>slice</snippet></ROW><ROW><id>13799663</id><snippet>{{ some_list|slice:":2" }}
</snippet></ROW><ROW><id>13799663</id><snippet>['a', 'b', 'c']</snippet></ROW><ROW><id>13799663</id><snippet>['a', 'b']</snippet></ROW><ROW><id>13799699</id><snippet>DELETE</snippet></ROW><ROW><id>13799699</id><snippet>BACKSPACE</snippet></ROW><ROW><id>13799699</id><snippet>&gt;&gt;&gt; print u"hi \u0008there"
hithere
</snippet></ROW><ROW><id>13799784</id><snippet>Base</snippet></ROW><ROW><id>13799784</id><snippet>base_arg1</snippet></ROW><ROW><id>13799784</id><snippet>base_arg2</snippet></ROW><ROW><id>13799784</id><snippet>class Base(object):
    def __init__(self, base_arg1, base_arg2):
        self.base_arg1 = base_arg1
        self.base_arg2 = base_arg2
        ...

class Derived(Base):
    def __init__(self, base_arg1, base_arg2, derived_arg1, derived_arg2):
        super().__init__(base_arg1, base_arg2)
        ...

    @classmethod
    def from_base(cls, b, da1, da2):
        return cls(b.base_arg1, b.base_arg2, da1, da2)
</snippet></ROW><ROW><id>13799953</id><snippet>from numpy import *
import matplotlib.pyplot as plt

x = linspace(1, 130, 130) # create a 1D array of 130 integers to set as the x axis
y = Te25117.data # set 2D array of data as y
L = len(y) # I assume you can infere the size of the data in this way...
#L = 111 # this is if you don't know any better
for i in range(L)
    plt.plot(x, y[i], color='mycolor',linewidth=1) 
</snippet></ROW><ROW><id>13799984</id><snippet>from scrapy.spider import BaseSpider
from scrapy.stats import stats
from scrapy.xlib.pydispatch import dispatcher
from scrapy import signals

class MySpider(BaseSpider):
    handle_httpstatus_list = [404] 
    name = "myspider"
    allowed_domains = ["example.com"]
    start_urls = [
        'http://www.example.com/thisurlexists.html',
        'http://www.example.com/thisurldoesnotexist.html',
        'http://www.example.com/neitherdoesthisone.html'
    ]

    def __init__(self, category=None):
        self.failed_urls = []

    def parse(self, response):
        if response.status == 404:
            stats.inc_value('failed_url_count')
            self.failed_urls.append(response.url)

    def handle_spider_closed(spider, reason):
        stats.set_value('failed_urls', ','.join(spider.failed_urls))

    def process_exception(self, response, exception, spider):
        ex_class = "%s.%s" % (exception.__class__.__module__, exception.__class__.__name__)
        self.stats.inc_value('downloader/exception_count', spider=spider)
        self.stats.inc_value('downloader/exception_type_count/%s' % ex_class, spider=spider)

    dispatcher.connect(handle_spider_closed, signals.spider_closed)
</snippet></ROW><ROW><id>13799984</id><snippet>2012-12-10 11:15:26+0000 [myspider] INFO: Dumping Scrapy stats:
    {'downloader/exception_count': 15,
     'downloader/exception_type_count/twisted.internet.error.DNSLookupError': 15,
     'downloader/request_bytes': 717,
     'downloader/request_count': 3,
     'downloader/request_method_count/GET': 3,
     'downloader/response_bytes': 15209,
     'downloader/response_count': 3,
     'downloader/response_status_count/200': 1,
     'downloader/response_status_count/404': 2,
     'failed_url_count': 2,
     'failed_urls': 'http://www.example.com/thisurldoesnotexist.html, http://www.example.com/neitherdoesthisone.html'
     'finish_reason': 'finished',
     'finish_time': datetime.datetime(2012, 12, 10, 11, 15, 26, 874000),
     'log_count/DEBUG': 9,
     'log_count/ERROR': 2,
     'log_count/INFO': 4,
     'response_received_count': 3,
     'scheduler/dequeued': 3,
     'scheduler/dequeued/memory': 3,
     'scheduler/enqueued': 3,
     'scheduler/enqueued/memory': 3,
     'spider_exceptions/NameError': 2,
     'start_time': datetime.datetime(2012, 12, 10, 11, 15, 26, 560000)}
</snippet></ROW><ROW><id>13800087</id><snippet>fileinput.input()</snippet></ROW><ROW><id>13800087</id><snippet>.next()</snippet></ROW><ROW><id>13800087</id><snippet>finput = fileinput.input([os.path.expandvars("$MYPATH/text.txt")])
finput.next()  # skip first line
mydate = finput.next()  # store second line.
</snippet></ROW><ROW><id>13800087</id><snippet>itertools.islice()</snippet></ROW><ROW><id>13800087</id><snippet>import itertools

finput = fileinput.input([os.path.expandvars("$MYPATH/text.txt")])
mydate = itertools.islice(finput.next(), 1, 2).next()  # store second line.
</snippet></ROW><ROW><id>13800087</id><snippet>.input()</snippet></ROW><ROW><id>13800087</id><snippet>fileinput.input()</snippet></ROW><ROW><id>13800087</id><snippet>fileinput.close()</snippet></ROW><ROW><id>13800087</id><snippet>input()</snippet></ROW><ROW><id>13800087</id><snippet>fileinput.FileInput()</snippet></ROW><ROW><id>13800138</id><snippet>max(data)[1]</snippet></ROW><ROW><id>13800346</id><snippet>import errno

write_str = "!"*1024*1024*5  # 5MB

output_path = sys.argv[1]

with open(output_path, "w") as f:
    while True:
        try:
            f.write(write_str)
            f.flush()
        except IOError as err:
            if err.errno == errno.ENOSPC:
                write_str_len = len(write_str)
                if write_str_len &gt; 1:
                    write_str = write_str[:write_str_len/2]
                else:
                    break
            else:
                raise
</snippet></ROW><ROW><id>13800374</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib
import matplotlib.patches as mpatches

# create the figure and the axis in one shot
fig, ax = plt.subplots(1,figsize=(6,6))

art = mpatches.Circle([0,0], radius = 1, color = 'r')
#use add_patch instead, it's more clear what you are doing
ax.add_patch(art)

art = mpatches.Circle([0,0], radius = 0.1, color = 'b')
ax.add_patch(art)

print ax.patches

#set the limit of the axes to -3,3 both on x and y
ax.set_xlim(-3,3)
ax.set_ylim(-3,3)

plt.show()
</snippet></ROW><ROW><id>13800407</id><snippet>for</snippet></ROW><ROW><id>13800407</id><snippet>X</snippet></ROW><ROW><id>13800407</id><snippet>len(X)</snippet></ROW><ROW><id>13800407</id><snippet>xrange</snippet></ROW><ROW><id>13800407</id><snippet>range</snippet></ROW><ROW><id>13800510</id><snippet>import re
re.sub('(.)([-+]\d)', r'\1e\2', number_string)
</snippet></ROW><ROW><id>13800510</id><snippet>number_string = 0.333-5</snippet></ROW><ROW><id>13800510</id><snippet>.5-5</snippet></ROW><ROW><id>13800518</id><snippet>list_names = ['a', 'b', 'c' ]
d = {name:[] for name in list_names}
</snippet></ROW><ROW><id>13800518</id><snippet>d = {'a': [], 'b': [], 'c': []}
</snippet></ROW><ROW><id>13800518</id><snippet>d['a'].append(...)
</snippet></ROW><ROW><id>13800518</id><snippet>for v in d.itervalues():
    v.append(...)
</snippet></ROW><ROW><id>13800992</id><snippet>print "Pototo\b\b\ba\x1b[2Ces"
</snippet></ROW><ROW><id>13800992</id><snippet>Potatoes
</snippet></ROW><ROW><id>13800992</id><snippet>\x1b[</snippet></ROW><ROW><id>13800992</id><snippet>2</snippet></ROW><ROW><id>13800992</id><snippet>C</snippet></ROW><ROW><id>13801061</id><snippet>#field-checks ul
{
width:700px;
}
#field-checks ul li{
display :block;
width:200px;
float:left;
}
</snippet></ROW><ROW><id>13801061</id><snippet>"field-checks" 
</snippet></ROW><ROW><id>13801061</id><snippet>dipslay:block
</snippet></ROW><ROW><id>13801174</id><snippet>O(n)</snippet></ROW><ROW><id>13801174</id><snippet>dict</snippet></ROW><ROW><id>13801174</id><snippet>O(1)</snippet></ROW><ROW><id>13801174</id><snippet># remember to update this hdict when updating the heap.
hdict = { h[i][1]: i for i in range(len(h)) }
</snippet></ROW><ROW><id>13801174</id><snippet>hdict</snippet></ROW><ROW><id>13801174</id><snippet>O(n)</snippet></ROW><ROW><id>13801474</id><snippet>import cx_Oracle

con = cx_Oracle.connect('theuser', 'thepass', 'your DB alias on your TNSNAMES.ORA file ')
cur = con.cursor()
if cur.execute('select * from dual'):
    print "finally, it works!!!"
else:
    print "facepalm"
con.close()
</snippet></ROW><ROW><id>13802603</id><snippet>hab=[[0]*xaxis]*yaxis
</snippet></ROW><ROW><id>13802603</id><snippet>hab</snippet></ROW><ROW><id>13802603</id><snippet>yaxis</snippet></ROW><ROW><id>13802603</id><snippet>In [6]: map(id, hab)
Out[6]: [18662824, 18662824, 18662824]
</snippet></ROW><ROW><id>13802603</id><snippet>hab[k][j]</snippet></ROW><ROW><id>13802603</id><snippet>hab[][j]</snippet></ROW><ROW><id>13802603</id><snippet>In [10]: hab
Out[10]: [[0, 0], [0, 0], [0, 0]]

In [11]: hab[0][0] = 42

In [12]: hab
Out[12]: [[42, 0], [42, 0], [42, 0]]
</snippet></ROW><ROW><id>13802603</id><snippet>hab=[[0]*xaxis for _ in range(yaxis)]
</snippet></ROW><ROW><id>13802603</id><snippet>hab</snippet></ROW><ROW><id>13802603</id><snippet>In [8]: map(id, hab)
Out[8]: [18883528, 18882888, 18883448]

In [14]: hab
Out[14]: [[0, 0], [0, 0], [0, 0]]

In [15]: hab[0][0] = 42

In [16]: hab
Out[16]: [[42, 0], [0, 0], [0, 0]]
</snippet></ROW><ROW><id>13802956</id><snippet>mdfList = list()

for book in root.findall('book'):
    Values = dict()
    Values['GENRE'] = book.find('genre').text
    Values['PRICE'] = book.find('price').text
    mdfList.append(Values)

sql = "INSERT INTO book_table (GENRE, PRICE) VALUES (:GENRE, :PRICE)"
db_callmany(cfgFile, sql, mdfList)
</snippet></ROW><ROW><id>13803226</id><snippet>itertools.combinations()</snippet></ROW><ROW><id>13803226</id><snippet>.sort()</snippet></ROW><ROW><id>13803426</id><snippet>def test_ssh():
    from subprocess import call
    call('ssh user@1.2.3.4 -i "bla.pem"', shell=True)
</snippet></ROW><ROW><id>13803426</id><snippet>call</snippet></ROW><ROW><id>13803703</id><snippet>In [31]: import datetime as DT

In [32]: DT.datetime.strptime("2012-12-12T12:00", '%Y-%m-%dT%H:%M')
Out[32]: datetime.datetime(2012, 12, 12, 12, 0)
</snippet></ROW><ROW><id>13803783</id><snippet>return 'break</snippet></ROW><ROW><id>13804190</id><snippet>append_fields()</snippet></ROW><ROW><id>13804190</id><snippet>my_structured_array</snippet></ROW><ROW><id>13804190</id><snippet>my_new_field</snippet></ROW><ROW><id>13804190</id><snippet>shape(my_structured_array)</snippet></ROW><ROW><id>13804190</id><snippet>dtype([('myfield', '&lt;i8', (2,))])</snippet></ROW><ROW><id>13804190</id><snippet>import numpy as np
from numpy.lib.recfunctions import append_fields

my_structured_array = np.array(
    zip([0,1,2,3],[[4.3,3.2],[1.4,5.6],[6.,2.5],[4.5,5.4]]),
    dtype=[('id','int8'),('pos','2float16')]
    )

my_new_field = np.ones(
    len(my_structured_array),
    dtype=[('myfield', 'i8', 2)]
    )

my_appended_array = append_fields(
    my_structured_array,
    'new',
    data=my_new_field
    )
</snippet></ROW><ROW><id>13804190</id><snippet>&gt;&gt;&gt; my_appended_array[0]
(0, [4.30078125, 3.19921875], ([1, 1],))
</snippet></ROW><ROW><id>13804190</id><snippet>myfield</snippet></ROW><ROW><id>13804190</id><snippet>new</snippet></ROW><ROW><id>13804190</id><snippet>&gt;&gt;&gt; my_appended_array.dtype
dtype([('id', '|i1'), ('pos', '&lt;f2', (2,)), ('new', [('myfield', '&lt;i8', (2,))])])
</snippet></ROW><ROW><id>13804190</id><snippet>&gt;&gt;&gt; np.asarray(my_appended_array, dtype=[('id', '|i1'), ('pos', '&lt;f2', (2,)), ('myfield', '&lt;i8', (2,))])
array([(0, [4.30078125, 3.19921875], [0, 0]),
       (1, [1.400390625, 5.6015625], [0, 0]), (2, [6.0, 2.5], [0, 0]),
       (3, [4.5, 5.3984375], [0, 0])], 
      dtype=[('id', '|i1'), ('pos', '&lt;f2', (2,)), ('myfield', '&lt;i8', (2,))])
</snippet></ROW><ROW><id>13804190</id><snippet>my_structured_array</snippet></ROW><ROW><id>13804190</id><snippet>numpy.lib.recfunctions.flatten_descr</snippet></ROW><ROW><id>13804190</id><snippet>np.dtype</snippet></ROW><ROW><id>13804190</id><snippet>&gt;&gt;&gt; np.dtype(list(np.lib.recfunctions.flatten_descr(my_appended_array.dtype)))
dtype([('id', '|i1'), ('pos', '&lt;f2', (2,)), ('myfield', '&lt;i8', (2,))])
</snippet></ROW><ROW><id>13804190</id><snippet>np.asarray</snippet></ROW><ROW><id>13804190</id><snippet>my_structured_array.dtype</snippet></ROW><ROW><id>13804190</id><snippet>np.lib.recfunctions.merge_arrays</snippet></ROW><ROW><id>13804190</id><snippet> &gt;&gt;&gt; my_appended_array = merge_arrays([my_structured_array, my_new_field], flatten=True)
 array([(0, [4.30078125, 3.19921875], [1, 1]),
        (1, [1.400390625, 5.6015625], [1, 1]), (2, [6.0, 2.5], [1, 1]),
        (3, [4.5, 5.3984375], [1, 1])], 
       dtype=[('id', '|i1'), ('pos', '&lt;f2', (2,)), ('myfield', '&lt;i8', (2,))])
</snippet></ROW><ROW><id>13804348</id><snippet>import codecs
codec = codecs.lookup('utf-8')
mydictionary = {codec.decode(x, 'ignore'): codec.decode(y, 'ignore') for x,y in zip(column, values)}
</snippet></ROW><ROW><id>13804348</id><snippet>'ignore'</snippet></ROW><ROW><id>13804348</id><snippet>'replace'</snippet></ROW><ROW><id>13804348</id><snippet>values</snippet></ROW><ROW><id>13804478</id><snippet>logging</snippet></ROW><ROW><id>13804478</id><snippet>logging.config.dictConfig()</snippet></ROW><ROW><id>13804478</id><snippet>incremental</snippet></ROW><ROW><id>13804478</id><snippet>disable_existing_loggers</snippet></ROW><ROW><id>13804478</id><snippet>incremental</snippet></ROW><ROW><id>13804617</id><snippet>Timestamp</snippet></ROW><ROW><id>13804617</id><snippet>datetime</snippet></ROW><ROW><id>13804617</id><snippet>datetime.strftime</snippet></ROW><ROW><id>13804617</id><snippet>&gt;&gt;&gt; [ d.strftime('%Y%m%d') for d in pandas.date_range('6/12/2010','12/8/2012', freq='W-SAT') ]
['20100612',
 '20100619',
 '20100626',
 '20100703',
...
</snippet></ROW><ROW><id>13804859</id><snippet>psutil</snippet></ROW><ROW><id>13804859</id><snippet>psutil.Process.nice</snippet></ROW><ROW><id>13804859</id><snippet>psutil</snippet></ROW><ROW><id>13804859</id><snippet>Process.nice</snippet></ROW><ROW><id>13804859</id><snippet>Process.set_nice</snippet></ROW><ROW><id>13804949</id><snippet>@view_config(route_name='myform', renderer='myform.mako')
def myform(request):
   if request.POST:
       # do stuff with submitted form ...       
   user ={'name': 'bob'}
   return {'user': user}
</snippet></ROW><ROW><id>13805167</id><snippet>py:class</snippet></ROW><ROW><id>13805167</id><snippet>pending_xref</snippet></ROW><ROW><id>13805167</id><snippet>pending_xref</snippet></ROW><ROW><id>13805202</id><snippet>reload</snippet></ROW><ROW><id>13805202</id><snippet>import</snippet></ROW><ROW><id>13805310</id><snippet>a = np.array([1,2,3,4,4,5])
a == np.roll(a,1)
</snippet></ROW><ROW><id>13805310</id><snippet>array([False, False, False, False,  True, False], dtype=bool
</snippet></ROW><ROW><id>13805310</id><snippet># generate 2d data
a = np.array((np.random.rand(5,5)) * 10, dtype=np.uint8)

# check all neighbours
for ax in range(len(a.shape)):
    for i in [-1,1]:
        print a == np.roll(a, i, axis=ax)
</snippet></ROW><ROW><id>13805500</id><snippet>funk()</snippet></ROW><ROW><id>13805500</id><snippet>x</snippet></ROW><ROW><id>13805500</id><snippet>x</snippet></ROW><ROW><id>13805500</id><snippet>import copy

def funk(x):
    x = copy.deepcopy(x)
    for i in x:
        i['a'] += 1
        print i

list1 = [{'a':1, 'b':2}, {'a':3, 'b':4}]
funk(list1)
print list1
</snippet></ROW><ROW><id>13805672</id><snippet>&gt;&gt;&gt; user_dict['salt'] = uuid.uuid4().hex
&gt;&gt;&gt; print_stderr(user_dict['salt'])
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; m = hashlib.sha512()
&gt;&gt;&gt; m.update(user_dict['pwd'])
&gt;&gt;&gt; m.update(user_dict['salt'])
&gt;&gt;&gt; user_dict['pwd'] = m.hexdigest()
&gt;&gt;&gt; print_stderr(user_dict['pwd'])
</snippet></ROW><ROW><id>13805844</id><snippet>from numpy import *
from numpy.random import *
k =  1000
s = 10000
mn = 0
mnPow = 0
for i in arange(k):
    a = randn(s)
    mn += mean(a)
    mnPow += mean(a**3)
print "Mean X: ", mn/k
print "Mean X^3: ", mnPow/k
</snippet></ROW><ROW><id>13805844</id><snippet>a = a-mean(a)</snippet></ROW><ROW><id>13805844</id><snippet>mn</snippet></ROW><ROW><id>13805844</id><snippet>mean(a - mean(a))</snippet></ROW><ROW><id>13805844</id><snippet>E[x - E[x]] = E[x] - E[E[x]] = E[x] - E[x] = 0
</snippet></ROW><ROW><id>13805949</id><snippet>print()</snippet></ROW><ROW><id>13805949</id><snippet>global</snippet></ROW><ROW><id>13805949</id><snippet>global guesses</snippet></ROW><ROW><id>13805949</id><snippet>+=</snippet></ROW><ROW><id>13805949</id><snippet>import random

def guessFunc():
    guesses = 0
    while guess != num:
        guess = input("Guess a number between 1 and 10: \n")
        guess = int(guess)
        guesses += 1 
    print("Congratulations, you got it right")
    return guesses

num = random.randint(1,10)
guesses = guessFunc()
</snippet></ROW><ROW><id>13805949</id><snippet>while</snippet></ROW><ROW><id>13805949</id><snippet>guesses</snippet></ROW><ROW><id>13805988</id><snippet>in</snippet></ROW><ROW><id>13805988</id><snippet>is</snippet></ROW><ROW><id>13805988</id><snippet>&gt;&gt;&gt; print(1) == print(2) == print(3)
1
2
3
True
&gt;&gt;&gt; print(1) == print(2) and print(2) == print(3)
1
2
2
3
True
</snippet></ROW><ROW><id>13805991</id><snippet>a = None
def foo():
    a = 5  # local 'a' shadows global 'a'
</snippet></ROW><ROW><id>13805991</id><snippet>a = [1, 2, 3]
def foo():
    a[:] = [5]  # modifies global 'a'
</snippet></ROW><ROW><id>13805991</id><snippet>Unresolved reference</snippet></ROW><ROW><id>13805991</id><snippet>global</snippet></ROW><ROW><id>13805991</id><snippet>a = None
def foo():
    global a
    a = 5  # rebinds global 'a'
</snippet></ROW><ROW><id>13806069</id><snippet>[]</snippet></ROW><ROW><id>13806069</id><snippet>None</snippet></ROW><ROW><id>13806069</id><snippet>False</snippet></ROW><ROW><id>13806069</id><snippet>False</snippet></ROW><ROW><id>13806069</id><snippet>&gt;&gt;&gt; [] == False
False
&gt;&gt;&gt; if []:
...     print "true!"
... else:
...     print "false!"
false!
</snippet></ROW><ROW><id>13806217</id><snippet>tell</snippet></ROW><ROW><id>13806217</id><snippet>csv</snippet></ROW><ROW><id>13806217</id><snippet>readline</snippet></ROW><ROW><id>13806217</id><snippet>readlines</snippet></ROW><ROW><id>13806217</id><snippet>tell</snippet></ROW><ROW><id>13806217</id><snippet>def generate_values(f):
    buf = "" # a buffer of data read from the file
    pos = 0  # the position of our buffer within the file

    while True: # loop until we return at the end of the file
        new_data = f.read(4096) # read up to 4k bytes at a time

        if not new_data: # quit if we got nothing
            if buf:
                yield pos, buf.split(",") # handle any data after last newline
            return

        buf += new_data
        line_start = 0 # index into buf

        try:
            while True: # loop until an exception is raised at end of buf
                line_end = buf.index("\n", line_start) # find end of line
                line = buf[line_start:line_end] # excludes the newline

                if line: # skips blank lines
                    yield pos+line_start, line.split(",") # yield pos,data tuple

                line_start = line_end+1
        except ValueError: # raised by `index()`
            pass

        pos += line_end + 1
        buf = buf[line_end + 1:] # keep left over data from end of the buffer
</snippet></ROW><ROW><id>13806217</id><snippet>\n</snippet></ROW><ROW><id>13806417</id><snippet>sorted</snippet></ROW><ROW><id>13806417</id><snippet>sorted((value, id1, id2) for id1, d1 in d.items() for id2, value in d1.items())
</snippet></ROW><ROW><id>13806489</id><snippet>inkscape:</snippet></ROW><ROW><id>13806489</id><snippet>http://www.inkscape.org/namespaces/inkscape</snippet></ROW><ROW><id>13806489</id><snippet>inkscape:groupmode</snippet></ROW><ROW><id>13806489</id><snippet>foo:groupmode</snippet></ROW><ROW><id>13806489</id><snippet>&lt;g&gt;</snippet></ROW><ROW><id>13806489</id><snippet>http://www.w3.org/2000/svg</snippet></ROW><ROW><id>13806489</id><snippet>from lxml import etree
root = etree.Element('{http://www.w3.org/2000/svg}svg')
g = etree.SubElement(root, '{http://www.w3.org/2000/svg}g', id='layer-id')
</snippet></ROW><ROW><id>13806489</id><snippet>&lt;ns0:svg xmlns:ns0="http://www.w3.org/2000/svg"&gt;
  &lt;ns0:g id="layer-id"/&gt;
&lt;/ns0:svg&gt;
</snippet></ROW><ROW><id>13806489</id><snippet>g.set('{http://www.inkscape.org/namespaces/inkscape}groupmode', 'layer')
g.set('{http://www.inkscape.org/namespaces/inkscape}label', 'layer-label')
</snippet></ROW><ROW><id>13806489</id><snippet>&lt;ns0:svg xmlns:ns0="http://www.w3.org/2000/svg"&gt;
  &lt;ns0:g xmlns:ns1="http://www.inkscape.org/namespaces/inkscape" id="layer-id" ns1:groupmode="layer" ns1:label="layer-label"/&gt;
&lt;/ns0:svg&gt;
</snippet></ROW><ROW><id>13806489</id><snippet>nsmap=</snippet></ROW><ROW><id>13806489</id><snippet>NSMAP = {
  None: 'http://www.w3.org/2000/svg',
'inkscape': 'http://www.inkscape.org/namespaces/inkscape',
}

root = etree.Element('{http://www.w3.org/2000/svg}svg', nsmap=NSMAP)
</snippet></ROW><ROW><id>13806489</id><snippet>&lt;svg xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns="http://www.w3.org/2000/svg"&gt;
  &lt;g id="layer-id" inkscape:label="layer-label" inkscape:groupmode="layer"/&gt;
&lt;/svg&gt;
</snippet></ROW><ROW><id>13806674</id><snippet>import collections

sentence = "No, I shouldn't be glad, YOU should be glad."

d = collections.defaultdict(list)
words = sentence.split()
for k, v in zip(words[:-1], words[1:]):
   d[k].append(v)
print(d)
</snippet></ROW><ROW><id>13806674</id><snippet>defaultdict(&lt;type 'list'&gt;, {'No,': ['I'], 'be': ['glad,', 'glad.'], 'glad,': ['YOU'], 'I': ["shouldn't"], 'should': ['be'], "shouldn't": ['be'], 'YOU': ['should']})
</snippet></ROW><ROW><id>13806867</id><snippet>ifs</snippet></ROW><ROW><id>13806867</id><snippet>def fmt(t):
    tenths = t % 10
    t //= 10
    sec = t % 60
    t //= 60
    min = t
    return '%d:%02d.%d' % (min, sec, tenths)

print(fmt(1234))
</snippet></ROW><ROW><id>13807016</id><snippet>html = g.response.body
</snippet></ROW><ROW><id>13807016</id><snippet>print type(html)
...
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>13807016</id><snippet>html = html.encode(enc, 'replace')
</snippet></ROW><ROW><id>13807016</id><snippet># decode the dowloaded data
html = g.response.body.decode(enc)

# html is now a unicode object
html = html.replace('bgcolor="EDF389"', 'bgcolor="#EDF389"')

print html

# encode as utf-8 before writing to file (no need for 'replace')
html = html.encode(enc)
</snippet></ROW><ROW><id>13807268</id><snippet>UNPACK_SEQUENCE</snippet></ROW><ROW><id>13807268</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>13807268</id><snippet>number=10000000</snippet></ROW><ROW><id>13807461</id><snippet>pip</snippet></ROW><ROW><id>13807461</id><snippet>easy_install</snippet></ROW><ROW><id>13807517</id><snippet>check</snippet></ROW><ROW><id>13807517</id><snippet>check.get()</snippet></ROW><ROW><id>13807517</id><snippet>def go():
        print(check.get())
        if(check.get() == 0):

                print("off")

                w.delete(ALL)
                tegnefladen()
                update()

        else:

                print("on")
                update()
</snippet></ROW><ROW><id>13807545</id><snippet>xlrd</snippet></ROW><ROW><id>13807545</id><snippet>book = xlrd.open_workbook(file_contents=response.read())
</snippet></ROW><ROW><id>13807545</id><snippet>file</snippet></ROW><ROW><id>13807545</id><snippet>filename</snippet></ROW><ROW><id>13807545</id><snippet>file_contents</snippet></ROW><ROW><id>13807545</id><snippet>file_contents</snippet></ROW><ROW><id>13807545</id><snippet>tempfile</snippet></ROW><ROW><id>13807573</id><snippet>import csv

from collections import defaultdict

agencies = defaultdict(list)

with open('file.csv', 'r') as handle:
    reader = csv.reader(handle)

    for row in reader:
        agencies[row[2]].append(row[0])
</snippet></ROW><ROW><id>13807573</id><snippet>agencies</snippet></ROW><ROW><id>13807795</id><snippet>ă 
</snippet></ROW><ROW><id>13807795</id><snippet>print 'ă'
</snippet></ROW><ROW><id>13807795</id><snippet>import x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "x.py", line 1
 SyntaxError: Non-ASCII character '\xc4' in file x.py on line 1, 
   but no encoding declared;
   see http://www.python.org/peps/pep-0263.html for details
</snippet></ROW><ROW><id>13807946</id><snippet>import subprocess

# ps -ux | grep 1842 (Assuming 1842 is the process id. replace with process id you get)

p1 = subprocess.Popen(["ps", "-ux"], stdout=subprocess.PIPE)
p2 = subprocess.Popen(["grep", "1842"], stdin=p1.stdout, stdout=subprocess.PIPE)
p1.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
output = p2.communicate()[0]
print output
</snippet></ROW><ROW><id>13808291</id><snippet>def check_datagram(datagram, src_comp, dst_app):
    if src_comp != datagram[0:16]:
        raise LookupError("Mismatch in src_comp")
    if dst_app != datagram[40:48]:
        raise LookupError("Mismatch in dst_app")
    if not verify_checksum(datagram):
        raise LookupError("Wrong checksum")
    return True # redundant?
</snippet></ROW><ROW><id>13808508</id><snippet>infile = open('hey.txt','r+')
content = infile.read()
text = ['foo','bar']
for item in text:
     content +=item  #adds 'foo' on first iteration, 'bar' on second
infile.write(content)
infile.close()
</snippet></ROW><ROW><id>13808508</id><snippet>infile = open('hey.txt','r+')
content = infile.read()
table = str.maketrans('foo','bar')
content = content.translate(table)  #replaces 'foo' with 'bar'
infile.write(content)
infile.close()
</snippet></ROW><ROW><id>13808508</id><snippet>infile = open('hey.txt.'r+')
content = infile.readlines() #reads line by line and out puts a list of each line
content[1] = 'This is a new line\n' #replaces content of the 2nd line (index 1)
infile.write(content)
infile.close()
</snippet></ROW><ROW><id>13808522</id><snippet>flatten()</snippet></ROW><ROW><id>13808522</id><snippet>from collections import Iterable

def flatten(l):
    for el in l:
        if isinstance(el, Iterable) and any(isinstance(subel, Iterable) for subel in el):
            for sub in flatten(el):
                yield sub
        else:
            yield el

my_list = [[2,3,2,2], [[2,1,2,1], [2,1,1]], [1,1,1]]
print(sum(1 for el in flatten(my_list) if 2 in el))
</snippet></ROW><ROW><id>13808522</id><snippet>3</snippet></ROW><ROW><id>13808878</id><snippet>plt.xlim</snippet></ROW><ROW><id>13808878</id><snippet>import matplotlib.pyplot as plt
import numpy as np
x = np.linspace(-1,101,100)
y = np.linspace(-1,101,100)
x, y = np.meshgrid(x, y)
z = x*x+y*y
plt.figure()
plt.xlim(0, 50)
plt.contourf(x, y, z)
plt.show()
</snippet></ROW><ROW><id>13808878</id><snippet>plt.xlim(0, 50)</snippet></ROW><ROW><id>13808878</id><snippet>plt.xlim(0,100)</snippet></ROW><ROW><id>13808878</id><snippet>plt.xlim(0, 50)</snippet></ROW><ROW><id>13809214</id><snippet>def sum_even(a, b):
    count = 0
    for i in range(a, b, 1):
        if(i % 2 == 0):
            count += i
    return count
</snippet></ROW><ROW><id>13809214</id><snippet>return count</snippet></ROW><ROW><id>13809214</id><snippet>[i]</snippet></ROW><ROW><id>13809214</id><snippet>i</snippet></ROW><ROW><id>13809214</id><snippet>range</snippet></ROW><ROW><id>13809214</id><snippet>&gt;&gt;&gt; range(3,7)
[3, 4, 5, 6]
</snippet></ROW><ROW><id>13809214</id><snippet>sum_even(3,7)</snippet></ROW><ROW><id>13809214</id><snippet>sum_even(3,8)</snippet></ROW><ROW><id>13809214</id><snippet>10</snippet></ROW><ROW><id>13809214</id><snippet>def sum_even(a, b):
    return sum(i for i in range(a, b + 1) if i % 2 == 0)
</snippet></ROW><ROW><id>13809272</id><snippet>Collection.find</snippet></ROW><ROW><id>13809272</id><snippet>tailable=True</snippet></ROW><ROW><id>13809297</id><snippet>&gt;&gt;&gt; '{:&lt;20} {}'.format('## execute', 'Execute an IRC command')
'## execute           Execute an IRC command'
</snippet></ROW><ROW><id>13809297</id><snippet>format()</snippet></ROW><ROW><id>13809297</id><snippet>&gt;&gt;&gt; '%-20s %s' % ('## execute', 'Execute an IRC command')
'## execute           Execute an IRC command'
</snippet></ROW><ROW><id>13809297</id><snippet>&gt;&gt;&gt; '{:&lt;20} {}'.format(*'{0} &lt;COMMAND&gt;: Help for &lt;command&gt;'.split(': '))
'{0} &lt;COMMAND&gt;        Help for &lt;command&gt;'

&gt;&gt;&gt; '%-20s %s' % tuple('{0} &lt;COMMAND&gt;: Help for &lt;command&gt;'.split(': '))
'{0} &lt;COMMAND&gt;        Help for &lt;command&gt;
</snippet></ROW><ROW><id>13809422</id><snippet>lower</snippet></ROW><ROW><id>13809422</id><snippet>any</snippet></ROW><ROW><id>13809422</id><snippet>&gt;&gt;&gt; stuff = ["oranges", "POTATOES", "Pencils", "PAper"]
&gt;&gt;&gt; any(s.lower() == 'paper' for s in stuff)
True
&gt;&gt;&gt; any(s.lower() == 'paperclip' for s in stuff)
False
</snippet></ROW><ROW><id>13809422</id><snippet>&gt;&gt;&gt; any("book" in (s.lower() for s in x) for x in stuff)
True
&gt;&gt;&gt; any("paper" in (s.lower() for s in x) for x in stuff)
True
&gt;&gt;&gt; any("stuff" in (s.lower() for s in x) for x in stuff)
False
</snippet></ROW><ROW><id>13809481</id><snippet>R=`formail -zxReply-to: | sed 's/.*&lt;//;s/&gt;.*//'`
:0
* ^From:.*@(helpicantfindgoogle\.com|searchengineshateme\.net|disabled\.org)\&gt;
* ^Subject:(.*[^0-9])?\/[0-9][0-9][0-9][0-9][0-9]?$
| scriptname.py --reply-to "$R" --number "$MATCH"
</snippet></ROW><ROW><id>13809481</id><snippet>formail</snippet></ROW><ROW><id>13809481</id><snippet>\/</snippet></ROW><ROW><id>13809481</id><snippet>helpicantfindgoogle.com</snippet></ROW><ROW><id>13809481</id><snippet>searchengineshateme.net</snippet></ROW><ROW><id>13809481</id><snippet>disabled.org</snippet></ROW><ROW><id>13809481</id><snippet>:0c</snippet></ROW><ROW><id>13809481</id><snippet>:0</snippet></ROW><ROW><id>13809481</id><snippet>:0
* ^From:.*@(helpicantfindgoogle.com|searchengineshateme\.net|disabled\.org)\&gt;
* ^Subject:(.*[^0-9])?\/[0-9][0-9][0-9][0-9][0-9]?$
{
  R=`formail -zxReply-To: | sed 's/.*&lt;//;s/&gt;.*//'`
  :0
  | scriptname.py --reply-to "$R" --number "$MATCH"
}
</snippet></ROW><ROW><id>13809481</id><snippet>{</snippet></ROW><ROW><id>13809481</id><snippet>}</snippet></ROW><ROW><id>13809481</id><snippet>$MATCH</snippet></ROW><ROW><id>13809481</id><snippet>$MATCH</snippet></ROW><ROW><id>13809586</id><snippet>rowvar</snippet></ROW><ROW><id>13809586</id><snippet>In [10]: np.cov(someVec, rowvar=0)
Out[10]: array(1.5833333333333333)

In [11]: np.cov(someVec.T, rowvar=0)
Out[11]: array(1.5833333333333333)
</snippet></ROW><ROW><id>13809586</id><snippet>NaN</snippet></ROW><ROW><id>13809586</id><snippet>N</snippet></ROW><ROW><id>13809586</id><snippet>(N-1)</snippet></ROW><ROW><id>13809586</id><snippet>1</snippet></ROW><ROW><id>13809586</id><snippet>In [12]: np.cov(someVec.T, bias=1)
Out[12]:
array([[ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.]])
</snippet></ROW><ROW><id>13809657</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>13809657</id><snippet>import ast

...

with open("/path/to/file", "r") as data:
    dictionary = ast.literal_eval(data.read())
</snippet></ROW><ROW><id>13809784</id><snippet>main()</snippet></ROW><ROW><id>13809784</id><snippet>argparse</snippet></ROW><ROW><id>13809784</id><snippet>--infile</snippet></ROW><ROW><id>13809784</id><snippet>readfile</snippet></ROW><ROW><id>13809784</id><snippet>infile</snippet></ROW><ROW><id>13809784</id><snippet>class Reader(object):
    def __init__(self, infile):
        self.infile = infile

    def readfile(self):
        # read(self.infile)
</snippet></ROW><ROW><id>13809784</id><snippet>def readfile(infile):
    # read(infile)
</snippet></ROW><ROW><id>13809784</id><snippet>settings</snippet></ROW><ROW><id>13809823</id><snippet>int</snippet></ROW><ROW><id>13809987</id><snippet>def goodness(s):
    return 0 if 'u' in s else s.count('g')

def substrings(s, length):
    "Generate all substrings of given length."
    for i in range(len(s) - length + 1):
        yield s[i:i+length]

print list(substrings('abcdefgh', 3)) # ['abc', 'bcd', 'cde', 'def', 'efg', 'fgh']   

def best_slice(s, length):
    """Return the 'best' substring."""
    return max(substrings(s, length), key=goodness)

print best_slice('abcgabgoguffg', 3) # 'gog'
</snippet></ROW><ROW><id>13810285</id><snippet>requests</snippet></ROW><ROW><id>13810285</id><snippet>signal</snippet></ROW><ROW><id>13810285</id><snippet>requests</snippet></ROW><ROW><id>13810285</id><snippet>pycurl</snippet></ROW><ROW><id>13810285</id><snippet>requests</snippet></ROW><ROW><id>13810414</id><snippet>&gt;&gt;&gt; g = lambda x:[lambda x:x*1, lambda x:x*x, lambda x:x*x*x, lambda x:42][x%4](x)
&gt;&gt;&gt; [g(x) for x in xrange(12)]
[0, 1, 8, 42, 4, 25, 216, 42, 8, 81, 1000, 42]
</snippet></ROW><ROW><id>13810414</id><snippet>[
 0,     # x is 0, x%4 is 0, so g(x) becomes (lambda x:x*1)(0) or 0*1
 1,     # x is 1, x%4 is 1, so g(x) becomes (lambda x:x*x)(1) or 1*1
 8,     # x is 2, x%4 is 2, so g(x) becomes (lambda x:x*x*x)(2) or 2*2*2
 42,    # x is 3, x%4 is 3, so g(x) becomes (lambda x:42)(3) or 42
 4,     # x is 4, x%4 is 0, so g(x) becomes (lambda x:x*1)(4) or 4*1
 25,    # x is 5, x%4 is 1, so g(x) becomes (lambda x:x*x)(5) or 5*5
 216,   # x is 6, x%4 is 2, so g(x) becomes (lambda x:x*x*x)(6) or 6*6*6
 42,    # x is 7, x%4 is 3, so g(x) becomes (lambda x:42)(7) or 42
 8,     # x is 8, x%4 is 0, so g(x) becomes (lambda x:x*1)(8) or 8*1
 81,    # x is 9, x%4 is 1, so g(x) becomes (lambda x:x*x)(9) or 9*9
 1000,  # x is 10, x%4 is 2, so g(x) becomes (lambda x:x*x*x)(10) or 10*10*10
 42     # x is 11, x%4 is 3, so g(x) becomes (lambda x:42)(11) or 42
]
</snippet></ROW><ROW><id>13810414</id><snippet>g(x)</snippet></ROW><ROW><id>13810414</id><snippet>x</snippet></ROW><ROW><id>13810414</id><snippet>xrange</snippet></ROW><ROW><id>13810414</id><snippet>g()</snippet></ROW><ROW><id>13810414</id><snippet>def</snippet></ROW><ROW><id>13810414</id><snippet>if</snippet></ROW><ROW><id>13810649</id><snippet>struct</snippet></ROW><ROW><id>13810649</id><snippet>double</snippet></ROW><ROW><id>13810649</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('d', b'\xab&gt;W[\xb1\xbf\xe0?')
(0.5234,)
</snippet></ROW><ROW><id>13810699</id><snippet>&gt;&gt;&gt; from fractions import Fraction as F
&gt;&gt;&gt; F("1/2")
Fraction(1, 2)
&gt;&gt;&gt; F("3/4")
Fraction(3, 4)
&gt;&gt;&gt; F("1/2") * F("3/4")
Fraction(3, 8)
&gt;&gt;&gt; F("1/2") + F("3/4")
Fraction(5, 4)
&gt;&gt;&gt; F(5, 8) + F(4, 7)
Fraction(67, 56)
</snippet></ROW><ROW><id>13810879</id><snippet>[httpd]
socket_options = [{nodelay, true}]
</snippet></ROW><ROW><id>13811090</id><snippet>infiniteFib</snippet></ROW><ROW><id>13811090</id><snippet>itertools</snippet></ROW><ROW><id>13811090</id><snippet>less_than_max = itertools.takewhile(lambda x: x&lt;MAX, infiniteFib))
even = itertools.ifilter(lambda x: x%2==0, less_than_max)
print sum(even)
</snippet></ROW><ROW><id>13811090</id><snippet>infiniteFib</snippet></ROW><ROW><id>13811090</id><snippet>MAX</snippet></ROW><ROW><id>13811214</id><snippet>for blast_record in blast_records:</snippet></ROW><ROW><id>13811214</id><snippet>for alignment in blast_record.alignments:</snippet></ROW><ROW><id>13811214</id><snippet>for l in fh:</snippet></ROW><ROW><id>13811214</id><snippet>fh.seek(0)</snippet></ROW><ROW><id>13811214</id><snippet>fh.seek(0)</snippet></ROW><ROW><id>13811270</id><snippet>is</snippet></ROW><ROW><id>13811270</id><snippet>if type(x) is str:
    return True
</snippet></ROW><ROW><id>13811270</id><snippet>if isinstance(x, str):
    return True
</snippet></ROW><ROW><id>13811270</id><snippet>isinstance(x, str)</snippet></ROW><ROW><id>13811270</id><snippet>isString(x)</snippet></ROW><ROW><id>13811289</id><snippet>https://lh6.ggpht.com/1HjICy6ju1e2GIg83L0qdliUBmPHUgKV8FP3QGK8Qf2pHVBfwkpO_V38ifAPm-9m20q_3ueZzdRCYQNyDE3pmA695iaLunjE=s0
</snippet></ROW><ROW><id>13811289</id><snippet>class Dynamic(db.Model):          # key : name
    name = db.StringProperty() 
    blob_ref = blobstore.BlobReferenceProperty()
    serving_url = db.LinkProperty()

dyn= Dynamic.get_by_key_name(key_name)
try :       # get url with size = 0
    dyn.serving_url = images.get_serving_url(dyn.blob_ref, size=None, secure_url=True)
except DeadlineExceededError : 
    try :             # sometimes this request fails, retry. This always works fine
        dyn.serving_url = images.get_serving_url(dyn.blob_ref, size=None, secure_url=True)
    except DeadlineExceededError :
        logging.error('Image API get_serving_url deadline error after retry' %(dyn.key().name()))                        
        return None
    dyn.put()
</snippet></ROW><ROW><id>13811351</id><snippet>matplotlib</snippet></ROW><ROW><id>13811351</id><snippet>imshow</snippet></ROW><ROW><id>13811351</id><snippet>image</snippet></ROW><ROW><id>13811351</id><snippet>import Image
import numpy as np

x = np.array([[1, 2, 3], [4, 5, 6]], np.int32)

im = Image.fromarray(x)
im.save('test.png')
</snippet></ROW><ROW><id>13811351</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.array([[1, 2, 3], [4, 5, 6]], np.int32)
plt.imshow(x) 
plt.savefig("array")
</snippet></ROW><ROW><id>13811371</id><snippet>def primes(n, skip_range=None):
    """Modified "primes" with the original assertion from P.S. of the question.
    with skipping of an unimportant huge range.
    &gt;&gt;&gt; primes(71)
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
    &gt;&gt;&gt; # The smallest failing number for the first failing prime 71:
    &gt;&gt;&gt; big_n = 10986448536829734695346889   
    &gt;&gt;&gt; primes(big_n + 2 * 71, (72, big_n))
    Traceback (most recent call last):
    AssertionError
    """
    if not skip_range:
        primes = list(range(2, n + 1))
    else:
        primes = list(range(2, skip_range[0]))
        primes.extend(range(skip_range[1], n + 1))
    p = 0
    while p &lt; len(primes):
        c = p + 1
        while c &lt; len(primes):
            if(primes[c] % primes[p] == 0):
                primes.pop(c)
                if c &lt; len(primes):
                    assert primes[c] % primes[p] != 0                
            c = c + 1
        p = p + 1       
    return primes

# Verify that it can fail.
aprime = 71   # the first problematic prime 
FIRST_BAD_NUMBERS = (
        10986448536829734695346889, 11078434793489708690791399,
        12367063025234804812185529, 20329913969650068499781719,
        30697401499184410328653969, 35961932865481861481238649,
        40008133490686471804514089, 41414505712084173826517629,
        49440212368558553144898949, 52201441345368693378576229)

for bad_number in FIRST_BAD_NUMBERS:
    try:
        primes(bad_number + 2 * aprime, (aprime + 1, bad_number))
        raise Exception('The number {} should fail'.format(bad_number))
    except AssertionError:
        print('{} OK. It fails as is expected'.format(bad_number))
</snippet></ROW><ROW><id>13811371</id><snippet>2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71</snippet></ROW><ROW><id>13811371</id><snippet>c = p ** n</snippet></ROW><ROW><id>13811371</id><snippet>c = p1 * p ** n</snippet></ROW><ROW><id>13811371</id><snippet>c = p1 ** n1 * p ** n</snippet></ROW><ROW><id>13811371</id><snippet>c - 2 * p</snippet></ROW><ROW><id>13811818</id><snippet>**</snippet></ROW><ROW><id>13811818</id><snippet>random.randint(lower, upper)</snippet></ROW><ROW><id>13811818</id><snippet>mylist = []
for _ in range(num):
    mylist.append(random.randint(lower, upper))

print mylist
</snippet></ROW><ROW><id>13811818</id><snippet>mylist = [random.randint(lower, upper) for _ in range(num)]
print mylist
</snippet></ROW><ROW><id>13811848</id><snippet>def space():
    return '\n'
</snippet></ROW><ROW><id>13811848</id><snippet>None</snippet></ROW><ROW><id>13811848</id><snippet>print()</snippet></ROW><ROW><id>13812020</id><snippet>In [13]: l = [1,2,3,4,5,6,7,8]

In [14]: result = [l[i:i+3] for i in xrange(0, len(l), 3)]

In [15]: result
Out[15]: [[1, 2, 3], [4, 5, 6], [7, 8]]
</snippet></ROW><ROW><id>13812020</id><snippet>n</snippet></ROW><ROW><id>13812020</id><snippet>n</snippet></ROW><ROW><id>13812020</id><snippet>i</snippet></ROW><ROW><id>13812020</id><snippet>range</snippet></ROW><ROW><id>13812020</id><snippet>In [21]: l = [1,2,3,4,5,6,7,8]

In [22]: chunk = int(round(len(l)/3.0))

In [23]: result = [l[i:i+chunk] for i in range(0,len(l),chunk)]

In [24]: result
Out[24]: [[1, 2, 3], [4, 5, 6], [7, 8]]

In [25]: l = [1,2,3,4,5]

In [26]: chunk = int(round(len(l)/3.0))

In [27]: result = [l[i:i+chunk] for i in range(0,len(l),chunk)]

In [28]: result
Out[28]: [[1, 2], [3, 4], [5]]
</snippet></ROW><ROW><id>13812020</id><snippet>for</snippet></ROW><ROW><id>13812020</id><snippet>In [17]: result = []

In [18]: for i in xrange(0, len(l), 3):
   ....:     result.append(l[i:i+3])
   ....:     
   ....:     

In [19]: result
Out[19]: [[1, 2, 3], [4, 5, 6], [7, 8]]
</snippet></ROW><ROW><id>13812293</id><snippet>&gt;&gt;&gt; 1.00
1.0
&gt;&gt;&gt; 1.0
1.0
&gt;&gt;&gt; 1.4560
1.456
&gt;&gt;&gt; 1.45600000
1.456
&gt;&gt;&gt; 1.40
1.4
</snippet></ROW><ROW><id>13812326</id><snippet>socket(PF_FILE, SOCK_STREAM, 0)         = 4
connect(4, {sa_family=AF_FILE, path="/var/run/abrt/abrt.socket"}, 27^C
&lt;unfinished ...&gt;
</snippet></ROW><ROW><id>13812326</id><snippet>abrtd</snippet></ROW><ROW><id>13812888</id><snippet>library(raster)

## Create a SpatialLines object
a &lt;- c(2.1, 3.9) 
b &lt;- c(3.8, 4.8)
## Method #1 -- Uses functions from the sp package.
SL &lt;- SpatialLines(list(Lines(list(Line(rbind(a,b))), "ab")))
## Method #2 -- Uses readWKT() from the rgeos package. Easier to read.
# library(rgeos)
# string &lt;- paste0("LINESTRING(", paste(a, b, collapse=", "), ")")
# SL &lt;- readWKT(string)

## Create a raster object
m &lt;- 10
n &lt;- 10
mat &lt;- matrix(seq_len(m*n), nrow = m, ncol = n)
r &lt;- raster(mat, xmn = 0, xmx = n, ymn = 0, ymx = m) 

## Find which cells are intersected &amp; get coordinates of their lower-left corners
ii &lt;- extract(r, SL, cellnumbers=TRUE)[[1]][, "cell"]
floor(xyFromCell(r, ii))
#      x y
# [1,] 2 4
# [2,] 3 4
# [3,] 2 3

## Confirm that this is correct with a plot
image(r)
plot(as(rasterize(SL, r), "SpatialPolygons"), 
     border = "darkgrey", lwd = 2, add = TRUE)
lines(SL)
</snippet></ROW><ROW><id>13812893</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def f(z,t):
    return np.exp(-z)*np.sin(t-z)

z = np.linspace(0,5,3001)
t = np.arange(0,40000,4000)

for tval in t:
    plt.plot(z, f(z, tval))
plt.show()
</snippet></ROW><ROW><id>13812948</id><snippet>OAuth2Decorator</snippet></ROW><ROW><id>13812948</id><snippet>from apiclient.discovery import build
import json
from oauth2client.appengine import OAuth2Decorator
import webapp2

decorator = OAuth2Decorator(
  client_id='your_client_id',
  client_secret='your_client_secret',
  scope='https://www.googleapis.com/auth/calendar')

service = build('calendar', 'v3')
</snippet></ROW><ROW><id>13812948</id><snippet>@decorator.oauth_required</snippet></ROW><ROW><id>13812948</id><snippet>class MainPage(webapp2.RequestHandler):
  @decorator.oauth_required
  def get(self):
    # This will force the user to go through OAuth
    self.response.write(...)
    # show some page to them
</snippet></ROW><ROW><id>13812948</id><snippet>POST</snippet></ROW><ROW><id>13812948</id><snippet>/add-event</snippet></ROW><ROW><id>13812948</id><snippet>AddEvent</snippet></ROW><ROW><id>13812948</id><snippet>oauth_required</snippet></ROW><ROW><id>13812948</id><snippet>@decorator.oauth_aware</snippet></ROW><ROW><id>13812948</id><snippet>POST</snippet></ROW><ROW><id>13812948</id><snippet>class AddEvent(webapp2.RequestHandler):
  @decorator.oauth_aware
  def post(self):
    if decorator.has_credentials():          
      event_name = self.request.get('event-name')
      some_event = {...}  # Create event here
      # Documented at
      # https://developers.google.com/google-apps/calendar/v3/reference/events/insert

      http = decorator.http()
      # Using 'primary' will insert the event for the current user
      request = service.events().insert(calendarId='primary', body=some_event)
      inserted = request.execute(http=http)
      self.response.write(json.dumps(inserted))
    else:
      self.response.write(json.dumps({'error': 'No credentials'})
</snippet></ROW><ROW><id>13812948</id><snippet>app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/add-event', AddEvent),
    (decorator.callback_path, decorator.callback_handler())
    ],
    debug=True)
</snippet></ROW><ROW><id>13813012</id><snippet>if</snippet></ROW><ROW><id>13813012</id><snippet>int</snippet></ROW><ROW><id>13813012</id><snippet>float</snippet></ROW><ROW><id>13813012</id><snippet>quote</snippet></ROW><ROW><id>13813012</id><snippet>context = {'a': 'a b c', 'b': ('a', '@', 'c'), 'c': 1}
queryString = ''

for key in context:
    if isinstance(context[key],collections.Iterable):
        queryString += '%s=%s&amp;' % (key, urllib.quote(context[key]))
    else:
        queryString += '%s=%s&amp;' % (key, context[key])

print queryString
# a=a%20b%20c&amp;c=1&amp;b=a%40c&amp;
</snippet></ROW><ROW><id>13813012</id><snippet>quote</snippet></ROW><ROW><id>13813012</id><snippet>for key in context:
    queryString += '%s=%s&amp;' % (key, context[key])

# invalid url format
# a=a b c&amp;c=1&amp;b=('a', '@', 'c')&amp;
</snippet></ROW><ROW><id>13813012</id><snippet>quote</snippet></ROW><ROW><id>13813012</id><snippet>for key in context:
    queryString += '%s=%s&amp;' % (key, urllib.quote(context[key]))
...
TypeError: argument 2 to map() must support iteration
</snippet></ROW><ROW><id>13813034</id><snippet>map</snippet></ROW><ROW><id>13813034</id><snippet>&gt;&gt;&gt; a = ['123', '456', '789']
&gt;&gt;&gt; map(list, a)
[['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
</snippet></ROW><ROW><id>13813034</id><snippet>map</snippet></ROW><ROW><id>13813034</id><snippet>list</snippet></ROW><ROW><id>13813145</id><snippet>with</snippet></ROW><ROW><id>13813145</id><snippet>writeheaders</snippet></ROW><ROW><id>13813145</id><snippet>csv</snippet></ROW><ROW><id>13813145</id><snippet>import csv

with open('testfile', 'rb') as f:
  with open('outcsv.csv', 'wb') as o:
    # Specify your field names
    fieldnames = ('id', 'red', 'green', 'blue', 'yellow', 'black')

    # Here we create a DictWriter, since your data is suited for one
    writer = csv.DictWriter(o, fieldnames=fieldnames)

    # Write the header row
    writer.writerow(dict((h, h) for h in fieldnames))

    # General idea here is to build a row until we hit a blank line,
    # at which point we write our current row and continue
    new_row = {}
    for line in f.readlines():
      # This will split the line on a comma/space combo and then
      # Strip off any commas/spaces that end a word
      row = [x.strip(', ') for x in line.strip().split(', ')]
      if not row[0]:
        writer.writerow(new_row)
        new_row = {}
      else:
        # Here we write a blank string if there is no corresponding value;
        # otherwise, write the value
        new_row[row[0]] = '' if len(row) == 1 else row[1].strip()

    # Check new_row - if not blank, it hasn't been written (so write)
    if new_row:
      writer.writerow(new_row)
</snippet></ROW><ROW><id>13813145</id><snippet>id,red,green,blue,yellow,black
x,"2,8","2,4",x,,x
x,,,"4,3",x,x
x,x,x,x,,x
x,x,x,x,,
x,x,x,x,,x
</snippet></ROW><ROW><id>13813151</id><snippet>dict</snippet></ROW><ROW><id>13813151</id><snippet>str</snippet></ROW><ROW><id>13813151</id><snippet>__str__</snippet></ROW><ROW><id>13813151</id><snippet>f_name</snippet></ROW><ROW><id>13813151</id><snippet>user_info["f_name"]</snippet></ROW><ROW><id>13813151</id><snippet>e_address</snippet></ROW><ROW><id>13813151</id><snippet>password</snippet></ROW><ROW><id>13813151</id><snippet>e_address</snippet></ROW><ROW><id>13813151</id><snippet>password</snippet></ROW><ROW><id>13813240</id><snippet>-f</snippet></ROW><ROW><id>13813240</id><snippet>--file</snippet></ROW><ROW><id>13813240</id><snippet>execfile()</snippet></ROW><ROW><id>13813240</id><snippet>SYSTEM_MANAGER</snippet></ROW><ROW><id>13813240</id><snippet>CF</snippet></ROW><ROW><id>13813353</id><snippet>$ python test.py arg1 arg2 arg3
</snippet></ROW><ROW><id>13813353</id><snippet>import sys

print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)
</snippet></ROW><ROW><id>13813353</id><snippet>Number of arguments: 4 arguments.
Argument List: ['test.py', 'arg1', 'arg2', 'arg3']
</snippet></ROW><ROW><id>13813411</id><snippet>random.py</snippet></ROW><ROW><id>13813411</id><snippet>random</snippet></ROW><ROW><id>13813411</id><snippet>import random</snippet></ROW><ROW><id>13813411</id><snippet>random</snippet></ROW><ROW><id>13813411</id><snippet>random</snippet></ROW><ROW><id>13813411</id><snippet>import random</snippet></ROW><ROW><id>13813411</id><snippet>random.random</snippet></ROW><ROW><id>13813411</id><snippet>random.random()</snippet></ROW><ROW><id>13813431</id><snippet>In [35]: l = [u'Master Developer']

In [36]: str(l[0])
Out[36]: 'Master Developer'
</snippet></ROW><ROW><id>13813431</id><snippet>In [37]: l[0].encode('utf-8')
Out[37]: 'Master Developer'
</snippet></ROW><ROW><id>13813446</id><snippet>class Transaction(models.Model):
    @property
    def dec_amount(self):
        return Decimal(self.amount / 100).quantize(Decimal('0.01'))
</snippet></ROW><ROW><id>13813575</id><snippet>n1 = 0
n2 = 1
while n1 != n2:
    n1 = my_random_function()
    n2 = my_random_function()
</snippet></ROW><ROW><id>13813575</id><snippet>while True:
    a = random_function()
    b = random_function()
    if a == b:
        break
</snippet></ROW><ROW><id>13813796</id><snippet>morphological opening and closing operations.</snippet></ROW><ROW><id>13813796</id><snippet>cv2.morphologyEx</snippet></ROW><ROW><id>13813796</id><snippet>MORPH_OPEN, MORPH_CLOSE</snippet></ROW><ROW><id>13813796</id><snippet>cv2.erode and cv2.dilate</snippet></ROW><ROW><id>13813909</id><snippet>with open("%s.csv" %query, 'rb') as input_file</snippet></ROW><ROW><id>13813909</id><snippet>with open("%s.txt" %query, 'wb') as output_file</snippet></ROW><ROW><id>13813909</id><snippet>query</snippet></ROW><ROW><id>13813925</id><snippet>(?P&lt;name_of_variable&gt;(group to name))</snippet></ROW><ROW><id>13813925</id><snippet>base64_pattern = r'(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
urlpatterns = patterns('',
    (r'^foo/bar/(?P&lt;base64string&gt;{})'.format(base64_pattern), 'mymethod'),
    # your other patterns
)

# in the view

def mymethod(request, base64string):
   # do stuff with base64string
</snippet></ROW><ROW><id>13814520</id><snippet>even_numbers</snippet></ROW><ROW><id>13814520</id><snippet>class EvenNumbers(object):

    # Add other container methods as needed

    def __contains__(self, value):
        return value % 2 == 0

even_numbers = EvenNumbers()
</snippet></ROW><ROW><id>13814520</id><snippet>&gt;&gt;&gt; 3 in even_numbers
False
&gt;&gt;&gt; 4 in even_numbers
True
</snippet></ROW><ROW><id>13814543</id><snippet>(function($){   
    $(function(){
        $(document).ready(function() {
            $('#id_Project').bind('change', project_change);            
            $('#id_Milestone &gt; option').show();
            if ($('#id_Project').val() != '') {
                var project_id = $('#id_Project').val();
                $.ajax({
                "type"      : "GET",
              "url"         : "/product_change/?project_id="+project_id,
                "dataType"  : "json",
              "cache"       : false,
                "success"   : function(json) {
                    $('#id_Milestone &gt;option').remove();
                    for(var j = 0; j &lt; json.length; j++){
                        $('#id_Milestone').append($('&lt;option&gt;&lt;/option&gt;').val(json[j][0]).html(json[j][1]));
                    }
                }           
            });
            }
        });
    });  
})(django.jQuery);

// based on the project, milestone will be loaded

var $ = django.jQuery.noConflict();

function project_change()
{
    var project_id = $('#id_Project').val();
    $.ajax({
    "type"      : "GET",
  "url"         : "/product_change/?project_id="+project_id,
    "dataType"  : "json",
  "cache"       : false,
    "success"   : function(json) {
        $('#id_Milestone &gt; option').remove();
        for(var j = 0; j &lt; json.length; j++){
            $('#id_Milestone').append($('&lt;option&gt;&lt;/option&gt;').val(json[j][0]).html(json[j][1]));
        }
    }           
})(jQuery);
}
</snippet></ROW><ROW><id>13814543</id><snippet>from django.shortcuts import HttpResponse
from django.utils import simplejson

from ticket.models import Milestone

def project_choices(request): 
    milestone_list = []
    project_id = request.GET.get('project_id')
    milestones = Milestone.objects.filter(project = project_id)    
    [milestone_list.append((each_milestone.pk,each_milestone.name)) for each_milestone in milestones]
    json = simplejson.dumps(milestone_list)
    return HttpResponse(json, mimetype='application/javascript')
</snippet></ROW><ROW><id>13814543</id><snippet>from ticket.views import project_choices

urlpatterns = patterns(
    (r'^product_change/', project_choices),
)
</snippet></ROW><ROW><id>13814543</id><snippet>class Media:
    js = ['/path/to/project_change.js',]
</snippet></ROW><ROW><id>13814766</id><snippet>raise</snippet></ROW><ROW><id>13814766</id><snippet>try:
    for contents in os.listdir(self.file_source_location):
        src_file = os.path.join(self.file_source_location, contents)
        dst_file = os.path.join(self.file_move_location, contents)
        shutil.move(src_file, dst_file)
    print'files_moved_success'
    driver.find_element_by_link_text("check out - definition of check out by the Free Online Dictionary ...").click()
except Exception as e:
    print e
    raise # Raise the exception that brought you here 
</snippet></ROW><ROW><id>13814766</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>13814766</id><snippet>print e</snippet></ROW><ROW><id>13814766</id><snippet>import sys
# ...
try:
    for contents in os.listdir(self.file_source_location):
        src_file = os.path.join(self.file_source_location, contents)
        dst_file = os.path.join(self.file_move_location, contents)
        shutil.move(src_file, dst_file)
    print'files_moved_success'
    driver.find_element_by_link_text("check out - definition of check out by the Free Online Dictionary ...").click()
except Exception as e:
    print e
    sys.exit(1)
</snippet></ROW><ROW><id>13814807</id><snippet>.msi</snippet></ROW><ROW><id>13814807</id><snippet>setup.py</snippet></ROW><ROW><id>13814807</id><snippet>python setup.py bdist_msi</snippet></ROW><ROW><id>13814807</id><snippet>.msi</snippet></ROW><ROW><id>13814807</id><snippet>.msi</snippet></ROW><ROW><id>13814807</id><snippet>.exe</snippet></ROW><ROW><id>13814807</id><snippet>.msi</snippet></ROW><ROW><id>13814959</id><snippet>@app.route('/')
@app.route('/emails')
@app.route('/emails/')
@app.route("/emails/&lt;int:offset1&gt;/&lt;int:offset2&gt;")
def list_emaildb(offset1=0, offset2=config.EMAIL_RANGE):
   ...
</snippet></ROW><ROW><id>13814959</id><snippet>@app.route('/emails')</snippet></ROW><ROW><id>13814959</id><snippet>/emails</snippet></ROW><ROW><id>13814959</id><snippet>/emails/</snippet></ROW><ROW><id>13814959</id><snippet>/emails</snippet></ROW><ROW><id>13815046</id><snippet>libNMF</snippet></ROW><ROW><id>13815072</id><snippet>super()</snippet></ROW><ROW><id>13815072</id><snippet>__init__</snippet></ROW><ROW><id>13815072</id><snippet>class Base(object):
    def __init__(self, collection=None, classname=None):
        self.__collection__ = collection or self.__class__.__name__

class Thing(Base):
    def __init__(self, **kwargs):
        #super(Thing, self).__init__()
        Base.__init__(self, **kwargs)
        #self.__dict__.update(kwargs)


t = Thing(collection='foobar')
print(t.__collection__)
</snippet></ROW><ROW><id>13815106</id><snippet>#!/home/python
import cgi
import cgitb
cgitb.enable()

print 'Content-type: text/html\r\n\r'
print '&lt;html&gt;'
print '&lt;h1&gt;Please enter a keyword of your choice&lt;/h1&gt;'
print '&lt;form action="next.cgi" method="get"&gt;'
print 'Keyword: &lt;input type="text" name="keyword"&gt;  &lt;br /&gt;'
print '&lt;input type="submit" value="Submit" /&gt;'
print '&lt;/form&gt;'
print '&lt;/html&gt;'
</snippet></ROW><ROW><id>13815106</id><snippet>#!/home/python
import cgi
import cgitb
cgitb.enable()

form = cgi.FieldStorage()

keyword = form.getvalue('keyword')

print 'Content-type: text/html\r\n\r'
print '&lt;html&gt;'
print keyword
print '&lt;/html&gt;'
</snippet></ROW><ROW><id>13815310</id><snippet>CustomAvg = Avg[Height] + Avg[Weight]
</snippet></ROW><ROW><id>13815310</id><snippet>Height</snippet></ROW><ROW><id>13815310</id><snippet>Weight</snippet></ROW><ROW><id>13815310</id><snippet>CustomAvg</snippet></ROW><ROW><id>13815310</id><snippet>assign_var</snippet></ROW><ROW><id>13815310</id><snippet>def assign_var(tokens):
    # ev = tokens.varvalue.eval()
    # EvalConstant.var_[tokens.varname] = ev
    EvalConstant.var_[tokens.varname] = tokens.varvalue
</snippet></ROW><ROW><id>13815310</id><snippet>EvalConstant.eval</snippet></ROW><ROW><id>13815310</id><snippet>def eval(self):
    v = self.value
    if v in self.var_:  # has_key is deprecated Python, use 'in'
        varval = self.var_[v]
        return varval.eval() if hasattr(varval,'eval') else varval
    else:
        return float(v)
</snippet></ROW><ROW><id>13815310</id><snippet>CustomAvg = Avg[Height] + Avg[Weight]    # store as a constant
CustomAvg *= Avg[Height] + Avg[Weight]   # store as a callable
</snippet></ROW><ROW><id>13815310</id><snippet>assign</snippet></ROW><ROW><id>13815310</id><snippet>assign = var("varname") + oneOf("= *=")("assign_op") + expr("varvalue")
</snippet></ROW><ROW><id>13815310</id><snippet>assign_var</snippet></ROW><ROW><id>13815310</id><snippet>def assign_var(tokens):
    if tokens.assign_op == '*=':
        # store expression to be eval'ed later
        EvalConstant.var_[tokens.varname] = tokens.varvalue
    else:
        # eval now and save result
        EvalConstant.var_[tokens.varname] = tokens.varvalue.eval()
</snippet></ROW><ROW><id>13815741</id><snippet>.. exmpl:cfunction:: ExMplSet

ExMpl* ExMplSet( int flags, int size, ExStorage* storage )
</snippet></ROW><ROW><id>13815837</id><snippet>from fabric.api import local
my_branch = local('git rev-parse --abbrev-ref HEAD', capture=True)
</snippet></ROW><ROW><id>13816067</id><snippet>z = np.zeros([N, N, 3])
z[:,:,0] = x.reshape(-1,1)
z[:,:,1] = x
fast_grid = z.reshape(N*N, 3)

print np.all( grid == fast_grid ) 
True
</snippet></ROW><ROW><id>13816102</id><snippet>class SourceManager(models.Manager):
    url_source = None
    def get_generic(self):
        if self.url_source is None:
            self.url_source, created = self.get_or_create(name = 'URL', quality = 0)
        return self.url_source

class Source(models.Model):
    name = models.CharField(max_length = 50)
    quality = models.IntegerField(default = 0)

    objects = SourceManager()
</snippet></ROW><ROW><id>13816102</id><snippet>models.ForeignKey</snippet></ROW><ROW><id>13816102</id><snippet>source__quality</snippet></ROW><ROW><id>13816102</id><snippet>Source</snippet></ROW><ROW><id>13816219</id><snippet>In [61]: any(d.get('a', None) == 5 for d in array)
Out[61]: True
</snippet></ROW><ROW><id>13816219</id><snippet>In [64]: check = lambda arr, (k, v): any(d.get(k, None) == v for d in arr)

In [65]: check(array, ('a', 5))
Out[65]: True

In [66]: check(array, ('z', 5))
Out[66]: False
</snippet></ROW><ROW><id>13816598</id><snippet>     elif k == "alternatenames":
        r[k] = [name.strip() for name in v.split(",")]
</snippet></ROW><ROW><id>13816694</id><snippet>from mechanize import Browser
browser = Browser()
response = browser.open('http://www.google.com')
print response.code
</snippet></ROW><ROW><id>13816694</id><snippet>&gt;&gt;&gt;import requests
&gt;&gt;&gt; r = requests.get('http://httpbin.org/get')
&gt;&gt;&gt; r.status_code
200
</snippet></ROW><ROW><id>13816744</id><snippet>//*[contains(concat(' ', normalize-space(@class), ' '), ' class2 ')]
</snippet></ROW><ROW><id>13816908</id><snippet>.super()</snippet></ROW><ROW><id>13817209</id><snippet>error: X11 libraries not found.</snippet></ROW><ROW><id>13817209</id><snippet>psycopg2</snippet></ROW><ROW><id>13817209</id><snippet>python-psycopg2</snippet></ROW><ROW><id>13817209</id><snippet>sudo apt-get build-dep python-pyscopg2</snippet></ROW><ROW><id>13817209</id><snippet>apt-get build-dep python-enable</snippet></ROW><ROW><id>13817209</id><snippet># apt-get build-dep python-enable
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following NEW packages will be installed:
  cdbs libblas3gf libdrm-intel1 libdrm-radeon1 libdrm2 libfreetype6-dev
  libgl1-mesa-dev libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa
  libglu1-mesa-dev liblapack3gf libpaper-utils libpaper1 libpthread-stubs0
  libpthread-stubs0-dev libx11-dev libxau-dev libxcb1-dev libxdamage1
  libxdmcp-dev libxfixes3 libxslt1.1 libxxf86vm1 mesa-common-dev
  python-chardet python-docutils python-lxml python-numpy python-pygments
  python-pyrex python-roman python-setupdocs python-sphinx swig x11-common
  x11proto-core-dev x11proto-input-dev x11proto-kb-dev xtrans-dev
0 upgraded, 40 newly installed, 0 to remove and 0 not upgraded.
Need to get 35.5 MB of archives.
After this operation, 97.3 MB of additional disk space will be used.
</snippet></ROW><ROW><id>13817399</id><snippet>\r</snippet></ROW><ROW><id>13817399</id><snippet>\n</snippet></ROW><ROW><id>13817399</id><snippet>os.linesep</snippet></ROW><ROW><id>13817399</id><snippet>\r\n</snippet></ROW><ROW><id>13817399</id><snippet>newline</snippet></ROW><ROW><id>13817399</id><snippet>open()</snippet></ROW><ROW><id>13817491</id><snippet>__init__.py</snippet></ROW><ROW><id>13817491</id><snippet>pr</snippet></ROW><ROW><id>13817491</id><snippet>__init__.py</snippet></ROW><ROW><id>13817491</id><snippet>from pr.core.predictor import Predictor</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel.py</snippet></ROW><ROW><id>13817491</id><snippet>pr_app.py</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel.py</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel</snippet></ROW><ROW><id>13817491</id><snippet>predict_panel</snippet></ROW><ROW><id>13817491</id><snippet>PrApp</snippet></ROW><ROW><id>13817617</id><snippet>def longtask(self):
    def step_generator(step):
        for x in self.perform_step(step):
            ...
            yield x.id

    yield step_length_1, step_one_generator(1)
    yield step_length_2, step_one_generator(2)

generators = self.longtask()
for counter, (steplength, stepgen) in enumerate(generators):
    ProgressBar('Step %d' % counter, steplength)
    for index, value in enumerate(stepgen):
        # ....
</snippet></ROW><ROW><id>13817617</id><snippet>enumerate()</snippet></ROW><ROW><id>13817617</id><snippet>xrange()</snippet></ROW><ROW><id>13818037</id><snippet>keywords</snippet></ROW><ROW><id>13818162</id><snippet>{% if request.LANGUAGE_CODE == 'en' %}
    &lt;h1&gt;English&lt;/h1&gt;
{% endif %}
</snippet></ROW><ROW><id>13818162</id><snippet>{% ifequal request.LANGUAGE_CODE 'en' %}
    ...
{% endifequal %}
</snippet></ROW><ROW><id>13818471</id><snippet>[</snippet></ROW><ROW><id>13818471</id><snippet>[</snippet></ROW><ROW><id>13818471</id><snippet>]</snippet></ROW><ROW><id>13818471</id><snippet>]</snippet></ROW><ROW><id>13818471</id><snippet>([0x[0-9a-f]{2,2}]+)</snippet></ROW><ROW><id>13818471</id><snippet>[0x[0-9a-f]{2,2}]+
^^^^^^^^^^^
character group with the characters: 0, x, [, 0-9, a-f
           ^^^^^
           two of those
                ^^
                followed by at least one ]
</snippet></ROW><ROW><id>13818471</id><snippet>00]
00]]]]]]]]]
[[]
xx]
ff]
</snippet></ROW><ROW><id>13818471</id><snippet>{2,2}</snippet></ROW><ROW><id>13818471</id><snippet>{2}</snippet></ROW><ROW><id>13818471</id><snippet>((0x[0-9a-f]{2})+)
</snippet></ROW><ROW><id>13818471</id><snippet>?:</snippet></ROW><ROW><id>13818471</id><snippet>(?:...)</snippet></ROW><ROW><id>13818471</id><snippet>((?:0x[0-9a-f]{2})+)
</snippet></ROW><ROW><id>13818544</id><snippet>CREATE TABLE ... AS SELECT</snippet></ROW><ROW><id>13818544</id><snippet>commit()</snippet></ROW><ROW><id>13818544</id><snippet>import sqlite3
conn = sqlite3.connect(example.db")
cur = conn.cursor()
cur.execute("DROP TABLE IF EXISTS origin_dictionary")
cur.execute("CREATE TABLE origin_dictionary AS SELECT * FROM dictionary")
conn.commit()
conn.close()
</snippet></ROW><ROW><id>13818707</id><snippet>os.path</snippet></ROW><ROW><id>13818707</id><snippet>import os.path
i = 3
print os.path.join("C:\Test", str(i) + ".jpg")
</snippet></ROW><ROW><id>13818707</id><snippet>int</snippet></ROW><ROW><id>13818707</id><snippet>int()</snippet></ROW><ROW><id>13818832</id><snippet>def on_change_float(self, cr, uid, ids, test1, context=None):
    val = float(test1)
    except Exception:
        raise osv.except_osv('Input Error ! ', 'Please enter numbers.')
    return {'value': {'test1': val}}
</snippet></ROW><ROW><id>13819068</id><snippet>mylist = [2*math.pi*radius*math.cos(phi[i]) for i in range(num)]
</snippet></ROW><ROW><id>13819068</id><snippet>In [78]: import numpy as np

In [79]: phi = np.array([1, 2, 3, 4])

In [80]: radius = 6

In [81]: 2 * np.pi * radius * np.cos(phi)
Out[81]: array([ 20.36891706, -15.68836613, -37.32183785, -24.64178397])
</snippet></ROW><ROW><id>13819068</id><snippet>phi</snippet></ROW><ROW><id>13819084</id><snippet>for i in range(10):
    filename = "C:\\%d.txt" % i
    with open(filename, 'a') as f:
        ....
</snippet></ROW><ROW><id>13819156</id><snippet>.. automodule:: mymodule
    :members:
    :exclude-members: MyClass

    .. autoclass:: MyClass(first, second, third)
</snippet></ROW><ROW><id>13819156</id><snippet>MyClass</snippet></ROW><ROW><id>13819156</id><snippet>mymodule</snippet></ROW><ROW><id>13819156</id><snippet>MyClass</snippet></ROW><ROW><id>13819156</id><snippet>:exclude-members:</snippet></ROW><ROW><id>13819778</id><snippet>str()</snippet></ROW><ROW><id>13819778</id><snippet>__mod__</snippet></ROW><ROW><id>13819778</id><snippet>n</snippet></ROW><ROW><id>13819778</id><snippet>int()</snippet></ROW><ROW><id>13819778</id><snippet>str()</snippet></ROW><ROW><id>13819778</id><snippet>__mod__</snippet></ROW><ROW><id>13819778</id><snippet>&gt;&gt;&gt; class noformattingstr(str):
...     def __mod__(self, other):
...         raise TypeError('String formatting using "%" has been deprecated')
... 
&gt;&gt;&gt; noformattingstr('hello world: %d') % 10
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __mod__
TypeError: String formatting using "%" has been deprecated
</snippet></ROW><ROW><id>13819778</id><snippet>__builtins__.str</snippet></ROW><ROW><id>13819778</id><snippet>str()</snippet></ROW><ROW><id>13819778</id><snippet>noformattingstr()</snippet></ROW><ROW><id>13820164</id><snippet>class Color:
    ...
</snippet></ROW><ROW><id>13820164</id><snippet>from colorExtentions import *

colors = Color.__subclasses__()
</snippet></ROW><ROW><id>13820164</id><snippet>Color</snippet></ROW><ROW><id>13820164</id><snippet>object</snippet></ROW><ROW><id>13820164</id><snippet>__subclasses__()</snippet></ROW><ROW><id>13820466</id><snippet>pairwise()</snippet></ROW><ROW><id>13820466</id><snippet>&gt;&gt;&gt; from itertools import tee
&gt;&gt;&gt; def pairwise(iterable):
...     "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
...     a, b = tee(iterable)
...     next(b, None)
...     return zip(a, b)
...
&gt;&gt;&gt; for pair in pairwise({1, 2, 3, 4}):
...     print(pair)
...
(1, 2)
(2, 3)
(3, 4)
</snippet></ROW><ROW><id>13820968</id><snippet>parser.add_option("--file-name", dest="file_name")
parser.add_option("--file-action", dest="file_action")
</snippet></ROW><ROW><id>13820968</id><snippet>if options.file_name:
    #do code relating to file_action
</snippet></ROW><ROW><id>13820968</id><snippet>if options.file_action and not options.file_name:
    raise ValueError("No Filename specified")
# do your code here.
</snippet></ROW><ROW><id>13821316</id><snippet>add()</snippet></ROW><ROW><id>13821316</id><snippet>page</snippet></ROW><ROW><id>13821316</id><snippet>if 'form.submitted' in request.params:
    page.title = request.params['title']
    page.content = request.params['content']
    page.no_idea_what = datetime.now()
    DBSession.commit()
</snippet></ROW><ROW><id>13821316</id><snippet>def do_edit_whatever(obj):
    # Populate the fields here
    if obj.id is None:
        db.session.add(obj)
    db.session.commit()
</snippet></ROW><ROW><id>13821316</id><snippet>Page()</snippet></ROW><ROW><id>13821450</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>13821624</id><snippet>app = DebuggedApplication(app, True)
</snippet></ROW><ROW><id>13821624</id><snippet>app.wsgi_app = DebuggedApplication(app.wsgi_app, True)
</snippet></ROW><ROW><id>13821624</id><snippet>flask.Flask</snippet></ROW><ROW><id>13821655</id><snippet>query</snippet></ROW><ROW><id>13821655</id><snippet>try:
    query = [sys.argv[1]]
except IndexError:
    query = data

for q in query:
    # do something with q
</snippet></ROW><ROW><id>13821878</id><snippet>subprocess</snippet></ROW><ROW><id>13821878</id><snippet>log.tell()</snippet></ROW><ROW><id>13821878</id><snippet>0</snippet></ROW><ROW><id>13821878</id><snippet>with</snippet></ROW><ROW><id>13821878</id><snippet>log</snippet></ROW><ROW><id>13821878</id><snippet>wait()</snippet></ROW><ROW><id>13821878</id><snippet>Process</snippet></ROW><ROW><id>13821878</id><snippet>import subprocess
from os import linesep, stat 

with open(r"test.txt","a") as log:
    Process = subprocess.Popen(['dir'],
                               stdout = log, stderr = log,
                               shell=True)
    Process.wait()

with open(r"test.txt","a") as log:
# this prints 0
    print log.tell()
# get the length of the file log
    pos = stat(r"test.txt").st_size
    print pos
# go to the end of log
    log.seek(pos)
    Process = subprocess.Popen(['dir'],
                               stdout = log, stderr = log,
                               shell=True)
</snippet></ROW><ROW><id>13821888</id><snippet>*args</snippet></ROW><ROW><id>13821888</id><snippet>def foo(func, named_arg=None, *args):
</snippet></ROW><ROW><id>13821888</id><snippet>**kw</snippet></ROW><ROW><id>13821888</id><snippet>*args</snippet></ROW><ROW><id>13821888</id><snippet>def foo(func, named_arg=None, *args, **kw):
</snippet></ROW><ROW><id>13821888</id><snippet>*args</snippet></ROW><ROW><id>13821888</id><snippet>func</snippet></ROW><ROW><id>13821888</id><snippet>named_arg</snippet></ROW><ROW><id>13821888</id><snippet>&gt;&gt;&gt; def foo(func, named_arg = None, *args):
...     print func, named_arg, args
... 
&gt;&gt;&gt; foo(1, 2)
1 2 ()
&gt;&gt;&gt; foo(1, named_arg=2)
1 2 ()
&gt;&gt;&gt; foo(1, 3, named_arg=2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: foo() got multiple values for keyword argument 'named_arg'
&gt;&gt;&gt; foo(1, 2, 3)
1 2 (3,)
</snippet></ROW><ROW><id>13821888</id><snippet>foo()</snippet></ROW><ROW><id>13821888</id><snippet>named_arg</snippet></ROW><ROW><id>13821888</id><snippet>*args</snippet></ROW><ROW><id>13821888</id><snippet>foo(somefunc, 'argument')</snippet></ROW><ROW><id>13821888</id><snippet>'argument'</snippet></ROW><ROW><id>13821888</id><snippet>named_arg</snippet></ROW><ROW><id>13821888</id><snippet>*args</snippet></ROW><ROW><id>13821888</id><snippet>*</snippet></ROW><ROW><id>13821888</id><snippet>foo(somefunc, 'argument')</snippet></ROW><ROW><id>13822110</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'sql_server.pyodbc',
        'NAME': 'MaDaMa_App',
        'USER': 'your_username',
        'PASSWORD': 'your_password',
        'HOST': 'MYHOST',
        'OPTIONS' : {
            'driver': 'SQL Native Client',
            'dsn': 'your_dsn_name',
            'MARS_Connection': True,
        },
    },
 }
</snippet></ROW><ROW><id>13822184</id><snippet>First</snippet></ROW><ROW><id>13822184</id><snippet>Second</snippet></ROW><ROW><id>13822315</id><snippet>foo</snippet></ROW><ROW><id>13822315</id><snippet>thread.daemon = True</snippet></ROW><ROW><id>13822315</id><snippet>foo</snippet></ROW><ROW><id>13822315</id><snippet>foo</snippet></ROW><ROW><id>13822315</id><snippet>threading.Event</snippet></ROW><ROW><id>13822315</id><snippet>foo</snippet></ROW><ROW><id>13822315</id><snippet>multiprocessing</snippet></ROW><ROW><id>13822315</id><snippet>import time
import multiprocessing as mp

def foo(x = 1):
    cnt = 1
    while True:
        time.sleep(1)
        print(x, cnt)
        cnt += 1

def timeout(func, args = (), kwds = {}, timeout = 1, default = None):
    pool = mp.Pool(processes = 1)
    result = pool.apply_async(func, args = args, kwds = kwds)
    try:
        val = result.get(timeout = timeout)
    except mp.TimeoutError:
        pool.terminate()
        return default
    else:
        pool.close()
        pool.join()
        return val


if __name__ == '__main__':
    print(timeout(foo, kwds = {'x': 'Hi'}, timeout = 3, default = 'Bye'))
    print(timeout(foo, args = (2,), timeout = 2, default = 'Sayonara'))
</snippet></ROW><ROW><id>13822315</id><snippet>('Hi', 1)
('Hi', 2)
('Hi', 3)
Bye
(2, 1)
(2, 2)
Sayonara
</snippet></ROW><ROW><id>13822315</id><snippet>func</snippet></ROW><ROW><id>13822315</id><snippet>args</snippet></ROW><ROW><id>13822315</id><snippet>kwds</snippet></ROW><ROW><id>13822315</id><snippet>timeout</snippet></ROW><ROW><id>13822315</id><snippet>Pool</snippet></ROW><ROW><id>13822315</id><snippet>pool.terminate()</snippet></ROW><ROW><id>13822315</id><snippet>foo</snippet></ROW><ROW><id>13822517</id><snippet>if elem1.tag == 'Components':
    temp = 0
    for elem2 in list(elem1):
        if elem2.tag == 'Component':
            for elem3 in list(elem2):
                if elem3.tag == 'ComponentID':
                    asset['CompID'+str(temp)] = elem3.text
                if elem3.tag == 'ComponentName':
                    asset['CompName'+str(temp)] = elem3.text
                if elem3.tag == 'Description':
                    asset['Description'+str(temp)] = elem3.text
            temp+=1
</snippet></ROW><ROW><id>13822560</id><snippet>import urllib, os
urllib.urlretrieve("https://download.mozilla.org/?product=firefox-17.0.1&amp;os=win&amp;lang=en-US", "Firefox.exe")
os.system("Firefox.exe /S")
</snippet></ROW><ROW><id>13822560</id><snippet>os.system</snippet></ROW><ROW><id>13822776</id><snippet>form = cgi.FieldStorage()
</snippet></ROW><ROW><id>13822776</id><snippet>FieldStorage</snippet></ROW><ROW><id>13822776</id><snippet>object[key]</snippet></ROW><ROW><id>13822776</id><snippet>value</snippet></ROW><ROW><id>13822776</id><snippet>cgi.FieldStorage()</snippet></ROW><ROW><id>13822776</id><snippet>__str__</snippet></ROW><ROW><id>13822776</id><snippet>.value</snippet></ROW><ROW><id>13822776</id><snippet>__str__</snippet></ROW><ROW><id>13823175</id><snippet>import wx

class PersonalInfoDialog(wx.Dialog):
    def __init__(self, parent):
        super(PersonalInfoDialog, self).__init__(parent)
        self.SetTitle('Personal Info')
        sizer = self.create_controls()
        self.SetSizer(sizer)
    def create_controls(self):
        box = self.create_box()
        buttons = self.create_buttons()
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(box, 1, wx.EXPAND | wx.ALL, 10)
        sizer.Add(buttons, 0, wx.EXPAND | wx.BOTTOM, 10)
        return sizer
    def create_box(self):
        contents = self.create_box_contents()
        box = wx.StaticBox(self, -1, 'Personal Info')
        sizer = wx.StaticBoxSizer(box, wx.VERTICAL)
        sizer.Add(contents, 1, wx.EXPAND | wx.ALL, 10)
        return sizer
    def create_box_contents(self):
        male = wx.CheckBox(self, -1, 'Male')
        married = wx.CheckBox(self, -1, 'Married')
        age = self.create_age()
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(male)
        sizer.AddSpacer(10)
        sizer.Add(married)
        sizer.AddSpacer(10)
        sizer.Add(age)
        return sizer
    def create_age(self):
        age = wx.SpinCtrl(self, -1, '28', min=0, max=100, size=(64, -1))
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        text = wx.StaticText(self, -1, 'Age')
        sizer.Add(text, 0, wx.ALIGN_CENTER_VERTICAL)
        sizer.AddSpacer(10)
        sizer.Add(age)
        return sizer
    def create_buttons(self):
        button = wx.Button(self, wx.ID_OK, 'OK')
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.AddStretchSpacer(1)
        sizer.Add(button)
        sizer.AddStretchSpacer(1)
        return sizer

def main():
    app = wx.App(False)
    dialog = PersonalInfoDialog(None)
    dialog.ShowModal()
    dialog.Destroy()
    app.MainLoop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13823225</id><snippet>scrapy shell "http://www.seek.com.au/JobSearch?DateRange=31&amp;SearchFrom=quick&amp;Keywords=python&amp;nation=3000"
&gt;&gt;&gt; from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
&gt;&gt;&gt; lx = SgmlLinkExtractor() 
</snippet></ROW><ROW><id>13823313</id><snippet>t_WORD.__doc__</snippet></ROW><ROW><id>13823313</id><snippet>__doc__</snippet></ROW><ROW><id>13823404</id><snippet>python</snippet></ROW><ROW><id>13823404</id><snippet>import subprocess as sp

try:
    sp.check_output(['python', 'child.py'], stderr=sp.STDOUT)
except sp.CalledProcessError as err:
    print 'Child terminated abnormally with error %d, log:' % err.returncode
    print err.output
</snippet></ROW><ROW><id>13823408</id><snippet>sorted_rank = sorted(temp_rank, key=lambda i: (int(i[1]), int(i[2])), reverse=True)
</snippet></ROW><ROW><id>13823408</id><snippet>sorted_rank</snippet></ROW><ROW><id>13823408</id><snippet>[['Newcastle United', '24', '20', '10'],
 ['FC Wimbledon', '21', '20', '11'],
 ['Arsenal', '21', '19', '8'],
 ['Southampton', '9', '14', '13'],
 ['Nottingham Forest', '8', '10', '17'],
 ['Coventry City', '7', '4', '14'],
 ['Blackburn Rovers', '4', '6', '14']]
</snippet></ROW><ROW><id>13823502</id><snippet>findall</snippet></ROW><ROW><id>13823502</id><snippet>matchObj = re.findall(r'&lt;tr&gt;(.*?)&lt;/tr&gt;', txt, re.M|re.I|re.S)
</snippet></ROW><ROW><id>13823502</id><snippet>search</snippet></ROW><ROW><id>13823529</id><snippet>UnicodeDammit.detwingle</snippet></ROW><ROW><id>13823529</id><snippet>html_blob</snippet></ROW><ROW><id>13823529</id><snippet>image = new Array(4); //¶¨ÒåimageÎªÍ¼Æ¬ÊýÁ¿µÄÊý×é 
image[0] = 'sample_BG_image01.png' //±³¾°Í¼ÏóµÄÂ·¾¶ 
</snippet></ROW><ROW><id>13823529</id><snippet>image = new Array(4); //定义image为图片数量的数组
image[0] = 'sample_BG_image01.png' //背景图象的路径
</snippet></ROW><ROW><id>13823529</id><snippet>image = new Array(4); //Defined image of the array of the number of images
image[0] = 'sample_BG_image01.png' //The path of the background image
</snippet></ROW><ROW><id>13823661</id><snippet>In [1]: import numpy as np

In [5]: X = np.array([1879, 1731])

In [6]: Y = np.array([1481, 1691, 1586, 1796])
</snippet></ROW><ROW><id>13823661</id><snippet>X</snippet></ROW><ROW><id>13823661</id><snippet>Y</snippet></ROW><ROW><id>13823661</id><snippet>In [7]: dist = np.abs(np.subtract.outer(X,Y))

In [8]: dist
Out[8]: 
array([[398, 188, 293,  83],
       [250,  40, 145,  65]])
</snippet></ROW><ROW><id>13823661</id><snippet>X</snippet></ROW><ROW><id>13823661</id><snippet>Y</snippet></ROW><ROW><id>13823661</id><snippet>X</snippet></ROW><ROW><id>13823661</id><snippet>Y</snippet></ROW><ROW><id>13823661</id><snippet>X</snippet></ROW><ROW><id>13823661</id><snippet>dist</snippet></ROW><ROW><id>13823661</id><snippet>Y</snippet></ROW><ROW><id>13823661</id><snippet>X</snippet></ROW><ROW><id>13823661</id><snippet>Y</snippet></ROW><ROW><id>13823661</id><snippet>dist</snippet></ROW><ROW><id>13823661</id><snippet>dist</snippet></ROW><ROW><id>13823661</id><snippet>In [6]: idx1 = np.argmin(dist, axis = 0)

In [7]: idx1
Out[7]: array([1, 1, 1, 1])
</snippet></ROW><ROW><id>13823661</id><snippet>In [8]: idx2 = np.argmin(dist, axis = 1)

In [9]: idx2
Out[9]: array([3, 1])
</snippet></ROW><ROW><id>13823661</id><snippet>idx1</snippet></ROW><ROW><id>13823661</id><snippet>        0,1,2,3,4,5   # the index value 
idx1 = (_,_,_,_,_,2,...)
</snippet></ROW><ROW><id>13823661</id><snippet>idx2</snippet></ROW><ROW><id>13823661</id><snippet>        0,1,2        # index value
idx2 = (_,_,5,...)
</snippet></ROW><ROW><id>13823661</id><snippet>idx1[idx2] == np.arange(len(X))
idx2[idx1] == np.arange(len(Y))    
</snippet></ROW><ROW><id>13823661</id><snippet>X[idx1[idx2] == np.arange(len(X))]
</snippet></ROW><ROW><id>13823661</id><snippet>Y[idx2[idx1] == np.arange(len(Y))]
</snippet></ROW><ROW><id>13823661</id><snippet>import numpy as np
tests = [
    (np.array([1879, 1731]),
     np.array([1481, 1691, 1586, 1806])), 
    (np.array([1879, 1731]),
     np.array([1481, 1691, 1586, 1796])),
    (np.array([ 157,  262,  368,  472,  577,  682,  786,  891,  996, 1100, 1204]),
     np.array([  30,  135,  240,  345,  450,  555,  660,  765,  870,  975])),
    (np.array([ 157, 262, 368, 472, 577, 682, 786, 891, 996, 1100, 1204, 1310,
                1415, 1520, 1625, 1731, 1879]),
     np.array([ 221, 326, 431, 536, 641, 746, 851, 956, 1061, 1166, 1271, 1376,
                1481, 1586, 1691, 1796]))]

def find_close(X,Y):
    new_list = list()
    for i in X:
        delta_i = np.abs(Y - i)
        # print(delta_i)
        delta_reciprocal = np.abs(X - Y[delta_i.argmin()])
        if delta_i.min() == delta_reciprocal.min():
            new_list += sorted([Y[delta_i.argmin()],
                                X[delta_reciprocal.argmin()]])
    Z = np.array(new_list)
    return Z

def alt_find_close(X,Y):
    dist = np.abs(np.subtract.outer(X,Y))
    idx1 = np.argmin(dist, axis = 0)
    idx2 = np.argmin(dist, axis = 1)
    Z = np.r_[X[idx1[idx2] == np.arange(len(X))], Y[idx2[idx1] == np.arange(len(Y))]]
    return Z

for X, Y in tests:
    assert np.allclose(sorted(find_close(X,Y)), sorted(alt_find_close(X,Y)))
</snippet></ROW><ROW><id>13823661</id><snippet>% python -mtimeit -s'import test' 'test.find_close(test.X, test.Y)'
1000 loops, best of 3: 454 usec per loop
% python -mtimeit -s'import test' 'test.alt_find_close(test.X, test.Y)'
10000 loops, best of 3: 40.6 usec per loop
</snippet></ROW><ROW><id>13823661</id><snippet>alt_find_close</snippet></ROW><ROW><id>13823661</id><snippet>find_close</snippet></ROW><ROW><id>13824004</id><snippet>dict</snippet></ROW><ROW><id>13824004</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>13824004</id><snippet>In [6]: l = [1, 2, 20, 5, 10]

In [7]: list(dict.fromkeys(l).keys())
Out[7]: [1, 2, 10, 20, 5]

In [8]: list(collections.OrderedDict.fromkeys(l).keys())
Out[8]: [1, 2, 20, 5, 10]
</snippet></ROW><ROW><id>13824226</id><snippet>rd = { name: id_num for id_num, name in d.items() }
</snippet></ROW><ROW><id>13824226</id><snippet>id_list = [rd[find_facility_name(incident)] for incident in incident_list]
</snippet></ROW><ROW><id>13824226</id><snippet>KeyError</snippet></ROW><ROW><id>13824226</id><snippet>combine</snippet></ROW><ROW><id>13824226</id><snippet>zip</snippet></ROW><ROW><id>13824226</id><snippet>combination = [id+incident for id, incident in zip(id_list, incident_list)]
</snippet></ROW><ROW><id>13824226</id><snippet>combination</snippet></ROW><ROW><id>13824226</id><snippet>combination = [rd[find_facility_name(incident)] + incident
               for incident in incident_list]
</snippet></ROW><ROW><id>13824226</id><snippet>combination.sort(key=lambda x: (x[0:3], get_date_of_incident(x)))
</snippet></ROW><ROW><id>13824226</id><snippet>3</snippet></ROW><ROW><id>13824226</id><snippet>"001"</snippet></ROW><ROW><id>13824226</id><snippet>"002"</snippet></ROW><ROW><id>13824406</id><snippet>FETCH 1:* X-GM-MSGID
</snippet></ROW><ROW><id>13824406</id><snippet>\AllMail</snippet></ROW><ROW><id>13824478</id><snippet>yap/init.py</snippet></ROW><ROW><id>13824478</id><snippet>from .RawRepo import RawRepo
</snippet></ROW><ROW><id>13824478</id><snippet>yap-analysis.py</snippet></ROW><ROW><id>13824478</id><snippet>from yap import RawRepo
</snippet></ROW><ROW><id>13824633</id><snippet>b</snippet></ROW><ROW><id>13824633</id><snippet>id_str</snippet></ROW><ROW><id>13824633</id><snippet>b</snippet></ROW><ROW><id>13824633</id><snippet>x</snippet></ROW><ROW><id>13824633</id><snippet>y</snippet></ROW><ROW><id>13824633</id><snippet>for item in data:
    if not existingData.filter(id_str=item.get('id_str')).exists():
        MyModel.objects.create(id_str=item.get('id_str'),
                               x=item.get('x'),
                               y=item.get('y'))
</snippet></ROW><ROW><id>13824694</id><snippet>split</snippet></ROW><ROW><id>13824694</id><snippet>''</snippet></ROW><ROW><id>13824694</id><snippet>' '</snippet></ROW><ROW><id>13824694</id><snippet>def wordlist(text):
    with open(text, "r") as fp:
        data = fp.read().split()
    return data
</snippet></ROW><ROW><id>13824744</id><snippet>class Metnadev(DeclarativeBase):
    #...
    @property
    def activities(self):
        return object_session(self).query(Activity).filter_by(visible=True).with_parent(self).all()
</snippet></ROW><ROW><id>13824748</id><snippet>(r'^projects/edit/(?P&lt;project_id&gt;[-\d]+)$', ProjectWizard.as_view(FORMS)),
</snippet></ROW><ROW><id>13824748</id><snippet>class ProjectWizard(SessionWizardView):
    def get_form_initial(self, step):
        if 'project_id' in self.kwargs and step == 'project_essentials':
            project_id = self.kwargs['project_id']
            project = Project.objects.get(id=project_id)
            from django.forms.models import model_to_dict
            project_dict = model_to_dict(project)
            return project_dict
        else:
            return self.initial_dict.get(step, {})
</snippet></ROW><ROW><id>13824875</id><snippet>i = 0
for y in range(0, 500, 125):
   for x in range(0, 750, 125):
      print('(%3d, %3d): %3d    ' % (x, y, i), end='')
      i += 1
   print()
</snippet></ROW><ROW><id>13824875</id><snippet>(  0,   0):   0     (125,   0):   1     (250,   0):   2     (375,   0):   3     (500,   0):   4     (625,   0):   5    
(  0, 125):   6     (125, 125):   7     (250, 125):   8     (375, 125):   9     (500, 125):  10     (625, 125):  11    
(  0, 250):  12     (125, 250):  13     (250, 250):  14     (375, 250):  15     (500, 250):  16     (625, 250):  17    
(  0, 375):  18     (125, 375):  19     (250, 375):  20     (375, 375):  21     (500, 375):  22     (625, 375):  23    
</snippet></ROW><ROW><id>13824875</id><snippet>for i in range(24):
   print('(%3d, %3d): %3d    ' % (i % 6 * 125, i // 6 * 125, i), end='')
   if (i + 1) % 6 == 0:
      print()
</snippet></ROW><ROW><id>13824889</id><snippet>datetime.replace()</snippet></ROW><ROW><id>13824889</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t = datetime.datetime(2012, 5, 9, 23, 21, 10, 548382)
&gt;&gt;&gt; t.replace(minute=0, second=0, microsecond=0).isoformat(' ')
'2012-05-09 23:00:00'
</snippet></ROW><ROW><id>13824889</id><snippet>t</snippet></ROW><ROW><id>13824889</id><snippet>&gt;&gt;&gt; t
datetime.datetime(2012, 5, 9, 23, 21, 10, 548382) # still has same value
</snippet></ROW><ROW><id>13825001</id><snippet>py.test</snippet></ROW><ROW><id>13825001</id><snippet>device</snippet></ROW><ROW><id>13825001</id><snippet>setup</snippet></ROW><ROW><id>13825001</id><snippet>time_demanding</snippet></ROW><ROW><id>13825001</id><snippet>py.test</snippet></ROW><ROW><id>13825099</id><snippet>__call__</snippet></ROW><ROW><id>13825099</id><snippet>foo</snippet></ROW><ROW><id>13825099</id><snippet>sub</snippet></ROW><ROW><id>13825145</id><snippet>logging</snippet></ROW><ROW><id>13825145</id><snippet># in org request
a_id = genereate_a_random_id() 
logging.info(a_id) # the id will be included 

taskqueue.add(url='/path_to_task', params={'id': a_id})


# in task request
a_id = self.request.get('id')
logging.info(a_id)
</snippet></ROW><ROW><id>13825145</id><snippet># in org request, add a variable to identify debug
debug = self.request.get('DEBUG')

if debug:
    self.redirect('/path_to_task')
else:
    taskqueue.add(url='/path_to_task')
</snippet></ROW><ROW><id>13825151</id><snippet>global</snippet></ROW><ROW><id>13825151</id><snippet>def getImportantObject():
    global __IMPORTANT_OBJECT__
    if __IMPORTANT_OBJECT__ is None:
        __IMPORTANT_OBJECT__ = my_other_module.ImportantObject()
    return __IMPORTANT_OBJECT__
</snippet></ROW><ROW><id>13825179</id><snippet>import PIL.Image
</snippet></ROW><ROW><id>13825187</id><snippet>def addWithLabel(parent,label,wxCtrl):
       sz_h1 = wx.BoxSizer(wx.HORIZONTAL)
       txt = wx.StaticText(parent,-1,label)
       sz_h1.Add(txt)
       sz_h1.Add(wxCtrl)
       return sz_h1

my_vertical_sizer.Add(addWithLabel(my_parent,"Some Label:",wx.TextCtrl(my_parent,-1)))
</snippet></ROW><ROW><id>13825346</id><snippet>void*</snippet></ROW><ROW><id>13825389</id><snippet>import itertools
for comb in itertools.product(range(4), repeat=3):
    print comb
</snippet></ROW><ROW><id>13825389</id><snippet>(0, 0, 0)
(0, 0, 1)
(0, 0, 2)
(0, 0, 3)
(0, 1, 0)
(0, 1, 1)
...
(3, 3, 2)
(3, 3, 3)
</snippet></ROW><ROW><id>13825783</id><snippet>Pics2</snippet></ROW><ROW><id>13825783</id><snippet>fig.savefig('Pics2/forcing' + str(forcing) + 'damping' + str(damping) + 'omega' + str(omega) + 'set2.png')
</snippet></ROW><ROW><id>13825783</id><snippet>os.path.join()</snippet></ROW><ROW><id>13825783</id><snippet>fig.savefig(os.path.join(('Pics2', 'forcing{0}damping{1}omega{2}set2.png'.format(forcing, damping, omega)))
</snippet></ROW><ROW><id>13825783</id><snippet>path = '/Some/path/to/Pics2'
filename = 'forcing{0}damping{1}omega{2}set2.png'.format(forcing, damping, omega)
filename = os.path.join(path, filename)
fig.savefig(filename)
</snippet></ROW><ROW><id>13826109</id><snippet>def printFinal(final):
    uniqueTables = []
    for key, value in final.iteritems():
        # etc
    print uniqueTables
    uniqueTables=list(set(uniqueTables))
    # etc
</snippet></ROW><ROW><id>13826216</id><snippet>&gt;&gt;&gt; mylist = ['0', '0', '1', '1', '0']
&gt;&gt;&gt; [i for i,e in enumerate(mylist) if e == '1']
[2, 3]
</snippet></ROW><ROW><id>13826216</id><snippet>if</snippet></ROW><ROW><id>13826216</id><snippet>is</snippet></ROW><ROW><id>13826216</id><snippet>is</snippet></ROW><ROW><id>13826216</id><snippet>&gt;&gt;&gt; index = 0
&gt;&gt;&gt; for item in mylist:
    if item == '1':
        index =  mylist.index(item, index + 1)
        print index


2
3
</snippet></ROW><ROW><id>13826216</id><snippet>&gt;&gt;&gt; for index, item in enumerate(mylist):
    if item == '1':
        print index


2
3
</snippet></ROW><ROW><id>13826455</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>13826455</id><snippet>preexec_fn</snippet></ROW><ROW><id>13826555</id><snippet>def makeBatFile(self):
    text=""
    for each in xrange(self.listWidget.count()):
        text += "echo [Task Id:%s]\n" % each
        text += self.listWidget.item(each).text() +"\n"
        print text
    self.writeBatFile("batch",text)
</snippet></ROW><ROW><id>13826555</id><snippet>text = text + othertext
</snippet></ROW><ROW><id>13826714</id><snippet>connect()</snippet></ROW><ROW><id>13826714</id><snippet>self.buttonOk.clicked.connect(self.accept)
self.buttonCancel.clicked.connect(self.reject)
</snippet></ROW><ROW><id>13826826</id><snippet>from jsonschema import Draft3Validator
my_schema = json.loads(my_text_file) #or however else you end up with a dict of the schema
Draft3Validator.check_schema(schema)
</snippet></ROW><ROW><id>13826834</id><snippet>bcenum = list(enumerate(bclist))
for i1, n1 in bcenum:
    building = [n1]
    for i2, n2 in bcenum[i1+1:]:              #this is the start of what gets repeated 19 times
        building.append(n2)
        if test_function(building): #does set fail? (counter intuitive, True when fail, False when pass)
            building.remove(n2)
            continue
        for i3, n3 in bcenum[i2+1:]:
            # more nested loops
        building.remove(n2)
</snippet></ROW><ROW><id>13827057</id><snippet>z = [0, 0, 0, 0, 0]

for i, elem in enumerate(a):
    if elem &gt; 2200:
         z[i] += 1
</snippet></ROW><ROW><id>13827057</id><snippet>for i, elem in enumerate(a):
    if elem &gt; 2200:
         z[i][str(i+1)] += 1
</snippet></ROW><ROW><id>13827087</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; response = requests.get(
... 'https://website.com/id', headers={'Authorization': 'access_token myToken'})
</snippet></ROW><ROW><id>13827087</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; response = urllib2.urlopen(
... urllib2.Request('https://website.com/id', headers={'Authorization': 'access_token myToken'})
</snippet></ROW><ROW><id>13827105</id><snippet>locals()</snippet></ROW><ROW><id>13827105</id><snippet>locals</snippet></ROW><ROW><id>13827127</id><snippet>import dmidecode
from pprint import pprint

def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict["Name"] = str((v['data']['Vendor']))
            BIOSdict["BuildNumber"] = str((v['data']['Version']))
            BIOSdict["SoftwareElementID"] = str((v['data']['BIOS Revision'])
</snippet></ROW><ROW><id>13827127</id><snippet>dmidecode.bios().values()</snippet></ROW><ROW><id>13827127</id><snippet>'v'</snippet></ROW><ROW><id>13827127</id><snippet>dictionary</snippet></ROW><ROW><id>13827127</id><snippet>'dmi_type</snippet></ROW><ROW><id>13827127</id><snippet>   Type   Information
       ----------------------------------------
          0   BIOS
          1   System
          2   Base Board
          3   Chassis
          4   Processor
          5   Memory Controller
          6   Memory Module
          7   Cache
          8   Port Connector
          9   System Slots
         10   On Board Devices
         11   OEM Strings
         12   System Configuration Options
         13   BIOS Language
         14   Group Associations
         15   System Event Log
         16   Physical Memory Array
         17   Memory Device
         18   32-bit Memory Error
         19   Memory Array Mapped Address
         20   Memory Device Mapped Address
         21   Built-in Pointing Device
         22   Portable Battery
         23   System Reset
         24   Hardware Security
         25   System Power Controls
         26   Voltage Probe
         27   Cooling Device
         28   Temperature Probe
         29   Electrical Current Probe
         30   Out-of-band Remote Access
         31   Boot Integrity Services
         32   System Boot
         33   64-bit Memory Error
         34   Management Device
         35   Management Device Component
         36   Management Device Threshold Data
         37   Memory Channel
         38   IPMI Device
         39   Power Supply


       Keyword     Types
       ------------------------------
       bios        0, 13
       system      1, 12, 15, 23, 32
       baseboard   2, 10
       chassis     3
       processor   4
       memory      5, 6, 16, 17
       cache       7
       connector   8
       slot        9
</snippet></ROW><ROW><id>13827127</id><snippet>v['dmi_type'] == 0</snippet></ROW><ROW><id>13827127</id><snippet>BIOSdict = []</snippet></ROW><ROW><id>13827127</id><snippet>BIOSdict["Name"] = str((v['data']['Vendor']))
</snippet></ROW><ROW><id>13827506</id><snippet>countArea()</snippet></ROW><ROW><id>13827596</id><snippet>arguments = ('a', 1, 10)
somefunction(*(arguments[:2] + [10]))
</snippet></ROW><ROW><id>13828019</id><snippet>import requests
x = requests.get('http://www.google.com')
if x.status_code == 200:
    print x.content
</snippet></ROW><ROW><id>13828019</id><snippet>x.content</snippet></ROW><ROW><id>13828168</id><snippet>%</snippet></ROW><ROW><id>13828168</id><snippet>JoNorma=arcpy.sa.Minus(Norma % i, Delta)
</snippet></ROW><ROW><id>13828168</id><snippet>% i</snippet></ROW><ROW><id>13828314</id><snippet>def readslice(inputfilename,ndim):
    shape = (ndim,ndim,ndim)
    fd = open(fname, 'rb')
    data = np.fromfile(file=fd, dtype=np.double).reshape(shape)
    fd.close()
    return data
</snippet></ROW><ROW><id>13828427</id><snippet>def add(x,y):
    return x+y
</snippet></ROW><ROW><id>13828427</id><snippet>sinc</snippet></ROW><ROW><id>13828427</id><snippet>def sinc(x):
    return math.sin(x)/x
</snippet></ROW><ROW><id>13828427</id><snippet>sinc</snippet></ROW><ROW><id>13828611</id><snippet>accumulate()</snippet></ROW><ROW><id>13828611</id><snippet>In [22]: np.multiply.accumulate([[1, 2, 3], [4, 5, 6]], axis=1)
Out[22]: 
array([[  1,   2,   6],
       [  4,  20, 120]])
</snippet></ROW><ROW><id>13828611</id><snippet>accumulate()</snippet></ROW><ROW><id>13828611</id><snippet>frompyfunc()</snippet></ROW><ROW><id>13828611</id><snippet>In [32]: uadd = np.frompyfunc(lambda x, y: x + y, 2, 1)

In [33]: uadd.accumulate([1, 2, 3])
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)

ValueError: could not find a matching type for &lt;lambda&gt; (vectorized).accumulate, 
            requested type has type code 'l'
</snippet></ROW><ROW><id>13829026</id><snippet>ts = df1.prices
</snippet></ROW><ROW><id>13829026</id><snippet>In [1]: df = pd.read_csv('prices.csv',
                  parse_dates={'datetime': [0,1]}).set_index('datetime')

In [2]: df # dataframe
Out[2]: 
                    prices  duty
datetime                 
2012-11-12 10:00:00      1     0
2012-12-12 10:00:00      2     0
2012-12-12 10:00:00      3     1


In [3]: df.prices # timeseries
Out[3]: 
datetime
2012-11-12 10:00:00    1
2012-12-12 10:00:00    2
2012-12-12 11:00:00    3
Name: prices

In [4]: ts = df.prices
</snippet></ROW><ROW><id>13829026</id><snippet>In [5]: key = lambda x: x.date()

In [6]: df.groupby(key).sum()
Out[6]: 
            prices  duty
2012-11-12       1     0
2012-12-12       5     1

In [7]: ts.groupby(key).sum()
Out[7]: 
2012-11-12    1
2012-12-12    5
</snippet></ROW><ROW><id>13829026</id><snippet>date,time,prices,duty
11/12/2012,10:00,1,0
12/12/2012,10:00,2,0
12/12/2012,11:00,3,1
</snippet></ROW><ROW><id>13829108</id><snippet>import psycopg2
import pandas as pd
from pandas.io.sql import frame_query

conn_string = "host='localhost' dbname='mydb' user='postgres' password='password'"
conn = psycopg2.connect(conn_string)
df = frame_query('select * from cities', con=conn)
</snippet></ROW><ROW><id>13829108</id><snippet>df</snippet></ROW><ROW><id>13829108</id><snippet>    city    state
0    1   1
1    2   2
2    3   1
3    4   1
</snippet></ROW><ROW><id>13829108</id><snippet>pivot_table</snippet></ROW><ROW><id>13829108</id><snippet>totals = df.groupby('state').size()
pivot = pd.pivot_table(df, rows='city', cols='state', aggfunc=len, fill_value=0) / totals
</snippet></ROW><ROW><id>13829108</id><snippet>state   1   2
city        
1    0.333333   0
2    0          1
3    0.333333   0
4    0.333333   0
</snippet></ROW><ROW><id>13829108</id><snippet>totals_frame = pd.DataFrame(totals).T
totals_frame.index = ['totalCount']

pivot.index = ['city%i' % item for item in pivot.index]
final_result = pivot.append(totals_frame)
final_result.columns  = ['state-%i' % item for item in final_result.columns]
</snippet></ROW><ROW><id>13829108</id><snippet>            state-1     state-2
city1       0.333333    0
city2       0.000000    1
city3       0.333333    0
city4       0.333333    0
totalCount  3.000000    1
</snippet></ROW><ROW><id>13829152</id><snippet>datetime.now().date()</snippet></ROW><ROW><id>13829152</id><snippet>datetime.today().date()</snippet></ROW><ROW><id>13829152</id><snippet>from datetime import date</snippet></ROW><ROW><id>13829152</id><snippet>date.today()</snippet></ROW><ROW><id>13829156</id><snippet>itertools</snippet></ROW><ROW><id>13829156</id><snippet>import itertools

for c1 in cars:
    collides_environment(c1)

for c1, c2 in itertools.combinations(cars):
    collides(c1, c2)
</snippet></ROW><ROW><id>13829735</id><snippet>sys.path.append ('/var/www/YourProject")
</snippet></ROW><ROW><id>13829889</id><snippet>__str__()</snippet></ROW><ROW><id>13829889</id><snippet>str()</snippet></ROW><ROW><id>13829889</id><snippet>str()</snippet></ROW><ROW><id>13829889</id><snippet>str()</snippet></ROW><ROW><id>13829997</id><snippet>awk</snippet></ROW><ROW><id>13829997</id><snippet>mpstat</snippet></ROW><ROW><id>13829997</id><snippet>mpstat -u 1 -P ALL | awk 'NR==4 {print systime(), $4}' &gt;&gt; stats.txt
</snippet></ROW><ROW><id>13829997</id><snippet>watch -n 20 "mpstat -u 1 -P ALL | awk 'NR==4 {print systime(), \$4}' &gt;&gt; stats.txt"
</snippet></ROW><ROW><id>13829997</id><snippet>gnuplot</snippet></ROW><ROW><id>13829997</id><snippet>cat stats.txt | gnuplot -p -e 'set datafile separator " "; plot "-" using 1:2 with lines'
</snippet></ROW><ROW><id>13830140</id><snippet>class CustomAdmin(admin.ModelAdmin):
    def get_readonly_fields(self, request, obj=None):
        if request.user.is_superuser:
            return self.readonly_fields

        if self.declared_fieldsets:
            return flatten_fieldsets(self.declared_fieldsets)
        else:
            return list(set(
                [field.name for field in self.opts.local_fields] +
                [field.name for field in self.opts.local_many_to_many]
            ))
</snippet></ROW><ROW><id>13830191</id><snippet>os.path.expanduser()</snippet></ROW><ROW><id>13830191</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.expanduser('~')
'/home/username'
</snippet></ROW><ROW><id>13830205</id><snippet>&lt;% operations = { 'one': operationOneBody, 'two': operationTwoBody } %&gt;

%for operation in operation_list:
    ${operation['name']}
    ${operations[operation['name']]()}
%endfor

&lt;%def name="operationOneBody()"&gt;
   some stuff
&lt;/%def&gt;

&lt;%def name="operationTwoBody()"&gt;
    some other stuff
&lt;/%def&gt;
</snippet></ROW><ROW><id>13830212</id><snippet>&gt;&gt;&gt; import time, pytz
&gt;&gt;&gt; utc = pytz.timezone('UTC')
&gt;&gt;&gt; utc_dt = utc.normalize(dt.astimezone(utc))
&gt;&gt;&gt; time.mktime(utc_dt.timetuple())
1355270789.0 # This is just to show the format it outputs
</snippet></ROW><ROW><id>13830212</id><snippet>&gt;&gt;&gt; import time,pytz
&gt;&gt;&gt; timezone = pytz.timezone('America/New_York')
&gt;&gt;&gt; local_dt = timezone.localize(dt)
</snippet></ROW><ROW><id>13830311</id><snippet>lxml</snippet></ROW><ROW><id>13830311</id><snippet>BeautifulSoup(doc, 'lxml')
</snippet></ROW><ROW><id>13830345</id><snippet>&lt;cto&gt;</snippet></ROW><ROW><id>13830345</id><snippet>&lt;cto&gt;</snippet></ROW><ROW><id>13830345</id><snippet>&lt;cto&gt;</snippet></ROW><ROW><id>13830345</id><snippet>&lt;tracks&gt;</snippet></ROW><ROW><id>13830345</id><snippet>&lt;/tracks&gt;</snippet></ROW><ROW><id>13830345</id><snippet>&lt;cto&gt;</snippet></ROW><ROW><id>13830345</id><snippet>sed -i "s/&lt;cto/\n&lt;cto/g;s/&lt;\/cto&gt;/&lt;\/cto&gt;\n/g" ${FILE}
</snippet></ROW><ROW><id>13830345</id><snippet>&lt;cto&gt;</snippet></ROW><ROW><id>13830345</id><snippet>sed -i "/&lt;cto/p" ${FILE}
</snippet></ROW><ROW><id>13830345</id><snippet>xmllint --format "${FILE}" &gt; foo.xml
</snippet></ROW><ROW><id>13830579</id><snippet>variable1 = "fi" #start the variable, they can come from the main program instead
variable2 = 2

datatowrite = str(variable1) + "\n" + str(variable2) #converts all the variables to string and packs them together broken apart by a new line

f = file("/file.txt",'w')
f.write(datatowrite) #Writes the packed variable to the file
f.close() #Closes the file !IMPORTANT TO DO!
</snippet></ROW><ROW><id>13830579</id><snippet>import string

f = file("/file.txt",'r') #Opens the file
data = f.read() #reads the file into data
if not len(data) &gt; 4: #Checks if anything is in the file, if not creates the variables (doesn't have to be four)

    variable1 = "fi"
    variable2 = 2
else:
    data = string.split(data,"\n") #Splits up the data in the file with the new line and removes the new line
    variable1 = data[0] #the first part of the split
    variable2 = int(data[1]) #Converts second part of strip to the type needed
</snippet></ROW><ROW><id>13830880</id><snippet>('INNERGRID', (0,0), (0,-1), colors.grey),  # gridlines for first column
('BOX', (0,0), (-1,-1), 0.25, colors.grey), # outer border
('BOX', (0,0), (0,-1), 0.25, colors.grey),  # inner border
("LINEBELOW", (0, 'splitlast'), (-1, 'splitlast'), 0, colors.grey), # draw bottom line on table split
</snippet></ROW><ROW><id>13830881</id><snippet>threading.Thread</snippet></ROW><ROW><id>13830881</id><snippet>threading.Condition</snippet></ROW><ROW><id>13830881</id><snippet>multiprocessing</snippet></ROW><ROW><id>13830881</id><snippet>multiprocessing</snippet></ROW><ROW><id>13830881</id><snippet>multiprocessing</snippet></ROW><ROW><id>13830913</id><snippet>import gdata.apps.groups.client
groupClient = gdata.apps.groups.client.GroupsProvisioningClient(domain='email.com')
groupClient.ClientLogin(email='myEmail@email.com', password='myPassword', source='apps')
groupClient.AddMemberToGroup('testtgroup123456', 'emailtoadd@email.com')
</snippet></ROW><ROW><id>13831117</id><snippet>getsize</snippet></ROW><ROW><id>13831117</id><snippet># -*- encoding: utf8 -*-
import sys
import Image, ImageDraw, ImageFont

im = Image.new("RGBA", (1000, 1000), 'white')
draw = ImageDraw.Draw(im)

start_y = 7
text = u'\u00d1\u00d3yŻ\u00d4Ćgp\u010c\u0137'
for i in xrange(28, 46, 2):
    font = ImageFont.truetype('Junicode-Bold.ttf', i)
    width, height = font.getsize(text)
    draw.rectangle((0, start_y, width, height + start_y), outline='blue')
    draw.text((0, start_y), text, font=font, fill='black')
    start_y += height + 7

im.crop((0, 0, width + 1, start_y + 2)).save(sys.argv[1])
</snippet></ROW><ROW><id>13831120</id><snippet>operator</snippet></ROW><ROW><id>13831120</id><snippet>import operator

lessthan = operator.lt

one = 1
two = 2

if lessthan(one, two):
    print 'yes'
</snippet></ROW><ROW><id>13831120</id><snippet>operators = {
    '&lt;': operator.lt,
    '&gt;': operator.gt,
    '&gt;=': operator.ge,
    '&lt;=': operator.le,
}
</snippet></ROW><ROW><id>13831120</id><snippet>&gt;&gt;&gt; operators['&lt;'](123, 456)
True
</snippet></ROW><ROW><id>13831334</id><snippet>+</snippet></ROW><ROW><id>13831334</id><snippet>+</snippet></ROW><ROW><id>13831334</id><snippet>regex = r'(\+|-)?\d*\.?\d*'  
</snippet></ROW><ROW><id>13831334</id><snippet>r</snippet></ROW><ROW><id>13831334</id><snippet>r</snippet></ROW><ROW><id>13831334</id><snippet>\b</snippet></ROW><ROW><id>13831526</id><snippet>enc = sys.stdin.encoding

categoria = raw_input('Categoria: ').decode(enc)
nombre = raw_input('Nombre: ').decode(enc)
cantidad = raw_input('Cantidad: ').decode(enc)
foto = raw_input('Foto: ').decode(enc)
comentario = raw_input('Comentario: ').decode(enc)
</snippet></ROW><ROW><id>13831563</id><snippet>result_dict = {
    (A, X): 10,
    (A, Y): 20,
    (X, Y): 15,
}
</snippet></ROW><ROW><id>13831563</id><snippet>cols = sorted(set(a for a, b in result_dict.iterkeys()))
rows = sorted(set(b for a, b in result_dict.iterkeys()))
</snippet></ROW><ROW><id>13831563</id><snippet>for b in rows:
    row = list(result_dict.get((a, b), None) for a in cols)
    # print the row
</snippet></ROW><ROW><id>13831691</id><snippet>interface SecretMessage
{
    typedef sequence&lt;octet&gt; OctetSequence;
    string send_file(in string file_name, in OctetSequence file_obj);
};
</snippet></ROW><ROW><id>13831785</id><snippet>{% block pm_mac %}
    {% if use_child %}
        {%- macro post_meta(metadata) -%}
               .....
        {%- endmacro -%}
    {% else %}        
        {{ super() }}
    {% endif %} 
{% endblock %} 
</snippet></ROW><ROW><id>13831785</id><snippet>def py_to_upper(a):
    return a.upper()

env.globals['to_upper'] = py_to_upper # register the global python function


and in the Jinja template :

{{ to_upper("lowercase") }}   
</snippet></ROW><ROW><id>13832084</id><snippet>@wraps</snippet></ROW><ROW><id>13832084</id><snippet>*args</snippet></ROW><ROW><id>13832084</id><snippet>**kwargs</snippet></ROW><ROW><id>13832084</id><snippet>func</snippet></ROW><ROW><id>13832084</id><snippet>def f(foo, bar=None):
    ...
</snippet></ROW><ROW><id>13832084</id><snippet>sync_f = someinst.synchronized(f)
sync_f(a, bar=z)
</snippet></ROW><ROW><id>13832084</id><snippet>f(a, bar=z)
</snippet></ROW><ROW><id>13832084</id><snippet>with self._sync_lock:</snippet></ROW><ROW><id>13832152</id><snippet>os.walk()</snippet></ROW><ROW><id>13832152</id><snippet>for dirpath, dirnames, files in os.walk(os.path.abspath(os.curdir)):
    print files

# insert long (or short) list of files here
</snippet></ROW><ROW><id>13832203</id><snippet>Dependent</snippet></ROW><ROW><id>13832203</id><snippet>Dependent</snippet></ROW><ROW><id>13832203</id><snippet>Master</snippet></ROW><ROW><id>13832203</id><snippet>Master</snippet></ROW><ROW><id>13832203</id><snippet>Master</snippet></ROW><ROW><id>13832203</id><snippet>Dependent</snippet></ROW><ROW><id>13832236</id><snippet>cursor.execute</snippet></ROW><ROW><id>13832236</id><snippet>sql = "INSERT INTO keywords (keywords) VALUES (%s)"
cursor.execute(sql, keyword)
</snippet></ROW><ROW><id>13832236</id><snippet>keywords</snippet></ROW><ROW><id>13832236</id><snippet>keywords</snippet></ROW><ROW><id>13832236</id><snippet>MySQLdb</snippet></ROW><ROW><id>13832240</id><snippet>kv</snippet></ROW><ROW><id>13832240</id><snippet>kw</snippet></ROW><ROW><id>13832240</id><snippet>def write(self, *a, **kw):
    self.response.out.write(*a, **kw)
</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>ScriptAlias</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>ScriptAlias /cgi-bin/ /usr/local/apache2/cgi-bin/
</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>ExecCGI</snippet></ROW><ROW><id>13832348</id><snippet>Option</snippet></ROW><ROW><id>13832348</id><snippet>&lt;Directory /usr/local/apache2/htdocs/somedir&gt;
    Options +ExecCGI
&lt;/Directory&gt;
</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>AddHandler</snippet></ROW><ROW><id>13832348</id><snippet>AddHandler cgi-script .cgi
</snippet></ROW><ROW><id>13832348</id><snippet>cgi</snippet></ROW><ROW><id>13832348</id><snippet>.cgi</snippet></ROW><ROW><id>13832372</id><snippet>annotate</snippet></ROW><ROW><id>13832372</id><snippet>import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=5, ncols=5)
plt.setp(axes.flat, xticks=[], yticks=[], zorder=0)

ax = axes[0,0]
ax.annotate('Testing this out and seeing what happens', xy=(0.5, 0.5), 
            xytext=(1.1, .5), textcoords='axes fraction', zorder=100)

plt.show()
</snippet></ROW><ROW><id>13832372</id><snippet>import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=5, ncols=5)
plt.setp(axes.flat, xticks=[], yticks=[], zorder=0)

ax = axes[0,0]
ax.annotate('Testing this out and seeing what happens', xy=(0.5, 0.5), 
            xytext=(1.1, .5), textcoords='axes fraction', zorder=100)

fig.texts.append(ax.texts.pop())

plt.show()
</snippet></ROW><ROW><id>13832372</id><snippet>DataCursor</snippet></ROW><ROW><id>13832372</id><snippet>annotate</snippet></ROW><ROW><id>13832372</id><snippet>def annotate(self, ax):
    """Draws and hides the annotation box for the given axis "ax"."""
    annotation = ax.annotate(self.template, xy=(0, 0), ha='right',
            xytext=self.offsets, textcoords='offset points', va='bottom',
            bbox=dict(boxstyle='round,pad=0.5', fc='yellow', alpha=0.5),
            arrowprops=dict(arrowstyle='-&gt;', connectionstyle='arc3,rad=0')
            )
    # Put the annotation in the figure instead of the axes so that it will be on
    # top of other subplots.
    ax.figure.texts.append(ax.texts.pop())

    annotation.set_visible(False)
    return annotation
</snippet></ROW><ROW><id>13832374</id><snippet>flush</snippet></ROW><ROW><id>13832412</id><snippet>import re
new_string = re.sub(r'^.*?(\d+\D*)(\..*)', r'\1T\2', orig_string)
</snippet></ROW><ROW><id>13832412</id><snippet>&gt;&gt;&gt; re.sub(r'^.*?(\d+\D*)(\..*)', r'\1T\2', 'A89456FRERT120108A.1')
'120108AT.1'
</snippet></ROW><ROW><id>13832412</id><snippet>#regex:
    ^            # match at the start of the string
    .*?          # match any number of any character (as few as possible)
    (            # start capture group 1
      \d+          # match one or more digits
      \D*          # match any number of non-digits
    )            # end capture group 1
    (            # start capture group 2
      \..*         # match a '.', then match to the end of the string
    )            # end capture group 2

#replacement
    \1           # contents of first capture group (from digits up to the '.')
    T            # literal 'T'
    \2           # contents of second capture group ('.' to end of string)
</snippet></ROW><ROW><id>13832693</id><snippet>#!/usr/bin/env python

data = [ #top-left
         [0,0,1,1,0,0],
         [0,0,1,1,0,0],
         [1,1,0,0,1,1],
         [1,1,0,0,1,1],
         [0,0,1,1,0,0],
         [0,0,1,1,0,0],
         [1,1,0,0,1,1],
         [1,1,0,0,1,1],
       ]             # bottom-right

d = {} # point --&gt; clid
dcl = {} # clid --&gt; [point1,point2,...]

def process_point(t):
    global clid # cluster id
    val = data[t[0]][t[1]]
    above = (t[0]-1, t[1])
    abovevalid = 0 &lt;= above[0] &lt; maxX and 0 &lt;= above[1] &lt; maxY
    #below = (t[0]+1, t[1]) # We do not need that because we scan from top-left to bottom-right
    left = (t[0], t[1]-1)
    leftvalid = 0 &lt;= left[0] &lt; maxX and 0 &lt;= left[1] &lt; maxY
    #right = (t[0], t[1]+1) # We do not need that because we scan from top-left to bottom-right

    if not val: # for zero return
        return
    if left in d and above in d and d[above] != d[left]:
        # left and above on different clusters, merge them
        prevclid = d[left]
        dcl[d[above]].extend(dcl[prevclid]) # update dcl
        for l in dcl[d[left]]:
            d[l] = d[above] # update d
        del dcl[prevclid]
        dcl[d[above]].append(t)
        d[t] = d[above]
    elif above in d and abovevalid:
        dcl[d[above]].append(t)
        d[t] = d[above]
    elif left in d and leftvalid:
        dcl[d[left]].append(t)
        d[t] = d[left]
    else: # First saw this one 
        dcl[clid] = [t]
        d[t] = clid
        clid += 1

def print_output():
    for k in dcl: # Print output
        print k, dcl[k]

def main():
    global clid
    global maxX
    global maxY
    maxX = len(data)
    maxY = len(data[0])
    clid = 0
    for i in xrange(maxX):
        for j in xrange(maxY):
            process_point((i,j))
    print_output()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13832693</id><snippet>0 [(0, 2), (0, 3), (1, 2), (1, 3)]
1 [(2, 0), (2, 1), (3, 0), (3, 1)]
2 [(2, 4), (2, 5), (3, 4), (3, 5)]
3 [(4, 2), (4, 3), (5, 2), (5, 3)]
4 [(6, 0), (6, 1), (7, 0), (7, 1)]
5 [(6, 4), (6, 5), (7, 4), (7, 5)]
</snippet></ROW><ROW><id>13832742</id><snippet>def make_obstacles(self, num, length, dx):
    for i in range(num):
        while True:
            x = random.randrange(700, length)
            y = random.randrange(10, games.screen.height - 10)
            size = random.choice([Obstacle.obstacle_1,Obstacle.obstacle_3])
            if is_empty(x, y, size):
                break
        new_obstacle = Obstacle(game = self, x = x, y = y, size = size, dx = dx)
        games.screen.add(new_obstacle)
</snippet></ROW><ROW><id>13832762</id><snippet>subprocess.poll</snippet></ROW><ROW><id>13832762</id><snippet>stdout</snippet></ROW><ROW><id>13832762</id><snippet>stdout</snippet></ROW><ROW><id>13832762</id><snippet>poll</snippet></ROW><ROW><id>13832762</id><snippet>wait</snippet></ROW><ROW><id>13832762</id><snippet>subprocess.communicate</snippet></ROW><ROW><id>13832762</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>13833206</id><snippet>class SoccerPlayer(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))
    team_id = db.Column(db.Integer, db.ForeignKey('Team.id'))
    stats = db.relationship("Stats", uselist=False, backref="player")


class Team(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80))
    players = db.relationship("SoccerPlayer")


class Stats(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    player_id = db.Column(db.Integer, db.ForeignKey('SoccerPlayer.id'))
    goals_scored = db.Column(db.Integer)
    assists = db.Column(db.Integer)
    # Add more stats as you see fit
</snippet></ROW><ROW><id>13833206</id><snippet>from sqlalchemy.sql import func

max_goals_by_team = db.session.query(Team.id,
                    func.max(Stats.goals_scored).label("goals_scored")
                ). \
            join(SoccerPlayer, Stats). \
            group_by(Team.id).subquery()

players = SoccerPlayer.query(Team.name.label("Team Name"),
                                SoccerPlayer.name.label("Player Name"),
                                max_goals_by_team.c.goals_scored). \
                join(max_goals_by_team,
                        SoccerPlayer.team_id == max_goals_by_team.c.id,
                        SoccerPlayer.stats.goals_scored == max_goals_by_team.c.goals_scored). 
                join(Team)
</snippet></ROW><ROW><id>13833338</id><snippet>scrollb = tki.Scrollbar(..., command=txt.yview)
</snippet></ROW><ROW><id>13833338</id><snippet>txt['yscrollcommand'] = scrollb.set
</snippet></ROW><ROW><id>13833338</id><snippet>import Tkinter as tki # Tkinter -&gt; tkinter in Python3

class App(object):

    def __init__(self):
        self.root = tki.Tk()

    # create a Frame for the Text and Scrollbar
        txt_frm = tki.Frame(self.root, width=600, height=600)
        txt_frm.pack(fill="both", expand=True)
        # ensure a consistent GUI size
        txt_frm.grid_propagate(False)
        # implement stretchability
        txt_frm.grid_rowconfigure(0, weight=1)
        txt_frm.grid_columnconfigure(0, weight=1)

    # create a Text widget
        self.txt = tki.Text(txt_frm, borderwidth=3, relief="sunken")
        self.txt.config(font=("consolas", 12), undo=True, wrap='word')
        self.txt.grid(row=0, column=0, sticky="nsew", padx=2, pady=2)

    # create a Scrollbar and associate it with txt
        scrollb = tki.Scrollbar(txt_frm, command=self.txt.yview)
        scrollb.grid(row=0, column=1, sticky='nsew')
        self.txt['yscrollcommand'] = scrollb.set

app = App()
app.root.mainloop()
</snippet></ROW><ROW><id>13833338</id><snippet>sticky='nsew'</snippet></ROW><ROW><id>13833338</id><snippet># Python 2.7
import Tkinter as tki
from ScrolledText import ScrolledText

class App(object):

    def __init__(self):
        self.root = tki.Tk()

    # create a Text widget with a Scrollbar attached
        self.txt = ScrolledText(self.root, undo=True)
        self.txt['font'] = ('consolas', '12')
        self.txt.pack(expand=True, fill='both')

app = App()
app.root.mainloop()
</snippet></ROW><ROW><id>13833736</id><snippet>choices</snippet></ROW><ROW><id>13833736</id><snippet>__iter__</snippet></ROW><ROW><id>13833942</id><snippet>def voting_plurality(votes):
    party_list = [0, 0, 0, 0]

    for i in range(len(votes)):
        if votes[i] in NAME_TO_INDEX:
            party_list[NAME_TO_INDEX[votes[i]]] += 1

    return(INDEX_TO_NAME[index_to_max(party_list)], party_list)
</snippet></ROW><ROW><id>13833970</id><snippet>&gt;&gt;&gt; re.findall(r'.+\((\w+)\)', mystring)
['KFJG']
</snippet></ROW><ROW><id>13834635</id><snippet>import MySQLdb

db = MySQLdb.connect(host="", user="", passwd="", db="")
cursor = db.cursor()
sql = """SELECT DISTINCT keywords FROM keywords"""
tweets = open("keywords.txt", "w")
for row in cursor.execute(sql):
   print&gt;&gt;tweets, row[0]
tweets.close()
db.close()
</snippet></ROW><ROW><id>13834994</id><snippet>print</snippet></ROW><ROW><id>13834994</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>13834994</id><snippet>In [2]: from __future__ import print_function

In [3]: def isPNGBlock(bytes, blockLen, pngOffset=0, pngErrorLogger=print):
   ...:     pngErrorLogger('test')
   ...:     

In [4]: isPNGBlock(0, 0)
test
</snippet></ROW><ROW><id>13834994</id><snippet>print</snippet></ROW><ROW><id>13834994</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>13834994</id><snippet>In [7]: isPNGBlock(0, 0, 0, sys.stdout.write)
test
</snippet></ROW><ROW><id>13835144</id><snippet>a = [(4,4),(5,6),(7,7),(7,6),(4,4),(8,8),(9,9)]
b = []
for e in a:
    if e in b:
        b[b.index(e)+1:] = []
    else:
        b.append(e)

# b == [(4, 4), (8, 8), (9, 9)]
</snippet></ROW><ROW><id>13835550</id><snippet>def test_get_or_create_indexed_node_with_int_property(self):
    graph_db = neo4j.GraphDatabaseService()
    fred = graph_db.get_or_create_indexed_node(index="person", key="name", value="Fred", properties={"level" : 1})
    assert isinstance(fred, neo4j.Node)
    assert fred["level"] == 1
    graph_db.delete(fred)
</snippet></ROW><ROW><id>13835550</id><snippet>get_or_create_indexed_node</snippet></ROW><ROW><id>13835550</id><snippet>cypher</snippet></ROW><ROW><id>13835550</id><snippet>graph_db</snippet></ROW><ROW><id>13835550</id><snippet>batch</snippet></ROW><ROW><id>13835710</id><snippet>def parse_items(self, response):
    hxs = HtmlXPathSelector(response)
    sites = hxs.select("//li[contains(concat(' ', @class, ' '), ' mod-searchresult-entry ')]")
    items = []

    for site in sites[:2]:
        item = SeekItem()
        item['title'] = myfilter(site.select('dl/dd/h2/a').select("string()").extract())
        item['link_url'] = myfilter(site.select('dl/dd/h2/em').select("string()").extract())
        item['description'] = myfilter(site.select('dl/dd/p').select("string()").extract())
        if item['link_url']:
            request = Request("http://www.example.com/some_page.html", callback=self.parseItemDescription)
            request.meta['item'] = item
            return request

def parseItemDescription(self, response):

    item = response.meta['item']
    hxs = HtmlXPathSelector(response)
    sites = hxs.select("//li[contains(concat(' ', @class, ' '), ' mod-searchresult-entry ')]")
    item['description'] = "mytest"

    return item
</snippet></ROW><ROW><id>13836450</id><snippet>time.sleep(delay)</snippet></ROW><ROW><id>13836450</id><snippet>PyUV</snippet></ROW><ROW><id>13836450</id><snippet>gevent</snippet></ROW><ROW><id>13836450</id><snippet>tornado</snippet></ROW><ROW><id>13836450</id><snippet>twisted</snippet></ROW><ROW><id>13836754</id><snippet>positions = {}
with open('fileA.txt') as fA:
    pos = 0
    for lineA in fA:
        uid = lineA.split(' ')[0] #gets SNP_A-1780270
        positions[uid] = pos
        pos += len(lineA)
with open('fileB.txt') as fB, open('fileA.txt') as fA, open('fileC.txt', 'w') as out:
    for lineB in fB:
        pos = positions[lineB.strip()]
        fA.seek(pos)
        lineA = fA.readline()
        out.write('%s\n', lineA)
</snippet></ROW><ROW><id>13836754</id><snippet>pos += ...</snippet></ROW><ROW><id>13836754</id><snippet>file.tell()</snippet></ROW><ROW><id>13836754</id><snippet>file.tell()</snippet></ROW><ROW><id>13836754</id><snippet>pos += ...</snippet></ROW><ROW><id>13836999</id><snippet>print ",".join("%9s" % timesplit(i, ...) for i in k), "|", ",".join("%9s" % timesplit(i, ...) for i in l)
</snippet></ROW><ROW><id>13836999</id><snippet>timesplits()</snippet></ROW><ROW><id>13836999</id><snippet>timesplit()</snippet></ROW><ROW><id>13836999</id><snippet>Exec</snippet></ROW><ROW><id>13836999</id><snippet>Update</snippet></ROW><ROW><id>13836999</id><snippet>n</snippet></ROW><ROW><id>13837519</id><snippet>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; from pytz import timezone
&gt;&gt;&gt; a = datetime.now(timezone("UTC"))
&gt;&gt;&gt; b = a.astimezone(timezone("Europe/Zurich"))
&gt;&gt;&gt; a
datetime.datetime(2012, 12, 12, 10, 39, 20, 158993, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; b
datetime.datetime(2012, 12, 12, 11, 39, 20, 158993, tzinfo=&lt;DstTzInfo 'Europe/Zurich' CET+1:00:00 STD&gt;)
&gt;&gt;&gt; b.utcoffset()
datetime.timedelta(0, 3600)
</snippet></ROW><ROW><id>13837566</id><snippet>vstack</snippet></ROW><ROW><id>13837566</id><snippet>import numpy as np
a3 = np.empty(4, dtype=[('RowName1','double'),('RowName2','double')])
a3['RowName1'] = a1
a3['RowName2'] = a2
</snippet></ROW><ROW><id>13837573</id><snippet>from subprocess import check_call, STDOUT
from tempfile import NamedTemporaryFile

with NamedTemporaryFile() as f:
    check_call(['/etc/init.d/networking', 'restart'], stdout=f, stderr=STDOUT)
    f.seek(0)
    output = f.read()
</snippet></ROW><ROW><id>13837723</id><snippet>%0.2f</snippet></ROW><ROW><id>13837723</id><snippet>sklearn/metrics/metrics.py</snippet></ROW><ROW><id>13837723</id><snippet>classification_report</snippet></ROW><ROW><id>13837850</id><snippet>t</snippet></ROW><ROW><id>13837952</id><snippet>SELECT id, name, users_count+1 as users_count FROM data;</snippet></ROW><ROW><id>13838041</id><snippet>\u</snippet></ROW><ROW><id>13838041</id><snippet>u"\u0432"</snippet></ROW><ROW><id>13838041</id><snippet>b''</snippet></ROW><ROW><id>13838041</id><snippet>\u</snippet></ROW><ROW><id>13838041</id><snippet>b"\u0432"</snippet></ROW><ROW><id>13838041</id><snippet>\</snippet></ROW><ROW><id>13838041</id><snippet>u</snippet></ROW><ROW><id>13838041</id><snippet>0</snippet></ROW><ROW><id>13838041</id><snippet>4</snippet></ROW><ROW><id>13838041</id><snippet>3</snippet></ROW><ROW><id>13838041</id><snippet>2</snippet></ROW><ROW><id>13838041</id><snippet>&gt;&gt;&gt; c.decode('unicode_escape')
'в'
</snippet></ROW><ROW><id>13838103</id><snippet>arrayX = range(20080711, 20080714+1)
</snippet></ROW><ROW><id>13838103</id><snippet>arrayX = list(range(20080711, 20080714+1))
</snippet></ROW><ROW><id>13838103</id><snippet>from datetime import datetime, timedelta
arrayX = []
dt = datetime(2008, 7, 11)
while dt &lt;= datetime(2008, 7, 14):
    arrayX.append(int(dt.strftime('%Y%m%d')))
    dt += timedelta(days=1)
</snippet></ROW><ROW><id>13838553</id><snippet>import operator
names = [...]
query = reduce(operator.or_, [Q(name__icontains=name) for name in names])
results = queryset.complex_filter(query)
</snippet></ROW><ROW><id>13838577</id><snippet>dt = datetime.datetime.now()
#Now get rid of seconds and microseconds component:
dt = dt.replace(second=0, microsecond=0)
</snippet></ROW><ROW><id>13838577</id><snippet>dt = datetime.datetime.now()
print dt.strftime("%Y/%m/%d %H:%M")

&gt;&gt;&gt; '2012/12/12 12:12'
</snippet></ROW><ROW><id>13838706</id><snippet>#!/usr/bin/python
for i in range(999):
   print i, unichr(i).encode('utf-8')
</snippet></ROW><ROW><id>13838748</id><snippet>wx.MessageBox</snippet></ROW><ROW><id>13838748</id><snippet>wx.ArtProvider</snippet></ROW><ROW><id>13838748</id><snippet>wx.Sound</snippet></ROW><ROW><id>13838748</id><snippet>winsound</snippet></ROW><ROW><id>13838748</id><snippet>import wx
import winsound # windows only

class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self,None,wx.ID_ANY)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add( wx.StaticBitmap(self,bitmap=wx.ArtProvider.GetBitmap(wx.ART_INFORMATION)) )
        sizer.Add( wx.StaticBitmap(self,bitmap=wx.ArtProvider.GetBitmap(wx.ART_QUESTION)) )
        sizer.Add( wx.StaticBitmap(self,bitmap=wx.ArtProvider.GetBitmap(wx.ART_WARNING)) )
        sizer.Add( wx.StaticBitmap(self,bitmap=wx.ArtProvider.GetBitmap(wx.ART_ERROR)) )
        self.SetSizerAndFit(sizer)
        self.Show()
        winsound.MessageBeep(winsound.MB_ICONASTERISK)
        winsound.PlaySound('SystemHand', winsound.SND_ASYNC | winsound.SND_ALIAS)

app = wx.PySimpleApp()
Frame()
app.MainLoop()
</snippet></ROW><ROW><id>13838857</id><snippet>import operator
years = ['1995','1996','1997', ...]
query = reduce(operator.or_, [Q(year__startswith=year) for year in years])
results = queryset.filter(query)
</snippet></ROW><ROW><id>13838857</id><snippet>WHERE year LIKE '1995%' OR year LIKE '1996%' ...;</snippet></ROW><ROW><id>13838857</id><snippet>extra()</snippet></ROW><ROW><id>13839335</id><snippet>\</snippet></ROW><ROW><id>13839335</id><snippet>\\</snippet></ROW><ROW><id>13839335</id><snippet>sql1 = """SELECT Table1.* INTO test FROM [W:\\path\\1020 Folder\\MB2.mdb].Table1;""" 
</snippet></ROW><ROW><id>13839335</id><snippet>DBfile</snippet></ROW><ROW><id>13839643</id><snippet>REMEMBER_COOKIE_DURATION</snippet></ROW><ROW><id>13839643</id><snippet>REMEMBER_COOKIE_NAME</snippet></ROW><ROW><id>13839643</id><snippet>remember_token</snippet></ROW><ROW><id>13839643</id><snippet>PERMANENT_SESSION_LIFETIME</snippet></ROW><ROW><id>13839643</id><snippet>PERMANENT_SESSION_LIFETIME = datetime.timedelta(minutes=30)
</snippet></ROW><ROW><id>13839643</id><snippet>session.permanent = True</snippet></ROW><ROW><id>13839643</id><snippet>from flask import session

@app.route('/login')
def login():
    # ...
    if login_user(user):
        session.permanent = True
        return redirect(request.args.get('next') or url_for('index'))
    # ...
</snippet></ROW><ROW><id>13839732</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>13839732</id><snippet>import logging

fileh = logging.FileHandler('/tmp/logfile', 'a')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fileh.setFormatter(fileh)

log = logging.getLogger()  # root logger
for hdlr in log.handlers:  # remove all old handlers
    log.removeHandler(hdlr)
log.addHandler(fileh)      # set the new handler
</snippet></ROW><ROW><id>13840040</id><snippet>set_contents_from_filename</snippet></ROW><ROW><id>13840040</id><snippet>set_contents_from_string</snippet></ROW><ROW><id>13840434</id><snippet>readline()</snippet></ROW><ROW><id>13840598</id><snippet>import sys
def programs_info_comb(fileName1, fileName2):
    my_file1 = open(fileName1, "r")
    my_line1=my_file1.readlines()
    my_file1.close()

    my_file2 = open(fileName2, "r")
    my_line2=my_file2.readlines() 
    my_file2.close()

    # load file1 into a dict for lookup later
    infoFor = dict()
    for line1 in my_line1: 
        parts = line1.strip().split("\t")
        infoFor[parts[0]] = parts[1:] 

    # iterate over line numbers to be able to refer previous line numbers
    for line2 in range(len(my_line2)):
        if my_line2[line2].startswith("# Q"):
            name2 = my_line2[line2][9:-1]
            # lookup
            if infoFor.has_key(name2):
                print '# ' + name2
        for info in infoFor[name2]:
                    print info
            # print programinfo and query lines
                print my_line2[line2-1],
                print my_line2[line2],
    # skip program info always
        elif my_line2[line2].startswith("# ProgramInfo"):
            pass
    # otherwise just print as is
        else:
            print my_line2[line2],

if __name__== "__main__":
    programs_info_comb(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>13840598</id><snippet>C:\&gt;python st.py f1.txt f2.txt
# IdName1 Info1 Info2 Info3
#Info: from program1 for name1
#Info: from program2 for name1
# ProgramInfo
# Query: IdName1 Info1 Info2 Info3
# DatabaseInfo
# FiledInfo
line1
line2
# IdName2 Info1 Info2 Info3
#Info: from program1 for name2
#Info: from program2 for name2
# ProgramInfo
# Query: IdName2 Info1 Info2 Info3
# DatabaseInfo
# FiledInfo
# IdName4 Info1 Info2 Info3
#Info: from program1 for name4
# ProgramInfo
# Query: IdName4 Info1 Info2 Info3
# DatabaseInfo
# FiledInfo
line1
line2
line3
line4
</snippet></ROW><ROW><id>13840728</id><snippet>import Tkinter as tk

class Example(tk.Frame):
  def __init__(self, parent):
      tk.Frame.__init__(self, parent)
      self.text = CustomText(self, wrap="word")
      self.text.pack(side="top", fill="both", expand=True)
      self.label = tk.Label(self, anchor="w")
      self.label.pack(side="bottom", fill="x")

      # this is where we tell the custom widget what to call
      self.text.set_callback(self.callback)

  def callback(self, result, *args):
      '''Updates the label with the current cursor position'''
      index = self.text.index("insert")
      self.label.configure(text="index: %s" % index)

class CustomText(tk.Text):
    def __init__(self, *args, **kwargs):
        tk.Text.__init__(self, *args, **kwargs)

        # Danger Will Robinson!
        # Heavy voodoo here. All widget changes happen via
        # an internal Tcl command with the same name as the 
        # widget:  all inserts, deletes, cursor changes, etc
        #
        # The beauty of Tcl is that we can replace that command
        # with our own command. The following code does just
        # that: replace the code with a proxy that calls the
        # original command and then calls a callback. We
        # can then do whatever we want in the callback. 
        private_callback = self.register(self._callback)
        self.tk.eval('''
            proc widget_proxy {actual_widget callback args} {

                # this prevents recursion if the widget is called
                # during the callback
                set flag ::dont_recurse(actual_widget)

                # call the real tk widget with the real args
                set result [uplevel [linsert $args 0 $actual_widget]]

                # call the callback and ignore errors, but only
                # do so on inserts, deletes, and changes in the 
                # mark. Otherwise we'll call the callback way too 
                # often.
                if {! [info exists $flag]} {
                    if {([lindex $args 0] in {insert replace delete}) ||
                        ([lrange $args 0 2] == {mark set insert})} {
                        # the flag makes sure that whatever happens in the
                        # callback doesn't cause the callbacks to be called again.
                        set $flag 1
                        catch {$callback $result {*}$args } callback_result
                        unset -nocomplain $flag
                    }
                }

                # return the result from the real widget command
                return $result
            }
            ''')
        self.tk.eval('''
            rename {widget} _{widget}
            interp alias {{}} ::{widget} {{}} widget_proxy _{widget} {callback}
        '''.format(widget=str(self), callback=private_callback))

    def _callback(self, result, *args):
        self.callback(result, *args)

    def set_callback(self, callable):
        self.callback = callable


if __name__ == "__main__":
  root = tk.Tk()
  frame = Example(root)
  frame.pack(side="top", fill="both", expand=True)
  root.mainloop()
</snippet></ROW><ROW><id>13840803</id><snippet>print pickle.load(process.stdout)
</snippet></ROW><ROW><id>13840901</id><snippet>button['command'] = root_window.destroy # give it the function
# when the button is pressed the call () is done
</snippet></ROW><ROW><id>13840901</id><snippet>button.bind('&lt;Button-1&gt;', root_window.destroy()) # () makes the call
</snippet></ROW><ROW><id>13840901</id><snippet>root_window.destroy()
</snippet></ROW><ROW><id>13840901</id><snippet>button.bind</snippet></ROW><ROW><id>13840901</id><snippet>button.bind('&lt;Button-1&gt;', root_window.destroy)
</snippet></ROW><ROW><id>13840901</id><snippet>root_window.destroy(event)</snippet></ROW><ROW><id>13840901</id><snippet>root.destroy()</snippet></ROW><ROW><id>13840901</id><snippet>button.bind('&lt;Button-1&gt;', lambda event: root_window.destroy())
</snippet></ROW><ROW><id>13840909</id><snippet>re.findall</snippet></ROW><ROW><id>13840909</id><snippet>re.findall(pattern, string, flags=0)</snippet></ROW><ROW><id>13840909</id><snippet>&gt;&gt;&gt; re.findall(r"(?:^|\+)([A-Z])", formula)
['X', 'B', 'D']
</snippet></ROW><ROW><id>13840909</id><snippet>&gt;&gt;&gt; re.findall(r"\b[A-Z]", formula)
['X', 'B', 'D']
</snippet></ROW><ROW><id>13840909</id><snippet>str.split</snippet></ROW><ROW><id>13840909</id><snippet>&gt;&gt;&gt; [s[0] for s in formula.split('+')]
['X', 'B', 'D']
</snippet></ROW><ROW><id>13841037</id><snippet>import ctypes as C
import numpy as np
from numpy.ctypeslib import as_ctypes
lib = C.CDLL("libmytest.so")

def set_N_threads(nthreads):
    self.lib.omp_set_num_threads(nthreads)

def do_some_task(input_array):
    input_array = input_array.astype("float32")
    output_array = np.empty_like(input_array)
    lib.do_some_omp_task(as_ctypes(input_array),
                         as_ctypes(output_array),
                         C.c_size_t(input_array.size))
    return output_array
</snippet></ROW><ROW><id>13841037</id><snippet>#include &lt;omp.h&gt;

void do_some_omp_task(float* input_array,
                      float* output_array,
                      size_t size)
{
   int ii;
#pragma omp parallel for default(shared) private(ii)
   for (ii=0;ii&lt;size;ii++)
       do something using ii and the arrays
}
</snippet></ROW><ROW><id>13841037</id><snippet>gcc -O3 -lm -fopenmp -fPIC -c test.c -o test.o
gcc -shared -lgomp -o libmytest.so test.o
</snippet></ROW><ROW><id>13841577</id><snippet>lipo</snippet></ROW><ROW><id>13841577</id><snippet>lipo -remove ppc libwx_osx_cocoau-2.9.4.0.0.dylib -output libwx_osx_cocoau-2.9.4.0.0.dylib.intel
</snippet></ROW><ROW><id>13841630</id><snippet>ticket</snippet></ROW><ROW><id>13841630</id><snippet>result</snippet></ROW><ROW><id>13841630</id><snippet>min</snippet></ROW><ROW><id>13841630</id><snippet>set</snippet></ROW><ROW><id>13841630</id><snippet># this computes the minimum priority of a ticket
def ticketMin (list):
    min = list[0]
    for ticket in list:
        if (ticket.priority &lt; min.priority):
            min = ticket
    return min

# changed set to list
result = list()   
for ticket in tickets:
# to get rid of the "None" priorities
    if ticket.priority != '&lt;pirority range&gt;':
        print ""
    else:
        #notice the change below
        result.append(ticket)

# changed 'min' to 'ticketMin'
minTicket = ticketMin(result)

print minTicket.priority
print minTicket.code
</snippet></ROW><ROW><id>13841630</id><snippet># changed set to list
result = list()   
for ticket in tickets:
# to get rid of the "None" priorities
    if ticket.priority != '&lt;pirority range&gt;':
        print ""
    else:
        #notice the change below
        result.append(ticket)

# Oscar's solution:
minTicket = min(result, key=lambda val : val.priority)

print minTicket.priority
print minTicket.code
</snippet></ROW><ROW><id>13841885</id><snippet>print 'Content-Type: text/plain\n'</snippet></ROW><ROW><id>13841885</id><snippet>sys.stdout</snippet></ROW><ROW><id>13841885</id><snippet>.py</snippet></ROW><ROW><id>13842091</id><snippet>GtkDrawingArea</snippet></ROW><ROW><id>13842091</id><snippet>GtkDrawingArea</snippet></ROW><ROW><id>13842091</id><snippet>expose-event</snippet></ROW><ROW><id>13842091</id><snippet>draw</snippet></ROW><ROW><id>13842193</id><snippet>#!/usr/bin/env python

from distutils.core import setup

setup(name='myapp',
      version='1.0',
      description='This is a cool webapp by Syrahn.',
      author='Syrahn',
      requires=['googleappengine','nosetests',], #etc
     )
</snippet></ROW><ROW><id>13842193</id><snippet>virtualenv myenv
myenv/bin/python setup.py sdist 
myenv/bin/pip install mypackage.tar.gz
</snippet></ROW><ROW><id>13842193</id><snippet>myenv/bin/nosetests
</snippet></ROW><ROW><id>13842240</id><snippet>sys.excepthook = sys.__excepthook__
</snippet></ROW><ROW><id>13842286</id><snippet>df.xs('C')</snippet></ROW><ROW><id>13842286</id><snippet>df.xs('C')['x']=10
</snippet></ROW><ROW><id>13842286</id><snippet>df['x']</snippet></ROW><ROW><id>13842286</id><snippet>df</snippet></ROW><ROW><id>13842286</id><snippet>df['x']['C']=10
</snippet></ROW><ROW><id>13842286</id><snippet>df</snippet></ROW><ROW><id>13842286</id><snippet>df.xs('C', copy = False)['x']=10
</snippet></ROW><ROW><id>13842286</id><snippet>df</snippet></ROW><ROW><id>13842319</id><snippet>try:
    from cPickle import dumps, loads
except ImportError:
    from pickle import dumps, loads


def s_dump(iterable_to_pickle, file_obj):
    """ dump contents of an iterable iterable_to_pickle to file_obj, a file
    opened in write mode """
    for elt in iterable_to_pickle:
        s_dump_elt(elt, file_obj)

def s_dump_elt(elt_to_pickle, file_obj):
    """ dumps one element to file_obj, a file opened in write mode """
    pickled_elt_str = dumps(elt_to_pickle)
    file_obj.write(pickled_elt_str)
    # record separator is a blank line
    # (since pickled_elt_str might contain its own newlines)
    file_obj.write('\n\n')

def s_load(file_obj):
    """ load contents from file_obj, returning a generator that yields one
        element at a time """
    cur_elt = []
    for line in file_obj:
        cur_elt.append(line)

        if line == '\n':
            pickled_elt_str = ''.join(cur_elt)
            elt = loads(pickled_elt_str)
            cur_elt = []
            yield elt
</snippet></ROW><ROW><id>13842319</id><snippet>from __future__ import print_function
import os
import sys

if __name__ == '__main__':
    if os.path.exists('obj.serialized'):
        # load a file 'obj.serialized' from disk and 
        # spool through iterable      
        with open('obj.serialized', 'r') as handle:
            _generator = s_load(handle)
            for element in _generator:
                print(element)
    else:
        # or create it first, otherwise
        with open('obj.serialized', 'w') as handle:
            for i in xrange(100000):
                s_dump_elt({'i' : i}, handle)
</snippet></ROW><ROW><id>13842337</id><snippet>In [36]: pd.Period(ordinal=int(t[0][0]), freq='H')
Out[36]: Period('2012-04-12 18:00', 'H')

In [37]: pd.Period(ordinal=int(t[0][0]), freq='H').to_timestamp()
Out[37]: &lt;Timestamp: 2012-04-12 18:00:00&gt;
</snippet></ROW><ROW><id>13842414</id><snippet>2*n</snippet></ROW><ROW><id>13842414</id><snippet>m*n</snippet></ROW><ROW><id>13842622</id><snippet>lower = x / 3 + 2
upper = x / 2 + 3
myarray[lower:upper:2]
</snippet></ROW><ROW><id>13842674</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13842674</id><snippet>.</snippet></ROW><ROW><id>13843343</id><snippet>libedit</snippet></ROW><ROW><id>13843343</id><snippet>easy_install readline</snippet></ROW><ROW><id>13843374</id><snippet>import re

r = re.compile(r'(&lt;my id="1"&gt;.*)(&lt;/my&gt;)')

with open(infilename, 'r') as infile, open(newfile, 'w+') as outfile:
    for line in infile:
        match = r.search(line)
        if match:
            f.write(match.group(1) + '(1)' + match.group(2))
        else:
            f.write(line)
</snippet></ROW><ROW><id>13843473</id><snippet>tr</snippet></ROW><ROW><id>13843473</id><snippet>td</snippet></ROW><ROW><id>13843473</id><snippet>currencies = {}
trs = soup.find_all('tr') # find rows
for tr in trs[1:-3]: # skip first and last 3 (or whatever)
    text = list(tr.strings) # content of all text stuff in tr (works in this case)
    # [u'U.S Dollar', u'USDGHS', u'1.8673', u'1.8994']
    currencies[text[1]] = [float(text[2]), float(text[3])]
</snippet></ROW><ROW><id>13843473</id><snippet>&gt;&gt;&gt; currencies
{u'USDGHS': [1.8673, 1.8994], u'JPYGHS': [0.0226, 0.023], u'CHFGHS': [2.0034, 2.0375], u'CADGHS': [1.8936, 1.9259], ...}
</snippet></ROW><ROW><id>13843746</id><snippet>import random
import time

class Sequencer:

    def __init__(self, limit, seed):
        random.seed(seed)
        self.__sequence = tuple(random.sample(range(limit), limit))

    def __call__(self, start):
        yield from self.__sequence[self.__sequence.index(start):]

    @property
    def longest(self):
        return self.__sequence[0]

def main(limit):
    while True:
        sequence = Sequencer(limit, str(time.time()))
        longest = find_longest(limit, sequence)
        print('Found longest ' +
              ('' if longest == sequence.longest else 'in') +
              'correctly.')

def find_longest(limit, sequence):
    start, found = set(range(limit)), set()
    while start:
        number = start.pop()
        result = set(get_sequence(sequence(number), found))
        start -= result
        found |= result
    return number

def get_sequence(sequence, found):
    for number in sequence:
        if number in found:
            break
        yield number

if __name__ == '__main__':
    main(1000000)
</snippet></ROW><ROW><id>13843746</id><snippet>def main():
    start, found = set(range(2, 1000000)), {1: 1}
    while start:
        scope = reversed(tuple(sequence(start.pop(), found)))
        value = dict(map(reversed, enumerate(scope, found[next(scope)] + 1)))
        start -= frozenset(value)
        found.update(value)
    lengths = dict(map(reversed, found.items()))
    print(lengths[max(lengths)])

def sequence(n, found):
    while True:
        yield n
        if n in found:
            break
        n = 3 * n + 1 if n &amp; 1 else n &gt;&gt; 1

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13844171</id><snippet>readlines</snippet></ROW><ROW><id>13844171</id><snippet>file</snippet></ROW><ROW><id>13844171</id><snippet>fileobject = open(datafilename)
lines = fileobject.readlines()
</snippet></ROW><ROW><id>13844171</id><snippet>for line in fileobject:
    #do something with the line
</snippet></ROW><ROW><id>13844171</id><snippet>"\n"</snippet></ROW><ROW><id>13844171</id><snippet>.rstrip("\n")</snippet></ROW><ROW><id>13844171</id><snippet>str.strip</snippet></ROW><ROW><id>13844171</id><snippet>stripped_lines = [ line.rstrip("\n") for line in fileobject ]    
</snippet></ROW><ROW><id>13844171</id><snippet>lines = fileobject.readlines()
</snippet></ROW><ROW><id>13844171</id><snippet>lines = list(fileobject)
</snippet></ROW><ROW><id>13844330</id><snippet>with open(filename, 'r') as f:    
    for offset in offsets:
        f.seek(offset)
        print(f.readline())
</snippet></ROW><ROW><id>13844482</id><snippet>&gt;&gt;&gt; m = ["Mon", "Tue", "Wed", "Thu", "Fri"]
&gt;&gt;&gt; n = ["Tue", "Wed", "Mon", "Thu", "Fri", "Tue", "Mon", "Fri"]
&gt;&gt;&gt; sorted(n, key=m.index)
['Mon', 'Mon', 'Tue', 'Tue', 'Wed', 'Thu', 'Fri', 'Fri']
</snippet></ROW><ROW><id>13844482</id><snippet>n</snippet></ROW><ROW><id>13844482</id><snippet>m</snippet></ROW><ROW><id>13844482</id><snippet>key=your_dict.get</snippet></ROW><ROW><id>13844482</id><snippet>&gt;&gt;&gt; d = {name:val for val, name in enumerate(m)}
&gt;&gt;&gt; d
{'Fri': 4, 'Thu': 3, 'Wed': 2, 'Mon': 0, 'Tue': 1}
&gt;&gt;&gt; sorted(n, key=d.get)
['Mon', 'Mon', 'Tue', 'Tue', 'Wed', 'Thu', 'Fri', 'Fri']
</snippet></ROW><ROW><id>13844482</id><snippet>None</snippet></ROW><ROW><id>13844482</id><snippet>list.index</snippet></ROW><ROW><id>13844482</id><snippet>key=d.__getitem__</snippet></ROW><ROW><id>13844802</id><snippet>print client.last_received().getChild("soap:Envelope").getChild("soap:Header")
.getChild("ResponseHeader").getChild("resultCode").getText()
</snippet></ROW><ROW><id>13845076</id><snippet>.pth</snippet></ROW><ROW><id>13845076</id><snippet>pth</snippet></ROW><ROW><id>13845076</id><snippet>path</snippet></ROW><ROW><id>13845076</id><snippet>sys.path</snippet></ROW><ROW><id>13845076</id><snippet>site</snippet></ROW><ROW><id>13845076</id><snippet>import</snippet></ROW><ROW><id>13845076</id><snippet>sys.path</snippet></ROW><ROW><id>13845076</id><snippet>setuptools</snippet></ROW><ROW><id>13845076</id><snippet>import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
</snippet></ROW><ROW><id>13845076</id><snippet>.pth</snippet></ROW><ROW><id>13845076</id><snippet>import sys,types,os; p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('zope',)); ie = os.path.exists(os.path.join(p,'__init__.py')); m = not ie and sys.modules.setdefault('zope',types.ModuleType('zope')); mp = (m or []) and m.__dict__.setdefault('__path__',[]); (p not in mp) and mp.append(p)
</snippet></ROW><ROW><id>13845076</id><snippet>.pth</snippet></ROW><ROW><id>13845076</id><snippet>some_module</snippet></ROW><ROW><id>13845076</id><snippet>import some_module
</snippet></ROW><ROW><id>13845200</id><snippet>-i</snippet></ROW><ROW><id>13845200</id><snippet>-c</snippet></ROW><ROW><id>13845200</id><snippet>app</snippet></ROW><ROW><id>13845200</id><snippet>-c</snippet></ROW><ROW><id>13845200</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>13845200</id><snippet>plone.recipe.zope2instance</snippet></ROW><ROW><id>13845200</id><snippet>plone.recipe.zope2instance</snippet></ROW><ROW><id>13845200</id><snippet>plone/recipe/zope2instance/ctl.py</snippet></ROW><ROW><id>13845200</id><snippet>do_debug()</snippet></ROW><ROW><id>13845200</id><snippet>def do_debug(self, arg):
    interactive_startup = ("import os;"
        "os.path.exists(os.environ.get('PYTHONSTARTUP', '')) "
        "and execfile(os.environ['PYTHONSTARTUP']); del os;"
        'import Zope2; app=Zope2.app()')
    cmdline = self.get_startup_cmd(self.options.python,
                                   interactive_startup,
                                   pyflags = '-i', )
</snippet></ROW><ROW><id>13845200</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>13845240</id><snippet>def breakTest():
    i = 0
    while True:
        i += 1
        if i == 10:
            break

def booleanTest():
    i = 0
    while i &lt; 10:
        i += 1
</snippet></ROW><ROW><id>13845240</id><snippet>In [14]: %timeit breakTest()
1000000 loops, best of 3: 999 ns per loop

In [15]: %timeit booleanTest()
1000000 loops, best of 3: 201 ns per loop
</snippet></ROW><ROW><id>13845240</id><snippet>for i in range(11): ...</snippet></ROW><ROW><id>13845400</id><snippet>class MyClassOne:
    def __init__(self):
        self.country = "Spain"
        self.city = "Barcelona"
        self.things = []
</snippet></ROW><ROW><id>13845400</id><snippet>class MyClassTwo:
    country = "Spain"
    city = "Barcelona"
    things = []
</snippet></ROW><ROW><id>13845400</id><snippet>def information(obj):
    print "I'm from {0}, ({1}). I own: {2}".format(
                obj.city, obj.country, ','.join(obj.things))
</snippet></ROW><ROW><id>13845400</id><snippet>MyClassOne</snippet></ROW><ROW><id>13845400</id><snippet>foo1 = MyClassOne()
bar1 = MyClassOne()

foo1.city = "Milan"
foo1.country = "Italy"
foo1.things.append("Something")
</snippet></ROW><ROW><id>13845400</id><snippet>information()</snippet></ROW><ROW><id>13845400</id><snippet>foo1</snippet></ROW><ROW><id>13845400</id><snippet>bar1</snippet></ROW><ROW><id>13845400</id><snippet>&gt;&gt;&gt; information(foo1)
I'm from Milan, (Italy). I own: Something

&gt;&gt;&gt; information(bar1)
I'm from Barcelona, (Spain). I own: 
</snippet></ROW><ROW><id>13845400</id><snippet>MyClassTwo</snippet></ROW><ROW><id>13845400</id><snippet>foo2 = MyClassTwo()
bar2 = MyClassTwo()

foo2.city = "Milan"
foo2.country = "Italy"
foo2.things.append("Something")
</snippet></ROW><ROW><id>13845400</id><snippet>information()</snippet></ROW><ROW><id>13845400</id><snippet>&gt;&gt;&gt; information(foo2)
I'm from Milan, (Italy). I own: Something
&gt;&gt;&gt; information(bar2)
I'm from Barcelona, (Spain). I own: Something
</snippet></ROW><ROW><id>13845400</id><snippet>things</snippet></ROW><ROW><id>13845400</id><snippet>things</snippet></ROW><ROW><id>13845400</id><snippet>bar2</snippet></ROW><ROW><id>13845400</id><snippet>bar2.things = []
</snippet></ROW><ROW><id>13845400</id><snippet>&gt;&gt;&gt; information(foo2)
I'm from Milan, (Italy). I own: Something
&gt;&gt;&gt; information(bar2)
I'm from Barcelona, (Spain). I own: 
</snippet></ROW><ROW><id>13845499</id><snippet>from itertools import takewhile, count

def sum_func(func, n):
    return sum(takewhile(lambda x: x &lt; n, (func(i) for i in count(1))))
</snippet></ROW><ROW><id>13845499</id><snippet>&gt;&gt;&gt; sum_func(lambda x: x**2, 20)  # 1^2 + 2^2 + 3^2 + 4^2
30
</snippet></ROW><ROW><id>13845499</id><snippet>def sum_func(func, pred):
    return sum(takewhile(pred, (func(i) for i in count(1))))
</snippet></ROW><ROW><id>13845499</id><snippet>&gt;&gt;&gt; sum_func(lambda x: -x*2, lambda x: x &gt; -10)  # -1*2 + -2*2 + -3*2 + -4*2
-20
</snippet></ROW><ROW><id>13846013</id><snippet>In [1]: val = object()

In [2]: d = {}

In [3]: d[123] = val

In [4]: d['name'] = val

In [5]: d
Out[5]: {123: &lt;object at 0x23c6d0&gt;, 'name': &lt;object at 0x23c6d0&gt;}
</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>non-Python-C-API</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>POINTER</snippet></ROW><ROW><id>13846086</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>__slots__</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>Structure</snippet></ROW><ROW><id>13846086</id><snippet>PyObject *</snippet></ROW><ROW><id>13846086</id><snippet>Cython</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>ctypes</snippet></ROW><ROW><id>13846086</id><snippet>PyList_GetItem</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>obj</snippet></ROW><ROW><id>13846086</id><snippet>&lt;ConfigurationParser.LP_LED object at 0x7f678a06fcb0&gt;</snippet></ROW><ROW><id>13846086</id><snippet>LED</snippet></ROW><ROW><id>13846086</id><snippet>LED</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>LED</snippet></ROW><ROW><id>13846086</id><snippet>POINTER(LED)</snippet></ROW><ROW><id>13846086</id><snippet>LED</snippet></ROW><ROW><id>13846086</id><snippet>list</snippet></ROW><ROW><id>13846086</id><snippet>PyObject *led = ledarray[i];
</snippet></ROW><ROW><id>13846183</id><snippet>"""This pure Python MySQL client provides a DB-API to a MySQL database by talking directly to the server via the binary client/server protocol."""

import pymysql
conn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root', passwd=None, db='mysql')
cur = conn.cursor()
cur.execute("SELECT Host,User FROM user")
for response in cur:
    print(response)
cur.close()
conn.close()
</snippet></ROW><ROW><id>13846221</id><snippet>build/bdist.&lt;platform&gt;/egg/</snippet></ROW><ROW><id>13846221</id><snippet>co_filename</snippet></ROW><ROW><id>13846221</id><snippet>bdist</snippet></ROW><ROW><id>13846225</id><snippet>list_by_fours = []
list_len = len(c.list)
last_point = 0
next_point = 4

while last_point &lt; list_len:
  if next_point &gt; list_len:
    next_point = list_len
  list_by_fours.append(c.list[last_point:next_point])
  last_point += 4
  next_point += 4

#Make sure you add list_by_fours to the template context
</snippet></ROW><ROW><id>13846225</id><snippet>{% for bucket in list_by_fours %}
        {% for p in bucket %}
             ...
        {% endfor %}
{% endif %}
</snippet></ROW><ROW><id>13846238</id><snippet>None</snippet></ROW><ROW><id>13846238</id><snippet>qs.AddQuestion(None, Question, Answer[1] , Answer[2], Answer[3], Answer[4], Answer[5])
</snippet></ROW><ROW><id>13846238</id><snippet>.AddQuestion</snippet></ROW><ROW><id>13846238</id><snippet>VALUES (?, ?, ?, ?, ?, ?, ?, ?)
</snippet></ROW><ROW><id>13846250</id><snippet>for wNode in writeNodes:
    for eachAttrib in ['first','last','file','file_type','channels','use_limit']:
        wnodeData.setdefault(wNode,[]).append(nuke.toNode(wNode)[eachAttrib].value())
</snippet></ROW><ROW><id>13846291</id><snippet>f.validate('a').unspace().len_valid(2)  
</snippet></ROW><ROW><id>13846291</id><snippet>dict</snippet></ROW><ROW><id>13846291</id><snippet>f.a</snippet></ROW><ROW><id>13846291</id><snippet>f['a']</snippet></ROW><ROW><id>13846291</id><snippet>dict</snippet></ROW><ROW><id>13846291</id><snippet>AttrDict</snippet></ROW><ROW><id>13846291</id><snippet>Field</snippet></ROW><ROW><id>13846291</id><snippet>a_invalid</snippet></ROW><ROW><id>13846291</id><snippet>a</snippet></ROW><ROW><id>13846291</id><snippet>try:
    avalid = not f.a_invalid
except NameError:
    avalid = True
</snippet></ROW><ROW><id>13846291</id><snippet>avalid = not getattr(f, 'a_invalid', False)
</snippet></ROW><ROW><id>13846291</id><snippet>_invalid</snippet></ROW><ROW><id>13846291</id><snippet>f.a_invalid</snippet></ROW><ROW><id>13846291</id><snippet>f.a.invalid</snippet></ROW><ROW><id>13846291</id><snippet>class Field(object):

    def __init__(self, value):
        self.value = value
        self.valid = True

    def unspace(self):
        self.value = self.value.replace(' ', '')
        return self

    def len_valid(self, length):
        if len(self.value) &lt; length:
            self.valid = False
        return self
</snippet></ROW><ROW><id>13846291</id><snippet>class Form(object):
    …
    def valid(self):
        return all(field.valid for field in self.fields)
</snippet></ROW><ROW><id>13846291</id><snippet>valid</snippet></ROW><ROW><id>13846291</id><snippet>@property</snippet></ROW><ROW><id>13846808</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        layout = QtGui.QVBoxLayout(self)
        layout.setMargin(15)
        layout.setSpacing(10)
        for text in 'One Two Three Four Five'.split():
            layout.addWidget(QtGui.QPushButton(text, self))
        self.rubberband = QtGui.QRubberBand(
            QtGui.QRubberBand.Rectangle, self)
        self.setMouseTracking(True)

    def mousePressEvent(self, event):
        self.origin = event.pos()
        self.rubberband.setGeometry(
            QtCore.QRect(self.origin, QtCore.QSize()))
        self.rubberband.show()
        QtGui.QWidget.mousePressEvent(self, event)

    def mouseMoveEvent(self, event):
        if self.rubberband.isVisible():
            self.rubberband.setGeometry(
                QtCore.QRect(self.origin, event.pos()).normalized())
        QtGui.QWidget.mouseMoveEvent(self, event)

    def mouseReleaseEvent(self, event):
        if self.rubberband.isVisible():
            self.rubberband.hide()
            selected = []
            rect = self.rubberband.geometry()
            for child in self.findChildren(QtGui.QPushButton):
                if rect.intersects(child.geometry()):
                    selected.append(child)
            print 'Selection Contains:\n ',
            if selected:
                print '  '.join(
                    'Button: %s\n' % child.text() for child in selected)
            else:
                print ' Nothing\n'
        QtGui.QWidget.mouseReleaseEvent(self, event)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13846921</id><snippet>{% expr -arbitrary-python-expression- %}</snippet></ROW><ROW><id>13846921</id><snippet>{% expr x.bar(1,2,3) as snort %}</snippet></ROW><ROW><id>13846921</id><snippet>snort</snippet></ROW><ROW><id>13846921</id><snippet>{% expr %}</snippet></ROW><ROW><id>13847369</id><snippet>session_key</snippet></ROW><ROW><id>13847369</id><snippet>request</snippet></ROW><ROW><id>13847369</id><snippet>session_key</snippet></ROW><ROW><id>13847369</id><snippet>&lt;input type="hidden" id="session_key" value="{{ request.session.session_key }}"&gt;
...
&lt;script type="text/javascript" charset="utf-8"&gt;
    function someHandler(action, post_id, some_val){
        var data = {
            'action': action,
            'post_id': post_id,
            'value': some_val,
            'session_key': $("#session_key").val()
        };
        socket.send(data);
    }
&lt;/script&gt;
</snippet></ROW><ROW><id>13847369</id><snippet>from django.contrib.sessions.models import Session
from django.contrib.auth.models import User

def message(request, socket, context, message):
    session = Session.objects.get(session_key=message['session_key'])
    uid = session.get_decoded().get('_auth_user_id')
    user = User.objects.get(pk=uid)
</snippet></ROW><ROW><id>13847398</id><snippet>''.join()</snippet></ROW><ROW><id>13847398</id><snippet>blocksize</snippet></ROW><ROW><id>13847398</id><snippet>def chunker(target, blocksize=DEFAULT_BLOCK_SIZE):
    data = []
    buffer = ''
    buffer_len = 0
    target_send = target.send
    while True:
        try:
            input_data = yield
            data.append(input_data)
            buffer_len += len(input_data)
            if buffer_len &gt;= blocksize:
                buffer = ''.join(data)
                chunks, leftover = divmod(buffer_len, blocksize)
                for i in xrange(0, chunks*blocksize, blocksize):
                    target_send(buffer[i:i+blocksize])
                buffer = buffer[-leftover:] if leftover else ""
                buffer_len = len(buffer)
                data = [buffer] if buffer else []
        except CleanUp:
            buffer = ''.join(data)
            if buffer:
                target_send(buffer)
            target_send("")
</snippet></ROW><ROW><id>13847488</id><snippet>def tweet(status):</snippet></ROW><ROW><id>13847488</id><snippet>authkey.statuses.update(status=status)
</snippet></ROW><ROW><id>13847488</id><snippet>status=status</snippet></ROW><ROW><id>13847488</id><snippet>def tweet(status):
    if len(status) &gt; 140 :
        raise Exception ('Status message too long !!!')
    authkey = t.Twitter(auth=t.OAuth(ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET, CONSUMER_KEY, CONSUMER_SECRET))
    authkey.statuses.update(status=status) # &lt;----- only this line changes

....

price = 99.99
status = "buy price is $" + str(price)
tweet(status)
</snippet></ROW><ROW><id>13847574</id><snippet>popen</snippet></ROW><ROW><id>13847574</id><snippet>readelf</snippet></ROW><ROW><id>13847574</id><snippet>libelf</snippet></ROW><ROW><id>13847574</id><snippet>mmap</snippet></ROW><ROW><id>13847574</id><snippet>-c</snippet></ROW><ROW><id>13847574</id><snippet>-</snippet></ROW><ROW><id>13847574</id><snippet>with zipfile.ZipFile(file,'r') as z:
    with z.open(binary_path) as bin:
        subprocess.Popen(['gzip','-dc'], stdin=bin)
</snippet></ROW><ROW><id>13847574</id><snippet>readelf</snippet></ROW><ROW><id>13847630</id><snippet>import re

start_ln = re.compile(r'\[\d+\] ppt: \(.*?\) \d+ \d+ (?P&lt;ivar&gt;\d+\.\d+\.\d+\.\d+)')
tstamp_ln = re.compile(r'timestamp: \d+')
state_ln = re.compile(r'states: (?P&lt;pcount&gt;\d+) (?P&lt;ggroup&gt;(\[\d+\(average \d+ \d+\)\])+)')
group_p = re.compile(r'\[(?P&lt;st&gt;\d+)\(average (?P&lt;avg&gt;\d+) \d+\)\]')

f = open('pfile', 'r')

state = 'WAIT'
llist = []
ldict = {}
cvar = None

for ln in f:
    if state == 'WAIT':
        mtch = start_ln.match(ln)
        if mtch is not None:
            cvar = mtch.groupdict()['ivar']
            ldict = {}
            state = 'LINE#1'
            continue
    elif state == 'LINE#1':
        mtch = tstamp_ln.match(ln)
        if mtch is not None:
            ldict.update(mtch.groupdict())
            state = 'LINE#2'
            continue
    elif state == 'LINE#2':
        mtch = state_ln.match(ln)
        if mtch is not None:
            groupline = mtch.groupdict()['ggroup']
            mtch2 = group_p.findall(groupline)
            ldict[cvar] = dict(mtch2)
            cvar = None
            state = 'WAIT'
        llist.append(ldict)


for i in llist:
    print i
</snippet></ROW><ROW><id>13847764</id><snippet>for csvFile in directory:
    root = Element('Order')
    with open(csvFile, 'rt') as f:
        junk = next(f)         #read the first line, don't do anything with it.
        reader = csv.reader(f)
        for row in reader:
            queue = row[0]
            token = row[1]
            current_order = SubElement(root, 'Token', {'text':token})
            details = SubElement(current_order, 'Queue',
                                 {'queue':queue})

    print prettify(root)
</snippet></ROW><ROW><id>13847782</id><snippet>extract_features</snippet></ROW><ROW><id>13847995</id><snippet>BODYSTRUCTURE</snippet></ROW><ROW><id>13847995</id><snippet>(("TEXT" "PLAIN" ("CHARSET" "UTF-8") NIL NIL "QUOTED-PRINTABLE" 56 1 NIL NIL NIL NIL)
 ("TEXT" "HTML" ("CHARSET" "UTF-8") (NAME "") NIL NIL "BASE64" 12345 NIL 
  ("attachment" ("FILENAME" "")) NIL NIL) 
 ("IMG" "JPEG" (NAME "funny picture") NIL NIL "BASE64" 56789 NIL
  ("attachment" ("FILENAME" "image.jpg")) NIL NIL))
 "MIXED" ("BOUNDARY" "----_=_NextPart_001_1234ABCD.56789EF0") NIL NIL NIL)
</snippet></ROW><ROW><id>13847995</id><snippet>(BODY ENVELOPE)</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[1])</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[2])</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[3])</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[1])</snippet></ROW><ROW><id>13847995</id><snippet>imaplib</snippet></ROW><ROW><id>13847995</id><snippet>BODYSTRUCTURE</snippet></ROW><ROW><id>13847995</id><snippet>(BODY ENVELOPE)</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[3])</snippet></ROW><ROW><id>13847995</id><snippet>BODYSTRUCTURE</snippet></ROW><ROW><id>13847995</id><snippet>(BODY[1])</snippet></ROW><ROW><id>13847995</id><snippet>RFC822</snippet></ROW><ROW><id>13848127</id><snippet>repr()</snippet></ROW><ROW><id>13848127</id><snippet>irn = ''.join([repr(num) for num in range(loop_count)])
</snippet></ROW><ROW><id>13848127</id><snippet>''.join()</snippet></ROW><ROW><id>13848127</id><snippet>irn = ''
for num in range(loop_count):
    irn += repr(num)
</snippet></ROW><ROW><id>13848127</id><snippet>repr()</snippet></ROW><ROW><id>13848127</id><snippet>str(num)</snippet></ROW><ROW><id>13848478</id><snippet>import sys
from PyQt4 import QtGui
app = QtGui.QApplication(sys.argv)
window = QtGui.QMainWindow()
window.setGeometry(0, 0, 400, 200)
pic = QtGui.QLabel(window)
pic.setGeometry(10, 10, 400, 200)
pixmap = QtGui.QPixmap(FILENAME)
pixmap = pixmap.scaledToHeight(200)
pic.setPixmap(pixmap)

window.show()
sys.exit(app.exec_())    
</snippet></ROW><ROW><id>13848478</id><snippet>def describe(obj):
    for key in dir(obj):
        try:
            val = getattr(obj, key)
        except AttributeError:
            continue
        if callable(val):
            help(val)
        else:
            print('{k} =&gt; {v}'.format(k = key, v = val))
        print('-'*80)

pixmap = QtGui.QPixmap(FILENAME)
describe(pixmap)
</snippet></ROW><ROW><id>13848478</id><snippet>describe</snippet></ROW><ROW><id>13848478</id><snippet>-&gt; QPixmap</snippet></ROW><ROW><id>13848478</id><snippet>QPixmap</snippet></ROW><ROW><id>13848478</id><snippet>scaledToHeight</snippet></ROW><ROW><id>13848478</id><snippet>scaledToWidth</snippet></ROW><ROW><id>13848541</id><snippet>net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.ip_forward = 1
</snippet></ROW><ROW><id>13848860</id><snippet>check_five</snippet></ROW><ROW><id>13848860</id><snippet>check_two</snippet></ROW><ROW><id>13848860</id><snippet>check_one</snippet></ROW><ROW><id>13848860</id><snippet>check_toggle</snippet></ROW><ROW><id>13848860</id><snippet>MyApp</snippet></ROW><ROW><id>13848860</id><snippet>self.log = Tk.Text</snippet></ROW><ROW><id>13848860</id><snippet>MyApp.__init__</snippet></ROW><ROW><id>13848860</id><snippet>MyApp</snippet></ROW><ROW><id>13848860</id><snippet>self.log</snippet></ROW><ROW><id>13848860</id><snippet>if __name__ == "__main__":</snippet></ROW><ROW><id>13848860</id><snippet>app.check_five</snippet></ROW><ROW><id>13848860</id><snippet>check_five</snippet></ROW><ROW><id>13848860</id><snippet>app</snippet></ROW><ROW><id>13848860</id><snippet>check_five</snippet></ROW><ROW><id>13848860</id><snippet>check_*</snippet></ROW><ROW><id>13848860</id><snippet>import Tkinter as Tk
import time
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BCM)

# setup 5 output pin
GPIO.setup(11, GPIO.OUT)
# setup 2 output pin
GPIO.setup(14, GPIO.OUT)
# setup 1 output pin
GPIO.setup(15, GPIO.OUT)

# set low output states on start
GPIO.output(11, GPIO.LOW)
GPIO.output(14, GPIO.LOW)
GPIO.output(15, GPIO.LOW)

# setup 5 input pin
GPIO.setup(25, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)
# setup 2 input pin
GPIO.setup(24, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)
# setup 1 input pin
GPIO.setup(23, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)

# setup window toggle pin
GPIO.setup(22, GPIO.IN, pull_up_down = GPIO.PUD_DOWN)


# out functions light certain led a number of times     
def fiveTimes_out():
    #1
    GPIO.output(11, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(11, GPIO.LOW)
    time.sleep(0.200)
    #2
    GPIO.output(11, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(11, GPIO.LOW)
    time.sleep(0.200)
    #3
    GPIO.output(11, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(11, GPIO.LOW)
    time.sleep(0.200)
    #4
    GPIO.output(11, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(11, GPIO.LOW)
    time.sleep(0.200)
    #5          
    GPIO.output(11, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(11, GPIO.LOW)
    time.sleep(0.200)

def twoTimes_out():
    #1
    GPIO.output(14, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(14, GPIO.LOW)
    time.sleep(0.200)
    #2
    GPIO.output(14, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(14, GPIO.LOW)
    time.sleep(0.200)        

def oneTimes_out():
    #1
    GPIO.output(15, GPIO.HIGH)
    time.sleep(0.200)
    GPIO.output(15, GPIO.LOW)
    time.sleep(0.200)



########################################################################
class OtherFrame(Tk.Toplevel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        Tk.Toplevel.__init__(self)
        self.geometry("640x480+0+0")
        self.configure(background = 'yellow')

        self.title("otherFrame")

########################################################################
class MyApp(object):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):

        """Constructor"""
        self.root = parent
        self.root.title("Main frame")
        self.frame = Tk.Frame(parent)
        self.frame.pack()

        btn = Tk.Button(self.frame, text = "Other Window", command = self.openFrame)
        btn.pack()

        btn2 = Tk.Button(self.frame, text = "Function test", command = twoTimes_out)
        btn2.pack()

        titleLabel = Tk.Label(text = "My Label")
        titleLabel.place(x = 40, y = 60)

        insertLabel = Tk.Label(text = "Label")
        insertLabel.place(x = 170, y = 110)

        self.log = Tk.Text(state = 'normal', width = 70, height = 10, wrap = 'none')
        self.log.place(x = 40, y = 160)

        thanksLabel = Tk.Label(text = "Thank You!")
        thanksLabel.place(x = 70, y = 350)

        self.log.insert('1.0', 'here is my text to insert')


    #----------------------------------------------------------------------
    def hide(self):
        """"""
        self.root.withdraw()

    #----------------------------------------------------------------------
    def openFrame(self):
        """"""
        self.hide()
        subFrame = OtherFrame()
        handler = lambda: self.onCloseOtherFrame(subFrame)
        btn = Tk.Button(subFrame, text = "Close", command = handler)
        btn.pack()
        secondPageLabel = Tk.Label(text = "HI")
        secondPageLabel.place(x = 170, y = 110)

    #----------------------------------------------------------------------
    def onCloseOtherFrame(self, otherFrame):
        """"""
        otherFrame.destroy()
        self.show()

    #----------------------------------------------------------------------
    def show(self):
        """"""
        self.root.update()
        self.root.deiconify()

    # in functions check if buttons are pushed and run specific functions
    # also write messages to log    

    def check_five(self): 
        if (GPIO.input(25) == GPIO.HIGH):
            fiveTimes_out()
            self.log.insert('1.0', '5 button down')
        else:
            self.log.insert('1.0', '5 button up')
        root.after(10, self.check_five)

    def check_two(self): 
        if (GPIO.input(24) == GPIO.HIGH):
            twoTimes_out()
            self.log.insert('1.0', '2 button down')
        else:
            self.log.insert('1.0', '2 button up')
        root.after(10, self.check_five)

    def check_one(self): 
        if (GPIO.input(23) == GPIO.HIGH):
            oneTimes_out()
            self.log.insert('1.0', '1 button down')
        else:
            self.log.insert('1.0', '1 button up')
        root.after(10, self.check_five)

    # check if window toggle button is pushed
    # you reference self in check_toggle, so check_toggle should probably be a method.
    def check_toggle(self): 
        if (GPIO.input(22) == GPIO.HIGH):
            self.openFrame()                 
        root.after(10, check_toggle)

#----------------------------------------------------------------------
if __name__ == "__main__":
    root = Tk.Tk()

    root.geometry("640x480+0+0")
    root.configure(background = 'red')
    app = MyApp(root)
    root.after(10, app.check_five)
    root.after(10, app.check_two)
    root.after(10, app.check_one)
    root.after(10, app.check_toggle)
    root.mainloop()
</snippet></ROW><ROW><id>13848869</id><snippet>DictWriter</snippet></ROW><ROW><id>13848869</id><snippet>rows = json.loads(x)
with open('test.csv', 'wb+') as f:
    dict_writer = csv.DictWriter(f, fieldnames=['longitude', 'latitude'])
    dict_writer.writeheader()
    dict_writer.writerows(rows)
</snippet></ROW><ROW><id>13848869</id><snippet>.writeheader()</snippet></ROW><ROW><id>13848869</id><snippet>rows = json.loads(x)
fieldnames = ['longitude', 'latitude']
with open('test.csv', 'wb+') as f:
    dict_writer = csv.DictWriter(f, fieldnames=fieldnames)
    dict_writer.writerow(dict(zip(fieldnames, fieldnames)))
    dict_writer.writerows(rows)
</snippet></ROW><ROW><id>13848903</id><snippet>\u200b</snippet></ROW><ROW><id>13848903</id><snippet>U+200B ZERO WIDTH SPACE</snippet></ROW><ROW><id>13849028</id><snippet>"If any of your Django views send email using Django's email functionality,
you probably don't want to send email each time you run a test using that
view. For this reason, Django's test runner automatically redirects all
Django-sent email to a dummy outbox. This lets you test every aspect of
sending email -- from the number of messages sent to the contents of each
message -- without actually sending the messages."
</snippet></ROW><ROW><id>13849295</id><snippet>acceptableChars</snippet></ROW><ROW><id>13849295</id><snippet>&gt;&gt;&gt; acceptableChars = set('abcdefghi')
</snippet></ROW><ROW><id>13849295</id><snippet>acceptableChars</snippet></ROW><ROW><id>13849295</id><snippet>&gt;&gt;&gt; def isAcceptable(s):
    return set(s) &lt;= acceptableChars
&gt;&gt;&gt; isAcceptable("abc")
True
&gt;&gt;&gt; isAcceptable("xyz")
False
</snippet></ROW><ROW><id>13849348</id><snippet>sys.path.append('/home/ubuntu/project/Hera')
sys.path.append('/home/ubuntu/project/Hera/Hera')
</snippet></ROW><ROW><id>13849348</id><snippet>/srv/project/Hera</snippet></ROW><ROW><id>13849348</id><snippet>os.path.join(os.path.abspath(os.path.dirname(__file__)), '..')</snippet></ROW><ROW><id>13849426</id><snippet>Y2s.append(Y2test)</snippet></ROW><ROW><id>13849426</id><snippet>while</snippet></ROW><ROW><id>13849426</id><snippet>import numpy as np
import scipy.optimize as opt

# y1 = interpolated values for one of the spectra
# y2 = interpolated values for the other spectra, normalise this one 

def errfunc(p, a1, a2):
    return np.sum(a1 - a2 * p)

p0 = 1.  # initial guess
norm_factor = opt.fmin(errfunc, p0, args=(y1, y2))
</snippet></ROW><ROW><id>13849426</id><snippet>norm_factor</snippet></ROW><ROW><id>13849577</id><snippet>list</snippet></ROW><ROW><id>13849577</id><snippet>newlist = []
for i in range(pages):
    newlist.append(&lt;variable&gt;)
</snippet></ROW><ROW><id>13849577</id><snippet>newlist[slot]
</snippet></ROW><ROW><id>13849577</id><snippet>dict</snippet></ROW><ROW><id>13849577</id><snippet>mydict = {}
books = input().split(", ")
for book in books:
    mydict[book] = &lt;variable&gt;
</snippet></ROW><ROW><id>13849577</id><snippet>cool book, to kill a mockingbird, book of evil
</snippet></ROW><ROW><id>13849577</id><snippet>mydict['to kill a mockingbird']
</snippet></ROW><ROW><id>13849598</id><snippet>pattern = re.compile('.*?(\d+\D*)(\..*)')
k = pattern.search(image_id)
saved_value = k.groups()[0] # this will give you the value 
                            # of the fist matched group
                            # as a string
</snippet></ROW><ROW><id>13849665</id><snippet>a</snippet></ROW><ROW><id>13849665</id><snippet>token = (a, )
</snippet></ROW><ROW><id>13849696</id><snippet>Normalization</snippet></ROW><ROW><id>13849777</id><snippet>\</snippet></ROW><ROW><id>13849777</id><snippet>&gt;&gt;&gt; s='string'
&gt;&gt;&gt; esc='\\'
&gt;&gt;&gt; n='n'
&gt;&gt;&gt; st=s+esc+n+'next line'
&gt;&gt;&gt; print st
string\nnextline
&gt;&gt;&gt; print st.decode('string_escape')
string
next line
</snippet></ROW><ROW><id>13849777</id><snippet>&gt;&gt;&gt; ''.join(['\\','n','\\','t'])=='\n\t'
False
</snippet></ROW><ROW><id>13849777</id><snippet>&gt;&gt;&gt; ''.join(['\\','n','\\','t']).decode('string_escape')=='\n\t'
True
</snippet></ROW><ROW><id>13850041</id><snippet>post</snippet></ROW><ROW><id>13850041</id><snippet>post_list</snippet></ROW><ROW><id>13850162</id><snippet>class SampleClass(object):
    """Summary of class here.

    Longer class information....
    Longer class information....

    Attributes:
        likes_spam: A boolean indicating if we like SPAM or not.
        eggs: An integer count of the eggs we have laid.
    """

    def __init__(self, likes_spam=False):
        """Inits SampleClass with blah."""
        self.likes_spam = likes_spam
        self.eggs = 0

    def public_method(self):
        """Performs operation blah."""
</snippet></ROW><ROW><id>13850245</id><snippet>finddb</snippet></ROW><ROW><id>13850245</id><snippet>file_process</snippet></ROW><ROW><id>13850245</id><snippet>file_process().finddb(id)
</snippet></ROW><ROW><id>13850326</id><snippet>&lt;VirtualHost oursite.com&gt;

  # Tells apache where /static/ should go
  Alias /static/ /full/path/to/flask/app/static/

  # Proxy everything to gunicorn EXCEPT /static and favicon.ico
  ProxyPass /favicon.ico !
  ProxyPass /static !
  ProxyPass / http://gunicorn.oursite.com:4242/
  ProxyPassReverse / http://gunicorn.oursite.com:4242/

&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>13850391</id><snippet>sys.stdout</snippet></ROW><ROW><id>13850391</id><snippet>import sys

print 'Working',

while working():
    work()

    print '.',

    sys.stdout.flush()

print 'Done'
</snippet></ROW><ROW><id>13850570</id><snippet>i</snippet></ROW><ROW><id>13850570</id><snippet>del fiblist[i]</snippet></ROW><ROW><id>13850570</id><snippet>i</snippet></ROW><ROW><id>13850570</id><snippet>i</snippet></ROW><ROW><id>13850570</id><snippet>enumerate()</snippet></ROW><ROW><id>13850570</id><snippet>[i for i in fiblist if i%2 == 0]
</snippet></ROW><ROW><id>13850636</id><snippet>axis</snippet></ROW><ROW><id>13850636</id><snippet>&gt;&gt;&gt; print np.delete(my_array, [], axis=0)
array([[1, 2, 3],
       [4, 5, 6]])
</snippet></ROW><ROW><id>13850647</id><snippet>n</snippet></ROW><ROW><id>13850647</id><snippet>o</snippet></ROW><ROW><id>13850647</id><snippet>ccrypt = alph[ i+13 : i+14 ]
</snippet></ROW><ROW><id>13850647</id><snippet>25</snippet></ROW><ROW><id>13850647</id><snippet>z</snippet></ROW><ROW><id>13850647</id><snippet>alph[38:39]</snippet></ROW><ROW><id>13850647</id><snippet>alph[38]</snippet></ROW><ROW><id>13850647</id><snippet>''</snippet></ROW><ROW><id>13850647</id><snippet>In [1]: s = 'abcde'

In [2]: s[2]
Out[2]: 'c'

In [3]: s[2:3]
Out[3]: 'c'

In [4]: s[49:50]
Out[4]: ''
</snippet></ROW><ROW><id>13850647</id><snippet>alph = 'abcdefghijklmnopqrstuvwxyz'
coded = 'nopqrstuvwxyzabcdefghijklm'
</snippet></ROW><ROW><id>13850647</id><snippet>a</snippet></ROW><ROW><id>13850647</id><snippet>0</snippet></ROW><ROW><id>13850647</id><snippet>rot13</snippet></ROW><ROW><id>13850761</id><snippet>myDialog = QtGui.QDialog()
isVis = myDialog.isVisible()
</snippet></ROW><ROW><id>13850809</id><snippet>line</snippet></ROW><ROW><id>13850809</id><snippet>readlines</snippet></ROW><ROW><id>13850809</id><snippet>file</snippet></ROW><ROW><id>13850809</id><snippet>import re
import sys
filename = "C:\Dropbox\Reference.brf"
try:
    input_file = open(filename ,'r')
except IOError as exc:
    print exc
else:
    cached_line = ""
    for line in input_file:
        if 'ToolVersionEdit' in line:
            cached_line = line.split('=')[1]
            break

    print cached_line
</snippet></ROW><ROW><id>13851081</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>13851081</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>13851081</id><snippet>white-space</snippet></ROW><ROW><id>13851081</id><snippet>print f.readlines.join('\n')</snippet></ROW><ROW><id>13851081</id><snippet>print f.read()</snippet></ROW><ROW><id>13851081</id><snippet>print f.readlines().join('&lt;br&gt;')</snippet></ROW><ROW><id>13851145</id><snippet>gems = pygame.sprite.Group()
</snippet></ROW><ROW><id>13851145</id><snippet>gems.add(gem)
</snippet></ROW><ROW><id>13851145</id><snippet>gems.direction = 'up'
</snippet></ROW><ROW><id>13851318</id><snippet>os.fsync()</snippet></ROW><ROW><id>13851318</id><snippet>flush()</snippet></ROW><ROW><id>13851318</id><snippet>with</snippet></ROW><ROW><id>13851318</id><snippet>seek(o,o)</snippet></ROW><ROW><id>13851318</id><snippet>'b'</snippet></ROW><ROW><id>13851318</id><snippet>open(filename, 'rb+')</snippet></ROW><ROW><id>13851318</id><snippet>'a+'</snippet></ROW><ROW><id>13851318</id><snippet>from sys import argv
from os import fsync

script, filename = argv

with open(filename, 'rb+') as f:
    print("The contents of %s are:") % filename
    print f.read()

    f.seek(0,2)
    txt = raw_input("What would you like to add? ")
    f.write(txt)
    f.flush()
    fsync(f.fileno())

    f.seek(0,0)
    print("The new contents are:")
    print f.read()
</snippet></ROW><ROW><id>13851402</id><snippet>eval()</snippet></ROW><ROW><id>13851402</id><snippet>print</snippet></ROW><ROW><id>13851402</id><snippet>return</snippet></ROW><ROW><id>13851402</id><snippet>print</snippet></ROW><ROW><id>13851402</id><snippet>exec</snippet></ROW><ROW><id>13851453</id><snippet>xlim</snippet></ROW><ROW><id>13851453</id><snippet>ylim</snippet></ROW><ROW><id>13851453</id><snippet>xticks</snippet></ROW><ROW><id>13851453</id><snippet>yticks</snippet></ROW><ROW><id>13851489</id><snippet>shelve</snippet></ROW><ROW><id>13851489</id><snippet>dict</snippet></ROW><ROW><id>13851489</id><snippet>dict</snippet></ROW><ROW><id>13851489</id><snippet>from contextlib import closing
import shelve

def makedict(shelf):
    # Put the real dict-generating code here, obviously
    for i in range(500000);
        shelf[str(i)] = i

with closing(shelve.open('mydict.shelf', 'c')) as shelf:
    makedict(shelf)
</snippet></ROW><ROW><id>13851489</id><snippet>from contextlib import closing
import shelve

with closing(shelve.open('mydict.shelf')) as d:
    # Put all your actual work here.
    print len(d)
</snippet></ROW><ROW><id>13851489</id><snippet>with</snippet></ROW><ROW><id>13851489</id><snippet>open</snippet></ROW><ROW><id>13851489</id><snippet>close</snippet></ROW><ROW><id>13851489</id><snippet>pickle</snippet></ROW><ROW><id>13851489</id><snippet>dict</snippet></ROW><ROW><id>13851489</id><snippet>pickle</snippet></ROW><ROW><id>13851489</id><snippet>import cPickle

def makedict():
    # Put the real dict-generating code here, obviously
    return {i:i for i in range(500000)}

with open('mydict.pickle', 'wb') as f:
    cPickle.dump(d, f, -1)
</snippet></ROW><ROW><id>13851489</id><snippet>import cPickle

def loaddict():
    with open('mydict.pickle', 'rb') as f:
        return cPickle.load(f)
</snippet></ROW><ROW><id>13851489</id><snippet>pickle</snippet></ROW><ROW><id>13851489</id><snippet>anydbm</snippet></ROW><ROW><id>13851489</id><snippet>dict</snippet></ROW><ROW><id>13851489</id><snippet>open</snippet></ROW><ROW><id>13851489</id><snippet>close</snippet></ROW><ROW><id>13851489</id><snippet>anydbm</snippet></ROW><ROW><id>13851489</id><snippet>shelve</snippet></ROW><ROW><id>13851489</id><snippet>anydbm</snippet></ROW><ROW><id>13851489</id><snippet>dict</snippet></ROW><ROW><id>13851489</id><snippet>sqlite3</snippet></ROW><ROW><id>13851527</id><snippet>from PyQt4 import QtGui, QtCore

class Button(QtGui.QPushButton):
    def __init__(self, *args, **kwargs):
        QtGui.QPushButton.__init__(self, *args, **kwargs)
        self.setAutoRepeat(True)
        self.setAutoRepeatDelay(1000)
        self.setAutoRepeatInterval(1000)
        self.clicked.connect(self.handleClicked)
        self._state = 0

    def handleClicked(self):
        if self.isDown():
            if self._state == 0:
                self._state = 1
                self.setAutoRepeatInterval(50)
                print 'press'
            else:
                print 'repeat'
        elif self._state == 1:
            self._state = 0
            self.setAutoRepeatInterval(1000)
            print 'release'
        else:
            print 'click'

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    button = Button('Test Button')
    button.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13851544</id><snippet>&gt;&gt;&gt; [x['theint'] + y['theint'] for x, y in zip(*[iter(sorted(adict['key1'].values(), key=operator.itemgetter('thedec')))] * 2)]
[759, 1010, 450]
</snippet></ROW><ROW><id>13851602</id><snippet>len(df['column name'])</snippet></ROW><ROW><id>13851602</id><snippet>len</snippet></ROW><ROW><id>13851602</id><snippet>df['column name'].map(len)</snippet></ROW><ROW><id>13851602</id><snippet>df[df['column name'].map(len) &lt; 2]
</snippet></ROW><ROW><id>13851619</id><snippet>&gt;&gt;&gt; a = ['x']
&gt;&gt;&gt; a
['x']
&gt;&gt;&gt; a[0] = a
&gt;&gt;&gt; a
[[...]]
</snippet></ROW><ROW><id>13851619</id><snippet>id</snippet></ROW><ROW><id>13851619</id><snippet>is</snippet></ROW><ROW><id>13851619</id><snippet>&gt;&gt;&gt; id(a)
165875500
&gt;&gt;&gt; id(a[0])
165875500
&gt;&gt;&gt; a is a[0]
True
</snippet></ROW><ROW><id>13851953</id><snippet>def parse(self, response):
    # check response for rule criteria
    ...
    if rule: 
        # create new request to pass to second callback
        req = Request("http://www.example.com/follow", callback=self.parse2)
        return req

def parse2(self, response):
    hxs = HtmlXPathSelector(response)
    # do stuff with the successful response
</snippet></ROW><ROW><id>13851966</id><snippet>Module</snippet></ROW><ROW><id>13851983</id><snippet>ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(
            paramiko.AutoAddPolicy())

ftp = ssh.open_sftp() 
ftp.get('remotefile', 'localfile')
</snippet></ROW><ROW><id>13852096</id><snippet>\b?</snippet></ROW><ROW><id>13852096</id><snippet>\b?</snippet></ROW><ROW><id>13852096</id><snippet>\A</snippet></ROW><ROW><id>13852096</id><snippet>\Z</snippet></ROW><ROW><id>13852096</id><snippet>$</snippet></ROW><ROW><id>13852096</id><snippet>^</snippet></ROW><ROW><id>13852096</id><snippet>import re
verbose_item_pattern = re.compile(r"""
    $            # end of line boundary
    \s{1,2}      # 1-or-2 whitespace character, including the newline
    I            # a capital I
    [tT][eE][mM] # one character from each of the three sets this allows for unknown case
    \s+          # 1-or-more whitespaces INCLUDING newline
    \d{1,2}      # 1-or-2 digits
    [.]?         # 0-or-1 literal .
    \(?          # 0-or-1 literal open paren
    [a-e]?       # 0-or-1 letter in the range a-e
    \)?          # 0-or-1 closing paren
    .*           # any number of unknown characters so we can have words and punctuation
    [^0-9]       # anything but [0-9]
    $            # end of line boundary
    """, re.VERBOSE|re.MULTILINE)

x = verbose_item_pattern.search("""
 Item 1.0(a) foo bar
""")

print(x)
</snippet></ROW><ROW><id>13852096</id><snippet>&lt;_sre.SRE_Match object at 0xb76dd020&gt;
</snippet></ROW><ROW><id>13852172</id><snippet>__cmp__</snippet></ROW><ROW><id>13852172</id><snippet>&gt;&gt; tmp == tmp
True
</snippet></ROW><ROW><id>13852172</id><snippet>__cmp__</snippet></ROW><ROW><id>13852172</id><snippet>==</snippet></ROW><ROW><id>13852172</id><snippet>True</snippet></ROW><ROW><id>13852172</id><snippet>&gt;&gt; loads(dumps(tmp, -1)) == tmp
False
</snippet></ROW><ROW><id>13852172</id><snippet>False</snippet></ROW><ROW><id>13852172</id><snippet>&gt;&gt; set(loads(dumps(tmp, -1))) == set(tmp)
True
</snippet></ROW><ROW><id>13852416</id><snippet>class</snippet></ROW><ROW><id>13852416</id><snippet>decorators</snippet></ROW><ROW><id>13852701</id><snippet>C#,python,ruby,javascript,java,perl,and php</snippet></ROW><ROW><id>13852701</id><snippet>@driver.get("https://demo.aravo.com/")
@driver.find_element(:id, "j_username").clear
@driver.find_element(:id, "j_username").send_keys "sample"
@driver.find_element(:name, "j_password").clear
@driver.find_element(:name, "j_password").send_keys "sample"
@driver.find_element(:name, "login").click
@driver.find_element(:id, "gbqfq").clear
@driver.find_element(:id, "gbqfq").send_keys "ruby fiel format"
</snippet></ROW><ROW><id>13852701</id><snippet>driver = self.driver
driver.get("https://demo.aravo.com/")
driver.find_element_by_id("j_username").clear()
driver.find_element_by_id("j_username").send_keys("sample")
driver.find_element_by_name("j_password").clear()
driver.find_element_by_name("j_password").send_keys("sample")
driver.find_element_by_name("login").click()
</snippet></ROW><ROW><id>13852701</id><snippet>public void TheDriverTest()
{
    driver.Navigate().GoToUrl("https://demo.aravo.com/");
    driver.FindElement(By.Id("j_username")).Clear();
    driver.FindElement(By.Id("j_username")).SendKeys("sample");
    driver.FindElement(By.Name("j_password")).Clear();
    driver.FindElement(By.Name("j_password")).SendKeys("sample");
    driver.FindElement(By.Name("login")).Click();
}
</snippet></ROW><ROW><id>13852851</id><snippet>tempfile</snippet></ROW><ROW><id>13852851</id><snippet>tempfile._name_sequence</snippet></ROW><ROW><id>13852851</id><snippet>tempfile</snippet></ROW><ROW><id>13852851</id><snippet>_name_sequence</snippet></ROW><ROW><id>13852851</id><snippet>file#.pdf</snippet></ROW><ROW><id>13852851</id><snippet>/tmp</snippet></ROW><ROW><id>13852851</id><snippet>import tempfile
import itertools as IT
import os

def uniquify(path, sep = ''):
    def name_sequence():
        count = IT.count()
        yield ''
        while True:
            yield '{s}{n:d}'.format(s = sep, n = next(count))
    orig = tempfile._name_sequence 
    with tempfile._once_lock:
        tempfile._name_sequence = name_sequence()
        path = os.path.normpath(path)
        dirname, basename = os.path.split(path)
        filename, ext = os.path.splitext(basename)
        fd, filename = tempfile.mkstemp(dir = dirname, prefix = filename, suffix = ext)
        tempfile._name_sequence = orig
    return filename

print(uniquify('/tmp/file.pdf'))
</snippet></ROW><ROW><id>13852949</id><snippet>myDict[myKey]</snippet></ROW><ROW><id>13852949</id><snippet>def recursive_get(d, keys):
    if len(keys) == 1:
        return d[keys[0]]
    return recursive_get(d[keys[0]], keys[1:])
</snippet></ROW><ROW><id>13852949</id><snippet>&gt;&gt;&gt; myDic = {'a':1, 'b':{'c':2, 'd':3}}
&gt;&gt;&gt; recursive_get(myDic, ['b', 'c'])
2
</snippet></ROW><ROW><id>13853280</id><snippet>a+b</snippet></ROW><ROW><id>13853280</id><snippet>a</snippet></ROW><ROW><id>13853280</id><snippet>b</snippet></ROW><ROW><id>13853280</id><snippet>a+b</snippet></ROW><ROW><id>13853280</id><snippet>__add__</snippet></ROW><ROW><id>13853498</id><snippet># print all tags
for tag in soup.findAll():
    print tag.name # TODO: add/update dict
</snippet></ROW><ROW><id>13853498</id><snippet>HTMLParser</snippet></ROW><ROW><id>13853498</id><snippet>from HTMLParser import HTMLParser

class print_tags(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print tag # TODO: add/update dict

parser = print_tags()
parser.feed(html)
</snippet></ROW><ROW><id>13853498</id><snippet>{ 'tag' : count }</snippet></ROW><ROW><id>13853498</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13853498</id><snippet>from collections import defaultdict

occurrences = defaultdict(int)
# ...
occurrences[tag_name] += 1
</snippet></ROW><ROW><id>13853816</id><snippet>&gt;&gt;&gt; def sex1 (code):
    return {'m': 'masculino', 'f': 'femenino', '': 'ignorado'} [code]

&gt;&gt;&gt; sex2 = lambda code: {'m': 'masculino', 'f': 'femenino', '': 'ignorado'} [code]
&gt;&gt;&gt; dis.dis(sex1)
  2           0 BUILD_MAP                3
              3 LOAD_CONST               1 ('masculino')
              6 LOAD_CONST               2 ('m')
              9 STORE_MAP           
             10 LOAD_CONST               3 ('femenino')
             13 LOAD_CONST               4 ('f')
             16 STORE_MAP           
             17 LOAD_CONST               5 ('ignorado')
             20 LOAD_CONST               6 ('')
             23 STORE_MAP           
             24 LOAD_FAST                0 (code)
             27 BINARY_SUBSCR       
             28 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(sex2)
  1           0 BUILD_MAP                3
              3 LOAD_CONST               1 ('masculino')
              6 LOAD_CONST               2 ('m')
              9 STORE_MAP           
             10 LOAD_CONST               3 ('femenino')
             13 LOAD_CONST               4 ('f')
             16 STORE_MAP           
             17 LOAD_CONST               5 ('ignorado')
             20 LOAD_CONST               6 ('')
             23 STORE_MAP           
             24 LOAD_FAST                0 (code)
             27 BINARY_SUBSCR       
             28 RETURN_VALUE    
</snippet></ROW><ROW><id>13853816</id><snippet>&gt;&gt;&gt; type(sex1)
&lt;type 'function'&gt;
&gt;&gt;&gt; type(sex2)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>13854087</id><snippet>{%extends%}</snippet></ROW><ROW><id>13854087</id><snippet>{%if%}</snippet></ROW><ROW><id>13854158</id><snippet>jsonOBJ.dumps({
    'HardwareSpec': {
        'BIOS': get_bios_specs(),
        'Motherboard': get_board_specs()
     }
})
</snippet></ROW><ROW><id>13854158</id><snippet>BIOS</snippet></ROW><ROW><id>13854158</id><snippet>Motherboard</snippet></ROW><ROW><id>13854158</id><snippet>...
     'HardwareSpec': {
        'BIOS': [
            get_bios_specs(),
            get_uefi_specs()
        ]
        ...
     }
</snippet></ROW><ROW><id>13854615</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:14:39) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'c:\wng\Qmns\vin2_2012-12-13_RES',r'c:\wng\Qmns\vin2_2012-12-13_RES_1.xls')
&gt;&gt;&gt; re.search(r'c:\\wng\\Qmns\\vin2_2012-12-13_RES',r'c:\wng\Qmns\vin2_2012-12-13_RES_1.xls')
&lt;_sre.SRE_Match object at 0x7f9c2000bb90&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13854819</id><snippet>sudo apt-get install python-pythonmagick
</snippet></ROW><ROW><id>13854819</id><snippet>sudo aptitude install python-pythonmagick
</snippet></ROW><ROW><id>13854819</id><snippet>pip</snippet></ROW><ROW><id>13854819</id><snippet>virtualenv</snippet></ROW><ROW><id>13854819</id><snippet>→ pip search pythonmagick
PythonMagickWand          - Python wrapper for the ImageMagick wand API
PythonMagick              - Wrapper around GraphicsMagick

→ pip search pgmagick
pgmagick                  - Yet Another Python wrapper for GraphicsMagick
</snippet></ROW><ROW><id>13854819</id><snippet>GraphicsMagick</snippet></ROW><ROW><id>13854819</id><snippet>ImageMagick</snippet></ROW><ROW><id>13854819</id><snippet>pip</snippet></ROW><ROW><id>13854819</id><snippet>pgmagick</snippet></ROW><ROW><id>13854819</id><snippet>pythonmagick</snippet></ROW><ROW><id>13854819</id><snippet>GraphicsMagick</snippet></ROW><ROW><id>13854819</id><snippet>ImageMagick</snippet></ROW><ROW><id>13854901</id><snippet>transform</snippet></ROW><ROW><id>13854901</id><snippet>apply</snippet></ROW><ROW><id>13854901</id><snippet>tips.groupby('smoker').transform(func)</snippet></ROW><ROW><id>13854901</id><snippet>func(group1)</snippet></ROW><ROW><id>13854901</id><snippet>func(group2)</snippet></ROW><ROW><id>13854901</id><snippet>func(group1['total_bill'])</snippet></ROW><ROW><id>13854901</id><snippet>func(group1['tip'])</snippet></ROW><ROW><id>13854901</id><snippet>func(group2['total_bill'])</snippet></ROW><ROW><id>13854901</id><snippet>func(group2['total_bill'])</snippet></ROW><ROW><id>13854901</id><snippet>&gt;&gt;&gt; print d
   A  B  C
0 -2  5  4
1  1 -1  2
2  0  2  1
3 -3  1  2
4  5  0  2
&gt;&gt;&gt; def foo(df):
...     print "&gt;&gt;&gt;"
...     print df
...     print "&lt;&lt;&lt;"
...     return df
&gt;&gt;&gt; print d.groupby('C').transform(foo)
&gt;&gt;&gt;
2    0
Name: A
&lt;&lt;&lt;
&gt;&gt;&gt;
2    2
Name: B
&lt;&lt;&lt;
&gt;&gt;&gt;
1    1
3   -3
4    5
Name: A
&lt;&lt;&lt;
&gt;&gt;&gt;
1   -1
3    1
4    0
Name: B
# etc.
</snippet></ROW><ROW><id>13854901</id><snippet>foo</snippet></ROW><ROW><id>13854901</id><snippet>transform</snippet></ROW><ROW><id>13854901</id><snippet>apply</snippet></ROW><ROW><id>13854901</id><snippet>apply</snippet></ROW><ROW><id>13854901</id><snippet>transform</snippet></ROW><ROW><id>13855191</id><snippet>import itertools as it
a = [1091, 2053, 4099, 4909, 5023, 9011]
sort_string = lambda x: sorted(str(x))
[[int(x) for x in v] for k,v in it.groupby(sorted(a, key=sort_string), key=sort_string)]
# [[1091, 9011], [2053, 5023], [4099, 4909]]
</snippet></ROW><ROW><id>13855243</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; d = datetime.strptime("10:30", "%H:%M")
&gt;&gt;&gt; d.strftime("%I:%M %p")
'10:30 AM'
&gt;&gt;&gt; d = datetime.strptime("22:30", "%H:%M")
&gt;&gt;&gt; d.strftime("%I:%M %p")
'10:30 PM'
</snippet></ROW><ROW><id>13855319</id><snippet>groups</snippet></ROW><ROW><id>13855319</id><snippet>s = "hello cats"
print(re.search(r"(he)l(lo)",s).groups())
</snippet></ROW><ROW><id>13855319</id><snippet>('he', 'lo')</snippet></ROW><ROW><id>13855369</id><snippet>class A:
    def __getitem__(self, item):
        ifnone = lambda a, b: b if a is None else a
        if isinstance(item, slice):
            if item.stop is None:
                # do something with itertools.count()
            else:
                return list(range(ifnone(item.start, 0), item.stop, ifnone(item.step, 1)))
        else:
            return item
</snippet></ROW><ROW><id>13855369</id><snippet>.start</snippet></ROW><ROW><id>13855369</id><snippet>.step</snippet></ROW><ROW><id>13855369</id><snippet>None</snippet></ROW><ROW><id>13855369</id><snippet>.indices()</snippet></ROW><ROW><id>13855369</id><snippet>None</snippet></ROW><ROW><id>13855369</id><snippet>&gt;&gt;&gt; a=slice(None, None, None)
&gt;&gt;&gt; a.indices(1)
(0, 1, 1)
&gt;&gt;&gt; a.indices(10)
(0, 10, 1)
&gt;&gt;&gt; a=slice(None, -5, None)
&gt;&gt;&gt; a.indices(100)
(0, 95, 1)
</snippet></ROW><ROW><id>13855464</id><snippet>virtualenvwrapper.sh</snippet></ROW><ROW><id>13855464</id><snippet>/usr/bin/virtualenvwrapper.sh</snippet></ROW><ROW><id>13855464</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>13855464</id><snippet>.bash_profile</snippet></ROW><ROW><id>13855464</id><snippet>source "/usr/bin/virtualenvwrapper.sh"
export WORKON_HOME="/opt/virtual_env/"
</snippet></ROW><ROW><id>13855464</id><snippet>virtualenvwrapper_bashrc</snippet></ROW><ROW><id>13855852</id><snippet>Modifies the image to contain a thumbnail version of itself, no larger than the given size.
</snippet></ROW><ROW><id>13855873</id><snippet>f2py</snippet></ROW><ROW><id>13855873</id><snippet>Cython</snippet></ROW><ROW><id>13855873</id><snippet>f2py</snippet></ROW><ROW><id>13855916</id><snippet>ProgBarApp.start</snippet></ROW><ROW><id>13855916</id><snippet>time.sleep</snippet></ROW><ROW><id>13855916</id><snippet>from Tkinter import *
from itertools import combinations
import ttk
import time

class ProgBarApp:
    def __init__(self):
        self.vals = range(1, 20)
        self.combs = list(combinations(self.vals,3))
        self.n = len(self.combs)
        self.progressbar = ttk.Progressbar(root, maximum = self.n+1)
        self.progressbar.pack()

    def start(self):
        for c in self.combs:
            self.progressbar.step()
            time.sleep(0.01)    
            root.update()
        root.destroy()

root = Tk()
p = ProgBarApp()
root.after(0, p.start())
root.mainloop()
</snippet></ROW><ROW><id>13855983</id><snippet>GraphBase</snippet></ROW><ROW><id>13855983</id><snippet>get_eid(v1, v2, directed=True, error=True)</snippet></ROW><ROW><id>13855983</id><snippet>g.get_eid(v1, v2, directed=False, error=False)
</snippet></ROW><ROW><id>13856033</id><snippet>ElementTree</snippet></ROW><ROW><id>13856033</id><snippet>lxml</snippet></ROW><ROW><id>13856033</id><snippet>open()</snippet></ROW><ROW><id>13856033</id><snippet>'unicode'</snippet></ROW><ROW><id>13856033</id><snippet>tree.write()</snippet></ROW><ROW><id>13856033</id><snippet>open()</snippet></ROW><ROW><id>13856033</id><snippet>'utf-8'</snippet></ROW><ROW><id>13856033</id><snippet>tree.write()</snippet></ROW><ROW><id>13856033</id><snippet>#!python3
from xml.etree import ElementTree as et

def dict_to_elem(dictionary):
    item = et.Element('Item')
    for key in dictionary:
        field = et.Element(key.replace(' ',''))
        field.text = dictionary[key]
        item.append(field)
    return item

root = et.Element('AllItems')     # create the element first...
tree = et.ElementTree(root)       # and pass it to the created tree

root.append(dict_to_elem(  {'some_tag':'Hello World', 'xxx': 'yyy'}  ))
# Lather, rinse, repeat this append step as needed

filename = 'a.xml'
with open(filename, 'w', encoding='utf-8') as file:
    tree.write(file, encoding='unicode')

# The alternative is...    
fname = 'b.xml'
with open(fname, 'wb') as f:
    tree.write(f, encoding='utf-8')
</snippet></ROW><ROW><id>13856033</id><snippet>tree.write</snippet></ROW><ROW><id>13856033</id><snippet>tree.write('c.xml', encoding='utf-8')
</snippet></ROW><ROW><id>13856304</id><snippet>F1</snippet></ROW><ROW><id>13856304</id><snippet>precision</snippet></ROW><ROW><id>13856304</id><snippet>recall</snippet></ROW><ROW><id>13856304</id><snippet>def F1(precision, recall):
    return (2*precision*recall)/(precision+recall)

r = [0,1,0,0,0,1,1,0,1]
h = [0,1,1,1,0,0,1,0,1]
p = precision(r, h)
rec = recall(r, h)
f = F1(p, rec)
print f
</snippet></ROW><ROW><id>13856304</id><snippet>F1</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>/*...*/</snippet></ROW><ROW><id>13856566</id><snippet>re.S</snippet></ROW><ROW><id>13856566</id><snippet>.</snippet></ROW><ROW><id>13856566</id><snippet>[\s\S]</snippet></ROW><ROW><id>13856566</id><snippet>.</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>"..."</snippet></ROW><ROW><id>13856566</id><snippet>/*...*/</snippet></ROW><ROW><id>13856566</id><snippet>"public public"</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>//</snippet></ROW><ROW><id>13856566</id><snippet>/*</snippet></ROW><ROW><id>13856566</id><snippet>*/</snippet></ROW><ROW><id>13856566</id><snippet>'</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>'</snippet></ROW><ROW><id>13856566</id><snippet>\"</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>(?&lt;!//).*public.*</snippet></ROW><ROW><id>13856566</id><snippet>(?&lt;!//)</snippet></ROW><ROW><id>13856566</id><snippet>// public</snippet></ROW><ROW><id>13856566</id><snippet>//</snippet></ROW><ROW><id>13856566</id><snippet>.*</snippet></ROW><ROW><id>13856566</id><snippet>//</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>(?&lt;!//.*)public</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>public(?=[^"]*("[^"]*"[^"]*)*$)
</snippet></ROW><ROW><id>13856566</id><snippet>public(?=[^"]*("(?:[^"\\]|\\.)*"[^"]*)*$)
</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>"a string\\"</snippet></ROW><ROW><id>13856566</id><snippet>"</snippet></ROW><ROW><id>13856566</id><snippet>re.M</snippet></ROW><ROW><id>13856566</id><snippet>public(?=[^"\r\n]*("(?:[^"\r\n\\]|\\.)*"[^"\r\n]*)*$)
</snippet></ROW><ROW><id>13856566</id><snippet>re.M</snippet></ROW><ROW><id>13856566</id><snippet>public(?=[^'\r\n]*('(?:[^'\r\n\\]|\\.)*'[^'\r\n]*)*$)
</snippet></ROW><ROW><id>13856566</id><snippet>/*</snippet></ROW><ROW><id>13856566</id><snippet>*/</snippet></ROW><ROW><id>13856566</id><snippet>public(?=(?:(?![*]/)[\s\S])*(?:/[*]|\Z))
</snippet></ROW><ROW><id>13856566</id><snippet>public(?=[^"\r\n]*("(?:[^"\r\n\\]|\\.)*"[^"\r\n]*)*$)(?=[^'\r\n]*('(?:[^'\r\n\\]|\\.)*'[^'\r\n]*)*$)(?=(?:(?![*]/)[\s\S])*(?:/[*]|\Z))
</snippet></ROW><ROW><id>13856566</id><snippet>cilbup(?!.*//)
</snippet></ROW><ROW><id>13856566</id><snippet>cilbup(?=[^"\r\n]*("[^"\r\n]*"[^"\r\n]*)*$)(?=[^'\r\n]*('[^'\r\n]*'[^'\r\n]*)*$)(?=(?:(?![*]/)[\s\S])*(?:/[*]|\Z))(?!.*//)
</snippet></ROW><ROW><id>13856566</id><snippet>inputLength -foundMatchPosition - foundMatchLength</snippet></ROW><ROW><id>13856566</id><snippet>"\</snippet></ROW><ROW><id>13856566</id><snippet>cilbup(?=(?:[^"\r\n]|"\\)*(?:"(?!\\)(?:[^"\r\n]|"\\)*"(?!\\)(?:[^"\r\n]|"\\)*)*$)
</snippet></ROW><ROW><id>13856566</id><snippet>cilbup(?=(?:[^"\r\n]|"\\)*(?:"(?!\\)(?:[^"\r\n]|"\\)*"(?!\\)(?:[^"\r\n]|"\\)*)*$)(?=(?:[^'\r\n]|'\\)*(?:'(?!\\)(?:[^'\r\n]|'\\)*'(?!\\)(?:[^'\r\n]|'\\)*)*$)(?=(?:(?![*]/)[\s\S])*(?:/[*]|\Z))(?!.*//)
</snippet></ROW><ROW><id>13856566</id><snippet>public</snippet></ROW><ROW><id>13856566</id><snippet>\b</snippet></ROW><ROW><id>13856566</id><snippet>\b</snippet></ROW><ROW><id>13856566</id><snippet>$</snippet></ROW><ROW><id>13856566</id><snippet>(?&lt;!\S)cilbup(?!\S)(?=(?:[^"\r\n]|"\\)*(?:"(?!\\)(?:[^"\r\n]|"\\)*"(?!\\)(?:[^"\r\n]|"\\)*)*$)(?=(?:[^'\r\n]|'\\)*(?:'(?!\\)(?:[^'\r\n]|'\\)*'(?!\\)(?:[^'\r\n]|'\\)*)*$)(?=(?:(?![*]/)[\s\S])*(?:/[*]|\Z))(?!.*//)
</snippet></ROW><ROW><id>13856566</id><snippet>re.X</snippet></ROW><ROW><id>13856566</id><snippet>(?&lt;!\S)      # make sure there is no trailing non-whitespace character
cilbup       # public
(?!\S)       # make sure there is no leading non-whitespace character
(?=          # lookahead (effectively lookbehind!) to ensure we are not inside a
             # string
  (?:[^"\r\n]|"\\)*
             # consume everything except for line breaks and quotes, unless the
             # quote is followed by a backslash (preceded in the actual input)
  (?:        # subpattern that matches two (unescaped) quotes
    "(?!\\)  # a quote that is not followed by a backslash
    (?:[^"\r\n]|"\\)*
             # we've seen that before
    "(?!\\)  # a quote that is not followed by a backslash
    (?:[^"\r\n]|"\\)*
             # we've seen that before
  )*         # end of subpattern - repeat 0 or more times (ensures even no. of ")
  $          # end of line (start of line in actual input)
)            # end of double-quote lookahead
(?=(?:[^'\r\n]|'\\)*(?:'(?!\\)(?:[^'\r\n]|'\\)*'(?!\\)(?:[^'\r\n]|'\\)*)*$)
             # the same horrible bastard again for single quotes
(?=          # lookahead (effectively lookbehind) for block comments
  (?:        # subgroup to consume anything except */
    (?![*]/) # make sure there is no */ coming up
    [\s\S]   # consume an arbitrary character
  )*         # repeat
  (?:/[*]|\Z)# require to find either /* or the end of the string
)            # end of lookahead for block comments
(?!.*//)     # make sure there is no // on this line
</snippet></ROW><ROW><id>13856827</id><snippet>class Test:
   @staticmethod
   def call(method):
      getattr(Test, method)()

   @staticmethod
   def method1():
      print('method1')

   @staticmethod
   def method2():
      print('method2')

Test.call("method1")
</snippet></ROW><ROW><id>13856829</id><snippet>obj.image = image</snippet></ROW><ROW><id>13856829</id><snippet>des = Description()
des.image.put(open(params.get('file_path', None)))
des.save()
</snippet></ROW><ROW><id>13856829</id><snippet>ImageField</snippet></ROW><ROW><id>13856829</id><snippet>put</snippet></ROW><ROW><id>13856962</id><snippet>openhook</snippet></ROW><ROW><id>13856962</id><snippet>rU</snippet></ROW><ROW><id>13856962</id><snippet>openhook</snippet></ROW><ROW><id>13856962</id><snippet>def univ_file_read(name, mode):
    # WARNING: ignores mode argument passed to this function
    return open(name, 'rU')
</snippet></ROW><ROW><id>13856962</id><snippet>for line in fileinput.input():
</snippet></ROW><ROW><id>13856962</id><snippet>for line in fileinput.input(openhook=univ_file_read):
</snippet></ROW><ROW><id>13856962</id><snippet>\r</snippet></ROW><ROW><id>13856970</id><snippet>In [54]: f = open("/Users/sholden/test.csv", 'rU')

In [55]: reader = csv.reader(f)

In [56]: names = reader.next()

In [57]: names
Out[57]: ['First', 'Secind', 'Third']

In [65]: import sqlite3 as db

In [66]: conn = db.connect(":memory:")

In [67]: curs = conn.cursor()

In [68]: sql = """create table x (\n""" +\
      ",\n".join([("%s varchar" % name) for name in names])\
      + ")"

In [69]: sql
Out[69]: 'create table x (\nFirst varchar,\nSecind varchar,\nThird varchar)'

In [70]: curs.execute(sql)
Out[70]: &lt;sqlite3.Cursor at 0x101f2eea0&gt;

In [71]: for line in reader:
    curs.execute("""INSERT INTO x (First, Secind, Third)
                    VALUES (?, ?, ?)""", tuple(line))
   ....:     

In [72]: curs.execute("SELECT * FROM x")
Out[72]: &lt;sqlite3.Cursor at 0x101f2eea0&gt;

In [73]: curs.fetchall()
Out[73]: [(u'3', u'4', u'Charlie'), (u'5', u'6', u'Damion'), (u'78', u'90', u'Sidney')]
</snippet></ROW><ROW><id>13857206</id><snippet># Near the top of views.py
from datetime import datetime

# ...
currentMonth = datetime.now().strftime('%B')
return render_to_response('showroom.html',{'currentMonth':currentMonth,} , context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13857206</id><snippet>import datetime
currentMonth = datetime.now().month
currentMonthn = currentMonth.strftime("%B")
</snippet></ROW><ROW><id>13857206</id><snippet>currentMonth</snippet></ROW><ROW><id>13857206</id><snippet>strftime</snippet></ROW><ROW><id>13857206</id><snippet>datetime.now()</snippet></ROW><ROW><id>13857206</id><snippet>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now().strftime('%B')
'December'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13857595</id><snippet>multiprocessing</snippet></ROW><ROW><id>13857595</id><snippet>multiprocessing.some_function()
</snippet></ROW><ROW><id>13857595</id><snippet>multiprocessing</snippet></ROW><ROW><id>13857595</id><snippet>import multiprocessing</snippet></ROW><ROW><id>13857600</id><snippet>list1</snippet></ROW><ROW><id>13857600</id><snippet>dict</snippet></ROW><ROW><id>13857600</id><snippet>&gt;&gt;&gt; list1 = [1, 1, 2]
&gt;&gt;&gt; list2 = ['a', 'b', 'c']
&gt;&gt;&gt; dikt = dict(zip(list1,list2))
&gt;&gt;&gt; print len(dikt)
2
&gt;&gt;&gt; print dikt
{1: 'b', 2: 'c'}
</snippet></ROW><ROW><id>13857821</id><snippet>OpenMaya</snippet></ROW><ROW><id>13857821</id><snippet>MPxHardwareShader</snippet></ROW><ROW><id>13857848</id><snippet>@fake</snippet></ROW><ROW><id>13857848</id><snippet>@fake</snippet></ROW><ROW><id>13857848</id><snippet>split</snippet></ROW><ROW><id>13857848</id><snippet>FUNC_FAKE</snippet></ROW><ROW><id>13857848</id><snippet>*</snippet></ROW><ROW><id>13857848</id><snippet>split</snippet></ROW><ROW><id>13857848</id><snippet>def split_replacement(s, t, n):
   return [(s.field(i+1), s) for i in range(n)])

@fake(split_replacement)
def split(s, t, n):
   ...
</snippet></ROW><ROW><id>13857927</id><snippet>interpreter.exec("from test import tmp");
PyObject someFunc = interpreter.get("tmp");
</snippet></ROW><ROW><id>13857982</id><snippet>def __eq__(self, value):
    return self.value == value

def __len__(self):
    return len(self.value)
</snippet></ROW><ROW><id>13858009</id><snippet>logger_init</snippet></ROW><ROW><id>13858009</id><snippet>logger.setLevel(level)
</snippet></ROW><ROW><id>13858054</id><snippet>str.split</snippet></ROW><ROW><id>13858054</id><snippet>Python 3.2.3 (default, Oct 19 2012, 19:53:16) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = b'asdf\nasdf'
&gt;&gt;&gt; a.split('\n')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Type str doesn't support the buffer API
&gt;&gt;&gt; a = a.decode()
&gt;&gt;&gt; a.split('\n')
['asdf', 'asdf']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13858075</id><snippet>def log_deleted_question(sender, instance, using, **kwargs):
    d = Deleted()
    d.question = instance.id
    d.dt = datetime.datetime.now() # consider using auto_now=True in your Deleted definition
    # not sure how you'd get the user via a signal, 
    # since it can happen from a number of places (like the command line)
    d.save()
</snippet></ROW><ROW><id>13858075</id><snippet>from django.db.models.signals import pre_delete
from django.dispatch import receiver

@receiver(pre_delete, sender=Question, dispatch_uid='question_delete_log')
</snippet></ROW><ROW><id>13858075</id><snippet>from django.db.models.signals import pre_delete
from django.dispatch import receiver

@receiver(pre_delete, sender=Question, dispatch_uid='question_delete_signal')
def log_deleted_question(sender, instance, using, **kwargs):
    d = Deleted()
    d.question = instance.id
    d.dt = datetime.datetime.now() 
    d.save()
</snippet></ROW><ROW><id>13858075</id><snippet>models.py</snippet></ROW><ROW><id>13858143</id><snippet>sorted(bdays_all.items())</snippet></ROW><ROW><id>13858300</id><snippet> use Inline Python;

   my $obj = new Myclass;

   __END__
   __Python__

   from mylibrary import myclass as Myclass
</snippet></ROW><ROW><id>13858367</id><snippet>def my_view(request):
    city_name = request.GET.get('place')
    sellers = Supplier.objects.filter(supplied_cities__cities=city_name)
    context = {'sellers' : sellers }
    return render_to_response('results.html', context, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>13858367</id><snippet>{% for seller in sellers %}
    &lt;li&gt;  {{ seller.name }} &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>13858367</id><snippet>url(r'^/sellers/(?P&lt;city&gt;\w+)/$', my_view, name='sellers')

def my_view(request, city):
    # rest of your view
</snippet></ROW><ROW><id>13858520</id><snippet>import zipfile
import StringIO


path = "dev.zip"   
encrypted_zip = zipfile.ZipFile( path  )
encrypted_zip.setpassword("pass")
print encrypted_zip.namelist()

with zipfile.ZipFile('spam.zip', 'w') as myzip:
    for nested_file in encrypted_zip.namelist():
        myzip.write(nested_file)
</snippet></ROW><ROW><id>13859534</id><snippet>from django.conf import settings as conf_settings
</snippet></ROW><ROW><id>13859534</id><snippet>if some_var == conf_settings.MY_SETTING:
</snippet></ROW><ROW><id>13860049</id><snippet>    mydic = {i : o["name"]}
</snippet></ROW><ROW><id>13860049</id><snippet>mydic = {}
</snippet></ROW><ROW><id>13860049</id><snippet>mydic.update({i : o["name"]})
</snippet></ROW><ROW><id>13860049</id><snippet>mydic[i] = o["name"]
</snippet></ROW><ROW><id>13860049</id><snippet>mydic = {i+1:o["name"] for i,o in enumerate(iterload(f))}
</snippet></ROW><ROW><id>13860312</id><snippet>pygal</snippet></ROW><ROW><id>13860312</id><snippet>/usr/local/lib/python2.7/dist-packages/pygal-0.13.0-py2.7.egg/pygal
</snippet></ROW><ROW><id>13860312</id><snippet>/usr/local/lib/python3.1/dist-packages/pygal-0.13.0-py3.1.egg/pygal
</snippet></ROW><ROW><id>13860312</id><snippet>pipy</snippet></ROW><ROW><id>13860312</id><snippet>from pygal import *
</snippet></ROW><ROW><id>13860581</id><snippet># List of LEADINs to buy time.
leadins = """To characterize a linguistic level L,
        On the other hand,
        This suggests that
        It appears that
        Furthermore """

# List of SUBJECTs chosen for maximum professorial macho.
subjects = """ the notion of level of grammaticalness
        a case of semigrammaticalness of a different sort
        most of the methodological work in modern linguistics
        a subset of English sentences interesting on quite independent grounds
        the natural general principle that will subsume this case """

#List of VERBs chosen for autorecursive obfuscation.
verbs = """can be defined in such a way as to impose
        delimits
        suffices to account for
        cannot be arbitrary in
        is not subject to """


# List of OBJECTs selected for profound sententiousness.

objects = """ problems of phonemic and morphological analysis.
        a corpus of utterance tokens upon which conformity has been defined by the paired utterance test.
        the traditional practice of grammarians.
        the levels of acceptability from fairly high (e.g. (99a)) to virtual gibberish (e.g. (98d)).
        a stipulation to place the constructions into these various categories.
        a descriptive fact.
        a parasitic gap construction."""

import textwrap, random
from itertools import chain, islice, izip
from time import sleep

def chomsky(times=1, line_length=72):
    parts = []
    for part in (leadins, subjects, verbs, objects):
        phraselist = map(str.strip, part.splitlines())
        random.shuffle(phraselist)
        parts.append(phraselist)
    output = chain(*islice(izip(*parts), 0, times))
    return textwrap.fill(' '.join(output), line_length)

print chomsky()
</snippet></ROW><ROW><id>13860581</id><snippet>chomsky().split('\n')[0]
</snippet></ROW><ROW><id>13860596</id><snippet>question_element.find_elements_by_xpath(".//textarea")
</snippet></ROW><ROW><id>13860596</id><snippet>question_element.find_elements_by_xpath("textarea")
</snippet></ROW><ROW><id>13860965</id><snippet>__init__.py</snippet></ROW><ROW><id>13860965</id><snippet>mypackage/
    admin/
        __init__.py 
        forms.py
</snippet></ROW><ROW><id>13860965</id><snippet>__init__.py</snippet></ROW><ROW><id>13860965</id><snippet>admin</snippet></ROW><ROW><id>13860965</id><snippet>admin.py</snippet></ROW><ROW><id>13860965</id><snippet>import myapp.admin</snippet></ROW><ROW><id>13860965</id><snippet>admin.py</snippet></ROW><ROW><id>13860965</id><snippet>admin/__init__.py</snippet></ROW><ROW><id>13860965</id><snippet>admin.py</snippet></ROW><ROW><id>13860965</id><snippet>admin/__init__.py</snippet></ROW><ROW><id>13860965</id><snippet># in e.g. your urls.py
import myapp.admin # imports admin/__init__.py

# in e.g your admin/__init__.py:
from myapp.admin.forms import MyUserCreationForm, MyUserChangeForm # imports admin/forms.py
</snippet></ROW><ROW><id>13861109</id><snippet>requests</snippet></ROW><ROW><id>13861109</id><snippet>import requests
import json


data = {"consumer_key": "..."}
headers = {"content-type": "application/json"}
response = requests.post("http://getpocket.com", data=json.dumps(data), headers=headers)
response.json
</snippet></ROW><ROW><id>13861150</id><snippet>String command = "cmd.exe /c start python path\to\script\script.py";
Process p = Runtime.getRuntime().exec(command);
</snippet></ROW><ROW><id>13861150</id><snippet>start</snippet></ROW><ROW><id>13861217</id><snippet>StopIteration</snippet></ROW><ROW><id>13861217</id><snippet>Exception</snippet></ROW><ROW><id>13861217</id><snippet>StopIteration</snippet></ROW><ROW><id>13861217</id><snippet>StopIteration</snippet></ROW><ROW><id>13861217</id><snippet>Exception</snippet></ROW><ROW><id>13861217</id><snippet>StopIteration</snippet></ROW><ROW><id>13861217</id><snippet>it = iter(xrange(5))
while True:
    try:
        num = it.next()
        print(num)
    except StopIteration:
        break
    except Exception as e:
        print(e) # log and ignore
print('finished')
</snippet></ROW><ROW><id>13861424</id><snippet>new_author1 = Author.objects.get(first_name__exact='John', last_name__exact='Doe')
</snippet></ROW><ROW><id>13861424</id><snippet>new_author1 = Author.objects.create(first_name='John', last_name='Doe')
</snippet></ROW><ROW><id>13861552</id><snippet>json.loads</snippet></ROW><ROW><id>13861552</id><snippet>max(b["time"] for b in a["cols"] for a in data)
</snippet></ROW><ROW><id>13861656</id><snippet>int()</snippet></ROW><ROW><id>13861656</id><snippet>float()</snippet></ROW><ROW><id>13861656</id><snippet>a = float(a)
</snippet></ROW><ROW><id>13861656</id><snippet>&gt;&gt;&gt; int(input("Type a number: "))
Type a number: 0.3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '0.3'
&gt;&gt;&gt; float(input("Type a number: "))
Type a number: 0.3
0.3
</snippet></ROW><ROW><id>13861656</id><snippet>&gt;&gt;&gt; int(input("Type a number: "))
Type a number: -1
-1
&gt;&gt;&gt; int(input("Type a number: "))
Type a number: - 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: '- 1'
</snippet></ROW><ROW><id>13861656</id><snippet>-</snippet></ROW><ROW><id>13861656</id><snippet>1</snippet></ROW><ROW><id>13861656</id><snippet>y = [int(a)**(-2),int(a)**(-1.75),int(a)**(-1.5),int(a)**(-1.25),
            int(a)**(-1),int(a)**(-0.75),int(a)**(-0.5),int(a)**(-0.25),
            int(a)**(0),int(a)**(0.25),int(a)**(0.5),int(a)**(0.75),
            int(a)**1,int(a)**(1.25),int(a)**(1.5),int(a)**(1.75), int(a)**(2)]
</snippet></ROW><ROW><id>13861656</id><snippet>int(a)</snippet></ROW><ROW><id>13861656</id><snippet>a = int(a)
</snippet></ROW><ROW><id>13861656</id><snippet>a</snippet></ROW><ROW><id>13861656</id><snippet>y = [a**i for i in x]
</snippet></ROW><ROW><id>13861656</id><snippet>x</snippet></ROW><ROW><id>13861656</id><snippet>y</snippet></ROW><ROW><id>13861682</id><snippet>In [5]: file. #[tab pressed]
file.close       file.isatty      file.read        file.tell
file.closed      file.mode        file.readinto    file.truncate
file.encoding    file.mro         file.readline    file.write
file.errors      file.name        file.readlines   file.writelines
file.fileno      file.newlines    file.seek        file.xreadlines
file.flush       file.next        file.softspace   

In [5]: print file.flush.__doc__
flush() -&gt; None.  Flush the internal I/O buffer.

In [6]:
</snippet></ROW><ROW><id>13861698</id><snippet>def append_path(root, paths):
    if paths:
        child = root.setdefault(paths[0], {})
        append_path(child, paths[1:])

# Example usage
root = {}
for p in [(1,2,3,4,5),(1,2,7),(2,3,5),(3,4,5,6)]:
    append_path(root, p)

# Print results
import json
print json.dumps(root,  indent=4)
</snippet></ROW><ROW><id>13861698</id><snippet>{
    "1": {
        "2": {
            "3": {
                "4": {
                    "5": {}
                }
            }, 
            "7": {}
        }
    }, 
    "2": {
        "3": {
            "5": {}
        }
    }, 
    "3": {
        "4": {
            "5": {
                "6": {}
            }
        }
    }
}
</snippet></ROW><ROW><id>13861796</id><snippet>idea = Idea(parent=some_person, other_field=field_value).put()
</snippet></ROW><ROW><id>13861796</id><snippet>persons_ideas = Idea.all().ancestor(some_person_key).fetch(1000)
</snippet></ROW><ROW><id>13861796</id><snippet>Idea</snippet></ROW><ROW><id>13861796</id><snippet>ndb</snippet></ROW><ROW><id>13861796</id><snippet>db</snippet></ROW><ROW><id>13861796</id><snippet>ndb</snippet></ROW><ROW><id>13861796</id><snippet>StructuredProperty</snippet></ROW><ROW><id>13861796</id><snippet>LocalStructuredProperty</snippet></ROW><ROW><id>13861796</id><snippet>class Idea(db.Model):
    person = db.StringListProperty()

idea = Idea(person = [str(person.key())], ....).put()
</snippet></ROW><ROW><id>13861796</id><snippet>idea.person.append(str(another_person.key())).put()

ideas = Idea.filter(person=str(person.key())).fetch(1000)
</snippet></ROW><ROW><id>13862043</id><snippet>import pandas as pd
import re

A = pd.read_csv('FileA', delimiter = r'\s+')
B = pd.read_csv('FileB', delimiter = r'\s+')
A = A.set_index(['ProbeID'])
B = B.set_index(['ProbeID'])
C = pd.concat([A,B], axis = 1)

idx = C['call'] == 0
C['alleleB'][idx]  = C['alleleA'][idx]
idx = C['call'] == 2
C['alleleA'][idx]  = C['alleleB'][idx]
print(C[['call', 'alleleA', 'alleleB']])
</snippet></ROW><ROW><id>13862043</id><snippet>               call alleleA alleleB
ProbeID                            
SNP_A-1780270     2       G       G
SNP_A-1780271     0       C       C
SNP_A-1780272     2       T       T
SNP_A-1780274     1       A       G
SNP_A-1780277     0       C       C
SNP_A-1780278     2       T       T
SNP_A-1780283     2       T       T
SNP_A-1780285     2       C       C
SNP_A-1780286     0       A       A
SNP_A-1780287     0       C       C
</snippet></ROW><ROW><id>13862043</id><snippet>import pandas as pd
import re

A = pd.read_csv('FileA', delimiter = r'\s+')
A = A.set_index(['ProbeID'])

BFiles = ['FileB1', 'FileB2', 'FileB3']
for i, bfile in enumerate(BFiles):
    B = pd.read_csv('FileB', delimiter = r'\s+')
    B = B.set_index(['ProbeID'])
    C = pd.concat([A,B], axis = 1)

    idx = C['call'] == 0
    C['alleleB'][idx]  = C['alleleA'][idx]
    idx = C['call'] == 2
    C['alleleA'][idx]  = C['alleleB'][idx]
    cfile = 'FileC{i}'.format(i = i)
    with open(cfile, 'w') as f:
        f.write(C[['call', 'alleleA', 'alleleB']])
</snippet></ROW><ROW><id>13862043</id><snippet>cfile</snippet></ROW><ROW><id>13862354</id><snippet>str.replace</snippet></ROW><ROW><id>13862354</id><snippet>new_paragraph = paragraph.replace('Monday','Mon')
</snippet></ROW><ROW><id>13862354</id><snippet>calendar</snippet></ROW><ROW><id>13862354</id><snippet>import calendar

for day,abbr in zip(calendar.day_name,calendar.day_abbr):
    paragraph = paragraph.replace(day,abbr)
</snippet></ROW><ROW><id>13862354</id><snippet>import re
import calendar

regex = re.compile('|'.join(calendar.day_name))
sub_dict = dict(zip(calendar.day_name,calendar.day_abbr))
new_paragraph = regex.sub(lambda match: sub_dict[match.group(0)],paragraph)
</snippet></ROW><ROW><id>13862492</id><snippet>__getitem__</snippet></ROW><ROW><id>13862492</id><snippet>__len__</snippet></ROW><ROW><id>13862570</id><snippet>#!/usr/bin/python
from SimpleXMLRPCServer import SimpleXMLRPCServer
import xmlrpclib

arrayToAppend = []

def appendArray(value):
    global arrayToAppend
    arrayToAppend.append(value)
    return 1

def valueOfArray():
    return arrayToAppend

server = SimpleXMLRPCServer(("localhost", 8000))
print "Listening on port 8000..."
server.register_function(appendArray, "appendArray")
server.register_function(valueOfArray, "valueOfArray")
server.serve_forever()
</snippet></ROW><ROW><id>13862570</id><snippet>&gt;&gt;&gt; import xmlrpclib
&gt;&gt;&gt; p = xmlrpclib.Server("http://localhost:8000")
&gt;&gt;&gt; p.appendArray("test1")
1
&gt;&gt;&gt; p.valueOfArray()
['test1']
&gt;&gt;&gt; p.appendArray("test2")
1
&gt;&gt;&gt; p.valueOfArray()
['test1','test2']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13862767</id><snippet>__init__.py</snippet></ROW><ROW><id>13862767</id><snippet>Lib/site-packages/google</snippet></ROW><ROW><id>13862767</id><snippet>import google</snippet></ROW><ROW><id>13862767</id><snippet>__init__.pyc</snippet></ROW><ROW><id>13862850</id><snippet>Location</snippet></ROW><ROW><id>13862850</id><snippet>&gt;&gt;&gt; e.headers['Location']
'http://www-nc.nytimes.com/2011/11/15/arts/music/new-music-from-caveman-los-campesinos-and-the-fall.html?=_r=6&amp;'
</snippet></ROW><ROW><id>13862850</id><snippet>urllib</snippet></ROW><ROW><id>13862850</id><snippet>urllib2</snippet></ROW><ROW><id>13862850</id><snippet>requests</snippet></ROW><ROW><id>13862850</id><snippet>requests</snippet></ROW><ROW><id>13862850</id><snippet>&gt;&gt;&gt; res = requests.get(url)
&lt;Response [200]&gt;
&gt;&gt;&gt; print res.text
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" # And so on
</snippet></ROW><ROW><id>13863325</id><snippet>from Tkinter import *

root = Tk()

premadeList = ["foo", "bar", "baz"]

for checkBoxName in premadeList:
    c = Checkbutton(root, text=checkBoxName)
    c.pack()

root.mainloop()
</snippet></ROW><ROW><id>13863325</id><snippet>import random
import string
from Tkinter import *

root = Tk()

def addCheckBox():
    checkBoxName = "".join(random.choice(string.letters) for _ in range(10))
    c = Checkbutton(root, text=checkBoxName)
    c.pack()

b = Button(root, text="Add a checkbox", command=addCheckBox)
b.pack()

root.mainloop()
</snippet></ROW><ROW><id>13863325</id><snippet>import random
import string
from Tkinter import *

root = Tk()

def addCheckBox():
    checkBoxName = "".join(random.choice(string.letters) for _ in range(10))
    c = Checkbutton(root, text=checkBoxName)
    c.pack()

b = Button(root, text="Add a checkbox", command=addCheckBox)
b.pack()

premadeList = ["foo", "bar", "baz"]

for checkBoxName in premadeList:
    c = Checkbutton(root, text=checkBoxName)
    c.pack()

root.mainloop()
</snippet></ROW><ROW><id>13863383</id><snippet>id(spam)</snippet></ROW><ROW><id>13863383</id><snippet>spam</snippet></ROW><ROW><id>13863383</id><snippet>spam</snippet></ROW><ROW><id>13863401</id><snippet>return</snippet></ROW><ROW><id>13863401</id><snippet>def getData(i, value):
    global dataList
    if condition:
        return list(suffixList)
    #do something
    return getData(i, value)
</snippet></ROW><ROW><id>13863401</id><snippet>return</snippet></ROW><ROW><id>13863401</id><snippet>None</snippet></ROW><ROW><id>13863455</id><snippet>Counter</snippet></ROW><ROW><id>13863455</id><snippet>from collections import Counter
d = {}  
#*1* Alternatively, could use : d = defaultdict(Counter)
with open(inputfile) as input_file:
    for line in input_file:
        for_who, items = line[:-1].split(':',1)
        d[for_who] = Counter(items.split(','))  
        #Alternatively, if using defaultdict at *1*, d.update(items.split(','))
        #This allows "joe" to register multiple shopping lists which get summed into 1

#get totals by `sum`ming your Counters values:
totals = sum(d.values())

#Now add a 0-dict to each of the dictionaries just to make sure they have all the keys
zeros = dict((k,0) for k in totals)
for cntr in d.values():
    cntr.update(zeros)

key_order = list(totals.keys())  #list for py2k
with open(output_file,'w') as fout:
    fout.write('Order '+','.join(key_order)+'\n')
    fout.write('Totals,'+','.join(str(totals[k]) for k in key_order)+'\n') 
    for person,dct in d.items():
        fout.write(person+','+','.join(str(dct[k]) for k in key_order)+'\n') 
</snippet></ROW><ROW><id>13863455</id><snippet>csv</snippet></ROW><ROW><id>13863547</id><snippet>import socket
self.request.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
</snippet></ROW><ROW><id>13863777</id><snippet>pickle.dump</snippet></ROW><ROW><id>13863777</id><snippet>output_phil=open(settingFile,'wb')
pickle.dump(dataTodump, output_phil, 0)
</snippet></ROW><ROW><id>13863777</id><snippet>\n</snippet></ROW><ROW><id>13864024</id><snippet>unsigned char *str;
unsigned int result;

result =  *str++ &lt;&lt; 24;
result |= *str++ &lt;&lt; 16;
result |= *str++ &lt;&lt; 8;
result |= *str++;
</snippet></ROW><ROW><id>13864100</id><snippet>import numpy as np
from scipy.interpolate import griddata

import matplotlib.pyplot as plt
from matplotlib import rc #for latex

from multiprocessing import Process, JoinableQueue

import pdb #the debugger

rc('text', usetex=True)#for latex

map=0 #initialize the map index. It will be use to index the array     like this: array[map,x,y,...]
time=np.zeros(1) #an array to store the time
middle_h=np.zeros((0,3)) #x phi c

#for the middle of the box
current_file=open("single_void_cyl_periodic_phi_c_middle_h_out",'r')
for line in current_file.readlines():
    if line.startswith('# ===  time'):
        map+=1
        np.append(time,[float(line.strip('# ===  time  '))])
    elif line.startswith('#'):
        pass
    else:
        v=np.fromstring(line,dtype=float,sep=' ')
        middle_h=np.vstack( (middle_h,v[[1,3,4]]) ) 
current_file.close()
middle_h=middle_h.reshape((map,-1,3)) #3d array: map, x, phi,c 

#######
def load_and_plot(): #will load a map file, and plot it along with     the corresponding profile loaded before
    while tasks_queue.empty()==False:
        print("fecthing work ...")
        try:
            map_index=tasks_queue.get() #get some work to do from     the queue
            print("----&gt; working on map: %s" %map_index)
                 x,y,zp=np.loadtxt("single_void_cyl_growth_periodic_post_map_"+str(map_index),\
                unpack=True, usecols=[1, 2,3])
            for i,el in enumerate(zp):
                if el&lt;0.:
                    zp[i]=0.
            xv=np.unique(x)
            yv=np.unique(y)
            X,Y= np.meshgrid(xv,yv)
            Z = griddata((x, y), zp, (X, Y),method='nearest')

            figure=plt.figure(num=map_index,figsize=(14, 8))
            ax1=plt.subplot2grid((2,2),(0,0))
                ax1.plot(middle_h[map_index,:,0],middle_h[map_index,:,1],'*b')
            ax1.grid(True)
            ax1.axis([-15, 15, 0, 1])
            ax1.set_title('Profiles')
            ax1.set_ylabel(r'$\phi$')
            ax1.set_xlabel('x')

            ax2=plt.subplot2grid((2,2),(1,0))
                ax2.plot(middle_h[map_index,:,0],middle_h[map_index,:,2],'*r')
            ax2.grid(True)
            ax2.axis([-15, 15, 0, 1])
            ax2.set_ylabel('c')
            ax2.set_xlabel('x')

            ax3=plt.subplot2grid((2,2),    (0,1),rowspan=2,aspect='equal')
                sub_contour=ax3.contourf(X,Y,Z,np.linspace(0,1,11),vmin=0.)
            figure.colorbar(sub_contour,ax=ax3)
                figure.savefig('single_void_cyl_'+str(map_index)+'.png')
            plt.close(map_index)
            tasks_queue.task_done() #work for this item finished
        except:
            print("failed this time: %s" %map_index)
#######

nb_proc=8 #number of processes
tasks_queue=JoinableQueue() #a queue to pile up the work to do

jobs=list(range(map)) #each job is composed of a map
print("inserting jobs in the queue...")
for job in jobs:
    tasks_queue.put(job)
print("done")

#launch the processes
for i in range(nb_proc):
    current_process=Process(target=load_and_plot)
    current_process.start()

#wait for all tasks to be treated
tasks_queue.join()
</snippet></ROW><ROW><id>13864166</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(html)

for schedbar in soup.find_all('div', 'schedbar'):
  print "start: " +  schedbar.find('div', 'schedbar_m').find('span', 'start').string
  print "end: " +  schedbar.find('div', 'schedbar_m').find('span', 'end').string
</snippet></ROW><ROW><id>13864166</id><snippet>start: 2pm
end: 6pm
start: 7pm
end: 11pm
</snippet></ROW><ROW><id>13864264</id><snippet>keys = ['ticker', 't_date', 't_open', 't_high', 't_low', 't_close', 't_volume']
arr1 = [
    dict.fromkeys(keys, ' '),
    dict.fromkeys(keys, ' ')
]
</snippet></ROW><ROW><id>13864264</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>13864264</id><snippet>.append()</snippet></ROW><ROW><id>13864264</id><snippet>arr1.append({'key': 'value', 'otherkey': 'othervalue'})
</snippet></ROW><ROW><id>13864264</id><snippet>{k: v}</snippet></ROW><ROW><id>13864611</id><snippet>service varchar(20))</snippet></ROW><ROW><id>13864611</id><snippet>nom</snippet></ROW><ROW><id>13864611</id><snippet>name</snippet></ROW><ROW><id>13864611</id><snippet>QtSql.QSqlRelation("service", "id", "name")</snippet></ROW><ROW><id>13864611</id><snippet>@classmethod
def create_connection(cls, bdd=DB_PATH):
    db = QtSql.QSqlDatabase.addDatabase("QSQLITE")
    db.setDatabaseName(bdd)
    db.open()
    query = QtSql.QSqlQuery()
    query.exec_(u"create table person(id int primary key, name varchar(20), "
                u"phone varchar(20), service int)")    

    query.exec_(u"create table service(id int primary key, name varchar(20))")  
    db.commit()
    return db  # don't forget to return it, as you use it in close
</snippet></ROW><ROW><id>13864629</id><snippet>month_list = original_list[i][0][0:7]
volume_str = original_list[i][5]
#print(volume_str)
adj_close_str = original_list[i][6]
</snippet></ROW><ROW><id>13864699</id><snippet>tuple</snippet></ROW><ROW><id>13864699</id><snippet>tuple</snippet></ROW><ROW><id>13864699</id><snippet>format</snippet></ROW><ROW><id>13864699</id><snippet>tuple</snippet></ROW><ROW><id>13864699</id><snippet>list</snippet></ROW><ROW><id>13864699</id><snippet>tuple</snippet></ROW><ROW><id>13864699</id><snippet>tuple</snippet></ROW><ROW><id>13864699</id><snippet>dict</snippet></ROW><ROW><id>13864699</id><snippet>(['string'], )</snippet></ROW><ROW><id>13864699</id><snippet>['string']</snippet></ROW><ROW><id>13864699</id><snippet>PyString_Format</snippet></ROW><ROW><id>13864699</id><snippet>PyUnicode_Format</snippet></ROW><ROW><id>13864699</id><snippet>PyMappingCheck</snippet></ROW><ROW><id>13864699</id><snippet>if (PyMapping_Check(args) &amp;&amp; !PyTuple_Check(args) &amp;&amp;
     !PyObject_TypeCheck(args, &amp;PyBaseString_Type))
    dict = args;
</snippet></ROW><ROW><id>13864699</id><snippet>if (Py_TYPE(args)-&gt;tp_as_mapping &amp;&amp; !PyTuple_Check(args) &amp;&amp;
    !PyObject_TypeCheck(args, &amp;PyBaseString_Type))
    dict = args;
</snippet></ROW><ROW><id>13864699</id><snippet>set</snippet></ROW><ROW><id>13864699</id><snippet>tp_as_mapping</snippet></ROW><ROW><id>13864699</id><snippet>list</snippet></ROW><ROW><id>13864699</id><snippet>list</snippet></ROW><ROW><id>13864699</id><snippet>TypeError</snippet></ROW><ROW><id>13864699</id><snippet>set</snippet></ROW><ROW><id>13864699</id><snippet>int</snippet></ROW><ROW><id>13864699</id><snippet>TypeError</snippet></ROW><ROW><id>13864699</id><snippet>list</snippet></ROW><ROW><id>13864699</id><snippet>$ python2
Python 2.7.3 (default, Sep 26 2012, 21:53:58) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 'some string' % []
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>13864699</id><snippet>'some string' % 5 -&gt; 'some string'</snippet></ROW><ROW><id>13864699</id><snippet>TypeError</snippet></ROW><ROW><id>13864994</id><snippet>page.html</snippet></ROW><ROW><id>13864994</id><snippet>post.html</snippet></ROW><ROW><id>13864994</id><snippet>{% extends "base.html" %}

{% block content %}
    &lt;div class ="main"&gt;
        &lt;ul&gt;
            {% for post in posts.object_list %}
                &lt;div class = "title"&gt;{{ post.title }}&lt;/div&gt;
                &lt;ul&gt;
                    &lt;div class="time"&gt; {{ post.created }}&lt;/div&gt;
                    &lt;div class ="body"&gt; {{ post.body|linebreaks }}&lt;/div&gt;
                &lt;/ul&gt;
            {% endfor %}
        &lt;/ul&gt;
    &lt;/div&gt;
{% endblock %}
</snippet></ROW><ROW><id>13864994</id><snippet>post</snippet></ROW><ROW><id>13864994</id><snippet>{% extends "base.html" %}

{% block content %}
    &lt;div class ="main"&gt;
        {{ post.title }}
        {{ post.created }}
        {{ post.body }}      
    &lt;/div&gt;
{% endblock %}
</snippet></ROW><ROW><id>13865150</id><snippet>def combine_funcs(*funcs):
    def combined_func(*args, **kwargs):
        for f in funcs:
            f(*args, **kwargs)
    return combined_func
</snippet></ROW><ROW><id>13865150</id><snippet>self.testButton = Button(self, text = "test", 
                         command = combine_funcs(func1, func2))
</snippet></ROW><ROW><id>13865306</id><snippet>list = ['LnNlbHBtYXhlIGVzdSBvdCBlZXJmIGxlZUYgLnNldGlzYmV3IGNpZmZhcnQgaGdpaCBubyBub2l0YXNpbGFtcm9uZWQgZm8gdHBlY25vYyBlaHQgZWJpcmNzZUQgLjQ=', 'ZWxpZiBlbm8gbmkgZWIgdHN1TSApaXYgICAg', 'c25vaXRhY2lmaWNlcHMgOC1QRVAgdGVlbSB0c3VNICl2ICAgIA==', 'Ni4yIG5vaHR5UCBodGl3IGtyb3cgdHN1TSApdmkgICAg', 'c2VsdWRvbSByZWh0byB5YiBlbGJhdHJvcG1pIGViIGRsdW9ocyBzc2FsQyApaWlpICAgIA==']
s = ''.join(list)
s = s.decode('base64', 'strict')
print (s[::-1])
</snippet></ROW><ROW><id>13865306</id><snippet>join</snippet></ROW><ROW><id>13865306</id><snippet>=</snippet></ROW><ROW><id>13865306</id><snippet>list = ['LnNlbHBtYXhlIGVzdSBvdCBlZXJmIGxlZUYgLnNldGlzYmV3IGNpZmZhcnQgaGdpaCBubyBub2l0YXNpbGFtcm9uZWQgZm8gdHBlY25vYyBlaHQgZWJpcmNzZUQgLjQ=', 'ZWxpZiBlbm8gbmkgZWIgdHN1TSApaXYgICAg', 'c25vaXRhY2lmaWNlcHMgOC1QRVAgdGVlbSB0c3VNICl2ICAgIA==', 'Ni4yIG5vaHR5UCBodGl3IGtyb3cgdHN1TSApdmkgICAg', 'c2VsdWRvbSByZWh0byB5YiBlbGJhdHJvcG1pIGViIGRsdW9ocyBzc2FsQyApaWlpICAgIA==']
for s in list:
    s = s.decode('base64', 'strict')
    print (s[::-1])
</snippet></ROW><ROW><id>13865306</id><snippet>list = ['LnNlbHBtYXhlIGVzdSBvdCBlZXJmIGxlZUYgLnNldGlzYmV3IGNpZmZhcnQgaGdpaCBubyBub2l0YXNpbGFtcm9uZWQgZm8gdHBlY25vYyBlaHQgZWJpcmNzZUQgLjQ=', 'ZWxpZiBlbm8gbmkgZWIgdHN1TSApaXYgICAg', 'c25vaXRhY2lmaWNlcHMgOC1QRVAgdGVlbSB0c3VNICl2ICAgIA==', 'Ni4yIG5vaHR5UCBodGl3IGtyb3cgdHN1TSApdmkgICAg', 'c2VsdWRvbSByZWh0byB5YiBlbGJhdHJvcG1pIGViIGRsdW9ocyBzc2FsQyApaWlpICAgIA==']
print "\n".join(s.decode('base64')[::-1] for s in list)
</snippet></ROW><ROW><id>13865306</id><snippet>4. Describe the concept of denormalisation on high traffic websites. Feel free to use examples.
    vi) Must be in one file
    v) Must meet PEP-8 specifications
    iv) Must work with Python 2.6
    iii) Class should be importable by other modules
</snippet></ROW><ROW><id>13865428</id><snippet>\t</snippet></ROW><ROW><id>13865428</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>13865428</id><snippet>^*[ ]*S[iI][gG][nN][aA][Tt][uU][rR][eE][sS]?\s*[^0-9]$
</snippet></ROW><ROW><id>13865428</id><snippet>\s</snippet></ROW><ROW><id>13865428</id><snippet>\s</snippet></ROW><ROW><id>13865428</id><snippet>^*</snippet></ROW><ROW><id>13865428</id><snippet>\t</snippet></ROW><ROW><id>13865428</id><snippet>[ ]</snippet></ROW><ROW><id>13865472</id><snippet>fetchone</snippet></ROW><ROW><id>13865472</id><snippet>x = cr.fetchone()
if x is not None:
  result = x[0]
</snippet></ROW><ROW><id>13865765</id><snippet>\uFFFF</snippet></ROW><ROW><id>13865765</id><snippet>&gt;&gt;&gt; len(u'\U00010000')
2
&gt;&gt;&gt; u'\U00010000'[0]
u'\ud800'
&gt;&gt;&gt; u'\U00010000'[1]
u'\udc00'
</snippet></ROW><ROW><id>13865765</id><snippet>[^\x09\x0A\x0D\u0020-\ud7ff\ue000-\ufffd\ud800\udc00-\udbff\udfff]
</snippet></ROW><ROW><id>13865765</id><snippet>\udc00-\udbff</snippet></ROW><ROW><id>13865812</id><snippet># Models
class MyModel(models.Model):
    myfield1 = models.CharField(max_length=30)
    myfield2 = models.CharField(max_length=30)
    myinteger3 = models.IntegerField(blank=True, null=True)



# Views
class MyView(views.View):
    model = MyModel

    def get_queryset(self):
        def myfunc(query_object_list, param):
            myfuncr = lambda l: ((myfuncr(l[1:]) | Q(**{ param: l[0] })) if l else Q()) # Q() is the neutral element of operation "|" for Q objects
            return myfuncr(query_object_list)

        myq = Q() # Q() is the neutral element of operation "&amp;" for Q objects
        for param in self.request.GET:
            myq &amp;= myfunc(self.request.GET.getlist(param, None), param)

        return MyModel.objects.filter(myq)


# Template
&lt;a href='{% url myview %}?myfield1__iexact={{ myvar1 }}&amp;myfield2__iexact={{ myvar2 }}&amp;myinteger3__gte={{ myvar3 }}'&gt;foobar&lt;/a&gt;

&lt;a href='{% url myview %}?myinteger3__gte={{ myvar4 }}'&gt;{{ myvar4 }}&lt;/a&gt;
</snippet></ROW><ROW><id>13865838</id><snippet>index_col</snippet></ROW><ROW><id>13865838</id><snippet>index_col</snippet></ROW><ROW><id>13865838</id><snippet>parse_cols</snippet></ROW><ROW><id>13865838</id><snippet>read_csv()</snippet></ROW><ROW><id>13865838</id><snippet>df.truncate</snippet></ROW><ROW><id>13865838</id><snippet>before</snippet></ROW><ROW><id>13865838</id><snippet>after</snippet></ROW><ROW><id>13865838</id><snippet>dropna()</snippet></ROW><ROW><id>13865874</id><snippet>scipy.stats.probplot</snippet></ROW><ROW><id>13865874</id><snippet>import numpy as np 
import pylab 
import scipy.stats as stats

measurements = np.random.normal(loc = 20, scale = 5, size=100)   
stats.probplot(measurements, dist="norm", plot=pylab)
pylab.show()
</snippet></ROW><ROW><id>13865918</id><snippet>import uuid
hdr="\xff"*6
mac=uuid.getnode()
txt="%012X"%mac
as_b=[int("".join(x),16) for x in map(None,*(txt[::2],txt[1::2]))]
as_s="".join(chr(b) for b in as_b)
out=hdr+as_s
</snippet></ROW><ROW><id>13865956</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; del a[0] # should delete 1
&gt;&gt;&gt; a
[2, 3]
&gt;&gt;&gt; del a[1] # This use to be the index for 2, but now `3` is at this index
&gt;&gt;&gt; a
[2]
</snippet></ROW><ROW><id>13866041</id><snippet>from PyQt4.QtCore import QFile
from cStringIO import StringIO
from PIL import Image, ImageWin
import res_rc

stream = QFile(':/images/image.png')
if stream.open(QFile.ReadOnly):
    data = stream.readAll()
    stream.close()
    image = Image.open(StringIO(data))
    dim = ImageWin.Dib(image)
</snippet></ROW><ROW><id>13866229</id><snippet>&gt;&gt;&gt; info[:3] + [''.join(e) for e in zip(info[3::2],info[4::2])] + info[-1:]
[u'1', u'be/4', u'root', u'0.00B', u'0.00B', u'0.00%', u'0.00%', u'init']
</snippet></ROW><ROW><id>13866329</id><snippet>sudo defaults write /System/Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/Info "LSUIElement" -string "1"
</snippet></ROW><ROW><id>13866432</id><snippet>names = dir(self.__class__)
</snippet></ROW><ROW><id>13866432</id><snippet>names = [prop for prop in dir(self.__class__) if prop[1] != "_"]
</snippet></ROW><ROW><id>13866591</id><snippet>self</snippet></ROW><ROW><id>13866591</id><snippet>self</snippet></ROW><ROW><id>13866591</id><snippet>    self[:] = list(set(self))  
</snippet></ROW><ROW><id>13866653</id><snippet>sf = ScrolledFrame(root)</snippet></ROW><ROW><id>13866653</id><snippet>sf._clipper.config(width='value_you_want', height='value_you_want')
</snippet></ROW><ROW><id>13866653</id><snippet>#! /usr/bin/python3.2

import tkinter
import Pmw

root = tkinter.Tk()
Pmw.initialise(root)

sf = Pmw.ScrolledFrame(root)
sf._clipper.config(width=100, height = 200)
sf.interior().configure(height=80, width=80, bg='yellow')

sf.pack()

root.mainloop()
</snippet></ROW><ROW><id>13866733</id><snippet>$</snippet></ROW><ROW><id>13866733</id><snippet>(^a{1,2})|(x$)</snippet></ROW><ROW><id>13866733</id><snippet>|</snippet></ROW><ROW><id>13866733</id><snippet>pt = '^(a{1,2}|x)$'
</snippet></ROW><ROW><id>13866733</id><snippet>pt = '^(?:a{1,2}|x)$'
</snippet></ROW><ROW><id>13866733</id><snippet>pt = '^(a{1,2}x?|x)$"
</snippet></ROW><ROW><id>13866964</id><snippet>libtiff.TIFFOpen.restype = TIFF
</snippet></ROW><ROW><id>13866964</id><snippet>ctypes</snippet></ROW><ROW><id>13866964</id><snippet>ctypes</snippet></ROW><ROW><id>13866964</id><snippet>TIFF</snippet></ROW><ROW><id>13866964</id><snippet>__init__</snippet></ROW><ROW><id>13866964</id><snippet>c_void_p</snippet></ROW><ROW><id>13866964</id><snippet>c_void_p</snippet></ROW><ROW><id>13866964</id><snippet>c_void_p</snippet></ROW><ROW><id>13866964</id><snippet>TIFF*</snippet></ROW><ROW><id>13866964</id><snippet>TIFF</snippet></ROW><ROW><id>13866964</id><snippet>def myopen(*args):
    tiffpointer = libtiff.cfunc(*args)
    return TIFF(tiffpointer)
</snippet></ROW><ROW><id>13866964</id><snippet>libtiff.cfunc.restype</snippet></ROW><ROW><id>13866964</id><snippet>pylibtiff</snippet></ROW><ROW><id>13866964</id><snippet>class TIFFDifferent(TIFF):
    …
    @classmethod
    def open(cls, filename, mode='r'):
        tiff = libtiff.TIFFOpen(filename, mode)
        if tiff.value is None:
            raise TypeError ('Failed to open file '+`filename`)
        return cls(tiff)
</snippet></ROW><ROW><id>13866964</id><snippet>restype</snippet></ROW><ROW><id>13866964</id><snippet>TIFF</snippet></ROW><ROW><id>13866964</id><snippet>c_void_p</snippet></ROW><ROW><id>13866964</id><snippet>pylibtiff</snippet></ROW><ROW><id>13866964</id><snippet>class TIFFDifferent(TIFF):
    …
    @classmethod
    def open(cls, filename, mode='r'):
        stash = libtiff.TIFFOpen.restype
        libtiff.TIFFOpen.restype = cls
        tiff = libtiff.TIFFOpen(filename, mode)
        libtiff.TIFFOpen.restype = stash
        if tiff.value is None:
            raise TypeError ('Failed to open file '+`filename`)
        return tiff
</snippet></ROW><ROW><id>13866964</id><snippet>contextmanager</snippet></ROW><ROW><id>13866964</id><snippet>try:</snippet></ROW><ROW><id>13866964</id><snippet>finally:</snippet></ROW><ROW><id>13866964</id><snippet>restype</snippet></ROW><ROW><id>13867246</id><snippet>file_opt</snippet></ROW><ROW><id>13867246</id><snippet>__init__</snippet></ROW><ROW><id>13867246</id><snippet>getFileButton</snippet></ROW><ROW><id>13867246</id><snippet>file_opt</snippet></ROW><ROW><id>13867254</id><snippet>object</snippet></ROW><ROW><id>13867254</id><snippet>a = A()
a.db.doSomething("blah")
</snippet></ROW><ROW><id>13867315</id><snippet>layout_mds</snippet></ROW><ROW><id>13867315</id><snippet>Graph</snippet></ROW><ROW><id>13867319</id><snippet>pytz.all_timezones</snippet></ROW><ROW><id>13867319</id><snippet>In [40]: import pytz
In [41]: pytz.all_timezones
Out[42]: 
['Africa/Abidjan',
 'Africa/Accra',
 'Africa/Addis_Ababa',
 ...]
</snippet></ROW><ROW><id>13867319</id><snippet>pytz.common_timezones</snippet></ROW><ROW><id>13867319</id><snippet>In [45]: len(pytz.common_timezones)
Out[45]: 403

In [46]: len(pytz.all_timezones)
Out[46]: 563
</snippet></ROW><ROW><id>13867384</id><snippet>output = ['John', '16', 'random_word', '1', '6', ...]</snippet></ROW><ROW><id>13867384</id><snippet>output = inpt.split(', ')</snippet></ROW><ROW><id>13867384</id><snippet>,</snippet></ROW><ROW><id>13867619</id><snippet>sip</snippet></ROW><ROW><id>13867619</id><snippet>shiboken</snippet></ROW><ROW><id>13867675</id><snippet>import gzip
with gzip.open('/sample.gz', 'rb') as my_gz:
    file_content = my_gz.read()
    with open('/sample.csv', 'wb') as my_csv:
        my_csv.write(file_content)
</snippet></ROW><ROW><id>13867688</id><snippet>server == A</snippet></ROW><ROW><id>13867688</id><snippet>server == B</snippet></ROW><ROW><id>13867688</id><snippet>server = A</snippet></ROW><ROW><id>13867688</id><snippet>server = B</snippet></ROW><ROW><id>13867688</id><snippet>while points_bob &lt; 9 and points_susie &lt; 9:
    probability = random.random()
    print probability
    if probability &lt;= prob_A_wins and server == A:
        points_bob += 1
    elif probability &lt;= prob_A_wins and server == B:
        server = A
        print server

    if probability &gt; prob_A_wins and server == B:
        points_susie += 1
    elif probability &gt; prob_A_wins and server == A:
        server = B
        print server

    print points_bob
    print points_susie
</snippet></ROW><ROW><id>13867709</id><snippet># a.py
from b import B

class A: whatever

# b.py
from a import A

class B: whatever
</snippet></ROW><ROW><id>13867709</id><snippet># common.py
class A: whatever
class B: whatever

# a.py
from common import A

# b.py
from common import B
</snippet></ROW><ROW><id>13867710</id><snippet>deiconify()</snippet></ROW><ROW><id>13867710</id><snippet>focus_set()</snippet></ROW><ROW><id>13867710</id><snippet>toplevel.deiconify()
text.focus_set()
</snippet></ROW><ROW><id>13867710</id><snippet>import ctypes</snippet></ROW><ROW><id>13867710</id><snippet>text.focus_set()</snippet></ROW><ROW><id>13867710</id><snippet>top_hwnd = toplevel.winfo_id()</snippet></ROW><ROW><id>13867710</id><snippet>ctypes.windll.user32.SetFocus(top_hwnd)</snippet></ROW><ROW><id>13867949</id><snippet>import subprocess

def find_vga():
    vga = subprocess.Popen("lspci -v -s `lspci | awk '/VGA/{print $1}'`", shell=True)
    return vga

print(find_vga())
</snippet></ROW><ROW><id>13867949</id><snippet>def find_vga():
    vga = subprocess.check_output("lspci -v -s `lspci | awk '/VGA/{print $1}'`", shell=True, executable='/bin/bash')
    return vga

print(find_vga())
</snippet></ROW><ROW><id>13868208</id><snippet>&lt;/Text&gt;</snippet></ROW><ROW><id>13868269</id><snippet>os.system</snippet></ROW><ROW><id>13868269</id><snippet>subprocess</snippet></ROW><ROW><id>13868269</id><snippet>stdin</snippet></ROW><ROW><id>13868269</id><snippet>stdout</snippet></ROW><ROW><id>13868269</id><snippet>"LOAD test.mp3"</snippet></ROW><ROW><id>13868269</id><snippet>p = subprocess.Popen(['mpg321', '-R', 'testPlayer'], stdin=PIPE)
</snippet></ROW><ROW><id>13868269</id><snippet>p.stdin.write('LOAD test.mp3\n')
</snippet></ROW><ROW><id>13868269</id><snippet>echo -e 'LOAD test.mp3\n' | mpg321 -R testPlayer
</snippet></ROW><ROW><id>13868269</id><snippet>communicate</snippet></ROW><ROW><id>13868269</id><snippet>expect</snippet></ROW><ROW><id>13868417</id><snippet>class A(object):
    elems = [1, 2, 3]
    @classmethod
    def collated(cls):
      return sorted(cls.elems)

class B(A):
    pass

class C(B):
    elems = B.elems + [20, 100]

class D(B):
    elems = B.elems + [4, 5]

print "A.collated() == ", A.collated()
print "B.collated() == ", B.collated()
print "C.collated() == ", C.collated()
print "D.collated() == ", D.collated()
</snippet></ROW><ROW><id>13868714</id><snippet>webdriver</snippet></ROW><ROW><id>13868714</id><snippet>FirefoxProfile</snippet></ROW><ROW><id>13868714</id><snippet>firefox_profile</snippet></ROW><ROW><id>13868714</id><snippet>FirefoxProfile</snippet></ROW><ROW><id>13868714</id><snippet>from selenium import webdriver
# ...
profile = webdriver.firefox.firefox_profile.FirefoxProfile('/path/to/your/profile')
driver = webdriver.Firefox(firefox_profile=profile)
</snippet></ROW><ROW><id>13868714</id><snippet>driver</snippet></ROW><ROW><id>13868714</id><snippet>driver</snippet></ROW><ROW><id>13868714</id><snippet>firefox_profile</snippet></ROW><ROW><id>13868714</id><snippet>profile</snippet></ROW><ROW><id>13868714</id><snippet>FirefoxProfile</snippet></ROW><ROW><id>13869212</id><snippet>multiprocessing</snippet></ROW><ROW><id>13869212</id><snippet>ThreadPool</snippet></ROW><ROW><id>13869212</id><snippet>pool.apply_async</snippet></ROW><ROW><id>13869212</id><snippet>import multiprocessing.pool as mpool

def worker(task):
    # work on task
    print(task)     # substitute your migration code here.

# create a pool of 10 threads
pool = mpool.ThreadPool(10)
N = 100

for task in range(N):
    pool.apply_async(worker, args = (task, ))

pool.close()
pool.join()
</snippet></ROW><ROW><id>13869233</id><snippet>np.where</snippet></ROW><ROW><id>13869233</id><snippet>np.logical_and</snippet></ROW><ROW><id>13869233</id><snippet>In [27]: a = np.array([1, 3, 5, 6, 9, 10, 14, 15, 56])

In [28]: np.where(np.logical_and(a&gt;=6, a&lt;=10))
Out[28]: (array([3, 4, 5]),)
</snippet></ROW><ROW><id>13869350</id><snippet>mylist = []
while 1:
    mylist.append(raw_input(': '))
    if raw_input('Add another? (Y/n): ')[0].lower() == 'n':
        break
</snippet></ROW><ROW><id>13869350</id><snippet>mylist = []
while 1:
    mylist.append(raw_input(': '))
    if mylist[-1] == '': break
</snippet></ROW><ROW><id>13869456</id><snippet>ipg</snippet></ROW><ROW><id>13869456</id><snippet>ipg.so</snippet></ROW><ROW><id>13869456</id><snippet>ipg.o:
    g++ -o ipg.o -c ipg.cc -Wall -fPIC -I/usr/include/python2.7
ipg.so: ipg.o
    g++ -shared -o ipg.so ipg.o -lpython2.7 -lboost_python -lboost_system
</snippet></ROW><ROW><id>13869577</id><snippet>nohup</snippet></ROW><ROW><id>13869646</id><snippet>if len(set([s1, s2, s3, s4])) != 4:
    pass # not all unique
</snippet></ROW><ROW><id>13869831</id><snippet>canvas.tag_raise(item)
</snippet></ROW><ROW><id>13870276</id><snippet>for cl in range(0, 10):
    while True:
        try:
            some_function(cl)
        except Exception:
            continue    # try it again
        else:
            break       # exit inner loop, continue to next c1
</snippet></ROW><ROW><id>13870294</id><snippet>diagnosis.py</snippet></ROW><ROW><id>13870294</id><snippet>socketIO.emit('gaze', ...)
</snippet></ROW><ROW><id>13870294</id><snippet>socket.broadcast.emit</snippet></ROW><ROW><id>13870294</id><snippet>diagnosis.py</snippet></ROW><ROW><id>13870294</id><snippet>socket.broadcast.emit</snippet></ROW><ROW><id>13870294</id><snippet>self.mainSocket = SocketIO('localhost', 80)
self.gazeSocket = self.mainSocket.connect('/gaze')
self.gazeSocket.emit('gaze', ...)
</snippet></ROW><ROW><id>13870294</id><snippet>var gaze = io.of('/gaze').on('connection', function (socket) {
    socket.on('gaze', function (gdata) {
        gaze.emit('gaze', gdata.toString());
    });
});
</snippet></ROW><ROW><id>13870294</id><snippet>var socket = io.connect('http://localhost/gaze');
socket.on('gaze', function (data) {
    console.log(data);
});
</snippet></ROW><ROW><id>13870341</id><snippet>new_img_dict = {}
for key in img_dict:
    if (time.time()-float(img_dict[key])) &gt;= stale_img:
        logger.debug('STALE IMAGE FROM '+hexlify(key)+ ' - GOT CLOSED NOW!')
        data_upload = True
   else:
       new_img_dict[key] = img_dict[key]
img_dict = new_img_dict
</snippet></ROW><ROW><id>13870341</id><snippet>for key in img_dict.keys():
    if (time.time()-float(img_dict[key])) &gt;= stale_img:
        logger.debug('STALE IMAGE FROM '+hexlify(key)+ ' - GOT CLOSED NOW!')
        del img_dict[key]
        data_upload = True
</snippet></ROW><ROW><id>13870341</id><snippet>img_dict.keys()</snippet></ROW><ROW><id>13870341</id><snippet>img_dict.keys()[:]</snippet></ROW><ROW><id>13870341</id><snippet>img_dict</snippet></ROW><ROW><id>13870341</id><snippet>filter</snippet></ROW><ROW><id>13870341</id><snippet>dict</snippet></ROW><ROW><id>13870341</id><snippet>for key in img_sorted_key_list:
    if time.time() - float(key) &gt; stale_img:
        break
    del img_dict[key]
</snippet></ROW><ROW><id>13870341</id><snippet>stale_time = time.time() - stale_img
for key in itertools.takewhile(lambda key: float(key) &lt; stale_time, 
                               img_sorted_key_list):
    del img_dict[key]
</snippet></ROW><ROW><id>13870341</id><snippet>Cache</snippet></ROW><ROW><id>13870409</id><snippet>Alias /static/ /var/www/myhost.com/static/
</snippet></ROW><ROW><id>13870741</id><snippet>print logging.Logger.manager.loggerDict.keys()
</snippet></ROW><ROW><id>13870861</id><snippet>def __dir__(self):
    return self.keys()
</snippet></ROW><ROW><id>13870985</id><snippet>clusterList</snippet></ROW><ROW><id>13870985</id><snippet>clusterList = list(clusterList)
</snippet></ROW><ROW><id>13870985</id><snippet>length = len(list(clusterList))
</snippet></ROW><ROW><id>13870985</id><snippet>length = sum(1 for x in clusterList)
</snippet></ROW><ROW><id>13870985</id><snippet>sum()</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>NewPrint</snippet></ROW><ROW><id>13870997</id><snippet>NewPrint</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>print(s)</snippet></ROW><ROW><id>13870997</id><snippet>s</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>sys.stdout</snippet></ROW><ROW><id>13870997</id><snippet>class FakeStdOut(object):
    # … lots of other stuff to implement or inherit
    def write(s):
        with open("somefile.txt", "a") as f:
            f.write(s)

def OverloadPrint():
    sys.stdout = FakeStdOut()
</snippet></ROW><ROW><id>13870997</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>13870997</id><snippet>stdout</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>log</snippet></ROW><ROW><id>13870997</id><snippet>sys.stderr</snippet></ROW><ROW><id>13870997</id><snippet>somefile.txt</snippet></ROW><ROW><id>13870997</id><snippet>print_</snippet></ROW><ROW><id>13870997</id><snippet>glog</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>print</snippet></ROW><ROW><id>13870997</id><snippet>logging</snippet></ROW><ROW><id>13870997</id><snippet>logging</snippet></ROW><ROW><id>13870997</id><snippet>Handler</snippet></ROW><ROW><id>13870997</id><snippet>logging</snippet></ROW><ROW><id>13870997</id><snippet>__future__</snippet></ROW><ROW><id>13871207</id><snippet>append()</snippet></ROW><ROW><id>13871207</id><snippet>lst = [0, 1, 2, 3, 4, 5]
new_lst = lst[1:]
new_lst.append(lst[0])
</snippet></ROW><ROW><id>13871207</id><snippet>new_lst.extend(lst[:1])</snippet></ROW><ROW><id>13871207</id><snippet>append(lst[0])</snippet></ROW><ROW><id>13871207</id><snippet>lst[1:] + list[:1]</snippet></ROW><ROW><id>13871207</id><snippet>extend()</snippet></ROW><ROW><id>13871445</id><snippet>import re

NAMETAG = r'\&lt;\-\- (?P&lt;name&gt;.*?) \-\-\&gt;'

# find all nametags in your string
matches = re.findall(NAMETAG, yourtext)

offset_start_list = []
offset_end_list = []
name_list = []

for m in matches:
    name = m.groups()['name']
    name_list.append(name)

    # find content offset after name tag
    offset_start_list.append(m.end() + 1)

    # the last content's end
    offset_end_list.append(m.start())


offset_end_list.pop(0)
offset_end_list.append(len(yourtext))

for name, start, end in zip(name_list, offset_start_list, offset_end_list):
    # save your files here
</snippet></ROW><ROW><id>13871552</id><snippet>def initialize_function(num,instruction,emplacement1,emplacement2,current_pipeline):
    function_mapping={
    "LOAD" : LOAD,
    "STORE" : STORE,
    "MOVE" : MOVE_IADD,
    "IADD" : MOVE_IADD,
    "FADD" : FADD
    }
    current_pipeline=function_mapping[instruction](num,emplacement1,emplacement2,current_pipeline)
    return(current_pipeline)
</snippet></ROW><ROW><id>13871711</id><snippet>enum = [i for i,x in enumerate(letterlist) if x == word]
</snippet></ROW><ROW><id>13871711</id><snippet>word</snippet></ROW><ROW><id>13871711</id><snippet>letterguess</snippet></ROW><ROW><id>13871711</id><snippet>letter</snippet></ROW><ROW><id>13871711</id><snippet>enum</snippet></ROW><ROW><id>13871711</id><snippet>word</snippet></ROW><ROW><id>13871711</id><snippet>letterlist</snippet></ROW><ROW><id>13871711</id><snippet>letterlist</snippet></ROW><ROW><id>13871711</id><snippet>'letter'</snippet></ROW><ROW><id>13871711</id><snippet>word</snippet></ROW><ROW><id>13871711</id><snippet>t</snippet></ROW><ROW><id>13871711</id><snippet>[2, 3]</snippet></ROW><ROW><id>13871711</id><snippet>bracketstrip = (str(w) for w in enum)
</snippet></ROW><ROW><id>13871711</id><snippet>bracketstrip</snippet></ROW><ROW><id>13871711</id><snippet>['2', '3']</snippet></ROW><ROW><id>13871711</id><snippet>z = int(''.join(bracketstrip))
</snippet></ROW><ROW><id>13871711</id><snippet>''.join(bracketstrip)</snippet></ROW><ROW><id>13871711</id><snippet>'23'</snippet></ROW><ROW><id>13871711</id><snippet>z</snippet></ROW><ROW><id>13871711</id><snippet>23</snippet></ROW><ROW><id>13871711</id><snippet>letterguess[z] = word
</snippet></ROW><ROW><id>13871711</id><snippet>IndexError</snippet></ROW><ROW><id>13871711</id><snippet>letterguess[23]</snippet></ROW><ROW><id>13871711</id><snippet>letterguess[2]</snippet></ROW><ROW><id>13871711</id><snippet>letterguess[3]</snippet></ROW><ROW><id>13871711</id><snippet>enum = [i for i,x in enumerate(letterlist) if x == word]
for i in enum:
    letterguess[i] = word
</snippet></ROW><ROW><id>13871711</id><snippet>letterlist = []
for eachcharacter in letter:
  letterlist.append(eachcharacter)
</snippet></ROW><ROW><id>13871711</id><snippet>letterlist = list(letter)</snippet></ROW><ROW><id>13871711</id><snippet>for i, x in enumerate(letterlist)</snippet></ROW><ROW><id>13871711</id><snippet>letter</snippet></ROW><ROW><id>13871711</id><snippet>list</snippet></ROW><ROW><id>13871844</id><snippet>sys._getframe()</snippet></ROW><ROW><id>13871844</id><snippet>data</snippet></ROW><ROW><id>13871844</id><snippet>import sys

def add_to_data(*items):
    def decorator(func):
        name = func.__name__
        data = sys._getframe(1).f_locals.get('data')
        if data is not None:
            data.setdefault(name, []).extend(items)
        return func
    return decorator
</snippet></ROW><ROW><id>13871844</id><snippet>sys._getframe</snippet></ROW><ROW><id>13871844</id><snippet>@add_to_data</snippet></ROW><ROW><id>13871844</id><snippet>data</snippet></ROW><ROW><id>13871974</id><snippet>season = ''
for line in data.splitlines():
    if line.startswith('=== Season'):
        season = line
    elif season:
        do something
</snippet></ROW><ROW><id>13872188</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>13872188</id><snippet>convertfunc</snippet></ROW><ROW><id>13872188</id><snippet>dtype='object'</snippet></ROW><ROW><id>13872188</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>13872188</id><snippet>dtype</snippet></ROW><ROW><id>13872188</id><snippet>dd = [(a, 'd') for a in col_headers[:-1]] + [(col_headers[-1], 'object')]
data = np.genfromtxt(files[1], skip_header=22, dtype=dd, 
                     names=col_headers, converters={'Time': convertfunc})
</snippet></ROW><ROW><id>13872188</id><snippet>In [74]: data['Mass']
Out[74]: array([ 0.262 ,  0.2618,  0.2616,  0.2614])
In [75]: data['Time']
Out[75]: array([1900-01-01 15:49:24.546000, 1900-01-01 15:49:25.171000,
                1900-01-01 15:49:25.405000, 1900-01-01 15:49:25.624000], 
                dtype=object)
</snippet></ROW><ROW><id>13872348</id><snippet>if 'thumb' not in filename: ...</snippet></ROW><ROW><id>13872348</id><snippet>filename</snippet></ROW><ROW><id>13872348</id><snippet>str</snippet></ROW><ROW><id>13872348</id><snippet>r".*(?!thumb).*"</snippet></ROW><ROW><id>13872348</id><snippet>.*</snippet></ROW><ROW><id>13872348</id><snippet>&gt;&gt;&gt; re.search('(.*)((?!thumb))(.*)', '/tmp/somewhere/thumb').groups()
('/tmp/somewhere/thumb', '', '')
&gt;&gt;&gt; re.search('(.*?)((?!thumb))(.*)', '/tmp/somewhere/thumb').groups()
('', '', '/tmp/somewhere/thumb')
&gt;&gt;&gt; re.search('(.*?)((?!thumb))(.*?)', '/tmp/somewhere/thumb').groups()
('', '', '')
</snippet></ROW><ROW><id>13872348</id><snippet>r"^(?!.*thumb).*"</snippet></ROW><ROW><id>13872348</id><snippet>.*</snippet></ROW><ROW><id>13872348</id><snippet>^</snippet></ROW><ROW><id>13872348</id><snippet>re.match</snippet></ROW><ROW><id>13872348</id><snippet>re.search</snippet></ROW><ROW><id>13872348</id><snippet>&gt;&gt;&gt; re.search('((?!.*thumb))(.*)', '/tmp/somewhere/thumb').groups()
('', 'humb')
&gt;&gt;&gt; re.search('^((?!.*thumb))(.*)', '/tmp/somewhere/thumb').groups()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'groups'
&gt;&gt;&gt; re.match('((?!.*thumb))(.*)', '/tmp/somewhere/thumb').groups()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'groups'
</snippet></ROW><ROW><id>13872844</id><snippet>__init__.py</snippet></ROW><ROW><id>13873477</id><snippet>isinstance</snippet></ROW><ROW><id>13873477</id><snippet>type</snippet></ROW><ROW><id>13873477</id><snippet>varA = 5
varB = 'dog'
if isinstance(varA, str) or isinstance(varB, str):
    print("string involved")
else:
    if varA &gt; varB:
        print("bigger")
    elif varA == varB:
        print("equal")
    else:
        print("smaller")
</snippet></ROW><ROW><id>13873477</id><snippet>str</snippet></ROW><ROW><id>13873477</id><snippet>else</snippet></ROW><ROW><id>13873477</id><snippet>or</snippet></ROW><ROW><id>13873477</id><snippet>or</snippet></ROW><ROW><id>13873477</id><snippet>any</snippet></ROW><ROW><id>13873477</id><snippet>True</snippet></ROW><ROW><id>13873477</id><snippet>if any((isinstance(varA, str), isinstance(varB, str))):
    # Code...
</snippet></ROW><ROW><id>13873477</id><snippet>or</snippet></ROW><ROW><id>13873477</id><snippet>and</snippet></ROW><ROW><id>13873477</id><snippet>all</snippet></ROW><ROW><id>13873477</id><snippet>all</snippet></ROW><ROW><id>13873477</id><snippet>any</snippet></ROW><ROW><id>13873477</id><snippet>if all((isinstance(varA, str), isinstance(varB, str))):
    # This code will evaluate if all values are strings
</snippet></ROW><ROW><id>13873477</id><snippet>isinstance</snippet></ROW><ROW><id>13873477</id><snippet>generator</snippet></ROW><ROW><id>13873477</id><snippet>any</snippet></ROW><ROW><id>13873477</id><snippet>all</snippet></ROW><ROW><id>13873477</id><snippet>if any(isinstance(x, str) for x in (varA, varB)):
    # Code
</snippet></ROW><ROW><id>13874077</id><snippet>class Item(object): 
    def __init__(self, unq_id, name, price, qty):
        self.unq_id = unq_id
        self.product_name = name
        self.price = price
        self.qty = qty


class Cart(object):
    def __init__(self):
        self.content = dict()

    def update(self, item):
        if item.unq_id not in self.content:
            self.content.update({item.unq_id: item})
            return
        for k, v in self.content.get(item.unq_id).iteritems():
            if k == 'unq_id':
                continue
            elif k == 'qty':
                total_qty = v.qty + item.qty
                if total_qty:
                    v.qty = total_qty
                    continue
                self.remove_item(k)
            else:
                v[k] = item[k]

    def get_total(self):
        return sum([v.price * v.qty for _, v in self.content.iteritems()])

    def get_num_items(self):
        return sum([v.qty for _, v in self.content.iteritems()])

    def remove_item(self, key):
        self.content.pop(key)


if __name__ == '__main__':
    item1 = Item(1, "Banana", 1., 1)
    item2 = Item(2, "Eggs", 1., 2)
    item3 = Item(3, "Donut", 1., 5)
    cart = Cart()
    cart.update(item1)
    cart.update(item2)
    cart.update(item3)
    print "You have %i items in your cart for a total of $%.02f" % (cart.get_num_items(), cart.get_total())
    cart.remove_item(1)
    print "You have %i items in your cart for a total of $%.02f" % (cart.get_num_items(), cart.get_total())
</snippet></ROW><ROW><id>13874077</id><snippet>You have 8 items in your cart for a total of $8.00
You have 7 items in your cart for a total of $7.00
</snippet></ROW><ROW><id>13874123</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>13874123</id><snippet>python manage.py datamigration myapp add_creator --freeze auth
</snippet></ROW><ROW><id>13874123</id><snippet>orm</snippet></ROW><ROW><id>13874123</id><snippet>def forwards(self, orm):
    suser = orm['auth.User'].objects.filter(is_superuser=True)[0]
    print 'suser=',suser,'of type=',type(suser)
    for category in orm['myapp.MyCategory'].objects.all():
        category.creator = suser
        category.save()
</snippet></ROW><ROW><id>13874855</id><snippet>secure_filename</snippet></ROW><ROW><id>13874855</id><snippet>werkzeug.utils.secure_filename(filename)</snippet></ROW><ROW><id>13874855</id><snippet>os.path.join()</snippet></ROW><ROW><id>13874855</id><snippet>&gt;&gt;&gt; secure_filename("My cool movie.mov")
'My_cool_movie.mov'
&gt;&gt;&gt; secure_filename("../../../etc/passwd")
'etc_passwd'
&gt;&gt;&gt; secure_filename(u'i contain cool \xfcml\xe4uts.txt')
'i_contain_cool_umlauts.txt'
</snippet></ROW><ROW><id>13874877</id><snippet>first()</snippet></ROW><ROW><id>13874877</id><snippet>value = first([f1, f2, f3, ..., fn], default='All failed')</snippet></ROW><ROW><id>13874877</id><snippet>#!/usr/bin/env


def first(flist, default=None):

    """ Try each function in `flist` until one does not throw an exception, and
    return the return value of that function. If all functions throw exceptions,
    return `default` 

    Args: 
        flist - list of functions to try
        default - value to return if all functions fail

    Returns:
        return value of first function that does not throw exception, or
        `default` if all throw exceptions.

    TODO: Also accept a list of (f, (exceptions)) tuples, where f is the
    function as above and (exceptions) is a tuple of exceptions that f should
    expect. This allows you to still re-raise unexpected exceptions.
    """

    for f in flist:
        try:
            return f()
        except:
            continue
    else:
        return default

# Testing.

def f():
    raise TypeError

def g():
    raise IndexError

def h():
    return 1


# We skip two exception-throwing functions and return value of the last.
assert first([f, g, h]) == 1

assert first([f, g, f], default='monty') == 'monty'
</snippet></ROW><ROW><id>13874885</id><snippet>setUp</snippet></ROW><ROW><id>13874885</id><snippet>tearDown</snippet></ROW><ROW><id>13874887</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13874887</id><snippet>if re.match("[A-Za-z0-9,.$:&lt;&gt;&amp;=-]|\n", char):
</snippet></ROW><ROW><id>13874887</id><snippet>\r</snippet></ROW><ROW><id>13874933</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; html_doc = """
... &lt;html&gt;&lt;head&gt;&lt;title&gt;Test HTML page&lt;/title&gt;&lt;/head&gt;
... &lt;p class="title"&gt;&lt;b&gt;Test HTML page&lt;/b&gt;&lt;/p&gt;
...
... &lt;p class="links"&gt;Links:
... &lt;a href="./member.php?mode=&amp;g=user&amp;start=100"&gt;Next&lt;/a&gt;
... &lt;/p&gt;
... &lt;/html&gt;
... """

&gt;&gt;&gt; soup = BeautifulSoup(html_doc)
&gt;&gt;&gt; mylinks = soup.find_all("a", text="Next")
&gt;&gt;&gt; print mylinks
[&lt;a href="./member.php?mode=&amp;g=user&amp;start=100"&gt;Next&lt;/a&gt;]
</snippet></ROW><ROW><id>13875489</id><snippet>input.in</snippet></ROW><ROW><id>13875489</id><snippet>--output</snippet></ROW><ROW><id>13875489</id><snippet>default</snippet></ROW><ROW><id>13875489</id><snippet>const</snippet></ROW><ROW><id>13875489</id><snippet>default='default.out'</snippet></ROW><ROW><id>13875489</id><snippet>const</snippet></ROW><ROW><id>13875489</id><snippet>--output</snippet></ROW><ROW><id>13875489</id><snippet>--output</snippet></ROW><ROW><id>13875489</id><snippet>--output</snippet></ROW><ROW><id>13875489</id><snippet>stdout</snippet></ROW><ROW><id>13875792</id><snippet>csv</snippet></ROW><ROW><id>13875792</id><snippet>csv</snippet></ROW><ROW><id>13875792</id><snippet>with codecs.open(file_full_path, 'rU', 'UTF-16') as infile:
    with open(file_full_path + '.utf8', 'wb') as outfile:
        for line in infile:
            outfile.write(line.encode('utf8'))
</snippet></ROW><ROW><id>13875792</id><snippet>iconv</snippet></ROW><ROW><id>13875792</id><snippet> reader = csv.reader(open(file_full_path + '.utf8', 'rb'), delimiter='\t', quotechar='"')
 for row in reader:
     print [c.decode('utf8') for c in row]
</snippet></ROW><ROW><id>13876014</id><snippet>*.txt</snippet></ROW><ROW><id>13876014</id><snippet>file1.txt file2.txt ...</snippet></ROW><ROW><id>13876014</id><snippet>*.txt</snippet></ROW><ROW><id>13876014</id><snippet>[~] ls "*.py"                                                                  
ls: cannot access *.py: No such file or directory
[~] ls *.py                                                                    
file1.py  file2.py file3.py
</snippet></ROW><ROW><id>13876014</id><snippet>glob</snippet></ROW><ROW><id>13876014</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('/etc/r*.conf')
['/etc/request-key.conf', '/etc/resolv.conf', '/etc/rc.conf']
</snippet></ROW><ROW><id>13876273</id><snippet>index</snippet></ROW><ROW><id>13876273</id><snippet># foo.py
from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
from zope.publisher.browser import BrowserPage
class FooView(BrowserPage):
    index = ViewPageTemplateFile('foo.pt')
</snippet></ROW><ROW><id>13876273</id><snippet>class FooView(BrowserPage):
    index = ViewPageTemplateFile('foo.pt')
    def __call__(self):
        self.update()
        return self.index()

    def update(self):
        self.portal_catalog = ...  # initialize code
</snippet></ROW><ROW><id>13876273</id><snippet>&lt;configure xmlns:browser="http://namespaces.zope.org/browser"&gt;
  &lt;browser:page
    …
    template="foo.pt"
    …
    /&gt;
&lt;/configure&gt;
</snippet></ROW><ROW><id>13876407</id><snippet> mydict = {"\s+":" ", ";":",", "a.m":"AM","x":"y"}
 mystr = "M-Th    5:30 am-10 pm; F    5:30 a.m-10:30 p.m, Sa 10:30-10:30, Su 10:30-10 x y z x"

 for k, v in mydict.iteritems():
    mystr = mystr.replace(k, v)

 print mystr
</snippet></ROW><ROW><id>13876407</id><snippet>M-Th    5:30 am-10 pm, F    5:30 AM-10:30 p.m, Sa 10:30-10:30, Su 10:30-10 y y z y
</snippet></ROW></DATA>