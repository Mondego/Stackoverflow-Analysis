<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>12459675</id><snippet>key</snippet></ROW><ROW><id>12459675</id><snippet>from operator import itemgetter

max(filter(lambda a: a[2] &gt;= 100, yourlist), key=itemgetter(1))
</snippet></ROW><ROW><id>12459675</id><snippet>max((t for t in yourlist if t[2] &gt;= 100), key=itemgetter(1))
</snippet></ROW><ROW><id>12459675</id><snippet>&gt;&gt;&gt; yourlist = [(1, 2, 300), (2, 3, 400), (3, 6, 50)]
&gt;&gt;&gt; max((t for t in yourlist if t[2] &gt;= 100), key=itemgetter(1))
(2, 3, 400)
&gt;&gt;&gt; max(filter(lambda a: a[2] &gt;= 100, yourlist), key=itemgetter(1))
(2, 3, 400)
</snippet></ROW><ROW><id>12459675</id><snippet>ValueError</snippet></ROW><ROW><id>12459675</id><snippet>try:
    return max(filter(lambda a: a[2] &gt;= 100, yourlist), key=itemgetter(1))
except ValueError:
    # Return a default
    return (0, 0, 0)
</snippet></ROW><ROW><id>12459973</id><snippet>csv</snippet></ROW><ROW><id>12459973</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; import csv
&gt;&gt;&gt; data = StringIO('name,phone,"addres 1, address 2",foo,bar')
&gt;&gt;&gt; for row in csv.reader(data):
...     print row
... 
['name', 'phone', 'addres 1, address 2', 'foo', 'bar']
</snippet></ROW><ROW><id>12460626</id><snippet> stv = AHvector(st)
</snippet></ROW><ROW><id>12460626</id><snippet>st</snippet></ROW><ROW><id>12460626</id><snippet>init</snippet></ROW><ROW><id>12460626</id><snippet>st</snippet></ROW><ROW><id>12460626</id><snippet> self.el = mat # Instead of EdgeList(mat)?
</snippet></ROW><ROW><id>12460626</id><snippet>st</snippet></ROW><ROW><id>12460626</id><snippet>testmat</snippet></ROW><ROW><id>12460667</id><snippet>[]</snippet></ROW><ROW><id>12460667</id><snippet>__getitem__</snippet></ROW><ROW><id>12460667</id><snippet>__getitem__</snippet></ROW><ROW><id>12460667</id><snippet>[...]</snippet></ROW><ROW><id>12460667</id><snippet>class getDict(dict):
   def __getitem__(self,key):
       if key in self:
          return dict.__getitem__(self,key)
       else:
          return None
</snippet></ROW><ROW><id>12460667</id><snippet>return dict.get(self,key,None)</snippet></ROW><ROW><id>12460879</id><snippet>html</snippet></ROW><ROW><id>12460879</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; ET.tostring(ET.fromstring('&lt;mytag/&gt;'), method='html')
'&lt;mytag&gt;&lt;/mytag&gt;'
</snippet></ROW><ROW><id>12460879</id><snippet>write()</snippet></ROW><ROW><id>12460879</id><snippet>tostring()</snippet></ROW><ROW><id>12460879</id><snippet>method</snippet></ROW><ROW><id>12460879</id><snippet>html</snippet></ROW><ROW><id>12460879</id><snippet>&lt;link/&gt;</snippet></ROW><ROW><id>12460879</id><snippet>&lt;input/&gt;</snippet></ROW><ROW><id>12460879</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>12461237</id><snippet>self.default</snippet></ROW><ROW><id>12461237</id><snippet>import argparse
import sys

class Extender(argparse.Action):
    def __call__(self,parser,namespace,values,option_strings=None):
        #Need None here incase `argparse.SUPPRESS` was supplied for `dest`
        dest = getattr(namespace,self.dest,None) 
        #print dest,self.default,values,option_strings
        if(not hasattr(dest,'extend') or dest == self.default):
            dest = []
            setattr(namespace,self.dest,dest)
            #if default isn't set to None, this method might be called
            # with the default as `values` for other arguements which
            # share this destination.
            parser.set_defaults(**{self.dest:None}) 

        try:
            dest.extend(values)
        except ValueError:
            dest.append(values)

        #another option:
        #if not isinstance(values,basestring):
        #    dest.extend(values)
        #else:
        #    dest.append(values) #It's a string.  Oops.

def new_parser(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('foo', nargs='*',action=Extender)
    parser.add_argument('--foo', nargs='*', dest='foo', action=Extender)
    parser.set_defaults(foo = [['spam']])
    return parser.parse_args(args.split())

tests = {'a b c --foo 1 --foo 2 --foo 3':['a','b','c','1','2','3'],
         '':[['spam']],
         'a b c --foo 1 2 3':['a','b','c','1','2','3'],
         '--foo 1':['1'],
         'a':['a']}

for s,r in tests.items():
    print ( "parsing: {0}".format(s) )
    args = new_parser(s)
    if(args.foo != r):
        print ("ERROR")
        print (args.foo)
        print (r)
        sys.exit(1)
    print ( args )
    print ('*'*80)
</snippet></ROW><ROW><id>12461237</id><snippet>parser.set_defaults(...)</snippet></ROW><ROW><id>12461237</id><snippet>foo</snippet></ROW><ROW><id>12461400</id><snippet>out = 0
for bit in bitlist:
    out = (out &lt;&lt; 1) | bit
</snippet></ROW><ROW><id>12461400</id><snippet>&gt;&gt;&gt; def intcaststr(bitlist):
...     return int("".join(str(i) for i in bitlist), 2)
... 
&gt;&gt;&gt; def intcastlookup(bitlist):
...     return int(''.join('01'[i] for i in bitlist), 2)
... 
&gt;&gt;&gt; def shifting(bitlist):
...     out = 0
...     for bit in bitlist:
...         out = (out &lt;&lt; 1) | bit
...     return out
... 
&gt;&gt;&gt; timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import intcaststr as convert', number=100000)
0.5659139156341553
&gt;&gt;&gt; timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import intcastlookup as convert', number=100000)
0.4642159938812256
&gt;&gt;&gt; timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import shifting as convert', number=100000)
0.1406559944152832
</snippet></ROW><ROW><id>12461570</id><snippet>class deprecated_base_class(framework_meta):
    def __new__(meta, name, bases, attrs):
        for b in bases:
            if isinstance(b, deprecated_base_class):
                warning = getattr(b, '__deprecation_warning__', '%(class)s is deprecated')
                warn(warning % {'class': b.__name__}, DeprecationWarning, stacklevel=2)
        return super(deprecated_base_class, meta).__new__(meta, name, bases, attrs)
</snippet></ROW><ROW><id>12461608</id><snippet>dateutil</snippet></ROW><ROW><id>12461608</id><snippet>%z</snippet></ROW><ROW><id>12461608</id><snippet>&gt;&gt;&gt; s = '13/Sep/2012:06:27:18 +0200'
&gt;&gt;&gt; dateutil.parser.parse(s.replace(':', ' ', 1))
datetime.datetime(2012, 9, 13, 6, 27, 18, tzinfo=tzoffset(None, 7200))
</snippet></ROW><ROW><id>12461608</id><snippet>replace</snippet></ROW><ROW><id>12461621</id><snippet>plt.imshow(ifftn(fftn(procrustes(temp,img.shape))).real)

plt.imshow(ifftn(fftn(temp,shape=img.shape)).real)
</snippet></ROW><ROW><id>12462030</id><snippet>heapq.merge()</snippet></ROW><ROW><id>12462030</id><snippet>from itertools import imap
from operator import itemgetter
import heapq

def extract_timestamp(line):
    """Extract timestamp and convert to a form that gives the
    expected result in a comparison
    """
    return line.split()[1] # for example

with open("log1.txt") as f1, open("log2.txt") as f2:
    sources = [f1, f2]
    with open("merged.txt", "w") as dest:
        decorated = [
            ((extract_timestamp(line), line) for line in f)
            for f in sources]
        merged = heapq.merge(*decorated)
        undecorated = imap(itemgetter(-1), merged)
        dest.writelines(undecorated)
</snippet></ROW><ROW><id>12462030</id><snippet>file.readlines()</snippet></ROW><ROW><id>12462030</id><snippet>heapq.merge()</snippet></ROW><ROW><id>12462030</id><snippet>itertools.imap()</snippet></ROW><ROW><id>12462083</id><snippet>.py</snippet></ROW><ROW><id>12462083</id><snippet>/usr/lib/pythonX.X/site-packages/</snippet></ROW><ROW><id>12462083</id><snippet>$ .
|-- happy_birthday/
    |-- __init__.py
    |-- art.txt
|-- MANIFEST.in
|-- README.rst
|-- setup.py
</snippet></ROW><ROW><id>12462365</id><snippet>#service.py
class Status(ComplexModel):
    statusCode = Integer
    statusMsg = String

class ResponseData(ComplexModel):
    status = Array(Status)
    version = Integer

class SoapService(ServiceBase):
    @rpc(String, _returns=ResponseData)
    def doSomething(ctx, name):

        obj_data = Servers.objects.get(host=name)
        if obj_data.status:
            my_statusCode = 1
            my_statusMsg = 'online'
        else:
            my_statusCode = 0
            my_statusMsg = 'offline'

        retval = ResponseData()
        retval.status = [{'statusCode': my_statusCode, 'statusMsg': my_statusMsg}]
        retval.version = 1
        return retval
</snippet></ROW><ROW><id>12462633</id><snippet>dtype</snippet></ROW><ROW><id>12462633</id><snippet>np.getbuffer(np.arange(10))
</snippet></ROW><ROW><id>12462633</id><snippet>dtype=int</snippet></ROW><ROW><id>12462633</id><snippet>np.arange</snippet></ROW><ROW><id>12462633</id><snippet>dtype=int</snippet></ROW><ROW><id>12462633</id><snippet>np.frombuffer(p)
</snippet></ROW><ROW><id>12462633</id><snippet>dtype=float</snippet></ROW><ROW><id>12462633</id><snippet>np.frombuffer</snippet></ROW><ROW><id>12462633</id><snippet>np.frombuffer(p, dtype=int)
</snippet></ROW><ROW><id>12462633</id><snippet>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>12462744</id><snippet>Document.createElement()</snippet></ROW><ROW><id>12462744</id><snippet>Element.setAttribute()</snippet></ROW><ROW><id>12462744</id><snippet>newdata = doc.createElement(u'data')
newdata.setAttribute(u'ID', u'http://someurldata4')
</snippet></ROW><ROW><id>12462744</id><snippet>newdata</snippet></ROW><ROW><id>12462744</id><snippet>Document.createTextNode()</snippet></ROW><ROW><id>12462744</id><snippet>Node.appendChild()</snippet></ROW><ROW><id>12462744</id><snippet>newdata.appendChild(doc.createTextNode(u'data4'))
</snippet></ROW><ROW><id>12462744</id><snippet>doc.documentElement.appendChild(newdata)
</snippet></ROW><ROW><id>12462934</id><snippet>for</snippet></ROW><ROW><id>12462934</id><snippet>data</snippet></ROW><ROW><id>12462934</id><snippet>open()</snippet></ROW><ROW><id>12462934</id><snippet>dirListing = os.listdir(os.getcwd())    
errorValues = []

rows = []                  # empty array of rows initially

for fname in dirListing:
    f = open(fname, 'rb')  # open in binary mode (see the doc)
    reader = csv.reader(f, delimiter=';')        

    errorColumn = []       # initialized for the file

    for row in reader:
        rows.append(row) #Store current csv file into a 2d list           
        if len(row) &gt; 34:
            errorColumn.append(row[34]) #Get position 34 of each row in 2D list

    errorValues.append(errorColumn)

    f.close()              # you should always close your files
</snippet></ROW><ROW><id>12462934</id><snippet>os.listdir()</snippet></ROW><ROW><id>12462934</id><snippet>if os.path.isfile(fname):
    ...
</snippet></ROW><ROW><id>12463178</id><snippet>And(p, q, r)</snippet></ROW><ROW><id>12463178</id><snippet>subs</snippet></ROW><ROW><id>12463178</id><snippet>values</snippet></ROW><ROW><id>12463178</id><snippet>    yield cond + [eval(expr).subs(values)]
</snippet></ROW><ROW><id>12463178</id><snippet>p&amp;q&amp;r
recieved input: ['p', 'q', 'r'] expr p&amp;q&amp;r
Truth table for 3variable(s)
(0, [True, True, True, True])
(1, [True, True, False, False])
(2, [True, False, True, False])
(3, [True, False, False, False])
(4, [False, True, True, False])
(5, [False, True, False, False])
(6, [False, False, True, False])
(7, [False, False, False, False])
</snippet></ROW><ROW><id>12463178</id><snippet>sympify</snippet></ROW><ROW><id>12463178</id><snippet>In [7]: expr = sympify("x &amp; y | z")

In [8]: expr
Out[8]: Or(z, And(x, y))
</snippet></ROW><ROW><id>12463178</id><snippet>In [9]: expr.free_symbols
Out[9]: set([x, z, y])
</snippet></ROW><ROW><id>12463178</id><snippet>itertools.product</snippet></ROW><ROW><id>12463178</id><snippet>cartes</snippet></ROW><ROW><id>12463178</id><snippet>sympy</snippet></ROW><ROW><id>12463178</id><snippet>In [12]: cartes([False, True], repeat=3)
Out[12]: &lt;itertools.product at 0xa24889c&gt;

In [13]: list(cartes([False, True], repeat=3))
Out[13]: 
[(False, False, False),
 (False, False, True),
 (False, True, False),
 (False, True, True),
 (True, False, False),
 (True, False, True),
 (True, True, False),
 (True, True, True)]
</snippet></ROW><ROW><id>12463178</id><snippet>sympify</snippet></ROW><ROW><id>12463178</id><snippet>eval</snippet></ROW><ROW><id>12463178</id><snippet>.subs()</snippet></ROW><ROW><id>12463178</id><snippet>values</snippet></ROW><ROW><id>12463178</id><snippet>def explore():
    expr_string = raw_input("Enter an expression: ")
    expr = sympify(expr_string)
    variables = sorted(expr.free_symbols)
    for truth_values in cartes([False, True], repeat=len(variables)):
        values = dict(zip(variables, truth_values))
        print sorted(values.items()), expr.subs(values)
</snippet></ROW><ROW><id>12463178</id><snippet>In [22]: explore()
Enter an expression: a &amp; (b | c)
[(a, False), (b, False), (c, False)] False
[(a, False), (b, False), (c, True)] False
[(a, False), (b, True), (c, False)] False
[(a, False), (b, True), (c, True)] False
[(a, True), (b, False), (c, False)] False
[(a, True), (b, False), (c, True)] True
[(a, True), (b, True), (c, False)] True
[(a, True), (b, True), (c, True)] True
</snippet></ROW><ROW><id>12463255</id><snippet>df['salary'] = series.reindex(df.index, level=0)
</snippet></ROW><ROW><id>12463428</id><snippet>def short2(gen,X):
    for x in gen:
        if x &gt; X: 
            return x
</snippet></ROW><ROW><id>12463428</id><snippet>def short3(gen,X):
    return next(x for x in gen if x &gt; X)
</snippet></ROW><ROW><id>12463428</id><snippet>def short(gen,X):
    n = next(gen)
    return n if n&gt;X else short(gen,X)
</snippet></ROW><ROW><id>12463567</id><snippet>--system-site-packages</snippet></ROW><ROW><id>12463567</id><snippet>--no-site-packages</snippet></ROW><ROW><id>12463567</id><snippet>lxml</snippet></ROW><ROW><id>12463567</id><snippet>$ virtualenv nositepackages
New python executable in nositepackages/bin/python
Installing setuptools............done.
Installing pip...c............done.
$ ./nositepackages/bin/python -c 'import lxml; print lxml.__package__'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named lxml
$ virtualenv --system-site-packages sitepackages
New python executable in sitepackages/bin/python
Installing setuptools............done.
Installing pip...............done.
$ ./sitepackages/bin/python -c 'import lxml; print lxml.__package__'
lxml
</snippet></ROW><ROW><id>12464277</id><snippet>(each is in a) and (a == True)</snippet></ROW><ROW><id>12464277</id><snippet>&gt;&gt;&gt; 'a' in ['a'] == True
False
&gt;&gt;&gt; ('a' in ['a']) and (['a'] == True)
False
&gt;&gt;&gt; ('a' in ['a']) == True
True
</snippet></ROW><ROW><id>12464277</id><snippet>True</snippet></ROW><ROW><id>12464277</id><snippet>if each not in a:
</snippet></ROW><ROW><id>12464905</id><snippet>callback</snippet></ROW><ROW><id>12464905</id><snippet>import sys
import functools
from optparse import OptionParser


bad_option = 'BAD OPTION'

def store(option, opt, value, parser, dest, val):
    """Set option's destination *dest* to *val*  if there are no conflicting options."""
    list_name = dest + '_options_list'
    try:
        # if this option is a conflict, save its name and set the value to bad_option
        getattr(parser.values, list_name).append(opt)
        setattr(parser.values, dest, bad_option)
    except AttributeError:
        # no conflicts, set the option value and add the options list
        setattr(parser.values, dest, val)
        setattr(parser.values, list_name, [opt])

store_true = functools.partial(store, val=True)
store_false = functools.partial(store, val=False)


parser = OptionParser()
parser.add_option('-v', '--verbose',
                  action='callback', callback=store_true,
                  help='Increase output verbosity',
                  callback_kwargs={'dest': 'verbose'})

parser.add_option('-q', '--quiet',
                  action='callback', callback=store_false,
                  help='Decrease output verbosity',
                  callback_kwargs={'dest': 'verbose'})

opts, args = parser.parse_args()

# detects all conflicting options for all destinations
found = False
for dest in ('verbose',):
    if getattr(opts, dest) == bad_option:
        conflicting_opts = ', '.join(getattr(opts, dest + '_options_list'))
        print('Conflicting options %s for destination %s'
              % (conflicting_opts, dest))
        found = True

if found:
    parser.print_usage()
    sys.exit(2)
</snippet></ROW><ROW><id>12464905</id><snippet>$ python testing_optparse.py -v -q
Conflicting options -v, -q for destination verbose
Usage: prova_optparse.py [options]
</snippet></ROW><ROW><id>12464905</id><snippet>OptionValueError</snippet></ROW><ROW><id>12464905</id><snippet>parser.rargs</snippet></ROW><ROW><id>12465064</id><snippet>SocketServer.ThreadingTCPServer.__init__(self, address, handler)</snippet></ROW><ROW><id>12465064</id><snippet>self.socket = SSL.Connection(ctx, socket.socket(self.address_family, self.socket_type))
</snippet></ROW><ROW><id>12465064</id><snippet>SocketServer.ThreadingTCPServer.__init__(self, address, handler, bind_and_activate=False)</snippet></ROW><ROW><id>12465064</id><snippet>self.server_bind()</snippet></ROW><ROW><id>12465064</id><snippet>self.server_activate()</snippet></ROW><ROW><id>12465064</id><snippet>class SSLThreadingTCPServer(SocketServer.ThreadingTCPServer):
    def __init__(self, address, handler):
        SocketServer.ThreadingTCPServer.__init__(self, address, handler, bind_and_activate=False)

        ctx = SSL.Context(SSL.SSLv23_METHOD)

        #ctx.use_privatekey_file(KEY_PATH)
        #ctx.use_certificate_file(CERTIFICATE_PATH)
        self.socket = SSL.Connection(ctx, socket.socket(self.address_family, self.socket_type))
        self.server_bind()
        self.server_activate()


        print "Serving:", address[0], "on port:", address[1]
</snippet></ROW><ROW><id>12465268</id><snippet>__cmp__</snippet></ROW><ROW><id>12465268</id><snippet>__gt__</snippet></ROW><ROW><id>12465356</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>12465356</id><snippet>from multiprocessing import Pool

def increment(x):
    return x + 1

def decrement(x):
    return x - 1

if __name__ == '__main__':
    pool = Pool(processes=2)
    res1 = pool.map_async(increment, range(10))
    res2 = pool.map_async(decrement, range(10))

    print res1.get(timeout=1)
    print res2.get(timeout=1)
</snippet></ROW><ROW><id>12465424</id><snippet>[v for i, v in enumerate(l) if i in idx]
</snippet></ROW><ROW><id>12465424</id><snippet>idx</snippet></ROW><ROW><id>12465424</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>12465424</id><snippet>import operator
operator.itemgetter(*idx)(l)
</snippet></ROW><ROW><id>12465424</id><snippet>[l[i] for i in idx]</snippet></ROW><ROW><id>12465424</id><snippet>idx</snippet></ROW><ROW><id>12465424</id><snippet>l</snippet></ROW><ROW><id>12465424</id><snippet>idx</snippet></ROW><ROW><id>12465424</id><snippet>l</snippet></ROW><ROW><id>12465861</id><snippet>matplotlib.backends.backend_qt4agg</snippet></ROW><ROW><id>12465861</id><snippet>FigureCanvasQTAgg</snippet></ROW><ROW><id>12465861</id><snippet>NavigationToolbar2QTAgg</snippet></ROW><ROW><id>12465861</id><snippet>Figure</snippet></ROW><ROW><id>12465861</id><snippet>Navigation</snippet></ROW><ROW><id>12465861</id><snippet>import sys
from PyQt4 import QtGui

from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
import matplotlib.pyplot as plt

import random

class Window(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        # a figure instance to plot on
        self.figure = plt.figure()

        # this is the Canvas Widget that displays the `figure`
        # it takes the `figure` instance as a parameter to __init__
        self.canvas = FigureCanvas(self.figure)

        # this is the Navigation widget
        # it takes the Canvas widget and a parent
        self.toolbar = NavigationToolbar(self.canvas, self)

        # Just some button connected to `plot` method
        self.button = QtGui.QPushButton('Plot')
        self.button.clicked.connect(self.plot)

        # set the layout
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.toolbar)
        layout.addWidget(self.canvas)
        layout.addWidget(self.button)
        self.setLayout(layout)

    def plot(self):
        ''' plot some random stuff '''
        # random data
        data = [random.random() for i in range(10)]

        # create an axis
        ax = self.figure.add_subplot(111)

        # discards the old graph
        ax.hold(False)

        # plot data
        ax.plot(data, '*-')

        # refresh canvas
        self.canvas.draw()

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    main = Window()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12465878</id><snippet>def getObjectFromLink(url):
    global r
    obj=praw.objects.Submission.get_info(r, url)
    if len(url.split('/'))==6:
        return obj
    else:
        return obj.comments[0]
</snippet></ROW><ROW><id>12465949</id><snippet>&gt;&gt;&gt; def foo(a,b):
...     print a
...     print b
... 
&gt;&gt;&gt; foo(b=2,a=1)
</snippet></ROW><ROW><id>12466078</id><snippet>.isdigit()</snippet></ROW><ROW><id>12466078</id><snippet>&gt;&gt;&gt; '123'.isdigit()
True
&gt;&gt;&gt; '1a23'.isdigit()
False
</snippet></ROW><ROW><id>12466256</id><snippet>boolean</snippet></ROW><ROW><id>12466256</id><snippet>print uses_all('facebook', 'd')
</snippet></ROW><ROW><id>12466256</id><snippet>uses_all</snippet></ROW><ROW><id>12466256</id><snippet>False
None
</snippet></ROW><ROW><id>12466256</id><snippet>def uses_all(word, allused):
    return all(e in word for e in allused)
</snippet></ROW><ROW><id>12466256</id><snippet>any</snippet></ROW><ROW><id>12466293</id><snippet>sniff</snippet></ROW><ROW><id>12466293</id><snippet>a = sniff(...)
for packet in a:
    if HTTPResponse in packet:
        packet.show()
</snippet></ROW><ROW><id>12466346</id><snippet>mkdir</snippet></ROW><ROW><id>12466346</id><snippet>os.mkdir</snippet></ROW><ROW><id>12466346</id><snippet>mkdir</snippet></ROW><ROW><id>12466346</id><snippet>mkdir</snippet></ROW><ROW><id>12466358</id><snippet>play()</snippet></ROW><ROW><id>12466358</id><snippet>try</snippet></ROW><ROW><id>12466358</id><snippet>except</snippet></ROW><ROW><id>12466358</id><snippet>if next in ("yes", "y"):
    try:
        play()
    except KeyboardInterrupt:
        print "Goodbye!"
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)
elif next is None:
    try:
        play()
    except KeyboardInterrupt:
        print "Goodbye!"
    except Exception:
        traceback.print_exc(file=sys.stdout)
        sys.exit(0)
else:
    sys.exit(0)
</snippet></ROW><ROW><id>12466358</id><snippet>None</snippet></ROW><ROW><id>12466358</id><snippet>is</snippet></ROW><ROW><id>12466358</id><snippet>if</snippet></ROW><ROW><id>12466358</id><snippet>next == "yes" or "y"</snippet></ROW><ROW><id>12466358</id><snippet>next == "yes"</snippet></ROW><ROW><id>12466358</id><snippet>"y"</snippet></ROW><ROW><id>12466358</id><snippet>or</snippet></ROW><ROW><id>12466358</id><snippet>"y"</snippet></ROW><ROW><id>12466358</id><snippet>True</snippet></ROW><ROW><id>12466358</id><snippet>play()</snippet></ROW><ROW><id>12466503</id><snippet>.</snippet></ROW><ROW><id>12466503</id><snippet>[...]</snippet></ROW><ROW><id>12466503</id><snippet>re.DOTALL</snippet></ROW><ROW><id>12466503</id><snippet>regex = re.compile("guys.*$", re.DOTALL)
</snippet></ROW><ROW><id>12466503</id><snippet>.</snippet></ROW><ROW><id>12466503</id><snippet>\n</snippet></ROW><ROW><id>12466503</id><snippet>regex = re.compile("guys(?:.|\n)*$")
</snippet></ROW><ROW><id>12466503</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; stri = "Hello guys.\nHow are you doing?\nI hope you have sweet dreams tonight."
&gt;&gt;&gt; regex = re.compile("guys.*$", re.DOTALL)
&gt;&gt;&gt; print regex.findall(stri)
['guys.\nHow are you doing?\nI hope you have sweet dreams tonight.']
</snippet></ROW><ROW><id>12466507</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'score:0.86|taxid:9606(Human)|intact:EBI-999900'
&gt;&gt;&gt; re.search(r'taxid:(\d+)', s).group(1)
'9606'
</snippet></ROW><ROW><id>12466507</id><snippet>re.findall</snippet></ROW><ROW><id>12466507</id><snippet>&gt;&gt;&gt; re.findall(r'taxid:(\d+)', s)
['9606']
</snippet></ROW><ROW><id>12466554</id><snippet> A
|  \
B1  B2
|   |  \
A11 A21 A22
</snippet></ROW><ROW><id>12466828</id><snippet>con_a.execute("INSERT INTO table2 (variable1, variable2) VALUES(?, ?)", *texts[:2])
con_a.commit()
</snippet></ROW><ROW><id>12466828</id><snippet>params = [ ('A', 1), ('B', 2) ]
con_a.executemany("insert into t(name, id) values (?, ?)", params)
con_a.commit()
</snippet></ROW><ROW><id>12466926</id><snippet>Tweet</snippet></ROW><ROW><id>12466926</id><snippet>id_str</snippet></ROW><ROW><id>12466926</id><snippet>print tweet['id_str']
</snippet></ROW><ROW><id>12466926</id><snippet>pprint.pprint()</snippet></ROW><ROW><id>12466926</id><snippet>import pprint

pprint.pprint(tweet)
</snippet></ROW><ROW><id>12466926</id><snippet>&gt;&gt;&gt; from twython import Twython
&gt;&gt;&gt; t = Twython()
&gt;&gt;&gt; res = t.search(q='python')
&gt;&gt;&gt; res.keys()
[u'next_page', u'completed_in', u'max_id_str', u'since_id_str', u'refresh_url', u'results', u'since_id', u'results_per_page', u'query', u'max_id', u'page']
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(res[u'results'][0])
{u'created_at': u'Mon, 17 Sep 2012 21:01:12 +0000',
 u'from_user': u'Me_Craay_GOOFY',
 u'from_user_id': 230100184,
 u'from_user_id_str': u'230100184',
 u'from_user_name': u'\u06deSuperFLY_PUER\u06de\u2122',
 u'geo': None,
 u'id': 247802407529115649,
 u'id_str': u'247802407529115649',
 u'iso_language_code': u'en',
 u'metadata': {u'result_type': u'recent'},
 u'profile_image_url': u'http://a0.twimg.com/profile_images/2617747450/345616051_normal.jpg',
 u'profile_image_url_https': u'https://si0.twimg.com/profile_images/2617747450/345616051_normal.jpg',
 u'source': u'&lt;a href="http://globalgrind.com"&gt;UncleUber for Blackberry&lt;/a&gt;',
 u'text': u'RT @Mr_Oyato: #ViolentPrayers May the python of breakthrough swallow you and your household today.',
 u'to_user': None,
 u'to_user_id': 0,
 u'to_user_id_str': u'0',
 u'to_user_name': None}
&gt;&gt;&gt; res[u'results'][0]['id_str']
u'247802407529115649'
</snippet></ROW><ROW><id>12466941</id><snippet>urlopen</snippet></ROW><ROW><id>12466941</id><snippet>urlopen</snippet></ROW><ROW><id>12466948</id><snippet>push</snippet></ROW><ROW><id>12466948</id><snippet>pop</snippet></ROW><ROW><id>12466948</id><snippet>check</snippet></ROW><ROW><id>12466948</id><snippet>Solver</snippet></ROW><ROW><id>12466948</id><snippet>Goal</snippet></ROW><ROW><id>12466948</id><snippet>push</snippet></ROW><ROW><id>12466948</id><snippet>pop</snippet></ROW><ROW><id>12466948</id><snippet>Goal</snippet></ROW><ROW><id>12466948</id><snippet>def copy_goal(g):
  return Tactic('skip')(g)[0]

x = Int('x')
g = Goal()
g.add(x &lt; 10)
g.add(x &gt; 0)
g1 = copy_goal(g)
g1.add(x != 5)
print g
print g1
</snippet></ROW><ROW><id>12466948</id><snippet>smt</snippet></ROW><ROW><id>12467094</id><snippet>"SELECT * FROM %s WHERE Filepath = '%s'" % ("tntfiles", path)
</snippet></ROW><ROW><id>12467213</id><snippet>GetCursorInfo</snippet></ROW><ROW><id>12467213</id><snippet>CURSORINFO</snippet></ROW><ROW><id>12467213</id><snippet>flags</snippet></ROW><ROW><id>12467327</id><snippet>&lt;DIV CLASS="ii"&gt;
</snippet></ROW><ROW><id>12467327</id><snippet>&lt;STRONG CLASS="L1"&gt;
</snippet></ROW><ROW><id>12467633</id><snippet>log</snippet></ROW><ROW><id>12467633</id><snippet>my.cnf</snippet></ROW><ROW><id>12467633</id><snippet>[mysqld]
log            = /var/log/mysql/queries.log
</snippet></ROW><ROW><id>12467724</id><snippet>bin
include
lib
</snippet></ROW><ROW><id>12467755</id><snippet>expression = "math.sin(v['x']) * v['y']"
exp_as_func = eval('lambda: ' + expression)
</snippet></ROW><ROW><id>12467755</id><snippet>exp_as_func()
</snippet></ROW><ROW><id>12467755</id><snippet>In [17]: %timeit eval(expression)
10000 loops, best of 3: 25.8 us per loop

In [18]: %timeit exp_as_func()
1000000 loops, best of 3: 541 ns per loop
</snippet></ROW><ROW><id>12467755</id><snippet>v</snippet></ROW><ROW><id>12467755</id><snippet>exp_as_func = eval('lambda v: ' + expression)
</snippet></ROW><ROW><id>12467755</id><snippet>exp_as_func(my_v)
</snippet></ROW><ROW><id>12467923</id><snippet>generate_points</snippet></ROW><ROW><id>12467923</id><snippet>np.fromiter</snippet></ROW><ROW><id>12467923</id><snippet>.reshape(size, -1)</snippet></ROW><ROW><id>12467923</id><snippet>points = np.fromiter(
    generate_points(data,labels,5)).reshape(size, -1)
</snippet></ROW><ROW><id>12468065</id><snippet>tokenize.generate_tokens</snippet></ROW><ROW><id>12468065</id><snippet>import tokenize
import token
import io

text = '''
x = 'hello there'  
if x == 'example "quotes" inside quotes' and y == 'another example': pass
'''


tokens = tokenize.generate_tokens(io.BytesIO(text).readline)
for toknum, tokval, (srow, scol), (erow, ecol), line in tokens:
    tokname = token.tok_name[toknum]
    print(tokname, tokval)
</snippet></ROW><ROW><id>12468065</id><snippet>('NL', '\n')
('NAME', 'x')
('OP', '=')
('STRING', "'hello there'")
('NEWLINE', '\n')
('NAME', 'if')
('NAME', 'x')
('OP', '==')
('STRING', '\'example "quotes" inside quotes\'')
('NAME', 'and')
('NAME', 'y')
('OP', '==')
('STRING', "'another example'")
('OP', ':')
('NAME', 'pass')
('NEWLINE', '\n')
('ENDMARKER', '')
</snippet></ROW><ROW><id>12468065</id><snippet>tokname</snippet></ROW><ROW><id>12468091</id><snippet>while True:
    mydir = next_dir_name()
    try:
        os.makedirs(mydir)
        break
    except OSError, e:
        if e.errno != 17:
            raise   
        # time.sleep might help here
        pass
</snippet></ROW><ROW><id>12468253</id><snippet>my_dict = {1L: (1L, "bar", "foo/bar"),
           2L: (2L, "app", "some/app")}
</snippet></ROW><ROW><id>12468253</id><snippet>&gt;&gt;&gt; my_dict[1]
(1L, 'bar', 'foo/bar')
</snippet></ROW><ROW><id>12468253</id><snippet>my_dict = {row[0]: row for row in my_list}
</snippet></ROW><ROW><id>12468253</id><snippet>my_dict = dict((row[0], row) for row in my_list)
</snippet></ROW><ROW><id>12468274</id><snippet>str = unicode(str, errors='replace')
</snippet></ROW><ROW><id>12468274</id><snippet>str = unicode(str, errors='ignore')
</snippet></ROW><ROW><id>12468412</id><snippet>used_flag = FALSE</snippet></ROW><ROW><id>12468412</id><snippet>READ COMMITTED</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE</snippet></ROW><ROW><id>12468412</id><snippet>SERIALIZABLE</snippet></ROW><ROW><id>12468412</id><snippet>CREATE TABLE paths (
    used_flag boolean not null default 'f',
    when_entered timestamptz not null default current_timestamp,
    data text not null
);

INSERT INTO paths (data) VALUES
('aa'),('bb'),('cc'),('dd');
</snippet></ROW><ROW><id>12468412</id><snippet>SERIALIZABLE</snippet></ROW><ROW><id>12468412</id><snippet>BEGIN ISOLATION LEVEL SERIALIZABLE</snippet></ROW><ROW><id>12468412</id><snippet>BEGIN</snippet></ROW><ROW><id>12468412</id><snippet>SESSION 1             SESSION2         SESSION 3

BEGIN;
                                       BEGIN;

UPDATE      paths
    SET     used_flag = TRUE
    WHERE   used_flag = FALSE
    RETURNING data;

                      BEGIN;

                      INSERT INTO
                      paths(data)
                      VALUES
                      ('ee'),('ff');      

                      COMMIT;               
                                       UPDATE      paths
                                           SET     used_flag = TRUE
                                           WHERE   used_flag = FALSE
                                           RETURNING data;


                      BEGIN;

                      INSERT INTO
                      paths(data)
                      VALUES
                      ('gg'),('hh');      

                      COMMIT;        

COMMIT;
</snippet></ROW><ROW><id>12468412</id><snippet>READ COMMITTED</snippet></ROW><ROW><id>12468412</id><snippet>ee</snippet></ROW><ROW><id>12468412</id><snippet>ff</snippet></ROW><ROW><id>12468412</id><snippet>gg</snippet></ROW><ROW><id>12468412</id><snippet>hh</snippet></ROW><ROW><id>12468412</id><snippet>SERIALIZABLE</snippet></ROW><ROW><id>12468412</id><snippet>ERROR:  could not serialize access due to concurrent update</snippet></ROW><ROW><id>12468412</id><snippet>SERIALIZABLE</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE      paths
    SET     used_flag = TRUE
    WHERE entry_id = (
        SELECT entry_id
        FROM paths 
        WHERE used_flag = FALSE
        ORDER BY when_entered
        LIMIT 1
    )
    AND used_flag = FALSE
    RETURNING data;
</snippet></ROW><ROW><id>12468412</id><snippet>UPDATE      paths
    SET     used_flag = TRUE
    WHERE entry_id = (
        SELECT min(entry_id)
        FROM paths 
        WHERE used_flag = FALSE
    )
    AND used_flag = FALSE
    RETURNING data;
</snippet></ROW><ROW><id>12468412</id><snippet>AND used_flag = FALSE</snippet></ROW><ROW><id>12468412</id><snippet>entry_id SERIAL PRIMARY KEY</snippet></ROW><ROW><id>12468412</id><snippet>paths</snippet></ROW><ROW><id>12468412</id><snippet>LOCK TABLE paths</snippet></ROW><ROW><id>12468452</id><snippet>str.replace()</snippet></ROW><ROW><id>12469044</id><snippet>game</snippet></ROW><ROW><id>12469044</id><snippet>from framework import game

game.foo()
</snippet></ROW><ROW><id>12469044</id><snippet>import game</snippet></ROW><ROW><id>12469044</id><snippet>game</snippet></ROW><ROW><id>12469044</id><snippet>util</snippet></ROW><ROW><id>12469044</id><snippet>game</snippet></ROW><ROW><id>12469044</id><snippet>render</snippet></ROW><ROW><id>12469044</id><snippet>framework</snippet></ROW><ROW><id>12469044</id><snippet>framework</snippet></ROW><ROW><id>12469044</id><snippet>sys.path</snippet></ROW><ROW><id>12469044</id><snippet>import sys
sys.path.append("framework")

import game
</snippet></ROW><ROW><id>12469167</id><snippet>foo.FOO</snippet></ROW><ROW><id>12469167</id><snippet>_foo</snippet></ROW><ROW><id>12469167</id><snippet>class _foo(list):
    _init = False
    def __init__(self):
        if self._init:
            list.__init__(self)
        else:
            list.__init__(self, ['bar', 'baz', 'zog'])

    def __call__(self, item=None):
        if item is None:
            return self
        return self[item]

FOO = _foo()
</snippet></ROW><ROW><id>12469167</id><snippet>&gt;&gt;&gt; FOO()
['bar', 'baz', 'zog']
&gt;&gt;&gt; FOO(0)
'bar'
&gt;&gt;&gt; FOO
['bar', 'baz', 'zog']
</snippet></ROW><ROW><id>12469381</id><snippet>test1:
    a:
      a1:
        a2: {a3: 0, b3: 0, c3: 0}
        b2: {a3: 0, b3: 0, c3: 0}
        c2: {a3: 0, b3: 0, c3: 0}
      b1:
        a2: {a3: 0, b3: 0, c3: 0}
        b2: {a3: 0, b3: 0, c3: 0}
        c2: {a3: 0, b3: 0, c3: 0}
      c1:
        a2: {a3: 0, b3: 0}
</snippet></ROW><ROW><id>12469381</id><snippet>entry: &amp;aliasentry
  a2: {a3: 0, b3: 0, c3: 0}
  b2: {a3: 0, b3: 0, c3: 0}
  c2: {a3: 0, b3: 0, c3: 0}

test1:
    a:
      a1: *aliasentry
      b1: *aliasentry
      c1: {a2: {a3: 0, b3: 0}}
</snippet></ROW><ROW><id>12469695</id><snippet>while True:
    attempt = raw_input("Enter a letter:")
    if attempt in word:
        print "That was in the word", word.count(attempt), "times"
    else:
        print "That was not in the word"
</snippet></ROW><ROW><id>12469695</id><snippet>str</snippet></ROW><ROW><id>12469695</id><snippet>raw_input</snippet></ROW><ROW><id>12469695</id><snippet>raw_input</snippet></ROW><ROW><id>12469695</id><snippet>letters</snippet></ROW><ROW><id>12469695</id><snippet>word = "python"</snippet></ROW><ROW><id>12469695</id><snippet>word</snippet></ROW><ROW><id>12469695</id><snippet>in</snippet></ROW><ROW><id>12469695</id><snippet>count</snippet></ROW><ROW><id>12469712</id><snippet>list</snippet></ROW><ROW><id>12469712</id><snippet>list</snippet></ROW><ROW><id>12469712</id><snippet>group_name_ids = [g.id for g in form.cleaned_data['groups']]
group_id_count = len(group_name_ids)
</snippet></ROW><ROW><id>12469712</id><snippet>"groups"</snippet></ROW><ROW><id>12469712</id><snippet>group_count = len(form.cleaned_data["groups"])
</snippet></ROW><ROW><id>12469712</id><snippet>group_name_ids</snippet></ROW><ROW><id>12469712</id><snippet>len()</snippet></ROW><ROW><id>12469837</id><snippet>zmq.Poller</snippet></ROW><ROW><id>12469837</id><snippet>gevent-zeromq</snippet></ROW><ROW><id>12469910</id><snippet>atexit</snippet></ROW><ROW><id>12469910</id><snippet>import atexit

@atexit.register
def what_happened():
    # TODO: Implement this
    # get the time
    # get tracebacks via http://docs.python.org/library/sys.html#sys.exc_info
    #    and http://docs.python.org/library/traceback.html
    #
    # Attempt to write all of the above to a file
</snippet></ROW><ROW><id>12469910</id><snippet>/var/logs</snippet></ROW><ROW><id>12469952</id><snippet>requestToWebpage</snippet></ROW><ROW><id>12469952</id><snippet>Connection: Keep-Alive</snippet></ROW><ROW><id>12470436</id><snippet>try:
    index = matrix.index(list(text))
except IndexError:
    index = 99999
</snippet></ROW><ROW><id>12470436</id><snippet>list(text)</snippet></ROW><ROW><id>12470436</id><snippet>list.index</snippet></ROW><ROW><id>12470436</id><snippet>==</snippet></ROW><ROW><id>12470436</id><snippet>IndexError</snippet></ROW><ROW><id>12470436</id><snippet>99999</snippet></ROW><ROW><id>12470436</id><snippet>index = matrix.index(list(text))</snippet></ROW><ROW><id>12470970</id><snippet>dict.keys()</snippet></ROW><ROW><id>12470970</id><snippet>dict_keys</snippet></ROW><ROW><id>12470970</id><snippet>vocab_rand = list(vocab_dict.keys())</snippet></ROW><ROW><id>12471049</id><snippet>Crypto.Cipher._DES</snippet></ROW><ROW><id>12471049</id><snippet>_DES.pyd</snippet></ROW><ROW><id>12471049</id><snippet>Crypto.Cipher</snippet></ROW><ROW><id>12471068</id><snippet>int</snippet></ROW><ROW><id>12471068</id><snippet>PyMPIComm_Get</snippet></ROW><ROW><id>12471068</id><snippet>mpi4py</snippet></ROW><ROW><id>12471232</id><snippet>class AddressValidator(self):
    def __init__(self):
        pass
    def __call__(self,address):
        # ...

validate_address = AdressValidator()
</snippet></ROW><ROW><id>12471232</id><snippet>class AddressValidator(self):
    def __init__(self):
        pass
    def validate(self,address):
        # ...

validate_adress = AdressValidator().validate
</snippet></ROW><ROW><id>12471272</id><snippet>import yaml

data = dict(
    A = 'a',
    B = dict(
        C = 'c',
        D = 'd',
        E = 'e',
    )
)

with open('data.yml', 'w') as outfile:
    outfile.write( yaml.dump(data, default_flow_style=True) )
</snippet></ROW><ROW><id>12471272</id><snippet>default_flow_style=True</snippet></ROW><ROW><id>12471272</id><snippet>A: a
B: {C: c, D: d, E: e}
</snippet></ROW><ROW><id>12471333</id><snippet>logging.info(list(super(Item, cls.all())))
</snippet></ROW><ROW><id>12471333</id><snippet>cls.all()</snippet></ROW><ROW><id>12471333</id><snippet>super</snippet></ROW><ROW><id>12471333</id><snippet>logging.info(list(super(Item, cls).all()))
</snippet></ROW><ROW><id>12471333</id><snippet>all</snippet></ROW><ROW><id>12471333</id><snippet>all</snippet></ROW><ROW><id>12471333</id><snippet>Model.all()</snippet></ROW><ROW><id>12471333</id><snippet>Query</snippet></ROW><ROW><id>12471333</id><snippet>list(query)</snippet></ROW><ROW><id>12471333</id><snippet>    query = super(Item, cls).all()
    query.order( order )
    ...
return list(query)
</snippet></ROW><ROW><id>12471333</id><snippet>return query</snippet></ROW><ROW><id>12471676</id><snippet>import types
isinstance(aaaa(), types.GeneratorType) # ==&gt; True
</snippet></ROW><ROW><id>12471676</id><snippet>yield</snippet></ROW><ROW><id>12471676</id><snippet>import inspect
inspect.isgeneratorfunction(aaaa) # ==&gt; True
</snippet></ROW><ROW><id>12471806</id><snippet>sys.getwindowsversion</snippet></ROW><ROW><id>12471806</id><snippet>&gt;&gt;&gt; sys.getwindowsversion()
sys.getwindowsversion(major=6, minor=1, build=7601, platform=2, service_pack='Service Pack 1')
</snippet></ROW><ROW><id>12472211</id><snippet>utf8_decode()</snippet></ROW><ROW><id>12472375</id><snippet>np.ravel</snippet></ROW><ROW><id>12472375</id><snippet>.shape</snippet></ROW><ROW><id>12472375</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.random_integers(0, 9, (3, 4))
&gt;&gt;&gt; a.shape
(3, 4)
&gt;&gt;&gt; print a
[[9 5 1 8]
 [3 1 3 1]
 [3 9 6 6]]
&gt;&gt;&gt; a.ravel()
array([9, 5, 1, 8, 3, 1, 3, 1, 3, 9, 6, 6])
&gt;&gt;&gt; list(a.ravel())
[9, 5, 1, 8, 3, 1, 3, 1, 3, 9, 6, 6]
</snippet></ROW><ROW><id>12472555</id><snippet>ax2.set_xticks([])</snippet></ROW><ROW><id>12472555</id><snippet>plt.show()</snippet></ROW><ROW><id>12472555</id><snippet>hold</snippet></ROW><ROW><id>12473017</id><snippet>r'\b(-?\d+)\s*:\s*(-?\d+)\b'
</snippet></ROW><ROW><id>12473017</id><snippet>\b</snippet></ROW><ROW><id>12473017</id><snippet>-</snippet></ROW><ROW><id>12473017</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; numpairs = re.compile(r'\b(-?\d+)\s*:\s*(-?\d+)\b')
&gt;&gt;&gt; example = '0:-83 1: -51 2: -69 3: -82 4: -85 8: -90 9: -69 QUAD'
&gt;&gt;&gt; numpairs.findall(example)
[('0', '-83'), ('1', '-51'), ('2', '-69'), ('3', '-82'), ('4', '-85'), ('8', '-90'), ('9', '-69')]
</snippet></ROW><ROW><id>12473017</id><snippet>import re
numpairs = re.compile(r'\b(-?\d+)\s*:\s*(-?\d+)\b')
with open('data.txt') as file:
    for line in file:
        for pair in numpairs.findall(line):
            print pair
</snippet></ROW><ROW><id>12473017</id><snippet>line.strip()</snippet></ROW><ROW><id>12473017</id><snippet>line[:-1]</snippet></ROW><ROW><id>12473032</id><snippet>C</snippet></ROW><ROW><id>12473032</id><snippet>alpha</snippet></ROW><ROW><id>12473032</id><snippet>RandomForestClassifier</snippet></ROW><ROW><id>12473032</id><snippet>ExtraTreesClassifier</snippet></ROW><ROW><id>12473032</id><snippet>compute_importances</snippet></ROW><ROW><id>12473088</id><snippet>python manage.py reset &lt;your_app&gt;
</snippet></ROW><ROW><id>12473462</id><snippet>s = [1 , 4 ,6 , 9  ,10 ]
import bisect

x = 5
n = bisect.bisect_left(s, x)
if s[n:n+1] == [x]:
    print x, 'is in the list'
else:
    print x, 'comes between', s[n-1:n], 'and', s[n:n+1]
</snippet></ROW><ROW><id>12473653</id><snippet>self.date().weekday()</snippet></ROW><ROW><id>12473653</id><snippet>isoweekday()</snippet></ROW><ROW><id>12473653</id><snippet>0</snippet></ROW><ROW><id>12473653</id><snippet>1</snippet></ROW><ROW><id>12473653</id><snippet>2</snippet></ROW><ROW><id>12473653</id><snippet>.isoweekday()</snippet></ROW><ROW><id>12473653</id><snippet>&gt;&gt;&gt; datetime.datetime.now().isoweekday()
2
</snippet></ROW><ROW><id>12473653</id><snippet>self.date().isoweekday()</snippet></ROW><ROW><id>12473653</id><snippet>weekday()</snippet></ROW><ROW><id>12473653</id><snippet>isocalendar()</snippet></ROW><ROW><id>12473863</id><snippet>value=1</snippet></ROW><ROW><id>12473863</id><snippet>self.value = 1</snippet></ROW><ROW><id>12473863</id><snippet>value</snippet></ROW><ROW><id>12473863</id><snippet>dir(object)</snippet></ROW><ROW><id>12473863</id><snippet>dir(self.theVariable)</snippet></ROW><ROW><id>12473913</id><snippet>interpolation='nearest'</snippet></ROW><ROW><id>12473913</id><snippet>interpolation='nearest'</snippet></ROW><ROW><id>12473913</id><snippet>imshow</snippet></ROW><ROW><id>12473913</id><snippet>jet</snippet></ROW><ROW><id>12473913</id><snippet>gray()</snippet></ROW><ROW><id>12474358</id><snippet>Project/src</snippet></ROW><ROW><id>12474358</id><snippet>import foo.analyse
</snippet></ROW><ROW><id>12474410</id><snippet>HttpResponse</snippet></ROW><ROW><id>12474410</id><snippet>POST</snippet></ROW><ROW><id>12474410</id><snippet>def Upload_File(request):
    form = Upload_File_Form(request.POST or None,
                            request.FILES or None)
    if request.method == 'POST':
        if form.is_valid():
            for f in request.FILES.getlist('file'):
                f.save()
                orgfilename = Files(orgname=f.name)
                orgfilename.save()
            return HttpResponseRedirect('success.html')
   return render_to_response('upload.html', {'form': form},
                             context_instance=RequestContext(request))
</snippet></ROW><ROW><id>12474410</id><snippet>context_instance</snippet></ROW><ROW><id>12474410</id><snippet>render_to_response</snippet></ROW><ROW><id>12474410</id><snippet>render</snippet></ROW><ROW><id>12474410</id><snippet>render(request, 'upload.html', {'form': form})
</snippet></ROW><ROW><id>12474410</id><snippet>request.FILES.get_list('file')</snippet></ROW><ROW><id>12474410</id><snippet>request.FILES.getlist('file')</snippet></ROW><ROW><id>12474461</id><snippet>def tick(self):
    flag = 0
    for event in pygame.event.get():
    ...
## call an instance of the protocol and sendLine ##
                    BlackClient(self.new_line(allhands)) ## this line does not work ##
## send allhands data ##
    ...
</snippet></ROW><ROW><id>12474461</id><snippet>BlackClient</snippet></ROW><ROW><id>12474461</id><snippet>sendLine</snippet></ROW><ROW><id>12474461</id><snippet>class Client(object):
    ...
    # this method is going to be replaced
    def sendLine(self, line):
        pass

    def tick(self):
        flag = 0
        for event in pygame.event.get():
            ...
            ## call sendLine, which is replaced by the sendLine method from the protocol ##
            self.sendLine(yourStuff)        

class BlackClient(ClientFactory):
    def __init__(self, client):
        # keep instance of client
        self.client = client

    def buildProtocol(self, addr):
        # give client.new_line method to protocol
        proto = BlackClientProtocol(self.client.new_line)
        # replace client's sendLine with proto.sendLine
        self.client.sendLine = proto.sendLine
        return proto

if __name__ == '__main__':
    c = Client()
    lc = LoopingCall(c.tick)
    lc.start(0.1)
    protocoll = 
    reactor.connectTCP('192.168.1.2', 6000, BlackClient(c))
    reactor.run()
</snippet></ROW><ROW><id>12474734</id><snippet>res = urllib.urlopen("http://www.iana.org/assignments/language-subtag-registry" )
http_message = res.info()
full = http_message.type # 'text/plain'
main = http_message.maintype # 'text'
</snippet></ROW><ROW><id>12474979</id><snippet>import os
import re
import sqlite3

DB_PATH = __name__ + '.db'

try:
    os.remove(DB_PATH)
except:
    pass


def re_fn(expr, item):
    reg = re.compile(expr, re.I)
    return reg.search(item) is not None

conn = sqlite3.connect(':memory:')
conn = sqlite3.connect(DB_PATH)
conn.create_function("REGEXP", 2, re_fn)
cursor = conn.cursor()

cursor.execute(
    'CREATE TABLE t1 (id INTEGER PRIMARY KEY, c1 TEXT)'
)
cursor.executemany(
    #'INSERT INTO t1 (c1) VALUES (?)', [('aaa"test"',),('blah',)]
    'INSERT INTO t1 (c1) VALUES (?)', [
        ('dupa / 1st Part',), ('cycki / 2nd Part',), ('fiut / 3rd Part',)
    ]
)
SEARCH_TERM = '3rd part'
cursor.execute(
    #'SELECT c1 FROM t1 WHERE c1 REGEXP ?',['2|3\w+part']
    'SELECT c1 FROM t1 WHERE c1 REGEXP ?',[SEARCH_TERM]
)
conn.commit()
data=cursor.fetchall()
print(data)



#
# sqlalchemy
#

import sqlalchemy as sa
import sqlalchemy.orm as orm
from sqlalchemy.ext.declarative import declarative_base

DSN = 'sqlite:///' + DB_PATH

engine = sa.create_engine(DSN, convert_unicode=True)

conn = engine.connect()
conn.connection.create_function('regexp', 2, re_fn)

db = orm.scoped_session(orm.sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))

Base = declarative_base(bind=engine)
meta = Base.metadata

class T1(Base):
    __table__ = sa.Table('t1', meta, autoload=True)

print(db.query(T1.c1).filter(T1.c1.op('regexp')(SEARCH_TERM)).all())
</snippet></ROW><ROW><id>12474979</id><snippet>...

conn = engine.connect()
@sa.event.listens_for(engine, "begin")
def do_begin(conn):
    conn.connection.create_function('regexp', 2, re_fn)

db = orm.scoped_session(orm.sessionmaker(autocommit=False,
                                         autoflush=False,
                                         bind=engine))

...
</snippet></ROW><ROW><id>12474995</id><snippet>print</snippet></ROW><ROW><id>12474995</id><snippet>print(arg)
</snippet></ROW><ROW><id>12475094</id><snippet>__add__</snippet></ROW><ROW><id>12475094</id><snippet>__mul__</snippet></ROW><ROW><id>12475094</id><snippet>class vec2:
    x = 0.0
    y = 0.0

    def __init__(self, x=0.0, y=0.0):
        self.x, self.y = x, y

    def __add__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        result = self.__class__(self.x, self.y)
        result.x += other.x
        result.y += other.y
        return result

    def __iadd__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        self.x += other.x
        self.y += other.y
        return self

    def __mul__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        result = self.__class__(self.x, self.y)
        result.x *= other.x
        result.y *= other.y
        return result

    def __imul__(self, other):
        if not isinstance(other, self.__class__):
            return NotImplemented
        self.x *= other.x
        self.y *= other.y
        return self
</snippet></ROW><ROW><id>12475094</id><snippet>__iadd__</snippet></ROW><ROW><id>12475094</id><snippet>__imul__</snippet></ROW><ROW><id>12475094</id><snippet>self</snippet></ROW><ROW><id>12475094</id><snippet>(x, y)</snippet></ROW><ROW><id>12475094</id><snippet>class foo:
    def __init__(self, position=(0.0, 0.0), velocity=(1.0, 1.0)):
        self.position = vec2()
        self.velocity = vec2(*velocity)

    def update(self, dt):
        if isinstance(dt, tuple):
            dt = vec2(*dt)
        self.position += self.velocity * dt;
</snippet></ROW><ROW><id>12475094</id><snippet>&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f.position.x, f.position.y
(0.0, 0.0)
&gt;&gt;&gt; f.update((1, 2))
&gt;&gt;&gt; f.position.x, f.position.y
(1.0, 2.0)
</snippet></ROW><ROW><id>12475095</id><snippet>pass</snippet></ROW><ROW><id>12475095</id><snippet>if state == False:
    print "Here I'm not good do stuff"
else:
    pass
#    print "I am good here but stuff might be needed to implement"
</snippet></ROW><ROW><id>12475292</id><snippet>ImportError</snippet></ROW><ROW><id>12475292</id><snippet>AttributeError</snippet></ROW><ROW><id>12475292</id><snippet>a</snippet></ROW><ROW><id>12475292</id><snippet>b</snippet></ROW><ROW><id>12475292</id><snippet>a</snippet></ROW><ROW><id>12475292</id><snippet>b</snippet></ROW><ROW><id>12475292</id><snippet>b</snippet></ROW><ROW><id>12475292</id><snippet>a</snippet></ROW><ROW><id>12475292</id><snippet>a</snippet></ROW><ROW><id>12475292</id><snippet>b</snippet></ROW><ROW><id>12475493</id><snippet>'*'</snippet></ROW><ROW><id>12475493</id><snippet>foo(*t)
</snippet></ROW><ROW><id>12475493</id><snippet>list</snippet></ROW><ROW><id>12475493</id><snippet>tuple</snippet></ROW><ROW><id>12475493</id><snippet>**</snippet></ROW><ROW><id>12475493</id><snippet>def foo(key=None,foo=None):
    pass #...

foo(**{key:1,foo:2})
</snippet></ROW><ROW><id>12476364</id><snippet>sys.path</snippet></ROW><ROW><id>12476364</id><snippet>import</snippet></ROW><ROW><id>12476364</id><snippet>import sys
sys.path.insert(0, 'your_path_here')
import custom_module
</snippet></ROW><ROW><id>12476368</id><snippet>node</snippet></ROW><ROW><id>12476368</id><snippet>value</snippet></ROW><ROW><id>12476368</id><snippet>None</snippet></ROW><ROW><id>12476368</id><snippet>colander.Invalid</snippet></ROW><ROW><id>12476551</id><snippet>file = ['page1.txt', 'page2.txt', 'page3.txt', 'page4.txt']
pagecount = len(file)
page = 1                    # initialize to a default page

if inp == '1':
    page = 1
    read(file[page-1])      # pages are 1-4, subscripts are 0-3

# ... pages 2-4 go here 

elif inp == '+':              # whatever key you use for Next
    page = min(page+1, pagecount)    # don't go beyond last page
    read(file[page-1])

elif inp == '-':              # switch statements use "if .. elif .. elif .. else"
    page = max(page-1, 1)
    read(file[page-1])
</snippet></ROW><ROW><id>12476825</id><snippet>@dec
def foo():
    pass
</snippet></ROW><ROW><id>12476825</id><snippet>def foo():
    pass
foo = dec(foo)
</snippet></ROW><ROW><id>12476825</id><snippet>func = dec(func)
</snippet></ROW><ROW><id>12476825</id><snippet>str</snippet></ROW><ROW><id>12476825</id><snippet>&gt;&gt;&gt; def remove_empty(fn):
...     def filtered(*args, **kwargs):
...         return filter(lambda x: x != '', fn(*args, **kwargs))
...     return filtered
... 
&gt;&gt;&gt; class WeirdString(str):
...     @remove_empty
...     def split(self, *args, **kwargs):
...         return super(WeirdString, self).split(*args, **kwargs)
... 
&gt;&gt;&gt; 'This decorator is unnecessary\n\n\n'.split('\n')
['This decorator is unnecessary', '', '', '']
&gt;&gt;&gt; WeirdString('This decorator is unnecessary\n\n\n').split('\n')
['This decorator is unnecessary']
</snippet></ROW><ROW><id>12476825</id><snippet>&gt;&gt;&gt; class WeirdString2(str):
...     split = remove_empty(str.split)
... 
&gt;&gt;&gt; WeirdString2('This decorator is unnecessary\n\n\n').split('\n')
['This decorator is unnecessary']
</snippet></ROW><ROW><id>12476918</id><snippet>return HttpResponse(status=204)
</snippet></ROW><ROW><id>12477152</id><snippet>full_output=1</snippet></ROW><ROW><id>12477152</id><snippet>x</snippet></ROW><ROW><id>12477152</id><snippet>y</snippet></ROW><ROW><id>12477152</id><snippet>x = x.astype(np.float64)</snippet></ROW><ROW><id>12477152</id><snippet>epsfcn</snippet></ROW><ROW><id>12477152</id><snippet>epsfcn=np.finfo(np.float32).eps</snippet></ROW><ROW><id>12477173</id><snippet>unique</snippet></ROW><ROW><id>12477173</id><snippet>data</snippet></ROW><ROW><id>12477173</id><snippet>(d['A'], d['B'])</snippet></ROW><ROW><id>12477173</id><snippet>d</snippet></ROW><ROW><id>12477173</id><snippet>unique = {}
for d in data:
    key = (d['A'],d['B'])
    if key in unique:
        if unique[key]['D'] &lt; d['D']:
            unique[key] = d
    else:
        unique[key] = d
</snippet></ROW><ROW><id>12477173</id><snippet>unique.values()</snippet></ROW><ROW><id>12477510</id><snippet>import random

RANDOMID = random.randit(0, 1&lt;&lt;32)
</snippet></ROW><ROW><id>12477780</id><snippet>import re
with open("input.txt") as infile, open("output.txt", "w") as outfile:
    outfile.write(re.sub(r"(?s)&lt;cmd&gt;.*?&lt;/cmd&gt;", "&lt;cmd&gt;\n&lt;/cmd&gt;", infile.read()))
</snippet></ROW><ROW><id>12477780</id><snippet>xcopy</snippet></ROW><ROW><id>12477780</id><snippet>import re
with open("input.txt") as infile, open("output.txt", "w") as outfile:
    outfile.write(re.sub(
        r"""(?sx)&lt;cmd&gt;      # Match &lt;cmd&gt;.
        (?:                 # Match...
         (?!&lt;/cmd&gt;)         #  (unless we're at the closing tag)
         .                  #  any character
        )*                  # any number of times.
        \bxcopy\b           # Match "xcopy" as a whole word
        (?:(?!&lt;/cmd&gt;).)*    # (Same as above)
        &lt;/cmd&gt;              # Match &lt;/cmd&gt;""", 
        "&lt;cmd&gt;\n&lt;/cmd&gt;", infile.read())
</snippet></ROW><ROW><id>12477847</id><snippet>try:
    pyobj = json.loads(contents.getvalue())
    log.debug("Response In Json Format: " + str(pyobj))
except:
    log.debug("Response In Json Format: Error")
return pyobj
</snippet></ROW><ROW><id>12477847</id><snippet>try</snippet></ROW><ROW><id>12477847</id><snippet>pyobj</snippet></ROW><ROW><id>12477847</id><snippet>return</snippet></ROW><ROW><id>12477847</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>12477847</id><snippet>contents.getValue</snippet></ROW><ROW><id>12477847</id><snippet>json.loads</snippet></ROW><ROW><id>12477847</id><snippet>Response In Json Format: Error</snippet></ROW><ROW><id>12477858</id><snippet>__sizeof__()</snippet></ROW><ROW><id>12477858</id><snippet>def count():
    count = 0
    while True:
        yield count
        count += 1
</snippet></ROW><ROW><id>12477858</id><snippet>&gt;&gt;&gt; count.__sizeof__()
88
</snippet></ROW><ROW><id>12477858</id><snippet>__sizeof__()</snippet></ROW><ROW><id>12477858</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>12477858</id><snippet>sum(1 for item in generator)
</snippet></ROW><ROW><id>12477886</id><snippet>useful_function</snippet></ROW><ROW><id>12477886</id><snippet>foreign_code.py</snippet></ROW><ROW><id>12477886</id><snippet>from foreign_code import useful_function
</snippet></ROW><ROW><id>12478132</id><snippet>RowProxy</snippet></ROW><ROW><id>12478132</id><snippet>for row in result:
    for value in row:
        print value
</snippet></ROW><ROW><id>12478132</id><snippet>for row in result:
    print row[0]
</snippet></ROW><ROW><id>12478132</id><snippet>id</snippet></ROW><ROW><id>12478132</id><snippet>for row in result:
    print row['id']
</snippet></ROW><ROW><id>12478266</id><snippet>class A(object):
    def __init__(self):
        print("initializing A")
        self.__a()
    def __a(self):
        print("A.a()")

class B(A):
    def __init__(self):
        super().__init__()
        # add stuff for B
        self.bnum=3 # required by B.a()        
    def __a(self):
        print("B.__a(), bnum=%i"%self.bnum)
</snippet></ROW><ROW><id>12478266</id><snippet>__getattr__()</snippet></ROW><ROW><id>12478993</id><snippet>.content</snippet></ROW><ROW><id>12478993</id><snippet>start_url = requests.get('http://www.delicious.com/golisoda')
soup = BeautifulSoup(start_url.content)
</snippet></ROW><ROW><id>12478993</id><snippet>start_url = requests.get('http://www.delicious.com/golisoda')
soup = BeautifulSoup(start_url.text)
</snippet></ROW><ROW><id>12479166</id><snippet>wx.Yield()</snippet></ROW><ROW><id>12479166</id><snippet>Append</snippet></ROW><ROW><id>12479166</id><snippet>Append</snippet></ROW><ROW><id>12479372</id><snippet>data += self.request.recv(1024).encode('utf-8').strip
</snippet></ROW><ROW><id>12479372</id><snippet>TypeError: cannot concatenate 'str' and 'builtin_function_or_method' objects
</snippet></ROW><ROW><id>12479372</id><snippet>data += self.request.recv(1024).encode('utf-8').strip()
</snippet></ROW><ROW><id>12479372</id><snippet>Got cert: &lt;X509Name object '/C=IT/ST=XXX/L=YYY/O=ZZZ/OU=NNN/CN=CA'&gt;
Got cert: &lt;X509Name object '/C=IT/ST=XXX/L=YYY/O=ZZZ/OU=NNN/CN=Server'&gt;
</snippet></ROW><ROW><id>12479372</id><snippet>python-openssl                    0.10-1
openssl                           0.9.8k-7ubuntu8
python                            2.6.5-0ubuntu1
</snippet></ROW><ROW><id>12479392</id><snippet>&gt;&gt;&gt; def J(n,x):
    li=range(1,n+1)
    k = -1
    while li:
        for i in xrange(1,n+1):
        if i in li:
            print 1,
        else:
            print 0,
    print
        k = (k+x) % len(li)
        li.pop(k)
        k =k- 1

&gt;&gt;&gt; J(10, 3)
1 1 1 1 1 1 1 1 1 1
1 1 0 1 1 1 1 1 1 1
1 1 0 1 1 0 1 1 1 1
1 1 0 1 1 0 1 1 0 1
1 0 0 1 1 0 1 1 0 1
1 0 0 1 1 0 0 1 0 1
0 0 0 1 1 0 0 1 0 1
0 0 0 1 1 0 0 0 0 1
0 0 0 1 0 0 0 0 0 1
0 0 0 1 0 0 0 0 0 0
</snippet></ROW><ROW><id>12479392</id><snippet>print li</snippet></ROW><ROW><id>12479392</id><snippet>&gt;&gt;&gt; def J(n,x):
    li=range(1,n+1)
    k = -1
    while li:
        print [1 if i in li else 0 for i in xrange(1,n+1)]
        k = (k+x) % len(li)
        li.pop(k)
        k =k- 1

&gt;&gt;&gt; J(10, 3)
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[1, 1, 0, 1, 1, 1, 1, 1, 1, 1]
[1, 1, 0, 1, 1, 0, 1, 1, 1, 1]
[1, 1, 0, 1, 1, 0, 1, 1, 0, 1]
[1, 0, 0, 1, 1, 0, 1, 1, 0, 1]
[1, 0, 0, 1, 1, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0, 0, 1, 0, 1]
[0, 0, 0, 1, 1, 0, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 1]
[0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
</snippet></ROW><ROW><id>12479392</id><snippet>print ' '.join(['1' if i in li else '0' for i in xrange(1,n+1)])</snippet></ROW><ROW><id>12479429</id><snippet>yield</snippet></ROW><ROW><id>12479429</id><snippet>return</snippet></ROW><ROW><id>12479429</id><snippet>for</snippet></ROW><ROW><id>12479429</id><snippet>next</snippet></ROW><ROW><id>12479429</id><snippet>yield</snippet></ROW><ROW><id>12479429</id><snippet>yield from</snippet></ROW><ROW><id>12479429</id><snippet>f_lineno</snippet></ROW><ROW><id>12479429</id><snippet>goto</snippet></ROW><ROW><id>12479429</id><snippet>for</snippet></ROW><ROW><id>12479429</id><snippet>while</snippet></ROW><ROW><id>12479429</id><snippet>yield from</snippet></ROW><ROW><id>12479429</id><snippet>yield</snippet></ROW><ROW><id>12479429</id><snippet>flatten</snippet></ROW><ROW><id>12479429</id><snippet>return iter(flatten(first) + flatten(rest))</snippet></ROW><ROW><id>12479429</id><snippet>f_lineno</snippet></ROW><ROW><id>12479429</id><snippet>import sys</snippet></ROW><ROW><id>12479429</id><snippet>def current_frame():
    i = None
    def gen():
        yield i.gi_frame.f_back
    i = gen()
    return next(i).f_back

class Loop(object):
    jump = False
    def __call__(self, frame, event, arg):
        if self.jump:
            frame.f_lineno = self.lineno
            self.jump = False
        return None if event == 'call' else self
    def __enter__(self):
        import sys
        sys.settrace(self)
        current_frame().f_back.f_trace = self
        self.lineno = current_frame().f_back.f_lineno
        return self
    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            self.jump = True
        else:
            import sys
            sys.settrace(None)
            current_frame().f_back.f_trace = None
            return exc_type is StopIteration

def flatten(x):
    if isinstance(x, list):
        if x:
            first, rest = flatten(x[0]), flatten(x[1:])
            with Loop():
                yield next(first)
            with Loop():
                yield next(rest)
            pass
    else:
        yield x
</snippet></ROW><ROW><id>12479455</id><snippet>IOLoop.add_timeout(deadline, callback)
</snippet></ROW><ROW><id>12479455</id><snippet>tornado.ioloop.PeriodicCallback</snippet></ROW><ROW><id>12479455</id><snippet>import datetime

def test():
    print "scheduled event fired"
...

if __name__ == "__main__":
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(8888)
    main_loop = tornado.ioloop.IOLoop.instance()
    # Schedule event (5 seconds from now)
    main_loop.add_timeout(datetime.timedelta(seconds=5), test)
    # Start main loop
    main_loop.start()
</snippet></ROW><ROW><id>12479455</id><snippet>test()</snippet></ROW><ROW><id>12479455</id><snippet>import os.path
import tornado.httpserver
import tornado.websocket
import tornado.ioloop
import tornado.web

# websocket
class FaviconHandler(tornado.web.RequestHandler):
    def get(self):
        self.redirect('/static/favicon.ico')

class WebHandler(tornado.web.RequestHandler):
    def get(self):
        self.render("websockets.html")

class WSHandler(tornado.websocket.WebSocketHandler):
    def open(self):
        print 'new connection'
        self.write_message("Hi, client: connection is made ...")
        tornado.ioloop.IOLoop.instance().add_timeout(datetime.timedelta(seconds=5), self.test)

    def on_message(self, message):
        print 'message received: \"%s\"' % message
        self.write_message("Echo: \"" + message + "\"")
        if (message == "green"):
            self.write_message("green!")

    def on_close(self):
        print 'connection closed'

    def test(self):
        self.write_message("scheduled!")

handlers = [
    (r"/favicon.ico", FaviconHandler),
    (r'/static/(.*)', tornado.web.StaticFileHandler, {'path': 'static'}),
    (r'/', WebHandler),
    (r'/ws', WSHandler),
]

settings = dict(
    template_path=os.path.join(os.path.dirname(__file__), "static"),
)

application = tornado.web.Application(handlers, **settings)

import datetime

if __name__ == "__main__":
    http_server = tornado.httpserver.HTTPServer(application)
    http_server.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>12479596</id><snippet>import threading
iid = 1
iid_lock = threading.Lock()

def next_id():
    global iid
    with iid_lock:
        result = iid
        iid += 1
    return result
</snippet></ROW><ROW><id>12479596</id><snippet>class IdGenerator(object):
    def __init__(self):
        self.cur_id = 1
        self.lock = threading.Lock()
    def next_id(self):
        with self.lock:
            result = self.cur_id
            self.cur_id += 1
        return result
</snippet></ROW><ROW><id>12479596</id><snippet>global</snippet></ROW><ROW><id>12479596</id><snippet>iid = 1
def next_id():
    global iid
    res = iid
    iid += 1
    return res
</snippet></ROW><ROW><id>12479671</id><snippet>##  force the refresh of the screen
            while gtk.events_pending():
                gtk.main_iteration()
</snippet></ROW><ROW><id>12479760</id><snippet>sed -i -e 's/[[:digit:]]*$//' filename
</snippet></ROW><ROW><id>12479987</id><snippet>if</snippet></ROW><ROW><id>12479987</id><snippet>else</snippet></ROW><ROW><id>12479987</id><snippet>return result[0] if result is not None else None
</snippet></ROW><ROW><id>12479987</id><snippet>return result[0] if result else None
</snippet></ROW><ROW><id>12479987</id><snippet>result</snippet></ROW><ROW><id>12480012</id><snippet>Qt</snippet></ROW><ROW><id>12480012</id><snippet>pyside tutorial</snippet></ROW><ROW><id>12480012</id><snippet>PyQt</snippet></ROW><ROW><id>12480012</id><snippet>pyqt tutorial</snippet></ROW><ROW><id>12480263</id><snippet>http://releases.ubuntu.com/12.04/ubuntu-12.04.1-desktop-i386.iso.torrent
</snippet></ROW><ROW><id>12480263</id><snippet>&gt;&gt;&gt; import bencode
&gt;&gt;&gt; torrent = open('ubuntu-12.04.1-desktop-i386.iso.torrent', 'r').read()
&gt;&gt;&gt; metadata = bencode.bdecode(torrent)
</snippet></ROW><ROW><id>12480263</id><snippet>&gt;&gt;&gt; hashcontents = bencode.bencode(metadata['info'])
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; digest = hashlib.sha1(hashcontents).digest()
&gt;&gt;&gt; import base64
&gt;&gt;&gt; b32hash = base64.b32encode(digest)
&gt;&gt;&gt; b32hash
'CT76LXJDDCH5LS2TUHKH6EUJ3NYKX4Y6'
</snippet></ROW><ROW><id>12480263</id><snippet>magnet:?xt=urn:btih:CT76LXJDDCH5LS2TUHKH6EUJ3NYKX4Y6
</snippet></ROW><ROW><id>12480263</id><snippet>&gt;&gt;&gt; params = {'xt': 'urn:btih:%s' % b32hash,
...           'dn': metadata['info']['name'],
...           'tr': metadata['announce'],
...           'xl': metadata['info']['length']}
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; paramstr = urllib.urlencode(params)
&gt;&gt;&gt; magneturi = 'magnet:?%s' % paramstr
&gt;&gt;&gt; magneturi
'magnet:?dn=ubuntu-12.04.1-desktop-i386.iso&amp;tr=http%3A%2F%2Ftorrent.ubuntu.com%3A6969%2Fannounce&amp;xl=729067520&amp;xt=urn%3Abtih%3ACT76LXJDDCH5LS2TUHKH6EUJ3NYKX4Y6'
</snippet></ROW><ROW><id>12480385</id><snippet>MyField.__init__</snippet></ROW><ROW><id>12480385</id><snippet>class MyField(TextField):
    def __init__(self, **kwargs):  # You were missing the **kwargs
        super(MyField, self).__init__(**kwargs)
</snippet></ROW><ROW><id>12480385</id><snippet>*</snippet></ROW><ROW><id>12480385</id><snippet>**</snippet></ROW><ROW><id>12480385</id><snippet>*</snippet></ROW><ROW><id>12480385</id><snippet>**</snippet></ROW><ROW><id>12480385</id><snippet>tuple</snippet></ROW><ROW><id>12480385</id><snippet>dict</snippet></ROW><ROW><id>12480385</id><snippet>*</snippet></ROW><ROW><id>12480385</id><snippet>**</snippet></ROW><ROW><id>12480385</id><snippet>tuple</snippet></ROW><ROW><id>12480385</id><snippet>list</snippet></ROW><ROW><id>12480385</id><snippet>*</snippet></ROW><ROW><id>12480385</id><snippet>dict</snippet></ROW><ROW><id>12480385</id><snippet>**</snippet></ROW><ROW><id>12480543</id><snippet>os.walk</snippet></ROW><ROW><id>12480543</id><snippet>import os
from os.path import join, getsize
for root, dirs, files in os.walk('python/Lib/email'):
    print root, "consumes",
    print sum(getsize(join(root, name)) for name in files),
    print "bytes in", len(files), "non-directory files"
    if 'CVS' in dirs:
        dirs.remove('CVS')  # don't visit CVS directories
</snippet></ROW><ROW><id>12480543</id><snippet>import os
from os.path import join, getsize
dirs_dict = {}

#We need to walk the tree from the bottom up so that a directory can have easy
# access to the size of its subdirectories.
for root, dirs, files in os.walk('python/Lib/email',topdown = False):

    # Loop through every non directory file in this directory and sum their sizes
    size = sum(getsize(join(root, name)) for name in files) 

    # Look at all of the subdirectories and add up their sizes from the `dirs_dict`
    subdir_size = sum(dirs_dict[join(root,d)] for d in dirs)

    # store the size of this directory (plus subdirectories) in a dict so we 
    # can access it later
    my_size = dirs_dict[root] = size + subdir_size

    print '%s: %d'%(root,my_size) 
</snippet></ROW><ROW><id>12481225</id><snippet>class Paddle(DynamicObj):
    # ...
    @property
    def x(self):
        return self.rect.x
</snippet></ROW><ROW><id>12481225</id><snippet>x</snippet></ROW><ROW><id>12481225</id><snippet>@x.setter</snippet></ROW><ROW><id>12481292</id><snippet>from collections import Sequence    # collections.abc in Python 3.3
isinstance(arg, Sequence) and not isinstance(arg, basestring)    # str in Python 3
</snippet></ROW><ROW><id>12481677</id><snippet>/$</snippet></ROW><ROW><id>12481677</id><snippet>127.0.0.1:8000/blog/2012/sep/17/thank-you-very-much/
</snippet></ROW><ROW><id>12481721</id><snippet>else</snippet></ROW><ROW><id>12481721</id><snippet>else</snippet></ROW><ROW><id>12481721</id><snippet>break</snippet></ROW><ROW><id>12481721</id><snippet>return</snippet></ROW><ROW><id>12481721</id><snippet>else</snippet></ROW><ROW><id>12481721</id><snippet>    for l in range(1,9):
        indexes = pickle.load(open('%s_%d.pkl'%(fc,l)))

        clusters_sum = sum([indexes[i]['count'] for i in indexes])
        print &gt;&gt; out, 'Lane %d: %d clusters PF.\n%8s  %9s  %5s' % (l,clusters_sum,'Index','Count','%')
        for i in sorted(indexes, key=lambda x: indexes[x]['name']):
            pct = indexes[i]['count'] and indexes[i]['count']/clusters_sum*100 or 0
            if pct &lt; 0.06: continue
            print &gt;&gt; out, '%8s  %9d  %5.1f' % (indexes[i]['name'], indexes[i]['count'], pct)
        
        print &gt;&gt; out
</snippet></ROW><ROW><id>12481890</id><snippet>&lt;Attributes ... /&gt;</snippet></ROW><ROW><id>12481890</id><snippet>&lt;Attributes ...&gt;</snippet></ROW><ROW><id>12481890</id><snippet>&lt;Attributes name="testattr1" strname="Testattribute 1" type="float" value="1.0"/&gt;
</snippet></ROW><ROW><id>12482110</id><snippet>.filter()</snippet></ROW><ROW><id>12482110</id><snippet>.exclude()</snippet></ROW><ROW><id>12482110</id><snippet>.filter()</snippet></ROW><ROW><id>12482110</id><snippet>queryset = Customer.objects.filter(Q(order__order_id=9) &amp; Q(order__order_id=13))
# or equivalently: .objects.filter(Q(order__order_id=9), Q(order__order_id=13))
</snippet></ROW><ROW><id>12482110</id><snippet>Customer</snippet></ROW><ROW><id>12482110</id><snippet>order_id=9 AND order_id=13</snippet></ROW><ROW><id>12482110</id><snippet>Order</snippet></ROW><ROW><id>12482110</id><snippet>.filter()</snippet></ROW><ROW><id>12482110</id><snippet>queryset = Customer.objects.filter(order__order_id=9).filter(order__order_id=13)
</snippet></ROW><ROW><id>12482110</id><snippet>Order</snippet></ROW><ROW><id>12482110</id><snippet>Customer</snippet></ROW><ROW><id>12482110</id><snippet>Order</snippet></ROW><ROW><id>12482110</id><snippet>order_id=9</snippet></ROW><ROW><id>12482110</id><snippet>Customer</snippet></ROW><ROW><id>12482110</id><snippet>Order</snippet></ROW><ROW><id>12482110</id><snippet>order_id=13</snippet></ROW><ROW><id>12482110</id><snippet>Order</snippet></ROW><ROW><id>12482110</id><snippet>Q()</snippet></ROW><ROW><id>12482110</id><snippet>.filter()</snippet></ROW><ROW><id>12482612</id><snippet>sudo pip uninstall pyzmq
sudo pip install pyzmq
</snippet></ROW><ROW><id>12482727</id><snippet>varString</snippet></ROW><ROW><id>12482727</id><snippet>unicode-escape</snippet></ROW><ROW><id>12482727</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>12482727</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>12482727</id><snippet>unicode</snippet></ROW><ROW><id>12482727</id><snippet>str</snippet></ROW><ROW><id>12482727</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'UTF-8'
&gt;&gt;&gt; varString = 'Ramón'
&gt;&gt;&gt; varUnicode = u'Ramón'
&gt;&gt;&gt; newUnicode = unicode(varString, encoding='UTF-8') # or encoding=sys.stdin.encoding
&gt;&gt;&gt; varString; varUnicode; newUnicode
'Ram\xc3\xb3n'
u'Ram\xf3n'
u'Ram\xf3n'
&gt;&gt;&gt; varUnicode == newUnicode
True
</snippet></ROW><ROW><id>12482752</id><snippet>/var</snippet></ROW><ROW><id>12482752</id><snippet>/private/var</snippet></ROW><ROW><id>12482752</id><snippet>$ ls -l /var
lrwxr-xr-x@ 1 root  wheel  11 Dec  2  2011 /var -&gt; private/var
</snippet></ROW><ROW><id>12482752</id><snippet>tempfile</snippet></ROW><ROW><id>12482752</id><snippet>TMPDIR</snippet></ROW><ROW><id>12482752</id><snippet>os.getcwd()</snippet></ROW><ROW><id>12482752</id><snippet>$ echo $TMPDIR
/var/folders/04/kc575q1n6x9drkwxyfljg5zw0000gn/T/
</snippet></ROW><ROW><id>12482791</id><snippet>re.search</snippet></ROW><ROW><id>12482791</id><snippet>re.search(r'id\=\d+', fieldname).group(0)      # return 'id=0123456'
re.search(r'(?&lt;=id\=)\d+', fieldname).group(0) # return '0123456'
</snippet></ROW><ROW><id>12482791</id><snippet>re.sub</snippet></ROW><ROW><id>12482817</id><snippet>args</snippet></ROW><ROW><id>12482817</id><snippet>kwds</snippet></ROW><ROW><id>12482817</id><snippet>res = p.apply_async(testFunc, args = (2, 4), kwds = {'calcY': False})
</snippet></ROW><ROW><id>12482970</id><snippet>def countWords(s):
    words = s.split()
    return len([word for word in words if len(word)&gt;=2])
</snippet></ROW><ROW><id>12482970</id><snippet>def countWords(s):
    words = s.split()
    count = 0
    for word in words:
        if len(word) &gt;= 2:
            count += 1
    return count
</snippet></ROW><ROW><id>12482970</id><snippet>defaultdict</snippet></ROW><ROW><id>12482970</id><snippet>collections.Counter</snippet></ROW><ROW><id>12482970</id><snippet>words = collections.Counter([word for line in open(filepath) for word in line.strip()])
words = dict((k,v) for k,v in words.iteritems if len(k)&gt;=2)
mostFrequent = [w[0] for w in words.most_common(10)]
leastFrequent = [w[0] for w in words.most_common()[-10:]]
</snippet></ROW><ROW><id>12483104</id><snippet>\uffff</snippet></ROW><ROW><id>12483104</id><snippet>\uD800</snippet></ROW><ROW><id>12483104</id><snippet>\uDBFF</snippet></ROW><ROW><id>12483104</id><snippet>\uDC00</snippet></ROW><ROW><id>12483104</id><snippet>\uDFFF</snippet></ROW><ROW><id>12483104</id><snippet>sys.maxunicode</snippet></ROW><ROW><id>12483104</id><snippet>65535</snippet></ROW><ROW><id>12483171</id><snippet>sys.modules['__main__'].__file__</snippet></ROW><ROW><id>12483171</id><snippet>self.lockfile = os.path.normpath(tempfile.gettempdir() + '/' +
  os.path.splitext(os.path.abspath(sys.modules['__main__'].__file__))[0] \
  .replace("/","-").replace(":","").replace("\\","-") + '-%s' % flavor_id +'.lock')
</snippet></ROW><ROW><id>12483171</id><snippet>path_to_script = get_main_dir()  #see linkd answer
self.lockfile = os.path.normpath(tempfile.gettempdir() + '/' +  path_to_script
  .replace("/","-").replace(":","").replace("\\","-") + '-%s' % flavor_id +'.lock')
</snippet></ROW><ROW><id>12483314</id><snippet>np.bincount</snippet></ROW><ROW><id>12483314</id><snippet>a = np.random.random((20, 22))

def distance(array, xpos, ypos):
    # probably a gazillion methods to create the actual distances...
    # if you array is large and you are only interested to a certain size
    # you sould probably slice out a smaller one first of course.
    dists = np.sqrt(np.arange(-xpos, array.shape [0]-xpos, dtype=float)[:,None]**2
          + np.arange(-ypos, array.shape [1]-ypos, dtype=float)[None,:]**2)
    return dists

# Prepare which bins to use:
dists = distance(a, 10, 11).astype(int)

# Do a bincount with weights.
result = np.bincount(dists.flat, weights=a.flat)
# and add them up:
result = np.add.accumulate(result)
</snippet></ROW><ROW><id>12483314</id><snippet>result</snippet></ROW><ROW><id>12483314</id><snippet>result[distance]</snippet></ROW><ROW><id>12483532</id><snippet>import sys
from collections import Sequence,defaultdict

#making code python3-compatible
if sys.version_info[0] == 3:
    basestring = str

def buildLocator(tree):
    locator = defaultdict(list)
    def fillLocator(tree, locator,location):
        for index,item in enumerate(tree):            
            if isinstance(item,basestring):
                locator[item].append(location+(index,))
            elif isinstance(item,Sequence):
                fillLocator(item,locator, location+(index,))
    fillLocator(tree,locator,())
    return locator

RECIPES = (
    ('apple', 'sugar', 'extreme_Force'),
    ('banana', 'syrup', 'magical_ends'),
    ('caramel', 'chocolate', 'pancake_MONSTER'),
    ('banana',('someAnother','banana'))
)
locator = buildLocator(RECIPES)

print(locator['banana'])
</snippet></ROW><ROW><id>12483532</id><snippet>[(1, 0), (3, 0), (3, 1, 1)]
</snippet></ROW><ROW><id>12484000</id><snippet>cls</snippet></ROW><ROW><id>12484000</id><snippet>json.dumps(obj, cls=AEncoder)
</snippet></ROW><ROW><id>12484000</id><snippet>&gt;&gt;&gt; class Something(object):
...    def __init__(self, v):
...       self.v = v
... 
&gt;&gt;&gt; import json
&gt;&gt;&gt; class SEncoder(json.JSONEncoder):
...    def default(self, obj):
...       if isinstance(obj, Something):
...          return {'classtype': 'Something', 'v': obj.v}
...       return json.JSONEncoder.default(self, obj)
... 
&gt;&gt;&gt; s1 = Something(3)
&gt;&gt;&gt; s2 = Something(4)
&gt;&gt;&gt; o = [s1, s2, 6, "hello"]
&gt;&gt;&gt; print json.dumps(o, cls=SEncoder, indent=2)
[
  {
    "classtype": "Something", 
    "v": 3
  }, 
  {
    "classtype": "Something", 
    "v": 4
  }, 
  6, 
  "hello"
]
</snippet></ROW><ROW><id>12484048</id><snippet>apply_async</snippet></ROW><ROW><id>12484048</id><snippet>apply_async</snippet></ROW><ROW><id>12484048</id><snippet>results</snippet></ROW><ROW><id>12484048</id><snippet>apply_async</snippet></ROW><ROW><id>12484048</id><snippet>apply_async</snippet></ROW><ROW><id>12484048</id><snippet>map_async</snippet></ROW><ROW><id>12484048</id><snippet>apply_async</snippet></ROW><ROW><id>12484048</id><snippet>import os
import multiprocessing as mp

results = []
def testFunc(file):
    result = []
    print "Working in Process #%d" % (os.getpid())
    #This is just an illustration of some logic. This is not what I'm actually doing.
    with open(file, 'r') as f:
        for line in f:
            if 'dog' in line:
                result.append(line)
    return result

def collect_results(result):
    results.extend(result)

if __name__=="__main__":
    p = mp.Pool(processes=2)
    files = ['/path/to/file1.txt', '/path/to/file2.txt']
    for f in files:
        p.apply_async(testFunc, args = (f, ), callback = collect_results)
    p.close()
    p.join()
    print(results)
</snippet></ROW><ROW><id>12484434</id><snippet>from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.events import subscriber, ContextFound
from pyramid.view import view_config

class RouteName(object):
    '''
    Subscriber predicate to check against route name.
    '''

    def __init__(self, value, config):
        self.value = value
        self.config = config

    def text(self):
        return 'route_name = %s' % self.value

    phash = text

    def __call__(self, event):
        route_name = getattr(event.request.matched_route, 'name', None)
        return route_name == self.value

@subscriber(ContextFound, route_name='home')
def check(event):
    print 'checked'

@view_config(renderer='string', route_name='home')
def home(request):
    return 'home'

@view_config(renderer='string', route_name='another')
def another(request):
    return 'another'

if __name__ == '__main__':
    config = Configurator()
    config.add_subscriber_predicate('route_name', RouteName)
    config.add_route('home', '/')
    config.add_route('another', '/another')
    config.scan()
    app = config.make_wsgi_app()
    server = make_server('0.0.0.0', 8080, app)
    server.serve_forever()
</snippet></ROW><ROW><id>12484523</id><snippet>opener.open()</snippet></ROW><ROW><id>12484523</id><snippet>urlopen()</snippet></ROW><ROW><id>12484523</id><snippet>read()</snippet></ROW><ROW><id>12484523</id><snippet>build_opener()</snippet></ROW><ROW><id>12484523</id><snippet>class MyRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, hdrs):
        if fp.geturl().startswith('http://www.facebook.com/'):
            # This will raise an exception similar to this:
            # urllib2.HTTPError: HTTP Error 302: FOUND
            return None
        else:
            # Let the default handling occur
            return super(MyRedirectHandler, self).http_error_302(req, fp, code, msg, hdrs)
</snippet></ROW><ROW><id>12484523</id><snippet>opener = urllib2.build_handler(MyRedirectHandler)
try:
    fp = opener.open(url)
except urllib2.HTTPError:
    content = None
    print 'This URL is not allowed or something'
else:
    content = fp.read()
</snippet></ROW><ROW><id>12484523</id><snippet>redirect_request</snippet></ROW><ROW><id>12484615</id><snippet>Pipe</snippet></ROW><ROW><id>12484615</id><snippet>recv</snippet></ROW><ROW><id>12484615</id><snippet>recv</snippet></ROW><ROW><id>12484615</id><snippet>Queue</snippet></ROW><ROW><id>12484615</id><snippet>multiprocessing</snippet></ROW><ROW><id>12484615</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12484615</id><snippet>Pool</snippet></ROW><ROW><id>12484643</id><snippet>def set_keys(d, keys, value):
    item = d
    for key in keys[:-1]:
        item = item[key]
    item[keys[-1]] = value
</snippet></ROW><ROW><id>12484643</id><snippet>def set_key(d, keys, value):
    if len(keys) == 1:
        d[keys[0]] = value
    else:
        set_key(d[keys[0]], keys[1:], value)
</snippet></ROW><ROW><id>12484747</id><snippet>self.depth</snippet></ROW><ROW><id>12484747</id><snippet>maxDepth</snippet></ROW><ROW><id>12484747</id><snippet>A</snippet></ROW><ROW><id>12484747</id><snippet>B</snippet></ROW><ROW><id>12484747</id><snippet>C</snippet></ROW><ROW><id>12484747</id><snippet>B</snippet></ROW><ROW><id>12484747</id><snippet>D</snippet></ROW><ROW><id>12484747</id><snippet>C</snippet></ROW><ROW><id>12484747</id><snippet>E</snippet></ROW><ROW><id>12484747</id><snippet>self._depth</snippet></ROW><ROW><id>12484747</id><snippet>crawl(self, A, 3)          # self._depth set to 1, following links to B and C
    crawl(self, B, 3)      # self._depth set to 2, following link to D
        crawl(self, D, 3)  # self._depth set to 3, no links to follow
    crawl(self, C, 3)      # self._depth &gt;= maxDepth, skipping link to E
</snippet></ROW><ROW><id>12484747</id><snippet>depth</snippet></ROW><ROW><id>12484747</id><snippet>crawl</snippet></ROW><ROW><id>12484747</id><snippet>def crawl(self,url,depthToGo):
    # call this method with depthToGo set to maxDepth
    self._listOfCrawled.add(url)
    text = crawler_util.textFromURL(url).split()
    for each in text:
        # if word not in index, create a new set, then add URL to set
        if each not in self._index:
            self._index[each] = set([])
        self._index[each].add(url)
    links = crawler_util.linksFromURL(url)
    # check if we can go deeper
    if depthToGo &gt; 0:
        for i in links:
            if i not in self._listOfCrawled:
                # decrease depthToGo for next level of recursion
                self.crawl(i, depthToGo - 1) 
</snippet></ROW><ROW><id>12484777</id><snippet>hash_key</snippet></ROW><ROW><id>12484777</id><snippet>range_key</snippet></ROW><ROW><id>12484777</id><snippet>hash_key</snippet></ROW><ROW><id>12484777</id><snippet>range_key</snippet></ROW><ROW><id>12484777</id><snippet>range_key</snippet></ROW><ROW><id>12484777</id><snippet>get_item</snippet></ROW><ROW><id>12484777</id><snippet>hash_key</snippet></ROW><ROW><id>12484853</id><snippet>SELECT</snippet></ROW><ROW><id>12484853</id><snippet>execute</snippet></ROW><ROW><id>12484853</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

session = sessionmaker(bind = create_engine('sqlite://'), autocommit = True)()

_ = session.execute('CREATE TABLE my_table (user_id int, setting_id int, settings string)')
for id in xrange(200):
    _ = session.execute('INSERT INTO my_table (user_id, setting_id) VALUES (:user_id, :setting_id)',
        {'user_id':id, 'setting_id':id})

_ = session.execute(
"""
    UPDATE my_table
    SET settings = :mysettings
    WHERE user_id = :user_id AND setting_id = 123
""", {'user_id':123, 'mysettings':'test'})

r = session.execute('SELECT * FROM my_table WHERE user_id = :user_id', {'user_id':123}).fetchall()
print r

[(123, 123, u'test')]
</snippet></ROW><ROW><id>12484853</id><snippet>sqlalchemy</snippet></ROW><ROW><id>12485058</id><snippet>   def evenOrOdd(number):
    if number%2 == 0:
        print "Even Number"
    else:
        print "Odd Number"
</snippet></ROW><ROW><id>12485079</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>12485079</id><snippet>#!/usr/bin/env python

import multiprocessing
import scipy
import scipy.misc
import scipy.ndimage

class Processor:
    def __init__(self,threshold):
        self._threshold=threshold

    def __call__(self,filename):
        im = scipy.misc.imread(filename)
        label,n = scipy.ndimage.label(im &gt; self._threshold)
        return n

def main():
    scipy.misc.imsave("lena.png", scipy.misc.lena())
    files = ['lena.png'] * 100

    proc=Processor(128)
    pool=multiprocessing.Pool()
    results=pool.map(proc,files)

    print results

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12485079</id><snippet>processes=N</snippet></ROW><ROW><id>12485079</id><snippet>Pool</snippet></ROW><ROW><id>12485079</id><snippet>Processes   Runtime
   1         6.2s
   2         3.2s
   4         1.8s
   8         1.5s
</snippet></ROW><ROW><id>12485184</id><snippet>np.finfo</snippet></ROW><ROW><id>12485184</id><snippet>finfo32 = np.finfo(np.float32)
finfo64 = np.finfo(np.float64)

finfo32.resolution = 1e-6
finfo64.resolution = 1e-15
</snippet></ROW><ROW><id>12485184</id><snippet>rstrip("0")</snippet></ROW><ROW><id>12485184</id><snippet>print ("%.6f" % your_float).strip("0")
</snippet></ROW><ROW><id>12485184</id><snippet>%g</snippet></ROW><ROW><id>12485184</id><snippet>&gt;&gt;&gt; strf = lambda v: ("%%.%ig" % max(np.ceil(np.log10(v)), 7)) % v
&gt;&gt;&gt; strf(123.456789)
'123.45679'
&gt;&gt;&gt; strf(123456789.12345)
'123456789'
</snippet></ROW><ROW><id>12485186</id><snippet>following = UserFollows.objects.filter(user__id = user.id).select_related('user')
users_ids = [follow.user.id for follow in following]
posts = UserPost.objects.filter(user__id__in=users_ids)
</snippet></ROW><ROW><id>12485186</id><snippet>select_related()</snippet></ROW><ROW><id>12485186</id><snippet>users_ids</snippet></ROW><ROW><id>12485284</id><snippet>if __name__ == "__main__":
    from mypackage import main
    main.run()
</snippet></ROW><ROW><id>12485284</id><snippet>mypackage.main.run()</snippet></ROW><ROW><id>12485284</id><snippet>mypackage.main</snippet></ROW><ROW><id>12485326</id><snippet>', '.join('(' + ', '.join(i) + ')' for i in L)
</snippet></ROW><ROW><id>12485326</id><snippet>'(Steve Buscemi, Mr. Pink), (Chris Penn, Nice Guy Eddie)'
</snippet></ROW><ROW><id>12485367</id><snippet>char in string</snippet></ROW><ROW><id>12485367</id><snippet>&gt;&gt;&gt; s = 'ab*de'
&gt;&gt;&gt; '*' in s
True
</snippet></ROW><ROW><id>12485367</id><snippet>if '*' in param0:
    raise ValueError("Can't use '*'!")
</snippet></ROW><ROW><id>12485375</id><snippet>on_message</snippet></ROW><ROW><id>12485375</id><snippet>handler = WSHandler()
handler.on_message('hello world')
</snippet></ROW><ROW><id>12485375</id><snippet>class WSHandler(tornado.websocket.WebSocketHandler):
    connections = []

    def open(self):
        self.connections.append(self)

    ....

    def on_close(self):
        self.connections.remove(self)
</snippet></ROW><ROW><id>12485375</id><snippet>StdOutListener.on_status</snippet></ROW><ROW><id>12485375</id><snippet>for connection in WSHandler.connections:
    connection.write_message(status.text)
</snippet></ROW><ROW><id>12485573</id><snippet>vectorizer.transform</snippet></ROW><ROW><id>12485573</id><snippet>vectorizer.transform</snippet></ROW><ROW><id>12485573</id><snippet>vectorizer.fit_transform</snippet></ROW><ROW><id>12485636</id><snippet>result = pool.apply_async(time.sleep, (10,))
print result.get(timeout=1)           # raises TimeoutError
</snippet></ROW><ROW><id>12485636</id><snippet>x.get() for x in process_list</snippet></ROW><ROW><id>12485636</id><snippet>get()</snippet></ROW><ROW><id>12485636</id><snippet>close()</snippet></ROW><ROW><id>12485729</id><snippet>creative_handler</snippet></ROW><ROW><id>12485729</id><snippet>return render_template("edit_creatives.html", title='Edit Creative', creative_handler=creative_handler)
</snippet></ROW><ROW><id>12485760</id><snippet>Popen</snippet></ROW><ROW><id>12485760</id><snippet>cat = subprocess.Popen(["hadoop", "fs", "-cat", "/path/to/myfile"], stdout=subprocess.PIPE)
for line in cat.stdout:
    print line
</snippet></ROW><ROW><id>12485784</id><snippet>os.listdir()</snippet></ROW><ROW><id>12485784</id><snippet>stat</snippet></ROW><ROW><id>12485784</id><snippet>isfile()</snippet></ROW><ROW><id>12485784</id><snippet>f = os.path.join(path, f)
</snippet></ROW><ROW><id>12485784</id><snippet>f</snippet></ROW><ROW><id>12485784</id><snippet>f</snippet></ROW><ROW><id>12485784</id><snippet>remove()</snippet></ROW><ROW><id>12485784</id><snippet>f</snippet></ROW><ROW><id>12486014</id><snippet>class Page(models.Model):
    # default related_name would be `page_set` but `pages`
    # seems a bit more intuitive, your choice.
    book = models.ForeignKey("yourapp.Book", related_name="pages")


class Book(models.Model):
    # ...

    # you can use self as the instance and magically you have
    # this `pages` attr which is a related manager, like `Page.objects`
    # but limited to the particular Book's pages.
    def special_page_create(self, *args, **kwargs):
        self.pages.create(
            # ...
        )
        # ...
</snippet></ROW><ROW><id>12486014</id><snippet>book = Book.objects.get(...
book.pages.create(...
page, created = book.pages.get_or_create(...
pages_gte_42 = book.pages.filter(num__gte=42)
# etc
</snippet></ROW><ROW><id>12486014</id><snippet>Book</snippet></ROW><ROW><id>12486075</id><snippet>import sys 
class MyNameSpace(object):
    def __init__(self,ns):
        self.ns = ns
    def __enter__(self):
        globals().update(self.ns)
    def __exit__(self, exc_type,exc_value,traceback):
        self.ns.update(sys._getframe(1).f_locals)

my_dict = {'a':3, 'b':2} 
with MyNameSpace(my_dict) as ns:
    print(a) # Should print 3
    x = 5 # When the block finishes, my_dict['x'] should now be 5 

print(my_dict['x'])
</snippet></ROW><ROW><id>12486362</id><snippet>fileCheck</snippet></ROW><ROW><id>12486362</id><snippet>def fileCheck(self, path, srvrInst, srvrName):
    found = False
    for folder, subfolders, files in os.walk(path):
        ...
</snippet></ROW><ROW><id>12486362</id><snippet>__init__</snippet></ROW><ROW><id>12486362</id><snippet>else:
    osVer = c.Win32_OperatingSystem()[0].Caption
    if '2003' in osVer:
        self.fileCheck(w2k3Chk, srvrInst, srvrName)
    else:
        self.fileCheck(w2k8Chk, srvrInst, srvrName)
</snippet></ROW><ROW><id>12486616</id><snippet>a_list = [e.replace(" ", "-") for e in a_list]
</snippet></ROW><ROW><id>12486657</id><snippet>once_control = PTHREAD_ONCE_INIT;
</snippet></ROW><ROW><id>12486657</id><snippet>PTHREAD_ONCE_INIT</snippet></ROW><ROW><id>12486657</id><snippet>PTHREAD_ONCE_INIT</snippet></ROW><ROW><id>12486657</id><snippet>/usr/include/pthread.h</snippet></ROW><ROW><id>12486657</id><snippet>#define PTHREAD_ONCE_INIT {_PTHREAD_ONCE_SIG_init, {0}}
</snippet></ROW><ROW><id>12486657</id><snippet>--static-deps</snippet></ROW><ROW><id>12486657</id><snippet>python setup.py build --static-deps \
   --libxml2-version=2.8.0
</snippet></ROW><ROW><id>12486673</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>12486721</id><snippet>simulateCoinToss(counter,number):
    trial_heads = (coinToss(number)[0] for _ in xrange(counter))
    average_heads = float(sum(trial_heads))/counter
    return (average_heads, number-average_heads)
</snippet></ROW><ROW><id>12487043</id><snippet>def __init__(self):
    lib.Foo_new.restype = c_void_p # Needed
    self.obj = lib.Foo_new()

def set(self, v):
    lib.Foo_setValue(c_void_p(self.obj), v) # c_void_p needed
</snippet></ROW><ROW><id>12487174</id><snippet>cd path/to/web2py/applications
mv admin newadmin
</snippet></ROW><ROW><id>12487273</id><snippet>dictionary = []
</snippet></ROW><ROW><id>12487273</id><snippet>get</snippet></ROW><ROW><id>12487273</id><snippet>dictionary = {}
</snippet></ROW><ROW><id>12487273</id><snippet>    dictionary[column[0]] = column[2]
</snippet></ROW><ROW><id>12487355</id><snippet>import numpy
import pylab
xy = numpy.zeros((2, 1000))
xy[0] = range(1000)
xy[1] = range(1000)
colors = [int(i % 23) for i in xy[0]]
pylab.scatter(xy[0], xy[1], c=colors)
pylab.show()
</snippet></ROW><ROW><id>12487355</id><snippet>cmap</snippet></ROW><ROW><id>12487355</id><snippet>pylab.scatter</snippet></ROW><ROW><id>12487355</id><snippet>pylab.scatter(xy[0], xy[1], c=colors, cmap=pylab.cm.cool)
</snippet></ROW><ROW><id>12487406</id><snippet>extent</snippet></ROW><ROW><id>12487406</id><snippet>import matplotlib.pyplot as plt
import numpy as np
x = np.random.rand(2,3)
plt.imshow(x, interpolation='nearest', extent=[0,3,0,2])
</snippet></ROW><ROW><id>12487406</id><snippet>plt.imshow(x, interpolation='nearest', extent=[100,103,100,102])
</snippet></ROW><ROW><id>12487430</id><snippet>.+?\?\?\d+</snippet></ROW><ROW><id>12487430</id><snippet>.+</snippet></ROW><ROW><id>12487430</id><snippet>r'(.+?\?\?\d+)(;.+?\?\?\d+)*'</snippet></ROW><ROW><id>12487466</id><snippet>g=graph.graphxy(width=8,y=graph.axis.linear(title=r"Fraction of DM halos"),
   x=graph.axis.linear(min=1,
       title=u"Mass ($10^{11}M_\u2609$)"))
</snippet></ROW><ROW><id>12487474</id><snippet>&gt;&gt;&gt; listOfLists = [['key2', 1], ['key1', 2], ['key2', 2], ['key1', 1]]
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for k,v in listOfLists:
    d.setdefault(k, []).append(v)

&gt;&gt;&gt; d = {k:min(v) for k,v in d.items()}
&gt;&gt;&gt; d
{'key2': 1, 'key1': 1}
</snippet></ROW><ROW><id>12487569</id><snippet>import module</snippet></ROW><ROW><id>12487569</id><snippet>import</snippet></ROW><ROW><id>12487844</id><snippet>def inputHQ():
    ...

    def calcGreyKnightGhostKnight():
        ...
</snippet></ROW><ROW><id>12487844</id><snippet>inputHQ</snippet></ROW><ROW><id>12487844</id><snippet>calcGreyKnightGhostKnight</snippet></ROW><ROW><id>12487844</id><snippet>inputHQ</snippet></ROW><ROW><id>12487844</id><snippet>calcGreyKnightGhostKnight</snippet></ROW><ROW><id>12487844</id><snippet>inputHQ</snippet></ROW><ROW><id>12487844</id><snippet>NameError</snippet></ROW><ROW><id>12487844</id><snippet>inputHQ</snippet></ROW><ROW><id>12487886</id><snippet>dumpdata</snippet></ROW><ROW><id>12487886</id><snippet>[{"pk": 1, "model": "app_name.model", "fields": {"field1": "value1", "field2": "value2", }}, {"pk": 2, "model": "app_name.model", "fields": {"fiel1": "value2", "field2": "value2",  }}]
</snippet></ROW><ROW><id>12487886</id><snippet>pk1</snippet></ROW><ROW><id>12487886</id><snippet>pk2</snippet></ROW><ROW><id>12488110</id><snippet>with open("jobs_done.txt") as inp:
    job_done_count = int(inp.read().strip())
</snippet></ROW><ROW><id>12488110</id><snippet>with open("jobs_done.json") as inp:
    job_done_count = json.load(inp)['jobs_done']
</snippet></ROW><ROW><id>12488413</id><snippet>print</snippet></ROW><ROW><id>12488413</id><snippet>print(a)</snippet></ROW><ROW><id>12488413</id><snippet>print a</snippet></ROW><ROW><id>12488413</id><snippet>print(a)</snippet></ROW><ROW><id>12488413</id><snippet>__future__</snippet></ROW><ROW><id>12488413</id><snippet>from __future__ import print_function
</snippet></ROW><ROW><id>12488413</id><snippet>print</snippet></ROW><ROW><id>12488413</id><snippet>print</snippet></ROW><ROW><id>12488413</id><snippet>a = print
a('magic') # prints 'magic'

def add_and_call(func, num):
    num += 1
    func(num)

add_and_call(print, 1) # prints 2
</snippet></ROW><ROW><id>12488693</id><snippet>import functools
class NewAPI(object):
    def __init__(self, api):
        self.api = api
    def __getattr__(self, key):
        call = getattr(self.api, key)
        @functools.wraps(call)
        def wrapped_call(*args, **kwargs):
            headers = kwargs.pop('headers', {})
            headers['User-Agent'] = 'MyUserAgent' # or make this a class variable/instance variable
            kwargs['headers'] = headers
            return call(*args, **kwargs)
        return wrapped_call

api = NewAPI(api)
print(api.get_user('twitter'))
</snippet></ROW><ROW><id>12488794</id><snippet>itertools</snippet></ROW><ROW><id>12488794</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from itertools import islice, izip
&gt;&gt;&gt; words = re.findall("\w+", 
   "the quick person did not realize his speed and the quick person bumped")
&gt;&gt;&gt; print Counter(izip(words, islice(words, 1, None)))
</snippet></ROW><ROW><id>12488794</id><snippet>Counter({('the', 'quick'): 2, ('quick', 'person'): 2, ('person', 'did'): 1, 
  ('did', 'not'): 1, ('not', 'realize'): 1, ('and', 'the'): 1, 
  ('speed', 'and'): 1, ('person', 'bumped'): 1, ('his', 'speed'): 1, 
  ('realize', 'his'): 1})
</snippet></ROW><ROW><id>12488794</id><snippet>from itertools import tee, isilce

def ngrams(lst, n):
  tlst = lst
  while True:
    a, b = tee(tlst)
    l = tuple(islice(a, n))
    if len(l) == n:
      yield l
      next(b)
      tlst = b
    else:
      break

&gt;&gt;&gt; Counter(ngrams(words, 3))
</snippet></ROW><ROW><id>12488794</id><snippet>Counter({('the', 'quick', 'person'): 2, ('and', 'the', 'quick'): 1, 
  ('realize', 'his', 'speed'): 1, ('his', 'speed', 'and'): 1, 
  ('person', 'did', 'not'): 1, ('quick', 'person', 'did'): 1, 
  ('quick', 'person', 'bumped'): 1, ('did', 'not', 'realize'): 1, 
  ('speed', 'and', 'the'): 1, ('not', 'realize', 'his'): 1})
</snippet></ROW><ROW><id>12488794</id><snippet>ngarms</snippet></ROW><ROW><id>12488860</id><snippet>except EnvironmentError as e:
    print e.errno
</snippet></ROW><ROW><id>12489023</id><snippet>&lt;delete&gt;</snippet></ROW><ROW><id>12489023</id><snippet>&lt;delete model="ir.actions.act_window" id="other_module.action_id"/&gt;
</snippet></ROW><ROW><id>12489091</id><snippet>f = open("output.csv", 'wt')
for item in group:
    custom_serialization = ', _ ,'.join(item.split('_')) 
    f.write(custom_serialization + '\n')
f.close()
</snippet></ROW><ROW><id>12489091</id><snippet>f = open('output.csv', 'w'):
    f.write('\n'.join([' _ '.join(x.split('_')) for x in group]))
f.close()
</snippet></ROW><ROW><id>12489306</id><snippet>__init__.py</snippet></ROW><ROW><id>12489306</id><snippet>mysite.yelp</snippet></ROW><ROW><id>12489628</id><snippet>.pyc</snippet></ROW><ROW><id>12489628</id><snippet>.py</snippet></ROW><ROW><id>12489628</id><snippet>imp</snippet></ROW><ROW><id>12489628</id><snippet>.pyc</snippet></ROW><ROW><id>12489712</id><snippet>pygame.display.set_mode</snippet></ROW><ROW><id>12489712</id><snippet>import pygame

pygame.init()

# create a window that will capture the events
pygame.display.set_mode((200, 200))

running = 1
while(running):
   for event in pygame.event.get():
      if event.type == pygame.KEYDOWN:
         if event.key == pygame.K_ESCAPE:
            print "hi"
            running = 0
</snippet></ROW><ROW><id>12489800</id><snippet>__getattr__</snippet></ROW><ROW><id>12489800</id><snippet>getattr(self.foo, attr)</snippet></ROW><ROW><id>12489800</id><snippet>self.foo.value</snippet></ROW><ROW><id>12489800</id><snippet>__setattr__</snippet></ROW><ROW><id>12489800</id><snippet>__getattr__</snippet></ROW><ROW><id>12489800</id><snippet>foo</snippet></ROW><ROW><id>12489800</id><snippet>__get__()</snippet></ROW><ROW><id>12489800</id><snippet>__getattribute__</snippet></ROW><ROW><id>12489800</id><snippet>__setattr__</snippet></ROW><ROW><id>12489800</id><snippet>def __setattr__(self, attr, value):
    if hasattr(self, 'foo') and hasattr(self.foo, attr):
        setattr(self.foo, attr, value)
        return
    super(Bar, self).__setattr__(attr, value)
</snippet></ROW><ROW><id>12489800</id><snippet>__init__</snippet></ROW><ROW><id>12489800</id><snippet>self.foo</snippet></ROW><ROW><id>12489800</id><snippet>foo</snippet></ROW><ROW><id>12489800</id><snippet>hasattr(self, 'foo')</snippet></ROW><ROW><id>12489800</id><snippet>__setattr__</snippet></ROW><ROW><id>12489800</id><snippet>self.foo = Foo()</snippet></ROW><ROW><id>12490729</id><snippet>save</snippet></ROW><ROW><id>12490729</id><snippet>commit=True</snippet></ROW><ROW><id>12490794</id><snippet>rm= self.sockfd.recv(1024)
print rm
</snippet></ROW><ROW><id>12490920</id><snippet>strip_list</snippet></ROW><ROW><id>12490920</id><snippet>strip_list</snippet></ROW><ROW><id>12490920</id><snippet>if</snippet></ROW><ROW><id>12490920</id><snippet>if filetype:
    next(reader)
    print("CSV file located, headers present, importing data")
else:
    print("CSV file located, no headers found, importing data")

time.sleep(3)

for data in reader:
        csvreaderlist.append(strip_list(data)) # do stripping here!
        csvfilecounter = csvfilecounter +1
        summarycounter = summarycounter +1
</snippet></ROW><ROW><id>12490920</id><snippet>strip_list</snippet></ROW><ROW><id>12490920</id><snippet>True</snippet></ROW><ROW><id>12490920</id><snippet>False</snippet></ROW><ROW><id>12490920</id><snippet>csv.Sniffer().has_header()</snippet></ROW><ROW><id>12490920</id><snippet>dialect</snippet></ROW><ROW><id>12490920</id><snippet>Reader</snippet></ROW><ROW><id>12490920</id><snippet>dialect</snippet></ROW><ROW><id>12490920</id><snippet>has_header</snippet></ROW><ROW><id>12490920</id><snippet>csvfile = open("example.csv")
top = csvfile.read(1024)
csvfile.seek(0)

sniffer = csv.Sniffer()

dialect = sniffer.sniff(top)
has_header = sniffer.had_header(top)

reader = csv.reader(csvfile, dialect)
if has_header:
    next(reader)
</snippet></ROW><ROW><id>12491067</id><snippet>math.tan(angle) == float(player.y - self.y) / (player.x - self.x)
</snippet></ROW><ROW><id>12491067</id><snippet>angle == math.atan(float(player.y - self.y) / (player.x - self.x))
</snippet></ROW><ROW><id>12491067</id><snippet>ZeroDivisionError</snippet></ROW><ROW><id>12491067</id><snippet>angle = math.atan2(player.y - self.y, player.x - self.x)
</snippet></ROW><ROW><id>12491273</id><snippet>q.append(s)</snippet></ROW><ROW><id>12491287</id><snippet>fig, ax = subplots(1,1,1)
ax.plot(np.random.randn(5))
ax.set_xticklabels(['this is a very long label', 'b', 'c', 'd', 'e'], rotation=90)
fig.tight_layout()
fig.savefig('test.pdf')
</snippet></ROW><ROW><id>12491358</id><snippet>with open('somefile.csv') as fin:
    csvin = csv.DictReader(fin)
    for row in csvin:
        print 'Person {name} had a balance of {Open Balance}'.format(**row)
</snippet></ROW><ROW><id>12491358</id><snippet>import re

s = "-8,934.75"
try:
    amount = float(re.sub('[^-.0-9]', '', s))
except ValueError as e:
    pass # wasn't valid for some reason? do something sensible
</snippet></ROW><ROW><id>12491358</id><snippet>from bisect import bisect

def age_band(age, upto=[30, 60, 90], desc=['0-30', '31-60', '61-90', '91+']):
    if not age &gt;= 0:
        return '*invalid*'
    return desc[bisect(upto, age)]

for age in [31, 99, 65, 12, -1]:
    print age, age_band(age)
</snippet></ROW><ROW><id>12491541</id><snippet>optparse</snippet></ROW><ROW><id>12491541</id><snippet>optparse</snippet></ROW><ROW><id>12491676</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "ABCDXYv"
&gt;&gt;&gt; re.findall(r'.{1,2}',s,re.DOTALL)
['AB', 'CD', 'XY', 'v']
</snippet></ROW><ROW><id>12491676</id><snippet>r'.{1,2}'</snippet></ROW><ROW><id>12491676</id><snippet>r'..?'</snippet></ROW><ROW><id>12491676</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer("re.findall(r'.{1,2}', 'ABCDXYv')", setup='import re').repeat()
[1.9064299485802252, 1.8369554649334674, 1.8548105833383772]
&gt;&gt;&gt; timeit.Timer("re.findall(r'..?', 'ABCDXYv')", setup='import re').repeat()
[1.9142223469651611, 1.8670038395145383, 1.85781945659771]
</snippet></ROW><ROW><id>12491676</id><snippet>r'.{1,2}'</snippet></ROW><ROW><id>12491915</id><snippet>            $fields = $_REQUEST;

            foreach($fields as $key=&gt;$value) { $fields_string .= $key.'='.$value.'&amp;'; }
            rtrim($fields_string,'&amp;');                
            //open connection
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_HTTPHEADER, "Content-Type: text/html; charset=utf-8");

            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_POST, count($fields));
            $fields_string = iconv('ISO-8859-1', 'UTF-8', $fields_string);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $fields_string);

            $result = curl_exec($ch);
            curl_close($ch);
</snippet></ROW><ROW><id>12491917</id><snippet>df.set_index(['first', 'second'], drop=False)
</snippet></ROW><ROW><id>12491917</id><snippet>apply</snippet></ROW><ROW><id>12492117</id><snippet>class Obj()</snippet></ROW><ROW><id>12492117</id><snippet>class Obj(object)</snippet></ROW><ROW><id>12492117</id><snippet>o.np_arr[:] = 2
</snippet></ROW><ROW><id>12492117</id><snippet>_np_arr.setflags(write=False)</snippet></ROW><ROW><id>12492117</id><snippet>__array_finalize__</snippet></ROW><ROW><id>12492117</id><snippet>np.asarray(o.np_arr)</snippet></ROW><ROW><id>12492343</id><snippet>bytearray</snippet></ROW><ROW><id>12492343</id><snippet>&gt;&gt;&gt; sum(bytearray("abcdefgh"))
804
</snippet></ROW><ROW><id>12492343</id><snippet>bytearray</snippet></ROW><ROW><id>12492343</id><snippet>sum</snippet></ROW><ROW><id>12492343</id><snippet>numpy</snippet></ROW><ROW><id>12492343</id><snippet>numpy.frombuffer</snippet></ROW><ROW><id>12492343</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.frombuffer("abcdefgh", "uint8").sum()
804
</snippet></ROW><ROW><id>12492343</id><snippet>frombuffer</snippet></ROW><ROW><id>12492343</id><snippet>timeit</snippet></ROW><ROW><id>12492343</id><snippet>$ python -m timeit -s 's = "a" * 20' 'sum(ord(ch) for ch in s)' 
100000 loops, best of 3: 3.85 usec per loop
$ python -m timeit -s 's = "a" * 20' 'sum(bytearray(s))'
1000000 loops, best of 3: 1.05 usec per loop
$ python -m timeit -s 'from numpy import frombuffer; s = "a" * 20' \
                      'frombuffer(s, "uint8").sum()' 
100000 loops, best of 3: 4.8 usec per loop
</snippet></ROW><ROW><id>12492476</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>12492476</id><snippet>In [5]: import subprocess

In [6]: output = subprocess.check_output("ps")

In [7]: print output
  PID TTY          TIME CMD
 2314 pts/2    00:00:06 bash
 4084 pts/2    00:00:03 mpdas
 7315 pts/2    00:00:02 python
 7399 pts/2    00:00:00 ps


In [8]: 
</snippet></ROW><ROW><id>12492476</id><snippet>In [11]: import subprocess

In [12]: p1 = subprocess.Popen(['ps'], stdout=subprocess.PIPE)

In [13]: print  p1.communicate()[0]
  PID TTY          TIME CMD
 2314 pts/2    00:00:06 bash
 4084 pts/2    00:00:03 mpdas
 7315 pts/2    00:00:02 python
 7682 pts/2    00:00:00 ps


In [14]: 
</snippet></ROW><ROW><id>12492735</id><snippet>&gt;&gt;&gt; a = "café"
&gt;&gt;&gt; a
'caf\x82'
&gt;&gt;&gt; print a
café
&gt;&gt;&gt; a.decode("cp850")                      # DOS codepage 850 --&gt; Unicode
u'caf\xe9'
&gt;&gt;&gt; a.decode("cp850").encode("cp1252")     # DOS 850 --&gt; Unicode --&gt; Windows 1252
'caf\xe9'                                  # identical to Unicode codepoint
&gt;&gt;&gt; print a.decode("cp850").encode("cp1252") # Display a cp1252 string in cp850
cafÚ
</snippet></ROW><ROW><id>12492735</id><snippet>encoding="cp1252"</snippet></ROW><ROW><id>12492735</id><snippet>cmd</snippet></ROW><ROW><id>12492735</id><snippet>cp850</snippet></ROW><ROW><id>12492735</id><snippet>0x82</snippet></ROW><ROW><id>12492735</id><snippet>é</snippet></ROW><ROW><id>12492735</id><snippet>cp850</snippet></ROW><ROW><id>12492735</id><snippet>cp1252</snippet></ROW><ROW><id>12492735</id><snippet>é</snippet></ROW><ROW><id>12492735</id><snippet>0xe9</snippet></ROW><ROW><id>12492735</id><snippet>cp1252</snippet></ROW><ROW><id>12492735</id><snippet>cp1252</snippet></ROW><ROW><id>12492735</id><snippet>f.write(a)</snippet></ROW><ROW><id>12492735</id><snippet>caf,</snippet></ROW><ROW><id>12492735</id><snippet>,</snippet></ROW><ROW><id>12492735</id><snippet>0x82</snippet></ROW><ROW><id>12492735</id><snippet>cp1252</snippet></ROW><ROW><id>12492735</id><snippet>f.write(a.decode("cp850").encode("cp1252"))</snippet></ROW><ROW><id>12492735</id><snippet>café</snippet></ROW><ROW><id>12492735</id><snippet>cp850</snippet></ROW><ROW><id>12492735</id><snippet>cp1252</snippet></ROW><ROW><id>12492814</id><snippet>Set::IntSpan</snippet></ROW><ROW><id>12492814</id><snippet>web3.maxi.com
web4.maxi.com
web5.maxi.com
mail1.mexi.com
web6.maxi.com
web9.maxi.com
web9.maxi.com

web11.maxi.com
mail3.mexi.com
web7.maxi.com
mail4.mexi.com
mail25.mexi.com      
  mail26.mexi.com
mail27.mexi.com
mail28.mexi.com
  web8.maxi.com
mail29.mexi.com
mail110.mexi.com
web1.maxi.com
</snippet></ROW><ROW><id>12492814</id><snippet>#!/usr/bin/perl -l

use Set::IntSpan;
use File::Slurp qw/slurp/;

$str = slurp(\*STDIN);

# Remove redundant whitespace
chop $str;
$str =~ s/^[\t ]+|[\t ]+$//gm;
$str =~ s/\R+/\n/g;

# Copy $str so we can match numbers in it without disturbing the loop
$nums = $str;

# Parse lines in $str in sequence
while($str =~ /^(.*)$/gm) {
  $line = $1;

  # Extract bits before and after number
  ($pre, $post) = $line =~ /([^\d]+)\d+(.*)$/m;

  # Check if its been printed already
  next if $seen{$pre . $post};

  # If not, extract numbers
  @numbers = $nums =~ /$pre(\d+)$post/g;

  print $pre . "[" 
        . Set::IntSpan-&gt;new(@numbers)-&gt;run_list()
        . "]" . $post;

  $seen{$pre . $post} = 1;
}
</snippet></ROW><ROW><id>12492814</id><snippet>perl parse.pl &lt; infile
</snippet></ROW><ROW><id>12492814</id><snippet>web[1,3-9,11].maxi.com
mail[1,3-4,25-29,110].mexi.com
</snippet></ROW><ROW><id>12492814</id><snippet>@numbers = $nums =~ /$pre(\d+)$post/g</snippet></ROW><ROW><id>12492814</id><snippet>@numbers</snippet></ROW><ROW><id>12492963</id><snippet>gzip.GzipFile</snippet></ROW><ROW><id>12492963</id><snippet>io.open</snippet></ROW><ROW><id>12492963</id><snippet>import io
import gzip

f_obj = open('file.gz','r')
io_obj = io.open(f_obj.fileno(), encoding='UTF-8')
gzip_obj = gzip.GzipFile(fileobj=io_obj, mode='r')
gzip_obj.read()
</snippet></ROW><ROW><id>12492963</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>12492963</id><snippet>io.open</snippet></ROW><ROW><id>12492963</id><snippet>file.gz</snippet></ROW><ROW><id>12492963</id><snippet>gzip</snippet></ROW><ROW><id>12492963</id><snippet>ö
ä
u
y
</snippet></ROW><ROW><id>12492963</id><snippet>import codecs
import gzip
gz_fh = gzip.open('file.gz')
ascii = codecs.getreader('ASCII')
utf8 = codecs.getreader('UTF-8') 
ascii_fh = ascii(gz_fh)
utf8_fh = utf8(gz_fh)
ascii_fh.readlines()
-&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)

utf8_fh.readlines()
-&gt; [u'\xf6\n', u'\xe4\n', u'u\n', u'y']
</snippet></ROW><ROW><id>12492963</id><snippet>codecs.StreamReader</snippet></ROW><ROW><id>12493201</id><snippet>pip install colorama
</snippet></ROW><ROW><id>12493201</id><snippet>import colorama
colorama.init()
start = "\033[1;31m"
end = "\033[0;0m"
print "File is: " + start + "&lt;placeholder&gt;" + end
</snippet></ROW><ROW><id>12493265</id><snippet>__call__</snippet></ROW><ROW><id>12493265</id><snippet>Adder2.__call__</snippet></ROW><ROW><id>12493265</id><snippet>a2.__call__</snippet></ROW><ROW><id>12493265</id><snippet>self</snippet></ROW><ROW><id>12493265</id><snippet>a2</snippet></ROW><ROW><id>12493265</id><snippet>unbound method</snippet></ROW><ROW><id>12493265</id><snippet>Adder2.__call__</snippet></ROW><ROW><id>12493401</id><snippet>a = [3, 4]
b = [1, 2] + a
</snippet></ROW><ROW><id>12493494</id><snippet>self.setDaemon(True)
</snippet></ROW><ROW><id>12494308</id><snippet>attribute</snippet></ROW><ROW><id>12494308</id><snippet>dehydrate</snippet></ROW><ROW><id>12494308</id><snippet>def dehydrate(self, bundle):
    bundle.data['custom_field'] = bundle.obj.get_votes()
    return bundle
</snippet></ROW><ROW><id>12494308</id><snippet>get_votes</snippet></ROW><ROW><id>12494308</id><snippet>votes = fields.CharField(attribute='get_votes', readonly=True, null=True)
</snippet></ROW><ROW><id>12494308</id><snippet>votes = fields.CharField(readonly=True, null=True)
</snippet></ROW><ROW><id>12494308</id><snippet>def dehydrate_votes(self, bundle):
    return bundle.obj.get_votes()
</snippet></ROW><ROW><id>12494323</id><snippet>class Mine(unicode):
    #
    def __init__(self, *args, **kwargs):
        super(Mine, self).__init__(*args, **kwargs)
    #
    def __setattr__(self, attr, value):
        try:
            super(Mine, self).__setattr__(attr, value)
        except AttributeError:
            self.__dict__[attr] = value
    #
    def __getattr__(self, attr):
        try:
            super(Mine, self).__getattr__(attr)
        except AttributeError:
            try:
                return self.__dict__[attr]
            except KeyError:
                raise AttributeError

    def __getitem__(self, item):
        obj = Mine(super(Mine, self).__getitem__(item))
        obj.__dict__ = self.__dict__
        return obj
</snippet></ROW><ROW><id>12494323</id><snippet>split</snippet></ROW><ROW><id>12494323</id><snippet>Mine</snippet></ROW><ROW><id>12494323</id><snippet>def split(self, arg=' '):
    result = []
    for item in super(Mine, self).split(arg):
        i = Mine(item)
        i.__dict__ = self.__dict__
        result.append(i)
    return result
</snippet></ROW><ROW><id>12494323</id><snippet>__dict__</snippet></ROW><ROW><id>12494358</id><snippet>import sys

text = sys.stdin.read()
</snippet></ROW><ROW><id>12494358</id><snippet>paste.py</snippet></ROW><ROW><id>12494358</id><snippet>text</snippet></ROW><ROW><id>12494358</id><snippet>"hello\n"</snippet></ROW><ROW><id>12494358</id><snippet>dir</snippet></ROW><ROW><id>12494358</id><snippet>text</snippet></ROW><ROW><id>12494585</id><snippet>class PhoneModelBase(model.Model):
    phone = models.CharField(max_length=16)
    ...

    class Meta:
        abstract = True

class PhoneModel(PhoneModelBase):
    # phone is here without typing it
    # the only restriction is that you cannot redefine phone here
    # its a Django restriction, not Python restriction
    # phone = models.CharField(max_length=12) # &lt;= This will raise exception
    pass
</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>class Meta</snippet></ROW><ROW><id>12494585</id><snippet>abstract=True</snippet></ROW><ROW><id>12494585</id><snippet>abstact = True</snippet></ROW><ROW><id>12494585</id><snippet>Meta</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>__metaclass__</snippet></ROW><ROW><id>12494585</id><snippet>__metaclass__</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase()</snippet></ROW><ROW><id>12494585</id><snippet>__metaclass__</snippet></ROW><ROW><id>12494585</id><snippet>model.Model</snippet></ROW><ROW><id>12494585</id><snippet>__metaclass__</snippet></ROW><ROW><id>12494585</id><snippet>phone</snippet></ROW><ROW><id>12494585</id><snippet>Meta</snippet></ROW><ROW><id>12494585</id><snippet>Meta</snippet></ROW><ROW><id>12494585</id><snippet>abstract</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>__metaclass__</snippet></ROW><ROW><id>12494585</id><snippet>Meta</snippet></ROW><ROW><id>12494585</id><snippet>abstract = True</snippet></ROW><ROW><id>12494585</id><snippet>PhoneModelBase</snippet></ROW><ROW><id>12494585</id><snippet>DimensionsModelBase</snippet></ROW><ROW><id>12494619</id><snippet>b = []
for a in hometimeline['ids']:
   b.append(oauth_req(
      'https://api.twitter.com/1.1/statuses/user_timeline.json?count=1&amp;user_id=%s'%a,
      '###########################################',  (these are just tokens)
      '###########################################'))
</snippet></ROW><ROW><id>12494619</id><snippet>b = {}

for a in hometimeline['ids']:
   b[a] = oauth_req(
      'https://api.twitter.com/1.1/statuses/user_timeline.json?count=1&amp;user_id=%s'%a,
      '###########################################',  (these are just tokens)
      '###########################################')
</snippet></ROW><ROW><id>12494650</id><snippet>a = 0b11111111
b = 0b11011111

diff = a^b  # 0b100000
diff.bit_length()-1 # 5 (the first position (backwards) which differs, 0 if a==b )
</snippet></ROW><ROW><id>12494652</id><snippet>point_list</snippet></ROW><ROW><id>12495113</id><snippet>getch</snippet></ROW><ROW><id>12495113</id><snippet>import sys
while 1:
    c=''
    while len(c) &lt; 10:
        g = getch()
        sys.stdout.write(g)
        c += g
    print "\nYou said", c
</snippet></ROW><ROW><id>12495198</id><snippet>class Color(models.Model):
    name = CharField(...)
</snippet></ROW><ROW><id>12495205</id><snippet>n, bins, patches = plt.hist(Flow+1e-12, 15, color= 'b',log=True, histtype='step',hatch='/')
</snippet></ROW><ROW><id>12495261</id><snippet>find({}).sort({date: -1})
</snippet></ROW><ROW><id>12495263</id><snippet>input</snippet></ROW><ROW><id>12495263</id><snippet>eval(input())</snippet></ROW><ROW><id>12495263</id><snippet>def move():
    #...

def jump():
    #...

function_dict = {'move':move, 'jump':jump }
</snippet></ROW><ROW><id>12495263</id><snippet>func = input('&gt;')  #raw_input on python2.x
function_dict[func]()
</snippet></ROW><ROW><id>12495263</id><snippet>def move():
    print("Test.")

func_dict = {'move':move}
if __name__ == "__main__":
    input("Press enter to begin.")
    currentEnvironment = "room" #getNewEnvironment(environments)
    currentTimeOfDay = "1 A.M." #getTime(timeTicks, timeOfDay)
    print("You are standing in the {0}. It is {1}.".format(currentEnvironment, currentTimeOfDay))
    command = input("&gt; ")
    func_dict[command]()
</snippet></ROW><ROW><id>12495304</id><snippet>norm_conf</snippet></ROW><ROW><id>12495304</id><snippet>norm_conf = []</snippet></ROW><ROW><id>12495304</id><snippet>Traceback (most recent call last):
  File "mdim2.py", line 19, in &lt;module&gt;
    res = ax.imshow(array(norm_conf), cmap=cm.jet, interpolation='nearest')
  File "/usr/lib/pymodules/python2.7/matplotlib/axes.py", line 6796, in imshow
    im.set_data(X)
  File "/usr/lib/pymodules/python2.7/matplotlib/image.py", line 411, in set_data
    raise TypeError("Invalid dimensions for image data")
TypeError: Invalid dimensions for image data
</snippet></ROW><ROW><id>12495304</id><snippet>python -tt yourprogramname.py</snippet></ROW><ROW><id>12495497</id><snippet>SQLSTATE</snippet></ROW><ROW><id>12495497</id><snippet>pgcode</snippet></ROW><ROW><id>12495497</id><snippet>python3
&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; conn = psycopg2.connect("dbname=regress")
&gt;&gt;&gt; curs = conn.cursor()
&gt;&gt;&gt; try:
...     curs.execute("INVALID;")
... except Exception as ex:
...     xx = ex
&gt;&gt;&gt; xx.pgcode
'42601'
</snippet></ROW><ROW><id>12495497</id><snippet>syntax_error</snippet></ROW><ROW><id>12495497</id><snippet>Syntax Error or Access Rule Violation</snippet></ROW><ROW><id>12495497</id><snippet>23505   unique_violation
23502   not_null_violation
</snippet></ROW><ROW><id>12495497</id><snippet>try:
    principal = cls.objects.create(
        user_id=user.id,
        email=user.email,
        path='something'
    )
except IntegrityError as ex:
    if ex.pgcode = '23505':
        principal = cls.objects.get(
            user_id=user.id,
            email=user.email
        )
    else:
        raise
</snippet></ROW><ROW><id>12495497</id><snippet>upsert</snippet></ROW><ROW><id>12495497</id><snippet>merge</snippet></ROW><ROW><id>12495646</id><snippet>&gt;&gt;&gt; def fix_xml(string):
    """
    Tries to insert missing closing XML tags
    """
    error = True
    while error:
        try:
            # Put one tag per line
            string = string.replace('&gt;', '&gt;\n').replace('\n\n', '\n')
            root = etree.fromstring(string)
            error = False
        except etree.XMLSyntaxError as exc:
            text = str(exc)
            pattern = "Opening and ending tag mismatch: (\w+) line (\d+) and (\w+), line (\d+), column (\d+)"
            m = re.match(pattern, text)
            if m:
                # Retrieve where error took place
                missing, l1, closing, l2, c2 = m.groups()
                l1, l2, c2 = int(l1), int(l2), int(c2)
                lines = string.split('\n')
                print 'Adding closing tag &lt;{0}&gt; at line {1}'.format(missing, l2)
                missing_line = lines[l2 - 1]
                # Modified line goes back to where it was
                lines[l2 - 1] = missing_line.replace('&lt;/{0}&gt;'.format(closing), '&lt;/{0}&gt;&lt;/{1}&gt;'.format(missing, closing))
                string = '\n'.join(lines)
            else:
                raise
    print string
</snippet></ROW><ROW><id>12495646</id><snippet>&gt;&gt;&gt; s = """&lt;A&gt;
  &lt;B&gt;
    &lt;C&gt;
  &lt;/B&gt;
  &lt;B&gt;&lt;/A&gt;"""
&gt;&gt;&gt; fix_xml(s)
Adding closing tag &lt;C&gt; at line 4
Adding closing tag &lt;B&gt; at line 7
&lt;A&gt;
  &lt;B&gt;
    &lt;C&gt;
  &lt;/C&gt;
&lt;/B&gt;
  &lt;B&gt;
&lt;/B&gt;
&lt;/A&gt;
</snippet></ROW><ROW><id>12495693</id><snippet>Transcript</snippet></ROW><ROW><id>12495894</id><snippet>key</snippet></ROW><ROW><id>12495894</id><snippet>results.sort(key=lambda b: (b.item_publication_year, b.item_publication_month))
</snippet></ROW><ROW><id>12495894</id><snippet>sorted()</snippet></ROW><ROW><id>12495894</id><snippet>list()</snippet></ROW><ROW><id>12495894</id><snippet>list</snippet></ROW><ROW><id>12495894</id><snippet>sorted</snippet></ROW><ROW><id>12495894</id><snippet>results = portal_catalog.searchResults(query)
results = sorted(results, key=lambda b: (b.item_publication_year, b.item_publication_month))
</snippet></ROW><ROW><id>12495894</id><snippet>item_publication_year</snippet></ROW><ROW><id>12495894</id><snippet>item_publication_month</snippet></ROW><ROW><id>12495916</id><snippet>needle = re.compile(r'((?:months|days)\([\d]*\))')
</snippet></ROW><ROW><id>12495916</id><snippet>needle = re.compile(r'((?:months|days)\(\d+\))')
</snippet></ROW><ROW><id>12495916</id><snippet>months()</snippet></ROW><ROW><id>12495916</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>12495916</id><snippet>re.compile(r'((?:months|days)\(\d+\))', re.IGNORECASE)
</snippet></ROW><ROW><id>12495916</id><snippet>()</snippet></ROW><ROW><id>12495916</id><snippet>(?:)</snippet></ROW><ROW><id>12495916</id><snippet>?:</snippet></ROW><ROW><id>12496107</id><snippet>'--rsh=ssh -C -p 22 -i /home/bond/.ssh/test'</snippet></ROW><ROW><id>12496107</id><snippet>-C</snippet></ROW><ROW><id>12496107</id><snippet>-p</snippet></ROW><ROW><id>12496107</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12496156</id><snippet>def foo(self, inputname):
    setattr(self, inputname, #some stuff)

def foo2(self):
    self.foo('var1')
    self.foo('var2')
</snippet></ROW><ROW><id>12496156</id><snippet>self.var1</snippet></ROW><ROW><id>12496156</id><snippet>def foo (self, input):
    input[:] = #some stuff

def foo2(self):
    self.foo(self.var1)
    self.foo(self.var2)
</snippet></ROW><ROW><id>12496156</id><snippet>=</snippet></ROW><ROW><id>12496216</id><snippet>&lt;</snippet></ROW><ROW><id>12496216</id><snippet>subprocess.call</snippet></ROW><ROW><id>12496216</id><snippet>shell = True</snippet></ROW><ROW><id>12496216</id><snippet>args = ['/usr/bin/perl', '/path/to/my/perl/script.pl', '&lt;', '/path/to/my/input']
strOut = subprocess.call(' '.join(args), shell = True)
</snippet></ROW><ROW><id>12496216</id><snippet>args = ['/usr/bin/perl', '/path/to/my/perl/script.pl']
with open('path/to/my/input') as input_file:
    strOut = subprocess.call(args, stdin = input_file) 
</snippet></ROW><ROW><id>12496216</id><snippet>strOut</snippet></ROW><ROW><id>12496216</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12496216</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>12496216</id><snippet>communicate</snippet></ROW><ROW><id>12496263</id><snippet>django/contrib/admin/templates</snippet></ROW><ROW><id>12496458</id><snippet>(('a', 'b'))</snippet></ROW><ROW><id>12496458</id><snippet>('a', 'b')</snippet></ROW><ROW><id>12496458</id><snippet>(('a', 'b'),)</snippet></ROW><ROW><id>12496458</id><snippet>expression_list ::=  expression ( "," expression )* [","]</snippet></ROW><ROW><id>12496458</id><snippet>(3) * (4)</snippet></ROW><ROW><id>12496548</id><snippet>gc</snippet></ROW><ROW><id>12496595</id><snippet>numpy.lexsort</snippet></ROW><ROW><id>12496595</id><snippet>A[np.lexsort(A.T)]
</snippet></ROW><ROW><id>12496595</id><snippet>A</snippet></ROW><ROW><id>12496595</id><snippet>A[np.lexsort((A[:, 0], A[:, 1]))]
</snippet></ROW><ROW><id>12496844</id><snippet>import example.config
example.config.CONSTANT = "Better value"

from example import examplemod
examplemod.do_stuff()
# desired result!
</snippet></ROW><ROW><id>12497246</id><snippet>shell=True</snippet></ROW><ROW><id>12497246</id><snippet>foo "bar baz"</snippet></ROW><ROW><id>12497246</id><snippet>['foo', 'bar baz']</snippet></ROW><ROW><id>12497246</id><snippet>foo</snippet></ROW><ROW><id>12497246</id><snippet>bar baz</snippet></ROW><ROW><id>12497246</id><snippet>shell=False</snippet></ROW><ROW><id>12497246</id><snippet>subprocess</snippet></ROW><ROW><id>12497246</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.call(["echo", '"Hello!"'])
"Hello!"
0
&gt;&gt;&gt; subprocess.call('echo "Hello!"', shell=True)
Hello!
0
</snippet></ROW><ROW><id>12497246</id><snippet>echo</snippet></ROW><ROW><id>12497246</id><snippet>echo</snippet></ROW><ROW><id>12497246</id><snippet>rsync</snippet></ROW><ROW><id>12497286</id><snippet>list = ['75001', '75002', '75003']
for elt in list:
    params = {}
    params['elt'] = elt
    ...
    foo(params)
</snippet></ROW><ROW><id>12497286</id><snippet>foo()</snippet></ROW><ROW><id>12497303</id><snippet>there is a dog who chased a cat
someone ate pizza for lunch
the dog and a cat walk down the street toward another dog
</snippet></ROW><ROW><id>12497303</id><snippet>[dog, cat, street, pizza, lunch]</snippet></ROW><ROW><id>12497303</id><snippet>[1, 1, 0, 0, 0]  // dog 1 time, cat 1 time
[0, 0, 0, 1, 1]  // pizza 1 time, lunch 1 time
[2, 1, 1, 0, 0]  // dog 2 times, cat 1 time, street 1 time
</snippet></ROW><ROW><id>12497466</id><snippet>bool</snippet></ROW><ROW><id>12497466</id><snippet>int</snippet></ROW><ROW><id>12497466</id><snippet>False</snippet></ROW><ROW><id>12497466</id><snippet>0</snippet></ROW><ROW><id>12497466</id><snippet>bool</snippet></ROW><ROW><id>12497466</id><snippet>if</snippet></ROW><ROW><id>12497466</id><snippet>False == 0</snippet></ROW><ROW><id>12497503</id><snippet>codecs.open</snippet></ROW><ROW><id>12497503</id><snippet>open</snippet></ROW><ROW><id>12497503</id><snippet>encoding='utf-8'</snippet></ROW><ROW><id>12497503</id><snippet>oFile = codecs.open(os.path.join(parser.logpath,filename), 'w', encoding='utf-8')
</snippet></ROW><ROW><id>12497543</id><snippet>(?&lt;=name=")[a-zA-Z0-9]*
</snippet></ROW><ROW><id>12497543</id><snippet>(?&lt;=name=")</snippet></ROW><ROW><id>12497543</id><snippet>[a-zA-Z0-9]</snippet></ROW><ROW><id>12497716</id><snippet>__future__</snippet></ROW><ROW><id>12497972</id><snippet>any()</snippet></ROW><ROW><id>12497972</id><snippet>while any(os.path.exists(prefix + extension) for extension in extensions):

    # then increment prefix and try again, as in your example code
</snippet></ROW><ROW><id>12497972</id><snippet>True</snippet></ROW><ROW><id>12497972</id><snippet>False</snippet></ROW><ROW><id>12497972</id><snippet>eval()</snippet></ROW><ROW><id>12498161</id><snippet>sorted(mylist, key=lambda d: (d["id"], -d["score"]))
</snippet></ROW><ROW><id>12498285</id><snippet>to_dict()</snippet></ROW><ROW><id>12498285</id><snippet>to_dict()</snippet></ROW><ROW><id>12498285</id><snippet>to_dict</snippet></ROW><ROW><id>12498285</id><snippet>ints</snippet></ROW><ROW><id>12498285</id><snippet>def coerce(value):
    SIMPLE_TYPES = (int, long, float, bool, basestring)
    if value is None or isinstance(value, SIMPLE_TYPES):
        return value
    elif isinstance(value, datetime.date):
        return value.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    elif hasattr(value, 'to_dict'):    # hooray for duck typing!
        return value.to_dict()
    elif isinstance(value, dict):
        return dict((coerce(k), coerce(v)) for (k, v) in value.items())
    elif hasattr(value, '__iter__'):    # iterable, not string
        return map(coerce, value)
    else:
        raise ValueError('cannot encode %r' % value)
</snippet></ROW><ROW><id>12498285</id><snippet>to_dict</snippet></ROW><ROW><id>12498285</id><snippet>def to_dict(model):
    output = {}
    for key, prop in model._properties.iteritems():
        value = coerce(getattr(model, key))
        if value is not None:
            output[key] = value
    return output
</snippet></ROW><ROW><id>12498870</id><snippet>output</snippet></ROW><ROW><id>12498953</id><snippet>mdata = []               # if you prefer 1-liners, use a list comprehension
for md in soup.find_all('meta'):
    mdata.append(md)
</snippet></ROW><ROW><id>12499052</id><snippet>__future__</snippet></ROW><ROW><id>12499052</id><snippet>__future__</snippet></ROW><ROW><id>12499052</id><snippet>sys.modules</snippet></ROW><ROW><id>12499209</id><snippet>http://example.com/rest/api/2/issue/&lt;ISSUE&gt;/transitions?expand=transitions.fields</snippet></ROW><ROW><id>12499209</id><snippet>import urllib
import urllib2
import base64
import json

key = 'JIRA-123'
comment = "It's done!"
username = 'username'
password = 'password'

# See http://docs.atlassian.com/jira/REST/latest/#id199544
url = 'http://example.com/rest/api/2/issue/%s/transitions' % key
auth = base64.encodestring('%s:%s' % (username, password)).replace('\n', '')
data = json.dumps({
    'transition': {
        'id': 1000    # Resolved (for my setup)
    },
    'update': {
        'comment': [
            {
                'add': {
                    'body': comment
                }
            }
        ]
    },
})
request = urllib2.Request(url, data, {
    'Authorization': 'Basic %s' % auth,
    'Content-Type': 'application/json',
})
print urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>12499402</id><snippet>names</snippet></ROW><ROW><id>12499402</id><snippet>numbers</snippet></ROW><ROW><id>12499402</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12499402</id><snippet>dtype=None</snippet></ROW><ROW><id>12499402</id><snippet>np.genfromtxt</snippet></ROW><ROW><id>12499402</id><snippet>names=True</snippet></ROW><ROW><id>12499402</id><snippet>delimiter="\t"</snippet></ROW><ROW><id>12499402</id><snippet>names</snippet></ROW><ROW><id>12499402</id><snippet>dtype([('Name', '|S7'), ('Adress', '|S16')])</snippet></ROW><ROW><id>12499402</id><snippet>numbers</snippet></ROW><ROW><id>12499402</id><snippet>dtype([('Number', '&lt;i8'), ('Ident', '&lt;i8')])</snippet></ROW><ROW><id>12499402</id><snippet>names</snippet></ROW><ROW><id>12499402</id><snippet>"Unicorn Lane"</snippet></ROW><ROW><id>12499402</id><snippet>    (idx,) = np.nonzero(names['Adress']=="Unicorn Lane")
</snippet></ROW><ROW><id>12499402</id><snippet>np.nonzero</snippet></ROW><ROW><id>12499402</id><snippet>idx = array([0])</snippet></ROW><ROW><id>12499402</id><snippet>numbers</snippet></ROW><ROW><id>12499402</id><snippet>Ident</snippet></ROW><ROW><id>12499402</id><snippet>numbers[numbers['Ident'] == idx+1]
</snippet></ROW><ROW><id>12499402</id><snippet>idx=array([0])</snippet></ROW><ROW><id>12499402</id><snippet>Ident==1</snippet></ROW><ROW><id>12499402</id><snippet>idx</snippet></ROW><ROW><id>12499402</id><snippet>idx.size &gt;0</snippet></ROW><ROW><id>12499402</id><snippet>idx+1</snippet></ROW><ROW><id>12499402</id><snippet>numbers['Ident']==idx+1</snippet></ROW><ROW><id>12499402</id><snippet>False</snippet></ROW><ROW><id>12499402</id><snippet>numbers[False]</snippet></ROW><ROW><id>12499402</id><snippet>numbers[0]</snippet></ROW><ROW><id>12499566</id><snippet>\1</snippet></ROW><ROW><id>12499566</id><snippet>line = re.sub(r'([-+]?[0-9]*\.?[0-9]+)f', r'\1' ,line)
</snippet></ROW><ROW><id>12499566</id><snippet>findall</snippet></ROW><ROW><id>12499566</id><snippet>re.sub</snippet></ROW><ROW><id>12499566</id><snippet>r'...'</snippet></ROW><ROW><id>12499566</id><snippet>\.</snippet></ROW><ROW><id>12499566</id><snippet>.</snippet></ROW><ROW><id>12499566</id><snippet>\d</snippet></ROW><ROW><id>12499566</id><snippet>[0-9]</snippet></ROW><ROW><id>12499566</id><snippet>\d</snippet></ROW><ROW><id>12499566</id><snippet>[0-9]</snippet></ROW><ROW><id>12499566</id><snippet>10.f</snippet></ROW><ROW><id>12499566</id><snippet>re.X</snippet></ROW><ROW><id>12499566</id><snippet>line = re.sub(r'''
    ( [-+]?
      (?: \d+ (?: \.\d* )?    # 12 or 12. or 12.34
          |
          \.\d+               # .12
      )
    ) f''',
    r'\1', line, flags=re.X)
</snippet></ROW><ROW><id>12499566</id><snippet>(?:...)</snippet></ROW><ROW><id>12500326</id><snippet>extern "C"</snippet></ROW><ROW><id>12500326</id><snippet>string</snippet></ROW><ROW><id>12500326</id><snippet>string</snippet></ROW><ROW><id>12500326</id><snippet>std::string</snippet></ROW><ROW><id>12500326</id><snippet>~string</snippet></ROW><ROW><id>12500326</id><snippet>extern "C"
const char *return_string(char* name){
    cout&lt;&lt;strlen(name)&lt;&lt;endl;
    cout&lt;&lt;name&lt;&lt;endl;
    static string s = "hello ";
    s += name;
    return s.c_str();
}
</snippet></ROW><ROW><id>12500326</id><snippet>3
Tom
hello Tom
&lt;ctypes.c_char_Array_4 object at 0x11011c7a0&gt;
</snippet></ROW><ROW><id>12500326</id><snippet>string</snippet></ROW><ROW><id>12500326</id><snippet>ctypes</snippet></ROW><ROW><id>12500326</id><snippet>char*</snippet></ROW><ROW><id>12500326</id><snippet>const_cast&lt;char*&gt;(name.c_str())</snippet></ROW><ROW><id>12500326</id><snippet>name.c_str()</snippet></ROW><ROW><id>12500326</id><snippet>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

extern "C" string return_string(char* name);

int main(int argc, char *argv[]) {
  string name("Tom");
  string s(return_string(const_cast&lt;char *&gt;(name.c_str())));
  cout &lt;&lt; s &lt;&lt; "\n";
  cout &lt;&lt; name &lt;&lt; "\n";
  return 0;
}
</snippet></ROW><ROW><id>12500326</id><snippet>~string</snippet></ROW><ROW><id>12500446</id><snippet>pyplot.fignum_exists</snippet></ROW><ROW><id>12500446</id><snippet>if self.fig is None or not pyplot.fignum_exists(self.fig.number):
    self.fig = pyplot.figure()
# self.fig will now be active, either via an old still-open figure or a newly-created one
</snippet></ROW><ROW><id>12500446</id><snippet>self.fig</snippet></ROW><ROW><id>12500446</id><snippet>pyplot.gcf()</snippet></ROW><ROW><id>12500446</id><snippet>pyplot.figure()</snippet></ROW><ROW><id>12500446</id><snippet>do_stuff</snippet></ROW><ROW><id>12500446</id><snippet>pyplot.gcf()</snippet></ROW><ROW><id>12500446</id><snippet>def do_stuff(self):
    # make plausible data
    fig = pyplot.gcf()
    fig.clf()
    self.ax = fig.add_subplot(111)
    # etc.
</snippet></ROW><ROW><id>12500446</id><snippet>gcf</snippet></ROW><ROW><id>12500551</id><snippet>class InstallPage_Dyn(wx.wizard.PyWizardPage):
    def __init__(self, parent, title):
        wx.wizard.PyWizardPage.__init__(self, parent)
        self.title = wx.StaticText(self,-1,title)
        self.title.SetFont(wx.Font(40,wx.FONTFAMILY_DEFAULT,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_BOLD))
        self.next = self.prev = None
    def SetPrev(self,prev):
        self.prev = prev
    def GetPrev(self):
        return self.prev

class InstallPage0(wx.wizard.PyWizardPage):
    def __init__(self, parent, title,optional_panels = {}):
    wx.wizard.PyWizardPage.__init__(self, parent)
    self.prev = self
    self.next = optional_panels.values()[0]
    self.box = wx.RadioBox (self, -1, 'Choose one of the options below and hit Next\n', choices=optional_panels.keys(), style = wx.VERTICAL | wx.EXPAND)
    self.opts = optional_panels.keys()
    self.pages   = optional_panels.values()
    for p in self.pages:
        p.SetPrev(self)
    self.next = self.pages[0]
    self.optional_panels = optional_panels

    def GetNext(self):
        return self.pages[self.box.GetSelection()]
    def GetPrev(self):
        return self.prev
...
page0 = InstallPage0(wizard, "Installer",{'install':install1,'upgrade':upgrade1,'remove':remove1})

wizard.RunWizard(page0)
#app.MainLoop()
</snippet></ROW><ROW><id>12500551</id><snippet>wiz.py</snippet></ROW><ROW><id>12500551</id><snippet>import wx
import wx.wizard

class InstallPage_Dyn(wx.wizard.PyWizardPage):
    def __init__(self, parent, title):
        wx.wizard.PyWizardPage.__init__(self, parent)
    self._title = title
    self.title = wx.StaticText(self,-1,title)
    self.title.SetFont(wx.Font(40,wx.FONTFAMILY_DEFAULT,wx.FONTSTYLE_NORMAL,wx.FONTWEIGHT_BOLD))
        self.next = self.prev = None
    def SetPrev(self,prev):
        self.prev = prev
    def GetPrev(self):
        return self.prev

class InstallPage0(wx.wizard.PyWizardPage):
    def __init__(self, parent, title,optional_panels = {}):
    wx.wizard.PyWizardPage.__init__(self, parent)
    self.prev = self
    self.next = optional_panels[0]
    options = [p._title for p in optional_panels]
    self.box = wx.RadioBox (self, -1, 'Choose one of the options below and hit Next\n', choices=options, style = wx.VERTICAL | wx.EXPAND)
    self.pages   = optional_panels
    for p in self.pages:
        p.SetPrev(self)
    self.next = install1
    self.optional_panels = optional_panels
    def SetPrev(self, prev):
        self.prev = prev
        return self.prev
    def GetNext(self):
        return self.pages[self.box.GetSelection()]
    def GetPrev(self):
        return self.prev


# Define application and create the wizard
app = wx.App(redirect=False)

wizard = wx.wizard.Wizard(None, -1, "Installer")
wizard.SetPageSize((500,350))

# User selected install. Create the pages
install1 = InstallPage_Dyn(wizard, "Install")
upgrade1 = InstallPage_Dyn(wizard, "Upgrade")
remove1 = InstallPage_Dyn(wizard, "Remove")

# Create page instances
page0 = InstallPage0(wizard, "Installer",[install1,upgrade1,remove1])

wizard.RunWizard(page0)
</snippet></ROW><ROW><id>12500850</id><snippet>Car</snippet></ROW><ROW><id>12500850</id><snippet>mylist = ['BMW', 'Lamborghini', 'Porsche']
cars = Car.objects.filter(name__in=mylist)
self.fields['possible_cars'].queryset = cars
</snippet></ROW><ROW><id>12501088</id><snippet>jobs</snippet></ROW><ROW><id>12501088</id><snippet>subprocess.Popen(['jobs'], shell=True)</snippet></ROW><ROW><id>12501088</id><snippet>/proc</snippet></ROW><ROW><id>12501088</id><snippet>ctypes</snippet></ROW><ROW><id>12501282</id><snippet>string</snippet></ROW><ROW><id>12501282</id><snippet>str</snippet></ROW><ROW><id>12501282</id><snippet>string.replace(s, old, new)</snippet></ROW><ROW><id>12501282</id><snippet>s.replace(old, new)</snippet></ROW><ROW><id>12501282</id><snippet>s</snippet></ROW><ROW><id>12501282</id><snippet>string</snippet></ROW><ROW><id>12501282</id><snippet>str.replace(self, old, new)</snippet></ROW><ROW><id>12501282</id><snippet>str</snippet></ROW><ROW><id>12501282</id><snippet>s.replace(old, new)</snippet></ROW><ROW><id>12501282</id><snippet>s</snippet></ROW><ROW><id>12501282</id><snippet>self</snippet></ROW><ROW><id>12501282</id><snippet>str.replace(s, old, new)</snippet></ROW><ROW><id>12501282</id><snippet>s.replace(old, new)</snippet></ROW><ROW><id>12501282</id><snippet>s</snippet></ROW><ROW><id>12501282</id><snippet>str</snippet></ROW><ROW><id>12501282</id><snippet>string.replace(old, new)</snippet></ROW><ROW><id>12501282</id><snippet>string</snippet></ROW><ROW><id>12501282</id><snippet>string.replace</snippet></ROW><ROW><id>12501282</id><snippet>str</snippet></ROW><ROW><id>12501282</id><snippet>bytes</snippet></ROW><ROW><id>12501282</id><snippet>unicode</snippet></ROW><ROW><id>12501282</id><snippet>string.digits</snippet></ROW><ROW><id>12501449</id><snippet>conn = sqlite3.connect(db, detect_types=sqlite3.PARSE_DECLTYPES)
</snippet></ROW><ROW><id>12501644</id><snippet>jQuery.load()</snippet></ROW><ROW><id>12501644</id><snippet>class CalculateCost(webapp.RequestHandler):
    def get(self):
        shipping_method = self.request.get('shipping_method')
        # calculate your cost here
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('%d' % cost)
</snippet></ROW><ROW><id>12501850</id><snippet>python.exe -c "import sys; print sys.argv[1:]" *.txt
</snippet></ROW><ROW><id>12501850</id><snippet>['*.txt']
</snippet></ROW><ROW><id>12501850</id><snippet>glob</snippet></ROW><ROW><id>12501850</id><snippet>from glob import glob
from sys import argv

for filename in glob(argv[1]):
    print filename
</snippet></ROW><ROW><id>12502542</id><snippet>from django.db import models
from django.utils.translation import ugettext_lazy as _
from django.contrib.auth.models import User

from userena.models import UserenaLanguageBaseProfile

import datetime

class Profile(UserenaLanguageBaseProfile):
    """ Default profile """
    GENDER_CHOICES = (
        (1, _('Male')),
        (2, _('Female')),)

    user = models.OneToOneField(User,
                                unique=True,
                                verbose_name=_('user'),
                                related_name='profile') 

    gender = models.PositiveSmallIntegerField(_('gender'),
                                              choices=GENDER_CHOICES,
                                              blank=True,
                                              null=True)
    website = models.URLField(_('website'), blank=True, verify_exists=True)
    location =  models.CharField(_('location'), max_length=255, blank=True)
    birth_date = models.DateField(_('birth date'), blank=True, null=True)
    about_me = models.TextField(_('about me'), blank=True)
</snippet></ROW><ROW><id>12502631</id><snippet>cma1 = FormSet.GetFieldValue(CurrentForm, "ANL_CMA1_NUM_CLOSED_SALES")
cma2 = FormSet.GetFieldValue(CurrentForm, "ANL_CMA2_NUM_CLOSED_SALES")
delta = float(cma2 - cma1) / cma1
FormSet.SetFieldValue(CurrentForm, "ANL_CHG_NUM_CLOSED_SALES", delta*100.0)
</snippet></ROW><ROW><id>12502681</id><snippet>getlist()</snippet></ROW><ROW><id>12502681</id><snippet>multiselect = request.form.getlist('mymultiselect')
</snippet></ROW><ROW><id>12502681</id><snippet>[]</snippet></ROW><ROW><id>12502681</id><snippet>[]</snippet></ROW><ROW><id>12502720</id><snippet>following</snippet></ROW><ROW><id>12502720</id><snippet>//p[preceding::center/h3 and following::a[@href="index.htm"]]
</snippet></ROW><ROW><id>12502725</id><snippet>self.request.get('cases')</snippet></ROW><ROW><id>12502725</id><snippet>get_all('cases')</snippet></ROW><ROW><id>12502725</id><snippet>def post(self):
    cases=self.request.get_all('cases')
    while cases:
        logging.info("cases: %s " % cases)
        case=cases.pop()
</snippet></ROW><ROW><id>12502725</id><snippet>def post(self):
    cases=self.request.get_all('cases')
    logging.info("cases: %s " % cases)
    for case in cases:
        # do something with case.
</snippet></ROW><ROW><id>12503100</id><snippet>  fieldLength = 50
  # select all the chars
  self.device.press('KEYCODE_SHIFT_LEFT', MonkeyDevice.DOWN)
  for i in range(fieldLength):
     self.device.press('KEYCODE_DPAD_LEFT', MonkeyDevice.DOWN_AND_UP)
     MonkeyRunner.sleep(1)
  self.device.press('KEYCODE_SHIFT_LEFT', MonkeyDevice.UP)

  # delete them
  self.device.press('KEYCODE_DEL', MonkeyDevice.DOWN_AND_UP)
</snippet></ROW><ROW><id>12503235</id><snippet>@property</snippet></ROW><ROW><id>12503235</id><snippet>@property</snippet></ROW><ROW><id>12503235</id><snippet>@property</snippet></ROW><ROW><id>12503235</id><snippet>@property
def tag(self):
    try:
        return self._db_values["tag"]
    except KeyError:
        pass
   val = self._db.get("tag")
   self._db_values["tag"] = val
   return val
</snippet></ROW><ROW><id>12503235</id><snippet>Undefined = object()

class DBValue(object):
    def __init__(self, column_name):
        self.column_name = column_name
        self.value = Undefined

    def __get__(self, instance, owner):
        if self.value is Undefined:
            self.value = instance._db.get(self.column_name)
        return self.value

class Foo(object):
    tag = DBValue("tag")
</snippet></ROW><ROW><id>12503646</id><snippet>os.walk</snippet></ROW><ROW><id>12503685</id><snippet>for attr in ('thing', 'owner', 'color'):
    for item in bin:
        print '%-10s'%getattr(item, attr),
    print
</snippet></ROW><ROW><id>12503685</id><snippet>for atts in ('thing', 'owner', 'color'):
    print ' '.join('%-10s'%getattr(item, attr) for item in bin)
</snippet></ROW><ROW><id>12503765</id><snippet>pip</snippet></ROW><ROW><id>12503765</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>12503765</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>12503765</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>12503765</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/pip</snippet></ROW><ROW><id>12503765</id><snippet>pip</snippet></ROW><ROW><id>12503765</id><snippet>lxml</snippet></ROW><ROW><id>12503765</id><snippet>pip</snippet></ROW><ROW><id>12503839</id><snippet>&lt;input type="hidden"/&gt;</snippet></ROW><ROW><id>12503839</id><snippet>&lt;form action="/unexpected" method="post" &gt;
&lt;input type="hidden" name="location_id" value="{{ location_id }}"/&gt;
{% for item in cases %}
  &lt;input type="hidden" name="cases" value="{{ item }}" /&gt;
{% endfor %}
</snippet></ROW><ROW><id>12503839</id><snippet>&lt;input /&gt;</snippet></ROW><ROW><id>12503839</id><snippet>&lt;../&gt;</snippet></ROW><ROW><id>12503924</id><snippet>zip()</snippet></ROW><ROW><id>12503924</id><snippet>fromfiles2</snippet></ROW><ROW><id>12503924</id><snippet>&gt;&gt;&gt; fromfiles2 = [['Line1','Line2','Line3'],['Line01','Line02','Line03']]
&gt;&gt;&gt; outputlines = zip(*fromfiles2)
&gt;&gt;&gt; for l in outputlines:
...     print "\t".join(l)
...
Line1   Line01
Line2   Line02
Line3   Line03
</snippet></ROW><ROW><id>12503924</id><snippet>zip</snippet></ROW><ROW><id>12503924</id><snippet>&gt;&gt;&gt; l1 = [1, 2, 3]
&gt;&gt;&gt; l2 = ['a', 'b', 'c']
&gt;&gt;&gt; zip(l1, l2)
[(1, 'a'), (2, 'b'), (3, 'c')]
</snippet></ROW><ROW><id>12503924</id><snippet>zip</snippet></ROW><ROW><id>12503924</id><snippet>itertools.izip</snippet></ROW><ROW><id>12503924</id><snippet>&gt;&gt;&gt; from itertools import izip
&gt;&gt;&gt; for l in izip(*fromfiles2):
...     print "\t".join(l)
...
Line1   Line01
Line2   Line02
Line3   Line03
</snippet></ROW><ROW><id>12503924</id><snippet>&gt;&gt;&gt; fromfiles3 = [['Line1','Line2','Line3'],['Line01','Line02']]
&gt;&gt;&gt; for l in izip_longest(*fromfiles3, fillvalue="Nothing"):
...     print "\t".join(l)
...
Line1   Line01
Line2   Line02
Line3   Nothing
</snippet></ROW><ROW><id>12503982</id><snippet>from django import template
register = template.Library()

@register.simple_tag(takes_context=True)
def stop_repeat(context, event):
    """
    Finds various types of links embedded in feed text and creates links out of them.
    """
    if event.date:
        if (event.get_date_time_location(), event.id) in context:
            return ''
        else:
            context[(event.get_date_time_location(), event.id)] = (event.get_date_time_location(), event.id)
            return event.get_date_time_location()
</snippet></ROW><ROW><id>12504142</id><snippet>newdict = dict((k,v) for k,v in d.iteritems() if v &gt; 20)
</snippet></ROW><ROW><id>12504142</id><snippet>newdict = {k: v for k,v in d.iteritems() if v &gt; 20}
</snippet></ROW><ROW><id>12504142</id><snippet>d = {k: v for k,v in d.iteritems() if v &gt; 20}</snippet></ROW><ROW><id>12504142</id><snippet>d.clear()
d.update({k: v for k,v in d.iteritems() if v &gt; 20})
</snippet></ROW><ROW><id>12504142</id><snippet>d</snippet></ROW><ROW><id>12504142</id><snippet>timeit</snippet></ROW><ROW><id>12504142</id><snippet>from timeit import timeit

n = 2
N = "10**7"
mod = "9999999"
gc = "False"
print "N: %s; mod: %s; garbage collection: %s" % (N, mod, gc)

setup ="""
N = %s
mod = %s
d = {x:1 for x in xrange(N)}
if %s:
    gc.enable()""" % (N, mod, gc)

t = timeit(
'd = {k:v for k, v in d.iteritems() if not k % mod}',
setup=setup,
number=n)
print "%s times method 1 (dict comp): %.3f s" % (n, t)

t = timeit(
'''
for k, v in d.items():
    if k % mod:
        del d[k]
''',
setup=setup,
number=n)
print "%s times method 2 (key deletion within for loop over d.items()): %.3f s" % (n, t)

t = timeit('''
removekeys = [k for k, v in d.iteritems() if k % mod]
for k in removekeys:
    del d[k]
''',
setup=setup,
number=n)
print "%s times method 3 (key deletion after list comp): %.3f s" %(n, t)
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 1; garbage collection: True
2 times method 1 (dict comp): 4.701
2 times method 2 (key deletion within for loop over d.items()): 15.782
2 times method 3 (key deletion after list comp): 2.024
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 1; garbage collection: False
2 times method 1 (dict comp): 4.701
2 times method 2 (key deletion within for loop over d.items()): 4.268
2 times method 3 (key deletion after list comp): 2.027
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 2; garbage collection: True
2 times method 1 (dict comp): 3.449 s
2 times method 2 (key deletion within for loop over d.items()): 12.862 s
2 times method 3 (key deletion after list comp): 2.765 s
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 2; garbage collection: False
2 times method 1 (dict comp): 3.395 s
2 times method 2 (key deletion within for loop over d.items()): 4.175 s
2 times method 3 (key deletion after list comp): 2.893 s
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 9999999; garbage collection: True
2 times method 1 (dict comp): 1.217 s
2 times method 2 (key deletion within for loop over d.items()): 9.298 s
2 times method 3 (key deletion after list comp): 2.141 s
</snippet></ROW><ROW><id>12504142</id><snippet>N: 10**7; mod: 9999999; garbage collection: False
2 times method 1 (dict comp): 1.213 s
2 times method 2 (key deletion within for loop over d.items()): 3.168 s
2 times method 3 (key deletion after list comp): 2.141 s
</snippet></ROW><ROW><id>12504219</id><snippet>u</snippet></ROW><ROW><id>12504219</id><snippet>In [1]: line = u'אבגד'

In [2]: reversed = line[::-1]

In [2]: print reversed
דגבא
</snippet></ROW><ROW><id>12504219</id><snippet>import codecs

w1 = codecs.open("~/fileName", "r", "utf-8")
w1.write(reversed)
</snippet></ROW><ROW><id>12504219</id><snippet>fileName</snippet></ROW><ROW><id>12504219</id><snippet>codecs</snippet></ROW><ROW><id>12504219</id><snippet>reversed</snippet></ROW><ROW><id>12504219</id><snippet>utf-8</snippet></ROW><ROW><id>12504219</id><snippet>with open('~/fileName', 'w') as f:
    f.write(reversed.encode('utf-8'))
</snippet></ROW><ROW><id>12504497</id><snippet>key</snippet></ROW><ROW><id>12504497</id><snippet>counter</snippet></ROW><ROW><id>12504497</id><snippet>total_unique = len(counter.keys())
</snippet></ROW><ROW><id>12504497</id><snippet>total_unique = len(counter)
</snippet></ROW><ROW><id>12504514</id><snippet>HttpResponse</snippet></ROW><ROW><id>12504514</id><snippet>if</snippet></ROW><ROW><id>12504514</id><snippet>return render_to_response(...)
</snippet></ROW><ROW><id>12504514</id><snippet>else</snippet></ROW><ROW><id>12504514</id><snippet>return(login)
</snippet></ROW><ROW><id>12504514</id><snippet>login</snippet></ROW><ROW><id>12504514</id><snippet>HttpResponse</snippet></ROW><ROW><id>12504514</id><snippet>return login(request)
</snippet></ROW><ROW><id>12504514</id><snippet>from django.http import HttpResponseRedirect
return HttpResponseRedirect('/login/')
</snippet></ROW><ROW><id>12504514</id><snippet>/login/</snippet></ROW><ROW><id>12504527</id><snippet>fill_value</snippet></ROW><ROW><id>12504527</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; Sr1 = pd.Series([1,2,3,4], index = ['A', 'B', 'C', 'D'])
&gt;&gt;&gt; Sr2 = pd.Series([5,6], index = ['A', 'C'])
&gt;&gt;&gt; Sr1+Sr2
A     6
B   NaN
C     9
D   NaN
&gt;&gt;&gt; Sr1.add(Sr2, fill_value=0)
A    6
B    2
C    9
D    4
</snippet></ROW><ROW><id>12504646</id><snippet>HTTPForbidden</snippet></ROW><ROW><id>12504646</id><snippet>HTTPForbidden</snippet></ROW><ROW><id>12504646</id><snippet>class WeDontLikeYourFace(HTTPForbidden):
    pass

def my_view(context, request):
    if request['face'] != 'beautyful':
        raise WeDontLikeYourFace("go away")
</snippet></ROW><ROW><id>12504767</id><snippet>def parse_funky_numstring(s):
    neg = s.count('-') % 2
    s = s.replace('-', '0')
    num = float(s)
    return -num if neg else num
</snippet></ROW><ROW><id>12504767</id><snippet>num = "{:0.2f}".format(parse_funky_numstring(s))
</snippet></ROW><ROW><id>12505031</id><snippet>In [23]: %logstart /tmp/session.log
Activating auto-logging. Current session state plus future input saved.
Filename       : /tmp/session.log
Mode           : backup
Output logging : False
Raw input log  : False
Timestamping   : False
State          : active

In [24]: x = 1

In [25]: %logstop

In [26]: quit()
Do you really want to exit ([y]/n)? y
</snippet></ROW><ROW><id>12505031</id><snippet>% ipython -log /tmp/session.log 
Activating auto-logging. Current session state plus future input saved.
Filename       : ipython_log.py
...

In [1]: x
Out[1]: 1
</snippet></ROW><ROW><id>12505135</id><snippet>def test():
    exec (code, globals())
    f()
</snippet></ROW><ROW><id>12505143</id><snippet>    def dehydrate(self, bundle):
        bundle.data['votes'] = Vote.objects.filter(object_id=bundle.obj.id, content_type=n).count() // or use aggregate to get total votes.
        return bundle.date
</snippet></ROW><ROW><id>12505561</id><snippet>OrderedDict</snippet></ROW><ROW><id>12505630</id><snippet># ...
windows = [{'script': "test1.py"}],
#...
</snippet></ROW><ROW><id>12505630</id><snippet>windows</snippet></ROW><ROW><id>12505630</id><snippet>console</snippet></ROW><ROW><id>12505630</id><snippet>from distutils.core import setup
import py2exe, sys, os

sys.argv.append('py2exe')

setup(
    options = {'py2exe': {'bundle_files': 3}},
    console = [{'script': "test1.py"}],
    zipfile = None,
)
</snippet></ROW><ROW><id>12506044</id><snippet>import functools

@functools.lru_cache(maxsize=1000)
def fun(...):
</snippet></ROW><ROW><id>12506044</id><snippet>lru_cache</snippet></ROW><ROW><id>12506091</id><snippet>import urllib2
response = urllib2.urlopen(request.to_url())
response_body = response.read()    # in case you need it
</snippet></ROW><ROW><id>12506091</id><snippet>import urllib2
urllib2_req = urllib2.Request(request.url, request.to_postdata())
response = urllib2.urlopen(urllib2_req)
response_body = response.read()    # in case you need it
</snippet></ROW><ROW><id>12506205</id><snippet>s = "I have a book to read."
print(s.partition("book")[0])
</snippet></ROW><ROW><id>12506205</id><snippet>print(''.join(s.partition("book")[:2]))
</snippet></ROW><ROW><id>12506350</id><snippet>&gt;&gt;&gt; tup = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; for i,j in enumerate(tup):
...  print a[:i]+[j]+a[i+2:]
... 
[(1, 2), 3, 4, 5, 6, 7]
[1, (2, 3), 4, 5, 6, 7]
[1, 2, (3, 4), 5, 6, 7]
[1, 2, 3, (4, 5), 6, 7]
[1, 2, 3, 4, (5, 6), 7]
[1, 2, 3, 4, 5, (6, 7)]
</snippet></ROW><ROW><id>12506350</id><snippet>&gt;&gt;&gt; for i,j in enumerate(tup):
...  print a[:i]+[tuple(a[j[0]-1:j[1]])]+a[i+2:]
... 
[(1, 2), 3, 4, 5, 6, 7]
[1, (2, 3), 4, 5, 6, 7]
[1, 2, (3, 4), 5, 6, 7]
[1, 2, 3, (4, 5), 6, 7]
[1, 2, 3, 4, (5, 6), 7]
[1, 2, 3, 4, 5, (6, 7)]
</snippet></ROW><ROW><id>12506350</id><snippet>tup</snippet></ROW><ROW><id>12506350</id><snippet>a</snippet></ROW><ROW><id>12506538</id><snippet>from yelp.business import request as yelp_req

def my_request_handler(request):
    json_from_yelp = yelp_req(...
    # do stuff and return a response
</snippet></ROW><ROW><id>12506538</id><snippet>requests</snippet></ROW><ROW><id>12506803</id><snippet>import MySQLdb
from getpass import getpass

hostip = raw_input("Input your sql Ip:")
username = raw_input("Input your sql username:")
password = getpass("Input your password:")
dbname = raw_input("Input your dbname :")

conn = MySQLdb.connect(hostip, username, password, dbname)
cur = conn.cursor()
cur.execute("SHOW TABLES")
tablenames = [i[0] for i in cur.fetchall()]
print tablenames
</snippet></ROW><ROW><id>12506876</id><snippet>def initialize(self):
    """Hook for subclass initialization.

    A dictionary passed as the third argument of a url spec will be
    supplied as keyword arguments to initialize().

    Example::

        class ProfileHandler(RequestHandler):
            def initialize(self, database):
                self.database = database

            def get(self, username):
                ...

        app = Application([
            (r'/user/(.*)', ProfileHandler, dict(database=database)),
            ])
    """
    pass
</snippet></ROW><ROW><id>12507305</id><snippet>incSpeed</snippet></ROW><ROW><id>12507305</id><snippet>self</snippet></ROW><ROW><id>12507305</id><snippet>def incSpeed(self, event):
    print("Test")
</snippet></ROW><ROW><id>12507344</id><snippet>g = eval("Word(alphas) + Word(nums)")
</snippet></ROW><ROW><id>12507345</id><snippet>obj.attrib(...)</snippet></ROW><ROW><id>12507345</id><snippet>tmp = obj.attrib
tmp(...)
</snippet></ROW><ROW><id>12507345</id><snippet>set</snippet></ROW><ROW><id>12507345</id><snippet>class CallableString(str):
    def __new__(class_, set, value):
        inst = str.__new__(class_, value)
        inst._set = set
        return inst
    def __call__(self, value):
        self._set(value)

class A(object):
    def __init__(self):
        self._attrib = "foo"
    def get_attrib(self):
        return CallableString(self.set_attrib, self._attrib)
    def set_attrib(self, value):
        try:
            value = value._value
        except AttributeError:
            pass
        self._attrib = value
    attrib = property(get_attrib, set_attrib)

a = A()
print a.attrib
a.attrib = "bar"
print a.attrib
a.attrib("baz")
print a.attrib
</snippet></ROW><ROW><id>12507379</id><snippet>p4.run_opened</snippet></ROW><ROW><id>12507379</id><snippet>'haveRev'
'rev'
'clientFile'
'client'
'user'
'action'
'type'
'depotFile'
'change'
</snippet></ROW><ROW><id>12507379</id><snippet>import P4
p4 = P4.P4()
p4.connect()
p4.run_opened()[0]['action']
p4.disconnect()
</snippet></ROW><ROW><id>12507453</id><snippet>walk</snippet></ROW><ROW><id>12507453</id><snippet>def walk(node):
    for key, item in node.items():
        if item is a collection:
            walk(item)
        else:
            It is a leaf, do your thing
</snippet></ROW><ROW><id>12507875</id><snippet>import functools

@functools.lru_cache(maxsize=None)
def doit(...):
    ...
</snippet></ROW><ROW><id>12507951</id><snippet>git status</snippet></ROW><ROW><id>12507951</id><snippet>git commit</snippet></ROW><ROW><id>12507951</id><snippet>import argparse
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='sub-command help')

allon_parser = subparsers.add_parser('allon',
    help='Toggles all output pins to ON.')
allon_parser.set_defaults(func=do_allon)

alloff_parser = subparsers.add_parser('alloff',
    help="Toggles all output pins to OFF.")
alloff_parser.set_defaults(func=do_alloff)

cont_parser = subparsers.add_parser('cont',
    help="Toggles all output pins continously on and off.")
cont_parser.set_defaults(func=do_cont)

args = parser.parse_args()
# Call the associated `func` function
args.func()
</snippet></ROW><ROW><id>12507951</id><snippet>set_defaults(func=...)</snippet></ROW><ROW><id>12507951</id><snippet>args</snippet></ROW><ROW><id>12507951</id><snippet>func</snippet></ROW><ROW><id>12507951</id><snippet>--help</snippet></ROW><ROW><id>12507951</id><snippet>usage: PROG [-h] {cont,alloff,allon} ...

positional arguments:
  {cont,alloff,allon}  sub-command help
    allon              Toggles all output pins to ON.
    alloff             Toggles all output pins to OFF.
    cont               Toggles all output pins continously on and off.

optional arguments:
  -h, --help           show this help message and exit
</snippet></ROW><ROW><id>12508030</id><snippet>&gt;&gt;&gt; b = bytearray(10)
&gt;&gt;&gt; c = memoryview(b)[5:]
&gt;&gt;&gt; c[:] = bytearray(1 for d in c)
&gt;&gt;&gt; b
bytearray(b'\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01')
</snippet></ROW><ROW><id>12508030</id><snippet>c.tobytes()</snippet></ROW><ROW><id>12508030</id><snippet>c</snippet></ROW><ROW><id>12508030</id><snippet>&gt;&gt;&gt; c.tobytes()
'\x01\x01\x01\x01\x01'
&gt;&gt;&gt; bytearray(c)
bytearray(b'\x01\x01\x01\x01\x01')
</snippet></ROW><ROW><id>12508037</id><snippet>rewind/__init__.py</snippet></ROW><ROW><id>12508037</id><snippet>__import__('pkg_resources').declare_namespace(__name__)
</snippet></ROW><ROW><id>12508037</id><snippet>setup.py</snippet></ROW><ROW><id>12508037</id><snippet>setup(
    # ...
    namespace_packages  = ["rewind"]
)
</snippet></ROW><ROW><id>12508037</id><snippet>setuptools</snippet></ROW><ROW><id>12508037</id><snippet>distribute</snippet></ROW><ROW><id>12508037</id><snippet>from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)
</snippet></ROW><ROW><id>12508037</id><snippet>declare_namespace()</snippet></ROW><ROW><id>12508287</id><snippet>import _posixsubprocess</snippet></ROW><ROW><id>12508420</id><snippet>sysconfig.get_config_var('SO')</snippet></ROW><ROW><id>12508437</id><snippet>def function1():
    # do something
    function2()

def function2():
    # do something else
</snippet></ROW><ROW><id>12508963</id><snippet>logging.Logger.manager.loggerDict</snippet></ROW><ROW><id>12509097</id><snippet>ns0</snippet></ROW><ROW><id>12509097</id><snippet>&lt;child&gt;</snippet></ROW><ROW><id>12509097</id><snippet>&lt;ns0:parent xmlns:ns0="parent-space"&gt;
    &lt;ns0:child xmlns:ns0="child-space"/&gt;
&lt;/ns0:parent&gt;
</snippet></ROW><ROW><id>12509097</id><snippet>&lt;ns0:parent xmlns:ns0="parent-space"&gt;
    &lt;ns1:child xmlns:ns1="child-space"/&gt;
&lt;/ns0:parent&gt;
</snippet></ROW><ROW><id>12509097</id><snippet>&lt;parent xmlns="parent-space"&gt;
    &lt;child xmlns="child-space"/&gt;
&lt;/parent&gt;
</snippet></ROW><ROW><id>12509097</id><snippet>parent</snippet></ROW><ROW><id>12509097</id><snippet>child</snippet></ROW><ROW><id>12509097</id><snippet>from lxml import etree

NS_MAP = {
    "p" : "http://parent-space.com/",
    "c" : "http://child-space.com/"
}
NS_PARENT = "{%s}" % NS_MAP["parent"]
NS_CHILD = "{%s}" % NS_MAP["child"]

parent = etree.Element(NS_PARENT + "parent", nsmap=NS_MAP)
child  = etree.SubElement(parent, NS_CHILD + "child")
child.text = "Some Text"

print etree.tostring(parent, pretty_print=True)
</snippet></ROW><ROW><id>12509097</id><snippet>&lt;p:parent xmlns:p="http://parent-space.com/" xmlns:c="http://child-space.com/"&gt;
  &lt;c:child&gt;Some Text&lt;/c:child&gt;
&lt;/p:parent&gt;
</snippet></ROW><ROW><id>12509178</id><snippet>ssh me@server -i my_key "nohup python script.py &gt;/dev/null 2&gt;&amp;1"
</snippet></ROW><ROW><id>12509178</id><snippet>export DISPLAY=:0 &amp;&amp; xhost +
</snippet></ROW><ROW><id>12509547</id><snippet>?</snippet></ROW><ROW><id>12509547</id><snippet>??</snippet></ROW><ROW><id>12509547</id><snippet>In [1]: import sphinx.writers &lt;TAB&gt;
# see available modules and packages - narrow down

In [1]: import shpinx.writers.manpage as manpage
In [2]: manpage.&lt;TAB&gt;
# list and complete on the module's contents 

In [3]: manpage.Writer?
# nicely formatted docstring follows

In [4]: manpage.Writer??
# nicely formatted source code follows

In [5]: %edit manpage
# open module in editor
# it really helps if you use something like ctags at this point

In [6]: %edit manpage.Writer
# open module in editor - jump to class Writer
</snippet></ROW><ROW><id>12509547</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>12509754</id><snippet>read_device</snippet></ROW><ROW><id>12509754</id><snippet>my_64_array = my_64_array[:32] + read_device(my_64_array[31:31+16]) + my_64_array[31+16:]
# equivalently, but around 33% faster for even small arrays (length 10), 3 times faster for (length 50)...
my_64_array[31:31+16] = read_device(my_64_array[31:31+16])
</snippet></ROW><ROW><id>12509754</id><snippet>def read_device(the_64_array, start=31, end=47):
   # some code
   the_64_array[start:end] = ... #modifies `in_array` in place
</snippet></ROW><ROW><id>12509754</id><snippet>read_device(my_64_array)</snippet></ROW><ROW><id>12509754</id><snippet>read(my_64_array, 31, 31+16)</snippet></ROW><ROW><id>12510269</id><snippet>childNodes</snippet></ROW><ROW><id>12510269</id><snippet>childNodes</snippet></ROW><ROW><id>12510269</id><snippet>&gt;&gt;&gt; lst = [1, 2, 3]
&gt;&gt;&gt; for i, elem in enumerate(lst):
...    print i, elem
...    del lst[i]
...    
0 1
1 3
</snippet></ROW><ROW><id>12510269</id><snippet>[:]</snippet></ROW><ROW><id>12510269</id><snippet>for elementNode in docToInclude.documentElement.childNodes[:]:
    print ("node name : " ,  elementNode.nodeName)
    node.parentNode.insertBefore(elementNode, insertPosition) 
</snippet></ROW><ROW><id>12510269</id><snippet>from xml.etree import ElementTree as ET

etree = ET.fromstring(data)
for element in etree.findall('messageList'):
    print element
</snippet></ROW><ROW><id>12510310</id><snippet>for i in range (0, 4):
      localdevice = cmd("some command create name ARRAY_456_%d" % i)
</snippet></ROW><ROW><id>12510310</id><snippet>cmd = 'some command create name'
for i in range(4):
    name = 'ARRAY_456_%d' % i # will create ARRAY_456_0, ...
    localdevice = cmd('%(cmd)s %(name)s' % dict(cmd=cmd, name=name)) # will merge the command with the name using keywords
</snippet></ROW><ROW><id>12510460</id><snippet>import unittest
try:
    import PyQt4
    # the rest of the imports


    # actual tests go here.
    class TestDataEntryMixin(unittest.TestCase):
        def test_somefeature(self):
            # ....

except ImportError, e:
    if e.message.find('PyQt4') &gt;= 0:
        class TestMissingDependency(unittest.TestCase):

            @unittest.skip('Missing dependency - ' + e.message)
            def test_fail():
                pass
    else:
        raise

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>12510460</id><snippet>test_fail (test_openihm_gui_interface_mixins.TestMissingDependency) ... skipped 'Missing dependency - No module named PyQt4'
</snippet></ROW><ROW><id>12510559</id><snippet># -*- coding: utf-8 -*-
import requests

xml = """&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;a&gt;б&lt;/a&gt;"""
headers = {'Content-Type': 'application/xml'} # set what your server accepts
print requests.post('http://httpbin.org/post', data=xml, headers=headers).text
</snippet></ROW><ROW><id>12510559</id><snippet>{
  "origin": "x.x.x.x",
  "files": {},
  "form": {},
  "url": "http://httpbin.org/post",
  "args": {},
  "headers": {
    "Content-Length": "48",
    "Accept-Encoding": "identity, deflate, compress, gzip",
    "Connection": "keep-alive",
    "Accept": "*/*",
    "User-Agent": "python-requests/0.13.9 CPython/2.7.3 Linux/3.2.0-30-generic",
    "Host": "httpbin.org",
    "Content-Type": "application/xml"
  },
  "json": null,
  "data": "&lt;?xml version='1.0' encoding='utf-8'?&gt;\n&lt;a&gt;\u0431&lt;/a&gt;"
}
</snippet></ROW><ROW><id>12510565</id><snippet>except Exception, error:
    self.fail("Failed with %s" % error)
</snippet></ROW><ROW><id>12510565</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>12510565</id><snippet>try:
    1./0
except:
    (etype, evalue, etrace) = sys.exc_info()
    self.fail("Failed with %s" % evalue)
</snippet></ROW><ROW><id>12510565</id><snippet>(etype, evalue, etrace)</snippet></ROW><ROW><id>12510565</id><snippet>(&lt;type 'exceptions.ZeroDivisionError'&gt;, ZeroDivisionError('float division',), &lt;traceback object at 0x7f6f2c02fa70&gt;)</snippet></ROW><ROW><id>12510622</id><snippet>recv</snippet></ROW><ROW><id>12510622</id><snippet>sock.settimeout(1.0)
</snippet></ROW><ROW><id>12510622</id><snippet>SocketServer</snippet></ROW><ROW><id>12510622</id><snippet>socket</snippet></ROW><ROW><id>12510622</id><snippet>SocketServer</snippet></ROW><ROW><id>12510622</id><snippet>SocketServer</snippet></ROW><ROW><id>12510622</id><snippet>RequestHandler</snippet></ROW><ROW><id>12510622</id><snippet>SocketServer</snippet></ROW><ROW><id>12510622</id><snippet>class RequestHandler(SocketServer.BaseRequestHandler):
    def setup(self):
         # the socket is called request in the request handler
         self.request.settimeout(1.0)

    def handle(self):
         while True:
             try: 
                 data = self.request.recv(1024)
                 if not data:
                      break # connection is closed
                 else:
                      pass  # do your thing
             except socket.timeout:
                 pass # handle timeout
</snippet></ROW><ROW><id>12510664</id><snippet>from itertools import chain
combined = list(chain(collectionA, collectionB))

json = serializers.serialize('json', combined)
</snippet></ROW><ROW><id>12511337</id><snippet>import</snippet></ROW><ROW><id>12511341</id><snippet>class FooResource(ModelResource):
    class Meta:
        # The usual stuff

    def dispatch(self, request_type, request, **kwargs):
        # Do whatever
</snippet></ROW><ROW><id>12511364</id><snippet>In [1]: import demjson
In [2]: demjson.decode('{ hotel: { id: "123", name: "hotel_name"} }')
Out[2]: {u'hotel': {u'id': u'123', u'name': u'hotel_name'}}
</snippet></ROW><ROW><id>12511372</id><snippet>~( semicolon | comment1 )</snippet></ROW><ROW><id>12511372</id><snippet>~( semicolon )</snippet></ROW><ROW><id>12511372</id><snippet>import pyparsing as par

alphanumsword = par.Word(par.alphanums + "_")

element = "(" + alphanumsword + ")" | alphanumsword
#element = alphanumsword + "(" + alphanumsword + ")" | alphanumsword

row = par.OneOrMore(element)

rows = row + par.OneOrMore("," + row) | row

semicolon = par.Literal(";")

comment1 = par.Literal("--") + par.restOfLine + par.LineEnd()

createtable = par.CaselessLiteral("create") + par.CaselessLiteral("table")  \
              + alphanumsword + "("     + rows + ")" + ~( semicolon | comment1 )

createtable.ignore(comment1)
createtable.ignore(par.cStyleComment)


text = \
"""
--- this is comment

CREATE TABLE  PERSON
(
    /* Comment */
    /*
       Comment
    */
   ID VARCHAR(255),
   NAME VARCHAR(255), -- Comment
   --- Comment
   ADDRESS VARCHAR(255) NULL, -- Comment
   CONSTRAINT PK_PERSON PRIMARY KEY (ID)
)

-- Comment

CREATE TABLE A ( B VARCHAR(255) ) --comment
CREATE TABLE A ( B VARCHAR(255) );
CREATE TABLE A ( B VARCHAR(255) )
CREATE TABLE A ( B VARCHAR(255) );

--Commentasfkjaskfj
"""

text_list = list(text)
offset = 0

for t,s,e in createtable.scanString(text):
    print "(***", t, ",", s, ",", e, "**)"

    print "||\n", text[s:e], "\n||"
    print "s: %d, e: %d" % (s, e)

    text_list.insert(e + offset , ';')
    offset += 1

    print "******************************"

print "".join(text_list)
</snippet></ROW><ROW><id>12511372</id><snippet>(*** ['create', 'table', 'PERSON', '(', 'ID', 'VARCHAR', '(', '255', ')', ',', 'NAME', 'VARCHAR', '(', '255', ')', ',', 'ADDRESS', 'VARCHAR', '(', '255', ')', 'NULL', ',', 'CONSTRAINT', 'PK_PERSON', 'PRIMARY', 'KEY', '(', 'ID', ')', ')'] , 22 , 243 **)
||
CREATE TABLE  PERSON
(
    /* Comment */
    /*
       Comment
    */
   ID VARCHAR(255),
   NAME VARCHAR(255), -- Comment
   --- Comment
   ADDRESS VARCHAR(255) NULL, -- Comment
   CONSTRAINT PK_PERSON PRIMARY KEY (ID)
) 
||
s: 22, e: 243
******************************
(*** ['create', 'table', 'A', '(', 'B', 'VARCHAR', '(', '255', ')', ')'] , 257 , 290 **)
||
CREATE TABLE A ( B VARCHAR(255) ) 
||
s: 257, e: 290
******************************
(*** ['create', 'table', 'A', '(', 'B', 'VARCHAR', '(', '255', ')', ')'] , 336 , 369 **)
||
CREATE TABLE A ( B VARCHAR(255) ) 
||
s: 336, e: 369
******************************

--- this is comment

CREATE TABLE  PERSON
(
    /* Comment */
    /*
       Comment
    */
   ID VARCHAR(255),
   NAME VARCHAR(255), -- Comment
   --- Comment
   ADDRESS VARCHAR(255) NULL, -- Comment
   CONSTRAINT PK_PERSON PRIMARY KEY (ID)
);

-- Comment

CREATE TABLE A ( B VARCHAR(255) ); --comment
CREATE TABLE A ( B VARCHAR(255) );
CREATE TABLE A ( B VARCHAR(255) );
CREATE TABLE A ( B VARCHAR(255) );

--Commentasfkjaskfj
</snippet></ROW><ROW><id>12511601</id><snippet>a = '''{
  'imageUrl': '/images/image.png',
  'imageName': 'My Image'  
}'''
decoded = json.loads(a)
</snippet></ROW><ROW><id>12511601</id><snippet>import urllib2
img = urllib2.urlopen(decoded.imageUrl).read()
</snippet></ROW><ROW><id>12511722</id><snippet>s = "Some ABC text followed by XYZ followed by multiple ABC, more ABC, more ABC"

pattern = re.compile(r'(?&lt;=XYZ)(.*?)ABC')
while pattern.search(s):
   s = pattern.sub(r'\1REPLACED', s)

print s
</snippet></ROW><ROW><id>12511973</id><snippet>d1 = { 'a': 1, 'b': 2, 'c': 3 }
d2 = { 'a': 1, 'b': 5, 'd': 4 }
d3 = {}
def add_dict(target, d):
    for key in d:
        target.setdefault(key, set([])).add(d[key])

add_dict(d3, d1)
add_dict(d3, d2)
</snippet></ROW><ROW><id>12511973</id><snippet>d3</snippet></ROW><ROW><id>12511973</id><snippet>{'a': set([1]), 'c': set([3]), 'b': set([2, 5]), 'd': set([4])}
</snippet></ROW><ROW><id>12511973</id><snippet>d1 = { 'a':1, 'b':2, 'c': 3}
d2 = { 'b':2 ,'c':3, 'd': 1}
d3 = {}
def add_dict(target, d):
    for key in d:
        target.setdefault(key, []).append(d[key])

add_dict(d3, d1)
add_dict(d3, d2)
</snippet></ROW><ROW><id>12511973</id><snippet>{'a': [1], 'c': [3, 3], 'b': [2, 2], 'd': [1]}
</snippet></ROW><ROW><id>12511973</id><snippet>{'a':1,'b':2,'c':3,'b':2,'c':3,'d':1}</snippet></ROW><ROW><id>12511973</id><snippet>d1 = { 'a':1, 'b':2, 'c': 3}
d2 = { 'b':2 ,'c':3, 'd': 1}
result = []

result += [ { 'key': key, 'value': d1[key] } for key in d1 ]
result += [ { 'key': key, 'value': d2[key] } for key in d2 ]
</snippet></ROW><ROW><id>12511973</id><snippet>[ {'value': 1, 'key': 'a'},
  {'value': 3, 'key': 'c'},
  {'value': 2, 'key': 'b'},
  {'value': 3, 'key': 'c'},
  {'value': 2, 'key': 'b'},
  {'value': 1, 'key': 'd'} ]
</snippet></ROW><ROW><id>12512076</id><snippet>heapsort</snippet></ROW><ROW><id>12512076</id><snippet>for i in range(n,0,-1)</snippet></ROW><ROW><id>12512076</id><snippet>n</snippet></ROW><ROW><id>12512076</id><snippet>n</snippet></ROW><ROW><id>12512076</id><snippet>heapit</snippet></ROW><ROW><id>12512076</id><snippet>for i in range((len(array)-1)/2,-1,-1)</snippet></ROW><ROW><id>12512076</id><snippet>n//2</snippet></ROW><ROW><id>12512076</id><snippet>n * (n // 2)</snippet></ROW><ROW><id>12512076</id><snippet>n</snippet></ROW><ROW><id>12512076</id><snippet>n</snippet></ROW><ROW><id>12512076</id><snippet>n</snippet></ROW><ROW><id>12512076</id><snippet>heapify</snippet></ROW><ROW><id>12512076</id><snippet>  9         158 LOAD_GLOBAL              0 (heapify)
            161 LOAD_FAST                0 (arr)
            164 LOAD_FAST                6 (maximum)
            167 LOAD_FAST                2 (n)
            170 CALL_FUNCTION            3
            173 RETURN_VALUE        
        &gt;&gt;  174 POP_TOP             
</snippet></ROW><ROW><id>12512076</id><snippet>dis</snippet></ROW><ROW><id>12512076</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>12512076</id><snippet>heapify</snippet></ROW><ROW><id>12512076</id><snippet>heapify</snippet></ROW><ROW><id>12512076</id><snippet>arr</snippet></ROW><ROW><id>12512076</id><snippet>maximum</snippet></ROW><ROW><id>12512076</id><snippet>i</snippet></ROW><ROW><id>12512076</id><snippet>import this</snippet></ROW><ROW><id>12512315</id><snippet>~ $ cat test.txt 
1.0
2.0
3.0
4.5
5.0
6.0
</snippet></ROW><ROW><id>12512315</id><snippet>&gt;&gt;&gt; with open('test.txt', 'r') as f:
...      lines = f.readlines()
...      foo1=map(float, lines)
...      print foo1
... 
[1.0, 2.0, 3.0, 4.5, 5.0, 6.0]
&gt;&gt;&gt; sum(foo1)
21.5
</snippet></ROW><ROW><id>12512315</id><snippet>import numpy as np

totalsum=0
ListofFiles = ['foo1','foo2']
# from the help of np.loadtxt
# Note that `If the filename extension is .gz or .bz2, the file is first decompressed`
# see the help for that function.
for FileName in ListofFiles:
    totalsum=totalsum+np.sum(np.loadtxt(FileName,skiprows=6))
</snippet></ROW><ROW><id>12512315</id><snippet># use with caution it might hog your memory
import numpy as np

totalsum=0
ListofFiles = ['foo1','foo2']

arrayHolder = np.loadtxt(FileName,skiprows=6)
for idx,FileName in enumerate(ListofFiles[1:]):
    arrayHolder=np.hstack((arrayHolder,np.loadtxt(FileName,skiprows=6)))  
# see documentation for numpy.hstack and my example below.

# now you have a huge numpy array. you can do many things on it
# e.g
# sum each file if the above test.txt had an identical file named test1.txt
np.sum(arrayHolder , axis=0)
# output would be:
array([2.0, 4.0, 6.0, 9.0, 10.0, 12.0])
# sum each ith element accross files
np.sum(arrayHolder , axis=1)

# more extended
In [2]: a=np.array([1.0,2.0,3.0,4.5,5.0,6.0])
In [4]: b=np.array([1.0,2.0,3.0,4.5,5.0,6.0]) 
In [9]: c=np.vstack((a,b))  
In [10]: c
Out[10]:
array([[ 1. , 2. , 3. , 4.5, 5. , 6. ],
[ 1. , 2. , 3. , 4.5, 5. , 6. ]])
In [11]: np.sum(c, axis=0)
Out[11]: array([ 2., 4., 6., 9., 10., 12.])
In [12]: np.sum(c, axis=1)
Out[12]: array([ 21.5, 21.5])

# as I said above this could chocke your memory, so do it gradualy, 
# dont try on all 4000 files at once !
</snippet></ROW><ROW><id>12512410</id><snippet>import requests

xml = """&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;a&gt;б&lt;/a&gt;"""

data = requests.post('http://httpbin.org/post', data=xml, headers={'Authorization': 'a', 'developerToken': 'b', 'clientCostumerID': 'c'}).json

for headername, headervalue in data['headers'].iteritems():
    print '%s: %s' % (headername, headervalue)
</snippet></ROW><ROW><id>12512410</id><snippet>Content-Length: 48
Developertoken: b
Accept-Encoding: identity, deflate, compress, gzip
Connection: keep-alive
Clientcostumerid: c
Accept: */*
User-Agent: python-requests/0.14.0 CPython/2.7.3 Darwin/11.4.0
Host: httpbin.org
Content-Type: 
Authorization: a
</snippet></ROW><ROW><id>12512589</id><snippet>self.__dict__</snippet></ROW><ROW><id>12512589</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self, foo='bar', spam='eggs'):
...         self.foo = foo
...         self.spam = spam
... 
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.__dict__
{'foo': 'bar', 'spam': 'eggs'}
</snippet></ROW><ROW><id>12512589</id><snippet>.__key()</snippet></ROW><ROW><id>12512589</id><snippet>def __key(self):
    return tuple(v for k, v in sorted(self.__dict__.items()))
</snippet></ROW><ROW><id>12512589</id><snippet>tuple()</snippet></ROW><ROW><id>12512589</id><snippet>hash()</snippet></ROW><ROW><id>12512589</id><snippet>values()</snippet></ROW><ROW><id>12512589</id><snippet>__slots__</snippet></ROW><ROW><id>12512589</id><snippet>__hash__</snippet></ROW><ROW><id>12512589</id><snippet>__eq__</snippet></ROW><ROW><id>12512716</id><snippet> find . -name *.txt |xargs -I{} awk -F',' 'NF!=5{print FILENAME;exit;}' {}
</snippet></ROW><ROW><id>12512716</id><snippet>kent$  head *.txt
==&gt; 4.txt &lt;==
1,2,3,4,5
6,7,8
9,10
11,12,13,14,15

==&gt; one.txt &lt;==
1,2,3,4,5
6,7,8
9,10
11,12,13,14,15

==&gt; three.txt &lt;==
11,12,13,14,15

==&gt; two.txt &lt;==
11,12,13,14,15

kent$  find . -name *.txt |xargs -I{} awk -F',' 'NF!=5{print FILENAME,NR}' {}
./one.txt 2
./one.txt 3
./4.txt 2
./4.txt 3
</snippet></ROW><ROW><id>12512716</id><snippet>kent$  find . -name *.txt |xargs -I{} awk -F',' 'NF!=5{a[FILENAME]++;} END{if(a[FILENAME]) print FILENAME, a[FILENAME]}' {}
./one.txt 2
./4.txt 2
</snippet></ROW><ROW><id>12512883</id><snippet>procname</snippet></ROW><ROW><id>12512883</id><snippet>procnamemodule.c</snippet></ROW><ROW><id>12512883</id><snippet>Py_InitModule3</snippet></ROW><ROW><id>12512999</id><snippet>?</snippet></ROW><ROW><id>12513455</id><snippet>find</snippet></ROW><ROW><id>12513455</id><snippet>find</snippet></ROW><ROW><id>12513455</id><snippet>re</snippet></ROW><ROW><id>12513455</id><snippet>compile</snippet></ROW><ROW><id>12513514</id><snippet>float32</snippet></ROW><ROW><id>12513514</id><snippet>float32</snippet></ROW><ROW><id>12513514</id><snippet>In [62]: x = np.array([73.33999634, 73.340], dtype = np.float32)

In [63]: x
Out[63]: array([ 73.33999634,  73.33999634], dtype=float32)
</snippet></ROW><ROW><id>12513514</id><snippet>np.around</snippet></ROW><ROW><id>12513514</id><snippet>dtype</snippet></ROW><ROW><id>12513514</id><snippet>In [60]: y = np.around(x, decimals = 3)

In [61]: y
Out[61]: array([ 73.33999634,  73.33999634], dtype=float32)
</snippet></ROW><ROW><id>12513514</id><snippet>np.float64</snippet></ROW><ROW><id>12513514</id><snippet>In [64]: x = np.array([73.33999634, 73.340], dtype = np.float64)

In [65]: y = np.around(x, decimals = 3)

In [66]: y
Out[66]: array([ 73.34,  73.34])
</snippet></ROW><ROW><id>12513514</id><snippet>y</snippet></ROW><ROW><id>12513553</id><snippet>FunctionType = type(lambda: 0)
help(FunctionType)
</snippet></ROW><ROW><id>12513553</id><snippet>CodeType = type((lambda: 0).func_code)
help(CodeType)
</snippet></ROW><ROW><id>12513553</id><snippet>compile()</snippet></ROW><ROW><id>12513553</id><snippet>FunctionType</snippet></ROW><ROW><id>12513553</id><snippet>CodeType</snippet></ROW><ROW><id>12513553</id><snippet>types</snippet></ROW><ROW><id>12513571</id><snippet>__init__</snippet></ROW><ROW><id>12513571</id><snippet>__init__</snippet></ROW><ROW><id>12513571</id><snippet>def test_some_method():
    mock_object = Mock(MyClass)
    MyClass.some_method(mock_object)
</snippet></ROW><ROW><id>12513904</id><snippet>import uuid    

from sqlalchemy.event import listen

from mypackage.models import Base


def generate_license(mapper, connect, target):
    target.generate_license()

class User(Base):
    __tablename__ = "users"
    id = Column(String(36))
    license = Column(String(256))

    def generate_license(self):
        if not self.license:
            self.license = str(uuid.uuid4())
        return self.license

listen(User, 'before_insert', generate_license)
</snippet></ROW><ROW><id>12514276</id><snippet>re.search</snippet></ROW><ROW><id>12514276</id><snippet>def search(pattern, string, flags=0):
    """Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."""
    return _compile(pattern, flags).search(string)
</snippet></ROW><ROW><id>12514276</id><snippet>re.compile</snippet></ROW><ROW><id>12514276</id><snippet>def compile(pattern, flags=0):
    "Compile a regular expression pattern, returning a pattern object."
    return _compile(pattern, flags)
</snippet></ROW><ROW><id>12514276</id><snippet>re._compile</snippet></ROW><ROW><id>12514276</id><snippet>def _compile(*key):
    # internal: compile pattern
    cachekey = (type(key[0]),) + key
    p = _cache.get(cachekey)            #_cache is a dict.   
    if p is not None:
        return p
    pattern, flags = key
    if isinstance(pattern, _pattern_type):
        if flags:
            raise ValueError('Cannot process flags argument with a compiled pattern')
        return pattern 
    if not sre_compile.isstring(pattern):
        raise TypeError, "first argument must be string or compiled pattern"
    try:
        p = sre_compile.compile(pattern, flags)
    except error, v:
        raise error, v # invalid expression
    if len(_cache) &gt;= _MAXCACHE:
        _cache.clear()
    _cache[cachekey] = p
    return p
</snippet></ROW><ROW><id>12514680</id><snippet>http://open.api.sandbox.ebay.com/shopping?</snippet></ROW><ROW><id>12514680</id><snippet>http://open.api.ebay.com/shopping?</snippet></ROW><ROW><id>12514711</id><snippet>na_values</snippet></ROW><ROW><id>12514711</id><snippet>na_values='abc' # would transform the letters 'a', 'b' and 'c' each into `nan`
# is equivalent to
na_values=['a','b','c']`
</snippet></ROW><ROW><id>12514711</id><snippet>na_values=''
# is equivalent to
na_values=[] # and this is not what you want!
</snippet></ROW><ROW><id>12514711</id><snippet>na_values=['']</snippet></ROW><ROW><id>12514795</id><snippet>import xmltodict
import json

json.dumps(xmltodict.parase(txt))
</snippet></ROW><ROW><id>12514851</id><snippet>'^(ltr|rtl|lro|rlo)$'</snippet></ROW><ROW><id>12514851</id><snippet>'^(true|false)$'</snippet></ROW><ROW><id>12514851</id><snippet>def make_re(args):
    args = (re.escape(arg) for arg in args) #if you want to escape special characters
    return re.compile('^({0})$'.format('|'.join(args)) )

boolre = make_re(('true','false'))
</snippet></ROW><ROW><id>12514851</id><snippet>args = (re.escape(arg) ...)</snippet></ROW><ROW><id>12514851</id><snippet>if arg in myset: ...</snippet></ROW><ROW><id>12515249</id><snippet>tl2 = tk.Toplevel(...)
...
tkMessageBox.showinfo("Say Hello", "Hello World", parent=tl2)
</snippet></ROW><ROW><id>12515327</id><snippet>import os

try:
    currdir = os.path.abspath(__file__)
except NameError:  # We are the main py2exe script, not a module
    import sys
    currdir = os.path.abspath(os.path.dirname(sys.argv[0]))
DBfile = os.path.join(currdir, 'GDP.mdb')
</snippet></ROW><ROW><id>12515626</id><snippet>if not isinstance(S, np.ndarray):
    raise TypeError("Input not a ndarray")
if S.ndim == 0:
    S = np.reshape(S, (1,1))
(p, p2) = S.shape
</snippet></ROW><ROW><id>12515626</id><snippet>S</snippet></ROW><ROW><id>12515626</id><snippet>ndarray</snippet></ROW><ROW><id>12515626</id><snippet>np.reshape</snippet></ROW><ROW><id>12515626</id><snippet>np</snippet></ROW><ROW><id>12515626</id><snippet>ndarray</snippet></ROW><ROW><id>12515626</id><snippet>ndarray</snippet></ROW><ROW><id>12515626</id><snippet>np.asanyarray</snippet></ROW><ROW><id>12515626</id><snippet>np.asarray(...)</snippet></ROW><ROW><id>12515626</id><snippet>S.shape</snippet></ROW><ROW><id>12515626</id><snippet>np.shape(S)</snippet></ROW><ROW><id>12515626</id><snippet>np.asarray</snippet></ROW><ROW><id>12515626</id><snippet>np.asanyarray</snippet></ROW><ROW><id>12515626</id><snippet>np.atleast_1D</snippet></ROW><ROW><id>12515626</id><snippet>np.array</snippet></ROW><ROW><id>12515626</id><snippet>asarray</snippet></ROW><ROW><id>12515626</id><snippet>copy</snippet></ROW><ROW><id>12515626</id><snippet>array</snippet></ROW><ROW><id>12515626</id><snippet>False</snippet></ROW><ROW><id>12515626</id><snippet>asanyarray</snippet></ROW><ROW><id>12515626</id><snippet>subok=True</snippet></ROW><ROW><id>12515626</id><snippet>atleast_1D</snippet></ROW><ROW><id>12515626</id><snippet>ndmin=1</snippet></ROW><ROW><id>12515626</id><snippet>atleast_2d</snippet></ROW><ROW><id>12515626</id><snippet>ndmin=2</snippet></ROW><ROW><id>12515626</id><snippet>np.array</snippet></ROW><ROW><id>12515626</id><snippet>np.array(..., copy=True)</snippet></ROW><ROW><id>12515626</id><snippet>list([....])</snippet></ROW><ROW><id>12515626</id><snippet>order</snippet></ROW><ROW><id>12515626</id><snippet>C</snippet></ROW><ROW><id>12515626</id><snippet>F</snippet></ROW><ROW><id>12515626</id><snippet>np.array(input, copy=False)</snippet></ROW><ROW><id>12515626</id><snippet>input</snippet></ROW><ROW><id>12515626</id><snippet>ndarray</snippet></ROW><ROW><id>12515626</id><snippet>input</snippet></ROW><ROW><id>12515626</id><snippet>input</snippet></ROW><ROW><id>12515626</id><snippet>ndarray</snippet></ROW><ROW><id>12515626</id><snippet>np.array(...)</snippet></ROW><ROW><id>12515626</id><snippet>dtype=float</snippet></ROW><ROW><id>12515626</id><snippet>["STRING", 1]</snippet></ROW><ROW><id>12515626</id><snippet>ValueError</snippet></ROW><ROW><id>12515640</id><snippet>key = "assets/14e2ccbe-601e-4bd8-bb61-726c221b53cf-6.png"</snippet></ROW><ROW><id>12515775</id><snippet>import os, time
path = r"C:\Temp" #working path#
now = time.time()
old_files = [] # list of files older than 7 days
new_files = [] # list of files newer than 1 day
for f in os.listdir(path):
    fn = os.path.join(path, f)
    mtime = os.stat(fn).st_mtime
    if mtime &gt; now - 1 * 86400:
        # this is a new file
        new_files.append(fn)
    elif mtime &lt; now - 7 * 86400:
        # this is an old file
        old_files.append(fn)
    # else file between 1 and 7 days old, ignore
if new_files:
    # if there are any new files, then delete all old files
    for fn in old_files:
        os.remove(fn)
</snippet></ROW><ROW><id>12515852</id><snippet>csv</snippet></ROW><ROW><id>12515852</id><snippet>with open('output.csv', 'wb') as output:
    input = csv.reader(open('faultyfile.csv', 'rb'))
    output = csv.writer(output, dialect=input.dialect)
    for line in input:
        if len(line) &lt; 5:
            line.extend([''] * (5 - len(line)))
        output.writerow(line)
</snippet></ROW><ROW><id>12515862</id><snippet>bootstrap</snippet></ROW><ROW><id>12515862</id><snippet>from pyramid.paster import bootstrap
env = bootstrap('/path/to/my/development.ini#another')
</snippet></ROW><ROW><id>12516319</id><snippet>PyICL</snippet></ROW><ROW><id>12516319</id><snippet>boost.icl</snippet></ROW><ROW><id>12516319</id><snippet>boost.icl</snippet></ROW><ROW><id>12516319</id><snippet>std::vector</snippet></ROW><ROW><id>12516319</id><snippet>date_type_low &lt; offset &lt; date_type_high</snippet></ROW><ROW><id>12516956</id><snippet>assertRaises</snippet></ROW><ROW><id>12516956</id><snippet>assertRaises</snippet></ROW><ROW><id>12516956</id><snippet>self.assertRaises(MyException, other.func)
</snippet></ROW><ROW><id>12516956</id><snippet>assertRaises</snippet></ROW><ROW><id>12516956</id><snippet>with self.assertRaises(MyException):
    other.func()
</snippet></ROW><ROW><id>12516956</id><snippet>assertRaises</snippet></ROW><ROW><id>12516956</id><snippet>with self.assertRaises(MyException) as raises_cm:
    other.func()

exception = raises_cm.exception
self.assertEqual(exception.args, ('foo', 'bar'))
</snippet></ROW><ROW><id>12517228</id><snippet>get_resource_uri</snippet></ROW><ROW><id>12517228</id><snippet>override_urls</snippet></ROW><ROW><id>12517228</id><snippet>detail_uri_name = 'slug'
</snippet></ROW><ROW><id>12517228</id><snippet>get_resource_uri</snippet></ROW><ROW><id>12517228</id><snippet>self.detail_uri_kwargs</snippet></ROW><ROW><id>12517228</id><snippet>reverse</snippet></ROW><ROW><id>12517228</id><snippet>detail_uri_kwargs</snippet></ROW><ROW><id>12517228</id><snippet>ModelResource</snippet></ROW><ROW><id>12517228</id><snippet>self._meta.detail_uri_name</snippet></ROW><ROW><id>12517228</id><snippet>detail_uri_name</snippet></ROW><ROW><id>12517228</id><snippet>pk</snippet></ROW><ROW><id>12517228</id><snippet>from tastypie.resources import ModelResource
from tastypie.bundle import Bundle

class BaseSlugResource(ModelResource):
    """ Base Model Resource using slug urls """

    class Meta:
        abstract = True
        detail_uri_name = 'slug'
</snippet></ROW><ROW><id>12517228</id><snippet>Meta</snippet></ROW><ROW><id>12517307</id><snippet>check</snippet></ROW><ROW><id>12517307</id><snippet>def check():
    text = inputfield.get()
    print text.startswith('sag')
</snippet></ROW><ROW><id>12517307</id><snippet>.startswith()</snippet></ROW><ROW><id>12517307</id><snippet>True</snippet></ROW><ROW><id>12517307</id><snippet>False</snippet></ROW><ROW><id>12517307</id><snippet>inputfield</snippet></ROW><ROW><id>12517447</id><snippet>x</snippet></ROW><ROW><id>12517447</id><snippet>float32(float64(x)) == x</snippet></ROW><ROW><id>12517447</id><snippet>x = nan</snippet></ROW><ROW><id>12517447</id><snippet>nan != nan</snippet></ROW><ROW><id>12517447</id><snippet>nan is nan</snippet></ROW><ROW><id>12517447</id><snippet>float32(float64(x)) == x or x is nan
</snippet></ROW><ROW><id>12517447</id><snippet>float32(1./3)          # 0.33333334
float64(float32(1./3)) # 0.3333333432674408
float64(0.33333334)    # 0.33333333999999998
</snippet></ROW><ROW><id>12517490</id><snippet>os.makedirs</snippet></ROW><ROW><id>12517490</id><snippet>filename = "/foo/bar/baz.txt"
if not os.path.exists(os.path.dirname(filename)):
    os.makedirs(os.path.dirname(filename))
with open(filename, "w") as f:
    f.write("FOOBAR")
</snippet></ROW><ROW><id>12517683</id><snippet>filter()</snippet></ROW><ROW><id>12517683</id><snippet>p</snippet></ROW><ROW><id>12517683</id><snippet>if start_date:
   p = p.filter(Post.date &gt;= start_date)

if end_date:
   p = p.filter(Post.date &lt;= end_date)

return p
</snippet></ROW><ROW><id>12517966</id><snippet>Spam().egg(_Spam__a=1)</snippet></ROW><ROW><id>12517966</id><snippet>Spam().egg(1)</snippet></ROW><ROW><id>12517966</id><snippet>_</snippet></ROW><ROW><id>12517966</id><snippet>&gt;&gt;&gt; dis.dis(Spam.egg)
  3           0 LOAD_FAST                0 (self)
              3 LOAD_ATTR                0 (_egg)
              6 LOAD_CONST               1 ('__a') # keyword argument not mangled
              9 LOAD_FAST                1 (a)
             12 CALL_FUNCTION          256
             15 RETURN_VALUE
&gt;&gt;&gt; dis.dis(Spam._egg)
  2           0 LOAD_FAST                1 (_Spam__a) # parameter mangled
              3 RETURN_VALUE
</snippet></ROW><ROW><id>12517966</id><snippet>{'__a': 1}</snippet></ROW><ROW><id>12518257</id><snippet>netstat</snippet></ROW><ROW><id>12518257</id><snippet>from threading import Thread
import time
import socket

CONN = ('localhost', 5455)

def fn_client(string, *args):
    cs = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    cs.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    while 1:
        cmd = int( raw_input("command (1 to send): ") )
        if (cmd == 1):
            data = raw_input("message to send: ")
            cs.sendto(data, CONN)
            time.sleep(1)

def fn_server(string, *args):
    ss = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
    ss.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    ss.bind(CONN)
    while 1:
        print "Server received '%s'" % (ss.recv(30))
        time.sleep(.5)

if __name__=='__main__':

    a = 0
    try:
        Thread(target=fn_client, args=(a, 1)).start()
        Thread(target=fn_server, args=(a, 1)).start()
    except Exception, errtxt:
        print errtxt
</snippet></ROW><ROW><id>12518775</id><snippet>file.close()</snippet></ROW><ROW><id>12518775</id><snippet>with</snippet></ROW><ROW><id>12518775</id><snippet>with open('file.txt','w') as file:
    for item in List:
        print&gt;&gt;file, item
</snippet></ROW><ROW><id>12519308</id><snippet>persons={}
for row in results:
    persons[row[0]] = {                    
                        'personId' : row[0],
                        'personName' : row[1],
                        'personEmail' : row[2]                    
                 }
print json.dumps(persons)
</snippet></ROW><ROW><id>12519552</id><snippet>move</snippet></ROW><ROW><id>12519552</id><snippet>def move(move):
    print(move,"inside move")

def undomove(move):
    print (move,"inside undomove")
    this_mod =__import__(__name__)
    this_mod.move(move)

if __name__ == '__main__':
    move(1)
    undomove(2)
</snippet></ROW><ROW><id>12519552</id><snippet>def move(move): ...</snippet></ROW><ROW><id>12519552</id><snippet>undomove(move)</snippet></ROW><ROW><id>12519552</id><snippet>move</snippet></ROW><ROW><id>12519594</id><snippet>except InvalidUserPass, e:
</snippet></ROW><ROW><id>12519594</id><snippet>except InvalidUserPass as e:
</snippet></ROW><ROW><id>12519750</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>12519750</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1348167977)
datetime.datetime(2012, 9, 20, 21, 6, 17)
</snippet></ROW><ROW><id>12519750</id><snippet>os.stat()</snippet></ROW><ROW><id>12519750</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat('test.txt').st_mtime
1348169795.0
</snippet></ROW><ROW><id>12519750</id><snippet>os.stat()</snippet></ROW><ROW><id>12519750</id><snippet>st_ctime</snippet></ROW><ROW><id>12519750</id><snippet>os.path.getmtime()</snippet></ROW><ROW><id>12519750</id><snippet>&gt;&gt;&gt; os.path.getmtime('test.txt')
1348169795.0
&gt;&gt;&gt; datetime.datetime.fromtimestamp(os.path.getmtime('test.txt'))
datetime.datetime(2012, 9, 20, 21, 36, 35)
</snippet></ROW><ROW><id>12519950</id><snippet>sort()</snippet></ROW><ROW><id>12519950</id><snippet>if</snippet></ROW><ROW><id>12519950</id><snippet>list</snippet></ROW><ROW><id>12519950</id><snippet>if len(L) &lt; 2:
</snippet></ROW><ROW><id>12519950</id><snippet>merge()</snippet></ROW><ROW><id>12519950</id><snippet>sort()</snippet></ROW><ROW><id>12519963</id><snippet>Content-Length</snippet></ROW><ROW><id>12519963</id><snippet>urllib2</snippet></ROW><ROW><id>12519963</id><snippet>&gt;&gt;&gt; data = urllib.urlencode(data) 
&gt;&gt;&gt; len(data)
319
</snippet></ROW><ROW><id>12520332</id><snippet>render_to_response(template_name, kwargs)</snippet></ROW><ROW><id>12520332</id><snippet>kwargs</snippet></ROW><ROW><id>12520332</id><snippet>**kwargs</snippet></ROW><ROW><id>12520459</id><snippet>V</snippet></ROW><ROW><id>12520459</id><snippet>C</snippet></ROW><ROW><id>12520459</id><snippet>def min_change(V, C):
    def min_coins(i, aC):
        if aC == 0:
            return 0
        elif i == -1 or aC &lt; 0:
            return float('inf')
        else:
            return min(min_coins(i-1, aC), 1 + min_coins(i, aC-V[i]))
    return min_coins(len(V)-1, C)
</snippet></ROW><ROW><id>12520459</id><snippet>def min_change(V, C):
    m, n = len(V)+1, C+1
    table = [[0] * n for x in xrange(m)]
    for j in xrange(1, n):
        table[0][j] = float('inf')
    for i in xrange(1, m):
        for j in xrange(1, n):
            aC = table[i][j - V[i-1]] if j - V[i-1] &gt;= 0 else float('inf')
            table[i][j] = min(table[i-1][j], 1 + aC)
    return table[m-1][n-1]
</snippet></ROW><ROW><id>12520500</id><snippet>a = numpy.arange(10)

mask = np.ones(len(a), dtype=bool) # all elements included/True.
mask[[7,2,8]] = False              # Set unwanted elements to False

print a[mask]
# Gives (removing entries 7, 2 and 8):
[0 1 3 4 5 6 9]
</snippet></ROW><ROW><id>12520500</id><snippet>a[~mask]</snippet></ROW><ROW><id>12520500</id><snippet>np.delete</snippet></ROW><ROW><id>12520500</id><snippet>np.delete</snippet></ROW><ROW><id>12520500</id><snippet>print np.delete(a, [7,2,8])
</snippet></ROW><ROW><id>12520839</id><snippet>HTTP_PROXY = http://username:password@proxyserver.domain.com</snippet></ROW><ROW><id>12520839</id><snippet>HTTPS_PROXY = https://username:password@proxyserver.domain.com</snippet></ROW><ROW><id>12520920</id><snippet>while True:
    i += 1
    if not (i &lt; j and arr[i] &lt; pivot): break
while True:
    j -= 1
    if not (j &gt;= i and arr[j] &gt;= pivot): break
</snippet></ROW><ROW><id>12520920</id><snippet>if i &lt; j:</snippet></ROW><ROW><id>12520920</id><snippet>while TRUE</snippet></ROW><ROW><id>12520920</id><snippet>9</snippet></ROW><ROW><id>12520920</id><snippet>arr</snippet></ROW><ROW><id>12520920</id><snippet>[10, 6, 8, 1, 4, 9, 2, 1, 7, 14, 5]</snippet></ROW><ROW><id>12520920</id><snippet>+= 1</snippet></ROW><ROW><id>12520920</id><snippet>-= 1</snippet></ROW><ROW><id>12520920</id><snippet>-1</snippet></ROW><ROW><id>12520920</id><snippet>len(arr)</snippet></ROW><ROW><id>12520920</id><snippet>0, len(arr)-1</snippet></ROW><ROW><id>12520920</id><snippet>1, len(arr)-1</snippet></ROW><ROW><id>12520920</id><snippet>Hoare-Partition (A, p, r)
  x ← A[p]
  i ← p − 1
  j ← r + 1
  while  TRUE
    repeat  j ←  j − 1
      until  A[j] ≤ x
    repeat  i ←  i + 1
      until  A[i] ≥ x
    if  i &lt; j
      exchange  A[i] ↔ A[j]
    else
      return  j
</snippet></ROW><ROW><id>12520920</id><snippet>def hoare(a, p, r):
  x = a[p]
  i, j = p-1, r+1
  while True:
    while True:
      j -= 1
      if a[j] &lt;= x:
        break
    while True:
      i += 1
      if a[i] &gt;= x:
        break
    if i &lt; j:
      a[i], a[j] = a[j], a[i]
    else:
      return j
</snippet></ROW><ROW><id>12520920</id><snippet>def hoare0(arr):
  return hoare(arr, 0, len(arr)-1)
</snippet></ROW><ROW><id>12520988</id><snippet>if len(v1) &gt; len(v2):
</snippet></ROW><ROW><id>12520988</id><snippet>if len(v1) &lt; len(v2):
</snippet></ROW><ROW><id>12520988</id><snippet>newVector</snippet></ROW><ROW><id>12520988</id><snippet>newVector[index] += v1[index] + v2[index]
</snippet></ROW><ROW><id>12520988</id><snippet>newVector.append(v1[index] + v2[index])
</snippet></ROW><ROW><id>12520988</id><snippet>def addVectors(v1, v2):
    return map(sum, zip(v1, v2))
</snippet></ROW><ROW><id>12520988</id><snippet>import itertools
def addVectors(v1, v2):
    return map(sum, itertools.izip_longest(v1, v2, fillvalue=0))
</snippet></ROW><ROW><id>12520988</id><snippet>addVectors([1, 2, 3, 4, 5], [1, 2])
# [2, 4, 3, 4, 5]
</snippet></ROW><ROW><id>12521059</id><snippet>find(1)</snippet></ROW><ROW><id>12521059</id><snippet>~$ find . -name "*.txt" | python hello.py
</snippet></ROW><ROW><id>12521059</id><snippet>xargs(1)</snippet></ROW><ROW><id>12521059</id><snippet>~$ find . -name "*.txt" -print0 | xargs -0 python hello.py
</snippet></ROW><ROW><id>12521059</id><snippet>-exec</snippet></ROW><ROW><id>12521059</id><snippet>find(1)</snippet></ROW><ROW><id>12521068</id><snippet>d</snippet></ROW><ROW><id>12521068</id><snippet>x</snippet></ROW><ROW><id>12521068</id><snippet>&gt;&gt;&gt; d.x = 3
&gt;&gt;&gt; B.f(d)
3
</snippet></ROW><ROW><id>12521068</id><snippet>&gt;&gt;&gt; dir(d)
['__doc__', '__init__', '__module__', 'f', 'x']
</snippet></ROW><ROW><id>12521068</id><snippet>&gt;&gt;&gt; del d.x
&gt;&gt;&gt; B.x = 4
&gt;&gt;&gt; C.x = 5
&gt;&gt;&gt; D.x = 6
&gt;&gt;&gt; d.f()
6
&gt;&gt;&gt; C.f(d)
6
&gt;&gt;&gt; del D.x
&gt;&gt;&gt; d.f()
4
</snippet></ROW><ROW><id>12521068</id><snippet>d.x</snippet></ROW><ROW><id>12521068</id><snippet>D.x</snippet></ROW><ROW><id>12521068</id><snippet>B.x</snippet></ROW><ROW><id>12521221</id><snippet>[</snippet></ROW><ROW><id>12521221</id><snippet>]</snippet></ROW><ROW><id>12521221</id><snippet>&gt;&gt;&gt; []
[]
&gt;&gt;&gt; [0]
[0]
&gt;&gt;&gt; ['a', 'b', 'c']
['a', 'b', 'c']
</snippet></ROW><ROW><id>12521221</id><snippet>&gt;&gt;&gt; ['a'] * 4
['a', 'a', 'a', 'a']
&gt;&gt;&gt; [0] * 9
[0, 0, 0, 0, 0, 0, 0, 0, 0]
&gt;&gt;&gt; [0, 1, 2] * 2
[0, 1, 2, 0, 1, 2]
</snippet></ROW><ROW><id>12521221</id><snippet>[</snippet></ROW><ROW><id>12521221</id><snippet>]</snippet></ROW><ROW><id>12521221</id><snippet>[0]</snippet></ROW><ROW><id>12521221</id><snippet>&gt;&gt;&gt; a = ['first', 'second', 'third']
&gt;&gt;&gt; a[0]
'first'
&gt;&gt;&gt; a[2]
'third'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12521248</id><snippet>sorted(alist)</snippet></ROW><ROW><id>12521248</id><snippet>alist.sort()</snippet></ROW><ROW><id>12521248</id><snippet>sort</snippet></ROW><ROW><id>12521291</id><snippet>for i in range(5):
    command_string = "Thread-" + "%d" % i
    thread = Thread(i, command_string)
    thread.start()
</snippet></ROW><ROW><id>12521336</id><snippet>os.getcwd()</snippet></ROW><ROW><id>12521336</id><snippet>C:\Users\foo&gt; C:\Stuff\MyProgram.exe
</snippet></ROW><ROW><id>12521336</id><snippet>C:\Stuff</snippet></ROW><ROW><id>12521336</id><snippet>C:\Users\foo</snippet></ROW><ROW><id>12521336</id><snippet>__path__</snippet></ROW><ROW><id>12521336</id><snippet>import os
pathToApp = os.path.dirname(__path__)
</snippet></ROW><ROW><id>12521336</id><snippet>__path__</snippet></ROW><ROW><id>12521336</id><snippet>import Cocoa
pathToApp = Cocoa.NSBundle.mainBundle().bundlePath()
</snippet></ROW><ROW><id>12521336</id><snippet>import os
pathToApp = __file__
while not pathToApp.endswith('.app'):
  path = os.path.dirname(path)
</snippet></ROW><ROW><id>12521618</id><snippet>re.DOTALL</snippet></ROW><ROW><id>12521618</id><snippet>In [193]: regex = re.compile(r"{{persondata(.*)}}",re.IGNORECASE|re.MULTILINE|re.UNICODE|re.DOTALL)

In [194]: regex.search(text).group()
Out[194]: '{{Persondata\n|NAME= Acaba, Joseph Michael "Joe"\n|ALTERNATIVE NAMES=\n|SHORT DESCRIPTION=[[Hydrogeologist]]\n|DATE OF BIRTH={{Birth date and age|1967|5|17}}\n|PLACE OF BIRTH=[[Inglewood, California]]\n|DATE OF DEATH=\n|PLACE OF DEATH=\n}}\n{{DEFAULTSORT:Acaba, Joseph M.}}'
</snippet></ROW><ROW><id>12521618</id><snippet>DOTALL</snippet></ROW><ROW><id>12521618</id><snippet>.</snippet></ROW><ROW><id>12521618</id><snippet>DOTALL</snippet></ROW><ROW><id>12521618</id><snippet>.</snippet></ROW><ROW><id>12521618</id><snippet>MULTILINE</snippet></ROW><ROW><id>12521618</id><snippet>^</snippet></ROW><ROW><id>12521618</id><snippet>$</snippet></ROW><ROW><id>12521618</id><snippet>findPersonInfo</snippet></ROW><ROW><id>12521618</id><snippet>re.compile</snippet></ROW><ROW><id>12521618</id><snippet>self</snippet></ROW><ROW><id>12521618</id><snippet>class Foo:
    info_pat = re.compile("{{persondata(.*)}}",
                                  re.IGNORECASE|re.MULTILINE|re.UNICODE)
    def findPersonInfo(self):
        result = None
        if self.isPerson:
            result = self.info_pat.search(self._rawPage)
        if result:
            print 'Match found: ', result.group()
</snippet></ROW><ROW><id>12521727</id><snippet>things = { 'p1':'v1', 'p2':'v2', 'p3':'v3' }
do_something(things['p2'])
</snippet></ROW><ROW><id>12521727</id><snippet>update</snippet></ROW><ROW><id>12521727</id><snippet>dict = {}
for item in list:
    dict.update(item)
do_something(dict['p2'])
</snippet></ROW><ROW><id>12521727</id><snippet>for item in list:
    if 'p2' in item:
        do_something(item['p2'])
</snippet></ROW><ROW><id>12521727</id><snippet>p2s = []
for item in list:
    if 'p2' in item:
        p2s.append(item['p2'])
</snippet></ROW><ROW><id>12521727</id><snippet>dict</snippet></ROW><ROW><id>12521727</id><snippet>list</snippet></ROW><ROW><id>12521727</id><snippet>dict()</snippet></ROW><ROW><id>12521727</id><snippet>list()</snippet></ROW><ROW><id>12521740</id><snippet>exec code in module.__dict__ 
</snippet></ROW><ROW><id>12521740</id><snippet>module.__dict__</snippet></ROW><ROW><id>12521740</id><snippet>module.__dict__</snippet></ROW><ROW><id>12521740</id><snippet>In [51]: mydict={}

In [52]: exec "val1=100" in mydict

In [53]: mydict['val1']
Out[53]: 100
</snippet></ROW><ROW><id>12521740</id><snippet>In [54]: mydict={}

In [55]: mydict['val2']=200

In [56]: exec "val1=val2" in mydict

In [57]: mydict.keys()
Out[57]: ['__builtins__', 'val2', 'val1']

In [58]: mydict['val2']
Out[58]: 200

In [59]: mydict['val1']
Out[59]: 200
</snippet></ROW><ROW><id>12521759</id><snippet>{{persondata(.*)}}</snippet></ROW><ROW><id>12521759</id><snippet>{{persondata(.*?)}}</snippet></ROW><ROW><id>12521759</id><snippet>}}</snippet></ROW><ROW><id>12521759</id><snippet>{{persondata((?:.*)}}(?:.*))}}</snippet></ROW><ROW><id>12521759</id><snippet>pyparsing</snippet></ROW><ROW><id>12521876</id><snippet>Customer.filter(id__in = [nsu.pk for nsu in NewSecUser.all()]).filter(is_visible_on_new_selection=True).all()`
</snippet></ROW><ROW><id>12521941</id><snippet>__all__</snippet></ROW><ROW><id>12521941</id><snippet>from module import *</snippet></ROW><ROW><id>12521941</id><snippet>__init__.py</snippet></ROW><ROW><id>12521941</id><snippet>__all__</snippet></ROW><ROW><id>12521941</id><snippet>sounds/effects/__init__.py</snippet></ROW><ROW><id>12521941</id><snippet>__all__ = ["echo", "surround", "reverse"]
</snippet></ROW><ROW><id>12521941</id><snippet>from sound.effects import *</snippet></ROW><ROW><id>12521941</id><snippet>__all__</snippet></ROW><ROW><id>12521941</id><snippet>import zmq
print zmq.zmq_version()
</snippet></ROW><ROW><id>12521941</id><snippet>print zmq.core.version.zmq_version()
</snippet></ROW><ROW><id>12521941</id><snippet>__all__</snippet></ROW><ROW><id>12521971</id><snippet>sequence = 'TCATGAGGCTTTGGTAAATAT'

frame1 = sequence.find('ATG')

my_list = []

for codon in range(len(sequence)):
    next_codon = sequence[frame1:frame1+3]
    my_list.append(next_codon)
    frame1 +=3
    if next_codon == 'TAA':
        break

print my_list
</snippet></ROW><ROW><id>12522052</id><snippet>out = [v for v in inputlist if int(v[3:7]) &gt;= 1990]
</snippet></ROW><ROW><id>12522052</id><snippet>in</snippet></ROW><ROW><id>12522052</id><snippet>inputlist</snippet></ROW><ROW><id>12522083</id><snippet>cast</snippet></ROW><ROW><id>12522083</id><snippet>__class__</snippet></ROW><ROW><id>12522083</id><snippet>&gt;&gt;&gt; super_instance = SuperClass()
&gt;&gt;&gt; super_instance.__class__ = SubClass
&gt;&gt;&gt; print super_instance.getVar()
1
</snippet></ROW><ROW><id>12522083</id><snippet>cast</snippet></ROW><ROW><id>12522083</id><snippet>cast</snippet></ROW><ROW><id>12522083</id><snippet>SubClass</snippet></ROW><ROW><id>12522083</id><snippet>SuperClass</snippet></ROW><ROW><id>12522083</id><snippet>super_instance</snippet></ROW><ROW><id>12522083</id><snippet>SubClass</snippet></ROW><ROW><id>12522367</id><snippet>r = "[\(\d+,\d+\)]{1,}"
c = re.findall(r,line)
</snippet></ROW><ROW><id>12522423</id><snippet>def sendEmail(html):
...
chunk = MIMEText(html, 'html')
...
</snippet></ROW><ROW><id>12522536</id><snippet>[fast, fast]</snippet></ROW><ROW><id>12522536</id><snippet>$ python so.py 
spawned pgrp 6035
spawned pgrp 6036
Reaped pid: 6036, status: 0
 6035  6034  6035 Z    (Python)
 6034   521  6034 S+   python so.py
 6037  6034  6034 S+   sh -c ps -e -o pid,ppid,pgid,state,command | grep -i python
 6039  6037  6034 R+   grep -i python

killing pg 6035
Error killing 6035: [Errno 1] Operation not permitted
 6035  6034  6035 Z    (Python)
 6034   521  6034 S+   python so.py
 6040  6034  6034 S+   sh -c ps -e -o pid,ppid,pgid,state,command | grep -i python
 6042  6040  6034 S+   grep -i python

killing pg 6036
Error killing 6036: [Errno 3] No such process
</snippet></ROW><ROW><id>12522536</id><snippet>$ kill -TERM -6115
-bash: kill: (-6115) - Operation not permitted
</snippet></ROW><ROW><id>12522826</id><snippet>import numpy as np
a = np.random.rand(10,1)
b = np.random.rand(10,1)
c = b &gt; 0.5
d = a * b # Note that * in NumPy is always elementwise (use .dot for matrix multiplication)
e = a + b
f = a.mean() # Can also use np.mean(a)
g = b.sum() # Can also use np.sum(b)
</snippet></ROW><ROW><id>12522871</id><snippet>parser</snippet></ROW><ROW><id>12522871</id><snippet>ast</snippet></ROW><ROW><id>12522871</id><snippet>[i:j]</snippet></ROW><ROW><id>12522871</id><snippet>None</snippet></ROW><ROW><id>12522871</id><snippet>0</snippet></ROW><ROW><id>12522871</id><snippet>None</snippet></ROW><ROW><id>12522871</id><snippet>len(s)</snippet></ROW><ROW><id>12522871</id><snippet>[i:j:k]</snippet></ROW><ROW><id>12522871</id><snippet>None</snippet></ROW><ROW><id>12522871</id><snippet>None</snippet></ROW><ROW><id>12522871</id><snippet>1</snippet></ROW><ROW><id>12522894</id><snippet>&gt;&gt;&gt; g.geocode('ann arbor, MI', exactly_one=False)
[(u'Ann Arbor, MI, USA', (42.2808256, -83.743037799999996)),
 (u'Ann Arbor, MI, USA', (42.307649300000001, -83.8473015))]
</snippet></ROW><ROW><id>12522894</id><snippet>results = []
geocodes = g.geocode(query, exactly_one=False)
for geocode in geocodes:
    location, (lat, lon) = geocode
    pnt = fromstr("POINT(%s %s)" % (lon, lat))
    distance_from_point = {'mi':'2000'}
    results.append(
        CampSite.objects.filter(
             lonlat__distance_lte=(
                  pnt,
                  D(**distance_from_point)
             )
        ).distance(pnt).order_by('distance')
    )
</snippet></ROW><ROW><id>12522894</id><snippet>geocodes[0]</snippet></ROW><ROW><id>12522894</id><snippet>results[0]</snippet></ROW><ROW><id>12522894</id><snippet>zip(geocodes, results)</snippet></ROW><ROW><id>12522914</id><snippet>%R</snippet></ROW><ROW><id>12522914</id><snippet>&gt;&gt;&gt; import rpy2.robjects as ro
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; myData = ro.r['read.csv']('data.csv')
&gt;&gt;&gt; np.asarray(myData)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/dist-packages/numpy/core/numeric.py", line 235, in asarray
    return array(a, dtype, copy=False, order=order)
TypeError: __float__ returned non-float (type rpy2.rinterface.NAIntegerType)
</snippet></ROW><ROW><id>12522914</id><snippet>--dataframe</snippet></ROW><ROW><id>12522914</id><snippet>-d</snippet></ROW><ROW><id>12522914</id><snippet>%R</snippet></ROW><ROW><id>12522914</id><snippet>--noreturn</snippet></ROW><ROW><id>12522914</id><snippet>-n</snippet></ROW><ROW><id>12522914</id><snippet>In [1]: %load_ext rmagic

In [2]: %R -n -d myData myData &lt;- read.csv('data.csv')

In [3]: myData
Out[3]: 
array([(1, 1, 1, 25, 0.590334, 0.4991572, 0.2189781, 9),
       (1, 1, 1, 25, 0.5504164, 0.5007439, 0.2136691, 13),
       (1, 1, 1, 25, 0.588486, 0.4879058, 0.2105431, 11),
       (1, 1, 1, 25, 0.5882244, 0.5148501, 0.2105431, -2147483648),
       (1, 2, 1, 25, nan, 0.489045, 0.2025757, 12)], 
      dtype=[('replicate', '&lt;i4'), ('line', '&lt;i4'), ('genotype', '&lt;i4'), ('temp', '&lt;i4'), ('femur', '&lt;f8'), ('tibia', '&lt;f8'), ('tarsus', '&lt;f8'), ('SCT', '&lt;i4')])
</snippet></ROW><ROW><id>12522914</id><snippet>NAInteger</snippet></ROW><ROW><id>12522914</id><snippet>-2147483648</snippet></ROW><ROW><id>12522914</id><snippet>numpy.iinfo('&lt;i4').min</snippet></ROW><ROW><id>12523035</id><snippet>def convert_dmds(s):
    deg, min = s[:-1].split(';')
    sign = 1 if s[-1] in 'NE' else -1
    return sign * (float(deg) + float(min) / 60.0)

def convert_gps(s):
    lat, lon = s.split(',')
    return (convert_dmds(lat), convert_dmds(lon))
</snippet></ROW><ROW><id>12523037</id><snippet>.values</snippet></ROW><ROW><id>12523037</id><snippet>mapping = {'a' : 'e', 'b' : 'd', 'c' : 'f'}</snippet></ROW><ROW><id>12523037</id><snippet>v1 = df1.reindex(columns=['a', 'b', 'c']).values
v2 = df2.reindex(columns=['e', 'd', 'f']).values
rs = DataFrame(v1 / v2, index=v1.index, columns=['a', 'b', 'c'])
</snippet></ROW><ROW><id>12523070</id><snippet>Item.objects.extra(
    select=dict(key = "content_item.data -&gt; 'key'")
).values('key').order_by('key').annotate(total=Count('key'))
</snippet></ROW><ROW><id>12523302</id><snippet>tail -f</snippet></ROW><ROW><id>12523302</id><snippet>sleep</snippet></ROW><ROW><id>12523302</id><snippet>read</snippet></ROW><ROW><id>12523302</id><snippet>tail</snippet></ROW><ROW><id>12523302</id><snippet>kqueue</snippet></ROW><ROW><id>12523302</id><snippet>sleep</snippet></ROW><ROW><id>12523302</id><snippet>tail -f</snippet></ROW><ROW><id>12523302</id><snippet>subprocess</snippet></ROW><ROW><id>12523302</id><snippet>tail -f</snippet></ROW><ROW><id>12523302</id><snippet>tail</snippet></ROW><ROW><id>12523302</id><snippet>import threading, Queue, subprocess
tailq = Queue.Queue(maxsize=10) # buffer at most 100 lines

def tail_forever(fn):
    p = subprocess.Popen(["tail", "-f", fn], stdout=subprocess.PIPE)
    while 1:
        line = p.stdout.readline()
        tailq.put(line)
        if not line:
            break

threading.Thread(target=tail_forever, args=(fn,)).start()

print tailq.get() # blocks
print tailq.get_nowait() # throws Queue.Empty if there are no lines to read
</snippet></ROW><ROW><id>12523475</id><snippet>def prompt():
    while True:
        user_input = raw_input()
        if input == '?':
            print help_o
        elif not user_input.isalpha():
            print "You entered bad characters"
        elif user_input == 'r': #Restart
            raise RestartException
        else:
            return user_input


class RestartException(Exception):
    pass


while True:
    load_word_list() ##Load words into list
    try:
        for word in wordList: ##Loop that needs to restart
            for i in range(5):
                to_speak = "Spell, %s" %word
                subprocess.Popen(['espeak', to_speak])
                answer = prompt()
                if answer != word:
                    print "You got it wrong"
    except RestartException:
        # catch the exception and return to while loop
        pass
    else:
        # exit while loop
        break
</snippet></ROW><ROW><id>12523482</id><snippet>master.py</snippet></ROW><ROW><id>12523482</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>12523482</id><snippet>multiprocessing</snippet></ROW><ROW><id>12523482</id><snippet>main</snippet></ROW><ROW><id>12523482</id><snippet>if</snippet></ROW><ROW><id>12523482</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>12523482</id><snippet>master.py</snippet></ROW><ROW><id>12523482</id><snippet>if</snippet></ROW><ROW><id>12523482</id><snippet>if __name__ == '__main__':
    # multithread a function process to launch and monitor a child
    p1 = multiprocessing.Process(target = f())
    p1.start()
</snippet></ROW><ROW><id>12523507</id><snippet>pycurl</snippet></ROW><ROW><id>12523507</id><snippet>getinfo</snippet></ROW><ROW><id>12523507</id><snippet>perform</snippet></ROW><ROW><id>12523507</id><snippet>import pycurl

url = 'http://www.google.com'
c = pycurl.Curl()
c.setopt(c.URL, url)
c.perform()
print c.getinfo(c.CONTENT_LENGTH_DOWNLOAD)
</snippet></ROW><ROW><id>12523886</id><snippet>max(d)
</snippet></ROW><ROW><id>12523886</id><snippet>d[max(d)]
</snippet></ROW><ROW><id>12523886</id><snippet>max(d.keys())</snippet></ROW><ROW><id>12523886</id><snippet>$ python -m timeit -s 'd={x:str(x) for x in range(10000)}' 'max(d)'
1000 loops, best of 3: 377 usec per loop
$ python -m timeit -s 'd={x:str(x) for x in range(10000)}' 'max(d.keys())'
1000 loops, best of 3: 476 usec per loop
</snippet></ROW><ROW><id>12524272</id><snippet>requests</snippet></ROW><ROW><id>12524272</id><snippet>#!/usr/bin/env python
import requests

r = requests.get('https://github.com/timeline.json')
for item in r.json or []:
    print item['repository']['name']
</snippet></ROW><ROW><id>12524403</id><snippet>test.test.r_dp</snippet></ROW><ROW><id>12524403</id><snippet>kind=&lt;kind&gt;</snippet></ROW><ROW><id>12524403</id><snippet>f2py test.f90 -m test</snippet></ROW><ROW><id>12524403</id><snippet>Reading fortran codes...
    Reading file 'test.f90' (format:free)
Post-processing...
    Block: test
            Block: test
                Block: input_sp
                Block: input_dp
Post-processing (stage 2)...
    Block: test
        Block: unknown_interface
            Block: test
                Block: input_sp
                Block: input_dp
Building modules...
    Building module "test"...
        Constructing F90 module support for "test"...
          Variables: r_dp sp r_sp dp
            Constructing wrapper function "test.input_sp"...
getctype: "real(kind=sp)" is mapped to C "float" (to override define dict(real = dict(sp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
getctype: "real(kind=sp)" is mapped to C "float" (to override define dict(real = dict(sp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
getctype: "real(kind=sp)" is mapped to C "float" (to override define dict(real = dict(sp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
              input_sp(val)
            Constructing wrapper function "test.input_dp"...
getctype: "real(kind=dp)" is mapped to C "float" (to override define dict(real = dict(dp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
getctype: "real(kind=dp)" is mapped to C "float" (to override define dict(real = dict(dp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
getctype: "real(kind=dp)" is mapped to C "float" (to override define dict(real = dict(dp="&lt;C typespec&gt;")) in /Users/warren/tmp/.f2py_f2cmap file).
              input_dp(val)
    Wrote C/API module "test" to file "./testmodule.c"
    Fortran 90 wrappers are saved to "./test-f2pywrappers2.f90"
</snippet></ROW><ROW><id>12524403</id><snippet>selected_real_kind</snippet></ROW><ROW><id>12524403</id><snippet>sp</snippet></ROW><ROW><id>12524403</id><snippet>dp</snippet></ROW><ROW><id>12524403</id><snippet>.f2py_f2cmap</snippet></ROW><ROW><id>12524403</id><snippet>dict(real=dict(sp='float', dp='double'))
</snippet></ROW><ROW><id>12524403</id><snippet>real(sp)</snippet></ROW><ROW><id>12524403</id><snippet>real(dp)</snippet></ROW><ROW><id>12524403</id><snippet>module types

implicit none
integer, parameter :: sp = selected_real_kind(6,37) ! single precision
integer, parameter :: dp = selected_real_kind(15,307) ! double precision

real(sp) :: r_sp = 1.0
real(dp) :: r_dp = 1.0_dp

end module


module input

contains 

subroutine input_sp(val)
  use types
  real(sp), intent(in) :: val
  real(sp) :: x
  x = val
  write(*,*) x
end subroutine

subroutine input_dp(val)
  use types
  real(dp), intent(in) :: val
  real(dp) :: x
  x = val
  write(*,*) dp, val, x
end subroutine

end module
</snippet></ROW><ROW><id>12524815</id><snippet>&lt;F5&gt;</snippet></ROW><ROW><id>12524815</id><snippet>:verbose nmap &lt;F5&gt;</snippet></ROW><ROW><id>12524872</id><snippet>logging</snippet></ROW><ROW><id>12524872</id><snippet>logging.debug</snippet></ROW><ROW><id>12524872</id><snippet>__debug__</snippet></ROW><ROW><id>12524872</id><snippet>True</snippet></ROW><ROW><id>12524872</id><snippet>-O</snippet></ROW><ROW><id>12524872</id><snippet>PYTHONOPTIMIZE</snippet></ROW><ROW><id>12524872</id><snippet>__debug__</snippet></ROW><ROW><id>12524872</id><snippet>if</snippet></ROW><ROW><id>12524872</id><snippet>if</snippet></ROW><ROW><id>12524872</id><snippet>True</snippet></ROW><ROW><id>12524872</id><snippet>if</snippet></ROW><ROW><id>12524872</id><snippet>__debug__</snippet></ROW><ROW><id>12524872</id><snippet>def f():
    if __debug__: return 3
    else: return 4

def g():
    if True: return 3
    else: return 4
</snippet></ROW><ROW><id>12524872</id><snippet>dis</snippet></ROW><ROW><id>12524872</id><snippet>&gt;&gt;&gt; dis.dis(f)
  2           0 LOAD_CONST               1 (3)
              3 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_GLOBAL              0 (True)
              3 JUMP_IF_FALSE            5 (to 11)
              6 POP_TOP             
              7 LOAD_CONST               1 (3)
             10 RETURN_VALUE        
        &gt;&gt;   11 POP_TOP             

  3          12 LOAD_CONST               2 (4)
             15 RETURN_VALUE        
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
</snippet></ROW><ROW><id>12524872</id><snippet>f</snippet></ROW><ROW><id>12524925</id><snippet>python setup.py install
</snippet></ROW><ROW><id>12524925</id><snippet>cd Source
python setup.py configure
make
cd ../Tests
make
cd Source
mkdir [YOUR PYTHON LIBDIR]/site-packages/pysvn
cp pysvn/__init__.py [YOUR PYTHON LIBDIR]/site-packages/pysvn
cp pysvn/_pysvn*.so [YOUR PYTHON LIBDIR]/site-packages/pysvn
</snippet></ROW><ROW><id>12525165</id><snippet>BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS) 
unpad = lambda s : s[0:-ord(s[-1])]
</snippet></ROW><ROW><id>12525165</id><snippet>class AESCipher:
    def __init__( self, key ):
        self.key = key

    def encrypt( self, raw ):
        raw = pad(raw)
        iv = Random.new().read( AES.block_size )
        cipher = AES.new( self.key, AES.MODE_CBC, iv )
        return base64.b64encode( iv + cipher.encrypt( raw ) ) 

    def decrypt( self, enc ):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        cipher = AES.new(self.key, AES.MODE_CBC, iv )
        return unpad(cipher.decrypt( enc[16:] ))
</snippet></ROW><ROW><id>12525311</id><snippet>http://www.google.com/jfljflfjej\&amp;12345
</snippet></ROW><ROW><id>12525311</id><snippet> \ ' " ` &lt; &gt; | ; &lt;Space&gt; &lt;Tab&gt; &lt;Newline&gt; ( ) [ ] ? # $ ^ &amp; * =
</snippet></ROW><ROW><id>12525450</id><snippet>print 4
</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>print 3 + 1
</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>3 + 1</snippet></ROW><ROW><id>12525450</id><snippet>3 + 1</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>def f(x):
    return x + 1

print f(3)
</snippet></ROW><ROW><id>12525450</id><snippet>f(3)</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>f</snippet></ROW><ROW><id>12525450</id><snippet>def</snippet></ROW><ROW><id>12525450</id><snippet>3</snippet></ROW><ROW><id>12525450</id><snippet>x</snippet></ROW><ROW><id>12525450</id><snippet>3</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>return</snippet></ROW><ROW><id>12525450</id><snippet>x + 1</snippet></ROW><ROW><id>12525450</id><snippet>x + 1</snippet></ROW><ROW><id>12525450</id><snippet>x</snippet></ROW><ROW><id>12525450</id><snippet>3</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>print f(3)</snippet></ROW><ROW><id>12525450</id><snippet>f(3)</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>print</snippet></ROW><ROW><id>12525450</id><snippet>def f(x):
    return x + 2

def g(y):
    return f(y * 2)

print g(1)
</snippet></ROW><ROW><id>12525450</id><snippet>g(2)</snippet></ROW><ROW><id>12525450</id><snippet>g(2)</snippet></ROW><ROW><id>12525450</id><snippet>f(y * 2)</snippet></ROW><ROW><id>12525450</id><snippet>y</snippet></ROW><ROW><id>12525450</id><snippet>1</snippet></ROW><ROW><id>12525450</id><snippet>y * 2</snippet></ROW><ROW><id>12525450</id><snippet>f</snippet></ROW><ROW><id>12525450</id><snippet>2</snippet></ROW><ROW><id>12525450</id><snippet>f</snippet></ROW><ROW><id>12525450</id><snippet>2</snippet></ROW><ROW><id>12525450</id><snippet>x + 2</snippet></ROW><ROW><id>12525450</id><snippet>x</snippet></ROW><ROW><id>12525450</id><snippet>2</snippet></ROW><ROW><id>12525450</id><snippet>x + 2</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>f</snippet></ROW><ROW><id>12525450</id><snippet>f(y * 2)</snippet></ROW><ROW><id>12525450</id><snippet>g</snippet></ROW><ROW><id>12525450</id><snippet>g</snippet></ROW><ROW><id>12525450</id><snippet>g(1)</snippet></ROW><ROW><id>12525450</id><snippet>4</snippet></ROW><ROW><id>12525450</id><snippet>f(2)</snippet></ROW><ROW><id>12525450</id><snippet>g(1)</snippet></ROW><ROW><id>12525450</id><snippet>f(2)</snippet></ROW><ROW><id>12525450</id><snippet>return</snippet></ROW><ROW><id>12525450</id><snippet>return</snippet></ROW><ROW><id>12525450</id><snippet>return</snippet></ROW><ROW><id>12525450</id><snippet>return</snippet></ROW><ROW><id>12525450</id><snippet>fib(3)</snippet></ROW><ROW><id>12525450</id><snippet>fib(3):
    3 is not equal to 0 or equal to 1
    need to evaluate fib(3 - 1) + fib(3 - 2)
        3 - 1 is 2
        fib(2):
            2 is not equal to 0 or equal to 1
            need to evaluate fib(2 - 1) + fib(2 - 2)
                2 - 1 is 1
                fib(1):
                    1 is equal to 0 or equal to 1
                    return 1
                fib(1) is 1
                2 - 2  is 0
                fib(0):
                    0 is equal to 0 or equal to 1
                    return 1
                fib(0) is 1
            so fib(2 - 1) + fib(2 - 2) is 1 + 1
        fib(2) is 2
        3 - 2 is 1
        fib(1):
            1 is equal to 0 or equal to 1
            return 1
        fib(1) is 1
    so fib(3 - 1) + fib(3 - 2) is 2 + 1
fib(3) is 3
</snippet></ROW><ROW><id>12525450</id><snippet>fib(3)</snippet></ROW><ROW><id>12525450</id><snippet>fib(2) + fib(1)</snippet></ROW><ROW><id>12525450</id><snippet>fib(1)</snippet></ROW><ROW><id>12525450</id><snippet>fib(3)</snippet></ROW><ROW><id>12525450</id><snippet>fib(2)</snippet></ROW><ROW><id>12525450</id><snippet>fib(2)</snippet></ROW><ROW><id>12525450</id><snippet>fib(1) + fib(0)</snippet></ROW><ROW><id>12525450</id><snippet>1</snippet></ROW><ROW><id>12525450</id><snippet>fib(2)</snippet></ROW><ROW><id>12525450</id><snippet>2</snippet></ROW><ROW><id>12525450</id><snippet>fib(3)</snippet></ROW><ROW><id>12525450</id><snippet>fib(2) + fib(1)</snippet></ROW><ROW><id>12525450</id><snippet>2 + 1</snippet></ROW><ROW><id>12525450</id><snippet>3</snippet></ROW><ROW><id>12525450</id><snippet>fib(0)</snippet></ROW><ROW><id>12525450</id><snippet>fib(1)</snippet></ROW><ROW><id>12525450</id><snippet>1</snippet></ROW><ROW><id>12525450</id><snippet>1</snippet></ROW><ROW><id>12525836</id><snippet>In [92]: df
Out[92]:
           a         b          c         d
A  -0.488816  0.863769   4.325608 -4.721202
B -11.937097  2.993993 -12.916784 -1.086236
C  -5.569493  4.672679  -2.168464 -9.315900
D   8.892368  0.932785   4.535396  0.598124

In [93]: df_norm = (df - df.mean()) / (df.max() - df.min())

In [94]: df_norm
Out[94]:
          a         b         c         d
A  0.085789 -0.394348  0.337016 -0.109935
B -0.463830  0.164926 -0.650963  0.256714
C -0.158129  0.605652 -0.035090 -0.573389
D  0.536170 -0.376229  0.349037  0.426611

In [95]: df_norm.mean()
Out[95]:
a   -2.081668e-17
b    4.857226e-17
c    1.734723e-17
d   -1.040834e-17

In [96]: df_norm.max() - df_norm.min()
Out[96]:
a    1
b    1
c    1
d    1
</snippet></ROW><ROW><id>12526108</id><snippet>print_tables(int(user_input) if user_input.isdigit() else user_input)
</snippet></ROW><ROW><id>12526120</id><snippet>MONTH = r'(?P&lt;month&gt;Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'
DAY = r'(?P&lt;day&gt;\d{2})'
TIME = r'(?P&lt;hour&gt;\d{2}):(?P&lt;minute&gt;\d{2}):(?P&lt;second&gt;\d{2})'
SPC = r'\s'
HOST = r'(?&lt;host&gt;\w+)'
PREFIX = SPC.join(MONTH, DAY, TIME, HOST)
foobar_patterns = {
    'pattern1': re.compile(PREFIX + r'\s(?&lt;payload&gt;blahbla hbla h blah)'),
    'pattern2': re.compile(PREFIX + r'\s(?&lt;payload&gt;bla h blahbla hblah)'),
}
</snippet></ROW><ROW><id>12526227</id><snippet>   import feedparser
&gt;&gt;&gt; url = 'http://feeds2.feedburner.com/meinscheissleben '
&gt;&gt;&gt; d = feedparser.parse(url)

len(d['entries']) # nr of entries
d['entries'][0] # pick one
</snippet></ROW><ROW><id>12526270</id><snippet>pip install -i http://pypi.testrun.org -U pytest
</snippet></ROW><ROW><id>12526348</id><snippet>numpy.array()</snippet></ROW><ROW><id>12526743</id><snippet>def create_profile(sender, instance, created, **kwargs):
    profile = None
    if created:
        profile, created = Profile.objects.get_or_create(user=instance)

post_save.connect(create_profile, sender=User)
</snippet></ROW><ROW><id>12527134</id><snippet>n</snippet></ROW><ROW><id>12527134</id><snippet>n</snippet></ROW><ROW><id>12527236</id><snippet>#Form
class GpsImForm(forms.Form):
    image = forms.ImageField(required=True)
    gps_data = forms.CharField()

    def clean(self):
        super(forms.Form, self)).clean()
        if not self.cleaned_data['gps_data']:  # the user can provide the gps_data manually
            if self.cleaned_data['image']:     # if he provided no gps_data but an image
                i = Image.open(self.cleaned_data['image'])
                ... # functions to extract exif data from i
            else:
                msg = _("You have to provide an image or a gps_data.")
                self._errors['gps_data'] = self.error_class([msg]) 
        return self.cleaned_data


#View
def gpsim_gen_view(request):
    if request.method == 'POST':
        form = GpsImForm(request.POST, request.FILES)
        if form.is_valid():
            obj = form.save()
            return ... #returns the gpsim
    else:
        form = GpsImForm()
    return direct_to_template(request, 'gpsim_generate.html', {'form': form,})
</snippet></ROW><ROW><id>12527335</id><snippet>INSTALL</snippet></ROW><ROW><id>12527335</id><snippet>setupext.py</snippet></ROW><ROW><id>12527335</id><snippet>basedir</snippet></ROW><ROW><id>12527335</id><snippet>sys.platform</snippet></ROW><ROW><id>12527335</id><snippet>/some/path/include/someheader.h</snippet></ROW><ROW><id>12527335</id><snippet>/some/path</snippet></ROW><ROW><id>12527335</id><snippet>basedir</snippet></ROW><ROW><id>12527426</id><snippet>python manage.py inspectdb &gt; models.py
</snippet></ROW><ROW><id>12527737</id><snippet>email.header</snippet></ROW><ROW><id>12527737</id><snippet>&gt;&gt;&gt; from email.header import decode_header
&gt;&gt;&gt; bytes, encoding = decode_header('=?utf-8?Q?12_=D7=A1=D7=91=D7=99=D7=97?=')[0]
&gt;&gt;&gt; print bytes.decode(encoding)
12 סביח
</snippet></ROW><ROW><id>12527752</id><snippet>&gt;&gt;&gt; husbands2wives = bidict({'john': 'jackie'})
&gt;&gt;&gt; husbands2wives['john'] # the forward mapping is just like with dict
'jackie'
&gt;&gt;&gt; husbands2wives[:'jackie'] # use slice for the inverse mapping
'john'
</snippet></ROW><ROW><id>12527753</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; from dateutil import rrule
&gt;&gt;&gt; # this is raw data I get from the DB, according to django docs I store it in UTC
&gt;&gt;&gt; raw = datetime.utcnow().replace(tzinfo=pytz.UTC)
&gt;&gt;&gt; # in addition I need to store the timezone so I can do dst the calculations
&gt;&gt;&gt; tz = pytz.timezone("Europe/Warsaw")
&gt;&gt;&gt; # this means that the actual local time would be
&gt;&gt;&gt; local = raw.astimezone(tz)
&gt;&gt;&gt; # but rrule doesn't take into account DST and local time, so I must convert aware datetime to naive
&gt;&gt;&gt; naive = local.replace(tzinfo=None)
&gt;&gt;&gt; # standard rrule
&gt;&gt;&gt; r = rrule.rrule(rrule.DAILY,interval=180,count=10,dtstart=naive)
&gt;&gt;&gt; for dt in r:
&gt;&gt;&gt;     # now we must get back to aware datetime - since we are using naive (local) datetime, 
        # we must convert it back to local timezone
...     print tz.localize(dt)
</snippet></ROW><ROW><id>12527753</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from dateutil import rrule
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; now = datetime.utcnow()
&gt;&gt;&gt; pl = pytz.timezone("Europe/Warsaw")
&gt;&gt;&gt; r = rrule.rrule(rrule.DAILY, dtstart=now, interval=180, count=2)
&gt;&gt;&gt; now
datetime.datetime(2012, 9, 21, 9, 21, 57, 900000)
&gt;&gt;&gt; for dt in r:
...     local_dt = dt.replace(tzinfo=pytz.UTC).astimezone(pl)
...     print local_dt - local_dt.dst()
...     
2012-09-21 10:21:57+02:00
2013-03-20 10:21:57+01:00
&gt;&gt;&gt; # so what is the actual local time we store in the DB ?
&gt;&gt;&gt; now.replace(tzinfo=pytz.UTC).astimezone(pl)
datetime.datetime(2012, 9, 21, 11, 21, 57, 900000, tzinfo=&lt;DstTzInfo 'Europe/Warsaw' CEST+2:00:00 DST&gt;)
</snippet></ROW><ROW><id>12528097</id><snippet>+</snippet></ROW><ROW><id>12528097</id><snippet>+</snippet></ROW><ROW><id>12528097</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>12528097</id><snippet>+</snippet></ROW><ROW><id>12528097</id><snippet>urllib.quote</snippet></ROW><ROW><id>12528097</id><snippet>+</snippet></ROW><ROW><id>12528097</id><snippet>import urllib
def urlencode_withoutplus(query):
    if hasattr(query, 'items'):
        query = query.items()
    l = []
    for k, v in query:
        k = urllib.quote(str(k), safe=' /+')
        v = urllib.quote(str(v), safe=' /+')
        l.append(k + '=' + v)
    return '&amp;'.join(l)
</snippet></ROW><ROW><id>12528097</id><snippet>&gt;&gt;&gt; urlencode_withoutplus({'arg0': 'value', 'arg1': '+value'})
'arg0=value&amp;arg1=+value'
</snippet></ROW><ROW><id>12528097</id><snippet>requests</snippet></ROW><ROW><id>12528097</id><snippet>data</snippet></ROW><ROW><id>12528097</id><snippet>requests.post(url, urlencode_withoutplus(query),
    headers={'Content-Type': 'application/x-www-form-urlencoded'})
</snippet></ROW><ROW><id>12528816</id><snippet>globals()</snippet></ROW><ROW><id>12528816</id><snippet>g</snippet></ROW><ROW><id>12528816</id><snippet>globals()</snippet></ROW><ROW><id>12528816</id><snippet>g</snippet></ROW><ROW><id>12528816</id><snippet>UserException</snippet></ROW><ROW><id>12528816</id><snippet>err()</snippet></ROW><ROW><id>12528816</id><snippet>&gt;&gt;&gt; def err(msg):
    # ? how to get the globals variable in eval ?
    A = sys._getframe(1).f_globals.get('A', 'A not found')
    return UserException("%s and A's value is %r" % (msg, A))

&gt;&gt;&gt; import sys
&gt;&gt;&gt; g = {
    'err': err,
    'A': None,
    '__builtins__': {},
}
&gt;&gt;&gt; print eval('A or err("A not true")', g, g)
A not true and A's value is None
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12529005</id><snippet>xmlTag = dom.getElementsByTagName('description')[i].toxml()
</snippet></ROW><ROW><id>12529005</id><snippet>xmlTag = dom.getElementsByTagName('description')[i].toxml().encode('ascii', 'ignore')
</snippet></ROW><ROW><id>12529427</id><snippet>twisted.internet.stdio.StandardIO</snippet></ROW><ROW><id>12529427</id><snippet>IRCClient</snippet></ROW><ROW><id>12529427</id><snippet>IRCClient.msg</snippet></ROW><ROW><id>12529427</id><snippet>def aSillyBlockingMethod(bot):
    import time
    while True:
        msg = raw_input()
        bot.threadSafeMsg("#bottest", msg)


class LogBot(irc.IRCClient):
    """A logging IRC bot."""

    nickname = "twistedbot"

    def connectionMade(self):
        irc.IRCClient.connectionMade(self)
        self.logger = MessageLogger(open(self.factory.filename, "a"))
        self.logger.log("[connected at %s]" % 
                        time.asctime(time.localtime(time.time())))

        # The bot is now connected.  Start reading input here.
        # Pass a reference to this protocol instance, so that
        # messages can be sent to this protocol instance.
        deferToThread(aSillyBlockingMethod, self)


    # Define a helper function for aSillyBlockingMethod to use.
    # Since aSillyBlockingMethod runs in a thread, it cannot just call
    # IRCClient.msg, since that method - like almost all methods in Twisted -
    # is not thread-safe.  Instead it must call this thread-safe wrapper.
    def threadSafeMsg(self, channel, message):
        reactor.callFromThread(self.msg, channel, message)
</snippet></ROW><ROW><id>12529427</id><snippet>aSillyBlockingMethod</snippet></ROW><ROW><id>12529427</id><snippet>LogBot</snippet></ROW><ROW><id>12529427</id><snippet>StandardIO</snippet></ROW><ROW><id>12529431</id><snippet>while True: 
    sleep_now = False
    try:
        print "WRITER:Getting"
        line,offset = self.queue.get(True, 5)
        #Process the line just read
        proc_line = self.process_line(line)
        if proc_line: 
            #Must write it to DB. Put it into DB Queue
            if self.dbqueue.full(): 
                #DB Queue is full, put data into DB before putting more data
                self.empty_dbqueue()
            self.dbqueue.put(proc_line)
            #Keep a track of the maximum offset in the queue
            self.queue_offset = offset if offset &gt; self.queue_offset else self.queue_offset
    except Queue.Empty: 
        #Looks like writing queue is empty. Just check if DB Queue is empty too
        print "WRITER: Empty Read Queue"
        self.empty_dbqueue()
</snippet></ROW><ROW><id>12529496</id><snippet>subprocess.call</snippet></ROW><ROW><id>12529496</id><snippet>if subprocess.call( [ "killall", "-9", "firefox-bin" ] ) &gt; 0:
    self._logger.debug( 'Firefox cleanup - FAILURE!' )
else:
    self._logger.debug( 'Firefox cleanup - SUCCESS!' )
</snippet></ROW><ROW><id>12529496</id><snippet>call()</snippet></ROW><ROW><id>12529496</id><snippet>shell</snippet></ROW><ROW><id>12529496</id><snippet>True</snippet></ROW><ROW><id>12529496</id><snippet>if subprocess.call( "killall -9 firefox-bin", shell=True ) &gt; 0:
    self._logger.debug( 'Firefox cleanup - FAILURE!' )
else:
    self._logger.debug( 'Firefox cleanup - SUCCESS!' )
</snippet></ROW><ROW><id>12529496</id><snippet>&gt; 0</snippet></ROW><ROW><id>12529496</id><snippet>is</snippet></ROW><ROW><id>12529563</id><snippet>accuracy=[{'value':1,'key':'apple'}, {'value':2,'key':'orange'}]
for fruit in accuracy:
    print 'name={key}'.format(**fruit)
    print 'value={value}'.format(**fruit)
</snippet></ROW><ROW><id>12529563</id><snippet>str.format()</snippet></ROW><ROW><id>12529563</id><snippet># Here is the special class @mgilson mentioned:
class DotDict(dict):
    def __getattr__(self, attr):
        return self.get(attr, None)
    __setattr__=dict.__setitem__
    __delattr__=dict.__delitem__

accuracy=[{'value':1,'key':'apple'}, {'value':2,'key':'orange'}]    
for fruit in accuracy:
    # Convert dict to DotDict before passing to .format() method:
    print 'name={fruit.key}'.format(fruit=DotDict(fruit))
</snippet></ROW><ROW><id>12529610</id><snippet>actions = CharField('actions', readonly=True)
</snippet></ROW><ROW><id>12529610</id><snippet>dehydrate_actions</snippet></ROW><ROW><id>12529610</id><snippet>actions = fields.ToManyField('ActionResource', 'action_set')
</snippet></ROW><ROW><id>12529834</id><snippet>from django import template
from django.db.models import get_model
register=template.Library();

@register.simple_tag(takes_context=True)
def get_latest_news(context,context_variable):
    context[context_variable]=get_model('News','Article').objects.order_by('-publish_date')[0,10]
    return ''
</snippet></ROW><ROW><id>12529834</id><snippet>{% load news %}
{% block sidebar %}
    {% get_latest_news 'latest' %}
    {% for one in latest %}
        &lt;p&gt;{{one}}&lt;/p&gt;
    {% endfor %}
{% endblock %}
</snippet></ROW><ROW><id>12530553</id><snippet>pickle</snippet></ROW><ROW><id>12530553</id><snippet>cPickle</snippet></ROW><ROW><id>12530553</id><snippet>__reduce__</snippet></ROW><ROW><id>12530553</id><snippet>__reduce__</snippet></ROW><ROW><id>12530553</id><snippet>PyMethodDef</snippet></ROW><ROW><id>12530553</id><snippet>copy_reg</snippet></ROW><ROW><id>12530719</id><snippet>reduce</snippet></ROW><ROW><id>12530719</id><snippet>operator</snippet></ROW><ROW><id>12530719</id><snippet>import operator
a = range(10)
reduce(operator.add,a) #45
reduce(operator.sub,a) #-45
reduce(operator.mul,a) #0 -- first element is 0.
reduce(operator.div,a) #0 -- first element is 0.
</snippet></ROW><ROW><id>12530719</id><snippet>operations = {'+':operator.add,'-':operator.sub,} # ...
</snippet></ROW><ROW><id>12530719</id><snippet>reduce(operations[your_operator],a)
</snippet></ROW><ROW><id>12530841</id><snippet>class ogrGeo(object)
    def __init__(self):
        pass

    def CreateLine(self, o_file, xy):
        #lots of code
        value = self._utility_method(xy)

    def CreatePoint(self, o_file, xy):
        # lot's of the same code as CreateLine(), 
        # only minor differences
        value = self._utility_method(xy)

    def _utility_method(self, xy):
        # Common code here
        return value
</snippet></ROW><ROW><id>12530841</id><snippet>self</snippet></ROW><ROW><id>12531367</id><snippet>PyRun_String(line, Py_single_input, py_dict, py_dict);
PyRun_SimpleString("\n");
</snippet></ROW><ROW><id>12531778</id><snippet>Comparator</snippet></ROW><ROW><id>12531778</id><snippet>Collections.sort(items,  new Comparator&lt;String&gt;() {
    private Pattern p = Pattern.compile("(\d+)[A-Z]*)");
    public int compare(String o1, String o2) {
        Matcher m1 = p.matcher(o1);
        Matcher m2 = p.matcher(o2);

        return Integer.valueOf(m1.group(0)).compareTo(Integer.valueOf(m2.group(0)));
    }
});
</snippet></ROW><ROW><id>12531778</id><snippet>Comparator</snippet></ROW><ROW><id>12531853</id><snippet>sum()</snippet></ROW><ROW><id>12531853</id><snippet>&gt;&gt;&gt; sum(range(10))
45
</snippet></ROW><ROW><id>12531853</id><snippet>start</snippet></ROW><ROW><id>12531853</id><snippet>start</snippet></ROW><ROW><id>12531853</id><snippet>0</snippet></ROW><ROW><id>12531853</id><snippet>start</snippet></ROW><ROW><id>12531853</id><snippet>&gt;&gt;&gt; user_input = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
&gt;&gt;&gt; sum(int(v) for v in user_input)
45
</snippet></ROW><ROW><id>12532066</id><snippet>import logging
import sys
import traceback
def tracer(func):
    def new_func(*args, **kwargs):
        try:
            traceback.print_stack(sys.stderr)
        except:
            traceback.print_exc(sys.stderr)
        return func(*args, **kwargs)
    return new_func
old_addHandler = logging.root.addHandler
logging.root.addHandler = tracer(old_addHandler)

# run your code
</snippet></ROW><ROW><id>12532341</id><snippet>urllib2.urlopen(url,data=data)</snippet></ROW><ROW><id>12532662</id><snippet>&gt;&gt;&gt; import bottlenose
&gt;&gt;&gt; amazon = bottlenose.Amazon(AMAZON_ACCESS_KEY_ID, AMAZON_SECRET_KEY, AMAZON_ASSOC_TAG)
&gt;&gt;&gt; response = amazon.ItemLookup(ItemId="0596520999", ResponseGroup="Images",
     SearchIndex="Books", IdType="ISBN")
&lt;?xml version="1.0" ?&gt;&lt;ItemLookupResponse xmlns="http://webservices.amazon...
</snippet></ROW><ROW><id>12532972</id><snippet>""</snippet></ROW><ROW><id>12532972</id><snippet>zeros = ""</snippet></ROW><ROW><id>12532981</id><snippet>        print(i,)
</snippet></ROW><ROW><id>12532981</id><snippet>        print(i, end=" ")
</snippet></ROW><ROW><id>12533144</id><snippet>i</snippet></ROW><ROW><id>12533144</id><snippet>count_to</snippet></ROW><ROW><id>12533144</id><snippet>def count_to(n):
    while True:
        for i in range(n):
            yield i

to100 = count_to(101)
for row in db_parts.execute('''SELECT * from parts''').fetchall():
    i = to100.next()
    db_parts.execute('''UPDATE parts set bin=? where entry=?''',
        (i, str(row[0]))
    )
    print i
conn.commit()
</snippet></ROW><ROW><id>12533304</id><snippet>func.count(Read.id).label('total')</snippet></ROW><ROW><id>12533304</id><snippet>func.count(func.distinct(Read.id)).label('total')</snippet></ROW><ROW><id>12533304</id><snippet>subq_read = (session.query(
                Post.id, 
                func.count(Read.id).label("total_read")
            ).
            outerjoin(Post.Reads).
            group_by(Read.post_read)
            ).subquery()

subq_vote = (session.query(
                Post.id, 
                func.sum(Vote.user_vote).label("total_votes")
            ).
            outerjoin(Post.Votes).
            group_by(Vote.post_read)
            ).subquery()

posts = (session.query(
            Post, 
            subq_read.c.total_read,
            subq_vote.c.total_votes,
        ).
        outerjoin(subq_read, subq_read.c.id == Post.id).
        outerjoin(subq_vote, subq_vote.c.id == Post.id)
        .group_by(Post)
        )
</snippet></ROW><ROW><id>12533304</id><snippet>User.username</snippet></ROW><ROW><id>12533304</id><snippet>join</snippet></ROW><ROW><id>12533669</id><snippet>selenium.webdriver</snippet></ROW><ROW><id>12533669</id><snippet>import selenium.webdriver as webdriver
import lxml.html as lh
import lxml.html.clean as clean

browser = webdriver.Chrome() # Get local session of Chrome
browser.get("http://www.webpage.com") # Load page

content=browser.page_source
cleaner=clean.Cleaner()
content=cleaner.clean_html(content) 
doc=lh.fromstring(content)
</snippet></ROW><ROW><id>12533669</id><snippet>lxml.html.HtmlElement</snippet></ROW><ROW><id>12533675</id><snippet>root.geometry("+%d+%d" % (rootsize + (x, y)))
</snippet></ROW><ROW><id>12533675</id><snippet>winfo_width()</snippet></ROW><ROW><id>12533675</id><snippet>winfo_height()</snippet></ROW><ROW><id>12533675</id><snippet>geometry</snippet></ROW><ROW><id>12533815</id><snippet>new Date("2012-09-21 14:47:54.313000")
</snippet></ROW><ROW><id>12533861</id><snippet>coins = [ 0 ]*n
dp = [ 0 ]*( s+1 )
</snippet></ROW><ROW><id>12533861</id><snippet>  File "ttt.py", line 31, in &lt;module&gt;
    main()
  File "ttt.py", line 21, in main
    if dp[ i-coins[ j ] ] + 1 &lt; min_val :
TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
</snippet></ROW><ROW><id>12533861</id><snippet>print dp[s]</snippet></ROW><ROW><id>12533861</id><snippet>print coins[s]</snippet></ROW><ROW><id>12533903</id><snippet>from selenium import webdriver

browser = webdriver.Chrome() # Get local session of Chrome
browser.get("http://www.somepage.com") # Load page

elem = browser.find_element_by_id("show_links") # Find javascript button
elem.click() # Click on the button that 'populates the div'
</snippet></ROW><ROW><id>12533983</id><snippet>data_string.splitlines()</snippet></ROW><ROW><id>12533983</id><snippet>[s.strip() for s in data_string.splitlines()]
</snippet></ROW><ROW><id>12533983</id><snippet>&gt;&gt;&gt; [s.strip() for s in data_string.splitlines()]
['Name: John Smith', 'Home: Anytown USA', 'Phone: 555-555-555', 'Other Home: Somewhere Else', 'Notes: Other data', 'Name: Jane Smith', 'Misc: Data with spaces']
</snippet></ROW><ROW><id>12533983</id><snippet>:</snippet></ROW><ROW><id>12533983</id><snippet>&gt;&gt;&gt; [s.strip().split(': ') for s in data_string.splitlines()]
[['Name', 'John Smith'], ['Home', 'Anytown USA'], ['Phone', '555-555-555'], ['Other Home', 'Somewhere Else'], ['Notes', 'Other data'], ['Name', 'Jane Smith'], ['Misc', 'Data with spaces']]
</snippet></ROW><ROW><id>12534157</id><snippet>datetime</snippet></ROW><ROW><id>12534157</id><snippet>import datetime
start = datetime.date(2012,01,01) 
next = start + datetime.date.resolution

while next &lt;= datetime.date.today():
    print start, next

    con.execute("select * from table where date &gt;= %s and date &lt; %s" %(start, next))

    start = next
    next = start + datetime.date.resolution
</snippet></ROW><ROW><id>12534235</id><snippet>csv</snippet></ROW><ROW><id>12534235</id><snippet>&gt;&gt;&gt; source_file = open('out.csv', 'rb')
&gt;&gt;&gt; reader = csv.DictReader(source_file, delimiter = '\t')
&gt;&gt;&gt; line = reader.next()
&gt;&gt;&gt; len(line)
37
&gt;&gt;&gt; line.keys()
['Id', '..Easting', '.NE_Err', 'uSt', 'SeiMoment', 'MaxDispla', 'tSt', 'Ns', 'Nt', 'Nu', '.Northing', '.DD_Err', '...Energy', '....uMag', 'V2.0..', 'DyStressD', 'SRC', 'PeakAccPa', '.SourceRo', '........Time', '.EE_Err', 'T', 'Velocity', 'PeakVelPa', 'AspRadius', '...Depth', 'PSt', '....tMag', '.MomMag', 'AppStress', '...Es/Ep', '.ED_Err', 'Event', '.ND_Err', 'Conf', '.StaticSD', '.NN_Err']
&gt;&gt;&gt; line['........Time']
'ND'
&gt;&gt;&gt; line['.Northing']
'746.45'
</snippet></ROW><ROW><id>12534235</id><snippet>csv</snippet></ROW><ROW><id>12534235</id><snippet>source_file = open(NNSRC, 'rb')
header = source_file.readline()
source_file.seek(len(header))  # reset read buffer

headers = [h.strip('.') for h in header.split()]
headers = ['Date'] + headers[2:]  # Replace ['SRC', 'V2.0'] with a Date field instead
for line in csv.DictReader(source_file, fieldnames=headers, delimiter = '\t'):
    # process line
</snippet></ROW><ROW><id>12534235</id><snippet>.</snippet></ROW><ROW><id>12534235</id><snippet>DictReader</snippet></ROW><ROW><id>12534235</id><snippet>.seek()</snippet></ROW><ROW><id>12534348</id><snippet># Server code
import xmlrpclib
from SimpleXMLRPCServer import SimpleXMLRPCServer

def is_even(n):
    return n%2 == 0

server = SimpleXMLRPCServer(("localhost", 8000))
print "Listening on port 8000..."
server.register_function(is_even, "is_even")
server.serve_forever()


# Client code
import xmlrpclib

proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
print "3 is even: %s" % str(proxy.is_even(3))
print "100 is even: %s" % str(proxy.is_even(100))
</snippet></ROW><ROW><id>12534386</id><snippet>def roll(sides, num_of_dices):
    # returns some list

# main program

sides = input(...)
num_of_dices = input(...)

while True:
  results = roll(sides, num_of_dices)
  print results

  s = input(...)
  if s == 'quit':
      break
</snippet></ROW><ROW><id>12534386</id><snippet>roll</snippet></ROW><ROW><id>12534386</id><snippet>roll</snippet></ROW><ROW><id>12534386</id><snippet>results = [action for i in range(N)]
</snippet></ROW><ROW><id>12534386</id><snippet>sides</snippet></ROW><ROW><id>12534386</id><snippet>num_of_dices</snippet></ROW><ROW><id>12534386</id><snippet>def roll(sides, num_of_dices):
    return [roll_one_dice(sides) for i in range(num_of_dices)]
</snippet></ROW><ROW><id>12534433</id><snippet>print re.findall('url\(([^)]+)\)',target_text)
</snippet></ROW><ROW><id>12534581</id><snippet>window_width()</snippet></ROW><ROW><id>12534581</id><snippet>window_height()</snippet></ROW><ROW><id>12534581</id><snippet>import turtle as tt

def main():
    tt.reset()
    print(tt.window_width(), tt.window_height())
    tt.setx(tt.window_width()//2)

if __name__ == '__main__':
    main()
    tt.mainloop()
</snippet></ROW><ROW><id>12534796</id><snippet>sock.getsockname()[1]</snippet></ROW><ROW><id>12534796</id><snippet>0.0.0.0</snippet></ROW><ROW><id>12534796</id><snippet>''</snippet></ROW><ROW><id>12534796</id><snippet>socket.AF_INET</snippet></ROW><ROW><id>12534796</id><snippet>(host, port, flowinfo, scopeid)</snippet></ROW><ROW><id>12534862</id><snippet>k = Key.from_path('User', 'Boris', 'Address', 9876)
</snippet></ROW><ROW><id>12534862</id><snippet>address_k = db.Key.from_path('Employee', 'asalieri', 'Address', 1)
address = db.get(address_k)
</snippet></ROW><ROW><id>12534862</id><snippet>address = Address(parent=employee)
</snippet></ROW><ROW><id>12535094</id><snippet>/home/me/project/myscript.py</snippet></ROW><ROW><id>12535094</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12535094</id><snippet>test.db</snippet></ROW><ROW><id>12535094</id><snippet>cd</snippet></ROW><ROW><id>12535200</id><snippet>from django.contrib.auth.models import User

class UserProfile(models.Model):
    # This field is required.
    user = models.OneToOneField(User)

    # Other fields here
    accepted_eula = models.BooleanField()
    favorite_animal = models.CharField(max_length=20, default="Dragons.")
</snippet></ROW><ROW><id>12535200</id><snippet>AUTH_PROFILE_MODULE = 'accounts.UserProfile'
</snippet></ROW><ROW><id>12535217</id><snippet>manage.py</snippet></ROW><ROW><id>12535217</id><snippet>manage.py</snippet></ROW><ROW><id>12535269</id><snippet>~/.gnupghome</snippet></ROW><ROW><id>12535269</id><snippet>import tempfile
import shutil

home = tempfile.mkdtemp()
try:
    gpg = gnupg.GPG(gnupghome=home, keyring='/path/to/keyring/file',
        options=['--no-default-keyring'])
finally:
    shutil.rmtree(home)
</snippet></ROW><ROW><id>12535269</id><snippet>tempfile.mkstemp()</snippet></ROW><ROW><id>12535269</id><snippet>.import_keys()</snippet></ROW><ROW><id>12535427</id><snippet>free</snippet></ROW><ROW><id>12535427</id><snippet>@profile</snippet></ROW><ROW><id>12535524</id><snippet>for a, b, c in zip(
    etree.XPath('/Data/a/b/nodeA/text()')
    etree.XPath('/Data/a/b/x/y/nodeB/text()')
    etree.XPath('/Data/a/b/d/nodeB/text()')):

    print a, b, c
</snippet></ROW><ROW><id>12535679</id><snippet>&gt;&gt;&gt; import Queue
&gt;&gt;&gt; q = Queue.Queue()
&gt;&gt;&gt; q.put(1)
&gt;&gt;&gt; q.put(2)
&gt;&gt;&gt; with q.mutex:
...     for item in q.queue:
...             print item
... 
1
2
&gt;&gt;&gt; q.get()
1
&gt;&gt;&gt; q.get()
2
</snippet></ROW><ROW><id>12535749</id><snippet>self.client.post(url, {"name": ""})</snippet></ROW><ROW><id>12535749</id><snippet>thing = Thing.objects.get(id=thing_id)</snippet></ROW><ROW><id>12535749</id><snippet>messages.error(request, "Oops!")</snippet></ROW><ROW><id>12535749</id><snippet>redirect("/wherever")</snippet></ROW><ROW><id>12535749</id><snippet>messages.error(request, "Oops!")</snippet></ROW><ROW><id>12536124</id><snippet>unicode_escape</snippet></ROW><ROW><id>12536124</id><snippet>&gt;&gt;&gt; x = b"\u00f3"
&gt;&gt;&gt; print x
\u00f3
&gt;&gt;&gt; print x.decode('unicode_escape')
ó
</snippet></ROW><ROW><id>12536196</id><snippet>p = subprocess.Popen([sys.executable, '/path/to/script.py'], 
                                    stdout=subprocess.PIPE, 
                                    stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>12536196</id><snippet>#start the python shell
python
#call the subprocess
subprocess.call('/Users/ivanlw/Projects/C/app')
</snippet></ROW><ROW><id>12536237</id><snippet>def change(C, V,res=None):
    res=[] if res is None else res
    if len(V)==0:
        return len(res),res
    maxx=max(V)
    V.remove(maxx)
    ans=C//maxx
    if ans==0 and maxx&lt;C :
        res +=[maxx]*ans
        return  len(res),res
    else:
        res += [maxx]*ans
        return  change(C % maxx,V,res)

print change(48,[1,5,10,25,50])
print change(30,[25,10,2,3,1])
</snippet></ROW><ROW><id>12536237</id><snippet>(6, [25, 10, 10, 1, 1, 1])
(3, [25, 3, 2])
</snippet></ROW><ROW><id>12536452</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dry-run', action='store_true')
parser.add_argument('input_file', type=argparse.FileType('r'))
parser.add_argument('servername', nargs='?')

args = parser.parse_args()
if args.servername is None and not args.dry_run:
    parser.error("Option 'servername' is required when not in dry-run mode.")

print args
</snippet></ROW><ROW><id>12536452</id><snippet>$ ./prog.py inputfile servername
Namespace(dry_run=False, input_file=&lt;open file 'inputfile', mode 'r' at 0x283440&gt;, servername='servername')
$ ./prog.py inputfile -d
Namespace(dry_run=True, input_file=&lt;open file 'inputfile', mode 'r' at 0x2cf440&gt;, servername=None)
$ ./prog.py -d inputfile servername
Namespace(dry_run=True, input_file=&lt;open file 'inputfile', mode 'r' at 0x1f4440&gt;, servername='servername')
$ ./prog.py inputfile
usage: prog.py [-h] [-d] input_file [servername]
prog.py: error: Option 'servername' is required when not in dry-run mode.
</snippet></ROW><ROW><id>12536452</id><snippet>class ServernameAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values is None and not namespace.dry_run:
            parser.error("Option 'servername' is required when not in dry-run mode.")
        setattr(namespace, self.dest, values)

...
parser.add_argument('servername', nargs='?', action=ServernameAction)
...
</snippet></ROW><ROW><id>12536608</id><snippet>subprocess.call</snippet></ROW><ROW><id>12536608</id><snippet>import sys, subprocess
sys.exit(subprocess.call(['php', sys.argv[0].replace('.py', '.php')] + sys.argv[1:]))
</snippet></ROW><ROW><id>12536662</id><snippet>dest = cv.createMat(r, c, cv.CV_32FC1)
src = cv.fromarray(your_np_array)
cv.Convert(src, dest)
</snippet></ROW><ROW><id>12536662</id><snippet>r</snippet></ROW><ROW><id>12536662</id><snippet>c</snippet></ROW><ROW><id>12536690</id><snippet>csv</snippet></ROW><ROW><id>12536690</id><snippet>str.split</snippet></ROW><ROW><id>12536690</id><snippet>with open(infile) as fin,open('outfile','w') as fout:
   for line in fin:
       #use line.split('\t'3) if the name of the field can contain spaces
       name,start,end,rest = line.split(None,3)  
       #do something to change start and end here.
       #Note that `start` and `end` are strings, but they can easily be changed
       #using `int` or `float` builtins.
       fout.write('\t'.join((name,start,end,rest)))
</snippet></ROW><ROW><id>12536690</id><snippet>csv</snippet></ROW><ROW><id>12536690</id><snippet>this is a "single argument"
</snippet></ROW><ROW><id>12536690</id><snippet>['this','is','a','single argument']
</snippet></ROW><ROW><id>12537266</id><snippet>particles = []</snippet></ROW><ROW><id>12537266</id><snippet>init</snippet></ROW><ROW><id>12537266</id><snippet>def __init__(self, x, y, colour, count, sound):
    ...
    self.particles = []
    self.particles.append(Particle(self.x, self.y, 5, self.colour))
</snippet></ROW><ROW><id>12537266</id><snippet>class Burst():

    class_attribute = 0       # declaration of class (static) attribute

    def __init__(self, ...):
        self.attribute = 0    # declaration of object (regular) attribute
</snippet></ROW><ROW><id>12537360</id><snippet>self.tc1 = None
def InitUI(self):
  button1 = wx.Button(panel, label="Browse...")
  button1.Bind(wx.EVT_BUTTON, self.OnBrowse)
  self.tc1 = wx.TextCtrl(panel, -1, "Text")

def OnBrowse(self, event):
  return self.tc1.SetValue("New Text")
</snippet></ROW><ROW><id>12537448</id><snippet>from __future__ import</snippet></ROW><ROW><id>12537448</id><snippet># -*- encoding:ascii -*-
from mako import runtime, filters, cache
UNDEFINED = runtime.UNDEFINED
__M_dict_builtin = dict
__M_locals_builtin = locals
_magic_number = 7
_modified_time = 1348257499.1626351
_template_filename = '/tmp/mako.txt'
_template_uri = '/tmp/mako.txt'
_source_encoding = 'ascii'
_exports = []
</snippet></ROW><ROW><id>12537448</id><snippet>from __future__ import division</snippet></ROW><ROW><id>12537448</id><snippet>/</snippet></ROW><ROW><id>12537448</id><snippet>&gt;&gt;&gt; 1 / 2
0
&gt;&gt;&gt; float(1) / 2
0.5
</snippet></ROW><ROW><id>12537448</id><snippet>division</snippet></ROW><ROW><id>12537455</id><snippet>my_ids = {}

def widget_factory(widget_class,parent,id,*args,**kwargs):
     w = widget_class(parent,id,*args,**kwargs)
     my_ids[id] = w

def get_widget_by_id(widget_id):
     return my_ids[widget_id]
</snippet></ROW><ROW><id>12537489</id><snippet>&gt;&gt;&gt; a = [['Suppliers', 'Spend', 'Test Field\n'], ['Dell Inc', '9000', '1\n']]
&gt;&gt;&gt; a[0][0:0] = ["NEW"]
&gt;&gt;&gt; a[1][0:0] = ["N-E-W"]
&gt;&gt;&gt; a
[['NEW', 'Suppliers', 'Spend', 'Test Field\n'], ['N-E-W', 'Dell Inc', '9000', '1\n']]
</snippet></ROW><ROW><id>12537489</id><snippet>&gt;&gt;&gt; timeit.timeit(setup="a = [['Suppliers', 'Spend', 'Test Field'], ['Dell Inc', '9000', '1']]", 
    stmt="a[0][0:0] = ['NEW']", number=100000)
3.57850867468278
&gt;&gt;&gt; timeit.timeit(setup="a = [['Suppliers', 'Spend', 'Test Field'], ['Dell Inc', '9000', '1']]", 
    stmt="a[0].insert(0, 'NEW')", number=100000)
4.941971139085055
&gt;&gt;&gt; timeit.timeit(setup="a = [['Suppliers', 'Spend', 'Test Field'], ['Dell Inc', '9000', '1']]", 
    stmt="a[0] = ['NEW'] + a[0]", number=100000)
33.147023662906804
</snippet></ROW><ROW><id>12537601</id><snippet>&lt;tr {% if tkey in disabled_rows %} class="disabled-row"{% endif %}&gt;
</snippet></ROW><ROW><id>12537791</id><snippet>&lt;input type="hidden" name="next" value="{{ next }}"&gt;
</snippet></ROW><ROW><id>12537791</id><snippet>django.contrib.auth.views.login</snippet></ROW><ROW><id>12537791</id><snippet>next</snippet></ROW><ROW><id>12537894</id><snippet>insert</snippet></ROW><ROW><id>12537894</id><snippet>a</snippet></ROW><ROW><id>12537894</id><snippet>test2</snippet></ROW><ROW><id>12537894</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>12537894</id><snippet>test1</snippet></ROW><ROW><id>12537894</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(test1)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 BUILD_LIST               3
             12 STORE_FAST               0 (a)

  3          15 LOAD_FAST                0 (a)
             18 LOAD_ATTR                0 (insert)
             21 LOAD_CONST               4 (0)
             24 LOAD_CONST               1 (1)
             27 CALL_FUNCTION            2
             30 POP_TOP             
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(test2)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 BUILD_LIST               3
             12 STORE_FAST               0 (a)

  3          15 LOAD_CONST               1 (1)
             18 BUILD_LIST               1
             21 LOAD_FAST                0 (a)
             24 LOAD_CONST               4 (0)
             27 LOAD_CONST               4 (0)
             30 STORE_SLICE+3       
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE        
</snippet></ROW><ROW><id>12537894</id><snippet>import timeit

def test1():
    a = range(10000000)
    a.insert(1,1)

def test2():
    a = range(10000000)
    a[1:1]=[1]

&gt;&gt;&gt; timeit.timeit(test1, number=10)
6.008707046508789
&gt;&gt;&gt; timeit.timeit(test2, number=10)
5.861173868179321
</snippet></ROW><ROW><id>12537894</id><snippet>list.insert</snippet></ROW><ROW><id>12537894</id><snippet>ins1</snippet></ROW><ROW><id>12537894</id><snippet>listobject.c</snippet></ROW><ROW><id>12537894</id><snippet>for (i = n; --i &gt;= where; )
    items[i+1] = items[i];
</snippet></ROW><ROW><id>12537894</id><snippet>list_ass_slice</snippet></ROW><ROW><id>12537894</id><snippet>memmove</snippet></ROW><ROW><id>12537894</id><snippet>memmove(&amp;item[ihigh+d], &amp;item[ihigh],
        (k - ihigh)*sizeof(PyObject *));
</snippet></ROW><ROW><id>12537894</id><snippet>memmove</snippet></ROW><ROW><id>12537894</id><snippet>memmove</snippet></ROW><ROW><id>12537894</id><snippet>list_ass_slice</snippet></ROW><ROW><id>12537894</id><snippet>_wordcopy_bwd_aligned</snippet></ROW><ROW><id>12537917</id><snippet>&gt;&gt;&gt; class Tester(object):
...     def __init__(self):
...         self.__foo = "hi"
... 
&gt;&gt;&gt; Tester()._Tester__foo
'hi'
&gt;&gt;&gt; Tester().__foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'Tester' object has no attribute '__foo'
</snippet></ROW><ROW><id>12537917</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(Tester.__init__)
  3           0 LOAD_CONST               1 ('hi')
              3 LOAD_FAST                0 (self)
              6 STORE_ATTR               1 (_Tester__foo)
              9 LOAD_CONST               0 (None)
             12 RETURN_VALUE        
</snippet></ROW><ROW><id>12538034</id><snippet>reader1</snippet></ROW><ROW><id>12538034</id><snippet>reader2</snippet></ROW><ROW><id>12538034</id><snippet>csv</snippet></ROW><ROW><id>12538034</id><snippet>for</snippet></ROW><ROW><id>12538034</id><snippet>DictReader</snippet></ROW><ROW><id>12538034</id><snippet>read_1 = myfile1.readlines()
for row2 in reader2:
    reader1 = csv.DictReader(read_1)
    for row1 in reader1:
        # etc.
</snippet></ROW><ROW><id>12538034</id><snippet>reader1 = list(csv.DictReader(myfile))
for row2 in reader2:
    for row1 in reader1:
        # etc.
</snippet></ROW><ROW><id>12538204</id><snippet>t &lt; 50</snippet></ROW><ROW><id>12538204</id><snippet>if t&lt;50:
    t+=1
    iteratepal(b+n)
else:                          
    t=0                        
    print("yea")               
    return True
</snippet></ROW><ROW><id>12538204</id><snippet>else:</snippet></ROW><ROW><id>12538204</id><snippet>None</snippet></ROW><ROW><id>12538204</id><snippet>if t&lt;50:
    t+=1
    return iteratepal(b+n)
else:                          
    t=0                        
    print("yea")               
    return True
</snippet></ROW><ROW><id>12538204</id><snippet>==True</snippet></ROW><ROW><id>12538204</id><snippet>if</snippet></ROW><ROW><id>12538204</id><snippet>if iteratepal(i):
</snippet></ROW><ROW><id>12538204</id><snippet>def ispal(n)</snippet></ROW><ROW><id>12538204</id><snippet>def ispal(n):
    return n == int(''.join(reversed(str(n))))
</snippet></ROW><ROW><id>12538253</id><snippet>macstr = addr.replace(':', '').decode('hex')
</snippet></ROW><ROW><id>12538253</id><snippet>import binascii
macbytes = binascii.unhexlify(addr.replace(b':', b''))
</snippet></ROW><ROW><id>12538275</id><snippet>str = "What $noun$ is $verb$?"
print str.replace("$noun$", "the heck")
</snippet></ROW><ROW><id>12538489</id><snippet>subprocess</snippet></ROW><ROW><id>12538489</id><snippet>answer = 0
while answer &lt; 5:
    answer = int(raw_input("coded by: Narralol\n\n"
    "Pick a task:\n"
    "1) Start Minecraft.exe\n"
    "2) Start Minecraft_Server.jar\n"
    "3) Backup your server\n"
    "4) Copy the backup to your desktop\n"
    "5) Exit\n").strip())
    if answer == 1:
        os.system('D:\Games\Minecraft\Minecraft.exe')
    elif answer == 2:
        os.system('D:\Games\Minecraft\Minecraft_server.jar')
    elif answer == 5:
        break
</snippet></ROW><ROW><id>12538787</id><snippet>n=int(input("enter N="))
total = 0
for i in range(1, n+1, 1):
    if i % 2 == 0:
        ????
    else:
        ????
print(total)
</snippet></ROW><ROW><id>12538787</id><snippet>n=int(input("enter N="))
total = 0
print ("sum", end=" ")
for i in range(1, n+1, 1):
    if i % 2 == 0:
        print("-", i, end=" ")
        ????
    else:
        if i == 1:
           print(i, end=" ")
        else:
           print("+", i, end=" ")
        ????
print("=", total)
</snippet></ROW><ROW><id>12538787</id><snippet>total = 0</snippet></ROW><ROW><id>12538787</id><snippet>ntotal, ptotal = 0, 0</snippet></ROW><ROW><id>12538787</id><snippet>print</snippet></ROW><ROW><id>12538787</id><snippet>print</snippet></ROW><ROW><id>12538787</id><snippet>end=" "</snippet></ROW><ROW><id>12538787</id><snippet>print</snippet></ROW><ROW><id>12538787</id><snippet>print("+", i, end=" ")
</snippet></ROW><ROW><id>12538787</id><snippet>print "+", i,
</snippet></ROW><ROW><id>12538787</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>12539176</id><snippet>&gt;&gt;&gt; abcd = [u'abcd']
&gt;&gt;&gt; abcd_ef = abcd + ['ef']
&gt;&gt;&gt; abcd_ef
[u'abcd', 'ef']
</snippet></ROW><ROW><id>12539176</id><snippet>.append()</snippet></ROW><ROW><id>12539176</id><snippet>abcd</snippet></ROW><ROW><id>12539176</id><snippet>&gt;&gt;&gt; abcd = [u'abcd']
&gt;&gt;&gt; abcd.append('ef')
&gt;&gt;&gt; abcd
[u'abcd', 'ef']
</snippet></ROW><ROW><id>12539255</id><snippet>import re
sequence = 'AAATGAAATAAGGATGGGGTAGTATGATGTGTTT'
codons = re.findall(r'ATG(?:...)*?(?:TAA|TAG|TGT)', sequence)
codon_list = [[s[i:i+3] for i in range(0, len(s), 3)] for s in codons]
</snippet></ROW><ROW><id>12539255</id><snippet>&gt;&gt;&gt; codon_list
[['ATG', 'AAA', 'TAA'], ['ATG', 'GGG', 'TAG'], ['ATG', 'ATG', 'TGT']]
</snippet></ROW><ROW><id>12539279</id><snippet>_</snippet></ROW><ROW><id>12539279</id><snippet>_</snippet></ROW><ROW><id>12539279</id><snippet>_('Hello, world!')</snippet></ROW><ROW><id>12539279</id><snippet>&gt;&gt;&gt; 3 + 4
7
&gt;&gt;&gt; a = _
&gt;&gt;&gt; print a
7
</snippet></ROW><ROW><id>12539483</id><snippet>a = 'l'
b = '5'
c = 'o'

x = input("Enter your message: ")
values = [globals().get(var, '') for var in list(x)]

print "".join(values)
</snippet></ROW><ROW><id>12539483</id><snippet>Enter your message: abc
l5o
</snippet></ROW><ROW><id>12539483</id><snippet>replacements = { 'a': 'l', 'b': '5', 'c': 'o' }

x = input("Enter your message: ")
print "".join([replacements.get(val, "") for val in x])
</snippet></ROW><ROW><id>12539503</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.asarray([1,2,3])
array([1, 2, 3])
&gt;&gt;&gt; numpy.asarray(numpy.array([2,3]))
array([2, 3])
&gt;&gt;&gt; numpy.asarray(1)
array(1)
&gt;&gt;&gt; numpy.asarray((2,3))
array([2, 3])
&gt;&gt;&gt; numpy.asarray({1:3,2:4})
array({1: 3, 2: 4}, dtype=object)
</snippet></ROW><ROW><id>12539503</id><snippet>&gt;&gt;&gt; def f(x):
...    x = numpy.asarray(x)
...    if len(x) != 2:
...       raise Exception("invalid argument")
... 
&gt;&gt;&gt; f([1,2])
&gt;&gt;&gt; f([1,2,3])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in f
Exception: invalid argument
</snippet></ROW><ROW><id>12539503</id><snippet>&gt;&gt;&gt; def f(*args):
...    args = numpy.asarray(args[0]) if len(args) == 1 else numpy.asarray(args)
...    return args
... 
&gt;&gt;&gt; f(7,3,5)
array([7, 3, 5])
&gt;&gt;&gt; f([1,2,3])
array([1, 2, 3])
&gt;&gt;&gt; f((2,3,4))
array([2, 3, 4])
&gt;&gt;&gt; f(numpy.array([1,2,3]))
array([1, 2, 3])
</snippet></ROW><ROW><id>12539628</id><snippet>easy_install-2.7 -U pip
</snippet></ROW><ROW><id>12539628</id><snippet>pip-2.7 install requests
</snippet></ROW><ROW><id>12539628</id><snippet>python2.7</snippet></ROW><ROW><id>12539628</id><snippet>python</snippet></ROW><ROW><id>12539800</id><snippet>DBSession.query()</snippet></ROW><ROW><id>12539800</id><snippet>if len(queries) &gt; 1:
  query = DBSession.query(Table).filter(and_('%s' % qq))
else:
  query = DBSession.query(Table).filter('%s' % qq)
</snippet></ROW><ROW><id>12540009</id><snippet>df.ix['rowlabel'] /= df.ix['rowlabel'].max()
</snippet></ROW><ROW><id>12540009</id><snippet>df.apply(lambda x: x / x.max(), axis=1)
</snippet></ROW><ROW><id>12540187</id><snippet>__init__</snippet></ROW><ROW><id>12540187</id><snippet>__dict__</snippet></ROW><ROW><id>12540187</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json_data =  '{"a": "my data"}'
&gt;&gt;&gt; data = json.loads(json_data)
&gt;&gt;&gt; class AutoVar(object):
...   def __init__(self, data):
...       self.__dict__ = data
... 
&gt;&gt;&gt; test = AutoVar(data)
&gt;&gt;&gt; test.a
u'my data'
</snippet></ROW><ROW><id>12540337</id><snippet>__init__.py</snippet></ROW><ROW><id>12540337</id><snippet>__init__.py</snippet></ROW><ROW><id>12540337</id><snippet>from another_class import doit
from another_class import dataholder
from descriptive_name import getSomeStuff
from descriptive_name import hold_more_data
del another_class, descriptive_name
__all__ = ['doit', 'dataholder', 'getSomeStuff', 'hold_more_data']
</snippet></ROW><ROW><id>12540337</id><snippet>import package.another_class</snippet></ROW><ROW><id>12540337</id><snippet>package.module</snippet></ROW><ROW><id>12540337</id><snippet>package.module</snippet></ROW><ROW><id>12540337</id><snippet>__all__</snippet></ROW><ROW><id>12540337</id><snippet>from package import module</snippet></ROW><ROW><id>12540448</id><snippet>eval</snippet></ROW><ROW><id>12540448</id><snippet>from z3 import *
x,y,z = Ints('x y z') 
s = 'x + y + 2*z == 5'
F = eval(s)
solve(F)
</snippet></ROW><ROW><id>12540448</id><snippet>[y = 0, z = 0, x = 5]</snippet></ROW><ROW><id>12540448</id><snippet>eval</snippet></ROW><ROW><id>12540477</id><snippet>time</snippet></ROW><ROW><id>12540477</id><snippet>In [18]: import time

In [19]: time.gmtime()
Out[19]: time.struct_time(tm_year=2012, tm_mon=9, tm_mday=22, tm_hour=3, tm_min=37, tm_sec=15, tm_wday=5, tm_yday=266, tm_isdst=0)

In [20]: x = time.gmtime()

In [21]: x.tm_year
Out[21]: 2012

In [22]: x.tm_mon
Out[22]: 9

In [23]: x.tm_mday
Out[23]: 22

In [24]: x.tm_hour
Out[24]: 3
</snippet></ROW><ROW><id>12540477</id><snippet>C:\&gt;easy_install pytz
Searching for pytz
Reading http://pypi.python.org/simple/pytz/
Reading http://pytz.sourceforge.net
Reading http://sourceforge.net/project/showfiles.php?group_id=79122
Reading http://www.stuartbishop.net/Software/pytz
Reading http://sourceforge.net/projects/pytz/
Best match: pytz 2012d
Downloading http://pypi.python.org/packages/2.7/p/pytz/pytz-2012d-py2.7.egg#md5=
e6f9219ae6eff242f13c6700413df69e
Processing pytz-2012d-py2.7.egg
Moving pytz-2012d-py2.7.egg to c:\python27\lib\site-packages
Adding pytz 2012d to easy-install.pth file

Installed c:\python27\lib\site-packages\pytz-2012d-py2.7.egg
Processing dependencies for pytz
Finished processing dependencies for pytz

C:\&gt;python
Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; utc = pytz.utc
&gt;&gt;&gt; utc.zone
'UTC'
</snippet></ROW><ROW><id>12540616</id><snippet> self.world.logic[pred] = params
</snippet></ROW><ROW><id>12540616</id><snippet> self.world.logic[pred] = set([params])
</snippet></ROW><ROW><id>12540616</id><snippet> self.world.set_true(pred, params)
</snippet></ROW><ROW><id>12540616</id><snippet>logic</snippet></ROW><ROW><id>12540618</id><snippet>re.sub(r'([aeoiu])', r'ab\1', 'program') -&gt; 'prabograbam'</snippet></ROW><ROW><id>12540618</id><snippet>re.sub(r'([aeoiu])', r'\1b\1', 'dog') -&gt; 'dobog'</snippet></ROW><ROW><id>12540618</id><snippet>re.sub(r'([aeoiu]+)', r'ab\1', 'tooth') -&gt; 'tabooth'</snippet></ROW><ROW><id>12540618</id><snippet>re.sub(r'(([aeoiu])[aeoiu]*)', r'\2b\1', 'boat') -&gt; 'boboat</snippet></ROW><ROW><id>12540663</id><snippet>defaultdict</snippet></ROW><ROW><id>12540663</id><snippet>from collections import defaultdict

# don't name a variable 'list'; you'll end up hiding the actual list type
my_List = defaultdict(int) # create a mapping, elements will default to 0
</snippet></ROW><ROW><id>12540663</id><snippet>my_list[i] += 1
</snippet></ROW><ROW><id>12540663</id><snippet>i</snippet></ROW><ROW><id>12540663</id><snippet>my_list[i]</snippet></ROW><ROW><id>12540791</id><snippet>kill</snippet></ROW><ROW><id>12540791</id><snippet>start-stop-daemon</snippet></ROW><ROW><id>12540836</id><snippet>max</snippet></ROW><ROW><id>12540836</id><snippet>&gt;&gt;&gt; x = {1:2, 3:6, 5:4}
&gt;&gt;&gt; max(x, key=lambda i: x[i])
3
</snippet></ROW><ROW><id>12540836</id><snippet>&gt;&gt;&gt; max(x, key=x.get)
3
</snippet></ROW><ROW><id>12541080</id><snippet>sorl.thumbnails</snippet></ROW><ROW><id>12541080</id><snippet>sorl.thumbnail</snippet></ROW><ROW><id>12541080</id><snippet>sorl.thumbnail</snippet></ROW><ROW><id>12541099</id><snippet>zip(*your_list)
</snippet></ROW><ROW><id>12541099</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3, 4], [2, 4, 5, 1], [3, 4, 6, 2], [2, 3, 4, 5]]
&gt;&gt;&gt; zip(*a)
[(1, 2, 3, 2), (2, 4, 4, 3), (3, 5, 6, 4), (4, 1, 2, 5)]
</snippet></ROW><ROW><id>12541130</id><snippet>MethodView</snippet></ROW><ROW><id>12541130</id><snippet>class SymptomDiagnosisAPI(MethodView):
    """
    /&lt;symptom_id&gt;/diagnoses/
        GET - list diags for symptoms
        POST - {id: diagid} - create relation with diagnosis

    /&lt;symptom_id&gt;/diagnoses/&lt;diagnosis_id&gt;
        GET - probability symptom given diag
        PUT - update probability of symptom given diag
        DELETE - remove diag - symptom relation
    """

    def get(self, symptom_id, diagnosis_id):
        if diagnosis_id is None:
            return self.list_diagnoses(symptom_id)
        else:
            return self.symptom_diagnosis_detail(symptom_id, diagnosis_id)

    def list_diagnoses(self, symptom_id):
        # ...

    def post(self, symptom_id):
        # ...

    def symptom_diagnosis_detail(self, symptom_id, diagnosis_id):
        # ...    

    def put(self, symptom_id, diagnosis_id):
        # ...    

    def delete(self, symptom_id, diagnosis_id):
        # ...    

    @classmethod
    def register(cls, mod):
        url = "/symptoms/&lt;int:symptom_id&gt;/diagnoses/"
        f = cls.as_view("symptom_diagnosis_api")
        mod.add_url_rule(url, view_func=f, methods=["GET"],
                         defaults={"diagnosis_id": None})
        mod.add_url_rule(url, view_func=f, methods=["POST"])
        mod.add_url_rule('%s&lt;int:diagnosis_id&gt;' % url, view_func=f,
                         methods=['GET', 'PUT', 'DELETE'])

SymptomDiagnosisAPI.register(mod)
</snippet></ROW><ROW><id>12541168</id><snippet>with open("pathtomyfile", "w") as f:
    for item in r.json or []:
        try:
            f.write(item['repository']['name'] + "\n")
        except KeyError:  # you might have to adjust what you are writing accordingly
            pass  # or sth ..
</snippet></ROW><ROW><id>12541168</id><snippet>#!/usr/bin/python
import json
import requests

r = requests.get('https://github.com/timeline.json')

with open("yourfilepath.json", "w") as f:
    f.write(json.dumps(r.json))
</snippet></ROW><ROW><id>12541168</id><snippet>with open("yourfilepath.json", "r") as f:
    obj = json.loads(f.read())
</snippet></ROW><ROW><id>12541180</id><snippet>from xlrd import open_workbook

wb = open_workbook('tmp.xls', formatting_info=True)
sheet = wb.sheet_by_name("1")
cell = sheet.cell(6, 0)
print "cell.xf_index is", cell.xf_index
fmt = wb.xf_list[cell.xf_index]
print "type(fmt) is", type(fmt)
print
print "fmt.dump():"
fmt.dump()
</snippet></ROW><ROW><id>12541180</id><snippet>fmt</snippet></ROW><ROW><id>12541180</id><snippet>dump()</snippet></ROW><ROW><id>12541180</id><snippet>cell.xf_index is 497
type(fmt) is &lt;class 'xlrd.formatting.XF'&gt;

fmt.dump():
_alignment_flag: 1
_background_flag: 1
_border_flag: 1
_font_flag: 1
_format_flag: 0
_protection_flag: 0
alignment (XFAlignment object):
    hor_align: 1
    indent_level: 0
    rotation: 0
    shrink_to_fit: 0
    text_direction: 0
    text_wrapped: 0
    vert_align: 2
background (XFBackground object):
    background_colour_index: 64
    fill_pattern: 1
    pattern_colour_index: 17
border (XFBorder object):
    bottom_colour_index: 0
    bottom_line_style: 0
    diag_colour_index: 0
    diag_down: 0
    diag_line_style: 0
    diag_up: 0
    left_colour_index: 0
    left_line_style: 0
    right_colour_index: 0
    right_line_style: 0
    top_colour_index: 56
    top_line_style: 1
font_index: 72
format_key: 0
is_style: 0
lotus_123_prefix: 0
parent_style_index: 0
protection (XFProtection object):
    cell_locked: 1
    formula_hidden: 0
xf_index: 497
</snippet></ROW><ROW><id>12541180</id><snippet>wb</snippet></ROW><ROW><id>12541180</id><snippet>fmt.font_index</snippet></ROW><ROW><id>12541180</id><snippet>wb.font_list[72]</snippet></ROW><ROW><id>12541180</id><snippet>Font</snippet></ROW><ROW><id>12541245</id><snippet>username="root"</snippet></ROW><ROW><id>12541245</id><snippet>ssh.connect("173.15.13.28", username="root", password=passwd)
</snippet></ROW><ROW><id>12541464</id><snippet>def json_dump(self):
    return dict(name=self.name, phone=[p.number for p in self.phonenumbers])
</snippet></ROW><ROW><id>12541464</id><snippet>name</snippet></ROW><ROW><id>12541464</id><snippet>phone</snippet></ROW><ROW><id>12541464</id><snippet>phone</snippet></ROW><ROW><id>12541464</id><snippet>json.dumps</snippet></ROW><ROW><id>12541464</id><snippet>if "partial" in request.params:
    customer_json_data = [c.json_dump() for c in customers]
    # Render the partial list page
    return render_to_response("templates/my_json.jinja2",
                              {"customers": json.dumps(customer_json_data)},
                              request=request)
</snippet></ROW><ROW><id>12541464</id><snippet>json</snippet></ROW><ROW><id>12541464</id><snippet>__json__</snippet></ROW><ROW><id>12541557</id><snippet>UNICODE</snippet></ROW><ROW><id>12541557</id><snippet>re</snippet></ROW><ROW><id>12541557</id><snippet>\w</snippet></ROW><ROW><id>12541557</id><snippet>re.findall(r'\w+', ip, re.UNICODE)

# EDIT

Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"\w+", u"Fältskog", re.UNICODE)
[u'F\xe4ltskog']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12541712</id><snippet>from tornado.httpclient import HTTPRequest
request = HTTPRequest(opt.site_url + '/api/user/', method="PUT", body=urlencode(pdata))
response = yield gen.Task(http_client.fetch, request)
</snippet></ROW><ROW><id>12541784</id><snippet>for corpus in root</snippet></ROW><ROW><id>12541784</id><snippet>corpus</snippet></ROW><ROW><id>12541784</id><snippet>for lexelt in root:
  for instance in lexelt:
    for context in instance:
      contexts.append(context.text)
</snippet></ROW><ROW><id>12541784</id><snippet>for context in instance</snippet></ROW><ROW><id>12541784</id><snippet>head</snippet></ROW><ROW><id>12541784</id><snippet>context.find('head').text</snippet></ROW><ROW><id>12541784</id><snippet>head</snippet></ROW><ROW><id>12541784</id><snippet>context.find('head').tail</snippet></ROW><ROW><id>12541784</id><snippet>tail</snippet></ROW><ROW><id>12543156</id><snippet>for function, params in zip(functions, parameters):
    function(*params)
</snippet></ROW><ROW><id>12543156</id><snippet>zip()</snippet></ROW><ROW><id>12543156</id><snippet>itertools.starmap()</snippet></ROW><ROW><id>12543156</id><snippet>inspect</snippet></ROW><ROW><id>12543156</id><snippet>import inspect
import sys

def some_function():
       ...

print(dict(inspect.getmembers(sys.modules[__name__], inspect.isfunction)))
</snippet></ROW><ROW><id>12543156</id><snippet>{'some_function': &lt;function some_function at 0x7faec13005a0&gt;}
</snippet></ROW><ROW><id>12543195</id><snippet>request.session.session_key
</snippet></ROW><ROW><id>12543195</id><snippet>request.session.save()</snippet></ROW><ROW><id>12543345</id><snippet>iso8601</snippet></ROW><ROW><id>12543345</id><snippet>:</snippet></ROW><ROW><id>12543345</id><snippet>import iso8601
stamp, tz = s.split()
timezone = iso8601.iso8601.parse_timezone(tz[:3] + ':' + tz[3:])
dt = datetime.fromtimestamp(int(stamp)).astimezone(timezone)
</snippet></ROW><ROW><id>12543479</id><snippet>easy_install</snippet></ROW><ROW><id>12543479</id><snippet>sudo easy_install bz2
</snippet></ROW><ROW><id>12543479</id><snippet>npm</snippet></ROW><ROW><id>12543841</id><snippet>insort</snippet></ROW><ROW><id>12543841</id><snippet>add</snippet></ROW><ROW><id>12543841</id><snippet>def add(lst, ele):
    insort_right(lst, ele)
    return lst
</snippet></ROW><ROW><id>12543887</id><snippet>some_dict.items()</snippet></ROW><ROW><id>12543887</id><snippet>some_dict.items()</snippet></ROW><ROW><id>12543887</id><snippet>items()</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; some_dict = dict(zip(xrange(1000), reversed(xrange(1000))))
&gt;&gt;&gt; some_list = zip(xrange(1000), xrange(1000))
&gt;&gt;&gt; %timeit for t in some_list: t
10000 loops, best of 3: 25.6 us per loop
&gt;&gt;&gt; %timeit for t in some_dict.items(): t
10000 loops, best of 3: 57.3 us per loop
</snippet></ROW><ROW><id>12543887</id><snippet>items</snippet></ROW><ROW><id>12543887</id><snippet>iteritems</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; %timeit for t in some_dict.iteritems(): t
10000 loops, best of 3: 41.3 us per loop
</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; some_dict_list = some_dict.items()
&gt;&gt;&gt; %timeit for t in some_dict_list: t
10000 loops, best of 3: 26.1 us per loop
</snippet></ROW><ROW><id>12543887</id><snippet>items</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; some_dict = dict(zip(range(1000), reversed(range(1000))))
&gt;&gt;&gt; %timeit for t in some_dict.items(): t      
10000 loops, best of 3: 33.4 us per loop 
</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; some_list = list(zip(range(1000), reversed(range(1000))))
&gt;&gt;&gt; some_dict_view = some_dict.items()
&gt;&gt;&gt; %timeit for t in some_list: t
10000 loops, best of 3: 18.6 us per loop
&gt;&gt;&gt; %timeit for t in some_dict_view: t
10000 loops, best of 3: 33.3 us per loop
</snippet></ROW><ROW><id>12543887</id><snippet>&gt;&gt;&gt; some_list = list(some_dict_view)
&gt;&gt;&gt; %timeit for t in some_list: t
100000 loops, best of 3: 18.6 us per loop
</snippet></ROW><ROW><id>12543889</id><snippet>user_callback = None

def register_callback(callback):
    global user_callback
    user_callback = callback

def main():
    while 1:
        text=irc.recv(4096)
        user_callback(text)
</snippet></ROW><ROW><id>12543938</id><snippet>import contextlib
import selenium.webdriver as webdriver
display = pyvirtualdisplay.Display(visible = False, size = (800, 600))
display.start()
with contextlib.closing(webdriver.Firefox()) as driver:    
    driver.get('http://www.google.com')
    print driver.title
    # Google
display.stop()
</snippet></ROW><ROW><id>12543938</id><snippet>sudo apt-get install python-setuptools
sudo apt-get install xvfb
sudo apt-get install xserver-xephyr
sudo easy_install pyvirtualdisplay
</snippet></ROW><ROW><id>12543957</id><snippet>pip</snippet></ROW><ROW><id>12543957</id><snippet>git</snippet></ROW><ROW><id>12543957</id><snippet>$ pip install git+https://github.com/themartorana/python-postmark.git</snippet></ROW><ROW><id>12543957</id><snippet>git</snippet></ROW><ROW><id>12543957</id><snippet>this link</snippet></ROW><ROW><id>12543957</id><snippet>python setup.py install</snippet></ROW><ROW><id>12544587</id><snippet>line = '172.16.0.3 - - [25/Sep/2002:14:04:19 +0200] "GET / HTTP/1.1" 401 - "" "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020827"'
regex = '([(\d\.)]+) - - \[(.*?)\] "(.*?)" (\d+) - "(.*?)" "(.*?)"'

import re
print re.match(regex, line).groups()
</snippet></ROW><ROW><id>12544587</id><snippet>('172.16.0.3', '25/Sep/2002:14:04:19 +0200', 'GET / HTTP/1.1', '401', '', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020827')
</snippet></ROW><ROW><id>12544676</id><snippet>s</snippet></ROW><ROW><id>12544676</id><snippet>t</snippet></ROW><ROW><id>12544676</id><snippet>a</snippet></ROW><ROW><id>12544676</id><snippet>b</snippet></ROW><ROW><id>12544676</id><snippet>a = 21</snippet></ROW><ROW><id>12544676</id><snippet>b = 15</snippet></ROW><ROW><id>12544676</id><snippet>a</snippet></ROW><ROW><id>12544676</id><snippet>b</snippet></ROW><ROW><id>12544676</id><snippet>b % a</snippet></ROW><ROW><id>12544676</id><snippet>c</snippet></ROW><ROW><id>12544676</id><snippet>a = c * b + a % b</snippet></ROW><ROW><id>12544676</id><snippet>21 = 1 * 15 + 6
15 = 2 * 6  + 3
6  = 2 * 3  + 0 -&gt; end recursion
</snippet></ROW><ROW><id>12544676</id><snippet>g</snippet></ROW><ROW><id>12544676</id><snippet>s</snippet></ROW><ROW><id>12544676</id><snippet>t</snippet></ROW><ROW><id>12544676</id><snippet>g</snippet></ROW><ROW><id>12544676</id><snippet>(a, b, s, t = 3, 0, 1, -1)</snippet></ROW><ROW><id>12544676</id><snippet>3  = 1 * 3 + -1 * 0
</snippet></ROW><ROW><id>12544676</id><snippet>3 = 1 * 3 + -1 * (6 - 2 * 3)
</snippet></ROW><ROW><id>12544676</id><snippet>3 = 1 * 3 + -1 * 6 + 2 * 3
3 = 3 * 3 + -1 * 6
</snippet></ROW><ROW><id>12544676</id><snippet>3 = -1 * 6 + 3 * 3
</snippet></ROW><ROW><id>12544676</id><snippet>s == -1</snippet></ROW><ROW><id>12544676</id><snippet>t == 3</snippet></ROW><ROW><id>12544676</id><snippet>a = 6</snippet></ROW><ROW><id>12544676</id><snippet>b = 3</snippet></ROW><ROW><id>12544676</id><snippet>a</snippet></ROW><ROW><id>12544676</id><snippet>b</snippet></ROW><ROW><id>12544676</id><snippet>gcd2</snippet></ROW><ROW><id>12544676</id><snippet>(3, -1, 3)</snippet></ROW><ROW><id>12544676</id><snippet>3 = -1 * 6 + 3 * (15 - 2 * 6)
3 = -1 * 6 + 3 * 15 - 6 * 6
3 = -7 * 6 + 3 * 15
3 = 3 * 15 + -7 * 6
</snippet></ROW><ROW><id>12544676</id><snippet>(3, 3, -7)</snippet></ROW><ROW><id>12544676</id><snippet>3 = 3 * 15 + -7 * (21 - 1 * 15)
3 = 3 * 15 + 7 * 15 - 7 * 21
3 = 10 * 15 - 7 * 21
3 = -7 * 21 + 10 * 15
</snippet></ROW><ROW><id>12544676</id><snippet>s</snippet></ROW><ROW><id>12544676</id><snippet>t</snippet></ROW><ROW><id>12544676</id><snippet>def gcd2(a, b):
    if (0 == a % b):
        # calculate s and t
        return b, s, t
    else:
        g, s, t = gcd2(b, a % b)
        # calculate new_s and new_t
        return g, new_s, new_t
</snippet></ROW><ROW><id>12544676</id><snippet>def gcd2(a, b):
    if (0 == b):
        return a, 1, -1
    else:
        g, s, t = gcd2(b, a % b)
        # calculate new_s and new_t
        return g, new_s, new_t
</snippet></ROW><ROW><id>12544896</id><snippet>tr</snippet></ROW><ROW><id>12544896</id><snippet>tr = doc.xpath("/html/body/div[1]/div[1]/table[1]/tbody/tr")
for row in tr[3:]:
    table += row.findall('td')
</snippet></ROW><ROW><id>12544896</id><snippet>.findall()</snippet></ROW><ROW><id>12544896</id><snippet>td</snippet></ROW><ROW><id>12544896</id><snippet>.xpath()</snippet></ROW><ROW><id>12544958</id><snippet>itertools.combinations(range(nmin, nmax), N + 1)</snippet></ROW><ROW><id>12545203</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x * 10 + y, (0, 1, 2, 3))
123

&gt;&gt;&gt; '%04d' % (reduce(lambda x, y: x * 10 + y, (0, 1, 2, 3)),)
'0123'
</snippet></ROW><ROW><id>12545234</id><snippet>class B(object):
    pass

class A(object):
    b = B()

B.a = A()
</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>object</snippet></ROW><ROW><id>12545292</id><snippet>REQUEST</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>REQUEST</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttribute</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttribute</snippet></ROW><ROW><id>12545292</id><snippet>Acquisition</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttibute</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>from ComputedAttribute import ComputedAttribute

class SomeClass():   
    @ComputedAttribute
    def someProperty(self):
        return 'somevalue'
</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttribute</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttribute</snippet></ROW><ROW><id>12545292</id><snippet>class SomeClass():   
    def someValue(self):
        return self.REQUEST
    someValue = ComputedAttribute(someValue, 1)
</snippet></ROW><ROW><id>12545292</id><snippet>from ComputedAttribute import ComputedAttribute

def computed_attribute_decorator(level=0):
    def computed_attribute_wrapper(func):
        return ComputedAttribute(func, level)
    return computed_attribute_wrapper
</snippet></ROW><ROW><id>12545292</id><snippet>class SomeClass(): 
    @computed_attribute_decorator(level=1)
    def someValue(self):
        return self.REQUEST
</snippet></ROW><ROW><id>12545292</id><snippet>property</snippet></ROW><ROW><id>12545292</id><snippet>ComputedAttribute</snippet></ROW><ROW><id>12545846</id><snippet>&gt;&gt;&gt; datefromuser='2012-09-22 07:36:36.333373-05:00'
&gt;&gt;&gt; datefromuser[:19]
'2012-09-22 07:36:36'
</snippet></ROW><ROW><id>12545846</id><snippet>iso8601</snippet></ROW><ROW><id>12545846</id><snippet>&gt;&gt;&gt; import iso8601
&gt;&gt;&gt; iso8601.parse_date(datefromuser)
datetime.datetime(2012, 9, 22, 7, 36, 36, 333373, tzinfo=&lt;FixedOffset '-05:00'&gt;)
</snippet></ROW><ROW><id>12545846</id><snippet>iso8601</snippet></ROW><ROW><id>12545864</id><snippet>utf-32</snippet></ROW><ROW><id>12545864</id><snippet>&gt;&gt;&gt; u'\u201d'.encode('ASCII')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u201d' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>12545864</id><snippet>u''</snippet></ROW><ROW><id>12546029</id><snippet>django.utils.markup</snippet></ROW><ROW><id>12546034</id><snippet>class IntermediateObj(object):

    def __init__(self, raw):
        self.raw = raw
        self.sections = []
        self.fields = []
        self.elements = []

    def recurse(self, items):
        # this works ok, but passing the same arguments to the recurse function
        # which were passed to the constructor as well ,and then stored as a class
        # attribute, why, seems like self.raw is not even needed?
        for k,v in items.iteritems():
            if isinstance(v, list):
                getattr(self, k).append(v)
                [self.recurse(i) for i in v]
            else:
                setattr(self, k, v)


class MyClass(IntermediateObj):

    def __init__(self, attribute=None):  
        self.attribute = attribute
        super(MyClass, self).__init__(attribute)


ii = IntermediateObj({'large': 'nested_dictionary',
                      'sections': [{}, {}, {}]
                    })
ii.recurse(ii.raw)
print ii.raw
print ii.sections

# passing an instance of IntermediateObj is not the same as passing a dict (logically)
# yet the constructor of MyClass just forwards that instance object to the
# baseclasses constructor, while you initially passed a dict to the IntermediateObj
# constructor. 
tada = MyClass(ii)
# MyClass inherits the recurse method, but it won't magically be executed unless
# you call it, so just instantiating MyClass won't copy those values recursively
tada.recurse(ii.raw)
# now tada, it copied everything, and notice, I called recurse with ii.raw, which is the
# source dictionary, but I'm not even sure if you wanted it that way, it's not clear
# define your question more precisely
print tada.sections
</snippet></ROW><ROW><id>12546034</id><snippet>class IntermediateObj(object):

    def __init__(self, raw):
        self.raw = raw
        self.sections = []
        self.fields = []
        self.elements = []
        self.recurse(raw)

    def recurse(self, items):
        for k,v in items.iteritems():
            if isinstance(v, list):
                getattr(self, k).append(v)
                [self.recurse(i) for i in v]
            else:
                setattr(self, k, v)


class MyClass(IntermediateObj):

    def __init__(self, intermediate_instance):  
        super(MyClass, self).__init__(intermediate_instance.raw)


ii = IntermediateObj({'large': 'nested_dictionary',
                      'sections': [{}, {}, {}]
                    })
print ii.raw
print ii.sections
tada = MyClass(ii)
print tada.sections
print tada.raw
</snippet></ROW><ROW><id>12546179</id><snippet>endingIndex</snippet></ROW><ROW><id>12546179</id><snippet>beginningIndex</snippet></ROW><ROW><id>12546658</id><snippet>itertools.product</snippet></ROW><ROW><id>12546658</id><snippet>import itertools
combinations = (''.join((first, second)) for first, second in itertools.product(a, b))
any('HelloWorld' == combination for combination in combinations)
</snippet></ROW><ROW><id>12546658</id><snippet>&gt;&gt;&gt; timeit.timeit('search("HelloWorld"); search("HiThere")', 'from __main__ import reMatch as search')
1.8922290802001953
&gt;&gt;&gt; timeit.timeit('search("HelloWorld"); search("HiThere")', 'from __main__ import genMatch as search')
18.3697190284729
</snippet></ROW><ROW><id>12546658</id><snippet>re.compile()</snippet></ROW><ROW><id>12546789</id><snippet>.decode()</snippet></ROW><ROW><id>12546789</id><snippet>.decode()</snippet></ROW><ROW><id>12546789</id><snippet>.encode()</snippet></ROW><ROW><id>12546888</id><snippet>db.py</snippet></ROW><ROW><id>12546888</id><snippet># File database
db.define_table("file",
    Field("job", "reference job"),
    Field("name", "string", length=30, required=True),   # stores the filename (without path)
    Field("isimage", "boolean", default=False))
</snippet></ROW><ROW><id>12546888</id><snippet>from mymodule import OUTPUT  # this is the base directory of the files

def export():
    # allow to download files
    jid = request.args(0)
    fid = request.args(1)

    if None in (jid, fid):
        res = 'Invalid URL'
    else:
        # get the file row
        row = db.file(fid)

        # some checks (not necessary if you know what you're doing)
        jrow = db.job(jid)
        if row is None:
            res = "unknown file ID"
        elif jrow.id  is None:
            res = "unknown job ID"
        else:
            filename = row.name
            # jrow.perma_id, is a field in the 'job' DB, that I use to create a unique
            # directory name, so the files of job ID 'jid' are under: OUTPUT/perma_id/
            fullname = os.path.join(OUTPUT, jrow.perma_id, filename)

            ext = os.path.splitext(filename)[1]
            response.headers['Content-Type'] = contenttype(ext)
            response.headers['Content-disposition'] = 'attachment; filename=%s' % filename
            res = response.stream(open(fullname, "rb"), chunk_size=4096)

    return res
</snippet></ROW><ROW><id>12546888</id><snippet>URL(c='mycontroller', f='export', args=(path, filename))</snippet></ROW><ROW><id>12546888</id><snippet>path</snippet></ROW><ROW><id>12546888</id><snippet>rows = current.db((current.db.file.job==jid) &amp; (current.db.file.isimage==True)).select()
for row in rows:
    div.append(IMG(_src=URL(c="mycontroller", f="export", args=(jid, fid), _width="500", _height="500"))
</snippet></ROW><ROW><id>12546888</id><snippet>I</snippet></ROW><ROW><id>12546888</id><snippet>IMG</snippet></ROW><ROW><id>12547182</id><snippet>i</snippet></ROW><ROW><id>12547182</id><snippet>j</snippet></ROW><ROW><id>12547182</id><snippet>i</snippet></ROW><ROW><id>12547182</id><snippet>j</snippet></ROW><ROW><id>12547182</id><snippet>i</snippet></ROW><ROW><id>12547182</id><snippet>j</snippet></ROW><ROW><id>12547182</id><snippet>while</snippet></ROW><ROW><id>12547182</id><snippet>i</snippet></ROW><ROW><id>12547182</id><snippet>j</snippet></ROW><ROW><id>12547182</id><snippet>while</snippet></ROW><ROW><id>12547182</id><snippet>pivot</snippet></ROW><ROW><id>12547182</id><snippet>pivot</snippet></ROW><ROW><id>12547182</id><snippet>0</snippet></ROW><ROW><id>12547182</id><snippet>array[0]</snippet></ROW><ROW><id>12547244</id><snippet>p</snippet></ROW><ROW><id>12547244</id><snippet>0.3*n</snippet></ROW><ROW><id>12547244</id><snippet>0.7*n</snippet></ROW><ROW><id>12547244</id><snippet>p == n-k</snippet></ROW><ROW><id>12547244</id><snippet>k</snippet></ROW><ROW><id>12547244</id><snippet>p &gt; n-k</snippet></ROW><ROW><id>12547244</id><snippet>k</snippet></ROW><ROW><id>12547244</id><snippet>k - (n-p)</snippet></ROW><ROW><id>12547244</id><snippet>0.7*n</snippet></ROW><ROW><id>12547244</id><snippet>k</snippet></ROW><ROW><id>12547244</id><snippet>T(n) &lt;= T(0.7*n) + C*n
</snippet></ROW><ROW><id>12547244</id><snippet>p &lt; n-k</snippet></ROW><ROW><id>12547244</id><snippet>k</snippet></ROW><ROW><id>12547244</id><snippet>0.7*n</snippet></ROW><ROW><id>12547244</id><snippet>T(n) &lt;= T(0.7*n) + C*n
</snippet></ROW><ROW><id>12547244</id><snippet>T(n) &lt;= T((0.7)^k * n) + C*(1 + 0.7 + ... + (0.7)^(k-1))*n
     &lt;= T(1) + C/(1 - 0.7)*n
</snippet></ROW><ROW><id>12547285</id><snippet>@app.route("/")
def hello():
    return "Hello World!"
</snippet></ROW><ROW><id>12547285</id><snippet>@app.route("/")
def hello():
    return render_template('index.html', username="John Doe")
</snippet></ROW><ROW><id>12547285</id><snippet>index.html</snippet></ROW><ROW><id>12547495</id><snippet>removeItemWidget()</snippet></ROW><ROW><id>12547495</id><snippet>takeItem()</snippet></ROW><ROW><id>12547495</id><snippet>addItem()</snippet></ROW><ROW><id>12547495</id><snippet>row()</snippet></ROW><ROW><id>12547495</id><snippet>def switch(self):
    items = self.left.selectedItems()
    for item in items:
        n = self.left.row(item)    # get the index/row of the item
        i = self.left.takeItem(n)  # pop
        self.right.addItem(i)      # add to right QListWidget
</snippet></ROW><ROW><id>12547723</id><snippet>unauthenticated_userid</snippet></ROW><ROW><id>12547723</id><snippet>unauthenticated_userid</snippet></ROW><ROW><id>12547723</id><snippet>unauthenticated_userid</snippet></ROW><ROW><id>12547723</id><snippet>userid</snippet></ROW><ROW><id>12547742</id><snippet>A = [[] for _ in range(10)]
</snippet></ROW><ROW><id>12547742</id><snippet>xrange</snippet></ROW><ROW><id>12547742</id><snippet>range</snippet></ROW><ROW><id>12547766</id><snippet>os.system</snippet></ROW><ROW><id>12547766</id><snippet>subprocess</snippet></ROW><ROW><id>12547766</id><snippet>output = subprocess.check_output('command', shell=True)
</snippet></ROW><ROW><id>12547766</id><snippet>re</snippet></ROW><ROW><id>12547766</id><snippet>re.match(your_pattern, yourstring)</snippet></ROW><ROW><id>12547766</id><snippet>len</snippet></ROW><ROW><id>12547766</id><snippet>for nic in listNIC:
    if re.match(pattern, nic):
        wlanNIC = nic
        break
</snippet></ROW><ROW><id>12547811</id><snippet>django-admin.py startproject myproject</snippet></ROW><ROW><id>12547811</id><snippet>system PYTHONPATH</snippet></ROW><ROW><id>12547811</id><snippet>clipse - Preferences - PyDev - Interpreter Python</snippet></ROW><ROW><id>12547811</id><snippet>New Folder</snippet></ROW><ROW><id>12547816</id><snippet>import logging

def pytest_runtest_call(__multicall__):
    try:
        __multicall__.execute()
    except KeyboardInterrupt:
        raise
    except:
        logging.exception('pytest_runtest_call caught exception:')
        raise
</snippet></ROW><ROW><id>12547816</id><snippet>__multicall__</snippet></ROW><ROW><id>12547907</id><snippet>def websiteToSensor():
    cur.execute("SELECT * FROM homeauto WHERE changedby = 'website'")
    rows = cur.fetchall()
    for row in rows:
        cur.execute("UPDATE homeauto SET changedby = 'script' WHERE id = '%s'",(row["id"]))
    con.commit()
    return
</snippet></ROW><ROW><id>12548017</id><snippet>brew update
brew tap homebrew/versions
brew install postgresql9
</snippet></ROW><ROW><id>12548017</id><snippet>postgis15</snippet></ROW><ROW><id>12548017</id><snippet>postgresql9</snippet></ROW><ROW><id>12548017</id><snippet>postgresql</snippet></ROW><ROW><id>12548017</id><snippet>postgis15</snippet></ROW><ROW><id>12548017</id><snippet>brew edit postgis15
</snippet></ROW><ROW><id>12548017</id><snippet>postgresql</snippet></ROW><ROW><id>12548017</id><snippet>postgresql9</snippet></ROW><ROW><id>12548017</id><snippet>depends_on 'postgresql9'
</snippet></ROW><ROW><id>12548017</id><snippet>postgresql = Formula.factory 'postgresql9'
</snippet></ROW><ROW><id>12548017</id><snippet>brew install postgis15
</snippet></ROW><ROW><id>12548017</id><snippet>psql</snippet></ROW><ROW><id>12548017</id><snippet>psycopg2</snippet></ROW><ROW><id>12548017</id><snippet>psycopg2</snippet></ROW><ROW><id>12548017</id><snippet>postgresql</snippet></ROW><ROW><id>12548017</id><snippet>/usr/local/var/postgres</snippet></ROW><ROW><id>12548017</id><snippet>brew uninstall postgresql
mv /usr/local/var/postgres /usr/local/var/postgres9.1
initdb /usr/local/var/postgres -E utf8
brew install postgresql9
</snippet></ROW><ROW><id>12548017</id><snippet>psycopg2</snippet></ROW><ROW><id>12548017</id><snippet>pip uninstall psycopg2
pip install psycopg2
</snippet></ROW><ROW><id>12548099</id><snippet>copy</snippet></ROW><ROW><id>12548099</id><snippet>import copy

while (still has input)
    A.push(input)
    B.push(input)

while A is not empty
    A.pop()

A = copy.deepcopy(B)
</snippet></ROW><ROW><id>12548282</id><snippet>from pyramid.view import view_config

@view_config(renderer='json')
def pager(request):
    query = DBSession.query(MyTable)
    page_url = paginate.PageURL_WebOb(request)
    customers = paginate.Page(query, 
                     page=int(request.params.get("page", 1)), 
                     items_per_page=25, 
                     url=page_url)

    return {"customers": customers}
</snippet></ROW><ROW><id>12548282</id><snippet>customers</snippet></ROW><ROW><id>12548282</id><snippet>    return {"customers": [c.json_dump() for c in customers]}
</snippet></ROW><ROW><id>12548319</id><snippet>wpName</snippet></ROW><ROW><id>12548319</id><snippet>wpPassword</snippet></ROW><ROW><id>12548319</id><snippet>wpLoginAttempt</snippet></ROW><ROW><id>12548319</id><snippet>wpLoginToken</snippet></ROW><ROW><id>12548319</id><snippet>Requests</snippet></ROW><ROW><id>12548319</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>12548319</id><snippet>import requests
from bs4 import BeautifulSoup as bs


def get_login_token(raw_resp):
    soup = bs(raw_resp.text, 'lxml')
    token = [n['value'] for n in soup.find_all('input')
             if n['name'] == 'wpLoginToken']
    return token[0]

payload = {
    'wpName': 'my_username',
    'wpPassword': 'my_password',
    'wpLoginAttempt': 'Log in',
    #'wpLoginToken': '',
    }

with requests.session() as s:
    resp = s.get('http://en.wikipedia.org/w/index.php?title=Special:UserLogin')
    payload['wpLoginToken'] = get_login_token(resp)

    response_post = s.post('http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;action=submitlogin&amp;type=login',
                           data=payload)
    response = s.get('http://en.wikipedia.org/wiki/Special:Watchlist')
</snippet></ROW><ROW><id>12548444</id><snippet>__del__</snippet></ROW><ROW><id>12548444</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __del__(self):
...         print "Bye bye!"
... 
&gt;&gt;&gt; spam = Foo()
&gt;&gt;&gt; bar = spam
&gt;&gt;&gt; del spam
&gt;&gt;&gt; del bar
Bye bye!
</snippet></ROW><ROW><id>12548444</id><snippet>del</snippet></ROW><ROW><id>12548444</id><snippet>__del__</snippet></ROW><ROW><id>12548444</id><snippet>__del__</snippet></ROW><ROW><id>12548492</id><snippet>len(queue)</snippet></ROW><ROW><id>12548492</id><snippet>len(object)</snippet></ROW><ROW><id>12548492</id><snippet>object.__len__</snippet></ROW><ROW><id>12548492</id><snippet>deque</snippet></ROW><ROW><id>12548492</id><snippet>__len__</snippet></ROW><ROW><id>12548492</id><snippet>dir(deque)</snippet></ROW><ROW><id>12548492</id><snippet>queue= deque([])   #is this length 0 queue?
</snippet></ROW><ROW><id>12548492</id><snippet>deque</snippet></ROW><ROW><id>12548563</id><snippet>blob_info = upload_files[0]
self.redirect('/serve/%s' % blob_info.key())
</snippet></ROW><ROW><id>12548563</id><snippet>blob_info.key()
</snippet></ROW><ROW><id>12548596</id><snippet>__new__</snippet></ROW><ROW><id>12548596</id><snippet>__init__</snippet></ROW><ROW><id>12548596</id><snippet>str</snippet></ROW><ROW><id>12548596</id><snippet>&gt;&gt;&gt; class Strvalue(str):
...     def __new__(cls, content, flag=None):
...         inst = str.__new__(cls, content)
...         inst.flag = flag
...         return inst
... 
&gt;&gt;&gt; Strvalue('foo', True)
'foo'
&gt;&gt;&gt; foo = Strvalue('foo', True)
&gt;&gt;&gt; foo
'foo'
&gt;&gt;&gt; foo.flag
True
</snippet></ROW><ROW><id>12548596</id><snippet>str.__new__</snippet></ROW><ROW><id>12548596</id><snippet>str.__new__</snippet></ROW><ROW><id>12548596</id><snippet>str</snippet></ROW><ROW><id>12548596</id><snippet>__new__</snippet></ROW><ROW><id>12548596</id><snippet>__init__</snippet></ROW><ROW><id>12548596</id><snippet>self</snippet></ROW><ROW><id>12548596</id><snippet>__init__</snippet></ROW><ROW><id>12548596</id><snippet>str</snippet></ROW><ROW><id>12548596</id><snippet>__init__</snippet></ROW><ROW><id>12548596</id><snippet>__new__</snippet></ROW><ROW><id>12548991</id><snippet>subprocess</snippet></ROW><ROW><id>12548991</id><snippet>button = QPushButton('start')
textedit = QTextEdit()
process = QProcess()

button.clicked.connect(on_clicked)

def on_clicked():
    process.readyReadStandardOutput.connect(read_ready)
    process.start('/bin/sh',
       ('-c', "while /bin/true; do echo hello world ; sleep 1; done"))

def read_ready(self):
    chunk = process.readAllStandardOutput()
    textedit.append(str(chunk))
</snippet></ROW><ROW><id>12548991</id><snippet>parameters=$(
zenity --list --text "Test parameters:" \
       --checklist --column "Check" --column "Parameter" \
       TRUE "One" TRUE "Two" TRUE "Three" FALSE "Four" \
       --separator=":");

# parameters -&gt; One:Two:Three
./instrument-test.py $parameters | zenity --text-info
</snippet></ROW><ROW><id>12549017</id><snippet>nginx</snippet></ROW><ROW><id>12549017</id><snippet>apache</snippet></ROW><ROW><id>12549017</id><snippet>nginx</snippet></ROW><ROW><id>12549017</id><snippet>nginx</snippet></ROW><ROW><id>12549057</id><snippet>numpy.nan</snippet></ROW><ROW><id>12549057</id><snippet>In [45]: names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']

In [46]: df = pd.read_csv(StringIO(data), header=None, names=names)

In [47]: mask = df.applymap(lambda x: x in ['X', 'XX', None, np.nan])

In [48]: df[-mask.any(axis=1)]
Out[48]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 5 entries, 0 to 9
Data columns:
a    5  non-null values
b    5  non-null values
c    5  non-null values
d    5  non-null values
e    5  non-null values
f    5  non-null values
g    5  non-null values
h    5  non-null values
i    5  non-null values
j    4  non-null values
k    5  non-null values
l    5  non-null values
dtypes: float64(6), int64(1), object(5)
</snippet></ROW><ROW><id>12549298</id><snippet>In [111]: df
Out[111]: 
                mat  strike  vol
date     tenor                  
20120903 3m      1y    0.25   52
         3m      1y    0.50   51
         3m      1y    1.00   49
         3m      5y    0.25   32
         3m      5y    0.50   55
         3m      5y    1.00   23
         3m     10y    0.25   65
         3m     10y    0.50   55
         3m     10y    1.00   19
20120904 3m      1y    0.25   32
         3m      1y    0.50   57
         3m      1y    1.00   44
         3m      5y    0.25   54
         3m      5y    0.50   50
         3m      5y    1.00   69
         3m     10y    0.25   42
         3m     10y    0.50   81
         3m     10y    1.00   99

In [112]: def agg_func(x):
    mats = list(x.mat.unique())
    strikes = list(x.strike.unique())
    vols = x.pivot('mat', 'strike', 'vol').reindex(mats, columns=strikes)
    return [mats, strikes, vols.values.tolist()]
   .....: 

In [113]: rs = df.groupby(level=['date', 'tenor']).apply(agg_func)

In [114]: rs
Out[114]: 
date      tenor
20120903  3m       [['1y', '5y', '10y'], [0.25, 0.5, 1.0], [[52.0...
20120904  3m       [['1y', '5y', '10y'], [0.25, 0.5, 1.0], [[32.0...

In [115]: rs.values[0]
Out[115]: 
[['1y', '5y', '10y'],
 [0.25, 0.5, 1.0],
 [[52.0, 51.0, 49.0], [32.0, 55.0, 23.0], [65.0, 55.0, 19.0]]]
</snippet></ROW><ROW><id>12549416</id><snippet>QMenu</snippet></ROW><ROW><id>12549416</id><snippet>hideEvent</snippet></ROW><ROW><id>12549416</id><snippet>hideEvent</snippet></ROW><ROW><id>12549416</id><snippet>hide()</snippet></ROW><ROW><id>12549416</id><snippet>hide()</snippet></ROW><ROW><id>12549416</id><snippet>class PermanentMenu(QtGui.QMenu):
    def hideEvent(self, event):
        self.show()
</snippet></ROW><ROW><id>12549416</id><snippet>PermanentMenu</snippet></ROW><ROW><id>12549416</id><snippet>import sys
from PyQt4 import QtGui

class PermanentMenu(QtGui.QMenu):
    def hideEvent(self, event):
        self.show()


class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.menu = PermanentMenu()

        self.menu.addAction('one')
        self.menu.addAction('two')

        self.submenu = self.menu.addMenu('submenu')
        self.submenu.addAction('sub one')
        self.submenu.addAction('sub two')

        self.submenu2 = self.menu.addMenu('submenu 2')
        self.submenu2.addAction('sub 2 one')
        self.submenu2.addAction('sub 2 two')

        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.menu)
        self.setLayout(layout)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    w = Window()
    w.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12549439</id><snippet>#!/usr/bin/env python
import json
import urllib2

try:
    r = urllib2.urlopen("https://push.geckoboard.com/v1/send/" + widget_key,
                        json.dumps(nested_dict))
except IOError as e:
    if hasattr(e, 'reason'):
       print "connection error:", e.reason
    elif hasattr(e, 'code'):
       print "http error:", e.code
       print e.read()
    else:
       print "error:", e
else: # success
    assert json.load(r)["success"]
</snippet></ROW><ROW><id>12549444</id><snippet>from collections import defaultdict
graph = defaultdict(list)
</snippet></ROW><ROW><id>12549444</id><snippet>graph = [[]]*n</snippet></ROW><ROW><id>12549689</id><snippet>print "key:%(key)s value:%(value)s" % {"key":"key1","value":"value1"}
print "{{keep me}} key:{key} value:{value}".format(**{"key":"key1","value":"value1"})
</snippet></ROW><ROW><id>12549689</id><snippet>&gt;&gt;&gt; "SELECT * FROM {tablename} WHERE {field} LIKE '%{keyword}%'".format(**{"tablename":"UserTable","field":"NameField","keyword":"Wuliang"})
"SELECT * FROM UserTable WHERE NameField LIKE '%Wuliang%'"
</snippet></ROW><ROW><id>12549801</id><snippet>&gt;&gt;&gt; boys = 'Jim','Jeff'
&gt;&gt;&gt; girls = 'Bonnie', 'Buffy'
&gt;&gt;&gt;
&gt;&gt;&gt; out = []
&gt;&gt;&gt; for b in boys:
...    for g in girls:
...       out.append((b,g))
...
&gt;&gt;&gt; out
[('Jim', 'Bonnie'), ('Jim', 'Buffy'), ('Jeff', 'Bonnie'), ('Jeff', 'Buffy')]
&gt;&gt;&gt;
&gt;&gt;&gt; out = []
&gt;&gt;&gt; for b in boys:
...    for g in girls:
...        if b[-1] not in g:
...            out.append((b,g))
...
&gt;&gt;&gt; out
[('Jim', 'Bonnie'), ('Jim', 'Buffy'), ('Jeff', 'Bonnie')]
&gt;&gt;&gt;
&gt;&gt;&gt; b
'Jeff'
&gt;&gt;&gt; g
'Buffy'
&gt;&gt;&gt; out = []
&gt;&gt;&gt; for b in boys:
...     if b[-1] not in g:
...         for g in girls:
...            out.append((b,g))
...
&gt;&gt;&gt; out
[('Jim', 'Bonnie'), ('Jim', 'Buffy')]
</snippet></ROW><ROW><id>12549801</id><snippet>b</snippet></ROW><ROW><id>12549801</id><snippet>g</snippet></ROW><ROW><id>12549801</id><snippet>Jim</snippet></ROW><ROW><id>12549801</id><snippet>m</snippet></ROW><ROW><id>12549801</id><snippet>Buffy</snippet></ROW><ROW><id>12549801</id><snippet>(Jim, Bonnie)</snippet></ROW><ROW><id>12549801</id><snippet>(Jim, Buffy)</snippet></ROW><ROW><id>12549801</id><snippet>Jeff</snippet></ROW><ROW><id>12549801</id><snippet>f</snippet></ROW><ROW><id>12549801</id><snippet>Buffy</snippet></ROW><ROW><id>12549801</id><snippet>Exception</snippet></ROW><ROW><id>12549801</id><snippet>&gt;&gt;&gt; # b = g = None 
&gt;&gt;&gt; boys = 'Jim','Jeff'
&gt;&gt;&gt; girls = 'Bonnie', 'Buffy'
&gt;&gt;&gt;
&gt;&gt;&gt; [(b,g) for b in boys if b[-1] not in g for g in girls]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;listcomp&gt;
UnboundLocalError: local variable 'g' referenced before assignment
</snippet></ROW><ROW><id>12549803</id><snippet>main()</snippet></ROW><ROW><id>12549803</id><snippet>Temp</snippet></ROW><ROW><id>12549803</id><snippet>Temp</snippet></ROW><ROW><id>12549803</id><snippet>class Temp():
    def __init__(self):
        # this method is in Temp
        pass

    def prettyPrint(self):
        # this method is also in temp
        print("I'm in temp")

def prettyPrint(self):
    #this is not in Temp (notice the indentation change)
    print("I'm not in temp")

if __name__ == "__main__":
    #this is not in temp either
    t = Temp()
    t.prettyPrint()
    prettyPrint(None)
</snippet></ROW><ROW><id>12549813</id><snippet>for ch in word:
if ch in diction:
    word_str += ch
if ch in vowels:
    empty_str += word_str + ch + first_syl
    word_str="" // I don't now python but you should clear the string
</snippet></ROW><ROW><id>12549831</id><snippet>bundle.data['stuff'] = [st.__dict__ for st in Stuff.objects.all()]
</snippet></ROW><ROW><id>12550332</id><snippet>stdin=open(os.devnull, 'r')</snippet></ROW><ROW><id>12550332</id><snippet>Popen</snippet></ROW><ROW><id>12550499</id><snippet>socket.gaierror</snippet></ROW><ROW><id>12550499</id><snippet>getaddrinfo(3)</snippet></ROW><ROW><id>12550499</id><snippet>socket.EAI_NODATA</snippet></ROW><ROW><id>12550583</id><snippet>for x in range(N):
    x = input("")
    try:  
        the_list.append(int(x))
    except ValueError:
        the_list.append(x)
</snippet></ROW><ROW><id>12550583</id><snippet>1
hello
4.5
3
boo
&gt;&gt;&gt; the_list
[1, 'hello', '4.5', 3, 'boo']
</snippet></ROW><ROW><id>12550583</id><snippet>&gt;&gt;&gt; sorted([1, "2", 3])                     # Python 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: str() &lt; int()

&gt;&gt;&gt; sorted([1, "2", 3])                     # Python 2
[1, 3, '2']
</snippet></ROW><ROW><id>12550632</id><snippet>def start(self):
    for i in range(self.process_num):
        p = Process(target = self.run)
        p.start()                       &lt;-- starts a new process
        p.join()                        &lt;-- waits for the process to terminate
</snippet></ROW><ROW><id>12550632</id><snippet>Process</snippet></ROW><ROW><id>12550687</id><snippet>O(N + M)</snippet></ROW><ROW><id>12550687</id><snippet>M</snippet></ROW><ROW><id>12550687</id><snippet>O(N^2)</snippet></ROW><ROW><id>12550687</id><snippet>[3,3,3,3,3,...,3]</snippet></ROW><ROW><id>12550687</id><snippet>number == 6</snippet></ROW><ROW><id>12550857</id><snippet>send_mail</snippet></ROW><ROW><id>12550857</id><snippet>send_mail</snippet></ROW><ROW><id>12550857</id><snippet>@classmethod</snippet></ROW><ROW><id>12550857</id><snippet>@staticmethod</snippet></ROW><ROW><id>12550857</id><snippet>class Revision(models.Model):
    # Model junk...

    @classmethod
    def send_email(cls, sender, instance, created, **kwargs):
        if created:
            print "DO STUFF"

signals.post_save.connect(Revision.send_email, sender=Revision)
</snippet></ROW><ROW><id>12550857</id><snippet>class Revision(models.Model):
    # Model junk...

    @staticmethod
    def send_email(sender, instance, created, **kwargs):
        if created:
            print "DO STUFF"

signals.post_save.connect(Revision.send_email, sender=Revision)
</snippet></ROW><ROW><id>12550857</id><snippet>class Revision(models.Model):
# Model junk...

    def send_email(self, sender, instance, created, **kwargs):
        if created:
            print "DO STUFF"

signals.post_save.connect(Revision().send_email, sender=Revision)
</snippet></ROW><ROW><id>12550857</id><snippet>def connect(self, receiver, sender=None, weak=True, dispatch_uid=None):
    """
    Connect receiver to sender for signal.

    Arguments:

        receiver
            A function or an instance method which is to receive signals.
            Receivers must be hashable objects.

            If weak is True, then receiver must be weak-referencable (more
            precisely saferef.safeRef() must be able to create a reference
            to the receiver).

            Receivers must be able to accept keyword arguments.

            If receivers have a dispatch_uid attribute, the receiver will
            not be added if another receiver already exists with that
            dispatch_uid.
</snippet></ROW><ROW><id>12550857</id><snippet>@classmethod</snippet></ROW><ROW><id>12550857</id><snippet>@staticmethod</snippet></ROW><ROW><id>12550956</id><snippet>babel.cfg</snippet></ROW><ROW><id>12550956</id><snippet>pybabel</snippet></ROW><ROW><id>12550956</id><snippet>pybabel extract -F babel.cfg -o messages.pot .
</snippet></ROW><ROW><id>12550956</id><snippet>app.config.from_pyfile('babel.cfg')</snippet></ROW><ROW><id>12550956</id><snippet>__init__.py</snippet></ROW><ROW><id>12550956</id><snippet>from_pyfile('mysettings.cfg')</snippet></ROW><ROW><id>12550956</id><snippet>from_object(config)</snippet></ROW><ROW><id>12550978</id><snippet>if row &lt; len(maxSS7):
</snippet></ROW><ROW><id>12550978</id><snippet>row</snippet></ROW><ROW><id>12550978</id><snippet>len(maxSS7)</snippet></ROW><ROW><id>12550978</id><snippet>False</snippet></ROW><ROW><id>12550978</id><snippet>maxLen = max(map(len, myList))
for row in myList:
    if len(row) &lt; maxLen:
        row.extend(...)
</snippet></ROW><ROW><id>12551029</id><snippet>axScatter.scatter(x, y)
</snippet></ROW><ROW><id>12551029</id><snippet>plot = plt.scatter(y,x)
</snippet></ROW><ROW><id>12551029</id><snippet>x</snippet></ROW><ROW><id>12551029</id><snippet>y</snippet></ROW><ROW><id>12551029</id><snippet>x = np.random.randn(1000)
y = np.random.randn(1000)
</snippet></ROW><ROW><id>12551029</id><snippet>y</snippet></ROW><ROW><id>12551029</id><snippet>x</snippet></ROW><ROW><id>12551240</id><snippet>*arg</snippet></ROW><ROW><id>12551240</id><snippet>my_mean(*[1, 2, 3])
</snippet></ROW><ROW><id>12551240</id><snippet>args</snippet></ROW><ROW><id>12551240</id><snippet>import collections

def my_mean(*args):
    if not args:
        return None
    if len(args) == 1 and isinstance(args[0], collections.Container):
        args = args[0]
    total = sum(args)
    ave = 1.0 * total / len(args)
    return ave
</snippet></ROW><ROW><id>12551565</id><snippet>personId</snippet></ROW><ROW><id>12551565</id><snippet>@app.route('/getpersonbyid', methods = ['POST'])
def getPersonById():
    personId = int(request.form['personId'])
    return personId
</snippet></ROW><ROW><id>12551565</id><snippet>int</snippet></ROW><ROW><id>12551855</id><snippet>import os, os.path, re

path = "/Users/mypath/testData"
myfiles = os.listdir(path)
# its much faster if you compile your regexes before you
# actually use them in a loop
REGEXES = [(re.compile(r'dog'), 'cat'),
           (re.compile(r'123'), '789')]
for f in myfiles:
    # split the filename and file extension for use in
    # renaming the output file
    file_name, file_extension = os.path.splitext(f)
    generated_output_file = file_name + "_regex" + file_extension

    # As l4mpi said ... if odt is zipped, you'd need to unzip it first
    # re.search is slower than a simple if statement
    if file_extension in ('.txt', '.doc', '.odt', '.htm', '.html'):

        # Declare input and output files, open them,
        # and start working on each line.
        input_file = os.path.join(path, f)
        output_file = os.path.join(path, generated_output_file)

        with open(input_file, "r") as fi, open(output_file, "w") as fo:
            for line in fi:
                for search, replace in REGEXES:
                    line = search.sub(replace, line)
                fo.write(line)
        # both the input and output files are closed automatically
        # after the with statement closes
</snippet></ROW><ROW><id>12552092</id><snippet># running django-admin.py inside /opt
/opt$ django-admin.py startproject testproject
</snippet></ROW><ROW><id>12552092</id><snippet>manage.py</snippet></ROW><ROW><id>12552092</id><snippet>__init__.py</snippet></ROW><ROW><id>12552092</id><snippet>settings.py</snippet></ROW><ROW><id>12552092</id><snippet>urls.py</snippet></ROW><ROW><id>12552092</id><snippet>wsgi.py</snippet></ROW><ROW><id>12552352</id><snippet>headers["Range"] = "bytes = 0-4096"
</snippet></ROW><ROW><id>12552352</id><snippet>host = 'http://www.wikipedia.org/somepath/tosome/file.mp3'
req = urllib2.Request(host, headers={'User-Agent' : "Magic Browser"})
response = urllib2.urlopen(req).read(4*1024)
</snippet></ROW><ROW><id>12552508</id><snippet>stored = []
with open("test.py") as f:
    for line in f:
        if line.startswith("AB x u z"):
            block = []
        elif line.startswith("AC x u z"):
            stored.append(block)
        else:
            block.append(line)
</snippet></ROW><ROW><id>12552508</id><snippet>stored</snippet></ROW><ROW><id>12552508</id><snippet>"AB x u z"</snippet></ROW><ROW><id>12552508</id><snippet>"AC x u z"</snippet></ROW><ROW><id>12552508</id><snippet>elif line.strip():
    block.append(line)
</snippet></ROW><ROW><id>12552508</id><snippet>for...</snippet></ROW><ROW><id>12552508</id><snippet>with...</snippet></ROW><ROW><id>12552508</id><snippet>stored</snippet></ROW><ROW><id>12552508</id><snippet>"AC x u z"</snippet></ROW><ROW><id>12552508</id><snippet>counter=3</snippet></ROW><ROW><id>12552798</id><snippet>@login_required</snippet></ROW><ROW><id>12552798</id><snippet>@login_required</snippet></ROW><ROW><id>12552798</id><snippet>def your_view_function(request):
    # Function body

your_view_function = login_required(your_view_function)
</snippet></ROW><ROW><id>12552798</id><snippet>login_required</snippet></ROW><ROW><id>12552852</id><snippet>&gt;&gt;&gt; url.find(lambda tag: tag.name == 'span' and tag.get('class', []) == ['bday'])
&lt;span class="bday"&gt;1899-08-04&lt;/span&gt;
</snippet></ROW><ROW><id>12552852</id><snippet>span</snippet></ROW><ROW><id>12553108</id><snippet>HttpRequest.get_full_path()</snippet></ROW><ROW><id>12553108</id><snippet> &gt;&gt;&gt; request.get_full_path().split('#')[1]
 '1'
</snippet></ROW><ROW><id>12553268</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>12553268</id><snippet>-rpath</snippet></ROW><ROW><id>12553268</id><snippet>./configure --enable-shared --prefix=/opt/python \
            LDFLAGS=-Wl,-rpath=/opt/python/lib
</snippet></ROW><ROW><id>12553304</id><snippet>def retrieve_artist_by(id):
    artist = dto.Artist.get_by_id(id)

    if artist is None:
        artist = dto.Artist.get_by_key_name(str(id))


    return artist
</snippet></ROW><ROW><id>12553365</id><snippet>__init__</snippet></ROW><ROW><id>12553365</id><snippet>form = FormName(is_hidden=True)</snippet></ROW><ROW><id>12553365</id><snippet>class FormName(forms.Form):
    first_name = forms.CharField(max_length=20, widget=forms.TextInput(attrs="class":"validate[required,first_name]","tabindex":"4"}), required=True)
    middle_name = forms.CharField(max_length=20, widget=forms.TextInput(attrs="class":"validate[middle_name]","tabindex":"5"}), required=False)
    last_name = forms.CharField(max_length=40, widget=forms.TextInput(attrs="class":"validate[required,last_name]","tabindex":"6"}), required=True)

    def __init__(self, *args, **kwargs):
        is_hidden = kwargs.pop('is_hidden', None)
        super(FormName, self).__init__(*args, **kwargs)
        if is_hidden:
            self.fields['first_name'].widget = forms.HiddenInput()
            self.fields['middle_name'].widget = forms.HiddenInput()
            self.fields['last_name'].widget = forms.HiddenInput()
</snippet></ROW><ROW><id>12553365</id><snippet>is_hidden</snippet></ROW><ROW><id>12553365</id><snippet>self.fields</snippet></ROW><ROW><id>12553633</id><snippet>while choice not in [1, 2, 3]:
</snippet></ROW><ROW><id>12553686</id><snippet>model = gtk.ListStore(gtk.gdk.Pixbuf, str)
model.append([gtk.gdk.pixbuf_new_from_file('image.png'), 'Foo'])

cb = gtk.ComboBox(model)

pb_cell = gtk.CellRendererPixbuf()
cb.pack_start(pb_cell, False)
cb.add_attribute(pb_cell, 'pixbuf', 0)

txt_cell = gtk.CellRendererText()
cb.pack_start(txt_cell, True)
cb.add_attribute(txt_cell, 'text', 1)
</snippet></ROW><ROW><id>12553706</id><snippet>str(a[i])</snippet></ROW><ROW><id>12553706</id><snippet>a[i]</snippet></ROW><ROW><id>12553706</id><snippet>a[i]</snippet></ROW><ROW><id>12553706</id><snippet>i</snippet></ROW><ROW><id>12553706</id><snippet>i</snippet></ROW><ROW><id>12553706</id><snippet>a</snippet></ROW><ROW><id>12553706</id><snippet>a</snippet></ROW><ROW><id>12553706</id><snippet>a</snippet></ROW><ROW><id>12553706</id><snippet>a[i]</snippet></ROW><ROW><id>12553706</id><snippet>i</snippet></ROW><ROW><id>12553706</id><snippet>str(a[i])</snippet></ROW><ROW><id>12553706</id><snippet>''.join(str(element) for element in a)
</snippet></ROW><ROW><id>12553706</id><snippet>''.join(map(str, a))
</snippet></ROW><ROW><id>12553706</id><snippet>str</snippet></ROW><ROW><id>12553706</id><snippet>a</snippet></ROW><ROW><id>12553706</id><snippet>s = ''
for element in a:
    s += str(element)
return s
</snippet></ROW><ROW><id>12553790</id><snippet>class Category(models.Model):
    category = models.CharField(max_length = 30, unique=True)   

    def __unicode__(self):
        return self.category

class Post(models.Model):
    ...
    category = models.ForeignKey(Category)

    def __unicode__(self):
        return self.title
</snippet></ROW><ROW><id>12553790</id><snippet>myCategory =Category.objects.get(pk=1)
myCategory.post_set.all()
</snippet></ROW><ROW><id>12553956</id><snippet>simplejson</snippet></ROW><ROW><id>12553956</id><snippet>from django.core import serializers
# serialize queryset
serialized_queryset = serializers.serialize('json', some_queryset)
# serialize object
serialized_object = serializers.serialize('json', [some_object,])
</snippet></ROW><ROW><id>12553968</id><snippet>extra_thumbnails</snippet></ROW><ROW><id>12553968</id><snippet>FileField</snippet></ROW><ROW><id>12553968</id><snippet>cityofwindows/models.py</snippet></ROW><ROW><id>12554102</id><snippet>mac = 'zz:zz:zz:d2:a4:00'
i = int(''.join(mac.split(':')[-3:]), 16) # integer
# -&gt; 13804544

h = '%06x' % i
# -&gt; 'd2a400'

mac = 'zz:zz:zz:%s:%s:%s' % (h[0:2], h[2:4], h[4:6])
# -&gt; 'zz:zz:zz:d2:a4:00'
</snippet></ROW><ROW><id>12554102</id><snippet>&gt;&gt;&gt; h = '%012x' % 123
'00000000007b'
&gt;&gt;&gt; ':'.join(h[i:i+2] for i in range(0, 12, 2))
'00:00:00:00:00:7b'
</snippet></ROW><ROW><id>12554234</id><snippet>raw_matches=matcher.knnMatch(np.asarray(desc1,np.float32),np.asarray(desc2,np.float32), 2) #2
</snippet></ROW><ROW><id>12554286</id><snippet>DwmIsCompositionEnabled</snippet></ROW><ROW><id>12554286</id><snippet>import ctypes

def is_aero_enabled():
    try:
        b = ctypes.c_bool()
        retcode = ctypes.windll.dwmapi.DwmIsCompositionEnabled(ctypes.byref(b))
        return (retcode == 0 and b.value)
    except AttributeError:
        # No windll, no dwmapi or no DwmIsCompositionEnabled function.
        return False
</snippet></ROW><ROW><id>12554286</id><snippet>True</snippet></ROW><ROW><id>12554332</id><snippet>circus.conf</snippet></ROW><ROW><id>12554332</id><snippet>/etc/init</snippet></ROW><ROW><id>12554332</id><snippet>start on filesystem and net-device-up IFACE=lo
exec /usr/local/bin/circusd /etc/circus.ini
</snippet></ROW><ROW><id>12554332</id><snippet>/etc/circus.ini</snippet></ROW><ROW><id>12554332</id><snippet>sudo service circus...</snippet></ROW><ROW><id>12554333</id><snippet>as</snippet></ROW><ROW><id>12554333</id><snippet>&gt;&gt;&gt; try:
    print (a)
except NameError as e:
    print(dir(e)) # print attributes of e


['__cause__', '__class__', '__context__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__traceback__', 'args', 'with_traceback']
</snippet></ROW><ROW><id>12554379</id><snippet>'install_requires': ['nose']  
</snippet></ROW><ROW><id>12554379</id><snippet>,</snippet></ROW><ROW><id>12554379</id><snippet>'install_requires': ['nose'], 
</snippet></ROW><ROW><id>12554421</id><snippet>__call__</snippet></ROW><ROW><id>12554421</id><snippet>__init__</snippet></ROW><ROW><id>12554421</id><snippet>MyObject()()</snippet></ROW><ROW><id>12554421</id><snippet>class User(object):
    def __init__(self, loginName, password):
        self.loginName = loginName
        self.password = password

    def __call__(self):
        if self.login():
            return self
        return None

    def login(self):
        database = db.connection
        return database.checkPassWord(self.loginName, self.password)

a = User("me", "mypassword")
a = a() # a is now either None or an instance that is aparantly logged in.
</snippet></ROW><ROW><id>12554464</id><snippet>with open("inputfile.txt") as myfile:
    for line_no,l in enumerate(myfile.readlines()):
        print "Line number",line_no     
        for word_no,w in enumerate(l.split()):
            print "word number",word_no     
            print "word: ",w
</snippet></ROW><ROW><id>12554464</id><snippet>w</snippet></ROW><ROW><id>12554464</id><snippet>l</snippet></ROW><ROW><id>12554464</id><snippet>with open("inputfile.txt") as myfile:
    print myfile.readines()[l].split()[w]
</snippet></ROW><ROW><id>12554793</id><snippet>perl -F'~' -lane 'print if @F &gt; 10' input.txt &gt; broken_fields.txt 
</snippet></ROW><ROW><id>12554793</id><snippet>Text::CSV</snippet></ROW><ROW><id>12554997</id><snippet>[isvowel(ch) for ch in string].index(True)
</snippet></ROW><ROW><id>12555003</id><snippet>filter()</snippet></ROW><ROW><id>12555003</id><snippet>In [59]: lis=[1,2,3,4,5,6,7]
In [61]: filter(lambda x:x&gt;=3,lis)  #return only those values which are &gt;=3
Out[61]: [3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>12555130</id><snippet>calc.exe</snippet></ROW><ROW><id>12555130</id><snippet>.exe</snippet></ROW><ROW><id>12555214</id><snippet>from smtplib import SMTP

smtp = SMTP('smtp.server.com')

def notifyUser(smtp, smtp_user, smtp_password, from_email, to_email, msg):
    smtp.login(smtp_user, smtp_password)
    smtp.sendmail(from_email, to_email, msg.as_string())
    smtp.quit()
</snippet></ROW><ROW><id>12555214</id><snippet>from smtplib import SMTP

smtp = SMTP('smtp.server.com')

def notifyUser(smtp, from_email, to_email, msg):
    smtp.sendmail(from_email, to_email, msg.as_string())
    smtp.quit()
</snippet></ROW><ROW><id>12555214</id><snippet>from smtplib import SMTP

smtp = SMTP('smtp.server.com')

def notifyUsers(smtp, smtp_user, smtp_password, from_to_msgs):
    """
    :param from_to_msgs: iterable of tuples with `(from_email, to_email, msg)`
    """
    smtp.login(smtp_user, smtp_password)
    for from_email, to_email, msg in from_to_msgs:
        smtp.sendmail(from_email, to_email, msg.as_string())
    smtp.quit()
</snippet></ROW><ROW><id>12555248</id><snippet>import datetime
import time
def datetimestrptime(time_string,time_fmt):
     t = time.strptime(time_string,time_fmt)
     return datetime.time(hour=t.tm_hour,minute=t.tm_min,second=t.tm_sec)
print datetimestrptime("16:00","%H:%M")
16:00:00
</snippet></ROW><ROW><id>12555492</id><snippet>def square(list):
    return [i ** 2 for i in list]
</snippet></ROW><ROW><id>12555492</id><snippet>map</snippet></ROW><ROW><id>12555492</id><snippet>def square(list):
    return map(lambda x: x ** 2, list)
</snippet></ROW><ROW><id>12555492</id><snippet>def square(list):
    for i in list:
        yield i ** 2
</snippet></ROW><ROW><id>12555492</id><snippet>for</snippet></ROW><ROW><id>12555492</id><snippet>def square(list):
    ret = []
    for i in list:
        ret.append(i ** 2)
    return ret
</snippet></ROW><ROW><id>12555510</id><snippet>df1['e'] = Series(np.random.randn(sLength), index=df1.index)
</snippet></ROW><ROW><id>12555667</id><snippet>total</snippet></ROW><ROW><id>12555717</id><snippet>Dictionary&lt;string, List&lt;Regex&gt;&gt; everything = new Dictionary&lt;string, List&lt;Regex&gt;&gt;()
{
    { "Type1", "49 48 29 ai au2".Split(' ').Select(d =&gt; new Regex("-" + d + "-")).ToList() },
    { "Type2", "ki[0-9] 29 ra9".Split(' ').Select(d =&gt; new Regex("-" + d + "-")).ToList() },
}

string GetInputType(string input)
{
    var codeSegments = input.ToLower().Split('-');
    if(codeSegments.Length &lt; 2) return "NULL";

    string code = "-" + codeSegments[1] + "-";
    var matches = everything
        .Where(kvp =&gt; kvp.Value.Any(r =&gt; r.IsMatch(code)));

    return matches.Any() ? matches.First().Key : "NULL";
}
</snippet></ROW><ROW><id>12555726</id><snippet>HTMLParser</snippet></ROW><ROW><id>12555726</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h = HTMLParser.HTMLParser()
&gt;&gt;&gt; print h.unescape('Johnny's sports')
Johnny's sports
</snippet></ROW><ROW><id>12555860</id><snippet>socket</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>Bj &lt; Ai</snippet></ROW><ROW><id>12555973</id><snippet>Bj &lt; Ai-1</snippet></ROW><ROW><id>12555973</id><snippet>i</snippet></ROW><ROW><id>12555973</id><snippet>j</snippet></ROW><ROW><id>12555973</id><snippet>i</snippet></ROW><ROW><id>12555973</id><snippet>j</snippet></ROW><ROW><id>12555973</id><snippet>A</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj ==&gt; Ai &lt; Bj-1,   resp.  Bj &lt; Ai ==&gt; Bj &lt; Ai-1
</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1 &lt; Ai &lt; Bj  resp. Ai-1 &lt; Bj &lt; Ai
</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj ==&gt; Ai &lt;= Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>Bj &lt; Ai ==&gt; Bj &lt;= Ai-1</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>j</snippet></ROW><ROW><id>12555973</id><snippet>Bj</snippet></ROW><ROW><id>12555973</id><snippet>A</snippet></ROW><ROW><id>12555973</id><snippet>i</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1 &lt; Ai &lt; Bj</snippet></ROW><ROW><id>12555973</id><snippet>j + i</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>i + j = k-1</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt;= Bj</snippet></ROW><ROW><id>12555973</id><snippet>Ai = Bj</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj</snippet></ROW><ROW><id>12555973</id><snippet>m</snippet></ROW><ROW><id>12555973</id><snippet>Am = Ai</snippet></ROW><ROW><id>12555973</id><snippet>n</snippet></ROW><ROW><id>12555973</id><snippet>Bn = Bj</snippet></ROW><ROW><id>12555973</id><snippet>m + n &lt;= i + j = k-1</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>(i+1) + (j+1) = (k+1)</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1 &lt; Ai</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1 = Ai</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1 &gt; Ai</snippet></ROW><ROW><id>12555973</id><snippet>j</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>m &lt;= i</snippet></ROW><ROW><id>12555973</id><snippet>A</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>m</snippet></ROW><ROW><id>12555973</id><snippet>i-m+1</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>j + m &lt;= j + i = k-1</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>j + m + (i-m+1) = j+i+1 = k</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Ai &lt; Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>j</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>A</snippet></ROW><ROW><id>12555973</id><snippet>i+1</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>j-1</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>i + (j-1) = k-2</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>Ai</snippet></ROW><ROW><id>12555973</id><snippet>A</snippet></ROW><ROW><id>12555973</id><snippet>Bj-1</snippet></ROW><ROW><id>12555973</id><snippet>B</snippet></ROW><ROW><id>12555973</id><snippet>def kthsmallest(A, B, k):
    if k &lt; 1:
        return None
    a_len, b_len = len(A), len(B)
    if a_len == 0:
        return B[k-1] # let it die if B is too short, I don't care
    if b_len == 0:
        return A[k-1] # see above
    # Handle edge case: if k == a_len + b_len, we would
    # get an out-of-bounds index, since i + j &lt;= a_len+b_len - 2
    # for valid indices i and j
    if a_len + b_len == k:
        if A[-1] &lt; B[-1]:
            return B[-1]
        else:
            return A[-1]
    # Find indices i and j approximately proportional to len(A)/len(B)
    i = (a_len*(k-1)) // (a_len+b_len)
    j = k-1-i
    # Make sure the indices are valid, in unfortunate cases,
    # j could be set to b_len by the above
    if j &gt;= b_len:
        j = b_len-1
        i = k-1-j
    if A[i] &lt;= B[j]:
        if j == 0 or B[j-1] &lt;= A[i]:
            return A[i]
        # A[i] &lt; B[j-1] &lt;= B[j]
        return kthsmallest(A[i:], B[:j], k-i)
    # B[j] &lt; A[i], symmetrical to A[i] &lt; B[j]
    if i == 0 or A[i-1] &lt;= B[j]:
        return B[j]
    # B[j] &lt; A[i-1]
    return kthsmallest(A[:i], B[j:], k-j)
</snippet></ROW><ROW><id>12555989</id><snippet>webbrowser</snippet></ROW><ROW><id>12555989</id><snippet>import webbrowser
firefox = webbrowser.get('firefox')
for url in data.split('\n'):
    firefox.open_new_tab(url)
</snippet></ROW><ROW><id>12555989</id><snippet>webbrowser.open_new_tab</snippet></ROW><ROW><id>12555989</id><snippet>webbrowser</snippet></ROW><ROW><id>12555989</id><snippet>subprocess</snippet></ROW><ROW><id>12555989</id><snippet>import subprocess
firefox_path = 'C:/Program Files/Firefox/firefox' # change this line accordingly
for url in data.split('\n'):
    subprocess.Popen([firefox_path, url])
</snippet></ROW><ROW><id>12555989</id><snippet>import subprocess
urls = open('C:/Users/test/Desktop/urls.txt').read().split('\n')
subprocess.Popen(['C:/Program Files/Firefox/firefox']+urls)
</snippet></ROW><ROW><id>12556053</id><snippet>(default)dict</snippet></ROW><ROW><id>12556053</id><snippet>defaultdict</snippet></ROW><ROW><id>12556053</id><snippet>dict</snippet></ROW><ROW><id>12556053</id><snippet>defaultdict</snippet></ROW><ROW><id>12556053</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup1 = """from collections import defaultdict
... s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
... d = defaultdict(list)"""
&gt;&gt;&gt; stmt1 = """for k, v in s:
...     d[k].append(v)"""
&gt;&gt;&gt; setup2 = """s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
... d = {}"""
&gt;&gt;&gt; stmt2 = """for k, v in s:
...     d.setdefault(k, []).append(v)"""
&gt;&gt;&gt; timeit.timeit(setup=setup1, stmt=stmt1)
1.0283400125194078
&gt;&gt;&gt; timeit.timeit(setup=setup2, stmt=stmt2)
1.7767367580925395
</snippet></ROW><ROW><id>12556186</id><snippet>double</snippet></ROW><ROW><id>12556186</id><snippet>float</snippet></ROW><ROW><id>12556186</id><snippet>f</snippet></ROW><ROW><id>12556186</id><snippet>x</snippet></ROW><ROW><id>12556186</id><snippet>import struct
...

data = my_port.read(5)
num, = struct.unpack('&lt;fx', data)
</snippet></ROW><ROW><id>12556186</id><snippet>readline</snippet></ROW><ROW><id>12556186</id><snippet>'\n'</snippet></ROW><ROW><id>12556186</id><snippet>'&lt;f'</snippet></ROW><ROW><id>12556386</id><snippet>correctlyNamedDirectories = [os.path.join(path, subname) for path, dirnames, filenames in os.walk(directory) for subname in dirnames + filenames]
</snippet></ROW><ROW><id>12556663</id><snippet>"str"</snippet></ROW><ROW><id>12556663</id><snippet>"float"</snippet></ROW><ROW><id>12556663</id><snippet>if float(match.group(3)) &gt; 0.4:
</snippet></ROW><ROW><id>12556663</id><snippet>r"..."</snippet></ROW><ROW><id>12556663</id><snippet>\d+\d+</snippet></ROW><ROW><id>12556663</id><snippet>\d+</snippet></ROW><ROW><id>12556663</id><snippet>match = re.search(r'(\w+)\s\d+\s(\d+)\s\d+\s(\d+\.\d+)', Line)
</snippet></ROW><ROW><id>12556663</id><snippet>for Line in InFile:
    match = re.search(r'(\w+)\s\d+\s(\d+)\s\d+\s(\d+\.\d+)', Line)
    if match:
        if float(match.group(3)) &gt; 0.4:
            # do stuff
        else:
            print "No match: ", Line
</snippet></ROW><ROW><id>12556693</id><snippet>import json
from mptt.templatetags.mptt_tags import cache_tree_children

def recursive_node_to_dict(node):
    result = {
        'id': node.pk,
        'name': node.name,
    }
    children = [recursive_node_to_dict(c) for c in node.get_children()]
    if children:
        result['children'] = children
    return result

root_nodes = cache_tree_children(Node.objects.all())
dicts = []
for n in root_nodes:
    dicts.append(recursive_node_to_dict(n))

print json.dumps(dicts, indent=4)
</snippet></ROW><ROW><id>12556703</id><snippet>if re.findall(r'exon',line) is True:</snippet></ROW><ROW><id>12556703</id><snippet>re.finall()</snippet></ROW><ROW><id>12556703</id><snippet>True</snippet></ROW><ROW><id>12556703</id><snippet>False</snippet></ROW><ROW><id>12556703</id><snippet>&gt;&gt;&gt; mystr = '123 exon'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'exon', mystr)
['exon']
&gt;&gt;&gt; re.findall(r'exon', mystr) is True
False
&gt;&gt;&gt; bool(re.findall(r'exon',mystr))
True
&gt;&gt;&gt; if re.findall(r'exon', mystr):
...     print 'true'
... 
true
</snippet></ROW><ROW><id>12556703</id><snippet>for p,line in zip(indx_line,data):

    if re.findall(r'exon',line):
        print p
</snippet></ROW><ROW><id>12556703</id><snippet>re</snippet></ROW><ROW><id>12556703</id><snippet>..</snippet></ROW><ROW><id>12556703</id><snippet>&gt;&gt;&gt; line = ' exon            1..35'
&gt;&gt;&gt; if 'exon' in line:
...     ranges = line.split()[1].split('..')
...     print ranges
...
['1', '35']
</snippet></ROW><ROW><id>12556780</id><snippet>keys = pygame.key.get_pressed()

if keys[K_LEFT]:
    self.char_x += 10

if keys[K_RIGHT]:
    self.char_x -= 10

if keys[K_UP]:
    self.char_y -= 10

if keys[K_DOWN]:
    self.char_y += 10
</snippet></ROW><ROW><id>12556795</id><snippet>list1 = list(str1)
</snippet></ROW><ROW><id>12556795</id><snippet>list3</snippet></ROW><ROW><id>12556795</id><snippet>list3[i]</snippet></ROW><ROW><id>12556795</id><snippet>list1[0]</snippet></ROW><ROW><id>12556795</id><snippet>list2[0]</snippet></ROW><ROW><id>12556795</id><snippet>del</snippet></ROW><ROW><id>12556795</id><snippet>def isinter(str1,str2,str3,check=True):
    # print "Checking %s %s and %s" % (str1, str2, str3)
    p1,p2,p3 = 0,0,0
    if check:
        if len(str1)+len(str2) != len(str3):
            return False
    while p3 &lt; len(str3):
        if p1 &lt; len(str1) and str3[p3] == str1[p1]:
            if p2 &lt; len(str2) and str3[p3] == str2[p2]:
                # does str3[p3] belong to str1 or str2?
                if True == isinter(str1[p1+1:], str2[p2:], str3[p3+1:], False):
                   return True
                if True == isinter(str1[p1:], str2[p2+1:], str3[p3+1:], False):
                   return True
                return False
            p1 += 1
        elif p2 &lt; len(str2) and str3[p3] == str2[p2]:
            p2 += 1
        else:
            return False
        p3 += 1
    return p1 == len(str1) and p2 == len(str2) and p3 == len(str3)
</snippet></ROW><ROW><id>12556795</id><snippet>for j in range(3, 50):
        str1 = ''
        str2 = ''
        for k in range(1, j):
                if random.choice([True, False]):
                        str1 += chr(random.randint(97, 122))
                if random.choice([True, False]):
                        str2 += chr(random.randint(97, 122))
        p1 = 0
        p2 = 0
        str3 = ''
        while len(str3) &lt; len(str1)+len(str2):
                if p1 &lt; len(str1) and random.choice([True, False]):
                        str3 += str1[p1]
                        p1 += 1
                if p2 &lt; len(str2) and random.choice([True, False]):
                        str3 += str2[p2]
                        p2 += 1
        a = time.time()
        for i in range(1000000):
                isShuffle2(str1, str2, str3)
        a = (time.time() - a)
        b = time.time()
        for i in range(1000000):
                isinter(str1, str2, str3)
        b = (time.time() - b)

        print "(%s,%s = %s) in %f against %f us" % (str1, str2, str3, a, b)
</snippet></ROW><ROW><id>12556795</id><snippet>(cfccha,ddehhg = cfcchaddehhg) in 68.139601 against 66.826320 us
</snippet></ROW><ROW><id>12556852</id><snippet>re.search</snippet></ROW><ROW><id>12556852</id><snippet>..</snippet></ROW><ROW><id>12556852</id><snippet>import re

first = []
last = []

for s in my_list:
  match = re.search(r'(\d+)\.\.(\d+)', s)
  first.append(match.group(1))
  last.append(match.group(2))
</snippet></ROW><ROW><id>12556887</id><snippet>pygame.mouse.set_visible</snippet></ROW><ROW><id>12556887</id><snippet>pygame.event.set_grab</snippet></ROW><ROW><id>12557089</id><snippet>abc</snippet></ROW><ROW><id>12557089</id><snippet>xyz</snippet></ROW><ROW><id>12557089</id><snippet>abc</snippet></ROW><ROW><id>12557089</id><snippet>__init__.py</snippet></ROW><ROW><id>12557089</id><snippet>__all__</snippet></ROW><ROW><id>12557089</id><snippet>xyz</snippet></ROW><ROW><id>12557089</id><snippet>from abc import xyz</snippet></ROW><ROW><id>12557089</id><snippet>import abc.xyz</snippet></ROW><ROW><id>12557089</id><snippet>Traceback (most recent call last):
  File "t.py", line 1, in &lt;module&gt;
    from testpack import d
  File "C:\Documents and Settings\BrenBarn\My Documents\Python\testpack\d.py", line 1, in &lt;module&gt;
    from testpack import t
  File "C:\Documents and Settings\BrenBarn\My Documents\Python\testpack\t.py", line 1, in &lt;module&gt;
    from testpack import d
ImportError: cannot import name d
</snippet></ROW><ROW><id>12557089</id><snippet>t.py</snippet></ROW><ROW><id>12557089</id><snippet>from testpack import d</snippet></ROW><ROW><id>12557089</id><snippet>d.py</snippet></ROW><ROW><id>12557089</id><snippet>from testpack import t</snippet></ROW><ROW><id>12557089</id><snippet>t.py</snippet></ROW><ROW><id>12557089</id><snippet>t.py</snippet></ROW><ROW><id>12557089</id><snippet>from testpack import d</snippet></ROW><ROW><id>12557089</id><snippet>d.py</snippet></ROW><ROW><id>12557089</id><snippet>d.py</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557089</id><snippet>t</snippet></ROW><ROW><id>12557089</id><snippet>from testpack import t</snippet></ROW><ROW><id>12557089</id><snippet>&gt;&gt;&gt; from testpack import t
Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt;
    from testpack import t
  File "C:\Documents and Settings\BrenBarn\My Documents\Python\testpack\t.py", line 1, in &lt;module&gt;
    from testpack import d
  File "C:\Documents and Settings\BrenBarn\My Documents\Python\testpack\d.py", line 1, in &lt;module&gt;
    from testpack import t
ImportError: cannot import name t
</snippet></ROW><ROW><id>12557089</id><snippet>import code.d</snippet></ROW><ROW><id>12557089</id><snippet>from code import t</snippet></ROW><ROW><id>12557089</id><snippet>code.t</snippet></ROW><ROW><id>12557089</id><snippet>import code.d</snippet></ROW><ROW><id>12557089</id><snippet>import code.t</snippet></ROW><ROW><id>12557089</id><snippet>code.t</snippet></ROW><ROW><id>12557089</id><snippet>t</snippet></ROW><ROW><id>12557089</id><snippet>t</snippet></ROW><ROW><id>12557089</id><snippet>t</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557089</id><snippet>code</snippet></ROW><ROW><id>12557089</id><snippet>from code import t</snippet></ROW><ROW><id>12557089</id><snippet>t</snippet></ROW><ROW><id>12557089</id><snippet>d.py</snippet></ROW><ROW><id>12557089</id><snippet>import code.t
print code.t
</snippet></ROW><ROW><id>12557089</id><snippet>code</snippet></ROW><ROW><id>12557089</id><snippet>code.t</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557089</id><snippet>d.py</snippet></ROW><ROW><id>12557089</id><snippet>import code.t
def f():
    print code.t
</snippet></ROW><ROW><id>12557089</id><snippet>f</snippet></ROW><ROW><id>12557089</id><snippet>code.t</snippet></ROW><ROW><id>12557089</id><snippet>d</snippet></ROW><ROW><id>12557091</id><snippet>&gt;&gt;&gt; a = [12,23,45,67,89]
&gt;&gt;&gt; string = "John"
&gt;&gt;&gt; my_tuple = [(i,string) for i in a]
&gt;&gt;&gt; print my_tuple
</snippet></ROW><ROW><id>12557091</id><snippet>zip</snippet></ROW><ROW><id>12557265</id><snippet>first_syl = 'ib' # the characters to be added
word = 'dOg'     # the input word

vowels = "aeiou" # instead of a long list of possibilities, we'll use the 
                 # &lt;string&gt;.lower() func. It returns the lowercase equivalent of a 
                 # string object.
first_vowel_count = True # This will tell us if the iterator is at the first vowel
final_str = ""           # The output.

for ch in word:
    if ch.lower() not in vowels:     # If we're at a consonant, 
        first_vowel_count = True     # the next vowel to appear must be the first in 
                                     # the series.

    elif first_vowel_count:          # So the previous "if" statement was false. We're 
                                     # at a vowel. This is also the first vowel in the 
                                     # series. This means that before appending the vowel 
                                     # to output, 

        final_str += first_syl       # we need to first append the vowel-
                                     # predecessor string, or 'ib' in this case.
        first_vowel_count = False    # Additionally, any vowels following this one cannot 
                                     # be the first in the series.

    final_str += ch                  # Finally, we'll append the input character to the 
                                     # output.
print(final_str)                     # "dibOg"
</snippet></ROW><ROW><id>12557291</id><snippet>str</snippet></ROW><ROW><id>12557291</id><snippet>unicode</snippet></ROW><ROW><id>12557291</id><snippet>str</snippet></ROW><ROW><id>12557291</id><snippet>unicode</snippet></ROW><ROW><id>12557291</id><snippet>.encode()</snippet></ROW><ROW><id>12557291</id><snippet>str</snippet></ROW><ROW><id>12557291</id><snippet>unicode</snippet></ROW><ROW><id>12557291</id><snippet>encoded_title = title
if isinstance(encoded_title, unicode):
    encoded_title = title.encode('utf-8')
</snippet></ROW><ROW><id>12557291</id><snippet>python -Werror -municodenazi myprog.py
</snippet></ROW><ROW><id>12557314</id><snippet>b = 0
def a():
    return b

def c(d=a):    # When it's a parameter, the call will be evaluated and its return 
               # value will be used. Instead, just use the function name, because
    return d() # within the scope of the function, the call will be evaluated every time.
</snippet></ROW><ROW><id>12557314</id><snippet>f(x)</snippet></ROW><ROW><id>12557348</id><snippet>re.sub</snippet></ROW><ROW><id>12557348</id><snippet>a</snippet></ROW><ROW><id>12557348</id><snippet>b</snippet></ROW><ROW><id>12557348</id><snippet>c</snippet></ROW><ROW><id>12557348</id><snippet>[^abc]</snippet></ROW><ROW><id>12557348</id><snippet>import re
my_list2 = []
for str in my_list:
    my_list2.append(re.sub("[^abc]", "", str))
</snippet></ROW><ROW><id>12557389</id><snippet>def main():
    while True:
        again = raw_input("Would you like to play again? Enter y/n: ")

        if again == "n":
            print ("Thanks for Playing!")
            return
        elif again == "y":
            print ("Lets play again..")
        else:
            print ("You should enter either \"y\" or \"n\".")

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>12557397</id><snippet>import matplotlib.pyplot as plt
import random
x = []
a,seed,c,m,n = 128,10,0,509,500
for i in range (1,n):
   new_seed=(a*seed+c)%m
   seed = new_seed
   x.append( new_seed)


a,seed,c,m,n = 269,10,0,2048,500
y= []
for i in range (1,n):
   new_seed=(a*seed+c)%m
   seed = new_seed
   y.append( new_seed)
plt.plot(x,y)
plt.show()
</snippet></ROW><ROW><id>12557530</id><snippet>1</snippet></ROW><ROW><id>12557530</id><snippet>1</snippet></ROW><ROW><id>12557530</id><snippet>int</snippet></ROW><ROW><id>12557530</id><snippet>4</snippet></ROW><ROW><id>12557530</id><snippet>5</snippet></ROW><ROW><id>12557530</id><snippet>a</snippet></ROW><ROW><id>12557530</id><snippet>a = 5</snippet></ROW><ROW><id>12557530</id><snippet>a</snippet></ROW><ROW><id>12557530</id><snippet>a</snippet></ROW><ROW><id>12557530</id><snippet>==</snippet></ROW><ROW><id>12557530</id><snippet>is</snippet></ROW><ROW><id>12557530</id><snippet>id(x) == id(y)</snippet></ROW><ROW><id>12557573</id><snippet>TextField</snippet></ROW><ROW><id>12557573</id><snippet>CharField</snippet></ROW><ROW><id>12557573</id><snippet>class Blurb(models.Model):
  ident = models.CharField(..., db_index=True)
  blurb = models.TextField(...)

PK  ident  text
1   main   Hey! Do you like this template? This...

{% load blurb %}
 ...
{% blurb main %}
</snippet></ROW><ROW><id>12557583</id><snippet>flights = dict((f.pop('flight_id'), f) for f in flights)
</snippet></ROW><ROW><id>12557583</id><snippet>flights = {f.pop('flight_id'): f for f in flights}
</snippet></ROW><ROW><id>12557639</id><snippet>super()</snippet></ROW><ROW><id>12557639</id><snippet>super(Instructor, self).__init__(name, year)
</snippet></ROW><ROW><id>12557639</id><snippet>super().__init__(name, year)
</snippet></ROW><ROW><id>12557782</id><snippet>def update(self, dx):
    self.doc.insert_text(0, "New line".ljust(40))
</snippet></ROW><ROW><id>12557782</id><snippet>def update(self, dx):
    # Fix the implied bug
    self.doc.insert_text(-1, "New line".ljust(40))
</snippet></ROW><ROW><id>12557782</id><snippet>def update(self, dx):
    # Fix the implied bug
    self.doc.insert_text(-1, "New line".ljust(40))
    # The answer to the stated question
    self.layout.view_y = -self.layout.content_height
</snippet></ROW><ROW><id>12557819</id><snippet>&gt;&gt;&gt; '1;2;3;4;\n'.strip('\n;')
'1;2;3;4'
</snippet></ROW><ROW><id>12557865</id><snippet>class _Fib(object):
    def __init__(self):
        self.cache = {0:0, 1:1}
    def __call__(self, n):
        if n not in self.cache:
            self.cache[n] = self(n - 1) + self(n - 2)
        return self.cache[n]

fib = _Fib()
</snippet></ROW><ROW><id>12557865</id><snippet>&gt;&gt;&gt; map(fib, xrange(10))
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
&gt;&gt;&gt; fib(249)
4880197746793002076754294951020699004973287771475874L
</snippet></ROW><ROW><id>12557865</id><snippet>self</snippet></ROW><ROW><id>12557865</id><snippet>fib</snippet></ROW><ROW><id>12557865</id><snippet>def foo(a, b):
    if base_case(a, b):
        return
    foo.dct[a] = b
    foo.lst.append((a, b))
    foo(a - 1, b - 1)
foo.dct = {}
foo.lst = []
</snippet></ROW><ROW><id>12557865</id><snippet>def foo(a, b, dct, lst):
    if base_case(a, b):
        return
    dct[a] = b
    lst.append((a, b))
    foo(a - 1, b - 1, dct, lst)
</snippet></ROW><ROW><id>12557865</id><snippet>try/except</snippet></ROW><ROW><id>12557865</id><snippet>def outer(a, b):
    return _inner_recursive(a, b, {}, [])

def _inner_recursive(a, b, lst, dct):
    #blah blah blah
</snippet></ROW><ROW><id>12557909</id><snippet>python -Werror -municodenazi myprog.py
</snippet></ROW><ROW><id>12557909</id><snippet>Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "SITE-PACKAGES/unicodenazi.py", line 128, in &lt;module&gt;
    main()
  File "SITE-PACKAGES/unicodenazi.py", line 119, in main
    execfile(sys.argv[0], main_mod.__dict__)
  File "myprog.py", line 4, in &lt;module&gt;
    print foo()
  File "myprog.py", line 2, in foo
    return 'bar' + u'baz'
  File "SITE-PACKAGES/unicodenazi.py", line 34, in warning_decode
    stacklevel=2)
UnicodeWarning: Implicit conversion of str to unicode
</snippet></ROW><ROW><id>12557909</id><snippet>-Werror</snippet></ROW><ROW><id>12557909</id><snippet>python -municodenazi myprog.py
</snippet></ROW><ROW><id>12557909</id><snippet>/SITE-PACKAGES/unicodenazi.py:119: UnicodeWarning: Implicit conversion of str to unicode
  execfile(sys.argv[0], main_mod.__dict__)
barbaz
</snippet></ROW><ROW><id>12557927</id><snippet>bookmarks =</snippet></ROW><ROW><id>12557927</id><snippet>[paths]</snippet></ROW><ROW><id>12557927</id><snippet>git+ssh://git@github.com/username/reponame.git</snippet></ROW><ROW><id>12558011</id><snippet>web</snippet></ROW><ROW><id>12558057</id><snippet>People.objects.all()</snippet></ROW><ROW><id>12558057</id><snippet>People</snippet></ROW><ROW><id>12558057</id><snippet>People()</snippet></ROW><ROW><id>12558243</id><snippet>def minimum(self): return min(self.q)</snippet></ROW><ROW><id>12558243</id><snippet>print(queue.minimum())</snippet></ROW><ROW><id>12558243</id><snippet>None</snippet></ROW><ROW><id>12558251</id><snippet>Yes: if not seq:
     if seq:

No: if len(seq)
    if not len(seq)
</snippet></ROW><ROW><id>12558304</id><snippet>import numpy as np
import scipy.ndimage as ndi
import matplotlib.pyplot as plt


# Make a small array for the demonstration.
# The ndimage.label() function treats 0 as the "background".
a = np.zeros((16, 16), dtype=int)
a[:6, :8] = 1
a[9:, :5] = 1
a[8:, 13:] = 2
a[5:13, 6:12] = 3

struct = ndi.generate_binary_structure(2, 2)
lbl, n = ndi.label(a, struct)

# Plot the original array.
plt.figure(figsize=(11, 4))
plt.subplot(1, n + 1, 1)
plt.imshow(a, interpolation='nearest')
plt.title("Original")
plt.axis('off')

# Plot the isolated features found by label().
for i in range(1, n + 1):
    # Make an array of zeros the same shape as `a`.
    feature = np.zeros_like(a, dtype=int)

    # Set the elements that are part of feature i to 1.
    # Feature i consists of elements in `lbl` where the value is i.
    # This statement uses numpy's "fancy indexing" to set the corresponding
    # elements of `feature` to 1.
    feature[lbl == i] = 1

    # Make an image plot of the feature.
    plt.subplot(1, n + 1, i + 1)
    plt.imshow(feature, interpolation='nearest', cmap=plt.cm.copper)
    plt.title("Feature {:d}".format(i))
    plt.axis('off')

plt.show()
</snippet></ROW><ROW><id>12558387</id><snippet>valx=float(input("What is/was your original purchase price?"))
</snippet></ROW><ROW><id>12558387</id><snippet>input</snippet></ROW><ROW><id>12558565</id><snippet>decorator</snippet></ROW><ROW><id>12558565</id><snippet>from decorator import decorator
@decorator
def dec(func, *a, **k):
    return func()

@dec
def f(arg1, arg2, arg3=1):
    return

import inspect
print inspect.getargspec(f)
</snippet></ROW><ROW><id>12558565</id><snippet>ArgSpec(args=['arg1', 'arg2', 'arg3'], varargs=None, keywords=None, defaults=(1,))
</snippet></ROW><ROW><id>12558565</id><snippet>__foo__</snippet></ROW><ROW><id>12558611</id><snippet>urllib2.urlopen("http://location/app/myroute/?" + jdata)
</snippet></ROW><ROW><id>12558611</id><snippet>application/json</snippet></ROW><ROW><id>12558611</id><snippet>headers = {}
headers['Content-Type'] = 'application/json'
jdata = json.dumps({"foo":"bar"})
urllib2.urlopen("http://location/app/myroute/", jdata, headers)
</snippet></ROW><ROW><id>12558611</id><snippet>@app.post('/myroute/')
def myroute():
    print request.json
</snippet></ROW><ROW><id>12558611</id><snippet># send GET request
urllib2.urlopen("http://location/app/myroute/?myvar=" + "test")

# access it 
@app.route('/myroute/')
def myroute():
    print request.GET['myvar'] # should print "test"
</snippet></ROW><ROW><id>12558659</id><snippet>itertools</snippet></ROW><ROW><id>12558659</id><snippet>import collections
from itertools import islice

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
</snippet></ROW><ROW><id>12558659</id><snippet>consume(imap(func, my_list), None) # On python 3 use map
</snippet></ROW><ROW><id>12558710</id><snippet>-m</snippet></ROW><ROW><id>12558710</id><snippet>python package/__init__.py</snippet></ROW><ROW><id>12558710</id><snippet>sys.modules</snippet></ROW><ROW><id>12558710</id><snippet>sys</snippet></ROW><ROW><id>12558710</id><snippet>foo</snippet></ROW><ROW><id>12558710</id><snippet>sys.modules</snippet></ROW><ROW><id>12558710</id><snippet>["package.foo"]</snippet></ROW><ROW><id>12558710</id><snippet>package.foo</snippet></ROW><ROW><id>12558710</id><snippet>sys.modules["package"]</snippet></ROW><ROW><id>12558710</id><snippet>package/__init__.py</snippet></ROW><ROW><id>12558710</id><snippet>_</snippet></ROW><ROW><id>12558710</id><snippet>from package import *</snippet></ROW><ROW><id>12558894</id><snippet>.format(x*(z/100))</snippet></ROW><ROW><id>12558894</id><snippet>print</snippet></ROW><ROW><id>12558894</id><snippet>print ("Tip: ${}".format(x*(z/100)))
</snippet></ROW><ROW><id>12558894</id><snippet>x = float(input("What is/was the cost of the meal?"))
y = float(input("What is/was the sales tax?"))
z = float(input("What percentage tip would you like to leave?"))

print ("Original Food Charge: ${}"
.format(x))
print ("Sales Tax: ${}"
.format((y/100)*x))
print ("Tip: ${}"
.format(x*(z/100)))
print ("Total Charge For Food: ${}"
.format(x+((y/100)*x)+((z/100)*x)))
</snippet></ROW><ROW><id>12559477</id><snippet>capabilities</snippet></ROW><ROW><id>12559477</id><snippet>print driver.capabilities['version']
</snippet></ROW><ROW><id>12559678</id><snippet>pkill</snippet></ROW><ROW><id>12559678</id><snippet>pgrep</snippet></ROW><ROW><id>12559678</id><snippet>-j|--pidfile=</snippet></ROW><ROW><id>12559836</id><snippet>f = file("VTSave2.pkl", "rb")
</snippet></ROW><ROW><id>12559836</id><snippet>try:</snippet></ROW><ROW><id>12559836</id><snippet>file()</snippet></ROW><ROW><id>12559836</id><snippet>f = open("VTSave2.pkl", "rb")</snippet></ROW><ROW><id>12559853</id><snippet>#!/usr/bin/env ruby -KU

require 'cgi'

plist = `xattr -p com.apple.metadata:kMDItemFinderComment test.txt |
xxd -r -p | plutil -convert xml1 -o - -`
puts CGI.unescapeHTML(plist.scan(/&lt;string&gt;(.*?)&lt;\/string&gt;/m)[0][0])
</snippet></ROW><ROW><id>12559853</id><snippet>mdls -n kMDItemFinderComment</snippet></ROW><ROW><id>12559860</id><snippet>grouper</snippet></ROW><ROW><id>12559860</id><snippet>n</snippet></ROW><ROW><id>12559860</id><snippet>import itertools
def grouper(S, n):
    iterator = iter(S)
    while True:
        items = list(itertools.islice(iterator, n))
        if len(items) == 0:
            break
        yield items
</snippet></ROW><ROW><id>12559860</id><snippet>import glob, os, shutil
fnames = sorted(glob.glob('*asc.gz'))
for i, fnames in enumerate(grouper(fnames, 150)):
    dirname = 'batch%d' % i
    os.mkdir(dirname)
    for fname in fnames:
        shutil.move(fname, dirname)
</snippet></ROW><ROW><id>12560181</id><snippet>class Country(Base):    
    __tablename__ = country
</snippet></ROW><ROW><id>12560181</id><snippet>__table__ = country</snippet></ROW><ROW><id>12560382</id><snippet>twisted</snippet></ROW><ROW><id>12560382</id><snippet>reactor.adoptStreamPort</snippet></ROW><ROW><id>12560382</id><snippet>s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.setsockopt(socket.IPPROTO_IP, 24,1) 
s.bind((serverip, serverport))    
s.listen(1)
port = reactor.adoptStreamPort(
       s.fileno(), AF_INET, YourFactory())
</snippet></ROW><ROW><id>12560624</id><snippet>+</snippet></ROW><ROW><id>12560624</id><snippet>str</snippet></ROW><ROW><id>12560624</id><snippet>"file_" + str(i) + ".dat"
"file_%s.dat" % i
"file_{}.dat".format(i)
</snippet></ROW><ROW><id>12560624</id><snippet>with</snippet></ROW><ROW><id>12560624</id><snippet>import io
for i in xrange(10):
   with io.open("file_" + str(i) + ".dat", 'w', encoding='utf-8') as f:
       f.write(str(func(i))
</snippet></ROW><ROW><id>12560971</id><snippet># -- coding: utf-8 --
import io

with io.open('info', encoding='utf-8') as final:
    lines = final.readlines()

for line in lines:
    if line.strip() == u"Wykształcenie i praca": #error
        print "ok"
</snippet></ROW><ROW><id>12561003</id><snippet>put</snippet></ROW><ROW><id>12561003</id><snippet>get</snippet></ROW><ROW><id>12561003</id><snippet>get</snippet></ROW><ROW><id>12561003</id><snippet>callback</snippet></ROW><ROW><id>12561003</id><snippet>serverDataReceived</snippet></ROW><ROW><id>12561003</id><snippet>callback</snippet></ROW><ROW><id>12561003</id><snippet>callback</snippet></ROW><ROW><id>12561003</id><snippet>self.cli_queue.put(False)</snippet></ROW><ROW><id>12561003</id><snippet>def serverDataReceived(self, chunk):
        if chunk is False:
            self.cli_queue = None
            log.msg("Client: disconnecting from peer")
            self.factory.continueTrying = False
            self.transport.loseConnection()
</snippet></ROW><ROW><id>12561163</id><snippet>for</snippet></ROW><ROW><id>12561163</id><snippet>for line in open(filename):
    # do something with line
</snippet></ROW><ROW><id>12561163</id><snippet>str.split()</snippet></ROW><ROW><id>12561163</id><snippet>words = line.split()
</snippet></ROW><ROW><id>12561163</id><snippet>len(yourlist)</snippet></ROW><ROW><id>12561163</id><snippet>count = len(words)
</snippet></ROW><ROW><id>12561163</id><snippet>firsttwo = words[:2]
</snippet></ROW><ROW><id>12561163</id><snippet>if</snippet></ROW><ROW><id>12561163</id><snippet>import codecs
if line.startswith(codecs.BOM_UTF8):
    line = line[3:]
</snippet></ROW><ROW><id>12561163</id><snippet>line = line.decode('utf-8')
</snippet></ROW><ROW><id>12561163</id><snippet>codecs.open()</snippet></ROW><ROW><id>12561163</id><snippet>file = codecs.open(filename, encoding='utf-8')
</snippet></ROW><ROW><id>12561163</id><snippet>codecs.open()</snippet></ROW><ROW><id>12561163</id><snippet>.lstrip()</snippet></ROW><ROW><id>12561163</id><snippet>import codecs
BOM = codecs.BOM_UTF8.decode('utf8')
with codecs.open(filename, encoding='utf-8') as f:
    for line in f:
        line = line.lstrip(BOM)
</snippet></ROW><ROW><id>12561176</id><snippet>-sys.maxint + 1</snippet></ROW><ROW><id>12561176</id><snippet>sys.maxint</snippet></ROW><ROW><id>12561906</id><snippet>pip install PIL
</snippet></ROW><ROW><id>12561906</id><snippet>pip uninstall PIL
apt-get install libjpeg-dev
apt-get install zlib1g-dev
apt-get install libpng12-dev
pip install PIL
</snippet></ROW><ROW><id>12562000</id><snippet>transpose</snippet></ROW><ROW><id>12562000</id><snippet>.copy()</snippet></ROW><ROW><id>12562000</id><snippet>transposed</snippet></ROW><ROW><id>12562000</id><snippet>F</snippet></ROW><ROW><id>12562000</id><snippet>C</snippet></ROW><ROW><id>12562000</id><snippet>transposed = ndarray.transpose([1,2,0])</snippet></ROW><ROW><id>12562000</id><snippet>transposed.ravel()</snippet></ROW><ROW><id>12562000</id><snippet>reshape</snippet></ROW><ROW><id>12562000</id><snippet>ravel</snippet></ROW><ROW><id>12562000</id><snippet>transposed.flat()</snippet></ROW><ROW><id>12562210</id><snippet>frequency</snippet></ROW><ROW><id>12562210</id><snippet>emailLst</snippet></ROW><ROW><id>12562210</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>12562210</id><snippet>threading</snippet></ROW><ROW><id>12562407</id><snippet>.tostring()</snippet></ROW><ROW><id>12562407</id><snippet>from lxml import etree

print etree.tostring(node)
</snippet></ROW><ROW><id>12562925</id><snippet>twisted</snippet></ROW><ROW><id>12562925</id><snippet>from twisted.protocols.ftp import FTPFactory, FTPRealm
from twisted.cred.portal import Portal
from twisted.cred.checkers import AllowAnonymousAccess, FilePasswordDB
from twisted.internet import reactor

p = Portal(FTPRealm('./'),
           [AllowAnonymousAccess(), FilePasswordDB("pass.dat")])
f = FTPFactory(p)

reactor.listenTCP(21, f)
reactor.run()
</snippet></ROW><ROW><id>12563658</id><snippet>str(number).count("1")</snippet></ROW><ROW><id>12563780</id><snippet>@property
def nodes(self):
    return self._nodes

@nodes.setter
def _nodes_setter(self, nodes):    # FIXME: pyflakes
    ...
</snippet></ROW><ROW><id>12563909</id><snippet>a[n:m] = b
# is essentially* equivalent to
a = a[:n] + b + a[m:]
</snippet></ROW><ROW><id>12563909</id><snippet>a[n:m]</snippet></ROW><ROW><id>12563909</id><snippet>b</snippet></ROW><ROW><id>12563909</id><snippet>a = a[:n] + a[n:m] + a[m:]</snippet></ROW><ROW><id>12563909</id><snippet>id(a)</snippet></ROW><ROW><id>12563909</id><snippet>a=</snippet></ROW><ROW><id>12563909</id><snippet>a</snippet></ROW><ROW><id>12563909</id><snippet>a = [1,2]
#a[1:1] = [3,4,5]
a = a[:1] + [3,4,5] + a[1:]
#   [1]               [2]
[1, 3, 4, 5, 2]

a = [1,2]
#a[0:1] = [3,4,5]
a = a[:0] + [3,4,5] + a[1:]
#   []                [2]
[3, 4, 5, 2]
</snippet></ROW><ROW><id>12564091</id><snippet>(r'd/(\d+)/$', 'xiangwww.detail.views.detail'),
</snippet></ROW><ROW><id>12564091</id><snippet>(...)</snippet></ROW><ROW><id>12564353</id><snippet>&gt;&gt;&gt; from dateutil import relativedelta as rdelta
&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; d1 = date(2001,5,1)
&gt;&gt;&gt; d2 = date(2012,1,1)
&gt;&gt;&gt; rd = rdelta.relativedelta(d2,d1)
&gt;&gt;&gt; "{0.years} years and {0.months} months".format(rd)
'10 years and 8 months'
</snippet></ROW><ROW><id>12564429</id><snippet>def my_reverser(x):
  try:
    x_ = x[::-1]
  except TypeError:
    return x
  else:
    return x if len(x) == 1 else tuple(my_reverser(e) for e in x_)
</snippet></ROW><ROW><id>12564675</id><snippet>zc.buildout</snippet></ROW><ROW><id>12564675</id><snippet>setup.py</snippet></ROW><ROW><id>12564675</id><snippet>install_requires</snippet></ROW><ROW><id>12564675</id><snippet>versions</snippet></ROW><ROW><id>12564675</id><snippet>foo</snippet></ROW><ROW><id>12564675</id><snippet>bar</snippet></ROW><ROW><id>12564675</id><snippet>baz</snippet></ROW><ROW><id>12564675</id><snippet>[buildout]
parts = foo

[foo]
recipe = zc.recipe.egg
eggs = foo
</snippet></ROW><ROW><id>12564675</id><snippet>setup.py</snippet></ROW><ROW><id>12564675</id><snippet>foo</snippet></ROW><ROW><id>12564675</id><snippet>install_dependencies = ['bar', 'baz']</snippet></ROW><ROW><id>12564675</id><snippet>bar</snippet></ROW><ROW><id>12564675</id><snippet>baz</snippet></ROW><ROW><id>12564675</id><snippet>[buildout]
parts = foo
versions = versions

[foo]
recipe = zc.recipe.egg
eggs = foo

[versions]
foo = 1.2.1
bar = 0.2
baz = 3.0b1
</snippet></ROW><ROW><id>12564813</id><snippet>numpy.interp</snippet></ROW><ROW><id>12564813</id><snippet>numpy.interp(3.,y,x)  #1.5
</snippet></ROW><ROW><id>12564847</id><snippet>theta1</snippet></ROW><ROW><id>12564847</id><snippet>theta2</snippet></ROW><ROW><id>12564851</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>12564851</id><snippet>def myComplicatedFunction(status):
    """Here I have a brief description

    :param status: explanation

    :returns: explanation

    &gt;&gt;&gt; myComplicatedFunction('status value')
    {'foo': 2, 'bar': -400}

    """
    # Code

    return statistics
</snippet></ROW><ROW><id>12565135</id><snippet>file:///path/to/git/wc/</snippet></ROW><ROW><id>12565315</id><snippet>urlparse</snippet></ROW><ROW><id>12565315</id><snippet>rfc3987</snippet></ROW><ROW><id>12565315</id><snippet>from rfc3987 import parse

parse('http://fdasdf.fdsfîășîs.fss/ăîăî', rule='IRI')
</snippet></ROW><ROW><id>12565487</id><snippet>repeats = int(raw_input("How many repetitions? "))
for i in range(repeats):
    print "I will read a Python tutorial!"
</snippet></ROW><ROW><id>12565753</id><snippet>lnew = lold[:]
</snippet></ROW><ROW><id>12565900</id><snippet>return</snippet></ROW><ROW><id>12565900</id><snippet>self.response.out.write(template.render(path, template_values))
return
...
</snippet></ROW><ROW><id>12565924</id><snippet>scipy.optimize.fsolve</snippet></ROW><ROW><id>12565924</id><snippet>x0 = array(x0, ndmin=1)</snippet></ROW><ROW><id>12565924</id><snippet>fsolve</snippet></ROW><ROW><id>12565924</id><snippet>ndarray</snippet></ROW><ROW><id>12565924</id><snippet>x_guess = array(y, ndmin=1)</snippet></ROW><ROW><id>12565924</id><snippet>ndarray</snippet></ROW><ROW><id>12565924</id><snippet>fsolve</snippet></ROW><ROW><id>12565924</id><snippet>def fsolve(func, x0, args=(), fprime=None, full_output=0,
           col_deriv=0, xtol=1.49012e-8, maxfev=0, band=None,
           epsfcn=0.0, factor=100, diag=None):
    """
    Find the roots of a function.

    Return the roots of the (non-linear) equations defined by
    ``func(x) = 0`` given a starting estimate.

    Parameters
    ----------
    func : callable f(x, *args)
        A function that takes at least one (possibly vector) argument.
    x0 : ndarray
        The starting estimate for the roots of ``func(x) = 0``.

    ----SNIP----

    Returns
    -------
    x : ndarray
        The solution (or the result of the last iteration for
        an unsuccessful call).

    ----SNIP----
</snippet></ROW><ROW><id>12566244</id><snippet>timedelta</snippet></ROW><ROW><id>12566244</id><snippet>s = "3 days ago"
parsed_s = [s.split()[:2]]
time_dict = dict((fmt,float(amount)) for amount,fmt in parsed_s)
dt = datetime.timedelta(**time_dict)
past_time = datetime.datetime.now() - dt
</snippet></ROW><ROW><id>12566244</id><snippet>dateutil</snippet></ROW><ROW><id>12566244</id><snippet>relativedelta</snippet></ROW><ROW><id>12566244</id><snippet>months</snippet></ROW><ROW><id>12566244</id><snippet>years</snippet></ROW><ROW><id>12566245</id><snippet>from contextlib import contextmanager

filetypes = [('.gz', gzip.GzipFile, (IOError, MaybeSomeGzipExceptions)), 
             ('.x', xCompressLib.xCompressFile, (IOError, MaybeSomeXCompressExceptions))]

@contextmanager
def open_compressed(fn):
    f = None
    try:
        for ext, cls, exs in filetypes:
            try:
                f = cls(fn + ext)
            except exs:
                pass
            else:
                break
        yield f
    finally:
        if f is not None:
            f.close()

with open_compressed(fn) as f:
    result = "some default value" if f is None else process(f)
</snippet></ROW><ROW><id>12566245</id><snippet>filetypes = [('.gz', gzip.GzipFile, (IOError, MaybeSomeGzipExceptions)), 
             ('.x', xCompressLib.xCompressFile, (IOError, MaybeSomeXCompressExceptions))]

class UnknownCompressionFormat(Exception):
    pass

def open_compressed(fn):
    for ext, cls, exs in filetypes:
        try:
            return cls(fn + ext)
        except exs:
            pass
    raise UnknownCompressionFormat

try:
    with open_compressed(fn) as f:
        result = process(f)
except UnknownCompressionFormat:
    result = "some default value"
</snippet></ROW><ROW><id>12566853</id><snippet>virtualenv</snippet></ROW><ROW><id>12566853</id><snippet>-p path/to/python/version</snippet></ROW><ROW><id>12566853</id><snippet>--python=path/to/version</snippet></ROW><ROW><id>12566853</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>12566853</id><snippet>virtualenv</snippet></ROW><ROW><id>12567130</id><snippet>python-bottle</snippet></ROW><ROW><id>12567130</id><snippet>pip</snippet></ROW><ROW><id>12567204</id><snippet>through</snippet></ROW><ROW><id>12567204</id><snippet>Extra fields on many-to-many relationships

class Person(models.Model):
    name = models.CharField(max_length=128)

    def __unicode__(self):
        return self.name

class Group(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(Person, through='Membership')

    def __unicode__(self):
        return self.name

class Membership(models.Model):
    person = models.ForeignKey(Person)
    group = models.ForeignKey(Group)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)
</snippet></ROW><ROW><id>12567333</id><snippet>A = 200
B = -140
C = 400
D = -260

v1, v2, v3, v4 = [x if x &gt; 0 else 0 for x in (A, B, C, D)]
</snippet></ROW><ROW><id>12567333</id><snippet>max</snippet></ROW><ROW><id>12567333</id><snippet>v1, v2, v3, v4 = [max(x, 0) for x in (A, B, C, D)]
</snippet></ROW><ROW><id>12567333</id><snippet>values = [200, -140, 400, -260]
values = [max(x, 0) for x in values]
</snippet></ROW><ROW><id>12567474</id><snippet>AddPage()</snippet></ROW><ROW><id>12567474</id><snippet>wxListbook</snippet></ROW><ROW><id>12567474</id><snippet>makePanel</snippet></ROW><ROW><id>12567558</id><snippet>370</snippet></ROW><ROW><id>12567558</id><snippet>432</snippet></ROW><ROW><id>12567558</id><snippet>433</snippet></ROW><ROW><id>12567558</id><snippet>_scaleFactor</snippet></ROW><ROW><id>12567558</id><snippet>2</snippet></ROW><ROW><id>12567558</id><snippet>_scaleFactor</snippet></ROW><ROW><id>12568188</id><snippet>replace</snippet></ROW><ROW><id>12568188</id><snippet>count</snippet></ROW><ROW><id>12568188</id><snippet>translate=translate.replace(ch,syl1,1)
break # finish the for loop for syl1
</snippet></ROW><ROW><id>12568188</id><snippet>syl1</snippet></ROW><ROW><id>12568188</id><snippet>translate=translate.replace(ch,syl2,1)
break # finish the for loop
</snippet></ROW><ROW><id>12568366</id><snippet>   def render_string(self, template_name, **kwargs):
        """Generate the given template with the given arguments.

        We return the generated string. To generate and write a template
        as a response, use render() above.
        """
        # If no template_path is specified, use the path of the calling file
        template_path = self.get_template_path()
        if not template_path:
            frame = sys._getframe(0)
            web_file = frame.f_code.co_filename
            while frame.f_code.co_filename == web_file:
                frame = frame.f_back
            template_path = os.path.dirname(frame.f_code.co_filename)
        with RequestHandler._template_loader_lock:
            if template_path not in RequestHandler._template_loaders:
                loader = self.create_template_loader(template_path)
                RequestHandler._template_loaders[template_path] = loader
            else:
                loader = RequestHandler._template_loaders[template_path]
        t = loader.load(template_name)
        args = dict(
            handler=self,
            request=self.request,
            current_user=self.current_user,
            locale=self.locale,
            _=self.locale.translate,
            static_url=self.static_url,
            xsrf_form_html=self.xsrf_form_html,
            reverse_url=self.application.reverse_url
        )
        args.update(self.ui)
        args.update(kwargs)
        return t.generate(**args)
</snippet></ROW><ROW><id>12568366</id><snippet>_=self.locale.translate</snippet></ROW><ROW><id>12568588</id><snippet>.pyc</snippet></ROW><ROW><id>12568588</id><snippet>.py</snippet></ROW><ROW><id>12568588</id><snippet>.pyc</snippet></ROW><ROW><id>12568588</id><snippet>find . -name \*.pyc -delete
</snippet></ROW><ROW><id>12568588</id><snippet>python -m compileall .
</snippet></ROW><ROW><id>12568681</id><snippet>set</snippet></ROW><ROW><id>12568681</id><snippet>intersection = set(list1) &amp; set(list2)
</snippet></ROW><ROW><id>12568681</id><snippet>intersection = set(list1).intersection(list2)
</snippet></ROW><ROW><id>12569061</id><snippet>for attr, val in my_dict.items():
    setattr(person, attr, val)
</snippet></ROW><ROW><id>12569061</id><snippet>my_dict</snippet></ROW><ROW><id>12569061</id><snippet>person</snippet></ROW><ROW><id>12569061</id><snippet>key_list = ['name', 'surname', 'age', 'hair_color']
for attr in key_list:
    setattr(person, attr, my_dict[attr])
</snippet></ROW><ROW><id>12569143</id><snippet>__init__</snippet></ROW><ROW><id>12569143</id><snippet>__init__</snippet></ROW><ROW><id>12569143</id><snippet>__init__</snippet></ROW><ROW><id>12569143</id><snippet>__slots__</snippet></ROW><ROW><id>12569143</id><snippet>__init__</snippet></ROW><ROW><id>12569143</id><snippet>AttributeError</snippet></ROW><ROW><id>12569405</id><snippet>def jsonify(self):
    return { 'Class Whatever':{
              'data1':self.data1,
               'data2':self.data2,
               ...
                               }

     }
</snippet></ROW><ROW><id>12569490</id><snippet>mr_job = MRYourJob(args=["datalines.txt"])
</snippet></ROW><ROW><id>12569641</id><snippet>rootAlphaBeta</snippet></ROW><ROW><id>12569641</id><snippet>alpha</snippet></ROW><ROW><id>12569867</id><snippet>csv.reader</snippet></ROW><ROW><id>12569867</id><snippet>with open('myFile', 'rb') as csvfile:
     reader = csv.reader(filter_line(line) for line in csvfile)
     for row in reader:
         # my logic here
</snippet></ROW><ROW><id>12569991</id><snippet>import android #import android module
droid = android.Android() #class instantation
droid.bluethoothMakeDiscoverable() #make your device visible
</snippet></ROW><ROW><id>12570040</id><snippet>type</snippet></ROW><ROW><id>12570040</id><snippet>__module__</snippet></ROW><ROW><id>12570040</id><snippet>&gt;&gt;&gt; import numpy as np
a = np.array([1, 2, 3])
&gt;&gt;&gt; type(a)
&lt;type 'numpy.ndarray'&gt;
&gt;&gt;&gt; type(a).__module__
'numpy'
&gt;&gt;&gt; type(a).__module__ == np.__name__
True
</snippet></ROW><ROW><id>12570410</id><snippet>from pandas import *

P1Channels = data.filter(regex="P1")
P1Sum = P1Channels.sum(axis=1)
</snippet></ROW><ROW><id>12570419</id><snippet>import sys
from multiprocessing import Pool
def doit(n):
  print n
if __name__ == "__main__":
  procs = int(sys.argv[1])
  iters = int(float(sys.argv[2]))
  p = Pool(processes=procs)
  for points in p.map(doit, [xrange(int(iters))] * procs):
    pass
</snippet></ROW><ROW><id>12570419</id><snippet>$ ./multitest.py 2 1E8
xrange(100000000)
xrange(100000000)
$ ./multitest.py 2 1E9
xrange(1000000000)
xrange(1000000000)
$ ./multitest.py 2 1E10
xrange(1410065408)
xrange(1410065408)
</snippet></ROW><ROW><id>12570419</id><snippet>pickle</snippet></ROW><ROW><id>12570419</id><snippet>multiprocessing</snippet></ROW><ROW><id>12570419</id><snippet>&gt;&gt;&gt; pickle.dumps(xrange(int(1E9)))
'c__builtin__\nxrange\np0\n(I0\nI1000000000\nI1\ntp1\nRp2\n.'
&gt;&gt;&gt; pickle.dumps(xrange(int(1E10)))
'c__builtin__\nxrange\np0\n(I0\nI1410065408\nI1\ntp1\nRp2\n.'
</snippet></ROW><ROW><id>12570419</id><snippet>I1000000000</snippet></ROW><ROW><id>12570419</id><snippet>int(iters)</snippet></ROW><ROW><id>12570419</id><snippet>xrange(int(iters))</snippet></ROW><ROW><id>12570419</id><snippet>calculate_pi</snippet></ROW><ROW><id>12570419</id><snippet>xrange</snippet></ROW><ROW><id>12570419</id><snippet>xrange</snippet></ROW><ROW><id>12570419</id><snippet>import sys
from multiprocessing import Pool

def doit(n):
  print xrange(n)

if __name__ == "__main__":
    procs = int(sys.argv[1])
    iters = int(float(sys.argv[2]))
    p = Pool(processes=procs)
    for points in p.map(doit, [iters] * procs):
      pass
</snippet></ROW><ROW><id>12570419</id><snippet>$ ./multitest.py 2 1E10
xrange(10000000000)
xrange(10000000000)
</snippet></ROW><ROW><id>12570419</id><snippet>$ ./multitest.py 2 1E100
OverflowError: Python int too large to convert to C long
</snippet></ROW><ROW><id>12570419</id><snippet>iters = int(float(sys.argv[2]))</snippet></ROW><ROW><id>12570419</id><snippet>iters = float(sys.argv[2])</snippet></ROW><ROW><id>12570419</id><snippet>int(iters)</snippet></ROW><ROW><id>12570419</id><snippet>iters</snippet></ROW><ROW><id>12570419</id><snippet>total</snippet></ROW><ROW><id>12570419</id><snippet>total_in / total</snippet></ROW><ROW><id>12570419</id><snippet>1E23</snippet></ROW><ROW><id>12570467</id><snippet>ind_dict = dict((k,i) for i,k in enumerate(NNSRCfile['datetimenew']))
</snippet></ROW><ROW><id>12570467</id><snippet>inter = set( ind_dict.values() ).intersection(catdate)
</snippet></ROW><ROW><id>12570467</id><snippet>indices = [ ind_dict[x] for x in inter ]
</snippet></ROW><ROW><id>12570521</id><snippet>abort</snippet></ROW><ROW><id>12570521</id><snippet>except SystemExit</snippet></ROW><ROW><id>12570592</id><snippet>@route('/upload')
def upload():
    #Upload-Form
    return static_file('upload_form.html', root='html')

@post('/load_from_file')
def load_from_file():
    #Actual Uploading
    if request.POST.Upload == 'Submit Query':
        try:
            data = request.POST.Filedata.file
            filename = request.POST.Filename
            filepath = os.path.join(settings.FOLDERS["TEMP_WORKING"], filename)
            with open(filepath, "wb") as file_object:
                while True:
                    datachunk = data.file.read(1024)
                    if not datachunk:
                        break            
                    file_object.write(datachunk)
            process_files_upload(filepath)            
        except:
            print(traceback.format_exc())
        #Check if only uploaded or already finished
        return "Upload Finished"
    else:
        redirect('/upload')
</snippet></ROW><ROW><id>12571366</id><snippet>&gt;&gt;&gt; im.show()</snippet></ROW><ROW><id>12571537</id><snippet>os.walk</snippet></ROW><ROW><id>12571537</id><snippet>file_paths = [os.path.join(root, d, f) for root,dirs,files in os.walk('.') for d in dirs for f in files]
for path in file_paths:
    print path
    shutil.copy(path, target)
</snippet></ROW><ROW><id>12571563</id><snippet>if t1[0] &gt; t2[0] or t1[0] == t2[0]:
    return [t1[0], '#'+t1[1], t1[2]]
return [t2[0], t2[1], '#'+t2[2]]
</snippet></ROW><ROW><id>12571741</id><snippet>superlance</snippet></ROW><ROW><id>12571741</id><snippet>memmon</snippet></ROW><ROW><id>12571741</id><snippet>memmon</snippet></ROW><ROW><id>12571741</id><snippet>memmon</snippet></ROW><ROW><id>12571741</id><snippet>[eventlistener:memmon]
command=memmon -a 200MB
events=TICK_60
</snippet></ROW><ROW><id>12571815</id><snippet>__eq__</snippet></ROW><ROW><id>12571815</id><snippet>in</snippet></ROW><ROW><id>12571815</id><snippet>def __eq__(self, other):
    if not isinstance(other, self.__class__):
        return NotImplemented
    return self.url == other.url and self.unit == other.unit
</snippet></ROW><ROW><id>12571815</id><snippet>__ne__</snippet></ROW><ROW><id>12571815</id><snippet>def __ne__(self, other):
    return not self.__eq__(other)
</snippet></ROW><ROW><id>12571815</id><snippet>__hash__</snippet></ROW><ROW><id>12571815</id><snippet>in</snippet></ROW><ROW><id>12571815</id><snippet>__hash__</snippet></ROW><ROW><id>12571815</id><snippet>def __hash__(self):
    return hash((self.url, self.unit))
</snippet></ROW><ROW><id>12571894</id><snippet>for each in People.objects.all()[:3]:
    item_salary=Salary()
    item_salary.id_of_people_id=each.id
    item_salary.save()
</snippet></ROW><ROW><id>12571909</id><snippet>Subprofile</snippet></ROW><ROW><id>12571909</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>12571909</id><snippet>def select_subprofile(request):
   if request.method == 'POST':
      form = SubProfileSelectForm(request)
      if form.is_valid():   
          subprofile = form.cleaned_data['subprofile']
          url = '%s?subprofile' % (reverse('homepage'), subprofile) 
          return redirect(url)  # the redirect is something like '/homepage?subprofile=123'
   else:
      form = SubProfileSelectForm()
   return render(request, 'myapp/subprofile_select.html', {'form':form})
</snippet></ROW><ROW><id>12571909</id><snippet>SubProfile</snippet></ROW><ROW><id>12571909</id><snippet>request.user</snippet></ROW><ROW><id>12571909</id><snippet>class SubProfileMiddleware(object):

    def process_request(self, request):
        subprofile = request.GET.get('subprofile', None)
        if subprofile:
            # it's important to check for user here or malicious users will be
            # able to use Subprofiles of other users
            subprofile = Subprofile.objects.filter(user=request.user, id=subprofile)
            # This can also be written 
            # subprofile = request.user.subprofile_set.filter(id=subprofile)
            if not subprofile:
                # this is a malicious user
                raise Http403
            else:
                request.user.subprofile = subprofile
        else:
             # set default subprofile
             request.user.subprofile = self.user.default_subprofile
</snippet></ROW><ROW><id>12571909</id><snippet>SubProfile</snippet></ROW><ROW><id>12571909</id><snippet>subprofile</snippet></ROW><ROW><id>12571909</id><snippet>request.user</snippet></ROW><ROW><id>12571909</id><snippet>subprofile=123</snippet></ROW><ROW><id>12571909</id><snippet>Organization</snippet></ROW><ROW><id>12571909</id><snippet>post_on_organization_wall(subprofile, message, organization)</snippet></ROW><ROW><id>12571909</id><snippet>def organization_wall_post(request, organization):
    organization = Organization.objects.get_object_or_404(organization)
    if request.method == 'POST':
        form = MessageForm(request.POST)
        if form.is_valid():
             post_on_organization_wall(request.user.subprofile, message, organisation)
    else:
        form = MessageForm()
    return render(request, 'organisation/wall_post.html', {'form': form})
</snippet></ROW><ROW><id>12571909</id><snippet>{% url %}</snippet></ROW><ROW><id>12571909</id><snippet>url</snippet></ROW><ROW><id>12572007</id><snippet>self</snippet></ROW><ROW><id>12572007</id><snippet>Foo</snippet></ROW><ROW><id>12572007</id><snippet>list_one</snippet></ROW><ROW><id>12572007</id><snippet>self</snippet></ROW><ROW><id>12572007</id><snippet>self</snippet></ROW><ROW><id>12572007</id><snippet>list_one</snippet></ROW><ROW><id>12572007</id><snippet>class Foo(object):
    def __init__(self):
        self.list_one = [1, 2, 3]

class Bar(Foo):
    def init(self):
        super(Bar, self).__init__()
        self.list_two = self.list_one + [4, 5, 6]
        # if you want to discard list_one, you can, but that seems wrong somehow
        # del self.list_one
</snippet></ROW><ROW><id>12572007</id><snippet>&gt;&gt;&gt; def foo(x):
...     a = x
...     def bar():
...         print a
...     return bar
... 
&gt;&gt;&gt; bar1 = foo(5)
&gt;&gt;&gt; bar2 = foo(6)
&gt;&gt;&gt; bar1()
5
&gt;&gt;&gt; bar2()
6
</snippet></ROW><ROW><id>12572007</id><snippet>bar</snippet></ROW><ROW><id>12572007</id><snippet>a</snippet></ROW><ROW><id>12572007</id><snippet>foo(5)</snippet></ROW><ROW><id>12572007</id><snippet>foo(6)</snippet></ROW><ROW><id>12572028</id><snippet>def send_mail(modeladmin, request, queryset):
    for msg in queryset:
        send_mail('People information', msg.name, msg.price, msg.email,
    [msg.email])
send_mail.short_description = u'Send e-mail to selected objs'

class PeopleAdmin(admin.ModelAdmin):
    list_display = ('name', 'email')
    actions = (send_mail)
</snippet></ROW><ROW><id>12572031</id><snippet>zlib</snippet></ROW><ROW><id>12572031</id><snippet>import zlib

def stream_decompress(stream):
    dec = zlib.decompressobj(-zlib.MAX_WBITS)  # same as gzip module
    for chunk in stream:
        rv = dec.decompress(chunk)
        if rv:
            yield rv
</snippet></ROW><ROW><id>12572031</id><snippet>for data in stream_decompress(k):
    # do something with the decompressed data
</snippet></ROW><ROW><id>12572084</id><snippet>svnlook filesize</snippet></ROW><ROW><id>12572084</id><snippet>svnlook filesize repo path</snippet></ROW><ROW><id>12572084</id><snippet>path</snippet></ROW><ROW><id>12572084</id><snippet>svnlook filesize repo path -t argv[2]</snippet></ROW><ROW><id>12572084</id><snippet>#!/usr/bin/env python

from sys import argv, stderr, exit
from subprocess import check_output

repo = argv[1]
transaction = argv[2]

def path_history(path, limit=5):
    path = '/%s' % path
    cmd = ('svnlook', 'history', '-l', str(limit), repo, path)
    out = check_output(cmd).splitlines()[2:]

    for rev, _path in (i.split() for i in out):
        if _path == path:
            yield rev

def commit_changes():
    cmd = ('svnlook', 'changed', repo, '-t', transaction)
    out = check_output(cmd).splitlines()

    for line in out:
        yield line.split()

def filesize(path, rev=None, trans=None):
    cmd = ['svnlook', 'filesize', repo, path]
    if rev:     cmd.extend(('-r', str(rev)))
    elif trans: cmd.extend(('-t', str(trans)))

    out = check_output(cmd)
    return out.rstrip()

def filesize_catwc(path, rev=None, trans=None):
    '''A `svnlook filesize` substitute for older versions of svn. 
    Uses `svnlook cat ... | wc -c` and should be very inefficient
    for large files.'''

    arg = '-r %s' % rev if rev else '-t %s' % trans
    cmd = 'svnlook cat %s %s %s | wc -c' % (arg, repo, path)

    out = check_output(cmd, shell=True)
    return out.rstrip()


for status, path in commit_changes():
    if status in ('A', 'M', 'U'):
        # get the last 5 revisions of the added/modified path
        revisions = list(path_history(path))
        headrev = revisions[0]

        oldsize = filesize(path, rev=headrev)
        newsize = filesize(path, trans=transaction)
</snippet></ROW><ROW><id>12572218</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>12572218</id><snippet>$ /usr/bin/python2.7
Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12572294</id><snippet>from scipy.io import savemat
from numpy import *

data={'t0': array([], dtype=float64), 't1': array([], dtype=float64), 
 't2': array([], dtype=float64), 't3': array([], dtype=float64), 
 't4': array([], dtype=float64), 't5': array([], dtype=float64), 
 't6': array([], dtype=float64), 't7': array([], dtype=float64), 
 't8': array([], dtype=float64), 't9': array([], dtype=float64)}

# print data
savemat('test.mat', data, oned_as='row')
</snippet></ROW><ROW><id>12572294</id><snippet>traces = load('test.mat'); 
</snippet></ROW><ROW><id>12572391</id><snippet>my_string="hello python world , i'm a beginner "
print my_string.split("world",1)[1] 
</snippet></ROW><ROW><id>12572499</id><snippet>ImportError: DLL load failed: %1 is not a valid Win32 application.
</snippet></ROW><ROW><id>12572522</id><snippet>\b</snippet></ROW><ROW><id>12572522</id><snippet>0x08</snippet></ROW><ROW><id>12572522</id><snippet>&gt;&gt;&gt; print(re.match(r'(?!455\b)455', '455'))
None
</snippet></ROW><ROW><id>12572767</id><snippet>A</snippet></ROW><ROW><id>12572767</id><snippet>B</snippet></ROW><ROW><id>12572767</id><snippet>A</snippet></ROW><ROW><id>12572767</id><snippet>B</snippet></ROW><ROW><id>12572767</id><snippet>A</snippet></ROW><ROW><id>12572767</id><snippet>B</snippet></ROW><ROW><id>12572767</id><snippet>class A(object):
    def __init__(self, b):
        self.b = b
    # .. some methods that reference self.b
</snippet></ROW><ROW><id>12572852</id><snippet>def replacer(data):
    return re.sub(r'(?&lt;=_)(0+)', lambda m: m.group(0).replace('0', '#'), data)

files = ('s8_000.tif', 's9_00.tif', 's10_000.tif', 's11_00.tif')
map(replacer, files)
print(files)
</snippet></ROW><ROW><id>12572852</id><snippet>?&lt;=</snippet></ROW><ROW><id>12572852</id><snippet>0+</snippet></ROW><ROW><id>12572852</id><snippet>0</snippet></ROW><ROW><id>12572852</id><snippet>#</snippet></ROW><ROW><id>12573055</id><snippet>"""
Convert from rectangular (x,y) to polar (r,w)
    r = sqrt(x^2 + y^2)
    w = arctan(y/x) = [-\pi,\pi]
"""
def polar(x, y):        # w in radians
    from math import hypot, atan2, pi
    return hypot(x, y), atan2(y, x)

model_features = []
model = params(model_body_contour)    # return tuple (center_x, center_y, area)
for contour in model_feature_contours:
    f = params(countour)
    range, angle = polar(f[0]-model[0], f[1]-model[1])
    model_features.append((angle, range, f[2]))

image_features = []
image = params(image_body_contour)
for contour in image_feature_contours:
    f = params(countour)
    range, angle = polar(f[0]-image[0], f[1]-image[1])
    image_features.append((angle, range, f[2]))

# sort image_features and model_features by angle, range
#
# correlate image_features against model_features across angle offsets
#    rotation = angle offset of max correlation
#    scale = average(model areas and ranges) / average(image areas and ranges)
</snippet></ROW><ROW><id>12573062</id><snippet>Accept-Charset</snippet></ROW><ROW><id>12573062</id><snippet>'Accept-Charset': 'utf-8;q=0.7,*;q=0.3',
</snippet></ROW><ROW><id>12573062</id><snippet>response.read()</snippet></ROW><ROW><id>12573062</id><snippet>the_page = response.read().decode('utf-8')
</snippet></ROW><ROW><id>12573062</id><snippet> … Self Care&lt;/span&gt;
                                            &lt;a href="#local" onclick="dvSearch.ToggleInterests(…
</snippet></ROW><ROW><id>12573062</id><snippet>Accept-Charset</snippet></ROW><ROW><id>12573062</id><snippet>response = urllib2.urlopen(req)
charset = response.info().getencoding()
the_page = response.read().decode(charset)
</snippet></ROW><ROW><id>12573078</id><snippet>global empty_string</snippet></ROW><ROW><id>12573078</id><snippet>def sample(x):
    global empty_string
    empty_string = empty_string + 'alpha'
    return x
</snippet></ROW><ROW><id>12573209</id><snippet>def lookup(index,KEYWORDS):
    kw = KEYWORDS.split()
    if len(kw) == 1:
        return [site[0] for site in index[kw[0]]]
    else:
        positions = {}
        result = []
        kw = KEYWORDS.split()
        for kword in kw:
            for site in index[kword]:
                positions[(kword,site[0])]=site[1]
        for i in range(0,len(kw)-1):
            cur_urls = [site[0] for site in index[kw[i]]]
            next_urls = [site[0] for site in index[kw[i+1]]]
            if i == 0:
                result = cur_urls
            for url in cur_urls:
                if url in next_urls:
                    if not (positions[kw[i+1],url]-positions[kw[i],url]) == 1:
                        result.remove(url)
                else:
                    if url in result:
                        result.remove(url)
        return result
</snippet></ROW><ROW><id>12573291</id><snippet>shelf = dict([  (items,0) for items in range(1,6)  ])
for x in range(3):
    rack[x+1]=shelf 
</snippet></ROW><ROW><id>12573291</id><snippet>def initialize(self, rack):
    for x in range(3):
        rack[x+1] = dict((items,0) for items in range(1,6))
    return rack
</snippet></ROW><ROW><id>12573291</id><snippet>def initialize(self, rack):
    rack.update({
        x + 1 : { item : 0 for item in range(1, 6) } for x in range(3)
    })
    return rack
</snippet></ROW><ROW><id>12573365</id><snippet>import cv, sys

cap = cv.CaptureFromCAM(0)
if not cap:
    sys.stdout.write("failed CaptureFromCAM")

while True :
    if not cv.GrabFrame(cap) : 
        break

    frame = cv.RetrieveFrame(cap)
    sys.stdout.write( frame.tostring() )
</snippet></ROW><ROW><id>12573365</id><snippet>python capture.py | ffmpeg -f rawvideo -pix_fmt bgr24 -s 640x480 -r 30 -i - -an -f avi -r 30 foo.avi
</snippet></ROW><ROW><id>12573365</id><snippet>import cv, sys

cap = cv.CaptureFromCAM(0)   # 0 is for /dev/video0
if not cap:
    sys.stdout.write("!!! Failed CaptureFromCAM")
    sys.exit(1)

frame = cv.RetrieveFrame(cap)
if not frame: 
    sys.stdout.write("!!! Failed to retrieve first frame")
    sys.exit(1)

# Unfortunately, the following instruction returns 0
#fps = cv.GetCaptureProperty(cap, cv.CV_CAP_PROP_FPS)
fps = 25.0      # so we need to hardcode the FPS
print "Recording at: ", fps, " fps"  

frame_size = cv.GetSize(frame)
print "Video size: ", frame_size  

writer = cv.CreateVideoWriter("out.mp4", cv.CV_FOURCC('F', 'M', 'P', '4'), fps, frame_size, True)
if not writer:
    sys.stdout.write("!!! Error in creating video writer")
    sys.exit(1)


while True :
    if not cv.GrabFrame(cap) : 
        break
    frame = cv.RetrieveFrame(cap)
    cv.WriteFrame(writer, frame)

cv.ReleaseVideoWriter(writer)
cv.ReleaseCapture(cap)
</snippet></ROW><ROW><id>12573647</id><snippet>re</snippet></ROW><ROW><id>12573647</id><snippet>import re
def replace(s):
     return re.sub('foo(.*)', 'foo\1 bar', s)
replace('foo something') #'foo something bar'
</snippet></ROW><ROW><id>12573884</id><snippet>kwargs['to'] = 'Company'
</snippet></ROW><ROW><id>12573884</id><snippet>kwargs['to'] = 'crm.Company'
</snippet></ROW><ROW><id>12573939</id><snippet>mayavi</snippet></ROW><ROW><id>12573939</id><snippet>tvtk</snippet></ROW><ROW><id>12573939</id><snippet>vtk</snippet></ROW><ROW><id>12573939</id><snippet>Traits</snippet></ROW><ROW><id>12573939</id><snippet>ParaView</snippet></ROW><ROW><id>12573939</id><snippet>vtk</snippet></ROW><ROW><id>12573939</id><snippet>ndarrays</snippet></ROW><ROW><id>12573939</id><snippet>&gt;&gt;&gt; from vtk.util import numpy_support as npvtk
&gt;&gt;&gt; vtkarray = npvtk.numpy_to_vtk(numpy_array)
&gt;&gt;&gt; numpy_array = npvtk.vtk_to_numpy(vtkarray)
</snippet></ROW><ROW><id>12573939</id><snippet>vtk</snippet></ROW><ROW><id>12574048</id><snippet>vector1.data</snippet></ROW><ROW><id>12574048</id><snippet>vector1.multiply(vector1)</snippet></ROW><ROW><id>12574048</id><snippet>.sum</snippet></ROW><ROW><id>12574048</id><snippet>vector1.dot(vector1.T)</snippet></ROW><ROW><id>12574117</id><snippet>wrapper</snippet></ROW><ROW><id>12574117</id><snippet>f</snippet></ROW><ROW><id>12574117</id><snippet>def binop_to_multiop(f):
    @functools.wraps(f)
    def wrapper(*args, **kwds):
        if len(args) == 1: return args[0]
        return f(args[0], wrapper(*args[1:], **kwds), **kwds)
    return wrapper
</snippet></ROW><ROW><id>12574117</id><snippet>#fails</snippet></ROW><ROW><id>12574117</id><snippet>(a+b)+c = a+(b+c)</snippet></ROW><ROW><id>12574117</id><snippet>@binop_to_multiop
def sub(a, b):
    return a - b
</snippet></ROW><ROW><id>12574117</id><snippet>sub(a, b, c)</snippet></ROW><ROW><id>12574117</id><snippet>a-b-c</snippet></ROW><ROW><id>12574117</id><snippet>a-(b-c)</snippet></ROW><ROW><id>12574117</id><snippet>(a-b)-c</snippet></ROW><ROW><id>12574117</id><snippet>def left_associative_binop_to_multiop(f):
    @functools.wraps(f)
    def wrapper(*args, **kwds):
        if len(args) == 1: return args[0]
        return f(wrapper(*args[:-1], **kwds), args[-1], **kwds)
    return wrapper
</snippet></ROW><ROW><id>12574670</id><snippet>commit()</snippet></ROW><ROW><id>12574670</id><snippet>conn = MySQLdb.connect(user='alex', db='testing')
cur = conn.cursor()
cur.execute("""INSERT INTO user_data (nick, points) VALUES (%s, 100);""", (target.lower()))
conn.commit()
</snippet></ROW><ROW><id>12574708</id><snippet>#f = open(fname, "rb")
#f_data = f.read()
#f.close()
f_data = b'\x12\x43\xff\xd9\x00\x23'
eof_markers = {
    'jpg':b'\xff\xd9',
    'pdf':b'\x25\x25\x45\x4f\x46',
    }

for counter in range(-4, 0):
  for name, marker in eof_markers.items():
    print(counter, ('' if marker in f_data[counter:] else '!') + name)
</snippet></ROW><ROW><id>12574708</id><snippet>-4 !pdf
-4 jpg
-3 !pdf
-3 !jpg
-2 !pdf
-2 !jpg
-1 !pdf
-1 !jpg
</snippet></ROW><ROW><id>12574773</id><snippet>re.search</snippet></ROW><ROW><id>12574773</id><snippet>None</snippet></ROW><ROW><id>12574773</id><snippet>if re.findall(r' CDS ',line):</snippet></ROW><ROW><id>12574773</id><snippet>if ' CDS ' in line:</snippet></ROW><ROW><id>12574773</id><snippet>line.replace('\n','')</snippet></ROW><ROW><id>12574773</id><snippet>line.rstrip('\n')</snippet></ROW><ROW><id>12574811</id><snippet>writeline</snippet></ROW><ROW><id>12574811</id><snippet>write</snippet></ROW><ROW><id>12574811</id><snippet>file1.write('1\n2\n3\n4\n5')
file2.write('0,2\n1,3\n2,4\n3,5\n4,6')
</snippet></ROW><ROW><id>12574811</id><snippet>close</snippet></ROW><ROW><id>12574811</id><snippet>file1.close()
file2.close()
</snippet></ROW><ROW><id>12574811</id><snippet>while</snippet></ROW><ROW><id>12574811</id><snippet>try</snippet></ROW><ROW><id>12574811</id><snippet>print repr(answer), repr(correct)
</snippet></ROW><ROW><id>12574811</id><snippet>/root/first.txt</snippet></ROW><ROW><id>12574811</id><snippet>first.txt</snippet></ROW><ROW><id>12574811</id><snippet>/root</snippet></ROW><ROW><id>12574811</id><snippet>Number: 4


Surrounding numbers?3,5
(3, 5) '3,5\n'

Nope, It's 3,5

Hit enter to try a new one...
</snippet></ROW><ROW><id>12574811</id><snippet>answer</snippet></ROW><ROW><id>12574811</id><snippet>(3, 5)</snippet></ROW><ROW><id>12574811</id><snippet>3,5</snippet></ROW><ROW><id>12574811</id><snippet>correct</snippet></ROW><ROW><id>12574811</id><snippet>3,5\n</snippet></ROW><ROW><id>12574811</id><snippet>3,5</snippet></ROW><ROW><id>12574811</id><snippet>answer</snippet></ROW><ROW><id>12574811</id><snippet>3,5</snippet></ROW><ROW><id>12574811</id><snippet>(3, 5)</snippet></ROW><ROW><id>12574811</id><snippet>raw_input</snippet></ROW><ROW><id>12574811</id><snippet>table.txt</snippet></ROW><ROW><id>12574811</id><snippet>pocket.txt</snippet></ROW><ROW><id>12574811</id><snippet>open</snippet></ROW><ROW><id>12574811</id><snippet>readlines</snippet></ROW><ROW><id>12574811</id><snippet>close</snippet></ROW><ROW><id>12574811</id><snippet>with</snippet></ROW><ROW><id>12574811</id><snippet>/root/first.txt</snippet></ROW><ROW><id>12574876</id><snippet>django_session</snippet></ROW><ROW><id>12574876</id><snippet>django.contrib.auth.logout()</snippet></ROW><ROW><id>12574876</id><snippet>request.session.flush()</snippet></ROW><ROW><id>12574876</id><snippet>session_key</snippet></ROW><ROW><id>12574876</id><snippet>django_session</snippet></ROW><ROW><id>12574876</id><snippet>request.session.flush()</snippet></ROW><ROW><id>12574876</id><snippet>django.contrib.auth.logout()</snippet></ROW><ROW><id>12574876</id><snippet>def logout(request):
    """
    Removes the authenticated user's ID from the request and flushes their
    session data.
    """
    # Dispatch the signal before the user is logged out so the receivers have a
    # chance to find out *who* logged out.
    user = getattr(request, 'user', None)
    if hasattr(user, 'is_authenticated') and not user.is_authenticated():
        user = None
    user_logged_out.send(sender=user.__class__, request=request, user=user)

    request.session.flush()
    if hasattr(request, 'user'):
        from django.contrib.auth.models import AnonymousUser
        request.user = AnonymousUser()
</snippet></ROW><ROW><id>12574876</id><snippet>def delete(self, session_key=None):
    if session_key is None:
        if self.session_key is None:
            return
        session_key = self.session_key
    try:
        Session.objects.get(session_key=session_key).delete()
    except Session.DoesNotExist:
        pass
</snippet></ROW><ROW><id>12574876</id><snippet>django.contrib.auth.signals.user_logged_out</snippet></ROW><ROW><id>12575148</id><snippet>c = [[2007, 206, 205, 8], [2007, 206, 208, 9], [2007, 207, 210, 10]]
</snippet></ROW><ROW><id>12575148</id><snippet>a = [[2007, 206, 205, 8], [2007, 206, 208, 9]]
b = [[2007, 205, 206, 8], [2007, 207, 210, 10]]
from itertools import chain
seen = set()
c = []
for lst in chain(a,b):
    one_two = tuple(lst[:1] + sorted(lst[1:-1]) + lst[-1:])
    if one_two not in seen:
       seen.add(one_two)
       c.append(lst)
</snippet></ROW><ROW><id>12575277</id><snippet>for item in joe:
</snippet></ROW><ROW><id>12575277</id><snippet>item</snippet></ROW><ROW><id>12575277</id><snippet>for item in joe:
    print item
</snippet></ROW><ROW><id>12575277</id><snippet>item</snippet></ROW><ROW><id>12575277</id><snippet>['miles', 330]</snippet></ROW><ROW><id>12575277</id><snippet>'miles'</snippet></ROW><ROW><id>12575277</id><snippet>item[0]</snippet></ROW><ROW><id>12575277</id><snippet>item[1]</snippet></ROW><ROW><id>12575277</id><snippet>330</snippet></ROW><ROW><id>12575277</id><snippet>joedict = {}
for item in joe:
    joedict.setdefault(item[0], []).append(item[1])
</snippet></ROW><ROW><id>12575277</id><snippet>joedict['miles']</snippet></ROW><ROW><id>12575277</id><snippet>for value in joedict.itervalues():
    value.sort()
</snippet></ROW><ROW><id>12575451</id><snippet>reshape</snippet></ROW><ROW><id>12575451</id><snippet>B = np.reshape(A, (-1, 2))
</snippet></ROW><ROW><id>12575591</id><snippet>ur'(?&lt;!\S)[€£$]?\d+(?:[.,]\d+)?(?!\S)'
</snippet></ROW><ROW><id>12575591</id><snippet>(?&lt;!\S)</snippet></ROW><ROW><id>12575591</id><snippet>(?!\S)</snippet></ROW><ROW><id>12575591</id><snippet>&gt;&gt;&gt; sentence = "$1234 $56$78.90 This is test text $25,000 $25,000$20,000 $30"
&gt;&gt;&gt; pattern = re.compile(ur'(?&lt;!\S)[€£$]?\d+(?:[.,]\d+)?(?!\S)', re.UNICODE | re.MULTILINE | re.DOTALL)
&gt;&gt;&gt; print pattern.findall(sentence)
['$1234', '$25,000', '$30']
</snippet></ROW><ROW><id>12575591</id><snippet>\S</snippet></ROW><ROW><id>12575591</id><snippet>[^\s&lt;chars&gt;]</snippet></ROW><ROW><id>12575591</id><snippet>&lt;chars&gt;</snippet></ROW><ROW><id>12575591</id><snippet>ur'(?&lt;![^\s:])[€£$]?\d+(?:[.,]\d+)?(?![^\s,.])'
</snippet></ROW><ROW><id>12575591</id><snippet>:</snippet></ROW><ROW><id>12575591</id><snippet>,</snippet></ROW><ROW><id>12575591</id><snippet>.</snippet></ROW><ROW><id>12575591</id><snippet>&gt;&gt;&gt; sentence = "$1234 $56$78.90 This is test text:$25,000. $45. $25,000$20,000 $30"
&gt;&gt;&gt; print pattern.findall(sentence)
['$1234', '$25,000', '$45', '$30']
</snippet></ROW><ROW><id>12575643</id><snippet>if</snippet></ROW><ROW><id>12575643</id><snippet>playagain</snippet></ROW><ROW><id>12575643</id><snippet>'n'</snippet></ROW><ROW><id>12575643</id><snippet>final_str</snippet></ROW><ROW><id>12575643</id><snippet>vowelcount</snippet></ROW><ROW><id>12575643</id><snippet>first_vowel_count</snippet></ROW><ROW><id>12575643</id><snippet>second_vowel_count</snippet></ROW><ROW><id>12575880</id><snippet>len(argv)</snippet></ROW><ROW><id>12575880</id><snippet>&gt;&gt;&gt; w,x,y,z=[1,2,3,4,5]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack
</snippet></ROW><ROW><id>12575880</id><snippet>argv</snippet></ROW><ROW><id>12575880</id><snippet>argv</snippet></ROW><ROW><id>12576009</id><snippet>m = memberships[0]
m is membership[0]
</snippet></ROW><ROW><id>12576009</id><snippet>False</snippet></ROW><ROW><id>12576131</id><snippet>mutations=0
for i,j in zip(aln1,aln2):
    if i != j and i != '-' and j != '-':
        mutations+=1
</snippet></ROW><ROW><id>12576171</id><snippet>    \t\t{14}
</snippet></ROW><ROW><id>12576431</id><snippet>s &lt;= t  test whether every element in s is in t
s &gt;= t  test whether every element in t is in s
s | t   new set with elements from both s and t
s &amp; t   new set with elements common to s and t
s - t   new set with elements in s but not in t
s ^ t   new set with elements in either s or t but not both
</snippet></ROW><ROW><id>12576745</id><snippet>In [10]: fruit = ['A', 'banana', 'Watermelon', 'mango']

In [11]: ' + '.join(sorted(fruit, key=str.lower))
Out[11]: 'A + banana + mango + Watermelon'
</snippet></ROW><ROW><id>12576771</id><snippet>f.tell()</snippet></ROW><ROW><id>12576771</id><snippet>f.seek()</snippet></ROW><ROW><id>12576869</id><snippet>super</snippet></ROW><ROW><id>12576869</id><snippet>super(Circle, self)</snippet></ROW><ROW><id>12576869</id><snippet>super(Square, self)</snippet></ROW><ROW><id>12576869</id><snippet>Shape.__init__(self, x, y)
</snippet></ROW><ROW><id>12576869</id><snippet>super</snippet></ROW><ROW><id>12577047</id><snippet>class SonInline(ModelForm):
    model = Son

class FatherForm(ModelForm):
    model = Father
</snippet></ROW><ROW><id>12577047</id><snippet>formset</snippet></ROW><ROW><id>12577047</id><snippet>FatherInlineFormSet = inlineformset_factory(Father,
    Son,
    form=SonInline,
    extra=1,
    can_delete=False,
    can_order=False
)
</snippet></ROW><ROW><id>12577047</id><snippet>CreateView</snippet></ROW><ROW><id>12577047</id><snippet>class CreateFatherView(CreateView):
    template_name = 'father_create.html'
    model = Father
    form_class = FatherForm # the parent object's form

    # On successful form submission
    def get_success_url(self):
        return reverse('father-created')

    # Validate forms
    def form_valid(self, form):
        ctx = self.get_context_data()
        inlines = ctx['inlines']
        if inlines.is_valid() and form.is_valid():
            self.object = form.save() # saves Father and Children
            return redirect(self.get_success_url())
        else:
            return self.render_to_response(self.get_context_data(form=form))

    def form_invalid(self, form):
        return self.render_to_response(self.get_context_data(form=form))

    # We populate the context with the forms. Here I'm sending
    # the inline forms in `inlines`
    def get_context_data(self, **kwargs):
        ctx = super(CreateFatherView, self).get_context_data(**kwargs)
        if self.request.POST:
            ctx['form'] = FatherForm(self.request.POST)
            ctx['inlines'] = FatherInlineFormSet(self.request.POST)
        else:
            ctx['form'] = Father()
            ctx['inlines'] = FatherInlineFormSet()
        return ctx
</snippet></ROW><ROW><id>12577047</id><snippet>&lt;form id="father-form" method="POST" enctype="multipart/form-data" action="."&gt;
{% csrf_token %}
&lt;div class="row"&gt;
  {% for f in form %}
    &lt;div class="span3"&gt;{{ f.label }}&lt;br /&gt;{{ f }}
      {% if f.errors %}
          {% for v in f.errors %}
            &lt;br /&gt;&lt;span style="color:red;"&gt;{{ v }}&lt;/span&gt;
          {% endfor %}
      {% endif %}
    &lt;/div&gt;
 {% endfor %}
&lt;/div&gt;
&lt;hr /&gt;
&lt;h2&gt;Sons:&lt;/h2&gt;
&lt;table class="table-striped"&gt;
 &lt;table&gt;
 {%  for f2 in inlines %}
   &lt;tr id="{{ f2.prefix }}-row"&gt;
      {% for i in f2 %}
        &lt;td&gt;
           {{ i }}{% if i.errors %}&lt;span style="color:red;"&gt;{{ i.errors }}&lt;/span&gt;{% endif %}
        &lt;/td&gt;
      {% endfor %}
   &lt;/tr&gt;
 {% endfor %}
&lt;/table&gt;
{{ inlines.management_form }}
&lt;input type="submit" class="btn btn-primary" value="Go Go Gadget &amp;rarr;"&gt;
&lt;/form&gt;
&lt;script type="text/javascript"&gt;
    $(function() {
        $('#father-form tr').formset({
            prefix: '{{ inlines.prefix }}'
        });
    })
&lt;/script&gt;
</snippet></ROW><ROW><id>12577114</id><snippet>from matplotlib.pyplot import figure, show
import numpy as npy
from numpy.random import rand


if 1: # picking on a scatter plot (matplotlib.collections.RegularPolyCollection)

    x, y, c, s = rand(4, 100)
    def onpick3(event):
        ind = event.ind
        print 'onpick3 scatter:', ind, npy.take(x, ind), npy.take(y, ind)

    fig = figure()
    ax1 = fig.add_subplot(111)
    col = ax1.scatter(x, y, 100*s, c, picker=True)
    #fig.savefig('pscoll.eps')
    fig.canvas.mpl_connect('pick_event', onpick3)

show()
</snippet></ROW><ROW><id>12577138</id><snippet>with open('yourfile') as f:
    lst = [ map(int,x.replace('.','0')) for x in f ]
</snippet></ROW><ROW><id>12577138</id><snippet>lst = [ [int(val) for val in line.replace('.','0')] for line in f]
</snippet></ROW><ROW><id>12577138</id><snippet>str.replace</snippet></ROW><ROW><id>12577138</id><snippet>'.'</snippet></ROW><ROW><id>12577138</id><snippet>'0'</snippet></ROW><ROW><id>12577196</id><snippet>O(n^3)</snippet></ROW><ROW><id>12577196</id><snippet>n=5</snippet></ROW><ROW><id>12577196</id><snippet>O(n log n)</snippet></ROW><ROW><id>12577196</id><snippet>n = len(Z) + 1
cache = dict()
for k in range(len(Z)):
  c1, c2 = int(Z[k][0]), int(Z[k][1])
  c1 = [c1] if c1 &lt; n else cache.pop(c1)
  c2 = [c2] if c2 &lt; n else cache.pop(c2)
  cache[n+k] = c1 + c2
print cache[2*len(Z)]
</snippet></ROW><ROW><id>12577196</id><snippet>log n</snippet></ROW><ROW><id>12577196</id><snippet>O(n log n)</snippet></ROW><ROW><id>12577196</id><snippet>O(n)</snippet></ROW><ROW><id>12577196</id><snippet>O(n^2)</snippet></ROW><ROW><id>12577196</id><snippet>O(n log n)</snippet></ROW><ROW><id>12577574</id><snippet>O(n^3)</snippet></ROW><ROW><id>12577574</id><snippet>O(n^2)</snippet></ROW><ROW><id>12577574</id><snippet>dendrogram</snippet></ROW><ROW><id>12577574</id><snippet>matplotlib not available. Plot request denied</snippet></ROW><ROW><id>12577574</id><snippet>hcluster</snippet></ROW><ROW><id>12577574</id><snippet>scipy.cluster.hierarchy</snippet></ROW><ROW><id>12577614</id><snippet>In [145]: data = """\
SampleID    OtherInfo    Measurements    Error    Notes                   
sample1     stuff                                 more stuff              
                         36              6
                         26              7
                         37              8
sample2     newstuff                              lots of stuff           
                         25              6
                         27              7
"""

In [146]: df = pandas.read_fwf(StringIO(data), widths=[12, 13, 14, 9, 15])
</snippet></ROW><ROW><id>12577614</id><snippet>In [147]: df[['Measurements', 'Error']] = df[['Measurements', 'Error']].shift(-1)

In [148]: df[['SampleID', 'OtherInfo', 'Notes']] = df[['SampleID', 'OtherInfo', 'Notes']].fillna()

In [150]: df = df.dropna()

In [151]: df
Out[151]:
  SampleID OtherInfo  Measurements  Error          Notes
0  sample1     stuff            36      6     more stuff
1  sample1     stuff            26      7     more stuff
2  sample1     stuff            37      8     more stuff
4  sample2  newstuff            25      6  lots of stuff
5  sample2  newstuff            27      7  lots of stuff
</snippet></ROW><ROW><id>12577743</id><snippet>A.objects.filter(id=70).values_list('name')
A.objects.get(id=70).name
</snippet></ROW><ROW><id>12577765</id><snippet>meth2</snippet></ROW><ROW><id>12578008</id><snippet>userprofile.image.url</snippet></ROW><ROW><id>12578627</id><snippet>class Foo(object):
    pass

a = Foo()
b = Foo()
c = Foo()

x = set([a, b])
y = set([a, b])
z = set([a, c])

print x == y # True
print x == z # False
</snippet></ROW><ROW><id>12578627</id><snippet>User-defined classes have __cmp__() and __hash__() methods by default; with them, all objects compare unequal (except with themselves) and x.__hash__() returns id(x).</snippet></ROW><ROW><id>12578897</id><snippet>[{key: ["a"], id: 1, value: null}
{key: ["a", "b"], id: 1, value: null}
{key: ["a", "x"], id: 1, value: null}
{key: ["a", "b", "x"], id: 1, value: null}
{key: ["b"], id: 1, value: null}
{key: ["b", "x"], id: 1, value: null}
{key: ["x"], id: 1, value: null}]
</snippet></ROW><ROW><id>12579157</id><snippet>natural_key</snippet></ROW><ROW><id>12579157</id><snippet>get_by_natural_key</snippet></ROW><ROW><id>12579157</id><snippet>objects=GraphManager()</snippet></ROW><ROW><id>12579157</id><snippet>class GraphTypeManager(models.Manager):
    def get_by_natural_key(self, type):
        return self.get(type=type)

class GraphType(models.Model):
    type = models.CharField(max_length=100, unique=True)
    objects = GraphTypeManager()

    def natural_key(self):
        return (self.type,)  # must return a tuple

class GraphManager(models.Manager):
    def get_by_natural_key(self, name):
        return self.get(name=name)

class Graph(models.Model):
    name = models.CharField(max_length=200, unique=True)
    type = models.ForeignKey(GraphType)
    objects = GraphManager()
</snippet></ROW><ROW><id>12579157</id><snippet>$ bin/django dumpdata index --indent=4 --natural &gt; project/apps/fixtures_dev/initial_data.json
[
    {
        "pk": 1,
        "model": "index.graphtype",
        "fields": {
            "type": "asotuh"
        }
    },
    {
        "pk": 1,
        "model": "index.graph",
        "fields": {
            "type": [
                "asotuh"
            ],
            "name": "saoneuht"
        }
    }
]

bin/django loaddata project/apps/fixtures_dev/initial_data.json 
Installed 2 object(s) from 1 fixture(s)
</snippet></ROW><ROW><id>12579600</id><snippet>import scipy.interpolate as spi</snippet></ROW><ROW><id>12579600</id><snippet>interpolate</snippet></ROW><ROW><id>12579600</id><snippet>scipy</snippet></ROW><ROW><id>12579600</id><snippet>from module import function</snippet></ROW><ROW><id>12579610</id><snippet>import subprocess
sp = subprocess.Popen(["java", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
print sp.communicate()
print sp.wait()
</snippet></ROW><ROW><id>12579790</id><snippet>_dict</snippet></ROW><ROW><id>12579790</id><snippet>{...}</snippet></ROW><ROW><id>12579790</id><snippet>_dict</snippet></ROW><ROW><id>12579790</id><snippet>{...}</snippet></ROW><ROW><id>12579790</id><snippet>_dict</snippet></ROW><ROW><id>12579790</id><snippet>_dict = {"foo" : 1234}
_dict["bar"] = _dict["foo"] + 1
</snippet></ROW><ROW><id>12580246</id><snippet>GNU sed</snippet></ROW><ROW><id>12580246</id><snippet>sed -i '/response = HttpResponse()/,/return response/s/.*/#&amp;/' file.txt
</snippet></ROW><ROW><id>12580527</id><snippet>base</snippet></ROW><ROW><id>12580527</id><snippet>ts.resample(rule='24H', how='sum', closed='left', label='left', base=17)
</snippet></ROW><ROW><id>12580527</id><snippet>2012-01-01 17:00:00    24
2012-01-02 17:00:00    24
2012-01-03 17:00:00    12
Freq: 24H
</snippet></ROW><ROW><id>12581005</id><snippet> class TimeTableEntry(object):
     def __init__(self, start, end, module, room):
         self.start = start
         self.end = end
         self.module = module
         self.room = room
</snippet></ROW><ROW><id>12581005</id><snippet>__str__</snippet></ROW><ROW><id>12581383</id><snippet>from selenium import webdriver
browser = webdriver.Firefox()
browser.get("http://www.tour-india.net/best-of-india.htm")
cities=browser.find_elements_by_css_selector(".posts1&gt;a&gt;h2")
for i in range(0,len(cities)):
    cities=browser.find_elements_by_css_selector(".posts1&gt;a&gt;h2")
    cities1=browser.find_elements_by_css_selector(".posts1&gt;a&gt;h2")[i]
    cities1.click()
    title=browser.find_elements_by_xpath("//title")
    content=browser.find_elements_by_css_selector(".tours_text_innerpage.content_margin_top")
    currentUrl=browser.current_url
    print currentUrl
    browser.back(
</snippet></ROW><ROW><id>12581642</id><snippet>-i</snippet></ROW><ROW><id>12581869</id><snippet>{% for element in user_data.follows.all %}
    &lt;p&gt;{{element.username}}&lt;/p&gt;
    &lt;p&gt;{{element.profile.website}}&lt;/p&gt;
    &lt;p&gt;{{element.profile.avatar}}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>12581869</id><snippet>element.profile
</snippet></ROW><ROW><id>12582046</id><snippet>currentRowChanged</snippet></ROW><ROW><id>12582046</id><snippet>currentChanged</snippet></ROW><ROW><id>12582046</id><snippet>QModelIndex</snippet></ROW><ROW><id>12582046</id><snippet>QModelIndex</snippet></ROW><ROW><id>12582046</id><snippet>.data</snippet></ROW><ROW><id>12582046</id><snippet>getItem</snippet></ROW><ROW><id>12582046</id><snippet>class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        #initialize TableViewer
        self.tblViewer.tv.selectionModel().currentChanged.connect(self.tblItemChanged)

    def tblItemChanged(self, current, previous):
        '''display text of selected item '''
        # `data` defaults to DisplayRole, e.g. the text that is displayed
        print(current.data().toString()) 
</snippet></ROW><ROW><id>12582586</id><snippet>text.close()</snippet></ROW><ROW><id>12582586</id><snippet>for line in text</snippet></ROW><ROW><id>12582586</id><snippet>print &gt;&gt; desc</snippet></ROW><ROW><id>12582586</id><snippet>Text1</snippet></ROW><ROW><id>12582586</id><snippet>Text2</snippet></ROW><ROW><id>12582586</id><snippet>for line in text</snippet></ROW><ROW><id>12582586</id><snippet>None</snippet></ROW><ROW><id>12582586</id><snippet>hit_count0=1</snippet></ROW><ROW><id>12582586</id><snippet>if moldesc[0]</snippet></ROW><ROW><id>12582586</id><snippet>hit_count1=1</snippet></ROW><ROW><id>12582586</id><snippet>if moldesc[1]</snippet></ROW><ROW><id>12582586</id><snippet>hit_count0 and hit_count1</snippet></ROW><ROW><id>12582586</id><snippet>break</snippet></ROW><ROW><id>12582586</id><snippet>for f in in_files:
    file = os.path.join(path, f)
    with open(file, "r") as text:
        hit_count = 0
        hit_count1 = 0
        for line in text:
            if moldesc[0] in line:
                Text1 = line.split()[-1]
                hit_count = 1
            if moldesc[1] in line:
                Text2 = line.split()[-1]
                hit_count1 = 1
            if hit_count and hit_count1:
                print &gt;&gt; desc, f + "," + Text1 + "," + Text2
                break
</snippet></ROW><ROW><id>12582586</id><snippet>Text1</snippet></ROW><ROW><id>12582586</id><snippet>Text1 = line[:line.index(moldesc[0])]</snippet></ROW><ROW><id>12582586</id><snippet>Text1 = line.split()[-1]</snippet></ROW><ROW><id>12583436</id><snippet>samplesize</snippet></ROW><ROW><id>12583436</id><snippet>list.insert</snippet></ROW><ROW><id>12583436</id><snippet>def iter_sample_fast(iterable, samplesize):
    results = []
    iterator = iter(iterable)
    # Fill in the first samplesize elements:
    try:
        for _ in xrange(samplesize):
            results.append(iterator.next())
    except StopIteration:
        raise ValueError("Sample larger than population.")
    random.shuffle(results)  # Randomize their positions
    for i, v in enumerate(iterator, samplesize):
        r = random.randint(0, i)
        if r &lt; samplesize:
            results[r] = v  # at a decreasing rate, replace random items
    return results
</snippet></ROW><ROW><id>12583436</id><snippet>samplesize</snippet></ROW><ROW><id>12583436</id><snippet>10000</snippet></ROW><ROW><id>12583436</id><snippet>(1000000, 100000)</snippet></ROW><ROW><id>12583620</id><snippet>print "Power:", pow, pow_mod()</snippet></ROW><ROW><id>12583620</id><snippet>sheet.append("Power: " + str(pow) + ' ' + pow_mod())
</snippet></ROW><ROW><id>12583620</id><snippet>sheet.append("Power: {0} {1}".format(pow, pow_mod()))
</snippet></ROW><ROW><id>12583620</id><snippet>.append()</snippet></ROW><ROW><id>12583653</id><snippet>os.walk</snippet></ROW><ROW><id>12583653</id><snippet>d = {}
for path,dirs,fnames in os.walk(top):
    for fname in fnames:
        visit = os.path.join(path,fname)
        with open(visit) as f:
             d[visit] = f.read()
</snippet></ROW><ROW><id>12584037</id><snippet>re.VERBOSE</snippet></ROW><ROW><id>12584037</id><snippet>pattern = re.compile(r"""
 ^( [0-9a-fA-F]{2} (?: \s [0-9a-fA-F]{2} ){44}
                (?:(?: \s [0-9a-fA-F]{2} ){3} )? )$ 
""", re.VERBOSE)
</snippet></ROW><ROW><id>12584037</id><snippet>&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 44))
&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 45))
&lt;_sre.SRE_Match object at 0x7fd8f27e0738&gt;
&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 46))
&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 47))
&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 48))
&lt;_sre.SRE_Match object at 0x7fd8f27e0990&gt;
&gt;&gt;&gt; pattern.match(" ".join(["0f"] * 49))
</snippet></ROW><ROW><id>12584037</id><snippet>.group(0).split()</snippet></ROW><ROW><id>12584037</id><snippet>chunk = r"""([0-9a-fA-F]{2}\s)"""
pattern = re.compile(chunk * 45 + "(?:" + chunk * 3 + ")?")
</snippet></ROW><ROW><id>12584160</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import cm
from matplotlib import colors

data = np.tile(np.arange(4), 2)
fig = plt.figure()
ax = fig.add_subplot(121)
cmap = cm.get_cmap('jet', 4)
bounds = np.arange(5)
vals = bounds[:-1]
norm = colors.BoundaryNorm(bounds, cmap.N)
ax.imshow(data[None], aspect='auto', interpolation='nearest', cmap=cmap, norm=norm)

cax = fig.add_subplot(122)
cbar = fig.colorbar(ax.images[0], cax=cax, boundaries=bounds, values=vals)
cbar.set_ticks(vals + .5)
cbar.set_ticklabels(['one', 'two', 'three', 'four'])
</snippet></ROW><ROW><id>12584160</id><snippet>get_cmap</snippet></ROW><ROW><id>12584160</id><snippet>BoundaryNorm</snippet></ROW><ROW><id>12584302</id><snippet>super</snippet></ROW><ROW><id>12584302</id><snippet>super(C, self).method(arg)</snippet></ROW><ROW><id>12584302</id><snippet>C</snippet></ROW><ROW><id>12585180</id><snippet>def get_valid_exception(description, code):
    if code == 123:
        return NotFoundError(description, code)
    elif code == 456:
        return NotWorkingError(description, code)
</snippet></ROW><ROW><id>12585180</id><snippet>def process_response(response):
    if not response.success:
        raise get_valid_exception(response.statusDescription, response.statusCode)
</snippet></ROW><ROW><id>12585213</id><snippet>print("Your age is ",date-int(age))
</snippet></ROW><ROW><id>12585213</id><snippet>str</snippet></ROW><ROW><id>12585336</id><snippet>(?P&lt;user_id&gt;\d+)</snippet></ROW><ROW><id>12585336</id><snippet>user_id</snippet></ROW><ROW><id>12585336</id><snippet>user_id</snippet></ROW><ROW><id>12585336</id><snippet>def view_reviews_user(request, user_id):
    userprofile = UserProfile.objects.get(pk=int(user_id))
</snippet></ROW><ROW><id>12585336</id><snippet>\d+</snippet></ROW><ROW><id>12585336</id><snippet>int(user_id)</snippet></ROW><ROW><id>12585336</id><snippet>url(r'^user/(?P&lt;user_id&gt;\d+)/$', 'view_reviews_user'),
</snippet></ROW><ROW><id>12585336</id><snippet>user_id</snippet></ROW><ROW><id>12585336</id><snippet>get_object_or_404</snippet></ROW><ROW><id>12585336</id><snippet>get_object_or_404(UserProfile, pk=user_id)
</snippet></ROW><ROW><id>12585336</id><snippet>User</snippet></ROW><ROW><id>12585336</id><snippet>UserProfile</snippet></ROW><ROW><id>12585336</id><snippet>OneToOneField</snippet></ROW><ROW><id>12585336</id><snippet>ForeignKey</snippet></ROW><ROW><id>12585336</id><snippet>def view_reviews_user(request, username):
    userprofile = get_object_or_404(UserProfile, user__username=username)
</snippet></ROW><ROW><id>12585610</id><snippet>import time

import wx
import wx.lib.agw.pybusyinfo as PBI

def showmsg():
    app = wx.App(redirect=False)
    msg = 'this is a test'
    title = 'Message!'
    d = PBI.PyBusyInfo(msg, title=title)
    return d    

if __name__ == '__main__':
    d = showmsg()
    time.sleep(3)
    d = None
</snippet></ROW><ROW><id>12585690</id><snippet>&gt;&gt;&gt; urlparse.urljoin('http://www.pythonchallenge.com/pc/def/peak.html', 'banner.p')
'http://www.pythonchallenge.com/pc/def/banner.p'
</snippet></ROW><ROW><id>12585810</id><snippet>import os, os.path, zipfile, arcpy

in_Zip = r'D:\D_Drive_Documents\Student_Work_Sample_usecopy1\2012-09-18 Lab_2.zip'

outDir = r"D:\D_Drive_Documents\Student_Work_Sample_usecopy1"

z = zipfile.ZipFile(in_Zip,'r')

z.extractall(outDir)

zipContents = z.namelist()
z.close()

for item in zipContents:
    if item.endswith('.zip'):
        fullpath = os.path.join(outDir, item)
        x = zipfile.ZipFile(fullpath,'r')
        dest_path = os.path.dirname(fullpath)
        x.extractall(dest_path)
        x.close()
</snippet></ROW><ROW><id>12585831</id><snippet>:h tabstop</snippet></ROW><ROW><id>12585831</id><snippet>set tabstop=4
set shiftwidth=4
set noexpandtab
</snippet></ROW><ROW><id>12585831</id><snippet>&lt;Tab&gt;</snippet></ROW><ROW><id>12585831</id><snippet>&lt;Tab&gt;</snippet></ROW><ROW><id>12585831</id><snippet>set tabstop=4
set shiftwidth=4
set expandtab
</snippet></ROW><ROW><id>12585831</id><snippet>&lt;Tab&gt;</snippet></ROW><ROW><id>12585831</id><snippet>&lt;Space&gt;&lt;Space&gt;&lt;Space&gt;&lt;Space&gt;</snippet></ROW><ROW><id>12585831</id><snippet>y</snippet></ROW><ROW><id>12585831</id><snippet>p</snippet></ROW><ROW><id>12585831</id><snippet>P</snippet></ROW><ROW><id>12585831</id><snippet>"ay</snippet></ROW><ROW><id>12585831</id><snippet>"ap</snippet></ROW><ROW><id>12585831</id><snippet>@a</snippet></ROW><ROW><id>12585831</id><snippet>"+y</snippet></ROW><ROW><id>12585831</id><snippet>"+p</snippet></ROW><ROW><id>12585977</id><snippet>for</snippet></ROW><ROW><id>12585977</id><snippet>for</snippet></ROW><ROW><id>12585977</id><snippet>if</snippet></ROW><ROW><id>12585977</id><snippet>for</snippet></ROW><ROW><id>12585977</id><snippet>if</snippet></ROW><ROW><id>12585977</id><snippet>thingys = []
for y in l:
    for x in y:
        thingys.append(x)
</snippet></ROW><ROW><id>12585979</id><snippet>class D(dict):
    def __init__(self):
        self.changed_values = {}
        self.__initialized = True

    def __setitem__(self, key, value):
        self.changed_values[key] = value
        super(D, self).__setitem__(key, value)

    def __getattr__(self, item):
        """Maps values to attributes.
        Only called if there *isn't* an attribute with this name
        """
        try:
            return self.__getitem__(item)
        except KeyError:
            raise AttributeError(item)

    def __setattr__(self, item, value):
        """Maps attributes to values.
        Only if we are initialised
        """
        if not self.__dict__.has_key('_D__initialized'):  # this test allows attributes to be set in the __init__ method
            return dict.__setattr__(self, item, value)
        elif self.__dict__.has_key(item):       # any normal attributes are handled normally
            dict.__setattr__(self, item, value)
        else:
            self.__setitem__(item, value)

a = D()
a['hi']  = 'hello'
print a.hi
print a.changed_values

a.hi = 'wow'
print a.hi
print a.changed_values

a.test = 'test1'
print a.test
print a.changed_values
</snippet></ROW><ROW><id>12585979</id><snippet>&gt;&gt;hello
&gt;&gt;{'hi': 'hello'}
&gt;&gt;wow
&gt;&gt;{'hi': 'wow'}
&gt;&gt;test1
&gt;&gt;{'hi': 'wow', 'test': 'test1'}
</snippet></ROW><ROW><id>12586270</id><snippet>defaultdict</snippet></ROW><ROW><id>12586270</id><snippet>output = defaultdict(dict)

for person in people:
    output[person['Name']][person['Attribute'] = person['Value']
</snippet></ROW><ROW><id>12586354</id><snippet>x</snippet></ROW><ROW><id>12586354</id><snippet>indices = [i for (i, x) in enumerate(catdate) if x in set(NNSRCfile['datetimenew']).intersection(catdate)]
for i in indices:
    print i
</snippet></ROW><ROW><id>12586354</id><snippet>indices</snippet></ROW><ROW><id>12586508</id><snippet>ValueError</snippet></ROW><ROW><id>12586508</id><snippet>a</snippet></ROW><ROW><id>12586508</id><snippet>b</snippet></ROW><ROW><id>12586508</id><snippet>for a,b in (['0a.csv', '1a.csv'], ['0b.csv', '1b.csv']):
    print a,b
</snippet></ROW><ROW><id>12586508</id><snippet>a</snippet></ROW><ROW><id>12586508</id><snippet>b</snippet></ROW><ROW><id>12586508</id><snippet>0a,csv 1a.csv
0b.csv 1b.csv
</snippet></ROW><ROW><id>12586508</id><snippet>ValueError</snippet></ROW><ROW><id>12586508</id><snippet>glob.glob</snippet></ROW><ROW><id>12586508</id><snippet>zip</snippet></ROW><ROW><id>12586508</id><snippet>import glob

for a,b in zip(glob.glob("*a.csv"), glob.glob("*b.csv")):
    # whatever
</snippet></ROW><ROW><id>12586508</id><snippet>a</snippet></ROW><ROW><id>12586508</id><snippet>b</snippet></ROW><ROW><id>12586508</id><snippet>0a.csv</snippet></ROW><ROW><id>12586508</id><snippet>1a.csv</snippet></ROW><ROW><id>12586508</id><snippet>2a.csv</snippet></ROW><ROW><id>12586508</id><snippet>0b.csv</snippet></ROW><ROW><id>12586508</id><snippet>1b.csv</snippet></ROW><ROW><id>12586508</id><snippet>2b.csv</snippet></ROW><ROW><id>12586508</id><snippet>for a,b in zip(glob.glob("*a.csv"), glob.glob("*b.csv")):
    print a, b
</snippet></ROW><ROW><id>12586508</id><snippet>0a.csv 0b.csv
1a.csv 1b.csv
2a.csv 2b.csv
</snippet></ROW><ROW><id>12586667</id><snippet>CURSOR_UP_ONE = '\x1b[1A'
ERASE_LINE = '\x1b[2K'
print(CURSOR_UP_ONE + ERASE_LINE)
</snippet></ROW><ROW><id>12586768</id><snippet>embossed</snippet></ROW><ROW><id>12586768</id><snippet>embossed = objectify.Element('embossed')
embossed.append(objectify.Element('line'))
embossed.line[-1] = 'Test Line'
embossed.append(objectify.Element('line'))
embossed.line[-1] = 'Test Line 2'
</snippet></ROW><ROW><id>12586768</id><snippet>objectify.Element</snippet></ROW><ROW><id>12586768</id><snippet>-1</snippet></ROW><ROW><id>12586768</id><snippet>&gt;&gt;&gt; from lxml import objectify, etree
&gt;&gt;&gt; embossed = objectify.Element('embossed')
&gt;&gt;&gt; embossed.append(objectify.Element('line'))
&gt;&gt;&gt; embossed.line[-1] = 'Test Line'
&gt;&gt;&gt; embossed.append(objectify.Element('line'))
&gt;&gt;&gt; embossed.line[-1] = 'Test Line 2'
&gt;&gt;&gt; print etree.tostring(embossed, pretty_print=True)
&lt;embossed xmlns:py="http://codespeak.net/lxml/objectify/pytype" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" py:pytype="TREE"&gt;
  &lt;line py:pytype="str"&gt;Test Line&lt;/line&gt;
  &lt;line py:pytype="str"&gt;Test Line 2&lt;/line&gt;
&lt;/embossed&gt;
</snippet></ROW><ROW><id>12587180</id><snippet>background-image:url("myimage.gif")</snippet></ROW><ROW><id>12587180</id><snippet>http://yoursite/static/mycss.css</snippet></ROW><ROW><id>12587180</id><snippet>http://yoursite/static/myimage.gif</snippet></ROW><ROW><id>12587383</id><snippet>threading</snippet></ROW><ROW><id>12587383</id><snippet>from threading import Thread
import time

def drive_bus():
    time.sleep(1)
    print "Igor: I'm Igor and I'm driving to... Moskow!"
    time.sleep(9)
    print "Igor: Yei, Moskow!"

def build_house():
    print "Peter: Let's start building a large house..."
    time.sleep(10.1)
    print "Peter: Urks, we have no tools :-("

threads = [Thread(target=drive_bus), Thread(target=build_house)]

for t in threads:
    t.start()

for t in threads:
    t.join()
</snippet></ROW><ROW><id>12587383</id><snippet>threading.Thread</snippet></ROW><ROW><id>12587383</id><snippet>target</snippet></ROW><ROW><id>12587383</id><snippet>start</snippet></ROW><ROW><id>12587383</id><snippet>t.join()</snippet></ROW><ROW><id>12587383</id><snippet>t</snippet></ROW><ROW><id>12587485</id><snippet>&gt;&gt;&gt; from tornado.ioloop import IOLoop
&gt;&gt;&gt; import asyncmongo
&gt;&gt;&gt; db = asyncmongo.Client(pool_id='mydb', host='127.0.0.1', port=27017, maxcached=10, maxconnections=50, dbname='test')
&gt;&gt;&gt; def callback(result, error):
...     print result
...     IOLoop.instance().stop()
...
&gt;&gt;&gt; db.command('distinct', 'my_data', key='my_key', callback=callback)
&gt;&gt;&gt; IOLoop.instance().start()
{u'stats': {u'cursor': u'BasicCursor', u'timems': 0, u'nscannedObjects': 5, u'nscanned': 5, u'n': 5}, u'values': [1.0, 2.0], u'ok': 1.0}
</snippet></ROW><ROW><id>12587543</id><snippet>request.user</snippet></ROW><ROW><id>12587543</id><snippet>set_request_property</snippet></ROW><ROW><id>12587607</id><snippet>[equals-left] [lesses] [greaters] [equals-right]
</snippet></ROW><ROW><id>12587607</id><snippet>[lesses] [equals-left] [equals-right] [greaters]
</snippet></ROW><ROW><id>12587607</id><snippet>[lesses]</snippet></ROW><ROW><id>12587607</id><snippet>[greaters]</snippet></ROW><ROW><id>12587830</id><snippet>get_combos</snippet></ROW><ROW><id>12587830</id><snippet>QuickSky</snippet></ROW><ROW><id>12587830</id><snippet>dir(QuickSky)</snippet></ROW><ROW><id>12587830</id><snippet>get_combos</snippet></ROW><ROW><id>12587830</id><snippet>QuickSky.Mapper</snippet></ROW><ROW><id>12587830</id><snippet>dets</snippet></ROW><ROW><id>12587962</id><snippet>f T -&gt; T'
</snippet></ROW><ROW><id>12587962</id><snippet>add(T, A) -&gt; T'
</snippet></ROW><ROW><id>12587962</id><snippet>class Table(frozenset):
    def __new__(cls, names, rows):
        return frozenset.__new__(cls, rows)

    def __init__(self, names, rows):
        frozenset.__init__(self, rows)
        self.names = names

def add_column(rows, func):
    return [row + (func(row, idx),) for (idx, row) in enumerate(rows)]

def table_process(t, (name, func)):
    return Table(
        t.names + (name,),
        add_column(t, lambda row, idx: func(row))
        )

def table_filter(t, (name, func)):
    names = t.names
    idx = names.index(name)
    return Table(
        names,
        [row for row in t if func(row[idx])]
        )

def table_rank(t, name):
    names = t.names
    idx = names.index(name)
    rows = sorted(t, key = lambda row: row[idx])
    return Table(
        names + ('rank',),
        add_column(rows, lambda row, idx: idx)
        )

def table_print(t):
    format_row = lambda r: ' '.join('%15s' % c for c in r)
    print format_row(t.names)
    print '\n'.join(format_row(row) for row in t)

if __name__ == '__main__':
    from random import randint
    cols = ('c1', 'c2', 'c3')
    T = Table(
        cols,
        [tuple(randint(0, 9) for x in cols) for x in range(10)]
        )
    table_print(T)

    # Columns to add to the table, this is a perfect fit for a
    # reduce. I'd honestly use a boring for loop instead, but reduce
    # is a perfect example for how in FP data and code "becomes one."
    # In fact, this whole program could have been written as just one
    # big reduce.
    actions = [
        ('max', max),
        ('min', min),
        ('sum', sum),
        ('avg', lambda r: sum(r) / float(len(r)))
        ]
    T = reduce(table_process, actions, T)
    table_print(T)

    # Ranking is different because it requires an ordering, which a
    # table does not have.
    T2 = table_rank(T, 'sum')
    table_print(T2)

    # Simple where filter: select * from T2 where c2 &lt; 5.
    T3 = table_filter(T2, ('c2', lambda c: c &lt; 5))
    table_print(T3)
</snippet></ROW><ROW><id>12588041</id><snippet>atexit.register(lambda: __kill_proc(proc))
</snippet></ROW><ROW><id>12588050</id><snippet>MutableSet</snippet></ROW><ROW><id>12588050</id><snippet>collections</snippet></ROW><ROW><id>12588050</id><snippet>MutableSet</snippet></ROW><ROW><id>12588050</id><snippet>add</snippet></ROW><ROW><id>12588050</id><snippet>discard</snippet></ROW><ROW><id>12588050</id><snippet>__len__,</snippet></ROW><ROW><id>12588050</id><snippet>__iter__</snippet></ROW><ROW><id>12588050</id><snippet>__contains__</snippet></ROW><ROW><id>12588050</id><snippet>__init__</snippet></ROW><ROW><id>12588050</id><snippet>set</snippet></ROW><ROW><id>12588050</id><snippet>MutableSet</snippet></ROW><ROW><id>12588050</id><snippet>set</snippet></ROW><ROW><id>12588050</id><snippet>set</snippet></ROW><ROW><id>12588050</id><snippet>addIterable</snippet></ROW><ROW><id>12588050</id><snippet>extend</snippet></ROW><ROW><id>12588050</id><snippet>discard</snippet></ROW><ROW><id>12588050</id><snippet>set</snippet></ROW><ROW><id>12588050</id><snippet>delete</snippet></ROW><ROW><id>12588050</id><snippet>delete</snippet></ROW><ROW><id>12588050</id><snippet>discard</snippet></ROW><ROW><id>12588050</id><snippet>popRandom</snippet></ROW><ROW><id>12588050</id><snippet>popRandom</snippet></ROW><ROW><id>12588050</id><snippet>def popRandom(self):
    item = self.getRandom()
    self.discard(item)
    return item
</snippet></ROW><ROW><id>12588050</id><snippet>delete</snippet></ROW><ROW><id>12588050</id><snippet>discard</snippet></ROW><ROW><id>12588050</id><snippet>index == len(self.list) - 1</snippet></ROW><ROW><id>12588050</id><snippet>index == len(self.list) - 1</snippet></ROW><ROW><id>12588050</id><snippet>def discard(self, item):
    if item in self.dict:
        index = self.dict[item]
        self.list[index], self.list[-1] = self.list[-1], self.list[index]
        self.dict[self.list[index]] = index
        del self.list[-1]                    # or in one line:
        del self.dict[item]                  # del self.dict[self.list.pop()]
</snippet></ROW><ROW><id>12588191</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.isatty()
True
</snippet></ROW><ROW><id>12588555</id><snippet>times =  ['2002-03-31 19:30:41', '2002-03-31 19:30:41', '2002-03-31 19:43:49', '2002-03-31     19:43:50', '2002-03-31 19:50:05', '2002-03-31 19:50:06', '2002-03-31 19:50:06', '2002-03-31 19:50:44', '2002-03-31 19:50:45', '2002-03-31 19:50:45', '2002-03-31 19:51:50', '2002-03-31 19:51:50', '2002-03-31 19:51:50', '2002-03-31 19:52:25', '2002-03-31 19:52:25', '2002-03-31 19:52:25', '2002-03-31 19:53:05', '2002-03-31 19:53:06', '2002-03-31 19:53:06', '2002-03-31 19:53:06', '2002-03-31 19:53:17', '2002-03-31 19:54:14', '2002-03-31 19:54:14']
activity= ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w']

start = '2002-03-31 16:54:14'
end = '2002-03-31 19:54:14'

for time, activity in zip(times, activity):
    if time &gt;= start and time &lt;= end:
        print time, activity
</snippet></ROW><ROW><id>12588607</id><snippet>dict_a = {row: 0 for row in list_a}
for row in list_b:
    if row in dict_a:
        dict_a[row] += 1

result = [row + (dict_a[row],) for row in list_a]
</snippet></ROW><ROW><id>12588607</id><snippet>dict((row, 0) for row in list_a)</snippet></ROW><ROW><id>12588879</id><snippet>for x in os.walk('.', topdown=True):
    dirpath, dirnames, dirfiles = x
    print(dirpath, dirnames)
    dirnames[:] = filter(lambda x : not x.startswith('Load'), dirnames)
</snippet></ROW><ROW><id>12588879</id><snippet>help(os.walk)</snippet></ROW><ROW><id>12588879</id><snippet>names</snippet></ROW><ROW><id>12588879</id><snippet>topdown</snippet></ROW><ROW><id>12588879</id><snippet>True</snippet></ROW><ROW><id>12588924</id><snippet>and word.index('e') &gt;= len(word)/2
</snippet></ROW><ROW><id>12589027</id><snippet>iso8601</snippet></ROW><ROW><id>12589027</id><snippet>&gt;&gt;&gt; from datetime import date, datetime, time
&gt;&gt;&gt; from babel.dates import format_date, format_datetime, format_time
&gt;&gt;&gt; d = date(2007, 4, 1)
&gt;&gt;&gt; format_date(d, locale='en')
u'Apr 1, 2007'
&gt;&gt;&gt; format_date(d, locale='de_DE')
u'01.04.2007'
</snippet></ROW><ROW><id>12589027</id><snippet>&gt;&gt;&gt; dt = iso8601.parse_date("2012-08-25T02:00:00Z")
&gt;&gt;&gt; format_date(dt, "MMMM dd, yyyy", locale='en') + ' at ' + format_time(dt, "HH:mm V")
u'August 25, 2012 at 02:00 World (GMT) Time'
</snippet></ROW><ROW><id>12589027</id><snippet>&gt;&gt;&gt; suffix = ('st' if dt.day in [1,21,31]
...                else 'nd' if dt.day in [2, 22] 
...                else 'rd' if dt.day in [3, 23]
...                else 'th')
&gt;&gt;&gt; u'{date}{suffix}, {year} at {time}'.format(
...     date=format_date(dt, "MMMM dd", locale='en'),
...     suffix=suffix, year=dt.year,
...     time=format_time(dt, "HH:mm V"))
u'August 25th, 2012 at 02:00 World (GMT) Time'
</snippet></ROW><ROW><id>12589290</id><snippet>args[0]</snippet></ROW><ROW><id>12589290</id><snippet>def _wrapped_view(request, project_id_key, *args, **kwargs):
</snippet></ROW><ROW><id>12589309</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>12589474</id><snippet>--distribute</snippet></ROW><ROW><id>12589670</id><snippet>class Article(models.Model):
    hits              = models.IntegerField(help_text = 'Visits count')
    answer_to_article = models.ForeignKey('self', blank = True, null = True)
    slug              = models.SlugField(unique = True, help_text = 'Address')
    meta_keywords     = models.CharField(max_length = 512)
    title             = models.CharField(max_length = 256)
    content           = models.TextField(verbose_name = 'Article contents', help_text = 'Article contents')
    similar_articles  = models.ManyToMany('self')

    def get_similar_articles_from_meta_and_relation(self, phrase, offset = 0, limit = 10):
        return self.similar_articles.filter(meta_keywords=phrase)[offset:limit]

    class Meta:
        db_table = 'article'
</snippet></ROW><ROW><id>12589678</id><snippet>preexec_fn</snippet></ROW><ROW><id>12589678</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12589678</id><snippet>StringIO</snippet></ROW><ROW><id>12589678</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12589678</id><snippet>os.pipe</snippet></ROW><ROW><id>12589678</id><snippet>os.dup2</snippet></ROW><ROW><id>12589678</id><snippet>os.read</snippet></ROW><ROW><id>12589678</id><snippet>pipe(2)</snippet></ROW><ROW><id>12589678</id><snippet>dup2(2)</snippet></ROW><ROW><id>12589678</id><snippet>read(2)</snippet></ROW><ROW><id>12589678</id><snippet>fork(2)</snippet></ROW><ROW><id>12589678</id><snippet>execve(2)</snippet></ROW><ROW><id>12589889</id><snippet>[^\W_]
</snippet></ROW><ROW><id>12589889</id><snippet>\w
</snippet></ROW><ROW><id>12590209</id><snippet>def func():
    for i in range(10000000):
        x = 5

func()
</snippet></ROW><ROW><id>12590209</id><snippet>def func():
    global x
    for i in range(1000000):
        x = 5

func()
</snippet></ROW><ROW><id>12590209</id><snippet>global</snippet></ROW><ROW><id>12590209</id><snippet>global x
x = 5
for i in range(10000000):
    x = 5
</snippet></ROW><ROW><id>12590209</id><snippet>x = 5
for i in range(10000000):
    x = 5
</snippet></ROW><ROW><id>12590209</id><snippet>x</snippet></ROW><ROW><id>12590209</id><snippet>global x</snippet></ROW><ROW><id>12590439</id><snippet>communicate</snippet></ROW><ROW><id>12590439</id><snippet>import os
import subprocess

print 'printed from the main process'
command = ['python', os.path.join(os.getcwd(), 'test_console_sub.py')]
p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
(stdout, stderr) = p.communicate()
print stdout
print stderr
</snippet></ROW><ROW><id>12590467</id><snippet>'Text %s, on date: %s' % (x.name, x.time)
</snippet></ROW><ROW><id>12590467</id><snippet>datetime.datetime</snippet></ROW><ROW><id>12590467</id><snippet>'Text %s, on date: %s' % (x.name, x.time.isoformat())
</snippet></ROW><ROW><id>12590467</id><snippet>strftime()</snippet></ROW><ROW><id>12590467</id><snippet>'Text %s, on date: %s' % (x.name, x.time.strftime('%A, %B %d, %Y'))
</snippet></ROW><ROW><id>12590467</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()  # our "now" timestamp
&gt;&gt;&gt; '%d' % now

Traceback (most recent call last):
  File "&lt;pyshell#2&gt;", line 1, in &lt;module&gt;
    '%d' % datetime.datetime.now()
TypeError: %d format: a number is required, not datetime.datetime
&gt;&gt;&gt; '%s' % now.isoformat()
'2012-09-25T22:24:30.399000'
&gt;&gt;&gt; now.strftime('%A, %B %d, %Y')
'Tuesday, September 25, 2012'
</snippet></ROW><ROW><id>12590467</id><snippet>.format()</snippet></ROW><ROW><id>12590467</id><snippet>%</snippet></ROW><ROW><id>12590467</id><snippet>.format()</snippet></ROW><ROW><id>12590467</id><snippet>.format()</snippet></ROW><ROW><id>12590467</id><snippet>'Text {x.name}, on date: {x.time}'.format(x=x)  # accessing properties
'Text {0}, on date: {1}'.format(x.name, x.time)  # accessing by positions
'Text {}, on date: {}'.format(x.name, x.time)  # in Python &gt;2.7 it can be shorter
'Text {0}, on date: {1}'.format(x.name, x.time.isoformat())  # ISO format
'Text {0}, on date: {1}'.format(x.name, x.time.strftime('%A, %B %d, %Y'))
</snippet></ROW><ROW><id>12590535</id><snippet>&gt;&gt;&gt; [{'foo':'bar'}][0]
{'foo': 'bar'}
</snippet></ROW><ROW><id>12590797</id><snippet>repr()</snippet></ROW><ROW><id>12590797</id><snippet>L</snippet></ROW><ROW><id>12590797</id><snippet>d:\&gt;py
Python 3.2.1 (default, Jul 10 2011, 20:02:51) [MSC v.1500 64 bit (AMD64)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 100000000000000000000000000000000000000000000
&gt;&gt;&gt; a
100000000000000000000000000000000000000000000
&gt;&gt;&gt; ^Z

d:\&gt;python
Python 2.7.3 (default, Apr 10 2012, 23:24:47) [MSC v.1500 64 bit (AMD64)] on win
32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 100000000000000000000000000000000000000000000
&gt;&gt;&gt; a
100000000000000000000000000000000000000000000L
&gt;&gt;&gt;
</snippet></ROW><ROW><id>12590797</id><snippet>L</snippet></ROW><ROW><id>12590872</id><snippet>tzinfo</snippet></ROW><ROW><id>12590872</id><snippet>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; epoch = datetime(1601, 1, 1, tzinfo=pytz.UTC)
&gt;&gt;&gt; cookie_microseconds_since_epoch = 13022344559000000
&gt;&gt;&gt; cookie_datetime = epoch + timedelta(microseconds=cookie_microseconds_since_epoch)
&gt;&gt;&gt; str(cookie_datetime)
'2013-08-29 13:55:59+00:00'
</snippet></ROW><ROW><id>12590872</id><snippet>datetime</snippet></ROW><ROW><id>12590872</id><snippet>pytz</snippet></ROW><ROW><id>12590872</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; epoch = datetime(1601, 1, 1)
&gt;&gt;&gt; cookie_microseconds_since_epoch = 13022344559000000
&gt;&gt;&gt; cookie_datetime = epoch + timedelta(microseconds=cookie_microseconds_since_epoch)
&gt;&gt;&gt; str(cookie_datetime)
'2013-08-30 13:55:59'
</snippet></ROW><ROW><id>12590879</id><snippet>collections.Sequence</snippet></ROW><ROW><id>12590879</id><snippet>&gt;&gt;&gt; def f():
...     if random.random() &lt; 0.5:
...         for a in xrange(10):
...             yield a
...     else:
...         stuff = range(10)
...         random.shuffle(stuff)
...         for a in stuff:
...             yield a
&gt;&gt;&gt; list(f())
0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; list(f())
1: [7, 0, 2, 8, 5, 1, 4, 3, 6, 9]
</snippet></ROW><ROW><id>12590978</id><snippet>&gt;&gt;&gt; subprocess.check_output(["echo", "Hello World!"])
'Hello World!\n'
</snippet></ROW><ROW><id>12590993</id><snippet>widget.bind('&lt;Return&gt;', event_handler)
</snippet></ROW><ROW><id>12590993</id><snippet>bind_all()</snippet></ROW><ROW><id>12590993</id><snippet>self.bind_all('&lt;Return&gt;', self.event_handler)
</snippet></ROW><ROW><id>12590993</id><snippet>Return</snippet></ROW><ROW><id>12590993</id><snippet>Enter</snippet></ROW><ROW><id>12590993</id><snippet>Shift-</snippet></ROW><ROW><id>12590993</id><snippet>Control-</snippet></ROW><ROW><id>12591124</id><snippet>result = [np.median(a[a[:,0]==ii,1]) for ii in np.unique(a[:,0])]
</snippet></ROW><ROW><id>12591124</id><snippet>num_in_ind = np.bincount(a[:,0])
results = [np.sort(a[a[:,0]==ii,1])[num_in_ind[ii]/2] for ii in np.unique(a[:,0])]
</snippet></ROW><ROW><id>12591172</id><snippet>shell_exec</snippet></ROW><ROW><id>12591172</id><snippet>shell_exec('mkdir foldername')</snippet></ROW><ROW><id>12591172</id><snippet>shell_exec('/etc/init.d/apache2 restart')</snippet></ROW><ROW><id>12591221</id><snippet>dic={word:WordTrigger(parameters) for word in wordlist}
</snippet></ROW><ROW><id>12591221</id><snippet>&gt;&gt;&gt; wordlist=['a','b','c','d','e']
&gt;&gt;&gt; class A:
    def __init__(self,i):
        self.ind=i


&gt;&gt;&gt; dic={word:A(i) for i,word in enumerate(wordlist)}
&gt;&gt;&gt; dic['a'].ind
0
&gt;&gt;&gt; dic['c'].ind
2
</snippet></ROW><ROW><id>12591412</id><snippet>import sys
from PyQt4.QtGui import QPixmap, QApplication
app = QApplication(sys.argv)
QPixmap.grabWindow(QApplication.desktop().winId()).save('screenshot.jpg', 'jpg')
</snippet></ROW><ROW><id>12591412</id><snippet>import win32gui, win32ui, win32con, win32api
hwin = win32gui.GetDesktopWindow()
width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
hwindc = win32gui.GetWindowDC(hwin)
srcdc = win32ui.CreateDCFromHandle(hwindc)
memdc = srcdc.CreateCompatibleDC()
bmp = win32ui.CreateBitmap()
bmp.CreateCompatibleBitmap(srcdc, width, height)
memdc.SelectObject(bmp)
memdc.BitBlt((0, 0), (width, height), srcdc, (left, top), win32con.SRCCOPY)
bmp.SaveBitmapFile(memdc, 'screenshot.bmp')
</snippet></ROW><ROW><id>12591511</id><snippet>import boto
conn = boto.connect_ec2('asdf','asdfasdfasdfasdf')

tags = conn.get_all_tags()
for tag in tags:
    print tag.name, tag.value
</snippet></ROW><ROW><id>12591511</id><snippet>reservation = conn.get_all_instances()[0]
# Yeah I don't know why they have these stupid reservation objects either...
instance = reservation.instances[0]
print instance.tags
# prints a dictionary of the tags {'Name': 'Given name'}
</snippet></ROW><ROW><id>12591666</id><snippet>if FormSet.IsEmpty(CurrentForm, "ADD_COMP1_ADDRESS") and \
   FormSet.IsEmpty(CurrentForm, "ADD_COMP2_ADDRESS") and \
   FormSet.IsEmpty(CurrentForm, "ADD_COMP3_ADDRESS") and \
   FormSet.IsEmpty(CurrentForm, "ADD_COMP4_ADDRESS") and \
   FormSet.IsEmpty(CurrentForm, "ADD_COMP5_ADDRESS") and \
   FormSet.IsEmpty(CurrentForm, "ADD_COMP6_ADDRESS"):
    Rule.Violated = True
else:
    Rule.Violated = False
</snippet></ROW><ROW><id>12591674</id><snippet>subprocess.call(["cdrecord", "--eject", "dev=/dev/sg1"])
</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord</snippet></ROW><ROW><id>12591674</id><snippet>dev</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord --eject dev=/dev/my silly cd name
</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord</snippet></ROW><ROW><id>12591674</id><snippet>--eject</snippet></ROW><ROW><id>12591674</id><snippet>dev=/dev/my</snippet></ROW><ROW><id>12591674</id><snippet>silly</snippet></ROW><ROW><id>12591674</id><snippet>cd</snippet></ROW><ROW><id>12591674</id><snippet>name</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord --eject dev='/dev/my silly cd name'
</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord</snippet></ROW><ROW><id>12591674</id><snippet>--eject</snippet></ROW><ROW><id>12591674</id><snippet>dev=/dev/my silly cd name</snippet></ROW><ROW><id>12591674</id><snippet>subprocess.call</snippet></ROW><ROW><id>12591674</id><snippet>subprocess.call(["cdrecord", "--eject", "dev=/dev/my silly cd name"])
</snippet></ROW><ROW><id>12591674</id><snippet>cdrecord</snippet></ROW><ROW><id>12591674</id><snippet>--eject</snippet></ROW><ROW><id>12591674</id><snippet>dev=/dev/my silly cd name</snippet></ROW><ROW><id>12591674</id><snippet>subprocess.call("cdrecord --eject dev='/dev/sg1'", shell=True)
</snippet></ROW><ROW><id>12591780</id><snippet>str(f)</snippet></ROW><ROW><id>12591780</id><snippet>str(5.2-5.0)</snippet></ROW><ROW><id>12591780</id><snippet>"0.2"</snippet></ROW><ROW><id>12591780</id><snippet>"0.20000000000000018"</snippet></ROW><ROW><id>12591780</id><snippet>repr(f)</snippet></ROW><ROW><id>12591780</id><snippet>repr(5.2-5.0)</snippet></ROW><ROW><id>12591780</id><snippet>"0.20000000000000018"</snippet></ROW><ROW><id>12591780</id><snippet>repr</snippet></ROW><ROW><id>12591780</id><snippet>print</snippet></ROW><ROW><id>12591780</id><snippet>str</snippet></ROW><ROW><id>12591875</id><snippet>line</snippet></ROW><ROW><id>12591875</id><snippet>thefile</snippet></ROW><ROW><id>12591875</id><snippet>def CleanFile(sourceFile):
    global thefile
    thefile=list(csv.reader(open(sourceFile, 'rb'), delimiter=',', quotechar='"'))
    for i, line in enumerate(thefile):
        if line[3]=='':
            del thefile[i]
</snippet></ROW><ROW><id>12591875</id><snippet>def CleanFile(sourceFile):
    global thefile
    thefile=[line for line in 
             csv.reader(open(sourceFile, 'rb'), delimiter=',', quotechar='"')) 
             if line[3] != '']
</snippet></ROW><ROW><id>12591875</id><snippet>line[3] == ''</snippet></ROW><ROW><id>12591875</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>12591875</id><snippet>def CleanFile(sourceFile):
    global thefile
    thefile=(line for line in 
             csv.reader(open(sourceFile, 'rb'), delimiter=',', quotechar='"')) 
             if line[3] != '')
</snippet></ROW><ROW><id>12591875</id><snippet>thefile</snippet></ROW><ROW><id>12591875</id><snippet>thefile</snippet></ROW><ROW><id>12592097</id><snippet>f = open(localFilePath, 'w')
f.write(urlopen(remoteFilePath).read())
f.close()
</snippet></ROW><ROW><id>12592144</id><snippet>excessData.encode('base64')
</snippet></ROW><ROW><id>12592144</id><snippet>.decode('base64')</snippet></ROW><ROW><id>12592543</id><snippet>&gt;&gt;&gt; import boto
&gt;&gt;&gt; autoscale = boto.connect_autoscale()
&gt;&gt;&gt; ec2 = boto.connect_ec2()
&gt;&gt;&gt; group = autoscale.get_all_groups(['mygroupname'])[0]
&gt;&gt;&gt; instance_ids = [i.id for i in group.instances]
&gt;&gt;&gt; reservations = ec2.get_all_instances(instance_ids)
&gt;&gt;&gt; instances = [i for r in reservations for i in r.instances]
</snippet></ROW><ROW><id>12592840</id><snippet>def count_rec(cursum, level):
    if level == 100:
        return 1
    res = 0
    for i in xrange(0, 100-cursum, level+1):
        res += count_rec(cursum+i, level+1)
    return res

print count_rec(0, 0)
</snippet></ROW><ROW><id>12592856</id><snippet>str(thefile)</snippet></ROW><ROW><id>12592856</id><snippet>repr(thefile)</snippet></ROW><ROW><id>12592856</id><snippet>print</snippet></ROW><ROW><id>12592856</id><snippet>file.write</snippet></ROW><ROW><id>12592856</id><snippet>csv</snippet></ROW><ROW><id>12592856</id><snippet>csv</snippet></ROW><ROW><id>12592856</id><snippet>list(csv.reader(open(filename, 'rb'), delimiter=',', quotechar='"'))[1:]
</snippet></ROW><ROW><id>12592856</id><snippet>csv.writer(open('foo.csv', 'wb'), delimiter=',', quotechar='"').writerows(thefile)
</snippet></ROW><ROW><id>12592856</id><snippet>with open('input.csv', 'rb') as infile, open('output.csv', 'wb') as outfile:
  incsv = csv.reader(infile, delimiter=',', quotechar='"')
  outcsv = csv.writer(outfile, delimiter=',', quotechar='"')
  incsv.read() # skip first line
  for line in incsv:
    if line[3] != '':
      outcsv.write(ProcessLine(line))
</snippet></ROW><ROW><id>12593202</id><snippet>df.xs(1, axis=1, level=0)
</snippet></ROW><ROW><id>12593261</id><snippet>time.sleep(seconds)</snippet></ROW><ROW><id>12593261</id><snippet>import time
strings = ["Hello","My name is blahblah","This is blah blah","blah blah","What's your name?"]

for txt in strings:
    print txt
    time.sleep(1)
</snippet></ROW><ROW><id>12593334</id><snippet>rfind()</snippet></ROW><ROW><id>12593334</id><snippet>rindex()</snippet></ROW><ROW><id>12593334</id><snippet>haystack = "aaaAAAbbbBBB"
needle   = "AAA"

pos = haystack.rfind(needle)

if pos &gt;= 0:
    print "found at", pos - len(haystack)
else:
    print "not found"
</snippet></ROW><ROW><id>12593391</id><snippet>None</snippet></ROW><ROW><id>12593391</id><snippet>0</snippet></ROW><ROW><id>12593391</id><snippet>""</snippet></ROW><ROW><id>12593391</id><snippet>[]</snippet></ROW><ROW><id>12593391</id><snippet>()</snippet></ROW><ROW><id>12593391</id><snippet>{}</snippet></ROW><ROW><id>12593391</id><snippet>__len__()</snippet></ROW><ROW><id>12593391</id><snippet>__nonzero__()</snippet></ROW><ROW><id>12593391</id><snippet>__bool__()</snippet></ROW><ROW><id>12593391</id><snippet>class trueint(int):
    def __nonzero__(self):
        return True
    __bool__ = __nonzero__    # Python 3

truezero = trueint(0)

if truezero:
    print("yep, this zero is true!")
</snippet></ROW><ROW><id>12593431</id><snippet>Django==1.4.1
South==0.7.6
git+git://github.com/fabric/fabric#egg=Fabric
git+git://github.com/toastdriven/django-tastypie.git@876c0541e2531d3b6e070ffab906f7c6e359c427#egg=django-tastypie
</snippet></ROW><ROW><id>12593431</id><snippet>pip install -r requirements.txt</snippet></ROW><ROW><id>12593595</id><snippet>re</snippet></ROW><ROW><id>12593595</id><snippet>regex</snippet></ROW><ROW><id>12593595</id><snippet>&gt;&gt;&gt; regex.findall(ur'\p{Lu}', u'ÜìÑ')
[u'\xdc', u'\xd1']
</snippet></ROW><ROW><id>12593717</id><snippet>telnet smtp.gmail.com 587

Trying 74.125.142.109...
Connected to gmail-smtp-msa.l.google.com.
Escape character is '^]'.
220 mx.google.com ESMTP aa4sm9457625igc.15
helo test.com
250 mx.google.com at your service
</snippet></ROW><ROW><id>12593795</id><snippet>class some_magic_adaptor:
  def __init__( self, it ):
    self.it = it
    self.next_chunk = ""
  def growChunk( self ):
    self.next_chunk = self.next_chunk + self.it.next()
  def read( self, n ):
    if self.next_chunk == None:
      return None
    try:
      while len(self.next_chunk)&lt;n:
        self.growChunk()
      rv = self.next_chunk[:n]
      self.next_chunk = self.next_chunk[n:]
      return rv
    except StopIteration:
      rv = self.next_chunk
      self.next_chunk = None
      return rv


def str_fn():
  for c in 'a', 'b', 'c':
    yield c * 3

ff = some_magic_adaptor( str_fn() )

while True:
  data = ff.read(4)
  if not data:
    break
  print data
</snippet></ROW><ROW><id>12593896</id><snippet>In [35]: st = dfrm.ix[:, ['id1', 'id2']].stack()

In [36]: all_ids = Series(st.index.get_level_values(1), 
                          st.index.get_level_values(0),
                          name='all_ids')[st.values]

In [37]: dfrm.join(all_ids, how='left')
Out[37]: 
   A    id1    id2 all_ids
0  1   True  False     id1
1  2   True   True     id1
1  2   True   True     id2
2  3  False  False     NaN
</snippet></ROW><ROW><id>12594010</id><snippet>import ssl
import base64
from socket import *


cc = socket(AF_INET, SOCK_STREAM)
cc.connect(("smtp.gmail.com", 587))
# cc.read(..)

cc.send('helo tester.com\r\n')
cc.send('starttls\r\n')
# cc.read(..) If the server responds ok to starttls
#             tls negotiation needs to happen and all
#             communication is then over the SSL socket 

scc = ssl.wrap_socket(cc, ssl_version=ssl.PROTOCOL_SSLv23)
scc.send('auth login\r\n')
# scc.read(..)

scc.send(base64.b64encode('username')+'\r\n')
scc.send(base64.b64encode('password')+'\r\n')

# css.send(
#  mail from:
#  rcpt to:
#  data
#  etc
</snippet></ROW><ROW><id>12594030</id><snippet>DataFrame.duplicated</snippet></ROW><ROW><id>12594030</id><snippet>DataFrame.drop_duplicates</snippet></ROW><ROW><id>12594203</id><snippet>class Restaurant(db.Model):
    ...

    dishes = db.relationship('Dish', secondary=restaurant_dish,
        backref=db.backref('restaurants'))
</snippet></ROW><ROW><id>12594203</id><snippet>x = Dish.query.filter(Dish.restaurants.any(name=name)).all()
</snippet></ROW><ROW><id>12594203</id><snippet>SELECT dish.*
FROM dish
WHERE
    EXISTS (
        SELECT 1
        FROM restaurant_dish
        WHERE
            dish.id = restaurant_dish.dish_id
            AND EXISTS (
                SELECT 1
                FROM restaurant
                WHERE
                    restaurant_dish.restaurant_id = restaurant.id
                    AND restaurant.name = :name
            )
    )
</snippet></ROW><ROW><id>12594315</id><snippet>#d = (('name-1', 100), ('name-2',90), ('name-3',80), ('name-1',80))
names = "name1,name2,name3,name1".split(",")
salaries = map(int,"100,90,80,80".split(","))
d = zip(names,salaries)
print max(d,key=lambda x:names.count(x[0])*1000+x[1])

#('name-1', 100)
print sorted(d,key=lambda x:names.count(x[0])*1000+x[1],reverse=True)
[('name-1', 100), ('name-1', 80), ('name-2', 90), ('name-3', 80)]
</snippet></ROW><ROW><id>12594354</id><snippet>method_b</snippet></ROW><ROW><id>12594441</id><snippet>activate()</snippet></ROW><ROW><id>12594441</id><snippet>last_valueList = []
while True:
    client_socket.send("loc\n")
    data = client_socket.recv(8192)
    valueList = data.split()

    if (not(valueList[-1] == "eom" and valueList[0] == "start")):
        #print "continuing.."
            continue

        if(screenw != int(valueList[2])):
            screenw = int(valueList[2])
            screenh = int(valueList[3])
    if valueList != last_valueList
        activate(valueList)
    last_valueList = valueList[:] # copy list
</snippet></ROW><ROW><id>12594789</id><snippet>import sys
import inspect

class My_Context(object):
    def __init__(self,mode=0):
        """
        if mode = 0, proceed as normal
        if mode = 1, do not execute block
        """
        self.mode=mode
    def __enter__(self):
        if self.mode==1:
            print 'Met block-skipping criterion ...'
            # Do some magic
            sys.settrace(lambda *args, **keys: None)
            frame = inspect.currentframe(1)
            frame.f_trace = self.trace
    def trace(self, frame, event, arg):
        raise
    def __exit__(self, type, value, traceback):
        print 'Exiting context ...'
        return True
</snippet></ROW><ROW><id>12594789</id><snippet>with My_Context(mode=1):
    print 'Executing block of code ...'
</snippet></ROW><ROW><id>12594789</id><snippet>with My_Context(mode=0):
    print 'Executing block of code ... '
</snippet></ROW><ROW><id>12594912</id><snippet>transaction.commit()</snippet></ROW><ROW><id>12594912</id><snippet>HTTPFound</snippet></ROW><ROW><id>12595082</id><snippet>import re
a = re.compile("^([A-Z][0-9]+)*$")
a.match(string)
</snippet></ROW><ROW><id>12595161</id><snippet>global myhp</snippet></ROW><ROW><id>12595210</id><snippet>xticks</snippet></ROW><ROW><id>12595210</id><snippet>pyplot.xticks([0, 1, 2, 3], ['a', 'b', 'c', 'd'])</snippet></ROW><ROW><id>12595210</id><snippet>np.arange</snippet></ROW><ROW><id>12595476</id><snippet>&gt;&gt;&gt; [g[:2] for g in re.findall(r'([0-9]+)\(([0-9]+|[0-9]+\.[0-9]+)\)', s)]
[('312', '21.1'), ('378', '25.5'), ('374', '25.3'), ('157', '10.6'),
('260', '17.6'), ('125', '28.1'), ('91', '20.4'), ('94', '21.1'),
('52', '11.7'), ('83', '18.7'), ('50', '28.4'), ('29', '16.5'), ('12', '6.8'),
('41', '23.3'), ('176', '100')]
</snippet></ROW><ROW><id>12595574</id><snippet>ingredients = models.ManyToManyField(Ingredients, blank=True, null=True,)
</snippet></ROW><ROW><id>12595587</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>12595587</id><snippet>arith_expr = operatorPrecedence(num,
    [
    (oneOf('-'), 1, opAssoc.RIGHT),
    (oneOf('* /'), 2, opAssoc.LEFT),
    (oneOf('+ -'), 2, opAssoc.LEFT),
    ])
</snippet></ROW><ROW><id>12595587</id><snippet>num("left") + "+" + num("right") + Optional("=") + Optional(num)("total")</snippet></ROW><ROW><id>12595587</id><snippet>arith_expr('lhs') + Optional('=' + arith_expr('rhs'))
</snippet></ROW><ROW><id>12595734</id><snippet>def SigAdd(x1,n1,x2,n2):
    n_l = min(n1[0], n2[0])
    n_h = max(n1[-1], n2[-1])
    n = arange(n_l, n_h+1)
    y = zeros(len(n), int)
    i = n1[0] - n[0]
    y[i:i+len(x1)] = x1
    i = n2[0] - n[0]
    y[i:i+len(x2)] += x2
    return y
</snippet></ROW><ROW><id>12595835</id><snippet>d:\</snippet></ROW><ROW><id>12595835</id><snippet>python c:/python27/lib/site-packages/django/bin/django-admin.py startproject mysite</snippet></ROW><ROW><id>12595835</id><snippet>cd mysite</snippet></ROW><ROW><id>12595835</id><snippet>python manage.py startapp polls</snippet></ROW><ROW><id>12595835</id><snippet>cd polls</snippet></ROW><ROW><id>12595835</id><snippet># polls/views.py
from django.shortcuts import render_to_response
def polls_home(request):
    return render_to_response("polls.html")

# polls/urls.py
from django.conf.urls import patterns, include, url
import views
urlpatterns = patterns ("",
                            url(r'^polls$', views.polls_home),
)
</snippet></ROW><ROW><id>12595835</id><snippet>polls</snippet></ROW><ROW><id>12595835</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12595835</id><snippet>url(r'^home$', include('polls.urls') ),</snippet></ROW><ROW><id>12595835</id><snippet>/home/polls</snippet></ROW><ROW><id>12596052</id><snippet>__getattribute__()</snippet></ROW><ROW><id>12596052</id><snippet>__getattribute__()</snippet></ROW><ROW><id>12596052</id><snippet>__getattr__</snippet></ROW><ROW><id>12596052</id><snippet>__getattribute__</snippet></ROW><ROW><id>12596052</id><snippet>__getattr__</snippet></ROW><ROW><id>12596052</id><snippet>f.__iter__</snippet></ROW><ROW><id>12596052</id><snippet>object</snippet></ROW><ROW><id>12596052</id><snippet>__iter__</snippet></ROW><ROW><id>12596052</id><snippet>self.file.__iter__</snippet></ROW><ROW><id>12596052</id><snippet>file</snippet></ROW><ROW><id>12596052</id><snippet>__iter__</snippet></ROW><ROW><id>12596742</id><snippet>class Tracker(object):
    instances = list()
    def __init__(self):
        self.__class__.instances.append(self)
    @classmethod
    def projeny(cls):
        print "There are currently %d instances of Tracker" % len(cls.instances)
        for instance in cls.instances:
            print instance


t1 = Tracker()
t2 = Tracker()
Tracker.projeny()
t3 = Tracker()
Tracker.projeny()
</snippet></ROW><ROW><id>12596742</id><snippet>There are currently 2 instances of Tracker
&lt;__main__.Tracker object at 0x02237A30&gt;
&lt;__main__.Tracker object at 0x02237AD0&gt;
There are currently 3 instances of Tracker
&lt;__main__.Tracker object at 0x02237A30&gt;
&lt;__main__.Tracker object at 0x02237AD0&gt;
&lt;__main__.Tracker object at 0x02237AF0&gt;
</snippet></ROW><ROW><id>12596852</id><snippet>access_log = logging.getLogger("tornado.access")
app_log = logging.getLogger("tornado.application")
gen_log = logging.getLogger("tornado.general")
</snippet></ROW><ROW><id>12596852</id><snippet>tornado.options.options['log_file_prefix'].set('/opt/logs/my_app.log')
tornado.options.parse_command_line()
</snippet></ROW><ROW><id>12596852</id><snippet>parse_command_line</snippet></ROW><ROW><id>12597181</id><snippet>split()</snippet></ROW><ROW><id>12597181</id><snippet>command = input("&gt; ")
user_input = command.lower().split()
command = user_input[0]
if len(user_input) &gt; 1:
    parameter = user_input[1]
    function_dict[command](parameter)
else:
    function_dict[command]()
</snippet></ROW><ROW><id>12597233</id><snippet>TypeError: wrapped() takes exactly 1 argument (2 given)
</snippet></ROW><ROW><id>12597233</id><snippet>def render_json(**defaults):
    def wrapped(result):
        variables = defaults.copy()
        variables.update(result)
        json_string = json.dumps(result, cls=GaeEncoder)
        return app.response_class(response=json_string, mimetype='application/json')                       
    return wrapped
</snippet></ROW><ROW><id>12597233</id><snippet>@view(school_blueprint, '/', render_html('school/index.html'))
</snippet></ROW><ROW><id>12597233</id><snippet>@view(school_blueprint, '/api/list', render_json)
</snippet></ROW><ROW><id>12597233</id><snippet>@view(school_blueprint, '/api/list', render_json())
</snippet></ROW><ROW><id>12597312</id><snippet>class SetApplicationName(object):
    def process_view(self, request, view_func, view_args, view_kwargs):
        request.current_app = view_func.__module__.split('.')[0]
</snippet></ROW><ROW><id>12597312</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>12597312</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>12597312</id><snippet>{{ request.current_app }}</snippet></ROW><ROW><id>12597312</id><snippet>{% navigation_menu request.current_app %}</snippet></ROW><ROW><id>12597481</id><snippet>\$</snippet></ROW><ROW><id>12597481</id><snippet> r"&lt;&lt;%#\$([^$]+)\$#%\s%#@([^@]+)@#%\s&gt;&gt;"
</snippet></ROW><ROW><id>12597481</id><snippet>&lt;&lt;%#$</snippet></ROW><ROW><id>12597481</id><snippet>$#%</snippet></ROW><ROW><id>12597481</id><snippet>%#@</snippet></ROW><ROW><id>12597481</id><snippet>@#%</snippet></ROW><ROW><id>12597481</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>12597709</id><snippet>re.sub</snippet></ROW><ROW><id>12597709</id><snippet>.group()</snippet></ROW><ROW><id>12597709</id><snippet>&gt;&gt;&gt; def my_replace(match):
...     match = match.group()
...     return match + str(match.index('e'))
...
&gt;&gt;&gt; re.sub(r'@\w+', my_replace, string)
'The quick @red2 fox jumps over the @lame4 brown dog.'
</snippet></ROW><ROW><id>12597858</id><snippet>-Wunused-function</snippet></ROW><ROW><id>12597858</id><snippet>-mno-fused-madd flag</snippet></ROW><ROW><id>12597858</id><snippet>psycopg library</snippet></ROW><ROW><id>12597858</id><snippet>Makefile</snippet></ROW><ROW><id>12597904</id><snippet>out = open(outfile, "w") 
for f in in_files:
    ...
    output_string = "{},{},{}\n".format(f, HOMO, LUMO)
    out.write(output_string)
</snippet></ROW><ROW><id>12598361</id><snippet>class ClassB(gtk.Window):
    def __init__(self, variable):
        #Your code
        self.variable = variable
</snippet></ROW><ROW><id>12598379</id><snippet>In [11]: df
Out[11]: 
   Form nr Element    Type   Test Options
0     1      Name1  select  text1     op1
1     1      Name1  select   text     op2
2     1      Name1  select   text     op3
3     1      Name2   input  text2     NaN
4     2      Name1   input  text2     NaN

In [12]: df.set_index(['Form', 'nr Element', 'Type', 'Test'])
Out[12]: 
                             Options
Form nr Element Type   Test         
1    Name1      select text1     op1
                       text      op2
                       text      op3
     Name2      input  text2     NaN
2    Name1      input  text2     NaN
</snippet></ROW><ROW><id>12598564</id><snippet>ct</snippet></ROW><ROW><id>12598564</id><snippet>ColorTable</snippet></ROW><ROW><id>12598564</id><snippet>null</snippet></ROW><ROW><id>12598564</id><snippet>if (ct != null)
{
// same code here
}
else
{
   return srcDS;
}
</snippet></ROW><ROW><id>12598831</id><snippet>numpy.where</snippet></ROW><ROW><id>12598831</id><snippet>    &gt;&gt;&gt;unicorns=np.array([[1, "black", 0.0, 'Pinky', 1] ,
                       [2, "black", 0.0, 'Winky', 1],
                       [3, "white", 0.0, 'Lala', 1],
                       [4, "white", 0.0, 'Merlin', 1],
                       [5, "black", 0.0, 'Meriva', 1],
                       [6, "white", 0.0, 'Panda', 1]])
    &gt;&gt;&gt; np.where(unicorns[:,1] == "black")
    (array([0, 1, 4]),)
    &gt;&gt;&gt; unicorns[np.where(unicorns[:,1] == "black")]
    array([['1', 'black', '0.0', 'Pinky', '1'],
    ['2', 'black', '0.0', 'Winky', '1'],
    ['5', 'black', '0.0', 'Meriva', '1']], 
    dtype='|S8')
</snippet></ROW><ROW><id>12599168</id><snippet>&lt;form ...&gt;
    {% for field in form.hidden_fields %}
        {{ field }}
    {% endfor %}

    {% for field in form.visible_fields %}
        {{ field.label }} {{ field }}
    {% endfor %}
&lt;/form&gt;
</snippet></ROW><ROW><id>12599243</id><snippet>run</snippet></ROW><ROW><id>12599243</id><snippet>connect</snippet></ROW><ROW><id>12599243</id><snippet>import envoy
p = envoy.connect("python -m SimpleHTTPServer 9999")
print "run here!"
p.kill()
</snippet></ROW><ROW><id>12599243</id><snippet>kill()</snippet></ROW><ROW><id>12599243</id><snippet>p.block()</snippet></ROW><ROW><id>12599290</id><snippet>ndarrays</snippet></ROW><ROW><id>12599290</id><snippet>MaskedArrays</snippet></ROW><ROW><id>12599290</id><snippet>ndarrays</snippet></ROW><ROW><id>12599290</id><snippet>MaskedArrays</snippet></ROW><ROW><id>12599290</id><snippet>ndarrays</snippet></ROW><ROW><id>12599290</id><snippet>__new__</snippet></ROW><ROW><id>12599290</id><snippet>__init__</snippet></ROW><ROW><id>12599290</id><snippet>__init__</snippet></ROW><ROW><id>12599290</id><snippet>__array_finalize__</snippet></ROW><ROW><id>12599290</id><snippet>__init__</snippet></ROW><ROW><id>12599290</id><snippet>__array_finalize__</snippet></ROW><ROW><id>12599290</id><snippet>ndarray</snippet></ROW><ROW><id>12599290</id><snippet>gridded_array</snippet></ROW><ROW><id>12599290</id><snippet>ndarrays</snippet></ROW><ROW><id>12599290</id><snippet>gridded_arrays</snippet></ROW><ROW><id>12599290</id><snippet>gridded_array</snippet></ROW><ROW><id>12599290</id><snippet>ndarray</snippet></ROW><ROW><id>12599290</id><snippet>MaskedArray</snippet></ROW><ROW><id>12599290</id><snippet>gridded_array._array</snippet></ROW><ROW><id>12599290</id><snippet>self._array</snippet></ROW><ROW><id>12599290</id><snippet>gridded_array</snippet></ROW><ROW><id>12599290</id><snippet>MaskedArray</snippet></ROW><ROW><id>12599290</id><snippet>nans</snippet></ROW><ROW><id>12599290</id><snippet>nans</snippet></ROW><ROW><id>12599290</id><snippet>gridded_array</snippet></ROW><ROW><id>12599290</id><snippet>ndarray</snippet></ROW><ROW><id>12599290</id><snippet>.view(np.ma.MaskedArray)</snippet></ROW><ROW><id>12599378</id><snippet>__getattr__</snippet></ROW><ROW><id>12599378</id><snippet>__setattr__</snippet></ROW><ROW><id>12599378</id><snippet>class SignedFileRequest(SignedRequest):
    __attr_map = dict(name=NAME_KEY, content_type=CONTENT_TYPE_KEY,
                      hash=HASH_KEY, node_id=NODE_ID_KEY)

    def __init__(self, host, path, node_id = None, name=None, \
                 content_type=None, hash=None, ssl=False, expires=0):
        super(SignedFileRequest, self).__init__(host, path, ssl, expires)
        self.name = name
        self.content_type = content_type
        self.hash = hash
        self.node_id = node_id

    def __getattr__(self, attr):
        if attr in self.__attr_map:
            return self.query_dict.get(self.__attr_map[attr])
        return super(SignedFileRequest, self).__getattr__(attr)

    def __setattr__(self, attr, value):
        if attr in self.__attr_map:
            self.query_dict[self.__attr_map[attr]] = value
        super(SignedFileRequest, self).__setattr__(attr, value)
</snippet></ROW><ROW><id>12599378</id><snippet>def add_property(klass, name, key):
    def getter(self):
        return self.query_dict.get(key)
    def setter(self, value):
        self.query_dict[key] = value
    setattr(klass, name, property(getter, setter))

def set_properties(**mapping):
    def decorator(klass):
        for name, key in mapping.iteritems():
            add_property(klass, name, key)
        return klass
    return decorator

@set_properties(name=NAME_KEY, content_type=CONTENT_TYPE_KEY,
                hash=HASH_KEY, node_id=NODE_ID_KEY)
class SignedFileRequest(SignedRequest):
    def __init__(self, host, path, node_id = None, name=None, \
                 content_type=None, hash=None, ssl=False, expires=0):
        super(SignedFileRequest, self).__init__(host, path, ssl, expires)
        self.name = name
        self.content_type = content_type
        self.hash = hash
        self.node_id = node_id
</snippet></ROW><ROW><id>12599378</id><snippet> def mapped_properties_meta(**mapping):
     def mapped_meta(name, bases, attrs):
         klass = type(name, bases, attrs)
         for name, key in mapping.iteritems():
             add_property(klass, name, key)
         return klass
     return mapped_meta


class SignedFileRequest(SignedRequest):
    __metaclass__ = mapped_properties_meta(
       name=NAME_KEY, content_type=CONTENT_TYPE_KEY,
       hash=HASH_KEY, node_id=NODE_ID_KEY)

    def __init__(self, host, path, node_id = None, name=None, \
                 content_type=None, hash=None, ssl=False, expires=0):
        super(SignedFileRequest, self).__init__(host, path, ssl, expires)
        self.name = name
        self.content_type = content_type
        self.hash = hash
        self.node_id = node_id
</snippet></ROW><ROW><id>12599378</id><snippet>add_property</snippet></ROW><ROW><id>12599479</id><snippet>a</snippet></ROW><ROW><id>12599479</id><snippet>for (name, mobile) in ab.iteritems():
    with open(...., "a") as f:
        print ('Contact %s at %s' % (name, mobile))
        f.write(name)
        f.write(mobile)
</snippet></ROW><ROW><id>12599479</id><snippet>w</snippet></ROW><ROW><id>12599479</id><snippet>writing</snippet></ROW><ROW><id>12599828</id><snippet>\S*?(?P&lt;mt&gt;\S*)\s+\S*(?P=mt)$
</snippet></ROW><ROW><id>12599828</id><snippet>a = 1000 * 'a'
b = 1000 * 'a' + 'b'
</snippet></ROW><ROW><id>12599973</id><snippet>{% for tablename in tablenames %}
    &lt;input type="checkbox" name="tn" value="{{ tablename }}" /&gt;
{% endfor %}
</snippet></ROW><ROW><id>12599973</id><snippet>.GET</snippet></ROW><ROW><id>12599973</id><snippet>.POST</snippet></ROW><ROW><id>12599973</id><snippet>tn = self.request.GET['tn']
</snippet></ROW><ROW><id>12600278</id><snippet>__init__.py</snippet></ROW><ROW><id>12600891</id><snippet>a = ...</snippet></ROW><ROW><id>12600891</id><snippet>...</snippet></ROW><ROW><id>12600891</id><snippet>2*3</snippet></ROW><ROW><id>12600891</id><snippet>zip(x,y)</snippet></ROW><ROW><id>12600891</id><snippet>raise Exception</snippet></ROW><ROW><id>12600891</id><snippet>a = (raise Exception)</snippet></ROW><ROW><id>12600891</id><snippet>b = (yield a)</snippet></ROW><ROW><id>12600891</id><snippet>send()</snippet></ROW><ROW><id>12600891</id><snippet>b</snippet></ROW><ROW><id>12601103</id><snippet>for x in test:
    print "Hello, {0}".format(x) 
</snippet></ROW><ROW><id>12601228</id><snippet>import xml.dom.minidom as  md
md.parse("config.xml")
#xml.parsers.expat.ExpatError: no element found: line 7, column 0


import elementtree.ElementTree as ET
tree = ET.parse("config.xml")
#xml.parsers.expat.ExpatError: no element found: line 7, column 0


from xml import sax
parser = sax.make_parser()
parser.parse("config.xml")
#xml.sax._exceptions.SAXParseException: config.xml:7:0: no element found


import xml.etree.cElementTree as et
et.parse("config.xml")
#cElementTree.ParseError: no element found: line 7, column 0

import xml.dom.pulldom as pd
doc = pd.parse("config.xml")
for event, node in doc:
     print event, node

#xml.sax._exceptions.SAXParseException: &lt;unknown&gt;:7:0: no element found

import lxml.etree
tree = lxml.etree.parse("config.xml")

#lxml.etree.XMLSyntaxError: Premature end of data in tag widget line 2, line 7, column 1
</snippet></ROW><ROW><id>12601228</id><snippet>lxml</snippet></ROW><ROW><id>12601228</id><snippet>"Premature end of data in tag widget line 2, line 7, column 1"
</snippet></ROW><ROW><id>12601228</id><snippet>config.xml</snippet></ROW><ROW><id>12601228</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;widget xmlns="http://www.w3.org/ns/widgets"&gt;
    &lt;icon src="icon.png"/&gt;
    &lt;content src="index.html"/&gt;
&lt;name&gt;sample&lt;/name&gt;
</snippet></ROW><ROW><id>12601319</id><snippet>R['segments'] = int(round(rollers[3]['segments']*roller_diameter/plate_diameter))  
</snippet></ROW><ROW><id>12601319</id><snippet>rollers[3]['segments']</snippet></ROW><ROW><id>12601319</id><snippet>roller_diameter</snippet></ROW><ROW><id>12601319</id><snippet>plate_diameter</snippet></ROW><ROW><id>12601319</id><snippet>TypeError: can't multiply sequence by non-int of type 'float'
</snippet></ROW><ROW><id>12601319</id><snippet>rollers[3]['segments']</snippet></ROW><ROW><id>12601319</id><snippet>roller_diameter</snippet></ROW><ROW><id>12601319</id><snippet>segments</snippet></ROW><ROW><id>12601319</id><snippet>rollers[3] = ['top_seg': 0, 'roller_diameter': [], 'segments': [], 'material': Rubber, 'direction': CW, 'ink': []}  
</snippet></ROW><ROW><id>12601319</id><snippet>R = rollers[i]  
</snippet></ROW><ROW><id>12601319</id><snippet>R</snippet></ROW><ROW><id>12601319</id><snippet>i</snippet></ROW><ROW><id>12601319</id><snippet>rollers</snippet></ROW><ROW><id>12601319</id><snippet>R</snippet></ROW><ROW><id>12601319</id><snippet>rollers[i]</snippet></ROW><ROW><id>12601319</id><snippet>i</snippet></ROW><ROW><id>12601319</id><snippet>R = rollers[3]</snippet></ROW><ROW><id>12601319</id><snippet>for i in range(num_rollers)</snippet></ROW><ROW><id>12601319</id><snippet>for j in..</snippet></ROW><ROW><id>12601319</id><snippet>    R = rollers[i]  
NameError: name 'i' is not defined
</snippet></ROW><ROW><id>12601319</id><snippet>i</snippet></ROW><ROW><id>12601319</id><snippet>i</snippet></ROW><ROW><id>12601319</id><snippet>def roller_data():  
    global roller_diameter  
    print i
    roller_diameter = float(raw_input("Enter the roller diameter" + str(i) + ': '))
</snippet></ROW><ROW><id>12601319</id><snippet>def read_diameter(i):
    return float(raw_input("Enter the roller diameter # {}: ".format(i)))
</snippet></ROW><ROW><id>12601319</id><snippet>rollers[i]['roller_diameter'] = read_diameter(i)
</snippet></ROW><ROW><id>12601319</id><snippet>roller_diameter</snippet></ROW><ROW><id>12601319</id><snippet>R['segments']</snippet></ROW><ROW><id>12601319</id><snippet>rollers[3]</snippet></ROW><ROW><id>12601319</id><snippet>rollers[i]</snippet></ROW><ROW><id>12601319</id><snippet>R</snippet></ROW><ROW><id>12601319</id><snippet>rollers[3]</snippet></ROW><ROW><id>12601319</id><snippet>rollers[i]</snippet></ROW><ROW><id>12601319</id><snippet>R = rollers[i]</snippet></ROW><ROW><id>12601319</id><snippet>i</snippet></ROW><ROW><id>12601742</id><snippet>string()</snippet></ROW><ROW><id>12601742</id><snippet>var fivespaces = new string(" ", 5);</snippet></ROW><ROW><id>12601742</id><snippet>Enumerable.Repeat</snippet></ROW><ROW><id>12601742</id><snippet>var items = Enumerable.Repeat(new SomeModel(), 5);</snippet></ROW><ROW><id>12601842</id><snippet>re</snippet></ROW><ROW><id>12601842</id><snippet>pattern1</snippet></ROW><ROW><id>12601842</id><snippet>pattern2</snippet></ROW><ROW><id>12601842</id><snippet>import re
re.split('\.gds|\.cdl', your_string)
</snippet></ROW><ROW><id>12601842</id><snippet>&gt;&gt;&gt; re.split('\.gds|\.cdl', "im fine.gds how are you")
['im fine', ' how are you']
&gt;&gt;&gt; re.split('\.gds|\.cdl', "im fine.cdl how are you")
['im fine', ' how are you']
&gt;&gt;&gt; re.split('\.gds|\.cdl', "im fine.cdl how are.gds you")
['im fine', ' how are', ' you']
</snippet></ROW><ROW><id>12602498</id><snippet>nl = [elem for elem in a if elem not in b]</snippet></ROW><ROW><id>12602498</id><snippet>set</snippet></ROW><ROW><id>12602498</id><snippet>bb= set(b)
nl = [elem for elem in a if elem not in bb]
</snippet></ROW><ROW><id>12602883</id><snippet>append</snippet></ROW><ROW><id>12602883</id><snippet>QCoreApplication</snippet></ROW><ROW><id>12602883</id><snippet>QCoreApplication.instance</snippet></ROW><ROW><id>12603283</id><snippet>curses</snippet></ROW><ROW><id>12603357</id><snippet>def listspaces(str):
    return [i for i, c in enumerate(str) if c==' ']
</snippet></ROW><ROW><id>12603357</id><snippet>function listspaces($str) {
    $spaces = array();

    foreach (str_split($str) as $i =&gt; $chr)
        if ($chr == ' ') $spaces[] = $i;

    return $spaces;
}
</snippet></ROW><ROW><id>12603357</id><snippet>function trimcopy($copy, $spaces, $length=350) {
    if (strlen($copy) &lt; $length) {
        return $copy;
    } else {
        foreach ($spaces as $space) {
            if ($space &lt; $length) {
                $loc = $space;
            } else {
                return substr($copy, 0, $loc);
            }
        }
    }
}
</snippet></ROW><ROW><id>12603357</id><snippet>wordwrap</snippet></ROW><ROW><id>12603528</id><snippet>.sort()</snippet></ROW><ROW><id>12603528</id><snippet>sorted()</snippet></ROW><ROW><id>12603528</id><snippet>&gt;&gt;&gt; a = [2, 3, 1]
&gt;&gt;&gt; a.sort()
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; b = [2, 3, 1]
&gt;&gt;&gt; sorted(b)
[1, 2, 3]
&gt;&gt;&gt; b
[2, 3, 1]
</snippet></ROW><ROW><id>12603555</id><snippet>import one
import two
import three

if __name__ == '__main__':
    one.foo()
    two.bar()
    three.baz()
</snippet></ROW><ROW><id>12603576</id><snippet>check_time = BaseTests.check_time
</snippet></ROW><ROW><id>12603576</id><snippet>from module_paths.base_posting import BaseTests
check_time = BaseTests.check_time

class SpecificTest(BaseTests):

    @check_time # use the decorator
    def test_post(self):
        # do testing ...
</snippet></ROW><ROW><id>12603576</id><snippet>check_time</snippet></ROW><ROW><id>12603640</id><snippet>User</snippet></ROW><ROW><id>12603640</id><snippet>user = DBSession.query(User).filter_by(login).first()</snippet></ROW><ROW><id>12603640</id><snippet>User.myfield</snippet></ROW><ROW><id>12603640</id><snippet>user.myfield</snippet></ROW><ROW><id>12603640</id><snippet>Column</snippet></ROW><ROW><id>12603640</id><snippet>Column</snippet></ROW><ROW><id>12603650</id><snippet>*args</snippet></ROW><ROW><id>12603650</id><snippet>def walk(self, *dogs):
    for dog in dogs:
        # handle each dog.
</snippet></ROW><ROW><id>12603650</id><snippet>owner.walk(onedog, anotherdog)
</snippet></ROW><ROW><id>12603650</id><snippet>owner.walk(*listofdogs)
</snippet></ROW><ROW><id>12603758</id><snippet>p = subprocess.Popen(command)
</snippet></ROW><ROW><id>12603758</id><snippet>p.poll</snippet></ROW><ROW><id>12603758</id><snippet>shell=True</snippet></ROW><ROW><id>12603758</id><snippet>command</snippet></ROW><ROW><id>12603758</id><snippet>shlex.split(command)</snippet></ROW><ROW><id>12603758</id><snippet>"</snippet></ROW><ROW><id>12603758</id><snippet>import shlex</snippet></ROW><ROW><id>12604127</id><snippet>tups</snippet></ROW><ROW><id>12604127</id><snippet>str.format()</snippet></ROW><ROW><id>12604130</id><snippet>$ telnet www.nativeseeds.org 80
Trying 208.113.230.85...
Connected to www.nativeseeds.org (208.113.230.85).
Escape character is '^]'.
HEAD / HTTP/1.1
Host: www.nativeseeds.org

HTTP/1.1 503 Service Temporarily Unavailable
Date: Wed, 26 Sep 2012 14:29:33 GMT
Server: Apache
Vary: Accept-Encoding
Connection: close
Content-Type: text/html; charset=iso-8859-1
</snippet></ROW><ROW><id>12604130</id><snippet>http</snippet></ROW><ROW><id>12604130</id><snippet>$ http -v head http://www.nativeseeds.org
HEAD / HTTP/1.1
Host: www.nativeseeds.org
Content-Type: application/x-www-form-urlencoded; charset=utf-8
Accept-Encoding: identity, deflate, compress, gzip
Accept: */*
User-Agent: HTTPie/0.2.2

HTTP/1.1 200 OK
Date: Wed, 26 Sep 2012 14:33:21 GMT
Server: Apache
P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"
Expires: Mon, 1 Jan 2001 00:00:00 GMT
Cache-Control: post-check=0, pre-check=0
Pragma: no-cache
Set-Cookie: f65129b0cd2c5e10c387f919ac90ad66=34hOijDSzeskKYtULx9V83; path=/
Last-Modified: Wed, 26 Sep 2012 14:33:23 GMT
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Length: 20
Content-Type: text/html; charset=utf-8
</snippet></ROW><ROW><id>12604237</id><snippet> rbf.nodes   # the factors for each of the RBF (probably gaussians)
 rbf.xi      # the centers.
 rbf.epsilon # the width of the gaussian, but remember that the Norm plays a role too
</snippet></ROW><ROW><id>12604237</id><snippet>rbf.xi</snippet></ROW><ROW><id>12604237</id><snippet>rbf.nodes</snippet></ROW><ROW><id>12604237</id><snippet>rbf.epsilon</snippet></ROW><ROW><id>12604237</id><snippet>__call__</snippet></ROW><ROW><id>12604237</id><snippet>_call_norm</snippet></ROW><ROW><id>12604237</id><snippet>sum(rbf.nodes[i] * gaussian(rbf.epsilon, sqrt((rbf.xi - center)**2)) for i, center in enumerate(rbf.nodes))</snippet></ROW><ROW><id>12604318</id><snippet>math.atan2()</snippet></ROW><ROW><id>12604378</id><snippet>for (i, (x1, x2)) in enumerate(zip(listone,listtwo)):
    if i != 3:
        print "The number is {0} the element is {1}".format(x1, x2)
</snippet></ROW><ROW><id>12604378</id><snippet>zip(listone,listtwo)</snippet></ROW><ROW><id>12604378</id><snippet>(listone[0],listtwo[0]), (listone[1],listtwo[1])...</snippet></ROW><ROW><id>12604378</id><snippet>enumerate(listone)</snippet></ROW><ROW><id>12604378</id><snippet>(0, listone[0]), (1, listone[1]), ...]</snippet></ROW><ROW><id>12604378</id><snippet>zip(range(len(listone)),listone)</snippet></ROW><ROW><id>12604378</id><snippet>0</snippet></ROW><ROW><id>12604378</id><snippet>3</snippet></ROW><ROW><id>12604524</id><snippet>&gt;&gt;&gt; 'Starting in {Duration}, the {Noun} will be {Adjective}'.format(Duration='24 hours', Noun='Coffee Maker', Adjective='broken')
'Starting in 24 hours, the Coffee Maker will be broken'
&gt;&gt;&gt; 'Starting in %(Duration)s, the %(Noun)s will be %(Adjective)s' % dict(Duration='24 hours', Noun='Coffee Maker', Adjective='broken')
'Starting in 24 hours, the Coffee Maker will be broken'
</snippet></ROW><ROW><id>12604524</id><snippet>&gt;&gt;&gt; from django.template import Context, Template
&gt;&gt;&gt; t = Template('Starting in {{Duration}}, the {{Noun}} will be {{Adjective}}') 
&gt;&gt;&gt; c = Context(dict(Duration='24 hours', Noun='Coffee Maker', Adjective='broken'))
&gt;&gt;&gt; t.render(c)
u'Starting in 24 hours, the Coffee Maker will be broken'
</snippet></ROW><ROW><id>12604750</id><snippet>s = s.replace("'", "")</snippet></ROW><ROW><id>12604750</id><snippet>.replace()</snippet></ROW><ROW><id>12604750</id><snippet>&gt;&gt;&gt; string = "he's a jolly good fellow"
&gt;&gt;&gt; string = string.replace("'", "") 
&gt;&gt;&gt; string
'hes a jolly good fellow'
</snippet></ROW><ROW><id>12604750</id><snippet>.join()</snippet></ROW><ROW><id>12604750</id><snippet>&gt;&gt;&gt; ids = ["1", "23", "123"]
&gt;&gt;&gt; ",".join(ids)
'1,23,123'
</snippet></ROW><ROW><id>12604750</id><snippet>followers['ids']</snippet></ROW><ROW><id>12604750</id><snippet>ids = ",".join(followers['ids'])  # generate string of ids (comma separated)
url = "https://api.twitter.com/1.1/users/lookup.json?user_id=%s" % ids
</snippet></ROW><ROW><id>12604750</id><snippet>followers['ids']</snippet></ROW><ROW><id>12604750</id><snippet>.join()</snippet></ROW><ROW><id>12604750</id><snippet>ids = ",".join(str(id) for id in followers['ids'])
</snippet></ROW><ROW><id>12605369</id><snippet>if counter[ip_addr] &gt; 9:
    #disconnect
else:
    counter[ip_addr] += 1
</snippet></ROW><ROW><id>12605468</id><snippet>class Tree:
    def __init__(self, node, cargo, parent=None):
        self.node = node
        self.cargo = cargo
        self.parent  = parent
    def __str__(self):
        return str(self.cargo)

from copy import copy
def just_part(y):
    z = copy(y)
    for k,v in z.items():
        if isinstance(v, list):
            del z[k]
    return z

def rt(y):
    tt = []
    s = Tree( id(y), just_part(y) )
    tt.append(s)
    def recurse(y):
        for k,v in y.iteritems(): 
            if isinstance(v, list):
                [tt.append( Tree(id(i), just_part(i), id(y) ) ) for i in v]
                [recurse(i) for i in v]
            else:
                pass
    recurse(y)
    return tt
</snippet></ROW><ROW><id>12605520</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12605520</id><snippet>from subprocess import Popen, PIPE

process = Popen(['swfdump', '/tmp/filename.swf', '-d'], stdout=PIPE)
stdout, stderr = process.communicate()
</snippet></ROW><ROW><id>12605520</id><snippet>os.popen</snippet></ROW><ROW><id>12605520</id><snippet>subprocess</snippet></ROW><ROW><id>12605542</id><snippet>import subprocess

command1 = subprocess.Popen(['command1', 'args1', 'arg2'])
command2 = subprocess.Popen(['command2', 'args1', 'arg2'])
</snippet></ROW><ROW><id>12605542</id><snippet>command1.wait()
print command1.stdout
</snippet></ROW><ROW><id>12605542</id><snippet>sleep = subprocess.Popen(['sleep', '60'])
sleep.wait()
print sleep.stdout  # sleep outputs nothing but...
print sleep.returncode  # you get the exit value
</snippet></ROW><ROW><id>12605679</id><snippet>assert</snippet></ROW><ROW><id>12605679</id><snippet>assert</snippet></ROW><ROW><id>12605679</id><snippet>__builtins__</snippet></ROW><ROW><id>12605679</id><snippet>__init__</snippet></ROW><ROW><id>12605873</id><snippet>alpha</snippet></ROW><ROW><id>12606270</id><snippet>for src in sources:
    self.feedback.append('Copying: %s' % src)
    QtGui.qApp.processEvents()
    shutil.copy(src, dst)
</snippet></ROW><ROW><id>12606327</id><snippet>from subprocess import check_output as qx

cmd = r'C:\Tools\Dvb_pid_3_0.exe'
output = qx(cmd)
</snippet></ROW><ROW><id>12606327</id><snippet>from subprocess import STDOUT

output = qx(cmd, stderr=STDOUT)
</snippet></ROW><ROW><id>12606327</id><snippet>lines = output.splitlines()
</snippet></ROW><ROW><id>12606327</id><snippet>from subprocess import Popen, PIPE

p = Popen(cmd, stdout=PIPE, bufsize=1)
for line in iter(p.stdout.readline, ''):
    print line,
p.stdout.close()
if p.wait() != 0:
   raise RuntimeError("%r failed, exit status: %d" % (cmd, p.returncode))
</snippet></ROW><ROW><id>12606327</id><snippet>stderr=STDOUT</snippet></ROW><ROW><id>12606327</id><snippet>Popen()</snippet></ROW><ROW><id>12606327</id><snippet>cmd</snippet></ROW><ROW><id>12606327</id><snippet>winpexpect</snippet></ROW><ROW><id>12606327</id><snippet>import subprocess

with open('output.txt', 'wb') as f:
    subprocess.check_call(cmd, stdout=f)

# to read line by line
with open('output.txt') as f:
    for line in f:
        print line,
</snippet></ROW><ROW><id>12606327</id><snippet>cmd</snippet></ROW><ROW><id>12606327</id><snippet>stdin</snippet></ROW><ROW><id>12606327</id><snippet>import os

with open(os.devnull, 'rb') as DEVNULL:
    output = qx(cmd, stdin=DEVNULL) # use subprocess.DEVNULL on Python 3.3+
</snippet></ROW><ROW><id>12606327</id><snippet>import os
from subprocess import STDOUT, check_call as x

with open(os.devnull, 'rb') as DEVNULL, open('output.txt', 'wb') as f:
    x(cmd, stdin=DEVNULL, stdout=f, stderr=STDOUT)
</snippet></ROW><ROW><id>12606327</id><snippet>.communicate()</snippet></ROW><ROW><id>12606327</id><snippet>#!/usr/bin/env python
from subprocess import Popen, PIPE

cmd = ["python", "test.py"]
p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE, universal_newlines=True)
stdout_text, stderr_text = p.communicate(input="1\n\n")

print("stdout: %r\nstderr: %r" % (stdout_text, stderr_text))
if p.returncode != 0:
    raise RuntimeError("%r failed, status code %d" % (cmd, p.returncode))
</snippet></ROW><ROW><id>12606327</id><snippet>test.py</snippet></ROW><ROW><id>12606327</id><snippet>print raw_input('abc')[::-1]
raw_input('press enter to exit')
</snippet></ROW><ROW><id>12606327</id><snippet>winpexpect</snippet></ROW><ROW><id>12606327</id><snippet>pexpect</snippet></ROW><ROW><id>12606327</id><snippet># This connects to the openbsd ftp site and
# downloads the recursive directory listing.
from winpexpect import winspawn as spawn

child = spawn ('ftp ftp.openbsd.org')
child.expect ('Name .*: ')
child.sendline ('anonymous')
child.expect ('Password:')
child.sendline ('noah@example.com')
child.expect ('ftp&gt; ')
child.sendline ('cd pub')
child.expect('ftp&gt; ')
child.sendline ('get ls-lR.gz')
child.expect('ftp&gt; ')
child.sendline ('bye')
</snippet></ROW><ROW><id>12606327</id><snippet>F3</snippet></ROW><ROW><id>12606327</id><snippet>F10</snippet></ROW><ROW><id>12606327</id><snippet>SendKeys</snippet></ROW><ROW><id>12606327</id><snippet>SendKeys-ctypes</snippet></ROW><ROW><id>12606327</id><snippet>from SendKeys import SendKeys

SendKeys(r"""
    {LWIN}
    {PAUSE .25}
    r
    C:\Tools\Dvb_pid_3_0.exe{ENTER}
    {PAUSE 1}
    1{ENTER}
    {PAUSE 1}
    2{ENTER}
    {PAUSE 1}
    {F3}
    {PAUSE 1}
    {F10}
""")
</snippet></ROW><ROW><id>12606371</id><snippet>your_basket.items.add(your_item)
</snippet></ROW><ROW><id>12606396</id><snippet>URLSafeTimedSerializer()</snippet></ROW><ROW><id>12606625</id><snippet>{{=row.datetime_field.strftime("%d/%m/%Y")}}
</snippet></ROW><ROW><id>12606625</id><snippet>25/09/2012</snippet></ROW><ROW><id>12606625</id><snippet>{{=row.datetime_field.date}}
</snippet></ROW><ROW><id>12606625</id><snippet>db.mytable.datetime_field.represent = lambda value, row: value.strftime("format-here")
</snippet></ROW><ROW><id>12606625</id><snippet>strftime</snippet></ROW><ROW><id>12606698</id><snippet># To gather together all of the dependencies (ex: pymongo, ujson):
easy_install -zmaxd /my/packaging/directory pymongo&gt;=2.3 ujson

# Secondarily, package my custom module
/mymodule/setup.py sdist
cp /mymodule/dist/mymodule.tar /my/packaging/directory/
</snippet></ROW><ROW><id>12606698</id><snippet>easy_install -H None -f file:///installed/packaging/directory mymodule
</snippet></ROW><ROW><id>12607095</id><snippet>xaxis.major_formatter</snippet></ROW><ROW><id>12607095</id><snippet>FixedFormatter</snippet></ROW><ROW><id>12607095</id><snippet>''</snippet></ROW><ROW><id>12607095</id><snippet>major_formatter</snippet></ROW><ROW><id>12607095</id><snippet>FixedFormatter</snippet></ROW><ROW><id>12607095</id><snippet>''</snippet></ROW><ROW><id>12607095</id><snippet>axes</snippet></ROW><ROW><id>12607095</id><snippet>format_coord</snippet></ROW><ROW><id>12607365</id><snippet>(start x position, end x position, y position)</snippet></ROW><ROW><id>12607365</id><snippet>2</snippet></ROW><ROW><id>12607566</id><snippet>#!/bin/sh
"""":
python2 -c "" 2&gt;/dev/null &amp;&amp; exec python2 $0 ${1+"$@"}
python  -c "" 2&gt;/dev/null &amp;&amp; exec python  $0 ${1+"$@"}
echo "Could not find a python interpreter."
exit 1
"""

print "hello python"
</snippet></ROW><ROW><id>12607646</id><snippet>connect()</snippet></ROW><ROW><id>12607646</id><snippet>cs.sendto(&lt;data&gt;, ('255.255.255.255', 5455))
</snippet></ROW><ROW><id>12607646</id><snippet>from socket import *
cs = socket(AF_INET, SOCK_DGRAM)
cs.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
cs.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
cs.sendto('This is a test', ('255.255.255.255', 54545))
</snippet></ROW><ROW><id>12607646</id><snippet>tcpdump -i eth1 port 54545 -XX
listening on eth1, link-type EN10MB (Ethernet), capture size 65535 bytes

14:04:01.797259 IP 10.22.4.45.33749 &gt; 255.255.255.255.54545: UDP, length 14
0x0000:  ffff ffff ffff f0de f1c4 8aa6 0800 4500  ..............E.
0x0010:  002a 0000 4000 4011 2c81 0a16 042d ffff  .*..@.@.,....-..
0x0020:  ffff 83d5 d511 0016 fe38 5468 6973 2069  .........8This.i
0x0030:  7320 6120 7465 7374 0000 0000            s.a.test....
</snippet></ROW><ROW><id>12607793</id><snippet>relativePath</snippet></ROW><ROW><id>12607793</id><snippet>relativePath = os.path.join(currentPath, '..', '..', 'folder')
</snippet></ROW><ROW><id>12607941</id><snippet>[1]</snippet></ROW><ROW><id>12607941</id><snippet>[1]</snippet></ROW><ROW><id>12607992</id><snippet>for pageNumber, page in enumerate(PDFDocument.get_pages()):
    if pageNumber == 42:
        #do something with the page
</snippet></ROW><ROW><id>12608267</id><snippet>[name for name, method in Class.__dict__.iteritems() if callable(method)]
</snippet></ROW><ROW><id>12608267</id><snippet>[name for name, method in Class.__dict__.items() if hasattr(method,'__call__')]
</snippet></ROW><ROW><id>12608385</id><snippet>r'(?&lt;=\.)\d+,\d+(?=\.)'
</snippet></ROW><ROW><id>12608385</id><snippet>&gt;&gt;&gt; re.findall(r'(?&lt;=\.)\d+,\d+(?=\.)', 'Test7.5,6.7,8.test')
['5,6', '7,8']
</snippet></ROW><ROW><id>12608385</id><snippet>import re
def split_it(s):
    pieces = re.split(r'\.(?=\d+,\d+\.)', s)
    pieces[-1:] = pieces[-1].rsplit('.', 1) # split off extension
    return pieces
</snippet></ROW><ROW><id>12608385</id><snippet>&gt;&gt;&gt; print split_it('Test1.0,0.csv')
['Test1', '0,0', 'csv']
&gt;&gt;&gt; print split_it('Test2.wma')
['Test2', 'wma']
&gt;&gt;&gt; print split_it('Test3.1100,456.jpg')
['Test3', '1100,456', 'jpg']
&gt;&gt;&gt; print split_it('T.E.S.T.4.5,6.png')
['T.E.S.T.4', '5,6', 'png']
&gt;&gt;&gt; print split_it('Test5,7,8.sss')
['Test5,7,8', 'sss']
&gt;&gt;&gt; print split_it('Test6.2,3,4.png')
['Test6.2,3,4', 'png']
&gt;&gt;&gt; print split_it('Test7.5,6.7,8.test')
['Test7', '5,6', '7,8', 'test']
</snippet></ROW><ROW><id>12608640</id><snippet>getfrompair</snippet></ROW><ROW><id>12608640</id><snippet>izip</snippet></ROW><ROW><id>12608640</id><snippet>from itertools import izip

for line,line2 in izip(infile, infile2):
</snippet></ROW><ROW><id>12608830</id><snippet>&gt;&gt;&gt; ranges = ['chr1:100-200', 'chr1:350-500', 'chr1:780-880', 'chr1:900-950']
&gt;&gt;&gt; accums = [100, 250, 350, 400]
&gt;&gt;&gt; ranges[bisect.bisect_left(accums, 120)]
'chr1:350-500'
&gt;&gt;&gt; ranges[bisect.bisect_left(accums, 360)]
'chr1:900-950'
</snippet></ROW><ROW><id>12608903</id><snippet>import logging

log = logging.getLogger('my_test_log')
sublog = logging.getLogger('my_test_log.sublog')

log.setLevel(logging.ERROR)
handler = logging.StreamHandler()
handler.setLevel(logging.ERROR)
log.addHandler(handler)

...
</snippet></ROW><ROW><id>12608937</id><snippet>plt.xticks</snippet></ROW><ROW><id>12608937</id><snippet>plt.xticks(np.arange(min(x), max(x)+1, 1.0))
</snippet></ROW><ROW><id>12608937</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = [0,5,9,10,15]
y = [0,1,2,3,4]
plt.plot(x,y)
plt.xticks(np.arange(min(x), max(x)+1, 1.0))
plt.show()
</snippet></ROW><ROW><id>12608937</id><snippet>np.arange</snippet></ROW><ROW><id>12608937</id><snippet>range</snippet></ROW><ROW><id>12608937</id><snippet>min(x)</snippet></ROW><ROW><id>12608937</id><snippet>max(x)</snippet></ROW><ROW><id>12608937</id><snippet>plt.plot</snippet></ROW><ROW><id>12608937</id><snippet>ax.plot</snippet></ROW><ROW><id>12608937</id><snippet>x</snippet></ROW><ROW><id>12608937</id><snippet>y</snippet></ROW><ROW><id>12608937</id><snippet>ax.get_xlim()</snippet></ROW><ROW><id>12608937</id><snippet>start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, stepsize))
</snippet></ROW><ROW><id>12608937</id><snippet>ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
</snippet></ROW><ROW><id>12608937</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

x = [0,5,9,10,15]
y = [0,1,2,3,4]
fig, ax = plt.subplots()
ax.plot(x,y)
start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, 0.712123))
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
plt.show()
</snippet></ROW><ROW><id>12608947</id><snippet>pandas</snippet></ROW><ROW><id>12608947</id><snippet>args</snippet></ROW><ROW><id>12608947</id><snippet>apply</snippet></ROW><ROW><id>12608947</id><snippet>df.apply(discardValueLessThan, args=(0.1,))
</snippet></ROW><ROW><id>12608947</id><snippet>df.apply(discardValueLessThan, threshold=0.1)
</snippet></ROW><ROW><id>12608947</id><snippet>ValueError: ('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()', 'occurred at index A')
</snippet></ROW><ROW><id>12608947</id><snippet>apply</snippet></ROW><ROW><id>12608947</id><snippet>applymap</snippet></ROW><ROW><id>12608947</id><snippet>In [47]: df = DataFrame(np.random.randn(3, 3), columns=['A', 'B', 'C'])

In [48]: df
Out[48]: 
          A         B         C
0 -0.135336 -0.274687  1.480949
1 -1.079800 -0.618610 -0.321235
2 -0.610420 -0.422112  0.102703

In [49]: df1 = df.applymap(lambda x: discardValueLessThan(x, 0.1))

In [50]: df1
Out[50]: 
   A  B         C
0  0  0  1.480949
1  0  0  0.000000
2  0  0  0.102703
</snippet></ROW><ROW><id>12608947</id><snippet>In [51]: df[df &lt; 0.1] = 0

In [52]: df
Out[52]: 
   A  B         C
0  0  0  1.480949
1  0  0  0.000000
2  0  0  0.102703
</snippet></ROW><ROW><id>12608991</id><snippet>timesince</snippet></ROW><ROW><id>12609007</id><snippet>mkstemp</snippet></ROW><ROW><id>12609007</id><snippet>ffmpeg</snippet></ROW><ROW><id>12609007</id><snippet>ffmpeg -y</snippet></ROW><ROW><id>12609156</id><snippet>os.path.join('a', '/b')</snippet></ROW><ROW><id>12609156</id><snippet>/b</snippet></ROW><ROW><id>12609156</id><snippet>os.path.join(os.getcwd(), filename)
</snippet></ROW><ROW><id>12609156</id><snippet>In [54]: os.getcwd()
Out[54]: '/tmp'

In [55]: os.path.join(os.getcwd(), 'foo')
Out[55]: '/tmp/foo'

In [56]: os.path.join(os.getcwd(), '/foo/bar')
Out[56]: '/foo/bar'
</snippet></ROW><ROW><id>12609318</id><snippet>info</snippet></ROW><ROW><id>12609318</id><snippet>dpi = im.info['dpi']  # Warning, throws KeyError if no DPI was set to begin with

# resize, etc.

out.save("out.jpg", dpi=dpi)
</snippet></ROW><ROW><id>12609555</id><snippet>pip install http://gevent.googlecode.com/files/gevent-1.0b4.tar.gz
</snippet></ROW><ROW><id>12609555</id><snippet>pip install https://github.com/downloads/SiteSupport/gevent/gevent-1.0b4.tar.gz
</snippet></ROW><ROW><id>12609656</id><snippet>'Edytuj'.join('\n')</snippet></ROW><ROW><id>12609656</id><snippet>'\n'</snippet></ROW><ROW><id>12609656</id><snippet>if any('Edytuj' in line for line in lines):
   pass #...
</snippet></ROW><ROW><id>12609656</id><snippet>if 'Edytuj\n' in lines:
</snippet></ROW><ROW><id>12609779</id><snippet>List Comprehension</snippet></ROW><ROW><id>12609779</id><snippet>newList = [[each_list[i] for i in list1] for each_list in list2]
</snippet></ROW><ROW><id>12609829</id><snippet>urllib2</snippet></ROW><ROW><id>12609829</id><snippet>requests</snippet></ROW><ROW><id>12609889</id><snippet>&gt;&gt;&gt; from os.path import exists
&gt;&gt;&gt; exists('dog.png')
True
&gt;&gt;&gt; exists('dog.png\n')
False
</snippet></ROW><ROW><id>12609889</id><snippet>path</snippet></ROW><ROW><id>12609897</id><snippet>pdb.gimp_layer_group_new(img)</snippet></ROW><ROW><id>12609897</id><snippet>pdb.gimp_image_insert_layer(image, layer, &lt;parent (use None for top level)&gt;, &lt;position&gt;)</snippet></ROW><ROW><id>12609990</id><snippet>$f</snippet></ROW><ROW><id>12609990</id><snippet>storage/inputfile.txt</snippet></ROW><ROW><id>12609990</id><snippet>test/</snippet></ROW><ROW><id>12609990</id><snippet>test/storage</snippet></ROW><ROW><id>12610033</id><snippet>.split</snippet></ROW><ROW><id>12610033</id><snippet>&gt;&gt;&gt; file = 'foo_bar_1_10.asc.gz'
&gt;&gt;&gt; pieces = file.split('.')
&gt;&gt;&gt; pieces
['foo_bar_1_10', 'asc', 'gz']
</snippet></ROW><ROW><id>12610033</id><snippet>&gt;&gt;&gt; subpieces = pieces[0].split('_')
&gt;&gt;&gt; subpieces
['foo', 'bar', '1', '10']
</snippet></ROW><ROW><id>12610033</id><snippet>&gt;&gt;&gt; numbers = ' '.join(subpieces[-2:])
&gt;&gt;&gt; numbers
'1 10'
</snippet></ROW><ROW><id>12610231</id><snippet>&gt;&gt;&gt; re.findall(r'\B#([^,\W]+)', '#This string cont#ains #four, and #only four #hashtags.')
['This', 'four', 'only', 'hashtags']
</snippet></ROW><ROW><id>12610231</id><snippet>\B</snippet></ROW><ROW><id>12610231</id><snippet>r'py\B'</snippet></ROW><ROW><id>12610231</id><snippet>'python'</snippet></ROW><ROW><id>12610231</id><snippet>'py3'</snippet></ROW><ROW><id>12610231</id><snippet>'py2'</snippet></ROW><ROW><id>12610231</id><snippet>'py'</snippet></ROW><ROW><id>12610231</id><snippet>'py.'</snippet></ROW><ROW><id>12610231</id><snippet>'py!'</snippet></ROW><ROW><id>12610231</id><snippet>\B</snippet></ROW><ROW><id>12610231</id><snippet>\b</snippet></ROW><ROW><id>12610231</id><snippet>LOCALE</snippet></ROW><ROW><id>12610231</id><snippet>UNICODE</snippet></ROW><ROW><id>12610231</id><snippet>\W</snippet></ROW><ROW><id>12610231</id><snippet>LOCALE</snippet></ROW><ROW><id>12610231</id><snippet>UNICODE</snippet></ROW><ROW><id>12610231</id><snippet>[^a-zA-Z0-9_]</snippet></ROW><ROW><id>12610231</id><snippet>[0-9_]</snippet></ROW><ROW><id>12610231</id><snippet>UNICODE</snippet></ROW><ROW><id>12610231</id><snippet>[0-9_]</snippet></ROW><ROW><id>12610245</id><snippet>with open("some.txt") as f:
    file_data = f.read()
</snippet></ROW><ROW><id>12610245</id><snippet>codons = [file_data[i:i+3] for i in range(0,len(file_data),3)]
</snippet></ROW><ROW><id>12610245</id><snippet>print codons.count('aaa')
</snippet></ROW><ROW><id>12610245</id><snippet>&gt;&gt;&gt; my_codons = 'atgaaaccaaag'
&gt;&gt;&gt; codons = [my_codons[i:i+3] for i in range(0,len(my_codons),3)]
&gt;&gt;&gt; codons
['atg', 'aaa', 'cca', 'aag']
&gt;&gt;&gt; codons.count('aaa')
1
</snippet></ROW><ROW><id>12610675</id><snippet>configparser</snippet></ROW><ROW><id>12610675</id><snippet>class dkconfig(configparser.ConfigParser):
    # ....
</snippet></ROW><ROW><id>12611509</id><snippet>import pandas, numpy as np
df = pandas.io.parsers.read_csv("baseline.csv")
df["month"] = df["time2"].map(lambda x: int(x.split('-')[1]))
df.groupby(["license","month"]).apply(len)
</snippet></ROW><ROW><id>12611509</id><snippet>license  month
AAM7676  2        3
         3        1
         5        1
         8        1
AAO9229  1        1
AAP0678  4        1
         5        1
         6        1
AAU6100  1        2
         2        1
         3        1
</snippet></ROW><ROW><id>12611509</id><snippet>t = df.groupby(["license","month"]).apply(len)
t.unstack(level=0).reindex(index=range(1,13), fill_value=0).T.fillna(0)
</snippet></ROW><ROW><id>12611509</id><snippet>               1   2   3   4   5   6   7   8   9   10  11  12
      license
count AAM7676   0   3   1   0   1   0   0   1   0   0   0   0
      AAO9229   1   0   0   0   0   0   0   0   0   0   0   0
      AAP0678   0   0   0   1   1   1   0   0   0   0   0   0
      AAU6100   2   1   1   0   0   0   0   0   0   0   0   0
</snippet></ROW><ROW><id>12611576</id><snippet>\r</snippet></ROW><ROW><id>12611576</id><snippet>\s</snippet></ROW><ROW><id>12611576</id><snippet>match = re.search(r'&gt;(\w+)\s+(\w+)', line)
if match:
    tag, gene = match.groups()
    myDict[tag] = gene
</snippet></ROW><ROW><id>12611576</id><snippet>.groups()</snippet></ROW><ROW><id>12611576</id><snippet>tag</snippet></ROW><ROW><id>12611576</id><snippet>gene</snippet></ROW><ROW><id>12611576</id><snippet>\r</snippet></ROW><ROW><id>12611576</id><snippet>myDict = dict()

with open('d.fasta', 'rU') as fileData:
    tag = None
    for line in fileData:
        line = line.strip()
        if not line:
            continue
        if line[0] == '&gt;':
            tag = line[1:]
            myDict[tag] = ''
        else:
            assert tag is not None, 'Invalid format, found gene without tag'
            myDict[tag] += line

print myDict
</snippet></ROW><ROW><id>12611576</id><snippet>&gt;</snippet></ROW><ROW><id>12611576</id><snippet>rU</snippet></ROW><ROW><id>12611576</id><snippet>Bio.SeqIO</snippet></ROW><ROW><id>12611586</id><snippet>def getLen(obj):
    val = nested_getattr(obj, field)
    if val is None:
        return 0
    else:
        return len(val)
return maxk(obj, key=getLen)
</snippet></ROW><ROW><id>12611586</id><snippet>&gt;&gt;&gt; f = lambda x: x**2
&gt;&gt;&gt; def g(x):
...     return x**2
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  1           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_POWER        
              7 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_POWER        
              7 RETURN_VALUE     
</snippet></ROW><ROW><id>12611601</id><snippet>ElementTree</snippet></ROW><ROW><id>12611601</id><snippet>ElementTree</snippet></ROW><ROW><id>12611601</id><snippet>os.walk()</snippet></ROW><ROW><id>12611601</id><snippet>os.walk()</snippet></ROW><ROW><id>12611601</id><snippet>ElementTree</snippet></ROW><ROW><id>12611601</id><snippet>lxml</snippet></ROW><ROW><id>12611601</id><snippet>import os
from lxml import etree


def dir_as_tree(path):
    """Recursive function that walks a directory and returns a tree
    of nested etree nodes.
    """
    basename = os.path.basename(path)
    node = etree.Element("node")
    node.attrib['name'] = basename
    # Gather some more information on this path here
    # and write it to attributes
    # ...
    if os.path.isdir(path):
        # Recurse
        node.tag = 'dir'
        for item in sorted(os.listdir(path)):
            item_path = os.path.join(path, item)
            child_node = dir_as_tree(item_path)
            node.append(child_node)
        return node
    else:
        node.tag = 'file'
        return node

# Create a tree of the current working directory
cwd = os.getcwd()
root = dir_as_tree(cwd)

# Create an element tree from the root node
# (in order to serialize it to a complete XML document)
tree = etree.ElementTree(root)

xml_document = etree.tostring(tree,
                              pretty_print=True,
                              xml_declaration=True,
                              encoding='utf-8')
print xml_document
</snippet></ROW><ROW><id>12611601</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;dir name="dirwalker"&gt;
  &lt;dir name="top1"&gt;
    &lt;file name="foobar.txt"/&gt;
    &lt;dir name="sub1"/&gt;
  &lt;/dir&gt;
  &lt;dir name="top2"&gt;
    &lt;dir name="sub2"/&gt;
  &lt;/dir&gt;
  &lt;dir name="top3"&gt;
    &lt;dir name="sub3"&gt;
      &lt;dir name="sub_a"/&gt;
      &lt;dir name="sub_b"/&gt;
    &lt;/dir&gt;
  &lt;/dir&gt;
  &lt;file name="topfile1.txt"/&gt;
  &lt;file name="walker.py"/&gt;
&lt;/dir&gt;
</snippet></ROW><ROW><id>12611732</id><snippet>numSims = (int)line</snippet></ROW><ROW><id>12611732</id><snippet>int</snippet></ROW><ROW><id>12611732</id><snippet>numSims = int(line)
</snippet></ROW><ROW><id>12611732</id><snippet>Int</snippet></ROW><ROW><id>12611732</id><snippet>row = (Int)(xyLine.split(" ")[0])
col = (Int)(xyLine.split(" ")[1])
</snippet></ROW><ROW><id>12611732</id><snippet>row = int(xyLine.split()[0])
col = int(xyLine.split()[1])
</snippet></ROW><ROW><id>12611732</id><snippet>.split()</snippet></ROW><ROW><id>12611732</id><snippet>" "</snippet></ROW><ROW><id>12611732</id><snippet>row, col = map(int, xyLine.split())
</snippet></ROW><ROW><id>12611732</id><snippet>k</snippet></ROW><ROW><id>12611732</id><snippet>while k &lt; numSims:</snippet></ROW><ROW><id>12611732</id><snippet>for</snippet></ROW><ROW><id>12611732</id><snippet>for k in xrange(numSims):
</snippet></ROW><ROW><id>12611732</id><snippet>while</snippet></ROW><ROW><id>12611732</id><snippet>for variable in xrange(upperlimit):</snippet></ROW><ROW><id>12611732</id><snippet>.charAt</snippet></ROW><ROW><id>12611732</id><snippet>[index]</snippet></ROW><ROW><id>12611732</id><snippet>if myLine[j] == 'A':
</snippet></ROW><ROW><id>12611732</id><snippet>myLine[j] == 'A'</snippet></ROW><ROW><id>12611732</id><snippet>Spot()</snippet></ROW><ROW><id>12611732</id><snippet>for i in xrange(row):
    myLine = f.readLine()
    for j in xrange(col):
        cls.myMap[i][j] = Spot(myLine[j] == 'A')
</snippet></ROW><ROW><id>12611732</id><snippet>numSims = 0</snippet></ROW><ROW><id>12611732</id><snippet>col = 0</snippet></ROW><ROW><id>12611732</id><snippet>variable but then ignore it by referring to</snippet></ROW><ROW><id>12611732</id><snippet>def main(cls, args):
    with open(os.path.expanduser('~/Desktop/input.txt')) as f:
        numSims = int(f.readline())
        mapgrid = []
        for k in xrange(numSims):
            row, col = map(int, f.readline().split())  
            for i in xrange(row):
                myLine = f.readLine()
                mapgrid.append([])
                for j in xrange(col):
                    mapgrid[i].append(Spot(myLine[j] == 'A'))
         # store this map somewhere?
         cls.myMaps.append(mapgrid)
</snippet></ROW><ROW><id>12611777</id><snippet>signal</snippet></ROW><ROW><id>12611777</id><snippet>SIGHUP</snippet></ROW><ROW><id>12611777</id><snippet>SIGINT</snippet></ROW><ROW><id>12611777</id><snippet>SIGHUP</snippet></ROW><ROW><id>12611777</id><snippet>import signal
import sys
def signal_handler(signal, frame):
    print 'Handling SIGHUP signal!'
    sys.exit(0)
signal.signal(signal.SIGHUHP, signal_handler)
print 'Waiting for SIGHUP'
signal.pause()
</snippet></ROW><ROW><id>12611777</id><snippet>sudo kill -1 &lt;pid of your python process&gt;</snippet></ROW><ROW><id>12611801</id><snippet>str</snippet></ROW><ROW><id>12611801</id><snippet>bytes</snippet></ROW><ROW><id>12611801</id><snippet>mmap</snippet></ROW><ROW><id>12611801</id><snippet>mmap</snippet></ROW><ROW><id>12611801</id><snippet>re</snippet></ROW><ROW><id>12611801</id><snippet>def findpaths(fname):
  with open(fname, 'rb') as f:
    m = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
    for match in re.finditer(':path,([0-9]+)', m):
      yield m[match.end():match.end()+int(match.group(1))]
</snippet></ROW><ROW><id>12611801</id><snippet>re</snippet></ROW><ROW><id>12611801</id><snippet>mmap</snippet></ROW><ROW><id>12611801</id><snippet>def nextdigits(s, start):
  return ''.join(itertools.takewhile(str.isdigit,
                                     itertools.islice(s, start, None)))

def findpaths(fname):
  with open(fname, 'rb') as f:
    m = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
    i = 0
    while True:
      n = m.find(':path', i)
      if n == -1: return
      countstr = nextdigits(m, n+6)
      count = int(countstr)
      n += 6 + len(countstr)
      yield m[n:n+count]
      i = n + 6 + count
</snippet></ROW><ROW><id>12611801</id><snippet>nextdigits</snippet></ROW><ROW><id>12611801</id><snippet>m[n+6:n+A_BIG_ENOUGH_NUMBER]</snippet></ROW><ROW><id>12611801</id><snippet>findpaths</snippet></ROW><ROW><id>12611801</id><snippet>with open</snippet></ROW><ROW><id>12611801</id><snippet>mmap</snippet></ROW><ROW><id>12611801</id><snippet>m</snippet></ROW><ROW><id>12611801</id><snippet>findpaths</snippet></ROW><ROW><id>12611801</id><snippet>BLAH:path,3abcBLAH:path,10abcdefghijklmnBLAH:path,3abc:path,0:path,3abc
</snippet></ROW><ROW><id>12611801</id><snippet>abc
abcdefghij
abc

abc
</snippet></ROW><ROW><id>12611801</id><snippet>i</snippet></ROW><ROW><id>12611922</id><snippet>SetSizeHints()</snippet></ROW><ROW><id>12611922</id><snippet>panel.SetSizerAndFitParent(sizer, frame);
</snippet></ROW><ROW><id>12611973</id><snippet>id</snippet></ROW><ROW><id>12611973</id><snippet>href</snippet></ROW><ROW><id>12611973</id><snippet>.flac</snippet></ROW><ROW><id>12611973</id><snippet>t = soup.find_all(href=re.compile(".flac$"))
</snippet></ROW><ROW><id>12612073</id><snippet>\</snippet></ROW><ROW><id>12612073</id><snippet>totalDist +=</snippet></ROW><ROW><id>12612073</id><snippet>+=</snippet></ROW><ROW><id>12612073</id><snippet>x = 1
x += 1 # x is now 2  (same as  x = x + 1)
</snippet></ROW><ROW><id>12612185</id><snippet>AttributeError</snippet></ROW><ROW><id>12612185</id><snippet>QTableWidgetItem</snippet></ROW><ROW><id>12612185</id><snippet>table.item()</snippet></ROW><ROW><id>12612185</id><snippet>None</snippet></ROW><ROW><id>12612185</id><snippet>'text'</snippet></ROW><ROW><id>12612185</id><snippet>import sys, csv
from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self, rows, columns):
        QtGui.QWidget.__init__(self)
        self.table = QtGui.QTableWidget(rows, columns, self)
        for column in range(columns - 1):
            for row in range(rows - 1):
                item = QtGui.QTableWidgetItem('Text%d' % row)
                self.table.setItem(row, column, item)
        self.buttonOpen = QtGui.QPushButton('Open', self)
        self.buttonSave = QtGui.QPushButton('Save', self)
        self.buttonOpen.clicked.connect(self.handleOpen)
        self.buttonSave.clicked.connect(self.handleSave)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.table)
        layout.addWidget(self.buttonOpen)
        layout.addWidget(self.buttonSave)

    def handleSave(self):
        path = QtGui.QFileDialog.getSaveFileName(
                self, 'Save File', '', 'CSV(*.csv)')
        if not path.isEmpty():
            with open(unicode(path), 'wb') as stream:
                writer = csv.writer(stream)
                for row in range(self.table.rowCount()):
                    rowdata = []
                    for column in range(self.table.columnCount()):
                        item = self.table.item(row, column)
                        if item is not None:
                            rowdata.append(
                                unicode(item.text()).encode('utf8'))
                        else:
                            rowdata.append('')
                    writer.writerow(rowdata)

    def handleOpen(self):
        path = QtGui.QFileDialog.getOpenFileName(
                self, 'Open File', '', 'CSV(*.csv)')
        if not path.isEmpty():
            with open(unicode(path), 'rb') as stream:
                self.table.setRowCount(0)
                self.table.setColumnCount(0)
                for rowdata in csv.reader(stream):
                    row = self.table.rowCount()
                    self.table.insertRow(row)
                    self.table.setColumnCount(len(rowdata))
                    for column, data in enumerate(rowdata):
                        item = QtGui.QTableWidgetItem(data.decode('utf8'))
                        self.table.setItem(row, column, item)

if __name__ == '__main__':

    app = QtGui.QApplication(sys.argv)
    window = Window(10, 5)
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>12612206</id><snippet>int</snippet></ROW><ROW><id>12612206</id><snippet>numpy.uint8</snippet></ROW><ROW><id>12612206</id><snippet>int</snippet></ROW><ROW><id>12612206</id><snippet>&gt;&gt;&gt; a, b = map(numpy.uint8, (50, 60))
&gt;&gt;&gt; a - b
__main__:1: RuntimeWarning: overflow encountered in ubyte_scalars
246
&gt;&gt;&gt; a, b = map(int, (a, b))
&gt;&gt;&gt; a - b
-10
</snippet></ROW><ROW><id>12612206</id><snippet>&gt;&gt;&gt; %timeit abs(int(a) - int(b))
1000000 loops, best of 3: 410 ns per loop
&gt;&gt;&gt; %timeit a - b if a &gt; b else b - a
1000000 loops, best of 3: 470 ns per loop
</snippet></ROW><ROW><id>12612305</id><snippet>ElementTree</snippet></ROW><ROW><id>12612305</id><snippet>lxml</snippet></ROW><ROW><id>12612305</id><snippet>for event, elem in ET.iterparse(xmlfile, events=('end')):
  ...
</snippet></ROW><ROW><id>12612305</id><snippet>elem.clear()</snippet></ROW><ROW><id>12612567</id><snippet>django-celery</snippet></ROW><ROW><id>12612623</id><snippet>RelatedManger</snippet></ROW><ROW><id>12612623</id><snippet>class Reporter(models.Model):
    ...

class Article(models.Model):
    reporter = models.ForeignKey(Reporter)
</snippet></ROW><ROW><id>12612623</id><snippet>class Topping(models.Model):
    ...

class Pizza(models.Model):
    toppings = models.ManyToManyField(Topping)
</snippet></ROW><ROW><id>12612623</id><snippet>&gt;&gt;&gt; b = Toy.objects.get(id=1)
&gt;&gt;&gt; e = b.box_set.create(
...     name='Hi',
... )

# No need to call e.save() at this point -- it's already been saved.

# OR:

&gt;&gt;&gt; b = Toy.objects.get(id=1)
&gt;&gt;&gt; e = Box(
...     toy=b,
...     name='Hi',
... )
&gt;&gt;&gt; e.save(force_insert=True)
</snippet></ROW><ROW><id>12612623</id><snippet>add(obj1[, obj2, ...])
</snippet></ROW><ROW><id>12612623</id><snippet>&gt;&gt;&gt; t = Toy.objects.get(id=1)
&gt;&gt;&gt; b = Box.objects.get(id=234)
&gt;&gt;&gt; t.box_set.add(b) # Associates Box b with Toy t.
</snippet></ROW><ROW><id>12612623</id><snippet>remove(obj1[, obj2, ...])

&gt;&gt;&gt; b = Toy.objects.get(id=1)
&gt;&gt;&gt; e = Box.objects.get(id=234)
&gt;&gt;&gt; b.box_set.remove(e) # Disassociates Entry e from Blog b.
</snippet></ROW><ROW><id>12612623</id><snippet>&gt;&gt;&gt; b = Toy.objects.get(id=1)
&gt;&gt;&gt; b.box_set.clear()
</snippet></ROW><ROW><id>12612740</id><snippet>write(noteFile)</snippet></ROW><ROW><id>12612740</id><snippet>ET.ElementTree(root).write(noteFile, encoding="utf-8", xml_declaration=True)
</snippet></ROW><ROW><id>12612782</id><snippet># std lib modules. "Batteries included" FTW.
import threading
import time

thread_result = -1

def ThreadWork():
  global thread_result
  thread_result = 1 + 1
  time.sleep(5)  # phew, I'm tiered after all that addition!

my_thread = threading.Thread(target=ThreadWork)
my_thread.start()  # This will call ThreadWork in the background.
                   # In the mean time, you can do other stuff
y = 2 * 5  # Completely independent calculation.
my_thread.join()  # Wait for the thread to finish doing it's thing.
                  # This should take about 5 seconds,
                  # due to time.sleep being called
print "thread_result * y =", thread_result * y
</snippet></ROW><ROW><id>12613358</id><snippet>else</snippet></ROW><ROW><id>12613358</id><snippet>def find_available_slug(object, instance, slug)
    try:
        sender_node = object.objects.get(slug=slug)
    except object.DoesNotExist:
        instance.slug = slug
        return
    except object.MultipleObjectsReturned:
        pass

    slug = '%s_' % slug
    find_available_slug(object, instance, slug)
</snippet></ROW><ROW><id>12613412</id><snippet>def removeT(b):
    s1 = ""
    while True:
        s2 = raw_input("Enter a word/sentence you want to process: ")
        if s2 == "quit": return s1
        s2 = s2.replace("T", "")
        if b:
            s2 = s2.replace("t", "")
        s1 += s2
</snippet></ROW><ROW><id>12613458</id><snippet>'mail.yahoo.com'</snippet></ROW><ROW><id>12613458</id><snippet>'imap.mail.yahoo.com'</snippet></ROW><ROW><id>12613511</id><snippet>import numpy
import scipy.signal

a = numpy.zeros((6,6), dtype=numpy.int) # Example array
a[2:4, 2:4] = 1;a[2,4] = 1 # with example value structure

b = 1-a
c = scipy.signal.convolve2d(b, numpy.ones((3,3)), mode='same')

print numpy.sum(c * a)
</snippet></ROW><ROW><id>12613511</id><snippet>b = 1-a</snippet></ROW><ROW><id>12613511</id><snippet>+</snippet></ROW><ROW><id>12613850</id><snippet>import Spot
</snippet></ROW><ROW><id>12613850</id><snippet>from Spot import Spot
</snippet></ROW><ROW><id>12613850</id><snippet>import Spot
</snippet></ROW><ROW><id>12613850</id><snippet>from Spot import Spot</snippet></ROW><ROW><id>12613970</id><snippet>ftplib</snippet></ROW><ROW><id>12613970</id><snippet>import ftplib
session = ftplib.FTP('server.address.com','USERNAME','PASSWORD')
file = open('kitten.jpg','rb')                  # file to send
session.storbinary('STOR kitten.jpg', file)     # send the file
file.close()                                    # close file and FTP
session.quit()
</snippet></ROW><ROW><id>12613970</id><snippet>ftplib.FTP_TLS</snippet></ROW><ROW><id>12613970</id><snippet>urllib.retrieve</snippet></ROW><ROW><id>12613970</id><snippet>import urllib 

urllib.urlretrieve('ftp://server/path/to/file', 'file')
</snippet></ROW><ROW><id>12613970</id><snippet>FTP.pwd()</snippet></ROW><ROW><id>12613970</id><snippet>FTP.cwd(pathname)</snippet></ROW><ROW><id>12614028</id><snippet>game = models.CharField(max_length=300, null=True, blank=True)
</snippet></ROW><ROW><id>12614028</id><snippet>None</snippet></ROW><ROW><id>12614028</id><snippet>import json
class LoginView(FormView):
    ....
    #your code
    if user.is_active:
        # default value for games is None
        user.userprofile.games = json.dumps({}) # some dict you want to store
        user.userprofile.save()   #save it

        # now it should be an empty dict
        login(self.request, user)
        return redirect('/game')
    ....
    #your other code
</snippet></ROW><ROW><id>12614028</id><snippet>game</snippet></ROW><ROW><id>12614028</id><snippet>. In</snippet></ROW><ROW><id>12614028</id><snippet>view you are getting new instance of</snippet></ROW><ROW><id>12614028</id><snippet>which has 'game</snippet></ROW><ROW><id>12614028</id><snippet>None</snippet></ROW><ROW><id>12614184</id><snippet>x</snippet></ROW><ROW><id>12614184</id><snippet>&gt;&gt;&gt; x = np.array([20, 10, 30, 10, 60, 30, 10])
</snippet></ROW><ROW><id>12614184</id><snippet>np.unique</snippet></ROW><ROW><id>12614184</id><snippet>return_inverse=True</snippet></ROW><ROW><id>12614184</id><snippet>x</snippet></ROW><ROW><id>12614184</id><snippet>&gt;&gt;&gt; u, inv = np.unique(x, return_inverse=True)
&gt;&gt;&gt; u
array([10, 20, 30, 60])
&gt;&gt;&gt; inv
array([1, 0, 2, 0, 3, 2, 0])
</snippet></ROW><ROW><id>12614184</id><snippet>bincount</snippet></ROW><ROW><id>12614184</id><snippet>&gt;&gt;&gt; counts = np.bincount(inv)
&gt;&gt;&gt; counts
array([3, 1, 2, 1])
</snippet></ROW><ROW><id>12614184</id><snippet>&gt;&gt;&gt; dups = u[counts &gt; 1]
&gt;&gt;&gt; dups
array([10, 30])
</snippet></ROW><ROW><id>12614376</id><snippet>cls.isFilled = True</snippet></ROW><ROW><id>12614376</id><snippet>isFilled</snippet></ROW><ROW><id>12614638</id><snippet>@total_ordering
class B_ordering(object):
    def __lt__(self, other):
        return self.y &lt; other.y

class B(B_ordering, namedtuple('B', 'x y')):
    pass
</snippet></ROW><ROW><id>12614638</id><snippet>total_ordering</snippet></ROW><ROW><id>12615119</id><snippet>PV=C/i

Where C = amount of cash flows
      i = effective periodic interest rate or rate of return 
</snippet></ROW><ROW><id>12615250</id><snippet>element = self.driver.find_element_by_css_selector('a[class="create"]')
element.click()
</snippet></ROW><ROW><id>12615344</id><snippet>url = "http://search.com/search?term={0}&amp;location=sf".format(q)
</snippet></ROW><ROW><id>12615344</id><snippet>import urllib
...
qencoded = urllib.quote_plus(q)
url = 
  "http://search.com/search?term={0}&amp;location=sf".format(qencoded)
</snippet></ROW><ROW><id>12615497</id><snippet>try:
    (element,) = tree.xpath('//xpath/selector')
except ValueError:
    raise InvalidSelector()
    # happened because the list was either empty or contained multiple elements
</snippet></ROW><ROW><id>12615626</id><snippet>http://localhost:8000?username=x&amp;password=y</snippet></ROW><ROW><id>12615626</id><snippet>environ['QUERY_STRING']</snippet></ROW><ROW><id>12615626</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>12615922</id><snippet>set</snippet></ROW><ROW><id>12615922</id><snippet>import random

def noncontiguoussample(n,k):
    numbers = set(range(1,n+1))
    samples = []
    for _ in range(k):
        v = random.choice(list(numbers))
        samples.append(v)
        numbers -= set([v-1, v, v+1])
    return samples
</snippet></ROW><ROW><id>12615922</id><snippet>n &lt; 3*k</snippet></ROW><ROW><id>12615922</id><snippet>import random

def noncontiguoussample(n,k):
    # How many numbers we're not picking
    total_skips = n - k

    # Distribute the additional skips across the range
    skip_cutoffs = random.sample(range(total_skips+1), k)
    skip_cutoffs.sort()

    # Construct the final set of numbers based on our skip distribution
    samples = []
    for index, skip_spot in enumerate(skip_cutoffs):
        # This is just some math-fu that translates indices within the
        # skips to values in the overall result.
        samples.append(1 + index + skip_spot)

    return samples
</snippet></ROW><ROW><id>12615922</id><snippet>index</snippet></ROW><ROW><id>12616043</id><snippet>queryset</snippet></ROW><ROW><id>12616043</id><snippet>querysets</snippet></ROW><ROW><id>12616043</id><snippet>def view(request):
    results = cache.get(request.user.id)
    if not results:
        results = do_a_ton_of_work()
        cache.set(request.user.id, results)
</snippet></ROW><ROW><id>12616091</id><snippet>def build_schema(self):
    base_schema = super(SomeModelResource, self).build_schema()
    for f in self._meta.object_class._meta.fields:
        if f.name in base_schema['fields'] and f.choices:
            base_schema['fields'][f.name].update({
                'choices': f.choices,
            })
    return base_schema
</snippet></ROW><ROW><id>12616091</id><snippet>object_class</snippet></ROW><ROW><id>12616091</id><snippet>queryset</snippet></ROW><ROW><id>12616304</id><snippet>#!/usr/bin/python

'''
This module logs python errors.
'''

import socket, os, sys, traceback

def sendError(err):
    # log the error (in my actual implementation, this sends the error to a database)
    with open('log','w') as f:
        f.write(err)


def exceptHandler(etype, value, tb):
    """An additional wrapper around our custom exception handler, to prevent errors in
       this program from being seen by end users."""
    try:
        subProgExceptHandler(etype, value, tb)
    except:
        sys.stderr.write('Sorry, but there seems to have been an error in pylog itself. Please run your program using regular python.\n')

def subProgExceptHandler(etype, value, tb):
    """A custom exception handler that both prints error and traceback information in the standard
       Python format, as well as logs it."""
    import linecache

    errorVerbatim = ''

    # The following code mimics a traceback.print_exception(etype, value, tb) call.
    if tb:
        msg = "Traceback (most recent call last):\n"
        sys.stderr.write(msg)
        errorVerbatim += msg

        # The following code is a modified version of the trackeback.print_tb implementation from
        # cypthon 2.7.3
        while tb is not None:
            f = tb.tb_frame                                                      
            lineno = tb.tb_lineno                                                  
            co = f.f_code                                                        
            filename = co.co_filename                                              
            name = co.co_name
            # Filter out exceptions from pylog itself (eg. execfile).
            if not "pylog" in filename:
                msg = '  File "%s", line %d, in %s\n' % (filename, lineno, name)
                sys.stderr.write(msg)       
                errorVerbatim += msg
                linecache.checkcache(filename)                                         
                line = linecache.getline(filename, lineno, f.f_globals)                
                if line: 
                    msg = '    ' + line.strip() + '\n'
                    sys.stderr.write(msg)
                    errorVerbatim += msg
            tb = tb.tb_next                                           

    lines = traceback.format_exception_only(etype, value)
    for line in lines:
        sys.stderr.write(line)
        errorVerbatim += line

    # Send the error data to our database handler via sendError.
    sendError(errorVerbatim)

def main():
    """Executes the program specified by the user in its own sandbox, then sends
       the error to our database for logging and analysis."""
    # Get the user's (sub)program to run.
    try:
        subProgName = sys.argv[1]
        subProgArgs = sys.argv[3:]
    except:
        print 'USAGE: ./pylog FILENAME.py *ARGS'
        sys.exit()

    # Catch exceptions by overriding the system excepthook.
    sys.excepthook = exceptHandler
    # Sandbox user code exeuction to its own global namespace to prevent malicious code injection.
    execfile(subProgName, {'__builtins__': __builtins__, '__name__': '__main__', '__file__': subProgName, '__doc__': None, '__package__': None})

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>12616388</id><snippet>myMap[m][n].setNextCycle()</snippet></ROW><ROW><id>12616388</id><snippet>Spot.SLEEP</snippet></ROW><ROW><id>12616388</id><snippet>Spot.LEFT</snippet></ROW><ROW><id>12616388</id><snippet>break</snippet></ROW><ROW><id>12616388</id><snippet>switch</snippet></ROW><ROW><id>12616388</id><snippet>if..else</snippet></ROW><ROW><id>12616388</id><snippet>while not cls.isFilled(row, col, myMap):
    numCycles += 1
    print numCycles
    for m in range(0,row): 
        for n in range(0,col): 
            if myMap[m][n].getIsBunny():
                if myMap[m][n].getNextCycle() == Spot.UP:
                    if m&gt;0:
                        myMap[m-1][n].makeBunny()
                elif myMap[m][n].getNextCycle() == Spot.RIGHT:
                    if n&lt;col-1:
                        myMap[m][n+1].makeBunny()
                elif myMap[m][n].getNextCycle() == Spot.DOWN:
                    if m&lt;row-1:
                        myMap[m+ 1][n].makeBunny()
                elif myMap[m][n].getNextCycle() == Spot.LEFT:
                    if n&gt;0:
                        myMap[m][n-1].makeBunny()

            myMap[m][n].setNextCycle()
</snippet></ROW><ROW><id>12616675</id><snippet>marmot = Animal.objects(genus='Marmota').first()
photo = marmot.photo.read()
content_type = marmot.photo.content_type
</snippet></ROW><ROW><id>12616873</id><snippet>item = list(item_generator)[2]
</snippet></ROW><ROW><id>12616901</id><snippet>slice</snippet></ROW><ROW><id>12616901</id><snippet>s = slice(1,3)
b[s,s]

ds = (s,s)
b[ds]
</snippet></ROW><ROW><id>12617167</id><snippet>single_list = []
with open(your_file) as f:
    for line in f.readlines():
        single_list.extend(line.rstrip().split())

list_of_rows = [single_list[i*10:i*10+10] for i in range(len(single_list)//10)]

with open(output_file) as f:
    for line in list_of_rows:
        f.write(' '.join(line) + '\n')
</snippet></ROW><ROW><id>12617167</id><snippet>data = f.read()</snippet></ROW><ROW><id>12617167</id><snippet>merged_data = data.replace("\n", " ")
single_list = merged_data.split()
</snippet></ROW><ROW><id>12617167</id><snippet>single_list</snippet></ROW><ROW><id>12617167</id><snippet>    with open(input_file,'r') as inpf, open(output_file,'w') as outf:
        writable = []
        for line in input_file:
            row = line.rstrip().split()
            writable.extend(row)
            while len(writable) &gt;= 10:
                outf.write(" ".join(writable[:10]) + "\n")
                writable = writable[10:]
</snippet></ROW><ROW><id>12617634</id><snippet>UserDict</snippet></ROW><ROW><id>12617634</id><snippet>UserDict</snippet></ROW><ROW><id>12617634</id><snippet>children</snippet></ROW><ROW><id>12617634</id><snippet>JSONEncoder</snippet></ROW><ROW><id>12617634</id><snippet>#!/usr/bin/env python

import sys
import json
import UserDict

class Node(object):
    def __init__(self, nid, parent, name):
        self.nid = nid
        self.parent = parent
        self.children = []
        self.name = name

class NodeDict(UserDict.UserDict):
    def addNodes(self, nodes):
        """ Add every node as a child to its parent by doing two passes."""
        for i in (1, 2):
            for node in nodes:
                self.data[node.nid] = node
                if node.parent in self.data.keys():
                    if node.parent != "none" and
                       node not in self.data[node.parent].children:
                        self.data[node.parent].children.append(node)

class NodeJSONEncoder(json.JSONEncoder):
    def default(self, node):
        if type(node) == Node:
            return {"nid":node.nid, "name":node.name, "children":node.children}
        raise TypeError("{} is not an instance of Node".format(node))

if __name__ == "__main__":
    nodes = []

    with open(sys.argv[1]) as f:
        for row in f.readlines()[1:]:
            nid, parent, name = row.split()
            nodes.append(Node(nid, parent, name))

    nodeDict = NodeDict()
    nodeDict.addNodes(nodes)

    rootNodes = [node for nid, node in nodeDict.items()
                 if node.parent == "none"]
    for rootNode in rootNodes:
        print NodeJSONEncoder().encode(rootNode)
</snippet></ROW><ROW><id>12617634</id><snippet>{"name": "test-name-4", "nid": "4", "children":[
     {"name": "test-name-10", "nid": "10", "children":[
         {"name": "test-name-1", "nid": "1", "children":[
            {"name": "test-name-7", "nid": "7", "children": []},
            {"name": "test-name-8", "nid": "8", "children":[
                {"name": "test-name-9", "nid": "9", "children": []}]}]},
         {"name": "test-name-2", "nid": "2", "children": []},
         {"name": "test-name-5", "nid": "5", "children":[
             {"name": "test-name-3", "nid": "3", "children": []}]}]}]}
{"name": "test-name-6", "nid": "6", "children": []}
</snippet></ROW><ROW><id>12617663</id><snippet>[^,]+
</snippet></ROW><ROW><id>12617663</id><snippet>[]</snippet></ROW><ROW><id>12617663</id><snippet>^</snippet></ROW><ROW><id>12617994</id><snippet>redirect</snippet></ROW><ROW><id>12617994</id><snippet>[]</snippet></ROW><ROW><id>12617994</id><snippet>from django.shortcuts import redirect

def randompost(request):
    blog_posts = BlogPost.objects.filter(post_status='published').order_by('?')
    latest_post = blog_posts[0]

    return redirect('blog_post', latest_post.slug)
</snippet></ROW><ROW><id>12617994</id><snippet>blog_post</snippet></ROW><ROW><id>12617994</id><snippet>url(r'^post/(\w+)$', 'view_name', name='blog_post')
</snippet></ROW><ROW><id>12618060</id><snippet>result = string.replace("\\","")
</snippet></ROW><ROW><id>12618166</id><snippet>TransactionTestCase</snippet></ROW><ROW><id>12618166</id><snippet>TransactionTestCase</snippet></ROW><ROW><id>12618166</id><snippet>FastFixtureTestCase</snippet></ROW><ROW><id>12618166</id><snippet>FastFixtureTestCase</snippet></ROW><ROW><id>12618496</id><snippet>Gtk.ComboBoxText</snippet></ROW><ROW><id>12618496</id><snippet>from gi.repository import Gtk
combo_box = Gtk.ComboBoxText.new_with_entry()
</snippet></ROW><ROW><id>12618896</id><snippet>set_expand(True)
</snippet></ROW><ROW><id>12618938</id><snippet>scipy.linalg</snippet></ROW><ROW><id>12618938</id><snippet>A = np.column_stack((np.ones(x.size), x, y))
c, resid,rank,sigma = np.linalg.lstsq(A,zi)
</snippet></ROW><ROW><id>12619626</id><snippet>In [10]: dd = {}

In [11]: for i in range(1, 3):
   ....:     name = 'X' + str(i)
   ....:     dd[name] = DataFrame(np.random.randn(3,3))
   ....:     

In [12]: Panel(dd)
Out[12]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 3 (major) x 3 (minor)
Items: X1 to X2
Major axis: 0 to 2
Minor axis: 0 to 2
</snippet></ROW><ROW><id>12619626</id><snippet>def panelCreation():
    dd = {}
    for i in range(1,3):
        name = 'X' + str(i)
        dd[name] = createNewDf(i)
    return Panel(dd)
</snippet></ROW><ROW><id>12620013</id><snippet>argparse</snippet></ROW><ROW><id>12620013</id><snippet>argparse</snippet></ROW><ROW><id>12620013</id><snippet>#!/usr/bin/env python3

import sys



def create_apache_vhost(*args, **kwargs):
    pass

def create_lighty_vhost(*args, **kwargs):
    pass

def main(argv):
        import argparse

        parser = argparse.ArgumentParser(description="Some server",
                                         formatter_class=argparse.RawDescriptionHelpFormatter)

        parser.add_argument('--username', type=str)
        parser.add_argument('-u', dest='username', type=str)

        parser.add_argument('--apache', dest='httpd', action='store_const', const='apache')
        parser.add_argument('-a',       dest='httpd', action='store_const', const='apache')
        parser.add_argument('--lighthttpd', dest='httpd', action='store_const', const='lighthttpd')
        parser.add_argument('-l',           dest='httpd', action='store_const', const='lighthttpd')

        parser.add_argument('--domain', type=str)
        parser.add_argument('--vhost',  type=str)
        parser.add_argument('-v', dest='domain', type=str)

        parser.add_argument('--dir', dest='directory', type=str)
        parser.add_argument('-d', dest='directory', type=str)

        defaults = {
            'httpd': 'apache',
            }
        parser.set_defaults(**defaults)

        args = parser.parse_args(args=argv)

        print(args)

        if args.httpd == 'apache':
                create_apache_vhost(args.domain, args.directory, args.username)
        elif args.httpd == 'lighttpd':
                create_lighty_vhost(args.domain, args.directory, args.username)

if __name__ == '__main__':
        main(sys.argv[1:])
</snippet></ROW><ROW><id>12620076</id><snippet>CHARINDEX(a, b)</snippet></ROW><ROW><id>12620076</id><snippet>b LIKE '%' || a || '%'</snippet></ROW><ROW><id>12620076</id><snippet>%</snippet></ROW><ROW><id>12620076</id><snippet>a</snippet></ROW><ROW><id>12620076</id><snippet>b</snippet></ROW><ROW><id>12620076</id><snippet>||</snippet></ROW><ROW><id>12620076</id><snippet>+</snippet></ROW><ROW><id>12620127</id><snippet>Rating</snippet></ROW><ROW><id>12620127</id><snippet>stars</snippet></ROW><ROW><id>12620127</id><snippet>annotate</snippet></ROW><ROW><id>12620127</id><snippet>from django.db.models import Avg
Product.objects.annotate(average_stars = Avg('rating__stars')).order_by('-average_stars')
</snippet></ROW><ROW><id>12620366</id><snippet>self.facebook_request("/me/home", self._on_stream, access_token=self.current_user["access_token"])
</snippet></ROW><ROW><id>12620415</id><snippet>process_message()</snippet></ROW><ROW><id>12621009</id><snippet>for i in a:
    c.append('Adi_' + str(i))
</snippet></ROW><ROW><id>12621009</id><snippet>a</snippet></ROW><ROW><id>12621009</id><snippet>c = ['Adi_%s' % s for s in a] 
</snippet></ROW><ROW><id>12621009</id><snippet>c = ['Adi_{0}'.format(s) for s in a] #Python &gt;= 2.6
</snippet></ROW><ROW><id>12621159</id><snippet>class C(object):
    dd = MyDataDescriptor()
    ndd = MyNonDataDescriptor()
    def __init__(self):
        self.__value = 1
</snippet></ROW><ROW><id>12621159</id><snippet>cobj = C()
cobj.dd
</snippet></ROW><ROW><id>12621159</id><snippet>cobj.__dict__</snippet></ROW><ROW><id>12621159</id><snippet>dd</snippet></ROW><ROW><id>12621159</id><snippet>__get__/__set__/__del__</snippet></ROW><ROW><id>12621159</id><snippet>__get__</snippet></ROW><ROW><id>12621159</id><snippet>dd</snippet></ROW><ROW><id>12621159</id><snippet>cobj.__dict__</snippet></ROW><ROW><id>12621159</id><snippet>cobj.ndd = 2
</snippet></ROW><ROW><id>12621159</id><snippet>cobj.__dict__</snippet></ROW><ROW><id>12621159</id><snippet>ndd</snippet></ROW><ROW><id>12621159</id><snippet>cobj.__dict__</snippet></ROW><ROW><id>12621159</id><snippet>cobj.ndd
</snippet></ROW><ROW><id>12621159</id><snippet>__get__</snippet></ROW><ROW><id>12621159</id><snippet>del cobj.ndd
</snippet></ROW><ROW><id>12621159</id><snippet>cobj.ndd
</snippet></ROW><ROW><id>12621159</id><snippet>__get__</snippet></ROW><ROW><id>12621359</id><snippet>pyside</snippet></ROW><ROW><id>12621359</id><snippet>self</snippet></ROW><ROW><id>12621359</id><snippet>path_to_pdf</snippet></ROW><ROW><id>12621359</id><snippet>def select(self):
    #snip ...
    if len(fileObjOpenName) &gt; 1:
       self.path_to_pdf = fileObjOpenName

def save(self):
    #snip ...
    if len(fileNameSave) &gt; 1:
       path_to_pdf = self.path_to_pdf
</snippet></ROW><ROW><id>12621843</id><snippet>import socket
from multiprocessing import Process, Queue, Value
from ctypes import c_bool

HOST = '198.51.100.0'
PORT = 8080

# This function will be run in a child process
def update_proc(data_queue, update_queue, quit_flag):
    while not quit_flag.value:
        data = data_queue.get()
        # do something with the data...
        update_queue.put(data)
    print "Closing child update process"

# This function will be run in a child process
def activate_proc(update_queue, quit_flag):
    while not quit_flag.value:
        data = update_queue.get()
        # do something with the data...
    print "Closing child activate process"

# main process begins execution here, if module is run from the terminal
if __name__ == "__main__":
    # Connect to remote host over TCP
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((HOST,PORT))

    # Set up a Queue to pass data to the update process, and another one
    # for the two children to communicate
    data_queue = Queue()
    update_queue = Queue()

    # The quit_flag Value is a *very* primitive way to signal the child 
    # processes to quit. I'm sure there are better ways to do this, but I'm 
    # tired and can't think of any right now.
    quit_flag = Value(c_bool, False)

    # Create two child processes, pass a reference to the Queue to each
    update = Process(target=update_proc, args=(data_queue, update_queue, quit_flag))
    activate = Process(target=activate_proc, args=(update_queue, quit_flag))

    update.start()
    activate.start()

    # Read data from the TCP socket, push it onto the data_queue
    while True:
        client.sendall("loc\n")
        data = client.recv(8192)
        if not data:
            print "network connection closed by client"
            break
        data_queue.put(data)

    # Join with child processes before closing
    print "All done, closing child processes"
    update.join()
    activate.join()
</snippet></ROW><ROW><id>12621984</id><snippet>spacing</snippet></ROW><ROW><id>12621984</id><snippet>x</snippet></ROW><ROW><id>12621984</id><snippet>y</snippet></ROW><ROW><id>12621984</id><snippet>N_x</snippet></ROW><ROW><id>12621984</id><snippet>N_y</snippet></ROW><ROW><id>12621984</id><snippet>numpy</snippet></ROW><ROW><id>12621984</id><snippet>np.zeros([N_x, N_y])</snippet></ROW><ROW><id>12621984</id><snippet>x_i, y_i = tuple([int(c//spacing) for c in (x, y)])</snippet></ROW><ROW><id>12621984</id><snippet>(x_i, y_i)</snippet></ROW><ROW><id>12621984</id><snippet>v</snippet></ROW><ROW><id>12621984</id><snippet>(x_i, y_i)</snippet></ROW><ROW><id>12621984</id><snippet>NaN</snippet></ROW><ROW><id>12621984</id><snippet>Inf</snippet></ROW><ROW><id>12622040</id><snippet>MyConfig.py</snippet></ROW><ROW><id>12622040</id><snippet>from ConfigParser import SafeConfigParser


section_names = 'official', 'debugging'


class MyConfiguration(object):

    def __init__(self, *file_names):
        parser = SafeConfigParser()
        parser.optionxform = str  # make option names case sensitive
        found = parser.read(file_names)
        if not found:
            raise ValueError('No config file found!')
        for name in section_names:
            self.__dict__.update(parser.items(name))  # &lt;-- here the magic happens


config = MyConfiguration('my.cfg', 'other.cfg')
</snippet></ROW><ROW><id>12622040</id><snippet>foo.py</snippet></ROW><ROW><id>12622040</id><snippet>from MyConfig import config
# ...
</snippet></ROW><ROW><id>12622040</id><snippet>MyProgram.py</snippet></ROW><ROW><id>12622040</id><snippet>from MyConfig import config

print config.checkForAbort

import foo

assert config is foo.config
</snippet></ROW><ROW><id>12622040</id><snippet>config</snippet></ROW><ROW><id>12622040</id><snippet>from MyConfig import config</snippet></ROW><ROW><id>12622040</id><snippet>MyProgram</snippet></ROW><ROW><id>12622040</id><snippet>MyProgram</snippet></ROW><ROW><id>12622040</id><snippet>foo</snippet></ROW><ROW><id>12622040</id><snippet>foo</snippet></ROW><ROW><id>12622040</id><snippet>MyProgram</snippet></ROW><ROW><id>12622040</id><snippet>foo.config</snippet></ROW><ROW><id>12622433</id><snippet>$ find root/
root/
root/Tools
root/Tools/test_foo.py
root/Tools/__init__.py
root/setup.cfg
root/ook
root/ook/Tools
root/ook/Tools/test_foo.py
root/ook/__init__.py
$ cat root/setup.cfg
[pytest]
norecursedirs = root/Tools
$ py.test --collectonly root/
============================= test session starts ==============================
platform linux2 -- Python 2.7.3 -- pytest-2.2.1
collected 1 items 
&lt;Module 'root/ook/Tools/test_foo.py'&gt;
  &lt;Function 'test_foo'&gt;

===============================  in 0.01 seconds ===============================
</snippet></ROW><ROW><id>12622595</id><snippet>eof</snippet></ROW><ROW><id>12622595</id><snippet>&gt;&gt;f = open('test.txt', 'w+')
&gt;&gt;f.write('hello')
&gt;&gt;f.flush()
&gt;&gt;f.seek( 0 )
&gt;&gt;print f.read()
</snippet></ROW><ROW><id>12622595</id><snippet>open</snippet></ROW><ROW><id>12622790</id><snippet>firstname = first[0:2]
</snippet></ROW><ROW><id>12622790</id><snippet>ord</snippet></ROW><ROW><id>12623196</id><snippet>Type.objects.filter(type=typeImInterestedIn)</snippet></ROW><ROW><id>12623446</id><snippet>std::hash</snippet></ROW><ROW><id>12623446</id><snippet>std::hash</snippet></ROW><ROW><id>12623491</id><snippet>a[a!=0] += 2
</snippet></ROW><ROW><id>12623491</id><snippet>timeit</snippet></ROW><ROW><id>12623491</id><snippet>mask = a.astype(bool)
a[mask] += 2
</snippet></ROW><ROW><id>12623491</id><snippet>mask = a != 0
a[mask] += 2
#some more code ...
a[mask] *= 3
#more code ...
</snippet></ROW><ROW><id>12623491</id><snippet>Cython</snippet></ROW><ROW><id>12623491</id><snippet>f2py</snippet></ROW><ROW><id>12623640</id><snippet>from scipy import polyfit
data = loadtxt("data.txt")
xdata,ydata = data[:,0],data[:,1]
xdata,ydata = zip(*sorted(zip(xdata,ydata))) # sorts the two lists after the xdata    

xd,yd = log10(xdata),log10(ydata)
polycoef = polyfit(xd, yd, 1)
yfit = 10**( polycoef[0]*xd+polycoef[1] )

plt.subplot(211)
plt.plot(xdata,ydata,'.k',xdata,yfit,'-r')
plt.subplot(212)
plt.loglog(xdata,ydata,'.k',xdata,yfit,'-r')
plt.show()
</snippet></ROW><ROW><id>12623940</id><snippet>&lt;ul&gt;
   {% for category in categories %}
              &lt;li&gt; 
                  {{category.name}} 
                   &lt;br/&gt;  
                  {% for book in category.book_set.all %}
                      {{book.name}} , {{book.author}}, etc...
                  {% endfor %} 
             &lt;/li&gt;
   {% endfor %}           
&lt;/ul&gt;
</snippet></ROW><ROW><id>12623969</id><snippet>exec("python array.py 2&gt;&amp;1", $output)
</snippet></ROW><ROW><id>12624256</id><snippet>awk '{print "wget -t2 -T5 --append-output=wget.log \"" $0 "\""}' listOfUrls | bash
</snippet></ROW><ROW><id>12624256</id><snippet>grep</snippet></ROW><ROW><id>12624431</id><snippet>from matplotlib import pyplot as plt
# make a square figure and axes
plt.figure(figsize=(6,6))
ax = plt.axes([0.1, 0.1, 0.8, 0.8])

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15,30,45, 10]

explode=(0, 0.05, 0, 0)
p = plt.pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True)
plt.title('Raining Hogs and Dogs', bbox={'facecolor':'0.8', 'pad':5})

w = p[0][0]
show()

class PieEventHandler:
    def __init__(self,p):
        self.p = p
        self.fig = p[0].figure
        self.ax = p[0].axes
        self.fig.canvas.mpl_connect('button_press_event', self.onpress)

    def onpress(self, event):
        if event.inaxes!=self.ax:
            return

        for w in self.p:
            (hit,_) = w.contains(event)
            if hit:
                print w.get_label()


handler = PieEventHandler(p[0])
</snippet></ROW><ROW><id>12624587</id><snippet>__init__</snippet></ROW><ROW><id>12624645</id><snippet>list3 = [list(a) for a in zip(list1, list2)]
</snippet></ROW><ROW><id>12624647</id><snippet>for</snippet></ROW><ROW><id>12624647</id><snippet>time</snippet></ROW><ROW><id>12624647</id><snippet>time = [ish[0] for ish in book]
</snippet></ROW><ROW><id>12624647</id><snippet>var</snippet></ROW><ROW><id>12624647</id><snippet>np.array</snippet></ROW><ROW><id>12624647</id><snippet>var = np.array([t.replace(':',',') for t in time], dtype=float)
var -= float(str(book[0]).replace(":", ","))
</snippet></ROW><ROW><id>12624647</id><snippet>bs</snippet></ROW><ROW><id>12624647</id><snippet>as</snippet></ROW><ROW><id>12624647</id><snippet>as</snippet></ROW><ROW><id>12624647</id><snippet>bs</snippet></ROW><ROW><id>12624647</id><snippet>bs_reduced = bs[(var &lt; 0.1) &amp; (var &gt;=0)]
</snippet></ROW><ROW><id>12624736</id><snippet>p = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE, stdin=open('packfile.dat'))
</snippet></ROW><ROW><id>12624782</id><snippet>def dict_intersection(d1, d2):
    return dict((key, d2[key] or d1[key]) for key in frozenset(d1) &amp; frozenset(d2))
</snippet></ROW><ROW><id>12624782</id><snippet>def dict_intersection(d1, d2):
    return {key: d2[key] or d1[key] for key in d1.viewkeys() &amp; d2.viewkeys()}
</snippet></ROW><ROW><id>12625095</id><snippet>&gt;&gt;&gt; pattern = re.compile("^\d{1,4}$")
&gt;&gt;&gt; pattern.match("0").group()
'0'
&gt;&gt;&gt; pattern.match("42").group()
'42'
&gt;&gt;&gt; pattern.match("777").group()
'777'
&gt;&gt;&gt; pattern.match("2012").group()
'2012'
&gt;&gt;&gt; pattern.match("65535").group()
------------------------------------------------------------
Traceback (most recent call last):
  File "&lt;ipython console&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'group'
</snippet></ROW><ROW><id>12625095</id><snippet>{1,4}</snippet></ROW><ROW><id>12625095</id><snippet>00001</snippet></ROW><ROW><id>12625095</id><snippet>def parse_4digit_number(s):
    i = int(s)
    if 0 &lt;= i &lt;= 9999:
        return i
    else:
        raise ValueError("{0} is out of range".format(i))
</snippet></ROW><ROW><id>12625245</id><snippet>&gt;&gt;&gt; echo=d.echo
&gt;&gt;&gt; echo.insert({"new":"test"})
ObjectId('50647520594bc0f223000000')
&gt;&gt;&gt; new=echo.insert({"new":"test"})
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12625253</id><snippet>def func_call(val_list):
    ...
    if val_list[nn] &lt; 0:
        raise ValueError("value too low")
...
def Button_callback(value):
    ...
    try:
        y = func_call(val_list)
    except ValueError:
        return 
</snippet></ROW><ROW><id>12625662</id><snippet>Figure</snippet></ROW><ROW><id>12625662</id><snippet>Plotter</snippet></ROW><ROW><id>12625662</id><snippet>.show()</snippet></ROW><ROW><id>12625662</id><snippet>app.show(plot)</snippet></ROW><ROW><id>12625662</id><snippet># plotfile.py
import matplotlib.pyplot as plt

class Plotter(object):
    def __init__(self, xval=None, yval=None):
        self.xval = xval
        self.yval = yval

    def plotthing(self):
        f = plt.figure()
        sp = f.add_subplot(111)
        sp.plot(self.xval, self.yval, 'o-')
        return f
</snippet></ROW><ROW><id>12625662</id><snippet>from plotfile import Plotter

app = Plotter(xval=range(0,10), yval=range(0,10))
plot = app.plotthing()
plot.show()
raw_input()
</snippet></ROW><ROW><id>12625688</id><snippet>ord()</snippet></ROW><ROW><id>12625688</id><snippet>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; ord('\u00c2')
192
</snippet></ROW><ROW><id>12625688</id><snippet>&gt;&gt;&gt; [ord(c) for c in 'Hello World!']
[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]
</snippet></ROW><ROW><id>12625688</id><snippet>chr()</snippet></ROW><ROW><id>12625688</id><snippet>&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(193)
'Á'
</snippet></ROW><ROW><id>12625810</id><snippet>xor</snippet></ROW><ROW><id>12625810</id><snippet>import sys

def processData(filename, key):
    with open(filename, 'rb') as inf, open(filename+'.xor', 'wb') as outf:
        for line in inf:
            line = ''.join([chr(ord(c)^ord(key)) for c in line])
            outf.write(line)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print 'Usage: xor_it filename key'
        print '       key = a single character'
    else:
        processData(sys.argv[1], sys.argv[2])
</snippet></ROW><ROW><id>12625828</id><snippet>&gt;&gt;&gt; re.findall(r'\w', 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/Cellar/python/2.7.3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/re.py", line 177, in findall
    return _compile(pattern, flags).findall(string)
TypeError: expected string or buffer
</snippet></ROW><ROW><id>12625828</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print subprocess.check_output(['host',  'www.google.com'])
www.google.com has address 173.194.75.147
www.google.com has address 173.194.75.99
www.google.com has address 173.194.75.103
www.google.com has address 173.194.75.104
www.google.com has address 173.194.75.105
www.google.com has address 173.194.75.106
www.google.com has IPv6 address 2607:f8b0:400c:c03::6a
</snippet></ROW><ROW><id>12625888</id><snippet>str.rstrip()</snippet></ROW><ROW><id>12625888</id><snippet>[word.rstrip("$") for word in words]
</snippet></ROW><ROW><id>12625888</id><snippet>[word+"$" for word in words]
</snippet></ROW><ROW><id>12625888</id><snippet>&gt;&gt;&gt; words = ['Duration$', 'Noun$', 'Adjective$']
&gt;&gt;&gt; words = [word.rstrip("$") for word in words]
&gt;&gt;&gt; words
['Duration', 'Noun', 'Adjective']
&gt;&gt;&gt; [word+"$" for word in words]
['Duration$', 'Noun$', 'Adjective$']
</snippet></ROW><ROW><id>12626098</id><snippet>URL()</snippet></ROW><ROW><id>12626098</id><snippet>response.menu = [(T('Index'), False, 'http://www.google.com')]
</snippet></ROW><ROW><id>12626106</id><snippet>pytz</snippet></ROW><ROW><id>12626106</id><snippet>.localize()</snippet></ROW><ROW><id>12626106</id><snippet>datetime</snippet></ROW><ROW><id>12626106</id><snippet>start_date = local_tz.localize(start_date)
</snippet></ROW><ROW><id>12626106</id><snippet>.replace()</snippet></ROW><ROW><id>12626106</id><snippet>datetime</snippet></ROW><ROW><id>12626106</id><snippet>start_date = start_date.replace(tzinfo=local_tz)
</snippet></ROW><ROW><id>12626260</id><snippet>ASCII</snippet></ROW><ROW><id>12626260</id><snippet>def cleanupString(string):
    string = urllib2.unquote(string).decode('utf8')

    return HTMLParser.HTMLParser().unescape(string)
</snippet></ROW><ROW><id>12626260</id><snippet>sys.getfilesystemencoding()</snippet></ROW><ROW><id>12626260</id><snippet>def cleanupString(string):
    string = urllib2.unquote(string).decode('utf8')

    return HTMLParser.HTMLParser().unescape(string).encode(sys.getfilesystemencoding())
</snippet></ROW><ROW><id>12626389</id><snippet>def hello_world():
    print "hello world"

d = {'hello':hello_world}

d['hello']()

locals()['hello_world']()
</snippet></ROW><ROW><id>12626460</id><snippet>break</snippet></ROW><ROW><id>12626460</id><snippet>if</snippet></ROW><ROW><id>12626460</id><snippet>while</snippet></ROW><ROW><id>12626460</id><snippet>break</snippet></ROW><ROW><id>12626460</id><snippet>while True:</snippet></ROW><ROW><id>12626460</id><snippet>while 1:</snippet></ROW><ROW><id>12626460</id><snippet>a</snippet></ROW><ROW><id>12626460</id><snippet>import random

def play(till_jackpot_count):
    game_data_per_jackpot = [{'plays' : 0, 'wins' : 0}]
    wheel_values = xrange(36)
    wheels = [0, 0, 0]
    while till_jackpot_count &gt;= len(game_data_per_jackpot):
        wheels = [random.choice(wheel_values) for wheel in wheels]
        game_data_per_jackpot[-1]['plays'] += 1
        print '%d plays since last jackpot' % game_data_per_jackpot[-1]['plays']
        print '%d wins since last jackpot' % game_data_per_jackpot[-1]['wins']
        print '%d total plays' % sum([data['plays'] for data in game_data_per_jackpot])
        print '%d total wins' % sum([data['wins'] for data in game_data_per_jackpot])
        print '%d total jackpots' % (len(game_data_per_jackpot) - 1)
        print 'this play: {} {} {}'.format(*wheels)
        if len(set(wheels)) == 1:
            if wheels[0] == 7:
                print 'jackpot!'
                game_data_per_jackpot.append({'plays' : 0, 'wins' : 0})
            else:
                print 'win!'
                game_data_per_jackpot[-1]['wins'] += 1
    return game_data_per_jackpot[:-1]

play(10)
</snippet></ROW><ROW><id>12626460</id><snippet>till_jackpot_count</snippet></ROW><ROW><id>12626460</id><snippet>[]</snippet></ROW><ROW><id>12626460</id><snippet>{}</snippet></ROW><ROW><id>12626460</id><snippet>()</snippet></ROW><ROW><id>12626460</id><snippet>'%d' % var</snippet></ROW><ROW><id>12626460</id><snippet>'{} {} {}'.format(*iterable)</snippet></ROW><ROW><id>12626460</id><snippet>[a for a in b]</snippet></ROW><ROW><id>12626460</id><snippet>list[:]</snippet></ROW><ROW><id>12626460</id><snippet>sum</snippet></ROW><ROW><id>12626460</id><snippet>len</snippet></ROW><ROW><id>12626460</id><snippet>random</snippet></ROW><ROW><id>12626460</id><snippet>while</snippet></ROW><ROW><id>12626460</id><snippet>random.randrange()</snippet></ROW><ROW><id>12626460</id><snippet>random.sample()</snippet></ROW><ROW><id>12626460</id><snippet>xrange()</snippet></ROW><ROW><id>12626743</id><snippet>cur.execute("SELECT * FROM users WHERE name=?", (name,))
</snippet></ROW><ROW><id>12626756</id><snippet>source bin/activate
wget http://python-distribute.org/distribute_setup.py
python distribute_setup.py
</snippet></ROW><ROW><id>12626858</id><snippet>Accept-Language</snippet></ROW><ROW><id>12626858</id><snippet>Accept-Language</snippet></ROW><ROW><id>12626858</id><snippet>Accept-Language</snippet></ROW><ROW><id>12626858</id><snippet>headers = {'Accept-Language': 'de-ch,en'}
</snippet></ROW><ROW><id>12626858</id><snippet># -*- coding: utf-8 -*-
import urllib2

psc = '10000'
name = 'Malešice'
url = 'http://maps.google.com/maps/geo?q=%s&amp;output=csv' % urllib2.quote('Czech Republic %s %s' % (psc, name))
headers = {'Accept-Language': 'de-ch,en'}

req = urllib2.Request(url, None, headers)
response = urllib2.urlopen(req)
data = response.read()

print 'Parsed url %s, result %s\n' % (url, data)
</snippet></ROW><ROW><id>12626858</id><snippet>Accept-Language</snippet></ROW><ROW><id>12627023</id><snippet>request.is_secure()</snippet></ROW><ROW><id>12627023</id><snippet>False</snippet></ROW><ROW><id>12627023</id><snippet>http</snippet></ROW><ROW><id>12627023</id><snippet>https</snippet></ROW><ROW><id>12627023</id><snippet>request.is_secure()</snippet></ROW><ROW><id>12627023</id><snippet>False</snippet></ROW><ROW><id>12627023</id><snippet>SECURE_PROXY_SSL_HEADER</snippet></ROW><ROW><id>12627023</id><snippet>is_secure()</snippet></ROW><ROW><id>12627023</id><snippet>False</snippet></ROW><ROW><id>12627023</id><snippet>SECURE_PROXY_SSL_HEADER</snippet></ROW><ROW><id>12627202</id><snippet>import inspect
a = inspect.getargspec(eat_dog)
zip(a.args[-len(a.defaults):],a.defaults)
</snippet></ROW><ROW><id>12627202</id><snippet>a.args[-len(a.defaults):]</snippet></ROW><ROW><id>12627202</id><snippet>a.defaults</snippet></ROW><ROW><id>12627202</id><snippet>zip</snippet></ROW><ROW><id>12627202</id><snippet>dict</snippet></ROW><ROW><id>12627202</id><snippet>inspect.getargspect</snippet></ROW><ROW><id>12627202</id><snippet>import inspect
def get_default_args(func):
    """
    returns a dictionary of arg_name:default_values for the input function
    """
    args, varargs, keywords, defaults = inspect.getargspec(func)
    return dict(zip(args[-len(defaults):], defaults))
</snippet></ROW><ROW><id>12627202</id><snippet>    return dict(zip(reversed(args), reversed(defaults)))
</snippet></ROW><ROW><id>12627380</id><snippet>accelerator</snippet></ROW><ROW><id>12627380</id><snippet>menu1.add_command(label='Informationen', command = info, accelerator="F5")
menu1.add_command(label='Beenden', command = ende, accelerator="esc")
</snippet></ROW><ROW><id>12627480</id><snippet>settings.AWS_HEADERS</snippet></ROW><ROW><id>12627480</id><snippet>AWS_HEADERS = {
    'Expires': 'Sun, 19 Jul 2020 18:06:32 GMT'
}
</snippet></ROW><ROW><id>12627480</id><snippet>django-compressor</snippet></ROW><ROW><id>12627480</id><snippet>settings.COMPRESS_*_DELAY</snippet></ROW><ROW><id>12627609</id><snippet>tempfile</snippet></ROW><ROW><id>12627744</id><snippet>class Story(db.Model);
  name = db.StringProperty()

class UserProfile(db.Model):
  name = db.StringProperty()
  user = db.UserProperty()

class Tracking(db.Model):
  story = db.ReferenceProperty(Story)
  upvoted = db.ListProperty(db.Key)
  flagged = db.ListProperty(db.Key)
</snippet></ROW><ROW><id>12627744</id><snippet>Tracking.all().filter('story =', db.Key.from_path('Story', uid)).filter('upvoted =', db.Key.from_path('UserProfile', uid)).get(keys_only=True)
</snippet></ROW><ROW><id>12627790</id><snippet>PIL 1.1.7</snippet></ROW><ROW><id>12627790</id><snippet>im.save(outfile, "PDF", resolution=100.0)
</snippet></ROW><ROW><id>12627807</id><snippet>def execute(access):
  return access.getTree(SystemTree.Geographic).resolve(path).getDisplayName()

name = connection.runReadAction(readActionResult=execute)
</snippet></ROW><ROW><id>12627816</id><snippet>datetime</snippet></ROW><ROW><id>12627816</id><snippet>tzinfo</snippet></ROW><ROW><id>12627816</id><snippet>datetime</snippet></ROW><ROW><id>12627997</id><snippet>sys.getsizeof(object, [default])</snippet></ROW><ROW><id>12627997</id><snippet>TypeError</snippet></ROW><ROW><id>12627997</id><snippet>default</snippet></ROW><ROW><id>12627997</id><snippet>dis</snippet></ROW><ROW><id>12627997</id><snippet>dis</snippet></ROW><ROW><id>12628024</id><snippet>write</snippet></ROW><ROW><id>12628024</id><snippet>file</snippet></ROW><ROW><id>12628024</id><snippet>write</snippet></ROW><ROW><id>12628024</id><snippet>fputs</snippet></ROW><ROW><id>12628024</id><snippet>$ cat file_subclass.py
import sys
class FileSubclass(file):
    def write(self, *a, **kw):
        raise Exception("write called!")
    writelines = write
sys.stdout = FileSubclass("/dev/null", "w")
print "foo"
sys.stderr.write("print succeeded!\n")
$ python print_magic.py
print succeeded!
</snippet></ROW><ROW><id>12628024</id><snippet>write</snippet></ROW><ROW><id>12628024</id><snippet>file</snippet></ROW><ROW><id>12628024</id><snippet>$ cat object_subclass.py
import sys
class ObjectSubclass(object):
    def __init__(self):
        pass
    def write(self, *a, **kw):
        raise Exception("write called!")
    writelines = write
sys.stdout = ObjectSubclass()
print "foo"
sys.stderr.write("print succeeded!\n")
$ python object_subclass.py
Traceback (most recent call last):
  File "x.py", line 13, in &lt;module&gt;
    print "foo"
  File "x.py", line 8, in write
    raise Exception("write called!")
Exception: write called!
</snippet></ROW><ROW><id>12628024</id><snippet>PyFile_WriteString</snippet></ROW><ROW><id>12628024</id><snippet>print</snippet></ROW><ROW><id>12628024</id><snippet>file</snippet></ROW><ROW><id>12628024</id><snippet>fputs</snippet></ROW><ROW><id>12628024</id><snippet>int
PyFile_WriteString(const char *s, PyObject *f)
{

    if (f == NULL) {
        /* … snip … */
    }
    else if (PyFile_Check(f)) { //-- `isinstance(f, file)`
        PyFileObject *fobj = (PyFileObject *) f;
        FILE *fp = PyFile_AsFile(f);
        if (fp == NULL) {
            err_closed();
            return -1;
        }
        FILE_BEGIN_ALLOW_THREADS(fobj)
        fputs(s, fp); //-- fputs, bypassing the Python object entirely
        FILE_END_ALLOW_THREADS(fobj)
        return 0;
    }
    else if (!PyErr_Occurred()) {
        PyObject *v = PyString_FromString(s);
        int err;
        if (v == NULL)
            return -1;
        err = PyFile_WriteObject(v, f, Py_PRINT_RAW);
        Py_DECREF(v);
        return err;
    }
    else
        return -1;
}
</snippet></ROW><ROW><id>12628445</id><snippet>MyDict</snippet></ROW><ROW><id>12628445</id><snippet>object</snippet></ROW><ROW><id>12628445</id><snippet>.keys()</snippet></ROW><ROW><id>12628445</id><snippet>class MyDict(object):
    def __init__(self, dict={}):
        self.__dict = dict

    def keys(self):
        return self.__dict.keys()

    def __getitem__(self, item):
        print "Doing some stuff for item:", item
        return self.__dict[item]

    def __setitem__(self, item, value):
        self.__dict[item] = value

    # You can add some more dict methods

d1 = MyDict({'1': 1, '2': 2})
d2 = {}
# Now you will see some stuff executed for each
# value extracted from d1 while updating d2
d2.update(d1)
</snippet></ROW><ROW><id>12628514</id><snippet>print str(row[0]).decode('utf-16le')
</snippet></ROW><ROW><id>12628636</id><snippet>fn</snippet></ROW><ROW><id>12628636</id><snippet>'.\out\' + fn</snippet></ROW><ROW><id>12628636</id><snippet>fn</snippet></ROW><ROW><id>12628636</id><snippet>f = open(r'.\out\' + fn ,mode)
</snippet></ROW><ROW><id>12628636</id><snippet>/</snippet></ROW><ROW><id>12628636</id><snippet>os.path.join()</snippet></ROW><ROW><id>12628636</id><snippet>filename = os.path.join('./out', fn)
</snippet></ROW><ROW><id>12628636</id><snippet>filename</snippet></ROW><ROW><id>12628702</id><snippet>__getstate__</snippet></ROW><ROW><id>12628702</id><snippet>__setstate__</snippet></ROW><ROW><id>12628702</id><snippet>import cPickle as pickle

class Family(object):
    __slots__ = ['father', 'var1']
    def __init__(self, father, var1 = 1):
        self.father, self.var1 = father, var1
    def __getstate__(self):
        return self.father, self.var1
    def __setstate__(self, state):
        self.father, self.var1 = state

foo = Family('father',1)
foo.var1 = 2
foo_pickled = pickle.dumps(foo)
foo2 = pickle.loads(foo_pickled)
print(repr(foo2))
# &lt;__main__.Family object at 0xb77037ec&gt;

print(foo2.var1)
# 2
</snippet></ROW><ROW><id>12629012</id><snippet>shortword = re.compile(r'\W*\b\w{1,3}\b')
</snippet></ROW><ROW><id>12629012</id><snippet>&gt;&gt;&gt; shortword.sub('', anytext)
' echo chamber from Ontario '
</snippet></ROW><ROW><id>12629012</id><snippet>\b</snippet></ROW><ROW><id>12629012</id><snippet>\W*</snippet></ROW><ROW><id>12629012</id><snippet>\W</snippet></ROW><ROW><id>12629012</id><snippet>\s</snippet></ROW><ROW><id>12629012</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; def re_remove(text): return shortword.sub('', text)
... 
&gt;&gt;&gt; def lc_remove(text): return ' '.join(word for word in text.split() if len(word)&gt;3)
... 
&gt;&gt;&gt; timeit.timeit('remove(" in the echo chamber from Ontario duo ")', 'from __main__ import re_remove as remove')
7.0774190425872803
&gt;&gt;&gt; timeit.timeit('remove(" in the echo chamber from Ontario duo ")', 'from __main__ import lc_remove as remove')
6.4250049591064453
</snippet></ROW><ROW><id>12629027</id><snippet>from five import grok
from plone.directives import form

from zope.interface import invariant, Invalid
from zope import schema

from z3c.form import button
from z3c.form.interfaces import ActionExecutionError, WidgetActionExecutionError

from Products.CMFCore.interfaces import ISiteRoot
from Products.statusmessages.interfaces import IStatusMessage

from example.dexterityforms.interfaces import MessageFactory as _


...


class OrderForm(form.SchemaForm):

    ...

    @button.buttonAndHandler(_(u'Order'))
    def handleApply(self, action):
        data, errors = self.extractData()

        # Some additional validation
        if 'address1' in data and 'address2' in data:

            if len(data['address1']) &lt; 2 and len(data['address2']) &lt; 2:
                raise ActionExecutionError(Invalid(_(u"Please provide a valid address")))
            elif len(data['address1']) &lt; 2 and len(data['address2']) &gt; 10:
                raise WidgetActionExecutionError('address2', Invalid(u"Please put the main part of the address in the first field"))

        if errors:
            self.status = self.formErrorsMessage
            return
</snippet></ROW><ROW><id>12629458</id><snippet>"&lt;a href=\"%s\"&gt;%s&lt;/a&gt;"</snippet></ROW><ROW><id>12629458</id><snippet>str(row.the_team).ljust(50)</snippet></ROW><ROW><id>12629458</id><snippet>str(row.the_team).ljust(50+len(row.slug)+15)</snippet></ROW><ROW><id>12629458</id><snippet>&lt;a href=""&gt;&lt;/a&gt;</snippet></ROW><ROW><id>12629458</id><snippet>str</snippet></ROW><ROW><id>12629458</id><snippet>output = '&lt;pre&gt;\n'
output += '%s %s%s%s\n' % ('Rk'.rjust(3), 'Team'.ljust(50), 'W'.rjust(2), 'L'.rjust(2))
output += '%s %s%s%s\n' % ('--'.rjust(3), '----'.ljust(50), '-'.rjust(2), '-'.rjust(2))

for team in teams:
    link = '&lt;a href="%s"&gt;%s&lt;/a&gt;' % (team.slug, team.name)
    link = link.ljust(50 + len(team.slug) + 15)
    rank, won, lost = str(team.rank).rjust(3), str(team.won).rjust(2), str(team.lost).rjust(2)
    output += '%s %s%s%s\n' % (rank, link, won, lost)
output += '&lt;/pre&gt;'
print output
</snippet></ROW><ROW><id>12629800</id><snippet>from os.path import expanduser
import os.path.join

SaveDirectory = expanduser(os.path.join('Desktop', 'office_docs'))
</snippet></ROW><ROW><id>12629851</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>12629851</id><snippet>select.select()</snippet></ROW><ROW><id>12629863</id><snippet>os.kill()</snippet></ROW><ROW><id>12629863</id><snippet>kill</snippet></ROW><ROW><id>12629984</id><snippet>()</snippet></ROW><ROW><id>12630121</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get("http://www.deanclatworthy.com/imdb/?q=The+Green+Mile")
&gt;&gt;&gt; import dict2xml
&gt;&gt;&gt; xml = dict2xml.dict2xml(r.json)
&gt;&gt;&gt; print xml
&lt;country&gt;USA&lt;/country&gt;
&lt;genres&gt;Crime,Drama,Fantasy,Mystery&lt;/genres&gt;
&lt;imdbid&gt;tt0120689&lt;/imdbid&gt;
&lt;imdburl&gt;http://www.imdb.com/title/tt0120689/&lt;/imdburl&gt;
&lt;languages&gt;English,French&lt;/languages&gt;
&lt;rating&gt;8.5&lt;/rating&gt;
&lt;runtime&gt;189min&lt;/runtime&gt;
&lt;series&gt;0&lt;/series&gt;
&lt;stv&gt;0&lt;/stv&gt;
&lt;title&gt;The Green Mile&lt;/title&gt;
&lt;ukscreens&gt;340&lt;/ukscreens&gt;
&lt;usascreens&gt;2875&lt;/usascreens&gt;
&lt;votes&gt;344054&lt;/votes&gt;
&lt;year&gt;1999&lt;/year&gt;
</snippet></ROW><ROW><id>12630234</id><snippet>def print_var(variable_list):
    for i, element in enumerate(variable_list):
        print 'x' + str(i) + ' = ' + element

mylist = ['var','var1','var2','var3']
anotherlist = ['var','var1','var2','var4','var5']
print_var(mylist)
print_var(anotherlist)
</snippet></ROW><ROW><id>12630424</id><snippet>surrogate</snippet></ROW><ROW><id>12630424</id><snippet>mock</snippet></ROW><ROW><id>12630424</id><snippet>from surrogate import surrogate
from mock import patch

@surrogate('this.module.doesnt.exist')
@patch('this.module.doesnt.exits', whatever)
def test_something():
    from this.module.doesnt import exist
    do_something()
</snippet></ROW><ROW><id>12630424</id><snippet>@surrogate</snippet></ROW><ROW><id>12630424</id><snippet>@patch</snippet></ROW><ROW><id>12630424</id><snippet>@patch</snippet></ROW><ROW><id>12630424</id><snippet>@surrogate</snippet></ROW><ROW><id>12630466</id><snippet>abort(http_code)</snippet></ROW><ROW><id>12630466</id><snippet>@app.errorhandler()</snippet></ROW><ROW><id>12630570</id><snippet>import collections

def myzip(*args):
    if all(isinstance(arg, collections.Iterable) for arg in args):
        return [myzip(*vals) for vals in zip(*args)]
    return args
</snippet></ROW><ROW><id>12630570</id><snippet>&gt;&gt;&gt; a = [1,2,3,[4,[5,6]]]
&gt;&gt;&gt; b = [1,2,3,[4,[5,6]]]
&gt;&gt;&gt; myzip(a, b)
[(1, 1), (2, 2), (3, 3), [(4, 4), [(5, 5), (6, 6)]]]
</snippet></ROW><ROW><id>12630570</id><snippet>collections.Iterable</snippet></ROW><ROW><id>12630570</id><snippet>list</snippet></ROW><ROW><id>12630570</id><snippet>zip()</snippet></ROW><ROW><id>12630613</id><snippet>dowork()</snippet></ROW><ROW><id>12630613</id><snippet>dowork()</snippet></ROW><ROW><id>12630624</id><snippet>cursor</snippet></ROW><ROW><id>12630624</id><snippet>.description</snippet></ROW><ROW><id>12630624</id><snippet>for x in result:
    row = { d[0].lower(): col for (d, col) in zip(cursor.description, x) }
    name = row['name']
    age = row['age']
</snippet></ROW><ROW><id>12630624</id><snippet>.description</snippet></ROW><ROW><id>12630685</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>12630685</id><snippet>csv</snippet></ROW><ROW><id>12630685</id><snippet>csv.DictReader</snippet></ROW><ROW><id>12630685</id><snippet>"Name"</snippet></ROW><ROW><id>12630685</id><snippet>import itertools
import csv
import operator
import random

with open("test.csv") as file:
    data = csv.DictReader(file)
    key = operator.itemgetter("Name")
    for name, items in itertools.groupby(sorted(data, key=key), key):
        print(name+":", random.sample(list(items), 3))
</snippet></ROW><ROW><id>12630685</id><snippet>Cat: [{'Size': '33', 'Name': 'Cat', 'No': '351'}, {'Size': '590', 'Name': 'Cat', 'No': '289'}, {'Size': '465', 'Name': 'Cat', 'No': '1193'}]
Dog: [{'Size': '178', 'Name': 'Dog', 'No': '44'}, {'Size': '812', 'Name': 'Dog', 'No': '51'}, {'Size': '302', 'Name': 'Dog', 'No': '12'}]
</snippet></ROW><ROW><id>12630685</id><snippet>[[item["No"], item["Size"], item["Name"]] for item in items] 
</snippet></ROW><ROW><id>12630711</id><snippet>CELERYD_MAX_TASKS_PER_CHILD</snippet></ROW><ROW><id>12630817</id><snippet>t</snippet></ROW><ROW><id>12630817</id><snippet>T</snippet></ROW><ROW><id>12630817</id><snippet>input</snippet></ROW><ROW><id>12630817</id><snippet>input = input.replace('t', ' ').replace('T', ' ')
</snippet></ROW><ROW><id>12630817</id><snippet>import re
input = re.sub('[tT]', ' ', input)
</snippet></ROW><ROW><id>12631095</id><snippet>collections.Counter</snippet></ROW><ROW><id>12631095</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter('ATCGACAG')
Counter({'A': 3, 'C': 2, 'G': 2, 'T': 1})
&gt;&gt;&gt; Counter('ACCGACG')
Counter({'C': 3, 'A': 2, 'G': 2})
</snippet></ROW><ROW><id>12631273</id><snippet>try</snippet></ROW><ROW><id>12631273</id><snippet>except</snippet></ROW><ROW><id>12631273</id><snippet>if True: #</snippet></ROW><ROW><id>12631273</id><snippet>try</snippet></ROW><ROW><id>12631273</id><snippet>    if True: #try:
        return get_callable(callback), {}
#   except (ImportError, AttributeError), e:
#       raise ViewDoesNotExist("Tried %s. Error was: %s" % (callback, st    r(e)))
</snippet></ROW><ROW><id>12631273</id><snippet>finally: pass</snippet></ROW><ROW><id>12631273</id><snippet>except</snippet></ROW><ROW><id>12631273</id><snippet>    try:
        return get_callable(callback), {}
#   except (ImportError, AttributeError), e:
#       raise ViewDoesNotExist("Tried %s. Error was: %s" % (callback, st    r(e)))
    finally:
        pass
</snippet></ROW><ROW><id>12631273</id><snippet>try:</snippet></ROW><ROW><id>12631273</id><snippet>#   try:
    return get_callable(callback), {}
#   except (ImportError, AttributeError), e:
#       raise ViewDoesNotExist("Tried %s. Error was: %s" % (callback, st    r(e)))
</snippet></ROW><ROW><id>12631273</id><snippet>try:</snippet></ROW><ROW><id>12631273</id><snippet>except</snippet></ROW><ROW><id>12631273</id><snippet>finally</snippet></ROW><ROW><id>12631280</id><snippet>def make_change(money, coins):
  if money == 0 or len(coins) == 0: return 0
  return calculate_change(money, list(set(coins)), 0)
</snippet></ROW><ROW><id>12631280</id><snippet>public static int make_change(int money, int coins[]) {
  if (money == 0 || coins.length == 0) return 0;
  return calculate_change(money, coins, 0);
}
</snippet></ROW><ROW><id>12631280</id><snippet>def make_change(money, coins):
  if money == 0 or len(coins) == 0: 
    return 0
  return calculate_change(money, list(set(coins)), 0)
</snippet></ROW><ROW><id>12631280</id><snippet>public static int make_change(int money, int coins[]) {
  if (money == 0 || coins.length == 0) {
    return 0;
  }
  return calculate_change(money, coins, 0);
}
</snippet></ROW><ROW><id>12631280</id><snippet>main</snippet></ROW><ROW><id>12631280</id><snippet>[2, 1]</snippet></ROW><ROW><id>12631280</id><snippet>System.out.println</snippet></ROW><ROW><id>12631280</id><snippet>print</snippet></ROW><ROW><id>12631280</id><snippet>length</snippet></ROW><ROW><id>12631280</id><snippet>len</snippet></ROW><ROW><id>12631280</id><snippet>//</snippet></ROW><ROW><id>12631280</id><snippet>#</snippet></ROW><ROW><id>12631280</id><snippet>return (calculate_change(money, coins, total + c, combo + [c]) +
    calculate_change(money, coins[1:], total, combo))
</snippet></ROW><ROW><id>12631280</id><snippet>int coins[]</snippet></ROW><ROW><id>12631280</id><snippet>start</snippet></ROW><ROW><id>12631280</id><snippet>public static int calculate_change(int money, int coins[], int start, int total) {
    if (total == money) {
        return 1;
    }
    if (total &gt; money || coins.length == start) {
        return 0;
    }
    return calculate_change(money, coins, 0, total + coins[start]) +
        calculate_change(money, coins, start + 1 total);
}
</snippet></ROW><ROW><id>12631280</id><snippet>comboWithC = combo + [c]
</snippet></ROW><ROW><id>12631280</id><snippet>List&lt;Integer&gt; comboWithC = Lists.newArrayList(combo);
comboWithC.add(c);
</snippet></ROW><ROW><id>12631280</id><snippet>List&lt;&gt;</snippet></ROW><ROW><id>12631280</id><snippet>list</snippet></ROW><ROW><id>12631280</id><snippet>List</snippet></ROW><ROW><id>12631280</id><snippet>__add__</snippet></ROW><ROW><id>12631521</id><snippet>&gt;&gt;&gt; q1 = (Products.objects.annotate(num_ratings = Count('ratingentries'))
...       .filter(num_ratings__gt = 10))
&gt;&gt;&gt; q2 = (Products.objects.annotate(num_ratings = Count('ratingentries'))
...       .exclude(num_ratings__gt = 10))
&gt;&gt;&gt; print(str((q1 | q2).query))
SELECT `myapp_products`.`id`, COUNT(`myapp_ratingentries`.`id`) AS
`num_ratings` FROM `myapp_products` LEFT OUTER JOIN `myapp_ratingentries` ON
(`myapp_products`.`id` = `myapp_ratingentries`.`product_id`) GROUP BY
`myapp_products`.`id` HAVING COUNT(`myapp_ratingentries`.`id`) &gt; 10
ORDER BY NULL
</snippet></ROW><ROW><id>12631521</id><snippet>q1</snippet></ROW><ROW><id>12631521</id><snippet>HAVING</snippet></ROW><ROW><id>12631521</id><snippet>q2</snippet></ROW><ROW><id>12631521</id><snippet>&gt;&gt;&gt; q = Q(num_products__gt = 10) | ~Q(num_products__gt = 10)
&gt;&gt;&gt; q3 = Products.objects.annotate(num_ratings = Count('ratingentries')).filter(q)
&gt;&gt;&gt; print(str(q3.query))
SELECT `myapp_products`.`id`, COUNT(`myapp_ratingentries`.`id`) AS
`num_ratings` FROM `myapp_products` LEFT OUTER JOIN `myapp_ratingentries` ON
(`myapp_products`.`id` = `myapp_ratingentries`.`product_id`) GROUP BY
`myapp_products`.`id` HAVING (COUNT(`myapp_ratingentries`.`id`) &gt; 10 OR NOT
(COUNT(`myapp_ratingentries`.`id`) &gt; 10 )) ORDER BY NULL
</snippet></ROW><ROW><id>12631521</id><snippet>HAVING</snippet></ROW><ROW><id>12631531</id><snippet>#include &lt;stdio.h&gt;

void adding(int i) {
    i = i + 1;
}

int main() {
    int i = 0;
    adding(i);
    printf("i is %d\n", i);  // will print "i is 0"
    return 0;
}
</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>int i</snippet></ROW><ROW><id>12631531</id><snippet>adding(int i)</snippet></ROW><ROW><id>12631531</id><snippet>int
i</snippet></ROW><ROW><id>12631531</id><snippet>main()</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>i = i + 1</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>i</snippet></ROW><ROW><id>12631531</id><snippet>main()</snippet></ROW><ROW><id>12631531</id><snippet>#include &lt;iostream&gt;

void adding(int &amp;i) {
    i = i + 1;
}

int main() {
    int i = 0;
    adding(i);
    std::cout &lt;&lt; "i is " &lt;&lt; i &lt;&lt; std::endl;  // will print "i is 1"
    return 0;
}
</snippet></ROW><ROW><id>12631531</id><snippet>i</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>i</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>i</snippet></ROW><ROW><id>12631531</id><snippet>main()</snippet></ROW><ROW><id>12631531</id><snippet>i</snippet></ROW><ROW><id>12631531</id><snippet># Case 1
mylist = [1,2,3,4]
mylist.append(5)  # will print [1,2,3,4,5]

# Case 2
mylist = [1,2,3,4]
def adding(mylist):
    mylist.append(5)

adding(mylist)
print mylist  # will print [1,2,3,4,5]

# Case 3
mylist = [1,2,3,4]
def adding(mylist):
    mylist = mylist + [5]

adding(mylist)
print mylist  # will print [1,2,3,4]

# Case 4
mylist = [1,2,3,4]
def adding(mylist):
    mylist += [5]

adding(mylist)
print mylist  # will print [1,2,3,4,5]
</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>mylist = [1,2,3,4]</snippet></ROW><ROW><id>12631531</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>PyObject</snippet></ROW><ROW><id>12631531</id><snippet>.append()</snippet></ROW><ROW><id>12631531</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>12631531</id><snippet>myobject</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>.append()</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>adding()</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>[1,2,3,4]+[4]</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>12631531</id><snippet>+=</snippet></ROW><ROW><id>12631531</id><snippet>.extend()</snippet></ROW><ROW><id>12631531</id><snippet>[1,2,3,4,5]</snippet></ROW><ROW><id>12631531</id><snippet>mylist</snippet></ROW><ROW><id>12631531</id><snippet>+=</snippet></ROW><ROW><id>12631650</id><snippet># setup
def distance(nplet):
    '''Takes a pair or triplet (an "n-plet") as a list, and returns its distance.
    A smaller return value means better agreement.'''
    # your choice of implementation here. Example:
    return variance(nplet)

# algorithm
def brute_force(*lists):
    return min(itertools.product(*lists), key = distance)
</snippet></ROW><ROW><id>12631650</id><snippet>def item_selection(listA, listB, listC):
    # make the list of partially-filled triplets
    triplets = [[a] for a in listA]
    iT = 0
    iB = 0
    while iT &lt; len(triplets):
        # make iB the index of a value in listB closes to triplets[iT][0]
        while iB &lt; len(listB) and listB[iB] &lt; triplets[iT][0]:
            iB += 1
        if iB == 0:
            triplets[iT].append(listB[0])
        elif iB == len(listB)
            triplets[iT].append(listB[-1])
        else:
            # look at the values in listB just below and just above triplets[iT][0]
            # and add the closer one as the second member of the triplet
            dist_lower = distance([triplets[iT][0], listB[iB]])
            dist_upper = distance([triplets[iT][0], listB[iB + 1]])
            if dist_lower &lt; dist_upper:
                triplets[iT].append(listB[iB])
            elif dist_lower &gt; dist_upper:
                triplets[iT].append(listB[iB + 1])
            else:
                # if they are equidistant, add both
                triplets[iT].append(listB[iB])
                iT += 1
                triplets[iT:iT] = [triplets[iT-1][0], listB[iB + 1]]
        iT += 1
    # then another loop while iT &lt; len(triplets) to add in the numbers from listC
    return min(triplets, key = distance)
</snippet></ROW><ROW><id>12631650</id><snippet>def symmetrized_item_selection(listA, listB, listC):
    best_results = []
    for ordering in itertools.permutations([listA, listB, listC]):
        best_results.extend(item_selection(*ordering))
    return min(best_results, key = distance)
</snippet></ROW><ROW><id>12631650</id><snippet>def pair_sorting(listA, listB, listC):
    # make all possible pairs of values from two lists
    # each pair has the structure ((number, origin_list),(number, origin_list))
    # so we know which lists the numbers came from
    all_pairs = []
    all_pairs += [((nA,0), (nB,1)) for (nA,nB) in itertools.product(listA,listB)]
    all_pairs += [((nA,0), (nC,2)) for (nA,nC) in itertools.product(listA,listC)]
    all_pairs += [((nB,1), (nC,2)) for (nB,nC) in itertools.product(listB,listC)]
    all_pairs.sort(key = lambda p: distance(p[0][0], p[1][0]))
    # make a dict to track which (number, origin_list)s we've already seen
    pairs_by_number_and_list = collections.defaultdict(list)
    min_distance = INFINITY
    min_triplet = None
    # start with the closest pair
    for pair in all_pairs:
        # for the first value of the current pair, see if we've seen that particular
        # (number, origin_list) combination before
        for pair2 in pairs_by_number_and_list[pair[0]]:
            # if so, that means the current pair shares its first value with
            # another pair, so put the 3 unique values together to make a triplet
            this_triplet = (pair[1][0], pair2[0][0], pair2[1][0])
            # check if the triplet agrees more than the previous best triplet
            this_distance = distance(this_triplet)
            if this_distance &lt; min_distance:
                min_triplet = this_triplet
                min_distance = this_distance
        # do the same thing but checking the second element of the current pair
        for pair2 in pairs_by_number_and_list[pair[1]]:
            this_triplet = (pair[0][0], pair2[0][0], pair2[1][0])
            this_distance = distance(this_triplet)
            if this_distance &lt; min_distance:
                min_triplet = this_triplet
                min_distance = this_distance
        # finally, add the current pair to the list of pairs we've seen
        pairs_by_number_and_list[pair[0]].append(pair)
        pairs_by_number_and_list[pair[1]].append(pair)
    return min_triplet
</snippet></ROW><ROW><id>12631827</id><snippet>'/'</snippet></ROW><ROW><id>12631827</id><snippet>//</snippet></ROW><ROW><id>12631827</id><snippet>100/2</snippet></ROW><ROW><id>12631827</id><snippet>50.0</snippet></ROW><ROW><id>12631827</id><snippet>100//2</snippet></ROW><ROW><id>12631827</id><snippet>50</snippet></ROW><ROW><id>12631827</id><snippet>coded = ((eval(input(':'))+1213633288469888484)//2)+1042
</snippet></ROW><ROW><id>12631827</id><snippet>int</snippet></ROW><ROW><id>12631827</id><snippet>eval</snippet></ROW><ROW><id>12631827</id><snippet>coded = ((int(input(':'))+1213633288469888484)//2)+1042
</snippet></ROW><ROW><id>12631995</id><snippet>vname = 'chr3'
list_I_want = globals()['LIST_'+vname]
</snippet></ROW><ROW><id>12631995</id><snippet>dict</snippet></ROW><ROW><id>12631995</id><snippet>my_list_dict = dict(LIST_chr1=[],LIST_chr2=[],LIST_chr3=[],...)
</snippet></ROW><ROW><id>12631995</id><snippet>list_I_want = my_list_dict['LIST_'+vname]
</snippet></ROW><ROW><id>12632325</id><snippet>exec_</snippet></ROW><ROW><id>12632325</id><snippet>exec_</snippet></ROW><ROW><id>12632325</id><snippet>move</snippet></ROW><ROW><id>12632325</id><snippet>popup</snippet></ROW><ROW><id>12632325</id><snippet>exec_</snippet></ROW><ROW><id>12632325</id><snippet>exec_</snippet></ROW><ROW><id>12632663</id><snippet>for word in words:
    for i in range(len(word)):
        temp = string[0:i] + first + string[i:len(string)]
        print "temp = " + str(temp)
        perm.append(temp)
</snippet></ROW><ROW><id>12632663</id><snippet>def get_powerset (string):
    perm = []
    if len(string) == 0:
        perm.append("")
        return perm
    #if len(string) == 1:
    #   perm.append(string)
    #   perm.append("")
    first = string[0]
    print "first = " + str(first)
    rem = string[1:len(string)]
    print "rem = " + str(rem)
    words = get_powerset(rem)
    perm.extend(words)
    for word in words:
        perm.append(first+word)

    return perm

if __name__=="__main__":
    a = "ab"
    mag  = get_powerset(a)
    print mag
</snippet></ROW><ROW><id>12632741</id><snippet>self.test()</snippet></ROW><ROW><id>12632741</id><snippet>test(self)</snippet></ROW><ROW><id>12632741</id><snippet>test</snippet></ROW><ROW><id>12632741</id><snippet>def test()</snippet></ROW><ROW><id>12632741</id><snippet>self</snippet></ROW><ROW><id>12632741</id><snippet>test</snippet></ROW><ROW><id>12632741</id><snippet>self</snippet></ROW><ROW><id>12632741</id><snippet>staticmethod</snippet></ROW><ROW><id>12632741</id><snippet>self</snippet></ROW><ROW><id>12632741</id><snippet>test</snippet></ROW><ROW><id>12632741</id><snippet>def test(self):
    print('test')
</snippet></ROW><ROW><id>12632741</id><snippet>@staticmethod
def test():
    print('test')
</snippet></ROW><ROW><id>12632741</id><snippet>some_object.some_method(...)</snippet></ROW><ROW><id>12632741</id><snippet>function(...)</snippet></ROW><ROW><id>12632741</id><snippet>self</snippet></ROW><ROW><id>12632771</id><snippet>(0,0), (1,1)</snippet></ROW><ROW><id>12632771</id><snippet>(0.5, 0.5)</snippet></ROW><ROW><id>12632771</id><snippet>(0,0)</snippet></ROW><ROW><id>12632771</id><snippet>(1,1)</snippet></ROW><ROW><id>12632771</id><snippet>(0+4)/2 = 2.0</snippet></ROW><ROW><id>12632973</id><snippet>A new statement is proposed with the syntax:

    with EXPR as VAR:
        BLOCK

....

The translation of the above statement is:

    mgr = (EXPR)
    exit = type(mgr).__exit__  # Not calling it yet
    value = type(mgr).__enter__(mgr)

....
</snippet></ROW><ROW><id>12632973</id><snippet>__getattr__(__exit__)</snippet></ROW><ROW><id>12632973</id><snippet>type(a).__exit__</snippet></ROW><ROW><id>12632973</id><snippet>class FileHolder(object):                                                                                                                 
    def __init__(self,*args,**kwargs):
        self.f= file(*args,**kwargs)

    def __enter__(self,*args,**kwargs):
        return self.f.__enter__(*args,**kwargs)

    def __exit__(self,*args,**kwargs):
        self.f.__exit__(*args,**kwargs)

    def __getattr__(self,item):
        return getattr(self.f,item)
</snippet></ROW><ROW><id>12633042</id><snippet>lst</snippet></ROW><ROW><id>12633042</id><snippet>index</snippet></ROW><ROW><id>12633042</id><snippet>import xlrd
wb = xlrd.open_workbook('myworkbook.xls')
sh = wb.sheet_by_index(0)
lst = [sh.row(n) for n in xrange(sh.nrows)]
searchdict = dict(B=1, E=2, C=3)
lst.sort(key=lambda row: searchdict.get(row[index][0], 4))
</snippet></ROW><ROW><id>12633042</id><snippet>[0]</snippet></ROW><ROW><id>12633042</id><snippet>dict.get</snippet></ROW><ROW><id>12633121</id><snippet>def build_sentence(info):</snippet></ROW><ROW><id>12633121</id><snippet>info</snippet></ROW><ROW><id>12633121</id><snippet>def build_sentence(info):
    addMe = " is a benefit of functions!"
    return info + addMe
</snippet></ROW><ROW><id>12633121</id><snippet>for i in info:
        meInfo = i + addMe
    return meInfo
</snippet></ROW><ROW><id>12633191</id><snippet>str.center</snippet></ROW><ROW><id>12633191</id><snippet>&gt;&gt;&gt; 'Percentage used: {:.2%}'.format(.4).center(60, '-')
'------------------Percentage used: 40.00%-------------------'
</snippet></ROW><ROW><id>12633621</id><snippet>billiard/forking.py</snippet></ROW><ROW><id>12633621</id><snippet>def _Django_old_layout_hack__save():
    if 'DJANGO_PROJECT_DIR' not in os.environ:
        try:
            settings_name = os.environ['DJANGO_SETTINGS_MODULE']
        except KeyError:
            return  # not using Django.

        try:
            project_name, _ = settings_name.split('.', 1)
        except ValueError:
            return  # not modified by setup_environ

        project = __import__(project_name)
        try:
            project_dir = os.path.normpath(_module_parent_dir(project))
        except AttributeError:
            return  # dynamically generated module (no __file__)
        warnings.warn(UserWarning(
            W_OLD_DJANGO_LAYOUT % os.path.realpath(project_dir)
        ))
        os.environ['DJANGO_PROJECT_DIR'] = project_dir
</snippet></ROW><ROW><id>12633621</id><snippet>os.environ</snippet></ROW><ROW><id>12633621</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>12633621</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>12633621</id><snippet>setup_environ</snippet></ROW><ROW><id>12633621</id><snippet>settings.py</snippet></ROW><ROW><id>12633621</id><snippet>settings</snippet></ROW><ROW><id>12633621</id><snippet>manage.py</snippet></ROW><ROW><id>12633621</id><snippet>wsgi.py</snippet></ROW><ROW><id>12633621</id><snippet>DJANGO_PROJECT_DIR</snippet></ROW><ROW><id>12633621</id><snippet>manage.py</snippet></ROW><ROW><id>12633621</id><snippet>manage.py</snippet></ROW><ROW><id>12633621</id><snippet>if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings.current")

    # Add the project directory to the path, to appease billiard
    os.environ.setdefault("DJANGO_PROJECT_DIR",
        os.path.dirname(os.path.realpath(__file__)))
</snippet></ROW><ROW><id>12633652</id><snippet>.png</snippet></ROW><ROW><id>12633796</id><snippet>&gt;&gt;&gt; d = {'abc':'AGCTAC', 'def': 'AGGTAC', 'ghi':'AGGTAG'}
&gt;&gt;&gt; zip(*d.values())
[('A', 'A', 'A'), ('G', 'G', 'G'), ('C', 'G', 'G'), ('T', 'T', 'T'), ('A', 'A', 'A'), ('C', 'G', 'C')]
</snippet></ROW><ROW><id>12633796</id><snippet>tuple()</snippet></ROW><ROW><id>12633796</id><snippet>&gt;&gt;&gt; tuple(zip(*d.values()))
(('A', 'A', 'A'), ('G', 'G', 'G'), ('C', 'G', 'G'), ('T', 'T', 'T'), ('A', 'A', 'A'), ('C', 'G', 'C'))
</snippet></ROW><ROW><id>12633796</id><snippet>Counter</snippet></ROW><ROW><id>12633796</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(zip(*d.values()))
Counter({('A', 'A', 'A'): 2, ('C', 'G', 'G'): 1, ('G', 'G', 'G'): 1, ('T', 'T', 'T'): 1, ('C', 'G', 'C'): 1})
</snippet></ROW><ROW><id>12634059</id><snippet>data = client.recv(8192)
</snippet></ROW><ROW><id>12634131</id><snippet>register</snippet></ROW><ROW><id>12634131</id><snippet>user_registered</snippet></ROW><ROW><id>12634187</id><snippet>if statement:
    Code...
</snippet></ROW><ROW><id>12634187</id><snippet>if statement == True:
    Code...
</snippet></ROW><ROW><id>12634187</id><snippet>if "!facebook" in data and senderusr in authlist:
    Code...
</snippet></ROW><ROW><id>12634195</id><snippet>class Event:
    def __init__(self, name):
        self.name = name
        self.people = []
</snippet></ROW><ROW><id>12634259</id><snippet>def open_popup(self, cr, uid, ids, context=None):
    mod_obj = self.pool.get('ir.model.data')
    if move.parent_production_id:
        res = mod_obj.get_object_reference(cr, uid, 'module_name', 'id_specified_for_the_view')
        return {
            'name': 'Provide your popup window name',
            'view_type': 'form',
            'view_mode': 'form',
            'view_id': [res and res[1] or False],
            'res_model': 'your.popup.model.name',
            'context': "{}",
            'type': 'ir.actions.act_window',
            'nodestroy': True,
            'target': 'new',
            'res_id': record_id  or False,##please replace record_id and provide the id of the record to be opened 
        }
</snippet></ROW><ROW><id>12634499</id><snippet>print open('roger.txt').read()
</snippet></ROW><ROW><id>12634575</id><snippet>from itertools import chain
from collections import defaultdict

a = {'I': [1,2], 'II': [1,2], 'IV': [1,2]}
b = {'I': [3,4], 'II': [3,4], 'V': [3,4]}

d = defaultdict(list)
for key, value in chain(a.iteritems(), b.iteritems()):
    d[key].extend(value)
d
</snippet></ROW><ROW><id>12634575</id><snippet>defaultdict(&lt;type 'list'&gt;, {'I': [1, 2, 3, 4], 'II': [1, 2, 3, 4], 'V': [3, 4], 'IV': [1, 2]})
</snippet></ROW><ROW><id>12634714</id><snippet>&amp;list=allpages
</snippet></ROW><ROW><id>12634823</id><snippet>.GET['pr no']</snippet></ROW><ROW><id>12634823</id><snippet>Unicode</snippet></ROW><ROW><id>12634823</id><snippet>if pr.isdigit():   # ASCII digits
</snippet></ROW><ROW><id>12634823</id><snippet>if pr.isnumeric(): # also Unicode digits
</snippet></ROW><ROW><id>12634823</id><snippet>try:
    int(pr)
except ValueError:
    print "PR is not an integer"
</snippet></ROW><ROW><id>12634823</id><snippet>try:
    float(pr)
except ValueError:
    print "PR is not a number"
</snippet></ROW><ROW><id>12634909</id><snippet>with open(filename) as f:
     for line in f:
         PyparsingGrammar.parseString(line)
</snippet></ROW><ROW><id>12634909</id><snippet>with</snippet></ROW><ROW><id>12634909</id><snippet>for x in something:
    do_something 
</snippet></ROW><ROW><id>12634909</id><snippet>list, tuple, dictionary</snippet></ROW><ROW><id>12634909</id><snippet>with open(filename) as f</snippet></ROW><ROW><id>12634909</id><snippet>list</snippet></ROW><ROW><id>12634909</id><snippet>f</snippet></ROW><ROW><id>12636151</id><snippet>urllib2</snippet></ROW><ROW><id>12636151</id><snippet>import urllib2

resp = urllib2.urlopen(url)
tree = etree.parse(resp)
</snippet></ROW><ROW><id>12636279</id><snippet>ctypes</snippet></ROW><ROW><id>12636279</id><snippet>pthreads</snippet></ROW><ROW><id>12636369</id><snippet>build_absolute_uri()</snippet></ROW><ROW><id>12636412</id><snippet>multiarray.so</snippet></ROW><ROW><id>12636588</id><snippet>\U0000ffff</snippet></ROW><ROW><id>12636588</id><snippet>highpoints = re.compile(u'[\uD800-\uDBFF][\uDC00-\uDFFF]')
</snippet></ROW><ROW><id>12636588</id><snippet>try:</snippet></ROW><ROW><id>12636588</id><snippet>except</snippet></ROW><ROW><id>12636588</id><snippet>try:
    highpoints = re.compile(u'[\U00010000-\U0010ffff]')
except re.error:
    # UCS-2 build
    highpoints = re.compile(u'[\uD800-\uDBFF][\uDC00-\uDFFF]')
</snippet></ROW><ROW><id>12636588</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; highpoints = re.compile(u'[\uD800-\uDBFF][\uDC00-\uDFFF]')
&gt;&gt;&gt; example = u'Some example text with a sleepy face: \U0001f62a'
&gt;&gt;&gt; highpoints.sub(u'', example)
u'Some example text with a sleepy face: '
</snippet></ROW><ROW><id>12636809</id><snippet>.split()</snippet></ROW><ROW><id>12636809</id><snippet>string = string.split(',', 1)[0]
</snippet></ROW><ROW><id>12636809</id><snippet>.partition()</snippet></ROW><ROW><id>12636809</id><snippet>string = string.partition(',')[0]
</snippet></ROW><ROW><id>12636809</id><snippet>&gt;&gt;&gt; 'Newyork, NY'.split(',', 1)[0]
'Newyork'
&gt;&gt;&gt; 'Newyork, NY'.partition(',')[0]
'Newyork'
</snippet></ROW><ROW><id>12636809</id><snippet>.partition()</snippet></ROW><ROW><id>12636809</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit("'one, two'.split(',', 1)[0]")
0.52929401397705078
&gt;&gt;&gt; timeit.timeit("'one, two'.partition(',')[0]")
0.26499605178833008
</snippet></ROW><ROW><id>12637331</id><snippet> request = urllib2.Request(page)
</snippet></ROW><ROW><id>12637331</id><snippet> request.add_header('User-agent', 'Mozilla/5.0 (Linux i686)')
</snippet></ROW><ROW><id>12637331</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>12637331</id><snippet> soup = BeautifulSoup(response)  
 text = soup.get_text()
</snippet></ROW><ROW><id>12637331</id><snippet> for url in soup.find_all('a',attrs={'href': re.compile("^http://")}):  
       link = url['href']
</snippet></ROW><ROW><id>12637528</id><snippet>__</snippet></ROW><ROW><id>12637528</id><snippet>estimator</snippet></ROW><ROW><id>12637528</id><snippet>OneVsRestClassifier</snippet></ROW><ROW><id>12637528</id><snippet>from sklearn.datasets import load_iris
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import f1_score

iris = load_iris()

model_to_set = OneVsRestClassifier(SVC(kernel="poly"))

parameters = {
    "estimator__C": [1,2,4,8],
    "estimator__kernel": ["poly","rbf"],
    "estimator__degree":[1, 2, 3, 4],
}

model_tunning = GridSearchCV(model_to_set, param_grid=parameters,
                             score_func=f1_score)

model_tunning.fit(iris.data, iris.target)

print model_tunning.best_score_
print model_tunning.best_params_
</snippet></ROW><ROW><id>12637528</id><snippet>0.973290762737
{'estimator__kernel': 'poly', 'estimator__C': 1, 'estimator__degree': 2}
</snippet></ROW><ROW><id>12637734</id><snippet>timeit</snippet></ROW><ROW><id>12637734</id><snippet>IPython</snippet></ROW><ROW><id>12637734</id><snippet>%timeit</snippet></ROW><ROW><id>12637734</id><snippet>Set</snippet></ROW><ROW><id>12637734</id><snippet>set</snippet></ROW><ROW><id>12637734</id><snippet>set</snippet></ROW><ROW><id>12637734</id><snippet>tags</snippet></ROW><ROW><id>12637734</id><snippet>%timeit</snippet></ROW><ROW><id>12637734</id><snippet>tags = ['aa','ab','ae','af','ak','an','ar']
tags_set = set(tags)
tags_str = "|".join(tags)

%timeit 'ro' in tags
1000000 loops, best of 3: 223 ns per loop
%timeit 'ro' in tags_set
1000000 loops, best of 3: 73.5 ns per loop
%timeit 'ro' in tags_str
1000000 loops, best of 3: 98.1 ns per loop
</snippet></ROW><ROW><id>12638085</id><snippet>from django.db.models import Sum
owners_magazines = Magazine.objects.filter(owner='Your owner')
total = 0;
for magazine in owners_magazines:
    item_values_with_total = magazine.items.values().annotate(total=Sum('item_price'))
    total += &lt;Read appropriately from item_values_with_total&gt;
</snippet></ROW><ROW><id>12638085</id><snippet>total</snippet></ROW><ROW><id>12638085</id><snippet>from django.db.models import Sum
    owners_magazines = Magazine.objects.filter(owner='Your owner')
    total = 0;
    for magazine in owners_magazines:
        all_items = magazines.items_set.all()
        for item in all_items:
            total += item.item_price

    print total
</snippet></ROW><ROW><id>12638327</id><snippet>import inspect

class MyUtil(object):
    @staticmethod
    def log(message, level):
        frame, module, line, function, context, index = inspect.stack()[1]
        self_name = frame.f_code.co_varnames[0]  # Name of the first argument (usually 'self')
        instance = frame.f_locals[self_name]
        class_name = instance.__class__.__name__
        print class_name

class Deployer(object):
    def deploy(self):
        MyUtil.log ("Starting deployment", "info")

Deployer().deploy()
</snippet></ROW><ROW><id>12638356</id><snippet>import ast, re

with open("your_script.py") as fp:
    tree = ast.parse(fp.read())

for node in ast.walk(tree):
    if (isinstance(node, ast.Str) 
            and isinstance(node.s, str) 
            and  re.search(r'[\x80-\xFF]', node.s)):
        print 'bad string %r line %d col %d' % (node.s, node.lineno, node.col_offset)
</snippet></ROW><ROW><id>12638356</id><snippet>fuß</snippet></ROW><ROW><id>12638356</id><snippet>fu\xdf</snippet></ROW><ROW><id>12638367</id><snippet>watch -n 0.1  wget -qO- http://google.com
</snippet></ROW><ROW><id>12638477</id><snippet>.format()</snippet></ROW><ROW><id>12638477</id><snippet>&gt;&gt;&gt; "{0:#0{1}x}".format(42,6)
0x002a
</snippet></ROW><ROW><id>12638477</id><snippet>{   # Format identifier
0:  # first parameter
#   # use "0x" prefix
0   # fill with zeroes
{1} # to a length of n characters (including 0x), defined by the second parameter
x   # hexadecimal number, using lowercase letters for a-f
}   # End of format identifier
</snippet></ROW><ROW><id>12638823</id><snippet>total = m.items.all().annotate(total=Sum('item_price'))
</snippet></ROW><ROW><id>12638860</id><snippet>func_proto = ctypes.WINFUNCTYPE(HRESULT, HWND)
</snippet></ROW><ROW><id>12638860</id><snippet>func_proto = ctypes.WINFUNCTYPE(HRESULT, c_long, HWND)
</snippet></ROW><ROW><id>12638860</id><snippet>show(0)
</snippet></ROW><ROW><id>12638860</id><snippet>show(ptr, 0)
</snippet></ROW><ROW><id>12638861</id><snippet>name.find("manifest.v3") &gt;= 0</snippet></ROW><ROW><id>12638861</id><snippet>name == "manifest.v3"</snippet></ROW><ROW><id>12638861</id><snippet>In [181]: name = "manifest.v3"

In [182]: name.find("manifest.v3") &gt;= 0
Out[182]: True

In [183]: name = "manifest.v3.old.old"

In [184]: name.find("manifest.v3") &gt;= 0
Out[184]: True

In [185]: name == "manifest.v3"
Out[185]: False

In [186]: name = "manifest.v3"

In [187]: name == "manifest.v3"
Out[187]: True
</snippet></ROW><ROW><id>12639101</id><snippet>class Client(object):
    def __new__(cls):
        print "NEW"
        return super(Client, cls).__new__(cls)
    def __init__(self):
        print "INIT"
</snippet></ROW><ROW><id>12639101</id><snippet>c = Client()</snippet></ROW><ROW><id>12639101</id><snippet>NEW
INIT
</snippet></ROW><ROW><id>12639925</id><snippet>s</snippet></ROW><ROW><id>12639925</id><snippet>values_scaled</snippet></ROW><ROW><id>12639925</id><snippet>c</snippet></ROW><ROW><id>12639925</id><snippet>values</snippet></ROW><ROW><id>12639925</id><snippet>sc = pyplot.scatter(pos_x, pos_y, c=values, s=values_scaled)
</snippet></ROW><ROW><id>12639964</id><snippet>def func_with_lots_of_args(arg1, arg2, arg3,
                           arg4, arg5):
</snippet></ROW><ROW><id>12639964</id><snippet>def func(arg1, arg2, arg3,
         arg4, arg5, arg6,
         kwd='foobar'):
</snippet></ROW><ROW><id>12639964</id><snippet>def func(arg1, arg2, arg3,
         arg4, arg5, arg6, kwd='foobar'):
</snippet></ROW><ROW><id>12640162</id><snippet>override_urls</snippet></ROW><ROW><id>12640162</id><snippet>wrap_view</snippet></ROW><ROW><id>12640162</id><snippet>obj_create</snippet></ROW><ROW><id>12640818</id><snippet>np.tile</snippet></ROW><ROW><id>12640818</id><snippet>U = np.dot(u, y)
d = U/w
a = u*d[:,None]
c = a.sum()
</snippet></ROW><ROW><id>12640847</id><snippet>pip</snippet></ROW><ROW><id>12640847</id><snippet>pip install package --upgrade</snippet></ROW><ROW><id>12640898</id><snippet>unit2</snippet></ROW><ROW><id>12641021</id><snippet>patch</snippet></ROW><ROW><id>12641021</id><snippet>with</snippet></ROW><ROW><id>12641021</id><snippet>import os
from mock import patch

def test(*args):
    import ipdb; ipdb.set_trace()
    with patch('os.path.isdir', return_value=False):
        with patch('os.path.isfile', return_value=False):
            real_function(some_arguments)
    pass

test()
</snippet></ROW><ROW><id>12641064</id><snippet>def to_dict(self):
     retval = {'identification': self.identifier,
               'information': self.information,
              }
     if self.children:
         retval['nodes'] = {e.position: e.to_dict for e in self.children}
     return retval
</snippet></ROW><ROW><id>12641064</id><snippet>dict()</snippet></ROW><ROW><id>12641064</id><snippet>dict()</snippet></ROW><ROW><id>12641064</id><snippet>def to_dict(self):
     retval = dict(identification=self.identifier,
                   information=self.information)
     if self.children:
         retval['nodes'] = {e.position: e.to_dict for e in self.children}
     return retval
</snippet></ROW><ROW><id>12641242</id><snippet>query = 'SELECT * FROM callerdetail WHERE screenname="1" AND status="0"AND agent =?'
</snippet></ROW><ROW><id>12641242</id><snippet>idd</snippet></ROW><ROW><id>12641242</id><snippet>cursor.execute(query, (idd,))
</snippet></ROW><ROW><id>12641242</id><snippet>.format()</snippet></ROW><ROW><id>12641242</id><snippet>query = 'SELECT * FROM callerdetail WHERE screenname="1" AND status="0"AND agent = "{0}"'.format(idd)
</snippet></ROW><ROW><id>12641546</id><snippet>print '2' == 2
</snippet></ROW><ROW><id>12641718</id><snippet>key</snippet></ROW><ROW><id>12641718</id><snippet>item_list</snippet></ROW><ROW><id>12641718</id><snippet>keys</snippet></ROW><ROW><id>12641718</id><snippet>itemlist</snippet></ROW><ROW><id>12641718</id><snippet>def __init__(self, *args, **kwargs):
   self.itemID = []
   self.itemlist = []
   ...
</snippet></ROW><ROW><id>12641718</id><snippet>add_item</snippet></ROW><ROW><id>12641718</id><snippet>def add_item(self, itemID, itemlist):
    self.itemID.append(itemID)
    self.itemlist.append(itemlist)
</snippet></ROW><ROW><id>12641718</id><snippet>get_key</snippet></ROW><ROW><id>12641718</id><snippet>def get_keys():
    return self.itemID
</snippet></ROW><ROW><id>12641718</id><snippet>get_key</snippet></ROW><ROW><id>12641718</id><snippet>lines = []
for line in self.itemID, itemlist:
    lines.append(line)
</snippet></ROW><ROW><id>12641718</id><snippet>line</snippet></ROW><ROW><id>12641718</id><snippet>self.itemID</snippet></ROW><ROW><id>12641718</id><snippet>itemlist</snippet></ROW><ROW><id>12641718</id><snippet>lines</snippet></ROW><ROW><id>12641718</id><snippet>[self.itemID, itemlist]</snippet></ROW><ROW><id>12641766</id><snippet>output = {el1[0]: el2 for el1, el2 in zip(list1, list2)}
</snippet></ROW><ROW><id>12641766</id><snippet>output = dict((el1[0], el2) for el1, el2 in zip(list1, list2))
</snippet></ROW><ROW><id>12642015</id><snippet>win32api</snippet></ROW><ROW><id>12642015</id><snippet>from subprocess import call

acrobat = "C:\Program Files\Adobe\Acrobat 7.0\Acrobat.exe" ## Acrobat reader would also work, apparently
file = "C:\path\to\my\file.pdf"
printer = "Printer Name Goes Here"

call([acrobat, "/T", file, printer])
</snippet></ROW><ROW><id>12642027</id><snippet>datetime.datetime.combine(datetime.date(2011, 01, 01), datetime.time(10, 23))</snippet></ROW><ROW><id>12642087</id><snippet>upload_to</snippet></ROW><ROW><id>12642087</id><snippet>Thing</snippet></ROW><ROW><id>12642087</id><snippet>save()</snippet></ROW><ROW><id>12642087</id><snippet>class Thing(models.Model):
    id = models.CharField(primary_key=True, max_length=16)
    photo = ImageField('Photo', upload_to=upload_path, null=False, blank=False)
    ...


    def save(self, *args, **kwargs):
        randid = random_id(16)
        while Thing.objects.filter(id=randid).exists():
            logger.error("[Thing] ThingID of %s already exists" % randid)
            randid = random_id(16)
        self.id = randid
        self.photo.name = ".".join([randid, self.photo.name.split(".")[-1]])   # This adds the file extension to the random id generated
        super(Thing,self).save(*args, **kwargs)
</snippet></ROW><ROW><id>12642147</id><snippet>def merge (seq, p, q, r):
    # n1: length of sub-array [p..q]
    n1 = q - p + 1
    # n2: length of sub-array [q+1 ..r]
    n2 = r - q
    # Left and Right arrays
    left_arr = seq[p:n1] #here 
    right_arr = seq[n1:r+1]  #here
    j=0
    i=0
    for k in xrange(p, r+1):
        if left_arr[i]&lt;= right_arr[j]:
            seq[k]=left_arr[i]
            i+=1
            if i &gt; n1-1: #here
                break
        else:
            seq[k]=right_arr[j] #here
            j+=1
            if j &gt; n2-1:
                break
    if i &gt;= len(left_arr): #from here down
        seq[k+1:] = right_arr[j:]
    elif j &gt;= len(right_arr):
        seq[k+1:] = left_arr[i:]

    return seq

s = [2,4,5,7,1,1,1,1]
p = 0
q = 3
r = 7
print merge(s,p,q,r)
</snippet></ROW><ROW><id>12642195</id><snippet>oauth2</snippet></ROW><ROW><id>12642195</id><snippet>force_auth_header</snippet></ROW><ROW><id>12642195</id><snippet>oauth2.Client.request</snippet></ROW><ROW><id>12642195</id><snippet>post_body</snippet></ROW><ROW><id>12642195</id><snippet>None</snippet></ROW><ROW><id>12642195</id><snippet>oauth2.Client.request</snippet></ROW><ROW><id>12642498</id><snippet>not teststr.isdigit()</snippet></ROW><ROW><id>12642623</id><snippet>youclass.get_items_list   
</snippet></ROW><ROW><id>12642623</id><snippet>yourclass.get_items_list()
</snippet></ROW><ROW><id>12642889</id><snippet>inited = False

def init(files=None):
    global inited
    db = MimeTypes()
    ...
</snippet></ROW><ROW><id>12642889</id><snippet>init</snippet></ROW><ROW><id>12642889</id><snippet>init</snippet></ROW><ROW><id>12642997</id><snippet>collections.Counter()</snippet></ROW><ROW><id>12642997</id><snippet>[Counter(site) for site in zip(*myDict.values())]
</snippet></ROW><ROW><id>12642997</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; myDict = {'abc':'AGCTAC', 'def': 'AGGTAC', 'ghi':'AGGTAG'}
&gt;&gt;&gt; result = [Counter(site) for site in zip(*myDict.values())]
&gt;&gt;&gt; result
[Counter({'A': 3}), Counter({'G': 3}), Counter({'G': 2, 'C': 1}), Counter({'T': 3}), Counter({'A': 3}), Counter({'C': 2, 'G': 1})]
&gt;&gt;&gt; result[0]  # genes at site 0
Counter({'A': 3})
&gt;&gt;&gt; result[2]  # genes at site 2
Counter({'G': 2, 'C': 1})
</snippet></ROW><ROW><id>12643001</id><snippet>count(x)</snippet></ROW><ROW><id>12643148</id><snippet>sys.path</snippet></ROW><ROW><id>12643148</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>12643315</id><snippet>#determinant of matrix a
def det(a):
    return a[0][0]*a[1][1]*a[2][2] + a[0][1]*a[1][2]*a[2][0] + a[0][2]*a[1][0]*a[2][1] - a[0][2]*a[1][1]*a[2][0] - a[0][1]*a[1][0]*a[2][2] - a[0][0]*a[1][2]*a[2][1]

#unit normal vector of plane defined by points a, b, and c
def unit_normal(a, b, c):
    x = det([[1,a[1],a[2]],
             [1,b[1],b[2]],
             [1,c[1],c[2]]])
    y = det([[a[0],1,a[2]],
             [b[0],1,b[2]],
             [c[0],1,c[2]]])
    z = det([[a[0],a[1],1],
             [b[0],b[1],1],
             [c[0],c[1],1]])
    magnitude = (x**2 + y**2 + z**2)**.5
    return (x/magnitude, y/magnitude, z/magnitude)

#dot product of vectors a and b
def dot(a, b):
    return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]

#cross product of vectors a and b
def cross(a, b):
    x = a[1] * b[2] - a[2] * b[1]
    y = a[2] * b[0] - a[0] * b[2]
    z = a[0] * b[1] - a[1] * b[0]
    return (x, y, z)

#area of polygon poly
def area(poly):
    if len(poly) &lt; 3: # not a plane - no area
        return 0

    total = [0, 0, 0]
    for i in range(len(poly)):
        vi1 = poly[i]
        if i is len(poly)-1:
            vi2 = poly[0]
        else:
            vi2 = poly[i+1]
        prod = cross(vi1, vi2)
        total[0] += prod[0]
        total[1] += prod[1]
        total[2] += prod[2]
    result = dot(total, unit_normal(poly[0], poly[1], poly[2]))
    return abs(result/2)
</snippet></ROW><ROW><id>12643315</id><snippet>&gt;&gt;&gt; poly = [[0, 0, 0], [10, 0, 0], [10, 3, 4], [0, 3, 4]]
&gt;&gt;&gt; poly_translated = [[0+5, 0+5, 0+5], [10+5, 0+5, 0+5], [10+5, 3+5, 4+5], [0+5, 3+5, 4+5]]
&gt;&gt;&gt; area(poly)
50.0
&gt;&gt;&gt; area(poly_translated)
50.0
&gt;&gt;&gt; area([[0,0,0],[1,1,1]])
0
</snippet></ROW><ROW><id>12643343</id><snippet>cache.get(key)</snippet></ROW><ROW><id>12643343</id><snippet>def home(request, filterBy = 'all', sortBy = 'popularity'):
    models = cache.get('home' + filterBy + sortBy)
    if models is None:
        models = Model.objects.with_rankings(filterBy, sortBy, request)
        cache.set('home' + filterBy + sortBy, models, 3600) # 1 hour
</snippet></ROW><ROW><id>12643709</id><snippet>def selector(seqs, picks):
  iters = [iter(x) for x in seqs]
  for choice in picks:
    yield next(iters[choice])

print list(selector((news, post), (0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0)))
</snippet></ROW><ROW><id>12643842</id><snippet>db.session.query(Vehicle).filter(str(Car.id) == Vehicle.value)
</snippet></ROW><ROW><id>12643842</id><snippet>Car.id</snippet></ROW><ROW><id>12643842</id><snippet>from sqlalchemy.sql.expression import cast

db.session.query(Vehicle).filter(cast(Car.id, sqlalchemy.String) == Vehicle.value)
</snippet></ROW><ROW><id>12644130</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse(XML_FILE)
root = tree.getroot()


for p in root.iter('p'):
   sentences = p.text.split('.')
   p.text = ".".join([("&lt;sup&gt;%i&lt;sup&gt;" % count) + sentence for count, sentence in enumerate(sentences)])

tree.write(XML_FILE)
</snippet></ROW><ROW><id>12644196</id><snippet>zope.i18n</snippet></ROW><ROW><id>12644196</id><snippet>__builtin__</snippet></ROW><ROW><id>12644196</id><snippet>_</snippet></ROW><ROW><id>12644196</id><snippet>__init__.py</snippet></ROW><ROW><id>12644196</id><snippet>from zope.i18nmessageid import MessageFactory
from AccessControl import ModuleSecurityInfo

YourDomainMessageFactory = MessageFactory('your.domain')

ModuleSecurityInfo('your.packagename').declarePublic('_')
</snippet></ROW><ROW><id>12644196</id><snippet>from your.packagename import YourDomainMessageFactory as _

message = _('Your message to be translated')
</snippet></ROW><ROW><id>12644196</id><snippet>_</snippet></ROW><ROW><id>12644196</id><snippet>&lt;configure
    xmlns:i18n="http://namespaces.zope.org/i18n"&gt;

    &lt;i18n:registerTranslations directory="locales" /&gt;

&lt;/configure&gt;
</snippet></ROW><ROW><id>12644196</id><snippet>locales</snippet></ROW><ROW><id>12644196</id><snippet>configure.zcml</snippet></ROW><ROW><id>12644196</id><snippet>zope.i18n</snippet></ROW><ROW><id>12644196</id><snippet>&lt;REGION&gt;/LC_MESSAGES/yourdomain.mo</snippet></ROW><ROW><id>12644196</id><snippet>&lt;REGION&gt;/LC_MESSAGES/yourdomain.po</snippet></ROW><ROW><id>12644196</id><snippet>.po</snippet></ROW><ROW><id>12644196</id><snippet>.mo</snippet></ROW><ROW><id>12644196</id><snippet>zope.i18n</snippet></ROW><ROW><id>12644196</id><snippet>zope.i18n.translate</snippet></ROW><ROW><id>12644196</id><snippet>from zope.i18n import translate

message = _('Your message to be translated')
print translate(message, target_language='de')
</snippet></ROW><ROW><id>12644196</id><snippet>__builtins__</snippet></ROW><ROW><id>12644196</id><snippet>RestrictedPython.Guards.safe_builtins</snippet></ROW><ROW><id>12644196</id><snippet>from RestrictedPython.Guards import safe_builtins

safe_builtins['_'] = t.gettext
</snippet></ROW><ROW><id>12644328</id><snippet>---
title: Django, Debian and Postgre Web Development (part 1)
excerpt: &gt;
     A complete walkthrough to developing a web app using double D's and some P 
...
---
...
</snippet></ROW><ROW><id>12644328</id><snippet>{{ res.meta.excerpt|markdown|typogrify }}
</snippet></ROW><ROW><id>12644328</id><snippet>refer</snippet></ROW><ROW><id>12644328</id><snippet>{% mark excerpt -%}
{% if _markings_ is defined -%}

 A complete walkthrough to developing a web app using double D's and some P

{%- endif %}
{%- endmark %}
</snippet></ROW><ROW><id>12644401</id><snippet>mylist</snippet></ROW><ROW><id>12644401</id><snippet>newlist = [(x - min_val)/(max_val - min_val) for x in mylist]
</snippet></ROW><ROW><id>12644401</id><snippet>for</snippet></ROW><ROW><id>12644401</id><snippet>newlist = []
for x in mylist: # sic!
    newlist.append((x - min_val) / (max_val - min_val))
</snippet></ROW><ROW><id>12644483</id><snippet>return get_item_info(pd)</snippet></ROW><ROW><id>12644483</id><snippet>except</snippet></ROW><ROW><id>12644483</id><snippet>breakLoop = 0
def get_item_info(linkParameters):
    nheaders = {'User-Agent' : 'Firefox/15.0.1'}
    purl = 'http://example.com/something.php'
    pd = linkParameters
    nreq = urllib.request.Request(purl, pd, nheaders)
    if breakLoop &gt;= 4:
        return 'Request timed out {} times'.format(breakLoop)
    try:
        nresponse = urllib.request.urlopen(nreq)
    except (urllib.error.URLError, urllib.error.HTTPError):
        breakLoop += 1
        return get_item_info(pd)
    else:   
        return nresponse.read()
</snippet></ROW><ROW><id>12644483</id><snippet>def get_item_info(linkParameters):
    nheaders = {'User-Agent' : 'Firefox/15.0.1'}
    purl = 'http://example.com/something.php'
    pd = linkParameters
    for i in range(5):
        nreq = urllib.request.Request(purl, pd, nheaders)
        try:
            nresponse = urllib.request.urlopen(nreq)
            return nresponse.read()
        except (urllib.error.URLError, urllib.error.HTTPError):
            pass
    return 'Request timed out 4 times'
</snippet></ROW><ROW><id>12644485</id><snippet>import unittest
import collections
import itertools

class TestCase(unittest.TestCase):
    def assertRecursiveEq(self, first, second, *args, **kwargs):
        """
        http://stackoverflow.com/a/3124155/190597 (KennyTM)
        """
        if (isinstance(first, collections.Iterable)
            and isinstance(second, collections.Iterable)):
            for first_, second_ in itertools.izip_longest(
                    first, second, fillvalue = object()):
                self.assertRecursiveEq(first_, second_, *args, **kwargs)
        else:
            # If first = np.nan and second = np.nan, I want them to
            # compare equal. np.isnan raises TypeErrors on some inputs,
            # so I use `first != first` as a proxy. I avoid dependency on numpy
            # as a bonus.
            if not (first != first and second != second):
                self.assertAlmostEqual(first, second, *args, **kwargs)                

def perm3():
    return itertools.permutations([1,2,3])

class Test(TestCase):
    def test_perm3(self):
        self.assertRecursiveEq(perm3(),
            [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)])

if __name__ == '__main__':
    import sys
    sys.argv.insert(1, '--verbose')
    unittest.main(argv = sys.argv)
</snippet></ROW><ROW><id>12645321</id><snippet>class Prop(object):
     def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        return obj._value * obj._multiplier[self]

    def __set__(self, obj, value):
        if obj is None:
            return self
        obj._value = value

class Obj(object):
    val = Prop()

    def __init__(self):
        self._value = 1
        self._multiplier = {Obj.val: 0}
</snippet></ROW><ROW><id>12645321</id><snippet>__getattribute__</snippet></ROW><ROW><id>12645321</id><snippet>class PerInstancePropertyProxy(object):
    def __init__(self, prop):
        self.prop = prop
    def __get__(self, instance, owner):
        if instance is None:
            return self
        return instance.__dict__[self.prop].__get__(instance, owner)
    def __set__(self, instance, value):
        instance.__dict__[self.prop].__set__(instance, value)
class Prop(object):
    def __init__(self, value, multiplier):
        self.value = value
        self.multiplier = multiplier
    def __get__(self, instance, owner):
        if instance is None:
            return self
        return self.value * self.multiplier
    def __set__(self, instance, value):
        self.value = value
class Obj(object):
    val = PerInstancePropertyProxy('val')
    def __init__(self):
        self.__dict__['val'] = Prop(1.0, 10.0)
    def prop(self, attr_name):
        return self.__dict__[attr_name]
</snippet></ROW><ROW><id>12645340</id><snippet>Publisher.sendMessage("someMessage",["some_argument",1])</snippet></ROW><ROW><id>12645340</id><snippet>Publisher.sendMessage("someMessage",self)
...
Publisher.subscribe(self.MyPubsubListenerForSomeMessage,"someMessage")
... 
def MyPubsubListenterForSomeMessage(self,e):
    print e.data
</snippet></ROW><ROW><id>12645548</id><snippet>any()</snippet></ROW><ROW><id>12645548</id><snippet>if any(s in some_string for s in example):
    # at least one of the elements is a substring of some_string
</snippet></ROW><ROW><id>12645565</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import scipy
&gt;&gt;&gt; math.pi == np.pi == scipy.pi
True
</snippet></ROW><ROW><id>12645565</id><snippet>pi</snippet></ROW><ROW><id>12645867</id><snippet>&gt;&gt;&gt; s = '&lt;a class="x3-large" href="_stuff--/SIG**morestuff" style="font-family: inherit;"&gt;Man learns not to give himself headaches using regex to deal with HTML&lt;/a&gt;'
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; soup.get_text()
u'Man learns not to give himself headaches using regex to deal with HTML'
</snippet></ROW><ROW><id>12645867</id><snippet>&gt;&gt;&gt; s = '&lt;a class="test" href="ignore1"&gt;First sentence&lt;/a&gt;&lt;a class="test" href="ignore1"&gt;Second sentence&lt;/a&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; soup.find_all("a")
[&lt;a class="test" href="ignore1"&gt;First sentence&lt;/a&gt;, &lt;a class="test" href="ignore1"&gt;Second sentence&lt;/a&gt;]
&gt;&gt;&gt; [a.get_text() for a in soup.find_all("a")]
[u'First sentence', u'Second sentence']
</snippet></ROW><ROW><id>12645867</id><snippet>class</snippet></ROW><ROW><id>12645867</id><snippet>&gt;&gt;&gt; s = '&lt;a class="test" href="ignore1"&gt;First sentence&lt;/a&gt;&lt;a class="x3-large" href="ignore1"&gt;Second sentence&lt;/a&gt;'
&gt;&gt;&gt; soup = BeautifulSoup(s)
&gt;&gt;&gt; soup.find_all("a", {"class": "x3-large"})
[&lt;a class="x3-large" href="ignore1"&gt;Second sentence&lt;/a&gt;]
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; q = collections.deque([1,2,3,4,5,6,7,8])
&gt;&gt;&gt; for _ in xrange(5):
...     q.rotate(-1)
... 
&gt;&gt;&gt; q
deque([6, 7, 8, 1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8]
&gt;&gt;&gt; for _ in xrange(5):
...     a = a[1:] + a[:1]
... 
&gt;&gt;&gt; a
[6, 7, 8, 1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8]
&gt;&gt;&gt; for _ in xrange(5):
...     a.append(a.pop(0))
... 
&gt;&gt;&gt; a
[6, 7, 8, 1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; timeit.timeit('a.append(a.pop(0))', setup='a = [0,1,2,3,4,5,6,7,8,9]', number=1000000)
0.24548697471618652
&gt;&gt;&gt; timeit.timeit('a.append(a.pop(0))', setup='a = [0,1,2,3,4,5,6,7,8,9]', number=100000000)
23.65538215637207
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; timeit.timeit('a=a[1:] + a[:1]', setup='a = [0,1,2,3,4,5,6,7,8,9]', number=1000000)
0.36037278175354004
&gt;&gt;&gt; timeit.timeit('a=a[1:] + a[:1]', setup='a = [0,1,2,3,4,5,6,7,8,9]', number=100000000)
35.06173801422119
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; timeit.timeit('q.rotate(-1)', setup='import collections; q = collections.deque([0,1,2,3,4,5,6,7,8])', number=1000000)
0.16829514503479004
&gt;&gt;&gt; timeit.timeit('q.rotate(-1)', setup='import collections; q = collections.deque([0,1,2,3,4,5,6,7,8])', number=100000000)
16.012277841567993
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; timeit.timeit('aa(ap(0))', setup='a = [0,1,2,3,4,5,6,7,8,9]; aa=a.append; ap=a.pop', number=1000000)
0.15255093574523926
&gt;&gt;&gt; timeit.timeit('aa(ap(0))', setup='a = [0,1,2,3,4,5,6,7,8,9]; aa=a.append; ap=a.pop', number=100000000)
14.50795292854309
</snippet></ROW><ROW><id>12645901</id><snippet>&gt;&gt;&gt; timeit.timeit('r(-1)', setup='import collections; q = collections.deque([0,1,2,3,4,5,6,7,8]); r=q.rotate', number=1000000)
0.13374090194702148
&gt;&gt;&gt; timeit.timeit('r(-1)', setup='import collections; q = collections.deque([0,1,2,3,4,5,6,7,8]); r=q.rotate', number=100000000)
11.435136079788208
</snippet></ROW><ROW><id>12646205</id><snippet>In [16]: text = 'Ex-NFL QB's sad condition'

In [17]: import HTMLParser

In [18]: parser = HTMLParser.HTMLParser()

In [19]: parser.unescape(text)
Out[19]: u"Ex-NFL QB's sad condition"
</snippet></ROW><ROW><id>12646205</id><snippet>import html.parser as htmlparser
parser = htmlparser.HTMLParser()
parser.unescape(text)
</snippet></ROW><ROW><id>12646396</id><snippet>self.parse_file()
</snippet></ROW><ROW><id>12646396</id><snippet>def parse_file(self):
</snippet></ROW><ROW><id>12646396</id><snippet>self</snippet></ROW><ROW><id>12646481</id><snippet>class Student:
    def __init__(self, name):
        self.name = name

class ClassRoom:
    def __init__(self, students):
        self.students = students

john, sam = Student('John'), Student('Sam')
patrick, michael, bill = Student('Patrick'), Student('Michael'), Student('Bill')

klass1 = ClassRoom([john, sam])
klass2 = ClassRoom([patrick, michael, bill])


def where_is(student, klasses):
    return next((x for x in klasses if student in x.students), None)

assert klass1 is where_is(john, [klass1, klass2])
assert klass2 is where_is(patrick, [klass1, klass2])

nobody = Student('foo')
assert None is where_is(nobody, [klass1, klass2])
</snippet></ROW><ROW><id>12646481</id><snippet>next</snippet></ROW><ROW><id>12646481</id><snippet>def where_is(student, klasses):
    return (x for x in klasses if student in x.students)

for klass in where_is(john, [klass1, klass2]):
    print klass
</snippet></ROW><ROW><id>12646633</id><snippet>int</snippet></ROW><ROW><id>12646633</id><snippet>for i in range(n):
    pass #whatever you like
</snippet></ROW><ROW><id>12646731</id><snippet>defaultdict</snippet></ROW><ROW><id>12646731</id><snippet>from collections import defaultdict

def make_index(data,key,value=lambda x:x):
    d=defaultdict(list)
    for item in data:
        d[key(item)].append(value(item))
    return d
</snippet></ROW><ROW><id>12646731</id><snippet>defaultdict</snippet></ROW><ROW><id>12646731</id><snippet>.setdefault()</snippet></ROW><ROW><id>12646926</id><snippet>if "hit"</snippet></ROW><ROW><id>12646926</id><snippet>"hit"</snippet></ROW><ROW><id>12646926</id><snippet>elif</snippet></ROW><ROW><id>12646926</id><snippet>choice = raw_input("Would you like to hit or stand?")
print choice
if choice == "hit":
    return hand + deck()
elif choice == "stand": 
    return hand
</snippet></ROW><ROW><id>12646943</id><snippet>auth.set_access_token(access_token, access_token_secret)
</snippet></ROW><ROW><id>12647022</id><snippet>infile = open(input,"r")
for line in infile:
    line = doSomething(line, infile.next())
</snippet></ROW><ROW><id>12647022</id><snippet>.next()</snippet></ROW><ROW><id>12647022</id><snippet>input</snippet></ROW><ROW><id>12647022</id><snippet>file</snippet></ROW><ROW><id>12647022</id><snippet>file</snippet></ROW><ROW><id>12647022</id><snippet>infile</snippet></ROW><ROW><id>12647022</id><snippet>with</snippet></ROW><ROW><id>12647022</id><snippet>with open(input,"r") as infile:
    for line in infile:
        line = doSomething(line, infile.next())
</snippet></ROW><ROW><id>12647065</id><snippet>pdb.runcall</snippet></ROW><ROW><id>12647065</id><snippet>In [1]: def foo(a, b):
   ...:     print a + b
   ...:

In [2]: import ipdb

In [3]: ipdb.runcall(foo, 1, 2)
&gt; &lt;ipython-input-1-2e565fd9c4a4&gt;(2)foo()
      1 def foo(a, b):
----&gt; 2     print a + b
      3

ipdb&gt;
</snippet></ROW><ROW><id>12647283</id><snippet>kill</snippet></ROW><ROW><id>12647283</id><snippet>kill -9</snippet></ROW><ROW><id>12647283</id><snippet>kill -15</snippet></ROW><ROW><id>12647556</id><snippet>c[a &amp; b]
</snippet></ROW><ROW><id>12647556</id><snippet>c[np.logical_and(a, b)] 
</snippet></ROW><ROW><id>12647556</id><snippet>and</snippet></ROW><ROW><id>12647556</id><snippet>True</snippet></ROW><ROW><id>12647556</id><snippet>True</snippet></ROW><ROW><id>12647556</id><snippet>False</snippet></ROW><ROW><id>12647556</id><snippet>np.logical_and</snippet></ROW><ROW><id>12647556</id><snippet>&amp;</snippet></ROW><ROW><id>12647556</id><snippet>True/False</snippet></ROW><ROW><id>12647556</id><snippet>True/False</snippet></ROW><ROW><id>12647556</id><snippet>1/0</snippet></ROW><ROW><id>12647556</id><snippet>a</snippet></ROW><ROW><id>12647556</id><snippet>b</snippet></ROW><ROW><id>12647556</id><snippet>a</snippet></ROW><ROW><id>12647556</id><snippet>b</snippet></ROW><ROW><id>12647556</id><snippet>c[np.logical_or(a,b)]
</snippet></ROW><ROW><id>12647556</id><snippet>c[a | b]
</snippet></ROW><ROW><id>12647572</id><snippet>generator = gen()
directories = []
generator_wrapper = (directories.append(foo['name']) or foo 
                         for foo in generator)
</snippet></ROW><ROW><id>12647572</id><snippet>append</snippet></ROW><ROW><id>12647572</id><snippet>None</snippet></ROW><ROW><id>12647572</id><snippet>.append(...) or foo</snippet></ROW><ROW><id>12647572</id><snippet>foo</snippet></ROW><ROW><id>12647572</id><snippet>directories</snippet></ROW><ROW><id>12647572</id><snippet>for</snippet></ROW><ROW><id>12647572</id><snippet>for foo in generator:
    yield directories.append(foo['name']) or foo
</snippet></ROW><ROW><id>12647572</id><snippet>for foo in generator:
    directories.append(foo['name'])
    yield foo
</snippet></ROW><ROW><id>12647572</id><snippet>xrange</snippet></ROW><ROW><id>12648034</id><snippet>find</snippet></ROW><ROW><id>12648034</id><snippet>find / -name virtualenvwrapper.sh</snippet></ROW><ROW><id>12648034</id><snippet>/usr/local/bin/virtualenvwrapper.sh</snippet></ROW><ROW><id>12648210</id><snippet>-Xlinker --whole-archive
</snippet></ROW><ROW><id>12648271</id><snippet>if (a == b) {
    switch (op) {
    case Py_EQ:case Py_LE:case Py_GE:
        result = Py_True;
        goto out;
// ...
</snippet></ROW><ROW><id>12648271</id><snippet>memcmp</snippet></ROW><ROW><id>12648275</id><snippet>    cond = ((df['L1'] != rscode) &amp; (df['L2'] != rscode))
    outname = inf + '_test'
    df['L3'] = df['L1'].map(lambda x: int(str(x)[2:]))        
    outdata = df.drop(df[cond].index.values).sort(columns='L3', ascending=False, axis=0)
    # export outdata using Datadrame.to_csv with the original df cols
</snippet></ROW><ROW><id>12648346</id><snippet>request = br.click(name='login')
 response = br.open(request)
 mainpage = response.read()
 if mainpage.find('&lt;the error text&gt;')==-1
        #print "Could not login"
        success = True
</snippet></ROW><ROW><id>12648391</id><snippet>pwd = None
@hosts('myhost.com')
def test():
with cd('/home/oldUser/upgrade'):
    run('ls')   #This is to connect aggressively (instead of lazily)
    global pwd  #Change the scope of pwd
    if pwd is None:
        pwd = getpass.getpass('enter password for newUser')

    execute(su, pwd, 'newUser', 'touch x')  
    run ('ls')
    execute(su, pwd, 'newUser', 'rm x') 
    run ('ls')

    def su(pwd, user, command):
    with settings(password= "%s" % pwd,
              sudo_prefix="su %s -c " % user,
              sudo_prompt="Password:"):
    sudo(command)
</snippet></ROW><ROW><id>12648602</id><snippet>passwd = getpass.getpass()
pid = os.fork()
if pid:
  print 'Parent thinks passwd is', passwd
else:
  print 'Child thinks passwd is', passwd
</snippet></ROW><ROW><id>12648662</id><snippet>def track_past_city(x,y):
    return (x[0]+y[0],x[1:]+y[1:]) #0 is how far you've gone, #[1:] is where you've been

def shortestPath(Cities,Distances):
    if len(Cities)==1: return 0, Cities[0]
    else: return min( map( lambda n: (track_past_city((Distances[Cities[0],Cities[n]],Cities[0]),shortestPath(Cities[n:],Distances))), range(1,len(Cities))) )


shortestPath(["A","B", "C", "D", "E"],d)
# (10, ('A', ('C', ('D', 'E'))))
</snippet></ROW><ROW><id>12648975</id><snippet>create</snippet></ROW><ROW><id>12648975</id><snippet>WriteBatch</snippet></ROW><ROW><id>12649013</id><snippet>import csv
with open('file.csv', 'w') as f:
    w = csv.writer(f, quoting=csv.QUOTE_ALL) 

    while (1):
        why = input("why? ")
        date = input("date: ")
        story = input("story: ")
        w.writerow([why, date, story])
</snippet></ROW><ROW><id>12649244</id><snippet>&gt;&gt;&gt; l1 = [1,2,3]
&gt;&gt;&gt; l2 = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; [i for i in itertools.chain(*itertools.izip_longest(l1,l2)) if i is not None]
[1, 'a', 2, 'b', 3, 'c', 'd', 'e', 'f', 'g']
</snippet></ROW><ROW><id>12649244</id><snippet>None</snippet></ROW><ROW><id>12649244</id><snippet>&gt;&gt;&gt; from itertools import chain, izip_longest
&gt;&gt;&gt; l1 = [1, None, 2, 3]
&gt;&gt;&gt; l2 = ['a','b','c','d','e','f','g']
&gt;&gt;&gt; sentinel = object()
&gt;&gt;&gt; [i
     for i in chain(*izip_longest(l1, l2, fillvalue=sentinel))
     if i is not sentinel]
[1, 'a', None, 'b', 2, 'c', 3, 'd', 'e', 'f', 'g']
</snippet></ROW><ROW><id>12649458</id><snippet>class glx(object):
    '''Borg pattern singleton, used to pass around refs to objs. Class
    attrs will NOT be reset on new instance calls (instance attrs will).
    '''
    x = ''
    __sharedState = {}
    def __init__(self):
        self.__dict__ = self.__sharedState
        #will be reset on new instance 
        self.y = ''  


if __name__ == '__main__':
    gl = glx()
    gl.x = ['red', 'green', 'blue']
    gl2 = glx()
    print gl2.x[0]
</snippet></ROW><ROW><id>12649546</id><snippet>db = connection['MONGODB_DB']
</snippet></ROW><ROW><id>12649546</id><snippet>db = connection[config['MONGODB_DB']]
</snippet></ROW><ROW><id>12649553</id><snippet>(?&lt;![^a-zA-Z])</snippet></ROW><ROW><id>12649553</id><snippet>[^a-zA-Z]</snippet></ROW><ROW><id>12649553</id><snippet>re.sub("(?&lt;![^a-zA-Z])0+","",number)
</snippet></ROW><ROW><id>12649953</id><snippet>class JSObject(object):
    def __init__(self, name):
        self.name = name
    def __getattr__(self, attr):
        class Proxy(object):
            def __init__(self, objname, funcname):
                self.name = '%s.%s' % (objname, funcname)
            def __call__(self, *args):
                argstr = ', '.join(json.dumps(arg) for arg in args)
                retstr = evaluateJavaScript('%s(%s)' % (self.name, argstr)
                # realistically you may want to do more to parse the return
                # value—e.g., look up/create JSONObjects as needed?
                return json.loads(retstr)
        return Proxy(self, attr)

thingIWantToCall = JSObject('thingIWantToCall')
print thingIWantToCall.methodIWantToCallOnIt('foo', [1, 2, 3])
</snippet></ROW><ROW><id>12649977</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>12649977</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>12649977</id><snippet>subprocess.check_call(args)
</snippet></ROW><ROW><id>12650207</id><snippet>PyMem_Free</snippet></ROW><ROW><id>12650207</id><snippet>path</snippet></ROW><ROW><id>12650207</id><snippet>    if (!PyArg_ParseTuple(args, "et:_isdir",
                          Py_FileSystemDefaultEncoding, &amp;path))
        return NULL;

    attributes = GetFileAttributesA(path);
    if (attributes == INVALID_FILE_ATTRIBUTES)
        Py_RETURN_FALSE;

check:
    if (attributes &amp; FILE_ATTRIBUTE_DIRECTORY)
        Py_RETURN_TRUE;
    else
        Py_RETURN_FALSE;
</snippet></ROW><ROW><id>12650207</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>12650207</id><snippet>et</snippet></ROW><ROW><id>12650207</id><snippet>es</snippet></ROW><ROW><id>12650207</id><snippet>es</snippet></ROW><ROW><id>12650207</id><snippet>PyArg_ParseTuple()</snippet></ROW><ROW><id>12650207</id><snippet>PyMem_Free()</snippet></ROW><ROW><id>12650475</id><snippet>def foo():
    result={0:2}
    for i in range(2,10):
        for p in result.keys():
            result[p]*=2
        for p in result.keys()[:]:
            if result[p] / 10 != 0:
                result[p+1] = result.get(p+1, 0) + result[p] / 10
                result[p] = result[p] % 10
</snippet></ROW><ROW><id>12650475</id><snippet>[:]</snippet></ROW><ROW><id>12650475</id><snippet>result.keys()</snippet></ROW><ROW><id>12650475</id><snippet>if p+1 in result</snippet></ROW><ROW><id>12650475</id><snippet>r_p</snippet></ROW><ROW><id>12650475</id><snippet>r_p</snippet></ROW><ROW><id>12650475</id><snippet>collection.Counter</snippet></ROW><ROW><id>12650475</id><snippet>dict</snippet></ROW><ROW><id>12650475</id><snippet>collection.defaultdict</snippet></ROW><ROW><id>12650475</id><snippet>dict</snippet></ROW><ROW><id>12650475</id><snippet>Counter</snippet></ROW><ROW><id>12650475</id><snippet>defaultdict</snippet></ROW><ROW><id>12650475</id><snippet>result[p+1] += result[p]/10</snippet></ROW><ROW><id>12650475</id><snippet>get</snippet></ROW><ROW><id>12650475</id><snippet>dict</snippet></ROW><ROW><id>12650475</id><snippet>get</snippet></ROW><ROW><id>12650475</id><snippet>defaultdict</snippet></ROW><ROW><id>12650475</id><snippet>Counter</snippet></ROW><ROW><id>12650475</id><snippet>dict</snippet></ROW><ROW><id>12650475</id><snippet>dict</snippet></ROW><ROW><id>12650475</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>12650475</id><snippet>defaultdict</snippet></ROW><ROW><id>12650475</id><snippet>Counter</snippet></ROW><ROW><id>12650475</id><snippet>OrderedDict</snippet></ROW><ROW><id>12650475</id><snippet>get</snippet></ROW><ROW><id>12650475</id><snippet>{0:5, 1:7}</snippet></ROW><ROW><id>12650475</id><snippet>{0:375, 1:525}</snippet></ROW><ROW><id>12650475</id><snippet>{0:5, 1:562}</snippet></ROW><ROW><id>12650475</id><snippet>{0:5, 1:2, 2:56}</snippet></ROW><ROW><id>12650475</id><snippet>[0, 1]</snippet></ROW><ROW><id>12650475</id><snippet>def double(d):
    result = Counter()
    for p in d:
        result[p] += d[p] % 10
        result[p+1] += d[p] / 10
    return result

digits={0:2}
for i in range(2,10):
    for p in digits:
        digits[p]*=2
    digits = double(digits)
</snippet></ROW><ROW><id>12650915</id><snippet>psycopg</snippet></ROW><ROW><id>12650915</id><snippet>SQLALchemy</snippet></ROW><ROW><id>12650915</id><snippet>gevent-psycopg2</snippet></ROW><ROW><id>12650915</id><snippet>QueuePool</snippet></ROW><ROW><id>12650915</id><snippet>threading</snippet></ROW><ROW><id>12650915</id><snippet>gevent-psycopg2</snippet></ROW><ROW><id>12650915</id><snippet>psycopg2</snippet></ROW><ROW><id>12650915</id><snippet>psycopg2</snippet></ROW><ROW><id>12650915</id><snippet>gevent</snippet></ROW><ROW><id>12651298</id><snippet>class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    pass
</snippet></ROW><ROW><id>12651298</id><snippet>#!/usr/bin/env python
import sys
import urllib2

from threading import Thread

def make_request(url):
    print urllib2.urlopen(url).read()

def main():
    port = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 8000
    for _ in range(10):
        Thread(target=make_request, args=("http://localhost:%d" % port,)).start()

main()
</snippet></ROW><ROW><id>12651298</id><snippet>import time
from BaseHTTPServer   import BaseHTTPRequestHandler, HTTPServer, test as _test
from SocketServer     import ThreadingMixIn


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    pass

class SlowHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()

        self.wfile.write("Entered GET request handler")
        time.sleep(1)
        self.wfile.write("Sending response!")

def test(HandlerClass = SlowHandler,
         ServerClass = ThreadedHTTPServer):
    _test(HandlerClass, ServerClass)


if __name__ == '__main__':
    test()
</snippet></ROW><ROW><id>12651298</id><snippet>ThreadingMixIn</snippet></ROW><ROW><id>12651702</id><snippet>class BaseType(type):
    def __init__(cls, name, bases, clsdict):
        super(BaseType, cls).__init__(name, bases, clsdict)
        setattr(cls,'_v_properties_set',
                set(cls._properties) if cls._properties else set())

class BaseElement(object):
    __metaclass__ = BaseType    
    _properties = None

class ElementFlavour1(BaseElement):
    _properties = 'a', 'b', 'c'

class ElementFlavourN(BaseElement):
    _properties = 'e', 'f', 'g'

print(ElementFlavourN._v_properties_set)
# set(['e', 'g', 'f'])
</snippet></ROW><ROW><id>12651702</id><snippet>BaseElement</snippet></ROW><ROW><id>12651912</id><snippet>sudo apt-get install redis-server
sudo apt-get install python-pip
sudo pip install redis
</snippet></ROW><ROW><id>12651912</id><snippet>&gt;&gt;&gt; from redis import Redis
&gt;&gt;&gt; r = Redis()
&gt;&gt;&gt; r.lpush('task_queue', 'task1')
1L
</snippet></ROW><ROW><id>12651912</id><snippet>&gt;&gt;&gt; r.rpop('task_queue')
'task1'
</snippet></ROW><ROW><id>12652023</id><snippet>cls</snippet></ROW><ROW><id>12652023</id><snippet>self = cls</snippet></ROW><ROW><id>12652023</id><snippet>@classmethod
def constructor1(cls,x,y):
    self=cls()                # parentheses added, to make it a call
    self.__x = x
    self.__somemethod(y)      # self is not needed as a parameter here
    return self               # return the new instance
</snippet></ROW><ROW><id>12652113</id><snippet>from celery import current_app
all_task_names = current_app.tasks.keys()
all_tasks = current_app.tasks.values()
foo_task = current_app.tasks['tasks.foo']

all_task_classes = [type(task) for task in current_app.tasks.itervalues()]
</snippet></ROW><ROW><id>12652113</id><snippet>current_app.loader.import_default_modules()
</snippet></ROW><ROW><id>12652113</id><snippet>import_default_modules</snippet></ROW><ROW><id>12652113</id><snippet>from celery.loaders import current_loader
current_loader().init_worker()
</snippet></ROW><ROW><id>12652113</id><snippet>CELERY_ANNOTATIONS = {
     '*': {
         'loglevel': logging.DEBUG,
         'logger': logging.getLogger('foo'),
     },
}
</snippet></ROW><ROW><id>12652113</id><snippet>class MyTask(Task):
    abstract = True   # means this base task won't be registered
    loglevel = logging.DEBUG
    logger = logging.getLogger('foo'),
</snippet></ROW><ROW><id>12652119</id><snippet>lxml</snippet></ROW><ROW><id>12652119</id><snippet>from lxml import etree as et

root = et.fromstring(xml)
fun = root.xpath('/Website/url[@category="fun"]')
for node in fun:
    print et.tostring(node)
</snippet></ROW><ROW><id>12652325</id><snippet>posts = Post.objects.filter(content__contains="test"
    ).extra(select={    
                    #extra selects vote status here for current user
                    "my_vote_status":"""SELECT status FROM blog_vote as vt
                                WHERE vt.user_id = %s
                                AND   vt.post_id = blog_posts.id
                             """ % (request.user.pk) #
    }, tables=['blog_vote'])
</snippet></ROW><ROW><id>12652325</id><snippet>tables</snippet></ROW><ROW><id>12652391</id><snippet>urlpatterns = patterns('',
    url(r'^create/$', views.create, name='ev_create')     # &lt;-- comma missing
    url(r'^tonight/$', views.tonight, name='ev_tonight'),   
)
</snippet></ROW><ROW><id>12652391</id><snippet>urls.py</snippet></ROW><ROW><id>12652391</id><snippet>url(...)</snippet></ROW><ROW><id>12652419</id><snippet>np.mean</snippet></ROW><ROW><id>12652419</id><snippet>.mean</snippet></ROW><ROW><id>12652419</id><snippet>axis=None</snippet></ROW><ROW><id>12652419</id><snippet>np.median</snippet></ROW><ROW><id>12652419</id><snippet>.median</snippet></ROW><ROW><id>12652419</id><snippet>axis=None</snippet></ROW><ROW><id>12652419</id><snippet>test_g.aggregate([np.median, np.median])</snippet></ROW><ROW><id>12652419</id><snippet>test_g.aggregate(np.median, axis=0)</snippet></ROW><ROW><id>12652419</id><snippet>axis=0</snippet></ROW><ROW><id>12652419</id><snippet>np.median</snippet></ROW><ROW><id>12652781</id><snippet>class MyTuple(tuple):
    def __new__(cls, x, y):
        return tuple.__new__(cls, (x, y))

x = MyTuple(2,3)
print(x)
# (2, 3)
</snippet></ROW><ROW><id>12652781</id><snippet>super</snippet></ROW><ROW><id>12652781</id><snippet>__new__</snippet></ROW><ROW><id>12652781</id><snippet>super</snippet></ROW><ROW><id>12652781</id><snippet>import collections
MyTuple = collections.namedtuple('MyTuple', 'x y')

p = MyTuple(2,3)
print(p)
# MyTuple(x=2, y=3)
print(p.x)
# 2
</snippet></ROW><ROW><id>12652966</id><snippet>import io

class AlphaPeekReader(io.BufferedReader):
    def readalpha(self, count):
        "Read one character, and peek ahead (count - 1) *extra* characters"
        val = [self.read1(1)]

        # Find first alpha character
        while not val[0].isalpha():
            if val == ['']:
                return ''  # EOF
            val = [self.read1(1)]


        require = count - len(val)
        peek = self.peek(require * 3)  # Account for a lot of garbage
        if peek == '':  # EOF
               return val[0]

        for c in peek:
            if c.isalpha():
               require -= 1
               val.append(c)
               if not require:
                   break

        # There is a chance here that there were not 'require' alpha chars in peek
        # Return anyway.
        return ''.join(val)
</snippet></ROW><ROW><id>12652966</id><snippet>with AlphaPeekReader(io.open(filename, 'rb')) as alphafile:
    alphafile.readalpha(3)
</snippet></ROW><ROW><id>12652966</id><snippet>&gt;&gt;&gt; f = io.open('/tmp/test.txt', 'rb')
&gt;&gt;&gt; alphafile = AlphaPeekReader(f)
&gt;&gt;&gt; alphafile.readalpha(3)
'abc'
&gt;&gt;&gt; alphafile.readalpha(3)
'bcc'
&gt;&gt;&gt; alphafile.readalpha(3)
'ccd'
&gt;&gt;&gt; alphafile.readalpha(10)
'cdfdenhjcd'
&gt;&gt;&gt; alphafile.readalpha(10)
'dfdenhjcde'
</snippet></ROW><ROW><id>12652966</id><snippet>readalpha()</snippet></ROW><ROW><id>12652966</id><snippet>iter()</snippet></ROW><ROW><id>12652966</id><snippet>for alpha_with_extra in iter(lambda: alphafile.readalpha(3), ''):
    # Do something with alpha_with_extra
</snippet></ROW><ROW><id>12653109</id><snippet>.o</snippet></ROW><ROW><id>12653109</id><snippet>ld -shared -o ../ffmpeg.so ffmpeg.o -L/usr/local/lib -lpython2.7 -lavutil -lavformat -lavcodec -lswresample -lportaudio -lchromaprint -lc
</snippet></ROW><ROW><id>12653109</id><snippet>avio_alloc_context</snippet></ROW><ROW><id>12653109</id><snippet>ffmpeg.o</snippet></ROW><ROW><id>12653109</id><snippet>.a</snippet></ROW><ROW><id>12653109</id><snippet>--start-group</snippet></ROW><ROW><id>12653109</id><snippet>--end-group</snippet></ROW><ROW><id>12653109</id><snippet>ld -shared -o ../ffmpeg.so -L/usr/local/lib -lpython2.7 --start-group -lavutil -lavformat -lavcodec -lswresample -lportaudio -lchromaprint ffmpeg.o --end-group -lc
</snippet></ROW><ROW><id>12653109</id><snippet>.a</snippet></ROW><ROW><id>12653109</id><snippet>.so</snippet></ROW><ROW><id>12653128</id><snippet>r_threshold = 0.6
FLANN_INDEX_KDTREE = 1  # bug: flann enums are missing
</snippet></ROW><ROW><id>12653128</id><snippet>flann_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 4)
flann = cv2.flann_Index(desc2, flann_params)
</snippet></ROW><ROW><id>12653128</id><snippet>idx2, dist = flann.knnSearch(desc1, 2, params = {}) # bug: need to provide empty dict
mask = dist[:,0] / dist[:,1] &lt; r_threshold
idx1 = np.arange(len(desc1))
pairs = np.int32( zip(idx1, idx2[:,0]) )
</snippet></ROW><ROW><id>12653128</id><snippet>return pairs[mask]
</snippet></ROW><ROW><id>12653164</id><snippet>def incrementElements(x):
    x = np.asarray(x)
    return x+1
</snippet></ROW><ROW><id>12653164</id><snippet>np.asarray(x)</snippet></ROW><ROW><id>12653164</id><snippet>np.array(x, copy=False)</snippet></ROW><ROW><id>12653164</id><snippet>ndarray</snippet></ROW><ROW><id>12653164</id><snippet>x</snippet></ROW><ROW><id>12653164</id><snippet>ndarray</snippet></ROW><ROW><id>12653164</id><snippet>ndarray</snippet></ROW><ROW><id>12653164</id><snippet>def incrementElements(x):
    x = np.array(x, copy=False, ndmin=1)
    return x
</snippet></ROW><ROW><id>12653164</id><snippet>ndmin=1</snippet></ROW><ROW><id>12653164</id><snippet>ndmin=2</snippet></ROW><ROW><id>12653164</id><snippet>np.atleast_1d</snippet></ROW><ROW><id>12653164</id><snippet>np.atleast_2d</snippet></ROW><ROW><id>12653236</id><snippet>query = '"Engines (Modular)"'
search.Index(name=_INDEX_NAME).search(query)
</snippet></ROW><ROW><id>12653236</id><snippet>query = '"{0}"'.format(query)
search.Index(name=_INDEX_NAME).search(query)
</snippet></ROW><ROW><id>12653236</id><snippet>query = '"{0}"'.format(query.replace('"', '')
search.Index(name=_INDEX_NAME).search(query)
</snippet></ROW><ROW><id>12653386</id><snippet>weakref</snippet></ROW><ROW><id>12653386</id><snippet>None</snippet></ROW><ROW><id>12653386</id><snippet>import weakref

class A:
    pass

# a new object is created, and the name "x" is set to reference the object,
# giving a reference count of 1
x = A() 

# a weak reference is created referencing the object that the name x references
# the reference count is still 1 though, because x is still the only strong
# reference
weak_reference = weakref.ref(x)

# the only strong reference to the object is deleted (x), reducing the reference
# count to 0 this means that the object is destroyed, and at this point
# "weak_reference" becomes dangling, and calls return None
del x

assert weak_reference() is None
</snippet></ROW><ROW><id>12653402</id><snippet>.index()</snippet></ROW><ROW><id>12653402</id><snippet>pos = data.index(replaceText)
data[pos:pos+1] = replaceData
</snippet></ROW><ROW><id>12653402</id><snippet>replaceText</snippet></ROW><ROW><id>12653402</id><snippet>&gt;&gt;&gt; data = ['This', 'is', 'a', 'test', 'of', 'the', 'list']
&gt;&gt;&gt; replaceText = 'test'
&gt;&gt;&gt; replaceData =['new', 'test']
&gt;&gt;&gt; pos = data.index(replaceText)
&gt;&gt;&gt; data[pos:pos+1] = replaceData
</snippet></ROW><ROW><id>12653402</id><snippet>pos</snippet></ROW><ROW><id>12653402</id><snippet>replaceData</snippet></ROW><ROW><id>12653402</id><snippet>pos = 0
while True:
    try:
        pos = data.index(replaceText, pos)
    except ValueError:
        break
    data[pos:pos+1] = replaceData
    pos += len(replaceData)
</snippet></ROW><ROW><id>12653402</id><snippet>data</snippet></ROW><ROW><id>12653402</id><snippet>for n in data[:]:
    # maniplate data
</snippet></ROW><ROW><id>12653534</id><snippet>re</snippet></ROW><ROW><id>12653534</id><snippet>from urlparse import urlsplit, parse_qs

s = '/?user=hello&amp;user=man&amp;user='
parse_qs(urlsplit(s).query, keep_blank_values=True)
{'user': ['hello', 'man', '']}
</snippet></ROW><ROW><id>12653694</id><snippet>values = ", ".join(["NULL" if x == "" else "\"%s\"" % x for x in row])
</snippet></ROW><ROW><id>12654144</id><snippet>numpy</snippet></ROW><ROW><id>12654144</id><snippet>object</snippet></ROW><ROW><id>12654144</id><snippet>t = np.array([['one','two','three'],['four','five','six']], dtype=object)
np.min(t)
# gives 'five'
np.max(t)
# gives 'two'
</snippet></ROW><ROW><id>12654144</id><snippet>np.min</snippet></ROW><ROW><id>12654144</id><snippet>np.max</snippet></ROW><ROW><id>12654144</id><snippet>numpy</snippet></ROW><ROW><id>12654144</id><snippet>numpy.argmin</snippet></ROW><ROW><id>12654144</id><snippet># Vectorize takes a Python function and converts it into a Numpy
# vector function that operates on arrays
np_len = np.vectorize(lambda x: len(x))

np_len(t)
# gives array([[3, 3, 5], [4, 4, 3]])

idx = np_len(t).argmin(0) # get the index along the 0th axis
# gives array([0, 0, 1])

result = t
for i in idx[1:]:
    result = result[i]
print result
# gives "two", the string with the smallest length
</snippet></ROW><ROW><id>12654222</id><snippet>@celery.task
def taskrunner(taskname):
    taskModule = __import__(taskname)
    taskModule.run()

CeleryTaskManager(object)
    def schedule(task):
        taskrunner.delay(task.__file__)


from mytask import run

CeleryTaskManager().schedule(run)
</snippet></ROW><ROW><id>12654275</id><snippet>peek</snippet></ROW><ROW><id>12654275</id><snippet>io.BufferedStream</snippet></ROW><ROW><id>12654275</id><snippet>peek</snippet></ROW><ROW><id>12654275</id><snippet>collections.deque</snippet></ROW><ROW><id>12654279</id><snippet>#include &lt;iostream&gt;
#include &lt;regex&gt;
#include &lt;string&gt;
int main()
{
   std::string text = "Quick brown fox";
   std::regex vowel_re("a|o|e|u|i");
   std::cout &lt;&lt; std::regex_replace(text, vowel_re, "[$&amp;]") &lt;&lt; '\n';
}
</snippet></ROW><ROW><id>12654279</id><snippet>Q[u][i]ck br[o]wn f[o]x
</snippet></ROW><ROW><id>12654491</id><snippet>cPickle</snippet></ROW><ROW><id>12654491</id><snippet>numpy.save</snippet></ROW><ROW><id>12654491</id><snippet>numpy.savetxt</snippet></ROW><ROW><id>12654491</id><snippet>array.array</snippet></ROW><ROW><id>12654793</id><snippet>&gt; [LCS(input, s) for s in ss]
['i play soccer and ',
 ' eat pizza ',
 ' and eat pizza ',
 ' eat pizza on the weekend']
</snippet></ROW><ROW><id>12654793</id><snippet>&gt; parts = [s for s in [LCS(input, s) for s in ss] if s.find(focus_word) &gt; -1]
&gt; parts
['i play soccer and ', ' and eat pizza ']
</snippet></ROW><ROW><id>12654793</id><snippet>&gt; "".join([parts[0]] + [p.replace(focus_word, "").strip() for p in parts[1:]])
'i play soccer and eat pizza'
</snippet></ROW><ROW><id>12654798</id><snippet>open()</snippet></ROW><ROW><id>12654798</id><snippet>O_CREAT</snippet></ROW><ROW><id>12654798</id><snippet>open(x, 'a').close()
</snippet></ROW><ROW><id>12654798</id><snippet>.close()</snippet></ROW><ROW><id>12654798</id><snippet>open()</snippet></ROW><ROW><id>12654798</id><snippet>touch</snippet></ROW><ROW><id>12654798</id><snippet>import os
def touch(path):
    with open(path, 'a'):
        os.utime(path, None)
</snippet></ROW><ROW><id>12654798</id><snippet>basedir = os.path.dirname(path)
if not os.path.exists(basedir):
    os.makedirs(basedir)
</snippet></ROW><ROW><id>12654947</id><snippet>__mro__</snippet></ROW><ROW><id>12654947</id><snippet>__dict__</snippet></ROW><ROW><id>12654947</id><snippet>class Auto(object):
    def __get__(self, instance, owner):
        attr_name = (k 
            for klass in owner.__mro__
            for (k, v) in klass.__dict__.iteritems() 
            if v == self).next()
        return attr_name
</snippet></ROW><ROW><id>12654947</id><snippet>&gt;&gt;&gt; h = Handler()
&gt;&gt;&gt; print h.CLIENT_ID
CLIENT_ID
&gt;&gt;&gt; s = SubHandler()
&gt;&gt;&gt; print s.CLIENT_ID
CLIENT_ID
</snippet></ROW><ROW><id>12654998</id><snippet>from datetime import datetime, timedelta
class MyModel(models.Model):
  # default to 1 day from now
  my_date = models.DateTimeField(default=datetime.now() + timedelta(days=1))
</snippet></ROW><ROW><id>12654998</id><snippet>from datetime import datetime, timedelta
class MyModel(models.Model):
  # default to 1 day from now
  my_date = models.DateTimeField(default=lambda: datetime.now() + timedelta(days=1))
</snippet></ROW><ROW><id>12655043</id><snippet>subprocess.check_output( [
  ('application'),
  ('-first-flag'),
  ('-second-flag'),
  ('-some-additional-flag'),
] )
</snippet></ROW><ROW><id>12655110</id><snippet>Graphics</snippet></ROW><ROW><id>12655110</id><snippet>myplot = list_plot(
    zip(range(20), range(20)), 
    color='red', 
    legend_label='legend item 1')

myplot2 = list_plot(
    zip(range(20), [i*2 for i in range(20)]), 
    color='blue', 
    legend_label='legend item 2')

combined = myplot + myplot2

combined.axes_labels(['testing x axis', 'testing y axis'])
combined.legend(True)

combined.show(title='Testing title', frame=True, legend_loc="lower right")
</snippet></ROW><ROW><id>12655110</id><snippet>title</snippet></ROW><ROW><id>12655110</id><snippet>show</snippet></ROW><ROW><id>12655277</id><snippet>a.T</snippet></ROW><ROW><id>12655277</id><snippet>a</snippet></ROW><ROW><id>12655277</id><snippet> a += a.T
</snippet></ROW><ROW><id>12655277</id><snippet>a.T</snippet></ROW><ROW><id>12655277</id><snippet>a</snippet></ROW><ROW><id>12655277</id><snippet>a.T</snippet></ROW><ROW><id>12655277</id><snippet>a.T</snippet></ROW><ROW><id>12655277</id><snippet>a</snippet></ROW><ROW><id>12655277</id><snippet>np.setbufsize</snippet></ROW><ROW><id>12655277</id><snippet>a = a + a.T
a += a.T.copy()
</snippet></ROW><ROW><id>12655329</id><snippet>os.walk()</snippet></ROW><ROW><id>12655329</id><snippet>start = r'C:\Users'
entries = []
for path, filenames, dirnames in os.walk(start):
    relative = os.path.relpath(path, start)
    depth = len(os.path.split(os.pathsep))
    entries.extend([('\t' * depth) + f for f in filenames])
with open("List.txt", "w") as output:
    output.write('\n'.join(entries))
</snippet></ROW><ROW><id>12655329</id><snippet>path</snippet></ROW><ROW><id>12655329</id><snippet>os.path.relpath</snippet></ROW><ROW><id>12655396</id><snippet>b</snippet></ROW><ROW><id>12655396</id><snippet>a</snippet></ROW><ROW><id>12655396</id><snippet>root</snippet></ROW><ROW><id>12655396</id><snippet>aa.insert_at(a, save = True)</snippet></ROW><ROW><id>12655396</id><snippet>a</snippet></ROW><ROW><id>12655396</id><snippet>lft</snippet></ROW><ROW><id>12655396</id><snippet>rght</snippet></ROW><ROW><id>12655396</id><snippet>a</snippet></ROW><ROW><id>12655396</id><snippet>lft</snippet></ROW><ROW><id>12655396</id><snippet>rght</snippet></ROW><ROW><id>12655526</id><snippet>out</snippet></ROW><ROW><id>12655526</id><snippet>keepdim</snippet></ROW><ROW><id>12655526</id><snippet>amax</snippet></ROW><ROW><id>12655526</id><snippet>key</snippet></ROW><ROW><id>12655526</id><snippet>def amax2(x, *args, **kwargs):
    if 'key' not in kwargs:
        return numpy.amax(x,*args,**kwargs)
    else:
        key = kwargs.pop('key') # e.g. len, pop so no TypeError: unexpected keyword
        x_key = numpy.vectorize(key)(x) # apply key to x element-wise
        axis = kwargs.get('axis') # either None or axis is set in kwargs
        if len(args)&gt;=2: # axis is set in args
            axis = args[1]

        # The following is kept verbose, but could be made more efficient/shorter    
        if axis is None: # max of flattened
            max_flat_index = numpy.argmax(x_key, axis=axis)
            max_tuple_index = numpy.unravel_index(max_flat_index, x.shape)
            return x[max_tuple_index]
        elif axis == 0: # max in each column
            max_indices = numpy.argmax(x_key, axis=axis)
            return numpy.array(
                 [ x[max_i, i] # reorder for col
                     for i, max_i in enumerate(max_indices) ], 
                 dtype=x.dtype)
        elif axis == 1: # max in each row
            max_indices = numpy.argmax(x_key, axis=axis)
            return numpy.array(
                 [ x[i, max_i]
                     for i, max_i in enumerate(max_indices) ],
                 dtype=x.dtype)
</snippet></ROW><ROW><id>12655548</id><snippet>import csv
import collections
import itertools

grid = collections.Counter()

with open("connect.csv", "r", newline="") as fp:
    reader = csv.reader(fp)
    for line in reader:
        # clean empty names
        line = [name.strip() for name in line if name.strip()]
        # count single works
        if len(line) == 1:
            grid[line[0], line[0]] += 1
        # do pairwise counts
        for pair in itertools.combinations(line, 2):
            grid[pair] += 1
            grid[pair[::-1]] += 1

actors = sorted(set(pair[0] for pair in grid))

with open("connection_grid.csv", "w", newline="") as fp:
    writer = csv.writer(fp)
    writer.writerow([''] + actors)
    for actor in actors:
        line = [actor,] + [grid[actor, other] for other in actors]
        writer.writerow(line)
</snippet></ROW><ROW><id>12655548</id><snippet>csv</snippet></ROW><ROW><id>12655548</id><snippet>collections</snippet></ROW><ROW><id>12655548</id><snippet>Counter</snippet></ROW><ROW><id>12655548</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>12655548</id><snippet>Counter</snippet></ROW><ROW><id>12655548</id><snippet>itertools</snippet></ROW><ROW><id>12655548</id><snippet>combinations</snippet></ROW><ROW><id>12655548</id><snippet>,A,B,C,D,E,F,X
A,1,2,1,1,0,0,1
B,2,1,3,1,2,1,0
C,1,3,0,1,2,2,1
D,1,1,1,0,0,3,1
E,0,2,2,0,0,0,0
F,0,1,2,3,0,1,1
X,1,0,1,1,0,1,0
</snippet></ROW><ROW><id>12655548</id><snippet>itertools.product</snippet></ROW><ROW><id>12655587</id><snippet>setAutoFillBackground(True)</snippet></ROW><ROW><id>12655587</id><snippet>QWidget</snippet></ROW><ROW><id>12655587</id><snippet>setAutoFillBackground</snippet></ROW><ROW><id>12655587</id><snippet>p = w.palette()
p.setColor(w.backgroundRole(), Qt.red)
w.setPalette(p)
</snippet></ROW><ROW><id>12655630</id><snippet>FROM = "Foo &lt;contact@foo.com&gt;"
</snippet></ROW><ROW><id>12655679</id><snippet> {% for item in data if item.status %}
   {{ item.value }}
 {% else %}
   no true items
 {% endfor %}
</snippet></ROW><ROW><id>12655815</id><snippet>raw_input()
</snippet></ROW><ROW><id>12655833</id><snippet>average = (scores[0] + scores[1] + scores[2]) / 3
</snippet></ROW><ROW><id>12655833</id><snippet>scores[2]</snippet></ROW><ROW><id>12655833</id><snippet>3</snippet></ROW><ROW><id>12655859</id><snippet>Content-type</snippet></ROW><ROW><id>12656063</id><snippet>{% for url in listOfUrls %}        
    &lt;script language="JavaScript"&gt;
        document.write( "&lt;a href=\"" + {{ url|tojson|safe }} + "\"&gt;linktext&lt;/a&gt;" );
    &lt;/script&gt;
{% endfor %}
</snippet></ROW><ROW><id>12656063</id><snippet>{{ url }}</snippet></ROW><ROW><id>12656063</id><snippet>url</snippet></ROW><ROW><id>12656063</id><snippet>for url in blabla</snippet></ROW><ROW><id>12656063</id><snippet>undefined</snippet></ROW><ROW><id>12656063</id><snippet>tojson|safe</snippet></ROW><ROW><id>12656063</id><snippet>&lt;a href=\"{{ url }}\"&gt;linktext&lt;/a&gt;</snippet></ROW><ROW><id>12656063</id><snippet>"</snippet></ROW><ROW><id>12656063</id><snippet>tojson</snippet></ROW><ROW><id>12656063</id><snippet>safe</snippet></ROW><ROW><id>12656103</id><snippet>months</snippet></ROW><ROW><id>12656103</id><snippet>[Jan|Feb|Mar|...]</snippet></ROW><ROW><id>12656103</id><snippet>J</snippet></ROW><ROW><id>12656103</id><snippet>a</snippet></ROW><ROW><id>12656103</id><snippet>n</snippet></ROW><ROW><id>12656103</id><snippet>|</snippet></ROW><ROW><id>12656103</id><snippet>F</snippet></ROW><ROW><id>12656103</id><snippet>months='(?:'+'|'.join(calendar.month_abbr[1:])+'|'+'|'.join(calendar.month_name[1:])+')'
</snippet></ROW><ROW><id>12656103</id><snippet>?:</snippet></ROW><ROW><id>12656103</id><snippet>findall</snippet></ROW><ROW><id>12656103</id><snippet>[1|2]</snippet></ROW><ROW><id>12656103</id><snippet>(?:1|2)</snippet></ROW><ROW><id>12656103</id><snippet>[12]</snippet></ROW><ROW><id>12656127</id><snippet>mod_wsgi</snippet></ROW><ROW><id>12656246</id><snippet>hand2 = hand + deck()</snippet></ROW><ROW><id>12656246</id><snippet>if</snippet></ROW><ROW><id>12656246</id><snippet>hand</snippet></ROW><ROW><id>12656246</id><snippet>hand = hand + deck()
</snippet></ROW><ROW><id>12656305</id><snippet>mechanize</snippet></ROW><ROW><id>12656305</id><snippet>mechanize</snippet></ROW><ROW><id>12656305</id><snippet>mechanize</snippet></ROW><ROW><id>12656576</id><snippet>dealer</snippet></ROW><ROW><id>12656576</id><snippet>player</snippet></ROW><ROW><id>12656576</id><snippet>while money &gt; 0:
  opp = dealer()
  me = player()
  if me &gt; opp:
    money = money * 1.5
    print "Winner, winner, chicken dinner! You have $%d!" % money
  elif opp &gt; me:
    money = money * 0.75
    print "Dealer wins with %d. You have $%d reamaining." % (opp, money)
  elif me == 21:
    money = money * 1.5
    print "Blackjack! You have $%d!" % money
</snippet></ROW><ROW><id>12656632</id><snippet>allow</snippet></ROW><ROW><id>12656632</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>12656632</id><snippet>tuples</snippet></ROW><ROW><id>12656632</id><snippet>rules = (
    Rule(SgmlLinkExtractor( allow = (r'.*',),
                            restrict_xpaths = ('//*[@class="course_detail"]//td[4]/a/@href',)
                           ),              
         callback='parse_item'
         ),
)
</snippet></ROW><ROW><id>12656665</id><snippet>:</snippet></ROW><ROW><id>12656665</id><snippet>if max(abs(t))&lt; 1e-4</snippet></ROW><ROW><id>12656750</id><snippet>upload_part_from_file</snippet></ROW><ROW><id>12656750</id><snippet>policy</snippet></ROW><ROW><id>12656750</id><snippet>initiate_multipart_upload</snippet></ROW><ROW><id>12656788</id><snippet>add_to_builtins</snippet></ROW><ROW><id>12656788</id><snippet>publicmarkup/urls.py</snippet></ROW><ROW><id>12656788</id><snippet>add_to_builtins('mediasync.templatetags.media')
</snippet></ROW><ROW><id>12657237</id><snippet>datafield</snippet></ROW><ROW><id>12657237</id><snippet>&gt;&gt;&gt; for df in doc.xpath('//datafield'):
        ## Iterate over attributes of datafield
        for attrib in df.attrib:
                print '@' + attrib + '=' + df.attrib[attrib]

        ## subfield is a child of datafield, and iterate
        subfields = df.getchildren()
        for subfield in subfields:
                print 'subfield=' + subfield.text
</snippet></ROW><ROW><id>12657459</id><snippet>b</snippet></ROW><ROW><id>12657642</id><snippet>&gt;&gt;&gt; def foo():
...     return foo()
... 

&gt;&gt;&gt; foo()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  .......
  File "&lt;stdin&gt;", line 2, in foo
RuntimeError: maximum recursion depth exceeded
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>12657642</id><snippet>MemoryError</snippet></ROW><ROW><id>12657694</id><snippet>#-------------------------------------------------------------------------------
# Name:         treeYield.py
# Purpose:      traverse a complex datastructure and yield elements
#               that fit a given criteria
#
# Authors:      Michael Scott Cuthbert
#
# Copyright:    Copyright © 2012 Michael Scott Cuthbert
# License:      CC-BY
#-------------------------------------------------------------------------------
import types

class TreeYielder(object):
    def __init__(self, yieldValue = None):
        '''
        `yieldValue` should be a lambda function that
        returns True/False or a function/method call that
        will be passed the value of a current attribute
        '''        
        self.currentStack = []
        self.yieldValue = yieldValue
        self.stackVals = []
        t = types
        self.nonIterables = [t.IntType, t.StringType, t.UnicodeType, t.LongType,
                             t.FloatType, t.NoneType, t.BooleanType]

    def run(self, obj, memo = None):
        '''
        traverse all attributes of an object looking
        for subObjects that meet a certain criteria.
        yield them.

        `memo` is a dictionary to keep track of objects
        that have already been seen

        The original object is added to the memo and
        also checked for yieldValue
        '''
        if memo is None:
            memo = {}
        self.memo = memo
        if id(obj) in self.memo:
            self.memo[id(obj)] += 1
            return
        else:
            self.memo[id(obj)] = 1

        if self.yieldValue(obj) is True:
            yield obj


        ### now check for sub values...
        self.currentStack.append(obj)

        tObj = type(obj)
        if tObj in self.nonIterables:
            pass
        elif tObj == types.DictType:
            for keyX in obj:
                dictTuple = ('dict', keyX)
                self.stackVals.append(dictTuple)
                x = obj[keyX]
                for z in self.run(x, memo=memo):
                    yield z
                self.stackVals.pop()

        elif tObj in [types.ListType, types.TupleType]:
            for i,x in enumerate(obj):
                listTuple = ('listLike', i)
                self.stackVals.append(listTuple)
                for z in self.run(x, memo=memo):
                    yield z
                self.stackVals.pop()

        else: # objects or uncaught types...
            ### from http://bugs.python.org/file18699/static.py
            try:
                instance_dict = object.__getattribute__(obj, "__dict__")
            except AttributeError:
                ## probably uncaught static object
                return

            for x in instance_dict:
                try:
                    gotValue = object.__getattribute__(obj, x)
                except: # ?? property that relies on something else being set.
                    continue
                objTuple = ('getattr', x)
                self.stackVals.append(objTuple)
                try:
                    for z in self.run(gotValue, memo=memo):
                        yield z
                except RuntimeError:
                    raise Exception("Maximum recursion on:\n%s" % self.currentLevel())
                self.stackVals.pop()                

        self.currentStack.pop()

    def currentLevel(self):
        currentStr = ""
        for stackType, stackValue in self.stackVals:
            if stackType == 'dict':
                if isinstance(stackValue, str):
                    currentStr += "['" + stackValue + "']"
                elif isinstance(stackValue, unicode):
                    currentStr += "[u'" + stackValue + "']"
                else: # numeric key...
                    currentStr += "[" + str(stackValue) + "]"
            elif stackType == 'listLike':
                currentStr += "[" + str(stackValue) + "]"
            elif stackType == 'getattr':
                currentStr += ".__getattribute__('" + stackValue + "')"
            else:
                raise Exception("Cannot get attribute of type %s" % stackType)
        return currentStr
</snippet></ROW><ROW><id>12657694</id><snippet>class Mock(object):
    def __init__(self, mockThing, embedMock = True):
        self.abby = 30
        self.mocker = mockThing
        self.mockList = [mockThing, mockThing, 40]
        self.embeddedMock = None
        if embedMock is True:
            self.embeddedMock = Mock(mockThing, embedMock = False)

mockType = lambda x: x.__class__.__name__ == 'Mock'

subList = [100, 60, -2]
myList = [5, 20, [5, 12, 17], 30, {'hello': 10, 'goodbye': 22, 'mock': Mock(subList)}, -20, Mock(subList)]
myList.append(myList)

ty = TreeYielder(mockType)
for val in ty.run(myList):
    print(val, ty.currentLevel())
</snippet></ROW><ROW><id>12657694</id><snippet>(&lt;__main__.Mock object at 0x01DEBD10&gt;, "[4]['mock']")
(&lt;__main__.Mock object at 0x01DEF370&gt;, "[4]['mock'].__getattribute__('embeddedMock')")
(&lt;__main__.Mock object at 0x01DEF390&gt;, '[6]')
(&lt;__main__.Mock object at 0x01DEF3B0&gt;, "[6].__getattribute__('embeddedMock')")
</snippet></ROW><ROW><id>12657694</id><snippet>high = lambda x: isinstance(x, (int, float)) and x &gt; 10
ty = TreeYielder(high)
for val in ty.run(myList):
    print(val, ty.currentLevel())
</snippet></ROW><ROW><id>12657694</id><snippet>(20, '[1]')
(12, '[2][1]')
(17, '[2][2]')
(30, '[3]')
(22, "[4]['goodbye']")
(100, "[4]['mock'].__getattribute__('embeddedMock').__getattribute__('mocker')[0]")
(60, "[4]['mock'].__getattribute__('embeddedMock').__getattribute__('mocker')[1]")
(40, "[4]['mock'].__getattribute__('embeddedMock').__getattribute__('mockList')[2]")
</snippet></ROW><ROW><id>12657841</id><snippet>vars</snippet></ROW><ROW><id>12657841</id><snippet>vars()['lot%d' % someInt]
</snippet></ROW><ROW><id>12657841</id><snippet>globals</snippet></ROW><ROW><id>12657841</id><snippet>locals</snippet></ROW><ROW><id>12658205</id><snippet>hash -r  # will erase the currently used hash table
</snippet></ROW><ROW><id>12658205</id><snippet>Python 2.7.3 (default, Apr 19 2012, 00:55:09) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import random
&gt;&gt;&gt; import os; os
&lt;module 'os' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'&gt;
</snippet></ROW><ROW><id>12658222</id><snippet>print(random.randint(1,100000))</snippet></ROW><ROW><id>12658222</id><snippet>return random.randint(1,100000)</snippet></ROW><ROW><id>12658298</id><snippet>csv</snippet></ROW><ROW><id>12658298</id><snippet>csv</snippet></ROW><ROW><id>12658298</id><snippet>ItemID, ItemName
2, Apple
4, Orange
5, Pear
6, Banana
15, Kiwi
</snippet></ROW><ROW><id>12658298</id><snippet>import csv

with open("itemids.csv","rb") as fp:
    reader = csv.reader(fp, skipinitialspace=True)
    fp.readline() # skip header
    name_to_id = {name: int(id) for id, name in reader}

def getIDs(name_to_id, names):
    return [name_to_id[name] for name in names]
</snippet></ROW><ROW><id>12658298</id><snippet>&gt;&gt;&gt; name_to_id
{'Orange': 4, 'Kiwi': 15, 'Pear': 5, 'Apple': 2, 'Banana': 6}
&gt;&gt;&gt; getIDs(name_to_id, ["Apple", "Pear", "Banana"])
[2, 5, 6]
</snippet></ROW><ROW><id>12658354</id><snippet>daQuery="create table " + daTableName + " (" + DaHeadersString + ")"
</snippet></ROW><ROW><id>12658517</id><snippet>&gt;&gt;&gt; sorted(dir, key=lambda x: int(x[1:]))
['A1', 'A2', 'A3', 'A10']
</snippet></ROW><ROW><id>12658517</id><snippet>dir</snippet></ROW><ROW><id>12658517</id><snippet>dir</snippet></ROW><ROW><id>12658517</id><snippet>dir</snippet></ROW><ROW><id>12658517</id><snippet>&gt;&gt;&gt; dir.append('B12')
&gt;&gt;&gt; sorted(dir, key=lambda x: (x[0],int(x[1:])))
['A1', 'A2', 'A3', 'A10', 'B12']
</snippet></ROW><ROW><id>12658698</id><snippet>import sys

def myMethod():
    i = 0
    while (i&lt;1000000):
        i = i+1
        output_str = str(i) + "\n"
        sys.stdout.write(output_str)  # same as print
        sys.stdout.flush()
</snippet></ROW><ROW><id>12658729</id><snippet>In [44]: df
Out[44]: 
          A         B
0  0.642010  0.116227
1  0.848426  0.710739
2  0.563803  0.416422

In [45]: cond = (df.A &gt; .6) &amp; (df.B &gt; .3)

In [46]: df[cond]
Out[46]: 
          A         B
1  0.848426  0.710739

In [47]: df[~cond]
Out[47]: 
          A         B
0  0.642010  0.116227
2  0.563803  0.416422
</snippet></ROW><ROW><id>12658797</id><snippet>rowsInserted</snippet></ROW><ROW><id>12658797</id><snippet>scrollToBottom</snippet></ROW><ROW><id>12658797</id><snippet>rowsInserted</snippet></ROW><ROW><id>12658797</id><snippet>scrollToBottom</snippet></ROW><ROW><id>12658797</id><snippet>QTimer.singleShot</snippet></ROW><ROW><id>12658797</id><snippet>QTimer</snippet></ROW><ROW><id>12658797</id><snippet>self.model</snippet></ROW><ROW><id>12658797</id><snippet>self.view</snippet></ROW><ROW><id>12658797</id><snippet>self.model.rowsInserted.connect(self.autoScroll)
</snippet></ROW><ROW><id>12658797</id><snippet>autoScroll</snippet></ROW><ROW><id>12658797</id><snippet>def autoScroll(self):
    QtCore.QTimer.singleShot(0, self.view.scrollToBottom)
</snippet></ROW><ROW><id>12658797</id><snippet>self.model.rowsInserted.connect(lambda: QtCore.QTimer.singleShot(0, self.view.scrollToBottom))
</snippet></ROW><ROW><id>12658814</id><snippet>def Draw():
    frog.Draw()
    os.system('cls')
</snippet></ROW><ROW><id>12658814</id><snippet>def Draw():
    os.system('cls')
    frog.Draw()
</snippet></ROW><ROW><id>12658921</id><snippet>int()
dict()
list()
float()
str()
complex()
tuple()
</snippet></ROW><ROW><id>12658921</id><snippet>function</snippet></ROW><ROW><id>12658921</id><snippet>type</snippet></ROW><ROW><id>12658921</id><snippet>types.NoneType()</snippet></ROW><ROW><id>12658921</id><snippet>function</snippet></ROW><ROW><id>12658921</id><snippet>compile</snippet></ROW><ROW><id>12658921</id><snippet>globals</snippet></ROW><ROW><id>12658921</id><snippet>type</snippet></ROW><ROW><id>12658921</id><snippet>type(foo)</snippet></ROW><ROW><id>12658921</id><snippet>type(name, bases, dict)</snippet></ROW><ROW><id>12658921</id><snippet>object</snippet></ROW><ROW><id>12658921</id><snippet>x = object()</snippet></ROW><ROW><id>12658921</id><snippet>__new__</snippet></ROW><ROW><id>12658921</id><snippet>someType()</snippet></ROW><ROW><id>12658921</id><snippet>__new__</snippet></ROW><ROW><id>12658921</id><snippet>type(x).__new__</snippet></ROW><ROW><id>12658921</id><snippet>&gt;&gt;&gt; class Foo(object):
...     pass
&gt;&gt;&gt; x = Foo();           print type(x).__new__(x.__class__)
&lt;__main__.Foo object at 0x00EB0370&gt;
&gt;&gt;&gt; class Foo(object):
...     def __init__(self, someArg):
...         pass
&gt;&gt;&gt; class Foo(object):
...     def __new__(cls, someArg):
...         return super(Foo, cls).__new__(cls)
&gt;&gt;&gt; x = Foo(2);           print type(x).__new__(x.__class__)
Traceback (most recent call last):
  File "&lt;pyshell#32&gt;", line 1, in &lt;module&gt;
    x = Foo(2);           print type(x).__new__(x.__class__)
TypeError: __new__() takes exactly 2 arguments (1 given)
</snippet></ROW><ROW><id>12658921</id><snippet>__new__</snippet></ROW><ROW><id>12658921</id><snippet>None</snippet></ROW><ROW><id>12658921</id><snippet>None</snippet></ROW><ROW><id>12659120</id><snippet>pytz</snippet></ROW><ROW><id>12659120</id><snippet>from pytz import timezone
zone_tz = timezone(zone)
zone_aware_dt = zone_tz.localize(dt)
local_tz = timezone("America/Los_Angeles")
local_dt = local_tz.normalize(zone_aware_dt)
</snippet></ROW><ROW><id>12659190</id><snippet>average = float(sum(pos_coordinates))/len(pos_coordinates)
</snippet></ROW><ROW><id>12659190</id><snippet>subset = pos_coordinates[3:9]
average = float(sum(subset))/len(subset)
</snippet></ROW><ROW><id>12659190</id><snippet>float</snippet></ROW><ROW><id>12659571</id><snippet>A -&gt; e+ | '(' A 'U' A ')'
e -&gt; '0' | '1'
</snippet></ROW><ROW><id>12659571</id><snippet>class MySyntaxError(Exception):
  def __init__(self, text, index):
    self.text = text 
    self.index = index
  def __str__(self):
    return "Syntax error at index " + repr(self.index) + ": " + self.text


def parse(input):
  global index
  index = 0

  def eat_char(set):
    global index
    if index &lt; len(input) and input[index] in set:
      index += 1
    else:
      raise MySyntaxError("expected char in " + repr(set), index)

  def e():
    eat_char(['0', '1'])

  def A():
    global index
    if index == len(input): # Successfully parsed
      return
    elif input[index] in ['0', '1']:
      while (input[index] in ['0', '1']):
        e()
    elif input[index] is '(':
      eat_char(['('])
      A()
      eat_char(['U'])
      A()
      eat_char([')'])
    else:
      raise MySyntaxError("expected char '0', '1' or '('", index)

  A()
  if index != len(input): # Parsing didn't reach the end of the string
    raise MySyntaxError("parsing ended before the end of the input", index)


def test(string):
  try:
    parse(string)
    print "The string " + string + " have been successfully parsed"
  except MySyntaxError as e:
    print "The string " + string + " can't be parsed:"
    print e

test("(01U(1U0))")
test("(01U(1U0)") # Missing parenthesis, syntax error
test("(01U(1U0)))") # Too many parenthesis, syntax error
test("01U(1U0)") # No parenthesis, syntax error
</snippet></ROW><ROW><id>12659571</id><snippet>from state [1]
  read a '0' or a '1' and loop into state [1]
  read a '(', push the parenthesis and loop into state [1]
  read a 'U', when there is an open parenthesis on the top of stack, push the 'U' and loop into state [1]
  read a ')', when there is a 'U' on the top of the stack, pop the 'U', pop the opend parenthesis following, and loop into state[1]
</snippet></ROW><ROW><id>12659571</id><snippet>def parse(input):
  index = 0
  stack = [];

  def top():
    if len(stack) &gt; 0:
      return stack[len(stack)-1]
    else:
      return None

  while index &lt; len(input):
    if input[index] in ['0', '1']:
      pass
    elif input[index] is '(':
      stack.append('(')
    elif input[index] is 'U' and top() == '(':
      stack.append('U')
    elif input[index] is ')' and top() == 'U':
      stack.pop()
      stack.pop()
    else:
      raise MySyntaxError("Unexpected char '" + input[index] + "'", index)
    index += 1

  if len(stack):
    raise MySyntaxError("unterminated input", index)
</snippet></ROW><ROW><id>12659825</id><snippet>for</snippet></ROW><ROW><id>12659825</id><snippet>for []</snippet></ROW><ROW><id>12659825</id><snippet>token_list</snippet></ROW><ROW><id>12659825</id><snippet>(a, b, c) = range(3)
del a, b, c
</snippet></ROW><ROW><id>12659825</id><snippet>for</snippet></ROW><ROW><id>12659825</id><snippet>nested = [[1,2,3], [4,5,6]]
for a, b, c in nested:
    print nested
</snippet></ROW><ROW><id>12659825</id><snippet>target_list</snippet></ROW><ROW><id>12659825</id><snippet>[a, b] = (1, 2)
</snippet></ROW><ROW><id>12659825</id><snippet>[] = []
</snippet></ROW><ROW><id>12659825</id><snippet>nested_empty = [[], [], []]
for [] in nested_empty:
    pass
</snippet></ROW><ROW><id>12659825</id><snippet>[][:] = [1, 2, 3]
</snippet></ROW><ROW><id>12659825</id><snippet>for [][:] in [range(i) for i in range(10)]: print 0
</snippet></ROW><ROW><id>12659846</id><snippet>OleSetClipboard()</snippet></ROW><ROW><id>12659846</id><snippet>IDataObject</snippet></ROW><ROW><id>12659846</id><snippet>CF_FILES</snippet></ROW><ROW><id>12659846</id><snippet>CFSTR_FILECONTENTS</snippet></ROW><ROW><id>12659846</id><snippet>CFSTR_SHELLIDLIST</snippet></ROW><ROW><id>12659957</id><snippet>Python 3.2.3 (default, Apr 13 2012, 13:31:19) 
[GCC 4.2.1 Compatible Apple Clang 3.0 (tags/Apple/clang-211.12)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('https://www.google.com/')
</snippet></ROW><ROW><id>12659957</id><snippet>requests</snippet></ROW><ROW><id>12659957</id><snippet>requests</snippet></ROW><ROW><id>12660136</id><snippet>print '-- %r' % hashesFile[h]
print '-&gt; %r' % hashlib.md5(wordsFile[j]).hexdigest())  
</snippet></ROW><ROW><id>12660136</id><snippet>if (hashesFile[h].strip() == hashlib.md5(wordsFile[j]).hexdigest()):
    print ('ok')
</snippet></ROW><ROW><id>12660248</id><snippet>params = {'title': 'My entry 1', 'content': 'My content 1',
          'tags': 'zinnia, test', 'slug': 'my-entry-1',
          'status': PUBLISHED}
self.entry_1 = Entry.objects.create(**params)
self.entry_1.authors.add(self.authors[0])
self.entry_1.categories.add(*self.categories)
self.entry_1.sites.add(*self.sites)
</snippet></ROW><ROW><id>12660248</id><snippet>Entry.objects.create(**params)</snippet></ROW><ROW><id>12660248</id><snippet>class EntryAbstractClass(models.Model):
    """Base Model design for publishing entries"""
    STATUS_CHOICES = ((DRAFT, _('draft')),
                      (HIDDEN, _('hidden')),
                      (PUBLISHED, _('published')))

    title = models.CharField(_('title'), max_length=255)

    image = models.ImageField(_('image'), upload_to=UPLOAD_TO,
                              blank=True, help_text=_('used for illustration'))
    content = models.TextField(_('content'))
    excerpt = models.TextField(_('excerpt'), blank=True,
                                help_text=_('optional element'))

    tags = TagField(_('tags'))
    categories = models.ManyToManyField(Category, verbose_name=_('categories'),
                                        related_name='entries',
                                        blank=True, null=True)
    related = models.ManyToManyField('self', verbose_name=_('related entries'),
                                     blank=True, null=True)

    slug = models.SlugField(help_text=_('used for publication'),
                            unique_for_date='creation_date',
                            max_length=255)

    authors = models.ManyToManyField(User, verbose_name=_('authors'),
                                     related_name='entries',
                                     blank=True, null=False)
</snippet></ROW><ROW><id>12660248</id><snippet>self.entry_1.authors.add(self.authors[0]</snippet></ROW><ROW><id>12660248</id><snippet>self.athors[0]</snippet></ROW><ROW><id>12660248</id><snippet>self.entry_1</snippet></ROW><ROW><id>12660248</id><snippet>ManyToManyField</snippet></ROW><ROW><id>12660248</id><snippet>form.html</snippet></ROW><ROW><id>12660248</id><snippet>'django.contrib.admin',</snippet></ROW><ROW><id>12660248</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>12660248</id><snippet>settings.py</snippet></ROW><ROW><id>12660248</id><snippet>urls.py</snippet></ROW><ROW><id>12660248</id><snippet>example.com/admin/</snippet></ROW><ROW><id>12660248</id><snippet>views.py</snippet></ROW><ROW><id>12660248</id><snippet>#views.py
from . import forms as entryform
from zinnia.models.entry import Entry

def add_entry(request):
    form = entryform.EntryForm(request.POST or None)
    if not (request.method == 'POST' and form.is_valid()):
        return render_to_response("forms.html", {'form': form})
    title = request.POST['title']
    content = request.POST['content']
    #...many more..
    Entry.objects.create(title=title, content=content)
    return render_to_response('success.html', {'form': form,})
</snippet></ROW><ROW><id>12660248</id><snippet>forms.py</snippet></ROW><ROW><id>12660248</id><snippet>forms.html</snippet></ROW><ROW><id>12660248</id><snippet>add_entry</snippet></ROW><ROW><id>12660335</id><snippet>for klass in [FacebookProfile, FacebookUser, FacebookLike, FacebookInvite]:
    try:
        for fb in klass.objects.filter(user_id=user.id):
            fb.delete()
    except klass.DoesNotExist:
        pass
</snippet></ROW><ROW><id>12660594</id><snippet>debug=</snippet></ROW><ROW><id>12660594</id><snippet>debug=True</snippet></ROW><ROW><id>12660594</id><snippet>run(host='localhost', port=8049, debug=True)
</snippet></ROW><ROW><id>12660594</id><snippet>run(host='localhost', port=8049)
</snippet></ROW><ROW><id>12660767</id><snippet>debug=False</snippet></ROW><ROW><id>12660767</id><snippet>run()</snippet></ROW><ROW><id>12660767</id><snippet>debug()</snippet></ROW><ROW><id>12660767</id><snippet>if __name__ == "__main__":
    # Interactive mode
    run(host='localhost', port=8049)
    debug(True)
</snippet></ROW><ROW><id>12660767</id><snippet>--debug</snippet></ROW><ROW><id>12660767</id><snippet>debug</snippet></ROW><ROW><id>12660767</id><snippet>bottle</snippet></ROW><ROW><id>12660938</id><snippet>1 in [] in 'a'</snippet></ROW><ROW><id>12660938</id><snippet>(1 in []) and ([] in 'a')</snippet></ROW><ROW><id>12660938</id><snippet>1 in []</snippet></ROW><ROW><id>12660938</id><snippet>False</snippet></ROW><ROW><id>12660938</id><snippet>False</snippet></ROW><ROW><id>12660938</id><snippet>([] in 'a')</snippet></ROW><ROW><id>12660938</id><snippet>In [121]: def func():
   .....:     return 1 in [] in 'a'
   .....: 

In [122]: dis.dis(func)
  2           0 LOAD_CONST               1 (1)
              3 BUILD_LIST               0
              6 DUP_TOP             
              7 ROT_THREE           
              8 COMPARE_OP               6 (in)
             11 JUMP_IF_FALSE            8 (to 22)  #if first comparison is wrong 
                                                    #then jump to 22, 
             14 POP_TOP             
             15 LOAD_CONST               2 ('a')
             18 COMPARE_OP               6 (in)     #this is never executed, so no Error
             21 RETURN_VALUE         
        &gt;&gt;   22 ROT_TWO             
             23 POP_TOP             
             24 RETURN_VALUE        

In [150]: def func1():
   .....:     return (1 in  []) in 'a'
   .....: 

In [151]: dis.dis(func1)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               3 (())
              6 COMPARE_OP               6 (in)   # perform 1 in []
              9 LOAD_CONST               2 ('a')  # now load 'a'
             12 COMPARE_OP               6 (in)   # compare result of (1 in []) with 'a'
                                                  # throws Error coz (False in 'a') is
                                                  # TypeError
             15 RETURN_VALUE   



In [153]: def func2():
   .....:     return 1 in ([] in 'a')
   .....: 

In [154]: dis.dis(func2)
  2           0 LOAD_CONST               1 (1)
              3 BUILD_LIST               0
              6 LOAD_CONST               2 ('a') 
              9 COMPARE_OP               6 (in)  # perform ([] in 'a'), which is 
                                                 # Incorrect, so it throws TypeError
             12 COMPARE_OP               6 (in)  # if no Error then 
                                                 # compare 1 with the result of ([] in 'a')
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>12661393</id><snippet>if len(sentences) == 1:
    print sentences[0] + 'STRING'
elif len(sentences) &gt; 1:
    isentences = ('%s%s%d' % (s, 'STRING', i) for i, s in enumerate(sentences, 1))
    print ' '.join(isentences)
</snippet></ROW><ROW><id>12661393</id><snippet>    isentences = ('%s%s%d' % (s, 'STRING', i) for i, s in enumerate(sentences, 1))
    i.string.replace_with(' '.join(isentences))
</snippet></ROW><ROW><id>12661527</id><snippet>other</snippet></ROW><ROW><id>12661527</id><snippet>__mul__</snippet></ROW><ROW><id>12661527</id><snippet>MyVector</snippet></ROW><ROW><id>12661527</id><snippet>vector</snippet></ROW><ROW><id>12661527</id><snippet>def __mul__(self,other):
    dot=sum(p*q for p,q in zip(self.vector, other.vector))
    return (dot)
</snippet></ROW><ROW><id>12661527</id><snippet>[]</snippet></ROW><ROW><id>12661527</id><snippet> def __init__(self,vector=None):
    self.vector=vector if vector else []
</snippet></ROW><ROW><id>12661563</id><snippet>timeout()</snippet></ROW><ROW><id>12661563</id><snippet>updateTimerDisplay</snippet></ROW><ROW><id>12661563</id><snippet>   self.inicio - 1
</snippet></ROW><ROW><id>12661563</id><snippet>self.inicio</snippet></ROW><ROW><id>12661563</id><snippet>self.inicio</snippet></ROW><ROW><id>12661563</id><snippet>updateTimerDisplay</snippet></ROW><ROW><id>12661563</id><snippet>   self.inicio -= 1
</snippet></ROW><ROW><id>12661563</id><snippet>self.inicio</snippet></ROW><ROW><id>12661563</id><snippet>updateTimerDisplay</snippet></ROW><ROW><id>12661563</id><snippet>updateTimerDisplay</snippet></ROW><ROW><id>12661563</id><snippet> def updateTimerDisplay(self):
  text = "%d:%02d" % (self.inicio/60,self.inicio % 60)
  self.ui.QLCDNumber.display(text)
</snippet></ROW><ROW><id>12661563</id><snippet> def startTimer(self):
  self.inicio = 180
  self.updateTimerDisplay()
  self.timer.start(1000)
</snippet></ROW><ROW><id>12661563</id><snippet>iniciar</snippet></ROW><ROW><id>12661563</id><snippet>clicked()</snippet></ROW><ROW><id>12661563</id><snippet>updateTimerDisplay</snippet></ROW><ROW><id>12661563</id><snippet> def timerTick(self):
  self.inicio -= 1
  self.updateTimerDisplay()
  if self.inicio &lt;= 0:
   self.timer.stop()
</snippet></ROW><ROW><id>12661563</id><snippet>timeout()</snippet></ROW><ROW><id>12661563</id><snippet>  self.timer.timeout.connect(self.timerTick)
</snippet></ROW><ROW><id>12661638</id><snippet>$addToSet</snippet></ROW><ROW><id>12661638</id><snippet>$set</snippet></ROW><ROW><id>12661638</id><snippet>db.collection.update({name: 'a name'}, {$set: {'links.' + toType: to_link}})
</snippet></ROW><ROW><id>12661748</id><snippet>bytes</snippet></ROW><ROW><id>12661748</id><snippet>str</snippet></ROW><ROW><id>12661871</id><snippet>Class2</snippet></ROW><ROW><id>12661931</id><snippet>print sorted(mydictionary.items(), key=operator.itemgetter(1), reverse=True)[:10]
</snippet></ROW><ROW><id>12662016</id><snippet>c=db.cursor()
c.execute("""select * from table""")
output = []
for row in c:
    output.append(float(row[4]))
</snippet></ROW><ROW><id>12662070</id><snippet>__init__</snippet></ROW><ROW><id>12662070</id><snippet>_find_pyopencl_include_path</snippet></ROW><ROW><id>12662070</id><snippet>imp</snippet></ROW><ROW><id>12662070</id><snippet>pyopencl</snippet></ROW><ROW><id>12662098</id><snippet>password</snippet></ROW><ROW><id>12662098</id><snippet>key = password[:32]+b'\x00'*(32-len(password))
</snippet></ROW><ROW><id>12662098</id><snippet>password.ljust(32, '\0')
</snippet></ROW><ROW><id>12662573</id><snippet>...
returnList = [title['title'] for title in pages]
return returnList
</snippet></ROW><ROW><id>12662573</id><snippet>answerList = recentchanges()
for element in answerList:
    print element
</snippet></ROW><ROW><id>12662814</id><snippet>for i in x, y: foo(i)</snippet></ROW><ROW><id>12662814</id><snippet>foo(x); foo(y)</snippet></ROW><ROW><id>12663166</id><snippet>printThis</snippet></ROW><ROW><id>12663166</id><snippet>self.foo = self.printThis(1)
</snippet></ROW><ROW><id>12663198</id><snippet>π(n)</snippet></ROW><ROW><id>12663198</id><snippet>n</snippet></ROW><ROW><id>12663198</id><snippet>π(n)</snippet></ROW><ROW><id>12663394</id><snippet>''.join(sorted(list)).replace('.','')</snippet></ROW><ROW><id>12663394</id><snippet>import csv
import collections
import itertools

grids = dict()
groups = dict()

with open("connect.csv", "r") as fp:
    reader = csv.reader(fp)
    for line in reader:
        # extract month/year from the last column
        date = line.pop(-1)
        month,year = date.split('/')
        # clean empty names
        line = [name.strip() for name in line if name.strip()]
        # generate group name
        group = ''.join(sorted(line)).replace('.','')
        #increment group count
        if group in groups:
            groups[group]+=1
        else:
            groups[group]=1
        #if grid exists for month, update else create
        if (month,year) in grids:
            grid = grids[(month,year)]
        else:
            grid = collections.Counter()
            grids[(month,year)] = grid
        # count single works
        if len(line) == 1:
            grid[line[0], line[0]] += 1
        # do pairwise counts
        for pair in itertools.combinations(line, 2):
            grid[pair] += 1
            grid[pair[::-1]] += 1

for date,grid in grids.items():
    actors = sorted(set(pair[0] for pair in grid))
    #Filename from date
    filename = "connection_grid_%s_%s.csv" % date
    with open(filename, "w") as fp:
        writer = csv.writer(fp)
        writer.writerow([''] + actors)
        for actor in actors:
            line = [actor,] + [grid[actor, other] for other in actors]
            writer.writerow(line)

with open('groups.csv','w') as fp:
    writer = csv.writer(fp)
    for item in sorted(groups.items()):
        writer.writerow(item)
</snippet></ROW><ROW><id>12663400</id><snippet>r</snippet></ROW><ROW><id>12663400</id><snippet>x</snippet></ROW><ROW><id>12663400</id><snippet>"old x"</snippet></ROW><ROW><id>12663400</id><snippet>"new x" = 3.9*(old x)*(1 - (old x))</snippet></ROW><ROW><id>12663404</id><snippet>import re
results = re.findall(r'\bhttp://www\.someDomainName\.com/\d+\b', long_string)
</snippet></ROW><ROW><id>12663541</id><snippet>image/png
image/jpeg
image/gif
</snippet></ROW><ROW><id>12663541</id><snippet>.pdf    application/pdf

.doc    application/msword
.xls    application/vnd.ms-excel

.rar    application/x-rar-compressed
.7z     application/x-7z-compressed
.zip    application/zip

.xlsx   application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
.xltx   application/vnd.openxmlformats-officedocument.spreadsheetml.template
.potx   application/vnd.openxmlformats-officedocument.presentationml.template
.ppsx   application/vnd.openxmlformats-officedocument.presentationml.slideshow
.pptx   application/vnd.openxmlformats-officedocument.presentationml.presentation
.sldx   application/vnd.openxmlformats-officedocument.presentationml.slide
.docx   application/vnd.openxmlformats-officedocument.wordprocessingml.document
.dotx   application/vnd.openxmlformats-officedocument.wordprocessingml.template
</snippet></ROW><ROW><id>12663541</id><snippet>mimetypes</snippet></ROW><ROW><id>12663603</id><snippet>input_with_timeout</snippet></ROW><ROW><id>12663603</id><snippet>def player():
    card1 = deck()
    card2 = deck()
    hand = card1 + card2
    print "Cards dealt: %d and %d" % (card1, card2)
    while hand &lt;= 21:
        choice = input_with_timeout("Would you like to hit or stand?: ", 3, "stand")
        print choice
        if choice == "hit":
            hand = hand + deck()
            print "Current Total: %d" % hand        
        elif choice == "stand": 
            return hand 
</snippet></ROW><ROW><id>12663648</id><snippet>--user</snippet></ROW><ROW><id>12663648</id><snippet>--user</snippet></ROW><ROW><id>12663648</id><snippet>~/.local</snippet></ROW><ROW><id>12663648</id><snippet>~/.local/lib/python$VERSION/site-packages</snippet></ROW><ROW><id>12663648</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>12663648</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>12663648</id><snippet>~/.local/lib/python$VERSION/site-packages</snippet></ROW><ROW><id>12663648</id><snippet>--user</snippet></ROW><ROW><id>12663648</id><snippet>--prefix</snippet></ROW><ROW><id>12663648</id><snippet>--prefix=~/.local</snippet></ROW><ROW><id>12663735</id><snippet>&gt;&gt;&gt; a = [(1, 2), (3, 4), (4, 5)]
... b = [1, 2, 3]
&gt;&gt;&gt; [x[0]*y for x, y in zip(a, b)]
[1, 6, 12]
</snippet></ROW><ROW><id>12663735</id><snippet>zip</snippet></ROW><ROW><id>12663785</id><snippet>from gimpfu import pdb, main, register, PF_STRING
from gimpenums import ORIENTATION_HORIZONTAL

def flip(file):
    image = pdb.gimp_file_load(file, file)
    drawable = pdb.gimp_image_get_active_layer(image)
    pdb.gimp_image_flip(image, ORIENTATION_HORIZONTAL)
    pdb.gimp_file_save(image, drawable, file, file)
    pdb.gimp_image_delete(image)

args = [(PF_STRING, 'file', 'GlobPattern', '*.*')]
register('python-flip', '', '', '', '', '', '', '', args, [], flip)

main()
</snippet></ROW><ROW><id>12663785</id><snippet>gimp -i -b '(python-flip RUN-NONINTERACTIVE "/tmp/test.jpg")' -b '(gimp-quit 0)'
</snippet></ROW><ROW><id>12663785</id><snippet>from subprocess import check_output
cmd = '(python-flip RUN-NONINTERACTIVE "/tmp/test.jpg")'
output = check_output(['/usr/bin/gimp', '-i', '-b', cmd, '-b', '(gimp-quit 0)'])
print output
</snippet></ROW><ROW><id>12663809</id><snippet>from collections import Counter
myDict = {'a':'ATGTTCN','b':'ATTTCCG'}
result = [(i,Counter(site)) for i,site in enumerate(zip(*myDict.values()))]
result = [x for x in result if x[1].most_common()[0][1] &lt; 2]
for site,count in result:
    print 'Site {}: {}'.format(site,str(count)[9:-2])
</snippet></ROW><ROW><id>12663809</id><snippet>Site 2: 'T': 1, 'G': 1
Site 4: 'C': 1, 'T': 1
Site 6: 'G': 1, 'N': 1
</snippet></ROW><ROW><id>12663813</id><snippet>site-packages</snippet></ROW><ROW><id>12663813</id><snippet>echo $path</snippet></ROW><ROW><id>12663813</id><snippet>import sys; print sys.executable</snippet></ROW><ROW><id>12663881</id><snippet>points = [(x1,y1,z1), (x2,y2,z2), ...]  
</snippet></ROW><ROW><id>12663881</id><snippet>points_zipped = zip(*points)  
xvals = points_zipped[0]  
yvals = points_zipped[1]  
</snippet></ROW><ROW><id>12663881</id><snippet>xmin, ymin = min(xvals), min(yvals)
xmax, ymax = max(xvals), max(yvals)
</snippet></ROW><ROW><id>12663881</id><snippet>from collections import defaultdict
minpoints = defaultdict(lambda: defaultdict(lambda : 0.))  # 0. or another suitable min value  
for p in points:  
    minpoints[p[0]][p[1]] = min(p[2], minpoints[p[0]][p[1]])  
</snippet></ROW><ROW><id>12664046</id><snippet>&gt;&gt;&gt; d = {'2': '150.99', '3': '99.50', '15': '5.07'}
&gt;&gt;&gt; d = dict((int(k),float(v)) for k, v in d.iteritems())
&gt;&gt;&gt; d
{2: 150.99000000000001, 3: 99.5, 15: 5.0700000000000003}
</snippet></ROW><ROW><id>12664214</id><snippet>filename</snippet></ROW><ROW><id>12664214</id><snippet>try:
    inputFile = open('nosuchfile', 'r')
except IOError as exception:
    print ('error: %s: %r' % (exception.strerror, exception.filename))
</snippet></ROW><ROW><id>12664318</id><snippet>export PYTHONPATH
</snippet></ROW><ROW><id>12664461</id><snippet>target = 'Owl'
animal = Definition.objects.get(name=target)
previous_animal = Definition.objects.order_by('name').filter(name__lt=target)[0]
next_animal = Definition.objects.order_by('name').filter(name__gt=target)[0]
</snippet></ROW><ROW><id>12664667</id><snippet>app2.models</snippet></ROW><ROW><id>12664667</id><snippet>Validating models... 
0 errors found
</snippet></ROW><ROW><id>12664893</id><snippet>intercept</snippet></ROW><ROW><id>12664893</id><snippet>model_profit_tr = pd.ols(y=df_closed['Profit cum (%)'], 
                         x=df_closed['Order'], 
                         intercept=False)
</snippet></ROW><ROW><id>12664893</id><snippet>In [65]: help(pandas.ols) 
Help on function ols in module pandas.stats.interface:

ols(**kwargs)

    [snip]

    Parameters
    ----------
    y: Series or DataFrame
        See above for types
    x: Series, DataFrame, dict of Series, dict of DataFrame, Panel
    weights : Series or ndarray
        The weights are presumed to be (proportional to) the inverse of the
        variance of the observations.  That is, if the variables are to be
        transformed by 1/sqrt(W) you must supply weights = 1/W
    intercept: bool
        True if you want an intercept.  Defaults to True.
    nw_lags: None or int
        Number of Newey-West lags.  Defaults to None.

    [snip]
</snippet></ROW><ROW><id>12665128</id><snippet>python2</snippet></ROW><ROW><id>12665128</id><snippet>python3</snippet></ROW><ROW><id>12665128</id><snippet>$PATH</snippet></ROW><ROW><id>12665128</id><snippet>env</snippet></ROW><ROW><id>12665128</id><snippet>#!/usr/bin/env python2
</snippet></ROW><ROW><id>12665128</id><snippet>#!/usr/bin/env python3
</snippet></ROW><ROW><id>12665128</id><snippet>$ chmod +x script.py
$ ./script.py
</snippet></ROW></DATA>